command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1256174	File	data/converged/CVE-2019-16718~_radare2/dis.c								
ANR	1256175	DeclStmt									
ANR	1256176	Decl							struct state	struct state	_state
ANR	1256177	Function	get_state	16:0:271:379							
ANR	1256178	FunctionDef	get_state ()		1256177	0					
ANR	1256179	CompoundStatement		16:44:315:379	1256177	0					
ANR	1256180	ExpressionStatement	"memset ( & _state , 0 , sizeof ( struct state ) )"	17:1:318:360	1256177	0	True				
ANR	1256181	CallExpression	"memset ( & _state , 0 , sizeof ( struct state ) )"		1256177	0					
ANR	1256182	Callee	memset		1256177	0					
ANR	1256183	Identifier	memset		1256177	0					
ANR	1256184	ArgumentList	& _state		1256177	1					
ANR	1256185	Argument	& _state		1256177	0					
ANR	1256186	UnaryOperationExpression	& _state		1256177	0					
ANR	1256187	UnaryOperator	&		1256177	0					
ANR	1256188	Identifier	_state		1256177	1					
ANR	1256189	Argument	0		1256177	1					
ANR	1256190	PrimaryExpression	0		1256177	0					
ANR	1256191	Argument	sizeof ( struct state )		1256177	2					
ANR	1256192	SizeofExpression	sizeof ( struct state )		1256177	0					
ANR	1256193	Sizeof	sizeof		1256177	0					
ANR	1256194	SizeofOperand	struct state		1256177	1					
ANR	1256195	ReturnStatement	return & _state ;	18:1:363:377	1256177	1	True				
ANR	1256196	UnaryOperationExpression	& _state		1256177	0					
ANR	1256197	UnaryOperator	&		1256177	0					
ANR	1256198	Identifier	_state		1256177	1					
ANR	1256199	ReturnType	static inline struct state *		1256177	1					
ANR	1256200	Identifier	get_state		1256177	2					
ANR	1256201	ParameterList			1256177	3					
ANR	1256202	CFGEntryNode	ENTRY		1256177		True				
ANR	1256203	CFGExitNode	EXIT		1256177		True				
ANR	1256204	Symbol	& _state		1256177						
ANR	1256205	Function	i2u16	21:0:382:456							
ANR	1256206	FunctionDef	i2u16 (struct instruction * in)		1256205	0					
ANR	1256207	CompoundStatement		21:46:428:456	1256205	0					
ANR	1256208	ReturnStatement	return * ( ( uint16_t * ) in ) ;	22:1:431:454	1256205	0	True				
ANR	1256209	UnaryOperationExpression	* ( ( uint16_t * ) in )		1256205	0					
ANR	1256210	UnaryOperator	*		1256205	0					
ANR	1256211	CastExpression	( uint16_t * ) in		1256205	1					
ANR	1256212	CastTarget	uint16_t *		1256205	0					
ANR	1256213	Identifier	in		1256205	1					
ANR	1256214	ReturnType	static uint16_t		1256205	1					
ANR	1256215	Identifier	i2u16		1256205	2					
ANR	1256216	ParameterList	struct instruction * in		1256205	3					
ANR	1256217	Parameter	struct instruction * in	21:22:404:425	1256205	0	True				
ANR	1256218	ParameterType	struct instruction *		1256205	0					
ANR	1256219	Identifier	in		1256205	1					
ANR	1256220	CFGEntryNode	ENTRY		1256205		True				
ANR	1256221	CFGExitNode	EXIT		1256205		True				
ANR	1256222	Symbol	in		1256205						
ANR	1256223	Symbol	* ( ( uint16_t * ) in )		1256205						
ANR	1256224	Symbol	* in		1256205						
ANR	1256225	Function	output	26:0:465:621							
ANR	1256226	FunctionDef	"output (struct state * s , char * fmt)"		1256225	0					
ANR	1256227	CompoundStatement		27:0:517:621	1256225	0					
ANR	1256228	IdentifierDeclStatement	va_list ap ;	28:1:520:530	1256225	0	True				
ANR	1256229	IdentifierDecl	ap		1256225	0					
ANR	1256230	IdentifierDeclType	va_list		1256225	0					
ANR	1256231	Identifier	ap		1256225	1					
ANR	1256232	ExpressionStatement	"va_start ( ap , fmt )"	30:1:534:551	1256225	1	True				
ANR	1256233	CallExpression	"va_start ( ap , fmt )"		1256225	0					
ANR	1256234	Callee	va_start		1256225	0					
ANR	1256235	Identifier	va_start		1256225	0					
ANR	1256236	ArgumentList	ap		1256225	1					
ANR	1256237	Argument	ap		1256225	0					
ANR	1256238	Identifier	ap		1256225	0					
ANR	1256239	Argument	fmt		1256225	1					
ANR	1256240	Identifier	fmt		1256225	0					
ANR	1256241	ExpressionStatement	"cons_printf ( fmt , ap )"	31:1:554:574	1256225	2	True				
ANR	1256242	CallExpression	"cons_printf ( fmt , ap )"		1256225	0					
ANR	1256243	Callee	cons_printf		1256225	0					
ANR	1256244	Identifier	cons_printf		1256225	0					
ANR	1256245	ArgumentList	fmt		1256225	1					
ANR	1256246	Argument	fmt		1256225	0					
ANR	1256247	Identifier	fmt		1256225	0					
ANR	1256248	Argument	ap		1256225	1					
ANR	1256249	Identifier	ap		1256225	0					
ANR	1256250	ExpressionStatement	va_end ( ap )	33:1:609:619	1256225	3	True				
ANR	1256251	CallExpression	va_end ( ap )		1256225	0					
ANR	1256252	Callee	va_end		1256225	0					
ANR	1256253	Identifier	va_end		1256225	0					
ANR	1256254	ArgumentList	ap		1256225	1					
ANR	1256255	Argument	ap		1256225	0					
ANR	1256256	Identifier	ap		1256225	0					
ANR	1256257	ReturnType	static void		1256225	1					
ANR	1256258	Identifier	output		1256225	2					
ANR	1256259	ParameterList	"struct state * s , char * fmt"		1256225	3					
ANR	1256260	Parameter	struct state * s	26:19:484:498	1256225	0	True				
ANR	1256261	ParameterType	struct state *		1256225	0					
ANR	1256262	Identifier	s		1256225	1					
ANR	1256263	Parameter	char * fmt	26:36:501:509	1256225	1	True				
ANR	1256264	ParameterType	char *		1256225	0					
ANR	1256265	Identifier	fmt		1256225	1					
ANR	1256266	CFGEntryNode	ENTRY		1256225		True				
ANR	1256267	CFGExitNode	EXIT		1256225		True				
ANR	1256268	Symbol	s		1256225						
ANR	1256269	Symbol	fmt		1256225						
ANR	1256270	Symbol	ap		1256225						
ANR	1256271	Function	decode_unknown	37:0:631:879							
ANR	1256272	FunctionDef	"decode_unknown (struct state * s , struct directive * d)"		1256271	0					
ANR	1256273	CompoundStatement		37:65:696:879	1256271	0					
ANR	1256274	ExpressionStatement	"printf ( ""Opcode 0x%x reg %d mode %d operand 0x%x"" , in -> in_opcode , in -> in_reg , in -> in_mode , in -> in_operand )"	39:1:705:818	1256271	0	True				
ANR	1256275	CallExpression	"printf ( ""Opcode 0x%x reg %d mode %d operand 0x%x"" , in -> in_opcode , in -> in_reg , in -> in_mode , in -> in_operand )"		1256271	0					
ANR	1256276	Callee	printf		1256271	0					
ANR	1256277	Identifier	printf		1256271	0					
ANR	1256278	ArgumentList	"""Opcode 0x%x reg %d mode %d operand 0x%x"""		1256271	1					
ANR	1256279	Argument	"""Opcode 0x%x reg %d mode %d operand 0x%x"""		1256271	0					
ANR	1256280	PrimaryExpression	"""Opcode 0x%x reg %d mode %d operand 0x%x"""		1256271	0					
ANR	1256281	Argument	in -> in_opcode		1256271	1					
ANR	1256282	PtrMemberAccess	in -> in_opcode		1256271	0					
ANR	1256283	Identifier	in		1256271	0					
ANR	1256284	Identifier	in_opcode		1256271	1					
ANR	1256285	Argument	in -> in_reg		1256271	2					
ANR	1256286	PtrMemberAccess	in -> in_reg		1256271	0					
ANR	1256287	Identifier	in		1256271	0					
ANR	1256288	Identifier	in_reg		1256271	1					
ANR	1256289	Argument	in -> in_mode		1256271	3					
ANR	1256290	PtrMemberAccess	in -> in_mode		1256271	0					
ANR	1256291	Identifier	in		1256271	0					
ANR	1256292	Identifier	in_mode		1256271	1					
ANR	1256293	Argument	in -> in_operand		1256271	4					
ANR	1256294	PtrMemberAccess	in -> in_operand		1256271	0					
ANR	1256295	Identifier	in		1256271	0					
ANR	1256296	Identifier	in_operand		1256271	1					
ANR	1256297	ExpressionStatement	"sprintf ( d -> d_asm , ""DC 0x%4x"" , i2u16 ( & d -> d_inst ) )"	42:1:828:877	1256271	1	True				
ANR	1256298	CallExpression	"sprintf ( d -> d_asm , ""DC 0x%4x"" , i2u16 ( & d -> d_inst ) )"		1256271	0					
ANR	1256299	Callee	sprintf		1256271	0					
ANR	1256300	Identifier	sprintf		1256271	0					
ANR	1256301	ArgumentList	d -> d_asm		1256271	1					
ANR	1256302	Argument	d -> d_asm		1256271	0					
ANR	1256303	PtrMemberAccess	d -> d_asm		1256271	0					
ANR	1256304	Identifier	d		1256271	0					
ANR	1256305	Identifier	d_asm		1256271	1					
ANR	1256306	Argument	"""DC 0x%4x"""		1256271	1					
ANR	1256307	PrimaryExpression	"""DC 0x%4x"""		1256271	0					
ANR	1256308	Argument	i2u16 ( & d -> d_inst )		1256271	2					
ANR	1256309	CallExpression	i2u16 ( & d -> d_inst )		1256271	0					
ANR	1256310	Callee	i2u16		1256271	0					
ANR	1256311	Identifier	i2u16		1256271	0					
ANR	1256312	ArgumentList	& d -> d_inst		1256271	1					
ANR	1256313	Argument	& d -> d_inst		1256271	0					
ANR	1256314	UnaryOperationExpression	& d -> d_inst		1256271	0					
ANR	1256315	UnaryOperator	&		1256271	0					
ANR	1256316	PtrMemberAccess	d -> d_inst		1256271	1					
ANR	1256317	Identifier	d		1256271	0					
ANR	1256318	Identifier	d_inst		1256271	1					
ANR	1256319	ReturnType	static void		1256271	1					
ANR	1256320	Identifier	decode_unknown		1256271	2					
ANR	1256321	ParameterList	"struct state * s , struct directive * d"		1256271	3					
ANR	1256322	Parameter	struct state * s	37:27:658:672	1256271	0	True				
ANR	1256323	ParameterType	struct state *		1256271	0					
ANR	1256324	Identifier	s		1256271	1					
ANR	1256325	Parameter	struct directive * d	37:44:675:693	1256271	1	True				
ANR	1256326	ParameterType	struct directive *		1256271	0					
ANR	1256327	Identifier	d		1256271	1					
ANR	1256328	CFGEntryNode	ENTRY		1256271		True				
ANR	1256329	CFGExitNode	EXIT		1256271		True				
ANR	1256330	Symbol	in -> in_reg		1256271						
ANR	1256331	Symbol	i2u16		1256271						
ANR	1256332	Symbol	in -> in_mode		1256271						
ANR	1256333	Symbol	s		1256271						
ANR	1256334	Symbol	d -> d_asm		1256271						
ANR	1256335	Symbol	d		1256271						
ANR	1256336	Symbol	in -> in_operand		1256271						
ANR	1256337	Symbol	in		1256271						
ANR	1256338	Symbol	* in		1256271						
ANR	1256339	Symbol	in -> in_opcode		1256271						
ANR	1256340	Symbol	* d		1256271						
ANR	1256341	Symbol	& d -> d_inst		1256271						
ANR	1256342	Function	decode_fixed	45:0:882:1474							
ANR	1256343	FunctionDef	"decode_fixed (struct state * s , struct directive * d)"		1256342	0					
ANR	1256344	CompoundStatement		45:62:944:1474	1256342	0					
ANR	1256345	ExpressionStatement	* d -> d_asm = '\\0'	46:1:947:963	1256342	0	True				
ANR	1256346	AssignmentExpression	* d -> d_asm = '\\0'		1256342	0		=			
ANR	1256347	UnaryOperationExpression	* d -> d_asm		1256342	0					
ANR	1256348	UnaryOperator	*		1256342	0					
ANR	1256349	PtrMemberAccess	d -> d_asm		1256342	1					
ANR	1256350	Identifier	d		1256342	0					
ANR	1256351	Identifier	d_asm		1256342	1					
ANR	1256352	PrimaryExpression	'\\0'		1256342	1					
ANR	1256353	SwitchStatement	switch ( i2u16 ( & d -> d_inst ) )		1256342	1					
ANR	1256354	Condition	i2u16 ( & d -> d_inst )	47:9:974:991	1256342	0	True				
ANR	1256355	CallExpression	i2u16 ( & d -> d_inst )		1256342	0					
ANR	1256356	Callee	i2u16		1256342	0					
ANR	1256357	Identifier	i2u16		1256342	0					
ANR	1256358	ArgumentList	& d -> d_inst		1256342	1					
ANR	1256359	Argument	& d -> d_inst		1256342	0					
ANR	1256360	UnaryOperationExpression	& d -> d_inst		1256342	0					
ANR	1256361	UnaryOperator	&		1256342	0					
ANR	1256362	PtrMemberAccess	d -> d_inst		1256342	1					
ANR	1256363	Identifier	d		1256342	0					
ANR	1256364	Identifier	d_inst		1256342	1					
ANR	1256365	CompoundStatement		3:29:49:49	1256342	1					
ANR	1256366	Label	case INST_NOP :	48:1:997:1010	1256342	0	True				
ANR	1256367	Identifier	INST_NOP		1256342	0					
ANR	1256368	IfStatement	if ( s -> s_prefix )		1256342	1					
ANR	1256369	Condition	s -> s_prefix	49:6:1018:1028	1256342	0	True				
ANR	1256370	PtrMemberAccess	s -> s_prefix		1256342	0					
ANR	1256371	Identifier	s		1256342	0					
ANR	1256372	Identifier	s_prefix		1256342	1					
ANR	1256373	CompoundStatement		5:19:86:86	1256342	1					
ANR	1256374	ReturnStatement	return 0 ;	50:3:1036:1044	1256342	0	True				
ANR	1256375	PrimaryExpression	0		1256342	0					
ANR	1256376	ExpressionStatement	s -> s_nop ++	52:2:1052:1062	1256342	2	True				
ANR	1256377	PostIncDecOperationExpression	s -> s_nop ++		1256342	0					
ANR	1256378	PtrMemberAccess	s -> s_nop		1256342	0					
ANR	1256379	Identifier	s		1256342	0					
ANR	1256380	Identifier	s_nop		1256342	1					
ANR	1256381	IncDec	++		1256342	1					
ANR	1256382	ExpressionStatement	"strcpy ( d -> d_asm , ""nop"" )"	53:2:1066:1089	1256342	3	True				
ANR	1256383	CallExpression	"strcpy ( d -> d_asm , ""nop"" )"		1256342	0					
ANR	1256384	Callee	strcpy		1256342	0					
ANR	1256385	Identifier	strcpy		1256342	0					
ANR	1256386	ArgumentList	d -> d_asm		1256342	1					
ANR	1256387	Argument	d -> d_asm		1256342	0					
ANR	1256388	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256389	Identifier	d		1256342	0					
ANR	1256390	Identifier	d_asm		1256342	1					
ANR	1256391	Argument	"""nop"""		1256342	1					
ANR	1256392	PrimaryExpression	"""nop"""		1256342	0					
ANR	1256393	BreakStatement	break ;	54:2:1093:1098	1256342	4	True				
ANR	1256394	Label	case INST_BRK :	55:1:1101:1114	1256342	5	True				
ANR	1256395	Identifier	INST_BRK		1256342	0					
ANR	1256396	ExpressionStatement	"strcpy ( d -> d_asm , ""brk"" )"	55:16:1116:1139	1256342	6	True				
ANR	1256397	CallExpression	"strcpy ( d -> d_asm , ""brk"" )"		1256342	0					
ANR	1256398	Callee	strcpy		1256342	0					
ANR	1256399	Identifier	strcpy		1256342	0					
ANR	1256400	ArgumentList	d -> d_asm		1256342	1					
ANR	1256401	Argument	d -> d_asm		1256342	0					
ANR	1256402	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256403	Identifier	d		1256342	0					
ANR	1256404	Identifier	d_asm		1256342	1					
ANR	1256405	Argument	"""brk"""		1256342	1					
ANR	1256406	PrimaryExpression	"""brk"""		1256342	0					
ANR	1256407	BreakStatement	break ;	55:41:1141:1146	1256342	7	True				
ANR	1256408	Label	case INST_SLEEP :	56:1:1149:1164	1256342	8	True				
ANR	1256409	Identifier	INST_SLEEP		1256342	0					
ANR	1256410	ExpressionStatement	"strcpy ( d -> d_asm , ""sleep"" )"	56:18:1166:1191	1256342	9	True				
ANR	1256411	CallExpression	"strcpy ( d -> d_asm , ""sleep"" )"		1256342	0					
ANR	1256412	Callee	strcpy		1256342	0					
ANR	1256413	Identifier	strcpy		1256342	0					
ANR	1256414	ArgumentList	d -> d_asm		1256342	1					
ANR	1256415	Argument	d -> d_asm		1256342	0					
ANR	1256416	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256417	Identifier	d		1256342	0					
ANR	1256418	Identifier	d_asm		1256342	1					
ANR	1256419	Argument	"""sleep"""		1256342	1					
ANR	1256420	PrimaryExpression	"""sleep"""		1256342	0					
ANR	1256421	BreakStatement	break ;	56:45:1193:1198	1256342	10	True				
ANR	1256422	Label	case INST_SIF :	57:1:1201:1214	1256342	11	True				
ANR	1256423	Identifier	INST_SIF		1256342	0					
ANR	1256424	ExpressionStatement	"strcpy ( d -> d_asm , ""sif"" )"	57:16:1216:1239	1256342	12	True				
ANR	1256425	CallExpression	"strcpy ( d -> d_asm , ""sif"" )"		1256342	0					
ANR	1256426	Callee	strcpy		1256342	0					
ANR	1256427	Identifier	strcpy		1256342	0					
ANR	1256428	ArgumentList	d -> d_asm		1256342	1					
ANR	1256429	Argument	d -> d_asm		1256342	0					
ANR	1256430	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256431	Identifier	d		1256342	0					
ANR	1256432	Identifier	d_asm		1256342	1					
ANR	1256433	Argument	"""sif"""		1256342	1					
ANR	1256434	PrimaryExpression	"""sif"""		1256342	0					
ANR	1256435	BreakStatement	break ;	57:41:1241:1246	1256342	13	True				
ANR	1256436	Label	case INST_BC :	58:1:1249:1261	1256342	14	True				
ANR	1256437	Identifier	INST_BC		1256342	0					
ANR	1256438	ExpressionStatement	"strcpy ( d -> d_asm , ""bc"" )"	58:15:1263:1285	1256342	15	True				
ANR	1256439	CallExpression	"strcpy ( d -> d_asm , ""bc"" )"		1256342	0					
ANR	1256440	Callee	strcpy		1256342	0					
ANR	1256441	Identifier	strcpy		1256342	0					
ANR	1256442	ArgumentList	d -> d_asm		1256342	1					
ANR	1256443	Argument	d -> d_asm		1256342	0					
ANR	1256444	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256445	Identifier	d		1256342	0					
ANR	1256446	Identifier	d_asm		1256342	1					
ANR	1256447	Argument	"""bc"""		1256342	1					
ANR	1256448	PrimaryExpression	"""bc"""		1256342	0					
ANR	1256449	BreakStatement	break ;	58:39:1287:1292	1256342	16	True				
ANR	1256450	Label	case INST_BRXL :	59:1:1295:1309	1256342	17	True				
ANR	1256451	Identifier	INST_BRXL		1256342	0					
ANR	1256452	ExpressionStatement	"strcpy ( d -> d_asm , ""brxl"" )"	59:17:1311:1335	1256342	18	True				
ANR	1256453	CallExpression	"strcpy ( d -> d_asm , ""brxl"" )"		1256342	0					
ANR	1256454	Callee	strcpy		1256342	0					
ANR	1256455	Identifier	strcpy		1256342	0					
ANR	1256456	ArgumentList	d -> d_asm		1256342	1					
ANR	1256457	Argument	d -> d_asm		1256342	0					
ANR	1256458	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256459	Identifier	d		1256342	0					
ANR	1256460	Identifier	d_asm		1256342	1					
ANR	1256461	Argument	"""brxl"""		1256342	1					
ANR	1256462	PrimaryExpression	"""brxl"""		1256342	0					
ANR	1256463	BreakStatement	break ;	59:43:1337:1342	1256342	19	True				
ANR	1256464	Label	case INST_U :	60:1:1345:1356	1256342	20	True				
ANR	1256465	Identifier	INST_U		1256342	0					
ANR	1256466	ExpressionStatement	"strcpy ( d -> d_asm , """" )"	60:14:1358:1378	1256342	21	True				
ANR	1256467	CallExpression	"strcpy ( d -> d_asm , """" )"		1256342	0					
ANR	1256468	Callee	strcpy		1256342	0					
ANR	1256469	Identifier	strcpy		1256342	0					
ANR	1256470	ArgumentList	d -> d_asm		1256342	1					
ANR	1256471	Argument	d -> d_asm		1256342	0					
ANR	1256472	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256473	Identifier	d		1256342	0					
ANR	1256474	Identifier	d_asm		1256342	1					
ANR	1256475	Argument	""""""		1256342	1					
ANR	1256476	PrimaryExpression	""""""		1256342	0					
ANR	1256477	ExpressionStatement	s -> s_u = 1	60:36:1380:1390	1256342	22	True				
ANR	1256478	AssignmentExpression	s -> s_u = 1		1256342	0		=			
ANR	1256479	PtrMemberAccess	s -> s_u		1256342	0					
ANR	1256480	Identifier	s		1256342	0					
ANR	1256481	Identifier	s_u		1256342	1					
ANR	1256482	PrimaryExpression	1		1256342	1					
ANR	1256483	BreakStatement	break ;	60:48:1392:1397	1256342	23	True				
ANR	1256484	Label	case INST_RTS :	61:1:1400:1413	1256342	24	True				
ANR	1256485	Identifier	INST_RTS		1256342	0					
ANR	1256486	ExpressionStatement	"strcpy ( d -> d_asm , ""rts"" )"	61:16:1415:1438	1256342	25	True				
ANR	1256487	CallExpression	"strcpy ( d -> d_asm , ""rts"" )"		1256342	0					
ANR	1256488	Callee	strcpy		1256342	0					
ANR	1256489	Identifier	strcpy		1256342	0					
ANR	1256490	ArgumentList	d -> d_asm		1256342	1					
ANR	1256491	Argument	d -> d_asm		1256342	0					
ANR	1256492	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256493	Identifier	d		1256342	0					
ANR	1256494	Identifier	d_asm		1256342	1					
ANR	1256495	Argument	"""rts"""		1256342	1					
ANR	1256496	PrimaryExpression	"""rts"""		1256342	0					
ANR	1256497	BreakStatement	break ;	61:41:1440:1445	1256342	26	True				
ANR	1256498	ReturnStatement	return d -> d_asm [ 0 ] != 0 ;	63:1:1451:1472	1256342	2	True				
ANR	1256499	EqualityExpression	d -> d_asm [ 0 ] != 0		1256342	0		!=			
ANR	1256500	ArrayIndexing	d -> d_asm [ 0 ]		1256342	0					
ANR	1256501	PtrMemberAccess	d -> d_asm		1256342	0					
ANR	1256502	Identifier	d		1256342	0					
ANR	1256503	Identifier	d_asm		1256342	1					
ANR	1256504	PrimaryExpression	0		1256342	1					
ANR	1256505	PrimaryExpression	0		1256342	1					
ANR	1256506	ReturnType	static int		1256342	1					
ANR	1256507	Identifier	decode_fixed		1256342	2					
ANR	1256508	ParameterList	"struct state * s , struct directive * d"		1256342	3					
ANR	1256509	Parameter	struct state * s	45:24:906:920	1256342	0	True				
ANR	1256510	ParameterType	struct state *		1256342	0					
ANR	1256511	Identifier	s		1256342	1					
ANR	1256512	Parameter	struct directive * d	45:41:923:941	1256342	1	True				
ANR	1256513	ParameterType	struct directive *		1256342	0					
ANR	1256514	Identifier	d		1256342	1					
ANR	1256515	CFGEntryNode	ENTRY		1256342		True				
ANR	1256516	CFGExitNode	EXIT		1256342		True				
ANR	1256517	Symbol	i2u16		1256342						
ANR	1256518	Symbol	s		1256342						
ANR	1256519	Symbol	d -> d_asm		1256342						
ANR	1256520	Symbol	d		1256342						
ANR	1256521	Symbol	s -> s_u		1256342						
ANR	1256522	Symbol	* * d		1256342						
ANR	1256523	Symbol	s -> s_prefix		1256342						
ANR	1256524	Symbol	* d -> d_asm		1256342						
ANR	1256525	Symbol	* s		1256342						
ANR	1256526	Symbol	* d		1256342						
ANR	1256527	Symbol	& d -> d_inst		1256342						
ANR	1256528	Symbol	s -> s_nop		1256342						
ANR	1256529	Function	regname	66:0:1477:1646							
ANR	1256530	FunctionDef	regname (int reg)		1256529	0					
ANR	1256531	CompoundStatement		66:30:1507:1646	1256529	0					
ANR	1256532	SwitchStatement	switch ( reg )		1256529	0					
ANR	1256533	Condition	reg	67:9:1518:1520	1256529	0	True				
ANR	1256534	Identifier	reg		1256529	0					
ANR	1256535	CompoundStatement		2:14:15:15	1256529	1					
ANR	1256536	Label	case REG_AH :	68:1:1526:1537	1256529	0	True				
ANR	1256537	Identifier	REG_AH		1256529	0					
ANR	1256538	ReturnStatement	"return ""AH"" ;"	68:14:1539:1550	1256529	1	True				
ANR	1256539	PrimaryExpression	"""AH"""		1256529	0					
ANR	1256540	Label	case REG_AL :	69:1:1553:1564	1256529	2	True				
ANR	1256541	Identifier	REG_AL		1256529	0					
ANR	1256542	ReturnStatement	"return ""AL"" ;"	69:14:1566:1577	1256529	3	True				
ANR	1256543	PrimaryExpression	"""AL"""		1256529	0					
ANR	1256544	Label	case REG_X :	70:1:1580:1590	1256529	4	True				
ANR	1256545	Identifier	REG_X		1256529	0					
ANR	1256546	ReturnStatement	"return ""X"" ;"	70:13:1592:1602	1256529	5	True				
ANR	1256547	PrimaryExpression	"""X"""		1256529	0					
ANR	1256548	Label	case REG_Y :	71:1:1605:1615	1256529	6	True				
ANR	1256549	Identifier	REG_Y		1256529	0					
ANR	1256550	ReturnStatement	"return ""Y"" ;"	71:13:1617:1627	1256529	7	True				
ANR	1256551	PrimaryExpression	"""Y"""		1256529	0					
ANR	1256552	ReturnStatement	return NULL ;	73:1:1633:1644	1256529	1	True				
ANR	1256553	Identifier	NULL		1256529	0					
ANR	1256554	ReturnType	static char *		1256529	1					
ANR	1256555	Identifier	regname		1256529	2					
ANR	1256556	ParameterList	int reg		1256529	3					
ANR	1256557	Parameter	int reg	66:21:1498:1504	1256529	0	True				
ANR	1256558	ParameterType	int		1256529	0					
ANR	1256559	Identifier	reg		1256529	1					
ANR	1256560	CFGEntryNode	ENTRY		1256529		True				
ANR	1256561	CFGExitNode	EXIT		1256529		True				
ANR	1256562	Symbol	NULL		1256529						
ANR	1256563	Symbol	reg		1256529						
ANR	1256564	Function	get_num	76:0:1649:1757							
ANR	1256565	FunctionDef	"get_num (int num , int shift)"		1256564	0					
ANR	1256566	CompoundStatement		76:39:1688:1757	1256564	0					
ANR	1256567	IdentifierDeclStatement	char x = ( char ) ( ( num >> shift ) & 0xff ) ;	77:1:1691:1730	1256564	0	True				
ANR	1256568	IdentifierDecl	x = ( char ) ( ( num >> shift ) & 0xff )		1256564	0					
ANR	1256569	IdentifierDeclType	char		1256564	0					
ANR	1256570	Identifier	x		1256564	1					
ANR	1256571	AssignmentExpression	x = ( char ) ( ( num >> shift ) & 0xff )		1256564	2		=			
ANR	1256572	Identifier	x		1256564	0					
ANR	1256573	CastExpression	( char ) ( ( num >> shift ) & 0xff )		1256564	1					
ANR	1256574	CastTarget	char		1256564	0					
ANR	1256575	BitAndExpression	( num >> shift ) & 0xff		1256564	1		&			
ANR	1256576	ShiftExpression	num >> shift		1256564	0		>>			
ANR	1256577	Identifier	num		1256564	0					
ANR	1256578	Identifier	shift		1256564	1					
ANR	1256579	PrimaryExpression	0xff		1256564	1					
ANR	1256580	ReturnStatement	return ( int ) ( x << shift ) ;	78:1:1733:1755	1256564	1	True				
ANR	1256581	CastExpression	( int ) ( x << shift )		1256564	0					
ANR	1256582	CastTarget	int		1256564	0					
ANR	1256583	ShiftExpression	x << shift		1256564	1		<<			
ANR	1256584	Identifier	x		1256564	0					
ANR	1256585	Identifier	shift		1256564	1					
ANR	1256586	ReturnType	static int		1256564	1					
ANR	1256587	Identifier	get_num		1256564	2					
ANR	1256588	ParameterList	"int num , int shift"		1256564	3					
ANR	1256589	Parameter	int num	76:19:1668:1674	1256564	0	True				
ANR	1256590	ParameterType	int		1256564	0					
ANR	1256591	Identifier	num		1256564	1					
ANR	1256592	Parameter	int shift	76:28:1677:1685	1256564	1	True				
ANR	1256593	ParameterType	int		1256564	0					
ANR	1256594	Identifier	shift		1256564	1					
ANR	1256595	CFGEntryNode	ENTRY		1256564		True				
ANR	1256596	CFGExitNode	EXIT		1256564		True				
ANR	1256597	Symbol	num		1256564						
ANR	1256598	Symbol	shift		1256564						
ANR	1256599	Symbol	x		1256564						
ANR	1256600	Function	get_operand	81:0:1760:2007							
ANR	1256601	FunctionDef	"get_operand (struct state * s , struct directive * d)"		1256600	0					
ANR	1256602	CompoundStatement		81:61:1821:2007	1256600	0					
ANR	1256603	IdentifierDeclStatement	"int total = get_num ( d -> d_inst . in_operand , 0 ) ;"	82:1:1824:1868	1256600	0	True				
ANR	1256604	IdentifierDecl	"total = get_num ( d -> d_inst . in_operand , 0 )"		1256600	0					
ANR	1256605	IdentifierDeclType	int		1256600	0					
ANR	1256606	Identifier	total		1256600	1					
ANR	1256607	AssignmentExpression	"total = get_num ( d -> d_inst . in_operand , 0 )"		1256600	2		=			
ANR	1256608	Identifier	total		1256600	0					
ANR	1256609	CallExpression	"get_num ( d -> d_inst . in_operand , 0 )"		1256600	1					
ANR	1256610	Callee	get_num		1256600	0					
ANR	1256611	Identifier	get_num		1256600	0					
ANR	1256612	ArgumentList	d -> d_inst . in_operand		1256600	1					
ANR	1256613	Argument	d -> d_inst . in_operand		1256600	0					
ANR	1256614	MemberAccess	d -> d_inst . in_operand		1256600	0					
ANR	1256615	PtrMemberAccess	d -> d_inst		1256600	0					
ANR	1256616	Identifier	d		1256600	0					
ANR	1256617	Identifier	d_inst		1256600	1					
ANR	1256618	Identifier	in_operand		1256600	1					
ANR	1256619	Argument	0		1256600	1					
ANR	1256620	PrimaryExpression	0		1256600	0					
ANR	1256621	IfStatement	if ( s -> s_prefix )		1256600	1					
ANR	1256622	Condition	s -> s_prefix	83:5:1875:1885	1256600	0	True				
ANR	1256623	PtrMemberAccess	s -> s_prefix		1256600	0					
ANR	1256624	Identifier	s		1256600	0					
ANR	1256625	Identifier	s_prefix		1256600	1					
ANR	1256626	ExpressionStatement	"total += get_num ( s -> s_prefix_val , 8 )"	84:2:1890:1926	1256600	1	True				
ANR	1256627	AssignmentExpression	"total += get_num ( s -> s_prefix_val , 8 )"		1256600	0		+=			
ANR	1256628	Identifier	total		1256600	0					
ANR	1256629	CallExpression	"get_num ( s -> s_prefix_val , 8 )"		1256600	1					
ANR	1256630	Callee	get_num		1256600	0					
ANR	1256631	Identifier	get_num		1256600	0					
ANR	1256632	ArgumentList	s -> s_prefix_val		1256600	1					
ANR	1256633	Argument	s -> s_prefix_val		1256600	0					
ANR	1256634	PtrMemberAccess	s -> s_prefix_val		1256600	0					
ANR	1256635	Identifier	s		1256600	0					
ANR	1256636	Identifier	s_prefix_val		1256600	1					
ANR	1256637	Argument	8		1256600	1					
ANR	1256638	PrimaryExpression	8		1256600	0					
ANR	1256639	IfStatement	if ( s -> s_prefix == 2 )		1256600	2					
ANR	1256640	Condition	s -> s_prefix == 2	85:5:1933:1948	1256600	0	True				
ANR	1256641	EqualityExpression	s -> s_prefix == 2		1256600	0		==			
ANR	1256642	PtrMemberAccess	s -> s_prefix		1256600	0					
ANR	1256643	Identifier	s		1256600	0					
ANR	1256644	Identifier	s_prefix		1256600	1					
ANR	1256645	PrimaryExpression	2		1256600	1					
ANR	1256646	ExpressionStatement	"total += get_num ( s -> s_prefix_val , 16 )"	86:2:1953:1990	1256600	1	True				
ANR	1256647	AssignmentExpression	"total += get_num ( s -> s_prefix_val , 16 )"		1256600	0		+=			
ANR	1256648	Identifier	total		1256600	0					
ANR	1256649	CallExpression	"get_num ( s -> s_prefix_val , 16 )"		1256600	1					
ANR	1256650	Callee	get_num		1256600	0					
ANR	1256651	Identifier	get_num		1256600	0					
ANR	1256652	ArgumentList	s -> s_prefix_val		1256600	1					
ANR	1256653	Argument	s -> s_prefix_val		1256600	0					
ANR	1256654	PtrMemberAccess	s -> s_prefix_val		1256600	0					
ANR	1256655	Identifier	s		1256600	0					
ANR	1256656	Identifier	s_prefix_val		1256600	1					
ANR	1256657	Argument	16		1256600	1					
ANR	1256658	PrimaryExpression	16		1256600	0					
ANR	1256659	ReturnStatement	return total ;	87:1:1993:2005	1256600	3	True				
ANR	1256660	Identifier	total		1256600	0					
ANR	1256661	ReturnType	static int		1256600	1					
ANR	1256662	Identifier	get_operand		1256600	2					
ANR	1256663	ParameterList	"struct state * s , struct directive * d"		1256600	3					
ANR	1256664	Parameter	struct state * s	81:23:1783:1797	1256600	0	True				
ANR	1256665	ParameterType	struct state *		1256600	0					
ANR	1256666	Identifier	s		1256600	1					
ANR	1256667	Parameter	struct directive * d	81:40:1800:1818	1256600	1	True				
ANR	1256668	ParameterType	struct directive *		1256600	0					
ANR	1256669	Identifier	d		1256600	1					
ANR	1256670	CFGEntryNode	ENTRY		1256600		True				
ANR	1256671	CFGExitNode	EXIT		1256600		True				
ANR	1256672	Symbol	total		1256600						
ANR	1256673	Symbol	s		1256600						
ANR	1256674	Symbol	s -> s_prefix_val		1256600						
ANR	1256675	Symbol	d		1256600						
ANR	1256676	Symbol	get_num		1256600						
ANR	1256677	Symbol	s -> s_prefix		1256600						
ANR	1256678	Symbol	d -> d_inst		1256600						
ANR	1256679	Symbol	* s		1256600						
ANR	1256680	Symbol	* d		1256600						
ANR	1256681	Symbol	d -> d_inst . in_operand		1256600						
ANR	1256682	Function	decode_known	90:0:2010:7616							
ANR	1256683	FunctionDef	"decode_known (struct state * s , struct directive * d)"		1256682	0					
ANR	1256684	CompoundStatement		90:62:2072:7616	1256682	0					
ANR	1256685	IdentifierDeclStatement	char * op = NULL ;	91:1:2075:2090	1256682	0	True				
ANR	1256686	IdentifierDecl	* op = NULL		1256682	0					
ANR	1256687	IdentifierDeclType	char *		1256682	0					
ANR	1256688	Identifier	op		1256682	1					
ANR	1256689	AssignmentExpression	* op = NULL		1256682	2		=			
ANR	1256690	Identifier	NULL		1256682	0					
ANR	1256691	Identifier	NULL		1256682	1					
ANR	1256692	IdentifierDeclStatement	char * regn = NULL ;	92:1:2093:2110	1256682	1	True				
ANR	1256693	IdentifierDecl	* regn = NULL		1256682	0					
ANR	1256694	IdentifierDeclType	char *		1256682	0					
ANR	1256695	Identifier	regn		1256682	1					
ANR	1256696	AssignmentExpression	* regn = NULL		1256682	2		=			
ANR	1256697	Identifier	NULL		1256682	0					
ANR	1256698	Identifier	NULL		1256682	1					
ANR	1256699	IdentifierDeclStatement	int reg = 0 ;	93:1:2113:2124	1256682	2	True				
ANR	1256700	IdentifierDecl	reg = 0		1256682	0					
ANR	1256701	IdentifierDeclType	int		1256682	0					
ANR	1256702	Identifier	reg		1256682	1					
ANR	1256703	AssignmentExpression	reg = 0		1256682	2		=			
ANR	1256704	Identifier	reg		1256682	0					
ANR	1256705	PrimaryExpression	0		1256682	1					
ANR	1256706	IdentifierDeclStatement	int ptr = 1 ;	94:1:2127:2138	1256682	3	True				
ANR	1256707	IdentifierDecl	ptr = 1		1256682	0					
ANR	1256708	IdentifierDeclType	int		1256682	0					
ANR	1256709	Identifier	ptr		1256682	1					
ANR	1256710	AssignmentExpression	ptr = 1		1256682	2		=			
ANR	1256711	Identifier	ptr		1256682	0					
ANR	1256712	PrimaryExpression	1		1256682	1					
ANR	1256713	IdentifierDeclStatement	int idx = 1 ;	95:1:2141:2152	1256682	4	True				
ANR	1256714	IdentifierDecl	idx = 1		1256682	0					
ANR	1256715	IdentifierDeclType	int		1256682	0					
ANR	1256716	Identifier	idx		1256682	1					
ANR	1256717	AssignmentExpression	idx = 1		1256682	2		=			
ANR	1256718	Identifier	idx		1256682	0					
ANR	1256719	PrimaryExpression	1		1256682	1					
ANR	1256720	IdentifierDeclStatement	int imm = 0 ;	96:1:2155:2166	1256682	5	True				
ANR	1256721	IdentifierDecl	imm = 0		1256682	0					
ANR	1256722	IdentifierDeclType	int		1256682	0					
ANR	1256723	Identifier	imm		1256682	1					
ANR	1256724	AssignmentExpression	imm = 0		1256682	2		=			
ANR	1256725	Identifier	imm		1256682	0					
ANR	1256726	PrimaryExpression	0		1256682	1					
ANR	1256727	IdentifierDeclStatement	int rel = 0 ;	97:1:2169:2180	1256682	6	True				
ANR	1256728	IdentifierDecl	rel = 0		1256682	0					
ANR	1256729	IdentifierDeclType	int		1256682	0					
ANR	1256730	Identifier	rel		1256682	1					
ANR	1256731	AssignmentExpression	rel = 0		1256682	2		=			
ANR	1256732	Identifier	rel		1256682	0					
ANR	1256733	PrimaryExpression	0		1256682	1					
ANR	1256734	IdentifierDeclStatement	char fmt [ 16 ] ;	98:1:2183:2195	1256682	7	True				
ANR	1256735	IdentifierDecl	fmt [ 16 ]		1256682	0					
ANR	1256736	IdentifierDeclType	char [ 16 ]		1256682	0					
ANR	1256737	Identifier	fmt		1256682	1					
ANR	1256738	PrimaryExpression	16		1256682	2					
ANR	1256739	IdentifierDeclStatement	char tmp [ 128 ] ;	99:1:2198:2211	1256682	8	True				
ANR	1256740	IdentifierDecl	tmp [ 128 ]		1256682	0					
ANR	1256741	IdentifierDeclType	char [ 128 ]		1256682	0					
ANR	1256742	Identifier	tmp		1256682	1					
ANR	1256743	PrimaryExpression	128		1256682	2					
ANR	1256744	IdentifierDeclStatement	int fmtsz ;	100:1:2214:2223	1256682	9	True				
ANR	1256745	IdentifierDecl	fmtsz		1256682	0					
ANR	1256746	IdentifierDeclType	int		1256682	0					
ANR	1256747	Identifier	fmtsz		1256682	1					
ANR	1256748	IdentifierDeclStatement	int branch = 0 ;	101:1:2226:2240	1256682	10	True				
ANR	1256749	IdentifierDecl	branch = 0		1256682	0					
ANR	1256750	IdentifierDeclType	int		1256682	0					
ANR	1256751	Identifier	branch		1256682	1					
ANR	1256752	AssignmentExpression	branch = 0		1256682	2		=			
ANR	1256753	Identifier	branch		1256682	0					
ANR	1256754	PrimaryExpression	0		1256682	1					
ANR	1256755	IdentifierDeclStatement	struct instruction * in = & d -> d_inst ;	102:1:2243:2278	1256682	11	True				
ANR	1256756	IdentifierDecl	* in = & d -> d_inst		1256682	0					
ANR	1256757	IdentifierDeclType	struct instruction *		1256682	0					
ANR	1256758	Identifier	in		1256682	1					
ANR	1256759	AssignmentExpression	* in = & d -> d_inst		1256682	2		=			
ANR	1256760	Identifier	in		1256682	0					
ANR	1256761	UnaryOperationExpression	& d -> d_inst		1256682	1					
ANR	1256762	UnaryOperator	&		1256682	0					
ANR	1256763	PtrMemberAccess	d -> d_inst		1256682	1					
ANR	1256764	Identifier	d		1256682	0					
ANR	1256765	Identifier	d_inst		1256682	1					
ANR	1256766	IdentifierDeclStatement	"char * sign = """" ;"	104:1:2297:2312	1256682	12	True				
ANR	1256767	IdentifierDecl	"* sign = """""		1256682	0					
ANR	1256768	IdentifierDeclType	char *		1256682	0					
ANR	1256769	Identifier	sign		1256682	1					
ANR	1256770	AssignmentExpression	"* sign = """""		1256682	2		=			
ANR	1256771	Identifier	sign		1256682	0					
ANR	1256772	PrimaryExpression	""""""		1256682	1					
ANR	1256773	IdentifierDeclStatement	int rti = 0 ;	105:1:2315:2326	1256682	13	True				
ANR	1256774	IdentifierDecl	rti = 0		1256682	0					
ANR	1256775	IdentifierDeclType	int		1256682	0					
ANR	1256776	Identifier	rti		1256682	1					
ANR	1256777	AssignmentExpression	rti = 0		1256682	2		=			
ANR	1256778	Identifier	rti		1256682	0					
ANR	1256779	PrimaryExpression	0		1256682	1					
ANR	1256780	SwitchStatement	switch ( in -> in_opcode )		1256682	14					
ANR	1256781	Condition	in -> in_opcode	107:9:2338:2350	1256682	0	True				
ANR	1256782	PtrMemberAccess	in -> in_opcode		1256682	0					
ANR	1256783	Identifier	in		1256682	0					
ANR	1256784	Identifier	in_opcode		1256682	1					
ANR	1256785	CompoundStatement		18:24:280:280	1256682	1					
ANR	1256786	Label	case 0 :	108:1:2356:2362	1256682	0	True				
ANR	1256787	IfStatement	if ( in -> in_reg == 0 && in -> in_mode == 0 )		1256682	1					
ANR	1256788	Condition	in -> in_reg == 0 && in -> in_mode == 0	109:6:2370:2404	1256682	0	True				
ANR	1256789	AndExpression	in -> in_reg == 0 && in -> in_mode == 0		1256682	0		&&			
ANR	1256790	EqualityExpression	in -> in_reg == 0		1256682	0		==			
ANR	1256791	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1256792	Identifier	in		1256682	0					
ANR	1256793	Identifier	in_reg		1256682	1					
ANR	1256794	PrimaryExpression	0		1256682	1					
ANR	1256795	EqualityExpression	in -> in_mode == 0		1256682	1		==			
ANR	1256796	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1256797	Identifier	in		1256682	0					
ANR	1256798	Identifier	in_mode		1256682	1					
ANR	1256799	PrimaryExpression	0		1256682	1					
ANR	1256800	CompoundStatement		20:43:334:334	1256682	1					
ANR	1256801	IfStatement	if ( s -> s_prefix == 0 )		1256682	0					
ANR	1256802	Condition	s -> s_prefix == 0	110:7:2416:2431	1256682	0	True				
ANR	1256803	EqualityExpression	s -> s_prefix == 0		1256682	0		==			
ANR	1256804	PtrMemberAccess	s -> s_prefix		1256682	0					
ANR	1256805	Identifier	s		1256682	0					
ANR	1256806	Identifier	s_prefix		1256682	1					
ANR	1256807	PrimaryExpression	0		1256682	1					
ANR	1256808	ExpressionStatement	s -> s_prefix_val = 0	111:4:2438:2457	1256682	1	True				
ANR	1256809	AssignmentExpression	s -> s_prefix_val = 0		1256682	0		=			
ANR	1256810	PtrMemberAccess	s -> s_prefix_val		1256682	0					
ANR	1256811	Identifier	s		1256682	0					
ANR	1256812	Identifier	s_prefix_val		1256682	1					
ANR	1256813	PrimaryExpression	0		1256682	1					
ANR	1256814	ExpressionStatement	s -> s_prefix ++	112:3:2462:2475	1256682	1	True				
ANR	1256815	PostIncDecOperationExpression	s -> s_prefix ++		1256682	0					
ANR	1256816	PtrMemberAccess	s -> s_prefix		1256682	0					
ANR	1256817	Identifier	s		1256682	0					
ANR	1256818	Identifier	s_prefix		1256682	1					
ANR	1256819	IncDec	++		1256682	1					
ANR	1256820	IfStatement	if ( s -> s_prefix == 2 )		1256682	2					
ANR	1256821	Condition	s -> s_prefix == 2	114:7:2485:2500	1256682	0	True				
ANR	1256822	EqualityExpression	s -> s_prefix == 2		1256682	0		==			
ANR	1256823	PtrMemberAccess	s -> s_prefix		1256682	0					
ANR	1256824	Identifier	s		1256682	0					
ANR	1256825	Identifier	s_prefix		1256682	1					
ANR	1256826	PrimaryExpression	2		1256682	1					
ANR	1256827	ExpressionStatement	s -> s_prefix_val <<= 8	115:4:2507:2528	1256682	1	True				
ANR	1256828	AssignmentExpression	s -> s_prefix_val <<= 8		1256682	0		<<=			
ANR	1256829	PtrMemberAccess	s -> s_prefix_val		1256682	0					
ANR	1256830	Identifier	s		1256682	0					
ANR	1256831	Identifier	s_prefix_val		1256682	1					
ANR	1256832	PrimaryExpression	8		1256682	1					
ANR	1256833	IfStatement	if ( s -> s_nopd && in -> in_operand == 0x80 )		1256682	3					
ANR	1256834	Condition	s -> s_nopd && in -> in_operand == 0x80	119:7:2634:2668	1256682	0	True				
ANR	1256835	AndExpression	s -> s_nopd && in -> in_operand == 0x80		1256682	0		&&			
ANR	1256836	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1256837	Identifier	s		1256682	0					
ANR	1256838	Identifier	s_nopd		1256682	1					
ANR	1256839	EqualityExpression	in -> in_operand == 0x80		1256682	1		==			
ANR	1256840	PtrMemberAccess	in -> in_operand		1256682	0					
ANR	1256841	Identifier	in		1256682	0					
ANR	1256842	Identifier	in_operand		1256682	1					
ANR	1256843	PrimaryExpression	0x80		1256682	1					
ANR	1256844	ExpressionStatement	"strcpy ( s -> s_nopd -> d_asm , """" )"	120:4:2675:2703	1256682	1	True				
ANR	1256845	CallExpression	"strcpy ( s -> s_nopd -> d_asm , """" )"		1256682	0					
ANR	1256846	Callee	strcpy		1256682	0					
ANR	1256847	Identifier	strcpy		1256682	0					
ANR	1256848	ArgumentList	s -> s_nopd -> d_asm		1256682	1					
ANR	1256849	Argument	s -> s_nopd -> d_asm		1256682	0					
ANR	1256850	PtrMemberAccess	s -> s_nopd -> d_asm		1256682	0					
ANR	1256851	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1256852	Identifier	s		1256682	0					
ANR	1256853	Identifier	s_nopd		1256682	1					
ANR	1256854	Identifier	d_asm		1256682	1					
ANR	1256855	Argument	""""""		1256682	1					
ANR	1256856	PrimaryExpression	""""""		1256682	0					
ANR	1256857	ExpressionStatement	s -> s_prefix_val |= in -> in_operand << 8	122:3:2715:2753	1256682	4	True				
ANR	1256858	AssignmentExpression	s -> s_prefix_val |= in -> in_operand << 8		1256682	0		|=			
ANR	1256859	PtrMemberAccess	s -> s_prefix_val		1256682	0					
ANR	1256860	Identifier	s		1256682	0					
ANR	1256861	Identifier	s_prefix_val		1256682	1					
ANR	1256862	ShiftExpression	in -> in_operand << 8		1256682	1		<<			
ANR	1256863	PtrMemberAccess	in -> in_operand		1256682	0					
ANR	1256864	Identifier	in		1256682	0					
ANR	1256865	Identifier	in_operand		1256682	1					
ANR	1256866	PrimaryExpression	8		1256682	1					
ANR	1256867	ExpressionStatement	"strcpy ( d -> d_asm , """" )"	124:3:2759:2779	1256682	5	True				
ANR	1256868	CallExpression	"strcpy ( d -> d_asm , """" )"		1256682	0					
ANR	1256869	Callee	strcpy		1256682	0					
ANR	1256870	Identifier	strcpy		1256682	0					
ANR	1256871	ArgumentList	d -> d_asm		1256682	1					
ANR	1256872	Argument	d -> d_asm		1256682	0					
ANR	1256873	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1256874	Identifier	d		1256682	0					
ANR	1256875	Identifier	d_asm		1256682	1					
ANR	1256876	Argument	""""""		1256682	1					
ANR	1256877	PrimaryExpression	""""""		1256682	0					
ANR	1256878	ReturnStatement	return 1 ;	125:3:2784:2792	1256682	6	True				
ANR	1256879	PrimaryExpression	1		1256682	0					
ANR	1256880	SwitchStatement	switch ( i2u16 ( in ) & 0xf )		1256682	2					
ANR	1256881	Condition	i2u16 ( in ) & 0xf	128:10:2809:2823	1256682	0	True				
ANR	1256882	BitAndExpression	i2u16 ( in ) & 0xf		1256682	0		&			
ANR	1256883	CallExpression	i2u16 ( in )		1256682	0					
ANR	1256884	Callee	i2u16		1256682	0					
ANR	1256885	Identifier	i2u16		1256682	0					
ANR	1256886	ArgumentList	in		1256682	1					
ANR	1256887	Argument	in		1256682	0					
ANR	1256888	Identifier	in		1256682	0					
ANR	1256889	PrimaryExpression	0xf		1256682	1					
ANR	1256890	CompoundStatement		39:27:753:753	1256682	1					
ANR	1256891	Label	case 1 :	129:2:2830:2836	1256682	0	True				
ANR	1256892	ExpressionStatement	"op = ""st"""	130:3:2841:2850	1256682	1	True				
ANR	1256893	AssignmentExpression	"op = ""st"""		1256682	0		=			
ANR	1256894	Identifier	op		1256682	0					
ANR	1256895	PrimaryExpression	"""st"""		1256682	1					
ANR	1256896	ExpressionStatement	"regn = ""FLAGS"""	131:3:2855:2869	1256682	2	True				
ANR	1256897	AssignmentExpression	"regn = ""FLAGS"""		1256682	0		=			
ANR	1256898	Identifier	regn		1256682	0					
ANR	1256899	PrimaryExpression	"""FLAGS"""		1256682	1					
ANR	1256900	BreakStatement	break ;	132:3:2874:2879	1256682	3	True				
ANR	1256901	Label	case 2 :	133:2:2883:2889	1256682	4	True				
ANR	1256902	ExpressionStatement	"op = ""st"""	134:3:2894:2903	1256682	5	True				
ANR	1256903	AssignmentExpression	"op = ""st"""		1256682	0		=			
ANR	1256904	Identifier	op		1256682	0					
ANR	1256905	PrimaryExpression	"""st"""		1256682	1					
ANR	1256906	ExpressionStatement	"regn = ""UX"""	135:3:2908:2919	1256682	6	True				
ANR	1256907	AssignmentExpression	"regn = ""UX"""		1256682	0		=			
ANR	1256908	Identifier	regn		1256682	0					
ANR	1256909	PrimaryExpression	"""UX"""		1256682	1					
ANR	1256910	BreakStatement	break ;	136:3:2924:2929	1256682	7	True				
ANR	1256911	Label	case 3 :	137:2:2933:2939	1256682	8	True				
ANR	1256912	ExpressionStatement	"op = ""st"""	138:3:2944:2953	1256682	9	True				
ANR	1256913	AssignmentExpression	"op = ""st"""		1256682	0		=			
ANR	1256914	Identifier	op		1256682	0					
ANR	1256915	PrimaryExpression	"""st"""		1256682	1					
ANR	1256916	ExpressionStatement	"regn = ""UY"""	139:3:2958:2969	1256682	10	True				
ANR	1256917	AssignmentExpression	"regn = ""UY"""		1256682	0		=			
ANR	1256918	Identifier	regn		1256682	0					
ANR	1256919	PrimaryExpression	"""UY"""		1256682	1					
ANR	1256920	BreakStatement	break ;	140:3:2974:2979	1256682	11	True				
ANR	1256921	Label	case 5 :	141:2:2983:2989	1256682	12	True				
ANR	1256922	ExpressionStatement	"op = ""ld"""	142:3:2994:3003	1256682	13	True				
ANR	1256923	AssignmentExpression	"op = ""ld"""		1256682	0		=			
ANR	1256924	Identifier	op		1256682	0					
ANR	1256925	PrimaryExpression	"""ld"""		1256682	1					
ANR	1256926	ExpressionStatement	"regn = ""FLAGS"""	143:3:3008:3022	1256682	14	True				
ANR	1256927	AssignmentExpression	"regn = ""FLAGS"""		1256682	0		=			
ANR	1256928	Identifier	regn		1256682	0					
ANR	1256929	PrimaryExpression	"""FLAGS"""		1256682	1					
ANR	1256930	BreakStatement	break ;	144:3:3027:3032	1256682	15	True				
ANR	1256931	Label	case 6 :	145:2:3036:3042	1256682	16	True				
ANR	1256932	ExpressionStatement	"op = ""ld"""	146:3:3047:3056	1256682	17	True				
ANR	1256933	AssignmentExpression	"op = ""ld"""		1256682	0		=			
ANR	1256934	Identifier	op		1256682	0					
ANR	1256935	PrimaryExpression	"""ld"""		1256682	1					
ANR	1256936	ExpressionStatement	"regn = ""UX"""	147:3:3061:3072	1256682	18	True				
ANR	1256937	AssignmentExpression	"regn = ""UX"""		1256682	0		=			
ANR	1256938	Identifier	regn		1256682	0					
ANR	1256939	PrimaryExpression	"""UX"""		1256682	1					
ANR	1256940	BreakStatement	break ;	148:3:3077:3082	1256682	19	True				
ANR	1256941	Label	case 7 :	149:2:3086:3092	1256682	20	True				
ANR	1256942	ExpressionStatement	"op = ""ld"""	150:3:3097:3106	1256682	21	True				
ANR	1256943	AssignmentExpression	"op = ""ld"""		1256682	0		=			
ANR	1256944	Identifier	op		1256682	0					
ANR	1256945	PrimaryExpression	"""ld"""		1256682	1					
ANR	1256946	ExpressionStatement	"regn = ""UY"""	151:3:3111:3122	1256682	22	True				
ANR	1256947	AssignmentExpression	"regn = ""UY"""		1256682	0		=			
ANR	1256948	Identifier	regn		1256682	0					
ANR	1256949	PrimaryExpression	"""UY"""		1256682	1					
ANR	1256950	BreakStatement	break ;	152:3:3127:3132	1256682	23	True				
ANR	1256951	Label	case 0xa :	153:2:3136:3144	1256682	24	True				
ANR	1256952	ExpressionStatement	"op = ""st"""	154:3:3149:3158	1256682	25	True				
ANR	1256953	AssignmentExpression	"op = ""st"""		1256682	0		=			
ANR	1256954	Identifier	op		1256682	0					
ANR	1256955	PrimaryExpression	"""st"""		1256682	1					
ANR	1256956	ExpressionStatement	"regn = ""XH"""	155:3:3163:3174	1256682	26	True				
ANR	1256957	AssignmentExpression	"regn = ""XH"""		1256682	0		=			
ANR	1256958	Identifier	regn		1256682	0					
ANR	1256959	PrimaryExpression	"""XH"""		1256682	1					
ANR	1256960	BreakStatement	break ;	156:3:3179:3184	1256682	27	True				
ANR	1256961	Label	case 0xd :	157:2:3188:3196	1256682	28	True				
ANR	1256962	ExpressionStatement	"op = ""rti"""	158:3:3201:3211	1256682	29	True				
ANR	1256963	AssignmentExpression	"op = ""rti"""		1256682	0		=			
ANR	1256964	Identifier	op		1256682	0					
ANR	1256965	PrimaryExpression	"""rti"""		1256682	1					
ANR	1256966	ExpressionStatement	"regn = """""	159:3:3216:3225	1256682	30	True				
ANR	1256967	AssignmentExpression	"regn = """""		1256682	0		=			
ANR	1256968	Identifier	regn		1256682	0					
ANR	1256969	PrimaryExpression	""""""		1256682	1					
ANR	1256970	ExpressionStatement	rti = 1	160:3:3230:3237	1256682	31	True				
ANR	1256971	AssignmentExpression	rti = 1		1256682	0		=			
ANR	1256972	Identifier	rti		1256682	0					
ANR	1256973	PrimaryExpression	1		1256682	1					
ANR	1256974	BreakStatement	break ;	161:3:3242:3247	1256682	32	True				
ANR	1256975	Label	case 0xe :	162:2:3251:3259	1256682	33	True				
ANR	1256976	ExpressionStatement	"op = ""ld"""	163:3:3264:3273	1256682	34	True				
ANR	1256977	AssignmentExpression	"op = ""ld"""		1256682	0		=			
ANR	1256978	Identifier	op		1256682	0					
ANR	1256979	PrimaryExpression	"""ld"""		1256682	1					
ANR	1256980	ExpressionStatement	"regn = ""XH"""	164:3:3278:3289	1256682	35	True				
ANR	1256981	AssignmentExpression	"regn = ""XH"""		1256682	0		=			
ANR	1256982	Identifier	regn		1256682	0					
ANR	1256983	PrimaryExpression	"""XH"""		1256682	1					
ANR	1256984	BreakStatement	break ;	165:3:3294:3299	1256682	36	True				
ANR	1256985	BreakStatement	break ;	167:2:3307:3312	1256682	3	True				
ANR	1256986	Label	case 1 :	169:1:3316:3322	1256682	4	True				
ANR	1256987	ExpressionStatement	"op = ""ld"""	170:2:3326:3335	1256682	5	True				
ANR	1256988	AssignmentExpression	"op = ""ld"""		1256682	0		=			
ANR	1256989	Identifier	op		1256682	0					
ANR	1256990	PrimaryExpression	"""ld"""		1256682	1					
ANR	1256991	ExpressionStatement	reg = 1	171:2:3339:3346	1256682	6	True				
ANR	1256992	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1256993	Identifier	reg		1256682	0					
ANR	1256994	PrimaryExpression	1		1256682	1					
ANR	1256995	ExpressionStatement	ptr = 1	172:2:3350:3357	1256682	7	True				
ANR	1256996	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1256997	Identifier	ptr		1256682	0					
ANR	1256998	PrimaryExpression	1		1256682	1					
ANR	1256999	ExpressionStatement	idx = 1	173:2:3361:3368	1256682	8	True				
ANR	1257000	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257001	Identifier	idx		1256682	0					
ANR	1257002	PrimaryExpression	1		1256682	1					
ANR	1257003	ExpressionStatement	imm = 1	174:2:3372:3379	1256682	9	True				
ANR	1257004	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257005	Identifier	imm		1256682	0					
ANR	1257006	PrimaryExpression	1		1256682	1					
ANR	1257007	BreakStatement	break ;	175:2:3383:3388	1256682	10	True				
ANR	1257008	Label	case 2 :	176:1:3391:3397	1256682	11	True				
ANR	1257009	IfStatement	if ( in -> in_mode == DATA_MODE_IMMEDIATE )		1256682	12					
ANR	1257010	Condition	in -> in_mode == DATA_MODE_IMMEDIATE	177:6:3405:3438	1256682	0	True				
ANR	1257011	EqualityExpression	in -> in_mode == DATA_MODE_IMMEDIATE		1256682	0		==			
ANR	1257012	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257013	Identifier	in		1256682	0					
ANR	1257014	Identifier	in_mode		1256682	1					
ANR	1257015	Identifier	DATA_MODE_IMMEDIATE		1256682	1					
ANR	1257016	CompoundStatement		88:42:1368:1368	1256682	1					
ANR	1257017	ExpressionStatement	"op = ""print"""	178:3:3446:3458	1256682	0	True				
ANR	1257018	AssignmentExpression	"op = ""print"""		1256682	0		=			
ANR	1257019	Identifier	op		1256682	0					
ANR	1257020	PrimaryExpression	"""print"""		1256682	1					
ANR	1257021	ExpressionStatement	imm = 1	179:3:3463:3470	1256682	1	True				
ANR	1257022	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257023	Identifier	imm		1256682	0					
ANR	1257024	PrimaryExpression	1		1256682	1					
ANR	1257025	ExpressionStatement	reg = 1	180:3:3475:3482	1256682	2	True				
ANR	1257026	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257027	Identifier	reg		1256682	0					
ANR	1257028	PrimaryExpression	1		1256682	1					
ANR	1257029	ElseStatement	else		1256682	0					
ANR	1257030	CompoundStatement		92:9:1420:1420	1256682	0					
ANR	1257031	ExpressionStatement	"op = ""st"""	182:3:3498:3507	1256682	0	True				
ANR	1257032	AssignmentExpression	"op = ""st"""		1256682	0		=			
ANR	1257033	Identifier	op		1256682	0					
ANR	1257034	PrimaryExpression	"""st"""		1256682	1					
ANR	1257035	ExpressionStatement	reg = 1	183:3:3512:3519	1256682	1	True				
ANR	1257036	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257037	Identifier	reg		1256682	0					
ANR	1257038	PrimaryExpression	1		1256682	1					
ANR	1257039	ExpressionStatement	ptr = 1	184:3:3524:3531	1256682	2	True				
ANR	1257040	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257041	Identifier	ptr		1256682	0					
ANR	1257042	PrimaryExpression	1		1256682	1					
ANR	1257043	ExpressionStatement	idx = 1	185:3:3536:3543	1256682	3	True				
ANR	1257044	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257045	Identifier	idx		1256682	0					
ANR	1257046	PrimaryExpression	1		1256682	1					
ANR	1257047	BreakStatement	break ;	187:2:3551:3556	1256682	13	True				
ANR	1257048	Label	case 3 :	188:1:3559:3565	1256682	14	True				
ANR	1257049	ExpressionStatement	"op = ""add"""	189:2:3569:3579	1256682	15	True				
ANR	1257050	AssignmentExpression	"op = ""add"""		1256682	0		=			
ANR	1257051	Identifier	op		1256682	0					
ANR	1257052	PrimaryExpression	"""add"""		1256682	1					
ANR	1257053	ExpressionStatement	reg = 1	190:2:3583:3590	1256682	16	True				
ANR	1257054	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257055	Identifier	reg		1256682	0					
ANR	1257056	PrimaryExpression	1		1256682	1					
ANR	1257057	ExpressionStatement	ptr = 1	191:2:3594:3601	1256682	17	True				
ANR	1257058	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257059	Identifier	ptr		1256682	0					
ANR	1257060	PrimaryExpression	1		1256682	1					
ANR	1257061	ExpressionStatement	idx = 1	192:2:3605:3612	1256682	18	True				
ANR	1257062	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257063	Identifier	idx		1256682	0					
ANR	1257064	PrimaryExpression	1		1256682	1					
ANR	1257065	ExpressionStatement	imm = 1	193:2:3616:3623	1256682	19	True				
ANR	1257066	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257067	Identifier	imm		1256682	0					
ANR	1257068	PrimaryExpression	1		1256682	1					
ANR	1257069	BreakStatement	break ;	194:2:3627:3632	1256682	20	True				
ANR	1257070	Label	case 4 :	195:1:3635:3641	1256682	21	True				
ANR	1257071	ExpressionStatement	"op = ""addc"""	196:2:3645:3656	1256682	22	True				
ANR	1257072	AssignmentExpression	"op = ""addc"""		1256682	0		=			
ANR	1257073	Identifier	op		1256682	0					
ANR	1257074	PrimaryExpression	"""addc"""		1256682	1					
ANR	1257075	ExpressionStatement	reg = 1	197:2:3660:3667	1256682	23	True				
ANR	1257076	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257077	Identifier	reg		1256682	0					
ANR	1257078	PrimaryExpression	1		1256682	1					
ANR	1257079	ExpressionStatement	ptr = 1	198:2:3671:3678	1256682	24	True				
ANR	1257080	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257081	Identifier	ptr		1256682	0					
ANR	1257082	PrimaryExpression	1		1256682	1					
ANR	1257083	ExpressionStatement	idx = 1	199:2:3682:3689	1256682	25	True				
ANR	1257084	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257085	Identifier	idx		1256682	0					
ANR	1257086	PrimaryExpression	1		1256682	1					
ANR	1257087	ExpressionStatement	imm = 1	200:2:3693:3700	1256682	26	True				
ANR	1257088	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257089	Identifier	imm		1256682	0					
ANR	1257090	PrimaryExpression	1		1256682	1					
ANR	1257091	BreakStatement	break ;	201:2:3704:3709	1256682	27	True				
ANR	1257092	Label	case 5 :	202:1:3712:3718	1256682	28	True				
ANR	1257093	ExpressionStatement	"op = ""sub"""	203:2:3722:3732	1256682	29	True				
ANR	1257094	AssignmentExpression	"op = ""sub"""		1256682	0		=			
ANR	1257095	Identifier	op		1256682	0					
ANR	1257096	PrimaryExpression	"""sub"""		1256682	1					
ANR	1257097	ExpressionStatement	reg = 1	204:2:3736:3743	1256682	30	True				
ANR	1257098	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257099	Identifier	reg		1256682	0					
ANR	1257100	PrimaryExpression	1		1256682	1					
ANR	1257101	ExpressionStatement	ptr = 1	205:2:3747:3754	1256682	31	True				
ANR	1257102	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257103	Identifier	ptr		1256682	0					
ANR	1257104	PrimaryExpression	1		1256682	1					
ANR	1257105	ExpressionStatement	idx = 1	206:2:3758:3765	1256682	32	True				
ANR	1257106	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257107	Identifier	idx		1256682	0					
ANR	1257108	PrimaryExpression	1		1256682	1					
ANR	1257109	ExpressionStatement	imm = 1	207:2:3769:3776	1256682	33	True				
ANR	1257110	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257111	Identifier	imm		1256682	0					
ANR	1257112	PrimaryExpression	1		1256682	1					
ANR	1257113	BreakStatement	break ;	208:2:3780:3785	1256682	34	True				
ANR	1257114	Label	case 6 :	209:1:3788:3794	1256682	35	True				
ANR	1257115	ExpressionStatement	"op = ""subc"""	210:2:3798:3809	1256682	36	True				
ANR	1257116	AssignmentExpression	"op = ""subc"""		1256682	0		=			
ANR	1257117	Identifier	op		1256682	0					
ANR	1257118	PrimaryExpression	"""subc"""		1256682	1					
ANR	1257119	ExpressionStatement	reg = 1	211:2:3813:3820	1256682	37	True				
ANR	1257120	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257121	Identifier	reg		1256682	0					
ANR	1257122	PrimaryExpression	1		1256682	1					
ANR	1257123	ExpressionStatement	ptr = 1	212:2:3824:3831	1256682	38	True				
ANR	1257124	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257125	Identifier	ptr		1256682	0					
ANR	1257126	PrimaryExpression	1		1256682	1					
ANR	1257127	ExpressionStatement	idx = 1	213:2:3835:3842	1256682	39	True				
ANR	1257128	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257129	Identifier	idx		1256682	0					
ANR	1257130	PrimaryExpression	1		1256682	1					
ANR	1257131	ExpressionStatement	imm = 1	214:2:3846:3853	1256682	40	True				
ANR	1257132	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257133	Identifier	imm		1256682	0					
ANR	1257134	PrimaryExpression	1		1256682	1					
ANR	1257135	BreakStatement	break ;	215:2:3857:3862	1256682	41	True				
ANR	1257136	Label	case 7 :	216:1:3865:3871	1256682	42	True				
ANR	1257137	ExpressionStatement	"op = ""nadd"""	217:2:3875:3886	1256682	43	True				
ANR	1257138	AssignmentExpression	"op = ""nadd"""		1256682	0		=			
ANR	1257139	Identifier	op		1256682	0					
ANR	1257140	PrimaryExpression	"""nadd"""		1256682	1					
ANR	1257141	ExpressionStatement	reg = 1	218:2:3890:3897	1256682	44	True				
ANR	1257142	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257143	Identifier	reg		1256682	0					
ANR	1257144	PrimaryExpression	1		1256682	1					
ANR	1257145	ExpressionStatement	ptr = 1	219:2:3901:3908	1256682	45	True				
ANR	1257146	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257147	Identifier	ptr		1256682	0					
ANR	1257148	PrimaryExpression	1		1256682	1					
ANR	1257149	ExpressionStatement	idx = 1	220:2:3912:3919	1256682	46	True				
ANR	1257150	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257151	Identifier	idx		1256682	0					
ANR	1257152	PrimaryExpression	1		1256682	1					
ANR	1257153	ExpressionStatement	imm = 1	221:2:3923:3930	1256682	47	True				
ANR	1257154	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257155	Identifier	imm		1256682	0					
ANR	1257156	PrimaryExpression	1		1256682	1					
ANR	1257157	BreakStatement	break ;	222:2:3934:3939	1256682	48	True				
ANR	1257158	Label	case 8 :	223:1:3942:3948	1256682	49	True				
ANR	1257159	ExpressionStatement	"op = ""cmp"""	224:2:3952:3962	1256682	50	True				
ANR	1257160	AssignmentExpression	"op = ""cmp"""		1256682	0		=			
ANR	1257161	Identifier	op		1256682	0					
ANR	1257162	PrimaryExpression	"""cmp"""		1256682	1					
ANR	1257163	ExpressionStatement	reg = 1	225:2:3966:3973	1256682	51	True				
ANR	1257164	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257165	Identifier	reg		1256682	0					
ANR	1257166	PrimaryExpression	1		1256682	1					
ANR	1257167	ExpressionStatement	ptr = 1	226:2:3977:3984	1256682	52	True				
ANR	1257168	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257169	Identifier	ptr		1256682	0					
ANR	1257170	PrimaryExpression	1		1256682	1					
ANR	1257171	ExpressionStatement	idx = 1	227:2:3988:3995	1256682	53	True				
ANR	1257172	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257173	Identifier	idx		1256682	0					
ANR	1257174	PrimaryExpression	1		1256682	1					
ANR	1257175	ExpressionStatement	imm = 1	228:2:3999:4006	1256682	54	True				
ANR	1257176	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257177	Identifier	imm		1256682	0					
ANR	1257178	PrimaryExpression	1		1256682	1					
ANR	1257179	BreakStatement	break ;	229:2:4010:4015	1256682	55	True				
ANR	1257180	Label	case 0x9 :	230:1:4018:4026	1256682	56	True				
ANR	1257181	SwitchStatement	switch ( in -> in_reg )		1256682	57					
ANR	1257182	Condition	in -> in_reg	231:10:4038:4047	1256682	0	True				
ANR	1257183	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1257184	Identifier	in		1256682	0					
ANR	1257185	Identifier	in_reg		1256682	1					
ANR	1257186	CompoundStatement		142:22:1977:1977	1256682	1					
ANR	1257187	Label	case 0 :	232:2:4054:4060	1256682	0	True				
ANR	1257188	IfStatement	if ( s -> s_u )		1256682	1					
ANR	1257189	Condition	s -> s_u	233:7:4069:4074	1256682	0	True				
ANR	1257190	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257191	Identifier	s		1256682	0					
ANR	1257192	Identifier	s_u		1256682	1					
ANR	1257193	ExpressionStatement	"op = ""umult"""	233:15:4077:4089	1256682	1	True				
ANR	1257194	AssignmentExpression	"op = ""umult"""		1256682	0		=			
ANR	1257195	Identifier	op		1256682	0					
ANR	1257196	PrimaryExpression	"""umult"""		1256682	1					
ANR	1257197	ElseStatement	else		1256682	0					
ANR	1257198	ExpressionStatement	"op = ""smult"""	234:8:4099:4111	1256682	0	True				
ANR	1257199	AssignmentExpression	"op = ""smult"""		1256682	0		=			
ANR	1257200	Identifier	op		1256682	0					
ANR	1257201	PrimaryExpression	"""smult"""		1256682	1					
ANR	1257202	ExpressionStatement	imm = 1	235:3:4116:4123	1256682	2	True				
ANR	1257203	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257204	Identifier	imm		1256682	0					
ANR	1257205	PrimaryExpression	1		1256682	1					
ANR	1257206	ExpressionStatement	s -> s_u = 0	236:3:4128:4138	1256682	3	True				
ANR	1257207	AssignmentExpression	s -> s_u = 0		1256682	0		=			
ANR	1257208	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257209	Identifier	s		1256682	0					
ANR	1257210	Identifier	s_u		1256682	1					
ANR	1257211	PrimaryExpression	0		1256682	1					
ANR	1257212	ExpressionStatement	idx = 1	237:3:4143:4150	1256682	4	True				
ANR	1257213	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257214	Identifier	idx		1256682	0					
ANR	1257215	PrimaryExpression	1		1256682	1					
ANR	1257216	ExpressionStatement	ptr = 1	238:3:4155:4162	1256682	5	True				
ANR	1257217	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257218	Identifier	ptr		1256682	0					
ANR	1257219	PrimaryExpression	1		1256682	1					
ANR	1257220	BreakStatement	break ;	239:3:4167:4172	1256682	6	True				
ANR	1257221	Label	case 1 :	240:2:4176:4182	1256682	7	True				
ANR	1257222	IfStatement	if ( s -> s_u )		1256682	8					
ANR	1257223	Condition	s -> s_u	241:7:4191:4196	1256682	0	True				
ANR	1257224	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257225	Identifier	s		1256682	0					
ANR	1257226	Identifier	s_u		1256682	1					
ANR	1257227	ExpressionStatement	"op = ""udiv"""	241:15:4199:4210	1256682	1	True				
ANR	1257228	AssignmentExpression	"op = ""udiv"""		1256682	0		=			
ANR	1257229	Identifier	op		1256682	0					
ANR	1257230	PrimaryExpression	"""udiv"""		1256682	1					
ANR	1257231	ElseStatement	else		1256682	0					
ANR	1257232	ExpressionStatement	"op = ""sdiv"""	242:8:4220:4231	1256682	0	True				
ANR	1257233	AssignmentExpression	"op = ""sdiv"""		1256682	0		=			
ANR	1257234	Identifier	op		1256682	0					
ANR	1257235	PrimaryExpression	"""sdiv"""		1256682	1					
ANR	1257236	ExpressionStatement	s -> s_u = 0	243:3:4236:4246	1256682	9	True				
ANR	1257237	AssignmentExpression	s -> s_u = 0		1256682	0		=			
ANR	1257238	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257239	Identifier	s		1256682	0					
ANR	1257240	Identifier	s_u		1256682	1					
ANR	1257241	PrimaryExpression	0		1256682	1					
ANR	1257242	ExpressionStatement	imm = 1	244:3:4251:4258	1256682	10	True				
ANR	1257243	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257244	Identifier	imm		1256682	0					
ANR	1257245	PrimaryExpression	1		1256682	1					
ANR	1257246	BreakStatement	break ;	245:3:4263:4268	1256682	11	True				
ANR	1257247	Label	case 2 :	246:2:4272:4278	1256682	12	True				
ANR	1257248	ExpressionStatement	"op = ""tst"""	247:3:4283:4293	1256682	13	True				
ANR	1257249	AssignmentExpression	"op = ""tst"""		1256682	0		=			
ANR	1257250	Identifier	op		1256682	0					
ANR	1257251	PrimaryExpression	"""tst"""		1256682	1					
ANR	1257252	ExpressionStatement	imm = 1	248:3:4298:4305	1256682	14	True				
ANR	1257253	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257254	Identifier	imm		1256682	0					
ANR	1257255	PrimaryExpression	1		1256682	1					
ANR	1257256	ExpressionStatement	ptr = 1	249:3:4310:4317	1256682	15	True				
ANR	1257257	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257258	Identifier	ptr		1256682	0					
ANR	1257259	PrimaryExpression	1		1256682	1					
ANR	1257260	ExpressionStatement	idx = 1	250:3:4322:4329	1256682	16	True				
ANR	1257261	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257262	Identifier	idx		1256682	0					
ANR	1257263	PrimaryExpression	1		1256682	1					
ANR	1257264	BreakStatement	break ;	251:3:4334:4339	1256682	17	True				
ANR	1257265	Label	case 3 :	252:2:4343:4349	1256682	18	True				
ANR	1257266	ExpressionStatement	branch = 1	253:3:4354:4364	1256682	19	True				
ANR	1257267	AssignmentExpression	branch = 1		1256682	0		=			
ANR	1257268	Identifier	branch		1256682	0					
ANR	1257269	PrimaryExpression	1		1256682	1					
ANR	1257270	ExpressionStatement	"op = ""bsr"""	254:3:4369:4379	1256682	20	True				
ANR	1257271	AssignmentExpression	"op = ""bsr"""		1256682	0		=			
ANR	1257272	Identifier	op		1256682	0					
ANR	1257273	PrimaryExpression	"""bsr"""		1256682	1					
ANR	1257274	ExpressionStatement	ptr = 1	255:3:4384:4391	1256682	21	True				
ANR	1257275	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257276	Identifier	ptr		1256682	0					
ANR	1257277	PrimaryExpression	1		1256682	1					
ANR	1257278	ExpressionStatement	idx = 1	256:3:4396:4403	1256682	22	True				
ANR	1257279	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257280	Identifier	idx		1256682	0					
ANR	1257281	PrimaryExpression	1		1256682	1					
ANR	1257282	IfStatement	if ( in -> in_mode == ADDR_MODE_RELATIVE )		1256682	23					
ANR	1257283	Condition	in -> in_mode == ADDR_MODE_RELATIVE	257:7:4412:4444	1256682	0	True				
ANR	1257284	EqualityExpression	in -> in_mode == ADDR_MODE_RELATIVE		1256682	0		==			
ANR	1257285	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257286	Identifier	in		1256682	0					
ANR	1257287	Identifier	in_mode		1256682	1					
ANR	1257288	Identifier	ADDR_MODE_RELATIVE		1256682	1					
ANR	1257289	ExpressionStatement	rel = 1	258:4:4451:4458	1256682	1	True				
ANR	1257290	AssignmentExpression	rel = 1		1256682	0		=			
ANR	1257291	Identifier	rel		1256682	0					
ANR	1257292	PrimaryExpression	1		1256682	1					
ANR	1257293	BreakStatement	break ;	259:3:4463:4468	1256682	24	True				
ANR	1257294	BreakStatement	break ;	261:2:4476:4481	1256682	58	True				
ANR	1257295	Label	case 0xa :	262:1:4484:4492	1256682	59	True				
ANR	1257296	SwitchStatement	switch ( in -> in_reg )		1256682	60					
ANR	1257297	Condition	in -> in_reg	263:10:4504:4513	1256682	0	True				
ANR	1257298	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1257299	Identifier	in		1256682	0					
ANR	1257300	Identifier	in_reg		1256682	1					
ANR	1257301	CompoundStatement		174:22:2443:2443	1256682	1					
ANR	1257302	Label	case 0 :	264:2:4520:4526	1256682	0	True				
ANR	1257303	ExpressionStatement	"op = ""asl"""	265:3:4531:4541	1256682	1	True				
ANR	1257304	AssignmentExpression	"op = ""asl"""		1256682	0		=			
ANR	1257305	Identifier	op		1256682	0					
ANR	1257306	PrimaryExpression	"""asl"""		1256682	1					
ANR	1257307	ExpressionStatement	imm = 1	266:3:4546:4553	1256682	2	True				
ANR	1257308	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257309	Identifier	imm		1256682	0					
ANR	1257310	PrimaryExpression	1		1256682	1					
ANR	1257311	BreakStatement	break ;	267:3:4558:4563	1256682	3	True				
ANR	1257312	Label	case 1 :	268:2:4567:4573	1256682	4	True				
ANR	1257313	IfStatement	if ( s -> s_u )		1256682	5					
ANR	1257314	Condition	s -> s_u	269:7:4582:4587	1256682	0	True				
ANR	1257315	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257316	Identifier	s		1256682	0					
ANR	1257317	Identifier	s_u		1256682	1					
ANR	1257318	ExpressionStatement	"op = ""lsr"""	269:15:4590:4600	1256682	1	True				
ANR	1257319	AssignmentExpression	"op = ""lsr"""		1256682	0		=			
ANR	1257320	Identifier	op		1256682	0					
ANR	1257321	PrimaryExpression	"""lsr"""		1256682	1					
ANR	1257322	ElseStatement	else		1256682	0					
ANR	1257323	ExpressionStatement	"op = ""asr"""	270:8:4610:4620	1256682	0	True				
ANR	1257324	AssignmentExpression	"op = ""asr"""		1256682	0		=			
ANR	1257325	Identifier	op		1256682	0					
ANR	1257326	PrimaryExpression	"""asr"""		1256682	1					
ANR	1257327	ExpressionStatement	s -> s_u = 0	271:3:4625:4635	1256682	6	True				
ANR	1257328	AssignmentExpression	s -> s_u = 0		1256682	0		=			
ANR	1257329	PtrMemberAccess	s -> s_u		1256682	0					
ANR	1257330	Identifier	s		1256682	0					
ANR	1257331	Identifier	s_u		1256682	1					
ANR	1257332	PrimaryExpression	0		1256682	1					
ANR	1257333	ExpressionStatement	imm = 1	272:3:4640:4647	1256682	7	True				
ANR	1257334	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257335	Identifier	imm		1256682	0					
ANR	1257336	PrimaryExpression	1		1256682	1					
ANR	1257337	ExpressionStatement	idx = 1	273:3:4652:4659	1256682	8	True				
ANR	1257338	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257339	Identifier	idx		1256682	0					
ANR	1257340	PrimaryExpression	1		1256682	1					
ANR	1257341	ExpressionStatement	ptr = 1	274:3:4664:4671	1256682	9	True				
ANR	1257342	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257343	Identifier	ptr		1256682	0					
ANR	1257344	PrimaryExpression	1		1256682	1					
ANR	1257345	BreakStatement	break ;	275:3:4676:4681	1256682	10	True				
ANR	1257346	Label	case 2 :	276:2:4685:4691	1256682	11	True				
ANR	1257347	ExpressionStatement	"op = ""rol"""	277:3:4696:4706	1256682	12	True				
ANR	1257348	AssignmentExpression	"op = ""rol"""		1256682	0		=			
ANR	1257349	Identifier	op		1256682	0					
ANR	1257350	PrimaryExpression	"""rol"""		1256682	1					
ANR	1257351	ExpressionStatement	imm = 1	278:3:4711:4718	1256682	13	True				
ANR	1257352	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257353	Identifier	imm		1256682	0					
ANR	1257354	PrimaryExpression	1		1256682	1					
ANR	1257355	BreakStatement	break ;	279:3:4723:4728	1256682	14	True				
ANR	1257356	Label	case 3 :	280:2:4732:4738	1256682	15	True				
ANR	1257357	ExpressionStatement	"op = ""ror"""	281:3:4743:4753	1256682	16	True				
ANR	1257358	AssignmentExpression	"op = ""ror"""		1256682	0		=			
ANR	1257359	Identifier	op		1256682	0					
ANR	1257360	PrimaryExpression	"""ror"""		1256682	1					
ANR	1257361	ExpressionStatement	imm = 1	282:3:4758:4765	1256682	17	True				
ANR	1257362	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257363	Identifier	imm		1256682	0					
ANR	1257364	PrimaryExpression	1		1256682	1					
ANR	1257365	BreakStatement	break ;	283:3:4770:4775	1256682	18	True				
ANR	1257366	BreakStatement	break ;	285:2:4783:4788	1256682	61	True				
ANR	1257367	Label	case 0xb :	287:1:4792:4800	1256682	62	True				
ANR	1257368	ExpressionStatement	"op = ""or"""	288:2:4804:4813	1256682	63	True				
ANR	1257369	AssignmentExpression	"op = ""or"""		1256682	0		=			
ANR	1257370	Identifier	op		1256682	0					
ANR	1257371	PrimaryExpression	"""or"""		1256682	1					
ANR	1257372	ExpressionStatement	reg = 1	289:2:4817:4824	1256682	64	True				
ANR	1257373	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257374	Identifier	reg		1256682	0					
ANR	1257375	PrimaryExpression	1		1256682	1					
ANR	1257376	ExpressionStatement	ptr = 1	290:2:4828:4835	1256682	65	True				
ANR	1257377	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257378	Identifier	ptr		1256682	0					
ANR	1257379	PrimaryExpression	1		1256682	1					
ANR	1257380	ExpressionStatement	idx = 1	291:2:4839:4846	1256682	66	True				
ANR	1257381	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257382	Identifier	idx		1256682	0					
ANR	1257383	PrimaryExpression	1		1256682	1					
ANR	1257384	ExpressionStatement	imm = 1	292:2:4850:4857	1256682	67	True				
ANR	1257385	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257386	Identifier	imm		1256682	0					
ANR	1257387	PrimaryExpression	1		1256682	1					
ANR	1257388	BreakStatement	break ;	293:2:4861:4866	1256682	68	True				
ANR	1257389	Label	case 0xc :	294:1:4869:4877	1256682	69	True				
ANR	1257390	ExpressionStatement	"op = ""and"""	295:2:4881:4891	1256682	70	True				
ANR	1257391	AssignmentExpression	"op = ""and"""		1256682	0		=			
ANR	1257392	Identifier	op		1256682	0					
ANR	1257393	PrimaryExpression	"""and"""		1256682	1					
ANR	1257394	ExpressionStatement	reg = 1	296:2:4895:4902	1256682	71	True				
ANR	1257395	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257396	Identifier	reg		1256682	0					
ANR	1257397	PrimaryExpression	1		1256682	1					
ANR	1257398	ExpressionStatement	ptr = 1	297:2:4906:4913	1256682	72	True				
ANR	1257399	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257400	Identifier	ptr		1256682	0					
ANR	1257401	PrimaryExpression	1		1256682	1					
ANR	1257402	ExpressionStatement	idx = 1	298:2:4917:4924	1256682	73	True				
ANR	1257403	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257404	Identifier	idx		1256682	0					
ANR	1257405	PrimaryExpression	1		1256682	1					
ANR	1257406	ExpressionStatement	imm = 1	299:2:4928:4935	1256682	74	True				
ANR	1257407	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257408	Identifier	imm		1256682	0					
ANR	1257409	PrimaryExpression	1		1256682	1					
ANR	1257410	BreakStatement	break ;	300:2:4939:4944	1256682	75	True				
ANR	1257411	Label	case 0xd :	301:1:4947:4955	1256682	76	True				
ANR	1257412	ExpressionStatement	"op = ""xor"""	302:2:4959:4969	1256682	77	True				
ANR	1257413	AssignmentExpression	"op = ""xor"""		1256682	0		=			
ANR	1257414	Identifier	op		1256682	0					
ANR	1257415	PrimaryExpression	"""xor"""		1256682	1					
ANR	1257416	ExpressionStatement	reg = 1	303:2:4973:4980	1256682	78	True				
ANR	1257417	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257418	Identifier	reg		1256682	0					
ANR	1257419	PrimaryExpression	1		1256682	1					
ANR	1257420	ExpressionStatement	ptr = 1	304:2:4984:4991	1256682	79	True				
ANR	1257421	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257422	Identifier	ptr		1256682	0					
ANR	1257423	PrimaryExpression	1		1256682	1					
ANR	1257424	ExpressionStatement	idx = 1	305:2:4995:5002	1256682	80	True				
ANR	1257425	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257426	Identifier	idx		1256682	0					
ANR	1257427	PrimaryExpression	1		1256682	1					
ANR	1257428	ExpressionStatement	imm = 1	306:2:5006:5013	1256682	81	True				
ANR	1257429	AssignmentExpression	imm = 1		1256682	0		=			
ANR	1257430	Identifier	imm		1256682	0					
ANR	1257431	PrimaryExpression	1		1256682	1					
ANR	1257432	BreakStatement	break ;	307:2:5017:5022	1256682	82	True				
ANR	1257433	Label	case 0xe :	308:1:5025:5033	1256682	83	True				
ANR	1257434	ExpressionStatement	branch = 1	309:2:5037:5047	1256682	84	True				
ANR	1257435	AssignmentExpression	branch = 1		1256682	0		=			
ANR	1257436	Identifier	branch		1256682	0					
ANR	1257437	PrimaryExpression	1		1256682	1					
ANR	1257438	IfStatement	if ( in -> in_mode == ADDR_MODE_RELATIVE )		1256682	85					
ANR	1257439	Condition	in -> in_mode == ADDR_MODE_RELATIVE	310:6:5055:5087	1256682	0	True				
ANR	1257440	EqualityExpression	in -> in_mode == ADDR_MODE_RELATIVE		1256682	0		==			
ANR	1257441	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257442	Identifier	in		1256682	0					
ANR	1257443	Identifier	in_mode		1256682	1					
ANR	1257444	Identifier	ADDR_MODE_RELATIVE		1256682	1					
ANR	1257445	ExpressionStatement	rel = 1	311:3:5093:5100	1256682	1	True				
ANR	1257446	AssignmentExpression	rel = 1		1256682	0		=			
ANR	1257447	Identifier	rel		1256682	0					
ANR	1257448	PrimaryExpression	1		1256682	1					
ANR	1257449	SwitchStatement	switch ( in -> in_reg )		1256682	86					
ANR	1257450	Condition	in -> in_reg	312:10:5112:5121	1256682	0	True				
ANR	1257451	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1257452	Identifier	in		1256682	0					
ANR	1257453	Identifier	in_reg		1256682	1					
ANR	1257454	CompoundStatement		223:22:3051:3051	1256682	1					
ANR	1257455	Label	case 0 :	313:2:5128:5134	1256682	0	True				
ANR	1257456	ExpressionStatement	"op = ""bra"""	314:3:5139:5149	1256682	1	True				
ANR	1257457	AssignmentExpression	"op = ""bra"""		1256682	0		=			
ANR	1257458	Identifier	op		1256682	0					
ANR	1257459	PrimaryExpression	"""bra"""		1256682	1					
ANR	1257460	ExpressionStatement	ptr = 1	315:3:5154:5161	1256682	2	True				
ANR	1257461	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257462	Identifier	ptr		1256682	0					
ANR	1257463	PrimaryExpression	1		1256682	1					
ANR	1257464	ExpressionStatement	idx = 1	316:3:5166:5173	1256682	3	True				
ANR	1257465	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257466	Identifier	idx		1256682	0					
ANR	1257467	PrimaryExpression	1		1256682	1					
ANR	1257468	IfStatement	if ( s -> s_nopd )		1256682	4					
ANR	1257469	Condition	s -> s_nopd	318:7:5188:5196	1256682	0	True				
ANR	1257470	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1257471	Identifier	s		1256682	0					
ANR	1257472	Identifier	s_nopd		1256682	1					
ANR	1257473	CompoundStatement		229:18:3126:3126	1256682	1					
ANR	1257474	ExpressionStatement	"op = ""bra2"""	319:4:5205:5216	1256682	0	True				
ANR	1257475	AssignmentExpression	"op = ""bra2"""		1256682	0		=			
ANR	1257476	Identifier	op		1256682	0					
ANR	1257477	PrimaryExpression	"""bra2"""		1256682	1					
ANR	1257478	ExpressionStatement	"strcpy ( s -> s_nopd -> d_asm , """" )"	320:4:5250:5278	1256682	1	True				
ANR	1257479	CallExpression	"strcpy ( s -> s_nopd -> d_asm , """" )"		1256682	0					
ANR	1257480	Callee	strcpy		1256682	0					
ANR	1257481	Identifier	strcpy		1256682	0					
ANR	1257482	ArgumentList	s -> s_nopd -> d_asm		1256682	1					
ANR	1257483	Argument	s -> s_nopd -> d_asm		1256682	0					
ANR	1257484	PtrMemberAccess	s -> s_nopd -> d_asm		1256682	0					
ANR	1257485	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1257486	Identifier	s		1256682	0					
ANR	1257487	Identifier	s_nopd		1256682	1					
ANR	1257488	Identifier	d_asm		1256682	1					
ANR	1257489	Argument	""""""		1256682	1					
ANR	1257490	PrimaryExpression	""""""		1256682	0					
ANR	1257491	BreakStatement	break ;	323:3:5295:5300	1256682	5	True				
ANR	1257492	Label	case 1 :	325:2:5305:5311	1256682	6	True				
ANR	1257493	ExpressionStatement	"op = ""blt"""	326:3:5316:5326	1256682	7	True				
ANR	1257494	AssignmentExpression	"op = ""blt"""		1256682	0		=			
ANR	1257495	Identifier	op		1256682	0					
ANR	1257496	PrimaryExpression	"""blt"""		1256682	1					
ANR	1257497	BreakStatement	break ;	327:3:5343:5348	1256682	8	True				
ANR	1257498	Label	case 2 :	328:2:5352:5358	1256682	9	True				
ANR	1257499	ExpressionStatement	"op = ""bpl"""	329:3:5363:5373	1256682	10	True				
ANR	1257500	AssignmentExpression	"op = ""bpl"""		1256682	0		=			
ANR	1257501	Identifier	op		1256682	0					
ANR	1257502	PrimaryExpression	"""bpl"""		1256682	1					
ANR	1257503	BreakStatement	break ;	330:3:5378:5383	1256682	11	True				
ANR	1257504	Label	case 3 :	331:2:5387:5393	1256682	12	True				
ANR	1257505	ExpressionStatement	"op = ""bmi"""	332:3:5398:5408	1256682	13	True				
ANR	1257506	AssignmentExpression	"op = ""bmi"""		1256682	0		=			
ANR	1257507	Identifier	op		1256682	0					
ANR	1257508	PrimaryExpression	"""bmi"""		1256682	1					
ANR	1257509	BreakStatement	break ;	333:3:5413:5418	1256682	14	True				
ANR	1257510	BreakStatement	break ;	335:2:5426:5431	1256682	87	True				
ANR	1257511	Label	case 0xf :	336:1:5434:5442	1256682	88	True				
ANR	1257512	ExpressionStatement	branch = 1	337:2:5446:5456	1256682	89	True				
ANR	1257513	AssignmentExpression	branch = 1		1256682	0		=			
ANR	1257514	Identifier	branch		1256682	0					
ANR	1257515	PrimaryExpression	1		1256682	1					
ANR	1257516	IfStatement	if ( in -> in_mode == ADDR_MODE_RELATIVE )		1256682	90					
ANR	1257517	Condition	in -> in_mode == ADDR_MODE_RELATIVE	338:6:5464:5496	1256682	0	True				
ANR	1257518	EqualityExpression	in -> in_mode == ADDR_MODE_RELATIVE		1256682	0		==			
ANR	1257519	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257520	Identifier	in		1256682	0					
ANR	1257521	Identifier	in_mode		1256682	1					
ANR	1257522	Identifier	ADDR_MODE_RELATIVE		1256682	1					
ANR	1257523	ExpressionStatement	rel = 1	339:3:5502:5509	1256682	1	True				
ANR	1257524	AssignmentExpression	rel = 1		1256682	0		=			
ANR	1257525	Identifier	rel		1256682	0					
ANR	1257526	PrimaryExpression	1		1256682	1					
ANR	1257527	SwitchStatement	switch ( in -> in_reg )		1256682	91					
ANR	1257528	Condition	in -> in_reg	340:10:5521:5530	1256682	0	True				
ANR	1257529	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1257530	Identifier	in		1256682	0					
ANR	1257531	Identifier	in_reg		1256682	1					
ANR	1257532	CompoundStatement		251:22:3460:3460	1256682	1					
ANR	1257533	Label	case 0 :	341:2:5537:5543	1256682	0	True				
ANR	1257534	ExpressionStatement	"op = ""bne"""	341:10:5545:5555	1256682	1	True				
ANR	1257535	AssignmentExpression	"op = ""bne"""		1256682	0		=			
ANR	1257536	Identifier	op		1256682	0					
ANR	1257537	PrimaryExpression	"""bne"""		1256682	1					
ANR	1257538	BreakStatement	break ;	341:22:5557:5562	1256682	2	True				
ANR	1257539	Label	case 1 :	342:2:5566:5572	1256682	3	True				
ANR	1257540	ExpressionStatement	"op = ""beq"""	342:10:5574:5584	1256682	4	True				
ANR	1257541	AssignmentExpression	"op = ""beq"""		1256682	0		=			
ANR	1257542	Identifier	op		1256682	0					
ANR	1257543	PrimaryExpression	"""beq"""		1256682	1					
ANR	1257544	BreakStatement	break ;	342:22:5586:5591	1256682	5	True				
ANR	1257545	Label	case 2 :	343:2:5595:5601	1256682	6	True				
ANR	1257546	ExpressionStatement	"op = ""bcc"""	343:10:5603:5613	1256682	7	True				
ANR	1257547	AssignmentExpression	"op = ""bcc"""		1256682	0		=			
ANR	1257548	Identifier	op		1256682	0					
ANR	1257549	PrimaryExpression	"""bcc"""		1256682	1					
ANR	1257550	BreakStatement	break ;	343:22:5615:5620	1256682	8	True				
ANR	1257551	Label	case 3 :	344:2:5624:5630	1256682	9	True				
ANR	1257552	ExpressionStatement	"op = ""bcs"""	344:10:5632:5642	1256682	10	True				
ANR	1257553	AssignmentExpression	"op = ""bcs"""		1256682	0		=			
ANR	1257554	Identifier	op		1256682	0					
ANR	1257555	PrimaryExpression	"""bcs"""		1256682	1					
ANR	1257556	BreakStatement	break ;	344:22:5644:5649	1256682	11	True				
ANR	1257557	BreakStatement	break ;	346:2:5657:5662	1256682	92	True				
ANR	1257558	IfStatement	if ( ! op )		1256682	15					
ANR	1257559	Condition	! op	349:5:5673:5675	1256682	0	True				
ANR	1257560	UnaryOperationExpression	! op		1256682	0					
ANR	1257561	UnaryOperator	!		1256682	0					
ANR	1257562	Identifier	op		1256682	1					
ANR	1257563	ReturnStatement	return 0 ;	349:10:5678:5686	1256682	1	True				
ANR	1257564	PrimaryExpression	0		1256682	0					
ANR	1257565	IfStatement	if ( ptr && in -> in_mode == DATA_MODE_IMMEDIATE )		1256682	16					
ANR	1257566	Condition	ptr && in -> in_mode == DATA_MODE_IMMEDIATE	351:5:5694:5734	1256682	0	True				
ANR	1257567	AndExpression	ptr && in -> in_mode == DATA_MODE_IMMEDIATE		1256682	0		&&			
ANR	1257568	Identifier	ptr		1256682	0					
ANR	1257569	EqualityExpression	in -> in_mode == DATA_MODE_IMMEDIATE		1256682	1		==			
ANR	1257570	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257571	Identifier	in		1256682	0					
ANR	1257572	Identifier	in_mode		1256682	1					
ANR	1257573	Identifier	DATA_MODE_IMMEDIATE		1256682	1					
ANR	1257574	ExpressionStatement	ptr = 0	352:2:5739:5746	1256682	1	True				
ANR	1257575	AssignmentExpression	ptr = 0		1256682	0		=			
ANR	1257576	Identifier	ptr		1256682	0					
ANR	1257577	PrimaryExpression	0		1256682	1					
ANR	1257578	IfStatement	if ( branch && in -> in_mode == ADDR_MODE_X_RELATIVE )		1256682	17					
ANR	1257579	Condition	branch && in -> in_mode == ADDR_MODE_X_RELATIVE	354:5:5754:5798	1256682	0	True				
ANR	1257580	AndExpression	branch && in -> in_mode == ADDR_MODE_X_RELATIVE		1256682	0		&&			
ANR	1257581	Identifier	branch		1256682	0					
ANR	1257582	EqualityExpression	in -> in_mode == ADDR_MODE_X_RELATIVE		1256682	1		==			
ANR	1257583	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257584	Identifier	in		1256682	0					
ANR	1257585	Identifier	in_mode		1256682	1					
ANR	1257586	Identifier	ADDR_MODE_X_RELATIVE		1256682	1					
ANR	1257587	ExpressionStatement	ptr = 0	355:2:5803:5810	1256682	1	True				
ANR	1257588	AssignmentExpression	ptr = 0		1256682	0		=			
ANR	1257589	Identifier	ptr		1256682	0					
ANR	1257590	PrimaryExpression	0		1256682	1					
ANR	1257591	IfStatement	if ( idx && ( ! ( in -> in_mode & 2 ) ) )		1256682	18					
ANR	1257592	Condition	idx && ( ! ( in -> in_mode & 2 ) )	357:5:5818:5844	1256682	0	True				
ANR	1257593	AndExpression	idx && ( ! ( in -> in_mode & 2 ) )		1256682	0		&&			
ANR	1257594	Identifier	idx		1256682	0					
ANR	1257595	UnaryOperationExpression	! ( in -> in_mode & 2 )		1256682	1					
ANR	1257596	UnaryOperator	!		1256682	0					
ANR	1257597	BitAndExpression	in -> in_mode & 2		1256682	1		&			
ANR	1257598	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257599	Identifier	in		1256682	0					
ANR	1257600	Identifier	in_mode		1256682	1					
ANR	1257601	PrimaryExpression	2		1256682	1					
ANR	1257602	ExpressionStatement	idx = 0	358:2:5849:5856	1256682	1	True				
ANR	1257603	AssignmentExpression	idx = 0		1256682	0		=			
ANR	1257604	Identifier	idx		1256682	0					
ANR	1257605	PrimaryExpression	0		1256682	1					
ANR	1257606	IfStatement	if ( regn )		1256682	19					
ANR	1257607	Condition	regn	360:5:5864:5867	1256682	0	True				
ANR	1257608	Identifier	regn		1256682	0					
ANR	1257609	CompoundStatement		271:11:3797:3797	1256682	1					
ANR	1257610	ExpressionStatement	ptr = 1	361:2:5874:5881	1256682	0	True				
ANR	1257611	AssignmentExpression	ptr = 1		1256682	0		=			
ANR	1257612	Identifier	ptr		1256682	0					
ANR	1257613	PrimaryExpression	1		1256682	1					
ANR	1257614	ExpressionStatement	idx = 1	362:2:5885:5892	1256682	1	True				
ANR	1257615	AssignmentExpression	idx = 1		1256682	0		=			
ANR	1257616	Identifier	idx		1256682	0					
ANR	1257617	PrimaryExpression	1		1256682	1					
ANR	1257618	ExpressionStatement	reg = 1	363:2:5896:5903	1256682	2	True				
ANR	1257619	AssignmentExpression	reg = 1		1256682	0		=			
ANR	1257620	Identifier	reg		1256682	0					
ANR	1257621	PrimaryExpression	1		1256682	1					
ANR	1257622	ExpressionStatement	"sprintf ( d -> d_asm , ""%s "" , op )"	366:1:5910:5939	1256682	20	True				
ANR	1257623	CallExpression	"sprintf ( d -> d_asm , ""%s "" , op )"		1256682	0					
ANR	1257624	Callee	sprintf		1256682	0					
ANR	1257625	Identifier	sprintf		1256682	0					
ANR	1257626	ArgumentList	d -> d_asm		1256682	1					
ANR	1257627	Argument	d -> d_asm		1256682	0					
ANR	1257628	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257629	Identifier	d		1256682	0					
ANR	1257630	Identifier	d_asm		1256682	1					
ANR	1257631	Argument	"""%s """		1256682	1					
ANR	1257632	PrimaryExpression	"""%s """		1256682	0					
ANR	1257633	Argument	op		1256682	2					
ANR	1257634	Identifier	op		1256682	0					
ANR	1257635	IfStatement	if ( reg )		1256682	21					
ANR	1257636	Condition	reg	367:5:5946:5948	1256682	0	True				
ANR	1257637	Identifier	reg		1256682	0					
ANR	1257638	CompoundStatement		279:2:3882:3896	1256682	1					
ANR	1257639	IdentifierDeclStatement	char * r = regn ;	368:2:5955:5969	1256682	0	True				
ANR	1257640	IdentifierDecl	* r = regn		1256682	0					
ANR	1257641	IdentifierDeclType	char *		1256682	0					
ANR	1257642	Identifier	r		1256682	1					
ANR	1257643	AssignmentExpression	* r = regn		1256682	2		=			
ANR	1257644	Identifier	regn		1256682	0					
ANR	1257645	Identifier	regn		1256682	1					
ANR	1257646	IfStatement	if ( ! r )		1256682	1					
ANR	1257647	Condition	! r	369:6:5977:5978	1256682	0	True				
ANR	1257648	UnaryOperationExpression	! r		1256682	0					
ANR	1257649	UnaryOperator	!		1256682	0					
ANR	1257650	Identifier	r		1256682	1					
ANR	1257651	CompoundStatement		280:10:3908:3908	1256682	1					
ANR	1257652	ExpressionStatement	r = regname ( in -> in_reg )	370:3:5986:6010	1256682	0	True				
ANR	1257653	AssignmentExpression	r = regname ( in -> in_reg )		1256682	0		=			
ANR	1257654	Identifier	r		1256682	0					
ANR	1257655	CallExpression	regname ( in -> in_reg )		1256682	1					
ANR	1257656	Callee	regname		1256682	0					
ANR	1257657	Identifier	regname		1256682	0					
ANR	1257658	ArgumentList	in -> in_reg		1256682	1					
ANR	1257659	Argument	in -> in_reg		1256682	0					
ANR	1257660	PtrMemberAccess	in -> in_reg		1256682	0					
ANR	1257661	Identifier	in		1256682	0					
ANR	1257662	Identifier	in_reg		1256682	1					
ANR	1257663	IfStatement	if ( r && ! rti )		1256682	2					
ANR	1257664	Condition	r && ! rti	372:6:6022:6030	1256682	0	True				
ANR	1257665	AndExpression	r && ! rti		1256682	0		&&			
ANR	1257666	Identifier	r		1256682	0					
ANR	1257667	UnaryOperationExpression	! rti		1256682	1					
ANR	1257668	UnaryOperator	!		1256682	0					
ANR	1257669	Identifier	rti		1256682	1					
ANR	1257670	CompoundStatement		283:17:3960:3960	1256682	1					
ANR	1257671	IfStatement	if ( ( strlen ( r ) + 4 + strlen ( d -> d_asm ) ) < sizeof ( d -> d_asm ) )		1256682	0					
ANR	1257672	Condition	( strlen ( r ) + 4 + strlen ( d -> d_asm ) ) < sizeof ( d -> d_asm )	373:7:6042:6097	1256682	0	True				
ANR	1257673	RelationalExpression	( strlen ( r ) + 4 + strlen ( d -> d_asm ) ) < sizeof ( d -> d_asm )		1256682	0		<			
ANR	1257674	AdditiveExpression	strlen ( r ) + 4 + strlen ( d -> d_asm )		1256682	0		+			
ANR	1257675	CallExpression	strlen ( r )		1256682	0					
ANR	1257676	Callee	strlen		1256682	0					
ANR	1257677	Identifier	strlen		1256682	0					
ANR	1257678	ArgumentList	r		1256682	1					
ANR	1257679	Argument	r		1256682	0					
ANR	1257680	Identifier	r		1256682	0					
ANR	1257681	AdditiveExpression	4 + strlen ( d -> d_asm )		1256682	1		+			
ANR	1257682	PrimaryExpression	4		1256682	0					
ANR	1257683	CallExpression	strlen ( d -> d_asm )		1256682	1					
ANR	1257684	Callee	strlen		1256682	0					
ANR	1257685	Identifier	strlen		1256682	0					
ANR	1257686	ArgumentList	d -> d_asm		1256682	1					
ANR	1257687	Argument	d -> d_asm		1256682	0					
ANR	1257688	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257689	Identifier	d		1256682	0					
ANR	1257690	Identifier	d_asm		1256682	1					
ANR	1257691	SizeofExpression	sizeof ( d -> d_asm )		1256682	1					
ANR	1257692	Sizeof	sizeof		1256682	0					
ANR	1257693	PtrMemberAccess	d -> d_asm		1256682	1					
ANR	1257694	Identifier	d		1256682	0					
ANR	1257695	Identifier	d_asm		1256682	1					
ANR	1257696	CompoundStatement		284:65:4027:4027	1256682	1					
ANR	1257697	ExpressionStatement	"strcat ( d -> d_asm , r )"	374:4:6106:6126	1256682	0	True				
ANR	1257698	CallExpression	"strcat ( d -> d_asm , r )"		1256682	0					
ANR	1257699	Callee	strcat		1256682	0					
ANR	1257700	Identifier	strcat		1256682	0					
ANR	1257701	ArgumentList	d -> d_asm		1256682	1					
ANR	1257702	Argument	d -> d_asm		1256682	0					
ANR	1257703	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257704	Identifier	d		1256682	0					
ANR	1257705	Identifier	d_asm		1256682	1					
ANR	1257706	Argument	r		1256682	1					
ANR	1257707	Identifier	r		1256682	0					
ANR	1257708	ExpressionStatement	"strcat ( d -> d_asm , "", "" )"	375:4:6132:6155	1256682	1	True				
ANR	1257709	CallExpression	"strcat ( d -> d_asm , "", "" )"		1256682	0					
ANR	1257710	Callee	strcat		1256682	0					
ANR	1257711	Identifier	strcat		1256682	0					
ANR	1257712	ArgumentList	d -> d_asm		1256682	1					
ANR	1257713	Argument	d -> d_asm		1256682	0					
ANR	1257714	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257715	Identifier	d		1256682	0					
ANR	1257716	Identifier	d_asm		1256682	1					
ANR	1257717	Argument	""", """		1256682	1					
ANR	1257718	PrimaryExpression	""", """		1256682	0					
ANR	1257719	IfStatement	if ( ptr )		1256682	22					
ANR	1257720	Condition	ptr	379:5:6174:6176	1256682	0	True				
ANR	1257721	Identifier	ptr		1256682	0					
ANR	1257722	CompoundStatement		290:10:4106:4106	1256682	1					
ANR	1257723	ExpressionStatement	"strcat ( d -> d_asm , ""@"" )"	380:2:6183:6205	1256682	0	True				
ANR	1257724	CallExpression	"strcat ( d -> d_asm , ""@"" )"		1256682	0					
ANR	1257725	Callee	strcat		1256682	0					
ANR	1257726	Identifier	strcat		1256682	0					
ANR	1257727	ArgumentList	d -> d_asm		1256682	1					
ANR	1257728	Argument	d -> d_asm		1256682	0					
ANR	1257729	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257730	Identifier	d		1256682	0					
ANR	1257731	Identifier	d_asm		1256682	1					
ANR	1257732	Argument	"""@"""		1256682	1					
ANR	1257733	PrimaryExpression	"""@"""		1256682	0					
ANR	1257734	ExpressionStatement	rel = 0	381:2:6209:6216	1256682	1	True				
ANR	1257735	AssignmentExpression	rel = 0		1256682	0		=			
ANR	1257736	Identifier	rel		1256682	0					
ANR	1257737	PrimaryExpression	0		1256682	1					
ANR	1257738	ElseStatement	else		1256682	0					
ANR	1257739	IfStatement	if ( imm )		1256682	0					
ANR	1257740	Condition	imm	382:12:6230:6232	1256682	0	True				
ANR	1257741	Identifier	imm		1256682	0					
ANR	1257742	CompoundStatement		293:17:4162:4162	1256682	1					
ANR	1257743	ExpressionStatement	"strcat ( d -> d_asm , ""#"" )"	383:2:6239:6261	1256682	0	True				
ANR	1257744	CallExpression	"strcat ( d -> d_asm , ""#"" )"		1256682	0					
ANR	1257745	Callee	strcat		1256682	0					
ANR	1257746	Identifier	strcat		1256682	0					
ANR	1257747	ArgumentList	d -> d_asm		1256682	1					
ANR	1257748	Argument	d -> d_asm		1256682	0					
ANR	1257749	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257750	Identifier	d		1256682	0					
ANR	1257751	Identifier	d_asm		1256682	1					
ANR	1257752	Argument	"""#"""		1256682	1					
ANR	1257753	PrimaryExpression	"""#"""		1256682	0					
ANR	1257754	IfStatement	if ( idx && ptr )		1256682	23					
ANR	1257755	Condition	idx && ptr	385:5:6271:6280	1256682	0	True				
ANR	1257756	AndExpression	idx && ptr		1256682	0		&&			
ANR	1257757	Identifier	idx		1256682	0					
ANR	1257758	Identifier	ptr		1256682	1					
ANR	1257759	CompoundStatement		296:17:4210:4210	1256682	1					
ANR	1257760	ExpressionStatement	"strcat ( d -> d_asm , ""("" )"	386:2:6287:6309	1256682	0	True				
ANR	1257761	CallExpression	"strcat ( d -> d_asm , ""("" )"		1256682	0					
ANR	1257762	Callee	strcat		1256682	0					
ANR	1257763	Identifier	strcat		1256682	0					
ANR	1257764	ArgumentList	d -> d_asm		1256682	1					
ANR	1257765	Argument	d -> d_asm		1256682	0					
ANR	1257766	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257767	Identifier	d		1256682	0					
ANR	1257768	Identifier	d_asm		1256682	1					
ANR	1257769	Argument	"""("""		1256682	1					
ANR	1257770	PrimaryExpression	"""("""		1256682	0					
ANR	1257771	ExpressionStatement	d -> d_prefix = s -> s_prefix	389:1:6316:6341	1256682	24	True				
ANR	1257772	AssignmentExpression	d -> d_prefix = s -> s_prefix		1256682	0		=			
ANR	1257773	PtrMemberAccess	d -> d_prefix		1256682	0					
ANR	1257774	Identifier	d		1256682	0					
ANR	1257775	Identifier	d_prefix		1256682	1					
ANR	1257776	PtrMemberAccess	s -> s_prefix		1256682	1					
ANR	1257777	Identifier	s		1256682	0					
ANR	1257778	Identifier	s_prefix		1256682	1					
ANR	1257779	IfStatement	if ( ( branch && idx ) || rti )		1256682	25					
ANR	1257780	Condition	( branch && idx ) || rti	392:5:6391:6412	1256682	0	True				
ANR	1257781	OrExpression	( branch && idx ) || rti		1256682	0		||			
ANR	1257782	AndExpression	branch && idx		1256682	0		&&			
ANR	1257783	Identifier	branch		1256682	0					
ANR	1257784	Identifier	idx		1256682	1					
ANR	1257785	Identifier	rti		1256682	1					
ANR	1257786	CompoundStatement		303:29:4342:4342	1256682	1					
ANR	1257787	ExpressionStatement	"d -> d_operand = get_operand ( s , d )"	393:2:6419:6451	1256682	0	True				
ANR	1257788	AssignmentExpression	"d -> d_operand = get_operand ( s , d )"		1256682	0		=			
ANR	1257789	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257790	Identifier	d		1256682	0					
ANR	1257791	Identifier	d_operand		1256682	1					
ANR	1257792	CallExpression	"get_operand ( s , d )"		1256682	1					
ANR	1257793	Callee	get_operand		1256682	0					
ANR	1257794	Identifier	get_operand		1256682	0					
ANR	1257795	ArgumentList	s		1256682	1					
ANR	1257796	Argument	s		1256682	0					
ANR	1257797	Identifier	s		1256682	0					
ANR	1257798	Argument	d		1256682	1					
ANR	1257799	Identifier	d		1256682	0					
ANR	1257800	IfStatement	if ( d -> d_operand < 0 )		1256682	1					
ANR	1257801	Condition	d -> d_operand < 0	394:6:6459:6474	1256682	0	True				
ANR	1257802	RelationalExpression	d -> d_operand < 0		1256682	0		<			
ANR	1257803	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257804	Identifier	d		1256682	0					
ANR	1257805	Identifier	d_operand		1256682	1					
ANR	1257806	PrimaryExpression	0		1256682	1					
ANR	1257807	CompoundStatement		305:24:4404:4404	1256682	1					
ANR	1257808	ExpressionStatement	d -> d_operand *= - 1	395:3:6482:6500	1256682	0	True				
ANR	1257809	AssignmentExpression	d -> d_operand *= - 1		1256682	0		*=			
ANR	1257810	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257811	Identifier	d		1256682	0					
ANR	1257812	Identifier	d_operand		1256682	1					
ANR	1257813	UnaryOperationExpression	- 1		1256682	1					
ANR	1257814	UnaryOperator	-		1256682	0					
ANR	1257815	PrimaryExpression	1		1256682	1					
ANR	1257816	ExpressionStatement	"sign = ""-"""	396:3:6505:6515	1256682	1	True				
ANR	1257817	AssignmentExpression	"sign = ""-"""		1256682	0		=			
ANR	1257818	Identifier	sign		1256682	0					
ANR	1257819	PrimaryExpression	"""-"""		1256682	1					
ANR	1257820	ElseStatement	else		1256682	0					
ANR	1257821	CompoundStatement		309:8:4457:4457	1256682	0					
ANR	1257822	ExpressionStatement	d -> d_operand = s -> s_prefix_val | in -> in_operand	399:2:6534:6581	1256682	0	True				
ANR	1257823	AssignmentExpression	d -> d_operand = s -> s_prefix_val | in -> in_operand		1256682	0		=			
ANR	1257824	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257825	Identifier	d		1256682	0					
ANR	1257826	Identifier	d_operand		1256682	1					
ANR	1257827	InclusiveOrExpression	s -> s_prefix_val | in -> in_operand		1256682	1		|			
ANR	1257828	PtrMemberAccess	s -> s_prefix_val		1256682	0					
ANR	1257829	Identifier	s		1256682	0					
ANR	1257830	Identifier	s_prefix_val		1256682	1					
ANR	1257831	PtrMemberAccess	in -> in_operand		1256682	1					
ANR	1257832	Identifier	in		1256682	0					
ANR	1257833	Identifier	in_operand		1256682	1					
ANR	1257834	IfStatement	if ( d -> d_operand & 0x80 )		1256682	1					
ANR	1257835	Condition	d -> d_operand & 0x80	400:6:6589:6607	1256682	0	True				
ANR	1257836	BitAndExpression	d -> d_operand & 0x80		1256682	0		&			
ANR	1257837	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257838	Identifier	d		1256682	0					
ANR	1257839	Identifier	d_operand		1256682	1					
ANR	1257840	PrimaryExpression	0x80		1256682	1					
ANR	1257841	CompoundStatement		311:27:4537:4537	1256682	1					
ANR	1257842	IfStatement	if ( d -> d_prefix )		1256682	0					
ANR	1257843	Condition	d -> d_prefix	401:7:6619:6629	1256682	0	True				
ANR	1257844	PtrMemberAccess	d -> d_prefix		1256682	0					
ANR	1257845	Identifier	d		1256682	0					
ANR	1257846	Identifier	d_prefix		1256682	1					
ANR	1257847	CompoundStatement		312:20:4559:4559	1256682	1					
ANR	1257848	IfStatement	if ( ! rel )		1256682	0					
ANR	1257849	Condition	! rel	402:8:6642:6645	1256682	0	True				
ANR	1257850	UnaryOperationExpression	! rel		1256682	0					
ANR	1257851	UnaryOperator	!		1256682	0					
ANR	1257852	Identifier	rel		1256682	1					
ANR	1257853	ExpressionStatement	d -> d_operand -= 0x100	402:14:6648:6669	1256682	1	True				
ANR	1257854	AssignmentExpression	d -> d_operand -= 0x100		1256682	0		-=			
ANR	1257855	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257856	Identifier	d		1256682	0					
ANR	1257857	Identifier	d_operand		1256682	1					
ANR	1257858	PrimaryExpression	0x100		1256682	1					
ANR	1257859	ElseStatement	else		1256682	0					
ANR	1257860	ExpressionStatement	d -> d_operand |= 0xff00	403:10:6681:6703	1256682	0	True				
ANR	1257861	AssignmentExpression	d -> d_operand |= 0xff00		1256682	0		|=			
ANR	1257862	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257863	Identifier	d		1256682	0					
ANR	1257864	Identifier	d_operand		1256682	1					
ANR	1257865	PrimaryExpression	0xff00		1256682	1					
ANR	1257866	ExpressionStatement	operand = d -> d_operand	408:1:6726:6748	1256682	26	True				
ANR	1257867	AssignmentExpression	operand = d -> d_operand		1256682	0		=			
ANR	1257868	Identifier	operand		1256682	0					
ANR	1257869	PtrMemberAccess	d -> d_operand		1256682	1					
ANR	1257870	Identifier	d		1256682	0					
ANR	1257871	Identifier	d_operand		1256682	1					
ANR	1257872	IfStatement	if ( operand < 0 )		1256682	27					
ANR	1257873	Condition	operand < 0	409:5:6755:6765	1256682	0	True				
ANR	1257874	RelationalExpression	operand < 0		1256682	0		<			
ANR	1257875	Identifier	operand		1256682	0					
ANR	1257876	PrimaryExpression	0		1256682	1					
ANR	1257877	ExpressionStatement	operand *= - 1	410:2:6770:6783	1256682	1	True				
ANR	1257878	AssignmentExpression	operand *= - 1		1256682	0		*=			
ANR	1257879	Identifier	operand		1256682	0					
ANR	1257880	UnaryOperationExpression	- 1		1256682	1					
ANR	1257881	UnaryOperator	-		1256682	0					
ANR	1257882	PrimaryExpression	1		1256682	1					
ANR	1257883	ExpressionStatement	fmtsz = 4	412:1:6793:6802	1256682	28	True				
ANR	1257884	AssignmentExpression	fmtsz = 4		1256682	0		=			
ANR	1257885	Identifier	fmtsz		1256682	0					
ANR	1257886	PrimaryExpression	4		1256682	1					
ANR	1257887	IfStatement	if ( d -> d_operand & 0xff0000 )		1256682	29					
ANR	1257888	Condition	d -> d_operand & 0xff0000	413:5:6809:6831	1256682	0	True				
ANR	1257889	BitAndExpression	d -> d_operand & 0xff0000		1256682	0		&			
ANR	1257890	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257891	Identifier	d		1256682	0					
ANR	1257892	Identifier	d_operand		1256682	1					
ANR	1257893	PrimaryExpression	0xff0000		1256682	1					
ANR	1257894	ExpressionStatement	fmtsz += 2	414:2:6836:6846	1256682	1	True				
ANR	1257895	AssignmentExpression	fmtsz += 2		1256682	0		+=			
ANR	1257896	Identifier	fmtsz		1256682	0					
ANR	1257897	PrimaryExpression	2		1256682	1					
ANR	1257898	ExpressionStatement	"snprintf ( fmt , sizeof ( fmt ) , ""%s0x%%.%dX"" , sign , fmtsz )"	417:1:6887:6942	1256682	30	True				
ANR	1257899	CallExpression	"snprintf ( fmt , sizeof ( fmt ) , ""%s0x%%.%dX"" , sign , fmtsz )"		1256682	0					
ANR	1257900	Callee	snprintf		1256682	0					
ANR	1257901	Identifier	snprintf		1256682	0					
ANR	1257902	ArgumentList	fmt		1256682	1					
ANR	1257903	Argument	fmt		1256682	0					
ANR	1257904	Identifier	fmt		1256682	0					
ANR	1257905	Argument	sizeof ( fmt )		1256682	1					
ANR	1257906	SizeofExpression	sizeof ( fmt )		1256682	0					
ANR	1257907	Sizeof	sizeof		1256682	0					
ANR	1257908	SizeofOperand	fmt		1256682	1					
ANR	1257909	Argument	"""%s0x%%.%dX"""		1256682	2					
ANR	1257910	PrimaryExpression	"""%s0x%%.%dX"""		1256682	0					
ANR	1257911	Argument	sign		1256682	3					
ANR	1257912	Identifier	sign		1256682	0					
ANR	1257913	Argument	fmtsz		1256682	4					
ANR	1257914	Identifier	fmtsz		1256682	0					
ANR	1257915	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , fmt , d -> d_operand )"	418:1:6945:6992	1256682	31	True				
ANR	1257916	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , fmt , d -> d_operand )"		1256682	0					
ANR	1257917	Callee	snprintf		1256682	0					
ANR	1257918	Identifier	snprintf		1256682	0					
ANR	1257919	ArgumentList	tmp		1256682	1					
ANR	1257920	Argument	tmp		1256682	0					
ANR	1257921	Identifier	tmp		1256682	0					
ANR	1257922	Argument	sizeof ( tmp )		1256682	1					
ANR	1257923	SizeofExpression	sizeof ( tmp )		1256682	0					
ANR	1257924	Sizeof	sizeof		1256682	0					
ANR	1257925	SizeofOperand	tmp		1256682	1					
ANR	1257926	Argument	fmt		1256682	2					
ANR	1257927	Identifier	fmt		1256682	0					
ANR	1257928	Argument	d -> d_operand		1256682	3					
ANR	1257929	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1257930	Identifier	d		1256682	0					
ANR	1257931	Identifier	d_operand		1256682	1					
ANR	1257932	ExpressionStatement	"strcat ( d -> d_asm , tmp )"	419:1:6995:7017	1256682	32	True				
ANR	1257933	CallExpression	"strcat ( d -> d_asm , tmp )"		1256682	0					
ANR	1257934	Callee	strcat		1256682	0					
ANR	1257935	Identifier	strcat		1256682	0					
ANR	1257936	ArgumentList	d -> d_asm		1256682	1					
ANR	1257937	Argument	d -> d_asm		1256682	0					
ANR	1257938	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257939	Identifier	d		1256682	0					
ANR	1257940	Identifier	d_asm		1256682	1					
ANR	1257941	Argument	tmp		1256682	1					
ANR	1257942	Identifier	tmp		1256682	0					
ANR	1257943	IfStatement	if ( idx )		1256682	33					
ANR	1257944	Condition	idx	421:5:7025:7027	1256682	0	True				
ANR	1257945	Identifier	idx		1256682	0					
ANR	1257946	CompoundStatement		333:2:4961:5017	1256682	1					
ANR	1257947	IdentifierDeclStatement	"char * r = in -> in_mode == DATA_MODE_INDEXED_X ? ""X"" : ""Y"" ;"	422:2:7034:7090	1256682	0	True				
ANR	1257948	IdentifierDecl	"* r = in -> in_mode == DATA_MODE_INDEXED_X ? ""X"" : ""Y"""		1256682	0					
ANR	1257949	IdentifierDeclType	char *		1256682	0					
ANR	1257950	Identifier	r		1256682	1					
ANR	1257951	AssignmentExpression	"* r = in -> in_mode == DATA_MODE_INDEXED_X ? ""X"" : ""Y"""		1256682	2		=			
ANR	1257952	Identifier	r		1256682	0					
ANR	1257953	ConditionalExpression	"in -> in_mode == DATA_MODE_INDEXED_X ? ""X"" : ""Y"""		1256682	1					
ANR	1257954	Condition	in -> in_mode == DATA_MODE_INDEXED_X		1256682	0					
ANR	1257955	EqualityExpression	in -> in_mode == DATA_MODE_INDEXED_X		1256682	0		==			
ANR	1257956	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1257957	Identifier	in		1256682	0					
ANR	1257958	Identifier	in_mode		1256682	1					
ANR	1257959	Identifier	DATA_MODE_INDEXED_X		1256682	1					
ANR	1257960	PrimaryExpression	"""X"""		1256682	1					
ANR	1257961	PrimaryExpression	"""Y"""		1256682	2					
ANR	1257962	IfStatement	if ( regn )		1256682	1					
ANR	1257963	Condition	regn	423:6:7098:7101	1256682	0	True				
ANR	1257964	Identifier	regn		1256682	0					
ANR	1257965	ExpressionStatement	"r = ""Y"""	423:12:7104:7111	1256682	1	True				
ANR	1257966	AssignmentExpression	"r = ""Y"""		1256682	0		=			
ANR	1257967	Identifier	r		1256682	0					
ANR	1257968	PrimaryExpression	"""Y"""		1256682	1					
ANR	1257969	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , "", %s"" , r )"	424:2:7115:7152	1256682	2	True				
ANR	1257970	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , "", %s"" , r )"		1256682	0					
ANR	1257971	Callee	snprintf		1256682	0					
ANR	1257972	Identifier	snprintf		1256682	0					
ANR	1257973	ArgumentList	tmp		1256682	1					
ANR	1257974	Argument	tmp		1256682	0					
ANR	1257975	Identifier	tmp		1256682	0					
ANR	1257976	Argument	sizeof ( tmp )		1256682	1					
ANR	1257977	SizeofExpression	sizeof ( tmp )		1256682	0					
ANR	1257978	Sizeof	sizeof		1256682	0					
ANR	1257979	SizeofOperand	tmp		1256682	1					
ANR	1257980	Argument	""", %s"""		1256682	2					
ANR	1257981	PrimaryExpression	""", %s"""		1256682	0					
ANR	1257982	Argument	r		1256682	3					
ANR	1257983	Identifier	r		1256682	0					
ANR	1257984	ExpressionStatement	"strcat ( d -> d_asm , tmp )"	425:2:7156:7177	1256682	3	True				
ANR	1257985	CallExpression	"strcat ( d -> d_asm , tmp )"		1256682	0					
ANR	1257986	Callee	strcat		1256682	0					
ANR	1257987	Identifier	strcat		1256682	0					
ANR	1257988	ArgumentList	d -> d_asm		1256682	1					
ANR	1257989	Argument	d -> d_asm		1256682	0					
ANR	1257990	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1257991	Identifier	d		1256682	0					
ANR	1257992	Identifier	d_asm		1256682	1					
ANR	1257993	Argument	tmp		1256682	1					
ANR	1257994	Identifier	tmp		1256682	0					
ANR	1257995	IfStatement	if ( ptr )		1256682	4					
ANR	1257996	Condition	ptr	426:6:7185:7187	1256682	0	True				
ANR	1257997	Identifier	ptr		1256682	0					
ANR	1257998	ExpressionStatement	"strcat ( d -> d_asm , "")"" )"	427:3:7193:7214	1256682	1	True				
ANR	1257999	CallExpression	"strcat ( d -> d_asm , "")"" )"		1256682	0					
ANR	1258000	Callee	strcat		1256682	0					
ANR	1258001	Identifier	strcat		1256682	0					
ANR	1258002	ArgumentList	d -> d_asm		1256682	1					
ANR	1258003	Argument	d -> d_asm		1256682	0					
ANR	1258004	PtrMemberAccess	d -> d_asm		1256682	0					
ANR	1258005	Identifier	d		1256682	0					
ANR	1258006	Identifier	d_asm		1256682	1					
ANR	1258007	Argument	""")"""		1256682	1					
ANR	1258008	PrimaryExpression	""")"""		1256682	0					
ANR	1258009	IfStatement	if ( ! rel && in -> in_mode == DATA_MODE_IMMEDIATE && ( ( d -> d_operand & 0xff00 ) == 0x7F00 ) && d -> d_operand & 0x80 )		1256682	34					
ANR	1258010	Condition	! rel && in -> in_mode == DATA_MODE_IMMEDIATE && ( ( d -> d_operand & 0xff00 ) == 0x7F00 ) && d -> d_operand & 0x80	432:5:7249:7357	1256682	0	True				
ANR	1258011	AndExpression	! rel && in -> in_mode == DATA_MODE_IMMEDIATE && ( ( d -> d_operand & 0xff00 ) == 0x7F00 ) && d -> d_operand & 0x80		1256682	0		&&			
ANR	1258012	UnaryOperationExpression	! rel		1256682	0					
ANR	1258013	UnaryOperator	!		1256682	0					
ANR	1258014	Identifier	rel		1256682	1					
ANR	1258015	AndExpression	in -> in_mode == DATA_MODE_IMMEDIATE && ( ( d -> d_operand & 0xff00 ) == 0x7F00 ) && d -> d_operand & 0x80		1256682	1		&&			
ANR	1258016	EqualityExpression	in -> in_mode == DATA_MODE_IMMEDIATE		1256682	0		==			
ANR	1258017	PtrMemberAccess	in -> in_mode		1256682	0					
ANR	1258018	Identifier	in		1256682	0					
ANR	1258019	Identifier	in_mode		1256682	1					
ANR	1258020	Identifier	DATA_MODE_IMMEDIATE		1256682	1					
ANR	1258021	AndExpression	( ( d -> d_operand & 0xff00 ) == 0x7F00 ) && d -> d_operand & 0x80		1256682	1		&&			
ANR	1258022	EqualityExpression	( d -> d_operand & 0xff00 ) == 0x7F00		1256682	0		==			
ANR	1258023	BitAndExpression	d -> d_operand & 0xff00		1256682	0		&			
ANR	1258024	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1258025	Identifier	d		1256682	0					
ANR	1258026	Identifier	d_operand		1256682	1					
ANR	1258027	PrimaryExpression	0xff00		1256682	1					
ANR	1258028	PrimaryExpression	0x7F00		1256682	1					
ANR	1258029	BitAndExpression	d -> d_operand & 0x80		1256682	1		&			
ANR	1258030	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1258031	Identifier	d		1256682	0					
ANR	1258032	Identifier	d_operand		1256682	1					
ANR	1258033	PrimaryExpression	0x80		1256682	1					
ANR	1258034	ExpressionStatement	s -> s_ff_quirk = 1	434:2:7362:7379	1256682	1	True				
ANR	1258035	AssignmentExpression	s -> s_ff_quirk = 1		1256682	0		=			
ANR	1258036	PtrMemberAccess	s -> s_ff_quirk		1256682	0					
ANR	1258037	Identifier	s		1256682	0					
ANR	1258038	Identifier	s_ff_quirk		1256682	1					
ANR	1258039	PrimaryExpression	1		1256682	1					
ANR	1258040	IfStatement	if ( rel && ! s -> s_prefix && d -> d_operand == 0x7F )		1256682	35					
ANR	1258041	Condition	rel && ! s -> s_prefix && d -> d_operand == 0x7F	436:5:7387:7429	1256682	0	True				
ANR	1258042	AndExpression	rel && ! s -> s_prefix && d -> d_operand == 0x7F		1256682	0		&&			
ANR	1258043	Identifier	rel		1256682	0					
ANR	1258044	AndExpression	! s -> s_prefix && d -> d_operand == 0x7F		1256682	1		&&			
ANR	1258045	UnaryOperationExpression	! s -> s_prefix		1256682	0					
ANR	1258046	UnaryOperator	!		1256682	0					
ANR	1258047	PtrMemberAccess	s -> s_prefix		1256682	1					
ANR	1258048	Identifier	s		1256682	0					
ANR	1258049	Identifier	s_prefix		1256682	1					
ANR	1258050	EqualityExpression	d -> d_operand == 0x7F		1256682	1		==			
ANR	1258051	PtrMemberAccess	d -> d_operand		1256682	0					
ANR	1258052	Identifier	d		1256682	0					
ANR	1258053	Identifier	d_operand		1256682	1					
ANR	1258054	PrimaryExpression	0x7F		1256682	1					
ANR	1258055	CompoundStatement		347:50:5359:5359	1256682	1					
ANR	1258056	IfStatement	if ( s -> s_nopd )		1256682	0					
ANR	1258057	Condition	s -> s_nopd	437:6:7440:7448	1256682	0	True				
ANR	1258058	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1258059	Identifier	s		1256682	0					
ANR	1258060	Identifier	s_nopd		1256682	1					
ANR	1258061	CompoundStatement		348:17:5378:5378	1256682	1					
ANR	1258062	ExpressionStatement	"printf ( ""w00t\\n"" )"	438:3:7456:7472	1256682	0	True				
ANR	1258063	CallExpression	"printf ( ""w00t\\n"" )"		1256682	0					
ANR	1258064	Callee	printf		1256682	0					
ANR	1258065	Identifier	printf		1256682	0					
ANR	1258066	ArgumentList	"""w00t\\n"""		1256682	1					
ANR	1258067	Argument	"""w00t\\n"""		1256682	0					
ANR	1258068	PrimaryExpression	"""w00t\\n"""		1256682	0					
ANR	1258069	ExpressionStatement	"strcpy ( s -> s_nopd -> d_asm , ""nop"" )"	439:3:7477:7508	1256682	1	True				
ANR	1258070	CallExpression	"strcpy ( s -> s_nopd -> d_asm , ""nop"" )"		1256682	0					
ANR	1258071	Callee	strcpy		1256682	0					
ANR	1258072	Identifier	strcpy		1256682	0					
ANR	1258073	ArgumentList	s -> s_nopd -> d_asm		1256682	1					
ANR	1258074	Argument	s -> s_nopd -> d_asm		1256682	0					
ANR	1258075	PtrMemberAccess	s -> s_nopd -> d_asm		1256682	0					
ANR	1258076	PtrMemberAccess	s -> s_nopd		1256682	0					
ANR	1258077	Identifier	s		1256682	0					
ANR	1258078	Identifier	s_nopd		1256682	1					
ANR	1258079	Identifier	d_asm		1256682	1					
ANR	1258080	Argument	"""nop"""		1256682	1					
ANR	1258081	PrimaryExpression	"""nop"""		1256682	0					
ANR	1258082	ExpressionStatement	"printf ( ""Warning: fucking up a branch %x\\n"" , d -> d_off )"	441:2:7516:7569	1256682	1	True				
ANR	1258083	CallExpression	"printf ( ""Warning: fucking up a branch %x\\n"" , d -> d_off )"		1256682	0					
ANR	1258084	Callee	printf		1256682	0					
ANR	1258085	Identifier	printf		1256682	0					
ANR	1258086	ArgumentList	"""Warning: fucking up a branch %x\\n"""		1256682	1					
ANR	1258087	Argument	"""Warning: fucking up a branch %x\\n"""		1256682	0					
ANR	1258088	PrimaryExpression	"""Warning: fucking up a branch %x\\n"""		1256682	0					
ANR	1258089	Argument	d -> d_off		1256682	1					
ANR	1258090	PtrMemberAccess	d -> d_off		1256682	0					
ANR	1258091	Identifier	d		1256682	0					
ANR	1258092	Identifier	d_off		1256682	1					
ANR	1258093	ExpressionStatement	"decode_unknown ( s , d )"	442:2:7573:7593	1256682	2	True				
ANR	1258094	CallExpression	"decode_unknown ( s , d )"		1256682	0					
ANR	1258095	Callee	decode_unknown		1256682	0					
ANR	1258096	Identifier	decode_unknown		1256682	0					
ANR	1258097	ArgumentList	s		1256682	1					
ANR	1258098	Argument	s		1256682	0					
ANR	1258099	Identifier	s		1256682	0					
ANR	1258100	Argument	d		1256682	1					
ANR	1258101	Identifier	d		1256682	0					
ANR	1258102	ReturnStatement	return 1 ;	445:1:7606:7614	1256682	36	True				
ANR	1258103	PrimaryExpression	1		1256682	0					
ANR	1258104	ReturnType	static int		1256682	1					
ANR	1258105	Identifier	decode_known		1256682	2					
ANR	1258106	ParameterList	"struct state * s , struct directive * d"		1256682	3					
ANR	1258107	Parameter	struct state * s	90:24:2034:2048	1256682	0	True				
ANR	1258108	ParameterType	struct state *		1256682	0					
ANR	1258109	Identifier	s		1256682	1					
ANR	1258110	Parameter	struct directive * d	90:41:2051:2069	1256682	1	True				
ANR	1258111	ParameterType	struct directive *		1256682	0					
ANR	1258112	Identifier	d		1256682	1					
ANR	1258113	CFGEntryNode	ENTRY		1256682		True				
ANR	1258114	CFGExitNode	EXIT		1256682		True				
ANR	1258115	Symbol	in -> in_reg		1256682						
ANR	1258116	Symbol	in -> in_operand		1256682						
ANR	1258117	Symbol	s -> s_prefix		1256682						
ANR	1258118	Symbol	imm		1256682						
ANR	1258119	Symbol	sign		1256682						
ANR	1258120	Symbol	* in		1256682						
ANR	1258121	Symbol	d -> d_prefix		1256682						
ANR	1258122	Symbol	fmt		1256682						
ANR	1258123	Symbol	* s -> s_nopd		1256682						
ANR	1258124	Symbol	branch		1256682						
ANR	1258125	Symbol	& d -> d_inst		1256682						
ANR	1258126	Symbol	s -> s_nopd		1256682						
ANR	1258127	Symbol	strlen		1256682						
ANR	1258128	Symbol	reg		1256682						
ANR	1258129	Symbol	tmp		1256682						
ANR	1258130	Symbol	rel		1256682						
ANR	1258131	Symbol	* * s		1256682						
ANR	1258132	Symbol	ADDR_MODE_RELATIVE		1256682						
ANR	1258133	Symbol	op		1256682						
ANR	1258134	Symbol	regname		1256682						
ANR	1258135	Symbol	NULL		1256682						
ANR	1258136	Symbol	s -> s_prefix_val		1256682						
ANR	1258137	Symbol	d		1256682						
ANR	1258138	Symbol	fmtsz		1256682						
ANR	1258139	Symbol	in		1256682						
ANR	1258140	Symbol	rti		1256682						
ANR	1258141	Symbol	get_operand		1256682						
ANR	1258142	Symbol	in -> in_opcode		1256682						
ANR	1258143	Symbol	d -> d_operand		1256682						
ANR	1258144	Symbol	s -> s_nopd -> d_asm		1256682						
ANR	1258145	Symbol	* d		1256682						
ANR	1258146	Symbol	regn		1256682						
ANR	1258147	Symbol	ptr		1256682						
ANR	1258148	Symbol	i2u16		1256682						
ANR	1258149	Symbol	in -> in_mode		1256682						
ANR	1258150	Symbol	r		1256682						
ANR	1258151	Symbol	s		1256682						
ANR	1258152	Symbol	d -> d_asm		1256682						
ANR	1258153	Symbol	s -> s_u		1256682						
ANR	1258154	Symbol	DATA_MODE_INDEXED_X		1256682						
ANR	1258155	Symbol	idx		1256682						
ANR	1258156	Symbol	* s		1256682						
ANR	1258157	Symbol	s -> s_ff_quirk		1256682						
ANR	1258158	Symbol	ADDR_MODE_X_RELATIVE		1256682						
ANR	1258159	Symbol	operand		1256682						
ANR	1258160	Symbol	DATA_MODE_IMMEDIATE		1256682						
ANR	1258161	Symbol	d -> d_off		1256682						
ANR	1258162	Function	xap_decode	448:0:7619:7855							
ANR	1258163	FunctionDef	"xap_decode (struct state * s , struct directive * d)"		1258162	0					
ANR	1258164	CompoundStatement		448:61:7680:7855	1258162	0					
ANR	1258165	IdentifierDeclStatement	int prefix = s -> s_prefix ;	449:1:7683:7707	1258162	0	True				
ANR	1258166	IdentifierDecl	prefix = s -> s_prefix		1258162	0					
ANR	1258167	IdentifierDeclType	int		1258162	0					
ANR	1258168	Identifier	prefix		1258162	1					
ANR	1258169	AssignmentExpression	prefix = s -> s_prefix		1258162	2		=			
ANR	1258170	Identifier	prefix		1258162	0					
ANR	1258171	PtrMemberAccess	s -> s_prefix		1258162	1					
ANR	1258172	Identifier	s		1258162	0					
ANR	1258173	Identifier	s_prefix		1258162	1					
ANR	1258174	IfStatement	"if ( ! decode_fixed ( s , d ) )"		1258162	1					
ANR	1258175	Condition	"! decode_fixed ( s , d )"	450:5:7714:7733	1258162	0	True				
ANR	1258176	UnaryOperationExpression	"! decode_fixed ( s , d )"		1258162	0					
ANR	1258177	UnaryOperator	!		1258162	0					
ANR	1258178	CallExpression	"decode_fixed ( s , d )"		1258162	1					
ANR	1258179	Callee	decode_fixed		1258162	0					
ANR	1258180	Identifier	decode_fixed		1258162	0					
ANR	1258181	ArgumentList	s		1258162	1					
ANR	1258182	Argument	s		1258162	0					
ANR	1258183	Identifier	s		1258162	0					
ANR	1258184	Argument	d		1258162	1					
ANR	1258185	Identifier	d		1258162	0					
ANR	1258186	IfStatement	"if ( ! decode_known ( s , d ) )"		1258162	1					
ANR	1258187	Condition	"! decode_known ( s , d )"	451:6:7742:7761	1258162	0	True				
ANR	1258188	UnaryOperationExpression	"! decode_known ( s , d )"		1258162	0					
ANR	1258189	UnaryOperator	!		1258162	0					
ANR	1258190	CallExpression	"decode_known ( s , d )"		1258162	1					
ANR	1258191	Callee	decode_known		1258162	0					
ANR	1258192	Identifier	decode_known		1258162	0					
ANR	1258193	ArgumentList	s		1258162	1					
ANR	1258194	Argument	s		1258162	0					
ANR	1258195	Identifier	s		1258162	0					
ANR	1258196	Argument	d		1258162	1					
ANR	1258197	Identifier	d		1258162	0					
ANR	1258198	ExpressionStatement	"decode_unknown ( s , d )"	452:3:7767:7788	1258162	1	True				
ANR	1258199	CallExpression	"decode_unknown ( s , d )"		1258162	0					
ANR	1258200	Callee	decode_unknown		1258162	0					
ANR	1258201	Identifier	decode_unknown		1258162	0					
ANR	1258202	ArgumentList	s		1258162	1					
ANR	1258203	Argument	s		1258162	0					
ANR	1258204	Identifier	s		1258162	0					
ANR	1258205	Argument	d		1258162	1					
ANR	1258206	Identifier	d		1258162	0					
ANR	1258207	IfStatement	if ( s -> s_prefix == prefix )		1258162	2					
ANR	1258208	Condition	s -> s_prefix == prefix	453:5:7795:7815	1258162	0	True				
ANR	1258209	EqualityExpression	s -> s_prefix == prefix		1258162	0		==			
ANR	1258210	PtrMemberAccess	s -> s_prefix		1258162	0					
ANR	1258211	Identifier	s		1258162	0					
ANR	1258212	Identifier	s_prefix		1258162	1					
ANR	1258213	Identifier	prefix		1258162	1					
ANR	1258214	ExpressionStatement	s -> s_prefix_val = s -> s_prefix = 0	454:2:7820:7853	1258162	1	True				
ANR	1258215	AssignmentExpression	s -> s_prefix_val = s -> s_prefix = 0		1258162	0		=			
ANR	1258216	PtrMemberAccess	s -> s_prefix_val		1258162	0					
ANR	1258217	Identifier	s		1258162	0					
ANR	1258218	Identifier	s_prefix_val		1258162	1					
ANR	1258219	AssignmentExpression	s -> s_prefix = 0		1258162	1		=			
ANR	1258220	PtrMemberAccess	s -> s_prefix		1258162	0					
ANR	1258221	Identifier	s		1258162	0					
ANR	1258222	Identifier	s_prefix		1258162	1					
ANR	1258223	PrimaryExpression	0		1258162	1					
ANR	1258224	ReturnType	static void		1258162	1					
ANR	1258225	Identifier	xap_decode		1258162	2					
ANR	1258226	ParameterList	"struct state * s , struct directive * d"		1258162	3					
ANR	1258227	Parameter	struct state * s	448:23:7642:7656	1258162	0	True				
ANR	1258228	ParameterType	struct state *		1258162	0					
ANR	1258229	Identifier	s		1258162	1					
ANR	1258230	Parameter	struct directive * d	448:40:7659:7677	1258162	1	True				
ANR	1258231	ParameterType	struct directive *		1258162	0					
ANR	1258232	Identifier	d		1258162	1					
ANR	1258233	CFGEntryNode	ENTRY		1258162		True				
ANR	1258234	CFGExitNode	EXIT		1258162		True				
ANR	1258235	Symbol	decode_known		1258162						
ANR	1258236	Symbol	s		1258162						
ANR	1258237	Symbol	s -> s_prefix_val		1258162						
ANR	1258238	Symbol	d		1258162						
ANR	1258239	Symbol	prefix		1258162						
ANR	1258240	Symbol	s -> s_prefix		1258162						
ANR	1258241	Symbol	decode_fixed		1258162						
ANR	1258242	Symbol	* s		1258162						
ANR	1258243	Function	read_bin	457:0:7858:8003							
ANR	1258244	FunctionDef	"read_bin (struct state * s , struct directive * d)"		1258243	0					
ANR	1258245	CompoundStatement		457:58:7916:8003	1258243	0					
ANR	1258246	ExpressionStatement	"memcpy ( & d -> d_inst , s -> s_buf , sizeof ( d -> d_inst ) )"	458:1:7919:7966	1258243	0	True				
ANR	1258247	CallExpression	"memcpy ( & d -> d_inst , s -> s_buf , sizeof ( d -> d_inst ) )"		1258243	0					
ANR	1258248	Callee	memcpy		1258243	0					
ANR	1258249	Identifier	memcpy		1258243	0					
ANR	1258250	ArgumentList	& d -> d_inst		1258243	1					
ANR	1258251	Argument	& d -> d_inst		1258243	0					
ANR	1258252	UnaryOperationExpression	& d -> d_inst		1258243	0					
ANR	1258253	UnaryOperator	&		1258243	0					
ANR	1258254	PtrMemberAccess	d -> d_inst		1258243	1					
ANR	1258255	Identifier	d		1258243	0					
ANR	1258256	Identifier	d_inst		1258243	1					
ANR	1258257	Argument	s -> s_buf		1258243	1					
ANR	1258258	PtrMemberAccess	s -> s_buf		1258243	0					
ANR	1258259	Identifier	s		1258243	0					
ANR	1258260	Identifier	s_buf		1258243	1					
ANR	1258261	Argument	sizeof ( d -> d_inst )		1258243	2					
ANR	1258262	SizeofExpression	sizeof ( d -> d_inst )		1258243	0					
ANR	1258263	Sizeof	sizeof		1258243	0					
ANR	1258264	PtrMemberAccess	d -> d_inst		1258243	1					
ANR	1258265	Identifier	d		1258243	0					
ANR	1258266	Identifier	d_inst		1258243	1					
ANR	1258267	ExpressionStatement	d -> d_off = s -> s_off ++	459:1:7969:7990	1258243	1	True				
ANR	1258268	AssignmentExpression	d -> d_off = s -> s_off ++		1258243	0		=			
ANR	1258269	PtrMemberAccess	d -> d_off		1258243	0					
ANR	1258270	Identifier	d		1258243	0					
ANR	1258271	Identifier	d_off		1258243	1					
ANR	1258272	PostIncDecOperationExpression	s -> s_off ++		1258243	1					
ANR	1258273	PtrMemberAccess	s -> s_off		1258243	0					
ANR	1258274	Identifier	s		1258243	0					
ANR	1258275	Identifier	s_off		1258243	1					
ANR	1258276	IncDec	++		1258243	1					
ANR	1258277	ReturnStatement	return 1 ;	460:1:7993:8001	1258243	2	True				
ANR	1258278	PrimaryExpression	1		1258243	0					
ANR	1258279	ReturnType	static int		1258243	1					
ANR	1258280	Identifier	read_bin		1258243	2					
ANR	1258281	ParameterList	"struct state * s , struct directive * d"		1258243	3					
ANR	1258282	Parameter	struct state * s	457:20:7878:7892	1258243	0	True				
ANR	1258283	ParameterType	struct state *		1258243	0					
ANR	1258284	Identifier	s		1258243	1					
ANR	1258285	Parameter	struct directive * d	457:37:7895:7913	1258243	1	True				
ANR	1258286	ParameterType	struct directive *		1258243	0					
ANR	1258287	Identifier	d		1258243	1					
ANR	1258288	CFGEntryNode	ENTRY		1258243		True				
ANR	1258289	CFGExitNode	EXIT		1258243		True				
ANR	1258290	Symbol	s		1258243						
ANR	1258291	Symbol	d		1258243						
ANR	1258292	Symbol	d -> d_inst		1258243						
ANR	1258293	Symbol	s -> s_buf		1258243						
ANR	1258294	Symbol	* s		1258243						
ANR	1258295	Symbol	& d -> d_inst		1258243						
ANR	1258296	Symbol	* d		1258243						
ANR	1258297	Symbol	s -> s_off		1258243						
ANR	1258298	Symbol	d -> d_off		1258243						
ANR	1258299	Function	next_inst	463:0:8006:8340							
ANR	1258300	FunctionDef	next_inst (struct state * s)		1258299	0					
ANR	1258301	CompoundStatement		463:59:8065:8340	1258299	0					
ANR	1258302	IdentifierDeclStatement	int rd ;	464:1:8068:8074	1258299	0	True				
ANR	1258303	IdentifierDecl	rd		1258299	0					
ANR	1258304	IdentifierDeclType	int		1258299	0					
ANR	1258305	Identifier	rd		1258299	1					
ANR	1258306	IdentifierDeclStatement	struct directive * d = malloc ( sizeof ( * d ) ) ;	465:1:8077:8119	1258299	1	True				
ANR	1258307	IdentifierDecl	* d = malloc ( sizeof ( * d ) )		1258299	0					
ANR	1258308	IdentifierDeclType	struct directive *		1258299	0					
ANR	1258309	Identifier	d		1258299	1					
ANR	1258310	AssignmentExpression	* d = malloc ( sizeof ( * d ) )		1258299	2		=			
ANR	1258311	Identifier	d		1258299	0					
ANR	1258312	CallExpression	malloc ( sizeof ( * d ) )		1258299	1					
ANR	1258313	Callee	malloc		1258299	0					
ANR	1258314	Identifier	malloc		1258299	0					
ANR	1258315	ArgumentList	sizeof ( * d )		1258299	1					
ANR	1258316	Argument	sizeof ( * d )		1258299	0					
ANR	1258317	SizeofExpression	sizeof ( * d )		1258299	0					
ANR	1258318	Sizeof	sizeof		1258299	0					
ANR	1258319	UnaryOperationExpression	* d		1258299	1					
ANR	1258320	UnaryOperator	*		1258299	0					
ANR	1258321	Identifier	d		1258299	1					
ANR	1258322	IfStatement	if ( ! d )		1258299	2					
ANR	1258323	Condition	! d	466:5:8126:8127	1258299	0	True				
ANR	1258324	UnaryOperationExpression	! d		1258299	0					
ANR	1258325	UnaryOperator	!		1258299	0					
ANR	1258326	Identifier	d		1258299	1					
ANR	1258327	CompoundStatement		4:9:64:64	1258299	1					
ANR	1258328	ExpressionStatement	"perror ( ""malloc()"" )"	467:2:8134:8153	1258299	0	True				
ANR	1258329	CallExpression	"perror ( ""malloc()"" )"		1258299	0					
ANR	1258330	Callee	perror		1258299	0					
ANR	1258331	Identifier	perror		1258299	0					
ANR	1258332	ArgumentList	"""malloc()"""		1258299	1					
ANR	1258333	Argument	"""malloc()"""		1258299	0					
ANR	1258334	PrimaryExpression	"""malloc()"""		1258299	0					
ANR	1258335	ReturnStatement	return NULL ;	468:2:8157:8168	1258299	1	True				
ANR	1258336	Identifier	NULL		1258299	0					
ANR	1258337	ExpressionStatement	"memset ( d , 0 , sizeof ( * d ) )"	470:1:8174:8200	1258299	3	True				
ANR	1258338	CallExpression	"memset ( d , 0 , sizeof ( * d ) )"		1258299	0					
ANR	1258339	Callee	memset		1258299	0					
ANR	1258340	Identifier	memset		1258299	0					
ANR	1258341	ArgumentList	d		1258299	1					
ANR	1258342	Argument	d		1258299	0					
ANR	1258343	Identifier	d		1258299	0					
ANR	1258344	Argument	0		1258299	1					
ANR	1258345	PrimaryExpression	0		1258299	0					
ANR	1258346	Argument	sizeof ( * d )		1258299	2					
ANR	1258347	SizeofExpression	sizeof ( * d )		1258299	0					
ANR	1258348	Sizeof	sizeof		1258299	0					
ANR	1258349	UnaryOperationExpression	* d		1258299	1					
ANR	1258350	UnaryOperator	*		1258299	0					
ANR	1258351	Identifier	d		1258299	1					
ANR	1258352	IfStatement	if ( s -> s_format )		1258299	4					
ANR	1258353	Condition	s -> s_format	472:5:8213:8223	1258299	0	True				
ANR	1258354	PtrMemberAccess	s -> s_format		1258299	0					
ANR	1258355	Identifier	s		1258299	0					
ANR	1258356	Identifier	s_format		1258299	1					
ANR	1258357	ExpressionStatement	"rd = read_text ( s , d )"	473:2:8228:8248	1258299	1	True				
ANR	1258358	AssignmentExpression	"rd = read_text ( s , d )"		1258299	0		=			
ANR	1258359	Identifier	rd		1258299	0					
ANR	1258360	CallExpression	"read_text ( s , d )"		1258299	1					
ANR	1258361	Callee	read_text		1258299	0					
ANR	1258362	Identifier	read_text		1258299	0					
ANR	1258363	ArgumentList	s		1258299	1					
ANR	1258364	Argument	s		1258299	0					
ANR	1258365	Identifier	s		1258299	0					
ANR	1258366	Argument	d		1258299	1					
ANR	1258367	Identifier	d		1258299	0					
ANR	1258368	ElseStatement	else		1258299	0					
ANR	1258369	ExpressionStatement	"rd = read_bin ( s , d )"	476:1:8264:8284	1258299	0	True				
ANR	1258370	AssignmentExpression	"rd = read_bin ( s , d )"		1258299	0		=			
ANR	1258371	Identifier	rd		1258299	0					
ANR	1258372	CallExpression	"read_bin ( s , d )"		1258299	1					
ANR	1258373	Callee	read_bin		1258299	0					
ANR	1258374	Identifier	read_bin		1258299	0					
ANR	1258375	ArgumentList	s		1258299	1					
ANR	1258376	Argument	s		1258299	0					
ANR	1258377	Identifier	s		1258299	0					
ANR	1258378	Argument	d		1258299	1					
ANR	1258379	Identifier	d		1258299	0					
ANR	1258380	IfStatement	if ( ! rd )		1258299	5					
ANR	1258381	Condition	! rd	477:5:8291:8293	1258299	0	True				
ANR	1258382	UnaryOperationExpression	! rd		1258299	0					
ANR	1258383	UnaryOperator	!		1258299	0					
ANR	1258384	Identifier	rd		1258299	1					
ANR	1258385	CompoundStatement		15:10:230:230	1258299	1					
ANR	1258386	ExpressionStatement	free ( d )	478:2:8300:8308	1258299	0	True				
ANR	1258387	CallExpression	free ( d )		1258299	0					
ANR	1258388	Callee	free		1258299	0					
ANR	1258389	Identifier	free		1258299	0					
ANR	1258390	ArgumentList	d		1258299	1					
ANR	1258391	Argument	d		1258299	0					
ANR	1258392	Identifier	d		1258299	0					
ANR	1258393	ReturnStatement	return NULL ;	479:2:8312:8323	1258299	1	True				
ANR	1258394	Identifier	NULL		1258299	0					
ANR	1258395	ReturnStatement	return d ;	482:1:8330:8338	1258299	6	True				
ANR	1258396	Identifier	d		1258299	0					
ANR	1258397	ReturnType	static inline struct directive *		1258299	1					
ANR	1258398	Identifier	next_inst		1258299	2					
ANR	1258399	ParameterList	struct state * s		1258299	3					
ANR	1258400	Parameter	struct state * s	463:42:8048:8062	1258299	0	True				
ANR	1258401	ParameterType	struct state *		1258299	0					
ANR	1258402	Identifier	s		1258299	1					
ANR	1258403	CFGEntryNode	ENTRY		1258299		True				
ANR	1258404	CFGExitNode	EXIT		1258299		True				
ANR	1258405	Symbol	malloc		1258299						
ANR	1258406	Symbol	read_bin		1258299						
ANR	1258407	Symbol	rd		1258299						
ANR	1258408	Symbol	s		1258299						
ANR	1258409	Symbol	NULL		1258299						
ANR	1258410	Symbol	d		1258299						
ANR	1258411	Symbol	read_text		1258299						
ANR	1258412	Symbol	s -> s_format		1258299						
ANR	1258413	Symbol	* s		1258299						
ANR	1258414	Symbol	* d		1258299						
ANR	1258415	Function	own	486:0:8349:9714							
ANR	1258416	FunctionDef	own (struct state * s)		1258415	0					
ANR	1258417	CompoundStatement		487:0:8382:9714	1258415	0					
ANR	1258418	IdentifierDeclStatement	struct directive * d ;	488:1:8385:8404	1258415	0	True				
ANR	1258419	IdentifierDecl	* d		1258415	0					
ANR	1258420	IdentifierDeclType	struct directive *		1258415	0					
ANR	1258421	Identifier	d		1258415	1					
ANR	1258422	IdentifierDeclStatement	struct directive * last = & s -> s_dirs ;	489:1:8407:8442	1258415	1	True				
ANR	1258423	IdentifierDecl	* last = & s -> s_dirs		1258415	0					
ANR	1258424	IdentifierDeclType	struct directive *		1258415	0					
ANR	1258425	Identifier	last		1258415	1					
ANR	1258426	AssignmentExpression	* last = & s -> s_dirs		1258415	2		=			
ANR	1258427	Identifier	last		1258415	0					
ANR	1258428	UnaryOperationExpression	& s -> s_dirs		1258415	1					
ANR	1258429	UnaryOperator	&		1258415	0					
ANR	1258430	PtrMemberAccess	s -> s_dirs		1258415	1					
ANR	1258431	Identifier	s		1258415	0					
ANR	1258432	Identifier	s_dirs		1258415	1					
ANR	1258433	IdentifierDeclStatement	struct label * l ;	490:1:8445:8460	1258415	2	True				
ANR	1258434	IdentifierDecl	* l		1258415	0					
ANR	1258435	IdentifierDeclType	struct label *		1258415	0					
ANR	1258436	Identifier	l		1258415	1					
ANR	1258437	IdentifierDeclStatement	int flush = 0 ;	491:1:8463:8476	1258415	3	True				
ANR	1258438	IdentifierDecl	flush = 0		1258415	0					
ANR	1258439	IdentifierDeclType	int		1258415	0					
ANR	1258440	Identifier	flush		1258415	1					
ANR	1258441	AssignmentExpression	flush = 0		1258415	2		=			
ANR	1258442	Identifier	flush		1258415	0					
ANR	1258443	PrimaryExpression	0		1258415	1					
ANR	1258444	IdentifierDeclStatement	char fname [ 128 ] ;	492:1:8479:8494	1258415	4	True				
ANR	1258445	IdentifierDecl	fname [ 128 ]		1258415	0					
ANR	1258446	IdentifierDeclType	char [ 128 ]		1258415	0					
ANR	1258447	Identifier	fname		1258415	1					
ANR	1258448	PrimaryExpression	128		1258415	2					
ANR	1258449	IdentifierDeclStatement	char * fnamep ;	493:1:8497:8509	1258415	5	True				
ANR	1258450	IdentifierDecl	* fnamep		1258415	0					
ANR	1258451	IdentifierDeclType	char *		1258415	0					
ANR	1258452	Identifier	fnamep		1258415	1					
ANR	1258453	ExpressionStatement	"snprintf ( fname , sizeof ( fname ) , ""%s"" , s -> s_fname )"	495:1:8513:8561	1258415	6	True				
ANR	1258454	CallExpression	"snprintf ( fname , sizeof ( fname ) , ""%s"" , s -> s_fname )"		1258415	0					
ANR	1258455	Callee	snprintf		1258415	0					
ANR	1258456	Identifier	snprintf		1258415	0					
ANR	1258457	ArgumentList	fname		1258415	1					
ANR	1258458	Argument	fname		1258415	0					
ANR	1258459	Identifier	fname		1258415	0					
ANR	1258460	Argument	sizeof ( fname )		1258415	1					
ANR	1258461	SizeofExpression	sizeof ( fname )		1258415	0					
ANR	1258462	Sizeof	sizeof		1258415	0					
ANR	1258463	SizeofOperand	fname		1258415	1					
ANR	1258464	Argument	"""%s"""		1258415	2					
ANR	1258465	PrimaryExpression	"""%s"""		1258415	0					
ANR	1258466	Argument	s -> s_fname		1258415	3					
ANR	1258467	PtrMemberAccess	s -> s_fname		1258415	0					
ANR	1258468	Identifier	s		1258415	0					
ANR	1258469	Identifier	s_fname		1258415	1					
ANR	1258470	ExpressionStatement	"fnamep = strchr ( fname , '.' )"	496:1:8564:8591	1258415	7	True				
ANR	1258471	AssignmentExpression	"fnamep = strchr ( fname , '.' )"		1258415	0		=			
ANR	1258472	Identifier	fnamep		1258415	0					
ANR	1258473	CallExpression	"strchr ( fname , '.' )"		1258415	1					
ANR	1258474	Callee	strchr		1258415	0					
ANR	1258475	Identifier	strchr		1258415	0					
ANR	1258476	ArgumentList	fname		1258415	1					
ANR	1258477	Argument	fname		1258415	0					
ANR	1258478	Identifier	fname		1258415	0					
ANR	1258479	Argument	'.'		1258415	1					
ANR	1258480	PrimaryExpression	'.'		1258415	0					
ANR	1258481	IfStatement	if ( fnamep )		1258415	8					
ANR	1258482	Condition	fnamep	497:5:8598:8603	1258415	0	True				
ANR	1258483	Identifier	fnamep		1258415	0					
ANR	1258484	ExpressionStatement	* fnamep = 0	498:2:8608:8619	1258415	1	True				
ANR	1258485	AssignmentExpression	* fnamep = 0		1258415	0		=			
ANR	1258486	UnaryOperationExpression	* fnamep		1258415	0					
ANR	1258487	UnaryOperator	*		1258415	0					
ANR	1258488	Identifier	fnamep		1258415	1					
ANR	1258489	PrimaryExpression	0		1258415	1					
ANR	1258490	Statement	output	499:1:8622:8627	1258415	9	True				
ANR	1258491	Statement	(	499:7:8628:8628	1258415	10	True				
ANR	1258492	Statement	s	499:8:8629:8629	1258415	11	True				
ANR	1258493	Statement	","	499:9:8630:8630	1258415	12	True				
ANR	1258494	Statement	"""\\tMODULE %s\\n"""	499:11:8632:8646	1258415	13	True				
ANR	1258495	Statement	"""\\t.CODE\\n"""	500:11:8659:8669	1258415	14	True				
ANR	1258496	Statement	"""\\t.LARGE\\n"""	501:4:8675:8686	1258415	15	True				
ANR	1258497	Statement	"""\\n"""	502:11:8699:8702	1258415	16	True				
ANR	1258498	Statement	","	502:15:8703:8703	1258415	17	True				
ANR	1258499	Statement	fname	502:17:8705:8709	1258415	18	True				
ANR	1258500	Statement	)	502:22:8710:8710	1258415	19	True				
ANR	1258501	ExpressionStatement		502:23:8711:8711	1258415	20	True				
ANR	1258502	ExpressionStatement	s -> s_off = 0	505:1:8742:8754	1258415	21	True				
ANR	1258503	AssignmentExpression	s -> s_off = 0		1258415	0		=			
ANR	1258504	PtrMemberAccess	s -> s_off		1258415	0					
ANR	1258505	Identifier	s		1258415	0					
ANR	1258506	Identifier	s_off		1258415	1					
ANR	1258507	PrimaryExpression	0		1258415	1					
ANR	1258508	WhileStatement	while ( ( d = next_inst ( s ) ) )		1258415	22					
ANR	1258509	Condition	d = next_inst ( s )	506:8:8764:8781	1258415	0	True				
ANR	1258510	AssignmentExpression	d = next_inst ( s )		1258415	0		=			
ANR	1258511	Identifier	d		1258415	0					
ANR	1258512	CallExpression	next_inst ( s )		1258415	1					
ANR	1258513	Callee	next_inst		1258415	0					
ANR	1258514	Identifier	next_inst		1258415	0					
ANR	1258515	ArgumentList	s		1258415	1					
ANR	1258516	Argument	s		1258415	0					
ANR	1258517	Identifier	s		1258415	0					
ANR	1258518	CompoundStatement		20:28:401:401	1258415	1					
ANR	1258519	ExpressionStatement	"xap_decode ( s , d )"	507:2:8788:8804	1258415	0	True				
ANR	1258520	CallExpression	"xap_decode ( s , d )"		1258415	0					
ANR	1258521	Callee	xap_decode		1258415	0					
ANR	1258522	Identifier	xap_decode		1258415	0					
ANR	1258523	ArgumentList	s		1258415	1					
ANR	1258524	Argument	s		1258415	0					
ANR	1258525	Identifier	s		1258415	0					
ANR	1258526	Argument	d		1258415	1					
ANR	1258527	Identifier	d		1258415	0					
ANR	1258528	IfStatement	if ( s -> s_ff_quirk )		1258415	1					
ANR	1258529	Condition	s -> s_ff_quirk	509:6:8813:8825	1258415	0	True				
ANR	1258530	PtrMemberAccess	s -> s_ff_quirk		1258415	0					
ANR	1258531	Identifier	s		1258415	0					
ANR	1258532	Identifier	s_ff_quirk		1258415	1					
ANR	1258533	CompoundStatement		23:21:445:445	1258415	1					
ANR	1258534	ExpressionStatement	"strcpy ( last -> d_asm , ""DC\\t0x8000"" )"	510:3:8833:8866	1258415	0	True				
ANR	1258535	CallExpression	"strcpy ( last -> d_asm , ""DC\\t0x8000"" )"		1258415	0					
ANR	1258536	Callee	strcpy		1258415	0					
ANR	1258537	Identifier	strcpy		1258415	0					
ANR	1258538	ArgumentList	last -> d_asm		1258415	1					
ANR	1258539	Argument	last -> d_asm		1258415	0					
ANR	1258540	PtrMemberAccess	last -> d_asm		1258415	0					
ANR	1258541	Identifier	last		1258415	0					
ANR	1258542	Identifier	d_asm		1258415	1					
ANR	1258543	Argument	"""DC\\t0x8000"""		1258415	1					
ANR	1258544	PrimaryExpression	"""DC\\t0x8000"""		1258415	0					
ANR	1258545	ExpressionStatement	"sprintf ( d -> d_asm , ""DC\\t0x%.4x"" , i2u16 ( & d -> d_inst ) )"	512:3:8872:8922	1258415	1	True				
ANR	1258546	CallExpression	"sprintf ( d -> d_asm , ""DC\\t0x%.4x"" , i2u16 ( & d -> d_inst ) )"		1258415	0					
ANR	1258547	Callee	sprintf		1258415	0					
ANR	1258548	Identifier	sprintf		1258415	0					
ANR	1258549	ArgumentList	d -> d_asm		1258415	1					
ANR	1258550	Argument	d -> d_asm		1258415	0					
ANR	1258551	PtrMemberAccess	d -> d_asm		1258415	0					
ANR	1258552	Identifier	d		1258415	0					
ANR	1258553	Identifier	d_asm		1258415	1					
ANR	1258554	Argument	"""DC\\t0x%.4x"""		1258415	1					
ANR	1258555	PrimaryExpression	"""DC\\t0x%.4x"""		1258415	0					
ANR	1258556	Argument	i2u16 ( & d -> d_inst )		1258415	2					
ANR	1258557	CallExpression	i2u16 ( & d -> d_inst )		1258415	0					
ANR	1258558	Callee	i2u16		1258415	0					
ANR	1258559	Identifier	i2u16		1258415	0					
ANR	1258560	ArgumentList	& d -> d_inst		1258415	1					
ANR	1258561	Argument	& d -> d_inst		1258415	0					
ANR	1258562	UnaryOperationExpression	& d -> d_inst		1258415	0					
ANR	1258563	UnaryOperator	&		1258415	0					
ANR	1258564	PtrMemberAccess	d -> d_inst		1258415	1					
ANR	1258565	Identifier	d		1258415	0					
ANR	1258566	Identifier	d_inst		1258415	1					
ANR	1258567	ExpressionStatement	s -> s_ff_quirk = 0	513:3:8927:8944	1258415	2	True				
ANR	1258568	AssignmentExpression	s -> s_ff_quirk = 0		1258415	0		=			
ANR	1258569	PtrMemberAccess	s -> s_ff_quirk		1258415	0					
ANR	1258570	Identifier	s		1258415	0					
ANR	1258571	Identifier	s_ff_quirk		1258415	1					
ANR	1258572	PrimaryExpression	0		1258415	1					
ANR	1258573	IfStatement	if ( s -> s_nopd )		1258415	2					
ANR	1258574	Condition	s -> s_nopd	516:6:8957:8965	1258415	0	True				
ANR	1258575	PtrMemberAccess	s -> s_nopd		1258415	0					
ANR	1258576	Identifier	s		1258415	0					
ANR	1258577	Identifier	s_nopd		1258415	1					
ANR	1258578	CompoundStatement		30:17:585:585	1258415	1					
ANR	1258579	ExpressionStatement	last -> d_next = s -> s_nopd	517:3:8973:8997	1258415	0	True				
ANR	1258580	AssignmentExpression	last -> d_next = s -> s_nopd		1258415	0		=			
ANR	1258581	PtrMemberAccess	last -> d_next		1258415	0					
ANR	1258582	Identifier	last		1258415	0					
ANR	1258583	Identifier	d_next		1258415	1					
ANR	1258584	PtrMemberAccess	s -> s_nopd		1258415	1					
ANR	1258585	Identifier	s		1258415	0					
ANR	1258586	Identifier	s_nopd		1258415	1					
ANR	1258587	ExpressionStatement	last = s -> s_nopd	518:3:9002:9018	1258415	1	True				
ANR	1258588	AssignmentExpression	last = s -> s_nopd		1258415	0		=			
ANR	1258589	Identifier	last		1258415	0					
ANR	1258590	PtrMemberAccess	s -> s_nopd		1258415	1					
ANR	1258591	Identifier	s		1258415	0					
ANR	1258592	Identifier	s_nopd		1258415	1					
ANR	1258593	ExpressionStatement	s -> s_nopd = NULL	519:3:9023:9039	1258415	2	True				
ANR	1258594	AssignmentExpression	s -> s_nopd = NULL		1258415	0		=			
ANR	1258595	PtrMemberAccess	s -> s_nopd		1258415	0					
ANR	1258596	Identifier	s		1258415	0					
ANR	1258597	Identifier	s_nopd		1258415	1					
ANR	1258598	Identifier	NULL		1258415	1					
ANR	1258599	ExpressionStatement	s -> s_nop = 0	520:3:9044:9056	1258415	3	True				
ANR	1258600	AssignmentExpression	s -> s_nop = 0		1258415	0		=			
ANR	1258601	PtrMemberAccess	s -> s_nop		1258415	0					
ANR	1258602	Identifier	s		1258415	0					
ANR	1258603	Identifier	s_nop		1258415	1					
ANR	1258604	PrimaryExpression	0		1258415	1					
ANR	1258605	IfStatement	if ( s -> s_nop )		1258415	3					
ANR	1258606	Condition	s -> s_nop	523:6:9069:9076	1258415	0	True				
ANR	1258607	PtrMemberAccess	s -> s_nop		1258415	0					
ANR	1258608	Identifier	s		1258415	0					
ANR	1258609	Identifier	s_nop		1258415	1					
ANR	1258610	CompoundStatement		37:16:696:696	1258415	1					
ANR	1258611	ExpressionStatement	assert ( ! s -> s_nopd )	524:3:9084:9102	1258415	0	True				
ANR	1258612	CallExpression	assert ( ! s -> s_nopd )		1258415	0					
ANR	1258613	Callee	assert		1258415	0					
ANR	1258614	Identifier	assert		1258415	0					
ANR	1258615	ArgumentList	! s -> s_nopd		1258415	1					
ANR	1258616	Argument	! s -> s_nopd		1258415	0					
ANR	1258617	UnaryOperationExpression	! s -> s_nopd		1258415	0					
ANR	1258618	UnaryOperator	!		1258415	0					
ANR	1258619	PtrMemberAccess	s -> s_nopd		1258415	1					
ANR	1258620	Identifier	s		1258415	0					
ANR	1258621	Identifier	s_nopd		1258415	1					
ANR	1258622	ExpressionStatement	s -> s_nopd = d	525:3:9107:9120	1258415	1	True				
ANR	1258623	AssignmentExpression	s -> s_nopd = d		1258415	0		=			
ANR	1258624	PtrMemberAccess	s -> s_nopd		1258415	0					
ANR	1258625	Identifier	s		1258415	0					
ANR	1258626	Identifier	s_nopd		1258415	1					
ANR	1258627	Identifier	d		1258415	1					
ANR	1258628	ElseStatement	else		1258415	0					
ANR	1258629	CompoundStatement		40:9:748:748	1258415	0					
ANR	1258630	ExpressionStatement	last -> d_next = d	527:3:9136:9152	1258415	0	True				
ANR	1258631	AssignmentExpression	last -> d_next = d		1258415	0		=			
ANR	1258632	PtrMemberAccess	last -> d_next		1258415	0					
ANR	1258633	Identifier	last		1258415	0					
ANR	1258634	Identifier	d_next		1258415	1					
ANR	1258635	Identifier	d		1258415	1					
ANR	1258636	ExpressionStatement	last = d	528:3:9157:9165	1258415	1	True				
ANR	1258637	AssignmentExpression	last = d		1258415	0		=			
ANR	1258638	Identifier	last		1258415	0					
ANR	1258639	Identifier	d		1258415	1					
ANR	1258640	IfStatement	if ( flush ++ > 10000 )		1258415	4					
ANR	1258641	Condition	flush ++ > 10000	532:6:9184:9198	1258415	0	True				
ANR	1258642	RelationalExpression	flush ++ > 10000		1258415	0		>			
ANR	1258643	PostIncDecOperationExpression	flush ++		1258415	0					
ANR	1258644	Identifier	flush		1258415	0					
ANR	1258645	IncDec	++		1258415	1					
ANR	1258646	PrimaryExpression	10000		1258415	1					
ANR	1258647	CompoundStatement		46:23:818:818	1258415	1					
ANR	1258648	ExpressionStatement	"printf ( ""@0x%.6x\\r"" , d -> d_off )"	533:3:9206:9235	1258415	0	True				
ANR	1258649	CallExpression	"printf ( ""@0x%.6x\\r"" , d -> d_off )"		1258415	0					
ANR	1258650	Callee	printf		1258415	0					
ANR	1258651	Identifier	printf		1258415	0					
ANR	1258652	ArgumentList	"""@0x%.6x\\r"""		1258415	1					
ANR	1258653	Argument	"""@0x%.6x\\r"""		1258415	0					
ANR	1258654	PrimaryExpression	"""@0x%.6x\\r"""		1258415	0					
ANR	1258655	Argument	d -> d_off		1258415	1					
ANR	1258656	PtrMemberAccess	d -> d_off		1258415	0					
ANR	1258657	Identifier	d		1258415	0					
ANR	1258658	Identifier	d_off		1258415	1					
ANR	1258659	ExpressionStatement	fflush ( stdout )	534:3:9240:9254	1258415	1	True				
ANR	1258660	CallExpression	fflush ( stdout )		1258415	0					
ANR	1258661	Callee	fflush		1258415	0					
ANR	1258662	Identifier	fflush		1258415	0					
ANR	1258663	ArgumentList	stdout		1258415	1					
ANR	1258664	Argument	stdout		1258415	0					
ANR	1258665	Identifier	stdout		1258415	0					
ANR	1258666	ExpressionStatement	flush = 0	535:3:9259:9268	1258415	2	True				
ANR	1258667	AssignmentExpression	flush = 0		1258415	0		=			
ANR	1258668	Identifier	flush		1258415	0					
ANR	1258669	PrimaryExpression	0		1258415	1					
ANR	1258670	IfStatement	if ( s -> s_nopd )		1258415	23					
ANR	1258671	Condition	s -> s_nopd	539:5:9289:9297	1258415	0	True				
ANR	1258672	PtrMemberAccess	s -> s_nopd		1258415	0					
ANR	1258673	Identifier	s		1258415	0					
ANR	1258674	Identifier	s_nopd		1258415	1					
ANR	1258675	ExpressionStatement	last -> d_next = s -> s_nopd	540:2:9302:9326	1258415	1	True				
ANR	1258676	AssignmentExpression	last -> d_next = s -> s_nopd		1258415	0		=			
ANR	1258677	PtrMemberAccess	last -> d_next		1258415	0					
ANR	1258678	Identifier	last		1258415	0					
ANR	1258679	Identifier	d_next		1258415	1					
ANR	1258680	PtrMemberAccess	s -> s_nopd		1258415	1					
ANR	1258681	Identifier	s		1258415	0					
ANR	1258682	Identifier	s_nopd		1258415	1					
ANR	1258683	ExpressionStatement	"printf ( ""\\n"" )"	541:1:9329:9341	1258415	24	True				
ANR	1258684	CallExpression	"printf ( ""\\n"" )"		1258415	0					
ANR	1258685	Callee	printf		1258415	0					
ANR	1258686	Identifier	printf		1258415	0					
ANR	1258687	ArgumentList	"""\\n"""		1258415	1					
ANR	1258688	Argument	"""\\n"""		1258415	0					
ANR	1258689	PrimaryExpression	"""\\n"""		1258415	0					
ANR	1258690	ExpressionStatement	d = s -> s_dirs . d_next	544:1:9363:9383	1258415	25	True				
ANR	1258691	AssignmentExpression	d = s -> s_dirs . d_next		1258415	0		=			
ANR	1258692	Identifier	d		1258415	0					
ANR	1258693	MemberAccess	s -> s_dirs . d_next		1258415	1					
ANR	1258694	PtrMemberAccess	s -> s_dirs		1258415	0					
ANR	1258695	Identifier	s		1258415	0					
ANR	1258696	Identifier	s_dirs		1258415	1					
ANR	1258697	Identifier	d_next		1258415	1					
ANR	1258698	ExpressionStatement	l = s -> s_labels . l_next	545:1:9386:9408	1258415	26	True				
ANR	1258699	AssignmentExpression	l = s -> s_labels . l_next		1258415	0		=			
ANR	1258700	Identifier	l		1258415	0					
ANR	1258701	MemberAccess	s -> s_labels . l_next		1258415	1					
ANR	1258702	PtrMemberAccess	s -> s_labels		1258415	0					
ANR	1258703	Identifier	s		1258415	0					
ANR	1258704	Identifier	s_labels		1258415	1					
ANR	1258705	Identifier	l_next		1258415	1					
ANR	1258706	WhileStatement	while ( d )		1258415	27					
ANR	1258707	Condition	d	546:8:9418:9418	1258415	0	True				
ANR	1258708	Identifier	d		1258415	0					
ANR	1258709	CompoundStatement		60:11:1038:1038	1258415	1					
ANR	1258710	WhileStatement	while ( l )		1258415	0					
ANR	1258711	Condition	l	549:9:9464:9464	1258415	0	True				
ANR	1258712	Identifier	l		1258415	0					
ANR	1258713	CompoundStatement		63:12:1084:1084	1258415	1					
ANR	1258714	IfStatement	if ( l -> l_off > d -> d_off )		1258415	0					
ANR	1258715	Condition	l -> l_off > d -> d_off	550:7:9476:9494	1258415	0	True				
ANR	1258716	RelationalExpression	l -> l_off > d -> d_off		1258415	0		>			
ANR	1258717	PtrMemberAccess	l -> l_off		1258415	0					
ANR	1258718	Identifier	l		1258415	0					
ANR	1258719	Identifier	l_off		1258415	1					
ANR	1258720	PtrMemberAccess	d -> d_off		1258415	1					
ANR	1258721	Identifier	d		1258415	0					
ANR	1258722	Identifier	d_off		1258415	1					
ANR	1258723	BreakStatement	break ;	551:4:9501:9506	1258415	1	True				
ANR	1258724	ExpressionStatement	"print_label ( s , l )"	553:3:9512:9529	1258415	1	True				
ANR	1258725	CallExpression	"print_label ( s , l )"		1258415	0					
ANR	1258726	Callee	print_label		1258415	0					
ANR	1258727	Identifier	print_label		1258415	0					
ANR	1258728	ArgumentList	s		1258415	1					
ANR	1258729	Argument	s		1258415	0					
ANR	1258730	Identifier	s		1258415	0					
ANR	1258731	Argument	l		1258415	1					
ANR	1258732	Identifier	l		1258415	0					
ANR	1258733	ExpressionStatement	l = l -> l_next	554:3:9534:9547	1258415	2	True				
ANR	1258734	AssignmentExpression	l = l -> l_next		1258415	0		=			
ANR	1258735	Identifier	l		1258415	0					
ANR	1258736	PtrMemberAccess	l -> l_next		1258415	1					
ANR	1258737	Identifier	l		1258415	0					
ANR	1258738	Identifier	l_next		1258415	1					
ANR	1258739	ExpressionStatement	"add_comment ( s , d )"	557:2:9556:9573	1258415	1	True				
ANR	1258740	CallExpression	"add_comment ( s , d )"		1258415	0					
ANR	1258741	Callee	add_comment		1258415	0					
ANR	1258742	Identifier	add_comment		1258415	0					
ANR	1258743	ArgumentList	s		1258415	1					
ANR	1258744	Argument	s		1258415	0					
ANR	1258745	Identifier	s		1258415	0					
ANR	1258746	Argument	d		1258415	1					
ANR	1258747	Identifier	d		1258415	0					
ANR	1258748	ExpressionStatement	"output ( s , ""\\t%s\\n"" , d -> d_asm )"	558:2:9577:9606	1258415	2	True				
ANR	1258749	CallExpression	"output ( s , ""\\t%s\\n"" , d -> d_asm )"		1258415	0					
ANR	1258750	Callee	output		1258415	0					
ANR	1258751	Identifier	output		1258415	0					
ANR	1258752	ArgumentList	s		1258415	1					
ANR	1258753	Argument	s		1258415	0					
ANR	1258754	Identifier	s		1258415	0					
ANR	1258755	Argument	"""\\t%s\\n"""		1258415	1					
ANR	1258756	PrimaryExpression	"""\\t%s\\n"""		1258415	0					
ANR	1258757	Argument	d -> d_asm		1258415	2					
ANR	1258758	PtrMemberAccess	d -> d_asm		1258415	0					
ANR	1258759	Identifier	d		1258415	0					
ANR	1258760	Identifier	d_asm		1258415	1					
ANR	1258761	ExpressionStatement	d = d -> d_next	560:2:9611:9624	1258415	3	True				
ANR	1258762	AssignmentExpression	d = d -> d_next		1258415	0		=			
ANR	1258763	Identifier	d		1258415	0					
ANR	1258764	PtrMemberAccess	d -> d_next		1258415	1					
ANR	1258765	Identifier	d		1258415	0					
ANR	1258766	Identifier	d_next		1258415	1					
ANR	1258767	IfStatement	if ( l )		1258415	28					
ANR	1258768	Condition	l	562:5:9634:9634	1258415	0	True				
ANR	1258769	Identifier	l		1258415	0					
ANR	1258770	CompoundStatement		76:8:1254:1254	1258415	1					
ANR	1258771	ExpressionStatement	"print_label ( s , l )"	563:2:9641:9658	1258415	0	True				
ANR	1258772	CallExpression	"print_label ( s , l )"		1258415	0					
ANR	1258773	Callee	print_label		1258415	0					
ANR	1258774	Identifier	print_label		1258415	0					
ANR	1258775	ArgumentList	s		1258415	1					
ANR	1258776	Argument	s		1258415	0					
ANR	1258777	Identifier	s		1258415	0					
ANR	1258778	Argument	l		1258415	1					
ANR	1258779	Identifier	l		1258415	0					
ANR	1258780	ExpressionStatement	assert ( ! l -> l_next )	564:2:9662:9680	1258415	1	True				
ANR	1258781	CallExpression	assert ( ! l -> l_next )		1258415	0					
ANR	1258782	Callee	assert		1258415	0					
ANR	1258783	Identifier	assert		1258415	0					
ANR	1258784	ArgumentList	! l -> l_next		1258415	1					
ANR	1258785	Argument	! l -> l_next		1258415	0					
ANR	1258786	UnaryOperationExpression	! l -> l_next		1258415	0					
ANR	1258787	UnaryOperator	!		1258415	0					
ANR	1258788	PtrMemberAccess	l -> l_next		1258415	1					
ANR	1258789	Identifier	l		1258415	0					
ANR	1258790	Identifier	l_next		1258415	1					
ANR	1258791	ExpressionStatement	"output ( s , ""\\n\\tENDMOD\\n"" )"	567:1:9687:9712	1258415	29	True				
ANR	1258792	CallExpression	"output ( s , ""\\n\\tENDMOD\\n"" )"		1258415	0					
ANR	1258793	Callee	output		1258415	0					
ANR	1258794	Identifier	output		1258415	0					
ANR	1258795	ArgumentList	s		1258415	1					
ANR	1258796	Argument	s		1258415	0					
ANR	1258797	Identifier	s		1258415	0					
ANR	1258798	Argument	"""\\n\\tENDMOD\\n"""		1258415	1					
ANR	1258799	PrimaryExpression	"""\\n\\tENDMOD\\n"""		1258415	0					
ANR	1258800	ReturnType	static void		1258415	1					
ANR	1258801	Identifier	own		1258415	2					
ANR	1258802	ParameterList	struct state * s		1258415	3					
ANR	1258803	Parameter	struct state * s	486:16:8365:8379	1258415	0	True				
ANR	1258804	ParameterType	struct state *		1258415	0					
ANR	1258805	Identifier	s		1258415	1					
ANR	1258806	CFGEntryNode	ENTRY		1258415		True				
ANR	1258807	CFGExitNode	EXIT		1258415		True				
ANR	1258808	Symbol	s -> s_labels . l_next		1258415						
ANR	1258809	Symbol	stdout		1258415						
ANR	1258810	Symbol	strchr		1258415						
ANR	1258811	Symbol	& d -> d_inst		1258415						
ANR	1258812	Symbol	s -> s_nopd		1258415						
ANR	1258813	Symbol	last -> d_next		1258415						
ANR	1258814	Symbol	flush		1258415						
ANR	1258815	Symbol	fnamep		1258415						
ANR	1258816	Symbol	* fnamep		1258415						
ANR	1258817	Symbol	next_inst		1258415						
ANR	1258818	Symbol	s -> s_fname		1258415						
ANR	1258819	Symbol	s -> s_dirs		1258415						
ANR	1258820	Symbol	s -> s_nop		1258415						
ANR	1258821	Symbol	fname		1258415						
ANR	1258822	Symbol	NULL		1258415						
ANR	1258823	Symbol	d		1258415						
ANR	1258824	Symbol	last		1258415						
ANR	1258825	Symbol	& s -> s_dirs		1258415						
ANR	1258826	Symbol	l		1258415						
ANR	1258827	Symbol	* last		1258415						
ANR	1258828	Symbol	s -> s_dirs . d_next		1258415						
ANR	1258829	Symbol	* d		1258415						
ANR	1258830	Symbol	s -> s_labels		1258415						
ANR	1258831	Symbol	d -> d_next		1258415						
ANR	1258832	Symbol	i2u16		1258415						
ANR	1258833	Symbol	s		1258415						
ANR	1258834	Symbol	d -> d_asm		1258415						
ANR	1258835	Symbol	* l		1258415						
ANR	1258836	Symbol	l -> l_off		1258415						
ANR	1258837	Symbol	l -> l_next		1258415						
ANR	1258838	Symbol	last -> d_asm		1258415						
ANR	1258839	Symbol	* s		1258415						
ANR	1258840	Symbol	s -> s_ff_quirk		1258415						
ANR	1258841	Symbol	s -> s_off		1258415						
ANR	1258842	Symbol	d -> d_off		1258415						
