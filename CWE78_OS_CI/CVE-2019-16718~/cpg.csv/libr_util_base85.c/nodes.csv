command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5085474	File	data/converged/CVE-2019-16718~_radare2/libr_util_base85.c								
ANR	5085475	Function	getc_nospace	33:0:1340:1435							
ANR	5085476	FunctionDef	getc_nospace (FILE * f)		5085475	0					
ANR	5085477	CompoundStatement		33:33:1373:1435	5085475	0					
ANR	5085478	IdentifierDeclStatement	int c ;	34:1:1376:1381	5085475	0	True				
ANR	5085479	IdentifierDecl	c		5085475	0					
ANR	5085480	IdentifierDeclType	int		5085475	0					
ANR	5085481	Identifier	c		5085475	1					
ANR	5085482	WhileStatement	while ( isspace ( c = getc ( f ) ) )		5085475	1					
ANR	5085483	Condition	isspace ( c = getc ( f ) )	35:8:1391:1412	5085475	0	True				
ANR	5085484	CallExpression	isspace ( c = getc ( f ) )		5085475	0					
ANR	5085485	Callee	isspace		5085475	0					
ANR	5085486	Identifier	isspace		5085475	0					
ANR	5085487	ArgumentList	c = getc ( f )		5085475	1					
ANR	5085488	Argument	c = getc ( f )		5085475	0					
ANR	5085489	AssignmentExpression	c = getc ( f )		5085475	0		=			
ANR	5085490	Identifier	c		5085475	0					
ANR	5085491	CallExpression	getc ( f )		5085475	1					
ANR	5085492	Callee	getc		5085475	0					
ANR	5085493	Identifier	getc		5085475	0					
ANR	5085494	ArgumentList	f		5085475	1					
ANR	5085495	Argument	f		5085475	0					
ANR	5085496	Identifier	f		5085475	0					
ANR	5085497	CompoundStatement		3:32:41:41	5085475	1					
ANR	5085498	ExpressionStatement		36:2:1419:1419	5085475	0	True				
ANR	5085499	ReturnStatement	return c ;	38:1:1425:1433	5085475	2	True				
ANR	5085500	Identifier	c		5085475	0					
ANR	5085501	ReturnType	static int		5085475	1					
ANR	5085502	Identifier	getc_nospace		5085475	2					
ANR	5085503	ParameterList	FILE * f		5085475	3					
ANR	5085504	Parameter	FILE * f	33:24:1364:1370	5085475	0	True				
ANR	5085505	ParameterType	FILE *		5085475	0					
ANR	5085506	Identifier	f		5085475	1					
ANR	5085507	CFGEntryNode	ENTRY		5085475		True				
ANR	5085508	CFGExitNode	EXIT		5085475		True				
ANR	5085509	Symbol	c		5085475						
ANR	5085510	Symbol	f		5085475						
ANR	5085511	Symbol	isspace		5085475						
ANR	5085512	Symbol	getc		5085475						
ANR	5085513	Function	putc_wrap	41:0:1438:1576							
ANR	5085514	FunctionDef	"putc_wrap (char c , int wrap , int * len)"		5085513	0					
ANR	5085515	CompoundStatement		41:50:1488:1576	5085513	0					
ANR	5085516	IfStatement	if ( wrap && * len >= wrap )		5085513	0					
ANR	5085517	Condition	wrap && * len >= wrap	42:5:1495:1514	5085513	0	True				
ANR	5085518	AndExpression	wrap && * len >= wrap		5085513	0		&&			
ANR	5085519	Identifier	wrap		5085513	0					
ANR	5085520	RelationalExpression	* len >= wrap		5085513	1		>=			
ANR	5085521	UnaryOperationExpression	* len		5085513	0					
ANR	5085522	UnaryOperator	*		5085513	0					
ANR	5085523	Identifier	len		5085513	1					
ANR	5085524	Identifier	wrap		5085513	1					
ANR	5085525	CompoundStatement		2:27:28:28	5085513	1					
ANR	5085526	ExpressionStatement	putchar ( '\\n' )	43:2:1521:1535	5085513	0	True				
ANR	5085527	CallExpression	putchar ( '\\n' )		5085513	0					
ANR	5085528	Callee	putchar		5085513	0					
ANR	5085529	Identifier	putchar		5085513	0					
ANR	5085530	ArgumentList	'\\n'		5085513	1					
ANR	5085531	Argument	'\\n'		5085513	0					
ANR	5085532	PrimaryExpression	'\\n'		5085513	0					
ANR	5085533	ExpressionStatement	* len = 0	44:2:1539:1547	5085513	1	True				
ANR	5085534	AssignmentExpression	* len = 0		5085513	0		=			
ANR	5085535	UnaryOperationExpression	* len		5085513	0					
ANR	5085536	UnaryOperator	*		5085513	0					
ANR	5085537	Identifier	len		5085513	1					
ANR	5085538	PrimaryExpression	0		5085513	1					
ANR	5085539	ExpressionStatement	putchar ( c )	46:1:1553:1563	5085513	1	True				
ANR	5085540	CallExpression	putchar ( c )		5085513	0					
ANR	5085541	Callee	putchar		5085513	0					
ANR	5085542	Identifier	putchar		5085513	0					
ANR	5085543	ArgumentList	c		5085513	1					
ANR	5085544	Argument	c		5085513	0					
ANR	5085545	Identifier	c		5085513	0					
ANR	5085546	ExpressionStatement	( * len ) ++	47:1:1566:1574	5085513	2	True				
ANR	5085547	PostIncDecOperationExpression	( * len ) ++		5085513	0					
ANR	5085548	UnaryOperationExpression	* len		5085513	0					
ANR	5085549	UnaryOperator	*		5085513	0					
ANR	5085550	Identifier	len		5085513	1					
ANR	5085551	IncDec	++		5085513	1					
ANR	5085552	ReturnType	static void		5085513	1					
ANR	5085553	Identifier	putc_wrap		5085513	2					
ANR	5085554	ParameterList	"char c , int wrap , int * len"		5085513	3					
ANR	5085555	Parameter	char c	41:22:1460:1465	5085513	0	True				
ANR	5085556	ParameterType	char		5085513	0					
ANR	5085557	Identifier	c		5085513	1					
ANR	5085558	Parameter	int wrap	41:30:1468:1475	5085513	1	True				
ANR	5085559	ParameterType	int		5085513	0					
ANR	5085560	Identifier	wrap		5085513	1					
ANR	5085561	Parameter	int * len	41:40:1478:1485	5085513	2	True				
ANR	5085562	ParameterType	int *		5085513	0					
ANR	5085563	Identifier	len		5085513	1					
ANR	5085564	CFGEntryNode	ENTRY		5085513		True				
ANR	5085565	CFGExitNode	EXIT		5085513		True				
ANR	5085566	Symbol	c		5085513						
ANR	5085567	Symbol	len		5085513						
ANR	5085568	Symbol	wrap		5085513						
ANR	5085569	Symbol	* len		5085513						
ANR	5085570	Function	encode_tuple	50:0:1579:2031							
ANR	5085571	FunctionDef	"encode_tuple (unsigned long tuple , int count , int wrap , int * plen , int y_abbr)"		5085570	0					
ANR	5085572	CompoundStatement		50:90:1669:2031	5085570	0					
ANR	5085573	IdentifierDeclStatement	"int i , lim ;"	51:1:1672:1682	5085570	0	True				
ANR	5085574	IdentifierDecl	i		5085570	0					
ANR	5085575	IdentifierDeclType	int		5085570	0					
ANR	5085576	Identifier	i		5085570	1					
ANR	5085577	IdentifierDecl	lim		5085570	1					
ANR	5085578	IdentifierDeclType	int		5085570	0					
ANR	5085579	Identifier	lim		5085570	1					
ANR	5085580	IdentifierDeclStatement	char out [ 5 ] ;	52:1:1685:1696	5085570	1	True				
ANR	5085581	IdentifierDecl	out [ 5 ]		5085570	0					
ANR	5085582	IdentifierDeclType	char [ 5 ]		5085570	0					
ANR	5085583	Identifier	out		5085570	1					
ANR	5085584	PrimaryExpression	5		5085570	2					
ANR	5085585	IfStatement	if ( tuple == 0 && count == 4 )		5085570	2					
ANR	5085586	Condition	tuple == 0 && count == 4	53:5:1703:1726	5085570	0	True				
ANR	5085587	AndExpression	tuple == 0 && count == 4		5085570	0		&&			
ANR	5085588	EqualityExpression	tuple == 0		5085570	0		==			
ANR	5085589	Identifier	tuple		5085570	0					
ANR	5085590	PrimaryExpression	0		5085570	1					
ANR	5085591	EqualityExpression	count == 4		5085570	1		==			
ANR	5085592	Identifier	count		5085570	0					
ANR	5085593	PrimaryExpression	4		5085570	1					
ANR	5085594	CompoundStatement		4:31:59:59	5085570	1					
ANR	5085595	ExpressionStatement	"putc_wrap ( 'z' , wrap , plen )"	54:2:1733:1759	5085570	0	True				
ANR	5085596	CallExpression	"putc_wrap ( 'z' , wrap , plen )"		5085570	0					
ANR	5085597	Callee	putc_wrap		5085570	0					
ANR	5085598	Identifier	putc_wrap		5085570	0					
ANR	5085599	ArgumentList	'z'		5085570	1					
ANR	5085600	Argument	'z'		5085570	0					
ANR	5085601	PrimaryExpression	'z'		5085570	0					
ANR	5085602	Argument	wrap		5085570	1					
ANR	5085603	Identifier	wrap		5085570	0					
ANR	5085604	Argument	plen		5085570	2					
ANR	5085605	Identifier	plen		5085570	0					
ANR	5085606	ElseStatement	else		5085570	0					
ANR	5085607	IfStatement	if ( tuple == 0x20202020 && count == 4 && y_abbr )		5085570	0					
ANR	5085608	Condition	tuple == 0x20202020 && count == 4 && y_abbr	56:10:1774:1816	5085570	0	True				
ANR	5085609	AndExpression	tuple == 0x20202020 && count == 4 && y_abbr		5085570	0		&&			
ANR	5085610	EqualityExpression	tuple == 0x20202020		5085570	0		==			
ANR	5085611	Identifier	tuple		5085570	0					
ANR	5085612	PrimaryExpression	0x20202020		5085570	1					
ANR	5085613	AndExpression	count == 4 && y_abbr		5085570	1		&&			
ANR	5085614	EqualityExpression	count == 4		5085570	0		==			
ANR	5085615	Identifier	count		5085570	0					
ANR	5085616	PrimaryExpression	4		5085570	1					
ANR	5085617	Identifier	y_abbr		5085570	1					
ANR	5085618	CompoundStatement		7:55:149:149	5085570	1					
ANR	5085619	ExpressionStatement	"putc_wrap ( 'y' , wrap , plen )"	57:2:1823:1849	5085570	0	True				
ANR	5085620	CallExpression	"putc_wrap ( 'y' , wrap , plen )"		5085570	0					
ANR	5085621	Callee	putc_wrap		5085570	0					
ANR	5085622	Identifier	putc_wrap		5085570	0					
ANR	5085623	ArgumentList	'y'		5085570	1					
ANR	5085624	Argument	'y'		5085570	0					
ANR	5085625	PrimaryExpression	'y'		5085570	0					
ANR	5085626	Argument	wrap		5085570	1					
ANR	5085627	Identifier	wrap		5085570	0					
ANR	5085628	Argument	plen		5085570	2					
ANR	5085629	Identifier	plen		5085570	0					
ANR	5085630	ElseStatement	else		5085570	0					
ANR	5085631	CompoundStatement		10:6:190:190	5085570	0					
ANR	5085632	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5085570	0					
ANR	5085633	ForInit	i = 0 ;	60:7:1869:1874	5085570	0	True				
ANR	5085634	AssignmentExpression	i = 0		5085570	0		=			
ANR	5085635	Identifier	i		5085570	0					
ANR	5085636	PrimaryExpression	0		5085570	1					
ANR	5085637	Condition	i < 5	60:14:1876:1880	5085570	1	True				
ANR	5085638	RelationalExpression	i < 5		5085570	0		<			
ANR	5085639	Identifier	i		5085570	0					
ANR	5085640	PrimaryExpression	5		5085570	1					
ANR	5085641	PostIncDecOperationExpression	i ++	60:21:1883:1885	5085570	2	True				
ANR	5085642	Identifier	i		5085570	0					
ANR	5085643	IncDec	++		5085570	1					
ANR	5085644	CompoundStatement		11:26:218:218	5085570	3					
ANR	5085645	ExpressionStatement	out [ i ] = tuple % 85 + '!'	61:3:1893:1918	5085570	0	True				
ANR	5085646	AssignmentExpression	out [ i ] = tuple % 85 + '!'		5085570	0		=			
ANR	5085647	ArrayIndexing	out [ i ]		5085570	0					
ANR	5085648	Identifier	out		5085570	0					
ANR	5085649	Identifier	i		5085570	1					
ANR	5085650	AdditiveExpression	tuple % 85 + '!'		5085570	1		+			
ANR	5085651	MultiplicativeExpression	tuple % 85		5085570	0		%			
ANR	5085652	Identifier	tuple		5085570	0					
ANR	5085653	PrimaryExpression	85		5085570	1					
ANR	5085654	PrimaryExpression	'!'		5085570	1					
ANR	5085655	ExpressionStatement	tuple /= 85	62:3:1923:1934	5085570	1	True				
ANR	5085656	AssignmentExpression	tuple /= 85		5085570	0		/=			
ANR	5085657	Identifier	tuple		5085570	0					
ANR	5085658	PrimaryExpression	85		5085570	1					
ANR	5085659	ExpressionStatement	lim = 4 - count	64:2:1942:1957	5085570	1	True				
ANR	5085660	AssignmentExpression	lim = 4 - count		5085570	0		=			
ANR	5085661	Identifier	lim		5085570	0					
ANR	5085662	AdditiveExpression	4 - count		5085570	1		-			
ANR	5085663	PrimaryExpression	4		5085570	0					
ANR	5085664	Identifier	count		5085570	1					
ANR	5085665	ForStatement	for ( i = 4 ; i >= lim ; i -- )		5085570	2					
ANR	5085666	ForInit	i = 4 ;	65:7:1966:1971	5085570	0	True				
ANR	5085667	AssignmentExpression	i = 4		5085570	0		=			
ANR	5085668	Identifier	i		5085570	0					
ANR	5085669	PrimaryExpression	4		5085570	1					
ANR	5085670	Condition	i >= lim	65:14:1973:1980	5085570	1	True				
ANR	5085671	RelationalExpression	i >= lim		5085570	0		>=			
ANR	5085672	Identifier	i		5085570	0					
ANR	5085673	Identifier	lim		5085570	1					
ANR	5085674	PostIncDecOperationExpression	i --	65:24:1983:1985	5085570	2	True				
ANR	5085675	Identifier	i		5085570	0					
ANR	5085676	IncDec	--		5085570	1					
ANR	5085677	CompoundStatement		16:29:318:318	5085570	3					
ANR	5085678	ExpressionStatement	"putc_wrap ( out [ i ] , wrap , plen )"	66:3:1993:2022	5085570	0	True				
ANR	5085679	CallExpression	"putc_wrap ( out [ i ] , wrap , plen )"		5085570	0					
ANR	5085680	Callee	putc_wrap		5085570	0					
ANR	5085681	Identifier	putc_wrap		5085570	0					
ANR	5085682	ArgumentList	out [ i ]		5085570	1					
ANR	5085683	Argument	out [ i ]		5085570	0					
ANR	5085684	ArrayIndexing	out [ i ]		5085570	0					
ANR	5085685	Identifier	out		5085570	0					
ANR	5085686	Identifier	i		5085570	1					
ANR	5085687	Argument	wrap		5085570	1					
ANR	5085688	Identifier	wrap		5085570	0					
ANR	5085689	Argument	plen		5085570	2					
ANR	5085690	Identifier	plen		5085570	0					
ANR	5085691	ReturnType	static void		5085570	1					
ANR	5085692	Identifier	encode_tuple		5085570	2					
ANR	5085693	ParameterList	"unsigned long tuple , int count , int wrap , int * plen , int y_abbr"		5085570	3					
ANR	5085694	Parameter	unsigned long tuple	50:25:1604:1622	5085570	0	True				
ANR	5085695	ParameterType	unsigned long		5085570	0					
ANR	5085696	Identifier	tuple		5085570	1					
ANR	5085697	Parameter	int count	50:46:1625:1633	5085570	1	True				
ANR	5085698	ParameterType	int		5085570	0					
ANR	5085699	Identifier	count		5085570	1					
ANR	5085700	Parameter	int wrap	50:57:1636:1643	5085570	2	True				
ANR	5085701	ParameterType	int		5085570	0					
ANR	5085702	Identifier	wrap		5085570	1					
ANR	5085703	Parameter	int * plen	50:67:1646:1654	5085570	3	True				
ANR	5085704	ParameterType	int *		5085570	0					
ANR	5085705	Identifier	plen		5085570	1					
ANR	5085706	Parameter	int y_abbr	50:78:1657:1666	5085570	4	True				
ANR	5085707	ParameterType	int		5085570	0					
ANR	5085708	Identifier	y_abbr		5085570	1					
ANR	5085709	CFGEntryNode	ENTRY		5085570		True				
ANR	5085710	CFGExitNode	EXIT		5085570		True				
ANR	5085711	Symbol	tuple		5085570						
ANR	5085712	Symbol	plen		5085570						
ANR	5085713	Symbol	lim		5085570						
ANR	5085714	Symbol	* i		5085570						
ANR	5085715	Symbol	y_abbr		5085570						
ANR	5085716	Symbol	count		5085570						
ANR	5085717	Symbol	* out		5085570						
ANR	5085718	Symbol	i		5085570						
ANR	5085719	Symbol	wrap		5085570						
ANR	5085720	Symbol	out		5085570						
ANR	5085721	Function	r_base85_decode_tuple	71:0:2034:2178							
ANR	5085722	FunctionDef	"r_base85_decode_tuple (unsigned long tuple , int count)"		5085721	0					
ANR	5085723	CompoundStatement		71:65:2099:2178	5085721	0					
ANR	5085724	IdentifierDeclStatement	int i ;	72:1:2102:2107	5085721	0	True				
ANR	5085725	IdentifierDecl	i		5085721	0					
ANR	5085726	IdentifierDeclType	int		5085721	0					
ANR	5085727	Identifier	i		5085721	1					
ANR	5085728	ForStatement	for ( i = 1 ; i < count ; i ++ )		5085721	1					
ANR	5085729	ForInit	i = 1 ;	73:6:2115:2120	5085721	0	True				
ANR	5085730	AssignmentExpression	i = 1		5085721	0		=			
ANR	5085731	Identifier	i		5085721	0					
ANR	5085732	PrimaryExpression	1		5085721	1					
ANR	5085733	Condition	i < count	73:13:2122:2130	5085721	1	True				
ANR	5085734	RelationalExpression	i < count		5085721	0		<			
ANR	5085735	Identifier	i		5085721	0					
ANR	5085736	Identifier	count		5085721	1					
ANR	5085737	PostIncDecOperationExpression	i ++	73:24:2133:2135	5085721	2	True				
ANR	5085738	Identifier	i		5085721	0					
ANR	5085739	IncDec	++		5085721	1					
ANR	5085740	CompoundStatement		3:29:38:38	5085721	3					
ANR	5085741	ExpressionStatement	putchar ( tuple >> ( ( 4 - i ) * 8 ) )	74:2:2142:2173	5085721	0	True				
ANR	5085742	CallExpression	putchar ( tuple >> ( ( 4 - i ) * 8 ) )		5085721	0					
ANR	5085743	Callee	putchar		5085721	0					
ANR	5085744	Identifier	putchar		5085721	0					
ANR	5085745	ArgumentList	tuple >> ( ( 4 - i ) * 8 )		5085721	1					
ANR	5085746	Argument	tuple >> ( ( 4 - i ) * 8 )		5085721	0					
ANR	5085747	ShiftExpression	tuple >> ( ( 4 - i ) * 8 )		5085721	0		>>			
ANR	5085748	Identifier	tuple		5085721	0					
ANR	5085749	MultiplicativeExpression	( 4 - i ) * 8		5085721	1		*			
ANR	5085750	AdditiveExpression	4 - i		5085721	0		-			
ANR	5085751	PrimaryExpression	4		5085721	0					
ANR	5085752	Identifier	i		5085721	1					
ANR	5085753	PrimaryExpression	8		5085721	1					
ANR	5085754	ReturnType	R_API void		5085721	1					
ANR	5085755	Identifier	r_base85_decode_tuple		5085721	2					
ANR	5085756	ParameterList	"unsigned long tuple , int count"		5085721	3					
ANR	5085757	Parameter	unsigned long tuple	71:33:2067:2085	5085721	0	True				
ANR	5085758	ParameterType	unsigned long		5085721	0					
ANR	5085759	Identifier	tuple		5085721	1					
ANR	5085760	Parameter	int count	71:54:2088:2096	5085721	1	True				
ANR	5085761	ParameterType	int		5085721	0					
ANR	5085762	Identifier	count		5085721	1					
ANR	5085763	CFGEntryNode	ENTRY		5085721		True				
ANR	5085764	CFGExitNode	EXIT		5085721		True				
ANR	5085765	Symbol	tuple		5085721						
ANR	5085766	Symbol	count		5085721						
ANR	5085767	Symbol	i		5085721						
ANR	5085768	Function	r_base85_encode	78:0:2181:2743							
ANR	5085769	FunctionDef	"r_base85_encode (FILE * fp , int delims , int wrap , int y_abbr)"		5085768	0					
ANR	5085770	CompoundStatement		78:71:2252:2743	5085768	0					
ANR	5085771	IdentifierDeclStatement	"int c , count = 0 , len = 0 ;"	79:1:2255:2280	5085768	0	True				
ANR	5085772	IdentifierDecl	c		5085768	0					
ANR	5085773	IdentifierDeclType	int		5085768	0					
ANR	5085774	Identifier	c		5085768	1					
ANR	5085775	IdentifierDecl	count = 0		5085768	1					
ANR	5085776	IdentifierDeclType	int		5085768	0					
ANR	5085777	Identifier	count		5085768	1					
ANR	5085778	AssignmentExpression	count = 0		5085768	2		=			
ANR	5085779	Identifier	count		5085768	0					
ANR	5085780	PrimaryExpression	0		5085768	1					
ANR	5085781	IdentifierDecl	len = 0		5085768	2					
ANR	5085782	IdentifierDeclType	int		5085768	0					
ANR	5085783	Identifier	len		5085768	1					
ANR	5085784	AssignmentExpression	len = 0		5085768	2		=			
ANR	5085785	Identifier	len		5085768	0					
ANR	5085786	PrimaryExpression	0		5085768	1					
ANR	5085787	IdentifierDeclStatement	unsigned long tuple = 0 ;	80:1:2283:2306	5085768	1	True				
ANR	5085788	IdentifierDecl	tuple = 0		5085768	0					
ANR	5085789	IdentifierDeclType	unsigned long		5085768	0					
ANR	5085790	Identifier	tuple		5085768	1					
ANR	5085791	AssignmentExpression	tuple = 0		5085768	2		=			
ANR	5085792	Identifier	tuple		5085768	0					
ANR	5085793	PrimaryExpression	0		5085768	1					
ANR	5085794	IfStatement	if ( delims )		5085768	2					
ANR	5085795	Condition	delims	81:5:2313:2318	5085768	0	True				
ANR	5085796	Identifier	delims		5085768	0					
ANR	5085797	CompoundStatement		4:13:68:68	5085768	1					
ANR	5085798	ExpressionStatement	"putc_wrap ( '<' , wrap , & len )"	82:2:2325:2352	5085768	0	True				
ANR	5085799	CallExpression	"putc_wrap ( '<' , wrap , & len )"		5085768	0					
ANR	5085800	Callee	putc_wrap		5085768	0					
ANR	5085801	Identifier	putc_wrap		5085768	0					
ANR	5085802	ArgumentList	'<'		5085768	1					
ANR	5085803	Argument	'<'		5085768	0					
ANR	5085804	PrimaryExpression	'<'		5085768	0					
ANR	5085805	Argument	wrap		5085768	1					
ANR	5085806	Identifier	wrap		5085768	0					
ANR	5085807	Argument	& len		5085768	2					
ANR	5085808	UnaryOperationExpression	& len		5085768	0					
ANR	5085809	UnaryOperator	&		5085768	0					
ANR	5085810	Identifier	len		5085768	1					
ANR	5085811	ExpressionStatement	"putc_wrap ( '~' , wrap , & len )"	83:2:2356:2383	5085768	1	True				
ANR	5085812	CallExpression	"putc_wrap ( '~' , wrap , & len )"		5085768	0					
ANR	5085813	Callee	putc_wrap		5085768	0					
ANR	5085814	Identifier	putc_wrap		5085768	0					
ANR	5085815	ArgumentList	'~'		5085768	1					
ANR	5085816	Argument	'~'		5085768	0					
ANR	5085817	PrimaryExpression	'~'		5085768	0					
ANR	5085818	Argument	wrap		5085768	1					
ANR	5085819	Identifier	wrap		5085768	0					
ANR	5085820	Argument	& len		5085768	2					
ANR	5085821	UnaryOperationExpression	& len		5085768	0					
ANR	5085822	UnaryOperator	&		5085768	0					
ANR	5085823	Identifier	len		5085768	1					
ANR	5085824	ForStatement	for ( ; ; )		5085768	3					
ANR	5085825	CompoundStatement		8:10:145:145	5085768	0					
ANR	5085826	ExpressionStatement	c = getc ( fp )	86:2:2402:2414	5085768	0	True				
ANR	5085827	AssignmentExpression	c = getc ( fp )		5085768	0		=			
ANR	5085828	Identifier	c		5085768	0					
ANR	5085829	CallExpression	getc ( fp )		5085768	1					
ANR	5085830	Callee	getc		5085768	0					
ANR	5085831	Identifier	getc		5085768	0					
ANR	5085832	ArgumentList	fp		5085768	1					
ANR	5085833	Argument	fp		5085768	0					
ANR	5085834	Identifier	fp		5085768	0					
ANR	5085835	IfStatement	if ( c != EOF )		5085768	1					
ANR	5085836	Condition	c != EOF	87:6:2422:2429	5085768	0	True				
ANR	5085837	EqualityExpression	c != EOF		5085768	0		!=			
ANR	5085838	Identifier	c		5085768	0					
ANR	5085839	Identifier	EOF		5085768	1					
ANR	5085840	CompoundStatement		10:16:179:179	5085768	1					
ANR	5085841	ExpressionStatement	tuple |= c << ( ( 3 - count ++ ) * 8 )	88:3:2437:2470	5085768	0	True				
ANR	5085842	AssignmentExpression	tuple |= c << ( ( 3 - count ++ ) * 8 )		5085768	0		|=			
ANR	5085843	Identifier	tuple		5085768	0					
ANR	5085844	ShiftExpression	c << ( ( 3 - count ++ ) * 8 )		5085768	1		<<			
ANR	5085845	Identifier	c		5085768	0					
ANR	5085846	MultiplicativeExpression	( 3 - count ++ ) * 8		5085768	1		*			
ANR	5085847	AdditiveExpression	3 - count ++		5085768	0		-			
ANR	5085848	PrimaryExpression	3		5085768	0					
ANR	5085849	PostIncDecOperationExpression	count ++		5085768	1					
ANR	5085850	Identifier	count		5085768	0					
ANR	5085851	IncDec	++		5085768	1					
ANR	5085852	PrimaryExpression	8		5085768	1					
ANR	5085853	IfStatement	if ( count < 4 )		5085768	1					
ANR	5085854	Condition	count < 4	89:7:2479:2487	5085768	0	True				
ANR	5085855	RelationalExpression	count < 4		5085768	0		<			
ANR	5085856	Identifier	count		5085768	0					
ANR	5085857	PrimaryExpression	4		5085768	1					
ANR	5085858	CompoundStatement		12:18:237:237	5085768	1					
ANR	5085859	ContinueStatement	continue ;	90:4:2496:2504	5085768	0	True				
ANR	5085860	ElseStatement	else		5085768	0					
ANR	5085861	IfStatement	if ( count == 0 )		5085768	0					
ANR	5085862	Condition	count == 0	92:13:2524:2533	5085768	0	True				
ANR	5085863	EqualityExpression	count == 0		5085768	0		==			
ANR	5085864	Identifier	count		5085768	0					
ANR	5085865	PrimaryExpression	0		5085768	1					
ANR	5085866	CompoundStatement		15:25:283:283	5085768	1					
ANR	5085867	BreakStatement	break ;	93:3:2541:2546	5085768	0	True				
ANR	5085868	ExpressionStatement	"encode_tuple ( tuple , count , wrap , & len , y_abbr )"	95:2:2554:2600	5085768	2	True				
ANR	5085869	CallExpression	"encode_tuple ( tuple , count , wrap , & len , y_abbr )"		5085768	0					
ANR	5085870	Callee	encode_tuple		5085768	0					
ANR	5085871	Identifier	encode_tuple		5085768	0					
ANR	5085872	ArgumentList	tuple		5085768	1					
ANR	5085873	Argument	tuple		5085768	0					
ANR	5085874	Identifier	tuple		5085768	0					
ANR	5085875	Argument	count		5085768	1					
ANR	5085876	Identifier	count		5085768	0					
ANR	5085877	Argument	wrap		5085768	2					
ANR	5085878	Identifier	wrap		5085768	0					
ANR	5085879	Argument	& len		5085768	3					
ANR	5085880	UnaryOperationExpression	& len		5085768	0					
ANR	5085881	UnaryOperator	&		5085768	0					
ANR	5085882	Identifier	len		5085768	1					
ANR	5085883	Argument	y_abbr		5085768	4					
ANR	5085884	Identifier	y_abbr		5085768	0					
ANR	5085885	IfStatement	if ( c == EOF )		5085768	3					
ANR	5085886	Condition	c == EOF	96:6:2608:2615	5085768	0	True				
ANR	5085887	EqualityExpression	c == EOF		5085768	0		==			
ANR	5085888	Identifier	c		5085768	0					
ANR	5085889	Identifier	EOF		5085768	1					
ANR	5085890	CompoundStatement		19:16:365:365	5085768	1					
ANR	5085891	BreakStatement	break ;	97:3:2623:2628	5085768	0	True				
ANR	5085892	ExpressionStatement	tuple = 0	99:2:2636:2645	5085768	4	True				
ANR	5085893	AssignmentExpression	tuple = 0		5085768	0		=			
ANR	5085894	Identifier	tuple		5085768	0					
ANR	5085895	PrimaryExpression	0		5085768	1					
ANR	5085896	ExpressionStatement	count = 0	100:2:2649:2658	5085768	5	True				
ANR	5085897	AssignmentExpression	count = 0		5085768	0		=			
ANR	5085898	Identifier	count		5085768	0					
ANR	5085899	PrimaryExpression	0		5085768	1					
ANR	5085900	IfStatement	if ( delims )		5085768	4					
ANR	5085901	Condition	delims	102:5:2668:2673	5085768	0	True				
ANR	5085902	Identifier	delims		5085768	0					
ANR	5085903	CompoundStatement		25:13:423:423	5085768	1					
ANR	5085904	ExpressionStatement	"putc_wrap ( '~' , wrap , & len )"	103:2:2680:2707	5085768	0	True				
ANR	5085905	CallExpression	"putc_wrap ( '~' , wrap , & len )"		5085768	0					
ANR	5085906	Callee	putc_wrap		5085768	0					
ANR	5085907	Identifier	putc_wrap		5085768	0					
ANR	5085908	ArgumentList	'~'		5085768	1					
ANR	5085909	Argument	'~'		5085768	0					
ANR	5085910	PrimaryExpression	'~'		5085768	0					
ANR	5085911	Argument	wrap		5085768	1					
ANR	5085912	Identifier	wrap		5085768	0					
ANR	5085913	Argument	& len		5085768	2					
ANR	5085914	UnaryOperationExpression	& len		5085768	0					
ANR	5085915	UnaryOperator	&		5085768	0					
ANR	5085916	Identifier	len		5085768	1					
ANR	5085917	ExpressionStatement	"putc_wrap ( '>' , wrap , & len )"	104:2:2711:2738	5085768	1	True				
ANR	5085918	CallExpression	"putc_wrap ( '>' , wrap , & len )"		5085768	0					
ANR	5085919	Callee	putc_wrap		5085768	0					
ANR	5085920	Identifier	putc_wrap		5085768	0					
ANR	5085921	ArgumentList	'>'		5085768	1					
ANR	5085922	Argument	'>'		5085768	0					
ANR	5085923	PrimaryExpression	'>'		5085768	0					
ANR	5085924	Argument	wrap		5085768	1					
ANR	5085925	Identifier	wrap		5085768	0					
ANR	5085926	Argument	& len		5085768	2					
ANR	5085927	UnaryOperationExpression	& len		5085768	0					
ANR	5085928	UnaryOperator	&		5085768	0					
ANR	5085929	Identifier	len		5085768	1					
ANR	5085930	ReturnType	R_API void		5085768	1					
ANR	5085931	Identifier	r_base85_encode		5085768	2					
ANR	5085932	ParameterList	"FILE * fp , int delims , int wrap , int y_abbr"		5085768	3					
ANR	5085933	Parameter	FILE * fp	78:27:2208:2215	5085768	0	True				
ANR	5085934	ParameterType	FILE *		5085768	0					
ANR	5085935	Identifier	fp		5085768	1					
ANR	5085936	Parameter	int delims	78:37:2218:2227	5085768	1	True				
ANR	5085937	ParameterType	int		5085768	0					
ANR	5085938	Identifier	delims		5085768	1					
ANR	5085939	Parameter	int wrap	78:49:2230:2237	5085768	2	True				
ANR	5085940	ParameterType	int		5085768	0					
ANR	5085941	Identifier	wrap		5085768	1					
ANR	5085942	Parameter	int y_abbr	78:59:2240:2249	5085768	3	True				
ANR	5085943	ParameterType	int		5085768	0					
ANR	5085944	Identifier	y_abbr		5085768	1					
ANR	5085945	CFGEntryNode	ENTRY		5085768		True				
ANR	5085946	CFGExitNode	EXIT		5085768		True				
ANR	5085947	InfiniteForNode	true		5085768		True				
ANR	5085948	Symbol	tuple		5085768						
ANR	5085949	Symbol	delims		5085768						
ANR	5085950	Symbol	c		5085768						
ANR	5085951	Symbol	len		5085768						
ANR	5085952	Symbol	y_abbr		5085768						
ANR	5085953	Symbol	count		5085768						
ANR	5085954	Symbol	fp		5085768						
ANR	5085955	Symbol	& len		5085768						
ANR	5085956	Symbol	wrap		5085768						
ANR	5085957	Symbol	getc		5085768						
ANR	5085958	Symbol	EOF		5085768						
ANR	5085959	Function	r_base85_decode	108:0:2746:4019							
ANR	5085960	FunctionDef	"r_base85_decode (FILE * fp , int delims , int ignore_garbage)"		5085959	0					
ANR	5085961	CompoundStatement		108:69:2815:4019	5085959	0					
ANR	5085962	IdentifierDeclStatement	"int c , count = 0 , end = 0 ;"	109:1:2818:2843	5085959	0	True				
ANR	5085963	IdentifierDecl	c		5085959	0					
ANR	5085964	IdentifierDeclType	int		5085959	0					
ANR	5085965	Identifier	c		5085959	1					
ANR	5085966	IdentifierDecl	count = 0		5085959	1					
ANR	5085967	IdentifierDeclType	int		5085959	0					
ANR	5085968	Identifier	count		5085959	1					
ANR	5085969	AssignmentExpression	count = 0		5085959	2		=			
ANR	5085970	Identifier	count		5085959	0					
ANR	5085971	PrimaryExpression	0		5085959	1					
ANR	5085972	IdentifierDecl	end = 0		5085959	2					
ANR	5085973	IdentifierDeclType	int		5085959	0					
ANR	5085974	Identifier	end		5085959	1					
ANR	5085975	AssignmentExpression	end = 0		5085959	2		=			
ANR	5085976	Identifier	end		5085959	0					
ANR	5085977	PrimaryExpression	0		5085959	1					
ANR	5085978	IdentifierDeclStatement	"unsigned long tuple = 0 , pows [ ] = { 85 * 85 * 85 * 85 , 85 * 85 * 85 , 85 * 85 , 85 , 1 } ;"	110:1:2846:2917	5085959	1	True				
ANR	5085979	IdentifierDecl	tuple = 0		5085959	0					
ANR	5085980	IdentifierDeclType	unsigned long		5085959	0					
ANR	5085981	Identifier	tuple		5085959	1					
ANR	5085982	AssignmentExpression	tuple = 0		5085959	2		=			
ANR	5085983	Identifier	tuple		5085959	0					
ANR	5085984	PrimaryExpression	0		5085959	1					
ANR	5085985	IdentifierDecl	"pows [ ] = { 85 * 85 * 85 * 85 , 85 * 85 * 85 , 85 * 85 , 85 , 1 }"		5085959	1					
ANR	5085986	IdentifierDeclType	unsigned long [ ]		5085959	0					
ANR	5085987	Identifier	pows		5085959	1					
ANR	5085988	AssignmentExpression	"pows [ ] = { 85 * 85 * 85 * 85 , 85 * 85 * 85 , 85 * 85 , 85 , 1 }"		5085959	2		=			
ANR	5085989	Identifier	pows		5085959	0					
ANR	5085990	InitializerList	85 * 85 * 85 * 85		5085959	1					
ANR	5085991	MultiplicativeExpression	85 * 85 * 85 * 85		5085959	0		*			
ANR	5085992	PrimaryExpression	85		5085959	0					
ANR	5085993	MultiplicativeExpression	85 * 85 * 85		5085959	1		*			
ANR	5085994	PrimaryExpression	85		5085959	0					
ANR	5085995	MultiplicativeExpression	85 * 85		5085959	1		*			
ANR	5085996	PrimaryExpression	85		5085959	0					
ANR	5085997	PrimaryExpression	85		5085959	1					
ANR	5085998	MultiplicativeExpression	85 * 85 * 85		5085959	1		*			
ANR	5085999	PrimaryExpression	85		5085959	0					
ANR	5086000	MultiplicativeExpression	85 * 85		5085959	1		*			
ANR	5086001	PrimaryExpression	85		5085959	0					
ANR	5086002	PrimaryExpression	85		5085959	1					
ANR	5086003	MultiplicativeExpression	85 * 85		5085959	2		*			
ANR	5086004	PrimaryExpression	85		5085959	0					
ANR	5086005	PrimaryExpression	85		5085959	1					
ANR	5086006	PrimaryExpression	85		5085959	3					
ANR	5086007	PrimaryExpression	1		5085959	4					
ANR	5086008	WhileStatement	while ( delims )		5085959	2					
ANR	5086009	Condition	delims	111:8:2927:2932	5085959	0	True				
ANR	5086010	Identifier	delims		5085959	0					
ANR	5086011	CompoundStatement		4:16:119:119	5085959	1					
ANR	5086012	ExpressionStatement	c = getc_nospace ( fp )	112:2:2939:2960	5085959	0	True				
ANR	5086013	AssignmentExpression	c = getc_nospace ( fp )		5085959	0		=			
ANR	5086014	Identifier	c		5085959	0					
ANR	5086015	CallExpression	getc_nospace ( fp )		5085959	1					
ANR	5086016	Callee	getc_nospace		5085959	0					
ANR	5086017	Identifier	getc_nospace		5085959	0					
ANR	5086018	ArgumentList	fp		5085959	1					
ANR	5086019	Argument	fp		5085959	0					
ANR	5086020	Identifier	fp		5085959	0					
ANR	5086021	IfStatement	if ( c == '<' )		5085959	1					
ANR	5086022	Condition	c == '<'	113:6:2968:2975	5085959	0	True				
ANR	5086023	EqualityExpression	c == '<'		5085959	0		==			
ANR	5086024	Identifier	c		5085959	0					
ANR	5086025	PrimaryExpression	'<'		5085959	1					
ANR	5086026	CompoundStatement		6:16:162:162	5085959	1					
ANR	5086027	ExpressionStatement	c = getc_nospace ( fp )	114:3:2983:3004	5085959	0	True				
ANR	5086028	AssignmentExpression	c = getc_nospace ( fp )		5085959	0		=			
ANR	5086029	Identifier	c		5085959	0					
ANR	5086030	CallExpression	getc_nospace ( fp )		5085959	1					
ANR	5086031	Callee	getc_nospace		5085959	0					
ANR	5086032	Identifier	getc_nospace		5085959	0					
ANR	5086033	ArgumentList	fp		5085959	1					
ANR	5086034	Argument	fp		5085959	0					
ANR	5086035	Identifier	fp		5085959	0					
ANR	5086036	IfStatement	if ( c == '~' )		5085959	1					
ANR	5086037	Condition	c == '~'	115:7:3013:3020	5085959	0	True				
ANR	5086038	EqualityExpression	c == '~'		5085959	0		==			
ANR	5086039	Identifier	c		5085959	0					
ANR	5086040	PrimaryExpression	'~'		5085959	1					
ANR	5086041	CompoundStatement		8:17:207:207	5085959	1					
ANR	5086042	BreakStatement	break ;	116:4:3029:3034	5085959	0	True				
ANR	5086043	ExpressionStatement	"ungetc ( c , fp )"	118:3:3044:3058	5085959	2	True				
ANR	5086044	CallExpression	"ungetc ( c , fp )"		5085959	0					
ANR	5086045	Callee	ungetc		5085959	0					
ANR	5086046	Identifier	ungetc		5085959	0					
ANR	5086047	ArgumentList	c		5085959	1					
ANR	5086048	Argument	c		5085959	0					
ANR	5086049	Identifier	c		5085959	0					
ANR	5086050	Argument	fp		5085959	1					
ANR	5086051	Identifier	fp		5085959	0					
ANR	5086052	ElseStatement	else		5085959	0					
ANR	5086053	IfStatement	if ( c == EOF )		5085959	0					
ANR	5086054	Condition	c == EOF	119:13:3073:3080	5085959	0	True				
ANR	5086055	EqualityExpression	c == EOF		5085959	0		==			
ANR	5086056	Identifier	c		5085959	0					
ANR	5086057	Identifier	EOF		5085959	1					
ANR	5086058	CompoundStatement		12:23:267:267	5085959	1					
ANR	5086059	ExpressionStatement	"eprint ( ""ascii85: missing <~"" )"	120:3:3088:3118	5085959	0	True				
ANR	5086060	CallExpression	"eprint ( ""ascii85: missing <~"" )"		5085959	0					
ANR	5086061	Callee	eprint		5085959	0					
ANR	5086062	Identifier	eprint		5085959	0					
ANR	5086063	ArgumentList	"""ascii85: missing <~"""		5085959	1					
ANR	5086064	Argument	"""ascii85: missing <~"""		5085959	0					
ANR	5086065	PrimaryExpression	"""ascii85: missing <~"""		5085959	0					
ANR	5086066	ReturnStatement	return false ;	121:3:3123:3135	5085959	1	True				
ANR	5086067	Identifier	false		5085959	0					
ANR	5086068	ForStatement	for ( ; ; )		5085959	3					
ANR	5086069	CompoundStatement		17:10:338:338	5085959	0					
ANR	5086070	ExpressionStatement	c = getc_nospace ( fp )	125:2:3158:3178	5085959	0	True				
ANR	5086071	AssignmentExpression	c = getc_nospace ( fp )		5085959	0		=			
ANR	5086072	Identifier	c		5085959	0					
ANR	5086073	CallExpression	getc_nospace ( fp )		5085959	1					
ANR	5086074	Callee	getc_nospace		5085959	0					
ANR	5086075	Identifier	getc_nospace		5085959	0					
ANR	5086076	ArgumentList	fp		5085959	1					
ANR	5086077	Argument	fp		5085959	0					
ANR	5086078	Identifier	fp		5085959	0					
ANR	5086079	IfStatement	if ( c == 'z' && count == 0 )		5085959	1					
ANR	5086080	Condition	c == 'z' && count == 0	126:6:3186:3207	5085959	0	True				
ANR	5086081	AndExpression	c == 'z' && count == 0		5085959	0		&&			
ANR	5086082	EqualityExpression	c == 'z'		5085959	0		==			
ANR	5086083	Identifier	c		5085959	0					
ANR	5086084	PrimaryExpression	'z'		5085959	1					
ANR	5086085	EqualityExpression	count == 0		5085959	1		==			
ANR	5086086	Identifier	count		5085959	0					
ANR	5086087	PrimaryExpression	0		5085959	1					
ANR	5086088	CompoundStatement		19:30:394:394	5085959	1					
ANR	5086089	ExpressionStatement	"r_base85_decode_tuple ( 0 , 5 )"	127:3:3215:3243	5085959	0	True				
ANR	5086090	CallExpression	"r_base85_decode_tuple ( 0 , 5 )"		5085959	0					
ANR	5086091	Callee	r_base85_decode_tuple		5085959	0					
ANR	5086092	Identifier	r_base85_decode_tuple		5085959	0					
ANR	5086093	ArgumentList	0		5085959	1					
ANR	5086094	Argument	0		5085959	0					
ANR	5086095	PrimaryExpression	0		5085959	0					
ANR	5086096	Argument	5		5085959	1					
ANR	5086097	PrimaryExpression	5		5085959	0					
ANR	5086098	ContinueStatement	continue ;	128:3:3248:3256	5085959	1	True				
ANR	5086099	IfStatement	if ( c == 'y' && count == 0 )		5085959	2					
ANR	5086100	Condition	c == 'y' && count == 0	130:6:3268:3289	5085959	0	True				
ANR	5086101	AndExpression	c == 'y' && count == 0		5085959	0		&&			
ANR	5086102	EqualityExpression	c == 'y'		5085959	0		==			
ANR	5086103	Identifier	c		5085959	0					
ANR	5086104	PrimaryExpression	'y'		5085959	1					
ANR	5086105	EqualityExpression	count == 0		5085959	1		==			
ANR	5086106	Identifier	count		5085959	0					
ANR	5086107	PrimaryExpression	0		5085959	1					
ANR	5086108	CompoundStatement		23:30:476:476	5085959	1					
ANR	5086109	ExpressionStatement	"r_base85_decode_tuple ( 0x20202020 , 5 )"	131:3:3297:3334	5085959	0	True				
ANR	5086110	CallExpression	"r_base85_decode_tuple ( 0x20202020 , 5 )"		5085959	0					
ANR	5086111	Callee	r_base85_decode_tuple		5085959	0					
ANR	5086112	Identifier	r_base85_decode_tuple		5085959	0					
ANR	5086113	ArgumentList	0x20202020		5085959	1					
ANR	5086114	Argument	0x20202020		5085959	0					
ANR	5086115	PrimaryExpression	0x20202020		5085959	0					
ANR	5086116	Argument	5		5085959	1					
ANR	5086117	PrimaryExpression	5		5085959	0					
ANR	5086118	ContinueStatement	continue ;	132:3:3339:3347	5085959	1	True				
ANR	5086119	IfStatement	if ( c == '~' && delims )		5085959	3					
ANR	5086120	Condition	c == '~' && delims	134:6:3359:3376	5085959	0	True				
ANR	5086121	AndExpression	c == '~' && delims		5085959	0		&&			
ANR	5086122	EqualityExpression	c == '~'		5085959	0		==			
ANR	5086123	Identifier	c		5085959	0					
ANR	5086124	PrimaryExpression	'~'		5085959	1					
ANR	5086125	Identifier	delims		5085959	1					
ANR	5086126	CompoundStatement		27:26:563:563	5085959	1					
ANR	5086127	ExpressionStatement	c = getc_nospace ( fp )	135:3:3384:3405	5085959	0	True				
ANR	5086128	AssignmentExpression	c = getc_nospace ( fp )		5085959	0		=			
ANR	5086129	Identifier	c		5085959	0					
ANR	5086130	CallExpression	getc_nospace ( fp )		5085959	1					
ANR	5086131	Callee	getc_nospace		5085959	0					
ANR	5086132	Identifier	getc_nospace		5085959	0					
ANR	5086133	ArgumentList	fp		5085959	1					
ANR	5086134	Argument	fp		5085959	0					
ANR	5086135	Identifier	fp		5085959	0					
ANR	5086136	IfStatement	if ( c != '>' )		5085959	1					
ANR	5086137	Condition	c != '>'	136:7:3414:3421	5085959	0	True				
ANR	5086138	EqualityExpression	c != '>'		5085959	0		!=			
ANR	5086139	Identifier	c		5085959	0					
ANR	5086140	PrimaryExpression	'>'		5085959	1					
ANR	5086141	CompoundStatement		29:17:608:608	5085959	1					
ANR	5086142	ExpressionStatement	"eprint ( ""ascii85: ~ without >\\n"" )"	137:4:3430:3463	5085959	0	True				
ANR	5086143	CallExpression	"eprint ( ""ascii85: ~ without >\\n"" )"		5085959	0					
ANR	5086144	Callee	eprint		5085959	0					
ANR	5086145	Identifier	eprint		5085959	0					
ANR	5086146	ArgumentList	"""ascii85: ~ without >\\n"""		5085959	1					
ANR	5086147	Argument	"""ascii85: ~ without >\\n"""		5085959	0					
ANR	5086148	PrimaryExpression	"""ascii85: ~ without >\\n"""		5085959	0					
ANR	5086149	ReturnStatement	return false ;	138:4:3469:3481	5085959	1	True				
ANR	5086150	Identifier	false		5085959	0					
ANR	5086151	ExpressionStatement	c = EOF	140:3:3491:3498	5085959	2	True				
ANR	5086152	AssignmentExpression	c = EOF		5085959	0		=			
ANR	5086153	Identifier	c		5085959	0					
ANR	5086154	Identifier	EOF		5085959	1					
ANR	5086155	ExpressionStatement	end = 1	141:3:3503:3510	5085959	3	True				
ANR	5086156	AssignmentExpression	end = 1		5085959	0		=			
ANR	5086157	Identifier	end		5085959	0					
ANR	5086158	PrimaryExpression	1		5085959	1					
ANR	5086159	IfStatement	if ( c == EOF )		5085959	4					
ANR	5086160	Condition	c == EOF	143:6:3522:3529	5085959	0	True				
ANR	5086161	EqualityExpression	c == EOF		5085959	0		==			
ANR	5086162	Identifier	c		5085959	0					
ANR	5086163	Identifier	EOF		5085959	1					
ANR	5086164	CompoundStatement		36:16:716:716	5085959	1					
ANR	5086165	IfStatement	if ( delims && ! end )		5085959	0					
ANR	5086166	Condition	delims && ! end	144:7:3541:3554	5085959	0	True				
ANR	5086167	AndExpression	delims && ! end		5085959	0		&&			
ANR	5086168	Identifier	delims		5085959	0					
ANR	5086169	UnaryOperationExpression	! end		5085959	1					
ANR	5086170	UnaryOperator	!		5085959	0					
ANR	5086171	Identifier	end		5085959	1					
ANR	5086172	CompoundStatement		37:23:741:741	5085959	1					
ANR	5086173	ExpressionStatement	"eprint ( ""ascii85: missing ~>"" )"	145:4:3563:3593	5085959	0	True				
ANR	5086174	CallExpression	"eprint ( ""ascii85: missing ~>"" )"		5085959	0					
ANR	5086175	Callee	eprint		5085959	0					
ANR	5086176	Identifier	eprint		5085959	0					
ANR	5086177	ArgumentList	"""ascii85: missing ~>"""		5085959	1					
ANR	5086178	Argument	"""ascii85: missing ~>"""		5085959	0					
ANR	5086179	PrimaryExpression	"""ascii85: missing ~>"""		5085959	0					
ANR	5086180	ReturnStatement	return false ;	146:4:3599:3611	5085959	1	True				
ANR	5086181	Identifier	false		5085959	0					
ANR	5086182	IfStatement	if ( count > 0 )		5085959	1					
ANR	5086183	Condition	count > 0	148:7:3625:3633	5085959	0	True				
ANR	5086184	RelationalExpression	count > 0		5085959	0		>			
ANR	5086185	Identifier	count		5085959	0					
ANR	5086186	PrimaryExpression	0		5085959	1					
ANR	5086187	CompoundStatement		41:18:820:820	5085959	1					
ANR	5086188	ExpressionStatement	tuple += pows [ count - 1 ]	149:4:3642:3664	5085959	0	True				
ANR	5086189	AssignmentExpression	tuple += pows [ count - 1 ]		5085959	0		+=			
ANR	5086190	Identifier	tuple		5085959	0					
ANR	5086191	ArrayIndexing	pows [ count - 1 ]		5085959	1					
ANR	5086192	Identifier	pows		5085959	0					
ANR	5086193	AdditiveExpression	count - 1		5085959	1		-			
ANR	5086194	Identifier	count		5085959	0					
ANR	5086195	PrimaryExpression	1		5085959	1					
ANR	5086196	ExpressionStatement	"r_base85_decode_tuple ( tuple , count )"	150:4:3670:3705	5085959	1	True				
ANR	5086197	CallExpression	"r_base85_decode_tuple ( tuple , count )"		5085959	0					
ANR	5086198	Callee	r_base85_decode_tuple		5085959	0					
ANR	5086199	Identifier	r_base85_decode_tuple		5085959	0					
ANR	5086200	ArgumentList	tuple		5085959	1					
ANR	5086201	Argument	tuple		5085959	0					
ANR	5086202	Identifier	tuple		5085959	0					
ANR	5086203	Argument	count		5085959	1					
ANR	5086204	Identifier	count		5085959	0					
ANR	5086205	BreakStatement	break ;	152:3:3715:3720	5085959	2	True				
ANR	5086206	IfStatement	if ( c < '!' || c > 'u' )		5085959	5					
ANR	5086207	Condition	c < '!' || c > 'u'	154:6:3732:3749	5085959	0	True				
ANR	5086208	OrExpression	c < '!' || c > 'u'		5085959	0		||			
ANR	5086209	RelationalExpression	c < '!'		5085959	0		<			
ANR	5086210	Identifier	c		5085959	0					
ANR	5086211	PrimaryExpression	'!'		5085959	1					
ANR	5086212	RelationalExpression	c > 'u'		5085959	1		>			
ANR	5086213	Identifier	c		5085959	0					
ANR	5086214	PrimaryExpression	'u'		5085959	1					
ANR	5086215	CompoundStatement		47:26:936:936	5085959	1					
ANR	5086216	IfStatement	if ( ignore_garbage )		5085959	0					
ANR	5086217	Condition	ignore_garbage	155:7:3761:3774	5085959	0	True				
ANR	5086218	Identifier	ignore_garbage		5085959	0					
ANR	5086219	CompoundStatement		48:23:961:961	5085959	1					
ANR	5086220	ContinueStatement	continue ;	156:4:3783:3791	5085959	0	True				
ANR	5086221	ExpressionStatement	"eprintf ( ""ascii85: invalid character '%c'\\n"" , c )"	158:3:3801:3849	5085959	1	True				
ANR	5086222	CallExpression	"eprintf ( ""ascii85: invalid character '%c'\\n"" , c )"		5085959	0					
ANR	5086223	Callee	eprintf		5085959	0					
ANR	5086224	Identifier	eprintf		5085959	0					
ANR	5086225	ArgumentList	"""ascii85: invalid character '%c'\\n"""		5085959	1					
ANR	5086226	Argument	"""ascii85: invalid character '%c'\\n"""		5085959	0					
ANR	5086227	PrimaryExpression	"""ascii85: invalid character '%c'\\n"""		5085959	0					
ANR	5086228	Argument	c		5085959	1					
ANR	5086229	Identifier	c		5085959	0					
ANR	5086230	ReturnStatement	return false ;	159:3:3854:3866	5085959	2	True				
ANR	5086231	Identifier	false		5085959	0					
ANR	5086232	ExpressionStatement	tuple += ( c - '!' ) * pows [ count ++ ]	161:2:3874:3908	5085959	6	True				
ANR	5086233	AssignmentExpression	tuple += ( c - '!' ) * pows [ count ++ ]		5085959	0		+=			
ANR	5086234	Identifier	tuple		5085959	0					
ANR	5086235	MultiplicativeExpression	( c - '!' ) * pows [ count ++ ]		5085959	1		*			
ANR	5086236	AdditiveExpression	c - '!'		5085959	0		-			
ANR	5086237	Identifier	c		5085959	0					
ANR	5086238	PrimaryExpression	'!'		5085959	1					
ANR	5086239	ArrayIndexing	pows [ count ++ ]		5085959	1					
ANR	5086240	Identifier	pows		5085959	0					
ANR	5086241	PostIncDecOperationExpression	count ++		5085959	1					
ANR	5086242	Identifier	count		5085959	0					
ANR	5086243	IncDec	++		5085959	1					
ANR	5086244	IfStatement	if ( count == 5 )		5085959	7					
ANR	5086245	Condition	count == 5	162:6:3916:3925	5085959	0	True				
ANR	5086246	EqualityExpression	count == 5		5085959	0		==			
ANR	5086247	Identifier	count		5085959	0					
ANR	5086248	PrimaryExpression	5		5085959	1					
ANR	5086249	CompoundStatement		55:18:1112:1112	5085959	1					
ANR	5086250	ExpressionStatement	"r_base85_decode_tuple ( tuple , count )"	163:3:3933:3968	5085959	0	True				
ANR	5086251	CallExpression	"r_base85_decode_tuple ( tuple , count )"		5085959	0					
ANR	5086252	Callee	r_base85_decode_tuple		5085959	0					
ANR	5086253	Identifier	r_base85_decode_tuple		5085959	0					
ANR	5086254	ArgumentList	tuple		5085959	1					
ANR	5086255	Argument	tuple		5085959	0					
ANR	5086256	Identifier	tuple		5085959	0					
ANR	5086257	Argument	count		5085959	1					
ANR	5086258	Identifier	count		5085959	0					
ANR	5086259	ExpressionStatement	tuple = 0	164:3:3973:3982	5085959	1	True				
ANR	5086260	AssignmentExpression	tuple = 0		5085959	0		=			
ANR	5086261	Identifier	tuple		5085959	0					
ANR	5086262	PrimaryExpression	0		5085959	1					
ANR	5086263	ExpressionStatement	count = 0	165:3:3987:3996	5085959	2	True				
ANR	5086264	AssignmentExpression	count = 0		5085959	0		=			
ANR	5086265	Identifier	count		5085959	0					
ANR	5086266	PrimaryExpression	0		5085959	1					
ANR	5086267	ReturnStatement	return true ;	168:1:4006:4017	5085959	4	True				
ANR	5086268	Identifier	true		5085959	0					
ANR	5086269	ReturnType	R_API bool		5085959	1					
ANR	5086270	Identifier	r_base85_decode		5085959	2					
ANR	5086271	ParameterList	"FILE * fp , int delims , int ignore_garbage"		5085959	3					
ANR	5086272	Parameter	FILE * fp	108:27:2773:2780	5085959	0	True				
ANR	5086273	ParameterType	FILE *		5085959	0					
ANR	5086274	Identifier	fp		5085959	1					
ANR	5086275	Parameter	int delims	108:37:2783:2792	5085959	1	True				
ANR	5086276	ParameterType	int		5085959	0					
ANR	5086277	Identifier	delims		5085959	1					
ANR	5086278	Parameter	int ignore_garbage	108:49:2795:2812	5085959	2	True				
ANR	5086279	ParameterType	int		5085959	0					
ANR	5086280	Identifier	ignore_garbage		5085959	1					
ANR	5086281	CFGEntryNode	ENTRY		5085959		True				
ANR	5086282	CFGExitNode	EXIT		5085959		True				
ANR	5086283	InfiniteForNode	true		5085959		True				
ANR	5086284	Symbol	delims		5085959						
ANR	5086285	Symbol	c		5085959						
ANR	5086286	Symbol	ignore_garbage		5085959						
ANR	5086287	Symbol	count		5085959						
ANR	5086288	Symbol	false		5085959						
ANR	5086289	Symbol	fp		5085959						
ANR	5086290	Symbol	pows		5085959						
ANR	5086291	Symbol	tuple		5085959						
ANR	5086292	Symbol	getc_nospace		5085959						
ANR	5086293	Symbol	* count		5085959						
ANR	5086294	Symbol	* pows		5085959						
ANR	5086295	Symbol	true		5085959						
ANR	5086296	Symbol	end		5085959						
ANR	5086297	Symbol	EOF		5085959						
