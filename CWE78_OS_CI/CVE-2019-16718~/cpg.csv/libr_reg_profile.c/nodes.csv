command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5044419	File	data/converged/CVE-2019-16718~_radare2/libr_reg_profile.c								
ANR	5044420	Function	parse_alias	7:0:112:347							
ANR	5044421	FunctionDef	"parse_alias (RReg * reg , char * * tok , const int n)"		5044420	0					
ANR	5044422	CompoundStatement		7:67:179:347	5044420	0					
ANR	5044423	IfStatement	if ( n == 2 )		5044420	0					
ANR	5044424	Condition	n == 2	8:5:186:191	5044420	0	True				
ANR	5044425	EqualityExpression	n == 2		5044420	0		==			
ANR	5044426	Identifier	n		5044420	0					
ANR	5044427	PrimaryExpression	2		5044420	1					
ANR	5044428	CompoundStatement		3:2:18:60	5044420	1					
ANR	5044429	IdentifierDeclStatement	int role = r_reg_get_name_idx ( tok [ 0 ] + 1 ) ;	9:2:198:240	5044420	0	True				
ANR	5044430	IdentifierDecl	role = r_reg_get_name_idx ( tok [ 0 ] + 1 )		5044420	0					
ANR	5044431	IdentifierDeclType	int		5044420	0					
ANR	5044432	Identifier	role		5044420	1					
ANR	5044433	AssignmentExpression	role = r_reg_get_name_idx ( tok [ 0 ] + 1 )		5044420	2		=			
ANR	5044434	Identifier	role		5044420	0					
ANR	5044435	CallExpression	r_reg_get_name_idx ( tok [ 0 ] + 1 )		5044420	1					
ANR	5044436	Callee	r_reg_get_name_idx		5044420	0					
ANR	5044437	Identifier	r_reg_get_name_idx		5044420	0					
ANR	5044438	ArgumentList	tok [ 0 ] + 1		5044420	1					
ANR	5044439	Argument	tok [ 0 ] + 1		5044420	0					
ANR	5044440	AdditiveExpression	tok [ 0 ] + 1		5044420	0		+			
ANR	5044441	ArrayIndexing	tok [ 0 ]		5044420	0					
ANR	5044442	Identifier	tok		5044420	0					
ANR	5044443	PrimaryExpression	0		5044420	1					
ANR	5044444	PrimaryExpression	1		5044420	1					
ANR	5044445	ReturnStatement	"return r_reg_set_name ( reg , role , tok [ 1 ] ) ? NULL : ""Invalid alias"" ;"	10:2:244:316	5044420	1	True				
ANR	5044446	ConditionalExpression	"r_reg_set_name ( reg , role , tok [ 1 ] ) ? NULL : ""Invalid alias"""		5044420	0					
ANR	5044447	Condition	"r_reg_set_name ( reg , role , tok [ 1 ] )"		5044420	0					
ANR	5044448	CallExpression	"r_reg_set_name ( reg , role , tok [ 1 ] )"		5044420	0					
ANR	5044449	Callee	r_reg_set_name		5044420	0					
ANR	5044450	Identifier	r_reg_set_name		5044420	0					
ANR	5044451	ArgumentList	reg		5044420	1					
ANR	5044452	Argument	reg		5044420	0					
ANR	5044453	Identifier	reg		5044420	0					
ANR	5044454	Argument	role		5044420	1					
ANR	5044455	Identifier	role		5044420	0					
ANR	5044456	Argument	tok [ 1 ]		5044420	2					
ANR	5044457	ArrayIndexing	tok [ 1 ]		5044420	0					
ANR	5044458	Identifier	tok		5044420	0					
ANR	5044459	PrimaryExpression	1		5044420	1					
ANR	5044460	Identifier	NULL		5044420	1					
ANR	5044461	PrimaryExpression	"""Invalid alias"""		5044420	2					
ANR	5044462	ReturnStatement	"return ""Invalid syntax"" ;"	14:1:322:345	5044420	1	True				
ANR	5044463	PrimaryExpression	"""Invalid syntax"""		5044420	0					
ANR	5044464	ReturnType	static const char *		5044420	1					
ANR	5044465	Identifier	parse_alias		5044420	2					
ANR	5044466	ParameterList	"RReg * reg , char * * tok , const int n"		5044420	3					
ANR	5044467	Parameter	RReg * reg	7:31:143:151	5044420	0	True				
ANR	5044468	ParameterType	RReg *		5044420	0					
ANR	5044469	Identifier	reg		5044420	1					
ANR	5044470	Parameter	char * * tok	7:42:154:163	5044420	1	True				
ANR	5044471	ParameterType	char * *		5044420	0					
ANR	5044472	Identifier	tok		5044420	1					
ANR	5044473	Parameter	const int n	7:54:166:176	5044420	2	True				
ANR	5044474	ParameterType	const int		5044420	0					
ANR	5044475	Identifier	n		5044420	1					
ANR	5044476	CFGEntryNode	ENTRY		5044420		True				
ANR	5044477	CFGExitNode	EXIT		5044420		True				
ANR	5044478	Symbol	tok		5044420						
ANR	5044479	Symbol	r_reg_get_name_idx		5044420						
ANR	5044480	Symbol	role		5044420						
ANR	5044481	Symbol	NULL		5044420						
ANR	5044482	Symbol	reg		5044420						
ANR	5044483	Symbol	r_reg_set_name		5044420						
ANR	5044484	Symbol	* tok		5044420						
ANR	5044485	Symbol	n		5044420						
ANR	5044486	Function	parse_size	20:0:477:775							
ANR	5044487	FunctionDef	"parse_size (char * s , char * * end)"		5044486	0					
ANR	5044488	CompoundStatement		20:44:521:775	5044486	0					
ANR	5044489	IfStatement	if ( * s == '.' )		5044486	0					
ANR	5044490	Condition	* s == '.'	21:5:528:536	5044486	0	True				
ANR	5044491	EqualityExpression	* s == '.'		5044486	0		==			
ANR	5044492	UnaryOperationExpression	* s		5044486	0					
ANR	5044493	UnaryOperator	*		5044486	0					
ANR	5044494	Identifier	s		5044486	1					
ANR	5044495	PrimaryExpression	'.'		5044486	1					
ANR	5044496	CompoundStatement		2:16:17:17	5044486	1					
ANR	5044497	ReturnStatement	"return strtoul ( s + 1 , end , 10 ) ;"	22:2:543:574	5044486	0	True				
ANR	5044498	CallExpression	"strtoul ( s + 1 , end , 10 )"		5044486	0					
ANR	5044499	Callee	strtoul		5044486	0					
ANR	5044500	Identifier	strtoul		5044486	0					
ANR	5044501	ArgumentList	s + 1		5044486	1					
ANR	5044502	Argument	s + 1		5044486	0					
ANR	5044503	AdditiveExpression	s + 1		5044486	0		+			
ANR	5044504	Identifier	s		5044486	0					
ANR	5044505	PrimaryExpression	1		5044486	1					
ANR	5044506	Argument	end		5044486	1					
ANR	5044507	Identifier	end		5044486	0					
ANR	5044508	Argument	10		5044486	2					
ANR	5044509	PrimaryExpression	10		5044486	0					
ANR	5044510	IdentifierDeclStatement	"char * has_dot = strchr ( s , '.' ) ;"	24:1:580:611	5044486	1	True				
ANR	5044511	IdentifierDecl	"* has_dot = strchr ( s , '.' )"		5044486	0					
ANR	5044512	IdentifierDeclType	char *		5044486	0					
ANR	5044513	Identifier	has_dot		5044486	1					
ANR	5044514	AssignmentExpression	"* has_dot = strchr ( s , '.' )"		5044486	2		=			
ANR	5044515	Identifier	has_dot		5044486	0					
ANR	5044516	CallExpression	"strchr ( s , '.' )"		5044486	1					
ANR	5044517	Callee	strchr		5044486	0					
ANR	5044518	Identifier	strchr		5044486	0					
ANR	5044519	ArgumentList	s		5044486	1					
ANR	5044520	Argument	s		5044486	0					
ANR	5044521	Identifier	s		5044486	0					
ANR	5044522	Argument	'.'		5044486	1					
ANR	5044523	PrimaryExpression	'.'		5044486	0					
ANR	5044524	IfStatement	if ( has_dot )		5044486	2					
ANR	5044525	Condition	has_dot	25:5:618:624	5044486	0	True				
ANR	5044526	Identifier	has_dot		5044486	0					
ANR	5044527	CompoundStatement		9:2:164:198	5044486	1					
ANR	5044528	ExpressionStatement	* has_dot ++ = 0	26:2:631:645	5044486	0	True				
ANR	5044529	AssignmentExpression	* has_dot ++ = 0		5044486	0		=			
ANR	5044530	UnaryOperationExpression	* has_dot ++		5044486	0					
ANR	5044531	UnaryOperator	*		5044486	0					
ANR	5044532	PostIncDecOperationExpression	has_dot ++		5044486	1					
ANR	5044533	Identifier	has_dot		5044486	0					
ANR	5044534	IncDec	++		5044486	1					
ANR	5044535	PrimaryExpression	0		5044486	1					
ANR	5044536	IdentifierDeclStatement	"ut64 a = strtoul ( s , end , 0 ) << 3 ;"	27:2:649:682	5044486	1	True				
ANR	5044537	IdentifierDecl	"a = strtoul ( s , end , 0 ) << 3"		5044486	0					
ANR	5044538	IdentifierDeclType	ut64		5044486	0					
ANR	5044539	Identifier	a		5044486	1					
ANR	5044540	AssignmentExpression	"a = strtoul ( s , end , 0 ) << 3"		5044486	2		=			
ANR	5044541	Identifier	a		5044486	0					
ANR	5044542	ShiftExpression	"strtoul ( s , end , 0 ) << 3"		5044486	1		<<			
ANR	5044543	CallExpression	"strtoul ( s , end , 0 )"		5044486	0					
ANR	5044544	Callee	strtoul		5044486	0					
ANR	5044545	Identifier	strtoul		5044486	0					
ANR	5044546	ArgumentList	s		5044486	1					
ANR	5044547	Argument	s		5044486	0					
ANR	5044548	Identifier	s		5044486	0					
ANR	5044549	Argument	end		5044486	1					
ANR	5044550	Identifier	end		5044486	0					
ANR	5044551	Argument	0		5044486	2					
ANR	5044552	PrimaryExpression	0		5044486	0					
ANR	5044553	PrimaryExpression	3		5044486	1					
ANR	5044554	IdentifierDeclStatement	"ut64 b = strtoul ( has_dot , end , 0 ) ;"	28:2:686:720	5044486	2	True				
ANR	5044555	IdentifierDecl	"b = strtoul ( has_dot , end , 0 )"		5044486	0					
ANR	5044556	IdentifierDeclType	ut64		5044486	0					
ANR	5044557	Identifier	b		5044486	1					
ANR	5044558	AssignmentExpression	"b = strtoul ( has_dot , end , 0 )"		5044486	2		=			
ANR	5044559	Identifier	b		5044486	0					
ANR	5044560	CallExpression	"strtoul ( has_dot , end , 0 )"		5044486	1					
ANR	5044561	Callee	strtoul		5044486	0					
ANR	5044562	Identifier	strtoul		5044486	0					
ANR	5044563	ArgumentList	has_dot		5044486	1					
ANR	5044564	Argument	has_dot		5044486	0					
ANR	5044565	Identifier	has_dot		5044486	0					
ANR	5044566	Argument	end		5044486	1					
ANR	5044567	Identifier	end		5044486	0					
ANR	5044568	Argument	0		5044486	2					
ANR	5044569	PrimaryExpression	0		5044486	0					
ANR	5044570	ReturnStatement	return a + b ;	29:2:724:736	5044486	3	True				
ANR	5044571	AdditiveExpression	a + b		5044486	0		+			
ANR	5044572	Identifier	a		5044486	0					
ANR	5044573	Identifier	b		5044486	1					
ANR	5044574	ReturnStatement	"return strtoul ( s , end , 0 ) << 3 ;"	31:1:742:773	5044486	3	True				
ANR	5044575	ShiftExpression	"strtoul ( s , end , 0 ) << 3"		5044486	0		<<			
ANR	5044576	CallExpression	"strtoul ( s , end , 0 )"		5044486	0					
ANR	5044577	Callee	strtoul		5044486	0					
ANR	5044578	Identifier	strtoul		5044486	0					
ANR	5044579	ArgumentList	s		5044486	1					
ANR	5044580	Argument	s		5044486	0					
ANR	5044581	Identifier	s		5044486	0					
ANR	5044582	Argument	end		5044486	1					
ANR	5044583	Identifier	end		5044486	0					
ANR	5044584	Argument	0		5044486	2					
ANR	5044585	PrimaryExpression	0		5044486	0					
ANR	5044586	PrimaryExpression	3		5044486	1					
ANR	5044587	ReturnType	static ut64		5044486	1					
ANR	5044588	Identifier	parse_size		5044486	2					
ANR	5044589	ParameterList	"char * s , char * * end"		5044486	3					
ANR	5044590	Parameter	char * s	20:23:500:506	5044486	0	True				
ANR	5044591	ParameterType	char *		5044486	0					
ANR	5044592	Identifier	s		5044486	1					
ANR	5044593	Parameter	char * * end	20:32:509:518	5044486	1	True				
ANR	5044594	ParameterType	char * *		5044486	0					
ANR	5044595	Identifier	end		5044486	1					
ANR	5044596	CFGEntryNode	ENTRY		5044486		True				
ANR	5044597	CFGExitNode	EXIT		5044486		True				
ANR	5044598	Symbol	a		5044486						
ANR	5044599	Symbol	b		5044486						
ANR	5044600	Symbol	s		5044486						
ANR	5044601	Symbol	strtoul		5044486						
ANR	5044602	Symbol	strchr		5044486						
ANR	5044603	Symbol	end		5044486						
ANR	5044604	Symbol	has_dot		5044486						
ANR	5044605	Symbol	* s		5044486						
ANR	5044606	Symbol	* has_dot ++		5044486						
ANR	5044607	Function	parse_def	34:0:778:2968							
ANR	5044608	FunctionDef	"parse_def (RReg * reg , char * * tok , const int n)"		5044607	0					
ANR	5044609	CompoundStatement		34:65:843:2968	5044607	0					
ANR	5044610	IdentifierDeclStatement	char * end ;	35:1:846:855	5044607	0	True				
ANR	5044611	IdentifierDecl	* end		5044607	0					
ANR	5044612	IdentifierDeclType	char *		5044607	0					
ANR	5044613	Identifier	end		5044607	1					
ANR	5044614	IdentifierDeclStatement	"int type , type2 ;"	36:1:858:873	5044607	1	True				
ANR	5044615	IdentifierDecl	type		5044607	0					
ANR	5044616	IdentifierDeclType	int		5044607	0					
ANR	5044617	Identifier	type		5044607	1					
ANR	5044618	IdentifierDecl	type2		5044607	1					
ANR	5044619	IdentifierDeclType	int		5044607	0					
ANR	5044620	Identifier	type2		5044607	1					
ANR	5044621	IfStatement	if ( n != 5 && n != 6 )		5044607	2					
ANR	5044622	Condition	n != 5 && n != 6	38:5:881:896	5044607	0	True				
ANR	5044623	AndExpression	n != 5 && n != 6		5044607	0		&&			
ANR	5044624	EqualityExpression	n != 5		5044607	0		!=			
ANR	5044625	Identifier	n		5044607	0					
ANR	5044626	PrimaryExpression	5		5044607	1					
ANR	5044627	EqualityExpression	n != 6		5044607	1		!=			
ANR	5044628	Identifier	n		5044607	0					
ANR	5044629	PrimaryExpression	6		5044607	1					
ANR	5044630	CompoundStatement		5:23:55:55	5044607	1					
ANR	5044631	ReturnStatement	"return ""Invalid syntax: Wrong number of columns"" ;"	39:2:903:951	5044607	0	True				
ANR	5044632	PrimaryExpression	"""Invalid syntax: Wrong number of columns"""		5044607	0					
ANR	5044633	IdentifierDeclStatement	"char * p = strchr ( tok [ 0 ] , '@' ) ;"	41:1:957:987	5044607	3	True				
ANR	5044634	IdentifierDecl	"* p = strchr ( tok [ 0 ] , '@' )"		5044607	0					
ANR	5044635	IdentifierDeclType	char *		5044607	0					
ANR	5044636	Identifier	p		5044607	1					
ANR	5044637	AssignmentExpression	"* p = strchr ( tok [ 0 ] , '@' )"		5044607	2		=			
ANR	5044638	Identifier	p		5044607	0					
ANR	5044639	CallExpression	"strchr ( tok [ 0 ] , '@' )"		5044607	1					
ANR	5044640	Callee	strchr		5044607	0					
ANR	5044641	Identifier	strchr		5044607	0					
ANR	5044642	ArgumentList	tok [ 0 ]		5044607	1					
ANR	5044643	Argument	tok [ 0 ]		5044607	0					
ANR	5044644	ArrayIndexing	tok [ 0 ]		5044607	0					
ANR	5044645	Identifier	tok		5044607	0					
ANR	5044646	PrimaryExpression	0		5044607	1					
ANR	5044647	Argument	'@'		5044607	1					
ANR	5044648	PrimaryExpression	'@'		5044607	0					
ANR	5044649	IfStatement	if ( p )		5044607	4					
ANR	5044650	Condition	p	42:5:994:994	5044607	0	True				
ANR	5044651	Identifier	p		5044607	0					
ANR	5044652	CompoundStatement		11:2:189:219	5044607	1					
ANR	5044653	IdentifierDeclStatement	char * tok0 = strdup ( tok [ 0 ] ) ;	43:2:1001:1029	5044607	0	True				
ANR	5044654	IdentifierDecl	* tok0 = strdup ( tok [ 0 ] )		5044607	0					
ANR	5044655	IdentifierDeclType	char *		5044607	0					
ANR	5044656	Identifier	tok0		5044607	1					
ANR	5044657	AssignmentExpression	* tok0 = strdup ( tok [ 0 ] )		5044607	2		=			
ANR	5044658	Identifier	tok0		5044607	0					
ANR	5044659	CallExpression	strdup ( tok [ 0 ] )		5044607	1					
ANR	5044660	Callee	strdup		5044607	0					
ANR	5044661	Identifier	strdup		5044607	0					
ANR	5044662	ArgumentList	tok [ 0 ]		5044607	1					
ANR	5044663	Argument	tok [ 0 ]		5044607	0					
ANR	5044664	ArrayIndexing	tok [ 0 ]		5044607	0					
ANR	5044665	Identifier	tok		5044607	0					
ANR	5044666	PrimaryExpression	0		5044607	1					
ANR	5044667	IdentifierDeclStatement	char * at = tok0 + ( p - tok [ 0 ] ) ;	44:2:1033:1063	5044607	1	True				
ANR	5044668	IdentifierDecl	* at = tok0 + ( p - tok [ 0 ] )		5044607	0					
ANR	5044669	IdentifierDeclType	char *		5044607	0					
ANR	5044670	Identifier	at		5044607	1					
ANR	5044671	AssignmentExpression	* at = tok0 + ( p - tok [ 0 ] )		5044607	2		=			
ANR	5044672	Identifier	at		5044607	0					
ANR	5044673	AdditiveExpression	tok0 + ( p - tok [ 0 ] )		5044607	1		+			
ANR	5044674	Identifier	tok0		5044607	0					
ANR	5044675	AdditiveExpression	p - tok [ 0 ]		5044607	1		-			
ANR	5044676	Identifier	p		5044607	0					
ANR	5044677	ArrayIndexing	tok [ 0 ]		5044607	1					
ANR	5044678	Identifier	tok		5044607	0					
ANR	5044679	PrimaryExpression	0		5044607	1					
ANR	5044680	ExpressionStatement	* at ++ = 0	45:2:1067:1076	5044607	2	True				
ANR	5044681	AssignmentExpression	* at ++ = 0		5044607	0		=			
ANR	5044682	UnaryOperationExpression	* at ++		5044607	0					
ANR	5044683	UnaryOperator	*		5044607	0					
ANR	5044684	PostIncDecOperationExpression	at ++		5044607	1					
ANR	5044685	Identifier	at		5044607	0					
ANR	5044686	IncDec	++		5044607	1					
ANR	5044687	PrimaryExpression	0		5044607	1					
ANR	5044688	ExpressionStatement	type = r_reg_type_by_name ( tok0 )	46:2:1080:1112	5044607	3	True				
ANR	5044689	AssignmentExpression	type = r_reg_type_by_name ( tok0 )		5044607	0		=			
ANR	5044690	Identifier	type		5044607	0					
ANR	5044691	CallExpression	r_reg_type_by_name ( tok0 )		5044607	1					
ANR	5044692	Callee	r_reg_type_by_name		5044607	0					
ANR	5044693	Identifier	r_reg_type_by_name		5044607	0					
ANR	5044694	ArgumentList	tok0		5044607	1					
ANR	5044695	Argument	tok0		5044607	0					
ANR	5044696	Identifier	tok0		5044607	0					
ANR	5044697	ExpressionStatement	type2 = r_reg_type_by_name ( at )	47:2:1116:1147	5044607	4	True				
ANR	5044698	AssignmentExpression	type2 = r_reg_type_by_name ( at )		5044607	0		=			
ANR	5044699	Identifier	type2		5044607	0					
ANR	5044700	CallExpression	r_reg_type_by_name ( at )		5044607	1					
ANR	5044701	Callee	r_reg_type_by_name		5044607	0					
ANR	5044702	Identifier	r_reg_type_by_name		5044607	0					
ANR	5044703	ArgumentList	at		5044607	1					
ANR	5044704	Argument	at		5044607	0					
ANR	5044705	Identifier	at		5044607	0					
ANR	5044706	ExpressionStatement	free ( tok0 )	48:2:1151:1162	5044607	5	True				
ANR	5044707	CallExpression	free ( tok0 )		5044607	0					
ANR	5044708	Callee	free		5044607	0					
ANR	5044709	Identifier	free		5044607	0					
ANR	5044710	ArgumentList	tok0		5044607	1					
ANR	5044711	Argument	tok0		5044607	0					
ANR	5044712	Identifier	tok0		5044607	0					
ANR	5044713	ElseStatement	else		5044607	0					
ANR	5044714	CompoundStatement		16:8:328:328	5044607	0					
ANR	5044715	ExpressionStatement	type2 = type = r_reg_type_by_name ( tok [ 0 ] )	50:2:1176:1218	5044607	0	True				
ANR	5044716	AssignmentExpression	type2 = type = r_reg_type_by_name ( tok [ 0 ] )		5044607	0		=			
ANR	5044717	Identifier	type2		5044607	0					
ANR	5044718	AssignmentExpression	type = r_reg_type_by_name ( tok [ 0 ] )		5044607	1		=			
ANR	5044719	Identifier	type		5044607	0					
ANR	5044720	CallExpression	r_reg_type_by_name ( tok [ 0 ] )		5044607	1					
ANR	5044721	Callee	r_reg_type_by_name		5044607	0					
ANR	5044722	Identifier	r_reg_type_by_name		5044607	0					
ANR	5044723	ArgumentList	tok [ 0 ]		5044607	1					
ANR	5044724	Argument	tok [ 0 ]		5044607	0					
ANR	5044725	ArrayIndexing	tok [ 0 ]		5044607	0					
ANR	5044726	Identifier	tok		5044607	0					
ANR	5044727	PrimaryExpression	0		5044607	1					
ANR	5044728	IfStatement	if ( type == R_REG_TYPE_FLG )		5044607	1					
ANR	5044729	Condition	type == R_REG_TYPE_FLG	52:6:1277:1298	5044607	0	True				
ANR	5044730	EqualityExpression	type == R_REG_TYPE_FLG		5044607	0		==			
ANR	5044731	Identifier	type		5044607	0					
ANR	5044732	Identifier	R_REG_TYPE_FLG		5044607	1					
ANR	5044733	CompoundStatement		19:30:457:457	5044607	1					
ANR	5044734	ExpressionStatement	type2 = R_REG_TYPE_GPR	53:3:1306:1328	5044607	0	True				
ANR	5044735	AssignmentExpression	type2 = R_REG_TYPE_GPR		5044607	0		=			
ANR	5044736	Identifier	type2		5044607	0					
ANR	5044737	Identifier	R_REG_TYPE_GPR		5044607	1					
ANR	5044738	IfStatement	if ( type < 0 || type2 < 0 )		5044607	5					
ANR	5044739	Condition	type < 0 || type2 < 0	56:5:1342:1362	5044607	0	True				
ANR	5044740	OrExpression	type < 0 || type2 < 0		5044607	0		||			
ANR	5044741	RelationalExpression	type < 0		5044607	0		<			
ANR	5044742	Identifier	type		5044607	0					
ANR	5044743	PrimaryExpression	0		5044607	1					
ANR	5044744	RelationalExpression	type2 < 0		5044607	1		<			
ANR	5044745	Identifier	type2		5044607	0					
ANR	5044746	PrimaryExpression	0		5044607	1					
ANR	5044747	CompoundStatement		23:28:521:521	5044607	1					
ANR	5044748	ReturnStatement	"return ""Invalid register type"" ;"	57:2:1369:1399	5044607	0	True				
ANR	5044749	PrimaryExpression	"""Invalid register type"""		5044607	0					
ANR	5044750	IfStatement	"if ( r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL ) )"		5044607	6					
ANR	5044751	Condition	"r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL )"	60:5:1415:1453	5044607	0	True				
ANR	5044752	CallExpression	"r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL )"		5044607	0					
ANR	5044753	Callee	r_reg_get		5044607	0					
ANR	5044754	Identifier	r_reg_get		5044607	0					
ANR	5044755	ArgumentList	reg		5044607	1					
ANR	5044756	Argument	reg		5044607	0					
ANR	5044757	Identifier	reg		5044607	0					
ANR	5044758	Argument	tok [ 1 ]		5044607	1					
ANR	5044759	ArrayIndexing	tok [ 1 ]		5044607	0					
ANR	5044760	Identifier	tok		5044607	0					
ANR	5044761	PrimaryExpression	1		5044607	1					
ANR	5044762	Argument	R_REG_TYPE_ALL		5044607	2					
ANR	5044763	Identifier	R_REG_TYPE_ALL		5044607	0					
ANR	5044764	CompoundStatement		27:46:612:612	5044607	1					
ANR	5044765	ExpressionStatement	"eprintf ( ""Ignoring duplicated register definition '%s'\\n"" , tok [ 1 ] )"	61:2:1460:1526	5044607	0	True				
ANR	5044766	CallExpression	"eprintf ( ""Ignoring duplicated register definition '%s'\\n"" , tok [ 1 ] )"		5044607	0					
ANR	5044767	Callee	eprintf		5044607	0					
ANR	5044768	Identifier	eprintf		5044607	0					
ANR	5044769	ArgumentList	"""Ignoring duplicated register definition '%s'\\n"""		5044607	1					
ANR	5044770	Argument	"""Ignoring duplicated register definition '%s'\\n"""		5044607	0					
ANR	5044771	PrimaryExpression	"""Ignoring duplicated register definition '%s'\\n"""		5044607	0					
ANR	5044772	Argument	tok [ 1 ]		5044607	1					
ANR	5044773	ArrayIndexing	tok [ 1 ]		5044607	0					
ANR	5044774	Identifier	tok		5044607	0					
ANR	5044775	PrimaryExpression	1		5044607	1					
ANR	5044776	ReturnStatement	return NULL ;	62:2:1530:1541	5044607	1	True				
ANR	5044777	Identifier	NULL		5044607	0					
ANR	5044778	IdentifierDeclStatement	RRegItem * item = R_NEW0 ( RRegItem ) ;	67:1:1599:1633	5044607	7	True				
ANR	5044779	IdentifierDecl	* item = R_NEW0 ( RRegItem )		5044607	0					
ANR	5044780	IdentifierDeclType	RRegItem *		5044607	0					
ANR	5044781	Identifier	item		5044607	1					
ANR	5044782	AssignmentExpression	* item = R_NEW0 ( RRegItem )		5044607	2		=			
ANR	5044783	Identifier	item		5044607	0					
ANR	5044784	CallExpression	R_NEW0 ( RRegItem )		5044607	1					
ANR	5044785	Callee	R_NEW0		5044607	0					
ANR	5044786	Identifier	R_NEW0		5044607	0					
ANR	5044787	ArgumentList	RRegItem		5044607	1					
ANR	5044788	Argument	RRegItem		5044607	0					
ANR	5044789	Identifier	RRegItem		5044607	0					
ANR	5044790	IfStatement	if ( ! item )		5044607	8					
ANR	5044791	Condition	! item	68:5:1640:1644	5044607	0	True				
ANR	5044792	UnaryOperationExpression	! item		5044607	0					
ANR	5044793	UnaryOperator	!		5044607	0					
ANR	5044794	Identifier	item		5044607	1					
ANR	5044795	CompoundStatement		35:12:803:803	5044607	1					
ANR	5044796	ReturnStatement	"return ""Unable to allocate memory"" ;"	69:2:1651:1685	5044607	0	True				
ANR	5044797	PrimaryExpression	"""Unable to allocate memory"""		5044607	0					
ANR	5044798	ExpressionStatement	item -> type = type	72:1:1692:1709	5044607	9	True				
ANR	5044799	AssignmentExpression	item -> type = type		5044607	0		=			
ANR	5044800	PtrMemberAccess	item -> type		5044607	0					
ANR	5044801	Identifier	item		5044607	0					
ANR	5044802	Identifier	type		5044607	1					
ANR	5044803	Identifier	type		5044607	1					
ANR	5044804	ExpressionStatement	item -> name = strdup ( tok [ 1 ] )	73:1:1712:1740	5044607	10	True				
ANR	5044805	AssignmentExpression	item -> name = strdup ( tok [ 1 ] )		5044607	0		=			
ANR	5044806	PtrMemberAccess	item -> name		5044607	0					
ANR	5044807	Identifier	item		5044607	0					
ANR	5044808	Identifier	name		5044607	1					
ANR	5044809	CallExpression	strdup ( tok [ 1 ] )		5044607	1					
ANR	5044810	Callee	strdup		5044607	0					
ANR	5044811	Identifier	strdup		5044607	0					
ANR	5044812	ArgumentList	tok [ 1 ]		5044607	1					
ANR	5044813	Argument	tok [ 1 ]		5044607	0					
ANR	5044814	ArrayIndexing	tok [ 1 ]		5044607	0					
ANR	5044815	Identifier	tok		5044607	0					
ANR	5044816	PrimaryExpression	1		5044607	1					
ANR	5044817	ExpressionStatement	"item -> size = parse_size ( tok [ 2 ] , & end )"	75:1:1794:1832	5044607	11	True				
ANR	5044818	AssignmentExpression	"item -> size = parse_size ( tok [ 2 ] , & end )"		5044607	0		=			
ANR	5044819	PtrMemberAccess	item -> size		5044607	0					
ANR	5044820	Identifier	item		5044607	0					
ANR	5044821	Identifier	size		5044607	1					
ANR	5044822	CallExpression	"parse_size ( tok [ 2 ] , & end )"		5044607	1					
ANR	5044823	Callee	parse_size		5044607	0					
ANR	5044824	Identifier	parse_size		5044607	0					
ANR	5044825	ArgumentList	tok [ 2 ]		5044607	1					
ANR	5044826	Argument	tok [ 2 ]		5044607	0					
ANR	5044827	ArrayIndexing	tok [ 2 ]		5044607	0					
ANR	5044828	Identifier	tok		5044607	0					
ANR	5044829	PrimaryExpression	2		5044607	1					
ANR	5044830	Argument	& end		5044607	1					
ANR	5044831	UnaryOperationExpression	& end		5044607	0					
ANR	5044832	UnaryOperator	&		5044607	0					
ANR	5044833	Identifier	end		5044607	1					
ANR	5044834	IfStatement	if ( * end != '\\0' || ! item -> size )		5044607	12					
ANR	5044835	Condition	* end != '\\0' || ! item -> size	76:5:1839:1865	5044607	0	True				
ANR	5044836	OrExpression	* end != '\\0' || ! item -> size		5044607	0		||			
ANR	5044837	EqualityExpression	* end != '\\0'		5044607	0		!=			
ANR	5044838	UnaryOperationExpression	* end		5044607	0					
ANR	5044839	UnaryOperator	*		5044607	0					
ANR	5044840	Identifier	end		5044607	1					
ANR	5044841	PrimaryExpression	'\\0'		5044607	1					
ANR	5044842	UnaryOperationExpression	! item -> size		5044607	1					
ANR	5044843	UnaryOperator	!		5044607	0					
ANR	5044844	PtrMemberAccess	item -> size		5044607	1					
ANR	5044845	Identifier	item		5044607	0					
ANR	5044846	Identifier	size		5044607	1					
ANR	5044847	CompoundStatement		43:34:1024:1024	5044607	1					
ANR	5044848	ExpressionStatement	r_reg_item_free ( item )	77:2:1872:1894	5044607	0	True				
ANR	5044849	CallExpression	r_reg_item_free ( item )		5044607	0					
ANR	5044850	Callee	r_reg_item_free		5044607	0					
ANR	5044851	Identifier	r_reg_item_free		5044607	0					
ANR	5044852	ArgumentList	item		5044607	1					
ANR	5044853	Argument	item		5044607	0					
ANR	5044854	Identifier	item		5044607	0					
ANR	5044855	ReturnStatement	"return ""Invalid size"" ;"	78:2:1898:1919	5044607	1	True				
ANR	5044856	PrimaryExpression	"""Invalid size"""		5044607	0					
ANR	5044857	IfStatement	"if ( ! strcmp ( tok [ 3 ] , ""?"" ) )"		5044607	13					
ANR	5044858	Condition	"! strcmp ( tok [ 3 ] , ""?"" )"	80:5:1929:1949	5044607	0	True				
ANR	5044859	UnaryOperationExpression	"! strcmp ( tok [ 3 ] , ""?"" )"		5044607	0					
ANR	5044860	UnaryOperator	!		5044607	0					
ANR	5044861	CallExpression	"strcmp ( tok [ 3 ] , ""?"" )"		5044607	1					
ANR	5044862	Callee	strcmp		5044607	0					
ANR	5044863	Identifier	strcmp		5044607	0					
ANR	5044864	ArgumentList	tok [ 3 ]		5044607	1					
ANR	5044865	Argument	tok [ 3 ]		5044607	0					
ANR	5044866	ArrayIndexing	tok [ 3 ]		5044607	0					
ANR	5044867	Identifier	tok		5044607	0					
ANR	5044868	PrimaryExpression	3		5044607	1					
ANR	5044869	Argument	"""?"""		5044607	1					
ANR	5044870	PrimaryExpression	"""?"""		5044607	0					
ANR	5044871	CompoundStatement		47:28:1108:1108	5044607	1					
ANR	5044872	ExpressionStatement	item -> offset = - 1	81:2:1956:1973	5044607	0	True				
ANR	5044873	AssignmentExpression	item -> offset = - 1		5044607	0		=			
ANR	5044874	PtrMemberAccess	item -> offset		5044607	0					
ANR	5044875	Identifier	item		5044607	0					
ANR	5044876	Identifier	offset		5044607	1					
ANR	5044877	UnaryOperationExpression	- 1		5044607	1					
ANR	5044878	UnaryOperator	-		5044607	0					
ANR	5044879	PrimaryExpression	1		5044607	1					
ANR	5044880	ElseStatement	else		5044607	0					
ANR	5044881	CompoundStatement		49:8:1139:1139	5044607	0					
ANR	5044882	ExpressionStatement	"item -> offset = parse_size ( tok [ 3 ] , & end )"	83:2:1987:2027	5044607	0	True				
ANR	5044883	AssignmentExpression	"item -> offset = parse_size ( tok [ 3 ] , & end )"		5044607	0		=			
ANR	5044884	PtrMemberAccess	item -> offset		5044607	0					
ANR	5044885	Identifier	item		5044607	0					
ANR	5044886	Identifier	offset		5044607	1					
ANR	5044887	CallExpression	"parse_size ( tok [ 3 ] , & end )"		5044607	1					
ANR	5044888	Callee	parse_size		5044607	0					
ANR	5044889	Identifier	parse_size		5044607	0					
ANR	5044890	ArgumentList	tok [ 3 ]		5044607	1					
ANR	5044891	Argument	tok [ 3 ]		5044607	0					
ANR	5044892	ArrayIndexing	tok [ 3 ]		5044607	0					
ANR	5044893	Identifier	tok		5044607	0					
ANR	5044894	PrimaryExpression	3		5044607	1					
ANR	5044895	Argument	& end		5044607	1					
ANR	5044896	UnaryOperationExpression	& end		5044607	0					
ANR	5044897	UnaryOperator	&		5044607	0					
ANR	5044898	Identifier	end		5044607	1					
ANR	5044899	IfStatement	if ( * end != '\\0' )		5044607	14					
ANR	5044900	Condition	* end != '\\0'	85:5:2037:2048	5044607	0	True				
ANR	5044901	EqualityExpression	* end != '\\0'		5044607	0		!=			
ANR	5044902	UnaryOperationExpression	* end		5044607	0					
ANR	5044903	UnaryOperator	*		5044607	0					
ANR	5044904	Identifier	end		5044607	1					
ANR	5044905	PrimaryExpression	'\\0'		5044607	1					
ANR	5044906	CompoundStatement		52:19:1207:1207	5044607	1					
ANR	5044907	ExpressionStatement	r_reg_item_free ( item )	86:2:2055:2077	5044607	0	True				
ANR	5044908	CallExpression	r_reg_item_free ( item )		5044607	0					
ANR	5044909	Callee	r_reg_item_free		5044607	0					
ANR	5044910	Identifier	r_reg_item_free		5044607	0					
ANR	5044911	ArgumentList	item		5044607	1					
ANR	5044912	Argument	item		5044607	0					
ANR	5044913	Identifier	item		5044607	0					
ANR	5044914	ReturnStatement	"return ""Invalid offset"" ;"	87:2:2081:2104	5044607	1	True				
ANR	5044915	PrimaryExpression	"""Invalid offset"""		5044607	0					
ANR	5044916	ExpressionStatement	"item -> packed_size = parse_size ( tok [ 4 ] , & end )"	89:1:2110:2155	5044607	15	True				
ANR	5044917	AssignmentExpression	"item -> packed_size = parse_size ( tok [ 4 ] , & end )"		5044607	0		=			
ANR	5044918	PtrMemberAccess	item -> packed_size		5044607	0					
ANR	5044919	Identifier	item		5044607	0					
ANR	5044920	Identifier	packed_size		5044607	1					
ANR	5044921	CallExpression	"parse_size ( tok [ 4 ] , & end )"		5044607	1					
ANR	5044922	Callee	parse_size		5044607	0					
ANR	5044923	Identifier	parse_size		5044607	0					
ANR	5044924	ArgumentList	tok [ 4 ]		5044607	1					
ANR	5044925	Argument	tok [ 4 ]		5044607	0					
ANR	5044926	ArrayIndexing	tok [ 4 ]		5044607	0					
ANR	5044927	Identifier	tok		5044607	0					
ANR	5044928	PrimaryExpression	4		5044607	1					
ANR	5044929	Argument	& end		5044607	1					
ANR	5044930	UnaryOperationExpression	& end		5044607	0					
ANR	5044931	UnaryOperator	&		5044607	0					
ANR	5044932	Identifier	end		5044607	1					
ANR	5044933	IfStatement	if ( * end != '\\0' )		5044607	16					
ANR	5044934	Condition	* end != '\\0'	90:5:2162:2173	5044607	0	True				
ANR	5044935	EqualityExpression	* end != '\\0'		5044607	0		!=			
ANR	5044936	UnaryOperationExpression	* end		5044607	0					
ANR	5044937	UnaryOperator	*		5044607	0					
ANR	5044938	Identifier	end		5044607	1					
ANR	5044939	PrimaryExpression	'\\0'		5044607	1					
ANR	5044940	CompoundStatement		57:19:1332:1332	5044607	1					
ANR	5044941	ExpressionStatement	r_reg_item_free ( item )	91:2:2180:2202	5044607	0	True				
ANR	5044942	CallExpression	r_reg_item_free ( item )		5044607	0					
ANR	5044943	Callee	r_reg_item_free		5044607	0					
ANR	5044944	Identifier	r_reg_item_free		5044607	0					
ANR	5044945	ArgumentList	item		5044607	1					
ANR	5044946	Argument	item		5044607	0					
ANR	5044947	Identifier	item		5044607	0					
ANR	5044948	ReturnStatement	"return ""Invalid packed size"" ;"	92:2:2206:2234	5044607	1	True				
ANR	5044949	PrimaryExpression	"""Invalid packed size"""		5044607	0					
ANR	5044950	ExpressionStatement	reg -> bits |= item -> size	96:1:2296:2319	5044607	17	True				
ANR	5044951	AssignmentExpression	reg -> bits |= item -> size		5044607	0		|=			
ANR	5044952	PtrMemberAccess	reg -> bits		5044607	0					
ANR	5044953	Identifier	reg		5044607	0					
ANR	5044954	Identifier	bits		5044607	1					
ANR	5044955	PtrMemberAccess	item -> size		5044607	1					
ANR	5044956	Identifier	item		5044607	0					
ANR	5044957	Identifier	size		5044607	1					
ANR	5044958	IfStatement	if ( n == 6 )		5044607	18					
ANR	5044959	Condition	n == 6	99:5:2348:2353	5044607	0	True				
ANR	5044960	EqualityExpression	n == 6		5044607	0		==			
ANR	5044961	Identifier	n		5044607	0					
ANR	5044962	PrimaryExpression	6		5044607	1					
ANR	5044963	CompoundStatement		66:13:1512:1512	5044607	1					
ANR	5044964	ExpressionStatement	item -> flags = strdup ( tok [ 5 ] )	100:2:2360:2389	5044607	0	True				
ANR	5044965	AssignmentExpression	item -> flags = strdup ( tok [ 5 ] )		5044607	0		=			
ANR	5044966	PtrMemberAccess	item -> flags		5044607	0					
ANR	5044967	Identifier	item		5044607	0					
ANR	5044968	Identifier	flags		5044607	1					
ANR	5044969	CallExpression	strdup ( tok [ 5 ] )		5044607	1					
ANR	5044970	Callee	strdup		5044607	0					
ANR	5044971	Identifier	strdup		5044607	0					
ANR	5044972	ArgumentList	tok [ 5 ]		5044607	1					
ANR	5044973	Argument	tok [ 5 ]		5044607	0					
ANR	5044974	ArrayIndexing	tok [ 5 ]		5044607	0					
ANR	5044975	Identifier	tok		5044607	0					
ANR	5044976	PrimaryExpression	5		5044607	1					
ANR	5044977	ExpressionStatement	item -> arena = type2	103:1:2396:2415	5044607	19	True				
ANR	5044978	AssignmentExpression	item -> arena = type2		5044607	0		=			
ANR	5044979	PtrMemberAccess	item -> arena		5044607	0					
ANR	5044980	Identifier	item		5044607	0					
ANR	5044981	Identifier	arena		5044607	1					
ANR	5044982	Identifier	type2		5044607	1					
ANR	5044983	IfStatement	if ( ! reg -> regset [ type2 ] . regs )		5044607	20					
ANR	5044984	Condition	! reg -> regset [ type2 ] . regs	104:5:2422:2445	5044607	0	True				
ANR	5044985	UnaryOperationExpression	! reg -> regset [ type2 ] . regs		5044607	0					
ANR	5044986	UnaryOperator	!		5044607	0					
ANR	5044987	MemberAccess	reg -> regset [ type2 ] . regs		5044607	1					
ANR	5044988	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5044989	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5044990	Identifier	reg		5044607	0					
ANR	5044991	Identifier	regset		5044607	1					
ANR	5044992	Identifier	type2		5044607	1					
ANR	5044993	Identifier	regs		5044607	1					
ANR	5044994	CompoundStatement		71:31:1604:1604	5044607	1					
ANR	5044995	ExpressionStatement	reg -> regset [ type2 ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )	105:2:2452:2518	5044607	0	True				
ANR	5044996	AssignmentExpression	reg -> regset [ type2 ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )		5044607	0		=			
ANR	5044997	MemberAccess	reg -> regset [ type2 ] . regs		5044607	0					
ANR	5044998	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5044999	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045000	Identifier	reg		5044607	0					
ANR	5045001	Identifier	regset		5044607	1					
ANR	5045002	Identifier	type2		5044607	1					
ANR	5045003	Identifier	regs		5044607	1					
ANR	5045004	CallExpression	r_list_newf ( ( RListFree ) r_reg_item_free )		5044607	1					
ANR	5045005	Callee	r_list_newf		5044607	0					
ANR	5045006	Identifier	r_list_newf		5044607	0					
ANR	5045007	ArgumentList	( RListFree ) r_reg_item_free		5044607	1					
ANR	5045008	Argument	( RListFree ) r_reg_item_free		5044607	0					
ANR	5045009	CastExpression	( RListFree ) r_reg_item_free		5044607	0					
ANR	5045010	CastTarget	RListFree		5044607	0					
ANR	5045011	Identifier	r_reg_item_free		5044607	1					
ANR	5045012	ExpressionStatement	"r_list_append ( reg -> regset [ type2 ] . regs , item )"	107:1:2524:2569	5044607	21	True				
ANR	5045013	CallExpression	"r_list_append ( reg -> regset [ type2 ] . regs , item )"		5044607	0					
ANR	5045014	Callee	r_list_append		5044607	0					
ANR	5045015	Identifier	r_list_append		5044607	0					
ANR	5045016	ArgumentList	reg -> regset [ type2 ] . regs		5044607	1					
ANR	5045017	Argument	reg -> regset [ type2 ] . regs		5044607	0					
ANR	5045018	MemberAccess	reg -> regset [ type2 ] . regs		5044607	0					
ANR	5045019	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5045020	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045021	Identifier	reg		5044607	0					
ANR	5045022	Identifier	regset		5044607	1					
ANR	5045023	Identifier	type2		5044607	1					
ANR	5045024	Identifier	regs		5044607	1					
ANR	5045025	Argument	item		5044607	1					
ANR	5045026	Identifier	item		5044607	0					
ANR	5045027	IfStatement	if ( ! reg -> regset [ type2 ] . ht_regs )		5044607	22					
ANR	5045028	Condition	! reg -> regset [ type2 ] . ht_regs	108:5:2576:2602	5044607	0	True				
ANR	5045029	UnaryOperationExpression	! reg -> regset [ type2 ] . ht_regs		5044607	0					
ANR	5045030	UnaryOperator	!		5044607	0					
ANR	5045031	MemberAccess	reg -> regset [ type2 ] . ht_regs		5044607	1					
ANR	5045032	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5045033	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045034	Identifier	reg		5044607	0					
ANR	5045035	Identifier	regset		5044607	1					
ANR	5045036	Identifier	type2		5044607	1					
ANR	5045037	Identifier	ht_regs		5044607	1					
ANR	5045038	CompoundStatement		75:34:1761:1761	5044607	1					
ANR	5045039	ExpressionStatement	reg -> regset [ type2 ] . ht_regs = ht_pp_new0 ( )	109:2:2609:2651	5044607	0	True				
ANR	5045040	AssignmentExpression	reg -> regset [ type2 ] . ht_regs = ht_pp_new0 ( )		5044607	0		=			
ANR	5045041	MemberAccess	reg -> regset [ type2 ] . ht_regs		5044607	0					
ANR	5045042	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5045043	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045044	Identifier	reg		5044607	0					
ANR	5045045	Identifier	regset		5044607	1					
ANR	5045046	Identifier	type2		5044607	1					
ANR	5045047	Identifier	ht_regs		5044607	1					
ANR	5045048	CallExpression	ht_pp_new0 ( )		5044607	1					
ANR	5045049	Callee	ht_pp_new0		5044607	0					
ANR	5045050	Identifier	ht_pp_new0		5044607	0					
ANR	5045051	ArgumentList			5044607	1					
ANR	5045052	ExpressionStatement	"ht_pp_insert ( reg -> regset [ type2 ] . ht_regs , item -> name , item )"	111:1:2657:2716	5044607	23	True				
ANR	5045053	CallExpression	"ht_pp_insert ( reg -> regset [ type2 ] . ht_regs , item -> name , item )"		5044607	0					
ANR	5045054	Callee	ht_pp_insert		5044607	0					
ANR	5045055	Identifier	ht_pp_insert		5044607	0					
ANR	5045056	ArgumentList	reg -> regset [ type2 ] . ht_regs		5044607	1					
ANR	5045057	Argument	reg -> regset [ type2 ] . ht_regs		5044607	0					
ANR	5045058	MemberAccess	reg -> regset [ type2 ] . ht_regs		5044607	0					
ANR	5045059	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5045060	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045061	Identifier	reg		5044607	0					
ANR	5045062	Identifier	regset		5044607	1					
ANR	5045063	Identifier	type2		5044607	1					
ANR	5045064	Identifier	ht_regs		5044607	1					
ANR	5045065	Argument	item -> name		5044607	1					
ANR	5045066	PtrMemberAccess	item -> name		5044607	0					
ANR	5045067	Identifier	item		5044607	0					
ANR	5045068	Identifier	name		5044607	1					
ANR	5045069	Argument	item		5044607	2					
ANR	5045070	Identifier	item		5044607	0					
ANR	5045071	IfStatement	if ( item -> offset + item -> size > reg -> size )		5044607	24					
ANR	5045072	Condition	item -> offset + item -> size > reg -> size	114:5:2760:2796	5044607	0	True				
ANR	5045073	RelationalExpression	item -> offset + item -> size > reg -> size		5044607	0		>			
ANR	5045074	AdditiveExpression	item -> offset + item -> size		5044607	0		+			
ANR	5045075	PtrMemberAccess	item -> offset		5044607	0					
ANR	5045076	Identifier	item		5044607	0					
ANR	5045077	Identifier	offset		5044607	1					
ANR	5045078	PtrMemberAccess	item -> size		5044607	1					
ANR	5045079	Identifier	item		5044607	0					
ANR	5045080	Identifier	size		5044607	1					
ANR	5045081	PtrMemberAccess	reg -> size		5044607	1					
ANR	5045082	Identifier	reg		5044607	0					
ANR	5045083	Identifier	size		5044607	1					
ANR	5045084	CompoundStatement		81:44:1955:1955	5044607	1					
ANR	5045085	ExpressionStatement	reg -> size = item -> offset + item -> size	115:2:2803:2840	5044607	0	True				
ANR	5045086	AssignmentExpression	reg -> size = item -> offset + item -> size		5044607	0		=			
ANR	5045087	PtrMemberAccess	reg -> size		5044607	0					
ANR	5045088	Identifier	reg		5044607	0					
ANR	5045089	Identifier	size		5044607	1					
ANR	5045090	AdditiveExpression	item -> offset + item -> size		5044607	1		+			
ANR	5045091	PtrMemberAccess	item -> offset		5044607	0					
ANR	5045092	Identifier	item		5044607	0					
ANR	5045093	Identifier	offset		5044607	1					
ANR	5045094	PtrMemberAccess	item -> size		5044607	1					
ANR	5045095	Identifier	item		5044607	0					
ANR	5045096	Identifier	size		5044607	1					
ANR	5045097	ExpressionStatement	reg -> regset [ type2 ] . maskregstype |= ( ( int ) 1 << type )	118:1:2901:2952	5044607	25	True				
ANR	5045098	AssignmentExpression	reg -> regset [ type2 ] . maskregstype |= ( ( int ) 1 << type )		5044607	0		|=			
ANR	5045099	MemberAccess	reg -> regset [ type2 ] . maskregstype		5044607	0					
ANR	5045100	ArrayIndexing	reg -> regset [ type2 ]		5044607	0					
ANR	5045101	PtrMemberAccess	reg -> regset		5044607	0					
ANR	5045102	Identifier	reg		5044607	0					
ANR	5045103	Identifier	regset		5044607	1					
ANR	5045104	Identifier	type2		5044607	1					
ANR	5045105	Identifier	maskregstype		5044607	1					
ANR	5045106	ShiftExpression	( int ) 1 << type		5044607	1		<<			
ANR	5045107	CastExpression	( int ) 1		5044607	0					
ANR	5045108	CastTarget	int		5044607	0					
ANR	5045109	PrimaryExpression	1		5044607	1					
ANR	5045110	Identifier	type		5044607	1					
ANR	5045111	ReturnStatement	return NULL ;	119:1:2955:2966	5044607	26	True				
ANR	5045112	Identifier	NULL		5044607	0					
ANR	5045113	ReturnType	static const char *		5044607	1					
ANR	5045114	Identifier	parse_def		5044607	2					
ANR	5045115	ParameterList	"RReg * reg , char * * tok , const int n"		5044607	3					
ANR	5045116	Parameter	RReg * reg	34:29:807:815	5044607	0	True				
ANR	5045117	ParameterType	RReg *		5044607	0					
ANR	5045118	Identifier	reg		5044607	1					
ANR	5045119	Parameter	char * * tok	34:40:818:827	5044607	1	True				
ANR	5045120	ParameterType	char * *		5044607	0					
ANR	5045121	Identifier	tok		5044607	1					
ANR	5045122	Parameter	const int n	34:52:830:840	5044607	2	True				
ANR	5045123	ParameterType	const int		5044607	0					
ANR	5045124	Identifier	n		5044607	1					
ANR	5045125	CFGEntryNode	ENTRY		5044607		True				
ANR	5045126	CFGExitNode	EXIT		5044607		True				
ANR	5045127	Symbol	parse_size		5044607						
ANR	5045128	Symbol	item -> type		5044607						
ANR	5045129	Symbol	& end		5044607						
ANR	5045130	Symbol	reg -> regset [ type2 ] . maskregstype		5044607						
ANR	5045131	Symbol	strchr		5044607						
ANR	5045132	Symbol	item -> flags		5044607						
ANR	5045133	Symbol	type		5044607						
ANR	5045134	Symbol	reg -> regset [ type2 ] . regs		5044607						
ANR	5045135	Symbol	item -> arena		5044607						
ANR	5045136	Symbol	reg -> regset		5044607						
ANR	5045137	Symbol	reg -> regset [ type2 ] . ht_regs		5044607						
ANR	5045138	Symbol	tok		5044607						
ANR	5045139	Symbol	r_reg_type_by_name		5044607						
ANR	5045140	Symbol	RRegItem		5044607						
ANR	5045141	Symbol	ht_pp_new0		5044607						
ANR	5045142	Symbol	reg		5044607						
ANR	5045143	Symbol	tok0		5044607						
ANR	5045144	Symbol	R_REG_TYPE_FLG		5044607						
ANR	5045145	Symbol	R_REG_TYPE_ALL		5044607						
ANR	5045146	Symbol	* item		5044607						
ANR	5045147	Symbol	end		5044607						
ANR	5045148	Symbol	* at ++		5044607						
ANR	5045149	Symbol	R_REG_TYPE_GPR		5044607						
ANR	5045150	Symbol	r_reg_get		5044607						
ANR	5045151	Symbol	item -> offset		5044607						
ANR	5045152	Symbol	strcmp		5044607						
ANR	5045153	Symbol	item		5044607						
ANR	5045154	Symbol	* reg -> regset		5044607						
ANR	5045155	Symbol	type2		5044607						
ANR	5045156	Symbol	NULL		5044607						
ANR	5045157	Symbol	r_list_newf		5044607						
ANR	5045158	Symbol	* * reg		5044607						
ANR	5045159	Symbol	n		5044607						
ANR	5045160	Symbol	p		5044607						
ANR	5045161	Symbol	R_NEW0		5044607						
ANR	5045162	Symbol	item -> packed_size		5044607						
ANR	5045163	Symbol	r_reg_item_free		5044607						
ANR	5045164	Symbol	at		5044607						
ANR	5045165	Symbol	item -> name		5044607						
ANR	5045166	Symbol	reg -> size		5044607						
ANR	5045167	Symbol	* tok		5044607						
ANR	5045168	Symbol	* end		5044607						
ANR	5045169	Symbol	strdup		5044607						
ANR	5045170	Symbol	reg -> bits		5044607						
ANR	5045171	Symbol	item -> size		5044607						
ANR	5045172	Symbol	* reg		5044607						
ANR	5045173	Symbol	* type2		5044607						
ANR	5045174	Function	r_reg_set_profile_string	123:0:2999:5638							
ANR	5045175	FunctionDef	"r_reg_set_profile_string (RReg * reg , const char * str)"		5045174	0					
ANR	5045176	CompoundStatement		123:64:3063:5638	5045174	0					
ANR	5045177	IdentifierDeclStatement	char * tok [ PARSER_MAX_TOKENS ] ;	124:1:3066:3094	5045174	0	True				
ANR	5045178	IdentifierDecl	* tok [ PARSER_MAX_TOKENS ]		5045174	0					
ANR	5045179	IdentifierDeclType	char * [ PARSER_MAX_TOKENS ]		5045174	0					
ANR	5045180	Identifier	tok		5045174	1					
ANR	5045181	Identifier	PARSER_MAX_TOKENS		5045174	2					
ANR	5045182	IdentifierDeclStatement	char tmp [ 128 ] ;	125:1:3097:3110	5045174	1	True				
ANR	5045183	IdentifierDecl	tmp [ 128 ]		5045174	0					
ANR	5045184	IdentifierDeclType	char [ 128 ]		5045174	0					
ANR	5045185	Identifier	tmp		5045174	1					
ANR	5045186	PrimaryExpression	128		5045174	2					
ANR	5045187	IdentifierDeclStatement	"int i , j , l ;"	126:1:3113:3124	5045174	2	True				
ANR	5045188	IdentifierDecl	i		5045174	0					
ANR	5045189	IdentifierDeclType	int		5045174	0					
ANR	5045190	Identifier	i		5045174	1					
ANR	5045191	IdentifierDecl	j		5045174	1					
ANR	5045192	IdentifierDeclType	int		5045174	0					
ANR	5045193	Identifier	j		5045174	1					
ANR	5045194	IdentifierDecl	l		5045174	2					
ANR	5045195	IdentifierDeclType	int		5045174	0					
ANR	5045196	Identifier	l		5045174	1					
ANR	5045197	IdentifierDeclStatement	const char * p = str ;	127:1:3127:3146	5045174	3	True				
ANR	5045198	IdentifierDecl	* p = str		5045174	0					
ANR	5045199	IdentifierDeclType	const char *		5045174	0					
ANR	5045200	Identifier	p		5045174	1					
ANR	5045201	AssignmentExpression	* p = str		5045174	2		=			
ANR	5045202	Identifier	str		5045174	0					
ANR	5045203	Identifier	str		5045174	1					
ANR	5045204	ExpressionStatement	"r_return_val_if_fail ( reg && str , false )"	129:1:3150:3190	5045174	4	True				
ANR	5045205	CallExpression	"r_return_val_if_fail ( reg && str , false )"		5045174	0					
ANR	5045206	Callee	r_return_val_if_fail		5045174	0					
ANR	5045207	Identifier	r_return_val_if_fail		5045174	0					
ANR	5045208	ArgumentList	reg && str		5045174	1					
ANR	5045209	Argument	reg && str		5045174	0					
ANR	5045210	AndExpression	reg && str		5045174	0		&&			
ANR	5045211	Identifier	reg		5045174	0					
ANR	5045212	Identifier	str		5045174	1					
ANR	5045213	Argument	false		5045174	1					
ANR	5045214	Identifier	false		5045174	0					
ANR	5045215	IfStatement	"if ( reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str ) )"		5045174	5					
ANR	5045216	Condition	"reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str )"	132:5:3234:3292	5045174	0	True				
ANR	5045217	AndExpression	"reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str )"		5045174	0		&&			
ANR	5045218	PtrMemberAccess	reg -> reg_profile_str		5045174	0					
ANR	5045219	Identifier	reg		5045174	0					
ANR	5045220	Identifier	reg_profile_str		5045174	1					
ANR	5045221	UnaryOperationExpression	"! strcmp ( reg -> reg_profile_str , str )"		5045174	1					
ANR	5045222	UnaryOperator	!		5045174	0					
ANR	5045223	CallExpression	"strcmp ( reg -> reg_profile_str , str )"		5045174	1					
ANR	5045224	Callee	strcmp		5045174	0					
ANR	5045225	Identifier	strcmp		5045174	0					
ANR	5045226	ArgumentList	reg -> reg_profile_str		5045174	1					
ANR	5045227	Argument	reg -> reg_profile_str		5045174	0					
ANR	5045228	PtrMemberAccess	reg -> reg_profile_str		5045174	0					
ANR	5045229	Identifier	reg		5045174	0					
ANR	5045230	Identifier	reg_profile_str		5045174	1					
ANR	5045231	Argument	str		5045174	1					
ANR	5045232	Identifier	str		5045174	0					
ANR	5045233	CompoundStatement		10:66:231:231	5045174	1					
ANR	5045234	ReturnStatement	return true ;	133:2:3299:3310	5045174	0	True				
ANR	5045235	Identifier	true		5045174	0					
ANR	5045236	ExpressionStatement	r_reg_arena_pop ( reg )	137:1:3387:3408	5045174	6	True				
ANR	5045237	CallExpression	r_reg_arena_pop ( reg )		5045174	0					
ANR	5045238	Callee	r_reg_arena_pop		5045174	0					
ANR	5045239	Identifier	r_reg_arena_pop		5045174	0					
ANR	5045240	ArgumentList	reg		5045174	1					
ANR	5045241	Argument	reg		5045174	0					
ANR	5045242	Identifier	reg		5045174	0					
ANR	5045243	ExpressionStatement	"r_reg_free_internal ( reg , true )"	139:1:3439:3470	5045174	7	True				
ANR	5045244	CallExpression	"r_reg_free_internal ( reg , true )"		5045174	0					
ANR	5045245	Callee	r_reg_free_internal		5045174	0					
ANR	5045246	Identifier	r_reg_free_internal		5045174	0					
ANR	5045247	ArgumentList	reg		5045174	1					
ANR	5045248	Argument	reg		5045174	0					
ANR	5045249	Identifier	reg		5045174	0					
ANR	5045250	Argument	true		5045174	1					
ANR	5045251	Identifier	true		5045174	0					
ANR	5045252	ExpressionStatement	r_reg_arena_shrink ( reg )	140:1:3473:3497	5045174	8	True				
ANR	5045253	CallExpression	r_reg_arena_shrink ( reg )		5045174	0					
ANR	5045254	Callee	r_reg_arena_shrink		5045174	0					
ANR	5045255	Identifier	r_reg_arena_shrink		5045174	0					
ANR	5045256	ArgumentList	reg		5045174	1					
ANR	5045257	Argument	reg		5045174	0					
ANR	5045258	Identifier	reg		5045174	0					
ANR	5045259	ExpressionStatement	reg -> reg_profile_str = strdup ( str )	143:1:3530:3565	5045174	9	True				
ANR	5045260	AssignmentExpression	reg -> reg_profile_str = strdup ( str )		5045174	0		=			
ANR	5045261	PtrMemberAccess	reg -> reg_profile_str		5045174	0					
ANR	5045262	Identifier	reg		5045174	0					
ANR	5045263	Identifier	reg_profile_str		5045174	1					
ANR	5045264	CallExpression	strdup ( str )		5045174	1					
ANR	5045265	Callee	strdup		5045174	0					
ANR	5045266	Identifier	strdup		5045174	0					
ANR	5045267	ArgumentList	str		5045174	1					
ANR	5045268	Argument	str		5045174	0					
ANR	5045269	Identifier	str		5045174	0					
ANR	5045270	ExpressionStatement	l = 0	146:1:3585:3590	5045174	10	True				
ANR	5045271	AssignmentExpression	l = 0		5045174	0		=			
ANR	5045272	Identifier	l		5045174	0					
ANR	5045273	PrimaryExpression	0		5045174	1					
ANR	5045274	DoStatement	do		5045174	11					
ANR	5045275	CompoundStatement		26:4:551:551	5045174	0					
ANR	5045276	ExpressionStatement	l ++	150:2:3646:3649	5045174	0	True				
ANR	5045277	PostIncDecOperationExpression	l ++		5045174	0					
ANR	5045278	Identifier	l		5045174	0					
ANR	5045279	IncDec	++		5045174	1					
ANR	5045280	IfStatement	if ( * p == '#' )		5045174	1					
ANR	5045281	Condition	* p == '#'	152:6:3681:3689	5045174	0	True				
ANR	5045282	EqualityExpression	* p == '#'		5045174	0		==			
ANR	5045283	UnaryOperationExpression	* p		5045174	0					
ANR	5045284	UnaryOperator	*		5045174	0					
ANR	5045285	Identifier	p		5045174	1					
ANR	5045286	PrimaryExpression	'#'		5045174	1					
ANR	5045287	CompoundStatement		31:3:633:650	5045174	1					
ANR	5045288	IdentifierDeclStatement	const char * q = p ;	153:3:3697:3714	5045174	0	True				
ANR	5045289	IdentifierDecl	* q = p		5045174	0					
ANR	5045290	IdentifierDeclType	const char *		5045174	0					
ANR	5045291	Identifier	q		5045174	1					
ANR	5045292	AssignmentExpression	* q = p		5045174	2		=			
ANR	5045293	Identifier	p		5045174	0					
ANR	5045294	Identifier	p		5045174	1					
ANR	5045295	WhileStatement	while ( * q != '\\n' )		5045174	1					
ANR	5045296	Condition	* q != '\\n'	154:10:3726:3735	5045174	0	True				
ANR	5045297	EqualityExpression	* q != '\\n'		5045174	0		!=			
ANR	5045298	UnaryOperationExpression	* q		5045174	0					
ANR	5045299	UnaryOperator	*		5045174	0					
ANR	5045300	Identifier	q		5045174	1					
ANR	5045301	PrimaryExpression	'\\n'		5045174	1					
ANR	5045302	CompoundStatement		32:22:674:674	5045174	1					
ANR	5045303	ExpressionStatement	q ++	155:4:3744:3747	5045174	0	True				
ANR	5045304	PostIncDecOperationExpression	q ++		5045174	0					
ANR	5045305	Identifier	q		5045174	0					
ANR	5045306	IncDec	++		5045174	1					
ANR	5045307	ExpressionStatement	"reg -> reg_profile_cmt = r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"	157:3:3757:3844	5045174	2	True				
ANR	5045308	AssignmentExpression	"reg -> reg_profile_cmt = r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"		5045174	0		=			
ANR	5045309	PtrMemberAccess	reg -> reg_profile_cmt		5045174	0					
ANR	5045310	Identifier	reg		5045174	0					
ANR	5045311	Identifier	reg_profile_cmt		5045174	1					
ANR	5045312	CallExpression	"r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"		5045174	1					
ANR	5045313	Callee	r_str_appendlen		5045174	0					
ANR	5045314	Identifier	r_str_appendlen		5045174	0					
ANR	5045315	ArgumentList	reg -> reg_profile_cmt		5045174	1					
ANR	5045316	Argument	reg -> reg_profile_cmt		5045174	0					
ANR	5045317	PtrMemberAccess	reg -> reg_profile_cmt		5045174	0					
ANR	5045318	Identifier	reg		5045174	0					
ANR	5045319	Identifier	reg_profile_cmt		5045174	1					
ANR	5045320	Argument	p		5045174	1					
ANR	5045321	Identifier	p		5045174	0					
ANR	5045322	Argument	( int ) ( q - p ) + 1		5045174	2					
ANR	5045323	AdditiveExpression	( int ) ( q - p ) + 1		5045174	0		+			
ANR	5045324	CastExpression	( int ) ( q - p )		5045174	0					
ANR	5045325	CastTarget	int		5045174	0					
ANR	5045326	AdditiveExpression	q - p		5045174	1		-			
ANR	5045327	Identifier	q		5045174	0					
ANR	5045328	Identifier	p		5045174	1					
ANR	5045329	PrimaryExpression	1		5045174	1					
ANR	5045330	ExpressionStatement	p = q	159:3:3849:3854	5045174	3	True				
ANR	5045331	AssignmentExpression	p = q		5045174	0		=			
ANR	5045332	Identifier	p		5045174	0					
ANR	5045333	Identifier	q		5045174	1					
ANR	5045334	ContinueStatement	continue ;	160:3:3859:3867	5045174	4	True				
ANR	5045335	ExpressionStatement	j = 0	162:2:3875:3880	5045174	2	True				
ANR	5045336	AssignmentExpression	j = 0		5045174	0		=			
ANR	5045337	Identifier	j		5045174	0					
ANR	5045338	PrimaryExpression	0		5045174	1					
ANR	5045339	WhileStatement	while ( * p )		5045174	3					
ANR	5045340	Condition	* p	164:9:3911:3912	5045174	0	True				
ANR	5045341	UnaryOperationExpression	* p		5045174	0					
ANR	5045342	UnaryOperator	*		5045174	0					
ANR	5045343	Identifier	p		5045174	1					
ANR	5045344	CompoundStatement		42:13:851:851	5045174	1					
ANR	5045345	WhileStatement	while ( * p == ' ' || * p == '\\t' )		5045174	0					
ANR	5045346	Condition	* p == ' ' || * p == '\\t'	166:10:3953:3975	5045174	0	True				
ANR	5045347	OrExpression	* p == ' ' || * p == '\\t'		5045174	0		||			
ANR	5045348	EqualityExpression	* p == ' '		5045174	0		==			
ANR	5045349	UnaryOperationExpression	* p		5045174	0					
ANR	5045350	UnaryOperator	*		5045174	0					
ANR	5045351	Identifier	p		5045174	1					
ANR	5045352	PrimaryExpression	' '		5045174	1					
ANR	5045353	EqualityExpression	* p == '\\t'		5045174	1		==			
ANR	5045354	UnaryOperationExpression	* p		5045174	0					
ANR	5045355	UnaryOperator	*		5045174	0					
ANR	5045356	Identifier	p		5045174	1					
ANR	5045357	PrimaryExpression	'\\t'		5045174	1					
ANR	5045358	CompoundStatement		44:35:914:914	5045174	1					
ANR	5045359	ExpressionStatement	p ++	167:4:3984:3987	5045174	0	True				
ANR	5045360	PostIncDecOperationExpression	p ++		5045174	0					
ANR	5045361	Identifier	p		5045174	0					
ANR	5045362	IncDec	++		5045174	1					
ANR	5045363	IfStatement	if ( * p == '#' )		5045174	1					
ANR	5045364	Condition	* p == '#'	170:7:4061:4069	5045174	0	True				
ANR	5045365	EqualityExpression	* p == '#'		5045174	0		==			
ANR	5045366	UnaryOperationExpression	* p		5045174	0					
ANR	5045367	UnaryOperator	*		5045174	0					
ANR	5045368	Identifier	p		5045174	1					
ANR	5045369	PrimaryExpression	'#'		5045174	1					
ANR	5045370	CompoundStatement		48:18:1008:1008	5045174	1					
ANR	5045371	WhileStatement	while ( * p != '\\n' )		5045174	0					
ANR	5045372	Condition	* p != '\\n'	171:11:4085:4094	5045174	0	True				
ANR	5045373	EqualityExpression	* p != '\\n'		5045174	0		!=			
ANR	5045374	UnaryOperationExpression	* p		5045174	0					
ANR	5045375	UnaryOperator	*		5045174	0					
ANR	5045376	Identifier	p		5045174	1					
ANR	5045377	PrimaryExpression	'\\n'		5045174	1					
ANR	5045378	CompoundStatement		49:23:1033:1033	5045174	1					
ANR	5045379	ExpressionStatement	p ++	172:5:4104:4107	5045174	0	True				
ANR	5045380	PostIncDecOperationExpression	p ++		5045174	0					
ANR	5045381	Identifier	p		5045174	0					
ANR	5045382	IncDec	++		5045174	1					
ANR	5045383	IfStatement	if ( * p == '\\n' )		5045174	2					
ANR	5045384	Condition	* p == '\\n'	176:7:4139:4148	5045174	0	True				
ANR	5045385	EqualityExpression	* p == '\\n'		5045174	0		==			
ANR	5045386	UnaryOperationExpression	* p		5045174	0					
ANR	5045387	UnaryOperator	*		5045174	0					
ANR	5045388	Identifier	p		5045174	1					
ANR	5045389	PrimaryExpression	'\\n'		5045174	1					
ANR	5045390	CompoundStatement		54:19:1087:1087	5045174	1					
ANR	5045391	BreakStatement	break ;	177:4:4157:4162	5045174	0	True				
ANR	5045392	ForStatement	for ( i = 0 ; isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1 ; )		5045174	3					
ANR	5045393	ForInit	i = 0 ;	181:8:4289:4294	5045174	0	True				
ANR	5045394	AssignmentExpression	i = 0		5045174	0		=			
ANR	5045395	Identifier	i		5045174	0					
ANR	5045396	PrimaryExpression	0		5045174	1					
ANR	5045397	Condition	isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1	181:15:4296:4352	5045174	1	True				
ANR	5045398	AndExpression	isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1		5045174	0		&&			
ANR	5045399	CallExpression	isgraph ( ( const unsigned char ) * p )		5045174	0					
ANR	5045400	Callee	isgraph		5045174	0					
ANR	5045401	Identifier	isgraph		5045174	0					
ANR	5045402	ArgumentList	( const unsigned char ) * p		5045174	1					
ANR	5045403	Argument	( const unsigned char ) * p		5045174	0					
ANR	5045404	CastExpression	( const unsigned char ) * p		5045174	0					
ANR	5045405	CastTarget	const unsigned char		5045174	0					
ANR	5045406	UnaryOperationExpression	* p		5045174	1					
ANR	5045407	UnaryOperator	*		5045174	0					
ANR	5045408	Identifier	p		5045174	1					
ANR	5045409	RelationalExpression	i < sizeof ( tmp ) - 1		5045174	1		<			
ANR	5045410	Identifier	i		5045174	0					
ANR	5045411	AdditiveExpression	sizeof ( tmp ) - 1		5045174	1		-			
ANR	5045412	SizeofExpression	sizeof ( tmp )		5045174	0					
ANR	5045413	Sizeof	sizeof		5045174	0					
ANR	5045414	SizeofOperand	tmp		5045174	1					
ANR	5045415	PrimaryExpression	1		5045174	1					
ANR	5045416	CompoundStatement		59:75:1292:1292	5045174	2					
ANR	5045417	ExpressionStatement	tmp [ i ++ ] = * p ++	182:4:4362:4377	5045174	0	True				
ANR	5045418	AssignmentExpression	tmp [ i ++ ] = * p ++		5045174	0		=			
ANR	5045419	ArrayIndexing	tmp [ i ++ ]		5045174	0					
ANR	5045420	Identifier	tmp		5045174	0					
ANR	5045421	PostIncDecOperationExpression	i ++		5045174	1					
ANR	5045422	Identifier	i		5045174	0					
ANR	5045423	IncDec	++		5045174	1					
ANR	5045424	UnaryOperationExpression	* p ++		5045174	1					
ANR	5045425	UnaryOperator	*		5045174	0					
ANR	5045426	PostIncDecOperationExpression	p ++		5045174	1					
ANR	5045427	Identifier	p		5045174	0					
ANR	5045428	IncDec	++		5045174	1					
ANR	5045429	ExpressionStatement	tmp [ i ] = '\\0'	184:3:4387:4400	5045174	4	True				
ANR	5045430	AssignmentExpression	tmp [ i ] = '\\0'		5045174	0		=			
ANR	5045431	ArrayIndexing	tmp [ i ]		5045174	0					
ANR	5045432	Identifier	tmp		5045174	0					
ANR	5045433	Identifier	i		5045174	1					
ANR	5045434	PrimaryExpression	'\\0'		5045174	1					
ANR	5045435	IfStatement	if ( j > PARSER_MAX_TOKENS - 1 )		5045174	5					
ANR	5045436	Condition	j > PARSER_MAX_TOKENS - 1	186:7:4442:4466	5045174	0	True				
ANR	5045437	RelationalExpression	j > PARSER_MAX_TOKENS - 1		5045174	0		>			
ANR	5045438	Identifier	j		5045174	0					
ANR	5045439	AdditiveExpression	PARSER_MAX_TOKENS - 1		5045174	1		-			
ANR	5045440	Identifier	PARSER_MAX_TOKENS		5045174	0					
ANR	5045441	PrimaryExpression	1		5045174	1					
ANR	5045442	CompoundStatement		64:34:1405:1405	5045174	1					
ANR	5045443	BreakStatement	break ;	187:4:4475:4480	5045174	0	True				
ANR	5045444	ExpressionStatement	tok [ j ++ ] = strdup ( tmp )	190:3:4511:4534	5045174	6	True				
ANR	5045445	AssignmentExpression	tok [ j ++ ] = strdup ( tmp )		5045174	0		=			
ANR	5045446	ArrayIndexing	tok [ j ++ ]		5045174	0					
ANR	5045447	Identifier	tok		5045174	0					
ANR	5045448	PostIncDecOperationExpression	j ++		5045174	1					
ANR	5045449	Identifier	j		5045174	0					
ANR	5045450	IncDec	++		5045174	1					
ANR	5045451	CallExpression	strdup ( tmp )		5045174	1					
ANR	5045452	Callee	strdup		5045174	0					
ANR	5045453	Identifier	strdup		5045174	0					
ANR	5045454	ArgumentList	tmp		5045174	1					
ANR	5045455	Argument	tmp		5045174	0					
ANR	5045456	Identifier	tmp		5045174	0					
ANR	5045457	IfStatement	if ( j )		5045174	4					
ANR	5045458	Condition	j	193:6:4567:4567	5045174	0	True				
ANR	5045459	Identifier	j		5045174	0					
ANR	5045460	CompoundStatement		75:3:1621:1714	5045174	1					
ANR	5045461	IdentifierDeclStatement	char * first = tok [ 0 ] ;	195:3:4603:4623	5045174	0	True				
ANR	5045462	IdentifierDecl	* first = tok [ 0 ]		5045174	0					
ANR	5045463	IdentifierDeclType	char *		5045174	0					
ANR	5045464	Identifier	first		5045174	1					
ANR	5045465	AssignmentExpression	* first = tok [ 0 ]		5045174	2		=			
ANR	5045466	Identifier	first		5045174	0					
ANR	5045467	ArrayIndexing	tok [ 0 ]		5045174	1					
ANR	5045468	Identifier	tok		5045174	0					
ANR	5045469	PrimaryExpression	0		5045174	1					
ANR	5045470	IdentifierDeclStatement	"const char * r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j ) ;"	197:3:4685:4778	5045174	1	True				
ANR	5045471	IdentifierDecl	"* r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5045174	0					
ANR	5045472	IdentifierDeclType	const char *		5045174	0					
ANR	5045473	Identifier	r		5045174	1					
ANR	5045474	AssignmentExpression	"* r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5045174	2		=			
ANR	5045475	Identifier	r		5045174	0					
ANR	5045476	ConditionalExpression	"( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5045174	1					
ANR	5045477	Condition	* first == '='		5045174	0					
ANR	5045478	EqualityExpression	* first == '='		5045174	0		==			
ANR	5045479	UnaryOperationExpression	* first		5045174	0					
ANR	5045480	UnaryOperator	*		5045174	0					
ANR	5045481	Identifier	first		5045174	1					
ANR	5045482	PrimaryExpression	'='		5045174	1					
ANR	5045483	CallExpression	"parse_alias ( reg , tok , j )"		5045174	1					
ANR	5045484	Callee	parse_alias		5045174	0					
ANR	5045485	Identifier	parse_alias		5045174	0					
ANR	5045486	ArgumentList	reg		5045174	1					
ANR	5045487	Argument	reg		5045174	0					
ANR	5045488	Identifier	reg		5045174	0					
ANR	5045489	Argument	tok		5045174	1					
ANR	5045490	Identifier	tok		5045174	0					
ANR	5045491	Argument	j		5045174	2					
ANR	5045492	Identifier	j		5045174	0					
ANR	5045493	CallExpression	"parse_def ( reg , tok , j )"		5045174	2					
ANR	5045494	Callee	parse_def		5045174	0					
ANR	5045495	Identifier	parse_def		5045174	0					
ANR	5045496	ArgumentList	reg		5045174	1					
ANR	5045497	Argument	reg		5045174	0					
ANR	5045498	Identifier	reg		5045174	0					
ANR	5045499	Argument	tok		5045174	1					
ANR	5045500	Identifier	tok		5045174	0					
ANR	5045501	Argument	j		5045174	2					
ANR	5045502	Identifier	j		5045174	0					
ANR	5045503	ForStatement	for ( i = 0 ; i < j ; i ++ )		5045174	2					
ANR	5045504	ForInit	i = 0 ;	201:8:4803:4808	5045174	0	True				
ANR	5045505	AssignmentExpression	i = 0		5045174	0		=			
ANR	5045506	Identifier	i		5045174	0					
ANR	5045507	PrimaryExpression	0		5045174	1					
ANR	5045508	Condition	i < j	201:15:4810:4814	5045174	1	True				
ANR	5045509	RelationalExpression	i < j		5045174	0		<			
ANR	5045510	Identifier	i		5045174	0					
ANR	5045511	Identifier	j		5045174	1					
ANR	5045512	PostIncDecOperationExpression	i ++	201:22:4817:4819	5045174	2	True				
ANR	5045513	Identifier	i		5045174	0					
ANR	5045514	IncDec	++		5045174	1					
ANR	5045515	CompoundStatement		79:27:1758:1758	5045174	3					
ANR	5045516	ExpressionStatement	free ( tok [ i ] )	202:4:4828:4841	5045174	0	True				
ANR	5045517	CallExpression	free ( tok [ i ] )		5045174	0					
ANR	5045518	Callee	free		5045174	0					
ANR	5045519	Identifier	free		5045174	0					
ANR	5045520	ArgumentList	tok [ i ]		5045174	1					
ANR	5045521	Argument	tok [ i ]		5045174	0					
ANR	5045522	ArrayIndexing	tok [ i ]		5045174	0					
ANR	5045523	Identifier	tok		5045174	0					
ANR	5045524	Identifier	i		5045174	1					
ANR	5045525	IfStatement	if ( r )		5045174	3					
ANR	5045526	Condition	r	205:7:4899:4899	5045174	0	True				
ANR	5045527	Identifier	r		5045174	0					
ANR	5045528	CompoundStatement		83:10:1838:1838	5045174	1					
ANR	5045529	ExpressionStatement	"eprintf ( ""%s: Parse error @ line %d (%s)\\n"" , __FUNCTION__ , l , r )"	206:4:4908:4977	5045174	0	True				
ANR	5045530	CallExpression	"eprintf ( ""%s: Parse error @ line %d (%s)\\n"" , __FUNCTION__ , l , r )"		5045174	0					
ANR	5045531	Callee	eprintf		5045174	0					
ANR	5045532	Identifier	eprintf		5045174	0					
ANR	5045533	ArgumentList	"""%s: Parse error @ line %d (%s)\\n"""		5045174	1					
ANR	5045534	Argument	"""%s: Parse error @ line %d (%s)\\n"""		5045174	0					
ANR	5045535	PrimaryExpression	"""%s: Parse error @ line %d (%s)\\n"""		5045174	0					
ANR	5045536	Argument	__FUNCTION__		5045174	1					
ANR	5045537	Identifier	__FUNCTION__		5045174	0					
ANR	5045538	Argument	l		5045174	2					
ANR	5045539	Identifier	l		5045174	0					
ANR	5045540	Argument	r		5045174	3					
ANR	5045541	Identifier	r		5045174	0					
ANR	5045542	ExpressionStatement	"r_reg_free_internal ( reg , false )"	210:4:5030:5062	5045174	1	True				
ANR	5045543	CallExpression	"r_reg_free_internal ( reg , false )"		5045174	0					
ANR	5045544	Callee	r_reg_free_internal		5045174	0					
ANR	5045545	Identifier	r_reg_free_internal		5045174	0					
ANR	5045546	ArgumentList	reg		5045174	1					
ANR	5045547	Argument	reg		5045174	0					
ANR	5045548	Identifier	reg		5045174	0					
ANR	5045549	Argument	false		5045174	1					
ANR	5045550	Identifier	false		5045174	0					
ANR	5045551	ReturnStatement	return false ;	211:4:5068:5080	5045174	2	True				
ANR	5045552	Identifier	false		5045174	0					
ANR	5045553	Condition	* p ++	214:10:5101:5104	5045174	1	True				
ANR	5045554	UnaryOperationExpression	* p ++		5045174	0					
ANR	5045555	UnaryOperator	*		5045174	0					
ANR	5045556	PostIncDecOperationExpression	p ++		5045174	1					
ANR	5045557	Identifier	p		5045174	0					
ANR	5045558	IncDec	++		5045174	1					
ANR	5045559	ExpressionStatement	reg -> size = 0	215:1:5109:5122	5045174	12	True				
ANR	5045560	AssignmentExpression	reg -> size = 0		5045174	0		=			
ANR	5045561	PtrMemberAccess	reg -> size		5045174	0					
ANR	5045562	Identifier	reg		5045174	0					
ANR	5045563	Identifier	size		5045174	1					
ANR	5045564	PrimaryExpression	0		5045174	1					
ANR	5045565	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5045174	13					
ANR	5045566	ForInit	i = 0 ;	216:6:5130:5135	5045174	0	True				
ANR	5045567	AssignmentExpression	i = 0		5045174	0		=			
ANR	5045568	Identifier	i		5045174	0					
ANR	5045569	PrimaryExpression	0		5045174	1					
ANR	5045570	Condition	i < R_REG_TYPE_LAST	216:13:5137:5155	5045174	1	True				
ANR	5045571	RelationalExpression	i < R_REG_TYPE_LAST		5045174	0		<			
ANR	5045572	Identifier	i		5045174	0					
ANR	5045573	Identifier	R_REG_TYPE_LAST		5045174	1					
ANR	5045574	PostIncDecOperationExpression	i ++	216:34:5158:5160	5045174	2	True				
ANR	5045575	Identifier	i		5045174	0					
ANR	5045576	IncDec	++		5045174	1					
ANR	5045577	CompoundStatement		95:2:2103:2132	5045174	3					
ANR	5045578	IdentifierDeclStatement	RRegSet * rs = & reg -> regset [ i ] ;	217:2:5167:5196	5045174	0	True				
ANR	5045579	IdentifierDecl	* rs = & reg -> regset [ i ]		5045174	0					
ANR	5045580	IdentifierDeclType	RRegSet *		5045174	0					
ANR	5045581	Identifier	rs		5045174	1					
ANR	5045582	AssignmentExpression	* rs = & reg -> regset [ i ]		5045174	2		=			
ANR	5045583	Identifier	rs		5045174	0					
ANR	5045584	UnaryOperationExpression	& reg -> regset [ i ]		5045174	1					
ANR	5045585	UnaryOperator	&		5045174	0					
ANR	5045586	ArrayIndexing	reg -> regset [ i ]		5045174	1					
ANR	5045587	PtrMemberAccess	reg -> regset		5045174	0					
ANR	5045588	Identifier	reg		5045174	0					
ANR	5045589	Identifier	regset		5045174	1					
ANR	5045590	Identifier	i		5045174	1					
ANR	5045591	IfStatement	if ( rs && rs -> arena )		5045174	1					
ANR	5045592	Condition	rs && rs -> arena	219:6:5279:5293	5045174	0	True				
ANR	5045593	AndExpression	rs && rs -> arena		5045174	0		&&			
ANR	5045594	Identifier	rs		5045174	0					
ANR	5045595	PtrMemberAccess	rs -> arena		5045174	1					
ANR	5045596	Identifier	rs		5045174	0					
ANR	5045597	Identifier	arena		5045174	1					
ANR	5045598	CompoundStatement		97:23:2232:2232	5045174	1					
ANR	5045599	ExpressionStatement	reg -> size += rs -> arena -> size	220:3:5301:5329	5045174	0	True				
ANR	5045600	AssignmentExpression	reg -> size += rs -> arena -> size		5045174	0		+=			
ANR	5045601	PtrMemberAccess	reg -> size		5045174	0					
ANR	5045602	Identifier	reg		5045174	0					
ANR	5045603	Identifier	size		5045174	1					
ANR	5045604	PtrMemberAccess	rs -> arena -> size		5045174	1					
ANR	5045605	PtrMemberAccess	rs -> arena		5045174	0					
ANR	5045606	Identifier	rs		5045174	0					
ANR	5045607	Identifier	arena		5045174	1					
ANR	5045608	Identifier	size		5045174	1					
ANR	5045609	ExpressionStatement	r_reg_fit_arena ( reg )	228:1:5494:5515	5045174	14	True				
ANR	5045610	CallExpression	r_reg_fit_arena ( reg )		5045174	0					
ANR	5045611	Callee	r_reg_fit_arena		5045174	0					
ANR	5045612	Identifier	r_reg_fit_arena		5045174	0					
ANR	5045613	ArgumentList	reg		5045174	1					
ANR	5045614	Argument	reg		5045174	0					
ANR	5045615	Identifier	reg		5045174	0					
ANR	5045616	ExpressionStatement	r_reg_arena_push ( reg )	230:1:5561:5583	5045174	15	True				
ANR	5045617	CallExpression	r_reg_arena_push ( reg )		5045174	0					
ANR	5045618	Callee	r_reg_arena_push		5045174	0					
ANR	5045619	Identifier	r_reg_arena_push		5045174	0					
ANR	5045620	ArgumentList	reg		5045174	1					
ANR	5045621	Argument	reg		5045174	0					
ANR	5045622	Identifier	reg		5045174	0					
ANR	5045623	ExpressionStatement	r_reg_reindex ( reg )	231:1:5586:5605	5045174	16	True				
ANR	5045624	CallExpression	r_reg_reindex ( reg )		5045174	0					
ANR	5045625	Callee	r_reg_reindex		5045174	0					
ANR	5045626	Identifier	r_reg_reindex		5045174	0					
ANR	5045627	ArgumentList	reg		5045174	1					
ANR	5045628	Argument	reg		5045174	0					
ANR	5045629	Identifier	reg		5045174	0					
ANR	5045630	ReturnStatement	return true ;	233:1:5625:5636	5045174	17	True				
ANR	5045631	Identifier	true		5045174	0					
ANR	5045632	ReturnType	R_API bool		5045174	1					
ANR	5045633	Identifier	r_reg_set_profile_string		5045174	2					
ANR	5045634	ParameterList	"RReg * reg , const char * str"		5045174	3					
ANR	5045635	Parameter	RReg * reg	123:36:3035:3043	5045174	0	True				
ANR	5045636	ParameterType	RReg *		5045174	0					
ANR	5045637	Identifier	reg		5045174	1					
ANR	5045638	Parameter	const char * str	123:47:3046:3060	5045174	1	True				
ANR	5045639	ParameterType	const char *		5045174	0					
ANR	5045640	Identifier	str		5045174	1					
ANR	5045641	CFGEntryNode	ENTRY		5045174		True				
ANR	5045642	CFGExitNode	EXIT		5045174		True				
ANR	5045643	Symbol	* tmp		5045174						
ANR	5045644	Symbol	rs		5045174						
ANR	5045645	Symbol	reg -> reg_profile_str		5045174						
ANR	5045646	Symbol	rs -> arena -> size		5045174						
ANR	5045647	Symbol	reg -> regset		5045174						
ANR	5045648	Symbol	tok		5045174						
ANR	5045649	Symbol	PARSER_MAX_TOKENS		5045174						
ANR	5045650	Symbol	reg		5045174						
ANR	5045651	Symbol	* first		5045174						
ANR	5045652	Symbol	tmp		5045174						
ANR	5045653	Symbol	r_str_appendlen		5045174						
ANR	5045654	Symbol	strcmp		5045174						
ANR	5045655	Symbol	* rs		5045174						
ANR	5045656	Symbol	* p ++		5045174						
ANR	5045657	Symbol	false		5045174						
ANR	5045658	Symbol	isgraph		5045174						
ANR	5045659	Symbol	i		5045174						
ANR	5045660	Symbol	R_REG_TYPE_LAST		5045174						
ANR	5045661	Symbol	j		5045174						
ANR	5045662	Symbol	l		5045174						
ANR	5045663	Symbol	__FUNCTION__		5045174						
ANR	5045664	Symbol	reg -> reg_profile_cmt		5045174						
ANR	5045665	Symbol	* * rs		5045174						
ANR	5045666	Symbol	str		5045174						
ANR	5045667	Symbol	p		5045174						
ANR	5045668	Symbol	q		5045174						
ANR	5045669	Symbol	r		5045174						
ANR	5045670	Symbol	* i		5045174						
ANR	5045671	Symbol	* rs -> arena		5045174						
ANR	5045672	Symbol	rs -> arena		5045174						
ANR	5045673	Symbol	true		5045174						
ANR	5045674	Symbol	reg -> size		5045174						
ANR	5045675	Symbol	* p		5045174						
ANR	5045676	Symbol	* tok		5045174						
ANR	5045677	Symbol	parse_alias		5045174						
ANR	5045678	Symbol	strdup		5045174						
ANR	5045679	Symbol	* q		5045174						
ANR	5045680	Symbol	parse_def		5045174						
ANR	5045681	Symbol	* reg		5045174						
ANR	5045682	Symbol	first		5045174						
ANR	5045683	Function	r_reg_set_profile	236:0:5641:6097							
ANR	5045684	FunctionDef	"r_reg_set_profile (RReg * reg , const char * profile)"		5045683	0					
ANR	5045685	CompoundStatement		236:61:5702:6097	5045683	0					
ANR	5045686	IdentifierDeclStatement	"char * base , * file ;"	237:1:5705:5722	5045683	0	True				
ANR	5045687	IdentifierDecl	* base		5045683	0					
ANR	5045688	IdentifierDeclType	char *		5045683	0					
ANR	5045689	Identifier	base		5045683	1					
ANR	5045690	IdentifierDecl	* file		5045683	1					
ANR	5045691	IdentifierDeclType	char *		5045683	0					
ANR	5045692	Identifier	file		5045683	1					
ANR	5045693	IdentifierDeclStatement	"char * str = r_file_slurp ( profile , NULL ) ;"	238:1:5725:5765	5045683	1	True				
ANR	5045694	IdentifierDecl	"* str = r_file_slurp ( profile , NULL )"		5045683	0					
ANR	5045695	IdentifierDeclType	char *		5045683	0					
ANR	5045696	Identifier	str		5045683	1					
ANR	5045697	AssignmentExpression	"* str = r_file_slurp ( profile , NULL )"		5045683	2		=			
ANR	5045698	Identifier	str		5045683	0					
ANR	5045699	CallExpression	"r_file_slurp ( profile , NULL )"		5045683	1					
ANR	5045700	Callee	r_file_slurp		5045683	0					
ANR	5045701	Identifier	r_file_slurp		5045683	0					
ANR	5045702	ArgumentList	profile		5045683	1					
ANR	5045703	Argument	profile		5045683	0					
ANR	5045704	Identifier	profile		5045683	0					
ANR	5045705	Argument	NULL		5045683	1					
ANR	5045706	Identifier	NULL		5045683	0					
ANR	5045707	IfStatement	if ( ! str )		5045683	2					
ANR	5045708	Condition	! str	239:5:5772:5775	5045683	0	True				
ANR	5045709	UnaryOperationExpression	! str		5045683	0					
ANR	5045710	UnaryOperator	!		5045683	0					
ANR	5045711	Identifier	str		5045683	1					
ANR	5045712	CompoundStatement		4:11:75:75	5045683	1					
ANR	5045713	ExpressionStatement	base = r_sys_getenv ( R_LIB_ENV )	240:2:5782:5813	5045683	0	True				
ANR	5045714	AssignmentExpression	base = r_sys_getenv ( R_LIB_ENV )		5045683	0		=			
ANR	5045715	Identifier	base		5045683	0					
ANR	5045716	CallExpression	r_sys_getenv ( R_LIB_ENV )		5045683	1					
ANR	5045717	Callee	r_sys_getenv		5045683	0					
ANR	5045718	Identifier	r_sys_getenv		5045683	0					
ANR	5045719	ArgumentList	R_LIB_ENV		5045683	1					
ANR	5045720	Argument	R_LIB_ENV		5045683	0					
ANR	5045721	Identifier	R_LIB_ENV		5045683	0					
ANR	5045722	IfStatement	if ( base )		5045683	1					
ANR	5045723	Condition	base	241:6:5821:5824	5045683	0	True				
ANR	5045724	Identifier	base		5045683	0					
ANR	5045725	CompoundStatement		6:12:124:124	5045683	1					
ANR	5045726	ExpressionStatement	"file = r_str_append ( base , profile )"	242:3:5832:5867	5045683	0	True				
ANR	5045727	AssignmentExpression	"file = r_str_append ( base , profile )"		5045683	0		=			
ANR	5045728	Identifier	file		5045683	0					
ANR	5045729	CallExpression	"r_str_append ( base , profile )"		5045683	1					
ANR	5045730	Callee	r_str_append		5045683	0					
ANR	5045731	Identifier	r_str_append		5045683	0					
ANR	5045732	ArgumentList	base		5045683	1					
ANR	5045733	Argument	base		5045683	0					
ANR	5045734	Identifier	base		5045683	0					
ANR	5045735	Argument	profile		5045683	1					
ANR	5045736	Identifier	profile		5045683	0					
ANR	5045737	ExpressionStatement	"str = r_file_slurp ( file , NULL )"	243:3:5872:5903	5045683	1	True				
ANR	5045738	AssignmentExpression	"str = r_file_slurp ( file , NULL )"		5045683	0		=			
ANR	5045739	Identifier	str		5045683	0					
ANR	5045740	CallExpression	"r_file_slurp ( file , NULL )"		5045683	1					
ANR	5045741	Callee	r_file_slurp		5045683	0					
ANR	5045742	Identifier	r_file_slurp		5045683	0					
ANR	5045743	ArgumentList	file		5045683	1					
ANR	5045744	Argument	file		5045683	0					
ANR	5045745	Identifier	file		5045683	0					
ANR	5045746	Argument	NULL		5045683	1					
ANR	5045747	Identifier	NULL		5045683	0					
ANR	5045748	ExpressionStatement	free ( file )	244:3:5908:5919	5045683	2	True				
ANR	5045749	CallExpression	free ( file )		5045683	0					
ANR	5045750	Callee	free		5045683	0					
ANR	5045751	Identifier	free		5045683	0					
ANR	5045752	ArgumentList	file		5045683	1					
ANR	5045753	Argument	file		5045683	0					
ANR	5045754	Identifier	file		5045683	0					
ANR	5045755	IfStatement	if ( ! str )		5045683	3					
ANR	5045756	Condition	! str	247:5:5933:5936	5045683	0	True				
ANR	5045757	UnaryOperationExpression	! str		5045683	0					
ANR	5045758	UnaryOperator	!		5045683	0					
ANR	5045759	Identifier	str		5045683	1					
ANR	5045760	CompoundStatement		12:11:236:236	5045683	1					
ANR	5045761	ExpressionStatement	"eprintf ( ""r_reg_set_profile: Cannot find '%s'\\n"" , profile )"	248:2:5943:6001	5045683	0	True				
ANR	5045762	CallExpression	"eprintf ( ""r_reg_set_profile: Cannot find '%s'\\n"" , profile )"		5045683	0					
ANR	5045763	Callee	eprintf		5045683	0					
ANR	5045764	Identifier	eprintf		5045683	0					
ANR	5045765	ArgumentList	"""r_reg_set_profile: Cannot find '%s'\\n"""		5045683	1					
ANR	5045766	Argument	"""r_reg_set_profile: Cannot find '%s'\\n"""		5045683	0					
ANR	5045767	PrimaryExpression	"""r_reg_set_profile: Cannot find '%s'\\n"""		5045683	0					
ANR	5045768	Argument	profile		5045683	1					
ANR	5045769	Identifier	profile		5045683	0					
ANR	5045770	ReturnStatement	return false ;	249:2:6005:6017	5045683	1	True				
ANR	5045771	Identifier	false		5045683	0					
ANR	5045772	IdentifierDeclStatement	"bool ret = r_reg_set_profile_string ( reg , str ) ;"	251:1:6023:6069	5045683	4	True				
ANR	5045773	IdentifierDecl	"ret = r_reg_set_profile_string ( reg , str )"		5045683	0					
ANR	5045774	IdentifierDeclType	bool		5045683	0					
ANR	5045775	Identifier	ret		5045683	1					
ANR	5045776	AssignmentExpression	"ret = r_reg_set_profile_string ( reg , str )"		5045683	2		=			
ANR	5045777	Identifier	ret		5045683	0					
ANR	5045778	CallExpression	"r_reg_set_profile_string ( reg , str )"		5045683	1					
ANR	5045779	Callee	r_reg_set_profile_string		5045683	0					
ANR	5045780	Identifier	r_reg_set_profile_string		5045683	0					
ANR	5045781	ArgumentList	reg		5045683	1					
ANR	5045782	Argument	reg		5045683	0					
ANR	5045783	Identifier	reg		5045683	0					
ANR	5045784	Argument	str		5045683	1					
ANR	5045785	Identifier	str		5045683	0					
ANR	5045786	ExpressionStatement	free ( str )	252:1:6072:6082	5045683	5	True				
ANR	5045787	CallExpression	free ( str )		5045683	0					
ANR	5045788	Callee	free		5045683	0					
ANR	5045789	Identifier	free		5045683	0					
ANR	5045790	ArgumentList	str		5045683	1					
ANR	5045791	Argument	str		5045683	0					
ANR	5045792	Identifier	str		5045683	0					
ANR	5045793	ReturnStatement	return ret ;	253:1:6085:6095	5045683	6	True				
ANR	5045794	Identifier	ret		5045683	0					
ANR	5045795	ReturnType	R_API bool		5045683	1					
ANR	5045796	Identifier	r_reg_set_profile		5045683	2					
ANR	5045797	ParameterList	"RReg * reg , const char * profile"		5045683	3					
ANR	5045798	Parameter	RReg * reg	236:29:5670:5678	5045683	0	True				
ANR	5045799	ParameterType	RReg *		5045683	0					
ANR	5045800	Identifier	reg		5045683	1					
ANR	5045801	Parameter	const char * profile	236:40:5681:5699	5045683	1	True				
ANR	5045802	ParameterType	const char *		5045683	0					
ANR	5045803	Identifier	profile		5045683	1					
ANR	5045804	CFGEntryNode	ENTRY		5045683		True				
ANR	5045805	CFGExitNode	EXIT		5045683		True				
ANR	5045806	Symbol	ret		5045683						
ANR	5045807	Symbol	r_str_append		5045683						
ANR	5045808	Symbol	r_file_slurp		5045683						
ANR	5045809	Symbol	NULL		5045683						
ANR	5045810	Symbol	r_sys_getenv		5045683						
ANR	5045811	Symbol	profile		5045683						
ANR	5045812	Symbol	false		5045683						
ANR	5045813	Symbol	str		5045683						
ANR	5045814	Symbol	R_LIB_ENV		5045683						
ANR	5045815	Symbol	file		5045683						
ANR	5045816	Symbol	reg		5045683						
ANR	5045817	Symbol	r_reg_set_profile_string		5045683						
ANR	5045818	Symbol	base		5045683						
ANR	5045819	Function	gdb_to_r2_profile	256:0:6100:8921							
ANR	5045820	FunctionDef	gdb_to_r2_profile (char * gdb)		5045819	0					
ANR	5045821	CompoundStatement		256:41:6141:8921	5045819	0					
ANR	5045822	IdentifierDeclStatement	"char * ptr = gdb , * ptr1 , * gptr , * gptr1 ;"	257:1:6144:6181	5045819	0	True				
ANR	5045823	IdentifierDecl	* ptr = gdb		5045819	0					
ANR	5045824	IdentifierDeclType	char *		5045819	0					
ANR	5045825	Identifier	ptr		5045819	1					
ANR	5045826	AssignmentExpression	* ptr = gdb		5045819	2		=			
ANR	5045827	Identifier	gdb		5045819	0					
ANR	5045828	Identifier	gdb		5045819	1					
ANR	5045829	IdentifierDecl	* ptr1		5045819	1					
ANR	5045830	IdentifierDeclType	char *		5045819	0					
ANR	5045831	Identifier	ptr1		5045819	1					
ANR	5045832	IdentifierDecl	* gptr		5045819	2					
ANR	5045833	IdentifierDeclType	char *		5045819	0					
ANR	5045834	Identifier	gptr		5045819	1					
ANR	5045835	IdentifierDecl	* gptr1		5045819	3					
ANR	5045836	IdentifierDeclType	char *		5045819	0					
ANR	5045837	Identifier	gptr1		5045819	1					
ANR	5045838	IdentifierDeclStatement	"char name [ 16 ] , groups [ 128 ] , type [ 16 ] ;"	258:1:6184:6220	5045819	1	True				
ANR	5045839	IdentifierDecl	name [ 16 ]		5045819	0					
ANR	5045840	IdentifierDeclType	char [ 16 ]		5045819	0					
ANR	5045841	Identifier	name		5045819	1					
ANR	5045842	PrimaryExpression	16		5045819	2					
ANR	5045843	IdentifierDecl	groups [ 128 ]		5045819	1					
ANR	5045844	IdentifierDeclType	char [ 128 ]		5045819	0					
ANR	5045845	Identifier	groups		5045819	1					
ANR	5045846	PrimaryExpression	128		5045819	2					
ANR	5045847	IdentifierDecl	type [ 16 ]		5045819	2					
ANR	5045848	IdentifierDeclType	char [ 16 ]		5045819	0					
ANR	5045849	Identifier	type		5045819	1					
ANR	5045850	PrimaryExpression	16		5045819	2					
ANR	5045851	IdentifierDeclStatement	"const int all = 1 , gpr = 2 , save = 4 , restore = 8 , float_ = 16 , sse = 32 , vector = 64 , system = 128 , mmx = 256 ;"	259:1:6223:6337	5045819	2	True				
ANR	5045852	IdentifierDecl	all = 1		5045819	0					
ANR	5045853	IdentifierDeclType	const int		5045819	0					
ANR	5045854	Identifier	all		5045819	1					
ANR	5045855	AssignmentExpression	all = 1		5045819	2		=			
ANR	5045856	Identifier	all		5045819	0					
ANR	5045857	PrimaryExpression	1		5045819	1					
ANR	5045858	IdentifierDecl	gpr = 2		5045819	1					
ANR	5045859	IdentifierDeclType	const int		5045819	0					
ANR	5045860	Identifier	gpr		5045819	1					
ANR	5045861	AssignmentExpression	gpr = 2		5045819	2		=			
ANR	5045862	Identifier	gpr		5045819	0					
ANR	5045863	PrimaryExpression	2		5045819	1					
ANR	5045864	IdentifierDecl	save = 4		5045819	2					
ANR	5045865	IdentifierDeclType	const int		5045819	0					
ANR	5045866	Identifier	save		5045819	1					
ANR	5045867	AssignmentExpression	save = 4		5045819	2		=			
ANR	5045868	Identifier	save		5045819	0					
ANR	5045869	PrimaryExpression	4		5045819	1					
ANR	5045870	IdentifierDecl	restore = 8		5045819	3					
ANR	5045871	IdentifierDeclType	const int		5045819	0					
ANR	5045872	Identifier	restore		5045819	1					
ANR	5045873	AssignmentExpression	restore = 8		5045819	2		=			
ANR	5045874	Identifier	restore		5045819	0					
ANR	5045875	PrimaryExpression	8		5045819	1					
ANR	5045876	IdentifierDecl	float_ = 16		5045819	4					
ANR	5045877	IdentifierDeclType	const int		5045819	0					
ANR	5045878	Identifier	float_		5045819	1					
ANR	5045879	AssignmentExpression	float_ = 16		5045819	2		=			
ANR	5045880	Identifier	float_		5045819	0					
ANR	5045881	PrimaryExpression	16		5045819	1					
ANR	5045882	IdentifierDecl	sse = 32		5045819	5					
ANR	5045883	IdentifierDeclType	const int		5045819	0					
ANR	5045884	Identifier	sse		5045819	1					
ANR	5045885	AssignmentExpression	sse = 32		5045819	2		=			
ANR	5045886	Identifier	sse		5045819	0					
ANR	5045887	PrimaryExpression	32		5045819	1					
ANR	5045888	IdentifierDecl	vector = 64		5045819	6					
ANR	5045889	IdentifierDeclType	const int		5045819	0					
ANR	5045890	Identifier	vector		5045819	1					
ANR	5045891	AssignmentExpression	vector = 64		5045819	2		=			
ANR	5045892	Identifier	vector		5045819	0					
ANR	5045893	PrimaryExpression	64		5045819	1					
ANR	5045894	IdentifierDecl	system = 128		5045819	7					
ANR	5045895	IdentifierDeclType	const int		5045819	0					
ANR	5045896	Identifier	system		5045819	1					
ANR	5045897	AssignmentExpression	system = 128		5045819	2		=			
ANR	5045898	Identifier	system		5045819	0					
ANR	5045899	PrimaryExpression	128		5045819	1					
ANR	5045900	IdentifierDecl	mmx = 256		5045819	8					
ANR	5045901	IdentifierDeclType	const int		5045819	0					
ANR	5045902	Identifier	mmx		5045819	1					
ANR	5045903	AssignmentExpression	mmx = 256		5045819	2		=			
ANR	5045904	Identifier	mmx		5045819	0					
ANR	5045905	PrimaryExpression	256		5045819	1					
ANR	5045906	IdentifierDeclStatement	"int number , rel , offset , size , type_bits , ret ;"	261:1:6340:6385	5045819	3	True				
ANR	5045907	IdentifierDecl	number		5045819	0					
ANR	5045908	IdentifierDeclType	int		5045819	0					
ANR	5045909	Identifier	number		5045819	1					
ANR	5045910	IdentifierDecl	rel		5045819	1					
ANR	5045911	IdentifierDeclType	int		5045819	0					
ANR	5045912	Identifier	rel		5045819	1					
ANR	5045913	IdentifierDecl	offset		5045819	2					
ANR	5045914	IdentifierDeclType	int		5045819	0					
ANR	5045915	Identifier	offset		5045819	1					
ANR	5045916	IdentifierDecl	size		5045819	3					
ANR	5045917	IdentifierDeclType	int		5045819	0					
ANR	5045918	Identifier	size		5045819	1					
ANR	5045919	IdentifierDecl	type_bits		5045819	4					
ANR	5045920	IdentifierDeclType	int		5045819	0					
ANR	5045921	Identifier	type_bits		5045819	1					
ANR	5045922	IdentifierDecl	ret		5045819	5					
ANR	5045923	IdentifierDeclType	int		5045819	0					
ANR	5045924	Identifier	ret		5045819	1					
ANR	5045925	WhileStatement	while ( isspace ( ( ut8 ) * ptr ) )		5045819	4					
ANR	5045926	Condition	isspace ( ( ut8 ) * ptr )	266:8:6517:6535	5045819	0	True				
ANR	5045927	CallExpression	isspace ( ( ut8 ) * ptr )		5045819	0					
ANR	5045928	Callee	isspace		5045819	0					
ANR	5045929	Identifier	isspace		5045819	0					
ANR	5045930	ArgumentList	( ut8 ) * ptr		5045819	1					
ANR	5045931	Argument	( ut8 ) * ptr		5045819	0					
ANR	5045932	CastExpression	( ut8 ) * ptr		5045819	0					
ANR	5045933	CastTarget	ut8		5045819	0					
ANR	5045934	UnaryOperationExpression	* ptr		5045819	1					
ANR	5045935	UnaryOperator	*		5045819	0					
ANR	5045936	Identifier	ptr		5045819	1					
ANR	5045937	CompoundStatement		11:29:396:396	5045819	1					
ANR	5045938	ExpressionStatement	ptr ++	267:2:6542:6547	5045819	0	True				
ANR	5045939	PostIncDecOperationExpression	ptr ++		5045819	0					
ANR	5045940	Identifier	ptr		5045819	0					
ANR	5045941	IncDec	++		5045819	1					
ANR	5045942	IfStatement	"if ( r_str_startswith ( ptr , ""Name"" ) )"		5045819	5					
ANR	5045943	Condition	"r_str_startswith ( ptr , ""Name"" )"	270:5:6622:6651	5045819	0	True				
ANR	5045944	CallExpression	"r_str_startswith ( ptr , ""Name"" )"		5045819	0					
ANR	5045945	Callee	r_str_startswith		5045819	0					
ANR	5045946	Identifier	r_str_startswith		5045819	0					
ANR	5045947	ArgumentList	ptr		5045819	1					
ANR	5045948	Argument	ptr		5045819	0					
ANR	5045949	Identifier	ptr		5045819	0					
ANR	5045950	Argument	"""Name"""		5045819	1					
ANR	5045951	PrimaryExpression	"""Name"""		5045819	0					
ANR	5045952	CompoundStatement		15:37:512:512	5045819	1					
ANR	5045953	IfStatement	"if ( ! ( ptr = strchr ( ptr , '\\n' ) ) )"		5045819	0					
ANR	5045954	Condition	"! ( ptr = strchr ( ptr , '\\n' ) )"	271:6:6662:6688	5045819	0	True				
ANR	5045955	UnaryOperationExpression	"! ( ptr = strchr ( ptr , '\\n' ) )"		5045819	0					
ANR	5045956	UnaryOperator	!		5045819	0					
ANR	5045957	AssignmentExpression	"ptr = strchr ( ptr , '\\n' )"		5045819	1		=			
ANR	5045958	Identifier	ptr		5045819	0					
ANR	5045959	CallExpression	"strchr ( ptr , '\\n' )"		5045819	1					
ANR	5045960	Callee	strchr		5045819	0					
ANR	5045961	Identifier	strchr		5045819	0					
ANR	5045962	ArgumentList	ptr		5045819	1					
ANR	5045963	Argument	ptr		5045819	0					
ANR	5045964	Identifier	ptr		5045819	0					
ANR	5045965	Argument	'\\n'		5045819	1					
ANR	5045966	PrimaryExpression	'\\n'		5045819	0					
ANR	5045967	CompoundStatement		16:35:549:549	5045819	1					
ANR	5045968	ReturnStatement	return false ;	272:3:6696:6708	5045819	0	True				
ANR	5045969	Identifier	false		5045819	0					
ANR	5045970	ExpressionStatement	ptr ++	274:2:6716:6721	5045819	1	True				
ANR	5045971	PostIncDecOperationExpression	ptr ++		5045819	0					
ANR	5045972	Identifier	ptr		5045819	0					
ANR	5045973	IncDec	++		5045819	1					
ANR	5045974	ForStatement	for ( ; ; )		5045819	6					
ANR	5045975	CompoundStatement		21:10:594:594	5045819	0					
ANR	5045976	WhileStatement	while ( isspace ( ( ut8 ) * ptr ) )		5045819	0					
ANR	5045977	Condition	isspace ( ( ut8 ) * ptr )	278:9:6805:6823	5045819	0	True				
ANR	5045978	CallExpression	isspace ( ( ut8 ) * ptr )		5045819	0					
ANR	5045979	Callee	isspace		5045819	0					
ANR	5045980	Identifier	isspace		5045819	0					
ANR	5045981	ArgumentList	( ut8 ) * ptr		5045819	1					
ANR	5045982	Argument	( ut8 ) * ptr		5045819	0					
ANR	5045983	CastExpression	( ut8 ) * ptr		5045819	0					
ANR	5045984	CastTarget	ut8		5045819	0					
ANR	5045985	UnaryOperationExpression	* ptr		5045819	1					
ANR	5045986	UnaryOperator	*		5045819	0					
ANR	5045987	Identifier	ptr		5045819	1					
ANR	5045988	CompoundStatement		23:30:684:684	5045819	1					
ANR	5045989	ExpressionStatement	ptr ++	279:3:6831:6836	5045819	0	True				
ANR	5045990	PostIncDecOperationExpression	ptr ++		5045819	0					
ANR	5045991	Identifier	ptr		5045819	0					
ANR	5045992	IncDec	++		5045819	1					
ANR	5045993	IfStatement	if ( ! * ptr )		5045819	1					
ANR	5045994	Condition	! * ptr	281:6:6848:6852	5045819	0	True				
ANR	5045995	UnaryOperationExpression	! * ptr		5045819	0					
ANR	5045996	UnaryOperator	!		5045819	0					
ANR	5045997	UnaryOperationExpression	* ptr		5045819	1					
ANR	5045998	UnaryOperator	*		5045819	0					
ANR	5045999	Identifier	ptr		5045819	1					
ANR	5046000	CompoundStatement		26:13:713:713	5045819	1					
ANR	5046001	BreakStatement	break ;	282:3:6860:6865	5045819	0	True				
ANR	5046002	IfStatement	"if ( ( ptr1 = strchr ( ptr , '\\n' ) ) )"		5045819	2					
ANR	5046003	Condition	"ptr1 = strchr ( ptr , '\\n' )"	284:6:6877:6903	5045819	0	True				
ANR	5046004	AssignmentExpression	"ptr1 = strchr ( ptr , '\\n' )"		5045819	0		=			
ANR	5046005	Identifier	ptr1		5045819	0					
ANR	5046006	CallExpression	"strchr ( ptr , '\\n' )"		5045819	1					
ANR	5046007	Callee	strchr		5045819	0					
ANR	5046008	Identifier	strchr		5045819	0					
ANR	5046009	ArgumentList	ptr		5045819	1					
ANR	5046010	Argument	ptr		5045819	0					
ANR	5046011	Identifier	ptr		5045819	0					
ANR	5046012	Argument	'\\n'		5045819	1					
ANR	5046013	PrimaryExpression	'\\n'		5045819	0					
ANR	5046014	CompoundStatement		29:35:764:764	5045819	1					
ANR	5046015	ExpressionStatement	* ptr1 = '\\0'	285:3:6911:6923	5045819	0	True				
ANR	5046016	AssignmentExpression	* ptr1 = '\\0'		5045819	0		=			
ANR	5046017	UnaryOperationExpression	* ptr1		5045819	0					
ANR	5046018	UnaryOperator	*		5045819	0					
ANR	5046019	Identifier	ptr1		5045819	1					
ANR	5046020	PrimaryExpression	'\\0'		5045819	1					
ANR	5046021	ExpressionStatement	"ret = sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"	287:2:6931:7028	5045819	3	True				
ANR	5046022	AssignmentExpression	"ret = sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"		5045819	0		=			
ANR	5046023	Identifier	ret		5045819	0					
ANR	5046024	CallExpression	"sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"		5045819	1					
ANR	5046025	Callee	sscanf		5045819	0					
ANR	5046026	Identifier	sscanf		5045819	0					
ANR	5046027	ArgumentList	ptr		5045819	1					
ANR	5046028	Argument	ptr		5045819	0					
ANR	5046029	Identifier	ptr		5045819	0					
ANR	5046030	Argument	""" %s %d %d %d %d %s %s"""		5045819	1					
ANR	5046031	PrimaryExpression	""" %s %d %d %d %d %s %s"""		5045819	0					
ANR	5046032	Argument	name		5045819	2					
ANR	5046033	Identifier	name		5045819	0					
ANR	5046034	Argument	& number		5045819	3					
ANR	5046035	UnaryOperationExpression	& number		5045819	0					
ANR	5046036	UnaryOperator	&		5045819	0					
ANR	5046037	Identifier	number		5045819	1					
ANR	5046038	Argument	& rel		5045819	4					
ANR	5046039	UnaryOperationExpression	& rel		5045819	0					
ANR	5046040	UnaryOperator	&		5045819	0					
ANR	5046041	Identifier	rel		5045819	1					
ANR	5046042	Argument	& offset		5045819	5					
ANR	5046043	UnaryOperationExpression	& offset		5045819	0					
ANR	5046044	UnaryOperator	&		5045819	0					
ANR	5046045	Identifier	offset		5045819	1					
ANR	5046046	Argument	& size		5045819	6					
ANR	5046047	UnaryOperationExpression	& size		5045819	0					
ANR	5046048	UnaryOperator	&		5045819	0					
ANR	5046049	Identifier	size		5045819	1					
ANR	5046050	Argument	type		5045819	7					
ANR	5046051	Identifier	type		5045819	0					
ANR	5046052	Argument	groups		5045819	8					
ANR	5046053	Identifier	groups		5045819	0					
ANR	5046054	IfStatement	if ( ret < 6 )		5045819	4					
ANR	5046055	Condition	ret < 6	290:6:7072:7078	5045819	0	True				
ANR	5046056	RelationalExpression	ret < 6		5045819	0		<			
ANR	5046057	Identifier	ret		5045819	0					
ANR	5046058	PrimaryExpression	6		5045819	1					
ANR	5046059	CompoundStatement		35:15:939:939	5045819	1					
ANR	5046060	ExpressionStatement	"eprintf ( ""Could not parse line: %s\\n"" , ptr )"	291:3:7086:7129	5045819	0	True				
ANR	5046061	CallExpression	"eprintf ( ""Could not parse line: %s\\n"" , ptr )"		5045819	0					
ANR	5046062	Callee	eprintf		5045819	0					
ANR	5046063	Identifier	eprintf		5045819	0					
ANR	5046064	ArgumentList	"""Could not parse line: %s\\n"""		5045819	1					
ANR	5046065	Argument	"""Could not parse line: %s\\n"""		5045819	0					
ANR	5046066	PrimaryExpression	"""Could not parse line: %s\\n"""		5045819	0					
ANR	5046067	Argument	ptr		5045819	1					
ANR	5046068	Identifier	ptr		5045819	0					
ANR	5046069	IfStatement	if ( ! ptr1 )		5045819	1					
ANR	5046070	Condition	! ptr1	292:7:7138:7142	5045819	0	True				
ANR	5046071	UnaryOperationExpression	! ptr1		5045819	0					
ANR	5046072	UnaryOperator	!		5045819	0					
ANR	5046073	Identifier	ptr1		5045819	1					
ANR	5046074	CompoundStatement		37:14:1003:1003	5045819	1					
ANR	5046075	ReturnStatement	return true ;	293:4:7151:7162	5045819	0	True				
ANR	5046076	Identifier	true		5045819	0					
ANR	5046077	ExpressionStatement	ptr = ptr1 + 1	295:3:7172:7186	5045819	2	True				
ANR	5046078	AssignmentExpression	ptr = ptr1 + 1		5045819	0		=			
ANR	5046079	Identifier	ptr		5045819	0					
ANR	5046080	AdditiveExpression	ptr1 + 1		5045819	1		+			
ANR	5046081	Identifier	ptr1		5045819	0					
ANR	5046082	PrimaryExpression	1		5045819	1					
ANR	5046083	ContinueStatement	continue ;	296:3:7191:7199	5045819	3	True				
ANR	5046084	IfStatement	"if ( r_str_startswith ( name , ""''"" ) )"		5045819	5					
ANR	5046085	Condition	"r_str_startswith ( name , ""''"" )"	299:6:7241:7269	5045819	0	True				
ANR	5046086	CallExpression	"r_str_startswith ( name , ""''"" )"		5045819	0					
ANR	5046087	Callee	r_str_startswith		5045819	0					
ANR	5046088	Identifier	r_str_startswith		5045819	0					
ANR	5046089	ArgumentList	name		5045819	1					
ANR	5046090	Argument	name		5045819	0					
ANR	5046091	Identifier	name		5045819	0					
ANR	5046092	Argument	"""''"""		5045819	1					
ANR	5046093	PrimaryExpression	"""''"""		5045819	0					
ANR	5046094	CompoundStatement		44:37:1130:1130	5045819	1					
ANR	5046095	IfStatement	if ( ! ptr1 )		5045819	0					
ANR	5046096	Condition	! ptr1	300:7:7281:7285	5045819	0	True				
ANR	5046097	UnaryOperationExpression	! ptr1		5045819	0					
ANR	5046098	UnaryOperator	!		5045819	0					
ANR	5046099	Identifier	ptr1		5045819	1					
ANR	5046100	CompoundStatement		45:14:1146:1146	5045819	1					
ANR	5046101	ReturnStatement	return true ;	301:4:7294:7305	5045819	0	True				
ANR	5046102	Identifier	true		5045819	0					
ANR	5046103	ExpressionStatement	ptr = ptr1 + 1	303:3:7315:7329	5045819	1	True				
ANR	5046104	AssignmentExpression	ptr = ptr1 + 1		5045819	0		=			
ANR	5046105	Identifier	ptr		5045819	0					
ANR	5046106	AdditiveExpression	ptr1 + 1		5045819	1		+			
ANR	5046107	Identifier	ptr1		5045819	0					
ANR	5046108	PrimaryExpression	1		5045819	1					
ANR	5046109	ContinueStatement	continue ;	304:3:7334:7342	5045819	2	True				
ANR	5046110	IfStatement	if ( size == 0 )		5045819	6					
ANR	5046111	Condition	size == 0	307:6:7378:7386	5045819	0	True				
ANR	5046112	EqualityExpression	size == 0		5045819	0		==			
ANR	5046113	Identifier	size		5045819	0					
ANR	5046114	PrimaryExpression	0		5045819	1					
ANR	5046115	CompoundStatement		52:17:1247:1247	5045819	1					
ANR	5046116	IfStatement	if ( ! ptr1 )		5045819	0					
ANR	5046117	Condition	! ptr1	308:7:7398:7402	5045819	0	True				
ANR	5046118	UnaryOperationExpression	! ptr1		5045819	0					
ANR	5046119	UnaryOperator	!		5045819	0					
ANR	5046120	Identifier	ptr1		5045819	1					
ANR	5046121	CompoundStatement		53:14:1263:1263	5045819	1					
ANR	5046122	ReturnStatement	return true ;	309:4:7411:7422	5045819	0	True				
ANR	5046123	Identifier	true		5045819	0					
ANR	5046124	ExpressionStatement	ptr = ptr1 + 1	311:3:7432:7446	5045819	1	True				
ANR	5046125	AssignmentExpression	ptr = ptr1 + 1		5045819	0		=			
ANR	5046126	Identifier	ptr		5045819	0					
ANR	5046127	AdditiveExpression	ptr1 + 1		5045819	1		+			
ANR	5046128	Identifier	ptr1		5045819	0					
ANR	5046129	PrimaryExpression	1		5045819	1					
ANR	5046130	ContinueStatement	continue ;	312:3:7451:7459	5045819	2	True				
ANR	5046131	ExpressionStatement	gptr = groups	315:2:7484:7497	5045819	7	True				
ANR	5046132	AssignmentExpression	gptr = groups		5045819	0		=			
ANR	5046133	Identifier	gptr		5045819	0					
ANR	5046134	Identifier	groups		5045819	1					
ANR	5046135	ExpressionStatement	type_bits = 0	316:2:7501:7514	5045819	8	True				
ANR	5046136	AssignmentExpression	type_bits = 0		5045819	0		=			
ANR	5046137	Identifier	type_bits		5045819	0					
ANR	5046138	PrimaryExpression	0		5045819	1					
ANR	5046139	WhileStatement	while ( 1 )		5045819	9					
ANR	5046140	Condition	1	317:9:7525:7525	5045819	0	True				
ANR	5046141	PrimaryExpression	1		5045819	0					
ANR	5046142	CompoundStatement		62:12:1386:1386	5045819	1					
ANR	5046143	IfStatement	"if ( ( gptr1 = strchr ( gptr , ',' ) ) )"		5045819	0					
ANR	5046144	Condition	"gptr1 = strchr ( gptr , ',' )"	318:7:7537:7564	5045819	0	True				
ANR	5046145	AssignmentExpression	"gptr1 = strchr ( gptr , ',' )"		5045819	0		=			
ANR	5046146	Identifier	gptr1		5045819	0					
ANR	5046147	CallExpression	"strchr ( gptr , ',' )"		5045819	1					
ANR	5046148	Callee	strchr		5045819	0					
ANR	5046149	Identifier	strchr		5045819	0					
ANR	5046150	ArgumentList	gptr		5045819	1					
ANR	5046151	Argument	gptr		5045819	0					
ANR	5046152	Identifier	gptr		5045819	0					
ANR	5046153	Argument	"','"		5045819	1					
ANR	5046154	PrimaryExpression	"','"		5045819	0					
ANR	5046155	CompoundStatement		63:37:1425:1425	5045819	1					
ANR	5046156	ExpressionStatement	* gptr1 = '\\0'	319:4:7573:7586	5045819	0	True				
ANR	5046157	AssignmentExpression	* gptr1 = '\\0'		5045819	0		=			
ANR	5046158	UnaryOperationExpression	* gptr1		5045819	0					
ANR	5046159	UnaryOperator	*		5045819	0					
ANR	5046160	Identifier	gptr1		5045819	1					
ANR	5046161	PrimaryExpression	'\\0'		5045819	1					
ANR	5046162	IfStatement	"if ( r_str_startswith ( gptr , ""general"" ) )"		5045819	1					
ANR	5046163	Condition	"r_str_startswith ( gptr , ""general"" )"	321:7:7600:7633	5045819	0	True				
ANR	5046164	CallExpression	"r_str_startswith ( gptr , ""general"" )"		5045819	0					
ANR	5046165	Callee	r_str_startswith		5045819	0					
ANR	5046166	Identifier	r_str_startswith		5045819	0					
ANR	5046167	ArgumentList	gptr		5045819	1					
ANR	5046168	Argument	gptr		5045819	0					
ANR	5046169	Identifier	gptr		5045819	0					
ANR	5046170	Argument	"""general"""		5045819	1					
ANR	5046171	PrimaryExpression	"""general"""		5045819	0					
ANR	5046172	CompoundStatement		66:43:1494:1494	5045819	1					
ANR	5046173	ExpressionStatement	type_bits |= gpr	322:4:7642:7658	5045819	0	True				
ANR	5046174	AssignmentExpression	type_bits |= gpr		5045819	0		|=			
ANR	5046175	Identifier	type_bits		5045819	0					
ANR	5046176	Identifier	gpr		5045819	1					
ANR	5046177	ElseStatement	else		5045819	0					
ANR	5046178	IfStatement	"if ( r_str_startswith ( gptr , ""all"" ) )"		5045819	0					
ANR	5046179	Condition	"r_str_startswith ( gptr , ""all"" )"	323:14:7674:7703	5045819	0	True				
ANR	5046180	CallExpression	"r_str_startswith ( gptr , ""all"" )"		5045819	0					
ANR	5046181	Callee	r_str_startswith		5045819	0					
ANR	5046182	Identifier	r_str_startswith		5045819	0					
ANR	5046183	ArgumentList	gptr		5045819	1					
ANR	5046184	Argument	gptr		5045819	0					
ANR	5046185	Identifier	gptr		5045819	0					
ANR	5046186	Argument	"""all"""		5045819	1					
ANR	5046187	PrimaryExpression	"""all"""		5045819	0					
ANR	5046188	CompoundStatement		68:46:1564:1564	5045819	1					
ANR	5046189	ExpressionStatement	type_bits |= all	324:4:7712:7728	5045819	0	True				
ANR	5046190	AssignmentExpression	type_bits |= all		5045819	0		|=			
ANR	5046191	Identifier	type_bits		5045819	0					
ANR	5046192	Identifier	all		5045819	1					
ANR	5046193	ElseStatement	else		5045819	0					
ANR	5046194	IfStatement	"if ( r_str_startswith ( gptr , ""save"" ) )"		5045819	0					
ANR	5046195	Condition	"r_str_startswith ( gptr , ""save"" )"	325:14:7744:7774	5045819	0	True				
ANR	5046196	CallExpression	"r_str_startswith ( gptr , ""save"" )"		5045819	0					
ANR	5046197	Callee	r_str_startswith		5045819	0					
ANR	5046198	Identifier	r_str_startswith		5045819	0					
ANR	5046199	ArgumentList	gptr		5045819	1					
ANR	5046200	Argument	gptr		5045819	0					
ANR	5046201	Identifier	gptr		5045819	0					
ANR	5046202	Argument	"""save"""		5045819	1					
ANR	5046203	PrimaryExpression	"""save"""		5045819	0					
ANR	5046204	CompoundStatement		70:47:1635:1635	5045819	1					
ANR	5046205	ExpressionStatement	type_bits |= save	326:4:7783:7800	5045819	0	True				
ANR	5046206	AssignmentExpression	type_bits |= save		5045819	0		|=			
ANR	5046207	Identifier	type_bits		5045819	0					
ANR	5046208	Identifier	save		5045819	1					
ANR	5046209	ElseStatement	else		5045819	0					
ANR	5046210	IfStatement	"if ( r_str_startswith ( gptr , ""restore"" ) )"		5045819	0					
ANR	5046211	Condition	"r_str_startswith ( gptr , ""restore"" )"	327:14:7816:7849	5045819	0	True				
ANR	5046212	CallExpression	"r_str_startswith ( gptr , ""restore"" )"		5045819	0					
ANR	5046213	Callee	r_str_startswith		5045819	0					
ANR	5046214	Identifier	r_str_startswith		5045819	0					
ANR	5046215	ArgumentList	gptr		5045819	1					
ANR	5046216	Argument	gptr		5045819	0					
ANR	5046217	Identifier	gptr		5045819	0					
ANR	5046218	Argument	"""restore"""		5045819	1					
ANR	5046219	PrimaryExpression	"""restore"""		5045819	0					
ANR	5046220	CompoundStatement		72:50:1710:1710	5045819	1					
ANR	5046221	ExpressionStatement	type_bits |= restore	328:4:7858:7878	5045819	0	True				
ANR	5046222	AssignmentExpression	type_bits |= restore		5045819	0		|=			
ANR	5046223	Identifier	type_bits		5045819	0					
ANR	5046224	Identifier	restore		5045819	1					
ANR	5046225	ElseStatement	else		5045819	0					
ANR	5046226	IfStatement	"if ( r_str_startswith ( gptr , ""float"" ) )"		5045819	0					
ANR	5046227	Condition	"r_str_startswith ( gptr , ""float"" )"	329:14:7894:7925	5045819	0	True				
ANR	5046228	CallExpression	"r_str_startswith ( gptr , ""float"" )"		5045819	0					
ANR	5046229	Callee	r_str_startswith		5045819	0					
ANR	5046230	Identifier	r_str_startswith		5045819	0					
ANR	5046231	ArgumentList	gptr		5045819	1					
ANR	5046232	Argument	gptr		5045819	0					
ANR	5046233	Identifier	gptr		5045819	0					
ANR	5046234	Argument	"""float"""		5045819	1					
ANR	5046235	PrimaryExpression	"""float"""		5045819	0					
ANR	5046236	CompoundStatement		74:48:1786:1786	5045819	1					
ANR	5046237	ExpressionStatement	type_bits |= float_	330:4:7934:7953	5045819	0	True				
ANR	5046238	AssignmentExpression	type_bits |= float_		5045819	0		|=			
ANR	5046239	Identifier	type_bits		5045819	0					
ANR	5046240	Identifier	float_		5045819	1					
ANR	5046241	ElseStatement	else		5045819	0					
ANR	5046242	IfStatement	"if ( r_str_startswith ( gptr , ""sse"" ) )"		5045819	0					
ANR	5046243	Condition	"r_str_startswith ( gptr , ""sse"" )"	331:14:7969:7998	5045819	0	True				
ANR	5046244	CallExpression	"r_str_startswith ( gptr , ""sse"" )"		5045819	0					
ANR	5046245	Callee	r_str_startswith		5045819	0					
ANR	5046246	Identifier	r_str_startswith		5045819	0					
ANR	5046247	ArgumentList	gptr		5045819	1					
ANR	5046248	Argument	gptr		5045819	0					
ANR	5046249	Identifier	gptr		5045819	0					
ANR	5046250	Argument	"""sse"""		5045819	1					
ANR	5046251	PrimaryExpression	"""sse"""		5045819	0					
ANR	5046252	CompoundStatement		76:46:1859:1859	5045819	1					
ANR	5046253	ExpressionStatement	type_bits |= sse	332:4:8007:8023	5045819	0	True				
ANR	5046254	AssignmentExpression	type_bits |= sse		5045819	0		|=			
ANR	5046255	Identifier	type_bits		5045819	0					
ANR	5046256	Identifier	sse		5045819	1					
ANR	5046257	ElseStatement	else		5045819	0					
ANR	5046258	IfStatement	"if ( r_str_startswith ( gptr , ""mmx"" ) )"		5045819	0					
ANR	5046259	Condition	"r_str_startswith ( gptr , ""mmx"" )"	333:14:8039:8068	5045819	0	True				
ANR	5046260	CallExpression	"r_str_startswith ( gptr , ""mmx"" )"		5045819	0					
ANR	5046261	Callee	r_str_startswith		5045819	0					
ANR	5046262	Identifier	r_str_startswith		5045819	0					
ANR	5046263	ArgumentList	gptr		5045819	1					
ANR	5046264	Argument	gptr		5045819	0					
ANR	5046265	Identifier	gptr		5045819	0					
ANR	5046266	Argument	"""mmx"""		5045819	1					
ANR	5046267	PrimaryExpression	"""mmx"""		5045819	0					
ANR	5046268	CompoundStatement		78:46:1929:1929	5045819	1					
ANR	5046269	ExpressionStatement	type_bits |= mmx	334:4:8077:8093	5045819	0	True				
ANR	5046270	AssignmentExpression	type_bits |= mmx		5045819	0		|=			
ANR	5046271	Identifier	type_bits		5045819	0					
ANR	5046272	Identifier	mmx		5045819	1					
ANR	5046273	ElseStatement	else		5045819	0					
ANR	5046274	IfStatement	"if ( r_str_startswith ( gptr , ""vector"" ) )"		5045819	0					
ANR	5046275	Condition	"r_str_startswith ( gptr , ""vector"" )"	335:14:8109:8141	5045819	0	True				
ANR	5046276	CallExpression	"r_str_startswith ( gptr , ""vector"" )"		5045819	0					
ANR	5046277	Callee	r_str_startswith		5045819	0					
ANR	5046278	Identifier	r_str_startswith		5045819	0					
ANR	5046279	ArgumentList	gptr		5045819	1					
ANR	5046280	Argument	gptr		5045819	0					
ANR	5046281	Identifier	gptr		5045819	0					
ANR	5046282	Argument	"""vector"""		5045819	1					
ANR	5046283	PrimaryExpression	"""vector"""		5045819	0					
ANR	5046284	CompoundStatement		80:49:2002:2002	5045819	1					
ANR	5046285	ExpressionStatement	type_bits |= vector	336:4:8150:8169	5045819	0	True				
ANR	5046286	AssignmentExpression	type_bits |= vector		5045819	0		|=			
ANR	5046287	Identifier	type_bits		5045819	0					
ANR	5046288	Identifier	vector		5045819	1					
ANR	5046289	ElseStatement	else		5045819	0					
ANR	5046290	IfStatement	"if ( r_str_startswith ( gptr , ""system"" ) )"		5045819	0					
ANR	5046291	Condition	"r_str_startswith ( gptr , ""system"" )"	337:14:8185:8217	5045819	0	True				
ANR	5046292	CallExpression	"r_str_startswith ( gptr , ""system"" )"		5045819	0					
ANR	5046293	Callee	r_str_startswith		5045819	0					
ANR	5046294	Identifier	r_str_startswith		5045819	0					
ANR	5046295	ArgumentList	gptr		5045819	1					
ANR	5046296	Argument	gptr		5045819	0					
ANR	5046297	Identifier	gptr		5045819	0					
ANR	5046298	Argument	"""system"""		5045819	1					
ANR	5046299	PrimaryExpression	"""system"""		5045819	0					
ANR	5046300	CompoundStatement		82:49:2078:2078	5045819	1					
ANR	5046301	ExpressionStatement	type_bits |= system	338:4:8226:8245	5045819	0	True				
ANR	5046302	AssignmentExpression	type_bits |= system		5045819	0		|=			
ANR	5046303	Identifier	type_bits		5045819	0					
ANR	5046304	Identifier	system		5045819	1					
ANR	5046305	IfStatement	if ( ! gptr1 )		5045819	2					
ANR	5046306	Condition	! gptr1	340:7:8259:8264	5045819	0	True				
ANR	5046307	UnaryOperationExpression	! gptr1		5045819	0					
ANR	5046308	UnaryOperator	!		5045819	0					
ANR	5046309	Identifier	gptr1		5045819	1					
ANR	5046310	CompoundStatement		85:15:2125:2125	5045819	1					
ANR	5046311	BreakStatement	break ;	341:4:8273:8278	5045819	0	True				
ANR	5046312	ExpressionStatement	gptr = gptr1 + 1	343:3:8288:8304	5045819	3	True				
ANR	5046313	AssignmentExpression	gptr = gptr1 + 1		5045819	0		=			
ANR	5046314	Identifier	gptr		5045819	0					
ANR	5046315	AdditiveExpression	gptr1 + 1		5045819	1		+			
ANR	5046316	Identifier	gptr1		5045819	0					
ANR	5046317	PrimaryExpression	1		5045819	1					
ANR	5046318	IfStatement	if ( ! * type )		5045819	10					
ANR	5046319	Condition	! * type	346:6:8350:8355	5045819	0	True				
ANR	5046320	UnaryOperationExpression	! * type		5045819	0					
ANR	5046321	UnaryOperator	!		5045819	0					
ANR	5046322	UnaryOperationExpression	* type		5045819	1					
ANR	5046323	UnaryOperator	*		5045819	0					
ANR	5046324	Identifier	type		5045819	1					
ANR	5046325	CompoundStatement		91:14:2216:2216	5045819	1					
ANR	5046326	IfStatement	if ( ! ptr1 )		5045819	0					
ANR	5046327	Condition	! ptr1	347:7:8367:8371	5045819	0	True				
ANR	5046328	UnaryOperationExpression	! ptr1		5045819	0					
ANR	5046329	UnaryOperator	!		5045819	0					
ANR	5046330	Identifier	ptr1		5045819	1					
ANR	5046331	CompoundStatement		92:14:2232:2232	5045819	1					
ANR	5046332	ReturnStatement	return true ;	348:4:8380:8391	5045819	0	True				
ANR	5046333	Identifier	true		5045819	0					
ANR	5046334	ExpressionStatement	ptr = ptr1 + 1	350:3:8401:8415	5045819	1	True				
ANR	5046335	AssignmentExpression	ptr = ptr1 + 1		5045819	0		=			
ANR	5046336	Identifier	ptr		5045819	0					
ANR	5046337	AdditiveExpression	ptr1 + 1		5045819	1		+			
ANR	5046338	Identifier	ptr1		5045819	0					
ANR	5046339	PrimaryExpression	1		5045819	1					
ANR	5046340	ContinueStatement	continue ;	351:3:8420:8428	5045819	2	True				
ANR	5046341	IfStatement	if ( ! ( type_bits & sse ) && ! ( type_bits & float_ ) )		5045819	11					
ANR	5046342	Condition	! ( type_bits & sse ) && ! ( type_bits & float_ )	354:6:8523:8565	5045819	0	True				
ANR	5046343	AndExpression	! ( type_bits & sse ) && ! ( type_bits & float_ )		5045819	0		&&			
ANR	5046344	UnaryOperationExpression	! ( type_bits & sse )		5045819	0					
ANR	5046345	UnaryOperator	!		5045819	0					
ANR	5046346	BitAndExpression	type_bits & sse		5045819	1		&			
ANR	5046347	Identifier	type_bits		5045819	0					
ANR	5046348	Identifier	sse		5045819	1					
ANR	5046349	UnaryOperationExpression	! ( type_bits & float_ )		5045819	1					
ANR	5046350	UnaryOperator	!		5045819	0					
ANR	5046351	BitAndExpression	type_bits & float_		5045819	1		&			
ANR	5046352	Identifier	type_bits		5045819	0					
ANR	5046353	Identifier	float_		5045819	1					
ANR	5046354	CompoundStatement		99:51:2426:2426	5045819	1					
ANR	5046355	ExpressionStatement	type_bits |= gpr	355:3:8573:8589	5045819	0	True				
ANR	5046356	AssignmentExpression	type_bits |= gpr		5045819	0		|=			
ANR	5046357	Identifier	type_bits		5045819	0					
ANR	5046358	Identifier	gpr		5045819	1					
ANR	5046359	ExpressionStatement	"eprintf ( ""%s\\t%s\\t.%d\\t%d\\t0\\n"" , ( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"" , name , size * 8 , offset )"	358:2:8613:8816	5045819	12	True				
ANR	5046360	CallExpression	"eprintf ( ""%s\\t%s\\t.%d\\t%d\\t0\\n"" , ( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"" , name , size * 8 , offset )"		5045819	0					
ANR	5046361	Callee	eprintf		5045819	0					
ANR	5046362	Identifier	eprintf		5045819	0					
ANR	5046363	ArgumentList	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5045819	1					
ANR	5046364	Argument	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5045819	0					
ANR	5046365	PrimaryExpression	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5045819	0					
ANR	5046366	Argument	"( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"""		5045819	1					
ANR	5046367	ConditionalExpression	"( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"""		5045819	0					
ANR	5046368	Condition	( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse )		5045819	0					
ANR	5046369	OrExpression	( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse )		5045819	0		||			
ANR	5046370	BitAndExpression	type_bits & mmx		5045819	0		&			
ANR	5046371	Identifier	type_bits		5045819	0					
ANR	5046372	Identifier	mmx		5045819	1					
ANR	5046373	OrExpression	( type_bits & float_ ) || ( type_bits & sse )		5045819	1		||			
ANR	5046374	BitAndExpression	type_bits & float_		5045819	0		&			
ANR	5046375	Identifier	type_bits		5045819	0					
ANR	5046376	Identifier	float_		5045819	1					
ANR	5046377	BitAndExpression	type_bits & sse		5045819	1		&			
ANR	5046378	Identifier	type_bits		5045819	0					
ANR	5046379	Identifier	sse		5045819	1					
ANR	5046380	PrimaryExpression	"""fpu"""		5045819	1					
ANR	5046381	PrimaryExpression	"""gpr"""		5045819	2					
ANR	5046382	Argument	name		5045819	2					
ANR	5046383	Identifier	name		5045819	0					
ANR	5046384	Argument	size * 8		5045819	3					
ANR	5046385	MultiplicativeExpression	size * 8		5045819	0		*			
ANR	5046386	Identifier	size		5045819	0					
ANR	5046387	PrimaryExpression	8		5045819	1					
ANR	5046388	Argument	offset		5045819	4					
ANR	5046389	Identifier	offset		5045819	0					
ANR	5046390	IfStatement	if ( ! ptr1 )		5045819	13					
ANR	5046391	Condition	! ptr1	363:6:8845:8849	5045819	0	True				
ANR	5046392	UnaryOperationExpression	! ptr1		5045819	0					
ANR	5046393	UnaryOperator	!		5045819	0					
ANR	5046394	Identifier	ptr1		5045819	1					
ANR	5046395	CompoundStatement		108:13:2710:2710	5045819	1					
ANR	5046396	ReturnStatement	return true ;	364:3:8857:8868	5045819	0	True				
ANR	5046397	Identifier	true		5045819	0					
ANR	5046398	ExpressionStatement	ptr = ptr1 + 1	366:2:8876:8890	5045819	14	True				
ANR	5046399	AssignmentExpression	ptr = ptr1 + 1		5045819	0		=			
ANR	5046400	Identifier	ptr		5045819	0					
ANR	5046401	AdditiveExpression	ptr1 + 1		5045819	1		+			
ANR	5046402	Identifier	ptr1		5045819	0					
ANR	5046403	PrimaryExpression	1		5045819	1					
ANR	5046404	ContinueStatement	continue ;	367:2:8894:8902	5045819	15	True				
ANR	5046405	ReturnStatement	return true ;	369:1:8908:8919	5045819	7	True				
ANR	5046406	Identifier	true		5045819	0					
ANR	5046407	ReturnType	static bool		5045819	1					
ANR	5046408	Identifier	gdb_to_r2_profile		5045819	2					
ANR	5046409	ParameterList	char * gdb		5045819	3					
ANR	5046410	Parameter	char * gdb	256:30:6130:6138	5045819	0	True				
ANR	5046411	ParameterType	char *		5045819	0					
ANR	5046412	Identifier	gdb		5045819	1					
ANR	5046413	CFGEntryNode	ENTRY		5045819		True				
ANR	5046414	CFGExitNode	EXIT		5045819		True				
ANR	5046415	InfiniteForNode	true		5045819		True				
ANR	5046416	Symbol	sse		5045819						
ANR	5046417	Symbol	type_bits		5045819						
ANR	5046418	Symbol	save		5045819						
ANR	5046419	Symbol	strchr		5045819						
ANR	5046420	Symbol	gptr1		5045819						
ANR	5046421	Symbol	type		5045819						
ANR	5046422	Symbol	& number		5045819						
ANR	5046423	Symbol	number		5045819						
ANR	5046424	Symbol	* type		5045819						
ANR	5046425	Symbol	gptr		5045819						
ANR	5046426	Symbol	rel		5045819						
ANR	5046427	Symbol	* ptr		5045819						
ANR	5046428	Symbol	mmx		5045819						
ANR	5046429	Symbol	vector		5045819						
ANR	5046430	Symbol	* ptr1		5045819						
ANR	5046431	Symbol	all		5045819						
ANR	5046432	Symbol	ret		5045819						
ANR	5046433	Symbol	r_str_startswith		5045819						
ANR	5046434	Symbol	gdb		5045819						
ANR	5046435	Symbol	restore		5045819						
ANR	5046436	Symbol	offset		5045819						
ANR	5046437	Symbol	& offset		5045819						
ANR	5046438	Symbol	gpr		5045819						
ANR	5046439	Symbol	isspace		5045819						
ANR	5046440	Symbol	false		5045819						
ANR	5046441	Symbol	groups		5045819						
ANR	5046442	Symbol	& size		5045819						
ANR	5046443	Symbol	ptr		5045819						
ANR	5046444	Symbol	system		5045819						
ANR	5046445	Symbol	size		5045819						
ANR	5046446	Symbol	* gptr1		5045819						
ANR	5046447	Symbol	sscanf		5045819						
ANR	5046448	Symbol	ptr1		5045819						
ANR	5046449	Symbol	float_		5045819						
ANR	5046450	Symbol	name		5045819						
ANR	5046451	Symbol	& rel		5045819						
ANR	5046452	Symbol	true		5045819						
ANR	5046453	Function	r_reg_parse_gdb_profile	372:0:8924:9407							
ANR	5046454	FunctionDef	r_reg_parse_gdb_profile (const char * profile_file)		5046453	0					
ANR	5046455	CompoundStatement		372:61:8985:9407	5046453	0					
ANR	5046456	IdentifierDeclStatement	"char * base , * str = NULL ;"	373:1:8988:9011	5046453	0	True				
ANR	5046457	IdentifierDecl	* base		5046453	0					
ANR	5046458	IdentifierDeclType	char *		5046453	0					
ANR	5046459	Identifier	base		5046453	1					
ANR	5046460	IdentifierDecl	* str = NULL		5046453	1					
ANR	5046461	IdentifierDeclType	char *		5046453	0					
ANR	5046462	Identifier	str		5046453	1					
ANR	5046463	AssignmentExpression	* str = NULL		5046453	2		=			
ANR	5046464	Identifier	NULL		5046453	0					
ANR	5046465	Identifier	NULL		5046453	1					
ANR	5046466	IfStatement	"if ( ! ( str = r_file_slurp ( profile_file , NULL ) ) )"		5046453	1					
ANR	5046467	Condition	"! ( str = r_file_slurp ( profile_file , NULL ) )"	374:5:9018:9059	5046453	0	True				
ANR	5046468	UnaryOperationExpression	"! ( str = r_file_slurp ( profile_file , NULL ) )"		5046453	0					
ANR	5046469	UnaryOperator	!		5046453	0					
ANR	5046470	AssignmentExpression	"str = r_file_slurp ( profile_file , NULL )"		5046453	1		=			
ANR	5046471	Identifier	str		5046453	0					
ANR	5046472	CallExpression	"r_file_slurp ( profile_file , NULL )"		5046453	1					
ANR	5046473	Callee	r_file_slurp		5046453	0					
ANR	5046474	Identifier	r_file_slurp		5046453	0					
ANR	5046475	ArgumentList	profile_file		5046453	1					
ANR	5046476	Argument	profile_file		5046453	0					
ANR	5046477	Identifier	profile_file		5046453	0					
ANR	5046478	Argument	NULL		5046453	1					
ANR	5046479	Identifier	NULL		5046453	0					
ANR	5046480	CompoundStatement		3:49:76:76	5046453	1					
ANR	5046481	IfStatement	if ( ( base = r_sys_getenv ( R_LIB_ENV ) ) )		5046453	0					
ANR	5046482	Condition	base = r_sys_getenv ( R_LIB_ENV )	375:6:9070:9102	5046453	0	True				
ANR	5046483	AssignmentExpression	base = r_sys_getenv ( R_LIB_ENV )		5046453	0		=			
ANR	5046484	Identifier	base		5046453	0					
ANR	5046485	CallExpression	r_sys_getenv ( R_LIB_ENV )		5046453	1					
ANR	5046486	Callee	r_sys_getenv		5046453	0					
ANR	5046487	Identifier	r_sys_getenv		5046453	0					
ANR	5046488	ArgumentList	R_LIB_ENV		5046453	1					
ANR	5046489	Argument	R_LIB_ENV		5046453	0					
ANR	5046490	Identifier	R_LIB_ENV		5046453	0					
ANR	5046491	CompoundStatement		5:3:124:170	5046453	1					
ANR	5046492	IdentifierDeclStatement	"char * file = r_str_append ( base , profile_file ) ;"	376:3:9110:9156	5046453	0	True				
ANR	5046493	IdentifierDecl	"* file = r_str_append ( base , profile_file )"		5046453	0					
ANR	5046494	IdentifierDeclType	char *		5046453	0					
ANR	5046495	Identifier	file		5046453	1					
ANR	5046496	AssignmentExpression	"* file = r_str_append ( base , profile_file )"		5046453	2		=			
ANR	5046497	Identifier	file		5046453	0					
ANR	5046498	CallExpression	"r_str_append ( base , profile_file )"		5046453	1					
ANR	5046499	Callee	r_str_append		5046453	0					
ANR	5046500	Identifier	r_str_append		5046453	0					
ANR	5046501	ArgumentList	base		5046453	1					
ANR	5046502	Argument	base		5046453	0					
ANR	5046503	Identifier	base		5046453	0					
ANR	5046504	Argument	profile_file		5046453	1					
ANR	5046505	Identifier	profile_file		5046453	0					
ANR	5046506	IfStatement	if ( file )		5046453	1					
ANR	5046507	Condition	file	377:7:9165:9168	5046453	0	True				
ANR	5046508	Identifier	file		5046453	0					
ANR	5046509	CompoundStatement		6:13:185:185	5046453	1					
ANR	5046510	ExpressionStatement	"str = r_file_slurp ( file , NULL )"	378:4:9177:9208	5046453	0	True				
ANR	5046511	AssignmentExpression	"str = r_file_slurp ( file , NULL )"		5046453	0		=			
ANR	5046512	Identifier	str		5046453	0					
ANR	5046513	CallExpression	"r_file_slurp ( file , NULL )"		5046453	1					
ANR	5046514	Callee	r_file_slurp		5046453	0					
ANR	5046515	Identifier	r_file_slurp		5046453	0					
ANR	5046516	ArgumentList	file		5046453	1					
ANR	5046517	Argument	file		5046453	0					
ANR	5046518	Identifier	file		5046453	0					
ANR	5046519	Argument	NULL		5046453	1					
ANR	5046520	Identifier	NULL		5046453	0					
ANR	5046521	ExpressionStatement	free ( file )	379:4:9214:9225	5046453	1	True				
ANR	5046522	CallExpression	free ( file )		5046453	0					
ANR	5046523	Callee	free		5046453	0					
ANR	5046524	Identifier	free		5046453	0					
ANR	5046525	ArgumentList	file		5046453	1					
ANR	5046526	Argument	file		5046453	0					
ANR	5046527	Identifier	file		5046453	0					
ANR	5046528	IfStatement	if ( ! str )		5046453	2					
ANR	5046529	Condition	! str	383:5:9244:9247	5046453	0	True				
ANR	5046530	UnaryOperationExpression	! str		5046453	0					
ANR	5046531	UnaryOperator	!		5046453	0					
ANR	5046532	Identifier	str		5046453	1					
ANR	5046533	CompoundStatement		12:11:264:264	5046453	1					
ANR	5046534	ExpressionStatement	"eprintf ( ""r_reg_parse_gdb_profile: Cannot find '%s'\\n"" , profile_file )"	384:2:9254:9323	5046453	0	True				
ANR	5046535	CallExpression	"eprintf ( ""r_reg_parse_gdb_profile: Cannot find '%s'\\n"" , profile_file )"		5046453	0					
ANR	5046536	Callee	eprintf		5046453	0					
ANR	5046537	Identifier	eprintf		5046453	0					
ANR	5046538	ArgumentList	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5046453	1					
ANR	5046539	Argument	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5046453	0					
ANR	5046540	PrimaryExpression	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5046453	0					
ANR	5046541	Argument	profile_file		5046453	1					
ANR	5046542	Identifier	profile_file		5046453	0					
ANR	5046543	ReturnStatement	return false ;	385:2:9327:9339	5046453	1	True				
ANR	5046544	Identifier	false		5046453	0					
ANR	5046545	IdentifierDeclStatement	bool ret = gdb_to_r2_profile ( str ) ;	387:1:9345:9379	5046453	3	True				
ANR	5046546	IdentifierDecl	ret = gdb_to_r2_profile ( str )		5046453	0					
ANR	5046547	IdentifierDeclType	bool		5046453	0					
ANR	5046548	Identifier	ret		5046453	1					
ANR	5046549	AssignmentExpression	ret = gdb_to_r2_profile ( str )		5046453	2		=			
ANR	5046550	Identifier	ret		5046453	0					
ANR	5046551	CallExpression	gdb_to_r2_profile ( str )		5046453	1					
ANR	5046552	Callee	gdb_to_r2_profile		5046453	0					
ANR	5046553	Identifier	gdb_to_r2_profile		5046453	0					
ANR	5046554	ArgumentList	str		5046453	1					
ANR	5046555	Argument	str		5046453	0					
ANR	5046556	Identifier	str		5046453	0					
ANR	5046557	ExpressionStatement	free ( str )	388:1:9382:9392	5046453	4	True				
ANR	5046558	CallExpression	free ( str )		5046453	0					
ANR	5046559	Callee	free		5046453	0					
ANR	5046560	Identifier	free		5046453	0					
ANR	5046561	ArgumentList	str		5046453	1					
ANR	5046562	Argument	str		5046453	0					
ANR	5046563	Identifier	str		5046453	0					
ANR	5046564	ReturnStatement	return ret ;	389:1:9395:9405	5046453	5	True				
ANR	5046565	Identifier	ret		5046453	0					
ANR	5046566	ReturnType	R_API bool		5046453	1					
ANR	5046567	Identifier	r_reg_parse_gdb_profile		5046453	2					
ANR	5046568	ParameterList	const char * profile_file		5046453	3					
ANR	5046569	Parameter	const char * profile_file	372:35:8959:8982	5046453	0	True				
ANR	5046570	ParameterType	const char *		5046453	0					
ANR	5046571	Identifier	profile_file		5046453	1					
ANR	5046572	CFGEntryNode	ENTRY		5046453		True				
ANR	5046573	CFGExitNode	EXIT		5046453		True				
ANR	5046574	Symbol	str		5046453						
ANR	5046575	Symbol	ret		5046453						
ANR	5046576	Symbol	r_str_append		5046453						
ANR	5046577	Symbol	r_file_slurp		5046453						
ANR	5046578	Symbol	R_LIB_ENV		5046453						
ANR	5046579	Symbol	NULL		5046453						
ANR	5046580	Symbol	file		5046453						
ANR	5046581	Symbol	r_sys_getenv		5046453						
ANR	5046582	Symbol	gdb_to_r2_profile		5046453						
ANR	5046583	Symbol	false		5046453						
ANR	5046584	Symbol	profile_file		5046453						
ANR	5046585	Symbol	base		5046453						
