command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	317353	File	data/converged/CVE-2019-16718~_radare2/arm-dis.c								
ANR	317354	ClassDef	map_type	56:0:1772:1823							
ANR	317355	ClassDef	arm_private_data	63:0:1827:2303							
ANR	317356	DeclStmt									
ANR	317357	Decl							arm_feature_set	arm_feature_set	features
ANR	317358	DeclStmt									
ANR	317359	Decl							int	int	has_mapping_symbols
ANR	317360	DeclStmt									
ANR	317361	Decl							enum map_type	enum map_type	last_type
ANR	317362	DeclStmt									
ANR	317363	Decl							int	int	last_mapping_sym
ANR	317364	DeclStmt									
ANR	317365	Decl							bfd_vma	bfd_vma	last_mapping_addr
ANR	317366	ClassDef	opcode32	80:0:2307:2594							
ANR	317367	DeclStmt									
ANR	317368	Decl							arm_feature_set	arm_feature_set	arch
ANR	317369	DeclStmt									
ANR	317370	Decl							unsigned long	unsigned long	value
ANR	317371	DeclStmt									
ANR	317372	Decl							unsigned long	unsigned long	mask
ANR	317373	DeclStmt									
ANR	317374	Decl							const char	const char *	assembler
ANR	317375	ClassDef	opcode16	88:0:2598:2820							
ANR	317376	DeclStmt									
ANR	317377	Decl							arm_feature_set	arm_feature_set	arch
ANR	317378	DeclStmt									
ANR	317379	Decl							unsigned short	unsigned short	value
ANR	317380	Decl							unsigned short	unsigned short	mask
ANR	317381	DeclStmt									
ANR	317382	Decl							const char	const char *	assembler
ANR	317383	ClassDef	opcode_sentinel_enum	146:0:5134:5257							
ANR	317384	DeclStmt									
ANR	317385	Decl							opcode_sentinel_enum	opcode_sentinel_enum	opcode_sentinels
ANR	317386	DeclStmt									
ANR	317387	Decl							const struct opcode32	const struct opcode32 [ ]	coprocessor_opcodes
ANR	317388	DeclStmt									
ANR	317389	Decl							const struct opcode32	const struct opcode32 [ ]	neon_opcodes
ANR	317390	DeclStmt									
ANR	317391	Decl							const struct opcode32	const struct opcode32 [ ]	arm_opcodes
ANR	317392	DeclStmt									
ANR	317393	Decl							const struct opcode16	const struct opcode16 [ ]	thumb_opcodes
ANR	317394	DeclStmt									
ANR	317395	Decl							const struct opcode32	const struct opcode32 [ ]	thumb32_opcodes
ANR	317396	ClassDef	<unnamed>	3198:8:155386:155484							
ANR	317397	DeclStmt									
ANR	317398	Decl							const char	const char *	name
ANR	317399	DeclStmt									
ANR	317400	Decl							const char	const char *	description
ANR	317401	DeclStmt									
ANR	317402	Decl							const char	const char * [ 16 ]	reg_names
ANR	317403	DeclStmt									
ANR	317404	Decl									arm_regname
ANR	317405	DeclStmt									
ANR	317406	Decl							const arm_regname	const arm_regname [ ]	regnames
ANR	317407	DeclStmt									
ANR	317408	Decl							unsigned int	unsigned int	regname_selected
ANR	317409	DeclStmt									
ANR	317410	Decl							bfd_boolean	bfd_boolean	force_thumb
ANR	317411	DeclStmt									
ANR	317412	Decl							unsigned int	unsigned int	ifthen_state
ANR	317413	DeclStmt									
ANR	317414	Decl							unsigned int	unsigned int	ifthen_next_state
ANR	317415	DeclStmt									
ANR	317416	Decl							bfd_vma	bfd_vma	ifthen_address
ANR	317417	Function	arm_decode_bitfield	3272:0:158365:159144							
ANR	317418	FunctionDef	"arm_decode_bitfield (const char * ptr , unsigned long insn , unsigned long * valuep , int * widthp)"		317417	0					
ANR	317419	CompoundStatement		3277:0:158500:159144	317417	0					
ANR	317420	IdentifierDeclStatement	unsigned long value = 0 ;	3278:2:158504:158527	317417	0	True				
ANR	317421	IdentifierDecl	value = 0		317417	0					
ANR	317422	IdentifierDeclType	unsigned long		317417	0					
ANR	317423	Identifier	value		317417	1					
ANR	317424	AssignmentExpression	value = 0		317417	2		=			
ANR	317425	Identifier	value		317417	0					
ANR	317426	PrimaryExpression	0		317417	1					
ANR	317427	IdentifierDeclStatement	int width = 0 ;	3279:2:158531:158544	317417	1	True				
ANR	317428	IdentifierDecl	width = 0		317417	0					
ANR	317429	IdentifierDeclType	int		317417	0					
ANR	317430	Identifier	width		317417	1					
ANR	317431	AssignmentExpression	width = 0		317417	2		=			
ANR	317432	Identifier	width		317417	0					
ANR	317433	PrimaryExpression	0		317417	1					
ANR	317434	DoStatement	do		317417	2					
ANR	317435	CompoundStatement		8:6:85:93	317417	0					
ANR	317436	IdentifierDeclStatement	"int start , end ;"	3283:6:158564:158578	317417	0	True				
ANR	317437	IdentifierDecl	start		317417	0					
ANR	317438	IdentifierDeclType	int		317417	0					
ANR	317439	Identifier	start		317417	1					
ANR	317440	IdentifierDecl	end		317417	1					
ANR	317441	IdentifierDeclType	int		317417	0					
ANR	317442	Identifier	end		317417	1					
ANR	317443	IdentifierDeclStatement	int bits ;	3284:6:158586:158594	317417	1	True				
ANR	317444	IdentifierDecl	bits		317417	0					
ANR	317445	IdentifierDeclType	int		317417	0					
ANR	317446	Identifier	bits		317417	1					
ANR	317447	ForStatement	for ( start = 0 ; * ptr >= '0' && * ptr <= '9' ; ptr ++ )		317417	2					
ANR	317448	ForInit	start = 0 ;	3286:11:158608:158617	317417	0	True				
ANR	317449	AssignmentExpression	start = 0		317417	0		=			
ANR	317450	Identifier	start		317417	0					
ANR	317451	PrimaryExpression	0		317417	1					
ANR	317452	Condition	* ptr >= '0' && * ptr <= '9'	3286:22:158619:158644	317417	1	True				
ANR	317453	AndExpression	* ptr >= '0' && * ptr <= '9'		317417	0		&&			
ANR	317454	RelationalExpression	* ptr >= '0'		317417	0		>=			
ANR	317455	UnaryOperationExpression	* ptr		317417	0					
ANR	317456	UnaryOperator	*		317417	0					
ANR	317457	Identifier	ptr		317417	1					
ANR	317458	PrimaryExpression	'0'		317417	1					
ANR	317459	RelationalExpression	* ptr <= '9'		317417	1		<=			
ANR	317460	UnaryOperationExpression	* ptr		317417	0					
ANR	317461	UnaryOperator	*		317417	0					
ANR	317462	Identifier	ptr		317417	1					
ANR	317463	PrimaryExpression	'9'		317417	1					
ANR	317464	PostIncDecOperationExpression	ptr ++	3286:50:158647:158651	317417	2	True				
ANR	317465	Identifier	ptr		317417	0					
ANR	317466	IncDec	++		317417	1					
ANR	317467	CompoundStatement		10:57:153:153	317417	3					
ANR	317468	ExpressionStatement	start = start * 10 + * ptr - '0'	3287:7:158663:158694	317417	0	True				
ANR	317469	AssignmentExpression	start = start * 10 + * ptr - '0'		317417	0		=			
ANR	317470	Identifier	start		317417	0					
ANR	317471	AdditiveExpression	start * 10 + * ptr - '0'		317417	1		+			
ANR	317472	MultiplicativeExpression	start * 10		317417	0		*			
ANR	317473	Identifier	start		317417	0					
ANR	317474	PrimaryExpression	10		317417	1					
ANR	317475	AdditiveExpression	* ptr - '0'		317417	1		-			
ANR	317476	UnaryOperationExpression	* ptr		317417	0					
ANR	317477	UnaryOperator	*		317417	0					
ANR	317478	Identifier	ptr		317417	1					
ANR	317479	PrimaryExpression	'0'		317417	1					
ANR	317480	IfStatement	if ( * ptr == '-' )		317417	3					
ANR	317481	Condition	* ptr == '-'	3289:10:158714:158724	317417	0	True				
ANR	317482	EqualityExpression	* ptr == '-'		317417	0		==			
ANR	317483	UnaryOperationExpression	* ptr		317417	0					
ANR	317484	UnaryOperator	*		317417	0					
ANR	317485	Identifier	ptr		317417	1					
ANR	317486	PrimaryExpression	'-'		317417	1					
ANR	317487	CompoundStatement		13:23:226:226	317417	1					
ANR	317488	ForStatement	"for ( end = 0 , ptr ++ ; * ptr >= '0' && * ptr <= '9' ; ptr ++ )"		317417	0					
ANR	317489	ForInit	"end = 0 , ptr ++ ;"	3290:12:158741:158755	317417	0	True				
ANR	317490	Expression	"end = 0 , ptr ++"		317417	0					
ANR	317491	AssignmentExpression	end = 0		317417	0		=			
ANR	317492	Identifier	end		317417	0					
ANR	317493	PrimaryExpression	0		317417	1					
ANR	317494	PostIncDecOperationExpression	ptr ++		317417	1					
ANR	317495	Identifier	ptr		317417	0					
ANR	317496	IncDec	++		317417	1					
ANR	317497	Condition	* ptr >= '0' && * ptr <= '9'	3290:28:158757:158782	317417	1	True				
ANR	317498	AndExpression	* ptr >= '0' && * ptr <= '9'		317417	0		&&			
ANR	317499	RelationalExpression	* ptr >= '0'		317417	0		>=			
ANR	317500	UnaryOperationExpression	* ptr		317417	0					
ANR	317501	UnaryOperator	*		317417	0					
ANR	317502	Identifier	ptr		317417	1					
ANR	317503	PrimaryExpression	'0'		317417	1					
ANR	317504	RelationalExpression	* ptr <= '9'		317417	1		<=			
ANR	317505	UnaryOperationExpression	* ptr		317417	0					
ANR	317506	UnaryOperator	*		317417	0					
ANR	317507	Identifier	ptr		317417	1					
ANR	317508	PrimaryExpression	'9'		317417	1					
ANR	317509	PostIncDecOperationExpression	ptr ++	3290:56:158785:158789	317417	2	True				
ANR	317510	Identifier	ptr		317417	0					
ANR	317511	IncDec	++		317417	1					
ANR	317512	CompoundStatement		14:63:291:291	317417	3					
ANR	317513	ExpressionStatement	end = end * 10 + * ptr - '0'	3291:8:158802:158829	317417	0	True				
ANR	317514	AssignmentExpression	end = end * 10 + * ptr - '0'		317417	0		=			
ANR	317515	Identifier	end		317417	0					
ANR	317516	AdditiveExpression	end * 10 + * ptr - '0'		317417	1		+			
ANR	317517	MultiplicativeExpression	end * 10		317417	0		*			
ANR	317518	Identifier	end		317417	0					
ANR	317519	PrimaryExpression	10		317417	1					
ANR	317520	AdditiveExpression	* ptr - '0'		317417	1		-			
ANR	317521	UnaryOperationExpression	* ptr		317417	0					
ANR	317522	UnaryOperator	*		317417	0					
ANR	317523	Identifier	ptr		317417	1					
ANR	317524	PrimaryExpression	'0'		317417	1					
ANR	317525	ElseStatement	else		317417	0					
ANR	317526	CompoundStatement		17:13:352:352	317417	0					
ANR	317527	ExpressionStatement	end = start	3294:7:158862:158873	317417	0	True				
ANR	317528	AssignmentExpression	end = start		317417	0		=			
ANR	317529	Identifier	end		317417	0					
ANR	317530	Identifier	start		317417	1					
ANR	317531	ExpressionStatement	bits = end - start	3296:6:158889:158907	317417	4	True				
ANR	317532	AssignmentExpression	bits = end - start		317417	0		=			
ANR	317533	Identifier	bits		317417	0					
ANR	317534	AdditiveExpression	end - start		317417	1		-			
ANR	317535	Identifier	end		317417	0					
ANR	317536	Identifier	start		317417	1					
ANR	317537	IfStatement	if ( bits < 0 )		317417	5					
ANR	317538	Condition	bits < 0	3297:10:158919:158926	317417	0	True				
ANR	317539	RelationalExpression	bits < 0		317417	0		<			
ANR	317540	Identifier	bits		317417	0					
ANR	317541	PrimaryExpression	0		317417	1					
ANR	317542	CompoundStatement		21:20:428:428	317417	1					
ANR	317543	ReturnStatement	return NULL ;	3298:0:158931:158942	317417	0	True				
ANR	317544	Identifier	NULL		317417	0					
ANR	317545	ExpressionStatement	value |= ( ( insn >> start ) & ( ( 2ul << bits ) - 1 ) ) << width	3300:6:158952:159009	317417	6	True				
ANR	317546	AssignmentExpression	value |= ( ( insn >> start ) & ( ( 2ul << bits ) - 1 ) ) << width		317417	0		|=			
ANR	317547	Identifier	value		317417	0					
ANR	317548	ShiftExpression	( ( insn >> start ) & ( ( 2ul << bits ) - 1 ) ) << width		317417	1		<<			
ANR	317549	BitAndExpression	( insn >> start ) & ( ( 2ul << bits ) - 1 )		317417	0		&			
ANR	317550	ShiftExpression	insn >> start		317417	0		>>			
ANR	317551	Identifier	insn		317417	0					
ANR	317552	Identifier	start		317417	1					
ANR	317553	AdditiveExpression	( 2ul << bits ) - 1		317417	1		-			
ANR	317554	ShiftExpression	2ul << bits		317417	0		<<			
ANR	317555	PrimaryExpression	2ul		317417	0					
ANR	317556	Identifier	bits		317417	1					
ANR	317557	PrimaryExpression	1		317417	1					
ANR	317558	Identifier	width		317417	1					
ANR	317559	ExpressionStatement	width += bits + 1	3301:6:159017:159034	317417	7	True				
ANR	317560	AssignmentExpression	width += bits + 1		317417	0		+=			
ANR	317561	Identifier	width		317417	0					
ANR	317562	AdditiveExpression	bits + 1		317417	1		+			
ANR	317563	Identifier	bits		317417	0					
ANR	317564	PrimaryExpression	1		317417	1					
ANR	317565	Condition	"* ptr ++ == ','"	3303:9:159051:159063	317417	1	True				
ANR	317566	EqualityExpression	"* ptr ++ == ','"		317417	0		==			
ANR	317567	UnaryOperationExpression	* ptr ++		317417	0					
ANR	317568	UnaryOperator	*		317417	0					
ANR	317569	PostIncDecOperationExpression	ptr ++		317417	1					
ANR	317570	Identifier	ptr		317417	0					
ANR	317571	IncDec	++		317417	1					
ANR	317572	PrimaryExpression	"','"		317417	1					
ANR	317573	ExpressionStatement	* valuep = value	3304:2:159069:159084	317417	3	True				
ANR	317574	AssignmentExpression	* valuep = value		317417	0		=			
ANR	317575	UnaryOperationExpression	* valuep		317417	0					
ANR	317576	UnaryOperator	*		317417	0					
ANR	317577	Identifier	valuep		317417	1					
ANR	317578	Identifier	value		317417	1					
ANR	317579	IfStatement	if ( widthp )		317417	4					
ANR	317580	Condition	widthp	3305:6:159092:159097	317417	0	True				
ANR	317581	Identifier	widthp		317417	0					
ANR	317582	CompoundStatement		29:14:599:599	317417	1					
ANR	317583	ExpressionStatement	* widthp = width	3306:3:159105:159120	317417	0	True				
ANR	317584	AssignmentExpression	* widthp = width		317417	0		=			
ANR	317585	UnaryOperationExpression	* widthp		317417	0					
ANR	317586	UnaryOperator	*		317417	0					
ANR	317587	Identifier	widthp		317417	1					
ANR	317588	Identifier	width		317417	1					
ANR	317589	ReturnStatement	return ptr - 1 ;	3308:2:159128:159142	317417	5	True				
ANR	317590	AdditiveExpression	ptr - 1		317417	0		-			
ANR	317591	Identifier	ptr		317417	0					
ANR	317592	PrimaryExpression	1		317417	1					
ANR	317593	ReturnType	static const char *		317417	1					
ANR	317594	Identifier	arm_decode_bitfield		317417	2					
ANR	317595	ParameterList	"const char * ptr , unsigned long insn , unsigned long * valuep , int * widthp"		317417	3					
ANR	317596	Parameter	const char * ptr	3273:21:158406:158420	317417	0	True				
ANR	317597	ParameterType	const char *		317417	0					
ANR	317598	Identifier	ptr		317417	1					
ANR	317599	Parameter	unsigned long insn	3274:7:158430:158447	317417	1	True				
ANR	317600	ParameterType	unsigned long		317417	0					
ANR	317601	Identifier	insn		317417	1					
ANR	317602	Parameter	unsigned long * valuep	3275:7:158457:158477	317417	2	True				
ANR	317603	ParameterType	unsigned long *		317417	0					
ANR	317604	Identifier	valuep		317417	1					
ANR	317605	Parameter	int * widthp	3276:7:158487:158497	317417	3	True				
ANR	317606	ParameterType	int *		317417	0					
ANR	317607	Identifier	widthp		317417	1					
ANR	317608	CFGEntryNode	ENTRY		317417		True				
ANR	317609	CFGExitNode	EXIT		317417		True				
ANR	317610	Symbol	* widthp		317417						
ANR	317611	Symbol	NULL		317417						
ANR	317612	Symbol	* ptr ++		317417						
ANR	317613	Symbol	start		317417						
ANR	317614	Symbol	bits		317417						
ANR	317615	Symbol	* valuep		317417						
ANR	317616	Symbol	widthp		317417						
ANR	317617	Symbol	ptr		317417						
ANR	317618	Symbol	insn		317417						
ANR	317619	Symbol	width		317417						
ANR	317620	Symbol	* ptr		317417						
ANR	317621	Symbol	valuep		317417						
ANR	317622	Symbol	end		317417						
ANR	317623	Symbol	value		317417						
ANR	317624	Function	arm_decode_shift	3311:0:159147:160048							
ANR	317625	FunctionDef	"arm_decode_shift (long given , fprintf_ftype func , void * stream , bfd_boolean print_shift)"		317624	0					
ANR	317626	CompoundStatement		3314:0:159252:160048	317624	0					
ANR	317627	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ given & 0xf ] )"	3315:2:159256:159302	317624	0	True				
ANR	317628	CallExpression	"func ( stream , ""%s"" , arm_regnames [ given & 0xf ] )"		317624	0					
ANR	317629	Callee	func		317624	0					
ANR	317630	Identifier	func		317624	0					
ANR	317631	ArgumentList	stream		317624	1					
ANR	317632	Argument	stream		317624	0					
ANR	317633	Identifier	stream		317624	0					
ANR	317634	Argument	"""%s"""		317624	1					
ANR	317635	PrimaryExpression	"""%s"""		317624	0					
ANR	317636	Argument	arm_regnames [ given & 0xf ]		317624	2					
ANR	317637	ArrayIndexing	arm_regnames [ given & 0xf ]		317624	0					
ANR	317638	Identifier	arm_regnames		317624	0					
ANR	317639	BitAndExpression	given & 0xf		317624	1		&			
ANR	317640	Identifier	given		317624	0					
ANR	317641	PrimaryExpression	0xf		317624	1					
ANR	317642	IfStatement	if ( ( given & 0xff0 ) != 0 )		317624	1					
ANR	317643	Condition	( given & 0xff0 ) != 0	3317:6:159311:159330	317624	0	True				
ANR	317644	EqualityExpression	( given & 0xff0 ) != 0		317624	0		!=			
ANR	317645	BitAndExpression	given & 0xff0		317624	0		&			
ANR	317646	Identifier	given		317624	0					
ANR	317647	PrimaryExpression	0xff0		317624	1					
ANR	317648	PrimaryExpression	0		317624	1					
ANR	317649	CompoundStatement		5:4:84:84	317624	1					
ANR	317650	IfStatement	if ( ( given & 0x10 ) == 0 )		317624	0					
ANR	317651	Condition	( given & 0x10 ) == 0	3319:10:159349:159367	317624	0	True				
ANR	317652	EqualityExpression	( given & 0x10 ) == 0		317624	0		==			
ANR	317653	BitAndExpression	given & 0x10		317624	0		&			
ANR	317654	Identifier	given		317624	0					
ANR	317655	PrimaryExpression	0x10		317624	1					
ANR	317656	PrimaryExpression	0		317624	1					
ANR	317657	CompoundStatement		9:3:161:192	317624	1					
ANR	317658	IdentifierDeclStatement	int amount = ( given & 0xf80 ) >> 7 ;	3321:3:159376:159409	317624	0	True				
ANR	317659	IdentifierDecl	amount = ( given & 0xf80 ) >> 7		317624	0					
ANR	317660	IdentifierDeclType	int		317624	0					
ANR	317661	Identifier	amount		317624	1					
ANR	317662	AssignmentExpression	amount = ( given & 0xf80 ) >> 7		317624	2		=			
ANR	317663	Identifier	amount		317624	0					
ANR	317664	ShiftExpression	( given & 0xf80 ) >> 7		317624	1		>>			
ANR	317665	BitAndExpression	given & 0xf80		317624	0		&			
ANR	317666	Identifier	given		317624	0					
ANR	317667	PrimaryExpression	0xf80		317624	1					
ANR	317668	PrimaryExpression	7		317624	1					
ANR	317669	IdentifierDeclStatement	int shift = ( given & 0x60 ) >> 5 ;	3322:3:159414:159445	317624	1	True				
ANR	317670	IdentifierDecl	shift = ( given & 0x60 ) >> 5		317624	0					
ANR	317671	IdentifierDeclType	int		317624	0					
ANR	317672	Identifier	shift		317624	1					
ANR	317673	AssignmentExpression	shift = ( given & 0x60 ) >> 5		317624	2		=			
ANR	317674	Identifier	shift		317624	0					
ANR	317675	ShiftExpression	( given & 0x60 ) >> 5		317624	1		>>			
ANR	317676	BitAndExpression	given & 0x60		317624	0		&			
ANR	317677	Identifier	given		317624	0					
ANR	317678	PrimaryExpression	0x60		317624	1					
ANR	317679	PrimaryExpression	5		317624	1					
ANR	317680	IfStatement	if ( amount == 0 )		317624	2					
ANR	317681	Condition	amount == 0	3324:7:159455:159465	317624	0	True				
ANR	317682	EqualityExpression	amount == 0		317624	0		==			
ANR	317683	Identifier	amount		317624	0					
ANR	317684	PrimaryExpression	0		317624	1					
ANR	317685	CompoundStatement		12:5:220:220	317624	1					
ANR	317686	IfStatement	if ( shift == 3 )		317624	0					
ANR	317687	Condition	shift == 3	3326:11:159486:159495	317624	0	True				
ANR	317688	EqualityExpression	shift == 3		317624	0		==			
ANR	317689	Identifier	shift		317624	0					
ANR	317690	PrimaryExpression	3		317624	1					
ANR	317691	CompoundStatement		14:2:247:247	317624	1					
ANR	317692	ExpressionStatement	"func ( stream , "", rrx"" )"	3328:4:159506:159528	317624	0	True				
ANR	317693	CallExpression	"func ( stream , "", rrx"" )"		317624	0					
ANR	317694	Callee	func		317624	0					
ANR	317695	Identifier	func		317624	0					
ANR	317696	ArgumentList	stream		317624	1					
ANR	317697	Argument	stream		317624	0					
ANR	317698	Identifier	stream		317624	0					
ANR	317699	Argument	""", rrx"""		317624	1					
ANR	317700	PrimaryExpression	""", rrx"""		317624	0					
ANR	317701	ReturnStatement	return ;	3329:4:159534:159540	317624	1	True				
ANR	317702	ExpressionStatement	amount = 32	3332:7:159554:159565	317624	1	True				
ANR	317703	AssignmentExpression	amount = 32		317624	0		=			
ANR	317704	Identifier	amount		317624	0					
ANR	317705	PrimaryExpression	32		317624	1					
ANR	317706	IfStatement	if ( print_shift )		317624	3					
ANR	317707	Condition	print_shift	3335:9:159584:159594	317624	0	True				
ANR	317708	Identifier	print_shift		317624	0					
ANR	317709	CompoundStatement		22:22:344:344	317624	1					
ANR	317710	ExpressionStatement	"func ( stream , "", %s %d"" , arm_shift [ shift ] , amount )"	3336:6:159605:159655	317624	0	True				
ANR	317711	CallExpression	"func ( stream , "", %s %d"" , arm_shift [ shift ] , amount )"		317624	0					
ANR	317712	Callee	func		317624	0					
ANR	317713	Identifier	func		317624	0					
ANR	317714	ArgumentList	stream		317624	1					
ANR	317715	Argument	stream		317624	0					
ANR	317716	Identifier	stream		317624	0					
ANR	317717	Argument	""", %s %d"""		317624	1					
ANR	317718	PrimaryExpression	""", %s %d"""		317624	0					
ANR	317719	Argument	arm_shift [ shift ]		317624	2					
ANR	317720	ArrayIndexing	arm_shift [ shift ]		317624	0					
ANR	317721	Identifier	arm_shift		317624	0					
ANR	317722	Identifier	shift		317624	1					
ANR	317723	Argument	amount		317624	3					
ANR	317724	Identifier	amount		317624	0					
ANR	317725	ElseStatement	else		317624	0					
ANR	317726	CompoundStatement		24:12:416:416	317624	0					
ANR	317727	ExpressionStatement	"func ( stream , "", %d"" , amount )"	3338:6:159677:159706	317624	0	True				
ANR	317728	CallExpression	"func ( stream , "", %d"" , amount )"		317624	0					
ANR	317729	Callee	func		317624	0					
ANR	317730	Identifier	func		317624	0					
ANR	317731	ArgumentList	stream		317624	1					
ANR	317732	Argument	stream		317624	0					
ANR	317733	Identifier	stream		317624	0					
ANR	317734	Argument	""", %d"""		317624	1					
ANR	317735	PrimaryExpression	""", %d"""		317624	0					
ANR	317736	Argument	amount		317624	2					
ANR	317737	Identifier	amount		317624	0					
ANR	317738	ElseStatement	else		317624	0					
ANR	317739	IfStatement	if ( ( given & 0x80 ) == 0x80 )		317624	0					
ANR	317740	Condition	( given & 0x80 ) == 0x80	3340:17:159732:159753	317624	0	True				
ANR	317741	EqualityExpression	( given & 0x80 ) == 0x80		317624	0		==			
ANR	317742	BitAndExpression	given & 0x80		317624	0		&			
ANR	317743	Identifier	given		317624	0					
ANR	317744	PrimaryExpression	0x80		317624	1					
ANR	317745	PrimaryExpression	0x80		317624	1					
ANR	317746	CompoundStatement		27:41:503:503	317624	1					
ANR	317747	ExpressionStatement	"func ( stream , "" ; <illegal shifter operand>"" )"	3341:7:159765:159810	317624	0	True				
ANR	317748	CallExpression	"func ( stream , "" ; <illegal shifter operand>"" )"		317624	0					
ANR	317749	Callee	func		317624	0					
ANR	317750	Identifier	func		317624	0					
ANR	317751	ArgumentList	stream		317624	1					
ANR	317752	Argument	stream		317624	0					
ANR	317753	Identifier	stream		317624	0					
ANR	317754	Argument	""" ; <illegal shifter operand>"""		317624	1					
ANR	317755	PrimaryExpression	""" ; <illegal shifter operand>"""		317624	0					
ANR	317756	ElseStatement	else		317624	0					
ANR	317757	IfStatement	if ( print_shift )		317624	0					
ANR	317758	Condition	print_shift	3342:17:159829:159839	317624	0	True				
ANR	317759	Identifier	print_shift		317624	0					
ANR	317760	CompoundStatement		29:30:589:589	317624	1					
ANR	317761	ExpressionStatement	"func ( stream , "", %s %s"" , arm_shift [ ( given & 0x60 ) >> 5 ] , arm_regnames [ ( given & 0xf00 ) >> 8 ] )"	3343:7:159851:159951	317624	0	True				
ANR	317762	CallExpression	"func ( stream , "", %s %s"" , arm_shift [ ( given & 0x60 ) >> 5 ] , arm_regnames [ ( given & 0xf00 ) >> 8 ] )"		317624	0					
ANR	317763	Callee	func		317624	0					
ANR	317764	Identifier	func		317624	0					
ANR	317765	ArgumentList	stream		317624	1					
ANR	317766	Argument	stream		317624	0					
ANR	317767	Identifier	stream		317624	0					
ANR	317768	Argument	""", %s %s"""		317624	1					
ANR	317769	PrimaryExpression	""", %s %s"""		317624	0					
ANR	317770	Argument	arm_shift [ ( given & 0x60 ) >> 5 ]		317624	2					
ANR	317771	ArrayIndexing	arm_shift [ ( given & 0x60 ) >> 5 ]		317624	0					
ANR	317772	Identifier	arm_shift		317624	0					
ANR	317773	ShiftExpression	( given & 0x60 ) >> 5		317624	1		>>			
ANR	317774	BitAndExpression	given & 0x60		317624	0		&			
ANR	317775	Identifier	given		317624	0					
ANR	317776	PrimaryExpression	0x60		317624	1					
ANR	317777	PrimaryExpression	5		317624	1					
ANR	317778	Argument	arm_regnames [ ( given & 0xf00 ) >> 8 ]		317624	3					
ANR	317779	ArrayIndexing	arm_regnames [ ( given & 0xf00 ) >> 8 ]		317624	0					
ANR	317780	Identifier	arm_regnames		317624	0					
ANR	317781	ShiftExpression	( given & 0xf00 ) >> 8		317624	1		>>			
ANR	317782	BitAndExpression	given & 0xf00		317624	0		&			
ANR	317783	Identifier	given		317624	0					
ANR	317784	PrimaryExpression	0xf00		317624	1					
ANR	317785	PrimaryExpression	8		317624	1					
ANR	317786	ElseStatement	else		317624	0					
ANR	317787	CompoundStatement		32:13:713:713	317624	0					
ANR	317788	ExpressionStatement	"func ( stream , "", %s"" , arm_regnames [ ( given & 0xf00 ) >> 8 ] )"	3346:7:159975:160032	317624	0	True				
ANR	317789	CallExpression	"func ( stream , "", %s"" , arm_regnames [ ( given & 0xf00 ) >> 8 ] )"		317624	0					
ANR	317790	Callee	func		317624	0					
ANR	317791	Identifier	func		317624	0					
ANR	317792	ArgumentList	stream		317624	1					
ANR	317793	Argument	stream		317624	0					
ANR	317794	Identifier	stream		317624	0					
ANR	317795	Argument	""", %s"""		317624	1					
ANR	317796	PrimaryExpression	""", %s"""		317624	0					
ANR	317797	Argument	arm_regnames [ ( given & 0xf00 ) >> 8 ]		317624	2					
ANR	317798	ArrayIndexing	arm_regnames [ ( given & 0xf00 ) >> 8 ]		317624	0					
ANR	317799	Identifier	arm_regnames		317624	0					
ANR	317800	ShiftExpression	( given & 0xf00 ) >> 8		317624	1		>>			
ANR	317801	BitAndExpression	given & 0xf00		317624	0		&			
ANR	317802	Identifier	given		317624	0					
ANR	317803	PrimaryExpression	0xf00		317624	1					
ANR	317804	PrimaryExpression	8		317624	1					
ANR	317805	ReturnType	static void		317624	1					
ANR	317806	Identifier	arm_decode_shift		317624	2					
ANR	317807	ParameterList	"long given , fprintf_ftype func , void * stream , bfd_boolean print_shift"		317624	3					
ANR	317808	Parameter	long given	3312:18:159177:159186	317624	0	True				
ANR	317809	ParameterType	long		317624	0					
ANR	317810	Identifier	given		317624	1					
ANR	317811	Parameter	fprintf_ftype func	3312:30:159189:159206	317624	1	True				
ANR	317812	ParameterType	fprintf_ftype		317624	0					
ANR	317813	Identifier	func		317624	1					
ANR	317814	Parameter	void * stream	3312:50:159209:159220	317624	2	True				
ANR	317815	ParameterType	void *		317624	0					
ANR	317816	Identifier	stream		317624	1					
ANR	317817	Parameter	bfd_boolean print_shift	3313:4:159227:159249	317624	3	True				
ANR	317818	ParameterType	bfd_boolean		317624	0					
ANR	317819	Identifier	print_shift		317624	1					
ANR	317820	CFGEntryNode	ENTRY		317624		True				
ANR	317821	CFGExitNode	EXIT		317624		True				
ANR	317822	Symbol	given		317624						
ANR	317823	Symbol	* arm_regnames		317624						
ANR	317824	Symbol	amount		317624						
ANR	317825	Symbol	arm_shift		317624						
ANR	317826	Symbol	func		317624						
ANR	317827	Symbol	stream		317624						
ANR	317828	Symbol	shift		317624						
ANR	317829	Symbol	* arm_shift		317624						
ANR	317830	Symbol	print_shift		317624						
ANR	317831	Symbol	* given		317624						
ANR	317832	Symbol	* shift		317624						
ANR	317833	Symbol	arm_regnames		317624						
ANR	317834	Function	print_insn_coprocessor	3365:0:160494:175144							
ANR	317835	FunctionDef	"print_insn_coprocessor (bfd_vma pc , struct disassemble_info * info , long given , bfd_boolean thumb)"		317834	0					
ANR	317836	CompoundStatement		3370:0:160620:175144	317834	0					
ANR	317837	IdentifierDeclStatement	const struct opcode32 * insn ;	3371:2:160624:160651	317834	0	True				
ANR	317838	IdentifierDecl	* insn		317834	0					
ANR	317839	IdentifierDeclType	const struct opcode32 *		317834	0					
ANR	317840	Identifier	insn		317834	1					
ANR	317841	IdentifierDeclStatement	void * stream = info -> stream ;	3372:2:160655:160682	317834	1	True				
ANR	317842	IdentifierDecl	* stream = info -> stream		317834	0					
ANR	317843	IdentifierDeclType	void *		317834	0					
ANR	317844	Identifier	stream		317834	1					
ANR	317845	AssignmentExpression	* stream = info -> stream		317834	2		=			
ANR	317846	Identifier	stream		317834	0					
ANR	317847	PtrMemberAccess	info -> stream		317834	1					
ANR	317848	Identifier	info		317834	0					
ANR	317849	Identifier	stream		317834	1					
ANR	317850	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	3373:2:160686:160725	317834	2	True				
ANR	317851	IdentifierDecl	func = info -> fprintf_func		317834	0					
ANR	317852	IdentifierDeclType	fprintf_ftype		317834	0					
ANR	317853	Identifier	func		317834	1					
ANR	317854	AssignmentExpression	func = info -> fprintf_func		317834	2		=			
ANR	317855	Identifier	func		317834	0					
ANR	317856	PtrMemberAccess	info -> fprintf_func		317834	1					
ANR	317857	Identifier	info		317834	0					
ANR	317858	Identifier	fprintf_func		317834	1					
ANR	317859	IdentifierDeclStatement	unsigned long mask ;	3374:2:160729:160747	317834	3	True				
ANR	317860	IdentifierDecl	mask		317834	0					
ANR	317861	IdentifierDeclType	unsigned long		317834	0					
ANR	317862	Identifier	mask		317834	1					
ANR	317863	IdentifierDeclStatement	unsigned long value = 0 ;	3375:2:160751:160774	317834	4	True				
ANR	317864	IdentifierDecl	value = 0		317834	0					
ANR	317865	IdentifierDeclType	unsigned long		317834	0					
ANR	317866	Identifier	value		317834	1					
ANR	317867	AssignmentExpression	value = 0		317834	2		=			
ANR	317868	Identifier	value		317834	0					
ANR	317869	PrimaryExpression	0		317834	1					
ANR	317870	IdentifierDeclStatement	int cond ;	3376:2:160778:160786	317834	5	True				
ANR	317871	IdentifierDecl	cond		317834	0					
ANR	317872	IdentifierDeclType	int		317834	0					
ANR	317873	Identifier	cond		317834	1					
ANR	317874	IdentifierDeclStatement	int cp_num ;	3377:2:160790:160800	317834	6	True				
ANR	317875	IdentifierDecl	cp_num		317834	0					
ANR	317876	IdentifierDeclType	int		317834	0					
ANR	317877	Identifier	cp_num		317834	1					
ANR	317878	IdentifierDeclStatement	struct arm_private_data * private_data = info -> private_data ;	3378:2:160804:160862	317834	7	True				
ANR	317879	IdentifierDecl	* private_data = info -> private_data		317834	0					
ANR	317880	IdentifierDeclType	struct arm_private_data *		317834	0					
ANR	317881	Identifier	private_data		317834	1					
ANR	317882	AssignmentExpression	* private_data = info -> private_data		317834	2		=			
ANR	317883	Identifier	private_data		317834	0					
ANR	317884	PtrMemberAccess	info -> private_data		317834	1					
ANR	317885	Identifier	info		317834	0					
ANR	317886	Identifier	private_data		317834	1					
ANR	317887	IdentifierDeclStatement	arm_feature_set allowed_arches = ARM_ARCH_NONE ;	3379:2:160866:160912	317834	8	True				
ANR	317888	IdentifierDecl	allowed_arches = ARM_ARCH_NONE		317834	0					
ANR	317889	IdentifierDeclType	arm_feature_set		317834	0					
ANR	317890	Identifier	allowed_arches		317834	1					
ANR	317891	AssignmentExpression	allowed_arches = ARM_ARCH_NONE		317834	2		=			
ANR	317892	Identifier	ARM_ARCH_NONE		317834	0					
ANR	317893	Identifier	ARM_ARCH_NONE		317834	1					
ANR	317894	ExpressionStatement	"ARM_FEATURE_COPY ( allowed_arches , private_data -> features )"	3381:2:160917:160974	317834	9	True				
ANR	317895	CallExpression	"ARM_FEATURE_COPY ( allowed_arches , private_data -> features )"		317834	0					
ANR	317896	Callee	ARM_FEATURE_COPY		317834	0					
ANR	317897	Identifier	ARM_FEATURE_COPY		317834	0					
ANR	317898	ArgumentList	allowed_arches		317834	1					
ANR	317899	Argument	allowed_arches		317834	0					
ANR	317900	Identifier	allowed_arches		317834	0					
ANR	317901	Argument	private_data -> features		317834	1					
ANR	317902	PtrMemberAccess	private_data -> features		317834	0					
ANR	317903	Identifier	private_data		317834	0					
ANR	317904	Identifier	features		317834	1					
ANR	317905	ForStatement	for ( insn = coprocessor_opcodes ; insn -> assembler ; insn ++ )		317834	10					
ANR	317906	ForInit	insn = coprocessor_opcodes ;	3383:7:160984:161010	317834	0	True				
ANR	317907	AssignmentExpression	insn = coprocessor_opcodes		317834	0		=			
ANR	317908	Identifier	insn		317834	0					
ANR	317909	Identifier	coprocessor_opcodes		317834	1					
ANR	317910	Condition	insn -> assembler	3383:35:161012:161026	317834	1	True				
ANR	317911	PtrMemberAccess	insn -> assembler		317834	0					
ANR	317912	Identifier	insn		317834	0					
ANR	317913	Identifier	assembler		317834	1					
ANR	317914	PostIncDecOperationExpression	insn ++	3383:52:161029:161034	317834	2	True				
ANR	317915	Identifier	insn		317834	0					
ANR	317916	IncDec	++		317834	1					
ANR	317917	CompoundStatement		19:6:540:553	317834	3					
ANR	317918	IdentifierDeclStatement	unsigned long u_reg = 16 ;	3385:6:161049:161073	317834	0	True				
ANR	317919	IdentifierDecl	u_reg = 16		317834	0					
ANR	317920	IdentifierDeclType	unsigned long		317834	0					
ANR	317921	Identifier	u_reg		317834	1					
ANR	317922	AssignmentExpression	u_reg = 16		317834	2		=			
ANR	317923	Identifier	u_reg		317834	0					
ANR	317924	PrimaryExpression	16		317834	1					
ANR	317925	IdentifierDeclStatement	bfd_boolean is_unpredictable = FALSE ;	3386:6:161081:161117	317834	1	True				
ANR	317926	IdentifierDecl	is_unpredictable = FALSE		317834	0					
ANR	317927	IdentifierDeclType	bfd_boolean		317834	0					
ANR	317928	Identifier	is_unpredictable		317834	1					
ANR	317929	AssignmentExpression	is_unpredictable = FALSE		317834	2		=			
ANR	317930	Identifier	FALSE		317834	0					
ANR	317931	Identifier	FALSE		317834	1					
ANR	317932	IdentifierDeclStatement	const char * c ;	3388:6:161161:161174	317834	2	True				
ANR	317933	IdentifierDecl	* c		317834	0					
ANR	317934	IdentifierDeclType	const char *		317834	0					
ANR	317935	Identifier	c		317834	1					
ANR	317936	IfStatement	if ( ARM_FEATURE_ZERO ( insn -> arch ) )		317834	3					
ANR	317937	Condition	ARM_FEATURE_ZERO ( insn -> arch )	3390:10:161187:161215	317834	0	True				
ANR	317938	CallExpression	ARM_FEATURE_ZERO ( insn -> arch )		317834	0					
ANR	317939	Callee	ARM_FEATURE_ZERO		317834	0					
ANR	317940	Identifier	ARM_FEATURE_ZERO		317834	0					
ANR	317941	ArgumentList	insn -> arch		317834	1					
ANR	317942	Argument	insn -> arch		317834	0					
ANR	317943	PtrMemberAccess	insn -> arch		317834	0					
ANR	317944	Identifier	insn		317834	0					
ANR	317945	Identifier	arch		317834	1					
ANR	317946	CompoundStatement		21:41:597:597	317834	1					
ANR	317947	SwitchStatement	switch ( insn -> value )		317834	0					
ANR	317948	Condition	insn -> value	3391:15:161235:161245	317834	0	True				
ANR	317949	PtrMemberAccess	insn -> value		317834	0					
ANR	317950	Identifier	insn		317834	0					
ANR	317951	Identifier	value		317834	1					
ANR	317952	CompoundStatement		22:28:627:627	317834	1					
ANR	317953	Label	case SENTINEL_IWMMXT_START :	3392:7:161257:161283	317834	0	True				
ANR	317954	Identifier	SENTINEL_IWMMXT_START		317834	0					
ANR	317955	IfStatement	if ( info -> mach != bfd_mach_arm_XScale && info -> mach != bfd_mach_arm_iWMMXt && info -> mach != bfd_mach_arm_iWMMXt2 )		317834	1					
ANR	317956	Condition	info -> mach != bfd_mach_arm_XScale && info -> mach != bfd_mach_arm_iWMMXt && info -> mach != bfd_mach_arm_iWMMXt2	3393:12:161297:161404	317834	0	True				
ANR	317957	AndExpression	info -> mach != bfd_mach_arm_XScale && info -> mach != bfd_mach_arm_iWMMXt && info -> mach != bfd_mach_arm_iWMMXt2		317834	0		&&			
ANR	317958	EqualityExpression	info -> mach != bfd_mach_arm_XScale		317834	0		!=			
ANR	317959	PtrMemberAccess	info -> mach		317834	0					
ANR	317960	Identifier	info		317834	0					
ANR	317961	Identifier	mach		317834	1					
ANR	317962	Identifier	bfd_mach_arm_XScale		317834	1					
ANR	317963	AndExpression	info -> mach != bfd_mach_arm_iWMMXt && info -> mach != bfd_mach_arm_iWMMXt2		317834	1		&&			
ANR	317964	EqualityExpression	info -> mach != bfd_mach_arm_iWMMXt		317834	0		!=			
ANR	317965	PtrMemberAccess	info -> mach		317834	0					
ANR	317966	Identifier	info		317834	0					
ANR	317967	Identifier	mach		317834	1					
ANR	317968	Identifier	bfd_mach_arm_iWMMXt		317834	1					
ANR	317969	EqualityExpression	info -> mach != bfd_mach_arm_iWMMXt2		317834	1		!=			
ANR	317970	PtrMemberAccess	info -> mach		317834	0					
ANR	317971	Identifier	info		317834	0					
ANR	317972	Identifier	mach		317834	1					
ANR	317973	Identifier	bfd_mach_arm_iWMMXt2		317834	1					
ANR	317974	CompoundStatement		24:122:786:786	317834	1					
ANR	317975	DoStatement	do		317834	0					
ANR	317976	CompoundStatement		25:12:800:800	317834	0					
ANR	317977	ExpressionStatement	insn ++	3395:10:161433:161439	317834	0	True				
ANR	317978	PostIncDecOperationExpression	insn ++		317834	0					
ANR	317979	Identifier	insn		317834	0					
ANR	317980	IncDec	++		317834	1					
ANR	317981	Condition	( ! ARM_FEATURE_ZERO ( insn -> arch ) ) && insn -> value != SENTINEL_IWMMXT_END	3396:18:161459:161528	317834	1	True				
ANR	317982	AndExpression	( ! ARM_FEATURE_ZERO ( insn -> arch ) ) && insn -> value != SENTINEL_IWMMXT_END		317834	0		&&			
ANR	317983	UnaryOperationExpression	! ARM_FEATURE_ZERO ( insn -> arch )		317834	0					
ANR	317984	UnaryOperator	!		317834	0					
ANR	317985	CallExpression	ARM_FEATURE_ZERO ( insn -> arch )		317834	1					
ANR	317986	Callee	ARM_FEATURE_ZERO		317834	0					
ANR	317987	Identifier	ARM_FEATURE_ZERO		317834	0					
ANR	317988	ArgumentList	insn -> arch		317834	1					
ANR	317989	Argument	insn -> arch		317834	0					
ANR	317990	PtrMemberAccess	insn -> arch		317834	0					
ANR	317991	Identifier	insn		317834	0					
ANR	317992	Identifier	arch		317834	1					
ANR	317993	EqualityExpression	insn -> value != SENTINEL_IWMMXT_END		317834	1		!=			
ANR	317994	PtrMemberAccess	insn -> value		317834	0					
ANR	317995	Identifier	insn		317834	0					
ANR	317996	Identifier	value		317834	1					
ANR	317997	Identifier	SENTINEL_IWMMXT_END		317834	1					
ANR	317998	ContinueStatement	continue ;	3398:8:161550:161558	317834	2	True				
ANR	317999	Label	case SENTINEL_IWMMXT_END :	3400:7:161568:161592	317834	3	True				
ANR	318000	Identifier	SENTINEL_IWMMXT_END		317834	0					
ANR	318001	ContinueStatement	continue ;	3401:8:161602:161610	317834	4	True				
ANR	318002	Label	case SENTINEL_GENERIC_START :	3403:7:161620:161647	317834	5	True				
ANR	318003	Identifier	SENTINEL_GENERIC_START		317834	0					
ANR	318004	ExpressionStatement	"ARM_FEATURE_COPY ( allowed_arches , private_data -> features )"	3404:8:161657:161714	317834	6	True				
ANR	318005	CallExpression	"ARM_FEATURE_COPY ( allowed_arches , private_data -> features )"		317834	0					
ANR	318006	Callee	ARM_FEATURE_COPY		317834	0					
ANR	318007	Identifier	ARM_FEATURE_COPY		317834	0					
ANR	318008	ArgumentList	allowed_arches		317834	1					
ANR	318009	Argument	allowed_arches		317834	0					
ANR	318010	Identifier	allowed_arches		317834	0					
ANR	318011	Argument	private_data -> features		317834	1					
ANR	318012	PtrMemberAccess	private_data -> features		317834	0					
ANR	318013	Identifier	private_data		317834	0					
ANR	318014	Identifier	features		317834	1					
ANR	318015	ContinueStatement	continue ;	3405:8:161724:161732	317834	7	True				
ANR	318016	ExpressionStatement	mask = insn -> mask	3409:6:161758:161775	317834	4	True				
ANR	318017	AssignmentExpression	mask = insn -> mask		317834	0		=			
ANR	318018	Identifier	mask		317834	0					
ANR	318019	PtrMemberAccess	insn -> mask		317834	1					
ANR	318020	Identifier	insn		317834	0					
ANR	318021	Identifier	mask		317834	1					
ANR	318022	ExpressionStatement	value = insn -> value	3410:6:161783:161802	317834	5	True				
ANR	318023	AssignmentExpression	value = insn -> value		317834	0		=			
ANR	318024	Identifier	value		317834	0					
ANR	318025	PtrMemberAccess	insn -> value		317834	1					
ANR	318026	Identifier	insn		317834	0					
ANR	318027	Identifier	value		317834	1					
ANR	318028	ExpressionStatement	cp_num = ( given >> 8 ) & 0xf	3411:6:161810:161837	317834	6	True				
ANR	318029	AssignmentExpression	cp_num = ( given >> 8 ) & 0xf		317834	0		=			
ANR	318030	Identifier	cp_num		317834	0					
ANR	318031	BitAndExpression	( given >> 8 ) & 0xf		317834	1		&			
ANR	318032	ShiftExpression	given >> 8		317834	0		>>			
ANR	318033	Identifier	given		317834	0					
ANR	318034	PrimaryExpression	8		317834	1					
ANR	318035	PrimaryExpression	0xf		317834	1					
ANR	318036	IfStatement	if ( thumb )		317834	7					
ANR	318037	Condition	thumb	3413:10:161850:161854	317834	0	True				
ANR	318038	Identifier	thumb		317834	0					
ANR	318039	CompoundStatement		45:1:1237:1237	317834	1					
ANR	318040	ExpressionStatement	mask |= 0xf0000000	3418:3:162026:162044	317834	0	True				
ANR	318041	AssignmentExpression	mask |= 0xf0000000		317834	0		|=			
ANR	318042	Identifier	mask		317834	0					
ANR	318043	PrimaryExpression	0xf0000000		317834	1					
ANR	318044	ExpressionStatement	value |= 0xe0000000	3419:3:162049:162068	317834	1	True				
ANR	318045	AssignmentExpression	value |= 0xe0000000		317834	0		|=			
ANR	318046	Identifier	value		317834	0					
ANR	318047	PrimaryExpression	0xe0000000		317834	1					
ANR	318048	IfStatement	if ( ifthen_state )		317834	2					
ANR	318049	Condition	ifthen_state	3420:7:162077:162088	317834	0	True				
ANR	318050	Identifier	ifthen_state		317834	0					
ANR	318051	CompoundStatement		51:21:1470:1470	317834	1					
ANR	318052	ExpressionStatement	cond = IFTHEN_COND	3421:4:162097:162115	317834	0	True				
ANR	318053	AssignmentExpression	cond = IFTHEN_COND		317834	0		=			
ANR	318054	Identifier	cond		317834	0					
ANR	318055	Identifier	IFTHEN_COND		317834	1					
ANR	318056	ElseStatement	else		317834	0					
ANR	318057	CompoundStatement		53:10:1506:1506	317834	0					
ANR	318058	ExpressionStatement	cond = COND_UNCOND	3423:4:162133:162151	317834	0	True				
ANR	318059	AssignmentExpression	cond = COND_UNCOND		317834	0		=			
ANR	318060	Identifier	cond		317834	0					
ANR	318061	Identifier	COND_UNCOND		317834	1					
ANR	318062	ElseStatement	else		317834	0					
ANR	318063	CompoundStatement		58:1:1552:1552	317834	0					
ANR	318064	IfStatement	if ( ( given & 0xf0000000 ) == 0xf0000000 )		317834	0					
ANR	318065	Condition	( given & 0xf0000000 ) == 0xf0000000	3430:7:162267:162300	317834	0	True				
ANR	318066	EqualityExpression	( given & 0xf0000000 ) == 0xf0000000		317834	0		==			
ANR	318067	BitAndExpression	given & 0xf0000000		317834	0		&			
ANR	318068	Identifier	given		317834	0					
ANR	318069	PrimaryExpression	0xf0000000		317834	1					
ANR	318070	PrimaryExpression	0xf0000000		317834	1					
ANR	318071	CompoundStatement		62:5:1687:1687	317834	1					
ANR	318072	ExpressionStatement	mask |= 0xf0000000	3432:7:162317:162335	317834	0	True				
ANR	318073	AssignmentExpression	mask |= 0xf0000000		317834	0		|=			
ANR	318074	Identifier	mask		317834	0					
ANR	318075	PrimaryExpression	0xf0000000		317834	1					
ANR	318076	ExpressionStatement	cond = COND_UNCOND	3433:7:162344:162362	317834	1	True				
ANR	318077	AssignmentExpression	cond = COND_UNCOND		317834	0		=			
ANR	318078	Identifier	cond		317834	0					
ANR	318079	Identifier	COND_UNCOND		317834	1					
ANR	318080	ElseStatement	else		317834	0					
ANR	318081	CompoundStatement		67:5:1763:1763	317834	0					
ANR	318082	ExpressionStatement	cond = ( given >> 28 ) & 0xf	3437:7:162393:162419	317834	0	True				
ANR	318083	AssignmentExpression	cond = ( given >> 28 ) & 0xf		317834	0		=			
ANR	318084	Identifier	cond		317834	0					
ANR	318085	BitAndExpression	( given >> 28 ) & 0xf		317834	1		&			
ANR	318086	ShiftExpression	given >> 28		317834	0		>>			
ANR	318087	Identifier	given		317834	0					
ANR	318088	PrimaryExpression	28		317834	1					
ANR	318089	PrimaryExpression	0xf		317834	1					
ANR	318090	IfStatement	if ( cond == 0xe )		317834	1					
ANR	318091	Condition	cond == 0xe	3438:11:162432:162442	317834	0	True				
ANR	318092	EqualityExpression	cond == 0xe		317834	0		==			
ANR	318093	Identifier	cond		317834	0					
ANR	318094	PrimaryExpression	0xe		317834	1					
ANR	318095	CompoundStatement		69:24:1824:1824	317834	1					
ANR	318096	ExpressionStatement	cond = COND_UNCOND	3439:8:162455:162473	317834	0	True				
ANR	318097	AssignmentExpression	cond = COND_UNCOND		317834	0		=			
ANR	318098	Identifier	cond		317834	0					
ANR	318099	Identifier	COND_UNCOND		317834	1					
ANR	318100	IfStatement	if ( ( given & mask ) != value )		317834	8					
ANR	318101	Condition	( given & mask ) != value	3444:5:162500:162522	317834	0	True				
ANR	318102	EqualityExpression	( given & mask ) != value		317834	0		!=			
ANR	318103	BitAndExpression	given & mask		317834	0		&			
ANR	318104	Identifier	given		317834	0					
ANR	318105	Identifier	mask		317834	1					
ANR	318106	Identifier	value		317834	1					
ANR	318107	CompoundStatement		75:30:1904:1904	317834	1					
ANR	318108	ContinueStatement	continue ;	3445:2:162529:162537	317834	0	True				
ANR	318109	IfStatement	"if ( ! ARM_CPU_HAS_FEATURE ( insn -> arch , allowed_arches ) )"		317834	9					
ANR	318110	Condition	"! ARM_CPU_HAS_FEATURE ( insn -> arch , allowed_arches )"	3448:5:162548:162596	317834	0	True				
ANR	318111	UnaryOperationExpression	"! ARM_CPU_HAS_FEATURE ( insn -> arch , allowed_arches )"		317834	0					
ANR	318112	UnaryOperator	!		317834	0					
ANR	318113	CallExpression	"ARM_CPU_HAS_FEATURE ( insn -> arch , allowed_arches )"		317834	1					
ANR	318114	Callee	ARM_CPU_HAS_FEATURE		317834	0					
ANR	318115	Identifier	ARM_CPU_HAS_FEATURE		317834	0					
ANR	318116	ArgumentList	insn -> arch		317834	1					
ANR	318117	Argument	insn -> arch		317834	0					
ANR	318118	PtrMemberAccess	insn -> arch		317834	0					
ANR	318119	Identifier	insn		317834	0					
ANR	318120	Identifier	arch		317834	1					
ANR	318121	Argument	allowed_arches		317834	1					
ANR	318122	Identifier	allowed_arches		317834	0					
ANR	318123	CompoundStatement		79:56:1978:1978	317834	1					
ANR	318124	ContinueStatement	continue ;	3449:2:162603:162611	317834	0	True				
ANR	318125	IfStatement	if ( insn -> value == 0xfe000010 || insn -> value == 0xfe100010 || insn -> value == 0xfc100000 || insn -> value == 0xfc000000 )		317834	10					
ANR	318126	Condition	insn -> value == 0xfe000010 || insn -> value == 0xfe100010 || insn -> value == 0xfc100000 || insn -> value == 0xfc000000	3452:5:162622:162778	317834	0	True				
ANR	318127	OrExpression	insn -> value == 0xfe000010 || insn -> value == 0xfe100010 || insn -> value == 0xfc100000 || insn -> value == 0xfc000000		317834	0		||			
ANR	318128	EqualityExpression	insn -> value == 0xfe000010		317834	0		==			
ANR	318129	PtrMemberAccess	insn -> value		317834	0					
ANR	318130	Identifier	insn		317834	0					
ANR	318131	Identifier	value		317834	1					
ANR	318132	PrimaryExpression	0xfe000010		317834	1					
ANR	318133	OrExpression	insn -> value == 0xfe100010 || insn -> value == 0xfc100000 || insn -> value == 0xfc000000		317834	1		||			
ANR	318134	EqualityExpression	insn -> value == 0xfe100010		317834	0		==			
ANR	318135	PtrMemberAccess	insn -> value		317834	0					
ANR	318136	Identifier	insn		317834	0					
ANR	318137	Identifier	value		317834	1					
ANR	318138	PrimaryExpression	0xfe100010		317834	1					
ANR	318139	OrExpression	insn -> value == 0xfc100000 || insn -> value == 0xfc000000		317834	1		||			
ANR	318140	EqualityExpression	insn -> value == 0xfc100000		317834	0		==			
ANR	318141	PtrMemberAccess	insn -> value		317834	0					
ANR	318142	Identifier	insn		317834	0					
ANR	318143	Identifier	value		317834	1					
ANR	318144	PrimaryExpression	0xfc100000		317834	1					
ANR	318145	EqualityExpression	insn -> value == 0xfc000000		317834	1		==			
ANR	318146	PtrMemberAccess	insn -> value		317834	0					
ANR	318147	Identifier	insn		317834	0					
ANR	318148	Identifier	value		317834	1					
ANR	318149	PrimaryExpression	0xfc000000		317834	1					
ANR	318150	CompoundStatement		87:1:2173:2173	317834	1					
ANR	318151	IfStatement	if ( cp_num == 9 || cp_num == 10 || cp_num == 11 )		317834	0					
ANR	318152	Condition	cp_num == 9 || cp_num == 10 || cp_num == 11	3457:6:162802:162844	317834	0	True				
ANR	318153	OrExpression	cp_num == 9 || cp_num == 10 || cp_num == 11		317834	0		||			
ANR	318154	EqualityExpression	cp_num == 9		317834	0		==			
ANR	318155	Identifier	cp_num		317834	0					
ANR	318156	PrimaryExpression	9		317834	1					
ANR	318157	OrExpression	cp_num == 10 || cp_num == 11		317834	1		||			
ANR	318158	EqualityExpression	cp_num == 10		317834	0		==			
ANR	318159	Identifier	cp_num		317834	0					
ANR	318160	PrimaryExpression	10		317834	1					
ANR	318161	EqualityExpression	cp_num == 11		317834	1		==			
ANR	318162	Identifier	cp_num		317834	0					
ANR	318163	PrimaryExpression	11		317834	1					
ANR	318164	CompoundStatement		88:51:2226:2226	317834	1					
ANR	318165	ExpressionStatement	is_unpredictable = TRUE	3458:3:162852:162875	317834	0	True				
ANR	318166	AssignmentExpression	is_unpredictable = TRUE		317834	0		=			
ANR	318167	Identifier	is_unpredictable		317834	0					
ANR	318168	Identifier	TRUE		317834	1					
ANR	318169	ElseStatement	else		317834	0					
ANR	318170	IfStatement	if ( insn -> value == 0x0e000000 || insn -> value == 0xfe000000 || insn -> value == 0x0e000010 || insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000 )		317834	0					
ANR	318171	Condition	insn -> value == 0x0e000000 || insn -> value == 0xfe000000 || insn -> value == 0x0e000010 || insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000	3461:15:162899:163172	317834	0	True				
ANR	318172	OrExpression	insn -> value == 0x0e000000 || insn -> value == 0xfe000000 || insn -> value == 0x0e000010 || insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000		317834	0		||			
ANR	318173	EqualityExpression	insn -> value == 0x0e000000		317834	0		==			
ANR	318174	PtrMemberAccess	insn -> value		317834	0					
ANR	318175	Identifier	insn		317834	0					
ANR	318176	Identifier	value		317834	1					
ANR	318177	PrimaryExpression	0x0e000000		317834	1					
ANR	318178	OrExpression	insn -> value == 0xfe000000 || insn -> value == 0x0e000010 || insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000		317834	1		||			
ANR	318179	EqualityExpression	insn -> value == 0xfe000000		317834	0		==			
ANR	318180	PtrMemberAccess	insn -> value		317834	0					
ANR	318181	Identifier	insn		317834	0					
ANR	318182	Identifier	value		317834	1					
ANR	318183	PrimaryExpression	0xfe000000		317834	1					
ANR	318184	OrExpression	insn -> value == 0x0e000010 || insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000		317834	1		||			
ANR	318185	EqualityExpression	insn -> value == 0x0e000010		317834	0		==			
ANR	318186	PtrMemberAccess	insn -> value		317834	0					
ANR	318187	Identifier	insn		317834	0					
ANR	318188	Identifier	value		317834	1					
ANR	318189	PrimaryExpression	0x0e000010		317834	1					
ANR	318190	OrExpression	insn -> value == 0x0e100010 || insn -> value == 0x0c100000 || insn -> value == 0x0c000000		317834	1		||			
ANR	318191	EqualityExpression	insn -> value == 0x0e100010		317834	0		==			
ANR	318192	PtrMemberAccess	insn -> value		317834	0					
ANR	318193	Identifier	insn		317834	0					
ANR	318194	Identifier	value		317834	1					
ANR	318195	PrimaryExpression	0x0e100010		317834	1					
ANR	318196	OrExpression	insn -> value == 0x0c100000 || insn -> value == 0x0c000000		317834	1		||			
ANR	318197	EqualityExpression	insn -> value == 0x0c100000		317834	0		==			
ANR	318198	PtrMemberAccess	insn -> value		317834	0					
ANR	318199	Identifier	insn		317834	0					
ANR	318200	Identifier	value		317834	1					
ANR	318201	PrimaryExpression	0x0c100000		317834	1					
ANR	318202	EqualityExpression	insn -> value == 0x0c000000		317834	1		==			
ANR	318203	PtrMemberAccess	insn -> value		317834	0					
ANR	318204	Identifier	insn		317834	0					
ANR	318205	Identifier	value		317834	1					
ANR	318206	PrimaryExpression	0x0c000000		317834	1					
ANR	318207	CompoundStatement		98:1:2566:2566	317834	1					
ANR	318208	IfStatement	if ( cp_num == 9 || cp_num == 10 || cp_num == 11 )		317834	0					
ANR	318209	Condition	cp_num == 9 || cp_num == 10 || cp_num == 11	3469:7:163235:163277	317834	0	True				
ANR	318210	OrExpression	cp_num == 9 || cp_num == 10 || cp_num == 11		317834	0		||			
ANR	318211	EqualityExpression	cp_num == 9		317834	0		==			
ANR	318212	Identifier	cp_num		317834	0					
ANR	318213	PrimaryExpression	9		317834	1					
ANR	318214	OrExpression	cp_num == 10 || cp_num == 11		317834	1		||			
ANR	318215	EqualityExpression	cp_num == 10		317834	0		==			
ANR	318216	Identifier	cp_num		317834	0					
ANR	318217	PrimaryExpression	10		317834	1					
ANR	318218	EqualityExpression	cp_num == 11		317834	1		==			
ANR	318219	Identifier	cp_num		317834	0					
ANR	318220	PrimaryExpression	11		317834	1					
ANR	318221	CompoundStatement		100:52:2659:2659	317834	1					
ANR	318222	ContinueStatement	continue ;	3470:4:163286:163294	317834	0	True				
ANR	318223	ForStatement	for ( c = insn -> assembler ; * c ; c ++ )		317834	11					
ANR	318224	ForInit	c = insn -> assembler ;	3474:11:163316:163335	317834	0	True				
ANR	318225	AssignmentExpression	c = insn -> assembler		317834	0		=			
ANR	318226	Identifier	c		317834	0					
ANR	318227	PtrMemberAccess	insn -> assembler		317834	1					
ANR	318228	Identifier	insn		317834	0					
ANR	318229	Identifier	assembler		317834	1					
ANR	318230	Condition	* c	3474:32:163337:163338	317834	1	True				
ANR	318231	UnaryOperationExpression	* c		317834	0					
ANR	318232	UnaryOperator	*		317834	0					
ANR	318233	Identifier	c		317834	1					
ANR	318234	PostIncDecOperationExpression	c ++	3474:36:163341:163343	317834	2	True				
ANR	318235	Identifier	c		317834	0					
ANR	318236	IncDec	++		317834	1					
ANR	318237	CompoundStatement		106:1:2726:2726	317834	3					
ANR	318238	IfStatement	if ( * c == '%' )		317834	0					
ANR	318239	Condition	* c == '%'	3476:7:163356:163364	317834	0	True				
ANR	318240	EqualityExpression	* c == '%'		317834	0		==			
ANR	318241	UnaryOperationExpression	* c		317834	0					
ANR	318242	UnaryOperator	*		317834	0					
ANR	318243	Identifier	c		317834	1					
ANR	318244	PrimaryExpression	'%'		317834	1					
ANR	318245	CompoundStatement		108:5:2751:2751	317834	1					
ANR	318246	SwitchStatement	switch ( * ++ c )		317834	0					
ANR	318247	Condition	* ++ c	3478:15:163389:163392	317834	0	True				
ANR	318248	UnaryOperationExpression	* ++ c		317834	0					
ANR	318249	UnaryOperator	*		317834	0					
ANR	318250	UnaryExpression	++ c		317834	1					
ANR	318251	IncDec	++		317834	0					
ANR	318252	Identifier	c		317834	1					
ANR	318253	CompoundStatement		110:2:2776:2776	317834	1					
ANR	318254	Label	case '%' :	3480:2:163401:163409	317834	0	True				
ANR	318255	ExpressionStatement	"func ( stream , ""%%"" )"	3481:4:163415:163434	317834	1	True				
ANR	318256	CallExpression	"func ( stream , ""%%"" )"		317834	0					
ANR	318257	Callee	func		317834	0					
ANR	318258	Identifier	func		317834	0					
ANR	318259	ArgumentList	stream		317834	1					
ANR	318260	Argument	stream		317834	0					
ANR	318261	Identifier	stream		317834	0					
ANR	318262	Argument	"""%%"""		317834	1					
ANR	318263	PrimaryExpression	"""%%"""		317834	0					
ANR	318264	BreakStatement	break ;	3482:4:163440:163445	317834	2	True				
ANR	318265	Label	case 'A' :	3484:2:163450:163458	317834	3	True				
ANR	318266	CompoundStatement		118:6:2887:2916	317834	4					
ANR	318267	IdentifierDeclStatement	int rn = ( given >> 16 ) & 0xf ;	3486:6:163472:163500	317834	0	True				
ANR	318268	IdentifierDecl	rn = ( given >> 16 ) & 0xf		317834	0					
ANR	318269	IdentifierDeclType	int		317834	0					
ANR	318270	Identifier	rn		317834	1					
ANR	318271	AssignmentExpression	rn = ( given >> 16 ) & 0xf		317834	2		=			
ANR	318272	Identifier	rn		317834	0					
ANR	318273	BitAndExpression	( given >> 16 ) & 0xf		317834	1		&			
ANR	318274	ShiftExpression	given >> 16		317834	0		>>			
ANR	318275	Identifier	given		317834	0					
ANR	318276	PrimaryExpression	16		317834	1					
ANR	318277	PrimaryExpression	0xf		317834	1					
ANR	318278	IdentifierDeclStatement	bfd_vma offset = given & 0xff ;	3487:6:163508:163537	317834	1	True				
ANR	318279	IdentifierDecl	offset = given & 0xff		317834	0					
ANR	318280	IdentifierDeclType	bfd_vma		317834	0					
ANR	318281	Identifier	offset		317834	1					
ANR	318282	AssignmentExpression	offset = given & 0xff		317834	2		=			
ANR	318283	Identifier	offset		317834	0					
ANR	318284	BitAndExpression	given & 0xff		317834	1		&			
ANR	318285	Identifier	given		317834	0					
ANR	318286	PrimaryExpression	0xff		317834	1					
ANR	318287	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"	3489:6:163546:163602	317834	2	True				
ANR	318288	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"		317834	0					
ANR	318289	Callee	func		317834	0					
ANR	318290	Identifier	func		317834	0					
ANR	318291	ArgumentList	stream		317834	1					
ANR	318292	Argument	stream		317834	0					
ANR	318293	Identifier	stream		317834	0					
ANR	318294	Argument	"""[%s"""		317834	1					
ANR	318295	PrimaryExpression	"""[%s"""		317834	0					
ANR	318296	Argument	arm_regnames [ ( given >> 16 ) & 0xf ]		317834	2					
ANR	318297	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		317834	0					
ANR	318298	Identifier	arm_regnames		317834	0					
ANR	318299	BitAndExpression	( given >> 16 ) & 0xf		317834	1		&			
ANR	318300	ShiftExpression	given >> 16		317834	0		>>			
ANR	318301	Identifier	given		317834	0					
ANR	318302	PrimaryExpression	16		317834	1					
ANR	318303	PrimaryExpression	0xf		317834	1					
ANR	318304	IfStatement	if ( PRE_BIT_SET || WRITEBACK_BIT_SET )		317834	3					
ANR	318305	Condition	PRE_BIT_SET || WRITEBACK_BIT_SET	3491:10:163615:163646	317834	0	True				
ANR	318306	OrExpression	PRE_BIT_SET || WRITEBACK_BIT_SET		317834	0		||			
ANR	318307	Identifier	PRE_BIT_SET		317834	0					
ANR	318308	Identifier	WRITEBACK_BIT_SET		317834	1					
ANR	318309	CompoundStatement		123:8:3036:3036	317834	1					
ANR	318310	IfStatement	if ( cp_num == 9 )		317834	0					
ANR	318311	Condition	cp_num == 9	3494:7:163714:163724	317834	0	True				
ANR	318312	EqualityExpression	cp_num == 9		317834	0		==			
ANR	318313	Identifier	cp_num		317834	0					
ANR	318314	PrimaryExpression	9		317834	1					
ANR	318315	CompoundStatement		125:20:3106:3106	317834	1					
ANR	318316	ExpressionStatement	offset = offset * 2	3497:4:163811:163830	317834	0	True				
ANR	318317	AssignmentExpression	offset = offset * 2		317834	0		=			
ANR	318318	Identifier	offset		317834	0					
ANR	318319	MultiplicativeExpression	offset * 2		317834	1		*			
ANR	318320	Identifier	offset		317834	0					
ANR	318321	PrimaryExpression	2		317834	1					
ANR	318322	ElseStatement	else		317834	0					
ANR	318323	CompoundStatement		129:10:3221:3221	317834	0					
ANR	318324	ExpressionStatement	offset = offset * 4	3499:4:163848:163867	317834	0	True				
ANR	318325	AssignmentExpression	offset = offset * 4		317834	0		=			
ANR	318326	Identifier	offset		317834	0					
ANR	318327	MultiplicativeExpression	offset * 4		317834	1		*			
ANR	318328	Identifier	offset		317834	0					
ANR	318329	PrimaryExpression	4		317834	1					
ANR	318330	IfStatement	if ( NEGATIVE_BIT_SET )		317834	1					
ANR	318331	Condition	NEGATIVE_BIT_SET	3502:7:163882:163897	317834	0	True				
ANR	318332	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	318333	CompoundStatement		133:25:3279:3279	317834	1					
ANR	318334	ExpressionStatement	offset = - offset	3503:4:163906:163922	317834	0	True				
ANR	318335	AssignmentExpression	offset = - offset		317834	0		=			
ANR	318336	Identifier	offset		317834	0					
ANR	318337	UnaryOperationExpression	- offset		317834	1					
ANR	318338	UnaryOperator	-		317834	0					
ANR	318339	Identifier	offset		317834	1					
ANR	318340	IfStatement	if ( PRE_BIT_SET )		317834	4					
ANR	318341	Condition	PRE_BIT_SET	3509:10:164003:164013	317834	0	True				
ANR	318342	Identifier	PRE_BIT_SET		317834	0					
ANR	318343	CompoundStatement		141:8:3403:3403	317834	1					
ANR	318344	IfStatement	if ( offset )		317834	0					
ANR	318345	Condition	offset	3511:11:164037:164042	317834	0	True				
ANR	318346	Identifier	offset		317834	0					
ANR	318347	CompoundStatement		142:19:3424:3424	317834	1					
ANR	318348	ExpressionStatement	"func ( stream , "", 0x%x]%s"" , ( int ) offset , WRITEBACK_BIT_SET ? ""!"" : """" )"	3512:8:164055:164142	317834	0	True				
ANR	318349	CallExpression	"func ( stream , "", 0x%x]%s"" , ( int ) offset , WRITEBACK_BIT_SET ? ""!"" : """" )"		317834	0					
ANR	318350	Callee	func		317834	0					
ANR	318351	Identifier	func		317834	0					
ANR	318352	ArgumentList	stream		317834	1					
ANR	318353	Argument	stream		317834	0					
ANR	318354	Identifier	stream		317834	0					
ANR	318355	Argument	""", 0x%x]%s"""		317834	1					
ANR	318356	PrimaryExpression	""", 0x%x]%s"""		317834	0					
ANR	318357	Argument	( int ) offset		317834	2					
ANR	318358	CastExpression	( int ) offset		317834	0					
ANR	318359	CastTarget	int		317834	0					
ANR	318360	Identifier	offset		317834	1					
ANR	318361	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		317834	3					
ANR	318362	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		317834	0					
ANR	318363	Condition	WRITEBACK_BIT_SET		317834	0					
ANR	318364	Identifier	WRITEBACK_BIT_SET		317834	0					
ANR	318365	PrimaryExpression	"""!"""		317834	1					
ANR	318366	PrimaryExpression	""""""		317834	2					
ANR	318367	ElseStatement	else		317834	0					
ANR	318368	IfStatement	if ( NEGATIVE_BIT_SET )		317834	0					
ANR	318369	Condition	NEGATIVE_BIT_SET	3515:18:164162:164177	317834	0	True				
ANR	318370	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	318371	CompoundStatement		146:36:3559:3559	317834	1					
ANR	318372	ExpressionStatement	"func ( stream , "", #-0]"" )"	3516:8:164190:164213	317834	0	True				
ANR	318373	CallExpression	"func ( stream , "", #-0]"" )"		317834	0					
ANR	318374	Callee	func		317834	0					
ANR	318375	Identifier	func		317834	0					
ANR	318376	ArgumentList	stream		317834	1					
ANR	318377	Argument	stream		317834	0					
ANR	318378	Identifier	stream		317834	0					
ANR	318379	Argument	""", #-0]"""		317834	1					
ANR	318380	PrimaryExpression	""", #-0]"""		317834	0					
ANR	318381	ElseStatement	else		317834	0					
ANR	318382	CompoundStatement		148:14:3608:3608	317834	0					
ANR	318383	ExpressionStatement	"func ( stream , ""]"" )"	3518:8:164239:164257	317834	0	True				
ANR	318384	CallExpression	"func ( stream , ""]"" )"		317834	0					
ANR	318385	Callee	func		317834	0					
ANR	318386	Identifier	func		317834	0					
ANR	318387	ArgumentList	stream		317834	1					
ANR	318388	Argument	stream		317834	0					
ANR	318389	Identifier	stream		317834	0					
ANR	318390	Argument	"""]"""		317834	1					
ANR	318391	PrimaryExpression	"""]"""		317834	0					
ANR	318392	ElseStatement	else		317834	0					
ANR	318393	CompoundStatement		153:8:3676:3676	317834	0					
ANR	318394	ExpressionStatement	"func ( stream , ""]"" )"	3523:3:164302:164320	317834	0	True				
ANR	318395	CallExpression	"func ( stream , ""]"" )"		317834	0					
ANR	318396	Callee	func		317834	0					
ANR	318397	Identifier	func		317834	0					
ANR	318398	ArgumentList	stream		317834	1					
ANR	318399	Argument	stream		317834	0					
ANR	318400	Identifier	stream		317834	0					
ANR	318401	Argument	"""]"""		317834	1					
ANR	318402	PrimaryExpression	"""]"""		317834	0					
ANR	318403	IfStatement	if ( WRITEBACK_BIT_SET )		317834	1					
ANR	318404	Condition	WRITEBACK_BIT_SET	3525:7:164330:164346	317834	0	True				
ANR	318405	Identifier	WRITEBACK_BIT_SET		317834	0					
ANR	318406	CompoundStatement		157:5:3733:3733	317834	1					
ANR	318407	IfStatement	if ( offset )		317834	0					
ANR	318408	Condition	offset	3527:8:164364:164369	317834	0	True				
ANR	318409	Identifier	offset		317834	0					
ANR	318410	CompoundStatement		158:16:3751:3751	317834	1					
ANR	318411	ExpressionStatement	"func ( stream , "", 0x%x"" , ( int ) offset )"	3528:5:164379:164415	317834	0	True				
ANR	318412	CallExpression	"func ( stream , "", 0x%x"" , ( int ) offset )"		317834	0					
ANR	318413	Callee	func		317834	0					
ANR	318414	Identifier	func		317834	0					
ANR	318415	ArgumentList	stream		317834	1					
ANR	318416	Argument	stream		317834	0					
ANR	318417	Identifier	stream		317834	0					
ANR	318418	Argument	""", 0x%x"""		317834	1					
ANR	318419	PrimaryExpression	""", 0x%x"""		317834	0					
ANR	318420	Argument	( int ) offset		317834	2					
ANR	318421	CastExpression	( int ) offset		317834	0					
ANR	318422	CastTarget	int		317834	0					
ANR	318423	Identifier	offset		317834	1					
ANR	318424	ElseStatement	else		317834	0					
ANR	318425	IfStatement	if ( NEGATIVE_BIT_SET )		317834	0					
ANR	318426	Condition	NEGATIVE_BIT_SET	3529:15:164432:164447	317834	0	True				
ANR	318427	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	318428	CompoundStatement		160:33:3829:3829	317834	1					
ANR	318429	ExpressionStatement	"func ( stream , "", #-0"" )"	3530:5:164457:164479	317834	0	True				
ANR	318430	CallExpression	"func ( stream , "", #-0"" )"		317834	0					
ANR	318431	Callee	func		317834	0					
ANR	318432	Identifier	func		317834	0					
ANR	318433	ArgumentList	stream		317834	1					
ANR	318434	Argument	stream		317834	0					
ANR	318435	Identifier	stream		317834	0					
ANR	318436	Argument	""", #-0"""		317834	1					
ANR	318437	PrimaryExpression	""", #-0"""		317834	0					
ANR	318438	ElseStatement	else		317834	0					
ANR	318439	CompoundStatement		165:5:3886:3886	317834	0					
ANR	318440	ExpressionStatement	"func ( stream , "", {%s%d}"" , ( NEGATIVE_BIT_SET && ! offset ) ? ""-"" : """" , ( int ) offset )"	3535:7:164516:164609	317834	0	True				
ANR	318441	CallExpression	"func ( stream , "", {%s%d}"" , ( NEGATIVE_BIT_SET && ! offset ) ? ""-"" : """" , ( int ) offset )"		317834	0					
ANR	318442	Callee	func		317834	0					
ANR	318443	Identifier	func		317834	0					
ANR	318444	ArgumentList	stream		317834	1					
ANR	318445	Argument	stream		317834	0					
ANR	318446	Identifier	stream		317834	0					
ANR	318447	Argument	""", {%s%d}"""		317834	1					
ANR	318448	PrimaryExpression	""", {%s%d}"""		317834	0					
ANR	318449	Argument	"( NEGATIVE_BIT_SET && ! offset ) ? ""-"" : """""		317834	2					
ANR	318450	ConditionalExpression	"( NEGATIVE_BIT_SET && ! offset ) ? ""-"" : """""		317834	0					
ANR	318451	Condition	NEGATIVE_BIT_SET && ! offset		317834	0					
ANR	318452	AndExpression	NEGATIVE_BIT_SET && ! offset		317834	0		&&			
ANR	318453	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	318454	UnaryOperationExpression	! offset		317834	1					
ANR	318455	UnaryOperator	!		317834	0					
ANR	318456	Identifier	offset		317834	1					
ANR	318457	PrimaryExpression	"""-"""		317834	1					
ANR	318458	PrimaryExpression	""""""		317834	2					
ANR	318459	Argument	( int ) offset		317834	3					
ANR	318460	CastExpression	( int ) offset		317834	0					
ANR	318461	CastTarget	int		317834	0					
ANR	318462	Identifier	offset		317834	1					
ANR	318463	IfStatement	if ( rn == 15 && ( PRE_BIT_SET || WRITEBACK_BIT_SET ) )		317834	5					
ANR	318464	Condition	rn == 15 && ( PRE_BIT_SET || WRITEBACK_BIT_SET )	3541:10:164674:164719	317834	0	True				
ANR	318465	AndExpression	rn == 15 && ( PRE_BIT_SET || WRITEBACK_BIT_SET )		317834	0		&&			
ANR	318466	EqualityExpression	rn == 15		317834	0		==			
ANR	318467	Identifier	rn		317834	0					
ANR	318468	PrimaryExpression	15		317834	1					
ANR	318469	OrExpression	PRE_BIT_SET || WRITEBACK_BIT_SET		317834	1		||			
ANR	318470	Identifier	PRE_BIT_SET		317834	0					
ANR	318471	Identifier	WRITEBACK_BIT_SET		317834	1					
ANR	318472	CompoundStatement		173:8:4109:4109	317834	1					
ANR	318473	ExpressionStatement	"func ( stream , "" ; "" )"	3543:3:164735:164755	317834	0	True				
ANR	318474	CallExpression	"func ( stream , "" ; "" )"		317834	0					
ANR	318475	Callee	func		317834	0					
ANR	318476	Identifier	func		317834	0					
ANR	318477	ArgumentList	stream		317834	1					
ANR	318478	Argument	stream		317834	0					
ANR	318479	Identifier	stream		317834	0					
ANR	318480	Argument	""" ; """		317834	1					
ANR	318481	PrimaryExpression	""" ; """		317834	0					
ANR	318482	ExpressionStatement	"info -> print_address_func ( offset + pc + info -> bytes_per_chunk * 2 - ( pc & 3 ) , info )"	3546:3:164830:164938	317834	1	True				
ANR	318483	CallExpression	"info -> print_address_func ( offset + pc + info -> bytes_per_chunk * 2 - ( pc & 3 ) , info )"		317834	0					
ANR	318484	Callee	info -> print_address_func		317834	0					
ANR	318485	PtrMemberAccess	info -> print_address_func		317834	0					
ANR	318486	Identifier	info		317834	0					
ANR	318487	Identifier	print_address_func		317834	1					
ANR	318488	ArgumentList	offset + pc + info -> bytes_per_chunk * 2 - ( pc & 3 )		317834	1					
ANR	318489	Argument	offset + pc + info -> bytes_per_chunk * 2 - ( pc & 3 )		317834	0					
ANR	318490	AdditiveExpression	offset + pc + info -> bytes_per_chunk * 2 - ( pc & 3 )		317834	0		+			
ANR	318491	Identifier	offset		317834	0					
ANR	318492	AdditiveExpression	pc + info -> bytes_per_chunk * 2 - ( pc & 3 )		317834	1		+			
ANR	318493	Identifier	pc		317834	0					
ANR	318494	AdditiveExpression	info -> bytes_per_chunk * 2 - ( pc & 3 )		317834	1		-			
ANR	318495	MultiplicativeExpression	info -> bytes_per_chunk * 2		317834	0		*			
ANR	318496	PtrMemberAccess	info -> bytes_per_chunk		317834	0					
ANR	318497	Identifier	info		317834	0					
ANR	318498	Identifier	bytes_per_chunk		317834	1					
ANR	318499	PrimaryExpression	2		317834	1					
ANR	318500	BitAndExpression	pc & 3		317834	1		&			
ANR	318501	Identifier	pc		317834	0					
ANR	318502	PrimaryExpression	3		317834	1					
ANR	318503	Argument	info		317834	1					
ANR	318504	Identifier	info		317834	0					
ANR	318505	BreakStatement	break ;	3552:4:164960:164965	317834	5	True				
ANR	318506	Label	case 'B' :	3554:2:164970:164978	317834	6	True				
ANR	318507	CompoundStatement		188:6:4443:4475	317834	7					
ANR	318508	IdentifierDeclStatement	int regno = ( ( given >> 12 ) & 0xf ) | ( ( given >> ( 22 - 4 ) ) & 0x10 ) ;	3556:6:164992:165056	317834	0	True				
ANR	318509	IdentifierDecl	regno = ( ( given >> 12 ) & 0xf ) | ( ( given >> ( 22 - 4 ) ) & 0x10 )		317834	0					
ANR	318510	IdentifierDeclType	int		317834	0					
ANR	318511	Identifier	regno		317834	1					
ANR	318512	AssignmentExpression	regno = ( ( given >> 12 ) & 0xf ) | ( ( given >> ( 22 - 4 ) ) & 0x10 )		317834	2		=			
ANR	318513	Identifier	regno		317834	0					
ANR	318514	InclusiveOrExpression	( ( given >> 12 ) & 0xf ) | ( ( given >> ( 22 - 4 ) ) & 0x10 )		317834	1		|			
ANR	318515	BitAndExpression	( given >> 12 ) & 0xf		317834	0		&			
ANR	318516	ShiftExpression	given >> 12		317834	0		>>			
ANR	318517	Identifier	given		317834	0					
ANR	318518	PrimaryExpression	12		317834	1					
ANR	318519	PrimaryExpression	0xf		317834	1					
ANR	318520	BitAndExpression	( given >> ( 22 - 4 ) ) & 0x10		317834	1		&			
ANR	318521	ShiftExpression	given >> ( 22 - 4 )		317834	0		>>			
ANR	318522	Identifier	given		317834	0					
ANR	318523	AdditiveExpression	22 - 4		317834	1		-			
ANR	318524	PrimaryExpression	22		317834	0					
ANR	318525	PrimaryExpression	4		317834	1					
ANR	318526	PrimaryExpression	0x10		317834	1					
ANR	318527	IdentifierDeclStatement	int offset = ( given >> 1 ) & 0x3f ;	3557:6:165064:165096	317834	1	True				
ANR	318528	IdentifierDecl	offset = ( given >> 1 ) & 0x3f		317834	0					
ANR	318529	IdentifierDeclType	int		317834	0					
ANR	318530	Identifier	offset		317834	1					
ANR	318531	AssignmentExpression	offset = ( given >> 1 ) & 0x3f		317834	2		=			
ANR	318532	Identifier	offset		317834	0					
ANR	318533	BitAndExpression	( given >> 1 ) & 0x3f		317834	1		&			
ANR	318534	ShiftExpression	given >> 1		317834	0		>>			
ANR	318535	Identifier	given		317834	0					
ANR	318536	PrimaryExpression	1		317834	1					
ANR	318537	PrimaryExpression	0x3f		317834	1					
ANR	318538	IfStatement	if ( offset == 1 )		317834	2					
ANR	318539	Condition	offset == 1	3559:10:165109:165119	317834	0	True				
ANR	318540	EqualityExpression	offset == 1		317834	0		==			
ANR	318541	Identifier	offset		317834	0					
ANR	318542	PrimaryExpression	1		317834	1					
ANR	318543	CompoundStatement		190:23:4501:4501	317834	1					
ANR	318544	ExpressionStatement	"func ( stream , ""{d%d}"" , regno )"	3560:7:165131:165160	317834	0	True				
ANR	318545	CallExpression	"func ( stream , ""{d%d}"" , regno )"		317834	0					
ANR	318546	Callee	func		317834	0					
ANR	318547	Identifier	func		317834	0					
ANR	318548	ArgumentList	stream		317834	1					
ANR	318549	Argument	stream		317834	0					
ANR	318550	Identifier	stream		317834	0					
ANR	318551	Argument	"""{d%d}"""		317834	1					
ANR	318552	PrimaryExpression	"""{d%d}"""		317834	0					
ANR	318553	Argument	regno		317834	2					
ANR	318554	Identifier	regno		317834	0					
ANR	318555	ElseStatement	else		317834	0					
ANR	318556	IfStatement	if ( regno + offset > 32 )		317834	0					
ANR	318557	Condition	regno + offset > 32	3561:17:165179:165197	317834	0	True				
ANR	318558	RelationalExpression	regno + offset > 32		317834	0		>			
ANR	318559	AdditiveExpression	regno + offset		317834	0		+			
ANR	318560	Identifier	regno		317834	0					
ANR	318561	Identifier	offset		317834	1					
ANR	318562	PrimaryExpression	32		317834	1					
ANR	318563	CompoundStatement		192:38:4579:4579	317834	1					
ANR	318564	ExpressionStatement	"func ( stream , ""{d%d-<overflow reg d%d>}"" , regno , regno + offset - 1 )"	3562:7:165209:165277	317834	0	True				
ANR	318565	CallExpression	"func ( stream , ""{d%d-<overflow reg d%d>}"" , regno , regno + offset - 1 )"		317834	0					
ANR	318566	Callee	func		317834	0					
ANR	318567	Identifier	func		317834	0					
ANR	318568	ArgumentList	stream		317834	1					
ANR	318569	Argument	stream		317834	0					
ANR	318570	Identifier	stream		317834	0					
ANR	318571	Argument	"""{d%d-<overflow reg d%d>}"""		317834	1					
ANR	318572	PrimaryExpression	"""{d%d-<overflow reg d%d>}"""		317834	0					
ANR	318573	Argument	regno		317834	2					
ANR	318574	Identifier	regno		317834	0					
ANR	318575	Argument	regno + offset - 1		317834	3					
ANR	318576	AdditiveExpression	regno + offset - 1		317834	0		+			
ANR	318577	Identifier	regno		317834	0					
ANR	318578	AdditiveExpression	offset - 1		317834	1		-			
ANR	318579	Identifier	offset		317834	0					
ANR	318580	PrimaryExpression	1		317834	1					
ANR	318581	ElseStatement	else		317834	0					
ANR	318582	CompoundStatement		194:13:4671:4671	317834	0					
ANR	318583	ExpressionStatement	"func ( stream , ""{d%d-d%d}"" , regno , regno + offset - 1 )"	3564:7:165301:165354	317834	0	True				
ANR	318584	CallExpression	"func ( stream , ""{d%d-d%d}"" , regno , regno + offset - 1 )"		317834	0					
ANR	318585	Callee	func		317834	0					
ANR	318586	Identifier	func		317834	0					
ANR	318587	ArgumentList	stream		317834	1					
ANR	318588	Argument	stream		317834	0					
ANR	318589	Identifier	stream		317834	0					
ANR	318590	Argument	"""{d%d-d%d}"""		317834	1					
ANR	318591	PrimaryExpression	"""{d%d-d%d}"""		317834	0					
ANR	318592	Argument	regno		317834	2					
ANR	318593	Identifier	regno		317834	0					
ANR	318594	Argument	regno + offset - 1		317834	3					
ANR	318595	AdditiveExpression	regno + offset - 1		317834	0		+			
ANR	318596	Identifier	regno		317834	0					
ANR	318597	AdditiveExpression	offset - 1		317834	1		-			
ANR	318598	Identifier	offset		317834	0					
ANR	318599	PrimaryExpression	1		317834	1					
ANR	318600	BreakStatement	break ;	3567:4:165374:165379	317834	8	True				
ANR	318601	Label	case 'u' :	3569:2:165384:165392	317834	9	True				
ANR	318602	IfStatement	if ( cond != COND_UNCOND )		317834	10					
ANR	318603	Condition	cond != COND_UNCOND	3570:7:165401:165419	317834	0	True				
ANR	318604	EqualityExpression	cond != COND_UNCOND		317834	0		!=			
ANR	318605	Identifier	cond		317834	0					
ANR	318606	Identifier	COND_UNCOND		317834	1					
ANR	318607	CompoundStatement		201:28:4801:4801	317834	1					
ANR	318608	ExpressionStatement	is_unpredictable = TRUE	3571:4:165428:165451	317834	0	True				
ANR	318609	AssignmentExpression	is_unpredictable = TRUE		317834	0		=			
ANR	318610	Identifier	is_unpredictable		317834	0					
ANR	318611	Identifier	TRUE		317834	1					
ANR	318612	Label	case 'c' :	3575:2:165485:165493	317834	11	True				
ANR	318613	IfStatement	if ( cond != COND_UNCOND && cp_num == 9 )		317834	12					
ANR	318614	Condition	cond != COND_UNCOND && cp_num == 9	3576:7:165502:165535	317834	0	True				
ANR	318615	AndExpression	cond != COND_UNCOND && cp_num == 9		317834	0		&&			
ANR	318616	EqualityExpression	cond != COND_UNCOND		317834	0		!=			
ANR	318617	Identifier	cond		317834	0					
ANR	318618	Identifier	COND_UNCOND		317834	1					
ANR	318619	EqualityExpression	cp_num == 9		317834	1		==			
ANR	318620	Identifier	cp_num		317834	0					
ANR	318621	PrimaryExpression	9		317834	1					
ANR	318622	CompoundStatement		207:43:4917:4917	317834	1					
ANR	318623	ExpressionStatement	is_unpredictable = TRUE	3577:4:165544:165567	317834	0	True				
ANR	318624	AssignmentExpression	is_unpredictable = TRUE		317834	0		=			
ANR	318625	Identifier	is_unpredictable		317834	0					
ANR	318626	Identifier	TRUE		317834	1					
ANR	318627	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ cond ] )"	3580:3:165578:165620	317834	13	True				
ANR	318628	CallExpression	"func ( stream , ""%s"" , arm_conditional [ cond ] )"		317834	0					
ANR	318629	Callee	func		317834	0					
ANR	318630	Identifier	func		317834	0					
ANR	318631	ArgumentList	stream		317834	1					
ANR	318632	Argument	stream		317834	0					
ANR	318633	Identifier	stream		317834	0					
ANR	318634	Argument	"""%s"""		317834	1					
ANR	318635	PrimaryExpression	"""%s"""		317834	0					
ANR	318636	Argument	arm_conditional [ cond ]		317834	2					
ANR	318637	ArrayIndexing	arm_conditional [ cond ]		317834	0					
ANR	318638	Identifier	arm_conditional		317834	0					
ANR	318639	Identifier	cond		317834	1					
ANR	318640	BreakStatement	break ;	3581:3:165625:165630	317834	14	True				
ANR	318641	Label	case 'I' :	3583:2:165635:165643	317834	15	True				
ANR	318642	CompoundStatement		220:6:5216:5223	317834	16					
ANR	318643	IdentifierDeclStatement	int imm ;	3589:6:165837:165844	317834	0	True				
ANR	318644	IdentifierDecl	imm		317834	0					
ANR	318645	IdentifierDeclType	int		317834	0					
ANR	318646	Identifier	imm		317834	1					
ANR	318647	ExpressionStatement	imm = ( given & 0xf ) | ( ( given & 0xe0 ) >> 1 )	3591:6:165853:165896	317834	1	True				
ANR	318648	AssignmentExpression	imm = ( given & 0xf ) | ( ( given & 0xe0 ) >> 1 )		317834	0		=			
ANR	318649	Identifier	imm		317834	0					
ANR	318650	InclusiveOrExpression	( given & 0xf ) | ( ( given & 0xe0 ) >> 1 )		317834	1		|			
ANR	318651	BitAndExpression	given & 0xf		317834	0		&			
ANR	318652	Identifier	given		317834	0					
ANR	318653	PrimaryExpression	0xf		317834	1					
ANR	318654	ShiftExpression	( given & 0xe0 ) >> 1		317834	1		>>			
ANR	318655	BitAndExpression	given & 0xe0		317834	0		&			
ANR	318656	Identifier	given		317834	0					
ANR	318657	PrimaryExpression	0xe0		317834	1					
ANR	318658	PrimaryExpression	1		317834	1					
ANR	318659	IfStatement	if ( imm & 0x40 )		317834	2					
ANR	318660	Condition	imm & 0x40	3594:10:165952:165961	317834	0	True				
ANR	318661	BitAndExpression	imm & 0x40		317834	0		&			
ANR	318662	Identifier	imm		317834	0					
ANR	318663	PrimaryExpression	0x40		317834	1					
ANR	318664	CompoundStatement		225:22:5343:5343	317834	1					
ANR	318665	ExpressionStatement	imm -= 0x80	3595:7:165973:165984	317834	0	True				
ANR	318666	AssignmentExpression	imm -= 0x80		317834	0		-=			
ANR	318667	Identifier	imm		317834	0					
ANR	318668	PrimaryExpression	0x80		317834	1					
ANR	318669	ExpressionStatement	"func ( stream , ""%d"" , imm )"	3598:6:166001:166025	317834	3	True				
ANR	318670	CallExpression	"func ( stream , ""%d"" , imm )"		317834	0					
ANR	318671	Callee	func		317834	0					
ANR	318672	Identifier	func		317834	0					
ANR	318673	ArgumentList	stream		317834	1					
ANR	318674	Argument	stream		317834	0					
ANR	318675	Identifier	stream		317834	0					
ANR	318676	Argument	"""%d"""		317834	1					
ANR	318677	PrimaryExpression	"""%d"""		317834	0					
ANR	318678	Argument	imm		317834	2					
ANR	318679	Identifier	imm		317834	0					
ANR	318680	BreakStatement	break ;	3601:4:166038:166043	317834	17	True				
ANR	318681	Label	case 'F' :	3603:2:166048:166056	317834	18	True				
ANR	318682	SwitchStatement	switch ( given & 0x00408000 )		317834	19					
ANR	318683	Condition	given & 0x00408000	3604:12:166070:166087	317834	0	True				
ANR	318684	BitAndExpression	given & 0x00408000		317834	0		&			
ANR	318685	Identifier	given		317834	0					
ANR	318686	PrimaryExpression	0x00408000		317834	1					
ANR	318687	CompoundStatement		236:6:5475:5475	317834	1					
ANR	318688	Label	case 0 :	3606:6:166104:166110	317834	0	True				
ANR	318689	ExpressionStatement	"func ( stream , ""4"" )"	3607:8:166120:166138	317834	1	True				
ANR	318690	CallExpression	"func ( stream , ""4"" )"		317834	0					
ANR	318691	Callee	func		317834	0					
ANR	318692	Identifier	func		317834	0					
ANR	318693	ArgumentList	stream		317834	1					
ANR	318694	Argument	stream		317834	0					
ANR	318695	Identifier	stream		317834	0					
ANR	318696	Argument	"""4"""		317834	1					
ANR	318697	PrimaryExpression	"""4"""		317834	0					
ANR	318698	BreakStatement	break ;	3608:8:166148:166153	317834	2	True				
ANR	318699	Label	case 0x8000 :	3609:6:166161:166172	317834	3	True				
ANR	318700	ExpressionStatement	"func ( stream , ""1"" )"	3610:8:166182:166200	317834	4	True				
ANR	318701	CallExpression	"func ( stream , ""1"" )"		317834	0					
ANR	318702	Callee	func		317834	0					
ANR	318703	Identifier	func		317834	0					
ANR	318704	ArgumentList	stream		317834	1					
ANR	318705	Argument	stream		317834	0					
ANR	318706	Identifier	stream		317834	0					
ANR	318707	Argument	"""1"""		317834	1					
ANR	318708	PrimaryExpression	"""1"""		317834	0					
ANR	318709	BreakStatement	break ;	3611:8:166210:166215	317834	5	True				
ANR	318710	Label	case 0x00400000 :	3612:6:166223:166238	317834	6	True				
ANR	318711	ExpressionStatement	"func ( stream , ""2"" )"	3613:8:166248:166266	317834	7	True				
ANR	318712	CallExpression	"func ( stream , ""2"" )"		317834	0					
ANR	318713	Callee	func		317834	0					
ANR	318714	Identifier	func		317834	0					
ANR	318715	ArgumentList	stream		317834	1					
ANR	318716	Argument	stream		317834	0					
ANR	318717	Identifier	stream		317834	0					
ANR	318718	Argument	"""2"""		317834	1					
ANR	318719	PrimaryExpression	"""2"""		317834	0					
ANR	318720	BreakStatement	break ;	3614:8:166276:166281	317834	8	True				
ANR	318721	Label	default :	3615:6:166289:166296	317834	9	True				
ANR	318722	Identifier	default		317834	0					
ANR	318723	ExpressionStatement	"func ( stream , ""3"" )"	3616:8:166306:166324	317834	10	True				
ANR	318724	CallExpression	"func ( stream , ""3"" )"		317834	0					
ANR	318725	Callee	func		317834	0					
ANR	318726	Identifier	func		317834	0					
ANR	318727	ArgumentList	stream		317834	1					
ANR	318728	Argument	stream		317834	0					
ANR	318729	Identifier	stream		317834	0					
ANR	318730	Argument	"""3"""		317834	1					
ANR	318731	PrimaryExpression	"""3"""		317834	0					
ANR	318732	BreakStatement	break ;	3618:4:166338:166343	317834	20	True				
ANR	318733	Label	case 'P' :	3620:2:166348:166356	317834	21	True				
ANR	318734	SwitchStatement	switch ( given & 0x00080080 )		317834	22					
ANR	318735	Condition	given & 0x00080080	3621:12:166370:166387	317834	0	True				
ANR	318736	BitAndExpression	given & 0x00080080		317834	0		&			
ANR	318737	Identifier	given		317834	0					
ANR	318738	PrimaryExpression	0x00080080		317834	1					
ANR	318739	CompoundStatement		253:6:5775:5775	317834	1					
ANR	318740	Label	case 0 :	3623:6:166404:166410	317834	0	True				
ANR	318741	ExpressionStatement	"func ( stream , ""s"" )"	3624:8:166420:166438	317834	1	True				
ANR	318742	CallExpression	"func ( stream , ""s"" )"		317834	0					
ANR	318743	Callee	func		317834	0					
ANR	318744	Identifier	func		317834	0					
ANR	318745	ArgumentList	stream		317834	1					
ANR	318746	Argument	stream		317834	0					
ANR	318747	Identifier	stream		317834	0					
ANR	318748	Argument	"""s"""		317834	1					
ANR	318749	PrimaryExpression	"""s"""		317834	0					
ANR	318750	BreakStatement	break ;	3625:8:166448:166453	317834	2	True				
ANR	318751	Label	case 0x80 :	3626:6:166461:166470	317834	3	True				
ANR	318752	ExpressionStatement	"func ( stream , ""d"" )"	3627:8:166480:166498	317834	4	True				
ANR	318753	CallExpression	"func ( stream , ""d"" )"		317834	0					
ANR	318754	Callee	func		317834	0					
ANR	318755	Identifier	func		317834	0					
ANR	318756	ArgumentList	stream		317834	1					
ANR	318757	Argument	stream		317834	0					
ANR	318758	Identifier	stream		317834	0					
ANR	318759	Argument	"""d"""		317834	1					
ANR	318760	PrimaryExpression	"""d"""		317834	0					
ANR	318761	BreakStatement	break ;	3628:8:166508:166513	317834	5	True				
ANR	318762	Label	case 0x00080000 :	3629:6:166521:166536	317834	6	True				
ANR	318763	ExpressionStatement	"func ( stream , ""e"" )"	3630:8:166546:166564	317834	7	True				
ANR	318764	CallExpression	"func ( stream , ""e"" )"		317834	0					
ANR	318765	Callee	func		317834	0					
ANR	318766	Identifier	func		317834	0					
ANR	318767	ArgumentList	stream		317834	1					
ANR	318768	Argument	stream		317834	0					
ANR	318769	Identifier	stream		317834	0					
ANR	318770	Argument	"""e"""		317834	1					
ANR	318771	PrimaryExpression	"""e"""		317834	0					
ANR	318772	BreakStatement	break ;	3631:8:166574:166579	317834	8	True				
ANR	318773	Label	default :	3632:6:166587:166594	317834	9	True				
ANR	318774	Identifier	default		317834	0					
ANR	318775	ExpressionStatement	"func ( stream , _ ( ""<illegal precision>"" ) )"	3633:8:166604:166643	317834	10	True				
ANR	318776	CallExpression	"func ( stream , _ ( ""<illegal precision>"" ) )"		317834	0					
ANR	318777	Callee	func		317834	0					
ANR	318778	Identifier	func		317834	0					
ANR	318779	ArgumentList	stream		317834	1					
ANR	318780	Argument	stream		317834	0					
ANR	318781	Identifier	stream		317834	0					
ANR	318782	Argument	"_ ( ""<illegal precision>"" )"		317834	1					
ANR	318783	CallExpression	"_ ( ""<illegal precision>"" )"		317834	0					
ANR	318784	Callee	_		317834	0					
ANR	318785	Identifier	_		317834	0					
ANR	318786	ArgumentList	"""<illegal precision>"""		317834	1					
ANR	318787	Argument	"""<illegal precision>"""		317834	0					
ANR	318788	PrimaryExpression	"""<illegal precision>"""		317834	0					
ANR	318789	BreakStatement	break ;	3634:8:166653:166658	317834	11	True				
ANR	318790	BreakStatement	break ;	3636:4:166672:166677	317834	23	True				
ANR	318791	Label	case 'Q' :	3638:2:166682:166690	317834	24	True				
ANR	318792	SwitchStatement	switch ( given & 0x00408000 )		317834	25					
ANR	318793	Condition	given & 0x00408000	3639:12:166704:166721	317834	0	True				
ANR	318794	BitAndExpression	given & 0x00408000		317834	0		&			
ANR	318795	Identifier	given		317834	0					
ANR	318796	PrimaryExpression	0x00408000		317834	1					
ANR	318797	CompoundStatement		271:6:6109:6109	317834	1					
ANR	318798	Label	case 0 :	3641:6:166738:166744	317834	0	True				
ANR	318799	ExpressionStatement	"func ( stream , ""s"" )"	3642:8:166754:166772	317834	1	True				
ANR	318800	CallExpression	"func ( stream , ""s"" )"		317834	0					
ANR	318801	Callee	func		317834	0					
ANR	318802	Identifier	func		317834	0					
ANR	318803	ArgumentList	stream		317834	1					
ANR	318804	Argument	stream		317834	0					
ANR	318805	Identifier	stream		317834	0					
ANR	318806	Argument	"""s"""		317834	1					
ANR	318807	PrimaryExpression	"""s"""		317834	0					
ANR	318808	BreakStatement	break ;	3643:8:166782:166787	317834	2	True				
ANR	318809	Label	case 0x8000 :	3644:6:166795:166806	317834	3	True				
ANR	318810	ExpressionStatement	"func ( stream , ""d"" )"	3645:8:166816:166834	317834	4	True				
ANR	318811	CallExpression	"func ( stream , ""d"" )"		317834	0					
ANR	318812	Callee	func		317834	0					
ANR	318813	Identifier	func		317834	0					
ANR	318814	ArgumentList	stream		317834	1					
ANR	318815	Argument	stream		317834	0					
ANR	318816	Identifier	stream		317834	0					
ANR	318817	Argument	"""d"""		317834	1					
ANR	318818	PrimaryExpression	"""d"""		317834	0					
ANR	318819	BreakStatement	break ;	3646:8:166844:166849	317834	5	True				
ANR	318820	Label	case 0x00400000 :	3647:6:166857:166872	317834	6	True				
ANR	318821	ExpressionStatement	"func ( stream , ""e"" )"	3648:8:166882:166900	317834	7	True				
ANR	318822	CallExpression	"func ( stream , ""e"" )"		317834	0					
ANR	318823	Callee	func		317834	0					
ANR	318824	Identifier	func		317834	0					
ANR	318825	ArgumentList	stream		317834	1					
ANR	318826	Argument	stream		317834	0					
ANR	318827	Identifier	stream		317834	0					
ANR	318828	Argument	"""e"""		317834	1					
ANR	318829	PrimaryExpression	"""e"""		317834	0					
ANR	318830	BreakStatement	break ;	3649:8:166910:166915	317834	8	True				
ANR	318831	Label	default :	3650:6:166923:166930	317834	9	True				
ANR	318832	Identifier	default		317834	0					
ANR	318833	ExpressionStatement	"func ( stream , ""p"" )"	3651:8:166940:166958	317834	10	True				
ANR	318834	CallExpression	"func ( stream , ""p"" )"		317834	0					
ANR	318835	Callee	func		317834	0					
ANR	318836	Identifier	func		317834	0					
ANR	318837	ArgumentList	stream		317834	1					
ANR	318838	Argument	stream		317834	0					
ANR	318839	Identifier	stream		317834	0					
ANR	318840	Argument	"""p"""		317834	1					
ANR	318841	PrimaryExpression	"""p"""		317834	0					
ANR	318842	BreakStatement	break ;	3652:8:166968:166973	317834	11	True				
ANR	318843	BreakStatement	break ;	3654:4:166987:166992	317834	26	True				
ANR	318844	Label	case 'R' :	3656:2:166997:167005	317834	27	True				
ANR	318845	SwitchStatement	switch ( given & 0x60 )		317834	28					
ANR	318846	Condition	given & 0x60	3657:12:167019:167030	317834	0	True				
ANR	318847	BitAndExpression	given & 0x60		317834	0		&			
ANR	318848	Identifier	given		317834	0					
ANR	318849	PrimaryExpression	0x60		317834	1					
ANR	318850	CompoundStatement		289:6:6418:6418	317834	1					
ANR	318851	Label	case 0 :	3659:6:167047:167053	317834	0	True				
ANR	318852	BreakStatement	break ;	3660:8:167063:167068	317834	1	True				
ANR	318853	Label	case 0x20 :	3661:6:167076:167085	317834	2	True				
ANR	318854	ExpressionStatement	"func ( stream , ""p"" )"	3662:8:167095:167113	317834	3	True				
ANR	318855	CallExpression	"func ( stream , ""p"" )"		317834	0					
ANR	318856	Callee	func		317834	0					
ANR	318857	Identifier	func		317834	0					
ANR	318858	ArgumentList	stream		317834	1					
ANR	318859	Argument	stream		317834	0					
ANR	318860	Identifier	stream		317834	0					
ANR	318861	Argument	"""p"""		317834	1					
ANR	318862	PrimaryExpression	"""p"""		317834	0					
ANR	318863	BreakStatement	break ;	3663:8:167123:167128	317834	4	True				
ANR	318864	Label	case 0x40 :	3664:6:167136:167145	317834	5	True				
ANR	318865	ExpressionStatement	"func ( stream , ""m"" )"	3665:8:167155:167173	317834	6	True				
ANR	318866	CallExpression	"func ( stream , ""m"" )"		317834	0					
ANR	318867	Callee	func		317834	0					
ANR	318868	Identifier	func		317834	0					
ANR	318869	ArgumentList	stream		317834	1					
ANR	318870	Argument	stream		317834	0					
ANR	318871	Identifier	stream		317834	0					
ANR	318872	Argument	"""m"""		317834	1					
ANR	318873	PrimaryExpression	"""m"""		317834	0					
ANR	318874	BreakStatement	break ;	3666:8:167183:167188	317834	7	True				
ANR	318875	Label	default :	3667:6:167196:167203	317834	8	True				
ANR	318876	Identifier	default		317834	0					
ANR	318877	ExpressionStatement	"func ( stream , ""z"" )"	3668:8:167213:167231	317834	9	True				
ANR	318878	CallExpression	"func ( stream , ""z"" )"		317834	0					
ANR	318879	Callee	func		317834	0					
ANR	318880	Identifier	func		317834	0					
ANR	318881	ArgumentList	stream		317834	1					
ANR	318882	Argument	stream		317834	0					
ANR	318883	Identifier	stream		317834	0					
ANR	318884	Argument	"""z"""		317834	1					
ANR	318885	PrimaryExpression	"""z"""		317834	0					
ANR	318886	BreakStatement	break ;	3669:8:167241:167246	317834	10	True				
ANR	318887	BreakStatement	break ;	3671:4:167260:167265	317834	29	True				
ANR	318888	Label	case '0' :	3673:2:167270:167278	317834	30	True				
ANR	318889	Label	case '1' :	3673:12:167280:167288	317834	31	True				
ANR	318890	Label	case '2' :	3673:22:167290:167298	317834	32	True				
ANR	318891	Label	case '3' :	3673:32:167300:167308	317834	33	True				
ANR	318892	Label	case '4' :	3673:42:167310:167318	317834	34	True				
ANR	318893	Label	case '5' :	3674:2:167322:167330	317834	35	True				
ANR	318894	Label	case '6' :	3674:12:167332:167340	317834	36	True				
ANR	318895	Label	case '7' :	3674:22:167342:167350	317834	37	True				
ANR	318896	Label	case '8' :	3674:32:167352:167360	317834	38	True				
ANR	318897	Label	case '9' :	3674:42:167362:167370	317834	39	True				
ANR	318898	CompoundStatement		307:6:6763:6772	317834	40					
ANR	318899	IdentifierDeclStatement	int width ;	3676:6:167384:167393	317834	0	True				
ANR	318900	IdentifierDecl	width		317834	0					
ANR	318901	IdentifierDeclType	int		317834	0					
ANR	318902	Identifier	width		317834	1					
ANR	318903	ExpressionStatement	"c = arm_decode_bitfield ( c , given , & value , & width )"	3678:6:167402:167452	317834	1	True				
ANR	318904	AssignmentExpression	"c = arm_decode_bitfield ( c , given , & value , & width )"		317834	0		=			
ANR	318905	Identifier	c		317834	0					
ANR	318906	CallExpression	"arm_decode_bitfield ( c , given , & value , & width )"		317834	1					
ANR	318907	Callee	arm_decode_bitfield		317834	0					
ANR	318908	Identifier	arm_decode_bitfield		317834	0					
ANR	318909	ArgumentList	c		317834	1					
ANR	318910	Argument	c		317834	0					
ANR	318911	Identifier	c		317834	0					
ANR	318912	Argument	given		317834	1					
ANR	318913	Identifier	given		317834	0					
ANR	318914	Argument	& value		317834	2					
ANR	318915	UnaryOperationExpression	& value		317834	0					
ANR	318916	UnaryOperator	&		317834	0					
ANR	318917	Identifier	value		317834	1					
ANR	318918	Argument	& width		317834	3					
ANR	318919	UnaryOperationExpression	& width		317834	0					
ANR	318920	UnaryOperator	&		317834	0					
ANR	318921	Identifier	width		317834	1					
ANR	318922	SwitchStatement	switch ( * c )		317834	2					
ANR	318923	Condition	* c	3680:14:167469:167470	317834	0	True				
ANR	318924	UnaryOperationExpression	* c		317834	0					
ANR	318925	UnaryOperator	*		317834	0					
ANR	318926	Identifier	c		317834	1					
ANR	318927	CompoundStatement		312:8:6860:6860	317834	1					
ANR	318928	Label	case 'R' :	3682:8:167491:167499	317834	0	True				
ANR	318929	IfStatement	if ( value == 15 )		317834	1					
ANR	318930	Condition	value == 15	3683:13:167514:167524	317834	0	True				
ANR	318931	EqualityExpression	value == 15		317834	0		==			
ANR	318932	Identifier	value		317834	0					
ANR	318933	PrimaryExpression	15		317834	1					
ANR	318934	CompoundStatement		314:26:6906:6906	317834	1					
ANR	318935	ExpressionStatement	is_unpredictable = TRUE	3684:10:167539:167562	317834	0	True				
ANR	318936	AssignmentExpression	is_unpredictable = TRUE		317834	0		=			
ANR	318937	Identifier	is_unpredictable		317834	0					
ANR	318938	Identifier	TRUE		317834	1					
ANR	318939	Label	case 'r' :	3687:8:167613:167621	317834	2	True				
ANR	318940	IfStatement	if ( c [ 1 ] == 'u' )		317834	3					
ANR	318941	Condition	c [ 1 ] == 'u'	3688:7:167630:167640	317834	0	True				
ANR	318942	EqualityExpression	c [ 1 ] == 'u'		317834	0		==			
ANR	318943	ArrayIndexing	c [ 1 ]		317834	0					
ANR	318944	Identifier	c		317834	0					
ANR	318945	PrimaryExpression	1		317834	1					
ANR	318946	PrimaryExpression	'u'		317834	1					
ANR	318947	CompoundStatement		320:5:7027:7027	317834	1					
ANR	318948	ExpressionStatement	++ c	3691:7:167694:167698	317834	0	True				
ANR	318949	UnaryExpression	++ c		317834	0					
ANR	318950	IncDec	++		317834	0					
ANR	318951	Identifier	c		317834	1					
ANR	318952	IfStatement	if ( u_reg == value )		317834	1					
ANR	318953	Condition	u_reg == value	3693:11:167712:167725	317834	0	True				
ANR	318954	EqualityExpression	u_reg == value		317834	0		==			
ANR	318955	Identifier	u_reg		317834	0					
ANR	318956	Identifier	value		317834	1					
ANR	318957	CompoundStatement		324:27:7107:7107	317834	1					
ANR	318958	ExpressionStatement	is_unpredictable = TRUE	3694:8:167738:167761	317834	0	True				
ANR	318959	AssignmentExpression	is_unpredictable = TRUE		317834	0		=			
ANR	318960	Identifier	is_unpredictable		317834	0					
ANR	318961	Identifier	TRUE		317834	1					
ANR	318962	ExpressionStatement	u_reg = value	3696:7:167779:167792	317834	2	True				
ANR	318963	AssignmentExpression	u_reg = value		317834	0		=			
ANR	318964	Identifier	u_reg		317834	0					
ANR	318965	Identifier	value		317834	1					
ANR	318966	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ value & 0xf ] )"	3698:24:167825:167872	317834	4	True				
ANR	318967	CallExpression	"func ( stream , ""%s"" , arm_regnames [ value & 0xf ] )"		317834	0					
ANR	318968	Callee	func		317834	0					
ANR	318969	Identifier	func		317834	0					
ANR	318970	ArgumentList	stream		317834	1					
ANR	318971	Argument	stream		317834	0					
ANR	318972	Identifier	stream		317834	0					
ANR	318973	Argument	"""%s"""		317834	1					
ANR	318974	PrimaryExpression	"""%s"""		317834	0					
ANR	318975	Argument	arm_regnames [ value & 0xf ]		317834	2					
ANR	318976	ArrayIndexing	arm_regnames [ value & 0xf ]		317834	0					
ANR	318977	Identifier	arm_regnames		317834	0					
ANR	318978	BitAndExpression	value & 0xf		317834	1		&			
ANR	318979	Identifier	value		317834	0					
ANR	318980	PrimaryExpression	0xf		317834	1					
ANR	318981	BreakStatement	break ;	3700:3:167878:167883	317834	5	True				
ANR	318982	Label	case 'V' :	3701:8:167893:167901	317834	6	True				
ANR	318983	IfStatement	if ( given & ( 1 << 6 ) )		317834	7					
ANR	318984	Condition	given & ( 1 << 6 )	3702:13:167916:167931	317834	0	True				
ANR	318985	BitAndExpression	given & ( 1 << 6 )		317834	0		&			
ANR	318986	Identifier	given		317834	0					
ANR	318987	ShiftExpression	1 << 6		317834	1		<<			
ANR	318988	PrimaryExpression	1		317834	0					
ANR	318989	PrimaryExpression	6		317834	1					
ANR	318990	CompoundStatement		333:31:7313:7313	317834	1					
ANR	318991	GotoStatement	goto Q ;	3703:10:167946:167952	317834	0	True				
ANR	318992	Identifier	Q		317834	0					
ANR	318993	Label	case 'D' :	3706:8:168000:168008	317834	8	True				
ANR	318994	ExpressionStatement	"func ( stream , ""d%ld"" , value )"	3707:3:168013:168041	317834	9	True				
ANR	318995	CallExpression	"func ( stream , ""d%ld"" , value )"		317834	0					
ANR	318996	Callee	func		317834	0					
ANR	318997	Identifier	func		317834	0					
ANR	318998	ArgumentList	stream		317834	1					
ANR	318999	Argument	stream		317834	0					
ANR	319000	Identifier	stream		317834	0					
ANR	319001	Argument	"""d%ld"""		317834	1					
ANR	319002	PrimaryExpression	"""d%ld"""		317834	0					
ANR	319003	Argument	value		317834	2					
ANR	319004	Identifier	value		317834	0					
ANR	319005	BreakStatement	break ;	3708:3:168046:168051	317834	10	True				
ANR	319006	Label	case 'Q' :	3709:8:168061:168069	317834	11	True				
ANR	319007	Label	Q :	3710:8:168079:168080	317834	12	True				
ANR	319008	Identifier	Q		317834	0					
ANR	319009	IfStatement	if ( value & 1 )		317834	13					
ANR	319010	Condition	value & 1	3711:13:168095:168103	317834	0	True				
ANR	319011	BitAndExpression	value & 1		317834	0		&			
ANR	319012	Identifier	value		317834	0					
ANR	319013	PrimaryExpression	1		317834	1					
ANR	319014	CompoundStatement		342:24:7485:7485	317834	1					
ANR	319015	ExpressionStatement	"func ( stream , ""<illegal reg q%ld.5>"" , value >> 1 )"	3712:10:168118:168167	317834	0	True				
ANR	319016	CallExpression	"func ( stream , ""<illegal reg q%ld.5>"" , value >> 1 )"		317834	0					
ANR	319017	Callee	func		317834	0					
ANR	319018	Identifier	func		317834	0					
ANR	319019	ArgumentList	stream		317834	1					
ANR	319020	Argument	stream		317834	0					
ANR	319021	Identifier	stream		317834	0					
ANR	319022	Argument	"""<illegal reg q%ld.5>"""		317834	1					
ANR	319023	PrimaryExpression	"""<illegal reg q%ld.5>"""		317834	0					
ANR	319024	Argument	value >> 1		317834	2					
ANR	319025	ShiftExpression	value >> 1		317834	0		>>			
ANR	319026	Identifier	value		317834	0					
ANR	319027	PrimaryExpression	1		317834	1					
ANR	319028	ElseStatement	else		317834	0					
ANR	319029	CompoundStatement		344:16:7564:7564	317834	0					
ANR	319030	ExpressionStatement	"func ( stream , ""q%ld"" , value >> 1 )"	3714:10:168197:168230	317834	0	True				
ANR	319031	CallExpression	"func ( stream , ""q%ld"" , value >> 1 )"		317834	0					
ANR	319032	Callee	func		317834	0					
ANR	319033	Identifier	func		317834	0					
ANR	319034	ArgumentList	stream		317834	1					
ANR	319035	Argument	stream		317834	0					
ANR	319036	Identifier	stream		317834	0					
ANR	319037	Argument	"""q%ld"""		317834	1					
ANR	319038	PrimaryExpression	"""q%ld"""		317834	0					
ANR	319039	Argument	value >> 1		317834	2					
ANR	319040	ShiftExpression	value >> 1		317834	0		>>			
ANR	319041	Identifier	value		317834	0					
ANR	319042	PrimaryExpression	1		317834	1					
ANR	319043	BreakStatement	break ;	3716:9:168252:168257	317834	14	True				
ANR	319044	Label	case 'd' :	3717:8:168267:168275	317834	15	True				
ANR	319045	ExpressionStatement	"func ( stream , ""%ld"" , value )"	3718:3:168280:168307	317834	16	True				
ANR	319046	CallExpression	"func ( stream , ""%ld"" , value )"		317834	0					
ANR	319047	Callee	func		317834	0					
ANR	319048	Identifier	func		317834	0					
ANR	319049	ArgumentList	stream		317834	1					
ANR	319050	Argument	stream		317834	0					
ANR	319051	Identifier	stream		317834	0					
ANR	319052	Argument	"""%ld"""		317834	1					
ANR	319053	PrimaryExpression	"""%ld"""		317834	0					
ANR	319054	Argument	value		317834	2					
ANR	319055	Identifier	value		317834	0					
ANR	319056	BreakStatement	break ;	3720:3:168344:168349	317834	17	True				
ANR	319057	Label	case 'E' :	3721:8:168359:168367	317834	18	True				
ANR	319058	CompoundStatement		362:5:8134:8233	317834	19					
ANR	319059	IdentifierDeclStatement	unsigned floatVal = ( value & 0x80 ) << 24 | ( value & 0x3F ) << 19 | ( ( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 ) ) ;	3724:5:168458:168581	317834	0	True				
ANR	319060	IdentifierDecl	floatVal = ( value & 0x80 ) << 24 | ( value & 0x3F ) << 19 | ( ( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 ) )		317834	0					
ANR	319061	IdentifierDeclType	unsigned		317834	0					
ANR	319062	Identifier	floatVal		317834	1					
ANR	319063	AssignmentExpression	floatVal = ( value & 0x80 ) << 24 | ( value & 0x3F ) << 19 | ( ( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 ) )		317834	2		=			
ANR	319064	Identifier	floatVal		317834	0					
ANR	319065	InclusiveOrExpression	( value & 0x80 ) << 24 | ( value & 0x3F ) << 19 | ( ( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 ) )		317834	1		|			
ANR	319066	ShiftExpression	( value & 0x80 ) << 24		317834	0		<<			
ANR	319067	BitAndExpression	value & 0x80		317834	0		&			
ANR	319068	Identifier	value		317834	0					
ANR	319069	PrimaryExpression	0x80		317834	1					
ANR	319070	PrimaryExpression	24		317834	1					
ANR	319071	InclusiveOrExpression	( value & 0x3F ) << 19 | ( ( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 ) )		317834	1		|			
ANR	319072	ShiftExpression	( value & 0x3F ) << 19		317834	0		<<			
ANR	319073	BitAndExpression	value & 0x3F		317834	0		&			
ANR	319074	Identifier	value		317834	0					
ANR	319075	PrimaryExpression	0x3F		317834	1					
ANR	319076	PrimaryExpression	19		317834	1					
ANR	319077	ConditionalExpression	( value & 0x40 ) ? ( 0xF8 << 22 ) : ( 1 << 30 )		317834	1					
ANR	319078	Condition	value & 0x40		317834	0					
ANR	319079	BitAndExpression	value & 0x40		317834	0		&			
ANR	319080	Identifier	value		317834	0					
ANR	319081	PrimaryExpression	0x40		317834	1					
ANR	319082	ShiftExpression	0xF8 << 22		317834	1		<<			
ANR	319083	PrimaryExpression	0xF8		317834	0					
ANR	319084	PrimaryExpression	22		317834	1					
ANR	319085	ShiftExpression	1 << 30		317834	2		<<			
ANR	319086	PrimaryExpression	1		317834	0					
ANR	319087	PrimaryExpression	30		317834	1					
ANR	319088	IdentifierDeclStatement	unsigned decVal = ( 78125 << ( ( ( floatVal >> 23 ) & 0xFF ) - 124 ) ) * ( 16 + ( value & 0xF ) ) ;	3731:5:168755:168854	317834	1	True				
ANR	319089	IdentifierDecl	decVal = ( 78125 << ( ( ( floatVal >> 23 ) & 0xFF ) - 124 ) ) * ( 16 + ( value & 0xF ) )		317834	0					
ANR	319090	IdentifierDeclType	unsigned		317834	0					
ANR	319091	Identifier	decVal		317834	1					
ANR	319092	AssignmentExpression	decVal = ( 78125 << ( ( ( floatVal >> 23 ) & 0xFF ) - 124 ) ) * ( 16 + ( value & 0xF ) )		317834	2		=			
ANR	319093	Identifier	decVal		317834	0					
ANR	319094	MultiplicativeExpression	( 78125 << ( ( ( floatVal >> 23 ) & 0xFF ) - 124 ) ) * ( 16 + ( value & 0xF ) )		317834	1		*			
ANR	319095	ShiftExpression	78125 << ( ( ( floatVal >> 23 ) & 0xFF ) - 124 )		317834	0		<<			
ANR	319096	PrimaryExpression	78125		317834	0					
ANR	319097	AdditiveExpression	( ( floatVal >> 23 ) & 0xFF ) - 124		317834	1		-			
ANR	319098	BitAndExpression	( floatVal >> 23 ) & 0xFF		317834	0		&			
ANR	319099	ShiftExpression	floatVal >> 23		317834	0		>>			
ANR	319100	Identifier	floatVal		317834	0					
ANR	319101	PrimaryExpression	23		317834	1					
ANR	319102	PrimaryExpression	0xFF		317834	1					
ANR	319103	PrimaryExpression	124		317834	1					
ANR	319104	AdditiveExpression	16 + ( value & 0xF )		317834	1		+			
ANR	319105	PrimaryExpression	16		317834	0					
ANR	319106	BitAndExpression	value & 0xF		317834	1		&			
ANR	319107	Identifier	value		317834	0					
ANR	319108	PrimaryExpression	0xF		317834	1					
ANR	319109	IfStatement	if ( ! ( decVal % 1000000 ) )		317834	2					
ANR	319110	Condition	! ( decVal % 1000000 )	3735:9:168866:168884	317834	0	True				
ANR	319111	UnaryOperationExpression	! ( decVal % 1000000 )		317834	0					
ANR	319112	UnaryOperator	!		317834	0					
ANR	319113	MultiplicativeExpression	decVal % 1000000		317834	1		%			
ANR	319114	Identifier	decVal		317834	0					
ANR	319115	PrimaryExpression	1000000		317834	1					
ANR	319116	CompoundStatement		366:30:8266:8266	317834	1					
ANR	319117	ExpressionStatement	"func ( stream , ""%ld ; 0x%08x %c%u.%01u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 / 1000000 )"	3736:6:168895:169046	317834	0	True				
ANR	319118	CallExpression	"func ( stream , ""%ld ; 0x%08x %c%u.%01u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 / 1000000 )"		317834	0					
ANR	319119	Callee	func		317834	0					
ANR	319120	Identifier	func		317834	0					
ANR	319121	ArgumentList	stream		317834	1					
ANR	319122	Argument	stream		317834	0					
ANR	319123	Identifier	stream		317834	0					
ANR	319124	Argument	"""%ld ; 0x%08x %c%u.%01u"""		317834	1					
ANR	319125	PrimaryExpression	"""%ld ; 0x%08x %c%u.%01u"""		317834	0					
ANR	319126	Argument	value		317834	2					
ANR	319127	Identifier	value		317834	0					
ANR	319128	Argument	floatVal		317834	3					
ANR	319129	Identifier	floatVal		317834	0					
ANR	319130	Argument	value & 0x80 ? '-' : ' '		317834	4					
ANR	319131	ConditionalExpression	value & 0x80 ? '-' : ' '		317834	0					
ANR	319132	Condition	value & 0x80		317834	0					
ANR	319133	BitAndExpression	value & 0x80		317834	0		&			
ANR	319134	Identifier	value		317834	0					
ANR	319135	PrimaryExpression	0x80		317834	1					
ANR	319136	PrimaryExpression	'-'		317834	1					
ANR	319137	PrimaryExpression	' '		317834	2					
ANR	319138	Argument	decVal / 10000000		317834	5					
ANR	319139	MultiplicativeExpression	decVal / 10000000		317834	0		/			
ANR	319140	Identifier	decVal		317834	0					
ANR	319141	PrimaryExpression	10000000		317834	1					
ANR	319142	Argument	decVal % 10000000 / 1000000		317834	6					
ANR	319143	MultiplicativeExpression	decVal % 10000000 / 1000000		317834	0		%			
ANR	319144	Identifier	decVal		317834	0					
ANR	319145	MultiplicativeExpression	10000000 / 1000000		317834	1		/			
ANR	319146	PrimaryExpression	10000000		317834	0					
ANR	319147	PrimaryExpression	1000000		317834	1					
ANR	319148	ElseStatement	else		317834	0					
ANR	319149	IfStatement	if ( ! ( decVal % 10000 ) )		317834	0					
ANR	319150	Condition	! ( decVal % 10000 )	3740:16:169064:169080	317834	0	True				
ANR	319151	UnaryOperationExpression	! ( decVal % 10000 )		317834	0					
ANR	319152	UnaryOperator	!		317834	0					
ANR	319153	MultiplicativeExpression	decVal % 10000		317834	1		%			
ANR	319154	Identifier	decVal		317834	0					
ANR	319155	PrimaryExpression	10000		317834	1					
ANR	319156	CompoundStatement		371:35:8462:8462	317834	1					
ANR	319157	ExpressionStatement	"func ( stream , ""%ld ; 0x%08x %c%u.%03u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 / 10000 )"	3741:6:169091:169240	317834	0	True				
ANR	319158	CallExpression	"func ( stream , ""%ld ; 0x%08x %c%u.%03u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 / 10000 )"		317834	0					
ANR	319159	Callee	func		317834	0					
ANR	319160	Identifier	func		317834	0					
ANR	319161	ArgumentList	stream		317834	1					
ANR	319162	Argument	stream		317834	0					
ANR	319163	Identifier	stream		317834	0					
ANR	319164	Argument	"""%ld ; 0x%08x %c%u.%03u"""		317834	1					
ANR	319165	PrimaryExpression	"""%ld ; 0x%08x %c%u.%03u"""		317834	0					
ANR	319166	Argument	value		317834	2					
ANR	319167	Identifier	value		317834	0					
ANR	319168	Argument	floatVal		317834	3					
ANR	319169	Identifier	floatVal		317834	0					
ANR	319170	Argument	value & 0x80 ? '-' : ' '		317834	4					
ANR	319171	ConditionalExpression	value & 0x80 ? '-' : ' '		317834	0					
ANR	319172	Condition	value & 0x80		317834	0					
ANR	319173	BitAndExpression	value & 0x80		317834	0		&			
ANR	319174	Identifier	value		317834	0					
ANR	319175	PrimaryExpression	0x80		317834	1					
ANR	319176	PrimaryExpression	'-'		317834	1					
ANR	319177	PrimaryExpression	' '		317834	2					
ANR	319178	Argument	decVal / 10000000		317834	5					
ANR	319179	MultiplicativeExpression	decVal / 10000000		317834	0		/			
ANR	319180	Identifier	decVal		317834	0					
ANR	319181	PrimaryExpression	10000000		317834	1					
ANR	319182	Argument	decVal % 10000000 / 10000		317834	6					
ANR	319183	MultiplicativeExpression	decVal % 10000000 / 10000		317834	0		%			
ANR	319184	Identifier	decVal		317834	0					
ANR	319185	MultiplicativeExpression	10000000 / 10000		317834	1		/			
ANR	319186	PrimaryExpression	10000000		317834	0					
ANR	319187	PrimaryExpression	10000		317834	1					
ANR	319188	ElseStatement	else		317834	0					
ANR	319189	CompoundStatement		376:12:8633:8633	317834	0					
ANR	319190	ExpressionStatement	"func ( stream , ""%ld ; 0x%08x %c%u.%07u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 )"	3746:6:169262:169396	317834	0	True				
ANR	319191	CallExpression	"func ( stream , ""%ld ; 0x%08x %c%u.%07u"" , value , floatVal , value & 0x80 ? '-' : ' ' , decVal / 10000000 , decVal % 10000000 )"		317834	0					
ANR	319192	Callee	func		317834	0					
ANR	319193	Identifier	func		317834	0					
ANR	319194	ArgumentList	stream		317834	1					
ANR	319195	Argument	stream		317834	0					
ANR	319196	Identifier	stream		317834	0					
ANR	319197	Argument	"""%ld ; 0x%08x %c%u.%07u"""		317834	1					
ANR	319198	PrimaryExpression	"""%ld ; 0x%08x %c%u.%07u"""		317834	0					
ANR	319199	Argument	value		317834	2					
ANR	319200	Identifier	value		317834	0					
ANR	319201	Argument	floatVal		317834	3					
ANR	319202	Identifier	floatVal		317834	0					
ANR	319203	Argument	value & 0x80 ? '-' : ' '		317834	4					
ANR	319204	ConditionalExpression	value & 0x80 ? '-' : ' '		317834	0					
ANR	319205	Condition	value & 0x80		317834	0					
ANR	319206	BitAndExpression	value & 0x80		317834	0		&			
ANR	319207	Identifier	value		317834	0					
ANR	319208	PrimaryExpression	0x80		317834	1					
ANR	319209	PrimaryExpression	'-'		317834	1					
ANR	319210	PrimaryExpression	' '		317834	2					
ANR	319211	Argument	decVal / 10000000		317834	5					
ANR	319212	MultiplicativeExpression	decVal / 10000000		317834	0		/			
ANR	319213	Identifier	decVal		317834	0					
ANR	319214	PrimaryExpression	10000000		317834	1					
ANR	319215	Argument	decVal % 10000000		317834	6					
ANR	319216	MultiplicativeExpression	decVal % 10000000		317834	0		%			
ANR	319217	Identifier	decVal		317834	0					
ANR	319218	PrimaryExpression	10000000		317834	1					
ANR	319219	BreakStatement	break ;	3750:5:169410:169415	317834	3	True				
ANR	319220	Label	case 'k' :	3752:8:169430:169438	317834	20	True				
ANR	319221	CompoundStatement		385:5:8829:8868	317834	21					
ANR	319222	IdentifierDeclStatement	int from = ( given & ( 1 << 7 ) ) ? 32 : 16 ;	3754:5:169450:169489	317834	0	True				
ANR	319223	IdentifierDecl	from = ( given & ( 1 << 7 ) ) ? 32 : 16		317834	0					
ANR	319224	IdentifierDeclType	int		317834	0					
ANR	319225	Identifier	from		317834	1					
ANR	319226	AssignmentExpression	from = ( given & ( 1 << 7 ) ) ? 32 : 16		317834	2		=			
ANR	319227	Identifier	from		317834	0					
ANR	319228	ConditionalExpression	( given & ( 1 << 7 ) ) ? 32 : 16		317834	1					
ANR	319229	Condition	given & ( 1 << 7 )		317834	0					
ANR	319230	BitAndExpression	given & ( 1 << 7 )		317834	0		&			
ANR	319231	Identifier	given		317834	0					
ANR	319232	ShiftExpression	1 << 7		317834	1		<<			
ANR	319233	PrimaryExpression	1		317834	0					
ANR	319234	PrimaryExpression	7		317834	1					
ANR	319235	PrimaryExpression	32		317834	1					
ANR	319236	PrimaryExpression	16		317834	2					
ANR	319237	ExpressionStatement	"func ( stream , ""%ld"" , from - value )"	3755:5:169496:169530	317834	1	True				
ANR	319238	CallExpression	"func ( stream , ""%ld"" , from - value )"		317834	0					
ANR	319239	Callee	func		317834	0					
ANR	319240	Identifier	func		317834	0					
ANR	319241	ArgumentList	stream		317834	1					
ANR	319242	Argument	stream		317834	0					
ANR	319243	Identifier	stream		317834	0					
ANR	319244	Argument	"""%ld"""		317834	1					
ANR	319245	PrimaryExpression	"""%ld"""		317834	0					
ANR	319246	Argument	from - value		317834	2					
ANR	319247	AdditiveExpression	from - value		317834	0		-			
ANR	319248	Identifier	from		317834	0					
ANR	319249	Identifier	value		317834	1					
ANR	319250	BreakStatement	break ;	3757:3:169540:169545	317834	22	True				
ANR	319251	Label	case 'f' :	3759:8:169556:169564	317834	23	True				
ANR	319252	IfStatement	if ( value > 7 )		317834	24					
ANR	319253	Condition	value > 7	3760:13:169579:169587	317834	0	True				
ANR	319254	RelationalExpression	value > 7		317834	0		>			
ANR	319255	Identifier	value		317834	0					
ANR	319256	PrimaryExpression	7		317834	1					
ANR	319257	CompoundStatement		391:24:8969:8969	317834	1					
ANR	319258	ExpressionStatement	"func ( stream , ""%s"" , arm_fp_const [ value & 7 ] )"	3761:10:169602:169646	317834	0	True				
ANR	319259	CallExpression	"func ( stream , ""%s"" , arm_fp_const [ value & 7 ] )"		317834	0					
ANR	319260	Callee	func		317834	0					
ANR	319261	Identifier	func		317834	0					
ANR	319262	ArgumentList	stream		317834	1					
ANR	319263	Argument	stream		317834	0					
ANR	319264	Identifier	stream		317834	0					
ANR	319265	Argument	"""%s"""		317834	1					
ANR	319266	PrimaryExpression	"""%s"""		317834	0					
ANR	319267	Argument	arm_fp_const [ value & 7 ]		317834	2					
ANR	319268	ArrayIndexing	arm_fp_const [ value & 7 ]		317834	0					
ANR	319269	Identifier	arm_fp_const		317834	0					
ANR	319270	BitAndExpression	value & 7		317834	1		&			
ANR	319271	Identifier	value		317834	0					
ANR	319272	PrimaryExpression	7		317834	1					
ANR	319273	ElseStatement	else		317834	0					
ANR	319274	CompoundStatement		393:16:9043:9043	317834	0					
ANR	319275	ExpressionStatement	"func ( stream , ""f%ld"" , value )"	3763:10:169676:169704	317834	0	True				
ANR	319276	CallExpression	"func ( stream , ""f%ld"" , value )"		317834	0					
ANR	319277	Callee	func		317834	0					
ANR	319278	Identifier	func		317834	0					
ANR	319279	ArgumentList	stream		317834	1					
ANR	319280	Argument	stream		317834	0					
ANR	319281	Identifier	stream		317834	0					
ANR	319282	Argument	"""f%ld"""		317834	1					
ANR	319283	PrimaryExpression	"""f%ld"""		317834	0					
ANR	319284	Argument	value		317834	2					
ANR	319285	Identifier	value		317834	0					
ANR	319286	BreakStatement	break ;	3765:9:169726:169731	317834	25	True				
ANR	319287	Label	case 'w' :	3767:8:169742:169750	317834	26	True				
ANR	319288	IfStatement	if ( width == 2 )		317834	27					
ANR	319289	Condition	width == 2	3768:13:169765:169774	317834	0	True				
ANR	319290	EqualityExpression	width == 2		317834	0		==			
ANR	319291	Identifier	width		317834	0					
ANR	319292	PrimaryExpression	2		317834	1					
ANR	319293	CompoundStatement		399:25:9156:9156	317834	1					
ANR	319294	ExpressionStatement	"func ( stream , ""%s"" , iwmmxt_wwnames [ value ] )"	3769:10:169789:169831	317834	0	True				
ANR	319295	CallExpression	"func ( stream , ""%s"" , iwmmxt_wwnames [ value ] )"		317834	0					
ANR	319296	Callee	func		317834	0					
ANR	319297	Identifier	func		317834	0					
ANR	319298	ArgumentList	stream		317834	1					
ANR	319299	Argument	stream		317834	0					
ANR	319300	Identifier	stream		317834	0					
ANR	319301	Argument	"""%s"""		317834	1					
ANR	319302	PrimaryExpression	"""%s"""		317834	0					
ANR	319303	Argument	iwmmxt_wwnames [ value ]		317834	2					
ANR	319304	ArrayIndexing	iwmmxt_wwnames [ value ]		317834	0					
ANR	319305	Identifier	iwmmxt_wwnames		317834	0					
ANR	319306	Identifier	value		317834	1					
ANR	319307	ElseStatement	else		317834	0					
ANR	319308	CompoundStatement		401:16:9228:9228	317834	0					
ANR	319309	ExpressionStatement	"func ( stream , ""%s"" , iwmmxt_wwssnames [ value ] )"	3771:10:169861:169905	317834	0	True				
ANR	319310	CallExpression	"func ( stream , ""%s"" , iwmmxt_wwssnames [ value ] )"		317834	0					
ANR	319311	Callee	func		317834	0					
ANR	319312	Identifier	func		317834	0					
ANR	319313	ArgumentList	stream		317834	1					
ANR	319314	Argument	stream		317834	0					
ANR	319315	Identifier	stream		317834	0					
ANR	319316	Argument	"""%s"""		317834	1					
ANR	319317	PrimaryExpression	"""%s"""		317834	0					
ANR	319318	Argument	iwmmxt_wwssnames [ value ]		317834	2					
ANR	319319	ArrayIndexing	iwmmxt_wwssnames [ value ]		317834	0					
ANR	319320	Identifier	iwmmxt_wwssnames		317834	0					
ANR	319321	Identifier	value		317834	1					
ANR	319322	BreakStatement	break ;	3773:9:169927:169932	317834	28	True				
ANR	319323	Label	case 'g' :	3775:8:169943:169951	317834	29	True				
ANR	319324	ExpressionStatement	"func ( stream , ""%s"" , iwmmxt_regnames [ value ] )"	3776:3:169956:169999	317834	30	True				
ANR	319325	CallExpression	"func ( stream , ""%s"" , iwmmxt_regnames [ value ] )"		317834	0					
ANR	319326	Callee	func		317834	0					
ANR	319327	Identifier	func		317834	0					
ANR	319328	ArgumentList	stream		317834	1					
ANR	319329	Argument	stream		317834	0					
ANR	319330	Identifier	stream		317834	0					
ANR	319331	Argument	"""%s"""		317834	1					
ANR	319332	PrimaryExpression	"""%s"""		317834	0					
ANR	319333	Argument	iwmmxt_regnames [ value ]		317834	2					
ANR	319334	ArrayIndexing	iwmmxt_regnames [ value ]		317834	0					
ANR	319335	Identifier	iwmmxt_regnames		317834	0					
ANR	319336	Identifier	value		317834	1					
ANR	319337	BreakStatement	break ;	3777:3:170004:170009	317834	31	True				
ANR	319338	Label	case 'G' :	3778:8:170019:170027	317834	32	True				
ANR	319339	ExpressionStatement	"func ( stream , ""%s"" , iwmmxt_cregnames [ value ] )"	3779:3:170032:170076	317834	33	True				
ANR	319340	CallExpression	"func ( stream , ""%s"" , iwmmxt_cregnames [ value ] )"		317834	0					
ANR	319341	Callee	func		317834	0					
ANR	319342	Identifier	func		317834	0					
ANR	319343	ArgumentList	stream		317834	1					
ANR	319344	Argument	stream		317834	0					
ANR	319345	Identifier	stream		317834	0					
ANR	319346	Argument	"""%s"""		317834	1					
ANR	319347	PrimaryExpression	"""%s"""		317834	0					
ANR	319348	Argument	iwmmxt_cregnames [ value ]		317834	2					
ANR	319349	ArrayIndexing	iwmmxt_cregnames [ value ]		317834	0					
ANR	319350	Identifier	iwmmxt_cregnames		317834	0					
ANR	319351	Identifier	value		317834	1					
ANR	319352	BreakStatement	break ;	3780:3:170081:170086	317834	34	True				
ANR	319353	Label	case 'x' :	3782:8:170097:170105	317834	35	True				
ANR	319354	ExpressionStatement	"func ( stream , ""0x%lx"" , ( value & 0xffffffffUL ) )"	3783:3:170110:170156	317834	36	True				
ANR	319355	CallExpression	"func ( stream , ""0x%lx"" , ( value & 0xffffffffUL ) )"		317834	0					
ANR	319356	Callee	func		317834	0					
ANR	319357	Identifier	func		317834	0					
ANR	319358	ArgumentList	stream		317834	1					
ANR	319359	Argument	stream		317834	0					
ANR	319360	Identifier	stream		317834	0					
ANR	319361	Argument	"""0x%lx"""		317834	1					
ANR	319362	PrimaryExpression	"""0x%lx"""		317834	0					
ANR	319363	Argument	value & 0xffffffffUL		317834	2					
ANR	319364	BitAndExpression	value & 0xffffffffUL		317834	0		&			
ANR	319365	Identifier	value		317834	0					
ANR	319366	PrimaryExpression	0xffffffffUL		317834	1					
ANR	319367	BreakStatement	break ;	3784:3:170161:170166	317834	37	True				
ANR	319368	Label	case 'c' :	3786:8:170177:170185	317834	38	True				
ANR	319369	SwitchStatement	switch ( value )		317834	39					
ANR	319370	Condition	value	3787:11:170198:170202	317834	0	True				
ANR	319371	Identifier	value		317834	0					
ANR	319372	CompoundStatement		419:5:9589:9589	317834	1					
ANR	319373	Label	case 0 :	3789:5:170217:170223	317834	0	True				
ANR	319374	ExpressionStatement	"func ( stream , ""eq"" )"	3790:7:170232:170251	317834	1	True				
ANR	319375	CallExpression	"func ( stream , ""eq"" )"		317834	0					
ANR	319376	Callee	func		317834	0					
ANR	319377	Identifier	func		317834	0					
ANR	319378	ArgumentList	stream		317834	1					
ANR	319379	Argument	stream		317834	0					
ANR	319380	Identifier	stream		317834	0					
ANR	319381	Argument	"""eq"""		317834	1					
ANR	319382	PrimaryExpression	"""eq"""		317834	0					
ANR	319383	BreakStatement	break ;	3791:7:170260:170265	317834	2	True				
ANR	319384	Label	case 1 :	3793:5:170273:170279	317834	3	True				
ANR	319385	ExpressionStatement	"func ( stream , ""vs"" )"	3794:7:170288:170307	317834	4	True				
ANR	319386	CallExpression	"func ( stream , ""vs"" )"		317834	0					
ANR	319387	Callee	func		317834	0					
ANR	319388	Identifier	func		317834	0					
ANR	319389	ArgumentList	stream		317834	1					
ANR	319390	Argument	stream		317834	0					
ANR	319391	Identifier	stream		317834	0					
ANR	319392	Argument	"""vs"""		317834	1					
ANR	319393	PrimaryExpression	"""vs"""		317834	0					
ANR	319394	BreakStatement	break ;	3795:7:170316:170321	317834	5	True				
ANR	319395	Label	case 2 :	3797:5:170329:170335	317834	6	True				
ANR	319396	ExpressionStatement	"func ( stream , ""ge"" )"	3798:7:170344:170363	317834	7	True				
ANR	319397	CallExpression	"func ( stream , ""ge"" )"		317834	0					
ANR	319398	Callee	func		317834	0					
ANR	319399	Identifier	func		317834	0					
ANR	319400	ArgumentList	stream		317834	1					
ANR	319401	Argument	stream		317834	0					
ANR	319402	Identifier	stream		317834	0					
ANR	319403	Argument	"""ge"""		317834	1					
ANR	319404	PrimaryExpression	"""ge"""		317834	0					
ANR	319405	BreakStatement	break ;	3799:7:170372:170377	317834	8	True				
ANR	319406	Label	case 3 :	3801:5:170385:170391	317834	9	True				
ANR	319407	ExpressionStatement	"func ( stream , ""gt"" )"	3802:7:170400:170419	317834	10	True				
ANR	319408	CallExpression	"func ( stream , ""gt"" )"		317834	0					
ANR	319409	Callee	func		317834	0					
ANR	319410	Identifier	func		317834	0					
ANR	319411	ArgumentList	stream		317834	1					
ANR	319412	Argument	stream		317834	0					
ANR	319413	Identifier	stream		317834	0					
ANR	319414	Argument	"""gt"""		317834	1					
ANR	319415	PrimaryExpression	"""gt"""		317834	0					
ANR	319416	BreakStatement	break ;	3803:7:170428:170433	317834	11	True				
ANR	319417	Label	default :	3805:5:170441:170448	317834	12	True				
ANR	319418	Identifier	default		317834	0					
ANR	319419	ExpressionStatement	"func ( stream , ""??"" )"	3806:7:170457:170476	317834	13	True				
ANR	319420	CallExpression	"func ( stream , ""??"" )"		317834	0					
ANR	319421	Callee	func		317834	0					
ANR	319422	Identifier	func		317834	0					
ANR	319423	ArgumentList	stream		317834	1					
ANR	319424	Argument	stream		317834	0					
ANR	319425	Identifier	stream		317834	0					
ANR	319426	Argument	"""??"""		317834	1					
ANR	319427	PrimaryExpression	"""??"""		317834	0					
ANR	319428	BreakStatement	break ;	3807:7:170485:170490	317834	14	True				
ANR	319429	BreakStatement	break ;	3809:3:170502:170507	317834	40	True				
ANR	319430	Label	case '`' :	3811:8:170518:170526	317834	41	True				
ANR	319431	ExpressionStatement	c ++	3812:3:170531:170534	317834	42	True				
ANR	319432	PostIncDecOperationExpression	c ++		317834	0					
ANR	319433	Identifier	c		317834	0					
ANR	319434	IncDec	++		317834	1					
ANR	319435	IfStatement	if ( value == 0 )		317834	43					
ANR	319436	Condition	value == 0	3813:7:170543:170552	317834	0	True				
ANR	319437	EqualityExpression	value == 0		317834	0		==			
ANR	319438	Identifier	value		317834	0					
ANR	319439	PrimaryExpression	0		317834	1					
ANR	319440	CompoundStatement		444:19:9934:9934	317834	1					
ANR	319441	ExpressionStatement	"func ( stream , ""%c"" , * c )"	3814:4:170561:170584	317834	0	True				
ANR	319442	CallExpression	"func ( stream , ""%c"" , * c )"		317834	0					
ANR	319443	Callee	func		317834	0					
ANR	319444	Identifier	func		317834	0					
ANR	319445	ArgumentList	stream		317834	1					
ANR	319446	Argument	stream		317834	0					
ANR	319447	Identifier	stream		317834	0					
ANR	319448	Argument	"""%c"""		317834	1					
ANR	319449	PrimaryExpression	"""%c"""		317834	0					
ANR	319450	Argument	* c		317834	2					
ANR	319451	UnaryOperationExpression	* c		317834	0					
ANR	319452	UnaryOperator	*		317834	0					
ANR	319453	Identifier	c		317834	1					
ANR	319454	BreakStatement	break ;	3816:3:170594:170599	317834	44	True				
ANR	319455	Label	case '\\'' :	3817:8:170609:170618	317834	45	True				
ANR	319456	ExpressionStatement	c ++	3818:3:170623:170626	317834	46	True				
ANR	319457	PostIncDecOperationExpression	c ++		317834	0					
ANR	319458	Identifier	c		317834	0					
ANR	319459	IncDec	++		317834	1					
ANR	319460	IfStatement	if ( value == ( ( 1ul << width ) - 1 ) )		317834	47					
ANR	319461	Condition	value == ( ( 1ul << width ) - 1 )	3819:7:170635:170663	317834	0	True				
ANR	319462	EqualityExpression	value == ( ( 1ul << width ) - 1 )		317834	0		==			
ANR	319463	Identifier	value		317834	0					
ANR	319464	AdditiveExpression	( 1ul << width ) - 1		317834	1		-			
ANR	319465	ShiftExpression	1ul << width		317834	0		<<			
ANR	319466	PrimaryExpression	1ul		317834	0					
ANR	319467	Identifier	width		317834	1					
ANR	319468	PrimaryExpression	1		317834	1					
ANR	319469	CompoundStatement		450:38:10045:10045	317834	1					
ANR	319470	ExpressionStatement	"func ( stream , ""%c"" , * c )"	3820:4:170672:170695	317834	0	True				
ANR	319471	CallExpression	"func ( stream , ""%c"" , * c )"		317834	0					
ANR	319472	Callee	func		317834	0					
ANR	319473	Identifier	func		317834	0					
ANR	319474	ArgumentList	stream		317834	1					
ANR	319475	Argument	stream		317834	0					
ANR	319476	Identifier	stream		317834	0					
ANR	319477	Argument	"""%c"""		317834	1					
ANR	319478	PrimaryExpression	"""%c"""		317834	0					
ANR	319479	Argument	* c		317834	2					
ANR	319480	UnaryOperationExpression	* c		317834	0					
ANR	319481	UnaryOperator	*		317834	0					
ANR	319482	Identifier	c		317834	1					
ANR	319483	BreakStatement	break ;	3822:3:170705:170710	317834	48	True				
ANR	319484	Label	case '?' :	3823:8:170720:170728	317834	49	True				
ANR	319485	ExpressionStatement	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"	3824:3:170733:170783	317834	50	True				
ANR	319486	CallExpression	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"		317834	0					
ANR	319487	Callee	func		317834	0					
ANR	319488	Identifier	func		317834	0					
ANR	319489	ArgumentList	stream		317834	1					
ANR	319490	Argument	stream		317834	0					
ANR	319491	Identifier	stream		317834	0					
ANR	319492	Argument	"""%c"""		317834	1					
ANR	319493	PrimaryExpression	"""%c"""		317834	0					
ANR	319494	Argument	c [ ( 1 << width ) - ( int ) value ]		317834	2					
ANR	319495	ArrayIndexing	c [ ( 1 << width ) - ( int ) value ]		317834	0					
ANR	319496	Identifier	c		317834	0					
ANR	319497	AdditiveExpression	( 1 << width ) - ( int ) value		317834	1		-			
ANR	319498	ShiftExpression	1 << width		317834	0		<<			
ANR	319499	PrimaryExpression	1		317834	0					
ANR	319500	Identifier	width		317834	1					
ANR	319501	CastExpression	( int ) value		317834	1					
ANR	319502	CastTarget	int		317834	0					
ANR	319503	Identifier	value		317834	1					
ANR	319504	ExpressionStatement	c += 1 << width	3825:3:170788:170803	317834	51	True				
ANR	319505	AssignmentExpression	c += 1 << width		317834	0		+=			
ANR	319506	Identifier	c		317834	0					
ANR	319507	ShiftExpression	1 << width		317834	1		<<			
ANR	319508	PrimaryExpression	1		317834	0					
ANR	319509	Identifier	width		317834	1					
ANR	319510	BreakStatement	break ;	3826:3:170808:170813	317834	52	True				
ANR	319511	Label	default :	3827:8:170823:170830	317834	53	True				
ANR	319512	Identifier	default		317834	0					
ANR	319513	ReturnStatement	return 0 ;	3828:3:170835:170843	317834	54	True				
ANR	319514	PrimaryExpression	0		317834	0					
ANR	319515	BreakStatement	break ;	3830:6:170861:170866	317834	3	True				
ANR	319516	Label	case 'y' :	3832:4:170873:170881	317834	4	True				
ANR	319517	Label	case 'z' :	3833:4:170887:170895	317834	5	True				
ANR	319518	CompoundStatement		467:8:10326:10335	317834	6					
ANR	319519	IdentifierDeclStatement	int single = * c ++ == 'y' ;	3835:8:170913:170937	317834	0	True				
ANR	319520	IdentifierDecl	single = * c ++ == 'y'		317834	0					
ANR	319521	IdentifierDeclType	int		317834	0					
ANR	319522	Identifier	single		317834	1					
ANR	319523	AssignmentExpression	single = * c ++ == 'y'		317834	2		=			
ANR	319524	Identifier	single		317834	0					
ANR	319525	EqualityExpression	* c ++ == 'y'		317834	1		==			
ANR	319526	UnaryOperationExpression	* c ++		317834	0					
ANR	319527	UnaryOperator	*		317834	0					
ANR	319528	PostIncDecOperationExpression	c ++		317834	1					
ANR	319529	Identifier	c		317834	0					
ANR	319530	IncDec	++		317834	1					
ANR	319531	PrimaryExpression	'y'		317834	1					
ANR	319532	IdentifierDeclStatement	int regno ;	3836:8:170947:170956	317834	1	True				
ANR	319533	IdentifierDecl	regno		317834	0					
ANR	319534	IdentifierDeclType	int		317834	0					
ANR	319535	Identifier	regno		317834	1					
ANR	319536	SwitchStatement	switch ( * c )		317834	2					
ANR	319537	Condition	* c	3838:16:170975:170976	317834	0	True				
ANR	319538	UnaryOperationExpression	* c		317834	0					
ANR	319539	UnaryOperator	*		317834	0					
ANR	319540	Identifier	c		317834	1					
ANR	319541	CompoundStatement		470:3:10361:10361	317834	1					
ANR	319542	Label	case '4' :	3840:3:170987:170995	317834	0	True				
ANR	319543	Label	case '0' :	3841:3:171014:171022	317834	1	True				
ANR	319544	ExpressionStatement	regno = given & 0x0000000f	3842:5:171042:171068	317834	2	True				
ANR	319545	AssignmentExpression	regno = given & 0x0000000f		317834	0		=			
ANR	319546	Identifier	regno		317834	0					
ANR	319547	BitAndExpression	given & 0x0000000f		317834	1		&			
ANR	319548	Identifier	given		317834	0					
ANR	319549	PrimaryExpression	0x0000000f		317834	1					
ANR	319550	IfStatement	if ( single )		317834	3					
ANR	319551	Condition	single	3843:9:171079:171084	317834	0	True				
ANR	319552	Identifier	single		317834	0					
ANR	319553	CompoundStatement		475:7:10473:10473	317834	1					
ANR	319554	ExpressionStatement	regno <<= 1	3845:9:171105:171116	317834	0	True				
ANR	319555	AssignmentExpression	regno <<= 1		317834	0		<<=			
ANR	319556	Identifier	regno		317834	0					
ANR	319557	PrimaryExpression	1		317834	1					
ANR	319558	ExpressionStatement	regno += ( given >> 5 ) & 1	3846:9:171127:171152	317834	1	True				
ANR	319559	AssignmentExpression	regno += ( given >> 5 ) & 1		317834	0		+=			
ANR	319560	Identifier	regno		317834	0					
ANR	319561	BitAndExpression	( given >> 5 ) & 1		317834	1		&			
ANR	319562	ShiftExpression	given >> 5		317834	0		>>			
ANR	319563	Identifier	given		317834	0					
ANR	319564	PrimaryExpression	5		317834	1					
ANR	319565	PrimaryExpression	1		317834	1					
ANR	319566	ElseStatement	else		317834	0					
ANR	319567	CompoundStatement		478:12:10545:10545	317834	0					
ANR	319568	ExpressionStatement	regno += ( ( given >> 5 ) & 1 ) << 4	3848:6:171174:171206	317834	0	True				
ANR	319569	AssignmentExpression	regno += ( ( given >> 5 ) & 1 ) << 4		317834	0		+=			
ANR	319570	Identifier	regno		317834	0					
ANR	319571	ShiftExpression	( ( given >> 5 ) & 1 ) << 4		317834	1		<<			
ANR	319572	BitAndExpression	( given >> 5 ) & 1		317834	0		&			
ANR	319573	ShiftExpression	given >> 5		317834	0		>>			
ANR	319574	Identifier	given		317834	0					
ANR	319575	PrimaryExpression	5		317834	1					
ANR	319576	PrimaryExpression	1		317834	1					
ANR	319577	PrimaryExpression	4		317834	1					
ANR	319578	BreakStatement	break ;	3850:5:171220:171225	317834	4	True				
ANR	319579	Label	case '1' :	3852:3:171231:171239	317834	5	True				
ANR	319580	ExpressionStatement	regno = ( given >> 12 ) & 0x0000000f	3853:5:171259:171293	317834	6	True				
ANR	319581	AssignmentExpression	regno = ( given >> 12 ) & 0x0000000f		317834	0		=			
ANR	319582	Identifier	regno		317834	0					
ANR	319583	BitAndExpression	( given >> 12 ) & 0x0000000f		317834	1		&			
ANR	319584	ShiftExpression	given >> 12		317834	0		>>			
ANR	319585	Identifier	given		317834	0					
ANR	319586	PrimaryExpression	12		317834	1					
ANR	319587	PrimaryExpression	0x0000000f		317834	1					
ANR	319588	IfStatement	if ( single )		317834	7					
ANR	319589	Condition	single	3854:9:171304:171309	317834	0	True				
ANR	319590	Identifier	single		317834	0					
ANR	319591	CompoundStatement		486:7:10698:10698	317834	1					
ANR	319592	ExpressionStatement	regno <<= 1	3856:9:171330:171341	317834	0	True				
ANR	319593	AssignmentExpression	regno <<= 1		317834	0		<<=			
ANR	319594	Identifier	regno		317834	0					
ANR	319595	PrimaryExpression	1		317834	1					
ANR	319596	ExpressionStatement	regno += ( given >> 22 ) & 1	3857:9:171352:171378	317834	1	True				
ANR	319597	AssignmentExpression	regno += ( given >> 22 ) & 1		317834	0		+=			
ANR	319598	Identifier	regno		317834	0					
ANR	319599	BitAndExpression	( given >> 22 ) & 1		317834	1		&			
ANR	319600	ShiftExpression	given >> 22		317834	0		>>			
ANR	319601	Identifier	given		317834	0					
ANR	319602	PrimaryExpression	22		317834	1					
ANR	319603	PrimaryExpression	1		317834	1					
ANR	319604	ElseStatement	else		317834	0					
ANR	319605	CompoundStatement		489:12:10771:10771	317834	0					
ANR	319606	ExpressionStatement	regno += ( ( given >> 22 ) & 1 ) << 4	3859:6:171400:171433	317834	0	True				
ANR	319607	AssignmentExpression	regno += ( ( given >> 22 ) & 1 ) << 4		317834	0		+=			
ANR	319608	Identifier	regno		317834	0					
ANR	319609	ShiftExpression	( ( given >> 22 ) & 1 ) << 4		317834	1		<<			
ANR	319610	BitAndExpression	( given >> 22 ) & 1		317834	0		&			
ANR	319611	ShiftExpression	given >> 22		317834	0		>>			
ANR	319612	Identifier	given		317834	0					
ANR	319613	PrimaryExpression	22		317834	1					
ANR	319614	PrimaryExpression	1		317834	1					
ANR	319615	PrimaryExpression	4		317834	1					
ANR	319616	BreakStatement	break ;	3861:5:171447:171452	317834	8	True				
ANR	319617	Label	case '2' :	3863:3:171458:171466	317834	9	True				
ANR	319618	ExpressionStatement	regno = ( given >> 16 ) & 0x0000000f	3864:5:171486:171520	317834	10	True				
ANR	319619	AssignmentExpression	regno = ( given >> 16 ) & 0x0000000f		317834	0		=			
ANR	319620	Identifier	regno		317834	0					
ANR	319621	BitAndExpression	( given >> 16 ) & 0x0000000f		317834	1		&			
ANR	319622	ShiftExpression	given >> 16		317834	0		>>			
ANR	319623	Identifier	given		317834	0					
ANR	319624	PrimaryExpression	16		317834	1					
ANR	319625	PrimaryExpression	0x0000000f		317834	1					
ANR	319626	IfStatement	if ( single )		317834	11					
ANR	319627	Condition	single	3865:9:171531:171536	317834	0	True				
ANR	319628	Identifier	single		317834	0					
ANR	319629	CompoundStatement		497:7:10925:10925	317834	1					
ANR	319630	ExpressionStatement	regno <<= 1	3867:9:171557:171568	317834	0	True				
ANR	319631	AssignmentExpression	regno <<= 1		317834	0		<<=			
ANR	319632	Identifier	regno		317834	0					
ANR	319633	PrimaryExpression	1		317834	1					
ANR	319634	ExpressionStatement	regno += ( given >> 7 ) & 1	3868:9:171579:171604	317834	1	True				
ANR	319635	AssignmentExpression	regno += ( given >> 7 ) & 1		317834	0		+=			
ANR	319636	Identifier	regno		317834	0					
ANR	319637	BitAndExpression	( given >> 7 ) & 1		317834	1		&			
ANR	319638	ShiftExpression	given >> 7		317834	0		>>			
ANR	319639	Identifier	given		317834	0					
ANR	319640	PrimaryExpression	7		317834	1					
ANR	319641	PrimaryExpression	1		317834	1					
ANR	319642	ElseStatement	else		317834	0					
ANR	319643	CompoundStatement		500:12:10997:10997	317834	0					
ANR	319644	ExpressionStatement	regno += ( ( given >> 7 ) & 1 ) << 4	3870:6:171626:171658	317834	0	True				
ANR	319645	AssignmentExpression	regno += ( ( given >> 7 ) & 1 ) << 4		317834	0		+=			
ANR	319646	Identifier	regno		317834	0					
ANR	319647	ShiftExpression	( ( given >> 7 ) & 1 ) << 4		317834	1		<<			
ANR	319648	BitAndExpression	( given >> 7 ) & 1		317834	0		&			
ANR	319649	ShiftExpression	given >> 7		317834	0		>>			
ANR	319650	Identifier	given		317834	0					
ANR	319651	PrimaryExpression	7		317834	1					
ANR	319652	PrimaryExpression	1		317834	1					
ANR	319653	PrimaryExpression	4		317834	1					
ANR	319654	BreakStatement	break ;	3872:5:171672:171677	317834	12	True				
ANR	319655	Label	case '3' :	3874:3:171683:171691	317834	13	True				
ANR	319656	ExpressionStatement	"func ( stream , ""{"" )"	3875:5:171709:171727	317834	14	True				
ANR	319657	CallExpression	"func ( stream , ""{"" )"		317834	0					
ANR	319658	Callee	func		317834	0					
ANR	319659	Identifier	func		317834	0					
ANR	319660	ArgumentList	stream		317834	1					
ANR	319661	Argument	stream		317834	0					
ANR	319662	Identifier	stream		317834	0					
ANR	319663	Argument	"""{"""		317834	1					
ANR	319664	PrimaryExpression	"""{"""		317834	0					
ANR	319665	ExpressionStatement	regno = ( given >> 12 ) & 0x0000000f	3876:5:171734:171768	317834	15	True				
ANR	319666	AssignmentExpression	regno = ( given >> 12 ) & 0x0000000f		317834	0		=			
ANR	319667	Identifier	regno		317834	0					
ANR	319668	BitAndExpression	( given >> 12 ) & 0x0000000f		317834	1		&			
ANR	319669	ShiftExpression	given >> 12		317834	0		>>			
ANR	319670	Identifier	given		317834	0					
ANR	319671	PrimaryExpression	12		317834	1					
ANR	319672	PrimaryExpression	0x0000000f		317834	1					
ANR	319673	IfStatement	if ( single )		317834	16					
ANR	319674	Condition	single	3877:9:171779:171784	317834	0	True				
ANR	319675	Identifier	single		317834	0					
ANR	319676	CompoundStatement		509:7:11173:11173	317834	1					
ANR	319677	ExpressionStatement	regno <<= 1	3879:9:171805:171816	317834	0	True				
ANR	319678	AssignmentExpression	regno <<= 1		317834	0		<<=			
ANR	319679	Identifier	regno		317834	0					
ANR	319680	PrimaryExpression	1		317834	1					
ANR	319681	ExpressionStatement	regno += ( given >> 22 ) & 1	3880:9:171827:171853	317834	1	True				
ANR	319682	AssignmentExpression	regno += ( given >> 22 ) & 1		317834	0		+=			
ANR	319683	Identifier	regno		317834	0					
ANR	319684	BitAndExpression	( given >> 22 ) & 1		317834	1		&			
ANR	319685	ShiftExpression	given >> 22		317834	0		>>			
ANR	319686	Identifier	given		317834	0					
ANR	319687	PrimaryExpression	22		317834	1					
ANR	319688	PrimaryExpression	1		317834	1					
ANR	319689	ElseStatement	else		317834	0					
ANR	319690	CompoundStatement		512:12:11246:11246	317834	0					
ANR	319691	ExpressionStatement	regno += ( ( given >> 22 ) & 1 ) << 4	3882:6:171875:171908	317834	0	True				
ANR	319692	AssignmentExpression	regno += ( ( given >> 22 ) & 1 ) << 4		317834	0		+=			
ANR	319693	Identifier	regno		317834	0					
ANR	319694	ShiftExpression	( ( given >> 22 ) & 1 ) << 4		317834	1		<<			
ANR	319695	BitAndExpression	( given >> 22 ) & 1		317834	0		&			
ANR	319696	ShiftExpression	given >> 22		317834	0		>>			
ANR	319697	Identifier	given		317834	0					
ANR	319698	PrimaryExpression	22		317834	1					
ANR	319699	PrimaryExpression	1		317834	1					
ANR	319700	PrimaryExpression	4		317834	1					
ANR	319701	BreakStatement	break ;	3884:5:171922:171927	317834	17	True				
ANR	319702	Label	default :	3886:3:171933:171940	317834	18	True				
ANR	319703	Identifier	default		317834	0					
ANR	319704	ReturnStatement	return 0 ;	3887:5:171947:171955	317834	19	True				
ANR	319705	PrimaryExpression	0		317834	0					
ANR	319706	ExpressionStatement	"func ( stream , ""%c%d"" , single ? 's' : 'd' , regno )"	3890:8:171971:172019	317834	3	True				
ANR	319707	CallExpression	"func ( stream , ""%c%d"" , single ? 's' : 'd' , regno )"		317834	0					
ANR	319708	Callee	func		317834	0					
ANR	319709	Identifier	func		317834	0					
ANR	319710	ArgumentList	stream		317834	1					
ANR	319711	Argument	stream		317834	0					
ANR	319712	Identifier	stream		317834	0					
ANR	319713	Argument	"""%c%d"""		317834	1					
ANR	319714	PrimaryExpression	"""%c%d"""		317834	0					
ANR	319715	Argument	single ? 's' : 'd'		317834	2					
ANR	319716	ConditionalExpression	single ? 's' : 'd'		317834	0					
ANR	319717	Condition	single		317834	0					
ANR	319718	Identifier	single		317834	0					
ANR	319719	PrimaryExpression	's'		317834	1					
ANR	319720	PrimaryExpression	'd'		317834	2					
ANR	319721	Argument	regno		317834	3					
ANR	319722	Identifier	regno		317834	0					
ANR	319723	IfStatement	if ( * c == '3' )		317834	4					
ANR	319724	Condition	* c == '3'	3892:12:172034:172042	317834	0	True				
ANR	319725	EqualityExpression	* c == '3'		317834	0		==			
ANR	319726	UnaryOperationExpression	* c		317834	0					
ANR	319727	UnaryOperator	*		317834	0					
ANR	319728	Identifier	c		317834	1					
ANR	319729	PrimaryExpression	'3'		317834	1					
ANR	319730	CompoundStatement		525:5:11434:11458	317834	1					
ANR	319731	IdentifierDeclStatement	int count = given & 0xff ;	3894:5:172055:172079	317834	0	True				
ANR	319732	IdentifierDecl	count = given & 0xff		317834	0					
ANR	319733	IdentifierDeclType	int		317834	0					
ANR	319734	Identifier	count		317834	1					
ANR	319735	AssignmentExpression	count = given & 0xff		317834	2		=			
ANR	319736	Identifier	count		317834	0					
ANR	319737	BitAndExpression	given & 0xff		317834	1		&			
ANR	319738	Identifier	given		317834	0					
ANR	319739	PrimaryExpression	0xff		317834	1					
ANR	319740	IfStatement	if ( single == 0 )		317834	1					
ANR	319741	Condition	single == 0	3896:9:172091:172101	317834	0	True				
ANR	319742	EqualityExpression	single == 0		317834	0		==			
ANR	319743	Identifier	single		317834	0					
ANR	319744	PrimaryExpression	0		317834	1					
ANR	319745	CompoundStatement		527:22:11483:11483	317834	1					
ANR	319746	ExpressionStatement	count >>= 1	3897:6:172112:172123	317834	0	True				
ANR	319747	AssignmentExpression	count >>= 1		317834	0		>>=			
ANR	319748	Identifier	count		317834	0					
ANR	319749	PrimaryExpression	1		317834	1					
ANR	319750	IfStatement	if ( -- count )		317834	2					
ANR	319751	Condition	-- count	3900:9:172142:172148	317834	0	True				
ANR	319752	UnaryExpression	-- count		317834	0					
ANR	319753	IncDec	--		317834	0					
ANR	319754	Identifier	count		317834	1					
ANR	319755	CompoundStatement		532:7:11537:11537	317834	1					
ANR	319756	ExpressionStatement	"func ( stream , ""-%c%d"" , single ? 's' : 'd' , regno + count )"	3902:9:172169:172242	317834	0	True				
ANR	319757	CallExpression	"func ( stream , ""-%c%d"" , single ? 's' : 'd' , regno + count )"		317834	0					
ANR	319758	Callee	func		317834	0					
ANR	319759	Identifier	func		317834	0					
ANR	319760	ArgumentList	stream		317834	1					
ANR	319761	Argument	stream		317834	0					
ANR	319762	Identifier	stream		317834	0					
ANR	319763	Argument	"""-%c%d"""		317834	1					
ANR	319764	PrimaryExpression	"""-%c%d"""		317834	0					
ANR	319765	Argument	single ? 's' : 'd'		317834	2					
ANR	319766	ConditionalExpression	single ? 's' : 'd'		317834	0					
ANR	319767	Condition	single		317834	0					
ANR	319768	Identifier	single		317834	0					
ANR	319769	PrimaryExpression	's'		317834	1					
ANR	319770	PrimaryExpression	'd'		317834	2					
ANR	319771	Argument	regno + count		317834	3					
ANR	319772	AdditiveExpression	regno + count		317834	0		+			
ANR	319773	Identifier	regno		317834	0					
ANR	319774	Identifier	count		317834	1					
ANR	319775	ExpressionStatement	"func ( stream , ""}"" )"	3907:5:172259:172277	317834	3	True				
ANR	319776	CallExpression	"func ( stream , ""}"" )"		317834	0					
ANR	319777	Callee	func		317834	0					
ANR	319778	Identifier	func		317834	0					
ANR	319779	ArgumentList	stream		317834	1					
ANR	319780	Argument	stream		317834	0					
ANR	319781	Identifier	stream		317834	0					
ANR	319782	Argument	"""}"""		317834	1					
ANR	319783	PrimaryExpression	"""}"""		317834	0					
ANR	319784	ElseStatement	else		317834	0					
ANR	319785	IfStatement	if ( * c == '4' )		317834	0					
ANR	319786	Condition	* c == '4'	3908:19:172298:172306	317834	0	True				
ANR	319787	EqualityExpression	* c == '4'		317834	0		==			
ANR	319788	UnaryOperationExpression	* c		317834	0					
ANR	319789	UnaryOperator	*		317834	0					
ANR	319790	Identifier	c		317834	1					
ANR	319791	PrimaryExpression	'4'		317834	1					
ANR	319792	CompoundStatement		539:30:11688:11688	317834	1					
ANR	319793	ExpressionStatement	"func ( stream , "", %c%d"" , single ? 's' : 'd' , regno + 1 )"	3909:9:172320:172384	317834	0	True				
ANR	319794	CallExpression	"func ( stream , "", %c%d"" , single ? 's' : 'd' , regno + 1 )"		317834	0					
ANR	319795	Callee	func		317834	0					
ANR	319796	Identifier	func		317834	0					
ANR	319797	ArgumentList	stream		317834	1					
ANR	319798	Argument	stream		317834	0					
ANR	319799	Identifier	stream		317834	0					
ANR	319800	Argument	""", %c%d"""		317834	1					
ANR	319801	PrimaryExpression	""", %c%d"""		317834	0					
ANR	319802	Argument	single ? 's' : 'd'		317834	2					
ANR	319803	ConditionalExpression	single ? 's' : 'd'		317834	0					
ANR	319804	Condition	single		317834	0					
ANR	319805	Identifier	single		317834	0					
ANR	319806	PrimaryExpression	's'		317834	1					
ANR	319807	PrimaryExpression	'd'		317834	2					
ANR	319808	Argument	regno + 1		317834	3					
ANR	319809	AdditiveExpression	regno + 1		317834	0		+			
ANR	319810	Identifier	regno		317834	0					
ANR	319811	PrimaryExpression	1		317834	1					
ANR	319812	BreakStatement	break ;	3913:6:172410:172415	317834	7	True				
ANR	319813	Label	case 'L' :	3915:4:172422:172430	317834	8	True				
ANR	319814	SwitchStatement	switch ( given & 0x00400100 )		317834	9					
ANR	319815	Condition	given & 0x00400100	3916:14:172446:172463	317834	0	True				
ANR	319816	BitAndExpression	given & 0x00400100		317834	0		&			
ANR	319817	Identifier	given		317834	0					
ANR	319818	PrimaryExpression	0x00400100		317834	1					
ANR	319819	CompoundStatement		548:8:11853:11853	317834	1					
ANR	319820	Label	case 0x00000000 :	3918:8:172484:172499	317834	0	True				
ANR	319821	ExpressionStatement	"func ( stream , ""b"" )"	3918:25:172501:172519	317834	1	True				
ANR	319822	CallExpression	"func ( stream , ""b"" )"		317834	0					
ANR	319823	Callee	func		317834	0					
ANR	319824	Identifier	func		317834	0					
ANR	319825	ArgumentList	stream		317834	1					
ANR	319826	Argument	stream		317834	0					
ANR	319827	Identifier	stream		317834	0					
ANR	319828	Argument	"""b"""		317834	1					
ANR	319829	PrimaryExpression	"""b"""		317834	0					
ANR	319830	BreakStatement	break ;	3918:45:172521:172526	317834	2	True				
ANR	319831	Label	case 0x00400000 :	3919:8:172536:172551	317834	3	True				
ANR	319832	ExpressionStatement	"func ( stream , ""h"" )"	3919:25:172553:172571	317834	4	True				
ANR	319833	CallExpression	"func ( stream , ""h"" )"		317834	0					
ANR	319834	Callee	func		317834	0					
ANR	319835	Identifier	func		317834	0					
ANR	319836	ArgumentList	stream		317834	1					
ANR	319837	Argument	stream		317834	0					
ANR	319838	Identifier	stream		317834	0					
ANR	319839	Argument	"""h"""		317834	1					
ANR	319840	PrimaryExpression	"""h"""		317834	0					
ANR	319841	BreakStatement	break ;	3919:45:172573:172578	317834	5	True				
ANR	319842	Label	case 0x00000100 :	3920:8:172588:172603	317834	6	True				
ANR	319843	ExpressionStatement	"func ( stream , ""w"" )"	3920:25:172605:172623	317834	7	True				
ANR	319844	CallExpression	"func ( stream , ""w"" )"		317834	0					
ANR	319845	Callee	func		317834	0					
ANR	319846	Identifier	func		317834	0					
ANR	319847	ArgumentList	stream		317834	1					
ANR	319848	Argument	stream		317834	0					
ANR	319849	Identifier	stream		317834	0					
ANR	319850	Argument	"""w"""		317834	1					
ANR	319851	PrimaryExpression	"""w"""		317834	0					
ANR	319852	BreakStatement	break ;	3920:45:172625:172630	317834	8	True				
ANR	319853	Label	case 0x00400100 :	3921:8:172640:172655	317834	9	True				
ANR	319854	ExpressionStatement	"func ( stream , ""d"" )"	3921:25:172657:172675	317834	10	True				
ANR	319855	CallExpression	"func ( stream , ""d"" )"		317834	0					
ANR	319856	Callee	func		317834	0					
ANR	319857	Identifier	func		317834	0					
ANR	319858	ArgumentList	stream		317834	1					
ANR	319859	Argument	stream		317834	0					
ANR	319860	Identifier	stream		317834	0					
ANR	319861	Argument	"""d"""		317834	1					
ANR	319862	PrimaryExpression	"""d"""		317834	0					
ANR	319863	BreakStatement	break ;	3921:45:172677:172682	317834	11	True				
ANR	319864	Label	default :	3922:8:172692:172699	317834	12	True				
ANR	319865	Identifier	default		317834	0					
ANR	319866	BreakStatement	break ;	3923:3:172704:172709	317834	13	True				
ANR	319867	BreakStatement	break ;	3925:6:172727:172732	317834	10	True				
ANR	319868	Label	case 'Z' :	3927:4:172739:172747	317834	11	True				
ANR	319869	CompoundStatement		559:6:12134:12134	317834	12					
ANR	319870	ExpressionStatement	value = ( ( given >> 16 ) & 0xf0 ) | ( given & 0xf )	3930:8:172809:172855	317834	0	True				
ANR	319871	AssignmentExpression	value = ( ( given >> 16 ) & 0xf0 ) | ( given & 0xf )		317834	0		=			
ANR	319872	Identifier	value		317834	0					
ANR	319873	InclusiveOrExpression	( ( given >> 16 ) & 0xf0 ) | ( given & 0xf )		317834	1		|			
ANR	319874	BitAndExpression	( given >> 16 ) & 0xf0		317834	0		&			
ANR	319875	ShiftExpression	given >> 16		317834	0		>>			
ANR	319876	Identifier	given		317834	0					
ANR	319877	PrimaryExpression	16		317834	1					
ANR	319878	PrimaryExpression	0xf0		317834	1					
ANR	319879	BitAndExpression	given & 0xf		317834	1		&			
ANR	319880	Identifier	given		317834	0					
ANR	319881	PrimaryExpression	0xf		317834	1					
ANR	319882	ExpressionStatement	"func ( stream , ""%d"" , ( int ) value )"	3931:8:172865:172897	317834	1	True				
ANR	319883	CallExpression	"func ( stream , ""%d"" , ( int ) value )"		317834	0					
ANR	319884	Callee	func		317834	0					
ANR	319885	Identifier	func		317834	0					
ANR	319886	ArgumentList	stream		317834	1					
ANR	319887	Argument	stream		317834	0					
ANR	319888	Identifier	stream		317834	0					
ANR	319889	Argument	"""%d"""		317834	1					
ANR	319890	PrimaryExpression	"""%d"""		317834	0					
ANR	319891	Argument	( int ) value		317834	2					
ANR	319892	CastExpression	( int ) value		317834	0					
ANR	319893	CastTarget	int		317834	0					
ANR	319894	Identifier	value		317834	1					
ANR	319895	BreakStatement	break ;	3933:6:172913:172918	317834	13	True				
ANR	319896	Label	case 'l' :	3935:4:172925:172933	317834	14	True				
ANR	319897	CompoundStatement		572:8:12516:12561	317834	15					
ANR	319898	IdentifierDeclStatement	int offset = given & 0xff ;	3940:8:173102:173127	317834	0	True				
ANR	319899	IdentifierDecl	offset = given & 0xff		317834	0					
ANR	319900	IdentifierDeclType	int		317834	0					
ANR	319901	Identifier	offset		317834	1					
ANR	319902	AssignmentExpression	offset = given & 0xff		317834	2		=			
ANR	319903	Identifier	offset		317834	0					
ANR	319904	BitAndExpression	given & 0xff		317834	1		&			
ANR	319905	Identifier	given		317834	0					
ANR	319906	PrimaryExpression	0xff		317834	1					
ANR	319907	IdentifierDeclStatement	int multiplier = ( given & 0x00000100 ) ? 4 : 1 ;	3941:8:173137:173182	317834	1	True				
ANR	319908	IdentifierDecl	multiplier = ( given & 0x00000100 ) ? 4 : 1		317834	0					
ANR	319909	IdentifierDeclType	int		317834	0					
ANR	319910	Identifier	multiplier		317834	1					
ANR	319911	AssignmentExpression	multiplier = ( given & 0x00000100 ) ? 4 : 1		317834	2		=			
ANR	319912	Identifier	multiplier		317834	0					
ANR	319913	ConditionalExpression	( given & 0x00000100 ) ? 4 : 1		317834	1					
ANR	319914	Condition	given & 0x00000100		317834	0					
ANR	319915	BitAndExpression	given & 0x00000100		317834	0		&			
ANR	319916	Identifier	given		317834	0					
ANR	319917	PrimaryExpression	0x00000100		317834	1					
ANR	319918	PrimaryExpression	4		317834	1					
ANR	319919	PrimaryExpression	1		317834	2					
ANR	319920	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"	3943:8:173193:173249	317834	2	True				
ANR	319921	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"		317834	0					
ANR	319922	Callee	func		317834	0					
ANR	319923	Identifier	func		317834	0					
ANR	319924	ArgumentList	stream		317834	1					
ANR	319925	Argument	stream		317834	0					
ANR	319926	Identifier	stream		317834	0					
ANR	319927	Argument	"""[%s"""		317834	1					
ANR	319928	PrimaryExpression	"""[%s"""		317834	0					
ANR	319929	Argument	arm_regnames [ ( given >> 16 ) & 0xf ]		317834	2					
ANR	319930	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		317834	0					
ANR	319931	Identifier	arm_regnames		317834	0					
ANR	319932	BitAndExpression	( given >> 16 ) & 0xf		317834	1		&			
ANR	319933	ShiftExpression	given >> 16		317834	0		>>			
ANR	319934	Identifier	given		317834	0					
ANR	319935	PrimaryExpression	16		317834	1					
ANR	319936	PrimaryExpression	0xf		317834	1					
ANR	319937	IfStatement	if ( multiplier > 1 )		317834	3					
ANR	319938	Condition	multiplier > 1	3946:12:173270:173283	317834	0	True				
ANR	319939	RelationalExpression	multiplier > 1		317834	0		>			
ANR	319940	Identifier	multiplier		317834	0					
ANR	319941	PrimaryExpression	1		317834	1					
ANR	319942	CompoundStatement		578:3:12668:12668	317834	1					
ANR	319943	ExpressionStatement	value_in_comment = offset * multiplier	3948:5:173296:173334	317834	0	True				
ANR	319944	AssignmentExpression	value_in_comment = offset * multiplier		317834	0		=			
ANR	319945	Identifier	value_in_comment		317834	0					
ANR	319946	MultiplicativeExpression	offset * multiplier		317834	1		*			
ANR	319947	Identifier	offset		317834	0					
ANR	319948	Identifier	multiplier		317834	1					
ANR	319949	IfStatement	if ( NEGATIVE_BIT_SET )		317834	1					
ANR	319950	Condition	NEGATIVE_BIT_SET	3949:9:173345:173360	317834	0	True				
ANR	319951	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	319952	ExpressionStatement	value_in_comment = - value_in_comment	3950:7:173370:173406	317834	1	True				
ANR	319953	AssignmentExpression	value_in_comment = - value_in_comment		317834	0		=			
ANR	319954	Identifier	value_in_comment		317834	0					
ANR	319955	UnaryOperationExpression	- value_in_comment		317834	1					
ANR	319956	UnaryOperator	-		317834	0					
ANR	319957	Identifier	value_in_comment		317834	1					
ANR	319958	IfStatement	if ( offset )		317834	4					
ANR	319959	Condition	offset	3954:12:173433:173438	317834	0	True				
ANR	319960	Identifier	offset		317834	0					
ANR	319961	CompoundStatement		586:3:12823:12823	317834	1					
ANR	319962	IfStatement	if ( PRE_BIT_SET )		317834	0					
ANR	319963	Condition	PRE_BIT_SET	3956:13:173459:173469	317834	0	True				
ANR	319964	Identifier	PRE_BIT_SET		317834	0					
ANR	319965	CompoundStatement		587:26:12851:12851	317834	1					
ANR	319966	ExpressionStatement	"func ( stream , "", %s%d]%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset * multiplier , WRITEBACK_BIT_SET ? ""!"" : """" )"	3957:10:173484:173623	317834	0	True				
ANR	319967	CallExpression	"func ( stream , "", %s%d]%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset * multiplier , WRITEBACK_BIT_SET ? ""!"" : """" )"		317834	0					
ANR	319968	Callee	func		317834	0					
ANR	319969	Identifier	func		317834	0					
ANR	319970	ArgumentList	stream		317834	1					
ANR	319971	Argument	stream		317834	0					
ANR	319972	Identifier	stream		317834	0					
ANR	319973	Argument	""", %s%d]%s"""		317834	1					
ANR	319974	PrimaryExpression	""", %s%d]%s"""		317834	0					
ANR	319975	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		317834	2					
ANR	319976	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		317834	0					
ANR	319977	Condition	NEGATIVE_BIT_SET		317834	0					
ANR	319978	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	319979	PrimaryExpression	"""-"""		317834	1					
ANR	319980	PrimaryExpression	""""""		317834	2					
ANR	319981	Argument	offset * multiplier		317834	3					
ANR	319982	MultiplicativeExpression	offset * multiplier		317834	0		*			
ANR	319983	Identifier	offset		317834	0					
ANR	319984	Identifier	multiplier		317834	1					
ANR	319985	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		317834	4					
ANR	319986	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		317834	0					
ANR	319987	Condition	WRITEBACK_BIT_SET		317834	0					
ANR	319988	Identifier	WRITEBACK_BIT_SET		317834	0					
ANR	319989	PrimaryExpression	"""!"""		317834	1					
ANR	319990	PrimaryExpression	""""""		317834	2					
ANR	319991	ElseStatement	else		317834	0					
ANR	319992	CompoundStatement		592:16:13020:13020	317834	0					
ANR	319993	ExpressionStatement	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset * multiplier )"	3962:10:173653:173749	317834	0	True				
ANR	319994	CallExpression	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset * multiplier )"		317834	0					
ANR	319995	Callee	func		317834	0					
ANR	319996	Identifier	func		317834	0					
ANR	319997	ArgumentList	stream		317834	1					
ANR	319998	Argument	stream		317834	0					
ANR	319999	Identifier	stream		317834	0					
ANR	320000	Argument	"""], %s%d"""		317834	1					
ANR	320001	PrimaryExpression	"""], %s%d"""		317834	0					
ANR	320002	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		317834	2					
ANR	320003	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		317834	0					
ANR	320004	Condition	NEGATIVE_BIT_SET		317834	0					
ANR	320005	Identifier	NEGATIVE_BIT_SET		317834	0					
ANR	320006	PrimaryExpression	"""-"""		317834	1					
ANR	320007	PrimaryExpression	""""""		317834	2					
ANR	320008	Argument	offset * multiplier		317834	3					
ANR	320009	MultiplicativeExpression	offset * multiplier		317834	0		*			
ANR	320010	Identifier	offset		317834	0					
ANR	320011	Identifier	multiplier		317834	1					
ANR	320012	ElseStatement	else		317834	0					
ANR	320013	CompoundStatement		597:15:13156:13156	317834	0					
ANR	320014	ExpressionStatement	"func ( stream , ""]"" )"	3967:9:173788:173806	317834	0	True				
ANR	320015	CallExpression	"func ( stream , ""]"" )"		317834	0					
ANR	320016	Callee	func		317834	0					
ANR	320017	Identifier	func		317834	0					
ANR	320018	ArgumentList	stream		317834	1					
ANR	320019	Argument	stream		317834	0					
ANR	320020	Identifier	stream		317834	0					
ANR	320021	Argument	"""]"""		317834	1					
ANR	320022	PrimaryExpression	"""]"""		317834	0					
ANR	320023	BreakStatement	break ;	3970:6:173832:173837	317834	16	True				
ANR	320024	Label	case 'r' :	3972:4:173844:173852	317834	17	True				
ANR	320025	CompoundStatement		609:8:13449:13500	317834	18					
ANR	320026	IdentifierDeclStatement	int imm4 = ( given >> 4 ) & 0xf ;	3974:8:173870:173899	317834	0	True				
ANR	320027	IdentifierDecl	imm4 = ( given >> 4 ) & 0xf		317834	0					
ANR	320028	IdentifierDeclType	int		317834	0					
ANR	320029	Identifier	imm4		317834	1					
ANR	320030	AssignmentExpression	imm4 = ( given >> 4 ) & 0xf		317834	2		=			
ANR	320031	Identifier	imm4		317834	0					
ANR	320032	BitAndExpression	( given >> 4 ) & 0xf		317834	1		&			
ANR	320033	ShiftExpression	given >> 4		317834	0		>>			
ANR	320034	Identifier	given		317834	0					
ANR	320035	PrimaryExpression	4		317834	1					
ANR	320036	PrimaryExpression	0xf		317834	1					
ANR	320037	IdentifierDeclStatement	int puw_bits = ( ( given >> 22 ) & 6 ) | ( ( given >> W_BIT ) & 1 ) ;	3975:8:173909:173968	317834	1	True				
ANR	320038	IdentifierDecl	puw_bits = ( ( given >> 22 ) & 6 ) | ( ( given >> W_BIT ) & 1 )		317834	0					
ANR	320039	IdentifierDeclType	int		317834	0					
ANR	320040	Identifier	puw_bits		317834	1					
ANR	320041	AssignmentExpression	puw_bits = ( ( given >> 22 ) & 6 ) | ( ( given >> W_BIT ) & 1 )		317834	2		=			
ANR	320042	Identifier	puw_bits		317834	0					
ANR	320043	InclusiveOrExpression	( ( given >> 22 ) & 6 ) | ( ( given >> W_BIT ) & 1 )		317834	1		|			
ANR	320044	BitAndExpression	( given >> 22 ) & 6		317834	0		&			
ANR	320045	ShiftExpression	given >> 22		317834	0		>>			
ANR	320046	Identifier	given		317834	0					
ANR	320047	PrimaryExpression	22		317834	1					
ANR	320048	PrimaryExpression	6		317834	1					
ANR	320049	BitAndExpression	( given >> W_BIT ) & 1		317834	1		&			
ANR	320050	ShiftExpression	given >> W_BIT		317834	0		>>			
ANR	320051	Identifier	given		317834	0					
ANR	320052	Identifier	W_BIT		317834	1					
ANR	320053	PrimaryExpression	1		317834	1					
ANR	320054	IdentifierDeclStatement	int ubit = ! NEGATIVE_BIT_SET ;	3976:8:173978:174007	317834	2	True				
ANR	320055	IdentifierDecl	ubit = ! NEGATIVE_BIT_SET		317834	0					
ANR	320056	IdentifierDeclType	int		317834	0					
ANR	320057	Identifier	ubit		317834	1					
ANR	320058	AssignmentExpression	ubit = ! NEGATIVE_BIT_SET		317834	2		=			
ANR	320059	Identifier	ubit		317834	0					
ANR	320060	UnaryOperationExpression	! NEGATIVE_BIT_SET		317834	1					
ANR	320061	UnaryOperator	!		317834	0					
ANR	320062	Identifier	NEGATIVE_BIT_SET		317834	1					
ANR	320063	IdentifierDeclStatement	const char * rm = arm_regnames [ given & 0xf ] ;	3977:8:174017:174060	317834	3	True				
ANR	320064	IdentifierDecl	* rm = arm_regnames [ given & 0xf ]		317834	0					
ANR	320065	IdentifierDeclType	const char *		317834	0					
ANR	320066	Identifier	rm		317834	1					
ANR	320067	AssignmentExpression	* rm = arm_regnames [ given & 0xf ]		317834	2		=			
ANR	320068	Identifier	rm		317834	0					
ANR	320069	ArrayIndexing	arm_regnames [ given & 0xf ]		317834	1					
ANR	320070	Identifier	arm_regnames		317834	0					
ANR	320071	BitAndExpression	given & 0xf		317834	1		&			
ANR	320072	Identifier	given		317834	0					
ANR	320073	PrimaryExpression	0xf		317834	1					
ANR	320074	IdentifierDeclStatement	const char * rn = arm_regnames [ ( given >> 16 ) & 0xf ] ;	3978:8:174070:174121	317834	4	True				
ANR	320075	IdentifierDecl	* rn = arm_regnames [ ( given >> 16 ) & 0xf ]		317834	0					
ANR	320076	IdentifierDeclType	const char *		317834	0					
ANR	320077	Identifier	rn		317834	1					
ANR	320078	AssignmentExpression	* rn = arm_regnames [ ( given >> 16 ) & 0xf ]		317834	2		=			
ANR	320079	Identifier	rn		317834	0					
ANR	320080	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		317834	1					
ANR	320081	Identifier	arm_regnames		317834	0					
ANR	320082	BitAndExpression	( given >> 16 ) & 0xf		317834	1		&			
ANR	320083	ShiftExpression	given >> 16		317834	0		>>			
ANR	320084	Identifier	given		317834	0					
ANR	320085	PrimaryExpression	16		317834	1					
ANR	320086	PrimaryExpression	0xf		317834	1					
ANR	320087	SwitchStatement	switch ( puw_bits )		317834	5					
ANR	320088	Condition	puw_bits	3980:16:174140:174147	317834	0	True				
ANR	320089	Identifier	puw_bits		317834	0					
ANR	320090	CompoundStatement		612:3:13532:13532	317834	1					
ANR	320091	Label	case 1 :	3982:3:174158:174164	317834	0	True				
ANR	320092	Label	case 3 :	3983:3:174169:174175	317834	1	True				
ANR	320093	ExpressionStatement	"func ( stream , ""[%s], %c%s"" , rn , ubit ? '+' : '-' , rm )"	3984:5:174182:174235	317834	2	True				
ANR	320094	CallExpression	"func ( stream , ""[%s], %c%s"" , rn , ubit ? '+' : '-' , rm )"		317834	0					
ANR	320095	Callee	func		317834	0					
ANR	320096	Identifier	func		317834	0					
ANR	320097	ArgumentList	stream		317834	1					
ANR	320098	Argument	stream		317834	0					
ANR	320099	Identifier	stream		317834	0					
ANR	320100	Argument	"""[%s], %c%s"""		317834	1					
ANR	320101	PrimaryExpression	"""[%s], %c%s"""		317834	0					
ANR	320102	Argument	rn		317834	2					
ANR	320103	Identifier	rn		317834	0					
ANR	320104	Argument	ubit ? '+' : '-'		317834	3					
ANR	320105	ConditionalExpression	ubit ? '+' : '-'		317834	0					
ANR	320106	Condition	ubit		317834	0					
ANR	320107	Identifier	ubit		317834	0					
ANR	320108	PrimaryExpression	'+'		317834	1					
ANR	320109	PrimaryExpression	'-'		317834	2					
ANR	320110	Argument	rm		317834	4					
ANR	320111	Identifier	rm		317834	0					
ANR	320112	IfStatement	if ( imm4 )		317834	3					
ANR	320113	Condition	imm4	3985:9:174246:174249	317834	0	True				
ANR	320114	Identifier	imm4		317834	0					
ANR	320115	CompoundStatement		616:15:13631:13631	317834	1					
ANR	320116	ExpressionStatement	"func ( stream , "", lsl %d"" , imm4 )"	3986:6:174260:174291	317834	0	True				
ANR	320117	CallExpression	"func ( stream , "", lsl %d"" , imm4 )"		317834	0					
ANR	320118	Callee	func		317834	0					
ANR	320119	Identifier	func		317834	0					
ANR	320120	ArgumentList	stream		317834	1					
ANR	320121	Argument	stream		317834	0					
ANR	320122	Identifier	stream		317834	0					
ANR	320123	Argument	""", lsl %d"""		317834	1					
ANR	320124	PrimaryExpression	""", lsl %d"""		317834	0					
ANR	320125	Argument	imm4		317834	2					
ANR	320126	Identifier	imm4		317834	0					
ANR	320127	BreakStatement	break ;	3988:5:174305:174310	317834	4	True				
ANR	320128	Label	case 4 :	3990:3:174316:174322	317834	5	True				
ANR	320129	Label	case 5 :	3991:3:174327:174333	317834	6	True				
ANR	320130	Label	case 6 :	3992:3:174338:174344	317834	7	True				
ANR	320131	Label	case 7 :	3993:3:174349:174355	317834	8	True				
ANR	320132	ExpressionStatement	"func ( stream , ""[%s, %c%s"" , rn , ubit ? '+' : '-' , rm )"	3994:5:174362:174414	317834	9	True				
ANR	320133	CallExpression	"func ( stream , ""[%s, %c%s"" , rn , ubit ? '+' : '-' , rm )"		317834	0					
ANR	320134	Callee	func		317834	0					
ANR	320135	Identifier	func		317834	0					
ANR	320136	ArgumentList	stream		317834	1					
ANR	320137	Argument	stream		317834	0					
ANR	320138	Identifier	stream		317834	0					
ANR	320139	Argument	"""[%s, %c%s"""		317834	1					
ANR	320140	PrimaryExpression	"""[%s, %c%s"""		317834	0					
ANR	320141	Argument	rn		317834	2					
ANR	320142	Identifier	rn		317834	0					
ANR	320143	Argument	ubit ? '+' : '-'		317834	3					
ANR	320144	ConditionalExpression	ubit ? '+' : '-'		317834	0					
ANR	320145	Condition	ubit		317834	0					
ANR	320146	Identifier	ubit		317834	0					
ANR	320147	PrimaryExpression	'+'		317834	1					
ANR	320148	PrimaryExpression	'-'		317834	2					
ANR	320149	Argument	rm		317834	4					
ANR	320150	Identifier	rm		317834	0					
ANR	320151	IfStatement	if ( imm4 > 0 )		317834	10					
ANR	320152	Condition	imm4 > 0	3995:9:174425:174432	317834	0	True				
ANR	320153	RelationalExpression	imm4 > 0		317834	0		>			
ANR	320154	Identifier	imm4		317834	0					
ANR	320155	PrimaryExpression	0		317834	1					
ANR	320156	CompoundStatement		626:19:13814:13814	317834	1					
ANR	320157	ExpressionStatement	"func ( stream , "", lsl %d"" , imm4 )"	3996:6:174443:174474	317834	0	True				
ANR	320158	CallExpression	"func ( stream , "", lsl %d"" , imm4 )"		317834	0					
ANR	320159	Callee	func		317834	0					
ANR	320160	Identifier	func		317834	0					
ANR	320161	ArgumentList	stream		317834	1					
ANR	320162	Argument	stream		317834	0					
ANR	320163	Identifier	stream		317834	0					
ANR	320164	Argument	""", lsl %d"""		317834	1					
ANR	320165	PrimaryExpression	""", lsl %d"""		317834	0					
ANR	320166	Argument	imm4		317834	2					
ANR	320167	Identifier	imm4		317834	0					
ANR	320168	ExpressionStatement	"func ( stream , ""]"" )"	3998:5:174488:174506	317834	11	True				
ANR	320169	CallExpression	"func ( stream , ""]"" )"		317834	0					
ANR	320170	Callee	func		317834	0					
ANR	320171	Identifier	func		317834	0					
ANR	320172	ArgumentList	stream		317834	1					
ANR	320173	Argument	stream		317834	0					
ANR	320174	Identifier	stream		317834	0					
ANR	320175	Argument	"""]"""		317834	1					
ANR	320176	PrimaryExpression	"""]"""		317834	0					
ANR	320177	IfStatement	if ( puw_bits == 5 || puw_bits == 7 )		317834	12					
ANR	320178	Condition	puw_bits == 5 || puw_bits == 7	3999:9:174517:174546	317834	0	True				
ANR	320179	OrExpression	puw_bits == 5 || puw_bits == 7		317834	0		||			
ANR	320180	EqualityExpression	puw_bits == 5		317834	0		==			
ANR	320181	Identifier	puw_bits		317834	0					
ANR	320182	PrimaryExpression	5		317834	1					
ANR	320183	EqualityExpression	puw_bits == 7		317834	1		==			
ANR	320184	Identifier	puw_bits		317834	0					
ANR	320185	PrimaryExpression	7		317834	1					
ANR	320186	CompoundStatement		630:41:13928:13928	317834	1					
ANR	320187	ExpressionStatement	"func ( stream , ""!"" )"	4000:6:174557:174575	317834	0	True				
ANR	320188	CallExpression	"func ( stream , ""!"" )"		317834	0					
ANR	320189	Callee	func		317834	0					
ANR	320190	Identifier	func		317834	0					
ANR	320191	ArgumentList	stream		317834	1					
ANR	320192	Argument	stream		317834	0					
ANR	320193	Identifier	stream		317834	0					
ANR	320194	Argument	"""!"""		317834	1					
ANR	320195	PrimaryExpression	"""!"""		317834	0					
ANR	320196	BreakStatement	break ;	4002:5:174589:174594	317834	13	True				
ANR	320197	Label	default :	4004:3:174600:174607	317834	14	True				
ANR	320198	Identifier	default		317834	0					
ANR	320199	ExpressionStatement	"func ( stream , ""INVALID"" )"	4005:5:174614:174638	317834	15	True				
ANR	320200	CallExpression	"func ( stream , ""INVALID"" )"		317834	0					
ANR	320201	Callee	func		317834	0					
ANR	320202	Identifier	func		317834	0					
ANR	320203	ArgumentList	stream		317834	1					
ANR	320204	Argument	stream		317834	0					
ANR	320205	Identifier	stream		317834	0					
ANR	320206	Argument	"""INVALID"""		317834	1					
ANR	320207	PrimaryExpression	"""INVALID"""		317834	0					
ANR	320208	BreakStatement	break ;	4008:6:174659:174664	317834	19	True				
ANR	320209	Label	case 'i' :	4010:4:174671:174679	317834	20	True				
ANR	320210	CompoundStatement		643:8:14076:14085	317834	21					
ANR	320211	IdentifierDeclStatement	long imm5 ;	4012:8:174697:174706	317834	0	True				
ANR	320212	IdentifierDecl	imm5		317834	0					
ANR	320213	IdentifierDeclType	long		317834	0					
ANR	320214	Identifier	imm5		317834	1					
ANR	320215	ExpressionStatement	imm5 = ( ( given & 0x100 ) >> 4 ) | ( given & 0xf )	4013:8:174716:174761	317834	1	True				
ANR	320216	AssignmentExpression	imm5 = ( ( given & 0x100 ) >> 4 ) | ( given & 0xf )		317834	0		=			
ANR	320217	Identifier	imm5		317834	0					
ANR	320218	InclusiveOrExpression	( ( given & 0x100 ) >> 4 ) | ( given & 0xf )		317834	1		|			
ANR	320219	ShiftExpression	( given & 0x100 ) >> 4		317834	0		>>			
ANR	320220	BitAndExpression	given & 0x100		317834	0		&			
ANR	320221	Identifier	given		317834	0					
ANR	320222	PrimaryExpression	0x100		317834	1					
ANR	320223	PrimaryExpression	4		317834	1					
ANR	320224	BitAndExpression	given & 0xf		317834	1		&			
ANR	320225	Identifier	given		317834	0					
ANR	320226	PrimaryExpression	0xf		317834	1					
ANR	320227	ExpressionStatement	"func ( stream , ""%ld"" , ( imm5 == 0 ) ? 32 : imm5 )"	4014:8:174771:174816	317834	2	True				
ANR	320228	CallExpression	"func ( stream , ""%ld"" , ( imm5 == 0 ) ? 32 : imm5 )"		317834	0					
ANR	320229	Callee	func		317834	0					
ANR	320230	Identifier	func		317834	0					
ANR	320231	ArgumentList	stream		317834	1					
ANR	320232	Argument	stream		317834	0					
ANR	320233	Identifier	stream		317834	0					
ANR	320234	Argument	"""%ld"""		317834	1					
ANR	320235	PrimaryExpression	"""%ld"""		317834	0					
ANR	320236	Argument	( imm5 == 0 ) ? 32 : imm5		317834	2					
ANR	320237	ConditionalExpression	( imm5 == 0 ) ? 32 : imm5		317834	0					
ANR	320238	Condition	imm5 == 0		317834	0					
ANR	320239	EqualityExpression	imm5 == 0		317834	0		==			
ANR	320240	Identifier	imm5		317834	0					
ANR	320241	PrimaryExpression	0		317834	1					
ANR	320242	PrimaryExpression	32		317834	1					
ANR	320243	Identifier	imm5		317834	2					
ANR	320244	BreakStatement	break ;	4016:6:174832:174837	317834	22	True				
ANR	320245	ElseStatement	else		317834	0					
ANR	320246	CompoundStatement		650:10:14238:14238	317834	0					
ANR	320247	ExpressionStatement	"func ( stream , ""%c"" , * c )"	4020:4:174865:174888	317834	0	True				
ANR	320248	CallExpression	"func ( stream , ""%c"" , * c )"		317834	0					
ANR	320249	Callee	func		317834	0					
ANR	320250	Identifier	func		317834	0					
ANR	320251	ArgumentList	stream		317834	1					
ANR	320252	Argument	stream		317834	0					
ANR	320253	Identifier	stream		317834	0					
ANR	320254	Argument	"""%c"""		317834	1					
ANR	320255	PrimaryExpression	"""%c"""		317834	0					
ANR	320256	Argument	* c		317834	2					
ANR	320257	UnaryOperationExpression	* c		317834	0					
ANR	320258	UnaryOperator	*		317834	0					
ANR	320259	Identifier	c		317834	1					
ANR	320260	IfStatement	if ( value_in_comment > 32 || value_in_comment < - 16 )		317834	12					
ANR	320261	Condition	value_in_comment > 32 || value_in_comment < - 16	4025:10:174915:174961	317834	0	True				
ANR	320262	OrExpression	value_in_comment > 32 || value_in_comment < - 16		317834	0		||			
ANR	320263	RelationalExpression	value_in_comment > 32		317834	0		>			
ANR	320264	Identifier	value_in_comment		317834	0					
ANR	320265	PrimaryExpression	32		317834	1					
ANR	320266	RelationalExpression	value_in_comment < - 16		317834	1		<			
ANR	320267	Identifier	value_in_comment		317834	0					
ANR	320268	UnaryOperationExpression	- 16		317834	1					
ANR	320269	UnaryOperator	-		317834	0					
ANR	320270	PrimaryExpression	16		317834	1					
ANR	320271	ExpressionStatement	"func ( stream , "" ; 0x%lx"" , ( value_in_comment & 0xffffffffUL ) )"	4026:1:174965:175025	317834	1	True				
ANR	320272	CallExpression	"func ( stream , "" ; 0x%lx"" , ( value_in_comment & 0xffffffffUL ) )"		317834	0					
ANR	320273	Callee	func		317834	0					
ANR	320274	Identifier	func		317834	0					
ANR	320275	ArgumentList	stream		317834	1					
ANR	320276	Argument	stream		317834	0					
ANR	320277	Identifier	stream		317834	0					
ANR	320278	Argument	""" ; 0x%lx"""		317834	1					
ANR	320279	PrimaryExpression	""" ; 0x%lx"""		317834	0					
ANR	320280	Argument	value_in_comment & 0xffffffffUL		317834	2					
ANR	320281	BitAndExpression	value_in_comment & 0xffffffffUL		317834	0		&			
ANR	320282	Identifier	value_in_comment		317834	0					
ANR	320283	PrimaryExpression	0xffffffffUL		317834	1					
ANR	320284	IfStatement	if ( is_unpredictable )		317834	13					
ANR	320285	Condition	is_unpredictable	4029:5:175040:175055	317834	0	True				
ANR	320286	Identifier	is_unpredictable		317834	0					
ANR	320287	CompoundStatement		660:23:14437:14437	317834	1					
ANR	320288	ExpressionStatement	"func ( stream , UNPREDICTABLE_INSTRUCTION )"	4030:2:175062:175102	317834	0	True				
ANR	320289	CallExpression	"func ( stream , UNPREDICTABLE_INSTRUCTION )"		317834	0					
ANR	320290	Callee	func		317834	0					
ANR	320291	Identifier	func		317834	0					
ANR	320292	ArgumentList	stream		317834	1					
ANR	320293	Argument	stream		317834	0					
ANR	320294	Identifier	stream		317834	0					
ANR	320295	Argument	UNPREDICTABLE_INSTRUCTION		317834	1					
ANR	320296	Identifier	UNPREDICTABLE_INSTRUCTION		317834	0					
ANR	320297	ReturnStatement	return TRUE ;	4033:1:175109:175120	317834	14	True				
ANR	320298	Identifier	TRUE		317834	0					
ANR	320299	ReturnStatement	return FALSE ;	4035:2:175130:175142	317834	11	True				
ANR	320300	Identifier	FALSE		317834	0					
ANR	320301	ReturnType	static bfd_boolean		317834	1					
ANR	320302	Identifier	print_insn_coprocessor		317834	2					
ANR	320303	ParameterList	"bfd_vma pc , struct disassemble_info * info , long given , bfd_boolean thumb"		317834	3					
ANR	320304	Parameter	bfd_vma pc	3366:24:160537:160546	317834	0	True				
ANR	320305	ParameterType	bfd_vma		317834	0					
ANR	320306	Identifier	pc		317834	1					
ANR	320307	Parameter	struct disassemble_info * info	3367:3:160552:160580	317834	1	True				
ANR	320308	ParameterType	struct disassemble_info *		317834	0					
ANR	320309	Identifier	info		317834	1					
ANR	320310	Parameter	long given	3368:3:160586:160595	317834	2	True				
ANR	320311	ParameterType	long		317834	0					
ANR	320312	Identifier	given		317834	1					
ANR	320313	Parameter	bfd_boolean thumb	3369:3:160601:160617	317834	3	True				
ANR	320314	ParameterType	bfd_boolean		317834	0					
ANR	320315	Identifier	thumb		317834	1					
ANR	320316	CFGEntryNode	ENTRY		317834		True				
ANR	320317	CFGExitNode	EXIT		317834		True				
ANR	320318	Symbol	& value		317834						
ANR	320319	Symbol	UNPREDICTABLE_INSTRUCTION		317834						
ANR	320320	Symbol	ARM_FEATURE_ZERO		317834						
ANR	320321	Symbol	ARM_ARCH_NONE		317834						
ANR	320322	Symbol	* iwmmxt_regnames		317834						
ANR	320323	Symbol	cond		317834						
ANR	320324	Symbol	PRE_BIT_SET		317834						
ANR	320325	Symbol	info -> fprintf_func		317834						
ANR	320326	Symbol	IFTHEN_COND		317834						
ANR	320327	Symbol	allowed_arches		317834						
ANR	320328	Symbol	* arm_conditional		317834						
ANR	320329	Symbol	from		317834						
ANR	320330	Symbol	info		317834						
ANR	320331	Symbol	regno		317834						
ANR	320332	Symbol	given		317834						
ANR	320333	Symbol	iwmmxt_cregnames		317834						
ANR	320334	Symbol	NEGATIVE_BIT_SET		317834						
ANR	320335	Symbol	arm_decode_bitfield		317834						
ANR	320336	Symbol	SENTINEL_IWMMXT_END		317834						
ANR	320337	Symbol	offset		317834						
ANR	320338	Symbol	puw_bits		317834						
ANR	320339	Symbol	* iwmmxt_wwnames		317834						
ANR	320340	Symbol	multiplier		317834						
ANR	320341	Symbol	insn -> value		317834						
ANR	320342	Symbol	count		317834						
ANR	320343	Symbol	TRUE		317834						
ANR	320344	Symbol	is_unpredictable		317834						
ANR	320345	Symbol	* arm_fp_const		317834						
ANR	320346	Symbol	info -> bytes_per_chunk		317834						
ANR	320347	Symbol	arm_fp_const		317834						
ANR	320348	Symbol	ifthen_state		317834						
ANR	320349	Symbol	* iwmmxt_wwssnames		317834						
ANR	320350	Symbol	* given		317834						
ANR	320351	Symbol	imm4		317834						
ANR	320352	Symbol	rm		317834						
ANR	320353	Symbol	rn		317834						
ANR	320354	Symbol	arm_conditional		317834						
ANR	320355	Symbol	imm5		317834						
ANR	320356	Symbol	iwmmxt_wwssnames		317834						
ANR	320357	Symbol	* arm_regnames		317834						
ANR	320358	Symbol	private_data		317834						
ANR	320359	Symbol	coprocessor_opcodes		317834						
ANR	320360	Symbol	thumb		317834						
ANR	320361	Symbol	* cond		317834						
ANR	320362	Symbol	iwmmxt_wwnames		317834						
ANR	320363	Symbol	imm		317834						
ANR	320364	Symbol	& width		317834						
ANR	320365	Symbol	info -> stream		317834						
ANR	320366	Symbol	bfd_mach_arm_iWMMXt		317834						
ANR	320367	Symbol	* width		317834						
ANR	320368	Symbol	ubit		317834						
ANR	320369	Symbol	WRITEBACK_BIT_SET		317834						
ANR	320370	Symbol	value_in_comment		317834						
ANR	320371	Symbol	ARM_CPU_HAS_FEATURE		317834						
ANR	320372	Symbol	stream		317834						
ANR	320373	Symbol	u_reg		317834						
ANR	320374	Symbol	* ++ c		317834						
ANR	320375	Symbol	arm_regnames		317834						
ANR	320376	Symbol	value		317834						
ANR	320377	Symbol	decVal		317834						
ANR	320378	Symbol	mask		317834						
ANR	320379	Symbol	_		317834						
ANR	320380	Symbol	c		317834						
ANR	320381	Symbol	bfd_mach_arm_iWMMXt2		317834						
ANR	320382	Symbol	info -> private_data		317834						
ANR	320383	Symbol	insn -> arch		317834						
ANR	320384	Symbol	info -> mach		317834						
ANR	320385	Symbol	* c ++		317834						
ANR	320386	Symbol	* insn		317834						
ANR	320387	Symbol	floatVal		317834						
ANR	320388	Symbol	COND_UNCOND		317834						
ANR	320389	Symbol	* c		317834						
ANR	320390	Symbol	single		317834						
ANR	320391	Symbol	insn		317834						
ANR	320392	Symbol	cp_num		317834						
ANR	320393	Symbol	pc		317834						
ANR	320394	Symbol	W_BIT		317834						
ANR	320395	Symbol	func		317834						
ANR	320396	Symbol	bfd_mach_arm_XScale		317834						
ANR	320397	Symbol	* value		317834						
ANR	320398	Symbol	iwmmxt_regnames		317834						
ANR	320399	Symbol	* iwmmxt_cregnames		317834						
ANR	320400	Symbol	width		317834						
ANR	320401	Symbol	* private_data		317834						
ANR	320402	Symbol	FALSE		317834						
ANR	320403	Symbol	* info		317834						
ANR	320404	Symbol	insn -> mask		317834						
ANR	320405	Symbol	insn -> assembler		317834						
ANR	320406	Symbol	private_data -> features		317834						
ANR	320407	Function	print_arm_address	4043:0:175369:177544							
ANR	320408	FunctionDef	"print_arm_address (bfd_vma pc , struct disassemble_info * info , long given)"		320407	0					
ANR	320409	CompoundStatement		4045:0:175462:177544	320407	0					
ANR	320410	IdentifierDeclStatement	void * stream = info -> stream ;	4046:2:175466:175493	320407	0	True				
ANR	320411	IdentifierDecl	* stream = info -> stream		320407	0					
ANR	320412	IdentifierDeclType	void *		320407	0					
ANR	320413	Identifier	stream		320407	1					
ANR	320414	AssignmentExpression	* stream = info -> stream		320407	2		=			
ANR	320415	Identifier	stream		320407	0					
ANR	320416	PtrMemberAccess	info -> stream		320407	1					
ANR	320417	Identifier	info		320407	0					
ANR	320418	Identifier	stream		320407	1					
ANR	320419	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	4047:2:175497:175536	320407	1	True				
ANR	320420	IdentifierDecl	func = info -> fprintf_func		320407	0					
ANR	320421	IdentifierDeclType	fprintf_ftype		320407	0					
ANR	320422	Identifier	func		320407	1					
ANR	320423	AssignmentExpression	func = info -> fprintf_func		320407	2		=			
ANR	320424	Identifier	func		320407	0					
ANR	320425	PtrMemberAccess	info -> fprintf_func		320407	1					
ANR	320426	Identifier	info		320407	0					
ANR	320427	Identifier	fprintf_func		320407	1					
ANR	320428	IdentifierDeclStatement	bfd_vma offset = 0 ;	4048:2:175540:175558	320407	2	True				
ANR	320429	IdentifierDecl	offset = 0		320407	0					
ANR	320430	IdentifierDeclType	bfd_vma		320407	0					
ANR	320431	Identifier	offset		320407	1					
ANR	320432	AssignmentExpression	offset = 0		320407	2		=			
ANR	320433	Identifier	offset		320407	0					
ANR	320434	PrimaryExpression	0		320407	1					
ANR	320435	IfStatement	if ( ( ( given & 0x000f0000 ) == 0x000f0000 ) && ( ( given & 0x02000000 ) == 0 ) )		320407	3					
ANR	320436	Condition	( ( given & 0x000f0000 ) == 0x000f0000 ) && ( ( given & 0x02000000 ) == 0 )	4050:6:175567:175639	320407	0	True				
ANR	320437	AndExpression	( ( given & 0x000f0000 ) == 0x000f0000 ) && ( ( given & 0x02000000 ) == 0 )		320407	0		&&			
ANR	320438	EqualityExpression	( given & 0x000f0000 ) == 0x000f0000		320407	0		==			
ANR	320439	BitAndExpression	given & 0x000f0000		320407	0		&			
ANR	320440	Identifier	given		320407	0					
ANR	320441	PrimaryExpression	0x000f0000		320407	1					
ANR	320442	PrimaryExpression	0x000f0000		320407	1					
ANR	320443	EqualityExpression	( given & 0x02000000 ) == 0		320407	1		==			
ANR	320444	BitAndExpression	given & 0x02000000		320407	0		&			
ANR	320445	Identifier	given		320407	0					
ANR	320446	PrimaryExpression	0x02000000		320407	1					
ANR	320447	PrimaryExpression	0		320407	1					
ANR	320448	CompoundStatement		8:4:183:183	320407	1					
ANR	320449	ExpressionStatement	offset = given & 0xfff	4053:6:175654:175676	320407	0	True				
ANR	320450	AssignmentExpression	offset = given & 0xfff		320407	0		=			
ANR	320451	Identifier	offset		320407	0					
ANR	320452	BitAndExpression	given & 0xfff		320407	1		&			
ANR	320453	Identifier	given		320407	0					
ANR	320454	PrimaryExpression	0xfff		320407	1					
ANR	320455	ExpressionStatement	"func ( stream , ""[pc"" )"	4055:6:175685:175705	320407	1	True				
ANR	320456	CallExpression	"func ( stream , ""[pc"" )"		320407	0					
ANR	320457	Callee	func		320407	0					
ANR	320458	Identifier	func		320407	0					
ANR	320459	ArgumentList	stream		320407	1					
ANR	320460	Argument	stream		320407	0					
ANR	320461	Identifier	stream		320407	0					
ANR	320462	Argument	"""[pc"""		320407	1					
ANR	320463	PrimaryExpression	"""[pc"""		320407	0					
ANR	320464	IfStatement	if ( PRE_BIT_SET )		320407	2					
ANR	320465	Condition	PRE_BIT_SET	4057:10:175718:175728	320407	0	True				
ANR	320466	Identifier	PRE_BIT_SET		320407	0					
ANR	320467	CompoundStatement		14:1:269:269	320407	1					
ANR	320468	IfStatement	if ( WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset )		320407	0					
ANR	320469	Condition	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset	4061:7:175821:175867	320407	0	True				
ANR	320470	OrExpression	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset		320407	0		||			
ANR	320471	Identifier	WRITEBACK_BIT_SET		320407	0					
ANR	320472	OrExpression	NEGATIVE_BIT_SET || offset		320407	1		||			
ANR	320473	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320474	Identifier	offset		320407	1					
ANR	320475	CompoundStatement		17:56:407:407	320407	1					
ANR	320476	ExpressionStatement	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4062:4:175876:175941	320407	0	True				
ANR	320477	CallExpression	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		320407	0					
ANR	320478	Callee	func		320407	0					
ANR	320479	Identifier	func		320407	0					
ANR	320480	ArgumentList	stream		320407	1					
ANR	320481	Argument	stream		320407	0					
ANR	320482	Identifier	stream		320407	0					
ANR	320483	Argument	""", %s%d"""		320407	1					
ANR	320484	PrimaryExpression	""", %s%d"""		320407	0					
ANR	320485	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320486	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320487	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320488	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320489	PrimaryExpression	"""-"""		320407	1					
ANR	320490	PrimaryExpression	""""""		320407	2					
ANR	320491	Argument	( int ) offset		320407	3					
ANR	320492	CastExpression	( int ) offset		320407	0					
ANR	320493	CastTarget	int		320407	0					
ANR	320494	Identifier	offset		320407	1					
ANR	320495	IfStatement	if ( NEGATIVE_BIT_SET )		320407	1					
ANR	320496	Condition	NEGATIVE_BIT_SET	4065:7:175956:175971	320407	0	True				
ANR	320497	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320498	CompoundStatement		21:25:511:511	320407	1					
ANR	320499	ExpressionStatement	offset = - offset	4066:4:175980:175996	320407	0	True				
ANR	320500	AssignmentExpression	offset = - offset		320407	0		=			
ANR	320501	Identifier	offset		320407	0					
ANR	320502	UnaryOperationExpression	- offset		320407	1					
ANR	320503	UnaryOperator	-		320407	0					
ANR	320504	Identifier	offset		320407	1					
ANR	320505	ExpressionStatement	offset += pc + 8	4069:3:176007:176023	320407	2	True				
ANR	320506	AssignmentExpression	offset += pc + 8		320407	0		+=			
ANR	320507	Identifier	offset		320407	0					
ANR	320508	AdditiveExpression	pc + 8		320407	1		+			
ANR	320509	Identifier	pc		320407	0					
ANR	320510	PrimaryExpression	8		320407	1					
ANR	320511	ExpressionStatement	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"	4075:3:176194:176244	320407	3	True				
ANR	320512	CallExpression	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"		320407	0					
ANR	320513	Callee	func		320407	0					
ANR	320514	Identifier	func		320407	0					
ANR	320515	ArgumentList	stream		320407	1					
ANR	320516	Argument	stream		320407	0					
ANR	320517	Identifier	stream		320407	0					
ANR	320518	Argument	"""]%s"""		320407	1					
ANR	320519	PrimaryExpression	"""]%s"""		320407	0					
ANR	320520	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		320407	2					
ANR	320521	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		320407	0					
ANR	320522	Condition	WRITEBACK_BIT_SET		320407	0					
ANR	320523	Identifier	WRITEBACK_BIT_SET		320407	0					
ANR	320524	PrimaryExpression	"""!"""		320407	1					
ANR	320525	PrimaryExpression	""""""		320407	2					
ANR	320526	ElseStatement	else		320407	0					
ANR	320527	CompoundStatement		34:1:820:820	320407	0					
ANR	320528	ExpressionStatement	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4079:3:176288:176355	320407	0	True				
ANR	320529	CallExpression	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		320407	0					
ANR	320530	Callee	func		320407	0					
ANR	320531	Identifier	func		320407	0					
ANR	320532	ArgumentList	stream		320407	1					
ANR	320533	Argument	stream		320407	0					
ANR	320534	Identifier	stream		320407	0					
ANR	320535	Argument	"""], %s%d"""		320407	1					
ANR	320536	PrimaryExpression	"""], %s%d"""		320407	0					
ANR	320537	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320538	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320539	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320540	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320541	PrimaryExpression	"""-"""		320407	1					
ANR	320542	PrimaryExpression	""""""		320407	2					
ANR	320543	Argument	( int ) offset		320407	3					
ANR	320544	CastExpression	( int ) offset		320407	0					
ANR	320545	CastTarget	int		320407	0					
ANR	320546	Identifier	offset		320407	1					
ANR	320547	ExpressionStatement	offset = pc + 8	4082:3:176393:176408	320407	1	True				
ANR	320548	AssignmentExpression	offset = pc + 8		320407	0		=			
ANR	320549	Identifier	offset		320407	0					
ANR	320550	AdditiveExpression	pc + 8		320407	1		+			
ANR	320551	Identifier	pc		320407	0					
ANR	320552	PrimaryExpression	8		320407	1					
ANR	320553	ExpressionStatement	"func ( stream , "" ; "" )"	4085:6:176420:176440	320407	3	True				
ANR	320554	CallExpression	"func ( stream , "" ; "" )"		320407	0					
ANR	320555	Callee	func		320407	0					
ANR	320556	Identifier	func		320407	0					
ANR	320557	ArgumentList	stream		320407	1					
ANR	320558	Argument	stream		320407	0					
ANR	320559	Identifier	stream		320407	0					
ANR	320560	Argument	""" ; """		320407	1					
ANR	320561	PrimaryExpression	""" ; """		320407	0					
ANR	320562	ExpressionStatement	"info -> print_address_func ( offset , info )"	4086:6:176448:176487	320407	4	True				
ANR	320563	CallExpression	"info -> print_address_func ( offset , info )"		320407	0					
ANR	320564	Callee	info -> print_address_func		320407	0					
ANR	320565	PtrMemberAccess	info -> print_address_func		320407	0					
ANR	320566	Identifier	info		320407	0					
ANR	320567	Identifier	print_address_func		320407	1					
ANR	320568	ArgumentList	offset		320407	1					
ANR	320569	Argument	offset		320407	0					
ANR	320570	Identifier	offset		320407	0					
ANR	320571	Argument	info		320407	1					
ANR	320572	Identifier	info		320407	0					
ANR	320573	ExpressionStatement	offset = 0	4087:6:176495:176505	320407	5	True				
ANR	320574	AssignmentExpression	offset = 0		320407	0		=			
ANR	320575	Identifier	offset		320407	0					
ANR	320576	PrimaryExpression	0		320407	1					
ANR	320577	ElseStatement	else		320407	0					
ANR	320578	CompoundStatement		46:4:1061:1061	320407	0					
ANR	320579	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"	4091:6:176532:176592	320407	0	True				
ANR	320580	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"		320407	0					
ANR	320581	Callee	func		320407	0					
ANR	320582	Identifier	func		320407	0					
ANR	320583	ArgumentList	stream		320407	1					
ANR	320584	Argument	stream		320407	0					
ANR	320585	Identifier	stream		320407	0					
ANR	320586	Argument	"""[%s"""		320407	1					
ANR	320587	PrimaryExpression	"""[%s"""		320407	0					
ANR	320588	Argument	arm_regnames [ ( given >> 16 ) & 0xf ]		320407	2					
ANR	320589	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		320407	0					
ANR	320590	Identifier	arm_regnames		320407	0					
ANR	320591	BitAndExpression	( given >> 16 ) & 0xf		320407	1		&			
ANR	320592	ShiftExpression	given >> 16		320407	0		>>			
ANR	320593	Identifier	given		320407	0					
ANR	320594	PrimaryExpression	16		320407	1					
ANR	320595	PrimaryExpression	0xf		320407	1					
ANR	320596	IfStatement	if ( PRE_BIT_SET )		320407	1					
ANR	320597	Condition	PRE_BIT_SET	4094:10:176605:176615	320407	0	True				
ANR	320598	Identifier	PRE_BIT_SET		320407	0					
ANR	320599	CompoundStatement		51:1:1156:1156	320407	1					
ANR	320600	IfStatement	if ( ( given & 0x02000000 ) == 0 )		320407	0					
ANR	320601	Condition	( given & 0x02000000 ) == 0	4096:7:176628:176652	320407	0	True				
ANR	320602	EqualityExpression	( given & 0x02000000 ) == 0		320407	0		==			
ANR	320603	BitAndExpression	given & 0x02000000		320407	0		&			
ANR	320604	Identifier	given		320407	0					
ANR	320605	PrimaryExpression	0x02000000		320407	1					
ANR	320606	PrimaryExpression	0		320407	1					
ANR	320607	CompoundStatement		53:5:1197:1197	320407	1					
ANR	320608	ExpressionStatement	offset = given & 0xfff	4099:7:176733:176755	320407	0	True				
ANR	320609	AssignmentExpression	offset = given & 0xfff		320407	0		=			
ANR	320610	Identifier	offset		320407	0					
ANR	320611	BitAndExpression	given & 0xfff		320407	1		&			
ANR	320612	Identifier	given		320407	0					
ANR	320613	PrimaryExpression	0xfff		320407	1					
ANR	320614	IfStatement	if ( WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset )		320407	1					
ANR	320615	Condition	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset	4100:11:176768:176814	320407	0	True				
ANR	320616	OrExpression	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset		320407	0		||			
ANR	320617	Identifier	WRITEBACK_BIT_SET		320407	0					
ANR	320618	OrExpression	NEGATIVE_BIT_SET || offset		320407	1		||			
ANR	320619	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320620	Identifier	offset		320407	1					
ANR	320621	CompoundStatement		56:60:1354:1354	320407	1					
ANR	320622	ExpressionStatement	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4101:8:176827:176892	320407	0	True				
ANR	320623	CallExpression	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		320407	0					
ANR	320624	Callee	func		320407	0					
ANR	320625	Identifier	func		320407	0					
ANR	320626	ArgumentList	stream		320407	1					
ANR	320627	Argument	stream		320407	0					
ANR	320628	Identifier	stream		320407	0					
ANR	320629	Argument	""", %s%d"""		320407	1					
ANR	320630	PrimaryExpression	""", %s%d"""		320407	0					
ANR	320631	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320632	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320633	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320634	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320635	PrimaryExpression	"""-"""		320407	1					
ANR	320636	PrimaryExpression	""""""		320407	2					
ANR	320637	Argument	( int ) offset		320407	3					
ANR	320638	CastExpression	( int ) offset		320407	0					
ANR	320639	CastTarget	int		320407	0					
ANR	320640	Identifier	offset		320407	1					
ANR	320641	ElseStatement	else		320407	0					
ANR	320642	CompoundStatement		61:5:1460:1460	320407	0					
ANR	320643	ExpressionStatement	"func ( stream , "", %s"" , NEGATIVE_BIT_SET ? ""-"" : """" )"	4106:7:176932:176982	320407	0	True				
ANR	320644	CallExpression	"func ( stream , "", %s"" , NEGATIVE_BIT_SET ? ""-"" : """" )"		320407	0					
ANR	320645	Callee	func		320407	0					
ANR	320646	Identifier	func		320407	0					
ANR	320647	ArgumentList	stream		320407	1					
ANR	320648	Argument	stream		320407	0					
ANR	320649	Identifier	stream		320407	0					
ANR	320650	Argument	""", %s"""		320407	1					
ANR	320651	PrimaryExpression	""", %s"""		320407	0					
ANR	320652	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320653	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320654	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320655	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320656	PrimaryExpression	"""-"""		320407	1					
ANR	320657	PrimaryExpression	""""""		320407	2					
ANR	320658	ExpressionStatement	"arm_decode_shift ( given , func , stream , TRUE )"	4107:7:176991:177035	320407	1	True				
ANR	320659	CallExpression	"arm_decode_shift ( given , func , stream , TRUE )"		320407	0					
ANR	320660	Callee	arm_decode_shift		320407	0					
ANR	320661	Identifier	arm_decode_shift		320407	0					
ANR	320662	ArgumentList	given		320407	1					
ANR	320663	Argument	given		320407	0					
ANR	320664	Identifier	given		320407	0					
ANR	320665	Argument	func		320407	1					
ANR	320666	Identifier	func		320407	0					
ANR	320667	Argument	stream		320407	2					
ANR	320668	Identifier	stream		320407	0					
ANR	320669	Argument	TRUE		320407	3					
ANR	320670	Identifier	TRUE		320407	0					
ANR	320671	ExpressionStatement	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"	4110:3:177048:177100	320407	1	True				
ANR	320672	CallExpression	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"		320407	0					
ANR	320673	Callee	func		320407	0					
ANR	320674	Identifier	func		320407	0					
ANR	320675	ArgumentList	stream		320407	1					
ANR	320676	Argument	stream		320407	0					
ANR	320677	Identifier	stream		320407	0					
ANR	320678	Argument	"""]%s"""		320407	1					
ANR	320679	PrimaryExpression	"""]%s"""		320407	0					
ANR	320680	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		320407	2					
ANR	320681	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		320407	0					
ANR	320682	Condition	WRITEBACK_BIT_SET		320407	0					
ANR	320683	Identifier	WRITEBACK_BIT_SET		320407	0					
ANR	320684	PrimaryExpression	"""!"""		320407	1					
ANR	320685	PrimaryExpression	""""""		320407	2					
ANR	320686	ElseStatement	else		320407	0					
ANR	320687	CompoundStatement		70:1:1654:1654	320407	0					
ANR	320688	IfStatement	if ( ( given & 0x02000000 ) == 0 )		320407	0					
ANR	320689	Condition	( given & 0x02000000 ) == 0	4115:7:177126:177150	320407	0	True				
ANR	320690	EqualityExpression	( given & 0x02000000 ) == 0		320407	0		==			
ANR	320691	BitAndExpression	given & 0x02000000		320407	0		&			
ANR	320692	Identifier	given		320407	0					
ANR	320693	PrimaryExpression	0x02000000		320407	1					
ANR	320694	PrimaryExpression	0		320407	1					
ANR	320695	CompoundStatement		72:5:1695:1695	320407	1					
ANR	320696	ExpressionStatement	offset = given & 0xfff	4118:7:177201:177223	320407	0	True				
ANR	320697	AssignmentExpression	offset = given & 0xfff		320407	0		=			
ANR	320698	Identifier	offset		320407	0					
ANR	320699	BitAndExpression	given & 0xfff		320407	1		&			
ANR	320700	Identifier	given		320407	0					
ANR	320701	PrimaryExpression	0xfff		320407	1					
ANR	320702	ExpressionStatement	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4119:7:177232:177305	320407	1	True				
ANR	320703	CallExpression	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		320407	0					
ANR	320704	Callee	func		320407	0					
ANR	320705	Identifier	func		320407	0					
ANR	320706	ArgumentList	stream		320407	1					
ANR	320707	Argument	stream		320407	0					
ANR	320708	Identifier	stream		320407	0					
ANR	320709	Argument	"""], %s%d"""		320407	1					
ANR	320710	PrimaryExpression	"""], %s%d"""		320407	0					
ANR	320711	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320712	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320713	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320714	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320715	PrimaryExpression	"""-"""		320407	1					
ANR	320716	PrimaryExpression	""""""		320407	2					
ANR	320717	Argument	( int ) offset		320407	3					
ANR	320718	CastExpression	( int ) offset		320407	0					
ANR	320719	CastTarget	int		320407	0					
ANR	320720	Identifier	offset		320407	1					
ANR	320721	ElseStatement	else		320407	0					
ANR	320722	CompoundStatement		79:5:1864:1864	320407	0					
ANR	320723	ExpressionStatement	"func ( stream , ""], %s"" , NEGATIVE_BIT_SET ? ""-"" : """" )"	4124:7:177336:177393	320407	0	True				
ANR	320724	CallExpression	"func ( stream , ""], %s"" , NEGATIVE_BIT_SET ? ""-"" : """" )"		320407	0					
ANR	320725	Callee	func		320407	0					
ANR	320726	Identifier	func		320407	0					
ANR	320727	ArgumentList	stream		320407	1					
ANR	320728	Argument	stream		320407	0					
ANR	320729	Identifier	stream		320407	0					
ANR	320730	Argument	"""], %s"""		320407	1					
ANR	320731	PrimaryExpression	"""], %s"""		320407	0					
ANR	320732	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	2					
ANR	320733	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		320407	0					
ANR	320734	Condition	NEGATIVE_BIT_SET		320407	0					
ANR	320735	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320736	PrimaryExpression	"""-"""		320407	1					
ANR	320737	PrimaryExpression	""""""		320407	2					
ANR	320738	ExpressionStatement	"arm_decode_shift ( given , func , stream , TRUE )"	4126:7:177402:177446	320407	1	True				
ANR	320739	CallExpression	"arm_decode_shift ( given , func , stream , TRUE )"		320407	0					
ANR	320740	Callee	arm_decode_shift		320407	0					
ANR	320741	Identifier	arm_decode_shift		320407	0					
ANR	320742	ArgumentList	given		320407	1					
ANR	320743	Argument	given		320407	0					
ANR	320744	Identifier	given		320407	0					
ANR	320745	Argument	func		320407	1					
ANR	320746	Identifier	func		320407	0					
ANR	320747	Argument	stream		320407	2					
ANR	320748	Identifier	stream		320407	0					
ANR	320749	Argument	TRUE		320407	3					
ANR	320750	Identifier	TRUE		320407	0					
ANR	320751	IfStatement	if ( NEGATIVE_BIT_SET )		320407	2					
ANR	320752	Condition	NEGATIVE_BIT_SET	4129:5:177463:177478	320407	0	True				
ANR	320753	Identifier	NEGATIVE_BIT_SET		320407	0					
ANR	320754	CompoundStatement		85:23:2018:2018	320407	1					
ANR	320755	ExpressionStatement	offset = - offset	4130:2:177485:177501	320407	0	True				
ANR	320756	AssignmentExpression	offset = - offset		320407	0		=			
ANR	320757	Identifier	offset		320407	0					
ANR	320758	UnaryOperationExpression	- offset		320407	1					
ANR	320759	UnaryOperator	-		320407	0					
ANR	320760	Identifier	offset		320407	1					
ANR	320761	ReturnStatement	return ( signed long ) offset ;	4134:2:177515:177542	320407	4	True				
ANR	320762	CastExpression	( signed long ) offset		320407	0					
ANR	320763	CastTarget	signed long		320407	0					
ANR	320764	Identifier	offset		320407	1					
ANR	320765	ReturnType	static signed long		320407	1					
ANR	320766	Identifier	print_arm_address		320407	2					
ANR	320767	ParameterList	"bfd_vma pc , struct disassemble_info * info , long given"		320407	3					
ANR	320768	Parameter	bfd_vma pc	4044:19:175407:175416	320407	0	True				
ANR	320769	ParameterType	bfd_vma		320407	0					
ANR	320770	Identifier	pc		320407	1					
ANR	320771	Parameter	struct disassemble_info * info	4044:31:175419:175447	320407	1	True				
ANR	320772	ParameterType	struct disassemble_info *		320407	0					
ANR	320773	Identifier	info		320407	1					
ANR	320774	Parameter	long given	4044:62:175450:175459	320407	2	True				
ANR	320775	ParameterType	long		320407	0					
ANR	320776	Identifier	given		320407	1					
ANR	320777	CFGEntryNode	ENTRY		320407		True				
ANR	320778	CFGExitNode	EXIT		320407		True				
ANR	320779	Symbol	given		320407						
ANR	320780	Symbol	NEGATIVE_BIT_SET		320407						
ANR	320781	Symbol	* arm_regnames		320407						
ANR	320782	Symbol	offset		320407						
ANR	320783	Symbol	TRUE		320407						
ANR	320784	Symbol	info -> stream		320407						
ANR	320785	Symbol	PRE_BIT_SET		320407						
ANR	320786	Symbol	info -> fprintf_func		320407						
ANR	320787	Symbol	WRITEBACK_BIT_SET		320407						
ANR	320788	Symbol	pc		320407						
ANR	320789	Symbol	func		320407						
ANR	320790	Symbol	stream		320407						
ANR	320791	Symbol	* given		320407						
ANR	320792	Symbol	* info		320407						
ANR	320793	Symbol	arm_regnames		320407						
ANR	320794	Symbol	info		320407						
ANR	320795	Function	print_insn_neon	4141:0:177696:190369							
ANR	320796	FunctionDef	"print_insn_neon (struct disassemble_info * info , long given , bfd_boolean thumb)"		320795	0					
ANR	320797	CompoundStatement		4143:0:177794:190369	320795	0					
ANR	320798	IdentifierDeclStatement	const struct opcode32 * insn ;	4144:2:177798:177825	320795	0	True				
ANR	320799	IdentifierDecl	* insn		320795	0					
ANR	320800	IdentifierDeclType	const struct opcode32 *		320795	0					
ANR	320801	Identifier	insn		320795	1					
ANR	320802	IdentifierDeclStatement	void * stream = info -> stream ;	4145:2:177829:177856	320795	1	True				
ANR	320803	IdentifierDecl	* stream = info -> stream		320795	0					
ANR	320804	IdentifierDeclType	void *		320795	0					
ANR	320805	Identifier	stream		320795	1					
ANR	320806	AssignmentExpression	* stream = info -> stream		320795	2		=			
ANR	320807	Identifier	stream		320795	0					
ANR	320808	PtrMemberAccess	info -> stream		320795	1					
ANR	320809	Identifier	info		320795	0					
ANR	320810	Identifier	stream		320795	1					
ANR	320811	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	4146:2:177860:177899	320795	2	True				
ANR	320812	IdentifierDecl	func = info -> fprintf_func		320795	0					
ANR	320813	IdentifierDeclType	fprintf_ftype		320795	0					
ANR	320814	Identifier	func		320795	1					
ANR	320815	AssignmentExpression	func = info -> fprintf_func		320795	2		=			
ANR	320816	Identifier	func		320795	0					
ANR	320817	PtrMemberAccess	info -> fprintf_func		320795	1					
ANR	320818	Identifier	info		320795	0					
ANR	320819	Identifier	fprintf_func		320795	1					
ANR	320820	IfStatement	if ( thumb )		320795	3					
ANR	320821	Condition	thumb	4148:6:177908:177912	320795	0	True				
ANR	320822	Identifier	thumb		320795	0					
ANR	320823	CompoundStatement		7:4:124:124	320795	1					
ANR	320824	IfStatement	if ( ( given & 0xef000000 ) == 0xef000000 )		320795	0					
ANR	320825	Condition	( given & 0xef000000 ) == 0xef000000	4150:10:177931:177964	320795	0	True				
ANR	320826	EqualityExpression	( given & 0xef000000 ) == 0xef000000		320795	0		==			
ANR	320827	BitAndExpression	given & 0xef000000		320795	0		&			
ANR	320828	Identifier	given		320795	0					
ANR	320829	PrimaryExpression	0xef000000		320795	1					
ANR	320830	PrimaryExpression	0xef000000		320795	1					
ANR	320831	CompoundStatement		11:3:247:286	320795	1					
ANR	320832	IdentifierDeclStatement	unsigned long bit28 = given & ( 1 << 28 ) ;	4153:3:178042:178081	320795	0	True				
ANR	320833	IdentifierDecl	bit28 = given & ( 1 << 28 )		320795	0					
ANR	320834	IdentifierDeclType	unsigned long		320795	0					
ANR	320835	Identifier	bit28		320795	1					
ANR	320836	AssignmentExpression	bit28 = given & ( 1 << 28 )		320795	2		=			
ANR	320837	Identifier	bit28		320795	0					
ANR	320838	BitAndExpression	given & ( 1 << 28 )		320795	1		&			
ANR	320839	Identifier	given		320795	0					
ANR	320840	ShiftExpression	1 << 28		320795	1		<<			
ANR	320841	PrimaryExpression	1		320795	0					
ANR	320842	PrimaryExpression	28		320795	1					
ANR	320843	ExpressionStatement	given &= 0x00ffffff	4155:3:178087:178106	320795	1	True				
ANR	320844	AssignmentExpression	given &= 0x00ffffff		320795	0		&=			
ANR	320845	Identifier	given		320795	0					
ANR	320846	PrimaryExpression	0x00ffffff		320795	1					
ANR	320847	IfStatement	if ( bit28 )		320795	2					
ANR	320848	Condition	bit28	4156:7:178115:178119	320795	0	True				
ANR	320849	Identifier	bit28		320795	0					
ANR	320850	CompoundStatement		14:14:327:327	320795	1					
ANR	320851	ExpressionStatement	given |= 0xf3000000	4157:4:178128:178147	320795	0	True				
ANR	320852	AssignmentExpression	given |= 0xf3000000		320795	0		|=			
ANR	320853	Identifier	given		320795	0					
ANR	320854	PrimaryExpression	0xf3000000		320795	1					
ANR	320855	ElseStatement	else		320795	0					
ANR	320856	CompoundStatement		16:10:364:364	320795	0					
ANR	320857	ExpressionStatement	given |= 0xf2000000	4159:4:178165:178184	320795	0	True				
ANR	320858	AssignmentExpression	given |= 0xf2000000		320795	0		|=			
ANR	320859	Identifier	given		320795	0					
ANR	320860	PrimaryExpression	0xf2000000		320795	1					
ANR	320861	ElseStatement	else		320795	0					
ANR	320862	IfStatement	if ( ( given & 0xff000000 ) == 0xf9000000 )		320795	0					
ANR	320863	Condition	( given & 0xff000000 ) == 0xf9000000	4161:17:178208:178241	320795	0	True				
ANR	320864	EqualityExpression	( given & 0xff000000 ) == 0xf9000000		320795	0		==			
ANR	320865	BitAndExpression	given & 0xff000000		320795	0		&			
ANR	320866	Identifier	given		320795	0					
ANR	320867	PrimaryExpression	0xff000000		320795	1					
ANR	320868	PrimaryExpression	0xf9000000		320795	1					
ANR	320869	CompoundStatement		19:53:449:449	320795	1					
ANR	320870	ExpressionStatement	given ^= 0xf9000000 ^ 0xf4000000	4162:7:178253:178285	320795	0	True				
ANR	320871	AssignmentExpression	given ^= 0xf9000000 ^ 0xf4000000		320795	0		^=			
ANR	320872	Identifier	given		320795	0					
ANR	320873	ExclusiveOrExpression	0xf9000000 ^ 0xf4000000		320795	1		^			
ANR	320874	PrimaryExpression	0xf9000000		320795	0					
ANR	320875	PrimaryExpression	0xf4000000		320795	1					
ANR	320876	ElseStatement	else		320795	0					
ANR	320877	CompoundStatement		21:13:505:505	320795	0					
ANR	320878	ReturnStatement	return FALSE ;	4164:7:178309:178321	320795	0	True				
ANR	320879	Identifier	FALSE		320795	0					
ANR	320880	ForStatement	for ( insn = neon_opcodes ; insn -> assembler ; insn ++ )		320795	4					
ANR	320881	ForInit	insn = neon_opcodes ;	4168:7:178345:178364	320795	0	True				
ANR	320882	AssignmentExpression	insn = neon_opcodes		320795	0		=			
ANR	320883	Identifier	insn		320795	0					
ANR	320884	Identifier	neon_opcodes		320795	1					
ANR	320885	Condition	insn -> assembler	4168:28:178366:178380	320795	1	True				
ANR	320886	PtrMemberAccess	insn -> assembler		320795	0					
ANR	320887	Identifier	insn		320795	0					
ANR	320888	Identifier	assembler		320795	1					
ANR	320889	PostIncDecOperationExpression	insn ++	4168:45:178383:178388	320795	2	True				
ANR	320890	Identifier	insn		320795	0					
ANR	320891	IncDec	++		320795	1					
ANR	320892	CompoundStatement		27:4:600:600	320795	3					
ANR	320893	IfStatement	if ( ( given & insn -> mask ) == insn -> value )		320795	0					
ANR	320894	Condition	( given & insn -> mask ) == insn -> value	4170:10:178407:178441	320795	0	True				
ANR	320895	EqualityExpression	( given & insn -> mask ) == insn -> value		320795	0		==			
ANR	320896	BitAndExpression	given & insn -> mask		320795	0		&			
ANR	320897	Identifier	given		320795	0					
ANR	320898	PtrMemberAccess	insn -> mask		320795	1					
ANR	320899	Identifier	insn		320795	0					
ANR	320900	Identifier	mask		320795	1					
ANR	320901	PtrMemberAccess	insn -> value		320795	1					
ANR	320902	Identifier	insn		320795	0					
ANR	320903	Identifier	value		320795	1					
ANR	320904	CompoundStatement		32:3:736:749	320795	1					
ANR	320905	IdentifierDeclStatement	bfd_boolean is_unpredictable = FALSE ;	4173:3:178490:178526	320795	0	True				
ANR	320906	IdentifierDecl	is_unpredictable = FALSE		320795	0					
ANR	320907	IdentifierDeclType	bfd_boolean		320795	0					
ANR	320908	Identifier	is_unpredictable		320795	1					
ANR	320909	AssignmentExpression	is_unpredictable = FALSE		320795	2		=			
ANR	320910	Identifier	FALSE		320795	0					
ANR	320911	Identifier	FALSE		320795	1					
ANR	320912	IdentifierDeclStatement	const char * c ;	4174:3:178531:178544	320795	1	True				
ANR	320913	IdentifierDecl	* c		320795	0					
ANR	320914	IdentifierDeclType	const char *		320795	0					
ANR	320915	Identifier	c		320795	1					
ANR	320916	ForStatement	for ( c = insn -> assembler ; * c ; c ++ )		320795	2					
ANR	320917	ForInit	c = insn -> assembler ;	4176:8:178555:178574	320795	0	True				
ANR	320918	AssignmentExpression	c = insn -> assembler		320795	0		=			
ANR	320919	Identifier	c		320795	0					
ANR	320920	PtrMemberAccess	insn -> assembler		320795	1					
ANR	320921	Identifier	insn		320795	0					
ANR	320922	Identifier	assembler		320795	1					
ANR	320923	Condition	* c	4176:29:178576:178577	320795	1	True				
ANR	320924	UnaryOperationExpression	* c		320795	0					
ANR	320925	UnaryOperator	*		320795	0					
ANR	320926	Identifier	c		320795	1					
ANR	320927	PostIncDecOperationExpression	c ++	4176:33:178580:178582	320795	2	True				
ANR	320928	Identifier	c		320795	0					
ANR	320929	IncDec	++		320795	1					
ANR	320930	CompoundStatement		35:5:795:795	320795	3					
ANR	320931	IfStatement	if ( * c == '%' )		320795	0					
ANR	320932	Condition	* c == '%'	4178:11:178603:178611	320795	0	True				
ANR	320933	EqualityExpression	* c == '%'		320795	0		==			
ANR	320934	UnaryOperationExpression	* c		320795	0					
ANR	320935	UnaryOperator	*		320795	0					
ANR	320936	Identifier	c		320795	1					
ANR	320937	PrimaryExpression	'%'		320795	1					
ANR	320938	CompoundStatement		37:2:821:821	320795	1					
ANR	320939	SwitchStatement	switch ( * ++ c )		320795	0					
ANR	320940	Condition	* ++ c	4180:12:178630:178633	320795	0	True				
ANR	320941	UnaryOperationExpression	* ++ c		320795	0					
ANR	320942	UnaryOperator	*		320795	0					
ANR	320943	UnaryExpression	++ c		320795	1					
ANR	320944	IncDec	++		320795	0					
ANR	320945	Identifier	c		320795	1					
ANR	320946	CompoundStatement		39:6:847:847	320795	1					
ANR	320947	Label	case '%' :	4182:6:178650:178658	320795	0	True				
ANR	320948	ExpressionStatement	"func ( stream , ""%%"" )"	4183:8:178668:178687	320795	1	True				
ANR	320949	CallExpression	"func ( stream , ""%%"" )"		320795	0					
ANR	320950	Callee	func		320795	0					
ANR	320951	Identifier	func		320795	0					
ANR	320952	ArgumentList	stream		320795	1					
ANR	320953	Argument	stream		320795	0					
ANR	320954	Identifier	stream		320795	0					
ANR	320955	Argument	"""%%"""		320795	1					
ANR	320956	PrimaryExpression	"""%%"""		320795	0					
ANR	320957	BreakStatement	break ;	4184:8:178697:178702	320795	2	True				
ANR	320958	Label	case 'u' :	4186:6:178711:178719	320795	3	True				
ANR	320959	IfStatement	if ( thumb && ifthen_state )		320795	4					
ANR	320960	Condition	thumb && ifthen_state	4187:11:178732:178752	320795	0	True				
ANR	320961	AndExpression	thumb && ifthen_state		320795	0		&&			
ANR	320962	Identifier	thumb		320795	0					
ANR	320963	Identifier	ifthen_state		320795	1					
ANR	320964	CompoundStatement		45:34:960:960	320795	1					
ANR	320965	ExpressionStatement	is_unpredictable = TRUE	4188:8:178765:178788	320795	0	True				
ANR	320966	AssignmentExpression	is_unpredictable = TRUE		320795	0		=			
ANR	320967	Identifier	is_unpredictable		320795	0					
ANR	320968	Identifier	TRUE		320795	1					
ANR	320969	Label	case 'c' :	4192:6:178834:178842	320795	5	True				
ANR	320970	IfStatement	if ( thumb && ifthen_state )		320795	6					
ANR	320971	Condition	thumb && ifthen_state	4193:11:178855:178875	320795	0	True				
ANR	320972	AndExpression	thumb && ifthen_state		320795	0		&&			
ANR	320973	Identifier	thumb		320795	0					
ANR	320974	Identifier	ifthen_state		320795	1					
ANR	320975	CompoundStatement		51:34:1083:1083	320795	1					
ANR	320976	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"	4194:8:178888:178937	320795	0	True				
ANR	320977	CallExpression	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"		320795	0					
ANR	320978	Callee	func		320795	0					
ANR	320979	Identifier	func		320795	0					
ANR	320980	ArgumentList	stream		320795	1					
ANR	320981	Argument	stream		320795	0					
ANR	320982	Identifier	stream		320795	0					
ANR	320983	Argument	"""%s"""		320795	1					
ANR	320984	PrimaryExpression	"""%s"""		320795	0					
ANR	320985	Argument	arm_conditional [ IFTHEN_COND ]		320795	2					
ANR	320986	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		320795	0					
ANR	320987	Identifier	arm_conditional		320795	0					
ANR	320988	Identifier	IFTHEN_COND		320795	1					
ANR	320989	BreakStatement	break ;	4196:7:178955:178960	320795	7	True				
ANR	320990	Label	case 'A' :	4198:6:178969:178977	320795	8	True				
ANR	320991	CompoundStatement		79:3:1770:1776	320795	9					
ANR	320992	Statement	static	4200:3:178992:178997	320795	0	True				
ANR	320993	IdentifierDeclStatement	"const unsigned char enc [ 16 ] = { 0x4 , 0x14 , 0x4 , 0x4 , 0x3 , 0x13 , 0x3 , 0x1 , 0x2 , 0x12 , 0x2 , 0 , 0 , 0 , 0 , 0 } ;"	4200:10:178999:179288	320795	1	True				
ANR	320994	IdentifierDecl	"enc [ 16 ] = { 0x4 , 0x14 , 0x4 , 0x4 , 0x3 , 0x13 , 0x3 , 0x1 , 0x2 , 0x12 , 0x2 , 0 , 0 , 0 , 0 , 0 }"		320795	0					
ANR	320995	IdentifierDeclType	const unsigned char [ 16 ]		320795	0					
ANR	320996	Identifier	enc		320795	1					
ANR	320997	PrimaryExpression	16		320795	2					
ANR	320998	AssignmentExpression	"enc [ 16 ] = { 0x4 , 0x14 , 0x4 , 0x4 , 0x3 , 0x13 , 0x3 , 0x1 , 0x2 , 0x12 , 0x2 , 0 , 0 , 0 , 0 , 0 }"		320795	3		=			
ANR	320999	Identifier	enc		320795	0					
ANR	321000	InitializerList	0x4		320795	1					
ANR	321001	PrimaryExpression	0x4		320795	0					
ANR	321002	PrimaryExpression	0x14		320795	1					
ANR	321003	PrimaryExpression	0x4		320795	2					
ANR	321004	PrimaryExpression	0x4		320795	3					
ANR	321005	PrimaryExpression	0x3		320795	4					
ANR	321006	PrimaryExpression	0x13		320795	5					
ANR	321007	PrimaryExpression	0x3		320795	6					
ANR	321008	PrimaryExpression	0x1		320795	7					
ANR	321009	PrimaryExpression	0x2		320795	8					
ANR	321010	PrimaryExpression	0x12		320795	9					
ANR	321011	PrimaryExpression	0x2		320795	10					
ANR	321012	PrimaryExpression	0		320795	11					
ANR	321013	PrimaryExpression	0		320795	12					
ANR	321014	PrimaryExpression	0		320795	13					
ANR	321015	PrimaryExpression	0		320795	14					
ANR	321016	PrimaryExpression	0		320795	15					
ANR	321017	IdentifierDeclStatement	int rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 ) ;	4214:3:179293:179352	320795	2	True				
ANR	321018	IdentifierDecl	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	0					
ANR	321019	IdentifierDeclType	int		320795	0					
ANR	321020	Identifier	rd		320795	1					
ANR	321021	AssignmentExpression	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	2		=			
ANR	321022	Identifier	rd		320795	0					
ANR	321023	InclusiveOrExpression	( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	1		|			
ANR	321024	BitAndExpression	( given >> 12 ) & 0xf		320795	0		&			
ANR	321025	ShiftExpression	given >> 12		320795	0		>>			
ANR	321026	Identifier	given		320795	0					
ANR	321027	PrimaryExpression	12		320795	1					
ANR	321028	PrimaryExpression	0xf		320795	1					
ANR	321029	ShiftExpression	( ( given >> 22 ) & 1 ) << 4		320795	1		<<			
ANR	321030	BitAndExpression	( given >> 22 ) & 1		320795	0		&			
ANR	321031	ShiftExpression	given >> 22		320795	0		>>			
ANR	321032	Identifier	given		320795	0					
ANR	321033	PrimaryExpression	22		320795	1					
ANR	321034	PrimaryExpression	1		320795	1					
ANR	321035	PrimaryExpression	4		320795	1					
ANR	321036	IdentifierDeclStatement	int rn = ( ( given >> 16 ) & 0xf ) ;	4215:3:179357:179387	320795	3	True				
ANR	321037	IdentifierDecl	rn = ( ( given >> 16 ) & 0xf )		320795	0					
ANR	321038	IdentifierDeclType	int		320795	0					
ANR	321039	Identifier	rn		320795	1					
ANR	321040	AssignmentExpression	rn = ( ( given >> 16 ) & 0xf )		320795	2		=			
ANR	321041	Identifier	rn		320795	0					
ANR	321042	BitAndExpression	( given >> 16 ) & 0xf		320795	1		&			
ANR	321043	ShiftExpression	given >> 16		320795	0		>>			
ANR	321044	Identifier	given		320795	0					
ANR	321045	PrimaryExpression	16		320795	1					
ANR	321046	PrimaryExpression	0xf		320795	1					
ANR	321047	IdentifierDeclStatement	int rm = ( ( given >> 0 ) & 0xf ) ;	4216:3:179392:179421	320795	4	True				
ANR	321048	IdentifierDecl	rm = ( ( given >> 0 ) & 0xf )		320795	0					
ANR	321049	IdentifierDeclType	int		320795	0					
ANR	321050	Identifier	rm		320795	1					
ANR	321051	AssignmentExpression	rm = ( ( given >> 0 ) & 0xf )		320795	2		=			
ANR	321052	Identifier	rm		320795	0					
ANR	321053	BitAndExpression	( given >> 0 ) & 0xf		320795	1		&			
ANR	321054	ShiftExpression	given >> 0		320795	0		>>			
ANR	321055	Identifier	given		320795	0					
ANR	321056	PrimaryExpression	0		320795	1					
ANR	321057	PrimaryExpression	0xf		320795	1					
ANR	321058	IdentifierDeclStatement	int align = ( ( given >> 4 ) & 0x3 ) ;	4217:3:179426:179458	320795	5	True				
ANR	321059	IdentifierDecl	align = ( ( given >> 4 ) & 0x3 )		320795	0					
ANR	321060	IdentifierDeclType	int		320795	0					
ANR	321061	Identifier	align		320795	1					
ANR	321062	AssignmentExpression	align = ( ( given >> 4 ) & 0x3 )		320795	2		=			
ANR	321063	Identifier	align		320795	0					
ANR	321064	BitAndExpression	( given >> 4 ) & 0x3		320795	1		&			
ANR	321065	ShiftExpression	given >> 4		320795	0		>>			
ANR	321066	Identifier	given		320795	0					
ANR	321067	PrimaryExpression	4		320795	1					
ANR	321068	PrimaryExpression	0x3		320795	1					
ANR	321069	IdentifierDeclStatement	int type = ( ( given >> 8 ) & 0xf ) ;	4218:3:179463:179494	320795	6	True				
ANR	321070	IdentifierDecl	type = ( ( given >> 8 ) & 0xf )		320795	0					
ANR	321071	IdentifierDeclType	int		320795	0					
ANR	321072	Identifier	type		320795	1					
ANR	321073	AssignmentExpression	type = ( ( given >> 8 ) & 0xf )		320795	2		=			
ANR	321074	Identifier	type		320795	0					
ANR	321075	BitAndExpression	( given >> 8 ) & 0xf		320795	1		&			
ANR	321076	ShiftExpression	given >> 8		320795	0		>>			
ANR	321077	Identifier	given		320795	0					
ANR	321078	PrimaryExpression	8		320795	1					
ANR	321079	PrimaryExpression	0xf		320795	1					
ANR	321080	IdentifierDeclStatement	int n = enc [ type ] & 0xf ;	4219:3:179499:179522	320795	7	True				
ANR	321081	IdentifierDecl	n = enc [ type ] & 0xf		320795	0					
ANR	321082	IdentifierDeclType	int		320795	0					
ANR	321083	Identifier	n		320795	1					
ANR	321084	AssignmentExpression	n = enc [ type ] & 0xf		320795	2		=			
ANR	321085	Identifier	n		320795	0					
ANR	321086	BitAndExpression	enc [ type ] & 0xf		320795	1		&			
ANR	321087	ArrayIndexing	enc [ type ]		320795	0					
ANR	321088	Identifier	enc		320795	0					
ANR	321089	Identifier	type		320795	1					
ANR	321090	PrimaryExpression	0xf		320795	1					
ANR	321091	IdentifierDeclStatement	int stride = ( enc [ type ] >> 4 ) + 1 ;	4220:3:179527:179560	320795	8	True				
ANR	321092	IdentifierDecl	stride = ( enc [ type ] >> 4 ) + 1		320795	0					
ANR	321093	IdentifierDeclType	int		320795	0					
ANR	321094	Identifier	stride		320795	1					
ANR	321095	AssignmentExpression	stride = ( enc [ type ] >> 4 ) + 1		320795	2		=			
ANR	321096	Identifier	stride		320795	0					
ANR	321097	AdditiveExpression	( enc [ type ] >> 4 ) + 1		320795	1		+			
ANR	321098	ShiftExpression	enc [ type ] >> 4		320795	0		>>			
ANR	321099	ArrayIndexing	enc [ type ]		320795	0					
ANR	321100	Identifier	enc		320795	0					
ANR	321101	Identifier	type		320795	1					
ANR	321102	PrimaryExpression	4		320795	1					
ANR	321103	PrimaryExpression	1		320795	1					
ANR	321104	IdentifierDeclStatement	int ix ;	4221:3:179565:179571	320795	9	True				
ANR	321105	IdentifierDecl	ix		320795	0					
ANR	321106	IdentifierDeclType	int		320795	0					
ANR	321107	Identifier	ix		320795	1					
ANR	321108	ExpressionStatement	"func ( stream , ""{"" )"	4223:3:179577:179595	320795	10	True				
ANR	321109	CallExpression	"func ( stream , ""{"" )"		320795	0					
ANR	321110	Callee	func		320795	0					
ANR	321111	Identifier	func		320795	0					
ANR	321112	ArgumentList	stream		320795	1					
ANR	321113	Argument	stream		320795	0					
ANR	321114	Identifier	stream		320795	0					
ANR	321115	Argument	"""{"""		320795	1					
ANR	321116	PrimaryExpression	"""{"""		320795	0					
ANR	321117	IfStatement	if ( stride > 1 )		320795	11					
ANR	321118	Condition	stride > 1	4224:7:179604:179613	320795	0	True				
ANR	321119	RelationalExpression	stride > 1		320795	0		>			
ANR	321120	Identifier	stride		320795	0					
ANR	321121	PrimaryExpression	1		320795	1					
ANR	321122	CompoundStatement		82:19:1821:1821	320795	1					
ANR	321123	ForStatement	for ( ix = 0 ; ix != n ; ix ++ )		320795	0					
ANR	321124	ForInit	ix = 0 ;	4225:9:179627:179633	320795	0	True				
ANR	321125	AssignmentExpression	ix = 0		320795	0		=			
ANR	321126	Identifier	ix		320795	0					
ANR	321127	PrimaryExpression	0		320795	1					
ANR	321128	Condition	ix != n	4225:17:179635:179641	320795	1	True				
ANR	321129	EqualityExpression	ix != n		320795	0		!=			
ANR	321130	Identifier	ix		320795	0					
ANR	321131	Identifier	n		320795	1					
ANR	321132	PostIncDecOperationExpression	ix ++	4225:26:179644:179647	320795	2	True				
ANR	321133	Identifier	ix		320795	0					
ANR	321134	IncDec	++		320795	1					
ANR	321135	CompoundStatement		83:32:1855:1855	320795	3					
ANR	321136	ExpressionStatement	"func ( stream , ""%sd%d"" , ix ? "","" : """" , rd + ix * stride )"	4226:5:179657:179712	320795	0	True				
ANR	321137	CallExpression	"func ( stream , ""%sd%d"" , ix ? "","" : """" , rd + ix * stride )"		320795	0					
ANR	321138	Callee	func		320795	0					
ANR	321139	Identifier	func		320795	0					
ANR	321140	ArgumentList	stream		320795	1					
ANR	321141	Argument	stream		320795	0					
ANR	321142	Identifier	stream		320795	0					
ANR	321143	Argument	"""%sd%d"""		320795	1					
ANR	321144	PrimaryExpression	"""%sd%d"""		320795	0					
ANR	321145	Argument	"ix ? "","" : """""		320795	2					
ANR	321146	ConditionalExpression	"ix ? "","" : """""		320795	0					
ANR	321147	Condition	ix		320795	0					
ANR	321148	Identifier	ix		320795	0					
ANR	321149	PrimaryExpression	""","""		320795	1					
ANR	321150	PrimaryExpression	""""""		320795	2					
ANR	321151	Argument	rd + ix * stride		320795	3					
ANR	321152	AdditiveExpression	rd + ix * stride		320795	0		+			
ANR	321153	Identifier	rd		320795	0					
ANR	321154	MultiplicativeExpression	ix * stride		320795	1		*			
ANR	321155	Identifier	ix		320795	0					
ANR	321156	Identifier	stride		320795	1					
ANR	321157	ElseStatement	else		320795	0					
ANR	321158	IfStatement	if ( n == 1 )		320795	0					
ANR	321159	Condition	n == 1	4228:14:179734:179739	320795	0	True				
ANR	321160	EqualityExpression	n == 1		320795	0		==			
ANR	321161	Identifier	n		320795	0					
ANR	321162	PrimaryExpression	1		320795	1					
ANR	321163	CompoundStatement		86:22:1947:1947	320795	1					
ANR	321164	ExpressionStatement	"func ( stream , ""d%d"" , rd )"	4229:4:179748:179772	320795	0	True				
ANR	321165	CallExpression	"func ( stream , ""d%d"" , rd )"		320795	0					
ANR	321166	Callee	func		320795	0					
ANR	321167	Identifier	func		320795	0					
ANR	321168	ArgumentList	stream		320795	1					
ANR	321169	Argument	stream		320795	0					
ANR	321170	Identifier	stream		320795	0					
ANR	321171	Argument	"""d%d"""		320795	1					
ANR	321172	PrimaryExpression	"""d%d"""		320795	0					
ANR	321173	Argument	rd		320795	2					
ANR	321174	Identifier	rd		320795	0					
ANR	321175	ElseStatement	else		320795	0					
ANR	321176	CompoundStatement		88:10:1989:1989	320795	0					
ANR	321177	ExpressionStatement	"func ( stream , ""d%d-d%d"" , rd , rd + n - 1 )"	4231:4:179790:179830	320795	0	True				
ANR	321178	CallExpression	"func ( stream , ""d%d-d%d"" , rd , rd + n - 1 )"		320795	0					
ANR	321179	Callee	func		320795	0					
ANR	321180	Identifier	func		320795	0					
ANR	321181	ArgumentList	stream		320795	1					
ANR	321182	Argument	stream		320795	0					
ANR	321183	Identifier	stream		320795	0					
ANR	321184	Argument	"""d%d-d%d"""		320795	1					
ANR	321185	PrimaryExpression	"""d%d-d%d"""		320795	0					
ANR	321186	Argument	rd		320795	2					
ANR	321187	Identifier	rd		320795	0					
ANR	321188	Argument	rd + n - 1		320795	3					
ANR	321189	AdditiveExpression	rd + n - 1		320795	0		+			
ANR	321190	Identifier	rd		320795	0					
ANR	321191	AdditiveExpression	n - 1		320795	1		-			
ANR	321192	Identifier	n		320795	0					
ANR	321193	PrimaryExpression	1		320795	1					
ANR	321194	ExpressionStatement	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"	4233:3:179840:179881	320795	12	True				
ANR	321195	CallExpression	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"		320795	0					
ANR	321196	Callee	func		320795	0					
ANR	321197	Identifier	func		320795	0					
ANR	321198	ArgumentList	stream		320795	1					
ANR	321199	Argument	stream		320795	0					
ANR	321200	Identifier	stream		320795	0					
ANR	321201	Argument	"""}, [%s"""		320795	1					
ANR	321202	PrimaryExpression	"""}, [%s"""		320795	0					
ANR	321203	Argument	arm_regnames [ rn ]		320795	2					
ANR	321204	ArrayIndexing	arm_regnames [ rn ]		320795	0					
ANR	321205	Identifier	arm_regnames		320795	0					
ANR	321206	Identifier	rn		320795	1					
ANR	321207	IfStatement	if ( align )		320795	13					
ANR	321208	Condition	align	4234:7:179890:179894	320795	0	True				
ANR	321209	Identifier	align		320795	0					
ANR	321210	CompoundStatement		92:14:2102:2102	320795	1					
ANR	321211	ExpressionStatement	"func ( stream , "" :%d"" , 32 << align )"	4235:4:179903:179937	320795	0	True				
ANR	321212	CallExpression	"func ( stream , "" :%d"" , 32 << align )"		320795	0					
ANR	321213	Callee	func		320795	0					
ANR	321214	Identifier	func		320795	0					
ANR	321215	ArgumentList	stream		320795	1					
ANR	321216	Argument	stream		320795	0					
ANR	321217	Identifier	stream		320795	0					
ANR	321218	Argument	""" :%d"""		320795	1					
ANR	321219	PrimaryExpression	""" :%d"""		320795	0					
ANR	321220	Argument	32 << align		320795	2					
ANR	321221	ShiftExpression	32 << align		320795	0		<<			
ANR	321222	PrimaryExpression	32		320795	0					
ANR	321223	Identifier	align		320795	1					
ANR	321224	ExpressionStatement	"func ( stream , ""]"" )"	4237:3:179947:179965	320795	14	True				
ANR	321225	CallExpression	"func ( stream , ""]"" )"		320795	0					
ANR	321226	Callee	func		320795	0					
ANR	321227	Identifier	func		320795	0					
ANR	321228	ArgumentList	stream		320795	1					
ANR	321229	Argument	stream		320795	0					
ANR	321230	Identifier	stream		320795	0					
ANR	321231	Argument	"""]"""		320795	1					
ANR	321232	PrimaryExpression	"""]"""		320795	0					
ANR	321233	IfStatement	if ( rm == 0xd )		320795	15					
ANR	321234	Condition	rm == 0xd	4238:7:179974:179982	320795	0	True				
ANR	321235	EqualityExpression	rm == 0xd		320795	0		==			
ANR	321236	Identifier	rm		320795	0					
ANR	321237	PrimaryExpression	0xd		320795	1					
ANR	321238	CompoundStatement		96:18:2190:2190	320795	1					
ANR	321239	ExpressionStatement	"func ( stream , ""!"" )"	4239:4:179991:180009	320795	0	True				
ANR	321240	CallExpression	"func ( stream , ""!"" )"		320795	0					
ANR	321241	Callee	func		320795	0					
ANR	321242	Identifier	func		320795	0					
ANR	321243	ArgumentList	stream		320795	1					
ANR	321244	Argument	stream		320795	0					
ANR	321245	Identifier	stream		320795	0					
ANR	321246	Argument	"""!"""		320795	1					
ANR	321247	PrimaryExpression	"""!"""		320795	0					
ANR	321248	ElseStatement	else		320795	0					
ANR	321249	IfStatement	if ( rm != 0xf )		320795	0					
ANR	321250	Condition	rm != 0xf	4240:14:180025:180033	320795	0	True				
ANR	321251	EqualityExpression	rm != 0xf		320795	0		!=			
ANR	321252	Identifier	rm		320795	0					
ANR	321253	PrimaryExpression	0xf		320795	1					
ANR	321254	CompoundStatement		98:25:2241:2241	320795	1					
ANR	321255	ExpressionStatement	"func ( stream , "", %s"" , arm_regnames [ rm ] )"	4241:4:180042:180081	320795	0	True				
ANR	321256	CallExpression	"func ( stream , "", %s"" , arm_regnames [ rm ] )"		320795	0					
ANR	321257	Callee	func		320795	0					
ANR	321258	Identifier	func		320795	0					
ANR	321259	ArgumentList	stream		320795	1					
ANR	321260	Argument	stream		320795	0					
ANR	321261	Identifier	stream		320795	0					
ANR	321262	Argument	""", %s"""		320795	1					
ANR	321263	PrimaryExpression	""", %s"""		320795	0					
ANR	321264	Argument	arm_regnames [ rm ]		320795	2					
ANR	321265	ArrayIndexing	arm_regnames [ rm ]		320795	0					
ANR	321266	Identifier	arm_regnames		320795	0					
ANR	321267	Identifier	rm		320795	1					
ANR	321268	BreakStatement	break ;	4244:8:180106:180111	320795	10	True				
ANR	321269	Label	case 'B' :	4246:6:180120:180128	320795	11	True				
ANR	321270	CompoundStatement		115:24:2758:2763	320795	12					
ANR	321271	IdentifierDeclStatement	int rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 ) ;	4248:3:180143:180202	320795	0	True				
ANR	321272	IdentifierDecl	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	0					
ANR	321273	IdentifierDeclType	int		320795	0					
ANR	321274	Identifier	rd		320795	1					
ANR	321275	AssignmentExpression	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	2		=			
ANR	321276	Identifier	rd		320795	0					
ANR	321277	InclusiveOrExpression	( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	1		|			
ANR	321278	BitAndExpression	( given >> 12 ) & 0xf		320795	0		&			
ANR	321279	ShiftExpression	given >> 12		320795	0		>>			
ANR	321280	Identifier	given		320795	0					
ANR	321281	PrimaryExpression	12		320795	1					
ANR	321282	PrimaryExpression	0xf		320795	1					
ANR	321283	ShiftExpression	( ( given >> 22 ) & 1 ) << 4		320795	1		<<			
ANR	321284	BitAndExpression	( given >> 22 ) & 1		320795	0		&			
ANR	321285	ShiftExpression	given >> 22		320795	0		>>			
ANR	321286	Identifier	given		320795	0					
ANR	321287	PrimaryExpression	22		320795	1					
ANR	321288	PrimaryExpression	1		320795	1					
ANR	321289	PrimaryExpression	4		320795	1					
ANR	321290	IdentifierDeclStatement	int rn = ( ( given >> 16 ) & 0xf ) ;	4249:3:180207:180237	320795	1	True				
ANR	321291	IdentifierDecl	rn = ( ( given >> 16 ) & 0xf )		320795	0					
ANR	321292	IdentifierDeclType	int		320795	0					
ANR	321293	Identifier	rn		320795	1					
ANR	321294	AssignmentExpression	rn = ( ( given >> 16 ) & 0xf )		320795	2		=			
ANR	321295	Identifier	rn		320795	0					
ANR	321296	BitAndExpression	( given >> 16 ) & 0xf		320795	1		&			
ANR	321297	ShiftExpression	given >> 16		320795	0		>>			
ANR	321298	Identifier	given		320795	0					
ANR	321299	PrimaryExpression	16		320795	1					
ANR	321300	PrimaryExpression	0xf		320795	1					
ANR	321301	IdentifierDeclStatement	int rm = ( ( given >> 0 ) & 0xf ) ;	4250:3:180242:180271	320795	2	True				
ANR	321302	IdentifierDecl	rm = ( ( given >> 0 ) & 0xf )		320795	0					
ANR	321303	IdentifierDeclType	int		320795	0					
ANR	321304	Identifier	rm		320795	1					
ANR	321305	AssignmentExpression	rm = ( ( given >> 0 ) & 0xf )		320795	2		=			
ANR	321306	Identifier	rm		320795	0					
ANR	321307	BitAndExpression	( given >> 0 ) & 0xf		320795	1		&			
ANR	321308	ShiftExpression	given >> 0		320795	0		>>			
ANR	321309	Identifier	given		320795	0					
ANR	321310	PrimaryExpression	0		320795	1					
ANR	321311	PrimaryExpression	0xf		320795	1					
ANR	321312	IdentifierDeclStatement	int idx_align = ( ( given >> 4 ) & 0xf ) ;	4251:3:180276:180312	320795	3	True				
ANR	321313	IdentifierDecl	idx_align = ( ( given >> 4 ) & 0xf )		320795	0					
ANR	321314	IdentifierDeclType	int		320795	0					
ANR	321315	Identifier	idx_align		320795	1					
ANR	321316	AssignmentExpression	idx_align = ( ( given >> 4 ) & 0xf )		320795	2		=			
ANR	321317	Identifier	idx_align		320795	0					
ANR	321318	BitAndExpression	( given >> 4 ) & 0xf		320795	1		&			
ANR	321319	ShiftExpression	given >> 4		320795	0		>>			
ANR	321320	Identifier	given		320795	0					
ANR	321321	PrimaryExpression	4		320795	1					
ANR	321322	PrimaryExpression	0xf		320795	1					
ANR	321323	IdentifierDeclStatement	int align = 0 ;	4252:24:180338:180351	320795	4	True				
ANR	321324	IdentifierDecl	align = 0		320795	0					
ANR	321325	IdentifierDeclType	int		320795	0					
ANR	321326	Identifier	align		320795	1					
ANR	321327	AssignmentExpression	align = 0		320795	2		=			
ANR	321328	Identifier	align		320795	0					
ANR	321329	PrimaryExpression	0		320795	1					
ANR	321330	IdentifierDeclStatement	int size = ( ( given >> 10 ) & 0x3 ) ;	4253:3:180356:180388	320795	5	True				
ANR	321331	IdentifierDecl	size = ( ( given >> 10 ) & 0x3 )		320795	0					
ANR	321332	IdentifierDeclType	int		320795	0					
ANR	321333	Identifier	size		320795	1					
ANR	321334	AssignmentExpression	size = ( ( given >> 10 ) & 0x3 )		320795	2		=			
ANR	321335	Identifier	size		320795	0					
ANR	321336	BitAndExpression	( given >> 10 ) & 0x3		320795	1		&			
ANR	321337	ShiftExpression	given >> 10		320795	0		>>			
ANR	321338	Identifier	given		320795	0					
ANR	321339	PrimaryExpression	10		320795	1					
ANR	321340	PrimaryExpression	0x3		320795	1					
ANR	321341	IdentifierDeclStatement	int idx = idx_align >> ( size + 1 ) ;	4254:3:180393:180426	320795	6	True				
ANR	321342	IdentifierDecl	idx = idx_align >> ( size + 1 )		320795	0					
ANR	321343	IdentifierDeclType	int		320795	0					
ANR	321344	Identifier	idx		320795	1					
ANR	321345	AssignmentExpression	idx = idx_align >> ( size + 1 )		320795	2		=			
ANR	321346	Identifier	idx		320795	0					
ANR	321347	ShiftExpression	idx_align >> ( size + 1 )		320795	1		>>			
ANR	321348	Identifier	idx_align		320795	0					
ANR	321349	AdditiveExpression	size + 1		320795	1		+			
ANR	321350	Identifier	size		320795	0					
ANR	321351	PrimaryExpression	1		320795	1					
ANR	321352	IdentifierDeclStatement	int length = ( ( given >> 8 ) & 3 ) + 1 ;	4255:24:180452:180487	320795	7	True				
ANR	321353	IdentifierDecl	length = ( ( given >> 8 ) & 3 ) + 1		320795	0					
ANR	321354	IdentifierDeclType	int		320795	0					
ANR	321355	Identifier	length		320795	1					
ANR	321356	AssignmentExpression	length = ( ( given >> 8 ) & 3 ) + 1		320795	2		=			
ANR	321357	Identifier	length		320795	0					
ANR	321358	AdditiveExpression	( ( given >> 8 ) & 3 ) + 1		320795	1		+			
ANR	321359	BitAndExpression	( given >> 8 ) & 3		320795	0		&			
ANR	321360	ShiftExpression	given >> 8		320795	0		>>			
ANR	321361	Identifier	given		320795	0					
ANR	321362	PrimaryExpression	8		320795	1					
ANR	321363	PrimaryExpression	3		320795	1					
ANR	321364	PrimaryExpression	1		320795	1					
ANR	321365	IdentifierDeclStatement	int stride = 1 ;	4256:24:180513:180527	320795	8	True				
ANR	321366	IdentifierDecl	stride = 1		320795	0					
ANR	321367	IdentifierDeclType	int		320795	0					
ANR	321368	Identifier	stride		320795	1					
ANR	321369	AssignmentExpression	stride = 1		320795	2		=			
ANR	321370	Identifier	stride		320795	0					
ANR	321371	PrimaryExpression	1		320795	1					
ANR	321372	IdentifierDeclStatement	int i ;	4257:24:180553:180558	320795	9	True				
ANR	321373	IdentifierDecl	i		320795	0					
ANR	321374	IdentifierDeclType	int		320795	0					
ANR	321375	Identifier	i		320795	1					
ANR	321376	IfStatement	if ( length > 1 && size > 0 )		320795	10					
ANR	321377	Condition	length > 1 && size > 0	4259:7:180568:180589	320795	0	True				
ANR	321378	AndExpression	length > 1 && size > 0		320795	0		&&			
ANR	321379	RelationalExpression	length > 1		320795	0		>			
ANR	321380	Identifier	length		320795	0					
ANR	321381	PrimaryExpression	1		320795	1					
ANR	321382	RelationalExpression	size > 0		320795	1		>			
ANR	321383	Identifier	size		320795	0					
ANR	321384	PrimaryExpression	0		320795	1					
ANR	321385	CompoundStatement		117:31:2797:2797	320795	1					
ANR	321386	ExpressionStatement	stride = ( idx_align & ( 1 << size ) ) ? 2 : 1	4260:4:180598:180640	320795	0	True				
ANR	321387	AssignmentExpression	stride = ( idx_align & ( 1 << size ) ) ? 2 : 1		320795	0		=			
ANR	321388	Identifier	stride		320795	0					
ANR	321389	ConditionalExpression	( idx_align & ( 1 << size ) ) ? 2 : 1		320795	1					
ANR	321390	Condition	idx_align & ( 1 << size )		320795	0					
ANR	321391	BitAndExpression	idx_align & ( 1 << size )		320795	0		&			
ANR	321392	Identifier	idx_align		320795	0					
ANR	321393	ShiftExpression	1 << size		320795	1		<<			
ANR	321394	PrimaryExpression	1		320795	0					
ANR	321395	Identifier	size		320795	1					
ANR	321396	PrimaryExpression	2		320795	1					
ANR	321397	PrimaryExpression	1		320795	2					
ANR	321398	SwitchStatement	switch ( length )		320795	11					
ANR	321399	Condition	length	4263:11:180659:180664	320795	0	True				
ANR	321400	Identifier	length		320795	0					
ANR	321401	CompoundStatement		122:26:2898:2898	320795	1					
ANR	321402	Label	case 1 :	4265:26:180721:180727	320795	0	True				
ANR	321403	CompoundStatement		125:30:2994:3021	320795	1					
ANR	321404	IdentifierDeclStatement	int amask = ( 1 << size ) - 1 ;	4267:30:180789:180816	320795	0	True				
ANR	321405	IdentifierDecl	amask = ( 1 << size ) - 1		320795	0					
ANR	321406	IdentifierDeclType	int		320795	0					
ANR	321407	Identifier	amask		320795	1					
ANR	321408	AssignmentExpression	amask = ( 1 << size ) - 1		320795	2		=			
ANR	321409	Identifier	amask		320795	0					
ANR	321410	AdditiveExpression	( 1 << size ) - 1		320795	1		-			
ANR	321411	ShiftExpression	1 << size		320795	0		<<			
ANR	321412	PrimaryExpression	1		320795	0					
ANR	321413	Identifier	size		320795	1					
ANR	321414	PrimaryExpression	1		320795	1					
ANR	321415	IfStatement	if ( ( idx_align & ( 1 << size ) ) != 0 )		320795	1					
ANR	321416	Condition	( idx_align & ( 1 << size ) ) != 0	4268:13:180831:180860	320795	0	True				
ANR	321417	EqualityExpression	( idx_align & ( 1 << size ) ) != 0		320795	0		!=			
ANR	321418	BitAndExpression	idx_align & ( 1 << size )		320795	0		&			
ANR	321419	Identifier	idx_align		320795	0					
ANR	321420	ShiftExpression	1 << size		320795	1		<<			
ANR	321421	PrimaryExpression	1		320795	0					
ANR	321422	Identifier	size		320795	1					
ANR	321423	PrimaryExpression	0		320795	1					
ANR	321424	CompoundStatement		126:45:3068:3068	320795	1					
ANR	321425	ReturnStatement	return FALSE ;	4269:10:180875:180887	320795	0	True				
ANR	321426	Identifier	FALSE		320795	0					
ANR	321427	IfStatement	if ( size > 0 )		320795	2					
ANR	321428	Condition	size > 0	4271:13:180913:180920	320795	0	True				
ANR	321429	RelationalExpression	size > 0		320795	0		>			
ANR	321430	Identifier	size		320795	0					
ANR	321431	PrimaryExpression	0		320795	1					
ANR	321432	CompoundStatement		130:32:3160:3160	320795	1					
ANR	321433	IfStatement	if ( ( idx_align & amask ) == amask )		320795	0					
ANR	321434	Condition	( idx_align & amask ) == amask	4273:14:180971:180998	320795	0	True				
ANR	321435	EqualityExpression	( idx_align & amask ) == amask		320795	0		==			
ANR	321436	BitAndExpression	idx_align & amask		320795	0		&			
ANR	321437	Identifier	idx_align		320795	0					
ANR	321438	Identifier	amask		320795	1					
ANR	321439	Identifier	amask		320795	1					
ANR	321440	CompoundStatement		131:44:3206:3206	320795	1					
ANR	321441	ExpressionStatement	align = 8 << size	4274:11:181014:181031	320795	0	True				
ANR	321442	AssignmentExpression	align = 8 << size		320795	0		=			
ANR	321443	Identifier	align		320795	0					
ANR	321444	ShiftExpression	8 << size		320795	1		<<			
ANR	321445	PrimaryExpression	8		320795	0					
ANR	321446	Identifier	size		320795	1					
ANR	321447	ElseStatement	else		320795	0					
ANR	321448	IfStatement	if ( ( idx_align & amask ) != 0 )		320795	0					
ANR	321449	Condition	( idx_align & amask ) != 0	4275:21:181054:181077	320795	0	True				
ANR	321450	EqualityExpression	( idx_align & amask ) != 0		320795	0		!=			
ANR	321451	BitAndExpression	idx_align & amask		320795	0		&			
ANR	321452	Identifier	idx_align		320795	0					
ANR	321453	Identifier	amask		320795	1					
ANR	321454	PrimaryExpression	0		320795	1					
ANR	321455	CompoundStatement		133:47:3285:3285	320795	1					
ANR	321456	ReturnStatement	return FALSE ;	4276:11:181093:181105	320795	0	True				
ANR	321457	Identifier	FALSE		320795	0					
ANR	321458	BreakStatement	break ;	4280:28:181185:181190	320795	2	True				
ANR	321459	Label	case 2 :	4282:26:181219:181225	320795	3	True				
ANR	321460	IfStatement	if ( size == 2 && ( idx_align & 2 ) != 0 )		320795	4					
ANR	321461	Condition	size == 2 && ( idx_align & 2 ) != 0	4283:10:181237:181269	320795	0	True				
ANR	321462	AndExpression	size == 2 && ( idx_align & 2 ) != 0		320795	0		&&			
ANR	321463	EqualityExpression	size == 2		320795	0		==			
ANR	321464	Identifier	size		320795	0					
ANR	321465	PrimaryExpression	2		320795	1					
ANR	321466	EqualityExpression	( idx_align & 2 ) != 0		320795	1		!=			
ANR	321467	BitAndExpression	idx_align & 2		320795	0		&			
ANR	321468	Identifier	idx_align		320795	0					
ANR	321469	PrimaryExpression	2		320795	1					
ANR	321470	PrimaryExpression	0		320795	1					
ANR	321471	CompoundStatement		141:45:3477:3477	320795	1					
ANR	321472	ReturnStatement	return FALSE ;	4284:7:181281:181293	320795	0	True				
ANR	321473	Identifier	FALSE		320795	0					
ANR	321474	ExpressionStatement	align = ( idx_align & 1 ) ? 16 << size : 0	4286:6:181309:181349	320795	5	True				
ANR	321475	AssignmentExpression	align = ( idx_align & 1 ) ? 16 << size : 0		320795	0		=			
ANR	321476	Identifier	align		320795	0					
ANR	321477	ConditionalExpression	( idx_align & 1 ) ? 16 << size : 0		320795	1					
ANR	321478	Condition	idx_align & 1		320795	0					
ANR	321479	BitAndExpression	idx_align & 1		320795	0		&			
ANR	321480	Identifier	idx_align		320795	0					
ANR	321481	PrimaryExpression	1		320795	1					
ANR	321482	ShiftExpression	16 << size		320795	1		<<			
ANR	321483	PrimaryExpression	16		320795	0					
ANR	321484	Identifier	size		320795	1					
ANR	321485	PrimaryExpression	0		320795	2					
ANR	321486	BreakStatement	break ;	4287:6:181357:181362	320795	6	True				
ANR	321487	Label	case 3 :	4289:26:181391:181397	320795	7	True				
ANR	321488	IfStatement	if ( ( size == 2 && ( idx_align & 3 ) != 0 ) || ( idx_align & 1 ) != 0 )		320795	8					
ANR	321489	Condition	( size == 2 && ( idx_align & 3 ) != 0 ) || ( idx_align & 1 ) != 0	4290:10:181409:181467	320795	0	True				
ANR	321490	OrExpression	( size == 2 && ( idx_align & 3 ) != 0 ) || ( idx_align & 1 ) != 0		320795	0		||			
ANR	321491	AndExpression	size == 2 && ( idx_align & 3 ) != 0		320795	0		&&			
ANR	321492	EqualityExpression	size == 2		320795	0		==			
ANR	321493	Identifier	size		320795	0					
ANR	321494	PrimaryExpression	2		320795	1					
ANR	321495	EqualityExpression	( idx_align & 3 ) != 0		320795	1		!=			
ANR	321496	BitAndExpression	idx_align & 3		320795	0		&			
ANR	321497	Identifier	idx_align		320795	0					
ANR	321498	PrimaryExpression	3		320795	1					
ANR	321499	PrimaryExpression	0		320795	1					
ANR	321500	EqualityExpression	( idx_align & 1 ) != 0		320795	1		!=			
ANR	321501	BitAndExpression	idx_align & 1		320795	0		&			
ANR	321502	Identifier	idx_align		320795	0					
ANR	321503	PrimaryExpression	1		320795	1					
ANR	321504	PrimaryExpression	0		320795	1					
ANR	321505	CompoundStatement		148:71:3675:3675	320795	1					
ANR	321506	ReturnStatement	return FALSE ;	4291:7:181479:181491	320795	0	True				
ANR	321507	Identifier	FALSE		320795	0					
ANR	321508	BreakStatement	break ;	4293:6:181507:181512	320795	9	True				
ANR	321509	Label	case 4 :	4295:26:181541:181547	320795	10	True				
ANR	321510	IfStatement	if ( size == 2 )		320795	11					
ANR	321511	Condition	size == 2	4296:32:181581:181589	320795	0	True				
ANR	321512	EqualityExpression	size == 2		320795	0		==			
ANR	321513	Identifier	size		320795	0					
ANR	321514	PrimaryExpression	2		320795	1					
ANR	321515	CompoundStatement		155:30:3827:3827	320795	1					
ANR	321516	IfStatement	if ( ( idx_align & 3 ) == 3 )		320795	0					
ANR	321517	Condition	( idx_align & 3 ) == 3	4298:12:181636:181655	320795	0	True				
ANR	321518	EqualityExpression	( idx_align & 3 ) == 3		320795	0		==			
ANR	321519	BitAndExpression	idx_align & 3		320795	0		&			
ANR	321520	Identifier	idx_align		320795	0					
ANR	321521	PrimaryExpression	3		320795	1					
ANR	321522	PrimaryExpression	3		320795	1					
ANR	321523	CompoundStatement		156:34:3863:3863	320795	1					
ANR	321524	ReturnStatement	return FALSE ;	4299:9:181669:181681	320795	0	True				
ANR	321525	Identifier	FALSE		320795	0					
ANR	321526	ExpressionStatement	align = ( idx_align & 3 ) * 64	4301:8:181701:181729	320795	1	True				
ANR	321527	AssignmentExpression	align = ( idx_align & 3 ) * 64		320795	0		=			
ANR	321528	Identifier	align		320795	0					
ANR	321529	MultiplicativeExpression	( idx_align & 3 ) * 64		320795	1		*			
ANR	321530	BitAndExpression	idx_align & 3		320795	0		&			
ANR	321531	Identifier	idx_align		320795	0					
ANR	321532	PrimaryExpression	3		320795	1					
ANR	321533	PrimaryExpression	64		320795	1					
ANR	321534	ElseStatement	else		320795	0					
ANR	321535	CompoundStatement		160:14:3950:3950	320795	0					
ANR	321536	ExpressionStatement	align = ( idx_align & 1 ) ? 32 << size : 0	4303:8:181755:181795	320795	0	True				
ANR	321537	AssignmentExpression	align = ( idx_align & 1 ) ? 32 << size : 0		320795	0		=			
ANR	321538	Identifier	align		320795	0					
ANR	321539	ConditionalExpression	( idx_align & 1 ) ? 32 << size : 0		320795	1					
ANR	321540	Condition	idx_align & 1		320795	0					
ANR	321541	BitAndExpression	idx_align & 1		320795	0		&			
ANR	321542	Identifier	idx_align		320795	0					
ANR	321543	PrimaryExpression	1		320795	1					
ANR	321544	ShiftExpression	32 << size		320795	1		<<			
ANR	321545	PrimaryExpression	32		320795	0					
ANR	321546	Identifier	size		320795	1					
ANR	321547	PrimaryExpression	0		320795	2					
ANR	321548	BreakStatement	break ;	4305:7:181813:181818	320795	12	True				
ANR	321549	ExpressionStatement	"func ( stream , ""{"" )"	4308:3:181852:181870	320795	12	True				
ANR	321550	CallExpression	"func ( stream , ""{"" )"		320795	0					
ANR	321551	Callee	func		320795	0					
ANR	321552	Identifier	func		320795	0					
ANR	321553	ArgumentList	stream		320795	1					
ANR	321554	Argument	stream		320795	0					
ANR	321555	Identifier	stream		320795	0					
ANR	321556	Argument	"""{"""		320795	1					
ANR	321557	PrimaryExpression	"""{"""		320795	0					
ANR	321558	ForStatement	for ( i = 0 ; i < length ; i ++ )		320795	13					
ANR	321559	ForInit	i = 0 ;	4309:8:181880:181885	320795	0	True				
ANR	321560	AssignmentExpression	i = 0		320795	0		=			
ANR	321561	Identifier	i		320795	0					
ANR	321562	PrimaryExpression	0		320795	1					
ANR	321563	Condition	i < length	4309:15:181887:181896	320795	1	True				
ANR	321564	RelationalExpression	i < length		320795	0		<			
ANR	321565	Identifier	i		320795	0					
ANR	321566	Identifier	length		320795	1					
ANR	321567	PostIncDecOperationExpression	i ++	4309:27:181899:181901	320795	2	True				
ANR	321568	Identifier	i		320795	0					
ANR	321569	IncDec	++		320795	1					
ANR	321570	CompoundStatement		167:32:4109:4109	320795	3					
ANR	321571	ExpressionStatement	"func ( stream , ""%sd%d[%d]"" , ( i == 0 ) ? """" : "","" , rd + i * stride , idx )"	4310:4:181910:181984	320795	0	True				
ANR	321572	CallExpression	"func ( stream , ""%sd%d[%d]"" , ( i == 0 ) ? """" : "","" , rd + i * stride , idx )"		320795	0					
ANR	321573	Callee	func		320795	0					
ANR	321574	Identifier	func		320795	0					
ANR	321575	ArgumentList	stream		320795	1					
ANR	321576	Argument	stream		320795	0					
ANR	321577	Identifier	stream		320795	0					
ANR	321578	Argument	"""%sd%d[%d]"""		320795	1					
ANR	321579	PrimaryExpression	"""%sd%d[%d]"""		320795	0					
ANR	321580	Argument	"( i == 0 ) ? """" : "","""		320795	2					
ANR	321581	ConditionalExpression	"( i == 0 ) ? """" : "","""		320795	0					
ANR	321582	Condition	i == 0		320795	0					
ANR	321583	EqualityExpression	i == 0		320795	0		==			
ANR	321584	Identifier	i		320795	0					
ANR	321585	PrimaryExpression	0		320795	1					
ANR	321586	PrimaryExpression	""""""		320795	1					
ANR	321587	PrimaryExpression	""","""		320795	2					
ANR	321588	Argument	rd + i * stride		320795	3					
ANR	321589	AdditiveExpression	rd + i * stride		320795	0		+			
ANR	321590	Identifier	rd		320795	0					
ANR	321591	MultiplicativeExpression	i * stride		320795	1		*			
ANR	321592	Identifier	i		320795	0					
ANR	321593	Identifier	stride		320795	1					
ANR	321594	Argument	idx		320795	4					
ANR	321595	Identifier	idx		320795	0					
ANR	321596	ExpressionStatement	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"	4313:3:181994:182035	320795	14	True				
ANR	321597	CallExpression	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"		320795	0					
ANR	321598	Callee	func		320795	0					
ANR	321599	Identifier	func		320795	0					
ANR	321600	ArgumentList	stream		320795	1					
ANR	321601	Argument	stream		320795	0					
ANR	321602	Identifier	stream		320795	0					
ANR	321603	Argument	"""}, [%s"""		320795	1					
ANR	321604	PrimaryExpression	"""}, [%s"""		320795	0					
ANR	321605	Argument	arm_regnames [ rn ]		320795	2					
ANR	321606	ArrayIndexing	arm_regnames [ rn ]		320795	0					
ANR	321607	Identifier	arm_regnames		320795	0					
ANR	321608	Identifier	rn		320795	1					
ANR	321609	IfStatement	if ( align )		320795	15					
ANR	321610	Condition	align	4314:7:182044:182048	320795	0	True				
ANR	321611	Identifier	align		320795	0					
ANR	321612	CompoundStatement		172:14:4256:4256	320795	1					
ANR	321613	ExpressionStatement	"func ( stream , "" :%d"" , align )"	4315:4:182057:182085	320795	0	True				
ANR	321614	CallExpression	"func ( stream , "" :%d"" , align )"		320795	0					
ANR	321615	Callee	func		320795	0					
ANR	321616	Identifier	func		320795	0					
ANR	321617	ArgumentList	stream		320795	1					
ANR	321618	Argument	stream		320795	0					
ANR	321619	Identifier	stream		320795	0					
ANR	321620	Argument	""" :%d"""		320795	1					
ANR	321621	PrimaryExpression	""" :%d"""		320795	0					
ANR	321622	Argument	align		320795	2					
ANR	321623	Identifier	align		320795	0					
ANR	321624	ExpressionStatement	"func ( stream , ""]"" )"	4317:3:182095:182113	320795	16	True				
ANR	321625	CallExpression	"func ( stream , ""]"" )"		320795	0					
ANR	321626	Callee	func		320795	0					
ANR	321627	Identifier	func		320795	0					
ANR	321628	ArgumentList	stream		320795	1					
ANR	321629	Argument	stream		320795	0					
ANR	321630	Identifier	stream		320795	0					
ANR	321631	Argument	"""]"""		320795	1					
ANR	321632	PrimaryExpression	"""]"""		320795	0					
ANR	321633	IfStatement	if ( rm == 0xd )		320795	17					
ANR	321634	Condition	rm == 0xd	4318:7:182122:182130	320795	0	True				
ANR	321635	EqualityExpression	rm == 0xd		320795	0		==			
ANR	321636	Identifier	rm		320795	0					
ANR	321637	PrimaryExpression	0xd		320795	1					
ANR	321638	CompoundStatement		176:18:4338:4338	320795	1					
ANR	321639	ExpressionStatement	"func ( stream , ""!"" )"	4319:4:182139:182157	320795	0	True				
ANR	321640	CallExpression	"func ( stream , ""!"" )"		320795	0					
ANR	321641	Callee	func		320795	0					
ANR	321642	Identifier	func		320795	0					
ANR	321643	ArgumentList	stream		320795	1					
ANR	321644	Argument	stream		320795	0					
ANR	321645	Identifier	stream		320795	0					
ANR	321646	Argument	"""!"""		320795	1					
ANR	321647	PrimaryExpression	"""!"""		320795	0					
ANR	321648	ElseStatement	else		320795	0					
ANR	321649	IfStatement	if ( rm != 0xf )		320795	0					
ANR	321650	Condition	rm != 0xf	4320:14:182173:182181	320795	0	True				
ANR	321651	EqualityExpression	rm != 0xf		320795	0		!=			
ANR	321652	Identifier	rm		320795	0					
ANR	321653	PrimaryExpression	0xf		320795	1					
ANR	321654	CompoundStatement		178:25:4389:4389	320795	1					
ANR	321655	ExpressionStatement	"func ( stream , "", %s"" , arm_regnames [ rm ] )"	4321:4:182190:182229	320795	0	True				
ANR	321656	CallExpression	"func ( stream , "", %s"" , arm_regnames [ rm ] )"		320795	0					
ANR	321657	Callee	func		320795	0					
ANR	321658	Identifier	func		320795	0					
ANR	321659	ArgumentList	stream		320795	1					
ANR	321660	Argument	stream		320795	0					
ANR	321661	Identifier	stream		320795	0					
ANR	321662	Argument	""", %s"""		320795	1					
ANR	321663	PrimaryExpression	""", %s"""		320795	0					
ANR	321664	Argument	arm_regnames [ rm ]		320795	2					
ANR	321665	ArrayIndexing	arm_regnames [ rm ]		320795	0					
ANR	321666	Identifier	arm_regnames		320795	0					
ANR	321667	Identifier	rm		320795	1					
ANR	321668	BreakStatement	break ;	4324:8:182254:182259	320795	13	True				
ANR	321669	Label	case 'C' :	4326:6:182268:182276	320795	14	True				
ANR	321670	CompoundStatement		194:3:4797:4803	320795	15					
ANR	321671	IdentifierDeclStatement	int rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 ) ;	4328:3:182291:182350	320795	0	True				
ANR	321672	IdentifierDecl	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	0					
ANR	321673	IdentifierDeclType	int		320795	0					
ANR	321674	Identifier	rd		320795	1					
ANR	321675	AssignmentExpression	rd = ( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	2		=			
ANR	321676	Identifier	rd		320795	0					
ANR	321677	InclusiveOrExpression	( ( given >> 12 ) & 0xf ) | ( ( ( given >> 22 ) & 1 ) << 4 )		320795	1		|			
ANR	321678	BitAndExpression	( given >> 12 ) & 0xf		320795	0		&			
ANR	321679	ShiftExpression	given >> 12		320795	0		>>			
ANR	321680	Identifier	given		320795	0					
ANR	321681	PrimaryExpression	12		320795	1					
ANR	321682	PrimaryExpression	0xf		320795	1					
ANR	321683	ShiftExpression	( ( given >> 22 ) & 1 ) << 4		320795	1		<<			
ANR	321684	BitAndExpression	( given >> 22 ) & 1		320795	0		&			
ANR	321685	ShiftExpression	given >> 22		320795	0		>>			
ANR	321686	Identifier	given		320795	0					
ANR	321687	PrimaryExpression	22		320795	1					
ANR	321688	PrimaryExpression	1		320795	1					
ANR	321689	PrimaryExpression	4		320795	1					
ANR	321690	IdentifierDeclStatement	int rn = ( ( given >> 16 ) & 0xf ) ;	4329:3:182355:182385	320795	1	True				
ANR	321691	IdentifierDecl	rn = ( ( given >> 16 ) & 0xf )		320795	0					
ANR	321692	IdentifierDeclType	int		320795	0					
ANR	321693	Identifier	rn		320795	1					
ANR	321694	AssignmentExpression	rn = ( ( given >> 16 ) & 0xf )		320795	2		=			
ANR	321695	Identifier	rn		320795	0					
ANR	321696	BitAndExpression	( given >> 16 ) & 0xf		320795	1		&			
ANR	321697	ShiftExpression	given >> 16		320795	0		>>			
ANR	321698	Identifier	given		320795	0					
ANR	321699	PrimaryExpression	16		320795	1					
ANR	321700	PrimaryExpression	0xf		320795	1					
ANR	321701	IdentifierDeclStatement	int rm = ( ( given >> 0 ) & 0xf ) ;	4330:3:182390:182419	320795	2	True				
ANR	321702	IdentifierDecl	rm = ( ( given >> 0 ) & 0xf )		320795	0					
ANR	321703	IdentifierDeclType	int		320795	0					
ANR	321704	Identifier	rm		320795	1					
ANR	321705	AssignmentExpression	rm = ( ( given >> 0 ) & 0xf )		320795	2		=			
ANR	321706	Identifier	rm		320795	0					
ANR	321707	BitAndExpression	( given >> 0 ) & 0xf		320795	1		&			
ANR	321708	ShiftExpression	given >> 0		320795	0		>>			
ANR	321709	Identifier	given		320795	0					
ANR	321710	PrimaryExpression	0		320795	1					
ANR	321711	PrimaryExpression	0xf		320795	1					
ANR	321712	IdentifierDeclStatement	int align = ( ( given >> 4 ) & 0x1 ) ;	4331:3:182424:182456	320795	3	True				
ANR	321713	IdentifierDecl	align = ( ( given >> 4 ) & 0x1 )		320795	0					
ANR	321714	IdentifierDeclType	int		320795	0					
ANR	321715	Identifier	align		320795	1					
ANR	321716	AssignmentExpression	align = ( ( given >> 4 ) & 0x1 )		320795	2		=			
ANR	321717	Identifier	align		320795	0					
ANR	321718	BitAndExpression	( given >> 4 ) & 0x1		320795	1		&			
ANR	321719	ShiftExpression	given >> 4		320795	0		>>			
ANR	321720	Identifier	given		320795	0					
ANR	321721	PrimaryExpression	4		320795	1					
ANR	321722	PrimaryExpression	0x1		320795	1					
ANR	321723	IdentifierDeclStatement	int size = ( ( given >> 6 ) & 0x3 ) ;	4332:3:182461:182492	320795	4	True				
ANR	321724	IdentifierDecl	size = ( ( given >> 6 ) & 0x3 )		320795	0					
ANR	321725	IdentifierDeclType	int		320795	0					
ANR	321726	Identifier	size		320795	1					
ANR	321727	AssignmentExpression	size = ( ( given >> 6 ) & 0x3 )		320795	2		=			
ANR	321728	Identifier	size		320795	0					
ANR	321729	BitAndExpression	( given >> 6 ) & 0x3		320795	1		&			
ANR	321730	ShiftExpression	given >> 6		320795	0		>>			
ANR	321731	Identifier	given		320795	0					
ANR	321732	PrimaryExpression	6		320795	1					
ANR	321733	PrimaryExpression	0x3		320795	1					
ANR	321734	IdentifierDeclStatement	int type = ( ( given >> 8 ) & 0x3 ) ;	4333:3:182497:182528	320795	5	True				
ANR	321735	IdentifierDecl	type = ( ( given >> 8 ) & 0x3 )		320795	0					
ANR	321736	IdentifierDeclType	int		320795	0					
ANR	321737	Identifier	type		320795	1					
ANR	321738	AssignmentExpression	type = ( ( given >> 8 ) & 0x3 )		320795	2		=			
ANR	321739	Identifier	type		320795	0					
ANR	321740	BitAndExpression	( given >> 8 ) & 0x3		320795	1		&			
ANR	321741	ShiftExpression	given >> 8		320795	0		>>			
ANR	321742	Identifier	given		320795	0					
ANR	321743	PrimaryExpression	8		320795	1					
ANR	321744	PrimaryExpression	0x3		320795	1					
ANR	321745	IdentifierDeclStatement	int n = type + 1 ;	4334:3:182533:182549	320795	6	True				
ANR	321746	IdentifierDecl	n = type + 1		320795	0					
ANR	321747	IdentifierDeclType	int		320795	0					
ANR	321748	Identifier	n		320795	1					
ANR	321749	AssignmentExpression	n = type + 1		320795	2		=			
ANR	321750	Identifier	n		320795	0					
ANR	321751	AdditiveExpression	type + 1		320795	1		+			
ANR	321752	Identifier	type		320795	0					
ANR	321753	PrimaryExpression	1		320795	1					
ANR	321754	IdentifierDeclStatement	int stride = ( ( given >> 5 ) & 0x1 ) ;	4335:3:182554:182587	320795	7	True				
ANR	321755	IdentifierDecl	stride = ( ( given >> 5 ) & 0x1 )		320795	0					
ANR	321756	IdentifierDeclType	int		320795	0					
ANR	321757	Identifier	stride		320795	1					
ANR	321758	AssignmentExpression	stride = ( ( given >> 5 ) & 0x1 )		320795	2		=			
ANR	321759	Identifier	stride		320795	0					
ANR	321760	BitAndExpression	( given >> 5 ) & 0x1		320795	1		&			
ANR	321761	ShiftExpression	given >> 5		320795	0		>>			
ANR	321762	Identifier	given		320795	0					
ANR	321763	PrimaryExpression	5		320795	1					
ANR	321764	PrimaryExpression	0x1		320795	1					
ANR	321765	IdentifierDeclStatement	int ix ;	4336:3:182592:182598	320795	8	True				
ANR	321766	IdentifierDecl	ix		320795	0					
ANR	321767	IdentifierDeclType	int		320795	0					
ANR	321768	Identifier	ix		320795	1					
ANR	321769	IfStatement	if ( stride && ( n == 1 ) )		320795	9					
ANR	321770	Condition	stride && ( n == 1 )	4338:7:182608:182625	320795	0	True				
ANR	321771	AndExpression	stride && ( n == 1 )		320795	0		&&			
ANR	321772	Identifier	stride		320795	0					
ANR	321773	EqualityExpression	n == 1		320795	1		==			
ANR	321774	Identifier	n		320795	0					
ANR	321775	PrimaryExpression	1		320795	1					
ANR	321776	CompoundStatement		196:27:4833:4833	320795	1					
ANR	321777	ExpressionStatement	n ++	4339:4:182634:182637	320795	0	True				
ANR	321778	PostIncDecOperationExpression	n ++		320795	0					
ANR	321779	Identifier	n		320795	0					
ANR	321780	IncDec	++		320795	1					
ANR	321781	ElseStatement	else		320795	0					
ANR	321782	CompoundStatement		198:10:4854:4854	320795	0					
ANR	321783	ExpressionStatement	stride ++	4341:4:182655:182663	320795	0	True				
ANR	321784	PostIncDecOperationExpression	stride ++		320795	0					
ANR	321785	Identifier	stride		320795	0					
ANR	321786	IncDec	++		320795	1					
ANR	321787	ExpressionStatement	"func ( stream , ""{"" )"	4344:3:182674:182692	320795	10	True				
ANR	321788	CallExpression	"func ( stream , ""{"" )"		320795	0					
ANR	321789	Callee	func		320795	0					
ANR	321790	Identifier	func		320795	0					
ANR	321791	ArgumentList	stream		320795	1					
ANR	321792	Argument	stream		320795	0					
ANR	321793	Identifier	stream		320795	0					
ANR	321794	Argument	"""{"""		320795	1					
ANR	321795	PrimaryExpression	"""{"""		320795	0					
ANR	321796	IfStatement	if ( stride > 1 )		320795	11					
ANR	321797	Condition	stride > 1	4345:7:182701:182710	320795	0	True				
ANR	321798	RelationalExpression	stride > 1		320795	0		>			
ANR	321799	Identifier	stride		320795	0					
ANR	321800	PrimaryExpression	1		320795	1					
ANR	321801	CompoundStatement		203:19:4918:4918	320795	1					
ANR	321802	ForStatement	for ( ix = 0 ; ix != n ; ix ++ )		320795	0					
ANR	321803	ForInit	ix = 0 ;	4346:9:182724:182730	320795	0	True				
ANR	321804	AssignmentExpression	ix = 0		320795	0		=			
ANR	321805	Identifier	ix		320795	0					
ANR	321806	PrimaryExpression	0		320795	1					
ANR	321807	Condition	ix != n	4346:17:182732:182738	320795	1	True				
ANR	321808	EqualityExpression	ix != n		320795	0		!=			
ANR	321809	Identifier	ix		320795	0					
ANR	321810	Identifier	n		320795	1					
ANR	321811	PostIncDecOperationExpression	ix ++	4346:26:182741:182744	320795	2	True				
ANR	321812	Identifier	ix		320795	0					
ANR	321813	IncDec	++		320795	1					
ANR	321814	CompoundStatement		204:32:4952:4952	320795	3					
ANR	321815	ExpressionStatement	"func ( stream , ""%sd%d[]"" , ix ? "","" : """" , rd + ix * stride )"	4347:5:182754:182811	320795	0	True				
ANR	321816	CallExpression	"func ( stream , ""%sd%d[]"" , ix ? "","" : """" , rd + ix * stride )"		320795	0					
ANR	321817	Callee	func		320795	0					
ANR	321818	Identifier	func		320795	0					
ANR	321819	ArgumentList	stream		320795	1					
ANR	321820	Argument	stream		320795	0					
ANR	321821	Identifier	stream		320795	0					
ANR	321822	Argument	"""%sd%d[]"""		320795	1					
ANR	321823	PrimaryExpression	"""%sd%d[]"""		320795	0					
ANR	321824	Argument	"ix ? "","" : """""		320795	2					
ANR	321825	ConditionalExpression	"ix ? "","" : """""		320795	0					
ANR	321826	Condition	ix		320795	0					
ANR	321827	Identifier	ix		320795	0					
ANR	321828	PrimaryExpression	""","""		320795	1					
ANR	321829	PrimaryExpression	""""""		320795	2					
ANR	321830	Argument	rd + ix * stride		320795	3					
ANR	321831	AdditiveExpression	rd + ix * stride		320795	0		+			
ANR	321832	Identifier	rd		320795	0					
ANR	321833	MultiplicativeExpression	ix * stride		320795	1		*			
ANR	321834	Identifier	ix		320795	0					
ANR	321835	Identifier	stride		320795	1					
ANR	321836	ElseStatement	else		320795	0					
ANR	321837	IfStatement	if ( n == 1 )		320795	0					
ANR	321838	Condition	n == 1	4349:14:182833:182838	320795	0	True				
ANR	321839	EqualityExpression	n == 1		320795	0		==			
ANR	321840	Identifier	n		320795	0					
ANR	321841	PrimaryExpression	1		320795	1					
ANR	321842	CompoundStatement		207:22:5046:5046	320795	1					
ANR	321843	ExpressionStatement	"func ( stream , ""d%d[]"" , rd )"	4350:4:182847:182873	320795	0	True				
ANR	321844	CallExpression	"func ( stream , ""d%d[]"" , rd )"		320795	0					
ANR	321845	Callee	func		320795	0					
ANR	321846	Identifier	func		320795	0					
ANR	321847	ArgumentList	stream		320795	1					
ANR	321848	Argument	stream		320795	0					
ANR	321849	Identifier	stream		320795	0					
ANR	321850	Argument	"""d%d[]"""		320795	1					
ANR	321851	PrimaryExpression	"""d%d[]"""		320795	0					
ANR	321852	Argument	rd		320795	2					
ANR	321853	Identifier	rd		320795	0					
ANR	321854	ElseStatement	else		320795	0					
ANR	321855	CompoundStatement		209:10:5090:5090	320795	0					
ANR	321856	ExpressionStatement	"func ( stream , ""d%d[]-d%d[]"" , rd , rd + n - 1 )"	4352:4:182891:182935	320795	0	True				
ANR	321857	CallExpression	"func ( stream , ""d%d[]-d%d[]"" , rd , rd + n - 1 )"		320795	0					
ANR	321858	Callee	func		320795	0					
ANR	321859	Identifier	func		320795	0					
ANR	321860	ArgumentList	stream		320795	1					
ANR	321861	Argument	stream		320795	0					
ANR	321862	Identifier	stream		320795	0					
ANR	321863	Argument	"""d%d[]-d%d[]"""		320795	1					
ANR	321864	PrimaryExpression	"""d%d[]-d%d[]"""		320795	0					
ANR	321865	Argument	rd		320795	2					
ANR	321866	Identifier	rd		320795	0					
ANR	321867	Argument	rd + n - 1		320795	3					
ANR	321868	AdditiveExpression	rd + n - 1		320795	0		+			
ANR	321869	Identifier	rd		320795	0					
ANR	321870	AdditiveExpression	n - 1		320795	1		-			
ANR	321871	Identifier	n		320795	0					
ANR	321872	PrimaryExpression	1		320795	1					
ANR	321873	ExpressionStatement	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"	4354:3:182945:182986	320795	12	True				
ANR	321874	CallExpression	"func ( stream , ""}, [%s"" , arm_regnames [ rn ] )"		320795	0					
ANR	321875	Callee	func		320795	0					
ANR	321876	Identifier	func		320795	0					
ANR	321877	ArgumentList	stream		320795	1					
ANR	321878	Argument	stream		320795	0					
ANR	321879	Identifier	stream		320795	0					
ANR	321880	Argument	"""}, [%s"""		320795	1					
ANR	321881	PrimaryExpression	"""}, [%s"""		320795	0					
ANR	321882	Argument	arm_regnames [ rn ]		320795	2					
ANR	321883	ArrayIndexing	arm_regnames [ rn ]		320795	0					
ANR	321884	Identifier	arm_regnames		320795	0					
ANR	321885	Identifier	rn		320795	1					
ANR	321886	IfStatement	if ( align )		320795	13					
ANR	321887	Condition	align	4355:7:182995:182999	320795	0	True				
ANR	321888	Identifier	align		320795	0					
ANR	321889	CompoundStatement		214:5:5212:5212	320795	1					
ANR	321890	ExpressionStatement	align = ( 8 * ( type + 1 ) ) << size	4357:28:183037:183069	320795	0	True				
ANR	321891	AssignmentExpression	align = ( 8 * ( type + 1 ) ) << size		320795	0		=			
ANR	321892	Identifier	align		320795	0					
ANR	321893	ShiftExpression	( 8 * ( type + 1 ) ) << size		320795	1		<<			
ANR	321894	MultiplicativeExpression	8 * ( type + 1 )		320795	0		*			
ANR	321895	PrimaryExpression	8		320795	0					
ANR	321896	AdditiveExpression	type + 1		320795	1		+			
ANR	321897	Identifier	type		320795	0					
ANR	321898	PrimaryExpression	1		320795	1					
ANR	321899	Identifier	size		320795	1					
ANR	321900	IfStatement	if ( type == 3 )		320795	1					
ANR	321901	Condition	type == 3	4358:11:183082:183090	320795	0	True				
ANR	321902	EqualityExpression	type == 3		320795	0		==			
ANR	321903	Identifier	type		320795	0					
ANR	321904	PrimaryExpression	3		320795	1					
ANR	321905	CompoundStatement		216:22:5298:5298	320795	1					
ANR	321906	ExpressionStatement	align = ( size > 1 ) ? align >> 1 : align	4359:8:183103:183142	320795	0	True				
ANR	321907	AssignmentExpression	align = ( size > 1 ) ? align >> 1 : align		320795	0		=			
ANR	321908	Identifier	align		320795	0					
ANR	321909	ConditionalExpression	( size > 1 ) ? align >> 1 : align		320795	1					
ANR	321910	Condition	size > 1		320795	0					
ANR	321911	RelationalExpression	size > 1		320795	0		>			
ANR	321912	Identifier	size		320795	0					
ANR	321913	PrimaryExpression	1		320795	1					
ANR	321914	ShiftExpression	align >> 1		320795	1		>>			
ANR	321915	Identifier	align		320795	0					
ANR	321916	PrimaryExpression	1		320795	1					
ANR	321917	Identifier	align		320795	2					
ANR	321918	IfStatement	if ( type == 2 || ( type == 0 && ! size ) )		320795	2					
ANR	321919	Condition	type == 2 || ( type == 0 && ! size )	4361:11:183164:183196	320795	0	True				
ANR	321920	OrExpression	type == 2 || ( type == 0 && ! size )		320795	0		||			
ANR	321921	EqualityExpression	type == 2		320795	0		==			
ANR	321922	Identifier	type		320795	0					
ANR	321923	PrimaryExpression	2		320795	1					
ANR	321924	AndExpression	type == 0 && ! size		320795	1		&&			
ANR	321925	EqualityExpression	type == 0		320795	0		==			
ANR	321926	Identifier	type		320795	0					
ANR	321927	PrimaryExpression	0		320795	1					
ANR	321928	UnaryOperationExpression	! size		320795	1					
ANR	321929	UnaryOperator	!		320795	0					
ANR	321930	Identifier	size		320795	1					
ANR	321931	CompoundStatement		219:46:5404:5404	320795	1					
ANR	321932	ExpressionStatement	"func ( stream , "" :<bad align %d>"" , align )"	4362:8:183209:183249	320795	0	True				
ANR	321933	CallExpression	"func ( stream , "" :<bad align %d>"" , align )"		320795	0					
ANR	321934	Callee	func		320795	0					
ANR	321935	Identifier	func		320795	0					
ANR	321936	ArgumentList	stream		320795	1					
ANR	321937	Argument	stream		320795	0					
ANR	321938	Identifier	stream		320795	0					
ANR	321939	Argument	""" :<bad align %d>"""		320795	1					
ANR	321940	PrimaryExpression	""" :<bad align %d>"""		320795	0					
ANR	321941	Argument	align		320795	2					
ANR	321942	Identifier	align		320795	0					
ANR	321943	ElseStatement	else		320795	0					
ANR	321944	CompoundStatement		221:14:5470:5470	320795	0					
ANR	321945	ExpressionStatement	"func ( stream , "" :%d"" , align )"	4364:8:183275:183303	320795	0	True				
ANR	321946	CallExpression	"func ( stream , "" :%d"" , align )"		320795	0					
ANR	321947	Callee	func		320795	0					
ANR	321948	Identifier	func		320795	0					
ANR	321949	ArgumentList	stream		320795	1					
ANR	321950	Argument	stream		320795	0					
ANR	321951	Identifier	stream		320795	0					
ANR	321952	Argument	""" :%d"""		320795	1					
ANR	321953	PrimaryExpression	""" :%d"""		320795	0					
ANR	321954	Argument	align		320795	2					
ANR	321955	Identifier	align		320795	0					
ANR	321956	ExpressionStatement	"func ( stream , ""]"" )"	4367:3:183324:183342	320795	14	True				
ANR	321957	CallExpression	"func ( stream , ""]"" )"		320795	0					
ANR	321958	Callee	func		320795	0					
ANR	321959	Identifier	func		320795	0					
ANR	321960	ArgumentList	stream		320795	1					
ANR	321961	Argument	stream		320795	0					
ANR	321962	Identifier	stream		320795	0					
ANR	321963	Argument	"""]"""		320795	1					
ANR	321964	PrimaryExpression	"""]"""		320795	0					
ANR	321965	IfStatement	if ( rm == 0xd )		320795	15					
ANR	321966	Condition	rm == 0xd	4368:7:183351:183359	320795	0	True				
ANR	321967	EqualityExpression	rm == 0xd		320795	0		==			
ANR	321968	Identifier	rm		320795	0					
ANR	321969	PrimaryExpression	0xd		320795	1					
ANR	321970	CompoundStatement		226:18:5567:5567	320795	1					
ANR	321971	ExpressionStatement	"func ( stream , ""!"" )"	4369:4:183368:183386	320795	0	True				
ANR	321972	CallExpression	"func ( stream , ""!"" )"		320795	0					
ANR	321973	Callee	func		320795	0					
ANR	321974	Identifier	func		320795	0					
ANR	321975	ArgumentList	stream		320795	1					
ANR	321976	Argument	stream		320795	0					
ANR	321977	Identifier	stream		320795	0					
ANR	321978	Argument	"""!"""		320795	1					
ANR	321979	PrimaryExpression	"""!"""		320795	0					
ANR	321980	ElseStatement	else		320795	0					
ANR	321981	IfStatement	if ( rm != 0xf )		320795	0					
ANR	321982	Condition	rm != 0xf	4370:14:183402:183410	320795	0	True				
ANR	321983	EqualityExpression	rm != 0xf		320795	0		!=			
ANR	321984	Identifier	rm		320795	0					
ANR	321985	PrimaryExpression	0xf		320795	1					
ANR	321986	CompoundStatement		228:25:5618:5618	320795	1					
ANR	321987	ExpressionStatement	"func ( stream , "", %s"" , arm_regnames [ rm ] )"	4371:4:183419:183458	320795	0	True				
ANR	321988	CallExpression	"func ( stream , "", %s"" , arm_regnames [ rm ] )"		320795	0					
ANR	321989	Callee	func		320795	0					
ANR	321990	Identifier	func		320795	0					
ANR	321991	ArgumentList	stream		320795	1					
ANR	321992	Argument	stream		320795	0					
ANR	321993	Identifier	stream		320795	0					
ANR	321994	Argument	""", %s"""		320795	1					
ANR	321995	PrimaryExpression	""", %s"""		320795	0					
ANR	321996	Argument	arm_regnames [ rm ]		320795	2					
ANR	321997	ArrayIndexing	arm_regnames [ rm ]		320795	0					
ANR	321998	Identifier	arm_regnames		320795	0					
ANR	321999	Identifier	rm		320795	1					
ANR	322000	BreakStatement	break ;	4374:8:183483:183488	320795	16	True				
ANR	322001	Label	case 'D' :	4376:6:183497:183505	320795	17	True				
ANR	322002	CompoundStatement		239:3:5856:5885	320795	18					
ANR	322003	IdentifierDeclStatement	int raw_reg = ( given & 0xf ) | ( ( given >> 1 ) & 0x10 ) ;	4378:3:183520:183571	320795	0	True				
ANR	322004	IdentifierDecl	raw_reg = ( given & 0xf ) | ( ( given >> 1 ) & 0x10 )		320795	0					
ANR	322005	IdentifierDeclType	int		320795	0					
ANR	322006	Identifier	raw_reg		320795	1					
ANR	322007	AssignmentExpression	raw_reg = ( given & 0xf ) | ( ( given >> 1 ) & 0x10 )		320795	2		=			
ANR	322008	Identifier	raw_reg		320795	0					
ANR	322009	InclusiveOrExpression	( given & 0xf ) | ( ( given >> 1 ) & 0x10 )		320795	1		|			
ANR	322010	BitAndExpression	given & 0xf		320795	0		&			
ANR	322011	Identifier	given		320795	0					
ANR	322012	PrimaryExpression	0xf		320795	1					
ANR	322013	BitAndExpression	( given >> 1 ) & 0x10		320795	1		&			
ANR	322014	ShiftExpression	given >> 1		320795	0		>>			
ANR	322015	Identifier	given		320795	0					
ANR	322016	PrimaryExpression	1		320795	1					
ANR	322017	PrimaryExpression	0x10		320795	1					
ANR	322018	IdentifierDeclStatement	int size = ( given >> 20 ) & 3 ;	4379:3:183576:183604	320795	1	True				
ANR	322019	IdentifierDecl	size = ( given >> 20 ) & 3		320795	0					
ANR	322020	IdentifierDeclType	int		320795	0					
ANR	322021	Identifier	size		320795	1					
ANR	322022	AssignmentExpression	size = ( given >> 20 ) & 3		320795	2		=			
ANR	322023	Identifier	size		320795	0					
ANR	322024	BitAndExpression	( given >> 20 ) & 3		320795	1		&			
ANR	322025	ShiftExpression	given >> 20		320795	0		>>			
ANR	322026	Identifier	given		320795	0					
ANR	322027	PrimaryExpression	20		320795	1					
ANR	322028	PrimaryExpression	3		320795	1					
ANR	322029	IdentifierDeclStatement	int reg = raw_reg & ( ( 4 << size ) - 1 ) ;	4380:3:183609:183646	320795	2	True				
ANR	322030	IdentifierDecl	reg = raw_reg & ( ( 4 << size ) - 1 )		320795	0					
ANR	322031	IdentifierDeclType	int		320795	0					
ANR	322032	Identifier	reg		320795	1					
ANR	322033	AssignmentExpression	reg = raw_reg & ( ( 4 << size ) - 1 )		320795	2		=			
ANR	322034	Identifier	reg		320795	0					
ANR	322035	BitAndExpression	raw_reg & ( ( 4 << size ) - 1 )		320795	1		&			
ANR	322036	Identifier	raw_reg		320795	0					
ANR	322037	AdditiveExpression	( 4 << size ) - 1		320795	1		-			
ANR	322038	ShiftExpression	4 << size		320795	0		<<			
ANR	322039	PrimaryExpression	4		320795	0					
ANR	322040	Identifier	size		320795	1					
ANR	322041	PrimaryExpression	1		320795	1					
ANR	322042	IdentifierDeclStatement	int ix = raw_reg >> size >> 2 ;	4381:3:183651:183680	320795	3	True				
ANR	322043	IdentifierDecl	ix = raw_reg >> size >> 2		320795	0					
ANR	322044	IdentifierDeclType	int		320795	0					
ANR	322045	Identifier	ix		320795	1					
ANR	322046	AssignmentExpression	ix = raw_reg >> size >> 2		320795	2		=			
ANR	322047	Identifier	ix		320795	0					
ANR	322048	ShiftExpression	raw_reg >> size >> 2		320795	1		>>			
ANR	322049	Identifier	raw_reg		320795	0					
ANR	322050	ShiftExpression	size >> 2		320795	1		>>			
ANR	322051	Identifier	size		320795	0					
ANR	322052	PrimaryExpression	2		320795	1					
ANR	322053	ExpressionStatement	"func ( stream , ""d%d[%d]"" , reg , ix )"	4383:3:183686:183719	320795	4	True				
ANR	322054	CallExpression	"func ( stream , ""d%d[%d]"" , reg , ix )"		320795	0					
ANR	322055	Callee	func		320795	0					
ANR	322056	Identifier	func		320795	0					
ANR	322057	ArgumentList	stream		320795	1					
ANR	322058	Argument	stream		320795	0					
ANR	322059	Identifier	stream		320795	0					
ANR	322060	Argument	"""d%d[%d]"""		320795	1					
ANR	322061	PrimaryExpression	"""d%d[%d]"""		320795	0					
ANR	322062	Argument	reg		320795	2					
ANR	322063	Identifier	reg		320795	0					
ANR	322064	Argument	ix		320795	3					
ANR	322065	Identifier	ix		320795	0					
ANR	322066	BreakStatement	break ;	4385:8:183739:183744	320795	19	True				
ANR	322067	Label	case 'E' :	4387:6:183753:183761	320795	20	True				
ANR	322068	CompoundStatement		254:24:6245:6260	320795	21					
ANR	322069	IdentifierDeclStatement	int bits = 0 ;	4390:3:183839:183851	320795	0	True				
ANR	322070	IdentifierDecl	bits = 0		320795	0					
ANR	322071	IdentifierDeclType	int		320795	0					
ANR	322072	Identifier	bits		320795	1					
ANR	322073	AssignmentExpression	bits = 0		320795	2		=			
ANR	322074	Identifier	bits		320795	0					
ANR	322075	PrimaryExpression	0		320795	1					
ANR	322076	IdentifierDeclStatement	int cmode = ( given >> 8 ) & 0xf ;	4391:3:183856:183886	320795	1	True				
ANR	322077	IdentifierDecl	cmode = ( given >> 8 ) & 0xf		320795	0					
ANR	322078	IdentifierDeclType	int		320795	0					
ANR	322079	Identifier	cmode		320795	1					
ANR	322080	AssignmentExpression	cmode = ( given >> 8 ) & 0xf		320795	2		=			
ANR	322081	Identifier	cmode		320795	0					
ANR	322082	BitAndExpression	( given >> 8 ) & 0xf		320795	1		&			
ANR	322083	ShiftExpression	given >> 8		320795	0		>>			
ANR	322084	Identifier	given		320795	0					
ANR	322085	PrimaryExpression	8		320795	1					
ANR	322086	PrimaryExpression	0xf		320795	1					
ANR	322087	IdentifierDeclStatement	int op = ( given >> 5 ) & 0x1 ;	4392:3:183891:183918	320795	2	True				
ANR	322088	IdentifierDecl	op = ( given >> 5 ) & 0x1		320795	0					
ANR	322089	IdentifierDeclType	int		320795	0					
ANR	322090	Identifier	op		320795	1					
ANR	322091	AssignmentExpression	op = ( given >> 5 ) & 0x1		320795	2		=			
ANR	322092	Identifier	op		320795	0					
ANR	322093	BitAndExpression	( given >> 5 ) & 0x1		320795	1		&			
ANR	322094	ShiftExpression	given >> 5		320795	0		>>			
ANR	322095	Identifier	given		320795	0					
ANR	322096	PrimaryExpression	5		320795	1					
ANR	322097	PrimaryExpression	0x1		320795	1					
ANR	322098	IdentifierDeclStatement	"unsigned long value = 0 , hival = 0 ;"	4393:3:183923:183957	320795	3	True				
ANR	322099	IdentifierDecl	value = 0		320795	0					
ANR	322100	IdentifierDeclType	unsigned long		320795	0					
ANR	322101	Identifier	value		320795	1					
ANR	322102	AssignmentExpression	value = 0		320795	2		=			
ANR	322103	Identifier	value		320795	0					
ANR	322104	PrimaryExpression	0		320795	1					
ANR	322105	IdentifierDecl	hival = 0		320795	1					
ANR	322106	IdentifierDeclType	unsigned long		320795	0					
ANR	322107	Identifier	hival		320795	1					
ANR	322108	AssignmentExpression	hival = 0		320795	2		=			
ANR	322109	Identifier	hival		320795	0					
ANR	322110	PrimaryExpression	0		320795	1					
ANR	322111	IdentifierDeclStatement	unsigned shift ;	4394:3:183962:183976	320795	4	True				
ANR	322112	IdentifierDecl	shift		320795	0					
ANR	322113	IdentifierDeclType	unsigned		320795	0					
ANR	322114	Identifier	shift		320795	1					
ANR	322115	IdentifierDeclStatement	int size = 0 ;	4395:24:184002:184014	320795	5	True				
ANR	322116	IdentifierDecl	size = 0		320795	0					
ANR	322117	IdentifierDeclType	int		320795	0					
ANR	322118	Identifier	size		320795	1					
ANR	322119	AssignmentExpression	size = 0		320795	2		=			
ANR	322120	Identifier	size		320795	0					
ANR	322121	PrimaryExpression	0		320795	1					
ANR	322122	IdentifierDeclStatement	int isfloat = 0 ;	4396:24:184040:184055	320795	6	True				
ANR	322123	IdentifierDecl	isfloat = 0		320795	0					
ANR	322124	IdentifierDeclType	int		320795	0					
ANR	322125	Identifier	isfloat		320795	1					
ANR	322126	AssignmentExpression	isfloat = 0		320795	2		=			
ANR	322127	Identifier	isfloat		320795	0					
ANR	322128	PrimaryExpression	0		320795	1					
ANR	322129	ExpressionStatement	bits |= ( ( given >> 24 ) & 1 ) << 7	4398:3:184061:184093	320795	7	True				
ANR	322130	AssignmentExpression	bits |= ( ( given >> 24 ) & 1 ) << 7		320795	0		|=			
ANR	322131	Identifier	bits		320795	0					
ANR	322132	ShiftExpression	( ( given >> 24 ) & 1 ) << 7		320795	1		<<			
ANR	322133	BitAndExpression	( given >> 24 ) & 1		320795	0		&			
ANR	322134	ShiftExpression	given >> 24		320795	0		>>			
ANR	322135	Identifier	given		320795	0					
ANR	322136	PrimaryExpression	24		320795	1					
ANR	322137	PrimaryExpression	1		320795	1					
ANR	322138	PrimaryExpression	7		320795	1					
ANR	322139	ExpressionStatement	bits |= ( ( given >> 16 ) & 7 ) << 4	4399:3:184098:184130	320795	8	True				
ANR	322140	AssignmentExpression	bits |= ( ( given >> 16 ) & 7 ) << 4		320795	0		|=			
ANR	322141	Identifier	bits		320795	0					
ANR	322142	ShiftExpression	( ( given >> 16 ) & 7 ) << 4		320795	1		<<			
ANR	322143	BitAndExpression	( given >> 16 ) & 7		320795	0		&			
ANR	322144	ShiftExpression	given >> 16		320795	0		>>			
ANR	322145	Identifier	given		320795	0					
ANR	322146	PrimaryExpression	16		320795	1					
ANR	322147	PrimaryExpression	7		320795	1					
ANR	322148	PrimaryExpression	4		320795	1					
ANR	322149	ExpressionStatement	bits |= ( ( given >> 0 ) & 15 ) << 0	4400:3:184135:184167	320795	9	True				
ANR	322150	AssignmentExpression	bits |= ( ( given >> 0 ) & 15 ) << 0		320795	0		|=			
ANR	322151	Identifier	bits		320795	0					
ANR	322152	ShiftExpression	( ( given >> 0 ) & 15 ) << 0		320795	1		<<			
ANR	322153	BitAndExpression	( given >> 0 ) & 15		320795	0		&			
ANR	322154	ShiftExpression	given >> 0		320795	0		>>			
ANR	322155	Identifier	given		320795	0					
ANR	322156	PrimaryExpression	0		320795	1					
ANR	322157	PrimaryExpression	15		320795	1					
ANR	322158	PrimaryExpression	0		320795	1					
ANR	322159	IfStatement	if ( cmode < 8 )		320795	10					
ANR	322160	Condition	cmode < 8	4402:7:184177:184185	320795	0	True				
ANR	322161	RelationalExpression	cmode < 8		320795	0		<			
ANR	322162	Identifier	cmode		320795	0					
ANR	322163	PrimaryExpression	8		320795	1					
ANR	322164	CompoundStatement		261:5:6398:6398	320795	1					
ANR	322165	ExpressionStatement	shift = ( cmode >> 1 ) & 3	4404:7:184202:184226	320795	0	True				
ANR	322166	AssignmentExpression	shift = ( cmode >> 1 ) & 3		320795	0		=			
ANR	322167	Identifier	shift		320795	0					
ANR	322168	BitAndExpression	( cmode >> 1 ) & 3		320795	1		&			
ANR	322169	ShiftExpression	cmode >> 1		320795	0		>>			
ANR	322170	Identifier	cmode		320795	0					
ANR	322171	PrimaryExpression	1		320795	1					
ANR	322172	PrimaryExpression	3		320795	1					
ANR	322173	ExpressionStatement	value = ( unsigned long ) bits << ( 8 * shift )	4405:7:184235:184278	320795	1	True				
ANR	322174	AssignmentExpression	value = ( unsigned long ) bits << ( 8 * shift )		320795	0		=			
ANR	322175	Identifier	value		320795	0					
ANR	322176	ShiftExpression	( unsigned long ) bits << ( 8 * shift )		320795	1		<<			
ANR	322177	CastExpression	( unsigned long ) bits		320795	0					
ANR	322178	CastTarget	unsigned long		320795	0					
ANR	322179	Identifier	bits		320795	1					
ANR	322180	MultiplicativeExpression	8 * shift		320795	1		*			
ANR	322181	PrimaryExpression	8		320795	0					
ANR	322182	Identifier	shift		320795	1					
ANR	322183	ExpressionStatement	size = 32	4406:28:184308:184317	320795	2	True				
ANR	322184	AssignmentExpression	size = 32		320795	0		=			
ANR	322185	Identifier	size		320795	0					
ANR	322186	PrimaryExpression	32		320795	1					
ANR	322187	ElseStatement	else		320795	0					
ANR	322188	IfStatement	if ( cmode < 12 )		320795	0					
ANR	322189	Condition	cmode < 12	4408:12:184338:184347	320795	0	True				
ANR	322190	RelationalExpression	cmode < 12		320795	0		<			
ANR	322191	Identifier	cmode		320795	0					
ANR	322192	PrimaryExpression	12		320795	1					
ANR	322193	CompoundStatement		267:5:6560:6560	320795	1					
ANR	322194	ExpressionStatement	shift = ( cmode >> 1 ) & 1	4410:7:184364:184388	320795	0	True				
ANR	322195	AssignmentExpression	shift = ( cmode >> 1 ) & 1		320795	0		=			
ANR	322196	Identifier	shift		320795	0					
ANR	322197	BitAndExpression	( cmode >> 1 ) & 1		320795	1		&			
ANR	322198	ShiftExpression	cmode >> 1		320795	0		>>			
ANR	322199	Identifier	cmode		320795	0					
ANR	322200	PrimaryExpression	1		320795	1					
ANR	322201	PrimaryExpression	1		320795	1					
ANR	322202	ExpressionStatement	value = ( unsigned long ) bits << ( 8 * shift )	4411:7:184397:184440	320795	1	True				
ANR	322203	AssignmentExpression	value = ( unsigned long ) bits << ( 8 * shift )		320795	0		=			
ANR	322204	Identifier	value		320795	0					
ANR	322205	ShiftExpression	( unsigned long ) bits << ( 8 * shift )		320795	1		<<			
ANR	322206	CastExpression	( unsigned long ) bits		320795	0					
ANR	322207	CastTarget	unsigned long		320795	0					
ANR	322208	Identifier	bits		320795	1					
ANR	322209	MultiplicativeExpression	8 * shift		320795	1		*			
ANR	322210	PrimaryExpression	8		320795	0					
ANR	322211	Identifier	shift		320795	1					
ANR	322212	ExpressionStatement	size = 16	4412:28:184470:184479	320795	2	True				
ANR	322213	AssignmentExpression	size = 16		320795	0		=			
ANR	322214	Identifier	size		320795	0					
ANR	322215	PrimaryExpression	16		320795	1					
ANR	322216	ElseStatement	else		320795	0					
ANR	322217	IfStatement	if ( cmode < 14 )		320795	0					
ANR	322218	Condition	cmode < 14	4414:12:184500:184509	320795	0	True				
ANR	322219	RelationalExpression	cmode < 14		320795	0		<			
ANR	322220	Identifier	cmode		320795	0					
ANR	322221	PrimaryExpression	14		320795	1					
ANR	322222	CompoundStatement		273:5:6722:6722	320795	1					
ANR	322223	ExpressionStatement	shift = ( cmode & 1 ) + 1	4416:7:184526:184549	320795	0	True				
ANR	322224	AssignmentExpression	shift = ( cmode & 1 ) + 1		320795	0		=			
ANR	322225	Identifier	shift		320795	0					
ANR	322226	AdditiveExpression	( cmode & 1 ) + 1		320795	1		+			
ANR	322227	BitAndExpression	cmode & 1		320795	0		&			
ANR	322228	Identifier	cmode		320795	0					
ANR	322229	PrimaryExpression	1		320795	1					
ANR	322230	PrimaryExpression	1		320795	1					
ANR	322231	ExpressionStatement	value = ( unsigned long ) bits << ( 8 * shift )	4417:7:184558:184601	320795	1	True				
ANR	322232	AssignmentExpression	value = ( unsigned long ) bits << ( 8 * shift )		320795	0		=			
ANR	322233	Identifier	value		320795	0					
ANR	322234	ShiftExpression	( unsigned long ) bits << ( 8 * shift )		320795	1		<<			
ANR	322235	CastExpression	( unsigned long ) bits		320795	0					
ANR	322236	CastTarget	unsigned long		320795	0					
ANR	322237	Identifier	bits		320795	1					
ANR	322238	MultiplicativeExpression	8 * shift		320795	1		*			
ANR	322239	PrimaryExpression	8		320795	0					
ANR	322240	Identifier	shift		320795	1					
ANR	322241	ExpressionStatement	value |= ( 1ul << ( 8 * shift ) ) - 1	4418:7:184610:184643	320795	2	True				
ANR	322242	AssignmentExpression	value |= ( 1ul << ( 8 * shift ) ) - 1		320795	0		|=			
ANR	322243	Identifier	value		320795	0					
ANR	322244	AdditiveExpression	( 1ul << ( 8 * shift ) ) - 1		320795	1		-			
ANR	322245	ShiftExpression	1ul << ( 8 * shift )		320795	0		<<			
ANR	322246	PrimaryExpression	1ul		320795	0					
ANR	322247	MultiplicativeExpression	8 * shift		320795	1		*			
ANR	322248	PrimaryExpression	8		320795	0					
ANR	322249	Identifier	shift		320795	1					
ANR	322250	PrimaryExpression	1		320795	1					
ANR	322251	ExpressionStatement	size = 32	4419:28:184673:184682	320795	3	True				
ANR	322252	AssignmentExpression	size = 32		320795	0		=			
ANR	322253	Identifier	size		320795	0					
ANR	322254	PrimaryExpression	32		320795	1					
ANR	322255	ElseStatement	else		320795	0					
ANR	322256	IfStatement	if ( cmode == 14 )		320795	0					
ANR	322257	Condition	cmode == 14	4421:12:184703:184713	320795	0	True				
ANR	322258	EqualityExpression	cmode == 14		320795	0		==			
ANR	322259	Identifier	cmode		320795	0					
ANR	322260	PrimaryExpression	14		320795	1					
ANR	322261	CompoundStatement		280:5:6926:6926	320795	1					
ANR	322262	IfStatement	if ( op )		320795	0					
ANR	322263	Condition	op	4423:11:184734:184735	320795	0	True				
ANR	322264	Identifier	op		320795	0					
ANR	322265	CompoundStatement		285:4:7009:7027	320795	1					
ANR	322266	IdentifierDeclStatement	int ix ;	4426:4:184792:184798	320795	0	True				
ANR	322267	IdentifierDecl	ix		320795	0					
ANR	322268	IdentifierDeclType	int		320795	0					
ANR	322269	Identifier	ix		320795	1					
ANR	322270	IdentifierDeclStatement	unsigned long mask ;	4427:4:184804:184822	320795	1	True				
ANR	322271	IdentifierDecl	mask		320795	0					
ANR	322272	IdentifierDeclType	unsigned long		320795	0					
ANR	322273	Identifier	mask		320795	1					
ANR	322274	ExpressionStatement	value = 0	4429:4:184829:184838	320795	2	True				
ANR	322275	AssignmentExpression	value = 0		320795	0		=			
ANR	322276	Identifier	value		320795	0					
ANR	322277	PrimaryExpression	0		320795	1					
ANR	322278	ExpressionStatement	hival = 0	4430:32:184872:184881	320795	3	True				
ANR	322279	AssignmentExpression	hival = 0		320795	0		=			
ANR	322280	Identifier	hival		320795	0					
ANR	322281	PrimaryExpression	0		320795	1					
ANR	322282	ForStatement	for ( ix = 7 ; ix >= 0 ; ix -- )		320795	4					
ANR	322283	ForInit	ix = 7 ;	4431:9:184892:184898	320795	0	True				
ANR	322284	AssignmentExpression	ix = 7		320795	0		=			
ANR	322285	Identifier	ix		320795	0					
ANR	322286	PrimaryExpression	7		320795	1					
ANR	322287	Condition	ix >= 0	4431:17:184900:184906	320795	1	True				
ANR	322288	RelationalExpression	ix >= 0		320795	0		>=			
ANR	322289	Identifier	ix		320795	0					
ANR	322290	PrimaryExpression	0		320795	1					
ANR	322291	PostIncDecOperationExpression	ix --	4431:26:184909:184912	320795	2	True				
ANR	322292	Identifier	ix		320795	0					
ANR	322293	IncDec	--		320795	1					
ANR	322294	CompoundStatement		290:6:7126:7126	320795	3					
ANR	322295	ExpressionStatement	mask = ( ( bits >> ix ) & 1 ) ? 0xff : 0	4433:8:184931:184967	320795	0	True				
ANR	322296	AssignmentExpression	mask = ( ( bits >> ix ) & 1 ) ? 0xff : 0		320795	0		=			
ANR	322297	Identifier	mask		320795	0					
ANR	322298	ConditionalExpression	( ( bits >> ix ) & 1 ) ? 0xff : 0		320795	1					
ANR	322299	Condition	( bits >> ix ) & 1		320795	0					
ANR	322300	BitAndExpression	( bits >> ix ) & 1		320795	0		&			
ANR	322301	ShiftExpression	bits >> ix		320795	0		>>			
ANR	322302	Identifier	bits		320795	0					
ANR	322303	Identifier	ix		320795	1					
ANR	322304	PrimaryExpression	1		320795	1					
ANR	322305	PrimaryExpression	0xff		320795	1					
ANR	322306	PrimaryExpression	0		320795	2					
ANR	322307	IfStatement	if ( ix <= 3 )		320795	1					
ANR	322308	Condition	ix <= 3	4434:12:184981:184987	320795	0	True				
ANR	322309	RelationalExpression	ix <= 3		320795	0		<=			
ANR	322310	Identifier	ix		320795	0					
ANR	322311	PrimaryExpression	3		320795	1					
ANR	322312	CompoundStatement		292:21:7195:7195	320795	1					
ANR	322313	ExpressionStatement	value = ( value << 8 ) | mask	4435:9:185001:185028	320795	0	True				
ANR	322314	AssignmentExpression	value = ( value << 8 ) | mask		320795	0		=			
ANR	322315	Identifier	value		320795	0					
ANR	322316	InclusiveOrExpression	( value << 8 ) | mask		320795	1		|			
ANR	322317	ShiftExpression	value << 8		320795	0		<<			
ANR	322318	Identifier	value		320795	0					
ANR	322319	PrimaryExpression	8		320795	1					
ANR	322320	Identifier	mask		320795	1					
ANR	322321	ElseStatement	else		320795	0					
ANR	322322	CompoundStatement		294:15:7250:7250	320795	0					
ANR	322323	ExpressionStatement	hival = ( hival << 8 ) | mask	4437:9:185056:185083	320795	0	True				
ANR	322324	AssignmentExpression	hival = ( hival << 8 ) | mask		320795	0		=			
ANR	322325	Identifier	hival		320795	0					
ANR	322326	InclusiveOrExpression	( hival << 8 ) | mask		320795	1		|			
ANR	322327	ShiftExpression	hival << 8		320795	0		<<			
ANR	322328	Identifier	hival		320795	0					
ANR	322329	PrimaryExpression	8		320795	1					
ANR	322330	Identifier	mask		320795	1					
ANR	322331	ExpressionStatement	size = 64	4440:32:185135:185144	320795	5	True				
ANR	322332	AssignmentExpression	size = 64		320795	0		=			
ANR	322333	Identifier	size		320795	0					
ANR	322334	PrimaryExpression	64		320795	1					
ANR	322335	ElseStatement	else		320795	0					
ANR	322336	CompoundStatement		301:30:7425:7425	320795	0					
ANR	322337	ExpressionStatement	value = ( unsigned long ) bits	4445:32:185311:185339	320795	0	True				
ANR	322338	AssignmentExpression	value = ( unsigned long ) bits		320795	0		=			
ANR	322339	Identifier	value		320795	0					
ANR	322340	CastExpression	( unsigned long ) bits		320795	1					
ANR	322341	CastTarget	unsigned long		320795	0					
ANR	322342	Identifier	bits		320795	1					
ANR	322343	ExpressionStatement	size = 8	4446:32:185373:185381	320795	1	True				
ANR	322344	AssignmentExpression	size = 8		320795	0		=			
ANR	322345	Identifier	size		320795	0					
ANR	322346	PrimaryExpression	8		320795	1					
ANR	322347	ElseStatement	else		320795	0					
ANR	322348	IfStatement	if ( ! op )		320795	0					
ANR	322349	Condition	! op	4449:12:185434:185436	320795	0	True				
ANR	322350	UnaryOperationExpression	! op		320795	0					
ANR	322351	UnaryOperator	!		320795	0					
ANR	322352	Identifier	op		320795	1					
ANR	322353	CompoundStatement		310:7:7697:7704	320795	1					
ANR	322354	IdentifierDeclStatement	int tmp ;	4452:7:185492:185499	320795	0	True				
ANR	322355	IdentifierDecl	tmp		320795	0					
ANR	322356	IdentifierDeclType	int		320795	0					
ANR	322357	Identifier	tmp		320795	1					
ANR	322358	ExpressionStatement	value = ( unsigned long ) ( bits & 0x7f ) << 19	4454:7:185509:185553	320795	1	True				
ANR	322359	AssignmentExpression	value = ( unsigned long ) ( bits & 0x7f ) << 19		320795	0		=			
ANR	322360	Identifier	value		320795	0					
ANR	322361	ShiftExpression	( unsigned long ) ( bits & 0x7f ) << 19		320795	1		<<			
ANR	322362	CastExpression	( unsigned long ) ( bits & 0x7f )		320795	0					
ANR	322363	CastTarget	unsigned long		320795	0					
ANR	322364	BitAndExpression	bits & 0x7f		320795	1		&			
ANR	322365	Identifier	bits		320795	0					
ANR	322366	PrimaryExpression	0x7f		320795	1					
ANR	322367	PrimaryExpression	19		320795	1					
ANR	322368	ExpressionStatement	value |= ( unsigned long ) ( bits & 0x80 ) << 24	4455:7:185562:185606	320795	2	True				
ANR	322369	AssignmentExpression	value |= ( unsigned long ) ( bits & 0x80 ) << 24		320795	0		|=			
ANR	322370	Identifier	value		320795	0					
ANR	322371	ShiftExpression	( unsigned long ) ( bits & 0x80 ) << 24		320795	1		<<			
ANR	322372	CastExpression	( unsigned long ) ( bits & 0x80 )		320795	0					
ANR	322373	CastTarget	unsigned long		320795	0					
ANR	322374	BitAndExpression	bits & 0x80		320795	1		&			
ANR	322375	Identifier	bits		320795	0					
ANR	322376	PrimaryExpression	0x80		320795	1					
ANR	322377	PrimaryExpression	24		320795	1					
ANR	322378	ExpressionStatement	tmp = bits & 0x40 ? 0x3c : 0x40	4456:7:185615:185646	320795	3	True				
ANR	322379	AssignmentExpression	tmp = bits & 0x40 ? 0x3c : 0x40		320795	0		=			
ANR	322380	Identifier	tmp		320795	0					
ANR	322381	ConditionalExpression	bits & 0x40 ? 0x3c : 0x40		320795	1					
ANR	322382	Condition	bits & 0x40		320795	0					
ANR	322383	BitAndExpression	bits & 0x40		320795	0		&			
ANR	322384	Identifier	bits		320795	0					
ANR	322385	PrimaryExpression	0x40		320795	1					
ANR	322386	PrimaryExpression	0x3c		320795	1					
ANR	322387	PrimaryExpression	0x40		320795	2					
ANR	322388	ExpressionStatement	value |= ( unsigned long ) tmp << 24	4457:7:185655:185689	320795	4	True				
ANR	322389	AssignmentExpression	value |= ( unsigned long ) tmp << 24		320795	0		|=			
ANR	322390	Identifier	value		320795	0					
ANR	322391	ShiftExpression	( unsigned long ) tmp << 24		320795	1		<<			
ANR	322392	CastExpression	( unsigned long ) tmp		320795	0					
ANR	322393	CastTarget	unsigned long		320795	0					
ANR	322394	Identifier	tmp		320795	1					
ANR	322395	PrimaryExpression	24		320795	1					
ANR	322396	ExpressionStatement	size = 32	4458:28:185719:185728	320795	5	True				
ANR	322397	AssignmentExpression	size = 32		320795	0		=			
ANR	322398	Identifier	size		320795	0					
ANR	322399	PrimaryExpression	32		320795	1					
ANR	322400	ExpressionStatement	isfloat = 1	4459:28:185758:185769	320795	6	True				
ANR	322401	AssignmentExpression	isfloat = 1		320795	0		=			
ANR	322402	Identifier	isfloat		320795	0					
ANR	322403	PrimaryExpression	1		320795	1					
ANR	322404	ElseStatement	else		320795	0					
ANR	322405	CompoundStatement		320:5:7996:7996	320795	0					
ANR	322406	ExpressionStatement	"func ( stream , ""<illegal constant %.8x:%x:%x>"" , bits , cmode , op )"	4463:7:185800:185897	320795	0	True				
ANR	322407	CallExpression	"func ( stream , ""<illegal constant %.8x:%x:%x>"" , bits , cmode , op )"		320795	0					
ANR	322408	Callee	func		320795	0					
ANR	322409	Identifier	func		320795	0					
ANR	322410	ArgumentList	stream		320795	1					
ANR	322411	Argument	stream		320795	0					
ANR	322412	Identifier	stream		320795	0					
ANR	322413	Argument	"""<illegal constant %.8x:%x:%x>"""		320795	1					
ANR	322414	PrimaryExpression	"""<illegal constant %.8x:%x:%x>"""		320795	0					
ANR	322415	Argument	bits		320795	2					
ANR	322416	Identifier	bits		320795	0					
ANR	322417	Argument	cmode		320795	3					
ANR	322418	Identifier	cmode		320795	0					
ANR	322419	Argument	op		320795	4					
ANR	322420	Identifier	op		320795	0					
ANR	322421	ExpressionStatement	size = 32	4465:28:185927:185936	320795	1	True				
ANR	322422	AssignmentExpression	size = 32		320795	0		=			
ANR	322423	Identifier	size		320795	0					
ANR	322424	PrimaryExpression	32		320795	1					
ANR	322425	BreakStatement	break ;	4466:7:185945:185950	320795	2	True				
ANR	322426	SwitchStatement	switch ( size )		320795	11					
ANR	322427	Condition	size	4468:32:185991:185994	320795	0	True				
ANR	322428	Identifier	size		320795	0					
ANR	322429	CompoundStatement		327:26:8228:8228	320795	1					
ANR	322430	Label	case 8 :	4470:26:186051:186057	320795	0	True				
ANR	322431	ExpressionStatement	"func ( stream , ""%ld"" , value )"	4472:7:186122:186149	320795	1	True				
ANR	322432	CallExpression	"func ( stream , ""%ld"" , value )"		320795	0					
ANR	322433	Callee	func		320795	0					
ANR	322434	Identifier	func		320795	0					
ANR	322435	ArgumentList	stream		320795	1					
ANR	322436	Argument	stream		320795	0					
ANR	322437	Identifier	stream		320795	0					
ANR	322438	Argument	"""%ld"""		320795	1					
ANR	322439	PrimaryExpression	"""%ld"""		320795	0					
ANR	322440	Argument	value		320795	2					
ANR	322441	Identifier	value		320795	0					
ANR	322442	BreakStatement	break ;	4473:28:186179:186184	320795	2	True				
ANR	322443	Label	case 16 :	4475:26:186213:186220	320795	3	True				
ANR	322444	ExpressionStatement	"func ( stream , ""%ld"" , value )"	4477:28:186327:186354	320795	4	True				
ANR	322445	CallExpression	"func ( stream , ""%ld"" , value )"		320795	0					
ANR	322446	Callee	func		320795	0					
ANR	322447	Identifier	func		320795	0					
ANR	322448	ArgumentList	stream		320795	1					
ANR	322449	Argument	stream		320795	0					
ANR	322450	Identifier	stream		320795	0					
ANR	322451	Argument	"""%ld"""		320795	1					
ANR	322452	PrimaryExpression	"""%ld"""		320795	0					
ANR	322453	Argument	value		320795	2					
ANR	322454	Identifier	value		320795	0					
ANR	322455	BreakStatement	break ;	4478:28:186384:186389	320795	5	True				
ANR	322456	Label	case 32 :	4480:26:186418:186425	320795	6	True				
ANR	322457	IfStatement	if ( isfloat )		320795	7					
ANR	322458	Condition	isfloat	4481:32:186459:186465	320795	0	True				
ANR	322459	Identifier	isfloat		320795	0					
ANR	322460	CompoundStatement		342:32:8796:8809	320795	1					
ANR	322461	IdentifierDeclStatement	unsigned char valbytes [ 4 ] ;	4483:32:186532:186557	320795	0	True				
ANR	322462	IdentifierDecl	valbytes [ 4 ]		320795	0					
ANR	322463	IdentifierDeclType	unsigned char [ 4 ]		320795	0					
ANR	322464	Identifier	valbytes		320795	1					
ANR	322465	PrimaryExpression	4		320795	2					
ANR	322466	IdentifierDeclStatement	double fvalue ;	4484:32:186591:186604	320795	1	True				
ANR	322467	IdentifierDecl	fvalue		320795	0					
ANR	322468	IdentifierDeclType	double		320795	0					
ANR	322469	Identifier	fvalue		320795	1					
ANR	322470	ExpressionStatement	valbytes [ 0 ] = value & 0xff	4488:32:186793:186819	320795	2	True				
ANR	322471	AssignmentExpression	valbytes [ 0 ] = value & 0xff		320795	0		=			
ANR	322472	ArrayIndexing	valbytes [ 0 ]		320795	0					
ANR	322473	Identifier	valbytes		320795	0					
ANR	322474	PrimaryExpression	0		320795	1					
ANR	322475	BitAndExpression	value & 0xff		320795	1		&			
ANR	322476	Identifier	value		320795	0					
ANR	322477	PrimaryExpression	0xff		320795	1					
ANR	322478	ExpressionStatement	valbytes [ 1 ] = ( value >> 8 ) & 0xff	4489:32:186853:186886	320795	3	True				
ANR	322479	AssignmentExpression	valbytes [ 1 ] = ( value >> 8 ) & 0xff		320795	0		=			
ANR	322480	ArrayIndexing	valbytes [ 1 ]		320795	0					
ANR	322481	Identifier	valbytes		320795	0					
ANR	322482	PrimaryExpression	1		320795	1					
ANR	322483	BitAndExpression	( value >> 8 ) & 0xff		320795	1		&			
ANR	322484	ShiftExpression	value >> 8		320795	0		>>			
ANR	322485	Identifier	value		320795	0					
ANR	322486	PrimaryExpression	8		320795	1					
ANR	322487	PrimaryExpression	0xff		320795	1					
ANR	322488	ExpressionStatement	valbytes [ 2 ] = ( value >> 16 ) & 0xff	4490:32:186920:186954	320795	4	True				
ANR	322489	AssignmentExpression	valbytes [ 2 ] = ( value >> 16 ) & 0xff		320795	0		=			
ANR	322490	ArrayIndexing	valbytes [ 2 ]		320795	0					
ANR	322491	Identifier	valbytes		320795	0					
ANR	322492	PrimaryExpression	2		320795	1					
ANR	322493	BitAndExpression	( value >> 16 ) & 0xff		320795	1		&			
ANR	322494	ShiftExpression	value >> 16		320795	0		>>			
ANR	322495	Identifier	value		320795	0					
ANR	322496	PrimaryExpression	16		320795	1					
ANR	322497	PrimaryExpression	0xff		320795	1					
ANR	322498	ExpressionStatement	valbytes [ 3 ] = ( value >> 24 ) & 0xff	4491:32:186988:187022	320795	5	True				
ANR	322499	AssignmentExpression	valbytes [ 3 ] = ( value >> 24 ) & 0xff		320795	0		=			
ANR	322500	ArrayIndexing	valbytes [ 3 ]		320795	0					
ANR	322501	Identifier	valbytes		320795	0					
ANR	322502	PrimaryExpression	3		320795	1					
ANR	322503	BitAndExpression	( value >> 24 ) & 0xff		320795	1		&			
ANR	322504	ShiftExpression	value >> 24		320795	0		>>			
ANR	322505	Identifier	value		320795	0					
ANR	322506	PrimaryExpression	24		320795	1					
ANR	322507	PrimaryExpression	0xff		320795	1					
ANR	322508	ExpressionStatement	"floatformat_to_double ( & floatformat_ieee_single_little , valbytes , & fvalue )"	4493:32:187057:187201	320795	6	True				
ANR	322509	CallExpression	"floatformat_to_double ( & floatformat_ieee_single_little , valbytes , & fvalue )"		320795	0					
ANR	322510	Callee	floatformat_to_double		320795	0					
ANR	322511	Identifier	floatformat_to_double		320795	0					
ANR	322512	ArgumentList	& floatformat_ieee_single_little		320795	1					
ANR	322513	Argument	& floatformat_ieee_single_little		320795	0					
ANR	322514	UnaryOperationExpression	& floatformat_ieee_single_little		320795	0					
ANR	322515	UnaryOperator	&		320795	0					
ANR	322516	Identifier	floatformat_ieee_single_little		320795	1					
ANR	322517	Argument	valbytes		320795	1					
ANR	322518	Identifier	valbytes		320795	0					
ANR	322519	Argument	& fvalue		320795	2					
ANR	322520	UnaryOperationExpression	& fvalue		320795	0					
ANR	322521	UnaryOperator	&		320795	0					
ANR	322522	Identifier	fvalue		320795	1					
ANR	322523	ExpressionStatement	"func ( stream , ""%.7g ; 0x%.8lx"" , fvalue , value )"	4497:32:187236:187320	320795	7	True				
ANR	322524	CallExpression	"func ( stream , ""%.7g ; 0x%.8lx"" , fvalue , value )"		320795	0					
ANR	322525	Callee	func		320795	0					
ANR	322526	Identifier	func		320795	0					
ANR	322527	ArgumentList	stream		320795	1					
ANR	322528	Argument	stream		320795	0					
ANR	322529	Identifier	stream		320795	0					
ANR	322530	Argument	"""%.7g ; 0x%.8lx"""		320795	1					
ANR	322531	PrimaryExpression	"""%.7g ; 0x%.8lx"""		320795	0					
ANR	322532	Argument	fvalue		320795	2					
ANR	322533	Identifier	fvalue		320795	0					
ANR	322534	Argument	value		320795	3					
ANR	322535	Identifier	value		320795	0					
ANR	322536	ElseStatement	else		320795	0					
ANR	322537	CompoundStatement		357:14:9541:9541	320795	0					
ANR	322538	ExpressionStatement	"func ( stream , ""%ld ; 0x%.8lx"" , ( long ) ( ( ( value & 0x80000000L ) != 0 ) ? value | ~0xffffffffL : value ) , value )"	4500:8:187346:187492	320795	0	True				
ANR	322539	CallExpression	"func ( stream , ""%ld ; 0x%.8lx"" , ( long ) ( ( ( value & 0x80000000L ) != 0 ) ? value | ~0xffffffffL : value ) , value )"		320795	0					
ANR	322540	Callee	func		320795	0					
ANR	322541	Identifier	func		320795	0					
ANR	322542	ArgumentList	stream		320795	1					
ANR	322543	Argument	stream		320795	0					
ANR	322544	Identifier	stream		320795	0					
ANR	322545	Argument	"""%ld ; 0x%.8lx"""		320795	1					
ANR	322546	PrimaryExpression	"""%ld ; 0x%.8lx"""		320795	0					
ANR	322547	Argument	( long ) ( ( ( value & 0x80000000L ) != 0 ) ? value | ~0xffffffffL : value )		320795	2					
ANR	322548	CastExpression	( long ) ( ( ( value & 0x80000000L ) != 0 ) ? value | ~0xffffffffL : value )		320795	0					
ANR	322549	CastTarget	long		320795	0					
ANR	322550	ConditionalExpression	( ( value & 0x80000000L ) != 0 ) ? value | ~0xffffffffL : value		320795	1					
ANR	322551	Condition	( value & 0x80000000L ) != 0		320795	0					
ANR	322552	EqualityExpression	( value & 0x80000000L ) != 0		320795	0		!=			
ANR	322553	BitAndExpression	value & 0x80000000L		320795	0		&			
ANR	322554	Identifier	value		320795	0					
ANR	322555	PrimaryExpression	0x80000000L		320795	1					
ANR	322556	PrimaryExpression	0		320795	1					
ANR	322557	InclusiveOrExpression	value | ~0xffffffffL		320795	1		|			
ANR	322558	Identifier	value		320795	0					
ANR	322559	Identifier	~0xffffffffL		320795	1					
ANR	322560	Identifier	value		320795	2					
ANR	322561	Argument	value		320795	3					
ANR	322562	Identifier	value		320795	0					
ANR	322563	BreakStatement	break ;	4506:7:187510:187515	320795	8	True				
ANR	322564	Label	case 64 :	4508:26:187544:187551	320795	9	True				
ANR	322565	ExpressionStatement	"func ( stream , ""#0x%.8lx%.8lx"" , hival , value )"	4509:28:187581:187625	320795	10	True				
ANR	322566	CallExpression	"func ( stream , ""#0x%.8lx%.8lx"" , hival , value )"		320795	0					
ANR	322567	Callee	func		320795	0					
ANR	322568	Identifier	func		320795	0					
ANR	322569	ArgumentList	stream		320795	1					
ANR	322570	Argument	stream		320795	0					
ANR	322571	Identifier	stream		320795	0					
ANR	322572	Argument	"""#0x%.8lx%.8lx"""		320795	1					
ANR	322573	PrimaryExpression	"""#0x%.8lx%.8lx"""		320795	0					
ANR	322574	Argument	hival		320795	2					
ANR	322575	Identifier	hival		320795	0					
ANR	322576	Argument	value		320795	3					
ANR	322577	Identifier	value		320795	0					
ANR	322578	BreakStatement	break ;	4510:28:187655:187660	320795	11	True				
ANR	322579	BreakStatement	break ;	4513:8:187708:187713	320795	22	True				
ANR	322580	Label	case 'F' :	4515:6:187722:187730	320795	23	True				
ANR	322581	CompoundStatement		376:3:10018:10046	320795	24					
ANR	322582	IdentifierDeclStatement	int regno = ( ( given >> 16 ) & 0xf ) | ( ( given >> ( 7 - 4 ) ) & 0x10 ) ;	4517:3:187745:187808	320795	0	True				
ANR	322583	IdentifierDecl	regno = ( ( given >> 16 ) & 0xf ) | ( ( given >> ( 7 - 4 ) ) & 0x10 )		320795	0					
ANR	322584	IdentifierDeclType	int		320795	0					
ANR	322585	Identifier	regno		320795	1					
ANR	322586	AssignmentExpression	regno = ( ( given >> 16 ) & 0xf ) | ( ( given >> ( 7 - 4 ) ) & 0x10 )		320795	2		=			
ANR	322587	Identifier	regno		320795	0					
ANR	322588	InclusiveOrExpression	( ( given >> 16 ) & 0xf ) | ( ( given >> ( 7 - 4 ) ) & 0x10 )		320795	1		|			
ANR	322589	BitAndExpression	( given >> 16 ) & 0xf		320795	0		&			
ANR	322590	ShiftExpression	given >> 16		320795	0		>>			
ANR	322591	Identifier	given		320795	0					
ANR	322592	PrimaryExpression	16		320795	1					
ANR	322593	PrimaryExpression	0xf		320795	1					
ANR	322594	BitAndExpression	( given >> ( 7 - 4 ) ) & 0x10		320795	1		&			
ANR	322595	ShiftExpression	given >> ( 7 - 4 )		320795	0		>>			
ANR	322596	Identifier	given		320795	0					
ANR	322597	AdditiveExpression	7 - 4		320795	1		-			
ANR	322598	PrimaryExpression	7		320795	0					
ANR	322599	PrimaryExpression	4		320795	1					
ANR	322600	PrimaryExpression	0x10		320795	1					
ANR	322601	IdentifierDeclStatement	int num = ( given >> 8 ) & 0x3 ;	4518:3:187813:187841	320795	1	True				
ANR	322602	IdentifierDecl	num = ( given >> 8 ) & 0x3		320795	0					
ANR	322603	IdentifierDeclType	int		320795	0					
ANR	322604	Identifier	num		320795	1					
ANR	322605	AssignmentExpression	num = ( given >> 8 ) & 0x3		320795	2		=			
ANR	322606	Identifier	num		320795	0					
ANR	322607	BitAndExpression	( given >> 8 ) & 0x3		320795	1		&			
ANR	322608	ShiftExpression	given >> 8		320795	0		>>			
ANR	322609	Identifier	given		320795	0					
ANR	322610	PrimaryExpression	8		320795	1					
ANR	322611	PrimaryExpression	0x3		320795	1					
ANR	322612	IfStatement	if ( ! num )		320795	2					
ANR	322613	Condition	! num	4520:7:187851:187854	320795	0	True				
ANR	322614	UnaryOperationExpression	! num		320795	0					
ANR	322615	UnaryOperator	!		320795	0					
ANR	322616	Identifier	num		320795	1					
ANR	322617	CompoundStatement		378:13:10062:10062	320795	1					
ANR	322618	ExpressionStatement	"func ( stream , ""{d%d}"" , regno )"	4521:4:187863:187892	320795	0	True				
ANR	322619	CallExpression	"func ( stream , ""{d%d}"" , regno )"		320795	0					
ANR	322620	Callee	func		320795	0					
ANR	322621	Identifier	func		320795	0					
ANR	322622	ArgumentList	stream		320795	1					
ANR	322623	Argument	stream		320795	0					
ANR	322624	Identifier	stream		320795	0					
ANR	322625	Argument	"""{d%d}"""		320795	1					
ANR	322626	PrimaryExpression	"""{d%d}"""		320795	0					
ANR	322627	Argument	regno		320795	2					
ANR	322628	Identifier	regno		320795	0					
ANR	322629	ElseStatement	else		320795	0					
ANR	322630	IfStatement	if ( num + regno >= 32 )		320795	0					
ANR	322631	Condition	num + regno >= 32	4522:14:187908:187924	320795	0	True				
ANR	322632	RelationalExpression	num + regno >= 32		320795	0		>=			
ANR	322633	AdditiveExpression	num + regno		320795	0		+			
ANR	322634	Identifier	num		320795	0					
ANR	322635	Identifier	regno		320795	1					
ANR	322636	PrimaryExpression	32		320795	1					
ANR	322637	CompoundStatement		380:33:10132:10132	320795	1					
ANR	322638	ExpressionStatement	"func ( stream , ""{d%d-<overflow reg d%d}"" , regno , regno + num )"	4523:4:187933:187993	320795	0	True				
ANR	322639	CallExpression	"func ( stream , ""{d%d-<overflow reg d%d}"" , regno , regno + num )"		320795	0					
ANR	322640	Callee	func		320795	0					
ANR	322641	Identifier	func		320795	0					
ANR	322642	ArgumentList	stream		320795	1					
ANR	322643	Argument	stream		320795	0					
ANR	322644	Identifier	stream		320795	0					
ANR	322645	Argument	"""{d%d-<overflow reg d%d}"""		320795	1					
ANR	322646	PrimaryExpression	"""{d%d-<overflow reg d%d}"""		320795	0					
ANR	322647	Argument	regno		320795	2					
ANR	322648	Identifier	regno		320795	0					
ANR	322649	Argument	regno + num		320795	3					
ANR	322650	AdditiveExpression	regno + num		320795	0		+			
ANR	322651	Identifier	regno		320795	0					
ANR	322652	Identifier	num		320795	1					
ANR	322653	ElseStatement	else		320795	0					
ANR	322654	CompoundStatement		382:10:10210:10210	320795	0					
ANR	322655	ExpressionStatement	"func ( stream , ""{d%d-d%d}"" , regno , regno + num )"	4525:4:188011:188057	320795	0	True				
ANR	322656	CallExpression	"func ( stream , ""{d%d-d%d}"" , regno , regno + num )"		320795	0					
ANR	322657	Callee	func		320795	0					
ANR	322658	Identifier	func		320795	0					
ANR	322659	ArgumentList	stream		320795	1					
ANR	322660	Argument	stream		320795	0					
ANR	322661	Identifier	stream		320795	0					
ANR	322662	Argument	"""{d%d-d%d}"""		320795	1					
ANR	322663	PrimaryExpression	"""{d%d-d%d}"""		320795	0					
ANR	322664	Argument	regno		320795	2					
ANR	322665	Identifier	regno		320795	0					
ANR	322666	Argument	regno + num		320795	3					
ANR	322667	AdditiveExpression	regno + num		320795	0		+			
ANR	322668	Identifier	regno		320795	0					
ANR	322669	Identifier	num		320795	1					
ANR	322670	BreakStatement	break ;	4528:8:188082:188087	320795	25	True				
ANR	322671	Label	case '0' :	4531:6:188097:188105	320795	26	True				
ANR	322672	Label	case '1' :	4531:16:188107:188115	320795	27	True				
ANR	322673	Label	case '2' :	4531:26:188117:188125	320795	28	True				
ANR	322674	Label	case '3' :	4531:36:188127:188135	320795	29	True				
ANR	322675	Label	case '4' :	4531:46:188137:188145	320795	30	True				
ANR	322676	Label	case '5' :	4532:6:188153:188161	320795	31	True				
ANR	322677	Label	case '6' :	4532:16:188163:188171	320795	32	True				
ANR	322678	Label	case '7' :	4532:26:188173:188181	320795	33	True				
ANR	322679	Label	case '8' :	4532:36:188183:188191	320795	34	True				
ANR	322680	Label	case '9' :	4532:46:188193:188201	320795	35	True				
ANR	322681	CompoundStatement		393:3:10435:10454	320795	36					
ANR	322682	IdentifierDeclStatement	int width ;	4534:3:188216:188225	320795	0	True				
ANR	322683	IdentifierDecl	width		320795	0					
ANR	322684	IdentifierDeclType	int		320795	0					
ANR	322685	Identifier	width		320795	1					
ANR	322686	IdentifierDeclStatement	unsigned long value ;	4535:3:188230:188249	320795	1	True				
ANR	322687	IdentifierDecl	value		320795	0					
ANR	322688	IdentifierDeclType	unsigned long		320795	0					
ANR	322689	Identifier	value		320795	1					
ANR	322690	ExpressionStatement	"c = arm_decode_bitfield ( c , given , & value , & width )"	4537:3:188255:188305	320795	2	True				
ANR	322691	AssignmentExpression	"c = arm_decode_bitfield ( c , given , & value , & width )"		320795	0		=			
ANR	322692	Identifier	c		320795	0					
ANR	322693	CallExpression	"arm_decode_bitfield ( c , given , & value , & width )"		320795	1					
ANR	322694	Callee	arm_decode_bitfield		320795	0					
ANR	322695	Identifier	arm_decode_bitfield		320795	0					
ANR	322696	ArgumentList	c		320795	1					
ANR	322697	Argument	c		320795	0					
ANR	322698	Identifier	c		320795	0					
ANR	322699	Argument	given		320795	1					
ANR	322700	Identifier	given		320795	0					
ANR	322701	Argument	& value		320795	2					
ANR	322702	UnaryOperationExpression	& value		320795	0					
ANR	322703	UnaryOperator	&		320795	0					
ANR	322704	Identifier	value		320795	1					
ANR	322705	Argument	& width		320795	3					
ANR	322706	UnaryOperationExpression	& width		320795	0					
ANR	322707	UnaryOperator	&		320795	0					
ANR	322708	Identifier	width		320795	1					
ANR	322709	SwitchStatement	switch ( * c )		320795	3					
ANR	322710	Condition	* c	4539:11:188319:188320	320795	0	True				
ANR	322711	UnaryOperationExpression	* c		320795	0					
ANR	322712	UnaryOperator	*		320795	0					
ANR	322713	Identifier	c		320795	1					
ANR	322714	CompoundStatement		398:5:10533:10533	320795	1					
ANR	322715	Label	case 'r' :	4541:5:188335:188343	320795	0	True				
ANR	322716	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ value ] )"	4542:7:188352:188392	320795	1	True				
ANR	322717	CallExpression	"func ( stream , ""%s"" , arm_regnames [ value ] )"		320795	0					
ANR	322718	Callee	func		320795	0					
ANR	322719	Identifier	func		320795	0					
ANR	322720	ArgumentList	stream		320795	1					
ANR	322721	Argument	stream		320795	0					
ANR	322722	Identifier	stream		320795	0					
ANR	322723	Argument	"""%s"""		320795	1					
ANR	322724	PrimaryExpression	"""%s"""		320795	0					
ANR	322725	Argument	arm_regnames [ value ]		320795	2					
ANR	322726	ArrayIndexing	arm_regnames [ value ]		320795	0					
ANR	322727	Identifier	arm_regnames		320795	0					
ANR	322728	Identifier	value		320795	1					
ANR	322729	BreakStatement	break ;	4543:7:188401:188406	320795	2	True				
ANR	322730	Label	case 'd' :	4544:5:188413:188421	320795	3	True				
ANR	322731	ExpressionStatement	"func ( stream , ""%ld"" , value )"	4545:7:188430:188457	320795	4	True				
ANR	322732	CallExpression	"func ( stream , ""%ld"" , value )"		320795	0					
ANR	322733	Callee	func		320795	0					
ANR	322734	Identifier	func		320795	0					
ANR	322735	ArgumentList	stream		320795	1					
ANR	322736	Argument	stream		320795	0					
ANR	322737	Identifier	stream		320795	0					
ANR	322738	Argument	"""%ld"""		320795	1					
ANR	322739	PrimaryExpression	"""%ld"""		320795	0					
ANR	322740	Argument	value		320795	2					
ANR	322741	Identifier	value		320795	0					
ANR	322742	BreakStatement	break ;	4547:7:188502:188507	320795	5	True				
ANR	322743	Label	case 'e' :	4548:5:188514:188522	320795	6	True				
ANR	322744	ExpressionStatement	"func ( stream , ""%ld"" , ( 1ul << width ) - value )"	4549:7:188531:188575	320795	7	True				
ANR	322745	CallExpression	"func ( stream , ""%ld"" , ( 1ul << width ) - value )"		320795	0					
ANR	322746	Callee	func		320795	0					
ANR	322747	Identifier	func		320795	0					
ANR	322748	ArgumentList	stream		320795	1					
ANR	322749	Argument	stream		320795	0					
ANR	322750	Identifier	stream		320795	0					
ANR	322751	Argument	"""%ld"""		320795	1					
ANR	322752	PrimaryExpression	"""%ld"""		320795	0					
ANR	322753	Argument	( 1ul << width ) - value		320795	2					
ANR	322754	AdditiveExpression	( 1ul << width ) - value		320795	0		-			
ANR	322755	ShiftExpression	1ul << width		320795	0		<<			
ANR	322756	PrimaryExpression	1ul		320795	0					
ANR	322757	Identifier	width		320795	1					
ANR	322758	Identifier	value		320795	1					
ANR	322759	BreakStatement	break ;	4550:7:188584:188589	320795	8	True				
ANR	322760	Label	case 'S' :	4552:5:188597:188605	320795	9	True				
ANR	322761	Label	case 'T' :	4553:5:188612:188620	320795	10	True				
ANR	322762	Label	case 'U' :	4554:5:188627:188635	320795	11	True				
ANR	322763	CompoundStatement		417:9:10973:10991	320795	12					
ANR	322764	IdentifierDeclStatement	int base = 8 << ( * c - 'S' ) ;	4557:9:188694:188720	320795	0	True				
ANR	322765	IdentifierDecl	base = 8 << ( * c - 'S' )		320795	0					
ANR	322766	IdentifierDeclType	int		320795	0					
ANR	322767	Identifier	base		320795	1					
ANR	322768	AssignmentExpression	base = 8 << ( * c - 'S' )		320795	2		=			
ANR	322769	Identifier	base		320795	0					
ANR	322770	ShiftExpression	8 << ( * c - 'S' )		320795	1		<<			
ANR	322771	PrimaryExpression	8		320795	0					
ANR	322772	AdditiveExpression	* c - 'S'		320795	1		-			
ANR	322773	UnaryOperationExpression	* c		320795	0					
ANR	322774	UnaryOperator	*		320795	0					
ANR	322775	Identifier	c		320795	1					
ANR	322776	PrimaryExpression	'S'		320795	1					
ANR	322777	IdentifierDeclStatement	int limit ;	4558:9:188748:188757	320795	1	True				
ANR	322778	IdentifierDecl	limit		320795	0					
ANR	322779	IdentifierDeclType	int		320795	0					
ANR	322780	Identifier	limit		320795	1					
ANR	322781	IdentifierDeclStatement	"unsigned low , high ;"	4559:9:188768:188786	320795	2	True				
ANR	322782	IdentifierDecl	low		320795	0					
ANR	322783	IdentifierDeclType	unsigned		320795	0					
ANR	322784	Identifier	low		320795	1					
ANR	322785	IdentifierDecl	high		320795	1					
ANR	322786	IdentifierDeclType	unsigned		320795	0					
ANR	322787	Identifier	high		320795	1					
ANR	322788	ExpressionStatement	c ++	4561:9:188798:188801	320795	3	True				
ANR	322789	PostIncDecOperationExpression	c ++		320795	0					
ANR	322790	Identifier	c		320795	0					
ANR	322791	IncDec	++		320795	1					
ANR	322792	IfStatement	if ( * c >= '0' && * c <= '9' )		320795	4					
ANR	322793	Condition	* c >= '0' && * c <= '9'	4562:13:188816:188837	320795	0	True				
ANR	322794	AndExpression	* c >= '0' && * c <= '9'		320795	0		&&			
ANR	322795	RelationalExpression	* c >= '0'		320795	0		>=			
ANR	322796	UnaryOperationExpression	* c		320795	0					
ANR	322797	UnaryOperator	*		320795	0					
ANR	322798	Identifier	c		320795	1					
ANR	322799	PrimaryExpression	'0'		320795	1					
ANR	322800	RelationalExpression	* c <= '9'		320795	1		<=			
ANR	322801	UnaryOperationExpression	* c		320795	0					
ANR	322802	UnaryOperator	*		320795	0					
ANR	322803	Identifier	c		320795	1					
ANR	322804	PrimaryExpression	'9'		320795	1					
ANR	322805	CompoundStatement		420:37:11045:11045	320795	1					
ANR	322806	ExpressionStatement	limit = * c - '0'	4563:10:188852:188868	320795	0	True				
ANR	322807	AssignmentExpression	limit = * c - '0'		320795	0		=			
ANR	322808	Identifier	limit		320795	0					
ANR	322809	AdditiveExpression	* c - '0'		320795	1		-			
ANR	322810	UnaryOperationExpression	* c		320795	0					
ANR	322811	UnaryOperator	*		320795	0					
ANR	322812	Identifier	c		320795	1					
ANR	322813	PrimaryExpression	'0'		320795	1					
ANR	322814	ElseStatement	else		320795	0					
ANR	322815	IfStatement	if ( * c >= 'a' && * c <= 'f' )		320795	0					
ANR	322816	Condition	* c >= 'a' && * c <= 'f'	4564:20:188890:188911	320795	0	True				
ANR	322817	AndExpression	* c >= 'a' && * c <= 'f'		320795	0		&&			
ANR	322818	RelationalExpression	* c >= 'a'		320795	0		>=			
ANR	322819	UnaryOperationExpression	* c		320795	0					
ANR	322820	UnaryOperator	*		320795	0					
ANR	322821	Identifier	c		320795	1					
ANR	322822	PrimaryExpression	'a'		320795	1					
ANR	322823	RelationalExpression	* c <= 'f'		320795	1		<=			
ANR	322824	UnaryOperationExpression	* c		320795	0					
ANR	322825	UnaryOperator	*		320795	0					
ANR	322826	Identifier	c		320795	1					
ANR	322827	PrimaryExpression	'f'		320795	1					
ANR	322828	CompoundStatement		422:44:11119:11119	320795	1					
ANR	322829	ExpressionStatement	limit = * c - 'a' + 10	4565:10:188926:188947	320795	0	True				
ANR	322830	AssignmentExpression	limit = * c - 'a' + 10		320795	0		=			
ANR	322831	Identifier	limit		320795	0					
ANR	322832	AdditiveExpression	* c - 'a' + 10		320795	1		-			
ANR	322833	UnaryOperationExpression	* c		320795	0					
ANR	322834	UnaryOperator	*		320795	0					
ANR	322835	Identifier	c		320795	1					
ANR	322836	AdditiveExpression	'a' + 10		320795	1		+			
ANR	322837	PrimaryExpression	'a'		320795	0					
ANR	322838	PrimaryExpression	10		320795	1					
ANR	322839	ElseStatement	else		320795	0					
ANR	322840	CompoundStatement		424:16:11170:11170	320795	0					
ANR	322841	ReturnStatement	return FALSE ;	4567:10:188977:188989	320795	0	True				
ANR	322842	Identifier	FALSE		320795	0					
ANR	322843	ExpressionStatement	low = limit >> 2	4569:9:189011:189027	320795	5	True				
ANR	322844	AssignmentExpression	low = limit >> 2		320795	0		=			
ANR	322845	Identifier	low		320795	0					
ANR	322846	ShiftExpression	limit >> 2		320795	1		>>			
ANR	322847	Identifier	limit		320795	0					
ANR	322848	PrimaryExpression	2		320795	1					
ANR	322849	ExpressionStatement	high = limit & 3	4570:9:189038:189054	320795	6	True				
ANR	322850	AssignmentExpression	high = limit & 3		320795	0		=			
ANR	322851	Identifier	high		320795	0					
ANR	322852	BitAndExpression	limit & 3		320795	1		&			
ANR	322853	Identifier	limit		320795	0					
ANR	322854	PrimaryExpression	3		320795	1					
ANR	322855	IfStatement	if ( value < low || value > high )		320795	7					
ANR	322856	Condition	value < low || value > high	4572:13:189070:189096	320795	0	True				
ANR	322857	OrExpression	value < low || value > high		320795	0		||			
ANR	322858	RelationalExpression	value < low		320795	0		<			
ANR	322859	Identifier	value		320795	0					
ANR	322860	Identifier	low		320795	1					
ANR	322861	RelationalExpression	value > high		320795	1		>			
ANR	322862	Identifier	value		320795	0					
ANR	322863	Identifier	high		320795	1					
ANR	322864	CompoundStatement		430:42:11304:11304	320795	1					
ANR	322865	ExpressionStatement	"func ( stream , ""<illegal width %d>"" , base << value )"	4573:10:189111:189161	320795	0	True				
ANR	322866	CallExpression	"func ( stream , ""<illegal width %d>"" , base << value )"		320795	0					
ANR	322867	Callee	func		320795	0					
ANR	322868	Identifier	func		320795	0					
ANR	322869	ArgumentList	stream		320795	1					
ANR	322870	Argument	stream		320795	0					
ANR	322871	Identifier	stream		320795	0					
ANR	322872	Argument	"""<illegal width %d>"""		320795	1					
ANR	322873	PrimaryExpression	"""<illegal width %d>"""		320795	0					
ANR	322874	Argument	base << value		320795	2					
ANR	322875	ShiftExpression	base << value		320795	0		<<			
ANR	322876	Identifier	base		320795	0					
ANR	322877	Identifier	value		320795	1					
ANR	322878	ElseStatement	else		320795	0					
ANR	322879	CompoundStatement		432:16:11384:11384	320795	0					
ANR	322880	ExpressionStatement	"func ( stream , ""%d"" , base << value )"	4575:10:189191:189225	320795	0	True				
ANR	322881	CallExpression	"func ( stream , ""%d"" , base << value )"		320795	0					
ANR	322882	Callee	func		320795	0					
ANR	322883	Identifier	func		320795	0					
ANR	322884	ArgumentList	stream		320795	1					
ANR	322885	Argument	stream		320795	0					
ANR	322886	Identifier	stream		320795	0					
ANR	322887	Argument	"""%d"""		320795	1					
ANR	322888	PrimaryExpression	"""%d"""		320795	0					
ANR	322889	Argument	base << value		320795	2					
ANR	322890	ShiftExpression	base << value		320795	0		<<			
ANR	322891	Identifier	base		320795	0					
ANR	322892	Identifier	value		320795	1					
ANR	322893	BreakStatement	break ;	4578:7:189254:189259	320795	13	True				
ANR	322894	Label	case 'R' :	4579:5:189266:189274	320795	14	True				
ANR	322895	IfStatement	if ( given & ( 1 << 6 ) )		320795	15					
ANR	322896	Condition	given & ( 1 << 6 )	4580:10:189286:189301	320795	0	True				
ANR	322897	BitAndExpression	given & ( 1 << 6 )		320795	0		&			
ANR	322898	Identifier	given		320795	0					
ANR	322899	ShiftExpression	1 << 6		320795	1		<<			
ANR	322900	PrimaryExpression	1		320795	0					
ANR	322901	PrimaryExpression	6		320795	1					
ANR	322902	CompoundStatement		438:28:11509:11509	320795	1					
ANR	322903	GotoStatement	goto Q ;	4581:7:189313:189319	320795	0	True				
ANR	322904	Identifier	Q		320795	0					
ANR	322905	Label	case 'D' :	4584:5:189358:189366	320795	16	True				
ANR	322906	ExpressionStatement	"func ( stream , ""d%ld"" , value )"	4585:7:189375:189403	320795	17	True				
ANR	322907	CallExpression	"func ( stream , ""d%ld"" , value )"		320795	0					
ANR	322908	Callee	func		320795	0					
ANR	322909	Identifier	func		320795	0					
ANR	322910	ArgumentList	stream		320795	1					
ANR	322911	Argument	stream		320795	0					
ANR	322912	Identifier	stream		320795	0					
ANR	322913	Argument	"""d%ld"""		320795	1					
ANR	322914	PrimaryExpression	"""d%ld"""		320795	0					
ANR	322915	Argument	value		320795	2					
ANR	322916	Identifier	value		320795	0					
ANR	322917	BreakStatement	break ;	4586:7:189412:189417	320795	18	True				
ANR	322918	Label	case 'Q' :	4587:5:189424:189432	320795	19	True				
ANR	322919	Label	Q :	4588:5:189439:189440	320795	20	True				
ANR	322920	Identifier	Q		320795	0					
ANR	322921	IfStatement	if ( value & 1 )		320795	21					
ANR	322922	Condition	value & 1	4589:10:189452:189460	320795	0	True				
ANR	322923	BitAndExpression	value & 1		320795	0		&			
ANR	322924	Identifier	value		320795	0					
ANR	322925	PrimaryExpression	1		320795	1					
ANR	322926	CompoundStatement		447:21:11668:11668	320795	1					
ANR	322927	ExpressionStatement	"func ( stream , ""<illegal reg q%ld.5>"" , value >> 1 )"	4590:7:189472:189521	320795	0	True				
ANR	322928	CallExpression	"func ( stream , ""<illegal reg q%ld.5>"" , value >> 1 )"		320795	0					
ANR	322929	Callee	func		320795	0					
ANR	322930	Identifier	func		320795	0					
ANR	322931	ArgumentList	stream		320795	1					
ANR	322932	Argument	stream		320795	0					
ANR	322933	Identifier	stream		320795	0					
ANR	322934	Argument	"""<illegal reg q%ld.5>"""		320795	1					
ANR	322935	PrimaryExpression	"""<illegal reg q%ld.5>"""		320795	0					
ANR	322936	Argument	value >> 1		320795	2					
ANR	322937	ShiftExpression	value >> 1		320795	0		>>			
ANR	322938	Identifier	value		320795	0					
ANR	322939	PrimaryExpression	1		320795	1					
ANR	322940	ElseStatement	else		320795	0					
ANR	322941	CompoundStatement		449:13:11741:11741	320795	0					
ANR	322942	ExpressionStatement	"func ( stream , ""q%ld"" , value >> 1 )"	4592:7:189545:189578	320795	0	True				
ANR	322943	CallExpression	"func ( stream , ""q%ld"" , value >> 1 )"		320795	0					
ANR	322944	Callee	func		320795	0					
ANR	322945	Identifier	func		320795	0					
ANR	322946	ArgumentList	stream		320795	1					
ANR	322947	Argument	stream		320795	0					
ANR	322948	Identifier	stream		320795	0					
ANR	322949	Argument	"""q%ld"""		320795	1					
ANR	322950	PrimaryExpression	"""q%ld"""		320795	0					
ANR	322951	Argument	value >> 1		320795	2					
ANR	322952	ShiftExpression	value >> 1		320795	0		>>			
ANR	322953	Identifier	value		320795	0					
ANR	322954	PrimaryExpression	1		320795	1					
ANR	322955	BreakStatement	break ;	4594:6:189594:189599	320795	22	True				
ANR	322956	Label	case '`' :	4596:5:189607:189615	320795	23	True				
ANR	322957	ExpressionStatement	c ++	4597:7:189624:189627	320795	24	True				
ANR	322958	PostIncDecOperationExpression	c ++		320795	0					
ANR	322959	Identifier	c		320795	0					
ANR	322960	IncDec	++		320795	1					
ANR	322961	IfStatement	if ( value == 0 )		320795	25					
ANR	322962	Condition	value == 0	4598:11:189640:189649	320795	0	True				
ANR	322963	EqualityExpression	value == 0		320795	0		==			
ANR	322964	Identifier	value		320795	0					
ANR	322965	PrimaryExpression	0		320795	1					
ANR	322966	CompoundStatement		456:23:11857:11857	320795	1					
ANR	322967	ExpressionStatement	"func ( stream , ""%c"" , * c )"	4599:8:189662:189685	320795	0	True				
ANR	322968	CallExpression	"func ( stream , ""%c"" , * c )"		320795	0					
ANR	322969	Callee	func		320795	0					
ANR	322970	Identifier	func		320795	0					
ANR	322971	ArgumentList	stream		320795	1					
ANR	322972	Argument	stream		320795	0					
ANR	322973	Identifier	stream		320795	0					
ANR	322974	Argument	"""%c"""		320795	1					
ANR	322975	PrimaryExpression	"""%c"""		320795	0					
ANR	322976	Argument	* c		320795	2					
ANR	322977	UnaryOperationExpression	* c		320795	0					
ANR	322978	UnaryOperator	*		320795	0					
ANR	322979	Identifier	c		320795	1					
ANR	322980	BreakStatement	break ;	4601:7:189703:189708	320795	26	True				
ANR	322981	Label	case '\\'' :	4602:5:189715:189724	320795	27	True				
ANR	322982	ExpressionStatement	c ++	4603:7:189733:189736	320795	28	True				
ANR	322983	PostIncDecOperationExpression	c ++		320795	0					
ANR	322984	Identifier	c		320795	0					
ANR	322985	IncDec	++		320795	1					
ANR	322986	IfStatement	if ( value == ( ( 1ul << width ) - 1 ) )		320795	29					
ANR	322987	Condition	value == ( ( 1ul << width ) - 1 )	4604:11:189749:189777	320795	0	True				
ANR	322988	EqualityExpression	value == ( ( 1ul << width ) - 1 )		320795	0		==			
ANR	322989	Identifier	value		320795	0					
ANR	322990	AdditiveExpression	( 1ul << width ) - 1		320795	1		-			
ANR	322991	ShiftExpression	1ul << width		320795	0		<<			
ANR	322992	PrimaryExpression	1ul		320795	0					
ANR	322993	Identifier	width		320795	1					
ANR	322994	PrimaryExpression	1		320795	1					
ANR	322995	CompoundStatement		462:42:11985:11985	320795	1					
ANR	322996	ExpressionStatement	"func ( stream , ""%c"" , * c )"	4605:8:189790:189813	320795	0	True				
ANR	322997	CallExpression	"func ( stream , ""%c"" , * c )"		320795	0					
ANR	322998	Callee	func		320795	0					
ANR	322999	Identifier	func		320795	0					
ANR	323000	ArgumentList	stream		320795	1					
ANR	323001	Argument	stream		320795	0					
ANR	323002	Identifier	stream		320795	0					
ANR	323003	Argument	"""%c"""		320795	1					
ANR	323004	PrimaryExpression	"""%c"""		320795	0					
ANR	323005	Argument	* c		320795	2					
ANR	323006	UnaryOperationExpression	* c		320795	0					
ANR	323007	UnaryOperator	*		320795	0					
ANR	323008	Identifier	c		320795	1					
ANR	323009	BreakStatement	break ;	4607:7:189831:189836	320795	30	True				
ANR	323010	Label	case '?' :	4608:5:189843:189851	320795	31	True				
ANR	323011	ExpressionStatement	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"	4609:7:189860:189910	320795	32	True				
ANR	323012	CallExpression	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"		320795	0					
ANR	323013	Callee	func		320795	0					
ANR	323014	Identifier	func		320795	0					
ANR	323015	ArgumentList	stream		320795	1					
ANR	323016	Argument	stream		320795	0					
ANR	323017	Identifier	stream		320795	0					
ANR	323018	Argument	"""%c"""		320795	1					
ANR	323019	PrimaryExpression	"""%c"""		320795	0					
ANR	323020	Argument	c [ ( 1 << width ) - ( int ) value ]		320795	2					
ANR	323021	ArrayIndexing	c [ ( 1 << width ) - ( int ) value ]		320795	0					
ANR	323022	Identifier	c		320795	0					
ANR	323023	AdditiveExpression	( 1 << width ) - ( int ) value		320795	1		-			
ANR	323024	ShiftExpression	1 << width		320795	0		<<			
ANR	323025	PrimaryExpression	1		320795	0					
ANR	323026	Identifier	width		320795	1					
ANR	323027	CastExpression	( int ) value		320795	1					
ANR	323028	CastTarget	int		320795	0					
ANR	323029	Identifier	value		320795	1					
ANR	323030	ExpressionStatement	c += 1 << width	4610:7:189919:189934	320795	33	True				
ANR	323031	AssignmentExpression	c += 1 << width		320795	0		+=			
ANR	323032	Identifier	c		320795	0					
ANR	323033	ShiftExpression	1 << width		320795	1		<<			
ANR	323034	PrimaryExpression	1		320795	0					
ANR	323035	Identifier	width		320795	1					
ANR	323036	BreakStatement	break ;	4611:7:189943:189948	320795	34	True				
ANR	323037	Label	default :	4612:5:189955:189962	320795	35	True				
ANR	323038	Identifier	default		320795	0					
ANR	323039	ReturnStatement	return FALSE ;	4613:7:189971:189983	320795	36	True				
ANR	323040	Identifier	FALSE		320795	0					
ANR	323041	BreakStatement	break ;	4615:3:189995:190000	320795	4	True				
ANR	323042	Label	default :	4617:8:190011:190018	320795	5	True				
ANR	323043	Identifier	default		320795	0					
ANR	323044	ReturnStatement	return FALSE ;	4618:3:190023:190035	320795	6	True				
ANR	323045	Identifier	FALSE		320795	0					
ANR	323046	ElseStatement	else		320795	0					
ANR	323047	CompoundStatement		479:14:12274:12274	320795	0					
ANR	323048	ExpressionStatement	"func ( stream , ""%c"" , * c )"	4622:8:190079:190102	320795	0	True				
ANR	323049	CallExpression	"func ( stream , ""%c"" , * c )"		320795	0					
ANR	323050	Callee	func		320795	0					
ANR	323051	Identifier	func		320795	0					
ANR	323052	ArgumentList	stream		320795	1					
ANR	323053	Argument	stream		320795	0					
ANR	323054	Identifier	stream		320795	0					
ANR	323055	Argument	"""%c"""		320795	1					
ANR	323056	PrimaryExpression	"""%c"""		320795	0					
ANR	323057	Argument	* c		320795	2					
ANR	323058	UnaryOperationExpression	* c		320795	0					
ANR	323059	UnaryOperator	*		320795	0					
ANR	323060	Identifier	c		320795	1					
ANR	323061	IfStatement	if ( value_in_comment > 32 || value_in_comment < - 16 )		320795	3					
ANR	323062	Condition	value_in_comment > 32 || value_in_comment < - 16	4627:7:190134:190180	320795	0	True				
ANR	323063	OrExpression	value_in_comment > 32 || value_in_comment < - 16		320795	0		||			
ANR	323064	RelationalExpression	value_in_comment > 32		320795	0		>			
ANR	323065	Identifier	value_in_comment		320795	0					
ANR	323066	PrimaryExpression	32		320795	1					
ANR	323067	RelationalExpression	value_in_comment < - 16		320795	1		<			
ANR	323068	Identifier	value_in_comment		320795	0					
ANR	323069	UnaryOperationExpression	- 16		320795	1					
ANR	323070	UnaryOperator	-		320795	0					
ANR	323071	PrimaryExpression	16		320795	1					
ANR	323072	ExpressionStatement	"func ( stream , "" ; 0x%lx"" , value_in_comment )"	4628:5:190188:190231	320795	1	True				
ANR	323073	CallExpression	"func ( stream , "" ; 0x%lx"" , value_in_comment )"		320795	0					
ANR	323074	Callee	func		320795	0					
ANR	323075	Identifier	func		320795	0					
ANR	323076	ArgumentList	stream		320795	1					
ANR	323077	Argument	stream		320795	0					
ANR	323078	Identifier	stream		320795	0					
ANR	323079	Argument	""" ; 0x%lx"""		320795	1					
ANR	323080	PrimaryExpression	""" ; 0x%lx"""		320795	0					
ANR	323081	Argument	value_in_comment		320795	2					
ANR	323082	Identifier	value_in_comment		320795	0					
ANR	323083	IfStatement	if ( is_unpredictable )		320795	4					
ANR	323084	Condition	is_unpredictable	4631:9:190250:190265	320795	0	True				
ANR	323085	Identifier	is_unpredictable		320795	0					
ANR	323086	CompoundStatement		489:27:12473:12473	320795	1					
ANR	323087	ExpressionStatement	"func ( stream , UNPREDICTABLE_INSTRUCTION )"	4632:6:190276:190316	320795	0	True				
ANR	323088	CallExpression	"func ( stream , UNPREDICTABLE_INSTRUCTION )"		320795	0					
ANR	323089	Callee	func		320795	0					
ANR	323090	Identifier	func		320795	0					
ANR	323091	ArgumentList	stream		320795	1					
ANR	323092	Argument	stream		320795	0					
ANR	323093	Identifier	stream		320795	0					
ANR	323094	Argument	UNPREDICTABLE_INSTRUCTION		320795	1					
ANR	323095	Identifier	UNPREDICTABLE_INSTRUCTION		320795	0					
ANR	323096	ReturnStatement	return TRUE ;	4635:5:190331:190342	320795	5	True				
ANR	323097	Identifier	TRUE		320795	0					
ANR	323098	ReturnStatement	return FALSE ;	4638:2:190355:190367	320795	5	True				
ANR	323099	Identifier	FALSE		320795	0					
ANR	323100	ReturnType	static bfd_boolean		320795	1					
ANR	323101	Identifier	print_insn_neon		320795	2					
ANR	323102	ParameterList	"struct disassemble_info * info , long given , bfd_boolean thumb"		320795	3					
ANR	323103	Parameter	struct disassemble_info * info	4142:17:177732:177760	320795	0	True				
ANR	323104	ParameterType	struct disassemble_info *		320795	0					
ANR	323105	Identifier	info		320795	1					
ANR	323106	Parameter	long given	4142:48:177763:177772	320795	1	True				
ANR	323107	ParameterType	long		320795	0					
ANR	323108	Identifier	given		320795	1					
ANR	323109	Parameter	bfd_boolean thumb	4142:60:177775:177791	320795	2	True				
ANR	323110	ParameterType	bfd_boolean		320795	0					
ANR	323111	Identifier	thumb		320795	1					
ANR	323112	CFGEntryNode	ENTRY		320795		True				
ANR	323113	CFGExitNode	EXIT		320795		True				
ANR	323114	Symbol	& value		320795						
ANR	323115	Symbol	neon_opcodes		320795						
ANR	323116	Symbol	bit28		320795						
ANR	323117	Symbol	UNPREDICTABLE_INSTRUCTION		320795						
ANR	323118	Symbol	shift		320795						
ANR	323119	Symbol	num		320795						
ANR	323120	Symbol	isfloat		320795						
ANR	323121	Symbol	align		320795						
ANR	323122	Symbol	type		320795						
ANR	323123	Symbol	stride		320795						
ANR	323124	Symbol	info -> fprintf_func		320795						
ANR	323125	Symbol	IFTHEN_COND		320795						
ANR	323126	Symbol	high		320795						
ANR	323127	Symbol	* arm_conditional		320795						
ANR	323128	Symbol	reg		320795						
ANR	323129	Symbol	tmp		320795						
ANR	323130	Symbol	~0xffffffffL		320795						
ANR	323131	Symbol	limit		320795						
ANR	323132	Symbol	valbytes		320795						
ANR	323133	Symbol	idx_align		320795						
ANR	323134	Symbol	info		320795						
ANR	323135	Symbol	cmode		320795						
ANR	323136	Symbol	regno		320795						
ANR	323137	Symbol	given		320795						
ANR	323138	Symbol	arm_decode_bitfield		320795						
ANR	323139	Symbol	insn -> value		320795						
ANR	323140	Symbol	bits		320795						
ANR	323141	Symbol	TRUE		320795						
ANR	323142	Symbol	is_unpredictable		320795						
ANR	323143	Symbol	* valbytes		320795						
ANR	323144	Symbol	ix		320795						
ANR	323145	Symbol	rd		320795						
ANR	323146	Symbol	size		320795						
ANR	323147	Symbol	ifthen_state		320795						
ANR	323148	Symbol	rm		320795						
ANR	323149	Symbol	* enc		320795						
ANR	323150	Symbol	raw_reg		320795						
ANR	323151	Symbol	arm_conditional		320795						
ANR	323152	Symbol	rn		320795						
ANR	323153	Symbol	idx		320795						
ANR	323154	Symbol	* arm_regnames		320795						
ANR	323155	Symbol	amask		320795						
ANR	323156	Symbol	thumb		320795						
ANR	323157	Symbol	& width		320795						
ANR	323158	Symbol	info -> stream		320795						
ANR	323159	Symbol	* width		320795						
ANR	323160	Symbol	value_in_comment		320795						
ANR	323161	Symbol	stream		320795						
ANR	323162	Symbol	* type		320795						
ANR	323163	Symbol	low		320795						
ANR	323164	Symbol	* IFTHEN_COND		320795						
ANR	323165	Symbol	* ++ c		320795						
ANR	323166	Symbol	enc		320795						
ANR	323167	Symbol	arm_regnames		320795						
ANR	323168	Symbol	value		320795						
ANR	323169	Symbol	mask		320795						
ANR	323170	Symbol	* rn		320795						
ANR	323171	Symbol	op		320795						
ANR	323172	Symbol	* rm		320795						
ANR	323173	Symbol	c		320795						
ANR	323174	Symbol	length		320795						
ANR	323175	Symbol	* insn		320795						
ANR	323176	Symbol	i		320795						
ANR	323177	Symbol	hival		320795						
ANR	323178	Symbol	& fvalue		320795						
ANR	323179	Symbol	* c		320795						
ANR	323180	Symbol	n		320795						
ANR	323181	Symbol	insn		320795						
ANR	323182	Symbol	fvalue		320795						
ANR	323183	Symbol	func		320795						
ANR	323184	Symbol	* value		320795						
ANR	323185	Symbol	width		320795						
ANR	323186	Symbol	FALSE		320795						
ANR	323187	Symbol	* info		320795						
ANR	323188	Symbol	& floatformat_ieee_single_little		320795						
ANR	323189	Symbol	insn -> mask		320795						
ANR	323190	Symbol	insn -> assembler		320795						
ANR	323191	Symbol	base		320795						
ANR	323192	Function	banked_regname	4643:0:190423:191674							
ANR	323193	FunctionDef	banked_regname (unsigned reg)		323192	0					
ANR	323194	CompoundStatement		4645:0:190473:191674	323192	0					
ANR	323195	SwitchStatement	switch ( reg )		323192	0					
ANR	323196	Condition	reg	4646:10:190485:190487	323192	0	True				
ANR	323197	Identifier	reg		323192	0					
ANR	323198	CompoundStatement		3:4:20:20	323192	1					
ANR	323199	Label	case 15 :	4648:6:190502:190509	323192	0	True				
ANR	323200	ReturnStatement	"return ""CPSR"" ;"	4648:15:190511:190524	323192	1	True				
ANR	323201	PrimaryExpression	"""CPSR"""		323192	0					
ANR	323202	Label	case 32 :	4649:6:190532:190539	323192	2	True				
ANR	323203	ReturnStatement	"return ""R8_usr"" ;"	4649:15:190541:190556	323192	3	True				
ANR	323204	PrimaryExpression	"""R8_usr"""		323192	0					
ANR	323205	Label	case 33 :	4650:6:190564:190571	323192	4	True				
ANR	323206	ReturnStatement	"return ""R9_usr"" ;"	4650:15:190573:190588	323192	5	True				
ANR	323207	PrimaryExpression	"""R9_usr"""		323192	0					
ANR	323208	Label	case 34 :	4651:6:190596:190603	323192	6	True				
ANR	323209	ReturnStatement	"return ""R10_usr"" ;"	4651:15:190605:190621	323192	7	True				
ANR	323210	PrimaryExpression	"""R10_usr"""		323192	0					
ANR	323211	Label	case 35 :	4652:6:190629:190636	323192	8	True				
ANR	323212	ReturnStatement	"return ""R11_usr"" ;"	4652:15:190638:190654	323192	9	True				
ANR	323213	PrimaryExpression	"""R11_usr"""		323192	0					
ANR	323214	Label	case 36 :	4653:6:190662:190669	323192	10	True				
ANR	323215	ReturnStatement	"return ""R12_usr"" ;"	4653:15:190671:190687	323192	11	True				
ANR	323216	PrimaryExpression	"""R12_usr"""		323192	0					
ANR	323217	Label	case 37 :	4654:6:190695:190702	323192	12	True				
ANR	323218	ReturnStatement	"return ""SP_usr"" ;"	4654:15:190704:190719	323192	13	True				
ANR	323219	PrimaryExpression	"""SP_usr"""		323192	0					
ANR	323220	Label	case 38 :	4655:6:190727:190734	323192	14	True				
ANR	323221	ReturnStatement	"return ""LR_usr"" ;"	4655:15:190736:190751	323192	15	True				
ANR	323222	PrimaryExpression	"""LR_usr"""		323192	0					
ANR	323223	Label	case 40 :	4656:6:190759:190766	323192	16	True				
ANR	323224	ReturnStatement	"return ""R8_fiq"" ;"	4656:15:190768:190783	323192	17	True				
ANR	323225	PrimaryExpression	"""R8_fiq"""		323192	0					
ANR	323226	Label	case 41 :	4657:6:190791:190798	323192	18	True				
ANR	323227	ReturnStatement	"return ""R9_fiq"" ;"	4657:15:190800:190815	323192	19	True				
ANR	323228	PrimaryExpression	"""R9_fiq"""		323192	0					
ANR	323229	Label	case 42 :	4658:6:190823:190830	323192	20	True				
ANR	323230	ReturnStatement	"return ""R10_fiq"" ;"	4658:15:190832:190848	323192	21	True				
ANR	323231	PrimaryExpression	"""R10_fiq"""		323192	0					
ANR	323232	Label	case 43 :	4659:6:190856:190863	323192	22	True				
ANR	323233	ReturnStatement	"return ""R11_fiq"" ;"	4659:15:190865:190881	323192	23	True				
ANR	323234	PrimaryExpression	"""R11_fiq"""		323192	0					
ANR	323235	Label	case 44 :	4660:6:190889:190896	323192	24	True				
ANR	323236	ReturnStatement	"return ""R12_fiq"" ;"	4660:15:190898:190914	323192	25	True				
ANR	323237	PrimaryExpression	"""R12_fiq"""		323192	0					
ANR	323238	Label	case 45 :	4661:6:190922:190929	323192	26	True				
ANR	323239	ReturnStatement	"return ""SP_fiq"" ;"	4661:15:190931:190946	323192	27	True				
ANR	323240	PrimaryExpression	"""SP_fiq"""		323192	0					
ANR	323241	Label	case 46 :	4662:6:190954:190961	323192	28	True				
ANR	323242	ReturnStatement	"return ""LR_fiq"" ;"	4662:15:190963:190978	323192	29	True				
ANR	323243	PrimaryExpression	"""LR_fiq"""		323192	0					
ANR	323244	Label	case 48 :	4663:6:190986:190993	323192	30	True				
ANR	323245	ReturnStatement	"return ""LR_irq"" ;"	4663:15:190995:191010	323192	31	True				
ANR	323246	PrimaryExpression	"""LR_irq"""		323192	0					
ANR	323247	Label	case 49 :	4664:6:191018:191025	323192	32	True				
ANR	323248	ReturnStatement	"return ""SP_irq"" ;"	4664:15:191027:191042	323192	33	True				
ANR	323249	PrimaryExpression	"""SP_irq"""		323192	0					
ANR	323250	Label	case 50 :	4665:6:191050:191057	323192	34	True				
ANR	323251	ReturnStatement	"return ""LR_svc"" ;"	4665:15:191059:191074	323192	35	True				
ANR	323252	PrimaryExpression	"""LR_svc"""		323192	0					
ANR	323253	Label	case 51 :	4666:6:191082:191089	323192	36	True				
ANR	323254	ReturnStatement	"return ""SP_svc"" ;"	4666:15:191091:191106	323192	37	True				
ANR	323255	PrimaryExpression	"""SP_svc"""		323192	0					
ANR	323256	Label	case 52 :	4667:6:191114:191121	323192	38	True				
ANR	323257	ReturnStatement	"return ""LR_abt"" ;"	4667:15:191123:191138	323192	39	True				
ANR	323258	PrimaryExpression	"""LR_abt"""		323192	0					
ANR	323259	Label	case 53 :	4668:6:191146:191153	323192	40	True				
ANR	323260	ReturnStatement	"return ""SP_abt"" ;"	4668:15:191155:191170	323192	41	True				
ANR	323261	PrimaryExpression	"""SP_abt"""		323192	0					
ANR	323262	Label	case 54 :	4669:6:191178:191185	323192	42	True				
ANR	323263	ReturnStatement	"return ""LR_und"" ;"	4669:15:191187:191202	323192	43	True				
ANR	323264	PrimaryExpression	"""LR_und"""		323192	0					
ANR	323265	Label	case 55 :	4670:6:191210:191217	323192	44	True				
ANR	323266	ReturnStatement	"return ""SP_und"" ;"	4670:15:191219:191234	323192	45	True				
ANR	323267	PrimaryExpression	"""SP_und"""		323192	0					
ANR	323268	Label	case 60 :	4671:6:191242:191249	323192	46	True				
ANR	323269	ReturnStatement	"return ""LR_mon"" ;"	4671:15:191251:191266	323192	47	True				
ANR	323270	PrimaryExpression	"""LR_mon"""		323192	0					
ANR	323271	Label	case 61 :	4672:6:191274:191281	323192	48	True				
ANR	323272	ReturnStatement	"return ""SP_mon"" ;"	4672:15:191283:191298	323192	49	True				
ANR	323273	PrimaryExpression	"""SP_mon"""		323192	0					
ANR	323274	Label	case 62 :	4673:6:191306:191313	323192	50	True				
ANR	323275	ReturnStatement	"return ""ELR_hyp"" ;"	4673:15:191315:191331	323192	51	True				
ANR	323276	PrimaryExpression	"""ELR_hyp"""		323192	0					
ANR	323277	Label	case 63 :	4674:6:191339:191346	323192	52	True				
ANR	323278	ReturnStatement	"return ""SP_hyp"" ;"	4674:15:191348:191363	323192	53	True				
ANR	323279	PrimaryExpression	"""SP_hyp"""		323192	0					
ANR	323280	Label	case 79 :	4675:6:191371:191378	323192	54	True				
ANR	323281	ReturnStatement	"return ""SPSR"" ;"	4675:15:191380:191393	323192	55	True				
ANR	323282	PrimaryExpression	"""SPSR"""		323192	0					
ANR	323283	Label	case 110 :	4676:6:191401:191409	323192	56	True				
ANR	323284	ReturnStatement	"return ""SPSR_fiq"" ;"	4676:16:191411:191428	323192	57	True				
ANR	323285	PrimaryExpression	"""SPSR_fiq"""		323192	0					
ANR	323286	Label	case 112 :	4677:6:191436:191444	323192	58	True				
ANR	323287	ReturnStatement	"return ""SPSR_irq"" ;"	4677:16:191446:191463	323192	59	True				
ANR	323288	PrimaryExpression	"""SPSR_irq"""		323192	0					
ANR	323289	Label	case 114 :	4678:6:191471:191479	323192	60	True				
ANR	323290	ReturnStatement	"return ""SPSR_svc"" ;"	4678:16:191481:191498	323192	61	True				
ANR	323291	PrimaryExpression	"""SPSR_svc"""		323192	0					
ANR	323292	Label	case 116 :	4679:6:191506:191514	323192	62	True				
ANR	323293	ReturnStatement	"return ""SPSR_abt"" ;"	4679:16:191516:191533	323192	63	True				
ANR	323294	PrimaryExpression	"""SPSR_abt"""		323192	0					
ANR	323295	Label	case 118 :	4680:6:191541:191549	323192	64	True				
ANR	323296	ReturnStatement	"return ""SPSR_und"" ;"	4680:16:191551:191568	323192	65	True				
ANR	323297	PrimaryExpression	"""SPSR_und"""		323192	0					
ANR	323298	Label	case 124 :	4681:6:191576:191584	323192	66	True				
ANR	323299	ReturnStatement	"return ""SPSR_mon"" ;"	4681:16:191586:191603	323192	67	True				
ANR	323300	PrimaryExpression	"""SPSR_mon"""		323192	0					
ANR	323301	Label	case 126 :	4682:6:191611:191619	323192	68	True				
ANR	323302	ReturnStatement	"return ""SPSR_hyp"" ;"	4682:16:191621:191638	323192	69	True				
ANR	323303	PrimaryExpression	"""SPSR_hyp"""		323192	0					
ANR	323304	Label	default :	4683:6:191646:191653	323192	70	True				
ANR	323305	Identifier	default		323192	0					
ANR	323306	ReturnStatement	return NULL ;	4683:15:191655:191666	323192	71	True				
ANR	323307	Identifier	NULL		323192	0					
ANR	323308	ReturnType	static const char *		323192	1					
ANR	323309	Identifier	banked_regname		323192	2					
ANR	323310	ParameterList	unsigned reg		323192	3					
ANR	323311	Parameter	unsigned reg	4644:16:190459:190470	323192	0	True				
ANR	323312	ParameterType	unsigned		323192	0					
ANR	323313	Identifier	reg		323192	1					
ANR	323314	CFGEntryNode	ENTRY		323192		True				
ANR	323315	CFGExitNode	EXIT		323192		True				
ANR	323316	Symbol	NULL		323192						
ANR	323317	Symbol	reg		323192						
ANR	323318	Function	data_barrier_option	4688:0:191723:192189							
ANR	323319	FunctionDef	data_barrier_option (unsigned option)		323318	0					
ANR	323320	CompoundStatement		4690:0:191781:192189	323318	0					
ANR	323321	SwitchStatement	switch ( option & 0xf )		323318	0					
ANR	323322	Condition	option & 0xf	4691:10:191793:191804	323318	0	True				
ANR	323323	BitAndExpression	option & 0xf		323318	0		&			
ANR	323324	Identifier	option		323318	0					
ANR	323325	PrimaryExpression	0xf		323318	1					
ANR	323326	CompoundStatement		3:4:29:29	323318	1					
ANR	323327	Label	case 0xf :	4693:4:191817:191825	323318	0	True				
ANR	323328	ReturnStatement	"return ""sy"" ;"	4693:14:191827:191838	323318	1	True				
ANR	323329	PrimaryExpression	"""sy"""		323318	0					
ANR	323330	Label	case 0xe :	4694:4:191844:191852	323318	2	True				
ANR	323331	ReturnStatement	"return ""st"" ;"	4694:14:191854:191865	323318	3	True				
ANR	323332	PrimaryExpression	"""st"""		323318	0					
ANR	323333	Label	case 0xd :	4695:4:191871:191879	323318	4	True				
ANR	323334	ReturnStatement	"return ""ld"" ;"	4695:14:191881:191892	323318	5	True				
ANR	323335	PrimaryExpression	"""ld"""		323318	0					
ANR	323336	Label	case 0xb :	4696:4:191898:191906	323318	6	True				
ANR	323337	ReturnStatement	"return ""ish"" ;"	4696:14:191908:191920	323318	7	True				
ANR	323338	PrimaryExpression	"""ish"""		323318	0					
ANR	323339	Label	case 0xa :	4697:4:191926:191934	323318	8	True				
ANR	323340	ReturnStatement	"return ""ishst"" ;"	4697:14:191936:191950	323318	9	True				
ANR	323341	PrimaryExpression	"""ishst"""		323318	0					
ANR	323342	Label	case 0x9 :	4698:4:191956:191964	323318	10	True				
ANR	323343	ReturnStatement	"return ""ishld"" ;"	4698:14:191966:191980	323318	11	True				
ANR	323344	PrimaryExpression	"""ishld"""		323318	0					
ANR	323345	Label	case 0x7 :	4699:4:191986:191994	323318	12	True				
ANR	323346	ReturnStatement	"return ""un"" ;"	4699:14:191996:192007	323318	13	True				
ANR	323347	PrimaryExpression	"""un"""		323318	0					
ANR	323348	Label	case 0x6 :	4700:4:192013:192021	323318	14	True				
ANR	323349	ReturnStatement	"return ""unst"" ;"	4700:14:192023:192036	323318	15	True				
ANR	323350	PrimaryExpression	"""unst"""		323318	0					
ANR	323351	Label	case 0x5 :	4701:4:192042:192050	323318	16	True				
ANR	323352	ReturnStatement	"return ""nshld"" ;"	4701:14:192052:192066	323318	17	True				
ANR	323353	PrimaryExpression	"""nshld"""		323318	0					
ANR	323354	Label	case 0x3 :	4702:4:192072:192080	323318	18	True				
ANR	323355	ReturnStatement	"return ""osh"" ;"	4702:14:192082:192094	323318	19	True				
ANR	323356	PrimaryExpression	"""osh"""		323318	0					
ANR	323357	Label	case 0x2 :	4703:4:192100:192108	323318	20	True				
ANR	323358	ReturnStatement	"return ""oshst"" ;"	4703:14:192110:192124	323318	21	True				
ANR	323359	PrimaryExpression	"""oshst"""		323318	0					
ANR	323360	Label	case 0x1 :	4704:4:192130:192138	323318	22	True				
ANR	323361	ReturnStatement	"return ""oshld"" ;"	4704:14:192140:192154	323318	23	True				
ANR	323362	PrimaryExpression	"""oshld"""		323318	0					
ANR	323363	Label	default :	4705:4:192160:192167	323318	24	True				
ANR	323364	Identifier	default		323318	0					
ANR	323365	ReturnStatement	return NULL ;	4705:14:192170:192181	323318	25	True				
ANR	323366	Identifier	NULL		323318	0					
ANR	323367	ReturnType	static const char *		323318	1					
ANR	323368	Identifier	data_barrier_option		323318	2					
ANR	323369	ParameterList	unsigned option		323318	3					
ANR	323370	Parameter	unsigned option	4689:21:191764:191778	323318	0	True				
ANR	323371	ParameterType	unsigned		323318	0					
ANR	323372	Identifier	option		323318	1					
ANR	323373	CFGEntryNode	ENTRY		323318		True				
ANR	323374	CFGExitNode	EXIT		323318		True				
ANR	323375	Symbol	NULL		323318						
ANR	323376	Symbol	option		323318						
ANR	323377	Function	print_insn_arm	4711:0:192251:205787							
ANR	323378	FunctionDef	"print_insn_arm (bfd_vma pc , struct disassemble_info * info , long given)"		323377	0					
ANR	323379	CompoundStatement		4713:0:192334:205787	323377	0					
ANR	323380	IdentifierDeclStatement	const struct opcode32 * insn ;	4714:2:192338:192365	323377	0	True				
ANR	323381	IdentifierDecl	* insn		323377	0					
ANR	323382	IdentifierDeclType	const struct opcode32 *		323377	0					
ANR	323383	Identifier	insn		323377	1					
ANR	323384	IdentifierDeclStatement	void * stream = info -> stream ;	4715:2:192369:192396	323377	1	True				
ANR	323385	IdentifierDecl	* stream = info -> stream		323377	0					
ANR	323386	IdentifierDeclType	void *		323377	0					
ANR	323387	Identifier	stream		323377	1					
ANR	323388	AssignmentExpression	* stream = info -> stream		323377	2		=			
ANR	323389	Identifier	stream		323377	0					
ANR	323390	PtrMemberAccess	info -> stream		323377	1					
ANR	323391	Identifier	info		323377	0					
ANR	323392	Identifier	stream		323377	1					
ANR	323393	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	4716:2:192400:192439	323377	2	True				
ANR	323394	IdentifierDecl	func = info -> fprintf_func		323377	0					
ANR	323395	IdentifierDeclType	fprintf_ftype		323377	0					
ANR	323396	Identifier	func		323377	1					
ANR	323397	AssignmentExpression	func = info -> fprintf_func		323377	2		=			
ANR	323398	Identifier	func		323377	0					
ANR	323399	PtrMemberAccess	info -> fprintf_func		323377	1					
ANR	323400	Identifier	info		323377	0					
ANR	323401	Identifier	fprintf_func		323377	1					
ANR	323402	IdentifierDeclStatement	struct arm_private_data * private_data = info -> private_data ;	4717:2:192443:192501	323377	3	True				
ANR	323403	IdentifierDecl	* private_data = info -> private_data		323377	0					
ANR	323404	IdentifierDeclType	struct arm_private_data *		323377	0					
ANR	323405	Identifier	private_data		323377	1					
ANR	323406	AssignmentExpression	* private_data = info -> private_data		323377	2		=			
ANR	323407	Identifier	private_data		323377	0					
ANR	323408	PtrMemberAccess	info -> private_data		323377	1					
ANR	323409	Identifier	info		323377	0					
ANR	323410	Identifier	private_data		323377	1					
ANR	323411	IfStatement	"if ( print_insn_coprocessor ( pc , info , given , FALSE ) )"		323377	4					
ANR	323412	Condition	"print_insn_coprocessor ( pc , info , given , FALSE )"	4719:6:192510:192556	323377	0	True				
ANR	323413	CallExpression	"print_insn_coprocessor ( pc , info , given , FALSE )"		323377	0					
ANR	323414	Callee	print_insn_coprocessor		323377	0					
ANR	323415	Identifier	print_insn_coprocessor		323377	0					
ANR	323416	ArgumentList	pc		323377	1					
ANR	323417	Argument	pc		323377	0					
ANR	323418	Identifier	pc		323377	0					
ANR	323419	Argument	info		323377	1					
ANR	323420	Identifier	info		323377	0					
ANR	323421	Argument	given		323377	2					
ANR	323422	Identifier	given		323377	0					
ANR	323423	Argument	FALSE		323377	3					
ANR	323424	Identifier	FALSE		323377	0					
ANR	323425	CompoundStatement		7:55:224:224	323377	1					
ANR	323426	ReturnStatement	return ;	4720:3:192564:192570	323377	0	True				
ANR	323427	IfStatement	"if ( print_insn_neon ( info , given , FALSE ) )"		323377	5					
ANR	323428	Condition	"print_insn_neon ( info , given , FALSE )"	4723:6:192583:192618	323377	0	True				
ANR	323429	CallExpression	"print_insn_neon ( info , given , FALSE )"		323377	0					
ANR	323430	Callee	print_insn_neon		323377	0					
ANR	323431	Identifier	print_insn_neon		323377	0					
ANR	323432	ArgumentList	info		323377	1					
ANR	323433	Argument	info		323377	0					
ANR	323434	Identifier	info		323377	0					
ANR	323435	Argument	given		323377	1					
ANR	323436	Identifier	given		323377	0					
ANR	323437	Argument	FALSE		323377	2					
ANR	323438	Identifier	FALSE		323377	0					
ANR	323439	CompoundStatement		11:44:286:286	323377	1					
ANR	323440	ReturnStatement	return ;	4724:3:192626:192632	323377	0	True				
ANR	323441	ForStatement	for ( insn = arm_opcodes ; insn -> assembler ; insn ++ )		323377	6					
ANR	323442	ForInit	insn = arm_opcodes ;	4727:7:192646:192664	323377	0	True				
ANR	323443	AssignmentExpression	insn = arm_opcodes		323377	0		=			
ANR	323444	Identifier	insn		323377	0					
ANR	323445	Identifier	arm_opcodes		323377	1					
ANR	323446	Condition	insn -> assembler	4727:27:192666:192680	323377	1	True				
ANR	323447	PtrMemberAccess	insn -> assembler		323377	0					
ANR	323448	Identifier	insn		323377	0					
ANR	323449	Identifier	assembler		323377	1					
ANR	323450	PostIncDecOperationExpression	insn ++	4727:44:192683:192688	323377	2	True				
ANR	323451	Identifier	insn		323377	0					
ANR	323452	IncDec	++		323377	1					
ANR	323453	CompoundStatement		16:4:360:360	323377	3					
ANR	323454	IfStatement	if ( ( given & insn -> mask ) != insn -> value )		323377	0					
ANR	323455	Condition	( given & insn -> mask ) != insn -> value	4729:7:192704:192738	323377	0	True				
ANR	323456	EqualityExpression	( given & insn -> mask ) != insn -> value		323377	0		!=			
ANR	323457	BitAndExpression	given & insn -> mask		323377	0		&			
ANR	323458	Identifier	given		323377	0					
ANR	323459	PtrMemberAccess	insn -> mask		323377	1					
ANR	323460	Identifier	insn		323377	0					
ANR	323461	Identifier	mask		323377	1					
ANR	323462	PtrMemberAccess	insn -> value		323377	1					
ANR	323463	Identifier	insn		323377	0					
ANR	323464	Identifier	value		323377	1					
ANR	323465	CompoundStatement		17:44:406:406	323377	1					
ANR	323466	ContinueStatement	continue ;	4730:4:192747:192755	323377	0	True				
ANR	323467	IfStatement	"if ( ! ARM_CPU_HAS_FEATURE ( insn -> arch , private_data -> features ) )"		323377	1					
ANR	323468	Condition	"! ARM_CPU_HAS_FEATURE ( insn -> arch , private_data -> features )"	4733:7:192770:192826	323377	0	True				
ANR	323469	UnaryOperationExpression	"! ARM_CPU_HAS_FEATURE ( insn -> arch , private_data -> features )"		323377	0					
ANR	323470	UnaryOperator	!		323377	0					
ANR	323471	CallExpression	"ARM_CPU_HAS_FEATURE ( insn -> arch , private_data -> features )"		323377	1					
ANR	323472	Callee	ARM_CPU_HAS_FEATURE		323377	0					
ANR	323473	Identifier	ARM_CPU_HAS_FEATURE		323377	0					
ANR	323474	ArgumentList	insn -> arch		323377	1					
ANR	323475	Argument	insn -> arch		323377	0					
ANR	323476	PtrMemberAccess	insn -> arch		323377	0					
ANR	323477	Identifier	insn		323377	0					
ANR	323478	Identifier	arch		323377	1					
ANR	323479	Argument	private_data -> features		323377	1					
ANR	323480	PtrMemberAccess	private_data -> features		323377	0					
ANR	323481	Identifier	private_data		323377	0					
ANR	323482	Identifier	features		323377	1					
ANR	323483	CompoundStatement		21:66:494:494	323377	1					
ANR	323484	ContinueStatement	continue ;	4734:4:192835:192843	323377	0	True				
ANR	323485	IfStatement	if ( ( given & 0xF0000000 ) != 0xF0000000 || ( insn -> mask & 0xF0000000 ) == 0xF0000000 || ( insn -> mask == 0 && insn -> value == 0 ) )		323377	2					
ANR	323486	Condition	( given & 0xF0000000 ) != 0xF0000000 || ( insn -> mask & 0xF0000000 ) == 0xF0000000 || ( insn -> mask == 0 && insn -> value == 0 )	4740:7:193057:193174	323377	0	True				
ANR	323487	OrExpression	( given & 0xF0000000 ) != 0xF0000000 || ( insn -> mask & 0xF0000000 ) == 0xF0000000 || ( insn -> mask == 0 && insn -> value == 0 )		323377	0		||			
ANR	323488	EqualityExpression	( given & 0xF0000000 ) != 0xF0000000		323377	0		!=			
ANR	323489	BitAndExpression	given & 0xF0000000		323377	0		&			
ANR	323490	Identifier	given		323377	0					
ANR	323491	PrimaryExpression	0xF0000000		323377	1					
ANR	323492	PrimaryExpression	0xF0000000		323377	1					
ANR	323493	OrExpression	( insn -> mask & 0xF0000000 ) == 0xF0000000 || ( insn -> mask == 0 && insn -> value == 0 )		323377	1		||			
ANR	323494	EqualityExpression	( insn -> mask & 0xF0000000 ) == 0xF0000000		323377	0		==			
ANR	323495	BitAndExpression	insn -> mask & 0xF0000000		323377	0		&			
ANR	323496	PtrMemberAccess	insn -> mask		323377	0					
ANR	323497	Identifier	insn		323377	0					
ANR	323498	Identifier	mask		323377	1					
ANR	323499	PrimaryExpression	0xF0000000		323377	1					
ANR	323500	PrimaryExpression	0xF0000000		323377	1					
ANR	323501	AndExpression	insn -> mask == 0 && insn -> value == 0		323377	1		&&			
ANR	323502	EqualityExpression	insn -> mask == 0		323377	0		==			
ANR	323503	PtrMemberAccess	insn -> mask		323377	0					
ANR	323504	Identifier	insn		323377	0					
ANR	323505	Identifier	mask		323377	1					
ANR	323506	PrimaryExpression	0		323377	1					
ANR	323507	EqualityExpression	insn -> value == 0		323377	1		==			
ANR	323508	PtrMemberAccess	insn -> value		323377	0					
ANR	323509	Identifier	insn		323377	0					
ANR	323510	Identifier	value		323377	1					
ANR	323511	PrimaryExpression	0		323377	1					
ANR	323512	CompoundStatement		33:4:988:1001	323377	1					
ANR	323513	IdentifierDeclStatement	unsigned long u_reg = 16 ;	4741:4:193183:193207	323377	0	True				
ANR	323514	IdentifierDecl	u_reg = 16		323377	0					
ANR	323515	IdentifierDeclType	unsigned long		323377	0					
ANR	323516	Identifier	u_reg		323377	1					
ANR	323517	AssignmentExpression	u_reg = 16		323377	2		=			
ANR	323518	Identifier	u_reg		323377	0					
ANR	323519	PrimaryExpression	16		323377	1					
ANR	323520	IdentifierDeclStatement	unsigned long U_reg = 16 ;	4742:4:193213:193237	323377	1	True				
ANR	323521	IdentifierDecl	U_reg = 16		323377	0					
ANR	323522	IdentifierDeclType	unsigned long		323377	0					
ANR	323523	Identifier	U_reg		323377	1					
ANR	323524	AssignmentExpression	U_reg = 16		323377	2		=			
ANR	323525	Identifier	U_reg		323377	0					
ANR	323526	PrimaryExpression	16		323377	1					
ANR	323527	IdentifierDeclStatement	bfd_boolean is_unpredictable = FALSE ;	4743:4:193243:193279	323377	2	True				
ANR	323528	IdentifierDecl	is_unpredictable = FALSE		323377	0					
ANR	323529	IdentifierDeclType	bfd_boolean		323377	0					
ANR	323530	Identifier	is_unpredictable		323377	1					
ANR	323531	AssignmentExpression	is_unpredictable = FALSE		323377	2		=			
ANR	323532	Identifier	FALSE		323377	0					
ANR	323533	Identifier	FALSE		323377	1					
ANR	323534	IdentifierDeclStatement	signed long value_in_comment = 0 ;	4744:4:193285:193317	323377	3	True				
ANR	323535	IdentifierDecl	value_in_comment = 0		323377	0					
ANR	323536	IdentifierDeclType	signed long		323377	0					
ANR	323537	Identifier	value_in_comment		323377	1					
ANR	323538	AssignmentExpression	value_in_comment = 0		323377	2		=			
ANR	323539	Identifier	value_in_comment		323377	0					
ANR	323540	PrimaryExpression	0		323377	1					
ANR	323541	IdentifierDeclStatement	const char * c ;	4745:4:193323:193336	323377	4	True				
ANR	323542	IdentifierDecl	* c		323377	0					
ANR	323543	IdentifierDeclType	const char *		323377	0					
ANR	323544	Identifier	c		323377	1					
ANR	323545	ForStatement	for ( c = insn -> assembler ; * c ; c ++ )		323377	5					
ANR	323546	ForInit	c = insn -> assembler ;	4747:9:193348:193367	323377	0	True				
ANR	323547	AssignmentExpression	c = insn -> assembler		323377	0		=			
ANR	323548	Identifier	c		323377	0					
ANR	323549	PtrMemberAccess	insn -> assembler		323377	1					
ANR	323550	Identifier	insn		323377	0					
ANR	323551	Identifier	assembler		323377	1					
ANR	323552	Condition	* c	4747:30:193369:193370	323377	1	True				
ANR	323553	UnaryOperationExpression	* c		323377	0					
ANR	323554	UnaryOperator	*		323377	0					
ANR	323555	Identifier	c		323377	1					
ANR	323556	PostIncDecOperationExpression	c ++	4747:34:193373:193375	323377	2	True				
ANR	323557	Identifier	c		323377	0					
ANR	323558	IncDec	++		323377	1					
ANR	323559	CompoundStatement		35:39:1043:1043	323377	3					
ANR	323560	IfStatement	if ( * c == '%' )		323377	0					
ANR	323561	Condition	* c == '%'	4748:9:193389:193397	323377	0	True				
ANR	323562	EqualityExpression	* c == '%'		323377	0		==			
ANR	323563	UnaryOperationExpression	* c		323377	0					
ANR	323564	UnaryOperator	*		323377	0					
ANR	323565	Identifier	c		323377	1					
ANR	323566	PrimaryExpression	'%'		323377	1					
ANR	323567	CompoundStatement		37:6:1073:1112	323377	1					
ANR	323568	IdentifierDeclStatement	bfd_boolean allow_unpredictable = FALSE ;	4749:6:193408:193447	323377	0	True				
ANR	323569	IdentifierDecl	allow_unpredictable = FALSE		323377	0					
ANR	323570	IdentifierDeclType	bfd_boolean		323377	0					
ANR	323571	Identifier	allow_unpredictable		323377	1					
ANR	323572	AssignmentExpression	allow_unpredictable = FALSE		323377	2		=			
ANR	323573	Identifier	FALSE		323377	0					
ANR	323574	Identifier	FALSE		323377	1					
ANR	323575	SwitchStatement	switch ( * ++ c )		323377	1					
ANR	323576	Condition	* ++ c	4751:14:193464:193467	323377	0	True				
ANR	323577	UnaryOperationExpression	* ++ c		323377	0					
ANR	323578	UnaryOperator	*		323377	0					
ANR	323579	UnaryExpression	++ c		323377	1					
ANR	323580	IncDec	++		323377	0					
ANR	323581	Identifier	c		323377	1					
ANR	323582	CompoundStatement		39:20:1135:1135	323377	1					
ANR	323583	Label	case '%' :	4752:6:193478:193486	323377	0	True				
ANR	323584	ExpressionStatement	"func ( stream , ""%%"" )"	4753:7:193495:193514	323377	1	True				
ANR	323585	CallExpression	"func ( stream , ""%%"" )"		323377	0					
ANR	323586	Callee	func		323377	0					
ANR	323587	Identifier	func		323377	0					
ANR	323588	ArgumentList	stream		323377	1					
ANR	323589	Argument	stream		323377	0					
ANR	323590	Identifier	stream		323377	0					
ANR	323591	Argument	"""%%"""		323377	1					
ANR	323592	PrimaryExpression	"""%%"""		323377	0					
ANR	323593	BreakStatement	break ;	4754:7:193523:193528	323377	2	True				
ANR	323594	Label	case 'a' :	4756:6:193537:193545	323377	3	True				
ANR	323595	ExpressionStatement	"value_in_comment = print_arm_address ( pc , info , given )"	4757:7:193554:193608	323377	4	True				
ANR	323596	AssignmentExpression	"value_in_comment = print_arm_address ( pc , info , given )"		323377	0		=			
ANR	323597	Identifier	value_in_comment		323377	0					
ANR	323598	CallExpression	"print_arm_address ( pc , info , given )"		323377	1					
ANR	323599	Callee	print_arm_address		323377	0					
ANR	323600	Identifier	print_arm_address		323377	0					
ANR	323601	ArgumentList	pc		323377	1					
ANR	323602	Argument	pc		323377	0					
ANR	323603	Identifier	pc		323377	0					
ANR	323604	Argument	info		323377	1					
ANR	323605	Identifier	info		323377	0					
ANR	323606	Argument	given		323377	2					
ANR	323607	Identifier	given		323377	0					
ANR	323608	BreakStatement	break ;	4758:7:193617:193622	323377	5	True				
ANR	323609	Label	case 'P' :	4760:6:193631:193639	323377	6	True				
ANR	323610	ExpressionStatement	"value_in_comment = print_arm_address ( pc , info , given | ( 1 << P_BIT ) )"	4763:7:193725:193794	323377	7	True				
ANR	323611	AssignmentExpression	"value_in_comment = print_arm_address ( pc , info , given | ( 1 << P_BIT ) )"		323377	0		=			
ANR	323612	Identifier	value_in_comment		323377	0					
ANR	323613	CallExpression	"print_arm_address ( pc , info , given | ( 1 << P_BIT ) )"		323377	1					
ANR	323614	Callee	print_arm_address		323377	0					
ANR	323615	Identifier	print_arm_address		323377	0					
ANR	323616	ArgumentList	pc		323377	1					
ANR	323617	Argument	pc		323377	0					
ANR	323618	Identifier	pc		323377	0					
ANR	323619	Argument	info		323377	1					
ANR	323620	Identifier	info		323377	0					
ANR	323621	Argument	given | ( 1 << P_BIT )		323377	2					
ANR	323622	InclusiveOrExpression	given | ( 1 << P_BIT )		323377	0		|			
ANR	323623	Identifier	given		323377	0					
ANR	323624	ShiftExpression	1 << P_BIT		323377	1		<<			
ANR	323625	PrimaryExpression	1		323377	0					
ANR	323626	Identifier	P_BIT		323377	1					
ANR	323627	BreakStatement	break ;	4764:7:193803:193808	323377	8	True				
ANR	323628	Label	case 'S' :	4766:6:193817:193825	323377	9	True				
ANR	323629	ExpressionStatement	allow_unpredictable = TRUE	4767:7:193834:193860	323377	10	True				
ANR	323630	AssignmentExpression	allow_unpredictable = TRUE		323377	0		=			
ANR	323631	Identifier	allow_unpredictable		323377	0					
ANR	323632	Identifier	TRUE		323377	1					
ANR	323633	Label	case 's' :	4769:6:193896:193904	323377	11	True				
ANR	323634	IfStatement	if ( ( given & 0x004f0000 ) == 0x004f0000 )		323377	12					
ANR	323635	Condition	( given & 0x004f0000 ) == 0x004f0000	4770:11:193917:193950	323377	0	True				
ANR	323636	EqualityExpression	( given & 0x004f0000 ) == 0x004f0000		323377	0		==			
ANR	323637	BitAndExpression	given & 0x004f0000		323377	0		&			
ANR	323638	Identifier	given		323377	0					
ANR	323639	PrimaryExpression	0x004f0000		323377	1					
ANR	323640	PrimaryExpression	0x004f0000		323377	1					
ANR	323641	CompoundStatement		60:8:1678:1733	323377	1					
ANR	323642	IdentifierDeclStatement	bfd_vma offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf ) ;	4772:8:194013:194068	323377	0	True				
ANR	323643	IdentifierDecl	offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	0					
ANR	323644	IdentifierDeclType	bfd_vma		323377	0					
ANR	323645	Identifier	offset		323377	1					
ANR	323646	AssignmentExpression	offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	2		=			
ANR	323647	Identifier	offset		323377	0					
ANR	323648	InclusiveOrExpression	( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	1		|			
ANR	323649	ShiftExpression	( given & 0xf00 ) >> 4		323377	0		>>			
ANR	323650	BitAndExpression	given & 0xf00		323377	0		&			
ANR	323651	Identifier	given		323377	0					
ANR	323652	PrimaryExpression	0xf00		323377	1					
ANR	323653	PrimaryExpression	4		323377	1					
ANR	323654	BitAndExpression	given & 0xf		323377	1		&			
ANR	323655	Identifier	given		323377	0					
ANR	323656	PrimaryExpression	0xf		323377	1					
ANR	323657	IfStatement	if ( PRE_BIT_SET )		323377	1					
ANR	323658	Condition	PRE_BIT_SET	4774:12:194083:194093	323377	0	True				
ANR	323659	Identifier	PRE_BIT_SET		323377	0					
ANR	323660	CompoundStatement		62:25:1761:1761	323377	1					
ANR	323661	IfStatement	if ( offset || NEGATIVE_BIT_SET )		323377	0					
ANR	323662	Condition	offset || NEGATIVE_BIT_SET	4776:13:194155:194180	323377	0	True				
ANR	323663	OrExpression	offset || NEGATIVE_BIT_SET		323377	0		||			
ANR	323664	Identifier	offset		323377	0					
ANR	323665	Identifier	NEGATIVE_BIT_SET		323377	1					
ANR	323666	CompoundStatement		64:41:1848:1848	323377	1					
ANR	323667	ExpressionStatement	"func ( stream , ""[pc, %s%d] ; "" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4777:10:194195:194278	323377	0	True				
ANR	323668	CallExpression	"func ( stream , ""[pc, %s%d] ; "" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		323377	0					
ANR	323669	Callee	func		323377	0					
ANR	323670	Identifier	func		323377	0					
ANR	323671	ArgumentList	stream		323377	1					
ANR	323672	Argument	stream		323377	0					
ANR	323673	Identifier	stream		323377	0					
ANR	323674	Argument	"""[pc, %s%d] ; """		323377	1					
ANR	323675	PrimaryExpression	"""[pc, %s%d] ; """		323377	0					
ANR	323676	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323677	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323678	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323679	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323680	PrimaryExpression	"""-"""		323377	1					
ANR	323681	PrimaryExpression	""""""		323377	2					
ANR	323682	Argument	( int ) offset		323377	3					
ANR	323683	CastExpression	( int ) offset		323377	0					
ANR	323684	CastTarget	int		323377	0					
ANR	323685	Identifier	offset		323377	1					
ANR	323686	ElseStatement	else		323377	0					
ANR	323687	CompoundStatement		67:16:1961:1961	323377	0					
ANR	323688	ExpressionStatement	"func ( stream , ""[pc] ; "" )"	4780:10:194308:194332	323377	0	True				
ANR	323689	CallExpression	"func ( stream , ""[pc] ; "" )"		323377	0					
ANR	323690	Callee	func		323377	0					
ANR	323691	Identifier	func		323377	0					
ANR	323692	ArgumentList	stream		323377	1					
ANR	323693	Argument	stream		323377	0					
ANR	323694	Identifier	stream		323377	0					
ANR	323695	Argument	"""[pc] ; """		323377	1					
ANR	323696	PrimaryExpression	"""[pc] ; """		323377	0					
ANR	323697	IfStatement	if ( NEGATIVE_BIT_SET )		323377	1					
ANR	323698	Condition	NEGATIVE_BIT_SET	4782:13:194358:194373	323377	0	True				
ANR	323699	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323700	CompoundStatement		70:31:2041:2041	323377	1					
ANR	323701	ExpressionStatement	offset = - offset	4783:10:194388:194404	323377	0	True				
ANR	323702	AssignmentExpression	offset = - offset		323377	0		=			
ANR	323703	Identifier	offset		323377	0					
ANR	323704	UnaryOperationExpression	- offset		323377	1					
ANR	323705	UnaryOperator	-		323377	0					
ANR	323706	Identifier	offset		323377	1					
ANR	323707	ExpressionStatement	"info -> print_address_func ( offset + pc + 8 , info )"	4785:9:194426:194474	323377	2	True				
ANR	323708	CallExpression	"info -> print_address_func ( offset + pc + 8 , info )"		323377	0					
ANR	323709	Callee	info -> print_address_func		323377	0					
ANR	323710	PtrMemberAccess	info -> print_address_func		323377	0					
ANR	323711	Identifier	info		323377	0					
ANR	323712	Identifier	print_address_func		323377	1					
ANR	323713	ArgumentList	offset + pc + 8		323377	1					
ANR	323714	Argument	offset + pc + 8		323377	0					
ANR	323715	AdditiveExpression	offset + pc + 8		323377	0		+			
ANR	323716	Identifier	offset		323377	0					
ANR	323717	AdditiveExpression	pc + 8		323377	1		+			
ANR	323718	Identifier	pc		323377	0					
ANR	323719	PrimaryExpression	8		323377	1					
ANR	323720	Argument	info		323377	1					
ANR	323721	Identifier	info		323377	0					
ANR	323722	ElseStatement	else		323377	0					
ANR	323723	CompoundStatement		74:15:2156:2156	323377	0					
ANR	323724	ExpressionStatement	"func ( stream , ""[pc], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"	4788:9:194542:194621	323377	0	True				
ANR	323725	CallExpression	"func ( stream , ""[pc], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , ( int ) offset )"		323377	0					
ANR	323726	Callee	func		323377	0					
ANR	323727	Identifier	func		323377	0					
ANR	323728	ArgumentList	stream		323377	1					
ANR	323729	Argument	stream		323377	0					
ANR	323730	Identifier	stream		323377	0					
ANR	323731	Argument	"""[pc], %s%d"""		323377	1					
ANR	323732	PrimaryExpression	"""[pc], %s%d"""		323377	0					
ANR	323733	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323734	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323735	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323736	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323737	PrimaryExpression	"""-"""		323377	1					
ANR	323738	PrimaryExpression	""""""		323377	2					
ANR	323739	Argument	( int ) offset		323377	3					
ANR	323740	CastExpression	( int ) offset		323377	0					
ANR	323741	CastTarget	int		323377	0					
ANR	323742	Identifier	offset		323377	1					
ANR	323743	IfStatement	if ( ! allow_unpredictable )		323377	1					
ANR	323744	Condition	! allow_unpredictable	4790:13:194636:194655	323377	0	True				
ANR	323745	UnaryOperationExpression	! allow_unpredictable		323377	0					
ANR	323746	UnaryOperator	!		323377	0					
ANR	323747	Identifier	allow_unpredictable		323377	1					
ANR	323748	CompoundStatement		78:35:2323:2323	323377	1					
ANR	323749	ExpressionStatement	is_unpredictable = TRUE	4791:10:194670:194693	323377	0	True				
ANR	323750	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	323751	Identifier	is_unpredictable		323377	0					
ANR	323752	Identifier	TRUE		323377	1					
ANR	323753	ElseStatement	else		323377	0					
ANR	323754	CompoundStatement		83:8:2405:2456	323377	0					
ANR	323755	IdentifierDeclStatement	int offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf ) ;	4795:8:194740:194791	323377	0	True				
ANR	323756	IdentifierDecl	offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	0					
ANR	323757	IdentifierDeclType	int		323377	0					
ANR	323758	Identifier	offset		323377	1					
ANR	323759	AssignmentExpression	offset = ( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	2		=			
ANR	323760	Identifier	offset		323377	0					
ANR	323761	InclusiveOrExpression	( ( given & 0xf00 ) >> 4 ) | ( given & 0xf )		323377	1		|			
ANR	323762	ShiftExpression	( given & 0xf00 ) >> 4		323377	0		>>			
ANR	323763	BitAndExpression	given & 0xf00		323377	0		&			
ANR	323764	Identifier	given		323377	0					
ANR	323765	PrimaryExpression	0xf00		323377	1					
ANR	323766	PrimaryExpression	4		323377	1					
ANR	323767	BitAndExpression	given & 0xf		323377	1		&			
ANR	323768	Identifier	given		323377	0					
ANR	323769	PrimaryExpression	0xf		323377	1					
ANR	323770	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"	4797:8:194802:194866	323377	1	True				
ANR	323771	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"		323377	0					
ANR	323772	Callee	func		323377	0					
ANR	323773	Identifier	func		323377	0					
ANR	323774	ArgumentList	stream		323377	1					
ANR	323775	Argument	stream		323377	0					
ANR	323776	Identifier	stream		323377	0					
ANR	323777	Argument	"""[%s"""		323377	1					
ANR	323778	PrimaryExpression	"""[%s"""		323377	0					
ANR	323779	Argument	arm_regnames [ ( given >> 16 ) & 0xf ]		323377	2					
ANR	323780	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		323377	0					
ANR	323781	Identifier	arm_regnames		323377	0					
ANR	323782	BitAndExpression	( given >> 16 ) & 0xf		323377	1		&			
ANR	323783	ShiftExpression	given >> 16		323377	0		>>			
ANR	323784	Identifier	given		323377	0					
ANR	323785	PrimaryExpression	16		323377	1					
ANR	323786	PrimaryExpression	0xf		323377	1					
ANR	323787	IfStatement	if ( PRE_BIT_SET )		323377	2					
ANR	323788	Condition	PRE_BIT_SET	4800:12:194881:194891	323377	0	True				
ANR	323789	Identifier	PRE_BIT_SET		323377	0					
ANR	323790	CompoundStatement		88:25:2559:2559	323377	1					
ANR	323791	IfStatement	if ( IMMEDIATE_BIT_SET )		323377	0					
ANR	323792	Condition	IMMEDIATE_BIT_SET	4801:13:194909:194925	323377	0	True				
ANR	323793	Identifier	IMMEDIATE_BIT_SET		323377	0					
ANR	323794	CompoundStatement		89:32:2593:2593	323377	1					
ANR	323795	IfStatement	if ( WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset )		323377	0					
ANR	323796	Condition	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset	4804:14:195016:195062	323377	0	True				
ANR	323797	OrExpression	WRITEBACK_BIT_SET || NEGATIVE_BIT_SET || offset		323377	0		||			
ANR	323798	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	323799	OrExpression	NEGATIVE_BIT_SET || offset		323377	1		||			
ANR	323800	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323801	Identifier	offset		323377	1					
ANR	323802	CompoundStatement		92:63:2730:2730	323377	1					
ANR	323803	ExpressionStatement	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset )"	4805:11:195078:195150	323377	0	True				
ANR	323804	CallExpression	"func ( stream , "", %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset )"		323377	0					
ANR	323805	Callee	func		323377	0					
ANR	323806	Identifier	func		323377	0					
ANR	323807	ArgumentList	stream		323377	1					
ANR	323808	Argument	stream		323377	0					
ANR	323809	Identifier	stream		323377	0					
ANR	323810	Argument	""", %s%d"""		323377	1					
ANR	323811	PrimaryExpression	""", %s%d"""		323377	0					
ANR	323812	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323813	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323814	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323815	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323816	PrimaryExpression	"""-"""		323377	1					
ANR	323817	PrimaryExpression	""""""		323377	2					
ANR	323818	Argument	offset		323377	3					
ANR	323819	Identifier	offset		323377	0					
ANR	323820	IfStatement	if ( NEGATIVE_BIT_SET )		323377	1					
ANR	323821	Condition	NEGATIVE_BIT_SET	4809:14:195179:195194	323377	0	True				
ANR	323822	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323823	CompoundStatement		97:32:2862:2862	323377	1					
ANR	323824	ExpressionStatement	offset = - offset	4810:11:195210:195226	323377	0	True				
ANR	323825	AssignmentExpression	offset = - offset		323377	0		=			
ANR	323826	Identifier	offset		323377	0					
ANR	323827	UnaryOperationExpression	- offset		323377	1					
ANR	323828	UnaryOperator	-		323377	0					
ANR	323829	Identifier	offset		323377	1					
ANR	323830	ExpressionStatement	value_in_comment = offset	4813:10:195251:195276	323377	2	True				
ANR	323831	AssignmentExpression	value_in_comment = offset		323377	0		=			
ANR	323832	Identifier	value_in_comment		323377	0					
ANR	323833	Identifier	offset		323377	1					
ANR	323834	ElseStatement	else		323377	0					
ANR	323835	CompoundStatement		102:16:2959:2959	323377	0					
ANR	323836	ExpressionStatement	"func ( stream , "", %s%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , arm_regnames [ given & 0xf ] )"	4816:10:195364:195465	323377	0	True				
ANR	323837	CallExpression	"func ( stream , "", %s%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , arm_regnames [ given & 0xf ] )"		323377	0					
ANR	323838	Callee	func		323377	0					
ANR	323839	Identifier	func		323377	0					
ANR	323840	ArgumentList	stream		323377	1					
ANR	323841	Argument	stream		323377	0					
ANR	323842	Identifier	stream		323377	0					
ANR	323843	Argument	""", %s%s"""		323377	1					
ANR	323844	PrimaryExpression	""", %s%s"""		323377	0					
ANR	323845	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323846	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323847	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323848	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323849	PrimaryExpression	"""-"""		323377	1					
ANR	323850	PrimaryExpression	""""""		323377	2					
ANR	323851	Argument	arm_regnames [ given & 0xf ]		323377	3					
ANR	323852	ArrayIndexing	arm_regnames [ given & 0xf ]		323377	0					
ANR	323853	Identifier	arm_regnames		323377	0					
ANR	323854	BitAndExpression	given & 0xf		323377	1		&			
ANR	323855	Identifier	given		323377	0					
ANR	323856	PrimaryExpression	0xf		323377	1					
ANR	323857	IfStatement	if ( ! allow_unpredictable && WRITEBACK_BIT_SET && ( ( given & 0xf ) == ( ( given >> 12 ) & 0xf ) ) )		323377	1					
ANR	323858	Condition	! allow_unpredictable && WRITEBACK_BIT_SET && ( ( given & 0xf ) == ( ( given >> 12 ) & 0xf ) )	4822:14:195605:195689	323377	0	True				
ANR	323859	AndExpression	! allow_unpredictable && WRITEBACK_BIT_SET && ( ( given & 0xf ) == ( ( given >> 12 ) & 0xf ) )		323377	0		&&			
ANR	323860	UnaryOperationExpression	! allow_unpredictable		323377	0					
ANR	323861	UnaryOperator	!		323377	0					
ANR	323862	Identifier	allow_unpredictable		323377	1					
ANR	323863	AndExpression	WRITEBACK_BIT_SET && ( ( given & 0xf ) == ( ( given >> 12 ) & 0xf ) )		323377	1		&&			
ANR	323864	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	323865	EqualityExpression	( given & 0xf ) == ( ( given >> 12 ) & 0xf )		323377	1		==			
ANR	323866	BitAndExpression	given & 0xf		323377	0		&			
ANR	323867	Identifier	given		323377	0					
ANR	323868	PrimaryExpression	0xf		323377	1					
ANR	323869	BitAndExpression	( given >> 12 ) & 0xf		323377	1		&			
ANR	323870	ShiftExpression	given >> 12		323377	0		>>			
ANR	323871	Identifier	given		323377	0					
ANR	323872	PrimaryExpression	12		323377	1					
ANR	323873	PrimaryExpression	0xf		323377	1					
ANR	323874	CompoundStatement		110:101:3357:3357	323377	1					
ANR	323875	ExpressionStatement	is_unpredictable = TRUE	4823:11:195705:195728	323377	0	True				
ANR	323876	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	323877	Identifier	is_unpredictable		323377	0					
ANR	323878	Identifier	TRUE		323377	1					
ANR	323879	ExpressionStatement	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"	4827:9:195763:195823	323377	1	True				
ANR	323880	CallExpression	"func ( stream , ""]%s"" , WRITEBACK_BIT_SET ? ""!"" : """" )"		323377	0					
ANR	323881	Callee	func		323377	0					
ANR	323882	Identifier	func		323377	0					
ANR	323883	ArgumentList	stream		323377	1					
ANR	323884	Argument	stream		323377	0					
ANR	323885	Identifier	stream		323377	0					
ANR	323886	Argument	"""]%s"""		323377	1					
ANR	323887	PrimaryExpression	"""]%s"""		323377	0					
ANR	323888	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		323377	2					
ANR	323889	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		323377	0					
ANR	323890	Condition	WRITEBACK_BIT_SET		323377	0					
ANR	323891	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	323892	PrimaryExpression	"""!"""		323377	1					
ANR	323893	PrimaryExpression	""""""		323377	2					
ANR	323894	ElseStatement	else		323377	0					
ANR	323895	CompoundStatement		117:15:3505:3505	323377	0					
ANR	323896	IfStatement	if ( IMMEDIATE_BIT_SET )		323377	0					
ANR	323897	Condition	IMMEDIATE_BIT_SET	4830:13:195855:195871	323377	0	True				
ANR	323898	Identifier	IMMEDIATE_BIT_SET		323377	0					
ANR	323899	CompoundStatement		118:32:3539:3539	323377	1					
ANR	323900	ExpressionStatement	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset )"	4833:10:195998:196070	323377	0	True				
ANR	323901	CallExpression	"func ( stream , ""], %s%d"" , NEGATIVE_BIT_SET ? ""-"" : """" , offset )"		323377	0					
ANR	323902	Callee	func		323377	0					
ANR	323903	Identifier	func		323377	0					
ANR	323904	ArgumentList	stream		323377	1					
ANR	323905	Argument	stream		323377	0					
ANR	323906	Identifier	stream		323377	0					
ANR	323907	Argument	"""], %s%d"""		323377	1					
ANR	323908	PrimaryExpression	"""], %s%d"""		323377	0					
ANR	323909	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323910	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323911	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323912	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323913	PrimaryExpression	"""-"""		323377	1					
ANR	323914	PrimaryExpression	""""""		323377	2					
ANR	323915	Argument	offset		323377	3					
ANR	323916	Identifier	offset		323377	0					
ANR	323917	IfStatement	if ( NEGATIVE_BIT_SET )		323377	1					
ANR	323918	Condition	NEGATIVE_BIT_SET	4835:14:196086:196101	323377	0	True				
ANR	323919	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323920	CompoundStatement		123:32:3769:3769	323377	1					
ANR	323921	ExpressionStatement	offset = - offset	4836:11:196117:196133	323377	0	True				
ANR	323922	AssignmentExpression	offset = - offset		323377	0		=			
ANR	323923	Identifier	offset		323377	0					
ANR	323924	UnaryOperationExpression	- offset		323377	1					
ANR	323925	UnaryOperator	-		323377	0					
ANR	323926	Identifier	offset		323377	1					
ANR	323927	ExpressionStatement	value_in_comment = offset	4838:10:196157:196182	323377	2	True				
ANR	323928	AssignmentExpression	value_in_comment = offset		323377	0		=			
ANR	323929	Identifier	value_in_comment		323377	0					
ANR	323930	Identifier	offset		323377	1					
ANR	323931	ElseStatement	else		323377	0					
ANR	323932	CompoundStatement		127:16:3865:3865	323377	0					
ANR	323933	ExpressionStatement	"func ( stream , ""], %s%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , arm_regnames [ given & 0xf ] )"	4841:10:196252:196354	323377	0	True				
ANR	323934	CallExpression	"func ( stream , ""], %s%s"" , NEGATIVE_BIT_SET ? ""-"" : """" , arm_regnames [ given & 0xf ] )"		323377	0					
ANR	323935	Callee	func		323377	0					
ANR	323936	Identifier	func		323377	0					
ANR	323937	ArgumentList	stream		323377	1					
ANR	323938	Argument	stream		323377	0					
ANR	323939	Identifier	stream		323377	0					
ANR	323940	Argument	"""], %s%s"""		323377	1					
ANR	323941	PrimaryExpression	"""], %s%s"""		323377	0					
ANR	323942	Argument	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	2					
ANR	323943	ConditionalExpression	"NEGATIVE_BIT_SET ? ""-"" : """""		323377	0					
ANR	323944	Condition	NEGATIVE_BIT_SET		323377	0					
ANR	323945	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	323946	PrimaryExpression	"""-"""		323377	1					
ANR	323947	PrimaryExpression	""""""		323377	2					
ANR	323948	Argument	arm_regnames [ given & 0xf ]		323377	3					
ANR	323949	ArrayIndexing	arm_regnames [ given & 0xf ]		323377	0					
ANR	323950	Identifier	arm_regnames		323377	0					
ANR	323951	BitAndExpression	given & 0xf		323377	1		&			
ANR	323952	Identifier	given		323377	0					
ANR	323953	PrimaryExpression	0xf		323377	1					
ANR	323954	IfStatement	if ( ! allow_unpredictable && ( given & 0xf ) == ( ( given >> 12 ) & 0xf ) )		323377	1					
ANR	323955	Condition	! allow_unpredictable && ( given & 0xf ) == ( ( given >> 12 ) & 0xf )	4847:14:196494:196555	323377	0	True				
ANR	323956	AndExpression	! allow_unpredictable && ( given & 0xf ) == ( ( given >> 12 ) & 0xf )		323377	0		&&			
ANR	323957	UnaryOperationExpression	! allow_unpredictable		323377	0					
ANR	323958	UnaryOperator	!		323377	0					
ANR	323959	Identifier	allow_unpredictable		323377	1					
ANR	323960	EqualityExpression	( given & 0xf ) == ( ( given >> 12 ) & 0xf )		323377	1		==			
ANR	323961	BitAndExpression	given & 0xf		323377	0		&			
ANR	323962	Identifier	given		323377	0					
ANR	323963	PrimaryExpression	0xf		323377	1					
ANR	323964	BitAndExpression	( given >> 12 ) & 0xf		323377	1		&			
ANR	323965	ShiftExpression	given >> 12		323377	0		>>			
ANR	323966	Identifier	given		323377	0					
ANR	323967	PrimaryExpression	12		323377	1					
ANR	323968	PrimaryExpression	0xf		323377	1					
ANR	323969	CompoundStatement		135:78:4223:4223	323377	1					
ANR	323970	ExpressionStatement	is_unpredictable = TRUE	4848:11:196571:196594	323377	0	True				
ANR	323971	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	323972	Identifier	is_unpredictable		323377	0					
ANR	323973	Identifier	TRUE		323377	1					
ANR	323974	IfStatement	if ( ! allow_unpredictable )		323377	1					
ANR	323975	Condition	! allow_unpredictable	4852:13:196633:196652	323377	0	True				
ANR	323976	UnaryOperationExpression	! allow_unpredictable		323377	0					
ANR	323977	UnaryOperator	!		323377	0					
ANR	323978	Identifier	allow_unpredictable		323377	1					
ANR	323979	CompoundStatement		140:35:4320:4320	323377	1					
ANR	323980	IfStatement	if ( WRITEBACK_BIT_SET || ( ! IMMEDIATE_BIT_SET && ( ( given & 0xf ) == 0xf ) ) )		323377	0					
ANR	323981	Condition	WRITEBACK_BIT_SET || ( ! IMMEDIATE_BIT_SET && ( ( given & 0xf ) == 0xf ) )	4856:14:196838:197019	323377	0	True				
ANR	323982	OrExpression	WRITEBACK_BIT_SET || ( ! IMMEDIATE_BIT_SET && ( ( given & 0xf ) == 0xf ) )		323377	0		||			
ANR	323983	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	323984	AndExpression	! IMMEDIATE_BIT_SET && ( ( given & 0xf ) == 0xf )		323377	1		&&			
ANR	323985	UnaryOperationExpression	! IMMEDIATE_BIT_SET		323377	0					
ANR	323986	UnaryOperator	!		323377	0					
ANR	323987	Identifier	IMMEDIATE_BIT_SET		323377	1					
ANR	323988	EqualityExpression	( given & 0xf ) == 0xf		323377	1		==			
ANR	323989	BitAndExpression	given & 0xf		323377	0		&			
ANR	323990	Identifier	given		323377	0					
ANR	323991	PrimaryExpression	0xf		323377	1					
ANR	323992	PrimaryExpression	0xf		323377	1					
ANR	323993	CompoundStatement		147:62:4687:4687	323377	1					
ANR	323994	ExpressionStatement	is_unpredictable = TRUE	4860:11:197035:197058	323377	0	True				
ANR	323995	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	323996	Identifier	is_unpredictable		323377	0					
ANR	323997	Identifier	TRUE		323377	1					
ANR	323998	BreakStatement	break ;	4865:7:197109:197114	323377	13	True				
ANR	323999	Label	case 'b' :	4867:6:197123:197131	323377	14	True				
ANR	324000	CompoundStatement		156:7:4807:4866	323377	15					
ANR	324001	IdentifierDeclStatement	bfd_vma disp = ( ( ( given & 0xffffff ) ^ 0x800000 ) - 0x800000 ) ;	4868:7:197142:197201	323377	0	True				
ANR	324002	IdentifierDecl	disp = ( ( ( given & 0xffffff ) ^ 0x800000 ) - 0x800000 )		323377	0					
ANR	324003	IdentifierDeclType	bfd_vma		323377	0					
ANR	324004	Identifier	disp		323377	1					
ANR	324005	AssignmentExpression	disp = ( ( ( given & 0xffffff ) ^ 0x800000 ) - 0x800000 )		323377	2		=			
ANR	324006	Identifier	disp		323377	0					
ANR	324007	AdditiveExpression	( ( given & 0xffffff ) ^ 0x800000 ) - 0x800000		323377	1		-			
ANR	324008	ExclusiveOrExpression	( given & 0xffffff ) ^ 0x800000		323377	0		^			
ANR	324009	BitAndExpression	given & 0xffffff		323377	0		&			
ANR	324010	Identifier	given		323377	0					
ANR	324011	PrimaryExpression	0xffffff		323377	1					
ANR	324012	PrimaryExpression	0x800000		323377	1					
ANR	324013	PrimaryExpression	0x800000		323377	1					
ANR	324014	ExpressionStatement	"info -> print_address_func ( disp * 4 + pc + 8 , info )"	4869:7:197210:197260	323377	1	True				
ANR	324015	CallExpression	"info -> print_address_func ( disp * 4 + pc + 8 , info )"		323377	0					
ANR	324016	Callee	info -> print_address_func		323377	0					
ANR	324017	PtrMemberAccess	info -> print_address_func		323377	0					
ANR	324018	Identifier	info		323377	0					
ANR	324019	Identifier	print_address_func		323377	1					
ANR	324020	ArgumentList	disp * 4 + pc + 8		323377	1					
ANR	324021	Argument	disp * 4 + pc + 8		323377	0					
ANR	324022	AdditiveExpression	disp * 4 + pc + 8		323377	0		+			
ANR	324023	MultiplicativeExpression	disp * 4		323377	0		*			
ANR	324024	Identifier	disp		323377	0					
ANR	324025	PrimaryExpression	4		323377	1					
ANR	324026	AdditiveExpression	pc + 8		323377	1		+			
ANR	324027	Identifier	pc		323377	0					
ANR	324028	PrimaryExpression	8		323377	1					
ANR	324029	Argument	info		323377	1					
ANR	324030	Identifier	info		323377	0					
ANR	324031	BreakStatement	break ;	4870:8:197270:197275	323377	16	True				
ANR	324032	Label	case 'c' :	4872:6:197284:197292	323377	17	True				
ANR	324033	IfStatement	if ( ( ( given >> 28 ) & 0xf ) != 0xe )		323377	18					
ANR	324034	Condition	( ( given >> 28 ) & 0xf ) != 0xe	4873:11:197305:197332	323377	0	True				
ANR	324035	EqualityExpression	( ( given >> 28 ) & 0xf ) != 0xe		323377	0		!=			
ANR	324036	BitAndExpression	( given >> 28 ) & 0xf		323377	0		&			
ANR	324037	ShiftExpression	given >> 28		323377	0		>>			
ANR	324038	Identifier	given		323377	0					
ANR	324039	PrimaryExpression	28		323377	1					
ANR	324040	PrimaryExpression	0xf		323377	1					
ANR	324041	PrimaryExpression	0xe		323377	1					
ANR	324042	CompoundStatement		161:41:5000:5000	323377	1					
ANR	324043	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ ( given >> 28 ) & 0xf ] )"	4874:8:197345:197411	323377	0	True				
ANR	324044	CallExpression	"func ( stream , ""%s"" , arm_conditional [ ( given >> 28 ) & 0xf ] )"		323377	0					
ANR	324045	Callee	func		323377	0					
ANR	324046	Identifier	func		323377	0					
ANR	324047	ArgumentList	stream		323377	1					
ANR	324048	Argument	stream		323377	0					
ANR	324049	Identifier	stream		323377	0					
ANR	324050	Argument	"""%s"""		323377	1					
ANR	324051	PrimaryExpression	"""%s"""		323377	0					
ANR	324052	Argument	arm_conditional [ ( given >> 28 ) & 0xf ]		323377	2					
ANR	324053	ArrayIndexing	arm_conditional [ ( given >> 28 ) & 0xf ]		323377	0					
ANR	324054	Identifier	arm_conditional		323377	0					
ANR	324055	BitAndExpression	( given >> 28 ) & 0xf		323377	1		&			
ANR	324056	ShiftExpression	given >> 28		323377	0		>>			
ANR	324057	Identifier	given		323377	0					
ANR	324058	PrimaryExpression	28		323377	1					
ANR	324059	PrimaryExpression	0xf		323377	1					
ANR	324060	BreakStatement	break ;	4877:7:197429:197434	323377	19	True				
ANR	324061	Label	case 'm' :	4879:6:197443:197451	323377	20	True				
ANR	324062	CompoundStatement		169:7:5151:5158	323377	21					
ANR	324063	IdentifierDeclStatement	int started = 0 ;	4880:7:197462:197477	323377	0	True				
ANR	324064	IdentifierDecl	started = 0		323377	0					
ANR	324065	IdentifierDeclType	int		323377	0					
ANR	324066	Identifier	started		323377	1					
ANR	324067	AssignmentExpression	started = 0		323377	2		=			
ANR	324068	Identifier	started		323377	0					
ANR	324069	PrimaryExpression	0		323377	1					
ANR	324070	IdentifierDeclStatement	int reg ;	4881:7:197486:197493	323377	1	True				
ANR	324071	IdentifierDecl	reg		323377	0					
ANR	324072	IdentifierDeclType	int		323377	0					
ANR	324073	Identifier	reg		323377	1					
ANR	324074	ExpressionStatement	"func ( stream , ""{"" )"	4883:7:197503:197521	323377	2	True				
ANR	324075	CallExpression	"func ( stream , ""{"" )"		323377	0					
ANR	324076	Callee	func		323377	0					
ANR	324077	Identifier	func		323377	0					
ANR	324078	ArgumentList	stream		323377	1					
ANR	324079	Argument	stream		323377	0					
ANR	324080	Identifier	stream		323377	0					
ANR	324081	Argument	"""{"""		323377	1					
ANR	324082	PrimaryExpression	"""{"""		323377	0					
ANR	324083	ForStatement	for ( reg = 0 ; reg < 16 ; reg ++ )		323377	3					
ANR	324084	ForInit	reg = 0 ;	4884:12:197535:197542	323377	0	True				
ANR	324085	AssignmentExpression	reg = 0		323377	0		=			
ANR	324086	Identifier	reg		323377	0					
ANR	324087	PrimaryExpression	0		323377	1					
ANR	324088	Condition	reg < 16	4884:21:197544:197551	323377	1	True				
ANR	324089	RelationalExpression	reg < 16		323377	0		<			
ANR	324090	Identifier	reg		323377	0					
ANR	324091	PrimaryExpression	16		323377	1					
ANR	324092	PostIncDecOperationExpression	reg ++	4884:31:197554:197558	323377	2	True				
ANR	324093	Identifier	reg		323377	0					
ANR	324094	IncDec	++		323377	1					
ANR	324095	CompoundStatement		172:38:5226:5226	323377	3					
ANR	324096	IfStatement	if ( ( given & ( 1 << reg ) ) != 0 )		323377	0					
ANR	324097	Condition	( given & ( 1 << reg ) ) != 0	4885:12:197575:197599	323377	0	True				
ANR	324098	EqualityExpression	( given & ( 1 << reg ) ) != 0		323377	0		!=			
ANR	324099	BitAndExpression	given & ( 1 << reg )		323377	0		&			
ANR	324100	Identifier	given		323377	0					
ANR	324101	ShiftExpression	1 << reg		323377	1		<<			
ANR	324102	PrimaryExpression	1		323377	0					
ANR	324103	Identifier	reg		323377	1					
ANR	324104	PrimaryExpression	0		323377	1					
ANR	324105	CompoundStatement		173:39:5267:5267	323377	1					
ANR	324106	IfStatement	if ( started )		323377	0					
ANR	324107	Condition	started	4886:13:197617:197623	323377	0	True				
ANR	324108	Identifier	started		323377	0					
ANR	324109	CompoundStatement		174:22:5291:5291	323377	1					
ANR	324110	ExpressionStatement	"func ( stream , "", "" )"	4887:10:197638:197657	323377	0	True				
ANR	324111	CallExpression	"func ( stream , "", "" )"		323377	0					
ANR	324112	Callee	func		323377	0					
ANR	324113	Identifier	func		323377	0					
ANR	324114	ArgumentList	stream		323377	1					
ANR	324115	Argument	stream		323377	0					
ANR	324116	Identifier	stream		323377	0					
ANR	324117	Argument	""", """		323377	1					
ANR	324118	PrimaryExpression	""", """		323377	0					
ANR	324119	ExpressionStatement	started = 1	4889:9:197679:197690	323377	1	True				
ANR	324120	AssignmentExpression	started = 1		323377	0		=			
ANR	324121	Identifier	started		323377	0					
ANR	324122	PrimaryExpression	1		323377	1					
ANR	324123	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	4890:9:197701:197739	323377	2	True				
ANR	324124	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		323377	0					
ANR	324125	Callee	func		323377	0					
ANR	324126	Identifier	func		323377	0					
ANR	324127	ArgumentList	stream		323377	1					
ANR	324128	Argument	stream		323377	0					
ANR	324129	Identifier	stream		323377	0					
ANR	324130	Argument	"""%s"""		323377	1					
ANR	324131	PrimaryExpression	"""%s"""		323377	0					
ANR	324132	Argument	arm_regnames [ reg ]		323377	2					
ANR	324133	ArrayIndexing	arm_regnames [ reg ]		323377	0					
ANR	324134	Identifier	arm_regnames		323377	0					
ANR	324135	Identifier	reg		323377	1					
ANR	324136	ExpressionStatement	"func ( stream , ""}"" )"	4893:7:197767:197785	323377	4	True				
ANR	324137	CallExpression	"func ( stream , ""}"" )"		323377	0					
ANR	324138	Callee	func		323377	0					
ANR	324139	Identifier	func		323377	0					
ANR	324140	ArgumentList	stream		323377	1					
ANR	324141	Argument	stream		323377	0					
ANR	324142	Identifier	stream		323377	0					
ANR	324143	Argument	"""}"""		323377	1					
ANR	324144	PrimaryExpression	"""}"""		323377	0					
ANR	324145	IfStatement	if ( ! started )		323377	5					
ANR	324146	Condition	! started	4894:11:197798:197805	323377	0	True				
ANR	324147	UnaryOperationExpression	! started		323377	0					
ANR	324148	UnaryOperator	!		323377	0					
ANR	324149	Identifier	started		323377	1					
ANR	324150	CompoundStatement		182:21:5473:5473	323377	1					
ANR	324151	ExpressionStatement	is_unpredictable = TRUE	4895:8:197818:197841	323377	0	True				
ANR	324152	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	324153	Identifier	is_unpredictable		323377	0					
ANR	324154	Identifier	TRUE		323377	1					
ANR	324155	BreakStatement	break ;	4897:8:197860:197865	323377	22	True				
ANR	324156	Label	case 'q' :	4899:6:197874:197882	323377	23	True				
ANR	324157	ExpressionStatement	"arm_decode_shift ( given , func , stream , FALSE )"	4900:7:197891:197936	323377	24	True				
ANR	324158	CallExpression	"arm_decode_shift ( given , func , stream , FALSE )"		323377	0					
ANR	324159	Callee	arm_decode_shift		323377	0					
ANR	324160	Identifier	arm_decode_shift		323377	0					
ANR	324161	ArgumentList	given		323377	1					
ANR	324162	Argument	given		323377	0					
ANR	324163	Identifier	given		323377	0					
ANR	324164	Argument	func		323377	1					
ANR	324165	Identifier	func		323377	0					
ANR	324166	Argument	stream		323377	2					
ANR	324167	Identifier	stream		323377	0					
ANR	324168	Argument	FALSE		323377	3					
ANR	324169	Identifier	FALSE		323377	0					
ANR	324170	BreakStatement	break ;	4901:7:197945:197950	323377	25	True				
ANR	324171	Label	case 'o' :	4903:6:197959:197967	323377	26	True				
ANR	324172	IfStatement	if ( ( given & 0x02000000 ) != 0 )		323377	27					
ANR	324173	Condition	( given & 0x02000000 ) != 0	4904:11:197980:198004	323377	0	True				
ANR	324174	EqualityExpression	( given & 0x02000000 ) != 0		323377	0		!=			
ANR	324175	BitAndExpression	given & 0x02000000		323377	0		&			
ANR	324176	Identifier	given		323377	0					
ANR	324177	PrimaryExpression	0x02000000		323377	1					
ANR	324178	PrimaryExpression	0		323377	1					
ANR	324179	CompoundStatement		195:8:5779:5796	323377	1					
ANR	324180	IdentifierDeclStatement	unsigned int rotate = ( given & 0xf00 ) >> 7 ;	4905:8:198017:198059	323377	0	True				
ANR	324181	IdentifierDecl	rotate = ( given & 0xf00 ) >> 7		323377	0					
ANR	324182	IdentifierDeclType	unsigned int		323377	0					
ANR	324183	Identifier	rotate		323377	1					
ANR	324184	AssignmentExpression	rotate = ( given & 0xf00 ) >> 7		323377	2		=			
ANR	324185	Identifier	rotate		323377	0					
ANR	324186	ShiftExpression	( given & 0xf00 ) >> 7		323377	1		>>			
ANR	324187	BitAndExpression	given & 0xf00		323377	0		&			
ANR	324188	Identifier	given		323377	0					
ANR	324189	PrimaryExpression	0xf00		323377	1					
ANR	324190	PrimaryExpression	7		323377	1					
ANR	324191	IdentifierDeclStatement	unsigned int immed = ( given & 0xff ) ;	4906:8:198069:198104	323377	1	True				
ANR	324192	IdentifierDecl	immed = ( given & 0xff )		323377	0					
ANR	324193	IdentifierDeclType	unsigned int		323377	0					
ANR	324194	Identifier	immed		323377	1					
ANR	324195	AssignmentExpression	immed = ( given & 0xff )		323377	2		=			
ANR	324196	Identifier	immed		323377	0					
ANR	324197	BitAndExpression	given & 0xff		323377	1		&			
ANR	324198	Identifier	given		323377	0					
ANR	324199	PrimaryExpression	0xff		323377	1					
ANR	324200	IdentifierDeclStatement	"unsigned int a , i ;"	4907:8:198114:198131	323377	2	True				
ANR	324201	IdentifierDecl	a		323377	0					
ANR	324202	IdentifierDeclType	unsigned int		323377	0					
ANR	324203	Identifier	a		323377	1					
ANR	324204	IdentifierDecl	i		323377	1					
ANR	324205	IdentifierDeclType	unsigned int		323377	0					
ANR	324206	Identifier	i		323377	1					
ANR	324207	ExpressionStatement	a = ( ( ( immed << ( 32 - rotate ) ) | ( immed >> rotate ) ) & 0xffffffff )	4909:8:198142:198207	323377	3	True				
ANR	324208	AssignmentExpression	a = ( ( ( immed << ( 32 - rotate ) ) | ( immed >> rotate ) ) & 0xffffffff )		323377	0		=			
ANR	324209	Identifier	a		323377	0					
ANR	324210	BitAndExpression	( ( immed << ( 32 - rotate ) ) | ( immed >> rotate ) ) & 0xffffffff		323377	1		&			
ANR	324211	InclusiveOrExpression	( immed << ( 32 - rotate ) ) | ( immed >> rotate )		323377	0		|			
ANR	324212	ShiftExpression	immed << ( 32 - rotate )		323377	0		<<			
ANR	324213	Identifier	immed		323377	0					
ANR	324214	AdditiveExpression	32 - rotate		323377	1		-			
ANR	324215	PrimaryExpression	32		323377	0					
ANR	324216	Identifier	rotate		323377	1					
ANR	324217	ShiftExpression	immed >> rotate		323377	1		>>			
ANR	324218	Identifier	immed		323377	0					
ANR	324219	Identifier	rotate		323377	1					
ANR	324220	PrimaryExpression	0xffffffff		323377	1					
ANR	324221	ForStatement	for ( i = 0 ; i < 32 ; i += 2 )		323377	4					
ANR	324222	ForInit	i = 0 ;	4912:13:198336:198341	323377	0	True				
ANR	324223	AssignmentExpression	i = 0		323377	0		=			
ANR	324224	Identifier	i		323377	0					
ANR	324225	PrimaryExpression	0		323377	1					
ANR	324226	Condition	i < 32	4912:20:198343:198348	323377	1	True				
ANR	324227	RelationalExpression	i < 32		323377	0		<			
ANR	324228	Identifier	i		323377	0					
ANR	324229	PrimaryExpression	32		323377	1					
ANR	324230	AssignmentExpression	i += 2	4912:28:198351:198356	323377	2	True	+=			
ANR	324231	Identifier	i		323377	0					
ANR	324232	PrimaryExpression	2		323377	1					
ANR	324233	CompoundStatement		200:36:6024:6024	323377	3					
ANR	324234	IfStatement	if ( ( a << i | a >> ( 32 - i ) ) <= 0xff )		323377	0					
ANR	324235	Condition	( a << i | a >> ( 32 - i ) ) <= 0xff	4913:13:198374:198405	323377	0	True				
ANR	324236	RelationalExpression	( a << i | a >> ( 32 - i ) ) <= 0xff		323377	0		<=			
ANR	324237	InclusiveOrExpression	a << i | a >> ( 32 - i )		323377	0		|			
ANR	324238	ShiftExpression	a << i		323377	0		<<			
ANR	324239	Identifier	a		323377	0					
ANR	324240	Identifier	i		323377	1					
ANR	324241	ShiftExpression	a >> ( 32 - i )		323377	1		>>			
ANR	324242	Identifier	a		323377	0					
ANR	324243	AdditiveExpression	32 - i		323377	1		-			
ANR	324244	PrimaryExpression	32		323377	0					
ANR	324245	Identifier	i		323377	1					
ANR	324246	PrimaryExpression	0xff		323377	1					
ANR	324247	CompoundStatement		201:47:6073:6073	323377	1					
ANR	324248	BreakStatement	break ;	4914:10:198420:198425	323377	0	True				
ANR	324249	IfStatement	if ( i != rotate )		323377	5					
ANR	324250	Condition	i != rotate	4918:12:198461:198471	323377	0	True				
ANR	324251	EqualityExpression	i != rotate		323377	0		!=			
ANR	324252	Identifier	i		323377	0					
ANR	324253	Identifier	rotate		323377	1					
ANR	324254	CompoundStatement		206:25:6139:6139	323377	1					
ANR	324255	ExpressionStatement	"func ( stream , ""%d, %d"" , immed , rotate )"	4919:9:198485:198523	323377	0	True				
ANR	324256	CallExpression	"func ( stream , ""%d, %d"" , immed , rotate )"		323377	0					
ANR	324257	Callee	func		323377	0					
ANR	324258	Identifier	func		323377	0					
ANR	324259	ArgumentList	stream		323377	1					
ANR	324260	Argument	stream		323377	0					
ANR	324261	Identifier	stream		323377	0					
ANR	324262	Argument	"""%d, %d"""		323377	1					
ANR	324263	PrimaryExpression	"""%d, %d"""		323377	0					
ANR	324264	Argument	immed		323377	2					
ANR	324265	Identifier	immed		323377	0					
ANR	324266	Argument	rotate		323377	3					
ANR	324267	Identifier	rotate		323377	0					
ANR	324268	ElseStatement	else		323377	0					
ANR	324269	CompoundStatement		208:15:6205:6205	323377	0					
ANR	324270	ExpressionStatement	"func ( stream , ""%d"" , a )"	4921:9:198551:198573	323377	0	True				
ANR	324271	CallExpression	"func ( stream , ""%d"" , a )"		323377	0					
ANR	324272	Callee	func		323377	0					
ANR	324273	Identifier	func		323377	0					
ANR	324274	ArgumentList	stream		323377	1					
ANR	324275	Argument	stream		323377	0					
ANR	324276	Identifier	stream		323377	0					
ANR	324277	Argument	"""%d"""		323377	1					
ANR	324278	PrimaryExpression	"""%d"""		323377	0					
ANR	324279	Argument	a		323377	2					
ANR	324280	Identifier	a		323377	0					
ANR	324281	ExpressionStatement	value_in_comment = a	4923:8:198593:198613	323377	6	True				
ANR	324282	AssignmentExpression	value_in_comment = a		323377	0		=			
ANR	324283	Identifier	value_in_comment		323377	0					
ANR	324284	Identifier	a		323377	1					
ANR	324285	ElseStatement	else		323377	0					
ANR	324286	CompoundStatement		212:14:6294:6294	323377	0					
ANR	324287	ExpressionStatement	"arm_decode_shift ( given , func , stream , TRUE )"	4925:8:198639:198683	323377	0	True				
ANR	324288	CallExpression	"arm_decode_shift ( given , func , stream , TRUE )"		323377	0					
ANR	324289	Callee	arm_decode_shift		323377	0					
ANR	324290	Identifier	arm_decode_shift		323377	0					
ANR	324291	ArgumentList	given		323377	1					
ANR	324292	Argument	given		323377	0					
ANR	324293	Identifier	given		323377	0					
ANR	324294	Argument	func		323377	1					
ANR	324295	Identifier	func		323377	0					
ANR	324296	Argument	stream		323377	2					
ANR	324297	Identifier	stream		323377	0					
ANR	324298	Argument	TRUE		323377	3					
ANR	324299	Identifier	TRUE		323377	0					
ANR	324300	BreakStatement	break ;	4927:7:198701:198706	323377	28	True				
ANR	324301	Label	case 'p' :	4929:6:198715:198723	323377	29	True				
ANR	324302	IfStatement	if ( ( given & 0x0000f000 ) == 0x0000f000 )		323377	30					
ANR	324303	Condition	( given & 0x0000f000 ) == 0x0000f000	4930:11:198736:198769	323377	0	True				
ANR	324304	EqualityExpression	( given & 0x0000f000 ) == 0x0000f000		323377	0		==			
ANR	324305	BitAndExpression	given & 0x0000f000		323377	0		&			
ANR	324306	Identifier	given		323377	0					
ANR	324307	PrimaryExpression	0x0000f000		323377	1					
ANR	324308	PrimaryExpression	0x0000f000		323377	1					
ANR	324309	CompoundStatement		219:8:6447:6518	323377	1					
ANR	324310	IdentifierDeclStatement	arm_feature_set arm_ext_v6 = ARM_FEATURE_CORE_LOW ( ARM_EXT_V6 ) ;	4931:8:198782:198853	323377	0	True				
ANR	324311	IdentifierDecl	arm_ext_v6 = ARM_FEATURE_CORE_LOW ( ARM_EXT_V6 )		323377	0					
ANR	324312	IdentifierDeclType	arm_feature_set		323377	0					
ANR	324313	Identifier	arm_ext_v6		323377	1					
ANR	324314	AssignmentExpression	arm_ext_v6 = ARM_FEATURE_CORE_LOW ( ARM_EXT_V6 )		323377	2		=			
ANR	324315	Identifier	arm_ext_v6		323377	0					
ANR	324316	CallExpression	ARM_FEATURE_CORE_LOW ( ARM_EXT_V6 )		323377	1					
ANR	324317	Callee	ARM_FEATURE_CORE_LOW		323377	0					
ANR	324318	Identifier	ARM_FEATURE_CORE_LOW		323377	0					
ANR	324319	ArgumentList	ARM_EXT_V6		323377	1					
ANR	324320	Argument	ARM_EXT_V6		323377	0					
ANR	324321	Identifier	ARM_EXT_V6		323377	0					
ANR	324322	IfStatement	"if ( ! ARM_CPU_HAS_FEATURE ( private_data -> features , arm_ext_v6 ) )"		323377	1					
ANR	324323	Condition	"! ARM_CPU_HAS_FEATURE ( private_data -> features , arm_ext_v6 )"	4937:12:199019:199088	323377	0	True				
ANR	324324	UnaryOperationExpression	"! ARM_CPU_HAS_FEATURE ( private_data -> features , arm_ext_v6 )"		323377	0					
ANR	324325	UnaryOperator	!		323377	0					
ANR	324326	CallExpression	"ARM_CPU_HAS_FEATURE ( private_data -> features , arm_ext_v6 )"		323377	1					
ANR	324327	Callee	ARM_CPU_HAS_FEATURE		323377	0					
ANR	324328	Identifier	ARM_CPU_HAS_FEATURE		323377	0					
ANR	324329	ArgumentList	private_data -> features		323377	1					
ANR	324330	Argument	private_data -> features		323377	0					
ANR	324331	PtrMemberAccess	private_data -> features		323377	0					
ANR	324332	Identifier	private_data		323377	0					
ANR	324333	Identifier	features		323377	1					
ANR	324334	Argument	arm_ext_v6		323377	1					
ANR	324335	Identifier	arm_ext_v6		323377	0					
ANR	324336	CompoundStatement		226:26:6756:6756	323377	1					
ANR	324337	ExpressionStatement	"func ( stream , ""p"" )"	4939:9:199102:199120	323377	0	True				
ANR	324338	CallExpression	"func ( stream , ""p"" )"		323377	0					
ANR	324339	Callee	func		323377	0					
ANR	324340	Identifier	func		323377	0					
ANR	324341	ArgumentList	stream		323377	1					
ANR	324342	Argument	stream		323377	0					
ANR	324343	Identifier	stream		323377	0					
ANR	324344	Argument	"""p"""		323377	1					
ANR	324345	PrimaryExpression	"""p"""		323377	0					
ANR	324346	ElseStatement	else		323377	0					
ANR	324347	CompoundStatement		228:15:6802:6802	323377	0					
ANR	324348	ExpressionStatement	is_unpredictable = TRUE	4941:9:199148:199171	323377	0	True				
ANR	324349	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	324350	Identifier	is_unpredictable		323377	0					
ANR	324351	Identifier	TRUE		323377	1					
ANR	324352	BreakStatement	break ;	4944:7:199199:199204	323377	31	True				
ANR	324353	Label	case 't' :	4946:6:199213:199221	323377	32	True				
ANR	324354	IfStatement	if ( ( given & 0x01200000 ) == 0x00200000 )		323377	33					
ANR	324355	Condition	( given & 0x01200000 ) == 0x00200000	4947:11:199234:199267	323377	0	True				
ANR	324356	EqualityExpression	( given & 0x01200000 ) == 0x00200000		323377	0		==			
ANR	324357	BitAndExpression	given & 0x01200000		323377	0		&			
ANR	324358	Identifier	given		323377	0					
ANR	324359	PrimaryExpression	0x01200000		323377	1					
ANR	324360	PrimaryExpression	0x00200000		323377	1					
ANR	324361	CompoundStatement		235:47:6935:6935	323377	1					
ANR	324362	ExpressionStatement	"func ( stream , ""t"" )"	4948:8:199280:199298	323377	0	True				
ANR	324363	CallExpression	"func ( stream , ""t"" )"		323377	0					
ANR	324364	Callee	func		323377	0					
ANR	324365	Identifier	func		323377	0					
ANR	324366	ArgumentList	stream		323377	1					
ANR	324367	Argument	stream		323377	0					
ANR	324368	Identifier	stream		323377	0					
ANR	324369	Argument	"""t"""		323377	1					
ANR	324370	PrimaryExpression	"""t"""		323377	0					
ANR	324371	BreakStatement	break ;	4950:7:199316:199321	323377	34	True				
ANR	324372	Label	case 'A' :	4952:6:199330:199338	323377	35	True				
ANR	324373	CompoundStatement		241:7:7014:7039	323377	36					
ANR	324374	IdentifierDeclStatement	int offset = given & 0xff ;	4953:7:199349:199374	323377	0	True				
ANR	324375	IdentifierDecl	offset = given & 0xff		323377	0					
ANR	324376	IdentifierDeclType	int		323377	0					
ANR	324377	Identifier	offset		323377	1					
ANR	324378	AssignmentExpression	offset = given & 0xff		323377	2		=			
ANR	324379	Identifier	offset		323377	0					
ANR	324380	BitAndExpression	given & 0xff		323377	1		&			
ANR	324381	Identifier	given		323377	0					
ANR	324382	PrimaryExpression	0xff		323377	1					
ANR	324383	ExpressionStatement	value_in_comment = offset * 4	4955:7:199384:199413	323377	1	True				
ANR	324384	AssignmentExpression	value_in_comment = offset * 4		323377	0		=			
ANR	324385	Identifier	value_in_comment		323377	0					
ANR	324386	MultiplicativeExpression	offset * 4		323377	1		*			
ANR	324387	Identifier	offset		323377	0					
ANR	324388	PrimaryExpression	4		323377	1					
ANR	324389	IfStatement	if ( NEGATIVE_BIT_SET )		323377	2					
ANR	324390	Condition	NEGATIVE_BIT_SET	4956:11:199426:199441	323377	0	True				
ANR	324391	Identifier	NEGATIVE_BIT_SET		323377	0					
ANR	324392	CompoundStatement		244:29:7109:7109	323377	1					
ANR	324393	ExpressionStatement	value_in_comment = - value_in_comment	4957:8:199454:199490	323377	0	True				
ANR	324394	AssignmentExpression	value_in_comment = - value_in_comment		323377	0		=			
ANR	324395	Identifier	value_in_comment		323377	0					
ANR	324396	UnaryOperationExpression	- value_in_comment		323377	1					
ANR	324397	UnaryOperator	-		323377	0					
ANR	324398	Identifier	value_in_comment		323377	1					
ANR	324399	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"	4960:7:199509:199564	323377	3	True				
ANR	324400	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ ( given >> 16 ) & 0xf ] )"		323377	0					
ANR	324401	Callee	func		323377	0					
ANR	324402	Identifier	func		323377	0					
ANR	324403	ArgumentList	stream		323377	1					
ANR	324404	Argument	stream		323377	0					
ANR	324405	Identifier	stream		323377	0					
ANR	324406	Argument	"""[%s"""		323377	1					
ANR	324407	PrimaryExpression	"""[%s"""		323377	0					
ANR	324408	Argument	arm_regnames [ ( given >> 16 ) & 0xf ]		323377	2					
ANR	324409	ArrayIndexing	arm_regnames [ ( given >> 16 ) & 0xf ]		323377	0					
ANR	324410	Identifier	arm_regnames		323377	0					
ANR	324411	BitAndExpression	( given >> 16 ) & 0xf		323377	1		&			
ANR	324412	ShiftExpression	given >> 16		323377	0		>>			
ANR	324413	Identifier	given		323377	0					
ANR	324414	PrimaryExpression	16		323377	1					
ANR	324415	PrimaryExpression	0xf		323377	1					
ANR	324416	IfStatement	if ( PRE_BIT_SET )		323377	4					
ANR	324417	Condition	PRE_BIT_SET	4962:11:199578:199588	323377	0	True				
ANR	324418	Identifier	PRE_BIT_SET		323377	0					
ANR	324419	CompoundStatement		250:24:7256:7256	323377	1					
ANR	324420	IfStatement	if ( offset )		323377	0					
ANR	324421	Condition	offset	4963:12:199605:199610	323377	0	True				
ANR	324422	Identifier	offset		323377	0					
ANR	324423	CompoundStatement		251:20:7278:7278	323377	1					
ANR	324424	ExpressionStatement	"func ( stream , "", %d]%s"" , ( int ) value_in_comment , WRITEBACK_BIT_SET ? ""!"" : """" )"	4964:9:199624:199721	323377	0	True				
ANR	324425	CallExpression	"func ( stream , "", %d]%s"" , ( int ) value_in_comment , WRITEBACK_BIT_SET ? ""!"" : """" )"		323377	0					
ANR	324426	Callee	func		323377	0					
ANR	324427	Identifier	func		323377	0					
ANR	324428	ArgumentList	stream		323377	1					
ANR	324429	Argument	stream		323377	0					
ANR	324430	Identifier	stream		323377	0					
ANR	324431	Argument	""", %d]%s"""		323377	1					
ANR	324432	PrimaryExpression	""", %d]%s"""		323377	0					
ANR	324433	Argument	( int ) value_in_comment		323377	2					
ANR	324434	CastExpression	( int ) value_in_comment		323377	0					
ANR	324435	CastTarget	int		323377	0					
ANR	324436	Identifier	value_in_comment		323377	1					
ANR	324437	Argument	"WRITEBACK_BIT_SET ? ""!"" : """""		323377	3					
ANR	324438	ConditionalExpression	"WRITEBACK_BIT_SET ? ""!"" : """""		323377	0					
ANR	324439	Condition	WRITEBACK_BIT_SET		323377	0					
ANR	324440	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	324441	PrimaryExpression	"""!"""		323377	1					
ANR	324442	PrimaryExpression	""""""		323377	2					
ANR	324443	ElseStatement	else		323377	0					
ANR	324444	CompoundStatement		255:15:7403:7403	323377	0					
ANR	324445	ExpressionStatement	"func ( stream , ""]"" )"	4968:9:199749:199767	323377	0	True				
ANR	324446	CallExpression	"func ( stream , ""]"" )"		323377	0					
ANR	324447	Callee	func		323377	0					
ANR	324448	Identifier	func		323377	0					
ANR	324449	ArgumentList	stream		323377	1					
ANR	324450	Argument	stream		323377	0					
ANR	324451	Identifier	stream		323377	0					
ANR	324452	Argument	"""]"""		323377	1					
ANR	324453	PrimaryExpression	"""]"""		323377	0					
ANR	324454	ElseStatement	else		323377	0					
ANR	324455	CompoundStatement		258:14:7458:7458	323377	0					
ANR	324456	ExpressionStatement	"func ( stream , ""]"" )"	4971:8:199803:199821	323377	0	True				
ANR	324457	CallExpression	"func ( stream , ""]"" )"		323377	0					
ANR	324458	Callee	func		323377	0					
ANR	324459	Identifier	func		323377	0					
ANR	324460	ArgumentList	stream		323377	1					
ANR	324461	Argument	stream		323377	0					
ANR	324462	Identifier	stream		323377	0					
ANR	324463	Argument	"""]"""		323377	1					
ANR	324464	PrimaryExpression	"""]"""		323377	0					
ANR	324465	IfStatement	if ( WRITEBACK_BIT_SET )		323377	1					
ANR	324466	Condition	WRITEBACK_BIT_SET	4973:12:199836:199852	323377	0	True				
ANR	324467	Identifier	WRITEBACK_BIT_SET		323377	0					
ANR	324468	CompoundStatement		261:31:7520:7520	323377	1					
ANR	324469	IfStatement	if ( offset )		323377	0					
ANR	324470	Condition	offset	4974:13:199870:199875	323377	0	True				
ANR	324471	Identifier	offset		323377	0					
ANR	324472	CompoundStatement		262:21:7543:7543	323377	1					
ANR	324473	ExpressionStatement	"func ( stream , "", %d"" , ( int ) value_in_comment )"	4975:10:199890:199934	323377	0	True				
ANR	324474	CallExpression	"func ( stream , "", %d"" , ( int ) value_in_comment )"		323377	0					
ANR	324475	Callee	func		323377	0					
ANR	324476	Identifier	func		323377	0					
ANR	324477	ArgumentList	stream		323377	1					
ANR	324478	Argument	stream		323377	0					
ANR	324479	Identifier	stream		323377	0					
ANR	324480	Argument	""", %d"""		323377	1					
ANR	324481	PrimaryExpression	""", %d"""		323377	0					
ANR	324482	Argument	( int ) value_in_comment		323377	2					
ANR	324483	CastExpression	( int ) value_in_comment		323377	0					
ANR	324484	CastTarget	int		323377	0					
ANR	324485	Identifier	value_in_comment		323377	1					
ANR	324486	ElseStatement	else		323377	0					
ANR	324487	CompoundStatement		265:15:7627:7627	323377	0					
ANR	324488	ExpressionStatement	"func ( stream , "", {%d}"" , ( int ) offset )"	4978:9:199973:200009	323377	0	True				
ANR	324489	CallExpression	"func ( stream , "", {%d}"" , ( int ) offset )"		323377	0					
ANR	324490	Callee	func		323377	0					
ANR	324491	Identifier	func		323377	0					
ANR	324492	ArgumentList	stream		323377	1					
ANR	324493	Argument	stream		323377	0					
ANR	324494	Identifier	stream		323377	0					
ANR	324495	Argument	""", {%d}"""		323377	1					
ANR	324496	PrimaryExpression	""", {%d}"""		323377	0					
ANR	324497	Argument	( int ) offset		323377	2					
ANR	324498	CastExpression	( int ) offset		323377	0					
ANR	324499	CastTarget	int		323377	0					
ANR	324500	Identifier	offset		323377	1					
ANR	324501	ExpressionStatement	value_in_comment = offset	4979:9:200020:200045	323377	1	True				
ANR	324502	AssignmentExpression	value_in_comment = offset		323377	0		=			
ANR	324503	Identifier	value_in_comment		323377	0					
ANR	324504	Identifier	offset		323377	1					
ANR	324505	BreakStatement	break ;	4982:8:200074:200079	323377	37	True				
ANR	324506	Label	case 'B' :	4984:6:200088:200096	323377	38	True				
ANR	324507	CompoundStatement		276:8:7860:7878	323377	39					
ANR	324508	IdentifierDeclStatement	bfd_vma address ;	4987:8:200170:200185	323377	0	True				
ANR	324509	IdentifierDecl	address		323377	0					
ANR	324510	IdentifierDeclType	bfd_vma		323377	0					
ANR	324511	Identifier	address		323377	1					
ANR	324512	IdentifierDeclStatement	bfd_vma offset = 0 ;	4988:8:200195:200213	323377	1	True				
ANR	324513	IdentifierDecl	offset = 0		323377	0					
ANR	324514	IdentifierDeclType	bfd_vma		323377	0					
ANR	324515	Identifier	offset		323377	1					
ANR	324516	AssignmentExpression	offset = 0		323377	2		=			
ANR	324517	Identifier	offset		323377	0					
ANR	324518	PrimaryExpression	0		323377	1					
ANR	324519	IfStatement	if ( ! NEGATIVE_BIT_SET )		323377	2					
ANR	324520	Condition	! NEGATIVE_BIT_SET	4990:12:200228:200244	323377	0	True				
ANR	324521	UnaryOperationExpression	! NEGATIVE_BIT_SET		323377	0					
ANR	324522	UnaryOperator	!		323377	0					
ANR	324523	Identifier	NEGATIVE_BIT_SET		323377	1					
ANR	324524	CompoundStatement		278:31:7912:7912	323377	1					
ANR	324525	ExpressionStatement	offset = ( - 1 ) ^ 0x00ffffff	4992:9:200309:200335	323377	0	True				
ANR	324526	AssignmentExpression	offset = ( - 1 ) ^ 0x00ffffff		323377	0		=			
ANR	324527	Identifier	offset		323377	0					
ANR	324528	ExclusiveOrExpression	( - 1 ) ^ 0x00ffffff		323377	1		^			
ANR	324529	UnaryOperationExpression	- 1		323377	0					
ANR	324530	UnaryOperator	-		323377	0					
ANR	324531	PrimaryExpression	1		323377	1					
ANR	324532	PrimaryExpression	0x00ffffff		323377	1					
ANR	324533	ExpressionStatement	offset += given & 0x00ffffff	4996:8:200412:200440	323377	3	True				
ANR	324534	AssignmentExpression	offset += given & 0x00ffffff		323377	0		+=			
ANR	324535	Identifier	offset		323377	0					
ANR	324536	BitAndExpression	given & 0x00ffffff		323377	1		&			
ANR	324537	Identifier	given		323377	0					
ANR	324538	PrimaryExpression	0x00ffffff		323377	1					
ANR	324539	ExpressionStatement	offset <<= 2	4997:8:200450:200462	323377	4	True				
ANR	324540	AssignmentExpression	offset <<= 2		323377	0		<<=			
ANR	324541	Identifier	offset		323377	0					
ANR	324542	PrimaryExpression	2		323377	1					
ANR	324543	ExpressionStatement	address = offset + pc + 8	4998:8:200472:200497	323377	5	True				
ANR	324544	AssignmentExpression	address = offset + pc + 8		323377	0		=			
ANR	324545	Identifier	address		323377	0					
ANR	324546	AdditiveExpression	offset + pc + 8		323377	1		+			
ANR	324547	Identifier	offset		323377	0					
ANR	324548	AdditiveExpression	pc + 8		323377	1		+			
ANR	324549	Identifier	pc		323377	0					
ANR	324550	PrimaryExpression	8		323377	1					
ANR	324551	IfStatement	if ( given & 0x01000000 )		323377	6					
ANR	324552	Condition	given & 0x01000000	5000:12:200512:200529	323377	0	True				
ANR	324553	BitAndExpression	given & 0x01000000		323377	0		&			
ANR	324554	Identifier	given		323377	0					
ANR	324555	PrimaryExpression	0x01000000		323377	1					
ANR	324556	CompoundStatement		288:32:8197:8197	323377	1					
ANR	324557	ExpressionStatement	address += 2	5002:9:200605:200617	323377	0	True				
ANR	324558	AssignmentExpression	address += 2		323377	0		+=			
ANR	324559	Identifier	address		323377	0					
ANR	324560	PrimaryExpression	2		323377	1					
ANR	324561	ExpressionStatement	"info -> print_address_func ( address , info )"	5005:8:200638:200678	323377	7	True				
ANR	324562	CallExpression	"info -> print_address_func ( address , info )"		323377	0					
ANR	324563	Callee	info -> print_address_func		323377	0					
ANR	324564	PtrMemberAccess	info -> print_address_func		323377	0					
ANR	324565	Identifier	info		323377	0					
ANR	324566	Identifier	print_address_func		323377	1					
ANR	324567	ArgumentList	address		323377	1					
ANR	324568	Argument	address		323377	0					
ANR	324569	Identifier	address		323377	0					
ANR	324570	Argument	info		323377	1					
ANR	324571	Identifier	info		323377	0					
ANR	324572	BreakStatement	break ;	5007:7:200696:200701	323377	40	True				
ANR	324573	Label	case 'C' :	5009:6:200710:200718	323377	41	True				
ANR	324574	IfStatement	if ( ( given & 0x02000200 ) == 0x200 )		323377	42					
ANR	324575	Condition	( given & 0x02000200 ) == 0x200	5010:11:200731:200759	323377	0	True				
ANR	324576	EqualityExpression	( given & 0x02000200 ) == 0x200		323377	0		==			
ANR	324577	BitAndExpression	given & 0x02000200		323377	0		&			
ANR	324578	Identifier	given		323377	0					
ANR	324579	PrimaryExpression	0x02000200		323377	1					
ANR	324580	PrimaryExpression	0x200		323377	1					
ANR	324581	CompoundStatement		300:8:8463:8505	323377	1					
ANR	324582	IdentifierDeclStatement	const char * name ;	5011:8:200772:200788	323377	0	True				
ANR	324583	IdentifierDecl	* name		323377	0					
ANR	324584	IdentifierDeclType	const char *		323377	0					
ANR	324585	Identifier	name		323377	1					
ANR	324586	IdentifierDeclStatement	unsigned sysm = ( given & 0x004f0000 ) >> 16 ;	5012:8:200798:200840	323377	1	True				
ANR	324587	IdentifierDecl	sysm = ( given & 0x004f0000 ) >> 16		323377	0					
ANR	324588	IdentifierDeclType	unsigned		323377	0					
ANR	324589	Identifier	sysm		323377	1					
ANR	324590	AssignmentExpression	sysm = ( given & 0x004f0000 ) >> 16		323377	2		=			
ANR	324591	Identifier	sysm		323377	0					
ANR	324592	ShiftExpression	( given & 0x004f0000 ) >> 16		323377	1		>>			
ANR	324593	BitAndExpression	given & 0x004f0000		323377	0		&			
ANR	324594	Identifier	given		323377	0					
ANR	324595	PrimaryExpression	0x004f0000		323377	1					
ANR	324596	PrimaryExpression	16		323377	1					
ANR	324597	ExpressionStatement	sysm |= ( given & 0x300 ) >> 4	5014:8:200851:200879	323377	2	True				
ANR	324598	AssignmentExpression	sysm |= ( given & 0x300 ) >> 4		323377	0		|=			
ANR	324599	Identifier	sysm		323377	0					
ANR	324600	ShiftExpression	( given & 0x300 ) >> 4		323377	1		>>			
ANR	324601	BitAndExpression	given & 0x300		323377	0		&			
ANR	324602	Identifier	given		323377	0					
ANR	324603	PrimaryExpression	0x300		323377	1					
ANR	324604	PrimaryExpression	4		323377	1					
ANR	324605	ExpressionStatement	name = banked_regname ( sysm )	5015:8:200889:200917	323377	3	True				
ANR	324606	AssignmentExpression	name = banked_regname ( sysm )		323377	0		=			
ANR	324607	Identifier	name		323377	0					
ANR	324608	CallExpression	banked_regname ( sysm )		323377	1					
ANR	324609	Callee	banked_regname		323377	0					
ANR	324610	Identifier	banked_regname		323377	0					
ANR	324611	ArgumentList	sysm		323377	1					
ANR	324612	Argument	sysm		323377	0					
ANR	324613	Identifier	sysm		323377	0					
ANR	324614	IfStatement	if ( name != NULL )		323377	4					
ANR	324615	Condition	name != NULL	5017:12:200932:200943	323377	0	True				
ANR	324616	EqualityExpression	name != NULL		323377	0		!=			
ANR	324617	Identifier	name		323377	0					
ANR	324618	Identifier	NULL		323377	1					
ANR	324619	CompoundStatement		305:26:8611:8611	323377	1					
ANR	324620	ExpressionStatement	"func ( stream , ""%s"" , name )"	5018:9:200957:200982	323377	0	True				
ANR	324621	CallExpression	"func ( stream , ""%s"" , name )"		323377	0					
ANR	324622	Callee	func		323377	0					
ANR	324623	Identifier	func		323377	0					
ANR	324624	ArgumentList	stream		323377	1					
ANR	324625	Argument	stream		323377	0					
ANR	324626	Identifier	stream		323377	0					
ANR	324627	Argument	"""%s"""		323377	1					
ANR	324628	PrimaryExpression	"""%s"""		323377	0					
ANR	324629	Argument	name		323377	2					
ANR	324630	Identifier	name		323377	0					
ANR	324631	ElseStatement	else		323377	0					
ANR	324632	CompoundStatement		307:15:8664:8664	323377	0					
ANR	324633	ExpressionStatement	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"	5020:9:201010:201060	323377	0	True				
ANR	324634	CallExpression	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"		323377	0					
ANR	324635	Callee	func		323377	0					
ANR	324636	Identifier	func		323377	0					
ANR	324637	ArgumentList	stream		323377	1					
ANR	324638	Argument	stream		323377	0					
ANR	324639	Identifier	stream		323377	0					
ANR	324640	Argument	"""(UNDEF: %lu)"""		323377	1					
ANR	324641	PrimaryExpression	"""(UNDEF: %lu)"""		323377	0					
ANR	324642	Argument	( unsigned long ) sysm		323377	2					
ANR	324643	CastExpression	( unsigned long ) sysm		323377	0					
ANR	324644	CastTarget	unsigned long		323377	0					
ANR	324645	Identifier	sysm		323377	1					
ANR	324646	ElseStatement	else		323377	0					
ANR	324647	CompoundStatement		310:14:8751:8751	323377	0					
ANR	324648	ExpressionStatement	"func ( stream , ""%cPSR_"" , ( given & 0x00400000 ) ? 'S' : 'C' )"	5023:8:201096:201162	323377	0	True				
ANR	324649	CallExpression	"func ( stream , ""%cPSR_"" , ( given & 0x00400000 ) ? 'S' : 'C' )"		323377	0					
ANR	324650	Callee	func		323377	0					
ANR	324651	Identifier	func		323377	0					
ANR	324652	ArgumentList	stream		323377	1					
ANR	324653	Argument	stream		323377	0					
ANR	324654	Identifier	stream		323377	0					
ANR	324655	Argument	"""%cPSR_"""		323377	1					
ANR	324656	PrimaryExpression	"""%cPSR_"""		323377	0					
ANR	324657	Argument	( given & 0x00400000 ) ? 'S' : 'C'		323377	2					
ANR	324658	ConditionalExpression	( given & 0x00400000 ) ? 'S' : 'C'		323377	0					
ANR	324659	Condition	given & 0x00400000		323377	0					
ANR	324660	BitAndExpression	given & 0x00400000		323377	0		&			
ANR	324661	Identifier	given		323377	0					
ANR	324662	PrimaryExpression	0x00400000		323377	1					
ANR	324663	PrimaryExpression	'S'		323377	1					
ANR	324664	PrimaryExpression	'C'		323377	2					
ANR	324665	IfStatement	if ( given & 0x80000 )		323377	1					
ANR	324666	Condition	given & 0x80000	5025:12:201176:201190	323377	0	True				
ANR	324667	BitAndExpression	given & 0x80000		323377	0		&			
ANR	324668	Identifier	given		323377	0					
ANR	324669	PrimaryExpression	0x80000		323377	1					
ANR	324670	CompoundStatement		313:29:8858:8858	323377	1					
ANR	324671	ExpressionStatement	"func ( stream , ""f"" )"	5026:9:201204:201222	323377	0	True				
ANR	324672	CallExpression	"func ( stream , ""f"" )"		323377	0					
ANR	324673	Callee	func		323377	0					
ANR	324674	Identifier	func		323377	0					
ANR	324675	ArgumentList	stream		323377	1					
ANR	324676	Argument	stream		323377	0					
ANR	324677	Identifier	stream		323377	0					
ANR	324678	Argument	"""f"""		323377	1					
ANR	324679	PrimaryExpression	"""f"""		323377	0					
ANR	324680	IfStatement	if ( given & 0x40000 )		323377	2					
ANR	324681	Condition	given & 0x40000	5028:12:201246:201260	323377	0	True				
ANR	324682	BitAndExpression	given & 0x40000		323377	0		&			
ANR	324683	Identifier	given		323377	0					
ANR	324684	PrimaryExpression	0x40000		323377	1					
ANR	324685	CompoundStatement		316:29:8928:8928	323377	1					
ANR	324686	ExpressionStatement	"func ( stream , ""s"" )"	5029:9:201274:201292	323377	0	True				
ANR	324687	CallExpression	"func ( stream , ""s"" )"		323377	0					
ANR	324688	Callee	func		323377	0					
ANR	324689	Identifier	func		323377	0					
ANR	324690	ArgumentList	stream		323377	1					
ANR	324691	Argument	stream		323377	0					
ANR	324692	Identifier	stream		323377	0					
ANR	324693	Argument	"""s"""		323377	1					
ANR	324694	PrimaryExpression	"""s"""		323377	0					
ANR	324695	IfStatement	if ( given & 0x20000 )		323377	3					
ANR	324696	Condition	given & 0x20000	5031:12:201316:201330	323377	0	True				
ANR	324697	BitAndExpression	given & 0x20000		323377	0		&			
ANR	324698	Identifier	given		323377	0					
ANR	324699	PrimaryExpression	0x20000		323377	1					
ANR	324700	CompoundStatement		319:29:8998:8998	323377	1					
ANR	324701	ExpressionStatement	"func ( stream , ""x"" )"	5032:9:201344:201362	323377	0	True				
ANR	324702	CallExpression	"func ( stream , ""x"" )"		323377	0					
ANR	324703	Callee	func		323377	0					
ANR	324704	Identifier	func		323377	0					
ANR	324705	ArgumentList	stream		323377	1					
ANR	324706	Argument	stream		323377	0					
ANR	324707	Identifier	stream		323377	0					
ANR	324708	Argument	"""x"""		323377	1					
ANR	324709	PrimaryExpression	"""x"""		323377	0					
ANR	324710	IfStatement	if ( given & 0x10000 )		323377	4					
ANR	324711	Condition	given & 0x10000	5034:12:201386:201400	323377	0	True				
ANR	324712	BitAndExpression	given & 0x10000		323377	0		&			
ANR	324713	Identifier	given		323377	0					
ANR	324714	PrimaryExpression	0x10000		323377	1					
ANR	324715	CompoundStatement		322:29:9068:9068	323377	1					
ANR	324716	ExpressionStatement	"func ( stream , ""c"" )"	5035:9:201414:201432	323377	0	True				
ANR	324717	CallExpression	"func ( stream , ""c"" )"		323377	0					
ANR	324718	Callee	func		323377	0					
ANR	324719	Identifier	func		323377	0					
ANR	324720	ArgumentList	stream		323377	1					
ANR	324721	Argument	stream		323377	0					
ANR	324722	Identifier	stream		323377	0					
ANR	324723	Argument	"""c"""		323377	1					
ANR	324724	PrimaryExpression	"""c"""		323377	0					
ANR	324725	BreakStatement	break ;	5038:7:201460:201465	323377	43	True				
ANR	324726	Label	case 'U' :	5040:6:201474:201482	323377	44	True				
ANR	324727	IfStatement	if ( ( given & 0xf0 ) == 0x60 )		323377	45					
ANR	324728	Condition	( given & 0xf0 ) == 0x60	5041:11:201495:201516	323377	0	True				
ANR	324729	EqualityExpression	( given & 0xf0 ) == 0x60		323377	0		==			
ANR	324730	BitAndExpression	given & 0xf0		323377	0		&			
ANR	324731	Identifier	given		323377	0					
ANR	324732	PrimaryExpression	0xf0		323377	1					
ANR	324733	PrimaryExpression	0x60		323377	1					
ANR	324734	CompoundStatement		329:35:9184:9184	323377	1					
ANR	324735	SwitchStatement	switch ( given & 0xf )		323377	0					
ANR	324736	Condition	given & 0xf	5042:16:201537:201547	323377	0	True				
ANR	324737	BitAndExpression	given & 0xf		323377	0		&			
ANR	324738	Identifier	given		323377	0					
ANR	324739	PrimaryExpression	0xf		323377	1					
ANR	324740	CompoundStatement		330:29:9215:9215	323377	1					
ANR	324741	Label	case 0xf :	5043:8:201560:201568	323377	0	True				
ANR	324742	ExpressionStatement	"func ( stream , ""sy"" )"	5043:18:201570:201589	323377	1	True				
ANR	324743	CallExpression	"func ( stream , ""sy"" )"		323377	0					
ANR	324744	Callee	func		323377	0					
ANR	324745	Identifier	func		323377	0					
ANR	324746	ArgumentList	stream		323377	1					
ANR	324747	Argument	stream		323377	0					
ANR	324748	Identifier	stream		323377	0					
ANR	324749	Argument	"""sy"""		323377	1					
ANR	324750	PrimaryExpression	"""sy"""		323377	0					
ANR	324751	BreakStatement	break ;	5043:39:201591:201596	323377	2	True				
ANR	324752	Label	default :	5044:8:201606:201613	323377	3	True				
ANR	324753	Identifier	default		323377	0					
ANR	324754	ExpressionStatement	"func ( stream , ""%d"" , ( int ) given & 0xf )"	5045:9:201624:201661	323377	4	True				
ANR	324755	CallExpression	"func ( stream , ""%d"" , ( int ) given & 0xf )"		323377	0					
ANR	324756	Callee	func		323377	0					
ANR	324757	Identifier	func		323377	0					
ANR	324758	ArgumentList	stream		323377	1					
ANR	324759	Argument	stream		323377	0					
ANR	324760	Identifier	stream		323377	0					
ANR	324761	Argument	"""%d"""		323377	1					
ANR	324762	PrimaryExpression	"""%d"""		323377	0					
ANR	324763	Argument	( int ) given & 0xf		323377	2					
ANR	324764	BitAndExpression	( int ) given & 0xf		323377	0		&			
ANR	324765	CastExpression	( int ) given		323377	0					
ANR	324766	CastTarget	int		323377	0					
ANR	324767	Identifier	given		323377	1					
ANR	324768	PrimaryExpression	0xf		323377	1					
ANR	324769	BreakStatement	break ;	5046:9:201672:201677	323377	5	True				
ANR	324770	ElseStatement	else		323377	0					
ANR	324771	CompoundStatement		337:8:9378:9429	323377	0					
ANR	324772	IdentifierDeclStatement	const char * opt = data_barrier_option ( given & 0xf ) ;	5049:8:201713:201764	323377	0	True				
ANR	324773	IdentifierDecl	* opt = data_barrier_option ( given & 0xf )		323377	0					
ANR	324774	IdentifierDeclType	const char *		323377	0					
ANR	324775	Identifier	opt		323377	1					
ANR	324776	AssignmentExpression	* opt = data_barrier_option ( given & 0xf )		323377	2		=			
ANR	324777	Identifier	opt		323377	0					
ANR	324778	CallExpression	data_barrier_option ( given & 0xf )		323377	1					
ANR	324779	Callee	data_barrier_option		323377	0					
ANR	324780	Identifier	data_barrier_option		323377	0					
ANR	324781	ArgumentList	given & 0xf		323377	1					
ANR	324782	Argument	given & 0xf		323377	0					
ANR	324783	BitAndExpression	given & 0xf		323377	0		&			
ANR	324784	Identifier	given		323377	0					
ANR	324785	PrimaryExpression	0xf		323377	1					
ANR	324786	IfStatement	if ( opt != NULL )		323377	1					
ANR	324787	Condition	opt != NULL	5050:12:201778:201788	323377	0	True				
ANR	324788	EqualityExpression	opt != NULL		323377	0		!=			
ANR	324789	Identifier	opt		323377	0					
ANR	324790	Identifier	NULL		323377	1					
ANR	324791	CompoundStatement		338:25:9456:9456	323377	1					
ANR	324792	ExpressionStatement	"func ( stream , ""%s"" , opt )"	5051:9:201802:201826	323377	0	True				
ANR	324793	CallExpression	"func ( stream , ""%s"" , opt )"		323377	0					
ANR	324794	Callee	func		323377	0					
ANR	324795	Identifier	func		323377	0					
ANR	324796	ArgumentList	stream		323377	1					
ANR	324797	Argument	stream		323377	0					
ANR	324798	Identifier	stream		323377	0					
ANR	324799	Argument	"""%s"""		323377	1					
ANR	324800	PrimaryExpression	"""%s"""		323377	0					
ANR	324801	Argument	opt		323377	2					
ANR	324802	Identifier	opt		323377	0					
ANR	324803	ElseStatement	else		323377	0					
ANR	324804	CompoundStatement		340:15:9508:9508	323377	0					
ANR	324805	ExpressionStatement	"func ( stream , ""%d"" , ( int ) given & 0xf )"	5053:9:201854:201891	323377	0	True				
ANR	324806	CallExpression	"func ( stream , ""%d"" , ( int ) given & 0xf )"		323377	0					
ANR	324807	Callee	func		323377	0					
ANR	324808	Identifier	func		323377	0					
ANR	324809	ArgumentList	stream		323377	1					
ANR	324810	Argument	stream		323377	0					
ANR	324811	Identifier	stream		323377	0					
ANR	324812	Argument	"""%d"""		323377	1					
ANR	324813	PrimaryExpression	"""%d"""		323377	0					
ANR	324814	Argument	( int ) given & 0xf		323377	2					
ANR	324815	BitAndExpression	( int ) given & 0xf		323377	0		&			
ANR	324816	CastExpression	( int ) given		323377	0					
ANR	324817	CastTarget	int		323377	0					
ANR	324818	Identifier	given		323377	1					
ANR	324819	PrimaryExpression	0xf		323377	1					
ANR	324820	BreakStatement	break ;	5056:7:201919:201924	323377	46	True				
ANR	324821	Label	case '0' :	5058:6:201933:201941	323377	47	True				
ANR	324822	Label	case '1' :	5059:6:201949:201957	323377	48	True				
ANR	324823	Label	case '2' :	5060:6:201965:201973	323377	49	True				
ANR	324824	Label	case '3' :	5061:6:201981:201989	323377	50	True				
ANR	324825	Label	case '4' :	5062:6:201997:202005	323377	51	True				
ANR	324826	Label	case '5' :	5063:6:202013:202021	323377	52	True				
ANR	324827	Label	case '6' :	5064:6:202029:202037	323377	53	True				
ANR	324828	Label	case '7' :	5065:6:202045:202053	323377	54	True				
ANR	324829	Label	case '8' :	5066:6:202061:202069	323377	55	True				
ANR	324830	Label	case '9' :	5067:6:202077:202085	323377	56	True				
ANR	324831	CompoundStatement		357:7:9779:9798	323377	57					
ANR	324832	IdentifierDeclStatement	int width ;	5068:7:202096:202105	323377	0	True				
ANR	324833	IdentifierDecl	width		323377	0					
ANR	324834	IdentifierDeclType	int		323377	0					
ANR	324835	Identifier	width		323377	1					
ANR	324836	IdentifierDeclStatement	unsigned long value ;	5069:7:202114:202133	323377	1	True				
ANR	324837	IdentifierDecl	value		323377	0					
ANR	324838	IdentifierDeclType	unsigned long		323377	0					
ANR	324839	Identifier	value		323377	1					
ANR	324840	ExpressionStatement	"c = arm_decode_bitfield ( c , given , & value , & width )"	5071:7:202143:202193	323377	2	True				
ANR	324841	AssignmentExpression	"c = arm_decode_bitfield ( c , given , & value , & width )"		323377	0		=			
ANR	324842	Identifier	c		323377	0					
ANR	324843	CallExpression	"arm_decode_bitfield ( c , given , & value , & width )"		323377	1					
ANR	324844	Callee	arm_decode_bitfield		323377	0					
ANR	324845	Identifier	arm_decode_bitfield		323377	0					
ANR	324846	ArgumentList	c		323377	1					
ANR	324847	Argument	c		323377	0					
ANR	324848	Identifier	c		323377	0					
ANR	324849	Argument	given		323377	1					
ANR	324850	Identifier	given		323377	0					
ANR	324851	Argument	& value		323377	2					
ANR	324852	UnaryOperationExpression	& value		323377	0					
ANR	324853	UnaryOperator	&		323377	0					
ANR	324854	Identifier	value		323377	1					
ANR	324855	Argument	& width		323377	3					
ANR	324856	UnaryOperationExpression	& width		323377	0					
ANR	324857	UnaryOperator	&		323377	0					
ANR	324858	Identifier	width		323377	1					
ANR	324859	SwitchStatement	switch ( * c )		323377	3					
ANR	324860	Condition	* c	5073:15:202211:202212	323377	0	True				
ANR	324861	UnaryOperationExpression	* c		323377	0					
ANR	324862	UnaryOperator	*		323377	0					
ANR	324863	Identifier	c		323377	1					
ANR	324864	CompoundStatement		361:19:9880:9880	323377	1					
ANR	324865	Label	case 'R' :	5074:7:202224:202232	323377	0	True				
ANR	324866	IfStatement	if ( value == 15 )		323377	1					
ANR	324867	Condition	value == 15	5075:12:202246:202256	323377	0	True				
ANR	324868	EqualityExpression	value == 15		323377	0		==			
ANR	324869	Identifier	value		323377	0					
ANR	324870	PrimaryExpression	15		323377	1					
ANR	324871	CompoundStatement		363:25:9924:9924	323377	1					
ANR	324872	ExpressionStatement	is_unpredictable = TRUE	5076:9:202270:202293	323377	0	True				
ANR	324873	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	324874	Identifier	is_unpredictable		323377	0					
ANR	324875	Identifier	TRUE		323377	1					
ANR	324876	Label	case 'r' :	5079:7:202341:202349	323377	2	True				
ANR	324877	Label	case 'T' :	5080:7:202358:202366	323377	3	True				
ANR	324878	IfStatement	if ( * c == 'T' )		323377	4					
ANR	324879	Condition	* c == 'T'	5082:12:202433:202441	323377	0	True				
ANR	324880	EqualityExpression	* c == 'T'		323377	0		==			
ANR	324881	UnaryOperationExpression	* c		323377	0					
ANR	324882	UnaryOperator	*		323377	0					
ANR	324883	Identifier	c		323377	1					
ANR	324884	PrimaryExpression	'T'		323377	1					
ANR	324885	CompoundStatement		370:23:10109:10109	323377	1					
ANR	324886	ExpressionStatement	++ value	5083:9:202455:202462	323377	0	True				
ANR	324887	UnaryExpression	++ value		323377	0					
ANR	324888	IncDec	++		323377	0					
ANR	324889	Identifier	value		323377	1					
ANR	324890	IfStatement	if ( c [ 1 ] == 'u' )		323377	5					
ANR	324891	Condition	c [ 1 ] == 'u'	5086:12:202487:202497	323377	0	True				
ANR	324892	EqualityExpression	c [ 1 ] == 'u'		323377	0		==			
ANR	324893	ArrayIndexing	c [ 1 ]		323377	0					
ANR	324894	Identifier	c		323377	0					
ANR	324895	PrimaryExpression	1		323377	1					
ANR	324896	PrimaryExpression	'u'		323377	1					
ANR	324897	CompoundStatement		374:25:10165:10165	323377	1					
ANR	324898	ExpressionStatement	++ c	5088:9:202550:202553	323377	0	True				
ANR	324899	UnaryExpression	++ c		323377	0					
ANR	324900	IncDec	++		323377	0					
ANR	324901	Identifier	c		323377	1					
ANR	324902	IfStatement	if ( u_reg == value )		323377	1					
ANR	324903	Condition	u_reg == value	5090:13:202569:202582	323377	0	True				
ANR	324904	EqualityExpression	u_reg == value		323377	0		==			
ANR	324905	Identifier	u_reg		323377	0					
ANR	324906	Identifier	value		323377	1					
ANR	324907	CompoundStatement		378:29:10250:10250	323377	1					
ANR	324908	ExpressionStatement	is_unpredictable = TRUE	5091:10:202597:202620	323377	0	True				
ANR	324909	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	324910	Identifier	is_unpredictable		323377	0					
ANR	324911	Identifier	TRUE		323377	1					
ANR	324912	ExpressionStatement	u_reg = value	5093:9:202642:202655	323377	2	True				
ANR	324913	AssignmentExpression	u_reg = value		323377	0		=			
ANR	324914	Identifier	u_reg		323377	0					
ANR	324915	Identifier	value		323377	1					
ANR	324916	IfStatement	if ( c [ 1 ] == 'U' )		323377	6					
ANR	324917	Condition	c [ 1 ] == 'U'	5095:12:202679:202689	323377	0	True				
ANR	324918	EqualityExpression	c [ 1 ] == 'U'		323377	0		==			
ANR	324919	ArrayIndexing	c [ 1 ]		323377	0					
ANR	324920	Identifier	c		323377	0					
ANR	324921	PrimaryExpression	1		323377	1					
ANR	324922	PrimaryExpression	'U'		323377	1					
ANR	324923	CompoundStatement		383:25:10357:10357	323377	1					
ANR	324924	ExpressionStatement	++ c	5097:9:202742:202745	323377	0	True				
ANR	324925	UnaryExpression	++ c		323377	0					
ANR	324926	IncDec	++		323377	0					
ANR	324927	Identifier	c		323377	1					
ANR	324928	IfStatement	if ( U_reg == value )		323377	1					
ANR	324929	Condition	U_reg == value	5099:13:202761:202774	323377	0	True				
ANR	324930	EqualityExpression	U_reg == value		323377	0		==			
ANR	324931	Identifier	U_reg		323377	0					
ANR	324932	Identifier	value		323377	1					
ANR	324933	CompoundStatement		387:29:10442:10442	323377	1					
ANR	324934	ExpressionStatement	is_unpredictable = TRUE	5100:10:202789:202812	323377	0	True				
ANR	324935	AssignmentExpression	is_unpredictable = TRUE		323377	0		=			
ANR	324936	Identifier	is_unpredictable		323377	0					
ANR	324937	Identifier	TRUE		323377	1					
ANR	324938	ExpressionStatement	U_reg = value	5102:9:202834:202847	323377	2	True				
ANR	324939	AssignmentExpression	U_reg = value		323377	0		=			
ANR	324940	Identifier	U_reg		323377	0					
ANR	324941	Identifier	value		323377	1					
ANR	324942	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ value ] )"	5104:8:202867:202907	323377	7	True				
ANR	324943	CallExpression	"func ( stream , ""%s"" , arm_regnames [ value ] )"		323377	0					
ANR	324944	Callee	func		323377	0					
ANR	324945	Identifier	func		323377	0					
ANR	324946	ArgumentList	stream		323377	1					
ANR	324947	Argument	stream		323377	0					
ANR	324948	Identifier	stream		323377	0					
ANR	324949	Argument	"""%s"""		323377	1					
ANR	324950	PrimaryExpression	"""%s"""		323377	0					
ANR	324951	Argument	arm_regnames [ value ]		323377	2					
ANR	324952	ArrayIndexing	arm_regnames [ value ]		323377	0					
ANR	324953	Identifier	arm_regnames		323377	0					
ANR	324954	Identifier	value		323377	1					
ANR	324955	BreakStatement	break ;	5105:8:202917:202922	323377	8	True				
ANR	324956	Label	case 'd' :	5106:7:202931:202939	323377	9	True				
ANR	324957	ExpressionStatement	"func ( stream , ""%ld"" , value )"	5107:8:202949:202976	323377	10	True				
ANR	324958	CallExpression	"func ( stream , ""%ld"" , value )"		323377	0					
ANR	324959	Callee	func		323377	0					
ANR	324960	Identifier	func		323377	0					
ANR	324961	ArgumentList	stream		323377	1					
ANR	324962	Argument	stream		323377	0					
ANR	324963	Identifier	stream		323377	0					
ANR	324964	Argument	"""%ld"""		323377	1					
ANR	324965	PrimaryExpression	"""%ld"""		323377	0					
ANR	324966	Argument	value		323377	2					
ANR	324967	Identifier	value		323377	0					
ANR	324968	ExpressionStatement	value_in_comment = value	5108:8:202986:203010	323377	11	True				
ANR	324969	AssignmentExpression	value_in_comment = value		323377	0		=			
ANR	324970	Identifier	value_in_comment		323377	0					
ANR	324971	Identifier	value		323377	1					
ANR	324972	BreakStatement	break ;	5109:8:203020:203025	323377	12	True				
ANR	324973	Label	case 'b' :	5110:7:203034:203042	323377	13	True				
ANR	324974	ExpressionStatement	"func ( stream , ""%ld"" , value * 8 )"	5111:8:203052:203083	323377	14	True				
ANR	324975	CallExpression	"func ( stream , ""%ld"" , value * 8 )"		323377	0					
ANR	324976	Callee	func		323377	0					
ANR	324977	Identifier	func		323377	0					
ANR	324978	ArgumentList	stream		323377	1					
ANR	324979	Argument	stream		323377	0					
ANR	324980	Identifier	stream		323377	0					
ANR	324981	Argument	"""%ld"""		323377	1					
ANR	324982	PrimaryExpression	"""%ld"""		323377	0					
ANR	324983	Argument	value * 8		323377	2					
ANR	324984	MultiplicativeExpression	value * 8		323377	0		*			
ANR	324985	Identifier	value		323377	0					
ANR	324986	PrimaryExpression	8		323377	1					
ANR	324987	ExpressionStatement	value_in_comment = value * 8	5112:8:203093:203121	323377	15	True				
ANR	324988	AssignmentExpression	value_in_comment = value * 8		323377	0		=			
ANR	324989	Identifier	value_in_comment		323377	0					
ANR	324990	MultiplicativeExpression	value * 8		323377	1		*			
ANR	324991	Identifier	value		323377	0					
ANR	324992	PrimaryExpression	8		323377	1					
ANR	324993	BreakStatement	break ;	5113:8:203131:203136	323377	16	True				
ANR	324994	Label	case 'W' :	5114:7:203145:203153	323377	17	True				
ANR	324995	ExpressionStatement	"func ( stream , ""%ld"" , value + 1 )"	5115:8:203163:203194	323377	18	True				
ANR	324996	CallExpression	"func ( stream , ""%ld"" , value + 1 )"		323377	0					
ANR	324997	Callee	func		323377	0					
ANR	324998	Identifier	func		323377	0					
ANR	324999	ArgumentList	stream		323377	1					
ANR	325000	Argument	stream		323377	0					
ANR	325001	Identifier	stream		323377	0					
ANR	325002	Argument	"""%ld"""		323377	1					
ANR	325003	PrimaryExpression	"""%ld"""		323377	0					
ANR	325004	Argument	value + 1		323377	2					
ANR	325005	AdditiveExpression	value + 1		323377	0		+			
ANR	325006	Identifier	value		323377	0					
ANR	325007	PrimaryExpression	1		323377	1					
ANR	325008	ExpressionStatement	value_in_comment = value + 1	5116:8:203204:203232	323377	19	True				
ANR	325009	AssignmentExpression	value_in_comment = value + 1		323377	0		=			
ANR	325010	Identifier	value_in_comment		323377	0					
ANR	325011	AdditiveExpression	value + 1		323377	1		+			
ANR	325012	Identifier	value		323377	0					
ANR	325013	PrimaryExpression	1		323377	1					
ANR	325014	BreakStatement	break ;	5117:8:203242:203247	323377	20	True				
ANR	325015	Label	case 'x' :	5118:7:203256:203264	323377	21	True				
ANR	325016	ExpressionStatement	"func ( stream , ""0x%08lx"" , value )"	5119:8:203274:203305	323377	22	True				
ANR	325017	CallExpression	"func ( stream , ""0x%08lx"" , value )"		323377	0					
ANR	325018	Callee	func		323377	0					
ANR	325019	Identifier	func		323377	0					
ANR	325020	ArgumentList	stream		323377	1					
ANR	325021	Argument	stream		323377	0					
ANR	325022	Identifier	stream		323377	0					
ANR	325023	Argument	"""0x%08lx"""		323377	1					
ANR	325024	PrimaryExpression	"""0x%08lx"""		323377	0					
ANR	325025	Argument	value		323377	2					
ANR	325026	Identifier	value		323377	0					
ANR	325027	IfStatement	if ( ( given & 0x0fffffff ) == 0x0FF00000 )		323377	23					
ANR	325028	Condition	( given & 0x0fffffff ) == 0x0FF00000	5123:12:203390:203423	323377	0	True				
ANR	325029	EqualityExpression	( given & 0x0fffffff ) == 0x0FF00000		323377	0		==			
ANR	325030	BitAndExpression	given & 0x0fffffff		323377	0		&			
ANR	325031	Identifier	given		323377	0					
ANR	325032	PrimaryExpression	0x0fffffff		323377	1					
ANR	325033	PrimaryExpression	0x0FF00000		323377	1					
ANR	325034	CompoundStatement		411:48:11091:11091	323377	1					
ANR	325035	ExpressionStatement	"func ( stream , "" ; IMB"" )"	5124:9:203437:203460	323377	0	True				
ANR	325036	CallExpression	"func ( stream , "" ; IMB"" )"		323377	0					
ANR	325037	Callee	func		323377	0					
ANR	325038	Identifier	func		323377	0					
ANR	325039	ArgumentList	stream		323377	1					
ANR	325040	Argument	stream		323377	0					
ANR	325041	Identifier	stream		323377	0					
ANR	325042	Argument	""" ; IMB"""		323377	1					
ANR	325043	PrimaryExpression	""" ; IMB"""		323377	0					
ANR	325044	ElseStatement	else		323377	0					
ANR	325045	IfStatement	if ( ( given & 0x0fffffff ) == 0x0FF00001 )		323377	0					
ANR	325046	Condition	( given & 0x0fffffff ) == 0x0FF00001	5125:19:203481:203514	323377	0	True				
ANR	325047	EqualityExpression	( given & 0x0fffffff ) == 0x0FF00001		323377	0		==			
ANR	325048	BitAndExpression	given & 0x0fffffff		323377	0		&			
ANR	325049	Identifier	given		323377	0					
ANR	325050	PrimaryExpression	0x0fffffff		323377	1					
ANR	325051	PrimaryExpression	0x0FF00001		323377	1					
ANR	325052	CompoundStatement		413:55:11182:11182	323377	1					
ANR	325053	ExpressionStatement	"func ( stream , "" ; IMBRange"" )"	5126:9:203528:203556	323377	0	True				
ANR	325054	CallExpression	"func ( stream , "" ; IMBRange"" )"		323377	0					
ANR	325055	Callee	func		323377	0					
ANR	325056	Identifier	func		323377	0					
ANR	325057	ArgumentList	stream		323377	1					
ANR	325058	Argument	stream		323377	0					
ANR	325059	Identifier	stream		323377	0					
ANR	325060	Argument	""" ; IMBRange"""		323377	1					
ANR	325061	PrimaryExpression	""" ; IMBRange"""		323377	0					
ANR	325062	BreakStatement	break ;	5128:8:203576:203581	323377	24	True				
ANR	325063	Label	case 'X' :	5129:7:203590:203598	323377	25	True				
ANR	325064	ExpressionStatement	"func ( stream , ""%01lx"" , value & 0xf )"	5130:8:203608:203643	323377	26	True				
ANR	325065	CallExpression	"func ( stream , ""%01lx"" , value & 0xf )"		323377	0					
ANR	325066	Callee	func		323377	0					
ANR	325067	Identifier	func		323377	0					
ANR	325068	ArgumentList	stream		323377	1					
ANR	325069	Argument	stream		323377	0					
ANR	325070	Identifier	stream		323377	0					
ANR	325071	Argument	"""%01lx"""		323377	1					
ANR	325072	PrimaryExpression	"""%01lx"""		323377	0					
ANR	325073	Argument	value & 0xf		323377	2					
ANR	325074	BitAndExpression	value & 0xf		323377	0		&			
ANR	325075	Identifier	value		323377	0					
ANR	325076	PrimaryExpression	0xf		323377	1					
ANR	325077	ExpressionStatement	value_in_comment = value	5131:8:203653:203677	323377	27	True				
ANR	325078	AssignmentExpression	value_in_comment = value		323377	0		=			
ANR	325079	Identifier	value_in_comment		323377	0					
ANR	325080	Identifier	value		323377	1					
ANR	325081	BreakStatement	break ;	5132:8:203687:203692	323377	28	True				
ANR	325082	Label	case '`' :	5133:7:203701:203709	323377	29	True				
ANR	325083	ExpressionStatement	c ++	5134:8:203719:203722	323377	30	True				
ANR	325084	PostIncDecOperationExpression	c ++		323377	0					
ANR	325085	Identifier	c		323377	0					
ANR	325086	IncDec	++		323377	1					
ANR	325087	IfStatement	if ( value == 0 )		323377	31					
ANR	325088	Condition	value == 0	5135:12:203736:203745	323377	0	True				
ANR	325089	EqualityExpression	value == 0		323377	0		==			
ANR	325090	Identifier	value		323377	0					
ANR	325091	PrimaryExpression	0		323377	1					
ANR	325092	CompoundStatement		423:24:11413:11413	323377	1					
ANR	325093	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5136:9:203759:203782	323377	0	True				
ANR	325094	CallExpression	"func ( stream , ""%c"" , * c )"		323377	0					
ANR	325095	Callee	func		323377	0					
ANR	325096	Identifier	func		323377	0					
ANR	325097	ArgumentList	stream		323377	1					
ANR	325098	Argument	stream		323377	0					
ANR	325099	Identifier	stream		323377	0					
ANR	325100	Argument	"""%c"""		323377	1					
ANR	325101	PrimaryExpression	"""%c"""		323377	0					
ANR	325102	Argument	* c		323377	2					
ANR	325103	UnaryOperationExpression	* c		323377	0					
ANR	325104	UnaryOperator	*		323377	0					
ANR	325105	Identifier	c		323377	1					
ANR	325106	BreakStatement	break ;	5138:8:203802:203807	323377	32	True				
ANR	325107	Label	case '\\'' :	5139:7:203816:203825	323377	33	True				
ANR	325108	ExpressionStatement	c ++	5140:8:203835:203838	323377	34	True				
ANR	325109	PostIncDecOperationExpression	c ++		323377	0					
ANR	325110	Identifier	c		323377	0					
ANR	325111	IncDec	++		323377	1					
ANR	325112	IfStatement	if ( value == ( ( 1ul << width ) - 1 ) )		323377	35					
ANR	325113	Condition	value == ( ( 1ul << width ) - 1 )	5141:12:203852:203880	323377	0	True				
ANR	325114	EqualityExpression	value == ( ( 1ul << width ) - 1 )		323377	0		==			
ANR	325115	Identifier	value		323377	0					
ANR	325116	AdditiveExpression	( 1ul << width ) - 1		323377	1		-			
ANR	325117	ShiftExpression	1ul << width		323377	0		<<			
ANR	325118	PrimaryExpression	1ul		323377	0					
ANR	325119	Identifier	width		323377	1					
ANR	325120	PrimaryExpression	1		323377	1					
ANR	325121	CompoundStatement		429:43:11548:11548	323377	1					
ANR	325122	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5142:9:203894:203917	323377	0	True				
ANR	325123	CallExpression	"func ( stream , ""%c"" , * c )"		323377	0					
ANR	325124	Callee	func		323377	0					
ANR	325125	Identifier	func		323377	0					
ANR	325126	ArgumentList	stream		323377	1					
ANR	325127	Argument	stream		323377	0					
ANR	325128	Identifier	stream		323377	0					
ANR	325129	Argument	"""%c"""		323377	1					
ANR	325130	PrimaryExpression	"""%c"""		323377	0					
ANR	325131	Argument	* c		323377	2					
ANR	325132	UnaryOperationExpression	* c		323377	0					
ANR	325133	UnaryOperator	*		323377	0					
ANR	325134	Identifier	c		323377	1					
ANR	325135	BreakStatement	break ;	5144:8:203937:203942	323377	36	True				
ANR	325136	Label	case '?' :	5145:7:203951:203959	323377	37	True				
ANR	325137	ExpressionStatement	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"	5146:8:203969:204018	323377	38	True				
ANR	325138	CallExpression	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) value ] )"		323377	0					
ANR	325139	Callee	func		323377	0					
ANR	325140	Identifier	func		323377	0					
ANR	325141	ArgumentList	stream		323377	1					
ANR	325142	Argument	stream		323377	0					
ANR	325143	Identifier	stream		323377	0					
ANR	325144	Argument	"""%c"""		323377	1					
ANR	325145	PrimaryExpression	"""%c"""		323377	0					
ANR	325146	Argument	c [ ( 1 << width ) - ( int ) value ]		323377	2					
ANR	325147	ArrayIndexing	c [ ( 1 << width ) - ( int ) value ]		323377	0					
ANR	325148	Identifier	c		323377	0					
ANR	325149	AdditiveExpression	( 1 << width ) - ( int ) value		323377	1		-			
ANR	325150	ShiftExpression	1 << width		323377	0		<<			
ANR	325151	PrimaryExpression	1		323377	0					
ANR	325152	Identifier	width		323377	1					
ANR	325153	CastExpression	( int ) value		323377	1					
ANR	325154	CastTarget	int		323377	0					
ANR	325155	Identifier	value		323377	1					
ANR	325156	ExpressionStatement	c += 1 << width	5147:8:204028:204043	323377	39	True				
ANR	325157	AssignmentExpression	c += 1 << width		323377	0		+=			
ANR	325158	Identifier	c		323377	0					
ANR	325159	ShiftExpression	1 << width		323377	1		<<			
ANR	325160	PrimaryExpression	1		323377	0					
ANR	325161	Identifier	width		323377	1					
ANR	325162	BreakStatement	break ;	5148:8:204053:204058	323377	40	True				
ANR	325163	Label	default :	5149:7:204067:204074	323377	41	True				
ANR	325164	Identifier	default		323377	0					
ANR	325165	ReturnStatement	return ;	5150:8:204084:204090	323377	42	True				
ANR	325166	BreakStatement	break ;	5152:7:204108:204113	323377	4	True				
ANR	325167	Label	case 'e' :	5154:6:204122:204130	323377	5	True				
ANR	325168	CompoundStatement		443:7:11806:11813	323377	6					
ANR	325169	IdentifierDeclStatement	int imm ;	5155:7:204141:204148	323377	0	True				
ANR	325170	IdentifierDecl	imm		323377	0					
ANR	325171	IdentifierDeclType	int		323377	0					
ANR	325172	Identifier	imm		323377	1					
ANR	325173	ExpressionStatement	imm = ( given & 0xf ) | ( ( given & 0xfff00 ) >> 4 )	5157:7:204158:204204	323377	1	True				
ANR	325174	AssignmentExpression	imm = ( given & 0xf ) | ( ( given & 0xfff00 ) >> 4 )		323377	0		=			
ANR	325175	Identifier	imm		323377	0					
ANR	325176	InclusiveOrExpression	( given & 0xf ) | ( ( given & 0xfff00 ) >> 4 )		323377	1		|			
ANR	325177	BitAndExpression	given & 0xf		323377	0		&			
ANR	325178	Identifier	given		323377	0					
ANR	325179	PrimaryExpression	0xf		323377	1					
ANR	325180	ShiftExpression	( given & 0xfff00 ) >> 4		323377	1		>>			
ANR	325181	BitAndExpression	given & 0xfff00		323377	0		&			
ANR	325182	Identifier	given		323377	0					
ANR	325183	PrimaryExpression	0xfff00		323377	1					
ANR	325184	PrimaryExpression	4		323377	1					
ANR	325185	ExpressionStatement	"func ( stream , ""%d"" , imm )"	5158:7:204213:204237	323377	2	True				
ANR	325186	CallExpression	"func ( stream , ""%d"" , imm )"		323377	0					
ANR	325187	Callee	func		323377	0					
ANR	325188	Identifier	func		323377	0					
ANR	325189	ArgumentList	stream		323377	1					
ANR	325190	Argument	stream		323377	0					
ANR	325191	Identifier	stream		323377	0					
ANR	325192	Argument	"""%d"""		323377	1					
ANR	325193	PrimaryExpression	"""%d"""		323377	0					
ANR	325194	Argument	imm		323377	2					
ANR	325195	Identifier	imm		323377	0					
ANR	325196	ExpressionStatement	value_in_comment = imm	5159:7:204246:204268	323377	3	True				
ANR	325197	AssignmentExpression	value_in_comment = imm		323377	0		=			
ANR	325198	Identifier	value_in_comment		323377	0					
ANR	325199	Identifier	imm		323377	1					
ANR	325200	BreakStatement	break ;	5160:8:204278:204283	323377	7	True				
ANR	325201	Label	case 'E' :	5162:6:204292:204300	323377	8	True				
ANR	325202	CompoundStatement		456:8:12189:12211	323377	9					
ANR	325203	IdentifierDeclStatement	long msb = ( given & 0x001f0000 ) >> 16 ;	5166:8:204431:204468	323377	0	True				
ANR	325204	IdentifierDecl	msb = ( given & 0x001f0000 ) >> 16		323377	0					
ANR	325205	IdentifierDeclType	long		323377	0					
ANR	325206	Identifier	msb		323377	1					
ANR	325207	AssignmentExpression	msb = ( given & 0x001f0000 ) >> 16		323377	2		=			
ANR	325208	Identifier	msb		323377	0					
ANR	325209	ShiftExpression	( given & 0x001f0000 ) >> 16		323377	1		>>			
ANR	325210	BitAndExpression	given & 0x001f0000		323377	0		&			
ANR	325211	Identifier	given		323377	0					
ANR	325212	PrimaryExpression	0x001f0000		323377	1					
ANR	325213	PrimaryExpression	16		323377	1					
ANR	325214	IdentifierDeclStatement	long lsb = ( given & 0x00000f80 ) >> 7 ;	5167:8:204478:204514	323377	1	True				
ANR	325215	IdentifierDecl	lsb = ( given & 0x00000f80 ) >> 7		323377	0					
ANR	325216	IdentifierDeclType	long		323377	0					
ANR	325217	Identifier	lsb		323377	1					
ANR	325218	AssignmentExpression	lsb = ( given & 0x00000f80 ) >> 7		323377	2		=			
ANR	325219	Identifier	lsb		323377	0					
ANR	325220	ShiftExpression	( given & 0x00000f80 ) >> 7		323377	1		>>			
ANR	325221	BitAndExpression	given & 0x00000f80		323377	0		&			
ANR	325222	Identifier	given		323377	0					
ANR	325223	PrimaryExpression	0x00000f80		323377	1					
ANR	325224	PrimaryExpression	7		323377	1					
ANR	325225	IdentifierDeclStatement	long w = msb - lsb + 1 ;	5168:8:204524:204546	323377	2	True				
ANR	325226	IdentifierDecl	w = msb - lsb + 1		323377	0					
ANR	325227	IdentifierDeclType	long		323377	0					
ANR	325228	Identifier	w		323377	1					
ANR	325229	AssignmentExpression	w = msb - lsb + 1		323377	2		=			
ANR	325230	Identifier	w		323377	0					
ANR	325231	AdditiveExpression	msb - lsb + 1		323377	1		-			
ANR	325232	Identifier	msb		323377	0					
ANR	325233	AdditiveExpression	lsb + 1		323377	1		+			
ANR	325234	Identifier	lsb		323377	0					
ANR	325235	PrimaryExpression	1		323377	1					
ANR	325236	IfStatement	if ( w > 0 )		323377	3					
ANR	325237	Condition	w > 0	5170:12:204561:204565	323377	0	True				
ANR	325238	RelationalExpression	w > 0		323377	0		>			
ANR	325239	Identifier	w		323377	0					
ANR	325240	PrimaryExpression	0		323377	1					
ANR	325241	CompoundStatement		458:19:12233:12233	323377	1					
ANR	325242	ExpressionStatement	"func ( stream , ""%lu, %lu"" , lsb , w )"	5171:9:204579:204612	323377	0	True				
ANR	325243	CallExpression	"func ( stream , ""%lu, %lu"" , lsb , w )"		323377	0					
ANR	325244	Callee	func		323377	0					
ANR	325245	Identifier	func		323377	0					
ANR	325246	ArgumentList	stream		323377	1					
ANR	325247	Argument	stream		323377	0					
ANR	325248	Identifier	stream		323377	0					
ANR	325249	Argument	"""%lu, %lu"""		323377	1					
ANR	325250	PrimaryExpression	"""%lu, %lu"""		323377	0					
ANR	325251	Argument	lsb		323377	2					
ANR	325252	Identifier	lsb		323377	0					
ANR	325253	Argument	w		323377	3					
ANR	325254	Identifier	w		323377	0					
ANR	325255	ElseStatement	else		323377	0					
ANR	325256	CompoundStatement		460:15:12294:12294	323377	0					
ANR	325257	ExpressionStatement	"func ( stream , ""(invalid: %lu:%lu)"" , lsb , msb )"	5173:9:204640:204685	323377	0	True				
ANR	325258	CallExpression	"func ( stream , ""(invalid: %lu:%lu)"" , lsb , msb )"		323377	0					
ANR	325259	Callee	func		323377	0					
ANR	325260	Identifier	func		323377	0					
ANR	325261	ArgumentList	stream		323377	1					
ANR	325262	Argument	stream		323377	0					
ANR	325263	Identifier	stream		323377	0					
ANR	325264	Argument	"""(invalid: %lu:%lu)"""		323377	1					
ANR	325265	PrimaryExpression	"""(invalid: %lu:%lu)"""		323377	0					
ANR	325266	Argument	lsb		323377	2					
ANR	325267	Identifier	lsb		323377	0					
ANR	325268	Argument	msb		323377	3					
ANR	325269	Identifier	msb		323377	0					
ANR	325270	BreakStatement	break ;	5176:7:204713:204718	323377	10	True				
ANR	325271	Label	case 'R' :	5178:6:204727:204735	323377	11	True				
ANR	325272	CompoundStatement		470:8:12493:12535	323377	12					
ANR	325273	IdentifierDeclStatement	const char * name ;	5181:8:204802:204818	323377	0	True				
ANR	325274	IdentifierDecl	* name		323377	0					
ANR	325275	IdentifierDeclType	const char *		323377	0					
ANR	325276	Identifier	name		323377	1					
ANR	325277	IdentifierDeclStatement	unsigned sysm = ( given & 0x004f0000 ) >> 16 ;	5182:8:204828:204870	323377	1	True				
ANR	325278	IdentifierDecl	sysm = ( given & 0x004f0000 ) >> 16		323377	0					
ANR	325279	IdentifierDeclType	unsigned		323377	0					
ANR	325280	Identifier	sysm		323377	1					
ANR	325281	AssignmentExpression	sysm = ( given & 0x004f0000 ) >> 16		323377	2		=			
ANR	325282	Identifier	sysm		323377	0					
ANR	325283	ShiftExpression	( given & 0x004f0000 ) >> 16		323377	1		>>			
ANR	325284	BitAndExpression	given & 0x004f0000		323377	0		&			
ANR	325285	Identifier	given		323377	0					
ANR	325286	PrimaryExpression	0x004f0000		323377	1					
ANR	325287	PrimaryExpression	16		323377	1					
ANR	325288	ExpressionStatement	sysm |= ( given & 0x300 ) >> 4	5184:8:204881:204909	323377	2	True				
ANR	325289	AssignmentExpression	sysm |= ( given & 0x300 ) >> 4		323377	0		|=			
ANR	325290	Identifier	sysm		323377	0					
ANR	325291	ShiftExpression	( given & 0x300 ) >> 4		323377	1		>>			
ANR	325292	BitAndExpression	given & 0x300		323377	0		&			
ANR	325293	Identifier	given		323377	0					
ANR	325294	PrimaryExpression	0x300		323377	1					
ANR	325295	PrimaryExpression	4		323377	1					
ANR	325296	ExpressionStatement	name = banked_regname ( sysm )	5185:8:204919:204947	323377	3	True				
ANR	325297	AssignmentExpression	name = banked_regname ( sysm )		323377	0		=			
ANR	325298	Identifier	name		323377	0					
ANR	325299	CallExpression	banked_regname ( sysm )		323377	1					
ANR	325300	Callee	banked_regname		323377	0					
ANR	325301	Identifier	banked_regname		323377	0					
ANR	325302	ArgumentList	sysm		323377	1					
ANR	325303	Argument	sysm		323377	0					
ANR	325304	Identifier	sysm		323377	0					
ANR	325305	IfStatement	if ( name != NULL )		323377	4					
ANR	325306	Condition	name != NULL	5187:12:204962:204973	323377	0	True				
ANR	325307	EqualityExpression	name != NULL		323377	0		!=			
ANR	325308	Identifier	name		323377	0					
ANR	325309	Identifier	NULL		323377	1					
ANR	325310	CompoundStatement		475:26:12641:12641	323377	1					
ANR	325311	ExpressionStatement	"func ( stream , ""%s"" , name )"	5188:9:204987:205012	323377	0	True				
ANR	325312	CallExpression	"func ( stream , ""%s"" , name )"		323377	0					
ANR	325313	Callee	func		323377	0					
ANR	325314	Identifier	func		323377	0					
ANR	325315	ArgumentList	stream		323377	1					
ANR	325316	Argument	stream		323377	0					
ANR	325317	Identifier	stream		323377	0					
ANR	325318	Argument	"""%s"""		323377	1					
ANR	325319	PrimaryExpression	"""%s"""		323377	0					
ANR	325320	Argument	name		323377	2					
ANR	325321	Identifier	name		323377	0					
ANR	325322	ElseStatement	else		323377	0					
ANR	325323	CompoundStatement		477:15:12694:12694	323377	0					
ANR	325324	ExpressionStatement	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"	5190:9:205040:205090	323377	0	True				
ANR	325325	CallExpression	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"		323377	0					
ANR	325326	Callee	func		323377	0					
ANR	325327	Identifier	func		323377	0					
ANR	325328	ArgumentList	stream		323377	1					
ANR	325329	Argument	stream		323377	0					
ANR	325330	Identifier	stream		323377	0					
ANR	325331	Argument	"""(UNDEF: %lu)"""		323377	1					
ANR	325332	PrimaryExpression	"""(UNDEF: %lu)"""		323377	0					
ANR	325333	Argument	( unsigned long ) sysm		323377	2					
ANR	325334	CastExpression	( unsigned long ) sysm		323377	0					
ANR	325335	CastTarget	unsigned long		323377	0					
ANR	325336	Identifier	sysm		323377	1					
ANR	325337	BreakStatement	break ;	5193:7:205118:205123	323377	13	True				
ANR	325338	Label	case 'V' :	5195:6:205132:205140	323377	14	True				
ANR	325339	CompoundStatement		489:8:13020:13040	323377	15					
ANR	325340	IdentifierDeclStatement	long hi = ( given & 0x000f0000 ) >> 4 ;	5199:8:205270:205305	323377	0	True				
ANR	325341	IdentifierDecl	hi = ( given & 0x000f0000 ) >> 4		323377	0					
ANR	325342	IdentifierDeclType	long		323377	0					
ANR	325343	Identifier	hi		323377	1					
ANR	325344	AssignmentExpression	hi = ( given & 0x000f0000 ) >> 4		323377	2		=			
ANR	325345	Identifier	hi		323377	0					
ANR	325346	ShiftExpression	( given & 0x000f0000 ) >> 4		323377	1		>>			
ANR	325347	BitAndExpression	given & 0x000f0000		323377	0		&			
ANR	325348	Identifier	given		323377	0					
ANR	325349	PrimaryExpression	0x000f0000		323377	1					
ANR	325350	PrimaryExpression	4		323377	1					
ANR	325351	IdentifierDeclStatement	long lo = ( given & 0x00000fff ) ;	5200:8:205315:205345	323377	1	True				
ANR	325352	IdentifierDecl	lo = ( given & 0x00000fff )		323377	0					
ANR	325353	IdentifierDeclType	long		323377	0					
ANR	325354	Identifier	lo		323377	1					
ANR	325355	AssignmentExpression	lo = ( given & 0x00000fff )		323377	2		=			
ANR	325356	Identifier	lo		323377	0					
ANR	325357	BitAndExpression	given & 0x00000fff		323377	1		&			
ANR	325358	Identifier	given		323377	0					
ANR	325359	PrimaryExpression	0x00000fff		323377	1					
ANR	325360	IdentifierDeclStatement	long imm16 = hi | lo ;	5201:8:205355:205375	323377	2	True				
ANR	325361	IdentifierDecl	imm16 = hi | lo		323377	0					
ANR	325362	IdentifierDeclType	long		323377	0					
ANR	325363	Identifier	imm16		323377	1					
ANR	325364	AssignmentExpression	imm16 = hi | lo		323377	2		=			
ANR	325365	Identifier	imm16		323377	0					
ANR	325366	InclusiveOrExpression	hi | lo		323377	1		|			
ANR	325367	Identifier	hi		323377	0					
ANR	325368	Identifier	lo		323377	1					
ANR	325369	ExpressionStatement	"func ( stream , ""%lu"" , imm16 )"	5203:8:205386:205413	323377	3	True				
ANR	325370	CallExpression	"func ( stream , ""%lu"" , imm16 )"		323377	0					
ANR	325371	Callee	func		323377	0					
ANR	325372	Identifier	func		323377	0					
ANR	325373	ArgumentList	stream		323377	1					
ANR	325374	Argument	stream		323377	0					
ANR	325375	Identifier	stream		323377	0					
ANR	325376	Argument	"""%lu"""		323377	1					
ANR	325377	PrimaryExpression	"""%lu"""		323377	0					
ANR	325378	Argument	imm16		323377	2					
ANR	325379	Identifier	imm16		323377	0					
ANR	325380	ExpressionStatement	value_in_comment = imm16	5204:8:205423:205447	323377	4	True				
ANR	325381	AssignmentExpression	value_in_comment = imm16		323377	0		=			
ANR	325382	Identifier	value_in_comment		323377	0					
ANR	325383	Identifier	imm16		323377	1					
ANR	325384	BreakStatement	break ;	5206:7:205465:205470	323377	16	True				
ANR	325385	ElseStatement	else		323377	0					
ANR	325386	CompoundStatement		497:12:13165:13165	323377	0					
ANR	325387	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5210:6:205508:205531	323377	0	True				
ANR	325388	CallExpression	"func ( stream , ""%c"" , * c )"		323377	0					
ANR	325389	Callee	func		323377	0					
ANR	325390	Identifier	func		323377	0					
ANR	325391	ArgumentList	stream		323377	1					
ANR	325392	Argument	stream		323377	0					
ANR	325393	Identifier	stream		323377	0					
ANR	325394	Argument	"""%c"""		323377	1					
ANR	325395	PrimaryExpression	"""%c"""		323377	0					
ANR	325396	Argument	* c		323377	2					
ANR	325397	UnaryOperationExpression	* c		323377	0					
ANR	325398	UnaryOperator	*		323377	0					
ANR	325399	Identifier	c		323377	1					
ANR	325400	IfStatement	if ( value_in_comment > 32 || value_in_comment < - 16 )		323377	6					
ANR	325401	Condition	value_in_comment > 32 || value_in_comment < - 16	5215:7:205560:205606	323377	0	True				
ANR	325402	OrExpression	value_in_comment > 32 || value_in_comment < - 16		323377	0		||			
ANR	325403	RelationalExpression	value_in_comment > 32		323377	0		>			
ANR	325404	Identifier	value_in_comment		323377	0					
ANR	325405	PrimaryExpression	32		323377	1					
ANR	325406	RelationalExpression	value_in_comment < - 16		323377	1		<			
ANR	325407	Identifier	value_in_comment		323377	0					
ANR	325408	UnaryOperationExpression	- 16		323377	1					
ANR	325409	UnaryOperator	-		323377	0					
ANR	325410	PrimaryExpression	16		323377	1					
ANR	325411	ExpressionStatement	"func ( stream , "" ; 0x%lx"" , ( value_in_comment & 0xffffffffUL ) )"	5216:5:205614:205674	323377	1	True				
ANR	325412	CallExpression	"func ( stream , "" ; 0x%lx"" , ( value_in_comment & 0xffffffffUL ) )"		323377	0					
ANR	325413	Callee	func		323377	0					
ANR	325414	Identifier	func		323377	0					
ANR	325415	ArgumentList	stream		323377	1					
ANR	325416	Argument	stream		323377	0					
ANR	325417	Identifier	stream		323377	0					
ANR	325418	Argument	""" ; 0x%lx"""		323377	1					
ANR	325419	PrimaryExpression	""" ; 0x%lx"""		323377	0					
ANR	325420	Argument	value_in_comment & 0xffffffffUL		323377	2					
ANR	325421	BitAndExpression	value_in_comment & 0xffffffffUL		323377	0		&			
ANR	325422	Identifier	value_in_comment		323377	0					
ANR	325423	PrimaryExpression	0xffffffffUL		323377	1					
ANR	325424	IfStatement	if ( is_unpredictable )		323377	7					
ANR	325425	Condition	is_unpredictable	5219:8:205692:205707	323377	0	True				
ANR	325426	Identifier	is_unpredictable		323377	0					
ANR	325427	CompoundStatement		507:26:13375:13375	323377	1					
ANR	325428	ExpressionStatement	"func ( stream , UNPREDICTABLE_INSTRUCTION )"	5220:5:205717:205757	323377	0	True				
ANR	325429	CallExpression	"func ( stream , UNPREDICTABLE_INSTRUCTION )"		323377	0					
ANR	325430	Callee	func		323377	0					
ANR	325431	Identifier	func		323377	0					
ANR	325432	ArgumentList	stream		323377	1					
ANR	325433	Argument	stream		323377	0					
ANR	325434	Identifier	stream		323377	0					
ANR	325435	Argument	UNPREDICTABLE_INSTRUCTION		323377	1					
ANR	325436	Identifier	UNPREDICTABLE_INSTRUCTION		323377	0					
ANR	325437	ReturnStatement	return ;	5223:4:205770:205776	323377	8	True				
ANR	325438	ReturnType	static void		323377	1					
ANR	325439	Identifier	print_insn_arm		323377	2					
ANR	325440	ParameterList	"bfd_vma pc , struct disassemble_info * info , long given"		323377	3					
ANR	325441	Parameter	bfd_vma pc	4712:16:192279:192288	323377	0	True				
ANR	325442	ParameterType	bfd_vma		323377	0					
ANR	325443	Identifier	pc		323377	1					
ANR	325444	Parameter	struct disassemble_info * info	4712:28:192291:192319	323377	1	True				
ANR	325445	ParameterType	struct disassemble_info *		323377	0					
ANR	325446	Identifier	info		323377	1					
ANR	325447	Parameter	long given	4712:59:192322:192331	323377	2	True				
ANR	325448	ParameterType	long		323377	0					
ANR	325449	Identifier	given		323377	1					
ANR	325450	CFGEntryNode	ENTRY		323377		True				
ANR	325451	CFGExitNode	EXIT		323377		True				
ANR	325452	Symbol	rotate		323377						
ANR	325453	Symbol	hi		323377						
ANR	325454	Symbol	& value		323377						
ANR	325455	Symbol	lo		323377						
ANR	325456	Symbol	UNPREDICTABLE_INSTRUCTION		323377						
ANR	325457	Symbol	PRE_BIT_SET		323377						
ANR	325458	Symbol	info -> fprintf_func		323377						
ANR	325459	Symbol	disp		323377						
ANR	325460	Symbol	* arm_conditional		323377						
ANR	325461	Symbol	reg		323377						
ANR	325462	Symbol	info		323377						
ANR	325463	Symbol	given		323377						
ANR	325464	Symbol	print_insn_coprocessor		323377						
ANR	325465	Symbol	NEGATIVE_BIT_SET		323377						
ANR	325466	Symbol	arm_decode_bitfield		323377						
ANR	325467	Symbol	NULL		323377						
ANR	325468	Symbol	offset		323377						
ANR	325469	Symbol	insn -> value		323377						
ANR	325470	Symbol	allow_unpredictable		323377						
ANR	325471	Symbol	TRUE		323377						
ANR	325472	Symbol	arm_opcodes		323377						
ANR	325473	Symbol	is_unpredictable		323377						
ANR	325474	Symbol	data_barrier_option		323377						
ANR	325475	Symbol	opt		323377						
ANR	325476	Symbol	IMMEDIATE_BIT_SET		323377						
ANR	325477	Symbol	ARM_FEATURE_CORE_LOW		323377						
ANR	325478	Symbol	name		323377						
ANR	325479	Symbol	* given		323377						
ANR	325480	Symbol	lsb		323377						
ANR	325481	Symbol	arm_conditional		323377						
ANR	325482	Symbol	banked_regname		323377						
ANR	325483	Symbol	* arm_regnames		323377						
ANR	325484	Symbol	private_data		323377						
ANR	325485	Symbol	imm		323377						
ANR	325486	Symbol	& width		323377						
ANR	325487	Symbol	info -> stream		323377						
ANR	325488	Symbol	* width		323377						
ANR	325489	Symbol	value_in_comment		323377						
ANR	325490	Symbol	WRITEBACK_BIT_SET		323377						
ANR	325491	Symbol	ARM_CPU_HAS_FEATURE		323377						
ANR	325492	Symbol	immed		323377						
ANR	325493	Symbol	imm16		323377						
ANR	325494	Symbol	stream		323377						
ANR	325495	Symbol	u_reg		323377						
ANR	325496	Symbol	* ++ c		323377						
ANR	325497	Symbol	arm_regnames		323377						
ANR	325498	Symbol	value		323377						
ANR	325499	Symbol	a		323377						
ANR	325500	Symbol	c		323377						
ANR	325501	Symbol	address		323377						
ANR	325502	Symbol	info -> private_data		323377						
ANR	325503	Symbol	insn -> arch		323377						
ANR	325504	Symbol	* insn		323377						
ANR	325505	Symbol	i		323377						
ANR	325506	Symbol	arm_ext_v6		323377						
ANR	325507	Symbol	started		323377						
ANR	325508	Symbol	* c		323377						
ANR	325509	Symbol	P_BIT		323377						
ANR	325510	Symbol	U_reg		323377						
ANR	325511	Symbol	insn		323377						
ANR	325512	Symbol	pc		323377						
ANR	325513	Symbol	func		323377						
ANR	325514	Symbol	sysm		323377						
ANR	325515	Symbol	* value		323377						
ANR	325516	Symbol	w		323377						
ANR	325517	Symbol	ARM_EXT_V6		323377						
ANR	325518	Symbol	width		323377						
ANR	325519	Symbol	FALSE		323377						
ANR	325520	Symbol	print_insn_neon		323377						
ANR	325521	Symbol	* private_data		323377						
ANR	325522	Symbol	* info		323377						
ANR	325523	Symbol	insn -> mask		323377						
ANR	325524	Symbol	print_arm_address		323377						
ANR	325525	Symbol	insn -> assembler		323377						
ANR	325526	Symbol	msb		323377						
ANR	325527	Symbol	private_data -> features		323377						
ANR	325528	Symbol	* reg		323377						
ANR	325529	Function	print_insn_thumb16	5230:0:205858:211564							
ANR	325530	FunctionDef	"print_insn_thumb16 (bfd_vma pc , struct disassemble_info * info , long given)"		325529	0					
ANR	325531	CompoundStatement		5232:0:205945:211564	325529	0					
ANR	325532	IdentifierDeclStatement	const struct opcode16 * insn ;	5233:2:205949:205976	325529	0	True				
ANR	325533	IdentifierDecl	* insn		325529	0					
ANR	325534	IdentifierDeclType	const struct opcode16 *		325529	0					
ANR	325535	Identifier	insn		325529	1					
ANR	325536	IdentifierDeclStatement	void * stream = info -> stream ;	5234:2:205980:206007	325529	1	True				
ANR	325537	IdentifierDecl	* stream = info -> stream		325529	0					
ANR	325538	IdentifierDeclType	void *		325529	0					
ANR	325539	Identifier	stream		325529	1					
ANR	325540	AssignmentExpression	* stream = info -> stream		325529	2		=			
ANR	325541	Identifier	stream		325529	0					
ANR	325542	PtrMemberAccess	info -> stream		325529	1					
ANR	325543	Identifier	info		325529	0					
ANR	325544	Identifier	stream		325529	1					
ANR	325545	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	5235:2:206011:206050	325529	2	True				
ANR	325546	IdentifierDecl	func = info -> fprintf_func		325529	0					
ANR	325547	IdentifierDeclType	fprintf_ftype		325529	0					
ANR	325548	Identifier	func		325529	1					
ANR	325549	AssignmentExpression	func = info -> fprintf_func		325529	2		=			
ANR	325550	Identifier	func		325529	0					
ANR	325551	PtrMemberAccess	info -> fprintf_func		325529	1					
ANR	325552	Identifier	info		325529	0					
ANR	325553	Identifier	fprintf_func		325529	1					
ANR	325554	ForStatement	for ( insn = thumb_opcodes ; insn -> assembler ; insn ++ )		325529	3					
ANR	325555	ForInit	insn = thumb_opcodes ;	5237:7:206060:206080	325529	0	True				
ANR	325556	AssignmentExpression	insn = thumb_opcodes		325529	0		=			
ANR	325557	Identifier	insn		325529	0					
ANR	325558	Identifier	thumb_opcodes		325529	1					
ANR	325559	Condition	insn -> assembler	5237:29:206082:206096	325529	1	True				
ANR	325560	PtrMemberAccess	insn -> assembler		325529	0					
ANR	325561	Identifier	insn		325529	0					
ANR	325562	Identifier	assembler		325529	1					
ANR	325563	PostIncDecOperationExpression	insn ++	5237:46:206099:206104	325529	2	True				
ANR	325564	Identifier	insn		325529	0					
ANR	325565	IncDec	++		325529	1					
ANR	325566	CompoundStatement		6:54:161:161	325529	3					
ANR	325567	IfStatement	if ( ( given & insn -> mask ) == insn -> value )		325529	0					
ANR	325568	Condition	( given & insn -> mask ) == insn -> value	5238:7:206116:206150	325529	0	True				
ANR	325569	EqualityExpression	( given & insn -> mask ) == insn -> value		325529	0		==			
ANR	325570	BitAndExpression	given & insn -> mask		325529	0		&			
ANR	325571	Identifier	given		325529	0					
ANR	325572	PtrMemberAccess	insn -> mask		325529	1					
ANR	325573	Identifier	insn		325529	0					
ANR	325574	Identifier	mask		325529	1					
ANR	325575	PtrMemberAccess	insn -> value		325529	1					
ANR	325576	Identifier	insn		325529	0					
ANR	325577	Identifier	value		325529	1					
ANR	325578	CompoundStatement		9:4:254:285	325529	1					
ANR	325579	IdentifierDeclStatement	const char * c = insn -> assembler ;	5240:4:206200:206231	325529	0	True				
ANR	325580	IdentifierDecl	* c = insn -> assembler		325529	0					
ANR	325581	IdentifierDeclType	const char *		325529	0					
ANR	325582	Identifier	c		325529	1					
ANR	325583	AssignmentExpression	* c = insn -> assembler		325529	2		=			
ANR	325584	Identifier	c		325529	0					
ANR	325585	PtrMemberAccess	insn -> assembler		325529	1					
ANR	325586	Identifier	insn		325529	0					
ANR	325587	Identifier	assembler		325529	1					
ANR	325588	ForStatement	for ( ; * c ; c ++ )		325529	1					
ANR	325589	Condition	* c	5242:11:206245:206246	325529	0	True				
ANR	325590	UnaryOperationExpression	* c		325529	0					
ANR	325591	UnaryOperator	*		325529	0					
ANR	325592	Identifier	c		325529	1					
ANR	325593	PostIncDecOperationExpression	c ++	5242:15:206249:206251	325529	1	True				
ANR	325594	Identifier	c		325529	0					
ANR	325595	IncDec	++		325529	1					
ANR	325596	CompoundStatement		13:5:338:354	325529	2					
ANR	325597	IdentifierDeclStatement	int domaskpc = 0 ;	5243:5:206261:206277	325529	0	True				
ANR	325598	IdentifierDecl	domaskpc = 0		325529	0					
ANR	325599	IdentifierDeclType	int		325529	0					
ANR	325600	Identifier	domaskpc		325529	1					
ANR	325601	AssignmentExpression	domaskpc = 0		325529	2		=			
ANR	325602	Identifier	domaskpc		325529	0					
ANR	325603	PrimaryExpression	0		325529	1					
ANR	325604	IdentifierDeclStatement	int domasklr = 0 ;	5244:5:206284:206300	325529	1	True				
ANR	325605	IdentifierDecl	domasklr = 0		325529	0					
ANR	325606	IdentifierDeclType	int		325529	0					
ANR	325607	Identifier	domasklr		325529	1					
ANR	325608	AssignmentExpression	domasklr = 0		325529	2		=			
ANR	325609	Identifier	domasklr		325529	0					
ANR	325610	PrimaryExpression	0		325529	1					
ANR	325611	IfStatement	if ( * c != '%' )		325529	2					
ANR	325612	Condition	* c != '%'	5246:9:206312:206320	325529	0	True				
ANR	325613	EqualityExpression	* c != '%'		325529	0		!=			
ANR	325614	UnaryOperationExpression	* c		325529	0					
ANR	325615	UnaryOperator	*		325529	0					
ANR	325616	Identifier	c		325529	1					
ANR	325617	PrimaryExpression	'%'		325529	1					
ANR	325618	CompoundStatement		15:20:377:377	325529	1					
ANR	325619	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5247:6:206331:206354	325529	0	True				
ANR	325620	CallExpression	"func ( stream , ""%c"" , * c )"		325529	0					
ANR	325621	Callee	func		325529	0					
ANR	325622	Identifier	func		325529	0					
ANR	325623	ArgumentList	stream		325529	1					
ANR	325624	Argument	stream		325529	0					
ANR	325625	Identifier	stream		325529	0					
ANR	325626	Argument	"""%c"""		325529	1					
ANR	325627	PrimaryExpression	"""%c"""		325529	0					
ANR	325628	Argument	* c		325529	2					
ANR	325629	UnaryOperationExpression	* c		325529	0					
ANR	325630	UnaryOperator	*		325529	0					
ANR	325631	Identifier	c		325529	1					
ANR	325632	ContinueStatement	continue ;	5248:6:206362:206370	325529	1	True				
ANR	325633	SwitchStatement	switch ( * ++ c )		325529	3					
ANR	325634	Condition	* ++ c	5251:13:206393:206396	325529	0	True				
ANR	325635	UnaryOperationExpression	* ++ c		325529	0					
ANR	325636	UnaryOperator	*		325529	0					
ANR	325637	UnaryExpression	++ c		325529	1					
ANR	325638	IncDec	++		325529	0					
ANR	325639	Identifier	c		325529	1					
ANR	325640	CompoundStatement		20:19:453:453	325529	1					
ANR	325641	Label	case '%' :	5252:5:206406:206414	325529	0	True				
ANR	325642	ExpressionStatement	"func ( stream , ""%%"" )"	5253:6:206422:206441	325529	1	True				
ANR	325643	CallExpression	"func ( stream , ""%%"" )"		325529	0					
ANR	325644	Callee	func		325529	0					
ANR	325645	Identifier	func		325529	0					
ANR	325646	ArgumentList	stream		325529	1					
ANR	325647	Argument	stream		325529	0					
ANR	325648	Identifier	stream		325529	0					
ANR	325649	Argument	"""%%"""		325529	1					
ANR	325650	PrimaryExpression	"""%%"""		325529	0					
ANR	325651	BreakStatement	break ;	5254:6:206449:206454	325529	2	True				
ANR	325652	Label	case 'c' :	5256:5:206462:206470	325529	3	True				
ANR	325653	IfStatement	if ( ifthen_state )		325529	4					
ANR	325654	Condition	ifthen_state	5257:10:206482:206493	325529	0	True				
ANR	325655	Identifier	ifthen_state		325529	0					
ANR	325656	CompoundStatement		26:24:550:550	325529	1					
ANR	325657	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"	5258:7:206505:206554	325529	0	True				
ANR	325658	CallExpression	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"		325529	0					
ANR	325659	Callee	func		325529	0					
ANR	325660	Identifier	func		325529	0					
ANR	325661	ArgumentList	stream		325529	1					
ANR	325662	Argument	stream		325529	0					
ANR	325663	Identifier	stream		325529	0					
ANR	325664	Argument	"""%s"""		325529	1					
ANR	325665	PrimaryExpression	"""%s"""		325529	0					
ANR	325666	Argument	arm_conditional [ IFTHEN_COND ]		325529	2					
ANR	325667	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		325529	0					
ANR	325668	Identifier	arm_conditional		325529	0					
ANR	325669	Identifier	IFTHEN_COND		325529	1					
ANR	325670	BreakStatement	break ;	5260:6:206570:206575	325529	5	True				
ANR	325671	Label	case 'C' :	5262:5:206583:206591	325529	6	True				
ANR	325672	IfStatement	if ( ifthen_state )		325529	7					
ANR	325673	Condition	ifthen_state	5263:10:206603:206614	325529	0	True				
ANR	325674	Identifier	ifthen_state		325529	0					
ANR	325675	CompoundStatement		32:24:671:671	325529	1					
ANR	325676	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"	5264:7:206626:206675	325529	0	True				
ANR	325677	CallExpression	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"		325529	0					
ANR	325678	Callee	func		325529	0					
ANR	325679	Identifier	func		325529	0					
ANR	325680	ArgumentList	stream		325529	1					
ANR	325681	Argument	stream		325529	0					
ANR	325682	Identifier	stream		325529	0					
ANR	325683	Argument	"""%s"""		325529	1					
ANR	325684	PrimaryExpression	"""%s"""		325529	0					
ANR	325685	Argument	arm_conditional [ IFTHEN_COND ]		325529	2					
ANR	325686	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		325529	0					
ANR	325687	Identifier	arm_conditional		325529	0					
ANR	325688	Identifier	IFTHEN_COND		325529	1					
ANR	325689	ElseStatement	else		325529	0					
ANR	325690	CompoundStatement		34:13:744:744	325529	0					
ANR	325691	ExpressionStatement	"func ( stream , ""s"" )"	5266:7:206699:206717	325529	0	True				
ANR	325692	CallExpression	"func ( stream , ""s"" )"		325529	0					
ANR	325693	Callee	func		325529	0					
ANR	325694	Identifier	func		325529	0					
ANR	325695	ArgumentList	stream		325529	1					
ANR	325696	Argument	stream		325529	0					
ANR	325697	Identifier	stream		325529	0					
ANR	325698	Argument	"""s"""		325529	1					
ANR	325699	PrimaryExpression	"""s"""		325529	0					
ANR	325700	BreakStatement	break ;	5268:6:206733:206738	325529	8	True				
ANR	325701	Label	case 'I' :	5270:5:206746:206754	325529	9	True				
ANR	325702	CompoundStatement		40:6:818:834	325529	10					
ANR	325703	IdentifierDeclStatement	unsigned int tmp ;	5271:6:206764:206780	325529	0	True				
ANR	325704	IdentifierDecl	tmp		325529	0					
ANR	325705	IdentifierDeclType	unsigned int		325529	0					
ANR	325706	Identifier	tmp		325529	1					
ANR	325707	ExpressionStatement	ifthen_next_state = given & 0xff	5273:6:206789:206821	325529	1	True				
ANR	325708	AssignmentExpression	ifthen_next_state = given & 0xff		325529	0		=			
ANR	325709	Identifier	ifthen_next_state		325529	0					
ANR	325710	BitAndExpression	given & 0xff		325529	1		&			
ANR	325711	Identifier	given		325529	0					
ANR	325712	PrimaryExpression	0xff		325529	1					
ANR	325713	ForStatement	for ( tmp = given << 1 ; tmp & 0xf ; tmp <<= 1 )		325529	2					
ANR	325714	ForInit	tmp = given << 1 ;	5274:11:206834:206850	325529	0	True				
ANR	325715	AssignmentExpression	tmp = given << 1		325529	0		=			
ANR	325716	Identifier	tmp		325529	0					
ANR	325717	ShiftExpression	given << 1		325529	1		<<			
ANR	325718	Identifier	given		325529	0					
ANR	325719	PrimaryExpression	1		325529	1					
ANR	325720	Condition	tmp & 0xf	5274:29:206852:206860	325529	1	True				
ANR	325721	BitAndExpression	tmp & 0xf		325529	0		&			
ANR	325722	Identifier	tmp		325529	0					
ANR	325723	PrimaryExpression	0xf		325529	1					
ANR	325724	AssignmentExpression	tmp <<= 1	5274:40:206863:206871	325529	2	True	<<=			
ANR	325725	Identifier	tmp		325529	0					
ANR	325726	PrimaryExpression	1		325529	1					
ANR	325727	CompoundStatement		43:51:928:928	325529	3					
ANR	325728	ExpressionStatement	"func ( stream , ( ( given ^ tmp ) & 0x10 ) ? ""e"" : ""t"" )"	5275:7:206883:206932	325529	0	True				
ANR	325729	CallExpression	"func ( stream , ( ( given ^ tmp ) & 0x10 ) ? ""e"" : ""t"" )"		325529	0					
ANR	325730	Callee	func		325529	0					
ANR	325731	Identifier	func		325529	0					
ANR	325732	ArgumentList	stream		325529	1					
ANR	325733	Argument	stream		325529	0					
ANR	325734	Identifier	stream		325529	0					
ANR	325735	Argument	"( ( given ^ tmp ) & 0x10 ) ? ""e"" : ""t"""		325529	1					
ANR	325736	ConditionalExpression	"( ( given ^ tmp ) & 0x10 ) ? ""e"" : ""t"""		325529	0					
ANR	325737	Condition	( given ^ tmp ) & 0x10		325529	0					
ANR	325738	BitAndExpression	( given ^ tmp ) & 0x10		325529	0		&			
ANR	325739	ExclusiveOrExpression	given ^ tmp		325529	0		^			
ANR	325740	Identifier	given		325529	0					
ANR	325741	Identifier	tmp		325529	1					
ANR	325742	PrimaryExpression	0x10		325529	1					
ANR	325743	PrimaryExpression	"""e"""		325529	1					
ANR	325744	PrimaryExpression	"""t"""		325529	2					
ANR	325745	ExpressionStatement	"func ( stream , "" %s"" , arm_conditional [ ( given >> 4 ) & 0xf ] )"	5277:6:206948:207005	325529	3	True				
ANR	325746	CallExpression	"func ( stream , "" %s"" , arm_conditional [ ( given >> 4 ) & 0xf ] )"		325529	0					
ANR	325747	Callee	func		325529	0					
ANR	325748	Identifier	func		325529	0					
ANR	325749	ArgumentList	stream		325529	1					
ANR	325750	Argument	stream		325529	0					
ANR	325751	Identifier	stream		325529	0					
ANR	325752	Argument	""" %s"""		325529	1					
ANR	325753	PrimaryExpression	""" %s"""		325529	0					
ANR	325754	Argument	arm_conditional [ ( given >> 4 ) & 0xf ]		325529	2					
ANR	325755	ArrayIndexing	arm_conditional [ ( given >> 4 ) & 0xf ]		325529	0					
ANR	325756	Identifier	arm_conditional		325529	0					
ANR	325757	BitAndExpression	( given >> 4 ) & 0xf		325529	1		&			
ANR	325758	ShiftExpression	given >> 4		325529	0		>>			
ANR	325759	Identifier	given		325529	0					
ANR	325760	PrimaryExpression	4		325529	1					
ANR	325761	PrimaryExpression	0xf		325529	1					
ANR	325762	BreakStatement	break ;	5278:7:207014:207019	325529	11	True				
ANR	325763	Label	case 'x' :	5280:5:207027:207035	325529	12	True				
ANR	325764	IfStatement	if ( ifthen_next_state )		325529	13					
ANR	325765	Condition	ifthen_next_state	5281:10:207047:207063	325529	0	True				
ANR	325766	Identifier	ifthen_next_state		325529	0					
ANR	325767	CompoundStatement		50:29:1120:1120	325529	1					
ANR	325768	ExpressionStatement	"func ( stream , "" ; unpredictable branch in IT block\\n"" )"	5282:7:207075:207129	325529	0	True				
ANR	325769	CallExpression	"func ( stream , "" ; unpredictable branch in IT block\\n"" )"		325529	0					
ANR	325770	Callee	func		325529	0					
ANR	325771	Identifier	func		325529	0					
ANR	325772	ArgumentList	stream		325529	1					
ANR	325773	Argument	stream		325529	0					
ANR	325774	Identifier	stream		325529	0					
ANR	325775	Argument	""" ; unpredictable branch in IT block\\n"""		325529	1					
ANR	325776	PrimaryExpression	""" ; unpredictable branch in IT block\\n"""		325529	0					
ANR	325777	BreakStatement	break ;	5284:6:207145:207150	325529	14	True				
ANR	325778	Label	case 'X' :	5286:5:207158:207166	325529	15	True				
ANR	325779	IfStatement	if ( ifthen_state )		325529	16					
ANR	325780	Condition	ifthen_state	5287:10:207178:207189	325529	0	True				
ANR	325781	Identifier	ifthen_state		325529	0					
ANR	325782	CompoundStatement		56:24:1246:1246	325529	1					
ANR	325783	ExpressionStatement	"func ( stream , "" ; unpredictable <IT:%s>"" , arm_conditional [ IFTHEN_COND ] )"	5288:7:207201:207280	325529	0	True				
ANR	325784	CallExpression	"func ( stream , "" ; unpredictable <IT:%s>"" , arm_conditional [ IFTHEN_COND ] )"		325529	0					
ANR	325785	Callee	func		325529	0					
ANR	325786	Identifier	func		325529	0					
ANR	325787	ArgumentList	stream		325529	1					
ANR	325788	Argument	stream		325529	0					
ANR	325789	Identifier	stream		325529	0					
ANR	325790	Argument	""" ; unpredictable <IT:%s>"""		325529	1					
ANR	325791	PrimaryExpression	""" ; unpredictable <IT:%s>"""		325529	0					
ANR	325792	Argument	arm_conditional [ IFTHEN_COND ]		325529	2					
ANR	325793	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		325529	0					
ANR	325794	Identifier	arm_conditional		325529	0					
ANR	325795	Identifier	IFTHEN_COND		325529	1					
ANR	325796	BreakStatement	break ;	5291:6:207296:207301	325529	17	True				
ANR	325797	Label	case 'S' :	5293:5:207309:207317	325529	18	True				
ANR	325798	CompoundStatement		63:6:1381:1389	325529	19					
ANR	325799	IdentifierDeclStatement	long reg ;	5294:6:207327:207335	325529	0	True				
ANR	325800	IdentifierDecl	reg		325529	0					
ANR	325801	IdentifierDeclType	long		325529	0					
ANR	325802	Identifier	reg		325529	1					
ANR	325803	ExpressionStatement	reg = ( given >> 3 ) & 0x7	5296:6:207344:207368	325529	1	True				
ANR	325804	AssignmentExpression	reg = ( given >> 3 ) & 0x7		325529	0		=			
ANR	325805	Identifier	reg		325529	0					
ANR	325806	BitAndExpression	( given >> 3 ) & 0x7		325529	1		&			
ANR	325807	ShiftExpression	given >> 3		325529	0		>>			
ANR	325808	Identifier	given		325529	0					
ANR	325809	PrimaryExpression	3		325529	1					
ANR	325810	PrimaryExpression	0x7		325529	1					
ANR	325811	IfStatement	if ( given & ( 1 << 6 ) )		325529	2					
ANR	325812	Condition	given & ( 1 << 6 )	5297:10:207380:207395	325529	0	True				
ANR	325813	BitAndExpression	given & ( 1 << 6 )		325529	0		&			
ANR	325814	Identifier	given		325529	0					
ANR	325815	ShiftExpression	1 << 6		325529	1		<<			
ANR	325816	PrimaryExpression	1		325529	0					
ANR	325817	PrimaryExpression	6		325529	1					
ANR	325818	CompoundStatement		66:28:1452:1452	325529	1					
ANR	325819	ExpressionStatement	reg += 8	5298:7:207407:207415	325529	0	True				
ANR	325820	AssignmentExpression	reg += 8		325529	0		+=			
ANR	325821	Identifier	reg		325529	0					
ANR	325822	PrimaryExpression	8		325529	1					
ANR	325823	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5301:6:207432:207470	325529	3	True				
ANR	325824	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		325529	0					
ANR	325825	Callee	func		325529	0					
ANR	325826	Identifier	func		325529	0					
ANR	325827	ArgumentList	stream		325529	1					
ANR	325828	Argument	stream		325529	0					
ANR	325829	Identifier	stream		325529	0					
ANR	325830	Argument	"""%s"""		325529	1					
ANR	325831	PrimaryExpression	"""%s"""		325529	0					
ANR	325832	Argument	arm_regnames [ reg ]		325529	2					
ANR	325833	ArrayIndexing	arm_regnames [ reg ]		325529	0					
ANR	325834	Identifier	arm_regnames		325529	0					
ANR	325835	Identifier	reg		325529	1					
ANR	325836	BreakStatement	break ;	5302:7:207479:207484	325529	20	True				
ANR	325837	Label	case 'D' :	5304:5:207492:207500	325529	21	True				
ANR	325838	CompoundStatement		74:6:1564:1572	325529	22					
ANR	325839	IdentifierDeclStatement	long reg ;	5305:6:207510:207518	325529	0	True				
ANR	325840	IdentifierDecl	reg		325529	0					
ANR	325841	IdentifierDeclType	long		325529	0					
ANR	325842	Identifier	reg		325529	1					
ANR	325843	ExpressionStatement	reg = given & 0x7	5307:6:207527:207544	325529	1	True				
ANR	325844	AssignmentExpression	reg = given & 0x7		325529	0		=			
ANR	325845	Identifier	reg		325529	0					
ANR	325846	BitAndExpression	given & 0x7		325529	1		&			
ANR	325847	Identifier	given		325529	0					
ANR	325848	PrimaryExpression	0x7		325529	1					
ANR	325849	IfStatement	if ( given & ( 1 << 7 ) )		325529	2					
ANR	325850	Condition	given & ( 1 << 7 )	5308:10:207556:207571	325529	0	True				
ANR	325851	BitAndExpression	given & ( 1 << 7 )		325529	0		&			
ANR	325852	Identifier	given		325529	0					
ANR	325853	ShiftExpression	1 << 7		325529	1		<<			
ANR	325854	PrimaryExpression	1		325529	0					
ANR	325855	PrimaryExpression	7		325529	1					
ANR	325856	CompoundStatement		77:28:1628:1628	325529	1					
ANR	325857	ExpressionStatement	reg += 8	5309:7:207583:207591	325529	0	True				
ANR	325858	AssignmentExpression	reg += 8		325529	0		+=			
ANR	325859	Identifier	reg		325529	0					
ANR	325860	PrimaryExpression	8		325529	1					
ANR	325861	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5312:6:207608:207646	325529	3	True				
ANR	325862	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		325529	0					
ANR	325863	Callee	func		325529	0					
ANR	325864	Identifier	func		325529	0					
ANR	325865	ArgumentList	stream		325529	1					
ANR	325866	Argument	stream		325529	0					
ANR	325867	Identifier	stream		325529	0					
ANR	325868	Argument	"""%s"""		325529	1					
ANR	325869	PrimaryExpression	"""%s"""		325529	0					
ANR	325870	Argument	arm_regnames [ reg ]		325529	2					
ANR	325871	ArrayIndexing	arm_regnames [ reg ]		325529	0					
ANR	325872	Identifier	arm_regnames		325529	0					
ANR	325873	Identifier	reg		325529	1					
ANR	325874	BreakStatement	break ;	5313:7:207655:207660	325529	23	True				
ANR	325875	Label	case 'N' :	5315:5:207668:207676	325529	24	True				
ANR	325876	IfStatement	if ( given & ( 1 << 8 ) )		325529	25					
ANR	325877	Condition	given & ( 1 << 8 )	5316:10:207688:207703	325529	0	True				
ANR	325878	BitAndExpression	given & ( 1 << 8 )		325529	0		&			
ANR	325879	Identifier	given		325529	0					
ANR	325880	ShiftExpression	1 << 8		325529	1		<<			
ANR	325881	PrimaryExpression	1		325529	0					
ANR	325882	PrimaryExpression	8		325529	1					
ANR	325883	CompoundStatement		85:28:1760:1760	325529	1					
ANR	325884	ExpressionStatement	domasklr = 1	5317:7:207715:207727	325529	0	True				
ANR	325885	AssignmentExpression	domasklr = 1		325529	0		=			
ANR	325886	Identifier	domasklr		325529	0					
ANR	325887	PrimaryExpression	1		325529	1					
ANR	325888	Label	case 'O' :	5320:5:207769:207777	325529	26	True				
ANR	325889	IfStatement	if ( * c == 'O' && ( given & ( 1 << 8 ) ) )		325529	27					
ANR	325890	Condition	* c == 'O' && ( given & ( 1 << 8 ) )	5321:10:207789:207819	325529	0	True				
ANR	325891	AndExpression	* c == 'O' && ( given & ( 1 << 8 ) )		325529	0		&&			
ANR	325892	EqualityExpression	* c == 'O'		325529	0		==			
ANR	325893	UnaryOperationExpression	* c		325529	0					
ANR	325894	UnaryOperator	*		325529	0					
ANR	325895	Identifier	c		325529	1					
ANR	325896	PrimaryExpression	'O'		325529	1					
ANR	325897	BitAndExpression	given & ( 1 << 8 )		325529	1		&			
ANR	325898	Identifier	given		325529	0					
ANR	325899	ShiftExpression	1 << 8		325529	1		<<			
ANR	325900	PrimaryExpression	1		325529	0					
ANR	325901	PrimaryExpression	8		325529	1					
ANR	325902	CompoundStatement		90:43:1876:1876	325529	1					
ANR	325903	ExpressionStatement	domaskpc = 1	5322:7:207831:207843	325529	0	True				
ANR	325904	AssignmentExpression	domaskpc = 1		325529	0		=			
ANR	325905	Identifier	domaskpc		325529	0					
ANR	325906	PrimaryExpression	1		325529	1					
ANR	325907	Label	case 'M' :	5325:5:207885:207893	325529	28	True				
ANR	325908	CompoundStatement		96:6:1980:1987	325529	29					
ANR	325909	IdentifierDeclStatement	int started = 0 ;	5326:6:207903:207918	325529	0	True				
ANR	325910	IdentifierDecl	started = 0		325529	0					
ANR	325911	IdentifierDeclType	int		325529	0					
ANR	325912	Identifier	started		325529	1					
ANR	325913	AssignmentExpression	started = 0		325529	2		=			
ANR	325914	Identifier	started		325529	0					
ANR	325915	PrimaryExpression	0		325529	1					
ANR	325916	IdentifierDeclStatement	int reg ;	5327:6:207926:207933	325529	1	True				
ANR	325917	IdentifierDecl	reg		325529	0					
ANR	325918	IdentifierDeclType	int		325529	0					
ANR	325919	Identifier	reg		325529	1					
ANR	325920	ExpressionStatement	"func ( stream , ""{"" )"	5329:6:207942:207960	325529	2	True				
ANR	325921	CallExpression	"func ( stream , ""{"" )"		325529	0					
ANR	325922	Callee	func		325529	0					
ANR	325923	Identifier	func		325529	0					
ANR	325924	ArgumentList	stream		325529	1					
ANR	325925	Argument	stream		325529	0					
ANR	325926	Identifier	stream		325529	0					
ANR	325927	Argument	"""{"""		325529	1					
ANR	325928	PrimaryExpression	"""{"""		325529	0					
ANR	325929	ForStatement	for ( reg = 0 ; ( reg < 8 ) ; reg ++ )		325529	3					
ANR	325930	ForInit	reg = 0 ;	5333:11:208066:208073	325529	0	True				
ANR	325931	AssignmentExpression	reg = 0		325529	0		=			
ANR	325932	Identifier	reg		325529	0					
ANR	325933	PrimaryExpression	0		325529	1					
ANR	325934	Condition	reg < 8	5333:20:208075:208083	325529	1	True				
ANR	325935	RelationalExpression	reg < 8		325529	0		<			
ANR	325936	Identifier	reg		325529	0					
ANR	325937	PrimaryExpression	8		325529	1					
ANR	325938	PostIncDecOperationExpression	reg ++	5333:31:208086:208090	325529	2	True				
ANR	325939	Identifier	reg		325529	0					
ANR	325940	IncDec	++		325529	1					
ANR	325941	CompoundStatement		102:38:2147:2147	325529	3					
ANR	325942	IfStatement	if ( ( given & ( 1 << reg ) ) != 0 )		325529	0					
ANR	325943	Condition	( given & ( 1 << reg ) ) != 0	5334:11:208106:208130	325529	0	True				
ANR	325944	EqualityExpression	( given & ( 1 << reg ) ) != 0		325529	0		!=			
ANR	325945	BitAndExpression	given & ( 1 << reg )		325529	0		&			
ANR	325946	Identifier	given		325529	0					
ANR	325947	ShiftExpression	1 << reg		325529	1		<<			
ANR	325948	PrimaryExpression	1		325529	0					
ANR	325949	Identifier	reg		325529	1					
ANR	325950	PrimaryExpression	0		325529	1					
ANR	325951	CompoundStatement		103:38:2187:2187	325529	1					
ANR	325952	IfStatement	if ( started )		325529	0					
ANR	325953	Condition	started	5335:12:208147:208153	325529	0	True				
ANR	325954	Identifier	started		325529	0					
ANR	325955	CompoundStatement		104:21:2210:2210	325529	1					
ANR	325956	ExpressionStatement	"func ( stream , "", "" )"	5336:9:208167:208186	325529	0	True				
ANR	325957	CallExpression	"func ( stream , "", "" )"		325529	0					
ANR	325958	Callee	func		325529	0					
ANR	325959	Identifier	func		325529	0					
ANR	325960	ArgumentList	stream		325529	1					
ANR	325961	Argument	stream		325529	0					
ANR	325962	Identifier	stream		325529	0					
ANR	325963	Argument	""", """		325529	1					
ANR	325964	PrimaryExpression	""", """		325529	0					
ANR	325965	ExpressionStatement	started = 1	5338:8:208206:208217	325529	1	True				
ANR	325966	AssignmentExpression	started = 1		325529	0		=			
ANR	325967	Identifier	started		325529	0					
ANR	325968	PrimaryExpression	1		325529	1					
ANR	325969	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5339:8:208227:208265	325529	2	True				
ANR	325970	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		325529	0					
ANR	325971	Callee	func		325529	0					
ANR	325972	Identifier	func		325529	0					
ANR	325973	ArgumentList	stream		325529	1					
ANR	325974	Argument	stream		325529	0					
ANR	325975	Identifier	stream		325529	0					
ANR	325976	Argument	"""%s"""		325529	1					
ANR	325977	PrimaryExpression	"""%s"""		325529	0					
ANR	325978	Argument	arm_regnames [ reg ]		325529	2					
ANR	325979	ArrayIndexing	arm_regnames [ reg ]		325529	0					
ANR	325980	Identifier	arm_regnames		325529	0					
ANR	325981	Identifier	reg		325529	1					
ANR	325982	IfStatement	if ( domasklr )		325529	4					
ANR	325983	Condition	domasklr	5343:10:208295:208302	325529	0	True				
ANR	325984	Identifier	domasklr		325529	0					
ANR	325985	CompoundStatement		112:20:2359:2359	325529	1					
ANR	325986	IfStatement	if ( started )		325529	0					
ANR	325987	Condition	started	5344:11:208318:208324	325529	0	True				
ANR	325988	Identifier	started		325529	0					
ANR	325989	CompoundStatement		113:20:2381:2381	325529	1					
ANR	325990	ExpressionStatement	"func ( stream , "", "" )"	5345:8:208337:208356	325529	0	True				
ANR	325991	CallExpression	"func ( stream , "", "" )"		325529	0					
ANR	325992	Callee	func		325529	0					
ANR	325993	Identifier	func		325529	0					
ANR	325994	ArgumentList	stream		325529	1					
ANR	325995	Argument	stream		325529	0					
ANR	325996	Identifier	stream		325529	0					
ANR	325997	Argument	""", """		325529	1					
ANR	325998	PrimaryExpression	""", """		325529	0					
ANR	325999	ExpressionStatement	started = 1	5347:7:208374:208385	325529	1	True				
ANR	326000	AssignmentExpression	started = 1		325529	0		=			
ANR	326001	Identifier	started		325529	0					
ANR	326002	PrimaryExpression	1		325529	1					
ANR	326003	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ 14 ] )"	5348:7:208394:208442	325529	2	True				
ANR	326004	CallExpression	"func ( stream , ""%s"" , arm_regnames [ 14 ] )"		325529	0					
ANR	326005	Callee	func		325529	0					
ANR	326006	Identifier	func		325529	0					
ANR	326007	ArgumentList	stream		325529	1					
ANR	326008	Argument	stream		325529	0					
ANR	326009	Identifier	stream		325529	0					
ANR	326010	Argument	"""%s"""		325529	1					
ANR	326011	PrimaryExpression	"""%s"""		325529	0					
ANR	326012	Argument	arm_regnames [ 14 ]		325529	2					
ANR	326013	ArrayIndexing	arm_regnames [ 14 ]		325529	0					
ANR	326014	Identifier	arm_regnames		325529	0					
ANR	326015	PrimaryExpression	14		325529	1					
ANR	326016	IfStatement	if ( domaskpc )		325529	5					
ANR	326017	Condition	domaskpc	5351:10:208463:208470	325529	0	True				
ANR	326018	Identifier	domaskpc		325529	0					
ANR	326019	CompoundStatement		120:20:2527:2527	325529	1					
ANR	326020	IfStatement	if ( started )		325529	0					
ANR	326021	Condition	started	5352:11:208486:208492	325529	0	True				
ANR	326022	Identifier	started		325529	0					
ANR	326023	CompoundStatement		121:20:2549:2549	325529	1					
ANR	326024	ExpressionStatement	"func ( stream , "", "" )"	5353:8:208505:208524	325529	0	True				
ANR	326025	CallExpression	"func ( stream , "", "" )"		325529	0					
ANR	326026	Callee	func		325529	0					
ANR	326027	Identifier	func		325529	0					
ANR	326028	ArgumentList	stream		325529	1					
ANR	326029	Argument	stream		325529	0					
ANR	326030	Identifier	stream		325529	0					
ANR	326031	Argument	""", """		325529	1					
ANR	326032	PrimaryExpression	""", """		325529	0					
ANR	326033	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ 15 ] )"	5355:7:208542:208590	325529	1	True				
ANR	326034	CallExpression	"func ( stream , ""%s"" , arm_regnames [ 15 ] )"		325529	0					
ANR	326035	Callee	func		325529	0					
ANR	326036	Identifier	func		325529	0					
ANR	326037	ArgumentList	stream		325529	1					
ANR	326038	Argument	stream		325529	0					
ANR	326039	Identifier	stream		325529	0					
ANR	326040	Argument	"""%s"""		325529	1					
ANR	326041	PrimaryExpression	"""%s"""		325529	0					
ANR	326042	Argument	arm_regnames [ 15 ]		325529	2					
ANR	326043	ArrayIndexing	arm_regnames [ 15 ]		325529	0					
ANR	326044	Identifier	arm_regnames		325529	0					
ANR	326045	PrimaryExpression	15		325529	1					
ANR	326046	ExpressionStatement	"func ( stream , ""}"" )"	5358:6:208607:208625	325529	6	True				
ANR	326047	CallExpression	"func ( stream , ""}"" )"		325529	0					
ANR	326048	Callee	func		325529	0					
ANR	326049	Identifier	func		325529	0					
ANR	326050	ArgumentList	stream		325529	1					
ANR	326051	Argument	stream		325529	0					
ANR	326052	Identifier	stream		325529	0					
ANR	326053	Argument	"""}"""		325529	1					
ANR	326054	PrimaryExpression	"""}"""		325529	0					
ANR	326055	BreakStatement	break ;	5359:7:208634:208639	325529	30	True				
ANR	326056	Label	case 'W' :	5361:5:208647:208655	325529	31	True				
ANR	326057	IfStatement	if ( ( given & ( 1 << ( ( given & 0x0700 ) >> 8 ) ) ) == 0 )		325529	32					
ANR	326058	Condition	( given & ( 1 << ( ( given & 0x0700 ) >> 8 ) ) ) == 0	5365:10:208805:208849	325529	0	True				
ANR	326059	EqualityExpression	( given & ( 1 << ( ( given & 0x0700 ) >> 8 ) ) ) == 0		325529	0		==			
ANR	326060	BitAndExpression	given & ( 1 << ( ( given & 0x0700 ) >> 8 ) )		325529	0		&			
ANR	326061	Identifier	given		325529	0					
ANR	326062	ShiftExpression	1 << ( ( given & 0x0700 ) >> 8 )		325529	1		<<			
ANR	326063	PrimaryExpression	1		325529	0					
ANR	326064	ShiftExpression	( given & 0x0700 ) >> 8		325529	1		>>			
ANR	326065	BitAndExpression	given & 0x0700		325529	0		&			
ANR	326066	Identifier	given		325529	0					
ANR	326067	PrimaryExpression	0x0700		325529	1					
ANR	326068	PrimaryExpression	8		325529	1					
ANR	326069	PrimaryExpression	0		325529	1					
ANR	326070	CompoundStatement		134:57:2906:2906	325529	1					
ANR	326071	ExpressionStatement	"func ( stream , ""!"" )"	5366:7:208861:208879	325529	0	True				
ANR	326072	CallExpression	"func ( stream , ""!"" )"		325529	0					
ANR	326073	Callee	func		325529	0					
ANR	326074	Identifier	func		325529	0					
ANR	326075	ArgumentList	stream		325529	1					
ANR	326076	Argument	stream		325529	0					
ANR	326077	Identifier	stream		325529	0					
ANR	326078	Argument	"""!"""		325529	1					
ANR	326079	PrimaryExpression	"""!"""		325529	0					
ANR	326080	BreakStatement	break ;	5368:6:208895:208900	325529	33	True				
ANR	326081	Label	case 'b' :	5370:5:208908:208916	325529	34	True				
ANR	326082	CompoundStatement		142:7:3041:3119	325529	35					
ANR	326083	IdentifierDeclStatement	bfd_vma address = ( pc + 4 + ( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 ) ) ;	5373:7:208987:209065	325529	0	True				
ANR	326084	IdentifierDecl	address = ( pc + 4 + ( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 ) )		325529	0					
ANR	326085	IdentifierDeclType	bfd_vma		325529	0					
ANR	326086	Identifier	address		325529	1					
ANR	326087	AssignmentExpression	address = ( pc + 4 + ( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 ) )		325529	2		=			
ANR	326088	Identifier	address		325529	0					
ANR	326089	AdditiveExpression	pc + 4 + ( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 )		325529	1		+			
ANR	326090	Identifier	pc		325529	0					
ANR	326091	AdditiveExpression	4 + ( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 )		325529	1		+			
ANR	326092	PrimaryExpression	4		325529	0					
ANR	326093	AdditiveExpression	( ( given & 0x00f8 ) >> 2 ) + ( ( given & 0x0200 ) >> 3 )		325529	1		+			
ANR	326094	ShiftExpression	( given & 0x00f8 ) >> 2		325529	0		>>			
ANR	326095	BitAndExpression	given & 0x00f8		325529	0		&			
ANR	326096	Identifier	given		325529	0					
ANR	326097	PrimaryExpression	0x00f8		325529	1					
ANR	326098	PrimaryExpression	2		325529	1					
ANR	326099	ShiftExpression	( given & 0x0200 ) >> 3		325529	1		>>			
ANR	326100	BitAndExpression	given & 0x0200		325529	0		&			
ANR	326101	Identifier	given		325529	0					
ANR	326102	PrimaryExpression	0x0200		325529	1					
ANR	326103	PrimaryExpression	3		325529	1					
ANR	326104	ExpressionStatement	"info -> print_address_func ( address , info )"	5374:7:209074:209114	325529	1	True				
ANR	326105	CallExpression	"info -> print_address_func ( address , info )"		325529	0					
ANR	326106	Callee	info -> print_address_func		325529	0					
ANR	326107	PtrMemberAccess	info -> print_address_func		325529	0					
ANR	326108	Identifier	info		325529	0					
ANR	326109	Identifier	print_address_func		325529	1					
ANR	326110	ArgumentList	address		325529	1					
ANR	326111	Argument	address		325529	0					
ANR	326112	Identifier	address		325529	0					
ANR	326113	Argument	info		325529	1					
ANR	326114	Identifier	info		325529	0					
ANR	326115	BreakStatement	break ;	5376:6:209130:209135	325529	36	True				
ANR	326116	Label	case 's' :	5378:5:209143:209151	325529	37	True				
ANR	326117	CompoundStatement		151:7:3319:3351	325529	38					
ANR	326118	IdentifierDeclStatement	long imm = ( given & 0x07c0 ) >> 6 ;	5382:7:209265:209297	325529	0	True				
ANR	326119	IdentifierDecl	imm = ( given & 0x07c0 ) >> 6		325529	0					
ANR	326120	IdentifierDeclType	long		325529	0					
ANR	326121	Identifier	imm		325529	1					
ANR	326122	AssignmentExpression	imm = ( given & 0x07c0 ) >> 6		325529	2		=			
ANR	326123	Identifier	imm		325529	0					
ANR	326124	ShiftExpression	( given & 0x07c0 ) >> 6		325529	1		>>			
ANR	326125	BitAndExpression	given & 0x07c0		325529	0		&			
ANR	326126	Identifier	given		325529	0					
ANR	326127	PrimaryExpression	0x07c0		325529	1					
ANR	326128	PrimaryExpression	6		325529	1					
ANR	326129	IfStatement	if ( imm == 0 )		325529	1					
ANR	326130	Condition	imm == 0	5383:11:209310:209317	325529	0	True				
ANR	326131	EqualityExpression	imm == 0		325529	0		==			
ANR	326132	Identifier	imm		325529	0					
ANR	326133	PrimaryExpression	0		325529	1					
ANR	326134	CompoundStatement		152:21:3374:3374	325529	1					
ANR	326135	ExpressionStatement	imm = 32	5384:8:209330:209338	325529	0	True				
ANR	326136	AssignmentExpression	imm = 32		325529	0		=			
ANR	326137	Identifier	imm		325529	0					
ANR	326138	PrimaryExpression	32		325529	1					
ANR	326139	ExpressionStatement	"func ( stream , ""%ld"" , imm )"	5386:7:209356:209381	325529	2	True				
ANR	326140	CallExpression	"func ( stream , ""%ld"" , imm )"		325529	0					
ANR	326141	Callee	func		325529	0					
ANR	326142	Identifier	func		325529	0					
ANR	326143	ArgumentList	stream		325529	1					
ANR	326144	Argument	stream		325529	0					
ANR	326145	Identifier	stream		325529	0					
ANR	326146	Argument	"""%ld"""		325529	1					
ANR	326147	PrimaryExpression	"""%ld"""		325529	0					
ANR	326148	Argument	imm		325529	2					
ANR	326149	Identifier	imm		325529	0					
ANR	326150	BreakStatement	break ;	5388:6:209397:209402	325529	39	True				
ANR	326151	Label	case '0' :	5390:5:209410:209418	325529	40	True				
ANR	326152	Label	case '1' :	5391:5:209425:209433	325529	41	True				
ANR	326153	Label	case '2' :	5392:5:209440:209448	325529	42	True				
ANR	326154	Label	case '3' :	5393:5:209455:209463	325529	43	True				
ANR	326155	Label	case '4' :	5394:5:209470:209478	325529	44	True				
ANR	326156	Label	case '5' :	5395:5:209485:209493	325529	45	True				
ANR	326157	Label	case '6' :	5396:5:209500:209508	325529	46	True				
ANR	326158	Label	case '7' :	5397:5:209515:209523	325529	47	True				
ANR	326159	Label	case '8' :	5398:5:209530:209538	325529	48	True				
ANR	326160	Label	case '9' :	5399:5:209545:209553	325529	49	True				
ANR	326161	CompoundStatement		170:6:3650:3664	325529	50					
ANR	326162	IdentifierDeclStatement	int bitstart = * c ++ - '0' ;	5400:6:209563:209588	325529	0	True				
ANR	326163	IdentifierDecl	bitstart = * c ++ - '0'		325529	0					
ANR	326164	IdentifierDeclType	int		325529	0					
ANR	326165	Identifier	bitstart		325529	1					
ANR	326166	AssignmentExpression	bitstart = * c ++ - '0'		325529	2		=			
ANR	326167	Identifier	bitstart		325529	0					
ANR	326168	AdditiveExpression	* c ++ - '0'		325529	1		-			
ANR	326169	UnaryOperationExpression	* c ++		325529	0					
ANR	326170	UnaryOperator	*		325529	0					
ANR	326171	PostIncDecOperationExpression	c ++		325529	1					
ANR	326172	Identifier	c		325529	0					
ANR	326173	IncDec	++		325529	1					
ANR	326174	PrimaryExpression	'0'		325529	1					
ANR	326175	IdentifierDeclStatement	int bitend = 0 ;	5401:6:209596:209610	325529	1	True				
ANR	326176	IdentifierDecl	bitend = 0		325529	0					
ANR	326177	IdentifierDeclType	int		325529	0					
ANR	326178	Identifier	bitend		325529	1					
ANR	326179	AssignmentExpression	bitend = 0		325529	2		=			
ANR	326180	Identifier	bitend		325529	0					
ANR	326181	PrimaryExpression	0		325529	1					
ANR	326182	WhileStatement	while ( * c >= '0' && * c <= '9' )		325529	2					
ANR	326183	Condition	* c >= '0' && * c <= '9'	5403:13:209626:209647	325529	0	True				
ANR	326184	AndExpression	* c >= '0' && * c <= '9'		325529	0		&&			
ANR	326185	RelationalExpression	* c >= '0'		325529	0		>=			
ANR	326186	UnaryOperationExpression	* c		325529	0					
ANR	326187	UnaryOperator	*		325529	0					
ANR	326188	Identifier	c		325529	1					
ANR	326189	PrimaryExpression	'0'		325529	1					
ANR	326190	RelationalExpression	* c <= '9'		325529	1		<=			
ANR	326191	UnaryOperationExpression	* c		325529	0					
ANR	326192	UnaryOperator	*		325529	0					
ANR	326193	Identifier	c		325529	1					
ANR	326194	PrimaryExpression	'9'		325529	1					
ANR	326195	CompoundStatement		172:37:3704:3704	325529	1					
ANR	326196	ExpressionStatement	bitstart = ( bitstart * 10 ) + * c ++ - '0'	5404:7:209659:209698	325529	0	True				
ANR	326197	AssignmentExpression	bitstart = ( bitstart * 10 ) + * c ++ - '0'		325529	0		=			
ANR	326198	Identifier	bitstart		325529	0					
ANR	326199	AdditiveExpression	( bitstart * 10 ) + * c ++ - '0'		325529	1		+			
ANR	326200	MultiplicativeExpression	bitstart * 10		325529	0		*			
ANR	326201	Identifier	bitstart		325529	0					
ANR	326202	PrimaryExpression	10		325529	1					
ANR	326203	AdditiveExpression	* c ++ - '0'		325529	1		-			
ANR	326204	UnaryOperationExpression	* c ++		325529	0					
ANR	326205	UnaryOperator	*		325529	0					
ANR	326206	PostIncDecOperationExpression	c ++		325529	1					
ANR	326207	Identifier	c		325529	0					
ANR	326208	IncDec	++		325529	1					
ANR	326209	PrimaryExpression	'0'		325529	1					
ANR	326210	SwitchStatement	switch ( * c )		325529	3					
ANR	326211	Condition	* c	5407:14:209723:209724	325529	0	True				
ANR	326212	UnaryOperationExpression	* c		325529	0					
ANR	326213	UnaryOperator	*		325529	0					
ANR	326214	Identifier	c		325529	1					
ANR	326215	CompoundStatement		176:18:3781:3781	325529	1					
ANR	326216	Label	case '-' :	5408:6:209735:209743	325529	0	True				
ANR	326217	CompoundStatement		178:7:3808:3819	325529	1					
ANR	326218	IdentifierDeclStatement	bfd_vma reg ;	5409:7:209754:209765	325529	0	True				
ANR	326219	IdentifierDecl	reg		325529	0					
ANR	326220	IdentifierDeclType	bfd_vma		325529	0					
ANR	326221	Identifier	reg		325529	1					
ANR	326222	ExpressionStatement	c ++	5411:7:209775:209778	325529	1	True				
ANR	326223	PostIncDecOperationExpression	c ++		325529	0					
ANR	326224	Identifier	c		325529	0					
ANR	326225	IncDec	++		325529	1					
ANR	326226	WhileStatement	while ( * c >= '0' && * c <= '9' )		325529	2					
ANR	326227	Condition	* c >= '0' && * c <= '9'	5412:14:209794:209815	325529	0	True				
ANR	326228	AndExpression	* c >= '0' && * c <= '9'		325529	0		&&			
ANR	326229	RelationalExpression	* c >= '0'		325529	0		>=			
ANR	326230	UnaryOperationExpression	* c		325529	0					
ANR	326231	UnaryOperator	*		325529	0					
ANR	326232	Identifier	c		325529	1					
ANR	326233	PrimaryExpression	'0'		325529	1					
ANR	326234	RelationalExpression	* c <= '9'		325529	1		<=			
ANR	326235	UnaryOperationExpression	* c		325529	0					
ANR	326236	UnaryOperator	*		325529	0					
ANR	326237	Identifier	c		325529	1					
ANR	326238	PrimaryExpression	'9'		325529	1					
ANR	326239	CompoundStatement		181:38:3872:3872	325529	1					
ANR	326240	ExpressionStatement	bitend = ( bitend * 10 ) + * c ++ - '0'	5413:8:209828:209863	325529	0	True				
ANR	326241	AssignmentExpression	bitend = ( bitend * 10 ) + * c ++ - '0'		325529	0		=			
ANR	326242	Identifier	bitend		325529	0					
ANR	326243	AdditiveExpression	( bitend * 10 ) + * c ++ - '0'		325529	1		+			
ANR	326244	MultiplicativeExpression	bitend * 10		325529	0		*			
ANR	326245	Identifier	bitend		325529	0					
ANR	326246	PrimaryExpression	10		325529	1					
ANR	326247	AdditiveExpression	* c ++ - '0'		325529	1		-			
ANR	326248	UnaryOperationExpression	* c ++		325529	0					
ANR	326249	UnaryOperator	*		325529	0					
ANR	326250	PostIncDecOperationExpression	c ++		325529	1					
ANR	326251	Identifier	c		325529	0					
ANR	326252	IncDec	++		325529	1					
ANR	326253	PrimaryExpression	'0'		325529	1					
ANR	326254	IfStatement	if ( ! bitend )		325529	3					
ANR	326255	Condition	! bitend	5415:11:209885:209891	325529	0	True				
ANR	326256	UnaryOperationExpression	! bitend		325529	0					
ANR	326257	UnaryOperator	!		325529	0					
ANR	326258	Identifier	bitend		325529	1					
ANR	326259	CompoundStatement		184:20:3948:3948	325529	1					
ANR	326260	ReturnStatement	return ;	5416:8:209904:209910	325529	0	True				
ANR	326261	ExpressionStatement	reg = given >> bitstart	5418:7:209928:209951	325529	4	True				
ANR	326262	AssignmentExpression	reg = given >> bitstart		325529	0		=			
ANR	326263	Identifier	reg		325529	0					
ANR	326264	ShiftExpression	given >> bitstart		325529	1		>>			
ANR	326265	Identifier	given		325529	0					
ANR	326266	Identifier	bitstart		325529	1					
ANR	326267	ExpressionStatement	reg &= ( 2 << ( bitend - bitstart ) ) - 1	5419:7:209960:209997	325529	5	True				
ANR	326268	AssignmentExpression	reg &= ( 2 << ( bitend - bitstart ) ) - 1		325529	0		&=			
ANR	326269	Identifier	reg		325529	0					
ANR	326270	AdditiveExpression	( 2 << ( bitend - bitstart ) ) - 1		325529	1		-			
ANR	326271	ShiftExpression	2 << ( bitend - bitstart )		325529	0		<<			
ANR	326272	PrimaryExpression	2		325529	0					
ANR	326273	AdditiveExpression	bitend - bitstart		325529	1		-			
ANR	326274	Identifier	bitend		325529	0					
ANR	326275	Identifier	bitstart		325529	1					
ANR	326276	PrimaryExpression	1		325529	1					
ANR	326277	SwitchStatement	switch ( * c )		325529	6					
ANR	326278	Condition	* c	5421:15:210015:210016	325529	0	True				
ANR	326279	UnaryOperationExpression	* c		325529	0					
ANR	326280	UnaryOperator	*		325529	0					
ANR	326281	Identifier	c		325529	1					
ANR	326282	CompoundStatement		190:19:4073:4073	325529	1					
ANR	326283	Label	case 'r' :	5422:7:210028:210036	325529	0	True				
ANR	326284	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5423:8:210046:210084	325529	1	True				
ANR	326285	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		325529	0					
ANR	326286	Callee	func		325529	0					
ANR	326287	Identifier	func		325529	0					
ANR	326288	ArgumentList	stream		325529	1					
ANR	326289	Argument	stream		325529	0					
ANR	326290	Identifier	stream		325529	0					
ANR	326291	Argument	"""%s"""		325529	1					
ANR	326292	PrimaryExpression	"""%s"""		325529	0					
ANR	326293	Argument	arm_regnames [ reg ]		325529	2					
ANR	326294	ArrayIndexing	arm_regnames [ reg ]		325529	0					
ANR	326295	Identifier	arm_regnames		325529	0					
ANR	326296	Identifier	reg		325529	1					
ANR	326297	BreakStatement	break ;	5424:8:210094:210099	325529	2	True				
ANR	326298	Label	case 'd' :	5426:7:210109:210117	325529	3	True				
ANR	326299	ExpressionStatement	"func ( stream , ""%ld"" , ( long ) reg )"	5427:8:210127:210158	325529	4	True				
ANR	326300	CallExpression	"func ( stream , ""%ld"" , ( long ) reg )"		325529	0					
ANR	326301	Callee	func		325529	0					
ANR	326302	Identifier	func		325529	0					
ANR	326303	ArgumentList	stream		325529	1					
ANR	326304	Argument	stream		325529	0					
ANR	326305	Identifier	stream		325529	0					
ANR	326306	Argument	"""%ld"""		325529	1					
ANR	326307	PrimaryExpression	"""%ld"""		325529	0					
ANR	326308	Argument	( long ) reg		325529	2					
ANR	326309	CastExpression	( long ) reg		325529	0					
ANR	326310	CastTarget	long		325529	0					
ANR	326311	Identifier	reg		325529	1					
ANR	326312	BreakStatement	break ;	5429:8:210203:210208	325529	5	True				
ANR	326313	Label	case 'H' :	5431:7:210218:210226	325529	6	True				
ANR	326314	ExpressionStatement	"func ( stream , ""%ld"" , ( long ) ( reg << 1 ) )"	5432:8:210236:210274	325529	7	True				
ANR	326315	CallExpression	"func ( stream , ""%ld"" , ( long ) ( reg << 1 ) )"		325529	0					
ANR	326316	Callee	func		325529	0					
ANR	326317	Identifier	func		325529	0					
ANR	326318	ArgumentList	stream		325529	1					
ANR	326319	Argument	stream		325529	0					
ANR	326320	Identifier	stream		325529	0					
ANR	326321	Argument	"""%ld"""		325529	1					
ANR	326322	PrimaryExpression	"""%ld"""		325529	0					
ANR	326323	Argument	( long ) ( reg << 1 )		325529	2					
ANR	326324	CastExpression	( long ) ( reg << 1 )		325529	0					
ANR	326325	CastTarget	long		325529	0					
ANR	326326	ShiftExpression	reg << 1		325529	1		<<			
ANR	326327	Identifier	reg		325529	0					
ANR	326328	PrimaryExpression	1		325529	1					
ANR	326329	BreakStatement	break ;	5434:8:210324:210329	325529	8	True				
ANR	326330	Label	case 'W' :	5436:7:210339:210347	325529	9	True				
ANR	326331	ExpressionStatement	"func ( stream , ""%ld"" , ( long ) ( reg << 2 ) )"	5437:8:210357:210395	325529	10	True				
ANR	326332	CallExpression	"func ( stream , ""%ld"" , ( long ) ( reg << 2 ) )"		325529	0					
ANR	326333	Callee	func		325529	0					
ANR	326334	Identifier	func		325529	0					
ANR	326335	ArgumentList	stream		325529	1					
ANR	326336	Argument	stream		325529	0					
ANR	326337	Identifier	stream		325529	0					
ANR	326338	Argument	"""%ld"""		325529	1					
ANR	326339	PrimaryExpression	"""%ld"""		325529	0					
ANR	326340	Argument	( long ) ( reg << 2 )		325529	2					
ANR	326341	CastExpression	( long ) ( reg << 2 )		325529	0					
ANR	326342	CastTarget	long		325529	0					
ANR	326343	ShiftExpression	reg << 2		325529	1		<<			
ANR	326344	Identifier	reg		325529	0					
ANR	326345	PrimaryExpression	2		325529	1					
ANR	326346	BreakStatement	break ;	5439:8:210445:210450	325529	11	True				
ANR	326347	Label	case 'a' :	5441:7:210460:210468	325529	12	True				
ANR	326348	ExpressionStatement	"info -> print_address_func ( ( ( pc + 4 ) & ~3 ) + ( reg << 2 ) , info )"	5445:8:210607:210668	325529	13	True				
ANR	326349	CallExpression	"info -> print_address_func ( ( ( pc + 4 ) & ~3 ) + ( reg << 2 ) , info )"		325529	0					
ANR	326350	Callee	info -> print_address_func		325529	0					
ANR	326351	PtrMemberAccess	info -> print_address_func		325529	0					
ANR	326352	Identifier	info		325529	0					
ANR	326353	Identifier	print_address_func		325529	1					
ANR	326354	ArgumentList	( ( pc + 4 ) & ~3 ) + ( reg << 2 )		325529	1					
ANR	326355	Argument	( ( pc + 4 ) & ~3 ) + ( reg << 2 )		325529	0					
ANR	326356	AdditiveExpression	( ( pc + 4 ) & ~3 ) + ( reg << 2 )		325529	0		+			
ANR	326357	BitAndExpression	( pc + 4 ) & ~3		325529	0		&			
ANR	326358	AdditiveExpression	pc + 4		325529	0		+			
ANR	326359	Identifier	pc		325529	0					
ANR	326360	PrimaryExpression	4		325529	1					
ANR	326361	Identifier	~3		325529	1					
ANR	326362	ShiftExpression	reg << 2		325529	1		<<			
ANR	326363	Identifier	reg		325529	0					
ANR	326364	PrimaryExpression	2		325529	1					
ANR	326365	Argument	info		325529	1					
ANR	326366	Identifier	info		325529	0					
ANR	326367	BreakStatement	break ;	5447:8:210710:210715	325529	14	True				
ANR	326368	Label	case 'x' :	5449:7:210725:210733	325529	15	True				
ANR	326369	ExpressionStatement	"func ( stream , ""0x%04lx"" , ( long ) reg )"	5450:8:210743:210778	325529	16	True				
ANR	326370	CallExpression	"func ( stream , ""0x%04lx"" , ( long ) reg )"		325529	0					
ANR	326371	Callee	func		325529	0					
ANR	326372	Identifier	func		325529	0					
ANR	326373	ArgumentList	stream		325529	1					
ANR	326374	Argument	stream		325529	0					
ANR	326375	Identifier	stream		325529	0					
ANR	326376	Argument	"""0x%04lx"""		325529	1					
ANR	326377	PrimaryExpression	"""0x%04lx"""		325529	0					
ANR	326378	Argument	( long ) reg		325529	2					
ANR	326379	CastExpression	( long ) reg		325529	0					
ANR	326380	CastTarget	long		325529	0					
ANR	326381	Identifier	reg		325529	1					
ANR	326382	BreakStatement	break ;	5451:8:210788:210793	325529	17	True				
ANR	326383	Label	case 'B' :	5453:7:210803:210811	325529	18	True				
ANR	326384	ExpressionStatement	reg = ( ( reg ^ ( 1 << bitend ) ) - ( 1 << bitend ) )	5454:8:210821:210866	325529	19	True				
ANR	326385	AssignmentExpression	reg = ( ( reg ^ ( 1 << bitend ) ) - ( 1 << bitend ) )		325529	0		=			
ANR	326386	Identifier	reg		325529	0					
ANR	326387	AdditiveExpression	( reg ^ ( 1 << bitend ) ) - ( 1 << bitend )		325529	1		-			
ANR	326388	ExclusiveOrExpression	reg ^ ( 1 << bitend )		325529	0		^			
ANR	326389	Identifier	reg		325529	0					
ANR	326390	ShiftExpression	1 << bitend		325529	1		<<			
ANR	326391	PrimaryExpression	1		325529	0					
ANR	326392	Identifier	bitend		325529	1					
ANR	326393	ShiftExpression	1 << bitend		325529	1		<<			
ANR	326394	PrimaryExpression	1		325529	0					
ANR	326395	Identifier	bitend		325529	1					
ANR	326396	ExpressionStatement	"info -> print_address_func ( reg * 2 + pc + 4 , info )"	5455:8:210876:210925	325529	20	True				
ANR	326397	CallExpression	"info -> print_address_func ( reg * 2 + pc + 4 , info )"		325529	0					
ANR	326398	Callee	info -> print_address_func		325529	0					
ANR	326399	PtrMemberAccess	info -> print_address_func		325529	0					
ANR	326400	Identifier	info		325529	0					
ANR	326401	Identifier	print_address_func		325529	1					
ANR	326402	ArgumentList	reg * 2 + pc + 4		325529	1					
ANR	326403	Argument	reg * 2 + pc + 4		325529	0					
ANR	326404	AdditiveExpression	reg * 2 + pc + 4		325529	0		+			
ANR	326405	MultiplicativeExpression	reg * 2		325529	0		*			
ANR	326406	Identifier	reg		325529	0					
ANR	326407	PrimaryExpression	2		325529	1					
ANR	326408	AdditiveExpression	pc + 4		325529	1		+			
ANR	326409	Identifier	pc		325529	0					
ANR	326410	PrimaryExpression	4		325529	1					
ANR	326411	Argument	info		325529	1					
ANR	326412	Identifier	info		325529	0					
ANR	326413	BreakStatement	break ;	5457:8:210967:210972	325529	21	True				
ANR	326414	Label	case 'c' :	5459:7:210982:210990	325529	22	True				
ANR	326415	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ reg ] )"	5460:8:211000:211041	325529	23	True				
ANR	326416	CallExpression	"func ( stream , ""%s"" , arm_conditional [ reg ] )"		325529	0					
ANR	326417	Callee	func		325529	0					
ANR	326418	Identifier	func		325529	0					
ANR	326419	ArgumentList	stream		325529	1					
ANR	326420	Argument	stream		325529	0					
ANR	326421	Identifier	stream		325529	0					
ANR	326422	Argument	"""%s"""		325529	1					
ANR	326423	PrimaryExpression	"""%s"""		325529	0					
ANR	326424	Argument	arm_conditional [ reg ]		325529	2					
ANR	326425	ArrayIndexing	arm_conditional [ reg ]		325529	0					
ANR	326426	Identifier	arm_conditional		325529	0					
ANR	326427	Identifier	reg		325529	1					
ANR	326428	BreakStatement	break ;	5461:8:211051:211056	325529	24	True				
ANR	326429	BreakStatement	break ;	5463:8:211075:211080	325529	2	True				
ANR	326430	Label	case '\\'' :	5465:6:211089:211098	325529	3	True				
ANR	326431	ExpressionStatement	c ++	5466:7:211107:211110	325529	4	True				
ANR	326432	PostIncDecOperationExpression	c ++		325529	0					
ANR	326433	Identifier	c		325529	0					
ANR	326434	IncDec	++		325529	1					
ANR	326435	IfStatement	if ( ( given & ( 1 << bitstart ) ) != 0 )		325529	5					
ANR	326436	Condition	( given & ( 1 << bitstart ) ) != 0	5467:11:211123:211152	325529	0	True				
ANR	326437	EqualityExpression	( given & ( 1 << bitstart ) ) != 0		325529	0		!=			
ANR	326438	BitAndExpression	given & ( 1 << bitstart )		325529	0		&			
ANR	326439	Identifier	given		325529	0					
ANR	326440	ShiftExpression	1 << bitstart		325529	1		<<			
ANR	326441	PrimaryExpression	1		325529	0					
ANR	326442	Identifier	bitstart		325529	1					
ANR	326443	PrimaryExpression	0		325529	1					
ANR	326444	CompoundStatement		236:43:5209:5209	325529	1					
ANR	326445	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5468:8:211165:211188	325529	0	True				
ANR	326446	CallExpression	"func ( stream , ""%c"" , * c )"		325529	0					
ANR	326447	Callee	func		325529	0					
ANR	326448	Identifier	func		325529	0					
ANR	326449	ArgumentList	stream		325529	1					
ANR	326450	Argument	stream		325529	0					
ANR	326451	Identifier	stream		325529	0					
ANR	326452	Argument	"""%c"""		325529	1					
ANR	326453	PrimaryExpression	"""%c"""		325529	0					
ANR	326454	Argument	* c		325529	2					
ANR	326455	UnaryOperationExpression	* c		325529	0					
ANR	326456	UnaryOperator	*		325529	0					
ANR	326457	Identifier	c		325529	1					
ANR	326458	BreakStatement	break ;	5470:7:211206:211211	325529	6	True				
ANR	326459	Label	case '?' :	5472:6:211220:211228	325529	7	True				
ANR	326460	ExpressionStatement	++ c	5473:7:211237:211240	325529	8	True				
ANR	326461	UnaryExpression	++ c		325529	0					
ANR	326462	IncDec	++		325529	0					
ANR	326463	Identifier	c		325529	1					
ANR	326464	IfStatement	if ( ( given & ( 1 << bitstart ) ) != 0 )		325529	9					
ANR	326465	Condition	( given & ( 1 << bitstart ) ) != 0	5474:11:211253:211282	325529	0	True				
ANR	326466	EqualityExpression	( given & ( 1 << bitstart ) ) != 0		325529	0		!=			
ANR	326467	BitAndExpression	given & ( 1 << bitstart )		325529	0		&			
ANR	326468	Identifier	given		325529	0					
ANR	326469	ShiftExpression	1 << bitstart		325529	1		<<			
ANR	326470	PrimaryExpression	1		325529	0					
ANR	326471	Identifier	bitstart		325529	1					
ANR	326472	PrimaryExpression	0		325529	1					
ANR	326473	CompoundStatement		243:43:5339:5339	325529	1					
ANR	326474	ExpressionStatement	"func ( stream , ""%c"" , * c ++ )"	5475:8:211295:211320	325529	0	True				
ANR	326475	CallExpression	"func ( stream , ""%c"" , * c ++ )"		325529	0					
ANR	326476	Callee	func		325529	0					
ANR	326477	Identifier	func		325529	0					
ANR	326478	ArgumentList	stream		325529	1					
ANR	326479	Argument	stream		325529	0					
ANR	326480	Identifier	stream		325529	0					
ANR	326481	Argument	"""%c"""		325529	1					
ANR	326482	PrimaryExpression	"""%c"""		325529	0					
ANR	326483	Argument	* c ++		325529	2					
ANR	326484	UnaryOperationExpression	* c ++		325529	0					
ANR	326485	UnaryOperator	*		325529	0					
ANR	326486	PostIncDecOperationExpression	c ++		325529	1					
ANR	326487	Identifier	c		325529	0					
ANR	326488	IncDec	++		325529	1					
ANR	326489	ElseStatement	else		325529	0					
ANR	326490	CompoundStatement		245:14:5390:5390	325529	0					
ANR	326491	ExpressionStatement	"func ( stream , ""%c"" , * ++ c )"	5477:8:211346:211371	325529	0	True				
ANR	326492	CallExpression	"func ( stream , ""%c"" , * ++ c )"		325529	0					
ANR	326493	Callee	func		325529	0					
ANR	326494	Identifier	func		325529	0					
ANR	326495	ArgumentList	stream		325529	1					
ANR	326496	Argument	stream		325529	0					
ANR	326497	Identifier	stream		325529	0					
ANR	326498	Argument	"""%c"""		325529	1					
ANR	326499	PrimaryExpression	"""%c"""		325529	0					
ANR	326500	Argument	* ++ c		325529	2					
ANR	326501	UnaryOperationExpression	* ++ c		325529	0					
ANR	326502	UnaryOperator	*		325529	0					
ANR	326503	UnaryExpression	++ c		325529	1					
ANR	326504	IncDec	++		325529	0					
ANR	326505	Identifier	c		325529	1					
ANR	326506	BreakStatement	break ;	5479:7:211389:211394	325529	10	True				
ANR	326507	BreakStatement	break ;	5481:7:211411:211416	325529	51	True				
ANR	326508	IfStatement	if ( value_in_comment > 32 || value_in_comment < - 16 )		325529	2					
ANR	326509	Condition	value_in_comment > 32 || value_in_comment < - 16	5485:5:211442:211488	325529	0	True				
ANR	326510	OrExpression	value_in_comment > 32 || value_in_comment < - 16		325529	0		||			
ANR	326511	RelationalExpression	value_in_comment > 32		325529	0		>			
ANR	326512	Identifier	value_in_comment		325529	0					
ANR	326513	PrimaryExpression	32		325529	1					
ANR	326514	RelationalExpression	value_in_comment < - 16		325529	1		<			
ANR	326515	Identifier	value_in_comment		325529	0					
ANR	326516	UnaryOperationExpression	- 16		325529	1					
ANR	326517	UnaryOperator	-		325529	0					
ANR	326518	PrimaryExpression	16		325529	1					
ANR	326519	ExpressionStatement	"func ( stream , "" ; 0x%lx"" , value_in_comment )"	5486:3:211494:211537	325529	1	True				
ANR	326520	CallExpression	"func ( stream , "" ; 0x%lx"" , value_in_comment )"		325529	0					
ANR	326521	Callee	func		325529	0					
ANR	326522	Identifier	func		325529	0					
ANR	326523	ArgumentList	stream		325529	1					
ANR	326524	Argument	stream		325529	0					
ANR	326525	Identifier	stream		325529	0					
ANR	326526	Argument	""" ; 0x%lx"""		325529	1					
ANR	326527	PrimaryExpression	""" ; 0x%lx"""		325529	0					
ANR	326528	Argument	value_in_comment		325529	2					
ANR	326529	Identifier	value_in_comment		325529	0					
ANR	326530	ReturnStatement	return ;	5488:1:211547:211553	325529	3	True				
ANR	326531	ReturnType	static void		325529	1					
ANR	326532	Identifier	print_insn_thumb16		325529	2					
ANR	326533	ParameterList	"bfd_vma pc , struct disassemble_info * info , long given"		325529	3					
ANR	326534	Parameter	bfd_vma pc	5231:20:205890:205899	325529	0	True				
ANR	326535	ParameterType	bfd_vma		325529	0					
ANR	326536	Identifier	pc		325529	1					
ANR	326537	Parameter	struct disassemble_info * info	5231:32:205902:205930	325529	1	True				
ANR	326538	ParameterType	struct disassemble_info *		325529	0					
ANR	326539	Identifier	info		325529	1					
ANR	326540	Parameter	long given	5231:63:205933:205942	325529	2	True				
ANR	326541	ParameterType	long		325529	0					
ANR	326542	Identifier	given		325529	1					
ANR	326543	CFGEntryNode	ENTRY		325529		True				
ANR	326544	CFGExitNode	EXIT		325529		True				
ANR	326545	Symbol	* arm_regnames		325529						
ANR	326546	Symbol	imm		325529						
ANR	326547	Symbol	info -> stream		325529						
ANR	326548	Symbol	thumb_opcodes		325529						
ANR	326549	Symbol	info -> fprintf_func		325529						
ANR	326550	Symbol	IFTHEN_COND		325529						
ANR	326551	Symbol	value_in_comment		325529						
ANR	326552	Symbol	* arm_conditional		325529						
ANR	326553	Symbol	stream		325529						
ANR	326554	Symbol	reg		325529						
ANR	326555	Symbol	tmp		325529						
ANR	326556	Symbol	bitend		325529						
ANR	326557	Symbol	* IFTHEN_COND		325529						
ANR	326558	Symbol	* ++ c		325529						
ANR	326559	Symbol	arm_regnames		325529						
ANR	326560	Symbol	info		325529						
ANR	326561	Symbol	ifthen_next_state		325529						
ANR	326562	Symbol	given		325529						
ANR	326563	Symbol	c		325529						
ANR	326564	Symbol	address		325529						
ANR	326565	Symbol	insn -> value		325529						
ANR	326566	Symbol	* c ++		325529						
ANR	326567	Symbol	* insn		325529						
ANR	326568	Symbol	started		325529						
ANR	326569	Symbol	domasklr		325529						
ANR	326570	Symbol	bitstart		325529						
ANR	326571	Symbol	* c		325529						
ANR	326572	Symbol	insn		325529						
ANR	326573	Symbol	pc		325529						
ANR	326574	Symbol	func		325529						
ANR	326575	Symbol	~3		325529						
ANR	326576	Symbol	ifthen_state		325529						
ANR	326577	Symbol	* given		325529						
ANR	326578	Symbol	* info		325529						
ANR	326579	Symbol	insn -> mask		325529						
ANR	326580	Symbol	domaskpc		325529						
ANR	326581	Symbol	arm_conditional		325529						
ANR	326582	Symbol	insn -> assembler		325529						
ANR	326583	Symbol	* reg		325529						
ANR	326584	Function	psr_name	5495:0:211619:212529							
ANR	326585	FunctionDef	psr_name (int regno)		326584	0					
ANR	326586	CompoundStatement		5497:0:211660:212529	326584	0					
ANR	326587	SwitchStatement	switch ( regno )		326584	0					
ANR	326588	Condition	regno	5498:10:211672:211676	326584	0	True				
ANR	326589	Identifier	regno		326584	0					
ANR	326590	CompoundStatement		3:4:22:22	326584	1					
ANR	326591	Label	case 0x0 :	5500:4:211689:211697	326584	0	True				
ANR	326592	ReturnStatement	"return ""APSR"" ;"	5500:14:211699:211712	326584	1	True				
ANR	326593	PrimaryExpression	"""APSR"""		326584	0					
ANR	326594	Label	case 0x1 :	5501:4:211718:211726	326584	2	True				
ANR	326595	ReturnStatement	"return ""IAPSR"" ;"	5501:14:211728:211742	326584	3	True				
ANR	326596	PrimaryExpression	"""IAPSR"""		326584	0					
ANR	326597	Label	case 0x2 :	5502:4:211748:211756	326584	4	True				
ANR	326598	ReturnStatement	"return ""EAPSR"" ;"	5502:14:211758:211772	326584	5	True				
ANR	326599	PrimaryExpression	"""EAPSR"""		326584	0					
ANR	326600	Label	case 0x3 :	5503:4:211778:211786	326584	6	True				
ANR	326601	ReturnStatement	"return ""PSR"" ;"	5503:14:211788:211800	326584	7	True				
ANR	326602	PrimaryExpression	"""PSR"""		326584	0					
ANR	326603	Label	case 0x5 :	5504:4:211806:211814	326584	8	True				
ANR	326604	ReturnStatement	"return ""IPSR"" ;"	5504:14:211816:211829	326584	9	True				
ANR	326605	PrimaryExpression	"""IPSR"""		326584	0					
ANR	326606	Label	case 0x6 :	5505:4:211835:211843	326584	10	True				
ANR	326607	ReturnStatement	"return ""EPSR"" ;"	5505:14:211845:211858	326584	11	True				
ANR	326608	PrimaryExpression	"""EPSR"""		326584	0					
ANR	326609	Label	case 0x7 :	5506:4:211864:211872	326584	12	True				
ANR	326610	ReturnStatement	"return ""IEPSR"" ;"	5506:14:211874:211888	326584	13	True				
ANR	326611	PrimaryExpression	"""IEPSR"""		326584	0					
ANR	326612	Label	case 0x8 :	5507:4:211894:211902	326584	14	True				
ANR	326613	ReturnStatement	"return ""MSP"" ;"	5507:14:211904:211916	326584	15	True				
ANR	326614	PrimaryExpression	"""MSP"""		326584	0					
ANR	326615	Label	case 0x9 :	5508:4:211922:211930	326584	16	True				
ANR	326616	ReturnStatement	"return ""PSP"" ;"	5508:14:211932:211944	326584	17	True				
ANR	326617	PrimaryExpression	"""PSP"""		326584	0					
ANR	326618	Label	case 0xa :	5509:4:211950:211958	326584	18	True				
ANR	326619	ReturnStatement	"return ""MSPLIM"" ;"	5509:14:211960:211975	326584	19	True				
ANR	326620	PrimaryExpression	"""MSPLIM"""		326584	0					
ANR	326621	Label	case 0xb :	5510:4:211981:211989	326584	20	True				
ANR	326622	ReturnStatement	"return ""PSPLIM"" ;"	5510:14:211991:212006	326584	21	True				
ANR	326623	PrimaryExpression	"""PSPLIM"""		326584	0					
ANR	326624	Label	case 0x10 :	5511:4:212012:212021	326584	22	True				
ANR	326625	ReturnStatement	"return ""PRIMASK"" ;"	5511:15:212023:212039	326584	23	True				
ANR	326626	PrimaryExpression	"""PRIMASK"""		326584	0					
ANR	326627	Label	case 0x11 :	5512:4:212045:212054	326584	24	True				
ANR	326628	ReturnStatement	"return ""BASEPRI"" ;"	5512:15:212056:212072	326584	25	True				
ANR	326629	PrimaryExpression	"""BASEPRI"""		326584	0					
ANR	326630	Label	case 0x12 :	5513:4:212078:212087	326584	26	True				
ANR	326631	ReturnStatement	"return ""BASEPRI_MAX"" ;"	5513:15:212089:212109	326584	27	True				
ANR	326632	PrimaryExpression	"""BASEPRI_MAX"""		326584	0					
ANR	326633	Label	case 0x13 :	5514:4:212115:212124	326584	28	True				
ANR	326634	ReturnStatement	"return ""FAULTMASK"" ;"	5514:15:212126:212144	326584	29	True				
ANR	326635	PrimaryExpression	"""FAULTMASK"""		326584	0					
ANR	326636	Label	case 0x14 :	5515:4:212150:212159	326584	30	True				
ANR	326637	ReturnStatement	"return ""CONTROL"" ;"	5515:15:212161:212177	326584	31	True				
ANR	326638	PrimaryExpression	"""CONTROL"""		326584	0					
ANR	326639	Label	case 0x88 :	5516:4:212183:212192	326584	32	True				
ANR	326640	ReturnStatement	"return ""MSP_NS"" ;"	5516:15:212194:212209	326584	33	True				
ANR	326641	PrimaryExpression	"""MSP_NS"""		326584	0					
ANR	326642	Label	case 0x89 :	5517:4:212215:212224	326584	34	True				
ANR	326643	ReturnStatement	"return ""PSP_NS"" ;"	5517:15:212226:212241	326584	35	True				
ANR	326644	PrimaryExpression	"""PSP_NS"""		326584	0					
ANR	326645	Label	case 0x8a :	5518:4:212247:212256	326584	36	True				
ANR	326646	ReturnStatement	"return ""MSPLIM_NS"" ;"	5518:15:212258:212276	326584	37	True				
ANR	326647	PrimaryExpression	"""MSPLIM_NS"""		326584	0					
ANR	326648	Label	case 0x8b :	5519:4:212282:212291	326584	38	True				
ANR	326649	ReturnStatement	"return ""PSPLIM_NS"" ;"	5519:15:212293:212311	326584	39	True				
ANR	326650	PrimaryExpression	"""PSPLIM_NS"""		326584	0					
ANR	326651	Label	case 0x90 :	5520:4:212317:212326	326584	40	True				
ANR	326652	ReturnStatement	"return ""PRIMASK_NS"" ;"	5520:15:212328:212347	326584	41	True				
ANR	326653	PrimaryExpression	"""PRIMASK_NS"""		326584	0					
ANR	326654	Label	case 0x91 :	5521:4:212353:212362	326584	42	True				
ANR	326655	ReturnStatement	"return ""BASEPRI_NS"" ;"	5521:15:212364:212383	326584	43	True				
ANR	326656	PrimaryExpression	"""BASEPRI_NS"""		326584	0					
ANR	326657	Label	case 0x93 :	5522:4:212389:212398	326584	44	True				
ANR	326658	ReturnStatement	"return ""FAULTMASK_NS"" ;"	5522:15:212400:212421	326584	45	True				
ANR	326659	PrimaryExpression	"""FAULTMASK_NS"""		326584	0					
ANR	326660	Label	case 0x94 :	5523:4:212427:212436	326584	46	True				
ANR	326661	ReturnStatement	"return ""CONTROL_NS"" ;"	5523:15:212438:212457	326584	47	True				
ANR	326662	PrimaryExpression	"""CONTROL_NS"""		326584	0					
ANR	326663	Label	case 0x98 :	5524:4:212463:212472	326584	48	True				
ANR	326664	ReturnStatement	"return ""SP_NS"" ;"	5524:15:212474:212488	326584	49	True				
ANR	326665	PrimaryExpression	"""SP_NS"""		326584	0					
ANR	326666	Label	default :	5525:4:212494:212501	326584	50	True				
ANR	326667	Identifier	default		326584	0					
ANR	326668	ReturnStatement	"return ""<unknown>"" ;"	5525:13:212503:212521	326584	51	True				
ANR	326669	PrimaryExpression	"""<unknown>"""		326584	0					
ANR	326670	ReturnType	static const char *		326584	1					
ANR	326671	Identifier	psr_name		326584	2					
ANR	326672	ParameterList	int regno		326584	3					
ANR	326673	Parameter	int regno	5496:10:211649:211657	326584	0	True				
ANR	326674	ParameterType	int		326584	0					
ANR	326675	Identifier	regno		326584	1					
ANR	326676	CFGEntryNode	ENTRY		326584		True				
ANR	326677	CFGExitNode	EXIT		326584		True				
ANR	326678	Symbol	regno		326584						
ANR	326679	Function	print_insn_thumb32	5531:0:212600:225986							
ANR	326680	FunctionDef	"print_insn_thumb32 (bfd_vma pc , struct disassemble_info * info , long given)"		326679	0					
ANR	326681	CompoundStatement		5533:0:212687:225986	326679	0					
ANR	326682	IdentifierDeclStatement	const struct opcode32 * insn ;	5534:2:212691:212718	326679	0	True				
ANR	326683	IdentifierDecl	* insn		326679	0					
ANR	326684	IdentifierDeclType	const struct opcode32 *		326679	0					
ANR	326685	Identifier	insn		326679	1					
ANR	326686	IdentifierDeclStatement	void * stream = info -> stream ;	5535:2:212722:212749	326679	1	True				
ANR	326687	IdentifierDecl	* stream = info -> stream		326679	0					
ANR	326688	IdentifierDeclType	void *		326679	0					
ANR	326689	Identifier	stream		326679	1					
ANR	326690	AssignmentExpression	* stream = info -> stream		326679	2		=			
ANR	326691	Identifier	stream		326679	0					
ANR	326692	PtrMemberAccess	info -> stream		326679	1					
ANR	326693	Identifier	info		326679	0					
ANR	326694	Identifier	stream		326679	1					
ANR	326695	IdentifierDeclStatement	fprintf_ftype func = info -> fprintf_func ;	5536:2:212753:212792	326679	2	True				
ANR	326696	IdentifierDecl	func = info -> fprintf_func		326679	0					
ANR	326697	IdentifierDeclType	fprintf_ftype		326679	0					
ANR	326698	Identifier	func		326679	1					
ANR	326699	AssignmentExpression	func = info -> fprintf_func		326679	2		=			
ANR	326700	Identifier	func		326679	0					
ANR	326701	PtrMemberAccess	info -> fprintf_func		326679	1					
ANR	326702	Identifier	info		326679	0					
ANR	326703	Identifier	fprintf_func		326679	1					
ANR	326704	IfStatement	"if ( print_insn_coprocessor ( pc , info , given , TRUE ) )"		326679	3					
ANR	326705	Condition	"print_insn_coprocessor ( pc , info , given , TRUE )"	5538:6:212801:212846	326679	0	True				
ANR	326706	CallExpression	"print_insn_coprocessor ( pc , info , given , TRUE )"		326679	0					
ANR	326707	Callee	print_insn_coprocessor		326679	0					
ANR	326708	Identifier	print_insn_coprocessor		326679	0					
ANR	326709	ArgumentList	pc		326679	1					
ANR	326710	Argument	pc		326679	0					
ANR	326711	Identifier	pc		326679	0					
ANR	326712	Argument	info		326679	1					
ANR	326713	Identifier	info		326679	0					
ANR	326714	Argument	given		326679	2					
ANR	326715	Identifier	given		326679	0					
ANR	326716	Argument	TRUE		326679	3					
ANR	326717	Identifier	TRUE		326679	0					
ANR	326718	CompoundStatement		6:54:161:161	326679	1					
ANR	326719	ReturnStatement	return ;	5539:3:212854:212860	326679	0	True				
ANR	326720	IfStatement	"if ( print_insn_neon ( info , given , TRUE ) )"		326679	4					
ANR	326721	Condition	"print_insn_neon ( info , given , TRUE )"	5542:6:212873:212907	326679	0	True				
ANR	326722	CallExpression	"print_insn_neon ( info , given , TRUE )"		326679	0					
ANR	326723	Callee	print_insn_neon		326679	0					
ANR	326724	Identifier	print_insn_neon		326679	0					
ANR	326725	ArgumentList	info		326679	1					
ANR	326726	Argument	info		326679	0					
ANR	326727	Identifier	info		326679	0					
ANR	326728	Argument	given		326679	1					
ANR	326729	Identifier	given		326679	0					
ANR	326730	Argument	TRUE		326679	2					
ANR	326731	Identifier	TRUE		326679	0					
ANR	326732	CompoundStatement		10:43:222:222	326679	1					
ANR	326733	ReturnStatement	return ;	5543:3:212915:212921	326679	0	True				
ANR	326734	ForStatement	for ( insn = thumb32_opcodes ; insn -> assembler ; insn ++ )		326679	5					
ANR	326735	ForInit	insn = thumb32_opcodes ;	5546:7:212935:212957	326679	0	True				
ANR	326736	AssignmentExpression	insn = thumb32_opcodes		326679	0		=			
ANR	326737	Identifier	insn		326679	0					
ANR	326738	Identifier	thumb32_opcodes		326679	1					
ANR	326739	Condition	insn -> assembler	5546:31:212959:212973	326679	1	True				
ANR	326740	PtrMemberAccess	insn -> assembler		326679	0					
ANR	326741	Identifier	insn		326679	0					
ANR	326742	Identifier	assembler		326679	1					
ANR	326743	PostIncDecOperationExpression	insn ++	5546:48:212976:212981	326679	2	True				
ANR	326744	Identifier	insn		326679	0					
ANR	326745	IncDec	++		326679	1					
ANR	326746	CompoundStatement		14:56:296:296	326679	3					
ANR	326747	IfStatement	if ( ( given & insn -> mask ) == insn -> value )		326679	0					
ANR	326748	Condition	( given & insn -> mask ) == insn -> value	5547:7:212993:213027	326679	0	True				
ANR	326749	EqualityExpression	( given & insn -> mask ) == insn -> value		326679	0		==			
ANR	326750	BitAndExpression	given & insn -> mask		326679	0		&			
ANR	326751	Identifier	given		326679	0					
ANR	326752	PtrMemberAccess	insn -> mask		326679	1					
ANR	326753	Identifier	insn		326679	0					
ANR	326754	Identifier	mask		326679	1					
ANR	326755	PtrMemberAccess	insn -> value		326679	1					
ANR	326756	Identifier	insn		326679	0					
ANR	326757	Identifier	value		326679	1					
ANR	326758	CompoundStatement		18:4:431:462	326679	1					
ANR	326759	IdentifierDeclStatement	bfd_boolean is_unpredictable = FALSE ;	5548:4:213036:213072	326679	0	True				
ANR	326760	IdentifierDecl	is_unpredictable = FALSE		326679	0					
ANR	326761	IdentifierDeclType	bfd_boolean		326679	0					
ANR	326762	Identifier	is_unpredictable		326679	1					
ANR	326763	AssignmentExpression	is_unpredictable = FALSE		326679	2		=			
ANR	326764	Identifier	FALSE		326679	0					
ANR	326765	Identifier	FALSE		326679	1					
ANR	326766	IdentifierDeclStatement	const char * c = insn -> assembler ;	5550:4:213119:213150	326679	1	True				
ANR	326767	IdentifierDecl	* c = insn -> assembler		326679	0					
ANR	326768	IdentifierDeclType	const char *		326679	0					
ANR	326769	Identifier	c		326679	1					
ANR	326770	AssignmentExpression	* c = insn -> assembler		326679	2		=			
ANR	326771	Identifier	c		326679	0					
ANR	326772	PtrMemberAccess	insn -> assembler		326679	1					
ANR	326773	Identifier	insn		326679	0					
ANR	326774	Identifier	assembler		326679	1					
ANR	326775	ForStatement	for ( ; * c ; c ++ )		326679	2					
ANR	326776	Condition	* c	5552:11:213164:213165	326679	0	True				
ANR	326777	UnaryOperationExpression	* c		326679	0					
ANR	326778	UnaryOperator	*		326679	0					
ANR	326779	Identifier	c		326679	1					
ANR	326780	PostIncDecOperationExpression	c ++	5552:15:213168:213170	326679	1	True				
ANR	326781	Identifier	c		326679	0					
ANR	326782	IncDec	++		326679	1					
ANR	326783	CompoundStatement		20:20:485:485	326679	2					
ANR	326784	IfStatement	if ( * c != '%' )		326679	0					
ANR	326785	Condition	* c != '%'	5553:9:213184:213192	326679	0	True				
ANR	326786	EqualityExpression	* c != '%'		326679	0		!=			
ANR	326787	UnaryOperationExpression	* c		326679	0					
ANR	326788	UnaryOperator	*		326679	0					
ANR	326789	Identifier	c		326679	1					
ANR	326790	PrimaryExpression	'%'		326679	1					
ANR	326791	CompoundStatement		21:20:507:507	326679	1					
ANR	326792	ExpressionStatement	"func ( stream , ""%c"" , * c )"	5554:6:213203:213226	326679	0	True				
ANR	326793	CallExpression	"func ( stream , ""%c"" , * c )"		326679	0					
ANR	326794	Callee	func		326679	0					
ANR	326795	Identifier	func		326679	0					
ANR	326796	ArgumentList	stream		326679	1					
ANR	326797	Argument	stream		326679	0					
ANR	326798	Identifier	stream		326679	0					
ANR	326799	Argument	"""%c"""		326679	1					
ANR	326800	PrimaryExpression	"""%c"""		326679	0					
ANR	326801	Argument	* c		326679	2					
ANR	326802	UnaryOperationExpression	* c		326679	0					
ANR	326803	UnaryOperator	*		326679	0					
ANR	326804	Identifier	c		326679	1					
ANR	326805	ContinueStatement	continue ;	5555:6:213234:213242	326679	1	True				
ANR	326806	SwitchStatement	switch ( * ++ c )		326679	1					
ANR	326807	Condition	* ++ c	5558:13:213265:213268	326679	0	True				
ANR	326808	UnaryOperationExpression	* ++ c		326679	0					
ANR	326809	UnaryOperator	*		326679	0					
ANR	326810	UnaryExpression	++ c		326679	1					
ANR	326811	IncDec	++		326679	0					
ANR	326812	Identifier	c		326679	1					
ANR	326813	CompoundStatement		26:19:583:583	326679	1					
ANR	326814	Label	case '%' :	5559:5:213278:213286	326679	0	True				
ANR	326815	ExpressionStatement	"func ( stream , ""%%"" )"	5560:6:213294:213313	326679	1	True				
ANR	326816	CallExpression	"func ( stream , ""%%"" )"		326679	0					
ANR	326817	Callee	func		326679	0					
ANR	326818	Identifier	func		326679	0					
ANR	326819	ArgumentList	stream		326679	1					
ANR	326820	Argument	stream		326679	0					
ANR	326821	Identifier	stream		326679	0					
ANR	326822	Argument	"""%%"""		326679	1					
ANR	326823	PrimaryExpression	"""%%"""		326679	0					
ANR	326824	BreakStatement	break ;	5561:6:213321:213326	326679	2	True				
ANR	326825	Label	case 'c' :	5563:5:213334:213342	326679	3	True				
ANR	326826	IfStatement	if ( ifthen_state )		326679	4					
ANR	326827	Condition	ifthen_state	5564:10:213354:213365	326679	0	True				
ANR	326828	Identifier	ifthen_state		326679	0					
ANR	326829	CompoundStatement		32:24:680:680	326679	1					
ANR	326830	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"	5565:7:213377:213426	326679	0	True				
ANR	326831	CallExpression	"func ( stream , ""%s"" , arm_conditional [ IFTHEN_COND ] )"		326679	0					
ANR	326832	Callee	func		326679	0					
ANR	326833	Identifier	func		326679	0					
ANR	326834	ArgumentList	stream		326679	1					
ANR	326835	Argument	stream		326679	0					
ANR	326836	Identifier	stream		326679	0					
ANR	326837	Argument	"""%s"""		326679	1					
ANR	326838	PrimaryExpression	"""%s"""		326679	0					
ANR	326839	Argument	arm_conditional [ IFTHEN_COND ]		326679	2					
ANR	326840	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		326679	0					
ANR	326841	Identifier	arm_conditional		326679	0					
ANR	326842	Identifier	IFTHEN_COND		326679	1					
ANR	326843	BreakStatement	break ;	5567:6:213442:213447	326679	5	True				
ANR	326844	Label	case 'x' :	5569:5:213455:213463	326679	6	True				
ANR	326845	IfStatement	if ( ifthen_next_state )		326679	7					
ANR	326846	Condition	ifthen_next_state	5570:10:213475:213491	326679	0	True				
ANR	326847	Identifier	ifthen_next_state		326679	0					
ANR	326848	CompoundStatement		38:29:806:806	326679	1					
ANR	326849	ExpressionStatement	"func ( stream , "" ; unpredictable branch in IT block\\n"" )"	5571:7:213503:213557	326679	0	True				
ANR	326850	CallExpression	"func ( stream , "" ; unpredictable branch in IT block\\n"" )"		326679	0					
ANR	326851	Callee	func		326679	0					
ANR	326852	Identifier	func		326679	0					
ANR	326853	ArgumentList	stream		326679	1					
ANR	326854	Argument	stream		326679	0					
ANR	326855	Identifier	stream		326679	0					
ANR	326856	Argument	""" ; unpredictable branch in IT block\\n"""		326679	1					
ANR	326857	PrimaryExpression	""" ; unpredictable branch in IT block\\n"""		326679	0					
ANR	326858	BreakStatement	break ;	5573:6:213573:213578	326679	8	True				
ANR	326859	Label	case 'X' :	5575:5:213586:213594	326679	9	True				
ANR	326860	IfStatement	if ( ifthen_state )		326679	10					
ANR	326861	Condition	ifthen_state	5576:10:213606:213617	326679	0	True				
ANR	326862	Identifier	ifthen_state		326679	0					
ANR	326863	CompoundStatement		44:24:932:932	326679	1					
ANR	326864	ExpressionStatement	"func ( stream , "" ; unpredictable <IT:%s>"" , arm_conditional [ IFTHEN_COND ] )"	5577:7:213629:213708	326679	0	True				
ANR	326865	CallExpression	"func ( stream , "" ; unpredictable <IT:%s>"" , arm_conditional [ IFTHEN_COND ] )"		326679	0					
ANR	326866	Callee	func		326679	0					
ANR	326867	Identifier	func		326679	0					
ANR	326868	ArgumentList	stream		326679	1					
ANR	326869	Argument	stream		326679	0					
ANR	326870	Identifier	stream		326679	0					
ANR	326871	Argument	""" ; unpredictable <IT:%s>"""		326679	1					
ANR	326872	PrimaryExpression	""" ; unpredictable <IT:%s>"""		326679	0					
ANR	326873	Argument	arm_conditional [ IFTHEN_COND ]		326679	2					
ANR	326874	ArrayIndexing	arm_conditional [ IFTHEN_COND ]		326679	0					
ANR	326875	Identifier	arm_conditional		326679	0					
ANR	326876	Identifier	IFTHEN_COND		326679	1					
ANR	326877	BreakStatement	break ;	5580:6:213724:213729	326679	11	True				
ANR	326878	Label	case 'I' :	5582:5:213737:213745	326679	12	True				
ANR	326879	CompoundStatement		51:6:1067:1089	326679	13					
ANR	326880	IdentifierDeclStatement	unsigned int imm12 = 0 ;	5583:6:213755:213777	326679	0	True				
ANR	326881	IdentifierDecl	imm12 = 0		326679	0					
ANR	326882	IdentifierDeclType	unsigned int		326679	0					
ANR	326883	Identifier	imm12		326679	1					
ANR	326884	AssignmentExpression	imm12 = 0		326679	2		=			
ANR	326885	Identifier	imm12		326679	0					
ANR	326886	PrimaryExpression	0		326679	1					
ANR	326887	ExpressionStatement	imm12 |= ( given & 0x000000ffu )	5585:6:213786:213816	326679	1	True				
ANR	326888	AssignmentExpression	imm12 |= ( given & 0x000000ffu )		326679	0		|=			
ANR	326889	Identifier	imm12		326679	0					
ANR	326890	BitAndExpression	given & 0x000000ffu		326679	1		&			
ANR	326891	Identifier	given		326679	0					
ANR	326892	PrimaryExpression	0x000000ffu		326679	1					
ANR	326893	ExpressionStatement	imm12 |= ( given & 0x00007000u ) >> 4	5586:6:213824:213859	326679	2	True				
ANR	326894	AssignmentExpression	imm12 |= ( given & 0x00007000u ) >> 4		326679	0		|=			
ANR	326895	Identifier	imm12		326679	0					
ANR	326896	ShiftExpression	( given & 0x00007000u ) >> 4		326679	1		>>			
ANR	326897	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	326898	Identifier	given		326679	0					
ANR	326899	PrimaryExpression	0x00007000u		326679	1					
ANR	326900	PrimaryExpression	4		326679	1					
ANR	326901	ExpressionStatement	imm12 |= ( given & 0x04000000u ) >> 15	5587:6:213867:213903	326679	3	True				
ANR	326902	AssignmentExpression	imm12 |= ( given & 0x04000000u ) >> 15		326679	0		|=			
ANR	326903	Identifier	imm12		326679	0					
ANR	326904	ShiftExpression	( given & 0x04000000u ) >> 15		326679	1		>>			
ANR	326905	BitAndExpression	given & 0x04000000u		326679	0		&			
ANR	326906	Identifier	given		326679	0					
ANR	326907	PrimaryExpression	0x04000000u		326679	1					
ANR	326908	PrimaryExpression	15		326679	1					
ANR	326909	ExpressionStatement	"func ( stream , ""%u"" , imm12 )"	5588:6:213911:213937	326679	4	True				
ANR	326910	CallExpression	"func ( stream , ""%u"" , imm12 )"		326679	0					
ANR	326911	Callee	func		326679	0					
ANR	326912	Identifier	func		326679	0					
ANR	326913	ArgumentList	stream		326679	1					
ANR	326914	Argument	stream		326679	0					
ANR	326915	Identifier	stream		326679	0					
ANR	326916	Argument	"""%u"""		326679	1					
ANR	326917	PrimaryExpression	"""%u"""		326679	0					
ANR	326918	Argument	imm12		326679	2					
ANR	326919	Identifier	imm12		326679	0					
ANR	326920	BreakStatement	break ;	5590:7:213980:213985	326679	14	True				
ANR	326921	Label	case 'M' :	5592:5:213993:214001	326679	15	True				
ANR	326922	CompoundStatement		61:6:1323:1360	326679	16					
ANR	326923	IdentifierDeclStatement	"unsigned int bits = 0 , imm , imm8 , mod ;"	5593:6:214011:214048	326679	0	True				
ANR	326924	IdentifierDecl	bits = 0		326679	0					
ANR	326925	IdentifierDeclType	unsigned int		326679	0					
ANR	326926	Identifier	bits		326679	1					
ANR	326927	AssignmentExpression	bits = 0		326679	2		=			
ANR	326928	Identifier	bits		326679	0					
ANR	326929	PrimaryExpression	0		326679	1					
ANR	326930	IdentifierDecl	imm		326679	1					
ANR	326931	IdentifierDeclType	unsigned int		326679	0					
ANR	326932	Identifier	imm		326679	1					
ANR	326933	IdentifierDecl	imm8		326679	2					
ANR	326934	IdentifierDeclType	unsigned int		326679	0					
ANR	326935	Identifier	imm8		326679	1					
ANR	326936	IdentifierDecl	mod		326679	3					
ANR	326937	IdentifierDeclType	unsigned int		326679	0					
ANR	326938	Identifier	mod		326679	1					
ANR	326939	ExpressionStatement	bits |= ( given & 0x000000ffu )	5595:6:214057:214086	326679	1	True				
ANR	326940	AssignmentExpression	bits |= ( given & 0x000000ffu )		326679	0		|=			
ANR	326941	Identifier	bits		326679	0					
ANR	326942	BitAndExpression	given & 0x000000ffu		326679	1		&			
ANR	326943	Identifier	given		326679	0					
ANR	326944	PrimaryExpression	0x000000ffu		326679	1					
ANR	326945	ExpressionStatement	bits |= ( given & 0x00007000u ) >> 4	5596:6:214094:214128	326679	2	True				
ANR	326946	AssignmentExpression	bits |= ( given & 0x00007000u ) >> 4		326679	0		|=			
ANR	326947	Identifier	bits		326679	0					
ANR	326948	ShiftExpression	( given & 0x00007000u ) >> 4		326679	1		>>			
ANR	326949	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	326950	Identifier	given		326679	0					
ANR	326951	PrimaryExpression	0x00007000u		326679	1					
ANR	326952	PrimaryExpression	4		326679	1					
ANR	326953	ExpressionStatement	bits |= ( given & 0x04000000u ) >> 15	5597:6:214136:214171	326679	3	True				
ANR	326954	AssignmentExpression	bits |= ( given & 0x04000000u ) >> 15		326679	0		|=			
ANR	326955	Identifier	bits		326679	0					
ANR	326956	ShiftExpression	( given & 0x04000000u ) >> 15		326679	1		>>			
ANR	326957	BitAndExpression	given & 0x04000000u		326679	0		&			
ANR	326958	Identifier	given		326679	0					
ANR	326959	PrimaryExpression	0x04000000u		326679	1					
ANR	326960	PrimaryExpression	15		326679	1					
ANR	326961	ExpressionStatement	imm8 = ( bits & 0x0ff )	5598:6:214179:214200	326679	4	True				
ANR	326962	AssignmentExpression	imm8 = ( bits & 0x0ff )		326679	0		=			
ANR	326963	Identifier	imm8		326679	0					
ANR	326964	BitAndExpression	bits & 0x0ff		326679	1		&			
ANR	326965	Identifier	bits		326679	0					
ANR	326966	PrimaryExpression	0x0ff		326679	1					
ANR	326967	ExpressionStatement	mod = ( bits & 0xf00 ) >> 8	5599:6:214208:214233	326679	5	True				
ANR	326968	AssignmentExpression	mod = ( bits & 0xf00 ) >> 8		326679	0		=			
ANR	326969	Identifier	mod		326679	0					
ANR	326970	ShiftExpression	( bits & 0xf00 ) >> 8		326679	1		>>			
ANR	326971	BitAndExpression	bits & 0xf00		326679	0		&			
ANR	326972	Identifier	bits		326679	0					
ANR	326973	PrimaryExpression	0xf00		326679	1					
ANR	326974	PrimaryExpression	8		326679	1					
ANR	326975	SwitchStatement	switch ( mod )		326679	6					
ANR	326976	Condition	mod	5600:14:214249:214251	326679	0	True				
ANR	326977	Identifier	mod		326679	0					
ANR	326978	CompoundStatement		68:19:1566:1566	326679	1					
ANR	326979	Label	case 0 :	5601:6:214262:214268	326679	0	True				
ANR	326980	ExpressionStatement	imm = imm8	5601:14:214270:214280	326679	1	True				
ANR	326981	AssignmentExpression	imm = imm8		326679	0		=			
ANR	326982	Identifier	imm		326679	0					
ANR	326983	Identifier	imm8		326679	1					
ANR	326984	BreakStatement	break ;	5601:26:214282:214287	326679	2	True				
ANR	326985	Label	case 1 :	5602:6:214295:214301	326679	3	True				
ANR	326986	ExpressionStatement	imm = ( ( imm8 << 16 ) | imm8 )	5602:14:214303:214330	326679	4	True				
ANR	326987	AssignmentExpression	imm = ( ( imm8 << 16 ) | imm8 )		326679	0		=			
ANR	326988	Identifier	imm		326679	0					
ANR	326989	InclusiveOrExpression	( imm8 << 16 ) | imm8		326679	1		|			
ANR	326990	ShiftExpression	imm8 << 16		326679	0		<<			
ANR	326991	Identifier	imm8		326679	0					
ANR	326992	PrimaryExpression	16		326679	1					
ANR	326993	Identifier	imm8		326679	1					
ANR	326994	BreakStatement	break ;	5602:43:214332:214337	326679	5	True				
ANR	326995	Label	case 2 :	5603:6:214345:214351	326679	6	True				
ANR	326996	ExpressionStatement	imm = ( ( imm8 << 24 ) | ( imm8 << 8 ) )	5603:14:214353:214387	326679	7	True				
ANR	326997	AssignmentExpression	imm = ( ( imm8 << 24 ) | ( imm8 << 8 ) )		326679	0		=			
ANR	326998	Identifier	imm		326679	0					
ANR	326999	InclusiveOrExpression	( imm8 << 24 ) | ( imm8 << 8 )		326679	1		|			
ANR	327000	ShiftExpression	imm8 << 24		326679	0		<<			
ANR	327001	Identifier	imm8		326679	0					
ANR	327002	PrimaryExpression	24		326679	1					
ANR	327003	ShiftExpression	imm8 << 8		326679	1		<<			
ANR	327004	Identifier	imm8		326679	0					
ANR	327005	PrimaryExpression	8		326679	1					
ANR	327006	BreakStatement	break ;	5603:50:214389:214394	326679	8	True				
ANR	327007	Label	case 3 :	5604:6:214402:214408	326679	9	True				
ANR	327008	ExpressionStatement	imm = ( ( imm8 << 24 ) | ( imm8 << 16 ) | ( imm8 << 8 ) | imm8 )	5604:14:214410:214466	326679	10	True				
ANR	327009	AssignmentExpression	imm = ( ( imm8 << 24 ) | ( imm8 << 16 ) | ( imm8 << 8 ) | imm8 )		326679	0		=			
ANR	327010	Identifier	imm		326679	0					
ANR	327011	InclusiveOrExpression	( imm8 << 24 ) | ( imm8 << 16 ) | ( imm8 << 8 ) | imm8		326679	1		|			
ANR	327012	ShiftExpression	imm8 << 24		326679	0		<<			
ANR	327013	Identifier	imm8		326679	0					
ANR	327014	PrimaryExpression	24		326679	1					
ANR	327015	InclusiveOrExpression	( imm8 << 16 ) | ( imm8 << 8 ) | imm8		326679	1		|			
ANR	327016	ShiftExpression	imm8 << 16		326679	0		<<			
ANR	327017	Identifier	imm8		326679	0					
ANR	327018	PrimaryExpression	16		326679	1					
ANR	327019	InclusiveOrExpression	( imm8 << 8 ) | imm8		326679	1		|			
ANR	327020	ShiftExpression	imm8 << 8		326679	0		<<			
ANR	327021	Identifier	imm8		326679	0					
ANR	327022	PrimaryExpression	8		326679	1					
ANR	327023	Identifier	imm8		326679	1					
ANR	327024	BreakStatement	break ;	5604:72:214468:214473	326679	11	True				
ANR	327025	Label	default :	5605:6:214481:214488	326679	12	True				
ANR	327026	Identifier	default		326679	0					
ANR	327027	ExpressionStatement	mod = ( bits & 0xf80 ) >> 7	5606:7:214497:214522	326679	13	True				
ANR	327028	AssignmentExpression	mod = ( bits & 0xf80 ) >> 7		326679	0		=			
ANR	327029	Identifier	mod		326679	0					
ANR	327030	ShiftExpression	( bits & 0xf80 ) >> 7		326679	1		>>			
ANR	327031	BitAndExpression	bits & 0xf80		326679	0		&			
ANR	327032	Identifier	bits		326679	0					
ANR	327033	PrimaryExpression	0xf80		326679	1					
ANR	327034	PrimaryExpression	7		326679	1					
ANR	327035	ExpressionStatement	imm8 = ( bits & 0x07f ) | 0x80	5607:7:214531:214559	326679	14	True				
ANR	327036	AssignmentExpression	imm8 = ( bits & 0x07f ) | 0x80		326679	0		=			
ANR	327037	Identifier	imm8		326679	0					
ANR	327038	InclusiveOrExpression	( bits & 0x07f ) | 0x80		326679	1		|			
ANR	327039	BitAndExpression	bits & 0x07f		326679	0		&			
ANR	327040	Identifier	bits		326679	0					
ANR	327041	PrimaryExpression	0x07f		326679	1					
ANR	327042	PrimaryExpression	0x80		326679	1					
ANR	327043	ExpressionStatement	imm = ( ( ( imm8 << ( 32 - mod ) ) | ( imm8 >> mod ) ) & 0xffffffff )	5608:7:214568:214627	326679	15	True				
ANR	327044	AssignmentExpression	imm = ( ( ( imm8 << ( 32 - mod ) ) | ( imm8 >> mod ) ) & 0xffffffff )		326679	0		=			
ANR	327045	Identifier	imm		326679	0					
ANR	327046	BitAndExpression	( ( imm8 << ( 32 - mod ) ) | ( imm8 >> mod ) ) & 0xffffffff		326679	1		&			
ANR	327047	InclusiveOrExpression	( imm8 << ( 32 - mod ) ) | ( imm8 >> mod )		326679	0		|			
ANR	327048	ShiftExpression	imm8 << ( 32 - mod )		326679	0		<<			
ANR	327049	Identifier	imm8		326679	0					
ANR	327050	AdditiveExpression	32 - mod		326679	1		-			
ANR	327051	PrimaryExpression	32		326679	0					
ANR	327052	Identifier	mod		326679	1					
ANR	327053	ShiftExpression	imm8 >> mod		326679	1		>>			
ANR	327054	Identifier	imm8		326679	0					
ANR	327055	Identifier	mod		326679	1					
ANR	327056	PrimaryExpression	0xffffffff		326679	1					
ANR	327057	ExpressionStatement	"func ( stream , ""%u"" , imm )"	5610:6:214643:214667	326679	7	True				
ANR	327058	CallExpression	"func ( stream , ""%u"" , imm )"		326679	0					
ANR	327059	Callee	func		326679	0					
ANR	327060	Identifier	func		326679	0					
ANR	327061	ArgumentList	stream		326679	1					
ANR	327062	Argument	stream		326679	0					
ANR	327063	Identifier	stream		326679	0					
ANR	327064	Argument	"""%u"""		326679	1					
ANR	327065	PrimaryExpression	"""%u"""		326679	0					
ANR	327066	Argument	imm		326679	2					
ANR	327067	Identifier	imm		326679	0					
ANR	327068	BreakStatement	break ;	5612:7:214708:214713	326679	17	True				
ANR	327069	Label	case 'J' :	5614:5:214721:214729	326679	18	True				
ANR	327070	CompoundStatement		83:6:2051:2071	326679	19					
ANR	327071	IdentifierDeclStatement	unsigned int imm = 0 ;	5615:6:214739:214759	326679	0	True				
ANR	327072	IdentifierDecl	imm = 0		326679	0					
ANR	327073	IdentifierDeclType	unsigned int		326679	0					
ANR	327074	Identifier	imm		326679	1					
ANR	327075	AssignmentExpression	imm = 0		326679	2		=			
ANR	327076	Identifier	imm		326679	0					
ANR	327077	PrimaryExpression	0		326679	1					
ANR	327078	ExpressionStatement	imm |= ( given & 0x000000ffu )	5617:6:214768:214796	326679	1	True				
ANR	327079	AssignmentExpression	imm |= ( given & 0x000000ffu )		326679	0		|=			
ANR	327080	Identifier	imm		326679	0					
ANR	327081	BitAndExpression	given & 0x000000ffu		326679	1		&			
ANR	327082	Identifier	given		326679	0					
ANR	327083	PrimaryExpression	0x000000ffu		326679	1					
ANR	327084	ExpressionStatement	imm |= ( given & 0x00007000u ) >> 4	5618:6:214804:214837	326679	2	True				
ANR	327085	AssignmentExpression	imm |= ( given & 0x00007000u ) >> 4		326679	0		|=			
ANR	327086	Identifier	imm		326679	0					
ANR	327087	ShiftExpression	( given & 0x00007000u ) >> 4		326679	1		>>			
ANR	327088	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	327089	Identifier	given		326679	0					
ANR	327090	PrimaryExpression	0x00007000u		326679	1					
ANR	327091	PrimaryExpression	4		326679	1					
ANR	327092	ExpressionStatement	imm |= ( given & 0x04000000u ) >> 15	5619:6:214845:214879	326679	3	True				
ANR	327093	AssignmentExpression	imm |= ( given & 0x04000000u ) >> 15		326679	0		|=			
ANR	327094	Identifier	imm		326679	0					
ANR	327095	ShiftExpression	( given & 0x04000000u ) >> 15		326679	1		>>			
ANR	327096	BitAndExpression	given & 0x04000000u		326679	0		&			
ANR	327097	Identifier	given		326679	0					
ANR	327098	PrimaryExpression	0x04000000u		326679	1					
ANR	327099	PrimaryExpression	15		326679	1					
ANR	327100	ExpressionStatement	imm |= ( given & 0x000f0000u ) >> 4	5620:6:214887:214920	326679	4	True				
ANR	327101	AssignmentExpression	imm |= ( given & 0x000f0000u ) >> 4		326679	0		|=			
ANR	327102	Identifier	imm		326679	0					
ANR	327103	ShiftExpression	( given & 0x000f0000u ) >> 4		326679	1		>>			
ANR	327104	BitAndExpression	given & 0x000f0000u		326679	0		&			
ANR	327105	Identifier	given		326679	0					
ANR	327106	PrimaryExpression	0x000f0000u		326679	1					
ANR	327107	PrimaryExpression	4		326679	1					
ANR	327108	ExpressionStatement	"func ( stream , ""%u"" , imm )"	5621:6:214928:214952	326679	5	True				
ANR	327109	CallExpression	"func ( stream , ""%u"" , imm )"		326679	0					
ANR	327110	Callee	func		326679	0					
ANR	327111	Identifier	func		326679	0					
ANR	327112	ArgumentList	stream		326679	1					
ANR	327113	Argument	stream		326679	0					
ANR	327114	Identifier	stream		326679	0					
ANR	327115	Argument	"""%u"""		326679	1					
ANR	327116	PrimaryExpression	"""%u"""		326679	0					
ANR	327117	Argument	imm		326679	2					
ANR	327118	Identifier	imm		326679	0					
ANR	327119	BreakStatement	break ;	5623:7:214993:214998	326679	20	True				
ANR	327120	Label	case 'K' :	5625:5:215006:215014	326679	21	True				
ANR	327121	CompoundStatement		94:6:2336:2356	326679	22					
ANR	327122	IdentifierDeclStatement	unsigned int imm = 0 ;	5626:6:215024:215044	326679	0	True				
ANR	327123	IdentifierDecl	imm = 0		326679	0					
ANR	327124	IdentifierDeclType	unsigned int		326679	0					
ANR	327125	Identifier	imm		326679	1					
ANR	327126	AssignmentExpression	imm = 0		326679	2		=			
ANR	327127	Identifier	imm		326679	0					
ANR	327128	PrimaryExpression	0		326679	1					
ANR	327129	ExpressionStatement	imm |= ( given & 0x000f0000u ) >> 16	5628:6:215053:215087	326679	1	True				
ANR	327130	AssignmentExpression	imm |= ( given & 0x000f0000u ) >> 16		326679	0		|=			
ANR	327131	Identifier	imm		326679	0					
ANR	327132	ShiftExpression	( given & 0x000f0000u ) >> 16		326679	1		>>			
ANR	327133	BitAndExpression	given & 0x000f0000u		326679	0		&			
ANR	327134	Identifier	given		326679	0					
ANR	327135	PrimaryExpression	0x000f0000u		326679	1					
ANR	327136	PrimaryExpression	16		326679	1					
ANR	327137	ExpressionStatement	imm |= ( given & 0x00000ff0u ) >> 0	5629:6:215095:215128	326679	2	True				
ANR	327138	AssignmentExpression	imm |= ( given & 0x00000ff0u ) >> 0		326679	0		|=			
ANR	327139	Identifier	imm		326679	0					
ANR	327140	ShiftExpression	( given & 0x00000ff0u ) >> 0		326679	1		>>			
ANR	327141	BitAndExpression	given & 0x00000ff0u		326679	0		&			
ANR	327142	Identifier	given		326679	0					
ANR	327143	PrimaryExpression	0x00000ff0u		326679	1					
ANR	327144	PrimaryExpression	0		326679	1					
ANR	327145	ExpressionStatement	imm |= ( given & 0x0000000fu ) << 12	5630:6:215136:215170	326679	3	True				
ANR	327146	AssignmentExpression	imm |= ( given & 0x0000000fu ) << 12		326679	0		|=			
ANR	327147	Identifier	imm		326679	0					
ANR	327148	ShiftExpression	( given & 0x0000000fu ) << 12		326679	1		<<			
ANR	327149	BitAndExpression	given & 0x0000000fu		326679	0		&			
ANR	327150	Identifier	given		326679	0					
ANR	327151	PrimaryExpression	0x0000000fu		326679	1					
ANR	327152	PrimaryExpression	12		326679	1					
ANR	327153	ExpressionStatement	"func ( stream , ""%u"" , imm )"	5631:6:215178:215202	326679	4	True				
ANR	327154	CallExpression	"func ( stream , ""%u"" , imm )"		326679	0					
ANR	327155	Callee	func		326679	0					
ANR	327156	Identifier	func		326679	0					
ANR	327157	ArgumentList	stream		326679	1					
ANR	327158	Argument	stream		326679	0					
ANR	327159	Identifier	stream		326679	0					
ANR	327160	Argument	"""%u"""		326679	1					
ANR	327161	PrimaryExpression	"""%u"""		326679	0					
ANR	327162	Argument	imm		326679	2					
ANR	327163	Identifier	imm		326679	0					
ANR	327164	BreakStatement	break ;	5633:7:215243:215248	326679	23	True				
ANR	327165	Label	case 'H' :	5635:5:215256:215264	326679	24	True				
ANR	327166	CompoundStatement		104:6:2586:2606	326679	25					
ANR	327167	IdentifierDeclStatement	unsigned int imm = 0 ;	5636:6:215274:215294	326679	0	True				
ANR	327168	IdentifierDecl	imm = 0		326679	0					
ANR	327169	IdentifierDeclType	unsigned int		326679	0					
ANR	327170	Identifier	imm		326679	1					
ANR	327171	AssignmentExpression	imm = 0		326679	2		=			
ANR	327172	Identifier	imm		326679	0					
ANR	327173	PrimaryExpression	0		326679	1					
ANR	327174	ExpressionStatement	imm |= ( given & 0x000f0000u ) >> 4	5638:6:215303:215336	326679	1	True				
ANR	327175	AssignmentExpression	imm |= ( given & 0x000f0000u ) >> 4		326679	0		|=			
ANR	327176	Identifier	imm		326679	0					
ANR	327177	ShiftExpression	( given & 0x000f0000u ) >> 4		326679	1		>>			
ANR	327178	BitAndExpression	given & 0x000f0000u		326679	0		&			
ANR	327179	Identifier	given		326679	0					
ANR	327180	PrimaryExpression	0x000f0000u		326679	1					
ANR	327181	PrimaryExpression	4		326679	1					
ANR	327182	ExpressionStatement	imm |= ( given & 0x00000fffu ) >> 0	5639:6:215344:215377	326679	2	True				
ANR	327183	AssignmentExpression	imm |= ( given & 0x00000fffu ) >> 0		326679	0		|=			
ANR	327184	Identifier	imm		326679	0					
ANR	327185	ShiftExpression	( given & 0x00000fffu ) >> 0		326679	1		>>			
ANR	327186	BitAndExpression	given & 0x00000fffu		326679	0		&			
ANR	327187	Identifier	given		326679	0					
ANR	327188	PrimaryExpression	0x00000fffu		326679	1					
ANR	327189	PrimaryExpression	0		326679	1					
ANR	327190	ExpressionStatement	"func ( stream , ""%u"" , imm )"	5640:6:215385:215409	326679	3	True				
ANR	327191	CallExpression	"func ( stream , ""%u"" , imm )"		326679	0					
ANR	327192	Callee	func		326679	0					
ANR	327193	Identifier	func		326679	0					
ANR	327194	ArgumentList	stream		326679	1					
ANR	327195	Argument	stream		326679	0					
ANR	327196	Identifier	stream		326679	0					
ANR	327197	Argument	"""%u"""		326679	1					
ANR	327198	PrimaryExpression	"""%u"""		326679	0					
ANR	327199	Argument	imm		326679	2					
ANR	327200	Identifier	imm		326679	0					
ANR	327201	BreakStatement	break ;	5642:7:215450:215455	326679	26	True				
ANR	327202	Label	case 'V' :	5644:5:215463:215471	326679	27	True				
ANR	327203	CompoundStatement		113:6:2793:2813	326679	28					
ANR	327204	IdentifierDeclStatement	unsigned int imm = 0 ;	5645:6:215481:215501	326679	0	True				
ANR	327205	IdentifierDecl	imm = 0		326679	0					
ANR	327206	IdentifierDeclType	unsigned int		326679	0					
ANR	327207	Identifier	imm		326679	1					
ANR	327208	AssignmentExpression	imm = 0		326679	2		=			
ANR	327209	Identifier	imm		326679	0					
ANR	327210	PrimaryExpression	0		326679	1					
ANR	327211	ExpressionStatement	imm |= ( given & 0x00000fffu )	5647:6:215510:215538	326679	1	True				
ANR	327212	AssignmentExpression	imm |= ( given & 0x00000fffu )		326679	0		|=			
ANR	327213	Identifier	imm		326679	0					
ANR	327214	BitAndExpression	given & 0x00000fffu		326679	1		&			
ANR	327215	Identifier	given		326679	0					
ANR	327216	PrimaryExpression	0x00000fffu		326679	1					
ANR	327217	ExpressionStatement	imm |= ( given & 0x000f0000u ) >> 4	5648:6:215546:215579	326679	2	True				
ANR	327218	AssignmentExpression	imm |= ( given & 0x000f0000u ) >> 4		326679	0		|=			
ANR	327219	Identifier	imm		326679	0					
ANR	327220	ShiftExpression	( given & 0x000f0000u ) >> 4		326679	1		>>			
ANR	327221	BitAndExpression	given & 0x000f0000u		326679	0		&			
ANR	327222	Identifier	given		326679	0					
ANR	327223	PrimaryExpression	0x000f0000u		326679	1					
ANR	327224	PrimaryExpression	4		326679	1					
ANR	327225	ExpressionStatement	"func ( stream , ""%u"" , imm )"	5649:6:215587:215611	326679	3	True				
ANR	327226	CallExpression	"func ( stream , ""%u"" , imm )"		326679	0					
ANR	327227	Callee	func		326679	0					
ANR	327228	Identifier	func		326679	0					
ANR	327229	ArgumentList	stream		326679	1					
ANR	327230	Argument	stream		326679	0					
ANR	327231	Identifier	stream		326679	0					
ANR	327232	Argument	"""%u"""		326679	1					
ANR	327233	PrimaryExpression	"""%u"""		326679	0					
ANR	327234	Argument	imm		326679	2					
ANR	327235	Identifier	imm		326679	0					
ANR	327236	BreakStatement	break ;	5651:7:215652:215657	326679	29	True				
ANR	327237	Label	case 'S' :	5653:5:215665:215673	326679	30	True				
ANR	327238	CompoundStatement		124:6:3096:3116	326679	31					
ANR	327239	IdentifierDeclStatement	unsigned int reg = ( given & 0x0000000fu ) ;	5654:6:215683:215723	326679	0	True				
ANR	327240	IdentifierDecl	reg = ( given & 0x0000000fu )		326679	0					
ANR	327241	IdentifierDeclType	unsigned int		326679	0					
ANR	327242	Identifier	reg		326679	1					
ANR	327243	AssignmentExpression	reg = ( given & 0x0000000fu )		326679	2		=			
ANR	327244	Identifier	reg		326679	0					
ANR	327245	BitAndExpression	given & 0x0000000fu		326679	1		&			
ANR	327246	Identifier	given		326679	0					
ANR	327247	PrimaryExpression	0x0000000fu		326679	1					
ANR	327248	IdentifierDeclStatement	unsigned int stp = ( given & 0x00000030u ) >> 4 ;	5655:6:215731:215776	326679	1	True				
ANR	327249	IdentifierDecl	stp = ( given & 0x00000030u ) >> 4		326679	0					
ANR	327250	IdentifierDeclType	unsigned int		326679	0					
ANR	327251	Identifier	stp		326679	1					
ANR	327252	AssignmentExpression	stp = ( given & 0x00000030u ) >> 4		326679	2		=			
ANR	327253	Identifier	stp		326679	0					
ANR	327254	ShiftExpression	( given & 0x00000030u ) >> 4		326679	1		>>			
ANR	327255	BitAndExpression	given & 0x00000030u		326679	0		&			
ANR	327256	Identifier	given		326679	0					
ANR	327257	PrimaryExpression	0x00000030u		326679	1					
ANR	327258	PrimaryExpression	4		326679	1					
ANR	327259	IdentifierDeclStatement	unsigned int imm = 0 ;	5656:6:215784:215804	326679	2	True				
ANR	327260	IdentifierDecl	imm = 0		326679	0					
ANR	327261	IdentifierDeclType	unsigned int		326679	0					
ANR	327262	Identifier	imm		326679	1					
ANR	327263	AssignmentExpression	imm = 0		326679	2		=			
ANR	327264	Identifier	imm		326679	0					
ANR	327265	PrimaryExpression	0		326679	1					
ANR	327266	ExpressionStatement	imm |= ( given & 0x000000c0u ) >> 6	5657:6:215812:215845	326679	3	True				
ANR	327267	AssignmentExpression	imm |= ( given & 0x000000c0u ) >> 6		326679	0		|=			
ANR	327268	Identifier	imm		326679	0					
ANR	327269	ShiftExpression	( given & 0x000000c0u ) >> 6		326679	1		>>			
ANR	327270	BitAndExpression	given & 0x000000c0u		326679	0		&			
ANR	327271	Identifier	given		326679	0					
ANR	327272	PrimaryExpression	0x000000c0u		326679	1					
ANR	327273	PrimaryExpression	6		326679	1					
ANR	327274	ExpressionStatement	imm |= ( given & 0x00007000u ) >> 10	5658:6:215853:215887	326679	4	True				
ANR	327275	AssignmentExpression	imm |= ( given & 0x00007000u ) >> 10		326679	0		|=			
ANR	327276	Identifier	imm		326679	0					
ANR	327277	ShiftExpression	( given & 0x00007000u ) >> 10		326679	1		>>			
ANR	327278	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	327279	Identifier	given		326679	0					
ANR	327280	PrimaryExpression	0x00007000u		326679	1					
ANR	327281	PrimaryExpression	10		326679	1					
ANR	327282	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5660:6:215896:215934	326679	5	True				
ANR	327283	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		326679	0					
ANR	327284	Callee	func		326679	0					
ANR	327285	Identifier	func		326679	0					
ANR	327286	ArgumentList	stream		326679	1					
ANR	327287	Argument	stream		326679	0					
ANR	327288	Identifier	stream		326679	0					
ANR	327289	Argument	"""%s"""		326679	1					
ANR	327290	PrimaryExpression	"""%s"""		326679	0					
ANR	327291	Argument	arm_regnames [ reg ]		326679	2					
ANR	327292	ArrayIndexing	arm_regnames [ reg ]		326679	0					
ANR	327293	Identifier	arm_regnames		326679	0					
ANR	327294	Identifier	reg		326679	1					
ANR	327295	SwitchStatement	switch ( stp )		326679	6					
ANR	327296	Condition	stp	5661:14:215950:215952	326679	0	True				
ANR	327297	Identifier	stp		326679	0					
ANR	327298	CompoundStatement		129:19:3267:3267	326679	1					
ANR	327299	Label	case 0 :	5662:6:215963:215969	326679	0	True				
ANR	327300	IfStatement	if ( imm > 0 )		326679	1					
ANR	327301	Condition	imm > 0	5663:11:215982:215988	326679	0	True				
ANR	327302	RelationalExpression	imm > 0		326679	0		>			
ANR	327303	Identifier	imm		326679	0					
ANR	327304	PrimaryExpression	0		326679	1					
ANR	327305	CompoundStatement		131:20:3303:3303	326679	1					
ANR	327306	ExpressionStatement	"func ( stream , "", lsl %u"" , imm )"	5664:8:216001:216031	326679	0	True				
ANR	327307	CallExpression	"func ( stream , "", lsl %u"" , imm )"		326679	0					
ANR	327308	Callee	func		326679	0					
ANR	327309	Identifier	func		326679	0					
ANR	327310	ArgumentList	stream		326679	1					
ANR	327311	Argument	stream		326679	0					
ANR	327312	Identifier	stream		326679	0					
ANR	327313	Argument	""", lsl %u"""		326679	1					
ANR	327314	PrimaryExpression	""", lsl %u"""		326679	0					
ANR	327315	Argument	imm		326679	2					
ANR	327316	Identifier	imm		326679	0					
ANR	327317	BreakStatement	break ;	5666:7:216049:216054	326679	2	True				
ANR	327318	Label	case 1 :	5668:6:216063:216069	326679	3	True				
ANR	327319	IfStatement	if ( imm == 0 )		326679	4					
ANR	327320	Condition	imm == 0	5669:11:216082:216089	326679	0	True				
ANR	327321	EqualityExpression	imm == 0		326679	0		==			
ANR	327322	Identifier	imm		326679	0					
ANR	327323	PrimaryExpression	0		326679	1					
ANR	327324	CompoundStatement		137:21:3404:3404	326679	1					
ANR	327325	ExpressionStatement	imm = 32	5670:8:216102:216110	326679	0	True				
ANR	327326	AssignmentExpression	imm = 32		326679	0		=			
ANR	327327	Identifier	imm		326679	0					
ANR	327328	PrimaryExpression	32		326679	1					
ANR	327329	ExpressionStatement	"func ( stream , "", lsr %u"" , imm )"	5672:7:216128:216158	326679	5	True				
ANR	327330	CallExpression	"func ( stream , "", lsr %u"" , imm )"		326679	0					
ANR	327331	Callee	func		326679	0					
ANR	327332	Identifier	func		326679	0					
ANR	327333	ArgumentList	stream		326679	1					
ANR	327334	Argument	stream		326679	0					
ANR	327335	Identifier	stream		326679	0					
ANR	327336	Argument	""", lsr %u"""		326679	1					
ANR	327337	PrimaryExpression	""", lsr %u"""		326679	0					
ANR	327338	Argument	imm		326679	2					
ANR	327339	Identifier	imm		326679	0					
ANR	327340	BreakStatement	break ;	5673:7:216167:216172	326679	6	True				
ANR	327341	Label	case 2 :	5675:6:216181:216187	326679	7	True				
ANR	327342	IfStatement	if ( imm == 0 )		326679	8					
ANR	327343	Condition	imm == 0	5676:11:216200:216207	326679	0	True				
ANR	327344	EqualityExpression	imm == 0		326679	0		==			
ANR	327345	Identifier	imm		326679	0					
ANR	327346	PrimaryExpression	0		326679	1					
ANR	327347	CompoundStatement		144:21:3522:3522	326679	1					
ANR	327348	ExpressionStatement	imm = 32	5677:8:216220:216228	326679	0	True				
ANR	327349	AssignmentExpression	imm = 32		326679	0		=			
ANR	327350	Identifier	imm		326679	0					
ANR	327351	PrimaryExpression	32		326679	1					
ANR	327352	ExpressionStatement	"func ( stream , "", asr %u"" , imm )"	5679:7:216246:216276	326679	9	True				
ANR	327353	CallExpression	"func ( stream , "", asr %u"" , imm )"		326679	0					
ANR	327354	Callee	func		326679	0					
ANR	327355	Identifier	func		326679	0					
ANR	327356	ArgumentList	stream		326679	1					
ANR	327357	Argument	stream		326679	0					
ANR	327358	Identifier	stream		326679	0					
ANR	327359	Argument	""", asr %u"""		326679	1					
ANR	327360	PrimaryExpression	""", asr %u"""		326679	0					
ANR	327361	Argument	imm		326679	2					
ANR	327362	Identifier	imm		326679	0					
ANR	327363	BreakStatement	break ;	5680:7:216285:216290	326679	10	True				
ANR	327364	Label	case 3 :	5682:6:216299:216305	326679	11	True				
ANR	327365	IfStatement	if ( imm == 0 )		326679	12					
ANR	327366	Condition	imm == 0	5683:11:216318:216325	326679	0	True				
ANR	327367	EqualityExpression	imm == 0		326679	0		==			
ANR	327368	Identifier	imm		326679	0					
ANR	327369	PrimaryExpression	0		326679	1					
ANR	327370	CompoundStatement		151:21:3640:3640	326679	1					
ANR	327371	ExpressionStatement	"func ( stream , "", rrx"" )"	5684:8:216338:216360	326679	0	True				
ANR	327372	CallExpression	"func ( stream , "", rrx"" )"		326679	0					
ANR	327373	Callee	func		326679	0					
ANR	327374	Identifier	func		326679	0					
ANR	327375	ArgumentList	stream		326679	1					
ANR	327376	Argument	stream		326679	0					
ANR	327377	Identifier	stream		326679	0					
ANR	327378	Argument	""", rrx"""		326679	1					
ANR	327379	PrimaryExpression	""", rrx"""		326679	0					
ANR	327380	ElseStatement	else		326679	0					
ANR	327381	CompoundStatement		153:14:3688:3688	326679	0					
ANR	327382	ExpressionStatement	"func ( stream , "", ror %u"" , imm )"	5686:8:216386:216416	326679	0	True				
ANR	327383	CallExpression	"func ( stream , "", ror %u"" , imm )"		326679	0					
ANR	327384	Callee	func		326679	0					
ANR	327385	Identifier	func		326679	0					
ANR	327386	ArgumentList	stream		326679	1					
ANR	327387	Argument	stream		326679	0					
ANR	327388	Identifier	stream		326679	0					
ANR	327389	Argument	""", ror %u"""		326679	1					
ANR	327390	PrimaryExpression	""", ror %u"""		326679	0					
ANR	327391	Argument	imm		326679	2					
ANR	327392	Identifier	imm		326679	0					
ANR	327393	BreakStatement	break ;	5689:7:216442:216447	326679	32	True				
ANR	327394	Label	case 'a' :	5691:5:216455:216463	326679	33	True				
ANR	327395	CompoundStatement		166:6:4077:4095	326679	34					
ANR	327396	IdentifierDeclStatement	unsigned int Rn = ( given & 0x000f0000 ) >> 16 ;	5692:6:216473:216517	326679	0	True				
ANR	327397	IdentifierDecl	Rn = ( given & 0x000f0000 ) >> 16		326679	0					
ANR	327398	IdentifierDeclType	unsigned int		326679	0					
ANR	327399	Identifier	Rn		326679	1					
ANR	327400	AssignmentExpression	Rn = ( given & 0x000f0000 ) >> 16		326679	2		=			
ANR	327401	Identifier	Rn		326679	0					
ANR	327402	ShiftExpression	( given & 0x000f0000 ) >> 16		326679	1		>>			
ANR	327403	BitAndExpression	given & 0x000f0000		326679	0		&			
ANR	327404	Identifier	given		326679	0					
ANR	327405	PrimaryExpression	0x000f0000		326679	1					
ANR	327406	PrimaryExpression	16		326679	1					
ANR	327407	IdentifierDeclStatement	unsigned int U = ! NEGATIVE_BIT_SET ;	5693:6:216525:216559	326679	1	True				
ANR	327408	IdentifierDecl	U = ! NEGATIVE_BIT_SET		326679	0					
ANR	327409	IdentifierDeclType	unsigned int		326679	0					
ANR	327410	Identifier	U		326679	1					
ANR	327411	AssignmentExpression	U = ! NEGATIVE_BIT_SET		326679	2		=			
ANR	327412	Identifier	U		326679	0					
ANR	327413	UnaryOperationExpression	! NEGATIVE_BIT_SET		326679	1					
ANR	327414	UnaryOperator	!		326679	0					
ANR	327415	Identifier	NEGATIVE_BIT_SET		326679	1					
ANR	327416	IdentifierDeclStatement	unsigned int op = ( given & 0x00000f00 ) >> 8 ;	5694:6:216567:216610	326679	2	True				
ANR	327417	IdentifierDecl	op = ( given & 0x00000f00 ) >> 8		326679	0					
ANR	327418	IdentifierDeclType	unsigned int		326679	0					
ANR	327419	Identifier	op		326679	1					
ANR	327420	AssignmentExpression	op = ( given & 0x00000f00 ) >> 8		326679	2		=			
ANR	327421	Identifier	op		326679	0					
ANR	327422	ShiftExpression	( given & 0x00000f00 ) >> 8		326679	1		>>			
ANR	327423	BitAndExpression	given & 0x00000f00		326679	0		&			
ANR	327424	Identifier	given		326679	0					
ANR	327425	PrimaryExpression	0x00000f00		326679	1					
ANR	327426	PrimaryExpression	8		326679	1					
ANR	327427	IdentifierDeclStatement	unsigned int i12 = ( given & 0x00000fff ) ;	5695:6:216618:216657	326679	3	True				
ANR	327428	IdentifierDecl	i12 = ( given & 0x00000fff )		326679	0					
ANR	327429	IdentifierDeclType	unsigned int		326679	0					
ANR	327430	Identifier	i12		326679	1					
ANR	327431	AssignmentExpression	i12 = ( given & 0x00000fff )		326679	2		=			
ANR	327432	Identifier	i12		326679	0					
ANR	327433	BitAndExpression	given & 0x00000fff		326679	1		&			
ANR	327434	Identifier	given		326679	0					
ANR	327435	PrimaryExpression	0x00000fff		326679	1					
ANR	327436	IdentifierDeclStatement	unsigned int i8 = ( given & 0x000000ff ) ;	5696:6:216665:216703	326679	4	True				
ANR	327437	IdentifierDecl	i8 = ( given & 0x000000ff )		326679	0					
ANR	327438	IdentifierDeclType	unsigned int		326679	0					
ANR	327439	Identifier	i8		326679	1					
ANR	327440	AssignmentExpression	i8 = ( given & 0x000000ff )		326679	2		=			
ANR	327441	Identifier	i8		326679	0					
ANR	327442	BitAndExpression	given & 0x000000ff		326679	1		&			
ANR	327443	Identifier	given		326679	0					
ANR	327444	PrimaryExpression	0x000000ff		326679	1					
ANR	327445	IdentifierDeclStatement	"bfd_boolean writeback = FALSE , postind = FALSE ;"	5697:6:216711:216757	326679	5	True				
ANR	327446	IdentifierDecl	writeback = FALSE		326679	0					
ANR	327447	IdentifierDeclType	bfd_boolean		326679	0					
ANR	327448	Identifier	writeback		326679	1					
ANR	327449	AssignmentExpression	writeback = FALSE		326679	2		=			
ANR	327450	Identifier	FALSE		326679	0					
ANR	327451	Identifier	FALSE		326679	1					
ANR	327452	IdentifierDecl	postind = FALSE		326679	1					
ANR	327453	IdentifierDeclType	bfd_boolean		326679	0					
ANR	327454	Identifier	postind		326679	1					
ANR	327455	AssignmentExpression	postind = FALSE		326679	2		=			
ANR	327456	Identifier	FALSE		326679	0					
ANR	327457	Identifier	FALSE		326679	1					
ANR	327458	IdentifierDeclStatement	bfd_vma offset = 0 ;	5698:6:216765:216783	326679	6	True				
ANR	327459	IdentifierDecl	offset = 0		326679	0					
ANR	327460	IdentifierDeclType	bfd_vma		326679	0					
ANR	327461	Identifier	offset		326679	1					
ANR	327462	AssignmentExpression	offset = 0		326679	2		=			
ANR	327463	Identifier	offset		326679	0					
ANR	327464	PrimaryExpression	0		326679	1					
ANR	327465	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ Rn ] )"	5700:6:216792:216830	326679	7	True				
ANR	327466	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ Rn ] )"		326679	0					
ANR	327467	Callee	func		326679	0					
ANR	327468	Identifier	func		326679	0					
ANR	327469	ArgumentList	stream		326679	1					
ANR	327470	Argument	stream		326679	0					
ANR	327471	Identifier	stream		326679	0					
ANR	327472	Argument	"""[%s"""		326679	1					
ANR	327473	PrimaryExpression	"""[%s"""		326679	0					
ANR	327474	Argument	arm_regnames [ Rn ]		326679	2					
ANR	327475	ArrayIndexing	arm_regnames [ Rn ]		326679	0					
ANR	327476	Identifier	arm_regnames		326679	0					
ANR	327477	Identifier	Rn		326679	1					
ANR	327478	IfStatement	if ( U )		326679	8					
ANR	327479	Condition	U	5701:10:216842:216842	326679	0	True				
ANR	327480	Identifier	U		326679	0					
ANR	327481	CompoundStatement		170:6:4204:4204	326679	1					
ANR	327482	ExpressionStatement	offset = i12	5703:7:216901:216913	326679	0	True				
ANR	327483	AssignmentExpression	offset = i12		326679	0		=			
ANR	327484	Identifier	offset		326679	0					
ANR	327485	Identifier	i12		326679	1					
ANR	327486	IfStatement	if ( Rn != 15 )		326679	1					
ANR	327487	Condition	Rn != 15	5704:11:216926:216933	326679	0	True				
ANR	327488	EqualityExpression	Rn != 15		326679	0		!=			
ANR	327489	Identifier	Rn		326679	0					
ANR	327490	PrimaryExpression	15		326679	1					
ANR	327491	CompoundStatement		172:21:4248:4248	326679	1					
ANR	327492	ElseStatement	else		326679	0					
ANR	327493	IfStatement	if ( Rn == 15 )		326679	0					
ANR	327494	Condition	Rn == 15	5707:17:217004:217011	326679	0	True				
ANR	327495	EqualityExpression	Rn == 15		326679	0		==			
ANR	327496	Identifier	Rn		326679	0					
ANR	327497	PrimaryExpression	15		326679	1					
ANR	327498	CompoundStatement		175:27:4326:4326	326679	1					
ANR	327499	ExpressionStatement	offset = - ( int ) i12	5708:7:217064:217082	326679	0	True				
ANR	327500	AssignmentExpression	offset = - ( int ) i12		326679	0		=			
ANR	327501	Identifier	offset		326679	0					
ANR	327502	UnaryOperationExpression	- ( int ) i12		326679	1					
ANR	327503	UnaryOperator	-		326679	0					
ANR	327504	CastExpression	( int ) i12		326679	1					
ANR	327505	CastTarget	int		326679	0					
ANR	327506	Identifier	i12		326679	1					
ANR	327507	ElseStatement	else		326679	0					
ANR	327508	IfStatement	if ( op == 0x0 )		326679	0					
ANR	327509	Condition	op == 0x0	5709:17:217101:217109	326679	0	True				
ANR	327510	EqualityExpression	op == 0x0		326679	0		==			
ANR	327511	Identifier	op		326679	0					
ANR	327512	PrimaryExpression	0x0		326679	1					
ANR	327513	CompoundStatement		180:7:4509:4543	326679	1					
ANR	327514	IdentifierDeclStatement	unsigned int Rm = ( i8 & 0x0f ) ;	5711:7:217159:217188	326679	0	True				
ANR	327515	IdentifierDecl	Rm = ( i8 & 0x0f )		326679	0					
ANR	327516	IdentifierDeclType	unsigned int		326679	0					
ANR	327517	Identifier	Rm		326679	1					
ANR	327518	AssignmentExpression	Rm = ( i8 & 0x0f )		326679	2		=			
ANR	327519	Identifier	Rm		326679	0					
ANR	327520	BitAndExpression	i8 & 0x0f		326679	1		&			
ANR	327521	Identifier	i8		326679	0					
ANR	327522	PrimaryExpression	0x0f		326679	1					
ANR	327523	IdentifierDeclStatement	unsigned int sh = ( i8 & 0x30 ) >> 4 ;	5712:7:217197:217231	326679	1	True				
ANR	327524	IdentifierDecl	sh = ( i8 & 0x30 ) >> 4		326679	0					
ANR	327525	IdentifierDeclType	unsigned int		326679	0					
ANR	327526	Identifier	sh		326679	1					
ANR	327527	AssignmentExpression	sh = ( i8 & 0x30 ) >> 4		326679	2		=			
ANR	327528	Identifier	sh		326679	0					
ANR	327529	ShiftExpression	( i8 & 0x30 ) >> 4		326679	1		>>			
ANR	327530	BitAndExpression	i8 & 0x30		326679	0		&			
ANR	327531	Identifier	i8		326679	0					
ANR	327532	PrimaryExpression	0x30		326679	1					
ANR	327533	PrimaryExpression	4		326679	1					
ANR	327534	ExpressionStatement	"func ( stream , "", %s"" , arm_regnames [ Rm ] )"	5714:7:217241:217280	326679	2	True				
ANR	327535	CallExpression	"func ( stream , "", %s"" , arm_regnames [ Rm ] )"		326679	0					
ANR	327536	Callee	func		326679	0					
ANR	327537	Identifier	func		326679	0					
ANR	327538	ArgumentList	stream		326679	1					
ANR	327539	Argument	stream		326679	0					
ANR	327540	Identifier	stream		326679	0					
ANR	327541	Argument	""", %s"""		326679	1					
ANR	327542	PrimaryExpression	""", %s"""		326679	0					
ANR	327543	Argument	arm_regnames [ Rm ]		326679	2					
ANR	327544	ArrayIndexing	arm_regnames [ Rm ]		326679	0					
ANR	327545	Identifier	arm_regnames		326679	0					
ANR	327546	Identifier	Rm		326679	1					
ANR	327547	IfStatement	if ( sh )		326679	3					
ANR	327548	Condition	sh	5715:11:217293:217294	326679	0	True				
ANR	327549	Identifier	sh		326679	0					
ANR	327550	CompoundStatement		183:15:4609:4609	326679	1					
ANR	327551	ExpressionStatement	"func ( stream , "", lsl %u"" , sh )"	5716:8:217307:217336	326679	0	True				
ANR	327552	CallExpression	"func ( stream , "", lsl %u"" , sh )"		326679	0					
ANR	327553	Callee	func		326679	0					
ANR	327554	Identifier	func		326679	0					
ANR	327555	ArgumentList	stream		326679	1					
ANR	327556	Argument	stream		326679	0					
ANR	327557	Identifier	stream		326679	0					
ANR	327558	Argument	""", lsl %u"""		326679	1					
ANR	327559	PrimaryExpression	""", lsl %u"""		326679	0					
ANR	327560	Argument	sh		326679	2					
ANR	327561	Identifier	sh		326679	0					
ANR	327562	ExpressionStatement	"func ( stream , ""]"" )"	5718:7:217354:217372	326679	4	True				
ANR	327563	CallExpression	"func ( stream , ""]"" )"		326679	0					
ANR	327564	Callee	func		326679	0					
ANR	327565	Identifier	func		326679	0					
ANR	327566	ArgumentList	stream		326679	1					
ANR	327567	Argument	stream		326679	0					
ANR	327568	Identifier	stream		326679	0					
ANR	327569	Argument	"""]"""		326679	1					
ANR	327570	PrimaryExpression	"""]"""		326679	0					
ANR	327571	BreakStatement	break ;	5719:7:217381:217386	326679	5	True				
ANR	327572	ElseStatement	else		326679	0					
ANR	327573	CompoundStatement		188:13:4713:4713	326679	0					
ANR	327574	SwitchStatement	switch ( op )		326679	0					
ANR	327575	Condition	op	5721:15:217418:217419	326679	0	True				
ANR	327576	Identifier	op		326679	0					
ANR	327577	CompoundStatement		189:19:4734:4734	326679	1					
ANR	327578	Label	case 0xE :	5722:7:217431:217439	326679	0	True				
ANR	327579	ExpressionStatement	offset = i8	5723:8:217489:217500	326679	1	True				
ANR	327580	AssignmentExpression	offset = i8		326679	0		=			
ANR	327581	Identifier	offset		326679	0					
ANR	327582	Identifier	i8		326679	1					
ANR	327583	BreakStatement	break ;	5724:8:217510:217515	326679	2	True				
ANR	327584	Label	case 0xC :	5726:7:217525:217533	326679	3	True				
ANR	327585	ExpressionStatement	offset = - i8	5727:8:217583:217595	326679	4	True				
ANR	327586	AssignmentExpression	offset = - i8		326679	0		=			
ANR	327587	Identifier	offset		326679	0					
ANR	327588	UnaryOperationExpression	- i8		326679	1					
ANR	327589	UnaryOperator	-		326679	0					
ANR	327590	Identifier	i8		326679	1					
ANR	327591	BreakStatement	break ;	5728:8:217605:217610	326679	5	True				
ANR	327592	Label	case 0xF :	5730:7:217620:217628	326679	6	True				
ANR	327593	ExpressionStatement	offset = i8	5731:8:217671:217682	326679	7	True				
ANR	327594	AssignmentExpression	offset = i8		326679	0		=			
ANR	327595	Identifier	offset		326679	0					
ANR	327596	Identifier	i8		326679	1					
ANR	327597	ExpressionStatement	writeback = TRUE	5732:8:217692:217708	326679	8	True				
ANR	327598	AssignmentExpression	writeback = TRUE		326679	0		=			
ANR	327599	Identifier	writeback		326679	0					
ANR	327600	Identifier	TRUE		326679	1					
ANR	327601	BreakStatement	break ;	5733:8:217718:217723	326679	9	True				
ANR	327602	Label	case 0xD :	5735:7:217733:217741	326679	10	True				
ANR	327603	ExpressionStatement	offset = - i8	5736:8:217784:217796	326679	11	True				
ANR	327604	AssignmentExpression	offset = - i8		326679	0		=			
ANR	327605	Identifier	offset		326679	0					
ANR	327606	UnaryOperationExpression	- i8		326679	1					
ANR	327607	UnaryOperator	-		326679	0					
ANR	327608	Identifier	i8		326679	1					
ANR	327609	ExpressionStatement	writeback = TRUE	5737:8:217806:217822	326679	12	True				
ANR	327610	AssignmentExpression	writeback = TRUE		326679	0		=			
ANR	327611	Identifier	writeback		326679	0					
ANR	327612	Identifier	TRUE		326679	1					
ANR	327613	BreakStatement	break ;	5738:8:217832:217837	326679	13	True				
ANR	327614	Label	case 0xB :	5740:7:217847:217855	326679	14	True				
ANR	327615	ExpressionStatement	offset = i8	5741:8:217891:217902	326679	15	True				
ANR	327616	AssignmentExpression	offset = i8		326679	0		=			
ANR	327617	Identifier	offset		326679	0					
ANR	327618	Identifier	i8		326679	1					
ANR	327619	ExpressionStatement	postind = TRUE	5742:8:217912:217926	326679	16	True				
ANR	327620	AssignmentExpression	postind = TRUE		326679	0		=			
ANR	327621	Identifier	postind		326679	0					
ANR	327622	Identifier	TRUE		326679	1					
ANR	327623	BreakStatement	break ;	5743:8:217936:217941	326679	17	True				
ANR	327624	Label	case 0x9 :	5745:7:217951:217959	326679	18	True				
ANR	327625	ExpressionStatement	offset = - i8	5746:8:217995:218007	326679	19	True				
ANR	327626	AssignmentExpression	offset = - i8		326679	0		=			
ANR	327627	Identifier	offset		326679	0					
ANR	327628	UnaryOperationExpression	- i8		326679	1					
ANR	327629	UnaryOperator	-		326679	0					
ANR	327630	Identifier	i8		326679	1					
ANR	327631	ExpressionStatement	postind = TRUE	5747:8:218017:218031	326679	20	True				
ANR	327632	AssignmentExpression	postind = TRUE		326679	0		=			
ANR	327633	Identifier	postind		326679	0					
ANR	327634	Identifier	TRUE		326679	1					
ANR	327635	BreakStatement	break ;	5748:8:218041:218046	326679	21	True				
ANR	327636	Label	default :	5750:7:218056:218063	326679	22	True				
ANR	327637	Identifier	default		326679	0					
ANR	327638	ExpressionStatement	"func ( stream , "", <undefined>]"" )"	5751:8:218073:218104	326679	23	True				
ANR	327639	CallExpression	"func ( stream , "", <undefined>]"" )"		326679	0					
ANR	327640	Callee	func		326679	0					
ANR	327641	Identifier	func		326679	0					
ANR	327642	ArgumentList	stream		326679	1					
ANR	327643	Argument	stream		326679	0					
ANR	327644	Identifier	stream		326679	0					
ANR	327645	Argument	""", <undefined>]"""		326679	1					
ANR	327646	PrimaryExpression	""", <undefined>]"""		326679	0					
ANR	327647	GotoStatement	goto skip ;	5752:8:218114:218123	326679	24	True				
ANR	327648	Identifier	skip		326679	0					
ANR	327649	IfStatement	if ( postind )		326679	9					
ANR	327650	Condition	postind	5756:10:218153:218159	326679	0	True				
ANR	327651	Identifier	postind		326679	0					
ANR	327652	CompoundStatement		224:19:5474:5474	326679	1					
ANR	327653	ExpressionStatement	"func ( stream , ""], %d"" , ( int ) offset )"	5757:7:218171:218206	326679	0	True				
ANR	327654	CallExpression	"func ( stream , ""], %d"" , ( int ) offset )"		326679	0					
ANR	327655	Callee	func		326679	0					
ANR	327656	Identifier	func		326679	0					
ANR	327657	ArgumentList	stream		326679	1					
ANR	327658	Argument	stream		326679	0					
ANR	327659	Identifier	stream		326679	0					
ANR	327660	Argument	"""], %d"""		326679	1					
ANR	327661	PrimaryExpression	"""], %d"""		326679	0					
ANR	327662	Argument	( int ) offset		326679	2					
ANR	327663	CastExpression	( int ) offset		326679	0					
ANR	327664	CastTarget	int		326679	0					
ANR	327665	Identifier	offset		326679	1					
ANR	327666	ElseStatement	else		326679	0					
ANR	327667	CompoundStatement		226:13:5533:5533	326679	0					
ANR	327668	IfStatement	if ( offset )		326679	0					
ANR	327669	Condition	offset	5759:11:218234:218239	326679	0	True				
ANR	327670	Identifier	offset		326679	0					
ANR	327671	CompoundStatement		227:19:5554:5554	326679	1					
ANR	327672	ExpressionStatement	"func ( stream , "", %d"" , ( int ) offset )"	5760:8:218252:218286	326679	0	True				
ANR	327673	CallExpression	"func ( stream , "", %d"" , ( int ) offset )"		326679	0					
ANR	327674	Callee	func		326679	0					
ANR	327675	Identifier	func		326679	0					
ANR	327676	ArgumentList	stream		326679	1					
ANR	327677	Argument	stream		326679	0					
ANR	327678	Identifier	stream		326679	0					
ANR	327679	Argument	""", %d"""		326679	1					
ANR	327680	PrimaryExpression	""", %d"""		326679	0					
ANR	327681	Argument	( int ) offset		326679	2					
ANR	327682	CastExpression	( int ) offset		326679	0					
ANR	327683	CastTarget	int		326679	0					
ANR	327684	Identifier	offset		326679	1					
ANR	327685	ExpressionStatement	"func ( stream , writeback ? ""]!"" : ""]"" )"	5762:7:218304:218341	326679	1	True				
ANR	327686	CallExpression	"func ( stream , writeback ? ""]!"" : ""]"" )"		326679	0					
ANR	327687	Callee	func		326679	0					
ANR	327688	Identifier	func		326679	0					
ANR	327689	ArgumentList	stream		326679	1					
ANR	327690	Argument	stream		326679	0					
ANR	327691	Identifier	stream		326679	0					
ANR	327692	Argument	"writeback ? ""]!"" : ""]"""		326679	1					
ANR	327693	ConditionalExpression	"writeback ? ""]!"" : ""]"""		326679	0					
ANR	327694	Condition	writeback		326679	0					
ANR	327695	Identifier	writeback		326679	0					
ANR	327696	PrimaryExpression	"""]!"""		326679	1					
ANR	327697	PrimaryExpression	"""]"""		326679	2					
ANR	327698	IfStatement	if ( Rn == 15 )		326679	10					
ANR	327699	Condition	Rn == 15	5765:10:218362:218369	326679	0	True				
ANR	327700	EqualityExpression	Rn == 15		326679	0		==			
ANR	327701	Identifier	Rn		326679	0					
ANR	327702	PrimaryExpression	15		326679	1					
ANR	327703	CompoundStatement		233:20:5684:5684	326679	1					
ANR	327704	ExpressionStatement	"func ( stream , "" ; "" )"	5766:7:218381:218401	326679	0	True				
ANR	327705	CallExpression	"func ( stream , "" ; "" )"		326679	0					
ANR	327706	Callee	func		326679	0					
ANR	327707	Identifier	func		326679	0					
ANR	327708	ArgumentList	stream		326679	1					
ANR	327709	Argument	stream		326679	0					
ANR	327710	Identifier	stream		326679	0					
ANR	327711	Argument	""" ; """		326679	1					
ANR	327712	PrimaryExpression	""" ; """		326679	0					
ANR	327713	ExpressionStatement	"info -> print_address_func ( ( ( pc + 4 ) & ~3 ) + offset , info )"	5767:7:218410:218467	326679	1	True				
ANR	327714	CallExpression	"info -> print_address_func ( ( ( pc + 4 ) & ~3 ) + offset , info )"		326679	0					
ANR	327715	Callee	info -> print_address_func		326679	0					
ANR	327716	PtrMemberAccess	info -> print_address_func		326679	0					
ANR	327717	Identifier	info		326679	0					
ANR	327718	Identifier	print_address_func		326679	1					
ANR	327719	ArgumentList	( ( pc + 4 ) & ~3 ) + offset		326679	1					
ANR	327720	Argument	( ( pc + 4 ) & ~3 ) + offset		326679	0					
ANR	327721	AdditiveExpression	( ( pc + 4 ) & ~3 ) + offset		326679	0		+			
ANR	327722	BitAndExpression	( pc + 4 ) & ~3		326679	0		&			
ANR	327723	AdditiveExpression	pc + 4		326679	0		+			
ANR	327724	Identifier	pc		326679	0					
ANR	327725	PrimaryExpression	4		326679	1					
ANR	327726	Identifier	~3		326679	1					
ANR	327727	Identifier	offset		326679	1					
ANR	327728	Argument	info		326679	1					
ANR	327729	Identifier	info		326679	0					
ANR	327730	Label	skip :	5770:5:218489:218493	326679	35	True				
ANR	327731	Identifier	skip		326679	0					
ANR	327732	BreakStatement	break ;	5771:6:218501:218506	326679	36	True				
ANR	327733	Label	case 'A' :	5773:5:218514:218522	326679	37	True				
ANR	327734	CompoundStatement		245:6:5980:6019	326679	38					
ANR	327735	IdentifierDeclStatement	unsigned int U = ! NEGATIVE_BIT_SET ;	5774:6:218532:218566	326679	0	True				
ANR	327736	IdentifierDecl	U = ! NEGATIVE_BIT_SET		326679	0					
ANR	327737	IdentifierDeclType	unsigned int		326679	0					
ANR	327738	Identifier	U		326679	1					
ANR	327739	AssignmentExpression	U = ! NEGATIVE_BIT_SET		326679	2		=			
ANR	327740	Identifier	U		326679	0					
ANR	327741	UnaryOperationExpression	! NEGATIVE_BIT_SET		326679	1					
ANR	327742	UnaryOperator	!		326679	0					
ANR	327743	Identifier	NEGATIVE_BIT_SET		326679	1					
ANR	327744	IdentifierDeclStatement	unsigned int W = WRITEBACK_BIT_SET ;	5775:6:218574:218608	326679	1	True				
ANR	327745	IdentifierDecl	W = WRITEBACK_BIT_SET		326679	0					
ANR	327746	IdentifierDeclType	unsigned int		326679	0					
ANR	327747	Identifier	W		326679	1					
ANR	327748	AssignmentExpression	W = WRITEBACK_BIT_SET		326679	2		=			
ANR	327749	Identifier	WRITEBACK_BIT_SET		326679	0					
ANR	327750	Identifier	WRITEBACK_BIT_SET		326679	1					
ANR	327751	IdentifierDeclStatement	unsigned int Rn = ( given & 0x000f0000 ) >> 16 ;	5776:6:218616:218660	326679	2	True				
ANR	327752	IdentifierDecl	Rn = ( given & 0x000f0000 ) >> 16		326679	0					
ANR	327753	IdentifierDeclType	unsigned int		326679	0					
ANR	327754	Identifier	Rn		326679	1					
ANR	327755	AssignmentExpression	Rn = ( given & 0x000f0000 ) >> 16		326679	2		=			
ANR	327756	Identifier	Rn		326679	0					
ANR	327757	ShiftExpression	( given & 0x000f0000 ) >> 16		326679	1		>>			
ANR	327758	BitAndExpression	given & 0x000f0000		326679	0		&			
ANR	327759	Identifier	given		326679	0					
ANR	327760	PrimaryExpression	0x000f0000		326679	1					
ANR	327761	PrimaryExpression	16		326679	1					
ANR	327762	IdentifierDeclStatement	unsigned int off = ( given & 0x000000ff ) ;	5777:6:218668:218707	326679	3	True				
ANR	327763	IdentifierDecl	off = ( given & 0x000000ff )		326679	0					
ANR	327764	IdentifierDeclType	unsigned int		326679	0					
ANR	327765	Identifier	off		326679	1					
ANR	327766	AssignmentExpression	off = ( given & 0x000000ff )		326679	2		=			
ANR	327767	Identifier	off		326679	0					
ANR	327768	BitAndExpression	given & 0x000000ff		326679	1		&			
ANR	327769	Identifier	given		326679	0					
ANR	327770	PrimaryExpression	0x000000ff		326679	1					
ANR	327771	ExpressionStatement	"func ( stream , ""[%s"" , arm_regnames [ Rn ] )"	5779:6:218716:218754	326679	4	True				
ANR	327772	CallExpression	"func ( stream , ""[%s"" , arm_regnames [ Rn ] )"		326679	0					
ANR	327773	Callee	func		326679	0					
ANR	327774	Identifier	func		326679	0					
ANR	327775	ArgumentList	stream		326679	1					
ANR	327776	Argument	stream		326679	0					
ANR	327777	Identifier	stream		326679	0					
ANR	327778	Argument	"""[%s"""		326679	1					
ANR	327779	PrimaryExpression	"""[%s"""		326679	0					
ANR	327780	Argument	arm_regnames [ Rn ]		326679	2					
ANR	327781	ArrayIndexing	arm_regnames [ Rn ]		326679	0					
ANR	327782	Identifier	arm_regnames		326679	0					
ANR	327783	Identifier	Rn		326679	1					
ANR	327784	IfStatement	if ( PRE_BIT_SET )		326679	5					
ANR	327785	Condition	PRE_BIT_SET	5781:10:218767:218777	326679	0	True				
ANR	327786	Identifier	PRE_BIT_SET		326679	0					
ANR	327787	CompoundStatement		249:23:6092:6092	326679	1					
ANR	327788	IfStatement	if ( off || ! U )		326679	0					
ANR	327789	Condition	off || ! U	5782:11:218793:218801	326679	0	True				
ANR	327790	OrExpression	off || ! U		326679	0		||			
ANR	327791	Identifier	off		326679	0					
ANR	327792	UnaryOperationExpression	! U		326679	1					
ANR	327793	UnaryOperator	!		326679	0					
ANR	327794	Identifier	U		326679	1					
ANR	327795	CompoundStatement		250:22:6116:6116	326679	1					
ANR	327796	ExpressionStatement	"func ( stream , "", %c%u"" , U ? '+' : '-' , off * 4 )"	5783:8:218814:218861	326679	0	True				
ANR	327797	CallExpression	"func ( stream , "", %c%u"" , U ? '+' : '-' , off * 4 )"		326679	0					
ANR	327798	Callee	func		326679	0					
ANR	327799	Identifier	func		326679	0					
ANR	327800	ArgumentList	stream		326679	1					
ANR	327801	Argument	stream		326679	0					
ANR	327802	Identifier	stream		326679	0					
ANR	327803	Argument	""", %c%u"""		326679	1					
ANR	327804	PrimaryExpression	""", %c%u"""		326679	0					
ANR	327805	Argument	U ? '+' : '-'		326679	2					
ANR	327806	ConditionalExpression	U ? '+' : '-'		326679	0					
ANR	327807	Condition	U		326679	0					
ANR	327808	Identifier	U		326679	0					
ANR	327809	PrimaryExpression	'+'		326679	1					
ANR	327810	PrimaryExpression	'-'		326679	2					
ANR	327811	Argument	off * 4		326679	3					
ANR	327812	MultiplicativeExpression	off * 4		326679	0		*			
ANR	327813	Identifier	off		326679	0					
ANR	327814	PrimaryExpression	4		326679	1					
ANR	327815	ExpressionStatement	"func ( stream , ""]"" )"	5786:7:218929:218947	326679	1	True				
ANR	327816	CallExpression	"func ( stream , ""]"" )"		326679	0					
ANR	327817	Callee	func		326679	0					
ANR	327818	Identifier	func		326679	0					
ANR	327819	ArgumentList	stream		326679	1					
ANR	327820	Argument	stream		326679	0					
ANR	327821	Identifier	stream		326679	0					
ANR	327822	Argument	"""]"""		326679	1					
ANR	327823	PrimaryExpression	"""]"""		326679	0					
ANR	327824	IfStatement	if ( W )		326679	2					
ANR	327825	Condition	W	5787:11:218960:218960	326679	0	True				
ANR	327826	Identifier	W		326679	0					
ANR	327827	CompoundStatement		255:14:6275:6275	326679	1					
ANR	327828	ExpressionStatement	"func ( stream , ""!"" )"	5788:8:218973:218991	326679	0	True				
ANR	327829	CallExpression	"func ( stream , ""!"" )"		326679	0					
ANR	327830	Callee	func		326679	0					
ANR	327831	Identifier	func		326679	0					
ANR	327832	ArgumentList	stream		326679	1					
ANR	327833	Argument	stream		326679	0					
ANR	327834	Identifier	stream		326679	0					
ANR	327835	Argument	"""!"""		326679	1					
ANR	327836	PrimaryExpression	"""!"""		326679	0					
ANR	327837	ElseStatement	else		326679	0					
ANR	327838	CompoundStatement		258:13:6327:6327	326679	0					
ANR	327839	ExpressionStatement	"func ( stream , ""], "" )"	5791:7:219024:219044	326679	0	True				
ANR	327840	CallExpression	"func ( stream , ""], "" )"		326679	0					
ANR	327841	Callee	func		326679	0					
ANR	327842	Identifier	func		326679	0					
ANR	327843	ArgumentList	stream		326679	1					
ANR	327844	Argument	stream		326679	0					
ANR	327845	Identifier	stream		326679	0					
ANR	327846	Argument	"""], """		326679	1					
ANR	327847	PrimaryExpression	"""], """		326679	0					
ANR	327848	IfStatement	if ( W )		326679	1					
ANR	327849	Condition	W	5792:11:219057:219057	326679	0	True				
ANR	327850	Identifier	W		326679	0					
ANR	327851	CompoundStatement		260:14:6372:6372	326679	1					
ANR	327852	ExpressionStatement	"func ( stream , ""%c%u"" , U ? '+' : '-' , off * 4 )"	5793:8:219070:219115	326679	0	True				
ANR	327853	CallExpression	"func ( stream , ""%c%u"" , U ? '+' : '-' , off * 4 )"		326679	0					
ANR	327854	Callee	func		326679	0					
ANR	327855	Identifier	func		326679	0					
ANR	327856	ArgumentList	stream		326679	1					
ANR	327857	Argument	stream		326679	0					
ANR	327858	Identifier	stream		326679	0					
ANR	327859	Argument	"""%c%u"""		326679	1					
ANR	327860	PrimaryExpression	"""%c%u"""		326679	0					
ANR	327861	Argument	U ? '+' : '-'		326679	2					
ANR	327862	ConditionalExpression	U ? '+' : '-'		326679	0					
ANR	327863	Condition	U		326679	0					
ANR	327864	Identifier	U		326679	0					
ANR	327865	PrimaryExpression	'+'		326679	1					
ANR	327866	PrimaryExpression	'-'		326679	2					
ANR	327867	Argument	off * 4		326679	3					
ANR	327868	MultiplicativeExpression	off * 4		326679	0		*			
ANR	327869	Identifier	off		326679	0					
ANR	327870	PrimaryExpression	4		326679	1					
ANR	327871	ElseStatement	else		326679	0					
ANR	327872	CompoundStatement		263:14:6493:6493	326679	0					
ANR	327873	ExpressionStatement	"func ( stream , ""{%u}"" , off )"	5796:8:219191:219217	326679	0	True				
ANR	327874	CallExpression	"func ( stream , ""{%u}"" , off )"		326679	0					
ANR	327875	Callee	func		326679	0					
ANR	327876	Identifier	func		326679	0					
ANR	327877	ArgumentList	stream		326679	1					
ANR	327878	Argument	stream		326679	0					
ANR	327879	Identifier	stream		326679	0					
ANR	327880	Argument	"""{%u}"""		326679	1					
ANR	327881	PrimaryExpression	"""{%u}"""		326679	0					
ANR	327882	Argument	off		326679	2					
ANR	327883	Identifier	off		326679	0					
ANR	327884	BreakStatement	break ;	5800:7:219278:219283	326679	39	True				
ANR	327885	Label	case 'w' :	5802:5:219291:219299	326679	40	True				
ANR	327886	CompoundStatement		272:6:6675:6721	326679	41					
ANR	327887	IdentifierDeclStatement	unsigned int Sbit = ( given & 0x01000000 ) >> 24 ;	5803:6:219309:219355	326679	0	True				
ANR	327888	IdentifierDecl	Sbit = ( given & 0x01000000 ) >> 24		326679	0					
ANR	327889	IdentifierDeclType	unsigned int		326679	0					
ANR	327890	Identifier	Sbit		326679	1					
ANR	327891	AssignmentExpression	Sbit = ( given & 0x01000000 ) >> 24		326679	2		=			
ANR	327892	Identifier	Sbit		326679	0					
ANR	327893	ShiftExpression	( given & 0x01000000 ) >> 24		326679	1		>>			
ANR	327894	BitAndExpression	given & 0x01000000		326679	0		&			
ANR	327895	Identifier	given		326679	0					
ANR	327896	PrimaryExpression	0x01000000		326679	1					
ANR	327897	PrimaryExpression	24		326679	1					
ANR	327898	IdentifierDeclStatement	unsigned int type = ( given & 0x00600000 ) >> 21 ;	5804:6:219363:219409	326679	1	True				
ANR	327899	IdentifierDecl	type = ( given & 0x00600000 ) >> 21		326679	0					
ANR	327900	IdentifierDeclType	unsigned int		326679	0					
ANR	327901	Identifier	type		326679	1					
ANR	327902	AssignmentExpression	type = ( given & 0x00600000 ) >> 21		326679	2		=			
ANR	327903	Identifier	type		326679	0					
ANR	327904	ShiftExpression	( given & 0x00600000 ) >> 21		326679	1		>>			
ANR	327905	BitAndExpression	given & 0x00600000		326679	0		&			
ANR	327906	Identifier	given		326679	0					
ANR	327907	PrimaryExpression	0x00600000		326679	1					
ANR	327908	PrimaryExpression	21		326679	1					
ANR	327909	SwitchStatement	switch ( type )		326679	2					
ANR	327910	Condition	type	5806:14:219426:219429	326679	0	True				
ANR	327911	Identifier	type		326679	0					
ANR	327912	CompoundStatement		274:20:6744:6744	326679	1					
ANR	327913	Label	case 0 :	5807:6:219440:219446	326679	0	True				
ANR	327914	ExpressionStatement	"func ( stream , Sbit ? ""sb"" : ""b"" )"	5807:14:219448:219480	326679	1	True				
ANR	327915	CallExpression	"func ( stream , Sbit ? ""sb"" : ""b"" )"		326679	0					
ANR	327916	Callee	func		326679	0					
ANR	327917	Identifier	func		326679	0					
ANR	327918	ArgumentList	stream		326679	1					
ANR	327919	Argument	stream		326679	0					
ANR	327920	Identifier	stream		326679	0					
ANR	327921	Argument	"Sbit ? ""sb"" : ""b"""		326679	1					
ANR	327922	ConditionalExpression	"Sbit ? ""sb"" : ""b"""		326679	0					
ANR	327923	Condition	Sbit		326679	0					
ANR	327924	Identifier	Sbit		326679	0					
ANR	327925	PrimaryExpression	"""sb"""		326679	1					
ANR	327926	PrimaryExpression	"""b"""		326679	2					
ANR	327927	BreakStatement	break ;	5807:48:219482:219487	326679	2	True				
ANR	327928	Label	case 1 :	5808:6:219495:219501	326679	3	True				
ANR	327929	ExpressionStatement	"func ( stream , Sbit ? ""sh"" : ""h"" )"	5808:14:219503:219535	326679	4	True				
ANR	327930	CallExpression	"func ( stream , Sbit ? ""sh"" : ""h"" )"		326679	0					
ANR	327931	Callee	func		326679	0					
ANR	327932	Identifier	func		326679	0					
ANR	327933	ArgumentList	stream		326679	1					
ANR	327934	Argument	stream		326679	0					
ANR	327935	Identifier	stream		326679	0					
ANR	327936	Argument	"Sbit ? ""sh"" : ""h"""		326679	1					
ANR	327937	ConditionalExpression	"Sbit ? ""sh"" : ""h"""		326679	0					
ANR	327938	Condition	Sbit		326679	0					
ANR	327939	Identifier	Sbit		326679	0					
ANR	327940	PrimaryExpression	"""sh"""		326679	1					
ANR	327941	PrimaryExpression	"""h"""		326679	2					
ANR	327942	BreakStatement	break ;	5808:48:219537:219542	326679	5	True				
ANR	327943	Label	case 2 :	5809:6:219550:219556	326679	6	True				
ANR	327944	IfStatement	if ( Sbit )		326679	7					
ANR	327945	Condition	Sbit	5810:11:219569:219572	326679	0	True				
ANR	327946	Identifier	Sbit		326679	0					
ANR	327947	CompoundStatement		278:17:6887:6887	326679	1					
ANR	327948	ExpressionStatement	"func ( stream , ""??"" )"	5811:8:219585:219604	326679	0	True				
ANR	327949	CallExpression	"func ( stream , ""??"" )"		326679	0					
ANR	327950	Callee	func		326679	0					
ANR	327951	Identifier	func		326679	0					
ANR	327952	ArgumentList	stream		326679	1					
ANR	327953	Argument	stream		326679	0					
ANR	327954	Identifier	stream		326679	0					
ANR	327955	Argument	"""??"""		326679	1					
ANR	327956	PrimaryExpression	"""??"""		326679	0					
ANR	327957	BreakStatement	break ;	5813:7:219622:219627	326679	8	True				
ANR	327958	Label	case 3 :	5814:6:219635:219641	326679	9	True				
ANR	327959	ExpressionStatement	"func ( stream , ""??"" )"	5815:7:219650:219669	326679	10	True				
ANR	327960	CallExpression	"func ( stream , ""??"" )"		326679	0					
ANR	327961	Callee	func		326679	0					
ANR	327962	Identifier	func		326679	0					
ANR	327963	ArgumentList	stream		326679	1					
ANR	327964	Argument	stream		326679	0					
ANR	327965	Identifier	stream		326679	0					
ANR	327966	Argument	"""??"""		326679	1					
ANR	327967	PrimaryExpression	"""??"""		326679	0					
ANR	327968	BreakStatement	break ;	5816:7:219678:219683	326679	11	True				
ANR	327969	BreakStatement	break ;	5818:7:219700:219705	326679	42	True				
ANR	327970	Label	case 'm' :	5820:5:219713:219721	326679	43	True				
ANR	327971	CompoundStatement		290:6:7066:7073	326679	44					
ANR	327972	IdentifierDeclStatement	int started = 0 ;	5821:6:219731:219746	326679	0	True				
ANR	327973	IdentifierDecl	started = 0		326679	0					
ANR	327974	IdentifierDeclType	int		326679	0					
ANR	327975	Identifier	started		326679	1					
ANR	327976	AssignmentExpression	started = 0		326679	2		=			
ANR	327977	Identifier	started		326679	0					
ANR	327978	PrimaryExpression	0		326679	1					
ANR	327979	IdentifierDeclStatement	int reg ;	5822:6:219754:219761	326679	1	True				
ANR	327980	IdentifierDecl	reg		326679	0					
ANR	327981	IdentifierDeclType	int		326679	0					
ANR	327982	Identifier	reg		326679	1					
ANR	327983	ExpressionStatement	"func ( stream , ""{"" )"	5824:6:219770:219788	326679	2	True				
ANR	327984	CallExpression	"func ( stream , ""{"" )"		326679	0					
ANR	327985	Callee	func		326679	0					
ANR	327986	Identifier	func		326679	0					
ANR	327987	ArgumentList	stream		326679	1					
ANR	327988	Argument	stream		326679	0					
ANR	327989	Identifier	stream		326679	0					
ANR	327990	Argument	"""{"""		326679	1					
ANR	327991	PrimaryExpression	"""{"""		326679	0					
ANR	327992	ForStatement	for ( reg = 0 ; reg < 16 ; reg ++ )		326679	3					
ANR	327993	ForInit	reg = 0 ;	5825:11:219801:219808	326679	0	True				
ANR	327994	AssignmentExpression	reg = 0		326679	0		=			
ANR	327995	Identifier	reg		326679	0					
ANR	327996	PrimaryExpression	0		326679	1					
ANR	327997	Condition	reg < 16	5825:20:219810:219817	326679	1	True				
ANR	327998	RelationalExpression	reg < 16		326679	0		<			
ANR	327999	Identifier	reg		326679	0					
ANR	328000	PrimaryExpression	16		326679	1					
ANR	328001	PostIncDecOperationExpression	reg ++	5825:30:219820:219824	326679	2	True				
ANR	328002	Identifier	reg		326679	0					
ANR	328003	IncDec	++		326679	1					
ANR	328004	CompoundStatement		293:37:7139:7139	326679	3					
ANR	328005	IfStatement	if ( ( given & ( 1 << reg ) ) != 0 )		326679	0					
ANR	328006	Condition	( given & ( 1 << reg ) ) != 0	5826:11:219840:219864	326679	0	True				
ANR	328007	EqualityExpression	( given & ( 1 << reg ) ) != 0		326679	0		!=			
ANR	328008	BitAndExpression	given & ( 1 << reg )		326679	0		&			
ANR	328009	Identifier	given		326679	0					
ANR	328010	ShiftExpression	1 << reg		326679	1		<<			
ANR	328011	PrimaryExpression	1		326679	0					
ANR	328012	Identifier	reg		326679	1					
ANR	328013	PrimaryExpression	0		326679	1					
ANR	328014	CompoundStatement		294:38:7179:7179	326679	1					
ANR	328015	IfStatement	if ( started )		326679	0					
ANR	328016	Condition	started	5827:12:219881:219887	326679	0	True				
ANR	328017	Identifier	started		326679	0					
ANR	328018	CompoundStatement		295:21:7202:7202	326679	1					
ANR	328019	ExpressionStatement	"func ( stream , "", "" )"	5828:9:219901:219920	326679	0	True				
ANR	328020	CallExpression	"func ( stream , "", "" )"		326679	0					
ANR	328021	Callee	func		326679	0					
ANR	328022	Identifier	func		326679	0					
ANR	328023	ArgumentList	stream		326679	1					
ANR	328024	Argument	stream		326679	0					
ANR	328025	Identifier	stream		326679	0					
ANR	328026	Argument	""", """		326679	1					
ANR	328027	PrimaryExpression	""", """		326679	0					
ANR	328028	ExpressionStatement	started = 1	5830:8:219940:219951	326679	1	True				
ANR	328029	AssignmentExpression	started = 1		326679	0		=			
ANR	328030	Identifier	started		326679	0					
ANR	328031	PrimaryExpression	1		326679	1					
ANR	328032	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ reg ] )"	5831:8:219961:219999	326679	2	True				
ANR	328033	CallExpression	"func ( stream , ""%s"" , arm_regnames [ reg ] )"		326679	0					
ANR	328034	Callee	func		326679	0					
ANR	328035	Identifier	func		326679	0					
ANR	328036	ArgumentList	stream		326679	1					
ANR	328037	Argument	stream		326679	0					
ANR	328038	Identifier	stream		326679	0					
ANR	328039	Argument	"""%s"""		326679	1					
ANR	328040	PrimaryExpression	"""%s"""		326679	0					
ANR	328041	Argument	arm_regnames [ reg ]		326679	2					
ANR	328042	ArrayIndexing	arm_regnames [ reg ]		326679	0					
ANR	328043	Identifier	arm_regnames		326679	0					
ANR	328044	Identifier	reg		326679	1					
ANR	328045	ExpressionStatement	"func ( stream , ""}"" )"	5834:6:220024:220042	326679	4	True				
ANR	328046	CallExpression	"func ( stream , ""}"" )"		326679	0					
ANR	328047	Callee	func		326679	0					
ANR	328048	Identifier	func		326679	0					
ANR	328049	ArgumentList	stream		326679	1					
ANR	328050	Argument	stream		326679	0					
ANR	328051	Identifier	stream		326679	0					
ANR	328052	Argument	"""}"""		326679	1					
ANR	328053	PrimaryExpression	"""}"""		326679	0					
ANR	328054	BreakStatement	break ;	5835:7:220051:220056	326679	45	True				
ANR	328055	Label	case 'E' :	5837:5:220064:220072	326679	46	True				
ANR	328056	CompoundStatement		307:6:7441:7461	326679	47					
ANR	328057	IdentifierDeclStatement	unsigned int msb = ( given & 0x0000001f ) ;	5838:6:220082:220121	326679	0	True				
ANR	328058	IdentifierDecl	msb = ( given & 0x0000001f )		326679	0					
ANR	328059	IdentifierDeclType	unsigned int		326679	0					
ANR	328060	Identifier	msb		326679	1					
ANR	328061	AssignmentExpression	msb = ( given & 0x0000001f )		326679	2		=			
ANR	328062	Identifier	msb		326679	0					
ANR	328063	BitAndExpression	given & 0x0000001f		326679	1		&			
ANR	328064	Identifier	given		326679	0					
ANR	328065	PrimaryExpression	0x0000001f		326679	1					
ANR	328066	IdentifierDeclStatement	unsigned int lsb = 0 ;	5839:6:220129:220149	326679	1	True				
ANR	328067	IdentifierDecl	lsb = 0		326679	0					
ANR	328068	IdentifierDeclType	unsigned int		326679	0					
ANR	328069	Identifier	lsb		326679	1					
ANR	328070	AssignmentExpression	lsb = 0		326679	2		=			
ANR	328071	Identifier	lsb		326679	0					
ANR	328072	PrimaryExpression	0		326679	1					
ANR	328073	ExpressionStatement	lsb |= ( given & 0x000000c0u ) >> 6	5841:6:220158:220191	326679	2	True				
ANR	328074	AssignmentExpression	lsb |= ( given & 0x000000c0u ) >> 6		326679	0		|=			
ANR	328075	Identifier	lsb		326679	0					
ANR	328076	ShiftExpression	( given & 0x000000c0u ) >> 6		326679	1		>>			
ANR	328077	BitAndExpression	given & 0x000000c0u		326679	0		&			
ANR	328078	Identifier	given		326679	0					
ANR	328079	PrimaryExpression	0x000000c0u		326679	1					
ANR	328080	PrimaryExpression	6		326679	1					
ANR	328081	ExpressionStatement	lsb |= ( given & 0x00007000u ) >> 10	5842:6:220199:220233	326679	3	True				
ANR	328082	AssignmentExpression	lsb |= ( given & 0x00007000u ) >> 10		326679	0		|=			
ANR	328083	Identifier	lsb		326679	0					
ANR	328084	ShiftExpression	( given & 0x00007000u ) >> 10		326679	1		>>			
ANR	328085	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	328086	Identifier	given		326679	0					
ANR	328087	PrimaryExpression	0x00007000u		326679	1					
ANR	328088	PrimaryExpression	10		326679	1					
ANR	328089	ExpressionStatement	"func ( stream , ""%u, %u"" , lsb , msb - lsb + 1 )"	5843:6:220241:220284	326679	4	True				
ANR	328090	CallExpression	"func ( stream , ""%u, %u"" , lsb , msb - lsb + 1 )"		326679	0					
ANR	328091	Callee	func		326679	0					
ANR	328092	Identifier	func		326679	0					
ANR	328093	ArgumentList	stream		326679	1					
ANR	328094	Argument	stream		326679	0					
ANR	328095	Identifier	stream		326679	0					
ANR	328096	Argument	"""%u, %u"""		326679	1					
ANR	328097	PrimaryExpression	"""%u, %u"""		326679	0					
ANR	328098	Argument	lsb		326679	2					
ANR	328099	Identifier	lsb		326679	0					
ANR	328100	Argument	msb - lsb + 1		326679	3					
ANR	328101	AdditiveExpression	msb - lsb + 1		326679	0		-			
ANR	328102	Identifier	msb		326679	0					
ANR	328103	AdditiveExpression	lsb + 1		326679	1		+			
ANR	328104	Identifier	lsb		326679	0					
ANR	328105	PrimaryExpression	1		326679	1					
ANR	328106	BreakStatement	break ;	5844:7:220293:220298	326679	48	True				
ANR	328107	Label	case 'F' :	5846:5:220306:220314	326679	49	True				
ANR	328108	CompoundStatement		316:6:7689:7709	326679	50					
ANR	328109	IdentifierDeclStatement	unsigned int width = ( given & 0x0000001f ) + 1 ;	5847:6:220324:220369	326679	0	True				
ANR	328110	IdentifierDecl	width = ( given & 0x0000001f ) + 1		326679	0					
ANR	328111	IdentifierDeclType	unsigned int		326679	0					
ANR	328112	Identifier	width		326679	1					
ANR	328113	AssignmentExpression	width = ( given & 0x0000001f ) + 1		326679	2		=			
ANR	328114	Identifier	width		326679	0					
ANR	328115	AdditiveExpression	( given & 0x0000001f ) + 1		326679	1		+			
ANR	328116	BitAndExpression	given & 0x0000001f		326679	0		&			
ANR	328117	Identifier	given		326679	0					
ANR	328118	PrimaryExpression	0x0000001f		326679	1					
ANR	328119	PrimaryExpression	1		326679	1					
ANR	328120	IdentifierDeclStatement	unsigned int lsb = 0 ;	5848:6:220377:220397	326679	1	True				
ANR	328121	IdentifierDecl	lsb = 0		326679	0					
ANR	328122	IdentifierDeclType	unsigned int		326679	0					
ANR	328123	Identifier	lsb		326679	1					
ANR	328124	AssignmentExpression	lsb = 0		326679	2		=			
ANR	328125	Identifier	lsb		326679	0					
ANR	328126	PrimaryExpression	0		326679	1					
ANR	328127	ExpressionStatement	lsb |= ( given & 0x000000c0u ) >> 6	5850:6:220406:220439	326679	2	True				
ANR	328128	AssignmentExpression	lsb |= ( given & 0x000000c0u ) >> 6		326679	0		|=			
ANR	328129	Identifier	lsb		326679	0					
ANR	328130	ShiftExpression	( given & 0x000000c0u ) >> 6		326679	1		>>			
ANR	328131	BitAndExpression	given & 0x000000c0u		326679	0		&			
ANR	328132	Identifier	given		326679	0					
ANR	328133	PrimaryExpression	0x000000c0u		326679	1					
ANR	328134	PrimaryExpression	6		326679	1					
ANR	328135	ExpressionStatement	lsb |= ( given & 0x00007000u ) >> 10	5851:6:220447:220481	326679	3	True				
ANR	328136	AssignmentExpression	lsb |= ( given & 0x00007000u ) >> 10		326679	0		|=			
ANR	328137	Identifier	lsb		326679	0					
ANR	328138	ShiftExpression	( given & 0x00007000u ) >> 10		326679	1		>>			
ANR	328139	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	328140	Identifier	given		326679	0					
ANR	328141	PrimaryExpression	0x00007000u		326679	1					
ANR	328142	PrimaryExpression	10		326679	1					
ANR	328143	ExpressionStatement	"func ( stream , ""%u, %u"" , lsb , width )"	5852:6:220489:220524	326679	4	True				
ANR	328144	CallExpression	"func ( stream , ""%u, %u"" , lsb , width )"		326679	0					
ANR	328145	Callee	func		326679	0					
ANR	328146	Identifier	func		326679	0					
ANR	328147	ArgumentList	stream		326679	1					
ANR	328148	Argument	stream		326679	0					
ANR	328149	Identifier	stream		326679	0					
ANR	328150	Argument	"""%u, %u"""		326679	1					
ANR	328151	PrimaryExpression	"""%u, %u"""		326679	0					
ANR	328152	Argument	lsb		326679	2					
ANR	328153	Identifier	lsb		326679	0					
ANR	328154	Argument	width		326679	3					
ANR	328155	Identifier	width		326679	0					
ANR	328156	BreakStatement	break ;	5853:7:220533:220538	326679	51	True				
ANR	328157	Label	case 'b' :	5855:5:220546:220554	326679	52	True				
ANR	328158	CompoundStatement		327:6:8034:8052	326679	53					
ANR	328159	IdentifierDeclStatement	unsigned int S = ( given & 0x04000000u ) >> 26 ;	5856:6:220564:220608	326679	0	True				
ANR	328160	IdentifierDecl	S = ( given & 0x04000000u ) >> 26		326679	0					
ANR	328161	IdentifierDeclType	unsigned int		326679	0					
ANR	328162	Identifier	S		326679	1					
ANR	328163	AssignmentExpression	S = ( given & 0x04000000u ) >> 26		326679	2		=			
ANR	328164	Identifier	S		326679	0					
ANR	328165	ShiftExpression	( given & 0x04000000u ) >> 26		326679	1		>>			
ANR	328166	BitAndExpression	given & 0x04000000u		326679	0		&			
ANR	328167	Identifier	given		326679	0					
ANR	328168	PrimaryExpression	0x04000000u		326679	1					
ANR	328169	PrimaryExpression	26		326679	1					
ANR	328170	IdentifierDeclStatement	unsigned int J1 = ( given & 0x00002000u ) >> 13 ;	5857:6:220616:220661	326679	1	True				
ANR	328171	IdentifierDecl	J1 = ( given & 0x00002000u ) >> 13		326679	0					
ANR	328172	IdentifierDeclType	unsigned int		326679	0					
ANR	328173	Identifier	J1		326679	1					
ANR	328174	AssignmentExpression	J1 = ( given & 0x00002000u ) >> 13		326679	2		=			
ANR	328175	Identifier	J1		326679	0					
ANR	328176	ShiftExpression	( given & 0x00002000u ) >> 13		326679	1		>>			
ANR	328177	BitAndExpression	given & 0x00002000u		326679	0		&			
ANR	328178	Identifier	given		326679	0					
ANR	328179	PrimaryExpression	0x00002000u		326679	1					
ANR	328180	PrimaryExpression	13		326679	1					
ANR	328181	IdentifierDeclStatement	unsigned int J2 = ( given & 0x00000800u ) >> 11 ;	5858:6:220669:220714	326679	2	True				
ANR	328182	IdentifierDecl	J2 = ( given & 0x00000800u ) >> 11		326679	0					
ANR	328183	IdentifierDeclType	unsigned int		326679	0					
ANR	328184	Identifier	J2		326679	1					
ANR	328185	AssignmentExpression	J2 = ( given & 0x00000800u ) >> 11		326679	2		=			
ANR	328186	Identifier	J2		326679	0					
ANR	328187	ShiftExpression	( given & 0x00000800u ) >> 11		326679	1		>>			
ANR	328188	BitAndExpression	given & 0x00000800u		326679	0		&			
ANR	328189	Identifier	given		326679	0					
ANR	328190	PrimaryExpression	0x00000800u		326679	1					
ANR	328191	PrimaryExpression	11		326679	1					
ANR	328192	IdentifierDeclStatement	bfd_vma offset = 0 ;	5859:6:220722:220740	326679	3	True				
ANR	328193	IdentifierDecl	offset = 0		326679	0					
ANR	328194	IdentifierDeclType	bfd_vma		326679	0					
ANR	328195	Identifier	offset		326679	1					
ANR	328196	AssignmentExpression	offset = 0		326679	2		=			
ANR	328197	Identifier	offset		326679	0					
ANR	328198	PrimaryExpression	0		326679	1					
ANR	328199	ExpressionStatement	offset |= ! S << 20	5861:6:220749:220767	326679	4	True				
ANR	328200	AssignmentExpression	offset |= ! S << 20		326679	0		|=			
ANR	328201	Identifier	offset		326679	0					
ANR	328202	ShiftExpression	! S << 20		326679	1		<<			
ANR	328203	UnaryOperationExpression	! S		326679	0					
ANR	328204	UnaryOperator	!		326679	0					
ANR	328205	Identifier	S		326679	1					
ANR	328206	PrimaryExpression	20		326679	1					
ANR	328207	ExpressionStatement	offset |= J2 << 19	5862:6:220775:220793	326679	5	True				
ANR	328208	AssignmentExpression	offset |= J2 << 19		326679	0		|=			
ANR	328209	Identifier	offset		326679	0					
ANR	328210	ShiftExpression	J2 << 19		326679	1		<<			
ANR	328211	Identifier	J2		326679	0					
ANR	328212	PrimaryExpression	19		326679	1					
ANR	328213	ExpressionStatement	offset |= J1 << 18	5863:6:220801:220819	326679	6	True				
ANR	328214	AssignmentExpression	offset |= J1 << 18		326679	0		|=			
ANR	328215	Identifier	offset		326679	0					
ANR	328216	ShiftExpression	J1 << 18		326679	1		<<			
ANR	328217	Identifier	J1		326679	0					
ANR	328218	PrimaryExpression	18		326679	1					
ANR	328219	ExpressionStatement	offset |= ( given & 0x003f0000 ) >> 4	5864:6:220827:220862	326679	7	True				
ANR	328220	AssignmentExpression	offset |= ( given & 0x003f0000 ) >> 4		326679	0		|=			
ANR	328221	Identifier	offset		326679	0					
ANR	328222	ShiftExpression	( given & 0x003f0000 ) >> 4		326679	1		>>			
ANR	328223	BitAndExpression	given & 0x003f0000		326679	0		&			
ANR	328224	Identifier	given		326679	0					
ANR	328225	PrimaryExpression	0x003f0000		326679	1					
ANR	328226	PrimaryExpression	4		326679	1					
ANR	328227	ExpressionStatement	offset |= ( given & 0x000007ff ) << 1	5865:6:220870:220905	326679	8	True				
ANR	328228	AssignmentExpression	offset |= ( given & 0x000007ff ) << 1		326679	0		|=			
ANR	328229	Identifier	offset		326679	0					
ANR	328230	ShiftExpression	( given & 0x000007ff ) << 1		326679	1		<<			
ANR	328231	BitAndExpression	given & 0x000007ff		326679	0		&			
ANR	328232	Identifier	given		326679	0					
ANR	328233	PrimaryExpression	0x000007ff		326679	1					
ANR	328234	PrimaryExpression	1		326679	1					
ANR	328235	ExpressionStatement	offset -= ( 1 << 20 )	5866:6:220913:220932	326679	9	True				
ANR	328236	AssignmentExpression	offset -= ( 1 << 20 )		326679	0		-=			
ANR	328237	Identifier	offset		326679	0					
ANR	328238	ShiftExpression	1 << 20		326679	1		<<			
ANR	328239	PrimaryExpression	1		326679	0					
ANR	328240	PrimaryExpression	20		326679	1					
ANR	328241	ExpressionStatement	"info -> print_address_func ( pc + 4 + offset , info )"	5868:6:220941:220989	326679	10	True				
ANR	328242	CallExpression	"info -> print_address_func ( pc + 4 + offset , info )"		326679	0					
ANR	328243	Callee	info -> print_address_func		326679	0					
ANR	328244	PtrMemberAccess	info -> print_address_func		326679	0					
ANR	328245	Identifier	info		326679	0					
ANR	328246	Identifier	print_address_func		326679	1					
ANR	328247	ArgumentList	pc + 4 + offset		326679	1					
ANR	328248	Argument	pc + 4 + offset		326679	0					
ANR	328249	AdditiveExpression	pc + 4 + offset		326679	0		+			
ANR	328250	Identifier	pc		326679	0					
ANR	328251	AdditiveExpression	4 + offset		326679	1		+			
ANR	328252	PrimaryExpression	4		326679	0					
ANR	328253	Identifier	offset		326679	1					
ANR	328254	Argument	info		326679	1					
ANR	328255	Identifier	info		326679	0					
ANR	328256	BreakStatement	break ;	5869:7:220998:221003	326679	54	True				
ANR	328257	Label	case 'B' :	5871:5:221011:221019	326679	55	True				
ANR	328258	CompoundStatement		343:6:8499:8517	326679	56					
ANR	328259	IdentifierDeclStatement	unsigned int S = ( given & 0x04000000u ) >> 26 ;	5872:6:221029:221073	326679	0	True				
ANR	328260	IdentifierDecl	S = ( given & 0x04000000u ) >> 26		326679	0					
ANR	328261	IdentifierDeclType	unsigned int		326679	0					
ANR	328262	Identifier	S		326679	1					
ANR	328263	AssignmentExpression	S = ( given & 0x04000000u ) >> 26		326679	2		=			
ANR	328264	Identifier	S		326679	0					
ANR	328265	ShiftExpression	( given & 0x04000000u ) >> 26		326679	1		>>			
ANR	328266	BitAndExpression	given & 0x04000000u		326679	0		&			
ANR	328267	Identifier	given		326679	0					
ANR	328268	PrimaryExpression	0x04000000u		326679	1					
ANR	328269	PrimaryExpression	26		326679	1					
ANR	328270	IdentifierDeclStatement	unsigned int I1 = ( given & 0x00002000u ) >> 13 ;	5873:6:221081:221126	326679	1	True				
ANR	328271	IdentifierDecl	I1 = ( given & 0x00002000u ) >> 13		326679	0					
ANR	328272	IdentifierDeclType	unsigned int		326679	0					
ANR	328273	Identifier	I1		326679	1					
ANR	328274	AssignmentExpression	I1 = ( given & 0x00002000u ) >> 13		326679	2		=			
ANR	328275	Identifier	I1		326679	0					
ANR	328276	ShiftExpression	( given & 0x00002000u ) >> 13		326679	1		>>			
ANR	328277	BitAndExpression	given & 0x00002000u		326679	0		&			
ANR	328278	Identifier	given		326679	0					
ANR	328279	PrimaryExpression	0x00002000u		326679	1					
ANR	328280	PrimaryExpression	13		326679	1					
ANR	328281	IdentifierDeclStatement	unsigned int I2 = ( given & 0x00000800u ) >> 11 ;	5874:6:221134:221179	326679	2	True				
ANR	328282	IdentifierDecl	I2 = ( given & 0x00000800u ) >> 11		326679	0					
ANR	328283	IdentifierDeclType	unsigned int		326679	0					
ANR	328284	Identifier	I2		326679	1					
ANR	328285	AssignmentExpression	I2 = ( given & 0x00000800u ) >> 11		326679	2		=			
ANR	328286	Identifier	I2		326679	0					
ANR	328287	ShiftExpression	( given & 0x00000800u ) >> 11		326679	1		>>			
ANR	328288	BitAndExpression	given & 0x00000800u		326679	0		&			
ANR	328289	Identifier	given		326679	0					
ANR	328290	PrimaryExpression	0x00000800u		326679	1					
ANR	328291	PrimaryExpression	11		326679	1					
ANR	328292	IdentifierDeclStatement	bfd_vma offset = 0 ;	5875:6:221187:221205	326679	3	True				
ANR	328293	IdentifierDecl	offset = 0		326679	0					
ANR	328294	IdentifierDeclType	bfd_vma		326679	0					
ANR	328295	Identifier	offset		326679	1					
ANR	328296	AssignmentExpression	offset = 0		326679	2		=			
ANR	328297	Identifier	offset		326679	0					
ANR	328298	PrimaryExpression	0		326679	1					
ANR	328299	ExpressionStatement	offset |= ! S << 24	5877:6:221214:221232	326679	4	True				
ANR	328300	AssignmentExpression	offset |= ! S << 24		326679	0		|=			
ANR	328301	Identifier	offset		326679	0					
ANR	328302	ShiftExpression	! S << 24		326679	1		<<			
ANR	328303	UnaryOperationExpression	! S		326679	0					
ANR	328304	UnaryOperator	!		326679	0					
ANR	328305	Identifier	S		326679	1					
ANR	328306	PrimaryExpression	24		326679	1					
ANR	328307	ExpressionStatement	offset |= ! ( I1 ^ S ) << 23	5878:6:221240:221265	326679	5	True				
ANR	328308	AssignmentExpression	offset |= ! ( I1 ^ S ) << 23		326679	0		|=			
ANR	328309	Identifier	offset		326679	0					
ANR	328310	ShiftExpression	! ( I1 ^ S ) << 23		326679	1		<<			
ANR	328311	UnaryOperationExpression	! ( I1 ^ S )		326679	0					
ANR	328312	UnaryOperator	!		326679	0					
ANR	328313	ExclusiveOrExpression	I1 ^ S		326679	1		^			
ANR	328314	Identifier	I1		326679	0					
ANR	328315	Identifier	S		326679	1					
ANR	328316	PrimaryExpression	23		326679	1					
ANR	328317	ExpressionStatement	offset |= ! ( I2 ^ S ) << 22	5879:6:221273:221298	326679	6	True				
ANR	328318	AssignmentExpression	offset |= ! ( I2 ^ S ) << 22		326679	0		|=			
ANR	328319	Identifier	offset		326679	0					
ANR	328320	ShiftExpression	! ( I2 ^ S ) << 22		326679	1		<<			
ANR	328321	UnaryOperationExpression	! ( I2 ^ S )		326679	0					
ANR	328322	UnaryOperator	!		326679	0					
ANR	328323	ExclusiveOrExpression	I2 ^ S		326679	1		^			
ANR	328324	Identifier	I2		326679	0					
ANR	328325	Identifier	S		326679	1					
ANR	328326	PrimaryExpression	22		326679	1					
ANR	328327	ExpressionStatement	offset |= ( given & 0x03ff0000u ) >> 4	5880:6:221306:221342	326679	7	True				
ANR	328328	AssignmentExpression	offset |= ( given & 0x03ff0000u ) >> 4		326679	0		|=			
ANR	328329	Identifier	offset		326679	0					
ANR	328330	ShiftExpression	( given & 0x03ff0000u ) >> 4		326679	1		>>			
ANR	328331	BitAndExpression	given & 0x03ff0000u		326679	0		&			
ANR	328332	Identifier	given		326679	0					
ANR	328333	PrimaryExpression	0x03ff0000u		326679	1					
ANR	328334	PrimaryExpression	4		326679	1					
ANR	328335	ExpressionStatement	offset |= ( given & 0x000007ffu ) << 1	5881:6:221350:221386	326679	8	True				
ANR	328336	AssignmentExpression	offset |= ( given & 0x000007ffu ) << 1		326679	0		|=			
ANR	328337	Identifier	offset		326679	0					
ANR	328338	ShiftExpression	( given & 0x000007ffu ) << 1		326679	1		<<			
ANR	328339	BitAndExpression	given & 0x000007ffu		326679	0		&			
ANR	328340	Identifier	given		326679	0					
ANR	328341	PrimaryExpression	0x000007ffu		326679	1					
ANR	328342	PrimaryExpression	1		326679	1					
ANR	328343	ExpressionStatement	offset -= ( 1 << 24 )	5882:6:221394:221413	326679	9	True				
ANR	328344	AssignmentExpression	offset -= ( 1 << 24 )		326679	0		-=			
ANR	328345	Identifier	offset		326679	0					
ANR	328346	ShiftExpression	1 << 24		326679	1		<<			
ANR	328347	PrimaryExpression	1		326679	0					
ANR	328348	PrimaryExpression	24		326679	1					
ANR	328349	ExpressionStatement	offset += pc + 4	5883:6:221421:221437	326679	10	True				
ANR	328350	AssignmentExpression	offset += pc + 4		326679	0		+=			
ANR	328351	Identifier	offset		326679	0					
ANR	328352	AdditiveExpression	pc + 4		326679	1		+			
ANR	328353	Identifier	pc		326679	0					
ANR	328354	PrimaryExpression	4		326679	1					
ANR	328355	IfStatement	if ( ( given & 0x00001000u ) == 0 )		326679	11					
ANR	328356	Condition	( given & 0x00001000u ) == 0	5886:10:221509:221534	326679	0	True				
ANR	328357	EqualityExpression	( given & 0x00001000u ) == 0		326679	0		==			
ANR	328358	BitAndExpression	given & 0x00001000u		326679	0		&			
ANR	328359	Identifier	given		326679	0					
ANR	328360	PrimaryExpression	0x00001000u		326679	1					
ANR	328361	PrimaryExpression	0		326679	1					
ANR	328362	CompoundStatement		354:38:8849:8849	326679	1					
ANR	328363	ExpressionStatement	offset &= ~2u	5887:7:221546:221559	326679	0	True				
ANR	328364	AssignmentExpression	offset &= ~2u		326679	0		&=			
ANR	328365	Identifier	offset		326679	0					
ANR	328366	Identifier	~2u		326679	1					
ANR	328367	ExpressionStatement	"info -> print_address_func ( offset , info )"	5890:6:221576:221615	326679	12	True				
ANR	328368	CallExpression	"info -> print_address_func ( offset , info )"		326679	0					
ANR	328369	Callee	info -> print_address_func		326679	0					
ANR	328370	PtrMemberAccess	info -> print_address_func		326679	0					
ANR	328371	Identifier	info		326679	0					
ANR	328372	Identifier	print_address_func		326679	1					
ANR	328373	ArgumentList	offset		326679	1					
ANR	328374	Argument	offset		326679	0					
ANR	328375	Identifier	offset		326679	0					
ANR	328376	Argument	info		326679	1					
ANR	328377	Identifier	info		326679	0					
ANR	328378	BreakStatement	break ;	5891:7:221624:221629	326679	57	True				
ANR	328379	Label	case 's' :	5893:5:221637:221645	326679	58	True				
ANR	328380	CompoundStatement		362:6:8967:8989	326679	59					
ANR	328381	IdentifierDeclStatement	unsigned int shift = 0 ;	5894:6:221655:221677	326679	0	True				
ANR	328382	IdentifierDecl	shift = 0		326679	0					
ANR	328383	IdentifierDeclType	unsigned int		326679	0					
ANR	328384	Identifier	shift		326679	1					
ANR	328385	AssignmentExpression	shift = 0		326679	2		=			
ANR	328386	Identifier	shift		326679	0					
ANR	328387	PrimaryExpression	0		326679	1					
ANR	328388	ExpressionStatement	shift |= ( given & 0x000000c0u ) >> 6	5896:6:221686:221721	326679	1	True				
ANR	328389	AssignmentExpression	shift |= ( given & 0x000000c0u ) >> 6		326679	0		|=			
ANR	328390	Identifier	shift		326679	0					
ANR	328391	ShiftExpression	( given & 0x000000c0u ) >> 6		326679	1		>>			
ANR	328392	BitAndExpression	given & 0x000000c0u		326679	0		&			
ANR	328393	Identifier	given		326679	0					
ANR	328394	PrimaryExpression	0x000000c0u		326679	1					
ANR	328395	PrimaryExpression	6		326679	1					
ANR	328396	ExpressionStatement	shift |= ( given & 0x00007000u ) >> 10	5897:6:221729:221765	326679	2	True				
ANR	328397	AssignmentExpression	shift |= ( given & 0x00007000u ) >> 10		326679	0		|=			
ANR	328398	Identifier	shift		326679	0					
ANR	328399	ShiftExpression	( given & 0x00007000u ) >> 10		326679	1		>>			
ANR	328400	BitAndExpression	given & 0x00007000u		326679	0		&			
ANR	328401	Identifier	given		326679	0					
ANR	328402	PrimaryExpression	0x00007000u		326679	1					
ANR	328403	PrimaryExpression	10		326679	1					
ANR	328404	IfStatement	if ( WRITEBACK_BIT_SET )		326679	3					
ANR	328405	Condition	WRITEBACK_BIT_SET	5898:10:221777:221793	326679	0	True				
ANR	328406	Identifier	WRITEBACK_BIT_SET		326679	0					
ANR	328407	CompoundStatement		366:29:9108:9108	326679	1					
ANR	328408	ExpressionStatement	"func ( stream , "", asr %u"" , shift )"	5899:7:221805:221837	326679	0	True				
ANR	328409	CallExpression	"func ( stream , "", asr %u"" , shift )"		326679	0					
ANR	328410	Callee	func		326679	0					
ANR	328411	Identifier	func		326679	0					
ANR	328412	ArgumentList	stream		326679	1					
ANR	328413	Argument	stream		326679	0					
ANR	328414	Identifier	stream		326679	0					
ANR	328415	Argument	""", asr %u"""		326679	1					
ANR	328416	PrimaryExpression	""", asr %u"""		326679	0					
ANR	328417	Argument	shift		326679	2					
ANR	328418	Identifier	shift		326679	0					
ANR	328419	ElseStatement	else		326679	0					
ANR	328420	IfStatement	if ( shift )		326679	0					
ANR	328421	Condition	shift	5900:17:221856:221860	326679	0	True				
ANR	328422	Identifier	shift		326679	0					
ANR	328423	CompoundStatement		368:24:9175:9175	326679	1					
ANR	328424	ExpressionStatement	"func ( stream , "", lsl %u"" , shift )"	5901:7:221872:221904	326679	0	True				
ANR	328425	CallExpression	"func ( stream , "", lsl %u"" , shift )"		326679	0					
ANR	328426	Callee	func		326679	0					
ANR	328427	Identifier	func		326679	0					
ANR	328428	ArgumentList	stream		326679	1					
ANR	328429	Argument	stream		326679	0					
ANR	328430	Identifier	stream		326679	0					
ANR	328431	Argument	""", lsl %u"""		326679	1					
ANR	328432	PrimaryExpression	""", lsl %u"""		326679	0					
ANR	328433	Argument	shift		326679	2					
ANR	328434	Identifier	shift		326679	0					
ANR	328435	BreakStatement	break ;	5904:7:221961:221966	326679	60	True				
ANR	328436	Label	case 'R' :	5906:5:221974:221982	326679	61	True				
ANR	328437	CompoundStatement		375:6:9304:9348	326679	62					
ANR	328438	IdentifierDeclStatement	unsigned int rot = ( given & 0x00000030 ) >> 4 ;	5907:6:221992:222036	326679	0	True				
ANR	328439	IdentifierDecl	rot = ( given & 0x00000030 ) >> 4		326679	0					
ANR	328440	IdentifierDeclType	unsigned int		326679	0					
ANR	328441	Identifier	rot		326679	1					
ANR	328442	AssignmentExpression	rot = ( given & 0x00000030 ) >> 4		326679	2		=			
ANR	328443	Identifier	rot		326679	0					
ANR	328444	ShiftExpression	( given & 0x00000030 ) >> 4		326679	1		>>			
ANR	328445	BitAndExpression	given & 0x00000030		326679	0		&			
ANR	328446	Identifier	given		326679	0					
ANR	328447	PrimaryExpression	0x00000030		326679	1					
ANR	328448	PrimaryExpression	4		326679	1					
ANR	328449	IfStatement	if ( rot )		326679	1					
ANR	328450	Condition	rot	5909:10:222049:222051	326679	0	True				
ANR	328451	Identifier	rot		326679	0					
ANR	328452	CompoundStatement		377:15:9366:9366	326679	1					
ANR	328453	ExpressionStatement	"func ( stream , "", ror %u"" , rot * 8 )"	5910:7:222063:222097	326679	0	True				
ANR	328454	CallExpression	"func ( stream , "", ror %u"" , rot * 8 )"		326679	0					
ANR	328455	Callee	func		326679	0					
ANR	328456	Identifier	func		326679	0					
ANR	328457	ArgumentList	stream		326679	1					
ANR	328458	Argument	stream		326679	0					
ANR	328459	Identifier	stream		326679	0					
ANR	328460	Argument	""", ror %u"""		326679	1					
ANR	328461	PrimaryExpression	""", ror %u"""		326679	0					
ANR	328462	Argument	rot * 8		326679	2					
ANR	328463	MultiplicativeExpression	rot * 8		326679	0		*			
ANR	328464	Identifier	rot		326679	0					
ANR	328465	PrimaryExpression	8		326679	1					
ANR	328466	BreakStatement	break ;	5912:7:222114:222119	326679	63	True				
ANR	328467	Label	case 'U' :	5914:5:222127:222135	326679	64	True				
ANR	328468	IfStatement	if ( ( given & 0xf0 ) == 0x60 )		326679	65					
ANR	328469	Condition	( given & 0xf0 ) == 0x60	5915:10:222147:222168	326679	0	True				
ANR	328470	EqualityExpression	( given & 0xf0 ) == 0x60		326679	0		==			
ANR	328471	BitAndExpression	given & 0xf0		326679	0		&			
ANR	328472	Identifier	given		326679	0					
ANR	328473	PrimaryExpression	0xf0		326679	1					
ANR	328474	PrimaryExpression	0x60		326679	1					
ANR	328475	CompoundStatement		383:34:9483:9483	326679	1					
ANR	328476	SwitchStatement	switch ( given & 0xf )		326679	0					
ANR	328477	Condition	given & 0xf	5916:15:222188:222198	326679	0	True				
ANR	328478	BitAndExpression	given & 0xf		326679	0		&			
ANR	328479	Identifier	given		326679	0					
ANR	328480	PrimaryExpression	0xf		326679	1					
ANR	328481	CompoundStatement		384:28:9513:9513	326679	1					
ANR	328482	Label	case 0xf :	5917:7:222210:222218	326679	0	True				
ANR	328483	ExpressionStatement	"func ( stream , ""sy"" )"	5917:17:222220:222239	326679	1	True				
ANR	328484	CallExpression	"func ( stream , ""sy"" )"		326679	0					
ANR	328485	Callee	func		326679	0					
ANR	328486	Identifier	func		326679	0					
ANR	328487	ArgumentList	stream		326679	1					
ANR	328488	Argument	stream		326679	0					
ANR	328489	Identifier	stream		326679	0					
ANR	328490	Argument	"""sy"""		326679	1					
ANR	328491	PrimaryExpression	"""sy"""		326679	0					
ANR	328492	BreakStatement	break ;	5917:38:222241:222246	326679	2	True				
ANR	328493	Label	default :	5918:7:222255:222262	326679	3	True				
ANR	328494	Identifier	default		326679	0					
ANR	328495	ExpressionStatement	"func ( stream , ""%d"" , ( int ) given & 0xf )"	5919:8:222272:222309	326679	4	True				
ANR	328496	CallExpression	"func ( stream , ""%d"" , ( int ) given & 0xf )"		326679	0					
ANR	328497	Callee	func		326679	0					
ANR	328498	Identifier	func		326679	0					
ANR	328499	ArgumentList	stream		326679	1					
ANR	328500	Argument	stream		326679	0					
ANR	328501	Identifier	stream		326679	0					
ANR	328502	Argument	"""%d"""		326679	1					
ANR	328503	PrimaryExpression	"""%d"""		326679	0					
ANR	328504	Argument	( int ) given & 0xf		326679	2					
ANR	328505	BitAndExpression	( int ) given & 0xf		326679	0		&			
ANR	328506	CastExpression	( int ) given		326679	0					
ANR	328507	CastTarget	int		326679	0					
ANR	328508	Identifier	given		326679	1					
ANR	328509	PrimaryExpression	0xf		326679	1					
ANR	328510	BreakStatement	break ;	5920:8:222319:222324	326679	5	True				
ANR	328511	ElseStatement	else		326679	0					
ANR	328512	CompoundStatement		391:7:9669:9720	326679	0					
ANR	328513	IdentifierDeclStatement	const char * opt = data_barrier_option ( given & 0xf ) ;	5923:7:222357:222408	326679	0	True				
ANR	328514	IdentifierDecl	* opt = data_barrier_option ( given & 0xf )		326679	0					
ANR	328515	IdentifierDeclType	const char *		326679	0					
ANR	328516	Identifier	opt		326679	1					
ANR	328517	AssignmentExpression	* opt = data_barrier_option ( given & 0xf )		326679	2		=			
ANR	328518	Identifier	opt		326679	0					
ANR	328519	CallExpression	data_barrier_option ( given & 0xf )		326679	1					
ANR	328520	Callee	data_barrier_option		326679	0					
ANR	328521	Identifier	data_barrier_option		326679	0					
ANR	328522	ArgumentList	given & 0xf		326679	1					
ANR	328523	Argument	given & 0xf		326679	0					
ANR	328524	BitAndExpression	given & 0xf		326679	0		&			
ANR	328525	Identifier	given		326679	0					
ANR	328526	PrimaryExpression	0xf		326679	1					
ANR	328527	IfStatement	if ( opt != NULL )		326679	1					
ANR	328528	Condition	opt != NULL	5924:11:222421:222431	326679	0	True				
ANR	328529	EqualityExpression	opt != NULL		326679	0		!=			
ANR	328530	Identifier	opt		326679	0					
ANR	328531	Identifier	NULL		326679	1					
ANR	328532	CompoundStatement		392:24:9746:9746	326679	1					
ANR	328533	ExpressionStatement	"func ( stream , ""%s"" , opt )"	5925:8:222444:222468	326679	0	True				
ANR	328534	CallExpression	"func ( stream , ""%s"" , opt )"		326679	0					
ANR	328535	Callee	func		326679	0					
ANR	328536	Identifier	func		326679	0					
ANR	328537	ArgumentList	stream		326679	1					
ANR	328538	Argument	stream		326679	0					
ANR	328539	Identifier	stream		326679	0					
ANR	328540	Argument	"""%s"""		326679	1					
ANR	328541	PrimaryExpression	"""%s"""		326679	0					
ANR	328542	Argument	opt		326679	2					
ANR	328543	Identifier	opt		326679	0					
ANR	328544	ElseStatement	else		326679	0					
ANR	328545	CompoundStatement		394:14:9796:9796	326679	0					
ANR	328546	ExpressionStatement	"func ( stream , ""%d"" , ( int ) given & 0xf )"	5927:8:222494:222531	326679	0	True				
ANR	328547	CallExpression	"func ( stream , ""%d"" , ( int ) given & 0xf )"		326679	0					
ANR	328548	Callee	func		326679	0					
ANR	328549	Identifier	func		326679	0					
ANR	328550	ArgumentList	stream		326679	1					
ANR	328551	Argument	stream		326679	0					
ANR	328552	Identifier	stream		326679	0					
ANR	328553	Argument	"""%d"""		326679	1					
ANR	328554	PrimaryExpression	"""%d"""		326679	0					
ANR	328555	Argument	( int ) given & 0xf		326679	2					
ANR	328556	BitAndExpression	( int ) given & 0xf		326679	0		&			
ANR	328557	CastExpression	( int ) given		326679	0					
ANR	328558	CastTarget	int		326679	0					
ANR	328559	Identifier	given		326679	1					
ANR	328560	PrimaryExpression	0xf		326679	1					
ANR	328561	BreakStatement	break ;	5930:6:222556:222561	326679	66	True				
ANR	328562	Label	case 'C' :	5932:5:222569:222577	326679	67	True				
ANR	328563	IfStatement	if ( ( given & 0xff ) == 0 )		326679	68					
ANR	328564	Condition	( given & 0xff ) == 0	5933:10:222589:222607	326679	0	True				
ANR	328565	EqualityExpression	( given & 0xff ) == 0		326679	0		==			
ANR	328566	BitAndExpression	given & 0xff		326679	0		&			
ANR	328567	Identifier	given		326679	0					
ANR	328568	PrimaryExpression	0xff		326679	1					
ANR	328569	PrimaryExpression	0		326679	1					
ANR	328570	CompoundStatement		401:31:9922:9922	326679	1					
ANR	328571	ExpressionStatement	"func ( stream , ""%cPSR_"" , ( given & 0x100000 ) ? 'S' : 'C' )"	5934:7:222619:222674	326679	0	True				
ANR	328572	CallExpression	"func ( stream , ""%cPSR_"" , ( given & 0x100000 ) ? 'S' : 'C' )"		326679	0					
ANR	328573	Callee	func		326679	0					
ANR	328574	Identifier	func		326679	0					
ANR	328575	ArgumentList	stream		326679	1					
ANR	328576	Argument	stream		326679	0					
ANR	328577	Identifier	stream		326679	0					
ANR	328578	Argument	"""%cPSR_"""		326679	1					
ANR	328579	PrimaryExpression	"""%cPSR_"""		326679	0					
ANR	328580	Argument	( given & 0x100000 ) ? 'S' : 'C'		326679	2					
ANR	328581	ConditionalExpression	( given & 0x100000 ) ? 'S' : 'C'		326679	0					
ANR	328582	Condition	given & 0x100000		326679	0					
ANR	328583	BitAndExpression	given & 0x100000		326679	0		&			
ANR	328584	Identifier	given		326679	0					
ANR	328585	PrimaryExpression	0x100000		326679	1					
ANR	328586	PrimaryExpression	'S'		326679	1					
ANR	328587	PrimaryExpression	'C'		326679	2					
ANR	328588	IfStatement	if ( given & 0x800 )		326679	1					
ANR	328589	Condition	given & 0x800	5935:11:222687:222699	326679	0	True				
ANR	328590	BitAndExpression	given & 0x800		326679	0		&			
ANR	328591	Identifier	given		326679	0					
ANR	328592	PrimaryExpression	0x800		326679	1					
ANR	328593	CompoundStatement		403:26:10014:10014	326679	1					
ANR	328594	ExpressionStatement	"func ( stream , ""f"" )"	5936:8:222712:222730	326679	0	True				
ANR	328595	CallExpression	"func ( stream , ""f"" )"		326679	0					
ANR	328596	Callee	func		326679	0					
ANR	328597	Identifier	func		326679	0					
ANR	328598	ArgumentList	stream		326679	1					
ANR	328599	Argument	stream		326679	0					
ANR	328600	Identifier	stream		326679	0					
ANR	328601	Argument	"""f"""		326679	1					
ANR	328602	PrimaryExpression	"""f"""		326679	0					
ANR	328603	IfStatement	if ( given & 0x400 )		326679	2					
ANR	328604	Condition	given & 0x400	5938:11:222752:222764	326679	0	True				
ANR	328605	BitAndExpression	given & 0x400		326679	0		&			
ANR	328606	Identifier	given		326679	0					
ANR	328607	PrimaryExpression	0x400		326679	1					
ANR	328608	CompoundStatement		406:26:10079:10079	326679	1					
ANR	328609	ExpressionStatement	"func ( stream , ""s"" )"	5939:8:222777:222795	326679	0	True				
ANR	328610	CallExpression	"func ( stream , ""s"" )"		326679	0					
ANR	328611	Callee	func		326679	0					
ANR	328612	Identifier	func		326679	0					
ANR	328613	ArgumentList	stream		326679	1					
ANR	328614	Argument	stream		326679	0					
ANR	328615	Identifier	stream		326679	0					
ANR	328616	Argument	"""s"""		326679	1					
ANR	328617	PrimaryExpression	"""s"""		326679	0					
ANR	328618	IfStatement	if ( given & 0x200 )		326679	3					
ANR	328619	Condition	given & 0x200	5941:11:222817:222829	326679	0	True				
ANR	328620	BitAndExpression	given & 0x200		326679	0		&			
ANR	328621	Identifier	given		326679	0					
ANR	328622	PrimaryExpression	0x200		326679	1					
ANR	328623	CompoundStatement		409:26:10144:10144	326679	1					
ANR	328624	ExpressionStatement	"func ( stream , ""x"" )"	5942:8:222842:222860	326679	0	True				
ANR	328625	CallExpression	"func ( stream , ""x"" )"		326679	0					
ANR	328626	Callee	func		326679	0					
ANR	328627	Identifier	func		326679	0					
ANR	328628	ArgumentList	stream		326679	1					
ANR	328629	Argument	stream		326679	0					
ANR	328630	Identifier	stream		326679	0					
ANR	328631	Argument	"""x"""		326679	1					
ANR	328632	PrimaryExpression	"""x"""		326679	0					
ANR	328633	IfStatement	if ( given & 0x100 )		326679	4					
ANR	328634	Condition	given & 0x100	5944:11:222882:222894	326679	0	True				
ANR	328635	BitAndExpression	given & 0x100		326679	0		&			
ANR	328636	Identifier	given		326679	0					
ANR	328637	PrimaryExpression	0x100		326679	1					
ANR	328638	CompoundStatement		412:26:10209:10209	326679	1					
ANR	328639	ExpressionStatement	"func ( stream , ""c"" )"	5945:8:222907:222925	326679	0	True				
ANR	328640	CallExpression	"func ( stream , ""c"" )"		326679	0					
ANR	328641	Callee	func		326679	0					
ANR	328642	Identifier	func		326679	0					
ANR	328643	ArgumentList	stream		326679	1					
ANR	328644	Argument	stream		326679	0					
ANR	328645	Identifier	stream		326679	0					
ANR	328646	Argument	"""c"""		326679	1					
ANR	328647	PrimaryExpression	"""c"""		326679	0					
ANR	328648	ElseStatement	else		326679	0					
ANR	328649	IfStatement	if ( ( given & 0x20 ) == 0x20 )		326679	0					
ANR	328650	Condition	( given & 0x20 ) == 0x20	5947:17:222953:222974	326679	0	True				
ANR	328651	EqualityExpression	( given & 0x20 ) == 0x20		326679	0		==			
ANR	328652	BitAndExpression	given & 0x20		326679	0		&			
ANR	328653	Identifier	given		326679	0					
ANR	328654	PrimaryExpression	0x20		326679	1					
ANR	328655	PrimaryExpression	0x20		326679	1					
ANR	328656	CompoundStatement		417:7:10323:10359	326679	1					
ANR	328657	IdentifierDeclStatement	char const * name ;	5948:7:222986:223002	326679	0	True				
ANR	328658	IdentifierDecl	* name		326679	0					
ANR	328659	IdentifierDeclType	char const *		326679	0					
ANR	328660	Identifier	name		326679	1					
ANR	328661	IdentifierDeclStatement	unsigned sysm = ( given & 0xf00 ) >> 8 ;	5949:7:223011:223047	326679	1	True				
ANR	328662	IdentifierDecl	sysm = ( given & 0xf00 ) >> 8		326679	0					
ANR	328663	IdentifierDeclType	unsigned		326679	0					
ANR	328664	Identifier	sysm		326679	1					
ANR	328665	AssignmentExpression	sysm = ( given & 0xf00 ) >> 8		326679	2		=			
ANR	328666	Identifier	sysm		326679	0					
ANR	328667	ShiftExpression	( given & 0xf00 ) >> 8		326679	1		>>			
ANR	328668	BitAndExpression	given & 0xf00		326679	0		&			
ANR	328669	Identifier	given		326679	0					
ANR	328670	PrimaryExpression	0xf00		326679	1					
ANR	328671	PrimaryExpression	8		326679	1					
ANR	328672	ExpressionStatement	sysm |= ( given & 0x30 )	5951:7:223057:223079	326679	2	True				
ANR	328673	AssignmentExpression	sysm |= ( given & 0x30 )		326679	0		|=			
ANR	328674	Identifier	sysm		326679	0					
ANR	328675	BitAndExpression	given & 0x30		326679	1		&			
ANR	328676	Identifier	given		326679	0					
ANR	328677	PrimaryExpression	0x30		326679	1					
ANR	328678	ExpressionStatement	sysm |= ( given & 0x00100000 ) >> 14	5952:7:223088:223122	326679	3	True				
ANR	328679	AssignmentExpression	sysm |= ( given & 0x00100000 ) >> 14		326679	0		|=			
ANR	328680	Identifier	sysm		326679	0					
ANR	328681	ShiftExpression	( given & 0x00100000 ) >> 14		326679	1		>>			
ANR	328682	BitAndExpression	given & 0x00100000		326679	0		&			
ANR	328683	Identifier	given		326679	0					
ANR	328684	PrimaryExpression	0x00100000		326679	1					
ANR	328685	PrimaryExpression	14		326679	1					
ANR	328686	ExpressionStatement	name = banked_regname ( sysm )	5953:7:223131:223159	326679	4	True				
ANR	328687	AssignmentExpression	name = banked_regname ( sysm )		326679	0		=			
ANR	328688	Identifier	name		326679	0					
ANR	328689	CallExpression	banked_regname ( sysm )		326679	1					
ANR	328690	Callee	banked_regname		326679	0					
ANR	328691	Identifier	banked_regname		326679	0					
ANR	328692	ArgumentList	sysm		326679	1					
ANR	328693	Argument	sysm		326679	0					
ANR	328694	Identifier	sysm		326679	0					
ANR	328695	IfStatement	if ( name != NULL )		326679	5					
ANR	328696	Condition	name != NULL	5955:11:223173:223184	326679	0	True				
ANR	328697	EqualityExpression	name != NULL		326679	0		!=			
ANR	328698	Identifier	name		326679	0					
ANR	328699	Identifier	NULL		326679	1					
ANR	328700	CompoundStatement		423:25:10499:10499	326679	1					
ANR	328701	ExpressionStatement	"func ( stream , ""%s"" , name )"	5956:8:223197:223222	326679	0	True				
ANR	328702	CallExpression	"func ( stream , ""%s"" , name )"		326679	0					
ANR	328703	Callee	func		326679	0					
ANR	328704	Identifier	func		326679	0					
ANR	328705	ArgumentList	stream		326679	1					
ANR	328706	Argument	stream		326679	0					
ANR	328707	Identifier	stream		326679	0					
ANR	328708	Argument	"""%s"""		326679	1					
ANR	328709	PrimaryExpression	"""%s"""		326679	0					
ANR	328710	Argument	name		326679	2					
ANR	328711	Identifier	name		326679	0					
ANR	328712	ElseStatement	else		326679	0					
ANR	328713	CompoundStatement		425:14:10550:10550	326679	0					
ANR	328714	ExpressionStatement	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"	5958:8:223248:223298	326679	0	True				
ANR	328715	CallExpression	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sysm )"		326679	0					
ANR	328716	Callee	func		326679	0					
ANR	328717	Identifier	func		326679	0					
ANR	328718	ArgumentList	stream		326679	1					
ANR	328719	Argument	stream		326679	0					
ANR	328720	Identifier	stream		326679	0					
ANR	328721	Argument	"""(UNDEF: %lu)"""		326679	1					
ANR	328722	PrimaryExpression	"""(UNDEF: %lu)"""		326679	0					
ANR	328723	Argument	( unsigned long ) sysm		326679	2					
ANR	328724	CastExpression	( unsigned long ) sysm		326679	0					
ANR	328725	CastTarget	unsigned long		326679	0					
ANR	328726	Identifier	sysm		326679	1					
ANR	328727	ElseStatement	else		326679	0					
ANR	328728	CompoundStatement		428:13:10634:10634	326679	0					
ANR	328729	ExpressionStatement	"func ( stream , ""%s"" , psr_name ( given & 0xff ) )"	5961:7:223331:223375	326679	0	True				
ANR	328730	CallExpression	"func ( stream , ""%s"" , psr_name ( given & 0xff ) )"		326679	0					
ANR	328731	Callee	func		326679	0					
ANR	328732	Identifier	func		326679	0					
ANR	328733	ArgumentList	stream		326679	1					
ANR	328734	Argument	stream		326679	0					
ANR	328735	Identifier	stream		326679	0					
ANR	328736	Argument	"""%s"""		326679	1					
ANR	328737	PrimaryExpression	"""%s"""		326679	0					
ANR	328738	Argument	psr_name ( given & 0xff )		326679	2					
ANR	328739	CallExpression	psr_name ( given & 0xff )		326679	0					
ANR	328740	Callee	psr_name		326679	0					
ANR	328741	Identifier	psr_name		326679	0					
ANR	328742	ArgumentList	given & 0xff		326679	1					
ANR	328743	Argument	given & 0xff		326679	0					
ANR	328744	BitAndExpression	given & 0xff		326679	0		&			
ANR	328745	Identifier	given		326679	0					
ANR	328746	PrimaryExpression	0xff		326679	1					
ANR	328747	BreakStatement	break ;	5963:6:223391:223396	326679	69	True				
ANR	328748	Label	case 'D' :	5965:5:223404:223412	326679	70	True				
ANR	328749	IfStatement	if ( ( ( given & 0xff ) == 0 ) || ( ( given & 0x20 ) == 0x20 ) )		326679	71					
ANR	328750	Condition	( ( given & 0xff ) == 0 ) || ( ( given & 0x20 ) == 0x20 )	5966:10:223424:223472	326679	0	True				
ANR	328751	OrExpression	( ( given & 0xff ) == 0 ) || ( ( given & 0x20 ) == 0x20 )		326679	0		||			
ANR	328752	EqualityExpression	( given & 0xff ) == 0		326679	0		==			
ANR	328753	BitAndExpression	given & 0xff		326679	0		&			
ANR	328754	Identifier	given		326679	0					
ANR	328755	PrimaryExpression	0xff		326679	1					
ANR	328756	PrimaryExpression	0		326679	1					
ANR	328757	EqualityExpression	( given & 0x20 ) == 0x20		326679	1		==			
ANR	328758	BitAndExpression	given & 0x20		326679	0		&			
ANR	328759	Identifier	given		326679	0					
ANR	328760	PrimaryExpression	0x20		326679	1					
ANR	328761	PrimaryExpression	0x20		326679	1					
ANR	328762	CompoundStatement		436:7:10821:10858	326679	1					
ANR	328763	IdentifierDeclStatement	char const * name ;	5967:7:223484:223500	326679	0	True				
ANR	328764	IdentifierDecl	* name		326679	0					
ANR	328765	IdentifierDeclType	char const *		326679	0					
ANR	328766	Identifier	name		326679	1					
ANR	328767	IdentifierDeclStatement	unsigned sm = ( given & 0xf0000 ) >> 16 ;	5968:7:223509:223546	326679	1	True				
ANR	328768	IdentifierDecl	sm = ( given & 0xf0000 ) >> 16		326679	0					
ANR	328769	IdentifierDeclType	unsigned		326679	0					
ANR	328770	Identifier	sm		326679	1					
ANR	328771	AssignmentExpression	sm = ( given & 0xf0000 ) >> 16		326679	2		=			
ANR	328772	Identifier	sm		326679	0					
ANR	328773	ShiftExpression	( given & 0xf0000 ) >> 16		326679	1		>>			
ANR	328774	BitAndExpression	given & 0xf0000		326679	0		&			
ANR	328775	Identifier	given		326679	0					
ANR	328776	PrimaryExpression	0xf0000		326679	1					
ANR	328777	PrimaryExpression	16		326679	1					
ANR	328778	ExpressionStatement	sm |= ( given & 0x30 )	5970:7:223556:223576	326679	2	True				
ANR	328779	AssignmentExpression	sm |= ( given & 0x30 )		326679	0		|=			
ANR	328780	Identifier	sm		326679	0					
ANR	328781	BitAndExpression	given & 0x30		326679	1		&			
ANR	328782	Identifier	given		326679	0					
ANR	328783	PrimaryExpression	0x30		326679	1					
ANR	328784	ExpressionStatement	sm |= ( given & 0x00100000 ) >> 14	5971:7:223585:223617	326679	3	True				
ANR	328785	AssignmentExpression	sm |= ( given & 0x00100000 ) >> 14		326679	0		|=			
ANR	328786	Identifier	sm		326679	0					
ANR	328787	ShiftExpression	( given & 0x00100000 ) >> 14		326679	1		>>			
ANR	328788	BitAndExpression	given & 0x00100000		326679	0		&			
ANR	328789	Identifier	given		326679	0					
ANR	328790	PrimaryExpression	0x00100000		326679	1					
ANR	328791	PrimaryExpression	14		326679	1					
ANR	328792	ExpressionStatement	name = banked_regname ( sm )	5972:7:223626:223652	326679	4	True				
ANR	328793	AssignmentExpression	name = banked_regname ( sm )		326679	0		=			
ANR	328794	Identifier	name		326679	0					
ANR	328795	CallExpression	banked_regname ( sm )		326679	1					
ANR	328796	Callee	banked_regname		326679	0					
ANR	328797	Identifier	banked_regname		326679	0					
ANR	328798	ArgumentList	sm		326679	1					
ANR	328799	Argument	sm		326679	0					
ANR	328800	Identifier	sm		326679	0					
ANR	328801	IfStatement	if ( name != NULL )		326679	5					
ANR	328802	Condition	name != NULL	5974:11:223666:223677	326679	0	True				
ANR	328803	EqualityExpression	name != NULL		326679	0		!=			
ANR	328804	Identifier	name		326679	0					
ANR	328805	Identifier	NULL		326679	1					
ANR	328806	CompoundStatement		442:25:10992:10992	326679	1					
ANR	328807	ExpressionStatement	"func ( stream , ""%s"" , name )"	5975:8:223690:223715	326679	0	True				
ANR	328808	CallExpression	"func ( stream , ""%s"" , name )"		326679	0					
ANR	328809	Callee	func		326679	0					
ANR	328810	Identifier	func		326679	0					
ANR	328811	ArgumentList	stream		326679	1					
ANR	328812	Argument	stream		326679	0					
ANR	328813	Identifier	stream		326679	0					
ANR	328814	Argument	"""%s"""		326679	1					
ANR	328815	PrimaryExpression	"""%s"""		326679	0					
ANR	328816	Argument	name		326679	2					
ANR	328817	Identifier	name		326679	0					
ANR	328818	ElseStatement	else		326679	0					
ANR	328819	CompoundStatement		444:14:11043:11043	326679	0					
ANR	328820	ExpressionStatement	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sm )"	5977:8:223741:223789	326679	0	True				
ANR	328821	CallExpression	"func ( stream , ""(UNDEF: %lu)"" , ( unsigned long ) sm )"		326679	0					
ANR	328822	Callee	func		326679	0					
ANR	328823	Identifier	func		326679	0					
ANR	328824	ArgumentList	stream		326679	1					
ANR	328825	Argument	stream		326679	0					
ANR	328826	Identifier	stream		326679	0					
ANR	328827	Argument	"""(UNDEF: %lu)"""		326679	1					
ANR	328828	PrimaryExpression	"""(UNDEF: %lu)"""		326679	0					
ANR	328829	Argument	( unsigned long ) sm		326679	2					
ANR	328830	CastExpression	( unsigned long ) sm		326679	0					
ANR	328831	CastTarget	unsigned long		326679	0					
ANR	328832	Identifier	sm		326679	1					
ANR	328833	ElseStatement	else		326679	0					
ANR	328834	CompoundStatement		447:13:11125:11125	326679	0					
ANR	328835	ExpressionStatement	"func ( stream , ""%s"" , psr_name ( given & 0xff ) )"	5980:7:223822:223866	326679	0	True				
ANR	328836	CallExpression	"func ( stream , ""%s"" , psr_name ( given & 0xff ) )"		326679	0					
ANR	328837	Callee	func		326679	0					
ANR	328838	Identifier	func		326679	0					
ANR	328839	ArgumentList	stream		326679	1					
ANR	328840	Argument	stream		326679	0					
ANR	328841	Identifier	stream		326679	0					
ANR	328842	Argument	"""%s"""		326679	1					
ANR	328843	PrimaryExpression	"""%s"""		326679	0					
ANR	328844	Argument	psr_name ( given & 0xff )		326679	2					
ANR	328845	CallExpression	psr_name ( given & 0xff )		326679	0					
ANR	328846	Callee	psr_name		326679	0					
ANR	328847	Identifier	psr_name		326679	0					
ANR	328848	ArgumentList	given & 0xff		326679	1					
ANR	328849	Argument	given & 0xff		326679	0					
ANR	328850	BitAndExpression	given & 0xff		326679	0		&			
ANR	328851	Identifier	given		326679	0					
ANR	328852	PrimaryExpression	0xff		326679	1					
ANR	328853	BreakStatement	break ;	5982:6:223882:223887	326679	72	True				
ANR	328854	Label	case '0' :	5984:5:223895:223903	326679	73	True				
ANR	328855	Label	case '1' :	5985:5:223910:223918	326679	74	True				
ANR	328856	Label	case '2' :	5986:5:223925:223933	326679	75	True				
ANR	328857	Label	case '3' :	5987:5:223940:223948	326679	76	True				
ANR	328858	Label	case '4' :	5988:5:223955:223963	326679	77	True				
ANR	328859	Label	case '5' :	5989:5:223970:223978	326679	78	True				
ANR	328860	Label	case '6' :	5990:5:223985:223993	326679	79	True				
ANR	328861	Label	case '7' :	5991:5:224000:224008	326679	80	True				
ANR	328862	Label	case '8' :	5992:5:224015:224023	326679	81	True				
ANR	328863	Label	case '9' :	5993:5:224030:224038	326679	82	True				
ANR	328864	CompoundStatement		463:6:11377:11394	326679	83					
ANR	328865	IdentifierDeclStatement	int width ;	5994:6:224048:224057	326679	0	True				
ANR	328866	IdentifierDecl	width		326679	0					
ANR	328867	IdentifierDeclType	int		326679	0					
ANR	328868	Identifier	width		326679	1					
ANR	328869	IdentifierDeclStatement	unsigned long val ;	5995:6:224065:224082	326679	1	True				
ANR	328870	IdentifierDecl	val		326679	0					
ANR	328871	IdentifierDeclType	unsigned long		326679	0					
ANR	328872	Identifier	val		326679	1					
ANR	328873	ExpressionStatement	"c = arm_decode_bitfield ( c , given , & val , & width )"	5997:6:224091:224139	326679	2	True				
ANR	328874	AssignmentExpression	"c = arm_decode_bitfield ( c , given , & val , & width )"		326679	0		=			
ANR	328875	Identifier	c		326679	0					
ANR	328876	CallExpression	"arm_decode_bitfield ( c , given , & val , & width )"		326679	1					
ANR	328877	Callee	arm_decode_bitfield		326679	0					
ANR	328878	Identifier	arm_decode_bitfield		326679	0					
ANR	328879	ArgumentList	c		326679	1					
ANR	328880	Argument	c		326679	0					
ANR	328881	Identifier	c		326679	0					
ANR	328882	Argument	given		326679	1					
ANR	328883	Identifier	given		326679	0					
ANR	328884	Argument	& val		326679	2					
ANR	328885	UnaryOperationExpression	& val		326679	0					
ANR	328886	UnaryOperator	&		326679	0					
ANR	328887	Identifier	val		326679	1					
ANR	328888	Argument	& width		326679	3					
ANR	328889	UnaryOperationExpression	& width		326679	0					
ANR	328890	UnaryOperator	&		326679	0					
ANR	328891	Identifier	width		326679	1					
ANR	328892	SwitchStatement	switch ( * c )		326679	3					
ANR	328893	Condition	* c	5999:14:224156:224157	326679	0	True				
ANR	328894	UnaryOperationExpression	* c		326679	0					
ANR	328895	UnaryOperator	*		326679	0					
ANR	328896	Identifier	c		326679	1					
ANR	328897	CompoundStatement		467:18:11472:11472	326679	1					
ANR	328898	Label	case 'd' :	6000:6:224168:224176	326679	0	True				
ANR	328899	ExpressionStatement	"func ( stream , ""%lu"" , val )"	6001:7:224185:224210	326679	1	True				
ANR	328900	CallExpression	"func ( stream , ""%lu"" , val )"		326679	0					
ANR	328901	Callee	func		326679	0					
ANR	328902	Identifier	func		326679	0					
ANR	328903	ArgumentList	stream		326679	1					
ANR	328904	Argument	stream		326679	0					
ANR	328905	Identifier	stream		326679	0					
ANR	328906	Argument	"""%lu"""		326679	1					
ANR	328907	PrimaryExpression	"""%lu"""		326679	0					
ANR	328908	Argument	val		326679	2					
ANR	328909	Identifier	val		326679	0					
ANR	328910	BreakStatement	break ;	6003:7:224252:224257	326679	2	True				
ANR	328911	Label	case 'D' :	6005:6:224266:224274	326679	3	True				
ANR	328912	ExpressionStatement	"func ( stream , ""%lu"" , val + 1 )"	6006:7:224283:224312	326679	4	True				
ANR	328913	CallExpression	"func ( stream , ""%lu"" , val + 1 )"		326679	0					
ANR	328914	Callee	func		326679	0					
ANR	328915	Identifier	func		326679	0					
ANR	328916	ArgumentList	stream		326679	1					
ANR	328917	Argument	stream		326679	0					
ANR	328918	Identifier	stream		326679	0					
ANR	328919	Argument	"""%lu"""		326679	1					
ANR	328920	PrimaryExpression	"""%lu"""		326679	0					
ANR	328921	Argument	val + 1		326679	2					
ANR	328922	AdditiveExpression	val + 1		326679	0		+			
ANR	328923	Identifier	val		326679	0					
ANR	328924	PrimaryExpression	1		326679	1					
ANR	328925	BreakStatement	break ;	6008:7:224359:224364	326679	5	True				
ANR	328926	Label	case 'W' :	6010:6:224373:224381	326679	6	True				
ANR	328927	ExpressionStatement	"func ( stream , ""%lu"" , val * 4 )"	6011:7:224390:224419	326679	7	True				
ANR	328928	CallExpression	"func ( stream , ""%lu"" , val * 4 )"		326679	0					
ANR	328929	Callee	func		326679	0					
ANR	328930	Identifier	func		326679	0					
ANR	328931	ArgumentList	stream		326679	1					
ANR	328932	Argument	stream		326679	0					
ANR	328933	Identifier	stream		326679	0					
ANR	328934	Argument	"""%lu"""		326679	1					
ANR	328935	PrimaryExpression	"""%lu"""		326679	0					
ANR	328936	Argument	val * 4		326679	2					
ANR	328937	MultiplicativeExpression	val * 4		326679	0		*			
ANR	328938	Identifier	val		326679	0					
ANR	328939	PrimaryExpression	4		326679	1					
ANR	328940	BreakStatement	break ;	6013:7:224466:224471	326679	8	True				
ANR	328941	Label	case 'S' :	6015:6:224480:224488	326679	9	True				
ANR	328942	IfStatement	if ( val == 13 )		326679	10					
ANR	328943	Condition	val == 13	6016:11:224501:224509	326679	0	True				
ANR	328944	EqualityExpression	val == 13		326679	0		==			
ANR	328945	Identifier	val		326679	0					
ANR	328946	PrimaryExpression	13		326679	1					
ANR	328947	CompoundStatement		484:22:11824:11824	326679	1					
ANR	328948	ExpressionStatement	is_unpredictable = TRUE	6017:8:224522:224545	326679	0	True				
ANR	328949	AssignmentExpression	is_unpredictable = TRUE		326679	0		=			
ANR	328950	Identifier	is_unpredictable		326679	0					
ANR	328951	Identifier	TRUE		326679	1					
ANR	328952	Label	case 'R' :	6020:6:224590:224598	326679	11	True				
ANR	328953	IfStatement	if ( val == 15 )		326679	12					
ANR	328954	Condition	val == 15	6021:11:224611:224619	326679	0	True				
ANR	328955	EqualityExpression	val == 15		326679	0		==			
ANR	328956	Identifier	val		326679	0					
ANR	328957	PrimaryExpression	15		326679	1					
ANR	328958	CompoundStatement		489:22:11934:11934	326679	1					
ANR	328959	ExpressionStatement	is_unpredictable = TRUE	6022:8:224632:224655	326679	0	True				
ANR	328960	AssignmentExpression	is_unpredictable = TRUE		326679	0		=			
ANR	328961	Identifier	is_unpredictable		326679	0					
ANR	328962	Identifier	TRUE		326679	1					
ANR	328963	Label	case 'r' :	6025:6:224700:224708	326679	13	True				
ANR	328964	ExpressionStatement	"func ( stream , ""%s"" , arm_regnames [ val ] )"	6026:7:224717:224755	326679	14	True				
ANR	328965	CallExpression	"func ( stream , ""%s"" , arm_regnames [ val ] )"		326679	0					
ANR	328966	Callee	func		326679	0					
ANR	328967	Identifier	func		326679	0					
ANR	328968	ArgumentList	stream		326679	1					
ANR	328969	Argument	stream		326679	0					
ANR	328970	Identifier	stream		326679	0					
ANR	328971	Argument	"""%s"""		326679	1					
ANR	328972	PrimaryExpression	"""%s"""		326679	0					
ANR	328973	Argument	arm_regnames [ val ]		326679	2					
ANR	328974	ArrayIndexing	arm_regnames [ val ]		326679	0					
ANR	328975	Identifier	arm_regnames		326679	0					
ANR	328976	Identifier	val		326679	1					
ANR	328977	BreakStatement	break ;	6027:7:224764:224769	326679	15	True				
ANR	328978	Label	case 'c' :	6029:6:224778:224786	326679	16	True				
ANR	328979	ExpressionStatement	"func ( stream , ""%s"" , arm_conditional [ val ] )"	6030:7:224795:224836	326679	17	True				
ANR	328980	CallExpression	"func ( stream , ""%s"" , arm_conditional [ val ] )"		326679	0					
ANR	328981	Callee	func		326679	0					
ANR	328982	Identifier	func		326679	0					
ANR	328983	ArgumentList	stream		326679	1					
ANR	328984	Argument	stream		326679	0					
ANR	328985	Identifier	stream		326679	0					
ANR	328986	Argument	"""%s"""		326679	1					
ANR	328987	PrimaryExpression	"""%s"""		326679	0					
ANR	328988	Argument	arm_conditional [ val ]		326679	2					
ANR	328989	ArrayIndexing	arm_conditional [ val ]		326679	0					
ANR	328990	Identifier	arm_conditional		326679	0					
ANR	328991	Identifier	val		326679	1					
ANR	328992	BreakStatement	break ;	6031:7:224845:224850	326679	18	True				
ANR	328993	Label	case '\\'' :	6033:6:224859:224868	326679	19	True				
ANR	328994	ExpressionStatement	c ++	6034:7:224877:224880	326679	20	True				
ANR	328995	PostIncDecOperationExpression	c ++		326679	0					
ANR	328996	Identifier	c		326679	0					
ANR	328997	IncDec	++		326679	1					
ANR	328998	IfStatement	if ( val == ( ( 1ul << width ) - 1 ) )		326679	21					
ANR	328999	Condition	val == ( ( 1ul << width ) - 1 )	6035:11:224893:224919	326679	0	True				
ANR	329000	EqualityExpression	val == ( ( 1ul << width ) - 1 )		326679	0		==			
ANR	329001	Identifier	val		326679	0					
ANR	329002	AdditiveExpression	( 1ul << width ) - 1		326679	1		-			
ANR	329003	ShiftExpression	1ul << width		326679	0		<<			
ANR	329004	PrimaryExpression	1ul		326679	0					
ANR	329005	Identifier	width		326679	1					
ANR	329006	PrimaryExpression	1		326679	1					
ANR	329007	CompoundStatement		503:40:12234:12234	326679	1					
ANR	329008	ExpressionStatement	"func ( stream , ""%c"" , * c )"	6036:8:224932:224955	326679	0	True				
ANR	329009	CallExpression	"func ( stream , ""%c"" , * c )"		326679	0					
ANR	329010	Callee	func		326679	0					
ANR	329011	Identifier	func		326679	0					
ANR	329012	ArgumentList	stream		326679	1					
ANR	329013	Argument	stream		326679	0					
ANR	329014	Identifier	stream		326679	0					
ANR	329015	Argument	"""%c"""		326679	1					
ANR	329016	PrimaryExpression	"""%c"""		326679	0					
ANR	329017	Argument	* c		326679	2					
ANR	329018	UnaryOperationExpression	* c		326679	0					
ANR	329019	UnaryOperator	*		326679	0					
ANR	329020	Identifier	c		326679	1					
ANR	329021	BreakStatement	break ;	6038:7:224973:224978	326679	22	True				
ANR	329022	Label	case '`' :	6040:6:224987:224995	326679	23	True				
ANR	329023	ExpressionStatement	c ++	6041:7:225004:225007	326679	24	True				
ANR	329024	PostIncDecOperationExpression	c ++		326679	0					
ANR	329025	Identifier	c		326679	0					
ANR	329026	IncDec	++		326679	1					
ANR	329027	IfStatement	if ( val == 0 )		326679	25					
ANR	329028	Condition	val == 0	6042:11:225020:225027	326679	0	True				
ANR	329029	EqualityExpression	val == 0		326679	0		==			
ANR	329030	Identifier	val		326679	0					
ANR	329031	PrimaryExpression	0		326679	1					
ANR	329032	CompoundStatement		510:21:12342:12342	326679	1					
ANR	329033	ExpressionStatement	"func ( stream , ""%c"" , * c )"	6043:8:225040:225063	326679	0	True				
ANR	329034	CallExpression	"func ( stream , ""%c"" , * c )"		326679	0					
ANR	329035	Callee	func		326679	0					
ANR	329036	Identifier	func		326679	0					
ANR	329037	ArgumentList	stream		326679	1					
ANR	329038	Argument	stream		326679	0					
ANR	329039	Identifier	stream		326679	0					
ANR	329040	Argument	"""%c"""		326679	1					
ANR	329041	PrimaryExpression	"""%c"""		326679	0					
ANR	329042	Argument	* c		326679	2					
ANR	329043	UnaryOperationExpression	* c		326679	0					
ANR	329044	UnaryOperator	*		326679	0					
ANR	329045	Identifier	c		326679	1					
ANR	329046	BreakStatement	break ;	6045:7:225081:225086	326679	26	True				
ANR	329047	Label	case '?' :	6047:6:225095:225103	326679	27	True				
ANR	329048	ExpressionStatement	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) val ] )"	6048:7:225112:225159	326679	28	True				
ANR	329049	CallExpression	"func ( stream , ""%c"" , c [ ( 1 << width ) - ( int ) val ] )"		326679	0					
ANR	329050	Callee	func		326679	0					
ANR	329051	Identifier	func		326679	0					
ANR	329052	ArgumentList	stream		326679	1					
ANR	329053	Argument	stream		326679	0					
ANR	329054	Identifier	stream		326679	0					
ANR	329055	Argument	"""%c"""		326679	1					
ANR	329056	PrimaryExpression	"""%c"""		326679	0					
ANR	329057	Argument	c [ ( 1 << width ) - ( int ) val ]		326679	2					
ANR	329058	ArrayIndexing	c [ ( 1 << width ) - ( int ) val ]		326679	0					
ANR	329059	Identifier	c		326679	0					
ANR	329060	AdditiveExpression	( 1 << width ) - ( int ) val		326679	1		-			
ANR	329061	ShiftExpression	1 << width		326679	0		<<			
ANR	329062	PrimaryExpression	1		326679	0					
ANR	329063	Identifier	width		326679	1					
ANR	329064	CastExpression	( int ) val		326679	1					
ANR	329065	CastTarget	int		326679	0					
ANR	329066	Identifier	val		326679	1					
ANR	329067	ExpressionStatement	c += 1 << width	6049:7:225168:225183	326679	29	True				
ANR	329068	AssignmentExpression	c += 1 << width		326679	0		+=			
ANR	329069	Identifier	c		326679	0					
ANR	329070	ShiftExpression	1 << width		326679	1		<<			
ANR	329071	PrimaryExpression	1		326679	0					
ANR	329072	Identifier	width		326679	1					
ANR	329073	BreakStatement	break ;	6050:7:225192:225197	326679	30	True				
ANR	329074	Label	case 'x' :	6052:6:225206:225214	326679	31	True				
ANR	329075	ExpressionStatement	"func ( stream , ""0x%lx"" , val & 0xffffffffUL )"	6053:7:225223:225265	326679	32	True				
ANR	329076	CallExpression	"func ( stream , ""0x%lx"" , val & 0xffffffffUL )"		326679	0					
ANR	329077	Callee	func		326679	0					
ANR	329078	Identifier	func		326679	0					
ANR	329079	ArgumentList	stream		326679	1					
ANR	329080	Argument	stream		326679	0					
ANR	329081	Identifier	stream		326679	0					
ANR	329082	Argument	"""0x%lx"""		326679	1					
ANR	329083	PrimaryExpression	"""0x%lx"""		326679	0					
ANR	329084	Argument	val & 0xffffffffUL		326679	2					
ANR	329085	BitAndExpression	val & 0xffffffffUL		326679	0		&			
ANR	329086	Identifier	val		326679	0					
ANR	329087	PrimaryExpression	0xffffffffUL		326679	1					
ANR	329088	BreakStatement	break ;	6054:7:225274:225279	326679	33	True				
ANR	329089	BreakStatement	break ;	6056:7:225296:225301	326679	84	True				
ANR	329090	Label	case 'L' :	6058:5:225309:225317	326679	85	True				
ANR	329091	IfStatement	if ( ( ( given >> 16 ) & 0xf ) == 0xf )		326679	86					
ANR	329092	Condition	( ( given >> 16 ) & 0xf ) == 0xf	6062:10:225468:225495	326679	0	True				
ANR	329093	EqualityExpression	( ( given >> 16 ) & 0xf ) == 0xf		326679	0		==			
ANR	329094	BitAndExpression	( given >> 16 ) & 0xf		326679	0		&			
ANR	329095	ShiftExpression	given >> 16		326679	0		>>			
ANR	329096	Identifier	given		326679	0					
ANR	329097	PrimaryExpression	16		326679	1					
ANR	329098	PrimaryExpression	0xf		326679	1					
ANR	329099	PrimaryExpression	0xf		326679	1					
ANR	329100	CompoundStatement		531:7:12819:12854	326679	1					
ANR	329101	IdentifierDeclStatement	bfd_vma offset = ( given & 0xff ) * 4 ;	6063:7:225507:225542	326679	0	True				
ANR	329102	IdentifierDecl	offset = ( given & 0xff ) * 4		326679	0					
ANR	329103	IdentifierDeclType	bfd_vma		326679	0					
ANR	329104	Identifier	offset		326679	1					
ANR	329105	AssignmentExpression	offset = ( given & 0xff ) * 4		326679	2		=			
ANR	329106	Identifier	offset		326679	0					
ANR	329107	MultiplicativeExpression	( given & 0xff ) * 4		326679	1		*			
ANR	329108	BitAndExpression	given & 0xff		326679	0		&			
ANR	329109	Identifier	given		326679	0					
ANR	329110	PrimaryExpression	0xff		326679	1					
ANR	329111	PrimaryExpression	4		326679	1					
ANR	329112	IfStatement	if ( ( given & ( 1 << 23 ) ) == 0 )		326679	1					
ANR	329113	Condition	( given & ( 1 << 23 ) ) == 0	6065:11:225556:225579	326679	0	True				
ANR	329114	EqualityExpression	( given & ( 1 << 23 ) ) == 0		326679	0		==			
ANR	329115	BitAndExpression	given & ( 1 << 23 )		326679	0		&			
ANR	329116	Identifier	given		326679	0					
ANR	329117	ShiftExpression	1 << 23		326679	1		<<			
ANR	329118	PrimaryExpression	1		326679	0					
ANR	329119	PrimaryExpression	23		326679	1					
ANR	329120	PrimaryExpression	0		326679	1					
ANR	329121	CompoundStatement		533:37:12894:12894	326679	1					
ANR	329122	ExpressionStatement	offset = - offset	6066:8:225592:225608	326679	0	True				
ANR	329123	AssignmentExpression	offset = - offset		326679	0		=			
ANR	329124	Identifier	offset		326679	0					
ANR	329125	UnaryOperationExpression	- offset		326679	1					
ANR	329126	UnaryOperator	-		326679	0					
ANR	329127	Identifier	offset		326679	1					
ANR	329128	ExpressionStatement	"func ( stream , "" ; "" )"	6068:7:225626:225646	326679	2	True				
ANR	329129	CallExpression	"func ( stream , "" ; "" )"		326679	0					
ANR	329130	Callee	func		326679	0					
ANR	329131	Identifier	func		326679	0					
ANR	329132	ArgumentList	stream		326679	1					
ANR	329133	Argument	stream		326679	0					
ANR	329134	Identifier	stream		326679	0					
ANR	329135	Argument	""" ; """		326679	1					
ANR	329136	PrimaryExpression	""" ; """		326679	0					
ANR	329137	ExpressionStatement	"info -> print_address_func ( ( pc & ~3 ) + 4 + offset , info )"	6069:7:225655:225710	326679	3	True				
ANR	329138	CallExpression	"info -> print_address_func ( ( pc & ~3 ) + 4 + offset , info )"		326679	0					
ANR	329139	Callee	info -> print_address_func		326679	0					
ANR	329140	PtrMemberAccess	info -> print_address_func		326679	0					
ANR	329141	Identifier	info		326679	0					
ANR	329142	Identifier	print_address_func		326679	1					
ANR	329143	ArgumentList	( pc & ~3 ) + 4 + offset		326679	1					
ANR	329144	Argument	( pc & ~3 ) + 4 + offset		326679	0					
ANR	329145	AdditiveExpression	( pc & ~3 ) + 4 + offset		326679	0		+			
ANR	329146	BitAndExpression	pc & ~3		326679	0		&			
ANR	329147	Identifier	pc		326679	0					
ANR	329148	Identifier	~3		326679	1					
ANR	329149	AdditiveExpression	4 + offset		326679	1		+			
ANR	329150	PrimaryExpression	4		326679	0					
ANR	329151	Identifier	offset		326679	1					
ANR	329152	Argument	info		326679	1					
ANR	329153	Identifier	info		326679	0					
ANR	329154	BreakStatement	break ;	6071:6:225726:225731	326679	87	True				
ANR	329155	IfStatement	if ( value_in_comment > 32 || value_in_comment < - 16 )		326679	3					
ANR	329156	Condition	value_in_comment > 32 || value_in_comment < - 16	6076:5:225758:225804	326679	0	True				
ANR	329157	OrExpression	value_in_comment > 32 || value_in_comment < - 16		326679	0		||			
ANR	329158	RelationalExpression	value_in_comment > 32		326679	0		>			
ANR	329159	Identifier	value_in_comment		326679	0					
ANR	329160	PrimaryExpression	32		326679	1					
ANR	329161	RelationalExpression	value_in_comment < - 16		326679	1		<			
ANR	329162	Identifier	value_in_comment		326679	0					
ANR	329163	UnaryOperationExpression	- 16		326679	1					
ANR	329164	UnaryOperator	-		326679	0					
ANR	329165	PrimaryExpression	16		326679	1					
ANR	329166	ExpressionStatement	"func ( stream , "" ; 0x%lx"" , value_in_comment )"	6077:3:225810:225853	326679	1	True				
ANR	329167	CallExpression	"func ( stream , "" ; 0x%lx"" , value_in_comment )"		326679	0					
ANR	329168	Callee	func		326679	0					
ANR	329169	Identifier	func		326679	0					
ANR	329170	ArgumentList	stream		326679	1					
ANR	329171	Argument	stream		326679	0					
ANR	329172	Identifier	stream		326679	0					
ANR	329173	Argument	""" ; 0x%lx"""		326679	1					
ANR	329174	PrimaryExpression	""" ; 0x%lx"""		326679	0					
ANR	329175	Argument	value_in_comment		326679	2					
ANR	329176	Identifier	value_in_comment		326679	0					
ANR	329177	IfStatement	if ( is_unpredictable )		326679	4					
ANR	329178	Condition	is_unpredictable	6080:8:225871:225886	326679	0	True				
ANR	329179	Identifier	is_unpredictable		326679	0					
ANR	329180	CompoundStatement		548:26:13201:13201	326679	1					
ANR	329181	ExpressionStatement	"func ( stream , UNPREDICTABLE_INSTRUCTION )"	6081:5:225896:225936	326679	0	True				
ANR	329182	CallExpression	"func ( stream , UNPREDICTABLE_INSTRUCTION )"		326679	0					
ANR	329183	Callee	func		326679	0					
ANR	329184	Identifier	func		326679	0					
ANR	329185	ArgumentList	stream		326679	1					
ANR	329186	Argument	stream		326679	0					
ANR	329187	Identifier	stream		326679	0					
ANR	329188	Argument	UNPREDICTABLE_INSTRUCTION		326679	1					
ANR	329189	Identifier	UNPREDICTABLE_INSTRUCTION		326679	0					
ANR	329190	ReturnStatement	return ;	6084:4:225949:225955	326679	5	True				
ANR	329191	ReturnType	static void		326679	1					
ANR	329192	Identifier	print_insn_thumb32		326679	2					
ANR	329193	ParameterList	"bfd_vma pc , struct disassemble_info * info , long given"		326679	3					
ANR	329194	Parameter	bfd_vma pc	5532:20:212632:212641	326679	0	True				
ANR	329195	ParameterType	bfd_vma		326679	0					
ANR	329196	Identifier	pc		326679	1					
ANR	329197	Parameter	struct disassemble_info * info	5532:32:212644:212672	326679	1	True				
ANR	329198	ParameterType	struct disassemble_info *		326679	0					
ANR	329199	Identifier	info		326679	1					
ANR	329200	Parameter	long given	5532:63:212675:212684	326679	2	True				
ANR	329201	ParameterType	long		326679	0					
ANR	329202	Identifier	given		326679	1					
ANR	329203	CFGEntryNode	ENTRY		326679		True				
ANR	329204	CFGExitNode	EXIT		326679		True				
ANR	329205	Symbol	~2u		326679						
ANR	329206	Symbol	& val		326679						
ANR	329207	Symbol	* Rn		326679						
ANR	329208	Symbol	* Rm		326679						
ANR	329209	Symbol	mod		326679						
ANR	329210	Symbol	UNPREDICTABLE_INSTRUCTION		326679						
ANR	329211	Symbol	shift		326679						
ANR	329212	Symbol	I1		326679						
ANR	329213	Symbol	I2		326679						
ANR	329214	Symbol	PRE_BIT_SET		326679						
ANR	329215	Symbol	type		326679						
ANR	329216	Symbol	info -> fprintf_func		326679						
ANR	329217	Symbol	IFTHEN_COND		326679						
ANR	329218	Symbol	postind		326679						
ANR	329219	Symbol	* arm_conditional		326679						
ANR	329220	Symbol	reg		326679						
ANR	329221	Symbol	thumb32_opcodes		326679						
ANR	329222	Symbol	psr_name		326679						
ANR	329223	Symbol	info		326679						
ANR	329224	Symbol	ifthen_next_state		326679						
ANR	329225	Symbol	val		326679						
ANR	329226	Symbol	given		326679						
ANR	329227	Symbol	print_insn_coprocessor		326679						
ANR	329228	Symbol	NEGATIVE_BIT_SET		326679						
ANR	329229	Symbol	arm_decode_bitfield		326679						
ANR	329230	Symbol	NULL		326679						
ANR	329231	Symbol	offset		326679						
ANR	329232	Symbol	J1		326679						
ANR	329233	Symbol	insn -> value		326679						
ANR	329234	Symbol	bits		326679						
ANR	329235	Symbol	J2		326679						
ANR	329236	Symbol	TRUE		326679						
ANR	329237	Symbol	is_unpredictable		326679						
ANR	329238	Symbol	data_barrier_option		326679						
ANR	329239	Symbol	stp		326679						
ANR	329240	Symbol	opt		326679						
ANR	329241	Symbol	ifthen_state		326679						
ANR	329242	Symbol	name		326679						
ANR	329243	Symbol	lsb		326679						
ANR	329244	Symbol	arm_conditional		326679						
ANR	329245	Symbol	imm8		326679						
ANR	329246	Symbol	banked_regname		326679						
ANR	329247	Symbol	* arm_regnames		326679						
ANR	329248	Symbol	imm		326679						
ANR	329249	Symbol	& width		326679						
ANR	329250	Symbol	i12		326679						
ANR	329251	Symbol	* val		326679						
ANR	329252	Symbol	info -> stream		326679						
ANR	329253	Symbol	* width		326679						
ANR	329254	Symbol	imm12		326679						
ANR	329255	Symbol	WRITEBACK_BIT_SET		326679						
ANR	329256	Symbol	value_in_comment		326679						
ANR	329257	Symbol	S		326679						
ANR	329258	Symbol	stream		326679						
ANR	329259	Symbol	U		326679						
ANR	329260	Symbol	sh		326679						
ANR	329261	Symbol	rot		326679						
ANR	329262	Symbol	W		326679						
ANR	329263	Symbol	* IFTHEN_COND		326679						
ANR	329264	Symbol	sm		326679						
ANR	329265	Symbol	* ++ c		326679						
ANR	329266	Symbol	Rm		326679						
ANR	329267	Symbol	arm_regnames		326679						
ANR	329268	Symbol	Rn		326679						
ANR	329269	Symbol	op		326679						
ANR	329270	Symbol	c		326679						
ANR	329271	Symbol	* insn		326679						
ANR	329272	Symbol	started		326679						
ANR	329273	Symbol	* c		326679						
ANR	329274	Symbol	off		326679						
ANR	329275	Symbol	i8		326679						
ANR	329276	Symbol	insn		326679						
ANR	329277	Symbol	pc		326679						
ANR	329278	Symbol	func		326679						
ANR	329279	Symbol	writeback		326679						
ANR	329280	Symbol	~3		326679						
ANR	329281	Symbol	sysm		326679						
ANR	329282	Symbol	width		326679						
ANR	329283	Symbol	print_insn_neon		326679						
ANR	329284	Symbol	FALSE		326679						
ANR	329285	Symbol	* info		326679						
ANR	329286	Symbol	insn -> mask		326679						
ANR	329287	Symbol	insn -> assembler		326679						
ANR	329288	Symbol	Sbit		326679						
ANR	329289	Symbol	msb		326679						
ANR	329290	Symbol	* reg		326679						
ANR	329291	Function	print_insn_data	6093:0:226031:226456							
ANR	329292	FunctionDef	"print_insn_data (bfd_vma pc ATTRIBUTE_UNUSED , struct disassemble_info * info , long given)"		329291	0					
ANR	329293	CompoundStatement		6097:0:226138:226456	329291	0					
ANR	329294	SwitchStatement	switch ( info -> bytes_per_chunk )		329291	0					
ANR	329295	Condition	info -> bytes_per_chunk	6098:10:226150:226170	329291	0	True				
ANR	329296	PtrMemberAccess	info -> bytes_per_chunk		329291	0					
ANR	329297	Identifier	info		329291	0					
ANR	329298	Identifier	bytes_per_chunk		329291	1					
ANR	329299	CompoundStatement		3:4:38:38	329291	1					
ANR	329300	Label	case 1 :	6100:4:226183:226189	329291	0	True				
ANR	329301	ExpressionStatement	"info -> fprintf_func ( info -> stream , "".byte 0x%02lx"" , given )"	6101:6:226197:226254	329291	1	True				
ANR	329302	CallExpression	"info -> fprintf_func ( info -> stream , "".byte 0x%02lx"" , given )"		329291	0					
ANR	329303	Callee	info -> fprintf_func		329291	0					
ANR	329304	PtrMemberAccess	info -> fprintf_func		329291	0					
ANR	329305	Identifier	info		329291	0					
ANR	329306	Identifier	fprintf_func		329291	1					
ANR	329307	ArgumentList	info -> stream		329291	1					
ANR	329308	Argument	info -> stream		329291	0					
ANR	329309	PtrMemberAccess	info -> stream		329291	0					
ANR	329310	Identifier	info		329291	0					
ANR	329311	Identifier	stream		329291	1					
ANR	329312	Argument	""".byte 0x%02lx"""		329291	1					
ANR	329313	PrimaryExpression	""".byte 0x%02lx"""		329291	0					
ANR	329314	Argument	given		329291	2					
ANR	329315	Identifier	given		329291	0					
ANR	329316	BreakStatement	break ;	6102:6:226262:226267	329291	2	True				
ANR	329317	Label	case 2 :	6103:4:226273:226279	329291	3	True				
ANR	329318	ExpressionStatement	"info -> fprintf_func ( info -> stream , "".short 0x%04lx"" , given )"	6104:6:226287:226345	329291	4	True				
ANR	329319	CallExpression	"info -> fprintf_func ( info -> stream , "".short 0x%04lx"" , given )"		329291	0					
ANR	329320	Callee	info -> fprintf_func		329291	0					
ANR	329321	PtrMemberAccess	info -> fprintf_func		329291	0					
ANR	329322	Identifier	info		329291	0					
ANR	329323	Identifier	fprintf_func		329291	1					
ANR	329324	ArgumentList	info -> stream		329291	1					
ANR	329325	Argument	info -> stream		329291	0					
ANR	329326	PtrMemberAccess	info -> stream		329291	0					
ANR	329327	Identifier	info		329291	0					
ANR	329328	Identifier	stream		329291	1					
ANR	329329	Argument	""".short 0x%04lx"""		329291	1					
ANR	329330	PrimaryExpression	""".short 0x%04lx"""		329291	0					
ANR	329331	Argument	given		329291	2					
ANR	329332	Identifier	given		329291	0					
ANR	329333	BreakStatement	break ;	6105:6:226353:226358	329291	5	True				
ANR	329334	Label	case 4 :	6106:4:226364:226370	329291	6	True				
ANR	329335	ExpressionStatement	"info -> fprintf_func ( info -> stream , "".word 0x%08lx"" , given )"	6107:6:226378:226435	329291	7	True				
ANR	329336	CallExpression	"info -> fprintf_func ( info -> stream , "".word 0x%08lx"" , given )"		329291	0					
ANR	329337	Callee	info -> fprintf_func		329291	0					
ANR	329338	PtrMemberAccess	info -> fprintf_func		329291	0					
ANR	329339	Identifier	info		329291	0					
ANR	329340	Identifier	fprintf_func		329291	1					
ANR	329341	ArgumentList	info -> stream		329291	1					
ANR	329342	Argument	info -> stream		329291	0					
ANR	329343	PtrMemberAccess	info -> stream		329291	0					
ANR	329344	Identifier	info		329291	0					
ANR	329345	Identifier	stream		329291	1					
ANR	329346	Argument	""".word 0x%08lx"""		329291	1					
ANR	329347	PrimaryExpression	""".word 0x%08lx"""		329291	0					
ANR	329348	Argument	given		329291	2					
ANR	329349	Identifier	given		329291	0					
ANR	329350	BreakStatement	break ;	6108:6:226443:226448	329291	8	True				
ANR	329351	ReturnType	static void		329291	1					
ANR	329352	Identifier	print_insn_data		329291	2					
ANR	329353	ParameterList	"bfd_vma pc ATTRIBUTE_UNUSED , struct disassemble_info * info , long given"		329291	3					
ANR	329354	Parameter	bfd_vma pc ATTRIBUTE_UNUSED	6094:17:226060:226086	329291	0	True				
ANR	329355	ParameterType	bfd_vma pc		329291	0					
ANR	329356	Identifier	ATTRIBUTE_UNUSED		329291	1					
ANR	329357	Parameter	struct disassemble_info * info	6095:3:226092:226120	329291	1	True				
ANR	329358	ParameterType	struct disassemble_info *		329291	0					
ANR	329359	Identifier	info		329291	1					
ANR	329360	Parameter	long given	6096:3:226126:226135	329291	2	True				
ANR	329361	ParameterType	long		329291	0					
ANR	329362	Identifier	given		329291	1					
ANR	329363	CFGEntryNode	ENTRY		329291		True				
ANR	329364	CFGExitNode	EXIT		329291		True				
ANR	329365	Symbol	given		329291						
ANR	329366	Symbol	ATTRIBUTE_UNUSED		329291						
ANR	329367	Symbol	info -> bytes_per_chunk		329291						
ANR	329368	Symbol	* info		329291						
ANR	329369	Symbol	info -> stream		329291						
ANR	329370	Symbol	info		329291						
ANR	329371	DeclStmt									
ANR	329372	Decl							const char	const char *	name
ANR	329373	Function	disassembler_options_cmp	6138:0:227119:227485							
ANR	329374	FunctionDef	"disassembler_options_cmp (const char * s1 , const char * s2)"		329373	0					
ANR	329375	CompoundStatement		6140:0:227181:227485	329373	0					
ANR	329376	IdentifierDeclStatement	"unsigned char c1 , c2 ;"	6141:2:227185:227205	329373	0	True				
ANR	329377	IdentifierDecl	c1		329373	0					
ANR	329378	IdentifierDeclType	unsigned char		329373	0					
ANR	329379	Identifier	c1		329373	1					
ANR	329380	IdentifierDecl	c2		329373	1					
ANR	329381	IdentifierDeclType	unsigned char		329373	0					
ANR	329382	Identifier	c2		329373	1					
ANR	329383	DoStatement	do		329373	1					
ANR	329384	CompoundStatement		5:4:35:35	329373	0					
ANR	329385	ExpressionStatement	c1 = ( unsigned char ) * s1 ++	6145:6:227225:227251	329373	0	True				
ANR	329386	AssignmentExpression	c1 = ( unsigned char ) * s1 ++		329373	0		=			
ANR	329387	Identifier	c1		329373	0					
ANR	329388	CastExpression	( unsigned char ) * s1 ++		329373	1					
ANR	329389	CastTarget	unsigned char		329373	0					
ANR	329390	UnaryOperationExpression	* s1 ++		329373	1					
ANR	329391	UnaryOperator	*		329373	0					
ANR	329392	PostIncDecOperationExpression	s1 ++		329373	1					
ANR	329393	Identifier	s1		329373	0					
ANR	329394	IncDec	++		329373	1					
ANR	329395	IfStatement	"if ( c1 == ',' )"		329373	1					
ANR	329396	Condition	"c1 == ','"	6146:10:227263:227271	329373	0	True				
ANR	329397	EqualityExpression	"c1 == ','"		329373	0		==			
ANR	329398	Identifier	c1		329373	0					
ANR	329399	PrimaryExpression	"','"		329373	1					
ANR	329400	CompoundStatement		7:21:92:92	329373	1					
ANR	329401	ExpressionStatement	c1 = '\\0'	6147:7:227283:227292	329373	0	True				
ANR	329402	AssignmentExpression	c1 = '\\0'		329373	0		=			
ANR	329403	Identifier	c1		329373	0					
ANR	329404	PrimaryExpression	'\\0'		329373	1					
ANR	329405	ExpressionStatement	c2 = ( unsigned char ) * s2 ++	6149:6:227308:227334	329373	2	True				
ANR	329406	AssignmentExpression	c2 = ( unsigned char ) * s2 ++		329373	0		=			
ANR	329407	Identifier	c2		329373	0					
ANR	329408	CastExpression	( unsigned char ) * s2 ++		329373	1					
ANR	329409	CastTarget	unsigned char		329373	0					
ANR	329410	UnaryOperationExpression	* s2 ++		329373	1					
ANR	329411	UnaryOperator	*		329373	0					
ANR	329412	PostIncDecOperationExpression	s2 ++		329373	1					
ANR	329413	Identifier	s2		329373	0					
ANR	329414	IncDec	++		329373	1					
ANR	329415	IfStatement	"if ( c2 == ',' )"		329373	3					
ANR	329416	Condition	"c2 == ','"	6150:10:227346:227354	329373	0	True				
ANR	329417	EqualityExpression	"c2 == ','"		329373	0		==			
ANR	329418	Identifier	c2		329373	0					
ANR	329419	PrimaryExpression	"','"		329373	1					
ANR	329420	CompoundStatement		11:21:175:175	329373	1					
ANR	329421	ExpressionStatement	c2 = '\\0'	6151:7:227366:227375	329373	0	True				
ANR	329422	AssignmentExpression	c2 = '\\0'		329373	0		=			
ANR	329423	Identifier	c2		329373	0					
ANR	329424	PrimaryExpression	'\\0'		329373	1					
ANR	329425	IfStatement	if ( c1 == '\\0' )		329373	4					
ANR	329426	Condition	c1 == '\\0'	6153:10:227395:227404	329373	0	True				
ANR	329427	EqualityExpression	c1 == '\\0'		329373	0		==			
ANR	329428	Identifier	c1		329373	0					
ANR	329429	PrimaryExpression	'\\0'		329373	1					
ANR	329430	CompoundStatement		14:22:225:225	329373	1					
ANR	329431	ReturnStatement	return c1 - c2 ;	6154:7:227416:227430	329373	0	True				
ANR	329432	AdditiveExpression	c1 - c2		329373	0		-			
ANR	329433	Identifier	c1		329373	0					
ANR	329434	Identifier	c2		329373	1					
ANR	329435	Condition	c1 == c2	6157:9:227455:227462	329373	1	True				
ANR	329436	EqualityExpression	c1 == c2		329373	0		==			
ANR	329437	Identifier	c1		329373	0					
ANR	329438	Identifier	c2		329373	1					
ANR	329439	ReturnStatement	return c1 - c2 ;	6159:2:227469:227483	329373	2	True				
ANR	329440	AdditiveExpression	c1 - c2		329373	0		-			
ANR	329441	Identifier	c1		329373	0					
ANR	329442	Identifier	c2		329373	1					
ANR	329443	ReturnType	int		329373	1					
ANR	329444	Identifier	disassembler_options_cmp		329373	2					
ANR	329445	ParameterList	"const char * s1 , const char * s2"		329373	3					
ANR	329446	Parameter	const char * s1	6139:26:227149:227162	329373	0	True				
ANR	329447	ParameterType	const char *		329373	0					
ANR	329448	Identifier	s1		329373	1					
ANR	329449	Parameter	const char * s2	6139:42:227165:227178	329373	1	True				
ANR	329450	ParameterType	const char *		329373	0					
ANR	329451	Identifier	s2		329373	1					
ANR	329452	CFGEntryNode	ENTRY		329373		True				
ANR	329453	CFGExitNode	EXIT		329373		True				
ANR	329454	Symbol	* s1 ++		329373						
ANR	329455	Symbol	* s2 ++		329373						
ANR	329456	Symbol	s1		329373						
ANR	329457	Symbol	c1		329373						
ANR	329458	Symbol	s2		329373						
ANR	329459	Symbol	c2		329373						
ANR	329460	Function	parse_arm_disassembler_options	6162:0:227488:228222							
ANR	329461	FunctionDef	parse_arm_disassembler_options (char * options)		329460	0					
ANR	329462	CompoundStatement		6164:0:227547:228222	329460	0					
ANR	329463	IdentifierDeclStatement	char * opt ;	6165:2:227551:227560	329460	0	True				
ANR	329464	IdentifierDecl	* opt		329460	0					
ANR	329465	IdentifierDeclType	char *		329460	0					
ANR	329466	Identifier	opt		329460	1					
ANR	329467	Statement	FOR_EACH_DISASSEMBLER_OPTION	6167:2:227565:227592	329460	1	True				
ANR	329468	Statement	(	6167:31:227594:227594	329460	2	True				
ANR	329469	Statement	opt	6167:32:227595:227597	329460	3	True				
ANR	329470	Statement	","	6167:35:227598:227598	329460	4	True				
ANR	329471	Statement	options	6167:37:227600:227606	329460	5	True				
ANR	329472	Statement	)	6167:44:227607:227607	329460	6	True				
ANR	329473	CompoundStatement		5:4:65:65	329460	7					
ANR	329474	IfStatement	"if ( CONST_STRNEQ ( opt , ""reg-names-"" ) )"		329460	0					
ANR	329475	Condition	"CONST_STRNEQ ( opt , ""reg-names-"" )"	6169:10:227625:227656	329460	0	True				
ANR	329476	CallExpression	"CONST_STRNEQ ( opt , ""reg-names-"" )"		329460	0					
ANR	329477	Callee	CONST_STRNEQ		329460	0					
ANR	329478	Identifier	CONST_STRNEQ		329460	0					
ANR	329479	ArgumentList	opt		329460	1					
ANR	329480	Argument	opt		329460	0					
ANR	329481	Identifier	opt		329460	0					
ANR	329482	Argument	"""reg-names-"""		329460	1					
ANR	329483	PrimaryExpression	"""reg-names-"""		329460	0					
ANR	329484	CompoundStatement		8:3:117:131	329460	1					
ANR	329485	IdentifierDeclStatement	unsigned int i ;	6171:3:227665:227679	329460	0	True				
ANR	329486	IdentifierDecl	i		329460	0					
ANR	329487	IdentifierDeclType	unsigned int		329460	0					
ANR	329488	Identifier	i		329460	1					
ANR	329489	ForStatement	for ( i = 0 ; i < NUM_ARM_OPTIONS ; i ++ )		329460	1					
ANR	329490	ForInit	i = 0 ;	6172:8:227689:227694	329460	0	True				
ANR	329491	AssignmentExpression	i = 0		329460	0		=			
ANR	329492	Identifier	i		329460	0					
ANR	329493	PrimaryExpression	0		329460	1					
ANR	329494	Condition	i < NUM_ARM_OPTIONS	6172:15:227696:227714	329460	1	True				
ANR	329495	RelationalExpression	i < NUM_ARM_OPTIONS		329460	0		<			
ANR	329496	Identifier	i		329460	0					
ANR	329497	Identifier	NUM_ARM_OPTIONS		329460	1					
ANR	329498	PostIncDecOperationExpression	i ++	6172:36:227717:227719	329460	2	True				
ANR	329499	Identifier	i		329460	0					
ANR	329500	IncDec	++		329460	1					
ANR	329501	CompoundStatement		9:41:174:174	329460	3					
ANR	329502	IfStatement	"if ( disassembler_options_cmp ( opt , regnames [ i ] . name ) == 0 )"		329460	0					
ANR	329503	Condition	"disassembler_options_cmp ( opt , regnames [ i ] . name ) == 0"	6173:8:227732:227784	329460	0	True				
ANR	329504	EqualityExpression	"disassembler_options_cmp ( opt , regnames [ i ] . name ) == 0"		329460	0		==			
ANR	329505	CallExpression	"disassembler_options_cmp ( opt , regnames [ i ] . name )"		329460	0					
ANR	329506	Callee	disassembler_options_cmp		329460	0					
ANR	329507	Identifier	disassembler_options_cmp		329460	0					
ANR	329508	ArgumentList	opt		329460	1					
ANR	329509	Argument	opt		329460	0					
ANR	329510	Identifier	opt		329460	0					
ANR	329511	Argument	regnames [ i ] . name		329460	1					
ANR	329512	MemberAccess	regnames [ i ] . name		329460	0					
ANR	329513	ArrayIndexing	regnames [ i ]		329460	0					
ANR	329514	Identifier	regnames		329460	0					
ANR	329515	Identifier	i		329460	1					
ANR	329516	Identifier	name		329460	1					
ANR	329517	PrimaryExpression	0		329460	1					
ANR	329518	CompoundStatement		10:63:239:239	329460	1					
ANR	329519	ExpressionStatement	regname_selected = i	6174:5:227794:227814	329460	0	True				
ANR	329520	AssignmentExpression	regname_selected = i		329460	0		=			
ANR	329521	Identifier	regname_selected		329460	0					
ANR	329522	Identifier	i		329460	1					
ANR	329523	BreakStatement	break ;	6175:5:227821:227826	329460	1	True				
ANR	329524	IfStatement	if ( i >= NUM_ARM_OPTIONS )		329460	2					
ANR	329525	Condition	i >= NUM_ARM_OPTIONS	6179:7:227847:227866	329460	0	True				
ANR	329526	RelationalExpression	i >= NUM_ARM_OPTIONS		329460	0		>=			
ANR	329527	Identifier	i		329460	0					
ANR	329528	Identifier	NUM_ARM_OPTIONS		329460	1					
ANR	329529	CompoundStatement		16:29:321:321	329460	1					
ANR	329530	ExpressionStatement	"fprintf ( stderr , _ ( ""Unrecognised register name set: %s\\n"" ) , opt )"	6180:4:227875:227940	329460	0	True				
ANR	329531	CallExpression	"fprintf ( stderr , _ ( ""Unrecognised register name set: %s\\n"" ) , opt )"		329460	0					
ANR	329532	Callee	fprintf		329460	0					
ANR	329533	Identifier	fprintf		329460	0					
ANR	329534	ArgumentList	stderr		329460	1					
ANR	329535	Argument	stderr		329460	0					
ANR	329536	Identifier	stderr		329460	0					
ANR	329537	Argument	"_ ( ""Unrecognised register name set: %s\\n"" )"		329460	1					
ANR	329538	CallExpression	"_ ( ""Unrecognised register name set: %s\\n"" )"		329460	0					
ANR	329539	Callee	_		329460	0					
ANR	329540	Identifier	_		329460	0					
ANR	329541	ArgumentList	"""Unrecognised register name set: %s\\n"""		329460	1					
ANR	329542	Argument	"""Unrecognised register name set: %s\\n"""		329460	0					
ANR	329543	PrimaryExpression	"""Unrecognised register name set: %s\\n"""		329460	0					
ANR	329544	Argument	opt		329460	2					
ANR	329545	Identifier	opt		329460	0					
ANR	329546	ElseStatement	else		329460	0					
ANR	329547	IfStatement	"if ( CONST_STRNEQ ( opt , ""force-thumb"" ) )"		329460	0					
ANR	329548	Condition	"CONST_STRNEQ ( opt , ""force-thumb"" )"	6182:17:227964:227996	329460	0	True				
ANR	329549	CallExpression	"CONST_STRNEQ ( opt , ""force-thumb"" )"		329460	0					
ANR	329550	Callee	CONST_STRNEQ		329460	0					
ANR	329551	Identifier	CONST_STRNEQ		329460	0					
ANR	329552	ArgumentList	opt		329460	1					
ANR	329553	Argument	opt		329460	0					
ANR	329554	Identifier	opt		329460	0					
ANR	329555	Argument	"""force-thumb"""		329460	1					
ANR	329556	PrimaryExpression	"""force-thumb"""		329460	0					
ANR	329557	CompoundStatement		19:52:451:451	329460	1					
ANR	329558	ExpressionStatement	force_thumb = 1	6183:7:228008:228023	329460	0	True				
ANR	329559	AssignmentExpression	force_thumb = 1		329460	0		=			
ANR	329560	Identifier	force_thumb		329460	0					
ANR	329561	PrimaryExpression	1		329460	1					
ANR	329562	ElseStatement	else		329460	0					
ANR	329563	IfStatement	"if ( CONST_STRNEQ ( opt , ""no-force-thumb"" ) )"		329460	0					
ANR	329564	Condition	"CONST_STRNEQ ( opt , ""no-force-thumb"" )"	6184:17:228042:228077	329460	0	True				
ANR	329565	CallExpression	"CONST_STRNEQ ( opt , ""no-force-thumb"" )"		329460	0					
ANR	329566	Callee	CONST_STRNEQ		329460	0					
ANR	329567	Identifier	CONST_STRNEQ		329460	0					
ANR	329568	ArgumentList	opt		329460	1					
ANR	329569	Argument	opt		329460	0					
ANR	329570	Identifier	opt		329460	0					
ANR	329571	Argument	"""no-force-thumb"""		329460	1					
ANR	329572	PrimaryExpression	"""no-force-thumb"""		329460	0					
ANR	329573	CompoundStatement		21:55:532:532	329460	1					
ANR	329574	ExpressionStatement	force_thumb = 0	6185:7:228089:228104	329460	0	True				
ANR	329575	AssignmentExpression	force_thumb = 0		329460	0		=			
ANR	329576	Identifier	force_thumb		329460	0					
ANR	329577	PrimaryExpression	0		329460	1					
ANR	329578	ElseStatement	else		329460	0					
ANR	329579	CompoundStatement		23:13:571:571	329460	0					
ANR	329580	ExpressionStatement	"fprintf ( stderr , _ ( ""Unrecognised disassembler option: %s\\n"" ) , opt )"	6187:7:228128:228195	329460	0	True				
ANR	329581	CallExpression	"fprintf ( stderr , _ ( ""Unrecognised disassembler option: %s\\n"" ) , opt )"		329460	0					
ANR	329582	Callee	fprintf		329460	0					
ANR	329583	Identifier	fprintf		329460	0					
ANR	329584	ArgumentList	stderr		329460	1					
ANR	329585	Argument	stderr		329460	0					
ANR	329586	Identifier	stderr		329460	0					
ANR	329587	Argument	"_ ( ""Unrecognised disassembler option: %s\\n"" )"		329460	1					
ANR	329588	CallExpression	"_ ( ""Unrecognised disassembler option: %s\\n"" )"		329460	0					
ANR	329589	Callee	_		329460	0					
ANR	329590	Identifier	_		329460	0					
ANR	329591	ArgumentList	"""Unrecognised disassembler option: %s\\n"""		329460	1					
ANR	329592	Argument	"""Unrecognised disassembler option: %s\\n"""		329460	0					
ANR	329593	PrimaryExpression	"""Unrecognised disassembler option: %s\\n"""		329460	0					
ANR	329594	Argument	opt		329460	2					
ANR	329595	Identifier	opt		329460	0					
ANR	329596	ReturnStatement	return ;	6191:2:228214:228220	329460	8	True				
ANR	329597	ReturnType	static void		329460	1					
ANR	329598	Identifier	parse_arm_disassembler_options		329460	2					
ANR	329599	ParameterList	char * options		329460	3					
ANR	329600	Parameter	char * options	6163:32:227532:227544	329460	0	True				
ANR	329601	ParameterType	char *		329460	0					
ANR	329602	Identifier	options		329460	1					
ANR	329603	CFGEntryNode	ENTRY		329460		True				
ANR	329604	CFGExitNode	EXIT		329460		True				
ANR	329605	Symbol	NUM_ARM_OPTIONS		329460						
ANR	329606	Symbol	disassembler_options_cmp		329460						
ANR	329607	Symbol	force_thumb		329460						
ANR	329608	Symbol	i		329460						
ANR	329609	Symbol	stderr		329460						
ANR	329610	Symbol	regnames		329460						
ANR	329611	Symbol	opt		329460						
ANR	329612	Symbol	* i		329460						
ANR	329613	Symbol	options		329460						
ANR	329614	Symbol	CONST_STRNEQ		329460						
ANR	329615	Symbol	regname_selected		329460						
ANR	329616	Symbol	regnames [ i ] . name		329460						
ANR	329617	Symbol	* regnames		329460						
ANR	329618	Symbol	_		329460						
ANR	329619	DeclStmt									
ANR	329620	Decl							bfd_boolean	"bfd_boolean ( bfd_vma pc , struct disassemble_info * info , enum map_type * map_symbol )"	mapping_symbol_for_insn
ANR	329621	Function	find_ifthen_state	6201:0:228452:230593							
ANR	329622	FunctionDef	"find_ifthen_state (bfd_vma pc , struct disassemble_info * info , bfd_boolean little)"		329621	0					
ANR	329623	CompoundStatement		6205:0:228556:230593	329621	0					
ANR	329624	IdentifierDeclStatement	unsigned char b [ 2 ] ;	6206:2:228560:228578	329621	0	True				
ANR	329625	IdentifierDecl	b [ 2 ]		329621	0					
ANR	329626	IdentifierDeclType	unsigned char [ 2 ]		329621	0					
ANR	329627	Identifier	b		329621	1					
ANR	329628	PrimaryExpression	2		329621	2					
ANR	329629	IdentifierDeclStatement	unsigned int insn ;	6207:2:228582:228599	329621	1	True				
ANR	329630	IdentifierDecl	insn		329621	0					
ANR	329631	IdentifierDeclType	unsigned int		329621	0					
ANR	329632	Identifier	insn		329621	1					
ANR	329633	IdentifierDeclStatement	int status ;	6208:2:228603:228613	329621	2	True				
ANR	329634	IdentifierDecl	status		329621	0					
ANR	329635	IdentifierDeclType	int		329621	0					
ANR	329636	Identifier	status		329621	1					
ANR	329637	IdentifierDeclStatement	int count ;	6211:2:228739:228748	329621	3	True				
ANR	329638	IdentifierDecl	count		329621	0					
ANR	329639	IdentifierDeclType	int		329621	0					
ANR	329640	Identifier	count		329621	1					
ANR	329641	IdentifierDeclStatement	int it_count ;	6212:2:228752:228764	329621	4	True				
ANR	329642	IdentifierDecl	it_count		329621	0					
ANR	329643	IdentifierDeclType	int		329621	0					
ANR	329644	Identifier	it_count		329621	1					
ANR	329645	IdentifierDeclStatement	unsigned int seen_it ;	6213:2:228768:228788	329621	5	True				
ANR	329646	IdentifierDecl	seen_it		329621	0					
ANR	329647	IdentifierDeclType	unsigned int		329621	0					
ANR	329648	Identifier	seen_it		329621	1					
ANR	329649	IdentifierDeclStatement	bfd_vma addr ;	6214:2:228792:228804	329621	6	True				
ANR	329650	IdentifierDecl	addr		329621	0					
ANR	329651	IdentifierDeclType	bfd_vma		329621	0					
ANR	329652	Identifier	addr		329621	1					
ANR	329653	ExpressionStatement	ifthen_address = pc	6216:2:228809:228828	329621	7	True				
ANR	329654	AssignmentExpression	ifthen_address = pc		329621	0		=			
ANR	329655	Identifier	ifthen_address		329621	0					
ANR	329656	Identifier	pc		329621	1					
ANR	329657	ExpressionStatement	ifthen_state = 0	6217:2:228832:228848	329621	8	True				
ANR	329658	AssignmentExpression	ifthen_state = 0		329621	0		=			
ANR	329659	Identifier	ifthen_state		329621	0					
ANR	329660	PrimaryExpression	0		329621	1					
ANR	329661	ExpressionStatement	addr = pc	6219:2:228853:228862	329621	9	True				
ANR	329662	AssignmentExpression	addr = pc		329621	0		=			
ANR	329663	Identifier	addr		329621	0					
ANR	329664	Identifier	pc		329621	1					
ANR	329665	ExpressionStatement	count = 1	6220:2:228866:228875	329621	10	True				
ANR	329666	AssignmentExpression	count = 1		329621	0		=			
ANR	329667	Identifier	count		329621	0					
ANR	329668	PrimaryExpression	1		329621	1					
ANR	329669	ExpressionStatement	it_count = 0	6221:2:228879:228891	329621	11	True				
ANR	329670	AssignmentExpression	it_count = 0		329621	0		=			
ANR	329671	Identifier	it_count		329621	0					
ANR	329672	PrimaryExpression	0		329621	1					
ANR	329673	ExpressionStatement	seen_it = 0	6222:2:228895:228906	329621	12	True				
ANR	329674	AssignmentExpression	seen_it = 0		329621	0		=			
ANR	329675	Identifier	seen_it		329621	0					
ANR	329676	PrimaryExpression	0		329621	1					
ANR	329677	ForStatement	for ( ; ; )		329621	13					
ANR	329678	CompoundStatement		23:4:585:585	329621	0					
ANR	329679	IfStatement	"if ( addr == 0 || info -> symbol_at_address_func ( addr , info ) )"		329621	0					
ANR	329680	Condition	"addr == 0 || info -> symbol_at_address_func ( addr , info )"	6228:10:229154:229207	329621	0	True				
ANR	329681	OrExpression	"addr == 0 || info -> symbol_at_address_func ( addr , info )"		329621	0		||			
ANR	329682	EqualityExpression	addr == 0		329621	0		==			
ANR	329683	Identifier	addr		329621	0					
ANR	329684	PrimaryExpression	0		329621	1					
ANR	329685	CallExpression	"info -> symbol_at_address_func ( addr , info )"		329621	1					
ANR	329686	Callee	info -> symbol_at_address_func		329621	0					
ANR	329687	PtrMemberAccess	info -> symbol_at_address_func		329621	0					
ANR	329688	Identifier	info		329621	0					
ANR	329689	Identifier	symbol_at_address_func		329621	1					
ANR	329690	ArgumentList	addr		329621	1					
ANR	329691	Argument	addr		329621	0					
ANR	329692	Identifier	addr		329621	0					
ANR	329693	Argument	info		329621	1					
ANR	329694	Identifier	info		329621	0					
ANR	329695	CompoundStatement		25:1:654:654	329621	1					
ANR	329696	IfStatement	if ( seen_it && ( count & 1 ) )		329621	0					
ANR	329697	Condition	seen_it && ( count & 1 )	6232:7:229317:229338	329621	0	True				
ANR	329698	AndExpression	seen_it && ( count & 1 )		329621	0		&&			
ANR	329699	Identifier	seen_it		329621	0					
ANR	329700	BitAndExpression	count & 1		329621	1		&			
ANR	329701	Identifier	count		329621	0					
ANR	329702	PrimaryExpression	1		329621	1					
ANR	329703	CompoundStatement		28:31:784:784	329621	1					
ANR	329704	BreakStatement	break ;	6233:4:229347:229352	329621	0	True				
ANR	329705	ReturnStatement	return ;	6236:3:229363:229369	329621	1	True				
ANR	329706	ExpressionStatement	addr -= 2	6238:6:229380:229389	329621	1	True				
ANR	329707	AssignmentExpression	addr -= 2		329621	0		-=			
ANR	329708	Identifier	addr		329621	0					
ANR	329709	PrimaryExpression	2		329621	1					
ANR	329710	ExpressionStatement	"status = info -> read_memory_func ( addr , ( bfd_byte * ) b , 2 , info )"	6239:6:229397:229460	329621	2	True				
ANR	329711	AssignmentExpression	"status = info -> read_memory_func ( addr , ( bfd_byte * ) b , 2 , info )"		329621	0		=			
ANR	329712	Identifier	status		329621	0					
ANR	329713	CallExpression	"info -> read_memory_func ( addr , ( bfd_byte * ) b , 2 , info )"		329621	1					
ANR	329714	Callee	info -> read_memory_func		329621	0					
ANR	329715	PtrMemberAccess	info -> read_memory_func		329621	0					
ANR	329716	Identifier	info		329621	0					
ANR	329717	Identifier	read_memory_func		329621	1					
ANR	329718	ArgumentList	addr		329621	1					
ANR	329719	Argument	addr		329621	0					
ANR	329720	Identifier	addr		329621	0					
ANR	329721	Argument	( bfd_byte * ) b		329621	1					
ANR	329722	CastExpression	( bfd_byte * ) b		329621	0					
ANR	329723	CastTarget	bfd_byte *		329621	0					
ANR	329724	Identifier	b		329621	1					
ANR	329725	Argument	2		329621	2					
ANR	329726	PrimaryExpression	2		329621	0					
ANR	329727	Argument	info		329621	3					
ANR	329728	Identifier	info		329621	0					
ANR	329729	IfStatement	if ( status )		329621	3					
ANR	329730	Condition	status	6240:10:229472:229477	329621	0	True				
ANR	329731	Identifier	status		329621	0					
ANR	329732	CompoundStatement		36:18:923:923	329621	1					
ANR	329733	ReturnStatement	return ;	6241:7:229489:229495	329621	0	True				
ANR	329734	IfStatement	if ( little )		329621	4					
ANR	329735	Condition	little	6244:10:229516:229521	329621	0	True				
ANR	329736	Identifier	little		329621	0					
ANR	329737	CompoundStatement		40:18:967:967	329621	1					
ANR	329738	ExpressionStatement	insn = ( b [ 0 ] ) | ( b [ 1 ] << 8 )	6245:7:229533:229560	329621	0	True				
ANR	329739	AssignmentExpression	insn = ( b [ 0 ] ) | ( b [ 1 ] << 8 )		329621	0		=			
ANR	329740	Identifier	insn		329621	0					
ANR	329741	InclusiveOrExpression	( b [ 0 ] ) | ( b [ 1 ] << 8 )		329621	1		|			
ANR	329742	ArrayIndexing	b [ 0 ]		329621	0					
ANR	329743	Identifier	b		329621	0					
ANR	329744	PrimaryExpression	0		329621	1					
ANR	329745	ShiftExpression	b [ 1 ] << 8		329621	1		<<			
ANR	329746	ArrayIndexing	b [ 1 ]		329621	0					
ANR	329747	Identifier	b		329621	0					
ANR	329748	PrimaryExpression	1		329621	1					
ANR	329749	PrimaryExpression	8		329621	1					
ANR	329750	ElseStatement	else		329621	0					
ANR	329751	CompoundStatement		42:13:1018:1018	329621	0					
ANR	329752	ExpressionStatement	insn = ( b [ 1 ] ) | ( b [ 0 ] << 8 )	6247:7:229584:229611	329621	0	True				
ANR	329753	AssignmentExpression	insn = ( b [ 1 ] ) | ( b [ 0 ] << 8 )		329621	0		=			
ANR	329754	Identifier	insn		329621	0					
ANR	329755	InclusiveOrExpression	( b [ 1 ] ) | ( b [ 0 ] << 8 )		329621	1		|			
ANR	329756	ArrayIndexing	b [ 1 ]		329621	0					
ANR	329757	Identifier	b		329621	0					
ANR	329758	PrimaryExpression	1		329621	1					
ANR	329759	ShiftExpression	b [ 0 ] << 8		329621	1		<<			
ANR	329760	ArrayIndexing	b [ 0 ]		329621	0					
ANR	329761	Identifier	b		329621	0					
ANR	329762	PrimaryExpression	0		329621	1					
ANR	329763	PrimaryExpression	8		329621	1					
ANR	329764	IfStatement	if ( seen_it )		329621	5					
ANR	329765	Condition	seen_it	6249:10:229631:229637	329621	0	True				
ANR	329766	Identifier	seen_it		329621	0					
ANR	329767	CompoundStatement		46:1:1084:1084	329621	1					
ANR	329768	IfStatement	if ( ( insn & 0xf800 ) < 0xe800 )		329621	0					
ANR	329769	Condition	( insn & 0xf800 ) < 0xe800	6251:7:229650:229673	329621	0	True				
ANR	329770	RelationalExpression	( insn & 0xf800 ) < 0xe800		329621	0		<			
ANR	329771	BitAndExpression	insn & 0xf800		329621	0		&			
ANR	329772	Identifier	insn		329621	0					
ANR	329773	PrimaryExpression	0xf800		329621	1					
ANR	329774	PrimaryExpression	0xe800		329621	1					
ANR	329775	CompoundStatement		48:5:1124:1124	329621	1					
ANR	329776	IfStatement	if ( count & 1 )		329621	0					
ANR	329777	Condition	count & 1	6256:11:229849:229857	329621	0	True				
ANR	329778	BitAndExpression	count & 1		329621	0		&			
ANR	329779	Identifier	count		329621	0					
ANR	329780	PrimaryExpression	1		329621	1					
ANR	329781	CompoundStatement		52:22:1303:1303	329621	1					
ANR	329782	BreakStatement	break ;	6257:8:229870:229875	329621	0	True				
ANR	329783	ExpressionStatement	seen_it = 0	6259:7:229893:229904	329621	1	True				
ANR	329784	AssignmentExpression	seen_it = 0		329621	0		=			
ANR	329785	Identifier	seen_it		329621	0					
ANR	329786	PrimaryExpression	0		329621	1					
ANR	329787	IfStatement	if ( ( insn & 0xff00 ) == 0xbf00 && ( insn & 0xf ) != 0 )		329621	6					
ANR	329788	Condition	( insn & 0xff00 ) == 0xbf00 && ( insn & 0xf ) != 0	6262:10:229926:229971	329621	0	True				
ANR	329789	AndExpression	( insn & 0xff00 ) == 0xbf00 && ( insn & 0xf ) != 0		329621	0		&&			
ANR	329790	EqualityExpression	( insn & 0xff00 ) == 0xbf00		329621	0		==			
ANR	329791	BitAndExpression	insn & 0xff00		329621	0		&			
ANR	329792	Identifier	insn		329621	0					
ANR	329793	PrimaryExpression	0xff00		329621	1					
ANR	329794	PrimaryExpression	0xbf00		329621	1					
ANR	329795	EqualityExpression	( insn & 0xf ) != 0		329621	1		!=			
ANR	329796	BitAndExpression	insn & 0xf		329621	0		&			
ANR	329797	Identifier	insn		329621	0					
ANR	329798	PrimaryExpression	0xf		329621	1					
ANR	329799	PrimaryExpression	0		329621	1					
ANR	329800	CompoundStatement		61:3:1456:1519	329621	1					
ANR	329801	IdentifierDeclStatement	enum map_type type = MAP_ARM ;	6264:3:229980:230008	329621	0	True				
ANR	329802	IdentifierDecl	type = MAP_ARM		329621	0					
ANR	329803	IdentifierDeclType	enum map_type		329621	0					
ANR	329804	Identifier	type		329621	1					
ANR	329805	AssignmentExpression	type = MAP_ARM		329621	2		=			
ANR	329806	Identifier	MAP_ARM		329621	0					
ANR	329807	Identifier	MAP_ARM		329621	1					
ANR	329808	IdentifierDeclStatement	"bfd_boolean found = mapping_symbol_for_insn ( addr , info , & type ) ;"	6265:3:230013:230076	329621	1	True				
ANR	329809	IdentifierDecl	"found = mapping_symbol_for_insn ( addr , info , & type )"		329621	0					
ANR	329810	IdentifierDeclType	bfd_boolean		329621	0					
ANR	329811	Identifier	found		329621	1					
ANR	329812	AssignmentExpression	"found = mapping_symbol_for_insn ( addr , info , & type )"		329621	2		=			
ANR	329813	Identifier	found		329621	0					
ANR	329814	CallExpression	"mapping_symbol_for_insn ( addr , info , & type )"		329621	1					
ANR	329815	Callee	mapping_symbol_for_insn		329621	0					
ANR	329816	Identifier	mapping_symbol_for_insn		329621	0					
ANR	329817	ArgumentList	addr		329621	1					
ANR	329818	Argument	addr		329621	0					
ANR	329819	Identifier	addr		329621	0					
ANR	329820	Argument	info		329621	1					
ANR	329821	Identifier	info		329621	0					
ANR	329822	Argument	& type		329621	2					
ANR	329823	UnaryOperationExpression	& type		329621	0					
ANR	329824	UnaryOperator	&		329621	0					
ANR	329825	Identifier	type		329621	1					
ANR	329826	IfStatement	if ( ! found || ( found && type == MAP_THUMB ) )		329621	2					
ANR	329827	Condition	! found || ( found && type == MAP_THUMB )	6267:7:230086:230123	329621	0	True				
ANR	329828	OrExpression	! found || ( found && type == MAP_THUMB )		329621	0		||			
ANR	329829	UnaryOperationExpression	! found		329621	0					
ANR	329830	UnaryOperator	!		329621	0					
ANR	329831	Identifier	found		329621	1					
ANR	329832	AndExpression	found && type == MAP_THUMB		329621	1		&&			
ANR	329833	Identifier	found		329621	0					
ANR	329834	EqualityExpression	type == MAP_THUMB		329621	1		==			
ANR	329835	Identifier	type		329621	0					
ANR	329836	Identifier	MAP_THUMB		329621	1					
ANR	329837	CompoundStatement		64:5:1574:1574	329621	1					
ANR	329838	ExpressionStatement	seen_it = insn	6270:7:230187:230201	329621	0	True				
ANR	329839	AssignmentExpression	seen_it = insn		329621	0		=			
ANR	329840	Identifier	seen_it		329621	0					
ANR	329841	Identifier	insn		329621	1					
ANR	329842	ExpressionStatement	it_count = count >> 1	6271:7:230210:230231	329621	1	True				
ANR	329843	AssignmentExpression	it_count = count >> 1		329621	0		=			
ANR	329844	Identifier	it_count		329621	0					
ANR	329845	ShiftExpression	count >> 1		329621	1		>>			
ANR	329846	Identifier	count		329621	0					
ANR	329847	PrimaryExpression	1		329621	1					
ANR	329848	IfStatement	if ( ( insn & 0xf800 ) >= 0xe800 )		329621	7					
ANR	329849	Condition	( insn & 0xf800 ) >= 0xe800	6274:5:230248:230272	329621	0	True				
ANR	329850	RelationalExpression	( insn & 0xf800 ) >= 0xe800		329621	0		>=			
ANR	329851	BitAndExpression	insn & 0xf800		329621	0		&			
ANR	329852	Identifier	insn		329621	0					
ANR	329853	PrimaryExpression	0xf800		329621	1					
ANR	329854	PrimaryExpression	0xe800		329621	1					
ANR	329855	CompoundStatement		70:32:1718:1718	329621	1					
ANR	329856	ExpressionStatement	count ++	6275:2:230279:230286	329621	0	True				
ANR	329857	PostIncDecOperationExpression	count ++		329621	0					
ANR	329858	Identifier	count		329621	0					
ANR	329859	IncDec	++		329621	1					
ANR	329860	ElseStatement	else		329621	0					
ANR	329861	CompoundStatement		72:8:1739:1739	329621	0					
ANR	329862	ExpressionStatement	count = ( count + 2 ) | 1	6277:2:230300:230323	329621	0	True				
ANR	329863	AssignmentExpression	count = ( count + 2 ) | 1		329621	0		=			
ANR	329864	Identifier	count		329621	0					
ANR	329865	InclusiveOrExpression	( count + 2 ) | 1		329621	1		|			
ANR	329866	AdditiveExpression	count + 2		329621	0		+			
ANR	329867	Identifier	count		329621	0					
ANR	329868	PrimaryExpression	2		329621	1					
ANR	329869	PrimaryExpression	1		329621	1					
ANR	329870	IfStatement	if ( count >= 8 && ! seen_it )		329621	8					
ANR	329871	Condition	count >= 8 && ! seen_it	6280:5:230383:230404	329621	0	True				
ANR	329872	AndExpression	count >= 8 && ! seen_it		329621	0		&&			
ANR	329873	RelationalExpression	count >= 8		329621	0		>=			
ANR	329874	Identifier	count		329621	0					
ANR	329875	PrimaryExpression	8		329621	1					
ANR	329876	UnaryOperationExpression	! seen_it		329621	1					
ANR	329877	UnaryOperator	!		329621	0					
ANR	329878	Identifier	seen_it		329621	1					
ANR	329879	CompoundStatement		76:29:1850:1850	329621	1					
ANR	329880	ReturnStatement	return ;	6281:2:230411:230417	329621	0	True				
ANR	329881	ExpressionStatement	ifthen_state = ( seen_it & 0xe0 ) | ( ( seen_it << it_count ) & 0x1f )	6285:2:230467:230531	329621	14	True				
ANR	329882	AssignmentExpression	ifthen_state = ( seen_it & 0xe0 ) | ( ( seen_it << it_count ) & 0x1f )		329621	0		=			
ANR	329883	Identifier	ifthen_state		329621	0					
ANR	329884	InclusiveOrExpression	( seen_it & 0xe0 ) | ( ( seen_it << it_count ) & 0x1f )		329621	1		|			
ANR	329885	BitAndExpression	seen_it & 0xe0		329621	0		&			
ANR	329886	Identifier	seen_it		329621	0					
ANR	329887	PrimaryExpression	0xe0		329621	1					
ANR	329888	BitAndExpression	( seen_it << it_count ) & 0x1f		329621	1		&			
ANR	329889	ShiftExpression	seen_it << it_count		329621	0		<<			
ANR	329890	Identifier	seen_it		329621	0					
ANR	329891	Identifier	it_count		329621	1					
ANR	329892	PrimaryExpression	0x1f		329621	1					
ANR	329893	IfStatement	if ( ( ifthen_state & 0xf ) == 0 )		329621	15					
ANR	329894	Condition	( ifthen_state & 0xf ) == 0	6286:6:230539:230563	329621	0	True				
ANR	329895	EqualityExpression	( ifthen_state & 0xf ) == 0		329621	0		==			
ANR	329896	BitAndExpression	ifthen_state & 0xf		329621	0		&			
ANR	329897	Identifier	ifthen_state		329621	0					
ANR	329898	PrimaryExpression	0xf		329621	1					
ANR	329899	PrimaryExpression	0		329621	1					
ANR	329900	CompoundStatement		82:33:2009:2009	329621	1					
ANR	329901	ExpressionStatement	ifthen_state = 0	6287:3:230571:230587	329621	0	True				
ANR	329902	AssignmentExpression	ifthen_state = 0		329621	0		=			
ANR	329903	Identifier	ifthen_state		329621	0					
ANR	329904	PrimaryExpression	0		329621	1					
ANR	329905	ReturnType	static void		329621	1					
ANR	329906	Identifier	find_ifthen_state		329621	2					
ANR	329907	ParameterList	"bfd_vma pc , struct disassemble_info * info , bfd_boolean little"		329621	3					
ANR	329908	Parameter	bfd_vma pc	6202:19:228483:228492	329621	0	True				
ANR	329909	ParameterType	bfd_vma		329621	0					
ANR	329910	Identifier	pc		329621	1					
ANR	329911	Parameter	struct disassemble_info * info	6203:5:228500:228528	329621	1	True				
ANR	329912	ParameterType	struct disassemble_info *		329621	0					
ANR	329913	Identifier	info		329621	1					
ANR	329914	Parameter	bfd_boolean little	6204:5:228536:228553	329621	2	True				
ANR	329915	ParameterType	bfd_boolean		329621	0					
ANR	329916	Identifier	little		329621	1					
ANR	329917	CFGEntryNode	ENTRY		329621		True				
ANR	329918	CFGExitNode	EXIT		329621		True				
ANR	329919	InfiniteForNode	true		329621		True				
ANR	329920	Symbol	MAP_THUMB		329621						
ANR	329921	Symbol	b		329621						
ANR	329922	Symbol	mapping_symbol_for_insn		329621						
ANR	329923	Symbol	& type		329621						
ANR	329924	Symbol	seen_it		329621						
ANR	329925	Symbol	MAP_ARM		329621						
ANR	329926	Symbol	count		329621						
ANR	329927	Symbol	it_count		329621						
ANR	329928	Symbol	info -> symbol_at_address_func		329621						
ANR	329929	Symbol	* b		329621						
ANR	329930	Symbol	type		329621						
ANR	329931	Symbol	insn		329621						
ANR	329932	Symbol	pc		329621						
ANR	329933	Symbol	ifthen_address		329621						
ANR	329934	Symbol	found		329621						
ANR	329935	Symbol	ifthen_state		329621						
ANR	329936	Symbol	info -> read_memory_func		329621						
ANR	329937	Symbol	* info		329621						
ANR	329938	Symbol	addr		329621						
ANR	329939	Symbol	info		329621						
ANR	329940	Symbol	little		329621						
ANR	329941	Symbol	status		329621						
ANR	329942	Function	is_mapping_symbol	6294:0:230682:231116							
ANR	329943	FunctionDef	"is_mapping_symbol (struct disassemble_info * info , int n , enum map_type * map_type)"		329942	0					
ANR	329944	CompoundStatement		6297:0:230780:231116	329942	0					
ANR	329945	IdentifierDeclStatement	const char * name ;	6298:2:230784:230800	329942	0	True				
ANR	329946	IdentifierDecl	* name		329942	0					
ANR	329947	IdentifierDeclType	const char *		329942	0					
ANR	329948	Identifier	name		329942	1					
ANR	329949	ExpressionStatement	name = bfd_asymbol_name ( info -> symtab [ n ] )	6300:2:230805:230846	329942	1	True				
ANR	329950	AssignmentExpression	name = bfd_asymbol_name ( info -> symtab [ n ] )		329942	0		=			
ANR	329951	Identifier	name		329942	0					
ANR	329952	CallExpression	bfd_asymbol_name ( info -> symtab [ n ] )		329942	1					
ANR	329953	Callee	bfd_asymbol_name		329942	0					
ANR	329954	Identifier	bfd_asymbol_name		329942	0					
ANR	329955	ArgumentList	info -> symtab [ n ]		329942	1					
ANR	329956	Argument	info -> symtab [ n ]		329942	0					
ANR	329957	ArrayIndexing	info -> symtab [ n ]		329942	0					
ANR	329958	PtrMemberAccess	info -> symtab		329942	0					
ANR	329959	Identifier	info		329942	0					
ANR	329960	Identifier	symtab		329942	1					
ANR	329961	Identifier	n		329942	1					
ANR	329962	IfStatement	if ( name [ 0 ] == '$' && ( name [ 1 ] == 'a' || name [ 1 ] == 't' || name [ 1 ] == 'd' ) && ( name [ 2 ] == 0 || name [ 2 ] == '.' ) )		329942	2					
ANR	329963	Condition	name [ 0 ] == '$' && ( name [ 1 ] == 'a' || name [ 1 ] == 't' || name [ 1 ] == 'd' ) && ( name [ 2 ] == 0 || name [ 2 ] == '.' )	6301:6:230854:230965	329942	0	True				
ANR	329964	AndExpression	name [ 0 ] == '$' && ( name [ 1 ] == 'a' || name [ 1 ] == 't' || name [ 1 ] == 'd' ) && ( name [ 2 ] == 0 || name [ 2 ] == '.' )		329942	0		&&			
ANR	329965	EqualityExpression	name [ 0 ] == '$'		329942	0		==			
ANR	329966	ArrayIndexing	name [ 0 ]		329942	0					
ANR	329967	Identifier	name		329942	0					
ANR	329968	PrimaryExpression	0		329942	1					
ANR	329969	PrimaryExpression	'$'		329942	1					
ANR	329970	AndExpression	( name [ 1 ] == 'a' || name [ 1 ] == 't' || name [ 1 ] == 'd' ) && ( name [ 2 ] == 0 || name [ 2 ] == '.' )		329942	1		&&			
ANR	329971	OrExpression	name [ 1 ] == 'a' || name [ 1 ] == 't' || name [ 1 ] == 'd'		329942	0		||			
ANR	329972	EqualityExpression	name [ 1 ] == 'a'		329942	0		==			
ANR	329973	ArrayIndexing	name [ 1 ]		329942	0					
ANR	329974	Identifier	name		329942	0					
ANR	329975	PrimaryExpression	1		329942	1					
ANR	329976	PrimaryExpression	'a'		329942	1					
ANR	329977	OrExpression	name [ 1 ] == 't' || name [ 1 ] == 'd'		329942	1		||			
ANR	329978	EqualityExpression	name [ 1 ] == 't'		329942	0		==			
ANR	329979	ArrayIndexing	name [ 1 ]		329942	0					
ANR	329980	Identifier	name		329942	0					
ANR	329981	PrimaryExpression	1		329942	1					
ANR	329982	PrimaryExpression	't'		329942	1					
ANR	329983	EqualityExpression	name [ 1 ] == 'd'		329942	1		==			
ANR	329984	ArrayIndexing	name [ 1 ]		329942	0					
ANR	329985	Identifier	name		329942	0					
ANR	329986	PrimaryExpression	1		329942	1					
ANR	329987	PrimaryExpression	'd'		329942	1					
ANR	329988	OrExpression	name [ 2 ] == 0 || name [ 2 ] == '.'		329942	1		||			
ANR	329989	EqualityExpression	name [ 2 ] == 0		329942	0		==			
ANR	329990	ArrayIndexing	name [ 2 ]		329942	0					
ANR	329991	Identifier	name		329942	0					
ANR	329992	PrimaryExpression	2		329942	1					
ANR	329993	PrimaryExpression	0		329942	1					
ANR	329994	EqualityExpression	name [ 2 ] == '.'		329942	1		==			
ANR	329995	ArrayIndexing	name [ 2 ]		329942	0					
ANR	329996	Identifier	name		329942	0					
ANR	329997	PrimaryExpression	2		329942	1					
ANR	329998	PrimaryExpression	'.'		329942	1					
ANR	329999	CompoundStatement		7:4:191:191	329942	1					
ANR	330000	ExpressionStatement	* map_type = ( ( name [ 1 ] == 'a' ) ? MAP_ARM : ( name [ 1 ] == 't' ) ? MAP_THUMB : MAP_DATA )	6304:6:230980:231072	329942	0	True				
ANR	330001	AssignmentExpression	* map_type = ( ( name [ 1 ] == 'a' ) ? MAP_ARM : ( name [ 1 ] == 't' ) ? MAP_THUMB : MAP_DATA )		329942	0		=			
ANR	330002	UnaryOperationExpression	* map_type		329942	0					
ANR	330003	UnaryOperator	*		329942	0					
ANR	330004	Identifier	map_type		329942	1					
ANR	330005	ConditionalExpression	( name [ 1 ] == 'a' ) ? MAP_ARM : ( name [ 1 ] == 't' ) ? MAP_THUMB : MAP_DATA		329942	1					
ANR	330006	Condition	name [ 1 ] == 'a'		329942	0					
ANR	330007	EqualityExpression	name [ 1 ] == 'a'		329942	0		==			
ANR	330008	ArrayIndexing	name [ 1 ]		329942	0					
ANR	330009	Identifier	name		329942	0					
ANR	330010	PrimaryExpression	1		329942	1					
ANR	330011	PrimaryExpression	'a'		329942	1					
ANR	330012	Identifier	MAP_ARM		329942	1					
ANR	330013	ConditionalExpression	( name [ 1 ] == 't' ) ? MAP_THUMB : MAP_DATA		329942	2					
ANR	330014	Condition	name [ 1 ] == 't'		329942	0					
ANR	330015	EqualityExpression	name [ 1 ] == 't'		329942	0		==			
ANR	330016	ArrayIndexing	name [ 1 ]		329942	0					
ANR	330017	Identifier	name		329942	0					
ANR	330018	PrimaryExpression	1		329942	1					
ANR	330019	PrimaryExpression	't'		329942	1					
ANR	330020	Identifier	MAP_THUMB		329942	1					
ANR	330021	Identifier	MAP_DATA		329942	2					
ANR	330022	ReturnStatement	return TRUE ;	6307:6:231080:231091	329942	1	True				
ANR	330023	Identifier	TRUE		329942	0					
ANR	330024	ReturnStatement	return FALSE ;	6310:2:231102:231114	329942	3	True				
ANR	330025	Identifier	FALSE		329942	0					
ANR	330026	ReturnType	static int		329942	1					
ANR	330027	Identifier	is_mapping_symbol		329942	2					
ANR	330028	ParameterList	"struct disassemble_info * info , int n , enum map_type * map_type"		329942	3					
ANR	330029	Parameter	struct disassemble_info * info	6295:19:230712:230740	329942	0	True				
ANR	330030	ParameterType	struct disassemble_info *		329942	0					
ANR	330031	Identifier	info		329942	1					
ANR	330032	Parameter	int n	6295:50:230743:230747	329942	1	True				
ANR	330033	ParameterType	int		329942	0					
ANR	330034	Identifier	n		329942	1					
ANR	330035	Parameter	enum map_type * map_type	6296:5:230755:230777	329942	2	True				
ANR	330036	ParameterType	enum map_type *		329942	0					
ANR	330037	Identifier	map_type		329942	1					
ANR	330038	CFGEntryNode	ENTRY		329942		True				
ANR	330039	CFGExitNode	EXIT		329942		True				
ANR	330040	Symbol	* name		329942						
ANR	330041	Symbol	MAP_DATA		329942						
ANR	330042	Symbol	MAP_THUMB		329942						
ANR	330043	Symbol	* * info		329942						
ANR	330044	Symbol	MAP_ARM		329942						
ANR	330045	Symbol	TRUE		329942						
ANR	330046	Symbol	n		329942						
ANR	330047	Symbol	* info -> symtab		329942						
ANR	330048	Symbol	map_type		329942						
ANR	330049	Symbol	* map_type		329942						
ANR	330050	Symbol	name		329942						
ANR	330051	Symbol	* n		329942						
ANR	330052	Symbol	FALSE		329942						
ANR	330053	Symbol	* info		329942						
ANR	330054	Symbol	bfd_asymbol_name		329942						
ANR	330055	Symbol	info -> symtab		329942						
ANR	330056	Symbol	info		329942						
ANR	330057	Function	get_map_sym_type	6316:0:231233:231542							
ANR	330058	FunctionDef	"get_map_sym_type (struct disassemble_info * info , int n , enum map_type * map_type)"		330057	0					
ANR	330059	CompoundStatement		6320:0:231333:231542	330057	0					
ANR	330060	IfStatement	if ( info -> section != NULL && info -> section != info -> symtab [ n ] -> section )		330057	0					
ANR	330061	Condition	info -> section != NULL && info -> section != info -> symtab [ n ] -> section	6322:6:231402:231467	330057	0	True				
ANR	330062	AndExpression	info -> section != NULL && info -> section != info -> symtab [ n ] -> section		330057	0		&&			
ANR	330063	EqualityExpression	info -> section != NULL		330057	0		!=			
ANR	330064	PtrMemberAccess	info -> section		330057	0					
ANR	330065	Identifier	info		330057	0					
ANR	330066	Identifier	section		330057	1					
ANR	330067	Identifier	NULL		330057	1					
ANR	330068	EqualityExpression	info -> section != info -> symtab [ n ] -> section		330057	1		!=			
ANR	330069	PtrMemberAccess	info -> section		330057	0					
ANR	330070	Identifier	info		330057	0					
ANR	330071	Identifier	section		330057	1					
ANR	330072	PtrMemberAccess	info -> symtab [ n ] -> section		330057	1					
ANR	330073	ArrayIndexing	info -> symtab [ n ]		330057	0					
ANR	330074	PtrMemberAccess	info -> symtab		330057	0					
ANR	330075	Identifier	info		330057	0					
ANR	330076	Identifier	symtab		330057	1					
ANR	330077	Identifier	n		330057	1					
ANR	330078	Identifier	section		330057	1					
ANR	330079	CompoundStatement		3:74:136:136	330057	1					
ANR	330080	ReturnStatement	return FALSE ;	6323:3:231475:231487	330057	0	True				
ANR	330081	Identifier	FALSE		330057	0					
ANR	330082	ReturnStatement	"return is_mapping_symbol ( info , n , map_type ) ;"	6326:2:231496:231540	330057	1	True				
ANR	330083	CallExpression	"is_mapping_symbol ( info , n , map_type )"		330057	0					
ANR	330084	Callee	is_mapping_symbol		330057	0					
ANR	330085	Identifier	is_mapping_symbol		330057	0					
ANR	330086	ArgumentList	info		330057	1					
ANR	330087	Argument	info		330057	0					
ANR	330088	Identifier	info		330057	0					
ANR	330089	Argument	n		330057	1					
ANR	330090	Identifier	n		330057	0					
ANR	330091	Argument	map_type		330057	2					
ANR	330092	Identifier	map_type		330057	0					
ANR	330093	ReturnType	static int		330057	1					
ANR	330094	Identifier	get_map_sym_type		330057	2					
ANR	330095	ParameterList	"struct disassemble_info * info , int n , enum map_type * map_type"		330057	3					
ANR	330096	Parameter	struct disassemble_info * info	6317:18:231262:231290	330057	0	True				
ANR	330097	ParameterType	struct disassemble_info *		330057	0					
ANR	330098	Identifier	info		330057	1					
ANR	330099	Parameter	int n	6318:4:231297:231301	330057	1	True				
ANR	330100	ParameterType	int		330057	0					
ANR	330101	Identifier	n		330057	1					
ANR	330102	Parameter	enum map_type * map_type	6319:4:231308:231330	330057	2	True				
ANR	330103	ParameterType	enum map_type *		330057	0					
ANR	330104	Identifier	map_type		330057	1					
ANR	330105	CFGEntryNode	ENTRY		330057		True				
ANR	330106	CFGExitNode	EXIT		330057		True				
ANR	330107	Symbol	* * info		330057						
ANR	330108	Symbol	* * * info		330057						
ANR	330109	Symbol	NULL		330057						
ANR	330110	Symbol	info -> section		330057						
ANR	330111	Symbol	* * info -> symtab		330057						
ANR	330112	Symbol	n		330057						
ANR	330113	Symbol	* info -> symtab		330057						
ANR	330114	Symbol	map_type		330057						
ANR	330115	Symbol	* n		330057						
ANR	330116	Symbol	FALSE		330057						
ANR	330117	Symbol	* info		330057						
ANR	330118	Symbol	info -> symtab [ n ] -> section		330057						
ANR	330119	Symbol	* * n		330057						
ANR	330120	Symbol	is_mapping_symbol		330057						
ANR	330121	Symbol	info -> symtab		330057						
ANR	330122	Symbol	info		330057						
ANR	330123	Function	get_sym_code_type	6332:0:231663:232408							
ANR	330124	FunctionDef	"get_sym_code_type (struct disassemble_info * info , int n , enum map_type * map_type)"		330123	0					
ANR	330125	CompoundStatement		6336:0:231766:232408	330123	0					
ANR	330126	ReturnStatement	return FALSE ;	6337:0:231768:231780	330123	0	True				
ANR	330127	Identifier	FALSE		330123	0					
ANR	330128	IdentifierDeclStatement	elf_symbol_type * es ;	6339:2:231790:231809	330123	1	True				
ANR	330129	IdentifierDecl	* es		330123	0					
ANR	330130	IdentifierDeclType	elf_symbol_type *		330123	0					
ANR	330131	Identifier	es		330123	1					
ANR	330132	IdentifierDeclStatement	unsigned int type ;	6340:2:231813:231830	330123	2	True				
ANR	330133	IdentifierDecl	type		330123	0					
ANR	330134	IdentifierDeclType	unsigned int		330123	0					
ANR	330135	Identifier	type		330123	1					
ANR	330136	IfStatement	if ( info -> section != NULL && info -> section != info -> symtab [ n ] -> section )		330123	3					
ANR	330137	Condition	info -> section != NULL && info -> section != info -> symtab [ n ] -> section	6343:6:231900:231965	330123	0	True				
ANR	330138	AndExpression	info -> section != NULL && info -> section != info -> symtab [ n ] -> section		330123	0		&&			
ANR	330139	EqualityExpression	info -> section != NULL		330123	0		!=			
ANR	330140	PtrMemberAccess	info -> section		330123	0					
ANR	330141	Identifier	info		330123	0					
ANR	330142	Identifier	section		330123	1					
ANR	330143	Identifier	NULL		330123	1					
ANR	330144	EqualityExpression	info -> section != info -> symtab [ n ] -> section		330123	1		!=			
ANR	330145	PtrMemberAccess	info -> section		330123	0					
ANR	330146	Identifier	info		330123	0					
ANR	330147	Identifier	section		330123	1					
ANR	330148	PtrMemberAccess	info -> symtab [ n ] -> section		330123	1					
ANR	330149	ArrayIndexing	info -> symtab [ n ]		330123	0					
ANR	330150	PtrMemberAccess	info -> symtab		330123	0					
ANR	330151	Identifier	info		330123	0					
ANR	330152	Identifier	symtab		330123	1					
ANR	330153	Identifier	n		330123	1					
ANR	330154	Identifier	section		330123	1					
ANR	330155	ReturnStatement	return FALSE ;	6344:4:231972:231984	330123	1	True				
ANR	330156	Identifier	FALSE		330123	0					
ANR	330157	ExpressionStatement	es = * ( elf_symbol_type * * ) ( info -> symtab + n )	6346:2:231989:232033	330123	4	True				
ANR	330158	AssignmentExpression	es = * ( elf_symbol_type * * ) ( info -> symtab + n )		330123	0		=			
ANR	330159	Identifier	es		330123	0					
ANR	330160	UnaryOperationExpression	* ( elf_symbol_type * * ) ( info -> symtab + n )		330123	1					
ANR	330161	UnaryOperator	*		330123	0					
ANR	330162	CastExpression	( elf_symbol_type * * ) ( info -> symtab + n )		330123	1					
ANR	330163	CastTarget	elf_symbol_type * *		330123	0					
ANR	330164	AdditiveExpression	info -> symtab + n		330123	1		+			
ANR	330165	PtrMemberAccess	info -> symtab		330123	0					
ANR	330166	Identifier	info		330123	0					
ANR	330167	Identifier	symtab		330123	1					
ANR	330168	Identifier	n		330123	1					
ANR	330169	ExpressionStatement	type = ELF_ST_TYPE ( es -> internal_elf_sym . st_info )	6347:2:232037:232086	330123	5	True				
ANR	330170	AssignmentExpression	type = ELF_ST_TYPE ( es -> internal_elf_sym . st_info )		330123	0		=			
ANR	330171	Identifier	type		330123	0					
ANR	330172	CallExpression	ELF_ST_TYPE ( es -> internal_elf_sym . st_info )		330123	1					
ANR	330173	Callee	ELF_ST_TYPE		330123	0					
ANR	330174	Identifier	ELF_ST_TYPE		330123	0					
ANR	330175	ArgumentList	es -> internal_elf_sym . st_info		330123	1					
ANR	330176	Argument	es -> internal_elf_sym . st_info		330123	0					
ANR	330177	MemberAccess	es -> internal_elf_sym . st_info		330123	0					
ANR	330178	PtrMemberAccess	es -> internal_elf_sym		330123	0					
ANR	330179	Identifier	es		330123	0					
ANR	330180	Identifier	internal_elf_sym		330123	1					
ANR	330181	Identifier	st_info		330123	1					
ANR	330182	IfStatement	if ( type == STT_FUNC || type == STT_GNU_IFUNC )		330123	6					
ANR	330183	Condition	type == STT_FUNC || type == STT_GNU_IFUNC	6350:6:232151:232191	330123	0	True				
ANR	330184	OrExpression	type == STT_FUNC || type == STT_GNU_IFUNC		330123	0		||			
ANR	330185	EqualityExpression	type == STT_FUNC		330123	0		==			
ANR	330186	Identifier	type		330123	0					
ANR	330187	Identifier	STT_FUNC		330123	1					
ANR	330188	EqualityExpression	type == STT_GNU_IFUNC		330123	1		==			
ANR	330189	Identifier	type		330123	0					
ANR	330190	Identifier	STT_GNU_IFUNC		330123	1					
ANR	330191	CompoundStatement		16:4:431:431	330123	1					
ANR	330192	IfStatement	if ( ARM_GET_SYM_BRANCH_TYPE ( es -> internal_elf_sym . st_target_internal ) == ST_BRANCH_TO_THUMB )		330123	0					
ANR	330193	Condition	ARM_GET_SYM_BRANCH_TYPE ( es -> internal_elf_sym . st_target_internal ) == ST_BRANCH_TO_THUMB	6352:10:232210:232299	330123	0	True				
ANR	330194	EqualityExpression	ARM_GET_SYM_BRANCH_TYPE ( es -> internal_elf_sym . st_target_internal ) == ST_BRANCH_TO_THUMB		330123	0		==			
ANR	330195	CallExpression	ARM_GET_SYM_BRANCH_TYPE ( es -> internal_elf_sym . st_target_internal )		330123	0					
ANR	330196	Callee	ARM_GET_SYM_BRANCH_TYPE		330123	0					
ANR	330197	Identifier	ARM_GET_SYM_BRANCH_TYPE		330123	0					
ANR	330198	ArgumentList	es -> internal_elf_sym . st_target_internal		330123	1					
ANR	330199	Argument	es -> internal_elf_sym . st_target_internal		330123	0					
ANR	330200	MemberAccess	es -> internal_elf_sym . st_target_internal		330123	0					
ANR	330201	PtrMemberAccess	es -> internal_elf_sym		330123	0					
ANR	330202	Identifier	es		330123	0					
ANR	330203	Identifier	internal_elf_sym		330123	1					
ANR	330204	Identifier	st_target_internal		330123	1					
ANR	330205	Identifier	ST_BRANCH_TO_THUMB		330123	1					
ANR	330206	ExpressionStatement	* map_type = MAP_THUMB	6354:1:232303:232324	330123	1	True				
ANR	330207	AssignmentExpression	* map_type = MAP_THUMB		330123	0		=			
ANR	330208	UnaryOperationExpression	* map_type		330123	0					
ANR	330209	UnaryOperator	*		330123	0					
ANR	330210	Identifier	map_type		330123	1					
ANR	330211	Identifier	MAP_THUMB		330123	1					
ANR	330212	ElseStatement	else		330123	0					
ANR	330213	ExpressionStatement	* map_type = MAP_ARM	6356:1:232338:232357	330123	0	True				
ANR	330214	AssignmentExpression	* map_type = MAP_ARM		330123	0		=			
ANR	330215	UnaryOperationExpression	* map_type		330123	0					
ANR	330216	UnaryOperator	*		330123	0					
ANR	330217	Identifier	map_type		330123	1					
ANR	330218	Identifier	MAP_ARM		330123	1					
ANR	330219	ReturnStatement	return TRUE ;	6357:6:232365:232376	330123	1	True				
ANR	330220	Identifier	TRUE		330123	0					
ANR	330221	ReturnStatement	return FALSE ;	6360:2:232387:232399	330123	7	True				
ANR	330222	Identifier	FALSE		330123	0					
ANR	330223	ReturnType	static int		330123	1					
ANR	330224	Identifier	get_sym_code_type		330123	2					
ANR	330225	ParameterList	"struct disassemble_info * info , int n , enum map_type * map_type"		330123	3					
ANR	330226	Parameter	struct disassemble_info * info	6333:19:231693:231721	330123	0	True				
ANR	330227	ParameterType	struct disassemble_info *		330123	0					
ANR	330228	Identifier	info		330123	1					
ANR	330229	Parameter	int n	6334:5:231729:231733	330123	1	True				
ANR	330230	ParameterType	int		330123	0					
ANR	330231	Identifier	n		330123	1					
ANR	330232	Parameter	enum map_type * map_type	6335:5:231741:231763	330123	2	True				
ANR	330233	ParameterType	enum map_type *		330123	0					
ANR	330234	Identifier	map_type		330123	1					
ANR	330235	CFGEntryNode	ENTRY		330123		True				
ANR	330236	CFGExitNode	EXIT		330123		True				
ANR	330237	Symbol	* * info		330123						
ANR	330238	Symbol	info -> section		330123						
ANR	330239	Symbol	MAP_ARM		330123						
ANR	330240	Symbol	type		330123						
ANR	330241	Symbol	ELF_ST_TYPE		330123						
ANR	330242	Symbol	STT_FUNC		330123						
ANR	330243	Symbol	map_type		330123						
ANR	330244	Symbol	es -> internal_elf_sym		330123						
ANR	330245	Symbol	es -> internal_elf_sym . st_info		330123						
ANR	330246	Symbol	* ( elf_symbol_type * * ) ( info -> symtab + n )		330123						
ANR	330247	Symbol	* * n		330123						
ANR	330248	Symbol	info -> symtab		330123						
ANR	330249	Symbol	info		330123						
ANR	330250	Symbol	MAP_THUMB		330123						
ANR	330251	Symbol	NULL		330123						
ANR	330252	Symbol	* * * info		330123						
ANR	330253	Symbol	TRUE		330123						
ANR	330254	Symbol	* * info -> symtab		330123						
ANR	330255	Symbol	STT_GNU_IFUNC		330123						
ANR	330256	Symbol	n		330123						
ANR	330257	Symbol	es		330123						
ANR	330258	Symbol	es -> internal_elf_sym . st_target_internal		330123						
ANR	330259	Symbol	ARM_GET_SYM_BRANCH_TYPE		330123						
ANR	330260	Symbol	* info -> symtab		330123						
ANR	330261	Symbol	ST_BRANCH_TO_THUMB		330123						
ANR	330262	Symbol	* map_type		330123						
ANR	330263	Symbol	* es		330123						
ANR	330264	Symbol	* n		330123						
ANR	330265	Symbol	FALSE		330123						
ANR	330266	Symbol	* info		330123						
ANR	330267	Symbol	info -> symtab [ n ] -> section		330123						
ANR	330268	Function	mapping_symbol_for_insn	6374:0:232841:234132							
ANR	330269	FunctionDef	"mapping_symbol_for_insn (bfd_vma pc , struct disassemble_info * info , enum map_type * map_symbol)"		330268	0					
ANR	330270	CompoundStatement		6377:0:232959:234132	330268	0					
ANR	330271	IdentifierDeclStatement	bfd_vma addr ;	6378:2:232963:232975	330268	0	True				
ANR	330272	IdentifierDecl	addr		330268	0					
ANR	330273	IdentifierDeclType	bfd_vma		330268	0					
ANR	330274	Identifier	addr		330268	1					
ANR	330275	IdentifierDeclStatement	"int n , start = 0 ;"	6379:2:232979:232995	330268	1	True				
ANR	330276	IdentifierDecl	n		330268	0					
ANR	330277	IdentifierDeclType	int		330268	0					
ANR	330278	Identifier	n		330268	1					
ANR	330279	IdentifierDecl	start = 0		330268	1					
ANR	330280	IdentifierDeclType	int		330268	0					
ANR	330281	Identifier	start		330268	1					
ANR	330282	AssignmentExpression	start = 0		330268	2		=			
ANR	330283	Identifier	start		330268	0					
ANR	330284	PrimaryExpression	0		330268	1					
ANR	330285	IdentifierDeclStatement	bfd_boolean found = FALSE ;	6380:2:232999:233024	330268	2	True				
ANR	330286	IdentifierDecl	found = FALSE		330268	0					
ANR	330287	IdentifierDeclType	bfd_boolean		330268	0					
ANR	330288	Identifier	found		330268	1					
ANR	330289	AssignmentExpression	found = FALSE		330268	2		=			
ANR	330290	Identifier	FALSE		330268	0					
ANR	330291	Identifier	FALSE		330268	1					
ANR	330292	IdentifierDeclStatement	enum map_type type = MAP_ARM ;	6381:2:233028:233056	330268	3	True				
ANR	330293	IdentifierDecl	type = MAP_ARM		330268	0					
ANR	330294	IdentifierDeclType	enum map_type		330268	0					
ANR	330295	Identifier	type		330268	1					
ANR	330296	AssignmentExpression	type = MAP_ARM		330268	2		=			
ANR	330297	Identifier	MAP_ARM		330268	0					
ANR	330298	Identifier	MAP_ARM		330268	1					
ANR	330299	IdentifierDeclStatement	struct arm_private_data * private_data ;	6382:2:233060:233097	330268	4	True				
ANR	330300	IdentifierDecl	* private_data		330268	0					
ANR	330301	IdentifierDeclType	struct arm_private_data *		330268	0					
ANR	330302	Identifier	private_data		330268	1					
ANR	330303	IfStatement	if ( info -> private_data == NULL || info -> symtab_size == 0 || bfd_asymbol_flavour ( * info -> symtab ) != bfd_target_elf_flavour )		330268	5					
ANR	330304	Condition	info -> private_data == NULL || info -> symtab_size == 0 || bfd_asymbol_flavour ( * info -> symtab ) != bfd_target_elf_flavour	6384:6:233106:233222	330268	0	True				
ANR	330305	OrExpression	info -> private_data == NULL || info -> symtab_size == 0 || bfd_asymbol_flavour ( * info -> symtab ) != bfd_target_elf_flavour		330268	0		||			
ANR	330306	EqualityExpression	info -> private_data == NULL		330268	0		==			
ANR	330307	PtrMemberAccess	info -> private_data		330268	0					
ANR	330308	Identifier	info		330268	0					
ANR	330309	Identifier	private_data		330268	1					
ANR	330310	Identifier	NULL		330268	1					
ANR	330311	OrExpression	info -> symtab_size == 0 || bfd_asymbol_flavour ( * info -> symtab ) != bfd_target_elf_flavour		330268	1		||			
ANR	330312	EqualityExpression	info -> symtab_size == 0		330268	0		==			
ANR	330313	PtrMemberAccess	info -> symtab_size		330268	0					
ANR	330314	Identifier	info		330268	0					
ANR	330315	Identifier	symtab_size		330268	1					
ANR	330316	PrimaryExpression	0		330268	1					
ANR	330317	EqualityExpression	bfd_asymbol_flavour ( * info -> symtab ) != bfd_target_elf_flavour		330268	1		!=			
ANR	330318	CallExpression	bfd_asymbol_flavour ( * info -> symtab )		330268	0					
ANR	330319	Callee	bfd_asymbol_flavour		330268	0					
ANR	330320	Identifier	bfd_asymbol_flavour		330268	0					
ANR	330321	ArgumentList	* info -> symtab		330268	1					
ANR	330322	Argument	* info -> symtab		330268	0					
ANR	330323	UnaryOperationExpression	* info -> symtab		330268	0					
ANR	330324	UnaryOperator	*		330268	0					
ANR	330325	PtrMemberAccess	info -> symtab		330268	1					
ANR	330326	Identifier	info		330268	0					
ANR	330327	Identifier	symtab		330268	1					
ANR	330328	Identifier	bfd_target_elf_flavour		330268	1					
ANR	330329	CompoundStatement		8:125:265:265	330268	1					
ANR	330330	ReturnStatement	return FALSE ;	6385:3:233230:233242	330268	0	True				
ANR	330331	Identifier	FALSE		330268	0					
ANR	330332	ExpressionStatement	private_data = info -> private_data	6388:2:233251:233284	330268	6	True				
ANR	330333	AssignmentExpression	private_data = info -> private_data		330268	0		=			
ANR	330334	Identifier	private_data		330268	0					
ANR	330335	PtrMemberAccess	info -> private_data		330268	1					
ANR	330336	Identifier	info		330268	0					
ANR	330337	Identifier	private_data		330268	1					
ANR	330338	IfStatement	if ( pc == 0 )		330268	7					
ANR	330339	Condition	pc == 0	6389:6:233292:233298	330268	0	True				
ANR	330340	EqualityExpression	pc == 0		330268	0		==			
ANR	330341	Identifier	pc		330268	0					
ANR	330342	PrimaryExpression	0		330268	1					
ANR	330343	CompoundStatement		13:15:341:341	330268	1					
ANR	330344	ExpressionStatement	start = 0	6390:3:233306:233315	330268	0	True				
ANR	330345	AssignmentExpression	start = 0		330268	0		=			
ANR	330346	Identifier	start		330268	0					
ANR	330347	PrimaryExpression	0		330268	1					
ANR	330348	ElseStatement	else		330268	0					
ANR	330349	CompoundStatement		15:9:366:366	330268	0					
ANR	330350	ExpressionStatement	start = private_data -> last_mapping_sym	6392:3:233331:233369	330268	0	True				
ANR	330351	AssignmentExpression	start = private_data -> last_mapping_sym		330268	0		=			
ANR	330352	Identifier	start		330268	0					
ANR	330353	PtrMemberAccess	private_data -> last_mapping_sym		330268	1					
ANR	330354	Identifier	private_data		330268	0					
ANR	330355	Identifier	last_mapping_sym		330268	1					
ANR	330356	ExpressionStatement	start = ( start == - 1 ) ? 0 : start	6395:2:233378:233410	330268	8	True				
ANR	330357	AssignmentExpression	start = ( start == - 1 ) ? 0 : start		330268	0		=			
ANR	330358	Identifier	start		330268	0					
ANR	330359	ConditionalExpression	( start == - 1 ) ? 0 : start		330268	1					
ANR	330360	Condition	start == - 1		330268	0					
ANR	330361	EqualityExpression	start == - 1		330268	0		==			
ANR	330362	Identifier	start		330268	0					
ANR	330363	UnaryOperationExpression	- 1		330268	1					
ANR	330364	UnaryOperator	-		330268	0					
ANR	330365	PrimaryExpression	1		330268	1					
ANR	330366	PrimaryExpression	0		330268	1					
ANR	330367	Identifier	start		330268	2					
ANR	330368	ExpressionStatement	addr = bfd_asymbol_value ( info -> symtab [ start ] )	6396:2:233414:233460	330268	9	True				
ANR	330369	AssignmentExpression	addr = bfd_asymbol_value ( info -> symtab [ start ] )		330268	0		=			
ANR	330370	Identifier	addr		330268	0					
ANR	330371	CallExpression	bfd_asymbol_value ( info -> symtab [ start ] )		330268	1					
ANR	330372	Callee	bfd_asymbol_value		330268	0					
ANR	330373	Identifier	bfd_asymbol_value		330268	0					
ANR	330374	ArgumentList	info -> symtab [ start ]		330268	1					
ANR	330375	Argument	info -> symtab [ start ]		330268	0					
ANR	330376	ArrayIndexing	info -> symtab [ start ]		330268	0					
ANR	330377	PtrMemberAccess	info -> symtab		330268	0					
ANR	330378	Identifier	info		330268	0					
ANR	330379	Identifier	symtab		330268	1					
ANR	330380	Identifier	start		330268	1					
ANR	330381	IfStatement	if ( pc >= addr )		330268	10					
ANR	330382	Condition	pc >= addr	6398:6:233469:233478	330268	0	True				
ANR	330383	RelationalExpression	pc >= addr		330268	0		>=			
ANR	330384	Identifier	pc		330268	0					
ANR	330385	Identifier	addr		330268	1					
ANR	330386	CompoundStatement		23:4:525:525	330268	1					
ANR	330387	IfStatement	"if ( get_map_sym_type ( info , start , & type ) )"		330268	0					
ANR	330388	Condition	"get_map_sym_type ( info , start , & type )"	6400:7:233494:233530	330268	0	True				
ANR	330389	CallExpression	"get_map_sym_type ( info , start , & type )"		330268	0					
ANR	330390	Callee	get_map_sym_type		330268	0					
ANR	330391	Identifier	get_map_sym_type		330268	0					
ANR	330392	ArgumentList	info		330268	1					
ANR	330393	Argument	info		330268	0					
ANR	330394	Identifier	info		330268	0					
ANR	330395	Argument	start		330268	1					
ANR	330396	Identifier	start		330268	0					
ANR	330397	Argument	& type		330268	2					
ANR	330398	UnaryOperationExpression	& type		330268	0					
ANR	330399	UnaryOperator	&		330268	0					
ANR	330400	Identifier	type		330268	1					
ANR	330401	CompoundStatement		24:46:573:573	330268	1					
ANR	330402	ExpressionStatement	found = TRUE	6401:4:233539:233551	330268	0	True				
ANR	330403	AssignmentExpression	found = TRUE		330268	0		=			
ANR	330404	Identifier	found		330268	0					
ANR	330405	Identifier	TRUE		330268	1					
ANR	330406	ElseStatement	else		330268	0					
ANR	330407	CompoundStatement		29:4:615:615	330268	0					
ANR	330408	ForStatement	for ( n = start - 1 ; n >= 0 ; n -- )		330268	0					
ANR	330409	ForInit	n = start - 1 ;	6406:11:233588:233601	330268	0	True				
ANR	330410	AssignmentExpression	n = start - 1		330268	0		=			
ANR	330411	Identifier	n		330268	0					
ANR	330412	AdditiveExpression	start - 1		330268	1		-			
ANR	330413	Identifier	start		330268	0					
ANR	330414	PrimaryExpression	1		330268	1					
ANR	330415	Condition	n >= 0	6406:26:233603:233608	330268	1	True				
ANR	330416	RelationalExpression	n >= 0		330268	0		>=			
ANR	330417	Identifier	n		330268	0					
ANR	330418	PrimaryExpression	0		330268	1					
ANR	330419	PostIncDecOperationExpression	n --	6406:34:233611:233613	330268	2	True				
ANR	330420	Identifier	n		330268	0					
ANR	330421	IncDec	--		330268	1					
ANR	330422	CompoundStatement		31:1:657:657	330268	3					
ANR	330423	IfStatement	"if ( get_map_sym_type ( info , n , & type ) )"		330268	0					
ANR	330424	Condition	"get_map_sym_type ( info , n , & type )"	6408:7:233626:233658	330268	0	True				
ANR	330425	CallExpression	"get_map_sym_type ( info , n , & type )"		330268	0					
ANR	330426	Callee	get_map_sym_type		330268	0					
ANR	330427	Identifier	get_map_sym_type		330268	0					
ANR	330428	ArgumentList	info		330268	1					
ANR	330429	Argument	info		330268	0					
ANR	330430	Identifier	info		330268	0					
ANR	330431	Argument	n		330268	1					
ANR	330432	Identifier	n		330268	0					
ANR	330433	Argument	& type		330268	2					
ANR	330434	UnaryOperationExpression	& type		330268	0					
ANR	330435	UnaryOperator	&		330268	0					
ANR	330436	Identifier	type		330268	1					
ANR	330437	CompoundStatement		33:5:706:706	330268	1					
ANR	330438	ExpressionStatement	found = TRUE	6410:7:233675:233687	330268	0	True				
ANR	330439	AssignmentExpression	found = TRUE		330268	0		=			
ANR	330440	Identifier	found		330268	0					
ANR	330441	Identifier	TRUE		330268	1					
ANR	330442	BreakStatement	break ;	6411:7:233696:233701	330268	1	True				
ANR	330443	IfStatement	if ( ! found && private_data -> has_mapping_symbols == 1 )		330268	11					
ANR	330444	Condition	! found && private_data -> has_mapping_symbols == 1	6421:6:233988:234035	330268	0	True				
ANR	330445	AndExpression	! found && private_data -> has_mapping_symbols == 1		330268	0		&&			
ANR	330446	UnaryOperationExpression	! found		330268	0					
ANR	330447	UnaryOperator	!		330268	0					
ANR	330448	Identifier	found		330268	1					
ANR	330449	EqualityExpression	private_data -> has_mapping_symbols == 1		330268	1		==			
ANR	330450	PtrMemberAccess	private_data -> has_mapping_symbols		330268	0					
ANR	330451	Identifier	private_data		330268	0					
ANR	330452	Identifier	has_mapping_symbols		330268	1					
ANR	330453	PrimaryExpression	1		330268	1					
ANR	330454	CompoundStatement		46:4:1082:1082	330268	1					
ANR	330455	ExpressionStatement	type = MAP_DATA	6423:6:234050:234065	330268	0	True				
ANR	330456	AssignmentExpression	type = MAP_DATA		330268	0		=			
ANR	330457	Identifier	type		330268	0					
ANR	330458	Identifier	MAP_DATA		330268	1					
ANR	330459	ExpressionStatement	found = TRUE	6424:6:234073:234085	330268	1	True				
ANR	330460	AssignmentExpression	found = TRUE		330268	0		=			
ANR	330461	Identifier	found		330268	0					
ANR	330462	Identifier	TRUE		330268	1					
ANR	330463	ExpressionStatement	* map_symbol = type	6427:2:234096:234114	330268	12	True				
ANR	330464	AssignmentExpression	* map_symbol = type		330268	0		=			
ANR	330465	UnaryOperationExpression	* map_symbol		330268	0					
ANR	330466	UnaryOperator	*		330268	0					
ANR	330467	Identifier	map_symbol		330268	1					
ANR	330468	Identifier	type		330268	1					
ANR	330469	ReturnStatement	return found ;	6428:2:234118:234130	330268	13	True				
ANR	330470	Identifier	found		330268	0					
ANR	330471	ReturnType	static bfd_boolean		330268	1					
ANR	330472	Identifier	mapping_symbol_for_insn		330268	2					
ANR	330473	ParameterList	"bfd_vma pc , struct disassemble_info * info , enum map_type * map_symbol"		330268	3					
ANR	330474	Parameter	bfd_vma pc	6375:25:232885:232894	330268	0	True				
ANR	330475	ParameterType	bfd_vma		330268	0					
ANR	330476	Identifier	pc		330268	1					
ANR	330477	Parameter	struct disassemble_info * info	6375:37:232897:232925	330268	1	True				
ANR	330478	ParameterType	struct disassemble_info *		330268	0					
ANR	330479	Identifier	info		330268	1					
ANR	330480	Parameter	enum map_type * map_symbol	6376:4:232932:232956	330268	2	True				
ANR	330481	ParameterType	enum map_type *		330268	0					
ANR	330482	Identifier	map_symbol		330268	1					
ANR	330483	CFGEntryNode	ENTRY		330268		True				
ANR	330484	CFGExitNode	EXIT		330268		True				
ANR	330485	Symbol	MAP_DATA		330268						
ANR	330486	Symbol	* * info		330268						
ANR	330487	Symbol	private_data		330268						
ANR	330488	Symbol	MAP_ARM		330268						
ANR	330489	Symbol	* start		330268						
ANR	330490	Symbol	type		330268						
ANR	330491	Symbol	found		330268						
ANR	330492	Symbol	bfd_target_elf_flavour		330268						
ANR	330493	Symbol	bfd_asymbol_flavour		330268						
ANR	330494	Symbol	map_symbol		330268						
ANR	330495	Symbol	addr		330268						
ANR	330496	Symbol	info -> symtab		330268						
ANR	330497	Symbol	info		330268						
ANR	330498	Symbol	get_map_sym_type		330268						
ANR	330499	Symbol	NULL		330268						
ANR	330500	Symbol	& type		330268						
ANR	330501	Symbol	info -> private_data		330268						
ANR	330502	Symbol	start		330268						
ANR	330503	Symbol	TRUE		330268						
ANR	330504	Symbol	info -> symtab_size		330268						
ANR	330505	Symbol	* map_symbol		330268						
ANR	330506	Symbol	n		330268						
ANR	330507	Symbol	* info -> symtab		330268						
ANR	330508	Symbol	pc		330268						
ANR	330509	Symbol	bfd_asymbol_value		330268						
ANR	330510	Symbol	private_data -> last_mapping_sym		330268						
ANR	330511	Symbol	FALSE		330268						
ANR	330512	Symbol	* private_data		330268						
ANR	330513	Symbol	* info		330268						
ANR	330514	Symbol	private_data -> has_mapping_symbols		330268						
ANR	330515	Function	select_arm_features	6446:0:234723:236690							
ANR	330516	FunctionDef	"select_arm_features (unsigned long mach , arm_feature_set * features)"		330515	0					
ANR	330517	CompoundStatement		6449:0:234811:236690	330515	0					
ANR	330518	Statement	undef	6450:1:234814:234818	330515	0	True				
ANR	330519	Statement	ARM_SET_FEATURES2	6450:7:234820:234836	330515	1	True				
ANR	330520	Statement	define	6452:1:234884:234889	330515	2	True				
ANR	330521	Statement	ARM_SET_FEATURES2	6452:8:234891:234907	330515	3	True				
ANR	330522	Statement	(	6452:25:234908:234908	330515	4	True				
ANR	330523	Statement	FSET	6452:26:234909:234912	330515	5	True				
ANR	330524	Statement	)	6452:30:234913:234913	330515	6	True				
ANR	330525	CompoundStatement		7:4:164:204	330515	7					
ANR	330526	IdentifierDeclStatement	const arm_feature_set fset = FSET ;	6454:4:234933:234966	330515	0	True				
ANR	330527	IdentifierDecl	fset = FSET		330515	0					
ANR	330528	IdentifierDeclType	const arm_feature_set		330515	0					
ANR	330529	Identifier	fset		330515	1					
ANR	330530	AssignmentExpression	fset = FSET		330515	2		=			
ANR	330531	Identifier	FSET		330515	0					
ANR	330532	Identifier	FSET		330515	1					
ANR	330533	IdentifierDeclStatement	arm_feature_set tmp = FPU_ARCH_VFP_V4D16 ;	6455:4:234976:235016	330515	1	True				
ANR	330534	IdentifierDecl	tmp = FPU_ARCH_VFP_V4D16		330515	0					
ANR	330535	IdentifierDeclType	arm_feature_set		330515	0					
ANR	330536	Identifier	tmp		330515	1					
ANR	330537	AssignmentExpression	tmp = FPU_ARCH_VFP_V4D16		330515	2		=			
ANR	330538	Identifier	FPU_ARCH_VFP_V4D16		330515	0					
ANR	330539	Identifier	FPU_ARCH_VFP_V4D16		330515	1					
ANR	330540	ExpressionStatement	"ARM_MERGE_FEATURE_SETS ( * features , tmp , fset )"	6456:4:235024:235069	330515	2	True				
ANR	330541	CallExpression	"ARM_MERGE_FEATURE_SETS ( * features , tmp , fset )"		330515	0					
ANR	330542	Callee	ARM_MERGE_FEATURE_SETS		330515	0					
ANR	330543	Identifier	ARM_MERGE_FEATURE_SETS		330515	0					
ANR	330544	ArgumentList	* features		330515	1					
ANR	330545	Argument	* features		330515	0					
ANR	330546	UnaryOperationExpression	* features		330515	0					
ANR	330547	UnaryOperator	*		330515	0					
ANR	330548	Identifier	features		330515	1					
ANR	330549	Argument	tmp		330515	1					
ANR	330550	Identifier	tmp		330515	0					
ANR	330551	Argument	fset		330515	2					
ANR	330552	Identifier	fset		330515	0					
ANR	330553	Statement	undef	6458:1:235078:235082	330515	8	True				
ANR	330554	Statement	ARM_SET_FEATURES	6458:7:235084:235099	330515	9	True				
ANR	330555	Statement	define	6459:1:235102:235107	330515	10	True				
ANR	330556	Statement	ARM_SET_FEATURES	6459:8:235109:235124	330515	11	True				
ANR	330557	Statement	(	6459:24:235125:235125	330515	12	True				
ANR	330558	Statement	FSET	6459:25:235126:235129	330515	13	True				
ANR	330559	Statement	)	6459:29:235130:235130	330515	14	True				
ANR	330560	CompoundStatement		14:4:381:431	330515	15					
ANR	330561	IdentifierDeclStatement	const arm_feature_set fset = FSET ;	6461:4:235150:235183	330515	0	True				
ANR	330562	IdentifierDecl	fset = FSET		330515	0					
ANR	330563	IdentifierDeclType	const arm_feature_set		330515	0					
ANR	330564	Identifier	fset		330515	1					
ANR	330565	AssignmentExpression	fset = FSET		330515	2		=			
ANR	330566	Identifier	FSET		330515	0					
ANR	330567	Identifier	FSET		330515	1					
ANR	330568	IdentifierDeclStatement	"arm_feature_set tmp = ARM_FEATURE ( 0 , 0 , FPU_FPA ) ;"	6462:4:235193:235243	330515	1	True				
ANR	330569	IdentifierDecl	"tmp = ARM_FEATURE ( 0 , 0 , FPU_FPA )"		330515	0					
ANR	330570	IdentifierDeclType	arm_feature_set		330515	0					
ANR	330571	Identifier	tmp		330515	1					
ANR	330572	AssignmentExpression	"tmp = ARM_FEATURE ( 0 , 0 , FPU_FPA )"		330515	2		=			
ANR	330573	Identifier	tmp		330515	0					
ANR	330574	CallExpression	"ARM_FEATURE ( 0 , 0 , FPU_FPA )"		330515	1					
ANR	330575	Callee	ARM_FEATURE		330515	0					
ANR	330576	Identifier	ARM_FEATURE		330515	0					
ANR	330577	ArgumentList	0		330515	1					
ANR	330578	Argument	0		330515	0					
ANR	330579	PrimaryExpression	0		330515	0					
ANR	330580	Argument	0		330515	1					
ANR	330581	PrimaryExpression	0		330515	0					
ANR	330582	Argument	FPU_FPA		330515	2					
ANR	330583	Identifier	FPU_FPA		330515	0					
ANR	330584	ExpressionStatement	"ARM_MERGE_FEATURE_SETS ( * features , tmp , fset )"	6463:4:235251:235296	330515	2	True				
ANR	330585	CallExpression	"ARM_MERGE_FEATURE_SETS ( * features , tmp , fset )"		330515	0					
ANR	330586	Callee	ARM_MERGE_FEATURE_SETS		330515	0					
ANR	330587	Identifier	ARM_MERGE_FEATURE_SETS		330515	0					
ANR	330588	ArgumentList	* features		330515	1					
ANR	330589	Argument	* features		330515	0					
ANR	330590	UnaryOperationExpression	* features		330515	0					
ANR	330591	UnaryOperator	*		330515	0					
ANR	330592	Identifier	features		330515	1					
ANR	330593	Argument	tmp		330515	1					
ANR	330594	Identifier	tmp		330515	0					
ANR	330595	Argument	fset		330515	2					
ANR	330596	Identifier	fset		330515	0					
ANR	330597	ExpressionStatement	ARM_SET_FEATURES2 ( ARM_ARCH_V7EM )	6468:0:235353:235385	330515	16	True				
ANR	330598	CallExpression	ARM_SET_FEATURES2 ( ARM_ARCH_V7EM )		330515	0					
ANR	330599	Callee	ARM_SET_FEATURES2		330515	0					
ANR	330600	Identifier	ARM_SET_FEATURES2		330515	0					
ANR	330601	ArgumentList	ARM_ARCH_V7EM		330515	1					
ANR	330602	Argument	ARM_ARCH_V7EM		330515	0					
ANR	330603	Identifier	ARM_ARCH_V7EM		330515	0					
ANR	330604	ReturnStatement	return ;	6469:0:235412:235418	330515	17	True				
ANR	330605	Statement	FPU_ARCH_VFP_V4D16	6471:0:235426:235443	330515	18	True				
ANR	330606	ReturnStatement	return ;	6472:0:235445:235451	330515	19	True				
ANR	330607	SwitchStatement	switch ( mach )		330515	20					
ANR	330608	Condition	mach	6476:10:235478:235481	330515	0	True				
ANR	330609	Identifier	mach		330515	0					
ANR	330610	CompoundStatement		29:4:676:676	330515	1					
ANR	330611	Label	case bfd_mach_arm_2 :	6478:4:235494:235513	330515	0	True				
ANR	330612	Identifier	bfd_mach_arm_2		330515	0					
ANR	330613	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V2 )	6478:31:235521:235551	330515	1	True				
ANR	330614	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V2 )		330515	0					
ANR	330615	Callee	ARM_SET_FEATURES		330515	0					
ANR	330616	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330617	ArgumentList	ARM_ARCH_V2		330515	1					
ANR	330618	Argument	ARM_ARCH_V2		330515	0					
ANR	330619	Identifier	ARM_ARCH_V2		330515	0					
ANR	330620	BreakStatement	break ;	6478:63:235553:235558	330515	2	True				
ANR	330621	Label	case bfd_mach_arm_2a :	6479:4:235564:235584	330515	3	True				
ANR	330622	Identifier	bfd_mach_arm_2a		330515	0					
ANR	330623	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V2S )	6479:31:235591:235622	330515	4	True				
ANR	330624	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V2S )		330515	0					
ANR	330625	Callee	ARM_SET_FEATURES		330515	0					
ANR	330626	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330627	ArgumentList	ARM_ARCH_V2S		330515	1					
ANR	330628	Argument	ARM_ARCH_V2S		330515	0					
ANR	330629	Identifier	ARM_ARCH_V2S		330515	0					
ANR	330630	BreakStatement	break ;	6479:64:235624:235629	330515	5	True				
ANR	330631	Label	case bfd_mach_arm_3 :	6480:4:235635:235654	330515	6	True				
ANR	330632	Identifier	bfd_mach_arm_3		330515	0					
ANR	330633	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V3 )	6480:31:235662:235692	330515	7	True				
ANR	330634	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V3 )		330515	0					
ANR	330635	Callee	ARM_SET_FEATURES		330515	0					
ANR	330636	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330637	ArgumentList	ARM_ARCH_V3		330515	1					
ANR	330638	Argument	ARM_ARCH_V3		330515	0					
ANR	330639	Identifier	ARM_ARCH_V3		330515	0					
ANR	330640	BreakStatement	break ;	6480:63:235694:235699	330515	8	True				
ANR	330641	Label	case bfd_mach_arm_3M :	6481:4:235705:235725	330515	9	True				
ANR	330642	Identifier	bfd_mach_arm_3M		330515	0					
ANR	330643	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V3M )	6481:31:235732:235763	330515	10	True				
ANR	330644	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V3M )		330515	0					
ANR	330645	Callee	ARM_SET_FEATURES		330515	0					
ANR	330646	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330647	ArgumentList	ARM_ARCH_V3M		330515	1					
ANR	330648	Argument	ARM_ARCH_V3M		330515	0					
ANR	330649	Identifier	ARM_ARCH_V3M		330515	0					
ANR	330650	BreakStatement	break ;	6481:64:235765:235770	330515	11	True				
ANR	330651	Label	case bfd_mach_arm_4 :	6482:4:235776:235795	330515	12	True				
ANR	330652	Identifier	bfd_mach_arm_4		330515	0					
ANR	330653	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V4 )	6482:31:235803:235833	330515	13	True				
ANR	330654	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V4 )		330515	0					
ANR	330655	Callee	ARM_SET_FEATURES		330515	0					
ANR	330656	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330657	ArgumentList	ARM_ARCH_V4		330515	1					
ANR	330658	Argument	ARM_ARCH_V4		330515	0					
ANR	330659	Identifier	ARM_ARCH_V4		330515	0					
ANR	330660	BreakStatement	break ;	6482:63:235835:235840	330515	14	True				
ANR	330661	Label	case bfd_mach_arm_4T :	6483:4:235846:235866	330515	15	True				
ANR	330662	Identifier	bfd_mach_arm_4T		330515	0					
ANR	330663	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V4T )	6483:31:235873:235904	330515	16	True				
ANR	330664	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V4T )		330515	0					
ANR	330665	Callee	ARM_SET_FEATURES		330515	0					
ANR	330666	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330667	ArgumentList	ARM_ARCH_V4T		330515	1					
ANR	330668	Argument	ARM_ARCH_V4T		330515	0					
ANR	330669	Identifier	ARM_ARCH_V4T		330515	0					
ANR	330670	BreakStatement	break ;	6483:64:235906:235911	330515	17	True				
ANR	330671	Label	case bfd_mach_arm_5 :	6484:4:235917:235936	330515	18	True				
ANR	330672	Identifier	bfd_mach_arm_5		330515	0					
ANR	330673	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V5 )	6484:31:235944:235974	330515	19	True				
ANR	330674	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V5 )		330515	0					
ANR	330675	Callee	ARM_SET_FEATURES		330515	0					
ANR	330676	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330677	ArgumentList	ARM_ARCH_V5		330515	1					
ANR	330678	Argument	ARM_ARCH_V5		330515	0					
ANR	330679	Identifier	ARM_ARCH_V5		330515	0					
ANR	330680	BreakStatement	break ;	6484:63:235976:235981	330515	20	True				
ANR	330681	Label	case bfd_mach_arm_5T :	6485:4:235987:236007	330515	21	True				
ANR	330682	Identifier	bfd_mach_arm_5T		330515	0					
ANR	330683	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V5T )	6485:31:236014:236045	330515	22	True				
ANR	330684	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V5T )		330515	0					
ANR	330685	Callee	ARM_SET_FEATURES		330515	0					
ANR	330686	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330687	ArgumentList	ARM_ARCH_V5T		330515	1					
ANR	330688	Argument	ARM_ARCH_V5T		330515	0					
ANR	330689	Identifier	ARM_ARCH_V5T		330515	0					
ANR	330690	BreakStatement	break ;	6485:64:236047:236052	330515	23	True				
ANR	330691	Label	case bfd_mach_arm_5TE :	6486:4:236058:236079	330515	24	True				
ANR	330692	Identifier	bfd_mach_arm_5TE		330515	0					
ANR	330693	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_V5TE )	6486:31:236085:236117	330515	25	True				
ANR	330694	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_V5TE )		330515	0					
ANR	330695	Callee	ARM_SET_FEATURES		330515	0					
ANR	330696	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330697	ArgumentList	ARM_ARCH_V5TE		330515	1					
ANR	330698	Argument	ARM_ARCH_V5TE		330515	0					
ANR	330699	Identifier	ARM_ARCH_V5TE		330515	0					
ANR	330700	BreakStatement	break ;	6486:65:236119:236124	330515	26	True				
ANR	330701	Label	case bfd_mach_arm_XScale :	6487:4:236130:236154	330515	27	True				
ANR	330702	Identifier	bfd_mach_arm_XScale		330515	0					
ANR	330703	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_XSCALE )	6487:31:236157:236191	330515	28	True				
ANR	330704	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_XSCALE )		330515	0					
ANR	330705	Callee	ARM_SET_FEATURES		330515	0					
ANR	330706	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330707	ArgumentList	ARM_ARCH_XSCALE		330515	1					
ANR	330708	Argument	ARM_ARCH_XSCALE		330515	0					
ANR	330709	Identifier	ARM_ARCH_XSCALE		330515	0					
ANR	330710	BreakStatement	break ;	6487:67:236193:236198	330515	29	True				
ANR	330711	Label	case bfd_mach_arm_ep9312 :	6488:4:236204:236228	330515	30	True				
ANR	330712	Identifier	bfd_mach_arm_ep9312		330515	0					
ANR	330713	ExpressionStatement	"ARM_SET_FEATURES ( ARM_FEATURE_LOW ( ARM_AEXT_V4T , ARM_CEXT_MAVERICK | FPU_MAVERICK ) )"	6489:6:236236:236325	330515	31	True				
ANR	330714	CallExpression	"ARM_SET_FEATURES ( ARM_FEATURE_LOW ( ARM_AEXT_V4T , ARM_CEXT_MAVERICK | FPU_MAVERICK ) )"		330515	0					
ANR	330715	Callee	ARM_SET_FEATURES		330515	0					
ANR	330716	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330717	ArgumentList	"ARM_FEATURE_LOW ( ARM_AEXT_V4T , ARM_CEXT_MAVERICK | FPU_MAVERICK )"		330515	1					
ANR	330718	Argument	"ARM_FEATURE_LOW ( ARM_AEXT_V4T , ARM_CEXT_MAVERICK | FPU_MAVERICK )"		330515	0					
ANR	330719	CallExpression	"ARM_FEATURE_LOW ( ARM_AEXT_V4T , ARM_CEXT_MAVERICK | FPU_MAVERICK )"		330515	0					
ANR	330720	Callee	ARM_FEATURE_LOW		330515	0					
ANR	330721	Identifier	ARM_FEATURE_LOW		330515	0					
ANR	330722	ArgumentList	ARM_AEXT_V4T		330515	1					
ANR	330723	Argument	ARM_AEXT_V4T		330515	0					
ANR	330724	Identifier	ARM_AEXT_V4T		330515	0					
ANR	330725	Argument	ARM_CEXT_MAVERICK | FPU_MAVERICK		330515	1					
ANR	330726	InclusiveOrExpression	ARM_CEXT_MAVERICK | FPU_MAVERICK		330515	0		|			
ANR	330727	Identifier	ARM_CEXT_MAVERICK		330515	0					
ANR	330728	Identifier	FPU_MAVERICK		330515	1					
ANR	330729	BreakStatement	break ;	6491:7:236334:236339	330515	32	True				
ANR	330730	Label	case bfd_mach_arm_iWMMXt :	6492:4:236345:236369	330515	33	True				
ANR	330731	Identifier	bfd_mach_arm_iWMMXt		330515	0					
ANR	330732	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_IWMMXT )	6492:31:236372:236406	330515	34	True				
ANR	330733	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_IWMMXT )		330515	0					
ANR	330734	Callee	ARM_SET_FEATURES		330515	0					
ANR	330735	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330736	ArgumentList	ARM_ARCH_IWMMXT		330515	1					
ANR	330737	Argument	ARM_ARCH_IWMMXT		330515	0					
ANR	330738	Identifier	ARM_ARCH_IWMMXT		330515	0					
ANR	330739	BreakStatement	break ;	6492:67:236408:236413	330515	35	True				
ANR	330740	Label	case bfd_mach_arm_iWMMXt2 :	6493:4:236419:236444	330515	36	True				
ANR	330741	Identifier	bfd_mach_arm_iWMMXt2		330515	0					
ANR	330742	ExpressionStatement	ARM_SET_FEATURES ( ARM_ARCH_IWMMXT2 )	6493:31:236446:236481	330515	37	True				
ANR	330743	CallExpression	ARM_SET_FEATURES ( ARM_ARCH_IWMMXT2 )		330515	0					
ANR	330744	Callee	ARM_SET_FEATURES		330515	0					
ANR	330745	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330746	ArgumentList	ARM_ARCH_IWMMXT2		330515	1					
ANR	330747	Argument	ARM_ARCH_IWMMXT2		330515	0					
ANR	330748	Identifier	ARM_ARCH_IWMMXT2		330515	0					
ANR	330749	BreakStatement	break ;	6493:68:236483:236488	330515	38	True				
ANR	330750	Label	case bfd_mach_arm_unknown :	6496:4:236589:236614	330515	39	True				
ANR	330751	Identifier	bfd_mach_arm_unknown		330515	0					
ANR	330752	ExpressionStatement	ARM_SET_FEATURES ( ARM_FEATURE_ALL )	6496:31:236616:236650	330515	40	True				
ANR	330753	CallExpression	ARM_SET_FEATURES ( ARM_FEATURE_ALL )		330515	0					
ANR	330754	Callee	ARM_SET_FEATURES		330515	0					
ANR	330755	Identifier	ARM_SET_FEATURES		330515	0					
ANR	330756	ArgumentList	ARM_FEATURE_ALL		330515	1					
ANR	330757	Argument	ARM_FEATURE_ALL		330515	0					
ANR	330758	Identifier	ARM_FEATURE_ALL		330515	0					
ANR	330759	BreakStatement	break ;	6496:67:236652:236657	330515	41	True				
ANR	330760	Statement	undef	6499:1:236667:236671	330515	21	True				
ANR	330761	Statement	ARM_SET_FEATURES	6499:7:236673:236688	330515	22	True				
ANR	330762	ReturnType	static void		330515	1					
ANR	330763	Identifier	select_arm_features		330515	2					
ANR	330764	ParameterList	"unsigned long mach , arm_feature_set * features"		330515	3					
ANR	330765	Parameter	unsigned long mach	6447:21:234756:234773	330515	0	True				
ANR	330766	ParameterType	unsigned long		330515	0					
ANR	330767	Identifier	mach		330515	1					
ANR	330768	Parameter	arm_feature_set * features	6448:7:234783:234808	330515	1	True				
ANR	330769	ParameterType	arm_feature_set *		330515	0					
ANR	330770	Identifier	features		330515	1					
ANR	330771	CFGEntryNode	ENTRY		330515		True				
ANR	330772	CFGExitNode	EXIT		330515		True				
ANR	330773	Symbol	mach		330515						
ANR	330774	Symbol	ARM_ARCH_V2S		330515						
ANR	330775	Symbol	ARM_ARCH_V4T		330515						
ANR	330776	Symbol	ARM_ARCH_IWMMXT		330515						
ANR	330777	Symbol	fset		330515						
ANR	330778	Symbol	ARM_FEATURE_LOW		330515						
ANR	330779	Symbol	features		330515						
ANR	330780	Symbol	ARM_FEATURE_ALL		330515						
ANR	330781	Symbol	FPU_FPA		330515						
ANR	330782	Symbol	ARM_ARCH_V3		330515						
ANR	330783	Symbol	ARM_ARCH_V2		330515						
ANR	330784	Symbol	ARM_ARCH_V5		330515						
ANR	330785	Symbol	ARM_ARCH_V4		330515						
ANR	330786	Symbol	FPU_ARCH_VFP_V4D16		330515						
ANR	330787	Symbol	tmp		330515						
ANR	330788	Symbol	FSET		330515						
ANR	330789	Symbol	ARM_ARCH_V5TE		330515						
ANR	330790	Symbol	FPU_MAVERICK		330515						
ANR	330791	Symbol	ARM_ARCH_IWMMXT2		330515						
ANR	330792	Symbol	ARM_ARCH_XSCALE		330515						
ANR	330793	Symbol	ARM_ARCH_V3M		330515						
ANR	330794	Symbol	ARM_CEXT_MAVERICK		330515						
ANR	330795	Symbol	ARM_AEXT_V4T		330515						
ANR	330796	Symbol	* features		330515						
ANR	330797	Symbol	ARM_ARCH_V5T		330515						
ANR	330798	Symbol	ARM_ARCH_V7EM		330515						
ANR	330799	Symbol	ARM_FEATURE		330515						
ANR	330800	Function	print_insn	6506:0:236795:246752							
ANR	330801	FunctionDef	"print_insn (bfd_vma pc , struct disassemble_info * info , bfd_boolean little)"		330800	0					
ANR	330802	CompoundStatement		6508:0:236881:246752	330800	0					
ANR	330803	IdentifierDeclStatement	unsigned char b [ 4 ] ;	6509:2:236885:236903	330800	0	True				
ANR	330804	IdentifierDecl	b [ 4 ]		330800	0					
ANR	330805	IdentifierDeclType	unsigned char [ 4 ]		330800	0					
ANR	330806	Identifier	b		330800	1					
ANR	330807	PrimaryExpression	4		330800	2					
ANR	330808	IdentifierDeclStatement	long given ;	6510:2:236907:236918	330800	1	True				
ANR	330809	IdentifierDecl	given		330800	0					
ANR	330810	IdentifierDeclType	long		330800	0					
ANR	330811	Identifier	given		330800	1					
ANR	330812	IdentifierDeclStatement	int status ;	6511:2:236922:236942	330800	2	True				
ANR	330813	IdentifierDecl	status		330800	0					
ANR	330814	IdentifierDeclType	int		330800	0					
ANR	330815	Identifier	status		330800	1					
ANR	330816	IdentifierDeclStatement	int is_thumb = FALSE ;	6512:2:236946:236976	330800	3	True				
ANR	330817	IdentifierDecl	is_thumb = FALSE		330800	0					
ANR	330818	IdentifierDeclType	int		330800	0					
ANR	330819	Identifier	is_thumb		330800	1					
ANR	330820	AssignmentExpression	is_thumb = FALSE		330800	2		=			
ANR	330821	Identifier	FALSE		330800	0					
ANR	330822	Identifier	FALSE		330800	1					
ANR	330823	IdentifierDeclStatement	int is_data = FALSE ;	6513:2:236980:237009	330800	4	True				
ANR	330824	IdentifierDecl	is_data = FALSE		330800	0					
ANR	330825	IdentifierDeclType	int		330800	0					
ANR	330826	Identifier	is_data		330800	1					
ANR	330827	AssignmentExpression	is_data = FALSE		330800	2		=			
ANR	330828	Identifier	FALSE		330800	0					
ANR	330829	Identifier	FALSE		330800	1					
ANR	330830	IdentifierDeclStatement	int little_code ;	6514:2:237013:237038	330800	5	True				
ANR	330831	IdentifierDecl	little_code		330800	0					
ANR	330832	IdentifierDeclType	int		330800	0					
ANR	330833	Identifier	little_code		330800	1					
ANR	330834	IdentifierDeclStatement	unsigned int size = 4 ;	6515:2:237042:237063	330800	6	True				
ANR	330835	IdentifierDecl	size = 4		330800	0					
ANR	330836	IdentifierDeclType	unsigned int		330800	0					
ANR	330837	Identifier	size		330800	1					
ANR	330838	AssignmentExpression	size = 4		330800	2		=			
ANR	330839	Identifier	size		330800	0					
ANR	330840	PrimaryExpression	4		330800	1					
ANR	330841	IdentifierDeclStatement	"void ( * printer ) ( bfd_vma , struct disassemble_info * , long ) ;"	6516:2:237067:237127	330800	7	True				
ANR	330842	IdentifierDecl	"( * printer ) ( bfd_vma , struct disassemble_info * , long )"		330800	0					
ANR	330843	IdentifierDeclType	"void ( * ) ( bfd_vma , struct disassemble_info * , long )"		330800	0					
ANR	330844	Identifier	printer		330800	1					
ANR	330845	IdentifierDeclStatement	bfd_boolean found = FALSE ;	6517:2:237131:237158	330800	8	True				
ANR	330846	IdentifierDecl	found = FALSE		330800	0					
ANR	330847	IdentifierDeclType	bfd_boolean		330800	0					
ANR	330848	Identifier	found		330800	1					
ANR	330849	AssignmentExpression	found = FALSE		330800	2		=			
ANR	330850	Identifier	FALSE		330800	0					
ANR	330851	Identifier	FALSE		330800	1					
ANR	330852	IdentifierDeclStatement	struct arm_private_data * private_data ;	6518:2:237162:237199	330800	9	True				
ANR	330853	IdentifierDecl	* private_data		330800	0					
ANR	330854	IdentifierDeclType	struct arm_private_data *		330800	0					
ANR	330855	Identifier	private_data		330800	1					
ANR	330856	IfStatement	if ( info -> disassembler_options )		330800	10					
ANR	330857	Condition	info -> disassembler_options	6520:6:237208:237233	330800	0	True				
ANR	330858	PtrMemberAccess	info -> disassembler_options		330800	0					
ANR	330859	Identifier	info		330800	0					
ANR	330860	Identifier	disassembler_options		330800	1					
ANR	330861	CompoundStatement		14:4:358:358	330800	1					
ANR	330862	ExpressionStatement	parse_arm_disassembler_options ( info -> disassembler_options )	6522:6:237248:237307	330800	0	True				
ANR	330863	CallExpression	parse_arm_disassembler_options ( info -> disassembler_options )		330800	0					
ANR	330864	Callee	parse_arm_disassembler_options		330800	0					
ANR	330865	Identifier	parse_arm_disassembler_options		330800	0					
ANR	330866	ArgumentList	info -> disassembler_options		330800	1					
ANR	330867	Argument	info -> disassembler_options		330800	0					
ANR	330868	PtrMemberAccess	info -> disassembler_options		330800	0					
ANR	330869	Identifier	info		330800	0					
ANR	330870	Identifier	disassembler_options		330800	1					
ANR	330871	ExpressionStatement	info -> disassembler_options = NULL	6525:6:237394:237427	330800	1	True				
ANR	330872	AssignmentExpression	info -> disassembler_options = NULL		330800	0		=			
ANR	330873	PtrMemberAccess	info -> disassembler_options		330800	0					
ANR	330874	Identifier	info		330800	0					
ANR	330875	Identifier	disassembler_options		330800	1					
ANR	330876	Identifier	NULL		330800	1					
ANR	330877	IfStatement	if ( info -> private_data == NULL )		330800	11					
ANR	330878	Condition	info -> private_data == NULL	6529:6:237510:237535	330800	0	True				
ANR	330879	EqualityExpression	info -> private_data == NULL		330800	0		==			
ANR	330880	PtrMemberAccess	info -> private_data		330800	0					
ANR	330881	Identifier	info		330800	0					
ANR	330882	Identifier	private_data		330800	1					
ANR	330883	Identifier	NULL		330800	1					
ANR	330884	CompoundStatement		24:13:675:706	330800	1					
ANR	330885	Statement	static	6531:6:237550:237555	330800	0	True				
ANR	330886	IdentifierDeclStatement	struct arm_private_data private ;	6531:13:237557:237588	330800	1	True				
ANR	330887	IdentifierDecl	private		330800	0					
ANR	330888	IdentifierDeclType	struct arm_private_data		330800	0					
ANR	330889	Identifier	private		330800	1					
ANR	330890	IfStatement	if ( ( info -> flags & USER_SPECIFIED_MACHINE_TYPE ) == 0 )		330800	2					
ANR	330891	Condition	( info -> flags & USER_SPECIFIED_MACHINE_TYPE ) == 0	6533:10:237601:237648	330800	0	True				
ANR	330892	EqualityExpression	( info -> flags & USER_SPECIFIED_MACHINE_TYPE ) == 0		330800	0		==			
ANR	330893	BitAndExpression	info -> flags & USER_SPECIFIED_MACHINE_TYPE		330800	0		&			
ANR	330894	PtrMemberAccess	info -> flags		330800	0					
ANR	330895	Identifier	info		330800	0					
ANR	330896	Identifier	flags		330800	1					
ANR	330897	Identifier	USER_SPECIFIED_MACHINE_TYPE		330800	1					
ANR	330898	PrimaryExpression	0		330800	1					
ANR	330899	CompoundStatement		26:60:769:769	330800	1					
ANR	330900	ExpressionStatement	info -> mach = bfd_mach_arm_unknown	6552:7:238659:238692	330800	0	True				
ANR	330901	AssignmentExpression	info -> mach = bfd_mach_arm_unknown		330800	0		=			
ANR	330902	PtrMemberAccess	info -> mach		330800	0					
ANR	330903	Identifier	info		330800	0					
ANR	330904	Identifier	mach		330800	1					
ANR	330905	Identifier	bfd_mach_arm_unknown		330800	1					
ANR	330906	ExpressionStatement	"select_arm_features ( info -> mach , & private . features )"	6558:6:238866:238918	330800	3	True				
ANR	330907	CallExpression	"select_arm_features ( info -> mach , & private . features )"		330800	0					
ANR	330908	Callee	select_arm_features		330800	0					
ANR	330909	Identifier	select_arm_features		330800	0					
ANR	330910	ArgumentList	info -> mach		330800	1					
ANR	330911	Argument	info -> mach		330800	0					
ANR	330912	PtrMemberAccess	info -> mach		330800	0					
ANR	330913	Identifier	info		330800	0					
ANR	330914	Identifier	mach		330800	1					
ANR	330915	Argument	& private . features		330800	1					
ANR	330916	UnaryOperationExpression	& private . features		330800	0					
ANR	330917	UnaryOperator	&		330800	0					
ANR	330918	MemberAccess	private . features		330800	1					
ANR	330919	Identifier	private		330800	0					
ANR	330920	Identifier	features		330800	1					
ANR	330921	ExpressionStatement	private . has_mapping_symbols = - 1	6560:6:238927:238959	330800	4	True				
ANR	330922	AssignmentExpression	private . has_mapping_symbols = - 1		330800	0		=			
ANR	330923	MemberAccess	private . has_mapping_symbols		330800	0					
ANR	330924	Identifier	private		330800	0					
ANR	330925	Identifier	has_mapping_symbols		330800	1					
ANR	330926	UnaryOperationExpression	- 1		330800	1					
ANR	330927	UnaryOperator	-		330800	0					
ANR	330928	PrimaryExpression	1		330800	1					
ANR	330929	ExpressionStatement	private . last_mapping_sym = - 1	6561:6:238967:238996	330800	5	True				
ANR	330930	AssignmentExpression	private . last_mapping_sym = - 1		330800	0		=			
ANR	330931	MemberAccess	private . last_mapping_sym		330800	0					
ANR	330932	Identifier	private		330800	0					
ANR	330933	Identifier	last_mapping_sym		330800	1					
ANR	330934	UnaryOperationExpression	- 1		330800	1					
ANR	330935	UnaryOperator	-		330800	0					
ANR	330936	PrimaryExpression	1		330800	1					
ANR	330937	ExpressionStatement	private . last_mapping_addr = 0	6562:6:239004:239033	330800	6	True				
ANR	330938	AssignmentExpression	private . last_mapping_addr = 0		330800	0		=			
ANR	330939	MemberAccess	private . last_mapping_addr		330800	0					
ANR	330940	Identifier	private		330800	0					
ANR	330941	Identifier	last_mapping_addr		330800	1					
ANR	330942	PrimaryExpression	0		330800	1					
ANR	330943	ExpressionStatement	info -> private_data = & private	6564:6:239042:239072	330800	7	True				
ANR	330944	AssignmentExpression	info -> private_data = & private		330800	0		=			
ANR	330945	PtrMemberAccess	info -> private_data		330800	0					
ANR	330946	Identifier	info		330800	0					
ANR	330947	Identifier	private_data		330800	1					
ANR	330948	UnaryOperationExpression	& private		330800	1					
ANR	330949	UnaryOperator	&		330800	0					
ANR	330950	Identifier	private		330800	1					
ANR	330951	ExpressionStatement	private_data = info -> private_data	6567:2:239083:239116	330800	12	True				
ANR	330952	AssignmentExpression	private_data = info -> private_data		330800	0		=			
ANR	330953	Identifier	private_data		330800	0					
ANR	330954	PtrMemberAccess	info -> private_data		330800	1					
ANR	330955	Identifier	info		330800	0					
ANR	330956	Identifier	private_data		330800	1					
ANR	330957	ExpressionStatement	little_code = ( ( info -> endian_code == BFD_ENDIAN_LITTLE ) || little )	6571:2:239230:239296	330800	13	True				
ANR	330958	AssignmentExpression	little_code = ( ( info -> endian_code == BFD_ENDIAN_LITTLE ) || little )		330800	0		=			
ANR	330959	Identifier	little_code		330800	0					
ANR	330960	OrExpression	( info -> endian_code == BFD_ENDIAN_LITTLE ) || little		330800	1		||			
ANR	330961	EqualityExpression	info -> endian_code == BFD_ENDIAN_LITTLE		330800	0		==			
ANR	330962	PtrMemberAccess	info -> endian_code		330800	0					
ANR	330963	Identifier	info		330800	0					
ANR	330964	Identifier	endian_code		330800	1					
ANR	330965	Identifier	BFD_ENDIAN_LITTLE		330800	1					
ANR	330966	Identifier	little		330800	1					
ANR	330967	IfStatement	if ( info -> symtab_size != 0 && bfd_asymbol_flavour ( * info -> symtab ) == bfd_target_elf_flavour )		330800	14					
ANR	330968	Condition	info -> symtab_size != 0 && bfd_asymbol_flavour ( * info -> symtab ) == bfd_target_elf_flavour	6575:6:239401:239493	330800	0	True				
ANR	330969	AndExpression	info -> symtab_size != 0 && bfd_asymbol_flavour ( * info -> symtab ) == bfd_target_elf_flavour		330800	0		&&			
ANR	330970	EqualityExpression	info -> symtab_size != 0		330800	0		!=			
ANR	330971	PtrMemberAccess	info -> symtab_size		330800	0					
ANR	330972	Identifier	info		330800	0					
ANR	330973	Identifier	symtab_size		330800	1					
ANR	330974	PrimaryExpression	0		330800	1					
ANR	330975	EqualityExpression	bfd_asymbol_flavour ( * info -> symtab ) == bfd_target_elf_flavour		330800	1		==			
ANR	330976	CallExpression	bfd_asymbol_flavour ( * info -> symtab )		330800	0					
ANR	330977	Callee	bfd_asymbol_flavour		330800	0					
ANR	330978	Identifier	bfd_asymbol_flavour		330800	0					
ANR	330979	ArgumentList	* info -> symtab		330800	1					
ANR	330980	Argument	* info -> symtab		330800	0					
ANR	330981	UnaryOperationExpression	* info -> symtab		330800	0					
ANR	330982	UnaryOperator	*		330800	0					
ANR	330983	PtrMemberAccess	info -> symtab		330800	1					
ANR	330984	Identifier	info		330800	0					
ANR	330985	Identifier	symtab		330800	1					
ANR	330986	Identifier	bfd_target_elf_flavour		330800	1					
ANR	330987	CompoundStatement		74:6:2691:2719	330800	1					
ANR	330988	IdentifierDeclStatement	bfd_vma addr ;	6578:6:239508:239520	330800	0	True				
ANR	330989	IdentifierDecl	addr		330800	0					
ANR	330990	IdentifierDeclType	bfd_vma		330800	0					
ANR	330991	Identifier	addr		330800	1					
ANR	330992	IdentifierDeclStatement	"int n , start ;"	6579:6:239528:239540	330800	1	True				
ANR	330993	IdentifierDecl	n		330800	0					
ANR	330994	IdentifierDeclType	int		330800	0					
ANR	330995	Identifier	n		330800	1					
ANR	330996	IdentifierDecl	start		330800	1					
ANR	330997	IdentifierDeclType	int		330800	0					
ANR	330998	Identifier	start		330800	1					
ANR	330999	IdentifierDeclStatement	int last_sym = - 1 ;	6580:6:239548:239565	330800	2	True				
ANR	331000	IdentifierDecl	last_sym = - 1		330800	0					
ANR	331001	IdentifierDeclType	int		330800	0					
ANR	331002	Identifier	last_sym		330800	1					
ANR	331003	AssignmentExpression	last_sym = - 1		330800	2		=			
ANR	331004	Identifier	last_sym		330800	0					
ANR	331005	UnaryOperationExpression	- 1		330800	1					
ANR	331006	UnaryOperator	-		330800	0					
ANR	331007	PrimaryExpression	1		330800	1					
ANR	331008	IdentifierDeclStatement	enum map_type type = MAP_ARM ;	6581:6:239573:239601	330800	3	True				
ANR	331009	IdentifierDecl	type = MAP_ARM		330800	0					
ANR	331010	IdentifierDeclType	enum map_type		330800	0					
ANR	331011	Identifier	type		330800	1					
ANR	331012	AssignmentExpression	type = MAP_ARM		330800	2		=			
ANR	331013	Identifier	MAP_ARM		330800	0					
ANR	331014	Identifier	MAP_ARM		330800	1					
ANR	331015	IfStatement	if ( pc == 0 )		330800	4					
ANR	331016	Condition	pc == 0	6590:10:240020:240026	330800	0	True				
ANR	331017	EqualityExpression	pc == 0		330800	0		==			
ANR	331018	Identifier	pc		330800	0					
ANR	331019	PrimaryExpression	0		330800	1					
ANR	331020	CompoundStatement		83:19:3147:3147	330800	1					
ANR	331021	ExpressionStatement	start = 0	6591:7:240038:240047	330800	0	True				
ANR	331022	AssignmentExpression	start = 0		330800	0		=			
ANR	331023	Identifier	start		330800	0					
ANR	331024	PrimaryExpression	0		330800	1					
ANR	331025	ElseStatement	else		330800	0					
ANR	331026	CompoundStatement		85:13:3180:3180	330800	0					
ANR	331027	ExpressionStatement	start = info -> symtab_pos + 1	6593:7:240071:240099	330800	0	True				
ANR	331028	AssignmentExpression	start = info -> symtab_pos + 1		330800	0		=			
ANR	331029	Identifier	start		330800	0					
ANR	331030	AdditiveExpression	info -> symtab_pos + 1		330800	1		+			
ANR	331031	PtrMemberAccess	info -> symtab_pos		330800	0					
ANR	331032	Identifier	info		330800	0					
ANR	331033	Identifier	symtab_pos		330800	1					
ANR	331034	PrimaryExpression	1		330800	1					
ANR	331035	IfStatement	if ( start < private_data -> last_mapping_sym )		330800	1					
ANR	331036	Condition	start < private_data -> last_mapping_sym	6594:11:240112:240149	330800	0	True				
ANR	331037	RelationalExpression	start < private_data -> last_mapping_sym		330800	0		<			
ANR	331038	Identifier	start		330800	0					
ANR	331039	PtrMemberAccess	private_data -> last_mapping_sym		330800	1					
ANR	331040	Identifier	private_data		330800	0					
ANR	331041	Identifier	last_mapping_sym		330800	1					
ANR	331042	CompoundStatement		87:51:3270:3270	330800	1					
ANR	331043	ExpressionStatement	start = private_data -> last_mapping_sym	6595:8:240162:240200	330800	0	True				
ANR	331044	AssignmentExpression	start = private_data -> last_mapping_sym		330800	0		=			
ANR	331045	Identifier	start		330800	0					
ANR	331046	PtrMemberAccess	private_data -> last_mapping_sym		330800	1					
ANR	331047	Identifier	private_data		330800	0					
ANR	331048	Identifier	last_mapping_sym		330800	1					
ANR	331049	ExpressionStatement	found = FALSE	6598:6:240220:240233	330800	5	True				
ANR	331050	AssignmentExpression	found = FALSE		330800	0		=			
ANR	331051	Identifier	found		330800	0					
ANR	331052	Identifier	FALSE		330800	1					
ANR	331053	IfStatement	if ( private_data -> has_mapping_symbols != 0 )		330800	6					
ANR	331054	Condition	private_data -> has_mapping_symbols != 0	6601:10:240292:240329	330800	0	True				
ANR	331055	EqualityExpression	private_data -> has_mapping_symbols != 0		330800	0		!=			
ANR	331056	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331057	Identifier	private_data		330800	0					
ANR	331058	Identifier	has_mapping_symbols		330800	1					
ANR	331059	PrimaryExpression	0		330800	1					
ANR	331060	CompoundStatement		95:1:3451:3451	330800	1					
ANR	331061	ForStatement	for ( n = start ; n < info -> symtab_size ; n ++ )		330800	0					
ANR	331062	ForInit	n = start ;	6604:8:240397:240406	330800	0	True				
ANR	331063	AssignmentExpression	n = start		330800	0		=			
ANR	331064	Identifier	n		330800	0					
ANR	331065	Identifier	start		330800	1					
ANR	331066	Condition	n < info -> symtab_size	6604:19:240408:240428	330800	1	True				
ANR	331067	RelationalExpression	n < info -> symtab_size		330800	0		<			
ANR	331068	Identifier	n		330800	0					
ANR	331069	PtrMemberAccess	info -> symtab_size		330800	1					
ANR	331070	Identifier	info		330800	0					
ANR	331071	Identifier	symtab_size		330800	1					
ANR	331072	PostIncDecOperationExpression	n ++	6604:42:240431:240433	330800	2	True				
ANR	331073	Identifier	n		330800	0					
ANR	331074	IncDec	++		330800	1					
ANR	331075	CompoundStatement		98:5:3559:3559	330800	3					
ANR	331076	ExpressionStatement	addr = bfd_asymbol_value ( info -> symtab [ n ] )	6606:7:240450:240492	330800	0	True				
ANR	331077	AssignmentExpression	addr = bfd_asymbol_value ( info -> symtab [ n ] )		330800	0		=			
ANR	331078	Identifier	addr		330800	0					
ANR	331079	CallExpression	bfd_asymbol_value ( info -> symtab [ n ] )		330800	1					
ANR	331080	Callee	bfd_asymbol_value		330800	0					
ANR	331081	Identifier	bfd_asymbol_value		330800	0					
ANR	331082	ArgumentList	info -> symtab [ n ]		330800	1					
ANR	331083	Argument	info -> symtab [ n ]		330800	0					
ANR	331084	ArrayIndexing	info -> symtab [ n ]		330800	0					
ANR	331085	PtrMemberAccess	info -> symtab		330800	0					
ANR	331086	Identifier	info		330800	0					
ANR	331087	Identifier	symtab		330800	1					
ANR	331088	Identifier	n		330800	1					
ANR	331089	IfStatement	if ( addr > pc )		330800	1					
ANR	331090	Condition	addr > pc	6607:11:240505:240513	330800	0	True				
ANR	331091	RelationalExpression	addr > pc		330800	0		>			
ANR	331092	Identifier	addr		330800	0					
ANR	331093	Identifier	pc		330800	1					
ANR	331094	CompoundStatement		100:22:3634:3634	330800	1					
ANR	331095	BreakStatement	break ;	6608:8:240526:240531	330800	0	True				
ANR	331096	IfStatement	"if ( get_map_sym_type ( info , n , & type ) )"		330800	2					
ANR	331097	Condition	"get_map_sym_type ( info , n , & type )"	6610:11:240553:240585	330800	0	True				
ANR	331098	CallExpression	"get_map_sym_type ( info , n , & type )"		330800	0					
ANR	331099	Callee	get_map_sym_type		330800	0					
ANR	331100	Identifier	get_map_sym_type		330800	0					
ANR	331101	ArgumentList	info		330800	1					
ANR	331102	Argument	info		330800	0					
ANR	331103	Identifier	info		330800	0					
ANR	331104	Argument	n		330800	1					
ANR	331105	Identifier	n		330800	0					
ANR	331106	Argument	& type		330800	2					
ANR	331107	UnaryOperationExpression	& type		330800	0					
ANR	331108	UnaryOperator	&		330800	0					
ANR	331109	Identifier	type		330800	1					
ANR	331110	CompoundStatement		104:2:3708:3708	330800	1					
ANR	331111	ExpressionStatement	last_sym = n	6612:4:240596:240608	330800	0	True				
ANR	331112	AssignmentExpression	last_sym = n		330800	0		=			
ANR	331113	Identifier	last_sym		330800	0					
ANR	331114	Identifier	n		330800	1					
ANR	331115	ExpressionStatement	found = TRUE	6613:4:240614:240626	330800	1	True				
ANR	331116	AssignmentExpression	found = TRUE		330800	0		=			
ANR	331117	Identifier	found		330800	0					
ANR	331118	Identifier	TRUE		330800	1					
ANR	331119	IfStatement	if ( ! found )		330800	1					
ANR	331120	Condition	! found	6617:7:240647:240652	330800	0	True				
ANR	331121	UnaryOperationExpression	! found		330800	0					
ANR	331122	UnaryOperator	!		330800	0					
ANR	331123	Identifier	found		330800	1					
ANR	331124	CompoundStatement		111:5:3778:3778	330800	1					
ANR	331125	ForStatement	for ( n = start - 1 ; n >= 0 ; n -- )		330800	0					
ANR	331126	ForInit	n = start - 1 ;	6621:12:240769:240782	330800	0	True				
ANR	331127	AssignmentExpression	n = start - 1		330800	0		=			
ANR	331128	Identifier	n		330800	0					
ANR	331129	AdditiveExpression	start - 1		330800	1		-			
ANR	331130	Identifier	start		330800	0					
ANR	331131	PrimaryExpression	1		330800	1					
ANR	331132	Condition	n >= 0	6621:27:240784:240789	330800	1	True				
ANR	331133	RelationalExpression	n >= 0		330800	0		>=			
ANR	331134	Identifier	n		330800	0					
ANR	331135	PrimaryExpression	0		330800	1					
ANR	331136	PostIncDecOperationExpression	n --	6621:35:240792:240794	330800	2	True				
ANR	331137	Identifier	n		330800	0					
ANR	331138	IncDec	--		330800	1					
ANR	331139	CompoundStatement		115:2:3917:3917	330800	3					
ANR	331140	IfStatement	"if ( get_map_sym_type ( info , n , & type ) )"		330800	0					
ANR	331141	Condition	"get_map_sym_type ( info , n , & type )"	6623:8:240809:240841	330800	0	True				
ANR	331142	CallExpression	"get_map_sym_type ( info , n , & type )"		330800	0					
ANR	331143	Callee	get_map_sym_type		330800	0					
ANR	331144	Identifier	get_map_sym_type		330800	0					
ANR	331145	ArgumentList	info		330800	1					
ANR	331146	Argument	info		330800	0					
ANR	331147	Identifier	info		330800	0					
ANR	331148	Argument	n		330800	1					
ANR	331149	Identifier	n		330800	0					
ANR	331150	Argument	& type		330800	2					
ANR	331151	UnaryOperationExpression	& type		330800	0					
ANR	331152	UnaryOperator	&		330800	0					
ANR	331153	Identifier	type		330800	1					
ANR	331154	CompoundStatement		117:6:3968:3968	330800	1					
ANR	331155	ExpressionStatement	last_sym = n	6625:8:240860:240872	330800	0	True				
ANR	331156	AssignmentExpression	last_sym = n		330800	0		=			
ANR	331157	Identifier	last_sym		330800	0					
ANR	331158	Identifier	n		330800	1					
ANR	331159	ExpressionStatement	found = TRUE	6626:8:240882:240894	330800	1	True				
ANR	331160	AssignmentExpression	found = TRUE		330800	0		=			
ANR	331161	Identifier	found		330800	0					
ANR	331162	Identifier	TRUE		330800	1					
ANR	331163	BreakStatement	break ;	6627:8:240904:240909	330800	2	True				
ANR	331164	IfStatement	if ( found )		330800	2					
ANR	331165	Condition	found	6632:9:240940:240944	330800	0	True				
ANR	331166	Identifier	found		330800	0					
ANR	331167	CompoundStatement		125:16:4065:4065	330800	1					
ANR	331168	ExpressionStatement	private_data -> has_mapping_symbols = 1	6633:6:240955:240992	330800	0	True				
ANR	331169	AssignmentExpression	private_data -> has_mapping_symbols = 1		330800	0		=			
ANR	331170	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331171	Identifier	private_data		330800	0					
ANR	331172	Identifier	has_mapping_symbols		330800	1					
ANR	331173	PrimaryExpression	1		330800	1					
ANR	331174	IfStatement	if ( ! found && private_data -> has_mapping_symbols == - 1 )		330800	3					
ANR	331175	Condition	! found && private_data -> has_mapping_symbols == - 1	6641:9:241280:241328	330800	0	True				
ANR	331176	AndExpression	! found && private_data -> has_mapping_symbols == - 1		330800	0		&&			
ANR	331177	UnaryOperationExpression	! found		330800	0					
ANR	331178	UnaryOperator	!		330800	0					
ANR	331179	Identifier	found		330800	1					
ANR	331180	EqualityExpression	private_data -> has_mapping_symbols == - 1		330800	1		==			
ANR	331181	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331182	Identifier	private_data		330800	0					
ANR	331183	Identifier	has_mapping_symbols		330800	1					
ANR	331184	UnaryOperationExpression	- 1		330800	1					
ANR	331185	UnaryOperator	-		330800	0					
ANR	331186	PrimaryExpression	1		330800	1					
ANR	331187	CompoundStatement		134:60:4449:4449	330800	1					
ANR	331188	ForStatement	for ( n = 0 ; n < info -> symtab_size ; n ++ )		330800	0					
ANR	331189	ForInit	n = 0 ;	6643:11:241399:241404	330800	0	True				
ANR	331190	AssignmentExpression	n = 0		330800	0		=			
ANR	331191	Identifier	n		330800	0					
ANR	331192	PrimaryExpression	0		330800	1					
ANR	331193	Condition	n < info -> symtab_size	6643:18:241406:241426	330800	1	True				
ANR	331194	RelationalExpression	n < info -> symtab_size		330800	0		<			
ANR	331195	Identifier	n		330800	0					
ANR	331196	PtrMemberAccess	info -> symtab_size		330800	1					
ANR	331197	Identifier	info		330800	0					
ANR	331198	Identifier	symtab_size		330800	1					
ANR	331199	PostIncDecOperationExpression	n ++	6643:41:241429:241431	330800	2	True				
ANR	331200	Identifier	n		330800	0					
ANR	331201	IncDec	++		330800	1					
ANR	331202	CompoundStatement		136:46:4552:4552	330800	3					
ANR	331203	IfStatement	"if ( is_mapping_symbol ( info , n , & type ) )"		330800	0					
ANR	331204	Condition	"is_mapping_symbol ( info , n , & type )"	6644:11:241447:241480	330800	0	True				
ANR	331205	CallExpression	"is_mapping_symbol ( info , n , & type )"		330800	0					
ANR	331206	Callee	is_mapping_symbol		330800	0					
ANR	331207	Identifier	is_mapping_symbol		330800	0					
ANR	331208	ArgumentList	info		330800	1					
ANR	331209	Argument	info		330800	0					
ANR	331210	Identifier	info		330800	0					
ANR	331211	Argument	n		330800	1					
ANR	331212	Identifier	n		330800	0					
ANR	331213	Argument	& type		330800	2					
ANR	331214	UnaryOperationExpression	& type		330800	0					
ANR	331215	UnaryOperator	&		330800	0					
ANR	331216	Identifier	type		330800	1					
ANR	331217	CompoundStatement		137:47:4601:4601	330800	1					
ANR	331218	ExpressionStatement	private_data -> has_mapping_symbols = 1	6645:8:241493:241530	330800	0	True				
ANR	331219	AssignmentExpression	private_data -> has_mapping_symbols = 1		330800	0		=			
ANR	331220	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331221	Identifier	private_data		330800	0					
ANR	331222	Identifier	has_mapping_symbols		330800	1					
ANR	331223	PrimaryExpression	1		330800	1					
ANR	331224	BreakStatement	break ;	6646:8:241540:241545	330800	1	True				
ANR	331225	IfStatement	if ( private_data -> has_mapping_symbols == - 1 )		330800	1					
ANR	331226	Condition	private_data -> has_mapping_symbols == - 1	6649:10:241574:241612	330800	0	True				
ANR	331227	EqualityExpression	private_data -> has_mapping_symbols == - 1		330800	0		==			
ANR	331228	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331229	Identifier	private_data		330800	0					
ANR	331230	Identifier	has_mapping_symbols		330800	1					
ANR	331231	UnaryOperationExpression	- 1		330800	1					
ANR	331232	UnaryOperator	-		330800	0					
ANR	331233	PrimaryExpression	1		330800	1					
ANR	331234	CompoundStatement		142:51:4733:4733	330800	1					
ANR	331235	ExpressionStatement	private_data -> has_mapping_symbols = 0	6650:7:241624:241661	330800	0	True				
ANR	331236	AssignmentExpression	private_data -> has_mapping_symbols = 0		330800	0		=			
ANR	331237	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331238	Identifier	private_data		330800	0					
ANR	331239	Identifier	has_mapping_symbols		330800	1					
ANR	331240	PrimaryExpression	0		330800	1					
ANR	331241	IfStatement	if ( ! found && private_data -> has_mapping_symbols == 1 )		330800	4					
ANR	331242	Condition	! found && private_data -> has_mapping_symbols == 1	6654:7:241686:241733	330800	0	True				
ANR	331243	AndExpression	! found && private_data -> has_mapping_symbols == 1		330800	0		&&			
ANR	331244	UnaryOperationExpression	! found		330800	0					
ANR	331245	UnaryOperator	!		330800	0					
ANR	331246	Identifier	found		330800	1					
ANR	331247	EqualityExpression	private_data -> has_mapping_symbols == 1		330800	1		==			
ANR	331248	PtrMemberAccess	private_data -> has_mapping_symbols		330800	0					
ANR	331249	Identifier	private_data		330800	0					
ANR	331250	Identifier	has_mapping_symbols		330800	1					
ANR	331251	PrimaryExpression	1		330800	1					
ANR	331252	CompoundStatement		148:5:4859:4859	330800	1					
ANR	331253	ExpressionStatement	type = MAP_DATA	6656:7:241750:241765	330800	0	True				
ANR	331254	AssignmentExpression	type = MAP_DATA		330800	0		=			
ANR	331255	Identifier	type		330800	0					
ANR	331256	Identifier	MAP_DATA		330800	1					
ANR	331257	ExpressionStatement	found = TRUE	6657:7:241774:241786	330800	1	True				
ANR	331258	AssignmentExpression	found = TRUE		330800	0		=			
ANR	331259	Identifier	found		330800	0					
ANR	331260	Identifier	TRUE		330800	1					
ANR	331261	IfStatement	if ( ! found )		330800	7					
ANR	331262	Condition	! found	6663:10:241921:241926	330800	0	True				
ANR	331263	UnaryOperationExpression	! found		330800	0					
ANR	331264	UnaryOperator	!		330800	0					
ANR	331265	Identifier	found		330800	1					
ANR	331266	CompoundStatement		157:1:5048:5048	330800	1					
ANR	331267	ForStatement	for ( n = start ; n < info -> symtab_size ; n ++ )		330800	0					
ANR	331268	ForInit	n = start ;	6666:8:241994:242003	330800	0	True				
ANR	331269	AssignmentExpression	n = start		330800	0		=			
ANR	331270	Identifier	n		330800	0					
ANR	331271	Identifier	start		330800	1					
ANR	331272	Condition	n < info -> symtab_size	6666:19:242005:242025	330800	1	True				
ANR	331273	RelationalExpression	n < info -> symtab_size		330800	0		<			
ANR	331274	Identifier	n		330800	0					
ANR	331275	PtrMemberAccess	info -> symtab_size		330800	1					
ANR	331276	Identifier	info		330800	0					
ANR	331277	Identifier	symtab_size		330800	1					
ANR	331278	PostIncDecOperationExpression	n ++	6666:42:242028:242030	330800	2	True				
ANR	331279	Identifier	n		330800	0					
ANR	331280	IncDec	++		330800	1					
ANR	331281	CompoundStatement		160:5:5156:5156	330800	3					
ANR	331282	ExpressionStatement	addr = bfd_asymbol_value ( info -> symtab [ n ] )	6668:7:242047:242089	330800	0	True				
ANR	331283	AssignmentExpression	addr = bfd_asymbol_value ( info -> symtab [ n ] )		330800	0		=			
ANR	331284	Identifier	addr		330800	0					
ANR	331285	CallExpression	bfd_asymbol_value ( info -> symtab [ n ] )		330800	1					
ANR	331286	Callee	bfd_asymbol_value		330800	0					
ANR	331287	Identifier	bfd_asymbol_value		330800	0					
ANR	331288	ArgumentList	info -> symtab [ n ]		330800	1					
ANR	331289	Argument	info -> symtab [ n ]		330800	0					
ANR	331290	ArrayIndexing	info -> symtab [ n ]		330800	0					
ANR	331291	PtrMemberAccess	info -> symtab		330800	0					
ANR	331292	Identifier	info		330800	0					
ANR	331293	Identifier	symtab		330800	1					
ANR	331294	Identifier	n		330800	1					
ANR	331295	IfStatement	if ( addr > pc )		330800	1					
ANR	331296	Condition	addr > pc	6669:11:242102:242110	330800	0	True				
ANR	331297	RelationalExpression	addr > pc		330800	0		>			
ANR	331298	Identifier	addr		330800	0					
ANR	331299	Identifier	pc		330800	1					
ANR	331300	CompoundStatement		162:22:5231:5231	330800	1					
ANR	331301	BreakStatement	break ;	6670:8:242123:242128	330800	0	True				
ANR	331302	IfStatement	"if ( get_sym_code_type ( info , n , & type ) )"		330800	2					
ANR	331303	Condition	"get_sym_code_type ( info , n , & type )"	6672:11:242150:242183	330800	0	True				
ANR	331304	CallExpression	"get_sym_code_type ( info , n , & type )"		330800	0					
ANR	331305	Callee	get_sym_code_type		330800	0					
ANR	331306	Identifier	get_sym_code_type		330800	0					
ANR	331307	ArgumentList	info		330800	1					
ANR	331308	Argument	info		330800	0					
ANR	331309	Identifier	info		330800	0					
ANR	331310	Argument	n		330800	1					
ANR	331311	Identifier	n		330800	0					
ANR	331312	Argument	& type		330800	2					
ANR	331313	UnaryOperationExpression	& type		330800	0					
ANR	331314	UnaryOperator	&		330800	0					
ANR	331315	Identifier	type		330800	1					
ANR	331316	CompoundStatement		166:2:5306:5306	330800	1					
ANR	331317	ExpressionStatement	last_sym = n	6674:4:242194:242206	330800	0	True				
ANR	331318	AssignmentExpression	last_sym = n		330800	0		=			
ANR	331319	Identifier	last_sym		330800	0					
ANR	331320	Identifier	n		330800	1					
ANR	331321	ExpressionStatement	found = TRUE	6675:4:242212:242224	330800	1	True				
ANR	331322	AssignmentExpression	found = TRUE		330800	0		=			
ANR	331323	Identifier	found		330800	0					
ANR	331324	Identifier	TRUE		330800	1					
ANR	331325	IfStatement	if ( ! found )		330800	1					
ANR	331326	Condition	! found	6679:7:242245:242250	330800	0	True				
ANR	331327	UnaryOperationExpression	! found		330800	0					
ANR	331328	UnaryOperator	!		330800	0					
ANR	331329	Identifier	found		330800	1					
ANR	331330	CompoundStatement		173:5:5376:5376	330800	1					
ANR	331331	ForStatement	for ( n = start - 1 ; n >= 0 ; n -- )		330800	0					
ANR	331332	ForInit	n = start - 1 ;	6683:12:242367:242380	330800	0	True				
ANR	331333	AssignmentExpression	n = start - 1		330800	0		=			
ANR	331334	Identifier	n		330800	0					
ANR	331335	AdditiveExpression	start - 1		330800	1		-			
ANR	331336	Identifier	start		330800	0					
ANR	331337	PrimaryExpression	1		330800	1					
ANR	331338	Condition	n >= 0	6683:27:242382:242387	330800	1	True				
ANR	331339	RelationalExpression	n >= 0		330800	0		>=			
ANR	331340	Identifier	n		330800	0					
ANR	331341	PrimaryExpression	0		330800	1					
ANR	331342	PostIncDecOperationExpression	n --	6683:35:242390:242392	330800	2	True				
ANR	331343	Identifier	n		330800	0					
ANR	331344	IncDec	--		330800	1					
ANR	331345	CompoundStatement		177:2:5515:5515	330800	3					
ANR	331346	IfStatement	"if ( get_sym_code_type ( info , n , & type ) )"		330800	0					
ANR	331347	Condition	"get_sym_code_type ( info , n , & type )"	6685:8:242407:242440	330800	0	True				
ANR	331348	CallExpression	"get_sym_code_type ( info , n , & type )"		330800	0					
ANR	331349	Callee	get_sym_code_type		330800	0					
ANR	331350	Identifier	get_sym_code_type		330800	0					
ANR	331351	ArgumentList	info		330800	1					
ANR	331352	Argument	info		330800	0					
ANR	331353	Identifier	info		330800	0					
ANR	331354	Argument	n		330800	1					
ANR	331355	Identifier	n		330800	0					
ANR	331356	Argument	& type		330800	2					
ANR	331357	UnaryOperationExpression	& type		330800	0					
ANR	331358	UnaryOperator	&		330800	0					
ANR	331359	Identifier	type		330800	1					
ANR	331360	CompoundStatement		179:6:5567:5567	330800	1					
ANR	331361	ExpressionStatement	last_sym = n	6687:8:242459:242471	330800	0	True				
ANR	331362	AssignmentExpression	last_sym = n		330800	0		=			
ANR	331363	Identifier	last_sym		330800	0					
ANR	331364	Identifier	n		330800	1					
ANR	331365	ExpressionStatement	found = TRUE	6688:8:242481:242493	330800	1	True				
ANR	331366	AssignmentExpression	found = TRUE		330800	0		=			
ANR	331367	Identifier	found		330800	0					
ANR	331368	Identifier	TRUE		330800	1					
ANR	331369	BreakStatement	break ;	6689:8:242503:242508	330800	2	True				
ANR	331370	ExpressionStatement	private_data -> last_mapping_sym = last_sym	6695:6:242539:242580	330800	8	True				
ANR	331371	AssignmentExpression	private_data -> last_mapping_sym = last_sym		330800	0		=			
ANR	331372	PtrMemberAccess	private_data -> last_mapping_sym		330800	0					
ANR	331373	Identifier	private_data		330800	0					
ANR	331374	Identifier	last_mapping_sym		330800	1					
ANR	331375	Identifier	last_sym		330800	1					
ANR	331376	ExpressionStatement	private_data -> last_type = type	6696:6:242588:242618	330800	9	True				
ANR	331377	AssignmentExpression	private_data -> last_type = type		330800	0		=			
ANR	331378	PtrMemberAccess	private_data -> last_type		330800	0					
ANR	331379	Identifier	private_data		330800	0					
ANR	331380	Identifier	last_type		330800	1					
ANR	331381	Identifier	type		330800	1					
ANR	331382	ExpressionStatement	is_thumb = ( private_data -> last_type == MAP_THUMB )	6697:6:242626:242675	330800	10	True				
ANR	331383	AssignmentExpression	is_thumb = ( private_data -> last_type == MAP_THUMB )		330800	0		=			
ANR	331384	Identifier	is_thumb		330800	0					
ANR	331385	EqualityExpression	private_data -> last_type == MAP_THUMB		330800	1		==			
ANR	331386	PtrMemberAccess	private_data -> last_type		330800	0					
ANR	331387	Identifier	private_data		330800	0					
ANR	331388	Identifier	last_type		330800	1					
ANR	331389	Identifier	MAP_THUMB		330800	1					
ANR	331390	ExpressionStatement	is_data = ( private_data -> last_type == MAP_DATA )	6698:6:242683:242730	330800	11	True				
ANR	331391	AssignmentExpression	is_data = ( private_data -> last_type == MAP_DATA )		330800	0		=			
ANR	331392	Identifier	is_data		330800	0					
ANR	331393	EqualityExpression	private_data -> last_type == MAP_DATA		330800	1		==			
ANR	331394	PtrMemberAccess	private_data -> last_type		330800	0					
ANR	331395	Identifier	private_data		330800	0					
ANR	331396	Identifier	last_type		330800	1					
ANR	331397	Identifier	MAP_DATA		330800	1					
ANR	331398	IfStatement	if ( is_data )		330800	12					
ANR	331399	Condition	is_data	6704:10:242926:242932	330800	0	True				
ANR	331400	Identifier	is_data		330800	0					
ANR	331401	CompoundStatement		198:1:6054:6054	330800	1					
ANR	331402	ExpressionStatement	size = 4 - ( pc & 3 )	6706:3:242941:242960	330800	0	True				
ANR	331403	AssignmentExpression	size = 4 - ( pc & 3 )		330800	0		=			
ANR	331404	Identifier	size		330800	0					
ANR	331405	AdditiveExpression	4 - ( pc & 3 )		330800	1		-			
ANR	331406	PrimaryExpression	4		330800	0					
ANR	331407	BitAndExpression	pc & 3		330800	1		&			
ANR	331408	Identifier	pc		330800	0					
ANR	331409	PrimaryExpression	3		330800	1					
ANR	331410	ForStatement	for ( n = last_sym + 1 ; n < info -> symtab_size ; n ++ )		330800	1					
ANR	331411	ForInit	n = last_sym + 1 ;	6707:8:242970:242986	330800	0	True				
ANR	331412	AssignmentExpression	n = last_sym + 1		330800	0		=			
ANR	331413	Identifier	n		330800	0					
ANR	331414	AdditiveExpression	last_sym + 1		330800	1		+			
ANR	331415	Identifier	last_sym		330800	0					
ANR	331416	PrimaryExpression	1		330800	1					
ANR	331417	Condition	n < info -> symtab_size	6707:26:242988:243008	330800	1	True				
ANR	331418	RelationalExpression	n < info -> symtab_size		330800	0		<			
ANR	331419	Identifier	n		330800	0					
ANR	331420	PtrMemberAccess	info -> symtab_size		330800	1					
ANR	331421	Identifier	info		330800	0					
ANR	331422	Identifier	symtab_size		330800	1					
ANR	331423	PostIncDecOperationExpression	n ++	6707:49:243011:243013	330800	2	True				
ANR	331424	Identifier	n		330800	0					
ANR	331425	IncDec	++		330800	1					
ANR	331426	CompoundStatement		201:5:6139:6139	330800	3					
ANR	331427	ExpressionStatement	addr = bfd_asymbol_value ( info -> symtab [ n ] )	6709:7:243030:243072	330800	0	True				
ANR	331428	AssignmentExpression	addr = bfd_asymbol_value ( info -> symtab [ n ] )		330800	0		=			
ANR	331429	Identifier	addr		330800	0					
ANR	331430	CallExpression	bfd_asymbol_value ( info -> symtab [ n ] )		330800	1					
ANR	331431	Callee	bfd_asymbol_value		330800	0					
ANR	331432	Identifier	bfd_asymbol_value		330800	0					
ANR	331433	ArgumentList	info -> symtab [ n ]		330800	1					
ANR	331434	Argument	info -> symtab [ n ]		330800	0					
ANR	331435	ArrayIndexing	info -> symtab [ n ]		330800	0					
ANR	331436	PtrMemberAccess	info -> symtab		330800	0					
ANR	331437	Identifier	info		330800	0					
ANR	331438	Identifier	symtab		330800	1					
ANR	331439	Identifier	n		330800	1					
ANR	331440	IfStatement	if ( addr > pc && ( info -> section == NULL || info -> section == info -> symtab [ n ] -> section ) )		330800	1					
ANR	331441	Condition	addr > pc && ( info -> section == NULL || info -> section == info -> symtab [ n ] -> section )	6710:11:243085:243177	330800	0	True				
ANR	331442	AndExpression	addr > pc && ( info -> section == NULL || info -> section == info -> symtab [ n ] -> section )		330800	0		&&			
ANR	331443	RelationalExpression	addr > pc		330800	0		>			
ANR	331444	Identifier	addr		330800	0					
ANR	331445	Identifier	pc		330800	1					
ANR	331446	OrExpression	info -> section == NULL || info -> section == info -> symtab [ n ] -> section		330800	1		||			
ANR	331447	EqualityExpression	info -> section == NULL		330800	0		==			
ANR	331448	PtrMemberAccess	info -> section		330800	0					
ANR	331449	Identifier	info		330800	0					
ANR	331450	Identifier	section		330800	1					
ANR	331451	Identifier	NULL		330800	1					
ANR	331452	EqualityExpression	info -> section == info -> symtab [ n ] -> section		330800	1		==			
ANR	331453	PtrMemberAccess	info -> section		330800	0					
ANR	331454	Identifier	info		330800	0					
ANR	331455	Identifier	section		330800	1					
ANR	331456	PtrMemberAccess	info -> symtab [ n ] -> section		330800	1					
ANR	331457	ArrayIndexing	info -> symtab [ n ]		330800	0					
ANR	331458	PtrMemberAccess	info -> symtab		330800	0					
ANR	331459	Identifier	info		330800	0					
ANR	331460	Identifier	symtab		330800	1					
ANR	331461	Identifier	n		330800	1					
ANR	331462	Identifier	section		330800	1					
ANR	331463	CompoundStatement		206:2:6300:6300	330800	1					
ANR	331464	IfStatement	if ( addr - pc < size )		330800	0					
ANR	331465	Condition	addr - pc < size	6714:12:243196:243211	330800	0	True				
ANR	331466	RelationalExpression	addr - pc < size		330800	0		<			
ANR	331467	AdditiveExpression	addr - pc		330800	0		-			
ANR	331468	Identifier	addr		330800	0					
ANR	331469	Identifier	pc		330800	1					
ANR	331470	Identifier	size		330800	1					
ANR	331471	CompoundStatement		207:30:6332:6332	330800	1					
ANR	331472	ExpressionStatement	size = addr - pc	6715:9:243225:243241	330800	0	True				
ANR	331473	AssignmentExpression	size = addr - pc		330800	0		=			
ANR	331474	Identifier	size		330800	0					
ANR	331475	AdditiveExpression	addr - pc		330800	1		-			
ANR	331476	Identifier	addr		330800	0					
ANR	331477	Identifier	pc		330800	1					
ANR	331478	BreakStatement	break ;	6717:8:243261:243266	330800	1	True				
ANR	331479	IfStatement	if ( size == 3 )		330800	2					
ANR	331480	Condition	size == 3	6723:9:243434:243442	330800	0	True				
ANR	331481	EqualityExpression	size == 3		330800	0		==			
ANR	331482	Identifier	size		330800	0					
ANR	331483	PrimaryExpression	3		330800	1					
ANR	331484	CompoundStatement		216:20:6563:6563	330800	1					
ANR	331485	ExpressionStatement	size = ( pc & 1 ) ? 1 : 2	6724:6:243453:243476	330800	0	True				
ANR	331486	AssignmentExpression	size = ( pc & 1 ) ? 1 : 2		330800	0		=			
ANR	331487	Identifier	size		330800	0					
ANR	331488	ConditionalExpression	( pc & 1 ) ? 1 : 2		330800	1					
ANR	331489	Condition	pc & 1		330800	0					
ANR	331490	BitAndExpression	pc & 1		330800	0		&			
ANR	331491	Identifier	pc		330800	0					
ANR	331492	PrimaryExpression	1		330800	1					
ANR	331493	PrimaryExpression	1		330800	1					
ANR	331494	PrimaryExpression	2		330800	2					
ANR	331495	IfStatement	if ( force_thumb )		330800	15					
ANR	331496	Condition	force_thumb	6729:8:243503:243513	330800	0	True				
ANR	331497	Identifier	force_thumb		330800	0					
ANR	331498	CompoundStatement		222:21:6634:6634	330800	1					
ANR	331499	ExpressionStatement	is_thumb = TRUE	6730:5:243523:243538	330800	0	True				
ANR	331500	AssignmentExpression	is_thumb = TRUE		330800	0		=			
ANR	331501	Identifier	is_thumb		330800	0					
ANR	331502	Identifier	TRUE		330800	1					
ANR	331503	IfStatement	if ( is_data )		330800	16					
ANR	331504	Condition	is_data	6733:8:243555:243561	330800	0	True				
ANR	331505	Identifier	is_data		330800	0					
ANR	331506	CompoundStatement		226:17:6682:6682	330800	1					
ANR	331507	ExpressionStatement	info -> display_endian = little ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG	6734:5:243571:243637	330800	0	True				
ANR	331508	AssignmentExpression	info -> display_endian = little ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG		330800	0		=			
ANR	331509	PtrMemberAccess	info -> display_endian		330800	0					
ANR	331510	Identifier	info		330800	0					
ANR	331511	Identifier	display_endian		330800	1					
ANR	331512	ConditionalExpression	little ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG		330800	1					
ANR	331513	Condition	little		330800	0					
ANR	331514	Identifier	little		330800	0					
ANR	331515	Identifier	BFD_ENDIAN_LITTLE		330800	1					
ANR	331516	Identifier	BFD_ENDIAN_BIG		330800	2					
ANR	331517	ElseStatement	else		330800	0					
ANR	331518	CompoundStatement		228:11:6768:6768	330800	0					
ANR	331519	ExpressionStatement	info -> display_endian = little_code ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG	6736:5:243657:243728	330800	0	True				
ANR	331520	AssignmentExpression	info -> display_endian = little_code ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG		330800	0		=			
ANR	331521	PtrMemberAccess	info -> display_endian		330800	0					
ANR	331522	Identifier	info		330800	0					
ANR	331523	Identifier	display_endian		330800	1					
ANR	331524	ConditionalExpression	little_code ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG		330800	1					
ANR	331525	Condition	little_code		330800	0					
ANR	331526	Identifier	little_code		330800	0					
ANR	331527	Identifier	BFD_ENDIAN_LITTLE		330800	1					
ANR	331528	Identifier	BFD_ENDIAN_BIG		330800	2					
ANR	331529	ExpressionStatement	info -> bytes_per_line = 4	6739:4:243741:243765	330800	17	True				
ANR	331530	AssignmentExpression	info -> bytes_per_line = 4		330800	0		=			
ANR	331531	PtrMemberAccess	info -> bytes_per_line		330800	0					
ANR	331532	Identifier	info		330800	0					
ANR	331533	Identifier	bytes_per_line		330800	1					
ANR	331534	PrimaryExpression	4		330800	1					
ANR	331535	IfStatement	if ( is_data && ( ( info -> flags & DISASSEMBLE_DATA ) == 0 ) )		330800	18					
ANR	331536	Condition	is_data && ( ( info -> flags & DISASSEMBLE_DATA ) == 0 )	6742:8:243849:243898	330800	0	True				
ANR	331537	AndExpression	is_data && ( ( info -> flags & DISASSEMBLE_DATA ) == 0 )		330800	0		&&			
ANR	331538	Identifier	is_data		330800	0					
ANR	331539	EqualityExpression	( info -> flags & DISASSEMBLE_DATA ) == 0		330800	1		==			
ANR	331540	BitAndExpression	info -> flags & DISASSEMBLE_DATA		330800	0		&			
ANR	331541	PtrMemberAccess	info -> flags		330800	0					
ANR	331542	Identifier	info		330800	0					
ANR	331543	Identifier	flags		330800	1					
ANR	331544	Identifier	DISASSEMBLE_DATA		330800	1					
ANR	331545	PrimaryExpression	0		330800	1					
ANR	331546	CompoundStatement		236:5:7026:7031	330800	1					
ANR	331547	IdentifierDeclStatement	int i ;	6743:5:243908:243913	330800	0	True				
ANR	331548	IdentifierDecl	i		330800	0					
ANR	331549	IdentifierDeclType	int		330800	0					
ANR	331550	Identifier	i		330800	1					
ANR	331551	ExpressionStatement	info -> bytes_per_chunk = size	6746:5:243961:243989	330800	1	True				
ANR	331552	AssignmentExpression	info -> bytes_per_chunk = size		330800	0		=			
ANR	331553	PtrMemberAccess	info -> bytes_per_chunk		330800	0					
ANR	331554	Identifier	info		330800	0					
ANR	331555	Identifier	bytes_per_chunk		330800	1					
ANR	331556	Identifier	size		330800	1					
ANR	331557	ExpressionStatement	printer = print_insn_data	6747:5:243996:244021	330800	2	True				
ANR	331558	AssignmentExpression	printer = print_insn_data		330800	0		=			
ANR	331559	Identifier	printer		330800	0					
ANR	331560	Identifier	print_insn_data		330800	1					
ANR	331561	ExpressionStatement	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , size , info )"	6749:5:244029:244092	330800	3	True				
ANR	331562	AssignmentExpression	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , size , info )"		330800	0		=			
ANR	331563	Identifier	status		330800	0					
ANR	331564	CallExpression	"info -> read_memory_func ( pc , ( bfd_byte * ) b , size , info )"		330800	1					
ANR	331565	Callee	info -> read_memory_func		330800	0					
ANR	331566	PtrMemberAccess	info -> read_memory_func		330800	0					
ANR	331567	Identifier	info		330800	0					
ANR	331568	Identifier	read_memory_func		330800	1					
ANR	331569	ArgumentList	pc		330800	1					
ANR	331570	Argument	pc		330800	0					
ANR	331571	Identifier	pc		330800	0					
ANR	331572	Argument	( bfd_byte * ) b		330800	1					
ANR	331573	CastExpression	( bfd_byte * ) b		330800	0					
ANR	331574	CastTarget	bfd_byte *		330800	0					
ANR	331575	Identifier	b		330800	1					
ANR	331576	Argument	size		330800	2					
ANR	331577	Identifier	size		330800	0					
ANR	331578	Argument	info		330800	3					
ANR	331579	Identifier	info		330800	0					
ANR	331580	ExpressionStatement	given = 0	6750:5:244099:244108	330800	4	True				
ANR	331581	AssignmentExpression	given = 0		330800	0		=			
ANR	331582	Identifier	given		330800	0					
ANR	331583	PrimaryExpression	0		330800	1					
ANR	331584	IfStatement	if ( little )		330800	5					
ANR	331585	Condition	little	6751:9:244119:244124	330800	0	True				
ANR	331586	Identifier	little		330800	0					
ANR	331587	CompoundStatement		244:17:7245:7245	330800	1					
ANR	331588	ForStatement	for ( i = size - 1 ; i >= 0 ; i -- )		330800	0					
ANR	331589	ForInit	i = size - 1 ;	6752:11:244140:244152	330800	0	True				
ANR	331590	AssignmentExpression	i = size - 1		330800	0		=			
ANR	331591	Identifier	i		330800	0					
ANR	331592	AdditiveExpression	size - 1		330800	1		-			
ANR	331593	Identifier	size		330800	0					
ANR	331594	PrimaryExpression	1		330800	1					
ANR	331595	Condition	i >= 0	6752:25:244154:244159	330800	1	True				
ANR	331596	RelationalExpression	i >= 0		330800	0		>=			
ANR	331597	Identifier	i		330800	0					
ANR	331598	PrimaryExpression	0		330800	1					
ANR	331599	PostIncDecOperationExpression	i --	6752:33:244162:244164	330800	2	True				
ANR	331600	Identifier	i		330800	0					
ANR	331601	IncDec	--		330800	1					
ANR	331602	CompoundStatement		245:38:7285:7285	330800	3					
ANR	331603	ExpressionStatement	given = b [ i ] | ( given << 8 )	6753:7:244176:244203	330800	0	True				
ANR	331604	AssignmentExpression	given = b [ i ] | ( given << 8 )		330800	0		=			
ANR	331605	Identifier	given		330800	0					
ANR	331606	InclusiveOrExpression	b [ i ] | ( given << 8 )		330800	1		|			
ANR	331607	ArrayIndexing	b [ i ]		330800	0					
ANR	331608	Identifier	b		330800	0					
ANR	331609	Identifier	i		330800	1					
ANR	331610	ShiftExpression	given << 8		330800	1		<<			
ANR	331611	Identifier	given		330800	0					
ANR	331612	PrimaryExpression	8		330800	1					
ANR	331613	ElseStatement	else		330800	0					
ANR	331614	CompoundStatement		248:12:7343:7343	330800	0					
ANR	331615	ForStatement	for ( i = 0 ; i < ( int ) size ; i ++ )		330800	0					
ANR	331616	ForInit	i = 0 ;	6756:11:244238:244243	330800	0	True				
ANR	331617	AssignmentExpression	i = 0		330800	0		=			
ANR	331618	Identifier	i		330800	0					
ANR	331619	PrimaryExpression	0		330800	1					
ANR	331620	Condition	i < ( int ) size	6756:18:244245:244257	330800	1	True				
ANR	331621	RelationalExpression	i < ( int ) size		330800	0		<			
ANR	331622	Identifier	i		330800	0					
ANR	331623	CastExpression	( int ) size		330800	1					
ANR	331624	CastTarget	int		330800	0					
ANR	331625	Identifier	size		330800	1					
ANR	331626	PostIncDecOperationExpression	i ++	6756:33:244260:244262	330800	2	True				
ANR	331627	Identifier	i		330800	0					
ANR	331628	IncDec	++		330800	1					
ANR	331629	CompoundStatement		249:38:7383:7383	330800	3					
ANR	331630	ExpressionStatement	given = b [ i ] | ( given << 8 )	6757:7:244274:244301	330800	0	True				
ANR	331631	AssignmentExpression	given = b [ i ] | ( given << 8 )		330800	0		=			
ANR	331632	Identifier	given		330800	0					
ANR	331633	InclusiveOrExpression	b [ i ] | ( given << 8 )		330800	1		|			
ANR	331634	ArrayIndexing	b [ i ]		330800	0					
ANR	331635	Identifier	b		330800	0					
ANR	331636	Identifier	i		330800	1					
ANR	331637	ShiftExpression	given << 8		330800	1		<<			
ANR	331638	Identifier	given		330800	0					
ANR	331639	PrimaryExpression	8		330800	1					
ANR	331640	ElseStatement	else		330800	0					
ANR	331641	IfStatement	if ( ! is_thumb )		330800	0					
ANR	331642	Condition	! is_thumb	6761:11:244335:244343	330800	0	True				
ANR	331643	UnaryOperationExpression	! is_thumb		330800	0					
ANR	331644	UnaryOperator	!		330800	0					
ANR	331645	Identifier	is_thumb		330800	1					
ANR	331646	CompoundStatement		255:4:7468:7468	330800	1					
ANR	331647	ExpressionStatement	printer = print_insn_arm	6765:6:244495:244519	330800	0	True				
ANR	331648	AssignmentExpression	printer = print_insn_arm		330800	0		=			
ANR	331649	Identifier	printer		330800	0					
ANR	331650	Identifier	print_insn_arm		330800	1					
ANR	331651	ExpressionStatement	info -> bytes_per_chunk = 4	6766:6:244527:244552	330800	1	True				
ANR	331652	AssignmentExpression	info -> bytes_per_chunk = 4		330800	0		=			
ANR	331653	PtrMemberAccess	info -> bytes_per_chunk		330800	0					
ANR	331654	Identifier	info		330800	0					
ANR	331655	Identifier	bytes_per_chunk		330800	1					
ANR	331656	PrimaryExpression	4		330800	1					
ANR	331657	ExpressionStatement	size = 4	6767:6:244560:244568	330800	2	True				
ANR	331658	AssignmentExpression	size = 4		330800	0		=			
ANR	331659	Identifier	size		330800	0					
ANR	331660	PrimaryExpression	4		330800	1					
ANR	331661	ExpressionStatement	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , 4 , info )"	6769:6:244577:244638	330800	3	True				
ANR	331662	AssignmentExpression	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , 4 , info )"		330800	0		=			
ANR	331663	Identifier	status		330800	0					
ANR	331664	CallExpression	"info -> read_memory_func ( pc , ( bfd_byte * ) b , 4 , info )"		330800	1					
ANR	331665	Callee	info -> read_memory_func		330800	0					
ANR	331666	PtrMemberAccess	info -> read_memory_func		330800	0					
ANR	331667	Identifier	info		330800	0					
ANR	331668	Identifier	read_memory_func		330800	1					
ANR	331669	ArgumentList	pc		330800	1					
ANR	331670	Argument	pc		330800	0					
ANR	331671	Identifier	pc		330800	0					
ANR	331672	Argument	( bfd_byte * ) b		330800	1					
ANR	331673	CastExpression	( bfd_byte * ) b		330800	0					
ANR	331674	CastTarget	bfd_byte *		330800	0					
ANR	331675	Identifier	b		330800	1					
ANR	331676	Argument	4		330800	2					
ANR	331677	PrimaryExpression	4		330800	0					
ANR	331678	Argument	info		330800	3					
ANR	331679	Identifier	info		330800	0					
ANR	331680	Statement	define	6770:1:244641:244646	330800	4	True				
ANR	331681	Statement	N	6770:8:244648:244648	330800	5	True				
ANR	331682	Statement	(	6770:9:244649:244649	330800	6	True				
ANR	331683	Statement	x	6770:10:244650:244650	330800	7	True				
ANR	331684	Statement	)	6770:11:244651:244651	330800	8	True				
ANR	331685	Statement	(	6770:13:244653:244653	330800	9	True				
ANR	331686	Statement	(	6770:14:244654:244654	330800	10	True				
ANR	331687	Statement	(	6770:15:244655:244655	330800	11	True				
ANR	331688	Statement	unsigned	6770:16:244656:244663	330800	12	True				
ANR	331689	Statement	long	6770:25:244665:244668	330800	13	True				
ANR	331690	Statement	long	6770:30:244670:244673	330800	14	True				
ANR	331691	Statement	)	6770:35:244675:244675	330800	15	True				
ANR	331692	Statement	(	6770:36:244676:244676	330800	16	True				
ANR	331693	Statement	b	6770:37:244677:244677	330800	17	True				
ANR	331694	Statement	[	6770:38:244678:244678	330800	18	True				
ANR	331695	Statement	x	6770:39:244679:244679	330800	19	True				
ANR	331696	Statement	]	6770:40:244680:244680	330800	20	True				
ANR	331697	Statement	)	6770:41:244681:244681	330800	21	True				
ANR	331698	Statement	)	6770:42:244682:244682	330800	22	True				
ANR	331699	Statement	&	6770:44:244684:244684	330800	23	True				
ANR	331700	Statement	0xff	6770:46:244686:244689	330800	24	True				
ANR	331701	Statement	)	6770:50:244690:244690	330800	25	True				
ANR	331702	IfStatement	if ( little_code )		330800	26					
ANR	331703	Condition	little_code	6771:10:244702:244712	330800	0	True				
ANR	331704	Identifier	little_code		330800	0					
ANR	331705	CompoundStatement		264:23:7833:7833	330800	1					
ANR	331706	ExpressionStatement	given = N ( 0 ) | N ( 1 ) << 8 | N ( 2 ) << 16 | N ( 3 ) << 24	6772:7:244724:244773	330800	0	True				
ANR	331707	AssignmentExpression	given = N ( 0 ) | N ( 1 ) << 8 | N ( 2 ) << 16 | N ( 3 ) << 24		330800	0		=			
ANR	331708	Identifier	given		330800	0					
ANR	331709	InclusiveOrExpression	N ( 0 ) | N ( 1 ) << 8 | N ( 2 ) << 16 | N ( 3 ) << 24		330800	1		|			
ANR	331710	CallExpression	N ( 0 )		330800	0					
ANR	331711	Callee	N		330800	0					
ANR	331712	Identifier	N		330800	0					
ANR	331713	ArgumentList	0		330800	1					
ANR	331714	Argument	0		330800	0					
ANR	331715	PrimaryExpression	0		330800	0					
ANR	331716	InclusiveOrExpression	N ( 1 ) << 8 | N ( 2 ) << 16 | N ( 3 ) << 24		330800	1		|			
ANR	331717	ShiftExpression	N ( 1 ) << 8		330800	0		<<			
ANR	331718	CallExpression	N ( 1 )		330800	0					
ANR	331719	Callee	N		330800	0					
ANR	331720	Identifier	N		330800	0					
ANR	331721	ArgumentList	1		330800	1					
ANR	331722	Argument	1		330800	0					
ANR	331723	PrimaryExpression	1		330800	0					
ANR	331724	PrimaryExpression	8		330800	1					
ANR	331725	InclusiveOrExpression	N ( 2 ) << 16 | N ( 3 ) << 24		330800	1		|			
ANR	331726	ShiftExpression	N ( 2 ) << 16		330800	0		<<			
ANR	331727	CallExpression	N ( 2 )		330800	0					
ANR	331728	Callee	N		330800	0					
ANR	331729	Identifier	N		330800	0					
ANR	331730	ArgumentList	2		330800	1					
ANR	331731	Argument	2		330800	0					
ANR	331732	PrimaryExpression	2		330800	0					
ANR	331733	PrimaryExpression	16		330800	1					
ANR	331734	ShiftExpression	N ( 3 ) << 24		330800	1		<<			
ANR	331735	CallExpression	N ( 3 )		330800	0					
ANR	331736	Callee	N		330800	0					
ANR	331737	Identifier	N		330800	0					
ANR	331738	ArgumentList	3		330800	1					
ANR	331739	Argument	3		330800	0					
ANR	331740	PrimaryExpression	3		330800	0					
ANR	331741	PrimaryExpression	24		330800	1					
ANR	331742	ElseStatement	else		330800	0					
ANR	331743	CompoundStatement		266:13:7906:7906	330800	0					
ANR	331744	ExpressionStatement	given = N ( 3 ) | N ( 2 ) << 8 | N ( 1 ) << 16 | N ( 0 ) << 24	6774:7:244797:244846	330800	0	True				
ANR	331745	AssignmentExpression	given = N ( 3 ) | N ( 2 ) << 8 | N ( 1 ) << 16 | N ( 0 ) << 24		330800	0		=			
ANR	331746	Identifier	given		330800	0					
ANR	331747	InclusiveOrExpression	N ( 3 ) | N ( 2 ) << 8 | N ( 1 ) << 16 | N ( 0 ) << 24		330800	1		|			
ANR	331748	CallExpression	N ( 3 )		330800	0					
ANR	331749	Callee	N		330800	0					
ANR	331750	Identifier	N		330800	0					
ANR	331751	ArgumentList	3		330800	1					
ANR	331752	Argument	3		330800	0					
ANR	331753	PrimaryExpression	3		330800	0					
ANR	331754	InclusiveOrExpression	N ( 2 ) << 8 | N ( 1 ) << 16 | N ( 0 ) << 24		330800	1		|			
ANR	331755	ShiftExpression	N ( 2 ) << 8		330800	0		<<			
ANR	331756	CallExpression	N ( 2 )		330800	0					
ANR	331757	Callee	N		330800	0					
ANR	331758	Identifier	N		330800	0					
ANR	331759	ArgumentList	2		330800	1					
ANR	331760	Argument	2		330800	0					
ANR	331761	PrimaryExpression	2		330800	0					
ANR	331762	PrimaryExpression	8		330800	1					
ANR	331763	InclusiveOrExpression	N ( 1 ) << 16 | N ( 0 ) << 24		330800	1		|			
ANR	331764	ShiftExpression	N ( 1 ) << 16		330800	0		<<			
ANR	331765	CallExpression	N ( 1 )		330800	0					
ANR	331766	Callee	N		330800	0					
ANR	331767	Identifier	N		330800	0					
ANR	331768	ArgumentList	1		330800	1					
ANR	331769	Argument	1		330800	0					
ANR	331770	PrimaryExpression	1		330800	0					
ANR	331771	PrimaryExpression	16		330800	1					
ANR	331772	ShiftExpression	N ( 0 ) << 24		330800	1		<<			
ANR	331773	CallExpression	N ( 0 )		330800	0					
ANR	331774	Callee	N		330800	0					
ANR	331775	Identifier	N		330800	0					
ANR	331776	ArgumentList	0		330800	1					
ANR	331777	Argument	0		330800	0					
ANR	331778	PrimaryExpression	0		330800	0					
ANR	331779	PrimaryExpression	24		330800	1					
ANR	331780	ElseStatement	else		330800	0					
ANR	331781	CompoundStatement		271:4:7991:7991	330800	0					
ANR	331782	ExpressionStatement	printer = print_insn_thumb16	6783:6:245096:245124	330800	0	True				
ANR	331783	AssignmentExpression	printer = print_insn_thumb16		330800	0		=			
ANR	331784	Identifier	printer		330800	0					
ANR	331785	Identifier	print_insn_thumb16		330800	1					
ANR	331786	ExpressionStatement	info -> bytes_per_chunk = 2	6784:6:245132:245157	330800	1	True				
ANR	331787	AssignmentExpression	info -> bytes_per_chunk = 2		330800	0		=			
ANR	331788	PtrMemberAccess	info -> bytes_per_chunk		330800	0					
ANR	331789	Identifier	info		330800	0					
ANR	331790	Identifier	bytes_per_chunk		330800	1					
ANR	331791	PrimaryExpression	2		330800	1					
ANR	331792	ExpressionStatement	size = 2	6785:6:245165:245173	330800	2	True				
ANR	331793	AssignmentExpression	size = 2		330800	0		=			
ANR	331794	Identifier	size		330800	0					
ANR	331795	PrimaryExpression	2		330800	1					
ANR	331796	ExpressionStatement	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , 2 , info )"	6787:6:245182:245243	330800	3	True				
ANR	331797	AssignmentExpression	"status = info -> read_memory_func ( pc , ( bfd_byte * ) b , 2 , info )"		330800	0		=			
ANR	331798	Identifier	status		330800	0					
ANR	331799	CallExpression	"info -> read_memory_func ( pc , ( bfd_byte * ) b , 2 , info )"		330800	1					
ANR	331800	Callee	info -> read_memory_func		330800	0					
ANR	331801	PtrMemberAccess	info -> read_memory_func		330800	0					
ANR	331802	Identifier	info		330800	0					
ANR	331803	Identifier	read_memory_func		330800	1					
ANR	331804	ArgumentList	pc		330800	1					
ANR	331805	Argument	pc		330800	0					
ANR	331806	Identifier	pc		330800	0					
ANR	331807	Argument	( bfd_byte * ) b		330800	1					
ANR	331808	CastExpression	( bfd_byte * ) b		330800	0					
ANR	331809	CastTarget	bfd_byte *		330800	0					
ANR	331810	Identifier	b		330800	1					
ANR	331811	Argument	2		330800	2					
ANR	331812	PrimaryExpression	2		330800	0					
ANR	331813	Argument	info		330800	3					
ANR	331814	Identifier	info		330800	0					
ANR	331815	IfStatement	if ( little_code )		330800	4					
ANR	331816	Condition	little_code	6788:10:245255:245265	330800	0	True				
ANR	331817	Identifier	little_code		330800	0					
ANR	331818	CompoundStatement		281:23:8386:8386	330800	1					
ANR	331819	ExpressionStatement	given = ( b [ 0 ] ) | ( b [ 1 ] << 8 )	6789:7:245277:245305	330800	0	True				
ANR	331820	AssignmentExpression	given = ( b [ 0 ] ) | ( b [ 1 ] << 8 )		330800	0		=			
ANR	331821	Identifier	given		330800	0					
ANR	331822	InclusiveOrExpression	( b [ 0 ] ) | ( b [ 1 ] << 8 )		330800	1		|			
ANR	331823	ArrayIndexing	b [ 0 ]		330800	0					
ANR	331824	Identifier	b		330800	0					
ANR	331825	PrimaryExpression	0		330800	1					
ANR	331826	ShiftExpression	b [ 1 ] << 8		330800	1		<<			
ANR	331827	ArrayIndexing	b [ 1 ]		330800	0					
ANR	331828	Identifier	b		330800	0					
ANR	331829	PrimaryExpression	1		330800	1					
ANR	331830	PrimaryExpression	8		330800	1					
ANR	331831	ElseStatement	else		330800	0					
ANR	331832	CompoundStatement		283:13:8438:8438	330800	0					
ANR	331833	ExpressionStatement	given = ( b [ 1 ] ) | ( b [ 0 ] << 8 )	6791:7:245329:245357	330800	0	True				
ANR	331834	AssignmentExpression	given = ( b [ 1 ] ) | ( b [ 0 ] << 8 )		330800	0		=			
ANR	331835	Identifier	given		330800	0					
ANR	331836	InclusiveOrExpression	( b [ 1 ] ) | ( b [ 0 ] << 8 )		330800	1		|			
ANR	331837	ArrayIndexing	b [ 1 ]		330800	0					
ANR	331838	Identifier	b		330800	0					
ANR	331839	PrimaryExpression	1		330800	1					
ANR	331840	ShiftExpression	b [ 0 ] << 8		330800	1		<<			
ANR	331841	ArrayIndexing	b [ 0 ]		330800	0					
ANR	331842	Identifier	b		330800	0					
ANR	331843	PrimaryExpression	0		330800	1					
ANR	331844	PrimaryExpression	8		330800	1					
ANR	331845	IfStatement	if ( ! status )		330800	5					
ANR	331846	Condition	! status	6794:10:245378:245384	330800	0	True				
ANR	331847	UnaryOperationExpression	! status		330800	0					
ANR	331848	UnaryOperator	!		330800	0					
ANR	331849	Identifier	status		330800	1					
ANR	331850	CompoundStatement		288:1:8506:8506	330800	1					
ANR	331851	IfStatement	if ( ( given & 0xF800 ) == 0xF800 || ( given & 0xF800 ) == 0xF000 || ( given & 0xF800 ) == 0xE800 )		330800	0					
ANR	331852	Condition	( given & 0xF800 ) == 0xF800 || ( given & 0xF800 ) == 0xF000 || ( given & 0xF800 ) == 0xE800	6798:7:245470:245569	330800	0	True				
ANR	331853	OrExpression	( given & 0xF800 ) == 0xF800 || ( given & 0xF800 ) == 0xF000 || ( given & 0xF800 ) == 0xE800		330800	0		||			
ANR	331854	EqualityExpression	( given & 0xF800 ) == 0xF800		330800	0		==			
ANR	331855	BitAndExpression	given & 0xF800		330800	0		&			
ANR	331856	Identifier	given		330800	0					
ANR	331857	PrimaryExpression	0xF800		330800	1					
ANR	331858	PrimaryExpression	0xF800		330800	1					
ANR	331859	OrExpression	( given & 0xF800 ) == 0xF000 || ( given & 0xF800 ) == 0xE800		330800	1		||			
ANR	331860	EqualityExpression	( given & 0xF800 ) == 0xF000		330800	0		==			
ANR	331861	BitAndExpression	given & 0xF800		330800	0		&			
ANR	331862	Identifier	given		330800	0					
ANR	331863	PrimaryExpression	0xF800		330800	1					
ANR	331864	PrimaryExpression	0xF000		330800	1					
ANR	331865	EqualityExpression	( given & 0xF800 ) == 0xE800		330800	1		==			
ANR	331866	BitAndExpression	given & 0xF800		330800	0		&			
ANR	331867	Identifier	given		330800	0					
ANR	331868	PrimaryExpression	0xF800		330800	1					
ANR	331869	PrimaryExpression	0xE800		330800	1					
ANR	331870	CompoundStatement		294:5:8695:8695	330800	1					
ANR	331871	ExpressionStatement	"status = info -> read_memory_func ( pc + 2 , ( bfd_byte * ) b , 2 , info )"	6802:7:245586:245651	330800	0	True				
ANR	331872	AssignmentExpression	"status = info -> read_memory_func ( pc + 2 , ( bfd_byte * ) b , 2 , info )"		330800	0		=			
ANR	331873	Identifier	status		330800	0					
ANR	331874	CallExpression	"info -> read_memory_func ( pc + 2 , ( bfd_byte * ) b , 2 , info )"		330800	1					
ANR	331875	Callee	info -> read_memory_func		330800	0					
ANR	331876	PtrMemberAccess	info -> read_memory_func		330800	0					
ANR	331877	Identifier	info		330800	0					
ANR	331878	Identifier	read_memory_func		330800	1					
ANR	331879	ArgumentList	pc + 2		330800	1					
ANR	331880	Argument	pc + 2		330800	0					
ANR	331881	AdditiveExpression	pc + 2		330800	0		+			
ANR	331882	Identifier	pc		330800	0					
ANR	331883	PrimaryExpression	2		330800	1					
ANR	331884	Argument	( bfd_byte * ) b		330800	1					
ANR	331885	CastExpression	( bfd_byte * ) b		330800	0					
ANR	331886	CastTarget	bfd_byte *		330800	0					
ANR	331887	Identifier	b		330800	1					
ANR	331888	Argument	2		330800	2					
ANR	331889	PrimaryExpression	2		330800	0					
ANR	331890	Argument	info		330800	3					
ANR	331891	Identifier	info		330800	0					
ANR	331892	IfStatement	if ( little_code )		330800	1					
ANR	331893	Condition	little_code	6803:11:245664:245674	330800	0	True				
ANR	331894	Identifier	little_code		330800	0					
ANR	331895	CompoundStatement		296:24:8795:8795	330800	1					
ANR	331896	ExpressionStatement	given = ( b [ 0 ] ) | ( b [ 1 ] << 8 ) | ( given << 16 )	6804:8:245687:245731	330800	0	True				
ANR	331897	AssignmentExpression	given = ( b [ 0 ] ) | ( b [ 1 ] << 8 ) | ( given << 16 )		330800	0		=			
ANR	331898	Identifier	given		330800	0					
ANR	331899	InclusiveOrExpression	( b [ 0 ] ) | ( b [ 1 ] << 8 ) | ( given << 16 )		330800	1		|			
ANR	331900	ArrayIndexing	b [ 0 ]		330800	0					
ANR	331901	Identifier	b		330800	0					
ANR	331902	PrimaryExpression	0		330800	1					
ANR	331903	InclusiveOrExpression	( b [ 1 ] << 8 ) | ( given << 16 )		330800	1		|			
ANR	331904	ShiftExpression	b [ 1 ] << 8		330800	0		<<			
ANR	331905	ArrayIndexing	b [ 1 ]		330800	0					
ANR	331906	Identifier	b		330800	0					
ANR	331907	PrimaryExpression	1		330800	1					
ANR	331908	PrimaryExpression	8		330800	1					
ANR	331909	ShiftExpression	given << 16		330800	1		<<			
ANR	331910	Identifier	given		330800	0					
ANR	331911	PrimaryExpression	16		330800	1					
ANR	331912	ElseStatement	else		330800	0					
ANR	331913	CompoundStatement		298:14:8865:8865	330800	0					
ANR	331914	ExpressionStatement	given = ( b [ 1 ] ) | ( b [ 0 ] << 8 ) | ( given << 16 )	6806:8:245757:245801	330800	0	True				
ANR	331915	AssignmentExpression	given = ( b [ 1 ] ) | ( b [ 0 ] << 8 ) | ( given << 16 )		330800	0		=			
ANR	331916	Identifier	given		330800	0					
ANR	331917	InclusiveOrExpression	( b [ 1 ] ) | ( b [ 0 ] << 8 ) | ( given << 16 )		330800	1		|			
ANR	331918	ArrayIndexing	b [ 1 ]		330800	0					
ANR	331919	Identifier	b		330800	0					
ANR	331920	PrimaryExpression	1		330800	1					
ANR	331921	InclusiveOrExpression	( b [ 0 ] << 8 ) | ( given << 16 )		330800	1		|			
ANR	331922	ShiftExpression	b [ 0 ] << 8		330800	0		<<			
ANR	331923	ArrayIndexing	b [ 0 ]		330800	0					
ANR	331924	Identifier	b		330800	0					
ANR	331925	PrimaryExpression	0		330800	1					
ANR	331926	PrimaryExpression	8		330800	1					
ANR	331927	ShiftExpression	given << 16		330800	1		<<			
ANR	331928	Identifier	given		330800	0					
ANR	331929	PrimaryExpression	16		330800	1					
ANR	331930	ExpressionStatement	printer = print_insn_thumb32	6809:7:245820:245848	330800	2	True				
ANR	331931	AssignmentExpression	printer = print_insn_thumb32		330800	0		=			
ANR	331932	Identifier	printer		330800	0					
ANR	331933	Identifier	print_insn_thumb32		330800	1					
ANR	331934	ExpressionStatement	size = 4	6810:7:245857:245865	330800	3	True				
ANR	331935	AssignmentExpression	size = 4		330800	0		=			
ANR	331936	Identifier	size		330800	0					
ANR	331937	PrimaryExpression	4		330800	1					
ANR	331938	IfStatement	if ( ifthen_address != pc )		330800	6					
ANR	331939	Condition	ifthen_address != pc	6814:5:245883:245902	330800	0	True				
ANR	331940	EqualityExpression	ifthen_address != pc		330800	0		!=			
ANR	331941	Identifier	ifthen_address		330800	0					
ANR	331942	Identifier	pc		330800	1					
ANR	331943	CompoundStatement		307:27:9023:9023	330800	1					
ANR	331944	ExpressionStatement	"find_ifthen_state ( pc , info , little_code )"	6815:2:245909:245950	330800	0	True				
ANR	331945	CallExpression	"find_ifthen_state ( pc , info , little_code )"		330800	0					
ANR	331946	Callee	find_ifthen_state		330800	0					
ANR	331947	Identifier	find_ifthen_state		330800	0					
ANR	331948	ArgumentList	pc		330800	1					
ANR	331949	Argument	pc		330800	0					
ANR	331950	Identifier	pc		330800	0					
ANR	331951	Argument	info		330800	1					
ANR	331952	Identifier	info		330800	0					
ANR	331953	Argument	little_code		330800	2					
ANR	331954	Identifier	little_code		330800	0					
ANR	331955	IfStatement	if ( ifthen_state )		330800	7					
ANR	331956	Condition	ifthen_state	6818:5:245961:245972	330800	0	True				
ANR	331957	Identifier	ifthen_state		330800	0					
ANR	331958	CompoundStatement		311:19:9093:9093	330800	1					
ANR	331959	IfStatement	if ( ( ifthen_state & 0xf ) == 0x8 )		330800	0					
ANR	331960	Condition	( ifthen_state & 0xf ) == 0x8	6819:6:245983:246009	330800	0	True				
ANR	331961	EqualityExpression	( ifthen_state & 0xf ) == 0x8		330800	0		==			
ANR	331962	BitAndExpression	ifthen_state & 0xf		330800	0		&			
ANR	331963	Identifier	ifthen_state		330800	0					
ANR	331964	PrimaryExpression	0xf		330800	1					
ANR	331965	PrimaryExpression	0x8		330800	1					
ANR	331966	CompoundStatement		312:35:9130:9130	330800	1					
ANR	331967	ExpressionStatement	ifthen_next_state = 0	6820:3:246017:246038	330800	0	True				
ANR	331968	AssignmentExpression	ifthen_next_state = 0		330800	0		=			
ANR	331969	Identifier	ifthen_next_state		330800	0					
ANR	331970	PrimaryExpression	0		330800	1					
ANR	331971	ElseStatement	else		330800	0					
ANR	331972	CompoundStatement		314:9:9167:9167	330800	0					
ANR	331973	ExpressionStatement	ifthen_next_state = ( ifthen_state & 0xe0 ) | ( ( ifthen_state & 0xf ) << 1 )	6822:3:246054:246125	330800	0	True				
ANR	331974	AssignmentExpression	ifthen_next_state = ( ifthen_state & 0xe0 ) | ( ( ifthen_state & 0xf ) << 1 )		330800	0		=			
ANR	331975	Identifier	ifthen_next_state		330800	0					
ANR	331976	InclusiveOrExpression	( ifthen_state & 0xe0 ) | ( ( ifthen_state & 0xf ) << 1 )		330800	1		|			
ANR	331977	BitAndExpression	ifthen_state & 0xe0		330800	0		&			
ANR	331978	Identifier	ifthen_state		330800	0					
ANR	331979	PrimaryExpression	0xe0		330800	1					
ANR	331980	ShiftExpression	( ifthen_state & 0xf ) << 1		330800	1		<<			
ANR	331981	BitAndExpression	ifthen_state & 0xf		330800	0		&			
ANR	331982	Identifier	ifthen_state		330800	0					
ANR	331983	PrimaryExpression	0xf		330800	1					
ANR	331984	PrimaryExpression	1		330800	1					
ANR	331985	IfStatement	if ( status )		330800	19					
ANR	331986	Condition	status	6827:6:246147:246152	330800	0	True				
ANR	331987	Identifier	status		330800	0					
ANR	331988	CompoundStatement		321:4:9277:9277	330800	1					
ANR	331989	ExpressionStatement	"info -> memory_error_func ( status , pc , info )"	6829:6:246167:246209	330800	0	True				
ANR	331990	CallExpression	"info -> memory_error_func ( status , pc , info )"		330800	0					
ANR	331991	Callee	info -> memory_error_func		330800	0					
ANR	331992	PtrMemberAccess	info -> memory_error_func		330800	0					
ANR	331993	Identifier	info		330800	0					
ANR	331994	Identifier	memory_error_func		330800	1					
ANR	331995	ArgumentList	status		330800	1					
ANR	331996	Argument	status		330800	0					
ANR	331997	Identifier	status		330800	0					
ANR	331998	Argument	pc		330800	1					
ANR	331999	Identifier	pc		330800	0					
ANR	332000	Argument	info		330800	2					
ANR	332001	Identifier	info		330800	0					
ANR	332002	ReturnStatement	return - 1 ;	6830:6:246217:246226	330800	1	True				
ANR	332003	UnaryOperationExpression	- 1		330800	0					
ANR	332004	UnaryOperator	-		330800	0					
ANR	332005	PrimaryExpression	1		330800	1					
ANR	332006	IfStatement	if ( info -> flags & INSN_HAS_RELOC )		330800	20					
ANR	332007	Condition	info -> flags & INSN_HAS_RELOC	6832:8:246242:246269	330800	0	True				
ANR	332008	BitAndExpression	info -> flags & INSN_HAS_RELOC		330800	0		&			
ANR	332009	PtrMemberAccess	info -> flags		330800	0					
ANR	332010	Identifier	info		330800	0					
ANR	332011	Identifier	flags		330800	1					
ANR	332012	Identifier	INSN_HAS_RELOC		330800	1					
ANR	332013	CompoundStatement		325:38:9390:9390	330800	1					
ANR	332014	ExpressionStatement	pc = 0	6838:5:246596:246602	330800	0	True				
ANR	332015	AssignmentExpression	pc = 0		330800	0		=			
ANR	332016	Identifier	pc		330800	0					
ANR	332017	PrimaryExpression	0		330800	1					
ANR	332018	ExpressionStatement	"printer ( pc , info , given )"	6841:4:246615:246640	330800	21	True				
ANR	332019	CallExpression	"printer ( pc , info , given )"		330800	0					
ANR	332020	Callee	printer		330800	0					
ANR	332021	Identifier	printer		330800	0					
ANR	332022	ArgumentList	pc		330800	1					
ANR	332023	Argument	pc		330800	0					
ANR	332024	Identifier	pc		330800	0					
ANR	332025	Argument	info		330800	1					
ANR	332026	Identifier	info		330800	0					
ANR	332027	Argument	given		330800	2					
ANR	332028	Identifier	given		330800	0					
ANR	332029	IfStatement	if ( is_thumb )		330800	22					
ANR	332030	Condition	is_thumb	6843:8:246651:246658	330800	0	True				
ANR	332031	Identifier	is_thumb		330800	0					
ANR	332032	CompoundStatement		336:18:9779:9779	330800	1					
ANR	332033	ExpressionStatement	ifthen_state = ifthen_next_state	6844:5:246668:246700	330800	0	True				
ANR	332034	AssignmentExpression	ifthen_state = ifthen_next_state		330800	0		=			
ANR	332035	Identifier	ifthen_state		330800	0					
ANR	332036	Identifier	ifthen_next_state		330800	1					
ANR	332037	ExpressionStatement	ifthen_address += size	6845:5:246707:246729	330800	1	True				
ANR	332038	AssignmentExpression	ifthen_address += size		330800	0		+=			
ANR	332039	Identifier	ifthen_address		330800	0					
ANR	332040	Identifier	size		330800	1					
ANR	332041	ReturnStatement	return size ;	6847:2:246739:246750	330800	23	True				
ANR	332042	Identifier	size		330800	0					
ANR	332043	ReturnType	static int		330800	1					
ANR	332044	Identifier	print_insn		330800	2					
ANR	332045	ParameterList	"bfd_vma pc , struct disassemble_info * info , bfd_boolean little"		330800	3					
ANR	332046	Parameter	bfd_vma pc	6507:12:236818:236827	330800	0	True				
ANR	332047	ParameterType	bfd_vma		330800	0					
ANR	332048	Identifier	pc		330800	1					
ANR	332049	Parameter	struct disassemble_info * info	6507:24:236830:236858	330800	1	True				
ANR	332050	ParameterType	struct disassemble_info *		330800	0					
ANR	332051	Identifier	info		330800	1					
ANR	332052	Parameter	bfd_boolean little	6507:55:236861:236878	330800	2	True				
ANR	332053	ParameterType	bfd_boolean		330800	0					
ANR	332054	Identifier	little		330800	1					
ANR	332055	CFGEntryNode	ENTRY		330800		True				
ANR	332056	CFGExitNode	EXIT		330800		True				
ANR	332057	Symbol	info -> section		330800						
ANR	332058	Symbol	& private		330800						
ANR	332059	Symbol	MAP_ARM		330800						
ANR	332060	Symbol	force_thumb		330800						
ANR	332061	Symbol	is_data		330800						
ANR	332062	Symbol	type		330800						
ANR	332063	Symbol	info -> bytes_per_line		330800						
ANR	332064	Symbol	bfd_target_elf_flavour		330800						
ANR	332065	Symbol	last_sym		330800						
ANR	332066	Symbol	private . has_mapping_symbols		330800						
ANR	332067	Symbol	info -> symtab		330800						
ANR	332068	Symbol	info		330800						
ANR	332069	Symbol	little_code		330800						
ANR	332070	Symbol	ifthen_next_state		330800						
ANR	332071	Symbol	given		330800						
ANR	332072	Symbol	print_insn_data		330800						
ANR	332073	Symbol	NULL		330800						
ANR	332074	Symbol	* * * info		330800						
ANR	332075	Symbol	& private . features		330800						
ANR	332076	Symbol	& type		330800						
ANR	332077	Symbol	printer		330800						
ANR	332078	Symbol	TRUE		330800						
ANR	332079	Symbol	info -> symtab_size		330800						
ANR	332080	Symbol	* info -> symtab		330800						
ANR	332081	Symbol	size		330800						
ANR	332082	Symbol	bfd_asymbol_value		330800						
ANR	332083	Symbol	BFD_ENDIAN_LITTLE		330800						
ANR	332084	Symbol	info -> bytes_per_chunk		330800						
ANR	332085	Symbol	info -> read_memory_func		330800						
ANR	332086	Symbol	ifthen_state		330800						
ANR	332087	Symbol	private_data -> last_type		330800						
ANR	332088	Symbol	private . last_mapping_addr		330800						
ANR	332089	Symbol	info -> symtab [ n ] -> section		330800						
ANR	332090	Symbol	little		330800						
ANR	332091	Symbol	status		330800						
ANR	332092	Symbol	print_insn_thumb32		330800						
ANR	332093	Symbol	MAP_DATA		330800						
ANR	332094	Symbol	private		330800						
ANR	332095	Symbol	* * info		330800						
ANR	332096	Symbol	private_data		330800						
ANR	332097	Symbol	info -> endian_code		330800						
ANR	332098	Symbol	INSN_HAS_RELOC		330800						
ANR	332099	Symbol	get_sym_code_type		330800						
ANR	332100	Symbol	N		330800						
ANR	332101	Symbol	info -> flags		330800						
ANR	332102	Symbol	found		330800						
ANR	332103	Symbol	BFD_ENDIAN_BIG		330800						
ANR	332104	Symbol	DISASSEMBLE_DATA		330800						
ANR	332105	Symbol	bfd_asymbol_flavour		330800						
ANR	332106	Symbol	addr		330800						
ANR	332107	Symbol	* * n		330800						
ANR	332108	Symbol	print_insn_arm		330800						
ANR	332109	Symbol	MAP_THUMB		330800						
ANR	332110	Symbol	b		330800						
ANR	332111	Symbol	info -> disassembler_options		330800						
ANR	332112	Symbol	get_map_sym_type		330800						
ANR	332113	Symbol	USER_SPECIFIED_MACHINE_TYPE		330800						
ANR	332114	Symbol	info -> private_data		330800						
ANR	332115	Symbol	info -> mach		330800						
ANR	332116	Symbol	start		330800						
ANR	332117	Symbol	i		330800						
ANR	332118	Symbol	* * info -> symtab		330800						
ANR	332119	Symbol	* b		330800						
ANR	332120	Symbol	n		330800						
ANR	332121	Symbol	pc		330800						
ANR	332122	Symbol	info -> symtab_pos		330800						
ANR	332123	Symbol	* i		330800						
ANR	332124	Symbol	ifthen_address		330800						
ANR	332125	Symbol	private_data -> last_mapping_sym		330800						
ANR	332126	Symbol	info -> display_endian		330800						
ANR	332127	Symbol	* n		330800						
ANR	332128	Symbol	is_thumb		330800						
ANR	332129	Symbol	print_insn_thumb16		330800						
ANR	332130	Symbol	FALSE		330800						
ANR	332131	Symbol	* private_data		330800						
ANR	332132	Symbol	* info		330800						
ANR	332133	Symbol	private . last_mapping_sym		330800						
ANR	332134	Symbol	bfd_mach_arm_unknown		330800						
ANR	332135	Symbol	private_data -> has_mapping_symbols		330800						
ANR	332136	Symbol	is_mapping_symbol		330800						
ANR	332137	Function	print_insn_big_arm	6850:0:246755:247133							
ANR	332138	FunctionDef	"print_insn_big_arm (bfd_vma pc , struct disassemble_info * info)"		332137	0					
ANR	332139	CompoundStatement		6852:0:246822:247133	332137	0					
ANR	332140	IfStatement	if ( info -> flavour == bfd_target_elf_flavour && info -> section != NULL && ( elf_elfheader ( info -> section -> owner ) -> e_flags & EF_ARM_BE8 ) )		332137	0					
ANR	332141	Condition	info -> flavour == bfd_target_elf_flavour && info -> section != NULL && ( elf_elfheader ( info -> section -> owner ) -> e_flags & EF_ARM_BE8 )	6855:6:246901:247040	332137	0	True				
ANR	332142	AndExpression	info -> flavour == bfd_target_elf_flavour && info -> section != NULL && ( elf_elfheader ( info -> section -> owner ) -> e_flags & EF_ARM_BE8 )		332137	0		&&			
ANR	332143	EqualityExpression	info -> flavour == bfd_target_elf_flavour		332137	0		==			
ANR	332144	PtrMemberAccess	info -> flavour		332137	0					
ANR	332145	Identifier	info		332137	0					
ANR	332146	Identifier	flavour		332137	1					
ANR	332147	Identifier	bfd_target_elf_flavour		332137	1					
ANR	332148	AndExpression	info -> section != NULL && ( elf_elfheader ( info -> section -> owner ) -> e_flags & EF_ARM_BE8 )		332137	1		&&			
ANR	332149	EqualityExpression	info -> section != NULL		332137	0		!=			
ANR	332150	PtrMemberAccess	info -> section		332137	0					
ANR	332151	Identifier	info		332137	0					
ANR	332152	Identifier	section		332137	1					
ANR	332153	Identifier	NULL		332137	1					
ANR	332154	BitAndExpression	elf_elfheader ( info -> section -> owner ) -> e_flags & EF_ARM_BE8		332137	1		&			
ANR	332155	PtrMemberAccess	elf_elfheader ( info -> section -> owner ) -> e_flags		332137	0					
ANR	332156	CallExpression	elf_elfheader ( info -> section -> owner )		332137	0					
ANR	332157	Callee	elf_elfheader		332137	0					
ANR	332158	Identifier	elf_elfheader		332137	0					
ANR	332159	ArgumentList	info -> section -> owner		332137	1					
ANR	332160	Argument	info -> section -> owner		332137	0					
ANR	332161	PtrMemberAccess	info -> section -> owner		332137	0					
ANR	332162	PtrMemberAccess	info -> section		332137	0					
ANR	332163	Identifier	info		332137	0					
ANR	332164	Identifier	section		332137	1					
ANR	332165	Identifier	owner		332137	1					
ANR	332166	Identifier	e_flags		332137	1					
ANR	332167	Identifier	EF_ARM_BE8		332137	1					
ANR	332168	ExpressionStatement	info -> endian_code = BFD_ENDIAN_LITTLE	6858:4:247047:247084	332137	1	True				
ANR	332169	AssignmentExpression	info -> endian_code = BFD_ENDIAN_LITTLE		332137	0		=			
ANR	332170	PtrMemberAccess	info -> endian_code		332137	0					
ANR	332171	Identifier	info		332137	0					
ANR	332172	Identifier	endian_code		332137	1					
ANR	332173	Identifier	BFD_ENDIAN_LITTLE		332137	1					
ANR	332174	ReturnStatement	"return print_insn ( pc , info , FALSE ) ;"	6861:2:247096:247131	332137	1	True				
ANR	332175	CallExpression	"print_insn ( pc , info , FALSE )"		332137	0					
ANR	332176	Callee	print_insn		332137	0					
ANR	332177	Identifier	print_insn		332137	0					
ANR	332178	ArgumentList	pc		332137	1					
ANR	332179	Argument	pc		332137	0					
ANR	332180	Identifier	pc		332137	0					
ANR	332181	Argument	info		332137	1					
ANR	332182	Identifier	info		332137	0					
ANR	332183	Argument	FALSE		332137	2					
ANR	332184	Identifier	FALSE		332137	0					
ANR	332185	ReturnType	int		332137	1					
ANR	332186	Identifier	print_insn_big_arm		332137	2					
ANR	332187	ParameterList	"bfd_vma pc , struct disassemble_info * info"		332137	3					
ANR	332188	Parameter	bfd_vma pc	6851:20:246779:246788	332137	0	True				
ANR	332189	ParameterType	bfd_vma		332137	0					
ANR	332190	Identifier	pc		332137	1					
ANR	332191	Parameter	struct disassemble_info * info	6851:32:246791:246819	332137	1	True				
ANR	332192	ParameterType	struct disassemble_info *		332137	0					
ANR	332193	Identifier	info		332137	1					
ANR	332194	CFGEntryNode	ENTRY		332137		True				
ANR	332195	CFGExitNode	EXIT		332137		True				
ANR	332196	Symbol	* * info		332137						
ANR	332197	Symbol	NULL		332137						
ANR	332198	Symbol	info -> section		332137						
ANR	332199	Symbol	info -> flavour		332137						
ANR	332200	Symbol	info -> endian_code		332137						
ANR	332201	Symbol	EF_ARM_BE8		332137						
ANR	332202	Symbol	info -> section -> owner		332137						
ANR	332203	Symbol	elf_elfheader ( info -> section -> owner ) -> e_flags		332137						
ANR	332204	Symbol	print_insn		332137						
ANR	332205	Symbol	pc		332137						
ANR	332206	Symbol	* info -> section		332137						
ANR	332207	Symbol	BFD_ENDIAN_LITTLE		332137						
ANR	332208	Symbol	bfd_target_elf_flavour		332137						
ANR	332209	Symbol	FALSE		332137						
ANR	332210	Symbol	* info		332137						
ANR	332211	Symbol	* elf_elfheader		332137						
ANR	332212	Symbol	elf_elfheader		332137						
ANR	332213	Symbol	info		332137						
ANR	332214	Function	print_insn_little_arm	6864:0:247136:247246							
ANR	332215	FunctionDef	"print_insn_little_arm (bfd_vma pc , struct disassemble_info * info)"		332214	0					
ANR	332216	CompoundStatement		6866:0:247206:247246	332214	0					
ANR	332217	ReturnStatement	"return print_insn ( pc , info , TRUE ) ;"	6867:2:247210:247244	332214	0	True				
ANR	332218	CallExpression	"print_insn ( pc , info , TRUE )"		332214	0					
ANR	332219	Callee	print_insn		332214	0					
ANR	332220	Identifier	print_insn		332214	0					
ANR	332221	ArgumentList	pc		332214	1					
ANR	332222	Argument	pc		332214	0					
ANR	332223	Identifier	pc		332214	0					
ANR	332224	Argument	info		332214	1					
ANR	332225	Identifier	info		332214	0					
ANR	332226	Argument	TRUE		332214	2					
ANR	332227	Identifier	TRUE		332214	0					
ANR	332228	ReturnType	int		332214	1					
ANR	332229	Identifier	print_insn_little_arm		332214	2					
ANR	332230	ParameterList	"bfd_vma pc , struct disassemble_info * info"		332214	3					
ANR	332231	Parameter	bfd_vma pc	6865:23:247163:247172	332214	0	True				
ANR	332232	ParameterType	bfd_vma		332214	0					
ANR	332233	Identifier	pc		332214	1					
ANR	332234	Parameter	struct disassemble_info * info	6865:35:247175:247203	332214	1	True				
ANR	332235	ParameterType	struct disassemble_info *		332214	0					
ANR	332236	Identifier	info		332214	1					
ANR	332237	CFGEntryNode	ENTRY		332214		True				
ANR	332238	CFGExitNode	EXIT		332214		True				
ANR	332239	Symbol	print_insn		332214						
ANR	332240	Symbol	pc		332214						
ANR	332241	Symbol	TRUE		332214						
ANR	332242	Symbol	info		332214						
ANR	332243	Function	disassembler_options_arm	6870:0:247249:247948							
ANR	332244	FunctionDef	disassembler_options_arm ()		332243	0					
ANR	332245	CompoundStatement		6872:0:247306:247948	332243	0					
ANR	332246	Statement	static	6873:2:247310:247315	332243	0	True				
ANR	332247	IdentifierDeclStatement	disasm_options_t * opts = NULL ;	6873:9:247317:247346	332243	1	True				
ANR	332248	IdentifierDecl	* opts = NULL		332243	0					
ANR	332249	IdentifierDeclType	disasm_options_t *		332243	0					
ANR	332250	Identifier	opts		332243	1					
ANR	332251	AssignmentExpression	* opts = NULL		332243	2		=			
ANR	332252	Identifier	NULL		332243	0					
ANR	332253	Identifier	NULL		332243	1					
ANR	332254	IfStatement	if ( opts == NULL )		332243	2					
ANR	332255	Condition	opts == NULL	6875:6:247355:247366	332243	0	True				
ANR	332256	EqualityExpression	opts == NULL		332243	0		==			
ANR	332257	Identifier	opts		332243	0					
ANR	332258	Identifier	NULL		332243	1					
ANR	332259	CompoundStatement		6:6:74:88	332243	1					
ANR	332260	IdentifierDeclStatement	unsigned int i ;	6877:6:247381:247395	332243	0	True				
ANR	332261	IdentifierDecl	i		332243	0					
ANR	332262	IdentifierDeclType	unsigned int		332243	0					
ANR	332263	Identifier	i		332243	1					
ANR	332264	ExpressionStatement	opts = XNEW ( disasm_options_t )	6878:6:247403:247433	332243	1	True				
ANR	332265	AssignmentExpression	opts = XNEW ( disasm_options_t )		332243	0		=			
ANR	332266	Identifier	opts		332243	0					
ANR	332267	CallExpression	XNEW ( disasm_options_t )		332243	1					
ANR	332268	Callee	XNEW		332243	0					
ANR	332269	Identifier	XNEW		332243	0					
ANR	332270	ArgumentList	disasm_options_t		332243	1					
ANR	332271	Argument	disasm_options_t		332243	0					
ANR	332272	Identifier	disasm_options_t		332243	0					
ANR	332273	Statement	opts	6879:6:247441:247444	332243	2	True				
ANR	332274	Statement	->	6879:10:247445:247446	332243	3	True				
ANR	332275	Statement	name	6879:12:247447:247450	332243	4	True				
ANR	332276	Statement	=	6879:17:247452:247452	332243	5	True				
ANR	332277	Statement	XNEWVEC	6879:19:247454:247460	332243	6	True				
ANR	332278	Statement	(	6879:27:247462:247462	332243	7	True				
ANR	332279	Statement	const	6879:28:247463:247467	332243	8	True				
ANR	332280	Statement	char	6879:34:247469:247472	332243	9	True				
ANR	332281	Statement	*	6879:39:247474:247474	332243	10	True				
ANR	332282	Statement	","	6879:40:247475:247475	332243	11	True				
ANR	332283	Statement	NUM_ARM_OPTIONS	6879:42:247477:247491	332243	12	True				
ANR	332284	Statement	+	6879:58:247493:247493	332243	13	True				
ANR	332285	Statement	1	6879:60:247495:247495	332243	14	True				
ANR	332286	Statement	)	6879:61:247496:247496	332243	15	True				
ANR	332287	ExpressionStatement		6879:62:247497:247497	332243	16	True				
ANR	332288	Statement	opts	6880:6:247505:247508	332243	17	True				
ANR	332289	Statement	->	6880:10:247509:247510	332243	18	True				
ANR	332290	Statement	description	6880:12:247511:247521	332243	19	True				
ANR	332291	Statement	=	6880:24:247523:247523	332243	20	True				
ANR	332292	Statement	XNEWVEC	6880:26:247525:247531	332243	21	True				
ANR	332293	Statement	(	6880:34:247533:247533	332243	22	True				
ANR	332294	Statement	const	6880:35:247534:247538	332243	23	True				
ANR	332295	Statement	char	6880:41:247540:247543	332243	24	True				
ANR	332296	Statement	*	6880:46:247545:247545	332243	25	True				
ANR	332297	Statement	","	6880:47:247546:247546	332243	26	True				
ANR	332298	Statement	NUM_ARM_OPTIONS	6880:49:247548:247562	332243	27	True				
ANR	332299	Statement	+	6880:65:247564:247564	332243	28	True				
ANR	332300	Statement	1	6880:67:247566:247566	332243	29	True				
ANR	332301	Statement	)	6880:68:247567:247567	332243	30	True				
ANR	332302	ExpressionStatement		6880:69:247568:247568	332243	31	True				
ANR	332303	ForStatement	for ( i = 0 ; i < NUM_ARM_OPTIONS ; i ++ )		332243	32					
ANR	332304	ForInit	i = 0 ;	6881:11:247581:247586	332243	0	True				
ANR	332305	AssignmentExpression	i = 0		332243	0		=			
ANR	332306	Identifier	i		332243	0					
ANR	332307	PrimaryExpression	0		332243	1					
ANR	332308	Condition	i < NUM_ARM_OPTIONS	6881:18:247588:247606	332243	1	True				
ANR	332309	RelationalExpression	i < NUM_ARM_OPTIONS		332243	0		<			
ANR	332310	Identifier	i		332243	0					
ANR	332311	Identifier	NUM_ARM_OPTIONS		332243	1					
ANR	332312	PostIncDecOperationExpression	i ++	6881:39:247609:247611	332243	2	True				
ANR	332313	Identifier	i		332243	0					
ANR	332314	IncDec	++		332243	1					
ANR	332315	CompoundStatement		11:1:308:308	332243	3					
ANR	332316	ExpressionStatement	opts -> name [ i ] = regnames [ i ] . name	6883:3:247620:247652	332243	0	True				
ANR	332317	AssignmentExpression	opts -> name [ i ] = regnames [ i ] . name		332243	0		=			
ANR	332318	ArrayIndexing	opts -> name [ i ]		332243	0					
ANR	332319	PtrMemberAccess	opts -> name		332243	0					
ANR	332320	Identifier	opts		332243	0					
ANR	332321	Identifier	name		332243	1					
ANR	332322	Identifier	i		332243	1					
ANR	332323	MemberAccess	regnames [ i ] . name		332243	1					
ANR	332324	ArrayIndexing	regnames [ i ]		332243	0					
ANR	332325	Identifier	regnames		332243	0					
ANR	332326	Identifier	i		332243	1					
ANR	332327	Identifier	name		332243	1					
ANR	332328	IfStatement	if ( regnames [ i ] . description != NULL )		332243	1					
ANR	332329	Condition	regnames [ i ] . description != NULL	6884:7:247661:247691	332243	0	True				
ANR	332330	EqualityExpression	regnames [ i ] . description != NULL		332243	0		!=			
ANR	332331	MemberAccess	regnames [ i ] . description		332243	0					
ANR	332332	ArrayIndexing	regnames [ i ]		332243	0					
ANR	332333	Identifier	regnames		332243	0					
ANR	332334	Identifier	i		332243	1					
ANR	332335	Identifier	description		332243	1					
ANR	332336	Identifier	NULL		332243	1					
ANR	332337	CompoundStatement		13:40:387:387	332243	1					
ANR	332338	ExpressionStatement	opts -> description [ i ] = _ ( regnames [ i ] . description )	6885:4:247700:247750	332243	0	True				
ANR	332339	AssignmentExpression	opts -> description [ i ] = _ ( regnames [ i ] . description )		332243	0		=			
ANR	332340	ArrayIndexing	opts -> description [ i ]		332243	0					
ANR	332341	PtrMemberAccess	opts -> description		332243	0					
ANR	332342	Identifier	opts		332243	0					
ANR	332343	Identifier	description		332243	1					
ANR	332344	Identifier	i		332243	1					
ANR	332345	CallExpression	_ ( regnames [ i ] . description )		332243	1					
ANR	332346	Callee	_		332243	0					
ANR	332347	Identifier	_		332243	0					
ANR	332348	ArgumentList	regnames [ i ] . description		332243	1					
ANR	332349	Argument	regnames [ i ] . description		332243	0					
ANR	332350	MemberAccess	regnames [ i ] . description		332243	0					
ANR	332351	ArrayIndexing	regnames [ i ]		332243	0					
ANR	332352	Identifier	regnames		332243	0					
ANR	332353	Identifier	i		332243	1					
ANR	332354	Identifier	description		332243	1					
ANR	332355	ElseStatement	else		332243	0					
ANR	332356	CompoundStatement		15:10:455:455	332243	0					
ANR	332357	ExpressionStatement	opts -> description [ i ] = NULL	6887:4:247768:247795	332243	0	True				
ANR	332358	AssignmentExpression	opts -> description [ i ] = NULL		332243	0		=			
ANR	332359	ArrayIndexing	opts -> description [ i ]		332243	0					
ANR	332360	PtrMemberAccess	opts -> description		332243	0					
ANR	332361	Identifier	opts		332243	0					
ANR	332362	Identifier	description		332243	1					
ANR	332363	Identifier	i		332243	1					
ANR	332364	Identifier	NULL		332243	1					
ANR	332365	ExpressionStatement	opts -> name [ i ] = NULL	6891:6:247869:247889	332243	33	True				
ANR	332366	AssignmentExpression	opts -> name [ i ] = NULL		332243	0		=			
ANR	332367	ArrayIndexing	opts -> name [ i ]		332243	0					
ANR	332368	PtrMemberAccess	opts -> name		332243	0					
ANR	332369	Identifier	opts		332243	0					
ANR	332370	Identifier	name		332243	1					
ANR	332371	Identifier	i		332243	1					
ANR	332372	Identifier	NULL		332243	1					
ANR	332373	ExpressionStatement	opts -> description [ i ] = NULL	6892:6:247897:247924	332243	34	True				
ANR	332374	AssignmentExpression	opts -> description [ i ] = NULL		332243	0		=			
ANR	332375	ArrayIndexing	opts -> description [ i ]		332243	0					
ANR	332376	PtrMemberAccess	opts -> description		332243	0					
ANR	332377	Identifier	opts		332243	0					
ANR	332378	Identifier	description		332243	1					
ANR	332379	Identifier	i		332243	1					
ANR	332380	Identifier	NULL		332243	1					
ANR	332381	ReturnStatement	return opts ;	6895:2:247935:247946	332243	3	True				
ANR	332382	Identifier	opts		332243	0					
ANR	332383	ReturnType	const disasm_options_t *		332243	1					
ANR	332384	Identifier	disassembler_options_arm		332243	2					
ANR	332385	ParameterList			332243	3					
ANR	332386	CFGEntryNode	ENTRY		332243		True				
ANR	332387	CFGExitNode	EXIT		332243		True				
ANR	332388	Symbol	NUM_ARM_OPTIONS		332243						
ANR	332389	Symbol	opts -> name		332243						
ANR	332390	Symbol	XNEW		332243						
ANR	332391	Symbol	* opts -> description		332243						
ANR	332392	Symbol	NULL		332243						
ANR	332393	Symbol	i		332243						
ANR	332394	Symbol	regnames		332243						
ANR	332395	Symbol	* opts -> name		332243						
ANR	332396	Symbol	disasm_options_t		332243						
ANR	332397	Symbol	opts -> description		332243						
ANR	332398	Symbol	* i		332243						
ANR	332399	Symbol	opts		332243						
ANR	332400	Symbol	* opts		332243						
ANR	332401	Symbol	* * opts		332243						
ANR	332402	Symbol	regnames [ i ] . name		332243						
ANR	332403	Symbol	regnames [ i ] . description		332243						
ANR	332404	Symbol	* regnames		332243						
ANR	332405	Symbol	_		332243						
ANR	332406	Function	print_arm_disassembler_options	6898:0:247951:248537							
ANR	332407	FunctionDef	print_arm_disassembler_options (FILE * stream)		332406	0					
ANR	332408	CompoundStatement		6900:0:248002:248537	332406	0					
ANR	332409	IdentifierDeclStatement	"unsigned int i , max_len = 0 ;"	6901:2:248006:248033	332406	0	True				
ANR	332410	IdentifierDecl	i		332406	0					
ANR	332411	IdentifierDeclType	unsigned int		332406	0					
ANR	332412	Identifier	i		332406	1					
ANR	332413	IdentifierDecl	max_len = 0		332406	1					
ANR	332414	IdentifierDeclType	unsigned int		332406	0					
ANR	332415	Identifier	max_len		332406	1					
ANR	332416	AssignmentExpression	max_len = 0		332406	2		=			
ANR	332417	Identifier	max_len		332406	0					
ANR	332418	PrimaryExpression	0		332406	1					
ANR	332419	ExpressionStatement	"fprintf ( stream , _ ( ""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"" ) )"	6902:2:248037:248158	332406	1	True				
ANR	332420	CallExpression	"fprintf ( stream , _ ( ""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"" ) )"		332406	0					
ANR	332421	Callee	fprintf		332406	0					
ANR	332422	Identifier	fprintf		332406	0					
ANR	332423	ArgumentList	stream		332406	1					
ANR	332424	Argument	stream		332406	0					
ANR	332425	Identifier	stream		332406	0					
ANR	332426	Argument	"_ ( ""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"" )"		332406	1					
ANR	332427	CallExpression	"_ ( ""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"" )"		332406	0					
ANR	332428	Callee	_		332406	0					
ANR	332429	Identifier	_		332406	0					
ANR	332430	ArgumentList	"""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"""		332406	1					
ANR	332431	Argument	"""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"""		332406	0					
ANR	332432	PrimaryExpression	"""\\n\\\\nThe following ARM specific disassembler options are supported for use with\\n\\\\nthe -M switch:\\n"""		332406	0					
ANR	332433	ForStatement	for ( i = 0 ; i < NUM_ARM_OPTIONS ; i ++ )		332406	2					
ANR	332434	ForInit	i = 0 ;	6906:7:248168:248173	332406	0	True				
ANR	332435	AssignmentExpression	i = 0		332406	0		=			
ANR	332436	Identifier	i		332406	0					
ANR	332437	PrimaryExpression	0		332406	1					
ANR	332438	Condition	i < NUM_ARM_OPTIONS	6906:14:248175:248193	332406	1	True				
ANR	332439	RelationalExpression	i < NUM_ARM_OPTIONS		332406	0		<			
ANR	332440	Identifier	i		332406	0					
ANR	332441	Identifier	NUM_ARM_OPTIONS		332406	1					
ANR	332442	PostIncDecOperationExpression	i ++	6906:35:248196:248198	332406	2	True				
ANR	332443	Identifier	i		332406	0					
ANR	332444	IncDec	++		332406	1					
ANR	332445	CompoundStatement		9:6:210:254	332406	3					
ANR	332446	IdentifierDeclStatement	unsigned int len = strlen ( regnames [ i ] . name ) ;	6908:6:248213:248257	332406	0	True				
ANR	332447	IdentifierDecl	len = strlen ( regnames [ i ] . name )		332406	0					
ANR	332448	IdentifierDeclType	unsigned int		332406	0					
ANR	332449	Identifier	len		332406	1					
ANR	332450	AssignmentExpression	len = strlen ( regnames [ i ] . name )		332406	2		=			
ANR	332451	Identifier	len		332406	0					
ANR	332452	CallExpression	strlen ( regnames [ i ] . name )		332406	1					
ANR	332453	Callee	strlen		332406	0					
ANR	332454	Identifier	strlen		332406	0					
ANR	332455	ArgumentList	regnames [ i ] . name		332406	1					
ANR	332456	Argument	regnames [ i ] . name		332406	0					
ANR	332457	MemberAccess	regnames [ i ] . name		332406	0					
ANR	332458	ArrayIndexing	regnames [ i ]		332406	0					
ANR	332459	Identifier	regnames		332406	0					
ANR	332460	Identifier	i		332406	1					
ANR	332461	Identifier	name		332406	1					
ANR	332462	IfStatement	if ( max_len < len )		332406	1					
ANR	332463	Condition	max_len < len	6909:10:248269:248281	332406	0	True				
ANR	332464	RelationalExpression	max_len < len		332406	0		<			
ANR	332465	Identifier	max_len		332406	0					
ANR	332466	Identifier	len		332406	1					
ANR	332467	CompoundStatement		10:25:281:281	332406	1					
ANR	332468	ExpressionStatement	max_len = len	6910:7:248293:248306	332406	0	True				
ANR	332469	AssignmentExpression	max_len = len		332406	0		=			
ANR	332470	Identifier	max_len		332406	0					
ANR	332471	Identifier	len		332406	1					
ANR	332472	ForStatement	"for ( i = 0 , max_len ++ ; i < NUM_ARM_OPTIONS ; i ++ )"		332406	3					
ANR	332473	ForInit	"i = 0 , max_len ++ ;"	6914:9:248332:248348	332406	0	True				
ANR	332474	Expression	"i = 0 , max_len ++"		332406	0					
ANR	332475	AssignmentExpression	i = 0		332406	0		=			
ANR	332476	Identifier	i		332406	0					
ANR	332477	PrimaryExpression	0		332406	1					
ANR	332478	PostIncDecOperationExpression	max_len ++		332406	1					
ANR	332479	Identifier	max_len		332406	0					
ANR	332480	IncDec	++		332406	1					
ANR	332481	Condition	i < NUM_ARM_OPTIONS	6914:27:248350:248368	332406	1	True				
ANR	332482	RelationalExpression	i < NUM_ARM_OPTIONS		332406	0		<			
ANR	332483	Identifier	i		332406	0					
ANR	332484	Identifier	NUM_ARM_OPTIONS		332406	1					
ANR	332485	PostIncDecOperationExpression	i ++	6914:48:248371:248373	332406	2	True				
ANR	332486	Identifier	i		332406	0					
ANR	332487	IncDec	++		332406	1					
ANR	332488	CompoundStatement		15:53:373:373	332406	3					
ANR	332489	ExpressionStatement	"fprintf ( stream , ""  %s%*c %s\\n"" , regnames [ i ] . name , ( int ) ( max_len - strlen ( regnames [ i ] . name ) ) , ' ' , _ ( regnames [ i ] . description ) )"	6915:5:248383:248529	332406	0	True				
ANR	332490	CallExpression	"fprintf ( stream , ""  %s%*c %s\\n"" , regnames [ i ] . name , ( int ) ( max_len - strlen ( regnames [ i ] . name ) ) , ' ' , _ ( regnames [ i ] . description ) )"		332406	0					
ANR	332491	Callee	fprintf		332406	0					
ANR	332492	Identifier	fprintf		332406	0					
ANR	332493	ArgumentList	stream		332406	1					
ANR	332494	Argument	stream		332406	0					
ANR	332495	Identifier	stream		332406	0					
ANR	332496	Argument	"""  %s%*c %s\\n"""		332406	1					
ANR	332497	PrimaryExpression	"""  %s%*c %s\\n"""		332406	0					
ANR	332498	Argument	regnames [ i ] . name		332406	2					
ANR	332499	MemberAccess	regnames [ i ] . name		332406	0					
ANR	332500	ArrayIndexing	regnames [ i ]		332406	0					
ANR	332501	Identifier	regnames		332406	0					
ANR	332502	Identifier	i		332406	1					
ANR	332503	Identifier	name		332406	1					
ANR	332504	Argument	( int ) ( max_len - strlen ( regnames [ i ] . name ) )		332406	3					
ANR	332505	CastExpression	( int ) ( max_len - strlen ( regnames [ i ] . name ) )		332406	0					
ANR	332506	CastTarget	int		332406	0					
ANR	332507	AdditiveExpression	max_len - strlen ( regnames [ i ] . name )		332406	1		-			
ANR	332508	Identifier	max_len		332406	0					
ANR	332509	CallExpression	strlen ( regnames [ i ] . name )		332406	1					
ANR	332510	Callee	strlen		332406	0					
ANR	332511	Identifier	strlen		332406	0					
ANR	332512	ArgumentList	regnames [ i ] . name		332406	1					
ANR	332513	Argument	regnames [ i ] . name		332406	0					
ANR	332514	MemberAccess	regnames [ i ] . name		332406	0					
ANR	332515	ArrayIndexing	regnames [ i ]		332406	0					
ANR	332516	Identifier	regnames		332406	0					
ANR	332517	Identifier	i		332406	1					
ANR	332518	Identifier	name		332406	1					
ANR	332519	Argument	' '		332406	4					
ANR	332520	PrimaryExpression	' '		332406	0					
ANR	332521	Argument	_ ( regnames [ i ] . description )		332406	5					
ANR	332522	CallExpression	_ ( regnames [ i ] . description )		332406	0					
ANR	332523	Callee	_		332406	0					
ANR	332524	Identifier	_		332406	0					
ANR	332525	ArgumentList	regnames [ i ] . description		332406	1					
ANR	332526	Argument	regnames [ i ] . description		332406	0					
ANR	332527	MemberAccess	regnames [ i ] . description		332406	0					
ANR	332528	ArrayIndexing	regnames [ i ]		332406	0					
ANR	332529	Identifier	regnames		332406	0					
ANR	332530	Identifier	i		332406	1					
ANR	332531	Identifier	description		332406	1					
ANR	332532	ReturnType	void		332406	1					
ANR	332533	Identifier	print_arm_disassembler_options		332406	2					
ANR	332534	ParameterList	FILE * stream		332406	3					
ANR	332535	Parameter	FILE * stream	6899:32:247988:247999	332406	0	True				
ANR	332536	ParameterType	FILE *		332406	0					
ANR	332537	Identifier	stream		332406	1					
ANR	332538	CFGEntryNode	ENTRY		332406		True				
ANR	332539	CFGExitNode	EXIT		332406		True				
ANR	332540	Symbol	NUM_ARM_OPTIONS		332406						
ANR	332541	Symbol	strlen		332406						
ANR	332542	Symbol	* i		332406						
ANR	332543	Symbol	len		332406						
ANR	332544	Symbol	stream		332406						
ANR	332545	Symbol	i		332406						
ANR	332546	Symbol	regnames [ i ] . name		332406						
ANR	332547	Symbol	regnames [ i ] . description		332406						
ANR	332548	Symbol	regnames		332406						
ANR	332549	Symbol	* regnames		332406						
ANR	332550	Symbol	max_len		332406						
ANR	332551	Symbol	_		332406						
