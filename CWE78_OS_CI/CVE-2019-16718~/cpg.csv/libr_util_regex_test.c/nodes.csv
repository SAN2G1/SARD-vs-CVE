command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5213480	File	data/converged/CVE-2019-16718~_radare2/libr_util_regex_test.c								
ANR	5213481	Function	_main	4:0:41:350							
ANR	5213482	FunctionDef	_main ()		5213481	0					
ANR	5213483	CompoundStatement		4:12:53:350	5213481	0					
ANR	5213484	IdentifierDeclStatement	RRegex rx ;	5:1:56:65	5213481	0	True				
ANR	5213485	IdentifierDecl	rx		5213481	0					
ANR	5213486	IdentifierDeclType	RRegex		5213481	0					
ANR	5213487	Identifier	rx		5213481	1					
ANR	5213488	IdentifierDeclStatement	"int rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB ) ;"	6:1:68:117	5213481	1	True				
ANR	5213489	IdentifierDecl	"rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		5213481	0					
ANR	5213490	IdentifierDeclType	int		5213481	0					
ANR	5213491	Identifier	rc		5213481	1					
ANR	5213492	AssignmentExpression	"rc = r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		5213481	2		=			
ANR	5213493	Identifier	rc		5213481	0					
ANR	5213494	CallExpression	"r_regex_comp ( & rx , ""^hi"" , R_REGEX_NOSUB )"		5213481	1					
ANR	5213495	Callee	r_regex_comp		5213481	0					
ANR	5213496	Identifier	r_regex_comp		5213481	0					
ANR	5213497	ArgumentList	& rx		5213481	1					
ANR	5213498	Argument	& rx		5213481	0					
ANR	5213499	UnaryOperationExpression	& rx		5213481	0					
ANR	5213500	UnaryOperator	&		5213481	0					
ANR	5213501	Identifier	rx		5213481	1					
ANR	5213502	Argument	"""^hi"""		5213481	1					
ANR	5213503	PrimaryExpression	"""^hi"""		5213481	0					
ANR	5213504	Argument	R_REGEX_NOSUB		5213481	2					
ANR	5213505	Identifier	R_REGEX_NOSUB		5213481	0					
ANR	5213506	IfStatement	if ( rc )		5213481	2					
ANR	5213507	Condition	rc	7:5:125:126	5213481	0	True				
ANR	5213508	Identifier	rc		5213481	0					
ANR	5213509	CompoundStatement		4:9:75:75	5213481	1					
ANR	5213510	ExpressionStatement	"printf ( ""error\\n"" )"	8:2:133:151	5213481	0	True				
ANR	5213511	CallExpression	"printf ( ""error\\n"" )"		5213481	0					
ANR	5213512	Callee	printf		5213481	0					
ANR	5213513	Identifier	printf		5213481	0					
ANR	5213514	ArgumentList	"""error\\n"""		5213481	1					
ANR	5213515	Argument	"""error\\n"""		5213481	0					
ANR	5213516	PrimaryExpression	"""error\\n"""		5213481	0					
ANR	5213517	ElseStatement	else		5213481	0					
ANR	5213518	CompoundStatement		7:8:108:108	5213481	0					
ANR	5213519	ExpressionStatement	"rc = r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"	11:2:166:208	5213481	0	True				
ANR	5213520	AssignmentExpression	"rc = r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"		5213481	0		=			
ANR	5213521	Identifier	rc		5213481	0					
ANR	5213522	CallExpression	"r_regex_exec ( & rx , ""patata"" , 0 , 0 , 0 )"		5213481	1					
ANR	5213523	Callee	r_regex_exec		5213481	0					
ANR	5213524	Identifier	r_regex_exec		5213481	0					
ANR	5213525	ArgumentList	& rx		5213481	1					
ANR	5213526	Argument	& rx		5213481	0					
ANR	5213527	UnaryOperationExpression	& rx		5213481	0					
ANR	5213528	UnaryOperator	&		5213481	0					
ANR	5213529	Identifier	rx		5213481	1					
ANR	5213530	Argument	"""patata"""		5213481	1					
ANR	5213531	PrimaryExpression	"""patata"""		5213481	0					
ANR	5213532	Argument	0		5213481	2					
ANR	5213533	PrimaryExpression	0		5213481	0					
ANR	5213534	Argument	0		5213481	3					
ANR	5213535	PrimaryExpression	0		5213481	0					
ANR	5213536	Argument	0		5213481	4					
ANR	5213537	PrimaryExpression	0		5213481	0					
ANR	5213538	ExpressionStatement	"printf ( ""out = %d\\n"" , rc )"	12:2:212:237	5213481	1	True				
ANR	5213539	CallExpression	"printf ( ""out = %d\\n"" , rc )"		5213481	0					
ANR	5213540	Callee	printf		5213481	0					
ANR	5213541	Identifier	printf		5213481	0					
ANR	5213542	ArgumentList	"""out = %d\\n"""		5213481	1					
ANR	5213543	Argument	"""out = %d\\n"""		5213481	0					
ANR	5213544	PrimaryExpression	"""out = %d\\n"""		5213481	0					
ANR	5213545	Argument	rc		5213481	1					
ANR	5213546	Identifier	rc		5213481	0					
ANR	5213547	ExpressionStatement	"rc = r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"	14:2:242:284	5213481	2	True				
ANR	5213548	AssignmentExpression	"rc = r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"		5213481	0		=			
ANR	5213549	Identifier	rc		5213481	0					
ANR	5213550	CallExpression	"r_regex_exec ( & rx , ""hillow"" , 0 , 0 , 0 )"		5213481	1					
ANR	5213551	Callee	r_regex_exec		5213481	0					
ANR	5213552	Identifier	r_regex_exec		5213481	0					
ANR	5213553	ArgumentList	& rx		5213481	1					
ANR	5213554	Argument	& rx		5213481	0					
ANR	5213555	UnaryOperationExpression	& rx		5213481	0					
ANR	5213556	UnaryOperator	&		5213481	0					
ANR	5213557	Identifier	rx		5213481	1					
ANR	5213558	Argument	"""hillow"""		5213481	1					
ANR	5213559	PrimaryExpression	"""hillow"""		5213481	0					
ANR	5213560	Argument	0		5213481	2					
ANR	5213561	PrimaryExpression	0		5213481	0					
ANR	5213562	Argument	0		5213481	3					
ANR	5213563	PrimaryExpression	0		5213481	0					
ANR	5213564	Argument	0		5213481	4					
ANR	5213565	PrimaryExpression	0		5213481	0					
ANR	5213566	ExpressionStatement	"printf ( ""out = %d\\n"" , rc )"	15:2:288:313	5213481	3	True				
ANR	5213567	CallExpression	"printf ( ""out = %d\\n"" , rc )"		5213481	0					
ANR	5213568	Callee	printf		5213481	0					
ANR	5213569	Identifier	printf		5213481	0					
ANR	5213570	ArgumentList	"""out = %d\\n"""		5213481	1					
ANR	5213571	Argument	"""out = %d\\n"""		5213481	0					
ANR	5213572	PrimaryExpression	"""out = %d\\n"""		5213481	0					
ANR	5213573	Argument	rc		5213481	1					
ANR	5213574	Identifier	rc		5213481	0					
ANR	5213575	ExpressionStatement	r_regex_free ( & rx )	17:1:319:337	5213481	3	True				
ANR	5213576	CallExpression	r_regex_free ( & rx )		5213481	0					
ANR	5213577	Callee	r_regex_free		5213481	0					
ANR	5213578	Identifier	r_regex_free		5213481	0					
ANR	5213579	ArgumentList	& rx		5213481	1					
ANR	5213580	Argument	& rx		5213481	0					
ANR	5213581	UnaryOperationExpression	& rx		5213481	0					
ANR	5213582	UnaryOperator	&		5213481	0					
ANR	5213583	Identifier	rx		5213481	1					
ANR	5213584	ReturnStatement	return 0 ;	18:1:340:348	5213481	4	True				
ANR	5213585	PrimaryExpression	0		5213481	0					
ANR	5213586	ReturnType	int		5213481	1					
ANR	5213587	Identifier	_main		5213481	2					
ANR	5213588	ParameterList			5213481	3					
ANR	5213589	CFGEntryNode	ENTRY		5213481		True				
ANR	5213590	CFGExitNode	EXIT		5213481		True				
ANR	5213591	Symbol	rc		5213481						
ANR	5213592	Symbol	& rx		5213481						
ANR	5213593	Symbol	R_REGEX_NOSUB		5213481						
ANR	5213594	Symbol	rx		5213481						
ANR	5213595	Symbol	r_regex_exec		5213481						
ANR	5213596	Symbol	r_regex_comp		5213481						
ANR	5213597	Function	test_or	21:0:353:1099							
ANR	5213598	FunctionDef	test_or ()		5213597	0					
ANR	5213599	CompoundStatement		21:22:375:1099	5213597	0					
ANR	5213600	IdentifierDeclStatement	"RRegex * rx = r_regex_new ( ""(eax|ebx)"" , ""e"" ) ;"	22:1:378:421	5213597	0	True				
ANR	5213601	IdentifierDecl	"* rx = r_regex_new ( ""(eax|ebx)"" , ""e"" )"		5213597	0					
ANR	5213602	IdentifierDeclType	RRegex *		5213597	0					
ANR	5213603	Identifier	rx		5213597	1					
ANR	5213604	AssignmentExpression	"* rx = r_regex_new ( ""(eax|ebx)"" , ""e"" )"		5213597	2		=			
ANR	5213605	Identifier	rx		5213597	0					
ANR	5213606	CallExpression	"r_regex_new ( ""(eax|ebx)"" , ""e"" )"		5213597	1					
ANR	5213607	Callee	r_regex_new		5213597	0					
ANR	5213608	Identifier	r_regex_new		5213597	0					
ANR	5213609	ArgumentList	"""(eax|ebx)"""		5213597	1					
ANR	5213610	Argument	"""(eax|ebx)"""		5213597	0					
ANR	5213611	PrimaryExpression	"""(eax|ebx)"""		5213597	0					
ANR	5213612	Argument	"""e"""		5213597	1					
ANR	5213613	PrimaryExpression	"""e"""		5213597	0					
ANR	5213614	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" ) )"	23:1:424:508	5213597	1	True				
ANR	5213615	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" ) )"		5213597	0					
ANR	5213616	Callee	printf		5213597	0					
ANR	5213617	Identifier	printf		5213597	0					
ANR	5213618	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213619	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213620	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213621	Argument	"""mov eax"""		5213597	1					
ANR	5213622	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213623	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" )"		5213597	2					
ANR	5213624	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov eax"" )"		5213597	0					
ANR	5213625	Callee	r_regex_match		5213597	0					
ANR	5213626	Identifier	r_regex_match		5213597	0					
ANR	5213627	ArgumentList	"""(eax|ebx)"""		5213597	1					
ANR	5213628	Argument	"""(eax|ebx)"""		5213597	0					
ANR	5213629	PrimaryExpression	"""(eax|ebx)"""		5213597	0					
ANR	5213630	Argument	"""e"""		5213597	1					
ANR	5213631	PrimaryExpression	"""e"""		5213597	0					
ANR	5213632	Argument	"""mov eax"""		5213597	2					
ANR	5213633	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213634	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" ) )"	24:1:511:595	5213597	2	True				
ANR	5213635	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" ) )"		5213597	0					
ANR	5213636	Callee	printf		5213597	0					
ANR	5213637	Identifier	printf		5213597	0					
ANR	5213638	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213639	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213640	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213641	Argument	"""mov ebx"""		5213597	1					
ANR	5213642	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213643	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" )"		5213597	2					
ANR	5213644	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ebx"" )"		5213597	0					
ANR	5213645	Callee	r_regex_match		5213597	0					
ANR	5213646	Identifier	r_regex_match		5213597	0					
ANR	5213647	ArgumentList	"""(eax|ebx)"""		5213597	1					
ANR	5213648	Argument	"""(eax|ebx)"""		5213597	0					
ANR	5213649	PrimaryExpression	"""(eax|ebx)"""		5213597	0					
ANR	5213650	Argument	"""e"""		5213597	1					
ANR	5213651	PrimaryExpression	"""e"""		5213597	0					
ANR	5213652	Argument	"""mov ebx"""		5213597	2					
ANR	5213653	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213654	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" ) )"	25:1:598:682	5213597	3	True				
ANR	5213655	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" ) )"		5213597	0					
ANR	5213656	Callee	printf		5213597	0					
ANR	5213657	Identifier	printf		5213597	0					
ANR	5213658	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213659	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213660	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213661	Argument	"""mov eax"""		5213597	1					
ANR	5213662	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213663	Argument	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" )"		5213597	2					
ANR	5213664	CallExpression	"r_regex_match ( ""(eax|ebx)"" , ""e"" , ""mov ecx"" )"		5213597	0					
ANR	5213665	Callee	r_regex_match		5213597	0					
ANR	5213666	Identifier	r_regex_match		5213597	0					
ANR	5213667	ArgumentList	"""(eax|ebx)"""		5213597	1					
ANR	5213668	Argument	"""(eax|ebx)"""		5213597	0					
ANR	5213669	PrimaryExpression	"""(eax|ebx)"""		5213597	0					
ANR	5213670	Argument	"""e"""		5213597	1					
ANR	5213671	PrimaryExpression	"""e"""		5213597	0					
ANR	5213672	Argument	"""mov ecx"""		5213597	2					
ANR	5213673	PrimaryExpression	"""mov ecx"""		5213597	0					
ANR	5213674	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" ) )"	26:1:685:769	5213597	4	True				
ANR	5213675	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" ) )"		5213597	0					
ANR	5213676	Callee	printf		5213597	0					
ANR	5213677	Identifier	printf		5213597	0					
ANR	5213678	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213679	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213680	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213681	Argument	"""mov ebx"""		5213597	1					
ANR	5213682	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213683	Argument	"r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" )"		5213597	2					
ANR	5213684	CallExpression	"r_regex_match ( ""(eax|ecx)"" , ""e"" , ""mov ebx"" )"		5213597	0					
ANR	5213685	Callee	r_regex_match		5213597	0					
ANR	5213686	Identifier	r_regex_match		5213597	0					
ANR	5213687	ArgumentList	"""(eax|ecx)"""		5213597	1					
ANR	5213688	Argument	"""(eax|ecx)"""		5213597	0					
ANR	5213689	PrimaryExpression	"""(eax|ecx)"""		5213597	0					
ANR	5213690	Argument	"""e"""		5213597	1					
ANR	5213691	PrimaryExpression	"""e"""		5213597	0					
ANR	5213692	Argument	"""mov ebx"""		5213597	2					
ANR	5213693	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213694	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_check ( rx , ""mov eax"" ) )"	27:1:772:842	5213597	5	True				
ANR	5213695	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_check ( rx , ""mov eax"" ) )"		5213597	0					
ANR	5213696	Callee	printf		5213597	0					
ANR	5213697	Identifier	printf		5213597	0					
ANR	5213698	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213699	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213700	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213701	Argument	"""mov eax"""		5213597	1					
ANR	5213702	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213703	Argument	"r_regex_check ( rx , ""mov eax"" )"		5213597	2					
ANR	5213704	CallExpression	"r_regex_check ( rx , ""mov eax"" )"		5213597	0					
ANR	5213705	Callee	r_regex_check		5213597	0					
ANR	5213706	Identifier	r_regex_check		5213597	0					
ANR	5213707	ArgumentList	rx		5213597	1					
ANR	5213708	Argument	rx		5213597	0					
ANR	5213709	Identifier	rx		5213597	0					
ANR	5213710	Argument	"""mov eax"""		5213597	1					
ANR	5213711	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213712	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_check ( rx , ""mov ebx"" ) )"	28:1:845:915	5213597	6	True				
ANR	5213713	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_check ( rx , ""mov ebx"" ) )"		5213597	0					
ANR	5213714	Callee	printf		5213597	0					
ANR	5213715	Identifier	printf		5213597	0					
ANR	5213716	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213717	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213718	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213719	Argument	"""mov ebx"""		5213597	1					
ANR	5213720	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213721	Argument	"r_regex_check ( rx , ""mov ebx"" )"		5213597	2					
ANR	5213722	CallExpression	"r_regex_check ( rx , ""mov ebx"" )"		5213597	0					
ANR	5213723	Callee	r_regex_check		5213597	0					
ANR	5213724	Identifier	r_regex_check		5213597	0					
ANR	5213725	ArgumentList	rx		5213597	1					
ANR	5213726	Argument	rx		5213597	0					
ANR	5213727	Identifier	rx		5213597	0					
ANR	5213728	Argument	"""mov ebx"""		5213597	1					
ANR	5213729	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213730	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 ) )"	29:1:918:996	5213597	7	True				
ANR	5213731	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov eax"" , r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 ) )"		5213597	0					
ANR	5213732	Callee	printf		5213597	0					
ANR	5213733	Identifier	printf		5213597	0					
ANR	5213734	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213735	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213736	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213737	Argument	"""mov eax"""		5213597	1					
ANR	5213738	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213739	Argument	"r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 )"		5213597	2					
ANR	5213740	CallExpression	"r_regex_exec ( rx , ""mov eax"" , 0 , 0 , 1 )"		5213597	0					
ANR	5213741	Callee	r_regex_exec		5213597	0					
ANR	5213742	Identifier	r_regex_exec		5213597	0					
ANR	5213743	ArgumentList	rx		5213597	1					
ANR	5213744	Argument	rx		5213597	0					
ANR	5213745	Identifier	rx		5213597	0					
ANR	5213746	Argument	"""mov eax"""		5213597	1					
ANR	5213747	PrimaryExpression	"""mov eax"""		5213597	0					
ANR	5213748	Argument	0		5213597	2					
ANR	5213749	PrimaryExpression	0		5213597	0					
ANR	5213750	Argument	0		5213597	3					
ANR	5213751	PrimaryExpression	0		5213597	0					
ANR	5213752	Argument	1		5213597	4					
ANR	5213753	PrimaryExpression	1		5213597	0					
ANR	5213754	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 ) )"	30:1:999:1077	5213597	8	True				
ANR	5213755	CallExpression	"printf ( ""result (%s) = %d\\n"" , ""mov ebx"" , r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 ) )"		5213597	0					
ANR	5213756	Callee	printf		5213597	0					
ANR	5213757	Identifier	printf		5213597	0					
ANR	5213758	ArgumentList	"""result (%s) = %d\\n"""		5213597	1					
ANR	5213759	Argument	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213760	PrimaryExpression	"""result (%s) = %d\\n"""		5213597	0					
ANR	5213761	Argument	"""mov ebx"""		5213597	1					
ANR	5213762	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213763	Argument	"r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 )"		5213597	2					
ANR	5213764	CallExpression	"r_regex_exec ( rx , ""mov ebx"" , 0 , 0 , 1 )"		5213597	0					
ANR	5213765	Callee	r_regex_exec		5213597	0					
ANR	5213766	Identifier	r_regex_exec		5213597	0					
ANR	5213767	ArgumentList	rx		5213597	1					
ANR	5213768	Argument	rx		5213597	0					
ANR	5213769	Identifier	rx		5213597	0					
ANR	5213770	Argument	"""mov ebx"""		5213597	1					
ANR	5213771	PrimaryExpression	"""mov ebx"""		5213597	0					
ANR	5213772	Argument	0		5213597	2					
ANR	5213773	PrimaryExpression	0		5213597	0					
ANR	5213774	Argument	0		5213597	3					
ANR	5213775	PrimaryExpression	0		5213597	0					
ANR	5213776	Argument	1		5213597	4					
ANR	5213777	PrimaryExpression	1		5213597	0					
ANR	5213778	ExpressionStatement	r_regex_free ( rx )	31:1:1080:1097	5213597	9	True				
ANR	5213779	CallExpression	r_regex_free ( rx )		5213597	0					
ANR	5213780	Callee	r_regex_free		5213597	0					
ANR	5213781	Identifier	r_regex_free		5213597	0					
ANR	5213782	ArgumentList	rx		5213597	1					
ANR	5213783	Argument	rx		5213597	0					
ANR	5213784	Identifier	rx		5213597	0					
ANR	5213785	ReturnType	static void		5213597	1					
ANR	5213786	Identifier	test_or		5213597	2					
ANR	5213787	ParameterList			5213597	3					
ANR	5213788	CFGEntryNode	ENTRY		5213597		True				
ANR	5213789	CFGExitNode	EXIT		5213597		True				
ANR	5213790	Symbol	r_regex_new		5213597						
ANR	5213791	Symbol	r_regex_check		5213597						
ANR	5213792	Symbol	rx		5213597						
ANR	5213793	Symbol	r_regex_exec		5213597						
ANR	5213794	Symbol	r_regex_match		5213597						
ANR	5213795	Function	main	34:0:1102:1708							
ANR	5213796	FunctionDef	"main (int argc , char * * argv)"		5213795	0					
ANR	5213797	CompoundStatement		34:32:1134:1708	5213795	0					
ANR	5213798	IdentifierDeclStatement	"const char * needle = ""^hi"" ;"	35:1:1137:1163	5213795	0	True				
ANR	5213799	IdentifierDecl	"* needle = ""^hi"""		5213795	0					
ANR	5213800	IdentifierDeclType	const char *		5213795	0					
ANR	5213801	Identifier	needle		5213795	1					
ANR	5213802	AssignmentExpression	"* needle = ""^hi"""		5213795	2		=			
ANR	5213803	Identifier	needle		5213795	0					
ANR	5213804	PrimaryExpression	"""^hi"""		5213795	1					
ANR	5213805	IdentifierDeclStatement	"const char * haystack_1 = ""patata"" ;"	36:1:1166:1199	5213795	1	True				
ANR	5213806	IdentifierDecl	"* haystack_1 = ""patata"""		5213795	0					
ANR	5213807	IdentifierDeclType	const char *		5213795	0					
ANR	5213808	Identifier	haystack_1		5213795	1					
ANR	5213809	AssignmentExpression	"* haystack_1 = ""patata"""		5213795	2		=			
ANR	5213810	Identifier	haystack_1		5213795	0					
ANR	5213811	PrimaryExpression	"""patata"""		5213795	1					
ANR	5213812	IdentifierDeclStatement	"const char * haystack_2 = ""hillow"" ;"	37:1:1202:1235	5213795	2	True				
ANR	5213813	IdentifierDecl	"* haystack_2 = ""hillow"""		5213795	0					
ANR	5213814	IdentifierDeclType	const char *		5213795	0					
ANR	5213815	Identifier	haystack_2		5213795	1					
ANR	5213816	AssignmentExpression	"* haystack_2 = ""hillow"""		5213795	2		=			
ANR	5213817	Identifier	haystack_2		5213795	0					
ANR	5213818	PrimaryExpression	"""hillow"""		5213795	1					
ANR	5213819	IfStatement	if ( argc > 3 )		5213795	3					
ANR	5213820	Condition	argc > 3	38:5:1242:1247	5213795	0	True				
ANR	5213821	RelationalExpression	argc > 3		5213795	0		>			
ANR	5213822	Identifier	argc		5213795	0					
ANR	5213823	PrimaryExpression	3		5213795	1					
ANR	5213824	CompoundStatement		5:13:115:115	5213795	1					
ANR	5213825	ExpressionStatement	needle = argv [ 1 ]	39:2:1254:1270	5213795	0	True				
ANR	5213826	AssignmentExpression	needle = argv [ 1 ]		5213795	0		=			
ANR	5213827	Identifier	needle		5213795	0					
ANR	5213828	ArrayIndexing	argv [ 1 ]		5213795	1					
ANR	5213829	Identifier	argv		5213795	0					
ANR	5213830	PrimaryExpression	1		5213795	1					
ANR	5213831	ExpressionStatement	haystack_1 = argv [ 2 ]	40:2:1274:1294	5213795	1	True				
ANR	5213832	AssignmentExpression	haystack_1 = argv [ 2 ]		5213795	0		=			
ANR	5213833	Identifier	haystack_1		5213795	0					
ANR	5213834	ArrayIndexing	argv [ 2 ]		5213795	1					
ANR	5213835	Identifier	argv		5213795	0					
ANR	5213836	PrimaryExpression	2		5213795	1					
ANR	5213837	ExpressionStatement	haystack_2 = argv [ 3 ]	41:2:1298:1318	5213795	2	True				
ANR	5213838	AssignmentExpression	haystack_2 = argv [ 3 ]		5213795	0		=			
ANR	5213839	Identifier	haystack_2		5213795	0					
ANR	5213840	ArrayIndexing	argv [ 3 ]		5213795	1					
ANR	5213841	Identifier	argv		5213795	0					
ANR	5213842	PrimaryExpression	3		5213795	1					
ANR	5213843	ElseStatement	else		5213795	0					
ANR	5213844	ExpressionStatement	"printf ( ""Using default values\\n"" )"	42:8:1328:1361	5213795	0	True				
ANR	5213845	CallExpression	"printf ( ""Using default values\\n"" )"		5213795	0					
ANR	5213846	Callee	printf		5213795	0					
ANR	5213847	Identifier	printf		5213795	0					
ANR	5213848	ArgumentList	"""Using default values\\n"""		5213795	1					
ANR	5213849	Argument	"""Using default values\\n"""		5213795	0					
ANR	5213850	PrimaryExpression	"""Using default values\\n"""		5213795	0					
ANR	5213851	IdentifierDeclStatement	"RRegex * rx = r_regex_new ( needle , """" ) ;"	43:1:1364:1401	5213795	4	True				
ANR	5213852	IdentifierDecl	"* rx = r_regex_new ( needle , """" )"		5213795	0					
ANR	5213853	IdentifierDeclType	RRegex *		5213795	0					
ANR	5213854	Identifier	rx		5213795	1					
ANR	5213855	AssignmentExpression	"* rx = r_regex_new ( needle , """" )"		5213795	2		=			
ANR	5213856	Identifier	rx		5213795	0					
ANR	5213857	CallExpression	"r_regex_new ( needle , """" )"		5213795	1					
ANR	5213858	Callee	r_regex_new		5213795	0					
ANR	5213859	Identifier	r_regex_new		5213795	0					
ANR	5213860	ArgumentList	needle		5213795	1					
ANR	5213861	Argument	needle		5213795	0					
ANR	5213862	Identifier	needle		5213795	0					
ANR	5213863	Argument	""""""		5213795	1					
ANR	5213864	PrimaryExpression	""""""		5213795	0					
ANR	5213865	IfStatement	if ( rx )		5213795	5					
ANR	5213866	Condition	rx	44:5:1408:1409	5213795	0	True				
ANR	5213867	Identifier	rx		5213795	0					
ANR	5213868	CompoundStatement		12:2:281:329	5213795	1					
ANR	5213869	IdentifierDeclStatement	"int res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 ) ;"	45:2:1416:1464	5213795	0	True				
ANR	5213870	IdentifierDecl	"res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		5213795	0					
ANR	5213871	IdentifierDeclType	int		5213795	0					
ANR	5213872	Identifier	res		5213795	1					
ANR	5213873	AssignmentExpression	"res = r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		5213795	2		=			
ANR	5213874	Identifier	res		5213795	0					
ANR	5213875	CallExpression	"r_regex_exec ( rx , haystack_1 , 0 , 0 , 0 )"		5213795	1					
ANR	5213876	Callee	r_regex_exec		5213795	0					
ANR	5213877	Identifier	r_regex_exec		5213795	0					
ANR	5213878	ArgumentList	rx		5213795	1					
ANR	5213879	Argument	rx		5213795	0					
ANR	5213880	Identifier	rx		5213795	0					
ANR	5213881	Argument	haystack_1		5213795	1					
ANR	5213882	Identifier	haystack_1		5213795	0					
ANR	5213883	Argument	0		5213795	2					
ANR	5213884	PrimaryExpression	0		5213795	0					
ANR	5213885	Argument	0		5213795	3					
ANR	5213886	PrimaryExpression	0		5213795	0					
ANR	5213887	Argument	0		5213795	4					
ANR	5213888	PrimaryExpression	0		5213795	0					
ANR	5213889	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , haystack_1 , res )"	46:2:1468:1514	5213795	1	True				
ANR	5213890	CallExpression	"printf ( ""result (%s) = %d\\n"" , haystack_1 , res )"		5213795	0					
ANR	5213891	Callee	printf		5213795	0					
ANR	5213892	Identifier	printf		5213795	0					
ANR	5213893	ArgumentList	"""result (%s) = %d\\n"""		5213795	1					
ANR	5213894	Argument	"""result (%s) = %d\\n"""		5213795	0					
ANR	5213895	PrimaryExpression	"""result (%s) = %d\\n"""		5213795	0					
ANR	5213896	Argument	haystack_1		5213795	1					
ANR	5213897	Identifier	haystack_1		5213795	0					
ANR	5213898	Argument	res		5213795	2					
ANR	5213899	Identifier	res		5213795	0					
ANR	5213900	ExpressionStatement	"res = r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"	47:2:1518:1562	5213795	2	True				
ANR	5213901	AssignmentExpression	"res = r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"		5213795	0		=			
ANR	5213902	Identifier	res		5213795	0					
ANR	5213903	CallExpression	"r_regex_exec ( rx , haystack_2 , 0 , 0 , 0 )"		5213795	1					
ANR	5213904	Callee	r_regex_exec		5213795	0					
ANR	5213905	Identifier	r_regex_exec		5213795	0					
ANR	5213906	ArgumentList	rx		5213795	1					
ANR	5213907	Argument	rx		5213795	0					
ANR	5213908	Identifier	rx		5213795	0					
ANR	5213909	Argument	haystack_2		5213795	1					
ANR	5213910	Identifier	haystack_2		5213795	0					
ANR	5213911	Argument	0		5213795	2					
ANR	5213912	PrimaryExpression	0		5213795	0					
ANR	5213913	Argument	0		5213795	3					
ANR	5213914	PrimaryExpression	0		5213795	0					
ANR	5213915	Argument	0		5213795	4					
ANR	5213916	PrimaryExpression	0		5213795	0					
ANR	5213917	ExpressionStatement	"printf ( ""result (%s) = %d\\n"" , haystack_2 , res )"	48:2:1566:1612	5213795	3	True				
ANR	5213918	CallExpression	"printf ( ""result (%s) = %d\\n"" , haystack_2 , res )"		5213795	0					
ANR	5213919	Callee	printf		5213795	0					
ANR	5213920	Identifier	printf		5213795	0					
ANR	5213921	ArgumentList	"""result (%s) = %d\\n"""		5213795	1					
ANR	5213922	Argument	"""result (%s) = %d\\n"""		5213795	0					
ANR	5213923	PrimaryExpression	"""result (%s) = %d\\n"""		5213795	0					
ANR	5213924	Argument	haystack_2		5213795	1					
ANR	5213925	Identifier	haystack_2		5213795	0					
ANR	5213926	Argument	res		5213795	2					
ANR	5213927	Identifier	res		5213795	0					
ANR	5213928	ExpressionStatement	r_regex_free ( rx )	49:2:1616:1633	5213795	4	True				
ANR	5213929	CallExpression	r_regex_free ( rx )		5213795	0					
ANR	5213930	Callee	r_regex_free		5213795	0					
ANR	5213931	Identifier	r_regex_free		5213795	0					
ANR	5213932	ArgumentList	rx		5213795	1					
ANR	5213933	Argument	rx		5213795	0					
ANR	5213934	Identifier	rx		5213795	0					
ANR	5213935	ElseStatement	else		5213795	0					
ANR	5213936	ExpressionStatement	"printf ( ""oops, cannot compile regexp\\n"" )"	50:8:1643:1683	5213795	0	True				
ANR	5213937	CallExpression	"printf ( ""oops, cannot compile regexp\\n"" )"		5213795	0					
ANR	5213938	Callee	printf		5213795	0					
ANR	5213939	Identifier	printf		5213795	0					
ANR	5213940	ArgumentList	"""oops, cannot compile regexp\\n"""		5213795	1					
ANR	5213941	Argument	"""oops, cannot compile regexp\\n"""		5213795	0					
ANR	5213942	PrimaryExpression	"""oops, cannot compile regexp\\n"""		5213795	0					
ANR	5213943	ExpressionStatement	test_or ( )	51:1:1686:1695	5213795	6	True				
ANR	5213944	CallExpression	test_or ( )		5213795	0					
ANR	5213945	Callee	test_or		5213795	0					
ANR	5213946	Identifier	test_or		5213795	0					
ANR	5213947	ArgumentList			5213795	1					
ANR	5213948	ReturnStatement	return 0 ;	52:1:1698:1706	5213795	7	True				
ANR	5213949	PrimaryExpression	0		5213795	0					
ANR	5213950	ReturnType	int		5213795	1					
ANR	5213951	Identifier	main		5213795	2					
ANR	5213952	ParameterList	"int argc , char * * argv"		5213795	3					
ANR	5213953	Parameter	int argc	34:9:1111:1118	5213795	0	True				
ANR	5213954	ParameterType	int		5213795	0					
ANR	5213955	Identifier	argc		5213795	1					
ANR	5213956	Parameter	char * * argv	34:19:1121:1131	5213795	1	True				
ANR	5213957	ParameterType	char * *		5213795	0					
ANR	5213958	Identifier	argv		5213795	1					
ANR	5213959	CFGEntryNode	ENTRY		5213795		True				
ANR	5213960	CFGExitNode	EXIT		5213795		True				
ANR	5213961	Symbol	argc		5213795						
ANR	5213962	Symbol	r_regex_new		5213795						
ANR	5213963	Symbol	res		5213795						
ANR	5213964	Symbol	rx		5213795						
ANR	5213965	Symbol	* argv		5213795						
ANR	5213966	Symbol	r_regex_exec		5213795						
ANR	5213967	Symbol	needle		5213795						
ANR	5213968	Symbol	haystack_1		5213795						
ANR	5213969	Symbol	argv		5213795						
ANR	5213970	Symbol	haystack_2		5213795						
