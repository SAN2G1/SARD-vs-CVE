command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6118529	File	data/converged/CVE-2019-16718~_radare2/shlr_tcc_tccgen.c								
ANR	6118530	DeclStmt									
ANR	6118531	Decl							ST_DATA char	ST_DATA char * *	tcc_cb_ptr
ANR	6118532	DeclStmt									
ANR	6118533	Decl							ST_DATA int	ST_DATA int	rsym
ANR	6118534	Decl							ST_DATA int	ST_DATA int	anon_sym
ANR	6118535	Decl							ST_DATA int	ST_DATA int	ind
ANR	6118536	Decl							ST_DATA int	ST_DATA int	loc
ANR	6118537	DeclStmt									
ANR	6118538	Decl							ST_DATA Sym	ST_DATA Sym *	sym_free_first
ANR	6118539	DeclStmt									
ANR	6118540	Decl							ST_DATA void	ST_DATA void * *	sym_pools
ANR	6118541	DeclStmt									
ANR	6118542	Decl							ST_DATA int	ST_DATA int	nb_sym_pools
ANR	6118543	DeclStmt									
ANR	6118544	Decl							int	int	arraysize
ANR	6118545	DeclStmt									
ANR	6118546	Decl							const char	const char *	global_symname
ANR	6118547	DeclStmt									
ANR	6118548	Decl							const char	const char *	global_type
ANR	6118549	DeclStmt									
ANR	6118550	Decl							ST_DATA Sym	ST_DATA Sym *	global_stack
ANR	6118551	DeclStmt									
ANR	6118552	Decl							ST_DATA Sym	ST_DATA Sym *	local_stack
ANR	6118553	DeclStmt									
ANR	6118554	Decl							ST_DATA Sym	ST_DATA Sym *	scope_stack_bottom
ANR	6118555	DeclStmt									
ANR	6118556	Decl							ST_DATA Sym	ST_DATA Sym *	define_stack
ANR	6118557	DeclStmt									
ANR	6118558	Decl							ST_DATA Sym	ST_DATA Sym *	global_label_stack
ANR	6118559	DeclStmt									
ANR	6118560	Decl							ST_DATA Sym	ST_DATA Sym *	local_label_stack
ANR	6118561	DeclStmt									
ANR	6118562	Decl							ST_DATA int	ST_DATA int	vla_sp_loc_tmp
ANR	6118563	DeclStmt									
ANR	6118564	Decl							ST_DATA int	ST_DATA int	vla_sp_root_loc
ANR	6118565	DeclStmt									
ANR	6118566	Decl							ST_DATA int	ST_DATA int *	vla_sp_loc
ANR	6118567	DeclStmt									
ANR	6118568	Decl							ST_DATA int	ST_DATA int	vla_flags
ANR	6118569	DeclStmt									
ANR	6118570	Decl							ST_DATA SValue	ST_DATA SValue [ 1 + VSTACK_SIZE ]	__vstack
ANR	6118571	Decl							ST_DATA SValue	ST_DATA SValue *	vtop
ANR	6118572	DeclStmt									
ANR	6118573	Decl							ST_DATA int	ST_DATA int	const_wanted
ANR	6118574	DeclStmt									
ANR	6118575	Decl							ST_DATA int	ST_DATA int	nocode_wanted
ANR	6118576	DeclStmt									
ANR	6118577	Decl							ST_DATA int	ST_DATA int	global_expr
ANR	6118578	DeclStmt									
ANR	6118579	Decl							ST_DATA CType	ST_DATA CType	func_vt
ANR	6118580	DeclStmt									
ANR	6118581	Decl							ST_DATA int	ST_DATA int	func_vc
ANR	6118582	DeclStmt									
ANR	6118583	Decl							ST_DATA int	ST_DATA int	last_line_num
ANR	6118584	Decl							ST_DATA int	ST_DATA int	last_ind
ANR	6118585	Decl							ST_DATA int	ST_DATA int	func_ind
ANR	6118586	DeclStmt									
ANR	6118587	Decl							ST_DATA char	ST_DATA char *	funcname
ANR	6118588	DeclStmt									
ANR	6118589	Decl							ST_DATA char	ST_DATA char *	dirname
ANR	6118590	DeclStmt									
ANR	6118591	Decl							ST_DATA CType	ST_DATA CType	char_pointer_type
ANR	6118592	Decl							ST_DATA CType	ST_DATA CType	func_old_type
ANR	6118593	DeclStmt									
ANR	6118594	Decl							ST_DATA CType	ST_DATA CType	int8_type
ANR	6118595	Decl							ST_DATA CType	ST_DATA CType	int16_type
ANR	6118596	Decl							ST_DATA CType	ST_DATA CType	int32_type
ANR	6118597	Decl							ST_DATA CType	ST_DATA CType	int64_type
ANR	6118598	Decl							ST_DATA CType	ST_DATA CType	size_type
ANR	6118599	DeclStmt									
ANR	6118600	Decl							CType	CType * ( CType * type )	pointed_type
ANR	6118601	DeclStmt									
ANR	6118602	Decl							int	"int ( CType * type1 , CType * type2 )"	is_compatible_types
ANR	6118603	DeclStmt									
ANR	6118604	Decl							int	"int ( CType * type , AttributeDef * ad )"	parse_btype
ANR	6118605	DeclStmt									
ANR	6118606	Decl							void	"void ( CType * type , AttributeDef * ad , int * v , int td )"	type_decl
ANR	6118607	DeclStmt									
ANR	6118608	Decl							void	void ( CType * type )	parse_expr_type
ANR	6118609	DeclStmt									
ANR	6118610	Decl							void	"void ( CType * type , unsigned long c , int first , int size_only )"	decl_initializer
ANR	6118611	DeclStmt									
ANR	6118612	Decl							void	"void ( CType * type , AttributeDef * ad , int r , int has_init , int v , char * asm_label , int scope )"	decl_initializer_alloc
ANR	6118613	DeclStmt									
ANR	6118614	Decl							int	"int ( int l , int is_for_loop_init )"	decl0
ANR	6118615	DeclStmt									
ANR	6118616	Decl							void	void ( void )	expr_eq
ANR	6118617	DeclStmt									
ANR	6118618	Decl							void	void ( CType * type )	unary_type
ANR	6118619	DeclStmt									
ANR	6118620	Decl							int	"int ( CType * type1 , CType * type2 )"	is_compatible_parameter_types
ANR	6118621	DeclStmt									
ANR	6118622	Decl							void	void ( CType * type )	expr_type
ANR	6118623	Function	is_structured	88:0:3487:3599							
ANR	6118624	FunctionDef	is_structured (CType * t)		6118623	0					
ANR	6118625	CompoundStatement		88:37:3524:3599	6118623	0					
ANR	6118626	ReturnStatement	return ( t -> t & VT_BTYPE ) == VT_STRUCT || ( t -> t & VT_BTYPE ) == VT_UNION ;	89:1:3527:3597	6118623	0	True				
ANR	6118627	OrExpression	( t -> t & VT_BTYPE ) == VT_STRUCT || ( t -> t & VT_BTYPE ) == VT_UNION		6118623	0		||			
ANR	6118628	EqualityExpression	( t -> t & VT_BTYPE ) == VT_STRUCT		6118623	0		==			
ANR	6118629	BitAndExpression	t -> t & VT_BTYPE		6118623	0		&			
ANR	6118630	PtrMemberAccess	t -> t		6118623	0					
ANR	6118631	Identifier	t		6118623	0					
ANR	6118632	Identifier	t		6118623	1					
ANR	6118633	Identifier	VT_BTYPE		6118623	1					
ANR	6118634	Identifier	VT_STRUCT		6118623	1					
ANR	6118635	EqualityExpression	( t -> t & VT_BTYPE ) == VT_UNION		6118623	1		==			
ANR	6118636	BitAndExpression	t -> t & VT_BTYPE		6118623	0		&			
ANR	6118637	PtrMemberAccess	t -> t		6118623	0					
ANR	6118638	Identifier	t		6118623	0					
ANR	6118639	Identifier	t		6118623	1					
ANR	6118640	Identifier	VT_BTYPE		6118623	1					
ANR	6118641	Identifier	VT_UNION		6118623	1					
ANR	6118642	ReturnType	ST_INLN bool		6118623	1					
ANR	6118643	Identifier	is_structured		6118623	2					
ANR	6118644	ParameterList	CType * t		6118623	3					
ANR	6118645	Parameter	CType * t	88:27:3514:3521	6118623	0	True				
ANR	6118646	ParameterType	CType *		6118623	0					
ANR	6118647	Identifier	t		6118623	1					
ANR	6118648	CFGEntryNode	ENTRY		6118623		True				
ANR	6118649	CFGExitNode	EXIT		6118623		True				
ANR	6118650	Symbol	VT_UNION		6118623						
ANR	6118651	Symbol	t		6118623						
ANR	6118652	Symbol	t -> t		6118623						
ANR	6118653	Symbol	VT_BTYPE		6118623						
ANR	6118654	Symbol	* t		6118623						
ANR	6118655	Symbol	VT_STRUCT		6118623						
ANR	6118656	Function	is_struct	92:0:3602:3677							
ANR	6118657	FunctionDef	is_struct (CType * t)		6118656	0					
ANR	6118658	CompoundStatement		92:33:3635:3677	6118656	0					
ANR	6118659	ReturnStatement	return ( t -> t & VT_BTYPE ) == VT_STRUCT ;	93:1:3638:3675	6118656	0	True				
ANR	6118660	EqualityExpression	( t -> t & VT_BTYPE ) == VT_STRUCT		6118656	0		==			
ANR	6118661	BitAndExpression	t -> t & VT_BTYPE		6118656	0		&			
ANR	6118662	PtrMemberAccess	t -> t		6118656	0					
ANR	6118663	Identifier	t		6118656	0					
ANR	6118664	Identifier	t		6118656	1					
ANR	6118665	Identifier	VT_BTYPE		6118656	1					
ANR	6118666	Identifier	VT_STRUCT		6118656	1					
ANR	6118667	ReturnType	ST_INLN bool		6118656	1					
ANR	6118668	Identifier	is_struct		6118656	2					
ANR	6118669	ParameterList	CType * t		6118656	3					
ANR	6118670	Parameter	CType * t	92:23:3625:3632	6118656	0	True				
ANR	6118671	ParameterType	CType *		6118656	0					
ANR	6118672	Identifier	t		6118656	1					
ANR	6118673	CFGEntryNode	ENTRY		6118656		True				
ANR	6118674	CFGExitNode	EXIT		6118656		True				
ANR	6118675	Symbol	t		6118656						
ANR	6118676	Symbol	t -> t		6118656						
ANR	6118677	Symbol	VT_BTYPE		6118656						
ANR	6118678	Symbol	VT_STRUCT		6118656						
ANR	6118679	Symbol	* t		6118656						
ANR	6118680	Function	is_union	96:0:3680:3753							
ANR	6118681	FunctionDef	is_union (CType * t)		6118680	0					
ANR	6118682	CompoundStatement		96:32:3712:3753	6118680	0					
ANR	6118683	ReturnStatement	return ( t -> t & VT_BTYPE ) == VT_UNION ;	97:1:3715:3751	6118680	0	True				
ANR	6118684	EqualityExpression	( t -> t & VT_BTYPE ) == VT_UNION		6118680	0		==			
ANR	6118685	BitAndExpression	t -> t & VT_BTYPE		6118680	0		&			
ANR	6118686	PtrMemberAccess	t -> t		6118680	0					
ANR	6118687	Identifier	t		6118680	0					
ANR	6118688	Identifier	t		6118680	1					
ANR	6118689	Identifier	VT_BTYPE		6118680	1					
ANR	6118690	Identifier	VT_UNION		6118680	1					
ANR	6118691	ReturnType	ST_INLN bool		6118680	1					
ANR	6118692	Identifier	is_union		6118680	2					
ANR	6118693	ParameterList	CType * t		6118680	3					
ANR	6118694	Parameter	CType * t	96:22:3702:3709	6118680	0	True				
ANR	6118695	ParameterType	CType *		6118680	0					
ANR	6118696	Identifier	t		6118680	1					
ANR	6118697	CFGEntryNode	ENTRY		6118680		True				
ANR	6118698	CFGExitNode	EXIT		6118680		True				
ANR	6118699	Symbol	VT_UNION		6118680						
ANR	6118700	Symbol	t		6118680						
ANR	6118701	Symbol	t -> t		6118680						
ANR	6118702	Symbol	VT_BTYPE		6118680						
ANR	6118703	Symbol	* t		6118680						
ANR	6118704	Function	is_enum	100:0:3756:3827							
ANR	6118705	FunctionDef	is_enum (CType * t)		6118704	0					
ANR	6118706	CompoundStatement		100:31:3787:3827	6118704	0					
ANR	6118707	ReturnStatement	return ( t -> t & VT_BTYPE ) == VT_ENUM ;	101:1:3790:3825	6118704	0	True				
ANR	6118708	EqualityExpression	( t -> t & VT_BTYPE ) == VT_ENUM		6118704	0		==			
ANR	6118709	BitAndExpression	t -> t & VT_BTYPE		6118704	0		&			
ANR	6118710	PtrMemberAccess	t -> t		6118704	0					
ANR	6118711	Identifier	t		6118704	0					
ANR	6118712	Identifier	t		6118704	1					
ANR	6118713	Identifier	VT_BTYPE		6118704	1					
ANR	6118714	Identifier	VT_ENUM		6118704	1					
ANR	6118715	ReturnType	ST_INLN bool		6118704	1					
ANR	6118716	Identifier	is_enum		6118704	2					
ANR	6118717	ParameterList	CType * t		6118704	3					
ANR	6118718	Parameter	CType * t	100:21:3777:3784	6118704	0	True				
ANR	6118719	ParameterType	CType *		6118704	0					
ANR	6118720	Identifier	t		6118704	1					
ANR	6118721	CFGEntryNode	ENTRY		6118704		True				
ANR	6118722	CFGExitNode	EXIT		6118704		True				
ANR	6118723	Symbol	t		6118704						
ANR	6118724	Symbol	VT_ENUM		6118704						
ANR	6118725	Symbol	t -> t		6118704						
ANR	6118726	Symbol	VT_BTYPE		6118704						
ANR	6118727	Symbol	* t		6118704						
ANR	6118728	Function	is_float	104:0:3830:3972							
ANR	6118729	FunctionDef	is_float (int t)		6118728	0					
ANR	6118730	CompoundStatement		104:29:3859:3972	6118728	0					
ANR	6118731	IdentifierDeclStatement	int bt ;	105:1:3862:3868	6118728	0	True				
ANR	6118732	IdentifierDecl	bt		6118728	0					
ANR	6118733	IdentifierDeclType	int		6118728	0					
ANR	6118734	Identifier	bt		6118728	1					
ANR	6118735	ExpressionStatement	bt = t & VT_BTYPE	106:1:3871:3888	6118728	1	True				
ANR	6118736	AssignmentExpression	bt = t & VT_BTYPE		6118728	0		=			
ANR	6118737	Identifier	bt		6118728	0					
ANR	6118738	BitAndExpression	t & VT_BTYPE		6118728	1		&			
ANR	6118739	Identifier	t		6118728	0					
ANR	6118740	Identifier	VT_BTYPE		6118728	1					
ANR	6118741	ReturnStatement	return bt == VT_LDOUBLE || bt == VT_DOUBLE || bt == VT_FLOAT || bt == VT_QFLOAT ;	107:1:3891:3970	6118728	2	True				
ANR	6118742	OrExpression	bt == VT_LDOUBLE || bt == VT_DOUBLE || bt == VT_FLOAT || bt == VT_QFLOAT		6118728	0		||			
ANR	6118743	EqualityExpression	bt == VT_LDOUBLE		6118728	0		==			
ANR	6118744	Identifier	bt		6118728	0					
ANR	6118745	Identifier	VT_LDOUBLE		6118728	1					
ANR	6118746	OrExpression	bt == VT_DOUBLE || bt == VT_FLOAT || bt == VT_QFLOAT		6118728	1		||			
ANR	6118747	EqualityExpression	bt == VT_DOUBLE		6118728	0		==			
ANR	6118748	Identifier	bt		6118728	0					
ANR	6118749	Identifier	VT_DOUBLE		6118728	1					
ANR	6118750	OrExpression	bt == VT_FLOAT || bt == VT_QFLOAT		6118728	1		||			
ANR	6118751	EqualityExpression	bt == VT_FLOAT		6118728	0		==			
ANR	6118752	Identifier	bt		6118728	0					
ANR	6118753	Identifier	VT_FLOAT		6118728	1					
ANR	6118754	EqualityExpression	bt == VT_QFLOAT		6118728	1		==			
ANR	6118755	Identifier	bt		6118728	0					
ANR	6118756	Identifier	VT_QFLOAT		6118728	1					
ANR	6118757	ReturnType	ST_INLN bool		6118728	1					
ANR	6118758	Identifier	is_float		6118728	2					
ANR	6118759	ParameterList	int t		6118728	3					
ANR	6118760	Parameter	int t	104:22:3852:3856	6118728	0	True				
ANR	6118761	ParameterType	int		6118728	0					
ANR	6118762	Identifier	t		6118728	1					
ANR	6118763	CFGEntryNode	ENTRY		6118728		True				
ANR	6118764	CFGExitNode	EXIT		6118728		True				
ANR	6118765	Symbol	VT_FLOAT		6118728						
ANR	6118766	Symbol	bt		6118728						
ANR	6118767	Symbol	t		6118728						
ANR	6118768	Symbol	VT_LDOUBLE		6118728						
ANR	6118769	Symbol	VT_DOUBLE		6118728						
ANR	6118770	Symbol	VT_QFLOAT		6118728						
ANR	6118771	Symbol	VT_BTYPE		6118728						
ANR	6118772	Function	not_structured	110:0:3975:4088							
ANR	6118773	FunctionDef	not_structured (CType * t)		6118772	0					
ANR	6118774	CompoundStatement		110:38:4013:4088	6118772	0					
ANR	6118775	ReturnStatement	return ( t -> t & VT_BTYPE ) != VT_STRUCT && ( t -> t & VT_BTYPE ) != VT_UNION ;	111:1:4016:4086	6118772	0	True				
ANR	6118776	AndExpression	( t -> t & VT_BTYPE ) != VT_STRUCT && ( t -> t & VT_BTYPE ) != VT_UNION		6118772	0		&&			
ANR	6118777	EqualityExpression	( t -> t & VT_BTYPE ) != VT_STRUCT		6118772	0		!=			
ANR	6118778	BitAndExpression	t -> t & VT_BTYPE		6118772	0		&			
ANR	6118779	PtrMemberAccess	t -> t		6118772	0					
ANR	6118780	Identifier	t		6118772	0					
ANR	6118781	Identifier	t		6118772	1					
ANR	6118782	Identifier	VT_BTYPE		6118772	1					
ANR	6118783	Identifier	VT_STRUCT		6118772	1					
ANR	6118784	EqualityExpression	( t -> t & VT_BTYPE ) != VT_UNION		6118772	1		!=			
ANR	6118785	BitAndExpression	t -> t & VT_BTYPE		6118772	0		&			
ANR	6118786	PtrMemberAccess	t -> t		6118772	0					
ANR	6118787	Identifier	t		6118772	0					
ANR	6118788	Identifier	t		6118772	1					
ANR	6118789	Identifier	VT_BTYPE		6118772	1					
ANR	6118790	Identifier	VT_UNION		6118772	1					
ANR	6118791	ReturnType	ST_INLN bool		6118772	1					
ANR	6118792	Identifier	not_structured		6118772	2					
ANR	6118793	ParameterList	CType * t		6118772	3					
ANR	6118794	Parameter	CType * t	110:28:4003:4010	6118772	0	True				
ANR	6118795	ParameterType	CType *		6118772	0					
ANR	6118796	Identifier	t		6118772	1					
ANR	6118797	CFGEntryNode	ENTRY		6118772		True				
ANR	6118798	CFGExitNode	EXIT		6118772		True				
ANR	6118799	Symbol	VT_UNION		6118772						
ANR	6118800	Symbol	t		6118772						
ANR	6118801	Symbol	t -> t		6118772						
ANR	6118802	Symbol	VT_BTYPE		6118772						
ANR	6118803	Symbol	* t		6118772						
ANR	6118804	Symbol	VT_STRUCT		6118772						
ANR	6118805	Function	ieee_finite	118:0:4301:4413							
ANR	6118806	FunctionDef	ieee_finite (double d)		6118805	0					
ANR	6118807	CompoundStatement		118:34:4335:4413	6118805	0					
ANR	6118808	IdentifierDeclStatement	int * p = ( int * ) & d ;	119:1:4338:4357	6118805	0	True				
ANR	6118809	IdentifierDecl	* p = ( int * ) & d		6118805	0					
ANR	6118810	IdentifierDeclType	int *		6118805	0					
ANR	6118811	Identifier	p		6118805	1					
ANR	6118812	AssignmentExpression	* p = ( int * ) & d		6118805	2		=			
ANR	6118813	Identifier	p		6118805	0					
ANR	6118814	CastExpression	( int * ) & d		6118805	1					
ANR	6118815	CastTarget	int *		6118805	0					
ANR	6118816	UnaryOperationExpression	& d		6118805	1					
ANR	6118817	UnaryOperator	&		6118805	0					
ANR	6118818	Identifier	d		6118805	1					
ANR	6118819	ReturnStatement	return ( ( unsigned ) ( ( p [ 1 ] | 0x800fffff ) + 1 ) ) >> 31 ;	120:1:4360:4411	6118805	1	True				
ANR	6118820	ShiftExpression	( ( unsigned ) ( ( p [ 1 ] | 0x800fffff ) + 1 ) ) >> 31		6118805	0		>>			
ANR	6118821	CastExpression	( unsigned ) ( ( p [ 1 ] | 0x800fffff ) + 1 )		6118805	0					
ANR	6118822	CastTarget	unsigned		6118805	0					
ANR	6118823	AdditiveExpression	( p [ 1 ] | 0x800fffff ) + 1		6118805	1		+			
ANR	6118824	InclusiveOrExpression	p [ 1 ] | 0x800fffff		6118805	0		|			
ANR	6118825	ArrayIndexing	p [ 1 ]		6118805	0					
ANR	6118826	Identifier	p		6118805	0					
ANR	6118827	PrimaryExpression	1		6118805	1					
ANR	6118828	PrimaryExpression	0x800fffff		6118805	1					
ANR	6118829	PrimaryExpression	1		6118805	1					
ANR	6118830	PrimaryExpression	31		6118805	1					
ANR	6118831	ReturnType	ST_FUNC int		6118805	1					
ANR	6118832	Identifier	ieee_finite		6118805	2					
ANR	6118833	ParameterList	double d		6118805	3					
ANR	6118834	Parameter	double d	118:24:4325:4332	6118805	0	True				
ANR	6118835	ParameterType	double		6118805	0					
ANR	6118836	Identifier	d		6118805	1					
ANR	6118837	CFGEntryNode	ENTRY		6118805		True				
ANR	6118838	CFGExitNode	EXIT		6118805		True				
ANR	6118839	Symbol	p		6118805						
ANR	6118840	Symbol	d		6118805						
ANR	6118841	Symbol	& d		6118805						
ANR	6118842	Symbol	* p		6118805						
ANR	6118843	Function	test_lvalue	123:0:4416:4502							
ANR	6118844	FunctionDef	test_lvalue ()		6118843	0					
ANR	6118845	CompoundStatement		123:31:4447:4502	6118843	0					
ANR	6118846	IfStatement	if ( ! ( vtop -> r & VT_LVAL ) )		6118843	0					
ANR	6118847	Condition	! ( vtop -> r & VT_LVAL )	124:5:4454:4473	6118843	0	True				
ANR	6118848	UnaryOperationExpression	! ( vtop -> r & VT_LVAL )		6118843	0					
ANR	6118849	UnaryOperator	!		6118843	0					
ANR	6118850	BitAndExpression	vtop -> r & VT_LVAL		6118843	1		&			
ANR	6118851	PtrMemberAccess	vtop -> r		6118843	0					
ANR	6118852	Identifier	vtop		6118843	0					
ANR	6118853	Identifier	r		6118843	1					
ANR	6118854	Identifier	VT_LVAL		6118843	1					
ANR	6118855	CompoundStatement		2:27:28:28	6118843	1					
ANR	6118856	ExpressionStatement	"expect ( ""lvalue"" )"	125:2:4480:4497	6118843	0	True				
ANR	6118857	CallExpression	"expect ( ""lvalue"" )"		6118843	0					
ANR	6118858	Callee	expect		6118843	0					
ANR	6118859	Identifier	expect		6118843	0					
ANR	6118860	ArgumentList	"""lvalue"""		6118843	1					
ANR	6118861	Argument	"""lvalue"""		6118843	0					
ANR	6118862	PrimaryExpression	"""lvalue"""		6118843	0					
ANR	6118863	ReturnType	ST_FUNC void		6118843	1					
ANR	6118864	Identifier	test_lvalue		6118843	2					
ANR	6118865	ParameterList			6118843	3					
ANR	6118866	CFGEntryNode	ENTRY		6118843		True				
ANR	6118867	CFGExitNode	EXIT		6118843		True				
ANR	6118868	Symbol	* vtop		6118843						
ANR	6118869	Symbol	vtop		6118843						
ANR	6118870	Symbol	vtop -> r		6118843						
ANR	6118871	Symbol	VT_LVAL		6118843						
ANR	6118872	Function	__sym_malloc	131:0:4608:5040							
ANR	6118873	FunctionDef	__sym_malloc ()		6118872	0					
ANR	6118874	CompoundStatement		131:31:4639:5040	6118872	0					
ANR	6118875	IdentifierDeclStatement	"Sym * sym_pool , * sym , * last_sym ;"	132:1:4642:4672	6118872	0	True				
ANR	6118876	IdentifierDecl	* sym_pool		6118872	0					
ANR	6118877	IdentifierDeclType	Sym *		6118872	0					
ANR	6118878	Identifier	sym_pool		6118872	1					
ANR	6118879	IdentifierDecl	* sym		6118872	1					
ANR	6118880	IdentifierDeclType	Sym *		6118872	0					
ANR	6118881	Identifier	sym		6118872	1					
ANR	6118882	IdentifierDecl	* last_sym		6118872	2					
ANR	6118883	IdentifierDeclType	Sym *		6118872	0					
ANR	6118884	Identifier	last_sym		6118872	1					
ANR	6118885	IdentifierDeclStatement	int i ;	133:1:4675:4680	6118872	1	True				
ANR	6118886	IdentifierDecl	i		6118872	0					
ANR	6118887	IdentifierDeclType	int		6118872	0					
ANR	6118888	Identifier	i		6118872	1					
ANR	6118889	IdentifierDeclStatement	int sym_pool_size = SYM_POOL_NB * sizeof ( Sym ) ;	134:1:4683:4728	6118872	2	True				
ANR	6118890	IdentifierDecl	sym_pool_size = SYM_POOL_NB * sizeof ( Sym )		6118872	0					
ANR	6118891	IdentifierDeclType	int		6118872	0					
ANR	6118892	Identifier	sym_pool_size		6118872	1					
ANR	6118893	AssignmentExpression	sym_pool_size = SYM_POOL_NB * sizeof ( Sym )		6118872	2		=			
ANR	6118894	Identifier	sym_pool_size		6118872	0					
ANR	6118895	MultiplicativeExpression	SYM_POOL_NB * sizeof ( Sym )		6118872	1		*			
ANR	6118896	Identifier	SYM_POOL_NB		6118872	0					
ANR	6118897	SizeofExpression	sizeof ( Sym )		6118872	1					
ANR	6118898	Sizeof	sizeof		6118872	0					
ANR	6118899	SizeofOperand	Sym		6118872	1					
ANR	6118900	ExpressionStatement	sym_pool = malloc ( sym_pool_size )	135:1:4731:4764	6118872	3	True				
ANR	6118901	AssignmentExpression	sym_pool = malloc ( sym_pool_size )		6118872	0		=			
ANR	6118902	Identifier	sym_pool		6118872	0					
ANR	6118903	CallExpression	malloc ( sym_pool_size )		6118872	1					
ANR	6118904	Callee	malloc		6118872	0					
ANR	6118905	Identifier	malloc		6118872	0					
ANR	6118906	ArgumentList	sym_pool_size		6118872	1					
ANR	6118907	Argument	sym_pool_size		6118872	0					
ANR	6118908	Identifier	sym_pool_size		6118872	0					
ANR	6118909	ExpressionStatement	"memset ( sym_pool , 0 , sym_pool_size )"	136:1:4767:4802	6118872	4	True				
ANR	6118910	CallExpression	"memset ( sym_pool , 0 , sym_pool_size )"		6118872	0					
ANR	6118911	Callee	memset		6118872	0					
ANR	6118912	Identifier	memset		6118872	0					
ANR	6118913	ArgumentList	sym_pool		6118872	1					
ANR	6118914	Argument	sym_pool		6118872	0					
ANR	6118915	Identifier	sym_pool		6118872	0					
ANR	6118916	Argument	0		6118872	1					
ANR	6118917	PrimaryExpression	0		6118872	0					
ANR	6118918	Argument	sym_pool_size		6118872	2					
ANR	6118919	Identifier	sym_pool_size		6118872	0					
ANR	6118920	ExpressionStatement	"dynarray_add ( & sym_pools , & nb_sym_pools , sym_pool )"	137:1:4805:4855	6118872	5	True				
ANR	6118921	CallExpression	"dynarray_add ( & sym_pools , & nb_sym_pools , sym_pool )"		6118872	0					
ANR	6118922	Callee	dynarray_add		6118872	0					
ANR	6118923	Identifier	dynarray_add		6118872	0					
ANR	6118924	ArgumentList	& sym_pools		6118872	1					
ANR	6118925	Argument	& sym_pools		6118872	0					
ANR	6118926	UnaryOperationExpression	& sym_pools		6118872	0					
ANR	6118927	UnaryOperator	&		6118872	0					
ANR	6118928	Identifier	sym_pools		6118872	1					
ANR	6118929	Argument	& nb_sym_pools		6118872	1					
ANR	6118930	UnaryOperationExpression	& nb_sym_pools		6118872	0					
ANR	6118931	UnaryOperator	&		6118872	0					
ANR	6118932	Identifier	nb_sym_pools		6118872	1					
ANR	6118933	Argument	sym_pool		6118872	2					
ANR	6118934	Identifier	sym_pool		6118872	0					
ANR	6118935	ExpressionStatement	last_sym = sym_free_first	139:1:4859:4884	6118872	6	True				
ANR	6118936	AssignmentExpression	last_sym = sym_free_first		6118872	0		=			
ANR	6118937	Identifier	last_sym		6118872	0					
ANR	6118938	Identifier	sym_free_first		6118872	1					
ANR	6118939	ExpressionStatement	sym = sym_pool	140:1:4887:4901	6118872	7	True				
ANR	6118940	AssignmentExpression	sym = sym_pool		6118872	0		=			
ANR	6118941	Identifier	sym		6118872	0					
ANR	6118942	Identifier	sym_pool		6118872	1					
ANR	6118943	ForStatement	for ( i = 0 ; i < SYM_POOL_NB ; i ++ )		6118872	8					
ANR	6118944	ForInit	i = 0 ;	141:6:4909:4914	6118872	0	True				
ANR	6118945	AssignmentExpression	i = 0		6118872	0		=			
ANR	6118946	Identifier	i		6118872	0					
ANR	6118947	PrimaryExpression	0		6118872	1					
ANR	6118948	Condition	i < SYM_POOL_NB	141:13:4916:4930	6118872	1	True				
ANR	6118949	RelationalExpression	i < SYM_POOL_NB		6118872	0		<			
ANR	6118950	Identifier	i		6118872	0					
ANR	6118951	Identifier	SYM_POOL_NB		6118872	1					
ANR	6118952	PostIncDecOperationExpression	i ++	141:30:4933:4935	6118872	2	True				
ANR	6118953	Identifier	i		6118872	0					
ANR	6118954	IncDec	++		6118872	1					
ANR	6118955	CompoundStatement		11:35:298:298	6118872	3					
ANR	6118956	ExpressionStatement	sym -> next = last_sym	142:2:4942:4962	6118872	0	True				
ANR	6118957	AssignmentExpression	sym -> next = last_sym		6118872	0		=			
ANR	6118958	PtrMemberAccess	sym -> next		6118872	0					
ANR	6118959	Identifier	sym		6118872	0					
ANR	6118960	Identifier	next		6118872	1					
ANR	6118961	Identifier	last_sym		6118872	1					
ANR	6118962	ExpressionStatement	last_sym = sym	143:2:4966:4980	6118872	1	True				
ANR	6118963	AssignmentExpression	last_sym = sym		6118872	0		=			
ANR	6118964	Identifier	last_sym		6118872	0					
ANR	6118965	Identifier	sym		6118872	1					
ANR	6118966	ExpressionStatement	sym ++	144:2:4984:4989	6118872	2	True				
ANR	6118967	PostIncDecOperationExpression	sym ++		6118872	0					
ANR	6118968	Identifier	sym		6118872	0					
ANR	6118969	IncDec	++		6118872	1					
ANR	6118970	ExpressionStatement	sym_free_first = last_sym	146:1:4995:5020	6118872	9	True				
ANR	6118971	AssignmentExpression	sym_free_first = last_sym		6118872	0		=			
ANR	6118972	Identifier	sym_free_first		6118872	0					
ANR	6118973	Identifier	last_sym		6118872	1					
ANR	6118974	ReturnStatement	return last_sym ;	147:1:5023:5038	6118872	10	True				
ANR	6118975	Identifier	last_sym		6118872	0					
ANR	6118976	ReturnType	static Sym *		6118872	1					
ANR	6118977	Identifier	__sym_malloc		6118872	2					
ANR	6118978	ParameterList			6118872	3					
ANR	6118979	CFGEntryNode	ENTRY		6118872		True				
ANR	6118980	CFGExitNode	EXIT		6118872		True				
ANR	6118981	Symbol	sym_free_first		6118872						
ANR	6118982	Symbol	malloc		6118872						
ANR	6118983	Symbol	* sym		6118872						
ANR	6118984	Symbol	& nb_sym_pools		6118872						
ANR	6118985	Symbol	last_sym		6118872						
ANR	6118986	Symbol	sym		6118872						
ANR	6118987	Symbol	i		6118872						
ANR	6118988	Symbol	sym_pool_size		6118872						
ANR	6118989	Symbol	& sym_pools		6118872						
ANR	6118990	Symbol	sym_pool		6118872						
ANR	6118991	Symbol	SYM_POOL_NB		6118872						
ANR	6118992	Symbol	sym -> next		6118872						
ANR	6118993	Function	sym_malloc	150:0:5043:5198							
ANR	6118994	FunctionDef	sym_malloc ()		6118993	0					
ANR	6118995	CompoundStatement		150:36:5079:5198	6118993	0					
ANR	6118996	IdentifierDeclStatement	Sym * sym ;	151:1:5082:5090	6118993	0	True				
ANR	6118997	IdentifierDecl	* sym		6118993	0					
ANR	6118998	IdentifierDeclType	Sym *		6118993	0					
ANR	6118999	Identifier	sym		6118993	1					
ANR	6119000	ExpressionStatement	sym = sym_free_first	152:1:5093:5113	6118993	1	True				
ANR	6119001	AssignmentExpression	sym = sym_free_first		6118993	0		=			
ANR	6119002	Identifier	sym		6118993	0					
ANR	6119003	Identifier	sym_free_first		6118993	1					
ANR	6119004	IfStatement	if ( ! sym )		6118993	2					
ANR	6119005	Condition	! sym	153:5:5120:5123	6118993	0	True				
ANR	6119006	UnaryOperationExpression	! sym		6118993	0					
ANR	6119007	UnaryOperator	!		6118993	0					
ANR	6119008	Identifier	sym		6118993	1					
ANR	6119009	CompoundStatement		4:11:46:46	6118993	1					
ANR	6119010	ExpressionStatement	sym = __sym_malloc ( )	154:2:5130:5151	6118993	0	True				
ANR	6119011	AssignmentExpression	sym = __sym_malloc ( )		6118993	0		=			
ANR	6119012	Identifier	sym		6118993	0					
ANR	6119013	CallExpression	__sym_malloc ( )		6118993	1					
ANR	6119014	Callee	__sym_malloc		6118993	0					
ANR	6119015	Identifier	__sym_malloc		6118993	0					
ANR	6119016	ArgumentList			6118993	1					
ANR	6119017	ExpressionStatement	sym_free_first = sym -> next	156:1:5157:5183	6118993	3	True				
ANR	6119018	AssignmentExpression	sym_free_first = sym -> next		6118993	0		=			
ANR	6119019	Identifier	sym_free_first		6118993	0					
ANR	6119020	PtrMemberAccess	sym -> next		6118993	1					
ANR	6119021	Identifier	sym		6118993	0					
ANR	6119022	Identifier	next		6118993	1					
ANR	6119023	ReturnStatement	return sym ;	157:1:5186:5196	6118993	4	True				
ANR	6119024	Identifier	sym		6118993	0					
ANR	6119025	ReturnType	static inline Sym *		6118993	1					
ANR	6119026	Identifier	sym_malloc		6118993	2					
ANR	6119027	ParameterList			6118993	3					
ANR	6119028	CFGEntryNode	ENTRY		6118993		True				
ANR	6119029	CFGExitNode	EXIT		6118993		True				
ANR	6119030	Symbol	sym_free_first		6118993						
ANR	6119031	Symbol	* sym		6118993						
ANR	6119032	Symbol	sym		6118993						
ANR	6119033	Symbol	__sym_malloc		6118993						
ANR	6119034	Symbol	sym -> next		6118993						
ANR	6119035	Function	sym_free	160:0:5201:5311							
ANR	6119036	FunctionDef	sym_free (Sym * sym)		6119035	0					
ANR	6119037	CompoundStatement		160:32:5233:5311	6119035	0					
ANR	6119038	ExpressionStatement	sym -> next = sym_free_first	161:1:5236:5262	6119035	0	True				
ANR	6119039	AssignmentExpression	sym -> next = sym_free_first		6119035	0		=			
ANR	6119040	PtrMemberAccess	sym -> next		6119035	0					
ANR	6119041	Identifier	sym		6119035	0					
ANR	6119042	Identifier	next		6119035	1					
ANR	6119043	Identifier	sym_free_first		6119035	1					
ANR	6119044	ExpressionStatement	free ( sym -> asm_label )	162:1:5265:5286	6119035	1	True				
ANR	6119045	CallExpression	free ( sym -> asm_label )		6119035	0					
ANR	6119046	Callee	free		6119035	0					
ANR	6119047	Identifier	free		6119035	0					
ANR	6119048	ArgumentList	sym -> asm_label		6119035	1					
ANR	6119049	Argument	sym -> asm_label		6119035	0					
ANR	6119050	PtrMemberAccess	sym -> asm_label		6119035	0					
ANR	6119051	Identifier	sym		6119035	0					
ANR	6119052	Identifier	asm_label		6119035	1					
ANR	6119053	ExpressionStatement	sym_free_first = sym	163:1:5289:5309	6119035	2	True				
ANR	6119054	AssignmentExpression	sym_free_first = sym		6119035	0		=			
ANR	6119055	Identifier	sym_free_first		6119035	0					
ANR	6119056	Identifier	sym		6119035	1					
ANR	6119057	ReturnType	ST_INLN void		6119035	1					
ANR	6119058	Identifier	sym_free		6119035	2					
ANR	6119059	ParameterList	Sym * sym		6119035	3					
ANR	6119060	Parameter	Sym * sym	160:22:5223:5230	6119035	0	True				
ANR	6119061	ParameterType	Sym *		6119035	0					
ANR	6119062	Identifier	sym		6119035	1					
ANR	6119063	CFGEntryNode	ENTRY		6119035		True				
ANR	6119064	CFGExitNode	EXIT		6119035		True				
ANR	6119065	Symbol	sym_free_first		6119035						
ANR	6119066	Symbol	* sym		6119035						
ANR	6119067	Symbol	sym -> asm_label		6119035						
ANR	6119068	Symbol	sym		6119035						
ANR	6119069	Symbol	sym -> next		6119035						
ANR	6119070	Function	sym_push2	167:0:5342:5992							
ANR	6119071	FunctionDef	"sym_push2 (Sym * * ps , int v , int t , long long c)"		6119070	0					
ANR	6119072	CompoundStatement		167:60:5402:5992	6119070	0					
ANR	6119073	IdentifierDeclStatement	Sym * s ;	168:1:5405:5411	6119070	0	True				
ANR	6119074	IdentifierDecl	* s		6119070	0					
ANR	6119075	IdentifierDeclType	Sym *		6119070	0					
ANR	6119076	Identifier	s		6119070	1					
ANR	6119077	IfStatement	if ( ps == & local_stack )		6119070	1					
ANR	6119078	Condition	ps == & local_stack	169:5:5418:5435	6119070	0	True				
ANR	6119079	EqualityExpression	ps == & local_stack		6119070	0		==			
ANR	6119080	Identifier	ps		6119070	0					
ANR	6119081	UnaryOperationExpression	& local_stack		6119070	1					
ANR	6119082	UnaryOperator	&		6119070	0					
ANR	6119083	Identifier	local_stack		6119070	1					
ANR	6119084	CompoundStatement		3:25:35:35	6119070	1					
ANR	6119085	ForStatement	for ( s = * ps ; s && s != scope_stack_bottom ; s = s -> prev )		6119070	0					
ANR	6119086	ForInit	s = * ps ;	170:7:5447:5454	6119070	0	True				
ANR	6119087	AssignmentExpression	s = * ps		6119070	0		=			
ANR	6119088	Identifier	s		6119070	0					
ANR	6119089	UnaryOperationExpression	* ps		6119070	1					
ANR	6119090	UnaryOperator	*		6119070	0					
ANR	6119091	Identifier	ps		6119070	1					
ANR	6119092	Condition	s && s != scope_stack_bottom	170:16:5456:5483	6119070	1	True				
ANR	6119093	AndExpression	s && s != scope_stack_bottom		6119070	0		&&			
ANR	6119094	Identifier	s		6119070	0					
ANR	6119095	EqualityExpression	s != scope_stack_bottom		6119070	1		!=			
ANR	6119096	Identifier	s		6119070	0					
ANR	6119097	Identifier	scope_stack_bottom		6119070	1					
ANR	6119098	AssignmentExpression	s = s -> prev	170:46:5486:5496	6119070	2	True	=			
ANR	6119099	Identifier	s		6119070	0					
ANR	6119100	PtrMemberAccess	s -> prev		6119070	1					
ANR	6119101	Identifier	s		6119070	0					
ANR	6119102	Identifier	prev		6119070	1					
ANR	6119103	CompoundStatement		4:59:96:96	6119070	3					
ANR	6119104	IfStatement	if ( ! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM && s -> v == v )		6119070	0					
ANR	6119105	Condition	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM && s -> v == v	171:7:5508:5574	6119070	0	True				
ANR	6119106	AndExpression	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM && s -> v == v		6119070	0		&&			
ANR	6119107	UnaryOperationExpression	! ( v & SYM_FIELD )		6119070	0					
ANR	6119108	UnaryOperator	!		6119070	0					
ANR	6119109	BitAndExpression	v & SYM_FIELD		6119070	1		&			
ANR	6119110	Identifier	v		6119070	0					
ANR	6119111	Identifier	SYM_FIELD		6119070	1					
ANR	6119112	AndExpression	( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM && s -> v == v		6119070	1		&&			
ANR	6119113	RelationalExpression	( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM		6119070	0		<			
ANR	6119114	BitAndExpression	v & ~SYM_STRUCT		6119070	0		&			
ANR	6119115	Identifier	v		6119070	0					
ANR	6119116	Identifier	~SYM_STRUCT		6119070	1					
ANR	6119117	Identifier	SYM_FIRST_ANOM		6119070	1					
ANR	6119118	EqualityExpression	s -> v == v		6119070	1		==			
ANR	6119119	PtrMemberAccess	s -> v		6119070	0					
ANR	6119120	Identifier	s		6119070	0					
ANR	6119121	Identifier	v		6119070	1					
ANR	6119122	Identifier	v		6119070	1					
ANR	6119123	CompoundStatement		5:76:174:174	6119070	1					
ANR	6119124	ExpressionStatement	"tcc_error ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"	172:4:5583:5668	6119070	0	True				
ANR	6119125	CallExpression	"tcc_error ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"		6119070	0					
ANR	6119126	Callee	tcc_error		6119070	0					
ANR	6119127	Identifier	tcc_error		6119070	0					
ANR	6119128	ArgumentList	"""incompatible types for redefinition of '%s'"""		6119070	1					
ANR	6119129	Argument	"""incompatible types for redefinition of '%s'"""		6119070	0					
ANR	6119130	PrimaryExpression	"""incompatible types for redefinition of '%s'"""		6119070	0					
ANR	6119131	Argument	"get_tok_str ( v , NULL )"		6119070	1					
ANR	6119132	CallExpression	"get_tok_str ( v , NULL )"		6119070	0					
ANR	6119133	Callee	get_tok_str		6119070	0					
ANR	6119134	Identifier	get_tok_str		6119070	0					
ANR	6119135	ArgumentList	v		6119070	1					
ANR	6119136	Argument	v		6119070	0					
ANR	6119137	Identifier	v		6119070	0					
ANR	6119138	Argument	NULL		6119070	1					
ANR	6119139	Identifier	NULL		6119070	0					
ANR	6119140	ReturnStatement	return NULL ;	174:4:5674:5685	6119070	1	True				
ANR	6119141	Identifier	NULL		6119070	0					
ANR	6119142	ExpressionStatement	s = sym_malloc ( )	180:1:5783:5800	6119070	2	True				
ANR	6119143	AssignmentExpression	s = sym_malloc ( )		6119070	0		=			
ANR	6119144	Identifier	s		6119070	0					
ANR	6119145	CallExpression	sym_malloc ( )		6119070	1					
ANR	6119146	Callee	sym_malloc		6119070	0					
ANR	6119147	Identifier	sym_malloc		6119070	0					
ANR	6119148	ArgumentList			6119070	1					
ANR	6119149	ExpressionStatement	s -> asm_label = NULL	181:1:5803:5822	6119070	3	True				
ANR	6119150	AssignmentExpression	s -> asm_label = NULL		6119070	0		=			
ANR	6119151	PtrMemberAccess	s -> asm_label		6119070	0					
ANR	6119152	Identifier	s		6119070	0					
ANR	6119153	Identifier	asm_label		6119070	1					
ANR	6119154	Identifier	NULL		6119070	1					
ANR	6119155	ExpressionStatement	s -> v = v	182:1:5825:5833	6119070	4	True				
ANR	6119156	AssignmentExpression	s -> v = v		6119070	0		=			
ANR	6119157	PtrMemberAccess	s -> v		6119070	0					
ANR	6119158	Identifier	s		6119070	0					
ANR	6119159	Identifier	v		6119070	1					
ANR	6119160	Identifier	v		6119070	1					
ANR	6119161	ExpressionStatement	s -> type . t = t	183:1:5836:5849	6119070	5	True				
ANR	6119162	AssignmentExpression	s -> type . t = t		6119070	0		=			
ANR	6119163	MemberAccess	s -> type . t		6119070	0					
ANR	6119164	PtrMemberAccess	s -> type		6119070	0					
ANR	6119165	Identifier	s		6119070	0					
ANR	6119166	Identifier	type		6119070	1					
ANR	6119167	Identifier	t		6119070	1					
ANR	6119168	Identifier	t		6119070	1					
ANR	6119169	ExpressionStatement	s -> type . ref = NULL	184:1:5852:5870	6119070	6	True				
ANR	6119170	AssignmentExpression	s -> type . ref = NULL		6119070	0		=			
ANR	6119171	MemberAccess	s -> type . ref		6119070	0					
ANR	6119172	PtrMemberAccess	s -> type		6119070	0					
ANR	6119173	Identifier	s		6119070	0					
ANR	6119174	Identifier	type		6119070	1					
ANR	6119175	Identifier	ref		6119070	1					
ANR	6119176	Identifier	NULL		6119070	1					
ANR	6119177	ExpressionStatement	s -> d = NULL	186:1:5887:5898	6119070	7	True				
ANR	6119178	AssignmentExpression	s -> d = NULL		6119070	0		=			
ANR	6119179	PtrMemberAccess	s -> d		6119070	0					
ANR	6119180	Identifier	s		6119070	0					
ANR	6119181	Identifier	d		6119070	1					
ANR	6119182	Identifier	NULL		6119070	1					
ANR	6119183	ExpressionStatement	s -> c = c	188:1:5908:5916	6119070	8	True				
ANR	6119184	AssignmentExpression	s -> c = c		6119070	0		=			
ANR	6119185	PtrMemberAccess	s -> c		6119070	0					
ANR	6119186	Identifier	s		6119070	0					
ANR	6119187	Identifier	c		6119070	1					
ANR	6119188	Identifier	c		6119070	1					
ANR	6119189	ExpressionStatement	s -> next = NULL	189:1:5919:5933	6119070	9	True				
ANR	6119190	AssignmentExpression	s -> next = NULL		6119070	0		=			
ANR	6119191	PtrMemberAccess	s -> next		6119070	0					
ANR	6119192	Identifier	s		6119070	0					
ANR	6119193	Identifier	next		6119070	1					
ANR	6119194	Identifier	NULL		6119070	1					
ANR	6119195	ExpressionStatement	s -> prev = * ps	191:1:5956:5969	6119070	10	True				
ANR	6119196	AssignmentExpression	s -> prev = * ps		6119070	0		=			
ANR	6119197	PtrMemberAccess	s -> prev		6119070	0					
ANR	6119198	Identifier	s		6119070	0					
ANR	6119199	Identifier	prev		6119070	1					
ANR	6119200	UnaryOperationExpression	* ps		6119070	1					
ANR	6119201	UnaryOperator	*		6119070	0					
ANR	6119202	Identifier	ps		6119070	1					
ANR	6119203	ExpressionStatement	* ps = s	192:1:5972:5979	6119070	11	True				
ANR	6119204	AssignmentExpression	* ps = s		6119070	0		=			
ANR	6119205	UnaryOperationExpression	* ps		6119070	0					
ANR	6119206	UnaryOperator	*		6119070	0					
ANR	6119207	Identifier	ps		6119070	1					
ANR	6119208	Identifier	s		6119070	1					
ANR	6119209	ReturnStatement	return s ;	193:1:5982:5990	6119070	12	True				
ANR	6119210	Identifier	s		6119070	0					
ANR	6119211	ReturnType	ST_FUNC Sym *		6119070	1					
ANR	6119212	Identifier	sym_push2		6119070	2					
ANR	6119213	ParameterList	"Sym * * ps , int v , int t , long long c"		6119070	3					
ANR	6119214	Parameter	Sym * * ps	167:23:5365:5372	6119070	0	True				
ANR	6119215	ParameterType	Sym * *		6119070	0					
ANR	6119216	Identifier	ps		6119070	1					
ANR	6119217	Parameter	int v	167:33:5375:5379	6119070	1	True				
ANR	6119218	ParameterType	int		6119070	0					
ANR	6119219	Identifier	v		6119070	1					
ANR	6119220	Parameter	int t	167:40:5382:5386	6119070	2	True				
ANR	6119221	ParameterType	int		6119070	0					
ANR	6119222	Identifier	t		6119070	1					
ANR	6119223	Parameter	long long c	167:47:5389:5399	6119070	3	True				
ANR	6119224	ParameterType	long long		6119070	0					
ANR	6119225	Identifier	c		6119070	1					
ANR	6119226	CFGEntryNode	ENTRY		6119070		True				
ANR	6119227	CFGExitNode	EXIT		6119070		True				
ANR	6119228	Symbol	s -> v		6119070						
ANR	6119229	Symbol	ps		6119070						
ANR	6119230	Symbol	c		6119070						
ANR	6119231	Symbol	SYM_FIRST_ANOM		6119070						
ANR	6119232	Symbol	NULL		6119070						
ANR	6119233	Symbol	get_tok_str		6119070						
ANR	6119234	Symbol	scope_stack_bottom		6119070						
ANR	6119235	Symbol	s -> type . ref		6119070						
ANR	6119236	Symbol	s -> asm_label		6119070						
ANR	6119237	Symbol	* ps		6119070						
ANR	6119238	Symbol	s -> prev		6119070						
ANR	6119239	Symbol	s -> next		6119070						
ANR	6119240	Symbol	s -> type . t		6119070						
ANR	6119241	Symbol	sym_malloc		6119070						
ANR	6119242	Symbol	s		6119070						
ANR	6119243	Symbol	SYM_FIELD		6119070						
ANR	6119244	Symbol	t		6119070						
ANR	6119245	Symbol	s -> c		6119070						
ANR	6119246	Symbol	v		6119070						
ANR	6119247	Symbol	& local_stack		6119070						
ANR	6119248	Symbol	~SYM_STRUCT		6119070						
ANR	6119249	Symbol	s -> d		6119070						
ANR	6119250	Symbol	* s		6119070						
ANR	6119251	Symbol	s -> type		6119070						
ANR	6119252	Function	sym_find2	198:0:6090:6211							
ANR	6119253	FunctionDef	"sym_find2 (Sym * s , int v)"		6119252	0					
ANR	6119254	CompoundStatement		198:38:6128:6211	6119252	0					
ANR	6119255	WhileStatement	while ( s )		6119252	0					
ANR	6119256	Condition	s	199:8:6138:6138	6119252	0	True				
ANR	6119257	Identifier	s		6119252	0					
ANR	6119258	CompoundStatement		2:11:12:12	6119252	1					
ANR	6119259	IfStatement	if ( s -> v == v )		6119252	0					
ANR	6119260	Condition	s -> v == v	200:6:6149:6157	6119252	0	True				
ANR	6119261	EqualityExpression	s -> v == v		6119252	0		==			
ANR	6119262	PtrMemberAccess	s -> v		6119252	0					
ANR	6119263	Identifier	s		6119252	0					
ANR	6119264	Identifier	v		6119252	1					
ANR	6119265	Identifier	v		6119252	1					
ANR	6119266	CompoundStatement		3:17:31:31	6119252	1					
ANR	6119267	ReturnStatement	return s ;	201:3:6165:6173	6119252	0	True				
ANR	6119268	Identifier	s		6119252	0					
ANR	6119269	ExpressionStatement	s = s -> prev	203:2:6181:6192	6119252	1	True				
ANR	6119270	AssignmentExpression	s = s -> prev		6119252	0		=			
ANR	6119271	Identifier	s		6119252	0					
ANR	6119272	PtrMemberAccess	s -> prev		6119252	1					
ANR	6119273	Identifier	s		6119252	0					
ANR	6119274	Identifier	prev		6119252	1					
ANR	6119275	ReturnStatement	return NULL ;	205:1:6198:6209	6119252	1	True				
ANR	6119276	Identifier	NULL		6119252	0					
ANR	6119277	ReturnType	ST_FUNC Sym *		6119252	1					
ANR	6119278	Identifier	sym_find2		6119252	2					
ANR	6119279	ParameterList	"Sym * s , int v"		6119252	3					
ANR	6119280	Parameter	Sym * s	198:23:6113:6118	6119252	0	True				
ANR	6119281	ParameterType	Sym *		6119252	0					
ANR	6119282	Identifier	s		6119252	1					
ANR	6119283	Parameter	int v	198:31:6121:6125	6119252	1	True				
ANR	6119284	ParameterType	int		6119252	0					
ANR	6119285	Identifier	v		6119252	1					
ANR	6119286	CFGEntryNode	ENTRY		6119252		True				
ANR	6119287	CFGExitNode	EXIT		6119252		True				
ANR	6119288	Symbol	s -> v		6119252						
ANR	6119289	Symbol	s		6119252						
ANR	6119290	Symbol	NULL		6119252						
ANR	6119291	Symbol	v		6119252						
ANR	6119292	Symbol	s -> prev		6119252						
ANR	6119293	Symbol	* s		6119252						
ANR	6119294	Function	struct_find	209:0:6237:6401							
ANR	6119295	FunctionDef	struct_find (int v)		6119294	0					
ANR	6119296	CompoundStatement		209:32:6269:6401	6119294	0					
ANR	6119297	ExpressionStatement	v -= TOK_IDENT	210:1:6272:6286	6119294	0	True				
ANR	6119298	AssignmentExpression	v -= TOK_IDENT		6119294	0		-=			
ANR	6119299	Identifier	v		6119294	0					
ANR	6119300	Identifier	TOK_IDENT		6119294	1					
ANR	6119301	IfStatement	if ( ( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT ) )		6119294	1					
ANR	6119302	Condition	( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT )	211:5:6293:6342	6119294	0	True				
ANR	6119303	RelationalExpression	( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT )		6119294	0		>=			
ANR	6119304	CastExpression	( unsigned ) v		6119294	0					
ANR	6119305	CastTarget	unsigned		6119294	0					
ANR	6119306	Identifier	v		6119294	1					
ANR	6119307	CastExpression	( unsigned ) ( tok_ident - TOK_IDENT )		6119294	1					
ANR	6119308	CastTarget	unsigned		6119294	0					
ANR	6119309	AdditiveExpression	tok_ident - TOK_IDENT		6119294	1		-			
ANR	6119310	Identifier	tok_ident		6119294	0					
ANR	6119311	Identifier	TOK_IDENT		6119294	1					
ANR	6119312	CompoundStatement		3:57:75:75	6119294	1					
ANR	6119313	ReturnStatement	return NULL ;	212:2:6349:6360	6119294	0	True				
ANR	6119314	Identifier	NULL		6119294	0					
ANR	6119315	ReturnStatement	return table_ident [ v ] -> sym_struct ;	214:1:6366:6399	6119294	2	True				
ANR	6119316	PtrMemberAccess	table_ident [ v ] -> sym_struct		6119294	0					
ANR	6119317	ArrayIndexing	table_ident [ v ]		6119294	0					
ANR	6119318	Identifier	table_ident		6119294	0					
ANR	6119319	Identifier	v		6119294	1					
ANR	6119320	Identifier	sym_struct		6119294	1					
ANR	6119321	ReturnType	ST_INLN Sym *		6119294	1					
ANR	6119322	Identifier	struct_find		6119294	2					
ANR	6119323	ParameterList	int v		6119294	3					
ANR	6119324	Parameter	int v	209:25:6262:6266	6119294	0	True				
ANR	6119325	ParameterType	int		6119294	0					
ANR	6119326	Identifier	v		6119294	1					
ANR	6119327	CFGEntryNode	ENTRY		6119294		True				
ANR	6119328	CFGExitNode	EXIT		6119294		True				
ANR	6119329	Symbol	* v		6119294						
ANR	6119330	Symbol	table_ident		6119294						
ANR	6119331	Symbol	tok_ident		6119294						
ANR	6119332	Symbol	NULL		6119294						
ANR	6119333	Symbol	TOK_IDENT		6119294						
ANR	6119334	Symbol	* * v		6119294						
ANR	6119335	Symbol	v		6119294						
ANR	6119336	Symbol	table_ident [ v ] -> sym_struct		6119294						
ANR	6119337	Symbol	* * table_ident		6119294						
ANR	6119338	Symbol	* table_ident		6119294						
ANR	6119339	Function	sym_find	218:0:6429:6594							
ANR	6119340	FunctionDef	sym_find (int v)		6119339	0					
ANR	6119341	CompoundStatement		218:29:6458:6594	6119339	0					
ANR	6119342	ExpressionStatement	v -= TOK_IDENT	219:1:6461:6475	6119339	0	True				
ANR	6119343	AssignmentExpression	v -= TOK_IDENT		6119339	0		-=			
ANR	6119344	Identifier	v		6119339	0					
ANR	6119345	Identifier	TOK_IDENT		6119339	1					
ANR	6119346	IfStatement	if ( ( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT ) )		6119339	1					
ANR	6119347	Condition	( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT )	220:5:6482:6531	6119339	0	True				
ANR	6119348	RelationalExpression	( unsigned ) v >= ( unsigned ) ( tok_ident - TOK_IDENT )		6119339	0		>=			
ANR	6119349	CastExpression	( unsigned ) v		6119339	0					
ANR	6119350	CastTarget	unsigned		6119339	0					
ANR	6119351	Identifier	v		6119339	1					
ANR	6119352	CastExpression	( unsigned ) ( tok_ident - TOK_IDENT )		6119339	1					
ANR	6119353	CastTarget	unsigned		6119339	0					
ANR	6119354	AdditiveExpression	tok_ident - TOK_IDENT		6119339	1		-			
ANR	6119355	Identifier	tok_ident		6119339	0					
ANR	6119356	Identifier	TOK_IDENT		6119339	1					
ANR	6119357	CompoundStatement		3:57:75:75	6119339	1					
ANR	6119358	ReturnStatement	return NULL ;	221:2:6538:6549	6119339	0	True				
ANR	6119359	Identifier	NULL		6119339	0					
ANR	6119360	ReturnStatement	return table_ident [ v ] -> sym_identifier ;	223:1:6555:6592	6119339	2	True				
ANR	6119361	PtrMemberAccess	table_ident [ v ] -> sym_identifier		6119339	0					
ANR	6119362	ArrayIndexing	table_ident [ v ]		6119339	0					
ANR	6119363	Identifier	table_ident		6119339	0					
ANR	6119364	Identifier	v		6119339	1					
ANR	6119365	Identifier	sym_identifier		6119339	1					
ANR	6119366	ReturnType	ST_INLN Sym *		6119339	1					
ANR	6119367	Identifier	sym_find		6119339	2					
ANR	6119368	ParameterList	int v		6119339	3					
ANR	6119369	Parameter	int v	218:22:6451:6455	6119339	0	True				
ANR	6119370	ParameterType	int		6119339	0					
ANR	6119371	Identifier	v		6119339	1					
ANR	6119372	CFGEntryNode	ENTRY		6119339		True				
ANR	6119373	CFGExitNode	EXIT		6119339		True				
ANR	6119374	Symbol	* v		6119339						
ANR	6119375	Symbol	table_ident		6119339						
ANR	6119376	Symbol	tok_ident		6119339						
ANR	6119377	Symbol	NULL		6119339						
ANR	6119378	Symbol	TOK_IDENT		6119339						
ANR	6119379	Symbol	* * v		6119339						
ANR	6119380	Symbol	v		6119339						
ANR	6119381	Symbol	* * table_ident		6119339						
ANR	6119382	Symbol	table_ident [ v ] -> sym_identifier		6119339						
ANR	6119383	Symbol	* table_ident		6119339						
ANR	6119384	Function	tcc_sym_push	228:0:6676:6958							
ANR	6119385	FunctionDef	"tcc_sym_push (char * typename , int typesize , int meta)"		6119384	0					
ANR	6119386	CompoundStatement		228:57:6733:6958	6119384	0					
ANR	6119387	IdentifierDeclStatement	CType * new_type = ( CType * ) malloc ( sizeof ( CType ) ) ;	229:1:6736:6786	6119384	0	True				
ANR	6119388	IdentifierDecl	* new_type = ( CType * ) malloc ( sizeof ( CType ) )		6119384	0					
ANR	6119389	IdentifierDeclType	CType *		6119384	0					
ANR	6119390	Identifier	new_type		6119384	1					
ANR	6119391	AssignmentExpression	* new_type = ( CType * ) malloc ( sizeof ( CType ) )		6119384	2		=			
ANR	6119392	Identifier	new_type		6119384	0					
ANR	6119393	CastExpression	( CType * ) malloc ( sizeof ( CType ) )		6119384	1					
ANR	6119394	CastTarget	CType *		6119384	0					
ANR	6119395	CallExpression	malloc ( sizeof ( CType ) )		6119384	1					
ANR	6119396	Callee	malloc		6119384	0					
ANR	6119397	Identifier	malloc		6119384	0					
ANR	6119398	ArgumentList	sizeof ( CType )		6119384	1					
ANR	6119399	Argument	sizeof ( CType )		6119384	0					
ANR	6119400	SizeofExpression	sizeof ( CType )		6119384	0					
ANR	6119401	Sizeof	sizeof		6119384	0					
ANR	6119402	SizeofOperand	CType		6119384	1					
ANR	6119403	IfStatement	if ( ! new_type )		6119384	1					
ANR	6119404	Condition	! new_type	230:5:6793:6801	6119384	0	True				
ANR	6119405	UnaryOperationExpression	! new_type		6119384	0					
ANR	6119406	UnaryOperator	!		6119384	0					
ANR	6119407	Identifier	new_type		6119384	1					
ANR	6119408	CompoundStatement		3:16:70:70	6119384	1					
ANR	6119409	ReturnStatement	return 0 ;	231:2:6808:6816	6119384	0	True				
ANR	6119410	PrimaryExpression	0		6119384	0					
ANR	6119411	ExpressionStatement	new_type -> ref = sym_malloc ( )	233:1:6822:6851	6119384	2	True				
ANR	6119412	AssignmentExpression	new_type -> ref = sym_malloc ( )		6119384	0		=			
ANR	6119413	PtrMemberAccess	new_type -> ref		6119384	0					
ANR	6119414	Identifier	new_type		6119384	0					
ANR	6119415	Identifier	ref		6119384	1					
ANR	6119416	CallExpression	sym_malloc ( )		6119384	1					
ANR	6119417	Callee	sym_malloc		6119384	0					
ANR	6119418	Identifier	sym_malloc		6119384	0					
ANR	6119419	ArgumentList			6119384	1					
ANR	6119420	ExpressionStatement	new_type -> t = meta	234:1:6854:6872	6119384	3	True				
ANR	6119421	AssignmentExpression	new_type -> t = meta		6119384	0		=			
ANR	6119422	PtrMemberAccess	new_type -> t		6119384	0					
ANR	6119423	Identifier	new_type		6119384	0					
ANR	6119424	Identifier	t		6119384	1					
ANR	6119425	Identifier	meta		6119384	1					
ANR	6119426	IfStatement	"if ( ! sym_push ( 0 , new_type , 0 , 0 ) )"		6119384	4					
ANR	6119427	Condition	"! sym_push ( 0 , new_type , 0 , 0 )"	236:5:6880:6908	6119384	0	True				
ANR	6119428	UnaryOperationExpression	"! sym_push ( 0 , new_type , 0 , 0 )"		6119384	0					
ANR	6119429	UnaryOperator	!		6119384	0					
ANR	6119430	CallExpression	"sym_push ( 0 , new_type , 0 , 0 )"		6119384	1					
ANR	6119431	Callee	sym_push		6119384	0					
ANR	6119432	Identifier	sym_push		6119384	0					
ANR	6119433	ArgumentList	0		6119384	1					
ANR	6119434	Argument	0		6119384	0					
ANR	6119435	PrimaryExpression	0		6119384	0					
ANR	6119436	Argument	new_type		6119384	1					
ANR	6119437	Identifier	new_type		6119384	0					
ANR	6119438	Argument	0		6119384	2					
ANR	6119439	PrimaryExpression	0		6119384	0					
ANR	6119440	Argument	0		6119384	3					
ANR	6119441	PrimaryExpression	0		6119384	0					
ANR	6119442	CompoundStatement		9:36:177:177	6119384	1					
ANR	6119443	ReturnStatement	return 0 ;	237:2:6915:6923	6119384	0	True				
ANR	6119444	PrimaryExpression	0		6119384	0					
ANR	6119445	ExpressionStatement	free ( new_type )	240:1:6930:6945	6119384	5	True				
ANR	6119446	CallExpression	free ( new_type )		6119384	0					
ANR	6119447	Callee	free		6119384	0					
ANR	6119448	Identifier	free		6119384	0					
ANR	6119449	ArgumentList	new_type		6119384	1					
ANR	6119450	Argument	new_type		6119384	0					
ANR	6119451	Identifier	new_type		6119384	0					
ANR	6119452	ReturnStatement	return 1 ;	241:1:6948:6956	6119384	6	True				
ANR	6119453	PrimaryExpression	1		6119384	0					
ANR	6119454	ReturnType	int		6119384	1					
ANR	6119455	Identifier	tcc_sym_push		6119384	2					
ANR	6119456	ParameterList	"char * typename , int typesize , int meta"		6119384	3					
ANR	6119457	Parameter	char * typename	228:17:6693:6706	6119384	0	True				
ANR	6119458	ParameterType	char *		6119384	0					
ANR	6119459	Identifier	typename		6119384	1					
ANR	6119460	Parameter	int typesize	228:33:6709:6720	6119384	1	True				
ANR	6119461	ParameterType	int		6119384	0					
ANR	6119462	Identifier	typesize		6119384	1					
ANR	6119463	Parameter	int meta	228:47:6723:6730	6119384	2	True				
ANR	6119464	ParameterType	int		6119384	0					
ANR	6119465	Identifier	meta		6119384	1					
ANR	6119466	CFGEntryNode	ENTRY		6119384		True				
ANR	6119467	CFGExitNode	EXIT		6119384		True				
ANR	6119468	Symbol	sym_malloc		6119384						
ANR	6119469	Symbol	new_type		6119384						
ANR	6119470	Symbol	malloc		6119384						
ANR	6119471	Symbol	new_type -> t		6119384						
ANR	6119472	Symbol	typesize		6119384						
ANR	6119473	Symbol	meta		6119384						
ANR	6119474	Symbol	sym_push		6119384						
ANR	6119475	Symbol	* new_type		6119384						
ANR	6119476	Symbol	new_type -> ref		6119384						
ANR	6119477	Symbol	typename		6119384						
ANR	6119478	Function	dump_type	244:0:6961:7964							
ANR	6119479	FunctionDef	"dump_type (CType * type , int depth)"		6119478	0					
ANR	6119480	CompoundStatement		244:39:7000:7964	6119478	0					
ANR	6119481	IfStatement	if ( depth <= 0 )		6119478	0					
ANR	6119482	Condition	depth <= 0	245:5:7007:7016	6119478	0	True				
ANR	6119483	RelationalExpression	depth <= 0		6119478	0		<=			
ANR	6119484	Identifier	depth		6119478	0					
ANR	6119485	PrimaryExpression	0		6119478	1					
ANR	6119486	CompoundStatement		2:17:18:18	6119478	1					
ANR	6119487	ReturnStatement	return ;	246:2:7023:7029	6119478	0	True				
ANR	6119488	ExpressionStatement	"eprintf ( ""------------------------\\n"" )"	248:1:7035:7073	6119478	1	True				
ANR	6119489	CallExpression	"eprintf ( ""------------------------\\n"" )"		6119478	0					
ANR	6119490	Callee	eprintf		6119478	0					
ANR	6119491	Identifier	eprintf		6119478	0					
ANR	6119492	ArgumentList	"""------------------------\\n"""		6119478	1					
ANR	6119493	Argument	"""------------------------\\n"""		6119478	0					
ANR	6119494	PrimaryExpression	"""------------------------\\n"""		6119478	0					
ANR	6119495	IdentifierDeclStatement	int bt = type -> t & VT_BTYPE ;	249:1:7076:7103	6119478	2	True				
ANR	6119496	IdentifierDecl	bt = type -> t & VT_BTYPE		6119478	0					
ANR	6119497	IdentifierDeclType	int		6119478	0					
ANR	6119498	Identifier	bt		6119478	1					
ANR	6119499	AssignmentExpression	bt = type -> t & VT_BTYPE		6119478	2		=			
ANR	6119500	Identifier	bt		6119478	0					
ANR	6119501	BitAndExpression	type -> t & VT_BTYPE		6119478	1		&			
ANR	6119502	PtrMemberAccess	type -> t		6119478	0					
ANR	6119503	Identifier	type		6119478	0					
ANR	6119504	Identifier	t		6119478	1					
ANR	6119505	Identifier	VT_BTYPE		6119478	1					
ANR	6119506	ExpressionStatement	"eprintf ( ""BTYPE = %d "" , bt )"	250:1:7106:7133	6119478	3	True				
ANR	6119507	CallExpression	"eprintf ( ""BTYPE = %d "" , bt )"		6119478	0					
ANR	6119508	Callee	eprintf		6119478	0					
ANR	6119509	Identifier	eprintf		6119478	0					
ANR	6119510	ArgumentList	"""BTYPE = %d """		6119478	1					
ANR	6119511	Argument	"""BTYPE = %d """		6119478	0					
ANR	6119512	PrimaryExpression	"""BTYPE = %d """		6119478	0					
ANR	6119513	Argument	bt		6119478	1					
ANR	6119514	Identifier	bt		6119478	0					
ANR	6119515	SwitchStatement	switch ( bt )		6119478	4					
ANR	6119516	Condition	bt	251:9:7144:7145	6119478	0	True				
ANR	6119517	Identifier	bt		6119478	0					
ANR	6119518	CompoundStatement		8:13:147:147	6119478	1					
ANR	6119519	Label	case VT_UNION :	252:1:7151:7164	6119478	0	True				
ANR	6119520	Identifier	VT_UNION		6119478	0					
ANR	6119521	ExpressionStatement	"eprintf ( ""[UNION]\\n"" )"	252:16:7166:7187	6119478	1	True				
ANR	6119522	CallExpression	"eprintf ( ""[UNION]\\n"" )"		6119478	0					
ANR	6119523	Callee	eprintf		6119478	0					
ANR	6119524	Identifier	eprintf		6119478	0					
ANR	6119525	ArgumentList	"""[UNION]\\n"""		6119478	1					
ANR	6119526	Argument	"""[UNION]\\n"""		6119478	0					
ANR	6119527	PrimaryExpression	"""[UNION]\\n"""		6119478	0					
ANR	6119528	BreakStatement	break ;	253:2:7191:7196	6119478	2	True				
ANR	6119529	Label	case VT_STRUCT :	254:1:7199:7213	6119478	3	True				
ANR	6119530	Identifier	VT_STRUCT		6119478	0					
ANR	6119531	ExpressionStatement	"eprintf ( ""[STRUCT]\\n"" )"	254:17:7215:7237	6119478	4	True				
ANR	6119532	CallExpression	"eprintf ( ""[STRUCT]\\n"" )"		6119478	0					
ANR	6119533	Callee	eprintf		6119478	0					
ANR	6119534	Identifier	eprintf		6119478	0					
ANR	6119535	ArgumentList	"""[STRUCT]\\n"""		6119478	1					
ANR	6119536	Argument	"""[STRUCT]\\n"""		6119478	0					
ANR	6119537	PrimaryExpression	"""[STRUCT]\\n"""		6119478	0					
ANR	6119538	BreakStatement	break ;	255:2:7241:7246	6119478	5	True				
ANR	6119539	Label	case VT_PTR :	256:1:7249:7260	6119478	6	True				
ANR	6119540	Identifier	VT_PTR		6119478	0					
ANR	6119541	ExpressionStatement	"eprintf ( ""[PTR]\\n"" )"	256:14:7262:7281	6119478	7	True				
ANR	6119542	CallExpression	"eprintf ( ""[PTR]\\n"" )"		6119478	0					
ANR	6119543	Callee	eprintf		6119478	0					
ANR	6119544	Identifier	eprintf		6119478	0					
ANR	6119545	ArgumentList	"""[PTR]\\n"""		6119478	1					
ANR	6119546	Argument	"""[PTR]\\n"""		6119478	0					
ANR	6119547	PrimaryExpression	"""[PTR]\\n"""		6119478	0					
ANR	6119548	BreakStatement	break ;	257:2:7285:7290	6119478	8	True				
ANR	6119549	Label	case VT_ENUM :	258:1:7293:7305	6119478	9	True				
ANR	6119550	Identifier	VT_ENUM		6119478	0					
ANR	6119551	ExpressionStatement	"eprintf ( ""[ENUM]\\n"" )"	258:15:7307:7327	6119478	10	True				
ANR	6119552	CallExpression	"eprintf ( ""[ENUM]\\n"" )"		6119478	0					
ANR	6119553	Callee	eprintf		6119478	0					
ANR	6119554	Identifier	eprintf		6119478	0					
ANR	6119555	ArgumentList	"""[ENUM]\\n"""		6119478	1					
ANR	6119556	Argument	"""[ENUM]\\n"""		6119478	0					
ANR	6119557	PrimaryExpression	"""[ENUM]\\n"""		6119478	0					
ANR	6119558	BreakStatement	break ;	259:2:7331:7336	6119478	11	True				
ANR	6119559	Label	case VT_INT64 :	260:1:7339:7352	6119478	12	True				
ANR	6119560	Identifier	VT_INT64		6119478	0					
ANR	6119561	ExpressionStatement	"eprintf ( ""[INT64_T]\\n"" )"	260:16:7354:7377	6119478	13	True				
ANR	6119562	CallExpression	"eprintf ( ""[INT64_T]\\n"" )"		6119478	0					
ANR	6119563	Callee	eprintf		6119478	0					
ANR	6119564	Identifier	eprintf		6119478	0					
ANR	6119565	ArgumentList	"""[INT64_T]\\n"""		6119478	1					
ANR	6119566	Argument	"""[INT64_T]\\n"""		6119478	0					
ANR	6119567	PrimaryExpression	"""[INT64_T]\\n"""		6119478	0					
ANR	6119568	BreakStatement	break ;	261:2:7381:7386	6119478	14	True				
ANR	6119569	Label	case VT_INT32 :	262:1:7389:7402	6119478	15	True				
ANR	6119570	Identifier	VT_INT32		6119478	0					
ANR	6119571	ExpressionStatement	"eprintf ( ""[INT32_T]\\n"" )"	262:16:7404:7427	6119478	16	True				
ANR	6119572	CallExpression	"eprintf ( ""[INT32_T]\\n"" )"		6119478	0					
ANR	6119573	Callee	eprintf		6119478	0					
ANR	6119574	Identifier	eprintf		6119478	0					
ANR	6119575	ArgumentList	"""[INT32_T]\\n"""		6119478	1					
ANR	6119576	Argument	"""[INT32_T]\\n"""		6119478	0					
ANR	6119577	PrimaryExpression	"""[INT32_T]\\n"""		6119478	0					
ANR	6119578	BreakStatement	break ;	263:2:7431:7436	6119478	17	True				
ANR	6119579	Label	case VT_INT16 :	264:1:7439:7452	6119478	18	True				
ANR	6119580	Identifier	VT_INT16		6119478	0					
ANR	6119581	ExpressionStatement	"eprintf ( ""[INT16_T]\\n"" )"	264:16:7454:7477	6119478	19	True				
ANR	6119582	CallExpression	"eprintf ( ""[INT16_T]\\n"" )"		6119478	0					
ANR	6119583	Callee	eprintf		6119478	0					
ANR	6119584	Identifier	eprintf		6119478	0					
ANR	6119585	ArgumentList	"""[INT16_T]\\n"""		6119478	1					
ANR	6119586	Argument	"""[INT16_T]\\n"""		6119478	0					
ANR	6119587	PrimaryExpression	"""[INT16_T]\\n"""		6119478	0					
ANR	6119588	BreakStatement	break ;	265:2:7481:7486	6119478	20	True				
ANR	6119589	Label	case VT_INT8 :	266:1:7489:7501	6119478	21	True				
ANR	6119590	Identifier	VT_INT8		6119478	0					
ANR	6119591	ExpressionStatement	"eprintf ( ""[INT8_T]\\n"" )"	266:15:7503:7525	6119478	22	True				
ANR	6119592	CallExpression	"eprintf ( ""[INT8_T]\\n"" )"		6119478	0					
ANR	6119593	Callee	eprintf		6119478	0					
ANR	6119594	Identifier	eprintf		6119478	0					
ANR	6119595	ArgumentList	"""[INT8_T]\\n"""		6119478	1					
ANR	6119596	Argument	"""[INT8_T]\\n"""		6119478	0					
ANR	6119597	PrimaryExpression	"""[INT8_T]\\n"""		6119478	0					
ANR	6119598	BreakStatement	break ;	267:2:7529:7534	6119478	23	True				
ANR	6119599	Label	default :	268:1:7537:7544	6119478	24	True				
ANR	6119600	Identifier	default		6119478	0					
ANR	6119601	ExpressionStatement	"eprintf ( ""\\n"" )"	269:2:7548:7562	6119478	25	True				
ANR	6119602	CallExpression	"eprintf ( ""\\n"" )"		6119478	0					
ANR	6119603	Callee	eprintf		6119478	0					
ANR	6119604	Identifier	eprintf		6119478	0					
ANR	6119605	ArgumentList	"""\\n"""		6119478	1					
ANR	6119606	Argument	"""\\n"""		6119478	0					
ANR	6119607	PrimaryExpression	"""\\n"""		6119478	0					
ANR	6119608	BreakStatement	break ;	270:2:7566:7571	6119478	26	True				
ANR	6119609	IfStatement	if ( type -> ref )		6119478	5					
ANR	6119610	Condition	type -> ref	272:5:7581:7589	6119478	0	True				
ANR	6119611	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119612	Identifier	type		6119478	0					
ANR	6119613	Identifier	ref		6119478	1					
ANR	6119614	CompoundStatement		31:2:633:652	6119478	1					
ANR	6119615	ExpressionStatement	"eprintf ( ""v = %d\\n"" , type -> ref -> v )"	273:2:7596:7630	6119478	0	True				
ANR	6119616	CallExpression	"eprintf ( ""v = %d\\n"" , type -> ref -> v )"		6119478	0					
ANR	6119617	Callee	eprintf		6119478	0					
ANR	6119618	Identifier	eprintf		6119478	0					
ANR	6119619	ArgumentList	"""v = %d\\n"""		6119478	1					
ANR	6119620	Argument	"""v = %d\\n"""		6119478	0					
ANR	6119621	PrimaryExpression	"""v = %d\\n"""		6119478	0					
ANR	6119622	Argument	type -> ref -> v		6119478	1					
ANR	6119623	PtrMemberAccess	type -> ref -> v		6119478	0					
ANR	6119624	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119625	Identifier	type		6119478	0					
ANR	6119626	Identifier	ref		6119478	1					
ANR	6119627	Identifier	v		6119478	1					
ANR	6119628	IdentifierDeclStatement	char * varstr = NULL ;	274:2:7634:7653	6119478	1	True				
ANR	6119629	IdentifierDecl	* varstr = NULL		6119478	0					
ANR	6119630	IdentifierDeclType	char *		6119478	0					
ANR	6119631	Identifier	varstr		6119478	1					
ANR	6119632	AssignmentExpression	* varstr = NULL		6119478	2		=			
ANR	6119633	Identifier	NULL		6119478	0					
ANR	6119634	Identifier	NULL		6119478	1					
ANR	6119635	ExpressionStatement	"varstr = get_tok_str ( type -> ref -> v , NULL )"	275:2:7657:7698	6119478	2	True				
ANR	6119636	AssignmentExpression	"varstr = get_tok_str ( type -> ref -> v , NULL )"		6119478	0		=			
ANR	6119637	Identifier	varstr		6119478	0					
ANR	6119638	CallExpression	"get_tok_str ( type -> ref -> v , NULL )"		6119478	1					
ANR	6119639	Callee	get_tok_str		6119478	0					
ANR	6119640	Identifier	get_tok_str		6119478	0					
ANR	6119641	ArgumentList	type -> ref -> v		6119478	1					
ANR	6119642	Argument	type -> ref -> v		6119478	0					
ANR	6119643	PtrMemberAccess	type -> ref -> v		6119478	0					
ANR	6119644	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119645	Identifier	type		6119478	0					
ANR	6119646	Identifier	ref		6119478	1					
ANR	6119647	Identifier	v		6119478	1					
ANR	6119648	Argument	NULL		6119478	1					
ANR	6119649	Identifier	NULL		6119478	0					
ANR	6119650	IfStatement	if ( varstr )		6119478	3					
ANR	6119651	Condition	varstr	276:6:7706:7711	6119478	0	True				
ANR	6119652	Identifier	varstr		6119478	0					
ANR	6119653	CompoundStatement		33:14:713:713	6119478	1					
ANR	6119654	ExpressionStatement	"eprintf ( ""var = %s\\n"" , varstr )"	277:3:7719:7749	6119478	0	True				
ANR	6119655	CallExpression	"eprintf ( ""var = %s\\n"" , varstr )"		6119478	0					
ANR	6119656	Callee	eprintf		6119478	0					
ANR	6119657	Identifier	eprintf		6119478	0					
ANR	6119658	ArgumentList	"""var = %s\\n"""		6119478	1					
ANR	6119659	Argument	"""var = %s\\n"""		6119478	0					
ANR	6119660	PrimaryExpression	"""var = %s\\n"""		6119478	0					
ANR	6119661	Argument	varstr		6119478	1					
ANR	6119662	Identifier	varstr		6119478	0					
ANR	6119663	IfStatement	if ( type -> ref -> asm_label )		6119478	4					
ANR	6119664	Condition	type -> ref -> asm_label	279:6:7761:7780	6119478	0	True				
ANR	6119665	PtrMemberAccess	type -> ref -> asm_label		6119478	0					
ANR	6119666	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119667	Identifier	type		6119478	0					
ANR	6119668	Identifier	ref		6119478	1					
ANR	6119669	Identifier	asm_label		6119478	1					
ANR	6119670	CompoundStatement		36:28:782:782	6119478	1					
ANR	6119671	ExpressionStatement	"eprintf ( ""asm_label = %s\\n"" , type -> ref -> asm_label )"	280:3:7788:7838	6119478	0	True				
ANR	6119672	CallExpression	"eprintf ( ""asm_label = %s\\n"" , type -> ref -> asm_label )"		6119478	0					
ANR	6119673	Callee	eprintf		6119478	0					
ANR	6119674	Identifier	eprintf		6119478	0					
ANR	6119675	ArgumentList	"""asm_label = %s\\n"""		6119478	1					
ANR	6119676	Argument	"""asm_label = %s\\n"""		6119478	0					
ANR	6119677	PrimaryExpression	"""asm_label = %s\\n"""		6119478	0					
ANR	6119678	Argument	type -> ref -> asm_label		6119478	1					
ANR	6119679	PtrMemberAccess	type -> ref -> asm_label		6119478	0					
ANR	6119680	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119681	Identifier	type		6119478	0					
ANR	6119682	Identifier	ref		6119478	1					
ANR	6119683	Identifier	asm_label		6119478	1					
ANR	6119684	ExpressionStatement	"eprintf ( ""r = %d\\n"" , type -> ref -> r )"	282:2:7846:7880	6119478	5	True				
ANR	6119685	CallExpression	"eprintf ( ""r = %d\\n"" , type -> ref -> r )"		6119478	0					
ANR	6119686	Callee	eprintf		6119478	0					
ANR	6119687	Identifier	eprintf		6119478	0					
ANR	6119688	ArgumentList	"""r = %d\\n"""		6119478	1					
ANR	6119689	Argument	"""r = %d\\n"""		6119478	0					
ANR	6119690	PrimaryExpression	"""r = %d\\n"""		6119478	0					
ANR	6119691	Argument	type -> ref -> r		6119478	1					
ANR	6119692	PtrMemberAccess	type -> ref -> r		6119478	0					
ANR	6119693	PtrMemberAccess	type -> ref		6119478	0					
ANR	6119694	Identifier	type		6119478	0					
ANR	6119695	Identifier	ref		6119478	1					
ANR	6119696	Identifier	r		6119478	1					
ANR	6119697	ExpressionStatement	"eprintf ( ""associated type:\\n"" )"	283:2:7884:7914	6119478	6	True				
ANR	6119698	CallExpression	"eprintf ( ""associated type:\\n"" )"		6119478	0					
ANR	6119699	Callee	eprintf		6119478	0					
ANR	6119700	Identifier	eprintf		6119478	0					
ANR	6119701	ArgumentList	"""associated type:\\n"""		6119478	1					
ANR	6119702	Argument	"""associated type:\\n"""		6119478	0					
ANR	6119703	PrimaryExpression	"""associated type:\\n"""		6119478	0					
ANR	6119704	ReturnType	void		6119478	1					
ANR	6119705	Identifier	dump_type		6119478	2					
ANR	6119706	ParameterList	"CType * type , int depth"		6119478	3					
ANR	6119707	Parameter	CType * type	244:15:6976:6986	6119478	0	True				
ANR	6119708	ParameterType	CType *		6119478	0					
ANR	6119709	Identifier	type		6119478	1					
ANR	6119710	Parameter	int depth	244:28:6989:6997	6119478	1	True				
ANR	6119711	ParameterType	int		6119478	0					
ANR	6119712	Identifier	depth		6119478	1					
ANR	6119713	CFGEntryNode	ENTRY		6119478		True				
ANR	6119714	CFGExitNode	EXIT		6119478		True				
ANR	6119715	Symbol	type -> ref		6119478						
ANR	6119716	Symbol	varstr		6119478						
ANR	6119717	Symbol	NULL		6119478						
ANR	6119718	Symbol	get_tok_str		6119478						
ANR	6119719	Symbol	* type -> ref		6119478						
ANR	6119720	Symbol	type		6119478						
ANR	6119721	Symbol	VT_BTYPE		6119478						
ANR	6119722	Symbol	type -> ref -> asm_label		6119478						
ANR	6119723	Symbol	type -> ref -> r		6119478						
ANR	6119724	Symbol	bt		6119478						
ANR	6119725	Symbol	depth		6119478						
ANR	6119726	Symbol	* type		6119478						
ANR	6119727	Symbol	type -> ref -> v		6119478						
ANR	6119728	Symbol	type -> t		6119478						
ANR	6119729	Symbol	* * type		6119478						
ANR	6119730	Function	sym_push	289:0:8013:8807							
ANR	6119731	FunctionDef	"sym_push (int v , CType * type , int r , long long c)"		6119730	0					
ANR	6119732	CompoundStatement		289:62:8075:8807	6119730	0					
ANR	6119733	IdentifierDeclStatement	"Sym * s , * * ps ;"	290:1:8078:8090	6119730	0	True				
ANR	6119734	IdentifierDecl	* s		6119730	0					
ANR	6119735	IdentifierDeclType	Sym *		6119730	0					
ANR	6119736	Identifier	s		6119730	1					
ANR	6119737	IdentifierDecl	* * ps		6119730	1					
ANR	6119738	IdentifierDeclType	Sym * *		6119730	0					
ANR	6119739	Identifier	ps		6119730	1					
ANR	6119740	IdentifierDeclStatement	TokenSym * ts ;	291:1:8093:8105	6119730	1	True				
ANR	6119741	IdentifierDecl	* ts		6119730	0					
ANR	6119742	IdentifierDeclType	TokenSym *		6119730	0					
ANR	6119743	Identifier	ts		6119730	1					
ANR	6119744	IfStatement	if ( local_stack )		6119730	2					
ANR	6119745	Condition	local_stack	293:5:8113:8123	6119730	0	True				
ANR	6119746	Identifier	local_stack		6119730	0					
ANR	6119747	CompoundStatement		5:18:50:50	6119730	1					
ANR	6119748	ExpressionStatement	ps = & local_stack	294:2:8130:8147	6119730	0	True				
ANR	6119749	AssignmentExpression	ps = & local_stack		6119730	0		=			
ANR	6119750	Identifier	ps		6119730	0					
ANR	6119751	UnaryOperationExpression	& local_stack		6119730	1					
ANR	6119752	UnaryOperator	&		6119730	0					
ANR	6119753	Identifier	local_stack		6119730	1					
ANR	6119754	ElseStatement	else		6119730	0					
ANR	6119755	CompoundStatement		7:8:81:81	6119730	0					
ANR	6119756	ExpressionStatement	ps = & global_stack	296:2:8161:8179	6119730	0	True				
ANR	6119757	AssignmentExpression	ps = & global_stack		6119730	0		=			
ANR	6119758	Identifier	ps		6119730	0					
ANR	6119759	UnaryOperationExpression	& global_stack		6119730	1					
ANR	6119760	UnaryOperator	&		6119730	0					
ANR	6119761	Identifier	global_stack		6119730	1					
ANR	6119762	ExpressionStatement	"s = sym_push2 ( ps , v , type -> t , c )"	299:1:8209:8242	6119730	3	True				
ANR	6119763	AssignmentExpression	"s = sym_push2 ( ps , v , type -> t , c )"		6119730	0		=			
ANR	6119764	Identifier	s		6119730	0					
ANR	6119765	CallExpression	"sym_push2 ( ps , v , type -> t , c )"		6119730	1					
ANR	6119766	Callee	sym_push2		6119730	0					
ANR	6119767	Identifier	sym_push2		6119730	0					
ANR	6119768	ArgumentList	ps		6119730	1					
ANR	6119769	Argument	ps		6119730	0					
ANR	6119770	Identifier	ps		6119730	0					
ANR	6119771	Argument	v		6119730	1					
ANR	6119772	Identifier	v		6119730	0					
ANR	6119773	Argument	type -> t		6119730	2					
ANR	6119774	PtrMemberAccess	type -> t		6119730	0					
ANR	6119775	Identifier	type		6119730	0					
ANR	6119776	Identifier	t		6119730	1					
ANR	6119777	Argument	c		6119730	3					
ANR	6119778	Identifier	c		6119730	0					
ANR	6119779	IfStatement	if ( ! s )		6119730	4					
ANR	6119780	Condition	! s	300:5:8249:8250	6119730	0	True				
ANR	6119781	UnaryOperationExpression	! s		6119730	0					
ANR	6119782	UnaryOperator	!		6119730	0					
ANR	6119783	Identifier	s		6119730	1					
ANR	6119784	CompoundStatement		12:9:177:177	6119730	1					
ANR	6119785	ReturnStatement	return NULL ;	301:2:8257:8268	6119730	0	True				
ANR	6119786	Identifier	NULL		6119730	0					
ANR	6119787	ExpressionStatement	s -> type . ref = type -> ref	303:1:8274:8297	6119730	5	True				
ANR	6119788	AssignmentExpression	s -> type . ref = type -> ref		6119730	0		=			
ANR	6119789	MemberAccess	s -> type . ref		6119730	0					
ANR	6119790	PtrMemberAccess	s -> type		6119730	0					
ANR	6119791	Identifier	s		6119730	0					
ANR	6119792	Identifier	type		6119730	1					
ANR	6119793	Identifier	ref		6119730	1					
ANR	6119794	PtrMemberAccess	type -> ref		6119730	1					
ANR	6119795	Identifier	type		6119730	0					
ANR	6119796	Identifier	ref		6119730	1					
ANR	6119797	ExpressionStatement	s -> r = r	304:1:8300:8308	6119730	6	True				
ANR	6119798	AssignmentExpression	s -> r = r		6119730	0		=			
ANR	6119799	PtrMemberAccess	s -> r		6119730	0					
ANR	6119800	Identifier	s		6119730	0					
ANR	6119801	Identifier	r		6119730	1					
ANR	6119802	Identifier	r		6119730	1					
ANR	6119803	IfStatement	if ( ! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM )		6119730	7					
ANR	6119804	Condition	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM	307:5:8384:8437	6119730	0	True				
ANR	6119805	AndExpression	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM		6119730	0		&&			
ANR	6119806	UnaryOperationExpression	! ( v & SYM_FIELD )		6119730	0					
ANR	6119807	UnaryOperator	!		6119730	0					
ANR	6119808	BitAndExpression	v & SYM_FIELD		6119730	1		&			
ANR	6119809	Identifier	v		6119730	0					
ANR	6119810	Identifier	SYM_FIELD		6119730	1					
ANR	6119811	RelationalExpression	( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM		6119730	1		<			
ANR	6119812	BitAndExpression	v & ~SYM_STRUCT		6119730	0		&			
ANR	6119813	Identifier	v		6119730	0					
ANR	6119814	Identifier	~SYM_STRUCT		6119730	1					
ANR	6119815	Identifier	SYM_FIRST_ANOM		6119730	1					
ANR	6119816	CompoundStatement		20:2:368:393	6119730	1					
ANR	6119817	IdentifierDeclStatement	int i = ( v & ~SYM_STRUCT ) ;	308:2:8444:8469	6119730	0	True				
ANR	6119818	IdentifierDecl	i = ( v & ~SYM_STRUCT )		6119730	0					
ANR	6119819	IdentifierDeclType	int		6119730	0					
ANR	6119820	Identifier	i		6119730	1					
ANR	6119821	AssignmentExpression	i = ( v & ~SYM_STRUCT )		6119730	2		=			
ANR	6119822	Identifier	i		6119730	0					
ANR	6119823	BitAndExpression	v & ~SYM_STRUCT		6119730	1		&			
ANR	6119824	Identifier	v		6119730	0					
ANR	6119825	Identifier	~SYM_STRUCT		6119730	1					
ANR	6119826	IfStatement	if ( i < TOK_IDENT )		6119730	1					
ANR	6119827	Condition	i < TOK_IDENT	309:6:8477:8489	6119730	0	True				
ANR	6119828	RelationalExpression	i < TOK_IDENT		6119730	0		<			
ANR	6119829	Identifier	i		6119730	0					
ANR	6119830	Identifier	TOK_IDENT		6119730	1					
ANR	6119831	CompoundStatement		21:21:416:416	6119730	1					
ANR	6119832	ExpressionStatement	"eprintf ( ""Not found\\n"" )"	310:3:8497:8520	6119730	0	True				
ANR	6119833	CallExpression	"eprintf ( ""Not found\\n"" )"		6119730	0					
ANR	6119834	Callee	eprintf		6119730	0					
ANR	6119835	Identifier	eprintf		6119730	0					
ANR	6119836	ArgumentList	"""Not found\\n"""		6119730	1					
ANR	6119837	Argument	"""Not found\\n"""		6119730	0					
ANR	6119838	PrimaryExpression	"""Not found\\n"""		6119730	0					
ANR	6119839	ReturnStatement	return NULL ;	311:3:8525:8536	6119730	1	True				
ANR	6119840	Identifier	NULL		6119730	0					
ANR	6119841	ExpressionStatement	ts = table_ident [ ( v & ~SYM_STRUCT ) - TOK_IDENT ]	315:2:8619:8666	6119730	2	True				
ANR	6119842	AssignmentExpression	ts = table_ident [ ( v & ~SYM_STRUCT ) - TOK_IDENT ]		6119730	0		=			
ANR	6119843	Identifier	ts		6119730	0					
ANR	6119844	ArrayIndexing	table_ident [ ( v & ~SYM_STRUCT ) - TOK_IDENT ]		6119730	1					
ANR	6119845	Identifier	table_ident		6119730	0					
ANR	6119846	AdditiveExpression	( v & ~SYM_STRUCT ) - TOK_IDENT		6119730	1		-			
ANR	6119847	BitAndExpression	v & ~SYM_STRUCT		6119730	0		&			
ANR	6119848	Identifier	v		6119730	0					
ANR	6119849	Identifier	~SYM_STRUCT		6119730	1					
ANR	6119850	Identifier	TOK_IDENT		6119730	1					
ANR	6119851	IfStatement	if ( v & SYM_STRUCT )		6119730	3					
ANR	6119852	Condition	v & SYM_STRUCT	316:6:8674:8687	6119730	0	True				
ANR	6119853	BitAndExpression	v & SYM_STRUCT		6119730	0		&			
ANR	6119854	Identifier	v		6119730	0					
ANR	6119855	Identifier	SYM_STRUCT		6119730	1					
ANR	6119856	CompoundStatement		28:22:614:614	6119730	1					
ANR	6119857	ExpressionStatement	ps = & ts -> sym_struct	317:3:8695:8715	6119730	0	True				
ANR	6119858	AssignmentExpression	ps = & ts -> sym_struct		6119730	0		=			
ANR	6119859	Identifier	ps		6119730	0					
ANR	6119860	UnaryOperationExpression	& ts -> sym_struct		6119730	1					
ANR	6119861	UnaryOperator	&		6119730	0					
ANR	6119862	PtrMemberAccess	ts -> sym_struct		6119730	1					
ANR	6119863	Identifier	ts		6119730	0					
ANR	6119864	Identifier	sym_struct		6119730	1					
ANR	6119865	ElseStatement	else		6119730	0					
ANR	6119866	CompoundStatement		30:9:650:650	6119730	0					
ANR	6119867	ExpressionStatement	ps = & ts -> sym_identifier	319:3:8731:8755	6119730	0	True				
ANR	6119868	AssignmentExpression	ps = & ts -> sym_identifier		6119730	0		=			
ANR	6119869	Identifier	ps		6119730	0					
ANR	6119870	UnaryOperationExpression	& ts -> sym_identifier		6119730	1					
ANR	6119871	UnaryOperator	&		6119730	0					
ANR	6119872	PtrMemberAccess	ts -> sym_identifier		6119730	1					
ANR	6119873	Identifier	ts		6119730	0					
ANR	6119874	Identifier	sym_identifier		6119730	1					
ANR	6119875	ExpressionStatement	s -> prev_tok = * ps	321:2:8763:8780	6119730	4	True				
ANR	6119876	AssignmentExpression	s -> prev_tok = * ps		6119730	0		=			
ANR	6119877	PtrMemberAccess	s -> prev_tok		6119730	0					
ANR	6119878	Identifier	s		6119730	0					
ANR	6119879	Identifier	prev_tok		6119730	1					
ANR	6119880	UnaryOperationExpression	* ps		6119730	1					
ANR	6119881	UnaryOperator	*		6119730	0					
ANR	6119882	Identifier	ps		6119730	1					
ANR	6119883	ExpressionStatement	* ps = s	322:2:8784:8791	6119730	5	True				
ANR	6119884	AssignmentExpression	* ps = s		6119730	0		=			
ANR	6119885	UnaryOperationExpression	* ps		6119730	0					
ANR	6119886	UnaryOperator	*		6119730	0					
ANR	6119887	Identifier	ps		6119730	1					
ANR	6119888	Identifier	s		6119730	1					
ANR	6119889	ReturnStatement	return s ;	324:1:8797:8805	6119730	8	True				
ANR	6119890	Identifier	s		6119730	0					
ANR	6119891	ReturnType	ST_FUNC Sym *		6119730	1					
ANR	6119892	Identifier	sym_push		6119730	2					
ANR	6119893	ParameterList	"int v , CType * type , int r , long long c"		6119730	3					
ANR	6119894	Parameter	int v	289:22:8035:8039	6119730	0	True				
ANR	6119895	ParameterType	int		6119730	0					
ANR	6119896	Identifier	v		6119730	1					
ANR	6119897	Parameter	CType * type	289:29:8042:8052	6119730	1	True				
ANR	6119898	ParameterType	CType *		6119730	0					
ANR	6119899	Identifier	type		6119730	1					
ANR	6119900	Parameter	int r	289:42:8055:8059	6119730	2	True				
ANR	6119901	ParameterType	int		6119730	0					
ANR	6119902	Identifier	r		6119730	1					
ANR	6119903	Parameter	long long c	289:49:8062:8072	6119730	3	True				
ANR	6119904	ParameterType	long long		6119730	0					
ANR	6119905	Identifier	c		6119730	1					
ANR	6119906	CFGEntryNode	ENTRY		6119730		True				
ANR	6119907	CFGExitNode	EXIT		6119730		True				
ANR	6119908	Symbol	& global_stack		6119730						
ANR	6119909	Symbol	* v		6119730						
ANR	6119910	Symbol	SYM_STRUCT		6119730						
ANR	6119911	Symbol	ps		6119730						
ANR	6119912	Symbol	& ts -> sym_identifier		6119730						
ANR	6119913	Symbol	s -> r		6119730						
ANR	6119914	Symbol	* ~SYM_STRUCT		6119730						
ANR	6119915	Symbol	s -> type . ref		6119730						
ANR	6119916	Symbol	* table_ident		6119730						
ANR	6119917	Symbol	type		6119730						
ANR	6119918	Symbol	s -> prev_tok		6119730						
ANR	6119919	Symbol	local_stack		6119730						
ANR	6119920	Symbol	sym_push2		6119730						
ANR	6119921	Symbol	* TOK_IDENT		6119730						
ANR	6119922	Symbol	SYM_FIELD		6119730						
ANR	6119923	Symbol	& ts -> sym_struct		6119730						
ANR	6119924	Symbol	* type		6119730						
ANR	6119925	Symbol	~SYM_STRUCT		6119730						
ANR	6119926	Symbol	type -> ref		6119730						
ANR	6119927	Symbol	c		6119730						
ANR	6119928	Symbol	NULL		6119730						
ANR	6119929	Symbol	SYM_FIRST_ANOM		6119730						
ANR	6119930	Symbol	TOK_IDENT		6119730						
ANR	6119931	Symbol	i		6119730						
ANR	6119932	Symbol	* ps		6119730						
ANR	6119933	Symbol	table_ident		6119730						
ANR	6119934	Symbol	r		6119730						
ANR	6119935	Symbol	s		6119730						
ANR	6119936	Symbol	v		6119730						
ANR	6119937	Symbol	& local_stack		6119730						
ANR	6119938	Symbol	type -> t		6119730						
ANR	6119939	Symbol	* s		6119730						
ANR	6119940	Symbol	s -> type		6119730						
ANR	6119941	Symbol	ts		6119730						
ANR	6119942	Function	global_identifier_push	328:0:8841:9380							
ANR	6119943	FunctionDef	"global_identifier_push (int v , int t , long long c)"		6119942	0					
ANR	6119944	CompoundStatement		328:63:8904:9380	6119942	0					
ANR	6119945	IdentifierDeclStatement	"Sym * s , * * ps ;"	329:1:8907:8919	6119942	0	True				
ANR	6119946	IdentifierDecl	* s		6119942	0					
ANR	6119947	IdentifierDeclType	Sym *		6119942	0					
ANR	6119948	Identifier	s		6119942	1					
ANR	6119949	IdentifierDecl	* * ps		6119942	1					
ANR	6119950	IdentifierDeclType	Sym * *		6119942	0					
ANR	6119951	Identifier	ps		6119942	1					
ANR	6119952	ExpressionStatement	"s = sym_push2 ( & global_stack , v , t , c )"	330:1:8922:8960	6119942	1	True				
ANR	6119953	AssignmentExpression	"s = sym_push2 ( & global_stack , v , t , c )"		6119942	0		=			
ANR	6119954	Identifier	s		6119942	0					
ANR	6119955	CallExpression	"sym_push2 ( & global_stack , v , t , c )"		6119942	1					
ANR	6119956	Callee	sym_push2		6119942	0					
ANR	6119957	Identifier	sym_push2		6119942	0					
ANR	6119958	ArgumentList	& global_stack		6119942	1					
ANR	6119959	Argument	& global_stack		6119942	0					
ANR	6119960	UnaryOperationExpression	& global_stack		6119942	0					
ANR	6119961	UnaryOperator	&		6119942	0					
ANR	6119962	Identifier	global_stack		6119942	1					
ANR	6119963	Argument	v		6119942	1					
ANR	6119964	Identifier	v		6119942	0					
ANR	6119965	Argument	t		6119942	2					
ANR	6119966	Identifier	t		6119942	0					
ANR	6119967	Argument	c		6119942	3					
ANR	6119968	Identifier	c		6119942	0					
ANR	6119969	IfStatement	if ( s && v < SYM_FIRST_ANOM )		6119942	2					
ANR	6119970	Condition	s && v < SYM_FIRST_ANOM	332:5:9004:9026	6119942	0	True				
ANR	6119971	AndExpression	s && v < SYM_FIRST_ANOM		6119942	0		&&			
ANR	6119972	Identifier	s		6119942	0					
ANR	6119973	RelationalExpression	v < SYM_FIRST_ANOM		6119942	1		<			
ANR	6119974	Identifier	v		6119942	0					
ANR	6119975	Identifier	SYM_FIRST_ANOM		6119942	1					
ANR	6119976	CompoundStatement		6:2:128:153	6119942	1					
ANR	6119977	IdentifierDeclStatement	int i = ( v & ~SYM_STRUCT ) ;	333:2:9033:9058	6119942	0	True				
ANR	6119978	IdentifierDecl	i = ( v & ~SYM_STRUCT )		6119942	0					
ANR	6119979	IdentifierDeclType	int		6119942	0					
ANR	6119980	Identifier	i		6119942	1					
ANR	6119981	AssignmentExpression	i = ( v & ~SYM_STRUCT )		6119942	2		=			
ANR	6119982	Identifier	i		6119942	0					
ANR	6119983	BitAndExpression	v & ~SYM_STRUCT		6119942	1		&			
ANR	6119984	Identifier	v		6119942	0					
ANR	6119985	Identifier	~SYM_STRUCT		6119942	1					
ANR	6119986	IfStatement	if ( i < TOK_IDENT )		6119942	1					
ANR	6119987	Condition	i < TOK_IDENT	334:6:9066:9078	6119942	0	True				
ANR	6119988	RelationalExpression	i < TOK_IDENT		6119942	0		<			
ANR	6119989	Identifier	i		6119942	0					
ANR	6119990	Identifier	TOK_IDENT		6119942	1					
ANR	6119991	CompoundStatement		7:21:176:176	6119942	1					
ANR	6119992	ExpressionStatement	"eprintf ( ""Not found\\n"" )"	335:3:9086:9109	6119942	0	True				
ANR	6119993	CallExpression	"eprintf ( ""Not found\\n"" )"		6119942	0					
ANR	6119994	Callee	eprintf		6119942	0					
ANR	6119995	Identifier	eprintf		6119942	0					
ANR	6119996	ArgumentList	"""Not found\\n"""		6119942	1					
ANR	6119997	Argument	"""Not found\\n"""		6119942	0					
ANR	6119998	PrimaryExpression	"""Not found\\n"""		6119942	0					
ANR	6119999	ReturnStatement	return NULL ;	336:3:9114:9125	6119942	1	True				
ANR	6120000	Identifier	NULL		6119942	0					
ANR	6120001	ExpressionStatement	ps = & table_ident [ i - TOK_IDENT ] -> sym_identifier	338:2:9133:9181	6119942	2	True				
ANR	6120002	AssignmentExpression	ps = & table_ident [ i - TOK_IDENT ] -> sym_identifier		6119942	0		=			
ANR	6120003	Identifier	ps		6119942	0					
ANR	6120004	UnaryOperationExpression	& table_ident [ i - TOK_IDENT ] -> sym_identifier		6119942	1					
ANR	6120005	UnaryOperator	&		6119942	0					
ANR	6120006	PtrMemberAccess	table_ident [ i - TOK_IDENT ] -> sym_identifier		6119942	1					
ANR	6120007	ArrayIndexing	table_ident [ i - TOK_IDENT ]		6119942	0					
ANR	6120008	Identifier	table_ident		6119942	0					
ANR	6120009	AdditiveExpression	i - TOK_IDENT		6119942	1		-			
ANR	6120010	Identifier	i		6119942	0					
ANR	6120011	Identifier	TOK_IDENT		6119942	1					
ANR	6120012	Identifier	sym_identifier		6119942	1					
ANR	6120013	WhileStatement	while ( * ps )		6119942	3					
ANR	6120014	Condition	* ps	341:9:9296:9298	6119942	0	True				
ANR	6120015	UnaryOperationExpression	* ps		6119942	0					
ANR	6120016	UnaryOperator	*		6119942	0					
ANR	6120017	Identifier	ps		6119942	1					
ANR	6120018	CompoundStatement		14:14:396:396	6119942	1					
ANR	6120019	ExpressionStatement	ps = & ( * ps ) -> prev_tok	342:3:9306:9327	6119942	0	True				
ANR	6120020	AssignmentExpression	ps = & ( * ps ) -> prev_tok		6119942	0		=			
ANR	6120021	Identifier	ps		6119942	0					
ANR	6120022	UnaryOperationExpression	& ( * ps ) -> prev_tok		6119942	1					
ANR	6120023	UnaryOperator	&		6119942	0					
ANR	6120024	PtrMemberAccess	( * ps ) -> prev_tok		6119942	1					
ANR	6120025	UnaryOperationExpression	* ps		6119942	0					
ANR	6120026	UnaryOperator	*		6119942	0					
ANR	6120027	Identifier	ps		6119942	1					
ANR	6120028	Identifier	prev_tok		6119942	1					
ANR	6120029	ExpressionStatement	s -> prev_tok = NULL	344:2:9335:9353	6119942	4	True				
ANR	6120030	AssignmentExpression	s -> prev_tok = NULL		6119942	0		=			
ANR	6120031	PtrMemberAccess	s -> prev_tok		6119942	0					
ANR	6120032	Identifier	s		6119942	0					
ANR	6120033	Identifier	prev_tok		6119942	1					
ANR	6120034	Identifier	NULL		6119942	1					
ANR	6120035	ExpressionStatement	* ps = s	345:2:9357:9364	6119942	5	True				
ANR	6120036	AssignmentExpression	* ps = s		6119942	0		=			
ANR	6120037	UnaryOperationExpression	* ps		6119942	0					
ANR	6120038	UnaryOperator	*		6119942	0					
ANR	6120039	Identifier	ps		6119942	1					
ANR	6120040	Identifier	s		6119942	1					
ANR	6120041	ReturnStatement	return s ;	347:1:9370:9378	6119942	3	True				
ANR	6120042	Identifier	s		6119942	0					
ANR	6120043	ReturnType	ST_FUNC Sym *		6119942	1					
ANR	6120044	Identifier	global_identifier_push		6119942	2					
ANR	6120045	ParameterList	"int v , int t , long long c"		6119942	3					
ANR	6120046	Parameter	int v	328:36:8877:8881	6119942	0	True				
ANR	6120047	ParameterType	int		6119942	0					
ANR	6120048	Identifier	v		6119942	1					
ANR	6120049	Parameter	int t	328:43:8884:8888	6119942	1	True				
ANR	6120050	ParameterType	int		6119942	0					
ANR	6120051	Identifier	t		6119942	1					
ANR	6120052	Parameter	long long c	328:50:8891:8901	6119942	2	True				
ANR	6120053	ParameterType	long long		6119942	0					
ANR	6120054	Identifier	c		6119942	1					
ANR	6120055	CFGEntryNode	ENTRY		6119942		True				
ANR	6120056	CFGExitNode	EXIT		6119942		True				
ANR	6120057	Symbol	& global_stack		6119942						
ANR	6120058	Symbol	c		6119942						
ANR	6120059	Symbol	ps		6119942						
ANR	6120060	Symbol	SYM_FIRST_ANOM		6119942						
ANR	6120061	Symbol	NULL		6119942						
ANR	6120062	Symbol	TOK_IDENT		6119942						
ANR	6120063	Symbol	i		6119942						
ANR	6120064	Symbol	* ps		6119942						
ANR	6120065	Symbol	* table_ident		6119942						
ANR	6120066	Symbol	s -> prev_tok		6119942						
ANR	6120067	Symbol	sym_push2		6119942						
ANR	6120068	Symbol	table_ident		6119942						
ANR	6120069	Symbol	* TOK_IDENT		6119942						
ANR	6120070	Symbol	s		6119942						
ANR	6120071	Symbol	* i		6119942						
ANR	6120072	Symbol	t		6119942						
ANR	6120073	Symbol	v		6119942						
ANR	6120074	Symbol	~SYM_STRUCT		6119942						
ANR	6120075	Symbol	& table_ident [ i - TOK_IDENT ] -> sym_identifier		6119942						
ANR	6120076	Symbol	& ( * ps ) -> prev_tok		6119942						
ANR	6120077	Symbol	* s		6119942						
ANR	6120078	Function	sym_pop	351:0:9423:10050							
ANR	6120079	FunctionDef	"sym_pop (Sym * * ptop , Sym * b)"		6120078	0					
ANR	6120080	CompoundStatement		351:41:9464:10050	6120078	0					
ANR	6120081	IdentifierDeclStatement	"Sym * s , * ss , * * ps ;"	352:1:9467:9484	6120078	0	True				
ANR	6120082	IdentifierDecl	* s		6120078	0					
ANR	6120083	IdentifierDeclType	Sym *		6120078	0					
ANR	6120084	Identifier	s		6120078	1					
ANR	6120085	IdentifierDecl	* ss		6120078	1					
ANR	6120086	IdentifierDeclType	Sym *		6120078	0					
ANR	6120087	Identifier	ss		6120078	1					
ANR	6120088	IdentifierDecl	* * ps		6120078	2					
ANR	6120089	IdentifierDeclType	Sym * *		6120078	0					
ANR	6120090	Identifier	ps		6120078	1					
ANR	6120091	IdentifierDeclStatement	TokenSym * ts ;	353:1:9487:9499	6120078	1	True				
ANR	6120092	IdentifierDecl	* ts		6120078	0					
ANR	6120093	IdentifierDeclType	TokenSym *		6120078	0					
ANR	6120094	Identifier	ts		6120078	1					
ANR	6120095	IdentifierDeclStatement	int v ;	354:1:9502:9507	6120078	2	True				
ANR	6120096	IdentifierDecl	v		6120078	0					
ANR	6120097	IdentifierDeclType	int		6120078	0					
ANR	6120098	Identifier	v		6120078	1					
ANR	6120099	IfStatement	if ( ! b )		6120078	3					
ANR	6120100	Condition	! b	355:5:9514:9515	6120078	0	True				
ANR	6120101	UnaryOperationExpression	! b		6120078	0					
ANR	6120102	UnaryOperator	!		6120078	0					
ANR	6120103	Identifier	b		6120078	1					
ANR	6120104	CompoundStatement		5:9:53:53	6120078	1					
ANR	6120105	ReturnStatement	return ;	356:2:9522:9528	6120078	0	True				
ANR	6120106	ExpressionStatement	s = * ptop	359:1:9535:9544	6120078	4	True				
ANR	6120107	AssignmentExpression	s = * ptop		6120078	0		=			
ANR	6120108	Identifier	s		6120078	0					
ANR	6120109	UnaryOperationExpression	* ptop		6120078	1					
ANR	6120110	UnaryOperator	*		6120078	0					
ANR	6120111	Identifier	ptop		6120078	1					
ANR	6120112	WhileStatement	while ( s != b )		6120078	5					
ANR	6120113	Condition	s != b	360:8:9554:9559	6120078	0	True				
ANR	6120114	EqualityExpression	s != b		6120078	0		!=			
ANR	6120115	Identifier	s		6120078	0					
ANR	6120116	Identifier	b		6120078	1					
ANR	6120117	CompoundStatement		10:16:97:97	6120078	1					
ANR	6120118	ExpressionStatement	ss = s -> prev	361:2:9566:9578	6120078	0	True				
ANR	6120119	AssignmentExpression	ss = s -> prev		6120078	0		=			
ANR	6120120	Identifier	ss		6120078	0					
ANR	6120121	PtrMemberAccess	s -> prev		6120078	1					
ANR	6120122	Identifier	s		6120078	0					
ANR	6120123	Identifier	prev		6120078	1					
ANR	6120124	ExpressionStatement	v = s -> v	362:2:9582:9590	6120078	1	True				
ANR	6120125	AssignmentExpression	v = s -> v		6120078	0		=			
ANR	6120126	Identifier	v		6120078	0					
ANR	6120127	PtrMemberAccess	s -> v		6120078	1					
ANR	6120128	Identifier	s		6120078	0					
ANR	6120129	Identifier	v		6120078	1					
ANR	6120130	IfStatement	if ( ! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM )		6120078	2					
ANR	6120131	Condition	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM	365:6:9657:9710	6120078	0	True				
ANR	6120132	AndExpression	! ( v & SYM_FIELD ) && ( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM		6120078	0		&&			
ANR	6120133	UnaryOperationExpression	! ( v & SYM_FIELD )		6120078	0					
ANR	6120134	UnaryOperator	!		6120078	0					
ANR	6120135	BitAndExpression	v & SYM_FIELD		6120078	1		&			
ANR	6120136	Identifier	v		6120078	0					
ANR	6120137	Identifier	SYM_FIELD		6120078	1					
ANR	6120138	RelationalExpression	( v & ~SYM_STRUCT ) < SYM_FIRST_ANOM		6120078	1		<			
ANR	6120139	BitAndExpression	v & ~SYM_STRUCT		6120078	0		&			
ANR	6120140	Identifier	v		6120078	0					
ANR	6120141	Identifier	~SYM_STRUCT		6120078	1					
ANR	6120142	Identifier	SYM_FIRST_ANOM		6120078	1					
ANR	6120143	CompoundStatement		16:3:253:278	6120078	1					
ANR	6120144	IdentifierDeclStatement	int i = ( v & ~SYM_STRUCT ) ;	366:3:9718:9743	6120078	0	True				
ANR	6120145	IdentifierDecl	i = ( v & ~SYM_STRUCT )		6120078	0					
ANR	6120146	IdentifierDeclType	int		6120078	0					
ANR	6120147	Identifier	i		6120078	1					
ANR	6120148	AssignmentExpression	i = ( v & ~SYM_STRUCT )		6120078	2		=			
ANR	6120149	Identifier	i		6120078	0					
ANR	6120150	BitAndExpression	v & ~SYM_STRUCT		6120078	1		&			
ANR	6120151	Identifier	v		6120078	0					
ANR	6120152	Identifier	~SYM_STRUCT		6120078	1					
ANR	6120153	IfStatement	if ( i < TOK_IDENT )		6120078	1					
ANR	6120154	Condition	i < TOK_IDENT	367:7:9752:9764	6120078	0	True				
ANR	6120155	RelationalExpression	i < TOK_IDENT		6120078	0		<			
ANR	6120156	Identifier	i		6120078	0					
ANR	6120157	Identifier	TOK_IDENT		6120078	1					
ANR	6120158	CompoundStatement		17:22:302:302	6120078	1					
ANR	6120159	ExpressionStatement	"eprintf ( ""Not found\\n"" )"	368:4:9773:9796	6120078	0	True				
ANR	6120160	CallExpression	"eprintf ( ""Not found\\n"" )"		6120078	0					
ANR	6120161	Callee	eprintf		6120078	0					
ANR	6120162	Identifier	eprintf		6120078	0					
ANR	6120163	ArgumentList	"""Not found\\n"""		6120078	1					
ANR	6120164	Argument	"""Not found\\n"""		6120078	0					
ANR	6120165	PrimaryExpression	"""Not found\\n"""		6120078	0					
ANR	6120166	ReturnStatement	return ;	369:4:9802:9808	6120078	1	True				
ANR	6120167	ExpressionStatement	ts = table_ident [ i - TOK_IDENT ]	371:3:9818:9849	6120078	2	True				
ANR	6120168	AssignmentExpression	ts = table_ident [ i - TOK_IDENT ]		6120078	0		=			
ANR	6120169	Identifier	ts		6120078	0					
ANR	6120170	ArrayIndexing	table_ident [ i - TOK_IDENT ]		6120078	1					
ANR	6120171	Identifier	table_ident		6120078	0					
ANR	6120172	AdditiveExpression	i - TOK_IDENT		6120078	1		-			
ANR	6120173	Identifier	i		6120078	0					
ANR	6120174	Identifier	TOK_IDENT		6120078	1					
ANR	6120175	IfStatement	if ( v & SYM_STRUCT )		6120078	3					
ANR	6120176	Condition	v & SYM_STRUCT	372:7:9892:9905	6120078	0	True				
ANR	6120177	BitAndExpression	v & SYM_STRUCT		6120078	0		&			
ANR	6120178	Identifier	v		6120078	0					
ANR	6120179	Identifier	SYM_STRUCT		6120078	1					
ANR	6120180	CompoundStatement		22:23:443:443	6120078	1					
ANR	6120181	ExpressionStatement	ps = & ts -> sym_struct	373:4:9914:9934	6120078	0	True				
ANR	6120182	AssignmentExpression	ps = & ts -> sym_struct		6120078	0		=			
ANR	6120183	Identifier	ps		6120078	0					
ANR	6120184	UnaryOperationExpression	& ts -> sym_struct		6120078	1					
ANR	6120185	UnaryOperator	&		6120078	0					
ANR	6120186	PtrMemberAccess	ts -> sym_struct		6120078	1					
ANR	6120187	Identifier	ts		6120078	0					
ANR	6120188	Identifier	sym_struct		6120078	1					
ANR	6120189	ElseStatement	else		6120078	0					
ANR	6120190	CompoundStatement		24:10:481:481	6120078	0					
ANR	6120191	ExpressionStatement	ps = & ts -> sym_identifier	375:4:9952:9976	6120078	0	True				
ANR	6120192	AssignmentExpression	ps = & ts -> sym_identifier		6120078	0		=			
ANR	6120193	Identifier	ps		6120078	0					
ANR	6120194	UnaryOperationExpression	& ts -> sym_identifier		6120078	1					
ANR	6120195	UnaryOperator	&		6120078	0					
ANR	6120196	PtrMemberAccess	ts -> sym_identifier		6120078	1					
ANR	6120197	Identifier	ts		6120078	0					
ANR	6120198	Identifier	sym_identifier		6120078	1					
ANR	6120199	ExpressionStatement	* ps = s -> prev_tok	377:3:9986:10003	6120078	4	True				
ANR	6120200	AssignmentExpression	* ps = s -> prev_tok		6120078	0		=			
ANR	6120201	UnaryOperationExpression	* ps		6120078	0					
ANR	6120202	UnaryOperator	*		6120078	0					
ANR	6120203	Identifier	ps		6120078	1					
ANR	6120204	PtrMemberAccess	s -> prev_tok		6120078	1					
ANR	6120205	Identifier	s		6120078	0					
ANR	6120206	Identifier	prev_tok		6120078	1					
ANR	6120207	ExpressionStatement	sym_free ( s )	379:2:10011:10023	6120078	3	True				
ANR	6120208	CallExpression	sym_free ( s )		6120078	0					
ANR	6120209	Callee	sym_free		6120078	0					
ANR	6120210	Identifier	sym_free		6120078	0					
ANR	6120211	ArgumentList	s		6120078	1					
ANR	6120212	Argument	s		6120078	0					
ANR	6120213	Identifier	s		6120078	0					
ANR	6120214	ExpressionStatement	s = ss	380:2:10027:10033	6120078	4	True				
ANR	6120215	AssignmentExpression	s = ss		6120078	0		=			
ANR	6120216	Identifier	s		6120078	0					
ANR	6120217	Identifier	ss		6120078	1					
ANR	6120218	ExpressionStatement	* ptop = b	382:1:10039:10048	6120078	6	True				
ANR	6120219	AssignmentExpression	* ptop = b		6120078	0		=			
ANR	6120220	UnaryOperationExpression	* ptop		6120078	0					
ANR	6120221	UnaryOperator	*		6120078	0					
ANR	6120222	Identifier	ptop		6120078	1					
ANR	6120223	Identifier	b		6120078	1					
ANR	6120224	ReturnType	ST_FUNC void		6120078	1					
ANR	6120225	Identifier	sym_pop		6120078	2					
ANR	6120226	ParameterList	"Sym * * ptop , Sym * b"		6120078	3					
ANR	6120227	Parameter	Sym * * ptop	351:21:9444:9453	6120078	0	True				
ANR	6120228	ParameterType	Sym * *		6120078	0					
ANR	6120229	Identifier	ptop		6120078	1					
ANR	6120230	Parameter	Sym * b	351:33:9456:9461	6120078	1	True				
ANR	6120231	ParameterType	Sym *		6120078	0					
ANR	6120232	Identifier	b		6120078	1					
ANR	6120233	CFGEntryNode	ENTRY		6120078		True				
ANR	6120234	CFGExitNode	EXIT		6120078		True				
ANR	6120235	Symbol	SYM_STRUCT		6120078						
ANR	6120236	Symbol	s -> v		6120078						
ANR	6120237	Symbol	ps		6120078						
ANR	6120238	Symbol	& ts -> sym_identifier		6120078						
ANR	6120239	Symbol	s -> prev		6120078						
ANR	6120240	Symbol	* table_ident		6120078						
ANR	6120241	Symbol	s -> prev_tok		6120078						
ANR	6120242	Symbol	ptop		6120078						
ANR	6120243	Symbol	* TOK_IDENT		6120078						
ANR	6120244	Symbol	SYM_FIELD		6120078						
ANR	6120245	Symbol	& ts -> sym_struct		6120078						
ANR	6120246	Symbol	~SYM_STRUCT		6120078						
ANR	6120247	Symbol	ss		6120078						
ANR	6120248	Symbol	b		6120078						
ANR	6120249	Symbol	SYM_FIRST_ANOM		6120078						
ANR	6120250	Symbol	TOK_IDENT		6120078						
ANR	6120251	Symbol	i		6120078						
ANR	6120252	Symbol	* ps		6120078						
ANR	6120253	Symbol	table_ident		6120078						
ANR	6120254	Symbol	s		6120078						
ANR	6120255	Symbol	* i		6120078						
ANR	6120256	Symbol	v		6120078						
ANR	6120257	Symbol	* ptop		6120078						
ANR	6120258	Symbol	* s		6120078						
ANR	6120259	Symbol	ts		6120078						
ANR	6120260	Function	weaken_symbol	385:0:10053:10116							
ANR	6120261	FunctionDef	weaken_symbol (Sym * sym)		6120260	0					
ANR	6120262	CompoundStatement		385:36:10089:10116	6120260	0					
ANR	6120263	ExpressionStatement	sym -> type . t |= VT_WEAK	386:1:10092:10114	6120260	0	True				
ANR	6120264	AssignmentExpression	sym -> type . t |= VT_WEAK		6120260	0		|=			
ANR	6120265	MemberAccess	sym -> type . t		6120260	0					
ANR	6120266	PtrMemberAccess	sym -> type		6120260	0					
ANR	6120267	Identifier	sym		6120260	0					
ANR	6120268	Identifier	type		6120260	1					
ANR	6120269	Identifier	t		6120260	1					
ANR	6120270	Identifier	VT_WEAK		6120260	1					
ANR	6120271	ReturnType	static void		6120260	1					
ANR	6120272	Identifier	weaken_symbol		6120260	2					
ANR	6120273	ParameterList	Sym * sym		6120260	3					
ANR	6120274	Parameter	Sym * sym	385:26:10079:10086	6120260	0	True				
ANR	6120275	ParameterType	Sym *		6120260	0					
ANR	6120276	Identifier	sym		6120260	1					
ANR	6120277	CFGEntryNode	ENTRY		6120260		True				
ANR	6120278	CFGExitNode	EXIT		6120260		True				
ANR	6120279	Symbol	* sym		6120260						
ANR	6120280	Symbol	sym		6120260						
ANR	6120281	Symbol	sym -> type . t		6120260						
ANR	6120282	Symbol	sym -> type		6120260						
ANR	6120283	Symbol	VT_WEAK		6120260						
ANR	6120284	Function	swap	391:0:10200:10272							
ANR	6120285	FunctionDef	"swap (int * p , int * q)"		6120284	0					
ANR	6120286	CompoundStatement		391:34:10234:10272	6120284	0					
ANR	6120287	IdentifierDeclStatement	int t ;	392:1:10237:10242	6120284	0	True				
ANR	6120288	IdentifierDecl	t		6120284	0					
ANR	6120289	IdentifierDeclType	int		6120284	0					
ANR	6120290	Identifier	t		6120284	1					
ANR	6120291	ExpressionStatement	t = * p	393:1:10245:10251	6120284	1	True				
ANR	6120292	AssignmentExpression	t = * p		6120284	0		=			
ANR	6120293	Identifier	t		6120284	0					
ANR	6120294	UnaryOperationExpression	* p		6120284	1					
ANR	6120295	UnaryOperator	*		6120284	0					
ANR	6120296	Identifier	p		6120284	1					
ANR	6120297	ExpressionStatement	* p = * q	394:1:10254:10261	6120284	2	True				
ANR	6120298	AssignmentExpression	* p = * q		6120284	0		=			
ANR	6120299	UnaryOperationExpression	* p		6120284	0					
ANR	6120300	UnaryOperator	*		6120284	0					
ANR	6120301	Identifier	p		6120284	1					
ANR	6120302	UnaryOperationExpression	* q		6120284	1					
ANR	6120303	UnaryOperator	*		6120284	0					
ANR	6120304	Identifier	q		6120284	1					
ANR	6120305	ExpressionStatement	* q = t	395:1:10264:10270	6120284	3	True				
ANR	6120306	AssignmentExpression	* q = t		6120284	0		=			
ANR	6120307	UnaryOperationExpression	* q		6120284	0					
ANR	6120308	UnaryOperator	*		6120284	0					
ANR	6120309	Identifier	q		6120284	1					
ANR	6120310	Identifier	t		6120284	1					
ANR	6120311	ReturnType	ST_FUNC void		6120284	1					
ANR	6120312	Identifier	swap		6120284	2					
ANR	6120313	ParameterList	"int * p , int * q"		6120284	3					
ANR	6120314	Parameter	int * p	391:18:10218:10223	6120284	0	True				
ANR	6120315	ParameterType	int *		6120284	0					
ANR	6120316	Identifier	p		6120284	1					
ANR	6120317	Parameter	int * q	391:26:10226:10231	6120284	1	True				
ANR	6120318	ParameterType	int *		6120284	0					
ANR	6120319	Identifier	q		6120284	1					
ANR	6120320	CFGEntryNode	ENTRY		6120284		True				
ANR	6120321	CFGExitNode	EXIT		6120284		True				
ANR	6120322	Symbol	p		6120284						
ANR	6120323	Symbol	q		6120284						
ANR	6120324	Symbol	t		6120284						
ANR	6120325	Symbol	* p		6120284						
ANR	6120326	Symbol	* q		6120284						
ANR	6120327	Function	vsetc	398:0:10275:10482							
ANR	6120328	FunctionDef	"vsetc (CType * type , int r , CValue * vc)"		6120327	0					
ANR	6120329	CompoundStatement		398:50:10325:10482	6120327	0					
ANR	6120330	IfStatement	if ( vtop >= vstack + ( VSTACK_SIZE - 1 ) )		6120327	0					
ANR	6120331	Condition	vtop >= vstack + ( VSTACK_SIZE - 1 )	399:5:10332:10365	6120327	0	True				
ANR	6120332	RelationalExpression	vtop >= vstack + ( VSTACK_SIZE - 1 )		6120327	0		>=			
ANR	6120333	Identifier	vtop		6120327	0					
ANR	6120334	AdditiveExpression	vstack + ( VSTACK_SIZE - 1 )		6120327	1		+			
ANR	6120335	Identifier	vstack		6120327	0					
ANR	6120336	AdditiveExpression	VSTACK_SIZE - 1		6120327	1		-			
ANR	6120337	Identifier	VSTACK_SIZE		6120327	0					
ANR	6120338	PrimaryExpression	1		6120327	1					
ANR	6120339	CompoundStatement		2:41:42:42	6120327	1					
ANR	6120340	ExpressionStatement	"TCC_ERR ( ""memory full"" )"	400:2:10372:10395	6120327	0	True				
ANR	6120341	CallExpression	"TCC_ERR ( ""memory full"" )"		6120327	0					
ANR	6120342	Callee	TCC_ERR		6120327	0					
ANR	6120343	Identifier	TCC_ERR		6120327	0					
ANR	6120344	ArgumentList	"""memory full"""		6120327	1					
ANR	6120345	Argument	"""memory full"""		6120327	0					
ANR	6120346	PrimaryExpression	"""memory full"""		6120327	0					
ANR	6120347	ExpressionStatement	vtop ++	402:1:10401:10407	6120327	1	True				
ANR	6120348	PostIncDecOperationExpression	vtop ++		6120327	0					
ANR	6120349	Identifier	vtop		6120327	0					
ANR	6120350	IncDec	++		6120327	1					
ANR	6120351	ExpressionStatement	vtop -> type = * type	403:1:10410:10428	6120327	2	True				
ANR	6120352	AssignmentExpression	vtop -> type = * type		6120327	0		=			
ANR	6120353	PtrMemberAccess	vtop -> type		6120327	0					
ANR	6120354	Identifier	vtop		6120327	0					
ANR	6120355	Identifier	type		6120327	1					
ANR	6120356	UnaryOperationExpression	* type		6120327	1					
ANR	6120357	UnaryOperator	*		6120327	0					
ANR	6120358	Identifier	type		6120327	1					
ANR	6120359	ExpressionStatement	vtop -> r = r	404:1:10431:10442	6120327	3	True				
ANR	6120360	AssignmentExpression	vtop -> r = r		6120327	0		=			
ANR	6120361	PtrMemberAccess	vtop -> r		6120327	0					
ANR	6120362	Identifier	vtop		6120327	0					
ANR	6120363	Identifier	r		6120327	1					
ANR	6120364	Identifier	r		6120327	1					
ANR	6120365	ExpressionStatement	vtop -> r2 = VT_CONST	405:1:10445:10464	6120327	4	True				
ANR	6120366	AssignmentExpression	vtop -> r2 = VT_CONST		6120327	0		=			
ANR	6120367	PtrMemberAccess	vtop -> r2		6120327	0					
ANR	6120368	Identifier	vtop		6120327	0					
ANR	6120369	Identifier	r2		6120327	1					
ANR	6120370	Identifier	VT_CONST		6120327	1					
ANR	6120371	ExpressionStatement	vtop -> c = * vc	406:1:10467:10480	6120327	5	True				
ANR	6120372	AssignmentExpression	vtop -> c = * vc		6120327	0		=			
ANR	6120373	PtrMemberAccess	vtop -> c		6120327	0					
ANR	6120374	Identifier	vtop		6120327	0					
ANR	6120375	Identifier	c		6120327	1					
ANR	6120376	UnaryOperationExpression	* vc		6120327	1					
ANR	6120377	UnaryOperator	*		6120327	0					
ANR	6120378	Identifier	vc		6120327	1					
ANR	6120379	ReturnType	static void		6120327	1					
ANR	6120380	Identifier	vsetc		6120327	2					
ANR	6120381	ParameterList	"CType * type , int r , CValue * vc"		6120327	3					
ANR	6120382	Parameter	CType * type	398:18:10293:10303	6120327	0	True				
ANR	6120383	ParameterType	CType *		6120327	0					
ANR	6120384	Identifier	type		6120327	1					
ANR	6120385	Parameter	int r	398:31:10306:10310	6120327	1	True				
ANR	6120386	ParameterType	int		6120327	0					
ANR	6120387	Identifier	r		6120327	1					
ANR	6120388	Parameter	CValue * vc	398:38:10313:10322	6120327	2	True				
ANR	6120389	ParameterType	CValue *		6120327	0					
ANR	6120390	Identifier	vc		6120327	1					
ANR	6120391	CFGEntryNode	ENTRY		6120327		True				
ANR	6120392	CFGExitNode	EXIT		6120327		True				
ANR	6120393	Symbol	VT_CONST		6120327						
ANR	6120394	Symbol	vtop -> r2		6120327						
ANR	6120395	Symbol	vtop -> type		6120327						
ANR	6120396	Symbol	vtop		6120327						
ANR	6120397	Symbol	vtop -> c		6120327						
ANR	6120398	Symbol	type		6120327						
ANR	6120399	Symbol	vc		6120327						
ANR	6120400	Symbol	VSTACK_SIZE		6120327						
ANR	6120401	Symbol	* vtop		6120327						
ANR	6120402	Symbol	* vc		6120327						
ANR	6120403	Symbol	r		6120327						
ANR	6120404	Symbol	vstack		6120327						
ANR	6120405	Symbol	* type		6120327						
ANR	6120406	Symbol	vtop -> r		6120327						
ANR	6120407	Function	vpush	410:0:10539:10619							
ANR	6120408	FunctionDef	vpush (CType * type)		6120407	0					
ANR	6120409	CompoundStatement		410:24:10563:10619	6120407	0					
ANR	6120410	IdentifierDeclStatement	CValue cval = { 0 } ;	411:1:10566:10585	6120407	0	True				
ANR	6120411	IdentifierDecl	cval = { 0 }		6120407	0					
ANR	6120412	IdentifierDeclType	CValue		6120407	0					
ANR	6120413	Identifier	cval		6120407	1					
ANR	6120414	AssignmentExpression	cval = { 0 }		6120407	2		=			
ANR	6120415	Identifier	cval		6120407	0					
ANR	6120416	InitializerList	0		6120407	1					
ANR	6120417	PrimaryExpression	0		6120407	0					
ANR	6120418	ExpressionStatement	"vsetc ( type , VT_CONST , & cval )"	412:1:10588:10617	6120407	1	True				
ANR	6120419	CallExpression	"vsetc ( type , VT_CONST , & cval )"		6120407	0					
ANR	6120420	Callee	vsetc		6120407	0					
ANR	6120421	Identifier	vsetc		6120407	0					
ANR	6120422	ArgumentList	type		6120407	1					
ANR	6120423	Argument	type		6120407	0					
ANR	6120424	Identifier	type		6120407	0					
ANR	6120425	Argument	VT_CONST		6120407	1					
ANR	6120426	Identifier	VT_CONST		6120407	0					
ANR	6120427	Argument	& cval		6120407	2					
ANR	6120428	UnaryOperationExpression	& cval		6120407	0					
ANR	6120429	UnaryOperator	&		6120407	0					
ANR	6120430	Identifier	cval		6120407	1					
ANR	6120431	ReturnType	void		6120407	1					
ANR	6120432	Identifier	vpush		6120407	2					
ANR	6120433	ParameterList	CType * type		6120407	3					
ANR	6120434	Parameter	CType * type	410:11:10550:10560	6120407	0	True				
ANR	6120435	ParameterType	CType *		6120407	0					
ANR	6120436	Identifier	type		6120407	1					
ANR	6120437	CFGEntryNode	ENTRY		6120407		True				
ANR	6120438	CFGExitNode	EXIT		6120407		True				
ANR	6120439	Symbol	cval		6120407						
ANR	6120440	Symbol	VT_CONST		6120407						
ANR	6120441	Symbol	& cval		6120407						
ANR	6120442	Symbol	type		6120407						
ANR	6120443	Function	vpushi	416:0:10650:10753							
ANR	6120444	FunctionDef	vpushi (int v)		6120443	0					
ANR	6120445	CompoundStatement		416:27:10677:10753	6120443	0					
ANR	6120446	IdentifierDeclStatement	CValue cval = { 0 } ;	417:1:10680:10699	6120443	0	True				
ANR	6120447	IdentifierDecl	cval = { 0 }		6120443	0					
ANR	6120448	IdentifierDeclType	CValue		6120443	0					
ANR	6120449	Identifier	cval		6120443	1					
ANR	6120450	AssignmentExpression	cval = { 0 }		6120443	2		=			
ANR	6120451	Identifier	cval		6120443	0					
ANR	6120452	InitializerList	0		6120443	1					
ANR	6120453	PrimaryExpression	0		6120443	0					
ANR	6120454	ExpressionStatement	cval . i = v	418:1:10702:10712	6120443	1	True				
ANR	6120455	AssignmentExpression	cval . i = v		6120443	0		=			
ANR	6120456	MemberAccess	cval . i		6120443	0					
ANR	6120457	Identifier	cval		6120443	0					
ANR	6120458	Identifier	i		6120443	1					
ANR	6120459	Identifier	v		6120443	1					
ANR	6120460	ExpressionStatement	"vsetc ( & int32_type , VT_CONST , & cval )"	419:1:10715:10751	6120443	2	True				
ANR	6120461	CallExpression	"vsetc ( & int32_type , VT_CONST , & cval )"		6120443	0					
ANR	6120462	Callee	vsetc		6120443	0					
ANR	6120463	Identifier	vsetc		6120443	0					
ANR	6120464	ArgumentList	& int32_type		6120443	1					
ANR	6120465	Argument	& int32_type		6120443	0					
ANR	6120466	UnaryOperationExpression	& int32_type		6120443	0					
ANR	6120467	UnaryOperator	&		6120443	0					
ANR	6120468	Identifier	int32_type		6120443	1					
ANR	6120469	Argument	VT_CONST		6120443	1					
ANR	6120470	Identifier	VT_CONST		6120443	0					
ANR	6120471	Argument	& cval		6120443	2					
ANR	6120472	UnaryOperationExpression	& cval		6120443	0					
ANR	6120473	UnaryOperator	&		6120443	0					
ANR	6120474	Identifier	cval		6120443	1					
ANR	6120475	ReturnType	ST_FUNC void		6120443	1					
ANR	6120476	Identifier	vpushi		6120443	2					
ANR	6120477	ParameterList	int v		6120443	3					
ANR	6120478	Parameter	int v	416:20:10670:10674	6120443	0	True				
ANR	6120479	ParameterType	int		6120443	0					
ANR	6120480	Identifier	v		6120443	1					
ANR	6120481	CFGEntryNode	ENTRY		6120443		True				
ANR	6120482	CFGExitNode	EXIT		6120443		True				
ANR	6120483	Symbol	cval		6120443						
ANR	6120484	Symbol	& int32_type		6120443						
ANR	6120485	Symbol	VT_CONST		6120443						
ANR	6120486	Symbol	& cval		6120443						
ANR	6120487	Symbol	v		6120443						
ANR	6120488	Symbol	cval . i		6120443						
ANR	6120489	Function	vpushs	423:0:10792:10949							
ANR	6120490	FunctionDef	vpushs (long long v)		6120489	0					
ANR	6120491	CompoundStatement		423:32:10824:10949	6120489	0					
ANR	6120492	IdentifierDeclStatement	CValue cval ;	424:1:10827:10838	6120489	0	True				
ANR	6120493	IdentifierDecl	cval		6120489	0					
ANR	6120494	IdentifierDeclType	CValue		6120489	0					
ANR	6120495	Identifier	cval		6120489	1					
ANR	6120496	IfStatement	if ( PTR_SIZE == 4 )		6120489	1					
ANR	6120497	Condition	PTR_SIZE == 4	425:5:10845:10857	6120489	0	True				
ANR	6120498	EqualityExpression	PTR_SIZE == 4		6120489	0		==			
ANR	6120499	Identifier	PTR_SIZE		6120489	0					
ANR	6120500	PrimaryExpression	4		6120489	1					
ANR	6120501	CompoundStatement		3:20:35:35	6120489	1					
ANR	6120502	ExpressionStatement	cval . i = ( int ) v	426:2:10864:10880	6120489	0	True				
ANR	6120503	AssignmentExpression	cval . i = ( int ) v		6120489	0		=			
ANR	6120504	MemberAccess	cval . i		6120489	0					
ANR	6120505	Identifier	cval		6120489	0					
ANR	6120506	Identifier	i		6120489	1					
ANR	6120507	CastExpression	( int ) v		6120489	1					
ANR	6120508	CastTarget	int		6120489	0					
ANR	6120509	Identifier	v		6120489	1					
ANR	6120510	ElseStatement	else		6120489	0					
ANR	6120511	CompoundStatement		5:8:65:65	6120489	0					
ANR	6120512	ExpressionStatement	cval . ull = v	428:2:10894:10906	6120489	0	True				
ANR	6120513	AssignmentExpression	cval . ull = v		6120489	0		=			
ANR	6120514	MemberAccess	cval . ull		6120489	0					
ANR	6120515	Identifier	cval		6120489	0					
ANR	6120516	Identifier	ull		6120489	1					
ANR	6120517	Identifier	v		6120489	1					
ANR	6120518	ExpressionStatement	"vsetc ( & size_type , VT_CONST , & cval )"	430:1:10912:10947	6120489	2	True				
ANR	6120519	CallExpression	"vsetc ( & size_type , VT_CONST , & cval )"		6120489	0					
ANR	6120520	Callee	vsetc		6120489	0					
ANR	6120521	Identifier	vsetc		6120489	0					
ANR	6120522	ArgumentList	& size_type		6120489	1					
ANR	6120523	Argument	& size_type		6120489	0					
ANR	6120524	UnaryOperationExpression	& size_type		6120489	0					
ANR	6120525	UnaryOperator	&		6120489	0					
ANR	6120526	Identifier	size_type		6120489	1					
ANR	6120527	Argument	VT_CONST		6120489	1					
ANR	6120528	Identifier	VT_CONST		6120489	0					
ANR	6120529	Argument	& cval		6120489	2					
ANR	6120530	UnaryOperationExpression	& cval		6120489	0					
ANR	6120531	UnaryOperator	&		6120489	0					
ANR	6120532	Identifier	cval		6120489	1					
ANR	6120533	ReturnType	static void		6120489	1					
ANR	6120534	Identifier	vpushs		6120489	2					
ANR	6120535	ParameterList	long long v		6120489	3					
ANR	6120536	Parameter	long long v	423:19:10811:10821	6120489	0	True				
ANR	6120537	ParameterType	long long		6120489	0					
ANR	6120538	Identifier	v		6120489	1					
ANR	6120539	CFGEntryNode	ENTRY		6120489		True				
ANR	6120540	CFGExitNode	EXIT		6120489		True				
ANR	6120541	Symbol	cval		6120489						
ANR	6120542	Symbol	VT_CONST		6120489						
ANR	6120543	Symbol	& cval		6120489						
ANR	6120544	Symbol	& size_type		6120489						
ANR	6120545	Symbol	v		6120489						
ANR	6120546	Symbol	cval . ull		6120489						
ANR	6120547	Symbol	PTR_SIZE		6120489						
ANR	6120548	Symbol	cval . i		6120489						
ANR	6120549	Function	vpush64	434:0:10989:11145							
ANR	6120550	FunctionDef	"vpush64 (int ty , unsigned long long v)"		6120549	0					
ANR	6120551	CompoundStatement		434:43:11032:11145	6120549	0					
ANR	6120552	IdentifierDeclStatement	CValue cval ;	435:1:11035:11046	6120549	0	True				
ANR	6120553	IdentifierDecl	cval		6120549	0					
ANR	6120554	IdentifierDeclType	CValue		6120549	0					
ANR	6120555	Identifier	cval		6120549	1					
ANR	6120556	IdentifierDeclStatement	CType ctype ;	436:1:11049:11060	6120549	1	True				
ANR	6120557	IdentifierDecl	ctype		6120549	0					
ANR	6120558	IdentifierDeclType	CType		6120549	0					
ANR	6120559	Identifier	ctype		6120549	1					
ANR	6120560	ExpressionStatement	ctype . t = ty	437:1:11063:11075	6120549	2	True				
ANR	6120561	AssignmentExpression	ctype . t = ty		6120549	0		=			
ANR	6120562	MemberAccess	ctype . t		6120549	0					
ANR	6120563	Identifier	ctype		6120549	0					
ANR	6120564	Identifier	t		6120549	1					
ANR	6120565	Identifier	ty		6120549	1					
ANR	6120566	ExpressionStatement	ctype . ref = NULL	438:1:11078:11094	6120549	3	True				
ANR	6120567	AssignmentExpression	ctype . ref = NULL		6120549	0		=			
ANR	6120568	MemberAccess	ctype . ref		6120549	0					
ANR	6120569	Identifier	ctype		6120549	0					
ANR	6120570	Identifier	ref		6120549	1					
ANR	6120571	Identifier	NULL		6120549	1					
ANR	6120572	ExpressionStatement	cval . ull = v	439:1:11097:11109	6120549	4	True				
ANR	6120573	AssignmentExpression	cval . ull = v		6120549	0		=			
ANR	6120574	MemberAccess	cval . ull		6120549	0					
ANR	6120575	Identifier	cval		6120549	0					
ANR	6120576	Identifier	ull		6120549	1					
ANR	6120577	Identifier	v		6120549	1					
ANR	6120578	ExpressionStatement	"vsetc ( & ctype , VT_CONST , & cval )"	440:1:11112:11143	6120549	5	True				
ANR	6120579	CallExpression	"vsetc ( & ctype , VT_CONST , & cval )"		6120549	0					
ANR	6120580	Callee	vsetc		6120549	0					
ANR	6120581	Identifier	vsetc		6120549	0					
ANR	6120582	ArgumentList	& ctype		6120549	1					
ANR	6120583	Argument	& ctype		6120549	0					
ANR	6120584	UnaryOperationExpression	& ctype		6120549	0					
ANR	6120585	UnaryOperator	&		6120549	0					
ANR	6120586	Identifier	ctype		6120549	1					
ANR	6120587	Argument	VT_CONST		6120549	1					
ANR	6120588	Identifier	VT_CONST		6120549	0					
ANR	6120589	Argument	& cval		6120549	2					
ANR	6120590	UnaryOperationExpression	& cval		6120549	0					
ANR	6120591	UnaryOperator	&		6120549	0					
ANR	6120592	Identifier	cval		6120549	1					
ANR	6120593	ReturnType	void		6120549	1					
ANR	6120594	Identifier	vpush64		6120549	2					
ANR	6120595	ParameterList	"int ty , unsigned long long v"		6120549	3					
ANR	6120596	Parameter	int ty	434:13:11002:11007	6120549	0	True				
ANR	6120597	ParameterType	int		6120549	0					
ANR	6120598	Identifier	ty		6120549	1					
ANR	6120599	Parameter	unsigned long long v	434:21:11010:11029	6120549	1	True				
ANR	6120600	ParameterType	unsigned long long		6120549	0					
ANR	6120601	Identifier	v		6120549	1					
ANR	6120602	CFGEntryNode	ENTRY		6120549		True				
ANR	6120603	CFGExitNode	EXIT		6120549		True				
ANR	6120604	Symbol	cval		6120549						
ANR	6120605	Symbol	VT_CONST		6120549						
ANR	6120606	Symbol	ctype . t		6120549						
ANR	6120607	Symbol	& cval		6120549						
ANR	6120608	Symbol	& ctype		6120549						
ANR	6120609	Symbol	NULL		6120549						
ANR	6120610	Symbol	ctype . ref		6120549						
ANR	6120611	Symbol	ctype		6120549						
ANR	6120612	Symbol	ty		6120549						
ANR	6120613	Symbol	v		6120549						
ANR	6120614	Symbol	cval . ull		6120549						
ANR	6120615	Function	vpushll	444:0:11178:11281							
ANR	6120616	FunctionDef	vpushll (long long v)		6120615	0					
ANR	6120617	CompoundStatement		444:34:11212:11281	6120615	0					
ANR	6120618	IdentifierDeclStatement	CValue cval ;	445:1:11215:11226	6120615	0	True				
ANR	6120619	IdentifierDecl	cval		6120615	0					
ANR	6120620	IdentifierDeclType	CValue		6120615	0					
ANR	6120621	Identifier	cval		6120615	1					
ANR	6120622	ExpressionStatement	cval . ll = v	446:1:11229:11240	6120615	1	True				
ANR	6120623	AssignmentExpression	cval . ll = v		6120615	0		=			
ANR	6120624	MemberAccess	cval . ll		6120615	0					
ANR	6120625	Identifier	cval		6120615	0					
ANR	6120626	Identifier	ll		6120615	1					
ANR	6120627	Identifier	v		6120615	1					
ANR	6120628	ExpressionStatement	"vsetc ( & int64_type , VT_CONST , & cval )"	447:1:11243:11279	6120615	2	True				
ANR	6120629	CallExpression	"vsetc ( & int64_type , VT_CONST , & cval )"		6120615	0					
ANR	6120630	Callee	vsetc		6120615	0					
ANR	6120631	Identifier	vsetc		6120615	0					
ANR	6120632	ArgumentList	& int64_type		6120615	1					
ANR	6120633	Argument	& int64_type		6120615	0					
ANR	6120634	UnaryOperationExpression	& int64_type		6120615	0					
ANR	6120635	UnaryOperator	&		6120615	0					
ANR	6120636	Identifier	int64_type		6120615	1					
ANR	6120637	Argument	VT_CONST		6120615	1					
ANR	6120638	Identifier	VT_CONST		6120615	0					
ANR	6120639	Argument	& cval		6120615	2					
ANR	6120640	UnaryOperationExpression	& cval		6120615	0					
ANR	6120641	UnaryOperator	&		6120615	0					
ANR	6120642	Identifier	cval		6120615	1					
ANR	6120643	ReturnType	ST_FUNC void		6120615	1					
ANR	6120644	Identifier	vpushll		6120615	2					
ANR	6120645	ParameterList	long long v		6120615	3					
ANR	6120646	Parameter	long long v	444:21:11199:11209	6120615	0	True				
ANR	6120647	ParameterType	long long		6120615	0					
ANR	6120648	Identifier	v		6120615	1					
ANR	6120649	CFGEntryNode	ENTRY		6120615		True				
ANR	6120650	CFGExitNode	EXIT		6120615		True				
ANR	6120651	Symbol	cval		6120615						
ANR	6120652	Symbol	VT_CONST		6120615						
ANR	6120653	Symbol	& cval		6120615						
ANR	6120654	Symbol	& int64_type		6120615						
ANR	6120655	Symbol	cval . ll		6120615						
ANR	6120656	Symbol	v		6120615						
ANR	6120657	Function	vset	450:0:11284:11384							
ANR	6120658	FunctionDef	"vset (CType * type , int r , int v)"		6120657	0					
ANR	6120659	CompoundStatement		450:45:11329:11384	6120657	0					
ANR	6120660	IdentifierDeclStatement	CValue cval ;	451:1:11332:11343	6120657	0	True				
ANR	6120661	IdentifierDecl	cval		6120657	0					
ANR	6120662	IdentifierDeclType	CValue		6120657	0					
ANR	6120663	Identifier	cval		6120657	1					
ANR	6120664	ExpressionStatement	cval . i = v	453:1:11347:11357	6120657	1	True				
ANR	6120665	AssignmentExpression	cval . i = v		6120657	0		=			
ANR	6120666	MemberAccess	cval . i		6120657	0					
ANR	6120667	Identifier	cval		6120657	0					
ANR	6120668	Identifier	i		6120657	1					
ANR	6120669	Identifier	v		6120657	1					
ANR	6120670	ExpressionStatement	"vsetc ( type , r , & cval )"	454:1:11360:11382	6120657	2	True				
ANR	6120671	CallExpression	"vsetc ( type , r , & cval )"		6120657	0					
ANR	6120672	Callee	vsetc		6120657	0					
ANR	6120673	Identifier	vsetc		6120657	0					
ANR	6120674	ArgumentList	type		6120657	1					
ANR	6120675	Argument	type		6120657	0					
ANR	6120676	Identifier	type		6120657	0					
ANR	6120677	Argument	r		6120657	1					
ANR	6120678	Identifier	r		6120657	0					
ANR	6120679	Argument	& cval		6120657	2					
ANR	6120680	UnaryOperationExpression	& cval		6120657	0					
ANR	6120681	UnaryOperator	&		6120657	0					
ANR	6120682	Identifier	cval		6120657	1					
ANR	6120683	ReturnType	ST_FUNC void		6120657	1					
ANR	6120684	Identifier	vset		6120657	2					
ANR	6120685	ParameterList	"CType * type , int r , int v"		6120657	3					
ANR	6120686	Parameter	CType * type	450:18:11302:11312	6120657	0	True				
ANR	6120687	ParameterType	CType *		6120657	0					
ANR	6120688	Identifier	type		6120657	1					
ANR	6120689	Parameter	int r	450:31:11315:11319	6120657	1	True				
ANR	6120690	ParameterType	int		6120657	0					
ANR	6120691	Identifier	r		6120657	1					
ANR	6120692	Parameter	int v	450:38:11322:11326	6120657	2	True				
ANR	6120693	ParameterType	int		6120657	0					
ANR	6120694	Identifier	v		6120657	1					
ANR	6120695	CFGEntryNode	ENTRY		6120657		True				
ANR	6120696	CFGExitNode	EXIT		6120657		True				
ANR	6120697	Symbol	cval		6120657						
ANR	6120698	Symbol	& cval		6120657						
ANR	6120699	Symbol	r		6120657						
ANR	6120700	Symbol	v		6120657						
ANR	6120701	Symbol	type		6120657						
ANR	6120702	Symbol	cval . i		6120657						
ANR	6120703	Function	vseti	457:0:11387:11501							
ANR	6120704	FunctionDef	"vseti (int r , int v)"		6120703	0					
ANR	6120705	CompoundStatement		457:32:11419:11501	6120703	0					
ANR	6120706	IdentifierDeclStatement	CType type = { 0 } ;	458:1:11422:11440	6120703	0	True				
ANR	6120707	IdentifierDecl	type = { 0 }		6120703	0					
ANR	6120708	IdentifierDeclType	CType		6120703	0					
ANR	6120709	Identifier	type		6120703	1					
ANR	6120710	AssignmentExpression	type = { 0 }		6120703	2		=			
ANR	6120711	Identifier	type		6120703	0					
ANR	6120712	InitializerList	0		6120703	1					
ANR	6120713	PrimaryExpression	0		6120703	0					
ANR	6120714	ExpressionStatement	type . t = VT_INT32	459:1:11443:11460	6120703	1	True				
ANR	6120715	AssignmentExpression	type . t = VT_INT32		6120703	0		=			
ANR	6120716	MemberAccess	type . t		6120703	0					
ANR	6120717	Identifier	type		6120703	0					
ANR	6120718	Identifier	t		6120703	1					
ANR	6120719	Identifier	VT_INT32		6120703	1					
ANR	6120720	ExpressionStatement	type . ref = NULL	460:1:11463:11478	6120703	2	True				
ANR	6120721	AssignmentExpression	type . ref = NULL		6120703	0		=			
ANR	6120722	MemberAccess	type . ref		6120703	0					
ANR	6120723	Identifier	type		6120703	0					
ANR	6120724	Identifier	ref		6120703	1					
ANR	6120725	Identifier	NULL		6120703	1					
ANR	6120726	ExpressionStatement	"vset ( & type , r , v )"	461:1:11481:11499	6120703	3	True				
ANR	6120727	CallExpression	"vset ( & type , r , v )"		6120703	0					
ANR	6120728	Callee	vset		6120703	0					
ANR	6120729	Identifier	vset		6120703	0					
ANR	6120730	ArgumentList	& type		6120703	1					
ANR	6120731	Argument	& type		6120703	0					
ANR	6120732	UnaryOperationExpression	& type		6120703	0					
ANR	6120733	UnaryOperator	&		6120703	0					
ANR	6120734	Identifier	type		6120703	1					
ANR	6120735	Argument	r		6120703	1					
ANR	6120736	Identifier	r		6120703	0					
ANR	6120737	Argument	v		6120703	2					
ANR	6120738	Identifier	v		6120703	0					
ANR	6120739	ReturnType	static void		6120703	1					
ANR	6120740	Identifier	vseti		6120703	2					
ANR	6120741	ParameterList	"int r , int v"		6120703	3					
ANR	6120742	Parameter	int r	457:18:11405:11409	6120703	0	True				
ANR	6120743	ParameterType	int		6120703	0					
ANR	6120744	Identifier	r		6120703	1					
ANR	6120745	Parameter	int v	457:25:11412:11416	6120703	1	True				
ANR	6120746	ParameterType	int		6120703	0					
ANR	6120747	Identifier	v		6120703	1					
ANR	6120748	CFGEntryNode	ENTRY		6120703		True				
ANR	6120749	CFGExitNode	EXIT		6120703		True				
ANR	6120750	Symbol	r		6120703						
ANR	6120751	Symbol	NULL		6120703						
ANR	6120752	Symbol	& type		6120703						
ANR	6120753	Symbol	v		6120703						
ANR	6120754	Symbol	type . ref		6120703						
ANR	6120755	Symbol	VT_INT32		6120703						
ANR	6120756	Symbol	type . t		6120703						
ANR	6120757	Symbol	type		6120703						
ANR	6120758	Function	vswap	464:0:11504:11897							
ANR	6120759	FunctionDef	vswap ()		6120758	0					
ANR	6120760	CompoundStatement		464:25:11529:11897	6120758	0					
ANR	6120761	IdentifierDeclStatement	SValue tmp ;	465:1:11532:11542	6120758	0	True				
ANR	6120762	IdentifierDecl	tmp		6120758	0					
ANR	6120763	IdentifierDeclType	SValue		6120758	0					
ANR	6120764	Identifier	tmp		6120758	1					
ANR	6120765	ExpressionStatement	tmp = vtop [ 0 ]	469:1:11731:11744	6120758	1	True				
ANR	6120766	AssignmentExpression	tmp = vtop [ 0 ]		6120758	0		=			
ANR	6120767	Identifier	tmp		6120758	0					
ANR	6120768	ArrayIndexing	vtop [ 0 ]		6120758	1					
ANR	6120769	Identifier	vtop		6120758	0					
ANR	6120770	PrimaryExpression	0		6120758	1					
ANR	6120771	ExpressionStatement	vtop [ 0 ] = vtop [ - 1 ]	470:1:11747:11765	6120758	2	True				
ANR	6120772	AssignmentExpression	vtop [ 0 ] = vtop [ - 1 ]		6120758	0		=			
ANR	6120773	ArrayIndexing	vtop [ 0 ]		6120758	0					
ANR	6120774	Identifier	vtop		6120758	0					
ANR	6120775	PrimaryExpression	0		6120758	1					
ANR	6120776	ArrayIndexing	vtop [ - 1 ]		6120758	1					
ANR	6120777	Identifier	vtop		6120758	0					
ANR	6120778	UnaryOperationExpression	- 1		6120758	1					
ANR	6120779	UnaryOperator	-		6120758	0					
ANR	6120780	PrimaryExpression	1		6120758	1					
ANR	6120781	ExpressionStatement	vtop [ - 1 ] = tmp	471:1:11768:11782	6120758	3	True				
ANR	6120782	AssignmentExpression	vtop [ - 1 ] = tmp		6120758	0		=			
ANR	6120783	ArrayIndexing	vtop [ - 1 ]		6120758	0					
ANR	6120784	Identifier	vtop		6120758	0					
ANR	6120785	UnaryOperationExpression	- 1		6120758	1					
ANR	6120786	UnaryOperator	-		6120758	0					
ANR	6120787	PrimaryExpression	1		6120758	1					
ANR	6120788	Identifier	tmp		6120758	1					
ANR	6120789	ReturnType	ST_FUNC void		6120758	1					
ANR	6120790	Identifier	vswap		6120758	2					
ANR	6120791	ParameterList			6120758	3					
ANR	6120792	CFGEntryNode	ENTRY		6120758		True				
ANR	6120793	CFGExitNode	EXIT		6120758		True				
ANR	6120794	Symbol	* vtop		6120758						
ANR	6120795	Symbol	tmp		6120758						
ANR	6120796	Symbol	vtop		6120758						
ANR	6120797	Function	vpushv	479:0:11900:12028							
ANR	6120798	FunctionDef	vpushv (SValue * v)		6120797	0					
ANR	6120799	CompoundStatement		479:31:11931:12028	6120797	0					
ANR	6120800	IfStatement	if ( vtop >= vstack + ( VSTACK_SIZE - 1 ) )		6120797	0					
ANR	6120801	Condition	vtop >= vstack + ( VSTACK_SIZE - 1 )	480:5:11938:11971	6120797	0	True				
ANR	6120802	RelationalExpression	vtop >= vstack + ( VSTACK_SIZE - 1 )		6120797	0		>=			
ANR	6120803	Identifier	vtop		6120797	0					
ANR	6120804	AdditiveExpression	vstack + ( VSTACK_SIZE - 1 )		6120797	1		+			
ANR	6120805	Identifier	vstack		6120797	0					
ANR	6120806	AdditiveExpression	VSTACK_SIZE - 1		6120797	1		-			
ANR	6120807	Identifier	VSTACK_SIZE		6120797	0					
ANR	6120808	PrimaryExpression	1		6120797	1					
ANR	6120809	CompoundStatement		2:41:42:42	6120797	1					
ANR	6120810	ExpressionStatement	"TCC_ERR ( ""memory full"" )"	481:2:11978:12001	6120797	0	True				
ANR	6120811	CallExpression	"TCC_ERR ( ""memory full"" )"		6120797	0					
ANR	6120812	Callee	TCC_ERR		6120797	0					
ANR	6120813	Identifier	TCC_ERR		6120797	0					
ANR	6120814	ArgumentList	"""memory full"""		6120797	1					
ANR	6120815	Argument	"""memory full"""		6120797	0					
ANR	6120816	PrimaryExpression	"""memory full"""		6120797	0					
ANR	6120817	ExpressionStatement	vtop ++	483:1:12007:12013	6120797	1	True				
ANR	6120818	PostIncDecOperationExpression	vtop ++		6120797	0					
ANR	6120819	Identifier	vtop		6120797	0					
ANR	6120820	IncDec	++		6120797	1					
ANR	6120821	ExpressionStatement	* vtop = * v	484:1:12016:12026	6120797	2	True				
ANR	6120822	AssignmentExpression	* vtop = * v		6120797	0		=			
ANR	6120823	UnaryOperationExpression	* vtop		6120797	0					
ANR	6120824	UnaryOperator	*		6120797	0					
ANR	6120825	Identifier	vtop		6120797	1					
ANR	6120826	UnaryOperationExpression	* v		6120797	1					
ANR	6120827	UnaryOperator	*		6120797	0					
ANR	6120828	Identifier	v		6120797	1					
ANR	6120829	ReturnType	ST_FUNC void		6120797	1					
ANR	6120830	Identifier	vpushv		6120797	2					
ANR	6120831	ParameterList	SValue * v		6120797	3					
ANR	6120832	Parameter	SValue * v	479:20:11920:11928	6120797	0	True				
ANR	6120833	ParameterType	SValue *		6120797	0					
ANR	6120834	Identifier	v		6120797	1					
ANR	6120835	CFGEntryNode	ENTRY		6120797		True				
ANR	6120836	CFGExitNode	EXIT		6120797		True				
ANR	6120837	Symbol	* v		6120797						
ANR	6120838	Symbol	* vtop		6120797						
ANR	6120839	Symbol	vstack		6120797						
ANR	6120840	Symbol	v		6120797						
ANR	6120841	Symbol	vtop		6120797						
ANR	6120842	Symbol	VSTACK_SIZE		6120797						
ANR	6120843	Function	vdup	487:0:12031:12072							
ANR	6120844	FunctionDef	vdup ()		6120843	0					
ANR	6120845	CompoundStatement		487:23:12054:12072	6120843	0					
ANR	6120846	ExpressionStatement	vpushv ( vtop )	488:1:12057:12070	6120843	0	True				
ANR	6120847	CallExpression	vpushv ( vtop )		6120843	0					
ANR	6120848	Callee	vpushv		6120843	0					
ANR	6120849	Identifier	vpushv		6120843	0					
ANR	6120850	ArgumentList	vtop		6120843	1					
ANR	6120851	Argument	vtop		6120843	0					
ANR	6120852	Identifier	vtop		6120843	0					
ANR	6120853	ReturnType	static void		6120843	1					
ANR	6120854	Identifier	vdup		6120843	2					
ANR	6120855	ParameterList			6120843	3					
ANR	6120856	CFGEntryNode	ENTRY		6120843		True				
ANR	6120857	CFGExitNode	EXIT		6120843		True				
ANR	6120858	Symbol	vtop		6120843						
ANR	6120859	Function	gaddrof	492:0:12126:12360							
ANR	6120860	FunctionDef	gaddrof ()		6120859	0					
ANR	6120861	CompoundStatement		492:26:12152:12360	6120859	0					
ANR	6120862	ExpressionStatement	vtop -> r &= ~VT_LVAL	493:1:12155:12174	6120859	0	True				
ANR	6120863	AssignmentExpression	vtop -> r &= ~VT_LVAL		6120859	0		&=			
ANR	6120864	PtrMemberAccess	vtop -> r		6120859	0					
ANR	6120865	Identifier	vtop		6120859	0					
ANR	6120866	Identifier	r		6120859	1					
ANR	6120867	Identifier	~VT_LVAL		6120859	1					
ANR	6120868	IfStatement	if ( ( vtop -> r & VT_VALMASK ) == VT_LLOCAL )		6120859	1					
ANR	6120869	Condition	( vtop -> r & VT_VALMASK ) == VT_LLOCAL	495:5:12243:12277	6120859	0	True				
ANR	6120870	EqualityExpression	( vtop -> r & VT_VALMASK ) == VT_LLOCAL		6120859	0		==			
ANR	6120871	BitAndExpression	vtop -> r & VT_VALMASK		6120859	0		&			
ANR	6120872	PtrMemberAccess	vtop -> r		6120859	0					
ANR	6120873	Identifier	vtop		6120859	0					
ANR	6120874	Identifier	r		6120859	1					
ANR	6120875	Identifier	VT_VALMASK		6120859	1					
ANR	6120876	Identifier	VT_LLOCAL		6120859	1					
ANR	6120877	CompoundStatement		4:42:127:127	6120859	1					
ANR	6120878	ExpressionStatement	vtop -> r = ( vtop -> r & ~ ( VT_VALMASK | VT_LVAL_TYPE ) ) | VT_LOCAL | VT_LVAL	496:2:12284:12355	6120859	0	True				
ANR	6120879	AssignmentExpression	vtop -> r = ( vtop -> r & ~ ( VT_VALMASK | VT_LVAL_TYPE ) ) | VT_LOCAL | VT_LVAL		6120859	0		=			
ANR	6120880	PtrMemberAccess	vtop -> r		6120859	0					
ANR	6120881	Identifier	vtop		6120859	0					
ANR	6120882	Identifier	r		6120859	1					
ANR	6120883	InclusiveOrExpression	( vtop -> r & ~ ( VT_VALMASK | VT_LVAL_TYPE ) ) | VT_LOCAL | VT_LVAL		6120859	1		|			
ANR	6120884	BitAndExpression	vtop -> r & ~ ( VT_VALMASK | VT_LVAL_TYPE )		6120859	0		&			
ANR	6120885	PtrMemberAccess	vtop -> r		6120859	0					
ANR	6120886	Identifier	vtop		6120859	0					
ANR	6120887	Identifier	r		6120859	1					
ANR	6120888	UnaryOperationExpression	~ ( VT_VALMASK | VT_LVAL_TYPE )		6120859	1					
ANR	6120889	UnaryOperator	~		6120859	0					
ANR	6120890	InclusiveOrExpression	VT_VALMASK | VT_LVAL_TYPE		6120859	1		|			
ANR	6120891	Identifier	VT_VALMASK		6120859	0					
ANR	6120892	Identifier	VT_LVAL_TYPE		6120859	1					
ANR	6120893	InclusiveOrExpression	VT_LOCAL | VT_LVAL		6120859	1		|			
ANR	6120894	Identifier	VT_LOCAL		6120859	0					
ANR	6120895	Identifier	VT_LVAL		6120859	1					
ANR	6120896	ReturnType	static void		6120859	1					
ANR	6120897	Identifier	gaddrof		6120859	2					
ANR	6120898	ParameterList			6120859	3					
ANR	6120899	CFGEntryNode	ENTRY		6120859		True				
ANR	6120900	CFGExitNode	EXIT		6120859		True				
ANR	6120901	Symbol	* vtop		6120859						
ANR	6120902	Symbol	VT_LLOCAL		6120859						
ANR	6120903	Symbol	VT_LVAL_TYPE		6120859						
ANR	6120904	Symbol	vtop		6120859						
ANR	6120905	Symbol	~VT_LVAL		6120859						
ANR	6120906	Symbol	VT_VALMASK		6120859						
ANR	6120907	Symbol	vtop -> r		6120859						
ANR	6120908	Symbol	VT_LOCAL		6120859						
ANR	6120909	Symbol	VT_LVAL		6120859						
ANR	6120910	Function	pointed_size	500:0:12363:12463							
ANR	6120911	FunctionDef	pointed_size (CType * type)		6120910	0					
ANR	6120912	CompoundStatement		500:37:12400:12463	6120910	0					
ANR	6120913	IdentifierDeclStatement	int align ;	501:1:12403:12412	6120910	0	True				
ANR	6120914	IdentifierDecl	align		6120910	0					
ANR	6120915	IdentifierDeclType	int		6120910	0					
ANR	6120916	Identifier	align		6120910	1					
ANR	6120917	ReturnStatement	"return type_size ( pointed_type ( type ) , & align ) ;"	502:1:12415:12461	6120910	1	True				
ANR	6120918	CallExpression	"type_size ( pointed_type ( type ) , & align )"		6120910	0					
ANR	6120919	Callee	type_size		6120910	0					
ANR	6120920	Identifier	type_size		6120910	0					
ANR	6120921	ArgumentList	pointed_type ( type )		6120910	1					
ANR	6120922	Argument	pointed_type ( type )		6120910	0					
ANR	6120923	CallExpression	pointed_type ( type )		6120910	0					
ANR	6120924	Callee	pointed_type		6120910	0					
ANR	6120925	Identifier	pointed_type		6120910	0					
ANR	6120926	ArgumentList	type		6120910	1					
ANR	6120927	Argument	type		6120910	0					
ANR	6120928	Identifier	type		6120910	0					
ANR	6120929	Argument	& align		6120910	1					
ANR	6120930	UnaryOperationExpression	& align		6120910	0					
ANR	6120931	UnaryOperator	&		6120910	0					
ANR	6120932	Identifier	align		6120910	1					
ANR	6120933	ReturnType	static int		6120910	1					
ANR	6120934	Identifier	pointed_size		6120910	2					
ANR	6120935	ParameterList	CType * type		6120910	3					
ANR	6120936	Parameter	CType * type	500:24:12387:12397	6120910	0	True				
ANR	6120937	ParameterType	CType *		6120910	0					
ANR	6120938	Identifier	type		6120910	1					
ANR	6120939	CFGEntryNode	ENTRY		6120910		True				
ANR	6120940	CFGExitNode	EXIT		6120910		True				
ANR	6120941	Symbol	type_size		6120910						
ANR	6120942	Symbol	pointed_type		6120910						
ANR	6120943	Symbol	& align		6120910						
ANR	6120944	Symbol	type		6120910						
ANR	6120945	Symbol	align		6120910						
ANR	6120946	Function	is_integer_btype	505:0:12466:12588							
ANR	6120947	FunctionDef	is_integer_btype (int bt)		6120946	0					
ANR	6120948	CompoundStatement		505:43:12509:12588	6120946	0					
ANR	6120949	ReturnStatement	return bt == VT_INT8 || bt == VT_INT16 || bt == VT_INT32 || bt == VT_INT64 ;	506:1:12512:12586	6120946	0	True				
ANR	6120950	OrExpression	bt == VT_INT8 || bt == VT_INT16 || bt == VT_INT32 || bt == VT_INT64		6120946	0		||			
ANR	6120951	EqualityExpression	bt == VT_INT8		6120946	0		==			
ANR	6120952	Identifier	bt		6120946	0					
ANR	6120953	Identifier	VT_INT8		6120946	1					
ANR	6120954	OrExpression	bt == VT_INT16 || bt == VT_INT32 || bt == VT_INT64		6120946	1		||			
ANR	6120955	EqualityExpression	bt == VT_INT16		6120946	0		==			
ANR	6120956	Identifier	bt		6120946	0					
ANR	6120957	Identifier	VT_INT16		6120946	1					
ANR	6120958	OrExpression	bt == VT_INT32 || bt == VT_INT64		6120946	1		||			
ANR	6120959	EqualityExpression	bt == VT_INT32		6120946	0		==			
ANR	6120960	Identifier	bt		6120946	0					
ANR	6120961	Identifier	VT_INT32		6120946	1					
ANR	6120962	EqualityExpression	bt == VT_INT64		6120946	1		==			
ANR	6120963	Identifier	bt		6120946	0					
ANR	6120964	Identifier	VT_INT64		6120946	1					
ANR	6120965	ReturnType	static inline int		6120946	1					
ANR	6120966	Identifier	is_integer_btype		6120946	2					
ANR	6120967	ParameterList	int bt		6120946	3					
ANR	6120968	Parameter	int bt	505:35:12501:12506	6120946	0	True				
ANR	6120969	ParameterType	int		6120946	0					
ANR	6120970	Identifier	bt		6120946	1					
ANR	6120971	CFGEntryNode	ENTRY		6120946		True				
ANR	6120972	CFGExitNode	EXIT		6120946		True				
ANR	6120973	Symbol	bt		6120946						
ANR	6120974	Symbol	VT_INT16		6120946						
ANR	6120975	Symbol	VT_INT8		6120946						
ANR	6120976	Symbol	VT_INT64		6120946						
ANR	6120977	Symbol	VT_INT32		6120946						
ANR	6120978	Function	type_size	510:0:12661:14061							
ANR	6120979	FunctionDef	"type_size (CType * type , int * a)"		6120978	0					
ANR	6120980	CompoundStatement		510:43:12704:14061	6120978	0					
ANR	6120981	IdentifierDeclStatement	Sym * s ;	511:1:12707:12713	6120978	0	True				
ANR	6120982	IdentifierDecl	* s		6120978	0					
ANR	6120983	IdentifierDeclType	Sym *		6120978	0					
ANR	6120984	Identifier	s		6120978	1					
ANR	6120985	IdentifierDeclStatement	int bt ;	512:1:12716:12722	6120978	1	True				
ANR	6120986	IdentifierDecl	bt		6120978	0					
ANR	6120987	IdentifierDeclType	int		6120978	0					
ANR	6120988	Identifier	bt		6120978	1					
ANR	6120989	ExpressionStatement	bt = type -> t & VT_BTYPE	514:1:12726:12749	6120978	2	True				
ANR	6120990	AssignmentExpression	bt = type -> t & VT_BTYPE		6120978	0		=			
ANR	6120991	Identifier	bt		6120978	0					
ANR	6120992	BitAndExpression	type -> t & VT_BTYPE		6120978	1		&			
ANR	6120993	PtrMemberAccess	type -> t		6120978	0					
ANR	6120994	Identifier	type		6120978	0					
ANR	6120995	Identifier	t		6120978	1					
ANR	6120996	Identifier	VT_BTYPE		6120978	1					
ANR	6120997	IfStatement	if ( is_structured ( type ) )		6120978	3					
ANR	6120998	Condition	is_structured ( type )	515:5:12756:12774	6120978	0	True				
ANR	6120999	CallExpression	is_structured ( type )		6120978	0					
ANR	6121000	Callee	is_structured		6120978	0					
ANR	6121001	Identifier	is_structured		6120978	0					
ANR	6121002	ArgumentList	type		6120978	1					
ANR	6121003	Argument	type		6120978	0					
ANR	6121004	Identifier	type		6120978	0					
ANR	6121005	CompoundStatement		6:26:72:72	6120978	1					
ANR	6121006	ExpressionStatement	s = type -> ref	517:2:12802:12815	6120978	0	True				
ANR	6121007	AssignmentExpression	s = type -> ref		6120978	0		=			
ANR	6121008	Identifier	s		6120978	0					
ANR	6121009	PtrMemberAccess	type -> ref		6120978	1					
ANR	6121010	Identifier	type		6120978	0					
ANR	6121011	Identifier	ref		6120978	1					
ANR	6121012	ExpressionStatement	* a = s -> r	518:2:12819:12828	6120978	1	True				
ANR	6121013	AssignmentExpression	* a = s -> r		6120978	0		=			
ANR	6121014	UnaryOperationExpression	* a		6120978	0					
ANR	6121015	UnaryOperator	*		6120978	0					
ANR	6121016	Identifier	a		6120978	1					
ANR	6121017	PtrMemberAccess	s -> r		6120978	1					
ANR	6121018	Identifier	s		6120978	0					
ANR	6121019	Identifier	r		6120978	1					
ANR	6121020	ReturnStatement	return s -> c ;	519:2:12832:12843	6120978	2	True				
ANR	6121021	PtrMemberAccess	s -> c		6120978	0					
ANR	6121022	Identifier	s		6120978	0					
ANR	6121023	Identifier	c		6120978	1					
ANR	6121024	ElseStatement	else		6120978	0					
ANR	6121025	IfStatement	if ( bt == VT_PTR )		6120978	0					
ANR	6121026	Condition	bt == VT_PTR	520:12:12857:12868	6120978	0	True				
ANR	6121027	EqualityExpression	bt == VT_PTR		6120978	0		==			
ANR	6121028	Identifier	bt		6120978	0					
ANR	6121029	Identifier	VT_PTR		6120978	1					
ANR	6121030	CompoundStatement		11:26:166:166	6120978	1					
ANR	6121031	IfStatement	if ( type -> t & VT_ARRAY )		6120978	0					
ANR	6121032	Condition	type -> t & VT_ARRAY	521:6:12879:12896	6120978	0	True				
ANR	6121033	BitAndExpression	type -> t & VT_ARRAY		6120978	0		&			
ANR	6121034	PtrMemberAccess	type -> t		6120978	0					
ANR	6121035	Identifier	type		6120978	0					
ANR	6121036	Identifier	t		6120978	1					
ANR	6121037	Identifier	VT_ARRAY		6120978	1					
ANR	6121038	CompoundStatement		13:3:199:205	6120978	1					
ANR	6121039	IdentifierDeclStatement	int ts ;	522:3:12904:12910	6120978	0	True				
ANR	6121040	IdentifierDecl	ts		6120978	0					
ANR	6121041	IdentifierDeclType	int		6120978	0					
ANR	6121042	Identifier	ts		6120978	1					
ANR	6121043	ExpressionStatement	s = type -> ref	524:3:12916:12929	6120978	1	True				
ANR	6121044	AssignmentExpression	s = type -> ref		6120978	0		=			
ANR	6121045	Identifier	s		6120978	0					
ANR	6121046	PtrMemberAccess	type -> ref		6120978	1					
ANR	6121047	Identifier	type		6120978	0					
ANR	6121048	Identifier	ref		6120978	1					
ANR	6121049	ExpressionStatement	"ts = type_size ( & s -> type , a )"	525:3:12934:12962	6120978	2	True				
ANR	6121050	AssignmentExpression	"ts = type_size ( & s -> type , a )"		6120978	0		=			
ANR	6121051	Identifier	ts		6120978	0					
ANR	6121052	CallExpression	"type_size ( & s -> type , a )"		6120978	1					
ANR	6121053	Callee	type_size		6120978	0					
ANR	6121054	Identifier	type_size		6120978	0					
ANR	6121055	ArgumentList	& s -> type		6120978	1					
ANR	6121056	Argument	& s -> type		6120978	0					
ANR	6121057	UnaryOperationExpression	& s -> type		6120978	0					
ANR	6121058	UnaryOperator	&		6120978	0					
ANR	6121059	PtrMemberAccess	s -> type		6120978	1					
ANR	6121060	Identifier	s		6120978	0					
ANR	6121061	Identifier	type		6120978	1					
ANR	6121062	Argument	a		6120978	1					
ANR	6121063	Identifier	a		6120978	0					
ANR	6121064	IfStatement	if ( ts < 0 && s -> c < 0 )		6120978	3					
ANR	6121065	Condition	ts < 0 && s -> c < 0	527:7:12972:12989	6120978	0	True				
ANR	6121066	AndExpression	ts < 0 && s -> c < 0		6120978	0		&&			
ANR	6121067	RelationalExpression	ts < 0		6120978	0		<			
ANR	6121068	Identifier	ts		6120978	0					
ANR	6121069	PrimaryExpression	0		6120978	1					
ANR	6121070	RelationalExpression	s -> c < 0		6120978	1		<			
ANR	6121071	PtrMemberAccess	s -> c		6120978	0					
ANR	6121072	Identifier	s		6120978	0					
ANR	6121073	Identifier	c		6120978	1					
ANR	6121074	PrimaryExpression	0		6120978	1					
ANR	6121075	CompoundStatement		18:27:287:287	6120978	1					
ANR	6121076	ExpressionStatement	ts = - ts	528:4:12998:13006	6120978	0	True				
ANR	6121077	AssignmentExpression	ts = - ts		6120978	0		=			
ANR	6121078	Identifier	ts		6120978	0					
ANR	6121079	UnaryOperationExpression	- ts		6120978	1					
ANR	6121080	UnaryOperator	-		6120978	0					
ANR	6121081	Identifier	ts		6120978	1					
ANR	6121082	ReturnStatement	return ts * s -> c ;	531:3:13017:13033	6120978	4	True				
ANR	6121083	MultiplicativeExpression	ts * s -> c		6120978	0		*			
ANR	6121084	Identifier	ts		6120978	0					
ANR	6121085	PtrMemberAccess	s -> c		6120978	1					
ANR	6121086	Identifier	s		6120978	0					
ANR	6121087	Identifier	c		6120978	1					
ANR	6121088	ElseStatement	else		6120978	0					
ANR	6121089	CompoundStatement		23:9:339:339	6120978	0					
ANR	6121090	ExpressionStatement	* a = PTR_SIZE	533:3:13049:13062	6120978	0	True				
ANR	6121091	AssignmentExpression	* a = PTR_SIZE		6120978	0		=			
ANR	6121092	UnaryOperationExpression	* a		6120978	0					
ANR	6121093	UnaryOperator	*		6120978	0					
ANR	6121094	Identifier	a		6120978	1					
ANR	6121095	Identifier	PTR_SIZE		6120978	1					
ANR	6121096	ReturnStatement	return PTR_SIZE ;	534:3:13067:13082	6120978	1	True				
ANR	6121097	Identifier	PTR_SIZE		6120978	0					
ANR	6121098	ElseStatement	else		6120978	0					
ANR	6121099	IfStatement	if ( bt == VT_LDOUBLE )		6120978	0					
ANR	6121100	Condition	bt == VT_LDOUBLE	536:12:13100:13115	6120978	0	True				
ANR	6121101	EqualityExpression	bt == VT_LDOUBLE		6120978	0		==			
ANR	6121102	Identifier	bt		6120978	0					
ANR	6121103	Identifier	VT_LDOUBLE		6120978	1					
ANR	6121104	CompoundStatement		27:30:413:413	6120978	1					
ANR	6121105	ExpressionStatement	* a = LDOUBLE_ALIGN	537:2:13122:13140	6120978	0	True				
ANR	6121106	AssignmentExpression	* a = LDOUBLE_ALIGN		6120978	0		=			
ANR	6121107	UnaryOperationExpression	* a		6120978	0					
ANR	6121108	UnaryOperator	*		6120978	0					
ANR	6121109	Identifier	a		6120978	1					
ANR	6121110	Identifier	LDOUBLE_ALIGN		6120978	1					
ANR	6121111	ReturnStatement	return LDOUBLE_SIZE ;	538:2:13144:13163	6120978	1	True				
ANR	6121112	Identifier	LDOUBLE_SIZE		6120978	0					
ANR	6121113	ElseStatement	else		6120978	0					
ANR	6121114	IfStatement	if ( bt == VT_DOUBLE || bt == VT_INT64 )		6120978	0					
ANR	6121115	Condition	bt == VT_DOUBLE || bt == VT_INT64	539:12:13177:13209	6120978	0	True				
ANR	6121116	OrExpression	bt == VT_DOUBLE || bt == VT_INT64		6120978	0		||			
ANR	6121117	EqualityExpression	bt == VT_DOUBLE		6120978	0		==			
ANR	6121118	Identifier	bt		6120978	0					
ANR	6121119	Identifier	VT_DOUBLE		6120978	1					
ANR	6121120	EqualityExpression	bt == VT_INT64		6120978	1		==			
ANR	6121121	Identifier	bt		6120978	0					
ANR	6121122	Identifier	VT_INT64		6120978	1					
ANR	6121123	CompoundStatement		30:47:507:507	6120978	1					
ANR	6121124	IfStatement	"if ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32 )"		6120978	0					
ANR	6121125	Condition	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32"	540:6:13220:13280	6120978	0	True				
ANR	6121126	AndExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32"		6120978	0		&&			
ANR	6121127	UnaryOperationExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6120978	0					
ANR	6121128	UnaryOperator	!		6120978	0					
ANR	6121129	CallExpression	"strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6120978	1					
ANR	6121130	Callee	strncmp		6120978	0					
ANR	6121131	Identifier	strncmp		6120978	0					
ANR	6121132	ArgumentList	tcc_state -> arch		6120978	1					
ANR	6121133	Argument	tcc_state -> arch		6120978	0					
ANR	6121134	PtrMemberAccess	tcc_state -> arch		6120978	0					
ANR	6121135	Identifier	tcc_state		6120978	0					
ANR	6121136	Identifier	arch		6120978	1					
ANR	6121137	Argument	"""x86"""		6120978	1					
ANR	6121138	PrimaryExpression	"""x86"""		6120978	0					
ANR	6121139	Argument	3		6120978	2					
ANR	6121140	PrimaryExpression	3		6120978	0					
ANR	6121141	EqualityExpression	tcc_state -> bits == 32		6120978	1		==			
ANR	6121142	PtrMemberAccess	tcc_state -> bits		6120978	0					
ANR	6121143	Identifier	tcc_state		6120978	0					
ANR	6121144	Identifier	bits		6120978	1					
ANR	6121145	PrimaryExpression	32		6120978	1					
ANR	6121146	CompoundStatement		31:69:578:578	6120978	1					
ANR	6121147	IfStatement	"if ( ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6120978	0					
ANR	6121148	Condition	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"	541:7:13292:13329	6120978	0	True				
ANR	6121149	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6120978	0					
ANR	6121150	UnaryOperator	!		6120978	0					
ANR	6121151	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6120978	1					
ANR	6121152	Callee	strncmp		6120978	0					
ANR	6121153	Identifier	strncmp		6120978	0					
ANR	6121154	ArgumentList	tcc_state -> os		6120978	1					
ANR	6121155	Argument	tcc_state -> os		6120978	0					
ANR	6121156	PtrMemberAccess	tcc_state -> os		6120978	0					
ANR	6121157	Identifier	tcc_state		6120978	0					
ANR	6121158	Identifier	os		6120978	1					
ANR	6121159	Argument	"""windows"""		6120978	1					
ANR	6121160	PrimaryExpression	"""windows"""		6120978	0					
ANR	6121161	Argument	7		6120978	2					
ANR	6121162	PrimaryExpression	7		6120978	0					
ANR	6121163	CompoundStatement		32:47:627:627	6120978	1					
ANR	6121164	ExpressionStatement	* a = 8	542:4:13338:13344	6120978	0	True				
ANR	6121165	AssignmentExpression	* a = 8		6120978	0		=			
ANR	6121166	UnaryOperationExpression	* a		6120978	0					
ANR	6121167	UnaryOperator	*		6120978	0					
ANR	6121168	Identifier	a		6120978	1					
ANR	6121169	PrimaryExpression	8		6120978	1					
ANR	6121170	ElseStatement	else		6120978	0					
ANR	6121171	CompoundStatement		34:10:651:651	6120978	0					
ANR	6121172	ExpressionStatement	* a = 4	544:4:13362:13368	6120978	0	True				
ANR	6121173	AssignmentExpression	* a = 4		6120978	0		=			
ANR	6121174	UnaryOperationExpression	* a		6120978	0					
ANR	6121175	UnaryOperator	*		6120978	0					
ANR	6121176	Identifier	a		6120978	1					
ANR	6121177	PrimaryExpression	4		6120978	1					
ANR	6121178	ElseStatement	else		6120978	0					
ANR	6121179	IfStatement	"if ( ! strncmp ( tcc_state -> arch , ""arm"" , 3 ) )"		6120978	0					
ANR	6121180	Condition	"! strncmp ( tcc_state -> arch , ""arm"" , 3 )"	546:13:13388:13423	6120978	0	True				
ANR	6121181	UnaryOperationExpression	"! strncmp ( tcc_state -> arch , ""arm"" , 3 )"		6120978	0					
ANR	6121182	UnaryOperator	!		6120978	0					
ANR	6121183	CallExpression	"strncmp ( tcc_state -> arch , ""arm"" , 3 )"		6120978	1					
ANR	6121184	Callee	strncmp		6120978	0					
ANR	6121185	Identifier	strncmp		6120978	0					
ANR	6121186	ArgumentList	tcc_state -> arch		6120978	1					
ANR	6121187	Argument	tcc_state -> arch		6120978	0					
ANR	6121188	PtrMemberAccess	tcc_state -> arch		6120978	0					
ANR	6121189	Identifier	tcc_state		6120978	0					
ANR	6121190	Identifier	arch		6120978	1					
ANR	6121191	Argument	"""arm"""		6120978	1					
ANR	6121192	PrimaryExpression	"""arm"""		6120978	0					
ANR	6121193	Argument	3		6120978	2					
ANR	6121194	PrimaryExpression	3		6120978	0					
ANR	6121195	CompoundStatement		37:51:721:721	6120978	1					
ANR	6121196	ExpressionStatement	* a = 8	555:3:13621:13627	6120978	0	True				
ANR	6121197	AssignmentExpression	* a = 8		6120978	0		=			
ANR	6121198	UnaryOperationExpression	* a		6120978	0					
ANR	6121199	UnaryOperator	*		6120978	0					
ANR	6121200	Identifier	a		6120978	1					
ANR	6121201	PrimaryExpression	8		6120978	1					
ANR	6121202	ElseStatement	else		6120978	0					
ANR	6121203	CompoundStatement		47:9:933:933	6120978	0					
ANR	6121204	ExpressionStatement	* a = 8	557:3:13643:13649	6120978	0	True				
ANR	6121205	AssignmentExpression	* a = 8		6120978	0		=			
ANR	6121206	UnaryOperationExpression	* a		6120978	0					
ANR	6121207	UnaryOperator	*		6120978	0					
ANR	6121208	Identifier	a		6120978	1					
ANR	6121209	PrimaryExpression	8		6120978	1					
ANR	6121210	ReturnStatement	return 8 ;	559:2:13657:13665	6120978	1	True				
ANR	6121211	PrimaryExpression	8		6120978	0					
ANR	6121212	ElseStatement	else		6120978	0					
ANR	6121213	IfStatement	if ( bt == VT_ENUM )		6120978	0					
ANR	6121214	Condition	bt == VT_ENUM	560:12:13679:13691	6120978	0	True				
ANR	6121215	EqualityExpression	bt == VT_ENUM		6120978	0		==			
ANR	6121216	Identifier	bt		6120978	0					
ANR	6121217	Identifier	VT_ENUM		6120978	1					
ANR	6121218	CompoundStatement		51:27:989:989	6120978	1					
ANR	6121219	ExpressionStatement	* a = 8	563:2:13776:13782	6120978	0	True				
ANR	6121220	AssignmentExpression	* a = 8		6120978	0		=			
ANR	6121221	UnaryOperationExpression	* a		6120978	0					
ANR	6121222	UnaryOperator	*		6120978	0					
ANR	6121223	Identifier	a		6120978	1					
ANR	6121224	PrimaryExpression	8		6120978	1					
ANR	6121225	ReturnStatement	return 8 ;	564:2:13786:13794	6120978	1	True				
ANR	6121226	PrimaryExpression	8		6120978	0					
ANR	6121227	ElseStatement	else		6120978	0					
ANR	6121228	IfStatement	if ( bt == VT_INT32 || bt == VT_FLOAT )		6120978	0					
ANR	6121229	Condition	bt == VT_INT32 || bt == VT_FLOAT	565:12:13808:13839	6120978	0	True				
ANR	6121230	OrExpression	bt == VT_INT32 || bt == VT_FLOAT		6120978	0		||			
ANR	6121231	EqualityExpression	bt == VT_INT32		6120978	0		==			
ANR	6121232	Identifier	bt		6120978	0					
ANR	6121233	Identifier	VT_INT32		6120978	1					
ANR	6121234	EqualityExpression	bt == VT_FLOAT		6120978	1		==			
ANR	6121235	Identifier	bt		6120978	0					
ANR	6121236	Identifier	VT_FLOAT		6120978	1					
ANR	6121237	CompoundStatement		56:46:1137:1137	6120978	1					
ANR	6121238	ExpressionStatement	* a = 4	566:2:13846:13852	6120978	0	True				
ANR	6121239	AssignmentExpression	* a = 4		6120978	0		=			
ANR	6121240	UnaryOperationExpression	* a		6120978	0					
ANR	6121241	UnaryOperator	*		6120978	0					
ANR	6121242	Identifier	a		6120978	1					
ANR	6121243	PrimaryExpression	4		6120978	1					
ANR	6121244	ReturnStatement	return 4 ;	567:2:13856:13864	6120978	1	True				
ANR	6121245	PrimaryExpression	4		6120978	0					
ANR	6121246	ElseStatement	else		6120978	0					
ANR	6121247	IfStatement	if ( bt == VT_INT16 )		6120978	0					
ANR	6121248	Condition	bt == VT_INT16	568:12:13878:13891	6120978	0	True				
ANR	6121249	EqualityExpression	bt == VT_INT16		6120978	0		==			
ANR	6121250	Identifier	bt		6120978	0					
ANR	6121251	Identifier	VT_INT16		6120978	1					
ANR	6121252	CompoundStatement		59:28:1189:1189	6120978	1					
ANR	6121253	ExpressionStatement	* a = 2	569:2:13898:13904	6120978	0	True				
ANR	6121254	AssignmentExpression	* a = 2		6120978	0		=			
ANR	6121255	UnaryOperationExpression	* a		6120978	0					
ANR	6121256	UnaryOperator	*		6120978	0					
ANR	6121257	Identifier	a		6120978	1					
ANR	6121258	PrimaryExpression	2		6120978	1					
ANR	6121259	ReturnStatement	return 2 ;	570:2:13908:13916	6120978	1	True				
ANR	6121260	PrimaryExpression	2		6120978	0					
ANR	6121261	ElseStatement	else		6120978	0					
ANR	6121262	IfStatement	if ( bt == VT_QLONG || bt == VT_QFLOAT )		6120978	0					
ANR	6121263	Condition	bt == VT_QLONG || bt == VT_QFLOAT	571:12:13930:13962	6120978	0	True				
ANR	6121264	OrExpression	bt == VT_QLONG || bt == VT_QFLOAT		6120978	0		||			
ANR	6121265	EqualityExpression	bt == VT_QLONG		6120978	0		==			
ANR	6121266	Identifier	bt		6120978	0					
ANR	6121267	Identifier	VT_QLONG		6120978	1					
ANR	6121268	EqualityExpression	bt == VT_QFLOAT		6120978	1		==			
ANR	6121269	Identifier	bt		6120978	0					
ANR	6121270	Identifier	VT_QFLOAT		6120978	1					
ANR	6121271	CompoundStatement		62:47:1260:1260	6120978	1					
ANR	6121272	ExpressionStatement	* a = 8	572:2:13969:13975	6120978	0	True				
ANR	6121273	AssignmentExpression	* a = 8		6120978	0		=			
ANR	6121274	UnaryOperationExpression	* a		6120978	0					
ANR	6121275	UnaryOperator	*		6120978	0					
ANR	6121276	Identifier	a		6120978	1					
ANR	6121277	PrimaryExpression	8		6120978	1					
ANR	6121278	ReturnStatement	return 16 ;	573:2:13979:13988	6120978	1	True				
ANR	6121279	PrimaryExpression	16		6120978	0					
ANR	6121280	ElseStatement	else		6120978	0					
ANR	6121281	CompoundStatement		65:8:1293:1293	6120978	0					
ANR	6121282	ExpressionStatement	* a = 1	576:2:14038:14044	6120978	0	True				
ANR	6121283	AssignmentExpression	* a = 1		6120978	0		=			
ANR	6121284	UnaryOperationExpression	* a		6120978	0					
ANR	6121285	UnaryOperator	*		6120978	0					
ANR	6121286	Identifier	a		6120978	1					
ANR	6121287	PrimaryExpression	1		6120978	1					
ANR	6121288	ReturnStatement	return 1 ;	577:2:14048:14056	6120978	1	True				
ANR	6121289	PrimaryExpression	1		6120978	0					
ANR	6121290	ReturnType	ST_FUNC int		6120978	1					
ANR	6121291	Identifier	type_size		6120978	2					
ANR	6121292	ParameterList	"CType * type , int * a"		6120978	3					
ANR	6121293	Parameter	CType * type	510:22:12683:12693	6120978	0	True				
ANR	6121294	ParameterType	CType *		6120978	0					
ANR	6121295	Identifier	type		6120978	1					
ANR	6121296	Parameter	int * a	510:35:12696:12701	6120978	1	True				
ANR	6121297	ParameterType	int *		6120978	0					
ANR	6121298	Identifier	a		6120978	1					
ANR	6121299	CFGEntryNode	ENTRY		6120978		True				
ANR	6121300	CFGExitNode	EXIT		6120978		True				
ANR	6121301	Symbol	VT_PTR		6120978						
ANR	6121302	Symbol	s -> r		6120978						
ANR	6121303	Symbol	LDOUBLE_SIZE		6120978						
ANR	6121304	Symbol	tcc_state -> arch		6120978						
ANR	6121305	Symbol	VT_INT16		6120978						
ANR	6121306	Symbol	VT_LDOUBLE		6120978						
ANR	6121307	Symbol	* tcc_state		6120978						
ANR	6121308	Symbol	type		6120978						
ANR	6121309	Symbol	strncmp		6120978						
ANR	6121310	Symbol	bt		6120978						
ANR	6121311	Symbol	type_size		6120978						
ANR	6121312	Symbol	s -> c		6120978						
ANR	6121313	Symbol	* type		6120978						
ANR	6121314	Symbol	VT_INT32		6120978						
ANR	6121315	Symbol	type -> ref		6120978						
ANR	6121316	Symbol	& s -> type		6120978						
ANR	6121317	Symbol	tcc_state		6120978						
ANR	6121318	Symbol	a		6120978						
ANR	6121319	Symbol	LDOUBLE_ALIGN		6120978						
ANR	6121320	Symbol	VT_DOUBLE		6120978						
ANR	6121321	Symbol	VT_ENUM		6120978						
ANR	6121322	Symbol	PTR_SIZE		6120978						
ANR	6121323	Symbol	VT_QFLOAT		6120978						
ANR	6121324	Symbol	VT_QLONG		6120978						
ANR	6121325	Symbol	* a		6120978						
ANR	6121326	Symbol	VT_BTYPE		6120978						
ANR	6121327	Symbol	VT_FLOAT		6120978						
ANR	6121328	Symbol	s		6120978						
ANR	6121329	Symbol	tcc_state -> os		6120978						
ANR	6121330	Symbol	tcc_state -> bits		6120978						
ANR	6121331	Symbol	type -> t		6120978						
ANR	6121332	Symbol	is_structured		6120978						
ANR	6121333	Symbol	VT_INT64		6120978						
ANR	6121334	Symbol	* s		6120978						
ANR	6121335	Symbol	VT_ARRAY		6120978						
ANR	6121336	Symbol	ts		6120978						
ANR	6121337	Function	pointed_type	582:0:14099:14174							
ANR	6121338	FunctionDef	pointed_type (CType * type)		6121337	0					
ANR	6121339	CompoundStatement		582:47:14146:14174	6121337	0					
ANR	6121340	ReturnStatement	return & type -> ref -> type ;	583:1:14149:14172	6121337	0	True				
ANR	6121341	UnaryOperationExpression	& type -> ref -> type		6121337	0					
ANR	6121342	UnaryOperator	&		6121337	0					
ANR	6121343	PtrMemberAccess	type -> ref -> type		6121337	1					
ANR	6121344	PtrMemberAccess	type -> ref		6121337	0					
ANR	6121345	Identifier	type		6121337	0					
ANR	6121346	Identifier	ref		6121337	1					
ANR	6121347	Identifier	type		6121337	1					
ANR	6121348	ReturnType	static inline CType *		6121337	1					
ANR	6121349	Identifier	pointed_type		6121337	2					
ANR	6121350	ParameterList	CType * type		6121337	3					
ANR	6121351	Parameter	CType * type	582:34:14133:14143	6121337	0	True				
ANR	6121352	ParameterType	CType *		6121337	0					
ANR	6121353	Identifier	type		6121337	1					
ANR	6121354	CFGEntryNode	ENTRY		6121337		True				
ANR	6121355	CFGExitNode	EXIT		6121337		True				
ANR	6121356	Symbol	type -> ref		6121337						
ANR	6121357	Symbol	& type -> ref -> type		6121337						
ANR	6121358	Symbol	* type		6121337						
ANR	6121359	Symbol	type		6121337						
ANR	6121360	Function	mk_pointer	587:0:14232:14402							
ANR	6121361	FunctionDef	mk_pointer (CType * type)		6121360	0					
ANR	6121362	CompoundStatement		587:37:14269:14402	6121360	0					
ANR	6121363	IdentifierDeclStatement	Sym * s ;	588:1:14272:14278	6121360	0	True				
ANR	6121364	IdentifierDecl	* s		6121360	0					
ANR	6121365	IdentifierDeclType	Sym *		6121360	0					
ANR	6121366	Identifier	s		6121360	1					
ANR	6121367	ExpressionStatement	"s = sym_push ( SYM_FIELD , type , 0 , - 1 )"	589:1:14281:14318	6121360	1	True				
ANR	6121368	AssignmentExpression	"s = sym_push ( SYM_FIELD , type , 0 , - 1 )"		6121360	0		=			
ANR	6121369	Identifier	s		6121360	0					
ANR	6121370	CallExpression	"sym_push ( SYM_FIELD , type , 0 , - 1 )"		6121360	1					
ANR	6121371	Callee	sym_push		6121360	0					
ANR	6121372	Identifier	sym_push		6121360	0					
ANR	6121373	ArgumentList	SYM_FIELD		6121360	1					
ANR	6121374	Argument	SYM_FIELD		6121360	0					
ANR	6121375	Identifier	SYM_FIELD		6121360	0					
ANR	6121376	Argument	type		6121360	1					
ANR	6121377	Identifier	type		6121360	0					
ANR	6121378	Argument	0		6121360	2					
ANR	6121379	PrimaryExpression	0		6121360	0					
ANR	6121380	Argument	- 1		6121360	3					
ANR	6121381	UnaryOperationExpression	- 1		6121360	0					
ANR	6121382	UnaryOperator	-		6121360	0					
ANR	6121383	PrimaryExpression	1		6121360	1					
ANR	6121384	IfStatement	if ( ! s )		6121360	2					
ANR	6121385	Condition	! s	590:5:14325:14326	6121360	0	True				
ANR	6121386	UnaryOperationExpression	! s		6121360	0					
ANR	6121387	UnaryOperator	!		6121360	0					
ANR	6121388	Identifier	s		6121360	1					
ANR	6121389	CompoundStatement		4:9:59:59	6121360	1					
ANR	6121390	ReturnStatement	return ;	591:2:14333:14339	6121360	0	True				
ANR	6121391	ExpressionStatement	type -> t = VT_PTR | ( type -> t & ~VT_TYPE )	593:1:14345:14384	6121360	3	True				
ANR	6121392	AssignmentExpression	type -> t = VT_PTR | ( type -> t & ~VT_TYPE )		6121360	0		=			
ANR	6121393	PtrMemberAccess	type -> t		6121360	0					
ANR	6121394	Identifier	type		6121360	0					
ANR	6121395	Identifier	t		6121360	1					
ANR	6121396	InclusiveOrExpression	VT_PTR | ( type -> t & ~VT_TYPE )		6121360	1		|			
ANR	6121397	Identifier	VT_PTR		6121360	0					
ANR	6121398	BitAndExpression	type -> t & ~VT_TYPE		6121360	1		&			
ANR	6121399	PtrMemberAccess	type -> t		6121360	0					
ANR	6121400	Identifier	type		6121360	0					
ANR	6121401	Identifier	t		6121360	1					
ANR	6121402	Identifier	~VT_TYPE		6121360	1					
ANR	6121403	ExpressionStatement	type -> ref = s	594:1:14387:14400	6121360	4	True				
ANR	6121404	AssignmentExpression	type -> ref = s		6121360	0		=			
ANR	6121405	PtrMemberAccess	type -> ref		6121360	0					
ANR	6121406	Identifier	type		6121360	0					
ANR	6121407	Identifier	ref		6121360	1					
ANR	6121408	Identifier	s		6121360	1					
ANR	6121409	ReturnType	ST_FUNC void		6121360	1					
ANR	6121410	Identifier	mk_pointer		6121360	2					
ANR	6121411	ParameterList	CType * type		6121360	3					
ANR	6121412	Parameter	CType * type	587:24:14256:14266	6121360	0	True				
ANR	6121413	ParameterType	CType *		6121360	0					
ANR	6121414	Identifier	type		6121360	1					
ANR	6121415	CFGEntryNode	ENTRY		6121360		True				
ANR	6121416	CFGExitNode	EXIT		6121360		True				
ANR	6121417	Symbol	type -> ref		6121360						
ANR	6121418	Symbol	VT_PTR		6121360						
ANR	6121419	Symbol	s		6121360						
ANR	6121420	Symbol	SYM_FIELD		6121360						
ANR	6121421	Symbol	* type		6121360						
ANR	6121422	Symbol	type -> t		6121360						
ANR	6121423	Symbol	~VT_TYPE		6121360						
ANR	6121424	Symbol	sym_push		6121360						
ANR	6121425	Symbol	type		6121360						
ANR	6121426	Function	is_compatible_func	598:0:14473:15075							
ANR	6121427	FunctionDef	"is_compatible_func (CType * type1 , CType * type2)"		6121426	0					
ANR	6121428	CompoundStatement		598:58:14531:15075	6121426	0					
ANR	6121429	IdentifierDeclStatement	"Sym * s1 , * s2 ;"	599:1:14534:14546	6121426	0	True				
ANR	6121430	IdentifierDecl	* s1		6121426	0					
ANR	6121431	IdentifierDeclType	Sym *		6121426	0					
ANR	6121432	Identifier	s1		6121426	1					
ANR	6121433	IdentifierDecl	* s2		6121426	1					
ANR	6121434	IdentifierDeclType	Sym *		6121426	0					
ANR	6121435	Identifier	s2		6121426	1					
ANR	6121436	ExpressionStatement	s1 = type1 -> ref	601:1:14550:14565	6121426	1	True				
ANR	6121437	AssignmentExpression	s1 = type1 -> ref		6121426	0		=			
ANR	6121438	Identifier	s1		6121426	0					
ANR	6121439	PtrMemberAccess	type1 -> ref		6121426	1					
ANR	6121440	Identifier	type1		6121426	0					
ANR	6121441	Identifier	ref		6121426	1					
ANR	6121442	ExpressionStatement	s2 = type2 -> ref	602:1:14568:14583	6121426	2	True				
ANR	6121443	AssignmentExpression	s2 = type2 -> ref		6121426	0		=			
ANR	6121444	Identifier	s2		6121426	0					
ANR	6121445	PtrMemberAccess	type2 -> ref		6121426	1					
ANR	6121446	Identifier	type2		6121426	0					
ANR	6121447	Identifier	ref		6121426	1					
ANR	6121448	IfStatement	"if ( ! is_compatible_types ( & s1 -> type , & s2 -> type ) )"		6121426	3					
ANR	6121449	Condition	"! is_compatible_types ( & s1 -> type , & s2 -> type )"	603:5:14590:14632	6121426	0	True				
ANR	6121450	UnaryOperationExpression	"! is_compatible_types ( & s1 -> type , & s2 -> type )"		6121426	0					
ANR	6121451	UnaryOperator	!		6121426	0					
ANR	6121452	CallExpression	"is_compatible_types ( & s1 -> type , & s2 -> type )"		6121426	1					
ANR	6121453	Callee	is_compatible_types		6121426	0					
ANR	6121454	Identifier	is_compatible_types		6121426	0					
ANR	6121455	ArgumentList	& s1 -> type		6121426	1					
ANR	6121456	Argument	& s1 -> type		6121426	0					
ANR	6121457	UnaryOperationExpression	& s1 -> type		6121426	0					
ANR	6121458	UnaryOperator	&		6121426	0					
ANR	6121459	PtrMemberAccess	s1 -> type		6121426	1					
ANR	6121460	Identifier	s1		6121426	0					
ANR	6121461	Identifier	type		6121426	1					
ANR	6121462	Argument	& s2 -> type		6121426	1					
ANR	6121463	UnaryOperationExpression	& s2 -> type		6121426	0					
ANR	6121464	UnaryOperator	&		6121426	0					
ANR	6121465	PtrMemberAccess	s2 -> type		6121426	1					
ANR	6121466	Identifier	s2		6121426	0					
ANR	6121467	Identifier	type		6121426	1					
ANR	6121468	CompoundStatement		6:50:103:103	6121426	1					
ANR	6121469	ReturnStatement	return 0 ;	604:2:14639:14647	6121426	0	True				
ANR	6121470	PrimaryExpression	0		6121426	0					
ANR	6121471	IfStatement	if ( FUNC_CALL ( s1 -> r ) != FUNC_CALL ( s2 -> r ) )		6121426	4					
ANR	6121472	Condition	FUNC_CALL ( s1 -> r ) != FUNC_CALL ( s2 -> r )	607:5:14680:14717	6121426	0	True				
ANR	6121473	EqualityExpression	FUNC_CALL ( s1 -> r ) != FUNC_CALL ( s2 -> r )		6121426	0		!=			
ANR	6121474	CallExpression	FUNC_CALL ( s1 -> r )		6121426	0					
ANR	6121475	Callee	FUNC_CALL		6121426	0					
ANR	6121476	Identifier	FUNC_CALL		6121426	0					
ANR	6121477	ArgumentList	s1 -> r		6121426	1					
ANR	6121478	Argument	s1 -> r		6121426	0					
ANR	6121479	PtrMemberAccess	s1 -> r		6121426	0					
ANR	6121480	Identifier	s1		6121426	0					
ANR	6121481	Identifier	r		6121426	1					
ANR	6121482	CallExpression	FUNC_CALL ( s2 -> r )		6121426	1					
ANR	6121483	Callee	FUNC_CALL		6121426	0					
ANR	6121484	Identifier	FUNC_CALL		6121426	0					
ANR	6121485	ArgumentList	s2 -> r		6121426	1					
ANR	6121486	Argument	s2 -> r		6121426	0					
ANR	6121487	PtrMemberAccess	s2 -> r		6121426	0					
ANR	6121488	Identifier	s2		6121426	0					
ANR	6121489	Identifier	r		6121426	1					
ANR	6121490	CompoundStatement		10:45:188:188	6121426	1					
ANR	6121491	ReturnStatement	return 0 ;	608:2:14724:14732	6121426	0	True				
ANR	6121492	PrimaryExpression	0		6121426	0					
ANR	6121493	IfStatement	if ( s1 -> c == FUNC_OLD || s2 -> c == FUNC_OLD )		6121426	5					
ANR	6121494	Condition	s1 -> c == FUNC_OLD || s2 -> c == FUNC_OLD	611:5:14767:14804	6121426	0	True				
ANR	6121495	OrExpression	s1 -> c == FUNC_OLD || s2 -> c == FUNC_OLD		6121426	0		||			
ANR	6121496	EqualityExpression	s1 -> c == FUNC_OLD		6121426	0		==			
ANR	6121497	PtrMemberAccess	s1 -> c		6121426	0					
ANR	6121498	Identifier	s1		6121426	0					
ANR	6121499	Identifier	c		6121426	1					
ANR	6121500	Identifier	FUNC_OLD		6121426	1					
ANR	6121501	EqualityExpression	s2 -> c == FUNC_OLD		6121426	1		==			
ANR	6121502	PtrMemberAccess	s2 -> c		6121426	0					
ANR	6121503	Identifier	s2		6121426	0					
ANR	6121504	Identifier	c		6121426	1					
ANR	6121505	Identifier	FUNC_OLD		6121426	1					
ANR	6121506	CompoundStatement		14:45:275:275	6121426	1					
ANR	6121507	ReturnStatement	return 1 ;	612:2:14811:14819	6121426	0	True				
ANR	6121508	PrimaryExpression	1		6121426	0					
ANR	6121509	IfStatement	if ( s1 -> c != s2 -> c )		6121426	6					
ANR	6121510	Condition	s1 -> c != s2 -> c	614:5:14829:14842	6121426	0	True				
ANR	6121511	EqualityExpression	s1 -> c != s2 -> c		6121426	0		!=			
ANR	6121512	PtrMemberAccess	s1 -> c		6121426	0					
ANR	6121513	Identifier	s1		6121426	0					
ANR	6121514	Identifier	c		6121426	1					
ANR	6121515	PtrMemberAccess	s2 -> c		6121426	1					
ANR	6121516	Identifier	s2		6121426	0					
ANR	6121517	Identifier	c		6121426	1					
ANR	6121518	CompoundStatement		17:21:313:313	6121426	1					
ANR	6121519	ReturnStatement	return 0 ;	615:2:14849:14857	6121426	0	True				
ANR	6121520	PrimaryExpression	0		6121426	0					
ANR	6121521	WhileStatement	while ( s1 != NULL )		6121426	7					
ANR	6121522	Condition	s1 != NULL	617:8:14870:14879	6121426	0	True				
ANR	6121523	EqualityExpression	s1 != NULL		6121426	0		!=			
ANR	6121524	Identifier	s1		6121426	0					
ANR	6121525	Identifier	NULL		6121426	1					
ANR	6121526	CompoundStatement		20:20:350:350	6121426	1					
ANR	6121527	IfStatement	if ( s2 == NULL )		6121426	0					
ANR	6121528	Condition	s2 == NULL	618:6:14890:14899	6121426	0	True				
ANR	6121529	EqualityExpression	s2 == NULL		6121426	0		==			
ANR	6121530	Identifier	s2		6121426	0					
ANR	6121531	Identifier	NULL		6121426	1					
ANR	6121532	CompoundStatement		21:18:370:370	6121426	1					
ANR	6121533	ReturnStatement	return 0 ;	619:3:14907:14915	6121426	0	True				
ANR	6121534	PrimaryExpression	0		6121426	0					
ANR	6121535	IfStatement	"if ( ! is_compatible_parameter_types ( & s1 -> type , & s2 -> type ) )"		6121426	1					
ANR	6121536	Condition	"! is_compatible_parameter_types ( & s1 -> type , & s2 -> type )"	621:6:14927:14979	6121426	0	True				
ANR	6121537	UnaryOperationExpression	"! is_compatible_parameter_types ( & s1 -> type , & s2 -> type )"		6121426	0					
ANR	6121538	UnaryOperator	!		6121426	0					
ANR	6121539	CallExpression	"is_compatible_parameter_types ( & s1 -> type , & s2 -> type )"		6121426	1					
ANR	6121540	Callee	is_compatible_parameter_types		6121426	0					
ANR	6121541	Identifier	is_compatible_parameter_types		6121426	0					
ANR	6121542	ArgumentList	& s1 -> type		6121426	1					
ANR	6121543	Argument	& s1 -> type		6121426	0					
ANR	6121544	UnaryOperationExpression	& s1 -> type		6121426	0					
ANR	6121545	UnaryOperator	&		6121426	0					
ANR	6121546	PtrMemberAccess	s1 -> type		6121426	1					
ANR	6121547	Identifier	s1		6121426	0					
ANR	6121548	Identifier	type		6121426	1					
ANR	6121549	Argument	& s2 -> type		6121426	1					
ANR	6121550	UnaryOperationExpression	& s2 -> type		6121426	0					
ANR	6121551	UnaryOperator	&		6121426	0					
ANR	6121552	PtrMemberAccess	s2 -> type		6121426	1					
ANR	6121553	Identifier	s2		6121426	0					
ANR	6121554	Identifier	type		6121426	1					
ANR	6121555	CompoundStatement		24:61:450:450	6121426	1					
ANR	6121556	ReturnStatement	return 0 ;	622:3:14987:14995	6121426	0	True				
ANR	6121557	PrimaryExpression	0		6121426	0					
ANR	6121558	ExpressionStatement	s1 = s1 -> next	624:2:15003:15016	6121426	2	True				
ANR	6121559	AssignmentExpression	s1 = s1 -> next		6121426	0		=			
ANR	6121560	Identifier	s1		6121426	0					
ANR	6121561	PtrMemberAccess	s1 -> next		6121426	1					
ANR	6121562	Identifier	s1		6121426	0					
ANR	6121563	Identifier	next		6121426	1					
ANR	6121564	ExpressionStatement	s2 = s2 -> next	625:2:15020:15033	6121426	3	True				
ANR	6121565	AssignmentExpression	s2 = s2 -> next		6121426	0		=			
ANR	6121566	Identifier	s2		6121426	0					
ANR	6121567	PtrMemberAccess	s2 -> next		6121426	1					
ANR	6121568	Identifier	s2		6121426	0					
ANR	6121569	Identifier	next		6121426	1					
ANR	6121570	IfStatement	if ( s2 )		6121426	8					
ANR	6121571	Condition	s2	627:5:15043:15044	6121426	0	True				
ANR	6121572	Identifier	s2		6121426	0					
ANR	6121573	CompoundStatement		30:9:515:515	6121426	1					
ANR	6121574	ReturnStatement	return 0 ;	628:2:15051:15059	6121426	0	True				
ANR	6121575	PrimaryExpression	0		6121426	0					
ANR	6121576	ReturnStatement	return 1 ;	630:1:15065:15073	6121426	9	True				
ANR	6121577	PrimaryExpression	1		6121426	0					
ANR	6121578	ReturnType	static int		6121426	1					
ANR	6121579	Identifier	is_compatible_func		6121426	2					
ANR	6121580	ParameterList	"CType * type1 , CType * type2"		6121426	3					
ANR	6121581	Parameter	CType * type1	598:30:14503:14514	6121426	0	True				
ANR	6121582	ParameterType	CType *		6121426	0					
ANR	6121583	Identifier	type1		6121426	1					
ANR	6121584	Parameter	CType * type2	598:44:14517:14528	6121426	1	True				
ANR	6121585	ParameterType	CType *		6121426	0					
ANR	6121586	Identifier	type2		6121426	1					
ANR	6121587	CFGEntryNode	ENTRY		6121426		True				
ANR	6121588	CFGExitNode	EXIT		6121426		True				
ANR	6121589	Symbol	s2 -> c		6121426						
ANR	6121590	Symbol	type2		6121426						
ANR	6121591	Symbol	NULL		6121426						
ANR	6121592	Symbol	* s2		6121426						
ANR	6121593	Symbol	s1 -> r		6121426						
ANR	6121594	Symbol	* s1		6121426						
ANR	6121595	Symbol	type1		6121426						
ANR	6121596	Symbol	is_compatible_parameter_types		6121426						
ANR	6121597	Symbol	& s1 -> type		6121426						
ANR	6121598	Symbol	type1 -> ref		6121426						
ANR	6121599	Symbol	type2 -> ref		6121426						
ANR	6121600	Symbol	is_compatible_types		6121426						
ANR	6121601	Symbol	s2 -> r		6121426						
ANR	6121602	Symbol	s1 -> c		6121426						
ANR	6121603	Symbol	& s2 -> type		6121426						
ANR	6121604	Symbol	FUNC_CALL		6121426						
ANR	6121605	Symbol	FUNC_OLD		6121426						
ANR	6121606	Symbol	s1 -> next		6121426						
ANR	6121607	Symbol	* type1		6121426						
ANR	6121608	Symbol	s2 -> next		6121426						
ANR	6121609	Symbol	s1		6121426						
ANR	6121610	Symbol	* type2		6121426						
ANR	6121611	Symbol	s2		6121426						
ANR	6121612	Function	compare_types	638:0:15262:15968							
ANR	6121613	FunctionDef	"compare_types (CType * type1 , CType * type2 , int unqualified)"		6121612	0					
ANR	6121614	CompoundStatement		638:70:15332:15968	6121612	0					
ANR	6121615	IdentifierDeclStatement	int t1 = type1 -> t & VT_TYPE ;	639:1:15335:15362	6121612	0	True				
ANR	6121616	IdentifierDecl	t1 = type1 -> t & VT_TYPE		6121612	0					
ANR	6121617	IdentifierDeclType	int		6121612	0					
ANR	6121618	Identifier	t1		6121612	1					
ANR	6121619	AssignmentExpression	t1 = type1 -> t & VT_TYPE		6121612	2		=			
ANR	6121620	Identifier	t1		6121612	0					
ANR	6121621	BitAndExpression	type1 -> t & VT_TYPE		6121612	1		&			
ANR	6121622	PtrMemberAccess	type1 -> t		6121612	0					
ANR	6121623	Identifier	type1		6121612	0					
ANR	6121624	Identifier	t		6121612	1					
ANR	6121625	Identifier	VT_TYPE		6121612	1					
ANR	6121626	IdentifierDeclStatement	int t2 = type2 -> t & VT_TYPE ;	640:1:15365:15392	6121612	1	True				
ANR	6121627	IdentifierDecl	t2 = type2 -> t & VT_TYPE		6121612	0					
ANR	6121628	IdentifierDeclType	int		6121612	0					
ANR	6121629	Identifier	t2		6121612	1					
ANR	6121630	AssignmentExpression	t2 = type2 -> t & VT_TYPE		6121612	2		=			
ANR	6121631	Identifier	t2		6121612	0					
ANR	6121632	BitAndExpression	type2 -> t & VT_TYPE		6121612	1		&			
ANR	6121633	PtrMemberAccess	type2 -> t		6121612	0					
ANR	6121634	Identifier	type2		6121612	0					
ANR	6121635	Identifier	t		6121612	1					
ANR	6121636	Identifier	VT_TYPE		6121612	1					
ANR	6121637	IfStatement	if ( unqualified )		6121612	2					
ANR	6121638	Condition	unqualified	641:5:15399:15409	6121612	0	True				
ANR	6121639	Identifier	unqualified		6121612	0					
ANR	6121640	CompoundStatement		4:18:79:79	6121612	1					
ANR	6121641	ExpressionStatement	t1 &= ~ ( VT_CONSTANT | VT_VOLATILE )	643:2:15458:15492	6121612	0	True				
ANR	6121642	AssignmentExpression	t1 &= ~ ( VT_CONSTANT | VT_VOLATILE )		6121612	0		&=			
ANR	6121643	Identifier	t1		6121612	0					
ANR	6121644	UnaryOperationExpression	~ ( VT_CONSTANT | VT_VOLATILE )		6121612	1					
ANR	6121645	UnaryOperator	~		6121612	0					
ANR	6121646	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6121612	1		|			
ANR	6121647	Identifier	VT_CONSTANT		6121612	0					
ANR	6121648	Identifier	VT_VOLATILE		6121612	1					
ANR	6121649	ExpressionStatement	t2 &= ~ ( VT_CONSTANT | VT_VOLATILE )	644:2:15496:15530	6121612	1	True				
ANR	6121650	AssignmentExpression	t2 &= ~ ( VT_CONSTANT | VT_VOLATILE )		6121612	0		&=			
ANR	6121651	Identifier	t2		6121612	0					
ANR	6121652	UnaryOperationExpression	~ ( VT_CONSTANT | VT_VOLATILE )		6121612	1					
ANR	6121653	UnaryOperator	~		6121612	0					
ANR	6121654	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6121612	1		|			
ANR	6121655	Identifier	VT_CONSTANT		6121612	0					
ANR	6121656	Identifier	VT_VOLATILE		6121612	1					
ANR	6121657	IfStatement	if ( t1 != t2 )		6121612	3					
ANR	6121658	Condition	t1 != t2	647:5:15564:15571	6121612	0	True				
ANR	6121659	EqualityExpression	t1 != t2		6121612	0		!=			
ANR	6121660	Identifier	t1		6121612	0					
ANR	6121661	Identifier	t2		6121612	1					
ANR	6121662	CompoundStatement		10:15:241:241	6121612	1					
ANR	6121663	ReturnStatement	return 0 ;	648:2:15578:15586	6121612	0	True				
ANR	6121664	PrimaryExpression	0		6121612	0					
ANR	6121665	IdentifierDeclStatement	int bt1 = t1 & VT_BTYPE ;	651:1:15627:15650	6121612	4	True				
ANR	6121666	IdentifierDecl	bt1 = t1 & VT_BTYPE		6121612	0					
ANR	6121667	IdentifierDeclType	int		6121612	0					
ANR	6121668	Identifier	bt1		6121612	1					
ANR	6121669	AssignmentExpression	bt1 = t1 & VT_BTYPE		6121612	2		=			
ANR	6121670	Identifier	bt1		6121612	0					
ANR	6121671	BitAndExpression	t1 & VT_BTYPE		6121612	1		&			
ANR	6121672	Identifier	t1		6121612	0					
ANR	6121673	Identifier	VT_BTYPE		6121612	1					
ANR	6121674	IfStatement	if ( bt1 == VT_PTR )		6121612	5					
ANR	6121675	Condition	bt1 == VT_PTR	652:5:15657:15669	6121612	0	True				
ANR	6121676	EqualityExpression	bt1 == VT_PTR		6121612	0		==			
ANR	6121677	Identifier	bt1		6121612	0					
ANR	6121678	Identifier	VT_PTR		6121612	1					
ANR	6121679	CompoundStatement		15:20:339:339	6121612	1					
ANR	6121680	ExpressionStatement	type1 = pointed_type ( type1 )	653:2:15676:15704	6121612	0	True				
ANR	6121681	AssignmentExpression	type1 = pointed_type ( type1 )		6121612	0		=			
ANR	6121682	Identifier	type1		6121612	0					
ANR	6121683	CallExpression	pointed_type ( type1 )		6121612	1					
ANR	6121684	Callee	pointed_type		6121612	0					
ANR	6121685	Identifier	pointed_type		6121612	0					
ANR	6121686	ArgumentList	type1		6121612	1					
ANR	6121687	Argument	type1		6121612	0					
ANR	6121688	Identifier	type1		6121612	0					
ANR	6121689	ExpressionStatement	type2 = pointed_type ( type2 )	654:2:15708:15736	6121612	1	True				
ANR	6121690	AssignmentExpression	type2 = pointed_type ( type2 )		6121612	0		=			
ANR	6121691	Identifier	type2		6121612	0					
ANR	6121692	CallExpression	pointed_type ( type2 )		6121612	1					
ANR	6121693	Callee	pointed_type		6121612	0					
ANR	6121694	Identifier	pointed_type		6121612	0					
ANR	6121695	ArgumentList	type2		6121612	1					
ANR	6121696	Argument	type2		6121612	0					
ANR	6121697	Identifier	type2		6121612	0					
ANR	6121698	ReturnStatement	"return is_compatible_types ( type1 , type2 ) ;"	655:2:15740:15781	6121612	2	True				
ANR	6121699	CallExpression	"is_compatible_types ( type1 , type2 )"		6121612	0					
ANR	6121700	Callee	is_compatible_types		6121612	0					
ANR	6121701	Identifier	is_compatible_types		6121612	0					
ANR	6121702	ArgumentList	type1		6121612	1					
ANR	6121703	Argument	type1		6121612	0					
ANR	6121704	Identifier	type1		6121612	0					
ANR	6121705	Argument	type2		6121612	1					
ANR	6121706	Identifier	type2		6121612	0					
ANR	6121707	ElseStatement	else		6121612	0					
ANR	6121708	IfStatement	if ( bt1 == VT_STRUCT || bt1 == VT_UNION )		6121612	0					
ANR	6121709	Condition	bt1 == VT_STRUCT || bt1 == VT_UNION	656:12:15795:15829	6121612	0	True				
ANR	6121710	OrExpression	bt1 == VT_STRUCT || bt1 == VT_UNION		6121612	0		||			
ANR	6121711	EqualityExpression	bt1 == VT_STRUCT		6121612	0		==			
ANR	6121712	Identifier	bt1		6121612	0					
ANR	6121713	Identifier	VT_STRUCT		6121612	1					
ANR	6121714	EqualityExpression	bt1 == VT_UNION		6121612	1		==			
ANR	6121715	Identifier	bt1		6121612	0					
ANR	6121716	Identifier	VT_UNION		6121612	1					
ANR	6121717	CompoundStatement		19:49:499:499	6121612	1					
ANR	6121718	ReturnStatement	return type1 -> ref == type2 -> ref ;	657:2:15836:15867	6121612	0	True				
ANR	6121719	EqualityExpression	type1 -> ref == type2 -> ref		6121612	0		==			
ANR	6121720	PtrMemberAccess	type1 -> ref		6121612	0					
ANR	6121721	Identifier	type1		6121612	0					
ANR	6121722	Identifier	ref		6121612	1					
ANR	6121723	PtrMemberAccess	type2 -> ref		6121612	1					
ANR	6121724	Identifier	type2		6121612	0					
ANR	6121725	Identifier	ref		6121612	1					
ANR	6121726	ElseStatement	else		6121612	0					
ANR	6121727	IfStatement	if ( bt1 == VT_FUNC )		6121612	0					
ANR	6121728	Condition	bt1 == VT_FUNC	658:12:15881:15894	6121612	0	True				
ANR	6121729	EqualityExpression	bt1 == VT_FUNC		6121612	0		==			
ANR	6121730	Identifier	bt1		6121612	0					
ANR	6121731	Identifier	VT_FUNC		6121612	1					
ANR	6121732	CompoundStatement		21:28:564:564	6121612	1					
ANR	6121733	ReturnStatement	"return is_compatible_func ( type1 , type2 ) ;"	659:2:15901:15941	6121612	0	True				
ANR	6121734	CallExpression	"is_compatible_func ( type1 , type2 )"		6121612	0					
ANR	6121735	Callee	is_compatible_func		6121612	0					
ANR	6121736	Identifier	is_compatible_func		6121612	0					
ANR	6121737	ArgumentList	type1		6121612	1					
ANR	6121738	Argument	type1		6121612	0					
ANR	6121739	Identifier	type1		6121612	0					
ANR	6121740	Argument	type2		6121612	1					
ANR	6121741	Identifier	type2		6121612	0					
ANR	6121742	ElseStatement	else		6121612	0					
ANR	6121743	CompoundStatement		23:8:618:618	6121612	0					
ANR	6121744	ReturnStatement	return 1 ;	661:2:15955:15963	6121612	0	True				
ANR	6121745	PrimaryExpression	1		6121612	0					
ANR	6121746	ReturnType	static int		6121612	1					
ANR	6121747	Identifier	compare_types		6121612	2					
ANR	6121748	ParameterList	"CType * type1 , CType * type2 , int unqualified"		6121612	3					
ANR	6121749	Parameter	CType * type1	638:25:15287:15298	6121612	0	True				
ANR	6121750	ParameterType	CType *		6121612	0					
ANR	6121751	Identifier	type1		6121612	1					
ANR	6121752	Parameter	CType * type2	638:39:15301:15312	6121612	1	True				
ANR	6121753	ParameterType	CType *		6121612	0					
ANR	6121754	Identifier	type2		6121612	1					
ANR	6121755	Parameter	int unqualified	638:53:15315:15329	6121612	2	True				
ANR	6121756	ParameterType	int		6121612	0					
ANR	6121757	Identifier	unqualified		6121612	1					
ANR	6121758	CFGEntryNode	ENTRY		6121612		True				
ANR	6121759	CFGExitNode	EXIT		6121612		True				
ANR	6121760	Symbol	type1 -> t		6121612						
ANR	6121761	Symbol	VT_PTR		6121612						
ANR	6121762	Symbol	type2		6121612						
ANR	6121763	Symbol	VT_CONSTANT		6121612						
ANR	6121764	Symbol	VT_TYPE		6121612						
ANR	6121765	Symbol	type1		6121612						
ANR	6121766	Symbol	VT_BTYPE		6121612						
ANR	6121767	Symbol	type2 -> t		6121612						
ANR	6121768	Symbol	VT_STRUCT		6121612						
ANR	6121769	Symbol	VT_FUNC		6121612						
ANR	6121770	Symbol	type1 -> ref		6121612						
ANR	6121771	Symbol	unqualified		6121612						
ANR	6121772	Symbol	VT_UNION		6121612						
ANR	6121773	Symbol	VT_VOLATILE		6121612						
ANR	6121774	Symbol	type2 -> ref		6121612						
ANR	6121775	Symbol	is_compatible_types		6121612						
ANR	6121776	Symbol	pointed_type		6121612						
ANR	6121777	Symbol	* type1		6121612						
ANR	6121778	Symbol	t1		6121612						
ANR	6121779	Symbol	t2		6121612						
ANR	6121780	Symbol	* type2		6121612						
ANR	6121781	Symbol	bt1		6121612						
ANR	6121782	Symbol	is_compatible_func		6121612						
ANR	6121783	Function	is_compatible_types	668:0:16056:16158							
ANR	6121784	FunctionDef	"is_compatible_types (CType * type1 , CType * type2)"		6121783	0					
ANR	6121785	CompoundStatement		668:59:16115:16158	6121783	0					
ANR	6121786	ReturnStatement	"return compare_types ( type1 , type2 , 0 ) ;"	669:1:16118:16156	6121783	0	True				
ANR	6121787	CallExpression	"compare_types ( type1 , type2 , 0 )"		6121783	0					
ANR	6121788	Callee	compare_types		6121783	0					
ANR	6121789	Identifier	compare_types		6121783	0					
ANR	6121790	ArgumentList	type1		6121783	1					
ANR	6121791	Argument	type1		6121783	0					
ANR	6121792	Identifier	type1		6121783	0					
ANR	6121793	Argument	type2		6121783	1					
ANR	6121794	Identifier	type2		6121783	0					
ANR	6121795	Argument	0		6121783	2					
ANR	6121796	PrimaryExpression	0		6121783	0					
ANR	6121797	ReturnType	static int		6121783	1					
ANR	6121798	Identifier	is_compatible_types		6121783	2					
ANR	6121799	ParameterList	"CType * type1 , CType * type2"		6121783	3					
ANR	6121800	Parameter	CType * type1	668:31:16087:16098	6121783	0	True				
ANR	6121801	ParameterType	CType *		6121783	0					
ANR	6121802	Identifier	type1		6121783	1					
ANR	6121803	Parameter	CType * type2	668:45:16101:16112	6121783	1	True				
ANR	6121804	ParameterType	CType *		6121783	0					
ANR	6121805	Identifier	type2		6121783	1					
ANR	6121806	CFGEntryNode	ENTRY		6121783		True				
ANR	6121807	CFGExitNode	EXIT		6121783		True				
ANR	6121808	Symbol	type2		6121783						
ANR	6121809	Symbol	compare_types		6121783						
ANR	6121810	Symbol	type1		6121783						
ANR	6121811	Function	is_compatible_parameter_types	674:0:16234:16346							
ANR	6121812	FunctionDef	"is_compatible_parameter_types (CType * type1 , CType * type2)"		6121811	0					
ANR	6121813	CompoundStatement		674:69:16303:16346	6121811	0					
ANR	6121814	ReturnStatement	"return compare_types ( type1 , type2 , 1 ) ;"	675:1:16306:16344	6121811	0	True				
ANR	6121815	CallExpression	"compare_types ( type1 , type2 , 1 )"		6121811	0					
ANR	6121816	Callee	compare_types		6121811	0					
ANR	6121817	Identifier	compare_types		6121811	0					
ANR	6121818	ArgumentList	type1		6121811	1					
ANR	6121819	Argument	type1		6121811	0					
ANR	6121820	Identifier	type1		6121811	0					
ANR	6121821	Argument	type2		6121811	1					
ANR	6121822	Identifier	type2		6121811	0					
ANR	6121823	Argument	1		6121811	2					
ANR	6121824	PrimaryExpression	1		6121811	0					
ANR	6121825	ReturnType	static int		6121811	1					
ANR	6121826	Identifier	is_compatible_parameter_types		6121811	2					
ANR	6121827	ParameterList	"CType * type1 , CType * type2"		6121811	3					
ANR	6121828	Parameter	CType * type1	674:41:16275:16286	6121811	0	True				
ANR	6121829	ParameterType	CType *		6121811	0					
ANR	6121830	Identifier	type1		6121811	1					
ANR	6121831	Parameter	CType * type2	674:55:16289:16300	6121811	1	True				
ANR	6121832	ParameterType	CType *		6121811	0					
ANR	6121833	Identifier	type2		6121811	1					
ANR	6121834	CFGEntryNode	ENTRY		6121811		True				
ANR	6121835	CFGExitNode	EXIT		6121811		True				
ANR	6121836	Symbol	type2		6121811						
ANR	6121837	Symbol	compare_types		6121811						
ANR	6121838	Symbol	type1		6121811						
ANR	6121839	Function	type_to_str	682:0:16503:19038							
ANR	6121840	FunctionDef	"type_to_str (char * buf , int buf_size , CType * type , const char * varstr)"		6121839	0					
ANR	6121841	CompoundStatement		682:82:16585:19038	6121839	0					
ANR	6121842	IdentifierDeclStatement	"int bt , v , t ;"	683:1:16588:16600	6121839	0	True				
ANR	6121843	IdentifierDecl	bt		6121839	0					
ANR	6121844	IdentifierDeclType	int		6121839	0					
ANR	6121845	Identifier	bt		6121839	1					
ANR	6121846	IdentifierDecl	v		6121839	1					
ANR	6121847	IdentifierDeclType	int		6121839	0					
ANR	6121848	Identifier	v		6121839	1					
ANR	6121849	IdentifierDecl	t		6121839	2					
ANR	6121850	IdentifierDeclType	int		6121839	0					
ANR	6121851	Identifier	t		6121839	1					
ANR	6121852	IdentifierDeclStatement	"Sym * s , * sa ;"	684:1:16603:16614	6121839	1	True				
ANR	6121853	IdentifierDecl	* s		6121839	0					
ANR	6121854	IdentifierDeclType	Sym *		6121839	0					
ANR	6121855	Identifier	s		6121839	1					
ANR	6121856	IdentifierDecl	* sa		6121839	1					
ANR	6121857	IdentifierDeclType	Sym *		6121839	0					
ANR	6121858	Identifier	sa		6121839	1					
ANR	6121859	IdentifierDeclStatement	char buf1 [ 256 ] ;	685:1:16617:16631	6121839	2	True				
ANR	6121860	IdentifierDecl	buf1 [ 256 ]		6121839	0					
ANR	6121861	IdentifierDeclType	char [ 256 ]		6121839	0					
ANR	6121862	Identifier	buf1		6121839	1					
ANR	6121863	PrimaryExpression	256		6121839	2					
ANR	6121864	IdentifierDeclStatement	const char * tstr ;	686:1:16634:16650	6121839	3	True				
ANR	6121865	IdentifierDecl	* tstr		6121839	0					
ANR	6121866	IdentifierDeclType	const char *		6121839	0					
ANR	6121867	Identifier	tstr		6121839	1					
ANR	6121868	ExpressionStatement	t = type -> t & VT_TYPE	687:1:16653:16674	6121839	4	True				
ANR	6121869	AssignmentExpression	t = type -> t & VT_TYPE		6121839	0		=			
ANR	6121870	Identifier	t		6121839	0					
ANR	6121871	BitAndExpression	type -> t & VT_TYPE		6121839	1		&			
ANR	6121872	PtrMemberAccess	type -> t		6121839	0					
ANR	6121873	Identifier	type		6121839	0					
ANR	6121874	Identifier	t		6121839	1					
ANR	6121875	Identifier	VT_TYPE		6121839	1					
ANR	6121876	ExpressionStatement	bt = t & VT_BTYPE	688:1:16677:16694	6121839	5	True				
ANR	6121877	AssignmentExpression	bt = t & VT_BTYPE		6121839	0		=			
ANR	6121878	Identifier	bt		6121839	0					
ANR	6121879	BitAndExpression	t & VT_BTYPE		6121839	1		&			
ANR	6121880	Identifier	t		6121839	0					
ANR	6121881	Identifier	VT_BTYPE		6121839	1					
ANR	6121882	ExpressionStatement	buf [ 0 ] = '\\0'	689:1:16697:16710	6121839	6	True				
ANR	6121883	AssignmentExpression	buf [ 0 ] = '\\0'		6121839	0		=			
ANR	6121884	ArrayIndexing	buf [ 0 ]		6121839	0					
ANR	6121885	Identifier	buf		6121839	0					
ANR	6121886	PrimaryExpression	0		6121839	1					
ANR	6121887	PrimaryExpression	'\\0'		6121839	1					
ANR	6121888	IfStatement	if ( t & VT_CONSTANT )		6121839	7					
ANR	6121889	Condition	t & VT_CONSTANT	690:5:16717:16731	6121839	0	True				
ANR	6121890	BitAndExpression	t & VT_CONSTANT		6121839	0		&			
ANR	6121891	Identifier	t		6121839	0					
ANR	6121892	Identifier	VT_CONSTANT		6121839	1					
ANR	6121893	CompoundStatement		9:22:148:148	6121839	1					
ANR	6121894	ExpressionStatement	"pstrcat ( buf , buf_size , ""const "" )"	691:2:16738:16771	6121839	0	True				
ANR	6121895	CallExpression	"pstrcat ( buf , buf_size , ""const "" )"		6121839	0					
ANR	6121896	Callee	pstrcat		6121839	0					
ANR	6121897	Identifier	pstrcat		6121839	0					
ANR	6121898	ArgumentList	buf		6121839	1					
ANR	6121899	Argument	buf		6121839	0					
ANR	6121900	Identifier	buf		6121839	0					
ANR	6121901	Argument	buf_size		6121839	1					
ANR	6121902	Identifier	buf_size		6121839	0					
ANR	6121903	Argument	"""const """		6121839	2					
ANR	6121904	PrimaryExpression	"""const """		6121839	0					
ANR	6121905	IfStatement	if ( t & VT_VOLATILE )		6121839	8					
ANR	6121906	Condition	t & VT_VOLATILE	693:5:16781:16795	6121839	0	True				
ANR	6121907	BitAndExpression	t & VT_VOLATILE		6121839	0		&			
ANR	6121908	Identifier	t		6121839	0					
ANR	6121909	Identifier	VT_VOLATILE		6121839	1					
ANR	6121910	CompoundStatement		12:22:212:212	6121839	1					
ANR	6121911	ExpressionStatement	"pstrcat ( buf , buf_size , ""volatile "" )"	694:2:16802:16838	6121839	0	True				
ANR	6121912	CallExpression	"pstrcat ( buf , buf_size , ""volatile "" )"		6121839	0					
ANR	6121913	Callee	pstrcat		6121839	0					
ANR	6121914	Identifier	pstrcat		6121839	0					
ANR	6121915	ArgumentList	buf		6121839	1					
ANR	6121916	Argument	buf		6121839	0					
ANR	6121917	Identifier	buf		6121839	0					
ANR	6121918	Argument	buf_size		6121839	1					
ANR	6121919	Identifier	buf_size		6121839	0					
ANR	6121920	Argument	"""volatile """		6121839	2					
ANR	6121921	PrimaryExpression	"""volatile """		6121839	0					
ANR	6121922	SwitchStatement	switch ( bt )		6121839	9					
ANR	6121923	Condition	bt	696:9:16852:16853	6121839	0	True				
ANR	6121924	Identifier	bt		6121839	0					
ANR	6121925	CompoundStatement		15:13:270:270	6121839	1					
ANR	6121926	Label	case VT_VOID :	697:1:16859:16871	6121839	0	True				
ANR	6121927	Identifier	VT_VOID		6121839	0					
ANR	6121928	ExpressionStatement	"tstr = ""void"""	698:2:16875:16888	6121839	1	True				
ANR	6121929	AssignmentExpression	"tstr = ""void"""		6121839	0		=			
ANR	6121930	Identifier	tstr		6121839	0					
ANR	6121931	PrimaryExpression	"""void"""		6121839	1					
ANR	6121932	GotoStatement	goto add_tstr ;	699:2:16892:16905	6121839	2	True				
ANR	6121933	Identifier	add_tstr		6121839	0					
ANR	6121934	Label	case VT_BOOL :	700:1:16908:16920	6121839	3	True				
ANR	6121935	Identifier	VT_BOOL		6121839	0					
ANR	6121936	ExpressionStatement	"tstr = ""bool"""	701:2:16924:16937	6121839	4	True				
ANR	6121937	AssignmentExpression	"tstr = ""bool"""		6121839	0		=			
ANR	6121938	Identifier	tstr		6121839	0					
ANR	6121939	PrimaryExpression	"""bool"""		6121839	1					
ANR	6121940	GotoStatement	goto add_tstr ;	702:2:16941:16954	6121839	5	True				
ANR	6121941	Identifier	add_tstr		6121839	0					
ANR	6121942	Label	case VT_INT8 :	703:1:16957:16969	6121839	6	True				
ANR	6121943	Identifier	VT_INT8		6121839	0					
ANR	6121944	IfStatement	if ( t & VT_UNSIGNED )		6121839	7					
ANR	6121945	Condition	t & VT_UNSIGNED	704:6:16977:16991	6121839	0	True				
ANR	6121946	BitAndExpression	t & VT_UNSIGNED		6121839	0		&			
ANR	6121947	Identifier	t		6121839	0					
ANR	6121948	Identifier	VT_UNSIGNED		6121839	1					
ANR	6121949	CompoundStatement		23:23:408:408	6121839	1					
ANR	6121950	ExpressionStatement	"tstr = ""uint8_t"""	705:3:16999:17015	6121839	0	True				
ANR	6121951	AssignmentExpression	"tstr = ""uint8_t"""		6121839	0		=			
ANR	6121952	Identifier	tstr		6121839	0					
ANR	6121953	PrimaryExpression	"""uint8_t"""		6121839	1					
ANR	6121954	ElseStatement	else		6121839	0					
ANR	6121955	CompoundStatement		25:9:440:440	6121839	0					
ANR	6121956	IfStatement	if ( t & VT_CHAR )		6121839	0					
ANR	6121957	Condition	t & VT_CHAR	707:7:17035:17045	6121839	0	True				
ANR	6121958	BitAndExpression	t & VT_CHAR		6121839	0		&			
ANR	6121959	Identifier	t		6121839	0					
ANR	6121960	Identifier	VT_CHAR		6121839	1					
ANR	6121961	CompoundStatement		26:20:462:462	6121839	1					
ANR	6121962	ExpressionStatement	"tstr = ""char"""	708:4:17054:17067	6121839	0	True				
ANR	6121963	AssignmentExpression	"tstr = ""char"""		6121839	0		=			
ANR	6121964	Identifier	tstr		6121839	0					
ANR	6121965	PrimaryExpression	"""char"""		6121839	1					
ANR	6121966	ElseStatement	else		6121839	0					
ANR	6121967	CompoundStatement		28:10:493:493	6121839	0					
ANR	6121968	ExpressionStatement	"tstr = ""int8_t"""	710:4:17085:17100	6121839	0	True				
ANR	6121969	AssignmentExpression	"tstr = ""int8_t"""		6121839	0		=			
ANR	6121970	Identifier	tstr		6121839	0					
ANR	6121971	PrimaryExpression	"""int8_t"""		6121839	1					
ANR	6121972	GotoStatement	goto add_tstr ;	713:2:17113:17126	6121839	8	True				
ANR	6121973	Identifier	add_tstr		6121839	0					
ANR	6121974	Label	case VT_INT16 :	714:1:17129:17142	6121839	9	True				
ANR	6121975	Identifier	VT_INT16		6121839	0					
ANR	6121976	IfStatement	if ( t & VT_UNSIGNED )		6121839	10					
ANR	6121977	Condition	t & VT_UNSIGNED	715:6:17150:17164	6121839	0	True				
ANR	6121978	BitAndExpression	t & VT_UNSIGNED		6121839	0		&			
ANR	6121979	Identifier	t		6121839	0					
ANR	6121980	Identifier	VT_UNSIGNED		6121839	1					
ANR	6121981	CompoundStatement		34:23:581:581	6121839	1					
ANR	6121982	ExpressionStatement	"tstr = ""uint16_t"""	716:3:17172:17189	6121839	0	True				
ANR	6121983	AssignmentExpression	"tstr = ""uint16_t"""		6121839	0		=			
ANR	6121984	Identifier	tstr		6121839	0					
ANR	6121985	PrimaryExpression	"""uint16_t"""		6121839	1					
ANR	6121986	ElseStatement	else		6121839	0					
ANR	6121987	CompoundStatement		36:9:614:614	6121839	0					
ANR	6121988	ExpressionStatement	"tstr = ""int16_t"""	718:3:17205:17221	6121839	0	True				
ANR	6121989	AssignmentExpression	"tstr = ""int16_t"""		6121839	0		=			
ANR	6121990	Identifier	tstr		6121839	0					
ANR	6121991	PrimaryExpression	"""int16_t"""		6121839	1					
ANR	6121992	GotoStatement	goto add_tstr ;	720:2:17229:17242	6121839	11	True				
ANR	6121993	Identifier	add_tstr		6121839	0					
ANR	6121994	Label	case VT_INT32 :	721:1:17245:17258	6121839	12	True				
ANR	6121995	Identifier	VT_INT32		6121839	0					
ANR	6121996	IfStatement	if ( t & VT_UNSIGNED )		6121839	13					
ANR	6121997	Condition	t & VT_UNSIGNED	722:6:17266:17280	6121839	0	True				
ANR	6121998	BitAndExpression	t & VT_UNSIGNED		6121839	0		&			
ANR	6121999	Identifier	t		6121839	0					
ANR	6122000	Identifier	VT_UNSIGNED		6121839	1					
ANR	6122001	CompoundStatement		41:23:697:697	6121839	1					
ANR	6122002	ExpressionStatement	"tstr = ""uint32_t"""	723:3:17288:17305	6121839	0	True				
ANR	6122003	AssignmentExpression	"tstr = ""uint32_t"""		6121839	0		=			
ANR	6122004	Identifier	tstr		6121839	0					
ANR	6122005	PrimaryExpression	"""uint32_t"""		6121839	1					
ANR	6122006	ElseStatement	else		6121839	0					
ANR	6122007	CompoundStatement		43:9:730:730	6121839	0					
ANR	6122008	ExpressionStatement	"tstr = ""int32_t"""	725:3:17321:17337	6121839	0	True				
ANR	6122009	AssignmentExpression	"tstr = ""int32_t"""		6121839	0		=			
ANR	6122010	Identifier	tstr		6121839	0					
ANR	6122011	PrimaryExpression	"""int32_t"""		6121839	1					
ANR	6122012	GotoStatement	goto add_tstr ;	727:2:17345:17358	6121839	14	True				
ANR	6122013	Identifier	add_tstr		6121839	0					
ANR	6122014	Label	case VT_LONG :	728:1:17361:17373	6121839	15	True				
ANR	6122015	Identifier	VT_LONG		6121839	0					
ANR	6122016	ExpressionStatement	"tstr = ""long"""	729:2:17377:17390	6121839	16	True				
ANR	6122017	AssignmentExpression	"tstr = ""long"""		6121839	0		=			
ANR	6122018	Identifier	tstr		6121839	0					
ANR	6122019	PrimaryExpression	"""long"""		6121839	1					
ANR	6122020	GotoStatement	goto add_tstr ;	730:2:17394:17407	6121839	17	True				
ANR	6122021	Identifier	add_tstr		6121839	0					
ANR	6122022	Label	case VT_INT64 :	731:1:17410:17423	6121839	18	True				
ANR	6122023	Identifier	VT_INT64		6121839	0					
ANR	6122024	IfStatement	if ( t & VT_UNSIGNED )		6121839	19					
ANR	6122025	Condition	t & VT_UNSIGNED	732:6:17431:17445	6121839	0	True				
ANR	6122026	BitAndExpression	t & VT_UNSIGNED		6121839	0		&			
ANR	6122027	Identifier	t		6121839	0					
ANR	6122028	Identifier	VT_UNSIGNED		6121839	1					
ANR	6122029	CompoundStatement		51:23:862:862	6121839	1					
ANR	6122030	ExpressionStatement	"tstr = ""uint64_t"""	733:3:17453:17470	6121839	0	True				
ANR	6122031	AssignmentExpression	"tstr = ""uint64_t"""		6121839	0		=			
ANR	6122032	Identifier	tstr		6121839	0					
ANR	6122033	PrimaryExpression	"""uint64_t"""		6121839	1					
ANR	6122034	ElseStatement	else		6121839	0					
ANR	6122035	CompoundStatement		53:9:895:895	6121839	0					
ANR	6122036	ExpressionStatement	"tstr = ""int64_t"""	735:3:17486:17502	6121839	0	True				
ANR	6122037	AssignmentExpression	"tstr = ""int64_t"""		6121839	0		=			
ANR	6122038	Identifier	tstr		6121839	0					
ANR	6122039	PrimaryExpression	"""int64_t"""		6121839	1					
ANR	6122040	GotoStatement	goto add_tstr ;	737:2:17510:17523	6121839	20	True				
ANR	6122041	Identifier	add_tstr		6121839	0					
ANR	6122042	Label	case VT_FLOAT :	738:1:17526:17539	6121839	21	True				
ANR	6122043	Identifier	VT_FLOAT		6121839	0					
ANR	6122044	ExpressionStatement	"tstr = ""float"""	739:2:17543:17557	6121839	22	True				
ANR	6122045	AssignmentExpression	"tstr = ""float"""		6121839	0		=			
ANR	6122046	Identifier	tstr		6121839	0					
ANR	6122047	PrimaryExpression	"""float"""		6121839	1					
ANR	6122048	GotoStatement	goto add_tstr ;	740:2:17561:17574	6121839	23	True				
ANR	6122049	Identifier	add_tstr		6121839	0					
ANR	6122050	Label	case VT_DOUBLE :	741:1:17577:17591	6121839	24	True				
ANR	6122051	Identifier	VT_DOUBLE		6121839	0					
ANR	6122052	ExpressionStatement	"tstr = ""double"""	742:2:17595:17610	6121839	25	True				
ANR	6122053	AssignmentExpression	"tstr = ""double"""		6121839	0		=			
ANR	6122054	Identifier	tstr		6121839	0					
ANR	6122055	PrimaryExpression	"""double"""		6121839	1					
ANR	6122056	GotoStatement	goto add_tstr ;	743:2:17614:17627	6121839	26	True				
ANR	6122057	Identifier	add_tstr		6121839	0					
ANR	6122058	Label	case VT_LDOUBLE :	744:1:17630:17645	6121839	27	True				
ANR	6122059	Identifier	VT_LDOUBLE		6121839	0					
ANR	6122060	ExpressionStatement	"tstr = ""long double"""	745:2:17649:17669	6121839	28	True				
ANR	6122061	AssignmentExpression	"tstr = ""long double"""		6121839	0		=			
ANR	6122062	Identifier	tstr		6121839	0					
ANR	6122063	PrimaryExpression	"""long double"""		6121839	1					
ANR	6122064	Label	add_tstr :	746:0:17671:17679	6121839	29	True				
ANR	6122065	Identifier	add_tstr		6121839	0					
ANR	6122066	ExpressionStatement	"pstrcat ( buf , buf_size , tstr )"	747:2:17683:17712	6121839	30	True				
ANR	6122067	CallExpression	"pstrcat ( buf , buf_size , tstr )"		6121839	0					
ANR	6122068	Callee	pstrcat		6121839	0					
ANR	6122069	Identifier	pstrcat		6121839	0					
ANR	6122070	ArgumentList	buf		6121839	1					
ANR	6122071	Argument	buf		6121839	0					
ANR	6122072	Identifier	buf		6121839	0					
ANR	6122073	Argument	buf_size		6121839	1					
ANR	6122074	Identifier	buf_size		6121839	0					
ANR	6122075	Argument	tstr		6121839	2					
ANR	6122076	Identifier	tstr		6121839	0					
ANR	6122077	IfStatement	if ( ( t & VT_UNSIGNED ) && ( bt != VT_INT8 ) && ( bt != VT_INT16 ) && ( bt != VT_INT32 ) && ( bt != VT_INT64 ) )		6121839	31					
ANR	6122078	Condition	( t & VT_UNSIGNED ) && ( bt != VT_INT8 ) && ( bt != VT_INT16 ) && ( bt != VT_INT32 ) && ( bt != VT_INT64 )	748:6:17720:17827	6121839	0	True				
ANR	6122079	AndExpression	( t & VT_UNSIGNED ) && ( bt != VT_INT8 ) && ( bt != VT_INT16 ) && ( bt != VT_INT32 ) && ( bt != VT_INT64 )		6121839	0		&&			
ANR	6122080	BitAndExpression	t & VT_UNSIGNED		6121839	0		&			
ANR	6122081	Identifier	t		6121839	0					
ANR	6122082	Identifier	VT_UNSIGNED		6121839	1					
ANR	6122083	AndExpression	( bt != VT_INT8 ) && ( bt != VT_INT16 ) && ( bt != VT_INT32 ) && ( bt != VT_INT64 )		6121839	1		&&			
ANR	6122084	EqualityExpression	bt != VT_INT8		6121839	0		!=			
ANR	6122085	Identifier	bt		6121839	0					
ANR	6122086	Identifier	VT_INT8		6121839	1					
ANR	6122087	AndExpression	( bt != VT_INT16 ) && ( bt != VT_INT32 ) && ( bt != VT_INT64 )		6121839	1		&&			
ANR	6122088	EqualityExpression	bt != VT_INT16		6121839	0		!=			
ANR	6122089	Identifier	bt		6121839	0					
ANR	6122090	Identifier	VT_INT16		6121839	1					
ANR	6122091	AndExpression	( bt != VT_INT32 ) && ( bt != VT_INT64 )		6121839	1		&&			
ANR	6122092	EqualityExpression	bt != VT_INT32		6121839	0		!=			
ANR	6122093	Identifier	bt		6121839	0					
ANR	6122094	Identifier	VT_INT32		6121839	1					
ANR	6122095	EqualityExpression	bt != VT_INT64		6121839	1		!=			
ANR	6122096	Identifier	bt		6121839	0					
ANR	6122097	Identifier	VT_INT64		6121839	1					
ANR	6122098	CompoundStatement		69:24:1244:1244	6121839	1					
ANR	6122099	ExpressionStatement	"pstrcat ( buf , buf_size , ""unsigned "" )"	751:3:17835:17871	6121839	0	True				
ANR	6122100	CallExpression	"pstrcat ( buf , buf_size , ""unsigned "" )"		6121839	0					
ANR	6122101	Callee	pstrcat		6121839	0					
ANR	6122102	Identifier	pstrcat		6121839	0					
ANR	6122103	ArgumentList	buf		6121839	1					
ANR	6122104	Argument	buf		6121839	0					
ANR	6122105	Identifier	buf		6121839	0					
ANR	6122106	Argument	buf_size		6121839	1					
ANR	6122107	Identifier	buf_size		6121839	0					
ANR	6122108	Argument	"""unsigned """		6121839	2					
ANR	6122109	PrimaryExpression	"""unsigned """		6121839	0					
ANR	6122110	BreakStatement	break ;	753:2:17879:17884	6121839	32	True				
ANR	6122111	Label	case VT_ENUM :	754:1:17887:17899	6121839	33	True				
ANR	6122112	Identifier	VT_ENUM		6121839	0					
ANR	6122113	Label	case VT_STRUCT :	755:1:17902:17916	6121839	34	True				
ANR	6122114	Identifier	VT_STRUCT		6121839	0					
ANR	6122115	Label	case VT_UNION :	756:1:17919:17932	6121839	35	True				
ANR	6122116	Identifier	VT_UNION		6121839	0					
ANR	6122117	IfStatement	if ( bt == VT_STRUCT )		6121839	36					
ANR	6122118	Condition	bt == VT_STRUCT	757:6:17940:17954	6121839	0	True				
ANR	6122119	EqualityExpression	bt == VT_STRUCT		6121839	0		==			
ANR	6122120	Identifier	bt		6121839	0					
ANR	6122121	Identifier	VT_STRUCT		6121839	1					
ANR	6122122	CompoundStatement		76:23:1371:1371	6121839	1					
ANR	6122123	ExpressionStatement	"tstr = ""struct """	758:3:17962:17978	6121839	0	True				
ANR	6122124	AssignmentExpression	"tstr = ""struct """		6121839	0		=			
ANR	6122125	Identifier	tstr		6121839	0					
ANR	6122126	PrimaryExpression	"""struct """		6121839	1					
ANR	6122127	ElseStatement	else		6121839	0					
ANR	6122128	IfStatement	if ( bt == VT_UNION )		6121839	0					
ANR	6122129	Condition	bt == VT_UNION	759:13:17993:18006	6121839	0	True				
ANR	6122130	EqualityExpression	bt == VT_UNION		6121839	0		==			
ANR	6122131	Identifier	bt		6121839	0					
ANR	6122132	Identifier	VT_UNION		6121839	1					
ANR	6122133	CompoundStatement		78:29:1423:1423	6121839	1					
ANR	6122134	ExpressionStatement	"tstr = ""union """	760:3:18014:18029	6121839	0	True				
ANR	6122135	AssignmentExpression	"tstr = ""union """		6121839	0		=			
ANR	6122136	Identifier	tstr		6121839	0					
ANR	6122137	PrimaryExpression	"""union """		6121839	1					
ANR	6122138	ElseStatement	else		6121839	0					
ANR	6122139	CompoundStatement		80:9:1454:1454	6121839	0					
ANR	6122140	ExpressionStatement	"tstr = ""enum """	762:3:18045:18059	6121839	0	True				
ANR	6122141	AssignmentExpression	"tstr = ""enum """		6121839	0		=			
ANR	6122142	Identifier	tstr		6121839	0					
ANR	6122143	PrimaryExpression	"""enum """		6121839	1					
ANR	6122144	ExpressionStatement	"pstrcat ( buf , buf_size , tstr )"	764:2:18067:18096	6121839	37	True				
ANR	6122145	CallExpression	"pstrcat ( buf , buf_size , tstr )"		6121839	0					
ANR	6122146	Callee	pstrcat		6121839	0					
ANR	6122147	Identifier	pstrcat		6121839	0					
ANR	6122148	ArgumentList	buf		6121839	1					
ANR	6122149	Argument	buf		6121839	0					
ANR	6122150	Identifier	buf		6121839	0					
ANR	6122151	Argument	buf_size		6121839	1					
ANR	6122152	Identifier	buf_size		6121839	0					
ANR	6122153	Argument	tstr		6121839	2					
ANR	6122154	Identifier	tstr		6121839	0					
ANR	6122155	ExpressionStatement	v = type -> ref -> v & ~SYM_STRUCT	765:2:18100:18130	6121839	38	True				
ANR	6122156	AssignmentExpression	v = type -> ref -> v & ~SYM_STRUCT		6121839	0		=			
ANR	6122157	Identifier	v		6121839	0					
ANR	6122158	BitAndExpression	type -> ref -> v & ~SYM_STRUCT		6121839	1		&			
ANR	6122159	PtrMemberAccess	type -> ref -> v		6121839	0					
ANR	6122160	PtrMemberAccess	type -> ref		6121839	0					
ANR	6122161	Identifier	type		6121839	0					
ANR	6122162	Identifier	ref		6121839	1					
ANR	6122163	Identifier	v		6121839	1					
ANR	6122164	Identifier	~SYM_STRUCT		6121839	1					
ANR	6122165	IfStatement	if ( v >= SYM_FIRST_ANOM )		6121839	39					
ANR	6122166	Condition	v >= SYM_FIRST_ANOM	766:6:18138:18156	6121839	0	True				
ANR	6122167	RelationalExpression	v >= SYM_FIRST_ANOM		6121839	0		>=			
ANR	6122168	Identifier	v		6121839	0					
ANR	6122169	Identifier	SYM_FIRST_ANOM		6121839	1					
ANR	6122170	CompoundStatement		85:27:1573:1573	6121839	1					
ANR	6122171	ExpressionStatement	"strcat_printf ( buf , buf_size , ""%u"" , v - SYM_FIRST_ANOM )"	767:3:18164:18219	6121839	0	True				
ANR	6122172	CallExpression	"strcat_printf ( buf , buf_size , ""%u"" , v - SYM_FIRST_ANOM )"		6121839	0					
ANR	6122173	Callee	strcat_printf		6121839	0					
ANR	6122174	Identifier	strcat_printf		6121839	0					
ANR	6122175	ArgumentList	buf		6121839	1					
ANR	6122176	Argument	buf		6121839	0					
ANR	6122177	Identifier	buf		6121839	0					
ANR	6122178	Argument	buf_size		6121839	1					
ANR	6122179	Identifier	buf_size		6121839	0					
ANR	6122180	Argument	"""%u"""		6121839	2					
ANR	6122181	PrimaryExpression	"""%u"""		6121839	0					
ANR	6122182	Argument	v - SYM_FIRST_ANOM		6121839	3					
ANR	6122183	AdditiveExpression	v - SYM_FIRST_ANOM		6121839	0		-			
ANR	6122184	Identifier	v		6121839	0					
ANR	6122185	Identifier	SYM_FIRST_ANOM		6121839	1					
ANR	6122186	ElseStatement	else		6121839	0					
ANR	6122187	CompoundStatement		87:9:1644:1644	6121839	0					
ANR	6122188	ExpressionStatement	"pstrcat ( buf , buf_size , get_tok_str ( v , NULL ) )"	769:3:18235:18281	6121839	0	True				
ANR	6122189	CallExpression	"pstrcat ( buf , buf_size , get_tok_str ( v , NULL ) )"		6121839	0					
ANR	6122190	Callee	pstrcat		6121839	0					
ANR	6122191	Identifier	pstrcat		6121839	0					
ANR	6122192	ArgumentList	buf		6121839	1					
ANR	6122193	Argument	buf		6121839	0					
ANR	6122194	Identifier	buf		6121839	0					
ANR	6122195	Argument	buf_size		6121839	1					
ANR	6122196	Identifier	buf_size		6121839	0					
ANR	6122197	Argument	"get_tok_str ( v , NULL )"		6121839	2					
ANR	6122198	CallExpression	"get_tok_str ( v , NULL )"		6121839	0					
ANR	6122199	Callee	get_tok_str		6121839	0					
ANR	6122200	Identifier	get_tok_str		6121839	0					
ANR	6122201	ArgumentList	v		6121839	1					
ANR	6122202	Argument	v		6121839	0					
ANR	6122203	Identifier	v		6121839	0					
ANR	6122204	Argument	NULL		6121839	1					
ANR	6122205	Identifier	NULL		6121839	0					
ANR	6122206	BreakStatement	break ;	771:2:18289:18294	6121839	40	True				
ANR	6122207	Label	case VT_FUNC :	772:1:18297:18309	6121839	41	True				
ANR	6122208	Identifier	VT_FUNC		6121839	0					
ANR	6122209	ExpressionStatement	s = type -> ref	773:2:18313:18326	6121839	42	True				
ANR	6122210	AssignmentExpression	s = type -> ref		6121839	0		=			
ANR	6122211	Identifier	s		6121839	0					
ANR	6122212	PtrMemberAccess	type -> ref		6121839	1					
ANR	6122213	Identifier	type		6121839	0					
ANR	6122214	Identifier	ref		6121839	1					
ANR	6122215	ExpressionStatement	"type_to_str ( buf , buf_size , & s -> type , varstr )"	774:2:18330:18375	6121839	43	True				
ANR	6122216	CallExpression	"type_to_str ( buf , buf_size , & s -> type , varstr )"		6121839	0					
ANR	6122217	Callee	type_to_str		6121839	0					
ANR	6122218	Identifier	type_to_str		6121839	0					
ANR	6122219	ArgumentList	buf		6121839	1					
ANR	6122220	Argument	buf		6121839	0					
ANR	6122221	Identifier	buf		6121839	0					
ANR	6122222	Argument	buf_size		6121839	1					
ANR	6122223	Identifier	buf_size		6121839	0					
ANR	6122224	Argument	& s -> type		6121839	2					
ANR	6122225	UnaryOperationExpression	& s -> type		6121839	0					
ANR	6122226	UnaryOperator	&		6121839	0					
ANR	6122227	PtrMemberAccess	s -> type		6121839	1					
ANR	6122228	Identifier	s		6121839	0					
ANR	6122229	Identifier	type		6121839	1					
ANR	6122230	Argument	varstr		6121839	3					
ANR	6122231	Identifier	varstr		6121839	0					
ANR	6122232	ExpressionStatement	"pstrcat ( buf , buf_size , ""("" )"	775:2:18379:18407	6121839	44	True				
ANR	6122233	CallExpression	"pstrcat ( buf , buf_size , ""("" )"		6121839	0					
ANR	6122234	Callee	pstrcat		6121839	0					
ANR	6122235	Identifier	pstrcat		6121839	0					
ANR	6122236	ArgumentList	buf		6121839	1					
ANR	6122237	Argument	buf		6121839	0					
ANR	6122238	Identifier	buf		6121839	0					
ANR	6122239	Argument	buf_size		6121839	1					
ANR	6122240	Identifier	buf_size		6121839	0					
ANR	6122241	Argument	"""("""		6121839	2					
ANR	6122242	PrimaryExpression	"""("""		6121839	0					
ANR	6122243	ExpressionStatement	sa = s -> next	776:2:18411:18423	6121839	45	True				
ANR	6122244	AssignmentExpression	sa = s -> next		6121839	0		=			
ANR	6122245	Identifier	sa		6121839	0					
ANR	6122246	PtrMemberAccess	s -> next		6121839	1					
ANR	6122247	Identifier	s		6121839	0					
ANR	6122248	Identifier	next		6121839	1					
ANR	6122249	WhileStatement	while ( sa != NULL )		6121839	46					
ANR	6122250	Condition	sa != NULL	777:9:18434:18443	6121839	0	True				
ANR	6122251	EqualityExpression	sa != NULL		6121839	0		!=			
ANR	6122252	Identifier	sa		6121839	0					
ANR	6122253	Identifier	NULL		6121839	1					
ANR	6122254	CompoundStatement		96:21:1860:1860	6121839	1					
ANR	6122255	ExpressionStatement	"type_to_str ( buf1 , sizeof ( buf1 ) , & sa -> type , NULL )"	778:3:18451:18500	6121839	0	True				
ANR	6122256	CallExpression	"type_to_str ( buf1 , sizeof ( buf1 ) , & sa -> type , NULL )"		6121839	0					
ANR	6122257	Callee	type_to_str		6121839	0					
ANR	6122258	Identifier	type_to_str		6121839	0					
ANR	6122259	ArgumentList	buf1		6121839	1					
ANR	6122260	Argument	buf1		6121839	0					
ANR	6122261	Identifier	buf1		6121839	0					
ANR	6122262	Argument	sizeof ( buf1 )		6121839	1					
ANR	6122263	SizeofExpression	sizeof ( buf1 )		6121839	0					
ANR	6122264	Sizeof	sizeof		6121839	0					
ANR	6122265	SizeofOperand	buf1		6121839	1					
ANR	6122266	Argument	& sa -> type		6121839	2					
ANR	6122267	UnaryOperationExpression	& sa -> type		6121839	0					
ANR	6122268	UnaryOperator	&		6121839	0					
ANR	6122269	PtrMemberAccess	sa -> type		6121839	1					
ANR	6122270	Identifier	sa		6121839	0					
ANR	6122271	Identifier	type		6121839	1					
ANR	6122272	Argument	NULL		6121839	3					
ANR	6122273	Identifier	NULL		6121839	0					
ANR	6122274	ExpressionStatement	"pstrcat ( buf , buf_size , buf1 )"	779:3:18505:18534	6121839	1	True				
ANR	6122275	CallExpression	"pstrcat ( buf , buf_size , buf1 )"		6121839	0					
ANR	6122276	Callee	pstrcat		6121839	0					
ANR	6122277	Identifier	pstrcat		6121839	0					
ANR	6122278	ArgumentList	buf		6121839	1					
ANR	6122279	Argument	buf		6121839	0					
ANR	6122280	Identifier	buf		6121839	0					
ANR	6122281	Argument	buf_size		6121839	1					
ANR	6122282	Identifier	buf_size		6121839	0					
ANR	6122283	Argument	buf1		6121839	2					
ANR	6122284	Identifier	buf1		6121839	0					
ANR	6122285	ExpressionStatement	sa = sa -> next	780:3:18539:18552	6121839	2	True				
ANR	6122286	AssignmentExpression	sa = sa -> next		6121839	0		=			
ANR	6122287	Identifier	sa		6121839	0					
ANR	6122288	PtrMemberAccess	sa -> next		6121839	1					
ANR	6122289	Identifier	sa		6121839	0					
ANR	6122290	Identifier	next		6121839	1					
ANR	6122291	IfStatement	if ( sa )		6121839	3					
ANR	6122292	Condition	sa	781:7:18561:18562	6121839	0	True				
ANR	6122293	Identifier	sa		6121839	0					
ANR	6122294	CompoundStatement		100:11:1979:1979	6121839	1					
ANR	6122295	ExpressionStatement	"pstrcat ( buf , buf_size , "", "" )"	782:4:18571:18600	6121839	0	True				
ANR	6122296	CallExpression	"pstrcat ( buf , buf_size , "", "" )"		6121839	0					
ANR	6122297	Callee	pstrcat		6121839	0					
ANR	6122298	Identifier	pstrcat		6121839	0					
ANR	6122299	ArgumentList	buf		6121839	1					
ANR	6122300	Argument	buf		6121839	0					
ANR	6122301	Identifier	buf		6121839	0					
ANR	6122302	Argument	buf_size		6121839	1					
ANR	6122303	Identifier	buf_size		6121839	0					
ANR	6122304	Argument	""", """		6121839	2					
ANR	6122305	PrimaryExpression	""", """		6121839	0					
ANR	6122306	ExpressionStatement	"pstrcat ( buf , buf_size , "")"" )"	785:2:18613:18641	6121839	47	True				
ANR	6122307	CallExpression	"pstrcat ( buf , buf_size , "")"" )"		6121839	0					
ANR	6122308	Callee	pstrcat		6121839	0					
ANR	6122309	Identifier	pstrcat		6121839	0					
ANR	6122310	ArgumentList	buf		6121839	1					
ANR	6122311	Argument	buf		6121839	0					
ANR	6122312	Identifier	buf		6121839	0					
ANR	6122313	Argument	buf_size		6121839	1					
ANR	6122314	Identifier	buf_size		6121839	0					
ANR	6122315	Argument	""")"""		6121839	2					
ANR	6122316	PrimaryExpression	""")"""		6121839	0					
ANR	6122317	GotoStatement	goto no_var ;	786:2:18645:18656	6121839	48	True				
ANR	6122318	Identifier	no_var		6121839	0					
ANR	6122319	Label	case VT_PTR :	787:1:18659:18670	6121839	49	True				
ANR	6122320	Identifier	VT_PTR		6121839	0					
ANR	6122321	ExpressionStatement	s = type -> ref	788:2:18674:18687	6121839	50	True				
ANR	6122322	AssignmentExpression	s = type -> ref		6121839	0		=			
ANR	6122323	Identifier	s		6121839	0					
ANR	6122324	PtrMemberAccess	type -> ref		6121839	1					
ANR	6122325	Identifier	type		6121839	0					
ANR	6122326	Identifier	ref		6121839	1					
ANR	6122327	IfStatement	if ( t & VT_ARRAY )		6121839	51					
ANR	6122328	Condition	t & VT_ARRAY	789:6:18695:18706	6121839	0	True				
ANR	6122329	BitAndExpression	t & VT_ARRAY		6121839	0		&			
ANR	6122330	Identifier	t		6121839	0					
ANR	6122331	Identifier	VT_ARRAY		6121839	1					
ANR	6122332	CompoundStatement		108:20:2123:2123	6121839	1					
ANR	6122333	ExpressionStatement	"type_to_str ( buf , buf_size , & s -> type , NULL )"	790:3:18714:18757	6121839	0	True				
ANR	6122334	CallExpression	"type_to_str ( buf , buf_size , & s -> type , NULL )"		6121839	0					
ANR	6122335	Callee	type_to_str		6121839	0					
ANR	6122336	Identifier	type_to_str		6121839	0					
ANR	6122337	ArgumentList	buf		6121839	1					
ANR	6122338	Argument	buf		6121839	0					
ANR	6122339	Identifier	buf		6121839	0					
ANR	6122340	Argument	buf_size		6121839	1					
ANR	6122341	Identifier	buf_size		6121839	0					
ANR	6122342	Argument	& s -> type		6121839	2					
ANR	6122343	UnaryOperationExpression	& s -> type		6121839	0					
ANR	6122344	UnaryOperator	&		6121839	0					
ANR	6122345	PtrMemberAccess	s -> type		6121839	1					
ANR	6122346	Identifier	s		6121839	0					
ANR	6122347	Identifier	type		6121839	1					
ANR	6122348	Argument	NULL		6121839	3					
ANR	6122349	Identifier	NULL		6121839	0					
ANR	6122350	ElseStatement	else		6121839	0					
ANR	6122351	CompoundStatement		110:9:2182:2182	6121839	0					
ANR	6122352	ExpressionStatement	"pstrcpy ( buf1 , sizeof ( buf1 ) , ""*"" )"	792:3:18773:18806	6121839	0	True				
ANR	6122353	CallExpression	"pstrcpy ( buf1 , sizeof ( buf1 ) , ""*"" )"		6121839	0					
ANR	6122354	Callee	pstrcpy		6121839	0					
ANR	6122355	Identifier	pstrcpy		6121839	0					
ANR	6122356	ArgumentList	buf1		6121839	1					
ANR	6122357	Argument	buf1		6121839	0					
ANR	6122358	Identifier	buf1		6121839	0					
ANR	6122359	Argument	sizeof ( buf1 )		6121839	1					
ANR	6122360	SizeofExpression	sizeof ( buf1 )		6121839	0					
ANR	6122361	Sizeof	sizeof		6121839	0					
ANR	6122362	SizeofOperand	buf1		6121839	1					
ANR	6122363	Argument	"""*"""		6121839	2					
ANR	6122364	PrimaryExpression	"""*"""		6121839	0					
ANR	6122365	IfStatement	if ( varstr )		6121839	1					
ANR	6122366	Condition	varstr	793:7:18815:18820	6121839	0	True				
ANR	6122367	Identifier	varstr		6121839	0					
ANR	6122368	CompoundStatement		112:15:2237:2237	6121839	1					
ANR	6122369	ExpressionStatement	"pstrcat ( buf1 , sizeof ( buf1 ) , varstr )"	794:4:18829:18865	6121839	0	True				
ANR	6122370	CallExpression	"pstrcat ( buf1 , sizeof ( buf1 ) , varstr )"		6121839	0					
ANR	6122371	Callee	pstrcat		6121839	0					
ANR	6122372	Identifier	pstrcat		6121839	0					
ANR	6122373	ArgumentList	buf1		6121839	1					
ANR	6122374	Argument	buf1		6121839	0					
ANR	6122375	Identifier	buf1		6121839	0					
ANR	6122376	Argument	sizeof ( buf1 )		6121839	1					
ANR	6122377	SizeofExpression	sizeof ( buf1 )		6121839	0					
ANR	6122378	Sizeof	sizeof		6121839	0					
ANR	6122379	SizeofOperand	buf1		6121839	1					
ANR	6122380	Argument	varstr		6121839	2					
ANR	6122381	Identifier	varstr		6121839	0					
ANR	6122382	ExpressionStatement	"type_to_str ( buf , buf_size , & s -> type , buf1 )"	796:3:18875:18918	6121839	2	True				
ANR	6122383	CallExpression	"type_to_str ( buf , buf_size , & s -> type , buf1 )"		6121839	0					
ANR	6122384	Callee	type_to_str		6121839	0					
ANR	6122385	Identifier	type_to_str		6121839	0					
ANR	6122386	ArgumentList	buf		6121839	1					
ANR	6122387	Argument	buf		6121839	0					
ANR	6122388	Identifier	buf		6121839	0					
ANR	6122389	Argument	buf_size		6121839	1					
ANR	6122390	Identifier	buf_size		6121839	0					
ANR	6122391	Argument	& s -> type		6121839	2					
ANR	6122392	UnaryOperationExpression	& s -> type		6121839	0					
ANR	6122393	UnaryOperator	&		6121839	0					
ANR	6122394	PtrMemberAccess	s -> type		6121839	1					
ANR	6122395	Identifier	s		6121839	0					
ANR	6122396	Identifier	type		6121839	1					
ANR	6122397	Argument	buf1		6121839	3					
ANR	6122398	Identifier	buf1		6121839	0					
ANR	6122399	GotoStatement	goto no_var ;	798:2:18926:18937	6121839	52	True				
ANR	6122400	Identifier	no_var		6121839	0					
ANR	6122401	IfStatement	if ( varstr )		6121839	10					
ANR	6122402	Condition	varstr	800:5:18947:18952	6121839	0	True				
ANR	6122403	Identifier	varstr		6121839	0					
ANR	6122404	CompoundStatement		119:13:2369:2369	6121839	1					
ANR	6122405	ExpressionStatement	"pstrcat ( buf , buf_size , "" "" )"	801:2:18959:18987	6121839	0	True				
ANR	6122406	CallExpression	"pstrcat ( buf , buf_size , "" "" )"		6121839	0					
ANR	6122407	Callee	pstrcat		6121839	0					
ANR	6122408	Identifier	pstrcat		6121839	0					
ANR	6122409	ArgumentList	buf		6121839	1					
ANR	6122410	Argument	buf		6121839	0					
ANR	6122411	Identifier	buf		6121839	0					
ANR	6122412	Argument	buf_size		6121839	1					
ANR	6122413	Identifier	buf_size		6121839	0					
ANR	6122414	Argument	""" """		6121839	2					
ANR	6122415	PrimaryExpression	""" """		6121839	0					
ANR	6122416	ExpressionStatement	"pstrcat ( buf , buf_size , varstr )"	802:2:18991:19022	6121839	1	True				
ANR	6122417	CallExpression	"pstrcat ( buf , buf_size , varstr )"		6121839	0					
ANR	6122418	Callee	pstrcat		6121839	0					
ANR	6122419	Identifier	pstrcat		6121839	0					
ANR	6122420	ArgumentList	buf		6121839	1					
ANR	6122421	Argument	buf		6121839	0					
ANR	6122422	Identifier	buf		6121839	0					
ANR	6122423	Argument	buf_size		6121839	1					
ANR	6122424	Identifier	buf_size		6121839	0					
ANR	6122425	Argument	varstr		6121839	2					
ANR	6122426	Identifier	varstr		6121839	0					
ANR	6122427	Label	no_var :	804:0:19027:19033	6121839	11	True				
ANR	6122428	Identifier	no_var		6121839	0					
ANR	6122429	ExpressionStatement		805:1:19036:19036	6121839	12	True				
ANR	6122430	ReturnType	static void		6121839	1					
ANR	6122431	Identifier	type_to_str		6121839	2					
ANR	6122432	ParameterList	"char * buf , int buf_size , CType * type , const char * varstr"		6121839	3					
ANR	6122433	Parameter	char * buf	682:24:16527:16535	6121839	0	True				
ANR	6122434	ParameterType	char *		6121839	0					
ANR	6122435	Identifier	buf		6121839	1					
ANR	6122436	Parameter	int buf_size	682:35:16538:16549	6121839	1	True				
ANR	6122437	ParameterType	int		6121839	0					
ANR	6122438	Identifier	buf_size		6121839	1					
ANR	6122439	Parameter	CType * type	682:49:16552:16562	6121839	2	True				
ANR	6122440	ParameterType	CType *		6121839	0					
ANR	6122441	Identifier	type		6121839	1					
ANR	6122442	Parameter	const char * varstr	682:62:16565:16582	6121839	3	True				
ANR	6122443	ParameterType	const char *		6121839	0					
ANR	6122444	Identifier	varstr		6121839	1					
ANR	6122445	CFGEntryNode	ENTRY		6121839		True				
ANR	6122446	CFGExitNode	EXIT		6121839		True				
ANR	6122447	Symbol	varstr		6121839						
ANR	6122448	Symbol	get_tok_str		6121839						
ANR	6122449	Symbol	VT_INT16		6121839						
ANR	6122450	Symbol	* type -> ref		6121839						
ANR	6122451	Symbol	VT_TYPE		6121839						
ANR	6122452	Symbol	tstr		6121839						
ANR	6122453	Symbol	s -> next		6121839						
ANR	6122454	Symbol	type		6121839						
ANR	6122455	Symbol	sa		6121839						
ANR	6122456	Symbol	VT_STRUCT		6121839						
ANR	6122457	Symbol	bt		6121839						
ANR	6122458	Symbol	VT_VOLATILE		6121839						
ANR	6122459	Symbol	VT_UNSIGNED		6121839						
ANR	6122460	Symbol	* type		6121839						
ANR	6122461	Symbol	type -> ref -> v		6121839						
ANR	6122462	Symbol	~SYM_STRUCT		6121839						
ANR	6122463	Symbol	* sa		6121839						
ANR	6122464	Symbol	VT_INT32		6121839						
ANR	6122465	Symbol	type -> ref		6121839						
ANR	6122466	Symbol	& s -> type		6121839						
ANR	6122467	Symbol	* buf		6121839						
ANR	6122468	Symbol	SYM_FIRST_ANOM		6121839						
ANR	6122469	Symbol	NULL		6121839						
ANR	6122470	Symbol	VT_CONSTANT		6121839						
ANR	6122471	Symbol	buf_size		6121839						
ANR	6122472	Symbol	VT_INT8		6121839						
ANR	6122473	Symbol	VT_BTYPE		6121839						
ANR	6122474	Symbol	buf1		6121839						
ANR	6122475	Symbol	VT_UNION		6121839						
ANR	6122476	Symbol	buf		6121839						
ANR	6122477	Symbol	s		6121839						
ANR	6122478	Symbol	t		6121839						
ANR	6122479	Symbol	& sa -> type		6121839						
ANR	6122480	Symbol	v		6121839						
ANR	6122481	Symbol	type -> t		6121839						
ANR	6122482	Symbol	VT_INT64		6121839						
ANR	6122483	Symbol	* * type		6121839						
ANR	6122484	Symbol	sa -> next		6121839						
ANR	6122485	Symbol	* s		6121839						
ANR	6122486	Symbol	VT_CHAR		6121839						
ANR	6122487	Symbol	VT_ARRAY		6121839						
ANR	6122488	Function	parse_attribute	815:0:19352:22272							
ANR	6122489	FunctionDef	parse_attribute (AttributeDef * ad)		6122488	0					
ANR	6122490	CompoundStatement		815:46:19398:22272	6122488	0					
ANR	6122491	IdentifierDeclStatement	int t ;	816:1:19401:19406	6122488	0	True				
ANR	6122492	IdentifierDecl	t		6122488	0					
ANR	6122493	IdentifierDeclType	int		6122488	0					
ANR	6122494	Identifier	t		6122488	1					
ANR	6122495	IdentifierDeclStatement	long long n ;	817:1:19409:19420	6122488	1	True				
ANR	6122496	IdentifierDecl	n		6122488	0					
ANR	6122497	IdentifierDeclType	long long		6122488	0					
ANR	6122498	Identifier	n		6122488	1					
ANR	6122499	WhileStatement	while ( tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2 )		6122488	2					
ANR	6122500	Condition	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2	819:8:19431:19476	6122488	0	True				
ANR	6122501	OrExpression	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2		6122488	0		||			
ANR	6122502	EqualityExpression	tok == TOK_ATTRIBUTE1		6122488	0		==			
ANR	6122503	Identifier	tok		6122488	0					
ANR	6122504	Identifier	TOK_ATTRIBUTE1		6122488	1					
ANR	6122505	EqualityExpression	tok == TOK_ATTRIBUTE2		6122488	1		==			
ANR	6122506	Identifier	tok		6122488	0					
ANR	6122507	Identifier	TOK_ATTRIBUTE2		6122488	1					
ANR	6122508	CompoundStatement		5:56:80:80	6122488	1					
ANR	6122509	ExpressionStatement	next ( )	820:2:19483:19490	6122488	0	True				
ANR	6122510	CallExpression	next ( )		6122488	0					
ANR	6122511	Callee	next		6122488	0					
ANR	6122512	Identifier	next		6122488	0					
ANR	6122513	ArgumentList			6122488	1					
ANR	6122514	ExpressionStatement	skip ( '(' )	821:2:19494:19504	6122488	1	True				
ANR	6122515	CallExpression	skip ( '(' )		6122488	0					
ANR	6122516	Callee	skip		6122488	0					
ANR	6122517	Identifier	skip		6122488	0					
ANR	6122518	ArgumentList	'('		6122488	1					
ANR	6122519	Argument	'('		6122488	0					
ANR	6122520	PrimaryExpression	'('		6122488	0					
ANR	6122521	ExpressionStatement	skip ( '(' )	822:2:19508:19518	6122488	2	True				
ANR	6122522	CallExpression	skip ( '(' )		6122488	0					
ANR	6122523	Callee	skip		6122488	0					
ANR	6122524	Identifier	skip		6122488	0					
ANR	6122525	ArgumentList	'('		6122488	1					
ANR	6122526	Argument	'('		6122488	0					
ANR	6122527	PrimaryExpression	'('		6122488	0					
ANR	6122528	WhileStatement	while ( tok != ')' )		6122488	3					
ANR	6122529	Condition	tok != ')'	823:9:19529:19538	6122488	0	True				
ANR	6122530	EqualityExpression	tok != ')'		6122488	0		!=			
ANR	6122531	Identifier	tok		6122488	0					
ANR	6122532	PrimaryExpression	')'		6122488	1					
ANR	6122533	CompoundStatement		9:21:142:142	6122488	1					
ANR	6122534	IfStatement	if ( tok < TOK_IDENT )		6122488	0					
ANR	6122535	Condition	tok < TOK_IDENT	824:7:19550:19564	6122488	0	True				
ANR	6122536	RelationalExpression	tok < TOK_IDENT		6122488	0		<			
ANR	6122537	Identifier	tok		6122488	0					
ANR	6122538	Identifier	TOK_IDENT		6122488	1					
ANR	6122539	CompoundStatement		10:24:168:168	6122488	1					
ANR	6122540	ExpressionStatement	"expect ( ""attribute name"" )"	825:4:19573:19598	6122488	0	True				
ANR	6122541	CallExpression	"expect ( ""attribute name"" )"		6122488	0					
ANR	6122542	Callee	expect		6122488	0					
ANR	6122543	Identifier	expect		6122488	0					
ANR	6122544	ArgumentList	"""attribute name"""		6122488	1					
ANR	6122545	Argument	"""attribute name"""		6122488	0					
ANR	6122546	PrimaryExpression	"""attribute name"""		6122488	0					
ANR	6122547	ExpressionStatement	t = tok	827:3:19608:19615	6122488	1	True				
ANR	6122548	AssignmentExpression	t = tok		6122488	0		=			
ANR	6122549	Identifier	t		6122488	0					
ANR	6122550	Identifier	tok		6122488	1					
ANR	6122551	ExpressionStatement	next ( )	828:3:19620:19627	6122488	2	True				
ANR	6122552	CallExpression	next ( )		6122488	0					
ANR	6122553	Callee	next		6122488	0					
ANR	6122554	Identifier	next		6122488	0					
ANR	6122555	ArgumentList			6122488	1					
ANR	6122556	SwitchStatement	switch ( t )		6122488	3					
ANR	6122557	Condition	t	829:11:19640:19640	6122488	0	True				
ANR	6122558	Identifier	t		6122488	0					
ANR	6122559	CompoundStatement		15:14:244:244	6122488	1					
ANR	6122560	Label	case TOK_ALIAS1 :	830:3:19648:19663	6122488	0	True				
ANR	6122561	Identifier	TOK_ALIAS1		6122488	0					
ANR	6122562	Label	case TOK_ALIAS2 :	831:3:19668:19683	6122488	1	True				
ANR	6122563	Identifier	TOK_ALIAS2		6122488	0					
ANR	6122564	ExpressionStatement	skip ( '(' )	832:4:19689:19699	6122488	2	True				
ANR	6122565	CallExpression	skip ( '(' )		6122488	0					
ANR	6122566	Callee	skip		6122488	0					
ANR	6122567	Identifier	skip		6122488	0					
ANR	6122568	ArgumentList	'('		6122488	1					
ANR	6122569	Argument	'('		6122488	0					
ANR	6122570	PrimaryExpression	'('		6122488	0					
ANR	6122571	IfStatement	if ( tok != TOK_STR )		6122488	3					
ANR	6122572	Condition	tok != TOK_STR	833:8:19709:19722	6122488	0	True				
ANR	6122573	EqualityExpression	tok != TOK_STR		6122488	0		!=			
ANR	6122574	Identifier	tok		6122488	0					
ANR	6122575	Identifier	TOK_STR		6122488	1					
ANR	6122576	CompoundStatement		19:24:326:326	6122488	1					
ANR	6122577	ExpressionStatement	"expect ( ""alias(\\""target\\"")"" )"	834:5:19732:19760	6122488	0	True				
ANR	6122578	CallExpression	"expect ( ""alias(\\""target\\"")"" )"		6122488	0					
ANR	6122579	Callee	expect		6122488	0					
ANR	6122580	Identifier	expect		6122488	0					
ANR	6122581	ArgumentList	"""alias(\\""target\\"")"""		6122488	1					
ANR	6122582	Argument	"""alias(\\""target\\"")"""		6122488	0					
ANR	6122583	PrimaryExpression	"""alias(\\""target\\"")"""		6122488	0					
ANR	6122584	ExpressionStatement	"ad -> alias_target = tok_alloc ( ( char * ) tokc . cstr -> data , tokc . cstr -> size - 1 ) -> tok"	836:4:19772:19900	6122488	4	True				
ANR	6122585	AssignmentExpression	"ad -> alias_target = tok_alloc ( ( char * ) tokc . cstr -> data , tokc . cstr -> size - 1 ) -> tok"		6122488	0		=			
ANR	6122586	PtrMemberAccess	ad -> alias_target		6122488	0					
ANR	6122587	Identifier	ad		6122488	0					
ANR	6122588	Identifier	alias_target		6122488	1					
ANR	6122589	PtrMemberAccess	"tok_alloc ( ( char * ) tokc . cstr -> data , tokc . cstr -> size - 1 ) -> tok"		6122488	1					
ANR	6122590	CallExpression	"tok_alloc ( ( char * ) tokc . cstr -> data , tokc . cstr -> size - 1 )"		6122488	0					
ANR	6122591	Callee	tok_alloc		6122488	0					
ANR	6122592	Identifier	tok_alloc		6122488	0					
ANR	6122593	ArgumentList	( char * ) tokc . cstr -> data		6122488	1					
ANR	6122594	Argument	( char * ) tokc . cstr -> data		6122488	0					
ANR	6122595	CastExpression	( char * ) tokc . cstr -> data		6122488	0					
ANR	6122596	CastTarget	char *		6122488	0					
ANR	6122597	PtrMemberAccess	tokc . cstr -> data		6122488	1					
ANR	6122598	MemberAccess	tokc . cstr		6122488	0					
ANR	6122599	Identifier	tokc		6122488	0					
ANR	6122600	Identifier	cstr		6122488	1					
ANR	6122601	Identifier	data		6122488	1					
ANR	6122602	Argument	tokc . cstr -> size - 1		6122488	1					
ANR	6122603	AdditiveExpression	tokc . cstr -> size - 1		6122488	0		-			
ANR	6122604	PtrMemberAccess	tokc . cstr -> size		6122488	0					
ANR	6122605	MemberAccess	tokc . cstr		6122488	0					
ANR	6122606	Identifier	tokc		6122488	0					
ANR	6122607	Identifier	cstr		6122488	1					
ANR	6122608	Identifier	size		6122488	1					
ANR	6122609	PrimaryExpression	1		6122488	1					
ANR	6122610	Identifier	tok		6122488	1					
ANR	6122611	ExpressionStatement	next ( )	838:4:19906:19913	6122488	5	True				
ANR	6122612	CallExpression	next ( )		6122488	0					
ANR	6122613	Callee	next		6122488	0					
ANR	6122614	Identifier	next		6122488	0					
ANR	6122615	ArgumentList			6122488	1					
ANR	6122616	ExpressionStatement	skip ( ')' )	839:4:19919:19929	6122488	6	True				
ANR	6122617	CallExpression	skip ( ')' )		6122488	0					
ANR	6122618	Callee	skip		6122488	0					
ANR	6122619	Identifier	skip		6122488	0					
ANR	6122620	ArgumentList	')'		6122488	1					
ANR	6122621	Argument	')'		6122488	0					
ANR	6122622	PrimaryExpression	')'		6122488	0					
ANR	6122623	BreakStatement	break ;	840:4:19935:19940	6122488	7	True				
ANR	6122624	Label	case TOK_ALIGNED1 :	841:3:19945:19962	6122488	8	True				
ANR	6122625	Identifier	TOK_ALIGNED1		6122488	0					
ANR	6122626	Label	case TOK_ALIGNED2 :	842:3:19967:19984	6122488	9	True				
ANR	6122627	Identifier	TOK_ALIGNED2		6122488	0					
ANR	6122628	IfStatement	if ( tok == '(' )		6122488	10					
ANR	6122629	Condition	tok == '('	843:8:19994:20003	6122488	0	True				
ANR	6122630	EqualityExpression	tok == '('		6122488	0		==			
ANR	6122631	Identifier	tok		6122488	0					
ANR	6122632	PrimaryExpression	'('		6122488	1					
ANR	6122633	CompoundStatement		29:20:607:607	6122488	1					
ANR	6122634	ExpressionStatement	next ( )	844:5:20013:20020	6122488	0	True				
ANR	6122635	CallExpression	next ( )		6122488	0					
ANR	6122636	Callee	next		6122488	0					
ANR	6122637	Identifier	next		6122488	0					
ANR	6122638	ArgumentList			6122488	1					
ANR	6122639	ExpressionStatement	n = expr_const ( )	845:5:20027:20044	6122488	1	True				
ANR	6122640	AssignmentExpression	n = expr_const ( )		6122488	0		=			
ANR	6122641	Identifier	n		6122488	0					
ANR	6122642	CallExpression	expr_const ( )		6122488	1					
ANR	6122643	Callee	expr_const		6122488	0					
ANR	6122644	Identifier	expr_const		6122488	0					
ANR	6122645	ArgumentList			6122488	1					
ANR	6122646	IfStatement	if ( n <= 0 || ( n & ( n - 1 ) ) != 0 )		6122488	2					
ANR	6122647	Condition	n <= 0 || ( n & ( n - 1 ) ) != 0	846:9:20055:20082	6122488	0	True				
ANR	6122648	OrExpression	n <= 0 || ( n & ( n - 1 ) ) != 0		6122488	0		||			
ANR	6122649	RelationalExpression	n <= 0		6122488	0		<=			
ANR	6122650	Identifier	n		6122488	0					
ANR	6122651	PrimaryExpression	0		6122488	1					
ANR	6122652	EqualityExpression	( n & ( n - 1 ) ) != 0		6122488	1		!=			
ANR	6122653	BitAndExpression	n & ( n - 1 )		6122488	0		&			
ANR	6122654	Identifier	n		6122488	0					
ANR	6122655	AdditiveExpression	n - 1		6122488	1		-			
ANR	6122656	Identifier	n		6122488	0					
ANR	6122657	PrimaryExpression	1		6122488	1					
ANR	6122658	PrimaryExpression	0		6122488	1					
ANR	6122659	CompoundStatement		32:39:686:686	6122488	1					
ANR	6122660	ExpressionStatement	"TCC_ERR ( ""alignment must be a positive power of two"" )"	847:6:20093:20146	6122488	0	True				
ANR	6122661	CallExpression	"TCC_ERR ( ""alignment must be a positive power of two"" )"		6122488	0					
ANR	6122662	Callee	TCC_ERR		6122488	0					
ANR	6122663	Identifier	TCC_ERR		6122488	0					
ANR	6122664	ArgumentList	"""alignment must be a positive power of two"""		6122488	1					
ANR	6122665	Argument	"""alignment must be a positive power of two"""		6122488	0					
ANR	6122666	PrimaryExpression	"""alignment must be a positive power of two"""		6122488	0					
ANR	6122667	ExpressionStatement	skip ( ')' )	849:5:20160:20170	6122488	3	True				
ANR	6122668	CallExpression	skip ( ')' )		6122488	0					
ANR	6122669	Callee	skip		6122488	0					
ANR	6122670	Identifier	skip		6122488	0					
ANR	6122671	ArgumentList	')'		6122488	1					
ANR	6122672	Argument	')'		6122488	0					
ANR	6122673	PrimaryExpression	')'		6122488	0					
ANR	6122674	ElseStatement	else		6122488	0					
ANR	6122675	CompoundStatement		36:11:784:784	6122488	0					
ANR	6122676	ExpressionStatement	n = MAX_ALIGN	851:5:20190:20203	6122488	0	True				
ANR	6122677	AssignmentExpression	n = MAX_ALIGN		6122488	0		=			
ANR	6122678	Identifier	n		6122488	0					
ANR	6122679	Identifier	MAX_ALIGN		6122488	1					
ANR	6122680	ExpressionStatement	ad -> aligned = n	853:4:20215:20230	6122488	11	True				
ANR	6122681	AssignmentExpression	ad -> aligned = n		6122488	0		=			
ANR	6122682	PtrMemberAccess	ad -> aligned		6122488	0					
ANR	6122683	Identifier	ad		6122488	0					
ANR	6122684	Identifier	aligned		6122488	1					
ANR	6122685	Identifier	n		6122488	1					
ANR	6122686	BreakStatement	break ;	854:4:20236:20241	6122488	12	True				
ANR	6122687	Label	case TOK_PACKED1 :	855:3:20246:20262	6122488	13	True				
ANR	6122688	Identifier	TOK_PACKED1		6122488	0					
ANR	6122689	Label	case TOK_PACKED2 :	856:3:20267:20283	6122488	14	True				
ANR	6122690	Identifier	TOK_PACKED2		6122488	0					
ANR	6122691	ExpressionStatement	ad -> packed = 1	857:4:20289:20303	6122488	15	True				
ANR	6122692	AssignmentExpression	ad -> packed = 1		6122488	0		=			
ANR	6122693	PtrMemberAccess	ad -> packed		6122488	0					
ANR	6122694	Identifier	ad		6122488	0					
ANR	6122695	Identifier	packed		6122488	1					
ANR	6122696	PrimaryExpression	1		6122488	1					
ANR	6122697	BreakStatement	break ;	858:4:20309:20314	6122488	16	True				
ANR	6122698	Label	case TOK_WEAK1 :	859:3:20319:20333	6122488	17	True				
ANR	6122699	Identifier	TOK_WEAK1		6122488	0					
ANR	6122700	Label	case TOK_WEAK2 :	860:3:20338:20352	6122488	18	True				
ANR	6122701	Identifier	TOK_WEAK2		6122488	0					
ANR	6122702	ExpressionStatement	ad -> weak = 1	861:4:20358:20370	6122488	19	True				
ANR	6122703	AssignmentExpression	ad -> weak = 1		6122488	0		=			
ANR	6122704	PtrMemberAccess	ad -> weak		6122488	0					
ANR	6122705	Identifier	ad		6122488	0					
ANR	6122706	Identifier	weak		6122488	1					
ANR	6122707	PrimaryExpression	1		6122488	1					
ANR	6122708	BreakStatement	break ;	862:4:20376:20381	6122488	20	True				
ANR	6122709	Label	case TOK_UNUSED1 :	863:3:20386:20402	6122488	21	True				
ANR	6122710	Identifier	TOK_UNUSED1		6122488	0					
ANR	6122711	Label	case TOK_UNUSED2 :	864:3:20407:20423	6122488	22	True				
ANR	6122712	Identifier	TOK_UNUSED2		6122488	0					
ANR	6122713	BreakStatement	break ;	867:4:20520:20525	6122488	23	True				
ANR	6122714	Label	case TOK_NORETURN1 :	868:3:20530:20548	6122488	24	True				
ANR	6122715	Identifier	TOK_NORETURN1		6122488	0					
ANR	6122716	Label	case TOK_NORETURN2 :	869:3:20553:20571	6122488	25	True				
ANR	6122717	Identifier	TOK_NORETURN2		6122488	0					
ANR	6122718	BreakStatement	break ;	872:4:20668:20673	6122488	26	True				
ANR	6122719	Label	case TOK_CDECL1 :	873:3:20678:20693	6122488	27	True				
ANR	6122720	Identifier	TOK_CDECL1		6122488	0					
ANR	6122721	Label	case TOK_CDECL2 :	874:3:20698:20713	6122488	28	True				
ANR	6122722	Identifier	TOK_CDECL2		6122488	0					
ANR	6122723	Label	case TOK_CDECL3 :	875:3:20718:20733	6122488	29	True				
ANR	6122724	Identifier	TOK_CDECL3		6122488	0					
ANR	6122725	ExpressionStatement	ad -> func_call = FUNC_CDECL	876:4:20739:20765	6122488	30	True				
ANR	6122726	AssignmentExpression	ad -> func_call = FUNC_CDECL		6122488	0		=			
ANR	6122727	PtrMemberAccess	ad -> func_call		6122488	0					
ANR	6122728	Identifier	ad		6122488	0					
ANR	6122729	Identifier	func_call		6122488	1					
ANR	6122730	Identifier	FUNC_CDECL		6122488	1					
ANR	6122731	BreakStatement	break ;	877:4:20771:20776	6122488	31	True				
ANR	6122732	Label	case TOK_STDCALL1 :	878:3:20781:20798	6122488	32	True				
ANR	6122733	Identifier	TOK_STDCALL1		6122488	0					
ANR	6122734	Label	case TOK_STDCALL2 :	879:3:20803:20820	6122488	33	True				
ANR	6122735	Identifier	TOK_STDCALL2		6122488	0					
ANR	6122736	Label	case TOK_STDCALL3 :	880:3:20825:20842	6122488	34	True				
ANR	6122737	Identifier	TOK_STDCALL3		6122488	0					
ANR	6122738	ExpressionStatement	ad -> func_call = FUNC_STDCALL	881:4:20848:20876	6122488	35	True				
ANR	6122739	AssignmentExpression	ad -> func_call = FUNC_STDCALL		6122488	0		=			
ANR	6122740	PtrMemberAccess	ad -> func_call		6122488	0					
ANR	6122741	Identifier	ad		6122488	0					
ANR	6122742	Identifier	func_call		6122488	1					
ANR	6122743	Identifier	FUNC_STDCALL		6122488	1					
ANR	6122744	BreakStatement	break ;	882:4:20882:20887	6122488	36	True				
ANR	6122745	Label	case TOK_REGPARM1 :	884:3:20915:20932	6122488	37	True				
ANR	6122746	Identifier	TOK_REGPARM1		6122488	0					
ANR	6122747	Label	case TOK_REGPARM2 :	885:3:20937:20954	6122488	38	True				
ANR	6122748	Identifier	TOK_REGPARM2		6122488	0					
ANR	6122749	ExpressionStatement	skip ( '(' )	886:4:20960:20970	6122488	39	True				
ANR	6122750	CallExpression	skip ( '(' )		6122488	0					
ANR	6122751	Callee	skip		6122488	0					
ANR	6122752	Identifier	skip		6122488	0					
ANR	6122753	ArgumentList	'('		6122488	1					
ANR	6122754	Argument	'('		6122488	0					
ANR	6122755	PrimaryExpression	'('		6122488	0					
ANR	6122756	ExpressionStatement	n = expr_const ( )	887:4:20976:20993	6122488	40	True				
ANR	6122757	AssignmentExpression	n = expr_const ( )		6122488	0		=			
ANR	6122758	Identifier	n		6122488	0					
ANR	6122759	CallExpression	expr_const ( )		6122488	1					
ANR	6122760	Callee	expr_const		6122488	0					
ANR	6122761	Identifier	expr_const		6122488	0					
ANR	6122762	ArgumentList			6122488	1					
ANR	6122763	IfStatement	if ( n > 3 )		6122488	41					
ANR	6122764	Condition	n > 3	888:8:21003:21007	6122488	0	True				
ANR	6122765	RelationalExpression	n > 3		6122488	0		>			
ANR	6122766	Identifier	n		6122488	0					
ANR	6122767	PrimaryExpression	3		6122488	1					
ANR	6122768	CompoundStatement		74:15:1611:1611	6122488	1					
ANR	6122769	ExpressionStatement	n = 3	889:5:21017:21022	6122488	0	True				
ANR	6122770	AssignmentExpression	n = 3		6122488	0		=			
ANR	6122771	Identifier	n		6122488	0					
ANR	6122772	PrimaryExpression	3		6122488	1					
ANR	6122773	ElseStatement	else		6122488	0					
ANR	6122774	IfStatement	if ( n < 0 )		6122488	0					
ANR	6122775	Condition	n < 0	890:15:21039:21043	6122488	0	True				
ANR	6122776	RelationalExpression	n < 0		6122488	0		<			
ANR	6122777	Identifier	n		6122488	0					
ANR	6122778	PrimaryExpression	0		6122488	1					
ANR	6122779	CompoundStatement		76:22:1647:1647	6122488	1					
ANR	6122780	ExpressionStatement	n = 0	891:5:21053:21058	6122488	0	True				
ANR	6122781	AssignmentExpression	n = 0		6122488	0		=			
ANR	6122782	Identifier	n		6122488	0					
ANR	6122783	PrimaryExpression	0		6122488	1					
ANR	6122784	IfStatement	if ( n > 0 )		6122488	42					
ANR	6122785	Condition	n > 0	893:8:21074:21078	6122488	0	True				
ANR	6122786	RelationalExpression	n > 0		6122488	0		>			
ANR	6122787	Identifier	n		6122488	0					
ANR	6122788	PrimaryExpression	0		6122488	1					
ANR	6122789	CompoundStatement		79:15:1682:1682	6122488	1					
ANR	6122790	ExpressionStatement	ad -> func_call = FUNC_FASTCALL1 + n - 1	894:5:21088:21126	6122488	0	True				
ANR	6122791	AssignmentExpression	ad -> func_call = FUNC_FASTCALL1 + n - 1		6122488	0		=			
ANR	6122792	PtrMemberAccess	ad -> func_call		6122488	0					
ANR	6122793	Identifier	ad		6122488	0					
ANR	6122794	Identifier	func_call		6122488	1					
ANR	6122795	AdditiveExpression	FUNC_FASTCALL1 + n - 1		6122488	1		+			
ANR	6122796	Identifier	FUNC_FASTCALL1		6122488	0					
ANR	6122797	AdditiveExpression	n - 1		6122488	1		-			
ANR	6122798	Identifier	n		6122488	0					
ANR	6122799	PrimaryExpression	1		6122488	1					
ANR	6122800	ExpressionStatement	skip ( ')' )	896:4:21138:21148	6122488	43	True				
ANR	6122801	CallExpression	skip ( ')' )		6122488	0					
ANR	6122802	Callee	skip		6122488	0					
ANR	6122803	Identifier	skip		6122488	0					
ANR	6122804	ArgumentList	')'		6122488	1					
ANR	6122805	Argument	')'		6122488	0					
ANR	6122806	PrimaryExpression	')'		6122488	0					
ANR	6122807	BreakStatement	break ;	897:4:21154:21159	6122488	44	True				
ANR	6122808	Label	case TOK_FASTCALL1 :	898:3:21164:21182	6122488	45	True				
ANR	6122809	Identifier	TOK_FASTCALL1		6122488	0					
ANR	6122810	Label	case TOK_FASTCALL2 :	899:3:21187:21205	6122488	46	True				
ANR	6122811	Identifier	TOK_FASTCALL2		6122488	0					
ANR	6122812	Label	case TOK_FASTCALL3 :	900:3:21210:21228	6122488	47	True				
ANR	6122813	Identifier	TOK_FASTCALL3		6122488	0					
ANR	6122814	ExpressionStatement	ad -> func_call = FUNC_FASTCALLW	901:4:21234:21264	6122488	48	True				
ANR	6122815	AssignmentExpression	ad -> func_call = FUNC_FASTCALLW		6122488	0		=			
ANR	6122816	PtrMemberAccess	ad -> func_call		6122488	0					
ANR	6122817	Identifier	ad		6122488	0					
ANR	6122818	Identifier	func_call		6122488	1					
ANR	6122819	Identifier	FUNC_FASTCALLW		6122488	1					
ANR	6122820	BreakStatement	break ;	902:4:21270:21275	6122488	49	True				
ANR	6122821	Label	case TOK_MODE :	904:3:21287:21300	6122488	50	True				
ANR	6122822	Identifier	TOK_MODE		6122488	0					
ANR	6122823	ExpressionStatement	skip ( '(' )	905:4:21306:21316	6122488	51	True				
ANR	6122824	CallExpression	skip ( '(' )		6122488	0					
ANR	6122825	Callee	skip		6122488	0					
ANR	6122826	Identifier	skip		6122488	0					
ANR	6122827	ArgumentList	'('		6122488	1					
ANR	6122828	Argument	'('		6122488	0					
ANR	6122829	PrimaryExpression	'('		6122488	0					
ANR	6122830	SwitchStatement	switch ( tok )		6122488	52					
ANR	6122831	Condition	tok	906:12:21330:21332	6122488	0	True				
ANR	6122832	Identifier	tok		6122488	0					
ANR	6122833	CompoundStatement		92:17:1936:1936	6122488	1					
ANR	6122834	Label	case TOK_MODE_DI :	907:4:21341:21357	6122488	0	True				
ANR	6122835	Identifier	TOK_MODE_DI		6122488	0					
ANR	6122836	ExpressionStatement	ad -> mode = VT_INT64 + 1	908:5:21364:21387	6122488	1	True				
ANR	6122837	AssignmentExpression	ad -> mode = VT_INT64 + 1		6122488	0		=			
ANR	6122838	PtrMemberAccess	ad -> mode		6122488	0					
ANR	6122839	Identifier	ad		6122488	0					
ANR	6122840	Identifier	mode		6122488	1					
ANR	6122841	AdditiveExpression	VT_INT64 + 1		6122488	1		+			
ANR	6122842	Identifier	VT_INT64		6122488	0					
ANR	6122843	PrimaryExpression	1		6122488	1					
ANR	6122844	BreakStatement	break ;	909:5:21394:21399	6122488	2	True				
ANR	6122845	Label	case TOK_MODE_HI :	910:4:21405:21421	6122488	3	True				
ANR	6122846	Identifier	TOK_MODE_HI		6122488	0					
ANR	6122847	ExpressionStatement	ad -> mode = VT_INT16 + 1	911:5:21428:21451	6122488	4	True				
ANR	6122848	AssignmentExpression	ad -> mode = VT_INT16 + 1		6122488	0		=			
ANR	6122849	PtrMemberAccess	ad -> mode		6122488	0					
ANR	6122850	Identifier	ad		6122488	0					
ANR	6122851	Identifier	mode		6122488	1					
ANR	6122852	AdditiveExpression	VT_INT16 + 1		6122488	1		+			
ANR	6122853	Identifier	VT_INT16		6122488	0					
ANR	6122854	PrimaryExpression	1		6122488	1					
ANR	6122855	BreakStatement	break ;	912:5:21458:21463	6122488	5	True				
ANR	6122856	Label	case TOK_MODE_SI :	913:4:21469:21485	6122488	6	True				
ANR	6122857	Identifier	TOK_MODE_SI		6122488	0					
ANR	6122858	ExpressionStatement	ad -> mode = VT_INT32 + 1	914:5:21492:21515	6122488	7	True				
ANR	6122859	AssignmentExpression	ad -> mode = VT_INT32 + 1		6122488	0		=			
ANR	6122860	PtrMemberAccess	ad -> mode		6122488	0					
ANR	6122861	Identifier	ad		6122488	0					
ANR	6122862	Identifier	mode		6122488	1					
ANR	6122863	AdditiveExpression	VT_INT32 + 1		6122488	1		+			
ANR	6122864	Identifier	VT_INT32		6122488	0					
ANR	6122865	PrimaryExpression	1		6122488	1					
ANR	6122866	BreakStatement	break ;	915:5:21522:21527	6122488	8	True				
ANR	6122867	Label	default :	916:4:21533:21540	6122488	9	True				
ANR	6122868	Identifier	default		6122488	0					
ANR	6122869	ExpressionStatement	"tcc_warning ( ""__mode__(%s) not supported\\n"" , get_tok_str ( tok , NULL ) )"	917:5:21547:21616	6122488	10	True				
ANR	6122870	CallExpression	"tcc_warning ( ""__mode__(%s) not supported\\n"" , get_tok_str ( tok , NULL ) )"		6122488	0					
ANR	6122871	Callee	tcc_warning		6122488	0					
ANR	6122872	Identifier	tcc_warning		6122488	0					
ANR	6122873	ArgumentList	"""__mode__(%s) not supported\\n"""		6122488	1					
ANR	6122874	Argument	"""__mode__(%s) not supported\\n"""		6122488	0					
ANR	6122875	PrimaryExpression	"""__mode__(%s) not supported\\n"""		6122488	0					
ANR	6122876	Argument	"get_tok_str ( tok , NULL )"		6122488	1					
ANR	6122877	CallExpression	"get_tok_str ( tok , NULL )"		6122488	0					
ANR	6122878	Callee	get_tok_str		6122488	0					
ANR	6122879	Identifier	get_tok_str		6122488	0					
ANR	6122880	ArgumentList	tok		6122488	1					
ANR	6122881	Argument	tok		6122488	0					
ANR	6122882	Identifier	tok		6122488	0					
ANR	6122883	Argument	NULL		6122488	1					
ANR	6122884	Identifier	NULL		6122488	0					
ANR	6122885	BreakStatement	break ;	918:5:21623:21628	6122488	11	True				
ANR	6122886	ExpressionStatement	next ( )	920:4:21640:21647	6122488	53	True				
ANR	6122887	CallExpression	next ( )		6122488	0					
ANR	6122888	Callee	next		6122488	0					
ANR	6122889	Identifier	next		6122488	0					
ANR	6122890	ArgumentList			6122488	1					
ANR	6122891	ExpressionStatement	skip ( ')' )	921:4:21653:21663	6122488	54	True				
ANR	6122892	CallExpression	skip ( ')' )		6122488	0					
ANR	6122893	Callee	skip		6122488	0					
ANR	6122894	Identifier	skip		6122488	0					
ANR	6122895	ArgumentList	')'		6122488	1					
ANR	6122896	Argument	')'		6122488	0					
ANR	6122897	PrimaryExpression	')'		6122488	0					
ANR	6122898	BreakStatement	break ;	922:4:21669:21674	6122488	55	True				
ANR	6122899	Label	case TOK_DLLEXPORT :	923:3:21679:21697	6122488	56	True				
ANR	6122900	Identifier	TOK_DLLEXPORT		6122488	0					
ANR	6122901	ExpressionStatement	ad -> func_export = 1	924:4:21703:21722	6122488	57	True				
ANR	6122902	AssignmentExpression	ad -> func_export = 1		6122488	0		=			
ANR	6122903	PtrMemberAccess	ad -> func_export		6122488	0					
ANR	6122904	Identifier	ad		6122488	0					
ANR	6122905	Identifier	func_export		6122488	1					
ANR	6122906	PrimaryExpression	1		6122488	1					
ANR	6122907	BreakStatement	break ;	925:4:21728:21733	6122488	58	True				
ANR	6122908	Label	case TOK_DLLIMPORT :	926:3:21738:21756	6122488	59	True				
ANR	6122909	Identifier	TOK_DLLIMPORT		6122488	0					
ANR	6122910	ExpressionStatement	ad -> func_import = 1	927:4:21762:21781	6122488	60	True				
ANR	6122911	AssignmentExpression	ad -> func_import = 1		6122488	0		=			
ANR	6122912	PtrMemberAccess	ad -> func_import		6122488	0					
ANR	6122913	Identifier	ad		6122488	0					
ANR	6122914	Identifier	func_import		6122488	1					
ANR	6122915	PrimaryExpression	1		6122488	1					
ANR	6122916	BreakStatement	break ;	928:4:21787:21792	6122488	61	True				
ANR	6122917	Label	default :	929:3:21797:21804	6122488	62	True				
ANR	6122918	Identifier	default		6122488	0					
ANR	6122919	IfStatement	if ( tcc_state -> warn_unsupported )		6122488	63					
ANR	6122920	Condition	tcc_state -> warn_unsupported	930:8:21814:21840	6122488	0	True				
ANR	6122921	PtrMemberAccess	tcc_state -> warn_unsupported		6122488	0					
ANR	6122922	Identifier	tcc_state		6122488	0					
ANR	6122923	Identifier	warn_unsupported		6122488	1					
ANR	6122924	CompoundStatement		116:37:2444:2444	6122488	1					
ANR	6122925	ExpressionStatement	"tcc_warning ( ""'%s' attribute ignored"" , get_tok_str ( t , NULL ) )"	931:5:21850:21911	6122488	0	True				
ANR	6122926	CallExpression	"tcc_warning ( ""'%s' attribute ignored"" , get_tok_str ( t , NULL ) )"		6122488	0					
ANR	6122927	Callee	tcc_warning		6122488	0					
ANR	6122928	Identifier	tcc_warning		6122488	0					
ANR	6122929	ArgumentList	"""'%s' attribute ignored"""		6122488	1					
ANR	6122930	Argument	"""'%s' attribute ignored"""		6122488	0					
ANR	6122931	PrimaryExpression	"""'%s' attribute ignored"""		6122488	0					
ANR	6122932	Argument	"get_tok_str ( t , NULL )"		6122488	1					
ANR	6122933	CallExpression	"get_tok_str ( t , NULL )"		6122488	0					
ANR	6122934	Callee	get_tok_str		6122488	0					
ANR	6122935	Identifier	get_tok_str		6122488	0					
ANR	6122936	ArgumentList	t		6122488	1					
ANR	6122937	Argument	t		6122488	0					
ANR	6122938	Identifier	t		6122488	0					
ANR	6122939	Argument	NULL		6122488	1					
ANR	6122940	Identifier	NULL		6122488	0					
ANR	6122941	IfStatement	if ( tok == '(' )		6122488	64					
ANR	6122942	Condition	tok == '('	934:8:21953:21962	6122488	0	True				
ANR	6122943	EqualityExpression	tok == '('		6122488	0		==			
ANR	6122944	Identifier	tok		6122488	0					
ANR	6122945	PrimaryExpression	'('		6122488	1					
ANR	6122946	CompoundStatement		121:5:2573:2592	6122488	1					
ANR	6122947	IdentifierDeclStatement	int parenthesis = 0 ;	935:5:21972:21991	6122488	0	True				
ANR	6122948	IdentifierDecl	parenthesis = 0		6122488	0					
ANR	6122949	IdentifierDeclType	int		6122488	0					
ANR	6122950	Identifier	parenthesis		6122488	1					
ANR	6122951	AssignmentExpression	parenthesis = 0		6122488	2		=			
ANR	6122952	Identifier	parenthesis		6122488	0					
ANR	6122953	PrimaryExpression	0		6122488	1					
ANR	6122954	DoStatement	do		6122488	1					
ANR	6122955	CompoundStatement		122:8:2602:2602	6122488	0					
ANR	6122956	IfStatement	if ( tok == '(' )		6122488	0					
ANR	6122957	Condition	tok == '('	937:10:22013:22022	6122488	0	True				
ANR	6122958	EqualityExpression	tok == '('		6122488	0		==			
ANR	6122959	Identifier	tok		6122488	0					
ANR	6122960	PrimaryExpression	'('		6122488	1					
ANR	6122961	CompoundStatement		123:22:2626:2626	6122488	1					
ANR	6122962	ExpressionStatement	parenthesis ++	938:7:22034:22047	6122488	0	True				
ANR	6122963	PostIncDecOperationExpression	parenthesis ++		6122488	0					
ANR	6122964	Identifier	parenthesis		6122488	0					
ANR	6122965	IncDec	++		6122488	1					
ANR	6122966	ElseStatement	else		6122488	0					
ANR	6122967	IfStatement	if ( tok == ')' )		6122488	0					
ANR	6122968	Condition	tok == ')'	939:17:22066:22075	6122488	0	True				
ANR	6122969	EqualityExpression	tok == ')'		6122488	0		==			
ANR	6122970	Identifier	tok		6122488	0					
ANR	6122971	PrimaryExpression	')'		6122488	1					
ANR	6122972	CompoundStatement		125:29:2679:2679	6122488	1					
ANR	6122973	ExpressionStatement	parenthesis --	940:7:22087:22100	6122488	0	True				
ANR	6122974	PostIncDecOperationExpression	parenthesis --		6122488	0					
ANR	6122975	Identifier	parenthesis		6122488	0					
ANR	6122976	IncDec	--		6122488	1					
ANR	6122977	ExpressionStatement	next ( )	942:6:22116:22123	6122488	1	True				
ANR	6122978	CallExpression	next ( )		6122488	0					
ANR	6122979	Callee	next		6122488	0					
ANR	6122980	Identifier	next		6122488	0					
ANR	6122981	ArgumentList			6122488	1					
ANR	6122982	Condition	parenthesis && tok != - 1	943:14:22139:22162	6122488	1	True				
ANR	6122983	AndExpression	parenthesis && tok != - 1		6122488	0		&&			
ANR	6122984	Identifier	parenthesis		6122488	0					
ANR	6122985	EqualityExpression	tok != - 1		6122488	1		!=			
ANR	6122986	Identifier	tok		6122488	0					
ANR	6122987	UnaryOperationExpression	- 1		6122488	1					
ANR	6122988	UnaryOperator	-		6122488	0					
ANR	6122989	PrimaryExpression	1		6122488	1					
ANR	6122990	BreakStatement	break ;	945:4:22176:22181	6122488	65	True				
ANR	6122991	IfStatement	"if ( tok != ',' )"		6122488	4					
ANR	6122992	Condition	"tok != ','"	947:7:22195:22204	6122488	0	True				
ANR	6122993	EqualityExpression	"tok != ','"		6122488	0		!=			
ANR	6122994	Identifier	tok		6122488	0					
ANR	6122995	PrimaryExpression	"','"		6122488	1					
ANR	6122996	CompoundStatement		133:19:2808:2808	6122488	1					
ANR	6122997	BreakStatement	break ;	948:4:22213:22218	6122488	0	True				
ANR	6122998	ExpressionStatement	next ( )	950:3:22228:22235	6122488	5	True				
ANR	6122999	CallExpression	next ( )		6122488	0					
ANR	6123000	Callee	next		6122488	0					
ANR	6123001	Identifier	next		6122488	0					
ANR	6123002	ArgumentList			6122488	1					
ANR	6123003	ExpressionStatement	skip ( ')' )	952:2:22243:22253	6122488	4	True				
ANR	6123004	CallExpression	skip ( ')' )		6122488	0					
ANR	6123005	Callee	skip		6122488	0					
ANR	6123006	Identifier	skip		6122488	0					
ANR	6123007	ArgumentList	')'		6122488	1					
ANR	6123008	Argument	')'		6122488	0					
ANR	6123009	PrimaryExpression	')'		6122488	0					
ANR	6123010	ExpressionStatement	skip ( ')' )	953:2:22257:22267	6122488	5	True				
ANR	6123011	CallExpression	skip ( ')' )		6122488	0					
ANR	6123012	Callee	skip		6122488	0					
ANR	6123013	Identifier	skip		6122488	0					
ANR	6123014	ArgumentList	')'		6122488	1					
ANR	6123015	Argument	')'		6122488	0					
ANR	6123016	PrimaryExpression	')'		6122488	0					
ANR	6123017	ReturnType	static void		6122488	1					
ANR	6123018	Identifier	parse_attribute		6122488	2					
ANR	6123019	ParameterList	AttributeDef * ad		6122488	3					
ANR	6123020	Parameter	AttributeDef * ad	815:28:19380:19395	6122488	0	True				
ANR	6123021	ParameterType	AttributeDef *		6122488	0					
ANR	6123022	Identifier	ad		6122488	1					
ANR	6123023	CFGEntryNode	ENTRY		6122488		True				
ANR	6123024	CFGExitNode	EXIT		6122488		True				
ANR	6123025	Symbol	ad -> func_call		6122488						
ANR	6123026	Symbol	ad -> func_import		6122488						
ANR	6123027	Symbol	expr_const		6122488						
ANR	6123028	Symbol	tok_alloc		6122488						
ANR	6123029	Symbol	* tokc . cstr		6122488						
ANR	6123030	Symbol	get_tok_str		6122488						
ANR	6123031	Symbol	ad -> packed		6122488						
ANR	6123032	Symbol	VT_INT16		6122488						
ANR	6123033	Symbol	ad -> alias_target		6122488						
ANR	6123034	Symbol	* ad		6122488						
ANR	6123035	Symbol	* tcc_state		6122488						
ANR	6123036	Symbol	ad -> func_export		6122488						
ANR	6123037	Symbol	MAX_ALIGN		6122488						
ANR	6123038	Symbol	tok		6122488						
ANR	6123039	Symbol	TOK_ATTRIBUTE1		6122488						
ANR	6123040	Symbol	tokc . cstr		6122488						
ANR	6123041	Symbol	TOK_ATTRIBUTE2		6122488						
ANR	6123042	Symbol	ad -> aligned		6122488						
ANR	6123043	Symbol	FUNC_STDCALL		6122488						
ANR	6123044	Symbol	ad -> mode		6122488						
ANR	6123045	Symbol	VT_INT32		6122488						
ANR	6123046	Symbol	tcc_state		6122488						
ANR	6123047	Symbol	ad		6122488						
ANR	6123048	Symbol	NULL		6122488						
ANR	6123049	Symbol	TOK_IDENT		6122488						
ANR	6123050	Symbol	tokc . cstr -> size		6122488						
ANR	6123051	Symbol	TOK_STR		6122488						
ANR	6123052	Symbol	tokc		6122488						
ANR	6123053	Symbol	FUNC_CDECL		6122488						
ANR	6123054	Symbol	* tok_alloc		6122488						
ANR	6123055	Symbol	FUNC_FASTCALL1		6122488						
ANR	6123056	Symbol	* tokc		6122488						
ANR	6123057	Symbol	parenthesis		6122488						
ANR	6123058	Symbol	n		6122488						
ANR	6123059	Symbol	tcc_state -> warn_unsupported		6122488						
ANR	6123060	Symbol	"tok_alloc ( ( char * ) tokc . cstr -> data , tokc . cstr -> size - 1 ) -> tok"		6122488						
ANR	6123061	Symbol	FUNC_FASTCALLW		6122488						
ANR	6123062	Symbol	t		6122488						
ANR	6123063	Symbol	tokc . cstr -> data		6122488						
ANR	6123064	Symbol	VT_INT64		6122488						
ANR	6123065	Symbol	ad -> weak		6122488						
ANR	6123066	Function	struct_decl	958:0:22355:29919							
ANR	6123067	FunctionDef	"struct_decl (CType * type , int u)"		6123066	0					
ANR	6123068	CompoundStatement		958:44:22399:29919	6123066	0					
ANR	6123069	IdentifierDeclStatement	"int a , v , size , align , maxalign , offset ;"	959:1:22402:22441	6123066	0	True				
ANR	6123070	IdentifierDecl	a		6123066	0					
ANR	6123071	IdentifierDeclType	int		6123066	0					
ANR	6123072	Identifier	a		6123066	1					
ANR	6123073	IdentifierDecl	v		6123066	1					
ANR	6123074	IdentifierDeclType	int		6123066	0					
ANR	6123075	Identifier	v		6123066	1					
ANR	6123076	IdentifierDecl	size		6123066	2					
ANR	6123077	IdentifierDeclType	int		6123066	0					
ANR	6123078	Identifier	size		6123066	1					
ANR	6123079	IdentifierDecl	align		6123066	3					
ANR	6123080	IdentifierDeclType	int		6123066	0					
ANR	6123081	Identifier	align		6123066	1					
ANR	6123082	IdentifierDecl	maxalign		6123066	4					
ANR	6123083	IdentifierDeclType	int		6123066	0					
ANR	6123084	Identifier	maxalign		6123066	1					
ANR	6123085	IdentifierDecl	offset		6123066	5					
ANR	6123086	IdentifierDeclType	int		6123066	0					
ANR	6123087	Identifier	offset		6123066	1					
ANR	6123088	IdentifierDeclStatement	long long c = 0 ;	960:1:22444:22459	6123066	1	True				
ANR	6123089	IdentifierDecl	c = 0		6123066	0					
ANR	6123090	IdentifierDeclType	long long		6123066	0					
ANR	6123091	Identifier	c		6123066	1					
ANR	6123092	AssignmentExpression	c = 0		6123066	2		=			
ANR	6123093	Identifier	c		6123066	0					
ANR	6123094	PrimaryExpression	0		6123066	1					
ANR	6123095	IdentifierDeclStatement	"int bit_size , bit_pos , bsize , bt , lbit_pos , prevbt ;"	961:1:22462:22512	6123066	2	True				
ANR	6123096	IdentifierDecl	bit_size		6123066	0					
ANR	6123097	IdentifierDeclType	int		6123066	0					
ANR	6123098	Identifier	bit_size		6123066	1					
ANR	6123099	IdentifierDecl	bit_pos		6123066	1					
ANR	6123100	IdentifierDeclType	int		6123066	0					
ANR	6123101	Identifier	bit_pos		6123066	1					
ANR	6123102	IdentifierDecl	bsize		6123066	2					
ANR	6123103	IdentifierDeclType	int		6123066	0					
ANR	6123104	Identifier	bsize		6123066	1					
ANR	6123105	IdentifierDecl	bt		6123066	3					
ANR	6123106	IdentifierDeclType	int		6123066	0					
ANR	6123107	Identifier	bt		6123066	1					
ANR	6123108	IdentifierDecl	lbit_pos		6123066	4					
ANR	6123109	IdentifierDeclType	int		6123066	0					
ANR	6123110	Identifier	lbit_pos		6123066	1					
ANR	6123111	IdentifierDecl	prevbt		6123066	5					
ANR	6123112	IdentifierDeclType	int		6123066	0					
ANR	6123113	Identifier	prevbt		6123066	1					
ANR	6123114	IdentifierDeclStatement	char buf [ STRING_MAX_SIZE + 1 ] ;	962:1:22515:22544	6123066	3	True				
ANR	6123115	IdentifierDecl	buf [ STRING_MAX_SIZE + 1 ]		6123066	0					
ANR	6123116	IdentifierDeclType	char [ STRING_MAX_SIZE + 1 ]		6123066	0					
ANR	6123117	Identifier	buf		6123066	1					
ANR	6123118	AdditiveExpression	STRING_MAX_SIZE + 1		6123066	2		+			
ANR	6123119	Identifier	STRING_MAX_SIZE		6123066	0					
ANR	6123120	PrimaryExpression	1		6123066	1					
ANR	6123121	IdentifierDeclStatement	"Sym * s , * ss , * ass , * * ps ;"	963:1:22547:22570	6123066	4	True				
ANR	6123122	IdentifierDecl	* s		6123066	0					
ANR	6123123	IdentifierDeclType	Sym *		6123066	0					
ANR	6123124	Identifier	s		6123066	1					
ANR	6123125	IdentifierDecl	* ss		6123066	1					
ANR	6123126	IdentifierDeclType	Sym *		6123066	0					
ANR	6123127	Identifier	ss		6123066	1					
ANR	6123128	IdentifierDecl	* ass		6123066	2					
ANR	6123129	IdentifierDeclType	Sym *		6123066	0					
ANR	6123130	Identifier	ass		6123066	1					
ANR	6123131	IdentifierDecl	* * ps		6123066	3					
ANR	6123132	IdentifierDeclType	Sym * *		6123066	0					
ANR	6123133	Identifier	ps		6123066	1					
ANR	6123134	IdentifierDeclStatement	AttributeDef ad ;	964:1:22573:22588	6123066	5	True				
ANR	6123135	IdentifierDecl	ad		6123066	0					
ANR	6123136	IdentifierDeclType	AttributeDef		6123066	0					
ANR	6123137	Identifier	ad		6123066	1					
ANR	6123138	IdentifierDeclStatement	const char * name = NULL ;	965:1:22591:22614	6123066	6	True				
ANR	6123139	IdentifierDecl	* name = NULL		6123066	0					
ANR	6123140	IdentifierDeclType	const char *		6123066	0					
ANR	6123141	Identifier	name		6123066	1					
ANR	6123142	AssignmentExpression	* name = NULL		6123066	2		=			
ANR	6123143	Identifier	NULL		6123066	0					
ANR	6123144	Identifier	NULL		6123066	1					
ANR	6123145	ExpressionStatement	"STACK_NEW0 ( CType , type1 )"	966:1:22617:22642	6123066	7	True				
ANR	6123146	CallExpression	"STACK_NEW0 ( CType , type1 )"		6123066	0					
ANR	6123147	Callee	STACK_NEW0		6123066	0					
ANR	6123148	Identifier	STACK_NEW0		6123066	0					
ANR	6123149	ArgumentList	CType		6123066	1					
ANR	6123150	Argument	CType		6123066	0					
ANR	6123151	Identifier	CType		6123066	0					
ANR	6123152	Argument	type1		6123066	1					
ANR	6123153	Identifier	type1		6123066	0					
ANR	6123154	ExpressionStatement	"STACK_NEW0 ( CType , btype )"	967:1:22645:22670	6123066	8	True				
ANR	6123155	CallExpression	"STACK_NEW0 ( CType , btype )"		6123066	0					
ANR	6123156	Callee	STACK_NEW0		6123066	0					
ANR	6123157	Identifier	STACK_NEW0		6123066	0					
ANR	6123158	ArgumentList	CType		6123066	1					
ANR	6123159	Argument	CType		6123066	0					
ANR	6123160	Identifier	CType		6123066	0					
ANR	6123161	Argument	btype		6123066	1					
ANR	6123162	Identifier	btype		6123066	0					
ANR	6123163	ExpressionStatement	a = tok	969:1:22674:22681	6123066	9	True				
ANR	6123164	AssignmentExpression	a = tok		6123066	0		=			
ANR	6123165	Identifier	a		6123066	0					
ANR	6123166	Identifier	tok		6123066	1					
ANR	6123167	ExpressionStatement	next ( )	970:1:22704:22711	6123066	10	True				
ANR	6123168	CallExpression	next ( )		6123066	0					
ANR	6123169	Callee	next		6123066	0					
ANR	6123170	Identifier	next		6123066	0					
ANR	6123171	ArgumentList			6123066	1					
ANR	6123172	ExpressionStatement	"name = get_tok_str ( tok , NULL )"	971:1:22714:22744	6123066	11	True				
ANR	6123173	AssignmentExpression	"name = get_tok_str ( tok , NULL )"		6123066	0		=			
ANR	6123174	Identifier	name		6123066	0					
ANR	6123175	CallExpression	"get_tok_str ( tok , NULL )"		6123066	1					
ANR	6123176	Callee	get_tok_str		6123066	0					
ANR	6123177	Identifier	get_tok_str		6123066	0					
ANR	6123178	ArgumentList	tok		6123066	1					
ANR	6123179	Argument	tok		6123066	0					
ANR	6123180	Identifier	tok		6123066	0					
ANR	6123181	Argument	NULL		6123066	1					
ANR	6123182	Identifier	NULL		6123066	0					
ANR	6123183	IfStatement	if ( tok != '{' )		6123066	12					
ANR	6123184	Condition	tok != '{'	972:5:22751:22760	6123066	0	True				
ANR	6123185	EqualityExpression	tok != '{'		6123066	0		!=			
ANR	6123186	Identifier	tok		6123066	0					
ANR	6123187	PrimaryExpression	'{'		6123066	1					
ANR	6123188	CompoundStatement		15:17:363:363	6123066	1					
ANR	6123189	ExpressionStatement	v = tok	973:2:22767:22774	6123066	0	True				
ANR	6123190	AssignmentExpression	v = tok		6123066	0		=			
ANR	6123191	Identifier	v		6123066	0					
ANR	6123192	Identifier	tok		6123066	1					
ANR	6123193	ExpressionStatement	next ( )	974:2:22778:22785	6123066	1	True				
ANR	6123194	CallExpression	next ( )		6123066	0					
ANR	6123195	Callee	next		6123066	0					
ANR	6123196	Identifier	next		6123066	0					
ANR	6123197	ArgumentList			6123066	1					
ANR	6123198	IfStatement	if ( v < TOK_IDENT )		6123066	2					
ANR	6123199	Condition	v < TOK_IDENT	976:6:22836:22848	6123066	0	True				
ANR	6123200	RelationalExpression	v < TOK_IDENT		6123066	0		<			
ANR	6123201	Identifier	v		6123066	0					
ANR	6123202	Identifier	TOK_IDENT		6123066	1					
ANR	6123203	CompoundStatement		19:21:451:451	6123066	1					
ANR	6123204	ExpressionStatement	"expect ( ""struct/union/enum name"" )"	977:3:22856:22889	6123066	0	True				
ANR	6123205	CallExpression	"expect ( ""struct/union/enum name"" )"		6123066	0					
ANR	6123206	Callee	expect		6123066	0					
ANR	6123207	Identifier	expect		6123066	0					
ANR	6123208	ArgumentList	"""struct/union/enum name"""		6123066	1					
ANR	6123209	Argument	"""struct/union/enum name"""		6123066	0					
ANR	6123210	PrimaryExpression	"""struct/union/enum name"""		6123066	0					
ANR	6123211	ExpressionStatement	s = struct_find ( v )	979:2:22897:22916	6123066	3	True				
ANR	6123212	AssignmentExpression	s = struct_find ( v )		6123066	0		=			
ANR	6123213	Identifier	s		6123066	0					
ANR	6123214	CallExpression	struct_find ( v )		6123066	1					
ANR	6123215	Callee	struct_find		6123066	0					
ANR	6123216	Identifier	struct_find		6123066	0					
ANR	6123217	ArgumentList	v		6123066	1					
ANR	6123218	Argument	v		6123066	0					
ANR	6123219	Identifier	v		6123066	0					
ANR	6123220	IfStatement	if ( s )		6123066	4					
ANR	6123221	Condition	s	980:6:22924:22924	6123066	0	True				
ANR	6123222	Identifier	s		6123066	0					
ANR	6123223	CompoundStatement		23:9:527:527	6123066	1					
ANR	6123224	IfStatement	if ( s -> type . t != a )		6123066	0					
ANR	6123225	Condition	s -> type . t != a	981:7:22936:22949	6123066	0	True				
ANR	6123226	EqualityExpression	s -> type . t != a		6123066	0		!=			
ANR	6123227	MemberAccess	s -> type . t		6123066	0					
ANR	6123228	PtrMemberAccess	s -> type		6123066	0					
ANR	6123229	Identifier	s		6123066	0					
ANR	6123230	Identifier	type		6123066	1					
ANR	6123231	Identifier	t		6123066	1					
ANR	6123232	Identifier	a		6123066	1					
ANR	6123233	CompoundStatement		24:23:552:552	6123066	1					
ANR	6123234	ExpressionStatement	"TCC_ERR ( ""invalid type"" )"	982:4:22958:22982	6123066	0	True				
ANR	6123235	CallExpression	"TCC_ERR ( ""invalid type"" )"		6123066	0					
ANR	6123236	Callee	TCC_ERR		6123066	0					
ANR	6123237	Identifier	TCC_ERR		6123066	0					
ANR	6123238	ArgumentList	"""invalid type"""		6123066	1					
ANR	6123239	Argument	"""invalid type"""		6123066	0					
ANR	6123240	PrimaryExpression	"""invalid type"""		6123066	0					
ANR	6123241	GotoStatement	goto do_decl ;	984:3:22992:23004	6123066	1	True				
ANR	6123242	Identifier	do_decl		6123066	0					
ANR	6123243	ElseStatement	else		6123066	0					
ANR	6123244	CompoundStatement		29:8:618:618	6123066	0					
ANR	6123245	ExpressionStatement	v = anon_sym ++	987:2:23022:23036	6123066	0	True				
ANR	6123246	AssignmentExpression	v = anon_sym ++		6123066	0		=			
ANR	6123247	Identifier	v		6123066	0					
ANR	6123248	PostIncDecOperationExpression	anon_sym ++		6123066	1					
ANR	6123249	Identifier	anon_sym		6123066	0					
ANR	6123250	IncDec	++		6123066	1					
ANR	6123251	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""%u"" , v - SYM_FIRST_ANOM )"	988:2:23040:23093	6123066	1	True				
ANR	6123252	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""%u"" , v - SYM_FIRST_ANOM )"		6123066	0					
ANR	6123253	Callee	snprintf		6123066	0					
ANR	6123254	Identifier	snprintf		6123066	0					
ANR	6123255	ArgumentList	buf		6123066	1					
ANR	6123256	Argument	buf		6123066	0					
ANR	6123257	Identifier	buf		6123066	0					
ANR	6123258	Argument	sizeof ( buf )		6123066	1					
ANR	6123259	SizeofExpression	sizeof ( buf )		6123066	0					
ANR	6123260	Sizeof	sizeof		6123066	0					
ANR	6123261	SizeofOperand	buf		6123066	1					
ANR	6123262	Argument	"""%u"""		6123066	2					
ANR	6123263	PrimaryExpression	"""%u"""		6123066	0					
ANR	6123264	Argument	v - SYM_FIRST_ANOM		6123066	3					
ANR	6123265	AdditiveExpression	v - SYM_FIRST_ANOM		6123066	0		-			
ANR	6123266	Identifier	v		6123066	0					
ANR	6123267	Identifier	SYM_FIRST_ANOM		6123066	1					
ANR	6123268	ExpressionStatement	name = buf	989:2:23097:23107	6123066	2	True				
ANR	6123269	AssignmentExpression	name = buf		6123066	0		=			
ANR	6123270	Identifier	name		6123066	0					
ANR	6123271	Identifier	buf		6123066	1					
ANR	6123272	ExpressionStatement	type1 . t = a	991:1:23113:23124	6123066	13	True				
ANR	6123273	AssignmentExpression	type1 . t = a		6123066	0		=			
ANR	6123274	MemberAccess	type1 . t		6123066	0					
ANR	6123275	Identifier	type1		6123066	0					
ANR	6123276	Identifier	t		6123066	1					
ANR	6123277	Identifier	a		6123066	1					
ANR	6123278	ExpressionStatement	"s = sym_push ( v | SYM_STRUCT , & type1 , 0 , - 1 )"	993:1:23181:23225	6123066	14	True				
ANR	6123279	AssignmentExpression	"s = sym_push ( v | SYM_STRUCT , & type1 , 0 , - 1 )"		6123066	0		=			
ANR	6123280	Identifier	s		6123066	0					
ANR	6123281	CallExpression	"sym_push ( v | SYM_STRUCT , & type1 , 0 , - 1 )"		6123066	1					
ANR	6123282	Callee	sym_push		6123066	0					
ANR	6123283	Identifier	sym_push		6123066	0					
ANR	6123284	ArgumentList	v | SYM_STRUCT		6123066	1					
ANR	6123285	Argument	v | SYM_STRUCT		6123066	0					
ANR	6123286	InclusiveOrExpression	v | SYM_STRUCT		6123066	0		|			
ANR	6123287	Identifier	v		6123066	0					
ANR	6123288	Identifier	SYM_STRUCT		6123066	1					
ANR	6123289	Argument	& type1		6123066	1					
ANR	6123290	UnaryOperationExpression	& type1		6123066	0					
ANR	6123291	UnaryOperator	&		6123066	0					
ANR	6123292	Identifier	type1		6123066	1					
ANR	6123293	Argument	0		6123066	2					
ANR	6123294	PrimaryExpression	0		6123066	0					
ANR	6123295	Argument	- 1		6123066	3					
ANR	6123296	UnaryOperationExpression	- 1		6123066	0					
ANR	6123297	UnaryOperator	-		6123066	0					
ANR	6123298	PrimaryExpression	1		6123066	1					
ANR	6123299	IfStatement	if ( ! s )		6123066	15					
ANR	6123300	Condition	! s	994:5:23232:23233	6123066	0	True				
ANR	6123301	UnaryOperationExpression	! s		6123066	0					
ANR	6123302	UnaryOperator	!		6123066	0					
ANR	6123303	Identifier	s		6123066	1					
ANR	6123304	CompoundStatement		37:9:836:836	6123066	1					
ANR	6123305	ReturnStatement	return ;	995:2:23240:23246	6123066	0	True				
ANR	6123306	ExpressionStatement	s -> r = 0	997:1:23252:23260	6123066	16	True				
ANR	6123307	AssignmentExpression	s -> r = 0		6123066	0		=			
ANR	6123308	PtrMemberAccess	s -> r		6123066	0					
ANR	6123309	Identifier	s		6123066	0					
ANR	6123310	Identifier	r		6123066	1					
ANR	6123311	PrimaryExpression	0		6123066	1					
ANR	6123312	Label	do_decl :	1000:0:23411:23418	6123066	17	True				
ANR	6123313	Identifier	do_decl		6123066	0					
ANR	6123314	ExpressionStatement	type -> t = u	1001:1:23421:23432	6123066	18	True				
ANR	6123315	AssignmentExpression	type -> t = u		6123066	0		=			
ANR	6123316	PtrMemberAccess	type -> t		6123066	0					
ANR	6123317	Identifier	type		6123066	0					
ANR	6123318	Identifier	t		6123066	1					
ANR	6123319	Identifier	u		6123066	1					
ANR	6123320	ExpressionStatement	type -> ref = s	1002:1:23435:23448	6123066	19	True				
ANR	6123321	AssignmentExpression	type -> ref = s		6123066	0		=			
ANR	6123322	PtrMemberAccess	type -> ref		6123066	0					
ANR	6123323	Identifier	type		6123066	0					
ANR	6123324	Identifier	ref		6123066	1					
ANR	6123325	Identifier	s		6123066	1					
ANR	6123326	IfStatement	if ( tok == '{' )		6123066	20					
ANR	6123327	Condition	tok == '{'	1004:5:23456:23465	6123066	0	True				
ANR	6123328	EqualityExpression	tok == '{'		6123066	0		==			
ANR	6123329	Identifier	tok		6123066	0					
ANR	6123330	PrimaryExpression	'{'		6123066	1					
ANR	6123331	CompoundStatement		47:17:1068:1068	6123066	1					
ANR	6123332	ExpressionStatement	next ( )	1005:2:23472:23479	6123066	0	True				
ANR	6123333	CallExpression	next ( )		6123066	0					
ANR	6123334	Callee	next		6123066	0					
ANR	6123335	Identifier	next		6123066	0					
ANR	6123336	ArgumentList			6123066	1					
ANR	6123337	IfStatement	if ( s -> c != - 1 )		6123066	1					
ANR	6123338	Condition	s -> c != - 1	1006:6:23487:23496	6123066	0	True				
ANR	6123339	EqualityExpression	s -> c != - 1		6123066	0		!=			
ANR	6123340	PtrMemberAccess	s -> c		6123066	0					
ANR	6123341	Identifier	s		6123066	0					
ANR	6123342	Identifier	c		6123066	1					
ANR	6123343	UnaryOperationExpression	- 1		6123066	1					
ANR	6123344	UnaryOperator	-		6123066	0					
ANR	6123345	PrimaryExpression	1		6123066	1					
ANR	6123346	CompoundStatement		49:18:1099:1099	6123066	1					
ANR	6123347	ExpressionStatement	"TCC_ERR ( ""struct/union/enum already defined"" )"	1007:3:23504:23549	6123066	0	True				
ANR	6123348	CallExpression	"TCC_ERR ( ""struct/union/enum already defined"" )"		6123066	0					
ANR	6123349	Callee	TCC_ERR		6123066	0					
ANR	6123350	Identifier	TCC_ERR		6123066	0					
ANR	6123351	ArgumentList	"""struct/union/enum already defined"""		6123066	1					
ANR	6123352	Argument	"""struct/union/enum already defined"""		6123066	0					
ANR	6123353	PrimaryExpression	"""struct/union/enum already defined"""		6123066	0					
ANR	6123354	Statement	c	1010:2:23581:23581	6123066	2	True				
ANR	6123355	Statement	=	1010:4:23583:23583	6123066	3	True				
ANR	6123356	Statement	0L	1010:6:23585:23586	6123066	4	True				
ANR	6123357	ExpressionStatement	L	1010:8:23587:23588	6123066	5	True				
ANR	6123358	Identifier	L		6123066	0					
ANR	6123359	IfStatement	if ( a == TOK_ENUM )		6123066	6					
ANR	6123360	Condition	a == TOK_ENUM	1012:6:23636:23648	6123066	0	True				
ANR	6123361	EqualityExpression	a == TOK_ENUM		6123066	0		==			
ANR	6123362	Identifier	a		6123066	0					
ANR	6123363	Identifier	TOK_ENUM		6123066	1					
ANR	6123364	CompoundStatement		55:21:1251:1251	6123066	1					
ANR	6123365	IfStatement	"if ( ! strcmp ( name , ""{"" ) )"		6123066	0					
ANR	6123366	Condition	"! strcmp ( name , ""{"" )"	1013:7:23660:23678	6123066	0	True				
ANR	6123367	UnaryOperationExpression	"! strcmp ( name , ""{"" )"		6123066	0					
ANR	6123368	UnaryOperator	!		6123066	0					
ANR	6123369	CallExpression	"strcmp ( name , ""{"" )"		6123066	1					
ANR	6123370	Callee	strcmp		6123066	0					
ANR	6123371	Identifier	strcmp		6123066	0					
ANR	6123372	ArgumentList	name		6123066	1					
ANR	6123373	Argument	name		6123066	0					
ANR	6123374	Identifier	name		6123066	0					
ANR	6123375	Argument	"""{"""		6123066	1					
ANR	6123376	PrimaryExpression	"""{"""		6123066	0					
ANR	6123377	CompoundStatement		56:28:1281:1281	6123066	1					
ANR	6123378	ExpressionStatement	"fprintf ( stderr , ""anonymous enums are ignored\\n"" )"	1015:4:23702:23751	6123066	0	True				
ANR	6123379	CallExpression	"fprintf ( stderr , ""anonymous enums are ignored\\n"" )"		6123066	0					
ANR	6123380	Callee	fprintf		6123066	0					
ANR	6123381	Identifier	fprintf		6123066	0					
ANR	6123382	ArgumentList	stderr		6123066	1					
ANR	6123383	Argument	stderr		6123066	0					
ANR	6123384	Identifier	stderr		6123066	0					
ANR	6123385	Argument	"""anonymous enums are ignored\\n"""		6123066	1					
ANR	6123386	PrimaryExpression	"""anonymous enums are ignored\\n"""		6123066	0					
ANR	6123387	WhileStatement	while ( tcc_nerr ( ) == 0 )		6123066	1					
ANR	6123388	Condition	tcc_nerr ( ) == 0	1017:10:23768:23783	6123066	0	True				
ANR	6123389	EqualityExpression	tcc_nerr ( ) == 0		6123066	0		==			
ANR	6123390	CallExpression	tcc_nerr ( )		6123066	0					
ANR	6123391	Callee	tcc_nerr		6123066	0					
ANR	6123392	Identifier	tcc_nerr		6123066	0					
ANR	6123393	ArgumentList			6123066	1					
ANR	6123394	PrimaryExpression	0		6123066	1					
ANR	6123395	CompoundStatement		60:28:1386:1386	6123066	1					
ANR	6123396	ExpressionStatement	v = tok	1018:4:23792:23799	6123066	0	True				
ANR	6123397	AssignmentExpression	v = tok		6123066	0		=			
ANR	6123398	Identifier	v		6123066	0					
ANR	6123399	Identifier	tok		6123066	1					
ANR	6123400	IfStatement	if ( v < TOK_UIDENT )		6123066	1					
ANR	6123401	Condition	v < TOK_UIDENT	1019:8:23809:23822	6123066	0	True				
ANR	6123402	RelationalExpression	v < TOK_UIDENT		6123066	0		<			
ANR	6123403	Identifier	v		6123066	0					
ANR	6123404	Identifier	TOK_UIDENT		6123066	1					
ANR	6123405	CompoundStatement		62:24:1425:1425	6123066	1					
ANR	6123406	ExpressionStatement	"expect ( ""identifier"" )"	1020:5:23832:23853	6123066	0	True				
ANR	6123407	CallExpression	"expect ( ""identifier"" )"		6123066	0					
ANR	6123408	Callee	expect		6123066	0					
ANR	6123409	Identifier	expect		6123066	0					
ANR	6123410	ArgumentList	"""identifier"""		6123066	1					
ANR	6123411	Argument	"""identifier"""		6123066	0					
ANR	6123412	PrimaryExpression	"""identifier"""		6123066	0					
ANR	6123413	ExpressionStatement	next ( )	1022:4:23865:23872	6123066	2	True				
ANR	6123414	CallExpression	next ( )		6123066	0					
ANR	6123415	Callee	next		6123066	0					
ANR	6123416	Identifier	next		6123066	0					
ANR	6123417	ArgumentList			6123066	1					
ANR	6123418	IfStatement	if ( tok == '=' )		6123066	3					
ANR	6123419	Condition	tok == '='	1023:8:23882:23891	6123066	0	True				
ANR	6123420	EqualityExpression	tok == '='		6123066	0		==			
ANR	6123421	Identifier	tok		6123066	0					
ANR	6123422	PrimaryExpression	'='		6123066	1					
ANR	6123423	CompoundStatement		66:20:1494:1494	6123066	1					
ANR	6123424	ExpressionStatement	next ( )	1024:5:23901:23908	6123066	0	True				
ANR	6123425	CallExpression	next ( )		6123066	0					
ANR	6123426	Callee	next		6123066	0					
ANR	6123427	Identifier	next		6123066	0					
ANR	6123428	ArgumentList			6123066	1					
ANR	6123429	ExpressionStatement	c = expr_const ( )	1025:5:23915:23932	6123066	1	True				
ANR	6123430	AssignmentExpression	c = expr_const ( )		6123066	0		=			
ANR	6123431	Identifier	c		6123066	0					
ANR	6123432	CallExpression	expr_const ( )		6123066	1					
ANR	6123433	Callee	expr_const		6123066	0					
ANR	6123434	Identifier	expr_const		6123066	0					
ANR	6123435	ArgumentList			6123066	1					
ANR	6123436	IfStatement	"if ( strcmp ( name , ""{"" ) )"		6123066	4					
ANR	6123437	Condition	"strcmp ( name , ""{"" )"	1027:8:23948:23965	6123066	0	True				
ANR	6123438	CallExpression	"strcmp ( name , ""{"" )"		6123066	0					
ANR	6123439	Callee	strcmp		6123066	0					
ANR	6123440	Identifier	strcmp		6123066	0					
ANR	6123441	ArgumentList	name		6123066	1					
ANR	6123442	Argument	name		6123066	0					
ANR	6123443	Identifier	name		6123066	0					
ANR	6123444	Argument	"""{"""		6123066	1					
ANR	6123445	PrimaryExpression	"""{"""		6123066	0					
ANR	6123446	CompoundStatement		71:5:1575:1611	6123066	1					
ANR	6123447	IdentifierDeclStatement	"char * varstr = get_tok_str ( v , NULL ) ;"	1028:5:23975:24011	6123066	0	True				
ANR	6123448	IdentifierDecl	"* varstr = get_tok_str ( v , NULL )"		6123066	0					
ANR	6123449	IdentifierDeclType	char *		6123066	0					
ANR	6123450	Identifier	varstr		6123066	1					
ANR	6123451	AssignmentExpression	"* varstr = get_tok_str ( v , NULL )"		6123066	2		=			
ANR	6123452	Identifier	varstr		6123066	0					
ANR	6123453	CallExpression	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6123454	Callee	get_tok_str		6123066	0					
ANR	6123455	Identifier	get_tok_str		6123066	0					
ANR	6123456	ArgumentList	v		6123066	1					
ANR	6123457	Argument	v		6123066	0					
ANR	6123458	Identifier	v		6123066	0					
ANR	6123459	Argument	NULL		6123066	1					
ANR	6123460	Identifier	NULL		6123066	0					
ANR	6123461	ExpressionStatement	"tcc_appendf ( ""%s=enum\\n"" , name )"	1029:5:24018:24049	6123066	1	True				
ANR	6123462	CallExpression	"tcc_appendf ( ""%s=enum\\n"" , name )"		6123066	0					
ANR	6123463	Callee	tcc_appendf		6123066	0					
ANR	6123464	Identifier	tcc_appendf		6123066	0					
ANR	6123465	ArgumentList	"""%s=enum\\n"""		6123066	1					
ANR	6123466	Argument	"""%s=enum\\n"""		6123066	0					
ANR	6123467	PrimaryExpression	"""%s=enum\\n"""		6123066	0					
ANR	6123468	Argument	name		6123066	1					
ANR	6123469	Identifier	name		6123066	0					
ANR	6123470	ExpressionStatement	"tcc_appendf ( ""[+]enum.%s=%s\\n"" , name , varstr )"	1030:5:24056:24100	6123066	2	True				
ANR	6123471	CallExpression	"tcc_appendf ( ""[+]enum.%s=%s\\n"" , name , varstr )"		6123066	0					
ANR	6123472	Callee	tcc_appendf		6123066	0					
ANR	6123473	Identifier	tcc_appendf		6123066	0					
ANR	6123474	ArgumentList	"""[+]enum.%s=%s\\n"""		6123066	1					
ANR	6123475	Argument	"""[+]enum.%s=%s\\n"""		6123066	0					
ANR	6123476	PrimaryExpression	"""[+]enum.%s=%s\\n"""		6123066	0					
ANR	6123477	Argument	name		6123066	1					
ANR	6123478	Identifier	name		6123066	0					
ANR	6123479	Argument	varstr		6123066	2					
ANR	6123480	Identifier	varstr		6123066	0					
ANR	6123481	Statement	tcc_appendf	1031:5:24107:24117	6123066	3	True				
ANR	6123482	Statement	(	1031:17:24119:24119	6123066	4	True				
ANR	6123483	Statement	"""enum.%s.%s=0x%"""	1031:18:24120:24135	6123066	5	True				
ANR	6123484	Statement	PFMT64x	1031:34:24136:24142	6123066	6	True				
ANR	6123485	Statement	"""\\n"""	1031:42:24144:24147	6123066	7	True				
ANR	6123486	Statement	","	1031:46:24148:24148	6123066	8	True				
ANR	6123487	Statement	name	1031:48:24150:24153	6123066	9	True				
ANR	6123488	Statement	","	1031:52:24154:24154	6123066	10	True				
ANR	6123489	Statement	varstr	1031:54:24156:24161	6123066	11	True				
ANR	6123490	Statement	","	1031:60:24162:24162	6123066	12	True				
ANR	6123491	Statement	c	1031:62:24164:24164	6123066	13	True				
ANR	6123492	Statement	)	1031:63:24165:24165	6123066	14	True				
ANR	6123493	ExpressionStatement		1031:64:24166:24166	6123066	15	True				
ANR	6123494	Statement	tcc_appendf	1032:5:24173:24183	6123066	16	True				
ANR	6123495	Statement	(	1032:17:24185:24185	6123066	17	True				
ANR	6123496	Statement	"""enum.%s.0x%"""	1032:18:24186:24198	6123066	18	True				
ANR	6123497	Statement	PFMT64x	1032:31:24199:24205	6123066	19	True				
ANR	6123498	Statement	"""=%s\\n"""	1032:39:24207:24213	6123066	20	True				
ANR	6123499	Statement	","	1032:46:24214:24214	6123066	21	True				
ANR	6123500	Statement	name	1032:48:24216:24219	6123066	22	True				
ANR	6123501	Statement	","	1032:52:24220:24220	6123066	23	True				
ANR	6123502	Statement	c	1032:54:24222:24222	6123066	24	True				
ANR	6123503	Statement	","	1032:55:24223:24223	6123066	25	True				
ANR	6123504	Statement	varstr	1032:57:24225:24230	6123066	26	True				
ANR	6123505	Statement	)	1032:63:24231:24231	6123066	27	True				
ANR	6123506	ExpressionStatement		1032:64:24232:24232	6123066	28	True				
ANR	6123507	ExpressionStatement	"ss = sym_push ( v , & int64_type , VT_CONST , c )"	1037:4:24427:24470	6123066	5	True				
ANR	6123508	AssignmentExpression	"ss = sym_push ( v , & int64_type , VT_CONST , c )"		6123066	0		=			
ANR	6123509	Identifier	ss		6123066	0					
ANR	6123510	CallExpression	"sym_push ( v , & int64_type , VT_CONST , c )"		6123066	1					
ANR	6123511	Callee	sym_push		6123066	0					
ANR	6123512	Identifier	sym_push		6123066	0					
ANR	6123513	ArgumentList	v		6123066	1					
ANR	6123514	Argument	v		6123066	0					
ANR	6123515	Identifier	v		6123066	0					
ANR	6123516	Argument	& int64_type		6123066	1					
ANR	6123517	UnaryOperationExpression	& int64_type		6123066	0					
ANR	6123518	UnaryOperator	&		6123066	0					
ANR	6123519	Identifier	int64_type		6123066	1					
ANR	6123520	Argument	VT_CONST		6123066	2					
ANR	6123521	Identifier	VT_CONST		6123066	0					
ANR	6123522	Argument	c		6123066	3					
ANR	6123523	Identifier	c		6123066	0					
ANR	6123524	IfStatement	if ( ! ss )		6123066	6					
ANR	6123525	Condition	! ss	1038:8:24480:24482	6123066	0	True				
ANR	6123526	UnaryOperationExpression	! ss		6123066	0					
ANR	6123527	UnaryOperator	!		6123066	0					
ANR	6123528	Identifier	ss		6123066	1					
ANR	6123529	CompoundStatement		81:13:2085:2085	6123066	1					
ANR	6123530	ReturnStatement	return ;	1039:5:24492:24498	6123066	0	True				
ANR	6123531	ExpressionStatement	ss -> type . t |= VT_STATIC	1041:4:24510:24533	6123066	7	True				
ANR	6123532	AssignmentExpression	ss -> type . t |= VT_STATIC		6123066	0		|=			
ANR	6123533	MemberAccess	ss -> type . t		6123066	0					
ANR	6123534	PtrMemberAccess	ss -> type		6123066	0					
ANR	6123535	Identifier	ss		6123066	0					
ANR	6123536	Identifier	type		6123066	1					
ANR	6123537	Identifier	t		6123066	1					
ANR	6123538	Identifier	VT_STATIC		6123066	1					
ANR	6123539	IfStatement	"if ( tok != ',' )"		6123066	8					
ANR	6123540	Condition	"tok != ','"	1042:8:24543:24552	6123066	0	True				
ANR	6123541	EqualityExpression	"tok != ','"		6123066	0		!=			
ANR	6123542	Identifier	tok		6123066	0					
ANR	6123543	PrimaryExpression	"','"		6123066	1					
ANR	6123544	CompoundStatement		85:20:2155:2155	6123066	1					
ANR	6123545	BreakStatement	break ;	1043:5:24562:24567	6123066	0	True				
ANR	6123546	ExpressionStatement	next ( )	1045:4:24579:24586	6123066	9	True				
ANR	6123547	CallExpression	next ( )		6123066	0					
ANR	6123548	Callee	next		6123066	0					
ANR	6123549	Identifier	next		6123066	0					
ANR	6123550	ArgumentList			6123066	1					
ANR	6123551	ExpressionStatement	c ++	1046:4:24592:24595	6123066	10	True				
ANR	6123552	PostIncDecOperationExpression	c ++		6123066	0					
ANR	6123553	Identifier	c		6123066	0					
ANR	6123554	IncDec	++		6123066	1					
ANR	6123555	IfStatement	if ( tok == '}' )		6123066	11					
ANR	6123556	Condition	tok == '}'	1048:8:24648:24657	6123066	0	True				
ANR	6123557	EqualityExpression	tok == '}'		6123066	0		==			
ANR	6123558	Identifier	tok		6123066	0					
ANR	6123559	PrimaryExpression	'}'		6123066	1					
ANR	6123560	CompoundStatement		91:20:2260:2260	6123066	1					
ANR	6123561	BreakStatement	break ;	1049:5:24667:24672	6123066	0	True				
ANR	6123562	ExpressionStatement	skip ( '}' )	1052:3:24688:24698	6123066	2	True				
ANR	6123563	CallExpression	skip ( '}' )		6123066	0					
ANR	6123564	Callee	skip		6123066	0					
ANR	6123565	Identifier	skip		6123066	0					
ANR	6123566	ArgumentList	'}'		6123066	1					
ANR	6123567	Argument	'}'		6123066	0					
ANR	6123568	PrimaryExpression	'}'		6123066	0					
ANR	6123569	ElseStatement	else		6123066	0					
ANR	6123570	CompoundStatement		96:9:2309:2309	6123066	0					
ANR	6123571	ExpressionStatement	maxalign = 1	1054:3:24714:24726	6123066	0	True				
ANR	6123572	AssignmentExpression	maxalign = 1		6123066	0		=			
ANR	6123573	Identifier	maxalign		6123066	0					
ANR	6123574	PrimaryExpression	1		6123066	1					
ANR	6123575	ExpressionStatement	ps = & s -> next	1055:3:24731:24744	6123066	1	True				
ANR	6123576	AssignmentExpression	ps = & s -> next		6123066	0		=			
ANR	6123577	Identifier	ps		6123066	0					
ANR	6123578	UnaryOperationExpression	& s -> next		6123066	1					
ANR	6123579	UnaryOperator	&		6123066	0					
ANR	6123580	PtrMemberAccess	s -> next		6123066	1					
ANR	6123581	Identifier	s		6123066	0					
ANR	6123582	Identifier	next		6123066	1					
ANR	6123583	ExpressionStatement	prevbt = VT_INT32	1056:3:24749:24766	6123066	2	True				
ANR	6123584	AssignmentExpression	prevbt = VT_INT32		6123066	0		=			
ANR	6123585	Identifier	prevbt		6123066	0					
ANR	6123586	Identifier	VT_INT32		6123066	1					
ANR	6123587	ExpressionStatement	bit_pos = 0	1057:3:24771:24782	6123066	3	True				
ANR	6123588	AssignmentExpression	bit_pos = 0		6123066	0		=			
ANR	6123589	Identifier	bit_pos		6123066	0					
ANR	6123590	PrimaryExpression	0		6123066	1					
ANR	6123591	ExpressionStatement	offset = 0	1058:3:24787:24797	6123066	4	True				
ANR	6123592	AssignmentExpression	offset = 0		6123066	0		=			
ANR	6123593	Identifier	offset		6123066	0					
ANR	6123594	PrimaryExpression	0		6123066	1					
ANR	6123595	WhileStatement	while ( tok != '}' )		6123066	5					
ANR	6123596	Condition	tok != '}'	1059:10:24809:24818	6123066	0	True				
ANR	6123597	EqualityExpression	tok != '}'		6123066	0		!=			
ANR	6123598	Identifier	tok		6123066	0					
ANR	6123599	PrimaryExpression	'}'		6123066	1					
ANR	6123600	CompoundStatement		102:22:2421:2421	6123066	1					
ANR	6123601	IfStatement	"if ( ! parse_btype ( & btype , & ad ) )"		6123066	0					
ANR	6123602	Condition	"! parse_btype ( & btype , & ad )"	1060:8:24831:24856	6123066	0	True				
ANR	6123603	UnaryOperationExpression	"! parse_btype ( & btype , & ad )"		6123066	0					
ANR	6123604	UnaryOperator	!		6123066	0					
ANR	6123605	CallExpression	"parse_btype ( & btype , & ad )"		6123066	1					
ANR	6123606	Callee	parse_btype		6123066	0					
ANR	6123607	Identifier	parse_btype		6123066	0					
ANR	6123608	ArgumentList	& btype		6123066	1					
ANR	6123609	Argument	& btype		6123066	0					
ANR	6123610	UnaryOperationExpression	& btype		6123066	0					
ANR	6123611	UnaryOperator	&		6123066	0					
ANR	6123612	Identifier	btype		6123066	1					
ANR	6123613	Argument	& ad		6123066	1					
ANR	6123614	UnaryOperationExpression	& ad		6123066	0					
ANR	6123615	UnaryOperator	&		6123066	0					
ANR	6123616	Identifier	ad		6123066	1					
ANR	6123617	CompoundStatement		103:36:2459:2459	6123066	1					
ANR	6123618	ExpressionStatement	"expect ( ""bracket"" )"	1061:5:24866:24884	6123066	0	True				
ANR	6123619	CallExpression	"expect ( ""bracket"" )"		6123066	0					
ANR	6123620	Callee	expect		6123066	0					
ANR	6123621	Identifier	expect		6123066	0					
ANR	6123622	ArgumentList	"""bracket"""		6123066	1					
ANR	6123623	Argument	"""bracket"""		6123066	0					
ANR	6123624	PrimaryExpression	"""bracket"""		6123066	0					
ANR	6123625	BreakStatement	break ;	1062:5:24891:24896	6123066	1	True				
ANR	6123626	WhileStatement	while ( tcc_nerr ( ) == 0 )		6123066	1					
ANR	6123627	Condition	tcc_nerr ( ) == 0	1064:11:24915:24930	6123066	0	True				
ANR	6123628	EqualityExpression	tcc_nerr ( ) == 0		6123066	0		==			
ANR	6123629	CallExpression	tcc_nerr ( )		6123066	0					
ANR	6123630	Callee	tcc_nerr		6123066	0					
ANR	6123631	Identifier	tcc_nerr		6123066	0					
ANR	6123632	ArgumentList			6123066	1					
ANR	6123633	PrimaryExpression	0		6123066	1					
ANR	6123634	CompoundStatement		107:29:2533:2533	6123066	1					
ANR	6123635	ExpressionStatement	bit_size = - 1	1065:5:24940:24953	6123066	0	True				
ANR	6123636	AssignmentExpression	bit_size = - 1		6123066	0		=			
ANR	6123637	Identifier	bit_size		6123066	0					
ANR	6123638	UnaryOperationExpression	- 1		6123066	1					
ANR	6123639	UnaryOperator	-		6123066	0					
ANR	6123640	PrimaryExpression	1		6123066	1					
ANR	6123641	ExpressionStatement	v = 0	1066:5:24960:24965	6123066	1	True				
ANR	6123642	AssignmentExpression	v = 0		6123066	0		=			
ANR	6123643	Identifier	v		6123066	0					
ANR	6123644	PrimaryExpression	0		6123066	1					
ANR	6123645	ExpressionStatement	"memcpy ( & type1 , & btype , sizeof ( type1 ) )"	1067:5:24972:25010	6123066	2	True				
ANR	6123646	CallExpression	"memcpy ( & type1 , & btype , sizeof ( type1 ) )"		6123066	0					
ANR	6123647	Callee	memcpy		6123066	0					
ANR	6123648	Identifier	memcpy		6123066	0					
ANR	6123649	ArgumentList	& type1		6123066	1					
ANR	6123650	Argument	& type1		6123066	0					
ANR	6123651	UnaryOperationExpression	& type1		6123066	0					
ANR	6123652	UnaryOperator	&		6123066	0					
ANR	6123653	Identifier	type1		6123066	1					
ANR	6123654	Argument	& btype		6123066	1					
ANR	6123655	UnaryOperationExpression	& btype		6123066	0					
ANR	6123656	UnaryOperator	&		6123066	0					
ANR	6123657	Identifier	btype		6123066	1					
ANR	6123658	Argument	sizeof ( type1 )		6123066	2					
ANR	6123659	SizeofExpression	sizeof ( type1 )		6123066	0					
ANR	6123660	Sizeof	sizeof		6123066	0					
ANR	6123661	SizeofOperand	type1		6123066	1					
ANR	6123662	IfStatement	if ( tok != ':' )		6123066	3					
ANR	6123663	Condition	tok != ':'	1068:9:25021:25030	6123066	0	True				
ANR	6123664	EqualityExpression	tok != ':'		6123066	0		!=			
ANR	6123665	Identifier	tok		6123066	0					
ANR	6123666	PrimaryExpression	':'		6123066	1					
ANR	6123667	CompoundStatement		111:21:2633:2633	6123066	1					
ANR	6123668	ExpressionStatement	"type_decl ( & type1 , & ad , & v , TYPE_DIRECT | TYPE_ABSTRACT )"	1069:6:25041:25097	6123066	0	True				
ANR	6123669	CallExpression	"type_decl ( & type1 , & ad , & v , TYPE_DIRECT | TYPE_ABSTRACT )"		6123066	0					
ANR	6123670	Callee	type_decl		6123066	0					
ANR	6123671	Identifier	type_decl		6123066	0					
ANR	6123672	ArgumentList	& type1		6123066	1					
ANR	6123673	Argument	& type1		6123066	0					
ANR	6123674	UnaryOperationExpression	& type1		6123066	0					
ANR	6123675	UnaryOperator	&		6123066	0					
ANR	6123676	Identifier	type1		6123066	1					
ANR	6123677	Argument	& ad		6123066	1					
ANR	6123678	UnaryOperationExpression	& ad		6123066	0					
ANR	6123679	UnaryOperator	&		6123066	0					
ANR	6123680	Identifier	ad		6123066	1					
ANR	6123681	Argument	& v		6123066	2					
ANR	6123682	UnaryOperationExpression	& v		6123066	0					
ANR	6123683	UnaryOperator	&		6123066	0					
ANR	6123684	Identifier	v		6123066	1					
ANR	6123685	Argument	TYPE_DIRECT | TYPE_ABSTRACT		6123066	3					
ANR	6123686	InclusiveOrExpression	TYPE_DIRECT | TYPE_ABSTRACT		6123066	0		|			
ANR	6123687	Identifier	TYPE_DIRECT		6123066	0					
ANR	6123688	Identifier	TYPE_ABSTRACT		6123066	1					
ANR	6123689	IfStatement	if ( v == 0 && not_structured ( & type1 ) )		6123066	1					
ANR	6123690	Condition	v == 0 && not_structured ( & type1 )	1070:10:25109:25140	6123066	0	True				
ANR	6123691	AndExpression	v == 0 && not_structured ( & type1 )		6123066	0		&&			
ANR	6123692	EqualityExpression	v == 0		6123066	0		==			
ANR	6123693	Identifier	v		6123066	0					
ANR	6123694	PrimaryExpression	0		6123066	1					
ANR	6123695	CallExpression	not_structured ( & type1 )		6123066	1					
ANR	6123696	Callee	not_structured		6123066	0					
ANR	6123697	Identifier	not_structured		6123066	0					
ANR	6123698	ArgumentList	& type1		6123066	1					
ANR	6123699	Argument	& type1		6123066	0					
ANR	6123700	UnaryOperationExpression	& type1		6123066	0					
ANR	6123701	UnaryOperator	&		6123066	0					
ANR	6123702	Identifier	type1		6123066	1					
ANR	6123703	CompoundStatement		113:44:2743:2743	6123066	1					
ANR	6123704	ExpressionStatement	"expect ( ""identifier"" )"	1071:7:25152:25173	6123066	0	True				
ANR	6123705	CallExpression	"expect ( ""identifier"" )"		6123066	0					
ANR	6123706	Callee	expect		6123066	0					
ANR	6123707	Identifier	expect		6123066	0					
ANR	6123708	ArgumentList	"""identifier"""		6123066	1					
ANR	6123709	Argument	"""identifier"""		6123066	0					
ANR	6123710	PrimaryExpression	"""identifier"""		6123066	0					
ANR	6123711	IfStatement	if ( ( type1 . t & VT_BTYPE ) == VT_FUNC || ( type1 . t & ( VT_TYPEDEF | VT_STATIC | VT_EXTERN | VT_INLINE ) ) )		6123066	2					
ANR	6123712	Condition	( type1 . t & VT_BTYPE ) == VT_FUNC || ( type1 . t & ( VT_TYPEDEF | VT_STATIC | VT_EXTERN | VT_INLINE ) )	1073:10:25193:25297	6123066	0	True				
ANR	6123713	OrExpression	( type1 . t & VT_BTYPE ) == VT_FUNC || ( type1 . t & ( VT_TYPEDEF | VT_STATIC | VT_EXTERN | VT_INLINE ) )		6123066	0		||			
ANR	6123714	EqualityExpression	( type1 . t & VT_BTYPE ) == VT_FUNC		6123066	0		==			
ANR	6123715	BitAndExpression	type1 . t & VT_BTYPE		6123066	0		&			
ANR	6123716	MemberAccess	type1 . t		6123066	0					
ANR	6123717	Identifier	type1		6123066	0					
ANR	6123718	Identifier	t		6123066	1					
ANR	6123719	Identifier	VT_BTYPE		6123066	1					
ANR	6123720	Identifier	VT_FUNC		6123066	1					
ANR	6123721	BitAndExpression	type1 . t & ( VT_TYPEDEF | VT_STATIC | VT_EXTERN | VT_INLINE )		6123066	1		&			
ANR	6123722	MemberAccess	type1 . t		6123066	0					
ANR	6123723	Identifier	type1		6123066	0					
ANR	6123724	Identifier	t		6123066	1					
ANR	6123725	InclusiveOrExpression	VT_TYPEDEF | VT_STATIC | VT_EXTERN | VT_INLINE		6123066	1		|			
ANR	6123726	Identifier	VT_TYPEDEF		6123066	0					
ANR	6123727	InclusiveOrExpression	VT_STATIC | VT_EXTERN | VT_INLINE		6123066	1		|			
ANR	6123728	Identifier	VT_STATIC		6123066	0					
ANR	6123729	InclusiveOrExpression	VT_EXTERN | VT_INLINE		6123066	1		|			
ANR	6123730	Identifier	VT_EXTERN		6123066	0					
ANR	6123731	Identifier	VT_INLINE		6123066	1					
ANR	6123732	CompoundStatement		117:72:2900:2900	6123066	1					
ANR	6123733	ExpressionStatement	"TCC_ERR ( ""invalid type for '%s'"" , get_tok_str ( v , NULL ) )"	1075:7:25309:25373	6123066	0	True				
ANR	6123734	CallExpression	"TCC_ERR ( ""invalid type for '%s'"" , get_tok_str ( v , NULL ) )"		6123066	0					
ANR	6123735	Callee	TCC_ERR		6123066	0					
ANR	6123736	Identifier	TCC_ERR		6123066	0					
ANR	6123737	ArgumentList	"""invalid type for '%s'"""		6123066	1					
ANR	6123738	Argument	"""invalid type for '%s'"""		6123066	0					
ANR	6123739	PrimaryExpression	"""invalid type for '%s'"""		6123066	0					
ANR	6123740	Argument	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6123741	CallExpression	"get_tok_str ( v , NULL )"		6123066	0					
ANR	6123742	Callee	get_tok_str		6123066	0					
ANR	6123743	Identifier	get_tok_str		6123066	0					
ANR	6123744	ArgumentList	v		6123066	1					
ANR	6123745	Argument	v		6123066	0					
ANR	6123746	Identifier	v		6123066	0					
ANR	6123747	Argument	NULL		6123066	1					
ANR	6123748	Identifier	NULL		6123066	0					
ANR	6123749	IfStatement	if ( tok == ':' )		6123066	4					
ANR	6123750	Condition	tok == ':'	1079:9:25399:25408	6123066	0	True				
ANR	6123751	EqualityExpression	tok == ':'		6123066	0		==			
ANR	6123752	Identifier	tok		6123066	0					
ANR	6123753	PrimaryExpression	':'		6123066	1					
ANR	6123754	CompoundStatement		122:21:3011:3011	6123066	1					
ANR	6123755	ExpressionStatement	next ( )	1080:6:25419:25426	6123066	0	True				
ANR	6123756	CallExpression	next ( )		6123066	0					
ANR	6123757	Callee	next		6123066	0					
ANR	6123758	Identifier	next		6123066	0					
ANR	6123759	ArgumentList			6123066	1					
ANR	6123760	ExpressionStatement	bit_size = ( int ) expr_const ( )	1081:6:25434:25464	6123066	1	True				
ANR	6123761	AssignmentExpression	bit_size = ( int ) expr_const ( )		6123066	0		=			
ANR	6123762	Identifier	bit_size		6123066	0					
ANR	6123763	CastExpression	( int ) expr_const ( )		6123066	1					
ANR	6123764	CastTarget	int		6123066	0					
ANR	6123765	CallExpression	expr_const ( )		6123066	1					
ANR	6123766	Callee	expr_const		6123066	0					
ANR	6123767	Identifier	expr_const		6123066	0					
ANR	6123768	ArgumentList			6123066	1					
ANR	6123769	IfStatement	if ( bit_size < 0 )		6123066	2					
ANR	6123770	Condition	bit_size < 0	1083:10:25524:25535	6123066	0	True				
ANR	6123771	RelationalExpression	bit_size < 0		6123066	0		<			
ANR	6123772	Identifier	bit_size		6123066	0					
ANR	6123773	PrimaryExpression	0		6123066	1					
ANR	6123774	CompoundStatement		126:24:3138:3138	6123066	1					
ANR	6123775	ExpressionStatement	"TCC_ERR ( ""negative width in bit-field '%s'"" , get_tok_str ( v , NULL ) )"	1084:7:25547:25622	6123066	0	True				
ANR	6123776	CallExpression	"TCC_ERR ( ""negative width in bit-field '%s'"" , get_tok_str ( v , NULL ) )"		6123066	0					
ANR	6123777	Callee	TCC_ERR		6123066	0					
ANR	6123778	Identifier	TCC_ERR		6123066	0					
ANR	6123779	ArgumentList	"""negative width in bit-field '%s'"""		6123066	1					
ANR	6123780	Argument	"""negative width in bit-field '%s'"""		6123066	0					
ANR	6123781	PrimaryExpression	"""negative width in bit-field '%s'"""		6123066	0					
ANR	6123782	Argument	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6123783	CallExpression	"get_tok_str ( v , NULL )"		6123066	0					
ANR	6123784	Callee	get_tok_str		6123066	0					
ANR	6123785	Identifier	get_tok_str		6123066	0					
ANR	6123786	ArgumentList	v		6123066	1					
ANR	6123787	Argument	v		6123066	0					
ANR	6123788	Identifier	v		6123066	0					
ANR	6123789	Argument	NULL		6123066	1					
ANR	6123790	Identifier	NULL		6123066	0					
ANR	6123791	IfStatement	if ( v && bit_size == 0 )		6123066	3					
ANR	6123792	Condition	v && bit_size == 0	1087:10:25642:25659	6123066	0	True				
ANR	6123793	AndExpression	v && bit_size == 0		6123066	0		&&			
ANR	6123794	Identifier	v		6123066	0					
ANR	6123795	EqualityExpression	bit_size == 0		6123066	1		==			
ANR	6123796	Identifier	bit_size		6123066	0					
ANR	6123797	PrimaryExpression	0		6123066	1					
ANR	6123798	CompoundStatement		130:30:3262:3262	6123066	1					
ANR	6123799	ExpressionStatement	"TCC_ERR ( ""zero width for bit-field '%s'"" , get_tok_str ( v , NULL ) )"	1088:7:25671:25743	6123066	0	True				
ANR	6123800	CallExpression	"TCC_ERR ( ""zero width for bit-field '%s'"" , get_tok_str ( v , NULL ) )"		6123066	0					
ANR	6123801	Callee	TCC_ERR		6123066	0					
ANR	6123802	Identifier	TCC_ERR		6123066	0					
ANR	6123803	ArgumentList	"""zero width for bit-field '%s'"""		6123066	1					
ANR	6123804	Argument	"""zero width for bit-field '%s'"""		6123066	0					
ANR	6123805	PrimaryExpression	"""zero width for bit-field '%s'"""		6123066	0					
ANR	6123806	Argument	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6123807	CallExpression	"get_tok_str ( v , NULL )"		6123066	0					
ANR	6123808	Callee	get_tok_str		6123066	0					
ANR	6123809	Identifier	get_tok_str		6123066	0					
ANR	6123810	ArgumentList	v		6123066	1					
ANR	6123811	Argument	v		6123066	0					
ANR	6123812	Identifier	v		6123066	0					
ANR	6123813	Argument	NULL		6123066	1					
ANR	6123814	Identifier	NULL		6123066	0					
ANR	6123815	ExpressionStatement	"size = type_size ( & type1 , & align )"	1092:5:25765:25798	6123066	5	True				
ANR	6123816	AssignmentExpression	"size = type_size ( & type1 , & align )"		6123066	0		=			
ANR	6123817	Identifier	size		6123066	0					
ANR	6123818	CallExpression	"type_size ( & type1 , & align )"		6123066	1					
ANR	6123819	Callee	type_size		6123066	0					
ANR	6123820	Identifier	type_size		6123066	0					
ANR	6123821	ArgumentList	& type1		6123066	1					
ANR	6123822	Argument	& type1		6123066	0					
ANR	6123823	UnaryOperationExpression	& type1		6123066	0					
ANR	6123824	UnaryOperator	&		6123066	0					
ANR	6123825	Identifier	type1		6123066	1					
ANR	6123826	Argument	& align		6123066	1					
ANR	6123827	UnaryOperationExpression	& align		6123066	0					
ANR	6123828	UnaryOperator	&		6123066	0					
ANR	6123829	Identifier	align		6123066	1					
ANR	6123830	IfStatement	if ( ad . aligned )		6123066	6					
ANR	6123831	Condition	ad . aligned	1093:9:25809:25818	6123066	0	True				
ANR	6123832	MemberAccess	ad . aligned		6123066	0					
ANR	6123833	Identifier	ad		6123066	0					
ANR	6123834	Identifier	aligned		6123066	1					
ANR	6123835	CompoundStatement		136:21:3421:3421	6123066	1					
ANR	6123836	IfStatement	if ( align < ad . aligned )		6123066	0					
ANR	6123837	Condition	align < ad . aligned	1094:10:25833:25850	6123066	0	True				
ANR	6123838	RelationalExpression	align < ad . aligned		6123066	0		<			
ANR	6123839	Identifier	align		6123066	0					
ANR	6123840	MemberAccess	ad . aligned		6123066	1					
ANR	6123841	Identifier	ad		6123066	0					
ANR	6123842	Identifier	aligned		6123066	1					
ANR	6123843	CompoundStatement		137:30:3453:3453	6123066	1					
ANR	6123844	ExpressionStatement	align = ad . aligned	1095:7:25862:25880	6123066	0	True				
ANR	6123845	AssignmentExpression	align = ad . aligned		6123066	0		=			
ANR	6123846	Identifier	align		6123066	0					
ANR	6123847	MemberAccess	ad . aligned		6123066	1					
ANR	6123848	Identifier	ad		6123066	0					
ANR	6123849	Identifier	aligned		6123066	1					
ANR	6123850	ElseStatement	else		6123066	0					
ANR	6123851	IfStatement	if ( ad . packed )		6123066	0					
ANR	6123852	Condition	ad . packed	1097:16:25906:25914	6123066	0	True				
ANR	6123853	MemberAccess	ad . packed		6123066	0					
ANR	6123854	Identifier	ad		6123066	0					
ANR	6123855	Identifier	packed		6123066	1					
ANR	6123856	CompoundStatement		140:27:3517:3517	6123066	1					
ANR	6123857	ExpressionStatement	align = 1	1098:6:25925:25934	6123066	0	True				
ANR	6123858	AssignmentExpression	align = 1		6123066	0		=			
ANR	6123859	Identifier	align		6123066	0					
ANR	6123860	PrimaryExpression	1		6123066	1					
ANR	6123861	ElseStatement	else		6123066	0					
ANR	6123862	IfStatement	if ( * tcc_state -> pack_stack_ptr )		6123066	0					
ANR	6123863	Condition	* tcc_state -> pack_stack_ptr	1099:16:25952:25977	6123066	0	True				
ANR	6123864	UnaryOperationExpression	* tcc_state -> pack_stack_ptr		6123066	0					
ANR	6123865	UnaryOperator	*		6123066	0					
ANR	6123866	PtrMemberAccess	tcc_state -> pack_stack_ptr		6123066	1					
ANR	6123867	Identifier	tcc_state		6123066	0					
ANR	6123868	Identifier	pack_stack_ptr		6123066	1					
ANR	6123869	CompoundStatement		142:44:3580:3580	6123066	1					
ANR	6123870	IfStatement	if ( align > * tcc_state -> pack_stack_ptr )		6123066	0					
ANR	6123871	Condition	align > * tcc_state -> pack_stack_ptr	1100:10:25992:26025	6123066	0	True				
ANR	6123872	RelationalExpression	align > * tcc_state -> pack_stack_ptr		6123066	0		>			
ANR	6123873	Identifier	align		6123066	0					
ANR	6123874	UnaryOperationExpression	* tcc_state -> pack_stack_ptr		6123066	1					
ANR	6123875	UnaryOperator	*		6123066	0					
ANR	6123876	PtrMemberAccess	tcc_state -> pack_stack_ptr		6123066	1					
ANR	6123877	Identifier	tcc_state		6123066	0					
ANR	6123878	Identifier	pack_stack_ptr		6123066	1					
ANR	6123879	CompoundStatement		143:46:3628:3628	6123066	1					
ANR	6123880	ExpressionStatement	align = * tcc_state -> pack_stack_ptr	1101:7:26037:26071	6123066	0	True				
ANR	6123881	AssignmentExpression	align = * tcc_state -> pack_stack_ptr		6123066	0		=			
ANR	6123882	Identifier	align		6123066	0					
ANR	6123883	UnaryOperationExpression	* tcc_state -> pack_stack_ptr		6123066	1					
ANR	6123884	UnaryOperator	*		6123066	0					
ANR	6123885	PtrMemberAccess	tcc_state -> pack_stack_ptr		6123066	1					
ANR	6123886	Identifier	tcc_state		6123066	0					
ANR	6123887	Identifier	pack_stack_ptr		6123066	1					
ANR	6123888	ExpressionStatement	lbit_pos = 0	1104:5:26093:26105	6123066	7	True				
ANR	6123889	AssignmentExpression	lbit_pos = 0		6123066	0		=			
ANR	6123890	Identifier	lbit_pos		6123066	0					
ANR	6123891	PrimaryExpression	0		6123066	1					
ANR	6123892	IfStatement	if ( bit_size >= 0 )		6123066	8					
ANR	6123893	Condition	bit_size >= 0	1108:9:26318:26330	6123066	0	True				
ANR	6123894	RelationalExpression	bit_size >= 0		6123066	0		>=			
ANR	6123895	Identifier	bit_size		6123066	0					
ANR	6123896	PrimaryExpression	0		6123066	1					
ANR	6123897	CompoundStatement		151:24:3933:3933	6123066	1					
ANR	6123898	ExpressionStatement	bt = type1 . t & VT_BTYPE	1109:6:26341:26364	6123066	0	True				
ANR	6123899	AssignmentExpression	bt = type1 . t & VT_BTYPE		6123066	0		=			
ANR	6123900	Identifier	bt		6123066	0					
ANR	6123901	BitAndExpression	type1 . t & VT_BTYPE		6123066	1		&			
ANR	6123902	MemberAccess	type1 . t		6123066	0					
ANR	6123903	Identifier	type1		6123066	0					
ANR	6123904	Identifier	t		6123066	1					
ANR	6123905	Identifier	VT_BTYPE		6123066	1					
ANR	6123906	IfStatement	if ( bt != VT_INT8 && bt != VT_INT16 && bt != VT_INT32 && bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL )		6123066	1					
ANR	6123907	Condition	bt != VT_INT8 && bt != VT_INT16 && bt != VT_INT32 && bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL	1110:10:26376:26526	6123066	0	True				
ANR	6123908	AndExpression	bt != VT_INT8 && bt != VT_INT16 && bt != VT_INT32 && bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL		6123066	0		&&			
ANR	6123909	EqualityExpression	bt != VT_INT8		6123066	0		!=			
ANR	6123910	Identifier	bt		6123066	0					
ANR	6123911	Identifier	VT_INT8		6123066	1					
ANR	6123912	AndExpression	bt != VT_INT16 && bt != VT_INT32 && bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL		6123066	1		&&			
ANR	6123913	EqualityExpression	bt != VT_INT16		6123066	0		!=			
ANR	6123914	Identifier	bt		6123066	0					
ANR	6123915	Identifier	VT_INT16		6123066	1					
ANR	6123916	AndExpression	bt != VT_INT32 && bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL		6123066	1		&&			
ANR	6123917	EqualityExpression	bt != VT_INT32		6123066	0		!=			
ANR	6123918	Identifier	bt		6123066	0					
ANR	6123919	Identifier	VT_INT32		6123066	1					
ANR	6123920	AndExpression	bt != VT_INT64 && bt != VT_ENUM && bt != VT_BOOL		6123066	1		&&			
ANR	6123921	EqualityExpression	bt != VT_INT64		6123066	0		!=			
ANR	6123922	Identifier	bt		6123066	0					
ANR	6123923	Identifier	VT_INT64		6123066	1					
ANR	6123924	AndExpression	bt != VT_ENUM && bt != VT_BOOL		6123066	1		&&			
ANR	6123925	EqualityExpression	bt != VT_ENUM		6123066	0		!=			
ANR	6123926	Identifier	bt		6123066	0					
ANR	6123927	Identifier	VT_ENUM		6123066	1					
ANR	6123928	EqualityExpression	bt != VT_BOOL		6123066	1		!=			
ANR	6123929	Identifier	bt		6123066	0					
ANR	6123930	Identifier	VT_BOOL		6123066	1					
ANR	6123931	CompoundStatement		158:25:4129:4129	6123066	1					
ANR	6123932	ExpressionStatement	"TCC_ERR ( ""bitfields must have scalar type"" )"	1116:7:26538:26581	6123066	0	True				
ANR	6123933	CallExpression	"TCC_ERR ( ""bitfields must have scalar type"" )"		6123066	0					
ANR	6123934	Callee	TCC_ERR		6123066	0					
ANR	6123935	Identifier	TCC_ERR		6123066	0					
ANR	6123936	ArgumentList	"""bitfields must have scalar type"""		6123066	1					
ANR	6123937	Argument	"""bitfields must have scalar type"""		6123066	0					
ANR	6123938	PrimaryExpression	"""bitfields must have scalar type"""		6123066	0					
ANR	6123939	ExpressionStatement	bsize = size * 8	1118:6:26597:26613	6123066	2	True				
ANR	6123940	AssignmentExpression	bsize = size * 8		6123066	0		=			
ANR	6123941	Identifier	bsize		6123066	0					
ANR	6123942	MultiplicativeExpression	size * 8		6123066	1		*			
ANR	6123943	Identifier	size		6123066	0					
ANR	6123944	PrimaryExpression	8		6123066	1					
ANR	6123945	IfStatement	if ( bit_size > bsize )		6123066	3					
ANR	6123946	Condition	bit_size > bsize	1119:10:26625:26640	6123066	0	True				
ANR	6123947	RelationalExpression	bit_size > bsize		6123066	0		>			
ANR	6123948	Identifier	bit_size		6123066	0					
ANR	6123949	Identifier	bsize		6123066	1					
ANR	6123950	CompoundStatement		162:28:4243:4243	6123066	1					
ANR	6123951	ExpressionStatement	"TCC_ERR ( ""width of '%s' exceeds its type"" , get_tok_str ( v , NULL ) )"	1120:7:26652:26725	6123066	0	True				
ANR	6123952	CallExpression	"TCC_ERR ( ""width of '%s' exceeds its type"" , get_tok_str ( v , NULL ) )"		6123066	0					
ANR	6123953	Callee	TCC_ERR		6123066	0					
ANR	6123954	Identifier	TCC_ERR		6123066	0					
ANR	6123955	ArgumentList	"""width of '%s' exceeds its type"""		6123066	1					
ANR	6123956	Argument	"""width of '%s' exceeds its type"""		6123066	0					
ANR	6123957	PrimaryExpression	"""width of '%s' exceeds its type"""		6123066	0					
ANR	6123958	Argument	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6123959	CallExpression	"get_tok_str ( v , NULL )"		6123066	0					
ANR	6123960	Callee	get_tok_str		6123066	0					
ANR	6123961	Identifier	get_tok_str		6123066	0					
ANR	6123962	ArgumentList	v		6123066	1					
ANR	6123963	Argument	v		6123066	0					
ANR	6123964	Identifier	v		6123066	0					
ANR	6123965	Argument	NULL		6123066	1					
ANR	6123966	Identifier	NULL		6123066	0					
ANR	6123967	ElseStatement	else		6123066	0					
ANR	6123968	IfStatement	if ( bit_size == bsize )		6123066	0					
ANR	6123969	Condition	bit_size == bsize	1122:17:26744:26760	6123066	0	True				
ANR	6123970	EqualityExpression	bit_size == bsize		6123066	0		==			
ANR	6123971	Identifier	bit_size		6123066	0					
ANR	6123972	Identifier	bsize		6123066	1					
ANR	6123973	CompoundStatement		165:36:4363:4363	6123066	1					
ANR	6123974	ExpressionStatement	bit_pos = 0	1124:7:26808:26819	6123066	0	True				
ANR	6123975	AssignmentExpression	bit_pos = 0		6123066	0		=			
ANR	6123976	Identifier	bit_pos		6123066	0					
ANR	6123977	PrimaryExpression	0		6123066	1					
ANR	6123978	ElseStatement	else		6123066	0					
ANR	6123979	IfStatement	if ( bit_size == 0 )		6123066	0					
ANR	6123980	Condition	bit_size == 0	1125:17:26838:26850	6123066	0	True				
ANR	6123981	EqualityExpression	bit_size == 0		6123066	0		==			
ANR	6123982	Identifier	bit_size		6123066	0					
ANR	6123983	PrimaryExpression	0		6123066	1					
ANR	6123984	CompoundStatement		168:32:4453:4453	6123066	1					
ANR	6123985	ExpressionStatement	bit_pos = 0	1129:7:26971:26982	6123066	0	True				
ANR	6123986	AssignmentExpression	bit_pos = 0		6123066	0		=			
ANR	6123987	Identifier	bit_pos		6123066	0					
ANR	6123988	PrimaryExpression	0		6123066	1					
ANR	6123989	ElseStatement	else		6123066	0					
ANR	6123990	CompoundStatement		173:13:4597:4597	6123066	0					
ANR	6123991	IfStatement	if ( ( bit_pos + bit_size ) > bsize || bt != prevbt || a == TOK_UNION )		6123066	0					
ANR	6123992	Condition	( bit_pos + bit_size ) > bsize || bt != prevbt || a == TOK_UNION	1134:11:27108:27180	6123066	0	True				
ANR	6123993	OrExpression	( bit_pos + bit_size ) > bsize || bt != prevbt || a == TOK_UNION		6123066	0		||			
ANR	6123994	RelationalExpression	( bit_pos + bit_size ) > bsize		6123066	0		>			
ANR	6123995	AdditiveExpression	bit_pos + bit_size		6123066	0		+			
ANR	6123996	Identifier	bit_pos		6123066	0					
ANR	6123997	Identifier	bit_size		6123066	1					
ANR	6123998	Identifier	bsize		6123066	1					
ANR	6123999	OrExpression	bt != prevbt || a == TOK_UNION		6123066	1		||			
ANR	6124000	EqualityExpression	bt != prevbt		6123066	0		!=			
ANR	6124001	Identifier	bt		6123066	0					
ANR	6124002	Identifier	prevbt		6123066	1					
ANR	6124003	EqualityExpression	a == TOK_UNION		6123066	1		==			
ANR	6124004	Identifier	a		6123066	0					
ANR	6124005	Identifier	TOK_UNION		6123066	1					
ANR	6124006	CompoundStatement		178:43:4783:4783	6123066	1					
ANR	6124007	ExpressionStatement	bit_pos = 0	1136:8:27193:27204	6123066	0	True				
ANR	6124008	AssignmentExpression	bit_pos = 0		6123066	0		=			
ANR	6124009	Identifier	bit_pos		6123066	0					
ANR	6124010	PrimaryExpression	0		6123066	1					
ANR	6124011	ExpressionStatement	lbit_pos = bit_pos	1138:7:27222:27240	6123066	1	True				
ANR	6124012	AssignmentExpression	lbit_pos = bit_pos		6123066	0		=			
ANR	6124013	Identifier	lbit_pos		6123066	0					
ANR	6124014	Identifier	bit_pos		6123066	1					
ANR	6124015	ExpressionStatement	type1 . t |= VT_BITFIELD | ( bit_pos << VT_STRUCT_SHIFT ) | ( bit_size << ( VT_STRUCT_SHIFT + 6 ) )	1140:7:27284:27397	6123066	2	True				
ANR	6124016	AssignmentExpression	type1 . t |= VT_BITFIELD | ( bit_pos << VT_STRUCT_SHIFT ) | ( bit_size << ( VT_STRUCT_SHIFT + 6 ) )		6123066	0		|=			
ANR	6124017	MemberAccess	type1 . t		6123066	0					
ANR	6124018	Identifier	type1		6123066	0					
ANR	6124019	Identifier	t		6123066	1					
ANR	6124020	InclusiveOrExpression	VT_BITFIELD | ( bit_pos << VT_STRUCT_SHIFT ) | ( bit_size << ( VT_STRUCT_SHIFT + 6 ) )		6123066	1		|			
ANR	6124021	Identifier	VT_BITFIELD		6123066	0					
ANR	6124022	InclusiveOrExpression	( bit_pos << VT_STRUCT_SHIFT ) | ( bit_size << ( VT_STRUCT_SHIFT + 6 ) )		6123066	1		|			
ANR	6124023	ShiftExpression	bit_pos << VT_STRUCT_SHIFT		6123066	0		<<			
ANR	6124024	Identifier	bit_pos		6123066	0					
ANR	6124025	Identifier	VT_STRUCT_SHIFT		6123066	1					
ANR	6124026	ShiftExpression	bit_size << ( VT_STRUCT_SHIFT + 6 )		6123066	1		<<			
ANR	6124027	Identifier	bit_size		6123066	0					
ANR	6124028	AdditiveExpression	VT_STRUCT_SHIFT + 6		6123066	1		+			
ANR	6124029	Identifier	VT_STRUCT_SHIFT		6123066	0					
ANR	6124030	PrimaryExpression	6		6123066	1					
ANR	6124031	ExpressionStatement	bit_pos += bit_size	1143:7:27406:27425	6123066	3	True				
ANR	6124032	AssignmentExpression	bit_pos += bit_size		6123066	0		+=			
ANR	6124033	Identifier	bit_pos		6123066	0					
ANR	6124034	Identifier	bit_size		6123066	1					
ANR	6124035	ExpressionStatement	prevbt = bt	1145:6:27441:27452	6123066	4	True				
ANR	6124036	AssignmentExpression	prevbt = bt		6123066	0		=			
ANR	6124037	Identifier	prevbt		6123066	0					
ANR	6124038	Identifier	bt		6123066	1					
ANR	6124039	ElseStatement	else		6123066	0					
ANR	6124040	CompoundStatement		189:12:5066:5066	6123066	0					
ANR	6124041	ExpressionStatement	bit_pos = 0	1147:6:27474:27485	6123066	0	True				
ANR	6124042	AssignmentExpression	bit_pos = 0		6123066	0		=			
ANR	6124043	Identifier	bit_pos		6123066	0					
ANR	6124044	PrimaryExpression	0		6123066	1					
ANR	6124045	IfStatement	if ( v != 0 || is_structured ( & type1 ) )		6123066	9					
ANR	6124046	Condition	v != 0 || is_structured ( & type1 )	1149:9:27503:27533	6123066	0	True				
ANR	6124047	OrExpression	v != 0 || is_structured ( & type1 )		6123066	0		||			
ANR	6124048	EqualityExpression	v != 0		6123066	0		!=			
ANR	6124049	Identifier	v		6123066	0					
ANR	6124050	PrimaryExpression	0		6123066	1					
ANR	6124051	CallExpression	is_structured ( & type1 )		6123066	1					
ANR	6124052	Callee	is_structured		6123066	0					
ANR	6124053	Identifier	is_structured		6123066	0					
ANR	6124054	ArgumentList	& type1		6123066	1					
ANR	6124055	Argument	& type1		6123066	0					
ANR	6124056	UnaryOperationExpression	& type1		6123066	0					
ANR	6124057	UnaryOperator	&		6123066	0					
ANR	6124058	Identifier	type1		6123066	1					
ANR	6124059	CompoundStatement		215:6:5625:5661	6123066	1					
ANR	6124060	IfStatement	if ( lbit_pos == 0 )		6123066	0					
ANR	6124061	Condition	lbit_pos == 0	1152:10:27616:27628	6123066	0	True				
ANR	6124062	EqualityExpression	lbit_pos == 0		6123066	0		==			
ANR	6124063	Identifier	lbit_pos		6123066	0					
ANR	6124064	PrimaryExpression	0		6123066	1					
ANR	6124065	CompoundStatement		195:25:5231:5231	6123066	1					
ANR	6124066	IfStatement	if ( a == TOK_STRUCT )		6123066	0					
ANR	6124067	Condition	a == TOK_STRUCT	1153:11:27644:27658	6123066	0	True				
ANR	6124068	EqualityExpression	a == TOK_STRUCT		6123066	0		==			
ANR	6124069	Identifier	a		6123066	0					
ANR	6124070	Identifier	TOK_STRUCT		6123066	1					
ANR	6124071	CompoundStatement		196:28:5261:5261	6123066	1					
ANR	6124072	ExpressionStatement	c = ( c + align - 1 ) & - align	1154:8:27671:27700	6123066	0	True				
ANR	6124073	AssignmentExpression	c = ( c + align - 1 ) & - align		6123066	0		=			
ANR	6124074	Identifier	c		6123066	0					
ANR	6124075	BitAndExpression	( c + align - 1 ) & - align		6123066	1		&			
ANR	6124076	AdditiveExpression	c + align - 1		6123066	0		+			
ANR	6124077	Identifier	c		6123066	0					
ANR	6124078	AdditiveExpression	align - 1		6123066	1		-			
ANR	6124079	Identifier	align		6123066	0					
ANR	6124080	PrimaryExpression	1		6123066	1					
ANR	6124081	UnaryOperationExpression	- align		6123066	1					
ANR	6124082	UnaryOperator	-		6123066	0					
ANR	6124083	Identifier	align		6123066	1					
ANR	6124084	ExpressionStatement	offset = c	1155:8:27710:27720	6123066	1	True				
ANR	6124085	AssignmentExpression	offset = c		6123066	0		=			
ANR	6124086	Identifier	offset		6123066	0					
ANR	6124087	Identifier	c		6123066	1					
ANR	6124088	IfStatement	if ( size > 0 )		6123066	2					
ANR	6124089	Condition	size > 0	1156:12:27734:27741	6123066	0	True				
ANR	6124090	RelationalExpression	size > 0		6123066	0		>			
ANR	6124091	Identifier	size		6123066	0					
ANR	6124092	PrimaryExpression	0		6123066	1					
ANR	6124093	CompoundStatement		199:22:5344:5344	6123066	1					
ANR	6124094	ExpressionStatement	c += size	1157:9:27755:27764	6123066	0	True				
ANR	6124095	AssignmentExpression	c += size		6123066	0		+=			
ANR	6124096	Identifier	c		6123066	0					
ANR	6124097	Identifier	size		6123066	1					
ANR	6124098	ElseStatement	else		6123066	0					
ANR	6124099	CompoundStatement		202:14:5390:5390	6123066	0					
ANR	6124100	ExpressionStatement	offset = 0	1160:8:27800:27810	6123066	0	True				
ANR	6124101	AssignmentExpression	offset = 0		6123066	0		=			
ANR	6124102	Identifier	offset		6123066	0					
ANR	6124103	PrimaryExpression	0		6123066	1					
ANR	6124104	IfStatement	if ( size > c )		6123066	1					
ANR	6124105	Condition	size > c	1161:12:27824:27831	6123066	0	True				
ANR	6124106	RelationalExpression	size > c		6123066	0		>			
ANR	6124107	Identifier	size		6123066	0					
ANR	6124108	Identifier	c		6123066	1					
ANR	6124109	CompoundStatement		204:22:5434:5434	6123066	1					
ANR	6124110	ExpressionStatement	c = size	1162:9:27845:27853	6123066	0	True				
ANR	6124111	AssignmentExpression	c = size		6123066	0		=			
ANR	6124112	Identifier	c		6123066	0					
ANR	6124113	Identifier	size		6123066	1					
ANR	6124114	IfStatement	if ( align > maxalign )		6123066	1					
ANR	6124115	Condition	align > maxalign	1165:11:27885:27900	6123066	0	True				
ANR	6124116	RelationalExpression	align > maxalign		6123066	0		>			
ANR	6124117	Identifier	align		6123066	0					
ANR	6124118	Identifier	maxalign		6123066	1					
ANR	6124119	CompoundStatement		208:29:5503:5503	6123066	1					
ANR	6124120	ExpressionStatement	maxalign = align	1166:8:27913:27929	6123066	0	True				
ANR	6124121	AssignmentExpression	maxalign = align		6123066	0		=			
ANR	6124122	Identifier	maxalign		6123066	0					
ANR	6124123	Identifier	align		6123066	1					
ANR	6124124	IdentifierDeclStatement	char b [ 1024 ] ;	1171:6:28005:28017	6123066	1	True				
ANR	6124125	IdentifierDecl	b [ 1024 ]		6123066	0					
ANR	6124126	IdentifierDeclType	char [ 1024 ]		6123066	0					
ANR	6124127	Identifier	b		6123066	1					
ANR	6124128	PrimaryExpression	1024		6123066	2					
ANR	6124129	IdentifierDeclStatement	"char * varstr = get_tok_str ( v , NULL ) ;"	1172:6:28025:28061	6123066	2	True				
ANR	6124130	IdentifierDecl	"* varstr = get_tok_str ( v , NULL )"		6123066	0					
ANR	6124131	IdentifierDeclType	char *		6123066	0					
ANR	6124132	Identifier	varstr		6123066	1					
ANR	6124133	AssignmentExpression	"* varstr = get_tok_str ( v , NULL )"		6123066	2		=			
ANR	6124134	Identifier	varstr		6123066	0					
ANR	6124135	CallExpression	"get_tok_str ( v , NULL )"		6123066	1					
ANR	6124136	Callee	get_tok_str		6123066	0					
ANR	6124137	Identifier	get_tok_str		6123066	0					
ANR	6124138	ArgumentList	v		6123066	1					
ANR	6124139	Argument	v		6123066	0					
ANR	6124140	Identifier	v		6123066	0					
ANR	6124141	Argument	NULL		6123066	1					
ANR	6124142	Identifier	NULL		6123066	0					
ANR	6124143	ExpressionStatement	"type_to_str ( b , sizeof ( b ) , & type1 , NULL )"	1173:6:28069:28109	6123066	3	True				
ANR	6124144	CallExpression	"type_to_str ( b , sizeof ( b ) , & type1 , NULL )"		6123066	0					
ANR	6124145	Callee	type_to_str		6123066	0					
ANR	6124146	Identifier	type_to_str		6123066	0					
ANR	6124147	ArgumentList	b		6123066	1					
ANR	6124148	Argument	b		6123066	0					
ANR	6124149	Identifier	b		6123066	0					
ANR	6124150	Argument	sizeof ( b )		6123066	1					
ANR	6124151	SizeofExpression	sizeof ( b )		6123066	0					
ANR	6124152	Sizeof	sizeof		6123066	0					
ANR	6124153	SizeofOperand	b		6123066	1					
ANR	6124154	Argument	& type1		6123066	2					
ANR	6124155	UnaryOperationExpression	& type1		6123066	0					
ANR	6124156	UnaryOperator	&		6123066	0					
ANR	6124157	Identifier	type1		6123066	1					
ANR	6124158	Argument	NULL		6123066	3					
ANR	6124159	Identifier	NULL		6123066	0					
ANR	6124160	CompoundStatement		219:7:5790:5822	6123066	4					
ANR	6124161	IdentifierDeclStatement	"const char * ctype = ( a == TOK_UNION ) ? ""union"" : ""struct"" ;"	1175:7:28126:28181	6123066	0	True				
ANR	6124162	IdentifierDecl	"* ctype = ( a == TOK_UNION ) ? ""union"" : ""struct"""		6123066	0					
ANR	6124163	IdentifierDeclType	const char *		6123066	0					
ANR	6124164	Identifier	ctype		6123066	1					
ANR	6124165	AssignmentExpression	"* ctype = ( a == TOK_UNION ) ? ""union"" : ""struct"""		6123066	2		=			
ANR	6124166	Identifier	ctype		6123066	0					
ANR	6124167	ConditionalExpression	"( a == TOK_UNION ) ? ""union"" : ""struct"""		6123066	1					
ANR	6124168	Condition	a == TOK_UNION		6123066	0					
ANR	6124169	EqualityExpression	a == TOK_UNION		6123066	0		==			
ANR	6124170	Identifier	a		6123066	0					
ANR	6124171	Identifier	TOK_UNION		6123066	1					
ANR	6124172	PrimaryExpression	"""union"""		6123066	1					
ANR	6124173	PrimaryExpression	"""struct"""		6123066	2					
ANR	6124174	IdentifierDeclStatement	int type_bt = type1 . t & VT_BTYPE ;	1176:7:28190:28222	6123066	1	True				
ANR	6124175	IdentifierDecl	type_bt = type1 . t & VT_BTYPE		6123066	0					
ANR	6124176	IdentifierDeclType	int		6123066	0					
ANR	6124177	Identifier	type_bt		6123066	1					
ANR	6124178	AssignmentExpression	type_bt = type1 . t & VT_BTYPE		6123066	2		=			
ANR	6124179	Identifier	type_bt		6123066	0					
ANR	6124180	BitAndExpression	type1 . t & VT_BTYPE		6123066	1		&			
ANR	6124181	MemberAccess	type1 . t		6123066	0					
ANR	6124182	Identifier	type1		6123066	0					
ANR	6124183	Identifier	t		6123066	1					
ANR	6124184	Identifier	VT_BTYPE		6123066	1					
ANR	6124185	ExpressionStatement	"tcc_appendf ( ""%s=%s\\n"" , name , ctype )"	1178:7:28289:28325	6123066	2	True				
ANR	6124186	CallExpression	"tcc_appendf ( ""%s=%s\\n"" , name , ctype )"		6123066	0					
ANR	6124187	Callee	tcc_appendf		6123066	0					
ANR	6124188	Identifier	tcc_appendf		6123066	0					
ANR	6124189	ArgumentList	"""%s=%s\\n"""		6123066	1					
ANR	6124190	Argument	"""%s=%s\\n"""		6123066	0					
ANR	6124191	PrimaryExpression	"""%s=%s\\n"""		6123066	0					
ANR	6124192	Argument	name		6123066	1					
ANR	6124193	Identifier	name		6123066	0					
ANR	6124194	Argument	ctype		6123066	2					
ANR	6124195	Identifier	ctype		6123066	0					
ANR	6124196	ExpressionStatement	"tcc_appendf ( ""[+]%s.%s=%s\\n"" , ctype , name , varstr )"	1179:7:28334:28392	6123066	3	True				
ANR	6124197	CallExpression	"tcc_appendf ( ""[+]%s.%s=%s\\n"" , ctype , name , varstr )"		6123066	0					
ANR	6124198	Callee	tcc_appendf		6123066	0					
ANR	6124199	Identifier	tcc_appendf		6123066	0					
ANR	6124200	ArgumentList	"""[+]%s.%s=%s\\n"""		6123066	1					
ANR	6124201	Argument	"""[+]%s.%s=%s\\n"""		6123066	0					
ANR	6124202	PrimaryExpression	"""[+]%s.%s=%s\\n"""		6123066	0					
ANR	6124203	Argument	ctype		6123066	1					
ANR	6124204	Identifier	ctype		6123066	0					
ANR	6124205	Argument	name		6123066	2					
ANR	6124206	Identifier	name		6123066	0					
ANR	6124207	Argument	varstr		6123066	3					
ANR	6124208	Identifier	varstr		6123066	0					
ANR	6124209	ExpressionStatement	"tcc_appendf ( ""%s.%s.%s.meta=%d\\n"" , ctype , name , varstr , type_bt )"	1181:7:28401:28473	6123066	4	True				
ANR	6124210	CallExpression	"tcc_appendf ( ""%s.%s.%s.meta=%d\\n"" , ctype , name , varstr , type_bt )"		6123066	0					
ANR	6124211	Callee	tcc_appendf		6123066	0					
ANR	6124212	Identifier	tcc_appendf		6123066	0					
ANR	6124213	ArgumentList	"""%s.%s.%s.meta=%d\\n"""		6123066	1					
ANR	6124214	Argument	"""%s.%s.%s.meta=%d\\n"""		6123066	0					
ANR	6124215	PrimaryExpression	"""%s.%s.%s.meta=%d\\n"""		6123066	0					
ANR	6124216	Argument	ctype		6123066	1					
ANR	6124217	Identifier	ctype		6123066	0					
ANR	6124218	Argument	name		6123066	2					
ANR	6124219	Identifier	name		6123066	0					
ANR	6124220	Argument	varstr		6123066	3					
ANR	6124221	Identifier	varstr		6123066	0					
ANR	6124222	Argument	type_bt		6123066	4					
ANR	6124223	Identifier	type_bt		6123066	0					
ANR	6124224	ExpressionStatement	"tcc_appendf ( ""%s.%s.%s=%s,%d,%d\\n"" , ctype , name , varstr , b , offset , arraysize )"	1184:7:28508:28594	6123066	5	True				
ANR	6124225	CallExpression	"tcc_appendf ( ""%s.%s.%s=%s,%d,%d\\n"" , ctype , name , varstr , b , offset , arraysize )"		6123066	0					
ANR	6124226	Callee	tcc_appendf		6123066	0					
ANR	6124227	Identifier	tcc_appendf		6123066	0					
ANR	6124228	ArgumentList	"""%s.%s.%s=%s,%d,%d\\n"""		6123066	1					
ANR	6124229	Argument	"""%s.%s.%s=%s,%d,%d\\n"""		6123066	0					
ANR	6124230	PrimaryExpression	"""%s.%s.%s=%s,%d,%d\\n"""		6123066	0					
ANR	6124231	Argument	ctype		6123066	1					
ANR	6124232	Identifier	ctype		6123066	0					
ANR	6124233	Argument	name		6123066	2					
ANR	6124234	Identifier	name		6123066	0					
ANR	6124235	Argument	varstr		6123066	3					
ANR	6124236	Identifier	varstr		6123066	0					
ANR	6124237	Argument	b		6123066	4					
ANR	6124238	Identifier	b		6123066	0					
ANR	6124239	Argument	offset		6123066	5					
ANR	6124240	Identifier	offset		6123066	0					
ANR	6124241	Argument	arraysize		6123066	6					
ANR	6124242	Identifier	arraysize		6123066	0					
ANR	6124243	ExpressionStatement	"eprintf ( ""%s.%s.%s.type=%s\\n"" , ctype , name , varstr , b )"	1187:7:28609:28663	6123066	6	True				
ANR	6124244	CallExpression	"eprintf ( ""%s.%s.%s.type=%s\\n"" , ctype , name , varstr , b )"		6123066	0					
ANR	6124245	Callee	eprintf		6123066	0					
ANR	6124246	Identifier	eprintf		6123066	0					
ANR	6124247	ArgumentList	"""%s.%s.%s.type=%s\\n"""		6123066	1					
ANR	6124248	Argument	"""%s.%s.%s.type=%s\\n"""		6123066	0					
ANR	6124249	PrimaryExpression	"""%s.%s.%s.type=%s\\n"""		6123066	0					
ANR	6124250	Argument	ctype		6123066	1					
ANR	6124251	Identifier	ctype		6123066	0					
ANR	6124252	Argument	name		6123066	2					
ANR	6124253	Identifier	name		6123066	0					
ANR	6124254	Argument	varstr		6123066	3					
ANR	6124255	Identifier	varstr		6123066	0					
ANR	6124256	Argument	b		6123066	4					
ANR	6124257	Identifier	b		6123066	0					
ANR	6124258	ExpressionStatement	"eprintf ( ""%s.%s.%s.offset=%d\\n"" , ctype , name , varstr , offset )"	1188:7:28672:28733	6123066	7	True				
ANR	6124259	CallExpression	"eprintf ( ""%s.%s.%s.offset=%d\\n"" , ctype , name , varstr , offset )"		6123066	0					
ANR	6124260	Callee	eprintf		6123066	0					
ANR	6124261	Identifier	eprintf		6123066	0					
ANR	6124262	ArgumentList	"""%s.%s.%s.offset=%d\\n"""		6123066	1					
ANR	6124263	Argument	"""%s.%s.%s.offset=%d\\n"""		6123066	0					
ANR	6124264	PrimaryExpression	"""%s.%s.%s.offset=%d\\n"""		6123066	0					
ANR	6124265	Argument	ctype		6123066	1					
ANR	6124266	Identifier	ctype		6123066	0					
ANR	6124267	Argument	name		6123066	2					
ANR	6124268	Identifier	name		6123066	0					
ANR	6124269	Argument	varstr		6123066	3					
ANR	6124270	Identifier	varstr		6123066	0					
ANR	6124271	Argument	offset		6123066	4					
ANR	6124272	Identifier	offset		6123066	0					
ANR	6124273	ExpressionStatement	"eprintf ( ""%s.%s.%s.array=%d\\n"" , ctype , name , varstr , arraysize )"	1189:7:28742:28805	6123066	8	True				
ANR	6124274	CallExpression	"eprintf ( ""%s.%s.%s.array=%d\\n"" , ctype , name , varstr , arraysize )"		6123066	0					
ANR	6124275	Callee	eprintf		6123066	0					
ANR	6124276	Identifier	eprintf		6123066	0					
ANR	6124277	ArgumentList	"""%s.%s.%s.array=%d\\n"""		6123066	1					
ANR	6124278	Argument	"""%s.%s.%s.array=%d\\n"""		6123066	0					
ANR	6124279	PrimaryExpression	"""%s.%s.%s.array=%d\\n"""		6123066	0					
ANR	6124280	Argument	ctype		6123066	1					
ANR	6124281	Identifier	ctype		6123066	0					
ANR	6124282	Argument	name		6123066	2					
ANR	6124283	Identifier	name		6123066	0					
ANR	6124284	Argument	varstr		6123066	3					
ANR	6124285	Identifier	varstr		6123066	0					
ANR	6124286	Argument	arraysize		6123066	4					
ANR	6124287	Identifier	arraysize		6123066	0					
ANR	6124288	ExpressionStatement	arraysize = 0	1192:7:28919:28932	6123066	9	True				
ANR	6124289	AssignmentExpression	arraysize = 0		6123066	0		=			
ANR	6124290	Identifier	arraysize		6123066	0					
ANR	6124291	PrimaryExpression	0		6123066	1					
ANR	6124292	IfStatement	if ( type1 . t & VT_BITFIELD )		6123066	10					
ANR	6124293	Condition	type1 . t & VT_BITFIELD	1193:11:28945:28965	6123066	0	True				
ANR	6124294	BitAndExpression	type1 . t & VT_BITFIELD		6123066	0		&			
ANR	6124295	MemberAccess	type1 . t		6123066	0					
ANR	6124296	Identifier	type1		6123066	0					
ANR	6124297	Identifier	t		6123066	1					
ANR	6124298	Identifier	VT_BITFIELD		6123066	1					
ANR	6124299	CompoundStatement		236:34:6568:6568	6123066	1					
ANR	6124300	ExpressionStatement	"tcc_appendf ( ""%s.%s.%s.bitfield.pos=%d\\n"" , ctype , name , varstr , ( type1 . t >> VT_STRUCT_SHIFT ) & 0x3f )"	1194:8:28978:29087	6123066	0	True				
ANR	6124301	CallExpression	"tcc_appendf ( ""%s.%s.%s.bitfield.pos=%d\\n"" , ctype , name , varstr , ( type1 . t >> VT_STRUCT_SHIFT ) & 0x3f )"		6123066	0					
ANR	6124302	Callee	tcc_appendf		6123066	0					
ANR	6124303	Identifier	tcc_appendf		6123066	0					
ANR	6124304	ArgumentList	"""%s.%s.%s.bitfield.pos=%d\\n"""		6123066	1					
ANR	6124305	Argument	"""%s.%s.%s.bitfield.pos=%d\\n"""		6123066	0					
ANR	6124306	PrimaryExpression	"""%s.%s.%s.bitfield.pos=%d\\n"""		6123066	0					
ANR	6124307	Argument	ctype		6123066	1					
ANR	6124308	Identifier	ctype		6123066	0					
ANR	6124309	Argument	name		6123066	2					
ANR	6124310	Identifier	name		6123066	0					
ANR	6124311	Argument	varstr		6123066	3					
ANR	6124312	Identifier	varstr		6123066	0					
ANR	6124313	Argument	( type1 . t >> VT_STRUCT_SHIFT ) & 0x3f		6123066	4					
ANR	6124314	BitAndExpression	( type1 . t >> VT_STRUCT_SHIFT ) & 0x3f		6123066	0		&			
ANR	6124315	ShiftExpression	type1 . t >> VT_STRUCT_SHIFT		6123066	0		>>			
ANR	6124316	MemberAccess	type1 . t		6123066	0					
ANR	6124317	Identifier	type1		6123066	0					
ANR	6124318	Identifier	t		6123066	1					
ANR	6124319	Identifier	VT_STRUCT_SHIFT		6123066	1					
ANR	6124320	PrimaryExpression	0x3f		6123066	1					
ANR	6124321	ExpressionStatement	"tcc_appendf ( ""%s.%s.%s.bitfield.size=%d\\n"" , ctype , name , varstr , ( type1 . t >> ( VT_STRUCT_SHIFT + 6 ) ) & 0x3f )"	1196:8:29097:29213	6123066	1	True				
ANR	6124322	CallExpression	"tcc_appendf ( ""%s.%s.%s.bitfield.size=%d\\n"" , ctype , name , varstr , ( type1 . t >> ( VT_STRUCT_SHIFT + 6 ) ) & 0x3f )"		6123066	0					
ANR	6124323	Callee	tcc_appendf		6123066	0					
ANR	6124324	Identifier	tcc_appendf		6123066	0					
ANR	6124325	ArgumentList	"""%s.%s.%s.bitfield.size=%d\\n"""		6123066	1					
ANR	6124326	Argument	"""%s.%s.%s.bitfield.size=%d\\n"""		6123066	0					
ANR	6124327	PrimaryExpression	"""%s.%s.%s.bitfield.size=%d\\n"""		6123066	0					
ANR	6124328	Argument	ctype		6123066	1					
ANR	6124329	Identifier	ctype		6123066	0					
ANR	6124330	Argument	name		6123066	2					
ANR	6124331	Identifier	name		6123066	0					
ANR	6124332	Argument	varstr		6123066	3					
ANR	6124333	Identifier	varstr		6123066	0					
ANR	6124334	Argument	( type1 . t >> ( VT_STRUCT_SHIFT + 6 ) ) & 0x3f		6123066	4					
ANR	6124335	BitAndExpression	( type1 . t >> ( VT_STRUCT_SHIFT + 6 ) ) & 0x3f		6123066	0		&			
ANR	6124336	ShiftExpression	type1 . t >> ( VT_STRUCT_SHIFT + 6 )		6123066	0		>>			
ANR	6124337	MemberAccess	type1 . t		6123066	0					
ANR	6124338	Identifier	type1		6123066	0					
ANR	6124339	Identifier	t		6123066	1					
ANR	6124340	AdditiveExpression	VT_STRUCT_SHIFT + 6		6123066	1		+			
ANR	6124341	Identifier	VT_STRUCT_SHIFT		6123066	0					
ANR	6124342	PrimaryExpression	6		6123066	1					
ANR	6124343	PrimaryExpression	0x3f		6123066	1					
ANR	6124344	IfStatement	if ( v == 0 && is_structured ( & type1 ) )		6123066	10					
ANR	6124345	Condition	v == 0 && is_structured ( & type1 )	1203:9:29279:29309	6123066	0	True				
ANR	6124346	AndExpression	v == 0 && is_structured ( & type1 )		6123066	0		&&			
ANR	6124347	EqualityExpression	v == 0		6123066	0		==			
ANR	6124348	Identifier	v		6123066	0					
ANR	6124349	PrimaryExpression	0		6123066	1					
ANR	6124350	CallExpression	is_structured ( & type1 )		6123066	1					
ANR	6124351	Callee	is_structured		6123066	0					
ANR	6124352	Identifier	is_structured		6123066	0					
ANR	6124353	ArgumentList	& type1		6123066	1					
ANR	6124354	Argument	& type1		6123066	0					
ANR	6124355	UnaryOperationExpression	& type1		6123066	0					
ANR	6124356	UnaryOperator	&		6123066	0					
ANR	6124357	Identifier	type1		6123066	1					
ANR	6124358	CompoundStatement		246:42:6912:6912	6123066	1					
ANR	6124359	ExpressionStatement	ass = type1 . ref	1204:6:29320:29335	6123066	0	True				
ANR	6124360	AssignmentExpression	ass = type1 . ref		6123066	0		=			
ANR	6124361	Identifier	ass		6123066	0					
ANR	6124362	MemberAccess	type1 . ref		6123066	1					
ANR	6124363	Identifier	type1		6123066	0					
ANR	6124364	Identifier	ref		6123066	1					
ANR	6124365	WhileStatement	while ( ( ass = ass -> next ) != NULL )		6123066	1					
ANR	6124366	Condition	( ass = ass -> next ) != NULL	1205:13:29350:29374	6123066	0	True				
ANR	6124367	EqualityExpression	( ass = ass -> next ) != NULL		6123066	0		!=			
ANR	6124368	AssignmentExpression	ass = ass -> next		6123066	0		=			
ANR	6124369	Identifier	ass		6123066	0					
ANR	6124370	PtrMemberAccess	ass -> next		6123066	1					
ANR	6124371	Identifier	ass		6123066	0					
ANR	6124372	Identifier	next		6123066	1					
ANR	6124373	Identifier	NULL		6123066	1					
ANR	6124374	CompoundStatement		248:40:6977:6977	6123066	1					
ANR	6124375	ExpressionStatement	"ss = sym_push ( ass -> v , & ass -> type , 0 , offset + ass -> c )"	1206:7:29386:29440	6123066	0	True				
ANR	6124376	AssignmentExpression	"ss = sym_push ( ass -> v , & ass -> type , 0 , offset + ass -> c )"		6123066	0		=			
ANR	6124377	Identifier	ss		6123066	0					
ANR	6124378	CallExpression	"sym_push ( ass -> v , & ass -> type , 0 , offset + ass -> c )"		6123066	1					
ANR	6124379	Callee	sym_push		6123066	0					
ANR	6124380	Identifier	sym_push		6123066	0					
ANR	6124381	ArgumentList	ass -> v		6123066	1					
ANR	6124382	Argument	ass -> v		6123066	0					
ANR	6124383	PtrMemberAccess	ass -> v		6123066	0					
ANR	6124384	Identifier	ass		6123066	0					
ANR	6124385	Identifier	v		6123066	1					
ANR	6124386	Argument	& ass -> type		6123066	1					
ANR	6124387	UnaryOperationExpression	& ass -> type		6123066	0					
ANR	6124388	UnaryOperator	&		6123066	0					
ANR	6124389	PtrMemberAccess	ass -> type		6123066	1					
ANR	6124390	Identifier	ass		6123066	0					
ANR	6124391	Identifier	type		6123066	1					
ANR	6124392	Argument	0		6123066	2					
ANR	6124393	PrimaryExpression	0		6123066	0					
ANR	6124394	Argument	offset + ass -> c		6123066	3					
ANR	6124395	AdditiveExpression	offset + ass -> c		6123066	0		+			
ANR	6124396	Identifier	offset		6123066	0					
ANR	6124397	PtrMemberAccess	ass -> c		6123066	1					
ANR	6124398	Identifier	ass		6123066	0					
ANR	6124399	Identifier	c		6123066	1					
ANR	6124400	IfStatement	if ( ! ss )		6123066	1					
ANR	6124401	Condition	! ss	1207:11:29453:29455	6123066	0	True				
ANR	6124402	UnaryOperationExpression	! ss		6123066	0					
ANR	6124403	UnaryOperator	!		6123066	0					
ANR	6124404	Identifier	ss		6123066	1					
ANR	6124405	CompoundStatement		250:16:7058:7058	6123066	1					
ANR	6124406	ReturnStatement	return ;	1208:8:29468:29474	6123066	0	True				
ANR	6124407	ExpressionStatement	* ps = ss	1210:7:29492:29500	6123066	2	True				
ANR	6124408	AssignmentExpression	* ps = ss		6123066	0		=			
ANR	6124409	UnaryOperationExpression	* ps		6123066	0					
ANR	6124410	UnaryOperator	*		6123066	0					
ANR	6124411	Identifier	ps		6123066	1					
ANR	6124412	Identifier	ss		6123066	1					
ANR	6124413	ExpressionStatement	ps = & ss -> next	1211:7:29509:29523	6123066	3	True				
ANR	6124414	AssignmentExpression	ps = & ss -> next		6123066	0		=			
ANR	6124415	Identifier	ps		6123066	0					
ANR	6124416	UnaryOperationExpression	& ss -> next		6123066	1					
ANR	6124417	UnaryOperator	&		6123066	0					
ANR	6124418	PtrMemberAccess	ss -> next		6123066	1					
ANR	6124419	Identifier	ss		6123066	0					
ANR	6124420	Identifier	next		6123066	1					
ANR	6124421	ElseStatement	else		6123066	0					
ANR	6124422	IfStatement	if ( v )		6123066	0					
ANR	6124423	Condition	v	1213:16:29549:29549	6123066	0	True				
ANR	6124424	Identifier	v		6123066	0					
ANR	6124425	CompoundStatement		256:19:7152:7152	6123066	1					
ANR	6124426	ExpressionStatement	"ss = sym_push ( v | SYM_FIELD , & type1 , 0 , offset )"	1214:6:29560:29608	6123066	0	True				
ANR	6124427	AssignmentExpression	"ss = sym_push ( v | SYM_FIELD , & type1 , 0 , offset )"		6123066	0		=			
ANR	6124428	Identifier	ss		6123066	0					
ANR	6124429	CallExpression	"sym_push ( v | SYM_FIELD , & type1 , 0 , offset )"		6123066	1					
ANR	6124430	Callee	sym_push		6123066	0					
ANR	6124431	Identifier	sym_push		6123066	0					
ANR	6124432	ArgumentList	v | SYM_FIELD		6123066	1					
ANR	6124433	Argument	v | SYM_FIELD		6123066	0					
ANR	6124434	InclusiveOrExpression	v | SYM_FIELD		6123066	0		|			
ANR	6124435	Identifier	v		6123066	0					
ANR	6124436	Identifier	SYM_FIELD		6123066	1					
ANR	6124437	Argument	& type1		6123066	1					
ANR	6124438	UnaryOperationExpression	& type1		6123066	0					
ANR	6124439	UnaryOperator	&		6123066	0					
ANR	6124440	Identifier	type1		6123066	1					
ANR	6124441	Argument	0		6123066	2					
ANR	6124442	PrimaryExpression	0		6123066	0					
ANR	6124443	Argument	offset		6123066	3					
ANR	6124444	Identifier	offset		6123066	0					
ANR	6124445	IfStatement	if ( ! ss )		6123066	1					
ANR	6124446	Condition	! ss	1215:10:29620:29622	6123066	0	True				
ANR	6124447	UnaryOperationExpression	! ss		6123066	0					
ANR	6124448	UnaryOperator	!		6123066	0					
ANR	6124449	Identifier	ss		6123066	1					
ANR	6124450	CompoundStatement		258:15:7225:7225	6123066	1					
ANR	6124451	ReturnStatement	return ;	1216:7:29634:29640	6123066	0	True				
ANR	6124452	ExpressionStatement	* ps = ss	1218:6:29656:29664	6123066	2	True				
ANR	6124453	AssignmentExpression	* ps = ss		6123066	0		=			
ANR	6124454	UnaryOperationExpression	* ps		6123066	0					
ANR	6124455	UnaryOperator	*		6123066	0					
ANR	6124456	Identifier	ps		6123066	1					
ANR	6124457	Identifier	ss		6123066	1					
ANR	6124458	ExpressionStatement	ps = & ss -> next	1219:6:29672:29686	6123066	3	True				
ANR	6124459	AssignmentExpression	ps = & ss -> next		6123066	0		=			
ANR	6124460	Identifier	ps		6123066	0					
ANR	6124461	UnaryOperationExpression	& ss -> next		6123066	1					
ANR	6124462	UnaryOperator	&		6123066	0					
ANR	6124463	PtrMemberAccess	ss -> next		6123066	1					
ANR	6124464	Identifier	ss		6123066	0					
ANR	6124465	Identifier	next		6123066	1					
ANR	6124466	IfStatement	if ( tok == ';' || tok == TOK_EOF )		6123066	11					
ANR	6124467	Condition	tok == ';' || tok == TOK_EOF	1221:9:29704:29731	6123066	0	True				
ANR	6124468	OrExpression	tok == ';' || tok == TOK_EOF		6123066	0		||			
ANR	6124469	EqualityExpression	tok == ';'		6123066	0		==			
ANR	6124470	Identifier	tok		6123066	0					
ANR	6124471	PrimaryExpression	';'		6123066	1					
ANR	6124472	EqualityExpression	tok == TOK_EOF		6123066	1		==			
ANR	6124473	Identifier	tok		6123066	0					
ANR	6124474	Identifier	TOK_EOF		6123066	1					
ANR	6124475	CompoundStatement		264:39:7334:7334	6123066	1					
ANR	6124476	BreakStatement	break ;	1222:6:29742:29747	6123066	0	True				
ANR	6124477	ExpressionStatement	"skip ( ',' )"	1224:5:29761:29771	6123066	12	True				
ANR	6124478	CallExpression	"skip ( ',' )"		6123066	0					
ANR	6124479	Callee	skip		6123066	0					
ANR	6124480	Identifier	skip		6123066	0					
ANR	6124481	ArgumentList	"','"		6123066	1					
ANR	6124482	Argument	"','"		6123066	0					
ANR	6124483	PrimaryExpression	"','"		6123066	0					
ANR	6124484	ExpressionStatement	skip ( ';' )	1226:4:29783:29793	6123066	2	True				
ANR	6124485	CallExpression	skip ( ';' )		6123066	0					
ANR	6124486	Callee	skip		6123066	0					
ANR	6124487	Identifier	skip		6123066	0					
ANR	6124488	ArgumentList	';'		6123066	1					
ANR	6124489	Argument	';'		6123066	0					
ANR	6124490	PrimaryExpression	';'		6123066	0					
ANR	6124491	ExpressionStatement	skip ( '}' )	1228:3:29803:29813	6123066	6	True				
ANR	6124492	CallExpression	skip ( '}' )		6123066	0					
ANR	6124493	Callee	skip		6123066	0					
ANR	6124494	Identifier	skip		6123066	0					
ANR	6124495	ArgumentList	'}'		6123066	1					
ANR	6124496	Argument	'}'		6123066	0					
ANR	6124497	PrimaryExpression	'}'		6123066	0					
ANR	6124498	ExpressionStatement	s -> c = ( c + maxalign - 1 ) & - maxalign	1230:3:29852:29890	6123066	7	True				
ANR	6124499	AssignmentExpression	s -> c = ( c + maxalign - 1 ) & - maxalign		6123066	0		=			
ANR	6124500	PtrMemberAccess	s -> c		6123066	0					
ANR	6124501	Identifier	s		6123066	0					
ANR	6124502	Identifier	c		6123066	1					
ANR	6124503	BitAndExpression	( c + maxalign - 1 ) & - maxalign		6123066	1		&			
ANR	6124504	AdditiveExpression	c + maxalign - 1		6123066	0		+			
ANR	6124505	Identifier	c		6123066	0					
ANR	6124506	AdditiveExpression	maxalign - 1		6123066	1		-			
ANR	6124507	Identifier	maxalign		6123066	0					
ANR	6124508	PrimaryExpression	1		6123066	1					
ANR	6124509	UnaryOperationExpression	- maxalign		6123066	1					
ANR	6124510	UnaryOperator	-		6123066	0					
ANR	6124511	Identifier	maxalign		6123066	1					
ANR	6124512	ExpressionStatement	s -> r = maxalign	1231:3:29895:29910	6123066	8	True				
ANR	6124513	AssignmentExpression	s -> r = maxalign		6123066	0		=			
ANR	6124514	PtrMemberAccess	s -> r		6123066	0					
ANR	6124515	Identifier	s		6123066	0					
ANR	6124516	Identifier	r		6123066	1					
ANR	6124517	Identifier	maxalign		6123066	1					
ANR	6124518	ReturnType	static void		6123066	1					
ANR	6124519	Identifier	struct_decl		6123066	2					
ANR	6124520	ParameterList	"CType * type , int u"		6123066	3					
ANR	6124521	Parameter	CType * type	958:24:22379:22389	6123066	0	True				
ANR	6124522	ParameterType	CType *		6123066	0					
ANR	6124523	Identifier	type		6123066	1					
ANR	6124524	Parameter	int u	958:37:22392:22396	6123066	1	True				
ANR	6124525	ParameterType	int		6123066	0					
ANR	6124526	Identifier	u		6123066	1					
ANR	6124527	CFGEntryNode	ENTRY		6123066		True				
ANR	6124528	CFGExitNode	EXIT		6123066		True				
ANR	6124529	Symbol	ps		6123066						
ANR	6124530	Symbol	* ss		6123066						
ANR	6124531	Symbol	VT_INT16		6123066						
ANR	6124532	Symbol	btype		6123066						
ANR	6124533	Symbol	type		6123066						
ANR	6124534	Symbol	type_size		6123066						
ANR	6124535	Symbol	type1 . ref		6123066						
ANR	6124536	Symbol	VT_STRUCT_SHIFT		6123066						
ANR	6124537	Symbol	parse_btype		6123066						
ANR	6124538	Symbol	ad		6123066						
ANR	6124539	Symbol	VT_INT8		6123066						
ANR	6124540	Symbol	ass -> c		6123066						
ANR	6124541	Symbol	struct_find		6123066						
ANR	6124542	Symbol	anon_sym		6123066						
ANR	6124543	Symbol	size		6123066						
ANR	6124544	Symbol	VT_BITFIELD		6123066						
ANR	6124545	Symbol	ss -> type . t		6123066						
ANR	6124546	Symbol	SYM_STRUCT		6123066						
ANR	6124547	Symbol	& btype		6123066						
ANR	6124548	Symbol	expr_const		6123066						
ANR	6124549	Symbol	varstr		6123066						
ANR	6124550	Symbol	s -> r		6123066						
ANR	6124551	Symbol	VT_TYPEDEF		6123066						
ANR	6124552	Symbol	maxalign		6123066						
ANR	6124553	Symbol	s -> type . t		6123066						
ANR	6124554	Symbol	& ad		6123066						
ANR	6124555	Symbol	VT_EXTERN		6123066						
ANR	6124556	Symbol	prevbt		6123066						
ANR	6124557	Symbol	tok		6123066						
ANR	6124558	Symbol	type_bt		6123066						
ANR	6124559	Symbol	bt		6123066						
ANR	6124560	Symbol	s -> c		6123066						
ANR	6124561	Symbol	TOK_UIDENT		6123066						
ANR	6124562	Symbol	ss		6123066						
ANR	6124563	Symbol	type -> ref		6123066						
ANR	6124564	Symbol	a		6123066						
ANR	6124565	Symbol	b		6123066						
ANR	6124566	Symbol	c		6123066						
ANR	6124567	Symbol	SYM_FIRST_ANOM		6123066						
ANR	6124568	Symbol	VT_INLINE		6123066						
ANR	6124569	Symbol	& ss -> next		6123066						
ANR	6124570	Symbol	ad . aligned		6123066						
ANR	6124571	Symbol	buf		6123066						
ANR	6124572	Symbol	s		6123066						
ANR	6124573	Symbol	u		6123066						
ANR	6124574	Symbol	v		6123066						
ANR	6124575	Symbol	VT_INT64		6123066						
ANR	6124576	Symbol	ass		6123066						
ANR	6124577	Symbol	get_tok_str		6123066						
ANR	6124578	Symbol	* tcc_state		6123066						
ANR	6124579	Symbol	align		6123066						
ANR	6124580	Symbol	* tcc_state -> pack_stack_ptr		6123066						
ANR	6124581	Symbol	SYM_FIELD		6123066						
ANR	6124582	Symbol	ss -> type		6123066						
ANR	6124583	Symbol	strcmp		6123066						
ANR	6124584	Symbol	VT_CONST		6123066						
ANR	6124585	Symbol	tcc_state		6123066						
ANR	6124586	Symbol	NULL		6123066						
ANR	6124587	Symbol	offset		6123066						
ANR	6124588	Symbol	TOK_IDENT		6123066						
ANR	6124589	Symbol	tcc_state -> pack_stack_ptr		6123066						
ANR	6124590	Symbol	ass -> next		6123066						
ANR	6124591	Symbol	* ps		6123066						
ANR	6124592	Symbol	type1		6123066						
ANR	6124593	Symbol	stderr		6123066						
ANR	6124594	Symbol	tcc_nerr		6123066						
ANR	6124595	Symbol	VT_BTYPE		6123066						
ANR	6124596	Symbol	VT_FUNC		6123066						
ANR	6124597	Symbol	TOK_UNION		6123066						
ANR	6124598	Symbol	ctype		6123066						
ANR	6124599	Symbol	type -> t		6123066						
ANR	6124600	Symbol	name		6123066						
ANR	6124601	Symbol	s -> type		6123066						
ANR	6124602	Symbol	VT_STATIC		6123066						
ANR	6124603	Symbol	not_structured		6123066						
ANR	6124604	Symbol	ad . packed		6123066						
ANR	6124605	Symbol	VT_BOOL		6123066						
ANR	6124606	Symbol	& int64_type		6123066						
ANR	6124607	Symbol	CType		6123066						
ANR	6124608	Symbol	TYPE_DIRECT		6123066						
ANR	6124609	Symbol	arraysize		6123066						
ANR	6124610	Symbol	TOK_STRUCT		6123066						
ANR	6124611	Symbol	ass -> v		6123066						
ANR	6124612	Symbol	* ass		6123066						
ANR	6124613	Symbol	* type		6123066						
ANR	6124614	Symbol	* * tcc_state		6123066						
ANR	6124615	Symbol	& align		6123066						
ANR	6124616	Symbol	VT_INT32		6123066						
ANR	6124617	Symbol	type1 . t		6123066						
ANR	6124618	Symbol	& type1		6123066						
ANR	6124619	Symbol	TYPE_ABSTRACT		6123066						
ANR	6124620	Symbol	& ass -> type		6123066						
ANR	6124621	Symbol	& s -> next		6123066						
ANR	6124622	Symbol	VT_ENUM		6123066						
ANR	6124623	Symbol	TOK_EOF		6123066						
ANR	6124624	Symbol	lbit_pos		6123066						
ANR	6124625	Symbol	TOK_ENUM		6123066						
ANR	6124626	Symbol	bit_size		6123066						
ANR	6124627	Symbol	is_structured		6123066						
ANR	6124628	Symbol	bsize		6123066						
ANR	6124629	Symbol	sym_push		6123066						
ANR	6124630	Symbol	& v		6123066						
ANR	6124631	Symbol	bit_pos		6123066						
ANR	6124632	Symbol	* s		6123066						
ANR	6124633	Function	parse_btype	1239:0:30011:35073							
ANR	6124634	FunctionDef	"parse_btype (CType * type , AttributeDef * ad)"		6124633	0					
ANR	6124635	CompoundStatement		1239:54:30065:35073	6124633	0					
ANR	6124636	IdentifierDeclStatement	"int t , u , type_found , typespec_found , typedef_found ;"	1240:1:30068:30119	6124633	0	True				
ANR	6124637	IdentifierDecl	t		6124633	0					
ANR	6124638	IdentifierDeclType	int		6124633	0					
ANR	6124639	Identifier	t		6124633	1					
ANR	6124640	IdentifierDecl	u		6124633	1					
ANR	6124641	IdentifierDeclType	int		6124633	0					
ANR	6124642	Identifier	u		6124633	1					
ANR	6124643	IdentifierDecl	type_found		6124633	2					
ANR	6124644	IdentifierDeclType	int		6124633	0					
ANR	6124645	Identifier	type_found		6124633	1					
ANR	6124646	IdentifierDecl	typespec_found		6124633	3					
ANR	6124647	IdentifierDeclType	int		6124633	0					
ANR	6124648	Identifier	typespec_found		6124633	1					
ANR	6124649	IdentifierDecl	typedef_found		6124633	4					
ANR	6124650	IdentifierDeclType	int		6124633	0					
ANR	6124651	Identifier	typedef_found		6124633	1					
ANR	6124652	IdentifierDeclStatement	Sym * s ;	1241:1:30122:30128	6124633	1	True				
ANR	6124653	IdentifierDecl	* s		6124633	0					
ANR	6124654	IdentifierDeclType	Sym *		6124633	0					
ANR	6124655	Identifier	s		6124633	1					
ANR	6124656	ExpressionStatement	"STACK_NEW0 ( CType , type1 )"	1242:1:30131:30156	6124633	2	True				
ANR	6124657	CallExpression	"STACK_NEW0 ( CType , type1 )"		6124633	0					
ANR	6124658	Callee	STACK_NEW0		6124633	0					
ANR	6124659	Identifier	STACK_NEW0		6124633	0					
ANR	6124660	ArgumentList	CType		6124633	1					
ANR	6124661	Argument	CType		6124633	0					
ANR	6124662	Identifier	CType		6124633	0					
ANR	6124663	Argument	type1		6124633	1					
ANR	6124664	Identifier	type1		6124633	0					
ANR	6124665	ExpressionStatement	"memset ( ad , 0 , sizeof ( AttributeDef ) )"	1244:1:30160:30196	6124633	3	True				
ANR	6124666	CallExpression	"memset ( ad , 0 , sizeof ( AttributeDef ) )"		6124633	0					
ANR	6124667	Callee	memset		6124633	0					
ANR	6124668	Identifier	memset		6124633	0					
ANR	6124669	ArgumentList	ad		6124633	1					
ANR	6124670	Argument	ad		6124633	0					
ANR	6124671	Identifier	ad		6124633	0					
ANR	6124672	Argument	0		6124633	1					
ANR	6124673	PrimaryExpression	0		6124633	0					
ANR	6124674	Argument	sizeof ( AttributeDef )		6124633	2					
ANR	6124675	SizeofExpression	sizeof ( AttributeDef )		6124633	0					
ANR	6124676	Sizeof	sizeof		6124633	0					
ANR	6124677	SizeofOperand	AttributeDef		6124633	1					
ANR	6124678	ExpressionStatement	type_found = 0	1245:1:30199:30213	6124633	4	True				
ANR	6124679	AssignmentExpression	type_found = 0		6124633	0		=			
ANR	6124680	Identifier	type_found		6124633	0					
ANR	6124681	PrimaryExpression	0		6124633	1					
ANR	6124682	ExpressionStatement	typespec_found = 0	1246:1:30216:30234	6124633	5	True				
ANR	6124683	AssignmentExpression	typespec_found = 0		6124633	0		=			
ANR	6124684	Identifier	typespec_found		6124633	0					
ANR	6124685	PrimaryExpression	0		6124633	1					
ANR	6124686	ExpressionStatement	typedef_found = 0	1247:1:30237:30254	6124633	6	True				
ANR	6124687	AssignmentExpression	typedef_found = 0		6124633	0		=			
ANR	6124688	Identifier	typedef_found		6124633	0					
ANR	6124689	PrimaryExpression	0		6124633	1					
ANR	6124690	ExpressionStatement	t = 0	1249:1:30305:30310	6124633	7	True				
ANR	6124691	AssignmentExpression	t = 0		6124633	0		=			
ANR	6124692	Identifier	t		6124633	0					
ANR	6124693	PrimaryExpression	0		6124633	1					
ANR	6124694	WhileStatement	while ( tcc_nerr ( ) == 0 )		6124633	8					
ANR	6124695	Condition	tcc_nerr ( ) == 0	1250:8:30344:30359	6124633	0	True				
ANR	6124696	EqualityExpression	tcc_nerr ( ) == 0		6124633	0		==			
ANR	6124697	CallExpression	tcc_nerr ( )		6124633	0					
ANR	6124698	Callee	tcc_nerr		6124633	0					
ANR	6124699	Identifier	tcc_nerr		6124633	0					
ANR	6124700	ArgumentList			6124633	1					
ANR	6124701	PrimaryExpression	0		6124633	1					
ANR	6124702	CompoundStatement		12:26:296:296	6124633	1					
ANR	6124703	SwitchStatement	switch ( tok )		6124633	0					
ANR	6124704	Condition	tok	1251:10:30374:30376	6124633	0	True				
ANR	6124705	Identifier	tok		6124633	0					
ANR	6124706	CompoundStatement		13:15:313:313	6124633	1					
ANR	6124707	Label	case TOK_EXTENSION :	1252:2:30383:30401	6124633	0	True				
ANR	6124708	Identifier	TOK_EXTENSION		6124633	0					
ANR	6124709	ExpressionStatement	next ( )	1254:3:30453:30460	6124633	1	True				
ANR	6124710	CallExpression	next ( )		6124633	0					
ANR	6124711	Callee	next		6124633	0					
ANR	6124712	Identifier	next		6124633	0					
ANR	6124713	ArgumentList			6124633	1					
ANR	6124714	ContinueStatement	continue ;	1255:3:30465:30473	6124633	2	True				
ANR	6124715	Label	case TOK_UINT8 :	1262:2:30683:30697	6124633	3	True				
ANR	6124716	Identifier	TOK_UINT8		6124633	0					
ANR	6124717	ExpressionStatement	t |= VT_UNSIGNED	1263:3:30702:30718	6124633	4	True				
ANR	6124718	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6124719	Identifier	t		6124633	0					
ANR	6124720	Identifier	VT_UNSIGNED		6124633	1					
ANR	6124721	Label	case TOK_INT8 :	1264:2:30722:30735	6124633	5	True				
ANR	6124722	Identifier	TOK_INT8		6124633	0					
ANR	6124723	ExpressionStatement	u = VT_INT8	1265:3:30740:30751	6124633	6	True				
ANR	6124724	AssignmentExpression	u = VT_INT8		6124633	0		=			
ANR	6124725	Identifier	u		6124633	0					
ANR	6124726	Identifier	VT_INT8		6124633	1					
ANR	6124727	GotoStatement	goto basic_type ;	1266:3:30756:30771	6124633	7	True				
ANR	6124728	Identifier	basic_type		6124633	0					
ANR	6124729	Label	case TOK_CHAR :	1267:2:30775:30788	6124633	8	True				
ANR	6124730	Identifier	TOK_CHAR		6124633	0					
ANR	6124731	ExpressionStatement	u = VT_INT8	1268:3:30793:30804	6124633	9	True				
ANR	6124732	AssignmentExpression	u = VT_INT8		6124633	0		=			
ANR	6124733	Identifier	u		6124633	0					
ANR	6124734	Identifier	VT_INT8		6124633	1					
ANR	6124735	ExpressionStatement	t |= VT_CHAR	1270:3:30854:30866	6124633	10	True				
ANR	6124736	AssignmentExpression	t |= VT_CHAR		6124633	0		|=			
ANR	6124737	Identifier	t		6124633	0					
ANR	6124738	Identifier	VT_CHAR		6124633	1					
ANR	6124739	Label	basic_type :	1271:0:30868:30878	6124633	11	True				
ANR	6124740	Identifier	basic_type		6124633	0					
ANR	6124741	ExpressionStatement	next ( )	1272:3:30883:30890	6124633	12	True				
ANR	6124742	CallExpression	next ( )		6124633	0					
ANR	6124743	Callee	next		6124633	0					
ANR	6124744	Identifier	next		6124633	0					
ANR	6124745	ArgumentList			6124633	1					
ANR	6124746	Label	basic_type1 :	1273:0:30892:30903	6124633	13	True				
ANR	6124747	Identifier	basic_type1		6124633	0					
ANR	6124748	IfStatement	if ( ( t & VT_BTYPE ) != 0 )		6124633	14					
ANR	6124749	Condition	( t & VT_BTYPE ) != 0	1274:7:30912:30930	6124633	0	True				
ANR	6124750	EqualityExpression	( t & VT_BTYPE ) != 0		6124633	0		!=			
ANR	6124751	BitAndExpression	t & VT_BTYPE		6124633	0		&			
ANR	6124752	Identifier	t		6124633	0					
ANR	6124753	Identifier	VT_BTYPE		6124633	1					
ANR	6124754	PrimaryExpression	0		6124633	1					
ANR	6124755	CompoundStatement		36:28:867:867	6124633	1					
ANR	6124756	ExpressionStatement	"tcc_error ( ""too many basic types"" )"	1275:4:30939:30973	6124633	0	True				
ANR	6124757	CallExpression	"tcc_error ( ""too many basic types"" )"		6124633	0					
ANR	6124758	Callee	tcc_error		6124633	0					
ANR	6124759	Identifier	tcc_error		6124633	0					
ANR	6124760	ArgumentList	"""too many basic types"""		6124633	1					
ANR	6124761	Argument	"""too many basic types"""		6124633	0					
ANR	6124762	PrimaryExpression	"""too many basic types"""		6124633	0					
ANR	6124763	ReturnStatement	return 0 ;	1276:4:30979:30987	6124633	1	True				
ANR	6124764	PrimaryExpression	0		6124633	0					
ANR	6124765	ExpressionStatement	t |= u	1278:3:30997:31003	6124633	15	True				
ANR	6124766	AssignmentExpression	t |= u		6124633	0		|=			
ANR	6124767	Identifier	t		6124633	0					
ANR	6124768	Identifier	u		6124633	1					
ANR	6124769	ExpressionStatement	typespec_found = 1	1279:3:31008:31026	6124633	16	True				
ANR	6124770	AssignmentExpression	typespec_found = 1		6124633	0		=			
ANR	6124771	Identifier	typespec_found		6124633	0					
ANR	6124772	PrimaryExpression	1		6124633	1					
ANR	6124773	BreakStatement	break ;	1280:3:31031:31036	6124633	17	True				
ANR	6124774	Label	case TOK_VOID :	1283:2:31055:31068	6124633	18	True				
ANR	6124775	Identifier	TOK_VOID		6124633	0					
ANR	6124776	ExpressionStatement	u = VT_VOID	1284:3:31073:31084	6124633	19	True				
ANR	6124777	AssignmentExpression	u = VT_VOID		6124633	0		=			
ANR	6124778	Identifier	u		6124633	0					
ANR	6124779	Identifier	VT_VOID		6124633	1					
ANR	6124780	GotoStatement	goto basic_type ;	1285:3:31089:31104	6124633	20	True				
ANR	6124781	Identifier	basic_type		6124633	0					
ANR	6124782	Label	case TOK_UINT16 :	1288:2:31142:31157	6124633	21	True				
ANR	6124783	Identifier	TOK_UINT16		6124633	0					
ANR	6124784	ExpressionStatement	t |= VT_UNSIGNED	1289:3:31162:31178	6124633	22	True				
ANR	6124785	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6124786	Identifier	t		6124633	0					
ANR	6124787	Identifier	VT_UNSIGNED		6124633	1					
ANR	6124788	Label	case TOK_INT16 :	1290:2:31182:31196	6124633	23	True				
ANR	6124789	Identifier	TOK_INT16		6124633	0					
ANR	6124790	Label	case TOK_SHORT :	1291:2:31200:31214	6124633	24	True				
ANR	6124791	Identifier	TOK_SHORT		6124633	0					
ANR	6124792	ExpressionStatement	u = VT_INT16	1292:3:31219:31231	6124633	25	True				
ANR	6124793	AssignmentExpression	u = VT_INT16		6124633	0		=			
ANR	6124794	Identifier	u		6124633	0					
ANR	6124795	Identifier	VT_INT16		6124633	1					
ANR	6124796	GotoStatement	goto basic_type ;	1293:3:31236:31251	6124633	26	True				
ANR	6124797	Identifier	basic_type		6124633	0					
ANR	6124798	Label	case TOK_UINT32 :	1296:2:31287:31302	6124633	27	True				
ANR	6124799	Identifier	TOK_UINT32		6124633	0					
ANR	6124800	ExpressionStatement	t |= VT_UNSIGNED	1297:3:31307:31323	6124633	28	True				
ANR	6124801	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6124802	Identifier	t		6124633	0					
ANR	6124803	Identifier	VT_UNSIGNED		6124633	1					
ANR	6124804	Label	case TOK_INT32 :	1298:2:31327:31341	6124633	29	True				
ANR	6124805	Identifier	TOK_INT32		6124633	0					
ANR	6124806	ExpressionStatement	u = VT_INT32	1299:3:31346:31358	6124633	30	True				
ANR	6124807	AssignmentExpression	u = VT_INT32		6124633	0		=			
ANR	6124808	Identifier	u		6124633	0					
ANR	6124809	Identifier	VT_INT32		6124633	1					
ANR	6124810	GotoStatement	goto basic_type ;	1300:3:31363:31378	6124633	31	True				
ANR	6124811	Identifier	basic_type		6124633	0					
ANR	6124812	Label	case TOK_INT :	1301:2:31382:31394	6124633	32	True				
ANR	6124813	Identifier	TOK_INT		6124633	0					
ANR	6124814	ExpressionStatement	next ( )	1302:3:31399:31406	6124633	33	True				
ANR	6124815	CallExpression	next ( )		6124633	0					
ANR	6124816	Callee	next		6124633	0					
ANR	6124817	Identifier	next		6124633	0					
ANR	6124818	ArgumentList			6124633	1					
ANR	6124819	ExpressionStatement	typespec_found = 1	1303:3:31411:31429	6124633	34	True				
ANR	6124820	AssignmentExpression	typespec_found = 1		6124633	0		=			
ANR	6124821	Identifier	typespec_found		6124633	0					
ANR	6124822	PrimaryExpression	1		6124633	1					
ANR	6124823	BreakStatement	break ;	1304:3:31434:31439	6124633	35	True				
ANR	6124824	Label	case TOK_UINT64 :	1307:2:31487:31502	6124633	36	True				
ANR	6124825	Identifier	TOK_UINT64		6124633	0					
ANR	6124826	ExpressionStatement	t |= VT_UNSIGNED	1308:3:31507:31523	6124633	37	True				
ANR	6124827	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6124828	Identifier	t		6124633	0					
ANR	6124829	Identifier	VT_UNSIGNED		6124633	1					
ANR	6124830	Label	case TOK_INT64 :	1309:2:31527:31541	6124633	38	True				
ANR	6124831	Identifier	TOK_INT64		6124633	0					
ANR	6124832	ExpressionStatement	u = VT_INT64	1310:3:31546:31558	6124633	39	True				
ANR	6124833	AssignmentExpression	u = VT_INT64		6124633	0		=			
ANR	6124834	Identifier	u		6124633	0					
ANR	6124835	Identifier	VT_INT64		6124633	1					
ANR	6124836	GotoStatement	goto basic_type ;	1311:3:31563:31578	6124633	40	True				
ANR	6124837	Identifier	basic_type		6124633	0					
ANR	6124838	Label	case TOK_LONG :	1312:2:31582:31595	6124633	41	True				
ANR	6124839	Identifier	TOK_LONG		6124633	0					
ANR	6124840	ExpressionStatement	next ( )	1313:3:31600:31607	6124633	42	True				
ANR	6124841	CallExpression	next ( )		6124633	0					
ANR	6124842	Callee	next		6124633	0					
ANR	6124843	Identifier	next		6124633	0					
ANR	6124844	ArgumentList			6124633	1					
ANR	6124845	IfStatement	if ( ( t & VT_BTYPE ) == VT_DOUBLE )		6124633	43					
ANR	6124846	Condition	( t & VT_BTYPE ) == VT_DOUBLE	1315:7:31670:31696	6124633	0	True				
ANR	6124847	EqualityExpression	( t & VT_BTYPE ) == VT_DOUBLE		6124633	0		==			
ANR	6124848	BitAndExpression	t & VT_BTYPE		6124633	0		&			
ANR	6124849	Identifier	t		6124633	0					
ANR	6124850	Identifier	VT_BTYPE		6124633	1					
ANR	6124851	Identifier	VT_DOUBLE		6124633	1					
ANR	6124852	CompoundStatement		77:36:1633:1633	6124633	1					
ANR	6124853	IfStatement	"if ( strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6124633	0					
ANR	6124854	Condition	"strncmp ( tcc_state -> os , ""windows"" , 7 )"	1316:8:31709:31745	6124633	0	True				
ANR	6124855	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6124633	0					
ANR	6124856	Callee	strncmp		6124633	0					
ANR	6124857	Identifier	strncmp		6124633	0					
ANR	6124858	ArgumentList	tcc_state -> os		6124633	1					
ANR	6124859	Argument	tcc_state -> os		6124633	0					
ANR	6124860	PtrMemberAccess	tcc_state -> os		6124633	0					
ANR	6124861	Identifier	tcc_state		6124633	0					
ANR	6124862	Identifier	os		6124633	1					
ANR	6124863	Argument	"""windows"""		6124633	1					
ANR	6124864	PrimaryExpression	"""windows"""		6124633	0					
ANR	6124865	Argument	7		6124633	2					
ANR	6124866	PrimaryExpression	7		6124633	0					
ANR	6124867	CompoundStatement		78:47:1682:1682	6124633	1					
ANR	6124868	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_LDOUBLE	1317:5:31755:31787	6124633	0	True				
ANR	6124869	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_LDOUBLE		6124633	0		=			
ANR	6124870	Identifier	t		6124633	0					
ANR	6124871	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_LDOUBLE		6124633	1		|			
ANR	6124872	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6124873	Identifier	t		6124633	0					
ANR	6124874	Identifier	~VT_BTYPE		6124633	1					
ANR	6124875	Identifier	VT_LDOUBLE		6124633	1					
ANR	6124876	ElseStatement	else		6124633	0					
ANR	6124877	IfStatement	if ( ( t & VT_BTYPE ) == VT_LONG )		6124633	0					
ANR	6124878	Condition	( t & VT_BTYPE ) == VT_LONG	1319:14:31809:31833	6124633	0	True				
ANR	6124879	EqualityExpression	( t & VT_BTYPE ) == VT_LONG		6124633	0		==			
ANR	6124880	BitAndExpression	t & VT_BTYPE		6124633	0		&			
ANR	6124881	Identifier	t		6124633	0					
ANR	6124882	Identifier	VT_BTYPE		6124633	1					
ANR	6124883	Identifier	VT_LONG		6124633	1					
ANR	6124884	CompoundStatement		81:41:1770:1770	6124633	1					
ANR	6124885	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_INT64	1320:4:31842:31872	6124633	0	True				
ANR	6124886	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_INT64		6124633	0		=			
ANR	6124887	Identifier	t		6124633	0					
ANR	6124888	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_INT64		6124633	1		|			
ANR	6124889	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6124890	Identifier	t		6124633	0					
ANR	6124891	Identifier	~VT_BTYPE		6124633	1					
ANR	6124892	Identifier	VT_INT64		6124633	1					
ANR	6124893	ElseStatement	else		6124633	0					
ANR	6124894	CompoundStatement		83:10:1818:1818	6124633	0					
ANR	6124895	ExpressionStatement	u = VT_LONG	1322:4:31890:31901	6124633	0	True				
ANR	6124896	AssignmentExpression	u = VT_LONG		6124633	0		=			
ANR	6124897	Identifier	u		6124633	0					
ANR	6124898	Identifier	VT_LONG		6124633	1					
ANR	6124899	GotoStatement	goto basic_type1 ;	1323:4:31907:31923	6124633	1	True				
ANR	6124900	Identifier	basic_type1		6124633	0					
ANR	6124901	BreakStatement	break ;	1325:3:31933:31938	6124633	44	True				
ANR	6124902	Label	case TOK_BOOL :	1326:2:31942:31955	6124633	45	True				
ANR	6124903	Identifier	TOK_BOOL		6124633	0					
ANR	6124904	Label	case TOK_STDBOOL :	1327:2:31959:31975	6124633	46	True				
ANR	6124905	Identifier	TOK_STDBOOL		6124633	0					
ANR	6124906	ExpressionStatement	u = VT_BOOL	1328:3:31980:31991	6124633	47	True				
ANR	6124907	AssignmentExpression	u = VT_BOOL		6124633	0		=			
ANR	6124908	Identifier	u		6124633	0					
ANR	6124909	Identifier	VT_BOOL		6124633	1					
ANR	6124910	GotoStatement	goto basic_type ;	1329:3:31996:32011	6124633	48	True				
ANR	6124911	Identifier	basic_type		6124633	0					
ANR	6124912	Label	case TOK_FLOAT :	1330:2:32015:32029	6124633	49	True				
ANR	6124913	Identifier	TOK_FLOAT		6124633	0					
ANR	6124914	ExpressionStatement	u = VT_FLOAT	1331:3:32034:32046	6124633	50	True				
ANR	6124915	AssignmentExpression	u = VT_FLOAT		6124633	0		=			
ANR	6124916	Identifier	u		6124633	0					
ANR	6124917	Identifier	VT_FLOAT		6124633	1					
ANR	6124918	GotoStatement	goto basic_type ;	1332:3:32051:32066	6124633	51	True				
ANR	6124919	Identifier	basic_type		6124633	0					
ANR	6124920	Label	case TOK_DOUBLE :	1333:2:32070:32085	6124633	52	True				
ANR	6124921	Identifier	TOK_DOUBLE		6124633	0					
ANR	6124922	ExpressionStatement	next ( )	1334:3:32090:32097	6124633	53	True				
ANR	6124923	CallExpression	next ( )		6124633	0					
ANR	6124924	Callee	next		6124633	0					
ANR	6124925	Identifier	next		6124633	0					
ANR	6124926	ArgumentList			6124633	1					
ANR	6124927	IfStatement	if ( ( t & VT_BTYPE ) == VT_LONG )		6124633	54					
ANR	6124928	Condition	( t & VT_BTYPE ) == VT_LONG	1335:7:32106:32130	6124633	0	True				
ANR	6124929	EqualityExpression	( t & VT_BTYPE ) == VT_LONG		6124633	0		==			
ANR	6124930	BitAndExpression	t & VT_BTYPE		6124633	0		&			
ANR	6124931	Identifier	t		6124633	0					
ANR	6124932	Identifier	VT_BTYPE		6124633	1					
ANR	6124933	Identifier	VT_LONG		6124633	1					
ANR	6124934	CompoundStatement		97:34:2067:2067	6124633	1					
ANR	6124935	IfStatement	"if ( ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6124633	0					
ANR	6124936	Condition	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"	1336:8:32143:32180	6124633	0	True				
ANR	6124937	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6124633	0					
ANR	6124938	UnaryOperator	!		6124633	0					
ANR	6124939	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6124633	1					
ANR	6124940	Callee	strncmp		6124633	0					
ANR	6124941	Identifier	strncmp		6124633	0					
ANR	6124942	ArgumentList	tcc_state -> os		6124633	1					
ANR	6124943	Argument	tcc_state -> os		6124633	0					
ANR	6124944	PtrMemberAccess	tcc_state -> os		6124633	0					
ANR	6124945	Identifier	tcc_state		6124633	0					
ANR	6124946	Identifier	os		6124633	1					
ANR	6124947	Argument	"""windows"""		6124633	1					
ANR	6124948	PrimaryExpression	"""windows"""		6124633	0					
ANR	6124949	Argument	7		6124633	2					
ANR	6124950	PrimaryExpression	7		6124633	0					
ANR	6124951	CompoundStatement		98:48:2117:2117	6124633	1					
ANR	6124952	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_DOUBLE	1337:5:32190:32221	6124633	0	True				
ANR	6124953	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_DOUBLE		6124633	0		=			
ANR	6124954	Identifier	t		6124633	0					
ANR	6124955	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_DOUBLE		6124633	1		|			
ANR	6124956	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6124957	Identifier	t		6124633	0					
ANR	6124958	Identifier	~VT_BTYPE		6124633	1					
ANR	6124959	Identifier	VT_DOUBLE		6124633	1					
ANR	6124960	ElseStatement	else		6124633	0					
ANR	6124961	CompoundStatement		100:11:2168:2168	6124633	0					
ANR	6124962	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_LDOUBLE	1339:5:32241:32273	6124633	0	True				
ANR	6124963	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_LDOUBLE		6124633	0		=			
ANR	6124964	Identifier	t		6124633	0					
ANR	6124965	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_LDOUBLE		6124633	1		|			
ANR	6124966	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6124967	Identifier	t		6124633	0					
ANR	6124968	Identifier	~VT_BTYPE		6124633	1					
ANR	6124969	Identifier	VT_LDOUBLE		6124633	1					
ANR	6124970	ElseStatement	else		6124633	0					
ANR	6124971	CompoundStatement		103:10:2225:2225	6124633	0					
ANR	6124972	ExpressionStatement	u = VT_DOUBLE	1342:4:32297:32310	6124633	0	True				
ANR	6124973	AssignmentExpression	u = VT_DOUBLE		6124633	0		=			
ANR	6124974	Identifier	u		6124633	0					
ANR	6124975	Identifier	VT_DOUBLE		6124633	1					
ANR	6124976	GotoStatement	goto basic_type1 ;	1343:4:32316:32332	6124633	1	True				
ANR	6124977	Identifier	basic_type1		6124633	0					
ANR	6124978	BreakStatement	break ;	1345:3:32342:32347	6124633	55	True				
ANR	6124979	Label	case TOK_ENUM :	1346:2:32351:32364	6124633	56	True				
ANR	6124980	Identifier	TOK_ENUM		6124633	0					
ANR	6124981	ExpressionStatement	"struct_decl ( & type1 , VT_ENUM )"	1347:3:32369:32398	6124633	57	True				
ANR	6124982	CallExpression	"struct_decl ( & type1 , VT_ENUM )"		6124633	0					
ANR	6124983	Callee	struct_decl		6124633	0					
ANR	6124984	Identifier	struct_decl		6124633	0					
ANR	6124985	ArgumentList	& type1		6124633	1					
ANR	6124986	Argument	& type1		6124633	0					
ANR	6124987	UnaryOperationExpression	& type1		6124633	0					
ANR	6124988	UnaryOperator	&		6124633	0					
ANR	6124989	Identifier	type1		6124633	1					
ANR	6124990	Argument	VT_ENUM		6124633	1					
ANR	6124991	Identifier	VT_ENUM		6124633	0					
ANR	6124992	Label	basic_type2 :	1348:0:32400:32411	6124633	58	True				
ANR	6124993	Identifier	basic_type2		6124633	0					
ANR	6124994	ExpressionStatement	u = type1 . t	1349:3:32416:32427	6124633	59	True				
ANR	6124995	AssignmentExpression	u = type1 . t		6124633	0		=			
ANR	6124996	Identifier	u		6124633	0					
ANR	6124997	MemberAccess	type1 . t		6124633	1					
ANR	6124998	Identifier	type1		6124633	0					
ANR	6124999	Identifier	t		6124633	1					
ANR	6125000	ExpressionStatement	type -> ref = type1 . ref	1350:3:32432:32453	6124633	60	True				
ANR	6125001	AssignmentExpression	type -> ref = type1 . ref		6124633	0		=			
ANR	6125002	PtrMemberAccess	type -> ref		6124633	0					
ANR	6125003	Identifier	type		6124633	0					
ANR	6125004	Identifier	ref		6124633	1					
ANR	6125005	MemberAccess	type1 . ref		6124633	1					
ANR	6125006	Identifier	type1		6124633	0					
ANR	6125007	Identifier	ref		6124633	1					
ANR	6125008	GotoStatement	goto basic_type1 ;	1351:3:32458:32474	6124633	61	True				
ANR	6125009	Identifier	basic_type1		6124633	0					
ANR	6125010	Label	case TOK_STRUCT :	1352:2:32478:32493	6124633	62	True				
ANR	6125011	Identifier	TOK_STRUCT		6124633	0					
ANR	6125012	ExpressionStatement	"struct_decl ( & type1 , VT_STRUCT )"	1353:3:32498:32529	6124633	63	True				
ANR	6125013	CallExpression	"struct_decl ( & type1 , VT_STRUCT )"		6124633	0					
ANR	6125014	Callee	struct_decl		6124633	0					
ANR	6125015	Identifier	struct_decl		6124633	0					
ANR	6125016	ArgumentList	& type1		6124633	1					
ANR	6125017	Argument	& type1		6124633	0					
ANR	6125018	UnaryOperationExpression	& type1		6124633	0					
ANR	6125019	UnaryOperator	&		6124633	0					
ANR	6125020	Identifier	type1		6124633	1					
ANR	6125021	Argument	VT_STRUCT		6124633	1					
ANR	6125022	Identifier	VT_STRUCT		6124633	0					
ANR	6125023	GotoStatement	goto basic_type2 ;	1354:3:32534:32550	6124633	64	True				
ANR	6125024	Identifier	basic_type2		6124633	0					
ANR	6125025	Label	case TOK_UNION :	1355:2:32554:32568	6124633	65	True				
ANR	6125026	Identifier	TOK_UNION		6124633	0					
ANR	6125027	ExpressionStatement	"struct_decl ( & type1 , VT_UNION )"	1356:3:32573:32603	6124633	66	True				
ANR	6125028	CallExpression	"struct_decl ( & type1 , VT_UNION )"		6124633	0					
ANR	6125029	Callee	struct_decl		6124633	0					
ANR	6125030	Identifier	struct_decl		6124633	0					
ANR	6125031	ArgumentList	& type1		6124633	1					
ANR	6125032	Argument	& type1		6124633	0					
ANR	6125033	UnaryOperationExpression	& type1		6124633	0					
ANR	6125034	UnaryOperator	&		6124633	0					
ANR	6125035	Identifier	type1		6124633	1					
ANR	6125036	Argument	VT_UNION		6124633	1					
ANR	6125037	Identifier	VT_UNION		6124633	0					
ANR	6125038	GotoStatement	goto basic_type2 ;	1357:3:32608:32624	6124633	67	True				
ANR	6125039	Identifier	basic_type2		6124633	0					
ANR	6125040	Label	case TOK_CONST1 :	1360:2:32652:32667	6124633	68	True				
ANR	6125041	Identifier	TOK_CONST1		6124633	0					
ANR	6125042	Label	case TOK_CONST2 :	1361:2:32671:32686	6124633	69	True				
ANR	6125043	Identifier	TOK_CONST2		6124633	0					
ANR	6125044	Label	case TOK_CONST3 :	1362:2:32690:32705	6124633	70	True				
ANR	6125045	Identifier	TOK_CONST3		6124633	0					
ANR	6125046	ExpressionStatement	t |= VT_CONSTANT	1363:3:32710:32726	6124633	71	True				
ANR	6125047	AssignmentExpression	t |= VT_CONSTANT		6124633	0		|=			
ANR	6125048	Identifier	t		6124633	0					
ANR	6125049	Identifier	VT_CONSTANT		6124633	1					
ANR	6125050	ExpressionStatement	next ( )	1364:3:32731:32738	6124633	72	True				
ANR	6125051	CallExpression	next ( )		6124633	0					
ANR	6125052	Callee	next		6124633	0					
ANR	6125053	Identifier	next		6124633	0					
ANR	6125054	ArgumentList			6124633	1					
ANR	6125055	BreakStatement	break ;	1365:3:32743:32748	6124633	73	True				
ANR	6125056	Label	case TOK_VOLATILE1 :	1366:2:32752:32770	6124633	74	True				
ANR	6125057	Identifier	TOK_VOLATILE1		6124633	0					
ANR	6125058	Label	case TOK_VOLATILE2 :	1367:2:32774:32792	6124633	75	True				
ANR	6125059	Identifier	TOK_VOLATILE2		6124633	0					
ANR	6125060	Label	case TOK_VOLATILE3 :	1368:2:32796:32814	6124633	76	True				
ANR	6125061	Identifier	TOK_VOLATILE3		6124633	0					
ANR	6125062	ExpressionStatement	t |= VT_VOLATILE	1369:3:32819:32835	6124633	77	True				
ANR	6125063	AssignmentExpression	t |= VT_VOLATILE		6124633	0		|=			
ANR	6125064	Identifier	t		6124633	0					
ANR	6125065	Identifier	VT_VOLATILE		6124633	1					
ANR	6125066	ExpressionStatement	next ( )	1370:3:32840:32847	6124633	78	True				
ANR	6125067	CallExpression	next ( )		6124633	0					
ANR	6125068	Callee	next		6124633	0					
ANR	6125069	Identifier	next		6124633	0					
ANR	6125070	ArgumentList			6124633	1					
ANR	6125071	BreakStatement	break ;	1371:3:32852:32857	6124633	79	True				
ANR	6125072	Label	case TOK_SIGNED1 :	1372:2:32861:32877	6124633	80	True				
ANR	6125073	Identifier	TOK_SIGNED1		6124633	0					
ANR	6125074	Label	case TOK_SIGNED2 :	1373:2:32881:32897	6124633	81	True				
ANR	6125075	Identifier	TOK_SIGNED2		6124633	0					
ANR	6125076	Label	case TOK_SIGNED3 :	1374:2:32901:32917	6124633	82	True				
ANR	6125077	Identifier	TOK_SIGNED3		6124633	0					
ANR	6125078	ExpressionStatement	typespec_found = 1	1375:3:32922:32940	6124633	83	True				
ANR	6125079	AssignmentExpression	typespec_found = 1		6124633	0		=			
ANR	6125080	Identifier	typespec_found		6124633	0					
ANR	6125081	PrimaryExpression	1		6124633	1					
ANR	6125082	ExpressionStatement	t |= VT_SIGNED	1376:3:32945:32959	6124633	84	True				
ANR	6125083	AssignmentExpression	t |= VT_SIGNED		6124633	0		|=			
ANR	6125084	Identifier	t		6124633	0					
ANR	6125085	Identifier	VT_SIGNED		6124633	1					
ANR	6125086	ExpressionStatement	next ( )	1377:3:32964:32971	6124633	85	True				
ANR	6125087	CallExpression	next ( )		6124633	0					
ANR	6125088	Callee	next		6124633	0					
ANR	6125089	Identifier	next		6124633	0					
ANR	6125090	ArgumentList			6124633	1					
ANR	6125091	BreakStatement	break ;	1378:3:32976:32981	6124633	86	True				
ANR	6125092	Label	case TOK_REGISTER :	1379:2:32985:33002	6124633	87	True				
ANR	6125093	Identifier	TOK_REGISTER		6124633	0					
ANR	6125094	Label	case TOK_AUTO :	1380:2:33006:33019	6124633	88	True				
ANR	6125095	Identifier	TOK_AUTO		6124633	0					
ANR	6125096	Label	case TOK_RESTRICT1 :	1381:2:33023:33041	6124633	89	True				
ANR	6125097	Identifier	TOK_RESTRICT1		6124633	0					
ANR	6125098	Label	case TOK_RESTRICT2 :	1382:2:33045:33063	6124633	90	True				
ANR	6125099	Identifier	TOK_RESTRICT2		6124633	0					
ANR	6125100	Label	case TOK_RESTRICT3 :	1383:2:33067:33085	6124633	91	True				
ANR	6125101	Identifier	TOK_RESTRICT3		6124633	0					
ANR	6125102	ExpressionStatement	next ( )	1384:3:33090:33097	6124633	92	True				
ANR	6125103	CallExpression	next ( )		6124633	0					
ANR	6125104	Callee	next		6124633	0					
ANR	6125105	Identifier	next		6124633	0					
ANR	6125106	ArgumentList			6124633	1					
ANR	6125107	BreakStatement	break ;	1385:3:33102:33107	6124633	93	True				
ANR	6125108	Label	case TOK_UNSIGNED :	1386:2:33111:33128	6124633	94	True				
ANR	6125109	Identifier	TOK_UNSIGNED		6124633	0					
ANR	6125110	ExpressionStatement	t |= VT_UNSIGNED	1387:3:33133:33149	6124633	95	True				
ANR	6125111	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6125112	Identifier	t		6124633	0					
ANR	6125113	Identifier	VT_UNSIGNED		6124633	1					
ANR	6125114	ExpressionStatement	next ( )	1388:3:33154:33161	6124633	96	True				
ANR	6125115	CallExpression	next ( )		6124633	0					
ANR	6125116	Callee	next		6124633	0					
ANR	6125117	Identifier	next		6124633	0					
ANR	6125118	ArgumentList			6124633	1					
ANR	6125119	ExpressionStatement	typespec_found = 1	1389:3:33166:33184	6124633	97	True				
ANR	6125120	AssignmentExpression	typespec_found = 1		6124633	0		=			
ANR	6125121	Identifier	typespec_found		6124633	0					
ANR	6125122	PrimaryExpression	1		6124633	1					
ANR	6125123	BreakStatement	break ;	1390:3:33189:33194	6124633	98	True				
ANR	6125124	Label	case TOK_EXTERN :	1393:2:33215:33230	6124633	99	True				
ANR	6125125	Identifier	TOK_EXTERN		6124633	0					
ANR	6125126	ExpressionStatement	t |= VT_EXTERN	1394:3:33235:33249	6124633	100	True				
ANR	6125127	AssignmentExpression	t |= VT_EXTERN		6124633	0		|=			
ANR	6125128	Identifier	t		6124633	0					
ANR	6125129	Identifier	VT_EXTERN		6124633	1					
ANR	6125130	ExpressionStatement	next ( )	1395:3:33254:33261	6124633	101	True				
ANR	6125131	CallExpression	next ( )		6124633	0					
ANR	6125132	Callee	next		6124633	0					
ANR	6125133	Identifier	next		6124633	0					
ANR	6125134	ArgumentList			6124633	1					
ANR	6125135	BreakStatement	break ;	1396:3:33266:33271	6124633	102	True				
ANR	6125136	Label	case TOK_STATIC :	1397:2:33275:33290	6124633	103	True				
ANR	6125137	Identifier	TOK_STATIC		6124633	0					
ANR	6125138	ExpressionStatement	t |= VT_STATIC	1398:3:33295:33309	6124633	104	True				
ANR	6125139	AssignmentExpression	t |= VT_STATIC		6124633	0		|=			
ANR	6125140	Identifier	t		6124633	0					
ANR	6125141	Identifier	VT_STATIC		6124633	1					
ANR	6125142	ExpressionStatement	next ( )	1399:3:33314:33321	6124633	105	True				
ANR	6125143	CallExpression	next ( )		6124633	0					
ANR	6125144	Callee	next		6124633	0					
ANR	6125145	Identifier	next		6124633	0					
ANR	6125146	ArgumentList			6124633	1					
ANR	6125147	BreakStatement	break ;	1400:3:33326:33331	6124633	106	True				
ANR	6125148	Label	case TOK_TYPEDEF :	1401:2:33335:33351	6124633	107	True				
ANR	6125149	Identifier	TOK_TYPEDEF		6124633	0					
ANR	6125150	ExpressionStatement	t |= VT_TYPEDEF	1402:3:33356:33371	6124633	108	True				
ANR	6125151	AssignmentExpression	t |= VT_TYPEDEF		6124633	0		|=			
ANR	6125152	Identifier	t		6124633	0					
ANR	6125153	Identifier	VT_TYPEDEF		6124633	1					
ANR	6125154	ExpressionStatement	next ( )	1403:3:33376:33383	6124633	109	True				
ANR	6125155	CallExpression	next ( )		6124633	0					
ANR	6125156	Callee	next		6124633	0					
ANR	6125157	Identifier	next		6124633	0					
ANR	6125158	ArgumentList			6124633	1					
ANR	6125159	BreakStatement	break ;	1404:3:33388:33393	6124633	110	True				
ANR	6125160	Label	case TOK_INLINE1 :	1405:2:33397:33413	6124633	111	True				
ANR	6125161	Identifier	TOK_INLINE1		6124633	0					
ANR	6125162	Label	case TOK_INLINE2 :	1406:2:33417:33433	6124633	112	True				
ANR	6125163	Identifier	TOK_INLINE2		6124633	0					
ANR	6125164	Label	case TOK_INLINE3 :	1407:2:33437:33453	6124633	113	True				
ANR	6125165	Identifier	TOK_INLINE3		6124633	0					
ANR	6125166	ExpressionStatement	t |= VT_INLINE	1408:3:33458:33472	6124633	114	True				
ANR	6125167	AssignmentExpression	t |= VT_INLINE		6124633	0		|=			
ANR	6125168	Identifier	t		6124633	0					
ANR	6125169	Identifier	VT_INLINE		6124633	1					
ANR	6125170	ExpressionStatement	next ( )	1409:3:33477:33484	6124633	115	True				
ANR	6125171	CallExpression	next ( )		6124633	0					
ANR	6125172	Callee	next		6124633	0					
ANR	6125173	Identifier	next		6124633	0					
ANR	6125174	ArgumentList			6124633	1					
ANR	6125175	BreakStatement	break ;	1410:3:33489:33494	6124633	116	True				
ANR	6125176	Label	case TOK_ATTRIBUTE1 :	1413:2:33522:33541	6124633	117	True				
ANR	6125177	Identifier	TOK_ATTRIBUTE1		6124633	0					
ANR	6125178	Label	case TOK_ATTRIBUTE2 :	1414:2:33545:33564	6124633	118	True				
ANR	6125179	Identifier	TOK_ATTRIBUTE2		6124633	0					
ANR	6125180	ExpressionStatement	parse_attribute ( ad )	1415:3:33569:33589	6124633	119	True				
ANR	6125181	CallExpression	parse_attribute ( ad )		6124633	0					
ANR	6125182	Callee	parse_attribute		6124633	0					
ANR	6125183	Identifier	parse_attribute		6124633	0					
ANR	6125184	ArgumentList	ad		6124633	1					
ANR	6125185	Argument	ad		6124633	0					
ANR	6125186	Identifier	ad		6124633	0					
ANR	6125187	IfStatement	if ( ad -> mode )		6124633	120					
ANR	6125188	Condition	ad -> mode	1416:7:33598:33605	6124633	0	True				
ANR	6125189	PtrMemberAccess	ad -> mode		6124633	0					
ANR	6125190	Identifier	ad		6124633	0					
ANR	6125191	Identifier	mode		6124633	1					
ANR	6125192	CompoundStatement		178:17:3542:3542	6124633	1					
ANR	6125193	ExpressionStatement	u = ad -> mode - 1	1417:4:33614:33630	6124633	0	True				
ANR	6125194	AssignmentExpression	u = ad -> mode - 1		6124633	0		=			
ANR	6125195	Identifier	u		6124633	0					
ANR	6125196	AdditiveExpression	ad -> mode - 1		6124633	1		-			
ANR	6125197	PtrMemberAccess	ad -> mode		6124633	0					
ANR	6125198	Identifier	ad		6124633	0					
ANR	6125199	Identifier	mode		6124633	1					
ANR	6125200	PrimaryExpression	1		6124633	1					
ANR	6125201	ExpressionStatement	t = ( t & ~VT_BTYPE ) | u	1418:4:33636:33659	6124633	1	True				
ANR	6125202	AssignmentExpression	t = ( t & ~VT_BTYPE ) | u		6124633	0		=			
ANR	6125203	Identifier	t		6124633	0					
ANR	6125204	InclusiveOrExpression	( t & ~VT_BTYPE ) | u		6124633	1		|			
ANR	6125205	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6125206	Identifier	t		6124633	0					
ANR	6125207	Identifier	~VT_BTYPE		6124633	1					
ANR	6125208	Identifier	u		6124633	1					
ANR	6125209	BreakStatement	break ;	1420:3:33669:33674	6124633	121	True				
ANR	6125210	Label	case TOK_TYPEOF1 :	1422:2:33698:33714	6124633	122	True				
ANR	6125211	Identifier	TOK_TYPEOF1		6124633	0					
ANR	6125212	Label	case TOK_TYPEOF2 :	1423:2:33718:33734	6124633	123	True				
ANR	6125213	Identifier	TOK_TYPEOF2		6124633	0					
ANR	6125214	Label	case TOK_TYPEOF3 :	1424:2:33738:33754	6124633	124	True				
ANR	6125215	Identifier	TOK_TYPEOF3		6124633	0					
ANR	6125216	ExpressionStatement	next ( )	1425:3:33759:33766	6124633	125	True				
ANR	6125217	CallExpression	next ( )		6124633	0					
ANR	6125218	Callee	next		6124633	0					
ANR	6125219	Identifier	next		6124633	0					
ANR	6125220	ArgumentList			6124633	1					
ANR	6125221	ExpressionStatement	parse_expr_type ( & type1 )	1426:3:33771:33795	6124633	126	True				
ANR	6125222	CallExpression	parse_expr_type ( & type1 )		6124633	0					
ANR	6125223	Callee	parse_expr_type		6124633	0					
ANR	6125224	Identifier	parse_expr_type		6124633	0					
ANR	6125225	ArgumentList	& type1		6124633	1					
ANR	6125226	Argument	& type1		6124633	0					
ANR	6125227	UnaryOperationExpression	& type1		6124633	0					
ANR	6125228	UnaryOperator	&		6124633	0					
ANR	6125229	Identifier	type1		6124633	1					
ANR	6125230	ExpressionStatement	type1 . t &= ~ ( VT_STORAGE & ~VT_TYPEDEF )	1428:3:33853:33891	6124633	127	True				
ANR	6125231	AssignmentExpression	type1 . t &= ~ ( VT_STORAGE & ~VT_TYPEDEF )		6124633	0		&=			
ANR	6125232	MemberAccess	type1 . t		6124633	0					
ANR	6125233	Identifier	type1		6124633	0					
ANR	6125234	Identifier	t		6124633	1					
ANR	6125235	UnaryOperationExpression	~ ( VT_STORAGE & ~VT_TYPEDEF )		6124633	1					
ANR	6125236	UnaryOperator	~		6124633	0					
ANR	6125237	BitAndExpression	VT_STORAGE & ~VT_TYPEDEF		6124633	1		&			
ANR	6125238	Identifier	VT_STORAGE		6124633	0					
ANR	6125239	Identifier	~VT_TYPEDEF		6124633	1					
ANR	6125240	GotoStatement	goto basic_type2 ;	1429:3:33896:33912	6124633	128	True				
ANR	6125241	Identifier	basic_type2		6124633	0					
ANR	6125242	Label	default :	1430:2:33916:33923	6124633	129	True				
ANR	6125243	Identifier	default		6124633	0					
ANR	6125244	IfStatement	if ( typespec_found || typedef_found )		6124633	130					
ANR	6125245	Condition	typespec_found || typedef_found	1431:7:33932:33962	6124633	0	True				
ANR	6125246	OrExpression	typespec_found || typedef_found		6124633	0		||			
ANR	6125247	Identifier	typespec_found		6124633	0					
ANR	6125248	Identifier	typedef_found		6124633	1					
ANR	6125249	CompoundStatement		193:40:3899:3899	6124633	1					
ANR	6125250	GotoStatement	goto the_end ;	1432:4:33971:33983	6124633	0	True				
ANR	6125251	Identifier	the_end		6124633	0					
ANR	6125252	ExpressionStatement	s = sym_find ( tok )	1434:3:33993:34011	6124633	131	True				
ANR	6125253	AssignmentExpression	s = sym_find ( tok )		6124633	0		=			
ANR	6125254	Identifier	s		6124633	0					
ANR	6125255	CallExpression	sym_find ( tok )		6124633	1					
ANR	6125256	Callee	sym_find		6124633	0					
ANR	6125257	Identifier	sym_find		6124633	0					
ANR	6125258	ArgumentList	tok		6124633	1					
ANR	6125259	Argument	tok		6124633	0					
ANR	6125260	Identifier	tok		6124633	0					
ANR	6125261	IfStatement	if ( ! s || ! ( s -> type . t & VT_TYPEDEF ) )		6124633	132					
ANR	6125262	Condition	! s || ! ( s -> type . t & VT_TYPEDEF )	1435:7:34020:34050	6124633	0	True				
ANR	6125263	OrExpression	! s || ! ( s -> type . t & VT_TYPEDEF )		6124633	0		||			
ANR	6125264	UnaryOperationExpression	! s		6124633	0					
ANR	6125265	UnaryOperator	!		6124633	0					
ANR	6125266	Identifier	s		6124633	1					
ANR	6125267	UnaryOperationExpression	! ( s -> type . t & VT_TYPEDEF )		6124633	1					
ANR	6125268	UnaryOperator	!		6124633	0					
ANR	6125269	BitAndExpression	s -> type . t & VT_TYPEDEF		6124633	1		&			
ANR	6125270	MemberAccess	s -> type . t		6124633	0					
ANR	6125271	PtrMemberAccess	s -> type		6124633	0					
ANR	6125272	Identifier	s		6124633	0					
ANR	6125273	Identifier	type		6124633	1					
ANR	6125274	Identifier	t		6124633	1					
ANR	6125275	Identifier	VT_TYPEDEF		6124633	1					
ANR	6125276	CompoundStatement		197:40:3987:3987	6124633	1					
ANR	6125277	GotoStatement	goto the_end ;	1436:4:34059:34071	6124633	0	True				
ANR	6125278	Identifier	the_end		6124633	0					
ANR	6125279	ExpressionStatement	typedef_found = 1	1438:3:34081:34098	6124633	133	True				
ANR	6125280	AssignmentExpression	typedef_found = 1		6124633	0		=			
ANR	6125281	Identifier	typedef_found		6124633	0					
ANR	6125282	PrimaryExpression	1		6124633	1					
ANR	6125283	ExpressionStatement	t |= ( s -> type . t & ~VT_TYPEDEF )	1439:3:34103:34133	6124633	134	True				
ANR	6125284	AssignmentExpression	t |= ( s -> type . t & ~VT_TYPEDEF )		6124633	0		|=			
ANR	6125285	Identifier	t		6124633	0					
ANR	6125286	BitAndExpression	s -> type . t & ~VT_TYPEDEF		6124633	1		&			
ANR	6125287	MemberAccess	s -> type . t		6124633	0					
ANR	6125288	PtrMemberAccess	s -> type		6124633	0					
ANR	6125289	Identifier	s		6124633	0					
ANR	6125290	Identifier	type		6124633	1					
ANR	6125291	Identifier	t		6124633	1					
ANR	6125292	Identifier	~VT_TYPEDEF		6124633	1					
ANR	6125293	ExpressionStatement	type -> ref = s -> type . ref	1440:3:34138:34161	6124633	135	True				
ANR	6125294	AssignmentExpression	type -> ref = s -> type . ref		6124633	0		=			
ANR	6125295	PtrMemberAccess	type -> ref		6124633	0					
ANR	6125296	Identifier	type		6124633	0					
ANR	6125297	Identifier	ref		6124633	1					
ANR	6125298	MemberAccess	s -> type . ref		6124633	1					
ANR	6125299	PtrMemberAccess	s -> type		6124633	0					
ANR	6125300	Identifier	s		6124633	0					
ANR	6125301	Identifier	type		6124633	1					
ANR	6125302	Identifier	ref		6124633	1					
ANR	6125303	IfStatement	if ( s -> r )		6124633	136					
ANR	6125304	Condition	s -> r	1441:7:34170:34173	6124633	0	True				
ANR	6125305	PtrMemberAccess	s -> r		6124633	0					
ANR	6125306	Identifier	s		6124633	0					
ANR	6125307	Identifier	r		6124633	1					
ANR	6125308	CompoundStatement		203:13:4110:4110	6124633	1					
ANR	6125309	IfStatement	if ( 0 == ad -> aligned )		6124633	0					
ANR	6125310	Condition	0 == ad -> aligned	1443:8:34224:34239	6124633	0	True				
ANR	6125311	EqualityExpression	0 == ad -> aligned		6124633	0		==			
ANR	6125312	PrimaryExpression	0		6124633	0					
ANR	6125313	PtrMemberAccess	ad -> aligned		6124633	1					
ANR	6125314	Identifier	ad		6124633	0					
ANR	6125315	Identifier	aligned		6124633	1					
ANR	6125316	CompoundStatement		205:26:4176:4176	6124633	1					
ANR	6125317	ExpressionStatement	ad -> aligned = FUNC_ALIGN ( s -> r )	1444:5:34249:34280	6124633	0	True				
ANR	6125318	AssignmentExpression	ad -> aligned = FUNC_ALIGN ( s -> r )		6124633	0		=			
ANR	6125319	PtrMemberAccess	ad -> aligned		6124633	0					
ANR	6125320	Identifier	ad		6124633	0					
ANR	6125321	Identifier	aligned		6124633	1					
ANR	6125322	CallExpression	FUNC_ALIGN ( s -> r )		6124633	1					
ANR	6125323	Callee	FUNC_ALIGN		6124633	0					
ANR	6125324	Identifier	FUNC_ALIGN		6124633	0					
ANR	6125325	ArgumentList	s -> r		6124633	1					
ANR	6125326	Argument	s -> r		6124633	0					
ANR	6125327	PtrMemberAccess	s -> r		6124633	0					
ANR	6125328	Identifier	s		6124633	0					
ANR	6125329	Identifier	r		6124633	1					
ANR	6125330	IfStatement	if ( 0 == ad -> func_call )		6124633	1					
ANR	6125331	Condition	0 == ad -> func_call	1446:8:34296:34313	6124633	0	True				
ANR	6125332	EqualityExpression	0 == ad -> func_call		6124633	0		==			
ANR	6125333	PrimaryExpression	0		6124633	0					
ANR	6125334	PtrMemberAccess	ad -> func_call		6124633	1					
ANR	6125335	Identifier	ad		6124633	0					
ANR	6125336	Identifier	func_call		6124633	1					
ANR	6125337	CompoundStatement		208:28:4250:4250	6124633	1					
ANR	6125338	ExpressionStatement	ad -> func_call = FUNC_CALL ( s -> r )	1447:5:34323:34355	6124633	0	True				
ANR	6125339	AssignmentExpression	ad -> func_call = FUNC_CALL ( s -> r )		6124633	0		=			
ANR	6125340	PtrMemberAccess	ad -> func_call		6124633	0					
ANR	6125341	Identifier	ad		6124633	0					
ANR	6125342	Identifier	func_call		6124633	1					
ANR	6125343	CallExpression	FUNC_CALL ( s -> r )		6124633	1					
ANR	6125344	Callee	FUNC_CALL		6124633	0					
ANR	6125345	Identifier	FUNC_CALL		6124633	0					
ANR	6125346	ArgumentList	s -> r		6124633	1					
ANR	6125347	Argument	s -> r		6124633	0					
ANR	6125348	PtrMemberAccess	s -> r		6124633	0					
ANR	6125349	Identifier	s		6124633	0					
ANR	6125350	Identifier	r		6124633	1					
ANR	6125351	ExpressionStatement	ad -> packed |= FUNC_PACKED ( s -> r )	1449:4:34367:34399	6124633	2	True				
ANR	6125352	AssignmentExpression	ad -> packed |= FUNC_PACKED ( s -> r )		6124633	0		|=			
ANR	6125353	PtrMemberAccess	ad -> packed		6124633	0					
ANR	6125354	Identifier	ad		6124633	0					
ANR	6125355	Identifier	packed		6124633	1					
ANR	6125356	CallExpression	FUNC_PACKED ( s -> r )		6124633	1					
ANR	6125357	Callee	FUNC_PACKED		6124633	0					
ANR	6125358	Identifier	FUNC_PACKED		6124633	0					
ANR	6125359	ArgumentList	s -> r		6124633	1					
ANR	6125360	Argument	s -> r		6124633	0					
ANR	6125361	PtrMemberAccess	s -> r		6124633	0					
ANR	6125362	Identifier	s		6124633	0					
ANR	6125363	Identifier	r		6124633	1					
ANR	6125364	ExpressionStatement	next ( )	1451:3:34409:34416	6124633	137	True				
ANR	6125365	CallExpression	next ( )		6124633	0					
ANR	6125366	Callee	next		6124633	0					
ANR	6125367	Identifier	next		6124633	0					
ANR	6125368	ArgumentList			6124633	1					
ANR	6125369	ExpressionStatement	typespec_found = 1	1452:3:34421:34439	6124633	138	True				
ANR	6125370	AssignmentExpression	typespec_found = 1		6124633	0		=			
ANR	6125371	Identifier	typespec_found		6124633	0					
ANR	6125372	PrimaryExpression	1		6124633	1					
ANR	6125373	BreakStatement	break ;	1453:3:34444:34449	6124633	139	True				
ANR	6125374	ExpressionStatement	type_found = 1	1455:2:34457:34471	6124633	1	True				
ANR	6125375	AssignmentExpression	type_found = 1		6124633	0		=			
ANR	6125376	Identifier	type_found		6124633	0					
ANR	6125377	PrimaryExpression	1		6124633	1					
ANR	6125378	Label	the_end :	1457:0:34476:34483	6124633	9	True				
ANR	6125379	Identifier	the_end		6124633	0					
ANR	6125380	IfStatement	if ( ( t & ( VT_SIGNED | VT_UNSIGNED ) ) == ( VT_SIGNED | VT_UNSIGNED ) )		6124633	10					
ANR	6125381	Condition	( t & ( VT_SIGNED | VT_UNSIGNED ) ) == ( VT_SIGNED | VT_UNSIGNED )	1458:5:34490:34549	6124633	0	True				
ANR	6125382	EqualityExpression	( t & ( VT_SIGNED | VT_UNSIGNED ) ) == ( VT_SIGNED | VT_UNSIGNED )		6124633	0		==			
ANR	6125383	BitAndExpression	t & ( VT_SIGNED | VT_UNSIGNED )		6124633	0		&			
ANR	6125384	Identifier	t		6124633	0					
ANR	6125385	InclusiveOrExpression	VT_SIGNED | VT_UNSIGNED		6124633	1		|			
ANR	6125386	Identifier	VT_SIGNED		6124633	0					
ANR	6125387	Identifier	VT_UNSIGNED		6124633	1					
ANR	6125388	InclusiveOrExpression	VT_SIGNED | VT_UNSIGNED		6124633	1		|			
ANR	6125389	Identifier	VT_SIGNED		6124633	0					
ANR	6125390	Identifier	VT_UNSIGNED		6124633	1					
ANR	6125391	CompoundStatement		220:67:4486:4486	6124633	1					
ANR	6125392	ExpressionStatement	"tcc_error ( ""signed and unsigned modifier"" )"	1459:2:34556:34598	6124633	0	True				
ANR	6125393	CallExpression	"tcc_error ( ""signed and unsigned modifier"" )"		6124633	0					
ANR	6125394	Callee	tcc_error		6124633	0					
ANR	6125395	Identifier	tcc_error		6124633	0					
ANR	6125396	ArgumentList	"""signed and unsigned modifier"""		6124633	1					
ANR	6125397	Argument	"""signed and unsigned modifier"""		6124633	0					
ANR	6125398	PrimaryExpression	"""signed and unsigned modifier"""		6124633	0					
ANR	6125399	ReturnStatement	return 0 ;	1460:2:34602:34610	6124633	1	True				
ANR	6125400	PrimaryExpression	0		6124633	0					
ANR	6125401	IfStatement	if ( tcc_state -> char_is_unsigned )		6124633	11					
ANR	6125402	Condition	tcc_state -> char_is_unsigned	1462:5:34620:34646	6124633	0	True				
ANR	6125403	PtrMemberAccess	tcc_state -> char_is_unsigned		6124633	0					
ANR	6125404	Identifier	tcc_state		6124633	0					
ANR	6125405	Identifier	char_is_unsigned		6124633	1					
ANR	6125406	CompoundStatement		224:34:4583:4583	6124633	1					
ANR	6125407	IfStatement	if ( ( t & ( VT_SIGNED | VT_UNSIGNED | VT_BTYPE ) ) == VT_INT8 )		6124633	0					
ANR	6125408	Condition	( t & ( VT_SIGNED | VT_UNSIGNED | VT_BTYPE ) ) == VT_INT8	1463:6:34657:34709	6124633	0	True				
ANR	6125409	EqualityExpression	( t & ( VT_SIGNED | VT_UNSIGNED | VT_BTYPE ) ) == VT_INT8		6124633	0		==			
ANR	6125410	BitAndExpression	t & ( VT_SIGNED | VT_UNSIGNED | VT_BTYPE )		6124633	0		&			
ANR	6125411	Identifier	t		6124633	0					
ANR	6125412	InclusiveOrExpression	VT_SIGNED | VT_UNSIGNED | VT_BTYPE		6124633	1		|			
ANR	6125413	Identifier	VT_SIGNED		6124633	0					
ANR	6125414	InclusiveOrExpression	VT_UNSIGNED | VT_BTYPE		6124633	1		|			
ANR	6125415	Identifier	VT_UNSIGNED		6124633	0					
ANR	6125416	Identifier	VT_BTYPE		6124633	1					
ANR	6125417	Identifier	VT_INT8		6124633	1					
ANR	6125418	CompoundStatement		225:61:4646:4646	6124633	1					
ANR	6125419	ExpressionStatement	t |= VT_UNSIGNED	1464:3:34717:34733	6124633	0	True				
ANR	6125420	AssignmentExpression	t |= VT_UNSIGNED		6124633	0		|=			
ANR	6125421	Identifier	t		6124633	0					
ANR	6125422	Identifier	VT_UNSIGNED		6124633	1					
ANR	6125423	ExpressionStatement	t &= ~VT_SIGNED	1467:1:34743:34758	6124633	12	True				
ANR	6125424	AssignmentExpression	t &= ~VT_SIGNED		6124633	0		&=			
ANR	6125425	Identifier	t		6124633	0					
ANR	6125426	Identifier	~VT_SIGNED		6124633	1					
ANR	6125427	IfStatement	if ( ( t & VT_BTYPE ) == VT_LONG )		6124633	13					
ANR	6125428	Condition	( t & VT_BTYPE ) == VT_LONG	1470:5:34800:34824	6124633	0	True				
ANR	6125429	EqualityExpression	( t & VT_BTYPE ) == VT_LONG		6124633	0		==			
ANR	6125430	BitAndExpression	t & VT_BTYPE		6124633	0		&			
ANR	6125431	Identifier	t		6124633	0					
ANR	6125432	Identifier	VT_BTYPE		6124633	1					
ANR	6125433	Identifier	VT_LONG		6124633	1					
ANR	6125434	CompoundStatement		232:32:4761:4761	6124633	1					
ANR	6125435	IfStatement	"if ( ! strncmp ( tcc_state -> os , ""windows"" , 7 ) || ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32 ) )"		6124633	0					
ANR	6125436	Condition	"! strncmp ( tcc_state -> os , ""windows"" , 7 ) || ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32 )"	1471:6:34835:34945	6124633	0	True				
ANR	6125437	OrExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 ) || ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32 )"		6124633	0		||			
ANR	6125438	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6124633	0					
ANR	6125439	UnaryOperator	!		6124633	0					
ANR	6125440	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6124633	1					
ANR	6125441	Callee	strncmp		6124633	0					
ANR	6125442	Identifier	strncmp		6124633	0					
ANR	6125443	ArgumentList	tcc_state -> os		6124633	1					
ANR	6125444	Argument	tcc_state -> os		6124633	0					
ANR	6125445	PtrMemberAccess	tcc_state -> os		6124633	0					
ANR	6125446	Identifier	tcc_state		6124633	0					
ANR	6125447	Identifier	os		6124633	1					
ANR	6125448	Argument	"""windows"""		6124633	1					
ANR	6125449	PrimaryExpression	"""windows"""		6124633	0					
ANR	6125450	Argument	7		6124633	2					
ANR	6125451	PrimaryExpression	7		6124633	0					
ANR	6125452	AndExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 32"		6124633	1		&&			
ANR	6125453	UnaryOperationExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6124633	0					
ANR	6125454	UnaryOperator	!		6124633	0					
ANR	6125455	CallExpression	"strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6124633	1					
ANR	6125456	Callee	strncmp		6124633	0					
ANR	6125457	Identifier	strncmp		6124633	0					
ANR	6125458	ArgumentList	tcc_state -> arch		6124633	1					
ANR	6125459	Argument	tcc_state -> arch		6124633	0					
ANR	6125460	PtrMemberAccess	tcc_state -> arch		6124633	0					
ANR	6125461	Identifier	tcc_state		6124633	0					
ANR	6125462	Identifier	arch		6124633	1					
ANR	6125463	Argument	"""x86"""		6124633	1					
ANR	6125464	PrimaryExpression	"""x86"""		6124633	0					
ANR	6125465	Argument	3		6124633	2					
ANR	6125466	PrimaryExpression	3		6124633	0					
ANR	6125467	EqualityExpression	tcc_state -> bits == 32		6124633	1		==			
ANR	6125468	PtrMemberAccess	tcc_state -> bits		6124633	0					
ANR	6125469	Identifier	tcc_state		6124633	0					
ANR	6125470	Identifier	bits		6124633	1					
ANR	6125471	PrimaryExpression	32		6124633	1					
ANR	6125472	CompoundStatement		234:71:4882:4882	6124633	1					
ANR	6125473	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_INT32	1473:3:34953:34983	6124633	0	True				
ANR	6125474	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_INT32		6124633	0		=			
ANR	6125475	Identifier	t		6124633	0					
ANR	6125476	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_INT32		6124633	1		|			
ANR	6125477	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6125478	Identifier	t		6124633	0					
ANR	6125479	Identifier	~VT_BTYPE		6124633	1					
ANR	6125480	Identifier	VT_INT32		6124633	1					
ANR	6125481	ElseStatement	else		6124633	0					
ANR	6125482	CompoundStatement		236:9:4928:4928	6124633	0					
ANR	6125483	ExpressionStatement	t = ( t & ~VT_BTYPE ) | VT_INT64	1475:3:34999:35029	6124633	0	True				
ANR	6125484	AssignmentExpression	t = ( t & ~VT_BTYPE ) | VT_INT64		6124633	0		=			
ANR	6125485	Identifier	t		6124633	0					
ANR	6125486	InclusiveOrExpression	( t & ~VT_BTYPE ) | VT_INT64		6124633	1		|			
ANR	6125487	BitAndExpression	t & ~VT_BTYPE		6124633	0		&			
ANR	6125488	Identifier	t		6124633	0					
ANR	6125489	Identifier	~VT_BTYPE		6124633	1					
ANR	6125490	Identifier	VT_INT64		6124633	1					
ANR	6125491	ExpressionStatement	type -> t = t	1478:1:35039:35050	6124633	14	True				
ANR	6125492	AssignmentExpression	type -> t = t		6124633	0		=			
ANR	6125493	PtrMemberAccess	type -> t		6124633	0					
ANR	6125494	Identifier	type		6124633	0					
ANR	6125495	Identifier	t		6124633	1					
ANR	6125496	Identifier	t		6124633	1					
ANR	6125497	ReturnStatement	return type_found ;	1480:1:35054:35071	6124633	15	True				
ANR	6125498	Identifier	type_found		6124633	0					
ANR	6125499	ReturnType	static int		6124633	1					
ANR	6125500	Identifier	parse_btype		6124633	2					
ANR	6125501	ParameterList	"CType * type , AttributeDef * ad"		6124633	3					
ANR	6125502	Parameter	CType * type	1239:23:30034:30044	6124633	0	True				
ANR	6125503	ParameterType	CType *		6124633	0					
ANR	6125504	Identifier	type		6124633	1					
ANR	6125505	Parameter	AttributeDef * ad	1239:36:30047:30062	6124633	1	True				
ANR	6125506	ParameterType	AttributeDef *		6124633	0					
ANR	6125507	Identifier	ad		6124633	1					
ANR	6125508	CFGEntryNode	ENTRY		6124633		True				
ANR	6125509	CFGExitNode	EXIT		6124633		True				
ANR	6125510	Symbol	VT_INT16		6124633						
ANR	6125511	Symbol	tcc_state -> arch		6124633						
ANR	6125512	Symbol	s -> type . ref		6124633						
ANR	6125513	Symbol	VT_LDOUBLE		6124633						
ANR	6125514	Symbol	FUNC_PACKED		6124633						
ANR	6125515	Symbol	* tcc_state		6124633						
ANR	6125516	Symbol	type		6124633						
ANR	6125517	Symbol	strncmp		6124633						
ANR	6125518	Symbol	VT_VOLATILE		6124633						
ANR	6125519	Symbol	type1 . ref		6124633						
ANR	6125520	Symbol	tcc_state		6124633						
ANR	6125521	Symbol	ad		6124633						
ANR	6125522	Symbol	typespec_found		6124633						
ANR	6125523	Symbol	VT_CONSTANT		6124633						
ANR	6125524	Symbol	VT_SIGNED		6124633						
ANR	6125525	Symbol	VT_INT8		6124633						
ANR	6125526	Symbol	VT_DOUBLE		6124633						
ANR	6125527	Symbol	type1		6124633						
ANR	6125528	Symbol	tcc_nerr		6124633						
ANR	6125529	Symbol	VT_BTYPE		6124633						
ANR	6125530	Symbol	VT_FLOAT		6124633						
ANR	6125531	Symbol	tcc_state -> os		6124633						
ANR	6125532	Symbol	FUNC_CALL		6124633						
ANR	6125533	Symbol	type -> t		6124633						
ANR	6125534	Symbol	s -> type		6124633						
ANR	6125535	Symbol	VT_CHAR		6124633						
ANR	6125536	Symbol	VT_STATIC		6124633						
ANR	6125537	Symbol	ad -> func_call		6124633						
ANR	6125538	Symbol	~VT_SIGNED		6124633						
ANR	6125539	Symbol	VT_BOOL		6124633						
ANR	6125540	Symbol	CType		6124633						
ANR	6125541	Symbol	s -> r		6124633						
ANR	6125542	Symbol	ad -> packed		6124633						
ANR	6125543	Symbol	VT_TYPEDEF		6124633						
ANR	6125544	Symbol	* ad		6124633						
ANR	6125545	Symbol	VT_EXTERN		6124633						
ANR	6125546	Symbol	s -> type . t		6124633						
ANR	6125547	Symbol	VT_STRUCT		6124633						
ANR	6125548	Symbol	VT_LONG		6124633						
ANR	6125549	Symbol	tok		6124633						
ANR	6125550	Symbol	VT_UNSIGNED		6124633						
ANR	6125551	Symbol	ad -> aligned		6124633						
ANR	6125552	Symbol	FUNC_ALIGN		6124633						
ANR	6125553	Symbol	tcc_state -> char_is_unsigned		6124633						
ANR	6125554	Symbol	* type		6124633						
ANR	6125555	Symbol	sym_find		6124633						
ANR	6125556	Symbol	typedef_found		6124633						
ANR	6125557	Symbol	ad -> mode		6124633						
ANR	6125558	Symbol	~VT_TYPEDEF		6124633						
ANR	6125559	Symbol	type_found		6124633						
ANR	6125560	Symbol	VT_INT32		6124633						
ANR	6125561	Symbol	type1 . t		6124633						
ANR	6125562	Symbol	& type1		6124633						
ANR	6125563	Symbol	type -> ref		6124633						
ANR	6125564	Symbol	VT_VOID		6124633						
ANR	6125565	Symbol	VT_ENUM		6124633						
ANR	6125566	Symbol	VT_INLINE		6124633						
ANR	6125567	Symbol	VT_UNION		6124633						
ANR	6125568	Symbol	VT_STORAGE		6124633						
ANR	6125569	Symbol	s		6124633						
ANR	6125570	Symbol	t		6124633						
ANR	6125571	Symbol	u		6124633						
ANR	6125572	Symbol	tcc_state -> bits		6124633						
ANR	6125573	Symbol	VT_INT64		6124633						
ANR	6125574	Symbol	~VT_BTYPE		6124633						
ANR	6125575	Symbol	* s		6124633						
ANR	6125576	Function	convert_parameter_type	1485:0:35171:35524							
ANR	6125577	FunctionDef	convert_parameter_type (CType * pt)		6125576	0					
ANR	6125578	CompoundStatement		1485:53:35224:35524	6125576	0					
ANR	6125579	ExpressionStatement	pt -> t &= ~ ( VT_CONSTANT | VT_VOLATILE )	1488:1:35340:35377	6125576	0	True				
ANR	6125580	AssignmentExpression	pt -> t &= ~ ( VT_CONSTANT | VT_VOLATILE )		6125576	0		&=			
ANR	6125581	PtrMemberAccess	pt -> t		6125576	0					
ANR	6125582	Identifier	pt		6125576	0					
ANR	6125583	Identifier	t		6125576	1					
ANR	6125584	UnaryOperationExpression	~ ( VT_CONSTANT | VT_VOLATILE )		6125576	1					
ANR	6125585	UnaryOperator	~		6125576	0					
ANR	6125586	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6125576	1		|			
ANR	6125587	Identifier	VT_CONSTANT		6125576	0					
ANR	6125588	Identifier	VT_VOLATILE		6125576	1					
ANR	6125589	ExpressionStatement	pt -> t &= ~VT_ARRAY	1490:1:35444:35462	6125576	1	True				
ANR	6125590	AssignmentExpression	pt -> t &= ~VT_ARRAY		6125576	0		&=			
ANR	6125591	PtrMemberAccess	pt -> t		6125576	0					
ANR	6125592	Identifier	pt		6125576	0					
ANR	6125593	Identifier	t		6125576	1					
ANR	6125594	Identifier	~VT_ARRAY		6125576	1					
ANR	6125595	IfStatement	if ( ( pt -> t & VT_BTYPE ) == VT_FUNC )		6125576	2					
ANR	6125596	Condition	( pt -> t & VT_BTYPE ) == VT_FUNC	1491:5:35469:35497	6125576	0	True				
ANR	6125597	EqualityExpression	( pt -> t & VT_BTYPE ) == VT_FUNC		6125576	0		==			
ANR	6125598	BitAndExpression	pt -> t & VT_BTYPE		6125576	0		&			
ANR	6125599	PtrMemberAccess	pt -> t		6125576	0					
ANR	6125600	Identifier	pt		6125576	0					
ANR	6125601	Identifier	t		6125576	1					
ANR	6125602	Identifier	VT_BTYPE		6125576	1					
ANR	6125603	Identifier	VT_FUNC		6125576	1					
ANR	6125604	CompoundStatement		7:36:275:275	6125576	1					
ANR	6125605	ExpressionStatement	mk_pointer ( pt )	1492:2:35504:35519	6125576	0	True				
ANR	6125606	CallExpression	mk_pointer ( pt )		6125576	0					
ANR	6125607	Callee	mk_pointer		6125576	0					
ANR	6125608	Identifier	mk_pointer		6125576	0					
ANR	6125609	ArgumentList	pt		6125576	1					
ANR	6125610	Argument	pt		6125576	0					
ANR	6125611	Identifier	pt		6125576	0					
ANR	6125612	ReturnType	static inline void		6125576	1					
ANR	6125613	Identifier	convert_parameter_type		6125576	2					
ANR	6125614	ParameterList	CType * pt		6125576	3					
ANR	6125615	Parameter	CType * pt	1485:42:35213:35221	6125576	0	True				
ANR	6125616	ParameterType	CType *		6125576	0					
ANR	6125617	Identifier	pt		6125576	1					
ANR	6125618	CFGEntryNode	ENTRY		6125576		True				
ANR	6125619	CFGExitNode	EXIT		6125576		True				
ANR	6125620	Symbol	~VT_ARRAY		6125576						
ANR	6125621	Symbol	VT_VOLATILE		6125576						
ANR	6125622	Symbol	pt		6125576						
ANR	6125623	Symbol	VT_CONSTANT		6125576						
ANR	6125624	Symbol	pt -> t		6125576						
ANR	6125625	Symbol	* pt		6125576						
ANR	6125626	Symbol	VT_BTYPE		6125576						
ANR	6125627	Symbol	VT_FUNC		6125576						
ANR	6125628	Function	post_type	1496:0:35527:39132							
ANR	6125629	FunctionDef	"post_type (CType * type , AttributeDef * ad)"		6125628	0					
ANR	6125630	CompoundStatement		1496:53:35580:39132	6125628	0					
ANR	6125631	IdentifierDeclStatement	"int n , l , t1 , arg_size , align ;"	1497:1:35583:35612	6125628	0	True				
ANR	6125632	IdentifierDecl	n		6125628	0					
ANR	6125633	IdentifierDeclType	int		6125628	0					
ANR	6125634	Identifier	n		6125628	1					
ANR	6125635	IdentifierDecl	l		6125628	1					
ANR	6125636	IdentifierDeclType	int		6125628	0					
ANR	6125637	Identifier	l		6125628	1					
ANR	6125638	IdentifierDecl	t1		6125628	2					
ANR	6125639	IdentifierDeclType	int		6125628	0					
ANR	6125640	Identifier	t1		6125628	1					
ANR	6125641	IdentifierDecl	arg_size		6125628	3					
ANR	6125642	IdentifierDeclType	int		6125628	0					
ANR	6125643	Identifier	arg_size		6125628	1					
ANR	6125644	IdentifierDecl	align		6125628	4					
ANR	6125645	IdentifierDeclType	int		6125628	0					
ANR	6125646	Identifier	align		6125628	1					
ANR	6125647	IdentifierDeclStatement	"Sym * * plast , * s , * first ;"	1498:1:35615:35638	6125628	1	True				
ANR	6125648	IdentifierDecl	* * plast		6125628	0					
ANR	6125649	IdentifierDeclType	Sym * *		6125628	0					
ANR	6125650	Identifier	plast		6125628	1					
ANR	6125651	IdentifierDecl	* s		6125628	1					
ANR	6125652	IdentifierDeclType	Sym *		6125628	0					
ANR	6125653	Identifier	s		6125628	1					
ANR	6125654	IdentifierDecl	* first		6125628	2					
ANR	6125655	IdentifierDeclType	Sym *		6125628	0					
ANR	6125656	Identifier	first		6125628	1					
ANR	6125657	IdentifierDeclStatement	AttributeDef ad1 ;	1499:1:35641:35657	6125628	2	True				
ANR	6125658	IdentifierDecl	ad1		6125628	0					
ANR	6125659	IdentifierDeclType	AttributeDef		6125628	0					
ANR	6125660	Identifier	ad1		6125628	1					
ANR	6125661	IdentifierDeclStatement	CType pt ;	1500:1:35660:35668	6125628	3	True				
ANR	6125662	IdentifierDecl	pt		6125628	0					
ANR	6125663	IdentifierDeclType	CType		6125628	0					
ANR	6125664	Identifier	pt		6125628	1					
ANR	6125665	IdentifierDeclStatement	char * symname = NULL ;	1501:1:35671:35691	6125628	4	True				
ANR	6125666	IdentifierDecl	* symname = NULL		6125628	0					
ANR	6125667	IdentifierDeclType	char *		6125628	0					
ANR	6125668	Identifier	symname		6125628	1					
ANR	6125669	AssignmentExpression	* symname = NULL		6125628	2		=			
ANR	6125670	Identifier	NULL		6125628	0					
ANR	6125671	Identifier	NULL		6125628	1					
ANR	6125672	IdentifierDeclStatement	int narg = 0 ;	1502:1:35694:35706	6125628	5	True				
ANR	6125673	IdentifierDecl	narg = 0		6125628	0					
ANR	6125674	IdentifierDeclType	int		6125628	0					
ANR	6125675	Identifier	narg		6125628	1					
ANR	6125676	AssignmentExpression	narg = 0		6125628	2		=			
ANR	6125677	Identifier	narg		6125628	0					
ANR	6125678	PrimaryExpression	0		6125628	1					
ANR	6125679	IfStatement	if ( tok == '(' )		6125628	6					
ANR	6125680	Condition	tok == '('	1504:5:35714:35723	6125628	0	True				
ANR	6125681	EqualityExpression	tok == '('		6125628	0		==			
ANR	6125682	Identifier	tok		6125628	0					
ANR	6125683	PrimaryExpression	'('		6125628	1					
ANR	6125684	CompoundStatement		9:17:145:145	6125628	1					
ANR	6125685	ExpressionStatement	next ( )	1506:2:35759:35766	6125628	0	True				
ANR	6125686	CallExpression	next ( )		6125628	0					
ANR	6125687	Callee	next		6125628	0					
ANR	6125688	Identifier	next		6125628	0					
ANR	6125689	ArgumentList			6125628	1					
ANR	6125690	ExpressionStatement	l = 0	1507:2:35770:35775	6125628	1	True				
ANR	6125691	AssignmentExpression	l = 0		6125628	0		=			
ANR	6125692	Identifier	l		6125628	0					
ANR	6125693	PrimaryExpression	0		6125628	1					
ANR	6125694	ExpressionStatement	first = NULL	1508:2:35779:35791	6125628	2	True				
ANR	6125695	AssignmentExpression	first = NULL		6125628	0		=			
ANR	6125696	Identifier	first		6125628	0					
ANR	6125697	Identifier	NULL		6125628	1					
ANR	6125698	ExpressionStatement	plast = & first	1509:2:35795:35809	6125628	3	True				
ANR	6125699	AssignmentExpression	plast = & first		6125628	0		=			
ANR	6125700	Identifier	plast		6125628	0					
ANR	6125701	UnaryOperationExpression	& first		6125628	1					
ANR	6125702	UnaryOperator	&		6125628	0					
ANR	6125703	Identifier	first		6125628	1					
ANR	6125704	CompoundStatement		16:3:237:271	6125628	4					
ANR	6125705	IdentifierDeclStatement	const char * ret_type = global_type ;	1511:3:35818:35852	6125628	0	True				
ANR	6125706	IdentifierDecl	* ret_type = global_type		6125628	0					
ANR	6125707	IdentifierDeclType	const char *		6125628	0					
ANR	6125708	Identifier	ret_type		6125628	1					
ANR	6125709	AssignmentExpression	* ret_type = global_type		6125628	2		=			
ANR	6125710	Identifier	global_type		6125628	0					
ANR	6125711	Identifier	global_type		6125628	1					
ANR	6125712	ExpressionStatement	free ( symname )	1512:3:35857:35871	6125628	1	True				
ANR	6125713	CallExpression	free ( symname )		6125628	0					
ANR	6125714	Callee	free		6125628	0					
ANR	6125715	Identifier	free		6125628	0					
ANR	6125716	ArgumentList	symname		6125628	1					
ANR	6125717	Argument	symname		6125628	0					
ANR	6125718	Identifier	symname		6125628	0					
ANR	6125719	ExpressionStatement	symname = strdup ( global_symname )	1513:3:35876:35909	6125628	2	True				
ANR	6125720	AssignmentExpression	symname = strdup ( global_symname )		6125628	0		=			
ANR	6125721	Identifier	symname		6125628	0					
ANR	6125722	CallExpression	strdup ( global_symname )		6125628	1					
ANR	6125723	Callee	strdup		6125628	0					
ANR	6125724	Identifier	strdup		6125628	0					
ANR	6125725	ArgumentList	global_symname		6125628	1					
ANR	6125726	Argument	global_symname		6125628	0					
ANR	6125727	Identifier	global_symname		6125628	0					
ANR	6125728	ExpressionStatement	"tcc_appendf ( ""func.%s.ret=%s\\n"" , symname , ret_type )"	1514:3:35914:35965	6125628	3	True				
ANR	6125729	CallExpression	"tcc_appendf ( ""func.%s.ret=%s\\n"" , symname , ret_type )"		6125628	0					
ANR	6125730	Callee	tcc_appendf		6125628	0					
ANR	6125731	Identifier	tcc_appendf		6125628	0					
ANR	6125732	ArgumentList	"""func.%s.ret=%s\\n"""		6125628	1					
ANR	6125733	Argument	"""func.%s.ret=%s\\n"""		6125628	0					
ANR	6125734	PrimaryExpression	"""func.%s.ret=%s\\n"""		6125628	0					
ANR	6125735	Argument	symname		6125628	1					
ANR	6125736	Identifier	symname		6125628	0					
ANR	6125737	Argument	ret_type		6125628	2					
ANR	6125738	Identifier	ret_type		6125628	0					
ANR	6125739	ExpressionStatement	"tcc_appendf ( ""func.%s.cc=%s\\n"" , symname , ""cdecl"" )"	1515:3:35970:36019	6125628	4	True				
ANR	6125740	CallExpression	"tcc_appendf ( ""func.%s.cc=%s\\n"" , symname , ""cdecl"" )"		6125628	0					
ANR	6125741	Callee	tcc_appendf		6125628	0					
ANR	6125742	Identifier	tcc_appendf		6125628	0					
ANR	6125743	ArgumentList	"""func.%s.cc=%s\\n"""		6125628	1					
ANR	6125744	Argument	"""func.%s.cc=%s\\n"""		6125628	0					
ANR	6125745	PrimaryExpression	"""func.%s.cc=%s\\n"""		6125628	0					
ANR	6125746	Argument	symname		6125628	1					
ANR	6125747	Identifier	symname		6125628	0					
ANR	6125748	Argument	"""cdecl"""		6125628	2					
ANR	6125749	PrimaryExpression	"""cdecl"""		6125628	0					
ANR	6125750	ExpressionStatement	"tcc_appendf ( ""%s=func\\n"" , symname )"	1516:3:36032:36066	6125628	5	True				
ANR	6125751	CallExpression	"tcc_appendf ( ""%s=func\\n"" , symname )"		6125628	0					
ANR	6125752	Callee	tcc_appendf		6125628	0					
ANR	6125753	Identifier	tcc_appendf		6125628	0					
ANR	6125754	ArgumentList	"""%s=func\\n"""		6125628	1					
ANR	6125755	Argument	"""%s=func\\n"""		6125628	0					
ANR	6125756	PrimaryExpression	"""%s=func\\n"""		6125628	0					
ANR	6125757	Argument	symname		6125628	1					
ANR	6125758	Identifier	symname		6125628	0					
ANR	6125759	ExpressionStatement	arg_size = 0	1518:2:36074:36086	6125628	5	True				
ANR	6125760	AssignmentExpression	arg_size = 0		6125628	0		=			
ANR	6125761	Identifier	arg_size		6125628	0					
ANR	6125762	PrimaryExpression	0		6125628	1					
ANR	6125763	IfStatement	if ( tok != ')' )		6125628	6					
ANR	6125764	Condition	tok != ')'	1519:6:36094:36103	6125628	0	True				
ANR	6125765	EqualityExpression	tok != ')'		6125628	0		!=			
ANR	6125766	Identifier	tok		6125628	0					
ANR	6125767	PrimaryExpression	')'		6125628	1					
ANR	6125768	CompoundStatement		24:18:525:525	6125628	1					
ANR	6125769	WhileStatement	while ( tcc_nerr ( ) == 0 )		6125628	0					
ANR	6125770	Condition	tcc_nerr ( ) == 0	1520:10:36118:36133	6125628	0	True				
ANR	6125771	EqualityExpression	tcc_nerr ( ) == 0		6125628	0		==			
ANR	6125772	CallExpression	tcc_nerr ( )		6125628	0					
ANR	6125773	Callee	tcc_nerr		6125628	0					
ANR	6125774	Identifier	tcc_nerr		6125628	0					
ANR	6125775	ArgumentList			6125628	1					
ANR	6125776	PrimaryExpression	0		6125628	1					
ANR	6125777	CompoundStatement		25:28:555:555	6125628	1					
ANR	6125778	IfStatement	if ( l != FUNC_OLD )		6125628	0					
ANR	6125779	Condition	l != FUNC_OLD	1522:8:36191:36203	6125628	0	True				
ANR	6125780	EqualityExpression	l != FUNC_OLD		6125628	0		!=			
ANR	6125781	Identifier	l		6125628	0					
ANR	6125782	Identifier	FUNC_OLD		6125628	1					
ANR	6125783	CompoundStatement		27:23:625:625	6125628	1					
ANR	6125784	IfStatement	"if ( ! parse_btype ( & pt , & ad1 ) )"		6125628	0					
ANR	6125785	Condition	"! parse_btype ( & pt , & ad1 )"	1523:9:36217:36240	6125628	0	True				
ANR	6125786	UnaryOperationExpression	"! parse_btype ( & pt , & ad1 )"		6125628	0					
ANR	6125787	UnaryOperator	!		6125628	0					
ANR	6125788	CallExpression	"parse_btype ( & pt , & ad1 )"		6125628	1					
ANR	6125789	Callee	parse_btype		6125628	0					
ANR	6125790	Identifier	parse_btype		6125628	0					
ANR	6125791	ArgumentList	& pt		6125628	1					
ANR	6125792	Argument	& pt		6125628	0					
ANR	6125793	UnaryOperationExpression	& pt		6125628	0					
ANR	6125794	UnaryOperator	&		6125628	0					
ANR	6125795	Identifier	pt		6125628	1					
ANR	6125796	Argument	& ad1		6125628	1					
ANR	6125797	UnaryOperationExpression	& ad1		6125628	0					
ANR	6125798	UnaryOperator	&		6125628	0					
ANR	6125799	Identifier	ad1		6125628	1					
ANR	6125800	CompoundStatement		28:35:662:662	6125628	1					
ANR	6125801	IfStatement	if ( l )		6125628	0					
ANR	6125802	Condition	l	1524:10:36255:36255	6125628	0	True				
ANR	6125803	Identifier	l		6125628	0					
ANR	6125804	CompoundStatement		29:13:677:677	6125628	1					
ANR	6125805	ExpressionStatement	"TCC_ERR ( ""invalid type"" )"	1525:7:36267:36291	6125628	0	True				
ANR	6125806	CallExpression	"TCC_ERR ( ""invalid type"" )"		6125628	0					
ANR	6125807	Callee	TCC_ERR		6125628	0					
ANR	6125808	Identifier	TCC_ERR		6125628	0					
ANR	6125809	ArgumentList	"""invalid type"""		6125628	1					
ANR	6125810	Argument	"""invalid type"""		6125628	0					
ANR	6125811	PrimaryExpression	"""invalid type"""		6125628	0					
ANR	6125812	ElseStatement	else		6125628	0					
ANR	6125813	CompoundStatement		31:13:725:725	6125628	0					
ANR	6125814	ExpressionStatement	l = FUNC_OLD	1527:7:36315:36327	6125628	0	True				
ANR	6125815	AssignmentExpression	l = FUNC_OLD		6125628	0		=			
ANR	6125816	Identifier	l		6125628	0					
ANR	6125817	Identifier	FUNC_OLD		6125628	1					
ANR	6125818	GotoStatement	goto old_proto ;	1528:7:36336:36350	6125628	1	True				
ANR	6125819	Identifier	old_proto		6125628	0					
ANR	6125820	ExpressionStatement	l = FUNC_NEW	1531:5:36372:36384	6125628	1	True				
ANR	6125821	AssignmentExpression	l = FUNC_NEW		6125628	0		=			
ANR	6125822	Identifier	l		6125628	0					
ANR	6125823	Identifier	FUNC_NEW		6125628	1					
ANR	6125824	IfStatement	if ( ( pt . t & VT_BTYPE ) == VT_VOID && tok == ')' )		6125628	2					
ANR	6125825	Condition	( pt . t & VT_BTYPE ) == VT_VOID && tok == ')'	1532:9:36395:36436	6125628	0	True				
ANR	6125826	AndExpression	( pt . t & VT_BTYPE ) == VT_VOID && tok == ')'		6125628	0		&&			
ANR	6125827	EqualityExpression	( pt . t & VT_BTYPE ) == VT_VOID		6125628	0		==			
ANR	6125828	BitAndExpression	pt . t & VT_BTYPE		6125628	0		&			
ANR	6125829	MemberAccess	pt . t		6125628	0					
ANR	6125830	Identifier	pt		6125628	0					
ANR	6125831	Identifier	t		6125628	1					
ANR	6125832	Identifier	VT_BTYPE		6125628	1					
ANR	6125833	Identifier	VT_VOID		6125628	1					
ANR	6125834	EqualityExpression	tok == ')'		6125628	1		==			
ANR	6125835	Identifier	tok		6125628	0					
ANR	6125836	PrimaryExpression	')'		6125628	1					
ANR	6125837	CompoundStatement		37:53:858:858	6125628	1					
ANR	6125838	BreakStatement	break ;	1533:6:36447:36452	6125628	0	True				
ANR	6125839	ExpressionStatement	"type_decl ( & pt , & ad1 , & n , TYPE_DIRECT | TYPE_ABSTRACT )"	1535:5:36466:36520	6125628	3	True				
ANR	6125840	CallExpression	"type_decl ( & pt , & ad1 , & n , TYPE_DIRECT | TYPE_ABSTRACT )"		6125628	0					
ANR	6125841	Callee	type_decl		6125628	0					
ANR	6125842	Identifier	type_decl		6125628	0					
ANR	6125843	ArgumentList	& pt		6125628	1					
ANR	6125844	Argument	& pt		6125628	0					
ANR	6125845	UnaryOperationExpression	& pt		6125628	0					
ANR	6125846	UnaryOperator	&		6125628	0					
ANR	6125847	Identifier	pt		6125628	1					
ANR	6125848	Argument	& ad1		6125628	1					
ANR	6125849	UnaryOperationExpression	& ad1		6125628	0					
ANR	6125850	UnaryOperator	&		6125628	0					
ANR	6125851	Identifier	ad1		6125628	1					
ANR	6125852	Argument	& n		6125628	2					
ANR	6125853	UnaryOperationExpression	& n		6125628	0					
ANR	6125854	UnaryOperator	&		6125628	0					
ANR	6125855	Identifier	n		6125628	1					
ANR	6125856	Argument	TYPE_DIRECT | TYPE_ABSTRACT		6125628	3					
ANR	6125857	InclusiveOrExpression	TYPE_DIRECT | TYPE_ABSTRACT		6125628	0		|			
ANR	6125858	Identifier	TYPE_DIRECT		6125628	0					
ANR	6125859	Identifier	TYPE_ABSTRACT		6125628	1					
ANR	6125860	IfStatement	if ( ( pt . t & VT_BTYPE ) == VT_VOID )		6125628	4					
ANR	6125861	Condition	( pt . t & VT_BTYPE ) == VT_VOID	1536:9:36531:36558	6125628	0	True				
ANR	6125862	EqualityExpression	( pt . t & VT_BTYPE ) == VT_VOID		6125628	0		==			
ANR	6125863	BitAndExpression	pt . t & VT_BTYPE		6125628	0		&			
ANR	6125864	MemberAccess	pt . t		6125628	0					
ANR	6125865	Identifier	pt		6125628	0					
ANR	6125866	Identifier	t		6125628	1					
ANR	6125867	Identifier	VT_BTYPE		6125628	1					
ANR	6125868	Identifier	VT_VOID		6125628	1					
ANR	6125869	CompoundStatement		41:39:980:980	6125628	1					
ANR	6125870	ExpressionStatement	"TCC_ERR ( ""parameter declared as void"" )"	1537:6:36569:36607	6125628	0	True				
ANR	6125871	CallExpression	"TCC_ERR ( ""parameter declared as void"" )"		6125628	0					
ANR	6125872	Callee	TCC_ERR		6125628	0					
ANR	6125873	Identifier	TCC_ERR		6125628	0					
ANR	6125874	ArgumentList	"""parameter declared as void"""		6125628	1					
ANR	6125875	Argument	"""parameter declared as void"""		6125628	0					
ANR	6125876	PrimaryExpression	"""parameter declared as void"""		6125628	0					
ANR	6125877	ExpressionStatement	"arg_size += ( type_size ( & pt , & align ) + PTR_SIZE - 1 ) / PTR_SIZE"	1539:5:36621:36684	6125628	5	True				
ANR	6125878	AssignmentExpression	"arg_size += ( type_size ( & pt , & align ) + PTR_SIZE - 1 ) / PTR_SIZE"		6125628	0		+=			
ANR	6125879	Identifier	arg_size		6125628	0					
ANR	6125880	MultiplicativeExpression	"( type_size ( & pt , & align ) + PTR_SIZE - 1 ) / PTR_SIZE"		6125628	1		/			
ANR	6125881	AdditiveExpression	"type_size ( & pt , & align ) + PTR_SIZE - 1"		6125628	0		+			
ANR	6125882	CallExpression	"type_size ( & pt , & align )"		6125628	0					
ANR	6125883	Callee	type_size		6125628	0					
ANR	6125884	Identifier	type_size		6125628	0					
ANR	6125885	ArgumentList	& pt		6125628	1					
ANR	6125886	Argument	& pt		6125628	0					
ANR	6125887	UnaryOperationExpression	& pt		6125628	0					
ANR	6125888	UnaryOperator	&		6125628	0					
ANR	6125889	Identifier	pt		6125628	1					
ANR	6125890	Argument	& align		6125628	1					
ANR	6125891	UnaryOperationExpression	& align		6125628	0					
ANR	6125892	UnaryOperator	&		6125628	0					
ANR	6125893	Identifier	align		6125628	1					
ANR	6125894	AdditiveExpression	PTR_SIZE - 1		6125628	1		-			
ANR	6125895	Identifier	PTR_SIZE		6125628	0					
ANR	6125896	PrimaryExpression	1		6125628	1					
ANR	6125897	Identifier	PTR_SIZE		6125628	1					
ANR	6125898	ElseStatement	else		6125628	0					
ANR	6125899	CompoundStatement		45:11:1116:1116	6125628	0					
ANR	6125900	Label	old_proto :	1541:0:36699:36708	6125628	0	True				
ANR	6125901	Identifier	old_proto		6125628	0					
ANR	6125902	ExpressionStatement	n = tok	1542:5:36715:36722	6125628	1	True				
ANR	6125903	AssignmentExpression	n = tok		6125628	0		=			
ANR	6125904	Identifier	n		6125628	0					
ANR	6125905	Identifier	tok		6125628	1					
ANR	6125906	IfStatement	if ( n < TOK_UIDENT )		6125628	2					
ANR	6125907	Condition	n < TOK_UIDENT	1543:9:36733:36746	6125628	0	True				
ANR	6125908	RelationalExpression	n < TOK_UIDENT		6125628	0		<			
ANR	6125909	Identifier	n		6125628	0					
ANR	6125910	Identifier	TOK_UIDENT		6125628	1					
ANR	6125911	CompoundStatement		48:25:1168:1168	6125628	1					
ANR	6125912	ExpressionStatement	"expect ( ""identifier"" )"	1544:6:36757:36778	6125628	0	True				
ANR	6125913	CallExpression	"expect ( ""identifier"" )"		6125628	0					
ANR	6125914	Callee	expect		6125628	0					
ANR	6125915	Identifier	expect		6125628	0					
ANR	6125916	ArgumentList	"""identifier"""		6125628	1					
ANR	6125917	Argument	"""identifier"""		6125628	0					
ANR	6125918	PrimaryExpression	"""identifier"""		6125628	0					
ANR	6125919	ExpressionStatement	pt . t = VT_INT32	1546:5:36792:36807	6125628	3	True				
ANR	6125920	AssignmentExpression	pt . t = VT_INT32		6125628	0		=			
ANR	6125921	MemberAccess	pt . t		6125628	0					
ANR	6125922	Identifier	pt		6125628	0					
ANR	6125923	Identifier	t		6125628	1					
ANR	6125924	Identifier	VT_INT32		6125628	1					
ANR	6125925	ExpressionStatement	next ( )	1547:5:36814:36821	6125628	4	True				
ANR	6125926	CallExpression	next ( )		6125628	0					
ANR	6125927	Callee	next		6125628	0					
ANR	6125928	Identifier	next		6125628	0					
ANR	6125929	ArgumentList			6125628	1					
ANR	6125930	ExpressionStatement	convert_parameter_type ( & pt )	1549:4:36833:36861	6125628	1	True				
ANR	6125931	CallExpression	convert_parameter_type ( & pt )		6125628	0					
ANR	6125932	Callee	convert_parameter_type		6125628	0					
ANR	6125933	Identifier	convert_parameter_type		6125628	0					
ANR	6125934	ArgumentList	& pt		6125628	1					
ANR	6125935	Argument	& pt		6125628	0					
ANR	6125936	UnaryOperationExpression	& pt		6125628	0					
ANR	6125937	UnaryOperator	&		6125628	0					
ANR	6125938	Identifier	pt		6125628	1					
ANR	6125939	ExpressionStatement	"s = sym_push ( n | SYM_FIELD , & pt , 0 , 0 )"	1550:4:36867:36906	6125628	2	True				
ANR	6125940	AssignmentExpression	"s = sym_push ( n | SYM_FIELD , & pt , 0 , 0 )"		6125628	0		=			
ANR	6125941	Identifier	s		6125628	0					
ANR	6125942	CallExpression	"sym_push ( n | SYM_FIELD , & pt , 0 , 0 )"		6125628	1					
ANR	6125943	Callee	sym_push		6125628	0					
ANR	6125944	Identifier	sym_push		6125628	0					
ANR	6125945	ArgumentList	n | SYM_FIELD		6125628	1					
ANR	6125946	Argument	n | SYM_FIELD		6125628	0					
ANR	6125947	InclusiveOrExpression	n | SYM_FIELD		6125628	0		|			
ANR	6125948	Identifier	n		6125628	0					
ANR	6125949	Identifier	SYM_FIELD		6125628	1					
ANR	6125950	Argument	& pt		6125628	1					
ANR	6125951	UnaryOperationExpression	& pt		6125628	0					
ANR	6125952	UnaryOperator	&		6125628	0					
ANR	6125953	Identifier	pt		6125628	1					
ANR	6125954	Argument	0		6125628	2					
ANR	6125955	PrimaryExpression	0		6125628	0					
ANR	6125956	Argument	0		6125628	3					
ANR	6125957	PrimaryExpression	0		6125628	0					
ANR	6125958	IfStatement	if ( ! s )		6125628	3					
ANR	6125959	Condition	! s	1551:8:36916:36917	6125628	0	True				
ANR	6125960	UnaryOperationExpression	! s		6125628	0					
ANR	6125961	UnaryOperator	!		6125628	0					
ANR	6125962	Identifier	s		6125628	1					
ANR	6125963	CompoundStatement		56:12:1339:1339	6125628	1					
ANR	6125964	ReturnStatement	return ;	1552:5:36927:36933	6125628	0	True				
ANR	6125965	ElseStatement	else		6125628	0					
ANR	6125966	CompoundStatement		59:5:1372:1387	6125628	0					
ANR	6125967	IdentifierDeclStatement	char kind [ 1024 ] ;	1554:5:36953:36968	6125628	0	True				
ANR	6125968	IdentifierDecl	kind [ 1024 ]		6125628	0					
ANR	6125969	IdentifierDeclType	char [ 1024 ]		6125628	0					
ANR	6125970	Identifier	kind		6125628	1					
ANR	6125971	PrimaryExpression	1024		6125628	2					
ANR	6125972	ExpressionStatement	"type_to_str ( kind , sizeof ( kind ) , & pt , NULL )"	1555:5:36975:37019	6125628	1	True				
ANR	6125973	CallExpression	"type_to_str ( kind , sizeof ( kind ) , & pt , NULL )"		6125628	0					
ANR	6125974	Callee	type_to_str		6125628	0					
ANR	6125975	Identifier	type_to_str		6125628	0					
ANR	6125976	ArgumentList	kind		6125628	1					
ANR	6125977	Argument	kind		6125628	0					
ANR	6125978	Identifier	kind		6125628	0					
ANR	6125979	Argument	sizeof ( kind )		6125628	1					
ANR	6125980	SizeofExpression	sizeof ( kind )		6125628	0					
ANR	6125981	Sizeof	sizeof		6125628	0					
ANR	6125982	SizeofOperand	kind		6125628	1					
ANR	6125983	Argument	& pt		6125628	2					
ANR	6125984	UnaryOperationExpression	& pt		6125628	0					
ANR	6125985	UnaryOperator	&		6125628	0					
ANR	6125986	Identifier	pt		6125628	1					
ANR	6125987	Argument	NULL		6125628	3					
ANR	6125988	Identifier	NULL		6125628	0					
ANR	6125989	ExpressionStatement	"tcc_appendf ( ""func.%s.arg.%d=%s,%s\\n"" , symname , narg , kind , global_symname )"	1556:5:37026:37107	6125628	2	True				
ANR	6125990	CallExpression	"tcc_appendf ( ""func.%s.arg.%d=%s,%s\\n"" , symname , narg , kind , global_symname )"		6125628	0					
ANR	6125991	Callee	tcc_appendf		6125628	0					
ANR	6125992	Identifier	tcc_appendf		6125628	0					
ANR	6125993	ArgumentList	"""func.%s.arg.%d=%s,%s\\n"""		6125628	1					
ANR	6125994	Argument	"""func.%s.arg.%d=%s,%s\\n"""		6125628	0					
ANR	6125995	PrimaryExpression	"""func.%s.arg.%d=%s,%s\\n"""		6125628	0					
ANR	6125996	Argument	symname		6125628	1					
ANR	6125997	Identifier	symname		6125628	0					
ANR	6125998	Argument	narg		6125628	2					
ANR	6125999	Identifier	narg		6125628	0					
ANR	6126000	Argument	kind		6125628	3					
ANR	6126001	Identifier	kind		6125628	0					
ANR	6126002	Argument	global_symname		6125628	4					
ANR	6126003	Identifier	global_symname		6125628	0					
ANR	6126004	ExpressionStatement	narg ++	1558:5:37114:37120	6125628	3	True				
ANR	6126005	PostIncDecOperationExpression	narg ++		6125628	0					
ANR	6126006	Identifier	narg		6125628	0					
ANR	6126007	IncDec	++		6125628	1					
ANR	6126008	ExpressionStatement	* plast = s	1560:4:37132:37142	6125628	4	True				
ANR	6126009	AssignmentExpression	* plast = s		6125628	0		=			
ANR	6126010	UnaryOperationExpression	* plast		6125628	0					
ANR	6126011	UnaryOperator	*		6125628	0					
ANR	6126012	Identifier	plast		6125628	1					
ANR	6126013	Identifier	s		6125628	1					
ANR	6126014	ExpressionStatement	plast = & s -> next	1561:4:37148:37164	6125628	5	True				
ANR	6126015	AssignmentExpression	plast = & s -> next		6125628	0		=			
ANR	6126016	Identifier	plast		6125628	0					
ANR	6126017	UnaryOperationExpression	& s -> next		6125628	1					
ANR	6126018	UnaryOperator	&		6125628	0					
ANR	6126019	PtrMemberAccess	s -> next		6125628	1					
ANR	6126020	Identifier	s		6125628	0					
ANR	6126021	Identifier	next		6125628	1					
ANR	6126022	IfStatement	if ( tok == ')' )		6125628	6					
ANR	6126023	Condition	tok == ')'	1562:8:37174:37183	6125628	0	True				
ANR	6126024	EqualityExpression	tok == ')'		6125628	0		==			
ANR	6126025	Identifier	tok		6125628	0					
ANR	6126026	PrimaryExpression	')'		6125628	1					
ANR	6126027	CompoundStatement		67:20:1605:1605	6125628	1					
ANR	6126028	BreakStatement	break ;	1563:5:37193:37198	6125628	0	True				
ANR	6126029	ExpressionStatement	"skip ( ',' )"	1565:4:37210:37220	6125628	7	True				
ANR	6126030	CallExpression	"skip ( ',' )"		6125628	0					
ANR	6126031	Callee	skip		6125628	0					
ANR	6126032	Identifier	skip		6125628	0					
ANR	6126033	ArgumentList	"','"		6125628	1					
ANR	6126034	Argument	"','"		6125628	0					
ANR	6126035	PrimaryExpression	"','"		6125628	0					
ANR	6126036	IfStatement	if ( l == FUNC_NEW && tok == TOK_DOTS )		6125628	8					
ANR	6126037	Condition	l == FUNC_NEW && tok == TOK_DOTS	1566:8:37230:37261	6125628	0	True				
ANR	6126038	AndExpression	l == FUNC_NEW && tok == TOK_DOTS		6125628	0		&&			
ANR	6126039	EqualityExpression	l == FUNC_NEW		6125628	0		==			
ANR	6126040	Identifier	l		6125628	0					
ANR	6126041	Identifier	FUNC_NEW		6125628	1					
ANR	6126042	EqualityExpression	tok == TOK_DOTS		6125628	1		==			
ANR	6126043	Identifier	tok		6125628	0					
ANR	6126044	Identifier	TOK_DOTS		6125628	1					
ANR	6126045	CompoundStatement		71:42:1683:1683	6125628	1					
ANR	6126046	ExpressionStatement	l = FUNC_ELLIPSIS	1567:5:37271:37288	6125628	0	True				
ANR	6126047	AssignmentExpression	l = FUNC_ELLIPSIS		6125628	0		=			
ANR	6126048	Identifier	l		6125628	0					
ANR	6126049	Identifier	FUNC_ELLIPSIS		6125628	1					
ANR	6126050	ExpressionStatement	next ( )	1568:5:37295:37302	6125628	1	True				
ANR	6126051	CallExpression	next ( )		6125628	0					
ANR	6126052	Callee	next		6125628	0					
ANR	6126053	Identifier	next		6125628	0					
ANR	6126054	ArgumentList			6125628	1					
ANR	6126055	BreakStatement	break ;	1569:5:37309:37314	6125628	2	True				
ANR	6126056	ExpressionStatement	"tcc_appendf ( ""func.%s.args=%d\\n"" , symname , narg )"	1573:2:37333:37381	6125628	7	True				
ANR	6126057	CallExpression	"tcc_appendf ( ""func.%s.args=%d\\n"" , symname , narg )"		6125628	0					
ANR	6126058	Callee	tcc_appendf		6125628	0					
ANR	6126059	Identifier	tcc_appendf		6125628	0					
ANR	6126060	ArgumentList	"""func.%s.args=%d\\n"""		6125628	1					
ANR	6126061	Argument	"""func.%s.args=%d\\n"""		6125628	0					
ANR	6126062	PrimaryExpression	"""func.%s.args=%d\\n"""		6125628	0					
ANR	6126063	Argument	symname		6125628	1					
ANR	6126064	Identifier	symname		6125628	0					
ANR	6126065	Argument	narg		6125628	2					
ANR	6126066	Identifier	narg		6125628	0					
ANR	6126067	IfStatement	if ( l == 0 )		6125628	8					
ANR	6126068	Condition	l == 0	1575:6:37439:37444	6125628	0	True				
ANR	6126069	EqualityExpression	l == 0		6125628	0		==			
ANR	6126070	Identifier	l		6125628	0					
ANR	6126071	PrimaryExpression	0		6125628	1					
ANR	6126072	CompoundStatement		80:14:1866:1866	6125628	1					
ANR	6126073	ExpressionStatement	l = FUNC_OLD	1576:3:37452:37464	6125628	0	True				
ANR	6126074	AssignmentExpression	l = FUNC_OLD		6125628	0		=			
ANR	6126075	Identifier	l		6125628	0					
ANR	6126076	Identifier	FUNC_OLD		6125628	1					
ANR	6126077	ExpressionStatement	skip ( ')' )	1578:2:37472:37482	6125628	9	True				
ANR	6126078	CallExpression	skip ( ')' )		6125628	0					
ANR	6126079	Callee	skip		6125628	0					
ANR	6126080	Identifier	skip		6125628	0					
ANR	6126081	ArgumentList	')'		6125628	1					
ANR	6126082	Argument	')'		6125628	0					
ANR	6126083	PrimaryExpression	')'		6125628	0					
ANR	6126084	ExpressionStatement	type -> t &= ~VT_CONSTANT	1581:2:37580:37603	6125628	10	True				
ANR	6126085	AssignmentExpression	type -> t &= ~VT_CONSTANT		6125628	0		&=			
ANR	6126086	PtrMemberAccess	type -> t		6125628	0					
ANR	6126087	Identifier	type		6125628	0					
ANR	6126088	Identifier	t		6125628	1					
ANR	6126089	Identifier	~VT_CONSTANT		6125628	1					
ANR	6126090	IfStatement	if ( tok == '[' )		6125628	11					
ANR	6126091	Condition	tok == '['	1585:6:37798:37807	6125628	0	True				
ANR	6126092	EqualityExpression	tok == '['		6125628	0		==			
ANR	6126093	Identifier	tok		6125628	0					
ANR	6126094	PrimaryExpression	'['		6125628	1					
ANR	6126095	CompoundStatement		90:18:2229:2229	6125628	1					
ANR	6126096	ExpressionStatement	next ( )	1586:3:37815:37822	6125628	0	True				
ANR	6126097	CallExpression	next ( )		6125628	0					
ANR	6126098	Callee	next		6125628	0					
ANR	6126099	Identifier	next		6125628	0					
ANR	6126100	ArgumentList			6125628	1					
ANR	6126101	ExpressionStatement	skip ( ']' )	1587:3:37827:37837	6125628	1	True				
ANR	6126102	CallExpression	skip ( ']' )		6125628	0					
ANR	6126103	Callee	skip		6125628	0					
ANR	6126104	Identifier	skip		6125628	0					
ANR	6126105	ArgumentList	']'		6125628	1					
ANR	6126106	Argument	']'		6125628	0					
ANR	6126107	PrimaryExpression	']'		6125628	0					
ANR	6126108	ExpressionStatement	type -> t |= VT_PTR	1588:3:37872:37889	6125628	2	True				
ANR	6126109	AssignmentExpression	type -> t |= VT_PTR		6125628	0		|=			
ANR	6126110	PtrMemberAccess	type -> t		6125628	0					
ANR	6126111	Identifier	type		6125628	0					
ANR	6126112	Identifier	t		6125628	1					
ANR	6126113	Identifier	VT_PTR		6125628	1					
ANR	6126114	ExpressionStatement	ad -> func_args = arg_size	1591:2:37974:37998	6125628	12	True				
ANR	6126115	AssignmentExpression	ad -> func_args = arg_size		6125628	0		=			
ANR	6126116	PtrMemberAccess	ad -> func_args		6125628	0					
ANR	6126117	Identifier	ad		6125628	0					
ANR	6126118	Identifier	func_args		6125628	1					
ANR	6126119	Identifier	arg_size		6125628	1					
ANR	6126120	ExpressionStatement	"s = sym_push ( SYM_FIELD , type , INT_ATTR ( ad ) , l )"	1592:2:38002:38050	6125628	13	True				
ANR	6126121	AssignmentExpression	"s = sym_push ( SYM_FIELD , type , INT_ATTR ( ad ) , l )"		6125628	0		=			
ANR	6126122	Identifier	s		6125628	0					
ANR	6126123	CallExpression	"sym_push ( SYM_FIELD , type , INT_ATTR ( ad ) , l )"		6125628	1					
ANR	6126124	Callee	sym_push		6125628	0					
ANR	6126125	Identifier	sym_push		6125628	0					
ANR	6126126	ArgumentList	SYM_FIELD		6125628	1					
ANR	6126127	Argument	SYM_FIELD		6125628	0					
ANR	6126128	Identifier	SYM_FIELD		6125628	0					
ANR	6126129	Argument	type		6125628	1					
ANR	6126130	Identifier	type		6125628	0					
ANR	6126131	Argument	INT_ATTR ( ad )		6125628	2					
ANR	6126132	CallExpression	INT_ATTR ( ad )		6125628	0					
ANR	6126133	Callee	INT_ATTR		6125628	0					
ANR	6126134	Identifier	INT_ATTR		6125628	0					
ANR	6126135	ArgumentList	ad		6125628	1					
ANR	6126136	Argument	ad		6125628	0					
ANR	6126137	Identifier	ad		6125628	0					
ANR	6126138	Argument	l		6125628	3					
ANR	6126139	Identifier	l		6125628	0					
ANR	6126140	IfStatement	if ( ! s )		6125628	14					
ANR	6126141	Condition	! s	1593:6:38058:38059	6125628	0	True				
ANR	6126142	UnaryOperationExpression	! s		6125628	0					
ANR	6126143	UnaryOperator	!		6125628	0					
ANR	6126144	Identifier	s		6125628	1					
ANR	6126145	CompoundStatement		98:10:2481:2481	6125628	1					
ANR	6126146	ReturnStatement	return ;	1594:3:38067:38073	6125628	0	True				
ANR	6126147	ExpressionStatement	s -> next = first	1596:2:38081:38096	6125628	15	True				
ANR	6126148	AssignmentExpression	s -> next = first		6125628	0		=			
ANR	6126149	PtrMemberAccess	s -> next		6125628	0					
ANR	6126150	Identifier	s		6125628	0					
ANR	6126151	Identifier	next		6125628	1					
ANR	6126152	Identifier	first		6125628	1					
ANR	6126153	ExpressionStatement	type -> t = VT_FUNC	1597:2:38100:38117	6125628	16	True				
ANR	6126154	AssignmentExpression	type -> t = VT_FUNC		6125628	0		=			
ANR	6126155	PtrMemberAccess	type -> t		6125628	0					
ANR	6126156	Identifier	type		6125628	0					
ANR	6126157	Identifier	t		6125628	1					
ANR	6126158	Identifier	VT_FUNC		6125628	1					
ANR	6126159	ExpressionStatement	type -> ref = s	1598:2:38121:38134	6125628	17	True				
ANR	6126160	AssignmentExpression	type -> ref = s		6125628	0		=			
ANR	6126161	PtrMemberAccess	type -> ref		6125628	0					
ANR	6126162	Identifier	type		6125628	0					
ANR	6126163	Identifier	ref		6125628	1					
ANR	6126164	Identifier	s		6125628	1					
ANR	6126165	ExpressionStatement	R_FREE ( symname )	1599:2:38138:38154	6125628	18	True				
ANR	6126166	CallExpression	R_FREE ( symname )		6125628	0					
ANR	6126167	Callee	R_FREE		6125628	0					
ANR	6126168	Identifier	R_FREE		6125628	0					
ANR	6126169	ArgumentList	symname		6125628	1					
ANR	6126170	Argument	symname		6125628	0					
ANR	6126171	Identifier	symname		6125628	0					
ANR	6126172	ElseStatement	else		6125628	0					
ANR	6126173	IfStatement	if ( tok == '[' )		6125628	0					
ANR	6126174	Condition	tok == '['	1600:12:38168:38177	6125628	0	True				
ANR	6126175	EqualityExpression	tok == '['		6125628	0		==			
ANR	6126176	Identifier	tok		6125628	0					
ANR	6126177	PrimaryExpression	'['		6125628	1					
ANR	6126178	CompoundStatement		105:24:2599:2599	6125628	1					
ANR	6126179	ExpressionStatement	next ( )	1602:2:38209:38216	6125628	0	True				
ANR	6126180	CallExpression	next ( )		6125628	0					
ANR	6126181	Callee	next		6125628	0					
ANR	6126182	Identifier	next		6125628	0					
ANR	6126183	ArgumentList			6125628	1					
ANR	6126184	IfStatement	if ( tok == TOK_RESTRICT1 )		6125628	1					
ANR	6126185	Condition	tok == TOK_RESTRICT1	1603:6:38224:38243	6125628	0	True				
ANR	6126186	EqualityExpression	tok == TOK_RESTRICT1		6125628	0		==			
ANR	6126187	Identifier	tok		6125628	0					
ANR	6126188	Identifier	TOK_RESTRICT1		6125628	1					
ANR	6126189	CompoundStatement		108:28:2665:2665	6125628	1					
ANR	6126190	ExpressionStatement	next ( )	1604:3:38251:38258	6125628	0	True				
ANR	6126191	CallExpression	next ( )		6125628	0					
ANR	6126192	Callee	next		6125628	0					
ANR	6126193	Identifier	next		6125628	0					
ANR	6126194	ArgumentList			6125628	1					
ANR	6126195	ExpressionStatement	n = - 1	1606:2:38266:38272	6125628	2	True				
ANR	6126196	AssignmentExpression	n = - 1		6125628	0		=			
ANR	6126197	Identifier	n		6125628	0					
ANR	6126198	UnaryOperationExpression	- 1		6125628	1					
ANR	6126199	UnaryOperator	-		6125628	0					
ANR	6126200	PrimaryExpression	1		6125628	1					
ANR	6126201	ExpressionStatement	t1 = 0	1607:2:38276:38282	6125628	3	True				
ANR	6126202	AssignmentExpression	t1 = 0		6125628	0		=			
ANR	6126203	Identifier	t1		6125628	0					
ANR	6126204	PrimaryExpression	0		6125628	1					
ANR	6126205	IfStatement	if ( tok != ']' )		6125628	4					
ANR	6126206	Condition	tok != ']'	1608:6:38290:38299	6125628	0	True				
ANR	6126207	EqualityExpression	tok != ']'		6125628	0		!=			
ANR	6126208	Identifier	tok		6125628	0					
ANR	6126209	PrimaryExpression	']'		6125628	1					
ANR	6126210	CompoundStatement		113:18:2721:2721	6125628	1					
ANR	6126211	IfStatement	if ( ! local_stack || nocode_wanted )		6125628	0					
ANR	6126212	Condition	! local_stack || nocode_wanted	1609:7:38311:38339	6125628	0	True				
ANR	6126213	OrExpression	! local_stack || nocode_wanted		6125628	0		||			
ANR	6126214	UnaryOperationExpression	! local_stack		6125628	0					
ANR	6126215	UnaryOperator	!		6125628	0					
ANR	6126216	Identifier	local_stack		6125628	1					
ANR	6126217	Identifier	nocode_wanted		6125628	1					
ANR	6126218	CompoundStatement		114:38:2761:2761	6125628	1					
ANR	6126219	ExpressionStatement	vpushll ( expr_const ( ) )	1610:4:38348:38371	6125628	0	True				
ANR	6126220	CallExpression	vpushll ( expr_const ( ) )		6125628	0					
ANR	6126221	Callee	vpushll		6125628	0					
ANR	6126222	Identifier	vpushll		6125628	0					
ANR	6126223	ArgumentList	expr_const ( )		6125628	1					
ANR	6126224	Argument	expr_const ( )		6125628	0					
ANR	6126225	CallExpression	expr_const ( )		6125628	0					
ANR	6126226	Callee	expr_const		6125628	0					
ANR	6126227	Identifier	expr_const		6125628	0					
ANR	6126228	ArgumentList			6125628	1					
ANR	6126229	ElseStatement	else		6125628	0					
ANR	6126230	CompoundStatement		116:10:2802:2802	6125628	0					
ANR	6126231	ExpressionStatement	gexpr ( )	1612:4:38389:38397	6125628	0	True				
ANR	6126232	CallExpression	gexpr ( )		6125628	0					
ANR	6126233	Callee	gexpr		6125628	0					
ANR	6126234	Identifier	gexpr		6125628	0					
ANR	6126235	ArgumentList			6125628	1					
ANR	6126236	IfStatement	if ( ( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST )		6125628	1					
ANR	6126237	Condition	( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST	1614:7:38411:38465	6125628	0	True				
ANR	6126238	EqualityExpression	( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST		6125628	0		==			
ANR	6126239	BitAndExpression	vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM )		6125628	0		&			
ANR	6126240	PtrMemberAccess	vtop -> r		6125628	0					
ANR	6126241	Identifier	vtop		6125628	0					
ANR	6126242	Identifier	r		6125628	1					
ANR	6126243	InclusiveOrExpression	VT_VALMASK | VT_LVAL | VT_SYM		6125628	1		|			
ANR	6126244	Identifier	VT_VALMASK		6125628	0					
ANR	6126245	InclusiveOrExpression	VT_LVAL | VT_SYM		6125628	1		|			
ANR	6126246	Identifier	VT_LVAL		6125628	0					
ANR	6126247	Identifier	VT_SYM		6125628	1					
ANR	6126248	Identifier	VT_CONST		6125628	1					
ANR	6126249	CompoundStatement		119:64:2887:2887	6125628	1					
ANR	6126250	ExpressionStatement	n = vtop -> c . i	1615:4:38474:38487	6125628	0	True				
ANR	6126251	AssignmentExpression	n = vtop -> c . i		6125628	0		=			
ANR	6126252	Identifier	n		6125628	0					
ANR	6126253	MemberAccess	vtop -> c . i		6125628	1					
ANR	6126254	PtrMemberAccess	vtop -> c		6125628	0					
ANR	6126255	Identifier	vtop		6125628	0					
ANR	6126256	Identifier	c		6125628	1					
ANR	6126257	Identifier	i		6125628	1					
ANR	6126258	IfStatement	if ( n < 0 )		6125628	1					
ANR	6126259	Condition	n < 0	1616:8:38497:38501	6125628	0	True				
ANR	6126260	RelationalExpression	n < 0		6125628	0		<			
ANR	6126261	Identifier	n		6125628	0					
ANR	6126262	PrimaryExpression	0		6125628	1					
ANR	6126263	CompoundStatement		121:15:2923:2923	6125628	1					
ANR	6126264	ExpressionStatement	"TCC_ERR ( ""invalid array size"" )"	1617:5:38511:38541	6125628	0	True				
ANR	6126265	CallExpression	"TCC_ERR ( ""invalid array size"" )"		6125628	0					
ANR	6126266	Callee	TCC_ERR		6125628	0					
ANR	6126267	Identifier	TCC_ERR		6125628	0					
ANR	6126268	ArgumentList	"""invalid array size"""		6125628	1					
ANR	6126269	Argument	"""invalid array size"""		6125628	0					
ANR	6126270	PrimaryExpression	"""invalid array size"""		6125628	0					
ANR	6126271	ElseStatement	else		6125628	0					
ANR	6126272	CompoundStatement		124:10:2978:2978	6125628	0					
ANR	6126273	IfStatement	if ( ! is_integer_btype ( vtop -> type . t & VT_BTYPE ) )		6125628	0					
ANR	6126274	Condition	! is_integer_btype ( vtop -> type . t & VT_BTYPE )	1620:8:38569:38611	6125628	0	True				
ANR	6126275	UnaryOperationExpression	! is_integer_btype ( vtop -> type . t & VT_BTYPE )		6125628	0					
ANR	6126276	UnaryOperator	!		6125628	0					
ANR	6126277	CallExpression	is_integer_btype ( vtop -> type . t & VT_BTYPE )		6125628	1					
ANR	6126278	Callee	is_integer_btype		6125628	0					
ANR	6126279	Identifier	is_integer_btype		6125628	0					
ANR	6126280	ArgumentList	vtop -> type . t & VT_BTYPE		6125628	1					
ANR	6126281	Argument	vtop -> type . t & VT_BTYPE		6125628	0					
ANR	6126282	BitAndExpression	vtop -> type . t & VT_BTYPE		6125628	0		&			
ANR	6126283	MemberAccess	vtop -> type . t		6125628	0					
ANR	6126284	PtrMemberAccess	vtop -> type		6125628	0					
ANR	6126285	Identifier	vtop		6125628	0					
ANR	6126286	Identifier	type		6125628	1					
ANR	6126287	Identifier	t		6125628	1					
ANR	6126288	Identifier	VT_BTYPE		6125628	1					
ANR	6126289	CompoundStatement		125:53:3033:3033	6125628	1					
ANR	6126290	ExpressionStatement	"TCC_ERR ( ""size of variable length array should be an integer"" )"	1621:5:38621:38683	6125628	0	True				
ANR	6126291	CallExpression	"TCC_ERR ( ""size of variable length array should be an integer"" )"		6125628	0					
ANR	6126292	Callee	TCC_ERR		6125628	0					
ANR	6126293	Identifier	TCC_ERR		6125628	0					
ANR	6126294	ArgumentList	"""size of variable length array should be an integer"""		6125628	1					
ANR	6126295	Argument	"""size of variable length array should be an integer"""		6125628	0					
ANR	6126296	PrimaryExpression	"""size of variable length array should be an integer"""		6125628	0					
ANR	6126297	ExpressionStatement	t1 = VT_VLA	1623:4:38695:38706	6125628	1	True				
ANR	6126298	AssignmentExpression	t1 = VT_VLA		6125628	0		=			
ANR	6126299	Identifier	t1		6125628	0					
ANR	6126300	Identifier	VT_VLA		6125628	1					
ANR	6126301	ExpressionStatement	skip ( ']' )	1626:2:38719:38729	6125628	5	True				
ANR	6126302	CallExpression	skip ( ']' )		6125628	0					
ANR	6126303	Callee	skip		6125628	0					
ANR	6126304	Identifier	skip		6125628	0					
ANR	6126305	ArgumentList	']'		6125628	1					
ANR	6126306	Argument	']'		6125628	0					
ANR	6126307	PrimaryExpression	']'		6125628	0					
ANR	6126308	ExpressionStatement	"post_type ( type , ad )"	1628:2:38762:38782	6125628	6	True				
ANR	6126309	CallExpression	"post_type ( type , ad )"		6125628	0					
ANR	6126310	Callee	post_type		6125628	0					
ANR	6126311	Identifier	post_type		6125628	0					
ANR	6126312	ArgumentList	type		6125628	1					
ANR	6126313	Argument	type		6125628	0					
ANR	6126314	Identifier	type		6125628	0					
ANR	6126315	Argument	ad		6125628	1					
ANR	6126316	Identifier	ad		6125628	0					
ANR	6126317	ExpressionStatement	arraysize = n	1632:2:38870:38883	6125628	7	True				
ANR	6126318	AssignmentExpression	arraysize = n		6125628	0		=			
ANR	6126319	Identifier	arraysize		6125628	0					
ANR	6126320	Identifier	n		6125628	1					
ANR	6126321	IfStatement	if ( n < 0 )		6125628	8					
ANR	6126322	Condition	n < 0	1634:6:38897:38901	6125628	0	True				
ANR	6126323	RelationalExpression	n < 0		6125628	0		<			
ANR	6126324	Identifier	n		6125628	0					
ANR	6126325	PrimaryExpression	0		6125628	1					
ANR	6126326	CompoundStatement		139:13:3323:3323	6125628	1					
ANR	6126327	ExpressionStatement	"printf ( ""array with no size []\\n"" )"	1635:3:38909:38943	6125628	0	True				
ANR	6126328	CallExpression	"printf ( ""array with no size []\\n"" )"		6125628	0					
ANR	6126329	Callee	printf		6125628	0					
ANR	6126330	Identifier	printf		6125628	0					
ANR	6126331	ArgumentList	"""array with no size []\\n"""		6125628	1					
ANR	6126332	Argument	"""array with no size []\\n"""		6125628	0					
ANR	6126333	PrimaryExpression	"""array with no size []\\n"""		6125628	0					
ANR	6126334	ElseStatement	else		6125628	0					
ANR	6126335	CompoundStatement		141:9:3373:3373	6125628	0					
ANR	6126336	ExpressionStatement	"printf ( ""PUSH SIZE %d\\n"" , n )"	1637:3:38959:38987	6125628	0	True				
ANR	6126337	CallExpression	"printf ( ""PUSH SIZE %d\\n"" , n )"		6125628	0					
ANR	6126338	Callee	printf		6125628	0					
ANR	6126339	Identifier	printf		6125628	0					
ANR	6126340	ArgumentList	"""PUSH SIZE %d\\n"""		6125628	1					
ANR	6126341	Argument	"""PUSH SIZE %d\\n"""		6125628	0					
ANR	6126342	PrimaryExpression	"""PUSH SIZE %d\\n"""		6125628	0					
ANR	6126343	Argument	n		6125628	1					
ANR	6126344	Identifier	n		6125628	0					
ANR	6126345	ExpressionStatement	"s = sym_push ( SYM_FIELD , type , 0 , n )"	1640:2:39002:39038	6125628	9	True				
ANR	6126346	AssignmentExpression	"s = sym_push ( SYM_FIELD , type , 0 , n )"		6125628	0		=			
ANR	6126347	Identifier	s		6125628	0					
ANR	6126348	CallExpression	"sym_push ( SYM_FIELD , type , 0 , n )"		6125628	1					
ANR	6126349	Callee	sym_push		6125628	0					
ANR	6126350	Identifier	sym_push		6125628	0					
ANR	6126351	ArgumentList	SYM_FIELD		6125628	1					
ANR	6126352	Argument	SYM_FIELD		6125628	0					
ANR	6126353	Identifier	SYM_FIELD		6125628	0					
ANR	6126354	Argument	type		6125628	1					
ANR	6126355	Identifier	type		6125628	0					
ANR	6126356	Argument	0		6125628	2					
ANR	6126357	PrimaryExpression	0		6125628	0					
ANR	6126358	Argument	n		6125628	3					
ANR	6126359	Identifier	n		6125628	0					
ANR	6126360	IfStatement	if ( ! s )		6125628	10					
ANR	6126361	Condition	! s	1641:6:39046:39047	6125628	0	True				
ANR	6126362	UnaryOperationExpression	! s		6125628	0					
ANR	6126363	UnaryOperator	!		6125628	0					
ANR	6126364	Identifier	s		6125628	1					
ANR	6126365	CompoundStatement		146:10:3469:3469	6125628	1					
ANR	6126366	ReturnStatement	return ;	1642:3:39055:39061	6125628	0	True				
ANR	6126367	ExpressionStatement	type -> t = ( t1 ? VT_VLA : VT_ARRAY ) | VT_PTR	1644:2:39069:39110	6125628	11	True				
ANR	6126368	AssignmentExpression	type -> t = ( t1 ? VT_VLA : VT_ARRAY ) | VT_PTR		6125628	0		=			
ANR	6126369	PtrMemberAccess	type -> t		6125628	0					
ANR	6126370	Identifier	type		6125628	0					
ANR	6126371	Identifier	t		6125628	1					
ANR	6126372	InclusiveOrExpression	( t1 ? VT_VLA : VT_ARRAY ) | VT_PTR		6125628	1		|			
ANR	6126373	ConditionalExpression	t1 ? VT_VLA : VT_ARRAY		6125628	0					
ANR	6126374	Condition	t1		6125628	0					
ANR	6126375	Identifier	t1		6125628	0					
ANR	6126376	Identifier	VT_VLA		6125628	1					
ANR	6126377	Identifier	VT_ARRAY		6125628	2					
ANR	6126378	Identifier	VT_PTR		6125628	1					
ANR	6126379	ExpressionStatement	type -> ref = s	1645:2:39114:39127	6125628	12	True				
ANR	6126380	AssignmentExpression	type -> ref = s		6125628	0		=			
ANR	6126381	PtrMemberAccess	type -> ref		6125628	0					
ANR	6126382	Identifier	type		6125628	0					
ANR	6126383	Identifier	ref		6125628	1					
ANR	6126384	Identifier	s		6125628	1					
ANR	6126385	ReturnType	static void		6125628	1					
ANR	6126386	Identifier	post_type		6125628	2					
ANR	6126387	ParameterList	"CType * type , AttributeDef * ad"		6125628	3					
ANR	6126388	Parameter	CType * type	1496:22:35549:35559	6125628	0	True				
ANR	6126389	ParameterType	CType *		6125628	0					
ANR	6126390	Identifier	type		6125628	1					
ANR	6126391	Parameter	AttributeDef * ad	1496:35:35562:35577	6125628	1	True				
ANR	6126392	ParameterType	AttributeDef *		6125628	0					
ANR	6126393	Identifier	ad		6125628	1					
ANR	6126394	CFGEntryNode	ENTRY		6125628		True				
ANR	6126395	CFGExitNode	EXIT		6125628		True				
ANR	6126396	Symbol	pt		6125628						
ANR	6126397	Symbol	type		6125628						
ANR	6126398	Symbol	align		6125628						
ANR	6126399	Symbol	global_type		6125628						
ANR	6126400	Symbol	type_size		6125628						
ANR	6126401	Symbol	SYM_FIELD		6125628						
ANR	6126402	Symbol	narg		6125628						
ANR	6126403	Symbol	VT_LVAL		6125628						
ANR	6126404	Symbol	parse_btype		6125628						
ANR	6126405	Symbol	& first		6125628						
ANR	6126406	Symbol	VT_CONST		6125628						
ANR	6126407	Symbol	ad		6125628						
ANR	6126408	Symbol	NULL		6125628						
ANR	6126409	Symbol	kind		6125628						
ANR	6126410	Symbol	vtop		6125628						
ANR	6126411	Symbol	VT_VALMASK		6125628						
ANR	6126412	Symbol	VT_SYM		6125628						
ANR	6126413	Symbol	tcc_nerr		6125628						
ANR	6126414	Symbol	VT_BTYPE		6125628						
ANR	6126415	Symbol	* plast		6125628						
ANR	6126416	Symbol	& pt		6125628						
ANR	6126417	Symbol	VT_FUNC		6125628						
ANR	6126418	Symbol	type -> t		6125628						
ANR	6126419	Symbol	TOK_DOTS		6125628						
ANR	6126420	Symbol	t1		6125628						
ANR	6126421	Symbol	VT_PTR		6125628						
ANR	6126422	Symbol	expr_const		6125628						
ANR	6126423	Symbol	ad -> func_args		6125628						
ANR	6126424	Symbol	global_symname		6125628						
ANR	6126425	Symbol	TYPE_DIRECT		6125628						
ANR	6126426	Symbol	arraysize		6125628						
ANR	6126427	Symbol	arg_size		6125628						
ANR	6126428	Symbol	VT_VLA		6125628						
ANR	6126429	Symbol	symname		6125628						
ANR	6126430	Symbol	~VT_CONSTANT		6125628						
ANR	6126431	Symbol	* ad		6125628						
ANR	6126432	Symbol	s -> next		6125628						
ANR	6126433	Symbol	vtop -> c		6125628						
ANR	6126434	Symbol	local_stack		6125628						
ANR	6126435	Symbol	tok		6125628						
ANR	6126436	Symbol	& ad1		6125628						
ANR	6126437	Symbol	* type		6125628						
ANR	6126438	Symbol	vtop -> type . t		6125628						
ANR	6126439	Symbol	plast		6125628						
ANR	6126440	Symbol	& align		6125628						
ANR	6126441	Symbol	TOK_UIDENT		6125628						
ANR	6126442	Symbol	nocode_wanted		6125628						
ANR	6126443	Symbol	VT_INT32		6125628						
ANR	6126444	Symbol	vtop -> c . i		6125628						
ANR	6126445	Symbol	TYPE_ABSTRACT		6125628						
ANR	6126446	Symbol	type -> ref		6125628						
ANR	6126447	Symbol	VT_VOID		6125628						
ANR	6126448	Symbol	& s -> next		6125628						
ANR	6126449	Symbol	ret_type		6125628						
ANR	6126450	Symbol	vtop -> type		6125628						
ANR	6126451	Symbol	PTR_SIZE		6125628						
ANR	6126452	Symbol	l		6125628						
ANR	6126453	Symbol	FUNC_ELLIPSIS		6125628						
ANR	6126454	Symbol	INT_ATTR		6125628						
ANR	6126455	Symbol	n		6125628						
ANR	6126456	Symbol	ad1		6125628						
ANR	6126457	Symbol	* vtop		6125628						
ANR	6126458	Symbol	s		6125628						
ANR	6126459	Symbol	& n		6125628						
ANR	6126460	Symbol	FUNC_OLD		6125628						
ANR	6126461	Symbol	pt . t		6125628						
ANR	6126462	Symbol	TOK_RESTRICT1		6125628						
ANR	6126463	Symbol	sym_push		6125628						
ANR	6126464	Symbol	vtop -> r		6125628						
ANR	6126465	Symbol	strdup		6125628						
ANR	6126466	Symbol	is_integer_btype		6125628						
ANR	6126467	Symbol	* s		6125628						
ANR	6126468	Symbol	first		6125628						
ANR	6126469	Symbol	FUNC_NEW		6125628						
ANR	6126470	Symbol	VT_ARRAY		6125628						
ANR	6126471	Function	type_decl	1655:0:39422:41671							
ANR	6126472	FunctionDef	"type_decl (CType * type , AttributeDef * ad , int * v , int td)"		6126471	0					
ANR	6126473	CompoundStatement		1655:69:39491:41671	6126471	0					
ANR	6126474	IdentifierDeclStatement	Sym * s ;	1656:1:39494:39500	6126471	0	True				
ANR	6126475	IdentifierDecl	* s		6126471	0					
ANR	6126476	IdentifierDeclType	Sym *		6126471	0					
ANR	6126477	Identifier	s		6126471	1					
ANR	6126478	IdentifierDeclStatement	"int qualifiers , storage ;"	1657:1:39503:39526	6126471	1	True				
ANR	6126479	IdentifierDecl	qualifiers		6126471	0					
ANR	6126480	IdentifierDeclType	int		6126471	0					
ANR	6126481	Identifier	qualifiers		6126471	1					
ANR	6126482	IdentifierDecl	storage		6126471	1					
ANR	6126483	IdentifierDeclType	int		6126471	0					
ANR	6126484	Identifier	storage		6126471	1					
ANR	6126485	IdentifierDeclStatement	CType * type1 = R_NEW0 ( CType ) ;	1658:1:39529:39558	6126471	2	True				
ANR	6126486	IdentifierDecl	* type1 = R_NEW0 ( CType )		6126471	0					
ANR	6126487	IdentifierDeclType	CType *		6126471	0					
ANR	6126488	Identifier	type1		6126471	1					
ANR	6126489	AssignmentExpression	* type1 = R_NEW0 ( CType )		6126471	2		=			
ANR	6126490	Identifier	type1		6126471	0					
ANR	6126491	CallExpression	R_NEW0 ( CType )		6126471	1					
ANR	6126492	Callee	R_NEW0		6126471	0					
ANR	6126493	Identifier	R_NEW0		6126471	0					
ANR	6126494	ArgumentList	CType		6126471	1					
ANR	6126495	Argument	CType		6126471	0					
ANR	6126496	Identifier	CType		6126471	0					
ANR	6126497	IdentifierDeclStatement	CType * type2 = R_NEW0 ( CType ) ;	1659:1:39561:39590	6126471	3	True				
ANR	6126498	IdentifierDecl	* type2 = R_NEW0 ( CType )		6126471	0					
ANR	6126499	IdentifierDeclType	CType *		6126471	0					
ANR	6126500	Identifier	type2		6126471	1					
ANR	6126501	AssignmentExpression	* type2 = R_NEW0 ( CType )		6126471	2		=			
ANR	6126502	Identifier	type2		6126471	0					
ANR	6126503	CallExpression	R_NEW0 ( CType )		6126471	1					
ANR	6126504	Callee	R_NEW0		6126471	0					
ANR	6126505	Identifier	R_NEW0		6126471	0					
ANR	6126506	ArgumentList	CType		6126471	1					
ANR	6126507	Argument	CType		6126471	0					
ANR	6126508	Identifier	CType		6126471	0					
ANR	6126509	IfStatement	if ( ! type1 || ! type2 )		6126471	4					
ANR	6126510	Condition	! type1 || ! type2	1660:5:39597:39612	6126471	0	True				
ANR	6126511	OrExpression	! type1 || ! type2		6126471	0		||			
ANR	6126512	UnaryOperationExpression	! type1		6126471	0					
ANR	6126513	UnaryOperator	!		6126471	0					
ANR	6126514	Identifier	type1		6126471	1					
ANR	6126515	UnaryOperationExpression	! type2		6126471	1					
ANR	6126516	UnaryOperator	!		6126471	0					
ANR	6126517	Identifier	type2		6126471	1					
ANR	6126518	CompoundStatement		6:23:123:123	6126471	1					
ANR	6126519	ExpressionStatement	free ( type1 )	1661:2:39619:39631	6126471	0	True				
ANR	6126520	CallExpression	free ( type1 )		6126471	0					
ANR	6126521	Callee	free		6126471	0					
ANR	6126522	Identifier	free		6126471	0					
ANR	6126523	ArgumentList	type1		6126471	1					
ANR	6126524	Argument	type1		6126471	0					
ANR	6126525	Identifier	type1		6126471	0					
ANR	6126526	ExpressionStatement	free ( type2 )	1662:2:39635:39647	6126471	1	True				
ANR	6126527	CallExpression	free ( type2 )		6126471	0					
ANR	6126528	Callee	free		6126471	0					
ANR	6126529	Identifier	free		6126471	0					
ANR	6126530	ArgumentList	type2		6126471	1					
ANR	6126531	Argument	type2		6126471	0					
ANR	6126532	Identifier	type2		6126471	0					
ANR	6126533	ReturnStatement	return ;	1663:2:39651:39657	6126471	2	True				
ANR	6126534	WhileStatement	while ( tok == '*' )		6126471	5					
ANR	6126535	Condition	tok == '*'	1666:8:39671:39680	6126471	0	True				
ANR	6126536	EqualityExpression	tok == '*'		6126471	0		==			
ANR	6126537	Identifier	tok		6126471	0					
ANR	6126538	PrimaryExpression	'*'		6126471	1					
ANR	6126539	CompoundStatement		12:20:191:191	6126471	1					
ANR	6126540	ExpressionStatement	qualifiers = 0	1667:2:39687:39701	6126471	0	True				
ANR	6126541	AssignmentExpression	qualifiers = 0		6126471	0		=			
ANR	6126542	Identifier	qualifiers		6126471	0					
ANR	6126543	PrimaryExpression	0		6126471	1					
ANR	6126544	Label	redo :	1668:0:39703:39707	6126471	1	True				
ANR	6126545	Identifier	redo		6126471	0					
ANR	6126546	ExpressionStatement	next ( )	1669:2:39711:39718	6126471	2	True				
ANR	6126547	CallExpression	next ( )		6126471	0					
ANR	6126548	Callee	next		6126471	0					
ANR	6126549	Identifier	next		6126471	0					
ANR	6126550	ArgumentList			6126471	1					
ANR	6126551	SwitchStatement	switch ( tok )		6126471	3					
ANR	6126552	Condition	tok	1670:10:39730:39732	6126471	0	True				
ANR	6126553	Identifier	tok		6126471	0					
ANR	6126554	CompoundStatement		16:15:243:243	6126471	1					
ANR	6126555	Label	case TOK_CONST1 :	1671:2:39739:39754	6126471	0	True				
ANR	6126556	Identifier	TOK_CONST1		6126471	0					
ANR	6126557	Label	case TOK_CONST2 :	1672:2:39758:39773	6126471	1	True				
ANR	6126558	Identifier	TOK_CONST2		6126471	0					
ANR	6126559	Label	case TOK_CONST3 :	1673:2:39777:39792	6126471	2	True				
ANR	6126560	Identifier	TOK_CONST3		6126471	0					
ANR	6126561	ExpressionStatement	qualifiers |= VT_CONSTANT	1674:3:39797:39822	6126471	3	True				
ANR	6126562	AssignmentExpression	qualifiers |= VT_CONSTANT		6126471	0		|=			
ANR	6126563	Identifier	qualifiers		6126471	0					
ANR	6126564	Identifier	VT_CONSTANT		6126471	1					
ANR	6126565	GotoStatement	goto redo ;	1675:3:39827:39836	6126471	4	True				
ANR	6126566	Identifier	redo		6126471	0					
ANR	6126567	Label	case TOK_VOLATILE1 :	1676:2:39840:39858	6126471	5	True				
ANR	6126568	Identifier	TOK_VOLATILE1		6126471	0					
ANR	6126569	Label	case TOK_VOLATILE2 :	1677:2:39862:39880	6126471	6	True				
ANR	6126570	Identifier	TOK_VOLATILE2		6126471	0					
ANR	6126571	Label	case TOK_VOLATILE3 :	1678:2:39884:39902	6126471	7	True				
ANR	6126572	Identifier	TOK_VOLATILE3		6126471	0					
ANR	6126573	ExpressionStatement	qualifiers |= VT_VOLATILE	1679:3:39907:39932	6126471	8	True				
ANR	6126574	AssignmentExpression	qualifiers |= VT_VOLATILE		6126471	0		|=			
ANR	6126575	Identifier	qualifiers		6126471	0					
ANR	6126576	Identifier	VT_VOLATILE		6126471	1					
ANR	6126577	GotoStatement	goto redo ;	1680:3:39937:39946	6126471	9	True				
ANR	6126578	Identifier	redo		6126471	0					
ANR	6126579	Label	case TOK_RESTRICT1 :	1681:2:39950:39968	6126471	10	True				
ANR	6126580	Identifier	TOK_RESTRICT1		6126471	0					
ANR	6126581	Label	case TOK_RESTRICT2 :	1682:2:39972:39990	6126471	11	True				
ANR	6126582	Identifier	TOK_RESTRICT2		6126471	0					
ANR	6126583	Label	case TOK_RESTRICT3 :	1683:2:39994:40012	6126471	12	True				
ANR	6126584	Identifier	TOK_RESTRICT3		6126471	0					
ANR	6126585	GotoStatement	goto redo ;	1684:3:40017:40026	6126471	13	True				
ANR	6126586	Identifier	redo		6126471	0					
ANR	6126587	ExpressionStatement	mk_pointer ( type )	1686:2:40034:40051	6126471	4	True				
ANR	6126588	CallExpression	mk_pointer ( type )		6126471	0					
ANR	6126589	Callee	mk_pointer		6126471	0					
ANR	6126590	Identifier	mk_pointer		6126471	0					
ANR	6126591	ArgumentList	type		6126471	1					
ANR	6126592	Argument	type		6126471	0					
ANR	6126593	Identifier	type		6126471	0					
ANR	6126594	ExpressionStatement	type -> t |= qualifiers	1687:2:40055:40076	6126471	5	True				
ANR	6126595	AssignmentExpression	type -> t |= qualifiers		6126471	0		|=			
ANR	6126596	PtrMemberAccess	type -> t		6126471	0					
ANR	6126597	Identifier	type		6126471	0					
ANR	6126598	Identifier	t		6126471	1					
ANR	6126599	Identifier	qualifiers		6126471	1					
ANR	6126600	IfStatement	if ( tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2 )		6126471	6					
ANR	6126601	Condition	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2	1691:5:40126:40171	6126471	0	True				
ANR	6126602	OrExpression	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2		6126471	0		||			
ANR	6126603	EqualityExpression	tok == TOK_ATTRIBUTE1		6126471	0		==			
ANR	6126604	Identifier	tok		6126471	0					
ANR	6126605	Identifier	TOK_ATTRIBUTE1		6126471	1					
ANR	6126606	EqualityExpression	tok == TOK_ATTRIBUTE2		6126471	1		==			
ANR	6126607	Identifier	tok		6126471	0					
ANR	6126608	Identifier	TOK_ATTRIBUTE2		6126471	1					
ANR	6126609	CompoundStatement		37:53:682:682	6126471	1					
ANR	6126610	ExpressionStatement	parse_attribute ( ad )	1692:2:40178:40198	6126471	0	True				
ANR	6126611	CallExpression	parse_attribute ( ad )		6126471	0					
ANR	6126612	Callee	parse_attribute		6126471	0					
ANR	6126613	Identifier	parse_attribute		6126471	0					
ANR	6126614	ArgumentList	ad		6126471	1					
ANR	6126615	Argument	ad		6126471	0					
ANR	6126616	Identifier	ad		6126471	0					
ANR	6126617	ExpressionStatement	type1 -> t = 0	1697:1:40296:40308	6126471	7	True				
ANR	6126618	AssignmentExpression	type1 -> t = 0		6126471	0		=			
ANR	6126619	PtrMemberAccess	type1 -> t		6126471	0					
ANR	6126620	Identifier	type1		6126471	0					
ANR	6126621	Identifier	t		6126471	1					
ANR	6126622	PrimaryExpression	0		6126471	1					
ANR	6126623	IfStatement	if ( tok == '(' )		6126471	8					
ANR	6126624	Condition	tok == '('	1698:5:40338:40347	6126471	0	True				
ANR	6126625	EqualityExpression	tok == '('		6126471	0		==			
ANR	6126626	Identifier	tok		6126471	0					
ANR	6126627	PrimaryExpression	'('		6126471	1					
ANR	6126628	CompoundStatement		44:17:858:858	6126471	1					
ANR	6126629	ExpressionStatement	next ( )	1699:2:40354:40361	6126471	0	True				
ANR	6126630	CallExpression	next ( )		6126471	0					
ANR	6126631	Callee	next		6126471	0					
ANR	6126632	Identifier	next		6126471	0					
ANR	6126633	ArgumentList			6126471	1					
ANR	6126634	IfStatement	if ( tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2 )		6126471	1					
ANR	6126635	Condition	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2	1702:6:40465:40510	6126471	0	True				
ANR	6126636	OrExpression	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2		6126471	0		||			
ANR	6126637	EqualityExpression	tok == TOK_ATTRIBUTE1		6126471	0		==			
ANR	6126638	Identifier	tok		6126471	0					
ANR	6126639	Identifier	TOK_ATTRIBUTE1		6126471	1					
ANR	6126640	EqualityExpression	tok == TOK_ATTRIBUTE2		6126471	1		==			
ANR	6126641	Identifier	tok		6126471	0					
ANR	6126642	Identifier	TOK_ATTRIBUTE2		6126471	1					
ANR	6126643	CompoundStatement		48:54:1021:1021	6126471	1					
ANR	6126644	ExpressionStatement	parse_attribute ( ad )	1703:3:40518:40538	6126471	0	True				
ANR	6126645	CallExpression	parse_attribute ( ad )		6126471	0					
ANR	6126646	Callee	parse_attribute		6126471	0					
ANR	6126647	Identifier	parse_attribute		6126471	0					
ANR	6126648	ArgumentList	ad		6126471	1					
ANR	6126649	Argument	ad		6126471	0					
ANR	6126650	Identifier	ad		6126471	0					
ANR	6126651	ExpressionStatement	"type_decl ( type1 , ad , v , td )"	1705:2:40546:40574	6126471	2	True				
ANR	6126652	CallExpression	"type_decl ( type1 , ad , v , td )"		6126471	0					
ANR	6126653	Callee	type_decl		6126471	0					
ANR	6126654	Identifier	type_decl		6126471	0					
ANR	6126655	ArgumentList	type1		6126471	1					
ANR	6126656	Argument	type1		6126471	0					
ANR	6126657	Identifier	type1		6126471	0					
ANR	6126658	Argument	ad		6126471	1					
ANR	6126659	Identifier	ad		6126471	0					
ANR	6126660	Argument	v		6126471	2					
ANR	6126661	Identifier	v		6126471	0					
ANR	6126662	Argument	td		6126471	3					
ANR	6126663	Identifier	td		6126471	0					
ANR	6126664	ExpressionStatement	skip ( ')' )	1706:2:40578:40588	6126471	3	True				
ANR	6126665	CallExpression	skip ( ')' )		6126471	0					
ANR	6126666	Callee	skip		6126471	0					
ANR	6126667	Identifier	skip		6126471	0					
ANR	6126668	ArgumentList	')'		6126471	1					
ANR	6126669	Argument	')'		6126471	0					
ANR	6126670	PrimaryExpression	')'		6126471	0					
ANR	6126671	ElseStatement	else		6126471	0					
ANR	6126672	CompoundStatement		53:8:1106:1106	6126471	0					
ANR	6126673	IfStatement	if ( tok >= TOK_IDENT && ( td & TYPE_DIRECT ) )		6126471	0					
ANR	6126674	Condition	tok >= TOK_IDENT && ( td & TYPE_DIRECT )	1709:6:40630:40667	6126471	0	True				
ANR	6126675	AndExpression	tok >= TOK_IDENT && ( td & TYPE_DIRECT )		6126471	0		&&			
ANR	6126676	RelationalExpression	tok >= TOK_IDENT		6126471	0		>=			
ANR	6126677	Identifier	tok		6126471	0					
ANR	6126678	Identifier	TOK_IDENT		6126471	1					
ANR	6126679	BitAndExpression	td & TYPE_DIRECT		6126471	1		&			
ANR	6126680	Identifier	td		6126471	0					
ANR	6126681	Identifier	TYPE_DIRECT		6126471	1					
ANR	6126682	CompoundStatement		55:46:1178:1178	6126471	1					
ANR	6126683	ExpressionStatement	* v = tok	1710:3:40675:40683	6126471	0	True				
ANR	6126684	AssignmentExpression	* v = tok		6126471	0		=			
ANR	6126685	UnaryOperationExpression	* v		6126471	0					
ANR	6126686	UnaryOperator	*		6126471	0					
ANR	6126687	Identifier	v		6126471	1					
ANR	6126688	Identifier	tok		6126471	1					
ANR	6126689	ExpressionStatement	next ( )	1711:3:40688:40695	6126471	1	True				
ANR	6126690	CallExpression	next ( )		6126471	0					
ANR	6126691	Callee	next		6126471	0					
ANR	6126692	Identifier	next		6126471	0					
ANR	6126693	ArgumentList			6126471	1					
ANR	6126694	ElseStatement	else		6126471	0					
ANR	6126695	CompoundStatement		58:9:1214:1214	6126471	0					
ANR	6126696	IfStatement	if ( ! ( td & TYPE_ABSTRACT ) )		6126471	0					
ANR	6126697	Condition	! ( td & TYPE_ABSTRACT )	1713:7:40715:40735	6126471	0	True				
ANR	6126698	UnaryOperationExpression	! ( td & TYPE_ABSTRACT )		6126471	0					
ANR	6126699	UnaryOperator	!		6126471	0					
ANR	6126700	BitAndExpression	td & TYPE_ABSTRACT		6126471	1		&			
ANR	6126701	Identifier	td		6126471	0					
ANR	6126702	Identifier	TYPE_ABSTRACT		6126471	1					
ANR	6126703	CompoundStatement		59:30:1246:1246	6126471	1					
ANR	6126704	ExpressionStatement	"expect ( ""identifier"" )"	1714:4:40744:40765	6126471	0	True				
ANR	6126705	CallExpression	"expect ( ""identifier"" )"		6126471	0					
ANR	6126706	Callee	expect		6126471	0					
ANR	6126707	Identifier	expect		6126471	0					
ANR	6126708	ArgumentList	"""identifier"""		6126471	1					
ANR	6126709	Argument	"""identifier"""		6126471	0					
ANR	6126710	PrimaryExpression	"""identifier"""		6126471	0					
ANR	6126711	ExpressionStatement	* v = 0	1716:3:40775:40781	6126471	1	True				
ANR	6126712	AssignmentExpression	* v = 0		6126471	0		=			
ANR	6126713	UnaryOperationExpression	* v		6126471	0					
ANR	6126714	UnaryOperator	*		6126471	0					
ANR	6126715	Identifier	v		6126471	1					
ANR	6126716	PrimaryExpression	0		6126471	1					
ANR	6126717	ExpressionStatement	storage = type -> t & VT_STORAGE	1719:1:40791:40821	6126471	9	True				
ANR	6126718	AssignmentExpression	storage = type -> t & VT_STORAGE		6126471	0		=			
ANR	6126719	Identifier	storage		6126471	0					
ANR	6126720	BitAndExpression	type -> t & VT_STORAGE		6126471	1		&			
ANR	6126721	PtrMemberAccess	type -> t		6126471	0					
ANR	6126722	Identifier	type		6126471	0					
ANR	6126723	Identifier	t		6126471	1					
ANR	6126724	Identifier	VT_STORAGE		6126471	1					
ANR	6126725	ExpressionStatement	type -> t &= ~VT_STORAGE	1720:1:40824:40846	6126471	10	True				
ANR	6126726	AssignmentExpression	type -> t &= ~VT_STORAGE		6126471	0		&=			
ANR	6126727	PtrMemberAccess	type -> t		6126471	0					
ANR	6126728	Identifier	type		6126471	0					
ANR	6126729	Identifier	t		6126471	1					
ANR	6126730	Identifier	~VT_STORAGE		6126471	1					
ANR	6126731	IfStatement	if ( storage & VT_STATIC )		6126471	11					
ANR	6126732	Condition	storage & VT_STATIC	1721:5:40853:40871	6126471	0	True				
ANR	6126733	BitAndExpression	storage & VT_STATIC		6126471	0		&			
ANR	6126734	Identifier	storage		6126471	0					
ANR	6126735	Identifier	VT_STATIC		6126471	1					
ANR	6126736	CompoundStatement		68:2:1386:1425	6126471	1					
ANR	6126737	IdentifierDeclStatement	int saved_nocode_wanted = nocode_wanted ;	1722:2:40878:40917	6126471	0	True				
ANR	6126738	IdentifierDecl	saved_nocode_wanted = nocode_wanted		6126471	0					
ANR	6126739	IdentifierDeclType	int		6126471	0					
ANR	6126740	Identifier	saved_nocode_wanted		6126471	1					
ANR	6126741	AssignmentExpression	saved_nocode_wanted = nocode_wanted		6126471	2		=			
ANR	6126742	Identifier	nocode_wanted		6126471	0					
ANR	6126743	Identifier	nocode_wanted		6126471	1					
ANR	6126744	ExpressionStatement	nocode_wanted = 1	1723:2:40921:40938	6126471	1	True				
ANR	6126745	AssignmentExpression	nocode_wanted = 1		6126471	0		=			
ANR	6126746	Identifier	nocode_wanted		6126471	0					
ANR	6126747	PrimaryExpression	1		6126471	1					
ANR	6126748	ExpressionStatement	"post_type ( type , ad )"	1725:2:40993:41013	6126471	2	True				
ANR	6126749	CallExpression	"post_type ( type , ad )"		6126471	0					
ANR	6126750	Callee	post_type		6126471	0					
ANR	6126751	Identifier	post_type		6126471	0					
ANR	6126752	ArgumentList	type		6126471	1					
ANR	6126753	Argument	type		6126471	0					
ANR	6126754	Identifier	type		6126471	0					
ANR	6126755	Argument	ad		6126471	1					
ANR	6126756	Identifier	ad		6126471	0					
ANR	6126757	ExpressionStatement	nocode_wanted = saved_nocode_wanted	1726:2:41017:41052	6126471	3	True				
ANR	6126758	AssignmentExpression	nocode_wanted = saved_nocode_wanted		6126471	0		=			
ANR	6126759	Identifier	nocode_wanted		6126471	0					
ANR	6126760	Identifier	saved_nocode_wanted		6126471	1					
ANR	6126761	ElseStatement	else		6126471	0					
ANR	6126762	CompoundStatement		75:2:1600:1635	6126471	0					
ANR	6126763	Statement	static	1728:2:41066:41071	6126471	0	True				
ANR	6126764	IdentifierDeclStatement	char kind [ 1024 ] ;	1728:9:41073:41088	6126471	1	True				
ANR	6126765	IdentifierDecl	kind [ 1024 ]		6126471	0					
ANR	6126766	IdentifierDeclType	char [ 1024 ]		6126471	0					
ANR	6126767	Identifier	kind		6126471	1					
ANR	6126768	PrimaryExpression	1024		6126471	2					
ANR	6126769	IdentifierDeclStatement	"char * name = get_tok_str ( * v , NULL ) ;"	1729:2:41092:41127	6126471	2	True				
ANR	6126770	IdentifierDecl	"* name = get_tok_str ( * v , NULL )"		6126471	0					
ANR	6126771	IdentifierDeclType	char *		6126471	0					
ANR	6126772	Identifier	name		6126471	1					
ANR	6126773	AssignmentExpression	"* name = get_tok_str ( * v , NULL )"		6126471	2		=			
ANR	6126774	Identifier	name		6126471	0					
ANR	6126775	CallExpression	"get_tok_str ( * v , NULL )"		6126471	1					
ANR	6126776	Callee	get_tok_str		6126471	0					
ANR	6126777	Identifier	get_tok_str		6126471	0					
ANR	6126778	ArgumentList	* v		6126471	1					
ANR	6126779	Argument	* v		6126471	0					
ANR	6126780	UnaryOperationExpression	* v		6126471	0					
ANR	6126781	UnaryOperator	*		6126471	0					
ANR	6126782	Identifier	v		6126471	1					
ANR	6126783	Argument	NULL		6126471	1					
ANR	6126784	Identifier	NULL		6126471	0					
ANR	6126785	ExpressionStatement	"type_to_str ( kind , sizeof ( kind ) , type , NULL )"	1730:2:41131:41175	6126471	3	True				
ANR	6126786	CallExpression	"type_to_str ( kind , sizeof ( kind ) , type , NULL )"		6126471	0					
ANR	6126787	Callee	type_to_str		6126471	0					
ANR	6126788	Identifier	type_to_str		6126471	0					
ANR	6126789	ArgumentList	kind		6126471	1					
ANR	6126790	Argument	kind		6126471	0					
ANR	6126791	Identifier	kind		6126471	0					
ANR	6126792	Argument	sizeof ( kind )		6126471	1					
ANR	6126793	SizeofExpression	sizeof ( kind )		6126471	0					
ANR	6126794	Sizeof	sizeof		6126471	0					
ANR	6126795	SizeofOperand	kind		6126471	1					
ANR	6126796	Argument	type		6126471	2					
ANR	6126797	Identifier	type		6126471	0					
ANR	6126798	Argument	NULL		6126471	3					
ANR	6126799	Identifier	NULL		6126471	0					
ANR	6126800	ExpressionStatement	global_symname = name	1732:2:41234:41255	6126471	4	True				
ANR	6126801	AssignmentExpression	global_symname = name		6126471	0		=			
ANR	6126802	Identifier	global_symname		6126471	0					
ANR	6126803	Identifier	name		6126471	1					
ANR	6126804	ExpressionStatement	global_type = kind	1733:2:41259:41277	6126471	5	True				
ANR	6126805	AssignmentExpression	global_type = kind		6126471	0		=			
ANR	6126806	Identifier	global_type		6126471	0					
ANR	6126807	Identifier	kind		6126471	1					
ANR	6126808	ExpressionStatement	"post_type ( type , ad )"	1734:2:41281:41301	6126471	6	True				
ANR	6126809	CallExpression	"post_type ( type , ad )"		6126471	0					
ANR	6126810	Callee	post_type		6126471	0					
ANR	6126811	Identifier	post_type		6126471	0					
ANR	6126812	ArgumentList	type		6126471	1					
ANR	6126813	Argument	type		6126471	0					
ANR	6126814	Identifier	type		6126471	0					
ANR	6126815	Argument	ad		6126471	1					
ANR	6126816	Identifier	ad		6126471	0					
ANR	6126817	ExpressionStatement	type -> t |= storage	1736:1:41307:41325	6126471	12	True				
ANR	6126818	AssignmentExpression	type -> t |= storage		6126471	0		|=			
ANR	6126819	PtrMemberAccess	type -> t		6126471	0					
ANR	6126820	Identifier	type		6126471	0					
ANR	6126821	Identifier	t		6126471	1					
ANR	6126822	Identifier	storage		6126471	1					
ANR	6126823	IfStatement	if ( tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2 )		6126471	13					
ANR	6126824	Condition	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2	1737:5:41332:41377	6126471	0	True				
ANR	6126825	OrExpression	tok == TOK_ATTRIBUTE1 || tok == TOK_ATTRIBUTE2		6126471	0		||			
ANR	6126826	EqualityExpression	tok == TOK_ATTRIBUTE1		6126471	0		==			
ANR	6126827	Identifier	tok		6126471	0					
ANR	6126828	Identifier	TOK_ATTRIBUTE1		6126471	1					
ANR	6126829	EqualityExpression	tok == TOK_ATTRIBUTE2		6126471	1		==			
ANR	6126830	Identifier	tok		6126471	0					
ANR	6126831	Identifier	TOK_ATTRIBUTE2		6126471	1					
ANR	6126832	CompoundStatement		83:53:1888:1888	6126471	1					
ANR	6126833	ExpressionStatement	parse_attribute ( ad )	1738:2:41384:41404	6126471	0	True				
ANR	6126834	CallExpression	parse_attribute ( ad )		6126471	0					
ANR	6126835	Callee	parse_attribute		6126471	0					
ANR	6126836	Identifier	parse_attribute		6126471	0					
ANR	6126837	ArgumentList	ad		6126471	1					
ANR	6126838	Argument	ad		6126471	0					
ANR	6126839	Identifier	ad		6126471	0					
ANR	6126840	IfStatement	if ( ! type1 -> t )		6126471	14					
ANR	6126841	Condition	! type1 -> t	1741:5:41415:41423	6126471	0	True				
ANR	6126842	UnaryOperationExpression	! type1 -> t		6126471	0					
ANR	6126843	UnaryOperator	!		6126471	0					
ANR	6126844	PtrMemberAccess	type1 -> t		6126471	1					
ANR	6126845	Identifier	type1		6126471	0					
ANR	6126846	Identifier	t		6126471	1					
ANR	6126847	CompoundStatement		87:16:1934:1934	6126471	1					
ANR	6126848	ExpressionStatement	free ( type1 )	1742:2:41430:41442	6126471	0	True				
ANR	6126849	CallExpression	free ( type1 )		6126471	0					
ANR	6126850	Callee	free		6126471	0					
ANR	6126851	Identifier	free		6126471	0					
ANR	6126852	ArgumentList	type1		6126471	1					
ANR	6126853	Argument	type1		6126471	0					
ANR	6126854	Identifier	type1		6126471	0					
ANR	6126855	ExpressionStatement	free ( type2 )	1743:2:41446:41458	6126471	1	True				
ANR	6126856	CallExpression	free ( type2 )		6126471	0					
ANR	6126857	Callee	free		6126471	0					
ANR	6126858	Identifier	free		6126471	0					
ANR	6126859	ArgumentList	type2		6126471	1					
ANR	6126860	Argument	type2		6126471	0					
ANR	6126861	Identifier	type2		6126471	0					
ANR	6126862	ReturnStatement	return ;	1744:2:41462:41468	6126471	2	True				
ANR	6126863	ExpressionStatement	type2 = type1	1747:1:41513:41526	6126471	15	True				
ANR	6126864	AssignmentExpression	type2 = type1		6126471	0		=			
ANR	6126865	Identifier	type2		6126471	0					
ANR	6126866	Identifier	type1		6126471	1					
ANR	6126867	ForStatement	for ( ; ; )		6126471	16					
ANR	6126868	CompoundStatement		94:10:2046:2046	6126471	0					
ANR	6126869	ExpressionStatement	s = type2 -> ref	1749:2:41542:41556	6126471	0	True				
ANR	6126870	AssignmentExpression	s = type2 -> ref		6126471	0		=			
ANR	6126871	Identifier	s		6126471	0					
ANR	6126872	PtrMemberAccess	type2 -> ref		6126471	1					
ANR	6126873	Identifier	type2		6126471	0					
ANR	6126874	Identifier	ref		6126471	1					
ANR	6126875	ExpressionStatement	type2 = & s -> type	1750:2:41560:41576	6126471	1	True				
ANR	6126876	AssignmentExpression	type2 = & s -> type		6126471	0		=			
ANR	6126877	Identifier	type2		6126471	0					
ANR	6126878	UnaryOperationExpression	& s -> type		6126471	1					
ANR	6126879	UnaryOperator	&		6126471	0					
ANR	6126880	PtrMemberAccess	s -> type		6126471	1					
ANR	6126881	Identifier	s		6126471	0					
ANR	6126882	Identifier	type		6126471	1					
ANR	6126883	IfStatement	if ( ! type2 -> t )		6126471	2					
ANR	6126884	Condition	! type2 -> t	1751:6:41584:41592	6126471	0	True				
ANR	6126885	UnaryOperationExpression	! type2 -> t		6126471	0					
ANR	6126886	UnaryOperator	!		6126471	0					
ANR	6126887	PtrMemberAccess	type2 -> t		6126471	1					
ANR	6126888	Identifier	type2		6126471	0					
ANR	6126889	Identifier	t		6126471	1					
ANR	6126890	CompoundStatement		97:17:2103:2103	6126471	1					
ANR	6126891	ExpressionStatement	* type2 = * type	1752:3:41600:41614	6126471	0	True				
ANR	6126892	AssignmentExpression	* type2 = * type		6126471	0		=			
ANR	6126893	UnaryOperationExpression	* type2		6126471	0					
ANR	6126894	UnaryOperator	*		6126471	0					
ANR	6126895	Identifier	type2		6126471	1					
ANR	6126896	UnaryOperationExpression	* type		6126471	1					
ANR	6126897	UnaryOperator	*		6126471	0					
ANR	6126898	Identifier	type		6126471	1					
ANR	6126899	BreakStatement	break ;	1753:3:41619:41624	6126471	1	True				
ANR	6126900	ExpressionStatement	"memcpy ( type , type1 , sizeof ( * type ) )"	1756:1:41634:41669	6126471	17	True				
ANR	6126901	CallExpression	"memcpy ( type , type1 , sizeof ( * type ) )"		6126471	0					
ANR	6126902	Callee	memcpy		6126471	0					
ANR	6126903	Identifier	memcpy		6126471	0					
ANR	6126904	ArgumentList	type		6126471	1					
ANR	6126905	Argument	type		6126471	0					
ANR	6126906	Identifier	type		6126471	0					
ANR	6126907	Argument	type1		6126471	1					
ANR	6126908	Identifier	type1		6126471	0					
ANR	6126909	Argument	sizeof ( * type )		6126471	2					
ANR	6126910	SizeofExpression	sizeof ( * type )		6126471	0					
ANR	6126911	Sizeof	sizeof		6126471	0					
ANR	6126912	UnaryOperationExpression	* type		6126471	1					
ANR	6126913	UnaryOperator	*		6126471	0					
ANR	6126914	Identifier	type		6126471	1					
ANR	6126915	ReturnType	static void		6126471	1					
ANR	6126916	Identifier	type_decl		6126471	2					
ANR	6126917	ParameterList	"CType * type , AttributeDef * ad , int * v , int td"		6126471	3					
ANR	6126918	Parameter	CType * type	1655:22:39444:39454	6126471	0	True				
ANR	6126919	ParameterType	CType *		6126471	0					
ANR	6126920	Identifier	type		6126471	1					
ANR	6126921	Parameter	AttributeDef * ad	1655:35:39457:39472	6126471	1	True				
ANR	6126922	ParameterType	AttributeDef *		6126471	0					
ANR	6126923	Identifier	ad		6126471	1					
ANR	6126924	Parameter	int * v	1655:53:39475:39480	6126471	2	True				
ANR	6126925	ParameterType	int *		6126471	0					
ANR	6126926	Identifier	v		6126471	1					
ANR	6126927	Parameter	int td	1655:61:39483:39488	6126471	3	True				
ANR	6126928	ParameterType	int		6126471	0					
ANR	6126929	Identifier	td		6126471	1					
ANR	6126930	CFGEntryNode	ENTRY		6126471		True				
ANR	6126931	CFGExitNode	EXIT		6126471		True				
ANR	6126932	InfiniteForNode	true		6126471		True				
ANR	6126933	Symbol	* v		6126471						
ANR	6126934	Symbol	get_tok_str		6126471						
ANR	6126935	Symbol	global_symname		6126471						
ANR	6126936	Symbol	CType		6126471						
ANR	6126937	Symbol	TYPE_DIRECT		6126471						
ANR	6126938	Symbol	storage		6126471						
ANR	6126939	Symbol	type		6126471						
ANR	6126940	Symbol	saved_nocode_wanted		6126471						
ANR	6126941	Symbol	global_type		6126471						
ANR	6126942	Symbol	type2 -> t		6126471						
ANR	6126943	Symbol	tok		6126471						
ANR	6126944	Symbol	VT_VOLATILE		6126471						
ANR	6126945	Symbol	TOK_ATTRIBUTE1		6126471						
ANR	6126946	Symbol	TOK_ATTRIBUTE2		6126471						
ANR	6126947	Symbol	* type		6126471						
ANR	6126948	Symbol	nocode_wanted		6126471						
ANR	6126949	Symbol	TYPE_ABSTRACT		6126471						
ANR	6126950	Symbol	type1 -> t		6126471						
ANR	6126951	Symbol	& s -> type		6126471						
ANR	6126952	Symbol	ad		6126471						
ANR	6126953	Symbol	type2		6126471						
ANR	6126954	Symbol	~VT_STORAGE		6126471						
ANR	6126955	Symbol	NULL		6126471						
ANR	6126956	Symbol	TOK_IDENT		6126471						
ANR	6126957	Symbol	VT_CONSTANT		6126471						
ANR	6126958	Symbol	kind		6126471						
ANR	6126959	Symbol	qualifiers		6126471						
ANR	6126960	Symbol	type1		6126471						
ANR	6126961	Symbol	td		6126471						
ANR	6126962	Symbol	R_NEW0		6126471						
ANR	6126963	Symbol	VT_STORAGE		6126471						
ANR	6126964	Symbol	type2 -> ref		6126471						
ANR	6126965	Symbol	s		6126471						
ANR	6126966	Symbol	v		6126471						
ANR	6126967	Symbol	type -> t		6126471						
ANR	6126968	Symbol	name		6126471						
ANR	6126969	Symbol	* type1		6126471						
ANR	6126970	Symbol	* type2		6126471						
ANR	6126971	Symbol	VT_STATIC		6126471						
ANR	6126972	Function	lvalue_type	1760:0:41735:42014							
ANR	6126973	FunctionDef	lvalue_type (int t)		6126972	0					
ANR	6126974	CompoundStatement		1760:31:41766:42014	6126972	0					
ANR	6126975	IdentifierDeclStatement	"int bt , r ;"	1761:1:41769:41778	6126972	0	True				
ANR	6126976	IdentifierDecl	bt		6126972	0					
ANR	6126977	IdentifierDeclType	int		6126972	0					
ANR	6126978	Identifier	bt		6126972	1					
ANR	6126979	IdentifierDecl	r		6126972	1					
ANR	6126980	IdentifierDeclType	int		6126972	0					
ANR	6126981	Identifier	r		6126972	1					
ANR	6126982	ExpressionStatement	r = VT_LVAL	1762:1:41781:41792	6126972	1	True				
ANR	6126983	AssignmentExpression	r = VT_LVAL		6126972	0		=			
ANR	6126984	Identifier	r		6126972	0					
ANR	6126985	Identifier	VT_LVAL		6126972	1					
ANR	6126986	ExpressionStatement	bt = t & VT_BTYPE	1763:1:41795:41812	6126972	2	True				
ANR	6126987	AssignmentExpression	bt = t & VT_BTYPE		6126972	0		=			
ANR	6126988	Identifier	bt		6126972	0					
ANR	6126989	BitAndExpression	t & VT_BTYPE		6126972	1		&			
ANR	6126990	Identifier	t		6126972	0					
ANR	6126991	Identifier	VT_BTYPE		6126972	1					
ANR	6126992	IfStatement	if ( bt == VT_INT8 || bt == VT_BOOL )		6126972	3					
ANR	6126993	Condition	bt == VT_INT8 || bt == VT_BOOL	1764:5:41819:41848	6126972	0	True				
ANR	6126994	OrExpression	bt == VT_INT8 || bt == VT_BOOL		6126972	0		||			
ANR	6126995	EqualityExpression	bt == VT_INT8		6126972	0		==			
ANR	6126996	Identifier	bt		6126972	0					
ANR	6126997	Identifier	VT_INT8		6126972	1					
ANR	6126998	EqualityExpression	bt == VT_BOOL		6126972	1		==			
ANR	6126999	Identifier	bt		6126972	0					
ANR	6127000	Identifier	VT_BOOL		6126972	1					
ANR	6127001	CompoundStatement		5:37:84:84	6126972	1					
ANR	6127002	ExpressionStatement	r |= VT_LVAL_BYTE	1765:2:41855:41872	6126972	0	True				
ANR	6127003	AssignmentExpression	r |= VT_LVAL_BYTE		6126972	0		|=			
ANR	6127004	Identifier	r		6126972	0					
ANR	6127005	Identifier	VT_LVAL_BYTE		6126972	1					
ANR	6127006	ElseStatement	else		6126972	0					
ANR	6127007	IfStatement	if ( bt == VT_INT16 )		6126972	0					
ANR	6127008	Condition	bt == VT_INT16	1766:12:41886:41899	6126972	0	True				
ANR	6127009	EqualityExpression	bt == VT_INT16		6126972	0		==			
ANR	6127010	Identifier	bt		6126972	0					
ANR	6127011	Identifier	VT_INT16		6126972	1					
ANR	6127012	CompoundStatement		7:28:135:135	6126972	1					
ANR	6127013	ExpressionStatement	r |= VT_LVAL_SHORT	1767:2:41906:41924	6126972	0	True				
ANR	6127014	AssignmentExpression	r |= VT_LVAL_SHORT		6126972	0		|=			
ANR	6127015	Identifier	r		6126972	0					
ANR	6127016	Identifier	VT_LVAL_SHORT		6126972	1					
ANR	6127017	ElseStatement	else		6126972	0					
ANR	6127018	CompoundStatement		9:8:167:167	6126972	0					
ANR	6127019	ReturnStatement	return r ;	1769:2:41938:41946	6126972	0	True				
ANR	6127020	Identifier	r		6126972	0					
ANR	6127021	IfStatement	if ( t & VT_UNSIGNED )		6126972	4					
ANR	6127022	Condition	t & VT_UNSIGNED	1771:5:41956:41970	6126972	0	True				
ANR	6127023	BitAndExpression	t & VT_UNSIGNED		6126972	0		&			
ANR	6127024	Identifier	t		6126972	0					
ANR	6127025	Identifier	VT_UNSIGNED		6126972	1					
ANR	6127026	CompoundStatement		12:22:206:206	6126972	1					
ANR	6127027	ExpressionStatement	r |= VT_LVAL_UNSIGNED	1772:2:41977:41998	6126972	0	True				
ANR	6127028	AssignmentExpression	r |= VT_LVAL_UNSIGNED		6126972	0		|=			
ANR	6127029	Identifier	r		6126972	0					
ANR	6127030	Identifier	VT_LVAL_UNSIGNED		6126972	1					
ANR	6127031	ReturnStatement	return r ;	1774:1:42004:42012	6126972	5	True				
ANR	6127032	Identifier	r		6126972	0					
ANR	6127033	ReturnType	ST_FUNC int		6126972	1					
ANR	6127034	Identifier	lvalue_type		6126972	2					
ANR	6127035	ParameterList	int t		6126972	3					
ANR	6127036	Parameter	int t	1760:24:41759:41763	6126972	0	True				
ANR	6127037	ParameterType	int		6126972	0					
ANR	6127038	Identifier	t		6126972	1					
ANR	6127039	CFGEntryNode	ENTRY		6126972		True				
ANR	6127040	CFGExitNode	EXIT		6126972		True				
ANR	6127041	Symbol	r		6126972						
ANR	6127042	Symbol	bt		6126972						
ANR	6127043	Symbol	VT_UNSIGNED		6126972						
ANR	6127044	Symbol	VT_BOOL		6126972						
ANR	6127045	Symbol	t		6126972						
ANR	6127046	Symbol	VT_INT16		6126972						
ANR	6127047	Symbol	VT_INT8		6126972						
ANR	6127048	Symbol	VT_LVAL_UNSIGNED		6126972						
ANR	6127049	Symbol	VT_LVAL		6126972						
ANR	6127050	Symbol	VT_BTYPE		6126972						
ANR	6127051	Symbol	VT_LVAL_SHORT		6126972						
ANR	6127052	Symbol	VT_LVAL_BYTE		6126972						
ANR	6127053	Function	indir	1778:0:42076:42640							
ANR	6127054	FunctionDef	indir ()		6127053	0					
ANR	6127055	CompoundStatement		1778:25:42101:42640	6127053	0					
ANR	6127056	IfStatement	if ( ( vtop -> type . t & VT_BTYPE ) != VT_PTR )		6127053	0					
ANR	6127057	Condition	( vtop -> type . t & VT_BTYPE ) != VT_PTR	1779:5:42108:42142	6127053	0	True				
ANR	6127058	EqualityExpression	( vtop -> type . t & VT_BTYPE ) != VT_PTR		6127053	0		!=			
ANR	6127059	BitAndExpression	vtop -> type . t & VT_BTYPE		6127053	0		&			
ANR	6127060	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127061	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127062	Identifier	vtop		6127053	0					
ANR	6127063	Identifier	type		6127053	1					
ANR	6127064	Identifier	t		6127053	1					
ANR	6127065	Identifier	VT_BTYPE		6127053	1					
ANR	6127066	Identifier	VT_PTR		6127053	1					
ANR	6127067	CompoundStatement		2:42:43:43	6127053	1					
ANR	6127068	IfStatement	if ( ( vtop -> type . t & VT_BTYPE ) == VT_FUNC )		6127053	0					
ANR	6127069	Condition	( vtop -> type . t & VT_BTYPE ) == VT_FUNC	1780:6:42153:42188	6127053	0	True				
ANR	6127070	EqualityExpression	( vtop -> type . t & VT_BTYPE ) == VT_FUNC		6127053	0		==			
ANR	6127071	BitAndExpression	vtop -> type . t & VT_BTYPE		6127053	0		&			
ANR	6127072	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127073	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127074	Identifier	vtop		6127053	0					
ANR	6127075	Identifier	type		6127053	1					
ANR	6127076	Identifier	t		6127053	1					
ANR	6127077	Identifier	VT_BTYPE		6127053	1					
ANR	6127078	Identifier	VT_FUNC		6127053	1					
ANR	6127079	CompoundStatement		3:44:89:89	6127053	1					
ANR	6127080	ReturnStatement	return ;	1781:3:42196:42202	6127053	0	True				
ANR	6127081	ExpressionStatement	"expect ( ""pointer"" )"	1783:2:42210:42228	6127053	1	True				
ANR	6127082	CallExpression	"expect ( ""pointer"" )"		6127053	0					
ANR	6127083	Callee	expect		6127053	0					
ANR	6127084	Identifier	expect		6127053	0					
ANR	6127085	ArgumentList	"""pointer"""		6127053	1					
ANR	6127086	Argument	"""pointer"""		6127053	0					
ANR	6127087	PrimaryExpression	"""pointer"""		6127053	0					
ANR	6127088	ExpressionStatement	vtop -> type = * pointed_type ( & vtop -> type )	1785:1:42234:42274	6127053	1	True				
ANR	6127089	AssignmentExpression	vtop -> type = * pointed_type ( & vtop -> type )		6127053	0		=			
ANR	6127090	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127091	Identifier	vtop		6127053	0					
ANR	6127092	Identifier	type		6127053	1					
ANR	6127093	UnaryOperationExpression	* pointed_type ( & vtop -> type )		6127053	1					
ANR	6127094	UnaryOperator	*		6127053	0					
ANR	6127095	CallExpression	pointed_type ( & vtop -> type )		6127053	1					
ANR	6127096	Callee	pointed_type		6127053	0					
ANR	6127097	Identifier	pointed_type		6127053	0					
ANR	6127098	ArgumentList	& vtop -> type		6127053	1					
ANR	6127099	Argument	& vtop -> type		6127053	0					
ANR	6127100	UnaryOperationExpression	& vtop -> type		6127053	0					
ANR	6127101	UnaryOperator	&		6127053	0					
ANR	6127102	PtrMemberAccess	vtop -> type		6127053	1					
ANR	6127103	Identifier	vtop		6127053	0					
ANR	6127104	Identifier	type		6127053	1					
ANR	6127105	IfStatement	if ( ! ( vtop -> type . t & VT_ARRAY ) && ! ( vtop -> type . t & VT_VLA ) && ( vtop -> type . t & VT_BTYPE ) != VT_FUNC )		6127053	2					
ANR	6127106	Condition	! ( vtop -> type . t & VT_ARRAY ) && ! ( vtop -> type . t & VT_VLA ) && ( vtop -> type . t & VT_BTYPE ) != VT_FUNC	1787:5:42327:42425	6127053	0	True				
ANR	6127107	AndExpression	! ( vtop -> type . t & VT_ARRAY ) && ! ( vtop -> type . t & VT_VLA ) && ( vtop -> type . t & VT_BTYPE ) != VT_FUNC		6127053	0		&&			
ANR	6127108	UnaryOperationExpression	! ( vtop -> type . t & VT_ARRAY )		6127053	0					
ANR	6127109	UnaryOperator	!		6127053	0					
ANR	6127110	BitAndExpression	vtop -> type . t & VT_ARRAY		6127053	1		&			
ANR	6127111	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127112	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127113	Identifier	vtop		6127053	0					
ANR	6127114	Identifier	type		6127053	1					
ANR	6127115	Identifier	t		6127053	1					
ANR	6127116	Identifier	VT_ARRAY		6127053	1					
ANR	6127117	AndExpression	! ( vtop -> type . t & VT_VLA ) && ( vtop -> type . t & VT_BTYPE ) != VT_FUNC		6127053	1		&&			
ANR	6127118	UnaryOperationExpression	! ( vtop -> type . t & VT_VLA )		6127053	0					
ANR	6127119	UnaryOperator	!		6127053	0					
ANR	6127120	BitAndExpression	vtop -> type . t & VT_VLA		6127053	1		&			
ANR	6127121	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127122	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127123	Identifier	vtop		6127053	0					
ANR	6127124	Identifier	type		6127053	1					
ANR	6127125	Identifier	t		6127053	1					
ANR	6127126	Identifier	VT_VLA		6127053	1					
ANR	6127127	EqualityExpression	( vtop -> type . t & VT_BTYPE ) != VT_FUNC		6127053	1		!=			
ANR	6127128	BitAndExpression	vtop -> type . t & VT_BTYPE		6127053	0		&			
ANR	6127129	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127130	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127131	Identifier	vtop		6127053	0					
ANR	6127132	Identifier	type		6127053	1					
ANR	6127133	Identifier	t		6127053	1					
ANR	6127134	Identifier	VT_BTYPE		6127053	1					
ANR	6127135	Identifier	VT_FUNC		6127053	1					
ANR	6127136	CompoundStatement		11:46:326:326	6127053	1					
ANR	6127137	ExpressionStatement	vtop -> r |= lvalue_type ( vtop -> type . t )	1789:2:42432:42469	6127053	0	True				
ANR	6127138	AssignmentExpression	vtop -> r |= lvalue_type ( vtop -> type . t )		6127053	0		|=			
ANR	6127139	PtrMemberAccess	vtop -> r		6127053	0					
ANR	6127140	Identifier	vtop		6127053	0					
ANR	6127141	Identifier	r		6127053	1					
ANR	6127142	CallExpression	lvalue_type ( vtop -> type . t )		6127053	1					
ANR	6127143	Callee	lvalue_type		6127053	0					
ANR	6127144	Identifier	lvalue_type		6127053	0					
ANR	6127145	ArgumentList	vtop -> type . t		6127053	1					
ANR	6127146	Argument	vtop -> type . t		6127053	0					
ANR	6127147	MemberAccess	vtop -> type . t		6127053	0					
ANR	6127148	PtrMemberAccess	vtop -> type		6127053	0					
ANR	6127149	Identifier	vtop		6127053	0					
ANR	6127150	Identifier	type		6127053	1					
ANR	6127151	Identifier	t		6127053	1					
ANR	6127152	IfStatement	if ( tcc_state -> do_bounds_check )		6127053	1					
ANR	6127153	Condition	tcc_state -> do_bounds_check	1792:6:42568:42593	6127053	0	True				
ANR	6127154	PtrMemberAccess	tcc_state -> do_bounds_check		6127053	0					
ANR	6127155	Identifier	tcc_state		6127053	0					
ANR	6127156	Identifier	do_bounds_check		6127053	1					
ANR	6127157	CompoundStatement		15:34:494:494	6127053	1					
ANR	6127158	ExpressionStatement	vtop -> r |= VT_MUSTBOUND	1793:3:42601:42624	6127053	0	True				
ANR	6127159	AssignmentExpression	vtop -> r |= VT_MUSTBOUND		6127053	0		|=			
ANR	6127160	PtrMemberAccess	vtop -> r		6127053	0					
ANR	6127161	Identifier	vtop		6127053	0					
ANR	6127162	Identifier	r		6127053	1					
ANR	6127163	Identifier	VT_MUSTBOUND		6127053	1					
ANR	6127164	ReturnType	ST_FUNC void		6127053	1					
ANR	6127165	Identifier	indir		6127053	2					
ANR	6127166	ParameterList			6127053	3					
ANR	6127167	CFGEntryNode	ENTRY		6127053		True				
ANR	6127168	CFGExitNode	EXIT		6127053		True				
ANR	6127169	Symbol	* pointed_type		6127053						
ANR	6127170	Symbol	* pointed_type ( & vtop -> type )		6127053						
ANR	6127171	Symbol	tcc_state		6127053						
ANR	6127172	Symbol	VT_PTR		6127053						
ANR	6127173	Symbol	tcc_state -> do_bounds_check		6127053						
ANR	6127174	Symbol	VT_MUSTBOUND		6127053						
ANR	6127175	Symbol	VT_VLA		6127053						
ANR	6127176	Symbol	vtop -> type		6127053						
ANR	6127177	Symbol	vtop		6127053						
ANR	6127178	Symbol	* tcc_state		6127053						
ANR	6127179	Symbol	VT_BTYPE		6127053						
ANR	6127180	Symbol	VT_FUNC		6127053						
ANR	6127181	Symbol	* vtop		6127053						
ANR	6127182	Symbol	lvalue_type		6127053						
ANR	6127183	Symbol	vtop -> type . t		6127053						
ANR	6127184	Symbol	pointed_type		6127053						
ANR	6127185	Symbol	vtop -> r		6127053						
ANR	6127186	Symbol	& vtop -> type		6127053						
ANR	6127187	Symbol	VT_ARRAY		6127053						
ANR	6127188	Function	parse_expr_type	1801:0:42725:42930							
ANR	6127189	FunctionDef	parse_expr_type (CType * type)		6127188	0					
ANR	6127190	CompoundStatement		1801:41:42766:42930	6127188	0					
ANR	6127191	IdentifierDeclStatement	int n ;	1802:1:42769:42774	6127188	0	True				
ANR	6127192	IdentifierDecl	n		6127188	0					
ANR	6127193	IdentifierDeclType	int		6127188	0					
ANR	6127194	Identifier	n		6127188	1					
ANR	6127195	IdentifierDeclStatement	AttributeDef ad ;	1803:1:42777:42792	6127188	1	True				
ANR	6127196	IdentifierDecl	ad		6127188	0					
ANR	6127197	IdentifierDeclType	AttributeDef		6127188	0					
ANR	6127198	Identifier	ad		6127188	1					
ANR	6127199	ExpressionStatement	skip ( '(' )	1805:1:42796:42806	6127188	2	True				
ANR	6127200	CallExpression	skip ( '(' )		6127188	0					
ANR	6127201	Callee	skip		6127188	0					
ANR	6127202	Identifier	skip		6127188	0					
ANR	6127203	ArgumentList	'('		6127188	1					
ANR	6127204	Argument	'('		6127188	0					
ANR	6127205	PrimaryExpression	'('		6127188	0					
ANR	6127206	IfStatement	"if ( parse_btype ( type , & ad ) )"		6127188	3					
ANR	6127207	Condition	"parse_btype ( type , & ad )"	1806:5:42813:42835	6127188	0	True				
ANR	6127208	CallExpression	"parse_btype ( type , & ad )"		6127188	0					
ANR	6127209	Callee	parse_btype		6127188	0					
ANR	6127210	Identifier	parse_btype		6127188	0					
ANR	6127211	ArgumentList	type		6127188	1					
ANR	6127212	Argument	type		6127188	0					
ANR	6127213	Identifier	type		6127188	0					
ANR	6127214	Argument	& ad		6127188	1					
ANR	6127215	UnaryOperationExpression	& ad		6127188	0					
ANR	6127216	UnaryOperator	&		6127188	0					
ANR	6127217	Identifier	ad		6127188	1					
ANR	6127218	CompoundStatement		6:30:71:71	6127188	1					
ANR	6127219	ExpressionStatement	"type_decl ( type , & ad , & n , TYPE_ABSTRACT )"	1807:2:42842:42882	6127188	0	True				
ANR	6127220	CallExpression	"type_decl ( type , & ad , & n , TYPE_ABSTRACT )"		6127188	0					
ANR	6127221	Callee	type_decl		6127188	0					
ANR	6127222	Identifier	type_decl		6127188	0					
ANR	6127223	ArgumentList	type		6127188	1					
ANR	6127224	Argument	type		6127188	0					
ANR	6127225	Identifier	type		6127188	0					
ANR	6127226	Argument	& ad		6127188	1					
ANR	6127227	UnaryOperationExpression	& ad		6127188	0					
ANR	6127228	UnaryOperator	&		6127188	0					
ANR	6127229	Identifier	ad		6127188	1					
ANR	6127230	Argument	& n		6127188	2					
ANR	6127231	UnaryOperationExpression	& n		6127188	0					
ANR	6127232	UnaryOperator	&		6127188	0					
ANR	6127233	Identifier	n		6127188	1					
ANR	6127234	Argument	TYPE_ABSTRACT		6127188	3					
ANR	6127235	Identifier	TYPE_ABSTRACT		6127188	0					
ANR	6127236	ElseStatement	else		6127188	0					
ANR	6127237	CompoundStatement		8:8:125:125	6127188	0					
ANR	6127238	ExpressionStatement	expr_type ( type )	1809:2:42896:42912	6127188	0	True				
ANR	6127239	CallExpression	expr_type ( type )		6127188	0					
ANR	6127240	Callee	expr_type		6127188	0					
ANR	6127241	Identifier	expr_type		6127188	0					
ANR	6127242	ArgumentList	type		6127188	1					
ANR	6127243	Argument	type		6127188	0					
ANR	6127244	Identifier	type		6127188	0					
ANR	6127245	ExpressionStatement	skip ( ')' )	1811:1:42918:42928	6127188	4	True				
ANR	6127246	CallExpression	skip ( ')' )		6127188	0					
ANR	6127247	Callee	skip		6127188	0					
ANR	6127248	Identifier	skip		6127188	0					
ANR	6127249	ArgumentList	')'		6127188	1					
ANR	6127250	Argument	')'		6127188	0					
ANR	6127251	PrimaryExpression	')'		6127188	0					
ANR	6127252	ReturnType	static void		6127188	1					
ANR	6127253	Identifier	parse_expr_type		6127188	2					
ANR	6127254	ParameterList	CType * type		6127188	3					
ANR	6127255	Parameter	CType * type	1801:28:42753:42763	6127188	0	True				
ANR	6127256	ParameterType	CType *		6127188	0					
ANR	6127257	Identifier	type		6127188	1					
ANR	6127258	CFGEntryNode	ENTRY		6127188		True				
ANR	6127259	CFGExitNode	EXIT		6127188		True				
ANR	6127260	Symbol	ad		6127188						
ANR	6127261	Symbol	& n		6127188						
ANR	6127262	Symbol	type		6127188						
ANR	6127263	Symbol	& ad		6127188						
ANR	6127264	Symbol	n		6127188						
ANR	6127265	Symbol	TYPE_ABSTRACT		6127188						
ANR	6127266	Symbol	parse_btype		6127188						
ANR	6127267	Function	parse_type	1814:0:42933:43096							
ANR	6127268	FunctionDef	parse_type (CType * type)		6127267	0					
ANR	6127269	CompoundStatement		1814:36:42969:43096	6127267	0					
ANR	6127270	IdentifierDeclStatement	AttributeDef ad ;	1815:1:42972:42987	6127267	0	True				
ANR	6127271	IdentifierDecl	ad		6127267	0					
ANR	6127272	IdentifierDeclType	AttributeDef		6127267	0					
ANR	6127273	Identifier	ad		6127267	1					
ANR	6127274	IdentifierDeclStatement	int n ;	1816:1:42990:42995	6127267	1	True				
ANR	6127275	IdentifierDecl	n		6127267	0					
ANR	6127276	IdentifierDeclType	int		6127267	0					
ANR	6127277	Identifier	n		6127267	1					
ANR	6127278	IfStatement	"if ( ! parse_btype ( type , & ad ) )"		6127267	2					
ANR	6127279	Condition	"! parse_btype ( type , & ad )"	1818:5:43003:43026	6127267	0	True				
ANR	6127280	UnaryOperationExpression	"! parse_btype ( type , & ad )"		6127267	0					
ANR	6127281	UnaryOperator	!		6127267	0					
ANR	6127282	CallExpression	"parse_btype ( type , & ad )"		6127267	1					
ANR	6127283	Callee	parse_btype		6127267	0					
ANR	6127284	Identifier	parse_btype		6127267	0					
ANR	6127285	ArgumentList	type		6127267	1					
ANR	6127286	Argument	type		6127267	0					
ANR	6127287	Identifier	type		6127267	0					
ANR	6127288	Argument	& ad		6127267	1					
ANR	6127289	UnaryOperationExpression	& ad		6127267	0					
ANR	6127290	UnaryOperator	&		6127267	0					
ANR	6127291	Identifier	ad		6127267	1					
ANR	6127292	CompoundStatement		5:31:59:59	6127267	1					
ANR	6127293	ExpressionStatement	"expect ( ""type"" )"	1819:2:43033:43048	6127267	0	True				
ANR	6127294	CallExpression	"expect ( ""type"" )"		6127267	0					
ANR	6127295	Callee	expect		6127267	0					
ANR	6127296	Identifier	expect		6127267	0					
ANR	6127297	ArgumentList	"""type"""		6127267	1					
ANR	6127298	Argument	"""type"""		6127267	0					
ANR	6127299	PrimaryExpression	"""type"""		6127267	0					
ANR	6127300	ExpressionStatement	"type_decl ( type , & ad , & n , TYPE_ABSTRACT )"	1821:1:43054:43094	6127267	3	True				
ANR	6127301	CallExpression	"type_decl ( type , & ad , & n , TYPE_ABSTRACT )"		6127267	0					
ANR	6127302	Callee	type_decl		6127267	0					
ANR	6127303	Identifier	type_decl		6127267	0					
ANR	6127304	ArgumentList	type		6127267	1					
ANR	6127305	Argument	type		6127267	0					
ANR	6127306	Identifier	type		6127267	0					
ANR	6127307	Argument	& ad		6127267	1					
ANR	6127308	UnaryOperationExpression	& ad		6127267	0					
ANR	6127309	UnaryOperator	&		6127267	0					
ANR	6127310	Identifier	ad		6127267	1					
ANR	6127311	Argument	& n		6127267	2					
ANR	6127312	UnaryOperationExpression	& n		6127267	0					
ANR	6127313	UnaryOperator	&		6127267	0					
ANR	6127314	Identifier	n		6127267	1					
ANR	6127315	Argument	TYPE_ABSTRACT		6127267	3					
ANR	6127316	Identifier	TYPE_ABSTRACT		6127267	0					
ANR	6127317	ReturnType	static void		6127267	1					
ANR	6127318	Identifier	parse_type		6127267	2					
ANR	6127319	ParameterList	CType * type		6127267	3					
ANR	6127320	Parameter	CType * type	1814:23:42956:42966	6127267	0	True				
ANR	6127321	ParameterType	CType *		6127267	0					
ANR	6127322	Identifier	type		6127267	1					
ANR	6127323	CFGEntryNode	ENTRY		6127267		True				
ANR	6127324	CFGExitNode	EXIT		6127267		True				
ANR	6127325	Symbol	ad		6127267						
ANR	6127326	Symbol	& n		6127267						
ANR	6127327	Symbol	type		6127267						
ANR	6127328	Symbol	& ad		6127267						
ANR	6127329	Symbol	n		6127267						
ANR	6127330	Symbol	TYPE_ABSTRACT		6127267						
ANR	6127331	Symbol	parse_btype		6127267						
ANR	6127332	Function	vpush_tokc	1824:0:43099:43216							
ANR	6127333	FunctionDef	vpush_tokc (int t)		6127332	0					
ANR	6127334	CompoundStatement		1824:30:43129:43216	6127332	0					
ANR	6127335	IdentifierDeclStatement	CType type = { 0 } ;	1825:1:43132:43150	6127332	0	True				
ANR	6127336	IdentifierDecl	type = { 0 }		6127332	0					
ANR	6127337	IdentifierDeclType	CType		6127332	0					
ANR	6127338	Identifier	type		6127332	1					
ANR	6127339	AssignmentExpression	type = { 0 }		6127332	2		=			
ANR	6127340	Identifier	type		6127332	0					
ANR	6127341	InitializerList	0		6127332	1					
ANR	6127342	PrimaryExpression	0		6127332	0					
ANR	6127343	ExpressionStatement	type . t = t	1826:1:43153:43163	6127332	1	True				
ANR	6127344	AssignmentExpression	type . t = t		6127332	0		=			
ANR	6127345	MemberAccess	type . t		6127332	0					
ANR	6127346	Identifier	type		6127332	0					
ANR	6127347	Identifier	t		6127332	1					
ANR	6127348	Identifier	t		6127332	1					
ANR	6127349	ExpressionStatement	type . ref = NULL	1827:1:43166:43181	6127332	2	True				
ANR	6127350	AssignmentExpression	type . ref = NULL		6127332	0		=			
ANR	6127351	MemberAccess	type . ref		6127332	0					
ANR	6127352	Identifier	type		6127332	0					
ANR	6127353	Identifier	ref		6127332	1					
ANR	6127354	Identifier	NULL		6127332	1					
ANR	6127355	ExpressionStatement	"vsetc ( & type , VT_CONST , & tokc )"	1828:1:43184:43214	6127332	3	True				
ANR	6127356	CallExpression	"vsetc ( & type , VT_CONST , & tokc )"		6127332	0					
ANR	6127357	Callee	vsetc		6127332	0					
ANR	6127358	Identifier	vsetc		6127332	0					
ANR	6127359	ArgumentList	& type		6127332	1					
ANR	6127360	Argument	& type		6127332	0					
ANR	6127361	UnaryOperationExpression	& type		6127332	0					
ANR	6127362	UnaryOperator	&		6127332	0					
ANR	6127363	Identifier	type		6127332	1					
ANR	6127364	Argument	VT_CONST		6127332	1					
ANR	6127365	Identifier	VT_CONST		6127332	0					
ANR	6127366	Argument	& tokc		6127332	2					
ANR	6127367	UnaryOperationExpression	& tokc		6127332	0					
ANR	6127368	UnaryOperator	&		6127332	0					
ANR	6127369	Identifier	tokc		6127332	1					
ANR	6127370	ReturnType	static void		6127332	1					
ANR	6127371	Identifier	vpush_tokc		6127332	2					
ANR	6127372	ParameterList	int t		6127332	3					
ANR	6127373	Parameter	int t	1824:23:43122:43126	6127332	0	True				
ANR	6127374	ParameterType	int		6127332	0					
ANR	6127375	Identifier	t		6127332	1					
ANR	6127376	CFGEntryNode	ENTRY		6127332		True				
ANR	6127377	CFGExitNode	EXIT		6127332		True				
ANR	6127378	Symbol	VT_CONST		6127332						
ANR	6127379	Symbol	NULL		6127332						
ANR	6127380	Symbol	t		6127332						
ANR	6127381	Symbol	& type		6127332						
ANR	6127382	Symbol	type . ref		6127332						
ANR	6127383	Symbol	type . t		6127332						
ANR	6127384	Symbol	type		6127332						
ANR	6127385	Symbol	& tokc		6127332						
ANR	6127386	Function	unary	1831:0:43219:50683							
ANR	6127387	FunctionDef	unary ()		6127386	0					
ANR	6127388	CompoundStatement		1831:25:43244:50683	6127386	0					
ANR	6127389	IdentifierDeclStatement	"int n , t , align , size , r , sizeof_caller ;"	1832:1:43247:43286	6127386	0	True				
ANR	6127390	IdentifierDecl	n		6127386	0					
ANR	6127391	IdentifierDeclType	int		6127386	0					
ANR	6127392	Identifier	n		6127386	1					
ANR	6127393	IdentifierDecl	t		6127386	1					
ANR	6127394	IdentifierDeclType	int		6127386	0					
ANR	6127395	Identifier	t		6127386	1					
ANR	6127396	IdentifierDecl	align		6127386	2					
ANR	6127397	IdentifierDeclType	int		6127386	0					
ANR	6127398	Identifier	align		6127386	1					
ANR	6127399	IdentifierDecl	size		6127386	3					
ANR	6127400	IdentifierDeclType	int		6127386	0					
ANR	6127401	Identifier	size		6127386	1					
ANR	6127402	IdentifierDecl	r		6127386	4					
ANR	6127403	IdentifierDeclType	int		6127386	0					
ANR	6127404	Identifier	r		6127386	1					
ANR	6127405	IdentifierDecl	sizeof_caller		6127386	5					
ANR	6127406	IdentifierDeclType	int		6127386	0					
ANR	6127407	Identifier	sizeof_caller		6127386	1					
ANR	6127408	IdentifierDeclStatement	CType type = { 0 } ;	1833:1:43289:43307	6127386	1	True				
ANR	6127409	IdentifierDecl	type = { 0 }		6127386	0					
ANR	6127410	IdentifierDeclType	CType		6127386	0					
ANR	6127411	Identifier	type		6127386	1					
ANR	6127412	AssignmentExpression	type = { 0 }		6127386	2		=			
ANR	6127413	Identifier	type		6127386	0					
ANR	6127414	InitializerList	0		6127386	1					
ANR	6127415	PrimaryExpression	0		6127386	0					
ANR	6127416	IdentifierDeclStatement	Sym * s ;	1834:1:43310:43316	6127386	2	True				
ANR	6127417	IdentifierDecl	* s		6127386	0					
ANR	6127418	IdentifierDeclType	Sym *		6127386	0					
ANR	6127419	Identifier	s		6127386	1					
ANR	6127420	IdentifierDeclStatement	AttributeDef ad ;	1835:1:43319:43334	6127386	3	True				
ANR	6127421	IdentifierDecl	ad		6127386	0					
ANR	6127422	IdentifierDeclType	AttributeDef		6127386	0					
ANR	6127423	Identifier	ad		6127386	1					
ANR	6127424	Statement	static	1836:1:43337:43342	6127386	4	True				
ANR	6127425	IdentifierDeclStatement	int in_sizeof = 0 ;	1836:8:43344:43361	6127386	5	True				
ANR	6127426	IdentifierDecl	in_sizeof = 0		6127386	0					
ANR	6127427	IdentifierDeclType	int		6127386	0					
ANR	6127428	Identifier	in_sizeof		6127386	1					
ANR	6127429	AssignmentExpression	in_sizeof = 0		6127386	2		=			
ANR	6127430	Identifier	in_sizeof		6127386	0					
ANR	6127431	PrimaryExpression	0		6127386	1					
ANR	6127432	ExpressionStatement	sizeof_caller = in_sizeof	1838:1:43365:43390	6127386	6	True				
ANR	6127433	AssignmentExpression	sizeof_caller = in_sizeof		6127386	0		=			
ANR	6127434	Identifier	sizeof_caller		6127386	0					
ANR	6127435	Identifier	in_sizeof		6127386	1					
ANR	6127436	ExpressionStatement	in_sizeof = 0	1839:1:43393:43406	6127386	7	True				
ANR	6127437	AssignmentExpression	in_sizeof = 0		6127386	0		=			
ANR	6127438	Identifier	in_sizeof		6127386	0					
ANR	6127439	PrimaryExpression	0		6127386	1					
ANR	6127440	Label	tok_next :	1842:0:43495:43503	6127386	8	True				
ANR	6127441	Identifier	tok_next		6127386	0					
ANR	6127442	SwitchStatement	switch ( tok )		6127386	9					
ANR	6127443	Condition	tok	1843:9:43514:43516	6127386	0	True				
ANR	6127444	Identifier	tok		6127386	0					
ANR	6127445	CompoundStatement		13:14:274:274	6127386	1					
ANR	6127446	Label	case TOK_EXTENSION :	1844:1:43522:43540	6127386	0	True				
ANR	6127447	Identifier	TOK_EXTENSION		6127386	0					
ANR	6127448	ExpressionStatement	next ( )	1845:2:43544:43551	6127386	1	True				
ANR	6127449	CallExpression	next ( )		6127386	0					
ANR	6127450	Callee	next		6127386	0					
ANR	6127451	Identifier	next		6127386	0					
ANR	6127452	ArgumentList			6127386	1					
ANR	6127453	GotoStatement	goto tok_next ;	1846:2:43555:43568	6127386	2	True				
ANR	6127454	Identifier	tok_next		6127386	0					
ANR	6127455	Label	case TOK_CINT :	1847:1:43571:43584	6127386	3	True				
ANR	6127456	Identifier	TOK_CINT		6127386	0					
ANR	6127457	Label	case TOK_CCHAR :	1848:1:43587:43601	6127386	4	True				
ANR	6127458	Identifier	TOK_CCHAR		6127386	0					
ANR	6127459	Label	case TOK_LCHAR :	1849:1:43604:43618	6127386	5	True				
ANR	6127460	Identifier	TOK_LCHAR		6127386	0					
ANR	6127461	ExpressionStatement	vpushi ( tokc . i )	1850:2:43622:43637	6127386	6	True				
ANR	6127462	CallExpression	vpushi ( tokc . i )		6127386	0					
ANR	6127463	Callee	vpushi		6127386	0					
ANR	6127464	Identifier	vpushi		6127386	0					
ANR	6127465	ArgumentList	tokc . i		6127386	1					
ANR	6127466	Argument	tokc . i		6127386	0					
ANR	6127467	MemberAccess	tokc . i		6127386	0					
ANR	6127468	Identifier	tokc		6127386	0					
ANR	6127469	Identifier	i		6127386	1					
ANR	6127470	ExpressionStatement	next ( )	1851:2:43641:43648	6127386	7	True				
ANR	6127471	CallExpression	next ( )		6127386	0					
ANR	6127472	Callee	next		6127386	0					
ANR	6127473	Identifier	next		6127386	0					
ANR	6127474	ArgumentList			6127386	1					
ANR	6127475	BreakStatement	break ;	1852:2:43652:43657	6127386	8	True				
ANR	6127476	Label	case TOK_CUINT :	1853:1:43660:43674	6127386	9	True				
ANR	6127477	Identifier	TOK_CUINT		6127386	0					
ANR	6127478	ExpressionStatement	vpush_tokc ( VT_INT32 | VT_UNSIGNED )	1854:2:43678:43713	6127386	10	True				
ANR	6127479	CallExpression	vpush_tokc ( VT_INT32 | VT_UNSIGNED )		6127386	0					
ANR	6127480	Callee	vpush_tokc		6127386	0					
ANR	6127481	Identifier	vpush_tokc		6127386	0					
ANR	6127482	ArgumentList	VT_INT32 | VT_UNSIGNED		6127386	1					
ANR	6127483	Argument	VT_INT32 | VT_UNSIGNED		6127386	0					
ANR	6127484	InclusiveOrExpression	VT_INT32 | VT_UNSIGNED		6127386	0		|			
ANR	6127485	Identifier	VT_INT32		6127386	0					
ANR	6127486	Identifier	VT_UNSIGNED		6127386	1					
ANR	6127487	ExpressionStatement	next ( )	1855:2:43717:43724	6127386	11	True				
ANR	6127488	CallExpression	next ( )		6127386	0					
ANR	6127489	Callee	next		6127386	0					
ANR	6127490	Identifier	next		6127386	0					
ANR	6127491	ArgumentList			6127386	1					
ANR	6127492	BreakStatement	break ;	1856:2:43728:43733	6127386	12	True				
ANR	6127493	Label	case TOK_CLLONG :	1857:1:43736:43751	6127386	13	True				
ANR	6127494	Identifier	TOK_CLLONG		6127386	0					
ANR	6127495	ExpressionStatement	vpush_tokc ( VT_INT64 )	1858:2:43755:43776	6127386	14	True				
ANR	6127496	CallExpression	vpush_tokc ( VT_INT64 )		6127386	0					
ANR	6127497	Callee	vpush_tokc		6127386	0					
ANR	6127498	Identifier	vpush_tokc		6127386	0					
ANR	6127499	ArgumentList	VT_INT64		6127386	1					
ANR	6127500	Argument	VT_INT64		6127386	0					
ANR	6127501	Identifier	VT_INT64		6127386	0					
ANR	6127502	ExpressionStatement	next ( )	1859:2:43780:43787	6127386	15	True				
ANR	6127503	CallExpression	next ( )		6127386	0					
ANR	6127504	Callee	next		6127386	0					
ANR	6127505	Identifier	next		6127386	0					
ANR	6127506	ArgumentList			6127386	1					
ANR	6127507	BreakStatement	break ;	1860:2:43791:43796	6127386	16	True				
ANR	6127508	Label	case TOK_CULLONG :	1861:1:43799:43815	6127386	17	True				
ANR	6127509	Identifier	TOK_CULLONG		6127386	0					
ANR	6127510	ExpressionStatement	vpush_tokc ( VT_INT64 | VT_UNSIGNED )	1862:2:43819:43854	6127386	18	True				
ANR	6127511	CallExpression	vpush_tokc ( VT_INT64 | VT_UNSIGNED )		6127386	0					
ANR	6127512	Callee	vpush_tokc		6127386	0					
ANR	6127513	Identifier	vpush_tokc		6127386	0					
ANR	6127514	ArgumentList	VT_INT64 | VT_UNSIGNED		6127386	1					
ANR	6127515	Argument	VT_INT64 | VT_UNSIGNED		6127386	0					
ANR	6127516	InclusiveOrExpression	VT_INT64 | VT_UNSIGNED		6127386	0		|			
ANR	6127517	Identifier	VT_INT64		6127386	0					
ANR	6127518	Identifier	VT_UNSIGNED		6127386	1					
ANR	6127519	ExpressionStatement	next ( )	1863:2:43858:43865	6127386	19	True				
ANR	6127520	CallExpression	next ( )		6127386	0					
ANR	6127521	Callee	next		6127386	0					
ANR	6127522	Identifier	next		6127386	0					
ANR	6127523	ArgumentList			6127386	1					
ANR	6127524	BreakStatement	break ;	1864:2:43869:43874	6127386	20	True				
ANR	6127525	Label	case TOK_CFLOAT :	1865:1:43877:43892	6127386	21	True				
ANR	6127526	Identifier	TOK_CFLOAT		6127386	0					
ANR	6127527	ExpressionStatement	vpush_tokc ( VT_FLOAT )	1866:2:43896:43917	6127386	22	True				
ANR	6127528	CallExpression	vpush_tokc ( VT_FLOAT )		6127386	0					
ANR	6127529	Callee	vpush_tokc		6127386	0					
ANR	6127530	Identifier	vpush_tokc		6127386	0					
ANR	6127531	ArgumentList	VT_FLOAT		6127386	1					
ANR	6127532	Argument	VT_FLOAT		6127386	0					
ANR	6127533	Identifier	VT_FLOAT		6127386	0					
ANR	6127534	ExpressionStatement	next ( )	1867:2:43921:43928	6127386	23	True				
ANR	6127535	CallExpression	next ( )		6127386	0					
ANR	6127536	Callee	next		6127386	0					
ANR	6127537	Identifier	next		6127386	0					
ANR	6127538	ArgumentList			6127386	1					
ANR	6127539	BreakStatement	break ;	1868:2:43932:43937	6127386	24	True				
ANR	6127540	Label	case TOK_CDOUBLE :	1869:1:43940:43956	6127386	25	True				
ANR	6127541	Identifier	TOK_CDOUBLE		6127386	0					
ANR	6127542	ExpressionStatement	vpush_tokc ( VT_DOUBLE )	1870:2:43960:43982	6127386	26	True				
ANR	6127543	CallExpression	vpush_tokc ( VT_DOUBLE )		6127386	0					
ANR	6127544	Callee	vpush_tokc		6127386	0					
ANR	6127545	Identifier	vpush_tokc		6127386	0					
ANR	6127546	ArgumentList	VT_DOUBLE		6127386	1					
ANR	6127547	Argument	VT_DOUBLE		6127386	0					
ANR	6127548	Identifier	VT_DOUBLE		6127386	0					
ANR	6127549	ExpressionStatement	next ( )	1871:2:43986:43993	6127386	27	True				
ANR	6127550	CallExpression	next ( )		6127386	0					
ANR	6127551	Callee	next		6127386	0					
ANR	6127552	Identifier	next		6127386	0					
ANR	6127553	ArgumentList			6127386	1					
ANR	6127554	BreakStatement	break ;	1872:2:43997:44002	6127386	28	True				
ANR	6127555	Label	case TOK_CLDOUBLE :	1873:1:44005:44022	6127386	29	True				
ANR	6127556	Identifier	TOK_CLDOUBLE		6127386	0					
ANR	6127557	ExpressionStatement	vpush_tokc ( VT_LDOUBLE )	1874:2:44026:44049	6127386	30	True				
ANR	6127558	CallExpression	vpush_tokc ( VT_LDOUBLE )		6127386	0					
ANR	6127559	Callee	vpush_tokc		6127386	0					
ANR	6127560	Identifier	vpush_tokc		6127386	0					
ANR	6127561	ArgumentList	VT_LDOUBLE		6127386	1					
ANR	6127562	Argument	VT_LDOUBLE		6127386	0					
ANR	6127563	Identifier	VT_LDOUBLE		6127386	0					
ANR	6127564	ExpressionStatement	next ( )	1875:2:44053:44060	6127386	31	True				
ANR	6127565	CallExpression	next ( )		6127386	0					
ANR	6127566	Callee	next		6127386	0					
ANR	6127567	Identifier	next		6127386	0					
ANR	6127568	ArgumentList			6127386	1					
ANR	6127569	BreakStatement	break ;	1876:2:44064:44069	6127386	32	True				
ANR	6127570	Label	case TOK___FUNCTION__ :	1877:1:44072:44093	6127386	33	True				
ANR	6127571	Identifier	TOK___FUNCTION__		6127386	0					
ANR	6127572	IfStatement	if ( ! gnu_ext )		6127386	34					
ANR	6127573	Condition	! gnu_ext	1878:6:44101:44108	6127386	0	True				
ANR	6127574	UnaryOperationExpression	! gnu_ext		6127386	0					
ANR	6127575	UnaryOperator	!		6127386	0					
ANR	6127576	Identifier	gnu_ext		6127386	1					
ANR	6127577	CompoundStatement		48:16:866:866	6127386	1					
ANR	6127578	GotoStatement	goto tok_identifier ;	1879:3:44116:44135	6127386	0	True				
ANR	6127579	Identifier	tok_identifier		6127386	0					
ANR	6127580	Label	case TOK___FUNC__ :	1882:1:44159:44176	6127386	35	True				
ANR	6127581	Identifier	TOK___FUNC__		6127386	0					
ANR	6127582	CompoundStatement		55:2:961:968	6127386	36					
ANR	6127583	IdentifierDeclStatement	int len ;	1885:2:44206:44213	6127386	0	True				
ANR	6127584	IdentifierDecl	len		6127386	0					
ANR	6127585	IdentifierDeclType	int		6127386	0					
ANR	6127586	Identifier	len		6127386	1					
ANR	6127587	ExpressionStatement	len = strlen ( funcname ) + 1	1887:2:44258:44285	6127386	1	True				
ANR	6127588	AssignmentExpression	len = strlen ( funcname ) + 1		6127386	0		=			
ANR	6127589	Identifier	len		6127386	0					
ANR	6127590	AdditiveExpression	strlen ( funcname ) + 1		6127386	1		+			
ANR	6127591	CallExpression	strlen ( funcname )		6127386	0					
ANR	6127592	Callee	strlen		6127386	0					
ANR	6127593	Identifier	strlen		6127386	0					
ANR	6127594	ArgumentList	funcname		6127386	1					
ANR	6127595	Argument	funcname		6127386	0					
ANR	6127596	Identifier	funcname		6127386	0					
ANR	6127597	PrimaryExpression	1		6127386	1					
ANR	6127598	ExpressionStatement	type . t = VT_INT8	1889:2:44321:44337	6127386	2	True				
ANR	6127599	AssignmentExpression	type . t = VT_INT8		6127386	0		=			
ANR	6127600	MemberAccess	type . t		6127386	0					
ANR	6127601	Identifier	type		6127386	0					
ANR	6127602	Identifier	t		6127386	1					
ANR	6127603	Identifier	VT_INT8		6127386	1					
ANR	6127604	ExpressionStatement	mk_pointer ( & type )	1890:2:44341:44359	6127386	3	True				
ANR	6127605	CallExpression	mk_pointer ( & type )		6127386	0					
ANR	6127606	Callee	mk_pointer		6127386	0					
ANR	6127607	Identifier	mk_pointer		6127386	0					
ANR	6127608	ArgumentList	& type		6127386	1					
ANR	6127609	Argument	& type		6127386	0					
ANR	6127610	UnaryOperationExpression	& type		6127386	0					
ANR	6127611	UnaryOperator	&		6127386	0					
ANR	6127612	Identifier	type		6127386	1					
ANR	6127613	ExpressionStatement	type . t |= VT_ARRAY	1891:2:44363:44381	6127386	4	True				
ANR	6127614	AssignmentExpression	type . t |= VT_ARRAY		6127386	0		|=			
ANR	6127615	MemberAccess	type . t		6127386	0					
ANR	6127616	Identifier	type		6127386	0					
ANR	6127617	Identifier	t		6127386	1					
ANR	6127618	Identifier	VT_ARRAY		6127386	1					
ANR	6127619	ExpressionStatement	type . ref -> c = len	1892:2:44385:44402	6127386	5	True				
ANR	6127620	AssignmentExpression	type . ref -> c = len		6127386	0		=			
ANR	6127621	PtrMemberAccess	type . ref -> c		6127386	0					
ANR	6127622	MemberAccess	type . ref		6127386	0					
ANR	6127623	Identifier	type		6127386	0					
ANR	6127624	Identifier	ref		6127386	1					
ANR	6127625	Identifier	c		6127386	1					
ANR	6127626	Identifier	len		6127386	1					
ANR	6127627	ExpressionStatement	next ( )	1895:2:44469:44476	6127386	6	True				
ANR	6127628	CallExpression	next ( )		6127386	0					
ANR	6127629	Callee	next		6127386	0					
ANR	6127630	Identifier	next		6127386	0					
ANR	6127631	ArgumentList			6127386	1					
ANR	6127632	BreakStatement	break ;	1897:1:44482:44487	6127386	37	True				
ANR	6127633	Label	case TOK_LSTR :	1898:1:44490:44503	6127386	38	True				
ANR	6127634	Identifier	TOK_LSTR		6127386	0					
ANR	6127635	IfStatement	"if ( ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6127386	39					
ANR	6127636	Condition	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"	1899:6:44511:44548	6127386	0	True				
ANR	6127637	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	0					
ANR	6127638	UnaryOperator	!		6127386	0					
ANR	6127639	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1					
ANR	6127640	Callee	strncmp		6127386	0					
ANR	6127641	Identifier	strncmp		6127386	0					
ANR	6127642	ArgumentList	tcc_state -> os		6127386	1					
ANR	6127643	Argument	tcc_state -> os		6127386	0					
ANR	6127644	PtrMemberAccess	tcc_state -> os		6127386	0					
ANR	6127645	Identifier	tcc_state		6127386	0					
ANR	6127646	Identifier	os		6127386	1					
ANR	6127647	Argument	"""windows"""		6127386	1					
ANR	6127648	PrimaryExpression	"""windows"""		6127386	0					
ANR	6127649	Argument	7		6127386	2					
ANR	6127650	PrimaryExpression	7		6127386	0					
ANR	6127651	CompoundStatement		69:46:1306:1306	6127386	1					
ANR	6127652	ExpressionStatement	t = VT_INT16 | VT_UNSIGNED	1900:3:44556:44582	6127386	0	True				
ANR	6127653	AssignmentExpression	t = VT_INT16 | VT_UNSIGNED		6127386	0		=			
ANR	6127654	Identifier	t		6127386	0					
ANR	6127655	InclusiveOrExpression	VT_INT16 | VT_UNSIGNED		6127386	1		|			
ANR	6127656	Identifier	VT_INT16		6127386	0					
ANR	6127657	Identifier	VT_UNSIGNED		6127386	1					
ANR	6127658	ElseStatement	else		6127386	0					
ANR	6127659	CompoundStatement		71:9:1348:1348	6127386	0					
ANR	6127660	ExpressionStatement	t = VT_INT32	1902:3:44598:44610	6127386	0	True				
ANR	6127661	AssignmentExpression	t = VT_INT32		6127386	0		=			
ANR	6127662	Identifier	t		6127386	0					
ANR	6127663	Identifier	VT_INT32		6127386	1					
ANR	6127664	GotoStatement	goto str_init ;	1904:2:44618:44631	6127386	40	True				
ANR	6127665	Identifier	str_init		6127386	0					
ANR	6127666	Label	case TOK_STR :	1905:1:44634:44646	6127386	41	True				
ANR	6127667	Identifier	TOK_STR		6127386	0					
ANR	6127668	ExpressionStatement	t = VT_INT8	1907:2:44673:44684	6127386	42	True				
ANR	6127669	AssignmentExpression	t = VT_INT8		6127386	0		=			
ANR	6127670	Identifier	t		6127386	0					
ANR	6127671	Identifier	VT_INT8		6127386	1					
ANR	6127672	Label	str_init :	1908:0:44686:44694	6127386	43	True				
ANR	6127673	Identifier	str_init		6127386	0					
ANR	6127674	IfStatement	if ( tcc_state -> warn_write_strings )		6127386	44					
ANR	6127675	Condition	tcc_state -> warn_write_strings	1909:6:44702:44730	6127386	0	True				
ANR	6127676	PtrMemberAccess	tcc_state -> warn_write_strings		6127386	0					
ANR	6127677	Identifier	tcc_state		6127386	0					
ANR	6127678	Identifier	warn_write_strings		6127386	1					
ANR	6127679	CompoundStatement		79:37:1488:1488	6127386	1					
ANR	6127680	ExpressionStatement	t |= VT_CONSTANT	1910:3:44738:44754	6127386	0	True				
ANR	6127681	AssignmentExpression	t |= VT_CONSTANT		6127386	0		|=			
ANR	6127682	Identifier	t		6127386	0					
ANR	6127683	Identifier	VT_CONSTANT		6127386	1					
ANR	6127684	ExpressionStatement	type . t = t	1912:2:44762:44772	6127386	45	True				
ANR	6127685	AssignmentExpression	type . t = t		6127386	0		=			
ANR	6127686	MemberAccess	type . t		6127386	0					
ANR	6127687	Identifier	type		6127386	0					
ANR	6127688	Identifier	t		6127386	1					
ANR	6127689	Identifier	t		6127386	1					
ANR	6127690	ExpressionStatement	mk_pointer ( & type )	1913:2:44776:44794	6127386	46	True				
ANR	6127691	CallExpression	mk_pointer ( & type )		6127386	0					
ANR	6127692	Callee	mk_pointer		6127386	0					
ANR	6127693	Identifier	mk_pointer		6127386	0					
ANR	6127694	ArgumentList	& type		6127386	1					
ANR	6127695	Argument	& type		6127386	0					
ANR	6127696	UnaryOperationExpression	& type		6127386	0					
ANR	6127697	UnaryOperator	&		6127386	0					
ANR	6127698	Identifier	type		6127386	1					
ANR	6127699	ExpressionStatement	type . t |= VT_ARRAY	1914:2:44798:44816	6127386	47	True				
ANR	6127700	AssignmentExpression	type . t |= VT_ARRAY		6127386	0		|=			
ANR	6127701	MemberAccess	type . t		6127386	0					
ANR	6127702	Identifier	type		6127386	0					
ANR	6127703	Identifier	t		6127386	1					
ANR	6127704	Identifier	VT_ARRAY		6127386	1					
ANR	6127705	ExpressionStatement	"memset ( & ad , 0 , sizeof ( AttributeDef ) )"	1915:2:44820:44857	6127386	48	True				
ANR	6127706	CallExpression	"memset ( & ad , 0 , sizeof ( AttributeDef ) )"		6127386	0					
ANR	6127707	Callee	memset		6127386	0					
ANR	6127708	Identifier	memset		6127386	0					
ANR	6127709	ArgumentList	& ad		6127386	1					
ANR	6127710	Argument	& ad		6127386	0					
ANR	6127711	UnaryOperationExpression	& ad		6127386	0					
ANR	6127712	UnaryOperator	&		6127386	0					
ANR	6127713	Identifier	ad		6127386	1					
ANR	6127714	Argument	0		6127386	1					
ANR	6127715	PrimaryExpression	0		6127386	0					
ANR	6127716	Argument	sizeof ( AttributeDef )		6127386	2					
ANR	6127717	SizeofExpression	sizeof ( AttributeDef )		6127386	0					
ANR	6127718	Sizeof	sizeof		6127386	0					
ANR	6127719	SizeofOperand	AttributeDef		6127386	1					
ANR	6127720	ExpressionStatement	"decl_initializer_alloc ( & type , & ad , VT_CONST , 2 , 0 , NULL , 0 )"	1916:2:44861:44921	6127386	49	True				
ANR	6127721	CallExpression	"decl_initializer_alloc ( & type , & ad , VT_CONST , 2 , 0 , NULL , 0 )"		6127386	0					
ANR	6127722	Callee	decl_initializer_alloc		6127386	0					
ANR	6127723	Identifier	decl_initializer_alloc		6127386	0					
ANR	6127724	ArgumentList	& type		6127386	1					
ANR	6127725	Argument	& type		6127386	0					
ANR	6127726	UnaryOperationExpression	& type		6127386	0					
ANR	6127727	UnaryOperator	&		6127386	0					
ANR	6127728	Identifier	type		6127386	1					
ANR	6127729	Argument	& ad		6127386	1					
ANR	6127730	UnaryOperationExpression	& ad		6127386	0					
ANR	6127731	UnaryOperator	&		6127386	0					
ANR	6127732	Identifier	ad		6127386	1					
ANR	6127733	Argument	VT_CONST		6127386	2					
ANR	6127734	Identifier	VT_CONST		6127386	0					
ANR	6127735	Argument	2		6127386	3					
ANR	6127736	PrimaryExpression	2		6127386	0					
ANR	6127737	Argument	0		6127386	4					
ANR	6127738	PrimaryExpression	0		6127386	0					
ANR	6127739	Argument	NULL		6127386	5					
ANR	6127740	Identifier	NULL		6127386	0					
ANR	6127741	Argument	0		6127386	6					
ANR	6127742	PrimaryExpression	0		6127386	0					
ANR	6127743	BreakStatement	break ;	1917:2:44925:44930	6127386	50	True				
ANR	6127744	Label	case '(' :	1918:1:44933:44941	6127386	51	True				
ANR	6127745	ExpressionStatement	next ( )	1919:2:44945:44952	6127386	52	True				
ANR	6127746	CallExpression	next ( )		6127386	0					
ANR	6127747	Callee	next		6127386	0					
ANR	6127748	Identifier	next		6127386	0					
ANR	6127749	ArgumentList			6127386	1					
ANR	6127750	IfStatement	"if ( parse_btype ( & type , & ad ) )"		6127386	53					
ANR	6127751	Condition	"parse_btype ( & type , & ad )"	1921:6:44975:44998	6127386	0	True				
ANR	6127752	CallExpression	"parse_btype ( & type , & ad )"		6127386	0					
ANR	6127753	Callee	parse_btype		6127386	0					
ANR	6127754	Identifier	parse_btype		6127386	0					
ANR	6127755	ArgumentList	& type		6127386	1					
ANR	6127756	Argument	& type		6127386	0					
ANR	6127757	UnaryOperationExpression	& type		6127386	0					
ANR	6127758	UnaryOperator	&		6127386	0					
ANR	6127759	Identifier	type		6127386	1					
ANR	6127760	Argument	& ad		6127386	1					
ANR	6127761	UnaryOperationExpression	& ad		6127386	0					
ANR	6127762	UnaryOperator	&		6127386	0					
ANR	6127763	Identifier	ad		6127386	1					
ANR	6127764	CompoundStatement		91:32:1756:1756	6127386	1					
ANR	6127765	ExpressionStatement	"type_decl ( & type , & ad , & n , TYPE_ABSTRACT )"	1922:3:45006:45047	6127386	0	True				
ANR	6127766	CallExpression	"type_decl ( & type , & ad , & n , TYPE_ABSTRACT )"		6127386	0					
ANR	6127767	Callee	type_decl		6127386	0					
ANR	6127768	Identifier	type_decl		6127386	0					
ANR	6127769	ArgumentList	& type		6127386	1					
ANR	6127770	Argument	& type		6127386	0					
ANR	6127771	UnaryOperationExpression	& type		6127386	0					
ANR	6127772	UnaryOperator	&		6127386	0					
ANR	6127773	Identifier	type		6127386	1					
ANR	6127774	Argument	& ad		6127386	1					
ANR	6127775	UnaryOperationExpression	& ad		6127386	0					
ANR	6127776	UnaryOperator	&		6127386	0					
ANR	6127777	Identifier	ad		6127386	1					
ANR	6127778	Argument	& n		6127386	2					
ANR	6127779	UnaryOperationExpression	& n		6127386	0					
ANR	6127780	UnaryOperator	&		6127386	0					
ANR	6127781	Identifier	n		6127386	1					
ANR	6127782	Argument	TYPE_ABSTRACT		6127386	3					
ANR	6127783	Identifier	TYPE_ABSTRACT		6127386	0					
ANR	6127784	ExpressionStatement	skip ( ')' )	1923:3:45052:45062	6127386	1	True				
ANR	6127785	CallExpression	skip ( ')' )		6127386	0					
ANR	6127786	Callee	skip		6127386	0					
ANR	6127787	Identifier	skip		6127386	0					
ANR	6127788	ArgumentList	')'		6127386	1					
ANR	6127789	Argument	')'		6127386	0					
ANR	6127790	PrimaryExpression	')'		6127386	0					
ANR	6127791	IfStatement	if ( tok == '{' )		6127386	2					
ANR	6127792	Condition	tok == '{'	1925:7:45110:45119	6127386	0	True				
ANR	6127793	EqualityExpression	tok == '{'		6127386	0		==			
ANR	6127794	Identifier	tok		6127386	0					
ANR	6127795	PrimaryExpression	'{'		6127386	1					
ANR	6127796	CompoundStatement		95:19:1877:1877	6127386	1					
ANR	6127797	IfStatement	if ( global_expr )		6127386	0					
ANR	6127798	Condition	global_expr	1927:8:45179:45189	6127386	0	True				
ANR	6127799	Identifier	global_expr		6127386	0					
ANR	6127800	CompoundStatement		97:21:1947:1947	6127386	1					
ANR	6127801	ExpressionStatement	r = VT_CONST	1928:5:45199:45211	6127386	0	True				
ANR	6127802	AssignmentExpression	r = VT_CONST		6127386	0		=			
ANR	6127803	Identifier	r		6127386	0					
ANR	6127804	Identifier	VT_CONST		6127386	1					
ANR	6127805	ElseStatement	else		6127386	0					
ANR	6127806	CompoundStatement		99:11:1979:1979	6127386	0					
ANR	6127807	ExpressionStatement	r = VT_LOCAL	1930:5:45231:45243	6127386	0	True				
ANR	6127808	AssignmentExpression	r = VT_LOCAL		6127386	0		=			
ANR	6127809	Identifier	r		6127386	0					
ANR	6127810	Identifier	VT_LOCAL		6127386	1					
ANR	6127811	IfStatement	if ( ! ( type . t & VT_ARRAY ) )		6127386	1					
ANR	6127812	Condition	! ( type . t & VT_ARRAY )	1933:8:45299:45318	6127386	0	True				
ANR	6127813	UnaryOperationExpression	! ( type . t & VT_ARRAY )		6127386	0					
ANR	6127814	UnaryOperator	!		6127386	0					
ANR	6127815	BitAndExpression	type . t & VT_ARRAY		6127386	1		&			
ANR	6127816	MemberAccess	type . t		6127386	0					
ANR	6127817	Identifier	type		6127386	0					
ANR	6127818	Identifier	t		6127386	1					
ANR	6127819	Identifier	VT_ARRAY		6127386	1					
ANR	6127820	CompoundStatement		103:30:2076:2076	6127386	1					
ANR	6127821	ExpressionStatement	r |= lvalue_type ( type . t )	1934:5:45328:45353	6127386	0	True				
ANR	6127822	AssignmentExpression	r |= lvalue_type ( type . t )		6127386	0		|=			
ANR	6127823	Identifier	r		6127386	0					
ANR	6127824	CallExpression	lvalue_type ( type . t )		6127386	1					
ANR	6127825	Callee	lvalue_type		6127386	0					
ANR	6127826	Identifier	lvalue_type		6127386	0					
ANR	6127827	ArgumentList	type . t		6127386	1					
ANR	6127828	Argument	type . t		6127386	0					
ANR	6127829	MemberAccess	type . t		6127386	0					
ANR	6127830	Identifier	type		6127386	0					
ANR	6127831	Identifier	t		6127386	1					
ANR	6127832	ExpressionStatement	"memset ( & ad , 0 , sizeof ( AttributeDef ) )"	1936:4:45365:45402	6127386	2	True				
ANR	6127833	CallExpression	"memset ( & ad , 0 , sizeof ( AttributeDef ) )"		6127386	0					
ANR	6127834	Callee	memset		6127386	0					
ANR	6127835	Identifier	memset		6127386	0					
ANR	6127836	ArgumentList	& ad		6127386	1					
ANR	6127837	Argument	& ad		6127386	0					
ANR	6127838	UnaryOperationExpression	& ad		6127386	0					
ANR	6127839	UnaryOperator	&		6127386	0					
ANR	6127840	Identifier	ad		6127386	1					
ANR	6127841	Argument	0		6127386	1					
ANR	6127842	PrimaryExpression	0		6127386	0					
ANR	6127843	Argument	sizeof ( AttributeDef )		6127386	2					
ANR	6127844	SizeofExpression	sizeof ( AttributeDef )		6127386	0					
ANR	6127845	Sizeof	sizeof		6127386	0					
ANR	6127846	SizeofOperand	AttributeDef		6127386	1					
ANR	6127847	ExpressionStatement	"decl_initializer_alloc ( & type , & ad , r , 1 , 0 , NULL , 0 )"	1937:4:45408:45461	6127386	3	True				
ANR	6127848	CallExpression	"decl_initializer_alloc ( & type , & ad , r , 1 , 0 , NULL , 0 )"		6127386	0					
ANR	6127849	Callee	decl_initializer_alloc		6127386	0					
ANR	6127850	Identifier	decl_initializer_alloc		6127386	0					
ANR	6127851	ArgumentList	& type		6127386	1					
ANR	6127852	Argument	& type		6127386	0					
ANR	6127853	UnaryOperationExpression	& type		6127386	0					
ANR	6127854	UnaryOperator	&		6127386	0					
ANR	6127855	Identifier	type		6127386	1					
ANR	6127856	Argument	& ad		6127386	1					
ANR	6127857	UnaryOperationExpression	& ad		6127386	0					
ANR	6127858	UnaryOperator	&		6127386	0					
ANR	6127859	Identifier	ad		6127386	1					
ANR	6127860	Argument	r		6127386	2					
ANR	6127861	Identifier	r		6127386	0					
ANR	6127862	Argument	1		6127386	3					
ANR	6127863	PrimaryExpression	1		6127386	0					
ANR	6127864	Argument	0		6127386	4					
ANR	6127865	PrimaryExpression	0		6127386	0					
ANR	6127866	Argument	NULL		6127386	5					
ANR	6127867	Identifier	NULL		6127386	0					
ANR	6127868	Argument	0		6127386	6					
ANR	6127869	PrimaryExpression	0		6127386	0					
ANR	6127870	ElseStatement	else		6127386	0					
ANR	6127871	CompoundStatement		108:10:2228:2228	6127386	0					
ANR	6127872	IfStatement	if ( sizeof_caller )		6127386	0					
ANR	6127873	Condition	sizeof_caller	1939:8:45483:45495	6127386	0	True				
ANR	6127874	Identifier	sizeof_caller		6127386	0					
ANR	6127875	CompoundStatement		109:23:2253:2253	6127386	1					
ANR	6127876	ExpressionStatement	vpush ( & type )	1940:5:45505:45518	6127386	0	True				
ANR	6127877	CallExpression	vpush ( & type )		6127386	0					
ANR	6127878	Callee	vpush		6127386	0					
ANR	6127879	Identifier	vpush		6127386	0					
ANR	6127880	ArgumentList	& type		6127386	1					
ANR	6127881	Argument	& type		6127386	0					
ANR	6127882	UnaryOperationExpression	& type		6127386	0					
ANR	6127883	UnaryOperator	&		6127386	0					
ANR	6127884	Identifier	type		6127386	1					
ANR	6127885	ReturnStatement	return ;	1941:5:45525:45531	6127386	1	True				
ANR	6127886	ExpressionStatement	unary ( )	1943:4:45543:45551	6127386	1	True				
ANR	6127887	CallExpression	unary ( )		6127386	0					
ANR	6127888	Callee	unary		6127386	0					
ANR	6127889	Identifier	unary		6127386	0					
ANR	6127890	ArgumentList			6127386	1					
ANR	6127891	ElseStatement	else		6127386	0					
ANR	6127892	IfStatement	if ( tok == '{' )		6127386	0					
ANR	6127893	Condition	tok == '{'	1945:13:45571:45580	6127386	0	True				
ANR	6127894	EqualityExpression	tok == '{'		6127386	0		==			
ANR	6127895	Identifier	tok		6127386	0					
ANR	6127896	PrimaryExpression	'{'		6127386	1					
ANR	6127897	CompoundStatement		115:25:2338:2338	6127386	1					
ANR	6127898	ExpressionStatement	skip ( ')' )	1948:3:45677:45687	6127386	0	True				
ANR	6127899	CallExpression	skip ( ')' )		6127386	0					
ANR	6127900	Callee	skip		6127386	0					
ANR	6127901	Identifier	skip		6127386	0					
ANR	6127902	ArgumentList	')'		6127386	1					
ANR	6127903	Argument	')'		6127386	0					
ANR	6127904	PrimaryExpression	')'		6127386	0					
ANR	6127905	ElseStatement	else		6127386	0					
ANR	6127906	CompoundStatement		119:9:2453:2453	6127386	0					
ANR	6127907	ExpressionStatement	gexpr ( )	1950:3:45703:45711	6127386	0	True				
ANR	6127908	CallExpression	gexpr ( )		6127386	0					
ANR	6127909	Callee	gexpr		6127386	0					
ANR	6127910	Identifier	gexpr		6127386	0					
ANR	6127911	ArgumentList			6127386	1					
ANR	6127912	ExpressionStatement	skip ( ')' )	1951:3:45716:45726	6127386	1	True				
ANR	6127913	CallExpression	skip ( ')' )		6127386	0					
ANR	6127914	Callee	skip		6127386	0					
ANR	6127915	Identifier	skip		6127386	0					
ANR	6127916	ArgumentList	')'		6127386	1					
ANR	6127917	Argument	')'		6127386	0					
ANR	6127918	PrimaryExpression	')'		6127386	0					
ANR	6127919	BreakStatement	break ;	1953:2:45734:45739	6127386	54	True				
ANR	6127920	Label	case '*' :	1954:1:45742:45750	6127386	55	True				
ANR	6127921	ExpressionStatement	next ( )	1955:2:45754:45761	6127386	56	True				
ANR	6127922	CallExpression	next ( )		6127386	0					
ANR	6127923	Callee	next		6127386	0					
ANR	6127924	Identifier	next		6127386	0					
ANR	6127925	ArgumentList			6127386	1					
ANR	6127926	ExpressionStatement	unary ( )	1956:2:45765:45773	6127386	57	True				
ANR	6127927	CallExpression	unary ( )		6127386	0					
ANR	6127928	Callee	unary		6127386	0					
ANR	6127929	Identifier	unary		6127386	0					
ANR	6127930	ArgumentList			6127386	1					
ANR	6127931	ExpressionStatement	indir ( )	1957:2:45777:45785	6127386	58	True				
ANR	6127932	CallExpression	indir ( )		6127386	0					
ANR	6127933	Callee	indir		6127386	0					
ANR	6127934	Identifier	indir		6127386	0					
ANR	6127935	ArgumentList			6127386	1					
ANR	6127936	BreakStatement	break ;	1958:2:45789:45794	6127386	59	True				
ANR	6127937	Label	case '!' :	1959:1:45797:45805	6127386	60	True				
ANR	6127938	ExpressionStatement	next ( )	1960:2:45809:45816	6127386	61	True				
ANR	6127939	CallExpression	next ( )		6127386	0					
ANR	6127940	Callee	next		6127386	0					
ANR	6127941	Identifier	next		6127386	0					
ANR	6127942	ArgumentList			6127386	1					
ANR	6127943	ExpressionStatement	unary ( )	1961:2:45820:45828	6127386	62	True				
ANR	6127944	CallExpression	unary ( )		6127386	0					
ANR	6127945	Callee	unary		6127386	0					
ANR	6127946	Identifier	unary		6127386	0					
ANR	6127947	ArgumentList			6127386	1					
ANR	6127948	IfStatement	if ( ( vtop -> r & VT_VALMASK ) == VT_CMP )		6127386	63					
ANR	6127949	Condition	( vtop -> r & VT_VALMASK ) == VT_CMP	1962:6:45836:45867	6127386	0	True				
ANR	6127950	EqualityExpression	( vtop -> r & VT_VALMASK ) == VT_CMP		6127386	0		==			
ANR	6127951	BitAndExpression	vtop -> r & VT_VALMASK		6127386	0		&			
ANR	6127952	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6127953	Identifier	vtop		6127386	0					
ANR	6127954	Identifier	r		6127386	1					
ANR	6127955	Identifier	VT_VALMASK		6127386	1					
ANR	6127956	Identifier	VT_CMP		6127386	1					
ANR	6127957	CompoundStatement		132:40:2625:2625	6127386	1					
ANR	6127958	ExpressionStatement	vtop -> c . i = vtop -> c . i ^ 1	1963:3:45875:45900	6127386	0	True				
ANR	6127959	AssignmentExpression	vtop -> c . i = vtop -> c . i ^ 1		6127386	0		=			
ANR	6127960	MemberAccess	vtop -> c . i		6127386	0					
ANR	6127961	PtrMemberAccess	vtop -> c		6127386	0					
ANR	6127962	Identifier	vtop		6127386	0					
ANR	6127963	Identifier	c		6127386	1					
ANR	6127964	Identifier	i		6127386	1					
ANR	6127965	ExclusiveOrExpression	vtop -> c . i ^ 1		6127386	1		^			
ANR	6127966	MemberAccess	vtop -> c . i		6127386	0					
ANR	6127967	PtrMemberAccess	vtop -> c		6127386	0					
ANR	6127968	Identifier	vtop		6127386	0					
ANR	6127969	Identifier	c		6127386	1					
ANR	6127970	Identifier	i		6127386	1					
ANR	6127971	PrimaryExpression	1		6127386	1					
ANR	6127972	BreakStatement	break ;	1965:2:45908:45913	6127386	64	True				
ANR	6127973	Label	case TOK_SIZEOF :	1966:1:45916:45931	6127386	65	True				
ANR	6127974	Identifier	TOK_SIZEOF		6127386	0					
ANR	6127975	Label	case TOK_ALIGNOF1 :	1967:1:45934:45951	6127386	66	True				
ANR	6127976	Identifier	TOK_ALIGNOF1		6127386	0					
ANR	6127977	Label	case TOK_ALIGNOF2 :	1968:1:45954:45971	6127386	67	True				
ANR	6127978	Identifier	TOK_ALIGNOF2		6127386	0					
ANR	6127979	ExpressionStatement	t = tok	1969:2:45975:45982	6127386	68	True				
ANR	6127980	AssignmentExpression	t = tok		6127386	0		=			
ANR	6127981	Identifier	t		6127386	0					
ANR	6127982	Identifier	tok		6127386	1					
ANR	6127983	ExpressionStatement	next ( )	1970:2:45986:45993	6127386	69	True				
ANR	6127984	CallExpression	next ( )		6127386	0					
ANR	6127985	Callee	next		6127386	0					
ANR	6127986	Identifier	next		6127386	0					
ANR	6127987	ArgumentList			6127386	1					
ANR	6127988	ExpressionStatement	in_sizeof ++	1971:2:45997:46008	6127386	70	True				
ANR	6127989	PostIncDecOperationExpression	in_sizeof ++		6127386	0					
ANR	6127990	Identifier	in_sizeof		6127386	0					
ANR	6127991	IncDec	++		6127386	1					
ANR	6127992	ExpressionStatement	unary_type ( & type )	1972:2:46012:46030	6127386	71	True				
ANR	6127993	CallExpression	unary_type ( & type )		6127386	0					
ANR	6127994	Callee	unary_type		6127386	0					
ANR	6127995	Identifier	unary_type		6127386	0					
ANR	6127996	ArgumentList	& type		6127386	1					
ANR	6127997	Argument	& type		6127386	0					
ANR	6127998	UnaryOperationExpression	& type		6127386	0					
ANR	6127999	UnaryOperator	&		6127386	0					
ANR	6128000	Identifier	type		6127386	1					
ANR	6128001	ExpressionStatement	"size = type_size ( & type , & align )"	1973:2:46062:46094	6127386	72	True				
ANR	6128002	AssignmentExpression	"size = type_size ( & type , & align )"		6127386	0		=			
ANR	6128003	Identifier	size		6127386	0					
ANR	6128004	CallExpression	"type_size ( & type , & align )"		6127386	1					
ANR	6128005	Callee	type_size		6127386	0					
ANR	6128006	Identifier	type_size		6127386	0					
ANR	6128007	ArgumentList	& type		6127386	1					
ANR	6128008	Argument	& type		6127386	0					
ANR	6128009	UnaryOperationExpression	& type		6127386	0					
ANR	6128010	UnaryOperator	&		6127386	0					
ANR	6128011	Identifier	type		6127386	1					
ANR	6128012	Argument	& align		6127386	1					
ANR	6128013	UnaryOperationExpression	& align		6127386	0					
ANR	6128014	UnaryOperator	&		6127386	0					
ANR	6128015	Identifier	align		6127386	1					
ANR	6128016	IfStatement	if ( t == TOK_SIZEOF )		6127386	73					
ANR	6128017	Condition	t == TOK_SIZEOF	1974:6:46102:46116	6127386	0	True				
ANR	6128018	EqualityExpression	t == TOK_SIZEOF		6127386	0		==			
ANR	6128019	Identifier	t		6127386	0					
ANR	6128020	Identifier	TOK_SIZEOF		6127386	1					
ANR	6128021	CompoundStatement		144:23:2874:2874	6127386	1					
ANR	6128022	IfStatement	if ( ! ( type . t & VT_VLA ) )		6127386	0					
ANR	6128023	Condition	! ( type . t & VT_VLA )	1975:7:46128:46145	6127386	0	True				
ANR	6128024	UnaryOperationExpression	! ( type . t & VT_VLA )		6127386	0					
ANR	6128025	UnaryOperator	!		6127386	0					
ANR	6128026	BitAndExpression	type . t & VT_VLA		6127386	1		&			
ANR	6128027	MemberAccess	type . t		6127386	0					
ANR	6128028	Identifier	type		6127386	0					
ANR	6128029	Identifier	t		6127386	1					
ANR	6128030	Identifier	VT_VLA		6127386	1					
ANR	6128031	CompoundStatement		145:27:2903:2903	6127386	1					
ANR	6128032	IfStatement	if ( size < 0 )		6127386	0					
ANR	6128033	Condition	size < 0	1976:8:46158:46165	6127386	0	True				
ANR	6128034	RelationalExpression	size < 0		6127386	0		<			
ANR	6128035	Identifier	size		6127386	0					
ANR	6128036	PrimaryExpression	0		6127386	1					
ANR	6128037	CompoundStatement		146:18:2923:2923	6127386	1					
ANR	6128038	ExpressionStatement	"TCC_ERR ( ""sizeof applied to an incomplete type"" )"	1977:5:46175:46223	6127386	0	True				
ANR	6128039	CallExpression	"TCC_ERR ( ""sizeof applied to an incomplete type"" )"		6127386	0					
ANR	6128040	Callee	TCC_ERR		6127386	0					
ANR	6128041	Identifier	TCC_ERR		6127386	0					
ANR	6128042	ArgumentList	"""sizeof applied to an incomplete type"""		6127386	1					
ANR	6128043	Argument	"""sizeof applied to an incomplete type"""		6127386	0					
ANR	6128044	PrimaryExpression	"""sizeof applied to an incomplete type"""		6127386	0					
ANR	6128045	ExpressionStatement	vpushs ( size )	1979:4:46235:46248	6127386	1	True				
ANR	6128046	CallExpression	vpushs ( size )		6127386	0					
ANR	6128047	Callee	vpushs		6127386	0					
ANR	6128048	Identifier	vpushs		6127386	0					
ANR	6128049	ArgumentList	size		6127386	1					
ANR	6128050	Argument	size		6127386	0					
ANR	6128051	Identifier	size		6127386	0					
ANR	6128052	ElseStatement	else		6127386	0					
ANR	6128053	CompoundStatement		151:9:3019:3019	6127386	0					
ANR	6128054	ExpressionStatement	vpushs ( align )	1982:3:46269:46283	6127386	0	True				
ANR	6128055	CallExpression	vpushs ( align )		6127386	0					
ANR	6128056	Callee	vpushs		6127386	0					
ANR	6128057	Identifier	vpushs		6127386	0					
ANR	6128058	ArgumentList	align		6127386	1					
ANR	6128059	Argument	align		6127386	0					
ANR	6128060	Identifier	align		6127386	0					
ANR	6128061	ExpressionStatement	vtop -> type . t |= VT_UNSIGNED	1984:2:46291:46318	6127386	74	True				
ANR	6128062	AssignmentExpression	vtop -> type . t |= VT_UNSIGNED		6127386	0		|=			
ANR	6128063	MemberAccess	vtop -> type . t		6127386	0					
ANR	6128064	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128065	Identifier	vtop		6127386	0					
ANR	6128066	Identifier	type		6127386	1					
ANR	6128067	Identifier	t		6127386	1					
ANR	6128068	Identifier	VT_UNSIGNED		6127386	1					
ANR	6128069	BreakStatement	break ;	1985:2:46322:46327	6127386	75	True				
ANR	6128070	Label	case TOK_builtin_types_compatible_p :	1987:1:46331:46366	6127386	76	True				
ANR	6128071	Identifier	TOK_builtin_types_compatible_p		6127386	0					
ANR	6128072	CompoundStatement		158:1:3124:3124	6127386	77					
ANR	6128073	ExpressionStatement	"STACK_NEW0 ( CType , type1 )"	1989:2:46373:46398	6127386	0	True				
ANR	6128074	CallExpression	"STACK_NEW0 ( CType , type1 )"		6127386	0					
ANR	6128075	Callee	STACK_NEW0		6127386	0					
ANR	6128076	Identifier	STACK_NEW0		6127386	0					
ANR	6128077	ArgumentList	CType		6127386	1					
ANR	6128078	Argument	CType		6127386	0					
ANR	6128079	Identifier	CType		6127386	0					
ANR	6128080	Argument	type1		6127386	1					
ANR	6128081	Identifier	type1		6127386	0					
ANR	6128082	ExpressionStatement	"STACK_NEW0 ( CType , type2 )"	1990:2:46402:46427	6127386	1	True				
ANR	6128083	CallExpression	"STACK_NEW0 ( CType , type2 )"		6127386	0					
ANR	6128084	Callee	STACK_NEW0		6127386	0					
ANR	6128085	Identifier	STACK_NEW0		6127386	0					
ANR	6128086	ArgumentList	CType		6127386	1					
ANR	6128087	Argument	CType		6127386	0					
ANR	6128088	Identifier	CType		6127386	0					
ANR	6128089	Argument	type2		6127386	1					
ANR	6128090	Identifier	type2		6127386	0					
ANR	6128091	ExpressionStatement	next ( )	1991:2:46431:46438	6127386	2	True				
ANR	6128092	CallExpression	next ( )		6127386	0					
ANR	6128093	Callee	next		6127386	0					
ANR	6128094	Identifier	next		6127386	0					
ANR	6128095	ArgumentList			6127386	1					
ANR	6128096	ExpressionStatement	skip ( '(' )	1992:2:46442:46452	6127386	3	True				
ANR	6128097	CallExpression	skip ( '(' )		6127386	0					
ANR	6128098	Callee	skip		6127386	0					
ANR	6128099	Identifier	skip		6127386	0					
ANR	6128100	ArgumentList	'('		6127386	1					
ANR	6128101	Argument	'('		6127386	0					
ANR	6128102	PrimaryExpression	'('		6127386	0					
ANR	6128103	ExpressionStatement	parse_type ( & type1 )	1993:2:46456:46475	6127386	4	True				
ANR	6128104	CallExpression	parse_type ( & type1 )		6127386	0					
ANR	6128105	Callee	parse_type		6127386	0					
ANR	6128106	Identifier	parse_type		6127386	0					
ANR	6128107	ArgumentList	& type1		6127386	1					
ANR	6128108	Argument	& type1		6127386	0					
ANR	6128109	UnaryOperationExpression	& type1		6127386	0					
ANR	6128110	UnaryOperator	&		6127386	0					
ANR	6128111	Identifier	type1		6127386	1					
ANR	6128112	ExpressionStatement	"skip ( ',' )"	1994:2:46479:46489	6127386	5	True				
ANR	6128113	CallExpression	"skip ( ',' )"		6127386	0					
ANR	6128114	Callee	skip		6127386	0					
ANR	6128115	Identifier	skip		6127386	0					
ANR	6128116	ArgumentList	"','"		6127386	1					
ANR	6128117	Argument	"','"		6127386	0					
ANR	6128118	PrimaryExpression	"','"		6127386	0					
ANR	6128119	ExpressionStatement	parse_type ( & type2 )	1995:2:46493:46512	6127386	6	True				
ANR	6128120	CallExpression	parse_type ( & type2 )		6127386	0					
ANR	6128121	Callee	parse_type		6127386	0					
ANR	6128122	Identifier	parse_type		6127386	0					
ANR	6128123	ArgumentList	& type2		6127386	1					
ANR	6128124	Argument	& type2		6127386	0					
ANR	6128125	UnaryOperationExpression	& type2		6127386	0					
ANR	6128126	UnaryOperator	&		6127386	0					
ANR	6128127	Identifier	type2		6127386	1					
ANR	6128128	ExpressionStatement	skip ( ')' )	1996:2:46516:46526	6127386	7	True				
ANR	6128129	CallExpression	skip ( ')' )		6127386	0					
ANR	6128130	Callee	skip		6127386	0					
ANR	6128131	Identifier	skip		6127386	0					
ANR	6128132	ArgumentList	')'		6127386	1					
ANR	6128133	Argument	')'		6127386	0					
ANR	6128134	PrimaryExpression	')'		6127386	0					
ANR	6128135	ExpressionStatement	type1 . t &= ~ ( VT_CONSTANT | VT_VOLATILE )	1997:2:46530:46569	6127386	8	True				
ANR	6128136	AssignmentExpression	type1 . t &= ~ ( VT_CONSTANT | VT_VOLATILE )		6127386	0		&=			
ANR	6128137	MemberAccess	type1 . t		6127386	0					
ANR	6128138	Identifier	type1		6127386	0					
ANR	6128139	Identifier	t		6127386	1					
ANR	6128140	UnaryOperationExpression	~ ( VT_CONSTANT | VT_VOLATILE )		6127386	1					
ANR	6128141	UnaryOperator	~		6127386	0					
ANR	6128142	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6127386	1		|			
ANR	6128143	Identifier	VT_CONSTANT		6127386	0					
ANR	6128144	Identifier	VT_VOLATILE		6127386	1					
ANR	6128145	ExpressionStatement	type2 . t &= ~ ( VT_CONSTANT | VT_VOLATILE )	1998:2:46573:46612	6127386	9	True				
ANR	6128146	AssignmentExpression	type2 . t &= ~ ( VT_CONSTANT | VT_VOLATILE )		6127386	0		&=			
ANR	6128147	MemberAccess	type2 . t		6127386	0					
ANR	6128148	Identifier	type2		6127386	0					
ANR	6128149	Identifier	t		6127386	1					
ANR	6128150	UnaryOperationExpression	~ ( VT_CONSTANT | VT_VOLATILE )		6127386	1					
ANR	6128151	UnaryOperator	~		6127386	0					
ANR	6128152	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6127386	1		|			
ANR	6128153	Identifier	VT_CONSTANT		6127386	0					
ANR	6128154	Identifier	VT_VOLATILE		6127386	1					
ANR	6128155	ExpressionStatement	"vpushi ( is_compatible_types ( & type1 , & type2 ) )"	1999:2:46616:46661	6127386	10	True				
ANR	6128156	CallExpression	"vpushi ( is_compatible_types ( & type1 , & type2 ) )"		6127386	0					
ANR	6128157	Callee	vpushi		6127386	0					
ANR	6128158	Identifier	vpushi		6127386	0					
ANR	6128159	ArgumentList	"is_compatible_types ( & type1 , & type2 )"		6127386	1					
ANR	6128160	Argument	"is_compatible_types ( & type1 , & type2 )"		6127386	0					
ANR	6128161	CallExpression	"is_compatible_types ( & type1 , & type2 )"		6127386	0					
ANR	6128162	Callee	is_compatible_types		6127386	0					
ANR	6128163	Identifier	is_compatible_types		6127386	0					
ANR	6128164	ArgumentList	& type1		6127386	1					
ANR	6128165	Argument	& type1		6127386	0					
ANR	6128166	UnaryOperationExpression	& type1		6127386	0					
ANR	6128167	UnaryOperator	&		6127386	0					
ANR	6128168	Identifier	type1		6127386	1					
ANR	6128169	Argument	& type2		6127386	1					
ANR	6128170	UnaryOperationExpression	& type2		6127386	0					
ANR	6128171	UnaryOperator	&		6127386	0					
ANR	6128172	Identifier	type2		6127386	1					
ANR	6128173	BreakStatement	break ;	2001:1:46667:46672	6127386	78	True				
ANR	6128174	Label	case TOK_builtin_constant_p :	2002:1:46675:46702	6127386	79	True				
ANR	6128175	Identifier	TOK_builtin_constant_p		6127386	0					
ANR	6128176	CompoundStatement		175:2:3491:3504	6127386	80					
ANR	6128177	IdentifierDeclStatement	int saved_nocode_wanted ;	2004:2:46709:46732	6127386	0	True				
ANR	6128178	IdentifierDecl	saved_nocode_wanted		6127386	0					
ANR	6128179	IdentifierDeclType	int		6127386	0					
ANR	6128180	Identifier	saved_nocode_wanted		6127386	1					
ANR	6128181	IdentifierDeclStatement	long long res ;	2005:2:46736:46749	6127386	1	True				
ANR	6128182	IdentifierDecl	res		6127386	0					
ANR	6128183	IdentifierDeclType	long long		6127386	0					
ANR	6128184	Identifier	res		6127386	1					
ANR	6128185	ExpressionStatement	next ( )	2006:2:46753:46760	6127386	2	True				
ANR	6128186	CallExpression	next ( )		6127386	0					
ANR	6128187	Callee	next		6127386	0					
ANR	6128188	Identifier	next		6127386	0					
ANR	6128189	ArgumentList			6127386	1					
ANR	6128190	ExpressionStatement	skip ( '(' )	2007:2:46764:46774	6127386	3	True				
ANR	6128191	CallExpression	skip ( '(' )		6127386	0					
ANR	6128192	Callee	skip		6127386	0					
ANR	6128193	Identifier	skip		6127386	0					
ANR	6128194	ArgumentList	'('		6127386	1					
ANR	6128195	Argument	'('		6127386	0					
ANR	6128196	PrimaryExpression	'('		6127386	0					
ANR	6128197	ExpressionStatement	saved_nocode_wanted = nocode_wanted	2008:2:46778:46813	6127386	4	True				
ANR	6128198	AssignmentExpression	saved_nocode_wanted = nocode_wanted		6127386	0		=			
ANR	6128199	Identifier	saved_nocode_wanted		6127386	0					
ANR	6128200	Identifier	nocode_wanted		6127386	1					
ANR	6128201	ExpressionStatement	nocode_wanted = 1	2009:2:46817:46834	6127386	5	True				
ANR	6128202	AssignmentExpression	nocode_wanted = 1		6127386	0		=			
ANR	6128203	Identifier	nocode_wanted		6127386	0					
ANR	6128204	PrimaryExpression	1		6127386	1					
ANR	6128205	ExpressionStatement	gexpr ( )	2010:2:46838:46846	6127386	6	True				
ANR	6128206	CallExpression	gexpr ( )		6127386	0					
ANR	6128207	Callee	gexpr		6127386	0					
ANR	6128208	Identifier	gexpr		6127386	0					
ANR	6128209	ArgumentList			6127386	1					
ANR	6128210	ExpressionStatement	res = ( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST	2011:2:46850:46911	6127386	7	True				
ANR	6128211	AssignmentExpression	res = ( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST		6127386	0		=			
ANR	6128212	Identifier	res		6127386	0					
ANR	6128213	EqualityExpression	( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) == VT_CONST		6127386	1		==			
ANR	6128214	BitAndExpression	vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM )		6127386	0		&			
ANR	6128215	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128216	Identifier	vtop		6127386	0					
ANR	6128217	Identifier	r		6127386	1					
ANR	6128218	InclusiveOrExpression	VT_VALMASK | VT_LVAL | VT_SYM		6127386	1		|			
ANR	6128219	Identifier	VT_VALMASK		6127386	0					
ANR	6128220	InclusiveOrExpression	VT_LVAL | VT_SYM		6127386	1		|			
ANR	6128221	Identifier	VT_LVAL		6127386	0					
ANR	6128222	Identifier	VT_SYM		6127386	1					
ANR	6128223	Identifier	VT_CONST		6127386	1					
ANR	6128224	ExpressionStatement	nocode_wanted = saved_nocode_wanted	2012:2:46915:46950	6127386	8	True				
ANR	6128225	AssignmentExpression	nocode_wanted = saved_nocode_wanted		6127386	0		=			
ANR	6128226	Identifier	nocode_wanted		6127386	0					
ANR	6128227	Identifier	saved_nocode_wanted		6127386	1					
ANR	6128228	ExpressionStatement	skip ( ')' )	2013:2:46954:46964	6127386	9	True				
ANR	6128229	CallExpression	skip ( ')' )		6127386	0					
ANR	6128230	Callee	skip		6127386	0					
ANR	6128231	Identifier	skip		6127386	0					
ANR	6128232	ArgumentList	')'		6127386	1					
ANR	6128233	Argument	')'		6127386	0					
ANR	6128234	PrimaryExpression	')'		6127386	0					
ANR	6128235	ExpressionStatement	vpushll ( res )	2014:2:46968:46981	6127386	10	True				
ANR	6128236	CallExpression	vpushll ( res )		6127386	0					
ANR	6128237	Callee	vpushll		6127386	0					
ANR	6128238	Identifier	vpushll		6127386	0					
ANR	6128239	ArgumentList	res		6127386	1					
ANR	6128240	Argument	res		6127386	0					
ANR	6128241	Identifier	res		6127386	0					
ANR	6128242	BreakStatement	break ;	2016:1:46987:46992	6127386	81	True				
ANR	6128243	Label	case TOK_builtin_frame_address :	2017:1:46995:47025	6127386	82	True				
ANR	6128244	Identifier	TOK_builtin_frame_address		6127386	0					
ANR	6128245	CompoundStatement		190:2:3800:3819	6127386	83					
ANR	6128246	IdentifierDeclStatement	int level ;	2019:2:47032:47041	6127386	0	True				
ANR	6128247	IdentifierDecl	level		6127386	0					
ANR	6128248	IdentifierDeclType	int		6127386	0					
ANR	6128249	Identifier	level		6127386	1					
ANR	6128250	IdentifierDeclStatement	CType type = { 0 } ;	2020:2:47045:47064	6127386	1	True				
ANR	6128251	IdentifierDecl	type = { 0 }		6127386	0					
ANR	6128252	IdentifierDeclType	CType		6127386	0					
ANR	6128253	Identifier	type		6127386	1					
ANR	6128254	AssignmentExpression	type = { 0 }		6127386	2		=			
ANR	6128255	Identifier	type		6127386	0					
ANR	6128256	InitializerList	0		6127386	1					
ANR	6128257	PrimaryExpression	0		6127386	0					
ANR	6128258	ExpressionStatement	next ( )	2021:2:47068:47075	6127386	2	True				
ANR	6128259	CallExpression	next ( )		6127386	0					
ANR	6128260	Callee	next		6127386	0					
ANR	6128261	Identifier	next		6127386	0					
ANR	6128262	ArgumentList			6127386	1					
ANR	6128263	ExpressionStatement	skip ( '(' )	2022:2:47079:47089	6127386	3	True				
ANR	6128264	CallExpression	skip ( '(' )		6127386	0					
ANR	6128265	Callee	skip		6127386	0					
ANR	6128266	Identifier	skip		6127386	0					
ANR	6128267	ArgumentList	'('		6127386	1					
ANR	6128268	Argument	'('		6127386	0					
ANR	6128269	PrimaryExpression	'('		6127386	0					
ANR	6128270	IfStatement	if ( tok != TOK_CINT || tokc . i < 0 )		6127386	4					
ANR	6128271	Condition	tok != TOK_CINT || tokc . i < 0	2023:6:47097:47125	6127386	0	True				
ANR	6128272	OrExpression	tok != TOK_CINT || tokc . i < 0		6127386	0		||			
ANR	6128273	EqualityExpression	tok != TOK_CINT		6127386	0		!=			
ANR	6128274	Identifier	tok		6127386	0					
ANR	6128275	Identifier	TOK_CINT		6127386	1					
ANR	6128276	RelationalExpression	tokc . i < 0		6127386	1		<			
ANR	6128277	MemberAccess	tokc . i		6127386	0					
ANR	6128278	Identifier	tokc		6127386	0					
ANR	6128279	Identifier	i		6127386	1					
ANR	6128280	PrimaryExpression	0		6127386	1					
ANR	6128281	CompoundStatement		193:37:3883:3883	6127386	1					
ANR	6128282	ExpressionStatement	"TCC_ERR ( ""__builtin_frame_address only takes positive integers"" )"	2024:3:47133:47197	6127386	0	True				
ANR	6128283	CallExpression	"TCC_ERR ( ""__builtin_frame_address only takes positive integers"" )"		6127386	0					
ANR	6128284	Callee	TCC_ERR		6127386	0					
ANR	6128285	Identifier	TCC_ERR		6127386	0					
ANR	6128286	ArgumentList	"""__builtin_frame_address only takes positive integers"""		6127386	1					
ANR	6128287	Argument	"""__builtin_frame_address only takes positive integers"""		6127386	0					
ANR	6128288	PrimaryExpression	"""__builtin_frame_address only takes positive integers"""		6127386	0					
ANR	6128289	ExpressionStatement	level = tokc . i	2026:2:47205:47219	6127386	5	True				
ANR	6128290	AssignmentExpression	level = tokc . i		6127386	0		=			
ANR	6128291	Identifier	level		6127386	0					
ANR	6128292	MemberAccess	tokc . i		6127386	1					
ANR	6128293	Identifier	tokc		6127386	0					
ANR	6128294	Identifier	i		6127386	1					
ANR	6128295	ExpressionStatement	next ( )	2027:2:47223:47230	6127386	6	True				
ANR	6128296	CallExpression	next ( )		6127386	0					
ANR	6128297	Callee	next		6127386	0					
ANR	6128298	Identifier	next		6127386	0					
ANR	6128299	ArgumentList			6127386	1					
ANR	6128300	ExpressionStatement	skip ( ')' )	2028:2:47234:47244	6127386	7	True				
ANR	6128301	CallExpression	skip ( ')' )		6127386	0					
ANR	6128302	Callee	skip		6127386	0					
ANR	6128303	Identifier	skip		6127386	0					
ANR	6128304	ArgumentList	')'		6127386	1					
ANR	6128305	Argument	')'		6127386	0					
ANR	6128306	PrimaryExpression	')'		6127386	0					
ANR	6128307	ExpressionStatement	type . t = VT_VOID	2029:2:47248:47264	6127386	8	True				
ANR	6128308	AssignmentExpression	type . t = VT_VOID		6127386	0		=			
ANR	6128309	MemberAccess	type . t		6127386	0					
ANR	6128310	Identifier	type		6127386	0					
ANR	6128311	Identifier	t		6127386	1					
ANR	6128312	Identifier	VT_VOID		6127386	1					
ANR	6128313	ExpressionStatement	mk_pointer ( & type )	2030:2:47268:47286	6127386	9	True				
ANR	6128314	CallExpression	mk_pointer ( & type )		6127386	0					
ANR	6128315	Callee	mk_pointer		6127386	0					
ANR	6128316	Identifier	mk_pointer		6127386	0					
ANR	6128317	ArgumentList	& type		6127386	1					
ANR	6128318	Argument	& type		6127386	0					
ANR	6128319	UnaryOperationExpression	& type		6127386	0					
ANR	6128320	UnaryOperator	&		6127386	0					
ANR	6128321	Identifier	type		6127386	1					
ANR	6128322	ExpressionStatement	"vset ( & type , VT_LOCAL , 0 )"	2031:2:47290:47315	6127386	10	True				
ANR	6128323	CallExpression	"vset ( & type , VT_LOCAL , 0 )"		6127386	0					
ANR	6128324	Callee	vset		6127386	0					
ANR	6128325	Identifier	vset		6127386	0					
ANR	6128326	ArgumentList	& type		6127386	1					
ANR	6128327	Argument	& type		6127386	0					
ANR	6128328	UnaryOperationExpression	& type		6127386	0					
ANR	6128329	UnaryOperator	&		6127386	0					
ANR	6128330	Identifier	type		6127386	1					
ANR	6128331	Argument	VT_LOCAL		6127386	1					
ANR	6128332	Identifier	VT_LOCAL		6127386	0					
ANR	6128333	Argument	0		6127386	2					
ANR	6128334	PrimaryExpression	0		6127386	0					
ANR	6128335	WhileStatement	while ( level -- )		6127386	11					
ANR	6128336	Condition	level --	2032:9:47344:47350	6127386	0	True				
ANR	6128337	PostIncDecOperationExpression	level --		6127386	0					
ANR	6128338	Identifier	level		6127386	0					
ANR	6128339	IncDec	--		6127386	1					
ANR	6128340	CompoundStatement		202:18:4108:4108	6127386	1					
ANR	6128341	ExpressionStatement	mk_pointer ( & vtop -> type )	2033:3:47358:47382	6127386	0	True				
ANR	6128342	CallExpression	mk_pointer ( & vtop -> type )		6127386	0					
ANR	6128343	Callee	mk_pointer		6127386	0					
ANR	6128344	Identifier	mk_pointer		6127386	0					
ANR	6128345	ArgumentList	& vtop -> type		6127386	1					
ANR	6128346	Argument	& vtop -> type		6127386	0					
ANR	6128347	UnaryOperationExpression	& vtop -> type		6127386	0					
ANR	6128348	UnaryOperator	&		6127386	0					
ANR	6128349	PtrMemberAccess	vtop -> type		6127386	1					
ANR	6128350	Identifier	vtop		6127386	0					
ANR	6128351	Identifier	type		6127386	1					
ANR	6128352	ExpressionStatement	indir ( )	2034:3:47387:47395	6127386	1	True				
ANR	6128353	CallExpression	indir ( )		6127386	0					
ANR	6128354	Callee	indir		6127386	0					
ANR	6128355	Identifier	indir		6127386	0					
ANR	6128356	ArgumentList			6127386	1					
ANR	6128357	BreakStatement	break ;	2037:1:47428:47433	6127386	84	True				
ANR	6128358	Label	case TOK_builtin_va_start :	2038:1:47436:47461	6127386	85	True				
ANR	6128359	Identifier	TOK_builtin_va_start		6127386	0					
ANR	6128360	IfStatement	"if ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6127386	86					
ANR	6128361	Condition	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 )"	2039:6:47469:47577	6127386	0	True				
ANR	6128362	AndExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	0		&&			
ANR	6128363	UnaryOperationExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6127386	0					
ANR	6128364	UnaryOperator	!		6127386	0					
ANR	6128365	CallExpression	"strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6127386	1					
ANR	6128366	Callee	strncmp		6127386	0					
ANR	6128367	Identifier	strncmp		6127386	0					
ANR	6128368	ArgumentList	tcc_state -> arch		6127386	1					
ANR	6128369	Argument	tcc_state -> arch		6127386	0					
ANR	6128370	PtrMemberAccess	tcc_state -> arch		6127386	0					
ANR	6128371	Identifier	tcc_state		6127386	0					
ANR	6128372	Identifier	arch		6127386	1					
ANR	6128373	Argument	"""x86"""		6127386	1					
ANR	6128374	PrimaryExpression	"""x86"""		6127386	0					
ANR	6128375	Argument	3		6127386	2					
ANR	6128376	PrimaryExpression	3		6127386	0					
ANR	6128377	AndExpression	"tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1		&&			
ANR	6128378	EqualityExpression	tcc_state -> bits == 64		6127386	0		==			
ANR	6128379	PtrMemberAccess	tcc_state -> bits		6127386	0					
ANR	6128380	Identifier	tcc_state		6127386	0					
ANR	6128381	Identifier	bits		6127386	1					
ANR	6128382	PrimaryExpression	64		6127386	1					
ANR	6128383	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1					
ANR	6128384	UnaryOperator	!		6127386	0					
ANR	6128385	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1					
ANR	6128386	Callee	strncmp		6127386	0					
ANR	6128387	Identifier	strncmp		6127386	0					
ANR	6128388	ArgumentList	tcc_state -> os		6127386	1					
ANR	6128389	Argument	tcc_state -> os		6127386	0					
ANR	6128390	PtrMemberAccess	tcc_state -> os		6127386	0					
ANR	6128391	Identifier	tcc_state		6127386	0					
ANR	6128392	Identifier	os		6127386	1					
ANR	6128393	Argument	"""windows"""		6127386	1					
ANR	6128394	PrimaryExpression	"""windows"""		6127386	0					
ANR	6128395	Argument	7		6127386	2					
ANR	6128396	PrimaryExpression	7		6127386	0					
ANR	6128397	CompoundStatement		210:46:4335:4335	6127386	1					
ANR	6128398	ExpressionStatement	next ( )	2041:3:47585:47592	6127386	0	True				
ANR	6128399	CallExpression	next ( )		6127386	0					
ANR	6128400	Callee	next		6127386	0					
ANR	6128401	Identifier	next		6127386	0					
ANR	6128402	ArgumentList			6127386	1					
ANR	6128403	ExpressionStatement	skip ( '(' )	2042:3:47597:47607	6127386	1	True				
ANR	6128404	CallExpression	skip ( '(' )		6127386	0					
ANR	6128405	Callee	skip		6127386	0					
ANR	6128406	Identifier	skip		6127386	0					
ANR	6128407	ArgumentList	'('		6127386	1					
ANR	6128408	Argument	'('		6127386	0					
ANR	6128409	PrimaryExpression	'('		6127386	0					
ANR	6128410	ExpressionStatement	expr_eq ( )	2043:3:47612:47622	6127386	2	True				
ANR	6128411	CallExpression	expr_eq ( )		6127386	0					
ANR	6128412	Callee	expr_eq		6127386	0					
ANR	6128413	Identifier	expr_eq		6127386	0					
ANR	6128414	ArgumentList			6127386	1					
ANR	6128415	ExpressionStatement	"skip ( ',' )"	2044:3:47627:47637	6127386	3	True				
ANR	6128416	CallExpression	"skip ( ',' )"		6127386	0					
ANR	6128417	Callee	skip		6127386	0					
ANR	6128418	Identifier	skip		6127386	0					
ANR	6128419	ArgumentList	"','"		6127386	1					
ANR	6128420	Argument	"','"		6127386	0					
ANR	6128421	PrimaryExpression	"','"		6127386	0					
ANR	6128422	ExpressionStatement	expr_eq ( )	2045:3:47642:47652	6127386	4	True				
ANR	6128423	CallExpression	expr_eq ( )		6127386	0					
ANR	6128424	Callee	expr_eq		6127386	0					
ANR	6128425	Identifier	expr_eq		6127386	0					
ANR	6128426	ArgumentList			6127386	1					
ANR	6128427	ExpressionStatement	skip ( ')' )	2046:3:47657:47667	6127386	5	True				
ANR	6128428	CallExpression	skip ( ')' )		6127386	0					
ANR	6128429	Callee	skip		6127386	0					
ANR	6128430	Identifier	skip		6127386	0					
ANR	6128431	ArgumentList	')'		6127386	1					
ANR	6128432	Argument	')'		6127386	0					
ANR	6128433	PrimaryExpression	')'		6127386	0					
ANR	6128434	IfStatement	if ( ( vtop -> r & VT_VALMASK ) != VT_LOCAL )		6127386	6					
ANR	6128435	Condition	( vtop -> r & VT_VALMASK ) != VT_LOCAL	2047:7:47676:47709	6127386	0	True				
ANR	6128436	EqualityExpression	( vtop -> r & VT_VALMASK ) != VT_LOCAL		6127386	0		!=			
ANR	6128437	BitAndExpression	vtop -> r & VT_VALMASK		6127386	0		&			
ANR	6128438	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128439	Identifier	vtop		6127386	0					
ANR	6128440	Identifier	r		6127386	1					
ANR	6128441	Identifier	VT_VALMASK		6127386	1					
ANR	6128442	Identifier	VT_LOCAL		6127386	1					
ANR	6128443	CompoundStatement		217:43:4467:4467	6127386	1					
ANR	6128444	ExpressionStatement	"TCC_ERR ( ""__builtin_va_start expects a local variable"" )"	2048:4:47718:47773	6127386	0	True				
ANR	6128445	CallExpression	"TCC_ERR ( ""__builtin_va_start expects a local variable"" )"		6127386	0					
ANR	6128446	Callee	TCC_ERR		6127386	0					
ANR	6128447	Identifier	TCC_ERR		6127386	0					
ANR	6128448	ArgumentList	"""__builtin_va_start expects a local variable"""		6127386	1					
ANR	6128449	Argument	"""__builtin_va_start expects a local variable"""		6127386	0					
ANR	6128450	PrimaryExpression	"""__builtin_va_start expects a local variable"""		6127386	0					
ANR	6128451	ExpressionStatement	vtop -> r &= ~ ( VT_LVAL | VT_REF )	2050:3:47783:47813	6127386	7	True				
ANR	6128452	AssignmentExpression	vtop -> r &= ~ ( VT_LVAL | VT_REF )		6127386	0		&=			
ANR	6128453	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128454	Identifier	vtop		6127386	0					
ANR	6128455	Identifier	r		6127386	1					
ANR	6128456	UnaryOperationExpression	~ ( VT_LVAL | VT_REF )		6127386	1					
ANR	6128457	UnaryOperator	~		6127386	0					
ANR	6128458	InclusiveOrExpression	VT_LVAL | VT_REF		6127386	1		|			
ANR	6128459	Identifier	VT_LVAL		6127386	0					
ANR	6128460	Identifier	VT_REF		6127386	1					
ANR	6128461	ExpressionStatement	vtop -> type = char_pointer_type	2051:3:47818:47848	6127386	8	True				
ANR	6128462	AssignmentExpression	vtop -> type = char_pointer_type		6127386	0		=			
ANR	6128463	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128464	Identifier	vtop		6127386	0					
ANR	6128465	Identifier	type		6127386	1					
ANR	6128466	Identifier	char_pointer_type		6127386	1					
ANR	6128467	BreakStatement	break ;	2053:2:47856:47861	6127386	87	True				
ANR	6128468	Label	case TOK_builtin_va_arg_types :	2054:1:47864:47893	6127386	88	True				
ANR	6128469	Identifier	TOK_builtin_va_arg_types		6127386	0					
ANR	6128470	IfStatement	"if ( ! ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 ) ) )"		6127386	89					
ANR	6128471	Condition	"! ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"	2055:6:47901:48014	6127386	0	True				
ANR	6128472	UnaryOperationExpression	"! ( ! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 ) )"		6127386	0					
ANR	6128473	UnaryOperator	!		6127386	0					
ANR	6128474	AndExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 ) && tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1		&&			
ANR	6128475	UnaryOperationExpression	"! strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6127386	0					
ANR	6128476	UnaryOperator	!		6127386	0					
ANR	6128477	CallExpression	"strncmp ( tcc_state -> arch , ""x86"" , 3 )"		6127386	1					
ANR	6128478	Callee	strncmp		6127386	0					
ANR	6128479	Identifier	strncmp		6127386	0					
ANR	6128480	ArgumentList	tcc_state -> arch		6127386	1					
ANR	6128481	Argument	tcc_state -> arch		6127386	0					
ANR	6128482	PtrMemberAccess	tcc_state -> arch		6127386	0					
ANR	6128483	Identifier	tcc_state		6127386	0					
ANR	6128484	Identifier	arch		6127386	1					
ANR	6128485	Argument	"""x86"""		6127386	1					
ANR	6128486	PrimaryExpression	"""x86"""		6127386	0					
ANR	6128487	Argument	3		6127386	2					
ANR	6128488	PrimaryExpression	3		6127386	0					
ANR	6128489	AndExpression	"tcc_state -> bits == 64 && ! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1		&&			
ANR	6128490	EqualityExpression	tcc_state -> bits == 64		6127386	0		==			
ANR	6128491	PtrMemberAccess	tcc_state -> bits		6127386	0					
ANR	6128492	Identifier	tcc_state		6127386	0					
ANR	6128493	Identifier	bits		6127386	1					
ANR	6128494	PrimaryExpression	64		6127386	1					
ANR	6128495	UnaryOperationExpression	"! strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1					
ANR	6128496	UnaryOperator	!		6127386	0					
ANR	6128497	CallExpression	"strncmp ( tcc_state -> os , ""windows"" , 7 )"		6127386	1					
ANR	6128498	Callee	strncmp		6127386	0					
ANR	6128499	Identifier	strncmp		6127386	0					
ANR	6128500	ArgumentList	tcc_state -> os		6127386	1					
ANR	6128501	Argument	tcc_state -> os		6127386	0					
ANR	6128502	PtrMemberAccess	tcc_state -> os		6127386	0					
ANR	6128503	Identifier	tcc_state		6127386	0					
ANR	6128504	Identifier	os		6127386	1					
ANR	6128505	Argument	"""windows"""		6127386	1					
ANR	6128506	PrimaryExpression	"""windows"""		6127386	0					
ANR	6128507	Argument	7		6127386	2					
ANR	6128508	PrimaryExpression	7		6127386	0					
ANR	6128509	CompoundStatement		227:3:4777:4796	6127386	1					
ANR	6128510	IdentifierDeclStatement	CType type = { 0 } ;	2057:3:48022:48041	6127386	0	True				
ANR	6128511	IdentifierDecl	type = { 0 }		6127386	0					
ANR	6128512	IdentifierDeclType	CType		6127386	0					
ANR	6128513	Identifier	type		6127386	1					
ANR	6128514	AssignmentExpression	type = { 0 }		6127386	2		=			
ANR	6128515	Identifier	type		6127386	0					
ANR	6128516	InitializerList	0		6127386	1					
ANR	6128517	PrimaryExpression	0		6127386	0					
ANR	6128518	ExpressionStatement	next ( )	2058:3:48046:48053	6127386	1	True				
ANR	6128519	CallExpression	next ( )		6127386	0					
ANR	6128520	Callee	next		6127386	0					
ANR	6128521	Identifier	next		6127386	0					
ANR	6128522	ArgumentList			6127386	1					
ANR	6128523	ExpressionStatement	skip ( '(' )	2059:3:48058:48068	6127386	2	True				
ANR	6128524	CallExpression	skip ( '(' )		6127386	0					
ANR	6128525	Callee	skip		6127386	0					
ANR	6128526	Identifier	skip		6127386	0					
ANR	6128527	ArgumentList	'('		6127386	1					
ANR	6128528	Argument	'('		6127386	0					
ANR	6128529	PrimaryExpression	'('		6127386	0					
ANR	6128530	ExpressionStatement	parse_type ( & type )	2060:3:48073:48091	6127386	3	True				
ANR	6128531	CallExpression	parse_type ( & type )		6127386	0					
ANR	6128532	Callee	parse_type		6127386	0					
ANR	6128533	Identifier	parse_type		6127386	0					
ANR	6128534	ArgumentList	& type		6127386	1					
ANR	6128535	Argument	& type		6127386	0					
ANR	6128536	UnaryOperationExpression	& type		6127386	0					
ANR	6128537	UnaryOperator	&		6127386	0					
ANR	6128538	Identifier	type		6127386	1					
ANR	6128539	ExpressionStatement	skip ( ')' )	2061:3:48096:48106	6127386	4	True				
ANR	6128540	CallExpression	skip ( ')' )		6127386	0					
ANR	6128541	Callee	skip		6127386	0					
ANR	6128542	Identifier	skip		6127386	0					
ANR	6128543	ArgumentList	')'		6127386	1					
ANR	6128544	Argument	')'		6127386	0					
ANR	6128545	PrimaryExpression	')'		6127386	0					
ANR	6128546	BreakStatement	break ;	2065:2:48189:48194	6127386	90	True				
ANR	6128547	Label	case TOK___NAN__ :	2068:1:48242:48258	6127386	91	True				
ANR	6128548	Identifier	TOK___NAN__		6127386	0					
ANR	6128549	Statement	vpush64	2069:2:48262:48268	6127386	92	True				
ANR	6128550	Statement	(	2069:10:48270:48270	6127386	93	True				
ANR	6128551	Statement	VT_DOUBLE	2069:11:48271:48279	6127386	94	True				
ANR	6128552	Statement	","	2069:20:48280:48280	6127386	95	True				
ANR	6128553	Statement	0x7ff8000000000000UL	2069:22:48282:48301	6127386	96	True				
ANR	6128554	Statement	L	2069:42:48302:48302	6127386	97	True				
ANR	6128555	Statement	)	2069:43:48303:48303	6127386	98	True				
ANR	6128556	ExpressionStatement		2069:44:48304:48304	6127386	99	True				
ANR	6128557	ExpressionStatement	next ( )	2070:2:48308:48315	6127386	100	True				
ANR	6128558	CallExpression	next ( )		6127386	0					
ANR	6128559	Callee	next		6127386	0					
ANR	6128560	Identifier	next		6127386	0					
ANR	6128561	ArgumentList			6127386	1					
ANR	6128562	BreakStatement	break ;	2071:2:48319:48324	6127386	101	True				
ANR	6128563	Label	case TOK___SNAN__ :	2072:1:48327:48344	6127386	102	True				
ANR	6128564	Identifier	TOK___SNAN__		6127386	0					
ANR	6128565	Statement	vpush64	2073:2:48348:48354	6127386	103	True				
ANR	6128566	Statement	(	2073:10:48356:48356	6127386	104	True				
ANR	6128567	Statement	VT_DOUBLE	2073:11:48357:48365	6127386	105	True				
ANR	6128568	Statement	","	2073:20:48366:48366	6127386	106	True				
ANR	6128569	Statement	0x7ff0000000000001UL	2073:22:48368:48387	6127386	107	True				
ANR	6128570	Statement	L	2073:42:48388:48388	6127386	108	True				
ANR	6128571	Statement	)	2073:43:48389:48389	6127386	109	True				
ANR	6128572	ExpressionStatement		2073:44:48390:48390	6127386	110	True				
ANR	6128573	ExpressionStatement	next ( )	2074:2:48394:48401	6127386	111	True				
ANR	6128574	CallExpression	next ( )		6127386	0					
ANR	6128575	Callee	next		6127386	0					
ANR	6128576	Identifier	next		6127386	0					
ANR	6128577	ArgumentList			6127386	1					
ANR	6128578	BreakStatement	break ;	2075:2:48405:48410	6127386	112	True				
ANR	6128579	Label	case TOK___INF__ :	2076:1:48413:48429	6127386	113	True				
ANR	6128580	Identifier	TOK___INF__		6127386	0					
ANR	6128581	Statement	vpush64	2077:2:48433:48439	6127386	114	True				
ANR	6128582	Statement	(	2077:10:48441:48441	6127386	115	True				
ANR	6128583	Statement	VT_DOUBLE	2077:11:48442:48450	6127386	116	True				
ANR	6128584	Statement	","	2077:20:48451:48451	6127386	117	True				
ANR	6128585	Statement	0x7ff0000000000000UL	2077:22:48453:48472	6127386	118	True				
ANR	6128586	Statement	L	2077:42:48473:48473	6127386	119	True				
ANR	6128587	Statement	)	2077:43:48474:48474	6127386	120	True				
ANR	6128588	ExpressionStatement		2077:44:48475:48475	6127386	121	True				
ANR	6128589	ExpressionStatement	next ( )	2078:2:48479:48486	6127386	122	True				
ANR	6128590	CallExpression	next ( )		6127386	0					
ANR	6128591	Callee	next		6127386	0					
ANR	6128592	Identifier	next		6127386	0					
ANR	6128593	ArgumentList			6127386	1					
ANR	6128594	BreakStatement	break ;	2079:2:48490:48495	6127386	123	True				
ANR	6128595	Label	default :	2081:1:48499:48506	6127386	124	True				
ANR	6128596	Identifier	default		6127386	0					
ANR	6128597	Label	tok_identifier :	2082:0:48508:48522	6127386	125	True				
ANR	6128598	Identifier	tok_identifier		6127386	0					
ANR	6128599	ExpressionStatement	t = tok	2083:2:48526:48533	6127386	126	True				
ANR	6128600	AssignmentExpression	t = tok		6127386	0		=			
ANR	6128601	Identifier	t		6127386	0					
ANR	6128602	Identifier	tok		6127386	1					
ANR	6128603	ExpressionStatement	next ( )	2084:2:48537:48544	6127386	127	True				
ANR	6128604	CallExpression	next ( )		6127386	0					
ANR	6128605	Callee	next		6127386	0					
ANR	6128606	Identifier	next		6127386	0					
ANR	6128607	ArgumentList			6127386	1					
ANR	6128608	IfStatement	if ( t < TOK_UIDENT )		6127386	128					
ANR	6128609	Condition	t < TOK_UIDENT	2085:6:48552:48565	6127386	0	True				
ANR	6128610	RelationalExpression	t < TOK_UIDENT		6127386	0		<			
ANR	6128611	Identifier	t		6127386	0					
ANR	6128612	Identifier	TOK_UIDENT		6127386	1					
ANR	6128613	CompoundStatement		255:22:5323:5323	6127386	1					
ANR	6128614	ExpressionStatement	"expect ( ""identifier"" )"	2086:3:48573:48594	6127386	0	True				
ANR	6128615	CallExpression	"expect ( ""identifier"" )"		6127386	0					
ANR	6128616	Callee	expect		6127386	0					
ANR	6128617	Identifier	expect		6127386	0					
ANR	6128618	ArgumentList	"""identifier"""		6127386	1					
ANR	6128619	Argument	"""identifier"""		6127386	0					
ANR	6128620	PrimaryExpression	"""identifier"""		6127386	0					
ANR	6128621	ExpressionStatement	s = sym_find ( t )	2088:2:48602:48618	6127386	129	True				
ANR	6128622	AssignmentExpression	s = sym_find ( t )		6127386	0		=			
ANR	6128623	Identifier	s		6127386	0					
ANR	6128624	CallExpression	sym_find ( t )		6127386	1					
ANR	6128625	Callee	sym_find		6127386	0					
ANR	6128626	Identifier	sym_find		6127386	0					
ANR	6128627	ArgumentList	t		6127386	1					
ANR	6128628	Argument	t		6127386	0					
ANR	6128629	Identifier	t		6127386	0					
ANR	6128630	IfStatement	if ( ! s )		6127386	130					
ANR	6128631	Condition	! s	2089:6:48626:48627	6127386	0	True				
ANR	6128632	UnaryOperationExpression	! s		6127386	0					
ANR	6128633	UnaryOperator	!		6127386	0					
ANR	6128634	Identifier	s		6127386	1					
ANR	6128635	CompoundStatement		259:10:5385:5385	6127386	1					
ANR	6128636	IfStatement	if ( tok != '(' )		6127386	0					
ANR	6128637	Condition	tok != '('	2090:7:48639:48648	6127386	0	True				
ANR	6128638	EqualityExpression	tok != '('		6127386	0		!=			
ANR	6128639	Identifier	tok		6127386	0					
ANR	6128640	PrimaryExpression	'('		6127386	1					
ANR	6128641	CompoundStatement		260:19:5406:5406	6127386	1					
ANR	6128642	ExpressionStatement	"TCC_ERR ( ""'%s' undeclared"" , get_tok_str ( t , NULL ) )"	2091:4:48657:48707	6127386	0	True				
ANR	6128643	CallExpression	"TCC_ERR ( ""'%s' undeclared"" , get_tok_str ( t , NULL ) )"		6127386	0					
ANR	6128644	Callee	TCC_ERR		6127386	0					
ANR	6128645	Identifier	TCC_ERR		6127386	0					
ANR	6128646	ArgumentList	"""'%s' undeclared"""		6127386	1					
ANR	6128647	Argument	"""'%s' undeclared"""		6127386	0					
ANR	6128648	PrimaryExpression	"""'%s' undeclared"""		6127386	0					
ANR	6128649	Argument	"get_tok_str ( t , NULL )"		6127386	1					
ANR	6128650	CallExpression	"get_tok_str ( t , NULL )"		6127386	0					
ANR	6128651	Callee	get_tok_str		6127386	0					
ANR	6128652	Identifier	get_tok_str		6127386	0					
ANR	6128653	ArgumentList	t		6127386	1					
ANR	6128654	Argument	t		6127386	0					
ANR	6128655	Identifier	t		6127386	0					
ANR	6128656	Argument	NULL		6127386	1					
ANR	6128657	Identifier	NULL		6127386	0					
ANR	6128658	IfStatement	if ( ! s )		6127386	131					
ANR	6128659	Condition	! s	2094:6:48724:48725	6127386	0	True				
ANR	6128660	UnaryOperationExpression	! s		6127386	0					
ANR	6128661	UnaryOperator	!		6127386	0					
ANR	6128662	Identifier	s		6127386	1					
ANR	6128663	CompoundStatement		264:10:5483:5483	6127386	1					
ANR	6128664	ExpressionStatement	"TCC_ERR ( ""invalid declaration '%s'"" , get_tok_str ( t , NULL ) )"	2095:3:48733:48792	6127386	0	True				
ANR	6128665	CallExpression	"TCC_ERR ( ""invalid declaration '%s'"" , get_tok_str ( t , NULL ) )"		6127386	0					
ANR	6128666	Callee	TCC_ERR		6127386	0					
ANR	6128667	Identifier	TCC_ERR		6127386	0					
ANR	6128668	ArgumentList	"""invalid declaration '%s'"""		6127386	1					
ANR	6128669	Argument	"""invalid declaration '%s'"""		6127386	0					
ANR	6128670	PrimaryExpression	"""invalid declaration '%s'"""		6127386	0					
ANR	6128671	Argument	"get_tok_str ( t , NULL )"		6127386	1					
ANR	6128672	CallExpression	"get_tok_str ( t , NULL )"		6127386	0					
ANR	6128673	Callee	get_tok_str		6127386	0					
ANR	6128674	Identifier	get_tok_str		6127386	0					
ANR	6128675	ArgumentList	t		6127386	1					
ANR	6128676	Argument	t		6127386	0					
ANR	6128677	Identifier	t		6127386	0					
ANR	6128678	Argument	NULL		6127386	1					
ANR	6128679	Identifier	NULL		6127386	0					
ANR	6128680	ElseStatement	else		6127386	0					
ANR	6128681	CompoundStatement		266:9:5558:5558	6127386	0					
ANR	6128682	IfStatement	if ( ( s -> type . t & ( VT_STATIC | VT_INLINE | VT_BTYPE ) ) == ( VT_STATIC | VT_INLINE | VT_FUNC ) )		6127386	0					
ANR	6128683	Condition	( s -> type . t & ( VT_STATIC | VT_INLINE | VT_BTYPE ) ) == ( VT_STATIC | VT_INLINE | VT_FUNC )	2097:7:48812:48903	6127386	0	True				
ANR	6128684	EqualityExpression	( s -> type . t & ( VT_STATIC | VT_INLINE | VT_BTYPE ) ) == ( VT_STATIC | VT_INLINE | VT_FUNC )		6127386	0		==			
ANR	6128685	BitAndExpression	s -> type . t & ( VT_STATIC | VT_INLINE | VT_BTYPE )		6127386	0		&			
ANR	6128686	MemberAccess	s -> type . t		6127386	0					
ANR	6128687	PtrMemberAccess	s -> type		6127386	0					
ANR	6128688	Identifier	s		6127386	0					
ANR	6128689	Identifier	type		6127386	1					
ANR	6128690	Identifier	t		6127386	1					
ANR	6128691	InclusiveOrExpression	VT_STATIC | VT_INLINE | VT_BTYPE		6127386	1		|			
ANR	6128692	Identifier	VT_STATIC		6127386	0					
ANR	6128693	InclusiveOrExpression	VT_INLINE | VT_BTYPE		6127386	1		|			
ANR	6128694	Identifier	VT_INLINE		6127386	0					
ANR	6128695	Identifier	VT_BTYPE		6127386	1					
ANR	6128696	InclusiveOrExpression	VT_STATIC | VT_INLINE | VT_FUNC		6127386	1		|			
ANR	6128697	Identifier	VT_STATIC		6127386	0					
ANR	6128698	InclusiveOrExpression	VT_INLINE | VT_FUNC		6127386	1		|			
ANR	6128699	Identifier	VT_INLINE		6127386	0					
ANR	6128700	Identifier	VT_FUNC		6127386	1					
ANR	6128701	CompoundStatement		268:42:5661:5661	6127386	1					
ANR	6128702	ExpressionStatement	r = VT_SYM | VT_CONST	2103:4:49115:49136	6127386	0	True				
ANR	6128703	AssignmentExpression	r = VT_SYM | VT_CONST		6127386	0		=			
ANR	6128704	Identifier	r		6127386	0					
ANR	6128705	InclusiveOrExpression	VT_SYM | VT_CONST		6127386	1		|			
ANR	6128706	Identifier	VT_SYM		6127386	0					
ANR	6128707	Identifier	VT_CONST		6127386	1					
ANR	6128708	ElseStatement	else		6127386	0					
ANR	6128709	CompoundStatement		274:10:5903:5903	6127386	0					
ANR	6128710	ExpressionStatement	r = s -> r	2105:4:49154:49162	6127386	0	True				
ANR	6128711	AssignmentExpression	r = s -> r		6127386	0		=			
ANR	6128712	Identifier	r		6127386	0					
ANR	6128713	PtrMemberAccess	s -> r		6127386	1					
ANR	6128714	Identifier	s		6127386	0					
ANR	6128715	Identifier	r		6127386	1					
ANR	6128716	ExpressionStatement	"vset ( & s -> type , r , s -> c )"	2107:3:49172:49196	6127386	1	True				
ANR	6128717	CallExpression	"vset ( & s -> type , r , s -> c )"		6127386	0					
ANR	6128718	Callee	vset		6127386	0					
ANR	6128719	Identifier	vset		6127386	0					
ANR	6128720	ArgumentList	& s -> type		6127386	1					
ANR	6128721	Argument	& s -> type		6127386	0					
ANR	6128722	UnaryOperationExpression	& s -> type		6127386	0					
ANR	6128723	UnaryOperator	&		6127386	0					
ANR	6128724	PtrMemberAccess	s -> type		6127386	1					
ANR	6128725	Identifier	s		6127386	0					
ANR	6128726	Identifier	type		6127386	1					
ANR	6128727	Argument	r		6127386	1					
ANR	6128728	Identifier	r		6127386	0					
ANR	6128729	Argument	s -> c		6127386	2					
ANR	6128730	PtrMemberAccess	s -> c		6127386	0					
ANR	6128731	Identifier	s		6127386	0					
ANR	6128732	Identifier	c		6127386	1					
ANR	6128733	IfStatement	if ( vtop -> r & VT_SYM )		6127386	2					
ANR	6128734	Condition	vtop -> r & VT_SYM	2109:7:49255:49270	6127386	0	True				
ANR	6128735	BitAndExpression	vtop -> r & VT_SYM		6127386	0		&			
ANR	6128736	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128737	Identifier	vtop		6127386	0					
ANR	6128738	Identifier	r		6127386	1					
ANR	6128739	Identifier	VT_SYM		6127386	1					
ANR	6128740	CompoundStatement		279:25:6028:6028	6127386	1					
ANR	6128741	ExpressionStatement	vtop -> sym = s	2110:4:49279:49292	6127386	0	True				
ANR	6128742	AssignmentExpression	vtop -> sym = s		6127386	0		=			
ANR	6128743	PtrMemberAccess	vtop -> sym		6127386	0					
ANR	6128744	Identifier	vtop		6127386	0					
ANR	6128745	Identifier	sym		6127386	1					
ANR	6128746	Identifier	s		6127386	1					
ANR	6128747	ExpressionStatement	vtop -> c . ul = 0	2111:4:49298:49312	6127386	1	True				
ANR	6128748	AssignmentExpression	vtop -> c . ul = 0		6127386	0		=			
ANR	6128749	MemberAccess	vtop -> c . ul		6127386	0					
ANR	6128750	PtrMemberAccess	vtop -> c		6127386	0					
ANR	6128751	Identifier	vtop		6127386	0					
ANR	6128752	Identifier	c		6127386	1					
ANR	6128753	Identifier	ul		6127386	1					
ANR	6128754	PrimaryExpression	0		6127386	1					
ANR	6128755	BreakStatement	break ;	2114:2:49325:49330	6127386	132	True				
ANR	6128756	WhileStatement	while ( 1 )		6127386	10					
ANR	6128757	Condition	1	2118:8:49367:49367	6127386	0	True				
ANR	6128758	PrimaryExpression	1		6127386	0					
ANR	6128759	CompoundStatement		288:11:6125:6125	6127386	1					
ANR	6128760	IfStatement	if ( tok == '.' || tok == TOK_ARROW )		6127386	0					
ANR	6128761	Condition	tok == '.' || tok == TOK_ARROW	2119:6:49378:49407	6127386	0	True				
ANR	6128762	OrExpression	tok == '.' || tok == TOK_ARROW		6127386	0		||			
ANR	6128763	EqualityExpression	tok == '.'		6127386	0		==			
ANR	6128764	Identifier	tok		6127386	0					
ANR	6128765	PrimaryExpression	'.'		6127386	1					
ANR	6128766	EqualityExpression	tok == TOK_ARROW		6127386	1		==			
ANR	6128767	Identifier	tok		6127386	0					
ANR	6128768	Identifier	TOK_ARROW		6127386	1					
ANR	6128769	CompoundStatement		290:3:6170:6184	6127386	1					
ANR	6128770	IdentifierDeclStatement	int qualifiers ;	2120:3:49415:49429	6127386	0	True				
ANR	6128771	IdentifierDecl	qualifiers		6127386	0					
ANR	6128772	IdentifierDeclType	int		6127386	0					
ANR	6128773	Identifier	qualifiers		6127386	1					
ANR	6128774	IfStatement	if ( tok == TOK_ARROW )		6127386	1					
ANR	6128775	Condition	tok == TOK_ARROW	2122:7:49453:49468	6127386	0	True				
ANR	6128776	EqualityExpression	tok == TOK_ARROW		6127386	0		==			
ANR	6128777	Identifier	tok		6127386	0					
ANR	6128778	Identifier	TOK_ARROW		6127386	1					
ANR	6128779	CompoundStatement		292:25:6226:6226	6127386	1					
ANR	6128780	ExpressionStatement	indir ( )	2123:4:49477:49485	6127386	0	True				
ANR	6128781	CallExpression	indir ( )		6127386	0					
ANR	6128782	Callee	indir		6127386	0					
ANR	6128783	Identifier	indir		6127386	0					
ANR	6128784	ArgumentList			6127386	1					
ANR	6128785	ExpressionStatement	qualifiers = vtop -> type . t & ( VT_CONSTANT | VT_VOLATILE )	2125:3:49495:49550	6127386	2	True				
ANR	6128786	AssignmentExpression	qualifiers = vtop -> type . t & ( VT_CONSTANT | VT_VOLATILE )		6127386	0		=			
ANR	6128787	Identifier	qualifiers		6127386	0					
ANR	6128788	BitAndExpression	vtop -> type . t & ( VT_CONSTANT | VT_VOLATILE )		6127386	1		&			
ANR	6128789	MemberAccess	vtop -> type . t		6127386	0					
ANR	6128790	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128791	Identifier	vtop		6127386	0					
ANR	6128792	Identifier	type		6127386	1					
ANR	6128793	Identifier	t		6127386	1					
ANR	6128794	InclusiveOrExpression	VT_CONSTANT | VT_VOLATILE		6127386	1		|			
ANR	6128795	Identifier	VT_CONSTANT		6127386	0					
ANR	6128796	Identifier	VT_VOLATILE		6127386	1					
ANR	6128797	ExpressionStatement	test_lvalue ( )	2126:3:49555:49569	6127386	3	True				
ANR	6128798	CallExpression	test_lvalue ( )		6127386	0					
ANR	6128799	Callee	test_lvalue		6127386	0					
ANR	6128800	Identifier	test_lvalue		6127386	0					
ANR	6128801	ArgumentList			6127386	1					
ANR	6128802	ExpressionStatement	gaddrof ( )	2127:3:49574:49584	6127386	4	True				
ANR	6128803	CallExpression	gaddrof ( )		6127386	0					
ANR	6128804	Callee	gaddrof		6127386	0					
ANR	6128805	Identifier	gaddrof		6127386	0					
ANR	6128806	ArgumentList			6127386	1					
ANR	6128807	ExpressionStatement	next ( )	2128:3:49589:49596	6127386	5	True				
ANR	6128808	CallExpression	next ( )		6127386	0					
ANR	6128809	Callee	next		6127386	0					
ANR	6128810	Identifier	next		6127386	0					
ANR	6128811	ArgumentList			6127386	1					
ANR	6128812	IfStatement	if ( not_structured ( & vtop -> type ) )		6127386	6					
ANR	6128813	Condition	not_structured ( & vtop -> type )	2130:7:49642:49668	6127386	0	True				
ANR	6128814	CallExpression	not_structured ( & vtop -> type )		6127386	0					
ANR	6128815	Callee	not_structured		6127386	0					
ANR	6128816	Identifier	not_structured		6127386	0					
ANR	6128817	ArgumentList	& vtop -> type		6127386	1					
ANR	6128818	Argument	& vtop -> type		6127386	0					
ANR	6128819	UnaryOperationExpression	& vtop -> type		6127386	0					
ANR	6128820	UnaryOperator	&		6127386	0					
ANR	6128821	PtrMemberAccess	vtop -> type		6127386	1					
ANR	6128822	Identifier	vtop		6127386	0					
ANR	6128823	Identifier	type		6127386	1					
ANR	6128824	CompoundStatement		300:36:6426:6426	6127386	1					
ANR	6128825	ExpressionStatement	"expect ( ""struct or union"" )"	2131:4:49677:49703	6127386	0	True				
ANR	6128826	CallExpression	"expect ( ""struct or union"" )"		6127386	0					
ANR	6128827	Callee	expect		6127386	0					
ANR	6128828	Identifier	expect		6127386	0					
ANR	6128829	ArgumentList	"""struct or union"""		6127386	1					
ANR	6128830	Argument	"""struct or union"""		6127386	0					
ANR	6128831	PrimaryExpression	"""struct or union"""		6127386	0					
ANR	6128832	ExpressionStatement	s = vtop -> type . ref	2133:3:49713:49731	6127386	7	True				
ANR	6128833	AssignmentExpression	s = vtop -> type . ref		6127386	0		=			
ANR	6128834	Identifier	s		6127386	0					
ANR	6128835	MemberAccess	vtop -> type . ref		6127386	1					
ANR	6128836	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128837	Identifier	vtop		6127386	0					
ANR	6128838	Identifier	type		6127386	1					
ANR	6128839	Identifier	ref		6127386	1					
ANR	6128840	ExpressionStatement	tok |= SYM_FIELD	2135:3:49756:49772	6127386	8	True				
ANR	6128841	AssignmentExpression	tok |= SYM_FIELD		6127386	0		|=			
ANR	6128842	Identifier	tok		6127386	0					
ANR	6128843	Identifier	SYM_FIELD		6127386	1					
ANR	6128844	WhileStatement	while ( ( s = s -> next ) != NULL )		6127386	9					
ANR	6128845	Condition	( s = s -> next ) != NULL	2136:10:49784:49804	6127386	0	True				
ANR	6128846	EqualityExpression	( s = s -> next ) != NULL		6127386	0		!=			
ANR	6128847	AssignmentExpression	s = s -> next		6127386	0		=			
ANR	6128848	Identifier	s		6127386	0					
ANR	6128849	PtrMemberAccess	s -> next		6127386	1					
ANR	6128850	Identifier	s		6127386	0					
ANR	6128851	Identifier	next		6127386	1					
ANR	6128852	Identifier	NULL		6127386	1					
ANR	6128853	CompoundStatement		306:33:6562:6562	6127386	1					
ANR	6128854	IfStatement	if ( s -> v == tok )		6127386	0					
ANR	6128855	Condition	s -> v == tok	2137:8:49817:49827	6127386	0	True				
ANR	6128856	EqualityExpression	s -> v == tok		6127386	0		==			
ANR	6128857	PtrMemberAccess	s -> v		6127386	0					
ANR	6128858	Identifier	s		6127386	0					
ANR	6128859	Identifier	v		6127386	1					
ANR	6128860	Identifier	tok		6127386	1					
ANR	6128861	CompoundStatement		307:21:6585:6585	6127386	1					
ANR	6128862	BreakStatement	break ;	2138:5:49837:49842	6127386	0	True				
ANR	6128863	IfStatement	if ( ! s )		6127386	10					
ANR	6128864	Condition	! s	2141:7:49862:49863	6127386	0	True				
ANR	6128865	UnaryOperationExpression	! s		6127386	0					
ANR	6128866	UnaryOperator	!		6127386	0					
ANR	6128867	Identifier	s		6127386	1					
ANR	6128868	CompoundStatement		311:11:6621:6621	6127386	1					
ANR	6128869	ExpressionStatement	"TCC_ERR ( ""field not found: %s"" , get_tok_str ( tok & ~SYM_FIELD , NULL ) )"	2142:4:49872:49941	6127386	0	True				
ANR	6128870	CallExpression	"TCC_ERR ( ""field not found: %s"" , get_tok_str ( tok & ~SYM_FIELD , NULL ) )"		6127386	0					
ANR	6128871	Callee	TCC_ERR		6127386	0					
ANR	6128872	Identifier	TCC_ERR		6127386	0					
ANR	6128873	ArgumentList	"""field not found: %s"""		6127386	1					
ANR	6128874	Argument	"""field not found: %s"""		6127386	0					
ANR	6128875	PrimaryExpression	"""field not found: %s"""		6127386	0					
ANR	6128876	Argument	"get_tok_str ( tok & ~SYM_FIELD , NULL )"		6127386	1					
ANR	6128877	CallExpression	"get_tok_str ( tok & ~SYM_FIELD , NULL )"		6127386	0					
ANR	6128878	Callee	get_tok_str		6127386	0					
ANR	6128879	Identifier	get_tok_str		6127386	0					
ANR	6128880	ArgumentList	tok & ~SYM_FIELD		6127386	1					
ANR	6128881	Argument	tok & ~SYM_FIELD		6127386	0					
ANR	6128882	BitAndExpression	tok & ~SYM_FIELD		6127386	0		&			
ANR	6128883	Identifier	tok		6127386	0					
ANR	6128884	Identifier	~SYM_FIELD		6127386	1					
ANR	6128885	Argument	NULL		6127386	1					
ANR	6128886	Identifier	NULL		6127386	0					
ANR	6128887	ExpressionStatement	vtop -> type = char_pointer_type	2145:3:49988:50018	6127386	11	True				
ANR	6128888	AssignmentExpression	vtop -> type = char_pointer_type		6127386	0		=			
ANR	6128889	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128890	Identifier	vtop		6127386	0					
ANR	6128891	Identifier	type		6127386	1					
ANR	6128892	Identifier	char_pointer_type		6127386	1					
ANR	6128893	ExpressionStatement	vpushi ( s -> c )	2146:3:50053:50066	6127386	12	True				
ANR	6128894	CallExpression	vpushi ( s -> c )		6127386	0					
ANR	6128895	Callee	vpushi		6127386	0					
ANR	6128896	Identifier	vpushi		6127386	0					
ANR	6128897	ArgumentList	s -> c		6127386	1					
ANR	6128898	Argument	s -> c		6127386	0					
ANR	6128899	PtrMemberAccess	s -> c		6127386	0					
ANR	6128900	Identifier	s		6127386	0					
ANR	6128901	Identifier	c		6127386	1					
ANR	6128902	ExpressionStatement	vtop -> type = s -> type	2148:3:50125:50145	6127386	13	True				
ANR	6128903	AssignmentExpression	vtop -> type = s -> type		6127386	0		=			
ANR	6128904	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128905	Identifier	vtop		6127386	0					
ANR	6128906	Identifier	type		6127386	1					
ANR	6128907	PtrMemberAccess	s -> type		6127386	1					
ANR	6128908	Identifier	s		6127386	0					
ANR	6128909	Identifier	type		6127386	1					
ANR	6128910	ExpressionStatement	vtop -> type . t |= qualifiers	2149:3:50150:50176	6127386	14	True				
ANR	6128911	AssignmentExpression	vtop -> type . t |= qualifiers		6127386	0		|=			
ANR	6128912	MemberAccess	vtop -> type . t		6127386	0					
ANR	6128913	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128914	Identifier	vtop		6127386	0					
ANR	6128915	Identifier	type		6127386	1					
ANR	6128916	Identifier	t		6127386	1					
ANR	6128917	Identifier	qualifiers		6127386	1					
ANR	6128918	IfStatement	if ( ! ( vtop -> type . t & VT_ARRAY ) )		6127386	15					
ANR	6128919	Condition	! ( vtop -> type . t & VT_ARRAY )	2151:7:50222:50247	6127386	0	True				
ANR	6128920	UnaryOperationExpression	! ( vtop -> type . t & VT_ARRAY )		6127386	0					
ANR	6128921	UnaryOperator	!		6127386	0					
ANR	6128922	BitAndExpression	vtop -> type . t & VT_ARRAY		6127386	1		&			
ANR	6128923	MemberAccess	vtop -> type . t		6127386	0					
ANR	6128924	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128925	Identifier	vtop		6127386	0					
ANR	6128926	Identifier	type		6127386	1					
ANR	6128927	Identifier	t		6127386	1					
ANR	6128928	Identifier	VT_ARRAY		6127386	1					
ANR	6128929	CompoundStatement		321:35:7005:7005	6127386	1					
ANR	6128930	ExpressionStatement	vtop -> r |= lvalue_type ( vtop -> type . t )	2152:4:50256:50293	6127386	0	True				
ANR	6128931	AssignmentExpression	vtop -> r |= lvalue_type ( vtop -> type . t )		6127386	0		|=			
ANR	6128932	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128933	Identifier	vtop		6127386	0					
ANR	6128934	Identifier	r		6127386	1					
ANR	6128935	CallExpression	lvalue_type ( vtop -> type . t )		6127386	1					
ANR	6128936	Callee	lvalue_type		6127386	0					
ANR	6128937	Identifier	lvalue_type		6127386	0					
ANR	6128938	ArgumentList	vtop -> type . t		6127386	1					
ANR	6128939	Argument	vtop -> type . t		6127386	0					
ANR	6128940	MemberAccess	vtop -> type . t		6127386	0					
ANR	6128941	PtrMemberAccess	vtop -> type		6127386	0					
ANR	6128942	Identifier	vtop		6127386	0					
ANR	6128943	Identifier	type		6127386	1					
ANR	6128944	Identifier	t		6127386	1					
ANR	6128945	IfStatement	if ( tcc_state -> do_bounds_check )		6127386	1					
ANR	6128946	Condition	tcc_state -> do_bounds_check	2155:8:50396:50421	6127386	0	True				
ANR	6128947	PtrMemberAccess	tcc_state -> do_bounds_check		6127386	0					
ANR	6128948	Identifier	tcc_state		6127386	0					
ANR	6128949	Identifier	do_bounds_check		6127386	1					
ANR	6128950	CompoundStatement		325:36:7179:7179	6127386	1					
ANR	6128951	ExpressionStatement	vtop -> r |= VT_MUSTBOUND	2156:5:50431:50454	6127386	0	True				
ANR	6128952	AssignmentExpression	vtop -> r |= VT_MUSTBOUND		6127386	0		|=			
ANR	6128953	PtrMemberAccess	vtop -> r		6127386	0					
ANR	6128954	Identifier	vtop		6127386	0					
ANR	6128955	Identifier	r		6127386	1					
ANR	6128956	Identifier	VT_MUSTBOUND		6127386	1					
ANR	6128957	ExpressionStatement	next ( )	2160:3:50477:50484	6127386	16	True				
ANR	6128958	CallExpression	next ( )		6127386	0					
ANR	6128959	Callee	next		6127386	0					
ANR	6128960	Identifier	next		6127386	0					
ANR	6128961	ArgumentList			6127386	1					
ANR	6128962	ElseStatement	else		6127386	0					
ANR	6128963	IfStatement	if ( tok == '[' )		6127386	0					
ANR	6128964	Condition	tok == '['	2161:13:50499:50508	6127386	0	True				
ANR	6128965	EqualityExpression	tok == '['		6127386	0		==			
ANR	6128966	Identifier	tok		6127386	0					
ANR	6128967	PrimaryExpression	'['		6127386	1					
ANR	6128968	CompoundStatement		331:25:7266:7266	6127386	1					
ANR	6128969	ExpressionStatement	next ( )	2162:3:50516:50523	6127386	0	True				
ANR	6128970	CallExpression	next ( )		6127386	0					
ANR	6128971	Callee	next		6127386	0					
ANR	6128972	Identifier	next		6127386	0					
ANR	6128973	ArgumentList			6127386	1					
ANR	6128974	ExpressionStatement	gexpr ( )	2163:3:50528:50536	6127386	1	True				
ANR	6128975	CallExpression	gexpr ( )		6127386	0					
ANR	6128976	Callee	gexpr		6127386	0					
ANR	6128977	Identifier	gexpr		6127386	0					
ANR	6128978	ArgumentList			6127386	1					
ANR	6128979	ExpressionStatement	indir ( )	2164:3:50541:50549	6127386	2	True				
ANR	6128980	CallExpression	indir ( )		6127386	0					
ANR	6128981	Callee	indir		6127386	0					
ANR	6128982	Identifier	indir		6127386	0					
ANR	6128983	ArgumentList			6127386	1					
ANR	6128984	ExpressionStatement	skip ( ']' )	2165:3:50554:50564	6127386	3	True				
ANR	6128985	CallExpression	skip ( ']' )		6127386	0					
ANR	6128986	Callee	skip		6127386	0					
ANR	6128987	Identifier	skip		6127386	0					
ANR	6128988	ArgumentList	']'		6127386	1					
ANR	6128989	Argument	']'		6127386	0					
ANR	6128990	PrimaryExpression	']'		6127386	0					
ANR	6128991	ElseStatement	else		6127386	0					
ANR	6128992	CompoundStatement		342:9:7419:7419	6127386	0					
ANR	6128993	BreakStatement	break ;	2173:3:50669:50674	6127386	0	True				
ANR	6128994	ReturnType	ST_FUNC void		6127386	1					
ANR	6128995	Identifier	unary		6127386	2					
ANR	6128996	ParameterList			6127386	3					
ANR	6128997	CFGEntryNode	ENTRY		6127386		True				
ANR	6128998	CFGExitNode	EXIT		6127386		True				
ANR	6128999	Symbol	funcname		6127386						
ANR	6129000	Symbol	VT_INT16		6127386						
ANR	6129001	Symbol	VT_LDOUBLE		6127386						
ANR	6129002	Symbol	vtop -> c . ul		6127386						
ANR	6129003	Symbol	type		6127386						
ANR	6129004	Symbol	strncmp		6127386						
ANR	6129005	Symbol	type_size		6127386						
ANR	6129006	Symbol	len		6127386						
ANR	6129007	Symbol	vtop -> sym		6127386						
ANR	6129008	Symbol	* type . ref		6127386						
ANR	6129009	Symbol	type . ref		6127386						
ANR	6129010	Symbol	VT_LVAL		6127386						
ANR	6129011	Symbol	parse_btype		6127386						
ANR	6129012	Symbol	TOK_CINT		6127386						
ANR	6129013	Symbol	TOK_ARROW		6127386						
ANR	6129014	Symbol	ad		6127386						
ANR	6129015	Symbol	gnu_ext		6127386						
ANR	6129016	Symbol	tokc		6127386						
ANR	6129017	Symbol	& type		6127386						
ANR	6129018	Symbol	VT_CONSTANT		6127386						
ANR	6129019	Symbol	VT_INT8		6127386						
ANR	6129020	Symbol	vtop		6127386						
ANR	6129021	Symbol	qualifiers		6127386						
ANR	6129022	Symbol	VT_LOCAL		6127386						
ANR	6129023	Symbol	VT_SYM		6127386						
ANR	6129024	Symbol	VT_FLOAT		6127386						
ANR	6129025	Symbol	size		6127386						
ANR	6129026	Symbol	vtop -> type . ref		6127386						
ANR	6129027	Symbol	s -> v		6127386						
ANR	6129028	Symbol	s -> r		6127386						
ANR	6129029	Symbol	type2 . t		6127386						
ANR	6129030	Symbol	vtop -> c		6127386						
ANR	6129031	Symbol	s -> next		6127386						
ANR	6129032	Symbol	& ad		6127386						
ANR	6129033	Symbol	s -> type . t		6127386						
ANR	6129034	Symbol	tok		6127386						
ANR	6129035	Symbol	VT_UNSIGNED		6127386						
ANR	6129036	Symbol	is_compatible_types		6127386						
ANR	6129037	Symbol	s -> c		6127386						
ANR	6129038	Symbol	sym_find		6127386						
ANR	6129039	Symbol	vtop -> type . t		6127386						
ANR	6129040	Symbol	TOK_UIDENT		6127386						
ANR	6129041	Symbol	vtop -> c . i		6127386						
ANR	6129042	Symbol	& s -> type		6127386						
ANR	6129043	Symbol	VT_VOID		6127386						
ANR	6129044	Symbol	VT_INLINE		6127386						
ANR	6129045	Symbol	n		6127386						
ANR	6129046	Symbol	r		6127386						
ANR	6129047	Symbol	in_sizeof		6127386						
ANR	6129048	Symbol	s		6127386						
ANR	6129049	Symbol	~SYM_FIELD		6127386						
ANR	6129050	Symbol	t		6127386						
ANR	6129051	Symbol	tcc_state -> bits		6127386						
ANR	6129052	Symbol	VT_INT64		6127386						
ANR	6129053	Symbol	vtop -> r		6127386						
ANR	6129054	Symbol	type . ref -> c		6127386						
ANR	6129055	Symbol	VT_ARRAY		6127386						
ANR	6129056	Symbol	get_tok_str		6127386						
ANR	6129057	Symbol	tcc_state -> arch		6127386						
ANR	6129058	Symbol	* tcc_state		6127386						
ANR	6129059	Symbol	type . t		6127386						
ANR	6129060	Symbol	align		6127386						
ANR	6129061	Symbol	strlen		6127386						
ANR	6129062	Symbol	VT_VOLATILE		6127386						
ANR	6129063	Symbol	SYM_FIELD		6127386						
ANR	6129064	Symbol	tokc . i		6127386						
ANR	6129065	Symbol	tcc_state		6127386						
ANR	6129066	Symbol	VT_CONST		6127386						
ANR	6129067	Symbol	res		6127386						
ANR	6129068	Symbol	tcc_state -> do_bounds_check		6127386						
ANR	6129069	Symbol	VT_MUSTBOUND		6127386						
ANR	6129070	Symbol	NULL		6127386						
ANR	6129071	Symbol	type2		6127386						
ANR	6129072	Symbol	level		6127386						
ANR	6129073	Symbol	VT_DOUBLE		6127386						
ANR	6129074	Symbol	VT_VALMASK		6127386						
ANR	6129075	Symbol	VT_CMP		6127386						
ANR	6129076	Symbol	type1		6127386						
ANR	6129077	Symbol	VT_BTYPE		6127386						
ANR	6129078	Symbol	VT_FUNC		6127386						
ANR	6129079	Symbol	tcc_state -> os		6127386						
ANR	6129080	Symbol	s -> type		6127386						
ANR	6129081	Symbol	VT_STATIC		6127386						
ANR	6129082	Symbol	not_structured		6127386						
ANR	6129083	Symbol	tcc_state -> warn_write_strings		6127386						
ANR	6129084	Symbol	global_expr		6127386						
ANR	6129085	Symbol	CType		6127386						
ANR	6129086	Symbol	VT_VLA		6127386						
ANR	6129087	Symbol	saved_nocode_wanted		6127386						
ANR	6129088	Symbol	* type		6127386						
ANR	6129089	Symbol	& align		6127386						
ANR	6129090	Symbol	nocode_wanted		6127386						
ANR	6129091	Symbol	VT_INT32		6127386						
ANR	6129092	Symbol	type1 . t		6127386						
ANR	6129093	Symbol	& type2		6127386						
ANR	6129094	Symbol	TYPE_ABSTRACT		6127386						
ANR	6129095	Symbol	& type1		6127386						
ANR	6129096	Symbol	vtop -> type		6127386						
ANR	6129097	Symbol	sizeof_caller		6127386						
ANR	6129098	Symbol	* vtop		6127386						
ANR	6129099	Symbol	lvalue_type		6127386						
ANR	6129100	Symbol	& n		6127386						
ANR	6129101	Symbol	TOK_SIZEOF		6127386						
ANR	6129102	Symbol	char_pointer_type		6127386						
ANR	6129103	Symbol	* s		6127386						
ANR	6129104	Symbol	& vtop -> type		6127386						
ANR	6129105	Symbol	VT_REF		6127386						
ANR	6129106	Function	expr_prod	2178:0:50686:50804							
ANR	6129107	FunctionDef	expr_prod ()		6129106	0					
ANR	6129108	CompoundStatement		2178:29:50715:50804	6129106	0					
ANR	6129109	ExpressionStatement	unary ( )	2179:1:50718:50726	6129106	0	True				
ANR	6129110	CallExpression	unary ( )		6129106	0					
ANR	6129111	Callee	unary		6129106	0					
ANR	6129112	Identifier	unary		6129106	0					
ANR	6129113	ArgumentList			6129106	1					
ANR	6129114	WhileStatement	while ( tok == '*' || tok == '/' || tok == '%' )		6129106	1					
ANR	6129115	Condition	tok == '*' || tok == '/' || tok == '%'	2180:8:50736:50773	6129106	0	True				
ANR	6129116	OrExpression	tok == '*' || tok == '/' || tok == '%'		6129106	0		||			
ANR	6129117	EqualityExpression	tok == '*'		6129106	0		==			
ANR	6129118	Identifier	tok		6129106	0					
ANR	6129119	PrimaryExpression	'*'		6129106	1					
ANR	6129120	OrExpression	tok == '/' || tok == '%'		6129106	1		||			
ANR	6129121	EqualityExpression	tok == '/'		6129106	0		==			
ANR	6129122	Identifier	tok		6129106	0					
ANR	6129123	PrimaryExpression	'/'		6129106	1					
ANR	6129124	EqualityExpression	tok == '%'		6129106	1		==			
ANR	6129125	Identifier	tok		6129106	0					
ANR	6129126	PrimaryExpression	'%'		6129106	1					
ANR	6129127	CompoundStatement		3:48:60:60	6129106	1					
ANR	6129128	ExpressionStatement	next ( )	2181:2:50780:50787	6129106	0	True				
ANR	6129129	CallExpression	next ( )		6129106	0					
ANR	6129130	Callee	next		6129106	0					
ANR	6129131	Identifier	next		6129106	0					
ANR	6129132	ArgumentList			6129106	1					
ANR	6129133	ExpressionStatement	unary ( )	2182:2:50791:50799	6129106	1	True				
ANR	6129134	CallExpression	unary ( )		6129106	0					
ANR	6129135	Callee	unary		6129106	0					
ANR	6129136	Identifier	unary		6129106	0					
ANR	6129137	ArgumentList			6129106	1					
ANR	6129138	ReturnType	ST_FUNC void		6129106	1					
ANR	6129139	Identifier	expr_prod		6129106	2					
ANR	6129140	ParameterList			6129106	3					
ANR	6129141	CFGEntryNode	ENTRY		6129106		True				
ANR	6129142	CFGExitNode	EXIT		6129106		True				
ANR	6129143	Symbol	tok		6129106						
ANR	6129144	Function	expr_sum	2186:0:50807:50918							
ANR	6129145	FunctionDef	expr_sum ()		6129144	0					
ANR	6129146	CompoundStatement		2186:28:50835:50918	6129144	0					
ANR	6129147	ExpressionStatement	expr_prod ( )	2187:1:50838:50850	6129144	0	True				
ANR	6129148	CallExpression	expr_prod ( )		6129144	0					
ANR	6129149	Callee	expr_prod		6129144	0					
ANR	6129150	Identifier	expr_prod		6129144	0					
ANR	6129151	ArgumentList			6129144	1					
ANR	6129152	WhileStatement	while ( tok == '+' || tok == '-' )		6129144	1					
ANR	6129153	Condition	tok == '+' || tok == '-'	2188:8:50860:50883	6129144	0	True				
ANR	6129154	OrExpression	tok == '+' || tok == '-'		6129144	0		||			
ANR	6129155	EqualityExpression	tok == '+'		6129144	0		==			
ANR	6129156	Identifier	tok		6129144	0					
ANR	6129157	PrimaryExpression	'+'		6129144	1					
ANR	6129158	EqualityExpression	tok == '-'		6129144	1		==			
ANR	6129159	Identifier	tok		6129144	0					
ANR	6129160	PrimaryExpression	'-'		6129144	1					
ANR	6129161	CompoundStatement		3:34:50:50	6129144	1					
ANR	6129162	ExpressionStatement	next ( )	2189:2:50890:50897	6129144	0	True				
ANR	6129163	CallExpression	next ( )		6129144	0					
ANR	6129164	Callee	next		6129144	0					
ANR	6129165	Identifier	next		6129144	0					
ANR	6129166	ArgumentList			6129144	1					
ANR	6129167	ExpressionStatement	expr_prod ( )	2190:2:50901:50913	6129144	1	True				
ANR	6129168	CallExpression	expr_prod ( )		6129144	0					
ANR	6129169	Callee	expr_prod		6129144	0					
ANR	6129170	Identifier	expr_prod		6129144	0					
ANR	6129171	ArgumentList			6129144	1					
ANR	6129172	ReturnType	ST_FUNC void		6129144	1					
ANR	6129173	Identifier	expr_sum		6129144	2					
ANR	6129174	ParameterList			6129144	3					
ANR	6129175	CFGEntryNode	ENTRY		6129144		True				
ANR	6129176	CFGExitNode	EXIT		6129144		True				
ANR	6129177	Symbol	tok		6129144						
ANR	6129178	Function	expr_shift	2194:0:50921:51039							
ANR	6129179	FunctionDef	expr_shift ()		6129178	0					
ANR	6129180	CompoundStatement		2194:29:50950:51039	6129178	0					
ANR	6129181	ExpressionStatement	expr_sum ( )	2195:1:50953:50964	6129178	0	True				
ANR	6129182	CallExpression	expr_sum ( )		6129178	0					
ANR	6129183	Callee	expr_sum		6129178	0					
ANR	6129184	Identifier	expr_sum		6129178	0					
ANR	6129185	ArgumentList			6129178	1					
ANR	6129186	WhileStatement	while ( tok == TOK_SHL || tok == TOK_SAR )		6129178	1					
ANR	6129187	Condition	tok == TOK_SHL || tok == TOK_SAR	2196:8:50974:51005	6129178	0	True				
ANR	6129188	OrExpression	tok == TOK_SHL || tok == TOK_SAR		6129178	0		||			
ANR	6129189	EqualityExpression	tok == TOK_SHL		6129178	0		==			
ANR	6129190	Identifier	tok		6129178	0					
ANR	6129191	Identifier	TOK_SHL		6129178	1					
ANR	6129192	EqualityExpression	tok == TOK_SAR		6129178	1		==			
ANR	6129193	Identifier	tok		6129178	0					
ANR	6129194	Identifier	TOK_SAR		6129178	1					
ANR	6129195	CompoundStatement		3:42:57:57	6129178	1					
ANR	6129196	ExpressionStatement	next ( )	2197:2:51012:51019	6129178	0	True				
ANR	6129197	CallExpression	next ( )		6129178	0					
ANR	6129198	Callee	next		6129178	0					
ANR	6129199	Identifier	next		6129178	0					
ANR	6129200	ArgumentList			6129178	1					
ANR	6129201	ExpressionStatement	expr_sum ( )	2198:2:51023:51034	6129178	1	True				
ANR	6129202	CallExpression	expr_sum ( )		6129178	0					
ANR	6129203	Callee	expr_sum		6129178	0					
ANR	6129204	Identifier	expr_sum		6129178	0					
ANR	6129205	ArgumentList			6129178	1					
ANR	6129206	ReturnType	static void		6129178	1					
ANR	6129207	Identifier	expr_shift		6129178	2					
ANR	6129208	ParameterList			6129178	3					
ANR	6129209	CFGEntryNode	ENTRY		6129178		True				
ANR	6129210	CFGExitNode	EXIT		6129178		True				
ANR	6129211	Symbol	tok		6129178						
ANR	6129212	Symbol	TOK_SAR		6129178						
ANR	6129213	Symbol	TOK_SHL		6129178						
ANR	6129214	Function	expr_cmp	2202:0:51042:51207							
ANR	6129215	FunctionDef	expr_cmp ()		6129214	0					
ANR	6129216	CompoundStatement		2202:27:51069:51207	6129214	0					
ANR	6129217	ExpressionStatement	expr_shift ( )	2203:1:51072:51085	6129214	0	True				
ANR	6129218	CallExpression	expr_shift ( )		6129214	0					
ANR	6129219	Callee	expr_shift		6129214	0					
ANR	6129220	Identifier	expr_shift		6129214	0					
ANR	6129221	ArgumentList			6129214	1					
ANR	6129222	WhileStatement	while ( ( tok >= TOK_ULE && tok <= TOK_GT ) || tok == TOK_ULT || tok == TOK_UGE )		6129214	1					
ANR	6129223	Condition	( tok >= TOK_ULE && tok <= TOK_GT ) || tok == TOK_ULT || tok == TOK_UGE	2204:8:51095:51171	6129214	0	True				
ANR	6129224	OrExpression	( tok >= TOK_ULE && tok <= TOK_GT ) || tok == TOK_ULT || tok == TOK_UGE		6129214	0		||			
ANR	6129225	AndExpression	tok >= TOK_ULE && tok <= TOK_GT		6129214	0		&&			
ANR	6129226	RelationalExpression	tok >= TOK_ULE		6129214	0		>=			
ANR	6129227	Identifier	tok		6129214	0					
ANR	6129228	Identifier	TOK_ULE		6129214	1					
ANR	6129229	RelationalExpression	tok <= TOK_GT		6129214	1		<=			
ANR	6129230	Identifier	tok		6129214	0					
ANR	6129231	Identifier	TOK_GT		6129214	1					
ANR	6129232	OrExpression	tok == TOK_ULT || tok == TOK_UGE		6129214	1		||			
ANR	6129233	EqualityExpression	tok == TOK_ULT		6129214	0		==			
ANR	6129234	Identifier	tok		6129214	0					
ANR	6129235	Identifier	TOK_ULT		6129214	1					
ANR	6129236	EqualityExpression	tok == TOK_UGE		6129214	1		==			
ANR	6129237	Identifier	tok		6129214	0					
ANR	6129238	Identifier	TOK_UGE		6129214	1					
ANR	6129239	CompoundStatement		4:42:104:104	6129214	1					
ANR	6129240	ExpressionStatement	next ( )	2206:2:51178:51185	6129214	0	True				
ANR	6129241	CallExpression	next ( )		6129214	0					
ANR	6129242	Callee	next		6129214	0					
ANR	6129243	Identifier	next		6129214	0					
ANR	6129244	ArgumentList			6129214	1					
ANR	6129245	ExpressionStatement	expr_shift ( )	2207:2:51189:51202	6129214	1	True				
ANR	6129246	CallExpression	expr_shift ( )		6129214	0					
ANR	6129247	Callee	expr_shift		6129214	0					
ANR	6129248	Identifier	expr_shift		6129214	0					
ANR	6129249	ArgumentList			6129214	1					
ANR	6129250	ReturnType	static void		6129214	1					
ANR	6129251	Identifier	expr_cmp		6129214	2					
ANR	6129252	ParameterList			6129214	3					
ANR	6129253	CFGEntryNode	ENTRY		6129214		True				
ANR	6129254	CFGExitNode	EXIT		6129214		True				
ANR	6129255	Symbol	tok		6129214						
ANR	6129256	Symbol	TOK_UGE		6129214						
ANR	6129257	Symbol	TOK_ULE		6129214						
ANR	6129258	Symbol	TOK_ULT		6129214						
ANR	6129259	Symbol	TOK_GT		6129214						
ANR	6129260	Function	expr_cmpeq	2211:0:51210:51326							
ANR	6129261	FunctionDef	expr_cmpeq ()		6129260	0					
ANR	6129262	CompoundStatement		2211:29:51239:51326	6129260	0					
ANR	6129263	ExpressionStatement	expr_cmp ( )	2212:1:51242:51253	6129260	0	True				
ANR	6129264	CallExpression	expr_cmp ( )		6129260	0					
ANR	6129265	Callee	expr_cmp		6129260	0					
ANR	6129266	Identifier	expr_cmp		6129260	0					
ANR	6129267	ArgumentList			6129260	1					
ANR	6129268	WhileStatement	while ( tok == TOK_EQ || tok == TOK_NE )		6129260	1					
ANR	6129269	Condition	tok == TOK_EQ || tok == TOK_NE	2213:8:51263:51292	6129260	0	True				
ANR	6129270	OrExpression	tok == TOK_EQ || tok == TOK_NE		6129260	0		||			
ANR	6129271	EqualityExpression	tok == TOK_EQ		6129260	0		==			
ANR	6129272	Identifier	tok		6129260	0					
ANR	6129273	Identifier	TOK_EQ		6129260	1					
ANR	6129274	EqualityExpression	tok == TOK_NE		6129260	1		==			
ANR	6129275	Identifier	tok		6129260	0					
ANR	6129276	Identifier	TOK_NE		6129260	1					
ANR	6129277	CompoundStatement		3:40:55:55	6129260	1					
ANR	6129278	ExpressionStatement	next ( )	2214:2:51299:51306	6129260	0	True				
ANR	6129279	CallExpression	next ( )		6129260	0					
ANR	6129280	Callee	next		6129260	0					
ANR	6129281	Identifier	next		6129260	0					
ANR	6129282	ArgumentList			6129260	1					
ANR	6129283	ExpressionStatement	expr_cmp ( )	2215:2:51310:51321	6129260	1	True				
ANR	6129284	CallExpression	expr_cmp ( )		6129260	0					
ANR	6129285	Callee	expr_cmp		6129260	0					
ANR	6129286	Identifier	expr_cmp		6129260	0					
ANR	6129287	ArgumentList			6129260	1					
ANR	6129288	ReturnType	static void		6129260	1					
ANR	6129289	Identifier	expr_cmpeq		6129260	2					
ANR	6129290	ParameterList			6129260	3					
ANR	6129291	CFGEntryNode	ENTRY		6129260		True				
ANR	6129292	CFGExitNode	EXIT		6129260		True				
ANR	6129293	Symbol	tok		6129260						
ANR	6129294	Symbol	TOK_NE		6129260						
ANR	6129295	Symbol	TOK_EQ		6129260						
ANR	6129296	Function	expr_and	2219:0:51329:51427							
ANR	6129297	FunctionDef	expr_and ()		6129296	0					
ANR	6129298	CompoundStatement		2219:27:51356:51427	6129296	0					
ANR	6129299	ExpressionStatement	expr_cmpeq ( )	2220:1:51359:51372	6129296	0	True				
ANR	6129300	CallExpression	expr_cmpeq ( )		6129296	0					
ANR	6129301	Callee	expr_cmpeq		6129296	0					
ANR	6129302	Identifier	expr_cmpeq		6129296	0					
ANR	6129303	ArgumentList			6129296	1					
ANR	6129304	WhileStatement	while ( tok == '&' )		6129296	1					
ANR	6129305	Condition	tok == '&'	2221:8:51382:51391	6129296	0	True				
ANR	6129306	EqualityExpression	tok == '&'		6129296	0		==			
ANR	6129307	Identifier	tok		6129296	0					
ANR	6129308	PrimaryExpression	'&'		6129296	1					
ANR	6129309	CompoundStatement		3:20:37:37	6129296	1					
ANR	6129310	ExpressionStatement	next ( )	2222:2:51398:51405	6129296	0	True				
ANR	6129311	CallExpression	next ( )		6129296	0					
ANR	6129312	Callee	next		6129296	0					
ANR	6129313	Identifier	next		6129296	0					
ANR	6129314	ArgumentList			6129296	1					
ANR	6129315	ExpressionStatement	expr_cmpeq ( )	2223:2:51409:51422	6129296	1	True				
ANR	6129316	CallExpression	expr_cmpeq ( )		6129296	0					
ANR	6129317	Callee	expr_cmpeq		6129296	0					
ANR	6129318	Identifier	expr_cmpeq		6129296	0					
ANR	6129319	ArgumentList			6129296	1					
ANR	6129320	ReturnType	static void		6129296	1					
ANR	6129321	Identifier	expr_and		6129296	2					
ANR	6129322	ParameterList			6129296	3					
ANR	6129323	CFGEntryNode	ENTRY		6129296		True				
ANR	6129324	CFGExitNode	EXIT		6129296		True				
ANR	6129325	Symbol	tok		6129296						
ANR	6129326	Function	expr_xor	2227:0:51430:51524							
ANR	6129327	FunctionDef	expr_xor ()		6129326	0					
ANR	6129328	CompoundStatement		2227:27:51457:51524	6129326	0					
ANR	6129329	ExpressionStatement	expr_and ( )	2228:1:51460:51471	6129326	0	True				
ANR	6129330	CallExpression	expr_and ( )		6129326	0					
ANR	6129331	Callee	expr_and		6129326	0					
ANR	6129332	Identifier	expr_and		6129326	0					
ANR	6129333	ArgumentList			6129326	1					
ANR	6129334	WhileStatement	while ( tok == '^' )		6129326	1					
ANR	6129335	Condition	tok == '^'	2229:8:51481:51490	6129326	0	True				
ANR	6129336	EqualityExpression	tok == '^'		6129326	0		==			
ANR	6129337	Identifier	tok		6129326	0					
ANR	6129338	PrimaryExpression	'^'		6129326	1					
ANR	6129339	CompoundStatement		3:20:35:35	6129326	1					
ANR	6129340	ExpressionStatement	next ( )	2230:2:51497:51504	6129326	0	True				
ANR	6129341	CallExpression	next ( )		6129326	0					
ANR	6129342	Callee	next		6129326	0					
ANR	6129343	Identifier	next		6129326	0					
ANR	6129344	ArgumentList			6129326	1					
ANR	6129345	ExpressionStatement	expr_and ( )	2231:2:51508:51519	6129326	1	True				
ANR	6129346	CallExpression	expr_and ( )		6129326	0					
ANR	6129347	Callee	expr_and		6129326	0					
ANR	6129348	Identifier	expr_and		6129326	0					
ANR	6129349	ArgumentList			6129326	1					
ANR	6129350	ReturnType	static void		6129326	1					
ANR	6129351	Identifier	expr_xor		6129326	2					
ANR	6129352	ParameterList			6129326	3					
ANR	6129353	CFGEntryNode	ENTRY		6129326		True				
ANR	6129354	CFGExitNode	EXIT		6129326		True				
ANR	6129355	Symbol	tok		6129326						
ANR	6129356	Function	expr_or	2235:0:51527:51620							
ANR	6129357	FunctionDef	expr_or ()		6129356	0					
ANR	6129358	CompoundStatement		2235:26:51553:51620	6129356	0					
ANR	6129359	ExpressionStatement	expr_xor ( )	2236:1:51556:51567	6129356	0	True				
ANR	6129360	CallExpression	expr_xor ( )		6129356	0					
ANR	6129361	Callee	expr_xor		6129356	0					
ANR	6129362	Identifier	expr_xor		6129356	0					
ANR	6129363	ArgumentList			6129356	1					
ANR	6129364	WhileStatement	while ( tok == '|' )		6129356	1					
ANR	6129365	Condition	tok == '|'	2237:8:51577:51586	6129356	0	True				
ANR	6129366	EqualityExpression	tok == '|'		6129356	0		==			
ANR	6129367	Identifier	tok		6129356	0					
ANR	6129368	PrimaryExpression	'|'		6129356	1					
ANR	6129369	CompoundStatement		3:20:35:35	6129356	1					
ANR	6129370	ExpressionStatement	next ( )	2238:2:51593:51600	6129356	0	True				
ANR	6129371	CallExpression	next ( )		6129356	0					
ANR	6129372	Callee	next		6129356	0					
ANR	6129373	Identifier	next		6129356	0					
ANR	6129374	ArgumentList			6129356	1					
ANR	6129375	ExpressionStatement	expr_xor ( )	2239:2:51604:51615	6129356	1	True				
ANR	6129376	CallExpression	expr_xor ( )		6129356	0					
ANR	6129377	Callee	expr_xor		6129356	0					
ANR	6129378	Identifier	expr_xor		6129356	0					
ANR	6129379	ArgumentList			6129356	1					
ANR	6129380	ReturnType	static void		6129356	1					
ANR	6129381	Identifier	expr_or		6129356	2					
ANR	6129382	ParameterList			6129356	3					
ANR	6129383	CFGEntryNode	ENTRY		6129356		True				
ANR	6129384	CFGExitNode	EXIT		6129356		True				
ANR	6129385	Symbol	tok		6129356						
ANR	6129386	Function	expr_land_const	2244:0:51648:51752							
ANR	6129387	FunctionDef	expr_land_const ()		6129386	0					
ANR	6129388	CompoundStatement		2244:34:51682:51752	6129386	0					
ANR	6129389	ExpressionStatement	expr_or ( )	2245:1:51685:51695	6129386	0	True				
ANR	6129390	CallExpression	expr_or ( )		6129386	0					
ANR	6129391	Callee	expr_or		6129386	0					
ANR	6129392	Identifier	expr_or		6129386	0					
ANR	6129393	ArgumentList			6129386	1					
ANR	6129394	WhileStatement	while ( tok == TOK_LAND )		6129386	1					
ANR	6129395	Condition	tok == TOK_LAND	2246:8:51705:51719	6129386	0	True				
ANR	6129396	EqualityExpression	tok == TOK_LAND		6129386	0		==			
ANR	6129397	Identifier	tok		6129386	0					
ANR	6129398	Identifier	TOK_LAND		6129386	1					
ANR	6129399	CompoundStatement		3:25:39:39	6129386	1					
ANR	6129400	ExpressionStatement	next ( )	2247:2:51726:51733	6129386	0	True				
ANR	6129401	CallExpression	next ( )		6129386	0					
ANR	6129402	Callee	next		6129386	0					
ANR	6129403	Identifier	next		6129386	0					
ANR	6129404	ArgumentList			6129386	1					
ANR	6129405	ExpressionStatement	expr_or ( )	2248:2:51737:51747	6129386	1	True				
ANR	6129406	CallExpression	expr_or ( )		6129386	0					
ANR	6129407	Callee	expr_or		6129386	0					
ANR	6129408	Identifier	expr_or		6129386	0					
ANR	6129409	ArgumentList			6129386	1					
ANR	6129410	ReturnType	static void		6129386	1					
ANR	6129411	Identifier	expr_land_const		6129386	2					
ANR	6129412	ParameterList			6129386	3					
ANR	6129413	CFGEntryNode	ENTRY		6129386		True				
ANR	6129414	CFGExitNode	EXIT		6129386		True				
ANR	6129415	Symbol	tok		6129386						
ANR	6129416	Symbol	TOK_LAND		6129386						
ANR	6129417	Function	expr_lor_const	2253:0:51780:51898							
ANR	6129418	FunctionDef	expr_lor_const ()		6129417	0					
ANR	6129419	CompoundStatement		2253:33:51813:51898	6129417	0					
ANR	6129420	ExpressionStatement	expr_land_const ( )	2254:1:51816:51834	6129417	0	True				
ANR	6129421	CallExpression	expr_land_const ( )		6129417	0					
ANR	6129422	Callee	expr_land_const		6129417	0					
ANR	6129423	Identifier	expr_land_const		6129417	0					
ANR	6129424	ArgumentList			6129417	1					
ANR	6129425	WhileStatement	while ( tok == TOK_LOR )		6129417	1					
ANR	6129426	Condition	tok == TOK_LOR	2255:8:51844:51857	6129417	0	True				
ANR	6129427	EqualityExpression	tok == TOK_LOR		6129417	0		==			
ANR	6129428	Identifier	tok		6129417	0					
ANR	6129429	Identifier	TOK_LOR		6129417	1					
ANR	6129430	CompoundStatement		3:24:46:46	6129417	1					
ANR	6129431	ExpressionStatement	next ( )	2256:2:51864:51871	6129417	0	True				
ANR	6129432	CallExpression	next ( )		6129417	0					
ANR	6129433	Callee	next		6129417	0					
ANR	6129434	Identifier	next		6129417	0					
ANR	6129435	ArgumentList			6129417	1					
ANR	6129436	ExpressionStatement	expr_land_const ( )	2257:2:51875:51893	6129417	1	True				
ANR	6129437	CallExpression	expr_land_const ( )		6129417	0					
ANR	6129438	Callee	expr_land_const		6129417	0					
ANR	6129439	Identifier	expr_land_const		6129417	0					
ANR	6129440	ArgumentList			6129417	1					
ANR	6129441	ReturnType	static void		6129417	1					
ANR	6129442	Identifier	expr_lor_const		6129417	2					
ANR	6129443	ParameterList			6129417	3					
ANR	6129444	CFGEntryNode	ENTRY		6129417		True				
ANR	6129445	CFGExitNode	EXIT		6129417		True				
ANR	6129446	Symbol	tok		6129417						
ANR	6129447	Symbol	TOK_LOR		6129417						
ANR	6129448	Function	expr_land	2262:0:51933:52105							
ANR	6129449	FunctionDef	expr_land ()		6129448	0					
ANR	6129450	CompoundStatement		2262:28:51961:52105	6129448	0					
ANR	6129451	ExpressionStatement	expr_or ( )	2263:1:51964:51974	6129448	0	True				
ANR	6129452	CallExpression	expr_or ( )		6129448	0					
ANR	6129453	Callee	expr_or		6129448	0					
ANR	6129454	Identifier	expr_or		6129448	0					
ANR	6129455	ArgumentList			6129448	1					
ANR	6129456	IfStatement	if ( tok == TOK_LAND )		6129448	1					
ANR	6129457	Condition	tok == TOK_LAND	2264:5:51981:51995	6129448	0	True				
ANR	6129458	EqualityExpression	tok == TOK_LAND		6129448	0		==			
ANR	6129459	Identifier	tok		6129448	0					
ANR	6129460	Identifier	TOK_LAND		6129448	1					
ANR	6129461	CompoundStatement		3:22:36:36	6129448	1					
ANR	6129462	WhileStatement	while ( tcc_nerr ( ) == 0 )		6129448	0					
ANR	6129463	Condition	tcc_nerr ( ) == 0	2265:9:52009:52024	6129448	0	True				
ANR	6129464	EqualityExpression	tcc_nerr ( ) == 0		6129448	0		==			
ANR	6129465	CallExpression	tcc_nerr ( )		6129448	0					
ANR	6129466	Callee	tcc_nerr		6129448	0					
ANR	6129467	Identifier	tcc_nerr		6129448	0					
ANR	6129468	ArgumentList			6129448	1					
ANR	6129469	PrimaryExpression	0		6129448	1					
ANR	6129470	CompoundStatement		4:27:65:65	6129448	1					
ANR	6129471	IfStatement	if ( tok != TOK_LAND )		6129448	0					
ANR	6129472	Condition	tok != TOK_LAND	2266:7:52036:52050	6129448	0	True				
ANR	6129473	EqualityExpression	tok != TOK_LAND		6129448	0		!=			
ANR	6129474	Identifier	tok		6129448	0					
ANR	6129475	Identifier	TOK_LAND		6129448	1					
ANR	6129476	CompoundStatement		5:24:91:91	6129448	1					
ANR	6129477	BreakStatement	break ;	2267:4:52059:52064	6129448	0	True				
ANR	6129478	ExpressionStatement	next ( )	2269:3:52074:52081	6129448	1	True				
ANR	6129479	CallExpression	next ( )		6129448	0					
ANR	6129480	Callee	next		6129448	0					
ANR	6129481	Identifier	next		6129448	0					
ANR	6129482	ArgumentList			6129448	1					
ANR	6129483	ExpressionStatement	expr_or ( )	2270:3:52086:52096	6129448	2	True				
ANR	6129484	CallExpression	expr_or ( )		6129448	0					
ANR	6129485	Callee	expr_or		6129448	0					
ANR	6129486	Identifier	expr_or		6129448	0					
ANR	6129487	ArgumentList			6129448	1					
ANR	6129488	ReturnType	static void		6129448	1					
ANR	6129489	Identifier	expr_land		6129448	2					
ANR	6129490	ParameterList			6129448	3					
ANR	6129491	CFGEntryNode	ENTRY		6129448		True				
ANR	6129492	CFGExitNode	EXIT		6129448		True				
ANR	6129493	Symbol	tok		6129448						
ANR	6129494	Symbol	TOK_LAND		6129448						
ANR	6129495	Symbol	tcc_nerr		6129448						
ANR	6129496	Function	expr_lor	2275:0:52108:52281							
ANR	6129497	FunctionDef	expr_lor ()		6129496	0					
ANR	6129498	CompoundStatement		2275:27:52135:52281	6129496	0					
ANR	6129499	ExpressionStatement	expr_land ( )	2276:1:52138:52150	6129496	0	True				
ANR	6129500	CallExpression	expr_land ( )		6129496	0					
ANR	6129501	Callee	expr_land		6129496	0					
ANR	6129502	Identifier	expr_land		6129496	0					
ANR	6129503	ArgumentList			6129496	1					
ANR	6129504	IfStatement	if ( tok == TOK_LOR )		6129496	1					
ANR	6129505	Condition	tok == TOK_LOR	2277:5:52157:52170	6129496	0	True				
ANR	6129506	EqualityExpression	tok == TOK_LOR		6129496	0		==			
ANR	6129507	Identifier	tok		6129496	0					
ANR	6129508	Identifier	TOK_LOR		6129496	1					
ANR	6129509	CompoundStatement		3:21:37:37	6129496	1					
ANR	6129510	WhileStatement	while ( tcc_nerr ( ) == 0 )		6129496	0					
ANR	6129511	Condition	tcc_nerr ( ) == 0	2278:9:52184:52199	6129496	0	True				
ANR	6129512	EqualityExpression	tcc_nerr ( ) == 0		6129496	0		==			
ANR	6129513	CallExpression	tcc_nerr ( )		6129496	0					
ANR	6129514	Callee	tcc_nerr		6129496	0					
ANR	6129515	Identifier	tcc_nerr		6129496	0					
ANR	6129516	ArgumentList			6129496	1					
ANR	6129517	PrimaryExpression	0		6129496	1					
ANR	6129518	CompoundStatement		4:27:66:66	6129496	1					
ANR	6129519	IfStatement	if ( tok != TOK_LOR )		6129496	0					
ANR	6129520	Condition	tok != TOK_LOR	2279:7:52211:52224	6129496	0	True				
ANR	6129521	EqualityExpression	tok != TOK_LOR		6129496	0		!=			
ANR	6129522	Identifier	tok		6129496	0					
ANR	6129523	Identifier	TOK_LOR		6129496	1					
ANR	6129524	CompoundStatement		5:23:91:91	6129496	1					
ANR	6129525	BreakStatement	break ;	2280:4:52233:52238	6129496	0	True				
ANR	6129526	ExpressionStatement	next ( )	2282:3:52248:52255	6129496	1	True				
ANR	6129527	CallExpression	next ( )		6129496	0					
ANR	6129528	Callee	next		6129496	0					
ANR	6129529	Identifier	next		6129496	0					
ANR	6129530	ArgumentList			6129496	1					
ANR	6129531	ExpressionStatement	expr_land ( )	2283:3:52260:52272	6129496	2	True				
ANR	6129532	CallExpression	expr_land ( )		6129496	0					
ANR	6129533	Callee	expr_land		6129496	0					
ANR	6129534	Identifier	expr_land		6129496	0					
ANR	6129535	ArgumentList			6129496	1					
ANR	6129536	ReturnType	static void		6129496	1					
ANR	6129537	Identifier	expr_lor		6129496	2					
ANR	6129538	ParameterList			6129496	3					
ANR	6129539	CFGEntryNode	ENTRY		6129496		True				
ANR	6129540	CFGExitNode	EXIT		6129496		True				
ANR	6129541	Symbol	tok		6129496						
ANR	6129542	Symbol	TOK_LOR		6129496						
ANR	6129543	Symbol	tcc_nerr		6129496						
ANR	6129544	Function	expr_cond	2289:0:52320:52552							
ANR	6129545	FunctionDef	expr_cond ()		6129544	0					
ANR	6129546	CompoundStatement		2289:28:52348:52552	6129544	0					
ANR	6129547	IfStatement	if ( const_wanted )		6129544	0					
ANR	6129548	Condition	const_wanted	2290:5:52355:52366	6129544	0	True				
ANR	6129549	Identifier	const_wanted		6129544	0					
ANR	6129550	CompoundStatement		2:19:20:20	6129544	1					
ANR	6129551	ExpressionStatement	expr_lor_const ( )	2291:2:52373:52390	6129544	0	True				
ANR	6129552	CallExpression	expr_lor_const ( )		6129544	0					
ANR	6129553	Callee	expr_lor_const		6129544	0					
ANR	6129554	Identifier	expr_lor_const		6129544	0					
ANR	6129555	ArgumentList			6129544	1					
ANR	6129556	IfStatement	if ( tok == '?' )		6129544	1					
ANR	6129557	Condition	tok == '?'	2292:6:52398:52407	6129544	0	True				
ANR	6129558	EqualityExpression	tok == '?'		6129544	0		==			
ANR	6129559	Identifier	tok		6129544	0					
ANR	6129560	PrimaryExpression	'?'		6129544	1					
ANR	6129561	CompoundStatement		4:18:61:61	6129544	1					
ANR	6129562	ExpressionStatement	vdup ( )	2293:3:52415:52422	6129544	0	True				
ANR	6129563	CallExpression	vdup ( )		6129544	0					
ANR	6129564	Callee	vdup		6129544	0					
ANR	6129565	Identifier	vdup		6129544	0					
ANR	6129566	ArgumentList			6129544	1					
ANR	6129567	ExpressionStatement	next ( )	2294:3:52427:52434	6129544	1	True				
ANR	6129568	CallExpression	next ( )		6129544	0					
ANR	6129569	Callee	next		6129544	0					
ANR	6129570	Identifier	next		6129544	0					
ANR	6129571	ArgumentList			6129544	1					
ANR	6129572	IfStatement	if ( tok != ':' || ! gnu_ext )		6129544	2					
ANR	6129573	Condition	tok != ':' || ! gnu_ext	2295:7:52443:52464	6129544	0	True				
ANR	6129574	OrExpression	tok != ':' || ! gnu_ext		6129544	0		||			
ANR	6129575	EqualityExpression	tok != ':'		6129544	0		!=			
ANR	6129576	Identifier	tok		6129544	0					
ANR	6129577	PrimaryExpression	':'		6129544	1					
ANR	6129578	UnaryOperationExpression	! gnu_ext		6129544	1					
ANR	6129579	UnaryOperator	!		6129544	0					
ANR	6129580	Identifier	gnu_ext		6129544	1					
ANR	6129581	CompoundStatement		7:31:118:118	6129544	1					
ANR	6129582	ExpressionStatement	gexpr ( )	2296:4:52473:52481	6129544	0	True				
ANR	6129583	CallExpression	gexpr ( )		6129544	0					
ANR	6129584	Callee	gexpr		6129544	0					
ANR	6129585	Identifier	gexpr		6129544	0					
ANR	6129586	ArgumentList			6129544	1					
ANR	6129587	ExpressionStatement	skip ( ':' )	2298:3:52491:52501	6129544	3	True				
ANR	6129588	CallExpression	skip ( ':' )		6129544	0					
ANR	6129589	Callee	skip		6129544	0					
ANR	6129590	Identifier	skip		6129544	0					
ANR	6129591	ArgumentList	':'		6129544	1					
ANR	6129592	Argument	':'		6129544	0					
ANR	6129593	PrimaryExpression	':'		6129544	0					
ANR	6129594	ExpressionStatement	expr_cond ( )	2299:3:52506:52518	6129544	4	True				
ANR	6129595	CallExpression	expr_cond ( )		6129544	0					
ANR	6129596	Callee	expr_cond		6129544	0					
ANR	6129597	Identifier	expr_cond		6129544	0					
ANR	6129598	ArgumentList			6129544	1					
ANR	6129599	ElseStatement	else		6129544	0					
ANR	6129600	CompoundStatement		13:8:183:183	6129544	0					
ANR	6129601	ExpressionStatement	expr_lor ( )	2302:2:52536:52547	6129544	0	True				
ANR	6129602	CallExpression	expr_lor ( )		6129544	0					
ANR	6129603	Callee	expr_lor		6129544	0					
ANR	6129604	Identifier	expr_lor		6129544	0					
ANR	6129605	ArgumentList			6129544	1					
ANR	6129606	ReturnType	static void		6129544	1					
ANR	6129607	Identifier	expr_cond		6129544	2					
ANR	6129608	ParameterList			6129544	3					
ANR	6129609	CFGEntryNode	ENTRY		6129544		True				
ANR	6129610	CFGExitNode	EXIT		6129544		True				
ANR	6129611	Symbol	tok		6129544						
ANR	6129612	Symbol	gnu_ext		6129544						
ANR	6129613	Symbol	const_wanted		6129544						
ANR	6129614	Function	expr_eq	2306:0:52555:52880							
ANR	6129615	FunctionDef	expr_eq ()		6129614	0					
ANR	6129616	CompoundStatement		2306:26:52581:52880	6129614	0					
ANR	6129617	IdentifierDeclStatement	int t ;	2307:1:52584:52589	6129614	0	True				
ANR	6129618	IdentifierDecl	t		6129614	0					
ANR	6129619	IdentifierDeclType	int		6129614	0					
ANR	6129620	Identifier	t		6129614	1					
ANR	6129621	ExpressionStatement	expr_cond ( )	2309:1:52593:52605	6129614	1	True				
ANR	6129622	CallExpression	expr_cond ( )		6129614	0					
ANR	6129623	Callee	expr_cond		6129614	0					
ANR	6129624	Identifier	expr_cond		6129614	0					
ANR	6129625	ArgumentList			6129614	1					
ANR	6129626	IfStatement	if ( tok == '=' || ( tok >= TOK_A_MOD && tok <= TOK_A_DIV ) || tok == TOK_A_XOR || tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR )		6129614	2					
ANR	6129627	Condition	tok == '=' || ( tok >= TOK_A_MOD && tok <= TOK_A_DIV ) || tok == TOK_A_XOR || tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR	2310:5:52612:52757	6129614	0	True				
ANR	6129628	OrExpression	tok == '=' || ( tok >= TOK_A_MOD && tok <= TOK_A_DIV ) || tok == TOK_A_XOR || tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR		6129614	0		||			
ANR	6129629	EqualityExpression	tok == '='		6129614	0		==			
ANR	6129630	Identifier	tok		6129614	0					
ANR	6129631	PrimaryExpression	'='		6129614	1					
ANR	6129632	OrExpression	( tok >= TOK_A_MOD && tok <= TOK_A_DIV ) || tok == TOK_A_XOR || tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR		6129614	1		||			
ANR	6129633	AndExpression	tok >= TOK_A_MOD && tok <= TOK_A_DIV		6129614	0		&&			
ANR	6129634	RelationalExpression	tok >= TOK_A_MOD		6129614	0		>=			
ANR	6129635	Identifier	tok		6129614	0					
ANR	6129636	Identifier	TOK_A_MOD		6129614	1					
ANR	6129637	RelationalExpression	tok <= TOK_A_DIV		6129614	1		<=			
ANR	6129638	Identifier	tok		6129614	0					
ANR	6129639	Identifier	TOK_A_DIV		6129614	1					
ANR	6129640	OrExpression	tok == TOK_A_XOR || tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR		6129614	1		||			
ANR	6129641	EqualityExpression	tok == TOK_A_XOR		6129614	0		==			
ANR	6129642	Identifier	tok		6129614	0					
ANR	6129643	Identifier	TOK_A_XOR		6129614	1					
ANR	6129644	OrExpression	tok == TOK_A_OR || tok == TOK_A_SHL || tok == TOK_A_SAR		6129614	1		||			
ANR	6129645	EqualityExpression	tok == TOK_A_OR		6129614	0		==			
ANR	6129646	Identifier	tok		6129614	0					
ANR	6129647	Identifier	TOK_A_OR		6129614	1					
ANR	6129648	OrExpression	tok == TOK_A_SHL || tok == TOK_A_SAR		6129614	1		||			
ANR	6129649	EqualityExpression	tok == TOK_A_SHL		6129614	0		==			
ANR	6129650	Identifier	tok		6129614	0					
ANR	6129651	Identifier	TOK_A_SHL		6129614	1					
ANR	6129652	EqualityExpression	tok == TOK_A_SAR		6129614	1		==			
ANR	6129653	Identifier	tok		6129614	0					
ANR	6129654	Identifier	TOK_A_SAR		6129614	1					
ANR	6129655	CompoundStatement		8:43:178:178	6129614	1					
ANR	6129656	ExpressionStatement	test_lvalue ( )	2314:2:52764:52778	6129614	0	True				
ANR	6129657	CallExpression	test_lvalue ( )		6129614	0					
ANR	6129658	Callee	test_lvalue		6129614	0					
ANR	6129659	Identifier	test_lvalue		6129614	0					
ANR	6129660	ArgumentList			6129614	1					
ANR	6129661	ExpressionStatement	t = tok	2315:2:52782:52789	6129614	1	True				
ANR	6129662	AssignmentExpression	t = tok		6129614	0		=			
ANR	6129663	Identifier	t		6129614	0					
ANR	6129664	Identifier	tok		6129614	1					
ANR	6129665	ExpressionStatement	next ( )	2316:2:52793:52800	6129614	2	True				
ANR	6129666	CallExpression	next ( )		6129614	0					
ANR	6129667	Callee	next		6129614	0					
ANR	6129668	Identifier	next		6129614	0					
ANR	6129669	ArgumentList			6129614	1					
ANR	6129670	IfStatement	if ( t == '=' )		6129614	3					
ANR	6129671	Condition	t == '='	2317:6:52808:52815	6129614	0	True				
ANR	6129672	EqualityExpression	t == '='		6129614	0		==			
ANR	6129673	Identifier	t		6129614	0					
ANR	6129674	PrimaryExpression	'='		6129614	1					
ANR	6129675	CompoundStatement		12:16:236:236	6129614	1					
ANR	6129676	ExpressionStatement	expr_eq ( )	2318:3:52823:52833	6129614	0	True				
ANR	6129677	CallExpression	expr_eq ( )		6129614	0					
ANR	6129678	Callee	expr_eq		6129614	0					
ANR	6129679	Identifier	expr_eq		6129614	0					
ANR	6129680	ArgumentList			6129614	1					
ANR	6129681	ElseStatement	else		6129614	0					
ANR	6129682	CompoundStatement		14:9:262:262	6129614	0					
ANR	6129683	ExpressionStatement	vdup ( )	2320:3:52849:52856	6129614	0	True				
ANR	6129684	CallExpression	vdup ( )		6129614	0					
ANR	6129685	Callee	vdup		6129614	0					
ANR	6129686	Identifier	vdup		6129614	0					
ANR	6129687	ArgumentList			6129614	1					
ANR	6129688	ExpressionStatement	expr_eq ( )	2321:3:52861:52871	6129614	1	True				
ANR	6129689	CallExpression	expr_eq ( )		6129614	0					
ANR	6129690	Callee	expr_eq		6129614	0					
ANR	6129691	Identifier	expr_eq		6129614	0					
ANR	6129692	ArgumentList			6129614	1					
ANR	6129693	ReturnType	static void		6129614	1					
ANR	6129694	Identifier	expr_eq		6129614	2					
ANR	6129695	ParameterList			6129614	3					
ANR	6129696	CFGEntryNode	ENTRY		6129614		True				
ANR	6129697	CFGExitNode	EXIT		6129614		True				
ANR	6129698	Symbol	tok		6129614						
ANR	6129699	Symbol	t		6129614						
ANR	6129700	Symbol	TOK_A_OR		6129614						
ANR	6129701	Symbol	TOK_A_MOD		6129614						
ANR	6129702	Symbol	TOK_A_DIV		6129614						
ANR	6129703	Symbol	TOK_A_SAR		6129614						
ANR	6129704	Symbol	TOK_A_SHL		6129614						
ANR	6129705	Symbol	TOK_A_XOR		6129614						
ANR	6129706	Function	gexpr	2326:0:52883:53000							
ANR	6129707	FunctionDef	gexpr ()		6129706	0					
ANR	6129708	CompoundStatement		2326:25:52908:53000	6129706	0					
ANR	6129709	WhileStatement	while ( tcc_nerr ( ) == 0 )		6129706	0					
ANR	6129710	Condition	tcc_nerr ( ) == 0	2327:8:52918:52933	6129706	0	True				
ANR	6129711	EqualityExpression	tcc_nerr ( ) == 0		6129706	0		==			
ANR	6129712	CallExpression	tcc_nerr ( )		6129706	0					
ANR	6129713	Callee	tcc_nerr		6129706	0					
ANR	6129714	Identifier	tcc_nerr		6129706	0					
ANR	6129715	ArgumentList			6129706	1					
ANR	6129716	PrimaryExpression	0		6129706	1					
ANR	6129717	CompoundStatement		2:26:27:27	6129706	1					
ANR	6129718	ExpressionStatement	expr_eq ( )	2328:2:52940:52950	6129706	0	True				
ANR	6129719	CallExpression	expr_eq ( )		6129706	0					
ANR	6129720	Callee	expr_eq		6129706	0					
ANR	6129721	Identifier	expr_eq		6129706	0					
ANR	6129722	ArgumentList			6129706	1					
ANR	6129723	IfStatement	"if ( tok != ',' )"		6129706	1					
ANR	6129724	Condition	"tok != ','"	2329:6:52958:52967	6129706	0	True				
ANR	6129725	EqualityExpression	"tok != ','"		6129706	0		!=			
ANR	6129726	Identifier	tok		6129706	0					
ANR	6129727	PrimaryExpression	"','"		6129706	1					
ANR	6129728	CompoundStatement		4:18:61:61	6129706	1					
ANR	6129729	BreakStatement	break ;	2330:3:52975:52980	6129706	0	True				
ANR	6129730	ExpressionStatement	next ( )	2332:2:52988:52995	6129706	2	True				
ANR	6129731	CallExpression	next ( )		6129706	0					
ANR	6129732	Callee	next		6129706	0					
ANR	6129733	Identifier	next		6129706	0					
ANR	6129734	ArgumentList			6129706	1					
ANR	6129735	ReturnType	ST_FUNC void		6129706	1					
ANR	6129736	Identifier	gexpr		6129706	2					
ANR	6129737	ParameterList			6129706	3					
ANR	6129738	CFGEntryNode	ENTRY		6129706		True				
ANR	6129739	CFGExitNode	EXIT		6129706		True				
ANR	6129740	Symbol	tok		6129706						
ANR	6129741	Symbol	tcc_nerr		6129706						
ANR	6129742	Function	expr_type	2337:0:53074:53266							
ANR	6129743	FunctionDef	expr_type (CType * type)		6129742	0					
ANR	6129744	CompoundStatement		2337:35:53109:53266	6129742	0					
ANR	6129745	IdentifierDeclStatement	int saved_nocode_wanted ;	2338:1:53112:53135	6129742	0	True				
ANR	6129746	IdentifierDecl	saved_nocode_wanted		6129742	0					
ANR	6129747	IdentifierDeclType	int		6129742	0					
ANR	6129748	Identifier	saved_nocode_wanted		6129742	1					
ANR	6129749	ExpressionStatement	saved_nocode_wanted = nocode_wanted	2340:1:53139:53174	6129742	1	True				
ANR	6129750	AssignmentExpression	saved_nocode_wanted = nocode_wanted		6129742	0		=			
ANR	6129751	Identifier	saved_nocode_wanted		6129742	0					
ANR	6129752	Identifier	nocode_wanted		6129742	1					
ANR	6129753	ExpressionStatement	nocode_wanted = 1	2341:1:53177:53194	6129742	2	True				
ANR	6129754	AssignmentExpression	nocode_wanted = 1		6129742	0		=			
ANR	6129755	Identifier	nocode_wanted		6129742	0					
ANR	6129756	PrimaryExpression	1		6129742	1					
ANR	6129757	ExpressionStatement	gexpr ( )	2342:1:53197:53205	6129742	3	True				
ANR	6129758	CallExpression	gexpr ( )		6129742	0					
ANR	6129759	Callee	gexpr		6129742	0					
ANR	6129760	Identifier	gexpr		6129742	0					
ANR	6129761	ArgumentList			6129742	1					
ANR	6129762	ExpressionStatement	* type = vtop -> type	2343:1:53208:53226	6129742	4	True				
ANR	6129763	AssignmentExpression	* type = vtop -> type		6129742	0		=			
ANR	6129764	UnaryOperationExpression	* type		6129742	0					
ANR	6129765	UnaryOperator	*		6129742	0					
ANR	6129766	Identifier	type		6129742	1					
ANR	6129767	PtrMemberAccess	vtop -> type		6129742	1					
ANR	6129768	Identifier	vtop		6129742	0					
ANR	6129769	Identifier	type		6129742	1					
ANR	6129770	ExpressionStatement	nocode_wanted = saved_nocode_wanted	2344:1:53229:53264	6129742	5	True				
ANR	6129771	AssignmentExpression	nocode_wanted = saved_nocode_wanted		6129742	0		=			
ANR	6129772	Identifier	nocode_wanted		6129742	0					
ANR	6129773	Identifier	saved_nocode_wanted		6129742	1					
ANR	6129774	ReturnType	static void		6129742	1					
ANR	6129775	Identifier	expr_type		6129742	2					
ANR	6129776	ParameterList	CType * type		6129742	3					
ANR	6129777	Parameter	CType * type	2337:22:53096:53106	6129742	0	True				
ANR	6129778	ParameterType	CType *		6129742	0					
ANR	6129779	Identifier	type		6129742	1					
ANR	6129780	CFGEntryNode	ENTRY		6129742		True				
ANR	6129781	CFGExitNode	EXIT		6129742		True				
ANR	6129782	Symbol	* vtop		6129742						
ANR	6129783	Symbol	* type		6129742						
ANR	6129784	Symbol	vtop -> type		6129742						
ANR	6129785	Symbol	vtop		6129742						
ANR	6129786	Symbol	nocode_wanted		6129742						
ANR	6129787	Symbol	type		6129742						
ANR	6129788	Symbol	saved_nocode_wanted		6129742						
ANR	6129789	Function	unary_type	2349:0:53348:53482							
ANR	6129790	FunctionDef	unary_type (CType * type)		6129789	0					
ANR	6129791	CompoundStatement		2349:36:53384:53482	6129789	0					
ANR	6129792	IdentifierDeclStatement	int a = nocode_wanted ;	2350:1:53387:53408	6129789	0	True				
ANR	6129793	IdentifierDecl	a = nocode_wanted		6129789	0					
ANR	6129794	IdentifierDeclType	int		6129789	0					
ANR	6129795	Identifier	a		6129789	1					
ANR	6129796	AssignmentExpression	a = nocode_wanted		6129789	2		=			
ANR	6129797	Identifier	nocode_wanted		6129789	0					
ANR	6129798	Identifier	nocode_wanted		6129789	1					
ANR	6129799	ExpressionStatement	nocode_wanted = 1	2351:1:53411:53428	6129789	1	True				
ANR	6129800	AssignmentExpression	nocode_wanted = 1		6129789	0		=			
ANR	6129801	Identifier	nocode_wanted		6129789	0					
ANR	6129802	PrimaryExpression	1		6129789	1					
ANR	6129803	ExpressionStatement	unary ( )	2352:1:53431:53439	6129789	2	True				
ANR	6129804	CallExpression	unary ( )		6129789	0					
ANR	6129805	Callee	unary		6129789	0					
ANR	6129806	Identifier	unary		6129789	0					
ANR	6129807	ArgumentList			6129789	1					
ANR	6129808	ExpressionStatement	* type = vtop -> type	2353:1:53442:53460	6129789	3	True				
ANR	6129809	AssignmentExpression	* type = vtop -> type		6129789	0		=			
ANR	6129810	UnaryOperationExpression	* type		6129789	0					
ANR	6129811	UnaryOperator	*		6129789	0					
ANR	6129812	Identifier	type		6129789	1					
ANR	6129813	PtrMemberAccess	vtop -> type		6129789	1					
ANR	6129814	Identifier	vtop		6129789	0					
ANR	6129815	Identifier	type		6129789	1					
ANR	6129816	ExpressionStatement	nocode_wanted = a	2354:1:53463:53480	6129789	4	True				
ANR	6129817	AssignmentExpression	nocode_wanted = a		6129789	0		=			
ANR	6129818	Identifier	nocode_wanted		6129789	0					
ANR	6129819	Identifier	a		6129789	1					
ANR	6129820	ReturnType	static void		6129789	1					
ANR	6129821	Identifier	unary_type		6129789	2					
ANR	6129822	ParameterList	CType * type		6129789	3					
ANR	6129823	Parameter	CType * type	2349:23:53371:53381	6129789	0	True				
ANR	6129824	ParameterType	CType *		6129789	0					
ANR	6129825	Identifier	type		6129789	1					
ANR	6129826	CFGEntryNode	ENTRY		6129789		True				
ANR	6129827	CFGExitNode	EXIT		6129789		True				
ANR	6129828	Symbol	* vtop		6129789						
ANR	6129829	Symbol	a		6129789						
ANR	6129830	Symbol	* type		6129789						
ANR	6129831	Symbol	vtop -> type		6129789						
ANR	6129832	Symbol	vtop		6129789						
ANR	6129833	Symbol	nocode_wanted		6129789						
ANR	6129834	Symbol	type		6129789						
ANR	6129835	Function	expr_const1	2358:0:53546:53658							
ANR	6129836	FunctionDef	expr_const1 ()		6129835	0					
ANR	6129837	CompoundStatement		2358:30:53576:53658	6129835	0					
ANR	6129838	IdentifierDeclStatement	int a ;	2359:1:53579:53584	6129835	0	True				
ANR	6129839	IdentifierDecl	a		6129835	0					
ANR	6129840	IdentifierDeclType	int		6129835	0					
ANR	6129841	Identifier	a		6129835	1					
ANR	6129842	ExpressionStatement	a = const_wanted	2360:1:53587:53603	6129835	1	True				
ANR	6129843	AssignmentExpression	a = const_wanted		6129835	0		=			
ANR	6129844	Identifier	a		6129835	0					
ANR	6129845	Identifier	const_wanted		6129835	1					
ANR	6129846	ExpressionStatement	const_wanted = 1	2361:1:53606:53622	6129835	2	True				
ANR	6129847	AssignmentExpression	const_wanted = 1		6129835	0		=			
ANR	6129848	Identifier	const_wanted		6129835	0					
ANR	6129849	PrimaryExpression	1		6129835	1					
ANR	6129850	ExpressionStatement	expr_cond ( )	2362:1:53625:53637	6129835	3	True				
ANR	6129851	CallExpression	expr_cond ( )		6129835	0					
ANR	6129852	Callee	expr_cond		6129835	0					
ANR	6129853	Identifier	expr_cond		6129835	0					
ANR	6129854	ArgumentList			6129835	1					
ANR	6129855	ExpressionStatement	const_wanted = a	2363:1:53640:53656	6129835	4	True				
ANR	6129856	AssignmentExpression	const_wanted = a		6129835	0		=			
ANR	6129857	Identifier	const_wanted		6129835	0					
ANR	6129858	Identifier	a		6129835	1					
ANR	6129859	ReturnType	static void		6129835	1					
ANR	6129860	Identifier	expr_const1		6129835	2					
ANR	6129861	ParameterList			6129835	3					
ANR	6129862	CFGEntryNode	ENTRY		6129835		True				
ANR	6129863	CFGExitNode	EXIT		6129835		True				
ANR	6129864	Symbol	a		6129835						
ANR	6129865	Symbol	const_wanted		6129835						
ANR	6129866	Function	expr_const	2367:0:53715:53918							
ANR	6129867	FunctionDef	expr_const ()		6129866	0					
ANR	6129868	CompoundStatement		2367:35:53750:53918	6129866	0					
ANR	6129869	Statement	long	2368:1:53753:53756	6129866	0	True				
ANR	6129870	Statement	long	2368:6:53758:53761	6129866	1	True				
ANR	6129871	Statement	c	2368:11:53763:53763	6129866	2	True				
ANR	6129872	Statement	=	2368:13:53765:53765	6129866	3	True				
ANR	6129873	Statement	0L	2368:15:53767:53768	6129866	4	True				
ANR	6129874	ExpressionStatement	L	2368:17:53769:53770	6129866	5	True				
ANR	6129875	Identifier	L		6129866	0					
ANR	6129876	ExpressionStatement	expr_const1 ( )	2369:1:53773:53787	6129866	6	True				
ANR	6129877	CallExpression	expr_const1 ( )		6129866	0					
ANR	6129878	Callee	expr_const1		6129866	0					
ANR	6129879	Identifier	expr_const1		6129866	0					
ANR	6129880	ArgumentList			6129866	1					
ANR	6129881	IfStatement	if ( ( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) != VT_CONST )		6129866	7					
ANR	6129882	Condition	( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) != VT_CONST	2370:5:53794:53848	6129866	0	True				
ANR	6129883	EqualityExpression	( vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM ) ) != VT_CONST		6129866	0		!=			
ANR	6129884	BitAndExpression	vtop -> r & ( VT_VALMASK | VT_LVAL | VT_SYM )		6129866	0		&			
ANR	6129885	PtrMemberAccess	vtop -> r		6129866	0					
ANR	6129886	Identifier	vtop		6129866	0					
ANR	6129887	Identifier	r		6129866	1					
ANR	6129888	InclusiveOrExpression	VT_VALMASK | VT_LVAL | VT_SYM		6129866	1		|			
ANR	6129889	Identifier	VT_VALMASK		6129866	0					
ANR	6129890	InclusiveOrExpression	VT_LVAL | VT_SYM		6129866	1		|			
ANR	6129891	Identifier	VT_LVAL		6129866	0					
ANR	6129892	Identifier	VT_SYM		6129866	1					
ANR	6129893	Identifier	VT_CONST		6129866	1					
ANR	6129894	CompoundStatement		4:62:100:100	6129866	1					
ANR	6129895	ExpressionStatement	"expect ( ""constant expression"" )"	2371:2:53855:53885	6129866	0	True				
ANR	6129896	CallExpression	"expect ( ""constant expression"" )"		6129866	0					
ANR	6129897	Callee	expect		6129866	0					
ANR	6129898	Identifier	expect		6129866	0					
ANR	6129899	ArgumentList	"""constant expression"""		6129866	1					
ANR	6129900	Argument	"""constant expression"""		6129866	0					
ANR	6129901	PrimaryExpression	"""constant expression"""		6129866	0					
ANR	6129902	ExpressionStatement	c = vtop -> c . ll	2373:1:53891:53905	6129866	8	True				
ANR	6129903	AssignmentExpression	c = vtop -> c . ll		6129866	0		=			
ANR	6129904	Identifier	c		6129866	0					
ANR	6129905	MemberAccess	vtop -> c . ll		6129866	1					
ANR	6129906	PtrMemberAccess	vtop -> c		6129866	0					
ANR	6129907	Identifier	vtop		6129866	0					
ANR	6129908	Identifier	c		6129866	1					
ANR	6129909	Identifier	ll		6129866	1					
ANR	6129910	ReturnStatement	return c ;	2374:1:53908:53916	6129866	9	True				
ANR	6129911	Identifier	c		6129866	0					
ANR	6129912	ReturnType	ST_FUNC long long		6129866	1					
ANR	6129913	Identifier	expr_const		6129866	2					
ANR	6129914	ParameterList			6129866	3					
ANR	6129915	CFGEntryNode	ENTRY		6129866		True				
ANR	6129916	CFGExitNode	EXIT		6129866		True				
ANR	6129917	Symbol	VT_CONST		6129866						
ANR	6129918	Symbol	* vtop		6129866						
ANR	6129919	Symbol	vtop -> c . ll		6129866						
ANR	6129920	Symbol	c		6129866						
ANR	6129921	Symbol	vtop		6129866						
ANR	6129922	Symbol	VT_VALMASK		6129866						
ANR	6129923	Symbol	vtop -> r		6129866						
ANR	6129924	Symbol	VT_SYM		6129866						
ANR	6129925	Symbol	VT_LVAL		6129866						
ANR	6129926	Symbol	vtop -> c		6129866						
ANR	6129927	Function	is_label	2379:0:54004:54293							
ANR	6129928	FunctionDef	is_label ()		6129927	0					
ANR	6129929	CompoundStatement		2379:26:54030:54293	6129927	0					
ANR	6129930	IdentifierDeclStatement	int last_tok ;	2380:1:54033:54045	6129927	0	True				
ANR	6129931	IdentifierDecl	last_tok		6129927	0					
ANR	6129932	IdentifierDeclType	int		6129927	0					
ANR	6129933	Identifier	last_tok		6129927	1					
ANR	6129934	IfStatement	if ( tok < TOK_UIDENT )		6129927	1					
ANR	6129935	Condition	tok < TOK_UIDENT	2383:5:54076:54091	6129927	0	True				
ANR	6129936	RelationalExpression	tok < TOK_UIDENT		6129927	0		<			
ANR	6129937	Identifier	tok		6129927	0					
ANR	6129938	Identifier	TOK_UIDENT		6129927	1					
ANR	6129939	CompoundStatement		5:23:63:63	6129927	1					
ANR	6129940	ReturnStatement	return 0 ;	2384:2:54098:54106	6129927	0	True				
ANR	6129941	PrimaryExpression	0		6129927	0					
ANR	6129942	ExpressionStatement	last_tok = tok	2387:1:54169:54183	6129927	2	True				
ANR	6129943	AssignmentExpression	last_tok = tok		6129927	0		=			
ANR	6129944	Identifier	last_tok		6129927	0					
ANR	6129945	Identifier	tok		6129927	1					
ANR	6129946	ExpressionStatement	next ( )	2388:1:54186:54193	6129927	3	True				
ANR	6129947	CallExpression	next ( )		6129927	0					
ANR	6129948	Callee	next		6129927	0					
ANR	6129949	Identifier	next		6129927	0					
ANR	6129950	ArgumentList			6129927	1					
ANR	6129951	IfStatement	if ( tok == ':' )		6129927	4					
ANR	6129952	Condition	tok == ':'	2389:5:54200:54209	6129927	0	True				
ANR	6129953	EqualityExpression	tok == ':'		6129927	0		==			
ANR	6129954	Identifier	tok		6129927	0					
ANR	6129955	PrimaryExpression	':'		6129927	1					
ANR	6129956	CompoundStatement		11:17:181:181	6129927	1					
ANR	6129957	ExpressionStatement	next ( )	2390:2:54216:54223	6129927	0	True				
ANR	6129958	CallExpression	next ( )		6129927	0					
ANR	6129959	Callee	next		6129927	0					
ANR	6129960	Identifier	next		6129927	0					
ANR	6129961	ArgumentList			6129927	1					
ANR	6129962	ReturnStatement	return last_tok ;	2391:2:54227:54242	6129927	1	True				
ANR	6129963	Identifier	last_tok		6129927	0					
ANR	6129964	ElseStatement	else		6129927	0					
ANR	6129965	CompoundStatement		14:8:221:221	6129927	0					
ANR	6129966	ExpressionStatement	unget_tok ( last_tok )	2393:2:54256:54276	6129927	0	True				
ANR	6129967	CallExpression	unget_tok ( last_tok )		6129927	0					
ANR	6129968	Callee	unget_tok		6129927	0					
ANR	6129969	Identifier	unget_tok		6129927	0					
ANR	6129970	ArgumentList	last_tok		6129927	1					
ANR	6129971	Argument	last_tok		6129927	0					
ANR	6129972	Identifier	last_tok		6129927	0					
ANR	6129973	ReturnStatement	return 0 ;	2394:2:54280:54288	6129927	1	True				
ANR	6129974	PrimaryExpression	0		6129927	0					
ANR	6129975	ReturnType	static int		6129927	1					
ANR	6129976	Identifier	is_label		6129927	2					
ANR	6129977	ParameterList			6129927	3					
ANR	6129978	CFGEntryNode	ENTRY		6129927		True				
ANR	6129979	CFGExitNode	EXIT		6129927		True				
ANR	6129980	Symbol	tok		6129927						
ANR	6129981	Symbol	TOK_UIDENT		6129927						
ANR	6129982	Symbol	last_tok		6129927						
ANR	6129983	Function	decl_designator	2402:0:54503:56825							
ANR	6129984	FunctionDef	"decl_designator (CType * type , unsigned long c , long long * cur_index , Sym * * cur_field , int size_only)"		6129983	0					
ANR	6129985	CompoundStatement		2405:0:54629:56825	6129983	0					
ANR	6129986	IdentifierDeclStatement	"Sym * s , * f = NULL ;"	2406:1:54632:54649	6129983	0	True				
ANR	6129987	IdentifierDecl	* s		6129983	0					
ANR	6129988	IdentifierDeclType	Sym *		6129983	0					
ANR	6129989	Identifier	s		6129983	1					
ANR	6129990	IdentifierDecl	* f = NULL		6129983	1					
ANR	6129991	IdentifierDeclType	Sym *		6129983	0					
ANR	6129992	Identifier	f		6129983	1					
ANR	6129993	AssignmentExpression	* f = NULL		6129983	2		=			
ANR	6129994	Identifier	NULL		6129983	0					
ANR	6129995	Identifier	NULL		6129983	1					
ANR	6129996	IdentifierDeclStatement	"long long index , index_last ;"	2407:1:54652:54679	6129983	1	True				
ANR	6129997	IdentifierDecl	index		6129983	0					
ANR	6129998	IdentifierDeclType	long long		6129983	0					
ANR	6129999	Identifier	index		6129983	1					
ANR	6130000	IdentifierDecl	index_last		6129983	1					
ANR	6130001	IdentifierDeclType	long long		6129983	0					
ANR	6130002	Identifier	index_last		6129983	1					
ANR	6130003	IdentifierDeclStatement	"int notfirst , align , l , nb_elems , elem_size ;"	2408:1:54682:54725	6129983	2	True				
ANR	6130004	IdentifierDecl	notfirst		6129983	0					
ANR	6130005	IdentifierDeclType	int		6129983	0					
ANR	6130006	Identifier	notfirst		6129983	1					
ANR	6130007	IdentifierDecl	align		6129983	1					
ANR	6130008	IdentifierDeclType	int		6129983	0					
ANR	6130009	Identifier	align		6129983	1					
ANR	6130010	IdentifierDecl	l		6129983	2					
ANR	6130011	IdentifierDeclType	int		6129983	0					
ANR	6130012	Identifier	l		6129983	1					
ANR	6130013	IdentifierDecl	nb_elems		6129983	3					
ANR	6130014	IdentifierDeclType	int		6129983	0					
ANR	6130015	Identifier	nb_elems		6129983	1					
ANR	6130016	IdentifierDecl	elem_size		6129983	4					
ANR	6130017	IdentifierDeclType	int		6129983	0					
ANR	6130018	Identifier	elem_size		6129983	1					
ANR	6130019	ExpressionStatement	"STACK_NEW0 ( CType , type1 )"	2409:1:54728:54753	6129983	3	True				
ANR	6130020	CallExpression	"STACK_NEW0 ( CType , type1 )"		6129983	0					
ANR	6130021	Callee	STACK_NEW0		6129983	0					
ANR	6130022	Identifier	STACK_NEW0		6129983	0					
ANR	6130023	ArgumentList	CType		6129983	1					
ANR	6130024	Argument	CType		6129983	0					
ANR	6130025	Identifier	CType		6129983	0					
ANR	6130026	Argument	type1		6129983	1					
ANR	6130027	Identifier	type1		6129983	0					
ANR	6130028	ExpressionStatement	notfirst = 0	2411:1:54757:54769	6129983	4	True				
ANR	6130029	AssignmentExpression	notfirst = 0		6129983	0		=			
ANR	6130030	Identifier	notfirst		6129983	0					
ANR	6130031	PrimaryExpression	0		6129983	1					
ANR	6130032	IfStatement	if ( gnu_ext && ( l = is_label ( ) ) != 0 )		6129983	5					
ANR	6130033	Condition	gnu_ext && ( l = is_label ( ) ) != 0	2412:5:54776:54808	6129983	0	True				
ANR	6130034	AndExpression	gnu_ext && ( l = is_label ( ) ) != 0		6129983	0		&&			
ANR	6130035	Identifier	gnu_ext		6129983	0					
ANR	6130036	EqualityExpression	( l = is_label ( ) ) != 0		6129983	1		!=			
ANR	6130037	AssignmentExpression	l = is_label ( )		6129983	0		=			
ANR	6130038	Identifier	l		6129983	0					
ANR	6130039	CallExpression	is_label ( )		6129983	1					
ANR	6130040	Callee	is_label		6129983	0					
ANR	6130041	Identifier	is_label		6129983	0					
ANR	6130042	ArgumentList			6129983	1					
ANR	6130043	PrimaryExpression	0		6129983	1					
ANR	6130044	CompoundStatement		8:40:181:181	6129983	1					
ANR	6130045	GotoStatement	goto struct_field ;	2413:2:54815:54832	6129983	0	True				
ANR	6130046	Identifier	struct_field		6129983	0					
ANR	6130047	WhileStatement	while ( tok == '[' || tok == '.' )		6129983	6					
ANR	6130048	Condition	tok == '[' || tok == '.'	2415:8:54845:54868	6129983	0	True				
ANR	6130049	OrExpression	tok == '[' || tok == '.'		6129983	0		||			
ANR	6130050	EqualityExpression	tok == '['		6129983	0		==			
ANR	6130051	Identifier	tok		6129983	0					
ANR	6130052	PrimaryExpression	'['		6129983	1					
ANR	6130053	EqualityExpression	tok == '.'		6129983	1		==			
ANR	6130054	Identifier	tok		6129983	0					
ANR	6130055	PrimaryExpression	'.'		6129983	1					
ANR	6130056	CompoundStatement		11:34:241:241	6129983	1					
ANR	6130057	IfStatement	if ( tok == '[' )		6129983	0					
ANR	6130058	Condition	tok == '['	2416:6:54879:54888	6129983	0	True				
ANR	6130059	EqualityExpression	tok == '['		6129983	0		==			
ANR	6130060	Identifier	tok		6129983	0					
ANR	6130061	PrimaryExpression	'['		6129983	1					
ANR	6130062	CompoundStatement		12:18:261:261	6129983	1					
ANR	6130063	IfStatement	if ( ! ( type -> t & VT_ARRAY ) )		6129983	0					
ANR	6130064	Condition	! ( type -> t & VT_ARRAY )	2417:7:54900:54920	6129983	0	True				
ANR	6130065	UnaryOperationExpression	! ( type -> t & VT_ARRAY )		6129983	0					
ANR	6130066	UnaryOperator	!		6129983	0					
ANR	6130067	BitAndExpression	type -> t & VT_ARRAY		6129983	1		&			
ANR	6130068	PtrMemberAccess	type -> t		6129983	0					
ANR	6130069	Identifier	type		6129983	0					
ANR	6130070	Identifier	t		6129983	1					
ANR	6130071	Identifier	VT_ARRAY		6129983	1					
ANR	6130072	CompoundStatement		13:30:293:293	6129983	1					
ANR	6130073	ExpressionStatement	"expect ( ""array type"" )"	2418:4:54929:54950	6129983	0	True				
ANR	6130074	CallExpression	"expect ( ""array type"" )"		6129983	0					
ANR	6130075	Callee	expect		6129983	0					
ANR	6130076	Identifier	expect		6129983	0					
ANR	6130077	ArgumentList	"""array type"""		6129983	1					
ANR	6130078	Argument	"""array type"""		6129983	0					
ANR	6130079	PrimaryExpression	"""array type"""		6129983	0					
ANR	6130080	ExpressionStatement	s = type -> ref	2420:3:54960:54973	6129983	1	True				
ANR	6130081	AssignmentExpression	s = type -> ref		6129983	0		=			
ANR	6130082	Identifier	s		6129983	0					
ANR	6130083	PtrMemberAccess	type -> ref		6129983	1					
ANR	6130084	Identifier	type		6129983	0					
ANR	6130085	Identifier	ref		6129983	1					
ANR	6130086	ExpressionStatement	next ( )	2421:3:54978:54985	6129983	2	True				
ANR	6130087	CallExpression	next ( )		6129983	0					
ANR	6130088	Callee	next		6129983	0					
ANR	6130089	Identifier	next		6129983	0					
ANR	6130090	ArgumentList			6129983	1					
ANR	6130091	ExpressionStatement	index = expr_const ( )	2422:3:54990:55011	6129983	3	True				
ANR	6130092	AssignmentExpression	index = expr_const ( )		6129983	0		=			
ANR	6130093	Identifier	index		6129983	0					
ANR	6130094	CallExpression	expr_const ( )		6129983	1					
ANR	6130095	Callee	expr_const		6129983	0					
ANR	6130096	Identifier	expr_const		6129983	0					
ANR	6130097	ArgumentList			6129983	1					
ANR	6130098	IfStatement	if ( index < 0 || ( s -> c >= 0 && index >= s -> c ) )		6129983	4					
ANR	6130099	Condition	index < 0 || ( s -> c >= 0 && index >= s -> c )	2423:7:55020:55060	6129983	0	True				
ANR	6130100	OrExpression	index < 0 || ( s -> c >= 0 && index >= s -> c )		6129983	0		||			
ANR	6130101	RelationalExpression	index < 0		6129983	0		<			
ANR	6130102	Identifier	index		6129983	0					
ANR	6130103	PrimaryExpression	0		6129983	1					
ANR	6130104	AndExpression	s -> c >= 0 && index >= s -> c		6129983	1		&&			
ANR	6130105	RelationalExpression	s -> c >= 0		6129983	0		>=			
ANR	6130106	PtrMemberAccess	s -> c		6129983	0					
ANR	6130107	Identifier	s		6129983	0					
ANR	6130108	Identifier	c		6129983	1					
ANR	6130109	PrimaryExpression	0		6129983	1					
ANR	6130110	RelationalExpression	index >= s -> c		6129983	1		>=			
ANR	6130111	Identifier	index		6129983	0					
ANR	6130112	PtrMemberAccess	s -> c		6129983	1					
ANR	6130113	Identifier	s		6129983	0					
ANR	6130114	Identifier	c		6129983	1					
ANR	6130115	CompoundStatement		19:50:433:433	6129983	1					
ANR	6130116	ExpressionStatement	"expect ( ""invalid index"" )"	2424:4:55069:55093	6129983	0	True				
ANR	6130117	CallExpression	"expect ( ""invalid index"" )"		6129983	0					
ANR	6130118	Callee	expect		6129983	0					
ANR	6130119	Identifier	expect		6129983	0					
ANR	6130120	ArgumentList	"""invalid index"""		6129983	1					
ANR	6130121	Argument	"""invalid index"""		6129983	0					
ANR	6130122	PrimaryExpression	"""invalid index"""		6129983	0					
ANR	6130123	IfStatement	if ( tok == TOK_DOTS && gnu_ext )		6129983	5					
ANR	6130124	Condition	tok == TOK_DOTS && gnu_ext	2426:7:55107:55132	6129983	0	True				
ANR	6130125	AndExpression	tok == TOK_DOTS && gnu_ext		6129983	0		&&			
ANR	6130126	EqualityExpression	tok == TOK_DOTS		6129983	0		==			
ANR	6130127	Identifier	tok		6129983	0					
ANR	6130128	Identifier	TOK_DOTS		6129983	1					
ANR	6130129	Identifier	gnu_ext		6129983	1					
ANR	6130130	CompoundStatement		22:35:505:505	6129983	1					
ANR	6130131	ExpressionStatement	next ( )	2427:4:55141:55148	6129983	0	True				
ANR	6130132	CallExpression	next ( )		6129983	0					
ANR	6130133	Callee	next		6129983	0					
ANR	6130134	Identifier	next		6129983	0					
ANR	6130135	ArgumentList			6129983	1					
ANR	6130136	ExpressionStatement	index_last = expr_const ( )	2428:4:55154:55180	6129983	1	True				
ANR	6130137	AssignmentExpression	index_last = expr_const ( )		6129983	0		=			
ANR	6130138	Identifier	index_last		6129983	0					
ANR	6130139	CallExpression	expr_const ( )		6129983	1					
ANR	6130140	Callee	expr_const		6129983	0					
ANR	6130141	Identifier	expr_const		6129983	0					
ANR	6130142	ArgumentList			6129983	1					
ANR	6130143	IfStatement	if ( index_last < 0 || ( s -> c >= 0 && index_last >= s -> c ) || index_last < index )		6129983	2					
ANR	6130144	Condition	index_last < 0 || ( s -> c >= 0 && index_last >= s -> c ) || index_last < index	2429:8:55190:55278	6129983	0	True				
ANR	6130145	OrExpression	index_last < 0 || ( s -> c >= 0 && index_last >= s -> c ) || index_last < index		6129983	0		||			
ANR	6130146	RelationalExpression	index_last < 0		6129983	0		<			
ANR	6130147	Identifier	index_last		6129983	0					
ANR	6130148	PrimaryExpression	0		6129983	1					
ANR	6130149	OrExpression	( s -> c >= 0 && index_last >= s -> c ) || index_last < index		6129983	1		||			
ANR	6130150	AndExpression	s -> c >= 0 && index_last >= s -> c		6129983	0		&&			
ANR	6130151	RelationalExpression	s -> c >= 0		6129983	0		>=			
ANR	6130152	PtrMemberAccess	s -> c		6129983	0					
ANR	6130153	Identifier	s		6129983	0					
ANR	6130154	Identifier	c		6129983	1					
ANR	6130155	PrimaryExpression	0		6129983	1					
ANR	6130156	RelationalExpression	index_last >= s -> c		6129983	1		>=			
ANR	6130157	Identifier	index_last		6129983	0					
ANR	6130158	PtrMemberAccess	s -> c		6129983	1					
ANR	6130159	Identifier	s		6129983	0					
ANR	6130160	Identifier	c		6129983	1					
ANR	6130161	RelationalExpression	index_last < index		6129983	1		<			
ANR	6130162	Identifier	index_last		6129983	0					
ANR	6130163	Identifier	index		6129983	1					
ANR	6130164	CompoundStatement		27:28:651:651	6129983	1					
ANR	6130165	ExpressionStatement	"expect ( ""invalid index"" )"	2432:5:55288:55312	6129983	0	True				
ANR	6130166	CallExpression	"expect ( ""invalid index"" )"		6129983	0					
ANR	6130167	Callee	expect		6129983	0					
ANR	6130168	Identifier	expect		6129983	0					
ANR	6130169	ArgumentList	"""invalid index"""		6129983	1					
ANR	6130170	Argument	"""invalid index"""		6129983	0					
ANR	6130171	PrimaryExpression	"""invalid index"""		6129983	0					
ANR	6130172	ElseStatement	else		6129983	0					
ANR	6130173	CompoundStatement		30:10:700:700	6129983	0					
ANR	6130174	ExpressionStatement	index_last = index	2435:4:55336:55354	6129983	0	True				
ANR	6130175	AssignmentExpression	index_last = index		6129983	0		=			
ANR	6130176	Identifier	index_last		6129983	0					
ANR	6130177	Identifier	index		6129983	1					
ANR	6130178	ExpressionStatement	skip ( ']' )	2437:3:55364:55374	6129983	6	True				
ANR	6130179	CallExpression	skip ( ']' )		6129983	0					
ANR	6130180	Callee	skip		6129983	0					
ANR	6130181	Identifier	skip		6129983	0					
ANR	6130182	ArgumentList	']'		6129983	1					
ANR	6130183	Argument	']'		6129983	0					
ANR	6130184	PrimaryExpression	']'		6129983	0					
ANR	6130185	IfStatement	if ( ! notfirst && cur_index )		6129983	7					
ANR	6130186	Condition	! notfirst && cur_index	2438:7:55383:55404	6129983	0	True				
ANR	6130187	AndExpression	! notfirst && cur_index		6129983	0		&&			
ANR	6130188	UnaryOperationExpression	! notfirst		6129983	0					
ANR	6130189	UnaryOperator	!		6129983	0					
ANR	6130190	Identifier	notfirst		6129983	1					
ANR	6130191	Identifier	cur_index		6129983	1					
ANR	6130192	CompoundStatement		34:31:777:777	6129983	1					
ANR	6130193	ExpressionStatement	* cur_index = index_last	2439:4:55413:55436	6129983	0	True				
ANR	6130194	AssignmentExpression	* cur_index = index_last		6129983	0		=			
ANR	6130195	UnaryOperationExpression	* cur_index		6129983	0					
ANR	6130196	UnaryOperator	*		6129983	0					
ANR	6130197	Identifier	cur_index		6129983	1					
ANR	6130198	Identifier	index_last		6129983	1					
ANR	6130199	ExpressionStatement	type = pointed_type ( type )	2441:3:55446:55472	6129983	8	True				
ANR	6130200	AssignmentExpression	type = pointed_type ( type )		6129983	0		=			
ANR	6130201	Identifier	type		6129983	0					
ANR	6130202	CallExpression	pointed_type ( type )		6129983	1					
ANR	6130203	Callee	pointed_type		6129983	0					
ANR	6130204	Identifier	pointed_type		6129983	0					
ANR	6130205	ArgumentList	type		6129983	1					
ANR	6130206	Argument	type		6129983	0					
ANR	6130207	Identifier	type		6129983	0					
ANR	6130208	ExpressionStatement	"elem_size = type_size ( type , & align )"	2442:3:55477:55513	6129983	9	True				
ANR	6130209	AssignmentExpression	"elem_size = type_size ( type , & align )"		6129983	0		=			
ANR	6130210	Identifier	elem_size		6129983	0					
ANR	6130211	CallExpression	"type_size ( type , & align )"		6129983	1					
ANR	6130212	Callee	type_size		6129983	0					
ANR	6130213	Identifier	type_size		6129983	0					
ANR	6130214	ArgumentList	type		6129983	1					
ANR	6130215	Argument	type		6129983	0					
ANR	6130216	Identifier	type		6129983	0					
ANR	6130217	Argument	& align		6129983	1					
ANR	6130218	UnaryOperationExpression	& align		6129983	0					
ANR	6130219	UnaryOperator	&		6129983	0					
ANR	6130220	Identifier	align		6129983	1					
ANR	6130221	ExpressionStatement	c += index * elem_size	2443:3:55518:55540	6129983	10	True				
ANR	6130222	AssignmentExpression	c += index * elem_size		6129983	0		+=			
ANR	6130223	Identifier	c		6129983	0					
ANR	6130224	MultiplicativeExpression	index * elem_size		6129983	1		*			
ANR	6130225	Identifier	index		6129983	0					
ANR	6130226	Identifier	elem_size		6129983	1					
ANR	6130227	ExpressionStatement	nb_elems = index_last - index + 1	2445:3:55603:55636	6129983	11	True				
ANR	6130228	AssignmentExpression	nb_elems = index_last - index + 1		6129983	0		=			
ANR	6130229	Identifier	nb_elems		6129983	0					
ANR	6130230	AdditiveExpression	index_last - index + 1		6129983	1		-			
ANR	6130231	Identifier	index_last		6129983	0					
ANR	6130232	AdditiveExpression	index + 1		6129983	1		+			
ANR	6130233	Identifier	index		6129983	0					
ANR	6130234	PrimaryExpression	1		6129983	1					
ANR	6130235	IfStatement	if ( nb_elems != 1 )		6129983	12					
ANR	6130236	Condition	nb_elems != 1	2446:7:55645:55657	6129983	0	True				
ANR	6130237	EqualityExpression	nb_elems != 1		6129983	0		!=			
ANR	6130238	Identifier	nb_elems		6129983	0					
ANR	6130239	PrimaryExpression	1		6129983	1					
ANR	6130240	CompoundStatement		42:22:1030:1030	6129983	1					
ANR	6130241	ExpressionStatement	notfirst = 1	2447:4:55666:55678	6129983	0	True				
ANR	6130242	AssignmentExpression	notfirst = 1		6129983	0		=			
ANR	6130243	Identifier	notfirst		6129983	0					
ANR	6130244	PrimaryExpression	1		6129983	1					
ANR	6130245	BreakStatement	break ;	2448:4:55684:55689	6129983	1	True				
ANR	6130246	ElseStatement	else		6129983	0					
ANR	6130247	CompoundStatement		46:9:1075:1075	6129983	0					
ANR	6130248	ExpressionStatement	next ( )	2451:3:55710:55717	6129983	0	True				
ANR	6130249	CallExpression	next ( )		6129983	0					
ANR	6130250	Callee	next		6129983	0					
ANR	6130251	Identifier	next		6129983	0					
ANR	6130252	ArgumentList			6129983	1					
ANR	6130253	ExpressionStatement	l = tok	2452:3:55722:55729	6129983	1	True				
ANR	6130254	AssignmentExpression	l = tok		6129983	0		=			
ANR	6130255	Identifier	l		6129983	0					
ANR	6130256	Identifier	tok		6129983	1					
ANR	6130257	ExpressionStatement	next ( )	2453:3:55734:55741	6129983	2	True				
ANR	6130258	CallExpression	next ( )		6129983	0					
ANR	6130259	Callee	next		6129983	0					
ANR	6130260	Identifier	next		6129983	0					
ANR	6130261	ArgumentList			6129983	1					
ANR	6130262	Label	struct_field :	2454:0:55743:55755	6129983	3	True				
ANR	6130263	Identifier	struct_field		6129983	0					
ANR	6130264	IfStatement	if ( not_structured ( type ) )		6129983	4					
ANR	6130265	Condition	not_structured ( type )	2455:7:55764:55783	6129983	0	True				
ANR	6130266	CallExpression	not_structured ( type )		6129983	0					
ANR	6130267	Callee	not_structured		6129983	0					
ANR	6130268	Identifier	not_structured		6129983	0					
ANR	6130269	ArgumentList	type		6129983	1					
ANR	6130270	Argument	type		6129983	0					
ANR	6130271	Identifier	type		6129983	0					
ANR	6130272	CompoundStatement		51:29:1156:1156	6129983	1					
ANR	6130273	ExpressionStatement	"expect ( ""struct/union type"" )"	2456:4:55792:55820	6129983	0	True				
ANR	6130274	CallExpression	"expect ( ""struct/union type"" )"		6129983	0					
ANR	6130275	Callee	expect		6129983	0					
ANR	6130276	Identifier	expect		6129983	0					
ANR	6130277	ArgumentList	"""struct/union type"""		6129983	1					
ANR	6130278	Argument	"""struct/union type"""		6129983	0					
ANR	6130279	PrimaryExpression	"""struct/union type"""		6129983	0					
ANR	6130280	ExpressionStatement	s = type -> ref	2458:3:55830:55843	6129983	5	True				
ANR	6130281	AssignmentExpression	s = type -> ref		6129983	0		=			
ANR	6130282	Identifier	s		6129983	0					
ANR	6130283	PtrMemberAccess	type -> ref		6129983	1					
ANR	6130284	Identifier	type		6129983	0					
ANR	6130285	Identifier	ref		6129983	1					
ANR	6130286	ExpressionStatement	l |= SYM_FIELD	2459:3:55848:55862	6129983	6	True				
ANR	6130287	AssignmentExpression	l |= SYM_FIELD		6129983	0		|=			
ANR	6130288	Identifier	l		6129983	0					
ANR	6130289	Identifier	SYM_FIELD		6129983	1					
ANR	6130290	ExpressionStatement	f = s -> next	2460:3:55867:55878	6129983	7	True				
ANR	6130291	AssignmentExpression	f = s -> next		6129983	0		=			
ANR	6130292	Identifier	f		6129983	0					
ANR	6130293	PtrMemberAccess	s -> next		6129983	1					
ANR	6130294	Identifier	s		6129983	0					
ANR	6130295	Identifier	next		6129983	1					
ANR	6130296	WhileStatement	while ( f )		6129983	8					
ANR	6130297	Condition	f	2461:10:55890:55890	6129983	0	True				
ANR	6130298	Identifier	f		6129983	0					
ANR	6130299	CompoundStatement		57:13:1263:1263	6129983	1					
ANR	6130300	IfStatement	if ( f -> v == l )		6129983	0					
ANR	6130301	Condition	f -> v == l	2462:8:55903:55911	6129983	0	True				
ANR	6130302	EqualityExpression	f -> v == l		6129983	0		==			
ANR	6130303	PtrMemberAccess	f -> v		6129983	0					
ANR	6130304	Identifier	f		6129983	0					
ANR	6130305	Identifier	v		6129983	1					
ANR	6130306	Identifier	l		6129983	1					
ANR	6130307	CompoundStatement		58:19:1284:1284	6129983	1					
ANR	6130308	BreakStatement	break ;	2463:5:55921:55926	6129983	0	True				
ANR	6130309	ExpressionStatement	f = f -> next	2465:4:55938:55949	6129983	1	True				
ANR	6130310	AssignmentExpression	f = f -> next		6129983	0		=			
ANR	6130311	Identifier	f		6129983	0					
ANR	6130312	PtrMemberAccess	f -> next		6129983	1					
ANR	6130313	Identifier	f		6129983	0					
ANR	6130314	Identifier	next		6129983	1					
ANR	6130315	IfStatement	if ( ! f )		6129983	9					
ANR	6130316	Condition	! f	2467:7:55963:55964	6129983	0	True				
ANR	6130317	UnaryOperationExpression	! f		6129983	0					
ANR	6130318	UnaryOperator	!		6129983	0					
ANR	6130319	Identifier	f		6129983	1					
ANR	6130320	CompoundStatement		63:11:1337:1337	6129983	1					
ANR	6130321	ExpressionStatement	"expect ( ""field"" )"	2468:4:55973:55989	6129983	0	True				
ANR	6130322	CallExpression	"expect ( ""field"" )"		6129983	0					
ANR	6130323	Callee	expect		6129983	0					
ANR	6130324	Identifier	expect		6129983	0					
ANR	6130325	ArgumentList	"""field"""		6129983	1					
ANR	6130326	Argument	"""field"""		6129983	0					
ANR	6130327	PrimaryExpression	"""field"""		6129983	0					
ANR	6130328	IfStatement	if ( ! notfirst && cur_field )		6129983	10					
ANR	6130329	Condition	! notfirst && cur_field	2470:7:56003:56024	6129983	0	True				
ANR	6130330	AndExpression	! notfirst && cur_field		6129983	0		&&			
ANR	6130331	UnaryOperationExpression	! notfirst		6129983	0					
ANR	6130332	UnaryOperator	!		6129983	0					
ANR	6130333	Identifier	notfirst		6129983	1					
ANR	6130334	Identifier	cur_field		6129983	1					
ANR	6130335	CompoundStatement		66:31:1397:1397	6129983	1					
ANR	6130336	ExpressionStatement	* cur_field = f	2471:4:56033:56047	6129983	0	True				
ANR	6130337	AssignmentExpression	* cur_field = f		6129983	0		=			
ANR	6130338	UnaryOperationExpression	* cur_field		6129983	0					
ANR	6130339	UnaryOperator	*		6129983	0					
ANR	6130340	Identifier	cur_field		6129983	1					
ANR	6130341	Identifier	f		6129983	1					
ANR	6130342	IfStatement	if ( f )		6129983	11					
ANR	6130343	Condition	f	2474:7:56121:56121	6129983	0	True				
ANR	6130344	Identifier	f		6129983	0					
ANR	6130345	CompoundStatement		70:10:1494:1494	6129983	1					
ANR	6130346	ExpressionStatement	type1 = f -> type	2475:4:56130:56145	6129983	0	True				
ANR	6130347	AssignmentExpression	type1 = f -> type		6129983	0		=			
ANR	6130348	Identifier	type1		6129983	0					
ANR	6130349	PtrMemberAccess	f -> type		6129983	1					
ANR	6130350	Identifier	f		6129983	0					
ANR	6130351	Identifier	type		6129983	1					
ANR	6130352	ExpressionStatement	type1 . t |= ( type -> t & ~VT_TYPE )	2476:4:56151:56182	6129983	1	True				
ANR	6130353	AssignmentExpression	type1 . t |= ( type -> t & ~VT_TYPE )		6129983	0		|=			
ANR	6130354	MemberAccess	type1 . t		6129983	0					
ANR	6130355	Identifier	type1		6129983	0					
ANR	6130356	Identifier	t		6129983	1					
ANR	6130357	BitAndExpression	type -> t & ~VT_TYPE		6129983	1		&			
ANR	6130358	PtrMemberAccess	type -> t		6129983	0					
ANR	6130359	Identifier	type		6129983	0					
ANR	6130360	Identifier	t		6129983	1					
ANR	6130361	Identifier	~VT_TYPE		6129983	1					
ANR	6130362	ExpressionStatement	type = & type1	2477:4:56188:56201	6129983	2	True				
ANR	6130363	AssignmentExpression	type = & type1		6129983	0		=			
ANR	6130364	Identifier	type		6129983	0					
ANR	6130365	UnaryOperationExpression	& type1		6129983	1					
ANR	6130366	UnaryOperator	&		6129983	0					
ANR	6130367	Identifier	type1		6129983	1					
ANR	6130368	ExpressionStatement	c += f -> c	2478:4:56207:56216	6129983	3	True				
ANR	6130369	AssignmentExpression	c += f -> c		6129983	0		+=			
ANR	6130370	Identifier	c		6129983	0					
ANR	6130371	PtrMemberAccess	f -> c		6129983	1					
ANR	6130372	Identifier	f		6129983	0					
ANR	6130373	Identifier	c		6129983	1					
ANR	6130374	ExpressionStatement	notfirst = 1	2481:2:56229:56241	6129983	1	True				
ANR	6130375	AssignmentExpression	notfirst = 1		6129983	0		=			
ANR	6130376	Identifier	notfirst		6129983	0					
ANR	6130377	PrimaryExpression	1		6129983	1					
ANR	6130378	IfStatement	if ( notfirst )		6129983	7					
ANR	6130379	Condition	notfirst	2483:5:56251:56258	6129983	0	True				
ANR	6130380	Identifier	notfirst		6129983	0					
ANR	6130381	CompoundStatement		79:15:1631:1631	6129983	1					
ANR	6130382	IfStatement	if ( tok == '=' )		6129983	0					
ANR	6130383	Condition	tok == '='	2484:6:56269:56278	6129983	0	True				
ANR	6130384	EqualityExpression	tok == '='		6129983	0		==			
ANR	6130385	Identifier	tok		6129983	0					
ANR	6130386	PrimaryExpression	'='		6129983	1					
ANR	6130387	CompoundStatement		80:18:1651:1651	6129983	1					
ANR	6130388	ExpressionStatement	next ( )	2485:3:56286:56293	6129983	0	True				
ANR	6130389	CallExpression	next ( )		6129983	0					
ANR	6130390	Callee	next		6129983	0					
ANR	6130391	Identifier	next		6129983	0					
ANR	6130392	ArgumentList			6129983	1					
ANR	6130393	ElseStatement	else		6129983	0					
ANR	6130394	CompoundStatement		82:9:1674:1674	6129983	0					
ANR	6130395	IfStatement	if ( ! gnu_ext )		6129983	0					
ANR	6130396	Condition	! gnu_ext	2487:7:56313:56320	6129983	0	True				
ANR	6130397	UnaryOperationExpression	! gnu_ext		6129983	0					
ANR	6130398	UnaryOperator	!		6129983	0					
ANR	6130399	Identifier	gnu_ext		6129983	1					
ANR	6130400	CompoundStatement		83:17:1693:1693	6129983	1					
ANR	6130401	ExpressionStatement	"expect ( ""="" )"	2488:4:56329:56341	6129983	0	True				
ANR	6130402	CallExpression	"expect ( ""="" )"		6129983	0					
ANR	6130403	Callee	expect		6129983	0					
ANR	6130404	Identifier	expect		6129983	0					
ANR	6130405	ArgumentList	"""="""		6129983	1					
ANR	6130406	Argument	"""="""		6129983	0					
ANR	6130407	PrimaryExpression	"""="""		6129983	0					
ANR	6130408	ElseStatement	else		6129983	0					
ANR	6130409	CompoundStatement		87:8:1730:1730	6129983	0					
ANR	6130410	IfStatement	if ( type -> t & VT_ARRAY )		6129983	0					
ANR	6130411	Condition	type -> t & VT_ARRAY	2492:6:56368:56385	6129983	0	True				
ANR	6130412	BitAndExpression	type -> t & VT_ARRAY		6129983	0		&			
ANR	6130413	PtrMemberAccess	type -> t		6129983	0					
ANR	6130414	Identifier	type		6129983	0					
ANR	6130415	Identifier	t		6129983	1					
ANR	6130416	Identifier	VT_ARRAY		6129983	1					
ANR	6130417	CompoundStatement		88:26:1758:1758	6129983	1					
ANR	6130418	ExpressionStatement	index = cur_index ? * cur_index : 0	2493:3:56393:56427	6129983	0	True				
ANR	6130419	AssignmentExpression	index = cur_index ? * cur_index : 0		6129983	0		=			
ANR	6130420	Identifier	index		6129983	0					
ANR	6130421	ConditionalExpression	cur_index ? * cur_index : 0		6129983	1					
ANR	6130422	Condition	cur_index		6129983	0					
ANR	6130423	Identifier	cur_index		6129983	0					
ANR	6130424	UnaryOperationExpression	* cur_index		6129983	1					
ANR	6130425	UnaryOperator	*		6129983	0					
ANR	6130426	Identifier	cur_index		6129983	1					
ANR	6130427	PrimaryExpression	0		6129983	2					
ANR	6130428	ExpressionStatement	type = pointed_type ( type )	2494:3:56432:56458	6129983	1	True				
ANR	6130429	AssignmentExpression	type = pointed_type ( type )		6129983	0		=			
ANR	6130430	Identifier	type		6129983	0					
ANR	6130431	CallExpression	pointed_type ( type )		6129983	1					
ANR	6130432	Callee	pointed_type		6129983	0					
ANR	6130433	Identifier	pointed_type		6129983	0					
ANR	6130434	ArgumentList	type		6129983	1					
ANR	6130435	Argument	type		6129983	0					
ANR	6130436	Identifier	type		6129983	0					
ANR	6130437	ExpressionStatement	"c += index * type_size ( type , & align )"	2495:3:56463:56500	6129983	2	True				
ANR	6130438	AssignmentExpression	"c += index * type_size ( type , & align )"		6129983	0		+=			
ANR	6130439	Identifier	c		6129983	0					
ANR	6130440	MultiplicativeExpression	"index * type_size ( type , & align )"		6129983	1		*			
ANR	6130441	Identifier	index		6129983	0					
ANR	6130442	CallExpression	"type_size ( type , & align )"		6129983	1					
ANR	6130443	Callee	type_size		6129983	0					
ANR	6130444	Identifier	type_size		6129983	0					
ANR	6130445	ArgumentList	type		6129983	1					
ANR	6130446	Argument	type		6129983	0					
ANR	6130447	Identifier	type		6129983	0					
ANR	6130448	Argument	& align		6129983	1					
ANR	6130449	UnaryOperationExpression	& align		6129983	0					
ANR	6130450	UnaryOperator	&		6129983	0					
ANR	6130451	Identifier	align		6129983	1					
ANR	6130452	ElseStatement	else		6129983	0					
ANR	6130453	CompoundStatement		92:9:1881:1881	6129983	0					
ANR	6130454	ExpressionStatement	f = cur_field ? * cur_field : NULL	2497:3:56516:56549	6129983	0	True				
ANR	6130455	AssignmentExpression	f = cur_field ? * cur_field : NULL		6129983	0		=			
ANR	6130456	Identifier	f		6129983	0					
ANR	6130457	ConditionalExpression	cur_field ? * cur_field : NULL		6129983	1					
ANR	6130458	Condition	cur_field		6129983	0					
ANR	6130459	Identifier	cur_field		6129983	0					
ANR	6130460	UnaryOperationExpression	* cur_field		6129983	1					
ANR	6130461	UnaryOperator	*		6129983	0					
ANR	6130462	Identifier	cur_field		6129983	1					
ANR	6130463	Identifier	NULL		6129983	2					
ANR	6130464	IfStatement	if ( ! f )		6129983	1					
ANR	6130465	Condition	! f	2498:7:56558:56559	6129983	0	True				
ANR	6130466	UnaryOperationExpression	! f		6129983	0					
ANR	6130467	UnaryOperator	!		6129983	0					
ANR	6130468	Identifier	f		6129983	1					
ANR	6130469	CompoundStatement		94:11:1932:1932	6129983	1					
ANR	6130470	ExpressionStatement	"TCC_ERR ( ""too many field init"" )"	2499:4:56568:56599	6129983	0	True				
ANR	6130471	CallExpression	"TCC_ERR ( ""too many field init"" )"		6129983	0					
ANR	6130472	Callee	TCC_ERR		6129983	0					
ANR	6130473	Identifier	TCC_ERR		6129983	0					
ANR	6130474	ArgumentList	"""too many field init"""		6129983	1					
ANR	6130475	Argument	"""too many field init"""		6129983	0					
ANR	6130476	PrimaryExpression	"""too many field init"""		6129983	0					
ANR	6130477	IfStatement	if ( f )		6129983	2					
ANR	6130478	Condition	f	2502:7:56673:56673	6129983	0	True				
ANR	6130479	Identifier	f		6129983	0					
ANR	6130480	CompoundStatement		98:10:2046:2046	6129983	1					
ANR	6130481	ExpressionStatement	type1 = f -> type	2503:4:56682:56697	6129983	0	True				
ANR	6130482	AssignmentExpression	type1 = f -> type		6129983	0		=			
ANR	6130483	Identifier	type1		6129983	0					
ANR	6130484	PtrMemberAccess	f -> type		6129983	1					
ANR	6130485	Identifier	f		6129983	0					
ANR	6130486	Identifier	type		6129983	1					
ANR	6130487	ExpressionStatement	type1 . t |= ( type -> t & ~VT_TYPE )	2504:4:56703:56734	6129983	1	True				
ANR	6130488	AssignmentExpression	type1 . t |= ( type -> t & ~VT_TYPE )		6129983	0		|=			
ANR	6130489	MemberAccess	type1 . t		6129983	0					
ANR	6130490	Identifier	type1		6129983	0					
ANR	6130491	Identifier	t		6129983	1					
ANR	6130492	BitAndExpression	type -> t & ~VT_TYPE		6129983	1		&			
ANR	6130493	PtrMemberAccess	type -> t		6129983	0					
ANR	6130494	Identifier	type		6129983	0					
ANR	6130495	Identifier	t		6129983	1					
ANR	6130496	Identifier	~VT_TYPE		6129983	1					
ANR	6130497	ExpressionStatement	type = & type1	2505:4:56740:56753	6129983	2	True				
ANR	6130498	AssignmentExpression	type = & type1		6129983	0		=			
ANR	6130499	Identifier	type		6129983	0					
ANR	6130500	UnaryOperationExpression	& type1		6129983	1					
ANR	6130501	UnaryOperator	&		6129983	0					
ANR	6130502	Identifier	type1		6129983	1					
ANR	6130503	ExpressionStatement	c += f -> c	2506:4:56759:56768	6129983	3	True				
ANR	6130504	AssignmentExpression	c += f -> c		6129983	0		+=			
ANR	6130505	Identifier	c		6129983	0					
ANR	6130506	PtrMemberAccess	f -> c		6129983	1					
ANR	6130507	Identifier	f		6129983	0					
ANR	6130508	Identifier	c		6129983	1					
ANR	6130509	ExpressionStatement	"decl_initializer ( type , c , 0 , size_only )"	2510:1:56783:56823	6129983	8	True				
ANR	6130510	CallExpression	"decl_initializer ( type , c , 0 , size_only )"		6129983	0					
ANR	6130511	Callee	decl_initializer		6129983	0					
ANR	6130512	Identifier	decl_initializer		6129983	0					
ANR	6130513	ArgumentList	type		6129983	1					
ANR	6130514	Argument	type		6129983	0					
ANR	6130515	Identifier	type		6129983	0					
ANR	6130516	Argument	c		6129983	1					
ANR	6130517	Identifier	c		6129983	0					
ANR	6130518	Argument	0		6129983	2					
ANR	6130519	PrimaryExpression	0		6129983	0					
ANR	6130520	Argument	size_only		6129983	3					
ANR	6130521	Identifier	size_only		6129983	0					
ANR	6130522	ReturnType	static void		6129983	1					
ANR	6130523	Identifier	decl_designator		6129983	2					
ANR	6130524	ParameterList	"CType * type , unsigned long c , long long * cur_index , Sym * * cur_field , int size_only"		6129983	3					
ANR	6130525	Parameter	CType * type	2402:28:54531:54541	6129983	0	True				
ANR	6130526	ParameterType	CType *		6129983	0					
ANR	6130527	Identifier	type		6129983	1					
ANR	6130528	Parameter	unsigned long c	2402:41:54544:54558	6129983	1	True				
ANR	6130529	ParameterType	unsigned long		6129983	0					
ANR	6130530	Identifier	c		6129983	1					
ANR	6130531	Parameter	long long * cur_index	2403:7:54568:54587	6129983	2	True				
ANR	6130532	ParameterType	long long *		6129983	0					
ANR	6130533	Identifier	cur_index		6129983	1					
ANR	6130534	Parameter	Sym * * cur_field	2403:29:54590:54604	6129983	3	True				
ANR	6130535	ParameterType	Sym * *		6129983	0					
ANR	6130536	Identifier	cur_field		6129983	1					
ANR	6130537	Parameter	int size_only	2404:7:54614:54626	6129983	4	True				
ANR	6130538	ParameterType	int		6129983	0					
ANR	6130539	Identifier	size_only		6129983	1					
ANR	6130540	CFGEntryNode	ENTRY		6129983		True				
ANR	6130541	CFGExitNode	EXIT		6129983		True				
ANR	6130542	Symbol	* cur_field		6129983						
ANR	6130543	Symbol	expr_const		6129983						
ANR	6130544	Symbol	CType		6129983						
ANR	6130545	Symbol	f -> c		6129983						
ANR	6130546	Symbol	s -> next		6129983						
ANR	6130547	Symbol	type		6129983						
ANR	6130548	Symbol	align		6129983						
ANR	6130549	Symbol	tok		6129983						
ANR	6130550	Symbol	type_size		6129983						
ANR	6130551	Symbol	SYM_FIELD		6129983						
ANR	6130552	Symbol	s -> c		6129983						
ANR	6130553	Symbol	* type		6129983						
ANR	6130554	Symbol	pointed_type		6129983						
ANR	6130555	Symbol	& align		6129983						
ANR	6130556	Symbol	is_label		6129983						
ANR	6130557	Symbol	type1 . t		6129983						
ANR	6130558	Symbol	& type1		6129983						
ANR	6130559	Symbol	type -> ref		6129983						
ANR	6130560	Symbol	c		6129983						
ANR	6130561	Symbol	NULL		6129983						
ANR	6130562	Symbol	gnu_ext		6129983						
ANR	6130563	Symbol	f		6129983						
ANR	6130564	Symbol	index_last		6129983						
ANR	6130565	Symbol	f -> v		6129983						
ANR	6130566	Symbol	f -> type		6129983						
ANR	6130567	Symbol	notfirst		6129983						
ANR	6130568	Symbol	index		6129983						
ANR	6130569	Symbol	cur_field		6129983						
ANR	6130570	Symbol	l		6129983						
ANR	6130571	Symbol	type1		6129983						
ANR	6130572	Symbol	* cur_index		6129983						
ANR	6130573	Symbol	cur_index		6129983						
ANR	6130574	Symbol	f -> next		6129983						
ANR	6130575	Symbol	* f		6129983						
ANR	6130576	Symbol	size_only		6129983						
ANR	6130577	Symbol	s		6129983						
ANR	6130578	Symbol	elem_size		6129983						
ANR	6130579	Symbol	type -> t		6129983						
ANR	6130580	Symbol	~VT_TYPE		6129983						
ANR	6130581	Symbol	nb_elems		6129983						
ANR	6130582	Symbol	TOK_DOTS		6129983						
ANR	6130583	Symbol	* s		6129983						
ANR	6130584	Symbol	VT_ARRAY		6129983						
ANR	6130585	Symbol	not_structured		6129983						
ANR	6130586	Function	init_putv	2518:0:56971:57681							
ANR	6130587	FunctionDef	"init_putv (CType * type , unsigned long c , long long v , int expr_type)"		6130586	0					
ANR	6130588	CompoundStatement		2518:80:57051:57681	6130586	0					
ANR	6130589	IdentifierDeclStatement	int saved_global_expr ;	2519:1:57054:57075	6130586	0	True				
ANR	6130590	IdentifierDecl	saved_global_expr		6130586	0					
ANR	6130591	IdentifierDeclType	int		6130586	0					
ANR	6130592	Identifier	saved_global_expr		6130586	1					
ANR	6130593	IdentifierDeclStatement	CType dtype ;	2520:1:57078:57089	6130586	1	True				
ANR	6130594	IdentifierDecl	dtype		6130586	0					
ANR	6130595	IdentifierDeclType	CType		6130586	0					
ANR	6130596	Identifier	dtype		6130586	1					
ANR	6130597	SwitchStatement	switch ( expr_type )		6130586	2					
ANR	6130598	Condition	expr_type	2522:9:57101:57109	6130586	0	True				
ANR	6130599	Identifier	expr_type		6130586	0					
ANR	6130600	CompoundStatement		5:20:60:60	6130586	1					
ANR	6130601	Label	case EXPR_VAL :	2523:1:57115:57128	6130586	0	True				
ANR	6130602	Identifier	EXPR_VAL		6130586	0					
ANR	6130603	ExpressionStatement	vpushll ( v )	2524:2:57132:57143	6130586	1	True				
ANR	6130604	CallExpression	vpushll ( v )		6130586	0					
ANR	6130605	Callee	vpushll		6130586	0					
ANR	6130606	Identifier	vpushll		6130586	0					
ANR	6130607	ArgumentList	v		6130586	1					
ANR	6130608	Argument	v		6130586	0					
ANR	6130609	Identifier	v		6130586	0					
ANR	6130610	BreakStatement	break ;	2525:2:57147:57152	6130586	2	True				
ANR	6130611	Label	case EXPR_CONST :	2526:1:57155:57170	6130586	3	True				
ANR	6130612	Identifier	EXPR_CONST		6130586	0					
ANR	6130613	ExpressionStatement	saved_global_expr = global_expr	2528:2:57240:57271	6130586	4	True				
ANR	6130614	AssignmentExpression	saved_global_expr = global_expr		6130586	0		=			
ANR	6130615	Identifier	saved_global_expr		6130586	0					
ANR	6130616	Identifier	global_expr		6130586	1					
ANR	6130617	ExpressionStatement	global_expr = 1	2529:2:57275:57290	6130586	5	True				
ANR	6130618	AssignmentExpression	global_expr = 1		6130586	0		=			
ANR	6130619	Identifier	global_expr		6130586	0					
ANR	6130620	PrimaryExpression	1		6130586	1					
ANR	6130621	ExpressionStatement	expr_const1 ( )	2530:2:57294:57308	6130586	6	True				
ANR	6130622	CallExpression	expr_const1 ( )		6130586	0					
ANR	6130623	Callee	expr_const1		6130586	0					
ANR	6130624	Identifier	expr_const1		6130586	0					
ANR	6130625	ArgumentList			6130586	1					
ANR	6130626	ExpressionStatement	global_expr = saved_global_expr	2531:2:57312:57343	6130586	7	True				
ANR	6130627	AssignmentExpression	global_expr = saved_global_expr		6130586	0		=			
ANR	6130628	Identifier	global_expr		6130586	0					
ANR	6130629	Identifier	saved_global_expr		6130586	1					
ANR	6130630	IfStatement	if ( ( vtop -> r & ( VT_VALMASK | VT_LVAL ) ) != VT_CONST )		6130586	8					
ANR	6130631	Condition	( vtop -> r & ( VT_VALMASK | VT_LVAL ) ) != VT_CONST	2533:6:57386:57431	6130586	0	True				
ANR	6130632	EqualityExpression	( vtop -> r & ( VT_VALMASK | VT_LVAL ) ) != VT_CONST		6130586	0		!=			
ANR	6130633	BitAndExpression	vtop -> r & ( VT_VALMASK | VT_LVAL )		6130586	0		&			
ANR	6130634	PtrMemberAccess	vtop -> r		6130586	0					
ANR	6130635	Identifier	vtop		6130586	0					
ANR	6130636	Identifier	r		6130586	1					
ANR	6130637	InclusiveOrExpression	VT_VALMASK | VT_LVAL		6130586	1		|			
ANR	6130638	Identifier	VT_VALMASK		6130586	0					
ANR	6130639	Identifier	VT_LVAL		6130586	1					
ANR	6130640	Identifier	VT_CONST		6130586	1					
ANR	6130641	CompoundStatement		16:54:382:382	6130586	1					
ANR	6130642	ExpressionStatement	"TCC_ERR ( ""initializer element is not constant"" )"	2534:3:57439:57486	6130586	0	True				
ANR	6130643	CallExpression	"TCC_ERR ( ""initializer element is not constant"" )"		6130586	0					
ANR	6130644	Callee	TCC_ERR		6130586	0					
ANR	6130645	Identifier	TCC_ERR		6130586	0					
ANR	6130646	ArgumentList	"""initializer element is not constant"""		6130586	1					
ANR	6130647	Argument	"""initializer element is not constant"""		6130586	0					
ANR	6130648	PrimaryExpression	"""initializer element is not constant"""		6130586	0					
ANR	6130649	BreakStatement	break ;	2536:2:57494:57499	6130586	9	True				
ANR	6130650	Label	case EXPR_ANY :	2537:1:57502:57515	6130586	10	True				
ANR	6130651	Identifier	EXPR_ANY		6130586	0					
ANR	6130652	ExpressionStatement	expr_eq ( )	2538:2:57519:57529	6130586	11	True				
ANR	6130653	CallExpression	expr_eq ( )		6130586	0					
ANR	6130654	Callee	expr_eq		6130586	0					
ANR	6130655	Identifier	expr_eq		6130586	0					
ANR	6130656	ArgumentList			6130586	1					
ANR	6130657	BreakStatement	break ;	2539:2:57533:57538	6130586	12	True				
ANR	6130658	ExpressionStatement	dtype = * type	2542:1:57545:57558	6130586	3	True				
ANR	6130659	AssignmentExpression	dtype = * type		6130586	0		=			
ANR	6130660	Identifier	dtype		6130586	0					
ANR	6130661	UnaryOperationExpression	* type		6130586	1					
ANR	6130662	UnaryOperator	*		6130586	0					
ANR	6130663	Identifier	type		6130586	1					
ANR	6130664	ExpressionStatement	dtype . t &= ~VT_CONSTANT	2543:1:57561:57584	6130586	4	True				
ANR	6130665	AssignmentExpression	dtype . t &= ~VT_CONSTANT		6130586	0		&=			
ANR	6130666	MemberAccess	dtype . t		6130586	0					
ANR	6130667	Identifier	dtype		6130586	0					
ANR	6130668	Identifier	t		6130586	1					
ANR	6130669	Identifier	~VT_CONSTANT		6130586	1					
ANR	6130670	ExpressionStatement	"vset ( & dtype , VT_LOCAL | VT_LVAL , c )"	2545:1:57632:57668	6130586	5	True				
ANR	6130671	CallExpression	"vset ( & dtype , VT_LOCAL | VT_LVAL , c )"		6130586	0					
ANR	6130672	Callee	vset		6130586	0					
ANR	6130673	Identifier	vset		6130586	0					
ANR	6130674	ArgumentList	& dtype		6130586	1					
ANR	6130675	Argument	& dtype		6130586	0					
ANR	6130676	UnaryOperationExpression	& dtype		6130586	0					
ANR	6130677	UnaryOperator	&		6130586	0					
ANR	6130678	Identifier	dtype		6130586	1					
ANR	6130679	Argument	VT_LOCAL | VT_LVAL		6130586	1					
ANR	6130680	InclusiveOrExpression	VT_LOCAL | VT_LVAL		6130586	0		|			
ANR	6130681	Identifier	VT_LOCAL		6130586	0					
ANR	6130682	Identifier	VT_LVAL		6130586	1					
ANR	6130683	Argument	c		6130586	2					
ANR	6130684	Identifier	c		6130586	0					
ANR	6130685	ExpressionStatement	vswap ( )	2546:1:57671:57679	6130586	6	True				
ANR	6130686	CallExpression	vswap ( )		6130586	0					
ANR	6130687	Callee	vswap		6130586	0					
ANR	6130688	Identifier	vswap		6130586	0					
ANR	6130689	ArgumentList			6130586	1					
ANR	6130690	ReturnType	static void		6130586	1					
ANR	6130691	Identifier	init_putv		6130586	2					
ANR	6130692	ParameterList	"CType * type , unsigned long c , long long v , int expr_type"		6130586	3					
ANR	6130693	Parameter	CType * type	2518:22:56993:57003	6130586	0	True				
ANR	6130694	ParameterType	CType *		6130586	0					
ANR	6130695	Identifier	type		6130586	1					
ANR	6130696	Parameter	unsigned long c	2518:35:57006:57020	6130586	1	True				
ANR	6130697	ParameterType	unsigned long		6130586	0					
ANR	6130698	Identifier	c		6130586	1					
ANR	6130699	Parameter	long long v	2518:52:57023:57033	6130586	2	True				
ANR	6130700	ParameterType	long long		6130586	0					
ANR	6130701	Identifier	v		6130586	1					
ANR	6130702	Parameter	int expr_type	2518:65:57036:57048	6130586	3	True				
ANR	6130703	ParameterType	int		6130586	0					
ANR	6130704	Identifier	expr_type		6130586	1					
ANR	6130705	CFGEntryNode	ENTRY		6130586		True				
ANR	6130706	CFGExitNode	EXIT		6130586		True				
ANR	6130707	Symbol	global_expr		6130586						
ANR	6130708	Symbol	VT_CONST		6130586						
ANR	6130709	Symbol	c		6130586						
ANR	6130710	Symbol	expr_type		6130586						
ANR	6130711	Symbol	vtop		6130586						
ANR	6130712	Symbol	~VT_CONSTANT		6130586						
ANR	6130713	Symbol	dtype		6130586						
ANR	6130714	Symbol	VT_VALMASK		6130586						
ANR	6130715	Symbol	VT_LOCAL		6130586						
ANR	6130716	Symbol	type		6130586						
ANR	6130717	Symbol	* vtop		6130586						
ANR	6130718	Symbol	dtype . t		6130586						
ANR	6130719	Symbol	* type		6130586						
ANR	6130720	Symbol	v		6130586						
ANR	6130721	Symbol	saved_global_expr		6130586						
ANR	6130722	Symbol	vtop -> r		6130586						
ANR	6130723	Symbol	VT_LVAL		6130586						
ANR	6130724	Symbol	& dtype		6130586						
ANR	6130725	Function	init_putz	2550:0:57724:57836							
ANR	6130726	FunctionDef	"init_putz (CType * t , unsigned long c , int size)"		6130725	0					
ANR	6130727	CompoundStatement		2550:59:57783:57836	6130725	0					
ANR	6130728	ExpressionStatement	"vseti ( VT_LOCAL , c )"	2551:1:57786:57805	6130725	0	True				
ANR	6130729	CallExpression	"vseti ( VT_LOCAL , c )"		6130725	0					
ANR	6130730	Callee	vseti		6130725	0					
ANR	6130731	Identifier	vseti		6130725	0					
ANR	6130732	ArgumentList	VT_LOCAL		6130725	1					
ANR	6130733	Argument	VT_LOCAL		6130725	0					
ANR	6130734	Identifier	VT_LOCAL		6130725	0					
ANR	6130735	Argument	c		6130725	1					
ANR	6130736	Identifier	c		6130725	0					
ANR	6130737	ExpressionStatement	vpushi ( 0 )	2552:1:57808:57818	6130725	1	True				
ANR	6130738	CallExpression	vpushi ( 0 )		6130725	0					
ANR	6130739	Callee	vpushi		6130725	0					
ANR	6130740	Identifier	vpushi		6130725	0					
ANR	6130741	ArgumentList	0		6130725	1					
ANR	6130742	Argument	0		6130725	0					
ANR	6130743	PrimaryExpression	0		6130725	0					
ANR	6130744	ExpressionStatement	vpushs ( size )	2553:1:57821:57834	6130725	2	True				
ANR	6130745	CallExpression	vpushs ( size )		6130725	0					
ANR	6130746	Callee	vpushs		6130725	0					
ANR	6130747	Identifier	vpushs		6130725	0					
ANR	6130748	ArgumentList	size		6130725	1					
ANR	6130749	Argument	size		6130725	0					
ANR	6130750	Identifier	size		6130725	0					
ANR	6130751	ReturnType	static void		6130725	1					
ANR	6130752	Identifier	init_putz		6130725	2					
ANR	6130753	ParameterList	"CType * t , unsigned long c , int size"		6130725	3					
ANR	6130754	Parameter	CType * t	2550:22:57746:57753	6130725	0	True				
ANR	6130755	ParameterType	CType *		6130725	0					
ANR	6130756	Identifier	t		6130725	1					
ANR	6130757	Parameter	unsigned long c	2550:32:57756:57770	6130725	1	True				
ANR	6130758	ParameterType	unsigned long		6130725	0					
ANR	6130759	Identifier	c		6130725	1					
ANR	6130760	Parameter	int size	2550:49:57773:57780	6130725	2	True				
ANR	6130761	ParameterType	int		6130725	0					
ANR	6130762	Identifier	size		6130725	1					
ANR	6130763	CFGEntryNode	ENTRY		6130725		True				
ANR	6130764	CFGExitNode	EXIT		6130725		True				
ANR	6130765	Symbol	c		6130725						
ANR	6130766	Symbol	t		6130725						
ANR	6130767	Symbol	size		6130725						
ANR	6130768	Symbol	VT_LOCAL		6130725						
ANR	6130769	Function	decl_initializer	2561:0:58161:64311							
ANR	6130770	FunctionDef	"decl_initializer (CType * type , unsigned long c , int first , int size_only)"		6130769	0					
ANR	6130771	CompoundStatement		2561:85:58246:64311	6130769	0					
ANR	6130772	IdentifierDeclStatement	long long index ;	2562:1:58249:58264	6130769	0	True				
ANR	6130773	IdentifierDecl	index		6130769	0					
ANR	6130774	IdentifierDeclType	long long		6130769	0					
ANR	6130775	Identifier	index		6130769	1					
ANR	6130776	IdentifierDeclStatement	"int array_length , n , no_oblock , nb , parlevel , parlevel1 , i ;"	2563:1:58267:58325	6130769	1	True				
ANR	6130777	IdentifierDecl	array_length		6130769	0					
ANR	6130778	IdentifierDeclType	int		6130769	0					
ANR	6130779	Identifier	array_length		6130769	1					
ANR	6130780	IdentifierDecl	n		6130769	1					
ANR	6130781	IdentifierDeclType	int		6130769	0					
ANR	6130782	Identifier	n		6130769	1					
ANR	6130783	IdentifierDecl	no_oblock		6130769	2					
ANR	6130784	IdentifierDeclType	int		6130769	0					
ANR	6130785	Identifier	no_oblock		6130769	1					
ANR	6130786	IdentifierDecl	nb		6130769	3					
ANR	6130787	IdentifierDeclType	int		6130769	0					
ANR	6130788	Identifier	nb		6130769	1					
ANR	6130789	IdentifierDecl	parlevel		6130769	4					
ANR	6130790	IdentifierDeclType	int		6130769	0					
ANR	6130791	Identifier	parlevel		6130769	1					
ANR	6130792	IdentifierDecl	parlevel1		6130769	5					
ANR	6130793	IdentifierDeclType	int		6130769	0					
ANR	6130794	Identifier	parlevel1		6130769	1					
ANR	6130795	IdentifierDecl	i		6130769	6					
ANR	6130796	IdentifierDeclType	int		6130769	0					
ANR	6130797	Identifier	i		6130769	1					
ANR	6130798	IdentifierDeclStatement	"int size1 , align1 , expr_type ;"	2564:1:58328:58356	6130769	2	True				
ANR	6130799	IdentifierDecl	size1		6130769	0					
ANR	6130800	IdentifierDeclType	int		6130769	0					
ANR	6130801	Identifier	size1		6130769	1					
ANR	6130802	IdentifierDecl	align1		6130769	1					
ANR	6130803	IdentifierDeclType	int		6130769	0					
ANR	6130804	Identifier	align1		6130769	1					
ANR	6130805	IdentifierDecl	expr_type		6130769	2					
ANR	6130806	IdentifierDeclType	int		6130769	0					
ANR	6130807	Identifier	expr_type		6130769	1					
ANR	6130808	IdentifierDeclStatement	"Sym * s , * f ;"	2565:1:58359:58369	6130769	3	True				
ANR	6130809	IdentifierDecl	* s		6130769	0					
ANR	6130810	IdentifierDeclType	Sym *		6130769	0					
ANR	6130811	Identifier	s		6130769	1					
ANR	6130812	IdentifierDecl	* f		6130769	1					
ANR	6130813	IdentifierDeclType	Sym *		6130769	0					
ANR	6130814	Identifier	f		6130769	1					
ANR	6130815	IdentifierDeclStatement	CType * t1 ;	2566:1:58372:58381	6130769	4	True				
ANR	6130816	IdentifierDecl	* t1		6130769	0					
ANR	6130817	IdentifierDeclType	CType *		6130769	0					
ANR	6130818	Identifier	t1		6130769	1					
ANR	6130819	IfStatement	if ( type -> t & VT_ARRAY )		6130769	5					
ANR	6130820	Condition	type -> t & VT_ARRAY	2568:5:58389:58406	6130769	0	True				
ANR	6130821	BitAndExpression	type -> t & VT_ARRAY		6130769	0		&			
ANR	6130822	PtrMemberAccess	type -> t		6130769	0					
ANR	6130823	Identifier	type		6130769	0					
ANR	6130824	Identifier	t		6130769	1					
ANR	6130825	Identifier	VT_ARRAY		6130769	1					
ANR	6130826	CompoundStatement		8:25:162:162	6130769	1					
ANR	6130827	ExpressionStatement	s = type -> ref	2569:2:58413:58426	6130769	0	True				
ANR	6130828	AssignmentExpression	s = type -> ref		6130769	0		=			
ANR	6130829	Identifier	s		6130769	0					
ANR	6130830	PtrMemberAccess	type -> ref		6130769	1					
ANR	6130831	Identifier	type		6130769	0					
ANR	6130832	Identifier	ref		6130769	1					
ANR	6130833	ExpressionStatement	n = s -> c	2570:2:58430:58438	6130769	1	True				
ANR	6130834	AssignmentExpression	n = s -> c		6130769	0		=			
ANR	6130835	Identifier	n		6130769	0					
ANR	6130836	PtrMemberAccess	s -> c		6130769	1					
ANR	6130837	Identifier	s		6130769	0					
ANR	6130838	Identifier	c		6130769	1					
ANR	6130839	ExpressionStatement	array_length = 0	2571:2:58442:58458	6130769	2	True				
ANR	6130840	AssignmentExpression	array_length = 0		6130769	0		=			
ANR	6130841	Identifier	array_length		6130769	0					
ANR	6130842	PrimaryExpression	0		6130769	1					
ANR	6130843	ExpressionStatement	t1 = pointed_type ( type )	2572:2:58462:58486	6130769	3	True				
ANR	6130844	AssignmentExpression	t1 = pointed_type ( type )		6130769	0		=			
ANR	6130845	Identifier	t1		6130769	0					
ANR	6130846	CallExpression	pointed_type ( type )		6130769	1					
ANR	6130847	Callee	pointed_type		6130769	0					
ANR	6130848	Identifier	pointed_type		6130769	0					
ANR	6130849	ArgumentList	type		6130769	1					
ANR	6130850	Argument	type		6130769	0					
ANR	6130851	Identifier	type		6130769	0					
ANR	6130852	ExpressionStatement	"size1 = type_size ( t1 , & align1 )"	2573:2:58490:58521	6130769	4	True				
ANR	6130853	AssignmentExpression	"size1 = type_size ( t1 , & align1 )"		6130769	0		=			
ANR	6130854	Identifier	size1		6130769	0					
ANR	6130855	CallExpression	"type_size ( t1 , & align1 )"		6130769	1					
ANR	6130856	Callee	type_size		6130769	0					
ANR	6130857	Identifier	type_size		6130769	0					
ANR	6130858	ArgumentList	t1		6130769	1					
ANR	6130859	Argument	t1		6130769	0					
ANR	6130860	Identifier	t1		6130769	0					
ANR	6130861	Argument	& align1		6130769	1					
ANR	6130862	UnaryOperationExpression	& align1		6130769	0					
ANR	6130863	UnaryOperator	&		6130769	0					
ANR	6130864	Identifier	align1		6130769	1					
ANR	6130865	ExpressionStatement	no_oblock = 1	2575:2:58526:58539	6130769	5	True				
ANR	6130866	AssignmentExpression	no_oblock = 1		6130769	0		=			
ANR	6130867	Identifier	no_oblock		6130769	0					
ANR	6130868	PrimaryExpression	1		6130769	1					
ANR	6130869	IfStatement	if ( ( first && tok != TOK_LSTR && tok != TOK_STR ) || tok == '{' )		6130769	6					
ANR	6130870	Condition	( first && tok != TOK_LSTR && tok != TOK_STR ) || tok == '{'	2576:6:58547:58610	6130769	0	True				
ANR	6130871	OrExpression	( first && tok != TOK_LSTR && tok != TOK_STR ) || tok == '{'		6130769	0		||			
ANR	6130872	AndExpression	first && tok != TOK_LSTR && tok != TOK_STR		6130769	0		&&			
ANR	6130873	Identifier	first		6130769	0					
ANR	6130874	AndExpression	tok != TOK_LSTR && tok != TOK_STR		6130769	1		&&			
ANR	6130875	EqualityExpression	tok != TOK_LSTR		6130769	0		!=			
ANR	6130876	Identifier	tok		6130769	0					
ANR	6130877	Identifier	TOK_LSTR		6130769	1					
ANR	6130878	EqualityExpression	tok != TOK_STR		6130769	1		!=			
ANR	6130879	Identifier	tok		6130769	0					
ANR	6130880	Identifier	TOK_STR		6130769	1					
ANR	6130881	EqualityExpression	tok == '{'		6130769	1		==			
ANR	6130882	Identifier	tok		6130769	0					
ANR	6130883	PrimaryExpression	'{'		6130769	1					
ANR	6130884	CompoundStatement		17:18:366:366	6130769	1					
ANR	6130885	IfStatement	if ( tok != '{' )		6130769	0					
ANR	6130886	Condition	tok != '{'	2578:7:58622:58631	6130769	0	True				
ANR	6130887	EqualityExpression	tok != '{'		6130769	0		!=			
ANR	6130888	Identifier	tok		6130769	0					
ANR	6130889	PrimaryExpression	'{'		6130769	1					
ANR	6130890	CompoundStatement		18:19:387:387	6130769	1					
ANR	6130891	Statement	TCC_ERR	2579:4:58640:58646	6130769	0	True				
ANR	6130892	Statement	(	2579:12:58648:58648	6130769	1	True				
ANR	6130893	Statement	"""character array initializer must be a literal,"""	2579:13:58649:58696	6130769	2	True				
ANR	6130894	Statement	""" optionally enclosed in braces"""	2580:5:58703:58734	6130769	3	True				
ANR	6130895	Statement	)	2580:37:58735:58735	6130769	4	True				
ANR	6130896	ExpressionStatement		2580:38:58736:58736	6130769	5	True				
ANR	6130897	ExpressionStatement	skip ( '{' )	2582:3:58746:58756	6130769	1	True				
ANR	6130898	CallExpression	skip ( '{' )		6130769	0					
ANR	6130899	Callee	skip		6130769	0					
ANR	6130900	Identifier	skip		6130769	0					
ANR	6130901	ArgumentList	'{'		6130769	1					
ANR	6130902	Argument	'{'		6130769	0					
ANR	6130903	PrimaryExpression	'{'		6130769	0					
ANR	6130904	ExpressionStatement	no_oblock = 0	2583:3:58761:58774	6130769	2	True				
ANR	6130905	AssignmentExpression	no_oblock = 0		6130769	0		=			
ANR	6130906	Identifier	no_oblock		6130769	0					
ANR	6130907	PrimaryExpression	0		6130769	1					
ANR	6130908	ElseStatement	else		6130769	0					
ANR	6130909	CompoundStatement		80:9:2122:2122	6130769	0					
ANR	6130910	ExpressionStatement	index = 0	2641:3:60374:60383	6130769	0	True				
ANR	6130911	AssignmentExpression	index = 0		6130769	0		=			
ANR	6130912	Identifier	index		6130769	0					
ANR	6130913	PrimaryExpression	0		6130769	1					
ANR	6130914	WhileStatement	while ( tok != '}' )		6130769	1					
ANR	6130915	Condition	tok != '}'	2642:10:60395:60404	6130769	0	True				
ANR	6130916	EqualityExpression	tok != '}'		6130769	0		!=			
ANR	6130917	Identifier	tok		6130769	0					
ANR	6130918	PrimaryExpression	'}'		6130769	1					
ANR	6130919	CompoundStatement		82:22:2160:2160	6130769	1					
ANR	6130920	ExpressionStatement	"decl_designator ( type , c , & index , NULL , size_only )"	2643:4:60413:60463	6130769	0	True				
ANR	6130921	CallExpression	"decl_designator ( type , c , & index , NULL , size_only )"		6130769	0					
ANR	6130922	Callee	decl_designator		6130769	0					
ANR	6130923	Identifier	decl_designator		6130769	0					
ANR	6130924	ArgumentList	type		6130769	1					
ANR	6130925	Argument	type		6130769	0					
ANR	6130926	Identifier	type		6130769	0					
ANR	6130927	Argument	c		6130769	1					
ANR	6130928	Identifier	c		6130769	0					
ANR	6130929	Argument	& index		6130769	2					
ANR	6130930	UnaryOperationExpression	& index		6130769	0					
ANR	6130931	UnaryOperator	&		6130769	0					
ANR	6130932	Identifier	index		6130769	1					
ANR	6130933	Argument	NULL		6130769	3					
ANR	6130934	Identifier	NULL		6130769	0					
ANR	6130935	Argument	size_only		6130769	4					
ANR	6130936	Identifier	size_only		6130769	0					
ANR	6130937	IfStatement	if ( n >= 0 && index >= n )		6130769	1					
ANR	6130938	Condition	n >= 0 && index >= n	2644:8:60473:60492	6130769	0	True				
ANR	6130939	AndExpression	n >= 0 && index >= n		6130769	0		&&			
ANR	6130940	RelationalExpression	n >= 0		6130769	0		>=			
ANR	6130941	Identifier	n		6130769	0					
ANR	6130942	PrimaryExpression	0		6130769	1					
ANR	6130943	RelationalExpression	index >= n		6130769	1		>=			
ANR	6130944	Identifier	index		6130769	0					
ANR	6130945	Identifier	n		6130769	1					
ANR	6130946	CompoundStatement		84:30:2248:2248	6130769	1					
ANR	6130947	ExpressionStatement	"TCC_ERR ( ""index too large"" )"	2645:5:60502:60529	6130769	0	True				
ANR	6130948	CallExpression	"TCC_ERR ( ""index too large"" )"		6130769	0					
ANR	6130949	Callee	TCC_ERR		6130769	0					
ANR	6130950	Identifier	TCC_ERR		6130769	0					
ANR	6130951	ArgumentList	"""index too large"""		6130769	1					
ANR	6130952	Argument	"""index too large"""		6130769	0					
ANR	6130953	PrimaryExpression	"""index too large"""		6130769	0					
ANR	6130954	IfStatement	if ( ! size_only && array_length < index )		6130769	2					
ANR	6130955	Condition	! size_only && array_length < index	2649:8:60659:60692	6130769	0	True				
ANR	6130956	AndExpression	! size_only && array_length < index		6130769	0		&&			
ANR	6130957	UnaryOperationExpression	! size_only		6130769	0					
ANR	6130958	UnaryOperator	!		6130769	0					
ANR	6130959	Identifier	size_only		6130769	1					
ANR	6130960	RelationalExpression	array_length < index		6130769	1		<			
ANR	6130961	Identifier	array_length		6130769	0					
ANR	6130962	Identifier	index		6130769	1					
ANR	6130963	CompoundStatement		89:44:2448:2448	6130769	1					
ANR	6130964	ExpressionStatement	"init_putz ( t1 , c + array_length * size1 , ( index - array_length ) * size1 )"	2650:5:60702:60780	6130769	0	True				
ANR	6130965	CallExpression	"init_putz ( t1 , c + array_length * size1 , ( index - array_length ) * size1 )"		6130769	0					
ANR	6130966	Callee	init_putz		6130769	0					
ANR	6130967	Identifier	init_putz		6130769	0					
ANR	6130968	ArgumentList	t1		6130769	1					
ANR	6130969	Argument	t1		6130769	0					
ANR	6130970	Identifier	t1		6130769	0					
ANR	6130971	Argument	c + array_length * size1		6130769	1					
ANR	6130972	AdditiveExpression	c + array_length * size1		6130769	0		+			
ANR	6130973	Identifier	c		6130769	0					
ANR	6130974	MultiplicativeExpression	array_length * size1		6130769	1		*			
ANR	6130975	Identifier	array_length		6130769	0					
ANR	6130976	Identifier	size1		6130769	1					
ANR	6130977	Argument	( index - array_length ) * size1		6130769	2					
ANR	6130978	MultiplicativeExpression	( index - array_length ) * size1		6130769	0		*			
ANR	6130979	AdditiveExpression	index - array_length		6130769	0		-			
ANR	6130980	Identifier	index		6130769	0					
ANR	6130981	Identifier	array_length		6130769	1					
ANR	6130982	Identifier	size1		6130769	1					
ANR	6130983	ExpressionStatement	index ++	2653:4:60792:60799	6130769	3	True				
ANR	6130984	PostIncDecOperationExpression	index ++		6130769	0					
ANR	6130985	Identifier	index		6130769	0					
ANR	6130986	IncDec	++		6130769	1					
ANR	6130987	IfStatement	if ( index > array_length )		6130769	4					
ANR	6130988	Condition	index > array_length	2654:8:60809:60828	6130769	0	True				
ANR	6130989	RelationalExpression	index > array_length		6130769	0		>			
ANR	6130990	Identifier	index		6130769	0					
ANR	6130991	Identifier	array_length		6130769	1					
ANR	6130992	CompoundStatement		94:30:2584:2584	6130769	1					
ANR	6130993	ExpressionStatement	array_length = index	2655:5:60838:60858	6130769	0	True				
ANR	6130994	AssignmentExpression	array_length = index		6130769	0		=			
ANR	6130995	Identifier	array_length		6130769	0					
ANR	6130996	Identifier	index		6130769	1					
ANR	6130997	IfStatement	if ( index >= n && no_oblock )		6130769	5					
ANR	6130998	Condition	index >= n && no_oblock	2660:8:61011:61033	6130769	0	True				
ANR	6130999	AndExpression	index >= n && no_oblock		6130769	0		&&			
ANR	6131000	RelationalExpression	index >= n		6130769	0		>=			
ANR	6131001	Identifier	index		6130769	0					
ANR	6131002	Identifier	n		6130769	1					
ANR	6131003	Identifier	no_oblock		6130769	1					
ANR	6131004	CompoundStatement		100:33:2789:2789	6130769	1					
ANR	6131005	BreakStatement	break ;	2661:5:61043:61048	6130769	0	True				
ANR	6131006	IfStatement	if ( tok == '}' )		6130769	6					
ANR	6131007	Condition	tok == '}'	2663:8:61064:61073	6130769	0	True				
ANR	6131008	EqualityExpression	tok == '}'		6130769	0		==			
ANR	6131009	Identifier	tok		6130769	0					
ANR	6131010	PrimaryExpression	'}'		6130769	1					
ANR	6131011	CompoundStatement		103:20:2829:2829	6130769	1					
ANR	6131012	BreakStatement	break ;	2664:5:61083:61088	6130769	0	True				
ANR	6131013	ExpressionStatement	"skip ( ',' )"	2666:4:61100:61110	6130769	7	True				
ANR	6131014	CallExpression	"skip ( ',' )"		6130769	0					
ANR	6131015	Callee	skip		6130769	0					
ANR	6131016	Identifier	skip		6130769	0					
ANR	6131017	ArgumentList	"','"		6130769	1					
ANR	6131018	Argument	"','"		6130769	0					
ANR	6131019	PrimaryExpression	"','"		6130769	0					
ANR	6131020	Statement	if	2588:2:58887:58888	6130769	7	True				
ANR	6131021	Statement	(	2588:5:58890:58890	6130769	8	True				
ANR	6131022	Statement	(	2588:6:58891:58891	6130769	9	True				
ANR	6131023	Statement	tok	2588:7:58892:58894	6130769	10	True				
ANR	6131024	Statement	==	2588:11:58896:58897	6130769	11	True				
ANR	6131025	Statement	TOK_LSTR	2588:14:58899:58906	6130769	12	True				
ANR	6131026	Statement	&&	2588:23:58908:58909	6130769	13	True				
ANR	6131027	Statement	(	2591:7:58975:58975	6130769	14	True				
ANR	6131028	Statement	t1	2591:8:58976:58977	6130769	15	True				
ANR	6131029	Statement	->	2591:10:58978:58979	6130769	16	True				
ANR	6131030	Statement	t	2591:12:58980:58980	6130769	17	True				
ANR	6131031	Statement	&	2591:14:58982:58982	6130769	18	True				
ANR	6131032	Statement	VT_BTYPE	2591:16:58984:58991	6130769	19	True				
ANR	6131033	Statement	)	2591:24:58992:58992	6130769	20	True				
ANR	6131034	Statement	==	2591:26:58994:58995	6130769	21	True				
ANR	6131035	Statement	VT_INT16	2591:29:58997:59004	6130769	22	True				
ANR	6131036	Statement	&&	2591:38:59006:59007	6130769	23	True				
ANR	6131037	Statement	(	2591:41:59009:59009	6130769	24	True				
ANR	6131038	Statement	t1	2591:42:59010:59011	6130769	25	True				
ANR	6131039	Statement	->	2591:44:59012:59013	6130769	26	True				
ANR	6131040	Statement	t	2591:46:59014:59014	6130769	27	True				
ANR	6131041	Statement	&	2591:48:59016:59016	6130769	28	True				
ANR	6131042	Statement	VT_UNSIGNED	2591:50:59018:59028	6130769	29	True				
ANR	6131043	Statement	)	2591:61:59029:59029	6130769	30	True				
ANR	6131044	Statement	)	2595:6:59088:59088	6130769	31	True				
ANR	6131045	Statement	||	2595:8:59090:59091	6130769	32	True				
ANR	6131046	Statement	(	2595:11:59093:59093	6130769	33	True				
ANR	6131047	Statement	tok	2595:12:59094:59096	6130769	34	True				
ANR	6131048	Statement	==	2595:16:59098:59099	6130769	35	True				
ANR	6131049	Statement	TOK_STR	2595:19:59101:59107	6130769	36	True				
ANR	6131050	Statement	&&	2595:27:59109:59110	6130769	37	True				
ANR	6131051	Statement	(	2595:30:59112:59112	6130769	38	True				
ANR	6131052	Statement	t1	2595:31:59113:59114	6130769	39	True				
ANR	6131053	Statement	->	2595:33:59115:59116	6130769	40	True				
ANR	6131054	Statement	t	2595:35:59117:59117	6130769	41	True				
ANR	6131055	Statement	&	2595:37:59119:59119	6130769	42	True				
ANR	6131056	Statement	VT_BTYPE	2595:39:59121:59128	6130769	43	True				
ANR	6131057	Statement	)	2595:47:59129:59129	6130769	44	True				
ANR	6131058	Statement	==	2595:49:59131:59132	6130769	45	True				
ANR	6131059	Statement	VT_INT8	2595:52:59134:59140	6130769	46	True				
ANR	6131060	Statement	)	2595:59:59141:59141	6130769	47	True				
ANR	6131061	Statement	)	2595:60:59142:59142	6130769	48	True				
ANR	6131062	CompoundStatement		35:62:897:897	6130769	49					
ANR	6131063	WhileStatement	while ( tcc_nerr ( ) == 0 && ( tok == TOK_STR || tok == TOK_LSTR ) )		6130769	0					
ANR	6131064	Condition	tcc_nerr ( ) == 0 && ( tok == TOK_STR || tok == TOK_LSTR )	2596:10:59156:59209	6130769	0	True				
ANR	6131065	AndExpression	tcc_nerr ( ) == 0 && ( tok == TOK_STR || tok == TOK_LSTR )		6130769	0		&&			
ANR	6131066	EqualityExpression	tcc_nerr ( ) == 0		6130769	0		==			
ANR	6131067	CallExpression	tcc_nerr ( )		6130769	0					
ANR	6131068	Callee	tcc_nerr		6130769	0					
ANR	6131069	Identifier	tcc_nerr		6130769	0					
ANR	6131070	ArgumentList			6130769	1					
ANR	6131071	PrimaryExpression	0		6130769	1					
ANR	6131072	OrExpression	tok == TOK_STR || tok == TOK_LSTR		6130769	1		||			
ANR	6131073	EqualityExpression	tok == TOK_STR		6130769	0		==			
ANR	6131074	Identifier	tok		6130769	0					
ANR	6131075	Identifier	TOK_STR		6130769	1					
ANR	6131076	EqualityExpression	tok == TOK_LSTR		6130769	1		==			
ANR	6131077	Identifier	tok		6130769	0					
ANR	6131078	Identifier	TOK_LSTR		6130769	1					
ANR	6131079	CompoundStatement		38:4:993:1006	6130769	1					
ANR	6131080	IdentifierDeclStatement	"int cstr_len , ch ;"	2597:4:59218:59234	6130769	0	True				
ANR	6131081	IdentifierDecl	cstr_len		6130769	0					
ANR	6131082	IdentifierDeclType	int		6130769	0					
ANR	6131083	Identifier	cstr_len		6130769	1					
ANR	6131084	IdentifierDecl	ch		6130769	1					
ANR	6131085	IdentifierDeclType	int		6130769	0					
ANR	6131086	Identifier	ch		6130769	1					
ANR	6131087	IdentifierDeclStatement	CString * cstr ;	2598:4:59240:59253	6130769	1	True				
ANR	6131088	IdentifierDecl	* cstr		6130769	0					
ANR	6131089	IdentifierDeclType	CString *		6130769	0					
ANR	6131090	Identifier	cstr		6130769	1					
ANR	6131091	ExpressionStatement	cstr = tokc . cstr	2600:4:59260:59276	6130769	2	True				
ANR	6131092	AssignmentExpression	cstr = tokc . cstr		6130769	0		=			
ANR	6131093	Identifier	cstr		6130769	0					
ANR	6131094	MemberAccess	tokc . cstr		6130769	1					
ANR	6131095	Identifier	tokc		6130769	0					
ANR	6131096	Identifier	cstr		6130769	1					
ANR	6131097	IfStatement	if ( tok == TOK_STR )		6130769	3					
ANR	6131098	Condition	tok == TOK_STR	2602:8:59335:59348	6130769	0	True				
ANR	6131099	EqualityExpression	tok == TOK_STR		6130769	0		==			
ANR	6131100	Identifier	tok		6130769	0					
ANR	6131101	Identifier	TOK_STR		6130769	1					
ANR	6131102	CompoundStatement		42:24:1104:1104	6130769	1					
ANR	6131103	ExpressionStatement	cstr_len = cstr -> size	2603:5:59358:59379	6130769	0	True				
ANR	6131104	AssignmentExpression	cstr_len = cstr -> size		6130769	0		=			
ANR	6131105	Identifier	cstr_len		6130769	0					
ANR	6131106	PtrMemberAccess	cstr -> size		6130769	1					
ANR	6131107	Identifier	cstr		6130769	0					
ANR	6131108	Identifier	size		6130769	1					
ANR	6131109	ElseStatement	else		6130769	0					
ANR	6131110	CompoundStatement		44:11:1145:1145	6130769	0					
ANR	6131111	ExpressionStatement	cstr_len = cstr -> size / sizeof ( nwchar_t )	2605:5:59399:59439	6130769	0	True				
ANR	6131112	AssignmentExpression	cstr_len = cstr -> size / sizeof ( nwchar_t )		6130769	0		=			
ANR	6131113	Identifier	cstr_len		6130769	0					
ANR	6131114	MultiplicativeExpression	cstr -> size / sizeof ( nwchar_t )		6130769	1		/			
ANR	6131115	PtrMemberAccess	cstr -> size		6130769	0					
ANR	6131116	Identifier	cstr		6130769	0					
ANR	6131117	Identifier	size		6130769	1					
ANR	6131118	SizeofExpression	sizeof ( nwchar_t )		6130769	1					
ANR	6131119	Sizeof	sizeof		6130769	0					
ANR	6131120	SizeofOperand	nwchar_t		6130769	1					
ANR	6131121	ExpressionStatement	cstr_len --	2607:4:59451:59461	6130769	4	True				
ANR	6131122	PostIncDecOperationExpression	cstr_len --		6130769	0					
ANR	6131123	Identifier	cstr_len		6130769	0					
ANR	6131124	IncDec	--		6130769	1					
ANR	6131125	ExpressionStatement	nb = cstr_len	2608:4:59467:59480	6130769	5	True				
ANR	6131126	AssignmentExpression	nb = cstr_len		6130769	0		=			
ANR	6131127	Identifier	nb		6130769	0					
ANR	6131128	Identifier	cstr_len		6130769	1					
ANR	6131129	IfStatement	if ( n >= 0 && nb > ( n - array_length ) )		6130769	6					
ANR	6131130	Condition	n >= 0 && nb > ( n - array_length )	2609:8:59490:59522	6130769	0	True				
ANR	6131131	AndExpression	n >= 0 && nb > ( n - array_length )		6130769	0		&&			
ANR	6131132	RelationalExpression	n >= 0		6130769	0		>=			
ANR	6131133	Identifier	n		6130769	0					
ANR	6131134	PrimaryExpression	0		6130769	1					
ANR	6131135	RelationalExpression	nb > ( n - array_length )		6130769	1		>			
ANR	6131136	Identifier	nb		6130769	0					
ANR	6131137	AdditiveExpression	n - array_length		6130769	1		-			
ANR	6131138	Identifier	n		6130769	0					
ANR	6131139	Identifier	array_length		6130769	1					
ANR	6131140	CompoundStatement		49:43:1278:1278	6130769	1					
ANR	6131141	ExpressionStatement	nb = n - array_length	2610:5:59532:59553	6130769	0	True				
ANR	6131142	AssignmentExpression	nb = n - array_length		6130769	0		=			
ANR	6131143	Identifier	nb		6130769	0					
ANR	6131144	AdditiveExpression	n - array_length		6130769	1		-			
ANR	6131145	Identifier	n		6130769	0					
ANR	6131146	Identifier	array_length		6130769	1					
ANR	6131147	IfStatement	if ( ! size_only )		6130769	7					
ANR	6131148	Condition	! size_only	2612:8:59569:59578	6130769	0	True				
ANR	6131149	UnaryOperationExpression	! size_only		6130769	0					
ANR	6131150	UnaryOperator	!		6130769	0					
ANR	6131151	Identifier	size_only		6130769	1					
ANR	6131152	CompoundStatement		52:20:1334:1334	6130769	1					
ANR	6131153	IfStatement	if ( cstr_len > nb )		6130769	0					
ANR	6131154	Condition	cstr_len > nb	2613:9:59592:59604	6130769	0	True				
ANR	6131155	RelationalExpression	cstr_len > nb		6130769	0		>			
ANR	6131156	Identifier	cstr_len		6130769	0					
ANR	6131157	Identifier	nb		6130769	1					
ANR	6131158	CompoundStatement		53:24:1360:1360	6130769	1					
ANR	6131159	ExpressionStatement	"tcc_warning ( ""initializer-string for array is too long"" )"	2614:6:59615:59671	6130769	0	True				
ANR	6131160	CallExpression	"tcc_warning ( ""initializer-string for array is too long"" )"		6130769	0					
ANR	6131161	Callee	tcc_warning		6130769	0					
ANR	6131162	Identifier	tcc_warning		6130769	0					
ANR	6131163	ArgumentList	"""initializer-string for array is too long"""		6130769	1					
ANR	6131164	Argument	"""initializer-string for array is too long"""		6130769	0					
ANR	6131165	PrimaryExpression	"""initializer-string for array is too long"""		6130769	0					
ANR	6131166	ForStatement	for ( i = 0 ; i < nb ; i ++ )		6130769	1					
ANR	6131167	ForInit	i = 0 ;	2619:10:59814:59819	6130769	0	True				
ANR	6131168	AssignmentExpression	i = 0		6130769	0		=			
ANR	6131169	Identifier	i		6130769	0					
ANR	6131170	PrimaryExpression	0		6130769	1					
ANR	6131171	Condition	i < nb	2619:17:59821:59826	6130769	1	True				
ANR	6131172	RelationalExpression	i < nb		6130769	0		<			
ANR	6131173	Identifier	i		6130769	0					
ANR	6131174	Identifier	nb		6130769	1					
ANR	6131175	PostIncDecOperationExpression	i ++	2619:25:59829:59831	6130769	2	True				
ANR	6131176	Identifier	i		6130769	0					
ANR	6131177	IncDec	++		6130769	1					
ANR	6131178	CompoundStatement		59:30:1587:1587	6130769	3					
ANR	6131179	IfStatement	if ( tok == TOK_STR )		6130769	0					
ANR	6131180	Condition	tok == TOK_STR	2620:10:59846:59859	6130769	0	True				
ANR	6131181	EqualityExpression	tok == TOK_STR		6130769	0		==			
ANR	6131182	Identifier	tok		6130769	0					
ANR	6131183	Identifier	TOK_STR		6130769	1					
ANR	6131184	CompoundStatement		60:26:1615:1615	6130769	1					
ANR	6131185	ExpressionStatement	ch = ( ( unsigned char * ) cstr -> data ) [ i ]	2621:7:59871:59909	6130769	0	True				
ANR	6131186	AssignmentExpression	ch = ( ( unsigned char * ) cstr -> data ) [ i ]		6130769	0		=			
ANR	6131187	Identifier	ch		6130769	0					
ANR	6131188	ArrayIndexing	( ( unsigned char * ) cstr -> data ) [ i ]		6130769	1					
ANR	6131189	CastExpression	( unsigned char * ) cstr -> data		6130769	0					
ANR	6131190	CastTarget	unsigned char *		6130769	0					
ANR	6131191	PtrMemberAccess	cstr -> data		6130769	1					
ANR	6131192	Identifier	cstr		6130769	0					
ANR	6131193	Identifier	data		6130769	1					
ANR	6131194	Identifier	i		6130769	1					
ANR	6131195	ElseStatement	else		6130769	0					
ANR	6131196	CompoundStatement		62:13:1677:1677	6130769	0					
ANR	6131197	ExpressionStatement	ch = ( ( nwchar_t * ) cstr -> data ) [ i ]	2623:7:59933:59966	6130769	0	True				
ANR	6131198	AssignmentExpression	ch = ( ( nwchar_t * ) cstr -> data ) [ i ]		6130769	0		=			
ANR	6131199	Identifier	ch		6130769	0					
ANR	6131200	ArrayIndexing	( ( nwchar_t * ) cstr -> data ) [ i ]		6130769	1					
ANR	6131201	CastExpression	( nwchar_t * ) cstr -> data		6130769	0					
ANR	6131202	CastTarget	nwchar_t *		6130769	0					
ANR	6131203	PtrMemberAccess	cstr -> data		6130769	1					
ANR	6131204	Identifier	cstr		6130769	0					
ANR	6131205	Identifier	data		6130769	1					
ANR	6131206	Identifier	i		6130769	1					
ANR	6131207	ExpressionStatement	"init_putv ( t1 , c + ( array_length + i ) * size1 , ch , EXPR_VAL )"	2625:6:59982:60049	6130769	1	True				
ANR	6131208	CallExpression	"init_putv ( t1 , c + ( array_length + i ) * size1 , ch , EXPR_VAL )"		6130769	0					
ANR	6131209	Callee	init_putv		6130769	0					
ANR	6131210	Identifier	init_putv		6130769	0					
ANR	6131211	ArgumentList	t1		6130769	1					
ANR	6131212	Argument	t1		6130769	0					
ANR	6131213	Identifier	t1		6130769	0					
ANR	6131214	Argument	c + ( array_length + i ) * size1		6130769	1					
ANR	6131215	AdditiveExpression	c + ( array_length + i ) * size1		6130769	0		+			
ANR	6131216	Identifier	c		6130769	0					
ANR	6131217	MultiplicativeExpression	( array_length + i ) * size1		6130769	1		*			
ANR	6131218	AdditiveExpression	array_length + i		6130769	0		+			
ANR	6131219	Identifier	array_length		6130769	0					
ANR	6131220	Identifier	i		6130769	1					
ANR	6131221	Identifier	size1		6130769	1					
ANR	6131222	Argument	ch		6130769	2					
ANR	6131223	Identifier	ch		6130769	0					
ANR	6131224	Argument	EXPR_VAL		6130769	3					
ANR	6131225	Identifier	EXPR_VAL		6130769	0					
ANR	6131226	ExpressionStatement	array_length += nb	2629:4:60068:60086	6130769	8	True				
ANR	6131227	AssignmentExpression	array_length += nb		6130769	0		+=			
ANR	6131228	Identifier	array_length		6130769	0					
ANR	6131229	Identifier	nb		6130769	1					
ANR	6131230	ExpressionStatement	next ( )	2630:4:60092:60099	6130769	9	True				
ANR	6131231	CallExpression	next ( )		6130769	0					
ANR	6131232	Callee	next		6130769	0					
ANR	6131233	Identifier	next		6130769	0					
ANR	6131234	ArgumentList			6130769	1					
ANR	6131235	IfStatement	if ( n < 0 || array_length < n )		6130769	1					
ANR	6131236	Condition	n < 0 || array_length < n	2634:7:60216:60240	6130769	0	True				
ANR	6131237	OrExpression	n < 0 || array_length < n		6130769	0		||			
ANR	6131238	RelationalExpression	n < 0		6130769	0		<			
ANR	6131239	Identifier	n		6130769	0					
ANR	6131240	PrimaryExpression	0		6130769	1					
ANR	6131241	RelationalExpression	array_length < n		6130769	1		<			
ANR	6131242	Identifier	array_length		6130769	0					
ANR	6131243	Identifier	n		6130769	1					
ANR	6131244	CompoundStatement		74:34:1996:1996	6130769	1					
ANR	6131245	IfStatement	if ( ! size_only )		6130769	0					
ANR	6131246	Condition	! size_only	2635:8:60253:60262	6130769	0	True				
ANR	6131247	UnaryOperationExpression	! size_only		6130769	0					
ANR	6131248	UnaryOperator	!		6130769	0					
ANR	6131249	Identifier	size_only		6130769	1					
ANR	6131250	CompoundStatement		75:20:2018:2018	6130769	1					
ANR	6131251	ExpressionStatement	"init_putv ( t1 , c + ( array_length * size1 ) , 0 , EXPR_VAL )"	2636:5:60272:60327	6130769	0	True				
ANR	6131252	CallExpression	"init_putv ( t1 , c + ( array_length * size1 ) , 0 , EXPR_VAL )"		6130769	0					
ANR	6131253	Callee	init_putv		6130769	0					
ANR	6131254	Identifier	init_putv		6130769	0					
ANR	6131255	ArgumentList	t1		6130769	1					
ANR	6131256	Argument	t1		6130769	0					
ANR	6131257	Identifier	t1		6130769	0					
ANR	6131258	Argument	c + ( array_length * size1 )		6130769	1					
ANR	6131259	AdditiveExpression	c + ( array_length * size1 )		6130769	0		+			
ANR	6131260	Identifier	c		6130769	0					
ANR	6131261	MultiplicativeExpression	array_length * size1		6130769	1		*			
ANR	6131262	Identifier	array_length		6130769	0					
ANR	6131263	Identifier	size1		6130769	1					
ANR	6131264	Argument	0		6130769	2					
ANR	6131265	PrimaryExpression	0		6130769	0					
ANR	6131266	Argument	EXPR_VAL		6130769	3					
ANR	6131267	Identifier	EXPR_VAL		6130769	0					
ANR	6131268	ExpressionStatement	array_length ++	2638:4:60339:60353	6130769	1	True				
ANR	6131269	PostIncDecOperationExpression	array_length ++		6130769	0					
ANR	6131270	Identifier	array_length		6130769	0					
ANR	6131271	IncDec	++		6130769	1					
ANR	6131272	IfStatement	if ( ! no_oblock )		6130769	50					
ANR	6131273	Condition	! no_oblock	2669:6:61127:61136	6130769	0	True				
ANR	6131274	UnaryOperationExpression	! no_oblock		6130769	0					
ANR	6131275	UnaryOperator	!		6130769	0					
ANR	6131276	Identifier	no_oblock		6130769	1					
ANR	6131277	CompoundStatement		109:18:2892:2892	6130769	1					
ANR	6131278	ExpressionStatement	skip ( '}' )	2670:3:61144:61154	6130769	0	True				
ANR	6131279	CallExpression	skip ( '}' )		6130769	0					
ANR	6131280	Callee	skip		6130769	0					
ANR	6131281	Identifier	skip		6130769	0					
ANR	6131282	ArgumentList	'}'		6130769	1					
ANR	6131283	Argument	'}'		6130769	0					
ANR	6131284	PrimaryExpression	'}'		6130769	0					
ANR	6131285	IfStatement	if ( ! size_only && n >= 0 && array_length < n )		6130769	51					
ANR	6131286	Condition	! size_only && n >= 0 && array_length < n	2673:6:61195:61234	6130769	0	True				
ANR	6131287	AndExpression	! size_only && n >= 0 && array_length < n		6130769	0		&&			
ANR	6131288	UnaryOperationExpression	! size_only		6130769	0					
ANR	6131289	UnaryOperator	!		6130769	0					
ANR	6131290	Identifier	size_only		6130769	1					
ANR	6131291	AndExpression	n >= 0 && array_length < n		6130769	1		&&			
ANR	6131292	RelationalExpression	n >= 0		6130769	0		>=			
ANR	6131293	Identifier	n		6130769	0					
ANR	6131294	PrimaryExpression	0		6130769	1					
ANR	6131295	RelationalExpression	array_length < n		6130769	1		<			
ANR	6131296	Identifier	array_length		6130769	0					
ANR	6131297	Identifier	n		6130769	1					
ANR	6131298	CompoundStatement		113:48:2990:2990	6130769	1					
ANR	6131299	ExpressionStatement	"init_putz ( t1 , c + array_length * size1 , ( n - array_length ) * size1 )"	2674:3:61242:61314	6130769	0	True				
ANR	6131300	CallExpression	"init_putz ( t1 , c + array_length * size1 , ( n - array_length ) * size1 )"		6130769	0					
ANR	6131301	Callee	init_putz		6130769	0					
ANR	6131302	Identifier	init_putz		6130769	0					
ANR	6131303	ArgumentList	t1		6130769	1					
ANR	6131304	Argument	t1		6130769	0					
ANR	6131305	Identifier	t1		6130769	0					
ANR	6131306	Argument	c + array_length * size1		6130769	1					
ANR	6131307	AdditiveExpression	c + array_length * size1		6130769	0		+			
ANR	6131308	Identifier	c		6130769	0					
ANR	6131309	MultiplicativeExpression	array_length * size1		6130769	1		*			
ANR	6131310	Identifier	array_length		6130769	0					
ANR	6131311	Identifier	size1		6130769	1					
ANR	6131312	Argument	( n - array_length ) * size1		6130769	2					
ANR	6131313	MultiplicativeExpression	( n - array_length ) * size1		6130769	0		*			
ANR	6131314	AdditiveExpression	n - array_length		6130769	0		-			
ANR	6131315	Identifier	n		6130769	0					
ANR	6131316	Identifier	array_length		6130769	1					
ANR	6131317	Identifier	size1		6130769	1					
ANR	6131318	IfStatement	if ( n < 0 )		6130769	52					
ANR	6131319	Condition	n < 0	2678:6:61360:61364	6130769	0	True				
ANR	6131320	RelationalExpression	n < 0		6130769	0		<			
ANR	6131321	Identifier	n		6130769	0					
ANR	6131322	PrimaryExpression	0		6130769	1					
ANR	6131323	CompoundStatement		118:13:3120:3120	6130769	1					
ANR	6131324	ExpressionStatement	s -> c = array_length	2679:3:61372:61391	6130769	0	True				
ANR	6131325	AssignmentExpression	s -> c = array_length		6130769	0		=			
ANR	6131326	PtrMemberAccess	s -> c		6130769	0					
ANR	6131327	Identifier	s		6130769	0					
ANR	6131328	Identifier	c		6130769	1					
ANR	6131329	Identifier	array_length		6130769	1					
ANR	6131330	ElseStatement	else		6130769	0					
ANR	6131331	IfStatement	if ( is_structured ( type ) && ( ! first || tok == '{' ) )		6130769	0					
ANR	6131332	Condition	is_structured ( type ) && ( ! first || tok == '{' )	2681:12:61409:61453	6130769	0	True				
ANR	6131333	AndExpression	is_structured ( type ) && ( ! first || tok == '{' )		6130769	0		&&			
ANR	6131334	CallExpression	is_structured ( type )		6130769	0					
ANR	6131335	Callee	is_structured		6130769	0					
ANR	6131336	Identifier	is_structured		6130769	0					
ANR	6131337	ArgumentList	type		6130769	1					
ANR	6131338	Argument	type		6130769	0					
ANR	6131339	Identifier	type		6130769	0					
ANR	6131340	OrExpression	! first || tok == '{'		6130769	1		||			
ANR	6131341	UnaryOperationExpression	! first		6130769	0					
ANR	6131342	UnaryOperator	!		6130769	0					
ANR	6131343	Identifier	first		6130769	1					
ANR	6131344	EqualityExpression	tok == '{'		6130769	1		==			
ANR	6131345	Identifier	tok		6130769	0					
ANR	6131346	PrimaryExpression	'{'		6130769	1					
ANR	6131347	CompoundStatement		122:2:3213:3226	6130769	1					
ANR	6131348	IdentifierDeclStatement	int par_count ;	2682:2:61460:61473	6130769	0	True				
ANR	6131349	IdentifierDecl	par_count		6130769	0					
ANR	6131350	IdentifierDeclType	int		6130769	0					
ANR	6131351	Identifier	par_count		6130769	1					
ANR	6131352	ExpressionStatement	par_count = 0	2692:2:61820:61833	6130769	1	True				
ANR	6131353	AssignmentExpression	par_count = 0		6130769	0		=			
ANR	6131354	Identifier	par_count		6130769	0					
ANR	6131355	PrimaryExpression	0		6130769	1					
ANR	6131356	IfStatement	if ( tok == '(' )		6130769	2					
ANR	6131357	Condition	tok == '('	2693:6:61841:61850	6130769	0	True				
ANR	6131358	EqualityExpression	tok == '('		6130769	0		==			
ANR	6131359	Identifier	tok		6130769	0					
ANR	6131360	PrimaryExpression	'('		6130769	1					
ANR	6131361	CompoundStatement		134:3:3611:3627	6130769	1					
ANR	6131362	IdentifierDeclStatement	AttributeDef ad1 ;	2694:3:61858:61874	6130769	0	True				
ANR	6131363	IdentifierDecl	ad1		6130769	0					
ANR	6131364	IdentifierDeclType	AttributeDef		6130769	0					
ANR	6131365	Identifier	ad1		6130769	1					
ANR	6131366	ExpressionStatement	"STACK_NEW0 ( CType , type1 )"	2695:3:61879:61904	6130769	1	True				
ANR	6131367	CallExpression	"STACK_NEW0 ( CType , type1 )"		6130769	0					
ANR	6131368	Callee	STACK_NEW0		6130769	0					
ANR	6131369	Identifier	STACK_NEW0		6130769	0					
ANR	6131370	ArgumentList	CType		6130769	1					
ANR	6131371	Argument	CType		6130769	0					
ANR	6131372	Identifier	CType		6130769	0					
ANR	6131373	Argument	type1		6130769	1					
ANR	6131374	Identifier	type1		6130769	0					
ANR	6131375	ExpressionStatement	next ( )	2696:3:61909:61916	6130769	2	True				
ANR	6131376	CallExpression	next ( )		6130769	0					
ANR	6131377	Callee	next		6130769	0					
ANR	6131378	Identifier	next		6130769	0					
ANR	6131379	ArgumentList			6130769	1					
ANR	6131380	WhileStatement	while ( tok == '(' )		6130769	3					
ANR	6131381	Condition	tok == '('	2697:10:61928:61937	6130769	0	True				
ANR	6131382	EqualityExpression	tok == '('		6130769	0		==			
ANR	6131383	Identifier	tok		6130769	0					
ANR	6131384	PrimaryExpression	'('		6130769	1					
ANR	6131385	CompoundStatement		137:22:3693:3693	6130769	1					
ANR	6131386	ExpressionStatement	par_count ++	2698:4:61946:61957	6130769	0	True				
ANR	6131387	PostIncDecOperationExpression	par_count ++		6130769	0					
ANR	6131388	Identifier	par_count		6130769	0					
ANR	6131389	IncDec	++		6130769	1					
ANR	6131390	ExpressionStatement	next ( )	2699:4:61963:61970	6130769	1	True				
ANR	6131391	CallExpression	next ( )		6130769	0					
ANR	6131392	Callee	next		6130769	0					
ANR	6131393	Identifier	next		6130769	0					
ANR	6131394	ArgumentList			6130769	1					
ANR	6131395	IfStatement	"if ( ! parse_btype ( & type1 , & ad1 ) )"		6130769	4					
ANR	6131396	Condition	"! parse_btype ( & type1 , & ad1 )"	2701:7:61984:62010	6130769	0	True				
ANR	6131397	UnaryOperationExpression	"! parse_btype ( & type1 , & ad1 )"		6130769	0					
ANR	6131398	UnaryOperator	!		6130769	0					
ANR	6131399	CallExpression	"parse_btype ( & type1 , & ad1 )"		6130769	1					
ANR	6131400	Callee	parse_btype		6130769	0					
ANR	6131401	Identifier	parse_btype		6130769	0					
ANR	6131402	ArgumentList	& type1		6130769	1					
ANR	6131403	Argument	& type1		6130769	0					
ANR	6131404	UnaryOperationExpression	& type1		6130769	0					
ANR	6131405	UnaryOperator	&		6130769	0					
ANR	6131406	Identifier	type1		6130769	1					
ANR	6131407	Argument	& ad1		6130769	1					
ANR	6131408	UnaryOperationExpression	& ad1		6130769	0					
ANR	6131409	UnaryOperator	&		6130769	0					
ANR	6131410	Identifier	ad1		6130769	1					
ANR	6131411	CompoundStatement		141:36:3766:3766	6130769	1					
ANR	6131412	ExpressionStatement	"expect ( ""cast"" )"	2702:4:62019:62034	6130769	0	True				
ANR	6131413	CallExpression	"expect ( ""cast"" )"		6130769	0					
ANR	6131414	Callee	expect		6130769	0					
ANR	6131415	Identifier	expect		6130769	0					
ANR	6131416	ArgumentList	"""cast"""		6130769	1					
ANR	6131417	Argument	"""cast"""		6130769	0					
ANR	6131418	PrimaryExpression	"""cast"""		6130769	0					
ANR	6131419	ExpressionStatement	"type_decl ( & type1 , & ad1 , & n , TYPE_ABSTRACT )"	2704:3:62044:62087	6130769	5	True				
ANR	6131420	CallExpression	"type_decl ( & type1 , & ad1 , & n , TYPE_ABSTRACT )"		6130769	0					
ANR	6131421	Callee	type_decl		6130769	0					
ANR	6131422	Identifier	type_decl		6130769	0					
ANR	6131423	ArgumentList	& type1		6130769	1					
ANR	6131424	Argument	& type1		6130769	0					
ANR	6131425	UnaryOperationExpression	& type1		6130769	0					
ANR	6131426	UnaryOperator	&		6130769	0					
ANR	6131427	Identifier	type1		6130769	1					
ANR	6131428	Argument	& ad1		6130769	1					
ANR	6131429	UnaryOperationExpression	& ad1		6130769	0					
ANR	6131430	UnaryOperator	&		6130769	0					
ANR	6131431	Identifier	ad1		6130769	1					
ANR	6131432	Argument	& n		6130769	2					
ANR	6131433	UnaryOperationExpression	& n		6130769	0					
ANR	6131434	UnaryOperator	&		6130769	0					
ANR	6131435	Identifier	n		6130769	1					
ANR	6131436	Argument	TYPE_ABSTRACT		6130769	3					
ANR	6131437	Identifier	TYPE_ABSTRACT		6130769	0					
ANR	6131438	IfStatement	"if ( ! is_assignable_types ( type , & type1 ) )"		6130769	6					
ANR	6131439	Condition	"! is_assignable_types ( type , & type1 )"	2706:7:62102:62136	6130769	0	True				
ANR	6131440	UnaryOperationExpression	"! is_assignable_types ( type , & type1 )"		6130769	0					
ANR	6131441	UnaryOperator	!		6130769	0					
ANR	6131442	CallExpression	"is_assignable_types ( type , & type1 )"		6130769	1					
ANR	6131443	Callee	is_assignable_types		6130769	0					
ANR	6131444	Identifier	is_assignable_types		6130769	0					
ANR	6131445	ArgumentList	type		6130769	1					
ANR	6131446	Argument	type		6130769	0					
ANR	6131447	Identifier	type		6130769	0					
ANR	6131448	Argument	& type1		6130769	1					
ANR	6131449	UnaryOperationExpression	& type1		6130769	0					
ANR	6131450	UnaryOperator	&		6130769	0					
ANR	6131451	Identifier	type1		6130769	1					
ANR	6131452	CompoundStatement		146:44:3892:3892	6130769	1					
ANR	6131453	ExpressionStatement	"tcc_error ( ""invalid type for cast"" )"	2707:4:62145:62180	6130769	0	True				
ANR	6131454	CallExpression	"tcc_error ( ""invalid type for cast"" )"		6130769	0					
ANR	6131455	Callee	tcc_error		6130769	0					
ANR	6131456	Identifier	tcc_error		6130769	0					
ANR	6131457	ArgumentList	"""invalid type for cast"""		6130769	1					
ANR	6131458	Argument	"""invalid type for cast"""		6130769	0					
ANR	6131459	PrimaryExpression	"""invalid type for cast"""		6130769	0					
ANR	6131460	ExpressionStatement	skip ( ')' )	2710:3:62197:62207	6130769	7	True				
ANR	6131461	CallExpression	skip ( ')' )		6130769	0					
ANR	6131462	Callee	skip		6130769	0					
ANR	6131463	Identifier	skip		6130769	0					
ANR	6131464	ArgumentList	')'		6130769	1					
ANR	6131465	Argument	')'		6130769	0					
ANR	6131466	PrimaryExpression	')'		6130769	0					
ANR	6131467	ExpressionStatement	no_oblock = 1	2712:2:62215:62228	6130769	3	True				
ANR	6131468	AssignmentExpression	no_oblock = 1		6130769	0		=			
ANR	6131469	Identifier	no_oblock		6130769	0					
ANR	6131470	PrimaryExpression	1		6130769	1					
ANR	6131471	IfStatement	if ( first || tok == '{' )		6130769	4					
ANR	6131472	Condition	first || tok == '{'	2713:6:62236:62254	6130769	0	True				
ANR	6131473	OrExpression	first || tok == '{'		6130769	0		||			
ANR	6131474	Identifier	first		6130769	0					
ANR	6131475	EqualityExpression	tok == '{'		6130769	1		==			
ANR	6131476	Identifier	tok		6130769	0					
ANR	6131477	PrimaryExpression	'{'		6130769	1					
ANR	6131478	CompoundStatement		153:27:4010:4010	6130769	1					
ANR	6131479	ExpressionStatement	skip ( '{' )	2714:3:62262:62272	6130769	0	True				
ANR	6131480	CallExpression	skip ( '{' )		6130769	0					
ANR	6131481	Callee	skip		6130769	0					
ANR	6131482	Identifier	skip		6130769	0					
ANR	6131483	ArgumentList	'{'		6130769	1					
ANR	6131484	Argument	'{'		6130769	0					
ANR	6131485	PrimaryExpression	'{'		6130769	0					
ANR	6131486	ExpressionStatement	no_oblock = 0	2715:3:62277:62290	6130769	1	True				
ANR	6131487	AssignmentExpression	no_oblock = 0		6130769	0		=			
ANR	6131488	Identifier	no_oblock		6130769	0					
ANR	6131489	PrimaryExpression	0		6130769	1					
ANR	6131490	ExpressionStatement	s = type -> ref	2717:2:62298:62311	6130769	5	True				
ANR	6131491	AssignmentExpression	s = type -> ref		6130769	0		=			
ANR	6131492	Identifier	s		6130769	0					
ANR	6131493	PtrMemberAccess	type -> ref		6130769	1					
ANR	6131494	Identifier	type		6130769	0					
ANR	6131495	Identifier	ref		6130769	1					
ANR	6131496	ExpressionStatement	f = s -> next	2718:2:62315:62326	6130769	6	True				
ANR	6131497	AssignmentExpression	f = s -> next		6130769	0		=			
ANR	6131498	Identifier	f		6130769	0					
ANR	6131499	PtrMemberAccess	s -> next		6130769	1					
ANR	6131500	Identifier	s		6130769	0					
ANR	6131501	Identifier	next		6130769	1					
ANR	6131502	ExpressionStatement	array_length = 0	2719:2:62330:62346	6130769	7	True				
ANR	6131503	AssignmentExpression	array_length = 0		6130769	0		=			
ANR	6131504	Identifier	array_length		6130769	0					
ANR	6131505	PrimaryExpression	0		6130769	1					
ANR	6131506	ExpressionStatement	index = 0	2720:2:62350:62359	6130769	8	True				
ANR	6131507	AssignmentExpression	index = 0		6130769	0		=			
ANR	6131508	Identifier	index		6130769	0					
ANR	6131509	PrimaryExpression	0		6130769	1					
ANR	6131510	ExpressionStatement	n = s -> c	2721:2:62363:62371	6130769	9	True				
ANR	6131511	AssignmentExpression	n = s -> c		6130769	0		=			
ANR	6131512	Identifier	n		6130769	0					
ANR	6131513	PtrMemberAccess	s -> c		6130769	1					
ANR	6131514	Identifier	s		6130769	0					
ANR	6131515	Identifier	c		6130769	1					
ANR	6131516	WhileStatement	while ( tok != '}' )		6130769	10					
ANR	6131517	Condition	tok != '}'	2722:9:62382:62391	6130769	0	True				
ANR	6131518	EqualityExpression	tok != '}'		6130769	0		!=			
ANR	6131519	Identifier	tok		6130769	0					
ANR	6131520	PrimaryExpression	'}'		6130769	1					
ANR	6131521	CompoundStatement		162:21:4147:4147	6130769	1					
ANR	6131522	ExpressionStatement	"decl_designator ( type , c , NULL , & f , size_only )"	2723:3:62399:62445	6130769	0	True				
ANR	6131523	CallExpression	"decl_designator ( type , c , NULL , & f , size_only )"		6130769	0					
ANR	6131524	Callee	decl_designator		6130769	0					
ANR	6131525	Identifier	decl_designator		6130769	0					
ANR	6131526	ArgumentList	type		6130769	1					
ANR	6131527	Argument	type		6130769	0					
ANR	6131528	Identifier	type		6130769	0					
ANR	6131529	Argument	c		6130769	1					
ANR	6131530	Identifier	c		6130769	0					
ANR	6131531	Argument	NULL		6130769	2					
ANR	6131532	Identifier	NULL		6130769	0					
ANR	6131533	Argument	& f		6130769	3					
ANR	6131534	UnaryOperationExpression	& f		6130769	0					
ANR	6131535	UnaryOperator	&		6130769	0					
ANR	6131536	Identifier	f		6130769	1					
ANR	6131537	Argument	size_only		6130769	4					
ANR	6131538	Identifier	size_only		6130769	0					
ANR	6131539	ExpressionStatement	index = f -> c	2724:3:62450:62462	6130769	1	True				
ANR	6131540	AssignmentExpression	index = f -> c		6130769	0		=			
ANR	6131541	Identifier	index		6130769	0					
ANR	6131542	PtrMemberAccess	f -> c		6130769	1					
ANR	6131543	Identifier	f		6130769	0					
ANR	6131544	Identifier	c		6130769	1					
ANR	6131545	IfStatement	if ( ! size_only && array_length < index )		6130769	2					
ANR	6131546	Condition	! size_only && array_length < index	2725:7:62471:62504	6130769	0	True				
ANR	6131547	AndExpression	! size_only && array_length < index		6130769	0		&&			
ANR	6131548	UnaryOperationExpression	! size_only		6130769	0					
ANR	6131549	UnaryOperator	!		6130769	0					
ANR	6131550	Identifier	size_only		6130769	1					
ANR	6131551	RelationalExpression	array_length < index		6130769	1		<			
ANR	6131552	Identifier	array_length		6130769	0					
ANR	6131553	Identifier	index		6130769	1					
ANR	6131554	CompoundStatement		165:43:4260:4260	6130769	1					
ANR	6131555	ExpressionStatement	"init_putz ( type , c + array_length , index - array_length )"	2726:4:62513:62574	6130769	0	True				
ANR	6131556	CallExpression	"init_putz ( type , c + array_length , index - array_length )"		6130769	0					
ANR	6131557	Callee	init_putz		6130769	0					
ANR	6131558	Identifier	init_putz		6130769	0					
ANR	6131559	ArgumentList	type		6130769	1					
ANR	6131560	Argument	type		6130769	0					
ANR	6131561	Identifier	type		6130769	0					
ANR	6131562	Argument	c + array_length		6130769	1					
ANR	6131563	AdditiveExpression	c + array_length		6130769	0		+			
ANR	6131564	Identifier	c		6130769	0					
ANR	6131565	Identifier	array_length		6130769	1					
ANR	6131566	Argument	index - array_length		6130769	2					
ANR	6131567	AdditiveExpression	index - array_length		6130769	0		-			
ANR	6131568	Identifier	index		6130769	0					
ANR	6131569	Identifier	array_length		6130769	1					
ANR	6131570	ExpressionStatement	"index = index + type_size ( & f -> type , & align1 )"	2729:3:62584:62629	6130769	3	True				
ANR	6131571	AssignmentExpression	"index = index + type_size ( & f -> type , & align1 )"		6130769	0		=			
ANR	6131572	Identifier	index		6130769	0					
ANR	6131573	AdditiveExpression	"index + type_size ( & f -> type , & align1 )"		6130769	1		+			
ANR	6131574	Identifier	index		6130769	0					
ANR	6131575	CallExpression	"type_size ( & f -> type , & align1 )"		6130769	1					
ANR	6131576	Callee	type_size		6130769	0					
ANR	6131577	Identifier	type_size		6130769	0					
ANR	6131578	ArgumentList	& f -> type		6130769	1					
ANR	6131579	Argument	& f -> type		6130769	0					
ANR	6131580	UnaryOperationExpression	& f -> type		6130769	0					
ANR	6131581	UnaryOperator	&		6130769	0					
ANR	6131582	PtrMemberAccess	f -> type		6130769	1					
ANR	6131583	Identifier	f		6130769	0					
ANR	6131584	Identifier	type		6130769	1					
ANR	6131585	Argument	& align1		6130769	1					
ANR	6131586	UnaryOperationExpression	& align1		6130769	0					
ANR	6131587	UnaryOperator	&		6130769	0					
ANR	6131588	Identifier	align1		6130769	1					
ANR	6131589	IfStatement	if ( index > array_length )		6130769	4					
ANR	6131590	Condition	index > array_length	2730:7:62638:62657	6130769	0	True				
ANR	6131591	RelationalExpression	index > array_length		6130769	0		>			
ANR	6131592	Identifier	index		6130769	0					
ANR	6131593	Identifier	array_length		6130769	1					
ANR	6131594	CompoundStatement		170:29:4413:4413	6130769	1					
ANR	6131595	ExpressionStatement	array_length = index	2731:4:62666:62686	6130769	0	True				
ANR	6131596	AssignmentExpression	array_length = index		6130769	0		=			
ANR	6131597	Identifier	array_length		6130769	0					
ANR	6131598	Identifier	index		6130769	1					
ANR	6131599	WhileStatement	while ( f -> next )		6130769	5					
ANR	6131600	Condition	f -> next	2735:10:62753:62759	6130769	0	True				
ANR	6131601	PtrMemberAccess	f -> next		6130769	0					
ANR	6131602	Identifier	f		6130769	0					
ANR	6131603	Identifier	next		6130769	1					
ANR	6131604	CompoundStatement		175:19:4515:4515	6130769	1					
ANR	6131605	IfStatement	if ( f -> next -> c != f -> c )		6130769	0					
ANR	6131606	Condition	f -> next -> c != f -> c	2738:8:62897:62914	6130769	0	True				
ANR	6131607	EqualityExpression	f -> next -> c != f -> c		6130769	0		!=			
ANR	6131608	PtrMemberAccess	f -> next -> c		6130769	0					
ANR	6131609	PtrMemberAccess	f -> next		6130769	0					
ANR	6131610	Identifier	f		6130769	0					
ANR	6131611	Identifier	next		6130769	1					
ANR	6131612	Identifier	c		6130769	1					
ANR	6131613	PtrMemberAccess	f -> c		6130769	1					
ANR	6131614	Identifier	f		6130769	0					
ANR	6131615	Identifier	c		6130769	1					
ANR	6131616	CompoundStatement		178:28:4670:4670	6130769	1					
ANR	6131617	BreakStatement	break ;	2739:5:62924:62929	6130769	0	True				
ANR	6131618	IfStatement	if ( ( f -> type . t & VT_BITFIELD ) && ( f -> next -> type . t & VT_BITFIELD ) )		6130769	1					
ANR	6131619	Condition	( f -> type . t & VT_BITFIELD ) && ( f -> next -> type . t & VT_BITFIELD )	2742:8:62987:63046	6130769	0	True				
ANR	6131620	AndExpression	( f -> type . t & VT_BITFIELD ) && ( f -> next -> type . t & VT_BITFIELD )		6130769	0		&&			
ANR	6131621	BitAndExpression	f -> type . t & VT_BITFIELD		6130769	0		&			
ANR	6131622	MemberAccess	f -> type . t		6130769	0					
ANR	6131623	PtrMemberAccess	f -> type		6130769	0					
ANR	6131624	Identifier	f		6130769	0					
ANR	6131625	Identifier	type		6130769	1					
ANR	6131626	Identifier	t		6130769	1					
ANR	6131627	Identifier	VT_BITFIELD		6130769	1					
ANR	6131628	BitAndExpression	f -> next -> type . t & VT_BITFIELD		6130769	1		&			
ANR	6131629	MemberAccess	f -> next -> type . t		6130769	0					
ANR	6131630	PtrMemberAccess	f -> next -> type		6130769	0					
ANR	6131631	PtrMemberAccess	f -> next		6130769	0					
ANR	6131632	Identifier	f		6130769	0					
ANR	6131633	Identifier	next		6130769	1					
ANR	6131634	Identifier	type		6130769	1					
ANR	6131635	Identifier	t		6130769	1					
ANR	6131636	Identifier	VT_BITFIELD		6130769	1					
ANR	6131637	CompoundStatement		184:5:4869:4928	6130769	1					
ANR	6131638	IdentifierDeclStatement	int bit_pos_1 = ( f -> type . t >> VT_STRUCT_SHIFT ) & 0x3f ;	2743:5:63056:63109	6130769	0	True				
ANR	6131639	IdentifierDecl	bit_pos_1 = ( f -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	0					
ANR	6131640	IdentifierDeclType	int		6130769	0					
ANR	6131641	Identifier	bit_pos_1		6130769	1					
ANR	6131642	AssignmentExpression	bit_pos_1 = ( f -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	2		=			
ANR	6131643	Identifier	bit_pos_1		6130769	0					
ANR	6131644	BitAndExpression	( f -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	1		&			
ANR	6131645	ShiftExpression	f -> type . t >> VT_STRUCT_SHIFT		6130769	0		>>			
ANR	6131646	MemberAccess	f -> type . t		6130769	0					
ANR	6131647	PtrMemberAccess	f -> type		6130769	0					
ANR	6131648	Identifier	f		6130769	0					
ANR	6131649	Identifier	type		6130769	1					
ANR	6131650	Identifier	t		6130769	1					
ANR	6131651	Identifier	VT_STRUCT_SHIFT		6130769	1					
ANR	6131652	PrimaryExpression	0x3f		6130769	1					
ANR	6131653	IdentifierDeclStatement	int bit_pos_2 = ( f -> next -> type . t >> VT_STRUCT_SHIFT ) & 0x3f ;	2744:5:63116:63175	6130769	1	True				
ANR	6131654	IdentifierDecl	bit_pos_2 = ( f -> next -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	0					
ANR	6131655	IdentifierDeclType	int		6130769	0					
ANR	6131656	Identifier	bit_pos_2		6130769	1					
ANR	6131657	AssignmentExpression	bit_pos_2 = ( f -> next -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	2		=			
ANR	6131658	Identifier	bit_pos_2		6130769	0					
ANR	6131659	BitAndExpression	( f -> next -> type . t >> VT_STRUCT_SHIFT ) & 0x3f		6130769	1		&			
ANR	6131660	ShiftExpression	f -> next -> type . t >> VT_STRUCT_SHIFT		6130769	0		>>			
ANR	6131661	MemberAccess	f -> next -> type . t		6130769	0					
ANR	6131662	PtrMemberAccess	f -> next -> type		6130769	0					
ANR	6131663	PtrMemberAccess	f -> next		6130769	0					
ANR	6131664	Identifier	f		6130769	0					
ANR	6131665	Identifier	next		6130769	1					
ANR	6131666	Identifier	type		6130769	1					
ANR	6131667	Identifier	t		6130769	1					
ANR	6131668	Identifier	VT_STRUCT_SHIFT		6130769	1					
ANR	6131669	PrimaryExpression	0x3f		6130769	1					
ANR	6131670	IfStatement	if ( bit_pos_1 != bit_pos_2 )		6130769	2					
ANR	6131671	Condition	bit_pos_1 != bit_pos_2	2746:9:63244:63265	6130769	0	True				
ANR	6131672	EqualityExpression	bit_pos_1 != bit_pos_2		6130769	0		!=			
ANR	6131673	Identifier	bit_pos_1		6130769	0					
ANR	6131674	Identifier	bit_pos_2		6130769	1					
ANR	6131675	CompoundStatement		186:33:5021:5021	6130769	1					
ANR	6131676	BreakStatement	break ;	2747:6:63276:63281	6130769	0	True				
ANR	6131677	ExpressionStatement	f = f -> next	2750:4:63300:63311	6130769	2	True				
ANR	6131678	AssignmentExpression	f = f -> next		6130769	0		=			
ANR	6131679	Identifier	f		6130769	0					
ANR	6131680	PtrMemberAccess	f -> next		6130769	1					
ANR	6131681	Identifier	f		6130769	0					
ANR	6131682	Identifier	next		6130769	1					
ANR	6131683	ExpressionStatement	f = f -> next	2753:3:63322:63333	6130769	6	True				
ANR	6131684	AssignmentExpression	f = f -> next		6130769	0		=			
ANR	6131685	Identifier	f		6130769	0					
ANR	6131686	PtrMemberAccess	f -> next		6130769	1					
ANR	6131687	Identifier	f		6130769	0					
ANR	6131688	Identifier	next		6130769	1					
ANR	6131689	IfStatement	if ( no_oblock && f == NULL )		6130769	7					
ANR	6131690	Condition	no_oblock && f == NULL	2754:7:63342:63363	6130769	0	True				
ANR	6131691	AndExpression	no_oblock && f == NULL		6130769	0		&&			
ANR	6131692	Identifier	no_oblock		6130769	0					
ANR	6131693	EqualityExpression	f == NULL		6130769	1		==			
ANR	6131694	Identifier	f		6130769	0					
ANR	6131695	Identifier	NULL		6130769	1					
ANR	6131696	CompoundStatement		194:31:5119:5119	6130769	1					
ANR	6131697	BreakStatement	break ;	2755:4:63372:63377	6130769	0	True				
ANR	6131698	IfStatement	if ( tok == '}' )		6130769	8					
ANR	6131699	Condition	tok == '}'	2757:7:63391:63400	6130769	0	True				
ANR	6131700	EqualityExpression	tok == '}'		6130769	0		==			
ANR	6131701	Identifier	tok		6130769	0					
ANR	6131702	PrimaryExpression	'}'		6130769	1					
ANR	6131703	CompoundStatement		197:19:5156:5156	6130769	1					
ANR	6131704	BreakStatement	break ;	2758:4:63409:63414	6130769	0	True				
ANR	6131705	ExpressionStatement	"skip ( ',' )"	2760:3:63424:63434	6130769	9	True				
ANR	6131706	CallExpression	"skip ( ',' )"		6130769	0					
ANR	6131707	Callee	skip		6130769	0					
ANR	6131708	Identifier	skip		6130769	0					
ANR	6131709	ArgumentList	"','"		6130769	1					
ANR	6131710	Argument	"','"		6130769	0					
ANR	6131711	PrimaryExpression	"','"		6130769	0					
ANR	6131712	IfStatement	if ( ! size_only && array_length < n )		6130769	11					
ANR	6131713	Condition	! size_only && array_length < n	2763:6:63475:63504	6130769	0	True				
ANR	6131714	AndExpression	! size_only && array_length < n		6130769	0		&&			
ANR	6131715	UnaryOperationExpression	! size_only		6130769	0					
ANR	6131716	UnaryOperator	!		6130769	0					
ANR	6131717	Identifier	size_only		6130769	1					
ANR	6131718	RelationalExpression	array_length < n		6130769	1		<			
ANR	6131719	Identifier	array_length		6130769	0					
ANR	6131720	Identifier	n		6130769	1					
ANR	6131721	CompoundStatement		203:38:5260:5260	6130769	1					
ANR	6131722	ExpressionStatement	"init_putz ( type , c + array_length , n - array_length )"	2764:3:63512:63568	6130769	0	True				
ANR	6131723	CallExpression	"init_putz ( type , c + array_length , n - array_length )"		6130769	0					
ANR	6131724	Callee	init_putz		6130769	0					
ANR	6131725	Identifier	init_putz		6130769	0					
ANR	6131726	ArgumentList	type		6130769	1					
ANR	6131727	Argument	type		6130769	0					
ANR	6131728	Identifier	type		6130769	0					
ANR	6131729	Argument	c + array_length		6130769	1					
ANR	6131730	AdditiveExpression	c + array_length		6130769	0		+			
ANR	6131731	Identifier	c		6130769	0					
ANR	6131732	Identifier	array_length		6130769	1					
ANR	6131733	Argument	n - array_length		6130769	2					
ANR	6131734	AdditiveExpression	n - array_length		6130769	0		-			
ANR	6131735	Identifier	n		6130769	0					
ANR	6131736	Identifier	array_length		6130769	1					
ANR	6131737	IfStatement	if ( ! no_oblock )		6130769	12					
ANR	6131738	Condition	! no_oblock	2767:6:63580:63589	6130769	0	True				
ANR	6131739	UnaryOperationExpression	! no_oblock		6130769	0					
ANR	6131740	UnaryOperator	!		6130769	0					
ANR	6131741	Identifier	no_oblock		6130769	1					
ANR	6131742	CompoundStatement		207:18:5345:5345	6130769	1					
ANR	6131743	ExpressionStatement	skip ( '}' )	2768:3:63597:63607	6130769	0	True				
ANR	6131744	CallExpression	skip ( '}' )		6130769	0					
ANR	6131745	Callee	skip		6130769	0					
ANR	6131746	Identifier	skip		6130769	0					
ANR	6131747	ArgumentList	'}'		6130769	1					
ANR	6131748	Argument	'}'		6130769	0					
ANR	6131749	PrimaryExpression	'}'		6130769	0					
ANR	6131750	WhileStatement	while ( par_count )		6130769	13					
ANR	6131751	Condition	par_count	2770:9:63622:63630	6130769	0	True				
ANR	6131752	Identifier	par_count		6130769	0					
ANR	6131753	CompoundStatement		210:20:5386:5386	6130769	1					
ANR	6131754	ExpressionStatement	skip ( ')' )	2771:3:63638:63648	6130769	0	True				
ANR	6131755	CallExpression	skip ( ')' )		6130769	0					
ANR	6131756	Callee	skip		6130769	0					
ANR	6131757	Identifier	skip		6130769	0					
ANR	6131758	ArgumentList	')'		6130769	1					
ANR	6131759	Argument	')'		6130769	0					
ANR	6131760	PrimaryExpression	')'		6130769	0					
ANR	6131761	ExpressionStatement	par_count --	2772:3:63653:63664	6130769	1	True				
ANR	6131762	PostIncDecOperationExpression	par_count --		6130769	0					
ANR	6131763	Identifier	par_count		6130769	0					
ANR	6131764	IncDec	--		6130769	1					
ANR	6131765	ElseStatement	else		6130769	0					
ANR	6131766	IfStatement	if ( tok == '{' )		6130769	0					
ANR	6131767	Condition	tok == '{'	2774:12:63682:63691	6130769	0	True				
ANR	6131768	EqualityExpression	tok == '{'		6130769	0		==			
ANR	6131769	Identifier	tok		6130769	0					
ANR	6131770	PrimaryExpression	'{'		6130769	1					
ANR	6131771	CompoundStatement		214:24:5447:5447	6130769	1					
ANR	6131772	ExpressionStatement	next ( )	2775:2:63698:63705	6130769	0	True				
ANR	6131773	CallExpression	next ( )		6130769	0					
ANR	6131774	Callee	next		6130769	0					
ANR	6131775	Identifier	next		6130769	0					
ANR	6131776	ArgumentList			6130769	1					
ANR	6131777	ExpressionStatement	"decl_initializer ( type , c , first , size_only )"	2776:2:63709:63753	6130769	1	True				
ANR	6131778	CallExpression	"decl_initializer ( type , c , first , size_only )"		6130769	0					
ANR	6131779	Callee	decl_initializer		6130769	0					
ANR	6131780	Identifier	decl_initializer		6130769	0					
ANR	6131781	ArgumentList	type		6130769	1					
ANR	6131782	Argument	type		6130769	0					
ANR	6131783	Identifier	type		6130769	0					
ANR	6131784	Argument	c		6130769	1					
ANR	6131785	Identifier	c		6130769	0					
ANR	6131786	Argument	first		6130769	2					
ANR	6131787	Identifier	first		6130769	0					
ANR	6131788	Argument	size_only		6130769	3					
ANR	6131789	Identifier	size_only		6130769	0					
ANR	6131790	ExpressionStatement	skip ( '}' )	2777:2:63757:63767	6130769	2	True				
ANR	6131791	CallExpression	skip ( '}' )		6130769	0					
ANR	6131792	Callee	skip		6130769	0					
ANR	6131793	Identifier	skip		6130769	0					
ANR	6131794	ArgumentList	'}'		6130769	1					
ANR	6131795	Argument	'}'		6130769	0					
ANR	6131796	PrimaryExpression	'}'		6130769	0					
ANR	6131797	ElseStatement	else		6130769	0					
ANR	6131798	IfStatement	if ( size_only )		6130769	0					
ANR	6131799	Condition	size_only	2778:12:63781:63789	6130769	0	True				
ANR	6131800	Identifier	size_only		6130769	0					
ANR	6131801	CompoundStatement		218:23:5545:5545	6130769	1					
ANR	6131802	ExpressionStatement	parlevel = parlevel1 = 0	2780:2:63825:63849	6130769	0	True				
ANR	6131803	AssignmentExpression	parlevel = parlevel1 = 0		6130769	0		=			
ANR	6131804	Identifier	parlevel		6130769	0					
ANR	6131805	AssignmentExpression	parlevel1 = 0		6130769	1		=			
ANR	6131806	Identifier	parlevel1		6130769	0					
ANR	6131807	PrimaryExpression	0		6130769	1					
ANR	6131808	WhileStatement	"while ( ( parlevel > 0 || parlevel1 > 0 || ( tok != '}' && tok != ',' ) ) && tok != - 1 )"		6130769	1					
ANR	6131809	Condition	"( parlevel > 0 || parlevel1 > 0 || ( tok != '}' && tok != ',' ) ) && tok != - 1"	2781:9:63860:63936	6130769	0	True				
ANR	6131810	AndExpression	"( parlevel > 0 || parlevel1 > 0 || ( tok != '}' && tok != ',' ) ) && tok != - 1"		6130769	0		&&			
ANR	6131811	OrExpression	"parlevel > 0 || parlevel1 > 0 || ( tok != '}' && tok != ',' )"		6130769	0		||			
ANR	6131812	RelationalExpression	parlevel > 0		6130769	0		>			
ANR	6131813	Identifier	parlevel		6130769	0					
ANR	6131814	PrimaryExpression	0		6130769	1					
ANR	6131815	OrExpression	"parlevel1 > 0 || ( tok != '}' && tok != ',' )"		6130769	1		||			
ANR	6131816	RelationalExpression	parlevel1 > 0		6130769	0		>			
ANR	6131817	Identifier	parlevel1		6130769	0					
ANR	6131818	PrimaryExpression	0		6130769	1					
ANR	6131819	AndExpression	"tok != '}' && tok != ','"		6130769	1		&&			
ANR	6131820	EqualityExpression	tok != '}'		6130769	0		!=			
ANR	6131821	Identifier	tok		6130769	0					
ANR	6131822	PrimaryExpression	'}'		6130769	1					
ANR	6131823	EqualityExpression	"tok != ','"		6130769	1		!=			
ANR	6131824	Identifier	tok		6130769	0					
ANR	6131825	PrimaryExpression	"','"		6130769	1					
ANR	6131826	EqualityExpression	tok != - 1		6130769	1		!=			
ANR	6131827	Identifier	tok		6130769	0					
ANR	6131828	UnaryOperationExpression	- 1		6130769	1					
ANR	6131829	UnaryOperator	-		6130769	0					
ANR	6131830	PrimaryExpression	1		6130769	1					
ANR	6131831	CompoundStatement		222:45:5692:5692	6130769	1					
ANR	6131832	IfStatement	if ( tok == '(' )		6130769	0					
ANR	6131833	Condition	tok == '('	2783:7:63948:63957	6130769	0	True				
ANR	6131834	EqualityExpression	tok == '('		6130769	0		==			
ANR	6131835	Identifier	tok		6130769	0					
ANR	6131836	PrimaryExpression	'('		6130769	1					
ANR	6131837	CompoundStatement		223:19:5713:5713	6130769	1					
ANR	6131838	ExpressionStatement	parlevel ++	2784:4:63966:63976	6130769	0	True				
ANR	6131839	PostIncDecOperationExpression	parlevel ++		6130769	0					
ANR	6131840	Identifier	parlevel		6130769	0					
ANR	6131841	IncDec	++		6130769	1					
ANR	6131842	ElseStatement	else		6130769	0					
ANR	6131843	IfStatement	if ( tok == ')' )		6130769	0					
ANR	6131844	Condition	tok == ')'	2785:14:63992:64001	6130769	0	True				
ANR	6131845	EqualityExpression	tok == ')'		6130769	0		==			
ANR	6131846	Identifier	tok		6130769	0					
ANR	6131847	PrimaryExpression	')'		6130769	1					
ANR	6131848	CompoundStatement		225:26:5757:5757	6130769	1					
ANR	6131849	ExpressionStatement	parlevel --	2786:4:64010:64020	6130769	0	True				
ANR	6131850	PostIncDecOperationExpression	parlevel --		6130769	0					
ANR	6131851	Identifier	parlevel		6130769	0					
ANR	6131852	IncDec	--		6130769	1					
ANR	6131853	ElseStatement	else		6130769	0					
ANR	6131854	IfStatement	if ( tok == '{' )		6130769	0					
ANR	6131855	Condition	tok == '{'	2787:14:64036:64045	6130769	0	True				
ANR	6131856	EqualityExpression	tok == '{'		6130769	0		==			
ANR	6131857	Identifier	tok		6130769	0					
ANR	6131858	PrimaryExpression	'{'		6130769	1					
ANR	6131859	CompoundStatement		227:26:5801:5801	6130769	1					
ANR	6131860	ExpressionStatement	parlevel1 ++	2788:4:64054:64065	6130769	0	True				
ANR	6131861	PostIncDecOperationExpression	parlevel1 ++		6130769	0					
ANR	6131862	Identifier	parlevel1		6130769	0					
ANR	6131863	IncDec	++		6130769	1					
ANR	6131864	ElseStatement	else		6130769	0					
ANR	6131865	IfStatement	if ( tok == '}' )		6130769	0					
ANR	6131866	Condition	tok == '}'	2789:14:64081:64090	6130769	0	True				
ANR	6131867	EqualityExpression	tok == '}'		6130769	0		==			
ANR	6131868	Identifier	tok		6130769	0					
ANR	6131869	PrimaryExpression	'}'		6130769	1					
ANR	6131870	CompoundStatement		229:26:5846:5846	6130769	1					
ANR	6131871	ExpressionStatement	parlevel1 --	2790:4:64099:64110	6130769	0	True				
ANR	6131872	PostIncDecOperationExpression	parlevel1 --		6130769	0					
ANR	6131873	Identifier	parlevel1		6130769	0					
ANR	6131874	IncDec	--		6130769	1					
ANR	6131875	ExpressionStatement	next ( )	2792:3:64120:64127	6130769	1	True				
ANR	6131876	CallExpression	next ( )		6130769	0					
ANR	6131877	Callee	next		6130769	0					
ANR	6131878	Identifier	next		6130769	0					
ANR	6131879	ArgumentList			6130769	1					
ANR	6131880	ElseStatement	else		6130769	0					
ANR	6131881	CompoundStatement		234:8:5894:5894	6130769	0					
ANR	6131882	ExpressionStatement	expr_type = EXPR_CONST	2797:2:64247:64269	6130769	0	True				
ANR	6131883	AssignmentExpression	expr_type = EXPR_CONST		6130769	0		=			
ANR	6131884	Identifier	expr_type		6130769	0					
ANR	6131885	Identifier	EXPR_CONST		6130769	1					
ANR	6131886	ExpressionStatement	"init_putv ( type , c , 0 , expr_type )"	2798:2:64273:64306	6130769	1	True				
ANR	6131887	CallExpression	"init_putv ( type , c , 0 , expr_type )"		6130769	0					
ANR	6131888	Callee	init_putv		6130769	0					
ANR	6131889	Identifier	init_putv		6130769	0					
ANR	6131890	ArgumentList	type		6130769	1					
ANR	6131891	Argument	type		6130769	0					
ANR	6131892	Identifier	type		6130769	0					
ANR	6131893	Argument	c		6130769	1					
ANR	6131894	Identifier	c		6130769	0					
ANR	6131895	Argument	0		6130769	2					
ANR	6131896	PrimaryExpression	0		6130769	0					
ANR	6131897	Argument	expr_type		6130769	3					
ANR	6131898	Identifier	expr_type		6130769	0					
ANR	6131899	ReturnType	static void		6130769	1					
ANR	6131900	Identifier	decl_initializer		6130769	2					
ANR	6131901	ParameterList	"CType * type , unsigned long c , int first , int size_only"		6130769	3					
ANR	6131902	Parameter	CType * type	2561:29:58190:58200	6130769	0	True				
ANR	6131903	ParameterType	CType *		6130769	0					
ANR	6131904	Identifier	type		6130769	1					
ANR	6131905	Parameter	unsigned long c	2561:42:58203:58217	6130769	1	True				
ANR	6131906	ParameterType	unsigned long		6130769	0					
ANR	6131907	Identifier	c		6130769	1					
ANR	6131908	Parameter	int first	2561:59:58220:58228	6130769	2	True				
ANR	6131909	ParameterType	int		6130769	0					
ANR	6131910	Identifier	first		6130769	1					
ANR	6131911	Parameter	int size_only	2561:70:58231:58243	6130769	3	True				
ANR	6131912	ParameterType	int		6130769	0					
ANR	6131913	Identifier	size_only		6130769	1					
ANR	6131914	CFGEntryNode	ENTRY		6130769		True				
ANR	6131915	CFGExitNode	EXIT		6130769		True				
ANR	6131916	Symbol	is_assignable_types		6130769						
ANR	6131917	Symbol	expr_type		6130769						
ANR	6131918	Symbol	f -> next -> type		6130769						
ANR	6131919	Symbol	* f -> next		6130769						
ANR	6131920	Symbol	cstr -> data		6130769						
ANR	6131921	Symbol	type		6130769						
ANR	6131922	Symbol	bit_pos_2		6130769						
ANR	6131923	Symbol	* * cstr		6130769						
ANR	6131924	Symbol	bit_pos_1		6130769						
ANR	6131925	Symbol	type_size		6130769						
ANR	6131926	Symbol	tokc . cstr		6130769						
ANR	6131927	Symbol	pointed_type		6130769						
ANR	6131928	Symbol	EXPR_CONST		6130769						
ANR	6131929	Symbol	& index		6130769						
ANR	6131930	Symbol	VT_STRUCT_SHIFT		6130769						
ANR	6131931	Symbol	parse_btype		6130769						
ANR	6131932	Symbol	cstr_len		6130769						
ANR	6131933	Symbol	NULL		6130769						
ANR	6131934	Symbol	TOK_STR		6130769						
ANR	6131935	Symbol	tokc		6130769						
ANR	6131936	Symbol	* * f		6130769						
ANR	6131937	Symbol	f -> type		6130769						
ANR	6131938	Symbol	index		6130769						
ANR	6131939	Symbol	type1		6130769						
ANR	6131940	Symbol	tcc_nerr		6130769						
ANR	6131941	Symbol	size_only		6130769						
ANR	6131942	Symbol	nb		6130769						
ANR	6131943	Symbol	VT_BITFIELD		6130769						
ANR	6131944	Symbol	type -> t		6130769						
ANR	6131945	Symbol	* cstr		6130769						
ANR	6131946	Symbol	array_length		6130769						
ANR	6131947	Symbol	TOK_LSTR		6130769						
ANR	6131948	Symbol	t1		6130769						
ANR	6131949	Symbol	EXPR_VAL		6130769						
ANR	6131950	Symbol	cstr		6130769						
ANR	6131951	Symbol	CType		6130769						
ANR	6131952	Symbol	no_oblock		6130769						
ANR	6131953	Symbol	f -> c		6130769						
ANR	6131954	Symbol	f -> next -> type . t		6130769						
ANR	6131955	Symbol	s -> next		6130769						
ANR	6131956	Symbol	cstr -> size		6130769						
ANR	6131957	Symbol	tok		6130769						
ANR	6131958	Symbol	& ad1		6130769						
ANR	6131959	Symbol	parlevel1		6130769						
ANR	6131960	Symbol	s -> c		6130769						
ANR	6131961	Symbol	* type		6130769						
ANR	6131962	Symbol	size1		6130769						
ANR	6131963	Symbol	& align1		6130769						
ANR	6131964	Symbol	& f -> type		6130769						
ANR	6131965	Symbol	& type1		6130769						
ANR	6131966	Symbol	TYPE_ABSTRACT		6130769						
ANR	6131967	Symbol	type -> ref		6130769						
ANR	6131968	Symbol	c		6130769						
ANR	6131969	Symbol	align1		6130769						
ANR	6131970	Symbol	ch		6130769						
ANR	6131971	Symbol	f		6130769						
ANR	6131972	Symbol	parlevel		6130769						
ANR	6131973	Symbol	i		6130769						
ANR	6131974	Symbol	& f		6130769						
ANR	6131975	Symbol	* cstr -> data		6130769						
ANR	6131976	Symbol	f -> next		6130769						
ANR	6131977	Symbol	n		6130769						
ANR	6131978	Symbol	ad1		6130769						
ANR	6131979	Symbol	* f		6130769						
ANR	6131980	Symbol	s		6130769						
ANR	6131981	Symbol	* i		6130769						
ANR	6131982	Symbol	f -> next -> c		6130769						
ANR	6131983	Symbol	& n		6130769						
ANR	6131984	Symbol	is_structured		6130769						
ANR	6131985	Symbol	f -> type . t		6130769						
ANR	6131986	Symbol	* s		6130769						
ANR	6131987	Symbol	par_count		6130769						
ANR	6131988	Symbol	first		6130769						
ANR	6131989	Symbol	VT_ARRAY		6130769						
ANR	6131990	Function	decl_initializer_alloc	2810:0:64805:68586							
ANR	6131991	FunctionDef	"decl_initializer_alloc (CType * type , AttributeDef * ad , int r , int has_init , int v , char * asm_label , int scope)"		6131990	0					
ANR	6131992	CompoundStatement		2810:122:64927:68586	6131990	0					
ANR	6131993	IdentifierDeclStatement	"int size , align , addr ;"	2811:1:64930:64951	6131990	0	True				
ANR	6131994	IdentifierDecl	size		6131990	0					
ANR	6131995	IdentifierDeclType	int		6131990	0					
ANR	6131996	Identifier	size		6131990	1					
ANR	6131997	IdentifierDecl	align		6131990	1					
ANR	6131998	IdentifierDeclType	int		6131990	0					
ANR	6131999	Identifier	align		6131990	1					
ANR	6132000	IdentifierDecl	addr		6131990	2					
ANR	6132001	IdentifierDeclType	int		6131990	0					
ANR	6132002	Identifier	addr		6131990	1					
ANR	6132003	IdentifierDeclStatement	int level ;	2812:1:64954:64963	6131990	1	True				
ANR	6132004	IdentifierDecl	level		6131990	0					
ANR	6132005	IdentifierDeclType	int		6131990	0					
ANR	6132006	Identifier	level		6131990	1					
ANR	6132007	IdentifierDeclStatement	ParseState saved_parse_state = { 0 } ;	2813:1:64966:65005	6131990	2	True				
ANR	6132008	IdentifierDecl	saved_parse_state = { 0 }		6131990	0					
ANR	6132009	IdentifierDeclType	ParseState		6131990	0					
ANR	6132010	Identifier	saved_parse_state		6131990	1					
ANR	6132011	AssignmentExpression	saved_parse_state = { 0 }		6131990	2		=			
ANR	6132012	Identifier	saved_parse_state		6131990	0					
ANR	6132013	InitializerList	0		6131990	1					
ANR	6132014	PrimaryExpression	0		6131990	0					
ANR	6132015	IdentifierDeclStatement	TokenString init_str ;	2816:1:65008:65028	6131990	3	True				
ANR	6132016	IdentifierDecl	init_str		6131990	0					
ANR	6132017	IdentifierDeclType	TokenString		6131990	0					
ANR	6132018	Identifier	init_str		6131990	1					
ANR	6132019	IdentifierDeclStatement	Sym * flexible_array ;	2817:1:65031:65050	6131990	4	True				
ANR	6132020	IdentifierDecl	* flexible_array		6131990	0					
ANR	6132021	IdentifierDeclType	Sym *		6131990	0					
ANR	6132022	Identifier	flexible_array		6131990	1					
ANR	6132023	ExpressionStatement	flexible_array = NULL	2819:1:65054:65075	6131990	5	True				
ANR	6132024	AssignmentExpression	flexible_array = NULL		6131990	0		=			
ANR	6132025	Identifier	flexible_array		6131990	0					
ANR	6132026	Identifier	NULL		6131990	1					
ANR	6132027	IfStatement	if ( is_struct ( type ) )		6131990	6					
ANR	6132028	Condition	is_struct ( type )	2820:5:65082:65096	6131990	0	True				
ANR	6132029	CallExpression	is_struct ( type )		6131990	0					
ANR	6132030	Callee	is_struct		6131990	0					
ANR	6132031	Identifier	is_struct		6131990	0					
ANR	6132032	ArgumentList	type		6131990	1					
ANR	6132033	Argument	type		6131990	0					
ANR	6132034	Identifier	type		6131990	0					
ANR	6132035	CompoundStatement		12:2:175:185	6131990	1					
ANR	6132036	IdentifierDeclStatement	Sym * field ;	2821:2:65103:65113	6131990	0	True				
ANR	6132037	IdentifierDecl	* field		6131990	0					
ANR	6132038	IdentifierDeclType	Sym *		6131990	0					
ANR	6132039	Identifier	field		6131990	1					
ANR	6132040	ExpressionStatement	field = type -> ref	2822:2:65117:65134	6131990	1	True				
ANR	6132041	AssignmentExpression	field = type -> ref		6131990	0		=			
ANR	6132042	Identifier	field		6131990	0					
ANR	6132043	PtrMemberAccess	type -> ref		6131990	1					
ANR	6132044	Identifier	type		6131990	0					
ANR	6132045	Identifier	ref		6131990	1					
ANR	6132046	WhileStatement	while ( field && field -> next )		6131990	2					
ANR	6132047	Condition	field && field -> next	2823:9:65145:65164	6131990	0	True				
ANR	6132048	AndExpression	field && field -> next		6131990	0		&&			
ANR	6132049	Identifier	field		6131990	0					
ANR	6132050	PtrMemberAccess	field -> next		6131990	1					
ANR	6132051	Identifier	field		6131990	0					
ANR	6132052	Identifier	next		6131990	1					
ANR	6132053	ExpressionStatement	field = field -> next	2824:3:65170:65189	6131990	1	True				
ANR	6132054	AssignmentExpression	field = field -> next		6131990	0		=			
ANR	6132055	Identifier	field		6131990	0					
ANR	6132056	PtrMemberAccess	field -> next		6131990	1					
ANR	6132057	Identifier	field		6131990	0					
ANR	6132058	Identifier	next		6131990	1					
ANR	6132059	IfStatement	if ( field && ( field -> type . t & VT_ARRAY ) && ( field -> type . ref -> c < 0 ) )		6131990	3					
ANR	6132060	Condition	field && ( field -> type . t & VT_ARRAY ) && ( field -> type . ref -> c < 0 )	2825:6:65197:65259	6131990	0	True				
ANR	6132061	AndExpression	field && ( field -> type . t & VT_ARRAY ) && ( field -> type . ref -> c < 0 )		6131990	0		&&			
ANR	6132062	Identifier	field		6131990	0					
ANR	6132063	AndExpression	( field -> type . t & VT_ARRAY ) && ( field -> type . ref -> c < 0 )		6131990	1		&&			
ANR	6132064	BitAndExpression	field -> type . t & VT_ARRAY		6131990	0		&			
ANR	6132065	MemberAccess	field -> type . t		6131990	0					
ANR	6132066	PtrMemberAccess	field -> type		6131990	0					
ANR	6132067	Identifier	field		6131990	0					
ANR	6132068	Identifier	type		6131990	1					
ANR	6132069	Identifier	t		6131990	1					
ANR	6132070	Identifier	VT_ARRAY		6131990	1					
ANR	6132071	RelationalExpression	field -> type . ref -> c < 0		6131990	1		<			
ANR	6132072	PtrMemberAccess	field -> type . ref -> c		6131990	0					
ANR	6132073	MemberAccess	field -> type . ref		6131990	0					
ANR	6132074	PtrMemberAccess	field -> type		6131990	0					
ANR	6132075	Identifier	field		6131990	0					
ANR	6132076	Identifier	type		6131990	1					
ANR	6132077	Identifier	ref		6131990	1					
ANR	6132078	Identifier	c		6131990	1					
ANR	6132079	PrimaryExpression	0		6131990	1					
ANR	6132080	CompoundStatement		16:71:334:334	6131990	1					
ANR	6132081	ExpressionStatement	flexible_array = field	2826:3:65267:65289	6131990	0	True				
ANR	6132082	AssignmentExpression	flexible_array = field		6131990	0		=			
ANR	6132083	Identifier	flexible_array		6131990	0					
ANR	6132084	Identifier	field		6131990	1					
ANR	6132085	ExpressionStatement	"size = type_size ( type , & align )"	2830:1:65300:65331	6131990	7	True				
ANR	6132086	AssignmentExpression	"size = type_size ( type , & align )"		6131990	0		=			
ANR	6132087	Identifier	size		6131990	0					
ANR	6132088	CallExpression	"type_size ( type , & align )"		6131990	1					
ANR	6132089	Callee	type_size		6131990	0					
ANR	6132090	Identifier	type_size		6131990	0					
ANR	6132091	ArgumentList	type		6131990	1					
ANR	6132092	Argument	type		6131990	0					
ANR	6132093	Identifier	type		6131990	0					
ANR	6132094	Argument	& align		6131990	1					
ANR	6132095	UnaryOperationExpression	& align		6131990	0					
ANR	6132096	UnaryOperator	&		6131990	0					
ANR	6132097	Identifier	align		6131990	1					
ANR	6132098	ExpressionStatement	tok_str_new ( & init_str )	2837:1:65578:65601	6131990	8	True				
ANR	6132099	CallExpression	tok_str_new ( & init_str )		6131990	0					
ANR	6132100	Callee	tok_str_new		6131990	0					
ANR	6132101	Identifier	tok_str_new		6131990	0					
ANR	6132102	ArgumentList	& init_str		6131990	1					
ANR	6132103	Argument	& init_str		6131990	0					
ANR	6132104	UnaryOperationExpression	& init_str		6131990	0					
ANR	6132105	UnaryOperator	&		6131990	0					
ANR	6132106	Identifier	init_str		6131990	1					
ANR	6132107	IfStatement	if ( size < 0 || ( flexible_array && has_init ) )		6131990	9					
ANR	6132108	Condition	size < 0 || ( flexible_array && has_init )	2838:5:65608:65647	6131990	0	True				
ANR	6132109	OrExpression	size < 0 || ( flexible_array && has_init )		6131990	0		||			
ANR	6132110	RelationalExpression	size < 0		6131990	0		<			
ANR	6132111	Identifier	size		6131990	0					
ANR	6132112	PrimaryExpression	0		6131990	1					
ANR	6132113	AndExpression	flexible_array && has_init		6131990	1		&&			
ANR	6132114	Identifier	flexible_array		6131990	0					
ANR	6132115	Identifier	has_init		6131990	1					
ANR	6132116	CompoundStatement		29:47:722:722	6131990	1					
ANR	6132117	IfStatement	if ( ! has_init )		6131990	0					
ANR	6132118	Condition	! has_init	2839:6:65658:65666	6131990	0	True				
ANR	6132119	UnaryOperationExpression	! has_init		6131990	0					
ANR	6132120	UnaryOperator	!		6131990	0					
ANR	6132121	Identifier	has_init		6131990	1					
ANR	6132122	CompoundStatement		30:17:741:741	6131990	1					
ANR	6132123	ExpressionStatement	"TCC_ERR ( ""unknown type size"" )"	2840:3:65674:65703	6131990	0	True				
ANR	6132124	CallExpression	"TCC_ERR ( ""unknown type size"" )"		6131990	0					
ANR	6132125	Callee	TCC_ERR		6131990	0					
ANR	6132126	Identifier	TCC_ERR		6131990	0					
ANR	6132127	ArgumentList	"""unknown type size"""		6131990	1					
ANR	6132128	Argument	"""unknown type size"""		6131990	0					
ANR	6132129	PrimaryExpression	"""unknown type size"""		6131990	0					
ANR	6132130	IfStatement	if ( has_init == 2 )		6131990	1					
ANR	6132131	Condition	has_init == 2	2843:6:65743:65755	6131990	0	True				
ANR	6132132	EqualityExpression	has_init == 2		6131990	0		==			
ANR	6132133	Identifier	has_init		6131990	0					
ANR	6132134	PrimaryExpression	2		6131990	1					
ANR	6132135	CompoundStatement		34:21:830:830	6131990	1					
ANR	6132136	WhileStatement	while ( tok == TOK_STR || tok == TOK_LSTR )		6131990	0					
ANR	6132137	Condition	tok == TOK_STR || tok == TOK_LSTR	2845:10:65796:65828	6131990	0	True				
ANR	6132138	OrExpression	tok == TOK_STR || tok == TOK_LSTR		6131990	0		||			
ANR	6132139	EqualityExpression	tok == TOK_STR		6131990	0		==			
ANR	6132140	Identifier	tok		6131990	0					
ANR	6132141	Identifier	TOK_STR		6131990	1					
ANR	6132142	EqualityExpression	tok == TOK_LSTR		6131990	1		==			
ANR	6132143	Identifier	tok		6131990	0					
ANR	6132144	Identifier	TOK_LSTR		6131990	1					
ANR	6132145	CompoundStatement		36:45:903:903	6131990	1					
ANR	6132146	ExpressionStatement	tok_str_add_tok ( & init_str )	2846:4:65837:65864	6131990	0	True				
ANR	6132147	CallExpression	tok_str_add_tok ( & init_str )		6131990	0					
ANR	6132148	Callee	tok_str_add_tok		6131990	0					
ANR	6132149	Identifier	tok_str_add_tok		6131990	0					
ANR	6132150	ArgumentList	& init_str		6131990	1					
ANR	6132151	Argument	& init_str		6131990	0					
ANR	6132152	UnaryOperationExpression	& init_str		6131990	0					
ANR	6132153	UnaryOperator	&		6131990	0					
ANR	6132154	Identifier	init_str		6131990	1					
ANR	6132155	ExpressionStatement	next ( )	2847:4:65870:65877	6131990	1	True				
ANR	6132156	CallExpression	next ( )		6131990	0					
ANR	6132157	Callee	next		6131990	0					
ANR	6132158	Identifier	next		6131990	0					
ANR	6132159	ArgumentList			6131990	1					
ANR	6132160	ElseStatement	else		6131990	0					
ANR	6132161	CompoundStatement		40:9:965:965	6131990	0					
ANR	6132162	ExpressionStatement	level = 0	2850:3:65898:65907	6131990	0	True				
ANR	6132163	AssignmentExpression	level = 0		6131990	0		=			
ANR	6132164	Identifier	level		6131990	0					
ANR	6132165	PrimaryExpression	0		6131990	1					
ANR	6132166	WhileStatement	"while ( tcc_nerr ( ) == 0 && ( level > 0 || ( tok != ',' && tok != ';' ) ) )"		6131990	1					
ANR	6132167	Condition	"tcc_nerr ( ) == 0 && ( level > 0 || ( tok != ',' && tok != ';' ) )"	2851:10:65919:65978	6131990	0	True				
ANR	6132168	AndExpression	"tcc_nerr ( ) == 0 && ( level > 0 || ( tok != ',' && tok != ';' ) )"		6131990	0		&&			
ANR	6132169	EqualityExpression	tcc_nerr ( ) == 0		6131990	0		==			
ANR	6132170	CallExpression	tcc_nerr ( )		6131990	0					
ANR	6132171	Callee	tcc_nerr		6131990	0					
ANR	6132172	Identifier	tcc_nerr		6131990	0					
ANR	6132173	ArgumentList			6131990	1					
ANR	6132174	PrimaryExpression	0		6131990	1					
ANR	6132175	OrExpression	"level > 0 || ( tok != ',' && tok != ';' )"		6131990	1		||			
ANR	6132176	RelationalExpression	level > 0		6131990	0		>			
ANR	6132177	Identifier	level		6131990	0					
ANR	6132178	PrimaryExpression	0		6131990	1					
ANR	6132179	AndExpression	"tok != ',' && tok != ';'"		6131990	1		&&			
ANR	6132180	EqualityExpression	"tok != ','"		6131990	0		!=			
ANR	6132181	Identifier	tok		6131990	0					
ANR	6132182	PrimaryExpression	"','"		6131990	1					
ANR	6132183	EqualityExpression	tok != ';'		6131990	1		!=			
ANR	6132184	Identifier	tok		6131990	0					
ANR	6132185	PrimaryExpression	';'		6131990	1					
ANR	6132186	CompoundStatement		42:72:1053:1053	6131990	1					
ANR	6132187	IfStatement	if ( tok < 0 )		6131990	0					
ANR	6132188	Condition	tok < 0	2852:8:65991:65997	6131990	0	True				
ANR	6132189	RelationalExpression	tok < 0		6131990	0		<			
ANR	6132190	Identifier	tok		6131990	0					
ANR	6132191	PrimaryExpression	0		6131990	1					
ANR	6132192	CompoundStatement		43:17:1072:1072	6131990	1					
ANR	6132193	ExpressionStatement	"TCC_ERR ( ""unexpected end of file in initializer"" )"	2853:5:66007:66056	6131990	0	True				
ANR	6132194	CallExpression	"TCC_ERR ( ""unexpected end of file in initializer"" )"		6131990	0					
ANR	6132195	Callee	TCC_ERR		6131990	0					
ANR	6132196	Identifier	TCC_ERR		6131990	0					
ANR	6132197	ArgumentList	"""unexpected end of file in initializer"""		6131990	1					
ANR	6132198	Argument	"""unexpected end of file in initializer"""		6131990	0					
ANR	6132199	PrimaryExpression	"""unexpected end of file in initializer"""		6131990	0					
ANR	6132200	ExpressionStatement	tok_str_add_tok ( & init_str )	2855:4:66068:66095	6131990	1	True				
ANR	6132201	CallExpression	tok_str_add_tok ( & init_str )		6131990	0					
ANR	6132202	Callee	tok_str_add_tok		6131990	0					
ANR	6132203	Identifier	tok_str_add_tok		6131990	0					
ANR	6132204	ArgumentList	& init_str		6131990	1					
ANR	6132205	Argument	& init_str		6131990	0					
ANR	6132206	UnaryOperationExpression	& init_str		6131990	0					
ANR	6132207	UnaryOperator	&		6131990	0					
ANR	6132208	Identifier	init_str		6131990	1					
ANR	6132209	IfStatement	if ( tok == '{' )		6131990	2					
ANR	6132210	Condition	tok == '{'	2856:8:66105:66114	6131990	0	True				
ANR	6132211	EqualityExpression	tok == '{'		6131990	0		==			
ANR	6132212	Identifier	tok		6131990	0					
ANR	6132213	PrimaryExpression	'{'		6131990	1					
ANR	6132214	CompoundStatement		47:20:1189:1189	6131990	1					
ANR	6132215	ExpressionStatement	level ++	2857:5:66124:66131	6131990	0	True				
ANR	6132216	PostIncDecOperationExpression	level ++		6131990	0					
ANR	6132217	Identifier	level		6131990	0					
ANR	6132218	IncDec	++		6131990	1					
ANR	6132219	ElseStatement	else		6131990	0					
ANR	6132220	IfStatement	if ( tok == '}' )		6131990	0					
ANR	6132221	Condition	tok == '}'	2858:15:66148:66157	6131990	0	True				
ANR	6132222	EqualityExpression	tok == '}'		6131990	0		==			
ANR	6132223	Identifier	tok		6131990	0					
ANR	6132224	PrimaryExpression	'}'		6131990	1					
ANR	6132225	CompoundStatement		49:27:1232:1232	6131990	1					
ANR	6132226	ExpressionStatement	level --	2859:5:66167:66174	6131990	0	True				
ANR	6132227	PostIncDecOperationExpression	level --		6131990	0					
ANR	6132228	Identifier	level		6131990	0					
ANR	6132229	IncDec	--		6131990	1					
ANR	6132230	IfStatement	if ( level <= 0 )		6131990	1					
ANR	6132231	Condition	level <= 0	2860:9:66185:66194	6131990	0	True				
ANR	6132232	RelationalExpression	level <= 0		6131990	0		<=			
ANR	6132233	Identifier	level		6131990	0					
ANR	6132234	PrimaryExpression	0		6131990	1					
ANR	6132235	CompoundStatement		51:21:1269:1269	6131990	1					
ANR	6132236	ExpressionStatement	next ( )	2861:6:66205:66212	6131990	0	True				
ANR	6132237	CallExpression	next ( )		6131990	0					
ANR	6132238	Callee	next		6131990	0					
ANR	6132239	Identifier	next		6131990	0					
ANR	6132240	ArgumentList			6131990	1					
ANR	6132241	BreakStatement	break ;	2862:6:66220:66225	6131990	1	True				
ANR	6132242	ExpressionStatement	next ( )	2865:4:66244:66251	6131990	3	True				
ANR	6132243	CallExpression	next ( )		6131990	0					
ANR	6132244	Callee	next		6131990	0					
ANR	6132245	Identifier	next		6131990	0					
ANR	6132246	ArgumentList			6131990	1					
ANR	6132247	ExpressionStatement	"tok_str_add ( & init_str , - 1 )"	2868:2:66264:66291	6131990	2	True				
ANR	6132248	CallExpression	"tok_str_add ( & init_str , - 1 )"		6131990	0					
ANR	6132249	Callee	tok_str_add		6131990	0					
ANR	6132250	Identifier	tok_str_add		6131990	0					
ANR	6132251	ArgumentList	& init_str		6131990	1					
ANR	6132252	Argument	& init_str		6131990	0					
ANR	6132253	UnaryOperationExpression	& init_str		6131990	0					
ANR	6132254	UnaryOperator	&		6131990	0					
ANR	6132255	Identifier	init_str		6131990	1					
ANR	6132256	Argument	- 1		6131990	1					
ANR	6132257	UnaryOperationExpression	- 1		6131990	0					
ANR	6132258	UnaryOperator	-		6131990	0					
ANR	6132259	PrimaryExpression	1		6131990	1					
ANR	6132260	ExpressionStatement	"tok_str_add ( & init_str , 0 )"	2869:2:66295:66321	6131990	3	True				
ANR	6132261	CallExpression	"tok_str_add ( & init_str , 0 )"		6131990	0					
ANR	6132262	Callee	tok_str_add		6131990	0					
ANR	6132263	Identifier	tok_str_add		6131990	0					
ANR	6132264	ArgumentList	& init_str		6131990	1					
ANR	6132265	Argument	& init_str		6131990	0					
ANR	6132266	UnaryOperationExpression	& init_str		6131990	0					
ANR	6132267	UnaryOperator	&		6131990	0					
ANR	6132268	Identifier	init_str		6131990	1					
ANR	6132269	Argument	0		6131990	1					
ANR	6132270	PrimaryExpression	0		6131990	0					
ANR	6132271	ExpressionStatement	save_parse_state ( & saved_parse_state )	2872:2:66347:66384	6131990	4	True				
ANR	6132272	CallExpression	save_parse_state ( & saved_parse_state )		6131990	0					
ANR	6132273	Callee	save_parse_state		6131990	0					
ANR	6132274	Identifier	save_parse_state		6131990	0					
ANR	6132275	ArgumentList	& saved_parse_state		6131990	1					
ANR	6132276	Argument	& saved_parse_state		6131990	0					
ANR	6132277	UnaryOperationExpression	& saved_parse_state		6131990	0					
ANR	6132278	UnaryOperator	&		6131990	0					
ANR	6132279	Identifier	saved_parse_state		6131990	1					
ANR	6132280	ExpressionStatement	macro_ptr = init_str . str	2874:2:66389:66413	6131990	5	True				
ANR	6132281	AssignmentExpression	macro_ptr = init_str . str		6131990	0		=			
ANR	6132282	Identifier	macro_ptr		6131990	0					
ANR	6132283	MemberAccess	init_str . str		6131990	1					
ANR	6132284	Identifier	init_str		6131990	0					
ANR	6132285	Identifier	str		6131990	1					
ANR	6132286	ExpressionStatement	next ( )	2875:2:66417:66424	6131990	6	True				
ANR	6132287	CallExpression	next ( )		6131990	0					
ANR	6132288	Callee	next		6131990	0					
ANR	6132289	Identifier	next		6131990	0					
ANR	6132290	ArgumentList			6131990	1					
ANR	6132291	ExpressionStatement	"decl_initializer ( type , 0 , 1 , 1 )"	2876:2:66428:66460	6131990	7	True				
ANR	6132292	CallExpression	"decl_initializer ( type , 0 , 1 , 1 )"		6131990	0					
ANR	6132293	Callee	decl_initializer		6131990	0					
ANR	6132294	Identifier	decl_initializer		6131990	0					
ANR	6132295	ArgumentList	type		6131990	1					
ANR	6132296	Argument	type		6131990	0					
ANR	6132297	Identifier	type		6131990	0					
ANR	6132298	Argument	0		6131990	1					
ANR	6132299	PrimaryExpression	0		6131990	0					
ANR	6132300	Argument	1		6131990	2					
ANR	6132301	PrimaryExpression	1		6131990	0					
ANR	6132302	Argument	1		6131990	3					
ANR	6132303	PrimaryExpression	1		6131990	0					
ANR	6132304	ExpressionStatement	macro_ptr = init_str . str	2878:2:66507:66531	6131990	8	True				
ANR	6132305	AssignmentExpression	macro_ptr = init_str . str		6131990	0		=			
ANR	6132306	Identifier	macro_ptr		6131990	0					
ANR	6132307	MemberAccess	init_str . str		6131990	1					
ANR	6132308	Identifier	init_str		6131990	0					
ANR	6132309	Identifier	str		6131990	1					
ANR	6132310	ExpressionStatement	next ( )	2879:2:66535:66542	6131990	9	True				
ANR	6132311	CallExpression	next ( )		6131990	0					
ANR	6132312	Callee	next		6131990	0					
ANR	6132313	Identifier	next		6131990	0					
ANR	6132314	ArgumentList			6131990	1					
ANR	6132315	ExpressionStatement	"size = type_size ( type , & align )"	2882:2:66584:66615	6131990	10	True				
ANR	6132316	AssignmentExpression	"size = type_size ( type , & align )"		6131990	0		=			
ANR	6132317	Identifier	size		6131990	0					
ANR	6132318	CallExpression	"type_size ( type , & align )"		6131990	1					
ANR	6132319	Callee	type_size		6131990	0					
ANR	6132320	Identifier	type_size		6131990	0					
ANR	6132321	ArgumentList	type		6131990	1					
ANR	6132322	Argument	type		6131990	0					
ANR	6132323	Identifier	type		6131990	0					
ANR	6132324	Argument	& align		6131990	1					
ANR	6132325	UnaryOperationExpression	& align		6131990	0					
ANR	6132326	UnaryOperator	&		6131990	0					
ANR	6132327	Identifier	align		6131990	1					
ANR	6132328	IfStatement	if ( size < 0 )		6131990	11					
ANR	6132329	Condition	size < 0	2883:6:66623:66630	6131990	0	True				
ANR	6132330	RelationalExpression	size < 0		6131990	0		<			
ANR	6132331	Identifier	size		6131990	0					
ANR	6132332	PrimaryExpression	0		6131990	1					
ANR	6132333	CompoundStatement		74:16:1705:1705	6131990	1					
ANR	6132334	ExpressionStatement	"TCC_ERR ( ""unknown type size"" )"	2884:3:66638:66667	6131990	0	True				
ANR	6132335	CallExpression	"TCC_ERR ( ""unknown type size"" )"		6131990	0					
ANR	6132336	Callee	TCC_ERR		6131990	0					
ANR	6132337	Identifier	TCC_ERR		6131990	0					
ANR	6132338	ArgumentList	"""unknown type size"""		6131990	1					
ANR	6132339	Argument	"""unknown type size"""		6131990	0					
ANR	6132340	PrimaryExpression	"""unknown type size"""		6131990	0					
ANR	6132341	IfStatement	if ( flexible_array )		6131990	10					
ANR	6132342	Condition	flexible_array	2887:5:66681:66694	6131990	0	True				
ANR	6132343	Identifier	flexible_array		6131990	0					
ANR	6132344	CompoundStatement		78:21:1769:1769	6131990	1					
ANR	6132345	ExpressionStatement	size += flexible_array -> type . ref -> c * pointed_size ( & flexible_array -> type )	2888:2:66701:66775	6131990	0	True				
ANR	6132346	AssignmentExpression	size += flexible_array -> type . ref -> c * pointed_size ( & flexible_array -> type )		6131990	0		+=			
ANR	6132347	Identifier	size		6131990	0					
ANR	6132348	MultiplicativeExpression	flexible_array -> type . ref -> c * pointed_size ( & flexible_array -> type )		6131990	1		*			
ANR	6132349	PtrMemberAccess	flexible_array -> type . ref -> c		6131990	0					
ANR	6132350	MemberAccess	flexible_array -> type . ref		6131990	0					
ANR	6132351	PtrMemberAccess	flexible_array -> type		6131990	0					
ANR	6132352	Identifier	flexible_array		6131990	0					
ANR	6132353	Identifier	type		6131990	1					
ANR	6132354	Identifier	ref		6131990	1					
ANR	6132355	Identifier	c		6131990	1					
ANR	6132356	CallExpression	pointed_size ( & flexible_array -> type )		6131990	1					
ANR	6132357	Callee	pointed_size		6131990	0					
ANR	6132358	Identifier	pointed_size		6131990	0					
ANR	6132359	ArgumentList	& flexible_array -> type		6131990	1					
ANR	6132360	Argument	& flexible_array -> type		6131990	0					
ANR	6132361	UnaryOperationExpression	& flexible_array -> type		6131990	0					
ANR	6132362	UnaryOperator	&		6131990	0					
ANR	6132363	PtrMemberAccess	flexible_array -> type		6131990	1					
ANR	6132364	Identifier	flexible_array		6131990	0					
ANR	6132365	Identifier	type		6131990	1					
ANR	6132366	IfStatement	if ( ad -> aligned )		6131990	11					
ANR	6132367	Condition	ad -> aligned	2891:5:66840:66850	6131990	0	True				
ANR	6132368	PtrMemberAccess	ad -> aligned		6131990	0					
ANR	6132369	Identifier	ad		6131990	0					
ANR	6132370	Identifier	aligned		6131990	1					
ANR	6132371	CompoundStatement		82:18:1925:1925	6131990	1					
ANR	6132372	IfStatement	if ( ad -> aligned > align )		6131990	0					
ANR	6132373	Condition	ad -> aligned > align	2892:6:66861:66879	6131990	0	True				
ANR	6132374	RelationalExpression	ad -> aligned > align		6131990	0		>			
ANR	6132375	PtrMemberAccess	ad -> aligned		6131990	0					
ANR	6132376	Identifier	ad		6131990	0					
ANR	6132377	Identifier	aligned		6131990	1					
ANR	6132378	Identifier	align		6131990	1					
ANR	6132379	CompoundStatement		83:27:1954:1954	6131990	1					
ANR	6132380	ExpressionStatement	align = ad -> aligned	2893:3:66887:66906	6131990	0	True				
ANR	6132381	AssignmentExpression	align = ad -> aligned		6131990	0		=			
ANR	6132382	Identifier	align		6131990	0					
ANR	6132383	PtrMemberAccess	ad -> aligned		6131990	1					
ANR	6132384	Identifier	ad		6131990	0					
ANR	6132385	Identifier	aligned		6131990	1					
ANR	6132386	ElseStatement	else		6131990	0					
ANR	6132387	IfStatement	if ( ad -> packed )		6131990	0					
ANR	6132388	Condition	ad -> packed	2895:12:66924:66933	6131990	0	True				
ANR	6132389	PtrMemberAccess	ad -> packed		6131990	0					
ANR	6132390	Identifier	ad		6131990	0					
ANR	6132391	Identifier	packed		6131990	1					
ANR	6132392	CompoundStatement		86:24:2008:2008	6131990	1					
ANR	6132393	ExpressionStatement	align = 1	2896:2:66940:66949	6131990	0	True				
ANR	6132394	AssignmentExpression	align = 1		6131990	0		=			
ANR	6132395	Identifier	align		6131990	0					
ANR	6132396	PrimaryExpression	1		6131990	1					
ANR	6132397	IfStatement	if ( ( r & VT_VALMASK ) == VT_LOCAL )		6131990	12					
ANR	6132398	Condition	( r & VT_VALMASK ) == VT_LOCAL	2898:5:66959:66986	6131990	0	True				
ANR	6132399	EqualityExpression	( r & VT_VALMASK ) == VT_LOCAL		6131990	0		==			
ANR	6132400	BitAndExpression	r & VT_VALMASK		6131990	0		&			
ANR	6132401	Identifier	r		6131990	0					
ANR	6132402	Identifier	VT_VALMASK		6131990	1					
ANR	6132403	Identifier	VT_LOCAL		6131990	1					
ANR	6132404	CompoundStatement		89:35:2061:2061	6131990	1					
ANR	6132405	ExpressionStatement	loc = ( loc - size ) & - align	2899:2:66993:67021	6131990	0	True				
ANR	6132406	AssignmentExpression	loc = ( loc - size ) & - align		6131990	0		=			
ANR	6132407	Identifier	loc		6131990	0					
ANR	6132408	BitAndExpression	( loc - size ) & - align		6131990	1		&			
ANR	6132409	AdditiveExpression	loc - size		6131990	0		-			
ANR	6132410	Identifier	loc		6131990	0					
ANR	6132411	Identifier	size		6131990	1					
ANR	6132412	UnaryOperationExpression	- align		6131990	1					
ANR	6132413	UnaryOperator	-		6131990	0					
ANR	6132414	Identifier	align		6131990	1					
ANR	6132415	ExpressionStatement	addr = loc	2900:2:67025:67035	6131990	1	True				
ANR	6132416	AssignmentExpression	addr = loc		6131990	0		=			
ANR	6132417	Identifier	addr		6131990	0					
ANR	6132418	Identifier	loc		6131990	1					
ANR	6132419	IfStatement	if ( v )		6131990	2					
ANR	6132420	Condition	v	2901:6:67043:67043	6131990	0	True				
ANR	6132421	Identifier	v		6131990	0					
ANR	6132422	CompoundStatement		92:9:2118:2118	6131990	1					
ANR	6132423	ExpressionStatement	"sym_push ( v , type , r , addr )"	2903:3:67075:67102	6131990	0	True				
ANR	6132424	CallExpression	"sym_push ( v , type , r , addr )"		6131990	0					
ANR	6132425	Callee	sym_push		6131990	0					
ANR	6132426	Identifier	sym_push		6131990	0					
ANR	6132427	ArgumentList	v		6131990	1					
ANR	6132428	Argument	v		6131990	0					
ANR	6132429	Identifier	v		6131990	0					
ANR	6132430	Argument	type		6131990	1					
ANR	6132431	Identifier	type		6131990	0					
ANR	6132432	Argument	r		6131990	2					
ANR	6132433	Identifier	r		6131990	0					
ANR	6132434	Argument	addr		6131990	3					
ANR	6132435	Identifier	addr		6131990	0					
ANR	6132436	ElseStatement	else		6131990	0					
ANR	6132437	CompoundStatement		95:9:2185:2185	6131990	0					
ANR	6132438	ExpressionStatement	"vset ( type , r , addr )"	2906:3:67148:67168	6131990	0	True				
ANR	6132439	CallExpression	"vset ( type , r , addr )"		6131990	0					
ANR	6132440	Callee	vset		6131990	0					
ANR	6132441	Identifier	vset		6131990	0					
ANR	6132442	ArgumentList	type		6131990	1					
ANR	6132443	Argument	type		6131990	0					
ANR	6132444	Identifier	type		6131990	0					
ANR	6132445	Argument	r		6131990	1					
ANR	6132446	Identifier	r		6131990	0					
ANR	6132447	Argument	addr		6131990	2					
ANR	6132448	Identifier	addr		6131990	0					
ANR	6132449	ElseStatement	else		6131990	0					
ANR	6132450	CompoundStatement		100:2:2258:2266	6131990	0					
ANR	6132451	IdentifierDeclStatement	Sym * sym ;	2909:2:67186:67194	6131990	0	True				
ANR	6132452	IdentifierDecl	* sym		6131990	0					
ANR	6132453	IdentifierDeclType	Sym *		6131990	0					
ANR	6132454	Identifier	sym		6131990	1					
ANR	6132455	ExpressionStatement	sym = NULL	2911:2:67199:67209	6131990	1	True				
ANR	6132456	AssignmentExpression	sym = NULL		6131990	0		=			
ANR	6132457	Identifier	sym		6131990	0					
ANR	6132458	Identifier	NULL		6131990	1					
ANR	6132459	IfStatement	if ( v && scope == VT_CONST )		6131990	2					
ANR	6132460	Condition	v && scope == VT_CONST	2912:6:67217:67238	6131990	0	True				
ANR	6132461	AndExpression	v && scope == VT_CONST		6131990	0		&&			
ANR	6132462	Identifier	v		6131990	0					
ANR	6132463	EqualityExpression	scope == VT_CONST		6131990	1		==			
ANR	6132464	Identifier	scope		6131990	0					
ANR	6132465	Identifier	VT_CONST		6131990	1					
ANR	6132466	CompoundStatement		103:30:2313:2313	6131990	1					
ANR	6132467	ExpressionStatement	sym = sym_find ( v )	2914:3:67293:67311	6131990	0	True				
ANR	6132468	AssignmentExpression	sym = sym_find ( v )		6131990	0		=			
ANR	6132469	Identifier	sym		6131990	0					
ANR	6132470	CallExpression	sym_find ( v )		6131990	1					
ANR	6132471	Callee	sym_find		6131990	0					
ANR	6132472	Identifier	sym_find		6131990	0					
ANR	6132473	ArgumentList	v		6131990	1					
ANR	6132474	Argument	v		6131990	0					
ANR	6132475	Identifier	v		6131990	0					
ANR	6132476	IfStatement	if ( sym )		6131990	1					
ANR	6132477	Condition	sym	2915:7:67320:67322	6131990	0	True				
ANR	6132478	Identifier	sym		6131990	0					
ANR	6132479	CompoundStatement		106:12:2397:2397	6131990	1					
ANR	6132480	IfStatement	"if ( ! is_compatible_types ( & sym -> type , type ) )"		6131990	0					
ANR	6132481	Condition	"! is_compatible_types ( & sym -> type , type )"	2916:8:67335:67373	6131990	0	True				
ANR	6132482	UnaryOperationExpression	"! is_compatible_types ( & sym -> type , type )"		6131990	0					
ANR	6132483	UnaryOperator	!		6131990	0					
ANR	6132484	CallExpression	"is_compatible_types ( & sym -> type , type )"		6131990	1					
ANR	6132485	Callee	is_compatible_types		6131990	0					
ANR	6132486	Identifier	is_compatible_types		6131990	0					
ANR	6132487	ArgumentList	& sym -> type		6131990	1					
ANR	6132488	Argument	& sym -> type		6131990	0					
ANR	6132489	UnaryOperationExpression	& sym -> type		6131990	0					
ANR	6132490	UnaryOperator	&		6131990	0					
ANR	6132491	PtrMemberAccess	sym -> type		6131990	1					
ANR	6132492	Identifier	sym		6131990	0					
ANR	6132493	Identifier	type		6131990	1					
ANR	6132494	Argument	type		6131990	1					
ANR	6132495	Identifier	type		6131990	0					
ANR	6132496	CompoundStatement		107:49:2448:2448	6131990	1					
ANR	6132497	ExpressionStatement	"TCC_ERR ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"	2917:5:67383:67467	6131990	0	True				
ANR	6132498	CallExpression	"TCC_ERR ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"		6131990	0					
ANR	6132499	Callee	TCC_ERR		6131990	0					
ANR	6132500	Identifier	TCC_ERR		6131990	0					
ANR	6132501	ArgumentList	"""incompatible types for redefinition of '%s'"""		6131990	1					
ANR	6132502	Argument	"""incompatible types for redefinition of '%s'"""		6131990	0					
ANR	6132503	PrimaryExpression	"""incompatible types for redefinition of '%s'"""		6131990	0					
ANR	6132504	Argument	"get_tok_str ( v , NULL )"		6131990	1					
ANR	6132505	CallExpression	"get_tok_str ( v , NULL )"		6131990	0					
ANR	6132506	Callee	get_tok_str		6131990	0					
ANR	6132507	Identifier	get_tok_str		6131990	0					
ANR	6132508	ArgumentList	v		6131990	1					
ANR	6132509	Argument	v		6131990	0					
ANR	6132510	Identifier	v		6131990	0					
ANR	6132511	Argument	NULL		6131990	1					
ANR	6132512	Identifier	NULL		6131990	0					
ANR	6132513	IfStatement	if ( sym -> type . t & VT_EXTERN )		6131990	1					
ANR	6132514	Condition	sym -> type . t & VT_EXTERN	2920:8:67483:67505	6131990	0	True				
ANR	6132515	BitAndExpression	sym -> type . t & VT_EXTERN		6131990	0		&			
ANR	6132516	MemberAccess	sym -> type . t		6131990	0					
ANR	6132517	PtrMemberAccess	sym -> type		6131990	0					
ANR	6132518	Identifier	sym		6131990	0					
ANR	6132519	Identifier	type		6131990	1					
ANR	6132520	Identifier	t		6131990	1					
ANR	6132521	Identifier	VT_EXTERN		6131990	1					
ANR	6132522	CompoundStatement		111:33:2580:2580	6131990	1					
ANR	6132523	ExpressionStatement	sym -> type . t &= ~VT_EXTERN	2922:5:67574:67599	6131990	0	True				
ANR	6132524	AssignmentExpression	sym -> type . t &= ~VT_EXTERN		6131990	0		&=			
ANR	6132525	MemberAccess	sym -> type . t		6131990	0					
ANR	6132526	PtrMemberAccess	sym -> type		6131990	0					
ANR	6132527	Identifier	sym		6131990	0					
ANR	6132528	Identifier	type		6131990	1					
ANR	6132529	Identifier	t		6131990	1					
ANR	6132530	Identifier	~VT_EXTERN		6131990	1					
ANR	6132531	IfStatement	if ( ( sym -> type . t & VT_ARRAY ) && sym -> type . ref -> c < 0 && type -> ref -> c >= 0 )		6131990	1					
ANR	6132532	Condition	( sym -> type . t & VT_ARRAY ) && sym -> type . ref -> c < 0 && type -> ref -> c >= 0	2925:9:67684:67770	6131990	0	True				
ANR	6132533	AndExpression	( sym -> type . t & VT_ARRAY ) && sym -> type . ref -> c < 0 && type -> ref -> c >= 0		6131990	0		&&			
ANR	6132534	BitAndExpression	sym -> type . t & VT_ARRAY		6131990	0		&			
ANR	6132535	MemberAccess	sym -> type . t		6131990	0					
ANR	6132536	PtrMemberAccess	sym -> type		6131990	0					
ANR	6132537	Identifier	sym		6131990	0					
ANR	6132538	Identifier	type		6131990	1					
ANR	6132539	Identifier	t		6131990	1					
ANR	6132540	Identifier	VT_ARRAY		6131990	1					
ANR	6132541	AndExpression	sym -> type . ref -> c < 0 && type -> ref -> c >= 0		6131990	1		&&			
ANR	6132542	RelationalExpression	sym -> type . ref -> c < 0		6131990	0		<			
ANR	6132543	PtrMemberAccess	sym -> type . ref -> c		6131990	0					
ANR	6132544	MemberAccess	sym -> type . ref		6131990	0					
ANR	6132545	PtrMemberAccess	sym -> type		6131990	0					
ANR	6132546	Identifier	sym		6131990	0					
ANR	6132547	Identifier	type		6131990	1					
ANR	6132548	Identifier	ref		6131990	1					
ANR	6132549	Identifier	c		6131990	1					
ANR	6132550	PrimaryExpression	0		6131990	1					
ANR	6132551	RelationalExpression	type -> ref -> c >= 0		6131990	1		>=			
ANR	6132552	PtrMemberAccess	type -> ref -> c		6131990	0					
ANR	6132553	PtrMemberAccess	type -> ref		6131990	0					
ANR	6132554	Identifier	type		6131990	0					
ANR	6132555	Identifier	ref		6131990	1					
ANR	6132556	Identifier	c		6131990	1					
ANR	6132557	PrimaryExpression	0		6131990	1					
ANR	6132558	CompoundStatement		118:28:2845:2845	6131990	1					
ANR	6132559	ExpressionStatement	sym -> type . ref -> c = type -> ref -> c	2928:6:67781:67812	6131990	0	True				
ANR	6132560	AssignmentExpression	sym -> type . ref -> c = type -> ref -> c		6131990	0		=			
ANR	6132561	PtrMemberAccess	sym -> type . ref -> c		6131990	0					
ANR	6132562	MemberAccess	sym -> type . ref		6131990	0					
ANR	6132563	PtrMemberAccess	sym -> type		6131990	0					
ANR	6132564	Identifier	sym		6131990	0					
ANR	6132565	Identifier	type		6131990	1					
ANR	6132566	Identifier	ref		6131990	1					
ANR	6132567	Identifier	c		6131990	1					
ANR	6132568	PtrMemberAccess	type -> ref -> c		6131990	1					
ANR	6132569	PtrMemberAccess	type -> ref		6131990	0					
ANR	6132570	Identifier	type		6131990	0					
ANR	6132571	Identifier	ref		6131990	1					
ANR	6132572	Identifier	c		6131990	1					
ANR	6132573	ElseStatement	else		6131990	0					
ANR	6132574	CompoundStatement		121:11:2904:2904	6131990	0					
ANR	6132575	IfStatement	if ( ! has_init )		6131990	0					
ANR	6132576	Condition	! has_init	2938:9:68188:68196	6131990	0	True				
ANR	6132577	UnaryOperationExpression	! has_init		6131990	0					
ANR	6132578	UnaryOperator	!		6131990	0					
ANR	6132579	Identifier	has_init		6131990	1					
ANR	6132580	CompoundStatement		129:20:3271:3271	6131990	1					
ANR	6132581	GotoStatement	goto no_alloc ;	2939:6:68207:68220	6131990	0	True				
ANR	6132582	Identifier	no_alloc		6131990	0					
ANR	6132583	IfStatement	if ( v )		6131990	3					
ANR	6132584	Condition	v	2945:6:68251:68251	6131990	0	True				
ANR	6132585	Identifier	v		6131990	0					
ANR	6132586	CompoundStatement		136:9:3326:3326	6131990	1					
ANR	6132587	IfStatement	if ( scope != VT_CONST || ! sym )		6131990	0					
ANR	6132588	Condition	scope != VT_CONST || ! sym	2946:7:68263:68287	6131990	0	True				
ANR	6132589	OrExpression	scope != VT_CONST || ! sym		6131990	0		||			
ANR	6132590	EqualityExpression	scope != VT_CONST		6131990	0		!=			
ANR	6132591	Identifier	scope		6131990	0					
ANR	6132592	Identifier	VT_CONST		6131990	1					
ANR	6132593	UnaryOperationExpression	! sym		6131990	1					
ANR	6132594	UnaryOperator	!		6131990	0					
ANR	6132595	Identifier	sym		6131990	1					
ANR	6132596	CompoundStatement		137:34:3362:3362	6131990	1					
ANR	6132597	ExpressionStatement	"sym = sym_push ( v , type , r | VT_SYM , 0 )"	2947:4:68296:68335	6131990	0	True				
ANR	6132598	AssignmentExpression	"sym = sym_push ( v , type , r | VT_SYM , 0 )"		6131990	0		=			
ANR	6132599	Identifier	sym		6131990	0					
ANR	6132600	CallExpression	"sym_push ( v , type , r | VT_SYM , 0 )"		6131990	1					
ANR	6132601	Callee	sym_push		6131990	0					
ANR	6132602	Identifier	sym_push		6131990	0					
ANR	6132603	ArgumentList	v		6131990	1					
ANR	6132604	Argument	v		6131990	0					
ANR	6132605	Identifier	v		6131990	0					
ANR	6132606	Argument	type		6131990	1					
ANR	6132607	Identifier	type		6131990	0					
ANR	6132608	Argument	r | VT_SYM		6131990	2					
ANR	6132609	InclusiveOrExpression	r | VT_SYM		6131990	0		|			
ANR	6132610	Identifier	r		6131990	0					
ANR	6132611	Identifier	VT_SYM		6131990	1					
ANR	6132612	Argument	0		6131990	3					
ANR	6132613	PrimaryExpression	0		6131990	0					
ANR	6132614	ExpressionStatement	sym -> asm_label = asm_label	2948:4:68341:68367	6131990	1	True				
ANR	6132615	AssignmentExpression	sym -> asm_label = asm_label		6131990	0		=			
ANR	6132616	PtrMemberAccess	sym -> asm_label		6131990	0					
ANR	6132617	Identifier	sym		6131990	0					
ANR	6132618	Identifier	asm_label		6131990	1					
ANR	6132619	Identifier	asm_label		6131990	1					
ANR	6132620	ElseStatement	else		6131990	0					
ANR	6132621	CompoundStatement		142:3:3460:3479	6131990	0					
ANR	6132622	IdentifierDeclStatement	CValue cval = { 0 } ;	2951:3:68388:68407	6131990	0	True				
ANR	6132623	IdentifierDecl	cval = { 0 }		6131990	0					
ANR	6132624	IdentifierDeclType	CValue		6131990	0					
ANR	6132625	Identifier	cval		6131990	1					
ANR	6132626	AssignmentExpression	cval = { 0 }		6131990	2		=			
ANR	6132627	Identifier	cval		6131990	0					
ANR	6132628	InitializerList	0		6131990	1					
ANR	6132629	PrimaryExpression	0		6131990	0					
ANR	6132630	ExpressionStatement	"vsetc ( type , VT_CONST | VT_SYM , & cval )"	2952:3:68412:68450	6131990	1	True				
ANR	6132631	CallExpression	"vsetc ( type , VT_CONST | VT_SYM , & cval )"		6131990	0					
ANR	6132632	Callee	vsetc		6131990	0					
ANR	6132633	Identifier	vsetc		6131990	0					
ANR	6132634	ArgumentList	type		6131990	1					
ANR	6132635	Argument	type		6131990	0					
ANR	6132636	Identifier	type		6131990	0					
ANR	6132637	Argument	VT_CONST | VT_SYM		6131990	1					
ANR	6132638	InclusiveOrExpression	VT_CONST | VT_SYM		6131990	0		|			
ANR	6132639	Identifier	VT_CONST		6131990	0					
ANR	6132640	Identifier	VT_SYM		6131990	1					
ANR	6132641	Argument	& cval		6131990	2					
ANR	6132642	UnaryOperationExpression	& cval		6131990	0					
ANR	6132643	UnaryOperator	&		6131990	0					
ANR	6132644	Identifier	cval		6131990	1					
ANR	6132645	ExpressionStatement	vtop -> sym = sym	2953:3:68455:68470	6131990	2	True				
ANR	6132646	AssignmentExpression	vtop -> sym = sym		6131990	0		=			
ANR	6132647	PtrMemberAccess	vtop -> sym		6131990	0					
ANR	6132648	Identifier	vtop		6131990	0					
ANR	6132649	Identifier	sym		6131990	1					
ANR	6132650	Identifier	sym		6131990	1					
ANR	6132651	IfStatement	if ( ( type -> t & VT_WEAK ) && sym )		6131990	4					
ANR	6132652	Condition	( type -> t & VT_WEAK ) && sym	2956:6:68512:68537	6131990	0	True				
ANR	6132653	AndExpression	( type -> t & VT_WEAK ) && sym		6131990	0		&&			
ANR	6132654	BitAndExpression	type -> t & VT_WEAK		6131990	0		&			
ANR	6132655	PtrMemberAccess	type -> t		6131990	0					
ANR	6132656	Identifier	type		6131990	0					
ANR	6132657	Identifier	t		6131990	1					
ANR	6132658	Identifier	VT_WEAK		6131990	1					
ANR	6132659	Identifier	sym		6131990	1					
ANR	6132660	CompoundStatement		147:34:3612:3612	6131990	1					
ANR	6132661	ExpressionStatement	weaken_symbol ( sym )	2957:3:68545:68564	6131990	0	True				
ANR	6132662	CallExpression	weaken_symbol ( sym )		6131990	0					
ANR	6132663	Callee	weaken_symbol		6131990	0					
ANR	6132664	Identifier	weaken_symbol		6131990	0					
ANR	6132665	ArgumentList	sym		6131990	1					
ANR	6132666	Argument	sym		6131990	0					
ANR	6132667	Identifier	sym		6131990	0					
ANR	6132668	Label	no_alloc :	2960:0:68573:68581	6131990	13	True				
ANR	6132669	Identifier	no_alloc		6131990	0					
ANR	6132670	ExpressionStatement		2961:1:68584:68584	6131990	14	True				
ANR	6132671	ReturnType	static void		6131990	1					
ANR	6132672	Identifier	decl_initializer_alloc		6131990	2					
ANR	6132673	ParameterList	"CType * type , AttributeDef * ad , int r , int has_init , int v , char * asm_label , int scope"		6131990	3					
ANR	6132674	Parameter	CType * type	2810:35:64840:64850	6131990	0	True				
ANR	6132675	ParameterType	CType *		6131990	0					
ANR	6132676	Identifier	type		6131990	1					
ANR	6132677	Parameter	AttributeDef * ad	2810:48:64853:64868	6131990	1	True				
ANR	6132678	ParameterType	AttributeDef *		6131990	0					
ANR	6132679	Identifier	ad		6131990	1					
ANR	6132680	Parameter	int r	2810:66:64871:64875	6131990	2	True				
ANR	6132681	ParameterType	int		6131990	0					
ANR	6132682	Identifier	r		6131990	1					
ANR	6132683	Parameter	int has_init	2810:73:64878:64889	6131990	3	True				
ANR	6132684	ParameterType	int		6131990	0					
ANR	6132685	Identifier	has_init		6131990	1					
ANR	6132686	Parameter	int v	2810:87:64892:64896	6131990	4	True				
ANR	6132687	ParameterType	int		6131990	0					
ANR	6132688	Identifier	v		6131990	1					
ANR	6132689	Parameter	char * asm_label	2810:94:64899:64913	6131990	5	True				
ANR	6132690	ParameterType	char *		6131990	0					
ANR	6132691	Identifier	asm_label		6131990	1					
ANR	6132692	Parameter	int scope	2810:111:64916:64924	6131990	6	True				
ANR	6132693	ParameterType	int		6131990	0					
ANR	6132694	Identifier	scope		6131990	1					
ANR	6132695	CFGEntryNode	ENTRY		6131990		True				
ANR	6132696	CFGExitNode	EXIT		6131990		True				
ANR	6132697	Symbol	* * field		6131990						
ANR	6132698	Symbol	* flexible_array		6131990						
ANR	6132699	Symbol	type -> ref -> c		6131990						
ANR	6132700	Symbol	get_tok_str		6131990						
ANR	6132701	Symbol	init_str		6131990						
ANR	6132702	Symbol	* type -> ref		6131990						
ANR	6132703	Symbol	* flexible_array -> type . ref		6131990						
ANR	6132704	Symbol	sym -> type		6131990						
ANR	6132705	Symbol	& saved_parse_state		6131990						
ANR	6132706	Symbol	type		6131990						
ANR	6132707	Symbol	align		6131990						
ANR	6132708	Symbol	type_size		6131990						
ANR	6132709	Symbol	* * flexible_array		6131990						
ANR	6132710	Symbol	sym -> asm_label		6131990						
ANR	6132711	Symbol	vtop -> sym		6131990						
ANR	6132712	Symbol	sym -> type . ref -> c		6131990						
ANR	6132713	Symbol	flexible_array -> type . ref -> c		6131990						
ANR	6132714	Symbol	* * sym		6131990						
ANR	6132715	Symbol	saved_parse_state		6131990						
ANR	6132716	Symbol	* sym -> type . ref		6131990						
ANR	6132717	Symbol	VT_CONST		6131990						
ANR	6132718	Symbol	init_str . str		6131990						
ANR	6132719	Symbol	ad		6131990						
ANR	6132720	Symbol	NULL		6131990						
ANR	6132721	Symbol	level		6131990						
ANR	6132722	Symbol	TOK_STR		6131990						
ANR	6132723	Symbol	vtop		6131990						
ANR	6132724	Symbol	VT_VALMASK		6131990						
ANR	6132725	Symbol	VT_LOCAL		6131990						
ANR	6132726	Symbol	VT_SYM		6131990						
ANR	6132727	Symbol	* field		6131990						
ANR	6132728	Symbol	& flexible_array -> type		6131990						
ANR	6132729	Symbol	field -> type . t		6131990						
ANR	6132730	Symbol	tcc_nerr		6131990						
ANR	6132731	Symbol	* flexible_array -> type		6131990						
ANR	6132732	Symbol	~VT_EXTERN		6131990						
ANR	6132733	Symbol	* sym		6131990						
ANR	6132734	Symbol	* field -> type		6131990						
ANR	6132735	Symbol	size		6131990						
ANR	6132736	Symbol	field		6131990						
ANR	6132737	Symbol	macro_ptr		6131990						
ANR	6132738	Symbol	* field -> type . ref		6131990						
ANR	6132739	Symbol	type -> t		6131990						
ANR	6132740	Symbol	field -> type . ref -> c		6131990						
ANR	6132741	Symbol	TOK_LSTR		6131990						
ANR	6132742	Symbol	field -> next		6131990						
ANR	6132743	Symbol	loc		6131990						
ANR	6132744	Symbol	field -> type		6131990						
ANR	6132745	Symbol	& init_str		6131990						
ANR	6132746	Symbol	ad -> packed		6131990						
ANR	6132747	Symbol	sym		6131990						
ANR	6132748	Symbol	sym -> type . ref		6131990						
ANR	6132749	Symbol	pointed_size		6131990						
ANR	6132750	Symbol	* ad		6131990						
ANR	6132751	Symbol	VT_WEAK		6131990						
ANR	6132752	Symbol	VT_EXTERN		6131990						
ANR	6132753	Symbol	tok		6131990						
ANR	6132754	Symbol	& cval		6131990						
ANR	6132755	Symbol	ad -> aligned		6131990						
ANR	6132756	Symbol	is_compatible_types		6131990						
ANR	6132757	Symbol	* type		6131990						
ANR	6132758	Symbol	sym_find		6131990						
ANR	6132759	Symbol	scope		6131990						
ANR	6132760	Symbol	& sym -> type		6131990						
ANR	6132761	Symbol	sym -> type . t		6131990						
ANR	6132762	Symbol	* sym -> type		6131990						
ANR	6132763	Symbol	& align		6131990						
ANR	6132764	Symbol	flexible_array		6131990						
ANR	6132765	Symbol	addr		6131990						
ANR	6132766	Symbol	type -> ref		6131990						
ANR	6132767	Symbol	field -> type . ref		6131990						
ANR	6132768	Symbol	asm_label		6131990						
ANR	6132769	Symbol	flexible_array -> type . ref		6131990						
ANR	6132770	Symbol	cval		6131990						
ANR	6132771	Symbol	* vtop		6131990						
ANR	6132772	Symbol	r		6131990						
ANR	6132773	Symbol	is_struct		6131990						
ANR	6132774	Symbol	has_init		6131990						
ANR	6132775	Symbol	v		6131990						
ANR	6132776	Symbol	sym_push		6131990						
ANR	6132777	Symbol	flexible_array -> type		6131990						
ANR	6132778	Symbol	* * type		6131990						
ANR	6132779	Symbol	VT_ARRAY		6131990						
ANR	6132780	Function	func_decl_list	2966:0:68676:70045							
ANR	6132781	FunctionDef	func_decl_list (Sym * func_sym)		6132780	0					
ANR	6132782	CompoundStatement		2966:42:68718:70045	6132780	0					
ANR	6132783	IdentifierDeclStatement	AttributeDef ad ;	2967:1:68721:68736	6132780	0	True				
ANR	6132784	IdentifierDecl	ad		6132780	0					
ANR	6132785	IdentifierDeclType	AttributeDef		6132780	0					
ANR	6132786	Identifier	ad		6132780	1					
ANR	6132787	IdentifierDeclStatement	int v ;	2968:1:68739:68744	6132780	1	True				
ANR	6132788	IdentifierDecl	v		6132780	0					
ANR	6132789	IdentifierDeclType	int		6132780	0					
ANR	6132790	Identifier	v		6132780	1					
ANR	6132791	IdentifierDeclStatement	Sym * s = NULL ;	2969:1:68747:68760	6132780	2	True				
ANR	6132792	IdentifierDecl	* s = NULL		6132780	0					
ANR	6132793	IdentifierDeclType	Sym *		6132780	0					
ANR	6132794	Identifier	s		6132780	1					
ANR	6132795	AssignmentExpression	* s = NULL		6132780	2		=			
ANR	6132796	Identifier	NULL		6132780	0					
ANR	6132797	Identifier	NULL		6132780	1					
ANR	6132798	IdentifierDeclStatement	"CType btype , type ;"	2970:1:68763:68780	6132780	3	True				
ANR	6132799	IdentifierDecl	btype		6132780	0					
ANR	6132800	IdentifierDeclType	CType		6132780	0					
ANR	6132801	Identifier	btype		6132780	1					
ANR	6132802	IdentifierDecl	type		6132780	1					
ANR	6132803	IdentifierDeclType	CType		6132780	0					
ANR	6132804	Identifier	type		6132780	1					
ANR	6132805	WhileStatement	"while ( tcc_nerr ( ) == 0 && tok != '{' && tok != ';' && tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3 )"		6132780	4					
ANR	6132806	Condition	"tcc_nerr ( ) == 0 && tok != '{' && tok != ';' && tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3"	2973:8:68821:68961	6132780	0	True				
ANR	6132807	AndExpression	"tcc_nerr ( ) == 0 && tok != '{' && tok != ';' && tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3"		6132780	0		&&			
ANR	6132808	EqualityExpression	tcc_nerr ( ) == 0		6132780	0		==			
ANR	6132809	CallExpression	tcc_nerr ( )		6132780	0					
ANR	6132810	Callee	tcc_nerr		6132780	0					
ANR	6132811	Identifier	tcc_nerr		6132780	0					
ANR	6132812	ArgumentList			6132780	1					
ANR	6132813	PrimaryExpression	0		6132780	1					
ANR	6132814	AndExpression	"tok != '{' && tok != ';' && tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3"		6132780	1		&&			
ANR	6132815	EqualityExpression	tok != '{'		6132780	0		!=			
ANR	6132816	Identifier	tok		6132780	0					
ANR	6132817	PrimaryExpression	'{'		6132780	1					
ANR	6132818	AndExpression	"tok != ';' && tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3"		6132780	1		&&			
ANR	6132819	EqualityExpression	tok != ';'		6132780	0		!=			
ANR	6132820	Identifier	tok		6132780	0					
ANR	6132821	PrimaryExpression	';'		6132780	1					
ANR	6132822	AndExpression	"tok != ',' && tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3"		6132780	1		&&			
ANR	6132823	EqualityExpression	"tok != ','"		6132780	0		!=			
ANR	6132824	Identifier	tok		6132780	0					
ANR	6132825	PrimaryExpression	"','"		6132780	1					
ANR	6132826	AndExpression	tok != TOK_EOF && tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3		6132780	1		&&			
ANR	6132827	EqualityExpression	tok != TOK_EOF		6132780	0		!=			
ANR	6132828	Identifier	tok		6132780	0					
ANR	6132829	Identifier	TOK_EOF		6132780	1					
ANR	6132830	AndExpression	tok != TOK_ASM1 && tok != TOK_ASM2 && tok != TOK_ASM3		6132780	1		&&			
ANR	6132831	EqualityExpression	tok != TOK_ASM1		6132780	0		!=			
ANR	6132832	Identifier	tok		6132780	0					
ANR	6132833	Identifier	TOK_ASM1		6132780	1					
ANR	6132834	AndExpression	tok != TOK_ASM2 && tok != TOK_ASM3		6132780	1		&&			
ANR	6132835	EqualityExpression	tok != TOK_ASM2		6132780	0		!=			
ANR	6132836	Identifier	tok		6132780	0					
ANR	6132837	Identifier	TOK_ASM2		6132780	1					
ANR	6132838	EqualityExpression	tok != TOK_ASM3		6132780	1		!=			
ANR	6132839	Identifier	tok		6132780	0					
ANR	6132840	Identifier	TOK_ASM3		6132780	1					
ANR	6132841	CompoundStatement		9:63:245:245	6132780	1					
ANR	6132842	IfStatement	"if ( ! parse_btype ( & btype , & ad ) )"		6132780	0					
ANR	6132843	Condition	"! parse_btype ( & btype , & ad )"	2975:6:68972:68997	6132780	0	True				
ANR	6132844	UnaryOperationExpression	"! parse_btype ( & btype , & ad )"		6132780	0					
ANR	6132845	UnaryOperator	!		6132780	0					
ANR	6132846	CallExpression	"parse_btype ( & btype , & ad )"		6132780	1					
ANR	6132847	Callee	parse_btype		6132780	0					
ANR	6132848	Identifier	parse_btype		6132780	0					
ANR	6132849	ArgumentList	& btype		6132780	1					
ANR	6132850	Argument	& btype		6132780	0					
ANR	6132851	UnaryOperationExpression	& btype		6132780	0					
ANR	6132852	UnaryOperator	&		6132780	0					
ANR	6132853	Identifier	btype		6132780	1					
ANR	6132854	Argument	& ad		6132780	1					
ANR	6132855	UnaryOperationExpression	& ad		6132780	0					
ANR	6132856	UnaryOperator	&		6132780	0					
ANR	6132857	Identifier	ad		6132780	1					
ANR	6132858	CompoundStatement		10:34:281:281	6132780	1					
ANR	6132859	ExpressionStatement	"expect ( ""declaration list"" )"	2976:3:69005:69032	6132780	0	True				
ANR	6132860	CallExpression	"expect ( ""declaration list"" )"		6132780	0					
ANR	6132861	Callee	expect		6132780	0					
ANR	6132862	Identifier	expect		6132780	0					
ANR	6132863	ArgumentList	"""declaration list"""		6132780	1					
ANR	6132864	Argument	"""declaration list"""		6132780	0					
ANR	6132865	PrimaryExpression	"""declaration list"""		6132780	0					
ANR	6132866	IfStatement	if ( ( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';' )		6132780	1					
ANR	6132867	Condition	( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';'	2978:6:69044:69099	6132780	0	True				
ANR	6132868	AndExpression	( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';'		6132780	0		&&			
ANR	6132869	OrExpression	is_enum ( & btype ) || is_structured ( & btype )		6132780	0		||			
ANR	6132870	CallExpression	is_enum ( & btype )		6132780	0					
ANR	6132871	Callee	is_enum		6132780	0					
ANR	6132872	Identifier	is_enum		6132780	0					
ANR	6132873	ArgumentList	& btype		6132780	1					
ANR	6132874	Argument	& btype		6132780	0					
ANR	6132875	UnaryOperationExpression	& btype		6132780	0					
ANR	6132876	UnaryOperator	&		6132780	0					
ANR	6132877	Identifier	btype		6132780	1					
ANR	6132878	CallExpression	is_structured ( & btype )		6132780	1					
ANR	6132879	Callee	is_structured		6132780	0					
ANR	6132880	Identifier	is_structured		6132780	0					
ANR	6132881	ArgumentList	& btype		6132780	1					
ANR	6132882	Argument	& btype		6132780	0					
ANR	6132883	UnaryOperationExpression	& btype		6132780	0					
ANR	6132884	UnaryOperator	&		6132780	0					
ANR	6132885	Identifier	btype		6132780	1					
ANR	6132886	EqualityExpression	tok == ';'		6132780	1		==			
ANR	6132887	Identifier	tok		6132780	0					
ANR	6132888	PrimaryExpression	';'		6132780	1					
ANR	6132889	CompoundStatement		13:64:383:383	6132780	1					
ANR	6132890	ElseStatement	else		6132780	0					
ANR	6132891	CompoundStatement		15:9:431:431	6132780	0					
ANR	6132892	WhileStatement	while ( tcc_nerr ( ) == 0 )		6132780	0					
ANR	6132893	Condition	tcc_nerr ( ) == 0	2981:10:69162:69177	6132780	0	True				
ANR	6132894	EqualityExpression	tcc_nerr ( ) == 0		6132780	0		==			
ANR	6132895	CallExpression	tcc_nerr ( )		6132780	0					
ANR	6132896	Callee	tcc_nerr		6132780	0					
ANR	6132897	Identifier	tcc_nerr		6132780	0					
ANR	6132898	ArgumentList			6132780	1					
ANR	6132899	PrimaryExpression	0		6132780	1					
ANR	6132900	CompoundStatement		17:4:467:476	6132780	1					
ANR	6132901	IdentifierDeclStatement	int found ;	2982:4:69186:69195	6132780	0	True				
ANR	6132902	IdentifierDecl	found		6132780	0					
ANR	6132903	IdentifierDeclType	int		6132780	0					
ANR	6132904	Identifier	found		6132780	1					
ANR	6132905	ExpressionStatement	type = btype	2983:4:69201:69213	6132780	1	True				
ANR	6132906	AssignmentExpression	type = btype		6132780	0		=			
ANR	6132907	Identifier	type		6132780	0					
ANR	6132908	Identifier	btype		6132780	1					
ANR	6132909	ExpressionStatement	"type_decl ( & type , & ad , & v , TYPE_DIRECT )"	2984:4:69219:69258	6132780	2	True				
ANR	6132910	CallExpression	"type_decl ( & type , & ad , & v , TYPE_DIRECT )"		6132780	0					
ANR	6132911	Callee	type_decl		6132780	0					
ANR	6132912	Identifier	type_decl		6132780	0					
ANR	6132913	ArgumentList	& type		6132780	1					
ANR	6132914	Argument	& type		6132780	0					
ANR	6132915	UnaryOperationExpression	& type		6132780	0					
ANR	6132916	UnaryOperator	&		6132780	0					
ANR	6132917	Identifier	type		6132780	1					
ANR	6132918	Argument	& ad		6132780	1					
ANR	6132919	UnaryOperationExpression	& ad		6132780	0					
ANR	6132920	UnaryOperator	&		6132780	0					
ANR	6132921	Identifier	ad		6132780	1					
ANR	6132922	Argument	& v		6132780	2					
ANR	6132923	UnaryOperationExpression	& v		6132780	0					
ANR	6132924	UnaryOperator	&		6132780	0					
ANR	6132925	Identifier	v		6132780	1					
ANR	6132926	Argument	TYPE_DIRECT		6132780	3					
ANR	6132927	Identifier	TYPE_DIRECT		6132780	0					
ANR	6132928	ExpressionStatement	s = func_sym	2986:4:69316:69328	6132780	3	True				
ANR	6132929	AssignmentExpression	s = func_sym		6132780	0		=			
ANR	6132930	Identifier	s		6132780	0					
ANR	6132931	Identifier	func_sym		6132780	1					
ANR	6132932	ExpressionStatement	found = 0	2987:4:69334:69343	6132780	4	True				
ANR	6132933	AssignmentExpression	found = 0		6132780	0		=			
ANR	6132934	Identifier	found		6132780	0					
ANR	6132935	PrimaryExpression	0		6132780	1					
ANR	6132936	WhileStatement	while ( ( s = s -> next ) != NULL )		6132780	5					
ANR	6132937	Condition	( s = s -> next ) != NULL	2988:11:69356:69376	6132780	0	True				
ANR	6132938	EqualityExpression	( s = s -> next ) != NULL		6132780	0		!=			
ANR	6132939	AssignmentExpression	s = s -> next		6132780	0		=			
ANR	6132940	Identifier	s		6132780	0					
ANR	6132941	PtrMemberAccess	s -> next		6132780	1					
ANR	6132942	Identifier	s		6132780	0					
ANR	6132943	Identifier	next		6132780	1					
ANR	6132944	Identifier	NULL		6132780	1					
ANR	6132945	CompoundStatement		23:34:660:660	6132780	1					
ANR	6132946	IfStatement	if ( ( s -> v & ~SYM_FIELD ) == v )		6132780	0					
ANR	6132947	Condition	( s -> v & ~SYM_FIELD ) == v	2989:9:69390:69413	6132780	0	True				
ANR	6132948	EqualityExpression	( s -> v & ~SYM_FIELD ) == v		6132780	0		==			
ANR	6132949	BitAndExpression	s -> v & ~SYM_FIELD		6132780	0		&			
ANR	6132950	PtrMemberAccess	s -> v		6132780	0					
ANR	6132951	Identifier	s		6132780	0					
ANR	6132952	Identifier	v		6132780	1					
ANR	6132953	Identifier	~SYM_FIELD		6132780	1					
ANR	6132954	Identifier	v		6132780	1					
ANR	6132955	CompoundStatement		24:35:697:697	6132780	1					
ANR	6132956	ExpressionStatement	found = 1	2990:6:69424:69433	6132780	0	True				
ANR	6132957	AssignmentExpression	found = 1		6132780	0		=			
ANR	6132958	Identifier	found		6132780	0					
ANR	6132959	PrimaryExpression	1		6132780	1					
ANR	6132960	BreakStatement	break ;	2991:6:69441:69446	6132780	1	True				
ANR	6132961	IfStatement	if ( found == 0 )		6132780	6					
ANR	6132962	Condition	found == 0	2994:8:69469:69478	6132780	0	True				
ANR	6132963	EqualityExpression	found == 0		6132780	0		==			
ANR	6132964	Identifier	found		6132780	0					
ANR	6132965	PrimaryExpression	0		6132780	1					
ANR	6132966	CompoundStatement		29:20:762:762	6132780	1					
ANR	6132967	ExpressionStatement	"TCC_ERR ( ""declaration for parameter '%s' but no such parameter"" , get_tok_str ( v , NULL ) )"	2995:5:69488:69581	6132780	0	True				
ANR	6132968	CallExpression	"TCC_ERR ( ""declaration for parameter '%s' but no such parameter"" , get_tok_str ( v , NULL ) )"		6132780	0					
ANR	6132969	Callee	TCC_ERR		6132780	0					
ANR	6132970	Identifier	TCC_ERR		6132780	0					
ANR	6132971	ArgumentList	"""declaration for parameter '%s' but no such parameter"""		6132780	1					
ANR	6132972	Argument	"""declaration for parameter '%s' but no such parameter"""		6132780	0					
ANR	6132973	PrimaryExpression	"""declaration for parameter '%s' but no such parameter"""		6132780	0					
ANR	6132974	Argument	"get_tok_str ( v , NULL )"		6132780	1					
ANR	6132975	CallExpression	"get_tok_str ( v , NULL )"		6132780	0					
ANR	6132976	Callee	get_tok_str		6132780	0					
ANR	6132977	Identifier	get_tok_str		6132780	0					
ANR	6132978	ArgumentList	v		6132780	1					
ANR	6132979	Argument	v		6132780	0					
ANR	6132980	Identifier	v		6132780	0					
ANR	6132981	Argument	NULL		6132780	1					
ANR	6132982	Identifier	NULL		6132780	0					
ANR	6132983	IfStatement	if ( type . t & VT_STORAGE )		6132780	7					
ANR	6132984	Condition	type . t & VT_STORAGE	2999:8:69667:69685	6132780	0	True				
ANR	6132985	BitAndExpression	type . t & VT_STORAGE		6132780	0		&			
ANR	6132986	MemberAccess	type . t		6132780	0					
ANR	6132987	Identifier	type		6132780	0					
ANR	6132988	Identifier	t		6132780	1					
ANR	6132989	Identifier	VT_STORAGE		6132780	1					
ANR	6132990	CompoundStatement		34:29:969:969	6132780	1					
ANR	6132991	ExpressionStatement	"TCC_ERR ( ""storage class specified for '%s'"" , get_tok_str ( v , NULL ) )"	3000:5:69695:69762	6132780	0	True				
ANR	6132992	CallExpression	"TCC_ERR ( ""storage class specified for '%s'"" , get_tok_str ( v , NULL ) )"		6132780	0					
ANR	6132993	Callee	TCC_ERR		6132780	0					
ANR	6132994	Identifier	TCC_ERR		6132780	0					
ANR	6132995	ArgumentList	"""storage class specified for '%s'"""		6132780	1					
ANR	6132996	Argument	"""storage class specified for '%s'"""		6132780	0					
ANR	6132997	PrimaryExpression	"""storage class specified for '%s'"""		6132780	0					
ANR	6132998	Argument	"get_tok_str ( v , NULL )"		6132780	1					
ANR	6132999	CallExpression	"get_tok_str ( v , NULL )"		6132780	0					
ANR	6133000	Callee	get_tok_str		6132780	0					
ANR	6133001	Identifier	get_tok_str		6132780	0					
ANR	6133002	ArgumentList	v		6132780	1					
ANR	6133003	Argument	v		6132780	0					
ANR	6133004	Identifier	v		6132780	0					
ANR	6133005	Argument	NULL		6132780	1					
ANR	6133006	Identifier	NULL		6132780	0					
ANR	6133007	ExpressionStatement	convert_parameter_type ( & type )	3002:4:69774:69804	6132780	8	True				
ANR	6133008	CallExpression	convert_parameter_type ( & type )		6132780	0					
ANR	6133009	Callee	convert_parameter_type		6132780	0					
ANR	6133010	Identifier	convert_parameter_type		6132780	0					
ANR	6133011	ArgumentList	& type		6132780	1					
ANR	6133012	Argument	& type		6132780	0					
ANR	6133013	UnaryOperationExpression	& type		6132780	0					
ANR	6133014	UnaryOperator	&		6132780	0					
ANR	6133015	Identifier	type		6132780	1					
ANR	6133016	IfStatement	if ( s )		6132780	9					
ANR	6133017	Condition	s	3004:8:69886:69886	6132780	0	True				
ANR	6133018	Identifier	s		6132780	0					
ANR	6133019	CompoundStatement		39:11:1170:1170	6132780	1					
ANR	6133020	ExpressionStatement	s -> type = type	3005:5:69896:69910	6132780	0	True				
ANR	6133021	AssignmentExpression	s -> type = type		6132780	0		=			
ANR	6133022	PtrMemberAccess	s -> type		6132780	0					
ANR	6133023	Identifier	s		6132780	0					
ANR	6133024	Identifier	type		6132780	1					
ANR	6133025	Identifier	type		6132780	1					
ANR	6133026	IfStatement	"if ( tok == ',' )"		6132780	10					
ANR	6133027	Condition	"tok == ','"	3008:8:69960:69969	6132780	0	True				
ANR	6133028	EqualityExpression	"tok == ','"		6132780	0		==			
ANR	6133029	Identifier	tok		6132780	0					
ANR	6133030	PrimaryExpression	"','"		6132780	1					
ANR	6133031	CompoundStatement		43:20:1253:1253	6132780	1					
ANR	6133032	ExpressionStatement	next ( )	3009:5:69979:69986	6132780	0	True				
ANR	6133033	CallExpression	next ( )		6132780	0					
ANR	6133034	Callee	next		6132780	0					
ANR	6133035	Identifier	next		6132780	0					
ANR	6133036	ArgumentList			6132780	1					
ANR	6133037	ElseStatement	else		6132780	0					
ANR	6133038	CompoundStatement		45:11:1280:1280	6132780	0					
ANR	6133039	BreakStatement	break ;	3011:5:70006:70011	6132780	0	True				
ANR	6133040	ExpressionStatement	skip ( ';' )	3015:2:70030:70040	6132780	2	True				
ANR	6133041	CallExpression	skip ( ';' )		6132780	0					
ANR	6133042	Callee	skip		6132780	0					
ANR	6133043	Identifier	skip		6132780	0					
ANR	6133044	ArgumentList	';'		6132780	1					
ANR	6133045	Argument	';'		6132780	0					
ANR	6133046	PrimaryExpression	';'		6132780	0					
ANR	6133047	ReturnType	static void		6132780	1					
ANR	6133048	Identifier	func_decl_list		6132780	2					
ANR	6133049	ParameterList	Sym * func_sym		6132780	3					
ANR	6133050	Parameter	Sym * func_sym	2966:27:68703:68715	6132780	0	True				
ANR	6133051	ParameterType	Sym *		6132780	0					
ANR	6133052	Identifier	func_sym		6132780	1					
ANR	6133053	CFGEntryNode	ENTRY		6132780		True				
ANR	6133054	CFGExitNode	EXIT		6132780		True				
ANR	6133055	Symbol	& btype		6132780						
ANR	6133056	Symbol	s -> v		6132780						
ANR	6133057	Symbol	get_tok_str		6132780						
ANR	6133058	Symbol	TYPE_DIRECT		6132780						
ANR	6133059	Symbol	btype		6132780						
ANR	6133060	Symbol	func_sym		6132780						
ANR	6133061	Symbol	s -> next		6132780						
ANR	6133062	Symbol	type . t		6132780						
ANR	6133063	Symbol	type		6132780						
ANR	6133064	Symbol	& ad		6132780						
ANR	6133065	Symbol	tok		6132780						
ANR	6133066	Symbol	found		6132780						
ANR	6133067	Symbol	parse_btype		6132780						
ANR	6133068	Symbol	ad		6132780						
ANR	6133069	Symbol	NULL		6132780						
ANR	6133070	Symbol	is_enum		6132780						
ANR	6133071	Symbol	TOK_ASM3		6132780						
ANR	6133072	Symbol	TOK_ASM2		6132780						
ANR	6133073	Symbol	& type		6132780						
ANR	6133074	Symbol	TOK_ASM1		6132780						
ANR	6133075	Symbol	TOK_EOF		6132780						
ANR	6133076	Symbol	tcc_nerr		6132780						
ANR	6133077	Symbol	VT_STORAGE		6132780						
ANR	6133078	Symbol	s		6132780						
ANR	6133079	Symbol	~SYM_FIELD		6132780						
ANR	6133080	Symbol	v		6132780						
ANR	6133081	Symbol	is_structured		6132780						
ANR	6133082	Symbol	& v		6132780						
ANR	6133083	Symbol	* s		6132780						
ANR	6133084	Symbol	s -> type		6132780						
ANR	6133085	Function	decl0	3020:0:70113:74815							
ANR	6133086	FunctionDef	"decl0 (int l , int is_for_loop_init)"		6133085	0					
ANR	6133087	CompoundStatement		3020:46:70159:74815	6133085	0					
ANR	6133088	IdentifierDeclStatement	"int v , has_init , r ;"	3021:1:70162:70180	6133085	0	True				
ANR	6133089	IdentifierDecl	v		6133085	0					
ANR	6133090	IdentifierDeclType	int		6133085	0					
ANR	6133091	Identifier	v		6133085	1					
ANR	6133092	IdentifierDecl	has_init		6133085	1					
ANR	6133093	IdentifierDeclType	int		6133085	0					
ANR	6133094	Identifier	has_init		6133085	1					
ANR	6133095	IdentifierDecl	r		6133085	2					
ANR	6133096	IdentifierDeclType	int		6133085	0					
ANR	6133097	Identifier	r		6133085	1					
ANR	6133098	Statement	CType	3022:1:70183:70187	6133085	1	True				
ANR	6133099	Statement	type	3022:7:70189:70192	6133085	2	True				
ANR	6133100	Statement	=	3022:12:70194:70194	6133085	3	True				
ANR	6133101	CompoundStatement		3:14:36:36	6133085	4					
ANR	6133102	Statement	.	3022:15:70197:70197	6133085	0	True				
ANR	6133103	Statement	t	3022:16:70198:70198	6133085	1	True				
ANR	6133104	Statement	=	3022:18:70200:70200	6133085	2	True				
ANR	6133105	Statement	0	3022:20:70202:70202	6133085	3	True				
ANR	6133106	Statement	","	3022:21:70203:70203	6133085	4	True				
ANR	6133107	Statement	.	3022:23:70205:70205	6133085	5	True				
ANR	6133108	Statement	ref	3022:24:70206:70208	6133085	6	True				
ANR	6133109	Statement	=	3022:28:70210:70210	6133085	7	True				
ANR	6133110	Statement	NULL	3022:30:70212:70215	6133085	8	True				
ANR	6133111	Statement	","	3022:35:70217:70217	6133085	5	True				
ANR	6133112	Statement	btype	3022:37:70219:70223	6133085	6	True				
ANR	6133113	Statement	=	3022:43:70225:70225	6133085	7	True				
ANR	6133114	CompoundStatement		3:45:67:67	6133085	8					
ANR	6133115	Statement	.	3022:46:70228:70228	6133085	0	True				
ANR	6133116	Statement	t	3022:47:70229:70229	6133085	1	True				
ANR	6133117	Statement	=	3022:49:70231:70231	6133085	2	True				
ANR	6133118	Statement	0	3022:51:70233:70233	6133085	3	True				
ANR	6133119	Statement	","	3022:52:70234:70234	6133085	4	True				
ANR	6133120	Statement	.	3022:54:70236:70236	6133085	5	True				
ANR	6133121	Statement	ref	3022:55:70237:70239	6133085	6	True				
ANR	6133122	Statement	=	3022:59:70241:70241	6133085	7	True				
ANR	6133123	Statement	NULL	3022:61:70243:70246	6133085	8	True				
ANR	6133124	ExpressionStatement		3022:66:70248:70248	6133085	9	True				
ANR	6133125	IdentifierDeclStatement	Sym * sym = NULL ;	3023:1:70251:70266	6133085	10	True				
ANR	6133126	IdentifierDecl	* sym = NULL		6133085	0					
ANR	6133127	IdentifierDeclType	Sym *		6133085	0					
ANR	6133128	Identifier	sym		6133085	1					
ANR	6133129	AssignmentExpression	* sym = NULL		6133085	2		=			
ANR	6133130	Identifier	NULL		6133085	0					
ANR	6133131	Identifier	NULL		6133085	1					
ANR	6133132	IdentifierDeclStatement	AttributeDef ad ;	3024:1:70269:70284	6133085	11	True				
ANR	6133133	IdentifierDecl	ad		6133085	0					
ANR	6133134	IdentifierDeclType	AttributeDef		6133085	0					
ANR	6133135	Identifier	ad		6133085	1					
ANR	6133136	WhileStatement	while ( tcc_nerr ( ) == 0 )		6133085	12					
ANR	6133137	Condition	tcc_nerr ( ) == 0	3026:8:70295:70310	6133085	0	True				
ANR	6133138	EqualityExpression	tcc_nerr ( ) == 0		6133085	0		==			
ANR	6133139	CallExpression	tcc_nerr ( )		6133085	0					
ANR	6133140	Callee	tcc_nerr		6133085	0					
ANR	6133141	Identifier	tcc_nerr		6133085	0					
ANR	6133142	ArgumentList			6133085	1					
ANR	6133143	PrimaryExpression	0		6133085	1					
ANR	6133144	CompoundStatement		7:26:153:153	6133085	1					
ANR	6133145	IfStatement	"if ( ! parse_btype ( & btype , & ad ) )"		6133085	0					
ANR	6133146	Condition	"! parse_btype ( & btype , & ad )"	3027:6:70321:70346	6133085	0	True				
ANR	6133147	UnaryOperationExpression	"! parse_btype ( & btype , & ad )"		6133085	0					
ANR	6133148	UnaryOperator	!		6133085	0					
ANR	6133149	CallExpression	"parse_btype ( & btype , & ad )"		6133085	1					
ANR	6133150	Callee	parse_btype		6133085	0					
ANR	6133151	Identifier	parse_btype		6133085	0					
ANR	6133152	ArgumentList	& btype		6133085	1					
ANR	6133153	Argument	& btype		6133085	0					
ANR	6133154	UnaryOperationExpression	& btype		6133085	0					
ANR	6133155	UnaryOperator	&		6133085	0					
ANR	6133156	Identifier	btype		6133085	1					
ANR	6133157	Argument	& ad		6133085	1					
ANR	6133158	UnaryOperationExpression	& ad		6133085	0					
ANR	6133159	UnaryOperator	&		6133085	0					
ANR	6133160	Identifier	ad		6133085	1					
ANR	6133161	CompoundStatement		8:34:189:189	6133085	1					
ANR	6133162	IfStatement	if ( is_for_loop_init )		6133085	0					
ANR	6133163	Condition	is_for_loop_init	3028:7:70358:70373	6133085	0	True				
ANR	6133164	Identifier	is_for_loop_init		6133085	0					
ANR	6133165	CompoundStatement		9:25:216:216	6133085	1					
ANR	6133166	ReturnStatement	return 0 ;	3029:4:70382:70390	6133085	0	True				
ANR	6133167	PrimaryExpression	0		6133085	0					
ANR	6133168	IfStatement	if ( tok == ';' )		6133085	1					
ANR	6133169	Condition	tok == ';'	3033:7:70473:70482	6133085	0	True				
ANR	6133170	EqualityExpression	tok == ';'		6133085	0		==			
ANR	6133171	Identifier	tok		6133085	0					
ANR	6133172	PrimaryExpression	';'		6133085	1					
ANR	6133173	CompoundStatement		14:19:325:325	6133085	1					
ANR	6133174	ExpressionStatement	next ( )	3034:4:70491:70498	6133085	0	True				
ANR	6133175	CallExpression	next ( )		6133085	0					
ANR	6133176	Callee	next		6133085	0					
ANR	6133177	Identifier	next		6133085	0					
ANR	6133178	ArgumentList			6133085	1					
ANR	6133179	ContinueStatement	continue ;	3035:4:70504:70512	6133085	1	True				
ANR	6133180	IfStatement	if ( l == VT_CONST && ( tok == TOK_ASM1 || tok == TOK_ASM2 || tok == TOK_ASM3 ) )		6133085	2					
ANR	6133181	Condition	l == VT_CONST && ( tok == TOK_ASM1 || tok == TOK_ASM2 || tok == TOK_ASM3 )	3037:7:70526:70604	6133085	0	True				
ANR	6133182	AndExpression	l == VT_CONST && ( tok == TOK_ASM1 || tok == TOK_ASM2 || tok == TOK_ASM3 )		6133085	0		&&			
ANR	6133183	EqualityExpression	l == VT_CONST		6133085	0		==			
ANR	6133184	Identifier	l		6133085	0					
ANR	6133185	Identifier	VT_CONST		6133085	1					
ANR	6133186	OrExpression	tok == TOK_ASM1 || tok == TOK_ASM2 || tok == TOK_ASM3		6133085	1		||			
ANR	6133187	EqualityExpression	tok == TOK_ASM1		6133085	0		==			
ANR	6133188	Identifier	tok		6133085	0					
ANR	6133189	Identifier	TOK_ASM1		6133085	1					
ANR	6133190	OrExpression	tok == TOK_ASM2 || tok == TOK_ASM3		6133085	1		||			
ANR	6133191	EqualityExpression	tok == TOK_ASM2		6133085	0		==			
ANR	6133192	Identifier	tok		6133085	0					
ANR	6133193	Identifier	TOK_ASM2		6133085	1					
ANR	6133194	EqualityExpression	tok == TOK_ASM3		6133085	1		==			
ANR	6133195	Identifier	tok		6133085	0					
ANR	6133196	Identifier	TOK_ASM3		6133085	1					
ANR	6133197	CompoundStatement		19:64:447:447	6133085	1					
ANR	6133198	ExpressionStatement	"eprintf ( ""global asm not supported\\n"" )"	3041:4:70646:70684	6133085	0	True				
ANR	6133199	CallExpression	"eprintf ( ""global asm not supported\\n"" )"		6133085	0					
ANR	6133200	Callee	eprintf		6133085	0					
ANR	6133201	Identifier	eprintf		6133085	0					
ANR	6133202	ArgumentList	"""global asm not supported\\n"""		6133085	1					
ANR	6133203	Argument	"""global asm not supported\\n"""		6133085	0					
ANR	6133204	PrimaryExpression	"""global asm not supported\\n"""		6133085	0					
ANR	6133205	ReturnStatement	return 1 ;	3042:4:70690:70698	6133085	1	True				
ANR	6133206	PrimaryExpression	1		6133085	0					
ANR	6133207	ContinueStatement	continue ;	3045:4:70738:70746	6133085	2	True				
ANR	6133208	IfStatement	if ( l == VT_LOCAL || tok < TOK_DEFINE )		6133085	3					
ANR	6133209	Condition	l == VT_LOCAL || tok < TOK_DEFINE	3049:7:70874:70906	6133085	0	True				
ANR	6133210	OrExpression	l == VT_LOCAL || tok < TOK_DEFINE		6133085	0		||			
ANR	6133211	EqualityExpression	l == VT_LOCAL		6133085	0		==			
ANR	6133212	Identifier	l		6133085	0					
ANR	6133213	Identifier	VT_LOCAL		6133085	1					
ANR	6133214	RelationalExpression	tok < TOK_DEFINE		6133085	1		<			
ANR	6133215	Identifier	tok		6133085	0					
ANR	6133216	Identifier	TOK_DEFINE		6133085	1					
ANR	6133217	CompoundStatement		30:42:749:749	6133085	1					
ANR	6133218	BreakStatement	break ;	3050:4:70915:70920	6133085	0	True				
ANR	6133219	ExpressionStatement	btype . t = VT_INT32	3052:3:70930:70948	6133085	4	True				
ANR	6133220	AssignmentExpression	btype . t = VT_INT32		6133085	0		=			
ANR	6133221	MemberAccess	btype . t		6133085	0					
ANR	6133222	Identifier	btype		6133085	0					
ANR	6133223	Identifier	t		6133085	1					
ANR	6133224	Identifier	VT_INT32		6133085	1					
ANR	6133225	IfStatement	if ( ( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';' )		6133085	1					
ANR	6133226	Condition	( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';'	3054:6:70960:71015	6133085	0	True				
ANR	6133227	AndExpression	( is_enum ( & btype ) || is_structured ( & btype ) ) && tok == ';'		6133085	0		&&			
ANR	6133228	OrExpression	is_enum ( & btype ) || is_structured ( & btype )		6133085	0		||			
ANR	6133229	CallExpression	is_enum ( & btype )		6133085	0					
ANR	6133230	Callee	is_enum		6133085	0					
ANR	6133231	Identifier	is_enum		6133085	0					
ANR	6133232	ArgumentList	& btype		6133085	1					
ANR	6133233	Argument	& btype		6133085	0					
ANR	6133234	UnaryOperationExpression	& btype		6133085	0					
ANR	6133235	UnaryOperator	&		6133085	0					
ANR	6133236	Identifier	btype		6133085	1					
ANR	6133237	CallExpression	is_structured ( & btype )		6133085	1					
ANR	6133238	Callee	is_structured		6133085	0					
ANR	6133239	Identifier	is_structured		6133085	0					
ANR	6133240	ArgumentList	& btype		6133085	1					
ANR	6133241	Argument	& btype		6133085	0					
ANR	6133242	UnaryOperationExpression	& btype		6133085	0					
ANR	6133243	UnaryOperator	&		6133085	0					
ANR	6133244	Identifier	btype		6133085	1					
ANR	6133245	EqualityExpression	tok == ';'		6133085	1		==			
ANR	6133246	Identifier	tok		6133085	0					
ANR	6133247	PrimaryExpression	';'		6133085	1					
ANR	6133248	CompoundStatement		35:64:858:858	6133085	1					
ANR	6133249	ExpressionStatement	next ( )	3056:3:71060:71067	6133085	0	True				
ANR	6133250	CallExpression	next ( )		6133085	0					
ANR	6133251	Callee	next		6133085	0					
ANR	6133252	Identifier	next		6133085	0					
ANR	6133253	ArgumentList			6133085	1					
ANR	6133254	ContinueStatement	continue ;	3057:3:71072:71080	6133085	1	True				
ANR	6133255	WhileStatement	while ( tcc_nerr ( ) == 0 )		6133085	2					
ANR	6133256	Condition	tcc_nerr ( ) == 0	3060:9:71133:71148	6133085	0	True				
ANR	6133257	EqualityExpression	tcc_nerr ( ) == 0		6133085	0		==			
ANR	6133258	CallExpression	tcc_nerr ( )		6133085	0					
ANR	6133259	Callee	tcc_nerr		6133085	0					
ANR	6133260	Identifier	tcc_nerr		6133085	0					
ANR	6133261	ArgumentList			6133085	1					
ANR	6133262	PrimaryExpression	0		6133085	1					
ANR	6133263	CompoundStatement		41:27:991:991	6133085	1					
ANR	6133264	ExpressionStatement	type = btype	3061:3:71156:71168	6133085	0	True				
ANR	6133265	AssignmentExpression	type = btype		6133085	0		=			
ANR	6133266	Identifier	type		6133085	0					
ANR	6133267	Identifier	btype		6133085	1					
ANR	6133268	ExpressionStatement	"type_decl ( & type , & ad , & v , TYPE_DIRECT )"	3062:3:71173:71212	6133085	1	True				
ANR	6133269	CallExpression	"type_decl ( & type , & ad , & v , TYPE_DIRECT )"		6133085	0					
ANR	6133270	Callee	type_decl		6133085	0					
ANR	6133271	Identifier	type_decl		6133085	0					
ANR	6133272	ArgumentList	& type		6133085	1					
ANR	6133273	Argument	& type		6133085	0					
ANR	6133274	UnaryOperationExpression	& type		6133085	0					
ANR	6133275	UnaryOperator	&		6133085	0					
ANR	6133276	Identifier	type		6133085	1					
ANR	6133277	Argument	& ad		6133085	1					
ANR	6133278	UnaryOperationExpression	& ad		6133085	0					
ANR	6133279	UnaryOperator	&		6133085	0					
ANR	6133280	Identifier	ad		6133085	1					
ANR	6133281	Argument	& v		6133085	2					
ANR	6133282	UnaryOperationExpression	& v		6133085	0					
ANR	6133283	UnaryOperator	&		6133085	0					
ANR	6133284	Identifier	v		6133085	1					
ANR	6133285	Argument	TYPE_DIRECT		6133085	3					
ANR	6133286	Identifier	TYPE_DIRECT		6133085	0					
ANR	6133287	CompoundStatement		46:4:1069:1082	6133085	2					
ANR	6133288	IdentifierDeclStatement	char buf [ 500 ] ;	3065:4:71229:71242	6133085	0	True				
ANR	6133289	IdentifierDecl	buf [ 500 ]		6133085	0					
ANR	6133290	IdentifierDeclType	char [ 500 ]		6133085	0					
ANR	6133291	Identifier	buf		6133085	1					
ANR	6133292	PrimaryExpression	500		6133085	2					
ANR	6133293	ExpressionStatement	"type_to_str ( buf , sizeof ( buf ) , t , get_tok_str ( v , NULL ) )"	3066:4:71248:71304	6133085	1	True				
ANR	6133294	CallExpression	"type_to_str ( buf , sizeof ( buf ) , t , get_tok_str ( v , NULL ) )"		6133085	0					
ANR	6133295	Callee	type_to_str		6133085	0					
ANR	6133296	Identifier	type_to_str		6133085	0					
ANR	6133297	ArgumentList	buf		6133085	1					
ANR	6133298	Argument	buf		6133085	0					
ANR	6133299	Identifier	buf		6133085	0					
ANR	6133300	Argument	sizeof ( buf )		6133085	1					
ANR	6133301	SizeofExpression	sizeof ( buf )		6133085	0					
ANR	6133302	Sizeof	sizeof		6133085	0					
ANR	6133303	SizeofOperand	buf		6133085	1					
ANR	6133304	Argument	t		6133085	2					
ANR	6133305	Identifier	t		6133085	0					
ANR	6133306	Argument	"get_tok_str ( v , NULL )"		6133085	3					
ANR	6133307	CallExpression	"get_tok_str ( v , NULL )"		6133085	0					
ANR	6133308	Callee	get_tok_str		6133085	0					
ANR	6133309	Identifier	get_tok_str		6133085	0					
ANR	6133310	ArgumentList	v		6133085	1					
ANR	6133311	Argument	v		6133085	0					
ANR	6133312	Identifier	v		6133085	0					
ANR	6133313	Argument	NULL		6133085	1					
ANR	6133314	Identifier	NULL		6133085	0					
ANR	6133315	ExpressionStatement	"printf ( ""type = '%s'\\n"" , buf )"	3067:4:71310:71339	6133085	2	True				
ANR	6133316	CallExpression	"printf ( ""type = '%s'\\n"" , buf )"		6133085	0					
ANR	6133317	Callee	printf		6133085	0					
ANR	6133318	Identifier	printf		6133085	0					
ANR	6133319	ArgumentList	"""type = '%s'\\n"""		6133085	1					
ANR	6133320	Argument	"""type = '%s'\\n"""		6133085	0					
ANR	6133321	PrimaryExpression	"""type = '%s'\\n"""		6133085	0					
ANR	6133322	Argument	buf		6133085	1					
ANR	6133323	Identifier	buf		6133085	0					
ANR	6133324	IfStatement	if ( ( type . t & VT_BTYPE ) == VT_FUNC )		6133085	3					
ANR	6133325	Condition	( type . t & VT_BTYPE ) == VT_FUNC	3070:7:71360:71389	6133085	0	True				
ANR	6133326	EqualityExpression	( type . t & VT_BTYPE ) == VT_FUNC		6133085	0		==			
ANR	6133327	BitAndExpression	type . t & VT_BTYPE		6133085	0		&			
ANR	6133328	MemberAccess	type . t		6133085	0					
ANR	6133329	Identifier	type		6133085	0					
ANR	6133330	Identifier	t		6133085	1					
ANR	6133331	Identifier	VT_BTYPE		6133085	1					
ANR	6133332	Identifier	VT_FUNC		6133085	1					
ANR	6133333	CompoundStatement		51:39:1232:1232	6133085	1					
ANR	6133334	IfStatement	if ( ( type . t & VT_STATIC ) && ( l == VT_LOCAL ) )		6133085	0					
ANR	6133335	Condition	( type . t & VT_STATIC ) && ( l == VT_LOCAL )	3071:8:71402:71440	6133085	0	True				
ANR	6133336	AndExpression	( type . t & VT_STATIC ) && ( l == VT_LOCAL )		6133085	0		&&			
ANR	6133337	BitAndExpression	type . t & VT_STATIC		6133085	0		&			
ANR	6133338	MemberAccess	type . t		6133085	0					
ANR	6133339	Identifier	type		6133085	0					
ANR	6133340	Identifier	t		6133085	1					
ANR	6133341	Identifier	VT_STATIC		6133085	1					
ANR	6133342	EqualityExpression	l == VT_LOCAL		6133085	1		==			
ANR	6133343	Identifier	l		6133085	0					
ANR	6133344	Identifier	VT_LOCAL		6133085	1					
ANR	6133345	CompoundStatement		52:49:1283:1283	6133085	1					
ANR	6133346	ExpressionStatement	"tcc_error ( ""function without file scope cannot be static"" )"	3072:5:71450:71508	6133085	0	True				
ANR	6133347	CallExpression	"tcc_error ( ""function without file scope cannot be static"" )"		6133085	0					
ANR	6133348	Callee	tcc_error		6133085	0					
ANR	6133349	Identifier	tcc_error		6133085	0					
ANR	6133350	ArgumentList	"""function without file scope cannot be static"""		6133085	1					
ANR	6133351	Argument	"""function without file scope cannot be static"""		6133085	0					
ANR	6133352	PrimaryExpression	"""function without file scope cannot be static"""		6133085	0					
ANR	6133353	ReturnStatement	return 1 ;	3073:5:71515:71523	6133085	1	True				
ANR	6133354	PrimaryExpression	1		6133085	0					
ANR	6133355	ExpressionStatement	sym = type . ref	3077:4:71614:71628	6133085	1	True				
ANR	6133356	AssignmentExpression	sym = type . ref		6133085	0		=			
ANR	6133357	Identifier	sym		6133085	0					
ANR	6133358	MemberAccess	type . ref		6133085	1					
ANR	6133359	Identifier	type		6133085	0					
ANR	6133360	Identifier	ref		6133085	1					
ANR	6133361	IfStatement	if ( sym -> c == FUNC_OLD )		6133085	2					
ANR	6133362	Condition	sym -> c == FUNC_OLD	3078:8:71638:71655	6133085	0	True				
ANR	6133363	EqualityExpression	sym -> c == FUNC_OLD		6133085	0		==			
ANR	6133364	PtrMemberAccess	sym -> c		6133085	0					
ANR	6133365	Identifier	sym		6133085	0					
ANR	6133366	Identifier	c		6133085	1					
ANR	6133367	Identifier	FUNC_OLD		6133085	1					
ANR	6133368	CompoundStatement		59:28:1498:1498	6133085	1					
ANR	6133369	ExpressionStatement	func_decl_list ( sym )	3079:5:71665:71685	6133085	0	True				
ANR	6133370	CallExpression	func_decl_list ( sym )		6133085	0					
ANR	6133371	Callee	func_decl_list		6133085	0					
ANR	6133372	Identifier	func_decl_list		6133085	0					
ANR	6133373	ArgumentList	sym		6133085	1					
ANR	6133374	Argument	sym		6133085	0					
ANR	6133375	Identifier	sym		6133085	0					
ANR	6133376	IfStatement	if ( ad . weak )		6133085	4					
ANR	6133377	Condition	ad . weak	3083:7:71706:71712	6133085	0	True				
ANR	6133378	MemberAccess	ad . weak		6133085	0					
ANR	6133379	Identifier	ad		6133085	0					
ANR	6133380	Identifier	weak		6133085	1					
ANR	6133381	CompoundStatement		64:16:1555:1555	6133085	1					
ANR	6133382	ExpressionStatement	type . t |= VT_WEAK	3084:4:71721:71738	6133085	0	True				
ANR	6133383	AssignmentExpression	type . t |= VT_WEAK		6133085	0		|=			
ANR	6133384	MemberAccess	type . t		6133085	0					
ANR	6133385	Identifier	type		6133085	0					
ANR	6133386	Identifier	t		6133085	1					
ANR	6133387	Identifier	VT_WEAK		6133085	1					
ANR	6133388	IfStatement	if ( ad . func_import )		6133085	5					
ANR	6133389	Condition	ad . func_import	3087:7:71773:71786	6133085	0	True				
ANR	6133390	MemberAccess	ad . func_import		6133085	0					
ANR	6133391	Identifier	ad		6133085	0					
ANR	6133392	Identifier	func_import		6133085	1					
ANR	6133393	CompoundStatement		68:23:1629:1629	6133085	1					
ANR	6133394	ExpressionStatement	type . t |= VT_IMPORT	3088:4:71795:71814	6133085	0	True				
ANR	6133395	AssignmentExpression	type . t |= VT_IMPORT		6133085	0		|=			
ANR	6133396	MemberAccess	type . t		6133085	0					
ANR	6133397	Identifier	type		6133085	0					
ANR	6133398	Identifier	t		6133085	1					
ANR	6133399	Identifier	VT_IMPORT		6133085	1					
ANR	6133400	IfStatement	if ( ad . func_export )		6133085	6					
ANR	6133401	Condition	ad . func_export	3090:7:71828:71841	6133085	0	True				
ANR	6133402	MemberAccess	ad . func_export		6133085	0					
ANR	6133403	Identifier	ad		6133085	0					
ANR	6133404	Identifier	func_export		6133085	1					
ANR	6133405	CompoundStatement		71:23:1684:1684	6133085	1					
ANR	6133406	ExpressionStatement	type . t |= VT_EXPORT	3091:4:71850:71869	6133085	0	True				
ANR	6133407	AssignmentExpression	type . t |= VT_EXPORT		6133085	0		|=			
ANR	6133408	MemberAccess	type . t		6133085	0					
ANR	6133409	Identifier	type		6133085	0					
ANR	6133410	Identifier	t		6133085	1					
ANR	6133411	Identifier	VT_EXPORT		6133085	1					
ANR	6133412	IfStatement	if ( tok == '{' )		6133085	7					
ANR	6133413	Condition	tok == '{'	3094:7:71890:71899	6133085	0	True				
ANR	6133414	EqualityExpression	tok == '{'		6133085	0		==			
ANR	6133415	Identifier	tok		6133085	0					
ANR	6133416	PrimaryExpression	'{'		6133085	1					
ANR	6133417	CompoundStatement		75:19:1742:1742	6133085	1					
ANR	6133418	IfStatement	if ( l == VT_LOCAL )		6133085	0					
ANR	6133419	Condition	l == VT_LOCAL	3095:8:71912:71924	6133085	0	True				
ANR	6133420	EqualityExpression	l == VT_LOCAL		6133085	0		==			
ANR	6133421	Identifier	l		6133085	0					
ANR	6133422	Identifier	VT_LOCAL		6133085	1					
ANR	6133423	CompoundStatement		76:23:1767:1767	6133085	1					
ANR	6133424	ExpressionStatement	"tcc_error ( ""cannot use local functions"" )"	3096:5:71934:71974	6133085	0	True				
ANR	6133425	CallExpression	"tcc_error ( ""cannot use local functions"" )"		6133085	0					
ANR	6133426	Callee	tcc_error		6133085	0					
ANR	6133427	Identifier	tcc_error		6133085	0					
ANR	6133428	ArgumentList	"""cannot use local functions"""		6133085	1					
ANR	6133429	Argument	"""cannot use local functions"""		6133085	0					
ANR	6133430	PrimaryExpression	"""cannot use local functions"""		6133085	0					
ANR	6133431	ReturnStatement	return 1 ;	3097:5:71981:71989	6133085	1	True				
ANR	6133432	PrimaryExpression	1		6133085	0					
ANR	6133433	IfStatement	if ( ( type . t & VT_BTYPE ) != VT_FUNC )		6133085	1					
ANR	6133434	Condition	( type . t & VT_BTYPE ) != VT_FUNC	3099:8:72005:72034	6133085	0	True				
ANR	6133435	EqualityExpression	( type . t & VT_BTYPE ) != VT_FUNC		6133085	0		!=			
ANR	6133436	BitAndExpression	type . t & VT_BTYPE		6133085	0		&			
ANR	6133437	MemberAccess	type . t		6133085	0					
ANR	6133438	Identifier	type		6133085	0					
ANR	6133439	Identifier	t		6133085	1					
ANR	6133440	Identifier	VT_BTYPE		6133085	1					
ANR	6133441	Identifier	VT_FUNC		6133085	1					
ANR	6133442	CompoundStatement		80:40:1877:1877	6133085	1					
ANR	6133443	ExpressionStatement	"expect ( ""function definition"" )"	3100:5:72044:72074	6133085	0	True				
ANR	6133444	CallExpression	"expect ( ""function definition"" )"		6133085	0					
ANR	6133445	Callee	expect		6133085	0					
ANR	6133446	Identifier	expect		6133085	0					
ANR	6133447	ArgumentList	"""function definition"""		6133085	1					
ANR	6133448	Argument	"""function definition"""		6133085	0					
ANR	6133449	PrimaryExpression	"""function definition"""		6133085	0					
ANR	6133450	ExpressionStatement	sym = type . ref	3104:4:72148:72162	6133085	2	True				
ANR	6133451	AssignmentExpression	sym = type . ref		6133085	0		=			
ANR	6133452	Identifier	sym		6133085	0					
ANR	6133453	MemberAccess	type . ref		6133085	1					
ANR	6133454	Identifier	type		6133085	0					
ANR	6133455	Identifier	ref		6133085	1					
ANR	6133456	IfStatement	if ( sym )		6133085	3					
ANR	6133457	Condition	sym	3105:8:72172:72174	6133085	0	True				
ANR	6133458	Identifier	sym		6133085	0					
ANR	6133459	CompoundStatement		86:13:2017:2017	6133085	1					
ANR	6133460	WhileStatement	while ( ( sym = sym -> next ) != NULL )		6133085	0					
ANR	6133461	Condition	( sym = sym -> next ) != NULL	3106:12:72191:72215	6133085	0	True				
ANR	6133462	EqualityExpression	( sym = sym -> next ) != NULL		6133085	0		!=			
ANR	6133463	AssignmentExpression	sym = sym -> next		6133085	0		=			
ANR	6133464	Identifier	sym		6133085	0					
ANR	6133465	PtrMemberAccess	sym -> next		6133085	1					
ANR	6133466	Identifier	sym		6133085	0					
ANR	6133467	Identifier	next		6133085	1					
ANR	6133468	Identifier	NULL		6133085	1					
ANR	6133469	IfStatement	if ( ! ( sym -> v & ~SYM_FIELD ) )		6133085	1					
ANR	6133470	Condition	! ( sym -> v & ~SYM_FIELD )	3107:10:72228:72249	6133085	0	True				
ANR	6133471	UnaryOperationExpression	! ( sym -> v & ~SYM_FIELD )		6133085	0					
ANR	6133472	UnaryOperator	!		6133085	0					
ANR	6133473	BitAndExpression	sym -> v & ~SYM_FIELD		6133085	1		&			
ANR	6133474	PtrMemberAccess	sym -> v		6133085	0					
ANR	6133475	Identifier	sym		6133085	0					
ANR	6133476	Identifier	v		6133085	1					
ANR	6133477	Identifier	~SYM_FIELD		6133085	1					
ANR	6133478	CompoundStatement		88:34:2092:2092	6133085	1					
ANR	6133479	ExpressionStatement	"expect ( ""identifier"" )"	3108:7:72261:72282	6133085	0	True				
ANR	6133480	CallExpression	"expect ( ""identifier"" )"		6133085	0					
ANR	6133481	Callee	expect		6133085	0					
ANR	6133482	Identifier	expect		6133085	0					
ANR	6133483	ArgumentList	"""identifier"""		6133085	1					
ANR	6133484	Argument	"""identifier"""		6133085	0					
ANR	6133485	PrimaryExpression	"""identifier"""		6133085	0					
ANR	6133486	ElseStatement	else		6133085	0					
ANR	6133487	CompoundStatement		91:11:2143:2143	6133085	0					
ANR	6133488	ReturnStatement	return 0 ;	3111:5:72310:72318	6133085	0	True				
ANR	6133489	PrimaryExpression	0		6133085	0					
ANR	6133490	IfStatement	if ( ( type . t & ( VT_EXTERN | VT_INLINE ) ) == ( VT_EXTERN | VT_INLINE ) )		6133085	4					
ANR	6133491	Condition	( type . t & ( VT_EXTERN | VT_INLINE ) ) == ( VT_EXTERN | VT_INLINE )	3115:8:72446:72506	6133085	0	True				
ANR	6133492	EqualityExpression	( type . t & ( VT_EXTERN | VT_INLINE ) ) == ( VT_EXTERN | VT_INLINE )		6133085	0		==			
ANR	6133493	BitAndExpression	type . t & ( VT_EXTERN | VT_INLINE )		6133085	0		&			
ANR	6133494	MemberAccess	type . t		6133085	0					
ANR	6133495	Identifier	type		6133085	0					
ANR	6133496	Identifier	t		6133085	1					
ANR	6133497	InclusiveOrExpression	VT_EXTERN | VT_INLINE		6133085	1		|			
ANR	6133498	Identifier	VT_EXTERN		6133085	0					
ANR	6133499	Identifier	VT_INLINE		6133085	1					
ANR	6133500	InclusiveOrExpression	VT_EXTERN | VT_INLINE		6133085	1		|			
ANR	6133501	Identifier	VT_EXTERN		6133085	0					
ANR	6133502	Identifier	VT_INLINE		6133085	1					
ANR	6133503	CompoundStatement		96:71:2349:2349	6133085	1					
ANR	6133504	ExpressionStatement	type . t = ( type . t & ~VT_EXTERN ) | VT_STATIC	3116:5:72516:72558	6133085	0	True				
ANR	6133505	AssignmentExpression	type . t = ( type . t & ~VT_EXTERN ) | VT_STATIC		6133085	0		=			
ANR	6133506	MemberAccess	type . t		6133085	0					
ANR	6133507	Identifier	type		6133085	0					
ANR	6133508	Identifier	t		6133085	1					
ANR	6133509	InclusiveOrExpression	( type . t & ~VT_EXTERN ) | VT_STATIC		6133085	1		|			
ANR	6133510	BitAndExpression	type . t & ~VT_EXTERN		6133085	0		&			
ANR	6133511	MemberAccess	type . t		6133085	0					
ANR	6133512	Identifier	type		6133085	0					
ANR	6133513	Identifier	t		6133085	1					
ANR	6133514	Identifier	~VT_EXTERN		6133085	1					
ANR	6133515	Identifier	VT_STATIC		6133085	1					
ANR	6133516	ExpressionStatement	sym = sym_find ( v )	3119:4:72571:72589	6133085	5	True				
ANR	6133517	AssignmentExpression	sym = sym_find ( v )		6133085	0		=			
ANR	6133518	Identifier	sym		6133085	0					
ANR	6133519	CallExpression	sym_find ( v )		6133085	1					
ANR	6133520	Callee	sym_find		6133085	0					
ANR	6133521	Identifier	sym_find		6133085	0					
ANR	6133522	ArgumentList	v		6133085	1					
ANR	6133523	Argument	v		6133085	0					
ANR	6133524	Identifier	v		6133085	0					
ANR	6133525	IfStatement	if ( sym )		6133085	6					
ANR	6133526	Condition	sym	3120:8:72599:72601	6133085	0	True				
ANR	6133527	Identifier	sym		6133085	0					
ANR	6133528	CompoundStatement		101:13:2444:2444	6133085	1					
ANR	6133529	IfStatement	if ( ( sym -> type . t & VT_BTYPE ) != VT_FUNC )		6133085	0					
ANR	6133530	Condition	( sym -> type . t & VT_BTYPE ) != VT_FUNC	3121:9:72615:72649	6133085	0	True				
ANR	6133531	EqualityExpression	( sym -> type . t & VT_BTYPE ) != VT_FUNC		6133085	0		!=			
ANR	6133532	BitAndExpression	sym -> type . t & VT_BTYPE		6133085	0		&			
ANR	6133533	MemberAccess	sym -> type . t		6133085	0					
ANR	6133534	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133535	Identifier	sym		6133085	0					
ANR	6133536	Identifier	type		6133085	1					
ANR	6133537	Identifier	t		6133085	1					
ANR	6133538	Identifier	VT_BTYPE		6133085	1					
ANR	6133539	Identifier	VT_FUNC		6133085	1					
ANR	6133540	CompoundStatement		102:46:2492:2492	6133085	1					
ANR	6133541	GotoStatement	goto func_error1 ;	3122:6:72660:72676	6133085	0	True				
ANR	6133542	Identifier	func_error1		6133085	0					
ANR	6133543	ExpressionStatement	r = sym -> type . ref -> r	3125:5:72691:72711	6133085	1	True				
ANR	6133544	AssignmentExpression	r = sym -> type . ref -> r		6133085	0		=			
ANR	6133545	Identifier	r		6133085	0					
ANR	6133546	PtrMemberAccess	sym -> type . ref -> r		6133085	1					
ANR	6133547	MemberAccess	sym -> type . ref		6133085	0					
ANR	6133548	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133549	Identifier	sym		6133085	0					
ANR	6133550	Identifier	type		6133085	1					
ANR	6133551	Identifier	ref		6133085	1					
ANR	6133552	Identifier	r		6133085	1					
ANR	6133553	IfStatement	if ( FUNC_CALL ( r ) != FUNC_CDECL && FUNC_CALL ( type . ref -> r ) == FUNC_CDECL )		6133085	2					
ANR	6133554	Condition	FUNC_CALL ( r ) != FUNC_CDECL && FUNC_CALL ( type . ref -> r ) == FUNC_CDECL	3127:9:72777:72853	6133085	0	True				
ANR	6133555	AndExpression	FUNC_CALL ( r ) != FUNC_CDECL && FUNC_CALL ( type . ref -> r ) == FUNC_CDECL		6133085	0		&&			
ANR	6133556	EqualityExpression	FUNC_CALL ( r ) != FUNC_CDECL		6133085	0		!=			
ANR	6133557	CallExpression	FUNC_CALL ( r )		6133085	0					
ANR	6133558	Callee	FUNC_CALL		6133085	0					
ANR	6133559	Identifier	FUNC_CALL		6133085	0					
ANR	6133560	ArgumentList	r		6133085	1					
ANR	6133561	Argument	r		6133085	0					
ANR	6133562	Identifier	r		6133085	0					
ANR	6133563	Identifier	FUNC_CDECL		6133085	1					
ANR	6133564	EqualityExpression	FUNC_CALL ( type . ref -> r ) == FUNC_CDECL		6133085	1		==			
ANR	6133565	CallExpression	FUNC_CALL ( type . ref -> r )		6133085	0					
ANR	6133566	Callee	FUNC_CALL		6133085	0					
ANR	6133567	Identifier	FUNC_CALL		6133085	0					
ANR	6133568	ArgumentList	type . ref -> r		6133085	1					
ANR	6133569	Argument	type . ref -> r		6133085	0					
ANR	6133570	PtrMemberAccess	type . ref -> r		6133085	0					
ANR	6133571	MemberAccess	type . ref		6133085	0					
ANR	6133572	Identifier	type		6133085	0					
ANR	6133573	Identifier	ref		6133085	1					
ANR	6133574	Identifier	r		6133085	1					
ANR	6133575	Identifier	FUNC_CDECL		6133085	1					
ANR	6133576	CompoundStatement		109:51:2696:2696	6133085	1					
ANR	6133577	ExpressionStatement	FUNC_CALL ( type . ref -> r ) = FUNC_CALL ( r )	3129:6:72864:72903	6133085	0	True				
ANR	6133578	AssignmentExpression	FUNC_CALL ( type . ref -> r ) = FUNC_CALL ( r )		6133085	0		=			
ANR	6133579	CallExpression	FUNC_CALL ( type . ref -> r )		6133085	0					
ANR	6133580	Callee	FUNC_CALL		6133085	0					
ANR	6133581	Identifier	FUNC_CALL		6133085	0					
ANR	6133582	ArgumentList	type . ref -> r		6133085	1					
ANR	6133583	Argument	type . ref -> r		6133085	0					
ANR	6133584	PtrMemberAccess	type . ref -> r		6133085	0					
ANR	6133585	MemberAccess	type . ref		6133085	0					
ANR	6133586	Identifier	type		6133085	0					
ANR	6133587	Identifier	ref		6133085	1					
ANR	6133588	Identifier	r		6133085	1					
ANR	6133589	CallExpression	FUNC_CALL ( r )		6133085	1					
ANR	6133590	Callee	FUNC_CALL		6133085	0					
ANR	6133591	Identifier	FUNC_CALL		6133085	0					
ANR	6133592	ArgumentList	r		6133085	1					
ANR	6133593	Argument	r		6133085	0					
ANR	6133594	Identifier	r		6133085	0					
ANR	6133595	IfStatement	if ( FUNC_EXPORT ( r ) )		6133085	3					
ANR	6133596	Condition	FUNC_EXPORT ( r )	3133:9:72959:72973	6133085	0	True				
ANR	6133597	CallExpression	FUNC_EXPORT ( r )		6133085	0					
ANR	6133598	Callee	FUNC_EXPORT		6133085	0					
ANR	6133599	Identifier	FUNC_EXPORT		6133085	0					
ANR	6133600	ArgumentList	r		6133085	1					
ANR	6133601	Argument	r		6133085	0					
ANR	6133602	Identifier	r		6133085	0					
ANR	6133603	CompoundStatement		114:26:2816:2816	6133085	1					
ANR	6133604	ExpressionStatement	FUNC_EXPORT ( type . ref -> r ) = 1	3134:6:72984:73013	6133085	0	True				
ANR	6133605	AssignmentExpression	FUNC_EXPORT ( type . ref -> r ) = 1		6133085	0		=			
ANR	6133606	CallExpression	FUNC_EXPORT ( type . ref -> r )		6133085	0					
ANR	6133607	Callee	FUNC_EXPORT		6133085	0					
ANR	6133608	Identifier	FUNC_EXPORT		6133085	0					
ANR	6133609	ArgumentList	type . ref -> r		6133085	1					
ANR	6133610	Argument	type . ref -> r		6133085	0					
ANR	6133611	PtrMemberAccess	type . ref -> r		6133085	0					
ANR	6133612	MemberAccess	type . ref		6133085	0					
ANR	6133613	Identifier	type		6133085	0					
ANR	6133614	Identifier	ref		6133085	1					
ANR	6133615	Identifier	r		6133085	1					
ANR	6133616	PrimaryExpression	1		6133085	1					
ANR	6133617	IfStatement	if ( sym -> type . t & VT_STATIC )		6133085	4					
ANR	6133618	Condition	sym -> type . t & VT_STATIC	3138:9:73069:73091	6133085	0	True				
ANR	6133619	BitAndExpression	sym -> type . t & VT_STATIC		6133085	0		&			
ANR	6133620	MemberAccess	sym -> type . t		6133085	0					
ANR	6133621	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133622	Identifier	sym		6133085	0					
ANR	6133623	Identifier	type		6133085	1					
ANR	6133624	Identifier	t		6133085	1					
ANR	6133625	Identifier	VT_STATIC		6133085	1					
ANR	6133626	CompoundStatement		119:34:2934:2934	6133085	1					
ANR	6133627	ExpressionStatement	type . t = ( type . t & ~VT_EXTERN ) | VT_STATIC	3139:6:73102:73144	6133085	0	True				
ANR	6133628	AssignmentExpression	type . t = ( type . t & ~VT_EXTERN ) | VT_STATIC		6133085	0		=			
ANR	6133629	MemberAccess	type . t		6133085	0					
ANR	6133630	Identifier	type		6133085	0					
ANR	6133631	Identifier	t		6133085	1					
ANR	6133632	InclusiveOrExpression	( type . t & ~VT_EXTERN ) | VT_STATIC		6133085	1		|			
ANR	6133633	BitAndExpression	type . t & ~VT_EXTERN		6133085	0		&			
ANR	6133634	MemberAccess	type . t		6133085	0					
ANR	6133635	Identifier	type		6133085	0					
ANR	6133636	Identifier	t		6133085	1					
ANR	6133637	Identifier	~VT_EXTERN		6133085	1					
ANR	6133638	Identifier	VT_STATIC		6133085	1					
ANR	6133639	IfStatement	"if ( ! is_compatible_types ( & sym -> type , & type ) )"		6133085	5					
ANR	6133640	Condition	"! is_compatible_types ( & sym -> type , & type )"	3142:9:73163:73202	6133085	0	True				
ANR	6133641	UnaryOperationExpression	"! is_compatible_types ( & sym -> type , & type )"		6133085	0					
ANR	6133642	UnaryOperator	!		6133085	0					
ANR	6133643	CallExpression	"is_compatible_types ( & sym -> type , & type )"		6133085	1					
ANR	6133644	Callee	is_compatible_types		6133085	0					
ANR	6133645	Identifier	is_compatible_types		6133085	0					
ANR	6133646	ArgumentList	& sym -> type		6133085	1					
ANR	6133647	Argument	& sym -> type		6133085	0					
ANR	6133648	UnaryOperationExpression	& sym -> type		6133085	0					
ANR	6133649	UnaryOperator	&		6133085	0					
ANR	6133650	PtrMemberAccess	sym -> type		6133085	1					
ANR	6133651	Identifier	sym		6133085	0					
ANR	6133652	Identifier	type		6133085	1					
ANR	6133653	Argument	& type		6133085	1					
ANR	6133654	UnaryOperationExpression	& type		6133085	0					
ANR	6133655	UnaryOperator	&		6133085	0					
ANR	6133656	Identifier	type		6133085	1					
ANR	6133657	CompoundStatement		123:51:3045:3045	6133085	1					
ANR	6133658	Label	func_error1 :	3143:0:73207:73218	6133085	0	True				
ANR	6133659	Identifier	func_error1		6133085	0					
ANR	6133660	ExpressionStatement	"tcc_error ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"	3144:6:73226:73313	6133085	1	True				
ANR	6133661	CallExpression	"tcc_error ( ""incompatible types for redefinition of '%s'"" , get_tok_str ( v , NULL ) )"		6133085	0					
ANR	6133662	Callee	tcc_error		6133085	0					
ANR	6133663	Identifier	tcc_error		6133085	0					
ANR	6133664	ArgumentList	"""incompatible types for redefinition of '%s'"""		6133085	1					
ANR	6133665	Argument	"""incompatible types for redefinition of '%s'"""		6133085	0					
ANR	6133666	PrimaryExpression	"""incompatible types for redefinition of '%s'"""		6133085	0					
ANR	6133667	Argument	"get_tok_str ( v , NULL )"		6133085	1					
ANR	6133668	CallExpression	"get_tok_str ( v , NULL )"		6133085	0					
ANR	6133669	Callee	get_tok_str		6133085	0					
ANR	6133670	Identifier	get_tok_str		6133085	0					
ANR	6133671	ArgumentList	v		6133085	1					
ANR	6133672	Argument	v		6133085	0					
ANR	6133673	Identifier	v		6133085	0					
ANR	6133674	Argument	NULL		6133085	1					
ANR	6133675	Identifier	NULL		6133085	0					
ANR	6133676	ReturnStatement	return 1 ;	3146:6:73321:73329	6133085	2	True				
ANR	6133677	PrimaryExpression	1		6133085	0					
ANR	6133678	ExpressionStatement	sym -> type = type	3149:5:73407:73423	6133085	6	True				
ANR	6133679	AssignmentExpression	sym -> type = type		6133085	0		=			
ANR	6133680	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133681	Identifier	sym		6133085	0					
ANR	6133682	Identifier	type		6133085	1					
ANR	6133683	Identifier	type		6133085	1					
ANR	6133684	ElseStatement	else		6133085	0					
ANR	6133685	CompoundStatement		131:11:3276:3276	6133085	0					
ANR	6133686	ExpressionStatement	"sym = global_identifier_push ( v , type . t , 0 )"	3152:5:73474:73517	6133085	0	True				
ANR	6133687	AssignmentExpression	"sym = global_identifier_push ( v , type . t , 0 )"		6133085	0		=			
ANR	6133688	Identifier	sym		6133085	0					
ANR	6133689	CallExpression	"global_identifier_push ( v , type . t , 0 )"		6133085	1					
ANR	6133690	Callee	global_identifier_push		6133085	0					
ANR	6133691	Identifier	global_identifier_push		6133085	0					
ANR	6133692	ArgumentList	v		6133085	1					
ANR	6133693	Argument	v		6133085	0					
ANR	6133694	Identifier	v		6133085	0					
ANR	6133695	Argument	type . t		6133085	1					
ANR	6133696	MemberAccess	type . t		6133085	0					
ANR	6133697	Identifier	type		6133085	0					
ANR	6133698	Identifier	t		6133085	1					
ANR	6133699	Argument	0		6133085	2					
ANR	6133700	PrimaryExpression	0		6133085	0					
ANR	6133701	IfStatement	if ( ! sym )		6133085	1					
ANR	6133702	Condition	! sym	3153:9:73528:73531	6133085	0	True				
ANR	6133703	UnaryOperationExpression	! sym		6133085	0					
ANR	6133704	UnaryOperator	!		6133085	0					
ANR	6133705	Identifier	sym		6133085	1					
ANR	6133706	CompoundStatement		134:15:3374:3374	6133085	1					
ANR	6133707	ReturnStatement	return 1 ;	3154:6:73542:73550	6133085	0	True				
ANR	6133708	PrimaryExpression	1		6133085	0					
ANR	6133709	ExpressionStatement	sym -> type . ref = type . ref	3156:5:73564:73588	6133085	2	True				
ANR	6133710	AssignmentExpression	sym -> type . ref = type . ref		6133085	0		=			
ANR	6133711	MemberAccess	sym -> type . ref		6133085	0					
ANR	6133712	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133713	Identifier	sym		6133085	0					
ANR	6133714	Identifier	type		6133085	1					
ANR	6133715	Identifier	ref		6133085	1					
ANR	6133716	MemberAccess	type . ref		6133085	1					
ANR	6133717	Identifier	type		6133085	0					
ANR	6133718	Identifier	ref		6133085	1					
ANR	6133719	BreakStatement	break ;	3158:4:73600:73605	6133085	7	True				
ANR	6133720	ElseStatement	else		6133085	0					
ANR	6133721	CompoundStatement		140:10:3457:3457	6133085	0					
ANR	6133722	IfStatement	if ( btype . t & VT_TYPEDEF )		6133085	0					
ANR	6133723	Condition	btype . t & VT_TYPEDEF	3160:8:73627:73646	6133085	0	True				
ANR	6133724	BitAndExpression	btype . t & VT_TYPEDEF		6133085	0		&			
ANR	6133725	MemberAccess	btype . t		6133085	0					
ANR	6133726	Identifier	btype		6133085	0					
ANR	6133727	Identifier	t		6133085	1					
ANR	6133728	Identifier	VT_TYPEDEF		6133085	1					
ANR	6133729	CompoundStatement		155:5:3826:3839	6133085	1					
ANR	6133730	IfStatement	if ( tok != ';' )		6133085	0					
ANR	6133731	Condition	tok != ';'	3163:9:73734:73743	6133085	0	True				
ANR	6133732	EqualityExpression	tok != ';'		6133085	0		!=			
ANR	6133733	Identifier	tok		6133085	0					
ANR	6133734	PrimaryExpression	';'		6133085	1					
ANR	6133735	CompoundStatement		144:21:3586:3586	6133085	1					
ANR	6133736	ExpressionStatement	v = tok	3164:6:73754:73761	6133085	0	True				
ANR	6133737	AssignmentExpression	v = tok		6133085	0		=			
ANR	6133738	Identifier	v		6133085	0					
ANR	6133739	Identifier	tok		6133085	1					
ANR	6133740	ExpressionStatement	next ( )	3165:6:73769:73775	6133085	1	True				
ANR	6133741	CallExpression	next ( )		6133085	0					
ANR	6133742	Callee	next		6133085	0					
ANR	6133743	Identifier	next		6133085	0					
ANR	6133744	ArgumentList			6133085	1					
ANR	6133745	ExpressionStatement	"sym = sym_push ( v , & type , INT_ATTR ( & ad ) , 0 )"	3167:5:73789:73833	6133085	1	True				
ANR	6133746	AssignmentExpression	"sym = sym_push ( v , & type , INT_ATTR ( & ad ) , 0 )"		6133085	0		=			
ANR	6133747	Identifier	sym		6133085	0					
ANR	6133748	CallExpression	"sym_push ( v , & type , INT_ATTR ( & ad ) , 0 )"		6133085	1					
ANR	6133749	Callee	sym_push		6133085	0					
ANR	6133750	Identifier	sym_push		6133085	0					
ANR	6133751	ArgumentList	v		6133085	1					
ANR	6133752	Argument	v		6133085	0					
ANR	6133753	Identifier	v		6133085	0					
ANR	6133754	Argument	& type		6133085	1					
ANR	6133755	UnaryOperationExpression	& type		6133085	0					
ANR	6133756	UnaryOperator	&		6133085	0					
ANR	6133757	Identifier	type		6133085	1					
ANR	6133758	Argument	INT_ATTR ( & ad )		6133085	2					
ANR	6133759	CallExpression	INT_ATTR ( & ad )		6133085	0					
ANR	6133760	Callee	INT_ATTR		6133085	0					
ANR	6133761	Identifier	INT_ATTR		6133085	0					
ANR	6133762	ArgumentList	& ad		6133085	1					
ANR	6133763	Argument	& ad		6133085	0					
ANR	6133764	UnaryOperationExpression	& ad		6133085	0					
ANR	6133765	UnaryOperator	&		6133085	0					
ANR	6133766	Identifier	ad		6133085	1					
ANR	6133767	Argument	0		6133085	3					
ANR	6133768	PrimaryExpression	0		6133085	0					
ANR	6133769	IfStatement	if ( ! sym )		6133085	2					
ANR	6133770	Condition	! sym	3168:9:73844:73847	6133085	0	True				
ANR	6133771	UnaryOperationExpression	! sym		6133085	0					
ANR	6133772	UnaryOperator	!		6133085	0					
ANR	6133773	Identifier	sym		6133085	1					
ANR	6133774	CompoundStatement		149:15:3690:3690	6133085	1					
ANR	6133775	ReturnStatement	return 1 ;	3169:6:73858:73866	6133085	0	True				
ANR	6133776	PrimaryExpression	1		6133085	0					
ANR	6133777	ExpressionStatement	sym -> type . t |= VT_TYPEDEF	3171:5:73880:73905	6133085	3	True				
ANR	6133778	AssignmentExpression	sym -> type . t |= VT_TYPEDEF		6133085	0		|=			
ANR	6133779	MemberAccess	sym -> type . t		6133085	0					
ANR	6133780	PtrMemberAccess	sym -> type		6133085	0					
ANR	6133781	Identifier	sym		6133085	0					
ANR	6133782	Identifier	type		6133085	1					
ANR	6133783	Identifier	t		6133085	1					
ANR	6133784	Identifier	VT_TYPEDEF		6133085	1					
ANR	6133785	IdentifierDeclStatement	const char * alias = NULL ;	3173:5:73955:73979	6133085	4	True				
ANR	6133786	IdentifierDecl	* alias = NULL		6133085	0					
ANR	6133787	IdentifierDeclType	const char *		6133085	0					
ANR	6133788	Identifier	alias		6133085	1					
ANR	6133789	AssignmentExpression	* alias = NULL		6133085	2		=			
ANR	6133790	Identifier	NULL		6133085	0					
ANR	6133791	Identifier	NULL		6133085	1					
ANR	6133792	IdentifierDeclStatement	char buf [ 500 ] ;	3174:5:73986:73999	6133085	5	True				
ANR	6133793	IdentifierDecl	buf [ 500 ]		6133085	0					
ANR	6133794	IdentifierDeclType	char [ 500 ]		6133085	0					
ANR	6133795	Identifier	buf		6133085	1					
ANR	6133796	PrimaryExpression	500		6133085	2					
ANR	6133797	ExpressionStatement	"alias = get_tok_str ( v , NULL )"	3175:5:74006:74034	6133085	6	True				
ANR	6133798	AssignmentExpression	"alias = get_tok_str ( v , NULL )"		6133085	0		=			
ANR	6133799	Identifier	alias		6133085	0					
ANR	6133800	CallExpression	"get_tok_str ( v , NULL )"		6133085	1					
ANR	6133801	Callee	get_tok_str		6133085	0					
ANR	6133802	Identifier	get_tok_str		6133085	0					
ANR	6133803	ArgumentList	v		6133085	1					
ANR	6133804	Argument	v		6133085	0					
ANR	6133805	Identifier	v		6133085	0					
ANR	6133806	Argument	NULL		6133085	1					
ANR	6133807	Identifier	NULL		6133085	0					
ANR	6133808	ExpressionStatement	"type_to_str ( buf , sizeof ( buf ) , & sym -> type , NULL )"	3176:5:74041:74088	6133085	7	True				
ANR	6133809	CallExpression	"type_to_str ( buf , sizeof ( buf ) , & sym -> type , NULL )"		6133085	0					
ANR	6133810	Callee	type_to_str		6133085	0					
ANR	6133811	Identifier	type_to_str		6133085	0					
ANR	6133812	ArgumentList	buf		6133085	1					
ANR	6133813	Argument	buf		6133085	0					
ANR	6133814	Identifier	buf		6133085	0					
ANR	6133815	Argument	sizeof ( buf )		6133085	1					
ANR	6133816	SizeofExpression	sizeof ( buf )		6133085	0					
ANR	6133817	Sizeof	sizeof		6133085	0					
ANR	6133818	SizeofOperand	buf		6133085	1					
ANR	6133819	Argument	& sym -> type		6133085	2					
ANR	6133820	UnaryOperationExpression	& sym -> type		6133085	0					
ANR	6133821	UnaryOperator	&		6133085	0					
ANR	6133822	PtrMemberAccess	sym -> type		6133085	1					
ANR	6133823	Identifier	sym		6133085	0					
ANR	6133824	Identifier	type		6133085	1					
ANR	6133825	Argument	NULL		6133085	3					
ANR	6133826	Identifier	NULL		6133085	0					
ANR	6133827	ExpressionStatement	"tcc_appendf ( ""%s=typedef\\n"" , alias )"	3177:5:74095:74128	6133085	8	True				
ANR	6133828	CallExpression	"tcc_appendf ( ""%s=typedef\\n"" , alias )"		6133085	0					
ANR	6133829	Callee	tcc_appendf		6133085	0					
ANR	6133830	Identifier	tcc_appendf		6133085	0					
ANR	6133831	ArgumentList	"""%s=typedef\\n"""		6133085	1					
ANR	6133832	Argument	"""%s=typedef\\n"""		6133085	0					
ANR	6133833	PrimaryExpression	"""%s=typedef\\n"""		6133085	0					
ANR	6133834	Argument	alias		6133085	1					
ANR	6133835	Identifier	alias		6133085	0					
ANR	6133836	ExpressionStatement	"tcc_appendf ( ""typedef.%s=%s\\n"" , alias , buf )"	3178:5:74135:74176	6133085	9	True				
ANR	6133837	CallExpression	"tcc_appendf ( ""typedef.%s=%s\\n"" , alias , buf )"		6133085	0					
ANR	6133838	Callee	tcc_appendf		6133085	0					
ANR	6133839	Identifier	tcc_appendf		6133085	0					
ANR	6133840	ArgumentList	"""typedef.%s=%s\\n"""		6133085	1					
ANR	6133841	Argument	"""typedef.%s=%s\\n"""		6133085	0					
ANR	6133842	PrimaryExpression	"""typedef.%s=%s\\n"""		6133085	0					
ANR	6133843	Argument	alias		6133085	1					
ANR	6133844	Identifier	alias		6133085	0					
ANR	6133845	Argument	buf		6133085	2					
ANR	6133846	Identifier	buf		6133085	0					
ANR	6133847	ElseStatement	else		6133085	0					
ANR	6133848	CompoundStatement		160:11:4029:4029	6133085	0					
ANR	6133849	ExpressionStatement	r = 0	3180:5:74196:74201	6133085	0	True				
ANR	6133850	AssignmentExpression	r = 0		6133085	0		=			
ANR	6133851	Identifier	r		6133085	0					
ANR	6133852	PrimaryExpression	0		6133085	1					
ANR	6133853	IfStatement	if ( ( type . t & VT_BTYPE ) == VT_FUNC )		6133085	1					
ANR	6133854	Condition	( type . t & VT_BTYPE ) == VT_FUNC	3181:9:74212:74241	6133085	0	True				
ANR	6133855	EqualityExpression	( type . t & VT_BTYPE ) == VT_FUNC		6133085	0		==			
ANR	6133856	BitAndExpression	type . t & VT_BTYPE		6133085	0		&			
ANR	6133857	MemberAccess	type . t		6133085	0					
ANR	6133858	Identifier	type		6133085	0					
ANR	6133859	Identifier	t		6133085	1					
ANR	6133860	Identifier	VT_BTYPE		6133085	1					
ANR	6133861	Identifier	VT_FUNC		6133085	1					
ANR	6133862	CompoundStatement		162:41:4084:4084	6133085	1					
ANR	6133863	ExpressionStatement	type . ref -> r = INT_ATTR ( & ad )	3184:6:74343:74371	6133085	0	True				
ANR	6133864	AssignmentExpression	type . ref -> r = INT_ATTR ( & ad )		6133085	0		=			
ANR	6133865	PtrMemberAccess	type . ref -> r		6133085	0					
ANR	6133866	MemberAccess	type . ref		6133085	0					
ANR	6133867	Identifier	type		6133085	0					
ANR	6133868	Identifier	ref		6133085	1					
ANR	6133869	Identifier	r		6133085	1					
ANR	6133870	CallExpression	INT_ATTR ( & ad )		6133085	1					
ANR	6133871	Callee	INT_ATTR		6133085	0					
ANR	6133872	Identifier	INT_ATTR		6133085	0					
ANR	6133873	ArgumentList	& ad		6133085	1					
ANR	6133874	Argument	& ad		6133085	0					
ANR	6133875	UnaryOperationExpression	& ad		6133085	0					
ANR	6133876	UnaryOperator	&		6133085	0					
ANR	6133877	Identifier	ad		6133085	1					
ANR	6133878	ElseStatement	else		6133085	0					
ANR	6133879	IfStatement	if ( ! ( type . t & VT_ARRAY ) )		6133085	0					
ANR	6133880	Condition	! ( type . t & VT_ARRAY )	3185:16:74389:74408	6133085	0	True				
ANR	6133881	UnaryOperationExpression	! ( type . t & VT_ARRAY )		6133085	0					
ANR	6133882	UnaryOperator	!		6133085	0					
ANR	6133883	BitAndExpression	type . t & VT_ARRAY		6133085	1		&			
ANR	6133884	MemberAccess	type . t		6133085	0					
ANR	6133885	Identifier	type		6133085	0					
ANR	6133886	Identifier	t		6133085	1					
ANR	6133887	Identifier	VT_ARRAY		6133085	1					
ANR	6133888	CompoundStatement		166:38:4251:4251	6133085	1					
ANR	6133889	ExpressionStatement	r |= lvalue_type ( type . t )	3187:6:74451:74476	6133085	0	True				
ANR	6133890	AssignmentExpression	r |= lvalue_type ( type . t )		6133085	0		|=			
ANR	6133891	Identifier	r		6133085	0					
ANR	6133892	CallExpression	lvalue_type ( type . t )		6133085	1					
ANR	6133893	Callee	lvalue_type		6133085	0					
ANR	6133894	Identifier	lvalue_type		6133085	0					
ANR	6133895	ArgumentList	type . t		6133085	1					
ANR	6133896	Argument	type . t		6133085	0					
ANR	6133897	MemberAccess	type . t		6133085	0					
ANR	6133898	Identifier	type		6133085	0					
ANR	6133899	Identifier	t		6133085	1					
ANR	6133900	ExpressionStatement	has_init = ( tok == '=' )	3189:5:74490:74513	6133085	2	True				
ANR	6133901	AssignmentExpression	has_init = ( tok == '=' )		6133085	0		=			
ANR	6133902	Identifier	has_init		6133085	0					
ANR	6133903	EqualityExpression	tok == '='		6133085	1		==			
ANR	6133904	Identifier	tok		6133085	0					
ANR	6133905	PrimaryExpression	'='		6133085	1					
ANR	6133906	IfStatement	if ( has_init && ( type . t & VT_VLA ) )		6133085	3					
ANR	6133907	Condition	has_init && ( type . t & VT_VLA )	3190:9:74524:74552	6133085	0	True				
ANR	6133908	AndExpression	has_init && ( type . t & VT_VLA )		6133085	0		&&			
ANR	6133909	Identifier	has_init		6133085	0					
ANR	6133910	BitAndExpression	type . t & VT_VLA		6133085	1		&			
ANR	6133911	MemberAccess	type . t		6133085	0					
ANR	6133912	Identifier	type		6133085	0					
ANR	6133913	Identifier	t		6133085	1					
ANR	6133914	Identifier	VT_VLA		6133085	1					
ANR	6133915	CompoundStatement		171:40:4395:4395	6133085	1					
ANR	6133916	ExpressionStatement	"tcc_error ( ""Variable length array cannot be initialized"" )"	3191:6:74563:74620	6133085	0	True				
ANR	6133917	CallExpression	"tcc_error ( ""Variable length array cannot be initialized"" )"		6133085	0					
ANR	6133918	Callee	tcc_error		6133085	0					
ANR	6133919	Identifier	tcc_error		6133085	0					
ANR	6133920	ArgumentList	"""Variable length array cannot be initialized"""		6133085	1					
ANR	6133921	Argument	"""Variable length array cannot be initialized"""		6133085	0					
ANR	6133922	PrimaryExpression	"""Variable length array cannot be initialized"""		6133085	0					
ANR	6133923	ReturnStatement	return 1 ;	3192:6:74628:74636	6133085	1	True				
ANR	6133924	PrimaryExpression	1		6133085	0					
ANR	6133925	IfStatement	"if ( tok != ',' )"		6133085	1					
ANR	6133926	Condition	"tok != ','"	3195:8:74659:74668	6133085	0	True				
ANR	6133927	EqualityExpression	"tok != ','"		6133085	0		!=			
ANR	6133928	Identifier	tok		6133085	0					
ANR	6133929	PrimaryExpression	"','"		6133085	1					
ANR	6133930	CompoundStatement		176:20:4511:4511	6133085	1					
ANR	6133931	IfStatement	if ( is_for_loop_init )		6133085	0					
ANR	6133932	Condition	is_for_loop_init	3196:9:74682:74697	6133085	0	True				
ANR	6133933	Identifier	is_for_loop_init		6133085	0					
ANR	6133934	CompoundStatement		177:27:4540:4540	6133085	1					
ANR	6133935	ReturnStatement	return 1 ;	3197:6:74708:74716	6133085	0	True				
ANR	6133936	PrimaryExpression	1		6133085	0					
ANR	6133937	ExpressionStatement	skip ( ';' )	3199:5:74730:74740	6133085	1	True				
ANR	6133938	CallExpression	skip ( ';' )		6133085	0					
ANR	6133939	Callee	skip		6133085	0					
ANR	6133940	Identifier	skip		6133085	0					
ANR	6133941	ArgumentList	';'		6133085	1					
ANR	6133942	Argument	';'		6133085	0					
ANR	6133943	PrimaryExpression	';'		6133085	0					
ANR	6133944	BreakStatement	break ;	3200:5:74747:74752	6133085	2	True				
ANR	6133945	ExpressionStatement	next ( )	3202:4:74764:74771	6133085	2	True				
ANR	6133946	CallExpression	next ( )		6133085	0					
ANR	6133947	Callee	next		6133085	0					
ANR	6133948	Identifier	next		6133085	0					
ANR	6133949	ArgumentList			6133085	1					
ANR	6133950	ExpressionStatement	ad . aligned = 0	3204:3:74781:74795	6133085	8	True				
ANR	6133951	AssignmentExpression	ad . aligned = 0		6133085	0		=			
ANR	6133952	MemberAccess	ad . aligned		6133085	0					
ANR	6133953	Identifier	ad		6133085	0					
ANR	6133954	Identifier	aligned		6133085	1					
ANR	6133955	PrimaryExpression	0		6133085	1					
ANR	6133956	ReturnStatement	return 0 ;	3207:1:74805:74813	6133085	13	True				
ANR	6133957	PrimaryExpression	0		6133085	0					
ANR	6133958	ReturnType	static int		6133085	1					
ANR	6133959	Identifier	decl0		6133085	2					
ANR	6133960	ParameterList	"int l , int is_for_loop_init"		6133085	3					
ANR	6133961	Parameter	int l	3020:17:70130:70134	6133085	0	True				
ANR	6133962	ParameterType	int		6133085	0					
ANR	6133963	Identifier	l		6133085	1					
ANR	6133964	Parameter	int is_for_loop_init	3020:24:70137:70156	6133085	1	True				
ANR	6133965	ParameterType	int		6133085	0					
ANR	6133966	Identifier	is_for_loop_init		6133085	1					
ANR	6133967	CFGEntryNode	ENTRY		6133085		True				
ANR	6133968	CFGExitNode	EXIT		6133085		True				
ANR	6133969	Symbol	VT_IMPORT		6133085						
ANR	6133970	Symbol	get_tok_str		6133085						
ANR	6133971	Symbol	btype		6133085						
ANR	6133972	Symbol	sym -> type		6133085						
ANR	6133973	Symbol	type . ref -> r		6133085						
ANR	6133974	Symbol	type . t		6133085						
ANR	6133975	Symbol	sym -> type . ref -> r		6133085						
ANR	6133976	Symbol	type		6133085						
ANR	6133977	Symbol	* type . ref		6133085						
ANR	6133978	Symbol	type . ref		6133085						
ANR	6133979	Symbol	* * sym		6133085						
ANR	6133980	Symbol	* sym -> type . ref		6133085						
ANR	6133981	Symbol	parse_btype		6133085						
ANR	6133982	Symbol	VT_CONST		6133085						
ANR	6133983	Symbol	ad . func_import		6133085						
ANR	6133984	Symbol	NULL		6133085						
ANR	6133985	Symbol	ad		6133085						
ANR	6133986	Symbol	TOK_ASM3		6133085						
ANR	6133987	Symbol	TOK_ASM2		6133085						
ANR	6133988	Symbol	& type		6133085						
ANR	6133989	Symbol	FUNC_CDECL		6133085						
ANR	6133990	Symbol	TOK_ASM1		6133085						
ANR	6133991	Symbol	VT_LOCAL		6133085						
ANR	6133992	Symbol	tcc_nerr		6133085						
ANR	6133993	Symbol	VT_BTYPE		6133085						
ANR	6133994	Symbol	VT_FUNC		6133085						
ANR	6133995	Symbol	~VT_EXTERN		6133085						
ANR	6133996	Symbol	* sym		6133085						
ANR	6133997	Symbol	btype . t		6133085						
ANR	6133998	Symbol	FUNC_CALL		6133085						
ANR	6133999	Symbol	TOK_DEFINE		6133085						
ANR	6134000	Symbol	sym -> c		6133085						
ANR	6134001	Symbol	VT_STATIC		6133085						
ANR	6134002	Symbol	& btype		6133085						
ANR	6134003	Symbol	TYPE_DIRECT		6133085						
ANR	6134004	Symbol	sym		6133085						
ANR	6134005	Symbol	VT_VLA		6133085						
ANR	6134006	Symbol	sym -> type . ref		6133085						
ANR	6134007	Symbol	VT_TYPEDEF		6133085						
ANR	6134008	Symbol	VT_WEAK		6133085						
ANR	6134009	Symbol	& ad		6133085						
ANR	6134010	Symbol	VT_EXTERN		6133085						
ANR	6134011	Symbol	tok		6133085						
ANR	6134012	Symbol	sym -> v		6133085						
ANR	6134013	Symbol	is_compatible_types		6133085						
ANR	6134014	Symbol	sym_find		6133085						
ANR	6134015	Symbol	* type		6133085						
ANR	6134016	Symbol	sym -> type . t		6133085						
ANR	6134017	Symbol	* sym -> type		6133085						
ANR	6134018	Symbol	& sym -> type		6133085						
ANR	6134019	Symbol	ad . func_export		6133085						
ANR	6134020	Symbol	VT_EXPORT		6133085						
ANR	6134021	Symbol	alias		6133085						
ANR	6134022	Symbol	VT_INT32		6133085						
ANR	6134023	Symbol	sym -> next		6133085						
ANR	6134024	Symbol	is_enum		6133085						
ANR	6134025	Symbol	ad . weak		6133085						
ANR	6134026	Symbol	is_for_loop_init		6133085						
ANR	6134027	Symbol	VT_INLINE		6133085						
ANR	6134028	Symbol	l		6133085						
ANR	6134029	Symbol	INT_ATTR		6133085						
ANR	6134030	Symbol	FUNC_EXPORT		6133085						
ANR	6134031	Symbol	ad . aligned		6133085						
ANR	6134032	Symbol	r		6133085						
ANR	6134033	Symbol	buf		6133085						
ANR	6134034	Symbol	lvalue_type		6133085						
ANR	6134035	Symbol	~SYM_FIELD		6133085						
ANR	6134036	Symbol	t		6133085						
ANR	6134037	Symbol	has_init		6133085						
ANR	6134038	Symbol	global_identifier_push		6133085						
ANR	6134039	Symbol	v		6133085						
ANR	6134040	Symbol	FUNC_OLD		6133085						
ANR	6134041	Symbol	is_structured		6133085						
ANR	6134042	Symbol	sym_push		6133085						
ANR	6134043	Symbol	& v		6133085						
ANR	6134044	Symbol	VT_ARRAY		6133085						
ANR	6134045	Function	decl	3210:0:74818:74860							
ANR	6134046	FunctionDef	decl (int l)		6134045	0					
ANR	6134047	CompoundStatement		3210:25:74843:74860	6134045	0					
ANR	6134048	ExpressionStatement	"decl0 ( l , 0 )"	3211:1:74846:74858	6134045	0	True				
ANR	6134049	CallExpression	"decl0 ( l , 0 )"		6134045	0					
ANR	6134050	Callee	decl0		6134045	0					
ANR	6134051	Identifier	decl0		6134045	0					
ANR	6134052	ArgumentList	l		6134045	1					
ANR	6134053	Argument	l		6134045	0					
ANR	6134054	Identifier	l		6134045	0					
ANR	6134055	Argument	0		6134045	1					
ANR	6134056	PrimaryExpression	0		6134045	0					
ANR	6134057	ReturnType	ST_FUNC void		6134045	1					
ANR	6134058	Identifier	decl		6134045	2					
ANR	6134059	ParameterList	int l		6134045	3					
ANR	6134060	Parameter	int l	3210:18:74836:74840	6134045	0	True				
ANR	6134061	ParameterType	int		6134045	0					
ANR	6134062	Identifier	l		6134045	1					
ANR	6134063	CFGEntryNode	ENTRY		6134045		True				
ANR	6134064	CFGExitNode	EXIT		6134045		True				
ANR	6134065	Symbol	l		6134045						
