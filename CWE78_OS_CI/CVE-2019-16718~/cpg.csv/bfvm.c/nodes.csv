command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	479586	File	data/converged/CVE-2019-16718~_radare2/bfvm.c								
ANR	479587	Function	bfvm_op	8:0:146:332							
ANR	479588	FunctionDef	bfvm_op (BfvmCPU * c)		479587	0					
ANR	479589	CompoundStatement		8:31:177:332	479587	0					
ANR	479590	IdentifierDeclStatement	ut8 buf [ 4 ] = { 0 } ;	10:1:205:221	479587	0	True				
ANR	479591	IdentifierDecl	buf [ 4 ] = { 0 }		479587	0					
ANR	479592	IdentifierDeclType	ut8 [ 4 ]		479587	0					
ANR	479593	Identifier	buf		479587	1					
ANR	479594	PrimaryExpression	4		479587	2					
ANR	479595	AssignmentExpression	buf [ 4 ] = { 0 }		479587	3		=			
ANR	479596	Identifier	buf		479587	0					
ANR	479597	InitializerList	0		479587	1					
ANR	479598	PrimaryExpression	0		479587	0					
ANR	479599	IfStatement	"if ( c && c -> iob . read_at && ! c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 ) )"		479587	1					
ANR	479600	Condition	"c && c -> iob . read_at && ! c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 )"	11:5:228:293	479587	0	True				
ANR	479601	AndExpression	"c && c -> iob . read_at && ! c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 )"		479587	0		&&			
ANR	479602	Identifier	c		479587	0					
ANR	479603	AndExpression	"c -> iob . read_at && ! c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 )"		479587	1		&&			
ANR	479604	MemberAccess	c -> iob . read_at		479587	0					
ANR	479605	PtrMemberAccess	c -> iob		479587	0					
ANR	479606	Identifier	c		479587	0					
ANR	479607	Identifier	iob		479587	1					
ANR	479608	Identifier	read_at		479587	1					
ANR	479609	UnaryOperationExpression	"! c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 )"		479587	1					
ANR	479610	UnaryOperator	!		479587	0					
ANR	479611	CallExpression	"c -> iob . read_at ( c -> iob . io , c -> eip , buf , 4 )"		479587	1					
ANR	479612	Callee	c -> iob . read_at		479587	0					
ANR	479613	MemberAccess	c -> iob . read_at		479587	0					
ANR	479614	PtrMemberAccess	c -> iob		479587	0					
ANR	479615	Identifier	c		479587	0					
ANR	479616	Identifier	iob		479587	1					
ANR	479617	Identifier	read_at		479587	1					
ANR	479618	ArgumentList	c -> iob . io		479587	1					
ANR	479619	Argument	c -> iob . io		479587	0					
ANR	479620	MemberAccess	c -> iob . io		479587	0					
ANR	479621	PtrMemberAccess	c -> iob		479587	0					
ANR	479622	Identifier	c		479587	0					
ANR	479623	Identifier	iob		479587	1					
ANR	479624	Identifier	io		479587	1					
ANR	479625	Argument	c -> eip		479587	1					
ANR	479626	PtrMemberAccess	c -> eip		479587	0					
ANR	479627	Identifier	c		479587	0					
ANR	479628	Identifier	eip		479587	1					
ANR	479629	Argument	buf		479587	2					
ANR	479630	Identifier	buf		479587	0					
ANR	479631	Argument	4		479587	3					
ANR	479632	PrimaryExpression	4		479587	0					
ANR	479633	CompoundStatement		4:73:118:118	479587	1					
ANR	479634	ReturnStatement	return 0xff ;	12:2:300:311	479587	0	True				
ANR	479635	PrimaryExpression	0xff		479587	0					
ANR	479636	ReturnStatement	return buf [ 0 ] ;	14:1:317:330	479587	2	True				
ANR	479637	ArrayIndexing	buf [ 0 ]		479587	0					
ANR	479638	Identifier	buf		479587	0					
ANR	479639	PrimaryExpression	0		479587	1					
ANR	479640	ReturnType	static ut8		479587	1					
ANR	479641	Identifier	bfvm_op		479587	2					
ANR	479642	ParameterList	BfvmCPU * c		479587	3					
ANR	479643	Parameter	BfvmCPU * c	8:19:165:174	479587	0	True				
ANR	479644	ParameterType	BfvmCPU *		479587	0					
ANR	479645	Identifier	c		479587	1					
ANR	479646	CFGEntryNode	ENTRY		479587		True				
ANR	479647	CFGExitNode	EXIT		479587		True				
ANR	479648	Symbol	buf		479587						
ANR	479649	Symbol	* buf		479587						
ANR	479650	Symbol	c		479587						
ANR	479651	Symbol	c -> iob . io		479587						
ANR	479652	Symbol	c -> iob		479587						
ANR	479653	Symbol	c -> eip		479587						
ANR	479654	Symbol	c -> iob . read_at		479587						
ANR	479655	Symbol	* c		479587						
ANR	479656	Function	bfvm_in_trap	17:0:335:458							
ANR	479657	FunctionDef	bfvm_in_trap (BfvmCPU * c)		479656	0					
ANR	479658	CompoundStatement		17:35:370:458	479656	0					
ANR	479659	SwitchStatement	switch ( bfvm_op ( c ) )		479656	0					
ANR	479660	Condition	bfvm_op ( c )	18:9:381:391	479656	0	True				
ANR	479661	CallExpression	bfvm_op ( c )		479656	0					
ANR	479662	Callee	bfvm_op		479656	0					
ANR	479663	Identifier	bfvm_op		479656	0					
ANR	479664	ArgumentList	c		479656	1					
ANR	479665	Argument	c		479656	0					
ANR	479666	Identifier	c		479656	0					
ANR	479667	CompoundStatement		2:22:23:23	479656	1					
ANR	479668	Label	case 0x00 :	19:1:397:406	479656	0	True				
ANR	479669	Label	case 0xcc :	20:1:409:418	479656	1	True				
ANR	479670	Label	case 0xff :	21:1:421:430	479656	2	True				
ANR	479671	ReturnStatement	return 1 ;	22:2:434:442	479656	3	True				
ANR	479672	PrimaryExpression	1		479656	0					
ANR	479673	ReturnStatement	return 0 ;	24:1:448:456	479656	1	True				
ANR	479674	PrimaryExpression	0		479656	0					
ANR	479675	ReturnType	R_API int		479656	1					
ANR	479676	Identifier	bfvm_in_trap		479656	2					
ANR	479677	ParameterList	BfvmCPU * c		479656	3					
ANR	479678	Parameter	BfvmCPU * c	17:23:358:367	479656	0	True				
ANR	479679	ParameterType	BfvmCPU *		479656	0					
ANR	479680	Identifier	c		479656	1					
ANR	479681	CFGEntryNode	ENTRY		479656		True				
ANR	479682	CFGExitNode	EXIT		479656		True				
ANR	479683	Symbol	c		479656						
ANR	479684	Symbol	bfvm_op		479656						
ANR	479685	Function	bfvm_reset	27:0:461:819							
ANR	479686	FunctionDef	bfvm_reset (BfvmCPU * c)		479685	0					
ANR	479687	CompoundStatement		27:34:495:819	479685	0					
ANR	479688	ExpressionStatement	"memset ( c -> mem , '\\0' , c -> size )"	28:1:498:528	479685	0	True				
ANR	479689	CallExpression	"memset ( c -> mem , '\\0' , c -> size )"		479685	0					
ANR	479690	Callee	memset		479685	0					
ANR	479691	Identifier	memset		479685	0					
ANR	479692	ArgumentList	c -> mem		479685	1					
ANR	479693	Argument	c -> mem		479685	0					
ANR	479694	PtrMemberAccess	c -> mem		479685	0					
ANR	479695	Identifier	c		479685	0					
ANR	479696	Identifier	mem		479685	1					
ANR	479697	Argument	'\\0'		479685	1					
ANR	479698	PrimaryExpression	'\\0'		479685	0					
ANR	479699	Argument	c -> size		479685	2					
ANR	479700	PtrMemberAccess	c -> size		479685	0					
ANR	479701	Identifier	c		479685	0					
ANR	479702	Identifier	size		479685	1					
ANR	479703	ExpressionStatement	"memset ( c -> input_buf , '\\0' , c -> input_size )"	29:1:531:573	479685	1	True				
ANR	479704	CallExpression	"memset ( c -> input_buf , '\\0' , c -> input_size )"		479685	0					
ANR	479705	Callee	memset		479685	0					
ANR	479706	Identifier	memset		479685	0					
ANR	479707	ArgumentList	c -> input_buf		479685	1					
ANR	479708	Argument	c -> input_buf		479685	0					
ANR	479709	PtrMemberAccess	c -> input_buf		479685	0					
ANR	479710	Identifier	c		479685	0					
ANR	479711	Identifier	input_buf		479685	1					
ANR	479712	Argument	'\\0'		479685	1					
ANR	479713	PrimaryExpression	'\\0'		479685	0					
ANR	479714	Argument	c -> input_size		479685	2					
ANR	479715	PtrMemberAccess	c -> input_size		479685	0					
ANR	479716	Identifier	c		479685	0					
ANR	479717	Identifier	input_size		479685	1					
ANR	479718	ExpressionStatement	"memset ( c -> screen_buf , '\\0' , c -> screen_size )"	30:1:576:620	479685	2	True				
ANR	479719	CallExpression	"memset ( c -> screen_buf , '\\0' , c -> screen_size )"		479685	0					
ANR	479720	Callee	memset		479685	0					
ANR	479721	Identifier	memset		479685	0					
ANR	479722	ArgumentList	c -> screen_buf		479685	1					
ANR	479723	Argument	c -> screen_buf		479685	0					
ANR	479724	PtrMemberAccess	c -> screen_buf		479685	0					
ANR	479725	Identifier	c		479685	0					
ANR	479726	Identifier	screen_buf		479685	1					
ANR	479727	Argument	'\\0'		479685	1					
ANR	479728	PrimaryExpression	'\\0'		479685	0					
ANR	479729	Argument	c -> screen_size		479685	2					
ANR	479730	PtrMemberAccess	c -> screen_size		479685	0					
ANR	479731	Identifier	c		479685	0					
ANR	479732	Identifier	screen_size		479685	1					
ANR	479733	ExpressionStatement	c -> base = BFVM_DATA_ADDR	31:1:623:647	479685	3	True				
ANR	479734	AssignmentExpression	c -> base = BFVM_DATA_ADDR		479685	0		=			
ANR	479735	PtrMemberAccess	c -> base		479685	0					
ANR	479736	Identifier	c		479685	0					
ANR	479737	Identifier	base		479685	1					
ANR	479738	Identifier	BFVM_DATA_ADDR		479685	1					
ANR	479739	ExpressionStatement	c -> input = BFVM_INPUT_ADDR	32:1:650:676	479685	4	True				
ANR	479740	AssignmentExpression	c -> input = BFVM_INPUT_ADDR		479685	0		=			
ANR	479741	PtrMemberAccess	c -> input		479685	0					
ANR	479742	Identifier	c		479685	0					
ANR	479743	Identifier	input		479685	1					
ANR	479744	Identifier	BFVM_INPUT_ADDR		479685	1					
ANR	479745	ExpressionStatement	c -> input_idx = 0	33:1:679:695	479685	5	True				
ANR	479746	AssignmentExpression	c -> input_idx = 0		479685	0		=			
ANR	479747	PtrMemberAccess	c -> input_idx		479685	0					
ANR	479748	Identifier	c		479685	0					
ANR	479749	Identifier	input_idx		479685	1					
ANR	479750	PrimaryExpression	0		479685	1					
ANR	479751	ExpressionStatement	c -> screen = BFVM_SCREEN_ADDR	34:1:698:726	479685	6	True				
ANR	479752	AssignmentExpression	c -> screen = BFVM_SCREEN_ADDR		479685	0		=			
ANR	479753	PtrMemberAccess	c -> screen		479685	0					
ANR	479754	Identifier	c		479685	0					
ANR	479755	Identifier	screen		479685	1					
ANR	479756	Identifier	BFVM_SCREEN_ADDR		479685	1					
ANR	479757	ExpressionStatement	c -> screen_idx = 0	35:1:729:746	479685	7	True				
ANR	479758	AssignmentExpression	c -> screen_idx = 0		479685	0		=			
ANR	479759	PtrMemberAccess	c -> screen_idx		479685	0					
ANR	479760	Identifier	c		479685	0					
ANR	479761	Identifier	screen_idx		479685	1					
ANR	479762	PrimaryExpression	0		479685	1					
ANR	479763	ExpressionStatement	c -> eip = 0	36:1:749:759	479685	8	True				
ANR	479764	AssignmentExpression	c -> eip = 0		479685	0		=			
ANR	479765	PtrMemberAccess	c -> eip		479685	0					
ANR	479766	Identifier	c		479685	0					
ANR	479767	Identifier	eip		479685	1					
ANR	479768	PrimaryExpression	0		479685	1					
ANR	479769	ExpressionStatement	c -> ptr = 0	37:1:788:798	479685	9	True				
ANR	479770	AssignmentExpression	c -> ptr = 0		479685	0		=			
ANR	479771	PtrMemberAccess	c -> ptr		479685	0					
ANR	479772	Identifier	c		479685	0					
ANR	479773	Identifier	ptr		479685	1					
ANR	479774	PrimaryExpression	0		479685	1					
ANR	479775	ExpressionStatement	c -> esp = c -> base	38:1:801:817	479685	10	True				
ANR	479776	AssignmentExpression	c -> esp = c -> base		479685	0		=			
ANR	479777	PtrMemberAccess	c -> esp		479685	0					
ANR	479778	Identifier	c		479685	0					
ANR	479779	Identifier	esp		479685	1					
ANR	479780	PtrMemberAccess	c -> base		479685	1					
ANR	479781	Identifier	c		479685	0					
ANR	479782	Identifier	base		479685	1					
ANR	479783	ReturnType	R_API void		479685	1					
ANR	479784	Identifier	bfvm_reset		479685	2					
ANR	479785	ParameterList	BfvmCPU * c		479685	3					
ANR	479786	Parameter	BfvmCPU * c	27:22:483:492	479685	0	True				
ANR	479787	ParameterType	BfvmCPU *		479685	0					
ANR	479788	Identifier	c		479685	1					
ANR	479789	CFGEntryNode	ENTRY		479685		True				
ANR	479790	CFGExitNode	EXIT		479685		True				
ANR	479791	Symbol	c -> screen_idx		479685						
ANR	479792	Symbol	BFVM_DATA_ADDR		479685						
ANR	479793	Symbol	c -> input_idx		479685						
ANR	479794	Symbol	c -> screen		479685						
ANR	479795	Symbol	c		479685						
ANR	479796	Symbol	c -> ptr		479685						
ANR	479797	Symbol	c -> eip		479685						
ANR	479798	Symbol	c -> size		479685						
ANR	479799	Symbol	* c		479685						
ANR	479800	Symbol	BFVM_SCREEN_ADDR		479685						
ANR	479801	Symbol	c -> screen_buf		479685						
ANR	479802	Symbol	c -> esp		479685						
ANR	479803	Symbol	c -> base		479685						
ANR	479804	Symbol	c -> screen_size		479685						
ANR	479805	Symbol	c -> input_size		479685						
ANR	479806	Symbol	c -> input_buf		479685						
ANR	479807	Symbol	BFVM_INPUT_ADDR		479685						
ANR	479808	Symbol	c -> input		479685						
ANR	479809	Symbol	c -> mem		479685						
ANR	479810	Function	bfvm_init	41:0:822:1431							
ANR	479811	FunctionDef	"bfvm_init (BfvmCPU * c , ut32 size , int circular)"		479810	0					
ANR	479812	CompoundStatement		41:57:879:1431	479810	0					
ANR	479813	ExpressionStatement	"memset ( c , '\\0' , sizeof ( BfvmCPU ) )"	42:1:882:916	479810	0	True				
ANR	479814	CallExpression	"memset ( c , '\\0' , sizeof ( BfvmCPU ) )"		479810	0					
ANR	479815	Callee	memset		479810	0					
ANR	479816	Identifier	memset		479810	0					
ANR	479817	ArgumentList	c		479810	1					
ANR	479818	Argument	c		479810	0					
ANR	479819	Identifier	c		479810	0					
ANR	479820	Argument	'\\0'		479810	1					
ANR	479821	PrimaryExpression	'\\0'		479810	0					
ANR	479822	Argument	sizeof ( BfvmCPU )		479810	2					
ANR	479823	SizeofExpression	sizeof ( BfvmCPU )		479810	0					
ANR	479824	Sizeof	sizeof		479810	0					
ANR	479825	SizeofOperand	BfvmCPU		479810	1					
ANR	479826	ExpressionStatement	c -> mem = ( ut8 * ) malloc ( size )	45:1:932:961	479810	1	True				
ANR	479827	AssignmentExpression	c -> mem = ( ut8 * ) malloc ( size )		479810	0		=			
ANR	479828	PtrMemberAccess	c -> mem		479810	0					
ANR	479829	Identifier	c		479810	0					
ANR	479830	Identifier	mem		479810	1					
ANR	479831	CastExpression	( ut8 * ) malloc ( size )		479810	1					
ANR	479832	CastTarget	ut8 *		479810	0					
ANR	479833	CallExpression	malloc ( size )		479810	1					
ANR	479834	Callee	malloc		479810	0					
ANR	479835	Identifier	malloc		479810	0					
ANR	479836	ArgumentList	size		479810	1					
ANR	479837	Argument	size		479810	0					
ANR	479838	Identifier	size		479810	0					
ANR	479839	IfStatement	if ( ! c -> mem )		479810	2					
ANR	479840	Condition	! c -> mem	46:5:968:974	479810	0	True				
ANR	479841	UnaryOperationExpression	! c -> mem		479810	0					
ANR	479842	UnaryOperator	!		479810	0					
ANR	479843	PtrMemberAccess	c -> mem		479810	1					
ANR	479844	Identifier	c		479810	0					
ANR	479845	Identifier	mem		479810	1					
ANR	479846	CompoundStatement		6:14:97:97	479810	1					
ANR	479847	ReturnStatement	return 0 ;	47:2:981:989	479810	0	True				
ANR	479848	PrimaryExpression	0		479810	0					
ANR	479849	ExpressionStatement	"memset ( c -> mem , '\\0' , size )"	49:1:995:1022	479810	3	True				
ANR	479850	CallExpression	"memset ( c -> mem , '\\0' , size )"		479810	0					
ANR	479851	Callee	memset		479810	0					
ANR	479852	Identifier	memset		479810	0					
ANR	479853	ArgumentList	c -> mem		479810	1					
ANR	479854	Argument	c -> mem		479810	0					
ANR	479855	PtrMemberAccess	c -> mem		479810	0					
ANR	479856	Identifier	c		479810	0					
ANR	479857	Identifier	mem		479810	1					
ANR	479858	Argument	'\\0'		479810	1					
ANR	479859	PrimaryExpression	'\\0'		479810	0					
ANR	479860	Argument	size		479810	2					
ANR	479861	Identifier	size		479810	0					
ANR	479862	ExpressionStatement	c -> circular = circular	52:1:1039:1061	479810	4	True				
ANR	479863	AssignmentExpression	c -> circular = circular		479810	0		=			
ANR	479864	PtrMemberAccess	c -> circular		479810	0					
ANR	479865	Identifier	c		479810	0					
ANR	479866	Identifier	circular		479810	1					
ANR	479867	Identifier	circular		479810	1					
ANR	479868	ExpressionStatement	c -> size = size	53:1:1064:1078	479810	5	True				
ANR	479869	AssignmentExpression	c -> size = size		479810	0		=			
ANR	479870	PtrMemberAccess	c -> size		479810	0					
ANR	479871	Identifier	c		479810	0					
ANR	479872	Identifier	size		479810	1					
ANR	479873	Identifier	size		479810	1					
ANR	479874	ExpressionStatement	c -> screen = BFVM_SCREEN_ADDR	57:1:1148:1176	479810	6	True				
ANR	479875	AssignmentExpression	c -> screen = BFVM_SCREEN_ADDR		479810	0		=			
ANR	479876	PtrMemberAccess	c -> screen		479810	0					
ANR	479877	Identifier	c		479810	0					
ANR	479878	Identifier	screen		479810	1					
ANR	479879	Identifier	BFVM_SCREEN_ADDR		479810	1					
ANR	479880	ExpressionStatement	c -> screen_size = BFVM_SCREEN_SIZE	58:1:1179:1212	479810	7	True				
ANR	479881	AssignmentExpression	c -> screen_size = BFVM_SCREEN_SIZE		479810	0		=			
ANR	479882	PtrMemberAccess	c -> screen_size		479810	0					
ANR	479883	Identifier	c		479810	0					
ANR	479884	Identifier	screen_size		479810	1					
ANR	479885	Identifier	BFVM_SCREEN_SIZE		479810	1					
ANR	479886	ExpressionStatement	c -> screen_buf = ( ut8 * ) malloc ( c -> screen_size )	59:1:1215:1260	479810	8	True				
ANR	479887	AssignmentExpression	c -> screen_buf = ( ut8 * ) malloc ( c -> screen_size )		479810	0		=			
ANR	479888	PtrMemberAccess	c -> screen_buf		479810	0					
ANR	479889	Identifier	c		479810	0					
ANR	479890	Identifier	screen_buf		479810	1					
ANR	479891	CastExpression	( ut8 * ) malloc ( c -> screen_size )		479810	1					
ANR	479892	CastTarget	ut8 *		479810	0					
ANR	479893	CallExpression	malloc ( c -> screen_size )		479810	1					
ANR	479894	Callee	malloc		479810	0					
ANR	479895	Identifier	malloc		479810	0					
ANR	479896	ArgumentList	c -> screen_size		479810	1					
ANR	479897	Argument	c -> screen_size		479810	0					
ANR	479898	PtrMemberAccess	c -> screen_size		479810	0					
ANR	479899	Identifier	c		479810	0					
ANR	479900	Identifier	screen_size		479810	1					
ANR	479901	ExpressionStatement	"memset ( c -> screen_buf , '\\0' , c -> screen_size )"	60:1:1263:1307	479810	9	True				
ANR	479902	CallExpression	"memset ( c -> screen_buf , '\\0' , c -> screen_size )"		479810	0					
ANR	479903	Callee	memset		479810	0					
ANR	479904	Identifier	memset		479810	0					
ANR	479905	ArgumentList	c -> screen_buf		479810	1					
ANR	479906	Argument	c -> screen_buf		479810	0					
ANR	479907	PtrMemberAccess	c -> screen_buf		479810	0					
ANR	479908	Identifier	c		479810	0					
ANR	479909	Identifier	screen_buf		479810	1					
ANR	479910	Argument	'\\0'		479810	1					
ANR	479911	PrimaryExpression	'\\0'		479810	0					
ANR	479912	Argument	c -> screen_size		479810	2					
ANR	479913	PtrMemberAccess	c -> screen_size		479810	0					
ANR	479914	Identifier	c		479810	0					
ANR	479915	Identifier	screen_size		479810	1					
ANR	479916	ExpressionStatement	c -> input_size = BFVM_INPUT_SIZE	63:1:1324:1355	479810	10	True				
ANR	479917	AssignmentExpression	c -> input_size = BFVM_INPUT_SIZE		479810	0		=			
ANR	479918	PtrMemberAccess	c -> input_size		479810	0					
ANR	479919	Identifier	c		479810	0					
ANR	479920	Identifier	input_size		479810	1					
ANR	479921	Identifier	BFVM_INPUT_SIZE		479810	1					
ANR	479922	ExpressionStatement	c -> input_buf = ( ut8 * ) malloc ( c -> input_size )	64:1:1358:1401	479810	11	True				
ANR	479923	AssignmentExpression	c -> input_buf = ( ut8 * ) malloc ( c -> input_size )		479810	0		=			
ANR	479924	PtrMemberAccess	c -> input_buf		479810	0					
ANR	479925	Identifier	c		479810	0					
ANR	479926	Identifier	input_buf		479810	1					
ANR	479927	CastExpression	( ut8 * ) malloc ( c -> input_size )		479810	1					
ANR	479928	CastTarget	ut8 *		479810	0					
ANR	479929	CallExpression	malloc ( c -> input_size )		479810	1					
ANR	479930	Callee	malloc		479810	0					
ANR	479931	Identifier	malloc		479810	0					
ANR	479932	ArgumentList	c -> input_size		479810	1					
ANR	479933	Argument	c -> input_size		479810	0					
ANR	479934	PtrMemberAccess	c -> input_size		479810	0					
ANR	479935	Identifier	c		479810	0					
ANR	479936	Identifier	input_size		479810	1					
ANR	479937	ExpressionStatement	bfvm_reset ( c )	65:1:1404:1418	479810	12	True				
ANR	479938	CallExpression	bfvm_reset ( c )		479810	0					
ANR	479939	Callee	bfvm_reset		479810	0					
ANR	479940	Identifier	bfvm_reset		479810	0					
ANR	479941	ArgumentList	c		479810	1					
ANR	479942	Argument	c		479810	0					
ANR	479943	Identifier	c		479810	0					
ANR	479944	ReturnStatement	return 1 ;	66:1:1421:1429	479810	13	True				
ANR	479945	PrimaryExpression	1		479810	0					
ANR	479946	ReturnType	R_API int		479810	1					
ANR	479947	Identifier	bfvm_init		479810	2					
ANR	479948	ParameterList	"BfvmCPU * c , ut32 size , int circular"		479810	3					
ANR	479949	Parameter	BfvmCPU * c	41:20:842:851	479810	0	True				
ANR	479950	ParameterType	BfvmCPU *		479810	0					
ANR	479951	Identifier	c		479810	1					
ANR	479952	Parameter	ut32 size	41:32:854:862	479810	1	True				
ANR	479953	ParameterType	ut32		479810	0					
ANR	479954	Identifier	size		479810	1					
ANR	479955	Parameter	int circular	41:43:865:876	479810	2	True				
ANR	479956	ParameterType	int		479810	0					
ANR	479957	Identifier	circular		479810	1					
ANR	479958	CFGEntryNode	ENTRY		479810		True				
ANR	479959	CFGExitNode	EXIT		479810		True				
ANR	479960	Symbol	malloc		479810						
ANR	479961	Symbol	BFVM_INPUT_SIZE		479810						
ANR	479962	Symbol	c -> screen		479810						
ANR	479963	Symbol	c		479810						
ANR	479964	Symbol	BFVM_SCREEN_SIZE		479810						
ANR	479965	Symbol	c -> size		479810						
ANR	479966	Symbol	circular		479810						
ANR	479967	Symbol	* c		479810						
ANR	479968	Symbol	BFVM_SCREEN_ADDR		479810						
ANR	479969	Symbol	c -> circular		479810						
ANR	479970	Symbol	c -> screen_buf		479810						
ANR	479971	Symbol	c -> screen_size		479810						
ANR	479972	Symbol	size		479810						
ANR	479973	Symbol	c -> input_size		479810						
ANR	479974	Symbol	c -> input_buf		479810						
ANR	479975	Symbol	c -> mem		479810						
ANR	479976	Function	bfvm_new	69:0:1434:1583							
ANR	479977	FunctionDef	bfvm_new (RIOBind * iob)		479976	0					
ANR	479978	CompoundStatement		69:38:1472:1583	479976	0					
ANR	479979	IdentifierDeclStatement	BfvmCPU * c = R_NEW0 ( BfvmCPU ) ;	70:1:1475:1504	479976	0	True				
ANR	479980	IdentifierDecl	* c = R_NEW0 ( BfvmCPU )		479976	0					
ANR	479981	IdentifierDeclType	BfvmCPU *		479976	0					
ANR	479982	Identifier	c		479976	1					
ANR	479983	AssignmentExpression	* c = R_NEW0 ( BfvmCPU )		479976	2		=			
ANR	479984	Identifier	c		479976	0					
ANR	479985	CallExpression	R_NEW0 ( BfvmCPU )		479976	1					
ANR	479986	Callee	R_NEW0		479976	0					
ANR	479987	Identifier	R_NEW0		479976	0					
ANR	479988	ArgumentList	BfvmCPU		479976	1					
ANR	479989	Argument	BfvmCPU		479976	0					
ANR	479990	Identifier	BfvmCPU		479976	0					
ANR	479991	ExpressionStatement	"bfvm_init ( c , 4096 , 1 )"	71:1:1507:1529	479976	1	True				
ANR	479992	CallExpression	"bfvm_init ( c , 4096 , 1 )"		479976	0					
ANR	479993	Callee	bfvm_init		479976	0					
ANR	479994	Identifier	bfvm_init		479976	0					
ANR	479995	ArgumentList	c		479976	1					
ANR	479996	Argument	c		479976	0					
ANR	479997	Identifier	c		479976	0					
ANR	479998	Argument	4096		479976	1					
ANR	479999	PrimaryExpression	4096		479976	0					
ANR	480000	Argument	1		479976	2					
ANR	480001	PrimaryExpression	1		479976	0					
ANR	480002	ExpressionStatement	"memcpy ( & c -> iob , iob , sizeof ( c -> iob ) )"	72:1:1532:1570	479976	2	True				
ANR	480003	CallExpression	"memcpy ( & c -> iob , iob , sizeof ( c -> iob ) )"		479976	0					
ANR	480004	Callee	memcpy		479976	0					
ANR	480005	Identifier	memcpy		479976	0					
ANR	480006	ArgumentList	& c -> iob		479976	1					
ANR	480007	Argument	& c -> iob		479976	0					
ANR	480008	UnaryOperationExpression	& c -> iob		479976	0					
ANR	480009	UnaryOperator	&		479976	0					
ANR	480010	PtrMemberAccess	c -> iob		479976	1					
ANR	480011	Identifier	c		479976	0					
ANR	480012	Identifier	iob		479976	1					
ANR	480013	Argument	iob		479976	1					
ANR	480014	Identifier	iob		479976	0					
ANR	480015	Argument	sizeof ( c -> iob )		479976	2					
ANR	480016	SizeofExpression	sizeof ( c -> iob )		479976	0					
ANR	480017	Sizeof	sizeof		479976	0					
ANR	480018	PtrMemberAccess	c -> iob		479976	1					
ANR	480019	Identifier	c		479976	0					
ANR	480020	Identifier	iob		479976	1					
ANR	480021	ReturnStatement	return c ;	73:1:1573:1581	479976	3	True				
ANR	480022	Identifier	c		479976	0					
ANR	480023	ReturnType	R_API BfvmCPU *		479976	1					
ANR	480024	Identifier	bfvm_new		479976	2					
ANR	480025	ParameterList	RIOBind * iob		479976	3					
ANR	480026	Parameter	RIOBind * iob	69:24:1458:1469	479976	0	True				
ANR	480027	ParameterType	RIOBind *		479976	0					
ANR	480028	Identifier	iob		479976	1					
ANR	480029	CFGEntryNode	ENTRY		479976		True				
ANR	480030	CFGExitNode	EXIT		479976		True				
ANR	480031	Symbol	& c -> iob		479976						
ANR	480032	Symbol	R_NEW0		479976						
ANR	480033	Symbol	c		479976						
ANR	480034	Symbol	c -> iob		479976						
ANR	480035	Symbol	BfvmCPU		479976						
ANR	480036	Symbol	iob		479976						
ANR	480037	Symbol	* c		479976						
ANR	480038	Function	bfvm_free	76:0:1586:1722							
ANR	480039	FunctionDef	bfvm_free (BfvmCPU * c)		480038	0					
ANR	480040	CompoundStatement		76:37:1623:1722	480038	0					
ANR	480041	ExpressionStatement	free ( c -> mem )	77:1:1626:1639	480038	0	True				
ANR	480042	CallExpression	free ( c -> mem )		480038	0					
ANR	480043	Callee	free		480038	0					
ANR	480044	Identifier	free		480038	0					
ANR	480045	ArgumentList	c -> mem		480038	1					
ANR	480046	Argument	c -> mem		480038	0					
ANR	480047	PtrMemberAccess	c -> mem		480038	0					
ANR	480048	Identifier	c		480038	0					
ANR	480049	Identifier	mem		480038	1					
ANR	480050	ExpressionStatement	c -> mem = 0	78:1:1642:1652	480038	1	True				
ANR	480051	AssignmentExpression	c -> mem = 0		480038	0		=			
ANR	480052	PtrMemberAccess	c -> mem		480038	0					
ANR	480053	Identifier	c		480038	0					
ANR	480054	Identifier	mem		480038	1					
ANR	480055	PrimaryExpression	0		480038	1					
ANR	480056	ExpressionStatement	free ( c -> screen_buf )	79:1:1655:1675	480038	2	True				
ANR	480057	CallExpression	free ( c -> screen_buf )		480038	0					
ANR	480058	Callee	free		480038	0					
ANR	480059	Identifier	free		480038	0					
ANR	480060	ArgumentList	c -> screen_buf		480038	1					
ANR	480061	Argument	c -> screen_buf		480038	0					
ANR	480062	PtrMemberAccess	c -> screen_buf		480038	0					
ANR	480063	Identifier	c		480038	0					
ANR	480064	Identifier	screen_buf		480038	1					
ANR	480065	ExpressionStatement	c -> screen_buf = 0	80:1:1678:1695	480038	3	True				
ANR	480066	AssignmentExpression	c -> screen_buf = 0		480038	0		=			
ANR	480067	PtrMemberAccess	c -> screen_buf		480038	0					
ANR	480068	Identifier	c		480038	0					
ANR	480069	Identifier	screen_buf		480038	1					
ANR	480070	PrimaryExpression	0		480038	1					
ANR	480071	ExpressionStatement	free ( c )	81:1:1698:1706	480038	4	True				
ANR	480072	CallExpression	free ( c )		480038	0					
ANR	480073	Callee	free		480038	0					
ANR	480074	Identifier	free		480038	0					
ANR	480075	ArgumentList	c		480038	1					
ANR	480076	Argument	c		480038	0					
ANR	480077	Identifier	c		480038	0					
ANR	480078	ReturnStatement	return NULL ;	82:1:1709:1720	480038	5	True				
ANR	480079	Identifier	NULL		480038	0					
ANR	480080	ReturnType	R_API BfvmCPU *		480038	1					
ANR	480081	Identifier	bfvm_free		480038	2					
ANR	480082	ParameterList	BfvmCPU * c		480038	3					
ANR	480083	Parameter	BfvmCPU * c	76:25:1611:1620	480038	0	True				
ANR	480084	ParameterType	BfvmCPU *		480038	0					
ANR	480085	Identifier	c		480038	1					
ANR	480086	CFGEntryNode	ENTRY		480038		True				
ANR	480087	CFGExitNode	EXIT		480038		True				
ANR	480088	Symbol	c		480038						
ANR	480089	Symbol	NULL		480038						
ANR	480090	Symbol	c -> mem		480038						
ANR	480091	Symbol	* c		480038						
ANR	480092	Symbol	c -> screen_buf		480038						
ANR	480093	Function	bfvm_get_ptr_at	85:0:1725:1901							
ANR	480094	FunctionDef	"bfvm_get_ptr_at (BfvmCPU * c , ut64 at)"		480093	0					
ANR	480095	CompoundStatement		85:48:1773:1901	480093	0					
ANR	480096	IfStatement	if ( at >= c -> base )		480093	0					
ANR	480097	Condition	at >= c -> base	86:5:1780:1792	480093	0	True				
ANR	480098	RelationalExpression	at >= c -> base		480093	0		>=			
ANR	480099	Identifier	at		480093	0					
ANR	480100	PtrMemberAccess	c -> base		480093	1					
ANR	480101	Identifier	c		480093	0					
ANR	480102	Identifier	base		480093	1					
ANR	480103	CompoundStatement		2:20:21:21	480093	1					
ANR	480104	ExpressionStatement	at -= c -> base	87:2:1799:1812	480093	0	True				
ANR	480105	AssignmentExpression	at -= c -> base		480093	0		-=			
ANR	480106	Identifier	at		480093	0					
ANR	480107	PtrMemberAccess	c -> base		480093	1					
ANR	480108	Identifier	c		480093	0					
ANR	480109	Identifier	base		480093	1					
ANR	480110	ElseStatement	else		480093	0					
ANR	480111	IfStatement	if ( at >= c -> size )		480093	0					
ANR	480112	Condition	at >= c -> size	88:12:1826:1838	480093	0	True				
ANR	480113	RelationalExpression	at >= c -> size		480093	0		>=			
ANR	480114	Identifier	at		480093	0					
ANR	480115	PtrMemberAccess	c -> size		480093	1					
ANR	480116	Identifier	c		480093	0					
ANR	480117	Identifier	size		480093	1					
ANR	480118	CompoundStatement		4:27:67:67	480093	1					
ANR	480119	ExpressionStatement	at = c -> circular ? 0 : c -> size - 1	89:2:1845:1875	480093	0	True				
ANR	480120	AssignmentExpression	at = c -> circular ? 0 : c -> size - 1		480093	0		=			
ANR	480121	Identifier	at		480093	0					
ANR	480122	ConditionalExpression	c -> circular ? 0 : c -> size - 1		480093	1					
ANR	480123	Condition	c -> circular		480093	0					
ANR	480124	PtrMemberAccess	c -> circular		480093	0					
ANR	480125	Identifier	c		480093	0					
ANR	480126	Identifier	circular		480093	1					
ANR	480127	PrimaryExpression	0		480093	1					
ANR	480128	AdditiveExpression	c -> size - 1		480093	2		-			
ANR	480129	PtrMemberAccess	c -> size		480093	0					
ANR	480130	Identifier	c		480093	0					
ANR	480131	Identifier	size		480093	1					
ANR	480132	PrimaryExpression	1		480093	1					
ANR	480133	ReturnStatement	return c -> mem + at ;	91:1:1881:1899	480093	1	True				
ANR	480134	AdditiveExpression	c -> mem + at		480093	0		+			
ANR	480135	PtrMemberAccess	c -> mem		480093	0					
ANR	480136	Identifier	c		480093	0					
ANR	480137	Identifier	mem		480093	1					
ANR	480138	Identifier	at		480093	1					
ANR	480139	ReturnType	R_API ut8 *		480093	1					
ANR	480140	Identifier	bfvm_get_ptr_at		480093	2					
ANR	480141	ParameterList	"BfvmCPU * c , ut64 at"		480093	3					
ANR	480142	Parameter	BfvmCPU * c	85:27:1752:1761	480093	0	True				
ANR	480143	ParameterType	BfvmCPU *		480093	0					
ANR	480144	Identifier	c		480093	1					
ANR	480145	Parameter	ut64 at	85:39:1764:1770	480093	1	True				
ANR	480146	ParameterType	ut64		480093	0					
ANR	480147	Identifier	at		480093	1					
ANR	480148	CFGEntryNode	ENTRY		480093		True				
ANR	480149	CFGExitNode	EXIT		480093		True				
ANR	480150	Symbol	c -> base		480093						
ANR	480151	Symbol	c		480093						
ANR	480152	Symbol	at		480093						
ANR	480153	Symbol	c -> size		480093						
ANR	480154	Symbol	c -> mem		480093						
ANR	480155	Symbol	* c		480093						
ANR	480156	Symbol	c -> circular		480093						
ANR	480157	Function	bfvm_get_ptr	94:0:1904:2003							
ANR	480158	FunctionDef	bfvm_get_ptr (BfvmCPU * c)		480157	0					
ANR	480159	CompoundStatement		94:36:1940:2003	480157	0					
ANR	480160	ReturnStatement	"return bfvm_get_ptr_at ( c , c -> ptr ) ;"	96:1:1967:2001	480157	0	True				
ANR	480161	CallExpression	"bfvm_get_ptr_at ( c , c -> ptr )"		480157	0					
ANR	480162	Callee	bfvm_get_ptr_at		480157	0					
ANR	480163	Identifier	bfvm_get_ptr_at		480157	0					
ANR	480164	ArgumentList	c		480157	1					
ANR	480165	Argument	c		480157	0					
ANR	480166	Identifier	c		480157	0					
ANR	480167	Argument	c -> ptr		480157	1					
ANR	480168	PtrMemberAccess	c -> ptr		480157	0					
ANR	480169	Identifier	c		480157	0					
ANR	480170	Identifier	ptr		480157	1					
ANR	480171	ReturnType	R_API ut8 *		480157	1					
ANR	480172	Identifier	bfvm_get_ptr		480157	2					
ANR	480173	ParameterList	BfvmCPU * c		480157	3					
ANR	480174	Parameter	BfvmCPU * c	94:24:1928:1937	480157	0	True				
ANR	480175	ParameterType	BfvmCPU *		480157	0					
ANR	480176	Identifier	c		480157	1					
ANR	480177	CFGEntryNode	ENTRY		480157		True				
ANR	480178	CFGExitNode	EXIT		480157		True				
ANR	480179	Symbol	c		480157						
ANR	480180	Symbol	c -> ptr		480157						
ANR	480181	Symbol	* c		480157						
ANR	480182	Symbol	bfvm_get_ptr_at		480157						
ANR	480183	Function	bfvm_get	99:0:2006:2091							
ANR	480184	FunctionDef	bfvm_get (BfvmCPU * c)		480183	0					
ANR	480185	CompoundStatement		99:31:2037:2091	480183	0					
ANR	480186	IdentifierDeclStatement	ut8 * ptr = bfvm_get_ptr ( c ) ;	100:1:2040:2067	480183	0	True				
ANR	480187	IdentifierDecl	* ptr = bfvm_get_ptr ( c )		480183	0					
ANR	480188	IdentifierDeclType	ut8 *		480183	0					
ANR	480189	Identifier	ptr		480183	1					
ANR	480190	AssignmentExpression	* ptr = bfvm_get_ptr ( c )		480183	2		=			
ANR	480191	Identifier	ptr		480183	0					
ANR	480192	CallExpression	bfvm_get_ptr ( c )		480183	1					
ANR	480193	Callee	bfvm_get_ptr		480183	0					
ANR	480194	Identifier	bfvm_get_ptr		480183	0					
ANR	480195	ArgumentList	c		480183	1					
ANR	480196	Argument	c		480183	0					
ANR	480197	Identifier	c		480183	0					
ANR	480198	ReturnStatement	return ptr ? * ptr : 0 ;	101:1:2070:2089	480183	1	True				
ANR	480199	ConditionalExpression	ptr ? * ptr : 0		480183	0					
ANR	480200	Condition	ptr		480183	0					
ANR	480201	Identifier	ptr		480183	0					
ANR	480202	UnaryOperationExpression	* ptr		480183	1					
ANR	480203	UnaryOperator	*		480183	0					
ANR	480204	Identifier	ptr		480183	1					
ANR	480205	PrimaryExpression	0		480183	2					
ANR	480206	ReturnType	R_API ut8		480183	1					
ANR	480207	Identifier	bfvm_get		480183	2					
ANR	480208	ParameterList	BfvmCPU * c		480183	3					
ANR	480209	Parameter	BfvmCPU * c	99:19:2025:2034	480183	0	True				
ANR	480210	ParameterType	BfvmCPU *		480183	0					
ANR	480211	Identifier	c		480183	1					
ANR	480212	CFGEntryNode	ENTRY		480183		True				
ANR	480213	CFGExitNode	EXIT		480183		True				
ANR	480214	Symbol	c		480183						
ANR	480215	Symbol	* ptr		480183						
ANR	480216	Symbol	bfvm_get_ptr		480183						
ANR	480217	Symbol	ptr		480183						
ANR	480218	Function	bfvm_inc	104:0:2094:2193							
ANR	480219	FunctionDef	bfvm_inc (BfvmCPU * c)		480218	0					
ANR	480220	CompoundStatement		104:32:2126:2193	480218	0					
ANR	480221	IdentifierDeclStatement	ut8 * mem = bfvm_get_ptr ( c ) ;	105:1:2129:2156	480218	0	True				
ANR	480222	IdentifierDecl	* mem = bfvm_get_ptr ( c )		480218	0					
ANR	480223	IdentifierDeclType	ut8 *		480218	0					
ANR	480224	Identifier	mem		480218	1					
ANR	480225	AssignmentExpression	* mem = bfvm_get_ptr ( c )		480218	2		=			
ANR	480226	Identifier	mem		480218	0					
ANR	480227	CallExpression	bfvm_get_ptr ( c )		480218	1					
ANR	480228	Callee	bfvm_get_ptr		480218	0					
ANR	480229	Identifier	bfvm_get_ptr		480218	0					
ANR	480230	ArgumentList	c		480218	1					
ANR	480231	Argument	c		480218	0					
ANR	480232	Identifier	c		480218	0					
ANR	480233	IfStatement	if ( mem != NULL )		480218	1					
ANR	480234	Condition	mem != NULL	106:5:2163:2173	480218	0	True				
ANR	480235	EqualityExpression	mem != NULL		480218	0		!=			
ANR	480236	Identifier	mem		480218	0					
ANR	480237	Identifier	NULL		480218	1					
ANR	480238	CompoundStatement		3:18:49:49	480218	1					
ANR	480239	ExpressionStatement	mem [ 0 ] ++	107:2:2180:2188	480218	0	True				
ANR	480240	PostIncDecOperationExpression	mem [ 0 ] ++		480218	0					
ANR	480241	ArrayIndexing	mem [ 0 ]		480218	0					
ANR	480242	Identifier	mem		480218	0					
ANR	480243	PrimaryExpression	0		480218	1					
ANR	480244	IncDec	++		480218	1					
ANR	480245	ReturnType	R_API void		480218	1					
ANR	480246	Identifier	bfvm_inc		480218	2					
ANR	480247	ParameterList	BfvmCPU * c		480218	3					
ANR	480248	Parameter	BfvmCPU * c	104:20:2114:2123	480218	0	True				
ANR	480249	ParameterType	BfvmCPU *		480218	0					
ANR	480250	Identifier	c		480218	1					
ANR	480251	CFGEntryNode	ENTRY		480218		True				
ANR	480252	CFGExitNode	EXIT		480218		True				
ANR	480253	Symbol	c		480218						
ANR	480254	Symbol	NULL		480218						
ANR	480255	Symbol	mem		480218						
ANR	480256	Symbol	bfvm_get_ptr		480218						
ANR	480257	Symbol	* mem		480218						
ANR	480258	Function	bfvm_dec	111:0:2196:2295							
ANR	480259	FunctionDef	bfvm_dec (BfvmCPU * c)		480258	0					
ANR	480260	CompoundStatement		111:32:2228:2295	480258	0					
ANR	480261	IdentifierDeclStatement	ut8 * mem = bfvm_get_ptr ( c ) ;	112:1:2231:2258	480258	0	True				
ANR	480262	IdentifierDecl	* mem = bfvm_get_ptr ( c )		480258	0					
ANR	480263	IdentifierDeclType	ut8 *		480258	0					
ANR	480264	Identifier	mem		480258	1					
ANR	480265	AssignmentExpression	* mem = bfvm_get_ptr ( c )		480258	2		=			
ANR	480266	Identifier	mem		480258	0					
ANR	480267	CallExpression	bfvm_get_ptr ( c )		480258	1					
ANR	480268	Callee	bfvm_get_ptr		480258	0					
ANR	480269	Identifier	bfvm_get_ptr		480258	0					
ANR	480270	ArgumentList	c		480258	1					
ANR	480271	Argument	c		480258	0					
ANR	480272	Identifier	c		480258	0					
ANR	480273	IfStatement	if ( mem != NULL )		480258	1					
ANR	480274	Condition	mem != NULL	113:5:2265:2275	480258	0	True				
ANR	480275	EqualityExpression	mem != NULL		480258	0		!=			
ANR	480276	Identifier	mem		480258	0					
ANR	480277	Identifier	NULL		480258	1					
ANR	480278	CompoundStatement		3:18:49:49	480258	1					
ANR	480279	ExpressionStatement	mem [ 0 ] --	114:2:2282:2290	480258	0	True				
ANR	480280	PostIncDecOperationExpression	mem [ 0 ] --		480258	0					
ANR	480281	ArrayIndexing	mem [ 0 ]		480258	0					
ANR	480282	Identifier	mem		480258	0					
ANR	480283	PrimaryExpression	0		480258	1					
ANR	480284	IncDec	--		480258	1					
ANR	480285	ReturnType	R_API void		480258	1					
ANR	480286	Identifier	bfvm_dec		480258	2					
ANR	480287	ParameterList	BfvmCPU * c		480258	3					
ANR	480288	Parameter	BfvmCPU * c	111:20:2216:2225	480258	0	True				
ANR	480289	ParameterType	BfvmCPU *		480258	0					
ANR	480290	Identifier	c		480258	1					
ANR	480291	CFGEntryNode	ENTRY		480258		True				
ANR	480292	CFGExitNode	EXIT		480258		True				
ANR	480293	Symbol	c		480258						
ANR	480294	Symbol	NULL		480258						
ANR	480295	Symbol	mem		480258						
ANR	480296	Symbol	bfvm_get_ptr		480258						
ANR	480297	Symbol	* mem		480258						
ANR	480298	Function	bfvm_reg_set	118:0:2298:2637							
ANR	480299	FunctionDef	"bfvm_reg_set (BfvmCPU * c , const char * str)"		480298	0					
ANR	480300	CompoundStatement		118:52:2350:2637	480298	0					
ANR	480301	IdentifierDeclStatement	"char * ptr = strchr ( str , ' ' ) ;"	119:1:2353:2382	480298	0	True				
ANR	480302	IdentifierDecl	"* ptr = strchr ( str , ' ' )"		480298	0					
ANR	480303	IdentifierDeclType	char *		480298	0					
ANR	480304	Identifier	ptr		480298	1					
ANR	480305	AssignmentExpression	"* ptr = strchr ( str , ' ' )"		480298	2		=			
ANR	480306	Identifier	ptr		480298	0					
ANR	480307	CallExpression	"strchr ( str , ' ' )"		480298	1					
ANR	480308	Callee	strchr		480298	0					
ANR	480309	Identifier	strchr		480298	0					
ANR	480310	ArgumentList	str		480298	1					
ANR	480311	Argument	str		480298	0					
ANR	480312	Identifier	str		480298	0					
ANR	480313	Argument	' '		480298	1					
ANR	480314	PrimaryExpression	' '		480298	0					
ANR	480315	IfStatement	if ( ! ptr )		480298	1					
ANR	480316	Condition	! ptr	120:5:2389:2392	480298	0	True				
ANR	480317	UnaryOperationExpression	! ptr		480298	0					
ANR	480318	UnaryOperator	!		480298	0					
ANR	480319	Identifier	ptr		480298	1					
ANR	480320	CompoundStatement		3:11:44:44	480298	1					
ANR	480321	ReturnStatement	return 0 ;	121:2:2399:2407	480298	0	True				
ANR	480322	PrimaryExpression	0		480298	0					
ANR	480323	IfStatement	"if ( strstr ( str , ""eip"" ) )"		480298	2					
ANR	480324	Condition	"strstr ( str , ""eip"" )"	123:5:2417:2435	480298	0	True				
ANR	480325	CallExpression	"strstr ( str , ""eip"" )"		480298	0					
ANR	480326	Callee	strstr		480298	0					
ANR	480327	Identifier	strstr		480298	0					
ANR	480328	ArgumentList	str		480298	1					
ANR	480329	Argument	str		480298	0					
ANR	480330	Identifier	str		480298	0					
ANR	480331	Argument	"""eip"""		480298	1					
ANR	480332	PrimaryExpression	"""eip"""		480298	0					
ANR	480333	CompoundStatement		6:26:87:87	480298	1					
ANR	480334	ExpressionStatement	"c -> eip = r_num_math ( NULL , ptr + 1 )"	124:2:2442:2475	480298	0	True				
ANR	480335	AssignmentExpression	"c -> eip = r_num_math ( NULL , ptr + 1 )"		480298	0		=			
ANR	480336	PtrMemberAccess	c -> eip		480298	0					
ANR	480337	Identifier	c		480298	0					
ANR	480338	Identifier	eip		480298	1					
ANR	480339	CallExpression	"r_num_math ( NULL , ptr + 1 )"		480298	1					
ANR	480340	Callee	r_num_math		480298	0					
ANR	480341	Identifier	r_num_math		480298	0					
ANR	480342	ArgumentList	NULL		480298	1					
ANR	480343	Argument	NULL		480298	0					
ANR	480344	Identifier	NULL		480298	0					
ANR	480345	Argument	ptr + 1		480298	1					
ANR	480346	AdditiveExpression	ptr + 1		480298	0		+			
ANR	480347	Identifier	ptr		480298	0					
ANR	480348	PrimaryExpression	1		480298	1					
ANR	480349	ElseStatement	else		480298	0					
ANR	480350	IfStatement	"if ( strstr ( str , ""esp"" ) )"		480298	0					
ANR	480351	Condition	"strstr ( str , ""esp"" )"	125:12:2489:2507	480298	0	True				
ANR	480352	CallExpression	"strstr ( str , ""esp"" )"		480298	0					
ANR	480353	Callee	strstr		480298	0					
ANR	480354	Identifier	strstr		480298	0					
ANR	480355	ArgumentList	str		480298	1					
ANR	480356	Argument	str		480298	0					
ANR	480357	Identifier	str		480298	0					
ANR	480358	Argument	"""esp"""		480298	1					
ANR	480359	PrimaryExpression	"""esp"""		480298	0					
ANR	480360	CompoundStatement		8:33:159:159	480298	1					
ANR	480361	ExpressionStatement	"c -> esp = r_num_math ( NULL , ptr + 1 )"	126:2:2514:2547	480298	0	True				
ANR	480362	AssignmentExpression	"c -> esp = r_num_math ( NULL , ptr + 1 )"		480298	0		=			
ANR	480363	PtrMemberAccess	c -> esp		480298	0					
ANR	480364	Identifier	c		480298	0					
ANR	480365	Identifier	esp		480298	1					
ANR	480366	CallExpression	"r_num_math ( NULL , ptr + 1 )"		480298	1					
ANR	480367	Callee	r_num_math		480298	0					
ANR	480368	Identifier	r_num_math		480298	0					
ANR	480369	ArgumentList	NULL		480298	1					
ANR	480370	Argument	NULL		480298	0					
ANR	480371	Identifier	NULL		480298	0					
ANR	480372	Argument	ptr + 1		480298	1					
ANR	480373	AdditiveExpression	ptr + 1		480298	0		+			
ANR	480374	Identifier	ptr		480298	0					
ANR	480375	PrimaryExpression	1		480298	1					
ANR	480376	ElseStatement	else		480298	0					
ANR	480377	IfStatement	"if ( strstr ( str , ""ptr"" ) )"		480298	0					
ANR	480378	Condition	"strstr ( str , ""ptr"" )"	127:12:2561:2579	480298	0	True				
ANR	480379	CallExpression	"strstr ( str , ""ptr"" )"		480298	0					
ANR	480380	Callee	strstr		480298	0					
ANR	480381	Identifier	strstr		480298	0					
ANR	480382	ArgumentList	str		480298	1					
ANR	480383	Argument	str		480298	0					
ANR	480384	Identifier	str		480298	0					
ANR	480385	Argument	"""ptr"""		480298	1					
ANR	480386	PrimaryExpression	"""ptr"""		480298	0					
ANR	480387	CompoundStatement		10:33:231:231	480298	1					
ANR	480388	ExpressionStatement	"c -> ptr = r_num_math ( NULL , ptr + 1 )"	128:2:2586:2621	480298	0	True				
ANR	480389	AssignmentExpression	"c -> ptr = r_num_math ( NULL , ptr + 1 )"		480298	0		=			
ANR	480390	PtrMemberAccess	c -> ptr		480298	0					
ANR	480391	Identifier	c		480298	0					
ANR	480392	Identifier	ptr		480298	1					
ANR	480393	CallExpression	"r_num_math ( NULL , ptr + 1 )"		480298	1					
ANR	480394	Callee	r_num_math		480298	0					
ANR	480395	Identifier	r_num_math		480298	0					
ANR	480396	ArgumentList	NULL		480298	1					
ANR	480397	Argument	NULL		480298	0					
ANR	480398	Identifier	NULL		480298	0					
ANR	480399	Argument	ptr + 1		480298	1					
ANR	480400	AdditiveExpression	ptr + 1		480298	0		+			
ANR	480401	Identifier	ptr		480298	0					
ANR	480402	PrimaryExpression	1		480298	1					
ANR	480403	ReturnStatement	return 1 ;	130:1:2627:2635	480298	3	True				
ANR	480404	PrimaryExpression	1		480298	0					
ANR	480405	ReturnType	R_API int		480298	1					
ANR	480406	Identifier	bfvm_reg_set		480298	2					
ANR	480407	ParameterList	"BfvmCPU * c , const char * str"		480298	3					
ANR	480408	Parameter	BfvmCPU * c	118:23:2321:2330	480298	0	True				
ANR	480409	ParameterType	BfvmCPU *		480298	0					
ANR	480410	Identifier	c		480298	1					
ANR	480411	Parameter	const char * str	118:35:2333:2347	480298	1	True				
ANR	480412	ParameterType	const char *		480298	0					
ANR	480413	Identifier	str		480298	1					
ANR	480414	CFGEntryNode	ENTRY		480298		True				
ANR	480415	CFGExitNode	EXIT		480298		True				
ANR	480416	Symbol	str		480298						
ANR	480417	Symbol	c		480298						
ANR	480418	Symbol	NULL		480298						
ANR	480419	Symbol	c -> ptr		480298						
ANR	480420	Symbol	strstr		480298						
ANR	480421	Symbol	c -> eip		480298						
ANR	480422	Symbol	strchr		480298						
ANR	480423	Symbol	* c		480298						
ANR	480424	Symbol	ptr		480298						
ANR	480425	Symbol	r_num_math		480298						
ANR	480426	Symbol	c -> esp		480298						
ANR	480427	Function	bfvm_peek	134:0:2663:2865							
ANR	480428	FunctionDef	bfvm_peek (BfvmCPU * c)		480427	0					
ANR	480429	CompoundStatement		134:33:2696:2865	480427	0					
ANR	480430	IdentifierDeclStatement	int idx = c -> input_idx ;	135:1:2699:2721	480427	0	True				
ANR	480431	IdentifierDecl	idx = c -> input_idx		480427	0					
ANR	480432	IdentifierDeclType	int		480427	0					
ANR	480433	Identifier	idx		480427	1					
ANR	480434	AssignmentExpression	idx = c -> input_idx		480427	2		=			
ANR	480435	Identifier	idx		480427	0					
ANR	480436	PtrMemberAccess	c -> input_idx		480427	1					
ANR	480437	Identifier	c		480427	0					
ANR	480438	Identifier	input_idx		480427	1					
ANR	480439	IdentifierDeclStatement	ut8 * ptr = bfvm_get_ptr ( c ) ;	136:1:2724:2751	480427	1	True				
ANR	480440	IdentifierDecl	* ptr = bfvm_get_ptr ( c )		480427	0					
ANR	480441	IdentifierDeclType	ut8 *		480427	0					
ANR	480442	Identifier	ptr		480427	1					
ANR	480443	AssignmentExpression	* ptr = bfvm_get_ptr ( c )		480427	2		=			
ANR	480444	Identifier	ptr		480427	0					
ANR	480445	CallExpression	bfvm_get_ptr ( c )		480427	1					
ANR	480446	Callee	bfvm_get_ptr		480427	0					
ANR	480447	Identifier	bfvm_get_ptr		480427	0					
ANR	480448	ArgumentList	c		480427	1					
ANR	480449	Argument	c		480427	0					
ANR	480450	Identifier	c		480427	0					
ANR	480451	IfStatement	if ( idx >= c -> input_size )		480427	2					
ANR	480452	Condition	idx >= c -> input_size	138:5:2759:2778	480427	0	True				
ANR	480453	RelationalExpression	idx >= c -> input_size		480427	0		>=			
ANR	480454	Identifier	idx		480427	0					
ANR	480455	PtrMemberAccess	c -> input_size		480427	1					
ANR	480456	Identifier	c		480427	0					
ANR	480457	Identifier	input_size		480427	1					
ANR	480458	CompoundStatement		5:27:84:84	480427	1					
ANR	480459	ExpressionStatement	idx = 0	139:2:2785:2792	480427	0	True				
ANR	480460	AssignmentExpression	idx = 0		480427	0		=			
ANR	480461	Identifier	idx		480427	0					
ANR	480462	PrimaryExpression	0		480427	1					
ANR	480463	IfStatement	if ( ptr )		480427	3					
ANR	480464	Condition	ptr	142:5:2803:2805	480427	0	True				
ANR	480465	Identifier	ptr		480427	0					
ANR	480466	CompoundStatement		9:10:111:111	480427	1					
ANR	480467	ExpressionStatement	* ptr = c -> input_buf [ idx ]	143:2:2812:2836	480427	0	True				
ANR	480468	AssignmentExpression	* ptr = c -> input_buf [ idx ]		480427	0		=			
ANR	480469	UnaryOperationExpression	* ptr		480427	0					
ANR	480470	UnaryOperator	*		480427	0					
ANR	480471	Identifier	ptr		480427	1					
ANR	480472	ArrayIndexing	c -> input_buf [ idx ]		480427	1					
ANR	480473	PtrMemberAccess	c -> input_buf		480427	0					
ANR	480474	Identifier	c		480427	0					
ANR	480475	Identifier	input_buf		480427	1					
ANR	480476	Identifier	idx		480427	1					
ANR	480477	ExpressionStatement	c -> input_idx = idx + 1	144:2:2840:2860	480427	1	True				
ANR	480478	AssignmentExpression	c -> input_idx = idx + 1		480427	0		=			
ANR	480479	PtrMemberAccess	c -> input_idx		480427	0					
ANR	480480	Identifier	c		480427	0					
ANR	480481	Identifier	input_idx		480427	1					
ANR	480482	AdditiveExpression	idx + 1		480427	1		+			
ANR	480483	Identifier	idx		480427	0					
ANR	480484	PrimaryExpression	1		480427	1					
ANR	480485	ReturnType	R_API void		480427	1					
ANR	480486	Identifier	bfvm_peek		480427	2					
ANR	480487	ParameterList	BfvmCPU * c		480427	3					
ANR	480488	Parameter	BfvmCPU * c	134:21:2684:2693	480427	0	True				
ANR	480489	ParameterType	BfvmCPU *		480427	0					
ANR	480490	Identifier	c		480427	1					
ANR	480491	CFGEntryNode	ENTRY		480427		True				
ANR	480492	CFGExitNode	EXIT		480427		True				
ANR	480493	Symbol	c -> input_idx		480427						
ANR	480494	Symbol	* c -> input_buf		480427						
ANR	480495	Symbol	c		480427						
ANR	480496	Symbol	c -> input_size		480427						
ANR	480497	Symbol	* ptr		480427						
ANR	480498	Symbol	* idx		480427						
ANR	480499	Symbol	c -> input_buf		480427						
ANR	480500	Symbol	* * c		480427						
ANR	480501	Symbol	bfvm_get_ptr		480427						
ANR	480502	Symbol	idx		480427						
ANR	480503	Symbol	* c		480427						
ANR	480504	Symbol	ptr		480427						
ANR	480505	Function	bfvm_poke	148:0:2868:2989							
ANR	480506	FunctionDef	bfvm_poke (BfvmCPU * c)		480505	0					
ANR	480507	CompoundStatement		148:33:2901:2989	480505	0					
ANR	480508	IdentifierDeclStatement	int idx = c -> screen_idx ;	149:1:2904:2927	480505	0	True				
ANR	480509	IdentifierDecl	idx = c -> screen_idx		480505	0					
ANR	480510	IdentifierDeclType	int		480505	0					
ANR	480511	Identifier	idx		480505	1					
ANR	480512	AssignmentExpression	idx = c -> screen_idx		480505	2		=			
ANR	480513	Identifier	idx		480505	0					
ANR	480514	PtrMemberAccess	c -> screen_idx		480505	1					
ANR	480515	Identifier	c		480505	0					
ANR	480516	Identifier	screen_idx		480505	1					
ANR	480517	ExpressionStatement	c -> screen_buf [ idx ] = bfvm_get ( c )	150:1:2930:2963	480505	1	True				
ANR	480518	AssignmentExpression	c -> screen_buf [ idx ] = bfvm_get ( c )		480505	0		=			
ANR	480519	ArrayIndexing	c -> screen_buf [ idx ]		480505	0					
ANR	480520	PtrMemberAccess	c -> screen_buf		480505	0					
ANR	480521	Identifier	c		480505	0					
ANR	480522	Identifier	screen_buf		480505	1					
ANR	480523	Identifier	idx		480505	1					
ANR	480524	CallExpression	bfvm_get ( c )		480505	1					
ANR	480525	Callee	bfvm_get		480505	0					
ANR	480526	Identifier	bfvm_get		480505	0					
ANR	480527	ArgumentList	c		480505	1					
ANR	480528	Argument	c		480505	0					
ANR	480529	Identifier	c		480505	0					
ANR	480530	ExpressionStatement	c -> screen_idx = idx + 1	151:1:2966:2987	480505	2	True				
ANR	480531	AssignmentExpression	c -> screen_idx = idx + 1		480505	0		=			
ANR	480532	PtrMemberAccess	c -> screen_idx		480505	0					
ANR	480533	Identifier	c		480505	0					
ANR	480534	Identifier	screen_idx		480505	1					
ANR	480535	AdditiveExpression	idx + 1		480505	1		+			
ANR	480536	Identifier	idx		480505	0					
ANR	480537	PrimaryExpression	1		480505	1					
ANR	480538	ReturnType	R_API void		480505	1					
ANR	480539	Identifier	bfvm_poke		480505	2					
ANR	480540	ParameterList	BfvmCPU * c		480505	3					
ANR	480541	Parameter	BfvmCPU * c	148:21:2889:2898	480505	0	True				
ANR	480542	ParameterType	BfvmCPU *		480505	0					
ANR	480543	Identifier	c		480505	1					
ANR	480544	CFGEntryNode	ENTRY		480505		True				
ANR	480545	CFGExitNode	EXIT		480505		True				
ANR	480546	Symbol	c -> screen_idx		480505						
ANR	480547	Symbol	c		480505						
ANR	480548	Symbol	bfvm_get		480505						
ANR	480549	Symbol	* idx		480505						
ANR	480550	Symbol	* * c		480505						
ANR	480551	Symbol	* c -> screen_buf		480505						
ANR	480552	Symbol	idx		480505						
ANR	480553	Symbol	* c		480505						
ANR	480554	Symbol	c -> screen_buf		480505						
ANR	480555	Function	bfvm_trace_op	154:0:2992:3350							
ANR	480556	FunctionDef	"bfvm_trace_op (BfvmCPU * c , ut8 op)"		480555	0					
ANR	480557	CompoundStatement		154:44:3036:3350	480555	0					
ANR	480558	IdentifierDeclStatement	ut8 g ;	155:1:3039:3044	480555	0	True				
ANR	480559	IdentifierDecl	g		480555	0					
ANR	480560	IdentifierDeclType	ut8		480555	0					
ANR	480561	Identifier	g		480555	1					
ANR	480562	SwitchStatement	switch ( op )		480555	1					
ANR	480563	Condition	op	156:9:3055:3056	480555	0	True				
ANR	480564	Identifier	op		480555	0					
ANR	480565	CompoundStatement		3:13:22:22	480555	1					
ANR	480566	Label	case '\\0' :	157:1:3062:3071	480555	0	True				
ANR	480567	ExpressionStatement	"eprintf ( "" ; trap (%02x)\\n"" , op )"	158:2:3075:3107	480555	1	True				
ANR	480568	CallExpression	"eprintf ( "" ; trap (%02x)\\n"" , op )"		480555	0					
ANR	480569	Callee	eprintf		480555	0					
ANR	480570	Identifier	eprintf		480555	0					
ANR	480571	ArgumentList	""" ; trap (%02x)\\n"""		480555	1					
ANR	480572	Argument	""" ; trap (%02x)\\n"""		480555	0					
ANR	480573	PrimaryExpression	""" ; trap (%02x)\\n"""		480555	0					
ANR	480574	Argument	op		480555	1					
ANR	480575	Identifier	op		480555	0					
ANR	480576	Label	case '.' :	159:1:3110:3118	480555	2	True				
ANR	480577	Label	"case ',' :"	160:1:3121:3129	480555	3	True				
ANR	480578	Label	case '+' :	161:1:3132:3140	480555	4	True				
ANR	480579	Label	case '-' :	162:1:3143:3151	480555	5	True				
ANR	480580	Label	case '>' :	163:1:3154:3162	480555	6	True				
ANR	480581	Label	case '<' :	164:1:3165:3173	480555	7	True				
ANR	480582	ExpressionStatement	"eprintf ( ""%c"" , op )"	165:2:3177:3195	480555	8	True				
ANR	480583	CallExpression	"eprintf ( ""%c"" , op )"		480555	0					
ANR	480584	Callee	eprintf		480555	0					
ANR	480585	Identifier	eprintf		480555	0					
ANR	480586	ArgumentList	"""%c"""		480555	1					
ANR	480587	Argument	"""%c"""		480555	0					
ANR	480588	PrimaryExpression	"""%c"""		480555	0					
ANR	480589	Argument	op		480555	1					
ANR	480590	Identifier	op		480555	0					
ANR	480591	BreakStatement	break ;	166:2:3199:3204	480555	9	True				
ANR	480592	Label	case '[' :	167:1:3207:3215	480555	10	True				
ANR	480593	Label	case ']' :	168:1:3218:3226	480555	11	True				
ANR	480594	ExpressionStatement	g = bfvm_get ( c )	169:2:3230:3246	480555	12	True				
ANR	480595	AssignmentExpression	g = bfvm_get ( c )		480555	0		=			
ANR	480596	Identifier	g		480555	0					
ANR	480597	CallExpression	bfvm_get ( c )		480555	1					
ANR	480598	Callee	bfvm_get		480555	0					
ANR	480599	Identifier	bfvm_get		480555	0					
ANR	480600	ArgumentList	c		480555	1					
ANR	480601	Argument	c		480555	0					
ANR	480602	Identifier	c		480555	0					
ANR	480603	ExpressionStatement	"eprintf ( ""%c  ; [ptr] = %d\\n"" , op , g )"	170:2:3250:3287	480555	13	True				
ANR	480604	CallExpression	"eprintf ( ""%c  ; [ptr] = %d\\n"" , op , g )"		480555	0					
ANR	480605	Callee	eprintf		480555	0					
ANR	480606	Identifier	eprintf		480555	0					
ANR	480607	ArgumentList	"""%c  ; [ptr] = %d\\n"""		480555	1					
ANR	480608	Argument	"""%c  ; [ptr] = %d\\n"""		480555	0					
ANR	480609	PrimaryExpression	"""%c  ; [ptr] = %d\\n"""		480555	0					
ANR	480610	Argument	op		480555	1					
ANR	480611	Identifier	op		480555	0					
ANR	480612	Argument	g		480555	2					
ANR	480613	Identifier	g		480555	0					
ANR	480614	IfStatement	if ( g != 0 )		480555	14					
ANR	480615	Condition	g != 0	171:6:3295:3300	480555	0	True				
ANR	480616	EqualityExpression	g != 0		480555	0		!=			
ANR	480617	Identifier	g		480555	0					
ANR	480618	PrimaryExpression	0		480555	1					
ANR	480619	CompoundStatement		18:14:266:266	480555	1					
ANR	480620	ExpressionStatement	"eprintf ( ""["" )"	172:3:3308:3321	480555	0	True				
ANR	480621	CallExpression	"eprintf ( ""["" )"		480555	0					
ANR	480622	Callee	eprintf		480555	0					
ANR	480623	Identifier	eprintf		480555	0					
ANR	480624	ArgumentList	"""["""		480555	1					
ANR	480625	Argument	"""["""		480555	0					
ANR	480626	PrimaryExpression	"""["""		480555	0					
ANR	480627	BreakStatement	break ;	174:2:3329:3334	480555	15	True				
ANR	480628	ReturnStatement	return 0 ;	176:1:3340:3348	480555	2	True				
ANR	480629	PrimaryExpression	0		480555	0					
ANR	480630	ReturnType	R_API int		480555	1					
ANR	480631	Identifier	bfvm_trace_op		480555	2					
ANR	480632	ParameterList	"BfvmCPU * c , ut8 op"		480555	3					
ANR	480633	Parameter	BfvmCPU * c	154:24:3016:3025	480555	0	True				
ANR	480634	ParameterType	BfvmCPU *		480555	0					
ANR	480635	Identifier	c		480555	1					
ANR	480636	Parameter	ut8 op	154:36:3028:3033	480555	1	True				
ANR	480637	ParameterType	ut8		480555	0					
ANR	480638	Identifier	op		480555	1					
ANR	480639	CFGEntryNode	ENTRY		480555		True				
ANR	480640	CFGExitNode	EXIT		480555		True				
ANR	480641	Symbol	op		480555						
ANR	480642	Symbol	c		480555						
ANR	480643	Symbol	bfvm_get		480555						
ANR	480644	Symbol	g		480555						
ANR	480645	Function	bfvm_step	181:0:3389:4153							
ANR	480646	FunctionDef	"bfvm_step (BfvmCPU * c , int over)"		480645	0					
ANR	480647	CompoundStatement		181:42:3431:4153	480645	0					
ANR	480648	IdentifierDeclStatement	"ut8 op2 , op = bfvm_op ( c ) ;"	182:1:3434:3459	480645	0	True				
ANR	480649	IdentifierDecl	op2		480645	0					
ANR	480650	IdentifierDeclType	ut8		480645	0					
ANR	480651	Identifier	op2		480645	1					
ANR	480652	IdentifierDecl	op = bfvm_op ( c )		480645	1					
ANR	480653	IdentifierDeclType	ut8		480645	0					
ANR	480654	Identifier	op		480645	1					
ANR	480655	AssignmentExpression	op = bfvm_op ( c )		480645	2		=			
ANR	480656	Identifier	op		480645	0					
ANR	480657	CallExpression	bfvm_op ( c )		480645	1					
ANR	480658	Callee	bfvm_op		480645	0					
ANR	480659	Identifier	bfvm_op		480645	0					
ANR	480660	ArgumentList	c		480645	1					
ANR	480661	Argument	c		480645	0					
ANR	480662	Identifier	c		480645	0					
ANR	480663	DoStatement	do		480645	1					
ANR	480664	CompoundStatement		5:2:38:61	480645	0					
ANR	480665	IdentifierDeclStatement	"T bfvm_trace_op ( c , op ) ;"	185:2:3470:3493	480645	0	True				
ANR	480666	IdentifierDecl	"bfvm_trace_op ( c , op )"		480645	0					
ANR	480667	IdentifierDeclType	T		480645	0					
ANR	480668	Identifier	bfvm_trace_op		480645	1					
ANR	480669	Expression	"c , op"		480645	2					
ANR	480670	Identifier	c		480645	0					
ANR	480671	Identifier	op		480645	1					
ANR	480672	SwitchStatement	switch ( op )		480645	1					
ANR	480673	Condition	op	186:10:3505:3506	480645	0	True				
ANR	480674	Identifier	op		480645	0					
ANR	480675	CompoundStatement		6:14:77:77	480645	1					
ANR	480676	Label	case '\\0' :	187:2:3513:3522	480645	0	True				
ANR	480677	ReturnStatement	return 1 ;	189:3:3541:3549	480645	1	True				
ANR	480678	PrimaryExpression	1		480645	0					
ANR	480679	Label	case '.' :	190:2:3553:3561	480645	2	True				
ANR	480680	ExpressionStatement	bfvm_poke ( c )	192:3:3589:3602	480645	3	True				
ANR	480681	CallExpression	bfvm_poke ( c )		480645	0					
ANR	480682	Callee	bfvm_poke		480645	0					
ANR	480683	Identifier	bfvm_poke		480645	0					
ANR	480684	ArgumentList	c		480645	1					
ANR	480685	Argument	c		480645	0					
ANR	480686	Identifier	c		480645	0					
ANR	480687	BreakStatement	break ;	193:3:3607:3612	480645	4	True				
ANR	480688	Label	"case ',' :"	194:2:3616:3624	480645	5	True				
ANR	480689	ExpressionStatement	bfvm_peek ( c )	195:3:3629:3642	480645	6	True				
ANR	480690	CallExpression	bfvm_peek ( c )		480645	0					
ANR	480691	Callee	bfvm_peek		480645	0					
ANR	480692	Identifier	bfvm_peek		480645	0					
ANR	480693	ArgumentList	c		480645	1					
ANR	480694	Argument	c		480645	0					
ANR	480695	Identifier	c		480645	0					
ANR	480696	BreakStatement	break ;	197:3:3666:3671	480645	7	True				
ANR	480697	Label	case '+' :	198:2:3675:3683	480645	8	True				
ANR	480698	ExpressionStatement	bfvm_inc ( c )	199:3:3688:3700	480645	9	True				
ANR	480699	CallExpression	bfvm_inc ( c )		480645	0					
ANR	480700	Callee	bfvm_inc		480645	0					
ANR	480701	Identifier	bfvm_inc		480645	0					
ANR	480702	ArgumentList	c		480645	1					
ANR	480703	Argument	c		480645	0					
ANR	480704	Identifier	c		480645	0					
ANR	480705	BreakStatement	break ;	200:3:3705:3710	480645	10	True				
ANR	480706	Label	case '-' :	201:2:3714:3722	480645	11	True				
ANR	480707	ExpressionStatement	bfvm_dec ( c )	202:3:3727:3739	480645	12	True				
ANR	480708	CallExpression	bfvm_dec ( c )		480645	0					
ANR	480709	Callee	bfvm_dec		480645	0					
ANR	480710	Identifier	bfvm_dec		480645	0					
ANR	480711	ArgumentList	c		480645	1					
ANR	480712	Argument	c		480645	0					
ANR	480713	Identifier	c		480645	0					
ANR	480714	BreakStatement	break ;	203:3:3744:3749	480645	13	True				
ANR	480715	Label	case '>' :	204:2:3753:3761	480645	14	True				
ANR	480716	ExpressionStatement	c -> ptr ++	205:3:3766:3774	480645	15	True				
ANR	480717	PostIncDecOperationExpression	c -> ptr ++		480645	0					
ANR	480718	PtrMemberAccess	c -> ptr		480645	0					
ANR	480719	Identifier	c		480645	0					
ANR	480720	Identifier	ptr		480645	1					
ANR	480721	IncDec	++		480645	1					
ANR	480722	BreakStatement	break ;	206:3:3779:3784	480645	16	True				
ANR	480723	Label	case '<' :	207:2:3788:3796	480645	17	True				
ANR	480724	ExpressionStatement	c -> ptr --	208:3:3801:3809	480645	18	True				
ANR	480725	PostIncDecOperationExpression	c -> ptr --		480645	0					
ANR	480726	PtrMemberAccess	c -> ptr		480645	0					
ANR	480727	Identifier	c		480645	0					
ANR	480728	Identifier	ptr		480645	1					
ANR	480729	IncDec	--		480645	1					
ANR	480730	BreakStatement	break ;	209:3:3814:3819	480645	19	True				
ANR	480731	Label	case '[' :	210:2:3823:3831	480645	20	True				
ANR	480732	BreakStatement	break ;	211:3:3836:3841	480645	21	True				
ANR	480733	Label	case ']' :	212:2:3845:3853	480645	22	True				
ANR	480734	IfStatement	if ( bfvm_get ( c ) != 0 )		480645	23					
ANR	480735	Condition	bfvm_get ( c ) != 0	213:7:3862:3878	480645	0	True				
ANR	480736	EqualityExpression	bfvm_get ( c ) != 0		480645	0		!=			
ANR	480737	CallExpression	bfvm_get ( c )		480645	0					
ANR	480738	Callee	bfvm_get		480645	0					
ANR	480739	Identifier	bfvm_get		480645	0					
ANR	480740	ArgumentList	c		480645	1					
ANR	480741	Argument	c		480645	0					
ANR	480742	Identifier	c		480645	0					
ANR	480743	PrimaryExpression	0		480645	1					
ANR	480744	CompoundStatement		33:26:449:449	480645	1					
ANR	480745	DoStatement	do		480645	0					
ANR	480746	CompoundStatement		34:7:458:458	480645	0					
ANR	480747	IfStatement	if ( c -> eip < ( c -> eip - 1 ) )		480645	0					
ANR	480748	Condition	c -> eip < ( c -> eip - 1 )	216:9:3930:3948	480645	0	True				
ANR	480749	RelationalExpression	c -> eip < ( c -> eip - 1 )		480645	0		<			
ANR	480750	PtrMemberAccess	c -> eip		480645	0					
ANR	480751	Identifier	c		480645	0					
ANR	480752	Identifier	eip		480645	1					
ANR	480753	AdditiveExpression	c -> eip - 1		480645	1		-			
ANR	480754	PtrMemberAccess	c -> eip		480645	0					
ANR	480755	Identifier	c		480645	0					
ANR	480756	Identifier	eip		480645	1					
ANR	480757	PrimaryExpression	1		480645	1					
ANR	480758	CompoundStatement		36:30:519:519	480645	1					
ANR	480759	ExpressionStatement	c -> eip = 0	217:6:3959:3969	480645	0	True				
ANR	480760	AssignmentExpression	c -> eip = 0		480645	0		=			
ANR	480761	PtrMemberAccess	c -> eip		480645	0					
ANR	480762	Identifier	c		480645	0					
ANR	480763	Identifier	eip		480645	1					
ANR	480764	PrimaryExpression	0		480645	1					
ANR	480765	BreakStatement	break ;	218:6:3977:3982	480645	1	True				
ANR	480766	ExpressionStatement	c -> eip --	220:5:3996:4004	480645	1	True				
ANR	480767	PostIncDecOperationExpression	c -> eip --		480645	0					
ANR	480768	PtrMemberAccess	c -> eip		480645	0					
ANR	480769	Identifier	c		480645	0					
ANR	480770	Identifier	eip		480645	1					
ANR	480771	IncDec	--		480645	1					
ANR	480772	Condition	bfvm_op ( c ) != '['	221:13:4019:4034	480645	1	True				
ANR	480773	EqualityExpression	bfvm_op ( c ) != '['		480645	0		!=			
ANR	480774	CallExpression	bfvm_op ( c )		480645	0					
ANR	480775	Callee	bfvm_op		480645	0					
ANR	480776	Identifier	bfvm_op		480645	0					
ANR	480777	ArgumentList	c		480645	1					
ANR	480778	Argument	c		480645	0					
ANR	480779	Identifier	c		480645	0					
ANR	480780	PrimaryExpression	'['		480645	1					
ANR	480781	BreakStatement	break ;	223:3:4046:4051	480645	24	True				
ANR	480782	Label	default :	224:2:4055:4062	480645	25	True				
ANR	480783	Identifier	default		480645	0					
ANR	480784	BreakStatement	break ;	225:3:4067:4072	480645	26	True				
ANR	480785	ExpressionStatement	c -> eip ++	227:2:4080:4088	480645	2	True				
ANR	480786	PostIncDecOperationExpression	c -> eip ++		480645	0					
ANR	480787	PtrMemberAccess	c -> eip		480645	0					
ANR	480788	Identifier	c		480645	0					
ANR	480789	Identifier	eip		480645	1					
ANR	480790	IncDec	++		480645	1					
ANR	480791	ExpressionStatement	op2 = bfvm_op ( c )	228:2:4092:4109	480645	3	True				
ANR	480792	AssignmentExpression	op2 = bfvm_op ( c )		480645	0		=			
ANR	480793	Identifier	op2		480645	0					
ANR	480794	CallExpression	bfvm_op ( c )		480645	1					
ANR	480795	Callee	bfvm_op		480645	0					
ANR	480796	Identifier	bfvm_op		480645	0					
ANR	480797	ArgumentList	c		480645	1					
ANR	480798	Argument	c		480645	0					
ANR	480799	Identifier	c		480645	0					
ANR	480800	Condition	over && op == op2	229:10:4121:4137	480645	1	True				
ANR	480801	AndExpression	over && op == op2		480645	0		&&			
ANR	480802	Identifier	over		480645	0					
ANR	480803	EqualityExpression	op == op2		480645	1		==			
ANR	480804	Identifier	op		480645	0					
ANR	480805	Identifier	op2		480645	1					
ANR	480806	ReturnStatement	return 0 ;	231:1:4143:4151	480645	2	True				
ANR	480807	PrimaryExpression	0		480645	0					
ANR	480808	ReturnType	R_API int		480645	1					
ANR	480809	Identifier	bfvm_step		480645	2					
ANR	480810	ParameterList	"BfvmCPU * c , int over"		480645	3					
ANR	480811	Parameter	BfvmCPU * c	181:20:3409:3418	480645	0	True				
ANR	480812	ParameterType	BfvmCPU *		480645	0					
ANR	480813	Identifier	c		480645	1					
ANR	480814	Parameter	int over	181:32:3421:3428	480645	1	True				
ANR	480815	ParameterType	int		480645	0					
ANR	480816	Identifier	over		480645	1					
ANR	480817	CFGEntryNode	ENTRY		480645		True				
ANR	480818	CFGExitNode	EXIT		480645		True				
ANR	480819	Symbol	over		480645						
ANR	480820	Symbol	op2		480645						
ANR	480821	Symbol	op		480645						
ANR	480822	Symbol	c		480645						
ANR	480823	Symbol	bfvm_trace_op		480645						
ANR	480824	Symbol	c -> ptr		480645						
ANR	480825	Symbol	bfvm_get		480645						
ANR	480826	Symbol	c -> eip		480645						
ANR	480827	Symbol	bfvm_op		480645						
ANR	480828	Symbol	* c		480645						
ANR	480829	Function	bfvm_contsc	234:0:4156:4577							
ANR	480830	FunctionDef	bfvm_contsc (BfvmCPU * c)		480829	0					
ANR	480831	CompoundStatement		234:34:4190:4577	480829	0					
ANR	480832	ExpressionStatement	c -> breaked = 0	235:1:4193:4207	480829	0	True				
ANR	480833	AssignmentExpression	c -> breaked = 0		480829	0		=			
ANR	480834	PtrMemberAccess	c -> breaked		480829	0					
ANR	480835	Identifier	c		480829	0					
ANR	480836	Identifier	breaked		480829	1					
ANR	480837	PrimaryExpression	0		480829	1					
ANR	480838	WhileStatement	while ( ! c -> breaked )		480829	1					
ANR	480839	Condition	! c -> breaked	236:8:4217:4227	480829	0	True				
ANR	480840	UnaryOperationExpression	! c -> breaked		480829	0					
ANR	480841	UnaryOperator	!		480829	0					
ANR	480842	PtrMemberAccess	c -> breaked		480829	1					
ANR	480843	Identifier	c		480829	0					
ANR	480844	Identifier	breaked		480829	1					
ANR	480845	CompoundStatement		3:21:39:39	480829	1					
ANR	480846	ExpressionStatement	"bfvm_step ( c , 0 )"	237:2:4234:4250	480829	0	True				
ANR	480847	CallExpression	"bfvm_step ( c , 0 )"		480829	0					
ANR	480848	Callee	bfvm_step		480829	0					
ANR	480849	Identifier	bfvm_step		480829	0					
ANR	480850	ArgumentList	c		480829	1					
ANR	480851	Argument	c		480829	0					
ANR	480852	Identifier	c		480829	0					
ANR	480853	Argument	0		480829	1					
ANR	480854	PrimaryExpression	0		480829	0					
ANR	480855	IfStatement	if ( bfvm_in_trap ( c ) )		480829	1					
ANR	480856	Condition	bfvm_in_trap ( c )	238:6:4258:4273	480829	0	True				
ANR	480857	CallExpression	bfvm_in_trap ( c )		480829	0					
ANR	480858	Callee	bfvm_in_trap		480829	0					
ANR	480859	Identifier	bfvm_in_trap		480829	0					
ANR	480860	ArgumentList	c		480829	1					
ANR	480861	Argument	c		480829	0					
ANR	480862	Identifier	c		480829	0					
ANR	480863	CompoundStatement		5:24:85:85	480829	1					
ANR	480864	Statement	eprintf	239:3:4281:4287	480829	0	True				
ANR	480865	Statement	(	239:11:4289:4289	480829	1	True				
ANR	480866	Statement	"""Trap instruction at 0x%08"""	239:12:4290:4316	480829	2	True				
ANR	480867	Statement	PFMT64x	239:39:4317:4323	480829	3	True				
ANR	480868	Statement	"""\\n"""	239:46:4324:4327	480829	4	True				
ANR	480869	Statement	","	239:50:4328:4328	480829	5	True				
ANR	480870	Statement	c	239:52:4330:4330	480829	6	True				
ANR	480871	Statement	->	239:53:4331:4332	480829	7	True				
ANR	480872	Statement	eip	239:55:4333:4335	480829	8	True				
ANR	480873	Statement	)	239:58:4336:4336	480829	9	True				
ANR	480874	ExpressionStatement		239:59:4337:4337	480829	10	True				
ANR	480875	BreakStatement	break ;	240:3:4342:4347	480829	11	True				
ANR	480876	SwitchStatement	switch ( bfvm_op ( c ) )		480829	2					
ANR	480877	Condition	bfvm_op ( c )	242:10:4363:4373	480829	0	True				
ANR	480878	CallExpression	bfvm_op ( c )		480829	0					
ANR	480879	Callee	bfvm_op		480829	0					
ANR	480880	Identifier	bfvm_op		480829	0					
ANR	480881	ArgumentList	c		480829	1					
ANR	480882	Argument	c		480829	0					
ANR	480883	Identifier	c		480829	0					
ANR	480884	CompoundStatement		9:23:185:185	480829	1					
ANR	480885	Label	"case ',' :"	243:2:4380:4388	480829	0	True				
ANR	480886	ExpressionStatement	"eprintf ( ""contsc: read from input trap\\n"" )"	244:3:4393:4434	480829	1	True				
ANR	480887	CallExpression	"eprintf ( ""contsc: read from input trap\\n"" )"		480829	0					
ANR	480888	Callee	eprintf		480829	0					
ANR	480889	Identifier	eprintf		480829	0					
ANR	480890	ArgumentList	"""contsc: read from input trap\\n"""		480829	1					
ANR	480891	Argument	"""contsc: read from input trap\\n"""		480829	0					
ANR	480892	PrimaryExpression	"""contsc: read from input trap\\n"""		480829	0					
ANR	480893	ExpressionStatement	c -> breaked = 1	245:3:4439:4453	480829	2	True				
ANR	480894	AssignmentExpression	c -> breaked = 1		480829	0		=			
ANR	480895	PtrMemberAccess	c -> breaked		480829	0					
ANR	480896	Identifier	c		480829	0					
ANR	480897	Identifier	breaked		480829	1					
ANR	480898	PrimaryExpression	1		480829	1					
ANR	480899	ContinueStatement	continue ;	246:3:4458:4466	480829	3	True				
ANR	480900	Label	case '.' :	247:2:4470:4478	480829	4	True				
ANR	480901	ExpressionStatement	"eprintf ( ""contsc: print to screen trap\\n"" )"	248:3:4483:4525	480829	5	True				
ANR	480902	CallExpression	"eprintf ( ""contsc: print to screen trap\\n"" )"		480829	0					
ANR	480903	Callee	eprintf		480829	0					
ANR	480904	Identifier	eprintf		480829	0					
ANR	480905	ArgumentList	"""contsc: print to screen trap\\n"""		480829	1					
ANR	480906	Argument	"""contsc: print to screen trap\\n"""		480829	0					
ANR	480907	PrimaryExpression	"""contsc: print to screen trap\\n"""		480829	0					
ANR	480908	ExpressionStatement	c -> breaked = 1	249:3:4530:4544	480829	6	True				
ANR	480909	AssignmentExpression	c -> breaked = 1		480829	0		=			
ANR	480910	PtrMemberAccess	c -> breaked		480829	0					
ANR	480911	Identifier	c		480829	0					
ANR	480912	Identifier	breaked		480829	1					
ANR	480913	PrimaryExpression	1		480829	1					
ANR	480914	ContinueStatement	continue ;	250:3:4549:4557	480829	7	True				
ANR	480915	ReturnStatement	return 0 ;	253:1:4567:4575	480829	2	True				
ANR	480916	PrimaryExpression	0		480829	0					
ANR	480917	ReturnType	R_API int		480829	1					
ANR	480918	Identifier	bfvm_contsc		480829	2					
ANR	480919	ParameterList	BfvmCPU * c		480829	3					
ANR	480920	Parameter	BfvmCPU * c	234:22:4178:4187	480829	0	True				
ANR	480921	ParameterType	BfvmCPU *		480829	0					
ANR	480922	Identifier	c		480829	1					
ANR	480923	CFGEntryNode	ENTRY		480829		True				
ANR	480924	CFGExitNode	EXIT		480829		True				
ANR	480925	Symbol	bfvm_in_trap		480829						
ANR	480926	Symbol	c		480829						
ANR	480927	Symbol	bfvm_op		480829						
ANR	480928	Symbol	* c		480829						
ANR	480929	Symbol	c -> breaked		480829						
ANR	480930	Function	bfvm_cont	256:0:4580:4818							
ANR	480931	FunctionDef	"bfvm_cont (BfvmCPU * c , ut64 until)"		480930	0					
ANR	480932	CompoundStatement		256:44:4624:4818	480930	0					
ANR	480933	ExpressionStatement	c -> breaked = 0	257:1:4627:4641	480930	0	True				
ANR	480934	AssignmentExpression	c -> breaked = 0		480930	0		=			
ANR	480935	PtrMemberAccess	c -> breaked		480930	0					
ANR	480936	Identifier	c		480930	0					
ANR	480937	Identifier	breaked		480930	1					
ANR	480938	PrimaryExpression	0		480930	1					
ANR	480939	WhileStatement	while ( ! c -> breaked && c -> eip != until )		480930	1					
ANR	480940	Condition	! c -> breaked && c -> eip != until	258:8:4651:4680	480930	0	True				
ANR	480941	AndExpression	! c -> breaked && c -> eip != until		480930	0		&&			
ANR	480942	UnaryOperationExpression	! c -> breaked		480930	0					
ANR	480943	UnaryOperator	!		480930	0					
ANR	480944	PtrMemberAccess	c -> breaked		480930	1					
ANR	480945	Identifier	c		480930	0					
ANR	480946	Identifier	breaked		480930	1					
ANR	480947	EqualityExpression	c -> eip != until		480930	1		!=			
ANR	480948	PtrMemberAccess	c -> eip		480930	0					
ANR	480949	Identifier	c		480930	0					
ANR	480950	Identifier	eip		480930	1					
ANR	480951	Identifier	until		480930	1					
ANR	480952	CompoundStatement		3:40:58:58	480930	1					
ANR	480953	ExpressionStatement	"bfvm_step ( c , 0 )"	259:2:4687:4703	480930	0	True				
ANR	480954	CallExpression	"bfvm_step ( c , 0 )"		480930	0					
ANR	480955	Callee	bfvm_step		480930	0					
ANR	480956	Identifier	bfvm_step		480930	0					
ANR	480957	ArgumentList	c		480930	1					
ANR	480958	Argument	c		480930	0					
ANR	480959	Identifier	c		480930	0					
ANR	480960	Argument	0		480930	1					
ANR	480961	PrimaryExpression	0		480930	0					
ANR	480962	IfStatement	if ( bfvm_in_trap ( c ) )		480930	1					
ANR	480963	Condition	bfvm_in_trap ( c )	260:6:4711:4726	480930	0	True				
ANR	480964	CallExpression	bfvm_in_trap ( c )		480930	0					
ANR	480965	Callee	bfvm_in_trap		480930	0					
ANR	480966	Identifier	bfvm_in_trap		480930	0					
ANR	480967	ArgumentList	c		480930	1					
ANR	480968	Argument	c		480930	0					
ANR	480969	Identifier	c		480930	0					
ANR	480970	CompoundStatement		5:24:104:104	480930	1					
ANR	480971	Statement	eprintf	261:3:4734:4740	480930	0	True				
ANR	480972	Statement	(	261:11:4742:4742	480930	1	True				
ANR	480973	Statement	"""Trap instruction at 0x%"""	261:12:4743:4767	480930	2	True				
ANR	480974	Statement	PFMT64x	261:37:4768:4774	480930	3	True				
ANR	480975	Statement	"""\\n"""	261:44:4775:4778	480930	4	True				
ANR	480976	Statement	","	261:48:4779:4779	480930	5	True				
ANR	480977	Statement	c	261:50:4781:4781	480930	6	True				
ANR	480978	Statement	->	261:51:4782:4783	480930	7	True				
ANR	480979	Statement	eip	261:53:4784:4786	480930	8	True				
ANR	480980	Statement	)	261:56:4787:4787	480930	9	True				
ANR	480981	ExpressionStatement		261:57:4788:4788	480930	10	True				
ANR	480982	BreakStatement	break ;	262:3:4793:4798	480930	11	True				
ANR	480983	ReturnStatement	return 0 ;	265:1:4808:4816	480930	2	True				
ANR	480984	PrimaryExpression	0		480930	0					
ANR	480985	ReturnType	R_API int		480930	1					
ANR	480986	Identifier	bfvm_cont		480930	2					
ANR	480987	ParameterList	"BfvmCPU * c , ut64 until"		480930	3					
ANR	480988	Parameter	BfvmCPU * c	256:20:4600:4609	480930	0	True				
ANR	480989	ParameterType	BfvmCPU *		480930	0					
ANR	480990	Identifier	c		480930	1					
ANR	480991	Parameter	ut64 until	256:32:4612:4621	480930	1	True				
ANR	480992	ParameterType	ut64		480930	0					
ANR	480993	Identifier	until		480930	1					
ANR	480994	CFGEntryNode	ENTRY		480930		True				
ANR	480995	CFGExitNode	EXIT		480930		True				
ANR	480996	Symbol	bfvm_in_trap		480930						
ANR	480997	Symbol	c		480930						
ANR	480998	Symbol	c -> eip		480930						
ANR	480999	Symbol	until		480930						
ANR	481000	Symbol	* c		480930						
ANR	481001	Symbol	c -> breaked		480930						
ANR	481002	Function	bfvm_trace	268:0:4821:4928							
ANR	481003	FunctionDef	"bfvm_trace (BfvmCPU * c , ut64 until)"		481002	0					
ANR	481004	CompoundStatement		268:45:4866:4928	481002	0					
ANR	481005	ExpressionStatement	c -> trace = 1	269:1:4869:4879	481002	0	True				
ANR	481006	AssignmentExpression	c -> trace = 1		481002	0		=			
ANR	481007	PtrMemberAccess	c -> trace		481002	0					
ANR	481008	Identifier	c		481002	0					
ANR	481009	Identifier	trace		481002	1					
ANR	481010	PrimaryExpression	1		481002	1					
ANR	481011	ExpressionStatement	"bfvm_cont ( c , until )"	270:1:4882:4902	481002	1	True				
ANR	481012	CallExpression	"bfvm_cont ( c , until )"		481002	0					
ANR	481013	Callee	bfvm_cont		481002	0					
ANR	481014	Identifier	bfvm_cont		481002	0					
ANR	481015	ArgumentList	c		481002	1					
ANR	481016	Argument	c		481002	0					
ANR	481017	Identifier	c		481002	0					
ANR	481018	Argument	until		481002	1					
ANR	481019	Identifier	until		481002	0					
ANR	481020	ExpressionStatement	c -> trace = 0	271:1:4905:4915	481002	2	True				
ANR	481021	AssignmentExpression	c -> trace = 0		481002	0		=			
ANR	481022	PtrMemberAccess	c -> trace		481002	0					
ANR	481023	Identifier	c		481002	0					
ANR	481024	Identifier	trace		481002	1					
ANR	481025	PrimaryExpression	0		481002	1					
ANR	481026	ReturnStatement	return 0 ;	272:1:4918:4926	481002	3	True				
ANR	481027	PrimaryExpression	0		481002	0					
ANR	481028	ReturnType	R_API int		481002	1					
ANR	481029	Identifier	bfvm_trace		481002	2					
ANR	481030	ParameterList	"BfvmCPU * c , ut64 until"		481002	3					
ANR	481031	Parameter	BfvmCPU * c	268:21:4842:4851	481002	0	True				
ANR	481032	ParameterType	BfvmCPU *		481002	0					
ANR	481033	Identifier	c		481002	1					
ANR	481034	Parameter	ut64 until	268:33:4854:4863	481002	1	True				
ANR	481035	ParameterType	ut64		481002	0					
ANR	481036	Identifier	until		481002	1					
ANR	481037	CFGEntryNode	ENTRY		481002		True				
ANR	481038	CFGExitNode	EXIT		481002		True				
ANR	481039	Symbol	c		481002						
ANR	481040	Symbol	until		481002						
ANR	481041	Symbol	* c		481002						
ANR	481042	Symbol	c -> trace		481002						
ANR	481043	Function	bfvm_show_regs	275:0:4931:5452							
ANR	481044	FunctionDef	"bfvm_show_regs (BfvmCPU * c , int rad)"		481043	0					
ANR	481045	CompoundStatement		275:47:4978:5452	481043	0					
ANR	481046	IfStatement	if ( rad )		481043	0					
ANR	481047	Condition	rad	276:5:4985:4987	481043	0	True				
ANR	481048	Identifier	rad		481043	0					
ANR	481049	CompoundStatement		2:10:11:11	481043	1					
ANR	481050	ExpressionStatement	"eprintf ( ""fs regs\\n"" )"	277:2:4994:5015	481043	0	True				
ANR	481051	CallExpression	"eprintf ( ""fs regs\\n"" )"		481043	0					
ANR	481052	Callee	eprintf		481043	0					
ANR	481053	Identifier	eprintf		481043	0					
ANR	481054	ArgumentList	"""fs regs\\n"""		481043	1					
ANR	481055	Argument	"""fs regs\\n"""		481043	0					
ANR	481056	PrimaryExpression	"""fs regs\\n"""		481043	0					
ANR	481057	Statement	eprintf	278:2:5019:5025	481043	1	True				
ANR	481058	Statement	(	278:10:5027:5027	481043	2	True				
ANR	481059	Statement	"""f eip @ 0x%08"""	278:11:5028:5042	481043	3	True				
ANR	481060	Statement	PFMT64x	278:26:5043:5049	481043	4	True				
ANR	481061	Statement	"""\\n"""	278:33:5050:5053	481043	5	True				
ANR	481062	Statement	","	278:37:5054:5054	481043	6	True				
ANR	481063	Statement	(	278:39:5056:5056	481043	7	True				
ANR	481064	Statement	ut64	278:40:5057:5060	481043	8	True				
ANR	481065	Statement	)	278:44:5061:5061	481043	9	True				
ANR	481066	Statement	c	278:45:5062:5062	481043	10	True				
ANR	481067	Statement	->	278:46:5063:5064	481043	11	True				
ANR	481068	Statement	eip	278:48:5065:5067	481043	12	True				
ANR	481069	Statement	)	278:51:5068:5068	481043	13	True				
ANR	481070	ExpressionStatement		278:52:5069:5069	481043	14	True				
ANR	481071	Statement	eprintf	279:2:5073:5079	481043	15	True				
ANR	481072	Statement	(	279:10:5081:5081	481043	16	True				
ANR	481073	Statement	"""f esp @ 0x%08"""	279:11:5082:5096	481043	17	True				
ANR	481074	Statement	PFMT64x	279:26:5097:5103	481043	18	True				
ANR	481075	Statement	"""\\n"""	279:33:5104:5107	481043	19	True				
ANR	481076	Statement	","	279:37:5108:5108	481043	20	True				
ANR	481077	Statement	(	279:39:5110:5110	481043	21	True				
ANR	481078	Statement	ut64	279:40:5111:5114	481043	22	True				
ANR	481079	Statement	)	279:44:5115:5115	481043	23	True				
ANR	481080	Statement	c	279:45:5116:5116	481043	24	True				
ANR	481081	Statement	->	279:46:5117:5118	481043	25	True				
ANR	481082	Statement	esp	279:48:5119:5121	481043	26	True				
ANR	481083	Statement	)	279:51:5122:5122	481043	27	True				
ANR	481084	ExpressionStatement		279:52:5123:5123	481043	28	True				
ANR	481085	Statement	eprintf	280:2:5127:5133	481043	29	True				
ANR	481086	Statement	(	280:10:5135:5135	481043	30	True				
ANR	481087	Statement	"""f ptr @ 0x%08"""	280:11:5136:5150	481043	31	True				
ANR	481088	Statement	PFMT64x	280:26:5151:5157	481043	32	True				
ANR	481089	Statement	"""\\n"""	280:33:5158:5161	481043	33	True				
ANR	481090	Statement	","	280:37:5162:5162	481043	34	True				
ANR	481091	Statement	(	280:39:5164:5164	481043	35	True				
ANR	481092	Statement	ut64	280:40:5165:5168	481043	36	True				
ANR	481093	Statement	)	280:44:5169:5169	481043	37	True				
ANR	481094	Statement	c	280:45:5170:5170	481043	38	True				
ANR	481095	Statement	->	280:46:5171:5172	481043	39	True				
ANR	481096	Statement	ptr	280:48:5173:5175	481043	40	True				
ANR	481097	Statement	+	280:51:5176:5176	481043	41	True				
ANR	481098	Statement	c	280:52:5177:5177	481043	42	True				
ANR	481099	Statement	->	280:53:5178:5179	481043	43	True				
ANR	481100	Statement	base	280:55:5180:5183	481043	44	True				
ANR	481101	Statement	)	280:59:5184:5184	481043	45	True				
ANR	481102	ExpressionStatement		280:60:5185:5185	481043	46	True				
ANR	481103	ExpressionStatement	"eprintf ( ""fs *\\n"" )"	281:2:5189:5207	481043	47	True				
ANR	481104	CallExpression	"eprintf ( ""fs *\\n"" )"		481043	0					
ANR	481105	Callee	eprintf		481043	0					
ANR	481106	Identifier	eprintf		481043	0					
ANR	481107	ArgumentList	"""fs *\\n"""		481043	1					
ANR	481108	Argument	"""fs *\\n"""		481043	0					
ANR	481109	PrimaryExpression	"""fs *\\n"""		481043	0					
ANR	481110	ElseStatement	else		481043	0					
ANR	481111	CompoundStatement		9:2:242:263	481043	0					
ANR	481112	IdentifierDeclStatement	ut8 ch = bfvm_get ( c ) ;	283:2:5221:5242	481043	0	True				
ANR	481113	IdentifierDecl	ch = bfvm_get ( c )		481043	0					
ANR	481114	IdentifierDeclType	ut8		481043	0					
ANR	481115	Identifier	ch		481043	1					
ANR	481116	AssignmentExpression	ch = bfvm_get ( c )		481043	2		=			
ANR	481117	Identifier	ch		481043	0					
ANR	481118	CallExpression	bfvm_get ( c )		481043	1					
ANR	481119	Callee	bfvm_get		481043	0					
ANR	481120	Identifier	bfvm_get		481043	0					
ANR	481121	ArgumentList	c		481043	1					
ANR	481122	Argument	c		481043	0					
ANR	481123	Identifier	c		481043	0					
ANR	481124	Statement	eprintf	284:2:5246:5252	481043	1	True				
ANR	481125	Statement	(	284:10:5254:5254	481043	2	True				
ANR	481126	Statement	"""  eip  0x%08"""	284:11:5255:5268	481043	3	True				
ANR	481127	Statement	PFMT64x	284:25:5269:5275	481043	4	True				
ANR	481128	Statement	"""     esp  0x%08"""	284:32:5276:5292	481043	5	True				
ANR	481129	Statement	PFMT64x	284:49:5293:5299	481043	6	True				
ANR	481130	Statement	"""\\n"""	284:56:5300:5303	481043	7	True				
ANR	481131	Statement	","	284:60:5304:5304	481043	8	True				
ANR	481132	Statement	(	285:3:5309:5309	481043	9	True				
ANR	481133	Statement	ut64	285:4:5310:5313	481043	10	True				
ANR	481134	Statement	)	285:8:5314:5314	481043	11	True				
ANR	481135	Statement	c	285:9:5315:5315	481043	12	True				
ANR	481136	Statement	->	285:10:5316:5317	481043	13	True				
ANR	481137	Statement	eip	285:12:5318:5320	481043	14	True				
ANR	481138	Statement	","	285:15:5321:5321	481043	15	True				
ANR	481139	Statement	(	285:17:5323:5323	481043	16	True				
ANR	481140	Statement	ut64	285:18:5324:5327	481043	17	True				
ANR	481141	Statement	)	285:22:5328:5328	481043	18	True				
ANR	481142	Statement	c	285:23:5329:5329	481043	19	True				
ANR	481143	Statement	->	285:24:5330:5331	481043	20	True				
ANR	481144	Statement	esp	285:26:5332:5334	481043	21	True				
ANR	481145	Statement	)	285:29:5335:5335	481043	22	True				
ANR	481146	ExpressionStatement		285:30:5336:5336	481043	23	True				
ANR	481147	ExpressionStatement	"eprintf ( ""  ptr  0x%08x     [ptr]  %d = 0x%02x '%c'\\n"" , ( ut32 ) c -> ptr , ch , ch , IS_PRINTABLE ( ch ) ? ch : ' ' )"	286:2:5340:5447	481043	24	True				
ANR	481148	CallExpression	"eprintf ( ""  ptr  0x%08x     [ptr]  %d = 0x%02x '%c'\\n"" , ( ut32 ) c -> ptr , ch , ch , IS_PRINTABLE ( ch ) ? ch : ' ' )"		481043	0					
ANR	481149	Callee	eprintf		481043	0					
ANR	481150	Identifier	eprintf		481043	0					
ANR	481151	ArgumentList	"""  ptr  0x%08x     [ptr]  %d = 0x%02x '%c'\\n"""		481043	1					
ANR	481152	Argument	"""  ptr  0x%08x     [ptr]  %d = 0x%02x '%c'\\n"""		481043	0					
ANR	481153	PrimaryExpression	"""  ptr  0x%08x     [ptr]  %d = 0x%02x '%c'\\n"""		481043	0					
ANR	481154	Argument	( ut32 ) c -> ptr		481043	1					
ANR	481155	CastExpression	( ut32 ) c -> ptr		481043	0					
ANR	481156	CastTarget	ut32		481043	0					
ANR	481157	PtrMemberAccess	c -> ptr		481043	1					
ANR	481158	Identifier	c		481043	0					
ANR	481159	Identifier	ptr		481043	1					
ANR	481160	Argument	ch		481043	2					
ANR	481161	Identifier	ch		481043	0					
ANR	481162	Argument	ch		481043	3					
ANR	481163	Identifier	ch		481043	0					
ANR	481164	Argument	IS_PRINTABLE ( ch ) ? ch : ' '		481043	4					
ANR	481165	ConditionalExpression	IS_PRINTABLE ( ch ) ? ch : ' '		481043	0					
ANR	481166	Condition	IS_PRINTABLE ( ch )		481043	0					
ANR	481167	CallExpression	IS_PRINTABLE ( ch )		481043	0					
ANR	481168	Callee	IS_PRINTABLE		481043	0					
ANR	481169	Identifier	IS_PRINTABLE		481043	0					
ANR	481170	ArgumentList	ch		481043	1					
ANR	481171	Argument	ch		481043	0					
ANR	481172	Identifier	ch		481043	0					
ANR	481173	Identifier	ch		481043	1					
ANR	481174	PrimaryExpression	' '		481043	2					
ANR	481175	ReturnType	R_API void		481043	1					
ANR	481176	Identifier	bfvm_show_regs		481043	2					
ANR	481177	ParameterList	"BfvmCPU * c , int rad"		481043	3					
ANR	481178	Parameter	BfvmCPU * c	275:26:4957:4966	481043	0	True				
ANR	481179	ParameterType	BfvmCPU *		481043	0					
ANR	481180	Identifier	c		481043	1					
ANR	481181	Parameter	int rad	275:38:4969:4975	481043	1	True				
ANR	481182	ParameterType	int		481043	0					
ANR	481183	Identifier	rad		481043	1					
ANR	481184	CFGEntryNode	ENTRY		481043		True				
ANR	481185	CFGExitNode	EXIT		481043		True				
ANR	481186	Symbol	c		481043						
ANR	481187	Symbol	IS_PRINTABLE		481043						
ANR	481188	Symbol	c -> ptr		481043						
ANR	481189	Symbol	rad		481043						
ANR	481190	Symbol	ch		481043						
ANR	481191	Symbol	bfvm_get		481043						
ANR	481192	Symbol	* c		481043						
ANR	481193	Function	bfvm_maps	291:0:5455:6891							
ANR	481194	FunctionDef	"bfvm_maps (BfvmCPU * c , int rad)"		481193	0					
ANR	481195	CompoundStatement		291:42:5497:6891	481193	0					
ANR	481196	IfStatement	if ( rad )		481193	0					
ANR	481197	Condition	rad	292:5:5504:5506	481193	0	True				
ANR	481198	Identifier	rad		481193	0					
ANR	481199	CompoundStatement		2:10:11:11	481193	1					
ANR	481200	ExpressionStatement	"eprintf ( ""fs sections\\n"" )"	293:2:5513:5538	481193	0	True				
ANR	481201	CallExpression	"eprintf ( ""fs sections\\n"" )"		481193	0					
ANR	481202	Callee	eprintf		481193	0					
ANR	481203	Identifier	eprintf		481193	0					
ANR	481204	ArgumentList	"""fs sections\\n"""		481193	1					
ANR	481205	Argument	"""fs sections\\n"""		481193	0					
ANR	481206	PrimaryExpression	"""fs sections\\n"""		481193	0					
ANR	481207	ExpressionStatement	"eprintf ( ""e cmd.vprompt=px@screen\\n"" )"	294:2:5542:5579	481193	1	True				
ANR	481208	CallExpression	"eprintf ( ""e cmd.vprompt=px@screen\\n"" )"		481193	0					
ANR	481209	Callee	eprintf		481193	0					
ANR	481210	Identifier	eprintf		481193	0					
ANR	481211	ArgumentList	"""e cmd.vprompt=px@screen\\n"""		481193	1					
ANR	481212	Argument	"""e cmd.vprompt=px@screen\\n"""		481193	0					
ANR	481213	PrimaryExpression	"""e cmd.vprompt=px@screen\\n"""		481193	0					
ANR	481214	Statement	eprintf	295:2:5583:5589	481193	2	True				
ANR	481215	Statement	(	295:10:5591:5591	481193	3	True				
ANR	481216	Statement	"""f section_code @ 0x%08"""	295:11:5592:5615	481193	4	True				
ANR	481217	Statement	PFMT64x	295:35:5616:5622	481193	5	True				
ANR	481218	Statement	"""\\n"""	295:42:5623:5626	481193	6	True				
ANR	481219	Statement	","	295:46:5627:5627	481193	7	True				
ANR	481220	Statement	(	295:48:5629:5629	481193	8	True				
ANR	481221	Statement	ut64	295:49:5630:5633	481193	9	True				
ANR	481222	Statement	)	295:53:5634:5634	481193	10	True				
ANR	481223	Statement	BFVM_CODE_ADDR	295:54:5635:5648	481193	11	True				
ANR	481224	Statement	)	295:68:5649:5649	481193	12	True				
ANR	481225	ExpressionStatement		295:69:5650:5650	481193	13	True				
ANR	481226	Statement	eprintf	296:2:5654:5660	481193	14	True				
ANR	481227	Statement	(	296:10:5662:5662	481193	15	True				
ANR	481228	Statement	"""f section_code_end @ 0x%08"""	296:11:5663:5690	481193	16	True				
ANR	481229	Statement	PFMT64x	296:39:5691:5697	481193	17	True				
ANR	481230	Statement	"""\\n"""	296:46:5698:5701	481193	18	True				
ANR	481231	Statement	","	296:50:5702:5702	481193	19	True				
ANR	481232	Statement	(	296:52:5704:5704	481193	20	True				
ANR	481233	Statement	ut64	296:53:5705:5708	481193	21	True				
ANR	481234	Statement	)	296:57:5709:5709	481193	22	True				
ANR	481235	Statement	BFVM_CODE_ADDR	296:58:5710:5723	481193	23	True				
ANR	481236	Statement	+	296:72:5724:5724	481193	24	True				
ANR	481237	Statement	BFVM_CODE_SIZE	296:73:5725:5738	481193	25	True				
ANR	481238	Statement	)	296:87:5739:5739	481193	26	True				
ANR	481239	ExpressionStatement		296:88:5740:5740	481193	27	True				
ANR	481240	Statement	eprintf	297:2:5744:5750	481193	28	True				
ANR	481241	Statement	(	297:10:5752:5752	481193	29	True				
ANR	481242	Statement	"""f section_data @ 0x%08"""	297:11:5753:5776	481193	30	True				
ANR	481243	Statement	PFMT64x	297:35:5777:5783	481193	31	True				
ANR	481244	Statement	"""\\n"""	297:42:5784:5787	481193	32	True				
ANR	481245	Statement	","	297:46:5788:5788	481193	33	True				
ANR	481246	Statement	(	297:48:5790:5790	481193	34	True				
ANR	481247	Statement	ut64	297:49:5791:5794	481193	35	True				
ANR	481248	Statement	)	297:53:5795:5795	481193	36	True				
ANR	481249	Statement	c	297:54:5796:5796	481193	37	True				
ANR	481250	Statement	->	297:55:5797:5798	481193	38	True				
ANR	481251	Statement	base	297:57:5799:5802	481193	39	True				
ANR	481252	Statement	)	297:61:5803:5803	481193	40	True				
ANR	481253	ExpressionStatement		297:62:5804:5804	481193	41	True				
ANR	481254	Statement	eprintf	298:2:5808:5814	481193	42	True				
ANR	481255	Statement	(	298:10:5816:5816	481193	43	True				
ANR	481256	Statement	"""f section_data_end @ 0x%08"""	298:11:5817:5844	481193	44	True				
ANR	481257	Statement	PFMT64x	298:39:5845:5851	481193	45	True				
ANR	481258	Statement	"""\\n"""	298:46:5852:5855	481193	46	True				
ANR	481259	Statement	","	298:50:5856:5856	481193	47	True				
ANR	481260	Statement	(	298:52:5858:5858	481193	48	True				
ANR	481261	Statement	ut64	298:53:5859:5862	481193	49	True				
ANR	481262	Statement	)	298:57:5863:5863	481193	50	True				
ANR	481263	Statement	c	298:58:5864:5864	481193	51	True				
ANR	481264	Statement	->	298:59:5865:5866	481193	52	True				
ANR	481265	Statement	base	298:61:5867:5870	481193	53	True				
ANR	481266	Statement	+	298:65:5871:5871	481193	54	True				
ANR	481267	Statement	c	298:66:5872:5872	481193	55	True				
ANR	481268	Statement	->	298:67:5873:5874	481193	56	True				
ANR	481269	Statement	size	298:69:5875:5878	481193	57	True				
ANR	481270	Statement	)	298:73:5879:5879	481193	58	True				
ANR	481271	ExpressionStatement		298:74:5880:5880	481193	59	True				
ANR	481272	Statement	eprintf	299:2:5884:5890	481193	60	True				
ANR	481273	Statement	(	299:10:5892:5892	481193	61	True				
ANR	481274	Statement	"""f screen @ 0x%08"""	299:11:5893:5910	481193	62	True				
ANR	481275	Statement	PFMT64x	299:29:5911:5917	481193	63	True				
ANR	481276	Statement	"""\\n"""	299:36:5918:5921	481193	64	True				
ANR	481277	Statement	","	299:40:5922:5922	481193	65	True				
ANR	481278	Statement	(	299:42:5924:5924	481193	66	True				
ANR	481279	Statement	ut64	299:43:5925:5928	481193	67	True				
ANR	481280	Statement	)	299:47:5929:5929	481193	68	True				
ANR	481281	Statement	c	299:48:5930:5930	481193	69	True				
ANR	481282	Statement	->	299:49:5931:5932	481193	70	True				
ANR	481283	Statement	screen	299:51:5933:5938	481193	71	True				
ANR	481284	Statement	)	299:57:5939:5939	481193	72	True				
ANR	481285	ExpressionStatement		299:58:5940:5940	481193	73	True				
ANR	481286	Statement	eprintf	300:2:5944:5950	481193	74	True				
ANR	481287	Statement	(	300:10:5952:5952	481193	75	True				
ANR	481288	Statement	"""f section_screen @ 0x%08"""	300:11:5953:5978	481193	76	True				
ANR	481289	Statement	PFMT64x	300:37:5979:5985	481193	77	True				
ANR	481290	Statement	"""\\n"""	300:44:5986:5989	481193	78	True				
ANR	481291	Statement	","	300:48:5990:5990	481193	79	True				
ANR	481292	Statement	(	300:50:5992:5992	481193	80	True				
ANR	481293	Statement	ut64	300:51:5993:5996	481193	81	True				
ANR	481294	Statement	)	300:55:5997:5997	481193	82	True				
ANR	481295	Statement	c	300:56:5998:5998	481193	83	True				
ANR	481296	Statement	->	300:57:5999:6000	481193	84	True				
ANR	481297	Statement	screen	300:59:6001:6006	481193	85	True				
ANR	481298	Statement	)	300:65:6007:6007	481193	86	True				
ANR	481299	ExpressionStatement		300:66:6008:6008	481193	87	True				
ANR	481300	Statement	eprintf	301:2:6012:6018	481193	88	True				
ANR	481301	Statement	(	301:10:6020:6020	481193	89	True				
ANR	481302	Statement	"""f section_screen_end @ 0x%08"""	301:11:6021:6050	481193	90	True				
ANR	481303	Statement	PFMT64x	301:41:6051:6057	481193	91	True				
ANR	481304	Statement	"""\\n"""	301:48:6058:6061	481193	92	True				
ANR	481305	Statement	","	301:52:6062:6062	481193	93	True				
ANR	481306	Statement	(	301:54:6064:6064	481193	94	True				
ANR	481307	Statement	ut64	301:55:6065:6068	481193	95	True				
ANR	481308	Statement	)	301:59:6069:6069	481193	96	True				
ANR	481309	Statement	c	301:60:6070:6070	481193	97	True				
ANR	481310	Statement	->	301:61:6071:6072	481193	98	True				
ANR	481311	Statement	screen	301:63:6073:6078	481193	99	True				
ANR	481312	Statement	+	301:69:6079:6079	481193	100	True				
ANR	481313	Statement	c	301:70:6080:6080	481193	101	True				
ANR	481314	Statement	->	301:71:6081:6082	481193	102	True				
ANR	481315	Statement	screen_size	301:73:6083:6093	481193	103	True				
ANR	481316	Statement	)	301:84:6094:6094	481193	104	True				
ANR	481317	ExpressionStatement		301:85:6095:6095	481193	105	True				
ANR	481318	Statement	eprintf	302:2:6099:6105	481193	106	True				
ANR	481319	Statement	(	302:10:6107:6107	481193	107	True				
ANR	481320	Statement	"""f input @ 0x%08"""	302:11:6108:6124	481193	108	True				
ANR	481321	Statement	PFMT64x	302:28:6125:6131	481193	109	True				
ANR	481322	Statement	"""\\n"""	302:35:6132:6135	481193	110	True				
ANR	481323	Statement	","	302:39:6136:6136	481193	111	True				
ANR	481324	Statement	(	302:41:6138:6138	481193	112	True				
ANR	481325	Statement	ut64	302:42:6139:6142	481193	113	True				
ANR	481326	Statement	)	302:46:6143:6143	481193	114	True				
ANR	481327	Statement	c	302:47:6144:6144	481193	115	True				
ANR	481328	Statement	->	302:48:6145:6146	481193	116	True				
ANR	481329	Statement	input	302:50:6147:6151	481193	117	True				
ANR	481330	Statement	)	302:55:6152:6152	481193	118	True				
ANR	481331	ExpressionStatement		302:56:6153:6153	481193	119	True				
ANR	481332	Statement	eprintf	303:2:6157:6163	481193	120	True				
ANR	481333	Statement	(	303:10:6165:6165	481193	121	True				
ANR	481334	Statement	"""f section_input @ 0x%08"""	303:11:6166:6190	481193	122	True				
ANR	481335	Statement	PFMT64x	303:36:6191:6197	481193	123	True				
ANR	481336	Statement	"""\\n"""	303:43:6198:6201	481193	124	True				
ANR	481337	Statement	","	303:47:6202:6202	481193	125	True				
ANR	481338	Statement	(	303:49:6204:6204	481193	126	True				
ANR	481339	Statement	ut64	303:50:6205:6208	481193	127	True				
ANR	481340	Statement	)	303:54:6209:6209	481193	128	True				
ANR	481341	Statement	c	303:55:6210:6210	481193	129	True				
ANR	481342	Statement	->	303:56:6211:6212	481193	130	True				
ANR	481343	Statement	input	303:58:6213:6217	481193	131	True				
ANR	481344	Statement	)	303:63:6218:6218	481193	132	True				
ANR	481345	ExpressionStatement		303:64:6219:6219	481193	133	True				
ANR	481346	Statement	eprintf	304:2:6223:6229	481193	134	True				
ANR	481347	Statement	(	304:10:6231:6231	481193	135	True				
ANR	481348	Statement	"""f section_input_end @ 0x%08"""	304:11:6232:6260	481193	136	True				
ANR	481349	Statement	PFMT64x	304:40:6261:6267	481193	137	True				
ANR	481350	Statement	"""\\n"""	304:47:6268:6271	481193	138	True				
ANR	481351	Statement	","	304:51:6272:6272	481193	139	True				
ANR	481352	Statement	(	304:53:6274:6274	481193	140	True				
ANR	481353	Statement	ut64	304:54:6275:6278	481193	141	True				
ANR	481354	Statement	)	304:58:6279:6279	481193	142	True				
ANR	481355	Statement	c	304:59:6280:6280	481193	143	True				
ANR	481356	Statement	->	304:60:6281:6282	481193	144	True				
ANR	481357	Statement	input	304:62:6283:6287	481193	145	True				
ANR	481358	Statement	+	304:67:6288:6288	481193	146	True				
ANR	481359	Statement	c	304:68:6289:6289	481193	147	True				
ANR	481360	Statement	->	304:69:6290:6291	481193	148	True				
ANR	481361	Statement	input_size	304:71:6292:6301	481193	149	True				
ANR	481362	Statement	)	304:81:6302:6302	481193	150	True				
ANR	481363	ExpressionStatement		304:82:6303:6303	481193	151	True				
ANR	481364	ExpressionStatement	"eprintf ( ""fs *\\n"" )"	305:2:6307:6325	481193	152	True				
ANR	481365	CallExpression	"eprintf ( ""fs *\\n"" )"		481193	0					
ANR	481366	Callee	eprintf		481193	0					
ANR	481367	Identifier	eprintf		481193	0					
ANR	481368	ArgumentList	"""fs *\\n"""		481193	1					
ANR	481369	Argument	"""fs *\\n"""		481193	0					
ANR	481370	PrimaryExpression	"""fs *\\n"""		481193	0					
ANR	481371	ElseStatement	else		481193	0					
ANR	481372	CompoundStatement		16:8:837:837	481193	0					
ANR	481373	Statement	eprintf	307:2:6339:6345	481193	0	True				
ANR	481374	Statement	(	307:10:6347:6347	481193	1	True				
ANR	481375	Statement	"""0x%08"""	307:11:6348:6354	481193	2	True				
ANR	481376	Statement	PFMT64x	307:18:6355:6361	481193	3	True				
ANR	481377	Statement	""" - 0x%08"""	307:25:6362:6371	481193	4	True				
ANR	481378	Statement	PFMT64x	307:35:6372:6378	481193	5	True				
ANR	481379	Statement	""" rwxu 0x%08"""	307:42:6379:6391	481193	6	True				
ANR	481380	Statement	PFMT64x	307:55:6392:6398	481193	7	True				
ANR	481381	Statement	""" .code\\n"""	307:62:6399:6408	481193	8	True				
ANR	481382	Statement	","	307:72:6409:6409	481193	9	True				
ANR	481383	Statement	(	308:3:6414:6414	481193	10	True				
ANR	481384	Statement	ut64	308:4:6415:6418	481193	11	True				
ANR	481385	Statement	)	308:8:6419:6419	481193	12	True				
ANR	481386	Statement	0	308:9:6420:6420	481193	13	True				
ANR	481387	Statement	","	308:10:6421:6421	481193	14	True				
ANR	481388	Statement	(	308:12:6423:6423	481193	15	True				
ANR	481389	Statement	ut64	308:13:6424:6427	481193	16	True				
ANR	481390	Statement	)	308:17:6428:6428	481193	17	True				
ANR	481391	Statement	c	308:18:6429:6429	481193	18	True				
ANR	481392	Statement	->	308:19:6430:6431	481193	19	True				
ANR	481393	Statement	size	308:21:6432:6435	481193	20	True				
ANR	481394	Statement	","	308:25:6436:6436	481193	21	True				
ANR	481395	Statement	(	308:27:6438:6438	481193	22	True				
ANR	481396	Statement	ut64	308:28:6439:6442	481193	23	True				
ANR	481397	Statement	)	308:32:6443:6443	481193	24	True				
ANR	481398	Statement	c	308:33:6444:6444	481193	25	True				
ANR	481399	Statement	->	308:34:6445:6446	481193	26	True				
ANR	481400	Statement	size	308:36:6447:6450	481193	27	True				
ANR	481401	Statement	)	308:40:6451:6451	481193	28	True				
ANR	481402	ExpressionStatement		308:41:6452:6452	481193	29	True				
ANR	481403	Statement	eprintf	309:2:6456:6462	481193	30	True				
ANR	481404	Statement	(	309:10:6464:6464	481193	31	True				
ANR	481405	Statement	"""0x%08"""	309:11:6465:6471	481193	32	True				
ANR	481406	Statement	PFMT64x	309:18:6472:6478	481193	33	True				
ANR	481407	Statement	""" - 0x%08"""	309:25:6479:6488	481193	34	True				
ANR	481408	Statement	PFMT64x	309:35:6489:6495	481193	35	True				
ANR	481409	Statement	""" rw-- 0x%08"""	309:42:6496:6508	481193	36	True				
ANR	481410	Statement	PFMT64x	309:55:6509:6515	481193	37	True				
ANR	481411	Statement	""" .data\\n"""	309:62:6516:6525	481193	38	True				
ANR	481412	Statement	","	309:72:6526:6526	481193	39	True				
ANR	481413	Statement	(	310:3:6531:6531	481193	40	True				
ANR	481414	Statement	ut64	310:4:6532:6535	481193	41	True				
ANR	481415	Statement	)	310:8:6536:6536	481193	42	True				
ANR	481416	Statement	c	310:9:6537:6537	481193	43	True				
ANR	481417	Statement	->	310:10:6538:6539	481193	44	True				
ANR	481418	Statement	base	310:12:6540:6543	481193	45	True				
ANR	481419	Statement	","	310:16:6544:6544	481193	46	True				
ANR	481420	Statement	(	310:18:6546:6546	481193	47	True				
ANR	481421	Statement	ut64	310:19:6547:6550	481193	48	True				
ANR	481422	Statement	)	310:23:6551:6551	481193	49	True				
ANR	481423	Statement	(	310:24:6552:6552	481193	50	True				
ANR	481424	Statement	c	310:25:6553:6553	481193	51	True				
ANR	481425	Statement	->	310:26:6554:6555	481193	52	True				
ANR	481426	Statement	base	310:28:6556:6559	481193	53	True				
ANR	481427	Statement	+	310:32:6560:6560	481193	54	True				
ANR	481428	Statement	c	310:33:6561:6561	481193	55	True				
ANR	481429	Statement	->	310:34:6562:6563	481193	56	True				
ANR	481430	Statement	size	310:36:6564:6567	481193	57	True				
ANR	481431	Statement	)	310:40:6568:6568	481193	58	True				
ANR	481432	Statement	","	310:41:6569:6569	481193	59	True				
ANR	481433	Statement	(	310:43:6571:6571	481193	60	True				
ANR	481434	Statement	ut64	310:44:6572:6575	481193	61	True				
ANR	481435	Statement	)	310:48:6576:6576	481193	62	True				
ANR	481436	Statement	c	310:49:6577:6577	481193	63	True				
ANR	481437	Statement	->	310:50:6578:6579	481193	64	True				
ANR	481438	Statement	size	310:52:6580:6583	481193	65	True				
ANR	481439	Statement	)	310:56:6584:6584	481193	66	True				
ANR	481440	ExpressionStatement		310:57:6585:6585	481193	67	True				
ANR	481441	Statement	eprintf	311:2:6589:6595	481193	68	True				
ANR	481442	Statement	(	311:10:6597:6597	481193	69	True				
ANR	481443	Statement	"""0x%08"""	311:11:6598:6604	481193	70	True				
ANR	481444	Statement	PFMT64x	311:18:6605:6611	481193	71	True				
ANR	481445	Statement	""" - 0x%08"""	311:25:6612:6621	481193	72	True				
ANR	481446	Statement	PFMT64x	311:35:6622:6628	481193	73	True				
ANR	481447	Statement	""" rw-- 0x%08"""	311:42:6629:6641	481193	74	True				
ANR	481448	Statement	PFMT64x	311:55:6642:6648	481193	75	True				
ANR	481449	Statement	""" .screen\\n"""	311:62:6649:6660	481193	76	True				
ANR	481450	Statement	","	311:74:6661:6661	481193	77	True				
ANR	481451	Statement	(	312:3:6666:6666	481193	78	True				
ANR	481452	Statement	ut64	312:4:6667:6670	481193	79	True				
ANR	481453	Statement	)	312:8:6671:6671	481193	80	True				
ANR	481454	Statement	c	312:9:6672:6672	481193	81	True				
ANR	481455	Statement	->	312:10:6673:6674	481193	82	True				
ANR	481456	Statement	screen	312:12:6675:6680	481193	83	True				
ANR	481457	Statement	","	312:18:6681:6681	481193	84	True				
ANR	481458	Statement	(	312:20:6683:6683	481193	85	True				
ANR	481459	Statement	ut64	312:21:6684:6687	481193	86	True				
ANR	481460	Statement	)	312:25:6688:6688	481193	87	True				
ANR	481461	Statement	(	312:26:6689:6689	481193	88	True				
ANR	481462	Statement	c	312:27:6690:6690	481193	89	True				
ANR	481463	Statement	->	312:28:6691:6692	481193	90	True				
ANR	481464	Statement	screen	312:30:6693:6698	481193	91	True				
ANR	481465	Statement	+	312:36:6699:6699	481193	92	True				
ANR	481466	Statement	c	312:37:6700:6700	481193	93	True				
ANR	481467	Statement	->	312:38:6701:6702	481193	94	True				
ANR	481468	Statement	screen_size	312:40:6703:6713	481193	95	True				
ANR	481469	Statement	)	312:51:6714:6714	481193	96	True				
ANR	481470	Statement	","	312:52:6715:6715	481193	97	True				
ANR	481471	Statement	(	312:54:6717:6717	481193	98	True				
ANR	481472	Statement	ut64	312:55:6718:6721	481193	99	True				
ANR	481473	Statement	)	312:59:6722:6722	481193	100	True				
ANR	481474	Statement	c	312:60:6723:6723	481193	101	True				
ANR	481475	Statement	->	312:61:6724:6725	481193	102	True				
ANR	481476	Statement	screen_size	312:63:6726:6736	481193	103	True				
ANR	481477	Statement	)	312:74:6737:6737	481193	104	True				
ANR	481478	ExpressionStatement		312:75:6738:6738	481193	105	True				
ANR	481479	Statement	eprintf	313:2:6742:6748	481193	106	True				
ANR	481480	Statement	(	313:10:6750:6750	481193	107	True				
ANR	481481	Statement	"""0x%08"""	313:11:6751:6757	481193	108	True				
ANR	481482	Statement	PFMT64x	313:18:6758:6764	481193	109	True				
ANR	481483	Statement	""" - 0x%08"""	313:25:6765:6774	481193	110	True				
ANR	481484	Statement	PFMT64x	313:35:6775:6781	481193	111	True				
ANR	481485	Statement	""" rw-- 0x%08"""	313:42:6782:6794	481193	112	True				
ANR	481486	Statement	PFMT64x	313:55:6795:6801	481193	113	True				
ANR	481487	Statement	""" .input\\n"""	313:62:6802:6812	481193	114	True				
ANR	481488	Statement	","	313:73:6813:6813	481193	115	True				
ANR	481489	Statement	(	314:3:6818:6818	481193	116	True				
ANR	481490	Statement	ut64	314:4:6819:6822	481193	117	True				
ANR	481491	Statement	)	314:8:6823:6823	481193	118	True				
ANR	481492	Statement	c	314:9:6824:6824	481193	119	True				
ANR	481493	Statement	->	314:10:6825:6826	481193	120	True				
ANR	481494	Statement	input	314:12:6827:6831	481193	121	True				
ANR	481495	Statement	","	314:17:6832:6832	481193	122	True				
ANR	481496	Statement	(	314:19:6834:6834	481193	123	True				
ANR	481497	Statement	ut64	314:20:6835:6838	481193	124	True				
ANR	481498	Statement	)	314:24:6839:6839	481193	125	True				
ANR	481499	Statement	(	314:25:6840:6840	481193	126	True				
ANR	481500	Statement	c	314:26:6841:6841	481193	127	True				
ANR	481501	Statement	->	314:27:6842:6843	481193	128	True				
ANR	481502	Statement	input	314:29:6844:6848	481193	129	True				
ANR	481503	Statement	+	314:34:6849:6849	481193	130	True				
ANR	481504	Statement	c	314:35:6850:6850	481193	131	True				
ANR	481505	Statement	->	314:36:6851:6852	481193	132	True				
ANR	481506	Statement	input_size	314:38:6853:6862	481193	133	True				
ANR	481507	Statement	)	314:48:6863:6863	481193	134	True				
ANR	481508	Statement	","	314:49:6864:6864	481193	135	True				
ANR	481509	Statement	(	314:51:6866:6866	481193	136	True				
ANR	481510	Statement	ut64	314:52:6867:6870	481193	137	True				
ANR	481511	Statement	)	314:56:6871:6871	481193	138	True				
ANR	481512	Statement	c	314:57:6872:6872	481193	139	True				
ANR	481513	Statement	->	314:58:6873:6874	481193	140	True				
ANR	481514	Statement	input_size	314:60:6875:6884	481193	141	True				
ANR	481515	Statement	)	314:70:6885:6885	481193	142	True				
ANR	481516	ExpressionStatement		314:71:6886:6886	481193	143	True				
ANR	481517	ReturnType	R_API void		481193	1					
ANR	481518	Identifier	bfvm_maps		481193	2					
ANR	481519	ParameterList	"BfvmCPU * c , int rad"		481193	3					
ANR	481520	Parameter	BfvmCPU * c	291:21:5476:5485	481193	0	True				
ANR	481521	ParameterType	BfvmCPU *		481193	0					
ANR	481522	Identifier	c		481193	1					
ANR	481523	Parameter	int rad	291:33:5488:5494	481193	1	True				
ANR	481524	ParameterType	int		481193	0					
ANR	481525	Identifier	rad		481193	1					
ANR	481526	CFGEntryNode	ENTRY		481193		True				
ANR	481527	CFGExitNode	EXIT		481193		True				
ANR	481528	Symbol	c		481193						
ANR	481529	Symbol	rad		481193						
