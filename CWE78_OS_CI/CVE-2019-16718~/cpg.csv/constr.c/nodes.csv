command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1089052	File	data/converged/CVE-2019-16718~_radare2/constr.c								
ANR	1089053	Function	r_constr_new	5:0:52:205							
ANR	1089054	FunctionDef	r_constr_new (int size)		1089053	0					
ANR	1089055	CompoundStatement		5:39:91:205	1089053	0					
ANR	1089056	IdentifierDeclStatement	RConstr * c = R_NEW ( RConstr ) ;	6:1:94:122	1089053	0	True				
ANR	1089057	IdentifierDecl	* c = R_NEW ( RConstr )		1089053	0					
ANR	1089058	IdentifierDeclType	RConstr *		1089053	0					
ANR	1089059	Identifier	c		1089053	1					
ANR	1089060	AssignmentExpression	* c = R_NEW ( RConstr )		1089053	2		=			
ANR	1089061	Identifier	c		1089053	0					
ANR	1089062	CallExpression	R_NEW ( RConstr )		1089053	1					
ANR	1089063	Callee	R_NEW		1089053	0					
ANR	1089064	Identifier	R_NEW		1089053	0					
ANR	1089065	ArgumentList	RConstr		1089053	1					
ANR	1089066	Argument	RConstr		1089053	0					
ANR	1089067	Identifier	RConstr		1089053	0					
ANR	1089068	ExpressionStatement	c -> l = size > 0 ? size : 1024	7:1:125:150	1089053	1	True				
ANR	1089069	AssignmentExpression	c -> l = size > 0 ? size : 1024		1089053	0		=			
ANR	1089070	PtrMemberAccess	c -> l		1089053	0					
ANR	1089071	Identifier	c		1089053	0					
ANR	1089072	Identifier	l		1089053	1					
ANR	1089073	ConditionalExpression	size > 0 ? size : 1024		1089053	1					
ANR	1089074	Condition	size > 0		1089053	0					
ANR	1089075	RelationalExpression	size > 0		1089053	0		>			
ANR	1089076	Identifier	size		1089053	0					
ANR	1089077	PrimaryExpression	0		1089053	1					
ANR	1089078	Identifier	size		1089053	1					
ANR	1089079	PrimaryExpression	1024		1089053	2					
ANR	1089080	ExpressionStatement	c -> b = malloc ( c -> l )	8:1:153:173	1089053	2	True				
ANR	1089081	AssignmentExpression	c -> b = malloc ( c -> l )		1089053	0		=			
ANR	1089082	PtrMemberAccess	c -> b		1089053	0					
ANR	1089083	Identifier	c		1089053	0					
ANR	1089084	Identifier	b		1089053	1					
ANR	1089085	CallExpression	malloc ( c -> l )		1089053	1					
ANR	1089086	Callee	malloc		1089053	0					
ANR	1089087	Identifier	malloc		1089053	0					
ANR	1089088	ArgumentList	c -> l		1089053	1					
ANR	1089089	Argument	c -> l		1089053	0					
ANR	1089090	PtrMemberAccess	c -> l		1089053	0					
ANR	1089091	Identifier	c		1089053	0					
ANR	1089092	Identifier	l		1089053	1					
ANR	1089093	ExpressionStatement	c -> i = * c -> b = 0	9:1:176:192	1089053	3	True				
ANR	1089094	AssignmentExpression	c -> i = * c -> b = 0		1089053	0		=			
ANR	1089095	PtrMemberAccess	c -> i		1089053	0					
ANR	1089096	Identifier	c		1089053	0					
ANR	1089097	Identifier	i		1089053	1					
ANR	1089098	AssignmentExpression	* c -> b = 0		1089053	1		=			
ANR	1089099	UnaryOperationExpression	* c -> b		1089053	0					
ANR	1089100	UnaryOperator	*		1089053	0					
ANR	1089101	PtrMemberAccess	c -> b		1089053	1					
ANR	1089102	Identifier	c		1089053	0					
ANR	1089103	Identifier	b		1089053	1					
ANR	1089104	PrimaryExpression	0		1089053	1					
ANR	1089105	ReturnStatement	return c ;	10:1:195:203	1089053	4	True				
ANR	1089106	Identifier	c		1089053	0					
ANR	1089107	ReturnType	R_API RConstr *		1089053	1					
ANR	1089108	Identifier	r_constr_new		1089053	2					
ANR	1089109	ParameterList	int size		1089053	3					
ANR	1089110	Parameter	int size	5:29:81:88	1089053	0	True				
ANR	1089111	ParameterType	int		1089053	0					
ANR	1089112	Identifier	size		1089053	1					
ANR	1089113	CFGEntryNode	ENTRY		1089053		True				
ANR	1089114	CFGExitNode	EXIT		1089053		True				
ANR	1089115	Symbol	malloc		1089053						
ANR	1089116	Symbol	RConstr		1089053						
ANR	1089117	Symbol	c -> l		1089053						
ANR	1089118	Symbol	c		1089053						
ANR	1089119	Symbol	size		1089053						
ANR	1089120	Symbol	* c -> b		1089053						
ANR	1089121	Symbol	c -> b		1089053						
ANR	1089122	Symbol	* * c		1089053						
ANR	1089123	Symbol	R_NEW		1089053						
ANR	1089124	Symbol	* c		1089053						
ANR	1089125	Symbol	c -> i		1089053						
ANR	1089126	Function	r_constr_free	13:0:208:273							
ANR	1089127	FunctionDef	r_constr_free (RConstr * c)		1089126	0					
ANR	1089128	CompoundStatement		13:38:246:273	1089126	0					
ANR	1089129	ExpressionStatement	free ( c -> b )	14:1:249:260	1089126	0	True				
ANR	1089130	CallExpression	free ( c -> b )		1089126	0					
ANR	1089131	Callee	free		1089126	0					
ANR	1089132	Identifier	free		1089126	0					
ANR	1089133	ArgumentList	c -> b		1089126	1					
ANR	1089134	Argument	c -> b		1089126	0					
ANR	1089135	PtrMemberAccess	c -> b		1089126	0					
ANR	1089136	Identifier	c		1089126	0					
ANR	1089137	Identifier	b		1089126	1					
ANR	1089138	ExpressionStatement	free ( c )	15:1:263:271	1089126	1	True				
ANR	1089139	CallExpression	free ( c )		1089126	0					
ANR	1089140	Callee	free		1089126	0					
ANR	1089141	Identifier	free		1089126	0					
ANR	1089142	ArgumentList	c		1089126	1					
ANR	1089143	Argument	c		1089126	0					
ANR	1089144	Identifier	c		1089126	0					
ANR	1089145	ReturnType	R_API void		1089126	1					
ANR	1089146	Identifier	r_constr_free		1089126	2					
ANR	1089147	ParameterList	RConstr * c		1089126	3					
ANR	1089148	Parameter	RConstr * c	13:26:234:243	1089126	0	True				
ANR	1089149	ParameterType	RConstr *		1089126	0					
ANR	1089150	Identifier	c		1089126	1					
ANR	1089151	CFGEntryNode	ENTRY		1089126		True				
ANR	1089152	CFGExitNode	EXIT		1089126		True				
ANR	1089153	Symbol	c		1089126						
ANR	1089154	Symbol	c -> b		1089126						
ANR	1089155	Symbol	* c		1089126						
ANR	1089156	Function	r_constr_get	18:6:282:474							
ANR	1089157	FunctionDef	"r_constr_get (RConstr * c , const char * str)"		1089156	0					
ANR	1089158	CompoundStatement		18:61:337:474	1089156	0					
ANR	1089159	IdentifierDeclStatement	"char * e = c -> b + c -> i , * p = c -> b ;"	19:1:340:370	1089156	0	True				
ANR	1089160	IdentifierDecl	* e = c -> b + c -> i		1089156	0					
ANR	1089161	IdentifierDeclType	char *		1089156	0					
ANR	1089162	Identifier	e		1089156	1					
ANR	1089163	AssignmentExpression	* e = c -> b + c -> i		1089156	2		=			
ANR	1089164	Identifier	e		1089156	0					
ANR	1089165	AdditiveExpression	c -> b + c -> i		1089156	1		+			
ANR	1089166	PtrMemberAccess	c -> b		1089156	0					
ANR	1089167	Identifier	c		1089156	0					
ANR	1089168	Identifier	b		1089156	1					
ANR	1089169	PtrMemberAccess	c -> i		1089156	1					
ANR	1089170	Identifier	c		1089156	0					
ANR	1089171	Identifier	i		1089156	1					
ANR	1089172	IdentifierDecl	* p = c -> b		1089156	1					
ANR	1089173	IdentifierDeclType	char *		1089156	0					
ANR	1089174	Identifier	p		1089156	1					
ANR	1089175	AssignmentExpression	* p = c -> b		1089156	2		=			
ANR	1089176	Identifier	p		1089156	0					
ANR	1089177	PtrMemberAccess	c -> b		1089156	1					
ANR	1089178	Identifier	c		1089156	0					
ANR	1089179	Identifier	b		1089156	1					
ANR	1089180	ForStatement	for ( p = c -> b ; p < e ; p += strlen ( p ) + 1 )		1089156	1					
ANR	1089181	ForInit	p = c -> b ;	20:6:378:386	1089156	0	True				
ANR	1089182	AssignmentExpression	p = c -> b		1089156	0		=			
ANR	1089183	Identifier	p		1089156	0					
ANR	1089184	PtrMemberAccess	c -> b		1089156	1					
ANR	1089185	Identifier	c		1089156	0					
ANR	1089186	Identifier	b		1089156	1					
ANR	1089187	Condition	p < e	20:16:388:390	1089156	1	True				
ANR	1089188	RelationalExpression	p < e		1089156	0		<			
ANR	1089189	Identifier	p		1089156	0					
ANR	1089190	Identifier	e		1089156	1					
ANR	1089191	AssignmentExpression	p += strlen ( p ) + 1	20:21:393:409	1089156	2	True	+=			
ANR	1089192	Identifier	p		1089156	0					
ANR	1089193	AdditiveExpression	strlen ( p ) + 1		1089156	1		+			
ANR	1089194	CallExpression	strlen ( p )		1089156	0					
ANR	1089195	Callee	strlen		1089156	0					
ANR	1089196	Identifier	strlen		1089156	0					
ANR	1089197	ArgumentList	p		1089156	1					
ANR	1089198	Argument	p		1089156	0					
ANR	1089199	Identifier	p		1089156	0					
ANR	1089200	PrimaryExpression	1		1089156	1					
ANR	1089201	CompoundStatement		3:40:74:74	1089156	3					
ANR	1089202	IfStatement	"if ( ! strcmp ( p , str ) )"		1089156	0					
ANR	1089203	Condition	"! strcmp ( p , str )"	21:6:420:435	1089156	0	True				
ANR	1089204	UnaryOperationExpression	"! strcmp ( p , str )"		1089156	0					
ANR	1089205	UnaryOperator	!		1089156	0					
ANR	1089206	CallExpression	"strcmp ( p , str )"		1089156	1					
ANR	1089207	Callee	strcmp		1089156	0					
ANR	1089208	Identifier	strcmp		1089156	0					
ANR	1089209	ArgumentList	p		1089156	1					
ANR	1089210	Argument	p		1089156	0					
ANR	1089211	Identifier	p		1089156	0					
ANR	1089212	Argument	str		1089156	1					
ANR	1089213	Identifier	str		1089156	0					
ANR	1089214	CompoundStatement		4:24:100:100	1089156	1					
ANR	1089215	ReturnStatement	return p ;	22:3:443:451	1089156	0	True				
ANR	1089216	Identifier	p		1089156	0					
ANR	1089217	ReturnStatement	return NULL ;	25:1:461:472	1089156	2	True				
ANR	1089218	Identifier	NULL		1089156	0					
ANR	1089219	ReturnType	const char *		1089156	1					
ANR	1089220	Identifier	r_constr_get		1089156	2					
ANR	1089221	ParameterList	"RConstr * c , const char * str"		1089156	3					
ANR	1089222	Parameter	RConstr * c	18:32:308:317	1089156	0	True				
ANR	1089223	ParameterType	RConstr *		1089156	0					
ANR	1089224	Identifier	c		1089156	1					
ANR	1089225	Parameter	const char * str	18:44:320:334	1089156	1	True				
ANR	1089226	ParameterType	const char *		1089156	0					
ANR	1089227	Identifier	str		1089156	1					
ANR	1089228	CFGEntryNode	ENTRY		1089156		True				
ANR	1089229	CFGExitNode	EXIT		1089156		True				
ANR	1089230	Symbol	str		1089156						
ANR	1089231	Symbol	p		1089156						
ANR	1089232	Symbol	strcmp		1089156						
ANR	1089233	Symbol	strlen		1089156						
ANR	1089234	Symbol	c		1089156						
ANR	1089235	Symbol	NULL		1089156						
ANR	1089236	Symbol	e		1089156						
ANR	1089237	Symbol	c -> b		1089156						
ANR	1089238	Symbol	* c		1089156						
ANR	1089239	Symbol	c -> i		1089156						
ANR	1089240	Function	r_constr_append	28:6:483:692							
ANR	1089241	FunctionDef	"r_constr_append (RConstr * c , const char * str)"		1089240	0					
ANR	1089242	CompoundStatement		28:64:541:692	1089240	0					
ANR	1089243	IdentifierDeclStatement	"int i = c -> i , l = strlen ( str ) + 1 ;"	29:1:544:576	1089240	0	True				
ANR	1089244	IdentifierDecl	i = c -> i		1089240	0					
ANR	1089245	IdentifierDeclType	int		1089240	0					
ANR	1089246	Identifier	i		1089240	1					
ANR	1089247	AssignmentExpression	i = c -> i		1089240	2		=			
ANR	1089248	Identifier	i		1089240	0					
ANR	1089249	PtrMemberAccess	c -> i		1089240	1					
ANR	1089250	Identifier	c		1089240	0					
ANR	1089251	Identifier	i		1089240	1					
ANR	1089252	IdentifierDecl	l = strlen ( str ) + 1		1089240	1					
ANR	1089253	IdentifierDeclType	int		1089240	0					
ANR	1089254	Identifier	l		1089240	1					
ANR	1089255	AssignmentExpression	l = strlen ( str ) + 1		1089240	2		=			
ANR	1089256	Identifier	l		1089240	0					
ANR	1089257	AdditiveExpression	strlen ( str ) + 1		1089240	1		+			
ANR	1089258	CallExpression	strlen ( str )		1089240	0					
ANR	1089259	Callee	strlen		1089240	0					
ANR	1089260	Identifier	strlen		1089240	0					
ANR	1089261	ArgumentList	str		1089240	1					
ANR	1089262	Argument	str		1089240	0					
ANR	1089263	Identifier	str		1089240	0					
ANR	1089264	PrimaryExpression	1		1089240	1					
ANR	1089265	IfStatement	if ( ( c -> b + i + l ) >= ( c -> b + c -> l ) )		1089240	1					
ANR	1089266	Condition	( c -> b + i + l ) >= ( c -> b + c -> l )	30:5:583:613	1089240	0	True				
ANR	1089267	RelationalExpression	( c -> b + i + l ) >= ( c -> b + c -> l )		1089240	0		>=			
ANR	1089268	AdditiveExpression	c -> b + i + l		1089240	0		+			
ANR	1089269	PtrMemberAccess	c -> b		1089240	0					
ANR	1089270	Identifier	c		1089240	0					
ANR	1089271	Identifier	b		1089240	1					
ANR	1089272	AdditiveExpression	i + l		1089240	1		+			
ANR	1089273	Identifier	i		1089240	0					
ANR	1089274	Identifier	l		1089240	1					
ANR	1089275	AdditiveExpression	c -> b + c -> l		1089240	1		+			
ANR	1089276	PtrMemberAccess	c -> b		1089240	0					
ANR	1089277	Identifier	c		1089240	0					
ANR	1089278	Identifier	b		1089240	1					
ANR	1089279	PtrMemberAccess	c -> l		1089240	1					
ANR	1089280	Identifier	c		1089240	0					
ANR	1089281	Identifier	l		1089240	1					
ANR	1089282	CompoundStatement		3:38:74:74	1089240	1					
ANR	1089283	ReturnStatement	return NULL ;	31:2:620:631	1089240	0	True				
ANR	1089284	Identifier	NULL		1089240	0					
ANR	1089285	ExpressionStatement	"memcpy ( c -> b + i , str , l )"	33:1:637:662	1089240	2	True				
ANR	1089286	CallExpression	"memcpy ( c -> b + i , str , l )"		1089240	0					
ANR	1089287	Callee	memcpy		1089240	0					
ANR	1089288	Identifier	memcpy		1089240	0					
ANR	1089289	ArgumentList	c -> b + i		1089240	1					
ANR	1089290	Argument	c -> b + i		1089240	0					
ANR	1089291	AdditiveExpression	c -> b + i		1089240	0		+			
ANR	1089292	PtrMemberAccess	c -> b		1089240	0					
ANR	1089293	Identifier	c		1089240	0					
ANR	1089294	Identifier	b		1089240	1					
ANR	1089295	Identifier	i		1089240	1					
ANR	1089296	Argument	str		1089240	1					
ANR	1089297	Identifier	str		1089240	0					
ANR	1089298	Argument	l		1089240	2					
ANR	1089299	Identifier	l		1089240	0					
ANR	1089300	ExpressionStatement	c -> i += l	34:1:665:674	1089240	3	True				
ANR	1089301	AssignmentExpression	c -> i += l		1089240	0		+=			
ANR	1089302	PtrMemberAccess	c -> i		1089240	0					
ANR	1089303	Identifier	c		1089240	0					
ANR	1089304	Identifier	i		1089240	1					
ANR	1089305	Identifier	l		1089240	1					
ANR	1089306	ReturnStatement	return c -> b + i ;	35:1:677:690	1089240	4	True				
ANR	1089307	AdditiveExpression	c -> b + i		1089240	0		+			
ANR	1089308	PtrMemberAccess	c -> b		1089240	0					
ANR	1089309	Identifier	c		1089240	0					
ANR	1089310	Identifier	b		1089240	1					
ANR	1089311	Identifier	i		1089240	1					
ANR	1089312	ReturnType	const char *		1089240	1					
ANR	1089313	Identifier	r_constr_append		1089240	2					
ANR	1089314	ParameterList	"RConstr * c , const char * str"		1089240	3					
ANR	1089315	Parameter	RConstr * c	28:35:512:521	1089240	0	True				
ANR	1089316	ParameterType	RConstr *		1089240	0					
ANR	1089317	Identifier	c		1089240	1					
ANR	1089318	Parameter	const char * str	28:47:524:538	1089240	1	True				
ANR	1089319	ParameterType	const char *		1089240	0					
ANR	1089320	Identifier	str		1089240	1					
ANR	1089321	CFGEntryNode	ENTRY		1089240		True				
ANR	1089322	CFGExitNode	EXIT		1089240		True				
ANR	1089323	Symbol	str		1089240						
ANR	1089324	Symbol	strlen		1089240						
ANR	1089325	Symbol	c -> l		1089240						
ANR	1089326	Symbol	c		1089240						
ANR	1089327	Symbol	NULL		1089240						
ANR	1089328	Symbol	c -> b		1089240						
ANR	1089329	Symbol	i		1089240						
ANR	1089330	Symbol	l		1089240						
ANR	1089331	Symbol	* c		1089240						
ANR	1089332	Symbol	c -> i		1089240						
ANR	1089333	Function	r_constr_add	38:6:701:840							
ANR	1089334	FunctionDef	"r_constr_add (RConstr * c , const char * str)"		1089333	0					
ANR	1089335	CompoundStatement		38:61:756:840	1089333	0					
ANR	1089336	IdentifierDeclStatement	"char * p = ( char * ) r_constr_get ( c , str ) ;"	39:1:759:798	1089333	0	True				
ANR	1089337	IdentifierDecl	"* p = ( char * ) r_constr_get ( c , str )"		1089333	0					
ANR	1089338	IdentifierDeclType	char *		1089333	0					
ANR	1089339	Identifier	p		1089333	1					
ANR	1089340	AssignmentExpression	"* p = ( char * ) r_constr_get ( c , str )"		1089333	2		=			
ANR	1089341	Identifier	p		1089333	0					
ANR	1089342	CastExpression	"( char * ) r_constr_get ( c , str )"		1089333	1					
ANR	1089343	CastTarget	char *		1089333	0					
ANR	1089344	CallExpression	"r_constr_get ( c , str )"		1089333	1					
ANR	1089345	Callee	r_constr_get		1089333	0					
ANR	1089346	Identifier	r_constr_get		1089333	0					
ANR	1089347	ArgumentList	c		1089333	1					
ANR	1089348	Argument	c		1089333	0					
ANR	1089349	Identifier	c		1089333	0					
ANR	1089350	Argument	str		1089333	1					
ANR	1089351	Identifier	str		1089333	0					
ANR	1089352	ReturnStatement	"return p ? p : r_constr_append ( c , str ) ;"	40:1:801:838	1089333	1	True				
ANR	1089353	ConditionalExpression	"p ? p : r_constr_append ( c , str )"		1089333	0					
ANR	1089354	Condition	p		1089333	0					
ANR	1089355	Identifier	p		1089333	0					
ANR	1089356	Identifier	p		1089333	1					
ANR	1089357	CallExpression	"r_constr_append ( c , str )"		1089333	2					
ANR	1089358	Callee	r_constr_append		1089333	0					
ANR	1089359	Identifier	r_constr_append		1089333	0					
ANR	1089360	ArgumentList	c		1089333	1					
ANR	1089361	Argument	c		1089333	0					
ANR	1089362	Identifier	c		1089333	0					
ANR	1089363	Argument	str		1089333	1					
ANR	1089364	Identifier	str		1089333	0					
ANR	1089365	ReturnType	const char *		1089333	1					
ANR	1089366	Identifier	r_constr_add		1089333	2					
ANR	1089367	ParameterList	"RConstr * c , const char * str"		1089333	3					
ANR	1089368	Parameter	RConstr * c	38:32:727:736	1089333	0	True				
ANR	1089369	ParameterType	RConstr *		1089333	0					
ANR	1089370	Identifier	c		1089333	1					
ANR	1089371	Parameter	const char * str	38:44:739:753	1089333	1	True				
ANR	1089372	ParameterType	const char *		1089333	0					
ANR	1089373	Identifier	str		1089333	1					
ANR	1089374	CFGEntryNode	ENTRY		1089333		True				
ANR	1089375	CFGExitNode	EXIT		1089333		True				
ANR	1089376	Symbol	str		1089333						
ANR	1089377	Symbol	p		1089333						
ANR	1089378	Symbol	c		1089333						
ANR	1089379	Symbol	r_constr_get		1089333						
ANR	1089380	Symbol	r_constr_append		1089333						
ANR	1089381	Function	main	44:0:852:1065							
ANR	1089382	FunctionDef	main ()		1089381	0					
ANR	1089383	CompoundStatement		44:7:859:1065	1089381	0					
ANR	1089384	IdentifierDeclStatement	RConstr * cstr = r_constr_new ( 7 ) ;	45:1:862:894	1089381	0	True				
ANR	1089385	IdentifierDecl	* cstr = r_constr_new ( 7 )		1089381	0					
ANR	1089386	IdentifierDeclType	RConstr *		1089381	0					
ANR	1089387	Identifier	cstr		1089381	1					
ANR	1089388	AssignmentExpression	* cstr = r_constr_new ( 7 )		1089381	2		=			
ANR	1089389	Identifier	cstr		1089381	0					
ANR	1089390	CallExpression	r_constr_new ( 7 )		1089381	1					
ANR	1089391	Callee	r_constr_new		1089381	0					
ANR	1089392	Identifier	r_constr_new		1089381	0					
ANR	1089393	ArgumentList	7		1089381	1					
ANR	1089394	Argument	7		1089381	0					
ANR	1089395	PrimaryExpression	7		1089381	0					
ANR	1089396	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"	47:1:898:943	1089381	1	True				
ANR	1089397	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"		1089381	0					
ANR	1089398	Callee	printf		1089381	0					
ANR	1089399	Identifier	printf		1089381	0					
ANR	1089400	ArgumentList	"""%s\\n"""		1089381	1					
ANR	1089401	Argument	"""%s\\n"""		1089381	0					
ANR	1089402	PrimaryExpression	"""%s\\n"""		1089381	0					
ANR	1089403	Argument	"r_constr_add ( cstr , ""Hello"" )"		1089381	1					
ANR	1089404	CallExpression	"r_constr_add ( cstr , ""Hello"" )"		1089381	0					
ANR	1089405	Callee	r_constr_add		1089381	0					
ANR	1089406	Identifier	r_constr_add		1089381	0					
ANR	1089407	ArgumentList	cstr		1089381	1					
ANR	1089408	Argument	cstr		1089381	0					
ANR	1089409	Identifier	cstr		1089381	0					
ANR	1089410	Argument	"""Hello"""		1089381	1					
ANR	1089411	PrimaryExpression	"""Hello"""		1089381	0					
ANR	1089412	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"	48:1:946:991	1089381	2	True				
ANR	1089413	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"		1089381	0					
ANR	1089414	Callee	printf		1089381	0					
ANR	1089415	Identifier	printf		1089381	0					
ANR	1089416	ArgumentList	"""%s\\n"""		1089381	1					
ANR	1089417	Argument	"""%s\\n"""		1089381	0					
ANR	1089418	PrimaryExpression	"""%s\\n"""		1089381	0					
ANR	1089419	Argument	"r_constr_add ( cstr , ""Hello"" )"		1089381	1					
ANR	1089420	CallExpression	"r_constr_add ( cstr , ""Hello"" )"		1089381	0					
ANR	1089421	Callee	r_constr_add		1089381	0					
ANR	1089422	Identifier	r_constr_add		1089381	0					
ANR	1089423	ArgumentList	cstr		1089381	1					
ANR	1089424	Argument	cstr		1089381	0					
ANR	1089425	Identifier	cstr		1089381	0					
ANR	1089426	Argument	"""Hello"""		1089381	1					
ANR	1089427	PrimaryExpression	"""Hello"""		1089381	0					
ANR	1089428	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""World"" ) )"	49:1:994:1039	1089381	3	True				
ANR	1089429	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""World"" ) )"		1089381	0					
ANR	1089430	Callee	printf		1089381	0					
ANR	1089431	Identifier	printf		1089381	0					
ANR	1089432	ArgumentList	"""%s\\n"""		1089381	1					
ANR	1089433	Argument	"""%s\\n"""		1089381	0					
ANR	1089434	PrimaryExpression	"""%s\\n"""		1089381	0					
ANR	1089435	Argument	"r_constr_add ( cstr , ""World"" )"		1089381	1					
ANR	1089436	CallExpression	"r_constr_add ( cstr , ""World"" )"		1089381	0					
ANR	1089437	Callee	r_constr_add		1089381	0					
ANR	1089438	Identifier	r_constr_add		1089381	0					
ANR	1089439	ArgumentList	cstr		1089381	1					
ANR	1089440	Argument	cstr		1089381	0					
ANR	1089441	Identifier	cstr		1089381	0					
ANR	1089442	Argument	"""World"""		1089381	1					
ANR	1089443	PrimaryExpression	"""World"""		1089381	0					
ANR	1089444	ExpressionStatement	r_constr_free ( cstr )	51:1:1043:1063	1089381	4	True				
ANR	1089445	CallExpression	r_constr_free ( cstr )		1089381	0					
ANR	1089446	Callee	r_constr_free		1089381	0					
ANR	1089447	Identifier	r_constr_free		1089381	0					
ANR	1089448	ArgumentList	cstr		1089381	1					
ANR	1089449	Argument	cstr		1089381	0					
ANR	1089450	Identifier	cstr		1089381	0					
ANR	1089451	Identifier	main		1089381	1					
ANR	1089452	ParameterList			1089381	2					
ANR	1089453	CFGEntryNode	ENTRY		1089381		True				
ANR	1089454	CFGExitNode	EXIT		1089381		True				
ANR	1089455	Symbol	cstr		1089381						
ANR	1089456	Symbol	r_constr_new		1089381						
ANR	1089457	Symbol	r_constr_add		1089381						
