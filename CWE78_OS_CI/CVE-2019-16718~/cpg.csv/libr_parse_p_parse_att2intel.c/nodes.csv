command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5017122	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_att2intel.c								
ANR	5017123	Function	replace	13:0:221:1404							
ANR	5017124	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5017123	0					
ANR	5017125	CompoundStatement		13:63:284:1404	5017123	0					
ANR	5017126	IdentifierDeclStatement	"int i , j , k ;"	14:1:287:296	5017123	0	True				
ANR	5017127	IdentifierDecl	i		5017123	0					
ANR	5017128	IdentifierDeclType	int		5017123	0					
ANR	5017129	Identifier	i		5017123	1					
ANR	5017130	IdentifierDecl	j		5017123	1					
ANR	5017131	IdentifierDeclType	int		5017123	0					
ANR	5017132	Identifier	j		5017123	1					
ANR	5017133	IdentifierDecl	k		5017123	2					
ANR	5017134	IdentifierDeclType	int		5017123	0					
ANR	5017135	Identifier	k		5017123	1					
ANR	5017136	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""cmpl"" , ""cmp 2, 1"" } , { ""testl"" , ""test 2, 1"" } , { ""leal"" , ""lea 2, 1"" } , { ""movl"" , ""mov 2, 1"" } , { ""xorl"" , ""xor 2, 1"" } , { ""andl"" , ""and 2, 1"" } , { ""orl"" , ""or 2, 1"" } , { ""addl"" , ""add 2, 1"" } , { ""incl"" , ""inc 1"" } , { ""decl"" , ""dec 1"" } , { ""subl"" , ""sub 2, 1"" } , { ""mull"" , ""mul 2, 1"" } , { ""divl"" , ""div 2, 1"" } , { ""pushl"" , ""push 1"" } , { ""popl"" , ""pop 1"" } , { ""ret"" , ""ret"" } , { NULL } } ;"	15:1:299:758	5017123	1	True				
ANR	5017137	IdentifierDecl	"ops [ ] = { { ""cmpl"" , ""cmp 2, 1"" } , { ""testl"" , ""test 2, 1"" } , { ""leal"" , ""lea 2, 1"" } , { ""movl"" , ""mov 2, 1"" } , { ""xorl"" , ""xor 2, 1"" } , { ""andl"" , ""and 2, 1"" } , { ""orl"" , ""or 2, 1"" } , { ""addl"" , ""add 2, 1"" } , { ""incl"" , ""inc 1"" } , { ""decl"" , ""dec 1"" } , { ""subl"" , ""sub 2, 1"" } , { ""mull"" , ""mul 2, 1"" } , { ""divl"" , ""div 2, 1"" } , { ""pushl"" , ""push 1"" } , { ""popl"" , ""pop 1"" } , { ""ret"" , ""ret"" } , { NULL } }"		5017123	0					
ANR	5017138	IdentifierDeclType	 [ ]		5017123	0					
ANR	5017139	Identifier	ops		5017123	1					
ANR	5017140	AssignmentExpression	"ops [ ] = { { ""cmpl"" , ""cmp 2, 1"" } , { ""testl"" , ""test 2, 1"" } , { ""leal"" , ""lea 2, 1"" } , { ""movl"" , ""mov 2, 1"" } , { ""xorl"" , ""xor 2, 1"" } , { ""andl"" , ""and 2, 1"" } , { ""orl"" , ""or 2, 1"" } , { ""addl"" , ""add 2, 1"" } , { ""incl"" , ""inc 1"" } , { ""decl"" , ""dec 1"" } , { ""subl"" , ""sub 2, 1"" } , { ""mull"" , ""mul 2, 1"" } , { ""divl"" , ""div 2, 1"" } , { ""pushl"" , ""push 1"" } , { ""popl"" , ""pop 1"" } , { ""ret"" , ""ret"" } , { NULL } }"		5017123	2		=			
ANR	5017141	Identifier	ops		5017123	0					
ANR	5017142	InitializerList	"""cmpl"""		5017123	1					
ANR	5017143	InitializerList	"""cmpl"""		5017123	0					
ANR	5017144	PrimaryExpression	"""cmpl"""		5017123	0					
ANR	5017145	PrimaryExpression	"""cmp 2, 1"""		5017123	1					
ANR	5017146	InitializerList	"""testl"""		5017123	1					
ANR	5017147	PrimaryExpression	"""testl"""		5017123	0					
ANR	5017148	PrimaryExpression	"""test 2, 1"""		5017123	1					
ANR	5017149	InitializerList	"""leal"""		5017123	2					
ANR	5017150	PrimaryExpression	"""leal"""		5017123	0					
ANR	5017151	PrimaryExpression	"""lea 2, 1"""		5017123	1					
ANR	5017152	InitializerList	"""movl"""		5017123	3					
ANR	5017153	PrimaryExpression	"""movl"""		5017123	0					
ANR	5017154	PrimaryExpression	"""mov 2, 1"""		5017123	1					
ANR	5017155	InitializerList	"""xorl"""		5017123	4					
ANR	5017156	PrimaryExpression	"""xorl"""		5017123	0					
ANR	5017157	PrimaryExpression	"""xor 2, 1"""		5017123	1					
ANR	5017158	InitializerList	"""andl"""		5017123	5					
ANR	5017159	PrimaryExpression	"""andl"""		5017123	0					
ANR	5017160	PrimaryExpression	"""and 2, 1"""		5017123	1					
ANR	5017161	InitializerList	"""orl"""		5017123	6					
ANR	5017162	PrimaryExpression	"""orl"""		5017123	0					
ANR	5017163	PrimaryExpression	"""or 2, 1"""		5017123	1					
ANR	5017164	InitializerList	"""addl"""		5017123	7					
ANR	5017165	PrimaryExpression	"""addl"""		5017123	0					
ANR	5017166	PrimaryExpression	"""add 2, 1"""		5017123	1					
ANR	5017167	InitializerList	"""incl"""		5017123	8					
ANR	5017168	PrimaryExpression	"""incl"""		5017123	0					
ANR	5017169	PrimaryExpression	"""inc 1"""		5017123	1					
ANR	5017170	InitializerList	"""decl"""		5017123	9					
ANR	5017171	PrimaryExpression	"""decl"""		5017123	0					
ANR	5017172	PrimaryExpression	"""dec 1"""		5017123	1					
ANR	5017173	InitializerList	"""subl"""		5017123	10					
ANR	5017174	PrimaryExpression	"""subl"""		5017123	0					
ANR	5017175	PrimaryExpression	"""sub 2, 1"""		5017123	1					
ANR	5017176	InitializerList	"""mull"""		5017123	11					
ANR	5017177	PrimaryExpression	"""mull"""		5017123	0					
ANR	5017178	PrimaryExpression	"""mul 2, 1"""		5017123	1					
ANR	5017179	InitializerList	"""divl"""		5017123	12					
ANR	5017180	PrimaryExpression	"""divl"""		5017123	0					
ANR	5017181	PrimaryExpression	"""div 2, 1"""		5017123	1					
ANR	5017182	InitializerList	"""pushl"""		5017123	13					
ANR	5017183	PrimaryExpression	"""pushl"""		5017123	0					
ANR	5017184	PrimaryExpression	"""push 1"""		5017123	1					
ANR	5017185	InitializerList	"""popl"""		5017123	14					
ANR	5017186	PrimaryExpression	"""popl"""		5017123	0					
ANR	5017187	PrimaryExpression	"""pop 1"""		5017123	1					
ANR	5017188	InitializerList	"""ret"""		5017123	15					
ANR	5017189	PrimaryExpression	"""ret"""		5017123	0					
ANR	5017190	PrimaryExpression	"""ret"""		5017123	1					
ANR	5017191	InitializerList	NULL		5017123	16					
ANR	5017192	Identifier	NULL		5017123	0					
ANR	5017193	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5017123	2					
ANR	5017194	ForInit	i = 0 ;	38:6:767:770	5017123	0	True				
ANR	5017195	AssignmentExpression	i = 0		5017123	0		=			
ANR	5017196	Identifier	i		5017123	0					
ANR	5017197	PrimaryExpression	0		5017123	1					
ANR	5017198	Condition	ops [ i ] . op != NULL	38:11:772:788	5017123	1	True				
ANR	5017199	EqualityExpression	ops [ i ] . op != NULL		5017123	0		!=			
ANR	5017200	MemberAccess	ops [ i ] . op		5017123	0					
ANR	5017201	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017202	Identifier	ops		5017123	0					
ANR	5017203	Identifier	i		5017123	1					
ANR	5017204	Identifier	op		5017123	1					
ANR	5017205	Identifier	NULL		5017123	1					
ANR	5017206	PostIncDecOperationExpression	i ++	38:30:791:793	5017123	2	True				
ANR	5017207	Identifier	i		5017123	0					
ANR	5017208	IncDec	++		5017123	1					
ANR	5017209	CompoundStatement		26:35:511:511	5017123	3					
ANR	5017210	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5017123	0					
ANR	5017211	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	39:6:804:831	5017123	0	True				
ANR	5017212	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5017123	0					
ANR	5017213	UnaryOperator	!		5017123	0					
ANR	5017214	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5017123	1					
ANR	5017215	Callee	strcmp		5017123	0					
ANR	5017216	Identifier	strcmp		5017123	0					
ANR	5017217	ArgumentList	ops [ i ] . op		5017123	1					
ANR	5017218	Argument	ops [ i ] . op		5017123	0					
ANR	5017219	MemberAccess	ops [ i ] . op		5017123	0					
ANR	5017220	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017221	Identifier	ops		5017123	0					
ANR	5017222	Identifier	i		5017123	1					
ANR	5017223	Identifier	op		5017123	1					
ANR	5017224	Argument	argv [ 0 ]		5017123	1					
ANR	5017225	ArrayIndexing	argv [ 0 ]		5017123	0					
ANR	5017226	Identifier	argv		5017123	0					
ANR	5017227	PrimaryExpression	0		5017123	1					
ANR	5017228	CompoundStatement		27:36:549:549	5017123	1					
ANR	5017229	IfStatement	if ( newstr != NULL )		5017123	0					
ANR	5017230	Condition	newstr != NULL	40:7:843:856	5017123	0	True				
ANR	5017231	EqualityExpression	newstr != NULL		5017123	0		!=			
ANR	5017232	Identifier	newstr		5017123	0					
ANR	5017233	Identifier	NULL		5017123	1					
ANR	5017234	CompoundStatement		28:23:574:574	5017123	1					
ANR	5017235	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5017123	0					
ANR	5017236	ForInit	j = k = 0 ;	41:9:870:875	5017123	0	True				
ANR	5017237	AssignmentExpression	j = k = 0		5017123	0		=			
ANR	5017238	Identifier	j		5017123	0					
ANR	5017239	AssignmentExpression	k = 0		5017123	1		=			
ANR	5017240	Identifier	k		5017123	0					
ANR	5017241	PrimaryExpression	0		5017123	1					
ANR	5017242	Condition	ops [ i ] . str [ j ] != '\\0'	41:15:876:894	5017123	1	True				
ANR	5017243	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5017123	0		!=			
ANR	5017244	ArrayIndexing	ops [ i ] . str [ j ]		5017123	0					
ANR	5017245	MemberAccess	ops [ i ] . str		5017123	0					
ANR	5017246	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017247	Identifier	ops		5017123	0					
ANR	5017248	Identifier	i		5017123	1					
ANR	5017249	Identifier	str		5017123	1					
ANR	5017250	Identifier	j		5017123	1					
ANR	5017251	PrimaryExpression	'\\0'		5017123	1					
ANR	5017252	Expression	"j ++ , k ++"	41:35:896:902	5017123	2	True				
ANR	5017253	PostIncDecOperationExpression	j ++		5017123	0					
ANR	5017254	Identifier	j		5017123	0					
ANR	5017255	IncDec	++		5017123	1					
ANR	5017256	PostIncDecOperationExpression	k ++		5017123	1					
ANR	5017257	Identifier	k		5017123	0					
ANR	5017258	IncDec	++		5017123	1					
ANR	5017259	CompoundStatement		29:44:620:620	5017123	3					
ANR	5017260	IfStatement	if ( ops [ i ] . str [ j ] >= '0' && ops [ i ] . str [ j ] <= '9' )		5017123	0					
ANR	5017261	Condition	ops [ i ] . str [ j ] >= '0' && ops [ i ] . str [ j ] <= '9'	42:9:916:955	5017123	0	True				
ANR	5017262	AndExpression	ops [ i ] . str [ j ] >= '0' && ops [ i ] . str [ j ] <= '9'		5017123	0		&&			
ANR	5017263	RelationalExpression	ops [ i ] . str [ j ] >= '0'		5017123	0		>=			
ANR	5017264	ArrayIndexing	ops [ i ] . str [ j ]		5017123	0					
ANR	5017265	MemberAccess	ops [ i ] . str		5017123	0					
ANR	5017266	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017267	Identifier	ops		5017123	0					
ANR	5017268	Identifier	i		5017123	1					
ANR	5017269	Identifier	str		5017123	1					
ANR	5017270	Identifier	j		5017123	1					
ANR	5017271	PrimaryExpression	'0'		5017123	1					
ANR	5017272	RelationalExpression	ops [ i ] . str [ j ] <= '9'		5017123	1		<=			
ANR	5017273	ArrayIndexing	ops [ i ] . str [ j ]		5017123	0					
ANR	5017274	MemberAccess	ops [ i ] . str		5017123	0					
ANR	5017275	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017276	Identifier	ops		5017123	0					
ANR	5017277	Identifier	i		5017123	1					
ANR	5017278	Identifier	str		5017123	1					
ANR	5017279	Identifier	j		5017123	1					
ANR	5017280	PrimaryExpression	'9'		5017123	1					
ANR	5017281	CompoundStatement		31:6:681:722	5017123	1					
ANR	5017282	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	43:6:966:1007	5017123	0	True				
ANR	5017283	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5017123	0					
ANR	5017284	IdentifierDeclType	const char *		5017123	0					
ANR	5017285	Identifier	w		5017123	1					
ANR	5017286	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5017123	2		=			
ANR	5017287	Identifier	w		5017123	0					
ANR	5017288	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5017123	1					
ANR	5017289	Identifier	argv		5017123	0					
ANR	5017290	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5017123	1		-			
ANR	5017291	ArrayIndexing	ops [ i ] . str [ j ]		5017123	0					
ANR	5017292	MemberAccess	ops [ i ] . str		5017123	0					
ANR	5017293	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017294	Identifier	ops		5017123	0					
ANR	5017295	Identifier	i		5017123	1					
ANR	5017296	Identifier	str		5017123	1					
ANR	5017297	Identifier	j		5017123	1					
ANR	5017298	PrimaryExpression	'0'		5017123	1					
ANR	5017299	IfStatement	if ( w != NULL )		5017123	1					
ANR	5017300	Condition	w != NULL	44:10:1019:1027	5017123	0	True				
ANR	5017301	EqualityExpression	w != NULL		5017123	0		!=			
ANR	5017302	Identifier	w		5017123	0					
ANR	5017303	Identifier	NULL		5017123	1					
ANR	5017304	CompoundStatement		32:21:745:745	5017123	1					
ANR	5017305	ExpressionStatement	"strcpy ( newstr + k , w )"	45:7:1039:1058	5017123	0	True				
ANR	5017306	CallExpression	"strcpy ( newstr + k , w )"		5017123	0					
ANR	5017307	Callee	strcpy		5017123	0					
ANR	5017308	Identifier	strcpy		5017123	0					
ANR	5017309	ArgumentList	newstr + k		5017123	1					
ANR	5017310	Argument	newstr + k		5017123	0					
ANR	5017311	AdditiveExpression	newstr + k		5017123	0		+			
ANR	5017312	Identifier	newstr		5017123	0					
ANR	5017313	Identifier	k		5017123	1					
ANR	5017314	Argument	w		5017123	1					
ANR	5017315	Identifier	w		5017123	0					
ANR	5017316	ExpressionStatement	k += strlen ( w ) - 1	46:7:1067:1083	5017123	1	True				
ANR	5017317	AssignmentExpression	k += strlen ( w ) - 1		5017123	0		+=			
ANR	5017318	Identifier	k		5017123	0					
ANR	5017319	AdditiveExpression	strlen ( w ) - 1		5017123	1		-			
ANR	5017320	CallExpression	strlen ( w )		5017123	0					
ANR	5017321	Callee	strlen		5017123	0					
ANR	5017322	Identifier	strlen		5017123	0					
ANR	5017323	ArgumentList	w		5017123	1					
ANR	5017324	Argument	w		5017123	0					
ANR	5017325	Identifier	w		5017123	0					
ANR	5017326	PrimaryExpression	1		5017123	1					
ANR	5017327	ElseStatement	else		5017123	0					
ANR	5017328	CompoundStatement		36:12:820:820	5017123	0					
ANR	5017329	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	49:6:1113:1138	5017123	0	True				
ANR	5017330	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5017123	0		=			
ANR	5017331	ArrayIndexing	newstr [ k ]		5017123	0					
ANR	5017332	Identifier	newstr		5017123	0					
ANR	5017333	Identifier	k		5017123	1					
ANR	5017334	ArrayIndexing	ops [ i ] . str [ j ]		5017123	1					
ANR	5017335	MemberAccess	ops [ i ] . str		5017123	0					
ANR	5017336	ArrayIndexing	ops [ i ]		5017123	0					
ANR	5017337	Identifier	ops		5017123	0					
ANR	5017338	Identifier	i		5017123	1					
ANR	5017339	Identifier	str		5017123	1					
ANR	5017340	Identifier	j		5017123	1					
ANR	5017341	ExpressionStatement	newstr [ k ] = '\\0'	52:4:1157:1171	5017123	1	True				
ANR	5017342	AssignmentExpression	newstr [ k ] = '\\0'		5017123	0		=			
ANR	5017343	ArrayIndexing	newstr [ k ]		5017123	0					
ANR	5017344	Identifier	newstr		5017123	0					
ANR	5017345	Identifier	k		5017123	1					
ANR	5017346	PrimaryExpression	'\\0'		5017123	1					
ANR	5017347	ReturnStatement	return true ;	54:3:1181:1192	5017123	1	True				
ANR	5017348	Identifier	true		5017123	0					
ANR	5017349	IfStatement	if ( newstr != NULL )		5017123	3					
ANR	5017350	Condition	newstr != NULL	59:5:1233:1246	5017123	0	True				
ANR	5017351	EqualityExpression	newstr != NULL		5017123	0		!=			
ANR	5017352	Identifier	newstr		5017123	0					
ANR	5017353	Identifier	NULL		5017123	1					
ANR	5017354	CompoundStatement		47:21:964:964	5017123	1					
ANR	5017355	ExpressionStatement	newstr [ 0 ] = '\\0'	60:2:1253:1269	5017123	0	True				
ANR	5017356	AssignmentExpression	newstr [ 0 ] = '\\0'		5017123	0		=			
ANR	5017357	ArrayIndexing	newstr [ 0 ]		5017123	0					
ANR	5017358	Identifier	newstr		5017123	0					
ANR	5017359	PrimaryExpression	0		5017123	1					
ANR	5017360	PrimaryExpression	'\\0'		5017123	1					
ANR	5017361	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5017123	1					
ANR	5017362	ForInit	i = 0 ;	61:7:1278:1281	5017123	0	True				
ANR	5017363	AssignmentExpression	i = 0		5017123	0		=			
ANR	5017364	Identifier	i		5017123	0					
ANR	5017365	PrimaryExpression	0		5017123	1					
ANR	5017366	Condition	i < argc	61:12:1283:1288	5017123	1	True				
ANR	5017367	RelationalExpression	i < argc		5017123	0		<			
ANR	5017368	Identifier	i		5017123	0					
ANR	5017369	Identifier	argc		5017123	1					
ANR	5017370	PostIncDecOperationExpression	i ++	61:20:1291:1293	5017123	2	True				
ANR	5017371	Identifier	i		5017123	0					
ANR	5017372	IncDec	++		5017123	1					
ANR	5017373	CompoundStatement		49:25:1011:1011	5017123	3					
ANR	5017374	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	62:3:1301:1325	5017123	0	True				
ANR	5017375	CallExpression	"strcat ( newstr , argv [ i ] )"		5017123	0					
ANR	5017376	Callee	strcat		5017123	0					
ANR	5017377	Identifier	strcat		5017123	0					
ANR	5017378	ArgumentList	newstr		5017123	1					
ANR	5017379	Argument	newstr		5017123	0					
ANR	5017380	Identifier	newstr		5017123	0					
ANR	5017381	Argument	argv [ i ]		5017123	1					
ANR	5017382	ArrayIndexing	argv [ i ]		5017123	0					
ANR	5017383	Identifier	argv		5017123	0					
ANR	5017384	Identifier	i		5017123	1					
ANR	5017385	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"	63:3:1330:1379	5017123	1	True				
ANR	5017386	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"		5017123	0					
ANR	5017387	Callee	strcat		5017123	0					
ANR	5017388	Identifier	strcat		5017123	0					
ANR	5017389	ArgumentList	newstr		5017123	1					
ANR	5017390	Argument	newstr		5017123	0					
ANR	5017391	Identifier	newstr		5017123	0					
ANR	5017392	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5017123	1					
ANR	5017393	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5017123	0					
ANR	5017394	Condition	i == 0 || i == argc - 1		5017123	0					
ANR	5017395	OrExpression	i == 0 || i == argc - 1		5017123	0		||			
ANR	5017396	EqualityExpression	i == 0		5017123	0		==			
ANR	5017397	Identifier	i		5017123	0					
ANR	5017398	PrimaryExpression	0		5017123	1					
ANR	5017399	EqualityExpression	i == argc - 1		5017123	1		==			
ANR	5017400	Identifier	i		5017123	0					
ANR	5017401	AdditiveExpression	argc - 1		5017123	1		-			
ANR	5017402	Identifier	argc		5017123	0					
ANR	5017403	PrimaryExpression	1		5017123	1					
ANR	5017404	PrimaryExpression	""" """		5017123	1					
ANR	5017405	PrimaryExpression	""","""		5017123	2					
ANR	5017406	ReturnStatement	return false ;	67:1:1390:1402	5017123	4	True				
ANR	5017407	Identifier	false		5017123	0					
ANR	5017408	ReturnType	static int		5017123	1					
ANR	5017409	Identifier	replace		5017123	2					
ANR	5017410	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5017123	3					
ANR	5017411	Parameter	int argc	13:19:240:247	5017123	0	True				
ANR	5017412	ParameterType	int		5017123	0					
ANR	5017413	Identifier	argc		5017123	1					
ANR	5017414	Parameter	const char * argv [ ]	13:29:250:267	5017123	1	True				
ANR	5017415	ParameterType	const char * [ ]		5017123	0					
ANR	5017416	Identifier	argv		5017123	1					
ANR	5017417	Parameter	char * newstr	13:49:270:281	5017123	2	True				
ANR	5017418	ParameterType	char *		5017123	0					
ANR	5017419	Identifier	newstr		5017123	1					
ANR	5017420	CFGEntryNode	ENTRY		5017123		True				
ANR	5017421	CFGExitNode	EXIT		5017123		True				
ANR	5017422	Symbol	* ops [ i ] . str		5017123						
ANR	5017423	Symbol	* * ops		5017123						
ANR	5017424	Symbol	* argv		5017123						
ANR	5017425	Symbol	argv		5017123						
ANR	5017426	Symbol	ops [ i ] . str		5017123						
ANR	5017427	Symbol	strlen		5017123						
ANR	5017428	Symbol	ops [ i ] . op		5017123						
ANR	5017429	Symbol	* ops		5017123						
ANR	5017430	Symbol	argc		5017123						
ANR	5017431	Symbol	strcmp		5017123						
ANR	5017432	Symbol	* * j		5017123						
ANR	5017433	Symbol	* * i		5017123						
ANR	5017434	Symbol	NULL		5017123						
ANR	5017435	Symbol	* * ops [ i ] . str		5017123						
ANR	5017436	Symbol	false		5017123						
ANR	5017437	Symbol	i		5017123						
ANR	5017438	Symbol	j		5017123						
ANR	5017439	Symbol	k		5017123						
ANR	5017440	Symbol	newstr		5017123						
ANR	5017441	Symbol	* * * ops		5017123						
ANR	5017442	Symbol	ops		5017123						
ANR	5017443	Symbol	* i		5017123						
ANR	5017444	Symbol	* newstr		5017123						
ANR	5017445	Symbol	* j		5017123						
ANR	5017446	Symbol	* k		5017123						
ANR	5017447	Symbol	w		5017123						
ANR	5017448	Symbol	* * * i		5017123						
ANR	5017449	Symbol	true		5017123						
ANR	5017450	Function	parse	70:0:1407:3403							
ANR	5017451	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5017450	0					
ANR	5017452	CompoundStatement		70:57:1464:3403	5017450	0					
ANR	5017453	IdentifierDeclStatement	"int i , n ;"	71:1:1467:1475	5017450	0	True				
ANR	5017454	IdentifierDecl	i		5017450	0					
ANR	5017455	IdentifierDeclType	int		5017450	0					
ANR	5017456	Identifier	i		5017450	1					
ANR	5017457	IdentifierDecl	n		5017450	1					
ANR	5017458	IdentifierDeclType	int		5017450	0					
ANR	5017459	Identifier	n		5017450	1					
ANR	5017460	IdentifierDeclStatement	char w0 [ 32 ] ;	72:1:1478:1489	5017450	1	True				
ANR	5017461	IdentifierDecl	w0 [ 32 ]		5017450	0					
ANR	5017462	IdentifierDeclType	char [ 32 ]		5017450	0					
ANR	5017463	Identifier	w0		5017450	1					
ANR	5017464	PrimaryExpression	32		5017450	2					
ANR	5017465	IdentifierDeclStatement	char w1 [ 32 ] ;	73:1:1492:1503	5017450	2	True				
ANR	5017466	IdentifierDecl	w1 [ 32 ]		5017450	0					
ANR	5017467	IdentifierDeclType	char [ 32 ]		5017450	0					
ANR	5017468	Identifier	w1		5017450	1					
ANR	5017469	PrimaryExpression	32		5017450	2					
ANR	5017470	IdentifierDeclStatement	char w2 [ 32 ] ;	74:1:1506:1517	5017450	3	True				
ANR	5017471	IdentifierDecl	w2 [ 32 ]		5017450	0					
ANR	5017472	IdentifierDeclType	char [ 32 ]		5017450	0					
ANR	5017473	Identifier	w2		5017450	1					
ANR	5017474	PrimaryExpression	32		5017450	2					
ANR	5017475	IdentifierDeclStatement	char w3 [ 32 ] ;	75:1:1520:1531	5017450	4	True				
ANR	5017476	IdentifierDecl	w3 [ 32 ]		5017450	0					
ANR	5017477	IdentifierDeclType	char [ 32 ]		5017450	0					
ANR	5017478	Identifier	w3		5017450	1					
ANR	5017479	PrimaryExpression	32		5017450	2					
ANR	5017480	IdentifierDeclStatement	"char * buf , * ptr , * optr , * num ;"	76:1:1534:1562	5017450	5	True				
ANR	5017481	IdentifierDecl	* buf		5017450	0					
ANR	5017482	IdentifierDeclType	char *		5017450	0					
ANR	5017483	Identifier	buf		5017450	1					
ANR	5017484	IdentifierDecl	* ptr		5017450	1					
ANR	5017485	IdentifierDeclType	char *		5017450	0					
ANR	5017486	Identifier	ptr		5017450	1					
ANR	5017487	IdentifierDecl	* optr		5017450	2					
ANR	5017488	IdentifierDeclType	char *		5017450	0					
ANR	5017489	Identifier	optr		5017450	1					
ANR	5017490	IdentifierDecl	* num		5017450	3					
ANR	5017491	IdentifierDeclType	char *		5017450	0					
ANR	5017492	Identifier	num		5017450	1					
ANR	5017493	ExpressionStatement	buf = strdup ( data )	79:1:1597:1616	5017450	6	True				
ANR	5017494	AssignmentExpression	buf = strdup ( data )		5017450	0		=			
ANR	5017495	Identifier	buf		5017450	0					
ANR	5017496	CallExpression	strdup ( data )		5017450	1					
ANR	5017497	Callee	strdup		5017450	0					
ANR	5017498	Identifier	strdup		5017450	0					
ANR	5017499	ArgumentList	data		5017450	1					
ANR	5017500	Argument	data		5017450	0					
ANR	5017501	Identifier	data		5017450	0					
ANR	5017502	IfStatement	if ( ! buf )		5017450	7					
ANR	5017503	Condition	! buf	80:5:1623:1626	5017450	0	True				
ANR	5017504	UnaryOperationExpression	! buf		5017450	0					
ANR	5017505	UnaryOperator	!		5017450	0					
ANR	5017506	Identifier	buf		5017450	1					
ANR	5017507	CompoundStatement		11:11:164:164	5017450	1					
ANR	5017508	ReturnStatement	return false ;	81:2:1633:1645	5017450	0	True				
ANR	5017509	Identifier	false		5017450	0					
ANR	5017510	ExpressionStatement	r_str_trim_head ( buf )	83:1:1651:1672	5017450	8	True				
ANR	5017511	CallExpression	r_str_trim_head ( buf )		5017450	0					
ANR	5017512	Callee	r_str_trim_head		5017450	0					
ANR	5017513	Identifier	r_str_trim_head		5017450	0					
ANR	5017514	ArgumentList	buf		5017450	1					
ANR	5017515	Argument	buf		5017450	0					
ANR	5017516	Identifier	buf		5017450	0					
ANR	5017517	ExpressionStatement	"ptr = strchr ( buf , '#' )"	85:1:1676:1699	5017450	9	True				
ANR	5017518	AssignmentExpression	"ptr = strchr ( buf , '#' )"		5017450	0		=			
ANR	5017519	Identifier	ptr		5017450	0					
ANR	5017520	CallExpression	"strchr ( buf , '#' )"		5017450	1					
ANR	5017521	Callee	strchr		5017450	0					
ANR	5017522	Identifier	strchr		5017450	0					
ANR	5017523	ArgumentList	buf		5017450	1					
ANR	5017524	Argument	buf		5017450	0					
ANR	5017525	Identifier	buf		5017450	0					
ANR	5017526	Argument	'#'		5017450	1					
ANR	5017527	PrimaryExpression	'#'		5017450	0					
ANR	5017528	IfStatement	if ( ptr )		5017450	10					
ANR	5017529	Condition	ptr	86:5:1706:1708	5017450	0	True				
ANR	5017530	Identifier	ptr		5017450	0					
ANR	5017531	CompoundStatement		17:10:246:246	5017450	1					
ANR	5017532	ExpressionStatement	* ptr = 0	87:2:1715:1723	5017450	0	True				
ANR	5017533	AssignmentExpression	* ptr = 0		5017450	0		=			
ANR	5017534	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017535	UnaryOperator	*		5017450	0					
ANR	5017536	Identifier	ptr		5017450	1					
ANR	5017537	PrimaryExpression	0		5017450	1					
ANR	5017538	ExpressionStatement	r_str_trim ( buf )	88:2:1727:1743	5017450	1	True				
ANR	5017539	CallExpression	r_str_trim ( buf )		5017450	0					
ANR	5017540	Callee	r_str_trim		5017450	0					
ANR	5017541	Identifier	r_str_trim		5017450	0					
ANR	5017542	ArgumentList	buf		5017450	1					
ANR	5017543	Argument	buf		5017450	0					
ANR	5017544	Identifier	buf		5017450	0					
ANR	5017545	IfStatement	if ( * buf == '.' || buf [ strlen ( buf ) - 1 ] == ':' )		5017450	11					
ANR	5017546	Condition	* buf == '.' || buf [ strlen ( buf ) - 1 ] == ':'	90:5:1753:1792	5017450	0	True				
ANR	5017547	OrExpression	* buf == '.' || buf [ strlen ( buf ) - 1 ] == ':'		5017450	0		||			
ANR	5017548	EqualityExpression	* buf == '.'		5017450	0		==			
ANR	5017549	UnaryOperationExpression	* buf		5017450	0					
ANR	5017550	UnaryOperator	*		5017450	0					
ANR	5017551	Identifier	buf		5017450	1					
ANR	5017552	PrimaryExpression	'.'		5017450	1					
ANR	5017553	EqualityExpression	buf [ strlen ( buf ) - 1 ] == ':'		5017450	1		==			
ANR	5017554	ArrayIndexing	buf [ strlen ( buf ) - 1 ]		5017450	0					
ANR	5017555	Identifier	buf		5017450	0					
ANR	5017556	AdditiveExpression	strlen ( buf ) - 1		5017450	1		-			
ANR	5017557	CallExpression	strlen ( buf )		5017450	0					
ANR	5017558	Callee	strlen		5017450	0					
ANR	5017559	Identifier	strlen		5017450	0					
ANR	5017560	ArgumentList	buf		5017450	1					
ANR	5017561	Argument	buf		5017450	0					
ANR	5017562	Identifier	buf		5017450	0					
ANR	5017563	PrimaryExpression	1		5017450	1					
ANR	5017564	PrimaryExpression	':'		5017450	1					
ANR	5017565	CompoundStatement		21:47:330:330	5017450	1					
ANR	5017566	ExpressionStatement	free ( buf )	91:2:1799:1809	5017450	0	True				
ANR	5017567	CallExpression	free ( buf )		5017450	0					
ANR	5017568	Callee	free		5017450	0					
ANR	5017569	Identifier	free		5017450	0					
ANR	5017570	ArgumentList	buf		5017450	1					
ANR	5017571	Argument	buf		5017450	0					
ANR	5017572	Identifier	buf		5017450	0					
ANR	5017573	ExpressionStatement	"strcpy ( str , data )"	92:2:1813:1831	5017450	1	True				
ANR	5017574	CallExpression	"strcpy ( str , data )"		5017450	0					
ANR	5017575	Callee	strcpy		5017450	0					
ANR	5017576	Identifier	strcpy		5017450	0					
ANR	5017577	ArgumentList	str		5017450	1					
ANR	5017578	Argument	str		5017450	0					
ANR	5017579	Identifier	str		5017450	0					
ANR	5017580	Argument	data		5017450	1					
ANR	5017581	Identifier	data		5017450	0					
ANR	5017582	ReturnStatement	return true ;	93:2:1835:1846	5017450	2	True				
ANR	5017583	Identifier	true		5017450	0					
ANR	5017584	ExpressionStatement	"r_str_replace_char ( buf , '$' , 0 )"	95:1:1852:1884	5017450	12	True				
ANR	5017585	CallExpression	"r_str_replace_char ( buf , '$' , 0 )"		5017450	0					
ANR	5017586	Callee	r_str_replace_char		5017450	0					
ANR	5017587	Identifier	r_str_replace_char		5017450	0					
ANR	5017588	ArgumentList	buf		5017450	1					
ANR	5017589	Argument	buf		5017450	0					
ANR	5017590	Identifier	buf		5017450	0					
ANR	5017591	Argument	'$'		5017450	1					
ANR	5017592	PrimaryExpression	'$'		5017450	0					
ANR	5017593	Argument	0		5017450	2					
ANR	5017594	PrimaryExpression	0		5017450	0					
ANR	5017595	ExpressionStatement	"r_str_replace_char ( buf , '%' , 0 )"	96:1:1887:1919	5017450	13	True				
ANR	5017596	CallExpression	"r_str_replace_char ( buf , '%' , 0 )"		5017450	0					
ANR	5017597	Callee	r_str_replace_char		5017450	0					
ANR	5017598	Identifier	r_str_replace_char		5017450	0					
ANR	5017599	ArgumentList	buf		5017450	1					
ANR	5017600	Argument	buf		5017450	0					
ANR	5017601	Identifier	buf		5017450	0					
ANR	5017602	Argument	'%'		5017450	1					
ANR	5017603	PrimaryExpression	'%'		5017450	0					
ANR	5017604	Argument	0		5017450	2					
ANR	5017605	PrimaryExpression	0		5017450	0					
ANR	5017606	ExpressionStatement	"r_str_replace_char ( buf , '\\t' , ' ' )"	97:1:1922:1957	5017450	14	True				
ANR	5017607	CallExpression	"r_str_replace_char ( buf , '\\t' , ' ' )"		5017450	0					
ANR	5017608	Callee	r_str_replace_char		5017450	0					
ANR	5017609	Identifier	r_str_replace_char		5017450	0					
ANR	5017610	ArgumentList	buf		5017450	1					
ANR	5017611	Argument	buf		5017450	0					
ANR	5017612	Identifier	buf		5017450	0					
ANR	5017613	Argument	'\\t'		5017450	1					
ANR	5017614	PrimaryExpression	'\\t'		5017450	0					
ANR	5017615	Argument	' '		5017450	2					
ANR	5017616	PrimaryExpression	' '		5017450	0					
ANR	5017617	ExpressionStatement	"r_str_replace_char ( buf , '(' , '[' )"	98:1:1960:1994	5017450	15	True				
ANR	5017618	CallExpression	"r_str_replace_char ( buf , '(' , '[' )"		5017450	0					
ANR	5017619	Callee	r_str_replace_char		5017450	0					
ANR	5017620	Identifier	r_str_replace_char		5017450	0					
ANR	5017621	ArgumentList	buf		5017450	1					
ANR	5017622	Argument	buf		5017450	0					
ANR	5017623	Identifier	buf		5017450	0					
ANR	5017624	Argument	'('		5017450	1					
ANR	5017625	PrimaryExpression	'('		5017450	0					
ANR	5017626	Argument	'['		5017450	2					
ANR	5017627	PrimaryExpression	'['		5017450	0					
ANR	5017628	ExpressionStatement	"r_str_replace_char ( buf , ')' , ']' )"	99:1:1997:2031	5017450	16	True				
ANR	5017629	CallExpression	"r_str_replace_char ( buf , ')' , ']' )"		5017450	0					
ANR	5017630	Callee	r_str_replace_char		5017450	0					
ANR	5017631	Identifier	r_str_replace_char		5017450	0					
ANR	5017632	ArgumentList	buf		5017450	1					
ANR	5017633	Argument	buf		5017450	0					
ANR	5017634	Identifier	buf		5017450	0					
ANR	5017635	Argument	')'		5017450	1					
ANR	5017636	PrimaryExpression	')'		5017450	0					
ANR	5017637	Argument	']'		5017450	2					
ANR	5017638	PrimaryExpression	']'		5017450	0					
ANR	5017639	ExpressionStatement	"ptr = strchr ( buf , '[' )"	100:1:2034:2057	5017450	17	True				
ANR	5017640	AssignmentExpression	"ptr = strchr ( buf , '[' )"		5017450	0		=			
ANR	5017641	Identifier	ptr		5017450	0					
ANR	5017642	CallExpression	"strchr ( buf , '[' )"		5017450	1					
ANR	5017643	Callee	strchr		5017450	0					
ANR	5017644	Identifier	strchr		5017450	0					
ANR	5017645	ArgumentList	buf		5017450	1					
ANR	5017646	Argument	buf		5017450	0					
ANR	5017647	Identifier	buf		5017450	0					
ANR	5017648	Argument	'['		5017450	1					
ANR	5017649	PrimaryExpression	'['		5017450	0					
ANR	5017650	IfStatement	if ( ptr )		5017450	18					
ANR	5017651	Condition	ptr	101:5:2064:2066	5017450	0	True				
ANR	5017652	Identifier	ptr		5017450	0					
ANR	5017653	CompoundStatement		32:10:604:604	5017450	1					
ANR	5017654	ExpressionStatement	* ptr = 0	102:2:2073:2081	5017450	0	True				
ANR	5017655	AssignmentExpression	* ptr = 0		5017450	0		=			
ANR	5017656	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017657	UnaryOperator	*		5017450	0					
ANR	5017658	Identifier	ptr		5017450	1					
ANR	5017659	PrimaryExpression	0		5017450	1					
ANR	5017660	ExpressionStatement	"num = ( char * ) r_str_lchr ( buf , ' ' )"	103:2:2085:2119	5017450	1	True				
ANR	5017661	AssignmentExpression	"num = ( char * ) r_str_lchr ( buf , ' ' )"		5017450	0		=			
ANR	5017662	Identifier	num		5017450	0					
ANR	5017663	CastExpression	"( char * ) r_str_lchr ( buf , ' ' )"		5017450	1					
ANR	5017664	CastTarget	char *		5017450	0					
ANR	5017665	CallExpression	"r_str_lchr ( buf , ' ' )"		5017450	1					
ANR	5017666	Callee	r_str_lchr		5017450	0					
ANR	5017667	Identifier	r_str_lchr		5017450	0					
ANR	5017668	ArgumentList	buf		5017450	1					
ANR	5017669	Argument	buf		5017450	0					
ANR	5017670	Identifier	buf		5017450	0					
ANR	5017671	Argument	' '		5017450	1					
ANR	5017672	PrimaryExpression	' '		5017450	0					
ANR	5017673	IfStatement	if ( ! num )		5017450	2					
ANR	5017674	Condition	! num	104:6:2127:2130	5017450	0	True				
ANR	5017675	UnaryOperationExpression	! num		5017450	0					
ANR	5017676	UnaryOperator	!		5017450	0					
ANR	5017677	Identifier	num		5017450	1					
ANR	5017678	CompoundStatement		35:12:668:668	5017450	1					
ANR	5017679	ExpressionStatement	"num = ( char * ) r_str_lchr ( buf , ',' )"	105:3:2138:2173	5017450	0	True				
ANR	5017680	AssignmentExpression	"num = ( char * ) r_str_lchr ( buf , ',' )"		5017450	0		=			
ANR	5017681	Identifier	num		5017450	0					
ANR	5017682	CastExpression	"( char * ) r_str_lchr ( buf , ',' )"		5017450	1					
ANR	5017683	CastTarget	char *		5017450	0					
ANR	5017684	CallExpression	"r_str_lchr ( buf , ',' )"		5017450	1					
ANR	5017685	Callee	r_str_lchr		5017450	0					
ANR	5017686	Identifier	r_str_lchr		5017450	0					
ANR	5017687	ArgumentList	buf		5017450	1					
ANR	5017688	Argument	buf		5017450	0					
ANR	5017689	Identifier	buf		5017450	0					
ANR	5017690	Argument	"','"		5017450	1					
ANR	5017691	PrimaryExpression	"','"		5017450	0					
ANR	5017692	IfStatement	if ( num )		5017450	3					
ANR	5017693	Condition	num	107:6:2185:2187	5017450	0	True				
ANR	5017694	Identifier	num		5017450	0					
ANR	5017695	CompoundStatement		38:11:725:725	5017450	1					
ANR	5017696	ExpressionStatement	n = atoi ( num + 1 )	108:3:2195:2211	5017450	0	True				
ANR	5017697	AssignmentExpression	n = atoi ( num + 1 )		5017450	0		=			
ANR	5017698	Identifier	n		5017450	0					
ANR	5017699	CallExpression	atoi ( num + 1 )		5017450	1					
ANR	5017700	Callee	atoi		5017450	0					
ANR	5017701	Identifier	atoi		5017450	0					
ANR	5017702	ArgumentList	num + 1		5017450	1					
ANR	5017703	Argument	num + 1		5017450	0					
ANR	5017704	AdditiveExpression	num + 1		5017450	0		+			
ANR	5017705	Identifier	num		5017450	0					
ANR	5017706	PrimaryExpression	1		5017450	1					
ANR	5017707	ExpressionStatement	* ptr = '['	109:3:2216:2226	5017450	1	True				
ANR	5017708	AssignmentExpression	* ptr = '['		5017450	0		=			
ANR	5017709	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017710	UnaryOperator	*		5017450	0					
ANR	5017711	Identifier	ptr		5017450	1					
ANR	5017712	PrimaryExpression	'['		5017450	1					
ANR	5017713	ExpressionStatement	"memmove ( num + 1 , ptr , strlen ( ptr ) + 1 )"	110:3:2231:2267	5017450	2	True				
ANR	5017714	CallExpression	"memmove ( num + 1 , ptr , strlen ( ptr ) + 1 )"		5017450	0					
ANR	5017715	Callee	memmove		5017450	0					
ANR	5017716	Identifier	memmove		5017450	0					
ANR	5017717	ArgumentList	num + 1		5017450	1					
ANR	5017718	Argument	num + 1		5017450	0					
ANR	5017719	AdditiveExpression	num + 1		5017450	0		+			
ANR	5017720	Identifier	num		5017450	0					
ANR	5017721	PrimaryExpression	1		5017450	1					
ANR	5017722	Argument	ptr		5017450	1					
ANR	5017723	Identifier	ptr		5017450	0					
ANR	5017724	Argument	strlen ( ptr ) + 1		5017450	2					
ANR	5017725	AdditiveExpression	strlen ( ptr ) + 1		5017450	0		+			
ANR	5017726	CallExpression	strlen ( ptr )		5017450	0					
ANR	5017727	Callee	strlen		5017450	0					
ANR	5017728	Identifier	strlen		5017450	0					
ANR	5017729	ArgumentList	ptr		5017450	1					
ANR	5017730	Argument	ptr		5017450	0					
ANR	5017731	Identifier	ptr		5017450	0					
ANR	5017732	PrimaryExpression	1		5017450	1					
ANR	5017733	ExpressionStatement	"ptr = ( char * ) r_str_lchr ( buf , ']' )"	111:3:2272:2306	5017450	3	True				
ANR	5017734	AssignmentExpression	"ptr = ( char * ) r_str_lchr ( buf , ']' )"		5017450	0		=			
ANR	5017735	Identifier	ptr		5017450	0					
ANR	5017736	CastExpression	"( char * ) r_str_lchr ( buf , ']' )"		5017450	1					
ANR	5017737	CastTarget	char *		5017450	0					
ANR	5017738	CallExpression	"r_str_lchr ( buf , ']' )"		5017450	1					
ANR	5017739	Callee	r_str_lchr		5017450	0					
ANR	5017740	Identifier	r_str_lchr		5017450	0					
ANR	5017741	ArgumentList	buf		5017450	1					
ANR	5017742	Argument	buf		5017450	0					
ANR	5017743	Identifier	buf		5017450	0					
ANR	5017744	Argument	']'		5017450	1					
ANR	5017745	PrimaryExpression	']'		5017450	0					
ANR	5017746	IfStatement	if ( n && ptr )		5017450	4					
ANR	5017747	Condition	n && ptr	112:7:2315:2322	5017450	0	True				
ANR	5017748	AndExpression	n && ptr		5017450	0		&&			
ANR	5017749	Identifier	n		5017450	0					
ANR	5017750	Identifier	ptr		5017450	1					
ANR	5017751	CompoundStatement		44:4:866:893	5017450	1					
ANR	5017752	IdentifierDeclStatement	char * rest = strdup ( ptr + 1 ) ;	113:4:2331:2358	5017450	0	True				
ANR	5017753	IdentifierDecl	* rest = strdup ( ptr + 1 )		5017450	0					
ANR	5017754	IdentifierDeclType	char *		5017450	0					
ANR	5017755	Identifier	rest		5017450	1					
ANR	5017756	AssignmentExpression	* rest = strdup ( ptr + 1 )		5017450	2		=			
ANR	5017757	Identifier	rest		5017450	0					
ANR	5017758	CallExpression	strdup ( ptr + 1 )		5017450	1					
ANR	5017759	Callee	strdup		5017450	0					
ANR	5017760	Identifier	strdup		5017450	0					
ANR	5017761	ArgumentList	ptr + 1		5017450	1					
ANR	5017762	Argument	ptr + 1		5017450	0					
ANR	5017763	AdditiveExpression	ptr + 1		5017450	0		+			
ANR	5017764	Identifier	ptr		5017450	0					
ANR	5017765	PrimaryExpression	1		5017450	1					
ANR	5017766	IfStatement	if ( n > 0 )		5017450	1					
ANR	5017767	Condition	n > 0	114:8:2368:2372	5017450	0	True				
ANR	5017768	RelationalExpression	n > 0		5017450	0		>			
ANR	5017769	Identifier	n		5017450	0					
ANR	5017770	PrimaryExpression	0		5017450	1					
ANR	5017771	CompoundStatement		45:15:910:910	5017450	1					
ANR	5017772	ExpressionStatement	"sprintf ( ptr , ""+%d]%s"" , n , rest )"	115:5:2382:2414	5017450	0	True				
ANR	5017773	CallExpression	"sprintf ( ptr , ""+%d]%s"" , n , rest )"		5017450	0					
ANR	5017774	Callee	sprintf		5017450	0					
ANR	5017775	Identifier	sprintf		5017450	0					
ANR	5017776	ArgumentList	ptr		5017450	1					
ANR	5017777	Argument	ptr		5017450	0					
ANR	5017778	Identifier	ptr		5017450	0					
ANR	5017779	Argument	"""+%d]%s"""		5017450	1					
ANR	5017780	PrimaryExpression	"""+%d]%s"""		5017450	0					
ANR	5017781	Argument	n		5017450	2					
ANR	5017782	Identifier	n		5017450	0					
ANR	5017783	Argument	rest		5017450	3					
ANR	5017784	Identifier	rest		5017450	0					
ANR	5017785	ElseStatement	else		5017450	0					
ANR	5017786	CompoundStatement		47:11:962:962	5017450	0					
ANR	5017787	ExpressionStatement	"sprintf ( ptr , ""%d]%s"" , n , rest )"	117:5:2434:2465	5017450	0	True				
ANR	5017788	CallExpression	"sprintf ( ptr , ""%d]%s"" , n , rest )"		5017450	0					
ANR	5017789	Callee	sprintf		5017450	0					
ANR	5017790	Identifier	sprintf		5017450	0					
ANR	5017791	ArgumentList	ptr		5017450	1					
ANR	5017792	Argument	ptr		5017450	0					
ANR	5017793	Identifier	ptr		5017450	0					
ANR	5017794	Argument	"""%d]%s"""		5017450	1					
ANR	5017795	PrimaryExpression	"""%d]%s"""		5017450	0					
ANR	5017796	Argument	n		5017450	2					
ANR	5017797	Identifier	n		5017450	0					
ANR	5017798	Argument	rest		5017450	3					
ANR	5017799	Identifier	rest		5017450	0					
ANR	5017800	ExpressionStatement	free ( rest )	119:4:2477:2488	5017450	2	True				
ANR	5017801	CallExpression	free ( rest )		5017450	0					
ANR	5017802	Callee	free		5017450	0					
ANR	5017803	Identifier	free		5017450	0					
ANR	5017804	ArgumentList	rest		5017450	1					
ANR	5017805	Argument	rest		5017450	0					
ANR	5017806	Identifier	rest		5017450	0					
ANR	5017807	ElseStatement	else		5017450	0					
ANR	5017808	CompoundStatement		52:9:1039:1039	5017450	0					
ANR	5017809	ExpressionStatement	* ptr = '['	122:3:2509:2519	5017450	0	True				
ANR	5017810	AssignmentExpression	* ptr = '['		5017450	0		=			
ANR	5017811	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017812	UnaryOperator	*		5017450	0					
ANR	5017813	Identifier	ptr		5017450	1					
ANR	5017814	PrimaryExpression	'['		5017450	1					
ANR	5017815	IfStatement	if ( * buf )		5017450	19					
ANR	5017816	Condition	* buf	126:5:2534:2537	5017450	0	True				
ANR	5017817	UnaryOperationExpression	* buf		5017450	0					
ANR	5017818	UnaryOperator	*		5017450	0					
ANR	5017819	Identifier	buf		5017450	1					
ANR	5017820	CompoundStatement		57:11:1075:1075	5017450	1					
ANR	5017821	ExpressionStatement	* w0 = * w1 = * w2 = * w3 = 0	127:2:2544:2569	5017450	0	True				
ANR	5017822	AssignmentExpression	* w0 = * w1 = * w2 = * w3 = 0		5017450	0		=			
ANR	5017823	UnaryOperationExpression	* w0		5017450	0					
ANR	5017824	UnaryOperator	*		5017450	0					
ANR	5017825	Identifier	w0		5017450	1					
ANR	5017826	AssignmentExpression	* w1 = * w2 = * w3 = 0		5017450	1		=			
ANR	5017827	UnaryOperationExpression	* w1		5017450	0					
ANR	5017828	UnaryOperator	*		5017450	0					
ANR	5017829	Identifier	w1		5017450	1					
ANR	5017830	AssignmentExpression	* w2 = * w3 = 0		5017450	1		=			
ANR	5017831	UnaryOperationExpression	* w2		5017450	0					
ANR	5017832	UnaryOperator	*		5017450	0					
ANR	5017833	Identifier	w2		5017450	1					
ANR	5017834	AssignmentExpression	* w3 = 0		5017450	1		=			
ANR	5017835	UnaryOperationExpression	* w3		5017450	0					
ANR	5017836	UnaryOperator	*		5017450	0					
ANR	5017837	Identifier	w3		5017450	1					
ANR	5017838	PrimaryExpression	0		5017450	1					
ANR	5017839	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	128:2:2573:2596	5017450	1	True				
ANR	5017840	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5017450	0		=			
ANR	5017841	Identifier	ptr		5017450	0					
ANR	5017842	CallExpression	"strchr ( buf , ' ' )"		5017450	1					
ANR	5017843	Callee	strchr		5017450	0					
ANR	5017844	Identifier	strchr		5017450	0					
ANR	5017845	ArgumentList	buf		5017450	1					
ANR	5017846	Argument	buf		5017450	0					
ANR	5017847	Identifier	buf		5017450	0					
ANR	5017848	Argument	' '		5017450	1					
ANR	5017849	PrimaryExpression	' '		5017450	0					
ANR	5017850	IfStatement	if ( ! ptr )		5017450	2					
ANR	5017851	Condition	! ptr	129:6:2604:2607	5017450	0	True				
ANR	5017852	UnaryOperationExpression	! ptr		5017450	0					
ANR	5017853	UnaryOperator	!		5017450	0					
ANR	5017854	Identifier	ptr		5017450	1					
ANR	5017855	CompoundStatement		60:12:1145:1145	5017450	1					
ANR	5017856	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	130:3:2615:2639	5017450	0	True				
ANR	5017857	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5017450	0		=			
ANR	5017858	Identifier	ptr		5017450	0					
ANR	5017859	CallExpression	"strchr ( buf , '\\t' )"		5017450	1					
ANR	5017860	Callee	strchr		5017450	0					
ANR	5017861	Identifier	strchr		5017450	0					
ANR	5017862	ArgumentList	buf		5017450	1					
ANR	5017863	Argument	buf		5017450	0					
ANR	5017864	Identifier	buf		5017450	0					
ANR	5017865	Argument	'\\t'		5017450	1					
ANR	5017866	PrimaryExpression	'\\t'		5017450	0					
ANR	5017867	IfStatement	if ( ptr )		5017450	3					
ANR	5017868	Condition	ptr	132:6:2651:2653	5017450	0	True				
ANR	5017869	Identifier	ptr		5017450	0					
ANR	5017870	CompoundStatement		63:11:1191:1191	5017450	1					
ANR	5017871	ExpressionStatement	* ptr = '\\0'	133:3:2661:2672	5017450	0	True				
ANR	5017872	AssignmentExpression	* ptr = '\\0'		5017450	0		=			
ANR	5017873	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017874	UnaryOperator	*		5017450	0					
ANR	5017875	Identifier	ptr		5017450	1					
ANR	5017876	PrimaryExpression	'\\0'		5017450	1					
ANR	5017877	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5017450	1					
ANR	5017878	ForInit	++ ptr ;	134:8:2682:2687	5017450	0	True				
ANR	5017879	UnaryExpression	++ ptr		5017450	0					
ANR	5017880	IncDec	++		5017450	0					
ANR	5017881	Identifier	ptr		5017450	1					
ANR	5017882	Condition	* ptr == ' '	134:15:2689:2699	5017450	1	True				
ANR	5017883	EqualityExpression	* ptr == ' '		5017450	0		==			
ANR	5017884	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017885	UnaryOperator	*		5017450	0					
ANR	5017886	Identifier	ptr		5017450	1					
ANR	5017887	PrimaryExpression	' '		5017450	1					
ANR	5017888	PostIncDecOperationExpression	ptr ++	134:28:2702:2706	5017450	2	True				
ANR	5017889	Identifier	ptr		5017450	0					
ANR	5017890	IncDec	++		5017450	1					
ANR	5017891	CompoundStatement		65:35:1244:1244	5017450	3					
ANR	5017892	ExpressionStatement		135:4:2715:2715	5017450	0	True				
ANR	5017893	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	137:3:2725:2758	5017450	2	True				
ANR	5017894	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5017450	0					
ANR	5017895	Callee	strncpy		5017450	0					
ANR	5017896	Identifier	strncpy		5017450	0					
ANR	5017897	ArgumentList	w0		5017450	1					
ANR	5017898	Argument	w0		5017450	0					
ANR	5017899	Identifier	w0		5017450	0					
ANR	5017900	Argument	buf		5017450	1					
ANR	5017901	Identifier	buf		5017450	0					
ANR	5017902	Argument	sizeof ( w0 ) - 1		5017450	2					
ANR	5017903	AdditiveExpression	sizeof ( w0 ) - 1		5017450	0		-			
ANR	5017904	SizeofExpression	sizeof ( w0 )		5017450	0					
ANR	5017905	Sizeof	sizeof		5017450	0					
ANR	5017906	SizeofOperand	w0		5017450	1					
ANR	5017907	PrimaryExpression	1		5017450	1					
ANR	5017908	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	138:3:2763:2796	5017450	3	True				
ANR	5017909	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5017450	0					
ANR	5017910	Callee	strncpy		5017450	0					
ANR	5017911	Identifier	strncpy		5017450	0					
ANR	5017912	ArgumentList	w1		5017450	1					
ANR	5017913	Argument	w1		5017450	0					
ANR	5017914	Identifier	w1		5017450	0					
ANR	5017915	Argument	ptr		5017450	1					
ANR	5017916	Identifier	ptr		5017450	0					
ANR	5017917	Argument	sizeof ( w1 ) - 1		5017450	2					
ANR	5017918	AdditiveExpression	sizeof ( w1 ) - 1		5017450	0		-			
ANR	5017919	SizeofExpression	sizeof ( w1 )		5017450	0					
ANR	5017920	Sizeof	sizeof		5017450	0					
ANR	5017921	SizeofOperand	w1		5017450	1					
ANR	5017922	PrimaryExpression	1		5017450	1					
ANR	5017923	ExpressionStatement	optr = ptr	140:3:2802:2812	5017450	4	True				
ANR	5017924	AssignmentExpression	optr = ptr		5017450	0		=			
ANR	5017925	Identifier	optr		5017450	0					
ANR	5017926	Identifier	ptr		5017450	1					
ANR	5017927	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	141:3:2817:2840	5017450	5	True				
ANR	5017928	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5017450	0		=			
ANR	5017929	Identifier	ptr		5017450	0					
ANR	5017930	CallExpression	"strchr ( ptr , ',' )"		5017450	1					
ANR	5017931	Callee	strchr		5017450	0					
ANR	5017932	Identifier	strchr		5017450	0					
ANR	5017933	ArgumentList	ptr		5017450	1					
ANR	5017934	Argument	ptr		5017450	0					
ANR	5017935	Identifier	ptr		5017450	0					
ANR	5017936	Argument	"','"		5017450	1					
ANR	5017937	PrimaryExpression	"','"		5017450	0					
ANR	5017938	IfStatement	if ( ptr )		5017450	6					
ANR	5017939	Condition	ptr	142:7:2849:2851	5017450	0	True				
ANR	5017940	Identifier	ptr		5017450	0					
ANR	5017941	CompoundStatement		73:12:1389:1389	5017450	1					
ANR	5017942	ExpressionStatement	* ptr = '\\0'	143:4:2860:2871	5017450	0	True				
ANR	5017943	AssignmentExpression	* ptr = '\\0'		5017450	0		=			
ANR	5017944	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017945	UnaryOperator	*		5017450	0					
ANR	5017946	Identifier	ptr		5017450	1					
ANR	5017947	PrimaryExpression	'\\0'		5017450	1					
ANR	5017948	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5017450	1					
ANR	5017949	ForInit	++ ptr ;	144:9:2882:2887	5017450	0	True				
ANR	5017950	UnaryExpression	++ ptr		5017450	0					
ANR	5017951	IncDec	++		5017450	0					
ANR	5017952	Identifier	ptr		5017450	1					
ANR	5017953	Condition	* ptr == ' '	144:16:2889:2899	5017450	1	True				
ANR	5017954	EqualityExpression	* ptr == ' '		5017450	0		==			
ANR	5017955	UnaryOperationExpression	* ptr		5017450	0					
ANR	5017956	UnaryOperator	*		5017450	0					
ANR	5017957	Identifier	ptr		5017450	1					
ANR	5017958	PrimaryExpression	' '		5017450	1					
ANR	5017959	PostIncDecOperationExpression	ptr ++	144:29:2902:2906	5017450	2	True				
ANR	5017960	Identifier	ptr		5017450	0					
ANR	5017961	IncDec	++		5017450	1					
ANR	5017962	CompoundStatement		75:36:1444:1444	5017450	3					
ANR	5017963	ExpressionStatement		145:5:2916:2916	5017450	0	True				
ANR	5017964	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	147:4:2928:2960	5017450	2	True				
ANR	5017965	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5017450	0					
ANR	5017966	Callee	strncpy		5017450	0					
ANR	5017967	Identifier	strncpy		5017450	0					
ANR	5017968	ArgumentList	w1		5017450	1					
ANR	5017969	Argument	w1		5017450	0					
ANR	5017970	Identifier	w1		5017450	0					
ANR	5017971	Argument	optr		5017450	1					
ANR	5017972	Identifier	optr		5017450	0					
ANR	5017973	Argument	sizeof ( w1 ) - 1		5017450	2					
ANR	5017974	AdditiveExpression	sizeof ( w1 ) - 1		5017450	0		-			
ANR	5017975	SizeofExpression	sizeof ( w1 )		5017450	0					
ANR	5017976	Sizeof	sizeof		5017450	0					
ANR	5017977	SizeofOperand	w1		5017450	1					
ANR	5017978	PrimaryExpression	1		5017450	1					
ANR	5017979	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	148:4:2966:2997	5017450	3	True				
ANR	5017980	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5017450	0					
ANR	5017981	Callee	strncpy		5017450	0					
ANR	5017982	Identifier	strncpy		5017450	0					
ANR	5017983	ArgumentList	w2		5017450	1					
ANR	5017984	Argument	w2		5017450	0					
ANR	5017985	Identifier	w2		5017450	0					
ANR	5017986	Argument	ptr		5017450	1					
ANR	5017987	Identifier	ptr		5017450	0					
ANR	5017988	Argument	sizeof ( w2 ) - 1		5017450	2					
ANR	5017989	AdditiveExpression	sizeof ( w2 ) - 1		5017450	0		-			
ANR	5017990	SizeofExpression	sizeof ( w2 )		5017450	0					
ANR	5017991	Sizeof	sizeof		5017450	0					
ANR	5017992	SizeofOperand	w2		5017450	1					
ANR	5017993	PrimaryExpression	1		5017450	1					
ANR	5017994	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	149:4:3003:3026	5017450	4	True				
ANR	5017995	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5017450	0		=			
ANR	5017996	Identifier	ptr		5017450	0					
ANR	5017997	CallExpression	"strchr ( ptr , ',' )"		5017450	1					
ANR	5017998	Callee	strchr		5017450	0					
ANR	5017999	Identifier	strchr		5017450	0					
ANR	5018000	ArgumentList	ptr		5017450	1					
ANR	5018001	Argument	ptr		5017450	0					
ANR	5018002	Identifier	ptr		5017450	0					
ANR	5018003	Argument	"','"		5017450	1					
ANR	5018004	PrimaryExpression	"','"		5017450	0					
ANR	5018005	IfStatement	if ( ptr )		5017450	5					
ANR	5018006	Condition	ptr	150:8:3036:3038	5017450	0	True				
ANR	5018007	Identifier	ptr		5017450	0					
ANR	5018008	CompoundStatement		81:13:1576:1576	5017450	1					
ANR	5018009	ExpressionStatement	* ptr = '\\0'	151:5:3048:3059	5017450	0	True				
ANR	5018010	AssignmentExpression	* ptr = '\\0'		5017450	0		=			
ANR	5018011	UnaryOperationExpression	* ptr		5017450	0					
ANR	5018012	UnaryOperator	*		5017450	0					
ANR	5018013	Identifier	ptr		5017450	1					
ANR	5018014	PrimaryExpression	'\\0'		5017450	1					
ANR	5018015	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5017450	1					
ANR	5018016	ForInit	++ ptr ;	152:10:3071:3076	5017450	0	True				
ANR	5018017	UnaryExpression	++ ptr		5017450	0					
ANR	5018018	IncDec	++		5017450	0					
ANR	5018019	Identifier	ptr		5017450	1					
ANR	5018020	Condition	* ptr == ' '	152:17:3078:3088	5017450	1	True				
ANR	5018021	EqualityExpression	* ptr == ' '		5017450	0		==			
ANR	5018022	UnaryOperationExpression	* ptr		5017450	0					
ANR	5018023	UnaryOperator	*		5017450	0					
ANR	5018024	Identifier	ptr		5017450	1					
ANR	5018025	PrimaryExpression	' '		5017450	1					
ANR	5018026	PostIncDecOperationExpression	ptr ++	152:30:3091:3095	5017450	2	True				
ANR	5018027	Identifier	ptr		5017450	0					
ANR	5018028	IncDec	++		5017450	1					
ANR	5018029	CompoundStatement		83:37:1633:1633	5017450	3					
ANR	5018030	ExpressionStatement		153:6:3106:3106	5017450	0	True				
ANR	5018031	ExpressionStatement	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"	155:5:3120:3152	5017450	2	True				
ANR	5018032	CallExpression	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"		5017450	0					
ANR	5018033	Callee	strncpy		5017450	0					
ANR	5018034	Identifier	strncpy		5017450	0					
ANR	5018035	ArgumentList	w2		5017450	1					
ANR	5018036	Argument	w2		5017450	0					
ANR	5018037	Identifier	w2		5017450	0					
ANR	5018038	Argument	optr		5017450	1					
ANR	5018039	Identifier	optr		5017450	0					
ANR	5018040	Argument	sizeof ( w2 ) - 1		5017450	2					
ANR	5018041	AdditiveExpression	sizeof ( w2 ) - 1		5017450	0		-			
ANR	5018042	SizeofExpression	sizeof ( w2 )		5017450	0					
ANR	5018043	Sizeof	sizeof		5017450	0					
ANR	5018044	SizeofOperand	w2		5017450	1					
ANR	5018045	PrimaryExpression	1		5017450	1					
ANR	5018046	ExpressionStatement	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"	156:5:3159:3190	5017450	3	True				
ANR	5018047	CallExpression	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"		5017450	0					
ANR	5018048	Callee	strncpy		5017450	0					
ANR	5018049	Identifier	strncpy		5017450	0					
ANR	5018050	ArgumentList	w3		5017450	1					
ANR	5018051	Argument	w3		5017450	0					
ANR	5018052	Identifier	w3		5017450	0					
ANR	5018053	Argument	ptr		5017450	1					
ANR	5018054	Identifier	ptr		5017450	0					
ANR	5018055	Argument	sizeof ( w3 ) - 1		5017450	2					
ANR	5018056	AdditiveExpression	sizeof ( w3 ) - 1		5017450	0		-			
ANR	5018057	SizeofExpression	sizeof ( w3 )		5017450	0					
ANR	5018058	Sizeof	sizeof		5017450	0					
ANR	5018059	SizeofOperand	w3		5017450	1					
ANR	5018060	PrimaryExpression	1		5017450	1					
ANR	5018061	CompoundStatement		93:3:1791:1801	5017450	4					
ANR	5018062	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 } ;"	161:3:3214:3251	5017450	0	True				
ANR	5018063	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5017450	0					
ANR	5018064	IdentifierDeclType	const char * [ ]		5017450	0					
ANR	5018065	Identifier	wa		5017450	1					
ANR	5018066	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5017450	2		=			
ANR	5018067	Identifier	wa		5017450	0					
ANR	5018068	InitializerList	w0		5017450	1					
ANR	5018069	Identifier	w0		5017450	0					
ANR	5018070	Identifier	w1		5017450	1					
ANR	5018071	Identifier	w2		5017450	2					
ANR	5018072	Identifier	w3		5017450	3					
ANR	5018073	IdentifierDeclStatement	int nw = 0 ;	162:3:3256:3266	5017450	1	True				
ANR	5018074	IdentifierDecl	nw = 0		5017450	0					
ANR	5018075	IdentifierDeclType	int		5017450	0					
ANR	5018076	Identifier	nw		5017450	1					
ANR	5018077	AssignmentExpression	nw = 0		5017450	2		=			
ANR	5018078	Identifier	nw		5017450	0					
ANR	5018079	PrimaryExpression	0		5017450	1					
ANR	5018080	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5017450	2					
ANR	5018081	ForInit	i = 0 ;	163:8:3276:3279	5017450	0	True				
ANR	5018082	AssignmentExpression	i = 0		5017450	0		=			
ANR	5018083	Identifier	i		5017450	0					
ANR	5018084	PrimaryExpression	0		5017450	1					
ANR	5018085	Condition	i < 4	163:13:3281:3283	5017450	1	True				
ANR	5018086	RelationalExpression	i < 4		5017450	0		<			
ANR	5018087	Identifier	i		5017450	0					
ANR	5018088	PrimaryExpression	4		5017450	1					
ANR	5018089	PostIncDecOperationExpression	i ++	163:18:3286:3288	5017450	2	True				
ANR	5018090	Identifier	i		5017450	0					
ANR	5018091	IncDec	++		5017450	1					
ANR	5018092	CompoundStatement		94:23:1826:1826	5017450	3					
ANR	5018093	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5017450	0					
ANR	5018094	Condition	wa [ i ] [ 0 ] != '\\0'	164:8:3301:3316	5017450	0	True				
ANR	5018095	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5017450	0		!=			
ANR	5018096	ArrayIndexing	wa [ i ] [ 0 ]		5017450	0					
ANR	5018097	ArrayIndexing	wa [ i ]		5017450	0					
ANR	5018098	Identifier	wa		5017450	0					
ANR	5018099	Identifier	i		5017450	1					
ANR	5018100	PrimaryExpression	0		5017450	1					
ANR	5018101	PrimaryExpression	'\\0'		5017450	1					
ANR	5018102	CompoundStatement		95:26:1854:1854	5017450	1					
ANR	5018103	ExpressionStatement	nw ++	165:5:3326:3330	5017450	0	True				
ANR	5018104	PostIncDecOperationExpression	nw ++		5017450	0					
ANR	5018105	Identifier	nw		5017450	0					
ANR	5018106	IncDec	++		5017450	1					
ANR	5018107	ExpressionStatement	"replace ( nw , wa , str )"	168:3:3346:3367	5017450	3	True				
ANR	5018108	CallExpression	"replace ( nw , wa , str )"		5017450	0					
ANR	5018109	Callee	replace		5017450	0					
ANR	5018110	Identifier	replace		5017450	0					
ANR	5018111	ArgumentList	nw		5017450	1					
ANR	5018112	Argument	nw		5017450	0					
ANR	5018113	Identifier	nw		5017450	0					
ANR	5018114	Argument	wa		5017450	1					
ANR	5018115	Identifier	wa		5017450	0					
ANR	5018116	Argument	str		5017450	2					
ANR	5018117	Identifier	str		5017450	0					
ANR	5018118	ExpressionStatement	free ( buf )	171:1:3377:3387	5017450	20	True				
ANR	5018119	CallExpression	free ( buf )		5017450	0					
ANR	5018120	Callee	free		5017450	0					
ANR	5018121	Identifier	free		5017450	0					
ANR	5018122	ArgumentList	buf		5017450	1					
ANR	5018123	Argument	buf		5017450	0					
ANR	5018124	Identifier	buf		5017450	0					
ANR	5018125	ReturnStatement	return true ;	172:1:3390:3401	5017450	21	True				
ANR	5018126	Identifier	true		5017450	0					
ANR	5018127	ReturnType	static int		5017450	1					
ANR	5018128	Identifier	parse		5017450	2					
ANR	5018129	ParameterList	"RParse * p , const char * data , char * str"		5017450	3					
ANR	5018130	Parameter	RParse * p	70:17:1424:1432	5017450	0	True				
ANR	5018131	ParameterType	RParse *		5017450	0					
ANR	5018132	Identifier	p		5017450	1					
ANR	5018133	Parameter	const char * data	70:28:1435:1450	5017450	1	True				
ANR	5018134	ParameterType	const char *		5017450	0					
ANR	5018135	Identifier	data		5017450	1					
ANR	5018136	Parameter	char * str	70:46:1453:1461	5017450	2	True				
ANR	5018137	ParameterType	char *		5017450	0					
ANR	5018138	Identifier	str		5017450	1					
ANR	5018139	CFGEntryNode	ENTRY		5017450		True				
ANR	5018140	CFGExitNode	EXIT		5017450		True				
ANR	5018141	Symbol	* w3		5017450						
ANR	5018142	Symbol	* w2		5017450						
ANR	5018143	Symbol	* w1		5017450						
ANR	5018144	Symbol	data		5017450						
ANR	5018145	Symbol	num		5017450						
ANR	5018146	Symbol	strchr		5017450						
ANR	5018147	Symbol	nw		5017450						
ANR	5018148	Symbol	wa		5017450						
ANR	5018149	Symbol	strlen		5017450						
ANR	5018150	Symbol	* wa		5017450						
ANR	5018151	Symbol	* ptr		5017450						
ANR	5018152	Symbol	w0		5017450						
ANR	5018153	Symbol	w1		5017450						
ANR	5018154	Symbol	w2		5017450						
ANR	5018155	Symbol	w3		5017450						
ANR	5018156	Symbol	* w0		5017450						
ANR	5018157	Symbol	atoi		5017450						
ANR	5018158	Symbol	rest		5017450						
ANR	5018159	Symbol	* buf		5017450						
ANR	5018160	Symbol	* * i		5017450						
ANR	5018161	Symbol	false		5017450						
ANR	5018162	Symbol	i		5017450						
ANR	5018163	Symbol	optr		5017450						
ANR	5018164	Symbol	n		5017450						
ANR	5018165	Symbol	ptr		5017450						
ANR	5018166	Symbol	p		5017450						
ANR	5018167	Symbol	str		5017450						
ANR	5018168	Symbol	buf		5017450						
ANR	5018169	Symbol	* i		5017450						
ANR	5018170	Symbol	* strlen		5017450						
ANR	5018171	Symbol	* * wa		5017450						
ANR	5018172	Symbol	r_str_lchr		5017450						
ANR	5018173	Symbol	true		5017450						
ANR	5018174	Symbol	strdup		5017450						
ANR	5018175	DeclStmt									
ANR	5018176	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_att2intel
ANR	5018177	DeclStmt									
ANR	5018178	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
