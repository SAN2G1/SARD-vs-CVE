command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5053542	File	data/converged/CVE-2019-16718~_radare2/libr_search_old_xrefs.c								
ANR	5053543	DeclStmt									
ANR	5053544	Decl							ut32	ut32	base
ANR	5053545	DeclStmt									
ANR	5053546	Decl							ut32	ut32	delta
ANR	5053547	DeclStmt									
ANR	5053548	Decl							ut32	ut32	range
ANR	5053549	DeclStmt									
ANR	5053550	Decl							ut32	ut32	xylum
ANR	5053551	DeclStmt									
ANR	5053552	Decl							ut32	ut32	gamme
ANR	5053553	DeclStmt									
ANR	5053554	Decl							ut32	ut32	size
ANR	5053555	DeclStmt									
ANR	5053556	Decl							int	int	sysendian
ANR	5053557	DeclStmt									
ANR	5053558	Decl							int	int	endian
ANR	5053559	DeclStmt									
ANR	5053560	Decl							int	int	verbose
ANR	5053561	DeclStmt									
ANR	5053562	Decl							int	int	found
ANR	5053563	DeclStmt									
ANR	5053564	Decl							int	int	quite
ANR	5053565	DeclStmt									
ANR	5053566	Decl							int	int	arch
ANR	5053567	DeclStmt									
ANR	5053568	Decl							unsigned char	unsigned char *	ma
ANR	5053569	Function	show_usage	115:0:2750:3586							
ANR	5053570	FunctionDef	show_usage ()		5053569	0					
ANR	5053571	CompoundStatement		116:0:2774:3586	5053569	0					
ANR	5053572	Statement	printf	117:1:2777:2782	5053569	0	True				
ANR	5053573	Statement	(	117:7:2783:2783	5053569	1	True				
ANR	5053574	Statement	"""Usage: xrefs [-options] [file] [offset]\\n"""	118:1:2786:2828	5053569	2	True				
ANR	5053575	Statement	""" -v             Verbose mode\\n"""	119:1:2831:2862	5053569	3	True				
ANR	5053576	Statement	""" -V             Show version\\n"""	120:1:2865:2896	5053569	4	True				
ANR	5053577	Statement	""" -q             quite mode\\n"""	121:1:2899:2928	5053569	5	True				
ANR	5053578	Statement	""" -h             Show this helpy message\\n"""	122:1:2931:2973	5053569	6	True				
ANR	5053579	Statement	""" -e             Use big endian for offsets to search\\n"""	123:1:2976:3031	5053569	7	True				
ANR	5053580	Statement	""" -a [arch]      Architecture profile (fmi: help) (autodetects ELF and PE hdrs)\\n"""	124:1:3034:3115	5053569	8	True				
ANR	5053581	Statement	""" -b [address]   base address (0x8048000 f.ex)\\n"""	125:1:3118:3166	5053569	9	True				
ANR	5053582	Statement	""" -f [from]      start scanning from this offset (default 0)\\n"""	126:1:3169:3231	5053569	10	True				
ANR	5053583	Statement	""" -t [to]        limit address (default 99999999)\\n"""	127:1:3234:3285	5053569	11	True				
ANR	5053584	Statement	""" -r [range]     Range in bytes of allowed relative offsets\\n"""	128:1:3288:3349	5053569	12	True				
ANR	5053585	Statement	""" -s [size]      Size of offset (4 for intel, 3 for ppc, ...)\\n"""	129:1:3352:3415	5053569	13	True				
ANR	5053586	Statement	""" -d [offset]    Sets a negative delta offset as padding (default 1)\\n"""	130:1:3418:3488	5053569	14	True				
ANR	5053587	Statement	""" -X [offset]    Print out debugging information of a certain relative offset\\n"""	131:1:3491:3570	5053569	15	True				
ANR	5053588	Statement	)	131:81:3571:3571	5053569	16	True				
ANR	5053589	ExpressionStatement		131:82:3572:3572	5053569	17	True				
ANR	5053590	ReturnStatement	return 1 ;	133:1:3576:3584	5053569	18	True				
ANR	5053591	PrimaryExpression	1		5053569	0					
ANR	5053592	ReturnType	static int		5053569	1					
ANR	5053593	Identifier	show_usage		5053569	2					
ANR	5053594	ParameterList			5053569	3					
ANR	5053595	CFGEntryNode	ENTRY		5053569		True				
ANR	5053596	CFGExitNode	EXIT		5053569		True				
ANR	5053597	Function	file_size_fd	136:0:3589:3776							
ANR	5053598	FunctionDef	file_size_fd (int fd)		5053597	0					
ANR	5053599	CompoundStatement		137:0:3622:3776	5053597	0					
ANR	5053600	IdentifierDeclStatement	"ut32 curr = lseek ( fd , 0 , SEEK_CUR ) ;"	138:1:3625:3659	5053597	0	True				
ANR	5053601	IdentifierDecl	"curr = lseek ( fd , 0 , SEEK_CUR )"		5053597	0					
ANR	5053602	IdentifierDeclType	ut32		5053597	0					
ANR	5053603	Identifier	curr		5053597	1					
ANR	5053604	AssignmentExpression	"curr = lseek ( fd , 0 , SEEK_CUR )"		5053597	2		=			
ANR	5053605	Identifier	curr		5053597	0					
ANR	5053606	CallExpression	"lseek ( fd , 0 , SEEK_CUR )"		5053597	1					
ANR	5053607	Callee	lseek		5053597	0					
ANR	5053608	Identifier	lseek		5053597	0					
ANR	5053609	ArgumentList	fd		5053597	1					
ANR	5053610	Argument	fd		5053597	0					
ANR	5053611	Identifier	fd		5053597	0					
ANR	5053612	Argument	0		5053597	1					
ANR	5053613	PrimaryExpression	0		5053597	0					
ANR	5053614	Argument	SEEK_CUR		5053597	2					
ANR	5053615	Identifier	SEEK_CUR		5053597	0					
ANR	5053616	IdentifierDeclStatement	"ut32 size = lseek ( fd , 0 , SEEK_END ) ;"	139:1:3662:3696	5053597	1	True				
ANR	5053617	IdentifierDecl	"size = lseek ( fd , 0 , SEEK_END )"		5053597	0					
ANR	5053618	IdentifierDeclType	ut32		5053597	0					
ANR	5053619	Identifier	size		5053597	1					
ANR	5053620	AssignmentExpression	"size = lseek ( fd , 0 , SEEK_END )"		5053597	2		=			
ANR	5053621	Identifier	size		5053597	0					
ANR	5053622	CallExpression	"lseek ( fd , 0 , SEEK_END )"		5053597	1					
ANR	5053623	Callee	lseek		5053597	0					
ANR	5053624	Identifier	lseek		5053597	0					
ANR	5053625	ArgumentList	fd		5053597	1					
ANR	5053626	Argument	fd		5053597	0					
ANR	5053627	Identifier	fd		5053597	0					
ANR	5053628	Argument	0		5053597	1					
ANR	5053629	PrimaryExpression	0		5053597	0					
ANR	5053630	Argument	SEEK_END		5053597	2					
ANR	5053631	Identifier	SEEK_END		5053597	0					
ANR	5053632	ExpressionStatement	"lseek ( fd , curr , SEEK_SET )"	140:1:3734:3759	5053597	2	True				
ANR	5053633	CallExpression	"lseek ( fd , curr , SEEK_SET )"		5053597	0					
ANR	5053634	Callee	lseek		5053597	0					
ANR	5053635	Identifier	lseek		5053597	0					
ANR	5053636	ArgumentList	fd		5053597	1					
ANR	5053637	Argument	fd		5053597	0					
ANR	5053638	Identifier	fd		5053597	0					
ANR	5053639	Argument	curr		5053597	1					
ANR	5053640	Identifier	curr		5053597	0					
ANR	5053641	Argument	SEEK_SET		5053597	2					
ANR	5053642	Identifier	SEEK_SET		5053597	0					
ANR	5053643	ReturnStatement	return size ;	142:1:3763:3774	5053597	3	True				
ANR	5053644	Identifier	size		5053597	0					
ANR	5053645	ReturnType	static ut32		5053597	1					
ANR	5053646	Identifier	file_size_fd		5053597	2					
ANR	5053647	ParameterList	int fd		5053597	3					
ANR	5053648	Parameter	int fd	136:25:3614:3619	5053597	0	True				
ANR	5053649	ParameterType	int		5053597	0					
ANR	5053650	Identifier	fd		5053597	1					
ANR	5053651	CFGEntryNode	ENTRY		5053597		True				
ANR	5053652	CFGExitNode	EXIT		5053597		True				
ANR	5053653	Symbol	SEEK_SET		5053597						
ANR	5053654	Symbol	SEEK_CUR		5053597						
ANR	5053655	Symbol	lseek		5053597						
ANR	5053656	Symbol	size		5053597						
ANR	5053657	Symbol	curr		5053597						
ANR	5053658	Symbol	fd		5053597						
ANR	5053659	Symbol	SEEK_END		5053597						
ANR	5053660	Function	get_value32	146:0:3816:4130							
ANR	5053661	FunctionDef	get_value32 (const char * arg)		5053660	0					
ANR	5053662	CompoundStatement		147:0:3857:4130	5053660	0					
ANR	5053663	IdentifierDeclStatement	int i ;	148:8:3867:3872	5053660	0	True				
ANR	5053664	IdentifierDecl	i		5053660	0					
ANR	5053665	IdentifierDeclType	int		5053660	0					
ANR	5053666	Identifier	i		5053660	1					
ANR	5053667	IdentifierDeclStatement	ut32 ret ;	149:8:3882:3890	5053660	1	True				
ANR	5053668	IdentifierDecl	ret		5053660	0					
ANR	5053669	IdentifierDeclType	ut32		5053660	0					
ANR	5053670	Identifier	ret		5053660	1					
ANR	5053671	ForStatement	for ( i = 0 ; arg [ i ] == ' ' ; i ++ )		5053660	2					
ANR	5053672	ForInit	i = 0 ;	151:5:3898:3901	5053660	0	True				
ANR	5053673	AssignmentExpression	i = 0		5053660	0		=			
ANR	5053674	Identifier	i		5053660	0					
ANR	5053675	PrimaryExpression	0		5053660	1					
ANR	5053676	Condition	arg [ i ] == ' '	151:9:3902:3912	5053660	1	True				
ANR	5053677	EqualityExpression	arg [ i ] == ' '		5053660	0		==			
ANR	5053678	ArrayIndexing	arg [ i ]		5053660	0					
ANR	5053679	Identifier	arg		5053660	0					
ANR	5053680	Identifier	i		5053660	1					
ANR	5053681	PrimaryExpression	' '		5053660	1					
ANR	5053682	PostIncDecOperationExpression	i ++	151:21:3914:3916	5053660	2	True				
ANR	5053683	Identifier	i		5053660	0					
ANR	5053684	IncDec	++		5053660	1					
ANR	5053685	ExpressionStatement		151:25:3918:3918	5053660	3	True				
ANR	5053686	ForStatement	for ( ; arg [ i ] == '\\\\' ; i ++ )		5053660	3					
ANR	5053687	Condition	arg [ i ] == '\\\\'	152:6:3926:3937	5053660	0	True				
ANR	5053688	EqualityExpression	arg [ i ] == '\\\\'		5053660	0		==			
ANR	5053689	ArrayIndexing	arg [ i ]		5053660	0					
ANR	5053690	Identifier	arg		5053660	0					
ANR	5053691	Identifier	i		5053660	1					
ANR	5053692	PrimaryExpression	'\\\\'		5053660	1					
ANR	5053693	PostIncDecOperationExpression	i ++	152:19:3939:3941	5053660	1	True				
ANR	5053694	Identifier	i		5053660	0					
ANR	5053695	IncDec	++		5053660	1					
ANR	5053696	ExpressionStatement		152:23:3943:3943	5053660	2	True				
ANR	5053697	ExpressionStatement	i ++	152:25:3945:3948	5053660	4	True				
ANR	5053698	PostIncDecOperationExpression	i ++		5053660	0					
ANR	5053699	Identifier	i		5053660	0					
ANR	5053700	IncDec	++		5053660	1					
ANR	5053701	IfStatement	if ( arg [ i ] == 'x' )		5053660	5					
ANR	5053702	Condition	arg [ i ] == 'x'	154:12:3963:3975	5053660	0	True				
ANR	5053703	EqualityExpression	arg [ i ] == 'x'		5053660	0		==			
ANR	5053704	ArrayIndexing	arg [ i ]		5053660	0					
ANR	5053705	Identifier	arg		5053660	0					
ANR	5053706	Identifier	i		5053660	1					
ANR	5053707	PrimaryExpression	'x'		5053660	1					
ANR	5053708	Statement	sscanf	155:16:3994:3999	5053660	1	True				
ANR	5053709	ElseStatement	else		5053660	0					
ANR	5053710	Statement	sscanf	157:16:4068:4073	5053660	0	True				
ANR	5053711	Statement	(	155:22:4000:4000	5053660	6	True				
ANR	5053712	Statement	arg	155:23:4001:4003	5053660	7	True				
ANR	5053713	Statement	","	155:26:4004:4004	5053660	8	True				
ANR	5053714	Statement	"""0x%08"""	155:28:4006:4012	5053660	9	True				
ANR	5053715	Statement	PFMT64x	155:35:4013:4019	5053660	10	True				
ANR	5053716	Statement	""""""	155:42:4020:4021	5053660	11	True				
ANR	5053717	Statement	","	155:44:4022:4022	5053660	12	True				
ANR	5053718	Statement	(	155:46:4024:4024	5053660	13	True				
ANR	5053719	Statement	ut64	155:47:4025:4028	5053660	14	True				
ANR	5053720	Statement	*	155:52:4030:4030	5053660	15	True				
ANR	5053721	Statement	)	155:53:4031:4031	5053660	16	True				
ANR	5053722	Statement	&	155:54:4032:4032	5053660	17	True				
ANR	5053723	Statement	ret	155:55:4033:4035	5053660	18	True				
ANR	5053724	Statement	)	155:58:4036:4036	5053660	19	True				
ANR	5053725	ExpressionStatement		155:59:4037:4037	5053660	20	True				
ANR	5053726	Statement	(	157:22:4074:4074	5053660	21	True				
ANR	5053727	Statement	arg	157:23:4075:4077	5053660	22	True				
ANR	5053728	Statement	","	157:26:4078:4078	5053660	23	True				
ANR	5053729	Statement	"""%"""	157:28:4080:4082	5053660	24	True				
ANR	5053730	Statement	PFMT64d	157:31:4083:4089	5053660	25	True				
ANR	5053731	Statement	""""""	157:38:4090:4091	5053660	26	True				
ANR	5053732	Statement	","	157:40:4092:4092	5053660	27	True				
ANR	5053733	Statement	(	157:42:4094:4094	5053660	28	True				
ANR	5053734	Statement	ut64	157:43:4095:4098	5053660	29	True				
ANR	5053735	Statement	*	157:48:4100:4100	5053660	30	True				
ANR	5053736	Statement	)	157:49:4101:4101	5053660	31	True				
ANR	5053737	Statement	&	157:50:4102:4102	5053660	32	True				
ANR	5053738	Statement	ret	157:51:4103:4105	5053660	33	True				
ANR	5053739	Statement	)	157:54:4106:4106	5053660	34	True				
ANR	5053740	ExpressionStatement		157:55:4107:4107	5053660	35	True				
ANR	5053741	ReturnStatement	return ret ;	159:8:4118:4128	5053660	36	True				
ANR	5053742	Identifier	ret		5053660	0					
ANR	5053743	ReturnType	static ut32		5053660	1					
ANR	5053744	Identifier	get_value32		5053660	2					
ANR	5053745	ParameterList	const char * arg		5053660	3					
ANR	5053746	Parameter	const char * arg	146:24:3840:3854	5053660	0	True				
ANR	5053747	ParameterType	const char *		5053660	0					
ANR	5053748	Identifier	arg		5053660	1					
ANR	5053749	CFGEntryNode	ENTRY		5053660		True				
ANR	5053750	CFGExitNode	EXIT		5053660		True				
ANR	5053751	Symbol	ret		5053660						
ANR	5053752	Symbol	* i		5053660						
ANR	5053753	Symbol	arg		5053660						
ANR	5053754	Symbol	i		5053660						
ANR	5053755	Symbol	* arg		5053660						
ANR	5053756	Function	get_system_endian	162:0:4133:4216							
ANR	5053757	FunctionDef	get_system_endian ()		5053756	0					
ANR	5053758	CompoundStatement		163:0:4157:4216	5053756	0					
ANR	5053759	IdentifierDeclStatement	int a = 1 ;	164:1:4160:4171	5053756	0	True				
ANR	5053760	IdentifierDecl	a = 1		5053756	0					
ANR	5053761	IdentifierDeclType	int		5053756	0					
ANR	5053762	Identifier	a		5053756	1					
ANR	5053763	AssignmentExpression	a = 1		5053756	2		=			
ANR	5053764	Identifier	a		5053756	0					
ANR	5053765	PrimaryExpression	1		5053756	1					
ANR	5053766	IdentifierDeclStatement	char * b = ( char * ) & a ;	165:1:4174:4193	5053756	1	True				
ANR	5053767	IdentifierDecl	* b = ( char * ) & a		5053756	0					
ANR	5053768	IdentifierDeclType	char *		5053756	0					
ANR	5053769	Identifier	b		5053756	1					
ANR	5053770	AssignmentExpression	* b = ( char * ) & a		5053756	2		=			
ANR	5053771	Identifier	b		5053756	0					
ANR	5053772	CastExpression	( char * ) & a		5053756	1					
ANR	5053773	CastTarget	char *		5053756	0					
ANR	5053774	UnaryOperationExpression	& a		5053756	1					
ANR	5053775	UnaryOperator	&		5053756	0					
ANR	5053776	Identifier	a		5053756	1					
ANR	5053777	ReturnStatement	return ( int ) ( b [ 0 ] ) ;	166:1:4196:4214	5053756	2	True				
ANR	5053778	CastExpression	( int ) ( b [ 0 ] )		5053756	0					
ANR	5053779	CastTarget	int		5053756	0					
ANR	5053780	ArrayIndexing	b [ 0 ]		5053756	1					
ANR	5053781	Identifier	b		5053756	0					
ANR	5053782	PrimaryExpression	0		5053756	1					
ANR	5053783	ReturnType	int		5053756	1					
ANR	5053784	Identifier	get_system_endian		5053756	2					
ANR	5053785	ParameterList			5053756	3					
ANR	5053786	CFGEntryNode	ENTRY		5053756		True				
ANR	5053787	CFGExitNode	EXIT		5053756		True				
ANR	5053788	Symbol	a		5053756						
ANR	5053789	Symbol	b		5053756						
ANR	5053790	Symbol	& a		5053756						
ANR	5053791	Symbol	* b		5053756						
ANR	5053792	Function	set_arch_settings	169:0:4219:5800							
ANR	5053793	FunctionDef	set_arch_settings ()		5053792	0					
ANR	5053794	CompoundStatement		170:0:4243:5800	5053792	0					
ANR	5053795	SwitchStatement	switch ( arch )		5053792	0					
ANR	5053796	Condition	arch	171:8:4253:4256	5053792	0	True				
ANR	5053797	Identifier	arch		5053792	0					
ANR	5053798	CompoundStatement		2:14:15:15	5053792	1					
ANR	5053799	Label	case ARCH_PPC :	172:1:4262:4275	5053792	0	True				
ANR	5053800	Identifier	ARCH_PPC		5053792	0					
ANR	5053801	ExpressionStatement	gamme = 1	173:2:4279:4289	5053792	1	True				
ANR	5053802	AssignmentExpression	gamme = 1		5053792	0		=			
ANR	5053803	Identifier	gamme		5053792	0					
ANR	5053804	PrimaryExpression	1		5053792	1					
ANR	5053805	ExpressionStatement	delta = 1	174:2:4293:4303	5053792	2	True				
ANR	5053806	AssignmentExpression	delta = 1		5053792	0		=			
ANR	5053807	Identifier	delta		5053792	0					
ANR	5053808	PrimaryExpression	1		5053792	1					
ANR	5053809	ExpressionStatement	size = 3	175:2:4307:4317	5053792	3	True				
ANR	5053810	AssignmentExpression	size = 3		5053792	0		=			
ANR	5053811	Identifier	size		5053792	0					
ANR	5053812	PrimaryExpression	3		5053792	1					
ANR	5053813	BreakStatement	break ;	176:2:4321:4326	5053792	4	True				
ANR	5053814	Label	case ARCH_ARM :	177:1:4329:4342	5053792	5	True				
ANR	5053815	Identifier	ARCH_ARM		5053792	0					
ANR	5053816	ExpressionStatement	gamme = - 1	178:2:4346:4357	5053792	6	True				
ANR	5053817	AssignmentExpression	gamme = - 1		5053792	0		=			
ANR	5053818	Identifier	gamme		5053792	0					
ANR	5053819	UnaryOperationExpression	- 1		5053792	1					
ANR	5053820	UnaryOperator	-		5053792	0					
ANR	5053821	PrimaryExpression	1		5053792	1					
ANR	5053822	ExpressionStatement	delta = 1	179:2:4361:4371	5053792	7	True				
ANR	5053823	AssignmentExpression	delta = 1		5053792	0		=			
ANR	5053824	Identifier	delta		5053792	0					
ANR	5053825	PrimaryExpression	1		5053792	1					
ANR	5053826	ExpressionStatement	size = 3	180:2:4375:4385	5053792	8	True				
ANR	5053827	AssignmentExpression	size = 3		5053792	0		=			
ANR	5053828	Identifier	size		5053792	0					
ANR	5053829	PrimaryExpression	3		5053792	1					
ANR	5053830	BreakStatement	break ;	181:2:4389:4394	5053792	9	True				
ANR	5053831	Label	case ARCH_X86 :	182:1:4397:4410	5053792	10	True				
ANR	5053832	Identifier	ARCH_X86		5053792	0					
ANR	5053833	ExpressionStatement	gamme = 1	183:2:4414:4424	5053792	11	True				
ANR	5053834	AssignmentExpression	gamme = 1		5053792	0		=			
ANR	5053835	Identifier	gamme		5053792	0					
ANR	5053836	PrimaryExpression	1		5053792	1					
ANR	5053837	ExpressionStatement	delta = 0	184:2:4428:4438	5053792	12	True				
ANR	5053838	AssignmentExpression	delta = 0		5053792	0		=			
ANR	5053839	Identifier	delta		5053792	0					
ANR	5053840	PrimaryExpression	0		5053792	1					
ANR	5053841	ExpressionStatement	size = 4	185:2:4448:4458	5053792	13	True				
ANR	5053842	AssignmentExpression	size = 4		5053792	0		=			
ANR	5053843	Identifier	size		5053792	0					
ANR	5053844	PrimaryExpression	4		5053792	1					
ANR	5053845	BreakStatement	break ;	186:2:4462:4467	5053792	14	True				
ANR	5053846	Label	case ARCH_NULL :	187:1:4470:4484	5053792	15	True				
ANR	5053847	Identifier	ARCH_NULL		5053792	0					
ANR	5053848	IfStatement	"if ( ! memcmp ( ma , ""\\x7f\\x45\\x4c\\x46"" , 4 ) )"		5053792	16					
ANR	5053849	Condition	"! memcmp ( ma , ""\\x7f\\x45\\x4c\\x46"" , 4 )"	190:6:4533:4566	5053792	0	True				
ANR	5053850	UnaryOperationExpression	"! memcmp ( ma , ""\\x7f\\x45\\x4c\\x46"" , 4 )"		5053792	0					
ANR	5053851	UnaryOperator	!		5053792	0					
ANR	5053852	CallExpression	"memcmp ( ma , ""\\x7f\\x45\\x4c\\x46"" , 4 )"		5053792	1					
ANR	5053853	Callee	memcmp		5053792	0					
ANR	5053854	Identifier	memcmp		5053792	0					
ANR	5053855	ArgumentList	ma		5053792	1					
ANR	5053856	Argument	ma		5053792	0					
ANR	5053857	Identifier	ma		5053792	0					
ANR	5053858	Argument	"""\\x7f\\x45\\x4c\\x46"""		5053792	1					
ANR	5053859	PrimaryExpression	"""\\x7f\\x45\\x4c\\x46"""		5053792	0					
ANR	5053860	Argument	4		5053792	2					
ANR	5053861	PrimaryExpression	4		5053792	0					
ANR	5053862	CompoundStatement		22:3:330:365	5053792	1					
ANR	5053863	IdentifierDeclStatement	short ar = ( ma [ 0x12 ] << 8 ) + ma [ 0x13 ] ;	191:3:4574:4609	5053792	0	True				
ANR	5053864	IdentifierDecl	ar = ( ma [ 0x12 ] << 8 ) + ma [ 0x13 ]		5053792	0					
ANR	5053865	IdentifierDeclType	short		5053792	0					
ANR	5053866	Identifier	ar		5053792	1					
ANR	5053867	AssignmentExpression	ar = ( ma [ 0x12 ] << 8 ) + ma [ 0x13 ]		5053792	2		=			
ANR	5053868	Identifier	ar		5053792	0					
ANR	5053869	AdditiveExpression	( ma [ 0x12 ] << 8 ) + ma [ 0x13 ]		5053792	1		+			
ANR	5053870	ShiftExpression	ma [ 0x12 ] << 8		5053792	0		<<			
ANR	5053871	ArrayIndexing	ma [ 0x12 ]		5053792	0					
ANR	5053872	Identifier	ma		5053792	0					
ANR	5053873	PrimaryExpression	0x12		5053792	1					
ANR	5053874	PrimaryExpression	8		5053792	1					
ANR	5053875	ArrayIndexing	ma [ 0x13 ]		5053792	1					
ANR	5053876	Identifier	ma		5053792	0					
ANR	5053877	PrimaryExpression	0x13		5053792	1					
ANR	5053878	SwitchStatement	switch ( ar )		5053792	1					
ANR	5053879	Condition	ar	192:10:4621:4622	5053792	0	True				
ANR	5053880	Identifier	ar		5053792	0					
ANR	5053881	CompoundStatement		23:14:381:381	5053792	1					
ANR	5053882	Label	case 0x0300 :	193:3:4630:4641	5053792	0	True				
ANR	5053883	IfStatement	if ( endian == - 1 )		5053792	1					
ANR	5053884	Condition	endian == - 1	194:8:4651:4660	5053792	0	True				
ANR	5053885	EqualityExpression	endian == - 1		5053792	0		==			
ANR	5053886	Identifier	endian		5053792	0					
ANR	5053887	UnaryOperationExpression	- 1		5053792	1					
ANR	5053888	UnaryOperator	-		5053792	0					
ANR	5053889	PrimaryExpression	1		5053792	1					
ANR	5053890	ExpressionStatement	endian = 1	195:5:4668:4678	5053792	1	True				
ANR	5053891	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5053892	Identifier	endian		5053792	0					
ANR	5053893	PrimaryExpression	1		5053792	1					
ANR	5053894	IfStatement	if ( ! quite )		5053792	2					
ANR	5053895	Condition	! quite	196:8:4688:4693	5053792	0	True				
ANR	5053896	UnaryOperationExpression	! quite		5053792	0					
ANR	5053897	UnaryOperator	!		5053792	0					
ANR	5053898	Identifier	quite		5053792	1					
ANR	5053899	ExpressionStatement	"printf ( ""# -a x86\\n"" )"	197:5:4701:4721	5053792	1	True				
ANR	5053900	CallExpression	"printf ( ""# -a x86\\n"" )"		5053792	0					
ANR	5053901	Callee	printf		5053792	0					
ANR	5053902	Identifier	printf		5053792	0					
ANR	5053903	ArgumentList	"""# -a x86\\n"""		5053792	1					
ANR	5053904	Argument	"""# -a x86\\n"""		5053792	0					
ANR	5053905	PrimaryExpression	"""# -a x86\\n"""		5053792	0					
ANR	5053906	ExpressionStatement	arch = ARCH_X86	198:4:4727:4742	5053792	3	True				
ANR	5053907	AssignmentExpression	arch = ARCH_X86		5053792	0		=			
ANR	5053908	Identifier	arch		5053792	0					
ANR	5053909	Identifier	ARCH_X86		5053792	1					
ANR	5053910	ExpressionStatement	endian = 1	199:4:4748:4758	5053792	4	True				
ANR	5053911	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5053912	Identifier	endian		5053792	0					
ANR	5053913	PrimaryExpression	1		5053792	1					
ANR	5053914	ReturnStatement	return 1 ;	200:4:4764:4772	5053792	5	True				
ANR	5053915	PrimaryExpression	1		5053792	0					
ANR	5053916	Label	case 0x0014 :	201:3:4777:4788	5053792	6	True				
ANR	5053917	IfStatement	if ( endian == - 1 )		5053792	7					
ANR	5053918	Condition	endian == - 1	202:8:4798:4807	5053792	0	True				
ANR	5053919	EqualityExpression	endian == - 1		5053792	0		==			
ANR	5053920	Identifier	endian		5053792	0					
ANR	5053921	UnaryOperationExpression	- 1		5053792	1					
ANR	5053922	UnaryOperator	-		5053792	0					
ANR	5053923	PrimaryExpression	1		5053792	1					
ANR	5053924	ExpressionStatement	endian = 0	203:5:4815:4825	5053792	1	True				
ANR	5053925	AssignmentExpression	endian = 0		5053792	0		=			
ANR	5053926	Identifier	endian		5053792	0					
ANR	5053927	PrimaryExpression	0		5053792	1					
ANR	5053928	IfStatement	if ( ! quite )		5053792	8					
ANR	5053929	Condition	! quite	204:8:4835:4840	5053792	0	True				
ANR	5053930	UnaryOperationExpression	! quite		5053792	0					
ANR	5053931	UnaryOperator	!		5053792	0					
ANR	5053932	Identifier	quite		5053792	1					
ANR	5053933	ExpressionStatement	"printf ( ""# -a ppc\\n"" )"	205:4:4847:4867	5053792	1	True				
ANR	5053934	CallExpression	"printf ( ""# -a ppc\\n"" )"		5053792	0					
ANR	5053935	Callee	printf		5053792	0					
ANR	5053936	Identifier	printf		5053792	0					
ANR	5053937	ArgumentList	"""# -a ppc\\n"""		5053792	1					
ANR	5053938	Argument	"""# -a ppc\\n"""		5053792	0					
ANR	5053939	PrimaryExpression	"""# -a ppc\\n"""		5053792	0					
ANR	5053940	ExpressionStatement	arch = ARCH_PPC	206:4:4873:4888	5053792	9	True				
ANR	5053941	AssignmentExpression	arch = ARCH_PPC		5053792	0		=			
ANR	5053942	Identifier	arch		5053792	0					
ANR	5053943	Identifier	ARCH_PPC		5053792	1					
ANR	5053944	ReturnStatement	return 1 ;	207:4:4894:4902	5053792	10	True				
ANR	5053945	PrimaryExpression	1		5053792	0					
ANR	5053946	Label	case 0x2800 :	208:3:4907:4918	5053792	11	True				
ANR	5053947	IfStatement	if ( endian == - 1 )		5053792	12					
ANR	5053948	Condition	endian == - 1	209:8:4928:4937	5053792	0	True				
ANR	5053949	EqualityExpression	endian == - 1		5053792	0		==			
ANR	5053950	Identifier	endian		5053792	0					
ANR	5053951	UnaryOperationExpression	- 1		5053792	1					
ANR	5053952	UnaryOperator	-		5053792	0					
ANR	5053953	PrimaryExpression	1		5053792	1					
ANR	5053954	ExpressionStatement	endian = 1	210:5:4945:4955	5053792	1	True				
ANR	5053955	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5053956	Identifier	endian		5053792	0					
ANR	5053957	PrimaryExpression	1		5053792	1					
ANR	5053958	IfStatement	if ( ! quite )		5053792	13					
ANR	5053959	Condition	! quite	211:8:4965:4970	5053792	0	True				
ANR	5053960	UnaryOperationExpression	! quite		5053792	0					
ANR	5053961	UnaryOperator	!		5053792	0					
ANR	5053962	Identifier	quite		5053792	1					
ANR	5053963	ExpressionStatement	"printf ( ""# -a arm\\n"" )"	212:4:4977:4997	5053792	1	True				
ANR	5053964	CallExpression	"printf ( ""# -a arm\\n"" )"		5053792	0					
ANR	5053965	Callee	printf		5053792	0					
ANR	5053966	Identifier	printf		5053792	0					
ANR	5053967	ArgumentList	"""# -a arm\\n"""		5053792	1					
ANR	5053968	Argument	"""# -a arm\\n"""		5053792	0					
ANR	5053969	PrimaryExpression	"""# -a arm\\n"""		5053792	0					
ANR	5053970	ExpressionStatement	arch = ARCH_ARM	213:4:5003:5018	5053792	14	True				
ANR	5053971	AssignmentExpression	arch = ARCH_ARM		5053792	0		=			
ANR	5053972	Identifier	arch		5053792	0					
ANR	5053973	Identifier	ARCH_ARM		5053792	1					
ANR	5053974	ReturnStatement	return 1 ;	214:4:5024:5032	5053792	15	True				
ANR	5053975	PrimaryExpression	1		5053792	0					
ANR	5053976	Label	default :	215:3:5037:5044	5053792	16	True				
ANR	5053977	Identifier	default		5053792	0					
ANR	5053978	ExpressionStatement	"printf ( ""Unsupported architecture '%04x'.\\n"" , ar )"	216:4:5050:5098	5053792	17	True				
ANR	5053979	CallExpression	"printf ( ""Unsupported architecture '%04x'.\\n"" , ar )"		5053792	0					
ANR	5053980	Callee	printf		5053792	0					
ANR	5053981	Identifier	printf		5053792	0					
ANR	5053982	ArgumentList	"""Unsupported architecture '%04x'.\\n"""		5053792	1					
ANR	5053983	Argument	"""Unsupported architecture '%04x'.\\n"""		5053792	0					
ANR	5053984	PrimaryExpression	"""Unsupported architecture '%04x'.\\n"""		5053792	0					
ANR	5053985	Argument	ar		5053792	1					
ANR	5053986	Identifier	ar		5053792	0					
ANR	5053987	ExpressionStatement	exit ( 1 )	217:4:5104:5111	5053792	18	True				
ANR	5053988	CallExpression	exit ( 1 )		5053792	0					
ANR	5053989	Callee	exit		5053792	0					
ANR	5053990	Identifier	exit		5053792	0					
ANR	5053991	ArgumentList	1		5053792	1					
ANR	5053992	Argument	1		5053792	0					
ANR	5053993	PrimaryExpression	1		5053792	0					
ANR	5053994	ElseStatement	else		5053792	0					
ANR	5053995	IfStatement	"if ( ! memcmp ( ma , ""\\x4d\\x5a"" , 2 ) )"		5053792	0					
ANR	5053996	Condition	"! memcmp ( ma , ""\\x4d\\x5a"" , 2 )"	221:6:5141:5165	5053792	0	True				
ANR	5053997	UnaryOperationExpression	"! memcmp ( ma , ""\\x4d\\x5a"" , 2 )"		5053792	0					
ANR	5053998	UnaryOperator	!		5053792	0					
ANR	5053999	CallExpression	"memcmp ( ma , ""\\x4d\\x5a"" , 2 )"		5053792	1					
ANR	5054000	Callee	memcmp		5053792	0					
ANR	5054001	Identifier	memcmp		5053792	0					
ANR	5054002	ArgumentList	ma		5053792	1					
ANR	5054003	Argument	ma		5053792	0					
ANR	5054004	Identifier	ma		5053792	0					
ANR	5054005	Argument	"""\\x4d\\x5a"""		5053792	1					
ANR	5054006	PrimaryExpression	"""\\x4d\\x5a"""		5053792	0					
ANR	5054007	Argument	2		5053792	2					
ANR	5054008	PrimaryExpression	2		5053792	0					
ANR	5054009	CompoundStatement		53:3:929:958	5053792	1					
ANR	5054010	IdentifierDeclStatement	unsigned short off = ma [ 0x3c ] ;	222:3:5173:5202	5053792	0	True				
ANR	5054011	IdentifierDecl	off = ma [ 0x3c ]		5053792	0					
ANR	5054012	IdentifierDeclType	unsigned short		5053792	0					
ANR	5054013	Identifier	off		5053792	1					
ANR	5054014	AssignmentExpression	off = ma [ 0x3c ]		5053792	2		=			
ANR	5054015	Identifier	off		5053792	0					
ANR	5054016	ArrayIndexing	ma [ 0x3c ]		5053792	1					
ANR	5054017	Identifier	ma		5053792	0					
ANR	5054018	PrimaryExpression	0x3c		5053792	1					
ANR	5054019	IfStatement	"if ( ! memcmp ( ma + off , ""PE\\x00\\x00"" , 4 ) )"		5053792	1					
ANR	5054020	Condition	"! memcmp ( ma + off , ""PE\\x00\\x00"" , 4 )"	223:7:5211:5241	5053792	0	True				
ANR	5054021	UnaryOperationExpression	"! memcmp ( ma + off , ""PE\\x00\\x00"" , 4 )"		5053792	0					
ANR	5054022	UnaryOperator	!		5053792	0					
ANR	5054023	CallExpression	"memcmp ( ma + off , ""PE\\x00\\x00"" , 4 )"		5053792	1					
ANR	5054024	Callee	memcmp		5053792	0					
ANR	5054025	Identifier	memcmp		5053792	0					
ANR	5054026	ArgumentList	ma + off		5053792	1					
ANR	5054027	Argument	ma + off		5053792	0					
ANR	5054028	AdditiveExpression	ma + off		5053792	0		+			
ANR	5054029	Identifier	ma		5053792	0					
ANR	5054030	Identifier	off		5053792	1					
ANR	5054031	Argument	"""PE\\x00\\x00"""		5053792	1					
ANR	5054032	PrimaryExpression	"""PE\\x00\\x00"""		5053792	0					
ANR	5054033	Argument	4		5053792	2					
ANR	5054034	PrimaryExpression	4		5053792	0					
ANR	5054035	CompoundStatement		55:4:1006:1050	5053792	1					
ANR	5054036	IdentifierDeclStatement	unsigned short ar = ( ma [ off + 4 ] << 8 ) + ma [ off + 5 ] ;	224:4:5250:5294	5053792	0	True				
ANR	5054037	IdentifierDecl	ar = ( ma [ off + 4 ] << 8 ) + ma [ off + 5 ]		5053792	0					
ANR	5054038	IdentifierDeclType	unsigned short		5053792	0					
ANR	5054039	Identifier	ar		5053792	1					
ANR	5054040	AssignmentExpression	ar = ( ma [ off + 4 ] << 8 ) + ma [ off + 5 ]		5053792	2		=			
ANR	5054041	Identifier	ar		5053792	0					
ANR	5054042	AdditiveExpression	( ma [ off + 4 ] << 8 ) + ma [ off + 5 ]		5053792	1		+			
ANR	5054043	ShiftExpression	ma [ off + 4 ] << 8		5053792	0		<<			
ANR	5054044	ArrayIndexing	ma [ off + 4 ]		5053792	0					
ANR	5054045	Identifier	ma		5053792	0					
ANR	5054046	AdditiveExpression	off + 4		5053792	1		+			
ANR	5054047	Identifier	off		5053792	0					
ANR	5054048	PrimaryExpression	4		5053792	1					
ANR	5054049	PrimaryExpression	8		5053792	1					
ANR	5054050	ArrayIndexing	ma [ off + 5 ]		5053792	1					
ANR	5054051	Identifier	ma		5053792	0					
ANR	5054052	AdditiveExpression	off + 5		5053792	1		+			
ANR	5054053	Identifier	off		5053792	0					
ANR	5054054	PrimaryExpression	5		5053792	1					
ANR	5054055	SwitchStatement	switch ( ar )		5053792	1					
ANR	5054056	Condition	ar	225:11:5307:5308	5053792	0	True				
ANR	5054057	Identifier	ar		5053792	0					
ANR	5054058	CompoundStatement		56:15:1067:1067	5053792	1					
ANR	5054059	Label	case 0x4c01 :	226:4:5317:5328	5053792	0	True				
ANR	5054060	IfStatement	if ( endian == - 1 )		5053792	1					
ANR	5054061	Condition	endian == - 1	227:9:5346:5355	5053792	0	True				
ANR	5054062	EqualityExpression	endian == - 1		5053792	0		==			
ANR	5054063	Identifier	endian		5053792	0					
ANR	5054064	UnaryOperationExpression	- 1		5053792	1					
ANR	5054065	UnaryOperator	-		5053792	0					
ANR	5054066	PrimaryExpression	1		5053792	1					
ANR	5054067	ExpressionStatement	endian = 1	228:6:5364:5374	5053792	1	True				
ANR	5054068	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5054069	Identifier	endian		5053792	0					
ANR	5054070	PrimaryExpression	1		5053792	1					
ANR	5054071	ExpressionStatement	"printf ( ""# -a x86\\n"" )"	229:5:5381:5401	5053792	2	True				
ANR	5054072	CallExpression	"printf ( ""# -a x86\\n"" )"		5053792	0					
ANR	5054073	Callee	printf		5053792	0					
ANR	5054074	Identifier	printf		5053792	0					
ANR	5054075	ArgumentList	"""# -a x86\\n"""		5053792	1					
ANR	5054076	Argument	"""# -a x86\\n"""		5053792	0					
ANR	5054077	PrimaryExpression	"""# -a x86\\n"""		5053792	0					
ANR	5054078	ExpressionStatement	arch = ARCH_X86	230:5:5408:5423	5053792	3	True				
ANR	5054079	AssignmentExpression	arch = ARCH_X86		5053792	0		=			
ANR	5054080	Identifier	arch		5053792	0					
ANR	5054081	Identifier	ARCH_X86		5053792	1					
ANR	5054082	ExpressionStatement	endian = 1	231:5:5430:5440	5053792	4	True				
ANR	5054083	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5054084	Identifier	endian		5053792	0					
ANR	5054085	PrimaryExpression	1		5053792	1					
ANR	5054086	ReturnStatement	return 1 ;	232:5:5447:5455	5053792	5	True				
ANR	5054087	PrimaryExpression	1		5053792	0					
ANR	5054088	Label	case 0xc001 :	233:4:5461:5472	5053792	6	True				
ANR	5054089	IfStatement	if ( endian == - 1 )		5053792	7					
ANR	5054090	Condition	endian == - 1	234:9:5490:5499	5053792	0	True				
ANR	5054091	EqualityExpression	endian == - 1		5053792	0		==			
ANR	5054092	Identifier	endian		5053792	0					
ANR	5054093	UnaryOperationExpression	- 1		5053792	1					
ANR	5054094	UnaryOperator	-		5053792	0					
ANR	5054095	PrimaryExpression	1		5053792	1					
ANR	5054096	ExpressionStatement	endian = 1	235:6:5508:5518	5053792	1	True				
ANR	5054097	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5054098	Identifier	endian		5053792	0					
ANR	5054099	PrimaryExpression	1		5053792	1					
ANR	5054100	ExpressionStatement	"printf ( ""# -a arm\\n"" )"	236:5:5525:5545	5053792	8	True				
ANR	5054101	CallExpression	"printf ( ""# -a arm\\n"" )"		5053792	0					
ANR	5054102	Callee	printf		5053792	0					
ANR	5054103	Identifier	printf		5053792	0					
ANR	5054104	ArgumentList	"""# -a arm\\n"""		5053792	1					
ANR	5054105	Argument	"""# -a arm\\n"""		5053792	0					
ANR	5054106	PrimaryExpression	"""# -a arm\\n"""		5053792	0					
ANR	5054107	ExpressionStatement	arch = ARCH_ARM	237:5:5552:5567	5053792	9	True				
ANR	5054108	AssignmentExpression	arch = ARCH_ARM		5053792	0		=			
ANR	5054109	Identifier	arch		5053792	0					
ANR	5054110	Identifier	ARCH_ARM		5053792	1					
ANR	5054111	ExpressionStatement	endian = 1	238:5:5574:5584	5053792	10	True				
ANR	5054112	AssignmentExpression	endian = 1		5053792	0		=			
ANR	5054113	Identifier	endian		5053792	0					
ANR	5054114	PrimaryExpression	1		5053792	1					
ANR	5054115	ReturnStatement	return 1 ;	239:5:5591:5599	5053792	11	True				
ANR	5054116	PrimaryExpression	1		5053792	0					
ANR	5054117	Label	default :	240:4:5605:5612	5053792	12	True				
ANR	5054118	Identifier	default		5053792	0					
ANR	5054119	ExpressionStatement	"fprintf ( stderr , ""Unknown architecture.\\n"" )"	241:5:5619:5661	5053792	13	True				
ANR	5054120	CallExpression	"fprintf ( stderr , ""Unknown architecture.\\n"" )"		5053792	0					
ANR	5054121	Callee	fprintf		5053792	0					
ANR	5054122	Identifier	fprintf		5053792	0					
ANR	5054123	ArgumentList	stderr		5053792	1					
ANR	5054124	Argument	stderr		5053792	0					
ANR	5054125	Identifier	stderr		5053792	0					
ANR	5054126	Argument	"""Unknown architecture.\\n"""		5053792	1					
ANR	5054127	PrimaryExpression	"""Unknown architecture.\\n"""		5053792	0					
ANR	5054128	BreakStatement	break ;	242:5:5668:5673	5053792	14	True				
ANR	5054129	ElseStatement	else		5053792	0					
ANR	5054130	CompoundStatement		76:9:1451:1451	5053792	0					
ANR	5054131	ExpressionStatement	"fprintf ( stderr , ""Plz. gimmie an architecture. (xrefs -a [arch])\\n"" )"	246:3:5700:5767	5053792	0	True				
ANR	5054132	CallExpression	"fprintf ( stderr , ""Plz. gimmie an architecture. (xrefs -a [arch])\\n"" )"		5053792	0					
ANR	5054133	Callee	fprintf		5053792	0					
ANR	5054134	Identifier	fprintf		5053792	0					
ANR	5054135	ArgumentList	stderr		5053792	1					
ANR	5054136	Argument	stderr		5053792	0					
ANR	5054137	Identifier	stderr		5053792	0					
ANR	5054138	Argument	"""Plz. gimmie an architecture. (xrefs -a [arch])\\n"""		5053792	1					
ANR	5054139	PrimaryExpression	"""Plz. gimmie an architecture. (xrefs -a [arch])\\n"""		5053792	0					
ANR	5054140	ExpressionStatement	exit ( 1 )	247:3:5772:5779	5053792	1	True				
ANR	5054141	CallExpression	exit ( 1 )		5053792	0					
ANR	5054142	Callee	exit		5053792	0					
ANR	5054143	Identifier	exit		5053792	0					
ANR	5054144	ArgumentList	1		5053792	1					
ANR	5054145	Argument	1		5053792	0					
ANR	5054146	PrimaryExpression	1		5053792	0					
ANR	5054147	ReturnStatement	return 0 ;	251:1:5790:5798	5053792	1	True				
ANR	5054148	PrimaryExpression	0		5053792	0					
ANR	5054149	ReturnType	int		5053792	1					
ANR	5054150	Identifier	set_arch_settings		5053792	2					
ANR	5054151	ParameterList			5053792	3					
ANR	5054152	CFGEntryNode	ENTRY		5053792		True				
ANR	5054153	CFGExitNode	EXIT		5053792		True				
ANR	5054154	Symbol	delta		5053792						
ANR	5054155	Symbol	stderr		5053792						
ANR	5054156	Symbol	endian		5053792						
ANR	5054157	Symbol	ARCH_X86		5053792						
ANR	5054158	Symbol	off		5053792						
ANR	5054159	Symbol	ar		5053792						
ANR	5054160	Symbol	ARCH_ARM		5053792						
ANR	5054161	Symbol	gamme		5053792						
ANR	5054162	Symbol	memcmp		5053792						
ANR	5054163	Symbol	size		5053792						
ANR	5054164	Symbol	ma		5053792						
ANR	5054165	Symbol	* ma		5053792						
ANR	5054166	Symbol	quite		5053792						
ANR	5054167	Symbol	ARCH_PPC		5053792						
ANR	5054168	Symbol	* off		5053792						
ANR	5054169	Symbol	arch		5053792						
ANR	5054170	Function	main	255:0:5810:10464							
ANR	5054171	FunctionDef	"main (int argc , char * * argv)"		5054170	0					
ANR	5054172	CompoundStatement		256:0:5842:10464	5054170	0					
ANR	5054173	IdentifierDeclStatement	"ut64 i , c , src ;"	257:1:5845:5859	5054170	0	True				
ANR	5054174	IdentifierDecl	i		5054170	0					
ANR	5054175	IdentifierDeclType	ut64		5054170	0					
ANR	5054176	Identifier	i		5054170	1					
ANR	5054177	IdentifierDecl	c		5054170	1					
ANR	5054178	IdentifierDeclType	ut64		5054170	0					
ANR	5054179	Identifier	c		5054170	1					
ANR	5054180	IdentifierDecl	src		5054170	2					
ANR	5054181	IdentifierDeclType	ut64		5054170	0					
ANR	5054182	Identifier	src		5054170	1					
ANR	5054183	IdentifierDeclStatement	ut64 offset = 0 ;	258:1:5862:5877	5054170	1	True				
ANR	5054184	IdentifierDecl	offset = 0		5054170	0					
ANR	5054185	IdentifierDeclType	ut64		5054170	0					
ANR	5054186	Identifier	offset		5054170	1					
ANR	5054187	AssignmentExpression	offset = 0		5054170	2		=			
ANR	5054188	Identifier	offset		5054170	0					
ANR	5054189	PrimaryExpression	0		5054170	1					
ANR	5054190	IdentifierDeclStatement	"ut64 from = 1 , to = INT_MAX ;"	259:1:5880:5918	5054170	2	True				
ANR	5054191	IdentifierDecl	from = 1		5054170	0					
ANR	5054192	IdentifierDeclType	ut64		5054170	0					
ANR	5054193	Identifier	from		5054170	1					
ANR	5054194	AssignmentExpression	from = 1		5054170	2		=			
ANR	5054195	Identifier	from		5054170	0					
ANR	5054196	PrimaryExpression	1		5054170	1					
ANR	5054197	IdentifierDecl	to = INT_MAX		5054170	1					
ANR	5054198	IdentifierDeclType	ut64		5054170	0					
ANR	5054199	Identifier	to		5054170	1					
ANR	5054200	AssignmentExpression	to = INT_MAX		5054170	2		=			
ANR	5054201	Identifier	INT_MAX		5054170	0					
ANR	5054202	Identifier	INT_MAX		5054170	1					
ANR	5054203	IdentifierDeclStatement	ut64 sa ;	261:1:5921:5928	5054170	3	True				
ANR	5054204	IdentifierDecl	sa		5054170	0					
ANR	5054205	IdentifierDeclType	ut64		5054170	0					
ANR	5054206	Identifier	sa		5054170	1					
ANR	5054207	IfStatement	if ( argc == 2 )		5054170	4					
ANR	5054208	Condition	argc == 2	263:5:5936:5942	5054170	0	True				
ANR	5054209	EqualityExpression	argc == 2		5054170	0		==			
ANR	5054210	Identifier	argc		5054170	0					
ANR	5054211	PrimaryExpression	2		5054170	1					
ANR	5054212	IfStatement	"if ( ! strcmp ( argv [ 1 ] , ""-V"" ) )"		5054170	1					
ANR	5054213	Condition	"! strcmp ( argv [ 1 ] , ""-V"" )"	264:5:5950:5970	5054170	0	True				
ANR	5054214	UnaryOperationExpression	"! strcmp ( argv [ 1 ] , ""-V"" )"		5054170	0					
ANR	5054215	UnaryOperator	!		5054170	0					
ANR	5054216	CallExpression	"strcmp ( argv [ 1 ] , ""-V"" )"		5054170	1					
ANR	5054217	Callee	strcmp		5054170	0					
ANR	5054218	Identifier	strcmp		5054170	0					
ANR	5054219	ArgumentList	argv [ 1 ]		5054170	1					
ANR	5054220	Argument	argv [ 1 ]		5054170	0					
ANR	5054221	ArrayIndexing	argv [ 1 ]		5054170	0					
ANR	5054222	Identifier	argv		5054170	0					
ANR	5054223	PrimaryExpression	1		5054170	1					
ANR	5054224	Argument	"""-V"""		5054170	1					
ANR	5054225	PrimaryExpression	"""-V"""		5054170	0					
ANR	5054226	CompoundStatement		9:28:130:130	5054170	1					
ANR	5054227	ExpressionStatement	"printf ( ""%s\\n"" , VERSION )"	265:2:5977:6000	5054170	0	True				
ANR	5054228	CallExpression	"printf ( ""%s\\n"" , VERSION )"		5054170	0					
ANR	5054229	Callee	printf		5054170	0					
ANR	5054230	Identifier	printf		5054170	0					
ANR	5054231	ArgumentList	"""%s\\n"""		5054170	1					
ANR	5054232	Argument	"""%s\\n"""		5054170	0					
ANR	5054233	PrimaryExpression	"""%s\\n"""		5054170	0					
ANR	5054234	Argument	VERSION		5054170	1					
ANR	5054235	Identifier	VERSION		5054170	0					
ANR	5054236	ReturnStatement	return 0 ;	266:2:6004:6012	5054170	1	True				
ANR	5054237	PrimaryExpression	0		5054170	0					
ANR	5054238	IfStatement	if ( argc < 3 )		5054170	5					
ANR	5054239	Condition	argc < 3	269:5:6023:6028	5054170	0	True				
ANR	5054240	RelationalExpression	argc < 3		5054170	0		<			
ANR	5054241	Identifier	argc		5054170	0					
ANR	5054242	PrimaryExpression	3		5054170	1					
ANR	5054243	ReturnStatement	return show_usage ( ) ;	270:2:6033:6052	5054170	1	True				
ANR	5054244	CallExpression	show_usage ( )		5054170	0					
ANR	5054245	Callee	show_usage		5054170	0					
ANR	5054246	Identifier	show_usage		5054170	0					
ANR	5054247	ArgumentList			5054170	1					
ANR	5054248	WhileStatement	"while ( ( c = getopt ( argc , argv , ""qa:d:hves:f:t:r:X:b:"" ) ) != - 1 )"		5054170	6					
ANR	5054249	Condition	"( c = getopt ( argc , argv , ""qa:d:hves:f:t:r:X:b:"" ) ) != - 1"	273:8:6086:6139	5054170	0	True				
ANR	5054250	EqualityExpression	"( c = getopt ( argc , argv , ""qa:d:hves:f:t:r:X:b:"" ) ) != - 1"		5054170	0		!=			
ANR	5054251	AssignmentExpression	"c = getopt ( argc , argv , ""qa:d:hves:f:t:r:X:b:"" )"		5054170	0		=			
ANR	5054252	Identifier	c		5054170	0					
ANR	5054253	CallExpression	"getopt ( argc , argv , ""qa:d:hves:f:t:r:X:b:"" )"		5054170	1					
ANR	5054254	Callee	getopt		5054170	0					
ANR	5054255	Identifier	getopt		5054170	0					
ANR	5054256	ArgumentList	argc		5054170	1					
ANR	5054257	Argument	argc		5054170	0					
ANR	5054258	Identifier	argc		5054170	0					
ANR	5054259	Argument	argv		5054170	1					
ANR	5054260	Identifier	argv		5054170	0					
ANR	5054261	Argument	"""qa:d:hves:f:t:r:X:b:"""		5054170	2					
ANR	5054262	PrimaryExpression	"""qa:d:hves:f:t:r:X:b:"""		5054170	0					
ANR	5054263	UnaryOperationExpression	- 1		5054170	1					
ANR	5054264	UnaryOperator	-		5054170	0					
ANR	5054265	PrimaryExpression	1		5054170	1					
ANR	5054266	CompoundStatement		18:64:299:299	5054170	1					
ANR	5054267	SwitchStatement	switch ( c )		5054170	0					
ANR	5054268	Condition	c	274:10:6154:6154	5054170	0	True				
ANR	5054269	Identifier	c		5054170	0					
ANR	5054270	CompoundStatement		19:14:315:315	5054170	1					
ANR	5054271	Label	case 'q' :	275:2:6162:6170	5054170	0	True				
ANR	5054272	ExpressionStatement	quite = 1	276:3:6175:6184	5054170	1	True				
ANR	5054273	AssignmentExpression	quite = 1		5054170	0		=			
ANR	5054274	Identifier	quite		5054170	0					
ANR	5054275	PrimaryExpression	1		5054170	1					
ANR	5054276	BreakStatement	break ;	277:3:6189:6194	5054170	2	True				
ANR	5054277	Label	case 'a' :	278:2:6198:6206	5054170	3	True				
ANR	5054278	IfStatement	"if ( ! strcmp ( optarg , ""intel"" ) )"		5054170	4					
ANR	5054279	Condition	"! strcmp ( optarg , ""intel"" )"	279:7:6215:6238	5054170	0	True				
ANR	5054280	UnaryOperationExpression	"! strcmp ( optarg , ""intel"" )"		5054170	0					
ANR	5054281	UnaryOperator	!		5054170	0					
ANR	5054282	CallExpression	"strcmp ( optarg , ""intel"" )"		5054170	1					
ANR	5054283	Callee	strcmp		5054170	0					
ANR	5054284	Identifier	strcmp		5054170	0					
ANR	5054285	ArgumentList	optarg		5054170	1					
ANR	5054286	Argument	optarg		5054170	0					
ANR	5054287	Identifier	optarg		5054170	0					
ANR	5054288	Argument	"""intel"""		5054170	1					
ANR	5054289	PrimaryExpression	"""intel"""		5054170	0					
ANR	5054290	ExpressionStatement	arch = ARCH_X86	280:4:6245:6260	5054170	1	True				
ANR	5054291	AssignmentExpression	arch = ARCH_X86		5054170	0		=			
ANR	5054292	Identifier	arch		5054170	0					
ANR	5054293	Identifier	ARCH_X86		5054170	1					
ANR	5054294	ElseStatement	else		5054170	0					
ANR	5054295	IfStatement	"if ( ! strcmp ( optarg , ""x86"" ) )"		5054170	0					
ANR	5054296	Condition	"! strcmp ( optarg , ""x86"" )"	282:7:6277:6298	5054170	0	True				
ANR	5054297	UnaryOperationExpression	"! strcmp ( optarg , ""x86"" )"		5054170	0					
ANR	5054298	UnaryOperator	!		5054170	0					
ANR	5054299	CallExpression	"strcmp ( optarg , ""x86"" )"		5054170	1					
ANR	5054300	Callee	strcmp		5054170	0					
ANR	5054301	Identifier	strcmp		5054170	0					
ANR	5054302	ArgumentList	optarg		5054170	1					
ANR	5054303	Argument	optarg		5054170	0					
ANR	5054304	Identifier	optarg		5054170	0					
ANR	5054305	Argument	"""x86"""		5054170	1					
ANR	5054306	PrimaryExpression	"""x86"""		5054170	0					
ANR	5054307	ExpressionStatement	arch = ARCH_X86	283:4:6305:6320	5054170	1	True				
ANR	5054308	AssignmentExpression	arch = ARCH_X86		5054170	0		=			
ANR	5054309	Identifier	arch		5054170	0					
ANR	5054310	Identifier	ARCH_X86		5054170	1					
ANR	5054311	ElseStatement	else		5054170	0					
ANR	5054312	IfStatement	"if ( ! strcmp ( optarg , ""arm"" ) )"		5054170	0					
ANR	5054313	Condition	"! strcmp ( optarg , ""arm"" )"	285:7:6337:6358	5054170	0	True				
ANR	5054314	UnaryOperationExpression	"! strcmp ( optarg , ""arm"" )"		5054170	0					
ANR	5054315	UnaryOperator	!		5054170	0					
ANR	5054316	CallExpression	"strcmp ( optarg , ""arm"" )"		5054170	1					
ANR	5054317	Callee	strcmp		5054170	0					
ANR	5054318	Identifier	strcmp		5054170	0					
ANR	5054319	ArgumentList	optarg		5054170	1					
ANR	5054320	Argument	optarg		5054170	0					
ANR	5054321	Identifier	optarg		5054170	0					
ANR	5054322	Argument	"""arm"""		5054170	1					
ANR	5054323	PrimaryExpression	"""arm"""		5054170	0					
ANR	5054324	ExpressionStatement	arch = ARCH_ARM	286:4:6365:6380	5054170	1	True				
ANR	5054325	AssignmentExpression	arch = ARCH_ARM		5054170	0		=			
ANR	5054326	Identifier	arch		5054170	0					
ANR	5054327	Identifier	ARCH_ARM		5054170	1					
ANR	5054328	ElseStatement	else		5054170	0					
ANR	5054329	IfStatement	"if ( ! strcmp ( optarg , ""ppc"" ) )"		5054170	0					
ANR	5054330	Condition	"! strcmp ( optarg , ""ppc"" )"	288:7:6397:6418	5054170	0	True				
ANR	5054331	UnaryOperationExpression	"! strcmp ( optarg , ""ppc"" )"		5054170	0					
ANR	5054332	UnaryOperator	!		5054170	0					
ANR	5054333	CallExpression	"strcmp ( optarg , ""ppc"" )"		5054170	1					
ANR	5054334	Callee	strcmp		5054170	0					
ANR	5054335	Identifier	strcmp		5054170	0					
ANR	5054336	ArgumentList	optarg		5054170	1					
ANR	5054337	Argument	optarg		5054170	0					
ANR	5054338	Identifier	optarg		5054170	0					
ANR	5054339	Argument	"""ppc"""		5054170	1					
ANR	5054340	PrimaryExpression	"""ppc"""		5054170	0					
ANR	5054341	CompoundStatement		33:31:578:578	5054170	1					
ANR	5054342	ExpressionStatement	arch = ARCH_PPC	289:4:6427:6442	5054170	0	True				
ANR	5054343	AssignmentExpression	arch = ARCH_PPC		5054170	0		=			
ANR	5054344	Identifier	arch		5054170	0					
ANR	5054345	Identifier	ARCH_PPC		5054170	1					
ANR	5054346	ElseStatement	else		5054170	0					
ANR	5054347	CompoundStatement		35:10:611:611	5054170	0					
ANR	5054348	ExpressionStatement	"printf ( ""arm ppc x86\\n"" )"	291:4:6460:6483	5054170	0	True				
ANR	5054349	CallExpression	"printf ( ""arm ppc x86\\n"" )"		5054170	0					
ANR	5054350	Callee	printf		5054170	0					
ANR	5054351	Identifier	printf		5054170	0					
ANR	5054352	ArgumentList	"""arm ppc x86\\n"""		5054170	1					
ANR	5054353	Argument	"""arm ppc x86\\n"""		5054170	0					
ANR	5054354	PrimaryExpression	"""arm ppc x86\\n"""		5054170	0					
ANR	5054355	ReturnStatement	return 1 ;	292:4:6489:6497	5054170	1	True				
ANR	5054356	PrimaryExpression	1		5054170	0					
ANR	5054357	BreakStatement	break ;	294:3:6507:6512	5054170	5	True				
ANR	5054358	Label	case 'b' :	295:2:6516:6524	5054170	6	True				
ANR	5054359	ExpressionStatement	base = get_value32 ( optarg )	296:3:6529:6555	5054170	7	True				
ANR	5054360	AssignmentExpression	base = get_value32 ( optarg )		5054170	0		=			
ANR	5054361	Identifier	base		5054170	0					
ANR	5054362	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054363	Callee	get_value32		5054170	0					
ANR	5054364	Identifier	get_value32		5054170	0					
ANR	5054365	ArgumentList	optarg		5054170	1					
ANR	5054366	Argument	optarg		5054170	0					
ANR	5054367	Identifier	optarg		5054170	0					
ANR	5054368	BreakStatement	break ;	297:3:6560:6565	5054170	8	True				
ANR	5054369	Label	case 'd' :	298:2:6569:6577	5054170	9	True				
ANR	5054370	ExpressionStatement	delta = get_value32 ( optarg )	299:3:6582:6609	5054170	10	True				
ANR	5054371	AssignmentExpression	delta = get_value32 ( optarg )		5054170	0		=			
ANR	5054372	Identifier	delta		5054170	0					
ANR	5054373	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054374	Callee	get_value32		5054170	0					
ANR	5054375	Identifier	get_value32		5054170	0					
ANR	5054376	ArgumentList	optarg		5054170	1					
ANR	5054377	Argument	optarg		5054170	0					
ANR	5054378	Identifier	optarg		5054170	0					
ANR	5054379	BreakStatement	break ;	300:3:6614:6619	5054170	11	True				
ANR	5054380	Label	case 'X' :	301:2:6623:6631	5054170	12	True				
ANR	5054381	ExpressionStatement	xylum = get_value32 ( optarg )	302:3:6636:6663	5054170	13	True				
ANR	5054382	AssignmentExpression	xylum = get_value32 ( optarg )		5054170	0		=			
ANR	5054383	Identifier	xylum		5054170	0					
ANR	5054384	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054385	Callee	get_value32		5054170	0					
ANR	5054386	Identifier	get_value32		5054170	0					
ANR	5054387	ArgumentList	optarg		5054170	1					
ANR	5054388	Argument	optarg		5054170	0					
ANR	5054389	Identifier	optarg		5054170	0					
ANR	5054390	BreakStatement	break ;	303:3:6668:6673	5054170	14	True				
ANR	5054391	Label	case 'e' :	304:2:6677:6685	5054170	15	True				
ANR	5054392	ExpressionStatement	endian = 1	305:3:6690:6700	5054170	16	True				
ANR	5054393	AssignmentExpression	endian = 1		5054170	0		=			
ANR	5054394	Identifier	endian		5054170	0					
ANR	5054395	PrimaryExpression	1		5054170	1					
ANR	5054396	BreakStatement	break ;	306:3:6705:6710	5054170	17	True				
ANR	5054397	Label	case 'r' :	307:2:6714:6722	5054170	18	True				
ANR	5054398	ExpressionStatement	range = get_value32 ( optarg )	308:3:6727:6754	5054170	19	True				
ANR	5054399	AssignmentExpression	range = get_value32 ( optarg )		5054170	0		=			
ANR	5054400	Identifier	range		5054170	0					
ANR	5054401	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054402	Callee	get_value32		5054170	0					
ANR	5054403	Identifier	get_value32		5054170	0					
ANR	5054404	ArgumentList	optarg		5054170	1					
ANR	5054405	Argument	optarg		5054170	0					
ANR	5054406	Identifier	optarg		5054170	0					
ANR	5054407	IfStatement	if ( range < 0 )		5054170	20					
ANR	5054408	Condition	range < 0	309:7:6763:6769	5054170	0	True				
ANR	5054409	RelationalExpression	range < 0		5054170	0		<			
ANR	5054410	Identifier	range		5054170	0					
ANR	5054411	PrimaryExpression	0		5054170	1					
ANR	5054412	ExpressionStatement	range = - range	309:16:6772:6786	5054170	1	True				
ANR	5054413	AssignmentExpression	range = - range		5054170	0		=			
ANR	5054414	Identifier	range		5054170	0					
ANR	5054415	UnaryOperationExpression	- range		5054170	1					
ANR	5054416	UnaryOperator	-		5054170	0					
ANR	5054417	Identifier	range		5054170	1					
ANR	5054418	BreakStatement	break ;	310:3:6791:6796	5054170	21	True				
ANR	5054419	Label	case 'v' :	311:2:6800:6808	5054170	22	True				
ANR	5054420	ExpressionStatement	verbose = 1	312:3:6813:6824	5054170	23	True				
ANR	5054421	AssignmentExpression	verbose = 1		5054170	0		=			
ANR	5054422	Identifier	verbose		5054170	0					
ANR	5054423	PrimaryExpression	1		5054170	1					
ANR	5054424	BreakStatement	break ;	313:3:6829:6834	5054170	24	True				
ANR	5054425	Label	case 'f' :	314:2:6838:6846	5054170	25	True				
ANR	5054426	ExpressionStatement	from = get_value32 ( optarg )	315:3:6851:6877	5054170	26	True				
ANR	5054427	AssignmentExpression	from = get_value32 ( optarg )		5054170	0		=			
ANR	5054428	Identifier	from		5054170	0					
ANR	5054429	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054430	Callee	get_value32		5054170	0					
ANR	5054431	Identifier	get_value32		5054170	0					
ANR	5054432	ArgumentList	optarg		5054170	1					
ANR	5054433	Argument	optarg		5054170	0					
ANR	5054434	Identifier	optarg		5054170	0					
ANR	5054435	BreakStatement	break ;	316:3:6882:6887	5054170	27	True				
ANR	5054436	Label	case 't' :	317:2:6891:6899	5054170	28	True				
ANR	5054437	ExpressionStatement	to = get_value32 ( optarg )	318:3:6904:6928	5054170	29	True				
ANR	5054438	AssignmentExpression	to = get_value32 ( optarg )		5054170	0		=			
ANR	5054439	Identifier	to		5054170	0					
ANR	5054440	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054441	Callee	get_value32		5054170	0					
ANR	5054442	Identifier	get_value32		5054170	0					
ANR	5054443	ArgumentList	optarg		5054170	1					
ANR	5054444	Argument	optarg		5054170	0					
ANR	5054445	Identifier	optarg		5054170	0					
ANR	5054446	BreakStatement	break ;	319:3:6933:6938	5054170	30	True				
ANR	5054447	Label	case 's' :	320:2:6942:6950	5054170	31	True				
ANR	5054448	ExpressionStatement	size = get_value32 ( optarg )	321:3:6955:6981	5054170	32	True				
ANR	5054449	AssignmentExpression	size = get_value32 ( optarg )		5054170	0		=			
ANR	5054450	Identifier	size		5054170	0					
ANR	5054451	CallExpression	get_value32 ( optarg )		5054170	1					
ANR	5054452	Callee	get_value32		5054170	0					
ANR	5054453	Identifier	get_value32		5054170	0					
ANR	5054454	ArgumentList	optarg		5054170	1					
ANR	5054455	Argument	optarg		5054170	0					
ANR	5054456	Identifier	optarg		5054170	0					
ANR	5054457	BreakStatement	break ;	322:3:6986:6991	5054170	33	True				
ANR	5054458	Label	case 'h' :	323:2:6995:7003	5054170	34	True				
ANR	5054459	ReturnStatement	return show_usage ( ) ;	324:3:7008:7027	5054170	35	True				
ANR	5054460	CallExpression	show_usage ( )		5054170	0					
ANR	5054461	Callee	show_usage		5054170	0					
ANR	5054462	Identifier	show_usage		5054170	0					
ANR	5054463	ArgumentList			5054170	1					
ANR	5054464	IfStatement	if ( optind + 2 != argc )		5054170	7					
ANR	5054465	Condition	optind + 2 != argc	328:5:7042:7057	5054170	0	True				
ANR	5054466	EqualityExpression	optind + 2 != argc		5054170	0		!=			
ANR	5054467	AdditiveExpression	optind + 2		5054170	0		+			
ANR	5054468	Identifier	optind		5054170	0					
ANR	5054469	PrimaryExpression	2		5054170	1					
ANR	5054470	Identifier	argc		5054170	1					
ANR	5054471	CompoundStatement		73:23:1217:1217	5054170	1					
ANR	5054472	ExpressionStatement	"fprintf ( stderr , ""Plz. gimmie a file and offset.\\n"" )"	329:2:7064:7115	5054170	0	True				
ANR	5054473	CallExpression	"fprintf ( stderr , ""Plz. gimmie a file and offset.\\n"" )"		5054170	0					
ANR	5054474	Callee	fprintf		5054170	0					
ANR	5054475	Identifier	fprintf		5054170	0					
ANR	5054476	ArgumentList	stderr		5054170	1					
ANR	5054477	Argument	stderr		5054170	0					
ANR	5054478	Identifier	stderr		5054170	0					
ANR	5054479	Argument	"""Plz. gimmie a file and offset.\\n"""		5054170	1					
ANR	5054480	PrimaryExpression	"""Plz. gimmie a file and offset.\\n"""		5054170	0					
ANR	5054481	ReturnStatement	return 1 ;	330:2:7119:7127	5054170	1	True				
ANR	5054482	PrimaryExpression	1		5054170	0					
ANR	5054483	ExpressionStatement	"src = open ( argv [ optind ] , O_RDONLY )"	334:1:7155:7192	5054170	8	True				
ANR	5054484	AssignmentExpression	"src = open ( argv [ optind ] , O_RDONLY )"		5054170	0		=			
ANR	5054485	Identifier	src		5054170	0					
ANR	5054486	CallExpression	"open ( argv [ optind ] , O_RDONLY )"		5054170	1					
ANR	5054487	Callee	open		5054170	0					
ANR	5054488	Identifier	open		5054170	0					
ANR	5054489	ArgumentList	argv [ optind ]		5054170	1					
ANR	5054490	Argument	argv [ optind ]		5054170	0					
ANR	5054491	ArrayIndexing	argv [ optind ]		5054170	0					
ANR	5054492	Identifier	argv		5054170	0					
ANR	5054493	Identifier	optind		5054170	1					
ANR	5054494	Argument	O_RDONLY		5054170	1					
ANR	5054495	Identifier	O_RDONLY		5054170	0					
ANR	5054496	IfStatement	if ( src == - 1 )		5054170	9					
ANR	5054497	Condition	src == - 1	335:5:7199:7207	5054170	0	True				
ANR	5054498	EqualityExpression	src == - 1		5054170	0		==			
ANR	5054499	Identifier	src		5054170	0					
ANR	5054500	UnaryOperationExpression	- 1		5054170	1					
ANR	5054501	UnaryOperator	-		5054170	0					
ANR	5054502	PrimaryExpression	1		5054170	1					
ANR	5054503	CompoundStatement		80:16:1367:1367	5054170	1					
ANR	5054504	ExpressionStatement	"fprintf ( stderr , ""Cannot open file source %s\\n"" , argv [ optind ] )"	336:2:7214:7275	5054170	0	True				
ANR	5054505	CallExpression	"fprintf ( stderr , ""Cannot open file source %s\\n"" , argv [ optind ] )"		5054170	0					
ANR	5054506	Callee	fprintf		5054170	0					
ANR	5054507	Identifier	fprintf		5054170	0					
ANR	5054508	ArgumentList	stderr		5054170	1					
ANR	5054509	Argument	stderr		5054170	0					
ANR	5054510	Identifier	stderr		5054170	0					
ANR	5054511	Argument	"""Cannot open file source %s\\n"""		5054170	1					
ANR	5054512	PrimaryExpression	"""Cannot open file source %s\\n"""		5054170	0					
ANR	5054513	Argument	argv [ optind ]		5054170	2					
ANR	5054514	ArrayIndexing	argv [ optind ]		5054170	0					
ANR	5054515	Identifier	argv		5054170	0					
ANR	5054516	Identifier	optind		5054170	1					
ANR	5054517	ReturnStatement	return - 1 ;	337:2:7279:7288	5054170	1	True				
ANR	5054518	UnaryOperationExpression	- 1		5054170	0					
ANR	5054519	UnaryOperator	-		5054170	0					
ANR	5054520	PrimaryExpression	1		5054170	1					
ANR	5054521	ExpressionStatement	offset = get_value32 ( argv [ optind + 1 ] )	340:1:7295:7331	5054170	10	True				
ANR	5054522	AssignmentExpression	offset = get_value32 ( argv [ optind + 1 ] )		5054170	0		=			
ANR	5054523	Identifier	offset		5054170	0					
ANR	5054524	CallExpression	get_value32 ( argv [ optind + 1 ] )		5054170	1					
ANR	5054525	Callee	get_value32		5054170	0					
ANR	5054526	Identifier	get_value32		5054170	0					
ANR	5054527	ArgumentList	argv [ optind + 1 ]		5054170	1					
ANR	5054528	Argument	argv [ optind + 1 ]		5054170	0					
ANR	5054529	ArrayIndexing	argv [ optind + 1 ]		5054170	0					
ANR	5054530	Identifier	argv		5054170	0					
ANR	5054531	AdditiveExpression	optind + 1		5054170	1		+			
ANR	5054532	Identifier	optind		5054170	0					
ANR	5054533	PrimaryExpression	1		5054170	1					
ANR	5054534	IfStatement	if ( offset >= base )		5054170	11					
ANR	5054535	Condition	offset >= base	341:5:7338:7351	5054170	0	True				
ANR	5054536	RelationalExpression	offset >= base		5054170	0		>=			
ANR	5054537	Identifier	offset		5054170	0					
ANR	5054538	Identifier	base		5054170	1					
ANR	5054539	ExpressionStatement	offset -= base	342:2:7356:7370	5054170	1	True				
ANR	5054540	AssignmentExpression	offset -= base		5054170	0		-=			
ANR	5054541	Identifier	offset		5054170	0					
ANR	5054542	Identifier	base		5054170	1					
ANR	5054543	ExpressionStatement	sa = file_size_fd ( src ) - size	344:1:7374:7403	5054170	12	True				
ANR	5054544	AssignmentExpression	sa = file_size_fd ( src ) - size		5054170	0		=			
ANR	5054545	Identifier	sa		5054170	0					
ANR	5054546	AdditiveExpression	file_size_fd ( src ) - size		5054170	1		-			
ANR	5054547	CallExpression	file_size_fd ( src )		5054170	0					
ANR	5054548	Callee	file_size_fd		5054170	0					
ANR	5054549	Identifier	file_size_fd		5054170	0					
ANR	5054550	ArgumentList	src		5054170	1					
ANR	5054551	Argument	src		5054170	0					
ANR	5054552	Identifier	src		5054170	0					
ANR	5054553	Identifier	size		5054170	1					
ANR	5054554	ExpressionStatement	"ma = mmap ( NULL , sa , PROT_READ , MAP_SHARED , src , 0 )"	346:1:7419:7469	5054170	13	True				
ANR	5054555	AssignmentExpression	"ma = mmap ( NULL , sa , PROT_READ , MAP_SHARED , src , 0 )"		5054170	0		=			
ANR	5054556	Identifier	ma		5054170	0					
ANR	5054557	CallExpression	"mmap ( NULL , sa , PROT_READ , MAP_SHARED , src , 0 )"		5054170	1					
ANR	5054558	Callee	mmap		5054170	0					
ANR	5054559	Identifier	mmap		5054170	0					
ANR	5054560	ArgumentList	NULL		5054170	1					
ANR	5054561	Argument	NULL		5054170	0					
ANR	5054562	Identifier	NULL		5054170	0					
ANR	5054563	Argument	sa		5054170	1					
ANR	5054564	Identifier	sa		5054170	0					
ANR	5054565	Argument	PROT_READ		5054170	2					
ANR	5054566	Identifier	PROT_READ		5054170	0					
ANR	5054567	Argument	MAP_SHARED		5054170	3					
ANR	5054568	Identifier	MAP_SHARED		5054170	0					
ANR	5054569	Argument	src		5054170	4					
ANR	5054570	Identifier	src		5054170	0					
ANR	5054571	Argument	0		5054170	5					
ANR	5054572	PrimaryExpression	0		5054170	0					
ANR	5054573	IfStatement	if ( sa < 0x50 )		5054170	14					
ANR	5054574	Condition	sa < 0x50	347:5:7476:7484	5054170	0	True				
ANR	5054575	RelationalExpression	sa < 0x50		5054170	0		<			
ANR	5054576	Identifier	sa		5054170	0					
ANR	5054577	PrimaryExpression	0x50		5054170	1					
ANR	5054578	CompoundStatement		92:16:1644:1644	5054170	1					
ANR	5054579	ExpressionStatement	"fprintf ( stderr , ""Minimum length is 0x50 bytes.\\n"" )"	348:2:7491:7541	5054170	0	True				
ANR	5054580	CallExpression	"fprintf ( stderr , ""Minimum length is 0x50 bytes.\\n"" )"		5054170	0					
ANR	5054581	Callee	fprintf		5054170	0					
ANR	5054582	Identifier	fprintf		5054170	0					
ANR	5054583	ArgumentList	stderr		5054170	1					
ANR	5054584	Argument	stderr		5054170	0					
ANR	5054585	Identifier	stderr		5054170	0					
ANR	5054586	Argument	"""Minimum length is 0x50 bytes.\\n"""		5054170	1					
ANR	5054587	PrimaryExpression	"""Minimum length is 0x50 bytes.\\n"""		5054170	0					
ANR	5054588	ReturnStatement	return 1 ;	349:2:7545:7553	5054170	1	True				
ANR	5054589	PrimaryExpression	1		5054170	0					
ANR	5054590	IfStatement	if ( ! ma )		5054170	15					
ANR	5054591	Condition	! ma	356:5:7698:7700	5054170	0	True				
ANR	5054592	UnaryOperationExpression	! ma		5054170	0					
ANR	5054593	UnaryOperator	!		5054170	0					
ANR	5054594	Identifier	ma		5054170	1					
ANR	5054595	CompoundStatement		101:10:1860:1860	5054170	1					
ANR	5054596	ExpressionStatement	"perror ( ""Error mmaping"" )"	357:2:7707:7730	5054170	0	True				
ANR	5054597	CallExpression	"perror ( ""Error mmaping"" )"		5054170	0					
ANR	5054598	Callee	perror		5054170	0					
ANR	5054599	Identifier	perror		5054170	0					
ANR	5054600	ArgumentList	"""Error mmaping"""		5054170	1					
ANR	5054601	Argument	"""Error mmaping"""		5054170	0					
ANR	5054602	PrimaryExpression	"""Error mmaping"""		5054170	0					
ANR	5054603	ExpressionStatement	"fprintf ( stderr , ""cannot open %s\\n"" , argv [ optind ] )"	358:2:7734:7783	5054170	1	True				
ANR	5054604	CallExpression	"fprintf ( stderr , ""cannot open %s\\n"" , argv [ optind ] )"		5054170	0					
ANR	5054605	Callee	fprintf		5054170	0					
ANR	5054606	Identifier	fprintf		5054170	0					
ANR	5054607	ArgumentList	stderr		5054170	1					
ANR	5054608	Argument	stderr		5054170	0					
ANR	5054609	Identifier	stderr		5054170	0					
ANR	5054610	Argument	"""cannot open %s\\n"""		5054170	1					
ANR	5054611	PrimaryExpression	"""cannot open %s\\n"""		5054170	0					
ANR	5054612	Argument	argv [ optind ]		5054170	2					
ANR	5054613	ArrayIndexing	argv [ optind ]		5054170	0					
ANR	5054614	Identifier	argv		5054170	0					
ANR	5054615	Identifier	optind		5054170	1					
ANR	5054616	ReturnStatement	return 1 ;	359:2:7787:7795	5054170	2	True				
ANR	5054617	PrimaryExpression	1		5054170	0					
ANR	5054618	ExpressionStatement	sysendian = get_system_endian ( )	363:1:7831:7862	5054170	16	True				
ANR	5054619	AssignmentExpression	sysendian = get_system_endian ( )		5054170	0		=			
ANR	5054620	Identifier	sysendian		5054170	0					
ANR	5054621	CallExpression	get_system_endian ( )		5054170	1					
ANR	5054622	Callee	get_system_endian		5054170	0					
ANR	5054623	Identifier	get_system_endian		5054170	0					
ANR	5054624	ArgumentList			5054170	1					
ANR	5054625	WhileStatement	while ( set_arch_settings ( ) )		5054170	17					
ANR	5054626	Condition	set_arch_settings ( )	365:8:7873:7891	5054170	0	True				
ANR	5054627	CallExpression	set_arch_settings ( )		5054170	0					
ANR	5054628	Callee	set_arch_settings		5054170	0					
ANR	5054629	Identifier	set_arch_settings		5054170	0					
ANR	5054630	ArgumentList			5054170	1					
ANR	5054631	ExpressionStatement		365:29:7894:7894	5054170	1	True				
ANR	5054632	IfStatement	if ( endian == - 1 )		5054170	18					
ANR	5054633	Condition	endian == - 1	367:5:7902:7913	5054170	0	True				
ANR	5054634	EqualityExpression	endian == - 1		5054170	0		==			
ANR	5054635	Identifier	endian		5054170	0					
ANR	5054636	UnaryOperationExpression	- 1		5054170	1					
ANR	5054637	UnaryOperator	-		5054170	0					
ANR	5054638	PrimaryExpression	1		5054170	1					
ANR	5054639	ExpressionStatement	endian = 0	368:2:7918:7928	5054170	1	True				
ANR	5054640	AssignmentExpression	endian = 0		5054170	0		=			
ANR	5054641	Identifier	endian		5054170	0					
ANR	5054642	PrimaryExpression	0		5054170	1					
ANR	5054643	ForStatement	for ( i = from ; i < sa && i < to ; i ++ )		5054170	19					
ANR	5054644	ForInit	i = from ;	371:5:7969:7975	5054170	0	True				
ANR	5054645	AssignmentExpression	i = from		5054170	0		=			
ANR	5054646	Identifier	i		5054170	0					
ANR	5054647	Identifier	from		5054170	1					
ANR	5054648	Condition	i < sa && i < to	371:13:7977:7988	5054170	1	True				
ANR	5054649	AndExpression	i < sa && i < to		5054170	0		&&			
ANR	5054650	RelationalExpression	i < sa		5054170	0		<			
ANR	5054651	Identifier	i		5054170	0					
ANR	5054652	Identifier	sa		5054170	1					
ANR	5054653	RelationalExpression	i < to		5054170	1		<			
ANR	5054654	Identifier	i		5054170	0					
ANR	5054655	Identifier	to		5054170	1					
ANR	5054656	PostIncDecOperationExpression	i ++	371:27:7991:7993	5054170	2	True				
ANR	5054657	Identifier	i		5054170	0					
ANR	5054658	IncDec	++		5054170	1					
ANR	5054659	CompoundStatement		120:2:2236:2280	5054170	3					
ANR	5054660	IdentifierDeclStatement	ut32 value = offset - i + delta ;	372:2:8000:8031	5054170	0	True				
ANR	5054661	IdentifierDecl	value = offset - i + delta		5054170	0					
ANR	5054662	IdentifierDeclType	ut32		5054170	0					
ANR	5054663	Identifier	value		5054170	1					
ANR	5054664	AssignmentExpression	value = offset - i + delta		5054170	2		=			
ANR	5054665	Identifier	value		5054170	0					
ANR	5054666	AdditiveExpression	offset - i + delta		5054170	1		-			
ANR	5054667	Identifier	offset		5054170	0					
ANR	5054668	AdditiveExpression	i + delta		5054170	1		+			
ANR	5054669	Identifier	i		5054170	0					
ANR	5054670	Identifier	delta		5054170	1					
ANR	5054671	IdentifierDeclStatement	ut32 ovalue = value ;	373:2:8035:8054	5054170	1	True				
ANR	5054672	IdentifierDecl	ovalue = value		5054170	0					
ANR	5054673	IdentifierDeclType	ut32		5054170	0					
ANR	5054674	Identifier	ovalue		5054170	1					
ANR	5054675	AssignmentExpression	ovalue = value		5054170	2		=			
ANR	5054676	Identifier	value		5054170	0					
ANR	5054677	Identifier	value		5054170	1					
ANR	5054678	IdentifierDeclStatement	ut32 tmpvalue = 0 ;	374:2:8058:8075	5054170	2	True				
ANR	5054679	IdentifierDecl	tmpvalue = 0		5054170	0					
ANR	5054680	IdentifierDeclType	ut32		5054170	0					
ANR	5054681	Identifier	tmpvalue		5054170	1					
ANR	5054682	AssignmentExpression	tmpvalue = 0		5054170	2		=			
ANR	5054683	Identifier	tmpvalue		5054170	0					
ANR	5054684	PrimaryExpression	0		5054170	1					
ANR	5054685	IdentifierDeclStatement	unsigned char * buf = ( unsigned char * ) & value ;	375:2:8079:8123	5054170	3	True				
ANR	5054686	IdentifierDecl	* buf = ( unsigned char * ) & value		5054170	0					
ANR	5054687	IdentifierDeclType	unsigned char *		5054170	0					
ANR	5054688	Identifier	buf		5054170	1					
ANR	5054689	AssignmentExpression	* buf = ( unsigned char * ) & value		5054170	2		=			
ANR	5054690	Identifier	buf		5054170	0					
ANR	5054691	CastExpression	( unsigned char * ) & value		5054170	1					
ANR	5054692	CastTarget	unsigned char *		5054170	0					
ANR	5054693	UnaryOperationExpression	& value		5054170	1					
ANR	5054694	UnaryOperator	&		5054170	0					
ANR	5054695	Identifier	value		5054170	1					
ANR	5054696	IfStatement	if ( range != 0 )		5054170	4					
ANR	5054697	Condition	range != 0	377:6:8132:8139	5054170	0	True				
ANR	5054698	EqualityExpression	range != 0		5054170	0		!=			
ANR	5054699	Identifier	range		5054170	0					
ANR	5054700	PrimaryExpression	0		5054170	1					
ANR	5054701	CompoundStatement		122:16:2299:2299	5054170	1					
ANR	5054702	IfStatement	if ( value < 0 && - value > range )		5054170	0					
ANR	5054703	Condition	value < 0 && - value > range	378:7:8151:8173	5054170	0	True				
ANR	5054704	AndExpression	value < 0 && - value > range		5054170	0		&&			
ANR	5054705	RelationalExpression	value < 0		5054170	0		<			
ANR	5054706	Identifier	value		5054170	0					
ANR	5054707	PrimaryExpression	0		5054170	1					
ANR	5054708	RelationalExpression	- value > range		5054170	1		>			
ANR	5054709	UnaryOperationExpression	- value		5054170	0					
ANR	5054710	UnaryOperator	-		5054170	0					
ANR	5054711	Identifier	value		5054170	1					
ANR	5054712	Identifier	range		5054170	1					
ANR	5054713	ContinueStatement	continue ;	379:5:8181:8189	5054170	1	True				
ANR	5054714	ElseStatement	else		5054170	0					
ANR	5054715	IfStatement	if ( value > 0 && value > range )		5054170	0					
ANR	5054716	Condition	value > 0 && value > range	381:7:8206:8227	5054170	0	True				
ANR	5054717	AndExpression	value > 0 && value > range		5054170	0		&&			
ANR	5054718	RelationalExpression	value > 0		5054170	0		>			
ANR	5054719	Identifier	value		5054170	0					
ANR	5054720	PrimaryExpression	0		5054170	1					
ANR	5054721	RelationalExpression	value > range		5054170	1		>			
ANR	5054722	Identifier	value		5054170	0					
ANR	5054723	Identifier	range		5054170	1					
ANR	5054724	ContinueStatement	continue ;	382:5:8235:8243	5054170	1	True				
ANR	5054725	IfStatement	if ( verbose )		5054170	5					
ANR	5054726	Condition	verbose	385:6:8256:8262	5054170	0	True				
ANR	5054727	Identifier	verbose		5054170	0					
ANR	5054728	Statement	printf	386:3:8268:8273	5054170	1	True				
ANR	5054729	Statement	(	386:9:8274:8274	5054170	6	True				
ANR	5054730	Statement	"""0x%08"""	386:10:8275:8281	5054170	7	True				
ANR	5054731	Statement	PFMT64x	386:17:8282:8288	5054170	8	True				
ANR	5054732	Statement	"""  try %02x %02x %02x %02x (0x%08"""	386:24:8289:8322	5054170	9	True				
ANR	5054733	Statement	PFMT64x	386:58:8323:8329	5054170	10	True				
ANR	5054734	Statement	""") - %"""	386:65:8330:8336	5054170	11	True				
ANR	5054735	Statement	PFMT64d	386:72:8337:8343	5054170	12	True				
ANR	5054736	Statement	"""\\n"""	386:79:8344:8347	5054170	13	True				
ANR	5054737	Statement	","	386:83:8348:8348	5054170	14	True				
ANR	5054738	Statement	(	387:4:8354:8354	5054170	15	True				
ANR	5054739	Statement	ut64	387:5:8355:8358	5054170	16	True				
ANR	5054740	Statement	)	387:9:8359:8359	5054170	17	True				
ANR	5054741	Statement	i	387:10:8360:8360	5054170	18	True				
ANR	5054742	Statement	","	387:11:8361:8361	5054170	19	True				
ANR	5054743	Statement	buf	387:13:8363:8365	5054170	20	True				
ANR	5054744	Statement	[	387:16:8366:8366	5054170	21	True				
ANR	5054745	Statement	0	387:17:8367:8367	5054170	22	True				
ANR	5054746	Statement	]	387:18:8368:8368	5054170	23	True				
ANR	5054747	Statement	","	387:19:8369:8369	5054170	24	True				
ANR	5054748	Statement	buf	387:21:8371:8373	5054170	25	True				
ANR	5054749	Statement	[	387:24:8374:8374	5054170	26	True				
ANR	5054750	Statement	1	387:25:8375:8375	5054170	27	True				
ANR	5054751	Statement	]	387:26:8376:8376	5054170	28	True				
ANR	5054752	Statement	","	387:27:8377:8377	5054170	29	True				
ANR	5054753	Statement	buf	387:29:8379:8381	5054170	30	True				
ANR	5054754	Statement	[	387:32:8382:8382	5054170	31	True				
ANR	5054755	Statement	2	387:33:8383:8383	5054170	32	True				
ANR	5054756	Statement	]	387:34:8384:8384	5054170	33	True				
ANR	5054757	Statement	","	387:35:8385:8385	5054170	34	True				
ANR	5054758	Statement	buf	387:37:8387:8389	5054170	35	True				
ANR	5054759	Statement	[	387:40:8390:8390	5054170	36	True				
ANR	5054760	Statement	3	387:41:8391:8391	5054170	37	True				
ANR	5054761	Statement	]	387:42:8392:8392	5054170	38	True				
ANR	5054762	Statement	","	387:43:8393:8393	5054170	39	True				
ANR	5054763	Statement	(	387:45:8395:8395	5054170	40	True				
ANR	5054764	Statement	ut64	387:46:8396:8399	5054170	41	True				
ANR	5054765	Statement	)	387:50:8400:8400	5054170	42	True				
ANR	5054766	Statement	base	387:52:8402:8405	5054170	43	True				
ANR	5054767	Statement	+	387:56:8406:8406	5054170	44	True				
ANR	5054768	Statement	value	387:57:8407:8411	5054170	45	True				
ANR	5054769	Statement	","	387:62:8412:8412	5054170	46	True				
ANR	5054770	Statement	(	387:64:8414:8414	5054170	47	True				
ANR	5054771	Statement	ut64	387:65:8415:8418	5054170	48	True				
ANR	5054772	Statement	)	387:69:8419:8419	5054170	49	True				
ANR	5054773	Statement	(	387:71:8421:8421	5054170	50	True				
ANR	5054774	Statement	base	387:72:8422:8425	5054170	51	True				
ANR	5054775	Statement	+	387:76:8426:8426	5054170	52	True				
ANR	5054776	Statement	value	387:77:8427:8431	5054170	53	True				
ANR	5054777	Statement	)	387:82:8432:8432	5054170	54	True				
ANR	5054778	Statement	)	387:83:8433:8433	5054170	55	True				
ANR	5054779	ExpressionStatement		387:84:8434:8434	5054170	56	True				
ANR	5054780	IfStatement	if ( xylum && i == xylum )		5054170	57					
ANR	5054781	Condition	xylum && i == xylum	389:6:8443:8461	5054170	0	True				
ANR	5054782	AndExpression	xylum && i == xylum		5054170	0		&&			
ANR	5054783	Identifier	xylum		5054170	0					
ANR	5054784	EqualityExpression	i == xylum		5054170	1		==			
ANR	5054785	Identifier	i		5054170	0					
ANR	5054786	Identifier	xylum		5054170	1					
ANR	5054787	CompoundStatement		134:27:2621:2621	5054170	1					
ANR	5054788	Statement	printf	390:3:8469:8474	5054170	0	True				
ANR	5054789	Statement	(	390:9:8475:8475	5054170	1	True				
ANR	5054790	Statement	"""# offset: 0x%08"""	390:10:8476:8492	5054170	2	True				
ANR	5054791	Statement	PFMT64x	390:27:8493:8499	5054170	3	True				
ANR	5054792	Statement	"""\\n"""	390:34:8500:8503	5054170	4	True				
ANR	5054793	Statement	","	390:38:8504:8504	5054170	5	True				
ANR	5054794	Statement	(	390:40:8506:8506	5054170	6	True				
ANR	5054795	Statement	ut64	390:41:8507:8510	5054170	7	True				
ANR	5054796	Statement	)	390:45:8511:8511	5054170	8	True				
ANR	5054797	Statement	i	390:46:8512:8512	5054170	9	True				
ANR	5054798	Statement	)	390:47:8513:8513	5054170	10	True				
ANR	5054799	ExpressionStatement		390:48:8514:8514	5054170	11	True				
ANR	5054800	Statement	printf	391:3:8519:8524	5054170	12	True				
ANR	5054801	Statement	(	391:9:8525:8525	5054170	13	True				
ANR	5054802	Statement	"""# delta:  %"""	391:10:8526:8538	5054170	14	True				
ANR	5054803	Statement	PFMT64d	391:23:8539:8545	5054170	15	True				
ANR	5054804	Statement	"""\\n"""	391:30:8546:8549	5054170	16	True				
ANR	5054805	Statement	","	391:34:8550:8550	5054170	17	True				
ANR	5054806	Statement	(	391:36:8552:8552	5054170	18	True				
ANR	5054807	Statement	ut64	391:37:8553:8556	5054170	19	True				
ANR	5054808	Statement	)	391:41:8557:8557	5054170	20	True				
ANR	5054809	Statement	delta	391:42:8558:8562	5054170	21	True				
ANR	5054810	Statement	)	391:47:8563:8563	5054170	22	True				
ANR	5054811	ExpressionStatement		391:48:8564:8564	5054170	23	True				
ANR	5054812	Statement	printf	392:3:8569:8574	5054170	24	True				
ANR	5054813	Statement	(	392:9:8575:8575	5054170	25	True				
ANR	5054814	Statement	"""# size:   %"""	392:10:8576:8588	5054170	26	True				
ANR	5054815	Statement	PFMT64d	392:23:8589:8595	5054170	27	True				
ANR	5054816	Statement	"""\\n"""	392:30:8596:8599	5054170	28	True				
ANR	5054817	Statement	","	392:34:8600:8600	5054170	29	True				
ANR	5054818	Statement	(	392:36:8602:8602	5054170	30	True				
ANR	5054819	Statement	ut64	392:37:8603:8606	5054170	31	True				
ANR	5054820	Statement	)	392:41:8607:8607	5054170	32	True				
ANR	5054821	Statement	size	392:42:8608:8611	5054170	33	True				
ANR	5054822	Statement	)	392:46:8612:8612	5054170	34	True				
ANR	5054823	ExpressionStatement		392:47:8613:8613	5054170	35	True				
ANR	5054824	Statement	printf	393:3:8618:8623	5054170	36	True				
ANR	5054825	Statement	(	393:9:8624:8624	5054170	37	True				
ANR	5054826	Statement	"""# value:  %"""	393:10:8625:8637	5054170	38	True				
ANR	5054827	Statement	PFMT64d	393:23:8638:8644	5054170	39	True				
ANR	5054828	Statement	"""\\n"""	393:30:8645:8648	5054170	40	True				
ANR	5054829	Statement	","	393:34:8649:8649	5054170	41	True				
ANR	5054830	Statement	(	393:36:8651:8651	5054170	42	True				
ANR	5054831	Statement	ut64	393:37:8652:8655	5054170	43	True				
ANR	5054832	Statement	)	393:41:8656:8656	5054170	44	True				
ANR	5054833	Statement	value	393:42:8657:8661	5054170	45	True				
ANR	5054834	Statement	)	393:47:8662:8662	5054170	46	True				
ANR	5054835	ExpressionStatement		393:48:8663:8663	5054170	47	True				
ANR	5054836	Statement	printf	394:3:8668:8673	5054170	48	True				
ANR	5054837	Statement	(	394:9:8674:8674	5054170	49	True				
ANR	5054838	Statement	"""# bytes:  %02x %02x %02x %02x (0x%08"""	394:10:8675:8712	5054170	50	True				
ANR	5054839	Statement	PFMT64x	394:48:8713:8719	5054170	51	True				
ANR	5054840	Statement	""") - %"""	394:55:8720:8726	5054170	52	True				
ANR	5054841	Statement	PFMT64d	394:62:8727:8733	5054170	53	True				
ANR	5054842	Statement	"""\\n"""	394:69:8734:8737	5054170	54	True				
ANR	5054843	Statement	","	394:73:8738:8738	5054170	55	True				
ANR	5054844	Statement	buf	395:4:8744:8746	5054170	56	True				
ANR	5054845	Statement	[	395:7:8747:8747	5054170	57	True				
ANR	5054846	Statement	0	395:8:8748:8748	5054170	58	True				
ANR	5054847	Statement	]	395:9:8749:8749	5054170	59	True				
ANR	5054848	Statement	","	395:10:8750:8750	5054170	60	True				
ANR	5054849	Statement	buf	395:12:8752:8754	5054170	61	True				
ANR	5054850	Statement	[	395:15:8755:8755	5054170	62	True				
ANR	5054851	Statement	1	395:16:8756:8756	5054170	63	True				
ANR	5054852	Statement	]	395:17:8757:8757	5054170	64	True				
ANR	5054853	Statement	","	395:18:8758:8758	5054170	65	True				
ANR	5054854	Statement	buf	395:20:8760:8762	5054170	66	True				
ANR	5054855	Statement	[	395:23:8763:8763	5054170	67	True				
ANR	5054856	Statement	2	395:24:8764:8764	5054170	68	True				
ANR	5054857	Statement	]	395:25:8765:8765	5054170	69	True				
ANR	5054858	Statement	","	395:26:8766:8766	5054170	70	True				
ANR	5054859	Statement	buf	395:28:8768:8770	5054170	71	True				
ANR	5054860	Statement	[	395:31:8771:8771	5054170	72	True				
ANR	5054861	Statement	3	395:32:8772:8772	5054170	73	True				
ANR	5054862	Statement	]	395:33:8773:8773	5054170	74	True				
ANR	5054863	Statement	","	395:34:8774:8774	5054170	75	True				
ANR	5054864	Statement	(	395:36:8776:8776	5054170	76	True				
ANR	5054865	Statement	ut64	395:37:8777:8780	5054170	77	True				
ANR	5054866	Statement	)	395:41:8781:8781	5054170	78	True				
ANR	5054867	Statement	value	395:42:8782:8786	5054170	79	True				
ANR	5054868	Statement	","	395:47:8787:8787	5054170	80	True				
ANR	5054869	Statement	(	395:49:8789:8789	5054170	81	True				
ANR	5054870	Statement	ut64	395:50:8790:8793	5054170	82	True				
ANR	5054871	Statement	)	395:54:8794:8794	5054170	83	True				
ANR	5054872	Statement	value	395:55:8795:8799	5054170	84	True				
ANR	5054873	Statement	)	395:60:8800:8800	5054170	85	True				
ANR	5054874	ExpressionStatement		395:61:8801:8801	5054170	86	True				
ANR	5054875	ExpressionStatement	tmpvalue = ma [ i + gamme ]	396:3:8806:8828	5054170	87	True				
ANR	5054876	AssignmentExpression	tmpvalue = ma [ i + gamme ]		5054170	0		=			
ANR	5054877	Identifier	tmpvalue		5054170	0					
ANR	5054878	ArrayIndexing	ma [ i + gamme ]		5054170	1					
ANR	5054879	Identifier	ma		5054170	0					
ANR	5054880	AdditiveExpression	i + gamme		5054170	1		+			
ANR	5054881	Identifier	i		5054170	0					
ANR	5054882	Identifier	gamme		5054170	1					
ANR	5054883	ExpressionStatement	"printf ( ""# found:  %02x %02x %02x %02x\\n"" , ma [ i + gamme + 0 ] , ma [ i + gamme + 1 ] , ma [ i + gamme + 2 ] , ma [ i + gamme + 3 ] )"	397:3:8833:8942	5054170	88	True				
ANR	5054884	CallExpression	"printf ( ""# found:  %02x %02x %02x %02x\\n"" , ma [ i + gamme + 0 ] , ma [ i + gamme + 1 ] , ma [ i + gamme + 2 ] , ma [ i + gamme + 3 ] )"		5054170	0					
ANR	5054885	Callee	printf		5054170	0					
ANR	5054886	Identifier	printf		5054170	0					
ANR	5054887	ArgumentList	"""# found:  %02x %02x %02x %02x\\n"""		5054170	1					
ANR	5054888	Argument	"""# found:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5054889	PrimaryExpression	"""# found:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5054890	Argument	ma [ i + gamme + 0 ]		5054170	1					
ANR	5054891	ArrayIndexing	ma [ i + gamme + 0 ]		5054170	0					
ANR	5054892	Identifier	ma		5054170	0					
ANR	5054893	AdditiveExpression	i + gamme + 0		5054170	1		+			
ANR	5054894	Identifier	i		5054170	0					
ANR	5054895	AdditiveExpression	gamme + 0		5054170	1		+			
ANR	5054896	Identifier	gamme		5054170	0					
ANR	5054897	PrimaryExpression	0		5054170	1					
ANR	5054898	Argument	ma [ i + gamme + 1 ]		5054170	2					
ANR	5054899	ArrayIndexing	ma [ i + gamme + 1 ]		5054170	0					
ANR	5054900	Identifier	ma		5054170	0					
ANR	5054901	AdditiveExpression	i + gamme + 1		5054170	1		+			
ANR	5054902	Identifier	i		5054170	0					
ANR	5054903	AdditiveExpression	gamme + 1		5054170	1		+			
ANR	5054904	Identifier	gamme		5054170	0					
ANR	5054905	PrimaryExpression	1		5054170	1					
ANR	5054906	Argument	ma [ i + gamme + 2 ]		5054170	3					
ANR	5054907	ArrayIndexing	ma [ i + gamme + 2 ]		5054170	0					
ANR	5054908	Identifier	ma		5054170	0					
ANR	5054909	AdditiveExpression	i + gamme + 2		5054170	1		+			
ANR	5054910	Identifier	i		5054170	0					
ANR	5054911	AdditiveExpression	gamme + 2		5054170	1		+			
ANR	5054912	Identifier	gamme		5054170	0					
ANR	5054913	PrimaryExpression	2		5054170	1					
ANR	5054914	Argument	ma [ i + gamme + 3 ]		5054170	4					
ANR	5054915	ArrayIndexing	ma [ i + gamme + 3 ]		5054170	0					
ANR	5054916	Identifier	ma		5054170	0					
ANR	5054917	AdditiveExpression	i + gamme + 3		5054170	1		+			
ANR	5054918	Identifier	i		5054170	0					
ANR	5054919	AdditiveExpression	gamme + 3		5054170	1		+			
ANR	5054920	Identifier	gamme		5054170	0					
ANR	5054921	PrimaryExpression	3		5054170	1					
ANR	5054922	SwitchStatement	switch ( arch )		5054170	58					
ANR	5054923	Condition	arch	402:9:8958:8961	5054170	0	True				
ANR	5054924	Identifier	arch		5054170	0					
ANR	5054925	CompoundStatement		147:15:3121:3121	5054170	1					
ANR	5054926	Label	case ARCH_ARM :	403:2:8968:8981	5054170	0	True				
ANR	5054927	Identifier	ARCH_ARM		5054170	0					
ANR	5054928	ExpressionStatement	value = ( value - 8 ) / 4	404:3:8986:9005	5054170	1	True				
ANR	5054929	AssignmentExpression	value = ( value - 8 ) / 4		5054170	0		=			
ANR	5054930	Identifier	value		5054170	0					
ANR	5054931	MultiplicativeExpression	( value - 8 ) / 4		5054170	1		/			
ANR	5054932	AdditiveExpression	value - 8		5054170	0		-			
ANR	5054933	Identifier	value		5054170	0					
ANR	5054934	PrimaryExpression	8		5054170	1					
ANR	5054935	PrimaryExpression	4		5054170	1					
ANR	5054936	BreakStatement	break ;	405:3:9010:9015	5054170	2	True				
ANR	5054937	Label	case ARCH_X86 :	406:2:9019:9032	5054170	3	True				
ANR	5054938	Identifier	ARCH_X86		5054170	0					
ANR	5054939	ExpressionStatement	value -= 5	407:3:9037:9045	5054170	4	True				
ANR	5054940	AssignmentExpression	value -= 5		5054170	0		-=			
ANR	5054941	Identifier	value		5054170	0					
ANR	5054942	PrimaryExpression	5		5054170	1					
ANR	5054943	BreakStatement	break ;	408:3:9050:9055	5054170	5	True				
ANR	5054944	Label	default :	409:2:9059:9066	5054170	6	True				
ANR	5054945	Identifier	default		5054170	0					
ANR	5054946	BreakStatement	break ;	410:3:9071:9076	5054170	7	True				
ANR	5054947	IfStatement	if ( sysendian )		5054170	59					
ANR	5054948	Condition	sysendian	414:6:9117:9125	5054170	0	True				
ANR	5054949	Identifier	sysendian		5054170	0					
ANR	5054950	CompoundStatement		160:3:3290:3307	5054170	1					
ANR	5054951	IdentifierDeclStatement	unsigned char tmp ;	415:3:9133:9150	5054170	0	True				
ANR	5054952	IdentifierDecl	tmp		5054170	0					
ANR	5054953	IdentifierDeclType	unsigned char		5054170	0					
ANR	5054954	Identifier	tmp		5054170	1					
ANR	5054955	ExpressionStatement	tmp = buf [ 0 ]	416:3:9155:9167	5054170	1	True				
ANR	5054956	AssignmentExpression	tmp = buf [ 0 ]		5054170	0		=			
ANR	5054957	Identifier	tmp		5054170	0					
ANR	5054958	ArrayIndexing	buf [ 0 ]		5054170	1					
ANR	5054959	Identifier	buf		5054170	0					
ANR	5054960	PrimaryExpression	0		5054170	1					
ANR	5054961	ExpressionStatement	buf [ 0 ] = buf [ 3 ]	416:17:9169:9183	5054170	2	True				
ANR	5054962	AssignmentExpression	buf [ 0 ] = buf [ 3 ]		5054170	0		=			
ANR	5054963	ArrayIndexing	buf [ 0 ]		5054170	0					
ANR	5054964	Identifier	buf		5054170	0					
ANR	5054965	PrimaryExpression	0		5054170	1					
ANR	5054966	ArrayIndexing	buf [ 3 ]		5054170	1					
ANR	5054967	Identifier	buf		5054170	0					
ANR	5054968	PrimaryExpression	3		5054170	1					
ANR	5054969	ExpressionStatement	buf [ 3 ] = tmp	416:33:9185:9197	5054170	3	True				
ANR	5054970	AssignmentExpression	buf [ 3 ] = tmp		5054170	0		=			
ANR	5054971	ArrayIndexing	buf [ 3 ]		5054170	0					
ANR	5054972	Identifier	buf		5054170	0					
ANR	5054973	PrimaryExpression	3		5054170	1					
ANR	5054974	Identifier	tmp		5054170	1					
ANR	5054975	ExpressionStatement	tmp = buf [ 1 ]	417:3:9202:9214	5054170	4	True				
ANR	5054976	AssignmentExpression	tmp = buf [ 1 ]		5054170	0		=			
ANR	5054977	Identifier	tmp		5054170	0					
ANR	5054978	ArrayIndexing	buf [ 1 ]		5054170	1					
ANR	5054979	Identifier	buf		5054170	0					
ANR	5054980	PrimaryExpression	1		5054170	1					
ANR	5054981	ExpressionStatement	buf [ 1 ] = buf [ 2 ]	417:17:9216:9230	5054170	5	True				
ANR	5054982	AssignmentExpression	buf [ 1 ] = buf [ 2 ]		5054170	0		=			
ANR	5054983	ArrayIndexing	buf [ 1 ]		5054170	0					
ANR	5054984	Identifier	buf		5054170	0					
ANR	5054985	PrimaryExpression	1		5054170	1					
ANR	5054986	ArrayIndexing	buf [ 2 ]		5054170	1					
ANR	5054987	Identifier	buf		5054170	0					
ANR	5054988	PrimaryExpression	2		5054170	1					
ANR	5054989	ExpressionStatement	buf [ 2 ] = tmp	417:33:9232:9244	5054170	6	True				
ANR	5054990	AssignmentExpression	buf [ 2 ] = tmp		5054170	0		=			
ANR	5054991	ArrayIndexing	buf [ 2 ]		5054170	0					
ANR	5054992	Identifier	buf		5054170	0					
ANR	5054993	PrimaryExpression	2		5054170	1					
ANR	5054994	Identifier	tmp		5054170	1					
ANR	5054995	IfStatement	if ( endian )		5054170	60					
ANR	5054996	Condition	endian	420:6:9291:9296	5054170	0	True				
ANR	5054997	Identifier	endian		5054170	0					
ANR	5054998	CompoundStatement		166:3:3461:3478	5054170	1					
ANR	5054999	IdentifierDeclStatement	unsigned char tmp ;	421:3:9304:9321	5054170	0	True				
ANR	5055000	IdentifierDecl	tmp		5054170	0					
ANR	5055001	IdentifierDeclType	unsigned char		5054170	0					
ANR	5055002	Identifier	tmp		5054170	1					
ANR	5055003	ExpressionStatement	tmp = buf [ 0 ]	422:3:9326:9338	5054170	1	True				
ANR	5055004	AssignmentExpression	tmp = buf [ 0 ]		5054170	0		=			
ANR	5055005	Identifier	tmp		5054170	0					
ANR	5055006	ArrayIndexing	buf [ 0 ]		5054170	1					
ANR	5055007	Identifier	buf		5054170	0					
ANR	5055008	PrimaryExpression	0		5054170	1					
ANR	5055009	ExpressionStatement	buf [ 0 ] = buf [ 3 ]	422:17:9340:9355	5054170	2	True				
ANR	5055010	AssignmentExpression	buf [ 0 ] = buf [ 3 ]		5054170	0		=			
ANR	5055011	ArrayIndexing	buf [ 0 ]		5054170	0					
ANR	5055012	Identifier	buf		5054170	0					
ANR	5055013	PrimaryExpression	0		5054170	1					
ANR	5055014	ArrayIndexing	buf [ 3 ]		5054170	1					
ANR	5055015	Identifier	buf		5054170	0					
ANR	5055016	PrimaryExpression	3		5054170	1					
ANR	5055017	ExpressionStatement	buf [ 3 ] = tmp	422:34:9357:9369	5054170	3	True				
ANR	5055018	AssignmentExpression	buf [ 3 ] = tmp		5054170	0		=			
ANR	5055019	ArrayIndexing	buf [ 3 ]		5054170	0					
ANR	5055020	Identifier	buf		5054170	0					
ANR	5055021	PrimaryExpression	3		5054170	1					
ANR	5055022	Identifier	tmp		5054170	1					
ANR	5055023	ExpressionStatement	tmp = buf [ 1 ]	423:3:9374:9386	5054170	4	True				
ANR	5055024	AssignmentExpression	tmp = buf [ 1 ]		5054170	0		=			
ANR	5055025	Identifier	tmp		5054170	0					
ANR	5055026	ArrayIndexing	buf [ 1 ]		5054170	1					
ANR	5055027	Identifier	buf		5054170	0					
ANR	5055028	PrimaryExpression	1		5054170	1					
ANR	5055029	ExpressionStatement	buf [ 1 ] = buf [ 2 ]	423:17:9388:9403	5054170	5	True				
ANR	5055030	AssignmentExpression	buf [ 1 ] = buf [ 2 ]		5054170	0		=			
ANR	5055031	ArrayIndexing	buf [ 1 ]		5054170	0					
ANR	5055032	Identifier	buf		5054170	0					
ANR	5055033	PrimaryExpression	1		5054170	1					
ANR	5055034	ArrayIndexing	buf [ 2 ]		5054170	1					
ANR	5055035	Identifier	buf		5054170	0					
ANR	5055036	PrimaryExpression	2		5054170	1					
ANR	5055037	ExpressionStatement	buf [ 2 ] = tmp	423:34:9405:9417	5054170	6	True				
ANR	5055038	AssignmentExpression	buf [ 2 ] = tmp		5054170	0		=			
ANR	5055039	ArrayIndexing	buf [ 2 ]		5054170	0					
ANR	5055040	Identifier	buf		5054170	0					
ANR	5055041	PrimaryExpression	2		5054170	1					
ANR	5055042	Identifier	tmp		5054170	1					
ANR	5055043	IfStatement	if ( arch == ARCH_ARM )		5054170	61					
ANR	5055044	Condition	arch == ARCH_ARM	425:6:9429:9442	5054170	0	True				
ANR	5055045	EqualityExpression	arch == ARCH_ARM		5054170	0		==			
ANR	5055046	Identifier	arch		5054170	0					
ANR	5055047	Identifier	ARCH_ARM		5054170	1					
ANR	5055048	CompoundStatement		170:22:3602:3602	5054170	1					
ANR	5055049	ExpressionStatement	buf [ 3 ] = buf [ 2 ]	426:3:9450:9465	5054170	0	True				
ANR	5055050	AssignmentExpression	buf [ 3 ] = buf [ 2 ]		5054170	0		=			
ANR	5055051	ArrayIndexing	buf [ 3 ]		5054170	0					
ANR	5055052	Identifier	buf		5054170	0					
ANR	5055053	PrimaryExpression	3		5054170	1					
ANR	5055054	ArrayIndexing	buf [ 2 ]		5054170	1					
ANR	5055055	Identifier	buf		5054170	0					
ANR	5055056	PrimaryExpression	2		5054170	1					
ANR	5055057	ExpressionStatement	buf [ 2 ] = buf [ 1 ]	426:20:9467:9482	5054170	1	True				
ANR	5055058	AssignmentExpression	buf [ 2 ] = buf [ 1 ]		5054170	0		=			
ANR	5055059	ArrayIndexing	buf [ 2 ]		5054170	0					
ANR	5055060	Identifier	buf		5054170	0					
ANR	5055061	PrimaryExpression	2		5054170	1					
ANR	5055062	ArrayIndexing	buf [ 1 ]		5054170	1					
ANR	5055063	Identifier	buf		5054170	0					
ANR	5055064	PrimaryExpression	1		5054170	1					
ANR	5055065	ExpressionStatement	buf [ 1 ] = buf [ 0 ]	426:37:9484:9499	5054170	2	True				
ANR	5055066	AssignmentExpression	buf [ 1 ] = buf [ 0 ]		5054170	0		=			
ANR	5055067	ArrayIndexing	buf [ 1 ]		5054170	0					
ANR	5055068	Identifier	buf		5054170	0					
ANR	5055069	PrimaryExpression	1		5054170	1					
ANR	5055070	ArrayIndexing	buf [ 0 ]		5054170	1					
ANR	5055071	Identifier	buf		5054170	0					
ANR	5055072	PrimaryExpression	0		5054170	1					
ANR	5055073	IfStatement	if ( xylum && ovalue == xylum )		5054170	62					
ANR	5055074	Condition	xylum && ovalue == xylum	429:6:9512:9535	5054170	0	True				
ANR	5055075	AndExpression	xylum && ovalue == xylum		5054170	0		&&			
ANR	5055076	Identifier	xylum		5054170	0					
ANR	5055077	EqualityExpression	ovalue == xylum		5054170	1		==			
ANR	5055078	Identifier	ovalue		5054170	0					
ANR	5055079	Identifier	xylum		5054170	1					
ANR	5055080	CompoundStatement		174:32:3695:3695	5054170	1					
ANR	5055081	Statement	printf	430:3:9543:9548	5054170	0	True				
ANR	5055082	Statement	(	430:9:9549:9549	5054170	1	True				
ANR	5055083	Statement	"""# buf:  %02x %02x %02x %02x (+%"""	430:10:9550:9582	5054170	2	True				
ANR	5055084	Statement	PFMT64d	430:43:9583:9589	5054170	3	True				
ANR	5055085	Statement	""")\\n"""	430:50:9590:9594	5054170	4	True				
ANR	5055086	Statement	","	430:55:9595:9595	5054170	5	True				
ANR	5055087	Statement	buf	431:4:9601:9603	5054170	6	True				
ANR	5055088	Statement	[	431:7:9604:9604	5054170	7	True				
ANR	5055089	Statement	0	431:8:9605:9605	5054170	8	True				
ANR	5055090	Statement	]	431:9:9606:9606	5054170	9	True				
ANR	5055091	Statement	","	431:10:9607:9607	5054170	10	True				
ANR	5055092	Statement	buf	431:12:9609:9611	5054170	11	True				
ANR	5055093	Statement	[	431:15:9612:9612	5054170	12	True				
ANR	5055094	Statement	1	431:16:9613:9613	5054170	13	True				
ANR	5055095	Statement	]	431:17:9614:9614	5054170	14	True				
ANR	5055096	Statement	","	431:18:9615:9615	5054170	15	True				
ANR	5055097	Statement	buf	431:20:9617:9619	5054170	16	True				
ANR	5055098	Statement	[	431:23:9620:9620	5054170	17	True				
ANR	5055099	Statement	2	431:24:9621:9621	5054170	18	True				
ANR	5055100	Statement	]	431:25:9622:9622	5054170	19	True				
ANR	5055101	Statement	","	431:26:9623:9623	5054170	20	True				
ANR	5055102	Statement	buf	431:28:9625:9627	5054170	21	True				
ANR	5055103	Statement	[	431:31:9628:9628	5054170	22	True				
ANR	5055104	Statement	3	431:32:9629:9629	5054170	23	True				
ANR	5055105	Statement	]	431:33:9630:9630	5054170	24	True				
ANR	5055106	Statement	","	431:34:9631:9631	5054170	25	True				
ANR	5055107	Statement	(	431:36:9633:9633	5054170	26	True				
ANR	5055108	Statement	ut64	431:37:9634:9637	5054170	27	True				
ANR	5055109	Statement	)	431:41:9638:9638	5054170	28	True				
ANR	5055110	Statement	(	431:42:9639:9639	5054170	29	True				
ANR	5055111	Statement	4	431:43:9640:9640	5054170	30	True				
ANR	5055112	Statement	-	431:44:9641:9641	5054170	31	True				
ANR	5055113	Statement	size	431:45:9642:9645	5054170	32	True				
ANR	5055114	Statement	)	431:49:9646:9646	5054170	33	True				
ANR	5055115	Statement	)	431:50:9647:9647	5054170	34	True				
ANR	5055116	ExpressionStatement		431:51:9648:9648	5054170	35	True				
ANR	5055117	ExpressionStatement	"printf ( ""# map:  %02x %02x %02x \\n"" , ma [ i + gamme ] , ma [ i + 1 + gamme ] , ma [ i + 2 + gamme ] )"	432:3:9653:9735	5054170	36	True				
ANR	5055118	CallExpression	"printf ( ""# map:  %02x %02x %02x \\n"" , ma [ i + gamme ] , ma [ i + 1 + gamme ] , ma [ i + 2 + gamme ] )"		5054170	0					
ANR	5055119	Callee	printf		5054170	0					
ANR	5055120	Identifier	printf		5054170	0					
ANR	5055121	ArgumentList	"""# map:  %02x %02x %02x \\n"""		5054170	1					
ANR	5055122	Argument	"""# map:  %02x %02x %02x \\n"""		5054170	0					
ANR	5055123	PrimaryExpression	"""# map:  %02x %02x %02x \\n"""		5054170	0					
ANR	5055124	Argument	ma [ i + gamme ]		5054170	1					
ANR	5055125	ArrayIndexing	ma [ i + gamme ]		5054170	0					
ANR	5055126	Identifier	ma		5054170	0					
ANR	5055127	AdditiveExpression	i + gamme		5054170	1		+			
ANR	5055128	Identifier	i		5054170	0					
ANR	5055129	Identifier	gamme		5054170	1					
ANR	5055130	Argument	ma [ i + 1 + gamme ]		5054170	2					
ANR	5055131	ArrayIndexing	ma [ i + 1 + gamme ]		5054170	0					
ANR	5055132	Identifier	ma		5054170	0					
ANR	5055133	AdditiveExpression	i + 1 + gamme		5054170	1		+			
ANR	5055134	Identifier	i		5054170	0					
ANR	5055135	AdditiveExpression	1 + gamme		5054170	1		+			
ANR	5055136	PrimaryExpression	1		5054170	0					
ANR	5055137	Identifier	gamme		5054170	1					
ANR	5055138	Argument	ma [ i + 2 + gamme ]		5054170	3					
ANR	5055139	ArrayIndexing	ma [ i + 2 + gamme ]		5054170	0					
ANR	5055140	Identifier	ma		5054170	0					
ANR	5055141	AdditiveExpression	i + 2 + gamme		5054170	1		+			
ANR	5055142	Identifier	i		5054170	0					
ANR	5055143	AdditiveExpression	2 + gamme		5054170	1		+			
ANR	5055144	PrimaryExpression	2		5054170	0					
ANR	5055145	Identifier	gamme		5054170	1					
ANR	5055146	ExpressionStatement	"printf ( ""# cmp:  %02x %02x %02x\\n"" , ma [ i ] , ma [ i + 1 ] , ma [ i + 2 ] )"	434:3:9740:9799	5054170	37	True				
ANR	5055147	CallExpression	"printf ( ""# cmp:  %02x %02x %02x\\n"" , ma [ i ] , ma [ i + 1 ] , ma [ i + 2 ] )"		5054170	0					
ANR	5055148	Callee	printf		5054170	0					
ANR	5055149	Identifier	printf		5054170	0					
ANR	5055150	ArgumentList	"""# cmp:  %02x %02x %02x\\n"""		5054170	1					
ANR	5055151	Argument	"""# cmp:  %02x %02x %02x\\n"""		5054170	0					
ANR	5055152	PrimaryExpression	"""# cmp:  %02x %02x %02x\\n"""		5054170	0					
ANR	5055153	Argument	ma [ i ]		5054170	1					
ANR	5055154	ArrayIndexing	ma [ i ]		5054170	0					
ANR	5055155	Identifier	ma		5054170	0					
ANR	5055156	Identifier	i		5054170	1					
ANR	5055157	Argument	ma [ i + 1 ]		5054170	2					
ANR	5055158	ArrayIndexing	ma [ i + 1 ]		5054170	0					
ANR	5055159	Identifier	ma		5054170	0					
ANR	5055160	AdditiveExpression	i + 1		5054170	1		+			
ANR	5055161	Identifier	i		5054170	0					
ANR	5055162	PrimaryExpression	1		5054170	1					
ANR	5055163	Argument	ma [ i + 2 ]		5054170	3					
ANR	5055164	ArrayIndexing	ma [ i + 2 ]		5054170	0					
ANR	5055165	Identifier	ma		5054170	0					
ANR	5055166	AdditiveExpression	i + 2		5054170	1		+			
ANR	5055167	Identifier	i		5054170	0					
ANR	5055168	PrimaryExpression	2		5054170	1					
ANR	5055169	IfStatement	if ( xylum && i == xylum )		5054170	63					
ANR	5055170	Condition	xylum && i == xylum	437:6:9812:9830	5054170	0	True				
ANR	5055171	AndExpression	xylum && i == xylum		5054170	0		&&			
ANR	5055172	Identifier	xylum		5054170	0					
ANR	5055173	EqualityExpression	i == xylum		5054170	1		==			
ANR	5055174	Identifier	i		5054170	0					
ANR	5055175	Identifier	xylum		5054170	1					
ANR	5055176	CompoundStatement		182:27:3990:3990	5054170	1					
ANR	5055177	ExpressionStatement	"printf ( ""# a:  %02x %02x %02x %02x\\n"" , ma [ i + gamme + 0 ] , ma [ i + gamme + 1 ] , ma [ i + gamme + 2 ] , ma [ i + gamme + 3 ] )"	438:3:9838:9943	5054170	0	True				
ANR	5055178	CallExpression	"printf ( ""# a:  %02x %02x %02x %02x\\n"" , ma [ i + gamme + 0 ] , ma [ i + gamme + 1 ] , ma [ i + gamme + 2 ] , ma [ i + gamme + 3 ] )"		5054170	0					
ANR	5055179	Callee	printf		5054170	0					
ANR	5055180	Identifier	printf		5054170	0					
ANR	5055181	ArgumentList	"""# a:  %02x %02x %02x %02x\\n"""		5054170	1					
ANR	5055182	Argument	"""# a:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5055183	PrimaryExpression	"""# a:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5055184	Argument	ma [ i + gamme + 0 ]		5054170	1					
ANR	5055185	ArrayIndexing	ma [ i + gamme + 0 ]		5054170	0					
ANR	5055186	Identifier	ma		5054170	0					
ANR	5055187	AdditiveExpression	i + gamme + 0		5054170	1		+			
ANR	5055188	Identifier	i		5054170	0					
ANR	5055189	AdditiveExpression	gamme + 0		5054170	1		+			
ANR	5055190	Identifier	gamme		5054170	0					
ANR	5055191	PrimaryExpression	0		5054170	1					
ANR	5055192	Argument	ma [ i + gamme + 1 ]		5054170	2					
ANR	5055193	ArrayIndexing	ma [ i + gamme + 1 ]		5054170	0					
ANR	5055194	Identifier	ma		5054170	0					
ANR	5055195	AdditiveExpression	i + gamme + 1		5054170	1		+			
ANR	5055196	Identifier	i		5054170	0					
ANR	5055197	AdditiveExpression	gamme + 1		5054170	1		+			
ANR	5055198	Identifier	gamme		5054170	0					
ANR	5055199	PrimaryExpression	1		5054170	1					
ANR	5055200	Argument	ma [ i + gamme + 2 ]		5054170	3					
ANR	5055201	ArrayIndexing	ma [ i + gamme + 2 ]		5054170	0					
ANR	5055202	Identifier	ma		5054170	0					
ANR	5055203	AdditiveExpression	i + gamme + 2		5054170	1		+			
ANR	5055204	Identifier	i		5054170	0					
ANR	5055205	AdditiveExpression	gamme + 2		5054170	1		+			
ANR	5055206	Identifier	gamme		5054170	0					
ANR	5055207	PrimaryExpression	2		5054170	1					
ANR	5055208	Argument	ma [ i + gamme + 3 ]		5054170	4					
ANR	5055209	ArrayIndexing	ma [ i + gamme + 3 ]		5054170	0					
ANR	5055210	Identifier	ma		5054170	0					
ANR	5055211	AdditiveExpression	i + gamme + 3		5054170	1		+			
ANR	5055212	Identifier	i		5054170	0					
ANR	5055213	AdditiveExpression	gamme + 3		5054170	1		+			
ANR	5055214	Identifier	gamme		5054170	0					
ANR	5055215	PrimaryExpression	3		5054170	1					
ANR	5055216	ExpressionStatement	"printf ( ""# b:  %02x %02x %02x %02x\\n"" , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] , buf [ 3 ] )"	441:3:9948:10021	5054170	1	True				
ANR	5055217	CallExpression	"printf ( ""# b:  %02x %02x %02x %02x\\n"" , buf [ 0 ] , buf [ 1 ] , buf [ 2 ] , buf [ 3 ] )"		5054170	0					
ANR	5055218	Callee	printf		5054170	0					
ANR	5055219	Identifier	printf		5054170	0					
ANR	5055220	ArgumentList	"""# b:  %02x %02x %02x %02x\\n"""		5054170	1					
ANR	5055221	Argument	"""# b:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5055222	PrimaryExpression	"""# b:  %02x %02x %02x %02x\\n"""		5054170	0					
ANR	5055223	Argument	buf [ 0 ]		5054170	1					
ANR	5055224	ArrayIndexing	buf [ 0 ]		5054170	0					
ANR	5055225	Identifier	buf		5054170	0					
ANR	5055226	PrimaryExpression	0		5054170	1					
ANR	5055227	Argument	buf [ 1 ]		5054170	2					
ANR	5055228	ArrayIndexing	buf [ 1 ]		5054170	0					
ANR	5055229	Identifier	buf		5054170	0					
ANR	5055230	PrimaryExpression	1		5054170	1					
ANR	5055231	Argument	buf [ 2 ]		5054170	3					
ANR	5055232	ArrayIndexing	buf [ 2 ]		5054170	0					
ANR	5055233	Identifier	buf		5054170	0					
ANR	5055234	PrimaryExpression	2		5054170	1					
ANR	5055235	Argument	buf [ 3 ]		5054170	4					
ANR	5055236	ArrayIndexing	buf [ 3 ]		5054170	0					
ANR	5055237	Identifier	buf		5054170	0					
ANR	5055238	PrimaryExpression	3		5054170	1					
ANR	5055239	IfStatement	"if ( memcmp ( ( unsigned char * ) ma + i + gamme , ( unsigned char * ) buf + ( 4 - size ) , size ) == 0 )"		5054170	64					
ANR	5055240	Condition	"memcmp ( ( unsigned char * ) ma + i + gamme , ( unsigned char * ) buf + ( 4 - size ) , size ) == 0"	445:6:10034:10110	5054170	0	True				
ANR	5055241	EqualityExpression	"memcmp ( ( unsigned char * ) ma + i + gamme , ( unsigned char * ) buf + ( 4 - size ) , size ) == 0"		5054170	0		==			
ANR	5055242	CallExpression	"memcmp ( ( unsigned char * ) ma + i + gamme , ( unsigned char * ) buf + ( 4 - size ) , size )"		5054170	0					
ANR	5055243	Callee	memcmp		5054170	0					
ANR	5055244	Identifier	memcmp		5054170	0					
ANR	5055245	ArgumentList	( unsigned char * ) ma + i + gamme		5054170	1					
ANR	5055246	Argument	( unsigned char * ) ma + i + gamme		5054170	0					
ANR	5055247	AdditiveExpression	( unsigned char * ) ma + i + gamme		5054170	0		+			
ANR	5055248	CastExpression	( unsigned char * ) ma		5054170	0					
ANR	5055249	CastTarget	unsigned char *		5054170	0					
ANR	5055250	Identifier	ma		5054170	1					
ANR	5055251	AdditiveExpression	i + gamme		5054170	1		+			
ANR	5055252	Identifier	i		5054170	0					
ANR	5055253	Identifier	gamme		5054170	1					
ANR	5055254	Argument	( unsigned char * ) buf + ( 4 - size )		5054170	1					
ANR	5055255	AdditiveExpression	( unsigned char * ) buf + ( 4 - size )		5054170	0		+			
ANR	5055256	CastExpression	( unsigned char * ) buf		5054170	0					
ANR	5055257	CastTarget	unsigned char *		5054170	0					
ANR	5055258	Identifier	buf		5054170	1					
ANR	5055259	AdditiveExpression	4 - size		5054170	1		-			
ANR	5055260	PrimaryExpression	4		5054170	0					
ANR	5055261	Identifier	size		5054170	1					
ANR	5055262	Argument	size		5054170	2					
ANR	5055263	Identifier	size		5054170	0					
ANR	5055264	PrimaryExpression	0		5054170	1					
ANR	5055265	CompoundStatement		190:85:4270:4270	5054170	1					
ANR	5055266	IfStatement	if ( quite )		5054170	0					
ANR	5055267	Condition	quite	446:7:10122:10126	5054170	0	True				
ANR	5055268	Identifier	quite		5054170	0					
ANR	5055269	Statement	printf	447:4:10133:10138	5054170	1	True				
ANR	5055270	ElseStatement	else		5054170	0					
ANR	5055271	Statement	printf	449:4:10182:10187	5054170	0	True				
ANR	5055272	Statement	(	447:10:10139:10139	5054170	1	True				
ANR	5055273	Statement	"""0x%08"""	447:11:10140:10146	5054170	2	True				
ANR	5055274	Statement	PFMT64x	447:18:10147:10153	5054170	3	True				
ANR	5055275	Statement	"""\\n"""	447:25:10154:10157	5054170	4	True				
ANR	5055276	Statement	","	447:29:10158:10158	5054170	5	True				
ANR	5055277	Statement	(	447:31:10160:10160	5054170	6	True				
ANR	5055278	Statement	ut64	447:32:10161:10164	5054170	7	True				
ANR	5055279	Statement	)	447:36:10165:10165	5054170	8	True				
ANR	5055280	Statement	i	447:37:10166:10166	5054170	9	True				
ANR	5055281	Statement	)	447:38:10167:10167	5054170	10	True				
ANR	5055282	ExpressionStatement		447:39:10168:10168	5054170	11	True				
ANR	5055283	Statement	(	449:10:10188:10188	5054170	12	True				
ANR	5055284	Statement	"""match value 0x%08"""	449:11:10189:10207	5054170	13	True				
ANR	5055285	Statement	PFMT64x	449:30:10208:10214	5054170	14	True				
ANR	5055286	Statement	""" (%02x%02x%02x) at offset 0x%08"""	449:37:10215:10247	5054170	15	True				
ANR	5055287	Statement	PFMT64x	449:70:10248:10254	5054170	16	True				
ANR	5055288	Statement	"""\\n"""	449:77:10255:10258	5054170	17	True				
ANR	5055289	Statement	","	449:81:10259:10259	5054170	18	True				
ANR	5055290	Statement	(	450:5:10266:10266	5054170	19	True				
ANR	5055291	Statement	ut64	450:6:10267:10270	5054170	20	True				
ANR	5055292	Statement	)	450:10:10271:10271	5054170	21	True				
ANR	5055293	Statement	ovalue	450:11:10272:10277	5054170	22	True				
ANR	5055294	Statement	","	450:17:10278:10278	5054170	23	True				
ANR	5055295	Statement	buf	451:5:10285:10287	5054170	24	True				
ANR	5055296	Statement	[	451:8:10288:10288	5054170	25	True				
ANR	5055297	Statement	0	451:9:10289:10289	5054170	26	True				
ANR	5055298	Statement	+	451:10:10290:10290	5054170	27	True				
ANR	5055299	Statement	(	451:11:10291:10291	5054170	28	True				
ANR	5055300	Statement	4	451:12:10292:10292	5054170	29	True				
ANR	5055301	Statement	-	451:13:10293:10293	5054170	30	True				
ANR	5055302	Statement	size	451:14:10294:10297	5054170	31	True				
ANR	5055303	Statement	)	451:18:10298:10298	5054170	32	True				
ANR	5055304	Statement	]	451:19:10299:10299	5054170	33	True				
ANR	5055305	Statement	","	451:20:10300:10300	5054170	34	True				
ANR	5055306	Statement	buf	451:22:10302:10304	5054170	35	True				
ANR	5055307	Statement	[	451:25:10305:10305	5054170	36	True				
ANR	5055308	Statement	1	451:26:10306:10306	5054170	37	True				
ANR	5055309	Statement	+	451:27:10307:10307	5054170	38	True				
ANR	5055310	Statement	(	451:28:10308:10308	5054170	39	True				
ANR	5055311	Statement	4	451:29:10309:10309	5054170	40	True				
ANR	5055312	Statement	-	451:30:10310:10310	5054170	41	True				
ANR	5055313	Statement	size	451:31:10311:10314	5054170	42	True				
ANR	5055314	Statement	)	451:35:10315:10315	5054170	43	True				
ANR	5055315	Statement	]	451:36:10316:10316	5054170	44	True				
ANR	5055316	Statement	","	451:37:10317:10317	5054170	45	True				
ANR	5055317	Statement	buf	451:39:10319:10321	5054170	46	True				
ANR	5055318	Statement	[	451:42:10322:10322	5054170	47	True				
ANR	5055319	Statement	2	451:43:10323:10323	5054170	48	True				
ANR	5055320	Statement	+	451:44:10324:10324	5054170	49	True				
ANR	5055321	Statement	(	451:45:10325:10325	5054170	50	True				
ANR	5055322	Statement	4	451:46:10326:10326	5054170	51	True				
ANR	5055323	Statement	-	451:47:10327:10327	5054170	52	True				
ANR	5055324	Statement	size	451:48:10328:10331	5054170	53	True				
ANR	5055325	Statement	)	451:52:10332:10332	5054170	54	True				
ANR	5055326	Statement	]	451:53:10333:10333	5054170	55	True				
ANR	5055327	Statement	","	451:54:10334:10334	5054170	56	True				
ANR	5055328	Statement	(	452:5:10341:10341	5054170	57	True				
ANR	5055329	Statement	ut64	452:6:10342:10345	5054170	58	True				
ANR	5055330	Statement	)	452:10:10346:10346	5054170	59	True				
ANR	5055331	Statement	(	452:11:10347:10347	5054170	60	True				
ANR	5055332	Statement	(	452:12:10348:10348	5054170	61	True				
ANR	5055333	Statement	ut32	452:13:10349:10352	5054170	62	True				
ANR	5055334	Statement	)	452:17:10353:10353	5054170	63	True				
ANR	5055335	Statement	i	452:18:10354:10354	5054170	64	True				
ANR	5055336	Statement	)	452:19:10355:10355	5054170	65	True				
ANR	5055337	Statement	+	452:20:10356:10356	5054170	66	True				
ANR	5055338	Statement	(	452:21:10357:10357	5054170	67	True				
ANR	5055339	Statement	(	452:22:10358:10358	5054170	68	True				
ANR	5055340	Statement	gamme	452:23:10359:10363	5054170	69	True				
ANR	5055341	Statement	<	452:28:10364:10364	5054170	70	True				
ANR	5055342	Statement	0	452:29:10365:10365	5054170	71	True				
ANR	5055343	Statement	)	452:30:10366:10366	5054170	72	True				
ANR	5055344	Statement	?	452:31:10367:10367	5054170	73	True				
ANR	5055345	Statement	-	452:32:10368:10368	5054170	74	True				
ANR	5055346	Label	1 :	452:33:10369:10370	5054170	75	True				
ANR	5055347	Statement	0	452:35:10371:10371	5054170	76	True				
ANR	5055348	Statement	)	452:36:10372:10372	5054170	77	True				
ANR	5055349	Statement	)	452:37:10373:10373	5054170	78	True				
ANR	5055350	ExpressionStatement		452:38:10374:10374	5054170	79	True				
ANR	5055351	ExpressionStatement	found ++	453:3:10379:10386	5054170	80	True				
ANR	5055352	PostIncDecOperationExpression	found ++		5054170	0					
ANR	5055353	Identifier	found		5054170	0					
ANR	5055354	IncDec	++		5054170	1					
ANR	5055355	IfStatement	if ( found == 0 && ! quite )		5054170	20					
ANR	5055356	Condition	found == 0 && ! quite	457:5:10401:10420	5054170	0	True				
ANR	5055357	AndExpression	found == 0 && ! quite		5054170	0		&&			
ANR	5055358	EqualityExpression	found == 0		5054170	0		==			
ANR	5055359	Identifier	found		5054170	0					
ANR	5055360	PrimaryExpression	0		5054170	1					
ANR	5055361	UnaryOperationExpression	! quite		5054170	1					
ANR	5055362	UnaryOperator	!		5054170	0					
ANR	5055363	Identifier	quite		5054170	1					
ANR	5055364	ExpressionStatement	"puts ( ""no matches found."" )"	458:2:10425:10450	5054170	1	True				
ANR	5055365	CallExpression	"puts ( ""no matches found."" )"		5054170	0					
ANR	5055366	Callee	puts		5054170	0					
ANR	5055367	Identifier	puts		5054170	0					
ANR	5055368	ArgumentList	"""no matches found."""		5054170	1					
ANR	5055369	Argument	"""no matches found."""		5054170	0					
ANR	5055370	PrimaryExpression	"""no matches found."""		5054170	0					
ANR	5055371	ReturnStatement	return 0 ;	460:1:10454:10462	5054170	21	True				
ANR	5055372	PrimaryExpression	0		5054170	0					
ANR	5055373	ReturnType	int		5054170	1					
ANR	5055374	Identifier	main		5054170	2					
ANR	5055375	ParameterList	"int argc , char * * argv"		5054170	3					
ANR	5055376	Parameter	int argc	255:9:5819:5826	5054170	0	True				
ANR	5055377	ParameterType	int		5054170	0					
ANR	5055378	Identifier	argc		5054170	1					
ANR	5055379	Parameter	char * * argv	255:19:5829:5839	5054170	1	True				
ANR	5055380	ParameterType	char * *		5054170	0					
ANR	5055381	Identifier	argv		5054170	1					
ANR	5055382	CFGEntryNode	ENTRY		5054170		True				
ANR	5055383	CFGExitNode	EXIT		5054170		True				
ANR	5055384	Symbol	* optind		5054170						
ANR	5055385	Symbol	& value		5054170						
ANR	5055386	Symbol	optind		5054170						
ANR	5055387	Symbol	sysendian		5054170						
ANR	5055388	Symbol	delta		5054170						
ANR	5055389	Symbol	optarg		5054170						
ANR	5055390	Symbol	* argv		5054170						
ANR	5055391	Symbol	endian		5054170						
ANR	5055392	Symbol	ARCH_X86		5054170						
ANR	5055393	Symbol	* gamme		5054170						
ANR	5055394	Symbol	memcmp		5054170						
ANR	5055395	Symbol	ma		5054170						
ANR	5055396	Symbol	getopt		5054170						
ANR	5055397	Symbol	tmp		5054170						
ANR	5055398	Symbol	quite		5054170						
ANR	5055399	Symbol	from		5054170						
ANR	5055400	Symbol	strcmp		5054170						
ANR	5055401	Symbol	* buf		5054170						
ANR	5055402	Symbol	NULL		5054170						
ANR	5055403	Symbol	offset		5054170						
ANR	5055404	Symbol	PROT_READ		5054170						
ANR	5055405	Symbol	stderr		5054170						
ANR	5055406	Symbol	xylum		5054170						
ANR	5055407	Symbol	ARCH_ARM		5054170						
ANR	5055408	Symbol	size		5054170						
ANR	5055409	Symbol	MAP_SHARED		5054170						
ANR	5055410	Symbol	ARCH_PPC		5054170						
ANR	5055411	Symbol	range		5054170						
ANR	5055412	Symbol	set_arch_settings		5054170						
ANR	5055413	Symbol	argv		5054170						
ANR	5055414	Symbol	sa		5054170						
ANR	5055415	Symbol	found		5054170						
ANR	5055416	Symbol	INT_MAX		5054170						
ANR	5055417	Symbol	file_size_fd		5054170						
ANR	5055418	Symbol	get_system_endian		5054170						
ANR	5055419	Symbol	* ma		5054170						
ANR	5055420	Symbol	value		5054170						
ANR	5055421	Symbol	argc		5054170						
ANR	5055422	Symbol	tmpvalue		5054170						
ANR	5055423	Symbol	c		5054170						
ANR	5055424	Symbol	src		5054170						
ANR	5055425	Symbol	i		5054170						
ANR	5055426	Symbol	show_usage		5054170						
ANR	5055427	Symbol	verbose		5054170						
ANR	5055428	Symbol	buf		5054170						
ANR	5055429	Symbol	gamme		5054170						
ANR	5055430	Symbol	O_RDONLY		5054170						
ANR	5055431	Symbol	* i		5054170						
ANR	5055432	Symbol	ovalue		5054170						
ANR	5055433	Symbol	VERSION		5054170						
ANR	5055434	Symbol	get_value32		5054170						
ANR	5055435	Symbol	to		5054170						
ANR	5055436	Symbol	arch		5054170						
ANR	5055437	Symbol	mmap		5054170						
ANR	5055438	Symbol	open		5054170						
ANR	5055439	Symbol	base		5054170						
