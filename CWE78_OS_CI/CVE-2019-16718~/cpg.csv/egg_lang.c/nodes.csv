command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1306718	File	data/converged/CVE-2019-16718~_radare2/egg_lang.c								
ANR	1306719	Function	is_var	7:0:99:205							
ANR	1306720	FunctionDef	is_var (char * x)		1306719	0					
ANR	1306721	CompoundStatement		7:34:133:205	1306719	0					
ANR	1306722	ReturnStatement	return x [ 0 ] == '.' || ( ( x [ 0 ] == '*' || x [ 0 ] == '&' ) && x [ 1 ] == '.' ) ;	8:1:136:203	1306719	0	True				
ANR	1306723	OrExpression	x [ 0 ] == '.' || ( ( x [ 0 ] == '*' || x [ 0 ] == '&' ) && x [ 1 ] == '.' )		1306719	0		||			
ANR	1306724	EqualityExpression	x [ 0 ] == '.'		1306719	0		==			
ANR	1306725	ArrayIndexing	x [ 0 ]		1306719	0					
ANR	1306726	Identifier	x		1306719	0					
ANR	1306727	PrimaryExpression	0		1306719	1					
ANR	1306728	PrimaryExpression	'.'		1306719	1					
ANR	1306729	AndExpression	( x [ 0 ] == '*' || x [ 0 ] == '&' ) && x [ 1 ] == '.'		1306719	1		&&			
ANR	1306730	OrExpression	x [ 0 ] == '*' || x [ 0 ] == '&'		1306719	0		||			
ANR	1306731	EqualityExpression	x [ 0 ] == '*'		1306719	0		==			
ANR	1306732	ArrayIndexing	x [ 0 ]		1306719	0					
ANR	1306733	Identifier	x		1306719	0					
ANR	1306734	PrimaryExpression	0		1306719	1					
ANR	1306735	PrimaryExpression	'*'		1306719	1					
ANR	1306736	EqualityExpression	x [ 0 ] == '&'		1306719	1		==			
ANR	1306737	ArrayIndexing	x [ 0 ]		1306719	0					
ANR	1306738	Identifier	x		1306719	0					
ANR	1306739	PrimaryExpression	0		1306719	1					
ANR	1306740	PrimaryExpression	'&'		1306719	1					
ANR	1306741	EqualityExpression	x [ 1 ] == '.'		1306719	1		==			
ANR	1306742	ArrayIndexing	x [ 1 ]		1306719	0					
ANR	1306743	Identifier	x		1306719	0					
ANR	1306744	PrimaryExpression	1		1306719	1					
ANR	1306745	PrimaryExpression	'.'		1306719	1					
ANR	1306746	ReturnType	static inline int		1306719	1					
ANR	1306747	Identifier	is_var		1306719	2					
ANR	1306748	ParameterList	char * x		1306719	3					
ANR	1306749	Parameter	char * x	7:25:124:130	1306719	0	True				
ANR	1306750	ParameterType	char *		1306719	0					
ANR	1306751	Identifier	x		1306719	1					
ANR	1306752	CFGEntryNode	ENTRY		1306719		True				
ANR	1306753	CFGExitNode	EXIT		1306719		True				
ANR	1306754	Symbol	* x		1306719						
ANR	1306755	Symbol	x		1306719						
ANR	1306756	Function	is_space	11:0:208:302							
ANR	1306757	FunctionDef	is_space (char c)		1306756	0					
ANR	1306758	CompoundStatement		11:35:243:302	1306756	0					
ANR	1306759	ReturnStatement	return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r' ;	12:1:246:300	1306756	0	True				
ANR	1306760	OrExpression	c == ' ' || c == '\\t' || c == '\\n' || c == '\\r'		1306756	0		||			
ANR	1306761	EqualityExpression	c == ' '		1306756	0		==			
ANR	1306762	Identifier	c		1306756	0					
ANR	1306763	PrimaryExpression	' '		1306756	1					
ANR	1306764	OrExpression	c == '\\t' || c == '\\n' || c == '\\r'		1306756	1		||			
ANR	1306765	EqualityExpression	c == '\\t'		1306756	0		==			
ANR	1306766	Identifier	c		1306756	0					
ANR	1306767	PrimaryExpression	'\\t'		1306756	1					
ANR	1306768	OrExpression	c == '\\n' || c == '\\r'		1306756	1		||			
ANR	1306769	EqualityExpression	c == '\\n'		1306756	0		==			
ANR	1306770	Identifier	c		1306756	0					
ANR	1306771	PrimaryExpression	'\\n'		1306756	1					
ANR	1306772	EqualityExpression	c == '\\r'		1306756	1		==			
ANR	1306773	Identifier	c		1306756	0					
ANR	1306774	PrimaryExpression	'\\r'		1306756	1					
ANR	1306775	ReturnType	static inline int		1306756	1					
ANR	1306776	Identifier	is_space		1306756	2					
ANR	1306777	ParameterList	char c		1306756	3					
ANR	1306778	Parameter	char c	11:27:235:240	1306756	0	True				
ANR	1306779	ParameterType	char		1306756	0					
ANR	1306780	Identifier	c		1306756	1					
ANR	1306781	CFGEntryNode	ENTRY		1306756		True				
ANR	1306782	CFGExitNode	EXIT		1306756		True				
ANR	1306783	Symbol	c		1306756						
ANR	1306784	Function	skipspaces	15:0:305:398							
ANR	1306785	FunctionDef	skipspaces (const char * s)		1306784	0					
ANR	1306786	CompoundStatement		15:45:350:398	1306784	0					
ANR	1306787	WhileStatement	while ( is_space ( * s ) )		1306784	0					
ANR	1306788	Condition	is_space ( * s )	16:8:360:372	1306784	0	True				
ANR	1306789	CallExpression	is_space ( * s )		1306784	0					
ANR	1306790	Callee	is_space		1306784	0					
ANR	1306791	Identifier	is_space		1306784	0					
ANR	1306792	ArgumentList	* s		1306784	1					
ANR	1306793	Argument	* s		1306784	0					
ANR	1306794	UnaryOperationExpression	* s		1306784	0					
ANR	1306795	UnaryOperator	*		1306784	0					
ANR	1306796	Identifier	s		1306784	1					
ANR	1306797	CompoundStatement		2:23:24:24	1306784	1					
ANR	1306798	ExpressionStatement	s ++	17:2:379:382	1306784	0	True				
ANR	1306799	PostIncDecOperationExpression	s ++		1306784	0					
ANR	1306800	Identifier	s		1306784	0					
ANR	1306801	IncDec	++		1306784	1					
ANR	1306802	ReturnStatement	return s ;	19:1:388:396	1306784	1	True				
ANR	1306803	Identifier	s		1306784	0					
ANR	1306804	ReturnType	static const char *		1306784	1					
ANR	1306805	Identifier	skipspaces		1306784	2					
ANR	1306806	ParameterList	const char * s		1306784	3					
ANR	1306807	Parameter	const char * s	15:30:335:347	1306784	0	True				
ANR	1306808	ParameterType	const char *		1306784	0					
ANR	1306809	Identifier	s		1306784	1					
ANR	1306810	CFGEntryNode	ENTRY		1306784		True				
ANR	1306811	CFGExitNode	EXIT		1306784		True				
ANR	1306812	Symbol	s		1306784						
ANR	1306813	Symbol	is_space		1306784						
ANR	1306814	Symbol	* s		1306784						
ANR	1306815	Function	is_op	22:0:401:587							
ANR	1306816	FunctionDef	is_op (char x)		1306815	0					
ANR	1306817	CompoundStatement		22:32:433:587	1306815	0					
ANR	1306818	SwitchStatement	switch ( x )		1306815	0					
ANR	1306819	Condition	x	23:9:444:444	1306815	0	True				
ANR	1306820	Identifier	x		1306815	0					
ANR	1306821	CompoundStatement		2:12:13:13	1306815	1					
ANR	1306822	Label	case '-' :	24:1:450:458	1306815	0	True				
ANR	1306823	Label	case '+' :	25:1:461:469	1306815	1	True				
ANR	1306824	ReturnStatement	return 1 ;	26:2:473:481	1306815	2	True				
ANR	1306825	PrimaryExpression	1		1306815	0					
ANR	1306826	Label	case '*' :	27:1:484:492	1306815	3	True				
ANR	1306827	Label	case '/' :	28:1:495:503	1306815	4	True				
ANR	1306828	ReturnStatement	return 2 ;	29:2:507:515	1306815	5	True				
ANR	1306829	PrimaryExpression	2		1306815	0					
ANR	1306830	Label	case '^' :	30:1:518:526	1306815	6	True				
ANR	1306831	Label	case '|' :	31:1:529:537	1306815	7	True				
ANR	1306832	Label	case '&' :	32:1:540:548	1306815	8	True				
ANR	1306833	ReturnStatement	return 3 ;	33:2:552:560	1306815	9	True				
ANR	1306834	PrimaryExpression	3		1306815	0					
ANR	1306835	Label	default :	34:1:563:570	1306815	10	True				
ANR	1306836	Identifier	default		1306815	0					
ANR	1306837	ReturnStatement	return 0 ;	35:2:574:582	1306815	11	True				
ANR	1306838	PrimaryExpression	0		1306815	0					
ANR	1306839	ReturnType	static inline int		1306815	1					
ANR	1306840	Identifier	is_op		1306815	2					
ANR	1306841	ParameterList	char x		1306815	3					
ANR	1306842	Parameter	char x	22:24:425:430	1306815	0	True				
ANR	1306843	ParameterType	char		1306815	0					
ANR	1306844	Identifier	x		1306815	1					
ANR	1306845	CFGEntryNode	ENTRY		1306815		True				
ANR	1306846	CFGExitNode	EXIT		1306815		True				
ANR	1306847	Symbol	x		1306815						
ANR	1306848	Function	get_op	39:0:590:741							
ANR	1306849	FunctionDef	get_op (char * * pos)		1306848	0					
ANR	1306850	CompoundStatement		39:36:626:741	1306848	0					
ANR	1306851	WhileStatement	while ( * * pos && ! ( is_op ( * * pos ) && ! is_var ( * pos ) ) )		1306848	0					
ANR	1306852	Condition	* * pos && ! ( is_op ( * * pos ) && ! is_var ( * pos ) )	40:8:636:678	1306848	0	True				
ANR	1306853	AndExpression	* * pos && ! ( is_op ( * * pos ) && ! is_var ( * pos ) )		1306848	0		&&			
ANR	1306854	UnaryOperationExpression	* * pos		1306848	0					
ANR	1306855	UnaryOperator	*		1306848	0					
ANR	1306856	UnaryOperationExpression	* pos		1306848	1					
ANR	1306857	UnaryOperator	*		1306848	0					
ANR	1306858	Identifier	pos		1306848	1					
ANR	1306859	UnaryOperationExpression	! ( is_op ( * * pos ) && ! is_var ( * pos ) )		1306848	1					
ANR	1306860	UnaryOperator	!		1306848	0					
ANR	1306861	AndExpression	is_op ( * * pos ) && ! is_var ( * pos )		1306848	1		&&			
ANR	1306862	CallExpression	is_op ( * * pos )		1306848	0					
ANR	1306863	Callee	is_op		1306848	0					
ANR	1306864	Identifier	is_op		1306848	0					
ANR	1306865	ArgumentList	* * pos		1306848	1					
ANR	1306866	Argument	* * pos		1306848	0					
ANR	1306867	UnaryOperationExpression	* * pos		1306848	0					
ANR	1306868	UnaryOperator	*		1306848	0					
ANR	1306869	UnaryOperationExpression	* pos		1306848	1					
ANR	1306870	UnaryOperator	*		1306848	0					
ANR	1306871	Identifier	pos		1306848	1					
ANR	1306872	UnaryOperationExpression	! is_var ( * pos )		1306848	1					
ANR	1306873	UnaryOperator	!		1306848	0					
ANR	1306874	CallExpression	is_var ( * pos )		1306848	1					
ANR	1306875	Callee	is_var		1306848	0					
ANR	1306876	Identifier	is_var		1306848	0					
ANR	1306877	ArgumentList	* pos		1306848	1					
ANR	1306878	Argument	* pos		1306848	0					
ANR	1306879	UnaryOperationExpression	* pos		1306848	0					
ANR	1306880	UnaryOperator	*		1306848	0					
ANR	1306881	Identifier	pos		1306848	1					
ANR	1306882	CompoundStatement		2:53:54:54	1306848	1					
ANR	1306883	ExpressionStatement	( * pos ) ++	41:2:685:693	1306848	0	True				
ANR	1306884	PostIncDecOperationExpression	( * pos ) ++		1306848	0					
ANR	1306885	UnaryOperationExpression	* pos		1306848	0					
ANR	1306886	UnaryOperator	*		1306848	0					
ANR	1306887	Identifier	pos		1306848	1					
ANR	1306888	IncDec	++		1306848	1					
ANR	1306889	ReturnStatement	return ( * * pos ) ? ( ( is_op ( * * pos ) ) + 1 ) : 0 ;	43:1:699:739	1306848	1	True				
ANR	1306890	ConditionalExpression	( * * pos ) ? ( ( is_op ( * * pos ) ) + 1 ) : 0		1306848	0					
ANR	1306891	Condition	* * pos		1306848	0					
ANR	1306892	UnaryOperationExpression	* * pos		1306848	0					
ANR	1306893	UnaryOperator	*		1306848	0					
ANR	1306894	UnaryOperationExpression	* pos		1306848	1					
ANR	1306895	UnaryOperator	*		1306848	0					
ANR	1306896	Identifier	pos		1306848	1					
ANR	1306897	AdditiveExpression	( is_op ( * * pos ) ) + 1		1306848	1		+			
ANR	1306898	CallExpression	is_op ( * * pos )		1306848	0					
ANR	1306899	Callee	is_op		1306848	0					
ANR	1306900	Identifier	is_op		1306848	0					
ANR	1306901	ArgumentList	* * pos		1306848	1					
ANR	1306902	Argument	* * pos		1306848	0					
ANR	1306903	UnaryOperationExpression	* * pos		1306848	0					
ANR	1306904	UnaryOperator	*		1306848	0					
ANR	1306905	UnaryOperationExpression	* pos		1306848	1					
ANR	1306906	UnaryOperator	*		1306848	0					
ANR	1306907	Identifier	pos		1306848	1					
ANR	1306908	PrimaryExpression	1		1306848	1					
ANR	1306909	PrimaryExpression	0		1306848	2					
ANR	1306910	ReturnType	static inline int		1306848	1					
ANR	1306911	Identifier	get_op		1306848	2					
ANR	1306912	ParameterList	char * * pos		1306848	3					
ANR	1306913	Parameter	char * * pos	39:25:615:624	1306848	0	True				
ANR	1306914	ParameterType	char * *		1306848	0					
ANR	1306915	Identifier	pos		1306848	1					
ANR	1306916	CFGEntryNode	ENTRY		1306848		True				
ANR	1306917	CFGExitNode	EXIT		1306848		True				
ANR	1306918	Symbol	pos		1306848						
ANR	1306919	Symbol	* * pos		1306848						
ANR	1306920	Symbol	is_op		1306848						
ANR	1306921	Symbol	is_var		1306848						
ANR	1306922	Symbol	* pos		1306848						
ANR	1306923	Function	trim	48:0:830:945							
ANR	1306924	FunctionDef	trim (char * s)		1306923	0					
ANR	1306925	CompoundStatement		48:27:857:945	1306923	0					
ANR	1306926	IdentifierDeclStatement	char * o ;	49:1:860:867	1306923	0	True				
ANR	1306927	IdentifierDecl	* o		1306923	0					
ANR	1306928	IdentifierDeclType	char *		1306923	0					
ANR	1306929	Identifier	o		1306923	1					
ANR	1306930	ForStatement	for ( o = s ; * o ; o ++ )		1306923	1					
ANR	1306931	ForInit	o = s ;	50:6:875:880	1306923	0	True				
ANR	1306932	AssignmentExpression	o = s		1306923	0		=			
ANR	1306933	Identifier	o		1306923	0					
ANR	1306934	Identifier	s		1306923	1					
ANR	1306935	Condition	* o	50:13:882:883	1306923	1	True				
ANR	1306936	UnaryOperationExpression	* o		1306923	0					
ANR	1306937	UnaryOperator	*		1306923	0					
ANR	1306938	Identifier	o		1306923	1					
ANR	1306939	PostIncDecOperationExpression	o ++	50:17:886:888	1306923	2	True				
ANR	1306940	Identifier	o		1306923	0					
ANR	1306941	IncDec	++		1306923	1					
ANR	1306942	CompoundStatement		3:22:33:33	1306923	3					
ANR	1306943	IfStatement	if ( is_space ( * o ) )		1306923	0					
ANR	1306944	Condition	is_space ( * o )	51:6:899:911	1306923	0	True				
ANR	1306945	CallExpression	is_space ( * o )		1306923	0					
ANR	1306946	Callee	is_space		1306923	0					
ANR	1306947	Identifier	is_space		1306923	0					
ANR	1306948	ArgumentList	* o		1306923	1					
ANR	1306949	Argument	* o		1306923	0					
ANR	1306950	UnaryOperationExpression	* o		1306923	0					
ANR	1306951	UnaryOperator	*		1306923	0					
ANR	1306952	Identifier	o		1306923	1					
ANR	1306953	CompoundStatement		4:21:56:56	1306923	1					
ANR	1306954	ExpressionStatement	* o = 0	52:3:919:925	1306923	0	True				
ANR	1306955	AssignmentExpression	* o = 0		1306923	0		=			
ANR	1306956	UnaryOperationExpression	* o		1306923	0					
ANR	1306957	UnaryOperator	*		1306923	0					
ANR	1306958	Identifier	o		1306923	1					
ANR	1306959	PrimaryExpression	0		1306923	1					
ANR	1306960	ReturnStatement	return s ;	55:1:935:943	1306923	2	True				
ANR	1306961	Identifier	s		1306923	0					
ANR	1306962	ReturnType	static char *		1306923	1					
ANR	1306963	Identifier	trim		1306923	2					
ANR	1306964	ParameterList	char * s		1306923	3					
ANR	1306965	Parameter	char * s	48:18:848:854	1306923	0	True				
ANR	1306966	ParameterType	char *		1306923	0					
ANR	1306967	Identifier	s		1306923	1					
ANR	1306968	CFGEntryNode	ENTRY		1306923		True				
ANR	1306969	CFGExitNode	EXIT		1306923		True				
ANR	1306970	Symbol	s		1306923						
ANR	1306971	Symbol	* o		1306923						
ANR	1306972	Symbol	is_space		1306923						
ANR	1306973	Symbol	o		1306923						
ANR	1306974	DeclStmt									
ANR	1306975	Decl							void	"void ( REgg * egg , char * str , int filter )"	rcc_pushstr
ANR	1306976	DeclStmt									
ANR	1306977	Decl							void	"void ( REgg * egg , int delta )"	rcc_context
ANR	1306978	ClassDef	<unnamed>	61:0:1055:1154							
ANR	1306979	Function	find_include	74:0:1158:2182							
ANR	1306980	FunctionDef	"find_include (const char * prefix , const char * file)"		1306979	0					
ANR	1306981	CompoundStatement		74:64:1222:2182	1306979	0					
ANR	1306982	IdentifierDeclStatement	"char * pfx = NULL , * ret = NULL , * env = r_sys_getenv ( R_EGG_INCDIR_ENV ) ;"	75:1:1225:1294	1306979	0	True				
ANR	1306983	IdentifierDecl	* pfx = NULL		1306979	0					
ANR	1306984	IdentifierDeclType	char *		1306979	0					
ANR	1306985	Identifier	pfx		1306979	1					
ANR	1306986	AssignmentExpression	* pfx = NULL		1306979	2		=			
ANR	1306987	Identifier	NULL		1306979	0					
ANR	1306988	Identifier	NULL		1306979	1					
ANR	1306989	IdentifierDecl	* ret = NULL		1306979	1					
ANR	1306990	IdentifierDeclType	char *		1306979	0					
ANR	1306991	Identifier	ret		1306979	1					
ANR	1306992	AssignmentExpression	* ret = NULL		1306979	2		=			
ANR	1306993	Identifier	NULL		1306979	0					
ANR	1306994	Identifier	NULL		1306979	1					
ANR	1306995	IdentifierDecl	* env = r_sys_getenv ( R_EGG_INCDIR_ENV )		1306979	2					
ANR	1306996	IdentifierDeclType	char *		1306979	0					
ANR	1306997	Identifier	env		1306979	1					
ANR	1306998	AssignmentExpression	* env = r_sys_getenv ( R_EGG_INCDIR_ENV )		1306979	2		=			
ANR	1306999	Identifier	env		1306979	0					
ANR	1307000	CallExpression	r_sys_getenv ( R_EGG_INCDIR_ENV )		1306979	1					
ANR	1307001	Callee	r_sys_getenv		1306979	0					
ANR	1307002	Identifier	r_sys_getenv		1306979	0					
ANR	1307003	ArgumentList	R_EGG_INCDIR_ENV		1306979	1					
ANR	1307004	Argument	R_EGG_INCDIR_ENV		1306979	0					
ANR	1307005	Identifier	R_EGG_INCDIR_ENV		1306979	0					
ANR	1307006	IfStatement	if ( ! prefix )		1306979	1					
ANR	1307007	Condition	! prefix	76:5:1301:1307	1306979	0	True				
ANR	1307008	UnaryOperationExpression	! prefix		1306979	0					
ANR	1307009	UnaryOperator	!		1306979	0					
ANR	1307010	Identifier	prefix		1306979	1					
ANR	1307011	CompoundStatement		3:14:87:87	1306979	1					
ANR	1307012	ExpressionStatement	"prefix = """""	77:2:1314:1325	1306979	0	True				
ANR	1307013	AssignmentExpression	"prefix = """""		1306979	0		=			
ANR	1307014	Identifier	prefix		1306979	0					
ANR	1307015	PrimaryExpression	""""""		1306979	1					
ANR	1307016	IfStatement	if ( * prefix == '$' )		1306979	2					
ANR	1307017	Condition	* prefix == '$'	79:5:1335:1348	1306979	0	True				
ANR	1307018	EqualityExpression	* prefix == '$'		1306979	0		==			
ANR	1307019	UnaryOperationExpression	* prefix		1306979	0					
ANR	1307020	UnaryOperator	*		1306979	0					
ANR	1307021	Identifier	prefix		1306979	1					
ANR	1307022	PrimaryExpression	'$'		1306979	1					
ANR	1307023	CompoundStatement		7:2:132:169	1306979	1					
ANR	1307024	IdentifierDeclStatement	char * out = r_sys_getenv ( prefix + 1 ) ;	80:2:1355:1392	1306979	0	True				
ANR	1307025	IdentifierDecl	* out = r_sys_getenv ( prefix + 1 )		1306979	0					
ANR	1307026	IdentifierDeclType	char *		1306979	0					
ANR	1307027	Identifier	out		1306979	1					
ANR	1307028	AssignmentExpression	* out = r_sys_getenv ( prefix + 1 )		1306979	2		=			
ANR	1307029	Identifier	out		1306979	0					
ANR	1307030	CallExpression	r_sys_getenv ( prefix + 1 )		1306979	1					
ANR	1307031	Callee	r_sys_getenv		1306979	0					
ANR	1307032	Identifier	r_sys_getenv		1306979	0					
ANR	1307033	ArgumentList	prefix + 1		1306979	1					
ANR	1307034	Argument	prefix + 1		1306979	0					
ANR	1307035	AdditiveExpression	prefix + 1		1306979	0		+			
ANR	1307036	Identifier	prefix		1306979	0					
ANR	1307037	PrimaryExpression	1		1306979	1					
ANR	1307038	ExpressionStatement	"pfx = out ? out : strdup ( """" )"	81:2:1396:1423	1306979	1	True				
ANR	1307039	AssignmentExpression	"pfx = out ? out : strdup ( """" )"		1306979	0		=			
ANR	1307040	Identifier	pfx		1306979	0					
ANR	1307041	ConditionalExpression	"out ? out : strdup ( """" )"		1306979	1					
ANR	1307042	Condition	out		1306979	0					
ANR	1307043	Identifier	out		1306979	0					
ANR	1307044	Identifier	out		1306979	1					
ANR	1307045	CallExpression	"strdup ( """" )"		1306979	2					
ANR	1307046	Callee	strdup		1306979	0					
ANR	1307047	Identifier	strdup		1306979	0					
ANR	1307048	ArgumentList	""""""		1306979	1					
ANR	1307049	Argument	""""""		1306979	0					
ANR	1307050	PrimaryExpression	""""""		1306979	0					
ANR	1307051	ElseStatement	else		1306979	0					
ANR	1307052	CompoundStatement		9:8:210:210	1306979	0					
ANR	1307053	ExpressionStatement	pfx = strdup ( prefix )	83:2:1437:1458	1306979	0	True				
ANR	1307054	AssignmentExpression	pfx = strdup ( prefix )		1306979	0		=			
ANR	1307055	Identifier	pfx		1306979	0					
ANR	1307056	CallExpression	strdup ( prefix )		1306979	1					
ANR	1307057	Callee	strdup		1306979	0					
ANR	1307058	Identifier	strdup		1306979	0					
ANR	1307059	ArgumentList	prefix		1306979	1					
ANR	1307060	Argument	prefix		1306979	0					
ANR	1307061	Identifier	prefix		1306979	0					
ANR	1307062	IfStatement	if ( ! pfx )		1306979	1					
ANR	1307063	Condition	! pfx	84:6:1466:1469	1306979	0	True				
ANR	1307064	UnaryOperationExpression	! pfx		1306979	0					
ANR	1307065	UnaryOperator	!		1306979	0					
ANR	1307066	Identifier	pfx		1306979	1					
ANR	1307067	CompoundStatement		11:12:249:249	1306979	1					
ANR	1307068	ExpressionStatement	free ( env )	85:3:1477:1487	1306979	0	True				
ANR	1307069	CallExpression	free ( env )		1306979	0					
ANR	1307070	Callee	free		1306979	0					
ANR	1307071	Identifier	free		1306979	0					
ANR	1307072	ArgumentList	env		1306979	1					
ANR	1307073	Argument	env		1306979	0					
ANR	1307074	Identifier	env		1306979	0					
ANR	1307075	ReturnStatement	return NULL ;	86:3:1492:1503	1306979	1	True				
ANR	1307076	Identifier	NULL		1306979	0					
ANR	1307077	IfStatement	if ( env )		1306979	3					
ANR	1307078	Condition	env	90:5:1518:1520	1306979	0	True				
ANR	1307079	Identifier	env		1306979	0					
ANR	1307080	CompoundStatement		18:2:304:339	1306979	1					
ANR	1307081	IdentifierDeclStatement	"char * str , * ptr = strchr ( env , ':' ) ;"	91:2:1527:1562	1306979	0	True				
ANR	1307082	IdentifierDecl	* str		1306979	0					
ANR	1307083	IdentifierDeclType	char *		1306979	0					
ANR	1307084	Identifier	str		1306979	1					
ANR	1307085	IdentifierDecl	"* ptr = strchr ( env , ':' )"		1306979	1					
ANR	1307086	IdentifierDeclType	char *		1306979	0					
ANR	1307087	Identifier	ptr		1306979	1					
ANR	1307088	AssignmentExpression	"* ptr = strchr ( env , ':' )"		1306979	2		=			
ANR	1307089	Identifier	ptr		1306979	0					
ANR	1307090	CallExpression	"strchr ( env , ':' )"		1306979	1					
ANR	1307091	Callee	strchr		1306979	0					
ANR	1307092	Identifier	strchr		1306979	0					
ANR	1307093	ArgumentList	env		1306979	1					
ANR	1307094	Argument	env		1306979	0					
ANR	1307095	Identifier	env		1306979	0					
ANR	1307096	Argument	':'		1306979	1					
ANR	1307097	PrimaryExpression	':'		1306979	0					
ANR	1307098	ExpressionStatement	str = env	93:2:1614:1623	1306979	1	True				
ANR	1307099	AssignmentExpression	str = env		1306979	0		=			
ANR	1307100	Identifier	str		1306979	0					
ANR	1307101	Identifier	env		1306979	1					
ANR	1307102	WhileStatement	while ( str )		1306979	2					
ANR	1307103	Condition	str	94:9:1634:1636	1306979	0	True				
ANR	1307104	Identifier	str		1306979	0					
ANR	1307105	CompoundStatement		21:14:416:416	1306979	1					
ANR	1307106	IfStatement	if ( ptr )		1306979	0					
ANR	1307107	Condition	ptr	95:7:1648:1650	1306979	0	True				
ANR	1307108	Identifier	ptr		1306979	0					
ANR	1307109	CompoundStatement		22:12:430:430	1306979	1					
ANR	1307110	ExpressionStatement	* ptr = 0	96:4:1659:1667	1306979	0	True				
ANR	1307111	AssignmentExpression	* ptr = 0		1306979	0		=			
ANR	1307112	UnaryOperationExpression	* ptr		1306979	0					
ANR	1307113	UnaryOperator	*		1306979	0					
ANR	1307114	Identifier	ptr		1306979	1					
ANR	1307115	PrimaryExpression	0		1306979	1					
ANR	1307116	ExpressionStatement	free ( ret )	98:3:1677:1687	1306979	1	True				
ANR	1307117	CallExpression	free ( ret )		1306979	0					
ANR	1307118	Callee	free		1306979	0					
ANR	1307119	Identifier	free		1306979	0					
ANR	1307120	ArgumentList	ret		1306979	1					
ANR	1307121	Argument	ret		1306979	0					
ANR	1307122	Identifier	ret		1306979	0					
ANR	1307123	ExpressionStatement	"ret = r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"	99:3:1692:1738	1306979	2	True				
ANR	1307124	AssignmentExpression	"ret = r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"		1306979	0		=			
ANR	1307125	Identifier	ret		1306979	0					
ANR	1307126	CallExpression	"r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"		1306979	1					
ANR	1307127	Callee	r_str_appendf		1306979	0					
ANR	1307128	Identifier	r_str_appendf		1306979	0					
ANR	1307129	ArgumentList	NULL		1306979	1					
ANR	1307130	Argument	NULL		1306979	0					
ANR	1307131	Identifier	NULL		1306979	0					
ANR	1307132	Argument	"""%s/%s"""		1306979	1					
ANR	1307133	PrimaryExpression	"""%s/%s"""		1306979	0					
ANR	1307134	Argument	pfx		1306979	2					
ANR	1307135	Identifier	pfx		1306979	0					
ANR	1307136	Argument	file		1306979	3					
ANR	1307137	Identifier	file		1306979	0					
ANR	1307138	CompoundStatement		28:4:526:591	1306979	3					
ANR	1307139	IdentifierDeclStatement	"char * filepath = r_str_appendf ( NULL , ""%s/%s/%s"" , str , pfx , file ) ;"	101:4:1749:1814	1306979	0	True				
ANR	1307140	IdentifierDecl	"* filepath = r_str_appendf ( NULL , ""%s/%s/%s"" , str , pfx , file )"		1306979	0					
ANR	1307141	IdentifierDeclType	char *		1306979	0					
ANR	1307142	Identifier	filepath		1306979	1					
ANR	1307143	AssignmentExpression	"* filepath = r_str_appendf ( NULL , ""%s/%s/%s"" , str , pfx , file )"		1306979	2		=			
ANR	1307144	Identifier	filepath		1306979	0					
ANR	1307145	CallExpression	"r_str_appendf ( NULL , ""%s/%s/%s"" , str , pfx , file )"		1306979	1					
ANR	1307146	Callee	r_str_appendf		1306979	0					
ANR	1307147	Identifier	r_str_appendf		1306979	0					
ANR	1307148	ArgumentList	NULL		1306979	1					
ANR	1307149	Argument	NULL		1306979	0					
ANR	1307150	Identifier	NULL		1306979	0					
ANR	1307151	Argument	"""%s/%s/%s"""		1306979	1					
ANR	1307152	PrimaryExpression	"""%s/%s/%s"""		1306979	0					
ANR	1307153	Argument	str		1306979	2					
ANR	1307154	Identifier	str		1306979	0					
ANR	1307155	Argument	pfx		1306979	3					
ANR	1307156	Identifier	pfx		1306979	0					
ANR	1307157	Argument	file		1306979	4					
ANR	1307158	Identifier	file		1306979	0					
ANR	1307159	IfStatement	if ( r_file_exists ( filepath ) )		1306979	1					
ANR	1307160	Condition	r_file_exists ( filepath )	103:8:1865:1888	1306979	0	True				
ANR	1307161	CallExpression	r_file_exists ( filepath )		1306979	0					
ANR	1307162	Callee	r_file_exists		1306979	0					
ANR	1307163	Identifier	r_file_exists		1306979	0					
ANR	1307164	ArgumentList	filepath		1306979	1					
ANR	1307165	Argument	filepath		1306979	0					
ANR	1307166	Identifier	filepath		1306979	0					
ANR	1307167	CompoundStatement		30:34:668:668	1306979	1					
ANR	1307168	ExpressionStatement	free ( env )	104:5:1898:1908	1306979	0	True				
ANR	1307169	CallExpression	free ( env )		1306979	0					
ANR	1307170	Callee	free		1306979	0					
ANR	1307171	Identifier	free		1306979	0					
ANR	1307172	ArgumentList	env		1306979	1					
ANR	1307173	Argument	env		1306979	0					
ANR	1307174	Identifier	env		1306979	0					
ANR	1307175	ExpressionStatement	free ( pfx )	105:5:1915:1925	1306979	1	True				
ANR	1307176	CallExpression	free ( pfx )		1306979	0					
ANR	1307177	Callee	free		1306979	0					
ANR	1307178	Identifier	free		1306979	0					
ANR	1307179	ArgumentList	pfx		1306979	1					
ANR	1307180	Argument	pfx		1306979	0					
ANR	1307181	Identifier	pfx		1306979	0					
ANR	1307182	ExpressionStatement	free ( ret )	106:5:1932:1942	1306979	2	True				
ANR	1307183	CallExpression	free ( ret )		1306979	0					
ANR	1307184	Callee	free		1306979	0					
ANR	1307185	Identifier	free		1306979	0					
ANR	1307186	ArgumentList	ret		1306979	1					
ANR	1307187	Argument	ret		1306979	0					
ANR	1307188	Identifier	ret		1306979	0					
ANR	1307189	ReturnStatement	return filepath ;	107:5:1949:1964	1306979	3	True				
ANR	1307190	Identifier	filepath		1306979	0					
ANR	1307191	ExpressionStatement	free ( filepath )	109:4:1976:1991	1306979	2	True				
ANR	1307192	CallExpression	free ( filepath )		1306979	0					
ANR	1307193	Callee	free		1306979	0					
ANR	1307194	Identifier	free		1306979	0					
ANR	1307195	ArgumentList	filepath		1306979	1					
ANR	1307196	Argument	filepath		1306979	0					
ANR	1307197	Identifier	filepath		1306979	0					
ANR	1307198	IfStatement	if ( ! ptr )		1306979	4					
ANR	1307199	Condition	! ptr	111:7:2005:2008	1306979	0	True				
ANR	1307200	UnaryOperationExpression	! ptr		1306979	0					
ANR	1307201	UnaryOperator	!		1306979	0					
ANR	1307202	Identifier	ptr		1306979	1					
ANR	1307203	CompoundStatement		38:13:788:788	1306979	1					
ANR	1307204	BreakStatement	break ;	112:4:2017:2022	1306979	0	True				
ANR	1307205	ExpressionStatement	str = ptr + 1	114:3:2032:2045	1306979	5	True				
ANR	1307206	AssignmentExpression	str = ptr + 1		1306979	0		=			
ANR	1307207	Identifier	str		1306979	0					
ANR	1307208	AdditiveExpression	ptr + 1		1306979	1		+			
ANR	1307209	Identifier	ptr		1306979	0					
ANR	1307210	PrimaryExpression	1		1306979	1					
ANR	1307211	ExpressionStatement	"ptr = strchr ( str , ':' )"	115:3:2050:2073	1306979	6	True				
ANR	1307212	AssignmentExpression	"ptr = strchr ( str , ':' )"		1306979	0		=			
ANR	1307213	Identifier	ptr		1306979	0					
ANR	1307214	CallExpression	"strchr ( str , ':' )"		1306979	1					
ANR	1307215	Callee	strchr		1306979	0					
ANR	1307216	Identifier	strchr		1306979	0					
ANR	1307217	ArgumentList	str		1306979	1					
ANR	1307218	Argument	str		1306979	0					
ANR	1307219	Identifier	str		1306979	0					
ANR	1307220	Argument	':'		1306979	1					
ANR	1307221	PrimaryExpression	':'		1306979	0					
ANR	1307222	ExpressionStatement	free ( env )	117:2:2081:2091	1306979	3	True				
ANR	1307223	CallExpression	free ( env )		1306979	0					
ANR	1307224	Callee	free		1306979	0					
ANR	1307225	Identifier	free		1306979	0					
ANR	1307226	ArgumentList	env		1306979	1					
ANR	1307227	Argument	env		1306979	0					
ANR	1307228	Identifier	env		1306979	0					
ANR	1307229	ElseStatement	else		1306979	0					
ANR	1307230	CompoundStatement		45:8:878:878	1306979	0					
ANR	1307231	ExpressionStatement	"ret = r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"	119:2:2105:2151	1306979	0	True				
ANR	1307232	AssignmentExpression	"ret = r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"		1306979	0		=			
ANR	1307233	Identifier	ret		1306979	0					
ANR	1307234	CallExpression	"r_str_appendf ( NULL , ""%s/%s"" , pfx , file )"		1306979	1					
ANR	1307235	Callee	r_str_appendf		1306979	0					
ANR	1307236	Identifier	r_str_appendf		1306979	0					
ANR	1307237	ArgumentList	NULL		1306979	1					
ANR	1307238	Argument	NULL		1306979	0					
ANR	1307239	Identifier	NULL		1306979	0					
ANR	1307240	Argument	"""%s/%s"""		1306979	1					
ANR	1307241	PrimaryExpression	"""%s/%s"""		1306979	0					
ANR	1307242	Argument	pfx		1306979	2					
ANR	1307243	Identifier	pfx		1306979	0					
ANR	1307244	Argument	file		1306979	3					
ANR	1307245	Identifier	file		1306979	0					
ANR	1307246	ExpressionStatement	free ( pfx )	121:1:2157:2167	1306979	4	True				
ANR	1307247	CallExpression	free ( pfx )		1306979	0					
ANR	1307248	Callee	free		1306979	0					
ANR	1307249	Identifier	free		1306979	0					
ANR	1307250	ArgumentList	pfx		1306979	1					
ANR	1307251	Argument	pfx		1306979	0					
ANR	1307252	Identifier	pfx		1306979	0					
ANR	1307253	ReturnStatement	return ret ;	122:1:2170:2180	1306979	5	True				
ANR	1307254	Identifier	ret		1306979	0					
ANR	1307255	ReturnType	static char *		1306979	1					
ANR	1307256	Identifier	find_include		1306979	2					
ANR	1307257	ParameterList	"const char * prefix , const char * file"		1306979	3					
ANR	1307258	Parameter	const char * prefix	74:26:1184:1201	1306979	0	True				
ANR	1307259	ParameterType	const char *		1306979	0					
ANR	1307260	Identifier	prefix		1306979	1					
ANR	1307261	Parameter	const char * file	74:46:1204:1219	1306979	1	True				
ANR	1307262	ParameterType	const char *		1306979	0					
ANR	1307263	Identifier	file		1306979	1					
ANR	1307264	CFGEntryNode	ENTRY		1306979		True				
ANR	1307265	CFGExitNode	EXIT		1306979		True				
ANR	1307266	Symbol	ret		1306979						
ANR	1307267	Symbol	NULL		1306979						
ANR	1307268	Symbol	pfx		1306979						
ANR	1307269	Symbol	* prefix		1306979						
ANR	1307270	Symbol	prefix		1306979						
ANR	1307271	Symbol	r_sys_getenv		1306979						
ANR	1307272	Symbol	strchr		1306979						
ANR	1307273	Symbol	env		1306979						
ANR	1307274	Symbol	R_EGG_INCDIR_ENV		1306979						
ANR	1307275	Symbol	out		1306979						
ANR	1307276	Symbol	ptr		1306979						
ANR	1307277	Symbol	str		1306979						
ANR	1307278	Symbol	file		1306979						
ANR	1307279	Symbol	filepath		1306979						
ANR	1307280	Symbol	r_str_appendf		1306979						
ANR	1307281	Symbol	* ptr		1306979						
ANR	1307282	Symbol	strdup		1306979						
ANR	1307283	Symbol	r_file_exists		1306979						
ANR	1307284	Function	r_egg_lang_init	125:0:2185:2408							
ANR	1307285	FunctionDef	r_egg_lang_init (REgg * egg)		1307284	0					
ANR	1307286	CompoundStatement		125:38:2223:2408	1307284	0					
ANR	1307287	ExpressionStatement	egg -> lang . varsize = 'l'	126:1:2226:2249	1307284	0	True				
ANR	1307288	AssignmentExpression	egg -> lang . varsize = 'l'		1307284	0		=			
ANR	1307289	MemberAccess	egg -> lang . varsize		1307284	0					
ANR	1307290	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307291	Identifier	egg		1307284	0					
ANR	1307292	Identifier	lang		1307284	1					
ANR	1307293	Identifier	varsize		1307284	1					
ANR	1307294	PrimaryExpression	'l'		1307284	1					
ANR	1307295	ExpressionStatement	egg -> lang . docall = 1	128:1:2290:2310	1307284	1	True				
ANR	1307296	AssignmentExpression	egg -> lang . docall = 1		1307284	0		=			
ANR	1307297	MemberAccess	egg -> lang . docall		1307284	0					
ANR	1307298	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307299	Identifier	egg		1307284	0					
ANR	1307300	Identifier	lang		1307284	1					
ANR	1307301	Identifier	docall		1307284	1					
ANR	1307302	PrimaryExpression	1		1307284	1					
ANR	1307303	ExpressionStatement	egg -> lang . line = 1	129:1:2313:2331	1307284	2	True				
ANR	1307304	AssignmentExpression	egg -> lang . line = 1		1307284	0		=			
ANR	1307305	MemberAccess	egg -> lang . line		1307284	0					
ANR	1307306	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307307	Identifier	egg		1307284	0					
ANR	1307308	Identifier	lang		1307284	1					
ANR	1307309	Identifier	line		1307284	1					
ANR	1307310	PrimaryExpression	1		1307284	1					
ANR	1307311	ExpressionStatement	"egg -> lang . file = ""stdin"""	130:1:2334:2358	1307284	3	True				
ANR	1307312	AssignmentExpression	"egg -> lang . file = ""stdin"""		1307284	0		=			
ANR	1307313	MemberAccess	egg -> lang . file		1307284	0					
ANR	1307314	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307315	Identifier	egg		1307284	0					
ANR	1307316	Identifier	lang		1307284	1					
ANR	1307317	Identifier	file		1307284	1					
ANR	1307318	PrimaryExpression	"""stdin"""		1307284	1					
ANR	1307319	ExpressionStatement	egg -> lang . oc = '\\n'	131:1:2361:2380	1307284	4	True				
ANR	1307320	AssignmentExpression	egg -> lang . oc = '\\n'		1307284	0		=			
ANR	1307321	MemberAccess	egg -> lang . oc		1307284	0					
ANR	1307322	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307323	Identifier	egg		1307284	0					
ANR	1307324	Identifier	lang		1307284	1					
ANR	1307325	Identifier	oc		1307284	1					
ANR	1307326	PrimaryExpression	'\\n'		1307284	1					
ANR	1307327	ExpressionStatement	egg -> lang . mode = NORMAL	132:1:2383:2406	1307284	5	True				
ANR	1307328	AssignmentExpression	egg -> lang . mode = NORMAL		1307284	0		=			
ANR	1307329	MemberAccess	egg -> lang . mode		1307284	0					
ANR	1307330	PtrMemberAccess	egg -> lang		1307284	0					
ANR	1307331	Identifier	egg		1307284	0					
ANR	1307332	Identifier	lang		1307284	1					
ANR	1307333	Identifier	mode		1307284	1					
ANR	1307334	Identifier	NORMAL		1307284	1					
ANR	1307335	ReturnType	R_API void		1307284	1					
ANR	1307336	Identifier	r_egg_lang_init		1307284	2					
ANR	1307337	ParameterList	REgg * egg		1307284	3					
ANR	1307338	Parameter	REgg * egg	125:27:2212:2220	1307284	0	True				
ANR	1307339	ParameterType	REgg *		1307284	0					
ANR	1307340	Identifier	egg		1307284	1					
ANR	1307341	CFGEntryNode	ENTRY		1307284		True				
ANR	1307342	CFGExitNode	EXIT		1307284		True				
ANR	1307343	Symbol	* egg		1307284						
ANR	1307344	Symbol	egg -> lang . oc		1307284						
ANR	1307345	Symbol	egg		1307284						
ANR	1307346	Symbol	egg -> lang . varsize		1307284						
ANR	1307347	Symbol	egg -> lang . file		1307284						
ANR	1307348	Symbol	egg -> lang . line		1307284						
ANR	1307349	Symbol	egg -> lang		1307284						
ANR	1307350	Symbol	egg -> lang . docall		1307284						
ANR	1307351	Symbol	NORMAL		1307284						
ANR	1307352	Symbol	egg -> lang . mode		1307284						
ANR	1307353	Function	r_egg_lang_free	135:0:2411:2710							
ANR	1307354	FunctionDef	r_egg_lang_free (REgg * egg)		1307353	0					
ANR	1307355	CompoundStatement		135:38:2449:2710	1307353	0					
ANR	1307356	IdentifierDeclStatement	"int i , len ;"	136:1:2452:2462	1307353	0	True				
ANR	1307357	IdentifierDecl	i		1307353	0					
ANR	1307358	IdentifierDeclType	int		1307353	0					
ANR	1307359	Identifier	i		1307353	1					
ANR	1307360	IdentifierDecl	len		1307353	1					
ANR	1307361	IdentifierDeclType	int		1307353	0					
ANR	1307362	Identifier	len		1307353	1					
ANR	1307363	ForStatement	for ( i = 0 ; i < egg -> lang . nsyscalls ; i ++ )		1307353	1					
ANR	1307364	ForInit	i = 0 ;	138:6:2471:2476	1307353	0	True				
ANR	1307365	AssignmentExpression	i = 0		1307353	0		=			
ANR	1307366	Identifier	i		1307353	0					
ANR	1307367	PrimaryExpression	0		1307353	1					
ANR	1307368	Condition	i < egg -> lang . nsyscalls	138:13:2478:2500	1307353	1	True				
ANR	1307369	RelationalExpression	i < egg -> lang . nsyscalls		1307353	0		<			
ANR	1307370	Identifier	i		1307353	0					
ANR	1307371	MemberAccess	egg -> lang . nsyscalls		1307353	1					
ANR	1307372	PtrMemberAccess	egg -> lang		1307353	0					
ANR	1307373	Identifier	egg		1307353	0					
ANR	1307374	Identifier	lang		1307353	1					
ANR	1307375	Identifier	nsyscalls		1307353	1					
ANR	1307376	PostIncDecOperationExpression	i ++	138:38:2503:2505	1307353	2	True				
ANR	1307377	Identifier	i		1307353	0					
ANR	1307378	IncDec	++		1307353	1					
ANR	1307379	CompoundStatement		4:43:58:58	1307353	3					
ANR	1307380	ExpressionStatement	R_FREE ( egg -> lang . syscalls [ i ] . name )	139:3:2513:2548	1307353	0	True				
ANR	1307381	CallExpression	R_FREE ( egg -> lang . syscalls [ i ] . name )		1307353	0					
ANR	1307382	Callee	R_FREE		1307353	0					
ANR	1307383	Identifier	R_FREE		1307353	0					
ANR	1307384	ArgumentList	egg -> lang . syscalls [ i ] . name		1307353	1					
ANR	1307385	Argument	egg -> lang . syscalls [ i ] . name		1307353	0					
ANR	1307386	MemberAccess	egg -> lang . syscalls [ i ] . name		1307353	0					
ANR	1307387	ArrayIndexing	egg -> lang . syscalls [ i ]		1307353	0					
ANR	1307388	MemberAccess	egg -> lang . syscalls		1307353	0					
ANR	1307389	PtrMemberAccess	egg -> lang		1307353	0					
ANR	1307390	Identifier	egg		1307353	0					
ANR	1307391	Identifier	lang		1307353	1					
ANR	1307392	Identifier	syscalls		1307353	1					
ANR	1307393	Identifier	i		1307353	1					
ANR	1307394	Identifier	name		1307353	1					
ANR	1307395	ExpressionStatement	R_FREE ( egg -> lang . syscalls [ i ] . arg )	140:3:2553:2587	1307353	1	True				
ANR	1307396	CallExpression	R_FREE ( egg -> lang . syscalls [ i ] . arg )		1307353	0					
ANR	1307397	Callee	R_FREE		1307353	0					
ANR	1307398	Identifier	R_FREE		1307353	0					
ANR	1307399	ArgumentList	egg -> lang . syscalls [ i ] . arg		1307353	1					
ANR	1307400	Argument	egg -> lang . syscalls [ i ] . arg		1307353	0					
ANR	1307401	MemberAccess	egg -> lang . syscalls [ i ] . arg		1307353	0					
ANR	1307402	ArrayIndexing	egg -> lang . syscalls [ i ]		1307353	0					
ANR	1307403	MemberAccess	egg -> lang . syscalls		1307353	0					
ANR	1307404	PtrMemberAccess	egg -> lang		1307353	0					
ANR	1307405	Identifier	egg		1307353	0					
ANR	1307406	Identifier	lang		1307353	1					
ANR	1307407	Identifier	syscalls		1307353	1					
ANR	1307408	Identifier	i		1307353	1					
ANR	1307409	Identifier	arg		1307353	1					
ANR	1307410	ExpressionStatement	len = sizeof ( egg -> lang . ctxpush ) / sizeof ( char * )	142:1:2593:2643	1307353	2	True				
ANR	1307411	AssignmentExpression	len = sizeof ( egg -> lang . ctxpush ) / sizeof ( char * )		1307353	0		=			
ANR	1307412	Identifier	len		1307353	0					
ANR	1307413	MultiplicativeExpression	sizeof ( egg -> lang . ctxpush ) / sizeof ( char * )		1307353	1		/			
ANR	1307414	SizeofExpression	sizeof ( egg -> lang . ctxpush )		1307353	0					
ANR	1307415	Sizeof	sizeof		1307353	0					
ANR	1307416	MemberAccess	egg -> lang . ctxpush		1307353	1					
ANR	1307417	PtrMemberAccess	egg -> lang		1307353	0					
ANR	1307418	Identifier	egg		1307353	0					
ANR	1307419	Identifier	lang		1307353	1					
ANR	1307420	Identifier	ctxpush		1307353	1					
ANR	1307421	SizeofExpression	sizeof ( char * )		1307353	1					
ANR	1307422	Sizeof	sizeof		1307353	0					
ANR	1307423	SizeofOperand	char *		1307353	1					
ANR	1307424	ForStatement	for ( i = 0 ; i < len ; i ++ )		1307353	3					
ANR	1307425	ForInit	i = 0 ;	143:6:2651:2656	1307353	0	True				
ANR	1307426	AssignmentExpression	i = 0		1307353	0		=			
ANR	1307427	Identifier	i		1307353	0					
ANR	1307428	PrimaryExpression	0		1307353	1					
ANR	1307429	Condition	i < len	143:13:2658:2664	1307353	1	True				
ANR	1307430	RelationalExpression	i < len		1307353	0		<			
ANR	1307431	Identifier	i		1307353	0					
ANR	1307432	Identifier	len		1307353	1					
ANR	1307433	PostIncDecOperationExpression	i ++	143:22:2667:2669	1307353	2	True				
ANR	1307434	Identifier	i		1307353	0					
ANR	1307435	IncDec	++		1307353	1					
ANR	1307436	CompoundStatement		9:27:222:222	1307353	3					
ANR	1307437	ExpressionStatement	R_FREE ( egg -> lang . ctxpush [ i ] )	144:2:2676:2705	1307353	0	True				
ANR	1307438	CallExpression	R_FREE ( egg -> lang . ctxpush [ i ] )		1307353	0					
ANR	1307439	Callee	R_FREE		1307353	0					
ANR	1307440	Identifier	R_FREE		1307353	0					
ANR	1307441	ArgumentList	egg -> lang . ctxpush [ i ]		1307353	1					
ANR	1307442	Argument	egg -> lang . ctxpush [ i ]		1307353	0					
ANR	1307443	ArrayIndexing	egg -> lang . ctxpush [ i ]		1307353	0					
ANR	1307444	MemberAccess	egg -> lang . ctxpush		1307353	0					
ANR	1307445	PtrMemberAccess	egg -> lang		1307353	0					
ANR	1307446	Identifier	egg		1307353	0					
ANR	1307447	Identifier	lang		1307353	1					
ANR	1307448	Identifier	ctxpush		1307353	1					
ANR	1307449	Identifier	i		1307353	1					
ANR	1307450	ReturnType	R_API void		1307353	1					
ANR	1307451	Identifier	r_egg_lang_free		1307353	2					
ANR	1307452	ParameterList	REgg * egg		1307353	3					
ANR	1307453	Parameter	REgg * egg	135:27:2438:2446	1307353	0	True				
ANR	1307454	ParameterType	REgg *		1307353	0					
ANR	1307455	Identifier	egg		1307353	1					
ANR	1307456	CFGEntryNode	ENTRY		1307353		True				
ANR	1307457	CFGExitNode	EXIT		1307353		True				
ANR	1307458	Symbol	egg		1307353						
ANR	1307459	Symbol	egg -> lang . ctxpush		1307353						
ANR	1307460	Symbol	i		1307353						
ANR	1307461	Symbol	* egg -> lang . ctxpush		1307353						
ANR	1307462	Symbol	egg -> lang		1307353						
ANR	1307463	Symbol	* egg -> lang		1307353						
ANR	1307464	Symbol	* egg		1307353						
ANR	1307465	Symbol	* egg -> lang . syscalls		1307353						
ANR	1307466	Symbol	egg -> lang . syscalls		1307353						
ANR	1307467	Symbol	* i		1307353						
ANR	1307468	Symbol	len		1307353						
ANR	1307469	Symbol	egg -> lang . nsyscalls		1307353						
ANR	1307470	Symbol	* * egg		1307353						
ANR	1307471	Symbol	egg -> lang . syscalls [ i ] . arg		1307353						
ANR	1307472	Symbol	egg -> lang . syscalls [ i ] . name		1307353						
ANR	1307473	Function	r_egg_lang_include_path	148:0:2713:3096							
ANR	1307474	FunctionDef	"r_egg_lang_include_path (REgg * egg , const char * path)"		1307473	0					
ANR	1307475	CompoundStatement		148:64:2777:3096	1307473	0					
ANR	1307476	IdentifierDeclStatement	char * tmp_ptr = NULL ;	149:1:2780:2800	1307473	0	True				
ANR	1307477	IdentifierDecl	* tmp_ptr = NULL		1307473	0					
ANR	1307478	IdentifierDeclType	char *		1307473	0					
ANR	1307479	Identifier	tmp_ptr		1307473	1					
ANR	1307480	AssignmentExpression	* tmp_ptr = NULL		1307473	2		=			
ANR	1307481	Identifier	NULL		1307473	0					
ANR	1307482	Identifier	NULL		1307473	1					
ANR	1307483	IdentifierDeclStatement	char * env = r_sys_getenv ( R_EGG_INCDIR_ENV ) ;	150:1:2803:2846	1307473	1	True				
ANR	1307484	IdentifierDecl	* env = r_sys_getenv ( R_EGG_INCDIR_ENV )		1307473	0					
ANR	1307485	IdentifierDeclType	char *		1307473	0					
ANR	1307486	Identifier	env		1307473	1					
ANR	1307487	AssignmentExpression	* env = r_sys_getenv ( R_EGG_INCDIR_ENV )		1307473	2		=			
ANR	1307488	Identifier	env		1307473	0					
ANR	1307489	CallExpression	r_sys_getenv ( R_EGG_INCDIR_ENV )		1307473	1					
ANR	1307490	Callee	r_sys_getenv		1307473	0					
ANR	1307491	Identifier	r_sys_getenv		1307473	0					
ANR	1307492	ArgumentList	R_EGG_INCDIR_ENV		1307473	1					
ANR	1307493	Argument	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307494	Identifier	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307495	IfStatement	if ( ! env || ! * env )		1307473	2					
ANR	1307496	Condition	! env || ! * env	151:5:2853:2865	1307473	0	True				
ANR	1307497	OrExpression	! env || ! * env		1307473	0		||			
ANR	1307498	UnaryOperationExpression	! env		1307473	0					
ANR	1307499	UnaryOperator	!		1307473	0					
ANR	1307500	Identifier	env		1307473	1					
ANR	1307501	UnaryOperationExpression	! * env		1307473	1					
ANR	1307502	UnaryOperator	!		1307473	0					
ANR	1307503	UnaryOperationExpression	* env		1307473	1					
ANR	1307504	UnaryOperator	*		1307473	0					
ANR	1307505	Identifier	env		1307473	1					
ANR	1307506	CompoundStatement		4:20:90:90	1307473	1					
ANR	1307507	ExpressionStatement	r_egg_lang_include_init ( egg )	152:2:2872:2901	1307473	0	True				
ANR	1307508	CallExpression	r_egg_lang_include_init ( egg )		1307473	0					
ANR	1307509	Callee	r_egg_lang_include_init		1307473	0					
ANR	1307510	Identifier	r_egg_lang_include_init		1307473	0					
ANR	1307511	ArgumentList	egg		1307473	1					
ANR	1307512	Argument	egg		1307473	0					
ANR	1307513	Identifier	egg		1307473	0					
ANR	1307514	ExpressionStatement	free ( env )	153:2:2905:2915	1307473	1	True				
ANR	1307515	CallExpression	free ( env )		1307473	0					
ANR	1307516	Callee	free		1307473	0					
ANR	1307517	Identifier	free		1307473	0					
ANR	1307518	ArgumentList	env		1307473	1					
ANR	1307519	Argument	env		1307473	0					
ANR	1307520	Identifier	env		1307473	0					
ANR	1307521	ExpressionStatement	env = r_sys_getenv ( R_EGG_INCDIR_ENV )	154:2:2919:2956	1307473	2	True				
ANR	1307522	AssignmentExpression	env = r_sys_getenv ( R_EGG_INCDIR_ENV )		1307473	0		=			
ANR	1307523	Identifier	env		1307473	0					
ANR	1307524	CallExpression	r_sys_getenv ( R_EGG_INCDIR_ENV )		1307473	1					
ANR	1307525	Callee	r_sys_getenv		1307473	0					
ANR	1307526	Identifier	r_sys_getenv		1307473	0					
ANR	1307527	ArgumentList	R_EGG_INCDIR_ENV		1307473	1					
ANR	1307528	Argument	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307529	Identifier	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307530	ExpressionStatement	tmp_ptr = env	155:2:2960:2973	1307473	3	True				
ANR	1307531	AssignmentExpression	tmp_ptr = env		1307473	0		=			
ANR	1307532	Identifier	tmp_ptr		1307473	0					
ANR	1307533	Identifier	env		1307473	1					
ANR	1307534	ExpressionStatement	"env = r_str_appendf ( NULL , ""%s:%s"" , path , env )"	157:1:2979:3025	1307473	3	True				
ANR	1307535	AssignmentExpression	"env = r_str_appendf ( NULL , ""%s:%s"" , path , env )"		1307473	0		=			
ANR	1307536	Identifier	env		1307473	0					
ANR	1307537	CallExpression	"r_str_appendf ( NULL , ""%s:%s"" , path , env )"		1307473	1					
ANR	1307538	Callee	r_str_appendf		1307473	0					
ANR	1307539	Identifier	r_str_appendf		1307473	0					
ANR	1307540	ArgumentList	NULL		1307473	1					
ANR	1307541	Argument	NULL		1307473	0					
ANR	1307542	Identifier	NULL		1307473	0					
ANR	1307543	Argument	"""%s:%s"""		1307473	1					
ANR	1307544	PrimaryExpression	"""%s:%s"""		1307473	0					
ANR	1307545	Argument	path		1307473	2					
ANR	1307546	Identifier	path		1307473	0					
ANR	1307547	Argument	env		1307473	3					
ANR	1307548	Identifier	env		1307473	0					
ANR	1307549	ExpressionStatement	free ( tmp_ptr )	158:1:3028:3042	1307473	4	True				
ANR	1307550	CallExpression	free ( tmp_ptr )		1307473	0					
ANR	1307551	Callee	free		1307473	0					
ANR	1307552	Identifier	free		1307473	0					
ANR	1307553	ArgumentList	tmp_ptr		1307473	1					
ANR	1307554	Argument	tmp_ptr		1307473	0					
ANR	1307555	Identifier	tmp_ptr		1307473	0					
ANR	1307556	ExpressionStatement	"r_sys_setenv ( R_EGG_INCDIR_ENV , env )"	159:1:3045:3081	1307473	5	True				
ANR	1307557	CallExpression	"r_sys_setenv ( R_EGG_INCDIR_ENV , env )"		1307473	0					
ANR	1307558	Callee	r_sys_setenv		1307473	0					
ANR	1307559	Identifier	r_sys_setenv		1307473	0					
ANR	1307560	ArgumentList	R_EGG_INCDIR_ENV		1307473	1					
ANR	1307561	Argument	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307562	Identifier	R_EGG_INCDIR_ENV		1307473	0					
ANR	1307563	Argument	env		1307473	1					
ANR	1307564	Identifier	env		1307473	0					
ANR	1307565	ExpressionStatement	free ( env )	160:1:3084:3094	1307473	6	True				
ANR	1307566	CallExpression	free ( env )		1307473	0					
ANR	1307567	Callee	free		1307473	0					
ANR	1307568	Identifier	free		1307473	0					
ANR	1307569	ArgumentList	env		1307473	1					
ANR	1307570	Argument	env		1307473	0					
ANR	1307571	Identifier	env		1307473	0					
ANR	1307572	ReturnType	R_API void		1307473	1					
ANR	1307573	Identifier	r_egg_lang_include_path		1307473	2					
ANR	1307574	ParameterList	"REgg * egg , const char * path"		1307473	3					
ANR	1307575	Parameter	REgg * egg	148:35:2748:2756	1307473	0	True				
ANR	1307576	ParameterType	REgg *		1307473	0					
ANR	1307577	Identifier	egg		1307473	1					
ANR	1307578	Parameter	const char * path	148:46:2759:2774	1307473	1	True				
ANR	1307579	ParameterType	const char *		1307473	0					
ANR	1307580	Identifier	path		1307473	1					
ANR	1307581	CFGEntryNode	ENTRY		1307473		True				
ANR	1307582	CFGExitNode	EXIT		1307473		True				
ANR	1307583	Symbol	path		1307473						
ANR	1307584	Symbol	NULL		1307473						
ANR	1307585	Symbol	egg		1307473						
ANR	1307586	Symbol	r_sys_getenv		1307473						
ANR	1307587	Symbol	r_str_appendf		1307473						
ANR	1307588	Symbol	* env		1307473						
ANR	1307589	Symbol	tmp_ptr		1307473						
ANR	1307590	Symbol	env		1307473						
ANR	1307591	Symbol	R_EGG_INCDIR_ENV		1307473						
ANR	1307592	Function	r_egg_lang_include_init	163:0:3099:3270							
ANR	1307593	FunctionDef	r_egg_lang_include_init (REgg * egg)		1307592	0					
ANR	1307594	CompoundStatement		163:46:3145:3270	1307592	0					
ANR	1307595	IdentifierDeclStatement	"char * s = r_str_newf ( "".:%s/%s"" , r_sys_prefix ( NULL ) , R_EGG_INCDIR_PATH ) ;"	164:1:3148:3220	1307592	0	True				
ANR	1307596	IdentifierDecl	"* s = r_str_newf ( "".:%s/%s"" , r_sys_prefix ( NULL ) , R_EGG_INCDIR_PATH )"		1307592	0					
ANR	1307597	IdentifierDeclType	char *		1307592	0					
ANR	1307598	Identifier	s		1307592	1					
ANR	1307599	AssignmentExpression	"* s = r_str_newf ( "".:%s/%s"" , r_sys_prefix ( NULL ) , R_EGG_INCDIR_PATH )"		1307592	2		=			
ANR	1307600	Identifier	s		1307592	0					
ANR	1307601	CallExpression	"r_str_newf ( "".:%s/%s"" , r_sys_prefix ( NULL ) , R_EGG_INCDIR_PATH )"		1307592	1					
ANR	1307602	Callee	r_str_newf		1307592	0					
ANR	1307603	Identifier	r_str_newf		1307592	0					
ANR	1307604	ArgumentList	""".:%s/%s"""		1307592	1					
ANR	1307605	Argument	""".:%s/%s"""		1307592	0					
ANR	1307606	PrimaryExpression	""".:%s/%s"""		1307592	0					
ANR	1307607	Argument	r_sys_prefix ( NULL )		1307592	1					
ANR	1307608	CallExpression	r_sys_prefix ( NULL )		1307592	0					
ANR	1307609	Callee	r_sys_prefix		1307592	0					
ANR	1307610	Identifier	r_sys_prefix		1307592	0					
ANR	1307611	ArgumentList	NULL		1307592	1					
ANR	1307612	Argument	NULL		1307592	0					
ANR	1307613	Identifier	NULL		1307592	0					
ANR	1307614	Argument	R_EGG_INCDIR_PATH		1307592	2					
ANR	1307615	Identifier	R_EGG_INCDIR_PATH		1307592	0					
ANR	1307616	ExpressionStatement	"r_sys_setenv ( R_EGG_INCDIR_ENV , s )"	165:1:3223:3257	1307592	1	True				
ANR	1307617	CallExpression	"r_sys_setenv ( R_EGG_INCDIR_ENV , s )"		1307592	0					
ANR	1307618	Callee	r_sys_setenv		1307592	0					
ANR	1307619	Identifier	r_sys_setenv		1307592	0					
ANR	1307620	ArgumentList	R_EGG_INCDIR_ENV		1307592	1					
ANR	1307621	Argument	R_EGG_INCDIR_ENV		1307592	0					
ANR	1307622	Identifier	R_EGG_INCDIR_ENV		1307592	0					
ANR	1307623	Argument	s		1307592	1					
ANR	1307624	Identifier	s		1307592	0					
ANR	1307625	ExpressionStatement	free ( s )	166:1:3260:3268	1307592	2	True				
ANR	1307626	CallExpression	free ( s )		1307592	0					
ANR	1307627	Callee	free		1307592	0					
ANR	1307628	Identifier	free		1307592	0					
ANR	1307629	ArgumentList	s		1307592	1					
ANR	1307630	Argument	s		1307592	0					
ANR	1307631	Identifier	s		1307592	0					
ANR	1307632	ReturnType	R_API void		1307592	1					
ANR	1307633	Identifier	r_egg_lang_include_init		1307592	2					
ANR	1307634	ParameterList	REgg * egg		1307592	3					
ANR	1307635	Parameter	REgg * egg	163:35:3134:3142	1307592	0	True				
ANR	1307636	ParameterType	REgg *		1307592	0					
ANR	1307637	Identifier	egg		1307592	1					
ANR	1307638	CFGEntryNode	ENTRY		1307592		True				
ANR	1307639	CFGExitNode	EXIT		1307592		True				
ANR	1307640	Symbol	NULL		1307592						
ANR	1307641	Symbol	s		1307592						
ANR	1307642	Symbol	egg		1307592						
ANR	1307643	Symbol	R_EGG_INCDIR_PATH		1307592						
ANR	1307644	Symbol	r_str_newf		1307592						
ANR	1307645	Symbol	r_sys_prefix		1307592						
ANR	1307646	Symbol	R_EGG_INCDIR_ENV		1307592						
ANR	1307647	Function	rcc_set_callname	169:0:3273:3510							
ANR	1307648	FunctionDef	"rcc_set_callname (REgg * egg , const char * s)"		1307647	0					
ANR	1307649	CompoundStatement		169:55:3328:3510	1307647	0					
ANR	1307650	ExpressionStatement	R_FREE ( egg -> lang . callname )	170:1:3331:3358	1307647	0	True				
ANR	1307651	CallExpression	R_FREE ( egg -> lang . callname )		1307647	0					
ANR	1307652	Callee	R_FREE		1307647	0					
ANR	1307653	Identifier	R_FREE		1307647	0					
ANR	1307654	ArgumentList	egg -> lang . callname		1307647	1					
ANR	1307655	Argument	egg -> lang . callname		1307647	0					
ANR	1307656	MemberAccess	egg -> lang . callname		1307647	0					
ANR	1307657	PtrMemberAccess	egg -> lang		1307647	0					
ANR	1307658	Identifier	egg		1307647	0					
ANR	1307659	Identifier	lang		1307647	1					
ANR	1307660	Identifier	callname		1307647	1					
ANR	1307661	ExpressionStatement	egg -> lang . nargs = 0	171:1:3361:3380	1307647	1	True				
ANR	1307662	AssignmentExpression	egg -> lang . nargs = 0		1307647	0		=			
ANR	1307663	MemberAccess	egg -> lang . nargs		1307647	0					
ANR	1307664	PtrMemberAccess	egg -> lang		1307647	0					
ANR	1307665	Identifier	egg		1307647	0					
ANR	1307666	Identifier	lang		1307647	1					
ANR	1307667	Identifier	nargs		1307647	1					
ANR	1307668	PrimaryExpression	0		1307647	1					
ANR	1307669	ExpressionStatement	egg -> lang . callname = trim ( strdup ( skipspaces ( s ) ) )	172:1:3383:3434	1307647	2	True				
ANR	1307670	AssignmentExpression	egg -> lang . callname = trim ( strdup ( skipspaces ( s ) ) )		1307647	0		=			
ANR	1307671	MemberAccess	egg -> lang . callname		1307647	0					
ANR	1307672	PtrMemberAccess	egg -> lang		1307647	0					
ANR	1307673	Identifier	egg		1307647	0					
ANR	1307674	Identifier	lang		1307647	1					
ANR	1307675	Identifier	callname		1307647	1					
ANR	1307676	CallExpression	trim ( strdup ( skipspaces ( s ) ) )		1307647	1					
ANR	1307677	Callee	trim		1307647	0					
ANR	1307678	Identifier	trim		1307647	0					
ANR	1307679	ArgumentList	strdup ( skipspaces ( s ) )		1307647	1					
ANR	1307680	Argument	strdup ( skipspaces ( s ) )		1307647	0					
ANR	1307681	CallExpression	strdup ( skipspaces ( s ) )		1307647	0					
ANR	1307682	Callee	strdup		1307647	0					
ANR	1307683	Identifier	strdup		1307647	0					
ANR	1307684	ArgumentList	skipspaces ( s )		1307647	1					
ANR	1307685	Argument	skipspaces ( s )		1307647	0					
ANR	1307686	CallExpression	skipspaces ( s )		1307647	0					
ANR	1307687	Callee	skipspaces		1307647	0					
ANR	1307688	Identifier	skipspaces		1307647	0					
ANR	1307689	ArgumentList	s		1307647	1					
ANR	1307690	Argument	s		1307647	0					
ANR	1307691	Identifier	s		1307647	0					
ANR	1307692	ExpressionStatement	"egg -> lang . pushargs = ! ( ( ! strcmp ( s , ""goto"" ) ) || ( ! strcmp ( s , ""break"" ) ) )"	173:1:3437:3508	1307647	3	True				
ANR	1307693	AssignmentExpression	"egg -> lang . pushargs = ! ( ( ! strcmp ( s , ""goto"" ) ) || ( ! strcmp ( s , ""break"" ) ) )"		1307647	0		=			
ANR	1307694	MemberAccess	egg -> lang . pushargs		1307647	0					
ANR	1307695	PtrMemberAccess	egg -> lang		1307647	0					
ANR	1307696	Identifier	egg		1307647	0					
ANR	1307697	Identifier	lang		1307647	1					
ANR	1307698	Identifier	pushargs		1307647	1					
ANR	1307699	UnaryOperationExpression	"! ( ( ! strcmp ( s , ""goto"" ) ) || ( ! strcmp ( s , ""break"" ) ) )"		1307647	1					
ANR	1307700	UnaryOperator	!		1307647	0					
ANR	1307701	OrExpression	"( ! strcmp ( s , ""goto"" ) ) || ( ! strcmp ( s , ""break"" ) )"		1307647	1		||			
ANR	1307702	UnaryOperationExpression	"! strcmp ( s , ""goto"" )"		1307647	0					
ANR	1307703	UnaryOperator	!		1307647	0					
ANR	1307704	CallExpression	"strcmp ( s , ""goto"" )"		1307647	1					
ANR	1307705	Callee	strcmp		1307647	0					
ANR	1307706	Identifier	strcmp		1307647	0					
ANR	1307707	ArgumentList	s		1307647	1					
ANR	1307708	Argument	s		1307647	0					
ANR	1307709	Identifier	s		1307647	0					
ANR	1307710	Argument	"""goto"""		1307647	1					
ANR	1307711	PrimaryExpression	"""goto"""		1307647	0					
ANR	1307712	UnaryOperationExpression	"! strcmp ( s , ""break"" )"		1307647	1					
ANR	1307713	UnaryOperator	!		1307647	0					
ANR	1307714	CallExpression	"strcmp ( s , ""break"" )"		1307647	1					
ANR	1307715	Callee	strcmp		1307647	0					
ANR	1307716	Identifier	strcmp		1307647	0					
ANR	1307717	ArgumentList	s		1307647	1					
ANR	1307718	Argument	s		1307647	0					
ANR	1307719	Identifier	s		1307647	0					
ANR	1307720	Argument	"""break"""		1307647	1					
ANR	1307721	PrimaryExpression	"""break"""		1307647	0					
ANR	1307722	ReturnType	static void		1307647	1					
ANR	1307723	Identifier	rcc_set_callname		1307647	2					
ANR	1307724	ParameterList	"REgg * egg , const char * s"		1307647	3					
ANR	1307725	Parameter	REgg * egg	169:29:3302:3310	1307647	0	True				
ANR	1307726	ParameterType	REgg *		1307647	0					
ANR	1307727	Identifier	egg		1307647	1					
ANR	1307728	Parameter	const char * s	169:40:3313:3325	1307647	1	True				
ANR	1307729	ParameterType	const char *		1307647	0					
ANR	1307730	Identifier	s		1307647	1					
ANR	1307731	CFGEntryNode	ENTRY		1307647		True				
ANR	1307732	CFGExitNode	EXIT		1307647		True				
ANR	1307733	Symbol	* egg		1307647						
ANR	1307734	Symbol	strcmp		1307647						
ANR	1307735	Symbol	s		1307647						
ANR	1307736	Symbol	egg		1307647						
ANR	1307737	Symbol	trim		1307647						
ANR	1307738	Symbol	egg -> lang . pushargs		1307647						
ANR	1307739	Symbol	egg -> lang . nargs		1307647						
ANR	1307740	Symbol	egg -> lang . callname		1307647						
ANR	1307741	Symbol	strdup		1307647						
ANR	1307742	Symbol	egg -> lang		1307647						
ANR	1307743	Symbol	skipspaces		1307647						
ANR	1307744	Function	rcc_reset_callname	176:0:3513:3609							
ANR	1307745	FunctionDef	rcc_reset_callname (REgg * egg)		1307744	0					
ANR	1307746	CompoundStatement		176:42:3555:3609	1307744	0					
ANR	1307747	ExpressionStatement	R_FREE ( egg -> lang . callname )	177:1:3558:3585	1307744	0	True				
ANR	1307748	CallExpression	R_FREE ( egg -> lang . callname )		1307744	0					
ANR	1307749	Callee	R_FREE		1307744	0					
ANR	1307750	Identifier	R_FREE		1307744	0					
ANR	1307751	ArgumentList	egg -> lang . callname		1307744	1					
ANR	1307752	Argument	egg -> lang . callname		1307744	0					
ANR	1307753	MemberAccess	egg -> lang . callname		1307744	0					
ANR	1307754	PtrMemberAccess	egg -> lang		1307744	0					
ANR	1307755	Identifier	egg		1307744	0					
ANR	1307756	Identifier	lang		1307744	1					
ANR	1307757	Identifier	callname		1307744	1					
ANR	1307758	ExpressionStatement	egg -> lang . nargs = 0	178:1:3588:3607	1307744	1	True				
ANR	1307759	AssignmentExpression	egg -> lang . nargs = 0		1307744	0		=			
ANR	1307760	MemberAccess	egg -> lang . nargs		1307744	0					
ANR	1307761	PtrMemberAccess	egg -> lang		1307744	0					
ANR	1307762	Identifier	egg		1307744	0					
ANR	1307763	Identifier	lang		1307744	1					
ANR	1307764	Identifier	nargs		1307744	1					
ANR	1307765	PrimaryExpression	0		1307744	1					
ANR	1307766	ReturnType	static void		1307744	1					
ANR	1307767	Identifier	rcc_reset_callname		1307744	2					
ANR	1307768	ParameterList	REgg * egg		1307744	3					
ANR	1307769	Parameter	REgg * egg	176:31:3544:3552	1307744	0	True				
ANR	1307770	ParameterType	REgg *		1307744	0					
ANR	1307771	Identifier	egg		1307744	1					
ANR	1307772	CFGEntryNode	ENTRY		1307744		True				
ANR	1307773	CFGExitNode	EXIT		1307744		True				
ANR	1307774	Symbol	* egg		1307744						
ANR	1307775	Symbol	egg		1307744						
ANR	1307776	Symbol	egg -> lang . nargs		1307744						
ANR	1307777	Symbol	egg -> lang . callname		1307744						
ANR	1307778	Symbol	egg -> lang		1307744						
ANR	1307779	Function	get_frame_label	191:0:3830:4214							
ANR	1307780	FunctionDef	get_frame_label (int type)		1307779	0					
ANR	1307781	CompoundStatement		191:39:3869:4214	1307779	0					
ANR	1307782	Statement	static	192:1:3872:3877	1307779	0	True				
ANR	1307783	IdentifierDeclStatement	char label [ 128 ] ;	192:8:3879:3894	1307779	1	True				
ANR	1307784	IdentifierDecl	label [ 128 ]		1307779	0					
ANR	1307785	IdentifierDeclType	char [ 128 ]		1307779	0					
ANR	1307786	Identifier	label		1307779	1					
ANR	1307787	PrimaryExpression	128		1307779	2					
ANR	1307788	IdentifierDeclStatement	int nf = egg -> lang . nfunctions ;	193:1:3897:3926	1307779	2	True				
ANR	1307789	IdentifierDecl	nf = egg -> lang . nfunctions		1307779	0					
ANR	1307790	IdentifierDeclType	int		1307779	0					
ANR	1307791	Identifier	nf		1307779	1					
ANR	1307792	AssignmentExpression	nf = egg -> lang . nfunctions		1307779	2		=			
ANR	1307793	Identifier	nf		1307779	0					
ANR	1307794	MemberAccess	egg -> lang . nfunctions		1307779	1					
ANR	1307795	PtrMemberAccess	egg -> lang		1307779	0					
ANR	1307796	Identifier	egg		1307779	0					
ANR	1307797	Identifier	lang		1307779	1					
ANR	1307798	Identifier	nfunctions		1307779	1					
ANR	1307799	IdentifierDeclStatement	int nb = egg -> lang . nbrackets ;	194:1:3929:3957	1307779	3	True				
ANR	1307800	IdentifierDecl	nb = egg -> lang . nbrackets		1307779	0					
ANR	1307801	IdentifierDeclType	int		1307779	0					
ANR	1307802	Identifier	nb		1307779	1					
ANR	1307803	AssignmentExpression	nb = egg -> lang . nbrackets		1307779	2		=			
ANR	1307804	Identifier	nb		1307779	0					
ANR	1307805	MemberAccess	egg -> lang . nbrackets		1307779	1					
ANR	1307806	PtrMemberAccess	egg -> lang		1307779	0					
ANR	1307807	Identifier	egg		1307779	0					
ANR	1307808	Identifier	lang		1307779	1					
ANR	1307809	Identifier	nbrackets		1307779	1					
ANR	1307810	IdentifierDeclStatement	int ct = context ;	195:1:3960:3976	1307779	4	True				
ANR	1307811	IdentifierDecl	ct = context		1307779	0					
ANR	1307812	IdentifierDeclType	int		1307779	0					
ANR	1307813	Identifier	ct		1307779	1					
ANR	1307814	AssignmentExpression	ct = context		1307779	2		=			
ANR	1307815	Identifier	context		1307779	0					
ANR	1307816	Identifier	context		1307779	1					
ANR	1307817	IfStatement	if ( type == 1 )		1307779	5					
ANR	1307818	Condition	type == 1	198:5:4053:4061	1307779	0	True				
ANR	1307819	EqualityExpression	type == 1		1307779	0		==			
ANR	1307820	Identifier	type		1307779	0					
ANR	1307821	PrimaryExpression	1		1307779	1					
ANR	1307822	CompoundStatement		8:16:194:194	1307779	1					
ANR	1307823	ExpressionStatement	nb --	199:2:4068:4072	1307779	0	True				
ANR	1307824	PostIncDecOperationExpression	nb --		1307779	0					
ANR	1307825	Identifier	nb		1307779	0					
ANR	1307826	IncDec	--		1307779	1					
ANR	1307827	ElseStatement	else		1307779	0					
ANR	1307828	IfStatement	if ( type == 2 )		1307779	0					
ANR	1307829	Condition	type == 2	200:12:4086:4094	1307779	0	True				
ANR	1307830	EqualityExpression	type == 2		1307779	0		==			
ANR	1307831	Identifier	type		1307779	0					
ANR	1307832	PrimaryExpression	2		1307779	1					
ANR	1307833	CompoundStatement		10:23:227:227	1307779	1					
ANR	1307834	ExpressionStatement	ct --	201:2:4101:4105	1307779	0	True				
ANR	1307835	PostIncDecOperationExpression	ct --		1307779	0					
ANR	1307836	Identifier	ct		1307779	0					
ANR	1307837	IncDec	--		1307779	1					
ANR	1307838	ExpressionStatement	"snprintf ( label , sizeof ( label ) , FRAME_FMT , nf , nb , ct )"	205:1:4142:4197	1307779	6	True				
ANR	1307839	CallExpression	"snprintf ( label , sizeof ( label ) , FRAME_FMT , nf , nb , ct )"		1307779	0					
ANR	1307840	Callee	snprintf		1307779	0					
ANR	1307841	Identifier	snprintf		1307779	0					
ANR	1307842	ArgumentList	label		1307779	1					
ANR	1307843	Argument	label		1307779	0					
ANR	1307844	Identifier	label		1307779	0					
ANR	1307845	Argument	sizeof ( label )		1307779	1					
ANR	1307846	SizeofExpression	sizeof ( label )		1307779	0					
ANR	1307847	Sizeof	sizeof		1307779	0					
ANR	1307848	SizeofOperand	label		1307779	1					
ANR	1307849	Argument	FRAME_FMT		1307779	2					
ANR	1307850	Identifier	FRAME_FMT		1307779	0					
ANR	1307851	Argument	nf		1307779	3					
ANR	1307852	Identifier	nf		1307779	0					
ANR	1307853	Argument	nb		1307779	4					
ANR	1307854	Identifier	nb		1307779	0					
ANR	1307855	Argument	ct		1307779	5					
ANR	1307856	Identifier	ct		1307779	0					
ANR	1307857	ReturnStatement	return label ;	206:1:4200:4212	1307779	7	True				
ANR	1307858	Identifier	label		1307779	0					
ANR	1307859	ReturnType	static char *		1307779	1					
ANR	1307860	Identifier	get_frame_label		1307779	2					
ANR	1307861	ParameterList	int type		1307779	3					
ANR	1307862	Parameter	int type	191:29:3859:3866	1307779	0	True				
ANR	1307863	ParameterType	int		1307779	0					
ANR	1307864	Identifier	type		1307779	1					
ANR	1307865	CFGEntryNode	ENTRY		1307779		True				
ANR	1307866	CFGExitNode	EXIT		1307779		True				
ANR	1307867	Symbol	* egg		1307779						
ANR	1307868	Symbol	ct		1307779						
ANR	1307869	Symbol	FRAME_FMT		1307779						
ANR	1307870	Symbol	egg		1307779						
ANR	1307871	Symbol	nb		1307779						
ANR	1307872	Symbol	nf		1307779						
ANR	1307873	Symbol	egg -> lang . nbrackets		1307779						
ANR	1307874	Symbol	context		1307779						
ANR	1307875	Symbol	egg -> lang . nfunctions		1307779						
ANR	1307876	Symbol	label		1307779						
ANR	1307877	Symbol	type		1307779						
ANR	1307878	Symbol	egg -> lang		1307779						
ANR	1307879	Function	get_end_frame_label	209:0:4217:4622							
ANR	1307880	FunctionDef	get_end_frame_label (REgg * egg)		1307879	0					
ANR	1307881	CompoundStatement		209:44:4261:4622	1307879	0					
ANR	1307882	Statement	static	210:1:4264:4269	1307879	0	True				
ANR	1307883	IdentifierDeclStatement	char label [ 128 ] ;	210:8:4271:4286	1307879	1	True				
ANR	1307884	IdentifierDecl	label [ 128 ]		1307879	0					
ANR	1307885	IdentifierDeclType	char [ 128 ]		1307879	0					
ANR	1307886	Identifier	label		1307879	1					
ANR	1307887	PrimaryExpression	128		1307879	2					
ANR	1307888	ExpressionStatement	"snprintf ( label , sizeof ( label ) - 1 , FRAME_END_FMT , egg -> lang . nfunctions , egg -> lang . nbrackets , context - 1 )"	211:1:4289:4398	1307879	2	True				
ANR	1307889	CallExpression	"snprintf ( label , sizeof ( label ) - 1 , FRAME_END_FMT , egg -> lang . nfunctions , egg -> lang . nbrackets , context - 1 )"		1307879	0					
ANR	1307890	Callee	snprintf		1307879	0					
ANR	1307891	Identifier	snprintf		1307879	0					
ANR	1307892	ArgumentList	label		1307879	1					
ANR	1307893	Argument	label		1307879	0					
ANR	1307894	Identifier	label		1307879	0					
ANR	1307895	Argument	sizeof ( label ) - 1		1307879	1					
ANR	1307896	AdditiveExpression	sizeof ( label ) - 1		1307879	0		-			
ANR	1307897	SizeofExpression	sizeof ( label )		1307879	0					
ANR	1307898	Sizeof	sizeof		1307879	0					
ANR	1307899	SizeofOperand	label		1307879	1					
ANR	1307900	PrimaryExpression	1		1307879	1					
ANR	1307901	Argument	FRAME_END_FMT		1307879	2					
ANR	1307902	Identifier	FRAME_END_FMT		1307879	0					
ANR	1307903	Argument	egg -> lang . nfunctions		1307879	3					
ANR	1307904	MemberAccess	egg -> lang . nfunctions		1307879	0					
ANR	1307905	PtrMemberAccess	egg -> lang		1307879	0					
ANR	1307906	Identifier	egg		1307879	0					
ANR	1307907	Identifier	lang		1307879	1					
ANR	1307908	Identifier	nfunctions		1307879	1					
ANR	1307909	Argument	egg -> lang . nbrackets		1307879	4					
ANR	1307910	MemberAccess	egg -> lang . nbrackets		1307879	0					
ANR	1307911	PtrMemberAccess	egg -> lang		1307879	0					
ANR	1307912	Identifier	egg		1307879	0					
ANR	1307913	Identifier	lang		1307879	1					
ANR	1307914	Identifier	nbrackets		1307879	1					
ANR	1307915	Argument	context - 1		1307879	5					
ANR	1307916	AdditiveExpression	context - 1		1307879	0		-			
ANR	1307917	Identifier	context		1307879	0					
ANR	1307918	PrimaryExpression	1		1307879	1					
ANR	1307919	ReturnStatement	return label ;	215:1:4608:4620	1307879	3	True				
ANR	1307920	Identifier	label		1307879	0					
ANR	1307921	ReturnType	static char *		1307879	1					
ANR	1307922	Identifier	get_end_frame_label		1307879	2					
ANR	1307923	ParameterList	REgg * egg		1307879	3					
ANR	1307924	Parameter	REgg * egg	209:33:4250:4258	1307879	0	True				
ANR	1307925	ParameterType	REgg *		1307879	0					
ANR	1307926	Identifier	egg		1307879	1					
ANR	1307927	CFGEntryNode	ENTRY		1307879		True				
ANR	1307928	CFGExitNode	EXIT		1307879		True				
ANR	1307929	Symbol	FRAME_END_FMT		1307879						
ANR	1307930	Symbol	* egg		1307879						
ANR	1307931	Symbol	egg		1307879						
ANR	1307932	Symbol	context		1307879						
ANR	1307933	Symbol	egg -> lang . nbrackets		1307879						
ANR	1307934	Symbol	egg -> lang . nfunctions		1307879						
ANR	1307935	Symbol	label		1307879						
ANR	1307936	Symbol	egg -> lang		1307879						
ANR	1307937	Function	find_alias	219:0:4632:5140							
ANR	1307938	FunctionDef	"find_alias (REgg * egg , const char * str)"		1307937	0					
ANR	1307939	CompoundStatement		219:58:4690:5140	1307937	0					
ANR	1307940	IdentifierDeclStatement	char * p = ( char * ) str ;	221:1:4755:4777	1307937	0	True				
ANR	1307941	IdentifierDecl	* p = ( char * ) str		1307937	0					
ANR	1307942	IdentifierDeclType	char *		1307937	0					
ANR	1307943	Identifier	p		1307937	1					
ANR	1307944	AssignmentExpression	* p = ( char * ) str		1307937	2		=			
ANR	1307945	Identifier	p		1307937	0					
ANR	1307946	CastExpression	( char * ) str		1307937	1					
ANR	1307947	CastTarget	char *		1307937	0					
ANR	1307948	Identifier	str		1307937	1					
ANR	1307949	IdentifierDeclStatement	int i ;	222:1:4780:4785	1307937	1	True				
ANR	1307950	IdentifierDecl	i		1307937	0					
ANR	1307951	IdentifierDeclType	int		1307937	0					
ANR	1307952	Identifier	i		1307937	1					
ANR	1307953	IfStatement	"if ( * str == '""' )"		1307937	2					
ANR	1307954	Condition	"* str == '""'"	223:5:4792:4802	1307937	0	True				
ANR	1307955	EqualityExpression	"* str == '""'"		1307937	0		==			
ANR	1307956	UnaryOperationExpression	* str		1307937	0					
ANR	1307957	UnaryOperator	*		1307937	0					
ANR	1307958	Identifier	str		1307937	1					
ANR	1307959	PrimaryExpression	"'""'"		1307937	1					
ANR	1307960	CompoundStatement		5:18:114:114	1307937	1					
ANR	1307961	ReturnStatement	return strdup ( str ) ;	224:2:4809:4828	1307937	0	True				
ANR	1307962	CallExpression	strdup ( str )		1307937	0					
ANR	1307963	Callee	strdup		1307937	0					
ANR	1307964	Identifier	strdup		1307937	0					
ANR	1307965	ArgumentList	str		1307937	1					
ANR	1307966	Argument	str		1307937	0					
ANR	1307967	Identifier	str		1307937	0					
ANR	1307968	WhileStatement	while ( * p && ! is_space ( * p ) )		1307937	3					
ANR	1307969	Condition	* p && ! is_space ( * p )	227:8:4877:4896	1307937	0	True				
ANR	1307970	AndExpression	* p && ! is_space ( * p )		1307937	0		&&			
ANR	1307971	UnaryOperationExpression	* p		1307937	0					
ANR	1307972	UnaryOperator	*		1307937	0					
ANR	1307973	Identifier	p		1307937	1					
ANR	1307974	UnaryOperationExpression	! is_space ( * p )		1307937	1					
ANR	1307975	UnaryOperator	!		1307937	0					
ANR	1307976	CallExpression	is_space ( * p )		1307937	1					
ANR	1307977	Callee	is_space		1307937	0					
ANR	1307978	Identifier	is_space		1307937	0					
ANR	1307979	ArgumentList	* p		1307937	1					
ANR	1307980	Argument	* p		1307937	0					
ANR	1307981	UnaryOperationExpression	* p		1307937	0					
ANR	1307982	UnaryOperator	*		1307937	0					
ANR	1307983	Identifier	p		1307937	1					
ANR	1307984	CompoundStatement		9:30:208:208	1307937	1					
ANR	1307985	ExpressionStatement	p ++	228:2:4903:4906	1307937	0	True				
ANR	1307986	PostIncDecOperationExpression	p ++		1307937	0					
ANR	1307987	Identifier	p		1307937	0					
ANR	1307988	IncDec	++		1307937	1					
ANR	1307989	ExpressionStatement	* p = x00	230:1:4912:4923	1307937	4	True				
ANR	1307990	AssignmentExpression	* p = x00		1307937	0		=			
ANR	1307991	UnaryOperationExpression	* p		1307937	0					
ANR	1307992	UnaryOperator	*		1307937	0					
ANR	1307993	Identifier	p		1307937	1					
ANR	1307994	Identifier	x00		1307937	1					
ANR	1307995	ForStatement	for ( i = 0 ; i < egg -> lang . nalias ; i ++ )		1307937	5					
ANR	1307996	ForInit	i = 0 ;	231:6:4931:4936	1307937	0	True				
ANR	1307997	AssignmentExpression	i = 0		1307937	0		=			
ANR	1307998	Identifier	i		1307937	0					
ANR	1307999	PrimaryExpression	0		1307937	1					
ANR	1308000	Condition	i < egg -> lang . nalias	231:13:4938:4957	1307937	1	True				
ANR	1308001	RelationalExpression	i < egg -> lang . nalias		1307937	0		<			
ANR	1308002	Identifier	i		1307937	0					
ANR	1308003	MemberAccess	egg -> lang . nalias		1307937	1					
ANR	1308004	PtrMemberAccess	egg -> lang		1307937	0					
ANR	1308005	Identifier	egg		1307937	0					
ANR	1308006	Identifier	lang		1307937	1					
ANR	1308007	Identifier	nalias		1307937	1					
ANR	1308008	PostIncDecOperationExpression	i ++	231:35:4960:4962	1307937	2	True				
ANR	1308009	Identifier	i		1307937	0					
ANR	1308010	IncDec	++		1307937	1					
ANR	1308011	CompoundStatement		13:40:274:274	1307937	3					
ANR	1308012	IfStatement	"if ( ! strcmp ( str , egg -> lang . aliases [ i ] . name ) )"		1307937	0					
ANR	1308013	Condition	"! strcmp ( str , egg -> lang . aliases [ i ] . name )"	232:6:4973:5012	1307937	0	True				
ANR	1308014	UnaryOperationExpression	"! strcmp ( str , egg -> lang . aliases [ i ] . name )"		1307937	0					
ANR	1308015	UnaryOperator	!		1307937	0					
ANR	1308016	CallExpression	"strcmp ( str , egg -> lang . aliases [ i ] . name )"		1307937	1					
ANR	1308017	Callee	strcmp		1307937	0					
ANR	1308018	Identifier	strcmp		1307937	0					
ANR	1308019	ArgumentList	str		1307937	1					
ANR	1308020	Argument	str		1307937	0					
ANR	1308021	Identifier	str		1307937	0					
ANR	1308022	Argument	egg -> lang . aliases [ i ] . name		1307937	1					
ANR	1308023	MemberAccess	egg -> lang . aliases [ i ] . name		1307937	0					
ANR	1308024	ArrayIndexing	egg -> lang . aliases [ i ]		1307937	0					
ANR	1308025	MemberAccess	egg -> lang . aliases		1307937	0					
ANR	1308026	PtrMemberAccess	egg -> lang		1307937	0					
ANR	1308027	Identifier	egg		1307937	0					
ANR	1308028	Identifier	lang		1307937	1					
ANR	1308029	Identifier	aliases		1307937	1					
ANR	1308030	Identifier	i		1307937	1					
ANR	1308031	Identifier	name		1307937	1					
ANR	1308032	CompoundStatement		14:48:324:324	1307937	1					
ANR	1308033	ReturnStatement	return strdup ( egg -> lang . aliases [ i ] . content ) ;	233:3:5020:5064	1307937	0	True				
ANR	1308034	CallExpression	strdup ( egg -> lang . aliases [ i ] . content )		1307937	0					
ANR	1308035	Callee	strdup		1307937	0					
ANR	1308036	Identifier	strdup		1307937	0					
ANR	1308037	ArgumentList	egg -> lang . aliases [ i ] . content		1307937	1					
ANR	1308038	Argument	egg -> lang . aliases [ i ] . content		1307937	0					
ANR	1308039	MemberAccess	egg -> lang . aliases [ i ] . content		1307937	0					
ANR	1308040	ArrayIndexing	egg -> lang . aliases [ i ]		1307937	0					
ANR	1308041	MemberAccess	egg -> lang . aliases		1307937	0					
ANR	1308042	PtrMemberAccess	egg -> lang		1307937	0					
ANR	1308043	Identifier	egg		1307937	0					
ANR	1308044	Identifier	lang		1307937	1					
ANR	1308045	Identifier	aliases		1307937	1					
ANR	1308046	Identifier	i		1307937	1					
ANR	1308047	Identifier	content		1307937	1					
ANR	1308048	ReturnStatement	return NULL ;	236:1:5074:5085	1307937	6	True				
ANR	1308049	Identifier	NULL		1307937	0					
ANR	1308050	ReturnType	static const char *		1307937	1					
ANR	1308051	Identifier	find_alias		1307937	2					
ANR	1308052	ParameterList	"REgg * egg , const char * str"		1307937	3					
ANR	1308053	Parameter	REgg * egg	219:30:4662:4670	1307937	0	True				
ANR	1308054	ParameterType	REgg *		1307937	0					
ANR	1308055	Identifier	egg		1307937	1					
ANR	1308056	Parameter	const char * str	219:41:4673:4687	1307937	1	True				
ANR	1308057	ParameterType	const char *		1307937	0					
ANR	1308058	Identifier	str		1307937	1					
ANR	1308059	CFGEntryNode	ENTRY		1307937		True				
ANR	1308060	CFGExitNode	EXIT		1307937		True				
ANR	1308061	Symbol	strcmp		1307937						
ANR	1308062	Symbol	NULL		1307937						
ANR	1308063	Symbol	egg		1307937						
ANR	1308064	Symbol	egg -> lang . aliases		1307937						
ANR	1308065	Symbol	egg -> lang . aliases [ i ] . name		1307937						
ANR	1308066	Symbol	i		1307937						
ANR	1308067	Symbol	egg -> lang . aliases [ i ] . content		1307937						
ANR	1308068	Symbol	egg -> lang		1307937						
ANR	1308069	Symbol	* egg -> lang		1307937						
ANR	1308070	Symbol	str		1307937						
ANR	1308071	Symbol	p		1307937						
ANR	1308072	Symbol	* egg		1307937						
ANR	1308073	Symbol	* i		1307937						
ANR	1308074	Symbol	egg -> lang . nalias		1307937						
ANR	1308075	Symbol	x00		1307937						
ANR	1308076	Symbol	* * egg		1307937						
ANR	1308077	Symbol	* p		1307937						
ANR	1308078	Symbol	* str		1307937						
ANR	1308079	Symbol	strdup		1307937						
ANR	1308080	Symbol	* egg -> lang . aliases		1307937						
ANR	1308081	Symbol	is_space		1307937						
ANR	1308082	Function	rcc_internal_mathop	240:0:5143:6038							
ANR	1308083	FunctionDef	"rcc_internal_mathop (REgg * egg , const char * ptr , char * ep , char op)"		1308082	0					
ANR	1308084	CompoundStatement		240:79:5222:6038	1308082	0					
ANR	1308085	IdentifierDeclStatement	"char * p , * q , * oldp ;"	241:1:5225:5243	1308082	0	True				
ANR	1308086	IdentifierDecl	* p		1308082	0					
ANR	1308087	IdentifierDeclType	char *		1308082	0					
ANR	1308088	Identifier	p		1308082	1					
ANR	1308089	IdentifierDecl	* q		1308082	1					
ANR	1308090	IdentifierDeclType	char *		1308082	0					
ANR	1308091	Identifier	q		1308082	1					
ANR	1308092	IdentifierDecl	* oldp		1308082	2					
ANR	1308093	IdentifierDeclType	char *		1308082	0					
ANR	1308094	Identifier	oldp		1308082	1					
ANR	1308095	IdentifierDeclStatement	char type = ' ' ;	242:1:5264:5279	1308082	1	True				
ANR	1308096	IdentifierDecl	type = ' '		1308082	0					
ANR	1308097	IdentifierDeclType	char		1308082	0					
ANR	1308098	Identifier	type		1308082	1					
ANR	1308099	AssignmentExpression	type = ' '		1308082	2		=			
ANR	1308100	Identifier	type		1308082	0					
ANR	1308101	PrimaryExpression	' '		1308082	1					
ANR	1308102	IdentifierDeclStatement	char buf [ 64 ] ;	243:1:5282:5294	1308082	2	True				
ANR	1308103	IdentifierDecl	buf [ 64 ]		1308082	0					
ANR	1308104	IdentifierDeclType	char [ 64 ]		1308082	0					
ANR	1308105	Identifier	buf		1308082	1					
ANR	1308106	PrimaryExpression	64		1308082	2					
ANR	1308107	ExpressionStatement	oldp = p = q = strdup ( ptr )	244:1:5325:5352	1308082	3	True				
ANR	1308108	AssignmentExpression	oldp = p = q = strdup ( ptr )		1308082	0		=			
ANR	1308109	Identifier	oldp		1308082	0					
ANR	1308110	AssignmentExpression	p = q = strdup ( ptr )		1308082	1		=			
ANR	1308111	Identifier	p		1308082	0					
ANR	1308112	AssignmentExpression	q = strdup ( ptr )		1308082	1		=			
ANR	1308113	Identifier	q		1308082	0					
ANR	1308114	CallExpression	strdup ( ptr )		1308082	1					
ANR	1308115	Callee	strdup		1308082	0					
ANR	1308116	Identifier	strdup		1308082	0					
ANR	1308117	ArgumentList	ptr		1308082	1					
ANR	1308118	Argument	ptr		1308082	0					
ANR	1308119	Identifier	ptr		1308082	0					
ANR	1308120	IfStatement	if ( get_op ( & q ) )		1308082	4					
ANR	1308121	Condition	get_op ( & q )	245:5:5359:5369	1308082	0	True				
ANR	1308122	CallExpression	get_op ( & q )		1308082	0					
ANR	1308123	Callee	get_op		1308082	0					
ANR	1308124	Identifier	get_op		1308082	0					
ANR	1308125	ArgumentList	& q		1308082	1					
ANR	1308126	Argument	& q		1308082	0					
ANR	1308127	UnaryOperationExpression	& q		1308082	0					
ANR	1308128	UnaryOperator	&		1308082	0					
ANR	1308129	Identifier	q		1308082	1					
ANR	1308130	CompoundStatement		6:18:149:149	1308082	1					
ANR	1308131	ExpressionStatement	* q = x00	246:2:5376:5387	1308082	0	True				
ANR	1308132	AssignmentExpression	* q = x00		1308082	0		=			
ANR	1308133	UnaryOperationExpression	* q		1308082	0					
ANR	1308134	UnaryOperator	*		1308082	0					
ANR	1308135	Identifier	q		1308082	1					
ANR	1308136	Identifier	x00		1308082	1					
ANR	1308137	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	248:1:5393:5417	1308082	5	True				
ANR	1308138	IdentifierDecl	* e = egg -> remit		1308082	0					
ANR	1308139	IdentifierDeclType	REggEmit *		1308082	0					
ANR	1308140	Identifier	e		1308082	1					
ANR	1308141	AssignmentExpression	* e = egg -> remit		1308082	2		=			
ANR	1308142	Identifier	e		1308082	0					
ANR	1308143	PtrMemberAccess	egg -> remit		1308082	1					
ANR	1308144	Identifier	egg		1308082	0					
ANR	1308145	Identifier	remit		1308082	1					
ANR	1308146	WhileStatement	while ( * p && is_space ( * p ) )		1308082	6					
ANR	1308147	Condition	* p && is_space ( * p )	249:8:5427:5445	1308082	0	True				
ANR	1308148	AndExpression	* p && is_space ( * p )		1308082	0		&&			
ANR	1308149	UnaryOperationExpression	* p		1308082	0					
ANR	1308150	UnaryOperator	*		1308082	0					
ANR	1308151	Identifier	p		1308082	1					
ANR	1308152	CallExpression	is_space ( * p )		1308082	1					
ANR	1308153	Callee	is_space		1308082	0					
ANR	1308154	Identifier	is_space		1308082	0					
ANR	1308155	ArgumentList	* p		1308082	1					
ANR	1308156	Argument	* p		1308082	0					
ANR	1308157	UnaryOperationExpression	* p		1308082	0					
ANR	1308158	UnaryOperator	*		1308082	0					
ANR	1308159	Identifier	p		1308082	1					
ANR	1308160	CompoundStatement		10:29:225:225	1308082	1					
ANR	1308161	ExpressionStatement	p ++	250:2:5452:5455	1308082	0	True				
ANR	1308162	PostIncDecOperationExpression	p ++		1308082	0					
ANR	1308163	Identifier	p		1308082	0					
ANR	1308164	IncDec	++		1308082	1					
ANR	1308165	IfStatement	if ( is_var ( p ) )		1308082	7					
ANR	1308166	Condition	is_var ( p )	252:5:5465:5474	1308082	0	True				
ANR	1308167	CallExpression	is_var ( p )		1308082	0					
ANR	1308168	Callee	is_var		1308082	0					
ANR	1308169	Identifier	is_var		1308082	0					
ANR	1308170	ArgumentList	p		1308082	1					
ANR	1308171	Argument	p		1308082	0					
ANR	1308172	Identifier	p		1308082	0					
ANR	1308173	CompoundStatement		13:17:254:254	1308082	1					
ANR	1308174	ExpressionStatement	"p = r_egg_mkvar ( egg , buf , p , 0 )"	253:2:5481:5513	1308082	0	True				
ANR	1308175	AssignmentExpression	"p = r_egg_mkvar ( egg , buf , p , 0 )"		1308082	0		=			
ANR	1308176	Identifier	p		1308082	0					
ANR	1308177	CallExpression	"r_egg_mkvar ( egg , buf , p , 0 )"		1308082	1					
ANR	1308178	Callee	r_egg_mkvar		1308082	0					
ANR	1308179	Identifier	r_egg_mkvar		1308082	0					
ANR	1308180	ArgumentList	egg		1308082	1					
ANR	1308181	Argument	egg		1308082	0					
ANR	1308182	Identifier	egg		1308082	0					
ANR	1308183	Argument	buf		1308082	1					
ANR	1308184	Identifier	buf		1308082	0					
ANR	1308185	Argument	p		1308082	2					
ANR	1308186	Identifier	p		1308082	0					
ANR	1308187	Argument	0		1308082	3					
ANR	1308188	PrimaryExpression	0		1308082	0					
ANR	1308189	IfStatement	if ( egg -> lang . varxs == '*' )		1308082	1					
ANR	1308190	Condition	egg -> lang . varxs == '*'	254:6:5521:5542	1308082	0	True				
ANR	1308191	EqualityExpression	egg -> lang . varxs == '*'		1308082	0		==			
ANR	1308192	MemberAccess	egg -> lang . varxs		1308082	0					
ANR	1308193	PtrMemberAccess	egg -> lang		1308082	0					
ANR	1308194	Identifier	egg		1308082	0					
ANR	1308195	Identifier	lang		1308082	1					
ANR	1308196	Identifier	varxs		1308082	1					
ANR	1308197	PrimaryExpression	'*'		1308082	1					
ANR	1308198	CompoundStatement		15:30:322:322	1308082	1					
ANR	1308199	ExpressionStatement	"e -> load ( egg , p , egg -> lang . varsize )"	255:3:5550:5585	1308082	0	True				
ANR	1308200	CallExpression	"e -> load ( egg , p , egg -> lang . varsize )"		1308082	0					
ANR	1308201	Callee	e -> load		1308082	0					
ANR	1308202	PtrMemberAccess	e -> load		1308082	0					
ANR	1308203	Identifier	e		1308082	0					
ANR	1308204	Identifier	load		1308082	1					
ANR	1308205	ArgumentList	egg		1308082	1					
ANR	1308206	Argument	egg		1308082	0					
ANR	1308207	Identifier	egg		1308082	0					
ANR	1308208	Argument	p		1308082	1					
ANR	1308209	Identifier	p		1308082	0					
ANR	1308210	Argument	egg -> lang . varsize		1308082	2					
ANR	1308211	MemberAccess	egg -> lang . varsize		1308082	0					
ANR	1308212	PtrMemberAccess	egg -> lang		1308082	0					
ANR	1308213	Identifier	egg		1308082	0					
ANR	1308214	Identifier	lang		1308082	1					
ANR	1308215	Identifier	varsize		1308082	1					
ANR	1308216	ExpressionStatement	R_FREE ( oldp )	256:3:5590:5603	1308082	1	True				
ANR	1308217	CallExpression	R_FREE ( oldp )		1308082	0					
ANR	1308218	Callee	R_FREE		1308082	0					
ANR	1308219	Identifier	R_FREE		1308082	0					
ANR	1308220	ArgumentList	oldp		1308082	1					
ANR	1308221	Argument	oldp		1308082	0					
ANR	1308222	Identifier	oldp		1308082	0					
ANR	1308223	ExpressionStatement	"oldp = p = strdup ( e -> regs ( egg , 0 ) )"	257:3:5608:5644	1308082	2	True				
ANR	1308224	AssignmentExpression	"oldp = p = strdup ( e -> regs ( egg , 0 ) )"		1308082	0		=			
ANR	1308225	Identifier	oldp		1308082	0					
ANR	1308226	AssignmentExpression	"p = strdup ( e -> regs ( egg , 0 ) )"		1308082	1		=			
ANR	1308227	Identifier	p		1308082	0					
ANR	1308228	CallExpression	"strdup ( e -> regs ( egg , 0 ) )"		1308082	1					
ANR	1308229	Callee	strdup		1308082	0					
ANR	1308230	Identifier	strdup		1308082	0					
ANR	1308231	ArgumentList	"e -> regs ( egg , 0 )"		1308082	1					
ANR	1308232	Argument	"e -> regs ( egg , 0 )"		1308082	0					
ANR	1308233	CallExpression	"e -> regs ( egg , 0 )"		1308082	0					
ANR	1308234	Callee	e -> regs		1308082	0					
ANR	1308235	PtrMemberAccess	e -> regs		1308082	0					
ANR	1308236	Identifier	e		1308082	0					
ANR	1308237	Identifier	regs		1308082	1					
ANR	1308238	ArgumentList	egg		1308082	1					
ANR	1308239	Argument	egg		1308082	0					
ANR	1308240	Identifier	egg		1308082	0					
ANR	1308241	Argument	0		1308082	1					
ANR	1308242	PrimaryExpression	0		1308082	0					
ANR	1308243	ElseStatement	else		1308082	0					
ANR	1308244	IfStatement	if ( egg -> lang . varxs == '&' )		1308082	0					
ANR	1308245	Condition	egg -> lang . varxs == '&'	260:13:5749:5770	1308082	0	True				
ANR	1308246	EqualityExpression	egg -> lang . varxs == '&'		1308082	0		==			
ANR	1308247	MemberAccess	egg -> lang . varxs		1308082	0					
ANR	1308248	PtrMemberAccess	egg -> lang		1308082	0					
ANR	1308249	Identifier	egg		1308082	0					
ANR	1308250	Identifier	lang		1308082	1					
ANR	1308251	Identifier	varxs		1308082	1					
ANR	1308252	PrimaryExpression	'&'		1308082	1					
ANR	1308253	CompoundStatement		21:37:550:550	1308082	1					
ANR	1308254	ExpressionStatement	"e -> load_ptr ( egg , p )"	261:3:5778:5798	1308082	0	True				
ANR	1308255	CallExpression	"e -> load_ptr ( egg , p )"		1308082	0					
ANR	1308256	Callee	e -> load_ptr		1308082	0					
ANR	1308257	PtrMemberAccess	e -> load_ptr		1308082	0					
ANR	1308258	Identifier	e		1308082	0					
ANR	1308259	Identifier	load_ptr		1308082	1					
ANR	1308260	ArgumentList	egg		1308082	1					
ANR	1308261	Argument	egg		1308082	0					
ANR	1308262	Identifier	egg		1308082	0					
ANR	1308263	Argument	p		1308082	1					
ANR	1308264	Identifier	p		1308082	0					
ANR	1308265	ExpressionStatement	R_FREE ( oldp )	262:3:5803:5816	1308082	1	True				
ANR	1308266	CallExpression	R_FREE ( oldp )		1308082	0					
ANR	1308267	Callee	R_FREE		1308082	0					
ANR	1308268	Identifier	R_FREE		1308082	0					
ANR	1308269	ArgumentList	oldp		1308082	1					
ANR	1308270	Argument	oldp		1308082	0					
ANR	1308271	Identifier	oldp		1308082	0					
ANR	1308272	ExpressionStatement	"oldp = p = strdup ( e -> regs ( egg , 0 ) )"	263:3:5821:5857	1308082	2	True				
ANR	1308273	AssignmentExpression	"oldp = p = strdup ( e -> regs ( egg , 0 ) )"		1308082	0		=			
ANR	1308274	Identifier	oldp		1308082	0					
ANR	1308275	AssignmentExpression	"p = strdup ( e -> regs ( egg , 0 ) )"		1308082	1		=			
ANR	1308276	Identifier	p		1308082	0					
ANR	1308277	CallExpression	"strdup ( e -> regs ( egg , 0 ) )"		1308082	1					
ANR	1308278	Callee	strdup		1308082	0					
ANR	1308279	Identifier	strdup		1308082	0					
ANR	1308280	ArgumentList	"e -> regs ( egg , 0 )"		1308082	1					
ANR	1308281	Argument	"e -> regs ( egg , 0 )"		1308082	0					
ANR	1308282	CallExpression	"e -> regs ( egg , 0 )"		1308082	0					
ANR	1308283	Callee	e -> regs		1308082	0					
ANR	1308284	PtrMemberAccess	e -> regs		1308082	0					
ANR	1308285	Identifier	e		1308082	0					
ANR	1308286	Identifier	regs		1308082	1					
ANR	1308287	ArgumentList	egg		1308082	1					
ANR	1308288	Argument	egg		1308082	0					
ANR	1308289	Identifier	egg		1308082	0					
ANR	1308290	Argument	0		1308082	1					
ANR	1308291	PrimaryExpression	0		1308082	0					
ANR	1308292	ExpressionStatement	type = ' '	265:2:5865:5875	1308082	2	True				
ANR	1308293	AssignmentExpression	type = ' '		1308082	0		=			
ANR	1308294	Identifier	type		1308082	0					
ANR	1308295	PrimaryExpression	' '		1308082	1					
ANR	1308296	ElseStatement	else		1308082	0					
ANR	1308297	CompoundStatement		27:8:662:662	1308082	0					
ANR	1308298	ExpressionStatement	type = '$'	267:2:5889:5899	1308082	0	True				
ANR	1308299	AssignmentExpression	type = '$'		1308082	0		=			
ANR	1308300	Identifier	type		1308082	0					
ANR	1308301	PrimaryExpression	'$'		1308082	1					
ANR	1308302	IfStatement	if ( * p )		1308082	8					
ANR	1308303	Condition	* p	269:5:5909:5910	1308082	0	True				
ANR	1308304	UnaryOperationExpression	* p		1308082	0					
ANR	1308305	UnaryOperator	*		1308082	0					
ANR	1308306	Identifier	p		1308082	1					
ANR	1308307	CompoundStatement		30:9:690:690	1308082	1					
ANR	1308308	ExpressionStatement	"e -> mathop ( egg , op , egg -> lang . varsize , type , p , ep )"	270:2:5917:5968	1308082	0	True				
ANR	1308309	CallExpression	"e -> mathop ( egg , op , egg -> lang . varsize , type , p , ep )"		1308082	0					
ANR	1308310	Callee	e -> mathop		1308082	0					
ANR	1308311	PtrMemberAccess	e -> mathop		1308082	0					
ANR	1308312	Identifier	e		1308082	0					
ANR	1308313	Identifier	mathop		1308082	1					
ANR	1308314	ArgumentList	egg		1308082	1					
ANR	1308315	Argument	egg		1308082	0					
ANR	1308316	Identifier	egg		1308082	0					
ANR	1308317	Argument	op		1308082	1					
ANR	1308318	Identifier	op		1308082	0					
ANR	1308319	Argument	egg -> lang . varsize		1308082	2					
ANR	1308320	MemberAccess	egg -> lang . varsize		1308082	0					
ANR	1308321	PtrMemberAccess	egg -> lang		1308082	0					
ANR	1308322	Identifier	egg		1308082	0					
ANR	1308323	Identifier	lang		1308082	1					
ANR	1308324	Identifier	varsize		1308082	1					
ANR	1308325	Argument	type		1308082	3					
ANR	1308326	Identifier	type		1308082	0					
ANR	1308327	Argument	p		1308082	4					
ANR	1308328	Identifier	p		1308082	0					
ANR	1308329	Argument	ep		1308082	5					
ANR	1308330	Identifier	ep		1308082	0					
ANR	1308331	IfStatement	if ( p != oldp )		1308082	9					
ANR	1308332	Condition	p != oldp	272:5:5978:5986	1308082	0	True				
ANR	1308333	EqualityExpression	p != oldp		1308082	0		!=			
ANR	1308334	Identifier	p		1308082	0					
ANR	1308335	Identifier	oldp		1308082	1					
ANR	1308336	CompoundStatement		33:16:766:766	1308082	1					
ANR	1308337	ExpressionStatement	R_FREE ( p )	273:2:5993:6003	1308082	0	True				
ANR	1308338	CallExpression	R_FREE ( p )		1308082	0					
ANR	1308339	Callee	R_FREE		1308082	0					
ANR	1308340	Identifier	R_FREE		1308082	0					
ANR	1308341	ArgumentList	p		1308082	1					
ANR	1308342	Argument	p		1308082	0					
ANR	1308343	Identifier	p		1308082	0					
ANR	1308344	ExpressionStatement	R_FREE ( oldp )	275:1:6009:6022	1308082	10	True				
ANR	1308345	CallExpression	R_FREE ( oldp )		1308082	0					
ANR	1308346	Callee	R_FREE		1308082	0					
ANR	1308347	Identifier	R_FREE		1308082	0					
ANR	1308348	ArgumentList	oldp		1308082	1					
ANR	1308349	Argument	oldp		1308082	0					
ANR	1308350	Identifier	oldp		1308082	0					
ANR	1308351	ExpressionStatement	R_FREE ( ep )	276:1:6025:6036	1308082	11	True				
ANR	1308352	CallExpression	R_FREE ( ep )		1308082	0					
ANR	1308353	Callee	R_FREE		1308082	0					
ANR	1308354	Identifier	R_FREE		1308082	0					
ANR	1308355	ArgumentList	ep		1308082	1					
ANR	1308356	Argument	ep		1308082	0					
ANR	1308357	Identifier	ep		1308082	0					
ANR	1308358	ReturnType	static void		1308082	1					
ANR	1308359	Identifier	rcc_internal_mathop		1308082	2					
ANR	1308360	ParameterList	"REgg * egg , const char * ptr , char * ep , char op"		1308082	3					
ANR	1308361	Parameter	REgg * egg	240:32:5175:5183	1308082	0	True				
ANR	1308362	ParameterType	REgg *		1308082	0					
ANR	1308363	Identifier	egg		1308082	1					
ANR	1308364	Parameter	const char * ptr	240:43:5186:5200	1308082	1	True				
ANR	1308365	ParameterType	const char *		1308082	0					
ANR	1308366	Identifier	ptr		1308082	1					
ANR	1308367	Parameter	char * ep	240:60:5203:5210	1308082	2	True				
ANR	1308368	ParameterType	char *		1308082	0					
ANR	1308369	Identifier	ep		1308082	1					
ANR	1308370	Parameter	char op	240:70:5213:5219	1308082	3	True				
ANR	1308371	ParameterType	char		1308082	0					
ANR	1308372	Identifier	op		1308082	1					
ANR	1308373	CFGEntryNode	ENTRY		1308082		True				
ANR	1308374	CFGExitNode	EXIT		1308082		True				
ANR	1308375	Symbol	egg		1308082						
ANR	1308376	Symbol	type		1308082						
ANR	1308377	Symbol	egg -> remit		1308082						
ANR	1308378	Symbol	egg -> lang		1308082						
ANR	1308379	Symbol	* egg		1308082						
ANR	1308380	Symbol	e -> regs		1308082						
ANR	1308381	Symbol	egg -> lang . varsize		1308082						
ANR	1308382	Symbol	egg -> lang . varxs		1308082						
ANR	1308383	Symbol	is_space		1308082						
ANR	1308384	Symbol	oldp		1308082						
ANR	1308385	Symbol	r_egg_mkvar		1308082						
ANR	1308386	Symbol	op		1308082						
ANR	1308387	Symbol	get_op		1308082						
ANR	1308388	Symbol	e		1308082						
ANR	1308389	Symbol	ep		1308082						
ANR	1308390	Symbol	ptr		1308082						
ANR	1308391	Symbol	* e		1308082						
ANR	1308392	Symbol	p		1308082						
ANR	1308393	Symbol	q		1308082						
ANR	1308394	Symbol	buf		1308082						
ANR	1308395	Symbol	& q		1308082						
ANR	1308396	Symbol	x00		1308082						
ANR	1308397	Symbol	* p		1308082						
ANR	1308398	Symbol	strdup		1308082						
ANR	1308399	Symbol	* q		1308082						
ANR	1308400	Symbol	is_var		1308082						
ANR	1308401	Function	rcc_mathop	284:0:6098:7367							
ANR	1308402	FunctionDef	"rcc_mathop (REgg * egg , char * * pos , int level)"		1308401	0					
ANR	1308403	CompoundStatement		284:57:6155:7367	1308401	0					
ANR	1308404	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	285:1:6158:6182	1308401	0	True				
ANR	1308405	IdentifierDecl	* e = egg -> remit		1308401	0					
ANR	1308406	IdentifierDeclType	REggEmit *		1308401	0					
ANR	1308407	Identifier	e		1308401	1					
ANR	1308408	AssignmentExpression	* e = egg -> remit		1308401	2		=			
ANR	1308409	Identifier	e		1308401	0					
ANR	1308410	PtrMemberAccess	egg -> remit		1308401	1					
ANR	1308411	Identifier	egg		1308401	0					
ANR	1308412	Identifier	remit		1308401	1					
ANR	1308413	IdentifierDeclStatement	int op_ret = level ;	286:1:6185:6203	1308401	1	True				
ANR	1308414	IdentifierDecl	op_ret = level		1308401	0					
ANR	1308415	IdentifierDeclType	int		1308401	0					
ANR	1308416	Identifier	op_ret		1308401	1					
ANR	1308417	AssignmentExpression	op_ret = level		1308401	2		=			
ANR	1308418	Identifier	level		1308401	0					
ANR	1308419	Identifier	level		1308401	1					
ANR	1308420	IdentifierDeclStatement	"char op , * next_pos ;"	287:1:6206:6224	1308401	2	True				
ANR	1308421	IdentifierDecl	op		1308401	0					
ANR	1308422	IdentifierDeclType	char		1308401	0					
ANR	1308423	Identifier	op		1308401	1					
ANR	1308424	IdentifierDecl	* next_pos		1308401	1					
ANR	1308425	IdentifierDeclType	char *		1308401	0					
ANR	1308426	Identifier	next_pos		1308401	1					
ANR	1308427	WhileStatement	while ( * * pos && is_space ( * * pos ) )		1308401	3					
ANR	1308428	Condition	* * pos && is_space ( * * pos )	289:8:6235:6259	1308401	0	True				
ANR	1308429	AndExpression	* * pos && is_space ( * * pos )		1308401	0		&&			
ANR	1308430	UnaryOperationExpression	* * pos		1308401	0					
ANR	1308431	UnaryOperator	*		1308401	0					
ANR	1308432	UnaryOperationExpression	* pos		1308401	1					
ANR	1308433	UnaryOperator	*		1308401	0					
ANR	1308434	Identifier	pos		1308401	1					
ANR	1308435	CallExpression	is_space ( * * pos )		1308401	1					
ANR	1308436	Callee	is_space		1308401	0					
ANR	1308437	Identifier	is_space		1308401	0					
ANR	1308438	ArgumentList	* * pos		1308401	1					
ANR	1308439	Argument	* * pos		1308401	0					
ANR	1308440	UnaryOperationExpression	* * pos		1308401	0					
ANR	1308441	UnaryOperator	*		1308401	0					
ANR	1308442	UnaryOperationExpression	* pos		1308401	1					
ANR	1308443	UnaryOperator	*		1308401	0					
ANR	1308444	Identifier	pos		1308401	1					
ANR	1308445	CompoundStatement		6:35:106:106	1308401	1					
ANR	1308446	ExpressionStatement	( * pos ) ++	290:2:6266:6274	1308401	0	True				
ANR	1308447	PostIncDecOperationExpression	( * pos ) ++		1308401	0					
ANR	1308448	UnaryOperationExpression	* pos		1308401	0					
ANR	1308449	UnaryOperator	*		1308401	0					
ANR	1308450	Identifier	pos		1308401	1					
ANR	1308451	IncDec	++		1308401	1					
ANR	1308452	ExpressionStatement	next_pos = * pos + 1	292:1:6280:6299	1308401	4	True				
ANR	1308453	AssignmentExpression	next_pos = * pos + 1		1308401	0		=			
ANR	1308454	Identifier	next_pos		1308401	0					
ANR	1308455	AdditiveExpression	* pos + 1		1308401	1		+			
ANR	1308456	UnaryOperationExpression	* pos		1308401	0					
ANR	1308457	UnaryOperator	*		1308401	0					
ANR	1308458	Identifier	pos		1308401	1					
ANR	1308459	PrimaryExpression	1		1308401	1					
ANR	1308460	DoStatement	do		1308401	5					
ANR	1308461	CompoundStatement		11:4:150:150	1308401	0					
ANR	1308462	ExpressionStatement	op = ( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * * pos : '='	295:2:6310:6362	1308401	0	True				
ANR	1308463	AssignmentExpression	op = ( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * * pos : '='		1308401	0		=			
ANR	1308464	Identifier	op		1308401	0					
ANR	1308465	ConditionalExpression	( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * * pos : '='		1308401	1					
ANR	1308466	Condition	is_op ( * * pos ) && ! ( is_var ( * pos ) )		1308401	0					
ANR	1308467	AndExpression	is_op ( * * pos ) && ! ( is_var ( * pos ) )		1308401	0		&&			
ANR	1308468	CallExpression	is_op ( * * pos )		1308401	0					
ANR	1308469	Callee	is_op		1308401	0					
ANR	1308470	Identifier	is_op		1308401	0					
ANR	1308471	ArgumentList	* * pos		1308401	1					
ANR	1308472	Argument	* * pos		1308401	0					
ANR	1308473	UnaryOperationExpression	* * pos		1308401	0					
ANR	1308474	UnaryOperator	*		1308401	0					
ANR	1308475	UnaryOperationExpression	* pos		1308401	1					
ANR	1308476	UnaryOperator	*		1308401	0					
ANR	1308477	Identifier	pos		1308401	1					
ANR	1308478	UnaryOperationExpression	! ( is_var ( * pos ) )		1308401	1					
ANR	1308479	UnaryOperator	!		1308401	0					
ANR	1308480	CallExpression	is_var ( * pos )		1308401	1					
ANR	1308481	Callee	is_var		1308401	0					
ANR	1308482	Identifier	is_var		1308401	0					
ANR	1308483	ArgumentList	* pos		1308401	1					
ANR	1308484	Argument	* pos		1308401	0					
ANR	1308485	UnaryOperationExpression	* pos		1308401	0					
ANR	1308486	UnaryOperator	*		1308401	0					
ANR	1308487	Identifier	pos		1308401	1					
ANR	1308488	UnaryOperationExpression	* * pos		1308401	1					
ANR	1308489	UnaryOperator	*		1308401	0					
ANR	1308490	UnaryOperationExpression	* pos		1308401	1					
ANR	1308491	UnaryOperator	*		1308401	0					
ANR	1308492	Identifier	pos		1308401	1					
ANR	1308493	PrimaryExpression	'='		1308401	2					
ANR	1308494	ExpressionStatement	* pos = ( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * pos + 1 : * pos	296:2:6366:6424	1308401	1	True				
ANR	1308495	AssignmentExpression	* pos = ( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * pos + 1 : * pos		1308401	0		=			
ANR	1308496	UnaryOperationExpression	* pos		1308401	0					
ANR	1308497	UnaryOperator	*		1308401	0					
ANR	1308498	Identifier	pos		1308401	1					
ANR	1308499	ConditionalExpression	( is_op ( * * pos ) && ! ( is_var ( * pos ) ) ) ? * pos + 1 : * pos		1308401	1					
ANR	1308500	Condition	is_op ( * * pos ) && ! ( is_var ( * pos ) )		1308401	0					
ANR	1308501	AndExpression	is_op ( * * pos ) && ! ( is_var ( * pos ) )		1308401	0		&&			
ANR	1308502	CallExpression	is_op ( * * pos )		1308401	0					
ANR	1308503	Callee	is_op		1308401	0					
ANR	1308504	Identifier	is_op		1308401	0					
ANR	1308505	ArgumentList	* * pos		1308401	1					
ANR	1308506	Argument	* * pos		1308401	0					
ANR	1308507	UnaryOperationExpression	* * pos		1308401	0					
ANR	1308508	UnaryOperator	*		1308401	0					
ANR	1308509	UnaryOperationExpression	* pos		1308401	1					
ANR	1308510	UnaryOperator	*		1308401	0					
ANR	1308511	Identifier	pos		1308401	1					
ANR	1308512	UnaryOperationExpression	! ( is_var ( * pos ) )		1308401	1					
ANR	1308513	UnaryOperator	!		1308401	0					
ANR	1308514	CallExpression	is_var ( * pos )		1308401	1					
ANR	1308515	Callee	is_var		1308401	0					
ANR	1308516	Identifier	is_var		1308401	0					
ANR	1308517	ArgumentList	* pos		1308401	1					
ANR	1308518	Argument	* pos		1308401	0					
ANR	1308519	UnaryOperationExpression	* pos		1308401	0					
ANR	1308520	UnaryOperator	*		1308401	0					
ANR	1308521	Identifier	pos		1308401	1					
ANR	1308522	AdditiveExpression	* pos + 1		1308401	1		+			
ANR	1308523	UnaryOperationExpression	* pos		1308401	0					
ANR	1308524	UnaryOperator	*		1308401	0					
ANR	1308525	Identifier	pos		1308401	1					
ANR	1308526	PrimaryExpression	1		1308401	1					
ANR	1308527	UnaryOperationExpression	* pos		1308401	2					
ANR	1308528	UnaryOperator	*		1308401	0					
ANR	1308529	Identifier	pos		1308401	1					
ANR	1308530	ExpressionStatement	op_ret = get_op ( & next_pos )	297:2:6428:6455	1308401	2	True				
ANR	1308531	AssignmentExpression	op_ret = get_op ( & next_pos )		1308401	0		=			
ANR	1308532	Identifier	op_ret		1308401	0					
ANR	1308533	CallExpression	get_op ( & next_pos )		1308401	1					
ANR	1308534	Callee	get_op		1308401	0					
ANR	1308535	Identifier	get_op		1308401	0					
ANR	1308536	ArgumentList	& next_pos		1308401	1					
ANR	1308537	Argument	& next_pos		1308401	0					
ANR	1308538	UnaryOperationExpression	& next_pos		1308401	0					
ANR	1308539	UnaryOperator	&		1308401	0					
ANR	1308540	Identifier	next_pos		1308401	1					
ANR	1308541	IfStatement	if ( op_ret > level )		1308401	3					
ANR	1308542	Condition	op_ret > level	298:6:6463:6476	1308401	0	True				
ANR	1308543	RelationalExpression	op_ret > level		1308401	0		>			
ANR	1308544	Identifier	op_ret		1308401	0					
ANR	1308545	Identifier	level		1308401	1					
ANR	1308546	CompoundStatement		15:22:323:323	1308401	1					
ANR	1308547	ExpressionStatement	"rcc_mathop ( egg , pos , op_ret )"	299:3:6484:6513	1308401	0	True				
ANR	1308548	CallExpression	"rcc_mathop ( egg , pos , op_ret )"		1308401	0					
ANR	1308549	Callee	rcc_mathop		1308401	0					
ANR	1308550	Identifier	rcc_mathop		1308401	0					
ANR	1308551	ArgumentList	egg		1308401	1					
ANR	1308552	Argument	egg		1308401	0					
ANR	1308553	Identifier	egg		1308401	0					
ANR	1308554	Argument	pos		1308401	1					
ANR	1308555	Identifier	pos		1308401	0					
ANR	1308556	Argument	op_ret		1308401	2					
ANR	1308557	Identifier	op_ret		1308401	0					
ANR	1308558	ExpressionStatement	"rcc_internal_mathop ( egg , e -> regs ( egg , op_ret - 1 ) , strdup ( e -> regs ( egg , level - 1 ) ) , op )"	300:3:6518:6613	1308401	1	True				
ANR	1308559	CallExpression	"rcc_internal_mathop ( egg , e -> regs ( egg , op_ret - 1 ) , strdup ( e -> regs ( egg , level - 1 ) ) , op )"		1308401	0					
ANR	1308560	Callee	rcc_internal_mathop		1308401	0					
ANR	1308561	Identifier	rcc_internal_mathop		1308401	0					
ANR	1308562	ArgumentList	egg		1308401	1					
ANR	1308563	Argument	egg		1308401	0					
ANR	1308564	Identifier	egg		1308401	0					
ANR	1308565	Argument	"e -> regs ( egg , op_ret - 1 )"		1308401	1					
ANR	1308566	CallExpression	"e -> regs ( egg , op_ret - 1 )"		1308401	0					
ANR	1308567	Callee	e -> regs		1308401	0					
ANR	1308568	PtrMemberAccess	e -> regs		1308401	0					
ANR	1308569	Identifier	e		1308401	0					
ANR	1308570	Identifier	regs		1308401	1					
ANR	1308571	ArgumentList	egg		1308401	1					
ANR	1308572	Argument	egg		1308401	0					
ANR	1308573	Identifier	egg		1308401	0					
ANR	1308574	Argument	op_ret - 1		1308401	1					
ANR	1308575	AdditiveExpression	op_ret - 1		1308401	0		-			
ANR	1308576	Identifier	op_ret		1308401	0					
ANR	1308577	PrimaryExpression	1		1308401	1					
ANR	1308578	Argument	"strdup ( e -> regs ( egg , level - 1 ) )"		1308401	2					
ANR	1308579	CallExpression	"strdup ( e -> regs ( egg , level - 1 ) )"		1308401	0					
ANR	1308580	Callee	strdup		1308401	0					
ANR	1308581	Identifier	strdup		1308401	0					
ANR	1308582	ArgumentList	"e -> regs ( egg , level - 1 )"		1308401	1					
ANR	1308583	Argument	"e -> regs ( egg , level - 1 )"		1308401	0					
ANR	1308584	CallExpression	"e -> regs ( egg , level - 1 )"		1308401	0					
ANR	1308585	Callee	e -> regs		1308401	0					
ANR	1308586	PtrMemberAccess	e -> regs		1308401	0					
ANR	1308587	Identifier	e		1308401	0					
ANR	1308588	Identifier	regs		1308401	1					
ANR	1308589	ArgumentList	egg		1308401	1					
ANR	1308590	Argument	egg		1308401	0					
ANR	1308591	Identifier	egg		1308401	0					
ANR	1308592	Argument	level - 1		1308401	1					
ANR	1308593	AdditiveExpression	level - 1		1308401	0		-			
ANR	1308594	Identifier	level		1308401	0					
ANR	1308595	PrimaryExpression	1		1308401	1					
ANR	1308596	Argument	op		1308401	3					
ANR	1308597	Identifier	op		1308401	0					
ANR	1308598	ExpressionStatement	next_pos = * pos + 1	302:3:6618:6637	1308401	2	True				
ANR	1308599	AssignmentExpression	next_pos = * pos + 1		1308401	0		=			
ANR	1308600	Identifier	next_pos		1308401	0					
ANR	1308601	AdditiveExpression	* pos + 1		1308401	1		+			
ANR	1308602	UnaryOperationExpression	* pos		1308401	0					
ANR	1308603	UnaryOperator	*		1308401	0					
ANR	1308604	Identifier	pos		1308401	1					
ANR	1308605	PrimaryExpression	1		1308401	1					
ANR	1308606	ElseStatement	else		1308401	0					
ANR	1308607	CompoundStatement		20:9:492:492	1308401	0					
ANR	1308608	ExpressionStatement	"rcc_internal_mathop ( egg , * pos , strdup ( e -> regs ( egg , level - 1 ) ) , op )"	304:3:6653:6723	1308401	0	True				
ANR	1308609	CallExpression	"rcc_internal_mathop ( egg , * pos , strdup ( e -> regs ( egg , level - 1 ) ) , op )"		1308401	0					
ANR	1308610	Callee	rcc_internal_mathop		1308401	0					
ANR	1308611	Identifier	rcc_internal_mathop		1308401	0					
ANR	1308612	ArgumentList	egg		1308401	1					
ANR	1308613	Argument	egg		1308401	0					
ANR	1308614	Identifier	egg		1308401	0					
ANR	1308615	Argument	* pos		1308401	1					
ANR	1308616	UnaryOperationExpression	* pos		1308401	0					
ANR	1308617	UnaryOperator	*		1308401	0					
ANR	1308618	Identifier	pos		1308401	1					
ANR	1308619	Argument	"strdup ( e -> regs ( egg , level - 1 ) )"		1308401	2					
ANR	1308620	CallExpression	"strdup ( e -> regs ( egg , level - 1 ) )"		1308401	0					
ANR	1308621	Callee	strdup		1308401	0					
ANR	1308622	Identifier	strdup		1308401	0					
ANR	1308623	ArgumentList	"e -> regs ( egg , level - 1 )"		1308401	1					
ANR	1308624	Argument	"e -> regs ( egg , level - 1 )"		1308401	0					
ANR	1308625	CallExpression	"e -> regs ( egg , level - 1 )"		1308401	0					
ANR	1308626	Callee	e -> regs		1308401	0					
ANR	1308627	PtrMemberAccess	e -> regs		1308401	0					
ANR	1308628	Identifier	e		1308401	0					
ANR	1308629	Identifier	regs		1308401	1					
ANR	1308630	ArgumentList	egg		1308401	1					
ANR	1308631	Argument	egg		1308401	0					
ANR	1308632	Identifier	egg		1308401	0					
ANR	1308633	Argument	level - 1		1308401	1					
ANR	1308634	AdditiveExpression	level - 1		1308401	0		-			
ANR	1308635	Identifier	level		1308401	0					
ANR	1308636	PrimaryExpression	1		1308401	1					
ANR	1308637	Argument	op		1308401	3					
ANR	1308638	Identifier	op		1308401	0					
ANR	1308639	ExpressionStatement	* pos = next_pos	305:3:6728:6743	1308401	1	True				
ANR	1308640	AssignmentExpression	* pos = next_pos		1308401	0		=			
ANR	1308641	UnaryOperationExpression	* pos		1308401	0					
ANR	1308642	UnaryOperator	*		1308401	0					
ANR	1308643	Identifier	pos		1308401	1					
ANR	1308644	Identifier	next_pos		1308401	1					
ANR	1308645	ExpressionStatement	next_pos ++	306:3:6748:6758	1308401	2	True				
ANR	1308646	PostIncDecOperationExpression	next_pos ++		1308401	0					
ANR	1308647	Identifier	next_pos		1308401	0					
ANR	1308648	IncDec	++		1308401	1					
ANR	1308649	Condition	* * pos && op_ret >= level	308:10:6774:6797	1308401	1	True				
ANR	1308650	AndExpression	* * pos && op_ret >= level		1308401	0		&&			
ANR	1308651	UnaryOperationExpression	* * pos		1308401	0					
ANR	1308652	UnaryOperator	*		1308401	0					
ANR	1308653	UnaryOperationExpression	* pos		1308401	1					
ANR	1308654	UnaryOperator	*		1308401	0					
ANR	1308655	Identifier	pos		1308401	1					
ANR	1308656	RelationalExpression	op_ret >= level		1308401	1		>=			
ANR	1308657	Identifier	op_ret		1308401	0					
ANR	1308658	Identifier	level		1308401	1					
ANR	1308659	ReturnType	static void		1308401	1					
ANR	1308660	Identifier	rcc_mathop		1308401	2					
ANR	1308661	ParameterList	"REgg * egg , char * * pos , int level"		1308401	3					
ANR	1308662	Parameter	REgg * egg	284:23:6121:6129	1308401	0	True				
ANR	1308663	ParameterType	REgg *		1308401	0					
ANR	1308664	Identifier	egg		1308401	1					
ANR	1308665	Parameter	char * * pos	284:34:6132:6141	1308401	1	True				
ANR	1308666	ParameterType	char * *		1308401	0					
ANR	1308667	Identifier	pos		1308401	1					
ANR	1308668	Parameter	int level	284:46:6144:6152	1308401	2	True				
ANR	1308669	ParameterType	int		1308401	0					
ANR	1308670	Identifier	level		1308401	1					
ANR	1308671	CFGEntryNode	ENTRY		1308401		True				
ANR	1308672	CFGExitNode	EXIT		1308401		True				
ANR	1308673	Symbol	op		1308401						
ANR	1308674	Symbol	op_ret		1308401						
ANR	1308675	Symbol	& next_pos		1308401						
ANR	1308676	Symbol	get_op		1308401						
ANR	1308677	Symbol	next_pos		1308401						
ANR	1308678	Symbol	egg		1308401						
ANR	1308679	Symbol	level		1308401						
ANR	1308680	Symbol	e		1308401						
ANR	1308681	Symbol	* * pos		1308401						
ANR	1308682	Symbol	is_op		1308401						
ANR	1308683	Symbol	egg -> remit		1308401						
ANR	1308684	Symbol	* e		1308401						
ANR	1308685	Symbol	* egg		1308401						
ANR	1308686	Symbol	e -> regs		1308401						
ANR	1308687	Symbol	pos		1308401						
ANR	1308688	Symbol	strdup		1308401						
ANR	1308689	Symbol	is_space		1308401						
ANR	1308690	Symbol	is_var		1308401						
ANR	1308691	Symbol	* pos		1308401						
ANR	1308692	Function	rcc_pusharg	326:0:7370:7855							
ANR	1308693	FunctionDef	"rcc_pusharg (REgg * egg , char * str)"		1308692	0					
ANR	1308694	CompoundStatement		326:46:7416:7855	1308692	0					
ANR	1308695	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	327:1:7419:7443	1308692	0	True				
ANR	1308696	IdentifierDecl	* e = egg -> remit		1308692	0					
ANR	1308697	IdentifierDeclType	REggEmit *		1308692	0					
ANR	1308698	Identifier	e		1308692	1					
ANR	1308699	AssignmentExpression	* e = egg -> remit		1308692	2		=			
ANR	1308700	Identifier	e		1308692	0					
ANR	1308701	PtrMemberAccess	egg -> remit		1308692	1					
ANR	1308702	Identifier	egg		1308692	0					
ANR	1308703	Identifier	remit		1308692	1					
ANR	1308704	IdentifierDeclStatement	"char buf [ 64 ] , * p = r_egg_mkvar ( egg , buf , str , 0 ) ;"	328:1:7446:7495	1308692	1	True				
ANR	1308705	IdentifierDecl	buf [ 64 ]		1308692	0					
ANR	1308706	IdentifierDeclType	char [ 64 ]		1308692	0					
ANR	1308707	Identifier	buf		1308692	1					
ANR	1308708	PrimaryExpression	64		1308692	2					
ANR	1308709	IdentifierDecl	"* p = r_egg_mkvar ( egg , buf , str , 0 )"		1308692	1					
ANR	1308710	IdentifierDeclType	char *		1308692	0					
ANR	1308711	Identifier	p		1308692	1					
ANR	1308712	AssignmentExpression	"* p = r_egg_mkvar ( egg , buf , str , 0 )"		1308692	2		=			
ANR	1308713	Identifier	p		1308692	0					
ANR	1308714	CallExpression	"r_egg_mkvar ( egg , buf , str , 0 )"		1308692	1					
ANR	1308715	Callee	r_egg_mkvar		1308692	0					
ANR	1308716	Identifier	r_egg_mkvar		1308692	0					
ANR	1308717	ArgumentList	egg		1308692	1					
ANR	1308718	Argument	egg		1308692	0					
ANR	1308719	Identifier	egg		1308692	0					
ANR	1308720	Argument	buf		1308692	1					
ANR	1308721	Identifier	buf		1308692	0					
ANR	1308722	Argument	str		1308692	2					
ANR	1308723	Identifier	str		1308692	0					
ANR	1308724	Argument	0		1308692	3					
ANR	1308725	PrimaryExpression	0		1308692	0					
ANR	1308726	IfStatement	if ( ! p )		1308692	2					
ANR	1308727	Condition	! p	329:5:7502:7503	1308692	0	True				
ANR	1308728	UnaryOperationExpression	! p		1308692	0					
ANR	1308729	UnaryOperator	!		1308692	0					
ANR	1308730	Identifier	p		1308692	1					
ANR	1308731	CompoundStatement		4:9:89:89	1308692	1					
ANR	1308732	ReturnStatement	return ;	330:2:7510:7516	1308692	0	True				
ANR	1308733	ExpressionStatement	R_FREE ( egg -> lang . ctxpush [ CTX ] )	332:1:7522:7553	1308692	3	True				
ANR	1308734	CallExpression	R_FREE ( egg -> lang . ctxpush [ CTX ] )		1308692	0					
ANR	1308735	Callee	R_FREE		1308692	0					
ANR	1308736	Identifier	R_FREE		1308692	0					
ANR	1308737	ArgumentList	egg -> lang . ctxpush [ CTX ]		1308692	1					
ANR	1308738	Argument	egg -> lang . ctxpush [ CTX ]		1308692	0					
ANR	1308739	ArrayIndexing	egg -> lang . ctxpush [ CTX ]		1308692	0					
ANR	1308740	MemberAccess	egg -> lang . ctxpush		1308692	0					
ANR	1308741	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308742	Identifier	egg		1308692	0					
ANR	1308743	Identifier	lang		1308692	1					
ANR	1308744	Identifier	ctxpush		1308692	1					
ANR	1308745	Identifier	CTX		1308692	1					
ANR	1308746	ExpressionStatement	egg -> lang . ctxpush [ CTX ] = strdup ( p )	333:1:7556:7591	1308692	4	True				
ANR	1308747	AssignmentExpression	egg -> lang . ctxpush [ CTX ] = strdup ( p )		1308692	0		=			
ANR	1308748	ArrayIndexing	egg -> lang . ctxpush [ CTX ]		1308692	0					
ANR	1308749	MemberAccess	egg -> lang . ctxpush		1308692	0					
ANR	1308750	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308751	Identifier	egg		1308692	0					
ANR	1308752	Identifier	lang		1308692	1					
ANR	1308753	Identifier	ctxpush		1308692	1					
ANR	1308754	Identifier	CTX		1308692	1					
ANR	1308755	CallExpression	strdup ( p )		1308692	1					
ANR	1308756	Callee	strdup		1308692	0					
ANR	1308757	Identifier	strdup		1308692	0					
ANR	1308758	ArgumentList	p		1308692	1					
ANR	1308759	Argument	p		1308692	0					
ANR	1308760	Identifier	p		1308692	0					
ANR	1308761	ExpressionStatement	egg -> lang . nargs ++	334:1:7631:7648	1308692	5	True				
ANR	1308762	PostIncDecOperationExpression	egg -> lang . nargs ++		1308692	0					
ANR	1308763	MemberAccess	egg -> lang . nargs		1308692	0					
ANR	1308764	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308765	Identifier	egg		1308692	0					
ANR	1308766	Identifier	lang		1308692	1					
ANR	1308767	Identifier	nargs		1308692	1					
ANR	1308768	IncDec	++		1308692	1					
ANR	1308769	IfStatement	if ( egg -> lang . pushargs )		1308692	6					
ANR	1308770	Condition	egg -> lang . pushargs	335:5:7655:7672	1308692	0	True				
ANR	1308771	MemberAccess	egg -> lang . pushargs		1308692	0					
ANR	1308772	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308773	Identifier	egg		1308692	0					
ANR	1308774	Identifier	lang		1308692	1					
ANR	1308775	Identifier	pushargs		1308692	1					
ANR	1308776	CompoundStatement		10:25:258:258	1308692	1					
ANR	1308777	ExpressionStatement	"e -> push_arg ( egg , egg -> lang . varxs , egg -> lang . nargs , p )"	336:2:7679:7733	1308692	0	True				
ANR	1308778	CallExpression	"e -> push_arg ( egg , egg -> lang . varxs , egg -> lang . nargs , p )"		1308692	0					
ANR	1308779	Callee	e -> push_arg		1308692	0					
ANR	1308780	PtrMemberAccess	e -> push_arg		1308692	0					
ANR	1308781	Identifier	e		1308692	0					
ANR	1308782	Identifier	push_arg		1308692	1					
ANR	1308783	ArgumentList	egg		1308692	1					
ANR	1308784	Argument	egg		1308692	0					
ANR	1308785	Identifier	egg		1308692	0					
ANR	1308786	Argument	egg -> lang . varxs		1308692	1					
ANR	1308787	MemberAccess	egg -> lang . varxs		1308692	0					
ANR	1308788	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308789	Identifier	egg		1308692	0					
ANR	1308790	Identifier	lang		1308692	1					
ANR	1308791	Identifier	varxs		1308692	1					
ANR	1308792	Argument	egg -> lang . nargs		1308692	2					
ANR	1308793	MemberAccess	egg -> lang . nargs		1308692	0					
ANR	1308794	PtrMemberAccess	egg -> lang		1308692	0					
ANR	1308795	Identifier	egg		1308692	0					
ANR	1308796	Identifier	lang		1308692	1					
ANR	1308797	Identifier	nargs		1308692	1					
ANR	1308798	Argument	p		1308692	3					
ANR	1308799	Identifier	p		1308692	0					
ANR	1308800	ExpressionStatement	free ( p )	339:1:7845:7853	1308692	7	True				
ANR	1308801	CallExpression	free ( p )		1308692	0					
ANR	1308802	Callee	free		1308692	0					
ANR	1308803	Identifier	free		1308692	0					
ANR	1308804	ArgumentList	p		1308692	1					
ANR	1308805	Argument	p		1308692	0					
ANR	1308806	Identifier	p		1308692	0					
ANR	1308807	ReturnType	static void		1308692	1					
ANR	1308808	Identifier	rcc_pusharg		1308692	2					
ANR	1308809	ParameterList	"REgg * egg , char * str"		1308692	3					
ANR	1308810	Parameter	REgg * egg	326:24:7394:7402	1308692	0	True				
ANR	1308811	ParameterType	REgg *		1308692	0					
ANR	1308812	Identifier	egg		1308692	1					
ANR	1308813	Parameter	char * str	326:35:7405:7413	1308692	1	True				
ANR	1308814	ParameterType	char *		1308692	0					
ANR	1308815	Identifier	str		1308692	1					
ANR	1308816	CFGEntryNode	ENTRY		1308692		True				
ANR	1308817	CFGExitNode	EXIT		1308692		True				
ANR	1308818	Symbol	r_egg_mkvar		1308692						
ANR	1308819	Symbol	egg		1308692						
ANR	1308820	Symbol	e		1308692						
ANR	1308821	Symbol	CTX		1308692						
ANR	1308822	Symbol	egg -> lang . ctxpush		1308692						
ANR	1308823	Symbol	egg -> lang . nargs		1308692						
ANR	1308824	Symbol	* egg -> lang . ctxpush		1308692						
ANR	1308825	Symbol	egg -> remit		1308692						
ANR	1308826	Symbol	egg -> lang		1308692						
ANR	1308827	Symbol	* CTX		1308692						
ANR	1308828	Symbol	* egg -> lang		1308692						
ANR	1308829	Symbol	str		1308692						
ANR	1308830	Symbol	* egg		1308692						
ANR	1308831	Symbol	p		1308692						
ANR	1308832	Symbol	buf		1308692						
ANR	1308833	Symbol	egg -> lang . pushargs		1308692						
ANR	1308834	Symbol	egg -> lang . varxs		1308692						
ANR	1308835	Symbol	* * egg		1308692						
ANR	1308836	Symbol	strdup		1308692						
ANR	1308837	Function	rcc_element	342:0:7858:11169							
ANR	1308838	FunctionDef	"rcc_element (REgg * egg , char * str)"		1308837	0					
ANR	1308839	CompoundStatement		342:46:7904:11169	1308837	0					
ANR	1308840	IfStatement	if ( ! egg || ! str )		1308837	0					
ANR	1308841	Condition	! egg || ! str	343:5:7911:7922	1308837	0	True				
ANR	1308842	OrExpression	! egg || ! str		1308837	0		||			
ANR	1308843	UnaryOperationExpression	! egg		1308837	0					
ANR	1308844	UnaryOperator	!		1308837	0					
ANR	1308845	Identifier	egg		1308837	1					
ANR	1308846	UnaryOperationExpression	! str		1308837	1					
ANR	1308847	UnaryOperator	!		1308837	0					
ANR	1308848	Identifier	str		1308837	1					
ANR	1308849	CompoundStatement		2:19:20:20	1308837	1					
ANR	1308850	ReturnStatement	return ;	344:2:7929:7935	1308837	0	True				
ANR	1308851	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	346:1:7941:7965	1308837	1	True				
ANR	1308852	IdentifierDecl	* e = egg -> remit		1308837	0					
ANR	1308853	IdentifierDeclType	REggEmit *		1308837	0					
ANR	1308854	Identifier	e		1308837	1					
ANR	1308855	AssignmentExpression	* e = egg -> remit		1308837	2		=			
ANR	1308856	Identifier	e		1308837	0					
ANR	1308857	PtrMemberAccess	egg -> remit		1308837	1					
ANR	1308858	Identifier	egg		1308837	0					
ANR	1308859	Identifier	remit		1308837	1					
ANR	1308860	IdentifierDeclStatement	"char * ptr , * p = str + strlen ( str ) ;"	347:1:7968:8002	1308837	2	True				
ANR	1308861	IdentifierDecl	* ptr		1308837	0					
ANR	1308862	IdentifierDeclType	char *		1308837	0					
ANR	1308863	Identifier	ptr		1308837	1					
ANR	1308864	IdentifierDecl	* p = str + strlen ( str )		1308837	1					
ANR	1308865	IdentifierDeclType	char *		1308837	0					
ANR	1308866	Identifier	p		1308837	1					
ANR	1308867	AssignmentExpression	* p = str + strlen ( str )		1308837	2		=			
ANR	1308868	Identifier	p		1308837	0					
ANR	1308869	AdditiveExpression	str + strlen ( str )		1308837	1		+			
ANR	1308870	Identifier	str		1308837	0					
ANR	1308871	CallExpression	strlen ( str )		1308837	1					
ANR	1308872	Callee	strlen		1308837	0					
ANR	1308873	Identifier	strlen		1308837	0					
ANR	1308874	ArgumentList	str		1308837	1					
ANR	1308875	Argument	str		1308837	0					
ANR	1308876	Identifier	str		1308837	0					
ANR	1308877	IdentifierDeclStatement	int inside = 0 ;	348:1:8005:8019	1308837	3	True				
ANR	1308878	IdentifierDecl	inside = 0		1308837	0					
ANR	1308879	IdentifierDeclType	int		1308837	0					
ANR	1308880	Identifier	inside		1308837	1					
ANR	1308881	AssignmentExpression	inside = 0		1308837	2		=			
ANR	1308882	Identifier	inside		1308837	0					
ANR	1308883	PrimaryExpression	0		1308837	1					
ANR	1308884	IdentifierDeclStatement	"int num , num2 ;"	349:1:8022:8035	1308837	4	True				
ANR	1308885	IdentifierDecl	num		1308837	0					
ANR	1308886	IdentifierDeclType	int		1308837	0					
ANR	1308887	Identifier	num		1308837	1					
ANR	1308888	IdentifierDecl	num2		1308837	1					
ANR	1308889	IdentifierDeclType	int		1308837	0					
ANR	1308890	Identifier	num2		1308837	1					
ANR	1308891	IdentifierDeclStatement	int i ;	350:1:8038:8043	1308837	5	True				
ANR	1308892	IdentifierDecl	i		1308837	0					
ANR	1308893	IdentifierDeclType	int		1308837	0					
ANR	1308894	Identifier	i		1308837	1					
ANR	1308895	IfStatement	if ( CTX )		1308837	6					
ANR	1308896	Condition	CTX	352:5:8051:8053	1308837	0	True				
ANR	1308897	Identifier	CTX		1308837	0					
ANR	1308898	CompoundStatement		11:10:151:151	1308837	1					
ANR	1308899	IfStatement	"if ( egg -> lang . slurp == '""' )"		1308837	0					
ANR	1308900	Condition	"egg -> lang . slurp == '""'"	353:6:8064:8085	1308837	0	True				
ANR	1308901	EqualityExpression	"egg -> lang . slurp == '""'"		1308837	0		==			
ANR	1308902	MemberAccess	egg -> lang . slurp		1308837	0					
ANR	1308903	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308904	Identifier	egg		1308837	0					
ANR	1308905	Identifier	lang		1308837	1					
ANR	1308906	Identifier	slurp		1308837	1					
ANR	1308907	PrimaryExpression	"'""'"		1308837	1					
ANR	1308908	CompoundStatement		12:30:183:183	1308837	1					
ANR	1308909	IfStatement	if ( egg -> lang . mode == NORMAL )		1308837	0					
ANR	1308910	Condition	egg -> lang . mode == NORMAL	354:7:8097:8120	1308837	0	True				
ANR	1308911	EqualityExpression	egg -> lang . mode == NORMAL		1308837	0		==			
ANR	1308912	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1308913	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308914	Identifier	egg		1308837	0					
ANR	1308915	Identifier	lang		1308837	1					
ANR	1308916	Identifier	mode		1308837	1					
ANR	1308917	Identifier	NORMAL		1308837	1					
ANR	1308918	CompoundStatement		13:33:218:218	1308837	1					
ANR	1308919	IfStatement	if ( ! egg -> lang . dstvar )		1308837	0					
ANR	1308920	Condition	! egg -> lang . dstvar	355:8:8133:8149	1308837	0	True				
ANR	1308921	UnaryOperationExpression	! egg -> lang . dstvar		1308837	0					
ANR	1308922	UnaryOperator	!		1308837	0					
ANR	1308923	MemberAccess	egg -> lang . dstvar		1308837	1					
ANR	1308924	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308925	Identifier	egg		1308837	0					
ANR	1308926	Identifier	lang		1308837	1					
ANR	1308927	Identifier	dstvar		1308837	1					
ANR	1308928	CompoundStatement		14:27:247:247	1308837	1					
ANR	1308929	ExpressionStatement	"egg -> lang . dstvar = strdup ( "".fix0"" )"	356:5:8159:8194	1308837	0	True				
ANR	1308930	AssignmentExpression	"egg -> lang . dstvar = strdup ( "".fix0"" )"		1308837	0		=			
ANR	1308931	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1308932	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308933	Identifier	egg		1308837	0					
ANR	1308934	Identifier	lang		1308837	1					
ANR	1308935	Identifier	dstvar		1308837	1					
ANR	1308936	CallExpression	"strdup ( "".fix0"" )"		1308837	1					
ANR	1308937	Callee	strdup		1308837	0					
ANR	1308938	Identifier	strdup		1308837	0					
ANR	1308939	ArgumentList	""".fix0"""		1308837	1					
ANR	1308940	Argument	""".fix0"""		1308837	0					
ANR	1308941	PrimaryExpression	""".fix0"""		1308837	0					
ANR	1308942	ExpressionStatement	"rcc_pushstr ( egg , str , 1 )"	358:4:8206:8231	1308837	1	True				
ANR	1308943	CallExpression	"rcc_pushstr ( egg , str , 1 )"		1308837	0					
ANR	1308944	Callee	rcc_pushstr		1308837	0					
ANR	1308945	Identifier	rcc_pushstr		1308837	0					
ANR	1308946	ArgumentList	egg		1308837	1					
ANR	1308947	Argument	egg		1308837	0					
ANR	1308948	Identifier	egg		1308837	0					
ANR	1308949	Argument	str		1308837	1					
ANR	1308950	Identifier	str		1308837	0					
ANR	1308951	Argument	1		1308837	2					
ANR	1308952	PrimaryExpression	1		1308837	0					
ANR	1308953	ElseStatement	else		1308837	0					
ANR	1308954	CompoundStatement		19:9:342:342	1308837	0					
ANR	1308955	IfStatement	if ( egg -> lang . callname )		1308837	0					
ANR	1308956	Condition	egg -> lang . callname	361:7:8256:8273	1308837	0	True				
ANR	1308957	MemberAccess	egg -> lang . callname		1308837	0					
ANR	1308958	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308959	Identifier	egg		1308837	0					
ANR	1308960	Identifier	lang		1308837	1					
ANR	1308961	Identifier	callname		1308837	1					
ANR	1308962	CompoundStatement		20:27:371:371	1308837	1					
ANR	1308963	IfStatement	"if ( strstr ( egg -> lang . callname , ""while"" ) || strstr ( egg -> lang . callname , ""if"" ) )"		1308837	0					
ANR	1308964	Condition	"strstr ( egg -> lang . callname , ""while"" ) || strstr ( egg -> lang . callname , ""if"" )"	362:8:8286:8358	1308837	0	True				
ANR	1308965	OrExpression	"strstr ( egg -> lang . callname , ""while"" ) || strstr ( egg -> lang . callname , ""if"" )"		1308837	0		||			
ANR	1308966	CallExpression	"strstr ( egg -> lang . callname , ""while"" )"		1308837	0					
ANR	1308967	Callee	strstr		1308837	0					
ANR	1308968	Identifier	strstr		1308837	0					
ANR	1308969	ArgumentList	egg -> lang . callname		1308837	1					
ANR	1308970	Argument	egg -> lang . callname		1308837	0					
ANR	1308971	MemberAccess	egg -> lang . callname		1308837	0					
ANR	1308972	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308973	Identifier	egg		1308837	0					
ANR	1308974	Identifier	lang		1308837	1					
ANR	1308975	Identifier	callname		1308837	1					
ANR	1308976	Argument	"""while"""		1308837	1					
ANR	1308977	PrimaryExpression	"""while"""		1308837	0					
ANR	1308978	CallExpression	"strstr ( egg -> lang . callname , ""if"" )"		1308837	1					
ANR	1308979	Callee	strstr		1308837	0					
ANR	1308980	Identifier	strstr		1308837	0					
ANR	1308981	ArgumentList	egg -> lang . callname		1308837	1					
ANR	1308982	Argument	egg -> lang . callname		1308837	0					
ANR	1308983	MemberAccess	egg -> lang . callname		1308837	0					
ANR	1308984	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308985	Identifier	egg		1308837	0					
ANR	1308986	Identifier	lang		1308837	1					
ANR	1308987	Identifier	callname		1308837	1					
ANR	1308988	Argument	"""if"""		1308837	1					
ANR	1308989	PrimaryExpression	"""if"""		1308837	0					
ANR	1308990	CompoundStatement		21:83:456:456	1308837	1					
ANR	1308991	ExpressionStatement	egg -> lang . conditionstr = strdup ( str )	363:5:8368:8405	1308837	0	True				
ANR	1308992	AssignmentExpression	egg -> lang . conditionstr = strdup ( str )		1308837	0		=			
ANR	1308993	MemberAccess	egg -> lang . conditionstr		1308837	0					
ANR	1308994	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1308995	Identifier	egg		1308837	0					
ANR	1308996	Identifier	lang		1308837	1					
ANR	1308997	Identifier	conditionstr		1308837	1					
ANR	1308998	CallExpression	strdup ( str )		1308837	1					
ANR	1308999	Callee	strdup		1308837	0					
ANR	1309000	Identifier	strdup		1308837	0					
ANR	1309001	ArgumentList	str		1308837	1					
ANR	1309002	Argument	str		1308837	0					
ANR	1309003	Identifier	str		1308837	0					
ANR	1309004	ExpressionStatement	egg -> lang . nargs = 0	366:3:8421:8440	1308837	1	True				
ANR	1309005	AssignmentExpression	egg -> lang . nargs = 0		1308837	0		=			
ANR	1309006	MemberAccess	egg -> lang . nargs		1308837	0					
ANR	1309007	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309008	Identifier	egg		1308837	0					
ANR	1309009	Identifier	lang		1308837	1					
ANR	1309010	Identifier	nargs		1308837	1					
ANR	1309011	PrimaryExpression	0		1308837	1					
ANR	1309012	IfStatement	if ( egg -> lang . mode == GOTO )		1308837	2					
ANR	1309013	Condition	egg -> lang . mode == GOTO	367:7:8449:8470	1308837	0	True				
ANR	1309014	EqualityExpression	egg -> lang . mode == GOTO		1308837	0		==			
ANR	1309015	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1309016	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309017	Identifier	egg		1308837	0					
ANR	1309018	Identifier	lang		1308837	1					
ANR	1309019	Identifier	mode		1308837	1					
ANR	1309020	Identifier	GOTO		1308837	1					
ANR	1309021	CompoundStatement		26:31:568:568	1308837	1					
ANR	1309022	ExpressionStatement	egg -> lang . mode = NORMAL	368:4:8479:8502	1308837	0	True				
ANR	1309023	AssignmentExpression	egg -> lang . mode = NORMAL		1308837	0		=			
ANR	1309024	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1309025	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309026	Identifier	egg		1308837	0					
ANR	1309027	Identifier	lang		1308837	1					
ANR	1309028	Identifier	mode		1308837	1					
ANR	1309029	Identifier	NORMAL		1308837	1					
ANR	1309030	WhileStatement	while ( p -- != str )		1308837	3					
ANR	1309031	Condition	p -- != str	370:10:8526:8535	1308837	0	True				
ANR	1309032	EqualityExpression	p -- != str		1308837	0		!=			
ANR	1309033	PostIncDecOperationExpression	p --		1308837	0					
ANR	1309034	Identifier	p		1308837	0					
ANR	1309035	IncDec	--		1308837	1					
ANR	1309036	Identifier	str		1308837	1					
ANR	1309037	CompoundStatement		29:22:633:633	1308837	1					
ANR	1309038	IfStatement	"if ( * p == '""' )"		1308837	0					
ANR	1309039	Condition	"* p == '""'"	371:8:8548:8556	1308837	0	True				
ANR	1309040	EqualityExpression	"* p == '""'"		1308837	0		==			
ANR	1309041	UnaryOperationExpression	* p		1308837	0					
ANR	1309042	UnaryOperator	*		1308837	0					
ANR	1309043	Identifier	p		1308837	1					
ANR	1309044	PrimaryExpression	"'""'"		1308837	1					
ANR	1309045	CompoundStatement		30:19:654:654	1308837	1					
ANR	1309046	ExpressionStatement	inside ^= 1	372:5:8566:8577	1308837	0	True				
ANR	1309047	AssignmentExpression	inside ^= 1		1308837	0		^=			
ANR	1309048	Identifier	inside		1308837	0					
ANR	1309049	PrimaryExpression	1		1308837	1					
ANR	1309050	ElseStatement	else		1308837	0					
ANR	1309051	IfStatement	"if ( * p == ',' && ! inside )"		1308837	0					
ANR	1309052	Condition	"* p == ',' && ! inside"	373:15:8594:8613	1308837	0	True				
ANR	1309053	AndExpression	"* p == ',' && ! inside"		1308837	0		&&			
ANR	1309054	EqualityExpression	"* p == ','"		1308837	0		==			
ANR	1309055	UnaryOperationExpression	* p		1308837	0					
ANR	1309056	UnaryOperator	*		1308837	0					
ANR	1309057	Identifier	p		1308837	1					
ANR	1309058	PrimaryExpression	"','"		1308837	1					
ANR	1309059	UnaryOperationExpression	! inside		1308837	1					
ANR	1309060	UnaryOperator	!		1308837	0					
ANR	1309061	Identifier	inside		1308837	1					
ANR	1309062	CompoundStatement		32:37:711:711	1308837	1					
ANR	1309063	ExpressionStatement	* p = '\\0'	374:5:8623:8632	1308837	0	True				
ANR	1309064	AssignmentExpression	* p = '\\0'		1308837	0		=			
ANR	1309065	UnaryOperationExpression	* p		1308837	0					
ANR	1309066	UnaryOperator	*		1308837	0					
ANR	1309067	Identifier	p		1308837	1					
ANR	1309068	PrimaryExpression	'\\0'		1308837	1					
ANR	1309069	ExpressionStatement	p = ( char * ) skipspaces ( p + 1 )	375:5:8639:8670	1308837	1	True				
ANR	1309070	AssignmentExpression	p = ( char * ) skipspaces ( p + 1 )		1308837	0		=			
ANR	1309071	Identifier	p		1308837	0					
ANR	1309072	CastExpression	( char * ) skipspaces ( p + 1 )		1308837	1					
ANR	1309073	CastTarget	char *		1308837	0					
ANR	1309074	CallExpression	skipspaces ( p + 1 )		1308837	1					
ANR	1309075	Callee	skipspaces		1308837	0					
ANR	1309076	Identifier	skipspaces		1308837	0					
ANR	1309077	ArgumentList	p + 1		1308837	1					
ANR	1309078	Argument	p + 1		1308837	0					
ANR	1309079	AdditiveExpression	p + 1		1308837	0		+			
ANR	1309080	Identifier	p		1308837	0					
ANR	1309081	PrimaryExpression	1		1308837	1					
ANR	1309082	ExpressionStatement	"rcc_pusharg ( egg , p )"	376:5:8677:8697	1308837	2	True				
ANR	1309083	CallExpression	"rcc_pusharg ( egg , p )"		1308837	0					
ANR	1309084	Callee	rcc_pusharg		1308837	0					
ANR	1309085	Identifier	rcc_pusharg		1308837	0					
ANR	1309086	ArgumentList	egg		1308837	1					
ANR	1309087	Argument	egg		1308837	0					
ANR	1309088	Identifier	egg		1308837	0					
ANR	1309089	Argument	p		1308837	1					
ANR	1309090	Identifier	p		1308837	0					
ANR	1309091	ExpressionStatement	"rcc_pusharg ( egg , str )"	379:3:8713:8735	1308837	4	True				
ANR	1309092	CallExpression	"rcc_pusharg ( egg , str )"		1308837	0					
ANR	1309093	Callee	rcc_pusharg		1308837	0					
ANR	1309094	Identifier	rcc_pusharg		1308837	0					
ANR	1309095	ArgumentList	egg		1308837	1					
ANR	1309096	Argument	egg		1308837	0					
ANR	1309097	Identifier	egg		1308837	0					
ANR	1309098	Argument	str		1308837	1					
ANR	1309099	Identifier	str		1308837	0					
ANR	1309100	ElseStatement	else		1308837	0					
ANR	1309101	CompoundStatement		40:8:844:844	1308837	0					
ANR	1309102	SwitchStatement	switch ( egg -> lang . mode )		1308837	0					
ANR	1309103	Condition	egg -> lang . mode	382:10:8761:8774	1308837	0	True				
ANR	1309104	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1309105	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309106	Identifier	egg		1308837	0					
ANR	1309107	Identifier	lang		1308837	1					
ANR	1309108	Identifier	mode		1308837	1					
ANR	1309109	CompoundStatement		41:26:872:872	1308837	1					
ANR	1309110	Label	case ALIAS :	383:2:8781:8791	1308837	0	True				
ANR	1309111	Identifier	ALIAS		1308837	0					
ANR	1309112	IfStatement	if ( ! egg -> lang . dstvar )		1308837	1					
ANR	1309113	Condition	! egg -> lang . dstvar	384:7:8800:8816	1308837	0	True				
ANR	1309114	UnaryOperationExpression	! egg -> lang . dstvar		1308837	0					
ANR	1309115	UnaryOperator	!		1308837	0					
ANR	1309116	MemberAccess	egg -> lang . dstvar		1308837	1					
ANR	1309117	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309118	Identifier	egg		1308837	0					
ANR	1309119	Identifier	lang		1308837	1					
ANR	1309120	Identifier	dstvar		1308837	1					
ANR	1309121	CompoundStatement		43:26:914:914	1308837	1					
ANR	1309122	ExpressionStatement	"eprintf ( ""does not set name or content for alias\\n"" )"	385:4:8825:8877	1308837	0	True				
ANR	1309123	CallExpression	"eprintf ( ""does not set name or content for alias\\n"" )"		1308837	0					
ANR	1309124	Callee	eprintf		1308837	0					
ANR	1309125	Identifier	eprintf		1308837	0					
ANR	1309126	ArgumentList	"""does not set name or content for alias\\n"""		1308837	1					
ANR	1309127	Argument	"""does not set name or content for alias\\n"""		1308837	0					
ANR	1309128	PrimaryExpression	"""does not set name or content for alias\\n"""		1308837	0					
ANR	1309129	BreakStatement	break ;	386:4:8883:8888	1308837	1	True				
ANR	1309130	ExpressionStatement	"e -> equ ( egg , egg -> lang . dstvar , str )"	388:3:8898:8933	1308837	2	True				
ANR	1309131	CallExpression	"e -> equ ( egg , egg -> lang . dstvar , str )"		1308837	0					
ANR	1309132	Callee	e -> equ		1308837	0					
ANR	1309133	PtrMemberAccess	e -> equ		1308837	0					
ANR	1309134	Identifier	e		1308837	0					
ANR	1309135	Identifier	equ		1308837	1					
ANR	1309136	ArgumentList	egg		1308837	1					
ANR	1309137	Argument	egg		1308837	0					
ANR	1309138	Identifier	egg		1308837	0					
ANR	1309139	Argument	egg -> lang . dstvar		1308837	1					
ANR	1309140	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309141	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309142	Identifier	egg		1308837	0					
ANR	1309143	Identifier	lang		1308837	1					
ANR	1309144	Identifier	dstvar		1308837	1					
ANR	1309145	Argument	str		1308837	2					
ANR	1309146	Identifier	str		1308837	0					
ANR	1309147	IfStatement	if ( egg -> lang . nalias > 255 )		1308837	3					
ANR	1309148	Condition	egg -> lang . nalias > 255	389:7:8942:8963	1308837	0	True				
ANR	1309149	RelationalExpression	egg -> lang . nalias > 255		1308837	0		>			
ANR	1309150	MemberAccess	egg -> lang . nalias		1308837	0					
ANR	1309151	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309152	Identifier	egg		1308837	0					
ANR	1309153	Identifier	lang		1308837	1					
ANR	1309154	Identifier	nalias		1308837	1					
ANR	1309155	PrimaryExpression	255		1308837	1					
ANR	1309156	CompoundStatement		48:31:1061:1061	1308837	1					
ANR	1309157	ExpressionStatement	"eprintf ( ""global-buffer-overflow in aliases\\n"" )"	390:4:8972:9019	1308837	0	True				
ANR	1309158	CallExpression	"eprintf ( ""global-buffer-overflow in aliases\\n"" )"		1308837	0					
ANR	1309159	Callee	eprintf		1308837	0					
ANR	1309160	Identifier	eprintf		1308837	0					
ANR	1309161	ArgumentList	"""global-buffer-overflow in aliases\\n"""		1308837	1					
ANR	1309162	Argument	"""global-buffer-overflow in aliases\\n"""		1308837	0					
ANR	1309163	PrimaryExpression	"""global-buffer-overflow in aliases\\n"""		1308837	0					
ANR	1309164	BreakStatement	break ;	391:4:9025:9030	1308837	1	True				
ANR	1309165	ForStatement	for ( i = 0 ; i < egg -> lang . nalias ; i ++ )		1308837	4					
ANR	1309166	ForInit	i = 0 ;	393:8:9045:9050	1308837	0	True				
ANR	1309167	AssignmentExpression	i = 0		1308837	0		=			
ANR	1309168	Identifier	i		1308837	0					
ANR	1309169	PrimaryExpression	0		1308837	1					
ANR	1309170	Condition	i < egg -> lang . nalias	393:15:9052:9071	1308837	1	True				
ANR	1309171	RelationalExpression	i < egg -> lang . nalias		1308837	0		<			
ANR	1309172	Identifier	i		1308837	0					
ANR	1309173	MemberAccess	egg -> lang . nalias		1308837	1					
ANR	1309174	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309175	Identifier	egg		1308837	0					
ANR	1309176	Identifier	lang		1308837	1					
ANR	1309177	Identifier	nalias		1308837	1					
ANR	1309178	PostIncDecOperationExpression	i ++	393:37:9074:9076	1308837	2	True				
ANR	1309179	Identifier	i		1308837	0					
ANR	1309180	IncDec	++		1308837	1					
ANR	1309181	CompoundStatement		52:42:1174:1174	1308837	3					
ANR	1309182	IfStatement	"if ( ! strcmp ( egg -> lang . dstvar , egg -> lang . aliases [ i ] . name ) )"		1308837	0					
ANR	1309183	Condition	"! strcmp ( egg -> lang . dstvar , egg -> lang . aliases [ i ] . name )"	394:8:9089:9141	1308837	0	True				
ANR	1309184	UnaryOperationExpression	"! strcmp ( egg -> lang . dstvar , egg -> lang . aliases [ i ] . name )"		1308837	0					
ANR	1309185	UnaryOperator	!		1308837	0					
ANR	1309186	CallExpression	"strcmp ( egg -> lang . dstvar , egg -> lang . aliases [ i ] . name )"		1308837	1					
ANR	1309187	Callee	strcmp		1308837	0					
ANR	1309188	Identifier	strcmp		1308837	0					
ANR	1309189	ArgumentList	egg -> lang . dstvar		1308837	1					
ANR	1309190	Argument	egg -> lang . dstvar		1308837	0					
ANR	1309191	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309192	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309193	Identifier	egg		1308837	0					
ANR	1309194	Identifier	lang		1308837	1					
ANR	1309195	Identifier	dstvar		1308837	1					
ANR	1309196	Argument	egg -> lang . aliases [ i ] . name		1308837	1					
ANR	1309197	MemberAccess	egg -> lang . aliases [ i ] . name		1308837	0					
ANR	1309198	ArrayIndexing	egg -> lang . aliases [ i ]		1308837	0					
ANR	1309199	MemberAccess	egg -> lang . aliases		1308837	0					
ANR	1309200	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309201	Identifier	egg		1308837	0					
ANR	1309202	Identifier	lang		1308837	1					
ANR	1309203	Identifier	aliases		1308837	1					
ANR	1309204	Identifier	i		1308837	1					
ANR	1309205	Identifier	name		1308837	1					
ANR	1309206	CompoundStatement		53:63:1239:1239	1308837	1					
ANR	1309207	ExpressionStatement	R_FREE ( egg -> lang . aliases [ i ] . name )	395:5:9151:9185	1308837	0	True				
ANR	1309208	CallExpression	R_FREE ( egg -> lang . aliases [ i ] . name )		1308837	0					
ANR	1309209	Callee	R_FREE		1308837	0					
ANR	1309210	Identifier	R_FREE		1308837	0					
ANR	1309211	ArgumentList	egg -> lang . aliases [ i ] . name		1308837	1					
ANR	1309212	Argument	egg -> lang . aliases [ i ] . name		1308837	0					
ANR	1309213	MemberAccess	egg -> lang . aliases [ i ] . name		1308837	0					
ANR	1309214	ArrayIndexing	egg -> lang . aliases [ i ]		1308837	0					
ANR	1309215	MemberAccess	egg -> lang . aliases		1308837	0					
ANR	1309216	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309217	Identifier	egg		1308837	0					
ANR	1309218	Identifier	lang		1308837	1					
ANR	1309219	Identifier	aliases		1308837	1					
ANR	1309220	Identifier	i		1308837	1					
ANR	1309221	Identifier	name		1308837	1					
ANR	1309222	ExpressionStatement	R_FREE ( egg -> lang . aliases [ i ] . content )	396:5:9192:9229	1308837	1	True				
ANR	1309223	CallExpression	R_FREE ( egg -> lang . aliases [ i ] . content )		1308837	0					
ANR	1309224	Callee	R_FREE		1308837	0					
ANR	1309225	Identifier	R_FREE		1308837	0					
ANR	1309226	ArgumentList	egg -> lang . aliases [ i ] . content		1308837	1					
ANR	1309227	Argument	egg -> lang . aliases [ i ] . content		1308837	0					
ANR	1309228	MemberAccess	egg -> lang . aliases [ i ] . content		1308837	0					
ANR	1309229	ArrayIndexing	egg -> lang . aliases [ i ]		1308837	0					
ANR	1309230	MemberAccess	egg -> lang . aliases		1308837	0					
ANR	1309231	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309232	Identifier	egg		1308837	0					
ANR	1309233	Identifier	lang		1308837	1					
ANR	1309234	Identifier	aliases		1308837	1					
ANR	1309235	Identifier	i		1308837	1					
ANR	1309236	Identifier	content		1308837	1					
ANR	1309237	BreakStatement	break ;	397:5:9236:9241	1308837	2	True				
ANR	1309238	ExpressionStatement	egg -> lang . aliases [ i ] . name = strdup ( egg -> lang . dstvar )	400:3:9257:9310	1308837	5	True				
ANR	1309239	AssignmentExpression	egg -> lang . aliases [ i ] . name = strdup ( egg -> lang . dstvar )		1308837	0		=			
ANR	1309240	MemberAccess	egg -> lang . aliases [ i ] . name		1308837	0					
ANR	1309241	ArrayIndexing	egg -> lang . aliases [ i ]		1308837	0					
ANR	1309242	MemberAccess	egg -> lang . aliases		1308837	0					
ANR	1309243	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309244	Identifier	egg		1308837	0					
ANR	1309245	Identifier	lang		1308837	1					
ANR	1309246	Identifier	aliases		1308837	1					
ANR	1309247	Identifier	i		1308837	1					
ANR	1309248	Identifier	name		1308837	1					
ANR	1309249	CallExpression	strdup ( egg -> lang . dstvar )		1308837	1					
ANR	1309250	Callee	strdup		1308837	0					
ANR	1309251	Identifier	strdup		1308837	0					
ANR	1309252	ArgumentList	egg -> lang . dstvar		1308837	1					
ANR	1309253	Argument	egg -> lang . dstvar		1308837	0					
ANR	1309254	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309255	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309256	Identifier	egg		1308837	0					
ANR	1309257	Identifier	lang		1308837	1					
ANR	1309258	Identifier	dstvar		1308837	1					
ANR	1309259	ExpressionStatement	egg -> lang . aliases [ i ] . content = strdup ( str )	401:3:9315:9358	1308837	6	True				
ANR	1309260	AssignmentExpression	egg -> lang . aliases [ i ] . content = strdup ( str )		1308837	0		=			
ANR	1309261	MemberAccess	egg -> lang . aliases [ i ] . content		1308837	0					
ANR	1309262	ArrayIndexing	egg -> lang . aliases [ i ]		1308837	0					
ANR	1309263	MemberAccess	egg -> lang . aliases		1308837	0					
ANR	1309264	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309265	Identifier	egg		1308837	0					
ANR	1309266	Identifier	lang		1308837	1					
ANR	1309267	Identifier	aliases		1308837	1					
ANR	1309268	Identifier	i		1308837	1					
ANR	1309269	Identifier	content		1308837	1					
ANR	1309270	CallExpression	strdup ( str )		1308837	1					
ANR	1309271	Callee	strdup		1308837	0					
ANR	1309272	Identifier	strdup		1308837	0					
ANR	1309273	ArgumentList	str		1308837	1					
ANR	1309274	Argument	str		1308837	0					
ANR	1309275	Identifier	str		1308837	0					
ANR	1309276	ExpressionStatement	egg -> lang . nalias = ( i == egg -> lang . nalias ) ? ( egg -> lang . nalias + 1 ) : egg -> lang . nalias	402:3:9363:9447	1308837	7	True				
ANR	1309277	AssignmentExpression	egg -> lang . nalias = ( i == egg -> lang . nalias ) ? ( egg -> lang . nalias + 1 ) : egg -> lang . nalias		1308837	0		=			
ANR	1309278	MemberAccess	egg -> lang . nalias		1308837	0					
ANR	1309279	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309280	Identifier	egg		1308837	0					
ANR	1309281	Identifier	lang		1308837	1					
ANR	1309282	Identifier	nalias		1308837	1					
ANR	1309283	ConditionalExpression	( i == egg -> lang . nalias ) ? ( egg -> lang . nalias + 1 ) : egg -> lang . nalias		1308837	1					
ANR	1309284	Condition	i == egg -> lang . nalias		1308837	0					
ANR	1309285	EqualityExpression	i == egg -> lang . nalias		1308837	0		==			
ANR	1309286	Identifier	i		1308837	0					
ANR	1309287	MemberAccess	egg -> lang . nalias		1308837	1					
ANR	1309288	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309289	Identifier	egg		1308837	0					
ANR	1309290	Identifier	lang		1308837	1					
ANR	1309291	Identifier	nalias		1308837	1					
ANR	1309292	AdditiveExpression	egg -> lang . nalias + 1		1308837	1		+			
ANR	1309293	MemberAccess	egg -> lang . nalias		1308837	0					
ANR	1309294	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309295	Identifier	egg		1308837	0					
ANR	1309296	Identifier	lang		1308837	1					
ANR	1309297	Identifier	nalias		1308837	1					
ANR	1309298	PrimaryExpression	1		1308837	1					
ANR	1309299	MemberAccess	egg -> lang . nalias		1308837	2					
ANR	1309300	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309301	Identifier	egg		1308837	0					
ANR	1309302	Identifier	lang		1308837	1					
ANR	1309303	Identifier	nalias		1308837	1					
ANR	1309304	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	404:3:9480:9505	1308837	8	True				
ANR	1309305	CallExpression	R_FREE ( egg -> lang . dstvar )		1308837	0					
ANR	1309306	Callee	R_FREE		1308837	0					
ANR	1309307	Identifier	R_FREE		1308837	0					
ANR	1309308	ArgumentList	egg -> lang . dstvar		1308837	1					
ANR	1309309	Argument	egg -> lang . dstvar		1308837	0					
ANR	1309310	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309311	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309312	Identifier	egg		1308837	0					
ANR	1309313	Identifier	lang		1308837	1					
ANR	1309314	Identifier	dstvar		1308837	1					
ANR	1309315	ExpressionStatement	egg -> lang . mode = NORMAL	405:3:9510:9533	1308837	9	True				
ANR	1309316	AssignmentExpression	egg -> lang . mode = NORMAL		1308837	0		=			
ANR	1309317	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1309318	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309319	Identifier	egg		1308837	0					
ANR	1309320	Identifier	lang		1308837	1					
ANR	1309321	Identifier	mode		1308837	1					
ANR	1309322	Identifier	NORMAL		1308837	1					
ANR	1309323	BreakStatement	break ;	406:3:9538:9543	1308837	10	True				
ANR	1309324	Label	case SYSCALL :	407:2:9547:9559	1308837	11	True				
ANR	1309325	Identifier	SYSCALL		1308837	0					
ANR	1309326	IfStatement	if ( ! egg -> lang . dstvar )		1308837	12					
ANR	1309327	Condition	! egg -> lang . dstvar	408:7:9568:9584	1308837	0	True				
ANR	1309328	UnaryOperationExpression	! egg -> lang . dstvar		1308837	0					
ANR	1309329	UnaryOperator	!		1308837	0					
ANR	1309330	MemberAccess	egg -> lang . dstvar		1308837	1					
ANR	1309331	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309332	Identifier	egg		1308837	0					
ANR	1309333	Identifier	lang		1308837	1					
ANR	1309334	Identifier	dstvar		1308837	1					
ANR	1309335	CompoundStatement		67:26:1682:1682	1308837	1					
ANR	1309336	ExpressionStatement	"eprintf ( ""does not set name or arg for syscall\\n"" )"	409:4:9593:9643	1308837	0	True				
ANR	1309337	CallExpression	"eprintf ( ""does not set name or arg for syscall\\n"" )"		1308837	0					
ANR	1309338	Callee	eprintf		1308837	0					
ANR	1309339	Identifier	eprintf		1308837	0					
ANR	1309340	ArgumentList	"""does not set name or arg for syscall\\n"""		1308837	1					
ANR	1309341	Argument	"""does not set name or arg for syscall\\n"""		1308837	0					
ANR	1309342	PrimaryExpression	"""does not set name or arg for syscall\\n"""		1308837	0					
ANR	1309343	BreakStatement	break ;	410:4:9649:9654	1308837	1	True				
ANR	1309344	IfStatement	if ( egg -> lang . nsyscalls > 255 )		1308837	13					
ANR	1309345	Condition	egg -> lang . nsyscalls > 255	412:7:9668:9692	1308837	0	True				
ANR	1309346	RelationalExpression	egg -> lang . nsyscalls > 255		1308837	0		>			
ANR	1309347	MemberAccess	egg -> lang . nsyscalls		1308837	0					
ANR	1309348	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309349	Identifier	egg		1308837	0					
ANR	1309350	Identifier	lang		1308837	1					
ANR	1309351	Identifier	nsyscalls		1308837	1					
ANR	1309352	PrimaryExpression	255		1308837	1					
ANR	1309353	CompoundStatement		71:34:1790:1790	1308837	1					
ANR	1309354	ExpressionStatement	"eprintf ( ""global-buffer-overflow in syscalls\\n"" )"	413:4:9701:9749	1308837	0	True				
ANR	1309355	CallExpression	"eprintf ( ""global-buffer-overflow in syscalls\\n"" )"		1308837	0					
ANR	1309356	Callee	eprintf		1308837	0					
ANR	1309357	Identifier	eprintf		1308837	0					
ANR	1309358	ArgumentList	"""global-buffer-overflow in syscalls\\n"""		1308837	1					
ANR	1309359	Argument	"""global-buffer-overflow in syscalls\\n"""		1308837	0					
ANR	1309360	PrimaryExpression	"""global-buffer-overflow in syscalls\\n"""		1308837	0					
ANR	1309361	BreakStatement	break ;	414:4:9755:9760	1308837	1	True				
ANR	1309362	ExpressionStatement	R_FREE ( egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name )	417:3:9829:9882	1308837	14	True				
ANR	1309363	CallExpression	R_FREE ( egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name )		1308837	0					
ANR	1309364	Callee	R_FREE		1308837	0					
ANR	1309365	Identifier	R_FREE		1308837	0					
ANR	1309366	ArgumentList	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name		1308837	1					
ANR	1309367	Argument	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name		1308837	0					
ANR	1309368	MemberAccess	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name		1308837	0					
ANR	1309369	ArrayIndexing	egg -> lang . syscalls [ egg -> lang . nsyscalls ]		1308837	0					
ANR	1309370	MemberAccess	egg -> lang . syscalls		1308837	0					
ANR	1309371	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309372	Identifier	egg		1308837	0					
ANR	1309373	Identifier	lang		1308837	1					
ANR	1309374	Identifier	syscalls		1308837	1					
ANR	1309375	MemberAccess	egg -> lang . nsyscalls		1308837	1					
ANR	1309376	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309377	Identifier	egg		1308837	0					
ANR	1309378	Identifier	lang		1308837	1					
ANR	1309379	Identifier	nsyscalls		1308837	1					
ANR	1309380	Identifier	name		1308837	1					
ANR	1309381	ExpressionStatement	R_FREE ( egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg )	418:3:9887:9939	1308837	15	True				
ANR	1309382	CallExpression	R_FREE ( egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg )		1308837	0					
ANR	1309383	Callee	R_FREE		1308837	0					
ANR	1309384	Identifier	R_FREE		1308837	0					
ANR	1309385	ArgumentList	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg		1308837	1					
ANR	1309386	Argument	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg		1308837	0					
ANR	1309387	MemberAccess	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg		1308837	0					
ANR	1309388	ArrayIndexing	egg -> lang . syscalls [ egg -> lang . nsyscalls ]		1308837	0					
ANR	1309389	MemberAccess	egg -> lang . syscalls		1308837	0					
ANR	1309390	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309391	Identifier	egg		1308837	0					
ANR	1309392	Identifier	lang		1308837	1					
ANR	1309393	Identifier	syscalls		1308837	1					
ANR	1309394	MemberAccess	egg -> lang . nsyscalls		1308837	1					
ANR	1309395	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309396	Identifier	egg		1308837	0					
ANR	1309397	Identifier	lang		1308837	1					
ANR	1309398	Identifier	nsyscalls		1308837	1					
ANR	1309399	Identifier	arg		1308837	1					
ANR	1309400	ExpressionStatement	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name = strdup ( egg -> lang . dstvar )	419:3:9944:10016	1308837	16	True				
ANR	1309401	AssignmentExpression	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name = strdup ( egg -> lang . dstvar )		1308837	0		=			
ANR	1309402	MemberAccess	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name		1308837	0					
ANR	1309403	ArrayIndexing	egg -> lang . syscalls [ egg -> lang . nsyscalls ]		1308837	0					
ANR	1309404	MemberAccess	egg -> lang . syscalls		1308837	0					
ANR	1309405	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309406	Identifier	egg		1308837	0					
ANR	1309407	Identifier	lang		1308837	1					
ANR	1309408	Identifier	syscalls		1308837	1					
ANR	1309409	MemberAccess	egg -> lang . nsyscalls		1308837	1					
ANR	1309410	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309411	Identifier	egg		1308837	0					
ANR	1309412	Identifier	lang		1308837	1					
ANR	1309413	Identifier	nsyscalls		1308837	1					
ANR	1309414	Identifier	name		1308837	1					
ANR	1309415	CallExpression	strdup ( egg -> lang . dstvar )		1308837	1					
ANR	1309416	Callee	strdup		1308837	0					
ANR	1309417	Identifier	strdup		1308837	0					
ANR	1309418	ArgumentList	egg -> lang . dstvar		1308837	1					
ANR	1309419	Argument	egg -> lang . dstvar		1308837	0					
ANR	1309420	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309421	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309422	Identifier	egg		1308837	0					
ANR	1309423	Identifier	lang		1308837	1					
ANR	1309424	Identifier	dstvar		1308837	1					
ANR	1309425	ExpressionStatement	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg = strdup ( str )	420:3:10021:10079	1308837	17	True				
ANR	1309426	AssignmentExpression	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg = strdup ( str )		1308837	0		=			
ANR	1309427	MemberAccess	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg		1308837	0					
ANR	1309428	ArrayIndexing	egg -> lang . syscalls [ egg -> lang . nsyscalls ]		1308837	0					
ANR	1309429	MemberAccess	egg -> lang . syscalls		1308837	0					
ANR	1309430	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309431	Identifier	egg		1308837	0					
ANR	1309432	Identifier	lang		1308837	1					
ANR	1309433	Identifier	syscalls		1308837	1					
ANR	1309434	MemberAccess	egg -> lang . nsyscalls		1308837	1					
ANR	1309435	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309436	Identifier	egg		1308837	0					
ANR	1309437	Identifier	lang		1308837	1					
ANR	1309438	Identifier	nsyscalls		1308837	1					
ANR	1309439	Identifier	arg		1308837	1					
ANR	1309440	CallExpression	strdup ( str )		1308837	1					
ANR	1309441	Callee	strdup		1308837	0					
ANR	1309442	Identifier	strdup		1308837	0					
ANR	1309443	ArgumentList	str		1308837	1					
ANR	1309444	Argument	str		1308837	0					
ANR	1309445	Identifier	str		1308837	0					
ANR	1309446	ExpressionStatement	egg -> lang . nsyscalls ++	421:3:10084:10105	1308837	18	True				
ANR	1309447	PostIncDecOperationExpression	egg -> lang . nsyscalls ++		1308837	0					
ANR	1309448	MemberAccess	egg -> lang . nsyscalls		1308837	0					
ANR	1309449	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309450	Identifier	egg		1308837	0					
ANR	1309451	Identifier	lang		1308837	1					
ANR	1309452	Identifier	nsyscalls		1308837	1					
ANR	1309453	IncDec	++		1308837	1					
ANR	1309454	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	422:3:10110:10135	1308837	19	True				
ANR	1309455	CallExpression	R_FREE ( egg -> lang . dstvar )		1308837	0					
ANR	1309456	Callee	R_FREE		1308837	0					
ANR	1309457	Identifier	R_FREE		1308837	0					
ANR	1309458	ArgumentList	egg -> lang . dstvar		1308837	1					
ANR	1309459	Argument	egg -> lang . dstvar		1308837	0					
ANR	1309460	MemberAccess	egg -> lang . dstvar		1308837	0					
ANR	1309461	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309462	Identifier	egg		1308837	0					
ANR	1309463	Identifier	lang		1308837	1					
ANR	1309464	Identifier	dstvar		1308837	1					
ANR	1309465	BreakStatement	break ;	423:3:10140:10145	1308837	20	True				
ANR	1309466	Label	case GOTO :	424:2:10149:10158	1308837	21	True				
ANR	1309467	Identifier	GOTO		1308837	0					
ANR	1309468	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = 0	425:3:10163:10199	1308837	22	True				
ANR	1309469	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = 0		1308837	0		=			
ANR	1309470	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1308837	0					
ANR	1309471	MemberAccess	egg -> lang . elem		1308837	0					
ANR	1309472	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309473	Identifier	egg		1308837	0					
ANR	1309474	Identifier	lang		1308837	1					
ANR	1309475	Identifier	elem		1308837	1					
ANR	1309476	MemberAccess	egg -> lang . elem_n		1308837	1					
ANR	1309477	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309478	Identifier	egg		1308837	0					
ANR	1309479	Identifier	lang		1308837	1					
ANR	1309480	Identifier	elem_n		1308837	1					
ANR	1309481	PrimaryExpression	0		1308837	1					
ANR	1309482	ExpressionStatement	"e -> jmp ( egg , egg -> lang . elem , 0 )"	426:3:10204:10235	1308837	23	True				
ANR	1309483	CallExpression	"e -> jmp ( egg , egg -> lang . elem , 0 )"		1308837	0					
ANR	1309484	Callee	e -> jmp		1308837	0					
ANR	1309485	PtrMemberAccess	e -> jmp		1308837	0					
ANR	1309486	Identifier	e		1308837	0					
ANR	1309487	Identifier	jmp		1308837	1					
ANR	1309488	ArgumentList	egg		1308837	1					
ANR	1309489	Argument	egg		1308837	0					
ANR	1309490	Identifier	egg		1308837	0					
ANR	1309491	Argument	egg -> lang . elem		1308837	1					
ANR	1309492	MemberAccess	egg -> lang . elem		1308837	0					
ANR	1309493	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309494	Identifier	egg		1308837	0					
ANR	1309495	Identifier	lang		1308837	1					
ANR	1309496	Identifier	elem		1308837	1					
ANR	1309497	Argument	0		1308837	2					
ANR	1309498	PrimaryExpression	0		1308837	0					
ANR	1309499	BreakStatement	break ;	427:3:10240:10245	1308837	24	True				
ANR	1309500	Label	case INCLUDE :	428:2:10249:10261	1308837	25	True				
ANR	1309501	Identifier	INCLUDE		1308837	0					
ANR	1309502	ExpressionStatement	"str = ptr = ( char * ) find_alias ( egg , skipspaces ( str ) )"	429:3:10266:10321	1308837	26	True				
ANR	1309503	AssignmentExpression	"str = ptr = ( char * ) find_alias ( egg , skipspaces ( str ) )"		1308837	0		=			
ANR	1309504	Identifier	str		1308837	0					
ANR	1309505	AssignmentExpression	"ptr = ( char * ) find_alias ( egg , skipspaces ( str ) )"		1308837	1		=			
ANR	1309506	Identifier	ptr		1308837	0					
ANR	1309507	CastExpression	"( char * ) find_alias ( egg , skipspaces ( str ) )"		1308837	1					
ANR	1309508	CastTarget	char *		1308837	0					
ANR	1309509	CallExpression	"find_alias ( egg , skipspaces ( str ) )"		1308837	1					
ANR	1309510	Callee	find_alias		1308837	0					
ANR	1309511	Identifier	find_alias		1308837	0					
ANR	1309512	ArgumentList	egg		1308837	1					
ANR	1309513	Argument	egg		1308837	0					
ANR	1309514	Identifier	egg		1308837	0					
ANR	1309515	Argument	skipspaces ( str )		1308837	1					
ANR	1309516	CallExpression	skipspaces ( str )		1308837	0					
ANR	1309517	Callee	skipspaces		1308837	0					
ANR	1309518	Identifier	skipspaces		1308837	0					
ANR	1309519	ArgumentList	str		1308837	1					
ANR	1309520	Argument	str		1308837	0					
ANR	1309521	Identifier	str		1308837	0					
ANR	1309522	IfStatement	if ( ptr )		1308837	27					
ANR	1309523	Condition	ptr	430:7:10330:10332	1308837	0	True				
ANR	1309524	Identifier	ptr		1308837	0					
ANR	1309525	CompoundStatement		89:12:2430:2430	1308837	1					
ANR	1309526	IfStatement	"if ( strchr ( ptr , '""' ) )"		1308837	0					
ANR	1309527	Condition	"strchr ( ptr , '""' )"	431:8:10345:10361	1308837	0	True				
ANR	1309528	CallExpression	"strchr ( ptr , '""' )"		1308837	0					
ANR	1309529	Callee	strchr		1308837	0					
ANR	1309530	Identifier	strchr		1308837	0					
ANR	1309531	ArgumentList	ptr		1308837	1					
ANR	1309532	Argument	ptr		1308837	0					
ANR	1309533	Identifier	ptr		1308837	0					
ANR	1309534	Argument	"'""'"		1308837	1					
ANR	1309535	PrimaryExpression	"'""'"		1308837	0					
ANR	1309536	CompoundStatement		90:27:2459:2459	1308837	1					
ANR	1309537	ExpressionStatement	"ptr = strchr ( ptr , '""' ) + 1"	432:5:10371:10398	1308837	0	True				
ANR	1309538	AssignmentExpression	"ptr = strchr ( ptr , '""' ) + 1"		1308837	0		=			
ANR	1309539	Identifier	ptr		1308837	0					
ANR	1309540	AdditiveExpression	"strchr ( ptr , '""' ) + 1"		1308837	1		+			
ANR	1309541	CallExpression	"strchr ( ptr , '""' )"		1308837	0					
ANR	1309542	Callee	strchr		1308837	0					
ANR	1309543	Identifier	strchr		1308837	0					
ANR	1309544	ArgumentList	ptr		1308837	1					
ANR	1309545	Argument	ptr		1308837	0					
ANR	1309546	Identifier	ptr		1308837	0					
ANR	1309547	Argument	"'""'"		1308837	1					
ANR	1309548	PrimaryExpression	"'""'"		1308837	0					
ANR	1309549	PrimaryExpression	1		1308837	1					
ANR	1309550	IfStatement	"if ( ( p = strchr ( ptr , '""' ) ) )"		1308837	1					
ANR	1309551	Condition	"p = strchr ( ptr , '""' )"	433:9:10409:10431	1308837	0	True				
ANR	1309552	AssignmentExpression	"p = strchr ( ptr , '""' )"		1308837	0		=			
ANR	1309553	Identifier	p		1308837	0					
ANR	1309554	CallExpression	"strchr ( ptr , '""' )"		1308837	1					
ANR	1309555	Callee	strchr		1308837	0					
ANR	1309556	Identifier	strchr		1308837	0					
ANR	1309557	ArgumentList	ptr		1308837	1					
ANR	1309558	Argument	ptr		1308837	0					
ANR	1309559	Identifier	ptr		1308837	0					
ANR	1309560	Argument	"'""'"		1308837	1					
ANR	1309561	PrimaryExpression	"'""'"		1308837	0					
ANR	1309562	CompoundStatement		92:34:2529:2529	1308837	1					
ANR	1309563	ExpressionStatement	* p = x00	434:6:10442:10453	1308837	0	True				
ANR	1309564	AssignmentExpression	* p = x00		1308837	0		=			
ANR	1309565	UnaryOperationExpression	* p		1308837	0					
ANR	1309566	UnaryOperator	*		1308837	0					
ANR	1309567	Identifier	p		1308837	1					
ANR	1309568	Identifier	x00		1308837	1					
ANR	1309569	ElseStatement	else		1308837	0					
ANR	1309570	CompoundStatement		94:12:2562:2562	1308837	0					
ANR	1309571	ExpressionStatement	"eprintf ( ""loss back quote in include directory\\n"" )"	436:6:10475:10525	1308837	0	True				
ANR	1309572	CallExpression	"eprintf ( ""loss back quote in include directory\\n"" )"		1308837	0					
ANR	1309573	Callee	eprintf		1308837	0					
ANR	1309574	Identifier	eprintf		1308837	0					
ANR	1309575	ArgumentList	"""loss back quote in include directory\\n"""		1308837	1					
ANR	1309576	Argument	"""loss back quote in include directory\\n"""		1308837	0					
ANR	1309577	PrimaryExpression	"""loss back quote in include directory\\n"""		1308837	0					
ANR	1309578	ExpressionStatement	egg -> lang . includedir = strdup ( ptr )	438:5:10539:10574	1308837	2	True				
ANR	1309579	AssignmentExpression	egg -> lang . includedir = strdup ( ptr )		1308837	0		=			
ANR	1309580	MemberAccess	egg -> lang . includedir		1308837	0					
ANR	1309581	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309582	Identifier	egg		1308837	0					
ANR	1309583	Identifier	lang		1308837	1					
ANR	1309584	Identifier	includedir		1308837	1					
ANR	1309585	CallExpression	strdup ( ptr )		1308837	1					
ANR	1309586	Callee	strdup		1308837	0					
ANR	1309587	Identifier	strdup		1308837	0					
ANR	1309588	ArgumentList	ptr		1308837	1					
ANR	1309589	Argument	ptr		1308837	0					
ANR	1309590	Identifier	ptr		1308837	0					
ANR	1309591	ElseStatement	else		1308837	0					
ANR	1309592	CompoundStatement		98:11:2682:2682	1308837	0					
ANR	1309593	ExpressionStatement	"eprintf ( ""wrong include syntax\\n"" )"	440:5:10594:10628	1308837	0	True				
ANR	1309594	CallExpression	"eprintf ( ""wrong include syntax\\n"" )"		1308837	0					
ANR	1309595	Callee	eprintf		1308837	0					
ANR	1309596	Identifier	eprintf		1308837	0					
ANR	1309597	ArgumentList	"""wrong include syntax\\n"""		1308837	1					
ANR	1309598	Argument	"""wrong include syntax\\n"""		1308837	0					
ANR	1309599	PrimaryExpression	"""wrong include syntax\\n"""		1308837	0					
ANR	1309600	ExpressionStatement	egg -> lang . includedir = NULL	442:5:10686:10713	1308837	1	True				
ANR	1309601	AssignmentExpression	egg -> lang . includedir = NULL		1308837	0		=			
ANR	1309602	MemberAccess	egg -> lang . includedir		1308837	0					
ANR	1309603	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309604	Identifier	egg		1308837	0					
ANR	1309605	Identifier	lang		1308837	1					
ANR	1309606	Identifier	includedir		1308837	1					
ANR	1309607	Identifier	NULL		1308837	1					
ANR	1309608	ElseStatement	else		1308837	0					
ANR	1309609	CompoundStatement		103:10:2826:2826	1308837	0					
ANR	1309610	ExpressionStatement	egg -> lang . includedir = NULL	445:4:10737:10764	1308837	0	True				
ANR	1309611	AssignmentExpression	egg -> lang . includedir = NULL		1308837	0		=			
ANR	1309612	MemberAccess	egg -> lang . includedir		1308837	0					
ANR	1309613	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309614	Identifier	egg		1308837	0					
ANR	1309615	Identifier	lang		1308837	1					
ANR	1309616	Identifier	includedir		1308837	1					
ANR	1309617	Identifier	NULL		1308837	1					
ANR	1309618	ExpressionStatement	R_FREE ( str )	447:3:10774:10786	1308837	28	True				
ANR	1309619	CallExpression	R_FREE ( str )		1308837	0					
ANR	1309620	Callee	R_FREE		1308837	0					
ANR	1309621	Identifier	R_FREE		1308837	0					
ANR	1309622	ArgumentList	str		1308837	1					
ANR	1309623	Argument	str		1308837	0					
ANR	1309624	Identifier	str		1308837	0					
ANR	1309625	BreakStatement	break ;	448:3:10791:10796	1308837	29	True				
ANR	1309626	Label	default :	449:2:10800:10807	1308837	30	True				
ANR	1309627	Identifier	default		1308837	0					
ANR	1309628	ExpressionStatement	"p = strchr ( str , ',' )"	450:3:10812:10833	1308837	31	True				
ANR	1309629	AssignmentExpression	"p = strchr ( str , ',' )"		1308837	0		=			
ANR	1309630	Identifier	p		1308837	0					
ANR	1309631	CallExpression	"strchr ( str , ',' )"		1308837	1					
ANR	1309632	Callee	strchr		1308837	0					
ANR	1309633	Identifier	strchr		1308837	0					
ANR	1309634	ArgumentList	str		1308837	1					
ANR	1309635	Argument	str		1308837	0					
ANR	1309636	Identifier	str		1308837	0					
ANR	1309637	Argument	"','"		1308837	1					
ANR	1309638	PrimaryExpression	"','"		1308837	0					
ANR	1309639	IfStatement	if ( p )		1308837	32					
ANR	1309640	Condition	p	451:7:10842:10842	1308837	0	True				
ANR	1309641	Identifier	p		1308837	0					
ANR	1309642	CompoundStatement		110:10:2940:2940	1308837	1					
ANR	1309643	ExpressionStatement	* p = '\\0'	452:4:10851:10860	1308837	0	True				
ANR	1309644	AssignmentExpression	* p = '\\0'		1308837	0		=			
ANR	1309645	UnaryOperationExpression	* p		1308837	0					
ANR	1309646	UnaryOperator	*		1308837	0					
ANR	1309647	Identifier	p		1308837	1					
ANR	1309648	PrimaryExpression	'\\0'		1308837	1					
ANR	1309649	ExpressionStatement	num2 = atoi ( p + 1 )	453:4:10866:10885	1308837	1	True				
ANR	1309650	AssignmentExpression	num2 = atoi ( p + 1 )		1308837	0		=			
ANR	1309651	Identifier	num2		1308837	0					
ANR	1309652	CallExpression	atoi ( p + 1 )		1308837	1					
ANR	1309653	Callee	atoi		1308837	0					
ANR	1309654	Identifier	atoi		1308837	0					
ANR	1309655	ArgumentList	p + 1		1308837	1					
ANR	1309656	Argument	p + 1		1308837	0					
ANR	1309657	AdditiveExpression	p + 1		1308837	0		+			
ANR	1309658	Identifier	p		1308837	0					
ANR	1309659	PrimaryExpression	1		1308837	1					
ANR	1309660	ElseStatement	else		1308837	0					
ANR	1309661	CompoundStatement		113:10:2992:2992	1308837	0					
ANR	1309662	ExpressionStatement	num2 = 0	455:4:10903:10911	1308837	0	True				
ANR	1309663	AssignmentExpression	num2 = 0		1308837	0		=			
ANR	1309664	Identifier	num2		1308837	0					
ANR	1309665	PrimaryExpression	0		1308837	1					
ANR	1309666	ExpressionStatement	num = atoi ( str ) + num2	457:3:10921:10944	1308837	33	True				
ANR	1309667	AssignmentExpression	num = atoi ( str ) + num2		1308837	0		=			
ANR	1309668	Identifier	num		1308837	0					
ANR	1309669	AdditiveExpression	atoi ( str ) + num2		1308837	1		+			
ANR	1309670	CallExpression	atoi ( str )		1308837	0					
ANR	1309671	Callee	atoi		1308837	0					
ANR	1309672	Identifier	atoi		1308837	0					
ANR	1309673	ArgumentList	str		1308837	1					
ANR	1309674	Argument	str		1308837	0					
ANR	1309675	Identifier	str		1308837	0					
ANR	1309676	Identifier	num2		1308837	1					
ANR	1309677	ExpressionStatement	egg -> lang . stackframe = num	458:3:10949:10975	1308837	34	True				
ANR	1309678	AssignmentExpression	egg -> lang . stackframe = num		1308837	0		=			
ANR	1309679	MemberAccess	egg -> lang . stackframe		1308837	0					
ANR	1309680	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309681	Identifier	egg		1308837	0					
ANR	1309682	Identifier	lang		1308837	1					
ANR	1309683	Identifier	stackframe		1308837	1					
ANR	1309684	Identifier	num		1308837	1					
ANR	1309685	ExpressionStatement	egg -> lang . stackfixed = num2	459:3:10980:11007	1308837	35	True				
ANR	1309686	AssignmentExpression	egg -> lang . stackfixed = num2		1308837	0		=			
ANR	1309687	MemberAccess	egg -> lang . stackfixed		1308837	0					
ANR	1309688	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309689	Identifier	egg		1308837	0					
ANR	1309690	Identifier	lang		1308837	1					
ANR	1309691	Identifier	stackfixed		1308837	1					
ANR	1309692	Identifier	num2		1308837	1					
ANR	1309693	IfStatement	if ( egg -> lang . mode != NAKED )		1308837	36					
ANR	1309694	Condition	egg -> lang . mode != NAKED	460:7:11016:11038	1308837	0	True				
ANR	1309695	EqualityExpression	egg -> lang . mode != NAKED		1308837	0		!=			
ANR	1309696	MemberAccess	egg -> lang . mode		1308837	0					
ANR	1309697	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309698	Identifier	egg		1308837	0					
ANR	1309699	Identifier	lang		1308837	1					
ANR	1309700	Identifier	mode		1308837	1					
ANR	1309701	Identifier	NAKED		1308837	1					
ANR	1309702	CompoundStatement		119:32:3136:3136	1308837	1					
ANR	1309703	ExpressionStatement	"e -> frame ( egg , egg -> lang . stackframe + egg -> lang . stackfixed )"	461:4:11047:11106	1308837	0	True				
ANR	1309704	CallExpression	"e -> frame ( egg , egg -> lang . stackframe + egg -> lang . stackfixed )"		1308837	0					
ANR	1309705	Callee	e -> frame		1308837	0					
ANR	1309706	PtrMemberAccess	e -> frame		1308837	0					
ANR	1309707	Identifier	e		1308837	0					
ANR	1309708	Identifier	frame		1308837	1					
ANR	1309709	ArgumentList	egg		1308837	1					
ANR	1309710	Argument	egg		1308837	0					
ANR	1309711	Identifier	egg		1308837	0					
ANR	1309712	Argument	egg -> lang . stackframe + egg -> lang . stackfixed		1308837	1					
ANR	1309713	AdditiveExpression	egg -> lang . stackframe + egg -> lang . stackfixed		1308837	0		+			
ANR	1309714	MemberAccess	egg -> lang . stackframe		1308837	0					
ANR	1309715	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309716	Identifier	egg		1308837	0					
ANR	1309717	Identifier	lang		1308837	1					
ANR	1309718	Identifier	stackframe		1308837	1					
ANR	1309719	MemberAccess	egg -> lang . stackfixed		1308837	1					
ANR	1309720	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309721	Identifier	egg		1308837	0					
ANR	1309722	Identifier	lang		1308837	1					
ANR	1309723	Identifier	stackfixed		1308837	1					
ANR	1309724	ExpressionStatement	egg -> lang . elem [ 0 ] = 0	464:2:11119:11140	1308837	1	True				
ANR	1309725	AssignmentExpression	egg -> lang . elem [ 0 ] = 0		1308837	0		=			
ANR	1309726	ArrayIndexing	egg -> lang . elem [ 0 ]		1308837	0					
ANR	1309727	MemberAccess	egg -> lang . elem		1308837	0					
ANR	1309728	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309729	Identifier	egg		1308837	0					
ANR	1309730	Identifier	lang		1308837	1					
ANR	1309731	Identifier	elem		1308837	1					
ANR	1309732	PrimaryExpression	0		1308837	1					
ANR	1309733	PrimaryExpression	0		1308837	1					
ANR	1309734	ExpressionStatement	egg -> lang . elem_n = 0	465:2:11144:11164	1308837	2	True				
ANR	1309735	AssignmentExpression	egg -> lang . elem_n = 0		1308837	0		=			
ANR	1309736	MemberAccess	egg -> lang . elem_n		1308837	0					
ANR	1309737	PtrMemberAccess	egg -> lang		1308837	0					
ANR	1309738	Identifier	egg		1308837	0					
ANR	1309739	Identifier	lang		1308837	1					
ANR	1309740	Identifier	elem_n		1308837	1					
ANR	1309741	PrimaryExpression	0		1308837	1					
ANR	1309742	ReturnType	static void		1308837	1					
ANR	1309743	Identifier	rcc_element		1308837	2					
ANR	1309744	ParameterList	"REgg * egg , char * str"		1308837	3					
ANR	1309745	Parameter	REgg * egg	342:24:7882:7890	1308837	0	True				
ANR	1309746	ParameterType	REgg *		1308837	0					
ANR	1309747	Identifier	egg		1308837	1					
ANR	1309748	Parameter	char * str	342:35:7893:7901	1308837	1	True				
ANR	1309749	ParameterType	char *		1308837	0					
ANR	1309750	Identifier	str		1308837	1					
ANR	1309751	CFGEntryNode	ENTRY		1308837		True				
ANR	1309752	CFGExitNode	EXIT		1308837		True				
ANR	1309753	Symbol	egg		1308837						
ANR	1309754	Symbol	CTX		1308837						
ANR	1309755	Symbol	num		1308837						
ANR	1309756	Symbol	strchr		1308837						
ANR	1309757	Symbol	inside		1308837						
ANR	1309758	Symbol	* egg -> lang		1308837						
ANR	1309759	Symbol	strlen		1308837						
ANR	1309760	Symbol	egg -> lang . syscalls		1308837						
ANR	1309761	Symbol	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . name		1308837						
ANR	1309762	Symbol	egg -> lang . nalias		1308837						
ANR	1309763	Symbol	egg -> lang . stackfixed		1308837						
ANR	1309764	Symbol	egg -> lang . stackframe		1308837						
ANR	1309765	Symbol	strcmp		1308837						
ANR	1309766	Symbol	NULL		1308837						
ANR	1309767	Symbol	* egg -> lang . elem		1308837						
ANR	1309768	Symbol	egg -> lang . nargs		1308837						
ANR	1309769	Symbol	egg -> lang . callname		1308837						
ANR	1309770	Symbol	egg -> lang . mode		1308837						
ANR	1309771	Symbol	skipspaces		1308837						
ANR	1309772	Symbol	str		1308837						
ANR	1309773	Symbol	* egg -> lang . syscalls		1308837						
ANR	1309774	Symbol	egg -> lang . slurp		1308837						
ANR	1309775	Symbol	strstr		1308837						
ANR	1309776	Symbol	* egg -> lang . elem_n		1308837						
ANR	1309777	Symbol	* egg -> lang . aliases		1308837						
ANR	1309778	Symbol	GOTO		1308837						
ANR	1309779	Symbol	* egg -> lang . nsyscalls		1308837						
ANR	1309780	Symbol	egg -> lang . elem		1308837						
ANR	1309781	Symbol	egg -> lang . aliases		1308837						
ANR	1309782	Symbol	egg -> lang . aliases [ i ] . name		1308837						
ANR	1309783	Symbol	egg -> lang . dstvar		1308837						
ANR	1309784	Symbol	egg -> remit		1308837						
ANR	1309785	Symbol	egg -> lang		1308837						
ANR	1309786	Symbol	egg -> lang . includedir		1308837						
ANR	1309787	Symbol	* egg		1308837						
ANR	1309788	Symbol	egg -> lang . syscalls [ egg -> lang . nsyscalls ] . arg		1308837						
ANR	1309789	Symbol	* * egg		1308837						
ANR	1309790	Symbol	num2		1308837						
ANR	1309791	Symbol	atoi		1308837						
ANR	1309792	Symbol	find_alias		1308837						
ANR	1309793	Symbol	e		1308837						
ANR	1309794	Symbol	i		1308837						
ANR	1309795	Symbol	egg -> lang . aliases [ i ] . content		1308837						
ANR	1309796	Symbol	egg -> lang . elem_n		1308837						
ANR	1309797	Symbol	ptr		1308837						
ANR	1309798	Symbol	p		1308837						
ANR	1309799	Symbol	egg -> lang . conditionstr		1308837						
ANR	1309800	Symbol	* i		1308837						
ANR	1309801	Symbol	egg -> lang . nsyscalls		1308837						
ANR	1309802	Symbol	x00		1308837						
ANR	1309803	Symbol	* p		1308837						
ANR	1309804	Symbol	strdup		1308837						
ANR	1309805	Symbol	NORMAL		1308837						
ANR	1309806	Symbol	NAKED		1308837						
ANR	1309807	Function	rcc_pushstr	469:0:11172:12287							
ANR	1309808	FunctionDef	"rcc_pushstr (REgg * egg , char * str , int filter)"		1309807	0					
ANR	1309809	CompoundStatement		469:58:11230:12287	1309807	0					
ANR	1309810	IdentifierDeclStatement	int dotrim ;	470:1:11233:11243	1309807	0	True				
ANR	1309811	IdentifierDecl	dotrim		1309807	0					
ANR	1309812	IdentifierDeclType	int		1309807	0					
ANR	1309813	Identifier	dotrim		1309807	1					
ANR	1309814	IdentifierDeclStatement	"int i , j , len , ch ;"	471:1:11246:11263	1309807	1	True				
ANR	1309815	IdentifierDecl	i		1309807	0					
ANR	1309816	IdentifierDeclType	int		1309807	0					
ANR	1309817	Identifier	i		1309807	1					
ANR	1309818	IdentifierDecl	j		1309807	1					
ANR	1309819	IdentifierDeclType	int		1309807	0					
ANR	1309820	Identifier	j		1309807	1					
ANR	1309821	IdentifierDecl	len		1309807	2					
ANR	1309822	IdentifierDeclType	int		1309807	0					
ANR	1309823	Identifier	len		1309807	1					
ANR	1309824	IdentifierDecl	ch		1309807	3					
ANR	1309825	IdentifierDeclType	int		1309807	0					
ANR	1309826	Identifier	ch		1309807	1					
ANR	1309827	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	472:1:11266:11290	1309807	2	True				
ANR	1309828	IdentifierDecl	* e = egg -> remit		1309807	0					
ANR	1309829	IdentifierDeclType	REggEmit *		1309807	0					
ANR	1309830	Identifier	e		1309807	1					
ANR	1309831	AssignmentExpression	* e = egg -> remit		1309807	2		=			
ANR	1309832	Identifier	e		1309807	0					
ANR	1309833	PtrMemberAccess	egg -> remit		1309807	1					
ANR	1309834	Identifier	egg		1309807	0					
ANR	1309835	Identifier	remit		1309807	1					
ANR	1309836	ExpressionStatement	"e -> comment ( egg , ""encode %s string (%s) (%s)"" , filter ? ""filtered"" : ""unfiltered"" , str , egg -> lang . callname )"	474:1:11294:11401	1309807	3	True				
ANR	1309837	CallExpression	"e -> comment ( egg , ""encode %s string (%s) (%s)"" , filter ? ""filtered"" : ""unfiltered"" , str , egg -> lang . callname )"		1309807	0					
ANR	1309838	Callee	e -> comment		1309807	0					
ANR	1309839	PtrMemberAccess	e -> comment		1309807	0					
ANR	1309840	Identifier	e		1309807	0					
ANR	1309841	Identifier	comment		1309807	1					
ANR	1309842	ArgumentList	egg		1309807	1					
ANR	1309843	Argument	egg		1309807	0					
ANR	1309844	Identifier	egg		1309807	0					
ANR	1309845	Argument	"""encode %s string (%s) (%s)"""		1309807	1					
ANR	1309846	PrimaryExpression	"""encode %s string (%s) (%s)"""		1309807	0					
ANR	1309847	Argument	"filter ? ""filtered"" : ""unfiltered"""		1309807	2					
ANR	1309848	ConditionalExpression	"filter ? ""filtered"" : ""unfiltered"""		1309807	0					
ANR	1309849	Condition	filter		1309807	0					
ANR	1309850	Identifier	filter		1309807	0					
ANR	1309851	PrimaryExpression	"""filtered"""		1309807	1					
ANR	1309852	PrimaryExpression	"""unfiltered"""		1309807	2					
ANR	1309853	Argument	str		1309807	3					
ANR	1309854	Identifier	str		1309807	0					
ANR	1309855	Argument	egg -> lang . callname		1309807	4					
ANR	1309856	MemberAccess	egg -> lang . callname		1309807	0					
ANR	1309857	PtrMemberAccess	egg -> lang		1309807	0					
ANR	1309858	Identifier	egg		1309807	0					
ANR	1309859	Identifier	lang		1309807	1					
ANR	1309860	Identifier	callname		1309807	1					
ANR	1309861	IfStatement	if ( filter )		1309807	4					
ANR	1309862	Condition	filter	478:5:11428:11433	1309807	0	True				
ANR	1309863	Identifier	filter		1309807	0					
ANR	1309864	CompoundStatement		10:13:205:205	1309807	1					
ANR	1309865	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		1309807	0					
ANR	1309866	ForInit	i = 0 ;	479:7:11445:11450	1309807	0	True				
ANR	1309867	AssignmentExpression	i = 0		1309807	0		=			
ANR	1309868	Identifier	i		1309807	0					
ANR	1309869	PrimaryExpression	0		1309807	1					
ANR	1309870	Condition	str [ i ]	479:14:11452:11457	1309807	1	True				
ANR	1309871	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309872	Identifier	str		1309807	0					
ANR	1309873	Identifier	i		1309807	1					
ANR	1309874	PostIncDecOperationExpression	i ++	479:22:11460:11462	1309807	2	True				
ANR	1309875	Identifier	i		1309807	0					
ANR	1309876	IncDec	++		1309807	1					
ANR	1309877	CompoundStatement		11:27:234:234	1309807	3					
ANR	1309878	ExpressionStatement	dotrim = 0	480:3:11470:11480	1309807	0	True				
ANR	1309879	AssignmentExpression	dotrim = 0		1309807	0		=			
ANR	1309880	Identifier	dotrim		1309807	0					
ANR	1309881	PrimaryExpression	0		1309807	1					
ANR	1309882	IfStatement	if ( str [ i ] == '\\\\' )		1309807	1					
ANR	1309883	Condition	str [ i ] == '\\\\'	481:7:11489:11502	1309807	0	True				
ANR	1309884	EqualityExpression	str [ i ] == '\\\\'		1309807	0		==			
ANR	1309885	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309886	Identifier	str		1309807	0					
ANR	1309887	Identifier	i		1309807	1					
ANR	1309888	PrimaryExpression	'\\\\'		1309807	1					
ANR	1309889	CompoundStatement		13:23:274:274	1309807	1					
ANR	1309890	SwitchStatement	switch ( str [ i + 1 ] )		1309807	0					
ANR	1309891	Condition	str [ i + 1 ]	482:12:11519:11528	1309807	0	True				
ANR	1309892	ArrayIndexing	str [ i + 1 ]		1309807	0					
ANR	1309893	Identifier	str		1309807	0					
ANR	1309894	AdditiveExpression	i + 1		1309807	1		+			
ANR	1309895	Identifier	i		1309807	0					
ANR	1309896	PrimaryExpression	1		1309807	1					
ANR	1309897	CompoundStatement		14:24:300:300	1309807	1					
ANR	1309898	Label	case 't' :	483:4:11537:11545	1309807	0	True				
ANR	1309899	ExpressionStatement	str [ i ] = '\\t'	484:5:11552:11565	1309807	1	True				
ANR	1309900	AssignmentExpression	str [ i ] = '\\t'		1309807	0		=			
ANR	1309901	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309902	Identifier	str		1309807	0					
ANR	1309903	Identifier	i		1309807	1					
ANR	1309904	PrimaryExpression	'\\t'		1309807	1					
ANR	1309905	ExpressionStatement	dotrim = 1	485:5:11572:11582	1309807	2	True				
ANR	1309906	AssignmentExpression	dotrim = 1		1309807	0		=			
ANR	1309907	Identifier	dotrim		1309807	0					
ANR	1309908	PrimaryExpression	1		1309807	1					
ANR	1309909	BreakStatement	break ;	486:5:11589:11594	1309807	3	True				
ANR	1309910	Label	case 'n' :	487:4:11600:11608	1309807	4	True				
ANR	1309911	ExpressionStatement	str [ i ] = '\\n'	488:5:11615:11628	1309807	5	True				
ANR	1309912	AssignmentExpression	str [ i ] = '\\n'		1309807	0		=			
ANR	1309913	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309914	Identifier	str		1309807	0					
ANR	1309915	Identifier	i		1309807	1					
ANR	1309916	PrimaryExpression	'\\n'		1309807	1					
ANR	1309917	ExpressionStatement	dotrim = 1	489:5:11635:11645	1309807	6	True				
ANR	1309918	AssignmentExpression	dotrim = 1		1309807	0		=			
ANR	1309919	Identifier	dotrim		1309807	0					
ANR	1309920	PrimaryExpression	1		1309807	1					
ANR	1309921	BreakStatement	break ;	490:5:11652:11657	1309807	7	True				
ANR	1309922	Label	case 'e' :	491:4:11663:11671	1309807	8	True				
ANR	1309923	ExpressionStatement	str [ i ] = x1b	492:5:11678:11693	1309807	9	True				
ANR	1309924	AssignmentExpression	str [ i ] = x1b		1309807	0		=			
ANR	1309925	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309926	Identifier	str		1309807	0					
ANR	1309927	Identifier	i		1309807	1					
ANR	1309928	Identifier	x1b		1309807	1					
ANR	1309929	ExpressionStatement	dotrim = 1	493:5:11700:11710	1309807	10	True				
ANR	1309930	AssignmentExpression	dotrim = 1		1309807	0		=			
ANR	1309931	Identifier	dotrim		1309807	0					
ANR	1309932	PrimaryExpression	1		1309807	1					
ANR	1309933	BreakStatement	break ;	494:5:11717:11722	1309807	11	True				
ANR	1309934	Label	case 'x' :	495:4:11728:11736	1309807	12	True				
ANR	1309935	ExpressionStatement	ch = r_hex_pair2bin ( str + i + 2 )	496:5:11743:11776	1309807	13	True				
ANR	1309936	AssignmentExpression	ch = r_hex_pair2bin ( str + i + 2 )		1309807	0		=			
ANR	1309937	Identifier	ch		1309807	0					
ANR	1309938	CallExpression	r_hex_pair2bin ( str + i + 2 )		1309807	1					
ANR	1309939	Callee	r_hex_pair2bin		1309807	0					
ANR	1309940	Identifier	r_hex_pair2bin		1309807	0					
ANR	1309941	ArgumentList	str + i + 2		1309807	1					
ANR	1309942	Argument	str + i + 2		1309807	0					
ANR	1309943	AdditiveExpression	str + i + 2		1309807	0		+			
ANR	1309944	Identifier	str		1309807	0					
ANR	1309945	AdditiveExpression	i + 2		1309807	1		+			
ANR	1309946	Identifier	i		1309807	0					
ANR	1309947	PrimaryExpression	2		1309807	1					
ANR	1309948	IfStatement	if ( ch == - 1 )		1309807	14					
ANR	1309949	Condition	ch == - 1	497:9:11787:11794	1309807	0	True				
ANR	1309950	EqualityExpression	ch == - 1		1309807	0		==			
ANR	1309951	Identifier	ch		1309807	0					
ANR	1309952	UnaryOperationExpression	- 1		1309807	1					
ANR	1309953	UnaryOperator	-		1309807	0					
ANR	1309954	PrimaryExpression	1		1309807	1					
ANR	1309955	CompoundStatement		29:19:566:566	1309807	1					
ANR	1309956	ExpressionStatement	"eprintf ( ""%s:%d Error string format\\n"" , egg -> lang . file , egg -> lang . line )"	498:6:11805:11883	1309807	0	True				
ANR	1309957	CallExpression	"eprintf ( ""%s:%d Error string format\\n"" , egg -> lang . file , egg -> lang . line )"		1309807	0					
ANR	1309958	Callee	eprintf		1309807	0					
ANR	1309959	Identifier	eprintf		1309807	0					
ANR	1309960	ArgumentList	"""%s:%d Error string format\\n"""		1309807	1					
ANR	1309961	Argument	"""%s:%d Error string format\\n"""		1309807	0					
ANR	1309962	PrimaryExpression	"""%s:%d Error string format\\n"""		1309807	0					
ANR	1309963	Argument	egg -> lang . file		1309807	1					
ANR	1309964	MemberAccess	egg -> lang . file		1309807	0					
ANR	1309965	PtrMemberAccess	egg -> lang		1309807	0					
ANR	1309966	Identifier	egg		1309807	0					
ANR	1309967	Identifier	lang		1309807	1					
ANR	1309968	Identifier	file		1309807	1					
ANR	1309969	Argument	egg -> lang . line		1309807	2					
ANR	1309970	MemberAccess	egg -> lang . line		1309807	0					
ANR	1309971	PtrMemberAccess	egg -> lang		1309807	0					
ANR	1309972	Identifier	egg		1309807	0					
ANR	1309973	Identifier	lang		1309807	1					
ANR	1309974	Identifier	line		1309807	1					
ANR	1309975	ExpressionStatement	str [ i ] = ( char ) ch	501:5:11897:11915	1309807	15	True				
ANR	1309976	AssignmentExpression	str [ i ] = ( char ) ch		1309807	0		=			
ANR	1309977	ArrayIndexing	str [ i ]		1309807	0					
ANR	1309978	Identifier	str		1309807	0					
ANR	1309979	Identifier	i		1309807	1					
ANR	1309980	CastExpression	( char ) ch		1309807	1					
ANR	1309981	CastTarget	char		1309807	0					
ANR	1309982	Identifier	ch		1309807	1					
ANR	1309983	ExpressionStatement	dotrim = 3	502:5:11922:11932	1309807	16	True				
ANR	1309984	AssignmentExpression	dotrim = 3		1309807	0		=			
ANR	1309985	Identifier	dotrim		1309807	0					
ANR	1309986	PrimaryExpression	3		1309807	1					
ANR	1309987	BreakStatement	break ;	503:5:11939:11944	1309807	17	True				
ANR	1309988	Label	default :	504:4:11950:11957	1309807	18	True				
ANR	1309989	Identifier	default		1309807	0					
ANR	1309990	BreakStatement	break ;	505:5:11964:11969	1309807	19	True				
ANR	1309991	IfStatement	if ( dotrim )		1309807	1					
ANR	1309992	Condition	dotrim	507:8:11985:11990	1309807	0	True				
ANR	1309993	Identifier	dotrim		1309807	0					
ANR	1309994	CompoundStatement		39:16:762:762	1309807	1					
ANR	1309995	ExpressionStatement	"memmove ( str + i + 1 , str + i + dotrim + 1 , strlen ( str + i + dotrim + 1 ) + 1 )"	508:5:12000:12084	1309807	0	True				
ANR	1309996	CallExpression	"memmove ( str + i + 1 , str + i + dotrim + 1 , strlen ( str + i + dotrim + 1 ) + 1 )"		1309807	0					
ANR	1309997	Callee	memmove		1309807	0					
ANR	1309998	Identifier	memmove		1309807	0					
ANR	1309999	ArgumentList	str + i + 1		1309807	1					
ANR	1310000	Argument	str + i + 1		1309807	0					
ANR	1310001	AdditiveExpression	str + i + 1		1309807	0		+			
ANR	1310002	Identifier	str		1309807	0					
ANR	1310003	AdditiveExpression	i + 1		1309807	1		+			
ANR	1310004	Identifier	i		1309807	0					
ANR	1310005	PrimaryExpression	1		1309807	1					
ANR	1310006	Argument	str + i + dotrim + 1		1309807	1					
ANR	1310007	AdditiveExpression	str + i + dotrim + 1		1309807	0		+			
ANR	1310008	Identifier	str		1309807	0					
ANR	1310009	AdditiveExpression	i + dotrim + 1		1309807	1		+			
ANR	1310010	Identifier	i		1309807	0					
ANR	1310011	AdditiveExpression	dotrim + 1		1309807	1		+			
ANR	1310012	Identifier	dotrim		1309807	0					
ANR	1310013	PrimaryExpression	1		1309807	1					
ANR	1310014	Argument	strlen ( str + i + dotrim + 1 ) + 1		1309807	2					
ANR	1310015	AdditiveExpression	strlen ( str + i + dotrim + 1 ) + 1		1309807	0		+			
ANR	1310016	CallExpression	strlen ( str + i + dotrim + 1 )		1309807	0					
ANR	1310017	Callee	strlen		1309807	0					
ANR	1310018	Identifier	strlen		1309807	0					
ANR	1310019	ArgumentList	str + i + dotrim + 1		1309807	1					
ANR	1310020	Argument	str + i + dotrim + 1		1309807	0					
ANR	1310021	AdditiveExpression	str + i + dotrim + 1		1309807	0		+			
ANR	1310022	Identifier	str		1309807	0					
ANR	1310023	AdditiveExpression	i + dotrim + 1		1309807	1		+			
ANR	1310024	Identifier	i		1309807	0					
ANR	1310025	AdditiveExpression	dotrim + 1		1309807	1		+			
ANR	1310026	Identifier	dotrim		1309807	0					
ANR	1310027	PrimaryExpression	1		1309807	1					
ANR	1310028	PrimaryExpression	1		1309807	1					
ANR	1310029	ExpressionStatement	len = strlen ( str )	516:1:12153:12171	1309807	5	True				
ANR	1310030	AssignmentExpression	len = strlen ( str )		1309807	0		=			
ANR	1310031	Identifier	len		1309807	0					
ANR	1310032	CallExpression	strlen ( str )		1309807	1					
ANR	1310033	Callee	strlen		1309807	0					
ANR	1310034	Identifier	strlen		1309807	0					
ANR	1310035	ArgumentList	str		1309807	1					
ANR	1310036	Argument	str		1309807	0					
ANR	1310037	Identifier	str		1309807	0					
ANR	1310038	ExpressionStatement	j = ( len - len % e -> size ) + e -> size	517:1:12174:12209	1309807	6	True				
ANR	1310039	AssignmentExpression	j = ( len - len % e -> size ) + e -> size		1309807	0		=			
ANR	1310040	Identifier	j		1309807	0					
ANR	1310041	AdditiveExpression	( len - len % e -> size ) + e -> size		1309807	1		+			
ANR	1310042	AdditiveExpression	len - len % e -> size		1309807	0		-			
ANR	1310043	Identifier	len		1309807	0					
ANR	1310044	MultiplicativeExpression	len % e -> size		1309807	1		%			
ANR	1310045	Identifier	len		1309807	0					
ANR	1310046	PtrMemberAccess	e -> size		1309807	1					
ANR	1310047	Identifier	e		1309807	0					
ANR	1310048	Identifier	size		1309807	1					
ANR	1310049	PtrMemberAccess	e -> size		1309807	1					
ANR	1310050	Identifier	e		1309807	0					
ANR	1310051	Identifier	size		1309807	1					
ANR	1310052	ExpressionStatement	"e -> set_string ( egg , egg -> lang . dstvar , str , j )"	518:1:12212:12257	1309807	7	True				
ANR	1310053	CallExpression	"e -> set_string ( egg , egg -> lang . dstvar , str , j )"		1309807	0					
ANR	1310054	Callee	e -> set_string		1309807	0					
ANR	1310055	PtrMemberAccess	e -> set_string		1309807	0					
ANR	1310056	Identifier	e		1309807	0					
ANR	1310057	Identifier	set_string		1309807	1					
ANR	1310058	ArgumentList	egg		1309807	1					
ANR	1310059	Argument	egg		1309807	0					
ANR	1310060	Identifier	egg		1309807	0					
ANR	1310061	Argument	egg -> lang . dstvar		1309807	1					
ANR	1310062	MemberAccess	egg -> lang . dstvar		1309807	0					
ANR	1310063	PtrMemberAccess	egg -> lang		1309807	0					
ANR	1310064	Identifier	egg		1309807	0					
ANR	1310065	Identifier	lang		1309807	1					
ANR	1310066	Identifier	dstvar		1309807	1					
ANR	1310067	Argument	str		1309807	2					
ANR	1310068	Identifier	str		1309807	0					
ANR	1310069	Argument	j		1309807	3					
ANR	1310070	Identifier	j		1309807	0					
ANR	1310071	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	519:1:12260:12285	1309807	8	True				
ANR	1310072	CallExpression	R_FREE ( egg -> lang . dstvar )		1309807	0					
ANR	1310073	Callee	R_FREE		1309807	0					
ANR	1310074	Identifier	R_FREE		1309807	0					
ANR	1310075	ArgumentList	egg -> lang . dstvar		1309807	1					
ANR	1310076	Argument	egg -> lang . dstvar		1309807	0					
ANR	1310077	MemberAccess	egg -> lang . dstvar		1309807	0					
ANR	1310078	PtrMemberAccess	egg -> lang		1309807	0					
ANR	1310079	Identifier	egg		1309807	0					
ANR	1310080	Identifier	lang		1309807	1					
ANR	1310081	Identifier	dstvar		1309807	1					
ANR	1310082	ReturnType	static void		1309807	1					
ANR	1310083	Identifier	rcc_pushstr		1309807	2					
ANR	1310084	ParameterList	"REgg * egg , char * str , int filter"		1309807	3					
ANR	1310085	Parameter	REgg * egg	469:24:11196:11204	1309807	0	True				
ANR	1310086	ParameterType	REgg *		1309807	0					
ANR	1310087	Identifier	egg		1309807	1					
ANR	1310088	Parameter	char * str	469:35:11207:11215	1309807	1	True				
ANR	1310089	ParameterType	char *		1309807	0					
ANR	1310090	Identifier	str		1309807	1					
ANR	1310091	Parameter	int filter	469:46:11218:11227	1309807	2	True				
ANR	1310092	ParameterType	int		1309807	0					
ANR	1310093	Identifier	filter		1309807	1					
ANR	1310094	CFGEntryNode	ENTRY		1309807		True				
ANR	1310095	CFGExitNode	EXIT		1309807		True				
ANR	1310096	Symbol	egg		1309807						
ANR	1310097	Symbol	ch		1309807						
ANR	1310098	Symbol	e		1309807						
ANR	1310099	Symbol	r_hex_pair2bin		1309807						
ANR	1310100	Symbol	x1b		1309807						
ANR	1310101	Symbol	i		1309807						
ANR	1310102	Symbol	j		1309807						
ANR	1310103	Symbol	egg -> lang . callname		1309807						
ANR	1310104	Symbol	egg -> lang . dstvar		1309807						
ANR	1310105	Symbol	egg -> remit		1309807						
ANR	1310106	Symbol	egg -> lang		1309807						
ANR	1310107	Symbol	* e		1309807						
ANR	1310108	Symbol	str		1309807						
ANR	1310109	Symbol	filter		1309807						
ANR	1310110	Symbol	* egg		1309807						
ANR	1310111	Symbol	strlen		1309807						
ANR	1310112	Symbol	* i		1309807						
ANR	1310113	Symbol	len		1309807						
ANR	1310114	Symbol	egg -> lang . file		1309807						
ANR	1310115	Symbol	e -> size		1309807						
ANR	1310116	Symbol	egg -> lang . line		1309807						
ANR	1310117	Symbol	dotrim		1309807						
ANR	1310118	Symbol	* str		1309807						
ANR	1310119	Function	r_egg_mkvar	522:0:12290:15448							
ANR	1310120	FunctionDef	"r_egg_mkvar (REgg * egg , char * out , const char * _str , int delta)"		1310119	0					
ANR	1310121	CompoundStatement		522:75:12365:15448	1310119	0					
ANR	1310122	IdentifierDeclStatement	"int i , len , qi ;"	523:1:12368:12382	1310119	0	True				
ANR	1310123	IdentifierDecl	i		1310119	0					
ANR	1310124	IdentifierDeclType	int		1310119	0					
ANR	1310125	Identifier	i		1310119	1					
ANR	1310126	IdentifierDecl	len		1310119	1					
ANR	1310127	IdentifierDeclType	int		1310119	0					
ANR	1310128	Identifier	len		1310119	1					
ANR	1310129	IdentifierDecl	qi		1310119	2					
ANR	1310130	IdentifierDeclType	int		1310119	0					
ANR	1310131	Identifier	qi		1310119	1					
ANR	1310132	IdentifierDeclStatement	"char * oldstr = NULL , * str = NULL , foo [ 32 ] , * q , * ret = NULL ;"	524:1:12385:12443	1310119	1	True				
ANR	1310133	IdentifierDecl	* oldstr = NULL		1310119	0					
ANR	1310134	IdentifierDeclType	char *		1310119	0					
ANR	1310135	Identifier	oldstr		1310119	1					
ANR	1310136	AssignmentExpression	* oldstr = NULL		1310119	2		=			
ANR	1310137	Identifier	NULL		1310119	0					
ANR	1310138	Identifier	NULL		1310119	1					
ANR	1310139	IdentifierDecl	* str = NULL		1310119	1					
ANR	1310140	IdentifierDeclType	char *		1310119	0					
ANR	1310141	Identifier	str		1310119	1					
ANR	1310142	AssignmentExpression	* str = NULL		1310119	2		=			
ANR	1310143	Identifier	NULL		1310119	0					
ANR	1310144	Identifier	NULL		1310119	1					
ANR	1310145	IdentifierDecl	foo [ 32 ]		1310119	2					
ANR	1310146	IdentifierDeclType	char [ 32 ]		1310119	0					
ANR	1310147	Identifier	foo		1310119	1					
ANR	1310148	PrimaryExpression	32		1310119	2					
ANR	1310149	IdentifierDecl	* q		1310119	3					
ANR	1310150	IdentifierDeclType	char *		1310119	0					
ANR	1310151	Identifier	q		1310119	1					
ANR	1310152	IdentifierDecl	* ret = NULL		1310119	4					
ANR	1310153	IdentifierDeclType	char *		1310119	0					
ANR	1310154	Identifier	ret		1310119	1					
ANR	1310155	AssignmentExpression	* ret = NULL		1310119	2		=			
ANR	1310156	Identifier	NULL		1310119	0					
ANR	1310157	Identifier	NULL		1310119	1					
ANR	1310158	ExpressionStatement	delta += egg -> lang . stackfixed	526:1:12447:12476	1310119	2	True				
ANR	1310159	AssignmentExpression	delta += egg -> lang . stackfixed		1310119	0		+=			
ANR	1310160	Identifier	delta		1310119	0					
ANR	1310161	MemberAccess	egg -> lang . stackfixed		1310119	1					
ANR	1310162	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310163	Identifier	egg		1310119	0					
ANR	1310164	Identifier	lang		1310119	1					
ANR	1310165	Identifier	stackfixed		1310119	1					
ANR	1310166	IfStatement	if ( ! _str )		1310119	3					
ANR	1310167	Condition	! _str	527:5:12509:12513	1310119	0	True				
ANR	1310168	UnaryOperationExpression	! _str		1310119	0					
ANR	1310169	UnaryOperator	!		1310119	0					
ANR	1310170	Identifier	_str		1310119	1					
ANR	1310171	CompoundStatement		6:12:150:150	1310119	1					
ANR	1310172	ReturnStatement	return NULL ;	528:2:12520:12531	1310119	0	True				
ANR	1310173	Identifier	NULL		1310119	0					
ANR	1310174	ExpressionStatement	ret = str = oldstr = strdup ( skipspaces ( _str ) )	531:1:12599:12646	1310119	4	True				
ANR	1310175	AssignmentExpression	ret = str = oldstr = strdup ( skipspaces ( _str ) )		1310119	0		=			
ANR	1310176	Identifier	ret		1310119	0					
ANR	1310177	AssignmentExpression	str = oldstr = strdup ( skipspaces ( _str ) )		1310119	1		=			
ANR	1310178	Identifier	str		1310119	0					
ANR	1310179	AssignmentExpression	oldstr = strdup ( skipspaces ( _str ) )		1310119	1		=			
ANR	1310180	Identifier	oldstr		1310119	0					
ANR	1310181	CallExpression	strdup ( skipspaces ( _str ) )		1310119	1					
ANR	1310182	Callee	strdup		1310119	0					
ANR	1310183	Identifier	strdup		1310119	0					
ANR	1310184	ArgumentList	skipspaces ( _str )		1310119	1					
ANR	1310185	Argument	skipspaces ( _str )		1310119	0					
ANR	1310186	CallExpression	skipspaces ( _str )		1310119	0					
ANR	1310187	Callee	skipspaces		1310119	0					
ANR	1310188	Identifier	skipspaces		1310119	0					
ANR	1310189	ArgumentList	_str		1310119	1					
ANR	1310190	Argument	_str		1310119	0					
ANR	1310191	Identifier	_str		1310119	0					
ANR	1310192	IfStatement	"if ( ( q = strchr ( str , ':' ) ) )"		1310119	5					
ANR	1310193	Condition	"q = strchr ( str , ':' )"	533:5:12722:12744	1310119	0	True				
ANR	1310194	AssignmentExpression	"q = strchr ( str , ':' )"		1310119	0		=			
ANR	1310195	Identifier	q		1310119	0					
ANR	1310196	CallExpression	"strchr ( str , ':' )"		1310119	1					
ANR	1310197	Callee	strchr		1310119	0					
ANR	1310198	Identifier	strchr		1310119	0					
ANR	1310199	ArgumentList	str		1310119	1					
ANR	1310200	Argument	str		1310119	0					
ANR	1310201	Identifier	str		1310119	0					
ANR	1310202	Argument	':'		1310119	1					
ANR	1310203	PrimaryExpression	':'		1310119	0					
ANR	1310204	CompoundStatement		12:30:381:381	1310119	1					
ANR	1310205	ExpressionStatement	* q = '\\0'	534:2:12751:12760	1310119	0	True				
ANR	1310206	AssignmentExpression	* q = '\\0'		1310119	0		=			
ANR	1310207	UnaryOperationExpression	* q		1310119	0					
ANR	1310208	UnaryOperator	*		1310119	0					
ANR	1310209	Identifier	q		1310119	1					
ANR	1310210	PrimaryExpression	'\\0'		1310119	1					
ANR	1310211	ExpressionStatement	qi = atoi ( q + 1 )	535:2:12764:12781	1310119	1	True				
ANR	1310212	AssignmentExpression	qi = atoi ( q + 1 )		1310119	0		=			
ANR	1310213	Identifier	qi		1310119	0					
ANR	1310214	CallExpression	atoi ( q + 1 )		1310119	1					
ANR	1310215	Callee	atoi		1310119	0					
ANR	1310216	Identifier	atoi		1310119	0					
ANR	1310217	ArgumentList	q + 1		1310119	1					
ANR	1310218	Argument	q + 1		1310119	0					
ANR	1310219	AdditiveExpression	q + 1		1310119	0		+			
ANR	1310220	Identifier	q		1310119	0					
ANR	1310221	PrimaryExpression	1		1310119	1					
ANR	1310222	ExpressionStatement	egg -> lang . varsize = ( qi == 1 ) ? 'b' : 'l'	536:2:12785:12824	1310119	2	True				
ANR	1310223	AssignmentExpression	egg -> lang . varsize = ( qi == 1 ) ? 'b' : 'l'		1310119	0		=			
ANR	1310224	MemberAccess	egg -> lang . varsize		1310119	0					
ANR	1310225	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310226	Identifier	egg		1310119	0					
ANR	1310227	Identifier	lang		1310119	1					
ANR	1310228	Identifier	varsize		1310119	1					
ANR	1310229	ConditionalExpression	( qi == 1 ) ? 'b' : 'l'		1310119	1					
ANR	1310230	Condition	qi == 1		1310119	0					
ANR	1310231	EqualityExpression	qi == 1		1310119	0		==			
ANR	1310232	Identifier	qi		1310119	0					
ANR	1310233	PrimaryExpression	1		1310119	1					
ANR	1310234	PrimaryExpression	'b'		1310119	1					
ANR	1310235	PrimaryExpression	'l'		1310119	2					
ANR	1310236	ElseStatement	else		1310119	0					
ANR	1310237	CompoundStatement		16:8:468:468	1310119	0					
ANR	1310238	ExpressionStatement	egg -> lang . varsize = 'l'	538:2:12838:12861	1310119	0	True				
ANR	1310239	AssignmentExpression	egg -> lang . varsize = 'l'		1310119	0		=			
ANR	1310240	MemberAccess	egg -> lang . varsize		1310119	0					
ANR	1310241	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310242	Identifier	egg		1310119	0					
ANR	1310243	Identifier	lang		1310119	1					
ANR	1310244	Identifier	varsize		1310119	1					
ANR	1310245	PrimaryExpression	'l'		1310119	1					
ANR	1310246	IfStatement	if ( * str == '*' || * str == '&' )		1310119	6					
ANR	1310247	Condition	* str == '*' || * str == '&'	540:5:12871:12896	1310119	0	True				
ANR	1310248	OrExpression	* str == '*' || * str == '&'		1310119	0		||			
ANR	1310249	EqualityExpression	* str == '*'		1310119	0		==			
ANR	1310250	UnaryOperationExpression	* str		1310119	0					
ANR	1310251	UnaryOperator	*		1310119	0					
ANR	1310252	Identifier	str		1310119	1					
ANR	1310253	PrimaryExpression	'*'		1310119	1					
ANR	1310254	EqualityExpression	* str == '&'		1310119	1		==			
ANR	1310255	UnaryOperationExpression	* str		1310119	0					
ANR	1310256	UnaryOperator	*		1310119	0					
ANR	1310257	Identifier	str		1310119	1					
ANR	1310258	PrimaryExpression	'&'		1310119	1					
ANR	1310259	CompoundStatement		19:33:533:533	1310119	1					
ANR	1310260	ExpressionStatement	egg -> lang . varxs = * str	541:2:12903:12925	1310119	0	True				
ANR	1310261	AssignmentExpression	egg -> lang . varxs = * str		1310119	0		=			
ANR	1310262	MemberAccess	egg -> lang . varxs		1310119	0					
ANR	1310263	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310264	Identifier	egg		1310119	0					
ANR	1310265	Identifier	lang		1310119	1					
ANR	1310266	Identifier	varxs		1310119	1					
ANR	1310267	UnaryOperationExpression	* str		1310119	1					
ANR	1310268	UnaryOperator	*		1310119	0					
ANR	1310269	Identifier	str		1310119	1					
ANR	1310270	ExpressionStatement	str ++	542:2:12929:12934	1310119	1	True				
ANR	1310271	PostIncDecOperationExpression	str ++		1310119	0					
ANR	1310272	Identifier	str		1310119	0					
ANR	1310273	IncDec	++		1310119	1					
ANR	1310274	ElseStatement	else		1310119	0					
ANR	1310275	CompoundStatement		22:8:578:578	1310119	0					
ANR	1310276	ExpressionStatement	egg -> lang . varxs = 0	544:2:12948:12967	1310119	0	True				
ANR	1310277	AssignmentExpression	egg -> lang . varxs = 0		1310119	0		=			
ANR	1310278	MemberAccess	egg -> lang . varxs		1310119	0					
ANR	1310279	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310280	Identifier	egg		1310119	0					
ANR	1310281	Identifier	lang		1310119	1					
ANR	1310282	Identifier	varxs		1310119	1					
ANR	1310283	PrimaryExpression	0		1310119	1					
ANR	1310284	IfStatement	if ( str [ 0 ] == '.' )		1310119	7					
ANR	1310285	Condition	str [ 0 ] == '.'	546:5:12977:12989	1310119	0	True				
ANR	1310286	EqualityExpression	str [ 0 ] == '.'		1310119	0		==			
ANR	1310287	ArrayIndexing	str [ 0 ]		1310119	0					
ANR	1310288	Identifier	str		1310119	0					
ANR	1310289	PrimaryExpression	0		1310119	1					
ANR	1310290	PrimaryExpression	'.'		1310119	1					
ANR	1310291	CompoundStatement		26:2:630:654	1310119	1					
ANR	1310292	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	547:2:12996:13020	1310119	0	True				
ANR	1310293	IdentifierDecl	* e = egg -> remit		1310119	0					
ANR	1310294	IdentifierDeclType	REggEmit *		1310119	0					
ANR	1310295	Identifier	e		1310119	1					
ANR	1310296	AssignmentExpression	* e = egg -> remit		1310119	2		=			
ANR	1310297	Identifier	e		1310119	0					
ANR	1310298	PtrMemberAccess	egg -> remit		1310119	1					
ANR	1310299	Identifier	egg		1310119	0					
ANR	1310300	Identifier	remit		1310119	1					
ANR	1310301	IfStatement	"if ( ! strncmp ( str + 1 , ""ret"" , 3 ) )"		1310119	1					
ANR	1310302	Condition	"! strncmp ( str + 1 , ""ret"" , 3 )"	548:6:13028:13055	1310119	0	True				
ANR	1310303	UnaryOperationExpression	"! strncmp ( str + 1 , ""ret"" , 3 )"		1310119	0					
ANR	1310304	UnaryOperator	!		1310119	0					
ANR	1310305	CallExpression	"strncmp ( str + 1 , ""ret"" , 3 )"		1310119	1					
ANR	1310306	Callee	strncmp		1310119	0					
ANR	1310307	Identifier	strncmp		1310119	0					
ANR	1310308	ArgumentList	str + 1		1310119	1					
ANR	1310309	Argument	str + 1		1310119	0					
ANR	1310310	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310311	Identifier	str		1310119	0					
ANR	1310312	PrimaryExpression	1		1310119	1					
ANR	1310313	Argument	"""ret"""		1310119	1					
ANR	1310314	PrimaryExpression	"""ret"""		1310119	0					
ANR	1310315	Argument	3		1310119	2					
ANR	1310316	PrimaryExpression	3		1310119	0					
ANR	1310317	CompoundStatement		27:36:692:692	1310119	1					
ANR	1310318	ExpressionStatement	"strcpy ( out , e -> retvar )"	549:3:13063:13086	1310119	0	True				
ANR	1310319	CallExpression	"strcpy ( out , e -> retvar )"		1310119	0					
ANR	1310320	Callee	strcpy		1310119	0					
ANR	1310321	Identifier	strcpy		1310119	0					
ANR	1310322	ArgumentList	out		1310119	1					
ANR	1310323	Argument	out		1310119	0					
ANR	1310324	Identifier	out		1310119	0					
ANR	1310325	Argument	e -> retvar		1310119	1					
ANR	1310326	PtrMemberAccess	e -> retvar		1310119	0					
ANR	1310327	Identifier	e		1310119	0					
ANR	1310328	Identifier	retvar		1310119	1					
ANR	1310329	ElseStatement	else		1310119	0					
ANR	1310330	IfStatement	"if ( ! strncmp ( str + 1 , ""fix"" , 3 ) )"		1310119	0					
ANR	1310331	Condition	"! strncmp ( str + 1 , ""fix"" , 3 )"	550:13:13101:13128	1310119	0	True				
ANR	1310332	UnaryOperationExpression	"! strncmp ( str + 1 , ""fix"" , 3 )"		1310119	0					
ANR	1310333	UnaryOperator	!		1310119	0					
ANR	1310334	CallExpression	"strncmp ( str + 1 , ""fix"" , 3 )"		1310119	1					
ANR	1310335	Callee	strncmp		1310119	0					
ANR	1310336	Identifier	strncmp		1310119	0					
ANR	1310337	ArgumentList	str + 1		1310119	1					
ANR	1310338	Argument	str + 1		1310119	0					
ANR	1310339	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310340	Identifier	str		1310119	0					
ANR	1310341	PrimaryExpression	1		1310119	1					
ANR	1310342	Argument	"""fix"""		1310119	1					
ANR	1310343	PrimaryExpression	"""fix"""		1310119	0					
ANR	1310344	Argument	3		1310119	2					
ANR	1310345	PrimaryExpression	3		1310119	0					
ANR	1310346	CompoundStatement		30:3:770:829	1310119	1					
ANR	1310347	IdentifierDeclStatement	"int idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size ;"	551:3:13136:13195	1310119	0	True				
ANR	1310348	IdentifierDecl	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	0					
ANR	1310349	IdentifierDeclType	int		1310119	0					
ANR	1310350	Identifier	idx		1310119	1					
ANR	1310351	AssignmentExpression	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	2		=			
ANR	1310352	Identifier	idx		1310119	0					
ANR	1310353	AdditiveExpression	"( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	1		+			
ANR	1310354	CastExpression	"( int ) r_num_math ( NULL , str + 4 )"		1310119	0					
ANR	1310355	CastTarget	int		1310119	0					
ANR	1310356	CallExpression	"r_num_math ( NULL , str + 4 )"		1310119	1					
ANR	1310357	Callee	r_num_math		1310119	0					
ANR	1310358	Identifier	r_num_math		1310119	0					
ANR	1310359	ArgumentList	NULL		1310119	1					
ANR	1310360	Argument	NULL		1310119	0					
ANR	1310361	Identifier	NULL		1310119	0					
ANR	1310362	Argument	str + 4		1310119	1					
ANR	1310363	AdditiveExpression	str + 4		1310119	0		+			
ANR	1310364	Identifier	str		1310119	0					
ANR	1310365	PrimaryExpression	4		1310119	1					
ANR	1310366	AdditiveExpression	delta + e -> size		1310119	1		+			
ANR	1310367	Identifier	delta		1310119	0					
ANR	1310368	PtrMemberAccess	e -> size		1310119	1					
ANR	1310369	Identifier	e		1310119	0					
ANR	1310370	Identifier	size		1310119	1					
ANR	1310371	ExpressionStatement	"e -> get_var ( egg , 0 , out , idx - egg -> lang . stackfixed )"	552:3:13200:13252	1310119	1	True				
ANR	1310372	CallExpression	"e -> get_var ( egg , 0 , out , idx - egg -> lang . stackfixed )"		1310119	0					
ANR	1310373	Callee	e -> get_var		1310119	0					
ANR	1310374	PtrMemberAccess	e -> get_var		1310119	0					
ANR	1310375	Identifier	e		1310119	0					
ANR	1310376	Identifier	get_var		1310119	1					
ANR	1310377	ArgumentList	egg		1310119	1					
ANR	1310378	Argument	egg		1310119	0					
ANR	1310379	Identifier	egg		1310119	0					
ANR	1310380	Argument	0		1310119	1					
ANR	1310381	PrimaryExpression	0		1310119	0					
ANR	1310382	Argument	out		1310119	2					
ANR	1310383	Identifier	out		1310119	0					
ANR	1310384	Argument	idx - egg -> lang . stackfixed		1310119	3					
ANR	1310385	AdditiveExpression	idx - egg -> lang . stackfixed		1310119	0		-			
ANR	1310386	Identifier	idx		1310119	0					
ANR	1310387	MemberAccess	egg -> lang . stackfixed		1310119	1					
ANR	1310388	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310389	Identifier	egg		1310119	0					
ANR	1310390	Identifier	lang		1310119	1					
ANR	1310391	Identifier	stackfixed		1310119	1					
ANR	1310392	ElseStatement	else		1310119	0					
ANR	1310393	IfStatement	"if ( ! strncmp ( str + 1 , ""var"" , 3 ) )"		1310119	0					
ANR	1310394	Condition	"! strncmp ( str + 1 , ""var"" , 3 )"	554:13:13351:13378	1310119	0	True				
ANR	1310395	UnaryOperationExpression	"! strncmp ( str + 1 , ""var"" , 3 )"		1310119	0					
ANR	1310396	UnaryOperator	!		1310119	0					
ANR	1310397	CallExpression	"strncmp ( str + 1 , ""var"" , 3 )"		1310119	1					
ANR	1310398	Callee	strncmp		1310119	0					
ANR	1310399	Identifier	strncmp		1310119	0					
ANR	1310400	ArgumentList	str + 1		1310119	1					
ANR	1310401	Argument	str + 1		1310119	0					
ANR	1310402	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310403	Identifier	str		1310119	0					
ANR	1310404	PrimaryExpression	1		1310119	1					
ANR	1310405	Argument	"""var"""		1310119	1					
ANR	1310406	PrimaryExpression	"""var"""		1310119	0					
ANR	1310407	Argument	3		1310119	2					
ANR	1310408	PrimaryExpression	3		1310119	0					
ANR	1310409	CompoundStatement		34:3:1020:1079	1310119	1					
ANR	1310410	IdentifierDeclStatement	"int idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size ;"	555:3:13386:13445	1310119	0	True				
ANR	1310411	IdentifierDecl	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	0					
ANR	1310412	IdentifierDeclType	int		1310119	0					
ANR	1310413	Identifier	idx		1310119	1					
ANR	1310414	AssignmentExpression	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	2		=			
ANR	1310415	Identifier	idx		1310119	0					
ANR	1310416	AdditiveExpression	"( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	1		+			
ANR	1310417	CastExpression	"( int ) r_num_math ( NULL , str + 4 )"		1310119	0					
ANR	1310418	CastTarget	int		1310119	0					
ANR	1310419	CallExpression	"r_num_math ( NULL , str + 4 )"		1310119	1					
ANR	1310420	Callee	r_num_math		1310119	0					
ANR	1310421	Identifier	r_num_math		1310119	0					
ANR	1310422	ArgumentList	NULL		1310119	1					
ANR	1310423	Argument	NULL		1310119	0					
ANR	1310424	Identifier	NULL		1310119	0					
ANR	1310425	Argument	str + 4		1310119	1					
ANR	1310426	AdditiveExpression	str + 4		1310119	0		+			
ANR	1310427	Identifier	str		1310119	0					
ANR	1310428	PrimaryExpression	4		1310119	1					
ANR	1310429	AdditiveExpression	delta + e -> size		1310119	1		+			
ANR	1310430	Identifier	delta		1310119	0					
ANR	1310431	PtrMemberAccess	e -> size		1310119	1					
ANR	1310432	Identifier	e		1310119	0					
ANR	1310433	Identifier	size		1310119	1					
ANR	1310434	ExpressionStatement	"e -> get_var ( egg , 0 , out , idx )"	556:3:13450:13479	1310119	1	True				
ANR	1310435	CallExpression	"e -> get_var ( egg , 0 , out , idx )"		1310119	0					
ANR	1310436	Callee	e -> get_var		1310119	0					
ANR	1310437	PtrMemberAccess	e -> get_var		1310119	0					
ANR	1310438	Identifier	e		1310119	0					
ANR	1310439	Identifier	get_var		1310119	1					
ANR	1310440	ArgumentList	egg		1310119	1					
ANR	1310441	Argument	egg		1310119	0					
ANR	1310442	Identifier	egg		1310119	0					
ANR	1310443	Argument	0		1310119	1					
ANR	1310444	PrimaryExpression	0		1310119	0					
ANR	1310445	Argument	out		1310119	2					
ANR	1310446	Identifier	out		1310119	0					
ANR	1310447	Argument	idx		1310119	3					
ANR	1310448	Identifier	idx		1310119	0					
ANR	1310449	ElseStatement	else		1310119	0					
ANR	1310450	IfStatement	"if ( ! strncmp ( str + 1 , ""rarg"" , 4 ) )"		1310119	0					
ANR	1310451	Condition	"! strncmp ( str + 1 , ""rarg"" , 4 )"	558:13:13557:13585	1310119	0	True				
ANR	1310452	UnaryOperationExpression	"! strncmp ( str + 1 , ""rarg"" , 4 )"		1310119	0					
ANR	1310453	UnaryOperator	!		1310119	0					
ANR	1310454	CallExpression	"strncmp ( str + 1 , ""rarg"" , 4 )"		1310119	1					
ANR	1310455	Callee	strncmp		1310119	0					
ANR	1310456	Identifier	strncmp		1310119	0					
ANR	1310457	ArgumentList	str + 1		1310119	1					
ANR	1310458	Argument	str + 1		1310119	0					
ANR	1310459	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310460	Identifier	str		1310119	0					
ANR	1310461	PrimaryExpression	1		1310119	1					
ANR	1310462	Argument	"""rarg"""		1310119	1					
ANR	1310463	PrimaryExpression	"""rarg"""		1310119	0					
ANR	1310464	Argument	4		1310119	2					
ANR	1310465	PrimaryExpression	4		1310119	0					
ANR	1310466	CompoundStatement		37:44:1222:1222	1310119	1					
ANR	1310467	IfStatement	if ( e -> get_ar )		1310119	0					
ANR	1310468	Condition	e -> get_ar	559:7:13597:13605	1310119	0	True				
ANR	1310469	PtrMemberAccess	e -> get_ar		1310119	0					
ANR	1310470	Identifier	e		1310119	0					
ANR	1310471	Identifier	get_ar		1310119	1					
ANR	1310472	CompoundStatement		39:4:1248:1289	1310119	1					
ANR	1310473	IdentifierDeclStatement	"int idx = ( int ) r_num_math ( NULL , str + 5 ) ;"	560:4:13614:13655	1310119	0	True				
ANR	1310474	IdentifierDecl	"idx = ( int ) r_num_math ( NULL , str + 5 )"		1310119	0					
ANR	1310475	IdentifierDeclType	int		1310119	0					
ANR	1310476	Identifier	idx		1310119	1					
ANR	1310477	AssignmentExpression	"idx = ( int ) r_num_math ( NULL , str + 5 )"		1310119	2		=			
ANR	1310478	Identifier	idx		1310119	0					
ANR	1310479	CastExpression	"( int ) r_num_math ( NULL , str + 5 )"		1310119	1					
ANR	1310480	CastTarget	int		1310119	0					
ANR	1310481	CallExpression	"r_num_math ( NULL , str + 5 )"		1310119	1					
ANR	1310482	Callee	r_num_math		1310119	0					
ANR	1310483	Identifier	r_num_math		1310119	0					
ANR	1310484	ArgumentList	NULL		1310119	1					
ANR	1310485	Argument	NULL		1310119	0					
ANR	1310486	Identifier	NULL		1310119	0					
ANR	1310487	Argument	str + 5		1310119	1					
ANR	1310488	AdditiveExpression	str + 5		1310119	0		+			
ANR	1310489	Identifier	str		1310119	0					
ANR	1310490	PrimaryExpression	5		1310119	1					
ANR	1310491	ExpressionStatement	"e -> get_ar ( egg , out , idx )"	561:4:13661:13686	1310119	1	True				
ANR	1310492	CallExpression	"e -> get_ar ( egg , out , idx )"		1310119	0					
ANR	1310493	Callee	e -> get_ar		1310119	0					
ANR	1310494	PtrMemberAccess	e -> get_ar		1310119	0					
ANR	1310495	Identifier	e		1310119	0					
ANR	1310496	Identifier	get_ar		1310119	1					
ANR	1310497	ArgumentList	egg		1310119	1					
ANR	1310498	Argument	egg		1310119	0					
ANR	1310499	Identifier	egg		1310119	0					
ANR	1310500	Argument	out		1310119	1					
ANR	1310501	Identifier	out		1310119	0					
ANR	1310502	Argument	idx		1310119	2					
ANR	1310503	Identifier	idx		1310119	0					
ANR	1310504	ElseStatement	else		1310119	0					
ANR	1310505	IfStatement	"if ( ! strncmp ( str + 1 , ""arg"" , 3 ) )"		1310119	0					
ANR	1310506	Condition	"! strncmp ( str + 1 , ""arg"" , 3 )"	563:13:13706:13733	1310119	0	True				
ANR	1310507	UnaryOperationExpression	"! strncmp ( str + 1 , ""arg"" , 3 )"		1310119	0					
ANR	1310508	UnaryOperator	!		1310119	0					
ANR	1310509	CallExpression	"strncmp ( str + 1 , ""arg"" , 3 )"		1310119	1					
ANR	1310510	Callee	strncmp		1310119	0					
ANR	1310511	Identifier	strncmp		1310119	0					
ANR	1310512	ArgumentList	str + 1		1310119	1					
ANR	1310513	Argument	str + 1		1310119	0					
ANR	1310514	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310515	Identifier	str		1310119	0					
ANR	1310516	PrimaryExpression	1		1310119	1					
ANR	1310517	Argument	"""arg"""		1310119	1					
ANR	1310518	PrimaryExpression	"""arg"""		1310119	0					
ANR	1310519	Argument	3		1310119	2					
ANR	1310520	PrimaryExpression	3		1310119	0					
ANR	1310521	CompoundStatement		42:43:1370:1370	1310119	1					
ANR	1310522	IfStatement	if ( str [ 4 ] )		1310119	0					
ANR	1310523	Condition	str [ 4 ]	564:7:13745:13750	1310119	0	True				
ANR	1310524	ArrayIndexing	str [ 4 ]		1310119	0					
ANR	1310525	Identifier	str		1310119	0					
ANR	1310526	PrimaryExpression	4		1310119	1					
ANR	1310527	CompoundStatement		43:15:1387:1387	1310119	1					
ANR	1310528	IfStatement	if ( egg -> lang . stackframe == 0 )		1310119	0					
ANR	1310529	Condition	egg -> lang . stackframe == 0	565:8:13763:13787	1310119	0	True				
ANR	1310530	EqualityExpression	egg -> lang . stackframe == 0		1310119	0		==			
ANR	1310531	MemberAccess	egg -> lang . stackframe		1310119	0					
ANR	1310532	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310533	Identifier	egg		1310119	0					
ANR	1310534	Identifier	lang		1310119	1					
ANR	1310535	Identifier	stackframe		1310119	1					
ANR	1310536	PrimaryExpression	0		1310119	1					
ANR	1310537	CompoundStatement		44:35:1424:1424	1310119	1					
ANR	1310538	ExpressionStatement	"e -> get_var ( egg , 1 , out , 4 )"	566:5:13797:13824	1310119	0	True				
ANR	1310539	CallExpression	"e -> get_var ( egg , 1 , out , 4 )"		1310119	0					
ANR	1310540	Callee	e -> get_var		1310119	0					
ANR	1310541	PtrMemberAccess	e -> get_var		1310119	0					
ANR	1310542	Identifier	e		1310119	0					
ANR	1310543	Identifier	get_var		1310119	1					
ANR	1310544	ArgumentList	egg		1310119	1					
ANR	1310545	Argument	egg		1310119	0					
ANR	1310546	Identifier	egg		1310119	0					
ANR	1310547	Argument	1		1310119	1					
ANR	1310548	PrimaryExpression	1		1310119	0					
ANR	1310549	Argument	out		1310119	2					
ANR	1310550	Identifier	out		1310119	0					
ANR	1310551	Argument	4		1310119	3					
ANR	1310552	PrimaryExpression	4		1310119	0					
ANR	1310553	ElseStatement	else		1310119	0					
ANR	1310554	CompoundStatement		47:5:1489:1548	1310119	0					
ANR	1310555	IdentifierDeclStatement	"int idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size ;"	568:5:13855:13914	1310119	0	True				
ANR	1310556	IdentifierDecl	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	0					
ANR	1310557	IdentifierDeclType	int		1310119	0					
ANR	1310558	Identifier	idx		1310119	1					
ANR	1310559	AssignmentExpression	"idx = ( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	2		=			
ANR	1310560	Identifier	idx		1310119	0					
ANR	1310561	AdditiveExpression	"( int ) r_num_math ( NULL , str + 4 ) + delta + e -> size"		1310119	1		+			
ANR	1310562	CastExpression	"( int ) r_num_math ( NULL , str + 4 )"		1310119	0					
ANR	1310563	CastTarget	int		1310119	0					
ANR	1310564	CallExpression	"r_num_math ( NULL , str + 4 )"		1310119	1					
ANR	1310565	Callee	r_num_math		1310119	0					
ANR	1310566	Identifier	r_num_math		1310119	0					
ANR	1310567	ArgumentList	NULL		1310119	1					
ANR	1310568	Argument	NULL		1310119	0					
ANR	1310569	Identifier	NULL		1310119	0					
ANR	1310570	Argument	str + 4		1310119	1					
ANR	1310571	AdditiveExpression	str + 4		1310119	0		+			
ANR	1310572	Identifier	str		1310119	0					
ANR	1310573	PrimaryExpression	4		1310119	1					
ANR	1310574	AdditiveExpression	delta + e -> size		1310119	1		+			
ANR	1310575	Identifier	delta		1310119	0					
ANR	1310576	PtrMemberAccess	e -> size		1310119	1					
ANR	1310577	Identifier	e		1310119	0					
ANR	1310578	Identifier	size		1310119	1					
ANR	1310579	ExpressionStatement	"e -> get_var ( egg , 2 , out , idx + 4 )"	569:5:13921:13954	1310119	1	True				
ANR	1310580	CallExpression	"e -> get_var ( egg , 2 , out , idx + 4 )"		1310119	0					
ANR	1310581	Callee	e -> get_var		1310119	0					
ANR	1310582	PtrMemberAccess	e -> get_var		1310119	0					
ANR	1310583	Identifier	e		1310119	0					
ANR	1310584	Identifier	get_var		1310119	1					
ANR	1310585	ArgumentList	egg		1310119	1					
ANR	1310586	Argument	egg		1310119	0					
ANR	1310587	Identifier	egg		1310119	0					
ANR	1310588	Argument	2		1310119	1					
ANR	1310589	PrimaryExpression	2		1310119	0					
ANR	1310590	Argument	out		1310119	2					
ANR	1310591	Identifier	out		1310119	0					
ANR	1310592	Argument	idx + 4		1310119	3					
ANR	1310593	AdditiveExpression	idx + 4		1310119	0		+			
ANR	1310594	Identifier	idx		1310119	0					
ANR	1310595	PrimaryExpression	4		1310119	1					
ANR	1310596	ElseStatement	else		1310119	0					
ANR	1310597	CompoundStatement		50:10:1606:1606	1310119	0					
ANR	1310598	IfStatement	if ( egg -> lang . callname )		1310119	0					
ANR	1310599	Condition	egg -> lang . callname	573:8:14021:14038	1310119	0	True				
ANR	1310600	MemberAccess	egg -> lang . callname		1310119	0					
ANR	1310601	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310602	Identifier	egg		1310119	0					
ANR	1310603	Identifier	lang		1310119	1					
ANR	1310604	Identifier	callname		1310119	1					
ANR	1310605	CompoundStatement		52:28:1675:1675	1310119	1					
ANR	1310606	ForStatement	for ( i = 0 ; i < egg -> lang . nsyscalls ; i ++ )		1310119	0					
ANR	1310607	ForInit	i = 0 ;	574:10:14053:14058	1310119	0	True				
ANR	1310608	AssignmentExpression	i = 0		1310119	0		=			
ANR	1310609	Identifier	i		1310119	0					
ANR	1310610	PrimaryExpression	0		1310119	1					
ANR	1310611	Condition	i < egg -> lang . nsyscalls	574:17:14060:14082	1310119	1	True				
ANR	1310612	RelationalExpression	i < egg -> lang . nsyscalls		1310119	0		<			
ANR	1310613	Identifier	i		1310119	0					
ANR	1310614	MemberAccess	egg -> lang . nsyscalls		1310119	1					
ANR	1310615	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310616	Identifier	egg		1310119	0					
ANR	1310617	Identifier	lang		1310119	1					
ANR	1310618	Identifier	nsyscalls		1310119	1					
ANR	1310619	PostIncDecOperationExpression	i ++	574:42:14085:14087	1310119	2	True				
ANR	1310620	Identifier	i		1310119	0					
ANR	1310621	IncDec	++		1310119	1					
ANR	1310622	CompoundStatement		53:47:1724:1724	1310119	3					
ANR	1310623	IfStatement	"if ( ! strcmp ( egg -> lang . syscalls [ i ] . name , egg -> lang . callname ) )"		1310119	0					
ANR	1310624	Condition	"! strcmp ( egg -> lang . syscalls [ i ] . name , egg -> lang . callname )"	575:10:14102:14157	1310119	0	True				
ANR	1310625	UnaryOperationExpression	"! strcmp ( egg -> lang . syscalls [ i ] . name , egg -> lang . callname )"		1310119	0					
ANR	1310626	UnaryOperator	!		1310119	0					
ANR	1310627	CallExpression	"strcmp ( egg -> lang . syscalls [ i ] . name , egg -> lang . callname )"		1310119	1					
ANR	1310628	Callee	strcmp		1310119	0					
ANR	1310629	Identifier	strcmp		1310119	0					
ANR	1310630	ArgumentList	egg -> lang . syscalls [ i ] . name		1310119	1					
ANR	1310631	Argument	egg -> lang . syscalls [ i ] . name		1310119	0					
ANR	1310632	MemberAccess	egg -> lang . syscalls [ i ] . name		1310119	0					
ANR	1310633	ArrayIndexing	egg -> lang . syscalls [ i ]		1310119	0					
ANR	1310634	MemberAccess	egg -> lang . syscalls		1310119	0					
ANR	1310635	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310636	Identifier	egg		1310119	0					
ANR	1310637	Identifier	lang		1310119	1					
ANR	1310638	Identifier	syscalls		1310119	1					
ANR	1310639	Identifier	i		1310119	1					
ANR	1310640	Identifier	name		1310119	1					
ANR	1310641	Argument	egg -> lang . callname		1310119	1					
ANR	1310642	MemberAccess	egg -> lang . callname		1310119	0					
ANR	1310643	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310644	Identifier	egg		1310119	0					
ANR	1310645	Identifier	lang		1310119	1					
ANR	1310646	Identifier	callname		1310119	1					
ANR	1310647	CompoundStatement		54:68:1794:1794	1310119	1					
ANR	1310648	ExpressionStatement	free ( oldstr )	576:7:14169:14182	1310119	0	True				
ANR	1310649	CallExpression	free ( oldstr )		1310119	0					
ANR	1310650	Callee	free		1310119	0					
ANR	1310651	Identifier	free		1310119	0					
ANR	1310652	ArgumentList	oldstr		1310119	1					
ANR	1310653	Argument	oldstr		1310119	0					
ANR	1310654	Identifier	oldstr		1310119	0					
ANR	1310655	ReturnStatement	return strdup ( egg -> lang . syscalls [ i ] . arg ) ;	577:7:14191:14232	1310119	1	True				
ANR	1310656	CallExpression	strdup ( egg -> lang . syscalls [ i ] . arg )		1310119	0					
ANR	1310657	Callee	strdup		1310119	0					
ANR	1310658	Identifier	strdup		1310119	0					
ANR	1310659	ArgumentList	egg -> lang . syscalls [ i ] . arg		1310119	1					
ANR	1310660	Argument	egg -> lang . syscalls [ i ] . arg		1310119	0					
ANR	1310661	MemberAccess	egg -> lang . syscalls [ i ] . arg		1310119	0					
ANR	1310662	ArrayIndexing	egg -> lang . syscalls [ i ]		1310119	0					
ANR	1310663	MemberAccess	egg -> lang . syscalls		1310119	0					
ANR	1310664	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310665	Identifier	egg		1310119	0					
ANR	1310666	Identifier	lang		1310119	1					
ANR	1310667	Identifier	syscalls		1310119	1					
ANR	1310668	Identifier	i		1310119	1					
ANR	1310669	Identifier	arg		1310119	1					
ANR	1310670	ExpressionStatement	"eprintf ( ""Unknown arg for syscall '%s'\\n"" , egg -> lang . callname )"	580:5:14254:14316	1310119	1	True				
ANR	1310671	CallExpression	"eprintf ( ""Unknown arg for syscall '%s'\\n"" , egg -> lang . callname )"		1310119	0					
ANR	1310672	Callee	eprintf		1310119	0					
ANR	1310673	Identifier	eprintf		1310119	0					
ANR	1310674	ArgumentList	"""Unknown arg for syscall '%s'\\n"""		1310119	1					
ANR	1310675	Argument	"""Unknown arg for syscall '%s'\\n"""		1310119	0					
ANR	1310676	PrimaryExpression	"""Unknown arg for syscall '%s'\\n"""		1310119	0					
ANR	1310677	Argument	egg -> lang . callname		1310119	1					
ANR	1310678	MemberAccess	egg -> lang . callname		1310119	0					
ANR	1310679	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310680	Identifier	egg		1310119	0					
ANR	1310681	Identifier	lang		1310119	1					
ANR	1310682	Identifier	callname		1310119	1					
ANR	1310683	ElseStatement	else		1310119	0					
ANR	1310684	CompoundStatement		60:11:1963:1963	1310119	0					
ANR	1310685	ExpressionStatement	"eprintf ( ""NO CALLNAME '%s'\\n"" , egg -> lang . callname )"	582:5:14336:14386	1310119	0	True				
ANR	1310686	CallExpression	"eprintf ( ""NO CALLNAME '%s'\\n"" , egg -> lang . callname )"		1310119	0					
ANR	1310687	Callee	eprintf		1310119	0					
ANR	1310688	Identifier	eprintf		1310119	0					
ANR	1310689	ArgumentList	"""NO CALLNAME '%s'\\n"""		1310119	1					
ANR	1310690	Argument	"""NO CALLNAME '%s'\\n"""		1310119	0					
ANR	1310691	PrimaryExpression	"""NO CALLNAME '%s'\\n"""		1310119	0					
ANR	1310692	Argument	egg -> lang . callname		1310119	1					
ANR	1310693	MemberAccess	egg -> lang . callname		1310119	0					
ANR	1310694	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310695	Identifier	egg		1310119	0					
ANR	1310696	Identifier	lang		1310119	1					
ANR	1310697	Identifier	callname		1310119	1					
ANR	1310698	ElseStatement	else		1310119	0					
ANR	1310699	IfStatement	"if ( ! strncmp ( str + 1 , ""reg"" , 3 ) )"		1310119	0					
ANR	1310700	Condition	"! strncmp ( str + 1 , ""reg"" , 3 )"	585:13:14412:14439	1310119	0	True				
ANR	1310701	UnaryOperationExpression	"! strncmp ( str + 1 , ""reg"" , 3 )"		1310119	0					
ANR	1310702	UnaryOperator	!		1310119	0					
ANR	1310703	CallExpression	"strncmp ( str + 1 , ""reg"" , 3 )"		1310119	1					
ANR	1310704	Callee	strncmp		1310119	0					
ANR	1310705	Identifier	strncmp		1310119	0					
ANR	1310706	ArgumentList	str + 1		1310119	1					
ANR	1310707	Argument	str + 1		1310119	0					
ANR	1310708	AdditiveExpression	str + 1		1310119	0		+			
ANR	1310709	Identifier	str		1310119	0					
ANR	1310710	PrimaryExpression	1		1310119	1					
ANR	1310711	Argument	"""reg"""		1310119	1					
ANR	1310712	PrimaryExpression	"""reg"""		1310119	0					
ANR	1310713	Argument	3		1310119	2					
ANR	1310714	PrimaryExpression	3		1310119	0					
ANR	1310715	CompoundStatement		64:43:2076:2076	1310119	1					
ANR	1310716	IfStatement	if ( egg -> lang . attsyntax )		1310119	0					
ANR	1310717	Condition	egg -> lang . attsyntax	587:7:14491:14509	1310119	0	True				
ANR	1310718	MemberAccess	egg -> lang . attsyntax		1310119	0					
ANR	1310719	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310720	Identifier	egg		1310119	0					
ANR	1310721	Identifier	lang		1310119	1					
ANR	1310722	Identifier	attsyntax		1310119	1					
ANR	1310723	CompoundStatement		66:28:2146:2146	1310119	1					
ANR	1310724	ExpressionStatement	"snprintf ( out , 32 , ""%%%s"" , e -> regs ( egg , atoi ( str + 4 ) ) )"	588:4:14518:14575	1310119	0	True				
ANR	1310725	CallExpression	"snprintf ( out , 32 , ""%%%s"" , e -> regs ( egg , atoi ( str + 4 ) ) )"		1310119	0					
ANR	1310726	Callee	snprintf		1310119	0					
ANR	1310727	Identifier	snprintf		1310119	0					
ANR	1310728	ArgumentList	out		1310119	1					
ANR	1310729	Argument	out		1310119	0					
ANR	1310730	Identifier	out		1310119	0					
ANR	1310731	Argument	32		1310119	1					
ANR	1310732	PrimaryExpression	32		1310119	0					
ANR	1310733	Argument	"""%%%s"""		1310119	2					
ANR	1310734	PrimaryExpression	"""%%%s"""		1310119	0					
ANR	1310735	Argument	"e -> regs ( egg , atoi ( str + 4 ) )"		1310119	3					
ANR	1310736	CallExpression	"e -> regs ( egg , atoi ( str + 4 ) )"		1310119	0					
ANR	1310737	Callee	e -> regs		1310119	0					
ANR	1310738	PtrMemberAccess	e -> regs		1310119	0					
ANR	1310739	Identifier	e		1310119	0					
ANR	1310740	Identifier	regs		1310119	1					
ANR	1310741	ArgumentList	egg		1310119	1					
ANR	1310742	Argument	egg		1310119	0					
ANR	1310743	Identifier	egg		1310119	0					
ANR	1310744	Argument	atoi ( str + 4 )		1310119	1					
ANR	1310745	CallExpression	atoi ( str + 4 )		1310119	0					
ANR	1310746	Callee	atoi		1310119	0					
ANR	1310747	Identifier	atoi		1310119	0					
ANR	1310748	ArgumentList	str + 4		1310119	1					
ANR	1310749	Argument	str + 4		1310119	0					
ANR	1310750	AdditiveExpression	str + 4		1310119	0		+			
ANR	1310751	Identifier	str		1310119	0					
ANR	1310752	PrimaryExpression	4		1310119	1					
ANR	1310753	ElseStatement	else		1310119	0					
ANR	1310754	CompoundStatement		68:10:2221:2221	1310119	0					
ANR	1310755	ExpressionStatement	"snprintf ( out , 32 , ""%s"" , e -> regs ( egg , atoi ( str + 4 ) ) )"	590:4:14593:14648	1310119	0	True				
ANR	1310756	CallExpression	"snprintf ( out , 32 , ""%s"" , e -> regs ( egg , atoi ( str + 4 ) ) )"		1310119	0					
ANR	1310757	Callee	snprintf		1310119	0					
ANR	1310758	Identifier	snprintf		1310119	0					
ANR	1310759	ArgumentList	out		1310119	1					
ANR	1310760	Argument	out		1310119	0					
ANR	1310761	Identifier	out		1310119	0					
ANR	1310762	Argument	32		1310119	1					
ANR	1310763	PrimaryExpression	32		1310119	0					
ANR	1310764	Argument	"""%s"""		1310119	2					
ANR	1310765	PrimaryExpression	"""%s"""		1310119	0					
ANR	1310766	Argument	"e -> regs ( egg , atoi ( str + 4 ) )"		1310119	3					
ANR	1310767	CallExpression	"e -> regs ( egg , atoi ( str + 4 ) )"		1310119	0					
ANR	1310768	Callee	e -> regs		1310119	0					
ANR	1310769	PtrMemberAccess	e -> regs		1310119	0					
ANR	1310770	Identifier	e		1310119	0					
ANR	1310771	Identifier	regs		1310119	1					
ANR	1310772	ArgumentList	egg		1310119	1					
ANR	1310773	Argument	egg		1310119	0					
ANR	1310774	Identifier	egg		1310119	0					
ANR	1310775	Argument	atoi ( str + 4 )		1310119	1					
ANR	1310776	CallExpression	atoi ( str + 4 )		1310119	0					
ANR	1310777	Callee	atoi		1310119	0					
ANR	1310778	Identifier	atoi		1310119	0					
ANR	1310779	ArgumentList	str + 4		1310119	1					
ANR	1310780	Argument	str + 4		1310119	0					
ANR	1310781	AdditiveExpression	str + 4		1310119	0		+			
ANR	1310782	Identifier	str		1310119	0					
ANR	1310783	PrimaryExpression	4		1310119	1					
ANR	1310784	ElseStatement	else		1310119	0					
ANR	1310785	CompoundStatement		71:9:2298:2298	1310119	0					
ANR	1310786	ExpressionStatement	out = str	593:3:14669:14678	1310119	0	True				
ANR	1310787	AssignmentExpression	out = str		1310119	0		=			
ANR	1310788	Identifier	out		1310119	0					
ANR	1310789	Identifier	str		1310119	1					
ANR	1310790	ExpressionStatement	"eprintf ( ""Something is really wrong\\n"" )"	594:3:14725:14764	1310119	1	True				
ANR	1310791	CallExpression	"eprintf ( ""Something is really wrong\\n"" )"		1310119	0					
ANR	1310792	Callee	eprintf		1310119	0					
ANR	1310793	Identifier	eprintf		1310119	0					
ANR	1310794	ArgumentList	"""Something is really wrong\\n"""		1310119	1					
ANR	1310795	Argument	"""Something is really wrong\\n"""		1310119	0					
ANR	1310796	PrimaryExpression	"""Something is really wrong\\n"""		1310119	0					
ANR	1310797	ExpressionStatement	ret = strdup ( out )	596:2:14772:14790	1310119	2	True				
ANR	1310798	AssignmentExpression	ret = strdup ( out )		1310119	0		=			
ANR	1310799	Identifier	ret		1310119	0					
ANR	1310800	CallExpression	strdup ( out )		1310119	1					
ANR	1310801	Callee	strdup		1310119	0					
ANR	1310802	Identifier	strdup		1310119	0					
ANR	1310803	ArgumentList	out		1310119	1					
ANR	1310804	Argument	out		1310119	0					
ANR	1310805	Identifier	out		1310119	0					
ANR	1310806	ExpressionStatement	free ( oldstr )	597:2:14794:14807	1310119	3	True				
ANR	1310807	CallExpression	free ( oldstr )		1310119	0					
ANR	1310808	Callee	free		1310119	0					
ANR	1310809	Identifier	free		1310119	0					
ANR	1310810	ArgumentList	oldstr		1310119	1					
ANR	1310811	Argument	oldstr		1310119	0					
ANR	1310812	Identifier	oldstr		1310119	0					
ANR	1310813	ElseStatement	else		1310119	0					
ANR	1310814	IfStatement	"if ( * str == '""' || * str == '\\'' )"		1310119	0					
ANR	1310815	Condition	"* str == '""' || * str == '\\''"	598:12:14821:14847	1310119	0	True				
ANR	1310816	OrExpression	"* str == '""' || * str == '\\''"		1310119	0		||			
ANR	1310817	EqualityExpression	"* str == '""'"		1310119	0		==			
ANR	1310818	UnaryOperationExpression	* str		1310119	0					
ANR	1310819	UnaryOperator	*		1310119	0					
ANR	1310820	Identifier	str		1310119	1					
ANR	1310821	PrimaryExpression	"'""'"		1310119	1					
ANR	1310822	EqualityExpression	* str == '\\''		1310119	1		==			
ANR	1310823	UnaryOperationExpression	* str		1310119	0					
ANR	1310824	UnaryOperator	*		1310119	0					
ANR	1310825	Identifier	str		1310119	1					
ANR	1310826	PrimaryExpression	'\\''		1310119	1					
ANR	1310827	CompoundStatement		78:2:2488:2516	1310119	1					
ANR	1310828	IdentifierDeclStatement	"int mustfilter = * str == '""' ;"	599:2:14854:14882	1310119	0	True				
ANR	1310829	IdentifierDecl	"mustfilter = * str == '""'"		1310119	0					
ANR	1310830	IdentifierDeclType	int		1310119	0					
ANR	1310831	Identifier	mustfilter		1310119	1					
ANR	1310832	AssignmentExpression	"mustfilter = * str == '""'"		1310119	2		=			
ANR	1310833	Identifier	mustfilter		1310119	0					
ANR	1310834	EqualityExpression	"* str == '""'"		1310119	1		==			
ANR	1310835	UnaryOperationExpression	* str		1310119	0					
ANR	1310836	UnaryOperator	*		1310119	0					
ANR	1310837	Identifier	str		1310119	1					
ANR	1310838	PrimaryExpression	"'""'"		1310119	1					
ANR	1310839	ExpressionStatement	str ++	601:2:14944:14949	1310119	1	True				
ANR	1310840	PostIncDecOperationExpression	str ++		1310119	0					
ANR	1310841	Identifier	str		1310119	0					
ANR	1310842	IncDec	++		1310119	1					
ANR	1310843	ExpressionStatement	len = strlen ( str ) - 1	602:2:14953:14975	1310119	2	True				
ANR	1310844	AssignmentExpression	len = strlen ( str ) - 1		1310119	0		=			
ANR	1310845	Identifier	len		1310119	0					
ANR	1310846	AdditiveExpression	strlen ( str ) - 1		1310119	1		-			
ANR	1310847	CallExpression	strlen ( str )		1310119	0					
ANR	1310848	Callee	strlen		1310119	0					
ANR	1310849	Identifier	strlen		1310119	0					
ANR	1310850	ArgumentList	str		1310119	1					
ANR	1310851	Argument	str		1310119	0					
ANR	1310852	Identifier	str		1310119	0					
ANR	1310853	PrimaryExpression	1		1310119	1					
ANR	1310854	IfStatement	if ( ! egg -> lang . stackfixed || egg -> lang . stackfixed < len )		1310119	3					
ANR	1310855	Condition	! egg -> lang . stackfixed || egg -> lang . stackfixed < len	603:6:14983:15033	1310119	0	True				
ANR	1310856	OrExpression	! egg -> lang . stackfixed || egg -> lang . stackfixed < len		1310119	0		||			
ANR	1310857	UnaryOperationExpression	! egg -> lang . stackfixed		1310119	0					
ANR	1310858	UnaryOperator	!		1310119	0					
ANR	1310859	MemberAccess	egg -> lang . stackfixed		1310119	1					
ANR	1310860	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310861	Identifier	egg		1310119	0					
ANR	1310862	Identifier	lang		1310119	1					
ANR	1310863	Identifier	stackfixed		1310119	1					
ANR	1310864	RelationalExpression	egg -> lang . stackfixed < len		1310119	1		<			
ANR	1310865	MemberAccess	egg -> lang . stackfixed		1310119	0					
ANR	1310866	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310867	Identifier	egg		1310119	0					
ANR	1310868	Identifier	lang		1310119	1					
ANR	1310869	Identifier	stackfixed		1310119	1					
ANR	1310870	Identifier	len		1310119	1					
ANR	1310871	CompoundStatement		82:59:2670:2670	1310119	1					
ANR	1310872	ExpressionStatement	"eprintf ( ""WARNING: No room in the static stackframe! (%d must be %d)\\n"" , egg -> lang . stackfixed , len )"	604:3:15041:15144	1310119	0	True				
ANR	1310873	CallExpression	"eprintf ( ""WARNING: No room in the static stackframe! (%d must be %d)\\n"" , egg -> lang . stackfixed , len )"		1310119	0					
ANR	1310874	Callee	eprintf		1310119	0					
ANR	1310875	Identifier	eprintf		1310119	0					
ANR	1310876	ArgumentList	"""WARNING: No room in the static stackframe! (%d must be %d)\\n"""		1310119	1					
ANR	1310877	Argument	"""WARNING: No room in the static stackframe! (%d must be %d)\\n"""		1310119	0					
ANR	1310878	PrimaryExpression	"""WARNING: No room in the static stackframe! (%d must be %d)\\n"""		1310119	0					
ANR	1310879	Argument	egg -> lang . stackfixed		1310119	1					
ANR	1310880	MemberAccess	egg -> lang . stackfixed		1310119	0					
ANR	1310881	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310882	Identifier	egg		1310119	0					
ANR	1310883	Identifier	lang		1310119	1					
ANR	1310884	Identifier	stackfixed		1310119	1					
ANR	1310885	Argument	len		1310119	2					
ANR	1310886	Identifier	len		1310119	0					
ANR	1310887	ExpressionStatement	str [ len ] = '\\0'	607:2:15152:15167	1310119	4	True				
ANR	1310888	AssignmentExpression	str [ len ] = '\\0'		1310119	0		=			
ANR	1310889	ArrayIndexing	str [ len ]		1310119	0					
ANR	1310890	Identifier	str		1310119	0					
ANR	1310891	Identifier	len		1310119	1					
ANR	1310892	PrimaryExpression	'\\0'		1310119	1					
ANR	1310893	ExpressionStatement	"snprintf ( foo , sizeof ( foo ) - 1 , "".fix%d"" , egg -> lang . nargs * 16 )"	608:2:15171:15235	1310119	5	True				
ANR	1310894	CallExpression	"snprintf ( foo , sizeof ( foo ) - 1 , "".fix%d"" , egg -> lang . nargs * 16 )"		1310119	0					
ANR	1310895	Callee	snprintf		1310119	0					
ANR	1310896	Identifier	snprintf		1310119	0					
ANR	1310897	ArgumentList	foo		1310119	1					
ANR	1310898	Argument	foo		1310119	0					
ANR	1310899	Identifier	foo		1310119	0					
ANR	1310900	Argument	sizeof ( foo ) - 1		1310119	1					
ANR	1310901	AdditiveExpression	sizeof ( foo ) - 1		1310119	0		-			
ANR	1310902	SizeofExpression	sizeof ( foo )		1310119	0					
ANR	1310903	Sizeof	sizeof		1310119	0					
ANR	1310904	SizeofOperand	foo		1310119	1					
ANR	1310905	PrimaryExpression	1		1310119	1					
ANR	1310906	Argument	""".fix%d"""		1310119	2					
ANR	1310907	PrimaryExpression	""".fix%d"""		1310119	0					
ANR	1310908	Argument	egg -> lang . nargs * 16		1310119	3					
ANR	1310909	MultiplicativeExpression	egg -> lang . nargs * 16		1310119	0		*			
ANR	1310910	MemberAccess	egg -> lang . nargs		1310119	0					
ANR	1310911	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310912	Identifier	egg		1310119	0					
ANR	1310913	Identifier	lang		1310119	1					
ANR	1310914	Identifier	nargs		1310119	1					
ANR	1310915	PrimaryExpression	16		1310119	1					
ANR	1310916	ExpressionStatement	free ( egg -> lang . dstvar )	609:2:15264:15287	1310119	6	True				
ANR	1310917	CallExpression	free ( egg -> lang . dstvar )		1310119	0					
ANR	1310918	Callee	free		1310119	0					
ANR	1310919	Identifier	free		1310119	0					
ANR	1310920	ArgumentList	egg -> lang . dstvar		1310119	1					
ANR	1310921	Argument	egg -> lang . dstvar		1310119	0					
ANR	1310922	MemberAccess	egg -> lang . dstvar		1310119	0					
ANR	1310923	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310924	Identifier	egg		1310119	0					
ANR	1310925	Identifier	lang		1310119	1					
ANR	1310926	Identifier	dstvar		1310119	1					
ANR	1310927	ExpressionStatement	egg -> lang . dstvar = strdup ( skipspaces ( foo ) )	610:2:15291:15335	1310119	7	True				
ANR	1310928	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( foo ) )		1310119	0		=			
ANR	1310929	MemberAccess	egg -> lang . dstvar		1310119	0					
ANR	1310930	PtrMemberAccess	egg -> lang		1310119	0					
ANR	1310931	Identifier	egg		1310119	0					
ANR	1310932	Identifier	lang		1310119	1					
ANR	1310933	Identifier	dstvar		1310119	1					
ANR	1310934	CallExpression	strdup ( skipspaces ( foo ) )		1310119	1					
ANR	1310935	Callee	strdup		1310119	0					
ANR	1310936	Identifier	strdup		1310119	0					
ANR	1310937	ArgumentList	skipspaces ( foo )		1310119	1					
ANR	1310938	Argument	skipspaces ( foo )		1310119	0					
ANR	1310939	CallExpression	skipspaces ( foo )		1310119	0					
ANR	1310940	Callee	skipspaces		1310119	0					
ANR	1310941	Identifier	skipspaces		1310119	0					
ANR	1310942	ArgumentList	foo		1310119	1					
ANR	1310943	Argument	foo		1310119	0					
ANR	1310944	Identifier	foo		1310119	0					
ANR	1310945	ExpressionStatement	"rcc_pushstr ( egg , str , mustfilter )"	611:2:15339:15373	1310119	8	True				
ANR	1310946	CallExpression	"rcc_pushstr ( egg , str , mustfilter )"		1310119	0					
ANR	1310947	Callee	rcc_pushstr		1310119	0					
ANR	1310948	Identifier	rcc_pushstr		1310119	0					
ANR	1310949	ArgumentList	egg		1310119	1					
ANR	1310950	Argument	egg		1310119	0					
ANR	1310951	Identifier	egg		1310119	0					
ANR	1310952	Argument	str		1310119	1					
ANR	1310953	Identifier	str		1310119	0					
ANR	1310954	Argument	mustfilter		1310119	2					
ANR	1310955	Identifier	mustfilter		1310119	0					
ANR	1310956	ExpressionStatement	"ret = r_egg_mkvar ( egg , out , foo , 0 )"	612:2:15377:15413	1310119	9	True				
ANR	1310957	AssignmentExpression	"ret = r_egg_mkvar ( egg , out , foo , 0 )"		1310119	0		=			
ANR	1310958	Identifier	ret		1310119	0					
ANR	1310959	CallExpression	"r_egg_mkvar ( egg , out , foo , 0 )"		1310119	1					
ANR	1310960	Callee	r_egg_mkvar		1310119	0					
ANR	1310961	Identifier	r_egg_mkvar		1310119	0					
ANR	1310962	ArgumentList	egg		1310119	1					
ANR	1310963	Argument	egg		1310119	0					
ANR	1310964	Identifier	egg		1310119	0					
ANR	1310965	Argument	out		1310119	1					
ANR	1310966	Identifier	out		1310119	0					
ANR	1310967	Argument	foo		1310119	2					
ANR	1310968	Identifier	foo		1310119	0					
ANR	1310969	Argument	0		1310119	3					
ANR	1310970	PrimaryExpression	0		1310119	0					
ANR	1310971	ExpressionStatement	free ( oldstr )	613:2:15417:15430	1310119	10	True				
ANR	1310972	CallExpression	free ( oldstr )		1310119	0					
ANR	1310973	Callee	free		1310119	0					
ANR	1310974	Identifier	free		1310119	0					
ANR	1310975	ArgumentList	oldstr		1310119	1					
ANR	1310976	Argument	oldstr		1310119	0					
ANR	1310977	Identifier	oldstr		1310119	0					
ANR	1310978	ReturnStatement	return ret ;	615:1:15436:15446	1310119	8	True				
ANR	1310979	Identifier	ret		1310119	0					
ANR	1310980	ReturnType	R_API char *		1310119	1					
ANR	1310981	Identifier	r_egg_mkvar		1310119	2					
ANR	1310982	ParameterList	"REgg * egg , char * out , const char * _str , int delta"		1310119	3					
ANR	1310983	Parameter	REgg * egg	522:24:12314:12322	1310119	0	True				
ANR	1310984	ParameterType	REgg *		1310119	0					
ANR	1310985	Identifier	egg		1310119	1					
ANR	1310986	Parameter	char * out	522:35:12325:12333	1310119	1	True				
ANR	1310987	ParameterType	char *		1310119	0					
ANR	1310988	Identifier	out		1310119	1					
ANR	1310989	Parameter	const char * _str	522:46:12336:12351	1310119	2	True				
ANR	1310990	ParameterType	const char *		1310119	0					
ANR	1310991	Identifier	_str		1310119	1					
ANR	1310992	Parameter	int delta	522:64:12354:12362	1310119	3	True				
ANR	1310993	ParameterType	int		1310119	0					
ANR	1310994	Identifier	delta		1310119	1					
ANR	1310995	CFGEntryNode	ENTRY		1310119		True				
ANR	1310996	CFGExitNode	EXIT		1310119		True				
ANR	1310997	Symbol	egg		1310119						
ANR	1310998	Symbol	delta		1310119						
ANR	1310999	Symbol	strchr		1310119						
ANR	1311000	Symbol	* egg -> lang		1310119						
ANR	1311001	Symbol	strncmp		1310119						
ANR	1311002	Symbol	egg -> lang . syscalls		1310119						
ANR	1311003	Symbol	strlen		1310119						
ANR	1311004	Symbol	len		1310119						
ANR	1311005	Symbol	egg -> lang . varxs		1310119						
ANR	1311006	Symbol	qi		1310119						
ANR	1311007	Symbol	egg -> lang . stackfixed		1310119						
ANR	1311008	Symbol	egg -> lang . syscalls [ i ] . name		1310119						
ANR	1311009	Symbol	egg -> lang . stackframe		1310119						
ANR	1311010	Symbol	ret		1310119						
ANR	1311011	Symbol	strcmp		1310119						
ANR	1311012	Symbol	r_egg_mkvar		1310119						
ANR	1311013	Symbol	oldstr		1310119						
ANR	1311014	Symbol	NULL		1310119						
ANR	1311015	Symbol	egg -> lang . nargs		1310119						
ANR	1311016	Symbol	egg -> lang . callname		1310119						
ANR	1311017	Symbol	egg -> lang . attsyntax		1310119						
ANR	1311018	Symbol	skipspaces		1310119						
ANR	1311019	Symbol	str		1310119						
ANR	1311020	Symbol	* egg -> lang . syscalls		1310119						
ANR	1311021	Symbol	e -> retvar		1310119						
ANR	1311022	Symbol	e -> size		1310119						
ANR	1311023	Symbol	egg -> lang . syscalls [ i ] . arg		1310119						
ANR	1311024	Symbol	idx		1310119						
ANR	1311025	Symbol	foo		1310119						
ANR	1311026	Symbol	e -> get_ar		1310119						
ANR	1311027	Symbol	egg -> lang . dstvar		1310119						
ANR	1311028	Symbol	egg -> lang		1310119						
ANR	1311029	Symbol	egg -> remit		1310119						
ANR	1311030	Symbol	out		1310119						
ANR	1311031	Symbol	r_num_math		1310119						
ANR	1311032	Symbol	mustfilter		1310119						
ANR	1311033	Symbol	* egg		1310119						
ANR	1311034	Symbol	e -> regs		1310119						
ANR	1311035	Symbol	egg -> lang . varsize		1310119						
ANR	1311036	Symbol	* * egg		1310119						
ANR	1311037	Symbol	* str		1310119						
ANR	1311038	Symbol	_str		1310119						
ANR	1311039	Symbol	atoi		1310119						
ANR	1311040	Symbol	e		1310119						
ANR	1311041	Symbol	i		1310119						
ANR	1311042	Symbol	* e		1310119						
ANR	1311043	Symbol	q		1310119						
ANR	1311044	Symbol	* i		1310119						
ANR	1311045	Symbol	egg -> lang . nsyscalls		1310119						
ANR	1311046	Symbol	strdup		1310119						
ANR	1311047	Symbol	* q		1310119						
ANR	1311048	Symbol	* len		1310119						
ANR	1311049	Function	rcc_fun	618:0:15451:18382							
ANR	1311050	FunctionDef	"rcc_fun (REgg * egg , const char * str)"		1311049	0					
ANR	1311051	CompoundStatement		618:48:15499:18382	1311049	0					
ANR	1311052	IdentifierDeclStatement	"char * ptr , * ptr2 ;"	619:1:15502:15518	1311049	0	True				
ANR	1311053	IdentifierDecl	* ptr		1311049	0					
ANR	1311054	IdentifierDeclType	char *		1311049	0					
ANR	1311055	Identifier	ptr		1311049	1					
ANR	1311056	IdentifierDecl	* ptr2		1311049	1					
ANR	1311057	IdentifierDeclType	char *		1311049	0					
ANR	1311058	Identifier	ptr2		1311049	1					
ANR	1311059	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	620:1:15521:15545	1311049	1	True				
ANR	1311060	IdentifierDecl	* e = egg -> remit		1311049	0					
ANR	1311061	IdentifierDeclType	REggEmit *		1311049	0					
ANR	1311062	Identifier	e		1311049	1					
ANR	1311063	AssignmentExpression	* e = egg -> remit		1311049	2		=			
ANR	1311064	Identifier	e		1311049	0					
ANR	1311065	PtrMemberAccess	egg -> remit		1311049	1					
ANR	1311066	Identifier	egg		1311049	0					
ANR	1311067	Identifier	remit		1311049	1					
ANR	1311068	ExpressionStatement	str = skipspaces ( str )	621:1:15548:15570	1311049	2	True				
ANR	1311069	AssignmentExpression	str = skipspaces ( str )		1311049	0		=			
ANR	1311070	Identifier	str		1311049	0					
ANR	1311071	CallExpression	skipspaces ( str )		1311049	1					
ANR	1311072	Callee	skipspaces		1311049	0					
ANR	1311073	Identifier	skipspaces		1311049	0					
ANR	1311074	ArgumentList	str		1311049	1					
ANR	1311075	Argument	str		1311049	0					
ANR	1311076	Identifier	str		1311049	0					
ANR	1311077	IfStatement	if ( CTX )		1311049	3					
ANR	1311078	Condition	CTX	622:5:15577:15579	1311049	0	True				
ANR	1311079	Identifier	CTX		1311049	0					
ANR	1311080	CompoundStatement		5:10:82:82	1311049	1					
ANR	1311081	ExpressionStatement	"ptr = strchr ( str , '=' )"	623:2:15586:15609	1311049	0	True				
ANR	1311082	AssignmentExpression	"ptr = strchr ( str , '=' )"		1311049	0		=			
ANR	1311083	Identifier	ptr		1311049	0					
ANR	1311084	CallExpression	"strchr ( str , '=' )"		1311049	1					
ANR	1311085	Callee	strchr		1311049	0					
ANR	1311086	Identifier	strchr		1311049	0					
ANR	1311087	ArgumentList	str		1311049	1					
ANR	1311088	Argument	str		1311049	0					
ANR	1311089	Identifier	str		1311049	0					
ANR	1311090	Argument	'='		1311049	1					
ANR	1311091	PrimaryExpression	'='		1311049	0					
ANR	1311092	IfStatement	if ( ptr )		1311049	1					
ANR	1311093	Condition	ptr	624:6:15617:15619	1311049	0	True				
ANR	1311094	Identifier	ptr		1311049	0					
ANR	1311095	CompoundStatement		7:11:122:122	1311049	1					
ANR	1311096	ExpressionStatement	* ptr ++ = '\\0'	625:3:15627:15640	1311049	0	True				
ANR	1311097	AssignmentExpression	* ptr ++ = '\\0'		1311049	0		=			
ANR	1311098	UnaryOperationExpression	* ptr ++		1311049	0					
ANR	1311099	UnaryOperator	*		1311049	0					
ANR	1311100	PostIncDecOperationExpression	ptr ++		1311049	1					
ANR	1311101	Identifier	ptr		1311049	0					
ANR	1311102	IncDec	++		1311049	1					
ANR	1311103	PrimaryExpression	'\\0'		1311049	1					
ANR	1311104	ExpressionStatement	free ( egg -> lang . dstvar )	626:3:15645:15668	1311049	1	True				
ANR	1311105	CallExpression	free ( egg -> lang . dstvar )		1311049	0					
ANR	1311106	Callee	free		1311049	0					
ANR	1311107	Identifier	free		1311049	0					
ANR	1311108	ArgumentList	egg -> lang . dstvar		1311049	1					
ANR	1311109	Argument	egg -> lang . dstvar		1311049	0					
ANR	1311110	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311111	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311112	Identifier	egg		1311049	0					
ANR	1311113	Identifier	lang		1311049	1					
ANR	1311114	Identifier	dstvar		1311049	1					
ANR	1311115	ExpressionStatement	egg -> lang . dstvar = strdup ( skipspaces ( str ) )	627:3:15673:15717	1311049	2	True				
ANR	1311116	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311117	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311118	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311119	Identifier	egg		1311049	0					
ANR	1311120	Identifier	lang		1311049	1					
ANR	1311121	Identifier	dstvar		1311049	1					
ANR	1311122	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311123	Callee	strdup		1311049	0					
ANR	1311124	Identifier	strdup		1311049	0					
ANR	1311125	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311126	Argument	skipspaces ( str )		1311049	0					
ANR	1311127	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311128	Callee	skipspaces		1311049	0					
ANR	1311129	Identifier	skipspaces		1311049	0					
ANR	1311130	ArgumentList	str		1311049	1					
ANR	1311131	Argument	str		1311049	0					
ANR	1311132	Identifier	str		1311049	0					
ANR	1311133	ExpressionStatement	ptr2 = ( char * ) skipspaces ( ptr )	628:3:15722:15754	1311049	3	True				
ANR	1311134	AssignmentExpression	ptr2 = ( char * ) skipspaces ( ptr )		1311049	0		=			
ANR	1311135	Identifier	ptr2		1311049	0					
ANR	1311136	CastExpression	( char * ) skipspaces ( ptr )		1311049	1					
ANR	1311137	CastTarget	char *		1311049	0					
ANR	1311138	CallExpression	skipspaces ( ptr )		1311049	1					
ANR	1311139	Callee	skipspaces		1311049	0					
ANR	1311140	Identifier	skipspaces		1311049	0					
ANR	1311141	ArgumentList	ptr		1311049	1					
ANR	1311142	Argument	ptr		1311049	0					
ANR	1311143	Identifier	ptr		1311049	0					
ANR	1311144	IfStatement	if ( * ptr2 )		1311049	4					
ANR	1311145	Condition	* ptr2	629:7:15763:15767	1311049	0	True				
ANR	1311146	UnaryOperationExpression	* ptr2		1311049	0					
ANR	1311147	UnaryOperator	*		1311049	0					
ANR	1311148	Identifier	ptr2		1311049	1					
ANR	1311149	CompoundStatement		12:14:270:270	1311049	1					
ANR	1311150	ExpressionStatement	"rcc_set_callname ( egg , skipspaces ( ptr ) )"	630:4:15776:15816	1311049	0	True				
ANR	1311151	CallExpression	"rcc_set_callname ( egg , skipspaces ( ptr ) )"		1311049	0					
ANR	1311152	Callee	rcc_set_callname		1311049	0					
ANR	1311153	Identifier	rcc_set_callname		1311049	0					
ANR	1311154	ArgumentList	egg		1311049	1					
ANR	1311155	Argument	egg		1311049	0					
ANR	1311156	Identifier	egg		1311049	0					
ANR	1311157	Argument	skipspaces ( ptr )		1311049	1					
ANR	1311158	CallExpression	skipspaces ( ptr )		1311049	0					
ANR	1311159	Callee	skipspaces		1311049	0					
ANR	1311160	Identifier	skipspaces		1311049	0					
ANR	1311161	ArgumentList	ptr		1311049	1					
ANR	1311162	Argument	ptr		1311049	0					
ANR	1311163	Identifier	ptr		1311049	0					
ANR	1311164	ElseStatement	else		1311049	0					
ANR	1311165	CompoundStatement		15:9:332:332	1311049	0					
ANR	1311166	ExpressionStatement	str = skipspaces ( str )	633:3:15837:15859	1311049	0	True				
ANR	1311167	AssignmentExpression	str = skipspaces ( str )		1311049	0		=			
ANR	1311168	Identifier	str		1311049	0					
ANR	1311169	CallExpression	skipspaces ( str )		1311049	1					
ANR	1311170	Callee	skipspaces		1311049	0					
ANR	1311171	Identifier	skipspaces		1311049	0					
ANR	1311172	ArgumentList	str		1311049	1					
ANR	1311173	Argument	str		1311049	0					
ANR	1311174	Identifier	str		1311049	0					
ANR	1311175	ExpressionStatement	"rcc_set_callname ( egg , skipspaces ( str ) )"	634:3:15864:15904	1311049	1	True				
ANR	1311176	CallExpression	"rcc_set_callname ( egg , skipspaces ( str ) )"		1311049	0					
ANR	1311177	Callee	rcc_set_callname		1311049	0					
ANR	1311178	Identifier	rcc_set_callname		1311049	0					
ANR	1311179	ArgumentList	egg		1311049	1					
ANR	1311180	Argument	egg		1311049	0					
ANR	1311181	Identifier	egg		1311049	0					
ANR	1311182	Argument	skipspaces ( str )		1311049	1					
ANR	1311183	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311184	Callee	skipspaces		1311049	0					
ANR	1311185	Identifier	skipspaces		1311049	0					
ANR	1311186	ArgumentList	str		1311049	1					
ANR	1311187	Argument	str		1311049	0					
ANR	1311188	Identifier	str		1311049	0					
ANR	1311189	ExpressionStatement	"egg -> remit -> comment ( egg , ""rcc_fun %d (%s)"" , CTX , egg -> lang . callname )"	635:3:15909:15982	1311049	2	True				
ANR	1311190	CallExpression	"egg -> remit -> comment ( egg , ""rcc_fun %d (%s)"" , CTX , egg -> lang . callname )"		1311049	0					
ANR	1311191	Callee	egg -> remit -> comment		1311049	0					
ANR	1311192	PtrMemberAccess	egg -> remit -> comment		1311049	0					
ANR	1311193	PtrMemberAccess	egg -> remit		1311049	0					
ANR	1311194	Identifier	egg		1311049	0					
ANR	1311195	Identifier	remit		1311049	1					
ANR	1311196	Identifier	comment		1311049	1					
ANR	1311197	ArgumentList	egg		1311049	1					
ANR	1311198	Argument	egg		1311049	0					
ANR	1311199	Identifier	egg		1311049	0					
ANR	1311200	Argument	"""rcc_fun %d (%s)"""		1311049	1					
ANR	1311201	PrimaryExpression	"""rcc_fun %d (%s)"""		1311049	0					
ANR	1311202	Argument	CTX		1311049	2					
ANR	1311203	Identifier	CTX		1311049	0					
ANR	1311204	Argument	egg -> lang . callname		1311049	3					
ANR	1311205	MemberAccess	egg -> lang . callname		1311049	0					
ANR	1311206	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311207	Identifier	egg		1311049	0					
ANR	1311208	Identifier	lang		1311049	1					
ANR	1311209	Identifier	callname		1311049	1					
ANR	1311210	ElseStatement	else		1311049	0					
ANR	1311211	CompoundStatement		21:8:496:496	1311049	0					
ANR	1311212	ExpressionStatement	"ptr = strchr ( str , '@' )"	639:2:16000:16023	1311049	0	True				
ANR	1311213	AssignmentExpression	"ptr = strchr ( str , '@' )"		1311049	0		=			
ANR	1311214	Identifier	ptr		1311049	0					
ANR	1311215	CallExpression	"strchr ( str , '@' )"		1311049	1					
ANR	1311216	Callee	strchr		1311049	0					
ANR	1311217	Identifier	strchr		1311049	0					
ANR	1311218	ArgumentList	str		1311049	1					
ANR	1311219	Argument	str		1311049	0					
ANR	1311220	Identifier	str		1311049	0					
ANR	1311221	Argument	'@'		1311049	1					
ANR	1311222	PrimaryExpression	'@'		1311049	0					
ANR	1311223	IfStatement	if ( ptr )		1311049	1					
ANR	1311224	Condition	ptr	640:6:16031:16033	1311049	0	True				
ANR	1311225	Identifier	ptr		1311049	0					
ANR	1311226	CompoundStatement		23:11:536:536	1311049	1					
ANR	1311227	ExpressionStatement	* ptr ++ = '\\0'	641:3:16041:16054	1311049	0	True				
ANR	1311228	AssignmentExpression	* ptr ++ = '\\0'		1311049	0		=			
ANR	1311229	UnaryOperationExpression	* ptr ++		1311049	0					
ANR	1311230	UnaryOperator	*		1311049	0					
ANR	1311231	PostIncDecOperationExpression	ptr ++		1311049	1					
ANR	1311232	Identifier	ptr		1311049	0					
ANR	1311233	IncDec	++		1311049	1					
ANR	1311234	PrimaryExpression	'\\0'		1311049	1					
ANR	1311235	ExpressionStatement	egg -> lang . mode = NORMAL	642:3:16059:16082	1311049	1	True				
ANR	1311236	AssignmentExpression	egg -> lang . mode = NORMAL		1311049	0		=			
ANR	1311237	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311238	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311239	Identifier	egg		1311049	0					
ANR	1311240	Identifier	lang		1311049	1					
ANR	1311241	Identifier	mode		1311049	1					
ANR	1311242	Identifier	NORMAL		1311049	1					
ANR	1311243	IfStatement	"if ( strstr ( ptr , ""env"" ) )"		1311049	2					
ANR	1311244	Condition	"strstr ( ptr , ""env"" )"	643:7:16091:16109	1311049	0	True				
ANR	1311245	CallExpression	"strstr ( ptr , ""env"" )"		1311049	0					
ANR	1311246	Callee	strstr		1311049	0					
ANR	1311247	Identifier	strstr		1311049	0					
ANR	1311248	ArgumentList	ptr		1311049	1					
ANR	1311249	Argument	ptr		1311049	0					
ANR	1311250	Identifier	ptr		1311049	0					
ANR	1311251	Argument	"""env"""		1311049	1					
ANR	1311252	PrimaryExpression	"""env"""		1311049	0					
ANR	1311253	CompoundStatement		26:28:612:612	1311049	1					
ANR	1311254	ExpressionStatement	free ( egg -> lang . setenviron )	645:4:16157:16184	1311049	0	True				
ANR	1311255	CallExpression	free ( egg -> lang . setenviron )		1311049	0					
ANR	1311256	Callee	free		1311049	0					
ANR	1311257	Identifier	free		1311049	0					
ANR	1311258	ArgumentList	egg -> lang . setenviron		1311049	1					
ANR	1311259	Argument	egg -> lang . setenviron		1311049	0					
ANR	1311260	MemberAccess	egg -> lang . setenviron		1311049	0					
ANR	1311261	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311262	Identifier	egg		1311049	0					
ANR	1311263	Identifier	lang		1311049	1					
ANR	1311264	Identifier	setenviron		1311049	1					
ANR	1311265	ExpressionStatement	egg -> lang . setenviron = strdup ( skipspaces ( str ) )	646:4:16190:16238	1311049	1	True				
ANR	1311266	AssignmentExpression	egg -> lang . setenviron = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311267	MemberAccess	egg -> lang . setenviron		1311049	0					
ANR	1311268	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311269	Identifier	egg		1311049	0					
ANR	1311270	Identifier	lang		1311049	1					
ANR	1311271	Identifier	setenviron		1311049	1					
ANR	1311272	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311273	Callee	strdup		1311049	0					
ANR	1311274	Identifier	strdup		1311049	0					
ANR	1311275	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311276	Argument	skipspaces ( str )		1311049	0					
ANR	1311277	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311278	Callee	skipspaces		1311049	0					
ANR	1311279	Identifier	skipspaces		1311049	0					
ANR	1311280	ArgumentList	str		1311049	1					
ANR	1311281	Argument	str		1311049	0					
ANR	1311282	Identifier	str		1311049	0					
ANR	1311283	ExpressionStatement	egg -> lang . slurp = 0	647:4:16244:16263	1311049	2	True				
ANR	1311284	AssignmentExpression	egg -> lang . slurp = 0		1311049	0		=			
ANR	1311285	MemberAccess	egg -> lang . slurp		1311049	0					
ANR	1311286	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311287	Identifier	egg		1311049	0					
ANR	1311288	Identifier	lang		1311049	1					
ANR	1311289	Identifier	slurp		1311049	1					
ANR	1311290	PrimaryExpression	0		1311049	1					
ANR	1311291	ElseStatement	else		1311049	0					
ANR	1311292	IfStatement	"if ( strstr ( ptr , ""fastcall"" ) )"		1311049	0					
ANR	1311293	Condition	"strstr ( ptr , ""fastcall"" )"	648:14:16279:16302	1311049	0	True				
ANR	1311294	CallExpression	"strstr ( ptr , ""fastcall"" )"		1311049	0					
ANR	1311295	Callee	strstr		1311049	0					
ANR	1311296	Identifier	strstr		1311049	0					
ANR	1311297	ArgumentList	ptr		1311049	1					
ANR	1311298	Argument	ptr		1311049	0					
ANR	1311299	Identifier	ptr		1311049	0					
ANR	1311300	Argument	"""fastcall"""		1311049	1					
ANR	1311301	PrimaryExpression	"""fastcall"""		1311049	0					
ANR	1311302	CompoundStatement		31:40:805:805	1311049	1					
ANR	1311303	ElseStatement	else		1311049	0					
ANR	1311304	IfStatement	"if ( strstr ( ptr , ""syscall"" ) )"		1311049	0					
ANR	1311305	Condition	"strstr ( ptr , ""syscall"" )"	650:14:16358:16380	1311049	0	True				
ANR	1311306	CallExpression	"strstr ( ptr , ""syscall"" )"		1311049	0					
ANR	1311307	Callee	strstr		1311049	0					
ANR	1311308	Identifier	strstr		1311049	0					
ANR	1311309	ArgumentList	ptr		1311049	1					
ANR	1311310	Argument	ptr		1311049	0					
ANR	1311311	Identifier	ptr		1311049	0					
ANR	1311312	Argument	"""syscall"""		1311049	1					
ANR	1311313	PrimaryExpression	"""syscall"""		1311049	0					
ANR	1311314	CompoundStatement		33:39:883:883	1311049	1					
ANR	1311315	IfStatement	if ( * str )		1311049	0					
ANR	1311316	Condition	* str	651:8:16393:16396	1311049	0	True				
ANR	1311317	UnaryOperationExpression	* str		1311049	0					
ANR	1311318	UnaryOperator	*		1311049	0					
ANR	1311319	Identifier	str		1311049	1					
ANR	1311320	CompoundStatement		34:14:899:899	1311049	1					
ANR	1311321	ExpressionStatement	egg -> lang . mode = SYSCALL	652:5:16406:16430	1311049	0	True				
ANR	1311322	AssignmentExpression	egg -> lang . mode = SYSCALL		1311049	0		=			
ANR	1311323	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311324	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311325	Identifier	egg		1311049	0					
ANR	1311326	Identifier	lang		1311049	1					
ANR	1311327	Identifier	mode		1311049	1					
ANR	1311328	Identifier	SYSCALL		1311049	1					
ANR	1311329	ExpressionStatement	egg -> lang . dstvar = strdup ( skipspaces ( str ) )	653:5:16437:16481	1311049	1	True				
ANR	1311330	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311331	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311332	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311333	Identifier	egg		1311049	0					
ANR	1311334	Identifier	lang		1311049	1					
ANR	1311335	Identifier	dstvar		1311049	1					
ANR	1311336	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311337	Callee	strdup		1311049	0					
ANR	1311338	Identifier	strdup		1311049	0					
ANR	1311339	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311340	Argument	skipspaces ( str )		1311049	0					
ANR	1311341	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311342	Callee	skipspaces		1311049	0					
ANR	1311343	Identifier	skipspaces		1311049	0					
ANR	1311344	ArgumentList	str		1311049	1					
ANR	1311345	Argument	str		1311049	0					
ANR	1311346	Identifier	str		1311049	0					
ANR	1311347	ElseStatement	else		1311049	0					
ANR	1311348	CompoundStatement		37:11:994:994	1311049	0					
ANR	1311349	ExpressionStatement	egg -> lang . mode = INLINE	655:5:16501:16524	1311049	0	True				
ANR	1311350	AssignmentExpression	egg -> lang . mode = INLINE		1311049	0		=			
ANR	1311351	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311352	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311353	Identifier	egg		1311049	0					
ANR	1311354	Identifier	lang		1311049	1					
ANR	1311355	Identifier	mode		1311049	1					
ANR	1311356	Identifier	INLINE		1311049	1					
ANR	1311357	ExpressionStatement	free ( egg -> lang . syscallbody )	656:5:16531:16559	1311049	1	True				
ANR	1311358	CallExpression	free ( egg -> lang . syscallbody )		1311049	0					
ANR	1311359	Callee	free		1311049	0					
ANR	1311360	Identifier	free		1311049	0					
ANR	1311361	ArgumentList	egg -> lang . syscallbody		1311049	1					
ANR	1311362	Argument	egg -> lang . syscallbody		1311049	0					
ANR	1311363	MemberAccess	egg -> lang . syscallbody		1311049	0					
ANR	1311364	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311365	Identifier	egg		1311049	0					
ANR	1311366	Identifier	lang		1311049	1					
ANR	1311367	Identifier	syscallbody		1311049	1					
ANR	1311368	ExpressionStatement	egg -> lang . syscallbody = malloc ( 4096 )	657:5:16566:16603	1311049	2	True				
ANR	1311369	AssignmentExpression	egg -> lang . syscallbody = malloc ( 4096 )		1311049	0		=			
ANR	1311370	MemberAccess	egg -> lang . syscallbody		1311049	0					
ANR	1311371	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311372	Identifier	egg		1311049	0					
ANR	1311373	Identifier	lang		1311049	1					
ANR	1311374	Identifier	syscallbody		1311049	1					
ANR	1311375	CallExpression	malloc ( 4096 )		1311049	1					
ANR	1311376	Callee	malloc		1311049	0					
ANR	1311377	Identifier	malloc		1311049	0					
ANR	1311378	ArgumentList	4096		1311049	1					
ANR	1311379	Argument	4096		1311049	0					
ANR	1311380	PrimaryExpression	4096		1311049	0					
ANR	1311381	ExpressionStatement	egg -> lang . dstval = egg -> lang . syscallbody	658:5:16632:16672	1311049	3	True				
ANR	1311382	AssignmentExpression	egg -> lang . dstval = egg -> lang . syscallbody		1311049	0		=			
ANR	1311383	MemberAccess	egg -> lang . dstval		1311049	0					
ANR	1311384	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311385	Identifier	egg		1311049	0					
ANR	1311386	Identifier	lang		1311049	1					
ANR	1311387	Identifier	dstval		1311049	1					
ANR	1311388	MemberAccess	egg -> lang . syscallbody		1311049	1					
ANR	1311389	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311390	Identifier	egg		1311049	0					
ANR	1311391	Identifier	lang		1311049	1					
ANR	1311392	Identifier	syscallbody		1311049	1					
ANR	1311393	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	659:5:16679:16704	1311049	4	True				
ANR	1311394	CallExpression	R_FREE ( egg -> lang . dstvar )		1311049	0					
ANR	1311395	Callee	R_FREE		1311049	0					
ANR	1311396	Identifier	R_FREE		1311049	0					
ANR	1311397	ArgumentList	egg -> lang . dstvar		1311049	1					
ANR	1311398	Argument	egg -> lang . dstvar		1311049	0					
ANR	1311399	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311400	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311401	Identifier	egg		1311049	0					
ANR	1311402	Identifier	lang		1311049	1					
ANR	1311403	Identifier	dstvar		1311049	1					
ANR	1311404	ExpressionStatement	egg -> lang . ndstval = 0	660:5:16711:16732	1311049	5	True				
ANR	1311405	AssignmentExpression	egg -> lang . ndstval = 0		1311049	0		=			
ANR	1311406	MemberAccess	egg -> lang . ndstval		1311049	0					
ANR	1311407	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311408	Identifier	egg		1311049	0					
ANR	1311409	Identifier	lang		1311049	1					
ANR	1311410	Identifier	ndstval		1311049	1					
ANR	1311411	PrimaryExpression	0		1311049	1					
ANR	1311412	ExpressionStatement	* egg -> lang . syscallbody = '\\0'	661:5:16739:16768	1311049	6	True				
ANR	1311413	AssignmentExpression	* egg -> lang . syscallbody = '\\0'		1311049	0		=			
ANR	1311414	UnaryOperationExpression	* egg -> lang . syscallbody		1311049	0					
ANR	1311415	UnaryOperator	*		1311049	0					
ANR	1311416	MemberAccess	egg -> lang . syscallbody		1311049	1					
ANR	1311417	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311418	Identifier	egg		1311049	0					
ANR	1311419	Identifier	lang		1311049	1					
ANR	1311420	Identifier	syscallbody		1311049	1					
ANR	1311421	PrimaryExpression	'\\0'		1311049	1					
ANR	1311422	ElseStatement	else		1311049	0					
ANR	1311423	IfStatement	"if ( strstr ( ptr , ""include"" ) )"		1311049	0					
ANR	1311424	Condition	"strstr ( ptr , ""include"" )"	663:14:16790:16812	1311049	0	True				
ANR	1311425	CallExpression	"strstr ( ptr , ""include"" )"		1311049	0					
ANR	1311426	Callee	strstr		1311049	0					
ANR	1311427	Identifier	strstr		1311049	0					
ANR	1311428	ArgumentList	ptr		1311049	1					
ANR	1311429	Argument	ptr		1311049	0					
ANR	1311430	Identifier	ptr		1311049	0					
ANR	1311431	Argument	"""include"""		1311049	1					
ANR	1311432	PrimaryExpression	"""include"""		1311049	0					
ANR	1311433	CompoundStatement		46:39:1315:1315	1311049	1					
ANR	1311434	ExpressionStatement	egg -> lang . mode = INCLUDE	664:4:16821:16845	1311049	0	True				
ANR	1311435	AssignmentExpression	egg -> lang . mode = INCLUDE		1311049	0		=			
ANR	1311436	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311437	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311438	Identifier	egg		1311049	0					
ANR	1311439	Identifier	lang		1311049	1					
ANR	1311440	Identifier	mode		1311049	1					
ANR	1311441	Identifier	INCLUDE		1311049	1					
ANR	1311442	ExpressionStatement	free ( egg -> lang . includefile )	665:4:16851:16879	1311049	1	True				
ANR	1311443	CallExpression	free ( egg -> lang . includefile )		1311049	0					
ANR	1311444	Callee	free		1311049	0					
ANR	1311445	Identifier	free		1311049	0					
ANR	1311446	ArgumentList	egg -> lang . includefile		1311049	1					
ANR	1311447	Argument	egg -> lang . includefile		1311049	0					
ANR	1311448	MemberAccess	egg -> lang . includefile		1311049	0					
ANR	1311449	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311450	Identifier	egg		1311049	0					
ANR	1311451	Identifier	lang		1311049	1					
ANR	1311452	Identifier	includefile		1311049	1					
ANR	1311453	ExpressionStatement	egg -> lang . includefile = strdup ( skipspaces ( str ) )	666:4:16885:16934	1311049	2	True				
ANR	1311454	AssignmentExpression	egg -> lang . includefile = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311455	MemberAccess	egg -> lang . includefile		1311049	0					
ANR	1311456	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311457	Identifier	egg		1311049	0					
ANR	1311458	Identifier	lang		1311049	1					
ANR	1311459	Identifier	includefile		1311049	1					
ANR	1311460	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311461	Callee	strdup		1311049	0					
ANR	1311462	Identifier	strdup		1311049	0					
ANR	1311463	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311464	Argument	skipspaces ( str )		1311049	0					
ANR	1311465	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311466	Callee	skipspaces		1311049	0					
ANR	1311467	Identifier	skipspaces		1311049	0					
ANR	1311468	ArgumentList	str		1311049	1					
ANR	1311469	Argument	str		1311049	0					
ANR	1311470	Identifier	str		1311049	0					
ANR	1311471	ElseStatement	else		1311049	0					
ANR	1311472	IfStatement	"if ( strstr ( ptr , ""alias"" ) )"		1311049	0					
ANR	1311473	Condition	"strstr ( ptr , ""alias"" )"	669:14:17008:17028	1311049	0	True				
ANR	1311474	CallExpression	"strstr ( ptr , ""alias"" )"		1311049	0					
ANR	1311475	Callee	strstr		1311049	0					
ANR	1311476	Identifier	strstr		1311049	0					
ANR	1311477	ArgumentList	ptr		1311049	1					
ANR	1311478	Argument	ptr		1311049	0					
ANR	1311479	Identifier	ptr		1311049	0					
ANR	1311480	Argument	"""alias"""		1311049	1					
ANR	1311481	PrimaryExpression	"""alias"""		1311049	0					
ANR	1311482	CompoundStatement		52:37:1531:1531	1311049	1					
ANR	1311483	ExpressionStatement	egg -> lang . mode = ALIAS	670:4:17037:17059	1311049	0	True				
ANR	1311484	AssignmentExpression	egg -> lang . mode = ALIAS		1311049	0		=			
ANR	1311485	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311486	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311487	Identifier	egg		1311049	0					
ANR	1311488	Identifier	lang		1311049	1					
ANR	1311489	Identifier	mode		1311049	1					
ANR	1311490	Identifier	ALIAS		1311049	1					
ANR	1311491	ExpressionStatement	ptr2 = egg -> lang . dstvar = strdup ( skipspaces ( str ) )	671:4:17065:17116	1311049	1	True				
ANR	1311492	AssignmentExpression	ptr2 = egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311493	Identifier	ptr2		1311049	0					
ANR	1311494	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	1		=			
ANR	1311495	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311496	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311497	Identifier	egg		1311049	0					
ANR	1311498	Identifier	lang		1311049	1					
ANR	1311499	Identifier	dstvar		1311049	1					
ANR	1311500	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311501	Callee	strdup		1311049	0					
ANR	1311502	Identifier	strdup		1311049	0					
ANR	1311503	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311504	Argument	skipspaces ( str )		1311049	0					
ANR	1311505	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311506	Callee	skipspaces		1311049	0					
ANR	1311507	Identifier	skipspaces		1311049	0					
ANR	1311508	ArgumentList	str		1311049	1					
ANR	1311509	Argument	str		1311049	0					
ANR	1311510	Identifier	str		1311049	0					
ANR	1311511	WhileStatement	while ( * ptr2 && ! is_space ( * ptr2 ) )		1311049	2					
ANR	1311512	Condition	* ptr2 && ! is_space ( * ptr2 )	672:11:17129:17154	1311049	0	True				
ANR	1311513	AndExpression	* ptr2 && ! is_space ( * ptr2 )		1311049	0		&&			
ANR	1311514	UnaryOperationExpression	* ptr2		1311049	0					
ANR	1311515	UnaryOperator	*		1311049	0					
ANR	1311516	Identifier	ptr2		1311049	1					
ANR	1311517	UnaryOperationExpression	! is_space ( * ptr2 )		1311049	1					
ANR	1311518	UnaryOperator	!		1311049	0					
ANR	1311519	CallExpression	is_space ( * ptr2 )		1311049	1					
ANR	1311520	Callee	is_space		1311049	0					
ANR	1311521	Identifier	is_space		1311049	0					
ANR	1311522	ArgumentList	* ptr2		1311049	1					
ANR	1311523	Argument	* ptr2		1311049	0					
ANR	1311524	UnaryOperationExpression	* ptr2		1311049	0					
ANR	1311525	UnaryOperator	*		1311049	0					
ANR	1311526	Identifier	ptr2		1311049	1					
ANR	1311527	CompoundStatement		55:39:1657:1657	1311049	1					
ANR	1311528	ExpressionStatement	ptr2 ++	673:5:17164:17170	1311049	0	True				
ANR	1311529	PostIncDecOperationExpression	ptr2 ++		1311049	0					
ANR	1311530	Identifier	ptr2		1311049	0					
ANR	1311531	IncDec	++		1311049	1					
ANR	1311532	ExpressionStatement	* ptr2 = x00	675:4:17182:17196	1311049	3	True				
ANR	1311533	AssignmentExpression	* ptr2 = x00		1311049	0		=			
ANR	1311534	UnaryOperationExpression	* ptr2		1311049	0					
ANR	1311535	UnaryOperator	*		1311049	0					
ANR	1311536	Identifier	ptr2		1311049	1					
ANR	1311537	Identifier	x00		1311049	1					
ANR	1311538	ElseStatement	else		1311049	0					
ANR	1311539	IfStatement	"if ( strstr ( ptr , ""data"" ) )"		1311049	0					
ANR	1311540	Condition	"strstr ( ptr , ""data"" )"	677:14:17266:17285	1311049	0	True				
ANR	1311541	CallExpression	"strstr ( ptr , ""data"" )"		1311049	0					
ANR	1311542	Callee	strstr		1311049	0					
ANR	1311543	Identifier	strstr		1311049	0					
ANR	1311544	ArgumentList	ptr		1311049	1					
ANR	1311545	Argument	ptr		1311049	0					
ANR	1311546	Identifier	ptr		1311049	0					
ANR	1311547	Argument	"""data"""		1311049	1					
ANR	1311548	PrimaryExpression	"""data"""		1311049	0					
ANR	1311549	CompoundStatement		60:36:1788:1788	1311049	1					
ANR	1311550	ExpressionStatement	egg -> lang . mode = DATA	678:4:17294:17315	1311049	0	True				
ANR	1311551	AssignmentExpression	egg -> lang . mode = DATA		1311049	0		=			
ANR	1311552	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311553	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311554	Identifier	egg		1311049	0					
ANR	1311555	Identifier	lang		1311049	1					
ANR	1311556	Identifier	mode		1311049	1					
ANR	1311557	Identifier	DATA		1311049	1					
ANR	1311558	ExpressionStatement	egg -> lang . ndstval = 0	679:4:17321:17342	1311049	1	True				
ANR	1311559	AssignmentExpression	egg -> lang . ndstval = 0		1311049	0		=			
ANR	1311560	MemberAccess	egg -> lang . ndstval		1311049	0					
ANR	1311561	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311562	Identifier	egg		1311049	0					
ANR	1311563	Identifier	lang		1311049	1					
ANR	1311564	Identifier	ndstval		1311049	1					
ANR	1311565	PrimaryExpression	0		1311049	1					
ANR	1311566	ExpressionStatement	egg -> lang . dstvar = strdup ( skipspaces ( str ) )	680:4:17348:17392	1311049	2	True				
ANR	1311567	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311568	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311569	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311570	Identifier	egg		1311049	0					
ANR	1311571	Identifier	lang		1311049	1					
ANR	1311572	Identifier	dstvar		1311049	1					
ANR	1311573	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311574	Callee	strdup		1311049	0					
ANR	1311575	Identifier	strdup		1311049	0					
ANR	1311576	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311577	Argument	skipspaces ( str )		1311049	0					
ANR	1311578	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311579	Callee	skipspaces		1311049	0					
ANR	1311580	Identifier	skipspaces		1311049	0					
ANR	1311581	ArgumentList	str		1311049	1					
ANR	1311582	Argument	str		1311049	0					
ANR	1311583	Identifier	str		1311049	0					
ANR	1311584	ExpressionStatement	egg -> lang . dstval = malloc ( 4096 )	681:4:17398:17430	1311049	3	True				
ANR	1311585	AssignmentExpression	egg -> lang . dstval = malloc ( 4096 )		1311049	0		=			
ANR	1311586	MemberAccess	egg -> lang . dstval		1311049	0					
ANR	1311587	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311588	Identifier	egg		1311049	0					
ANR	1311589	Identifier	lang		1311049	1					
ANR	1311590	Identifier	dstval		1311049	1					
ANR	1311591	CallExpression	malloc ( 4096 )		1311049	1					
ANR	1311592	Callee	malloc		1311049	0					
ANR	1311593	Identifier	malloc		1311049	0					
ANR	1311594	ArgumentList	4096		1311049	1					
ANR	1311595	Argument	4096		1311049	0					
ANR	1311596	PrimaryExpression	4096		1311049	0					
ANR	1311597	ElseStatement	else		1311049	0					
ANR	1311598	IfStatement	"if ( strstr ( ptr , ""naked"" ) )"		1311049	0					
ANR	1311599	Condition	"strstr ( ptr , ""naked"" )"	682:14:17446:17466	1311049	0	True				
ANR	1311600	CallExpression	"strstr ( ptr , ""naked"" )"		1311049	0					
ANR	1311601	Callee	strstr		1311049	0					
ANR	1311602	Identifier	strstr		1311049	0					
ANR	1311603	ArgumentList	ptr		1311049	1					
ANR	1311604	Argument	ptr		1311049	0					
ANR	1311605	Identifier	ptr		1311049	0					
ANR	1311606	Argument	"""naked"""		1311049	1					
ANR	1311607	PrimaryExpression	"""naked"""		1311049	0					
ANR	1311608	CompoundStatement		65:37:1969:1969	1311049	1					
ANR	1311609	ExpressionStatement	egg -> lang . mode = NAKED	683:4:17475:17497	1311049	0	True				
ANR	1311610	AssignmentExpression	egg -> lang . mode = NAKED		1311049	0		=			
ANR	1311611	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311612	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311613	Identifier	egg		1311049	0					
ANR	1311614	Identifier	lang		1311049	1					
ANR	1311615	Identifier	mode		1311049	1					
ANR	1311616	Identifier	NAKED		1311049	1					
ANR	1311617	ExpressionStatement	"r_egg_printf ( egg , ""%s:\\n"" , str )"	690:4:17661:17693	1311049	1	True				
ANR	1311618	CallExpression	"r_egg_printf ( egg , ""%s:\\n"" , str )"		1311049	0					
ANR	1311619	Callee	r_egg_printf		1311049	0					
ANR	1311620	Identifier	r_egg_printf		1311049	0					
ANR	1311621	ArgumentList	egg		1311049	1					
ANR	1311622	Argument	egg		1311049	0					
ANR	1311623	Identifier	egg		1311049	0					
ANR	1311624	Argument	"""%s:\\n"""		1311049	1					
ANR	1311625	PrimaryExpression	"""%s:\\n"""		1311049	0					
ANR	1311626	Argument	str		1311049	2					
ANR	1311627	Identifier	str		1311049	0					
ANR	1311628	ElseStatement	else		1311049	0					
ANR	1311629	IfStatement	"if ( strstr ( ptr , ""inline"" ) )"		1311049	0					
ANR	1311630	Condition	"strstr ( ptr , ""inline"" )"	691:14:17709:17730	1311049	0	True				
ANR	1311631	CallExpression	"strstr ( ptr , ""inline"" )"		1311049	0					
ANR	1311632	Callee	strstr		1311049	0					
ANR	1311633	Identifier	strstr		1311049	0					
ANR	1311634	ArgumentList	ptr		1311049	1					
ANR	1311635	Argument	ptr		1311049	0					
ANR	1311636	Identifier	ptr		1311049	0					
ANR	1311637	Argument	"""inline"""		1311049	1					
ANR	1311638	PrimaryExpression	"""inline"""		1311049	0					
ANR	1311639	CompoundStatement		74:38:2233:2233	1311049	1					
ANR	1311640	ExpressionStatement	egg -> lang . mode = INLINE	692:4:17739:17762	1311049	0	True				
ANR	1311641	AssignmentExpression	egg -> lang . mode = INLINE		1311049	0		=			
ANR	1311642	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311643	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311644	Identifier	egg		1311049	0					
ANR	1311645	Identifier	lang		1311049	1					
ANR	1311646	Identifier	mode		1311049	1					
ANR	1311647	Identifier	INLINE		1311049	1					
ANR	1311648	ExpressionStatement	free ( egg -> lang . dstvar )	693:4:17768:17791	1311049	1	True				
ANR	1311649	CallExpression	free ( egg -> lang . dstvar )		1311049	0					
ANR	1311650	Callee	free		1311049	0					
ANR	1311651	Identifier	free		1311049	0					
ANR	1311652	ArgumentList	egg -> lang . dstvar		1311049	1					
ANR	1311653	Argument	egg -> lang . dstvar		1311049	0					
ANR	1311654	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311655	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311656	Identifier	egg		1311049	0					
ANR	1311657	Identifier	lang		1311049	1					
ANR	1311658	Identifier	dstvar		1311049	1					
ANR	1311659	ExpressionStatement	egg -> lang . dstvar = strdup ( skipspaces ( str ) )	694:4:17797:17841	1311049	2	True				
ANR	1311660	AssignmentExpression	egg -> lang . dstvar = strdup ( skipspaces ( str ) )		1311049	0		=			
ANR	1311661	MemberAccess	egg -> lang . dstvar		1311049	0					
ANR	1311662	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311663	Identifier	egg		1311049	0					
ANR	1311664	Identifier	lang		1311049	1					
ANR	1311665	Identifier	dstvar		1311049	1					
ANR	1311666	CallExpression	strdup ( skipspaces ( str ) )		1311049	1					
ANR	1311667	Callee	strdup		1311049	0					
ANR	1311668	Identifier	strdup		1311049	0					
ANR	1311669	ArgumentList	skipspaces ( str )		1311049	1					
ANR	1311670	Argument	skipspaces ( str )		1311049	0					
ANR	1311671	CallExpression	skipspaces ( str )		1311049	0					
ANR	1311672	Callee	skipspaces		1311049	0					
ANR	1311673	Identifier	skipspaces		1311049	0					
ANR	1311674	ArgumentList	str		1311049	1					
ANR	1311675	Argument	str		1311049	0					
ANR	1311676	Identifier	str		1311049	0					
ANR	1311677	ExpressionStatement	egg -> lang . dstval = malloc ( 4096 )	695:4:17847:17879	1311049	3	True				
ANR	1311678	AssignmentExpression	egg -> lang . dstval = malloc ( 4096 )		1311049	0		=			
ANR	1311679	MemberAccess	egg -> lang . dstval		1311049	0					
ANR	1311680	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311681	Identifier	egg		1311049	0					
ANR	1311682	Identifier	lang		1311049	1					
ANR	1311683	Identifier	dstval		1311049	1					
ANR	1311684	CallExpression	malloc ( 4096 )		1311049	1					
ANR	1311685	Callee	malloc		1311049	0					
ANR	1311686	Identifier	malloc		1311049	0					
ANR	1311687	ArgumentList	4096		1311049	1					
ANR	1311688	Argument	4096		1311049	0					
ANR	1311689	PrimaryExpression	4096		1311049	0					
ANR	1311690	ExpressionStatement	egg -> lang . ndstval = 0	696:4:17885:17906	1311049	4	True				
ANR	1311691	AssignmentExpression	egg -> lang . ndstval = 0		1311049	0		=			
ANR	1311692	MemberAccess	egg -> lang . ndstval		1311049	0					
ANR	1311693	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311694	Identifier	egg		1311049	0					
ANR	1311695	Identifier	lang		1311049	1					
ANR	1311696	Identifier	ndstval		1311049	1					
ANR	1311697	PrimaryExpression	0		1311049	1					
ANR	1311698	ElseStatement	else		1311049	0					
ANR	1311699	CompoundStatement		80:10:2418:2418	1311049	0					
ANR	1311700	IfStatement	if ( * ptr )		1311049	0					
ANR	1311701	Condition	* ptr	699:8:17947:17950	1311049	0	True				
ANR	1311702	UnaryOperationExpression	* ptr		1311049	0					
ANR	1311703	UnaryOperator	*		1311049	0					
ANR	1311704	Identifier	ptr		1311049	1					
ANR	1311705	CompoundStatement		82:14:2453:2453	1311049	1					
ANR	1311706	ExpressionStatement	"r_egg_printf ( egg , ""\\n.%s %s\\n"" , ptr , str )"	700:5:17960:18002	1311049	0	True				
ANR	1311707	CallExpression	"r_egg_printf ( egg , ""\\n.%s %s\\n"" , ptr , str )"		1311049	0					
ANR	1311708	Callee	r_egg_printf		1311049	0					
ANR	1311709	Identifier	r_egg_printf		1311049	0					
ANR	1311710	ArgumentList	egg		1311049	1					
ANR	1311711	Argument	egg		1311049	0					
ANR	1311712	Identifier	egg		1311049	0					
ANR	1311713	Argument	"""\\n.%s %s\\n"""		1311049	1					
ANR	1311714	PrimaryExpression	"""\\n.%s %s\\n"""		1311049	0					
ANR	1311715	Argument	ptr		1311049	2					
ANR	1311716	Identifier	ptr		1311049	0					
ANR	1311717	Argument	str		1311049	3					
ANR	1311718	Identifier	str		1311049	0					
ANR	1311719	ExpressionStatement	"r_egg_printf ( egg , ""%s:\\n"" , str )"	702:4:18014:18046	1311049	1	True				
ANR	1311720	CallExpression	"r_egg_printf ( egg , ""%s:\\n"" , str )"		1311049	0					
ANR	1311721	Callee	r_egg_printf		1311049	0					
ANR	1311722	Identifier	r_egg_printf		1311049	0					
ANR	1311723	ArgumentList	egg		1311049	1					
ANR	1311724	Argument	egg		1311049	0					
ANR	1311725	Identifier	egg		1311049	0					
ANR	1311726	Argument	"""%s:\\n"""		1311049	1					
ANR	1311727	PrimaryExpression	"""%s:\\n"""		1311049	0					
ANR	1311728	Argument	str		1311049	2					
ANR	1311729	Identifier	str		1311049	0					
ANR	1311730	ElseStatement	else		1311049	0					
ANR	1311731	CompoundStatement		87:9:2562:2562	1311049	0					
ANR	1311732	IfStatement	if ( CTX > 0 )		1311049	0					
ANR	1311733	Condition	CTX > 0	706:7:18122:18128	1311049	0	True				
ANR	1311734	RelationalExpression	CTX > 0		1311049	0		>			
ANR	1311735	Identifier	CTX		1311049	0					
ANR	1311736	PrimaryExpression	0		1311049	1					
ANR	1311737	CompoundStatement		89:16:2631:2631	1311049	1					
ANR	1311738	ExpressionStatement	"eprintf ( ""LABEL %d\\n"" , CTX )"	708:4:18149:18176	1311049	0	True				
ANR	1311739	CallExpression	"eprintf ( ""LABEL %d\\n"" , CTX )"		1311049	0					
ANR	1311740	Callee	eprintf		1311049	0					
ANR	1311741	Identifier	eprintf		1311049	0					
ANR	1311742	ArgumentList	"""LABEL %d\\n"""		1311049	1					
ANR	1311743	Argument	"""LABEL %d\\n"""		1311049	0					
ANR	1311744	PrimaryExpression	"""LABEL %d\\n"""		1311049	0					
ANR	1311745	Argument	CTX		1311049	1					
ANR	1311746	Identifier	CTX		1311049	0					
ANR	1311747	ExpressionStatement	"r_egg_printf ( egg , ""\\n%s:\\n"" , str )"	709:4:18182:18216	1311049	1	True				
ANR	1311748	CallExpression	"r_egg_printf ( egg , ""\\n%s:\\n"" , str )"		1311049	0					
ANR	1311749	Callee	r_egg_printf		1311049	0					
ANR	1311750	Identifier	r_egg_printf		1311049	0					
ANR	1311751	ArgumentList	egg		1311049	1					
ANR	1311752	Argument	egg		1311049	0					
ANR	1311753	Identifier	egg		1311049	0					
ANR	1311754	Argument	"""\\n%s:\\n"""		1311049	1					
ANR	1311755	PrimaryExpression	"""\\n%s:\\n"""		1311049	0					
ANR	1311756	Argument	str		1311049	2					
ANR	1311757	Identifier	str		1311049	0					
ANR	1311758	ElseStatement	else		1311049	0					
ANR	1311759	CompoundStatement		93:10:2728:2728	1311049	0					
ANR	1311760	IfStatement	"if ( ! strcmp ( str , ""goto"" ) )"		1311049	0					
ANR	1311761	Condition	"! strcmp ( str , ""goto"" )"	711:8:18238:18258	1311049	0	True				
ANR	1311762	UnaryOperationExpression	"! strcmp ( str , ""goto"" )"		1311049	0					
ANR	1311763	UnaryOperator	!		1311049	0					
ANR	1311764	CallExpression	"strcmp ( str , ""goto"" )"		1311049	1					
ANR	1311765	Callee	strcmp		1311049	0					
ANR	1311766	Identifier	strcmp		1311049	0					
ANR	1311767	ArgumentList	str		1311049	1					
ANR	1311768	Argument	str		1311049	0					
ANR	1311769	Identifier	str		1311049	0					
ANR	1311770	Argument	"""goto"""		1311049	1					
ANR	1311771	PrimaryExpression	"""goto"""		1311049	0					
ANR	1311772	CompoundStatement		94:31:2761:2761	1311049	1					
ANR	1311773	ExpressionStatement	egg -> lang . mode = GOTO	712:5:18268:18289	1311049	0	True				
ANR	1311774	AssignmentExpression	egg -> lang . mode = GOTO		1311049	0		=			
ANR	1311775	MemberAccess	egg -> lang . mode		1311049	0					
ANR	1311776	PtrMemberAccess	egg -> lang		1311049	0					
ANR	1311777	Identifier	egg		1311049	0					
ANR	1311778	Identifier	lang		1311049	1					
ANR	1311779	Identifier	mode		1311049	1					
ANR	1311780	Identifier	GOTO		1311049	1					
ANR	1311781	ElseStatement	else		1311049	0					
ANR	1311782	CompoundStatement		96:11:2802:2802	1311049	0					
ANR	1311783	ExpressionStatement	"e -> call ( egg , str , 0 )"	715:5:18341:18362	1311049	0	True				
ANR	1311784	CallExpression	"e -> call ( egg , str , 0 )"		1311049	0					
ANR	1311785	Callee	e -> call		1311049	0					
ANR	1311786	PtrMemberAccess	e -> call		1311049	0					
ANR	1311787	Identifier	e		1311049	0					
ANR	1311788	Identifier	call		1311049	1					
ANR	1311789	ArgumentList	egg		1311049	1					
ANR	1311790	Argument	egg		1311049	0					
ANR	1311791	Identifier	egg		1311049	0					
ANR	1311792	Argument	str		1311049	1					
ANR	1311793	Identifier	str		1311049	0					
ANR	1311794	Argument	0		1311049	2					
ANR	1311795	PrimaryExpression	0		1311049	0					
ANR	1311796	ReturnType	static void		1311049	1					
ANR	1311797	Identifier	rcc_fun		1311049	2					
ANR	1311798	ParameterList	"REgg * egg , const char * str"		1311049	3					
ANR	1311799	Parameter	REgg * egg	618:20:15471:15479	1311049	0	True				
ANR	1311800	ParameterType	REgg *		1311049	0					
ANR	1311801	Identifier	egg		1311049	1					
ANR	1311802	Parameter	const char * str	618:31:15482:15496	1311049	1	True				
ANR	1311803	ParameterType	const char *		1311049	0					
ANR	1311804	Identifier	str		1311049	1					
ANR	1311805	CFGEntryNode	ENTRY		1311049		True				
ANR	1311806	CFGExitNode	EXIT		1311049		True				
ANR	1311807	Symbol	GOTO		1311049						
ANR	1311808	Symbol	egg		1311049						
ANR	1311809	Symbol	egg -> lang . setenviron		1311049						
ANR	1311810	Symbol	CTX		1311049						
ANR	1311811	Symbol	ALIAS		1311049						
ANR	1311812	Symbol	strchr		1311049						
ANR	1311813	Symbol	egg -> lang . dstvar		1311049						
ANR	1311814	Symbol	egg -> remit		1311049						
ANR	1311815	Symbol	egg -> lang		1311049						
ANR	1311816	Symbol	* egg -> lang		1311049						
ANR	1311817	Symbol	* egg		1311049						
ANR	1311818	Symbol	* egg -> lang . syscallbody		1311049						
ANR	1311819	Symbol	egg -> lang . ndstval		1311049						
ANR	1311820	Symbol	egg -> lang . dstval		1311049						
ANR	1311821	Symbol	* ptr		1311049						
ANR	1311822	Symbol	* ptr2		1311049						
ANR	1311823	Symbol	INLINE		1311049						
ANR	1311824	Symbol	* * egg		1311049						
ANR	1311825	Symbol	* str		1311049						
ANR	1311826	Symbol	INCLUDE		1311049						
ANR	1311827	Symbol	is_space		1311049						
ANR	1311828	Symbol	strcmp		1311049						
ANR	1311829	Symbol	malloc		1311049						
ANR	1311830	Symbol	egg -> lang . syscallbody		1311049						
ANR	1311831	Symbol	e		1311049						
ANR	1311832	Symbol	* ptr ++		1311049						
ANR	1311833	Symbol	egg -> lang . callname		1311049						
ANR	1311834	Symbol	skipspaces		1311049						
ANR	1311835	Symbol	egg -> lang . mode		1311049						
ANR	1311836	Symbol	ptr		1311049						
ANR	1311837	Symbol	str		1311049						
ANR	1311838	Symbol	ptr2		1311049						
ANR	1311839	Symbol	strstr		1311049						
ANR	1311840	Symbol	egg -> lang . slurp		1311049						
ANR	1311841	Symbol	egg -> lang . includefile		1311049						
ANR	1311842	Symbol	DATA		1311049						
ANR	1311843	Symbol	x00		1311049						
ANR	1311844	Symbol	strdup		1311049						
ANR	1311845	Symbol	NORMAL		1311049						
ANR	1311846	Symbol	SYSCALL		1311049						
ANR	1311847	Symbol	NAKED		1311049						
ANR	1311848	Function	shownested	723:0:18391:18567							
ANR	1311849	FunctionDef	shownested ()		1311848	0					
ANR	1311850	CompoundStatement		723:25:18416:18567	1311848	0					
ANR	1311851	IdentifierDeclStatement	int i ;	724:1:18419:18424	1311848	0	True				
ANR	1311852	IdentifierDecl	i		1311848	0					
ANR	1311853	IdentifierDeclType	int		1311848	0					
ANR	1311854	Identifier	i		1311848	1					
ANR	1311855	ExpressionStatement	"eprintf ( ""[[[NESTED %d]]] "" , context )"	725:1:18427:18464	1311848	1	True				
ANR	1311856	CallExpression	"eprintf ( ""[[[NESTED %d]]] "" , context )"		1311848	0					
ANR	1311857	Callee	eprintf		1311848	0					
ANR	1311858	Identifier	eprintf		1311848	0					
ANR	1311859	ArgumentList	"""[[[NESTED %d]]] """		1311848	1					
ANR	1311860	Argument	"""[[[NESTED %d]]] """		1311848	0					
ANR	1311861	PrimaryExpression	"""[[[NESTED %d]]] """		1311848	0					
ANR	1311862	Argument	context		1311848	1					
ANR	1311863	Identifier	context		1311848	0					
ANR	1311864	ForStatement	for ( i = 0 ; egg -> lang . nested [ i ] ; i ++ )		1311848	2					
ANR	1311865	ForInit	i = 0 ;	726:6:18472:18477	1311848	0	True				
ANR	1311866	AssignmentExpression	i = 0		1311848	0		=			
ANR	1311867	Identifier	i		1311848	0					
ANR	1311868	PrimaryExpression	0		1311848	1					
ANR	1311869	Condition	egg -> lang . nested [ i ]	726:13:18479:18497	1311848	1	True				
ANR	1311870	ArrayIndexing	egg -> lang . nested [ i ]		1311848	0					
ANR	1311871	MemberAccess	egg -> lang . nested		1311848	0					
ANR	1311872	PtrMemberAccess	egg -> lang		1311848	0					
ANR	1311873	Identifier	egg		1311848	0					
ANR	1311874	Identifier	lang		1311848	1					
ANR	1311875	Identifier	nested		1311848	1					
ANR	1311876	Identifier	i		1311848	1					
ANR	1311877	PostIncDecOperationExpression	i ++	726:34:18500:18502	1311848	2	True				
ANR	1311878	Identifier	i		1311848	0					
ANR	1311879	IncDec	++		1311848	1					
ANR	1311880	CompoundStatement		4:39:88:88	1311848	3					
ANR	1311881	ExpressionStatement	"eprintf ( ""%s "" , egg -> lang . nested [ i ] )"	727:2:18509:18545	1311848	0	True				
ANR	1311882	CallExpression	"eprintf ( ""%s "" , egg -> lang . nested [ i ] )"		1311848	0					
ANR	1311883	Callee	eprintf		1311848	0					
ANR	1311884	Identifier	eprintf		1311848	0					
ANR	1311885	ArgumentList	"""%s """		1311848	1					
ANR	1311886	Argument	"""%s """		1311848	0					
ANR	1311887	PrimaryExpression	"""%s """		1311848	0					
ANR	1311888	Argument	egg -> lang . nested [ i ]		1311848	1					
ANR	1311889	ArrayIndexing	egg -> lang . nested [ i ]		1311848	0					
ANR	1311890	MemberAccess	egg -> lang . nested		1311848	0					
ANR	1311891	PtrMemberAccess	egg -> lang		1311848	0					
ANR	1311892	Identifier	egg		1311848	0					
ANR	1311893	Identifier	lang		1311848	1					
ANR	1311894	Identifier	nested		1311848	1					
ANR	1311895	Identifier	i		1311848	1					
ANR	1311896	ExpressionStatement	"eprintf ( ""\\n"" )"	729:1:18551:18565	1311848	3	True				
ANR	1311897	CallExpression	"eprintf ( ""\\n"" )"		1311848	0					
ANR	1311898	Callee	eprintf		1311848	0					
ANR	1311899	Identifier	eprintf		1311848	0					
ANR	1311900	ArgumentList	"""\\n"""		1311848	1					
ANR	1311901	Argument	"""\\n"""		1311848	0					
ANR	1311902	PrimaryExpression	"""\\n"""		1311848	0					
ANR	1311903	ReturnType	static void		1311848	1					
ANR	1311904	Identifier	shownested		1311848	2					
ANR	1311905	ParameterList			1311848	3					
ANR	1311906	CFGEntryNode	ENTRY		1311848		True				
ANR	1311907	CFGExitNode	EXIT		1311848		True				
ANR	1311908	Symbol	* egg		1311848						
ANR	1311909	Symbol	* i		1311848						
ANR	1311910	Symbol	egg		1311848						
ANR	1311911	Symbol	egg -> lang . nested		1311848						
ANR	1311912	Symbol	context		1311848						
ANR	1311913	Symbol	i		1311848						
ANR	1311914	Symbol	* * egg		1311848						
ANR	1311915	Symbol	egg -> lang		1311848						
ANR	1311916	Symbol	* egg -> lang		1311848						
ANR	1311917	Symbol	* egg -> lang . nested		1311848						
ANR	1311918	Function	set_nested	733:0:18577:18953							
ANR	1311919	FunctionDef	"set_nested (REgg * egg , const char * s)"		1311918	0					
ANR	1311920	CompoundStatement		733:49:18626:18953	1311918	0					
ANR	1311921	IdentifierDeclStatement	int i = 0 ;	734:1:18629:18638	1311918	0	True				
ANR	1311922	IdentifierDecl	i = 0		1311918	0					
ANR	1311923	IdentifierDeclType	int		1311918	0					
ANR	1311924	Identifier	i		1311918	1					
ANR	1311925	AssignmentExpression	i = 0		1311918	2		=			
ANR	1311926	Identifier	i		1311918	0					
ANR	1311927	PrimaryExpression	0		1311918	1					
ANR	1311928	IfStatement	if ( CTX < 1 )		1311918	1					
ANR	1311929	Condition	CTX < 1	735:5:18645:18651	1311918	0	True				
ANR	1311930	RelationalExpression	CTX < 1		1311918	0		<			
ANR	1311931	Identifier	CTX		1311918	0					
ANR	1311932	PrimaryExpression	1		1311918	1					
ANR	1311933	CompoundStatement		3:14:27:27	1311918	1					
ANR	1311934	ReturnStatement	return ;	736:2:18658:18664	1311918	0	True				
ANR	1311935	ExpressionStatement	free ( egg -> lang . nested [ CTX ] )	738:1:18670:18698	1311918	2	True				
ANR	1311936	CallExpression	free ( egg -> lang . nested [ CTX ] )		1311918	0					
ANR	1311937	Callee	free		1311918	0					
ANR	1311938	Identifier	free		1311918	0					
ANR	1311939	ArgumentList	egg -> lang . nested [ CTX ]		1311918	1					
ANR	1311940	Argument	egg -> lang . nested [ CTX ]		1311918	0					
ANR	1311941	ArrayIndexing	egg -> lang . nested [ CTX ]		1311918	0					
ANR	1311942	MemberAccess	egg -> lang . nested		1311918	0					
ANR	1311943	PtrMemberAccess	egg -> lang		1311918	0					
ANR	1311944	Identifier	egg		1311918	0					
ANR	1311945	Identifier	lang		1311918	1					
ANR	1311946	Identifier	nested		1311918	1					
ANR	1311947	Identifier	CTX		1311918	1					
ANR	1311948	ExpressionStatement	egg -> lang . nested [ CTX ] = strdup ( s )	739:1:18701:18735	1311918	3	True				
ANR	1311949	AssignmentExpression	egg -> lang . nested [ CTX ] = strdup ( s )		1311918	0		=			
ANR	1311950	ArrayIndexing	egg -> lang . nested [ CTX ]		1311918	0					
ANR	1311951	MemberAccess	egg -> lang . nested		1311918	0					
ANR	1311952	PtrMemberAccess	egg -> lang		1311918	0					
ANR	1311953	Identifier	egg		1311918	0					
ANR	1311954	Identifier	lang		1311918	1					
ANR	1311955	Identifier	nested		1311918	1					
ANR	1311956	Identifier	CTX		1311918	1					
ANR	1311957	CallExpression	strdup ( s )		1311918	1					
ANR	1311958	Callee	strdup		1311918	0					
ANR	1311959	Identifier	strdup		1311918	0					
ANR	1311960	ArgumentList	s		1311918	1					
ANR	1311961	Argument	s		1311918	0					
ANR	1311962	Identifier	s		1311918	0					
ANR	1311963	ForStatement	for ( i = 1 ; i < 10 ; i ++ )		1311918	4					
ANR	1311964	ForInit	i = 1 ;	743:6:18851:18856	1311918	0	True				
ANR	1311965	AssignmentExpression	i = 1		1311918	0		=			
ANR	1311966	Identifier	i		1311918	0					
ANR	1311967	PrimaryExpression	1		1311918	1					
ANR	1311968	Condition	i < 10	743:13:18858:18863	1311918	1	True				
ANR	1311969	RelationalExpression	i < 10		1311918	0		<			
ANR	1311970	Identifier	i		1311918	0					
ANR	1311971	PrimaryExpression	10		1311918	1					
ANR	1311972	PostIncDecOperationExpression	i ++	743:21:18866:18868	1311918	2	True				
ANR	1311973	Identifier	i		1311918	0					
ANR	1311974	IncDec	++		1311918	1					
ANR	1311975	CompoundStatement		11:26:244:244	1311918	3					
ANR	1311976	ExpressionStatement	R_FREE ( egg -> lang . nested [ CTX + i ] )	745:2:18914:18948	1311918	0	True				
ANR	1311977	CallExpression	R_FREE ( egg -> lang . nested [ CTX + i ] )		1311918	0					
ANR	1311978	Callee	R_FREE		1311918	0					
ANR	1311979	Identifier	R_FREE		1311918	0					
ANR	1311980	ArgumentList	egg -> lang . nested [ CTX + i ]		1311918	1					
ANR	1311981	Argument	egg -> lang . nested [ CTX + i ]		1311918	0					
ANR	1311982	ArrayIndexing	egg -> lang . nested [ CTX + i ]		1311918	0					
ANR	1311983	MemberAccess	egg -> lang . nested		1311918	0					
ANR	1311984	PtrMemberAccess	egg -> lang		1311918	0					
ANR	1311985	Identifier	egg		1311918	0					
ANR	1311986	Identifier	lang		1311918	1					
ANR	1311987	Identifier	nested		1311918	1					
ANR	1311988	AdditiveExpression	CTX + i		1311918	1		+			
ANR	1311989	Identifier	CTX		1311918	0					
ANR	1311990	Identifier	i		1311918	1					
ANR	1311991	ReturnType	static void		1311918	1					
ANR	1311992	Identifier	set_nested		1311918	2					
ANR	1311993	ParameterList	"REgg * egg , const char * s"		1311918	3					
ANR	1311994	Parameter	REgg * egg	733:23:18600:18608	1311918	0	True				
ANR	1311995	ParameterType	REgg *		1311918	0					
ANR	1311996	Identifier	egg		1311918	1					
ANR	1311997	Parameter	const char * s	733:34:18611:18623	1311918	1	True				
ANR	1311998	ParameterType	const char *		1311918	0					
ANR	1311999	Identifier	s		1311918	1					
ANR	1312000	CFGEntryNode	ENTRY		1311918		True				
ANR	1312001	CFGExitNode	EXIT		1311918		True				
ANR	1312002	Symbol	egg		1311918						
ANR	1312003	Symbol	egg -> lang . nested		1311918						
ANR	1312004	Symbol	CTX		1311918						
ANR	1312005	Symbol	i		1311918						
ANR	1312006	Symbol	egg -> lang		1311918						
ANR	1312007	Symbol	* CTX		1311918						
ANR	1312008	Symbol	* egg -> lang		1311918						
ANR	1312009	Symbol	* egg -> lang . nested		1311918						
ANR	1312010	Symbol	* egg		1311918						
ANR	1312011	Symbol	s		1311918						
ANR	1312012	Symbol	* i		1311918						
ANR	1312013	Symbol	* * egg		1311918						
ANR	1312014	Symbol	strdup		1311918						
ANR	1312015	Function	rcc_context	749:0:18956:22707							
ANR	1312016	FunctionDef	"rcc_context (REgg * egg , int delta)"		1312015	0					
ANR	1312017	CompoundStatement		749:46:19002:22707	1312015	0					
ANR	1312018	IdentifierDeclStatement	REggEmit * emit = egg -> remit ;	750:1:19005:19032	1312015	0	True				
ANR	1312019	IdentifierDecl	* emit = egg -> remit		1312015	0					
ANR	1312020	IdentifierDeclType	REggEmit *		1312015	0					
ANR	1312021	Identifier	emit		1312015	1					
ANR	1312022	AssignmentExpression	* emit = egg -> remit		1312015	2		=			
ANR	1312023	Identifier	emit		1312015	0					
ANR	1312024	PtrMemberAccess	egg -> remit		1312015	1					
ANR	1312025	Identifier	egg		1312015	0					
ANR	1312026	Identifier	remit		1312015	1					
ANR	1312027	IdentifierDeclStatement	char str [ 64 ] ;	751:1:19035:19047	1312015	1	True				
ANR	1312028	IdentifierDecl	str [ 64 ]		1312015	0					
ANR	1312029	IdentifierDeclType	char [ 64 ]		1312015	0					
ANR	1312030	Identifier	str		1312015	1					
ANR	1312031	PrimaryExpression	64		1312015	2					
ANR	1312032	IfStatement	if ( CTX > 31 || CTX < 0 )		1312015	2					
ANR	1312033	Condition	CTX > 31 || CTX < 0	753:5:19055:19073	1312015	0	True				
ANR	1312034	OrExpression	CTX > 31 || CTX < 0		1312015	0		||			
ANR	1312035	RelationalExpression	CTX > 31		1312015	0		>			
ANR	1312036	Identifier	CTX		1312015	0					
ANR	1312037	PrimaryExpression	31		1312015	1					
ANR	1312038	RelationalExpression	CTX < 0		1312015	1		<			
ANR	1312039	Identifier	CTX		1312015	0					
ANR	1312040	PrimaryExpression	0		1312015	1					
ANR	1312041	CompoundStatement		5:26:73:73	1312015	1					
ANR	1312042	ReturnStatement	return ;	754:2:19080:19086	1312015	0	True				
ANR	1312043	IfStatement	if ( delta > 0 )		1312015	3					
ANR	1312044	Condition	delta > 0	757:5:19097:19105	1312015	0	True				
ANR	1312045	RelationalExpression	delta > 0		1312015	0		>			
ANR	1312046	Identifier	delta		1312015	0					
ANR	1312047	PrimaryExpression	0		1312015	1					
ANR	1312048	CompoundStatement		9:16:105:105	1312015	1					
ANR	1312049	ExpressionStatement	egg -> lang . nestedi [ CTX ] ++	758:2:19112:19136	1312015	0	True				
ANR	1312050	PostIncDecOperationExpression	egg -> lang . nestedi [ CTX ] ++		1312015	0					
ANR	1312051	ArrayIndexing	egg -> lang . nestedi [ CTX ]		1312015	0					
ANR	1312052	MemberAccess	egg -> lang . nestedi		1312015	0					
ANR	1312053	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312054	Identifier	egg		1312015	0					
ANR	1312055	Identifier	lang		1312015	1					
ANR	1312056	Identifier	nestedi		1312015	1					
ANR	1312057	Identifier	CTX		1312015	1					
ANR	1312058	IncDec	++		1312015	1					
ANR	1312059	ExpressionStatement	R_FREE ( egg -> lang . nested_callname [ CTX ] )	759:2:19140:19179	1312015	1	True				
ANR	1312060	CallExpression	R_FREE ( egg -> lang . nested_callname [ CTX ] )		1312015	0					
ANR	1312061	Callee	R_FREE		1312015	0					
ANR	1312062	Identifier	R_FREE		1312015	0					
ANR	1312063	ArgumentList	egg -> lang . nested_callname [ CTX ]		1312015	1					
ANR	1312064	Argument	egg -> lang . nested_callname [ CTX ]		1312015	0					
ANR	1312065	ArrayIndexing	egg -> lang . nested_callname [ CTX ]		1312015	0					
ANR	1312066	MemberAccess	egg -> lang . nested_callname		1312015	0					
ANR	1312067	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312068	Identifier	egg		1312015	0					
ANR	1312069	Identifier	lang		1312015	1					
ANR	1312070	Identifier	nested_callname		1312015	1					
ANR	1312071	Identifier	CTX		1312015	1					
ANR	1312072	IfStatement	if ( egg -> lang . callname )		1312015	2					
ANR	1312073	Condition	egg -> lang . callname	760:6:19187:19204	1312015	0	True				
ANR	1312074	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312075	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312076	Identifier	egg		1312015	0					
ANR	1312077	Identifier	lang		1312015	1					
ANR	1312078	Identifier	callname		1312015	1					
ANR	1312079	CompoundStatement		12:26:204:204	1312015	1					
ANR	1312080	ExpressionStatement	egg -> lang . nested_callname [ CTX ] = strdup ( egg -> lang . callname )	761:3:19212:19272	1312015	0	True				
ANR	1312081	AssignmentExpression	egg -> lang . nested_callname [ CTX ] = strdup ( egg -> lang . callname )		1312015	0		=			
ANR	1312082	ArrayIndexing	egg -> lang . nested_callname [ CTX ]		1312015	0					
ANR	1312083	MemberAccess	egg -> lang . nested_callname		1312015	0					
ANR	1312084	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312085	Identifier	egg		1312015	0					
ANR	1312086	Identifier	lang		1312015	1					
ANR	1312087	Identifier	nested_callname		1312015	1					
ANR	1312088	Identifier	CTX		1312015	1					
ANR	1312089	CallExpression	strdup ( egg -> lang . callname )		1312015	1					
ANR	1312090	Callee	strdup		1312015	0					
ANR	1312091	Identifier	strdup		1312015	0					
ANR	1312092	ArgumentList	egg -> lang . callname		1312015	1					
ANR	1312093	Argument	egg -> lang . callname		1312015	0					
ANR	1312094	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312095	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312096	Identifier	egg		1312015	0					
ANR	1312097	Identifier	lang		1312015	1					
ANR	1312098	Identifier	callname		1312015	1					
ANR	1312099	IfStatement	if ( egg -> lang . callname && CTX > 0 )		1312015	4					
ANR	1312100	Condition	egg -> lang . callname && CTX > 0	764:5:19286:19314	1312015	0	True				
ANR	1312101	AndExpression	egg -> lang . callname && CTX > 0		1312015	0		&&			
ANR	1312102	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312103	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312104	Identifier	egg		1312015	0					
ANR	1312105	Identifier	lang		1312015	1					
ANR	1312106	Identifier	callname		1312015	1					
ANR	1312107	RelationalExpression	CTX > 0		1312015	1		>			
ANR	1312108	Identifier	CTX		1312015	0					
ANR	1312109	PrimaryExpression	0		1312015	1					
ANR	1312110	CompoundStatement		16:36:314:314	1312015	1					
ANR	1312111	ExpressionStatement	CTX += delta	769:1:19473:19485	1312015	5	True				
ANR	1312112	AssignmentExpression	CTX += delta		1312015	0		+=			
ANR	1312113	Identifier	CTX		1312015	0					
ANR	1312114	Identifier	delta		1312015	1					
ANR	1312115	ExpressionStatement	egg -> lang . lastctxdelta = delta	770:1:19488:19518	1312015	6	True				
ANR	1312116	AssignmentExpression	egg -> lang . lastctxdelta = delta		1312015	0		=			
ANR	1312117	MemberAccess	egg -> lang . lastctxdelta		1312015	0					
ANR	1312118	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312119	Identifier	egg		1312015	0					
ANR	1312120	Identifier	lang		1312015	1					
ANR	1312121	Identifier	lastctxdelta		1312015	1					
ANR	1312122	Identifier	delta		1312015	1					
ANR	1312123	IfStatement	if ( CTX == 0 && delta < 0 )		1312015	7					
ANR	1312124	Condition	CTX == 0 && delta < 0	772:5:19526:19546	1312015	0	True				
ANR	1312125	AndExpression	CTX == 0 && delta < 0		1312015	0		&&			
ANR	1312126	EqualityExpression	CTX == 0		1312015	0		==			
ANR	1312127	Identifier	CTX		1312015	0					
ANR	1312128	PrimaryExpression	0		1312015	1					
ANR	1312129	RelationalExpression	delta < 0		1312015	1		<			
ANR	1312130	Identifier	delta		1312015	0					
ANR	1312131	PrimaryExpression	0		1312015	1					
ANR	1312132	CompoundStatement		24:28:546:546	1312015	1					
ANR	1312133	IfStatement	if ( egg -> lang . mode != NAKED )		1312015	0					
ANR	1312134	Condition	egg -> lang . mode != NAKED	773:6:19557:19579	1312015	0	True				
ANR	1312135	EqualityExpression	egg -> lang . mode != NAKED		1312015	0		!=			
ANR	1312136	MemberAccess	egg -> lang . mode		1312015	0					
ANR	1312137	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312138	Identifier	egg		1312015	0					
ANR	1312139	Identifier	lang		1312015	1					
ANR	1312140	Identifier	mode		1312015	1					
ANR	1312141	Identifier	NAKED		1312015	1					
ANR	1312142	CompoundStatement		25:31:579:579	1312015	1					
ANR	1312143	ExpressionStatement	"emit -> frame_end ( egg , egg -> lang . stackframe + egg -> lang . stackfixed , egg -> lang . nbrackets )"	774:3:19587:19674	1312015	0	True				
ANR	1312144	CallExpression	"emit -> frame_end ( egg , egg -> lang . stackframe + egg -> lang . stackfixed , egg -> lang . nbrackets )"		1312015	0					
ANR	1312145	Callee	emit -> frame_end		1312015	0					
ANR	1312146	PtrMemberAccess	emit -> frame_end		1312015	0					
ANR	1312147	Identifier	emit		1312015	0					
ANR	1312148	Identifier	frame_end		1312015	1					
ANR	1312149	ArgumentList	egg		1312015	1					
ANR	1312150	Argument	egg		1312015	0					
ANR	1312151	Identifier	egg		1312015	0					
ANR	1312152	Argument	egg -> lang . stackframe + egg -> lang . stackfixed		1312015	1					
ANR	1312153	AdditiveExpression	egg -> lang . stackframe + egg -> lang . stackfixed		1312015	0		+			
ANR	1312154	MemberAccess	egg -> lang . stackframe		1312015	0					
ANR	1312155	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312156	Identifier	egg		1312015	0					
ANR	1312157	Identifier	lang		1312015	1					
ANR	1312158	Identifier	stackframe		1312015	1					
ANR	1312159	MemberAccess	egg -> lang . stackfixed		1312015	1					
ANR	1312160	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312161	Identifier	egg		1312015	0					
ANR	1312162	Identifier	lang		1312015	1					
ANR	1312163	Identifier	stackfixed		1312015	1					
ANR	1312164	Argument	egg -> lang . nbrackets		1312015	2					
ANR	1312165	MemberAccess	egg -> lang . nbrackets		1312015	0					
ANR	1312166	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312167	Identifier	egg		1312015	0					
ANR	1312168	Identifier	lang		1312015	1					
ANR	1312169	Identifier	nbrackets		1312015	1					
ANR	1312170	IfStatement	if ( egg -> lang . mode == NORMAL )		1312015	1					
ANR	1312171	Condition	egg -> lang . mode == NORMAL	776:6:19686:19709	1312015	0	True				
ANR	1312172	EqualityExpression	egg -> lang . mode == NORMAL		1312015	0		==			
ANR	1312173	MemberAccess	egg -> lang . mode		1312015	0					
ANR	1312174	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312175	Identifier	egg		1312015	0					
ANR	1312176	Identifier	lang		1312015	1					
ANR	1312177	Identifier	mode		1312015	1					
ANR	1312178	Identifier	NORMAL		1312015	1					
ANR	1312179	CompoundStatement		28:32:709:709	1312015	1					
ANR	1312180	ExpressionStatement	egg -> lang . stackframe = 0	777:3:19801:19825	1312015	0	True				
ANR	1312181	AssignmentExpression	egg -> lang . stackframe = 0		1312015	0		=			
ANR	1312182	MemberAccess	egg -> lang . stackframe		1312015	0					
ANR	1312183	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312184	Identifier	egg		1312015	0					
ANR	1312185	Identifier	lang		1312015	1					
ANR	1312186	Identifier	stackframe		1312015	1					
ANR	1312187	PrimaryExpression	0		1312015	1					
ANR	1312188	ExpressionStatement	egg -> lang . mode = NORMAL	779:2:19833:19856	1312015	2	True				
ANR	1312189	AssignmentExpression	egg -> lang . mode = NORMAL		1312015	0		=			
ANR	1312190	MemberAccess	egg -> lang . mode		1312015	0					
ANR	1312191	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312192	Identifier	egg		1312015	0					
ANR	1312193	Identifier	lang		1312015	1					
ANR	1312194	Identifier	mode		1312015	1					
ANR	1312195	Identifier	NORMAL		1312015	1					
ANR	1312196	ElseStatement	else		1312015	0					
ANR	1312197	CompoundStatement		35:2:938:983	1312015	0					
ANR	1312198	IdentifierDeclStatement	const char * elm = skipspaces ( egg -> lang . elem ) ;	783:2:19941:19986	1312015	0	True				
ANR	1312199	IdentifierDecl	* elm = skipspaces ( egg -> lang . elem )		1312015	0					
ANR	1312200	IdentifierDeclType	const char *		1312015	0					
ANR	1312201	Identifier	elm		1312015	1					
ANR	1312202	AssignmentExpression	* elm = skipspaces ( egg -> lang . elem )		1312015	2		=			
ANR	1312203	Identifier	elm		1312015	0					
ANR	1312204	CallExpression	skipspaces ( egg -> lang . elem )		1312015	1					
ANR	1312205	Callee	skipspaces		1312015	0					
ANR	1312206	Identifier	skipspaces		1312015	0					
ANR	1312207	ArgumentList	egg -> lang . elem		1312015	1					
ANR	1312208	Argument	egg -> lang . elem		1312015	0					
ANR	1312209	MemberAccess	egg -> lang . elem		1312015	0					
ANR	1312210	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312211	Identifier	egg		1312015	0					
ANR	1312212	Identifier	lang		1312015	1					
ANR	1312213	Identifier	elem		1312015	1					
ANR	1312214	IfStatement	if ( delta < 0 && context > 0 )		1312015	1					
ANR	1312215	Condition	delta < 0 && context > 0	788:6:20113:20136	1312015	0	True				
ANR	1312216	AndExpression	delta < 0 && context > 0		1312015	0		&&			
ANR	1312217	RelationalExpression	delta < 0		1312015	0		<			
ANR	1312218	Identifier	delta		1312015	0					
ANR	1312219	PrimaryExpression	0		1312015	1					
ANR	1312220	RelationalExpression	context > 0		1312015	1		>			
ANR	1312221	Identifier	context		1312015	0					
ANR	1312222	PrimaryExpression	0		1312015	1					
ANR	1312223	CompoundStatement		40:32:1136:1136	1312015	1					
ANR	1312224	ExpressionStatement	"eprintf ( ""close bracket foo!!!\\n"" )"	789:3:20144:20178	1312015	0	True				
ANR	1312225	CallExpression	"eprintf ( ""close bracket foo!!!\\n"" )"		1312015	0					
ANR	1312226	Callee	eprintf		1312015	0					
ANR	1312227	Identifier	eprintf		1312015	0					
ANR	1312228	ArgumentList	"""close bracket foo!!!\\n"""		1312015	1					
ANR	1312229	Argument	"""close bracket foo!!!\\n"""		1312015	0					
ANR	1312230	PrimaryExpression	"""close bracket foo!!!\\n"""		1312015	0					
ANR	1312231	ExpressionStatement	shownested ( )	790:3:20183:20196	1312015	1	True				
ANR	1312232	CallExpression	shownested ( )		1312015	0					
ANR	1312233	Callee	shownested		1312015	0					
ANR	1312234	Identifier	shownested		1312015	0					
ANR	1312235	ArgumentList			1312015	1					
ANR	1312236	ExpressionStatement	cn = strdup ( egg -> lang . nested [ context - 1 ] )	791:3:20201:20244	1312015	2	True				
ANR	1312237	AssignmentExpression	cn = strdup ( egg -> lang . nested [ context - 1 ] )		1312015	0		=			
ANR	1312238	Identifier	cn		1312015	0					
ANR	1312239	CallExpression	strdup ( egg -> lang . nested [ context - 1 ] )		1312015	1					
ANR	1312240	Callee	strdup		1312015	0					
ANR	1312241	Identifier	strdup		1312015	0					
ANR	1312242	ArgumentList	egg -> lang . nested [ context - 1 ]		1312015	1					
ANR	1312243	Argument	egg -> lang . nested [ context - 1 ]		1312015	0					
ANR	1312244	ArrayIndexing	egg -> lang . nested [ context - 1 ]		1312015	0					
ANR	1312245	MemberAccess	egg -> lang . nested		1312015	0					
ANR	1312246	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312247	Identifier	egg		1312015	0					
ANR	1312248	Identifier	lang		1312015	1					
ANR	1312249	Identifier	nested		1312015	1					
ANR	1312250	AdditiveExpression	context - 1		1312015	1		-			
ANR	1312251	Identifier	context		1312015	0					
ANR	1312252	PrimaryExpression	1		1312015	1					
ANR	1312253	ExpressionStatement	"eprintf ( ""STATEMENT cn=(%s) idx=%d (%s)\\n"" , cn , context - 1 , egg -> lang . nested [ context - 1 ] )"	792:3:20249:20340	1312015	3	True				
ANR	1312254	CallExpression	"eprintf ( ""STATEMENT cn=(%s) idx=%d (%s)\\n"" , cn , context - 1 , egg -> lang . nested [ context - 1 ] )"		1312015	0					
ANR	1312255	Callee	eprintf		1312015	0					
ANR	1312256	Identifier	eprintf		1312015	0					
ANR	1312257	ArgumentList	"""STATEMENT cn=(%s) idx=%d (%s)\\n"""		1312015	1					
ANR	1312258	Argument	"""STATEMENT cn=(%s) idx=%d (%s)\\n"""		1312015	0					
ANR	1312259	PrimaryExpression	"""STATEMENT cn=(%s) idx=%d (%s)\\n"""		1312015	0					
ANR	1312260	Argument	cn		1312015	1					
ANR	1312261	Identifier	cn		1312015	0					
ANR	1312262	Argument	context - 1		1312015	2					
ANR	1312263	AdditiveExpression	context - 1		1312015	0		-			
ANR	1312264	Identifier	context		1312015	0					
ANR	1312265	PrimaryExpression	1		1312015	1					
ANR	1312266	Argument	egg -> lang . nested [ context - 1 ]		1312015	3					
ANR	1312267	ArrayIndexing	egg -> lang . nested [ context - 1 ]		1312015	0					
ANR	1312268	MemberAccess	egg -> lang . nested		1312015	0					
ANR	1312269	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312270	Identifier	egg		1312015	0					
ANR	1312271	Identifier	lang		1312015	1					
ANR	1312272	Identifier	nested		1312015	1					
ANR	1312273	AdditiveExpression	context - 1		1312015	1		-			
ANR	1312274	Identifier	context		1312015	0					
ANR	1312275	PrimaryExpression	1		1312015	1					
ANR	1312276	ExpressionStatement	"eprintf ( ""CNTXXXPUSH (%s)\\n"" , egg -> lang . ctxpush [ context - 1 ] )"	793:3:20345:20406	1312015	4	True				
ANR	1312277	CallExpression	"eprintf ( ""CNTXXXPUSH (%s)\\n"" , egg -> lang . ctxpush [ context - 1 ] )"		1312015	0					
ANR	1312278	Callee	eprintf		1312015	0					
ANR	1312279	Identifier	eprintf		1312015	0					
ANR	1312280	ArgumentList	"""CNTXXXPUSH (%s)\\n"""		1312015	1					
ANR	1312281	Argument	"""CNTXXXPUSH (%s)\\n"""		1312015	0					
ANR	1312282	PrimaryExpression	"""CNTXXXPUSH (%s)\\n"""		1312015	0					
ANR	1312283	Argument	egg -> lang . ctxpush [ context - 1 ]		1312015	1					
ANR	1312284	ArrayIndexing	egg -> lang . ctxpush [ context - 1 ]		1312015	0					
ANR	1312285	MemberAccess	egg -> lang . ctxpush		1312015	0					
ANR	1312286	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312287	Identifier	egg		1312015	0					
ANR	1312288	Identifier	lang		1312015	1					
ANR	1312289	Identifier	ctxpush		1312015	1					
ANR	1312290	AdditiveExpression	context - 1		1312015	1		-			
ANR	1312291	Identifier	context		1312015	0					
ANR	1312292	PrimaryExpression	1		1312015	1					
ANR	1312293	IfStatement	"if ( ! strcmp ( cn , ""while"" ) )"		1312015	5					
ANR	1312294	Condition	"! strcmp ( cn , ""while"" )"	795:7:20421:20441	1312015	0	True				
ANR	1312295	UnaryOperationExpression	"! strcmp ( cn , ""while"" )"		1312015	0					
ANR	1312296	UnaryOperator	!		1312015	0					
ANR	1312297	CallExpression	"strcmp ( cn , ""while"" )"		1312015	1					
ANR	1312298	Callee	strcmp		1312015	0					
ANR	1312299	Identifier	strcmp		1312015	0					
ANR	1312300	ArgumentList	cn		1312015	1					
ANR	1312301	Argument	cn		1312015	0					
ANR	1312302	Identifier	cn		1312015	0					
ANR	1312303	Argument	"""while"""		1312015	1					
ANR	1312304	PrimaryExpression	"""while"""		1312015	0					
ANR	1312305	CompoundStatement		47:30:1441:1441	1312015	1					
ANR	1312306	ExpressionStatement	"emit -> while_end ( egg , get_frame_label ( context - 1 ) )"	796:4:20450:20502	1312015	0	True				
ANR	1312307	CallExpression	"emit -> while_end ( egg , get_frame_label ( context - 1 ) )"		1312015	0					
ANR	1312308	Callee	emit -> while_end		1312015	0					
ANR	1312309	PtrMemberAccess	emit -> while_end		1312015	0					
ANR	1312310	Identifier	emit		1312015	0					
ANR	1312311	Identifier	while_end		1312015	1					
ANR	1312312	ArgumentList	egg		1312015	1					
ANR	1312313	Argument	egg		1312015	0					
ANR	1312314	Identifier	egg		1312015	0					
ANR	1312315	Argument	get_frame_label ( context - 1 )		1312015	1					
ANR	1312316	CallExpression	get_frame_label ( context - 1 )		1312015	0					
ANR	1312317	Callee	get_frame_label		1312015	0					
ANR	1312318	Identifier	get_frame_label		1312015	0					
ANR	1312319	ArgumentList	context - 1		1312015	1					
ANR	1312320	Argument	context - 1		1312015	0					
ANR	1312321	AdditiveExpression	context - 1		1312015	0		-			
ANR	1312322	Identifier	context		1312015	0					
ANR	1312323	PrimaryExpression	1		1312015	1					
ANR	1312324	ReturnStatement	return ;	799:4:20580:20586	1312015	1	True				
ANR	1312325	IfStatement	if ( egg -> lang . callname )		1312015	2					
ANR	1312326	Condition	egg -> lang . callname	807:6:20819:20836	1312015	0	True				
ANR	1312327	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312328	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312329	Identifier	egg		1312015	0					
ANR	1312330	Identifier	lang		1312015	1					
ANR	1312331	Identifier	callname		1312015	1					
ANR	1312332	CompoundStatement		62:3:1920:1939	1312015	1					
ANR	1312333	IdentifierDeclStatement	"char * b , * g , * e , * n ;"	810:3:20923:20942	1312015	0	True				
ANR	1312334	IdentifierDecl	* b		1312015	0					
ANR	1312335	IdentifierDeclType	char *		1312015	0					
ANR	1312336	Identifier	b		1312015	1					
ANR	1312337	IdentifierDecl	* g		1312015	1					
ANR	1312338	IdentifierDeclType	char *		1312015	0					
ANR	1312339	Identifier	g		1312015	1					
ANR	1312340	IdentifierDecl	* e		1312015	2					
ANR	1312341	IdentifierDeclType	char *		1312015	0					
ANR	1312342	Identifier	e		1312015	1					
ANR	1312343	IdentifierDecl	* n		1312015	3					
ANR	1312344	IdentifierDeclType	char *		1312015	0					
ANR	1312345	Identifier	n		1312015	1					
ANR	1312346	ExpressionStatement	"emit -> comment ( egg , ""cond frame %s (%s)"" , egg -> lang . callname , elm )"	811:3:20947:21013	1312015	1	True				
ANR	1312347	CallExpression	"emit -> comment ( egg , ""cond frame %s (%s)"" , egg -> lang . callname , elm )"		1312015	0					
ANR	1312348	Callee	emit -> comment		1312015	0					
ANR	1312349	PtrMemberAccess	emit -> comment		1312015	0					
ANR	1312350	Identifier	emit		1312015	0					
ANR	1312351	Identifier	comment		1312015	1					
ANR	1312352	ArgumentList	egg		1312015	1					
ANR	1312353	Argument	egg		1312015	0					
ANR	1312354	Identifier	egg		1312015	0					
ANR	1312355	Argument	"""cond frame %s (%s)"""		1312015	1					
ANR	1312356	PrimaryExpression	"""cond frame %s (%s)"""		1312015	0					
ANR	1312357	Argument	egg -> lang . callname		1312015	2					
ANR	1312358	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312359	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312360	Identifier	egg		1312015	0					
ANR	1312361	Identifier	lang		1312015	1					
ANR	1312362	Identifier	callname		1312015	1					
ANR	1312363	Argument	elm		1312015	3					
ANR	1312364	Identifier	elm		1312015	0					
ANR	1312365	IfStatement	if ( egg -> lang . conditionstr )		1312015	2					
ANR	1312366	Condition	egg -> lang . conditionstr	813:7:21064:21085	1312015	0	True				
ANR	1312367	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312368	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312369	Identifier	egg		1312015	0					
ANR	1312370	Identifier	lang		1312015	1					
ANR	1312371	Identifier	conditionstr		1312015	1					
ANR	1312372	CompoundStatement		65:31:2085:2085	1312015	1					
ANR	1312373	ExpressionStatement	"b = strchr ( egg -> lang . conditionstr , '<' )"	814:4:21094:21134	1312015	0	True				
ANR	1312374	AssignmentExpression	"b = strchr ( egg -> lang . conditionstr , '<' )"		1312015	0		=			
ANR	1312375	Identifier	b		1312015	0					
ANR	1312376	CallExpression	"strchr ( egg -> lang . conditionstr , '<' )"		1312015	1					
ANR	1312377	Callee	strchr		1312015	0					
ANR	1312378	Identifier	strchr		1312015	0					
ANR	1312379	ArgumentList	egg -> lang . conditionstr		1312015	1					
ANR	1312380	Argument	egg -> lang . conditionstr		1312015	0					
ANR	1312381	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312382	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312383	Identifier	egg		1312015	0					
ANR	1312384	Identifier	lang		1312015	1					
ANR	1312385	Identifier	conditionstr		1312015	1					
ANR	1312386	Argument	'<'		1312015	1					
ANR	1312387	PrimaryExpression	'<'		1312015	0					
ANR	1312388	ExpressionStatement	"g = strchr ( egg -> lang . conditionstr , '>' )"	815:4:21152:21192	1312015	1	True				
ANR	1312389	AssignmentExpression	"g = strchr ( egg -> lang . conditionstr , '>' )"		1312015	0		=			
ANR	1312390	Identifier	g		1312015	0					
ANR	1312391	CallExpression	"strchr ( egg -> lang . conditionstr , '>' )"		1312015	1					
ANR	1312392	Callee	strchr		1312015	0					
ANR	1312393	Identifier	strchr		1312015	0					
ANR	1312394	ArgumentList	egg -> lang . conditionstr		1312015	1					
ANR	1312395	Argument	egg -> lang . conditionstr		1312015	0					
ANR	1312396	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312397	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312398	Identifier	egg		1312015	0					
ANR	1312399	Identifier	lang		1312015	1					
ANR	1312400	Identifier	conditionstr		1312015	1					
ANR	1312401	Argument	'>'		1312015	1					
ANR	1312402	PrimaryExpression	'>'		1312015	0					
ANR	1312403	ExpressionStatement	"e = strchr ( egg -> lang . conditionstr , '=' )"	816:4:21212:21252	1312015	2	True				
ANR	1312404	AssignmentExpression	"e = strchr ( egg -> lang . conditionstr , '=' )"		1312015	0		=			
ANR	1312405	Identifier	e		1312015	0					
ANR	1312406	CallExpression	"strchr ( egg -> lang . conditionstr , '=' )"		1312015	1					
ANR	1312407	Callee	strchr		1312015	0					
ANR	1312408	Identifier	strchr		1312015	0					
ANR	1312409	ArgumentList	egg -> lang . conditionstr		1312015	1					
ANR	1312410	Argument	egg -> lang . conditionstr		1312015	0					
ANR	1312411	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312412	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312413	Identifier	egg		1312015	0					
ANR	1312414	Identifier	lang		1312015	1					
ANR	1312415	Identifier	conditionstr		1312015	1					
ANR	1312416	Argument	'='		1312015	1					
ANR	1312417	PrimaryExpression	'='		1312015	0					
ANR	1312418	ExpressionStatement	"n = strchr ( egg -> lang . conditionstr , '!' )"	817:4:21270:21310	1312015	3	True				
ANR	1312419	AssignmentExpression	"n = strchr ( egg -> lang . conditionstr , '!' )"		1312015	0		=			
ANR	1312420	Identifier	n		1312015	0					
ANR	1312421	CallExpression	"strchr ( egg -> lang . conditionstr , '!' )"		1312015	1					
ANR	1312422	Callee	strchr		1312015	0					
ANR	1312423	Identifier	strchr		1312015	0					
ANR	1312424	ArgumentList	egg -> lang . conditionstr		1312015	1					
ANR	1312425	Argument	egg -> lang . conditionstr		1312015	0					
ANR	1312426	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312427	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312428	Identifier	egg		1312015	0					
ANR	1312429	Identifier	lang		1312015	1					
ANR	1312430	Identifier	conditionstr		1312015	1					
ANR	1312431	Argument	'!'		1312015	1					
ANR	1312432	PrimaryExpression	'!'		1312015	0					
ANR	1312433	ElseStatement	else		1312015	0					
ANR	1312434	CompoundStatement		70:10:2332:2332	1312015	0					
ANR	1312435	ExpressionStatement	b = g = e = n = NULL	819:4:21341:21361	1312015	0	True				
ANR	1312436	AssignmentExpression	b = g = e = n = NULL		1312015	0		=			
ANR	1312437	Identifier	b		1312015	0					
ANR	1312438	AssignmentExpression	g = e = n = NULL		1312015	1		=			
ANR	1312439	Identifier	g		1312015	0					
ANR	1312440	AssignmentExpression	e = n = NULL		1312015	1		=			
ANR	1312441	Identifier	e		1312015	0					
ANR	1312442	AssignmentExpression	n = NULL		1312015	1		=			
ANR	1312443	Identifier	n		1312015	0					
ANR	1312444	Identifier	NULL		1312015	1					
ANR	1312445	IfStatement	"if ( ! strcmp ( egg -> lang . callname , ""while"" ) )"		1312015	3					
ANR	1312446	Condition	"! strcmp ( egg -> lang . callname , ""while"" )"	821:7:21375:21411	1312015	0	True				
ANR	1312447	UnaryOperationExpression	"! strcmp ( egg -> lang . callname , ""while"" )"		1312015	0					
ANR	1312448	UnaryOperator	!		1312015	0					
ANR	1312449	CallExpression	"strcmp ( egg -> lang . callname , ""while"" )"		1312015	1					
ANR	1312450	Callee	strcmp		1312015	0					
ANR	1312451	Identifier	strcmp		1312015	0					
ANR	1312452	ArgumentList	egg -> lang . callname		1312015	1					
ANR	1312453	Argument	egg -> lang . callname		1312015	0					
ANR	1312454	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312455	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312456	Identifier	egg		1312015	0					
ANR	1312457	Identifier	lang		1312015	1					
ANR	1312458	Identifier	callname		1312015	1					
ANR	1312459	Argument	"""while"""		1312015	1					
ANR	1312460	PrimaryExpression	"""while"""		1312015	0					
ANR	1312461	CompoundStatement		74:4:2417:2430	1312015	1					
ANR	1312462	IdentifierDeclStatement	char lab [ 128 ] ;	822:4:21420:21433	1312015	0	True				
ANR	1312463	IdentifierDecl	lab [ 128 ]		1312015	0					
ANR	1312464	IdentifierDeclType	char [ 128 ]		1312015	0					
ANR	1312465	Identifier	lab		1312015	1					
ANR	1312466	PrimaryExpression	128		1312015	2					
ANR	1312467	ExpressionStatement	"sprintf ( lab , ""__begin_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"	823:4:21439:21540	1312015	1	True				
ANR	1312468	CallExpression	"sprintf ( lab , ""__begin_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1312015	0					
ANR	1312469	Callee	sprintf		1312015	0					
ANR	1312470	Identifier	sprintf		1312015	0					
ANR	1312471	ArgumentList	lab		1312015	1					
ANR	1312472	Argument	lab		1312015	0					
ANR	1312473	Identifier	lab		1312015	0					
ANR	1312474	Argument	"""__begin_%d_%d_%d"""		1312015	1					
ANR	1312475	PrimaryExpression	"""__begin_%d_%d_%d"""		1312015	0					
ANR	1312476	Argument	egg -> lang . nfunctions		1312015	2					
ANR	1312477	MemberAccess	egg -> lang . nfunctions		1312015	0					
ANR	1312478	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312479	Identifier	egg		1312015	0					
ANR	1312480	Identifier	lang		1312015	1					
ANR	1312481	Identifier	nfunctions		1312015	1					
ANR	1312482	Argument	CTX - 1		1312015	3					
ANR	1312483	AdditiveExpression	CTX - 1		1312015	0		-			
ANR	1312484	Identifier	CTX		1312015	0					
ANR	1312485	PrimaryExpression	1		1312015	1					
ANR	1312486	Argument	egg -> lang . nestedi [ CTX - 1 ] - 1		1312015	4					
ANR	1312487	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1312015	0		-			
ANR	1312488	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1312015	0					
ANR	1312489	MemberAccess	egg -> lang . nestedi		1312015	0					
ANR	1312490	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312491	Identifier	egg		1312015	0					
ANR	1312492	Identifier	lang		1312015	1					
ANR	1312493	Identifier	nestedi		1312015	1					
ANR	1312494	AdditiveExpression	CTX - 1		1312015	1		-			
ANR	1312495	Identifier	CTX		1312015	0					
ANR	1312496	PrimaryExpression	1		1312015	1					
ANR	1312497	PrimaryExpression	1		1312015	1					
ANR	1312498	ExpressionStatement	"emit -> get_while_end ( egg , str , egg -> lang . ctxpush [ CTX - 1 ] , lab )"	827:4:21637:21700	1312015	2	True				
ANR	1312499	CallExpression	"emit -> get_while_end ( egg , str , egg -> lang . ctxpush [ CTX - 1 ] , lab )"		1312015	0					
ANR	1312500	Callee	emit -> get_while_end		1312015	0					
ANR	1312501	PtrMemberAccess	emit -> get_while_end		1312015	0					
ANR	1312502	Identifier	emit		1312015	0					
ANR	1312503	Identifier	get_while_end		1312015	1					
ANR	1312504	ArgumentList	egg		1312015	1					
ANR	1312505	Argument	egg		1312015	0					
ANR	1312506	Identifier	egg		1312015	0					
ANR	1312507	Argument	str		1312015	1					
ANR	1312508	Identifier	str		1312015	0					
ANR	1312509	Argument	egg -> lang . ctxpush [ CTX - 1 ]		1312015	2					
ANR	1312510	ArrayIndexing	egg -> lang . ctxpush [ CTX - 1 ]		1312015	0					
ANR	1312511	MemberAccess	egg -> lang . ctxpush		1312015	0					
ANR	1312512	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312513	Identifier	egg		1312015	0					
ANR	1312514	Identifier	lang		1312015	1					
ANR	1312515	Identifier	ctxpush		1312015	1					
ANR	1312516	AdditiveExpression	CTX - 1		1312015	1		-			
ANR	1312517	Identifier	CTX		1312015	0					
ANR	1312518	PrimaryExpression	1		1312015	1					
ANR	1312519	Argument	lab		1312015	3					
ANR	1312520	Identifier	lab		1312015	0					
ANR	1312521	IfStatement	if ( delta > 0 )		1312015	3					
ANR	1312522	Condition	delta > 0	832:8:21921:21929	1312015	0	True				
ANR	1312523	RelationalExpression	delta > 0		1312015	0		>			
ANR	1312524	Identifier	delta		1312015	0					
ANR	1312525	PrimaryExpression	0		1312015	1					
ANR	1312526	CompoundStatement		84:19:2929:2929	1312015	1					
ANR	1312527	ExpressionStatement	"set_nested ( egg , str )"	833:5:21939:21960	1312015	0	True				
ANR	1312528	CallExpression	"set_nested ( egg , str )"		1312015	0					
ANR	1312529	Callee	set_nested		1312015	0					
ANR	1312530	Identifier	set_nested		1312015	0					
ANR	1312531	ArgumentList	egg		1312015	1					
ANR	1312532	Argument	egg		1312015	0					
ANR	1312533	Identifier	egg		1312015	0					
ANR	1312534	Argument	str		1312015	1					
ANR	1312535	Identifier	str		1312015	0					
ANR	1312536	ExpressionStatement	"rcc_set_callname ( egg , ""if"" )"	835:4:21972:22000	1312015	4	True				
ANR	1312537	CallExpression	"rcc_set_callname ( egg , ""if"" )"		1312015	0					
ANR	1312538	Callee	rcc_set_callname		1312015	0					
ANR	1312539	Identifier	rcc_set_callname		1312015	0					
ANR	1312540	ArgumentList	egg		1312015	1					
ANR	1312541	Argument	egg		1312015	0					
ANR	1312542	Identifier	egg		1312015	0					
ANR	1312543	Argument	"""if"""		1312015	1					
ANR	1312544	PrimaryExpression	"""if"""		1312015	0					
ANR	1312545	IfStatement	"if ( ! strcmp ( egg -> lang . callname , ""if"" ) )"		1312015	4					
ANR	1312546	Condition	"! strcmp ( egg -> lang . callname , ""if"" )"	837:7:22033:22066	1312015	0	True				
ANR	1312547	UnaryOperationExpression	"! strcmp ( egg -> lang . callname , ""if"" )"		1312015	0					
ANR	1312548	UnaryOperator	!		1312015	0					
ANR	1312549	CallExpression	"strcmp ( egg -> lang . callname , ""if"" )"		1312015	1					
ANR	1312550	Callee	strcmp		1312015	0					
ANR	1312551	Identifier	strcmp		1312015	0					
ANR	1312552	ArgumentList	egg -> lang . callname		1312015	1					
ANR	1312553	Argument	egg -> lang . callname		1312015	0					
ANR	1312554	MemberAccess	egg -> lang . callname		1312015	0					
ANR	1312555	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312556	Identifier	egg		1312015	0					
ANR	1312557	Identifier	lang		1312015	1					
ANR	1312558	Identifier	callname		1312015	1					
ANR	1312559	Argument	"""if"""		1312015	1					
ANR	1312560	PrimaryExpression	"""if"""		1312015	0					
ANR	1312561	CompoundStatement		89:43:3066:3066	1312015	1					
ANR	1312562	ExpressionStatement	"sprintf ( str , ""__end_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"	844:4:22352:22446	1312015	0	True				
ANR	1312563	CallExpression	"sprintf ( str , ""__end_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1312015	0					
ANR	1312564	Callee	sprintf		1312015	0					
ANR	1312565	Identifier	sprintf		1312015	0					
ANR	1312566	ArgumentList	str		1312015	1					
ANR	1312567	Argument	str		1312015	0					
ANR	1312568	Identifier	str		1312015	0					
ANR	1312569	Argument	"""__end_%d_%d_%d"""		1312015	1					
ANR	1312570	PrimaryExpression	"""__end_%d_%d_%d"""		1312015	0					
ANR	1312571	Argument	egg -> lang . nfunctions		1312015	2					
ANR	1312572	MemberAccess	egg -> lang . nfunctions		1312015	0					
ANR	1312573	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312574	Identifier	egg		1312015	0					
ANR	1312575	Identifier	lang		1312015	1					
ANR	1312576	Identifier	nfunctions		1312015	1					
ANR	1312577	Argument	CTX - 1		1312015	3					
ANR	1312578	AdditiveExpression	CTX - 1		1312015	0		-			
ANR	1312579	Identifier	CTX		1312015	0					
ANR	1312580	PrimaryExpression	1		1312015	1					
ANR	1312581	Argument	egg -> lang . nestedi [ CTX - 1 ] - 1		1312015	4					
ANR	1312582	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1312015	0		-			
ANR	1312583	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1312015	0					
ANR	1312584	MemberAccess	egg -> lang . nestedi		1312015	0					
ANR	1312585	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312586	Identifier	egg		1312015	0					
ANR	1312587	Identifier	lang		1312015	1					
ANR	1312588	Identifier	nestedi		1312015	1					
ANR	1312589	AdditiveExpression	CTX - 1		1312015	1		-			
ANR	1312590	Identifier	CTX		1312015	0					
ANR	1312591	PrimaryExpression	1		1312015	1					
ANR	1312592	PrimaryExpression	1		1312015	1					
ANR	1312593	ExpressionStatement	"emit -> branch ( egg , b , g , e , n , egg -> lang . varsize , str )"	845:4:22452:22506	1312015	1	True				
ANR	1312594	CallExpression	"emit -> branch ( egg , b , g , e , n , egg -> lang . varsize , str )"		1312015	0					
ANR	1312595	Callee	emit -> branch		1312015	0					
ANR	1312596	PtrMemberAccess	emit -> branch		1312015	0					
ANR	1312597	Identifier	emit		1312015	0					
ANR	1312598	Identifier	branch		1312015	1					
ANR	1312599	ArgumentList	egg		1312015	1					
ANR	1312600	Argument	egg		1312015	0					
ANR	1312601	Identifier	egg		1312015	0					
ANR	1312602	Argument	b		1312015	1					
ANR	1312603	Identifier	b		1312015	0					
ANR	1312604	Argument	g		1312015	2					
ANR	1312605	Identifier	g		1312015	0					
ANR	1312606	Argument	e		1312015	3					
ANR	1312607	Identifier	e		1312015	0					
ANR	1312608	Argument	n		1312015	4					
ANR	1312609	Identifier	n		1312015	0					
ANR	1312610	Argument	egg -> lang . varsize		1312015	5					
ANR	1312611	MemberAccess	egg -> lang . varsize		1312015	0					
ANR	1312612	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312613	Identifier	egg		1312015	0					
ANR	1312614	Identifier	lang		1312015	1					
ANR	1312615	Identifier	varsize		1312015	1					
ANR	1312616	Argument	str		1312015	6					
ANR	1312617	Identifier	str		1312015	0					
ANR	1312618	IfStatement	if ( CTX > 0 )		1312015	2					
ANR	1312619	Condition	CTX > 0	846:8:22516:22522	1312015	0	True				
ANR	1312620	RelationalExpression	CTX > 0		1312015	0		>			
ANR	1312621	Identifier	CTX		1312015	0					
ANR	1312622	PrimaryExpression	0		1312015	1					
ANR	1312623	CompoundStatement		98:17:3522:3522	1312015	1					
ANR	1312624	ExpressionStatement	rcc_reset_callname ( egg )	849:4:22555:22579	1312015	3	True				
ANR	1312625	CallExpression	rcc_reset_callname ( egg )		1312015	0					
ANR	1312626	Callee	rcc_reset_callname		1312015	0					
ANR	1312627	Identifier	rcc_reset_callname		1312015	0					
ANR	1312628	ArgumentList	egg		1312015	1					
ANR	1312629	Argument	egg		1312015	0					
ANR	1312630	Identifier	egg		1312015	0					
ANR	1312631	ExpressionStatement	R_FREE ( egg -> lang . conditionstr )	850:4:22585:22616	1312015	4	True				
ANR	1312632	CallExpression	R_FREE ( egg -> lang . conditionstr )		1312015	0					
ANR	1312633	Callee	R_FREE		1312015	0					
ANR	1312634	Identifier	R_FREE		1312015	0					
ANR	1312635	ArgumentList	egg -> lang . conditionstr		1312015	1					
ANR	1312636	Argument	egg -> lang . conditionstr		1312015	0					
ANR	1312637	MemberAccess	egg -> lang . conditionstr		1312015	0					
ANR	1312638	PtrMemberAccess	egg -> lang		1312015	0					
ANR	1312639	Identifier	egg		1312015	0					
ANR	1312640	Identifier	lang		1312015	1					
ANR	1312641	Identifier	conditionstr		1312015	1					
ANR	1312642	ReturnType	static void		1312015	1					
ANR	1312643	Identifier	rcc_context		1312015	2					
ANR	1312644	ParameterList	"REgg * egg , int delta"		1312015	3					
ANR	1312645	Parameter	REgg * egg	749:24:18980:18988	1312015	0	True				
ANR	1312646	ParameterType	REgg *		1312015	0					
ANR	1312647	Identifier	egg		1312015	1					
ANR	1312648	Parameter	int delta	749:35:18991:18999	1312015	1	True				
ANR	1312649	ParameterType	int		1312015	0					
ANR	1312650	Identifier	delta		1312015	1					
ANR	1312651	CFGEntryNode	ENTRY		1312015		True				
ANR	1312652	CFGExitNode	EXIT		1312015		True				
ANR	1312653	Symbol	egg		1312015						
ANR	1312654	Symbol	CTX		1312015						
ANR	1312655	Symbol	egg -> lang . elem		1312015						
ANR	1312656	Symbol	egg -> lang . ctxpush		1312015						
ANR	1312657	Symbol	delta		1312015						
ANR	1312658	Symbol	strchr		1312015						
ANR	1312659	Symbol	egg -> lang . lastctxdelta		1312015						
ANR	1312660	Symbol	lab		1312015						
ANR	1312661	Symbol	egg -> remit		1312015						
ANR	1312662	Symbol	egg -> lang		1312015						
ANR	1312663	Symbol	* CTX		1312015						
ANR	1312664	Symbol	* egg -> lang		1312015						
ANR	1312665	Symbol	* egg -> lang . nested		1312015						
ANR	1312666	Symbol	* egg		1312015						
ANR	1312667	Symbol	* egg -> lang . nestedi		1312015						
ANR	1312668	Symbol	egg -> lang . varsize		1312015						
ANR	1312669	Symbol	context		1312015						
ANR	1312670	Symbol	* * egg		1312015						
ANR	1312671	Symbol	egg -> lang . stackfixed		1312015						
ANR	1312672	Symbol	egg -> lang . stackframe		1312015						
ANR	1312673	Symbol	strcmp		1312015						
ANR	1312674	Symbol	b		1312015						
ANR	1312675	Symbol	* egg -> lang . nested_callname		1312015						
ANR	1312676	Symbol	egg -> lang . nested_callname		1312015						
ANR	1312677	Symbol	NULL		1312015						
ANR	1312678	Symbol	egg -> lang . nested		1312015						
ANR	1312679	Symbol	e		1312015						
ANR	1312680	Symbol	elm		1312015						
ANR	1312681	Symbol	g		1312015						
ANR	1312682	Symbol	egg -> lang . nbrackets		1312015						
ANR	1312683	Symbol	egg -> lang . nfunctions		1312015						
ANR	1312684	Symbol	egg -> lang . callname		1312015						
ANR	1312685	Symbol	* egg -> lang . ctxpush		1312015						
ANR	1312686	Symbol	cn		1312015						
ANR	1312687	Symbol	egg -> lang . mode		1312015						
ANR	1312688	Symbol	skipspaces		1312015						
ANR	1312689	Symbol	* context		1312015						
ANR	1312690	Symbol	n		1312015						
ANR	1312691	Symbol	str		1312015						
ANR	1312692	Symbol	egg -> lang . conditionstr		1312015						
ANR	1312693	Symbol	strdup		1312015						
ANR	1312694	Symbol	emit		1312015						
ANR	1312695	Symbol	NAKED		1312015						
ANR	1312696	Symbol	NORMAL		1312015						
ANR	1312697	Symbol	egg -> lang . nestedi		1312015						
ANR	1312698	Symbol	get_frame_label		1312015						
ANR	1312699	Function	parsedatachar	856:0:22710:24394							
ANR	1312700	FunctionDef	"parsedatachar (REgg * egg , char c)"		1312699	0					
ANR	1312701	CompoundStatement		856:44:22754:24394	1312699	0					
ANR	1312702	IdentifierDeclStatement	char * str ;	857:1:22757:22766	1312699	0	True				
ANR	1312703	IdentifierDecl	* str		1312699	0					
ANR	1312704	IdentifierDeclType	char *		1312699	0					
ANR	1312705	Identifier	str		1312699	1					
ANR	1312706	IdentifierDeclStatement	"int i , j ;"	858:1:22769:22777	1312699	1	True				
ANR	1312707	IdentifierDecl	i		1312699	0					
ANR	1312708	IdentifierDeclType	int		1312699	0					
ANR	1312709	Identifier	i		1312699	1					
ANR	1312710	IdentifierDecl	j		1312699	1					
ANR	1312711	IdentifierDeclType	int		1312699	0					
ANR	1312712	Identifier	j		1312699	1					
ANR	1312713	IfStatement	if ( ! egg -> lang . dstval )		1312699	2					
ANR	1312714	Condition	! egg -> lang . dstval	860:5:22785:22801	1312699	0	True				
ANR	1312715	UnaryOperationExpression	! egg -> lang . dstval		1312699	0					
ANR	1312716	UnaryOperator	!		1312699	0					
ANR	1312717	MemberAccess	egg -> lang . dstval		1312699	1					
ANR	1312718	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312719	Identifier	egg		1312699	0					
ANR	1312720	Identifier	lang		1312699	1					
ANR	1312721	Identifier	dstval		1312699	1					
ANR	1312722	CompoundStatement		5:24:49:49	1312699	1					
ANR	1312723	ReturnStatement	return 0 ;	861:2:22808:22816	1312699	0	True				
ANR	1312724	PrimaryExpression	0		1312699	0					
ANR	1312725	IfStatement	if ( c == '{' )		1312699	3					
ANR	1312726	Condition	c == '{'	864:5:22848:22855	1312699	0	True				
ANR	1312727	EqualityExpression	c == '{'		1312699	0		==			
ANR	1312728	Identifier	c		1312699	0					
ANR	1312729	PrimaryExpression	'{'		1312699	1					
ANR	1312730	CompoundStatement		9:15:103:103	1312699	1					
ANR	1312731	ExpressionStatement	"rcc_context ( egg , 1 )"	865:2:22889:22909	1312699	0	True				
ANR	1312732	CallExpression	"rcc_context ( egg , 1 )"		1312699	0					
ANR	1312733	Callee	rcc_context		1312699	0					
ANR	1312734	Identifier	rcc_context		1312699	0					
ANR	1312735	ArgumentList	egg		1312699	1					
ANR	1312736	Argument	egg		1312699	0					
ANR	1312737	Identifier	egg		1312699	0					
ANR	1312738	Argument	1		1312699	1					
ANR	1312739	PrimaryExpression	1		1312699	0					
ANR	1312740	IfStatement	if ( ++ ( egg -> lang . inlinectr ) == 1 )		1312699	1					
ANR	1312741	Condition	++ ( egg -> lang . inlinectr ) == 1	866:6:22917:22944	1312699	0	True				
ANR	1312742	EqualityExpression	++ ( egg -> lang . inlinectr ) == 1		1312699	0		==			
ANR	1312743	UnaryExpression	++ ( egg -> lang . inlinectr )		1312699	0					
ANR	1312744	IncDec	++		1312699	0					
ANR	1312745	MemberAccess	egg -> lang . inlinectr		1312699	1					
ANR	1312746	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312747	Identifier	egg		1312699	0					
ANR	1312748	Identifier	lang		1312699	1					
ANR	1312749	Identifier	inlinectr		1312699	1					
ANR	1312750	PrimaryExpression	1		1312699	1					
ANR	1312751	CompoundStatement		11:36:192:192	1312699	1					
ANR	1312752	ReturnStatement	return egg -> lang . ndstval = 0 ;	867:3:22952:22980	1312699	0	True				
ANR	1312753	AssignmentExpression	egg -> lang . ndstval = 0		1312699	0		=			
ANR	1312754	MemberAccess	egg -> lang . ndstval		1312699	0					
ANR	1312755	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312756	Identifier	egg		1312699	0					
ANR	1312757	Identifier	lang		1312699	1					
ANR	1312758	Identifier	ndstval		1312699	1					
ANR	1312759	PrimaryExpression	0		1312699	1					
ANR	1312760	ElseStatement	else		1312699	0					
ANR	1312761	IfStatement	if ( egg -> lang . inlinectr == 0 )		1312699	0					
ANR	1312762	Condition	egg -> lang . inlinectr == 0	869:12:22998:23021	1312699	0	True				
ANR	1312763	EqualityExpression	egg -> lang . inlinectr == 0		1312699	0		==			
ANR	1312764	MemberAccess	egg -> lang . inlinectr		1312699	0					
ANR	1312765	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312766	Identifier	egg		1312699	0					
ANR	1312767	Identifier	lang		1312699	1					
ANR	1312768	Identifier	inlinectr		1312699	1					
ANR	1312769	PrimaryExpression	0		1312699	1					
ANR	1312770	CompoundStatement		14:38:269:269	1312699	1					
ANR	1312771	IfStatement	if ( c == ')' )		1312699	0					
ANR	1312772	Condition	c == ')'	871:6:23096:23103	1312699	0	True				
ANR	1312773	EqualityExpression	c == ')'		1312699	0		==			
ANR	1312774	Identifier	c		1312699	0					
ANR	1312775	PrimaryExpression	')'		1312699	1					
ANR	1312776	CompoundStatement		16:16:351:351	1312699	1					
ANR	1312777	ExpressionStatement	egg -> lang . stackframe = atoi ( egg -> lang . dstval )	872:3:23111:23157	1312699	0	True				
ANR	1312778	AssignmentExpression	egg -> lang . stackframe = atoi ( egg -> lang . dstval )		1312699	0		=			
ANR	1312779	MemberAccess	egg -> lang . stackframe		1312699	0					
ANR	1312780	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312781	Identifier	egg		1312699	0					
ANR	1312782	Identifier	lang		1312699	1					
ANR	1312783	Identifier	stackframe		1312699	1					
ANR	1312784	CallExpression	atoi ( egg -> lang . dstval )		1312699	1					
ANR	1312785	Callee	atoi		1312699	0					
ANR	1312786	Identifier	atoi		1312699	0					
ANR	1312787	ArgumentList	egg -> lang . dstval		1312699	1					
ANR	1312788	Argument	egg -> lang . dstval		1312699	0					
ANR	1312789	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1312790	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312791	Identifier	egg		1312699	0					
ANR	1312792	Identifier	lang		1312699	1					
ANR	1312793	Identifier	dstval		1312699	1					
ANR	1312794	ExpressionStatement	egg -> lang . ndstval = 0	873:3:23162:23183	1312699	1	True				
ANR	1312795	AssignmentExpression	egg -> lang . ndstval = 0		1312699	0		=			
ANR	1312796	MemberAccess	egg -> lang . ndstval		1312699	0					
ANR	1312797	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312798	Identifier	egg		1312699	0					
ANR	1312799	Identifier	lang		1312699	1					
ANR	1312800	Identifier	ndstval		1312699	1					
ANR	1312801	PrimaryExpression	0		1312699	1					
ANR	1312802	ElseStatement	else		1312699	0					
ANR	1312803	CompoundStatement		19:9:439:439	1312699	0					
ANR	1312804	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c	875:3:23199:23240	1312699	0	True				
ANR	1312805	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c		1312699	0		=			
ANR	1312806	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ++ ]		1312699	0					
ANR	1312807	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1312808	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312809	Identifier	egg		1312699	0					
ANR	1312810	Identifier	lang		1312699	1					
ANR	1312811	Identifier	dstval		1312699	1					
ANR	1312812	PostIncDecOperationExpression	egg -> lang . ndstval ++		1312699	1					
ANR	1312813	MemberAccess	egg -> lang . ndstval		1312699	0					
ANR	1312814	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312815	Identifier	egg		1312699	0					
ANR	1312816	Identifier	lang		1312699	1					
ANR	1312817	Identifier	ndstval		1312699	1					
ANR	1312818	IncDec	++		1312699	1					
ANR	1312819	Identifier	c		1312699	1					
ANR	1312820	ReturnStatement	return 0 ;	877:2:23248:23256	1312699	1	True				
ANR	1312821	PrimaryExpression	0		1312699	0					
ANR	1312822	IfStatement	if ( c == '}' )		1312699	4					
ANR	1312823	Condition	c == '}'	880:5:23286:23293	1312699	0	True				
ANR	1312824	EqualityExpression	c == '}'		1312699	0		==			
ANR	1312825	Identifier	c		1312699	0					
ANR	1312826	PrimaryExpression	'}'		1312699	1					
ANR	1312827	CompoundStatement		25:15:541:541	1312699	1					
ANR	1312828	IfStatement	if ( CTX < 2 )		1312699	0					
ANR	1312829	Condition	CTX < 2	881:6:23331:23337	1312699	0	True				
ANR	1312830	RelationalExpression	CTX < 2		1312699	0		<			
ANR	1312831	Identifier	CTX		1312699	0					
ANR	1312832	PrimaryExpression	2		1312699	1					
ANR	1312833	CompoundStatement		26:15:585:585	1312699	1					
ANR	1312834	ExpressionStatement	egg -> lang . inlinectr = 0	882:3:23345:23368	1312699	0	True				
ANR	1312835	AssignmentExpression	egg -> lang . inlinectr = 0		1312699	0		=			
ANR	1312836	MemberAccess	egg -> lang . inlinectr		1312699	0					
ANR	1312837	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312838	Identifier	egg		1312699	0					
ANR	1312839	Identifier	lang		1312699	1					
ANR	1312840	Identifier	inlinectr		1312699	1					
ANR	1312841	PrimaryExpression	0		1312699	1					
ANR	1312842	ExpressionStatement	"rcc_context ( egg , - 1 )"	883:3:23373:23394	1312699	1	True				
ANR	1312843	CallExpression	"rcc_context ( egg , - 1 )"		1312699	0					
ANR	1312844	Callee	rcc_context		1312699	0					
ANR	1312845	Identifier	rcc_context		1312699	0					
ANR	1312846	ArgumentList	egg		1312699	1					
ANR	1312847	Argument	egg		1312699	0					
ANR	1312848	Identifier	egg		1312699	0					
ANR	1312849	Argument	- 1		1312699	1					
ANR	1312850	UnaryOperationExpression	- 1		1312699	0					
ANR	1312851	UnaryOperator	-		1312699	0					
ANR	1312852	PrimaryExpression	1		1312699	1					
ANR	1312853	ExpressionStatement	egg -> lang . slurp = 0	884:3:23399:23418	1312699	2	True				
ANR	1312854	AssignmentExpression	egg -> lang . slurp = 0		1312699	0		=			
ANR	1312855	MemberAccess	egg -> lang . slurp		1312699	0					
ANR	1312856	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312857	Identifier	egg		1312699	0					
ANR	1312858	Identifier	lang		1312699	1					
ANR	1312859	Identifier	slurp		1312699	1					
ANR	1312860	PrimaryExpression	0		1312699	1					
ANR	1312861	ExpressionStatement	egg -> lang . mode = NORMAL	885:3:23423:23446	1312699	3	True				
ANR	1312862	AssignmentExpression	egg -> lang . mode = NORMAL		1312699	0		=			
ANR	1312863	MemberAccess	egg -> lang . mode		1312699	0					
ANR	1312864	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312865	Identifier	egg		1312699	0					
ANR	1312866	Identifier	lang		1312699	1					
ANR	1312867	Identifier	mode		1312699	1					
ANR	1312868	Identifier	NORMAL		1312699	1					
ANR	1312869	IfStatement	if ( egg -> lang . dstval && egg -> lang . dstvar )		1312699	4					
ANR	1312870	Condition	egg -> lang . dstval && egg -> lang . dstvar	887:7:23473:23508	1312699	0	True				
ANR	1312871	AndExpression	egg -> lang . dstval && egg -> lang . dstvar		1312699	0		&&			
ANR	1312872	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1312873	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312874	Identifier	egg		1312699	0					
ANR	1312875	Identifier	lang		1312699	1					
ANR	1312876	Identifier	dstval		1312699	1					
ANR	1312877	MemberAccess	egg -> lang . dstvar		1312699	1					
ANR	1312878	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312879	Identifier	egg		1312699	0					
ANR	1312880	Identifier	lang		1312699	1					
ANR	1312881	Identifier	dstvar		1312699	1					
ANR	1312882	CompoundStatement		32:45:756:756	1312699	1					
ANR	1312883	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ] = '\\0'	888:4:23517:23559	1312699	0	True				
ANR	1312884	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ] = '\\0'		1312699	0		=			
ANR	1312885	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ]		1312699	0					
ANR	1312886	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1312887	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312888	Identifier	egg		1312699	0					
ANR	1312889	Identifier	lang		1312699	1					
ANR	1312890	Identifier	dstval		1312699	1					
ANR	1312891	MemberAccess	egg -> lang . ndstval		1312699	1					
ANR	1312892	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312893	Identifier	egg		1312699	0					
ANR	1312894	Identifier	lang		1312699	1					
ANR	1312895	Identifier	ndstval		1312699	1					
ANR	1312896	PrimaryExpression	'\\0'		1312699	1					
ANR	1312897	ExpressionStatement	"egg -> remit -> comment ( egg , ""data (%s)(%s)size=(%d)\\n"" , egg -> lang . dstvar , egg -> lang . dstval , egg -> lang . stackframe )"	889:4:23565:23681	1312699	1	True				
ANR	1312898	CallExpression	"egg -> remit -> comment ( egg , ""data (%s)(%s)size=(%d)\\n"" , egg -> lang . dstvar , egg -> lang . dstval , egg -> lang . stackframe )"		1312699	0					
ANR	1312899	Callee	egg -> remit -> comment		1312699	0					
ANR	1312900	PtrMemberAccess	egg -> remit -> comment		1312699	0					
ANR	1312901	PtrMemberAccess	egg -> remit		1312699	0					
ANR	1312902	Identifier	egg		1312699	0					
ANR	1312903	Identifier	remit		1312699	1					
ANR	1312904	Identifier	comment		1312699	1					
ANR	1312905	ArgumentList	egg		1312699	1					
ANR	1312906	Argument	egg		1312699	0					
ANR	1312907	Identifier	egg		1312699	0					
ANR	1312908	Argument	"""data (%s)(%s)size=(%d)\\n"""		1312699	1					
ANR	1312909	PrimaryExpression	"""data (%s)(%s)size=(%d)\\n"""		1312699	0					
ANR	1312910	Argument	egg -> lang . dstvar		1312699	2					
ANR	1312911	MemberAccess	egg -> lang . dstvar		1312699	0					
ANR	1312912	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312913	Identifier	egg		1312699	0					
ANR	1312914	Identifier	lang		1312699	1					
ANR	1312915	Identifier	dstvar		1312699	1					
ANR	1312916	Argument	egg -> lang . dstval		1312699	3					
ANR	1312917	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1312918	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312919	Identifier	egg		1312699	0					
ANR	1312920	Identifier	lang		1312699	1					
ANR	1312921	Identifier	dstval		1312699	1					
ANR	1312922	Argument	egg -> lang . stackframe		1312699	4					
ANR	1312923	MemberAccess	egg -> lang . stackframe		1312699	0					
ANR	1312924	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312925	Identifier	egg		1312699	0					
ANR	1312926	Identifier	lang		1312699	1					
ANR	1312927	Identifier	stackframe		1312699	1					
ANR	1312928	ExpressionStatement	"r_egg_printf ( egg , "".data\\n"" )"	891:4:23687:23716	1312699	2	True				
ANR	1312929	CallExpression	"r_egg_printf ( egg , "".data\\n"" )"		1312699	0					
ANR	1312930	Callee	r_egg_printf		1312699	0					
ANR	1312931	Identifier	r_egg_printf		1312699	0					
ANR	1312932	ArgumentList	egg		1312699	1					
ANR	1312933	Argument	egg		1312699	0					
ANR	1312934	Identifier	egg		1312699	0					
ANR	1312935	Argument	""".data\\n"""		1312699	1					
ANR	1312936	PrimaryExpression	""".data\\n"""		1312699	0					
ANR	1312937	ForStatement	for ( str = egg -> lang . dstval ; is_space ( * str ) ; str ++ )		1312699	3					
ANR	1312938	ForInit	str = egg -> lang . dstval ;	892:9:23727:23749	1312699	0	True				
ANR	1312939	AssignmentExpression	str = egg -> lang . dstval		1312699	0		=			
ANR	1312940	Identifier	str		1312699	0					
ANR	1312941	MemberAccess	egg -> lang . dstval		1312699	1					
ANR	1312942	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312943	Identifier	egg		1312699	0					
ANR	1312944	Identifier	lang		1312699	1					
ANR	1312945	Identifier	dstval		1312699	1					
ANR	1312946	Condition	is_space ( * str )	892:33:23751:23765	1312699	1	True				
ANR	1312947	CallExpression	is_space ( * str )		1312699	0					
ANR	1312948	Callee	is_space		1312699	0					
ANR	1312949	Identifier	is_space		1312699	0					
ANR	1312950	ArgumentList	* str		1312699	1					
ANR	1312951	Argument	* str		1312699	0					
ANR	1312952	UnaryOperationExpression	* str		1312699	0					
ANR	1312953	UnaryOperator	*		1312699	0					
ANR	1312954	Identifier	str		1312699	1					
ANR	1312955	PostIncDecOperationExpression	str ++	892:50:23768:23772	1312699	2	True				
ANR	1312956	Identifier	str		1312699	0					
ANR	1312957	IncDec	++		1312699	1					
ANR	1312958	CompoundStatement		37:57:1020:1020	1312699	3					
ANR	1312959	ExpressionStatement		893:5:23782:23782	1312699	0	True				
ANR	1312960	ExpressionStatement	j = ( egg -> lang . stackframe ) ? egg -> lang . stackframe : 1	895:4:23794:23845	1312699	4	True				
ANR	1312961	AssignmentExpression	j = ( egg -> lang . stackframe ) ? egg -> lang . stackframe : 1		1312699	0		=			
ANR	1312962	Identifier	j		1312699	0					
ANR	1312963	ConditionalExpression	( egg -> lang . stackframe ) ? egg -> lang . stackframe : 1		1312699	1					
ANR	1312964	Condition	egg -> lang . stackframe		1312699	0					
ANR	1312965	MemberAccess	egg -> lang . stackframe		1312699	0					
ANR	1312966	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312967	Identifier	egg		1312699	0					
ANR	1312968	Identifier	lang		1312699	1					
ANR	1312969	Identifier	stackframe		1312699	1					
ANR	1312970	MemberAccess	egg -> lang . stackframe		1312699	1					
ANR	1312971	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312972	Identifier	egg		1312699	0					
ANR	1312973	Identifier	lang		1312699	1					
ANR	1312974	Identifier	stackframe		1312699	1					
ANR	1312975	PrimaryExpression	1		1312699	2					
ANR	1312976	ExpressionStatement	"r_egg_printf ( egg , ""%s:\\n"" , egg -> lang . dstvar )"	897:4:23872:23917	1312699	5	True				
ANR	1312977	CallExpression	"r_egg_printf ( egg , ""%s:\\n"" , egg -> lang . dstvar )"		1312699	0					
ANR	1312978	Callee	r_egg_printf		1312699	0					
ANR	1312979	Identifier	r_egg_printf		1312699	0					
ANR	1312980	ArgumentList	egg		1312699	1					
ANR	1312981	Argument	egg		1312699	0					
ANR	1312982	Identifier	egg		1312699	0					
ANR	1312983	Argument	"""%s:\\n"""		1312699	1					
ANR	1312984	PrimaryExpression	"""%s:\\n"""		1312699	0					
ANR	1312985	Argument	egg -> lang . dstvar		1312699	2					
ANR	1312986	MemberAccess	egg -> lang . dstvar		1312699	0					
ANR	1312987	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1312988	Identifier	egg		1312699	0					
ANR	1312989	Identifier	lang		1312699	1					
ANR	1312990	Identifier	dstvar		1312699	1					
ANR	1312991	ForStatement	for ( i = 1 ; i <= j ; i ++ )		1312699	6					
ANR	1312992	ForInit	i = 1 ;	898:9:23928:23933	1312699	0	True				
ANR	1312993	AssignmentExpression	i = 1		1312699	0		=			
ANR	1312994	Identifier	i		1312699	0					
ANR	1312995	PrimaryExpression	1		1312699	1					
ANR	1312996	Condition	i <= j	898:16:23935:23940	1312699	1	True				
ANR	1312997	RelationalExpression	i <= j		1312699	0		<=			
ANR	1312998	Identifier	i		1312699	0					
ANR	1312999	Identifier	j		1312699	1					
ANR	1313000	PostIncDecOperationExpression	i ++	898:24:23943:23945	1312699	2	True				
ANR	1313001	Identifier	i		1312699	0					
ANR	1313002	IncDec	++		1312699	1					
ANR	1313003	CompoundStatement		43:29:1193:1193	1312699	3					
ANR	1313004	IfStatement	"if ( * str == '""' )"		1312699	0					
ANR	1313005	Condition	"* str == '""'"	899:9:23959:23969	1312699	0	True				
ANR	1313006	EqualityExpression	"* str == '""'"		1312699	0		==			
ANR	1313007	UnaryOperationExpression	* str		1312699	0					
ANR	1313008	UnaryOperator	*		1312699	0					
ANR	1313009	Identifier	str		1312699	1					
ANR	1313010	PrimaryExpression	"'""'"		1312699	1					
ANR	1313011	CompoundStatement		44:22:1217:1217	1312699	1					
ANR	1313012	ExpressionStatement	"r_egg_printf ( egg , "".ascii %s%s\\n"" , egg -> lang . dstval , ( i == j ) ? ""\\""\\\\x00\\"""" : """" )"	900:6:23980:24060	1312699	0	True				
ANR	1313013	CallExpression	"r_egg_printf ( egg , "".ascii %s%s\\n"" , egg -> lang . dstval , ( i == j ) ? ""\\""\\\\x00\\"""" : """" )"		1312699	0					
ANR	1313014	Callee	r_egg_printf		1312699	0					
ANR	1313015	Identifier	r_egg_printf		1312699	0					
ANR	1313016	ArgumentList	egg		1312699	1					
ANR	1313017	Argument	egg		1312699	0					
ANR	1313018	Identifier	egg		1312699	0					
ANR	1313019	Argument	""".ascii %s%s\\n"""		1312699	1					
ANR	1313020	PrimaryExpression	""".ascii %s%s\\n"""		1312699	0					
ANR	1313021	Argument	egg -> lang . dstval		1312699	2					
ANR	1313022	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1313023	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313024	Identifier	egg		1312699	0					
ANR	1313025	Identifier	lang		1312699	1					
ANR	1313026	Identifier	dstval		1312699	1					
ANR	1313027	Argument	"( i == j ) ? ""\\""\\\\x00\\"""" : """""		1312699	3					
ANR	1313028	ConditionalExpression	"( i == j ) ? ""\\""\\\\x00\\"""" : """""		1312699	0					
ANR	1313029	Condition	i == j		1312699	0					
ANR	1313030	EqualityExpression	i == j		1312699	0		==			
ANR	1313031	Identifier	i		1312699	0					
ANR	1313032	Identifier	j		1312699	1					
ANR	1313033	PrimaryExpression	"""\\""\\\\x00\\"""""		1312699	1					
ANR	1313034	PrimaryExpression	""""""		1312699	2					
ANR	1313035	ElseStatement	else		1312699	0					
ANR	1313036	CompoundStatement		46:12:1319:1319	1312699	0					
ANR	1313037	ExpressionStatement	"r_egg_printf ( egg , "".long %s\\n"" , egg -> lang . dstval )"	902:6:24082:24132	1312699	0	True				
ANR	1313038	CallExpression	"r_egg_printf ( egg , "".long %s\\n"" , egg -> lang . dstval )"		1312699	0					
ANR	1313039	Callee	r_egg_printf		1312699	0					
ANR	1313040	Identifier	r_egg_printf		1312699	0					
ANR	1313041	ArgumentList	egg		1312699	1					
ANR	1313042	Argument	egg		1312699	0					
ANR	1313043	Identifier	egg		1312699	0					
ANR	1313044	Argument	""".long %s\\n"""		1312699	1					
ANR	1313045	PrimaryExpression	""".long %s\\n"""		1312699	0					
ANR	1313046	Argument	egg -> lang . dstval		1312699	2					
ANR	1313047	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1313048	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313049	Identifier	egg		1312699	0					
ANR	1313050	Identifier	lang		1312699	1					
ANR	1313051	Identifier	dstval		1312699	1					
ANR	1313052	ExpressionStatement	"r_egg_printf ( egg , "".text\\n"" )"	905:4:24151:24180	1312699	7	True				
ANR	1313053	CallExpression	"r_egg_printf ( egg , "".text\\n"" )"		1312699	0					
ANR	1313054	Callee	r_egg_printf		1312699	0					
ANR	1313055	Identifier	r_egg_printf		1312699	0					
ANR	1313056	ArgumentList	egg		1312699	1					
ANR	1313057	Argument	egg		1312699	0					
ANR	1313058	Identifier	egg		1312699	0					
ANR	1313059	Argument	""".text\\n"""		1312699	1					
ANR	1313060	PrimaryExpression	""".text\\n"""		1312699	0					
ANR	1313061	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	906:4:24186:24211	1312699	8	True				
ANR	1313062	CallExpression	R_FREE ( egg -> lang . dstvar )		1312699	0					
ANR	1313063	Callee	R_FREE		1312699	0					
ANR	1313064	Identifier	R_FREE		1312699	0					
ANR	1313065	ArgumentList	egg -> lang . dstvar		1312699	1					
ANR	1313066	Argument	egg -> lang . dstvar		1312699	0					
ANR	1313067	MemberAccess	egg -> lang . dstvar		1312699	0					
ANR	1313068	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313069	Identifier	egg		1312699	0					
ANR	1313070	Identifier	lang		1312699	1					
ANR	1313071	Identifier	dstvar		1312699	1					
ANR	1313072	ExpressionStatement	R_FREE ( egg -> lang . dstval )	907:4:24217:24242	1312699	9	True				
ANR	1313073	CallExpression	R_FREE ( egg -> lang . dstval )		1312699	0					
ANR	1313074	Callee	R_FREE		1312699	0					
ANR	1313075	Identifier	R_FREE		1312699	0					
ANR	1313076	ArgumentList	egg -> lang . dstval		1312699	1					
ANR	1313077	Argument	egg -> lang . dstval		1312699	0					
ANR	1313078	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1313079	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313080	Identifier	egg		1312699	0					
ANR	1313081	Identifier	lang		1312699	1					
ANR	1313082	Identifier	dstval		1312699	1					
ANR	1313083	ExpressionStatement	egg -> lang . ndstval = 0	908:4:24248:24269	1312699	10	True				
ANR	1313084	AssignmentExpression	egg -> lang . ndstval = 0		1312699	0		=			
ANR	1313085	MemberAccess	egg -> lang . ndstval		1312699	0					
ANR	1313086	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313087	Identifier	egg		1312699	0					
ANR	1313088	Identifier	lang		1312699	1					
ANR	1313089	Identifier	ndstval		1312699	1					
ANR	1313090	PrimaryExpression	0		1312699	1					
ANR	1313091	ExpressionStatement	CTX = 0	909:4:24275:24282	1312699	11	True				
ANR	1313092	AssignmentExpression	CTX = 0		1312699	0		=			
ANR	1313093	Identifier	CTX		1312699	0					
ANR	1313094	PrimaryExpression	0		1312699	1					
ANR	1313095	ReturnStatement	return 1 ;	910:4:24288:24296	1312699	12	True				
ANR	1313096	PrimaryExpression	1		1312699	0					
ANR	1313097	IfStatement	if ( egg -> lang . dstval )		1312699	5					
ANR	1313098	Condition	egg -> lang . dstval	914:5:24315:24330	1312699	0	True				
ANR	1313099	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1313100	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313101	Identifier	egg		1312699	0					
ANR	1313102	Identifier	lang		1312699	1					
ANR	1313103	Identifier	dstval		1312699	1					
ANR	1313104	CompoundStatement		59:23:1578:1578	1312699	1					
ANR	1313105	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c	915:2:24337:24378	1312699	0	True				
ANR	1313106	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c		1312699	0		=			
ANR	1313107	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ++ ]		1312699	0					
ANR	1313108	MemberAccess	egg -> lang . dstval		1312699	0					
ANR	1313109	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313110	Identifier	egg		1312699	0					
ANR	1313111	Identifier	lang		1312699	1					
ANR	1313112	Identifier	dstval		1312699	1					
ANR	1313113	PostIncDecOperationExpression	egg -> lang . ndstval ++		1312699	1					
ANR	1313114	MemberAccess	egg -> lang . ndstval		1312699	0					
ANR	1313115	PtrMemberAccess	egg -> lang		1312699	0					
ANR	1313116	Identifier	egg		1312699	0					
ANR	1313117	Identifier	lang		1312699	1					
ANR	1313118	Identifier	ndstval		1312699	1					
ANR	1313119	IncDec	++		1312699	1					
ANR	1313120	Identifier	c		1312699	1					
ANR	1313121	ReturnStatement	return 0 ;	917:1:24384:24392	1312699	6	True				
ANR	1313122	PrimaryExpression	0		1312699	0					
ANR	1313123	ReturnType	static int		1312699	1					
ANR	1313124	Identifier	parsedatachar		1312699	2					
ANR	1313125	ParameterList	"REgg * egg , char c"		1312699	3					
ANR	1313126	Parameter	REgg * egg	856:25:22735:22743	1312699	0	True				
ANR	1313127	ParameterType	REgg *		1312699	0					
ANR	1313128	Identifier	egg		1312699	1					
ANR	1313129	Parameter	char c	856:36:22746:22751	1312699	1	True				
ANR	1313130	ParameterType	char		1312699	0					
ANR	1313131	Identifier	c		1312699	1					
ANR	1313132	CFGEntryNode	ENTRY		1312699		True				
ANR	1313133	CFGExitNode	EXIT		1312699		True				
ANR	1313134	Symbol	atoi		1312699						
ANR	1313135	Symbol	c		1312699						
ANR	1313136	Symbol	egg		1312699						
ANR	1313137	Symbol	* egg -> lang . dstval		1312699						
ANR	1313138	Symbol	CTX		1312699						
ANR	1313139	Symbol	* egg -> lang . ndstval		1312699						
ANR	1313140	Symbol	i		1312699						
ANR	1313141	Symbol	j		1312699						
ANR	1313142	Symbol	egg -> lang . dstvar		1312699						
ANR	1313143	Symbol	egg -> lang . inlinectr		1312699						
ANR	1313144	Symbol	egg -> lang		1312699						
ANR	1313145	Symbol	egg -> remit		1312699						
ANR	1313146	Symbol	egg -> lang . mode		1312699						
ANR	1313147	Symbol	* egg -> lang		1312699						
ANR	1313148	Symbol	str		1312699						
ANR	1313149	Symbol	* egg		1312699						
ANR	1313150	Symbol	egg -> lang . ndstval		1312699						
ANR	1313151	Symbol	egg -> lang . dstval		1312699						
ANR	1313152	Symbol	egg -> lang . slurp		1312699						
ANR	1313153	Symbol	* * egg		1312699						
ANR	1313154	Symbol	* str		1312699						
ANR	1313155	Symbol	is_space		1312699						
ANR	1313156	Symbol	egg -> lang . stackframe		1312699						
ANR	1313157	Symbol	NORMAL		1312699						
ANR	1313158	Function	parseinlinechar	920:0:24397:25625							
ANR	1313159	FunctionDef	"parseinlinechar (REgg * egg , char c)"		1313158	0					
ANR	1313160	CompoundStatement		920:46:24443:25625	1313158	0					
ANR	1313161	IfStatement	if ( c == '{' )		1313158	0					
ANR	1313162	Condition	c == '{'	922:5:24472:24479	1313158	0	True				
ANR	1313163	EqualityExpression	c == '{'		1313158	0		==			
ANR	1313164	Identifier	c		1313158	0					
ANR	1313165	PrimaryExpression	'{'		1313158	1					
ANR	1313166	CompoundStatement		3:15:38:38	1313158	1					
ANR	1313167	ExpressionStatement	"rcc_context ( egg , 1 )"	923:2:24513:24533	1313158	0	True				
ANR	1313168	CallExpression	"rcc_context ( egg , 1 )"		1313158	0					
ANR	1313169	Callee	rcc_context		1313158	0					
ANR	1313170	Identifier	rcc_context		1313158	0					
ANR	1313171	ArgumentList	egg		1313158	1					
ANR	1313172	Argument	egg		1313158	0					
ANR	1313173	Identifier	egg		1313158	0					
ANR	1313174	Argument	1		1313158	1					
ANR	1313175	PrimaryExpression	1		1313158	0					
ANR	1313176	ExpressionStatement	egg -> lang . inlinectr ++	924:2:24537:24558	1313158	1	True				
ANR	1313177	PostIncDecOperationExpression	egg -> lang . inlinectr ++		1313158	0					
ANR	1313178	MemberAccess	egg -> lang . inlinectr		1313158	0					
ANR	1313179	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313180	Identifier	egg		1313158	0					
ANR	1313181	Identifier	lang		1313158	1					
ANR	1313182	Identifier	inlinectr		1313158	1					
ANR	1313183	IncDec	++		1313158	1					
ANR	1313184	IfStatement	if ( egg -> lang . inlinectr == 1 )		1313158	2					
ANR	1313185	Condition	egg -> lang . inlinectr == 1	925:6:24566:24589	1313158	0	True				
ANR	1313186	EqualityExpression	egg -> lang . inlinectr == 1		1313158	0		==			
ANR	1313187	MemberAccess	egg -> lang . inlinectr		1313158	0					
ANR	1313188	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313189	Identifier	egg		1313158	0					
ANR	1313190	Identifier	lang		1313158	1					
ANR	1313191	Identifier	inlinectr		1313158	1					
ANR	1313192	PrimaryExpression	1		1313158	1					
ANR	1313193	CompoundStatement		6:32:148:148	1313158	1					
ANR	1313194	ReturnStatement	return 0 ;	926:3:24597:24605	1313158	0	True				
ANR	1313195	PrimaryExpression	0		1313158	0					
ANR	1313196	ElseStatement	else		1313158	0					
ANR	1313197	IfStatement	if ( egg -> lang . inlinectr == 0 )		1313158	0					
ANR	1313198	Condition	egg -> lang . inlinectr == 0	928:12:24623:24646	1313158	0	True				
ANR	1313199	EqualityExpression	egg -> lang . inlinectr == 0		1313158	0		==			
ANR	1313200	MemberAccess	egg -> lang . inlinectr		1313158	0					
ANR	1313201	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313202	Identifier	egg		1313158	0					
ANR	1313203	Identifier	lang		1313158	1					
ANR	1313204	Identifier	inlinectr		1313158	1					
ANR	1313205	PrimaryExpression	0		1313158	1					
ANR	1313206	CompoundStatement		9:38:205:205	1313158	1					
ANR	1313207	ReturnStatement	return 0 ;	929:2:24653:24661	1313158	0	True				
ANR	1313208	PrimaryExpression	0		1313158	0					
ANR	1313209	IfStatement	if ( c == '}' )		1313158	1					
ANR	1313210	Condition	c == '}'	933:5:24692:24699	1313158	0	True				
ANR	1313211	EqualityExpression	c == '}'		1313158	0		==			
ANR	1313212	Identifier	c		1313158	0					
ANR	1313213	PrimaryExpression	'}'		1313158	1					
ANR	1313214	CompoundStatement		14:15:258:258	1313158	1					
ANR	1313215	IfStatement	if ( CTX < 2 )		1313158	0					
ANR	1313216	Condition	CTX < 2	934:6:24737:24743	1313158	0	True				
ANR	1313217	RelationalExpression	CTX < 2		1313158	0		<			
ANR	1313218	Identifier	CTX		1313158	0					
ANR	1313219	PrimaryExpression	2		1313158	1					
ANR	1313220	CompoundStatement		15:15:302:302	1313158	1					
ANR	1313221	ExpressionStatement	"rcc_context ( egg , - 1 )"	935:3:24751:24772	1313158	0	True				
ANR	1313222	CallExpression	"rcc_context ( egg , - 1 )"		1313158	0					
ANR	1313223	Callee	rcc_context		1313158	0					
ANR	1313224	Identifier	rcc_context		1313158	0					
ANR	1313225	ArgumentList	egg		1313158	1					
ANR	1313226	Argument	egg		1313158	0					
ANR	1313227	Identifier	egg		1313158	0					
ANR	1313228	Argument	- 1		1313158	1					
ANR	1313229	UnaryOperationExpression	- 1		1313158	0					
ANR	1313230	UnaryOperator	-		1313158	0					
ANR	1313231	PrimaryExpression	1		1313158	1					
ANR	1313232	ExpressionStatement	egg -> lang . slurp = 0	936:3:24777:24796	1313158	1	True				
ANR	1313233	AssignmentExpression	egg -> lang . slurp = 0		1313158	0		=			
ANR	1313234	MemberAccess	egg -> lang . slurp		1313158	0					
ANR	1313235	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313236	Identifier	egg		1313158	0					
ANR	1313237	Identifier	lang		1313158	1					
ANR	1313238	Identifier	slurp		1313158	1					
ANR	1313239	PrimaryExpression	0		1313158	1					
ANR	1313240	ExpressionStatement	egg -> lang . mode = NORMAL	937:3:24801:24824	1313158	2	True				
ANR	1313241	AssignmentExpression	egg -> lang . mode = NORMAL		1313158	0		=			
ANR	1313242	MemberAccess	egg -> lang . mode		1313158	0					
ANR	1313243	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313244	Identifier	egg		1313158	0					
ANR	1313245	Identifier	lang		1313158	1					
ANR	1313246	Identifier	mode		1313158	1					
ANR	1313247	Identifier	NORMAL		1313158	1					
ANR	1313248	ExpressionStatement	egg -> lang . inlinectr = 0	938:3:24829:24852	1313158	3	True				
ANR	1313249	AssignmentExpression	egg -> lang . inlinectr = 0		1313158	0		=			
ANR	1313250	MemberAccess	egg -> lang . inlinectr		1313158	0					
ANR	1313251	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313252	Identifier	egg		1313158	0					
ANR	1313253	Identifier	lang		1313158	1					
ANR	1313254	Identifier	inlinectr		1313158	1					
ANR	1313255	PrimaryExpression	0		1313158	1					
ANR	1313256	IfStatement	if ( ! egg -> lang . dstvar && egg -> lang . dstval == egg -> lang . syscallbody )		1313158	4					
ANR	1313257	Condition	! egg -> lang . dstvar && egg -> lang . dstval == egg -> lang . syscallbody	939:7:24861:24922	1313158	0	True				
ANR	1313258	AndExpression	! egg -> lang . dstvar && egg -> lang . dstval == egg -> lang . syscallbody		1313158	0		&&			
ANR	1313259	UnaryOperationExpression	! egg -> lang . dstvar		1313158	0					
ANR	1313260	UnaryOperator	!		1313158	0					
ANR	1313261	MemberAccess	egg -> lang . dstvar		1313158	1					
ANR	1313262	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313263	Identifier	egg		1313158	0					
ANR	1313264	Identifier	lang		1313158	1					
ANR	1313265	Identifier	dstvar		1313158	1					
ANR	1313266	EqualityExpression	egg -> lang . dstval == egg -> lang . syscallbody		1313158	1		==			
ANR	1313267	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313268	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313269	Identifier	egg		1313158	0					
ANR	1313270	Identifier	lang		1313158	1					
ANR	1313271	Identifier	dstval		1313158	1					
ANR	1313272	MemberAccess	egg -> lang . syscallbody		1313158	1					
ANR	1313273	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313274	Identifier	egg		1313158	0					
ANR	1313275	Identifier	lang		1313158	1					
ANR	1313276	Identifier	syscallbody		1313158	1					
ANR	1313277	CompoundStatement		20:71:481:481	1313158	1					
ANR	1313278	ExpressionStatement	egg -> lang . dstval = NULL	940:4:24931:24954	1313158	0	True				
ANR	1313279	AssignmentExpression	egg -> lang . dstval = NULL		1313158	0		=			
ANR	1313280	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313281	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313282	Identifier	egg		1313158	0					
ANR	1313283	Identifier	lang		1313158	1					
ANR	1313284	Identifier	dstval		1313158	1					
ANR	1313285	Identifier	NULL		1313158	1					
ANR	1313286	ReturnStatement	return 1 ;	941:4:24960:24968	1313158	1	True				
ANR	1313287	PrimaryExpression	1		1313158	0					
ANR	1313288	ElseStatement	else		1313158	0					
ANR	1313289	IfStatement	if ( egg -> lang . dstval && egg -> lang . dstvar )		1313158	0					
ANR	1313290	Condition	egg -> lang . dstval && egg -> lang . dstvar	943:7:25002:25037	1313158	0	True				
ANR	1313291	AndExpression	egg -> lang . dstval && egg -> lang . dstvar		1313158	0		&&			
ANR	1313292	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313293	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313294	Identifier	egg		1313158	0					
ANR	1313295	Identifier	lang		1313158	1					
ANR	1313296	Identifier	dstval		1313158	1					
ANR	1313297	MemberAccess	egg -> lang . dstvar		1313158	1					
ANR	1313298	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313299	Identifier	egg		1313158	0					
ANR	1313300	Identifier	lang		1313158	1					
ANR	1313301	Identifier	dstvar		1313158	1					
ANR	1313302	CompoundStatement		24:45:596:596	1313158	1					
ANR	1313303	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ] = '\\0'	944:4:25046:25088	1313158	0	True				
ANR	1313304	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ] = '\\0'		1313158	0		=			
ANR	1313305	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ]		1313158	0					
ANR	1313306	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313307	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313308	Identifier	egg		1313158	0					
ANR	1313309	Identifier	lang		1313158	1					
ANR	1313310	Identifier	dstval		1313158	1					
ANR	1313311	MemberAccess	egg -> lang . ndstval		1313158	1					
ANR	1313312	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313313	Identifier	egg		1313158	0					
ANR	1313314	Identifier	lang		1313158	1					
ANR	1313315	Identifier	ndstval		1313158	1					
ANR	1313316	PrimaryExpression	'\\0'		1313158	1					
ANR	1313317	ExpressionStatement	egg -> lang . inlines [ egg -> lang . ninlines ] . name = strdup ( skipspaces ( egg -> lang . dstvar ) )	946:4:25180:25263	1313158	1	True				
ANR	1313318	AssignmentExpression	egg -> lang . inlines [ egg -> lang . ninlines ] . name = strdup ( skipspaces ( egg -> lang . dstvar ) )		1313158	0		=			
ANR	1313319	MemberAccess	egg -> lang . inlines [ egg -> lang . ninlines ] . name		1313158	0					
ANR	1313320	ArrayIndexing	egg -> lang . inlines [ egg -> lang . ninlines ]		1313158	0					
ANR	1313321	MemberAccess	egg -> lang . inlines		1313158	0					
ANR	1313322	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313323	Identifier	egg		1313158	0					
ANR	1313324	Identifier	lang		1313158	1					
ANR	1313325	Identifier	inlines		1313158	1					
ANR	1313326	MemberAccess	egg -> lang . ninlines		1313158	1					
ANR	1313327	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313328	Identifier	egg		1313158	0					
ANR	1313329	Identifier	lang		1313158	1					
ANR	1313330	Identifier	ninlines		1313158	1					
ANR	1313331	Identifier	name		1313158	1					
ANR	1313332	CallExpression	strdup ( skipspaces ( egg -> lang . dstvar ) )		1313158	1					
ANR	1313333	Callee	strdup		1313158	0					
ANR	1313334	Identifier	strdup		1313158	0					
ANR	1313335	ArgumentList	skipspaces ( egg -> lang . dstvar )		1313158	1					
ANR	1313336	Argument	skipspaces ( egg -> lang . dstvar )		1313158	0					
ANR	1313337	CallExpression	skipspaces ( egg -> lang . dstvar )		1313158	0					
ANR	1313338	Callee	skipspaces		1313158	0					
ANR	1313339	Identifier	skipspaces		1313158	0					
ANR	1313340	ArgumentList	egg -> lang . dstvar		1313158	1					
ANR	1313341	Argument	egg -> lang . dstvar		1313158	0					
ANR	1313342	MemberAccess	egg -> lang . dstvar		1313158	0					
ANR	1313343	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313344	Identifier	egg		1313158	0					
ANR	1313345	Identifier	lang		1313158	1					
ANR	1313346	Identifier	dstvar		1313158	1					
ANR	1313347	ExpressionStatement	egg -> lang . inlines [ egg -> lang . ninlines ] . body = strdup ( skipspaces ( egg -> lang . dstval ) )	947:4:25269:25352	1313158	2	True				
ANR	1313348	AssignmentExpression	egg -> lang . inlines [ egg -> lang . ninlines ] . body = strdup ( skipspaces ( egg -> lang . dstval ) )		1313158	0		=			
ANR	1313349	MemberAccess	egg -> lang . inlines [ egg -> lang . ninlines ] . body		1313158	0					
ANR	1313350	ArrayIndexing	egg -> lang . inlines [ egg -> lang . ninlines ]		1313158	0					
ANR	1313351	MemberAccess	egg -> lang . inlines		1313158	0					
ANR	1313352	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313353	Identifier	egg		1313158	0					
ANR	1313354	Identifier	lang		1313158	1					
ANR	1313355	Identifier	inlines		1313158	1					
ANR	1313356	MemberAccess	egg -> lang . ninlines		1313158	1					
ANR	1313357	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313358	Identifier	egg		1313158	0					
ANR	1313359	Identifier	lang		1313158	1					
ANR	1313360	Identifier	ninlines		1313158	1					
ANR	1313361	Identifier	body		1313158	1					
ANR	1313362	CallExpression	strdup ( skipspaces ( egg -> lang . dstval ) )		1313158	1					
ANR	1313363	Callee	strdup		1313158	0					
ANR	1313364	Identifier	strdup		1313158	0					
ANR	1313365	ArgumentList	skipspaces ( egg -> lang . dstval )		1313158	1					
ANR	1313366	Argument	skipspaces ( egg -> lang . dstval )		1313158	0					
ANR	1313367	CallExpression	skipspaces ( egg -> lang . dstval )		1313158	0					
ANR	1313368	Callee	skipspaces		1313158	0					
ANR	1313369	Identifier	skipspaces		1313158	0					
ANR	1313370	ArgumentList	egg -> lang . dstval		1313158	1					
ANR	1313371	Argument	egg -> lang . dstval		1313158	0					
ANR	1313372	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313373	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313374	Identifier	egg		1313158	0					
ANR	1313375	Identifier	lang		1313158	1					
ANR	1313376	Identifier	dstval		1313158	1					
ANR	1313377	ExpressionStatement	egg -> lang . ninlines ++	948:4:25358:25378	1313158	3	True				
ANR	1313378	PostIncDecOperationExpression	egg -> lang . ninlines ++		1313158	0					
ANR	1313379	MemberAccess	egg -> lang . ninlines		1313158	0					
ANR	1313380	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313381	Identifier	egg		1313158	0					
ANR	1313382	Identifier	lang		1313158	1					
ANR	1313383	Identifier	ninlines		1313158	1					
ANR	1313384	IncDec	++		1313158	1					
ANR	1313385	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	949:4:25384:25409	1313158	4	True				
ANR	1313386	CallExpression	R_FREE ( egg -> lang . dstvar )		1313158	0					
ANR	1313387	Callee	R_FREE		1313158	0					
ANR	1313388	Identifier	R_FREE		1313158	0					
ANR	1313389	ArgumentList	egg -> lang . dstvar		1313158	1					
ANR	1313390	Argument	egg -> lang . dstvar		1313158	0					
ANR	1313391	MemberAccess	egg -> lang . dstvar		1313158	0					
ANR	1313392	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313393	Identifier	egg		1313158	0					
ANR	1313394	Identifier	lang		1313158	1					
ANR	1313395	Identifier	dstvar		1313158	1					
ANR	1313396	ExpressionStatement	R_FREE ( egg -> lang . dstval )	950:4:25415:25440	1313158	5	True				
ANR	1313397	CallExpression	R_FREE ( egg -> lang . dstval )		1313158	0					
ANR	1313398	Callee	R_FREE		1313158	0					
ANR	1313399	Identifier	R_FREE		1313158	0					
ANR	1313400	ArgumentList	egg -> lang . dstval		1313158	1					
ANR	1313401	Argument	egg -> lang . dstval		1313158	0					
ANR	1313402	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313403	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313404	Identifier	egg		1313158	0					
ANR	1313405	Identifier	lang		1313158	1					
ANR	1313406	Identifier	dstval		1313158	1					
ANR	1313407	ReturnStatement	return 1 ;	951:4:25446:25454	1313158	6	True				
ANR	1313408	PrimaryExpression	1		1313158	0					
ANR	1313409	ExpressionStatement	"eprintf ( ""Parse error\\n"" )"	953:3:25464:25489	1313158	5	True				
ANR	1313410	CallExpression	"eprintf ( ""Parse error\\n"" )"		1313158	0					
ANR	1313411	Callee	eprintf		1313158	0					
ANR	1313412	Identifier	eprintf		1313158	0					
ANR	1313413	ArgumentList	"""Parse error\\n"""		1313158	1					
ANR	1313414	Argument	"""Parse error\\n"""		1313158	0					
ANR	1313415	PrimaryExpression	"""Parse error\\n"""		1313158	0					
ANR	1313416	IfStatement	if ( egg -> lang . dstval )		1313158	2					
ANR	1313417	Condition	egg -> lang . dstval	956:5:25503:25518	1313158	0	True				
ANR	1313418	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313419	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313420	Identifier	egg		1313158	0					
ANR	1313421	Identifier	lang		1313158	1					
ANR	1313422	Identifier	dstval		1313158	1					
ANR	1313423	CompoundStatement		37:23:1077:1077	1313158	1					
ANR	1313424	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c	957:2:25525:25566	1313158	0	True				
ANR	1313425	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ++ ] = c		1313158	0		=			
ANR	1313426	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ++ ]		1313158	0					
ANR	1313427	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313428	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313429	Identifier	egg		1313158	0					
ANR	1313430	Identifier	lang		1313158	1					
ANR	1313431	Identifier	dstval		1313158	1					
ANR	1313432	PostIncDecOperationExpression	egg -> lang . ndstval ++		1313158	1					
ANR	1313433	MemberAccess	egg -> lang . ndstval		1313158	0					
ANR	1313434	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313435	Identifier	egg		1313158	0					
ANR	1313436	Identifier	lang		1313158	1					
ANR	1313437	Identifier	ndstval		1313158	1					
ANR	1313438	IncDec	++		1313158	1					
ANR	1313439	Identifier	c		1313158	1					
ANR	1313440	ExpressionStatement	egg -> lang . dstval [ egg -> lang . ndstval ] = 0	958:2:25570:25609	1313158	1	True				
ANR	1313441	AssignmentExpression	egg -> lang . dstval [ egg -> lang . ndstval ] = 0		1313158	0		=			
ANR	1313442	ArrayIndexing	egg -> lang . dstval [ egg -> lang . ndstval ]		1313158	0					
ANR	1313443	MemberAccess	egg -> lang . dstval		1313158	0					
ANR	1313444	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313445	Identifier	egg		1313158	0					
ANR	1313446	Identifier	lang		1313158	1					
ANR	1313447	Identifier	dstval		1313158	1					
ANR	1313448	MemberAccess	egg -> lang . ndstval		1313158	1					
ANR	1313449	PtrMemberAccess	egg -> lang		1313158	0					
ANR	1313450	Identifier	egg		1313158	0					
ANR	1313451	Identifier	lang		1313158	1					
ANR	1313452	Identifier	ndstval		1313158	1					
ANR	1313453	PrimaryExpression	0		1313158	1					
ANR	1313454	ReturnStatement	return 0 ;	960:1:25615:25623	1313158	3	True				
ANR	1313455	PrimaryExpression	0		1313158	0					
ANR	1313456	ReturnType	static int		1313158	1					
ANR	1313457	Identifier	parseinlinechar		1313158	2					
ANR	1313458	ParameterList	"REgg * egg , char c"		1313158	3					
ANR	1313459	Parameter	REgg * egg	920:27:24424:24432	1313158	0	True				
ANR	1313460	ParameterType	REgg *		1313158	0					
ANR	1313461	Identifier	egg		1313158	1					
ANR	1313462	Parameter	char c	920:38:24435:24440	1313158	1	True				
ANR	1313463	ParameterType	char		1313158	0					
ANR	1313464	Identifier	c		1313158	1					
ANR	1313465	CFGEntryNode	ENTRY		1313158		True				
ANR	1313466	CFGExitNode	EXIT		1313158		True				
ANR	1313467	Symbol	egg		1313158						
ANR	1313468	Symbol	CTX		1313158						
ANR	1313469	Symbol	egg -> lang . ninlines		1313158						
ANR	1313470	Symbol	* egg -> lang . ndstval		1313158						
ANR	1313471	Symbol	egg -> lang . dstvar		1313158						
ANR	1313472	Symbol	egg -> lang . inlinectr		1313158						
ANR	1313473	Symbol	egg -> lang		1313158						
ANR	1313474	Symbol	* egg -> lang		1313158						
ANR	1313475	Symbol	* egg		1313158						
ANR	1313476	Symbol	egg -> lang . ndstval		1313158						
ANR	1313477	Symbol	egg -> lang . dstval		1313158						
ANR	1313478	Symbol	egg -> lang . inlines [ egg -> lang . ninlines ] . body		1313158						
ANR	1313479	Symbol	egg -> lang . inlines		1313158						
ANR	1313480	Symbol	* * egg		1313158						
ANR	1313481	Symbol	* egg -> lang . ninlines		1313158						
ANR	1313482	Symbol	egg -> lang . syscallbody		1313158						
ANR	1313483	Symbol	c		1313158						
ANR	1313484	Symbol	NULL		1313158						
ANR	1313485	Symbol	* egg -> lang . dstval		1313158						
ANR	1313486	Symbol	egg -> lang . mode		1313158						
ANR	1313487	Symbol	skipspaces		1313158						
ANR	1313488	Symbol	egg -> lang . inlines [ egg -> lang . ninlines ] . name		1313158						
ANR	1313489	Symbol	egg -> lang . slurp		1313158						
ANR	1313490	Symbol	* egg -> lang . inlines		1313158						
ANR	1313491	Symbol	strdup		1313158						
ANR	1313492	Symbol	NORMAL		1313158						
ANR	1313493	Function	rcc_next	964:0:25694:33059							
ANR	1313494	FunctionDef	rcc_next (REgg * egg)		1313493	0					
ANR	1313495	CompoundStatement		964:32:25726:33059	1313493	0					
ANR	1313496	IdentifierDeclStatement	const char * ocn ;	965:1:25729:25744	1313493	0	True				
ANR	1313497	IdentifierDecl	* ocn		1313493	0					
ANR	1313498	IdentifierDeclType	const char *		1313493	0					
ANR	1313499	Identifier	ocn		1313493	1					
ANR	1313500	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	966:1:25747:25771	1313493	1	True				
ANR	1313501	IdentifierDecl	* e = egg -> remit		1313493	0					
ANR	1313502	IdentifierDeclType	REggEmit *		1313493	0					
ANR	1313503	Identifier	e		1313493	1					
ANR	1313504	AssignmentExpression	* e = egg -> remit		1313493	2		=			
ANR	1313505	Identifier	e		1313493	0					
ANR	1313506	PtrMemberAccess	egg -> remit		1313493	1					
ANR	1313507	Identifier	egg		1313493	0					
ANR	1313508	Identifier	remit		1313493	1					
ANR	1313509	IdentifierDeclStatement	"char * str = NULL , * p , * ptr , buf [ 64 ] ;"	967:1:25774:25809	1313493	2	True				
ANR	1313510	IdentifierDecl	* str = NULL		1313493	0					
ANR	1313511	IdentifierDeclType	char *		1313493	0					
ANR	1313512	Identifier	str		1313493	1					
ANR	1313513	AssignmentExpression	* str = NULL		1313493	2		=			
ANR	1313514	Identifier	NULL		1313493	0					
ANR	1313515	Identifier	NULL		1313493	1					
ANR	1313516	IdentifierDecl	* p		1313493	1					
ANR	1313517	IdentifierDeclType	char *		1313493	0					
ANR	1313518	Identifier	p		1313493	1					
ANR	1313519	IdentifierDecl	* ptr		1313493	2					
ANR	1313520	IdentifierDeclType	char *		1313493	0					
ANR	1313521	Identifier	ptr		1313493	1					
ANR	1313522	IdentifierDecl	buf [ 64 ]		1313493	3					
ANR	1313523	IdentifierDeclType	char [ 64 ]		1313493	0					
ANR	1313524	Identifier	buf		1313493	1					
ANR	1313525	PrimaryExpression	64		1313493	2					
ANR	1313526	IdentifierDeclStatement	int i ;	968:1:25812:25817	1313493	3	True				
ANR	1313527	IdentifierDecl	i		1313493	0					
ANR	1313528	IdentifierDeclType	int		1313493	0					
ANR	1313529	Identifier	i		1313493	1					
ANR	1313530	IfStatement	if ( egg -> lang . setenviron )		1313493	4					
ANR	1313531	Condition	egg -> lang . setenviron	970:5:25825:25844	1313493	0	True				
ANR	1313532	MemberAccess	egg -> lang . setenviron		1313493	0					
ANR	1313533	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313534	Identifier	egg		1313493	0					
ANR	1313535	Identifier	lang		1313493	1					
ANR	1313536	Identifier	setenviron		1313493	1					
ANR	1313537	CompoundStatement		7:27:120:120	1313493	1					
ANR	1313538	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n - 1 ] = 0	971:2:25851:25891	1313493	0	True				
ANR	1313539	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n - 1 ] = 0		1313493	0		=			
ANR	1313540	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n - 1 ]		1313493	0					
ANR	1313541	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1313542	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313543	Identifier	egg		1313493	0					
ANR	1313544	Identifier	lang		1313493	1					
ANR	1313545	Identifier	elem		1313493	1					
ANR	1313546	AdditiveExpression	egg -> lang . elem_n - 1		1313493	1		-			
ANR	1313547	MemberAccess	egg -> lang . elem_n		1313493	0					
ANR	1313548	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313549	Identifier	egg		1313493	0					
ANR	1313550	Identifier	lang		1313493	1					
ANR	1313551	Identifier	elem_n		1313493	1					
ANR	1313552	PrimaryExpression	1		1313493	1					
ANR	1313553	PrimaryExpression	0		1313493	1					
ANR	1313554	ExpressionStatement	"r_sys_setenv ( egg -> lang . setenviron , egg -> lang . elem )"	972:2:25895:25946	1313493	1	True				
ANR	1313555	CallExpression	"r_sys_setenv ( egg -> lang . setenviron , egg -> lang . elem )"		1313493	0					
ANR	1313556	Callee	r_sys_setenv		1313493	0					
ANR	1313557	Identifier	r_sys_setenv		1313493	0					
ANR	1313558	ArgumentList	egg -> lang . setenviron		1313493	1					
ANR	1313559	Argument	egg -> lang . setenviron		1313493	0					
ANR	1313560	MemberAccess	egg -> lang . setenviron		1313493	0					
ANR	1313561	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313562	Identifier	egg		1313493	0					
ANR	1313563	Identifier	lang		1313493	1					
ANR	1313564	Identifier	setenviron		1313493	1					
ANR	1313565	Argument	egg -> lang . elem		1313493	1					
ANR	1313566	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1313567	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313568	Identifier	egg		1313493	0					
ANR	1313569	Identifier	lang		1313493	1					
ANR	1313570	Identifier	elem		1313493	1					
ANR	1313571	ExpressionStatement	R_FREE ( egg -> lang . setenviron )	973:2:25950:25979	1313493	2	True				
ANR	1313572	CallExpression	R_FREE ( egg -> lang . setenviron )		1313493	0					
ANR	1313573	Callee	R_FREE		1313493	0					
ANR	1313574	Identifier	R_FREE		1313493	0					
ANR	1313575	ArgumentList	egg -> lang . setenviron		1313493	1					
ANR	1313576	Argument	egg -> lang . setenviron		1313493	0					
ANR	1313577	MemberAccess	egg -> lang . setenviron		1313493	0					
ANR	1313578	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313579	Identifier	egg		1313493	0					
ANR	1313580	Identifier	lang		1313493	1					
ANR	1313581	Identifier	setenviron		1313493	1					
ANR	1313582	ReturnStatement	return ;	974:2:25983:25989	1313493	3	True				
ANR	1313583	IfStatement	if ( egg -> lang . includefile )		1313493	5					
ANR	1313584	Condition	egg -> lang . includefile	976:5:25999:26019	1313493	0	True				
ANR	1313585	MemberAccess	egg -> lang . includefile		1313493	0					
ANR	1313586	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313587	Identifier	egg		1313493	0					
ANR	1313588	Identifier	lang		1313493	1					
ANR	1313589	Identifier	includefile		1313493	1					
ANR	1313590	CompoundStatement		14:2:299:317	1313493	1					
ANR	1313591	IdentifierDeclStatement	"char * p , * q , * path ;"	977:2:26026:26044	1313493	0	True				
ANR	1313592	IdentifierDecl	* p		1313493	0					
ANR	1313593	IdentifierDeclType	char *		1313493	0					
ANR	1313594	Identifier	p		1313493	1					
ANR	1313595	IdentifierDecl	* q		1313493	1					
ANR	1313596	IdentifierDeclType	char *		1313493	0					
ANR	1313597	Identifier	q		1313493	1					
ANR	1313598	IdentifierDecl	* path		1313493	2					
ANR	1313599	IdentifierDeclType	char *		1313493	0					
ANR	1313600	Identifier	path		1313493	1					
ANR	1313601	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n - 1 ] = 0	978:2:26048:26088	1313493	1	True				
ANR	1313602	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n - 1 ] = 0		1313493	0		=			
ANR	1313603	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n - 1 ]		1313493	0					
ANR	1313604	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1313605	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313606	Identifier	egg		1313493	0					
ANR	1313607	Identifier	lang		1313493	1					
ANR	1313608	Identifier	elem		1313493	1					
ANR	1313609	AdditiveExpression	egg -> lang . elem_n - 1		1313493	1		-			
ANR	1313610	MemberAccess	egg -> lang . elem_n		1313493	0					
ANR	1313611	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313612	Identifier	egg		1313493	0					
ANR	1313613	Identifier	lang		1313493	1					
ANR	1313614	Identifier	elem_n		1313493	1					
ANR	1313615	PrimaryExpression	1		1313493	1					
ANR	1313616	PrimaryExpression	0		1313493	1					
ANR	1313617	ExpressionStatement	"path = find_include ( egg -> lang . includedir , egg -> lang . includefile )"	979:2:26092:26157	1313493	2	True				
ANR	1313618	AssignmentExpression	"path = find_include ( egg -> lang . includedir , egg -> lang . includefile )"		1313493	0		=			
ANR	1313619	Identifier	path		1313493	0					
ANR	1313620	CallExpression	"find_include ( egg -> lang . includedir , egg -> lang . includefile )"		1313493	1					
ANR	1313621	Callee	find_include		1313493	0					
ANR	1313622	Identifier	find_include		1313493	0					
ANR	1313623	ArgumentList	egg -> lang . includedir		1313493	1					
ANR	1313624	Argument	egg -> lang . includedir		1313493	0					
ANR	1313625	MemberAccess	egg -> lang . includedir		1313493	0					
ANR	1313626	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313627	Identifier	egg		1313493	0					
ANR	1313628	Identifier	lang		1313493	1					
ANR	1313629	Identifier	includedir		1313493	1					
ANR	1313630	Argument	egg -> lang . includefile		1313493	1					
ANR	1313631	MemberAccess	egg -> lang . includefile		1313493	0					
ANR	1313632	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313633	Identifier	egg		1313493	0					
ANR	1313634	Identifier	lang		1313493	1					
ANR	1313635	Identifier	includefile		1313493	1					
ANR	1313636	IfStatement	if ( ! path )		1313493	3					
ANR	1313637	Condition	! path	980:6:26165:26169	1313493	0	True				
ANR	1313638	UnaryOperationExpression	! path		1313493	0					
ANR	1313639	UnaryOperator	!		1313493	0					
ANR	1313640	Identifier	path		1313493	1					
ANR	1313641	CompoundStatement		17:13:445:445	1313493	1					
ANR	1313642	ExpressionStatement	"eprintf ( ""Cannot find include file '%s'\\n"" , egg -> lang . elem )"	981:3:26177:26236	1313493	0	True				
ANR	1313643	CallExpression	"eprintf ( ""Cannot find include file '%s'\\n"" , egg -> lang . elem )"		1313493	0					
ANR	1313644	Callee	eprintf		1313493	0					
ANR	1313645	Identifier	eprintf		1313493	0					
ANR	1313646	ArgumentList	"""Cannot find include file '%s'\\n"""		1313493	1					
ANR	1313647	Argument	"""Cannot find include file '%s'\\n"""		1313493	0					
ANR	1313648	PrimaryExpression	"""Cannot find include file '%s'\\n"""		1313493	0					
ANR	1313649	Argument	egg -> lang . elem		1313493	1					
ANR	1313650	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1313651	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313652	Identifier	egg		1313493	0					
ANR	1313653	Identifier	lang		1313493	1					
ANR	1313654	Identifier	elem		1313493	1					
ANR	1313655	ReturnStatement	return ;	982:3:26241:26247	1313493	1	True				
ANR	1313656	ExpressionStatement	R_FREE ( egg -> lang . includefile )	984:2:26255:26285	1313493	4	True				
ANR	1313657	CallExpression	R_FREE ( egg -> lang . includefile )		1313493	0					
ANR	1313658	Callee	R_FREE		1313493	0					
ANR	1313659	Identifier	R_FREE		1313493	0					
ANR	1313660	ArgumentList	egg -> lang . includefile		1313493	1					
ANR	1313661	Argument	egg -> lang . includefile		1313493	0					
ANR	1313662	MemberAccess	egg -> lang . includefile		1313493	0					
ANR	1313663	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313664	Identifier	egg		1313493	0					
ANR	1313665	Identifier	lang		1313493	1					
ANR	1313666	Identifier	includefile		1313493	1					
ANR	1313667	ExpressionStatement	R_FREE ( egg -> lang . includedir )	985:2:26289:26318	1313493	5	True				
ANR	1313668	CallExpression	R_FREE ( egg -> lang . includedir )		1313493	0					
ANR	1313669	Callee	R_FREE		1313493	0					
ANR	1313670	Identifier	R_FREE		1313493	0					
ANR	1313671	ArgumentList	egg -> lang . includedir		1313493	1					
ANR	1313672	Argument	egg -> lang . includedir		1313493	0					
ANR	1313673	MemberAccess	egg -> lang . includedir		1313493	0					
ANR	1313674	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313675	Identifier	egg		1313493	0					
ANR	1313676	Identifier	lang		1313493	1					
ANR	1313677	Identifier	includedir		1313493	1					
ANR	1313678	ExpressionStatement	rcc_reset_callname ( egg )	986:2:26322:26346	1313493	6	True				
ANR	1313679	CallExpression	rcc_reset_callname ( egg )		1313493	0					
ANR	1313680	Callee	rcc_reset_callname		1313493	0					
ANR	1313681	Identifier	rcc_reset_callname		1313493	0					
ANR	1313682	ArgumentList	egg		1313493	1					
ANR	1313683	Argument	egg		1313493	0					
ANR	1313684	Identifier	egg		1313493	0					
ANR	1313685	ExpressionStatement	"p = q = r_file_slurp ( path , NULL )"	987:2:26350:26383	1313493	7	True				
ANR	1313686	AssignmentExpression	"p = q = r_file_slurp ( path , NULL )"		1313493	0		=			
ANR	1313687	Identifier	p		1313493	0					
ANR	1313688	AssignmentExpression	"q = r_file_slurp ( path , NULL )"		1313493	1		=			
ANR	1313689	Identifier	q		1313493	0					
ANR	1313690	CallExpression	"r_file_slurp ( path , NULL )"		1313493	1					
ANR	1313691	Callee	r_file_slurp		1313493	0					
ANR	1313692	Identifier	r_file_slurp		1313493	0					
ANR	1313693	ArgumentList	path		1313493	1					
ANR	1313694	Argument	path		1313493	0					
ANR	1313695	Identifier	path		1313493	0					
ANR	1313696	Argument	NULL		1313493	1					
ANR	1313697	Identifier	NULL		1313493	0					
ANR	1313698	IfStatement	if ( p )		1313493	8					
ANR	1313699	Condition	p	988:6:26391:26391	1313493	0	True				
ANR	1313700	Identifier	p		1313493	0					
ANR	1313701	CompoundStatement		26:3:672:702	1313493	1					
ANR	1313702	IdentifierDeclStatement	int oline = ++ ( egg -> lang . line ) ;	989:3:26399:26429	1313493	0	True				
ANR	1313703	IdentifierDecl	oline = ++ ( egg -> lang . line )		1313493	0					
ANR	1313704	IdentifierDeclType	int		1313493	0					
ANR	1313705	Identifier	oline		1313493	1					
ANR	1313706	AssignmentExpression	oline = ++ ( egg -> lang . line )		1313493	2		=			
ANR	1313707	Identifier	oline		1313493	0					
ANR	1313708	UnaryExpression	++ ( egg -> lang . line )		1313493	1					
ANR	1313709	IncDec	++		1313493	0					
ANR	1313710	MemberAccess	egg -> lang . line		1313493	1					
ANR	1313711	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313712	Identifier	egg		1313493	0					
ANR	1313713	Identifier	lang		1313493	1					
ANR	1313714	Identifier	line		1313493	1					
ANR	1313715	ExpressionStatement	egg -> lang . elem [ 0 ] = 0	990:3:26434:26455	1313493	1	True				
ANR	1313716	AssignmentExpression	egg -> lang . elem [ 0 ] = 0		1313493	0		=			
ANR	1313717	ArrayIndexing	egg -> lang . elem [ 0 ]		1313493	0					
ANR	1313718	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1313719	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313720	Identifier	egg		1313493	0					
ANR	1313721	Identifier	lang		1313493	1					
ANR	1313722	Identifier	elem		1313493	1					
ANR	1313723	PrimaryExpression	0		1313493	1					
ANR	1313724	PrimaryExpression	0		1313493	1					
ANR	1313725	ExpressionStatement	egg -> lang . elem_n = 0	991:3:26502:26522	1313493	2	True				
ANR	1313726	AssignmentExpression	egg -> lang . elem_n = 0		1313493	0		=			
ANR	1313727	MemberAccess	egg -> lang . elem_n		1313493	0					
ANR	1313728	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313729	Identifier	egg		1313493	0					
ANR	1313730	Identifier	lang		1313493	1					
ANR	1313731	Identifier	elem_n		1313493	1					
ANR	1313732	PrimaryExpression	0		1313493	1					
ANR	1313733	ExpressionStatement	egg -> lang . line = 0	992:3:26527:26545	1313493	3	True				
ANR	1313734	AssignmentExpression	egg -> lang . line = 0		1313493	0		=			
ANR	1313735	MemberAccess	egg -> lang . line		1313493	0					
ANR	1313736	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313737	Identifier	egg		1313493	0					
ANR	1313738	Identifier	lang		1313493	1					
ANR	1313739	Identifier	line		1313493	1					
ANR	1313740	PrimaryExpression	0		1313493	1					
ANR	1313741	ForStatement	for ( ; * p ; p ++ )		1313493	4					
ANR	1313742	Condition	* p	993:10:26557:26558	1313493	0	True				
ANR	1313743	UnaryOperationExpression	* p		1313493	0					
ANR	1313744	UnaryOperator	*		1313493	0					
ANR	1313745	Identifier	p		1313493	1					
ANR	1313746	PostIncDecOperationExpression	p ++	993:14:26561:26563	1313493	1	True				
ANR	1313747	Identifier	p		1313493	0					
ANR	1313748	IncDec	++		1313493	1					
ANR	1313749	CompoundStatement		30:19:839:839	1313493	2					
ANR	1313750	ExpressionStatement	"r_egg_lang_parsechar ( egg , * p )"	994:4:26572:26602	1313493	0	True				
ANR	1313751	CallExpression	"r_egg_lang_parsechar ( egg , * p )"		1313493	0					
ANR	1313752	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1313753	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1313754	ArgumentList	egg		1313493	1					
ANR	1313755	Argument	egg		1313493	0					
ANR	1313756	Identifier	egg		1313493	0					
ANR	1313757	Argument	* p		1313493	1					
ANR	1313758	UnaryOperationExpression	* p		1313493	0					
ANR	1313759	UnaryOperator	*		1313493	0					
ANR	1313760	Identifier	p		1313493	1					
ANR	1313761	ExpressionStatement	free ( q )	996:3:26612:26620	1313493	5	True				
ANR	1313762	CallExpression	free ( q )		1313493	0					
ANR	1313763	Callee	free		1313493	0					
ANR	1313764	Identifier	free		1313493	0					
ANR	1313765	ArgumentList	q		1313493	1					
ANR	1313766	Argument	q		1313493	0					
ANR	1313767	Identifier	q		1313493	0					
ANR	1313768	ExpressionStatement	egg -> lang . line = oline	997:3:26625:26647	1313493	6	True				
ANR	1313769	AssignmentExpression	egg -> lang . line = oline		1313493	0		=			
ANR	1313770	MemberAccess	egg -> lang . line		1313493	0					
ANR	1313771	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313772	Identifier	egg		1313493	0					
ANR	1313773	Identifier	lang		1313493	1					
ANR	1313774	Identifier	line		1313493	1					
ANR	1313775	Identifier	oline		1313493	1					
ANR	1313776	ElseStatement	else		1313493	0					
ANR	1313777	CompoundStatement		35:9:931:931	1313493	0					
ANR	1313778	ExpressionStatement	"eprintf ( ""Cannot find '%s'\\n"" , path )"	999:3:26663:26699	1313493	0	True				
ANR	1313779	CallExpression	"eprintf ( ""Cannot find '%s'\\n"" , path )"		1313493	0					
ANR	1313780	Callee	eprintf		1313493	0					
ANR	1313781	Identifier	eprintf		1313493	0					
ANR	1313782	ArgumentList	"""Cannot find '%s'\\n"""		1313493	1					
ANR	1313783	Argument	"""Cannot find '%s'\\n"""		1313493	0					
ANR	1313784	PrimaryExpression	"""Cannot find '%s'\\n"""		1313493	0					
ANR	1313785	Argument	path		1313493	1					
ANR	1313786	Identifier	path		1313493	0					
ANR	1313787	ExpressionStatement	free ( path )	1001:2:26707:26718	1313493	9	True				
ANR	1313788	CallExpression	free ( path )		1313493	0					
ANR	1313789	Callee	free		1313493	0					
ANR	1313790	Identifier	free		1313493	0					
ANR	1313791	ArgumentList	path		1313493	1					
ANR	1313792	Argument	path		1313493	0					
ANR	1313793	Identifier	path		1313493	0					
ANR	1313794	ReturnStatement	return ;	1002:2:26722:26728	1313493	10	True				
ANR	1313795	ExpressionStatement	egg -> lang . docall = 1	1004:1:26734:26754	1313493	6	True				
ANR	1313796	AssignmentExpression	egg -> lang . docall = 1		1313493	0		=			
ANR	1313797	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1313798	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313799	Identifier	egg		1313493	0					
ANR	1313800	Identifier	lang		1313493	1					
ANR	1313801	Identifier	docall		1313493	1					
ANR	1313802	PrimaryExpression	1		1313493	1					
ANR	1313803	IfStatement	if ( egg -> lang . callname )		1313493	7					
ANR	1313804	Condition	egg -> lang . callname	1005:5:26761:26778	1313493	0	True				
ANR	1313805	MemberAccess	egg -> lang . callname		1313493	0					
ANR	1313806	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313807	Identifier	egg		1313493	0					
ANR	1313808	Identifier	lang		1313493	1					
ANR	1313809	Identifier	callname		1313493	1					
ANR	1313810	CompoundStatement		42:25:1054:1054	1313493	1					
ANR	1313811	IfStatement	"if ( ! strcmp ( egg -> lang . callname , ""goto"" ) )"		1313493	0					
ANR	1313812	Condition	"! strcmp ( egg -> lang . callname , ""goto"" )"	1006:6:26789:26824	1313493	0	True				
ANR	1313813	UnaryOperationExpression	"! strcmp ( egg -> lang . callname , ""goto"" )"		1313493	0					
ANR	1313814	UnaryOperator	!		1313493	0					
ANR	1313815	CallExpression	"strcmp ( egg -> lang . callname , ""goto"" )"		1313493	1					
ANR	1313816	Callee	strcmp		1313493	0					
ANR	1313817	Identifier	strcmp		1313493	0					
ANR	1313818	ArgumentList	egg -> lang . callname		1313493	1					
ANR	1313819	Argument	egg -> lang . callname		1313493	0					
ANR	1313820	MemberAccess	egg -> lang . callname		1313493	0					
ANR	1313821	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313822	Identifier	egg		1313493	0					
ANR	1313823	Identifier	lang		1313493	1					
ANR	1313824	Identifier	callname		1313493	1					
ANR	1313825	Argument	"""goto"""		1313493	1					
ANR	1313826	PrimaryExpression	"""goto"""		1313493	0					
ANR	1313827	CompoundStatement		43:44:1100:1100	1313493	1					
ANR	1313828	IfStatement	if ( egg -> lang . nargs != 1 )		1313493	0					
ANR	1313829	Condition	egg -> lang . nargs != 1	1007:7:26836:26855	1313493	0	True				
ANR	1313830	EqualityExpression	egg -> lang . nargs != 1		1313493	0		!=			
ANR	1313831	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1313832	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313833	Identifier	egg		1313493	0					
ANR	1313834	Identifier	lang		1313493	1					
ANR	1313835	Identifier	nargs		1313493	1					
ANR	1313836	PrimaryExpression	1		1313493	1					
ANR	1313837	CompoundStatement		44:29:1131:1131	1313493	1					
ANR	1313838	ExpressionStatement	"eprintf ( ""Invalid number of arguments for goto()\\n"" )"	1008:4:26864:26916	1313493	0	True				
ANR	1313839	CallExpression	"eprintf ( ""Invalid number of arguments for goto()\\n"" )"		1313493	0					
ANR	1313840	Callee	eprintf		1313493	0					
ANR	1313841	Identifier	eprintf		1313493	0					
ANR	1313842	ArgumentList	"""Invalid number of arguments for goto()\\n"""		1313493	1					
ANR	1313843	Argument	"""Invalid number of arguments for goto()\\n"""		1313493	0					
ANR	1313844	PrimaryExpression	"""Invalid number of arguments for goto()\\n"""		1313493	0					
ANR	1313845	ReturnStatement	return ;	1009:4:26922:26928	1313493	1	True				
ANR	1313846	ExpressionStatement	"e -> jmp ( egg , egg -> lang . ctxpush [ CTX ] , 0 )"	1011:3:26938:26977	1313493	1	True				
ANR	1313847	CallExpression	"e -> jmp ( egg , egg -> lang . ctxpush [ CTX ] , 0 )"		1313493	0					
ANR	1313848	Callee	e -> jmp		1313493	0					
ANR	1313849	PtrMemberAccess	e -> jmp		1313493	0					
ANR	1313850	Identifier	e		1313493	0					
ANR	1313851	Identifier	jmp		1313493	1					
ANR	1313852	ArgumentList	egg		1313493	1					
ANR	1313853	Argument	egg		1313493	0					
ANR	1313854	Identifier	egg		1313493	0					
ANR	1313855	Argument	egg -> lang . ctxpush [ CTX ]		1313493	1					
ANR	1313856	ArrayIndexing	egg -> lang . ctxpush [ CTX ]		1313493	0					
ANR	1313857	MemberAccess	egg -> lang . ctxpush		1313493	0					
ANR	1313858	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313859	Identifier	egg		1313493	0					
ANR	1313860	Identifier	lang		1313493	1					
ANR	1313861	Identifier	ctxpush		1313493	1					
ANR	1313862	Identifier	CTX		1313493	1					
ANR	1313863	Argument	0		1313493	2					
ANR	1313864	PrimaryExpression	0		1313493	0					
ANR	1313865	ExpressionStatement	rcc_reset_callname ( egg )	1012:3:26982:27006	1313493	2	True				
ANR	1313866	CallExpression	rcc_reset_callname ( egg )		1313493	0					
ANR	1313867	Callee	rcc_reset_callname		1313493	0					
ANR	1313868	Identifier	rcc_reset_callname		1313493	0					
ANR	1313869	ArgumentList	egg		1313493	1					
ANR	1313870	Argument	egg		1313493	0					
ANR	1313871	Identifier	egg		1313493	0					
ANR	1313872	ReturnStatement	return ;	1013:3:27011:27017	1313493	3	True				
ANR	1313873	IfStatement	"if ( ! strcmp ( egg -> lang . callname , ""break"" ) )"		1313493	1					
ANR	1313874	Condition	"! strcmp ( egg -> lang . callname , ""break"" )"	1015:6:27029:27065	1313493	0	True				
ANR	1313875	UnaryOperationExpression	"! strcmp ( egg -> lang . callname , ""break"" )"		1313493	0					
ANR	1313876	UnaryOperator	!		1313493	0					
ANR	1313877	CallExpression	"strcmp ( egg -> lang . callname , ""break"" )"		1313493	1					
ANR	1313878	Callee	strcmp		1313493	0					
ANR	1313879	Identifier	strcmp		1313493	0					
ANR	1313880	ArgumentList	egg -> lang . callname		1313493	1					
ANR	1313881	Argument	egg -> lang . callname		1313493	0					
ANR	1313882	MemberAccess	egg -> lang . callname		1313493	0					
ANR	1313883	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313884	Identifier	egg		1313493	0					
ANR	1313885	Identifier	lang		1313493	1					
ANR	1313886	Identifier	callname		1313493	1					
ANR	1313887	Argument	"""break"""		1313493	1					
ANR	1313888	PrimaryExpression	"""break"""		1313493	0					
ANR	1313889	CompoundStatement		52:45:1341:1341	1313493	1					
ANR	1313890	ExpressionStatement	e -> trap ( egg )	1016:3:27073:27086	1313493	0	True				
ANR	1313891	CallExpression	e -> trap ( egg )		1313493	0					
ANR	1313892	Callee	e -> trap		1313493	0					
ANR	1313893	PtrMemberAccess	e -> trap		1313493	0					
ANR	1313894	Identifier	e		1313493	0					
ANR	1313895	Identifier	trap		1313493	1					
ANR	1313896	ArgumentList	egg		1313493	1					
ANR	1313897	Argument	egg		1313493	0					
ANR	1313898	Identifier	egg		1313493	0					
ANR	1313899	ExpressionStatement	rcc_reset_callname ( egg )	1017:3:27091:27115	1313493	1	True				
ANR	1313900	CallExpression	rcc_reset_callname ( egg )		1313493	0					
ANR	1313901	Callee	rcc_reset_callname		1313493	0					
ANR	1313902	Identifier	rcc_reset_callname		1313493	0					
ANR	1313903	ArgumentList	egg		1313493	1					
ANR	1313904	Argument	egg		1313493	0					
ANR	1313905	Identifier	egg		1313493	0					
ANR	1313906	ReturnStatement	return ;	1018:3:27120:27126	1313493	2	True				
ANR	1313907	ExpressionStatement	"ptr = strchr ( egg -> lang . callname , '=' )"	1020:2:27134:27172	1313493	2	True				
ANR	1313908	AssignmentExpression	"ptr = strchr ( egg -> lang . callname , '=' )"		1313493	0		=			
ANR	1313909	Identifier	ptr		1313493	0					
ANR	1313910	CallExpression	"strchr ( egg -> lang . callname , '=' )"		1313493	1					
ANR	1313911	Callee	strchr		1313493	0					
ANR	1313912	Identifier	strchr		1313493	0					
ANR	1313913	ArgumentList	egg -> lang . callname		1313493	1					
ANR	1313914	Argument	egg -> lang . callname		1313493	0					
ANR	1313915	MemberAccess	egg -> lang . callname		1313493	0					
ANR	1313916	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313917	Identifier	egg		1313493	0					
ANR	1313918	Identifier	lang		1313493	1					
ANR	1313919	Identifier	callname		1313493	1					
ANR	1313920	Argument	'='		1313493	1					
ANR	1313921	PrimaryExpression	'='		1313493	0					
ANR	1313922	IfStatement	if ( ptr )		1313493	3					
ANR	1313923	Condition	ptr	1021:6:27180:27182	1313493	0	True				
ANR	1313924	Identifier	ptr		1313493	0					
ANR	1313925	CompoundStatement		58:11:1458:1458	1313493	1					
ANR	1313926	ExpressionStatement	* ptr = '\\0'	1022:3:27190:27201	1313493	0	True				
ANR	1313927	AssignmentExpression	* ptr = '\\0'		1313493	0		=			
ANR	1313928	UnaryOperationExpression	* ptr		1313493	0					
ANR	1313929	UnaryOperator	*		1313493	0					
ANR	1313930	Identifier	ptr		1313493	1					
ANR	1313931	PrimaryExpression	'\\0'		1313493	1					
ANR	1313932	ExpressionStatement	ocn = skipspaces ( egg -> lang . callname )	1025:2:27258:27295	1313493	4	True				
ANR	1313933	AssignmentExpression	ocn = skipspaces ( egg -> lang . callname )		1313493	0		=			
ANR	1313934	Identifier	ocn		1313493	0					
ANR	1313935	CallExpression	skipspaces ( egg -> lang . callname )		1313493	1					
ANR	1313936	Callee	skipspaces		1313493	0					
ANR	1313937	Identifier	skipspaces		1313493	0					
ANR	1313938	ArgumentList	egg -> lang . callname		1313493	1					
ANR	1313939	Argument	egg -> lang . callname		1313493	0					
ANR	1313940	MemberAccess	egg -> lang . callname		1313493	0					
ANR	1313941	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1313942	Identifier	egg		1313493	0					
ANR	1313943	Identifier	lang		1313493	1					
ANR	1313944	Identifier	callname		1313493	1					
ANR	1313945	IfStatement	if ( ! ocn )		1313493	5					
ANR	1313946	Condition	! ocn	1026:6:27303:27306	1313493	0	True				
ANR	1313947	UnaryOperationExpression	! ocn		1313493	0					
ANR	1313948	UnaryOperator	!		1313493	0					
ANR	1313949	Identifier	ocn		1313493	1					
ANR	1313950	CompoundStatement		63:12:1582:1582	1313493	1					
ANR	1313951	ReturnStatement	return ;	1027:3:27314:27320	1313493	0	True				
ANR	1313952	ExpressionStatement	"str = r_egg_mkvar ( egg , buf , ocn , 0 )"	1029:2:27328:27364	1313493	6	True				
ANR	1313953	AssignmentExpression	"str = r_egg_mkvar ( egg , buf , ocn , 0 )"		1313493	0		=			
ANR	1313954	Identifier	str		1313493	0					
ANR	1313955	CallExpression	"r_egg_mkvar ( egg , buf , ocn , 0 )"		1313493	1					
ANR	1313956	Callee	r_egg_mkvar		1313493	0					
ANR	1313957	Identifier	r_egg_mkvar		1313493	0					
ANR	1313958	ArgumentList	egg		1313493	1					
ANR	1313959	Argument	egg		1313493	0					
ANR	1313960	Identifier	egg		1313493	0					
ANR	1313961	Argument	buf		1313493	1					
ANR	1313962	Identifier	buf		1313493	0					
ANR	1313963	Argument	ocn		1313493	2					
ANR	1313964	Identifier	ocn		1313493	0					
ANR	1313965	Argument	0		1313493	3					
ANR	1313966	PrimaryExpression	0		1313493	0					
ANR	1313967	IfStatement	if ( ! str )		1313493	7					
ANR	1313968	Condition	! str	1030:6:27372:27375	1313493	0	True				
ANR	1313969	UnaryOperationExpression	! str		1313493	0					
ANR	1313970	UnaryOperator	!		1313493	0					
ANR	1313971	Identifier	str		1313493	1					
ANR	1313972	CompoundStatement		67:12:1651:1651	1313493	1					
ANR	1313973	ExpressionStatement	"eprintf ( ""Cannot mkvar\\n"" )"	1031:3:27383:27409	1313493	0	True				
ANR	1313974	CallExpression	"eprintf ( ""Cannot mkvar\\n"" )"		1313493	0					
ANR	1313975	Callee	eprintf		1313493	0					
ANR	1313976	Identifier	eprintf		1313493	0					
ANR	1313977	ArgumentList	"""Cannot mkvar\\n"""		1313493	1					
ANR	1313978	Argument	"""Cannot mkvar\\n"""		1313493	0					
ANR	1313979	PrimaryExpression	"""Cannot mkvar\\n"""		1313493	0					
ANR	1313980	ReturnStatement	return ;	1032:3:27414:27420	1313493	1	True				
ANR	1313981	IfStatement	if ( * ocn == '.' )		1313493	8					
ANR	1313982	Condition	* ocn == '.'	1034:6:27432:27442	1313493	0	True				
ANR	1313983	EqualityExpression	* ocn == '.'		1313493	0		==			
ANR	1313984	UnaryOperationExpression	* ocn		1313493	0					
ANR	1313985	UnaryOperator	*		1313493	0					
ANR	1313986	Identifier	ocn		1313493	1					
ANR	1313987	PrimaryExpression	'.'		1313493	1					
ANR	1313988	CompoundStatement		71:19:1718:1718	1313493	1					
ANR	1313989	ExpressionStatement	"e -> call ( egg , str , 1 )"	1035:3:27450:27471	1313493	0	True				
ANR	1313990	CallExpression	"e -> call ( egg , str , 1 )"		1313493	0					
ANR	1313991	Callee	e -> call		1313493	0					
ANR	1313992	PtrMemberAccess	e -> call		1313493	0					
ANR	1313993	Identifier	e		1313493	0					
ANR	1313994	Identifier	call		1313493	1					
ANR	1313995	ArgumentList	egg		1313493	1					
ANR	1313996	Argument	egg		1313493	0					
ANR	1313997	Identifier	egg		1313493	0					
ANR	1313998	Argument	str		1313493	1					
ANR	1313999	Identifier	str		1313493	0					
ANR	1314000	Argument	1		1313493	2					
ANR	1314001	PrimaryExpression	1		1313493	0					
ANR	1314002	IfStatement	"if ( ! strcmp ( str , ""while"" ) )"		1313493	9					
ANR	1314003	Condition	"! strcmp ( str , ""while"" )"	1037:6:27483:27504	1313493	0	True				
ANR	1314004	UnaryOperationExpression	"! strcmp ( str , ""while"" )"		1313493	0					
ANR	1314005	UnaryOperator	!		1313493	0					
ANR	1314006	CallExpression	"strcmp ( str , ""while"" )"		1313493	1					
ANR	1314007	Callee	strcmp		1313493	0					
ANR	1314008	Identifier	strcmp		1313493	0					
ANR	1314009	ArgumentList	str		1313493	1					
ANR	1314010	Argument	str		1313493	0					
ANR	1314011	Identifier	str		1313493	0					
ANR	1314012	Argument	"""while"""		1313493	1					
ANR	1314013	PrimaryExpression	"""while"""		1313493	0					
ANR	1314014	CompoundStatement		75:3:1785:1798	1313493	1					
ANR	1314015	IdentifierDeclStatement	char var [ 128 ] ;	1038:3:27512:27525	1313493	0	True				
ANR	1314016	IdentifierDecl	var [ 128 ]		1313493	0					
ANR	1314017	IdentifierDeclType	char [ 128 ]		1313493	0					
ANR	1314018	Identifier	var		1313493	1					
ANR	1314019	PrimaryExpression	128		1313493	2					
ANR	1314020	IfStatement	if ( egg -> lang . lastctxdelta >= 0 )		1313493	1					
ANR	1314021	Condition	egg -> lang . lastctxdelta >= 0	1039:7:27534:27560	1313493	0	True				
ANR	1314022	RelationalExpression	egg -> lang . lastctxdelta >= 0		1313493	0		>=			
ANR	1314023	MemberAccess	egg -> lang . lastctxdelta		1313493	0					
ANR	1314024	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314025	Identifier	egg		1313493	0					
ANR	1314026	Identifier	lang		1313493	1					
ANR	1314027	Identifier	lastctxdelta		1313493	1					
ANR	1314028	PrimaryExpression	0		1313493	1					
ANR	1314029	CompoundStatement		76:36:1836:1836	1313493	1					
ANR	1314030	ExpressionStatement	"exit ( eprintf ( ""ERROR: Unsupported while syntax\\n"" ) )"	1040:4:27569:27621	1313493	0	True				
ANR	1314031	CallExpression	"exit ( eprintf ( ""ERROR: Unsupported while syntax\\n"" ) )"		1313493	0					
ANR	1314032	Callee	exit		1313493	0					
ANR	1314033	Identifier	exit		1313493	0					
ANR	1314034	ArgumentList	"eprintf ( ""ERROR: Unsupported while syntax\\n"" )"		1313493	1					
ANR	1314035	Argument	"eprintf ( ""ERROR: Unsupported while syntax\\n"" )"		1313493	0					
ANR	1314036	CallExpression	"eprintf ( ""ERROR: Unsupported while syntax\\n"" )"		1313493	0					
ANR	1314037	Callee	eprintf		1313493	0					
ANR	1314038	Identifier	eprintf		1313493	0					
ANR	1314039	ArgumentList	"""ERROR: Unsupported while syntax\\n"""		1313493	1					
ANR	1314040	Argument	"""ERROR: Unsupported while syntax\\n"""		1313493	0					
ANR	1314041	PrimaryExpression	"""ERROR: Unsupported while syntax\\n"""		1313493	0					
ANR	1314042	ExpressionStatement	"sprintf ( var , ""__begin_%d_%d_%d\\n"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX - 1 ] )"	1042:3:27631:27721	1313493	2	True				
ANR	1314043	CallExpression	"sprintf ( var , ""__begin_%d_%d_%d\\n"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX - 1 ] )"		1313493	0					
ANR	1314044	Callee	sprintf		1313493	0					
ANR	1314045	Identifier	sprintf		1313493	0					
ANR	1314046	ArgumentList	var		1313493	1					
ANR	1314047	Argument	var		1313493	0					
ANR	1314048	Identifier	var		1313493	0					
ANR	1314049	Argument	"""__begin_%d_%d_%d\\n"""		1313493	1					
ANR	1314050	PrimaryExpression	"""__begin_%d_%d_%d\\n"""		1313493	0					
ANR	1314051	Argument	egg -> lang . nfunctions		1313493	2					
ANR	1314052	MemberAccess	egg -> lang . nfunctions		1313493	0					
ANR	1314053	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314054	Identifier	egg		1313493	0					
ANR	1314055	Identifier	lang		1313493	1					
ANR	1314056	Identifier	nfunctions		1313493	1					
ANR	1314057	Argument	CTX		1313493	3					
ANR	1314058	Identifier	CTX		1313493	0					
ANR	1314059	Argument	egg -> lang . nestedi [ CTX - 1 ]		1313493	4					
ANR	1314060	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1313493	0					
ANR	1314061	MemberAccess	egg -> lang . nestedi		1313493	0					
ANR	1314062	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314063	Identifier	egg		1313493	0					
ANR	1314064	Identifier	lang		1313493	1					
ANR	1314065	Identifier	nestedi		1313493	1					
ANR	1314066	AdditiveExpression	CTX - 1		1313493	1		-			
ANR	1314067	Identifier	CTX		1313493	0					
ANR	1314068	PrimaryExpression	1		1313493	1					
ANR	1314069	ExpressionStatement	"e -> while_end ( egg , var )"	1043:3:27726:27749	1313493	3	True				
ANR	1314070	CallExpression	"e -> while_end ( egg , var )"		1313493	0					
ANR	1314071	Callee	e -> while_end		1313493	0					
ANR	1314072	PtrMemberAccess	e -> while_end		1313493	0					
ANR	1314073	Identifier	e		1313493	0					
ANR	1314074	Identifier	while_end		1313493	1					
ANR	1314075	ArgumentList	egg		1313493	1					
ANR	1314076	Argument	egg		1313493	0					
ANR	1314077	Identifier	egg		1313493	0					
ANR	1314078	Argument	var		1313493	1					
ANR	1314079	Identifier	var		1313493	0					
ANR	1314080	ExpressionStatement	"eprintf ( ""------------------------------------------ lastctx: %d\\n"" , egg -> lang . lastctxdelta )"	1045:3:27784:27876	1313493	4	True				
ANR	1314081	CallExpression	"eprintf ( ""------------------------------------------ lastctx: %d\\n"" , egg -> lang . lastctxdelta )"		1313493	0					
ANR	1314082	Callee	eprintf		1313493	0					
ANR	1314083	Identifier	eprintf		1313493	0					
ANR	1314084	ArgumentList	"""------------------------------------------ lastctx: %d\\n"""		1313493	1					
ANR	1314085	Argument	"""------------------------------------------ lastctx: %d\\n"""		1313493	0					
ANR	1314086	PrimaryExpression	"""------------------------------------------ lastctx: %d\\n"""		1313493	0					
ANR	1314087	Argument	egg -> lang . lastctxdelta		1313493	1					
ANR	1314088	MemberAccess	egg -> lang . lastctxdelta		1313493	0					
ANR	1314089	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314090	Identifier	egg		1313493	0					
ANR	1314091	Identifier	lang		1313493	1					
ANR	1314092	Identifier	lastctxdelta		1313493	1					
ANR	1314093	ExpressionStatement	"rcc_printf ( ""  pop %%eax\\n"" )"	1049:3:28098:28126	1313493	5	True				
ANR	1314094	CallExpression	"rcc_printf ( ""  pop %%eax\\n"" )"		1313493	0					
ANR	1314095	Callee	rcc_printf		1313493	0					
ANR	1314096	Identifier	rcc_printf		1313493	0					
ANR	1314097	ArgumentList	"""  pop %%eax\\n"""		1313493	1					
ANR	1314098	Argument	"""  pop %%eax\\n"""		1313493	0					
ANR	1314099	PrimaryExpression	"""  pop %%eax\\n"""		1313493	0					
ANR	1314100	ExpressionStatement	"rcc_printf ( ""  cmp $0, %%eax\\n"" )"	1050:3:28131:28163	1313493	6	True				
ANR	1314101	CallExpression	"rcc_printf ( ""  cmp $0, %%eax\\n"" )"		1313493	0					
ANR	1314102	Callee	rcc_printf		1313493	0					
ANR	1314103	Identifier	rcc_printf		1313493	0					
ANR	1314104	ArgumentList	"""  cmp $0, %%eax\\n"""		1313493	1					
ANR	1314105	Argument	"""  cmp $0, %%eax\\n"""		1313493	0					
ANR	1314106	PrimaryExpression	"""  cmp $0, %%eax\\n"""		1313493	0					
ANR	1314107	IfStatement	if ( egg -> lang . lastctxdelta < 0 )		1313493	7					
ANR	1314108	Condition	egg -> lang . lastctxdelta < 0	1054:7:28311:28336	1313493	0	True				
ANR	1314109	RelationalExpression	egg -> lang . lastctxdelta < 0		1313493	0		<			
ANR	1314110	MemberAccess	egg -> lang . lastctxdelta		1313493	0					
ANR	1314111	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314112	Identifier	egg		1313493	0					
ANR	1314113	Identifier	lang		1313493	1					
ANR	1314114	Identifier	lastctxdelta		1313493	1					
ANR	1314115	PrimaryExpression	0		1313493	1					
ANR	1314116	CompoundStatement		91:35:2612:2612	1313493	1					
ANR	1314117	ExpressionStatement	"rcc_printf ( ""  jnz %s\\n"" , get_frame_label ( 1 ) )"	1055:4:28345:28391	1313493	0	True				
ANR	1314118	CallExpression	"rcc_printf ( ""  jnz %s\\n"" , get_frame_label ( 1 ) )"		1313493	0					
ANR	1314119	Callee	rcc_printf		1313493	0					
ANR	1314120	Identifier	rcc_printf		1313493	0					
ANR	1314121	ArgumentList	"""  jnz %s\\n"""		1313493	1					
ANR	1314122	Argument	"""  jnz %s\\n"""		1313493	0					
ANR	1314123	PrimaryExpression	"""  jnz %s\\n"""		1313493	0					
ANR	1314124	Argument	get_frame_label ( 1 )		1313493	1					
ANR	1314125	CallExpression	get_frame_label ( 1 )		1313493	0					
ANR	1314126	Callee	get_frame_label		1313493	0					
ANR	1314127	Identifier	get_frame_label		1313493	0					
ANR	1314128	ArgumentList	1		1313493	1					
ANR	1314129	Argument	1		1313493	0					
ANR	1314130	PrimaryExpression	1		1313493	0					
ANR	1314131	ElseStatement	else		1313493	0					
ANR	1314132	CompoundStatement		93:10:2676:2676	1313493	0					
ANR	1314133	ExpressionStatement	"rcc_printf ( ""  jnz %s\\n"" , get_frame_label ( 0 ) )"	1057:4:28409:28455	1313493	0	True				
ANR	1314134	CallExpression	"rcc_printf ( ""  jnz %s\\n"" , get_frame_label ( 0 ) )"		1313493	0					
ANR	1314135	Callee	rcc_printf		1313493	0					
ANR	1314136	Identifier	rcc_printf		1313493	0					
ANR	1314137	ArgumentList	"""  jnz %s\\n"""		1313493	1					
ANR	1314138	Argument	"""  jnz %s\\n"""		1313493	0					
ANR	1314139	PrimaryExpression	"""  jnz %s\\n"""		1313493	0					
ANR	1314140	Argument	get_frame_label ( 0 )		1313493	1					
ANR	1314141	CallExpression	get_frame_label ( 0 )		1313493	0					
ANR	1314142	Callee	get_frame_label		1313493	0					
ANR	1314143	Identifier	get_frame_label		1313493	0					
ANR	1314144	ArgumentList	0		1313493	1					
ANR	1314145	Argument	0		1313493	0					
ANR	1314146	PrimaryExpression	0		1313493	0					
ANR	1314147	ExpressionStatement	egg -> lang . nargs = 0	1062:3:28541:28560	1313493	8	True				
ANR	1314148	AssignmentExpression	egg -> lang . nargs = 0		1313493	0		=			
ANR	1314149	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1314150	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314151	Identifier	egg		1313493	0					
ANR	1314152	Identifier	lang		1313493	1					
ANR	1314153	Identifier	nargs		1313493	1					
ANR	1314154	PrimaryExpression	0		1313493	1					
ANR	1314155	ElseStatement	else		1313493	0					
ANR	1314156	CompoundStatement		100:9:2844:2844	1313493	0					
ANR	1314157	ForStatement	for ( i = 0 ; i < egg -> lang . nsyscalls ; i ++ )		1313493	0					
ANR	1314158	ForInit	i = 0 ;	1064:8:28581:28586	1313493	0	True				
ANR	1314159	AssignmentExpression	i = 0		1313493	0		=			
ANR	1314160	Identifier	i		1313493	0					
ANR	1314161	PrimaryExpression	0		1313493	1					
ANR	1314162	Condition	i < egg -> lang . nsyscalls	1064:15:28588:28610	1313493	1	True				
ANR	1314163	RelationalExpression	i < egg -> lang . nsyscalls		1313493	0		<			
ANR	1314164	Identifier	i		1313493	0					
ANR	1314165	MemberAccess	egg -> lang . nsyscalls		1313493	1					
ANR	1314166	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314167	Identifier	egg		1313493	0					
ANR	1314168	Identifier	lang		1313493	1					
ANR	1314169	Identifier	nsyscalls		1313493	1					
ANR	1314170	PostIncDecOperationExpression	i ++	1064:40:28613:28615	1313493	2	True				
ANR	1314171	Identifier	i		1313493	0					
ANR	1314172	IncDec	++		1313493	1					
ANR	1314173	CompoundStatement		101:45:2891:2891	1313493	3					
ANR	1314174	IfStatement	"if ( ! strcmp ( str , egg -> lang . syscalls [ i ] . name ) )"		1313493	0					
ANR	1314175	Condition	"! strcmp ( str , egg -> lang . syscalls [ i ] . name )"	1065:8:28628:28668	1313493	0	True				
ANR	1314176	UnaryOperationExpression	"! strcmp ( str , egg -> lang . syscalls [ i ] . name )"		1313493	0					
ANR	1314177	UnaryOperator	!		1313493	0					
ANR	1314178	CallExpression	"strcmp ( str , egg -> lang . syscalls [ i ] . name )"		1313493	1					
ANR	1314179	Callee	strcmp		1313493	0					
ANR	1314180	Identifier	strcmp		1313493	0					
ANR	1314181	ArgumentList	str		1313493	1					
ANR	1314182	Argument	str		1313493	0					
ANR	1314183	Identifier	str		1313493	0					
ANR	1314184	Argument	egg -> lang . syscalls [ i ] . name		1313493	1					
ANR	1314185	MemberAccess	egg -> lang . syscalls [ i ] . name		1313493	0					
ANR	1314186	ArrayIndexing	egg -> lang . syscalls [ i ]		1313493	0					
ANR	1314187	MemberAccess	egg -> lang . syscalls		1313493	0					
ANR	1314188	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314189	Identifier	egg		1313493	0					
ANR	1314190	Identifier	lang		1313493	1					
ANR	1314191	Identifier	syscalls		1313493	1					
ANR	1314192	Identifier	i		1313493	1					
ANR	1314193	Identifier	name		1313493	1					
ANR	1314194	CompoundStatement		102:51:2944:2944	1313493	1					
ANR	1314195	ExpressionStatement	p = egg -> lang . syscallbody	1066:5:28678:28703	1313493	0	True				
ANR	1314196	AssignmentExpression	p = egg -> lang . syscallbody		1313493	0		=			
ANR	1314197	Identifier	p		1313493	0					
ANR	1314198	MemberAccess	egg -> lang . syscallbody		1313493	1					
ANR	1314199	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314200	Identifier	egg		1313493	0					
ANR	1314201	Identifier	lang		1313493	1					
ANR	1314202	Identifier	syscallbody		1313493	1					
ANR	1314203	ExpressionStatement	"e -> comment ( egg , ""set syscall args"" )"	1067:5:28710:28746	1313493	1	True				
ANR	1314204	CallExpression	"e -> comment ( egg , ""set syscall args"" )"		1313493	0					
ANR	1314205	Callee	e -> comment		1313493	0					
ANR	1314206	PtrMemberAccess	e -> comment		1313493	0					
ANR	1314207	Identifier	e		1313493	0					
ANR	1314208	Identifier	comment		1313493	1					
ANR	1314209	ArgumentList	egg		1313493	1					
ANR	1314210	Argument	egg		1313493	0					
ANR	1314211	Identifier	egg		1313493	0					
ANR	1314212	Argument	"""set syscall args"""		1313493	1					
ANR	1314213	PrimaryExpression	"""set syscall args"""		1313493	0					
ANR	1314214	ExpressionStatement	"e -> syscall_args ( egg , egg -> lang . nargs )"	1068:5:28753:28791	1313493	2	True				
ANR	1314215	CallExpression	"e -> syscall_args ( egg , egg -> lang . nargs )"		1313493	0					
ANR	1314216	Callee	e -> syscall_args		1313493	0					
ANR	1314217	PtrMemberAccess	e -> syscall_args		1313493	0					
ANR	1314218	Identifier	e		1313493	0					
ANR	1314219	Identifier	syscall_args		1313493	1					
ANR	1314220	ArgumentList	egg		1313493	1					
ANR	1314221	Argument	egg		1313493	0					
ANR	1314222	Identifier	egg		1313493	0					
ANR	1314223	Argument	egg -> lang . nargs		1313493	1					
ANR	1314224	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1314225	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314226	Identifier	egg		1313493	0					
ANR	1314227	Identifier	lang		1313493	1					
ANR	1314228	Identifier	nargs		1313493	1					
ANR	1314229	ExpressionStatement	egg -> lang . docall = 0	1069:5:28798:28818	1313493	3	True				
ANR	1314230	AssignmentExpression	egg -> lang . docall = 0		1313493	0		=			
ANR	1314231	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314232	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314233	Identifier	egg		1313493	0					
ANR	1314234	Identifier	lang		1313493	1					
ANR	1314235	Identifier	docall		1313493	1					
ANR	1314236	PrimaryExpression	0		1313493	1					
ANR	1314237	ExpressionStatement	"e -> comment ( egg , ""syscall"" )"	1070:5:28825:28852	1313493	4	True				
ANR	1314238	CallExpression	"e -> comment ( egg , ""syscall"" )"		1313493	0					
ANR	1314239	Callee	e -> comment		1313493	0					
ANR	1314240	PtrMemberAccess	e -> comment		1313493	0					
ANR	1314241	Identifier	e		1313493	0					
ANR	1314242	Identifier	comment		1313493	1					
ANR	1314243	ArgumentList	egg		1313493	1					
ANR	1314244	Argument	egg		1313493	0					
ANR	1314245	Identifier	egg		1313493	0					
ANR	1314246	Argument	"""syscall"""		1313493	1					
ANR	1314247	PrimaryExpression	"""syscall"""		1313493	0					
ANR	1314248	ExpressionStatement	"r_egg_lang_parsechar ( egg , '\\n' )"	1071:5:28859:28891	1313493	5	True				
ANR	1314249	CallExpression	"r_egg_lang_parsechar ( egg , '\\n' )"		1313493	0					
ANR	1314250	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1314251	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1314252	ArgumentList	egg		1313493	1					
ANR	1314253	Argument	egg		1313493	0					
ANR	1314254	Identifier	egg		1313493	0					
ANR	1314255	Argument	'\\n'		1313493	1					
ANR	1314256	PrimaryExpression	'\\n'		1313493	0					
ANR	1314257	IfStatement	if ( p )		1313493	6					
ANR	1314258	Condition	p	1072:9:28926:28926	1313493	0	True				
ANR	1314259	Identifier	p		1313493	0					
ANR	1314260	CompoundStatement		109:12:3202:3202	1313493	1					
ANR	1314261	ForStatement	for ( ; * p ; p ++ )		1313493	0					
ANR	1314262	Condition	* p	1073:13:28944:28945	1313493	0	True				
ANR	1314263	UnaryOperationExpression	* p		1313493	0					
ANR	1314264	UnaryOperator	*		1313493	0					
ANR	1314265	Identifier	p		1313493	1					
ANR	1314266	PostIncDecOperationExpression	p ++	1073:17:28948:28950	1313493	1	True				
ANR	1314267	Identifier	p		1313493	0					
ANR	1314268	IncDec	++		1313493	1					
ANR	1314269	CompoundStatement		110:22:3226:3226	1313493	2					
ANR	1314270	ExpressionStatement	"r_egg_lang_parsechar ( egg , * p )"	1074:7:28962:28992	1313493	0	True				
ANR	1314271	CallExpression	"r_egg_lang_parsechar ( egg , * p )"		1313493	0					
ANR	1314272	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1314273	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1314274	ArgumentList	egg		1313493	1					
ANR	1314275	Argument	egg		1313493	0					
ANR	1314276	Identifier	egg		1313493	0					
ANR	1314277	Argument	* p		1313493	1					
ANR	1314278	UnaryOperationExpression	* p		1313493	0					
ANR	1314279	UnaryOperator	*		1313493	0					
ANR	1314280	Identifier	p		1313493	1					
ANR	1314281	ElseStatement	else		1313493	0					
ANR	1314282	CompoundStatement		114:6:3295:3342	1313493	0					
ANR	1314283	IdentifierDeclStatement	"char * q , * s = e -> syscall ( egg , egg -> lang . nargs ) ;"	1077:6:29022:29069	1313493	0	True				
ANR	1314284	IdentifierDecl	* q		1313493	0					
ANR	1314285	IdentifierDeclType	char *		1313493	0					
ANR	1314286	Identifier	q		1313493	1					
ANR	1314287	IdentifierDecl	"* s = e -> syscall ( egg , egg -> lang . nargs )"		1313493	1					
ANR	1314288	IdentifierDeclType	char *		1313493	0					
ANR	1314289	Identifier	s		1313493	1					
ANR	1314290	AssignmentExpression	"* s = e -> syscall ( egg , egg -> lang . nargs )"		1313493	2		=			
ANR	1314291	Identifier	s		1313493	0					
ANR	1314292	CallExpression	"e -> syscall ( egg , egg -> lang . nargs )"		1313493	1					
ANR	1314293	Callee	e -> syscall		1313493	0					
ANR	1314294	PtrMemberAccess	e -> syscall		1313493	0					
ANR	1314295	Identifier	e		1313493	0					
ANR	1314296	Identifier	syscall		1313493	1					
ANR	1314297	ArgumentList	egg		1313493	1					
ANR	1314298	Argument	egg		1313493	0					
ANR	1314299	Identifier	egg		1313493	0					
ANR	1314300	Argument	egg -> lang . nargs		1313493	1					
ANR	1314301	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1314302	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314303	Identifier	egg		1313493	0					
ANR	1314304	Identifier	lang		1313493	1					
ANR	1314305	Identifier	nargs		1313493	1					
ANR	1314306	IfStatement	if ( s )		1313493	1					
ANR	1314307	Condition	s	1078:10:29081:29081	1313493	0	True				
ANR	1314308	Identifier	s		1313493	0					
ANR	1314309	CompoundStatement		115:13:3357:3357	1313493	1					
ANR	1314310	ForStatement	for ( q = s ; * q ; q ++ )		1313493	0					
ANR	1314311	ForInit	q = s ;	1079:12:29098:29103	1313493	0	True				
ANR	1314312	AssignmentExpression	q = s		1313493	0		=			
ANR	1314313	Identifier	q		1313493	0					
ANR	1314314	Identifier	s		1313493	1					
ANR	1314315	Condition	* q	1079:19:29105:29106	1313493	1	True				
ANR	1314316	UnaryOperationExpression	* q		1313493	0					
ANR	1314317	UnaryOperator	*		1313493	0					
ANR	1314318	Identifier	q		1313493	1					
ANR	1314319	PostIncDecOperationExpression	q ++	1079:23:29109:29111	1313493	2	True				
ANR	1314320	Identifier	q		1313493	0					
ANR	1314321	IncDec	++		1313493	1					
ANR	1314322	CompoundStatement		116:28:3387:3387	1313493	3					
ANR	1314323	ExpressionStatement	"r_egg_lang_parsechar ( egg , * q )"	1080:8:29124:29154	1313493	0	True				
ANR	1314324	CallExpression	"r_egg_lang_parsechar ( egg , * q )"		1313493	0					
ANR	1314325	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1314326	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1314327	ArgumentList	egg		1313493	1					
ANR	1314328	Argument	egg		1313493	0					
ANR	1314329	Identifier	egg		1313493	0					
ANR	1314330	Argument	* q		1313493	1					
ANR	1314331	UnaryOperationExpression	* q		1313493	0					
ANR	1314332	UnaryOperator	*		1313493	0					
ANR	1314333	Identifier	q		1313493	1					
ANR	1314334	ExpressionStatement	free ( s )	1082:7:29172:29180	1313493	1	True				
ANR	1314335	CallExpression	free ( s )		1313493	0					
ANR	1314336	Callee	free		1313493	0					
ANR	1314337	Identifier	free		1313493	0					
ANR	1314338	ArgumentList	s		1313493	1					
ANR	1314339	Argument	s		1313493	0					
ANR	1314340	Identifier	s		1313493	0					
ANR	1314341	ElseStatement	else		1313493	0					
ANR	1314342	CompoundStatement		120:13:3468:3468	1313493	0					
ANR	1314343	ExpressionStatement	"eprintf ( ""Cannot get @syscall payload\\n"" )"	1084:7:29204:29245	1313493	0	True				
ANR	1314344	CallExpression	"eprintf ( ""Cannot get @syscall payload\\n"" )"		1313493	0					
ANR	1314345	Callee	eprintf		1313493	0					
ANR	1314346	Identifier	eprintf		1313493	0					
ANR	1314347	ArgumentList	"""Cannot get @syscall payload\\n"""		1313493	1					
ANR	1314348	Argument	"""Cannot get @syscall payload\\n"""		1313493	0					
ANR	1314349	PrimaryExpression	"""Cannot get @syscall payload\\n"""		1313493	0					
ANR	1314350	ExpressionStatement	egg -> lang . docall = 0	1087:5:29267:29287	1313493	7	True				
ANR	1314351	AssignmentExpression	egg -> lang . docall = 0		1313493	0		=			
ANR	1314352	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314353	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314354	Identifier	egg		1313493	0					
ANR	1314355	Identifier	lang		1313493	1					
ANR	1314356	Identifier	docall		1313493	1					
ANR	1314357	PrimaryExpression	0		1313493	1					
ANR	1314358	BreakStatement	break ;	1088:5:29294:29299	1313493	8	True				
ANR	1314359	IfStatement	if ( egg -> lang . docall )		1313493	1					
ANR	1314360	Condition	egg -> lang . docall	1091:7:29319:29334	1313493	0	True				
ANR	1314361	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314362	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314363	Identifier	egg		1313493	0					
ANR	1314364	Identifier	lang		1313493	1					
ANR	1314365	Identifier	docall		1313493	1					
ANR	1314366	CompoundStatement		128:25:3610:3610	1313493	1					
ANR	1314367	ForStatement	for ( i = 0 ; i < egg -> lang . ninlines ; i ++ )		1313493	0					
ANR	1314368	ForInit	i = 0 ;	1092:9:29348:29353	1313493	0	True				
ANR	1314369	AssignmentExpression	i = 0		1313493	0		=			
ANR	1314370	Identifier	i		1313493	0					
ANR	1314371	PrimaryExpression	0		1313493	1					
ANR	1314372	Condition	i < egg -> lang . ninlines	1092:16:29355:29376	1313493	1	True				
ANR	1314373	RelationalExpression	i < egg -> lang . ninlines		1313493	0		<			
ANR	1314374	Identifier	i		1313493	0					
ANR	1314375	MemberAccess	egg -> lang . ninlines		1313493	1					
ANR	1314376	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314377	Identifier	egg		1313493	0					
ANR	1314378	Identifier	lang		1313493	1					
ANR	1314379	Identifier	ninlines		1313493	1					
ANR	1314380	PostIncDecOperationExpression	i ++	1092:40:29379:29381	1313493	2	True				
ANR	1314381	Identifier	i		1313493	0					
ANR	1314382	IncDec	++		1313493	1					
ANR	1314383	CompoundStatement		129:45:3657:3657	1313493	3					
ANR	1314384	IfStatement	"if ( ! strcmp ( str , egg -> lang . inlines [ i ] . name ) )"		1313493	0					
ANR	1314385	Condition	"! strcmp ( str , egg -> lang . inlines [ i ] . name )"	1093:9:29395:29434	1313493	0	True				
ANR	1314386	UnaryOperationExpression	"! strcmp ( str , egg -> lang . inlines [ i ] . name )"		1313493	0					
ANR	1314387	UnaryOperator	!		1313493	0					
ANR	1314388	CallExpression	"strcmp ( str , egg -> lang . inlines [ i ] . name )"		1313493	1					
ANR	1314389	Callee	strcmp		1313493	0					
ANR	1314390	Identifier	strcmp		1313493	0					
ANR	1314391	ArgumentList	str		1313493	1					
ANR	1314392	Argument	str		1313493	0					
ANR	1314393	Identifier	str		1313493	0					
ANR	1314394	Argument	egg -> lang . inlines [ i ] . name		1313493	1					
ANR	1314395	MemberAccess	egg -> lang . inlines [ i ] . name		1313493	0					
ANR	1314396	ArrayIndexing	egg -> lang . inlines [ i ]		1313493	0					
ANR	1314397	MemberAccess	egg -> lang . inlines		1313493	0					
ANR	1314398	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314399	Identifier	egg		1313493	0					
ANR	1314400	Identifier	lang		1313493	1					
ANR	1314401	Identifier	inlines		1313493	1					
ANR	1314402	Identifier	i		1313493	1					
ANR	1314403	Identifier	name		1313493	1					
ANR	1314404	CompoundStatement		130:51:3710:3710	1313493	1					
ANR	1314405	ExpressionStatement	p = egg -> lang . inlines [ i ] . body	1094:6:29445:29474	1313493	0	True				
ANR	1314406	AssignmentExpression	p = egg -> lang . inlines [ i ] . body		1313493	0		=			
ANR	1314407	Identifier	p		1313493	0					
ANR	1314408	MemberAccess	egg -> lang . inlines [ i ] . body		1313493	1					
ANR	1314409	ArrayIndexing	egg -> lang . inlines [ i ]		1313493	0					
ANR	1314410	MemberAccess	egg -> lang . inlines		1313493	0					
ANR	1314411	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314412	Identifier	egg		1313493	0					
ANR	1314413	Identifier	lang		1313493	1					
ANR	1314414	Identifier	inlines		1313493	1					
ANR	1314415	Identifier	i		1313493	1					
ANR	1314416	Identifier	body		1313493	1					
ANR	1314417	ExpressionStatement	egg -> lang . docall = 0	1095:6:29482:29502	1313493	1	True				
ANR	1314418	AssignmentExpression	egg -> lang . docall = 0		1313493	0		=			
ANR	1314419	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314420	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314421	Identifier	egg		1313493	0					
ANR	1314422	Identifier	lang		1313493	1					
ANR	1314423	Identifier	docall		1313493	1					
ANR	1314424	PrimaryExpression	0		1313493	1					
ANR	1314425	ExpressionStatement	"e -> comment ( egg , ""inline"" )"	1096:6:29510:29536	1313493	2	True				
ANR	1314426	CallExpression	"e -> comment ( egg , ""inline"" )"		1313493	0					
ANR	1314427	Callee	e -> comment		1313493	0					
ANR	1314428	PtrMemberAccess	e -> comment		1313493	0					
ANR	1314429	Identifier	e		1313493	0					
ANR	1314430	Identifier	comment		1313493	1					
ANR	1314431	ArgumentList	egg		1313493	1					
ANR	1314432	Argument	egg		1313493	0					
ANR	1314433	Identifier	egg		1313493	0					
ANR	1314434	Argument	"""inline"""		1313493	1					
ANR	1314435	PrimaryExpression	"""inline"""		1313493	0					
ANR	1314436	ExpressionStatement	"r_egg_lang_parsechar ( egg , '\\n' )"	1097:6:29544:29576	1313493	3	True				
ANR	1314437	CallExpression	"r_egg_lang_parsechar ( egg , '\\n' )"		1313493	0					
ANR	1314438	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1314439	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1314440	ArgumentList	egg		1313493	1					
ANR	1314441	Argument	egg		1313493	0					
ANR	1314442	Identifier	egg		1313493	0					
ANR	1314443	Argument	'\\n'		1313493	1					
ANR	1314444	PrimaryExpression	'\\n'		1313493	0					
ANR	1314445	ForStatement	for ( ; * p ; p ++ )		1313493	4					
ANR	1314446	Condition	* p	1098:13:29615:29616	1313493	0	True				
ANR	1314447	UnaryOperationExpression	* p		1313493	0					
ANR	1314448	UnaryOperator	*		1313493	0					
ANR	1314449	Identifier	p		1313493	1					
ANR	1314450	PostIncDecOperationExpression	p ++	1098:17:29619:29621	1313493	1	True				
ANR	1314451	Identifier	p		1313493	0					
ANR	1314452	IncDec	++		1313493	1					
ANR	1314453	CompoundStatement		135:22:3897:3897	1313493	2					
ANR	1314454	ExpressionStatement	"r_egg_lang_parsechar ( egg , * p )"	1099:7:29633:29663	1313493	0	True				
ANR	1314455	CallExpression	"r_egg_lang_parsechar ( egg , * p )"		1313493	0					
ANR	1314456	Callee	r_egg_lang_parsechar		1313493	0					
ANR	1314457	Identifier	r_egg_lang_parsechar		1313493	0					
ANR	1314458	ArgumentList	egg		1313493	1					
ANR	1314459	Argument	egg		1313493	0					
ANR	1314460	Identifier	egg		1313493	0					
ANR	1314461	Argument	* p		1313493	1					
ANR	1314462	UnaryOperationExpression	* p		1313493	0					
ANR	1314463	UnaryOperator	*		1313493	0					
ANR	1314464	Identifier	p		1313493	1					
ANR	1314465	ExpressionStatement	egg -> lang . docall = 0	1101:6:29679:29699	1313493	5	True				
ANR	1314466	AssignmentExpression	egg -> lang . docall = 0		1313493	0		=			
ANR	1314467	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314468	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314469	Identifier	egg		1313493	0					
ANR	1314470	Identifier	lang		1313493	1					
ANR	1314471	Identifier	docall		1313493	1					
ANR	1314472	PrimaryExpression	0		1313493	1					
ANR	1314473	BreakStatement	break ;	1102:6:29707:29712	1313493	6	True				
ANR	1314474	IfStatement	if ( egg -> lang . docall )		1313493	2					
ANR	1314475	Condition	egg -> lang . docall	1106:7:29739:29754	1313493	0	True				
ANR	1314476	MemberAccess	egg -> lang . docall		1313493	0					
ANR	1314477	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314478	Identifier	egg		1313493	0					
ANR	1314479	Identifier	lang		1313493	1					
ANR	1314480	Identifier	docall		1313493	1					
ANR	1314481	CompoundStatement		143:25:4030:4030	1313493	1					
ANR	1314482	ExpressionStatement	"e -> comment ( egg , ""call in egg->lang.mode %d"" , egg -> lang . mode )"	1107:4:29763:29824	1313493	0	True				
ANR	1314483	CallExpression	"e -> comment ( egg , ""call in egg->lang.mode %d"" , egg -> lang . mode )"		1313493	0					
ANR	1314484	Callee	e -> comment		1313493	0					
ANR	1314485	PtrMemberAccess	e -> comment		1313493	0					
ANR	1314486	Identifier	e		1313493	0					
ANR	1314487	Identifier	comment		1313493	1					
ANR	1314488	ArgumentList	egg		1313493	1					
ANR	1314489	Argument	egg		1313493	0					
ANR	1314490	Identifier	egg		1313493	0					
ANR	1314491	Argument	"""call in egg->lang.mode %d"""		1313493	1					
ANR	1314492	PrimaryExpression	"""call in egg->lang.mode %d"""		1313493	0					
ANR	1314493	Argument	egg -> lang . mode		1313493	2					
ANR	1314494	MemberAccess	egg -> lang . mode		1313493	0					
ANR	1314495	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314496	Identifier	egg		1313493	0					
ANR	1314497	Identifier	lang		1313493	1					
ANR	1314498	Identifier	mode		1313493	1					
ANR	1314499	ExpressionStatement	"e -> call ( egg , str , 0 )"	1108:4:29830:29851	1313493	1	True				
ANR	1314500	CallExpression	"e -> call ( egg , str , 0 )"		1313493	0					
ANR	1314501	Callee	e -> call		1313493	0					
ANR	1314502	PtrMemberAccess	e -> call		1313493	0					
ANR	1314503	Identifier	e		1313493	0					
ANR	1314504	Identifier	call		1313493	1					
ANR	1314505	ArgumentList	egg		1313493	1					
ANR	1314506	Argument	egg		1313493	0					
ANR	1314507	Identifier	egg		1313493	0					
ANR	1314508	Argument	str		1313493	1					
ANR	1314509	Identifier	str		1313493	0					
ANR	1314510	Argument	0		1313493	2					
ANR	1314511	PrimaryExpression	0		1313493	0					
ANR	1314512	IfStatement	if ( egg -> lang . nargs > 0 )		1313493	10					
ANR	1314513	Condition	egg -> lang . nargs > 0	1111:6:29868:29886	1313493	0	True				
ANR	1314514	RelationalExpression	egg -> lang . nargs > 0		1313493	0		>			
ANR	1314515	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1314516	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314517	Identifier	egg		1313493	0					
ANR	1314518	Identifier	lang		1313493	1					
ANR	1314519	Identifier	nargs		1313493	1					
ANR	1314520	PrimaryExpression	0		1313493	1					
ANR	1314521	CompoundStatement		148:27:4162:4162	1313493	1					
ANR	1314522	ExpressionStatement	"e -> restore_stack ( egg , egg -> lang . nargs * e -> size )"	1112:3:29894:29943	1313493	0	True				
ANR	1314523	CallExpression	"e -> restore_stack ( egg , egg -> lang . nargs * e -> size )"		1313493	0					
ANR	1314524	Callee	e -> restore_stack		1313493	0					
ANR	1314525	PtrMemberAccess	e -> restore_stack		1313493	0					
ANR	1314526	Identifier	e		1313493	0					
ANR	1314527	Identifier	restore_stack		1313493	1					
ANR	1314528	ArgumentList	egg		1313493	1					
ANR	1314529	Argument	egg		1313493	0					
ANR	1314530	Identifier	egg		1313493	0					
ANR	1314531	Argument	egg -> lang . nargs * e -> size		1313493	1					
ANR	1314532	MultiplicativeExpression	egg -> lang . nargs * e -> size		1313493	0		*			
ANR	1314533	MemberAccess	egg -> lang . nargs		1313493	0					
ANR	1314534	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314535	Identifier	egg		1313493	0					
ANR	1314536	Identifier	lang		1313493	1					
ANR	1314537	Identifier	nargs		1313493	1					
ANR	1314538	PtrMemberAccess	e -> size		1313493	1					
ANR	1314539	Identifier	e		1313493	0					
ANR	1314540	Identifier	size		1313493	1					
ANR	1314541	IfStatement	if ( egg -> lang . dstvar )		1313493	11					
ANR	1314542	Condition	egg -> lang . dstvar	1130:6:30354:30369	1313493	0	True				
ANR	1314543	MemberAccess	egg -> lang . dstvar		1313493	0					
ANR	1314544	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314545	Identifier	egg		1313493	0					
ANR	1314546	Identifier	lang		1313493	1					
ANR	1314547	Identifier	dstvar		1313493	1					
ANR	1314548	CompoundStatement		167:24:4645:4645	1313493	1					
ANR	1314549	ExpressionStatement	* buf = 0	1132:3:30413:30421	1313493	0	True				
ANR	1314550	AssignmentExpression	* buf = 0		1313493	0		=			
ANR	1314551	UnaryOperationExpression	* buf		1313493	0					
ANR	1314552	UnaryOperator	*		1313493	0					
ANR	1314553	Identifier	buf		1313493	1					
ANR	1314554	PrimaryExpression	0		1313493	1					
ANR	1314555	ExpressionStatement	free ( str )	1133:3:30426:30436	1313493	1	True				
ANR	1314556	CallExpression	free ( str )		1313493	0					
ANR	1314557	Callee	free		1313493	0					
ANR	1314558	Identifier	free		1313493	0					
ANR	1314559	ArgumentList	str		1313493	1					
ANR	1314560	Argument	str		1313493	0					
ANR	1314561	Identifier	str		1313493	0					
ANR	1314562	ExpressionStatement	"str = r_egg_mkvar ( egg , buf , egg -> lang . dstvar , 0 )"	1134:3:30441:30490	1313493	2	True				
ANR	1314563	AssignmentExpression	"str = r_egg_mkvar ( egg , buf , egg -> lang . dstvar , 0 )"		1313493	0		=			
ANR	1314564	Identifier	str		1313493	0					
ANR	1314565	CallExpression	"r_egg_mkvar ( egg , buf , egg -> lang . dstvar , 0 )"		1313493	1					
ANR	1314566	Callee	r_egg_mkvar		1313493	0					
ANR	1314567	Identifier	r_egg_mkvar		1313493	0					
ANR	1314568	ArgumentList	egg		1313493	1					
ANR	1314569	Argument	egg		1313493	0					
ANR	1314570	Identifier	egg		1313493	0					
ANR	1314571	Argument	buf		1313493	1					
ANR	1314572	Identifier	buf		1313493	0					
ANR	1314573	Argument	egg -> lang . dstvar		1313493	2					
ANR	1314574	MemberAccess	egg -> lang . dstvar		1313493	0					
ANR	1314575	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314576	Identifier	egg		1313493	0					
ANR	1314577	Identifier	lang		1313493	1					
ANR	1314578	Identifier	dstvar		1313493	1					
ANR	1314579	Argument	0		1313493	3					
ANR	1314580	PrimaryExpression	0		1313493	0					
ANR	1314581	IfStatement	if ( * buf == 0 )		1313493	3					
ANR	1314582	Condition	* buf == 0	1135:7:30499:30507	1313493	0	True				
ANR	1314583	EqualityExpression	* buf == 0		1313493	0		==			
ANR	1314584	UnaryOperationExpression	* buf		1313493	0					
ANR	1314585	UnaryOperator	*		1313493	0					
ANR	1314586	Identifier	buf		1313493	1					
ANR	1314587	PrimaryExpression	0		1313493	1					
ANR	1314588	CompoundStatement		172:18:4783:4783	1313493	1					
ANR	1314589	ExpressionStatement	"eprintf ( ""Cannot resolve variable '%s'\\n"" , egg -> lang . dstvar )"	1136:4:30516:30576	1313493	0	True				
ANR	1314590	CallExpression	"eprintf ( ""Cannot resolve variable '%s'\\n"" , egg -> lang . dstvar )"		1313493	0					
ANR	1314591	Callee	eprintf		1313493	0					
ANR	1314592	Identifier	eprintf		1313493	0					
ANR	1314593	ArgumentList	"""Cannot resolve variable '%s'\\n"""		1313493	1					
ANR	1314594	Argument	"""Cannot resolve variable '%s'\\n"""		1313493	0					
ANR	1314595	PrimaryExpression	"""Cannot resolve variable '%s'\\n"""		1313493	0					
ANR	1314596	Argument	egg -> lang . dstvar		1313493	1					
ANR	1314597	MemberAccess	egg -> lang . dstvar		1313493	0					
ANR	1314598	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314599	Identifier	egg		1313493	0					
ANR	1314600	Identifier	lang		1313493	1					
ANR	1314601	Identifier	dstvar		1313493	1					
ANR	1314602	ElseStatement	else		1313493	0					
ANR	1314603	CompoundStatement		174:10:4861:4861	1313493	0					
ANR	1314604	ExpressionStatement	"e -> get_result ( egg , buf )"	1138:4:30594:30618	1313493	0	True				
ANR	1314605	CallExpression	"e -> get_result ( egg , buf )"		1313493	0					
ANR	1314606	Callee	e -> get_result		1313493	0					
ANR	1314607	PtrMemberAccess	e -> get_result		1313493	0					
ANR	1314608	Identifier	e		1313493	0					
ANR	1314609	Identifier	get_result		1313493	1					
ANR	1314610	ArgumentList	egg		1313493	1					
ANR	1314611	Argument	egg		1313493	0					
ANR	1314612	Identifier	egg		1313493	0					
ANR	1314613	Argument	buf		1313493	1					
ANR	1314614	Identifier	buf		1313493	0					
ANR	1314615	ExpressionStatement	R_FREE ( egg -> lang . dstvar )	1141:3:30635:30660	1313493	4	True				
ANR	1314616	CallExpression	R_FREE ( egg -> lang . dstvar )		1313493	0					
ANR	1314617	Callee	R_FREE		1313493	0					
ANR	1314618	Identifier	R_FREE		1313493	0					
ANR	1314619	ArgumentList	egg -> lang . dstvar		1313493	1					
ANR	1314620	Argument	egg -> lang . dstvar		1313493	0					
ANR	1314621	MemberAccess	egg -> lang . dstvar		1313493	0					
ANR	1314622	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314623	Identifier	egg		1313493	0					
ANR	1314624	Identifier	lang		1313493	1					
ANR	1314625	Identifier	dstvar		1313493	1					
ANR	1314626	ExpressionStatement	rcc_reset_callname ( egg )	1143:2:30668:30692	1313493	12	True				
ANR	1314627	CallExpression	rcc_reset_callname ( egg )		1313493	0					
ANR	1314628	Callee	rcc_reset_callname		1313493	0					
ANR	1314629	Identifier	rcc_reset_callname		1313493	0					
ANR	1314630	ArgumentList	egg		1313493	1					
ANR	1314631	Argument	egg		1313493	0					
ANR	1314632	Identifier	egg		1313493	0					
ANR	1314633	ElseStatement	else		1313493	0					
ANR	1314634	CompoundStatement		183:2:5011:5054	1313493	0					
ANR	1314635	IdentifierDeclStatement	int vs = 'l' ;	1145:2:30722:30734	1313493	0	True				
ANR	1314636	IdentifierDecl	vs = 'l'		1313493	0					
ANR	1314637	IdentifierDeclType	int		1313493	0					
ANR	1314638	Identifier	vs		1313493	1					
ANR	1314639	AssignmentExpression	vs = 'l'		1313493	2		=			
ANR	1314640	Identifier	vs		1313493	0					
ANR	1314641	PrimaryExpression	'l'		1313493	1					
ANR	1314642	IdentifierDeclStatement	"char type , * eq , * ptr = egg -> lang . elem , * tmp ;"	1146:2:30738:30781	1313493	1	True				
ANR	1314643	IdentifierDecl	type		1313493	0					
ANR	1314644	IdentifierDeclType	char		1313493	0					
ANR	1314645	Identifier	type		1313493	1					
ANR	1314646	IdentifierDecl	* eq		1313493	1					
ANR	1314647	IdentifierDeclType	char *		1313493	0					
ANR	1314648	Identifier	eq		1313493	1					
ANR	1314649	IdentifierDecl	* ptr = egg -> lang . elem		1313493	2					
ANR	1314650	IdentifierDeclType	char *		1313493	0					
ANR	1314651	Identifier	ptr		1313493	1					
ANR	1314652	AssignmentExpression	* ptr = egg -> lang . elem		1313493	2		=			
ANR	1314653	Identifier	ptr		1313493	0					
ANR	1314654	MemberAccess	egg -> lang . elem		1313493	1					
ANR	1314655	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314656	Identifier	egg		1313493	0					
ANR	1314657	Identifier	lang		1313493	1					
ANR	1314658	Identifier	elem		1313493	1					
ANR	1314659	IdentifierDecl	* tmp		1313493	3					
ANR	1314660	IdentifierDeclType	char *		1313493	0					
ANR	1314661	Identifier	tmp		1313493	1					
ANR	1314662	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'	1147:2:30785:30824	1313493	2	True				
ANR	1314663	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'		1313493	0		=			
ANR	1314664	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1313493	0					
ANR	1314665	MemberAccess	egg -> lang . elem		1313493	0					
ANR	1314666	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314667	Identifier	egg		1313493	0					
ANR	1314668	Identifier	lang		1313493	1					
ANR	1314669	Identifier	elem		1313493	1					
ANR	1314670	MemberAccess	egg -> lang . elem_n		1313493	1					
ANR	1314671	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314672	Identifier	egg		1313493	0					
ANR	1314673	Identifier	lang		1313493	1					
ANR	1314674	Identifier	elem_n		1313493	1					
ANR	1314675	PrimaryExpression	'\\0'		1313493	1					
ANR	1314676	ExpressionStatement	ptr = ( char * ) skipspaces ( ptr )	1148:2:30828:30859	1313493	3	True				
ANR	1314677	AssignmentExpression	ptr = ( char * ) skipspaces ( ptr )		1313493	0		=			
ANR	1314678	Identifier	ptr		1313493	0					
ANR	1314679	CastExpression	( char * ) skipspaces ( ptr )		1313493	1					
ANR	1314680	CastTarget	char *		1313493	0					
ANR	1314681	CallExpression	skipspaces ( ptr )		1313493	1					
ANR	1314682	Callee	skipspaces		1313493	0					
ANR	1314683	Identifier	skipspaces		1313493	0					
ANR	1314684	ArgumentList	ptr		1313493	1					
ANR	1314685	Argument	ptr		1313493	0					
ANR	1314686	Identifier	ptr		1313493	0					
ANR	1314687	IfStatement	if ( * ptr )		1313493	4					
ANR	1314688	Condition	* ptr	1149:6:30867:30870	1313493	0	True				
ANR	1314689	UnaryOperationExpression	* ptr		1313493	0					
ANR	1314690	UnaryOperator	*		1313493	0					
ANR	1314691	Identifier	ptr		1313493	1					
ANR	1314692	CompoundStatement		186:12:5146:5146	1313493	1					
ANR	1314693	ExpressionStatement	"eq = strchr ( ptr , '=' )"	1150:3:30878:30900	1313493	0	True				
ANR	1314694	AssignmentExpression	"eq = strchr ( ptr , '=' )"		1313493	0		=			
ANR	1314695	Identifier	eq		1313493	0					
ANR	1314696	CallExpression	"strchr ( ptr , '=' )"		1313493	1					
ANR	1314697	Callee	strchr		1313493	0					
ANR	1314698	Identifier	strchr		1313493	0					
ANR	1314699	ArgumentList	ptr		1313493	1					
ANR	1314700	Argument	ptr		1313493	0					
ANR	1314701	Identifier	ptr		1313493	0					
ANR	1314702	Argument	'='		1313493	1					
ANR	1314703	PrimaryExpression	'='		1313493	0					
ANR	1314704	IfStatement	if ( eq )		1313493	1					
ANR	1314705	Condition	eq	1151:7:30909:30910	1313493	0	True				
ANR	1314706	Identifier	eq		1313493	0					
ANR	1314707	CompoundStatement		189:4:5192:5227	1313493	1					
ANR	1314708	IdentifierDeclStatement	char * p = ( char * ) skipspaces ( ptr ) ;	1152:4:30919:30954	1313493	0	True				
ANR	1314709	IdentifierDecl	* p = ( char * ) skipspaces ( ptr )		1313493	0					
ANR	1314710	IdentifierDeclType	char *		1313493	0					
ANR	1314711	Identifier	p		1313493	1					
ANR	1314712	AssignmentExpression	* p = ( char * ) skipspaces ( ptr )		1313493	2		=			
ANR	1314713	Identifier	p		1313493	0					
ANR	1314714	CastExpression	( char * ) skipspaces ( ptr )		1313493	1					
ANR	1314715	CastTarget	char *		1313493	0					
ANR	1314716	CallExpression	skipspaces ( ptr )		1313493	1					
ANR	1314717	Callee	skipspaces		1313493	0					
ANR	1314718	Identifier	skipspaces		1313493	0					
ANR	1314719	ArgumentList	ptr		1313493	1					
ANR	1314720	Argument	ptr		1313493	0					
ANR	1314721	Identifier	ptr		1313493	0					
ANR	1314722	ExpressionStatement	vs = egg -> lang . varsize	1153:4:30960:30982	1313493	1	True				
ANR	1314723	AssignmentExpression	vs = egg -> lang . varsize		1313493	0		=			
ANR	1314724	Identifier	vs		1313493	0					
ANR	1314725	MemberAccess	egg -> lang . varsize		1313493	1					
ANR	1314726	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314727	Identifier	egg		1313493	0					
ANR	1314728	Identifier	lang		1313493	1					
ANR	1314729	Identifier	varsize		1313493	1					
ANR	1314730	ExpressionStatement	* buf = * eq = x00	1154:4:30988:31007	1313493	2	True				
ANR	1314731	AssignmentExpression	* buf = * eq = x00		1313493	0		=			
ANR	1314732	UnaryOperationExpression	* buf		1313493	0					
ANR	1314733	UnaryOperator	*		1313493	0					
ANR	1314734	Identifier	buf		1313493	1					
ANR	1314735	AssignmentExpression	* eq = x00		1313493	1		=			
ANR	1314736	UnaryOperationExpression	* eq		1313493	0					
ANR	1314737	UnaryOperator	*		1313493	0					
ANR	1314738	Identifier	eq		1313493	1					
ANR	1314739	Identifier	x00		1313493	1					
ANR	1314740	ExpressionStatement	"e -> mathop ( egg , '=' , vs , '$' , ""0"" , e -> regs ( egg , 1 ) )"	1155:4:31013:31065	1313493	3	True				
ANR	1314741	CallExpression	"e -> mathop ( egg , '=' , vs , '$' , ""0"" , e -> regs ( egg , 1 ) )"		1313493	0					
ANR	1314742	Callee	e -> mathop		1313493	0					
ANR	1314743	PtrMemberAccess	e -> mathop		1313493	0					
ANR	1314744	Identifier	e		1313493	0					
ANR	1314745	Identifier	mathop		1313493	1					
ANR	1314746	ArgumentList	egg		1313493	1					
ANR	1314747	Argument	egg		1313493	0					
ANR	1314748	Identifier	egg		1313493	0					
ANR	1314749	Argument	'='		1313493	1					
ANR	1314750	PrimaryExpression	'='		1313493	0					
ANR	1314751	Argument	vs		1313493	2					
ANR	1314752	Identifier	vs		1313493	0					
ANR	1314753	Argument	'$'		1313493	3					
ANR	1314754	PrimaryExpression	'$'		1313493	0					
ANR	1314755	Argument	"""0"""		1313493	4					
ANR	1314756	PrimaryExpression	"""0"""		1313493	0					
ANR	1314757	Argument	"e -> regs ( egg , 1 )"		1313493	5					
ANR	1314758	CallExpression	"e -> regs ( egg , 1 )"		1313493	0					
ANR	1314759	Callee	e -> regs		1313493	0					
ANR	1314760	PtrMemberAccess	e -> regs		1313493	0					
ANR	1314761	Identifier	e		1313493	0					
ANR	1314762	Identifier	regs		1313493	1					
ANR	1314763	ArgumentList	egg		1313493	1					
ANR	1314764	Argument	egg		1313493	0					
ANR	1314765	Identifier	egg		1313493	0					
ANR	1314766	Argument	1		1313493	1					
ANR	1314767	PrimaryExpression	1		1313493	0					
ANR	1314768	ExpressionStatement	egg -> lang . mathline = strdup ( ( char * ) skipspaces ( eq + 1 ) )	1157:4:31143:31201	1313493	4	True				
ANR	1314769	AssignmentExpression	egg -> lang . mathline = strdup ( ( char * ) skipspaces ( eq + 1 ) )		1313493	0		=			
ANR	1314770	MemberAccess	egg -> lang . mathline		1313493	0					
ANR	1314771	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314772	Identifier	egg		1313493	0					
ANR	1314773	Identifier	lang		1313493	1					
ANR	1314774	Identifier	mathline		1313493	1					
ANR	1314775	CallExpression	strdup ( ( char * ) skipspaces ( eq + 1 ) )		1313493	1					
ANR	1314776	Callee	strdup		1313493	0					
ANR	1314777	Identifier	strdup		1313493	0					
ANR	1314778	ArgumentList	( char * ) skipspaces ( eq + 1 )		1313493	1					
ANR	1314779	Argument	( char * ) skipspaces ( eq + 1 )		1313493	0					
ANR	1314780	CastExpression	( char * ) skipspaces ( eq + 1 )		1313493	0					
ANR	1314781	CastTarget	char *		1313493	0					
ANR	1314782	CallExpression	skipspaces ( eq + 1 )		1313493	1					
ANR	1314783	Callee	skipspaces		1313493	0					
ANR	1314784	Identifier	skipspaces		1313493	0					
ANR	1314785	ArgumentList	eq + 1		1313493	1					
ANR	1314786	Argument	eq + 1		1313493	0					
ANR	1314787	AdditiveExpression	eq + 1		1313493	0		+			
ANR	1314788	Identifier	eq		1313493	0					
ANR	1314789	PrimaryExpression	1		1313493	1					
ANR	1314790	ExpressionStatement	tmp = egg -> lang . mathline	1158:4:31207:31231	1313493	5	True				
ANR	1314791	AssignmentExpression	tmp = egg -> lang . mathline		1313493	0		=			
ANR	1314792	Identifier	tmp		1313493	0					
ANR	1314793	MemberAccess	egg -> lang . mathline		1313493	1					
ANR	1314794	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314795	Identifier	egg		1313493	0					
ANR	1314796	Identifier	lang		1313493	1					
ANR	1314797	Identifier	mathline		1313493	1					
ANR	1314798	ExpressionStatement	"rcc_mathop ( egg , & tmp , 2 )"	1159:4:31237:31262	1313493	6	True				
ANR	1314799	CallExpression	"rcc_mathop ( egg , & tmp , 2 )"		1313493	0					
ANR	1314800	Callee	rcc_mathop		1313493	0					
ANR	1314801	Identifier	rcc_mathop		1313493	0					
ANR	1314802	ArgumentList	egg		1313493	1					
ANR	1314803	Argument	egg		1313493	0					
ANR	1314804	Identifier	egg		1313493	0					
ANR	1314805	Argument	& tmp		1313493	1					
ANR	1314806	UnaryOperationExpression	& tmp		1313493	0					
ANR	1314807	UnaryOperator	&		1313493	0					
ANR	1314808	Identifier	tmp		1313493	1					
ANR	1314809	Argument	2		1313493	2					
ANR	1314810	PrimaryExpression	2		1313493	0					
ANR	1314811	ExpressionStatement	R_FREE ( egg -> lang . mathline )	1160:4:31268:31295	1313493	7	True				
ANR	1314812	CallExpression	R_FREE ( egg -> lang . mathline )		1313493	0					
ANR	1314813	Callee	R_FREE		1313493	0					
ANR	1314814	Identifier	R_FREE		1313493	0					
ANR	1314815	ArgumentList	egg -> lang . mathline		1313493	1					
ANR	1314816	Argument	egg -> lang . mathline		1313493	0					
ANR	1314817	MemberAccess	egg -> lang . mathline		1313493	0					
ANR	1314818	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314819	Identifier	egg		1313493	0					
ANR	1314820	Identifier	lang		1313493	1					
ANR	1314821	Identifier	mathline		1313493	1					
ANR	1314822	ExpressionStatement	tmp = NULL	1161:4:31301:31311	1313493	8	True				
ANR	1314823	AssignmentExpression	tmp = NULL		1313493	0		=			
ANR	1314824	Identifier	tmp		1313493	0					
ANR	1314825	Identifier	NULL		1313493	1					
ANR	1314826	ExpressionStatement	"p = r_egg_mkvar ( egg , buf , ptr , 0 )"	1163:4:31366:31400	1313493	9	True				
ANR	1314827	AssignmentExpression	"p = r_egg_mkvar ( egg , buf , ptr , 0 )"		1313493	0		=			
ANR	1314828	Identifier	p		1313493	0					
ANR	1314829	CallExpression	"r_egg_mkvar ( egg , buf , ptr , 0 )"		1313493	1					
ANR	1314830	Callee	r_egg_mkvar		1313493	0					
ANR	1314831	Identifier	r_egg_mkvar		1313493	0					
ANR	1314832	ArgumentList	egg		1313493	1					
ANR	1314833	Argument	egg		1313493	0					
ANR	1314834	Identifier	egg		1313493	0					
ANR	1314835	Argument	buf		1313493	1					
ANR	1314836	Identifier	buf		1313493	0					
ANR	1314837	Argument	ptr		1313493	2					
ANR	1314838	Identifier	ptr		1313493	0					
ANR	1314839	Argument	0		1313493	3					
ANR	1314840	PrimaryExpression	0		1313493	0					
ANR	1314841	IfStatement	if ( is_var ( p ) )		1313493	10					
ANR	1314842	Condition	is_var ( p )	1164:8:31410:31419	1313493	0	True				
ANR	1314843	CallExpression	is_var ( p )		1313493	0					
ANR	1314844	Callee	is_var		1313493	0					
ANR	1314845	Identifier	is_var		1313493	0					
ANR	1314846	ArgumentList	p		1313493	1					
ANR	1314847	Argument	p		1313493	0					
ANR	1314848	Identifier	p		1313493	0					
ANR	1314849	CompoundStatement		202:5:5702:5740	1313493	1					
ANR	1314850	IdentifierDeclStatement	"char * q = r_egg_mkvar ( egg , buf , p , 0 ) ;"	1165:5:31429:31467	1313493	0	True				
ANR	1314851	IdentifierDecl	"* q = r_egg_mkvar ( egg , buf , p , 0 )"		1313493	0					
ANR	1314852	IdentifierDeclType	char *		1313493	0					
ANR	1314853	Identifier	q		1313493	1					
ANR	1314854	AssignmentExpression	"* q = r_egg_mkvar ( egg , buf , p , 0 )"		1313493	2		=			
ANR	1314855	Identifier	q		1313493	0					
ANR	1314856	CallExpression	"r_egg_mkvar ( egg , buf , p , 0 )"		1313493	1					
ANR	1314857	Callee	r_egg_mkvar		1313493	0					
ANR	1314858	Identifier	r_egg_mkvar		1313493	0					
ANR	1314859	ArgumentList	egg		1313493	1					
ANR	1314860	Argument	egg		1313493	0					
ANR	1314861	Identifier	egg		1313493	0					
ANR	1314862	Argument	buf		1313493	1					
ANR	1314863	Identifier	buf		1313493	0					
ANR	1314864	Argument	p		1313493	2					
ANR	1314865	Identifier	p		1313493	0					
ANR	1314866	Argument	0		1313493	3					
ANR	1314867	PrimaryExpression	0		1313493	0					
ANR	1314868	IfStatement	if ( q )		1313493	1					
ANR	1314869	Condition	q	1166:9:31478:31478	1313493	0	True				
ANR	1314870	Identifier	q		1313493	0					
ANR	1314871	CompoundStatement		203:12:5754:5754	1313493	1					
ANR	1314872	ExpressionStatement	free ( p )	1167:6:31489:31497	1313493	0	True				
ANR	1314873	CallExpression	free ( p )		1313493	0					
ANR	1314874	Callee	free		1313493	0					
ANR	1314875	Identifier	free		1313493	0					
ANR	1314876	ArgumentList	p		1313493	1					
ANR	1314877	Argument	p		1313493	0					
ANR	1314878	Identifier	p		1313493	0					
ANR	1314879	ExpressionStatement	p = q	1168:6:31505:31510	1313493	1	True				
ANR	1314880	AssignmentExpression	p = q		1313493	0		=			
ANR	1314881	Identifier	p		1313493	0					
ANR	1314882	Identifier	q		1313493	1					
ANR	1314883	IfStatement	if ( egg -> lang . varxs == '*' || egg -> lang . varxs == '&' )		1313493	2					
ANR	1314884	Condition	egg -> lang . varxs == '*' || egg -> lang . varxs == '&'	1170:9:31528:31575	1313493	0	True				
ANR	1314885	OrExpression	egg -> lang . varxs == '*' || egg -> lang . varxs == '&'		1313493	0		||			
ANR	1314886	EqualityExpression	egg -> lang . varxs == '*'		1313493	0		==			
ANR	1314887	MemberAccess	egg -> lang . varxs		1313493	0					
ANR	1314888	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314889	Identifier	egg		1313493	0					
ANR	1314890	Identifier	lang		1313493	1					
ANR	1314891	Identifier	varxs		1313493	1					
ANR	1314892	PrimaryExpression	'*'		1313493	1					
ANR	1314893	EqualityExpression	egg -> lang . varxs == '&'		1313493	1		==			
ANR	1314894	MemberAccess	egg -> lang . varxs		1313493	0					
ANR	1314895	PtrMemberAccess	egg -> lang		1313493	0					
ANR	1314896	Identifier	egg		1313493	0					
ANR	1314897	Identifier	lang		1313493	1					
ANR	1314898	Identifier	varxs		1313493	1					
ANR	1314899	PrimaryExpression	'&'		1313493	1					
ANR	1314900	CompoundStatement		207:59:5851:5851	1313493	1					
ANR	1314901	ExpressionStatement	"eprintf ( ""not support for *ptr in egg->lang.dstvar\\n"" )"	1171:6:31586:31640	1313493	0	True				
ANR	1314902	CallExpression	"eprintf ( ""not support for *ptr in egg->lang.dstvar\\n"" )"		1313493	0					
ANR	1314903	Callee	eprintf		1313493	0					
ANR	1314904	Identifier	eprintf		1313493	0					
ANR	1314905	ArgumentList	"""not support for *ptr in egg->lang.dstvar\\n"""		1313493	1					
ANR	1314906	Argument	"""not support for *ptr in egg->lang.dstvar\\n"""		1313493	0					
ANR	1314907	PrimaryExpression	"""not support for *ptr in egg->lang.dstvar\\n"""		1313493	0					
ANR	1314908	ExpressionStatement	type = ' '	1174:5:31691:31701	1313493	3	True				
ANR	1314909	AssignmentExpression	type = ' '		1313493	0		=			
ANR	1314910	Identifier	type		1313493	0					
ANR	1314911	PrimaryExpression	' '		1313493	1					
ANR	1314912	ElseStatement	else		1313493	0					
ANR	1314913	CompoundStatement		212:11:5987:5987	1313493	0					
ANR	1314914	ExpressionStatement	type = '$'	1176:5:31721:31731	1313493	0	True				
ANR	1314915	AssignmentExpression	type = '$'		1313493	0		=			
ANR	1314916	Identifier	type		1313493	0					
ANR	1314917	PrimaryExpression	'$'		1313493	1					
ANR	1314918	ExpressionStatement	"e -> mathop ( egg , '=' , vs , type , e -> regs ( egg , 1 ) , p )"	1178:4:31743:31794	1313493	11	True				
ANR	1314919	CallExpression	"e -> mathop ( egg , '=' , vs , type , e -> regs ( egg , 1 ) , p )"		1313493	0					
ANR	1314920	Callee	e -> mathop		1313493	0					
ANR	1314921	PtrMemberAccess	e -> mathop		1313493	0					
ANR	1314922	Identifier	e		1313493	0					
ANR	1314923	Identifier	mathop		1313493	1					
ANR	1314924	ArgumentList	egg		1313493	1					
ANR	1314925	Argument	egg		1313493	0					
ANR	1314926	Identifier	egg		1313493	0					
ANR	1314927	Argument	'='		1313493	1					
ANR	1314928	PrimaryExpression	'='		1313493	0					
ANR	1314929	Argument	vs		1313493	2					
ANR	1314930	Identifier	vs		1313493	0					
ANR	1314931	Argument	type		1313493	3					
ANR	1314932	Identifier	type		1313493	0					
ANR	1314933	Argument	"e -> regs ( egg , 1 )"		1313493	4					
ANR	1314934	CallExpression	"e -> regs ( egg , 1 )"		1313493	0					
ANR	1314935	Callee	e -> regs		1313493	0					
ANR	1314936	PtrMemberAccess	e -> regs		1313493	0					
ANR	1314937	Identifier	e		1313493	0					
ANR	1314938	Identifier	regs		1313493	1					
ANR	1314939	ArgumentList	egg		1313493	1					
ANR	1314940	Argument	egg		1313493	0					
ANR	1314941	Identifier	egg		1313493	0					
ANR	1314942	Argument	1		1313493	1					
ANR	1314943	PrimaryExpression	1		1313493	0					
ANR	1314944	Argument	p		1313493	5					
ANR	1314945	Identifier	p		1313493	0					
ANR	1314946	ExpressionStatement	free ( p )	1179:4:31800:31808	1313493	12	True				
ANR	1314947	CallExpression	free ( p )		1313493	0					
ANR	1314948	Callee	free		1313493	0					
ANR	1314949	Identifier	free		1313493	0					
ANR	1314950	ArgumentList	p		1313493	1					
ANR	1314951	Argument	p		1313493	0					
ANR	1314952	Identifier	p		1313493	0					
ANR	1314953	ElseStatement	else		1313493	0					
ANR	1314954	CompoundStatement		245:10:7135:7135	1313493	0					
ANR	1314955	IfStatement	"if ( ! strcmp ( ptr , ""break"" ) )"		1313493	0					
ANR	1314956	Condition	"! strcmp ( ptr , ""break"" )"	1209:8:32872:32893	1313493	0	True				
ANR	1314957	UnaryOperationExpression	"! strcmp ( ptr , ""break"" )"		1313493	0					
ANR	1314958	UnaryOperator	!		1313493	0					
ANR	1314959	CallExpression	"strcmp ( ptr , ""break"" )"		1313493	1					
ANR	1314960	Callee	strcmp		1313493	0					
ANR	1314961	Identifier	strcmp		1313493	0					
ANR	1314962	ArgumentList	ptr		1313493	1					
ANR	1314963	Argument	ptr		1313493	0					
ANR	1314964	Identifier	ptr		1313493	0					
ANR	1314965	Argument	"""break"""		1313493	1					
ANR	1314966	PrimaryExpression	"""break"""		1313493	0					
ANR	1314967	CompoundStatement		246:32:7169:7169	1313493	1					
ANR	1314968	ExpressionStatement	e -> trap ( egg )	1210:5:32922:32935	1313493	0	True				
ANR	1314969	CallExpression	e -> trap ( egg )		1313493	0					
ANR	1314970	Callee	e -> trap		1313493	0					
ANR	1314971	PtrMemberAccess	e -> trap		1313493	0					
ANR	1314972	Identifier	e		1313493	0					
ANR	1314973	Identifier	trap		1313493	1					
ANR	1314974	ArgumentList	egg		1313493	1					
ANR	1314975	Argument	egg		1313493	0					
ANR	1314976	Identifier	egg		1313493	0					
ANR	1314977	ExpressionStatement	rcc_reset_callname ( egg )	1211:5:32942:32966	1313493	1	True				
ANR	1314978	CallExpression	rcc_reset_callname ( egg )		1313493	0					
ANR	1314979	Callee	rcc_reset_callname		1313493	0					
ANR	1314980	Identifier	rcc_reset_callname		1313493	0					
ANR	1314981	ArgumentList	egg		1313493	1					
ANR	1314982	Argument	egg		1313493	0					
ANR	1314983	Identifier	egg		1313493	0					
ANR	1314984	ElseStatement	else		1313493	0					
ANR	1314985	CompoundStatement		249:11:7252:7252	1313493	0					
ANR	1314986	ExpressionStatement	"e -> mathop ( egg , '=' , vs , '$' , ptr , NULL )"	1213:5:32986:33026	1313493	0	True				
ANR	1314987	CallExpression	"e -> mathop ( egg , '=' , vs , '$' , ptr , NULL )"		1313493	0					
ANR	1314988	Callee	e -> mathop		1313493	0					
ANR	1314989	PtrMemberAccess	e -> mathop		1313493	0					
ANR	1314990	Identifier	e		1313493	0					
ANR	1314991	Identifier	mathop		1313493	1					
ANR	1314992	ArgumentList	egg		1313493	1					
ANR	1314993	Argument	egg		1313493	0					
ANR	1314994	Identifier	egg		1313493	0					
ANR	1314995	Argument	'='		1313493	1					
ANR	1314996	PrimaryExpression	'='		1313493	0					
ANR	1314997	Argument	vs		1313493	2					
ANR	1314998	Identifier	vs		1313493	0					
ANR	1314999	Argument	'$'		1313493	3					
ANR	1315000	PrimaryExpression	'$'		1313493	0					
ANR	1315001	Argument	ptr		1313493	4					
ANR	1315002	Identifier	ptr		1313493	0					
ANR	1315003	Argument	NULL		1313493	5					
ANR	1315004	Identifier	NULL		1313493	0					
ANR	1315005	ExpressionStatement	free ( str )	1218:1:33047:33057	1313493	8	True				
ANR	1315006	CallExpression	free ( str )		1313493	0					
ANR	1315007	Callee	free		1313493	0					
ANR	1315008	Identifier	free		1313493	0					
ANR	1315009	ArgumentList	str		1313493	1					
ANR	1315010	Argument	str		1313493	0					
ANR	1315011	Identifier	str		1313493	0					
ANR	1315012	ReturnType	static void		1313493	1					
ANR	1315013	Identifier	rcc_next		1313493	2					
ANR	1315014	ParameterList	REgg * egg		1313493	3					
ANR	1315015	Parameter	REgg * egg	964:21:25715:25723	1313493	0	True				
ANR	1315016	ParameterType	REgg *		1313493	0					
ANR	1315017	Identifier	egg		1313493	1					
ANR	1315018	CFGEntryNode	ENTRY		1313493		True				
ANR	1315019	CFGExitNode	EXIT		1313493		True				
ANR	1315020	Symbol	egg		1313493						
ANR	1315021	Symbol	CTX		1313493						
ANR	1315022	Symbol	egg -> lang . ninlines		1313493						
ANR	1315023	Symbol	strchr		1313493						
ANR	1315024	Symbol	egg -> lang . lastctxdelta		1313493						
ANR	1315025	Symbol	type		1313493						
ANR	1315026	Symbol	* egg -> lang		1313493						
ANR	1315027	Symbol	path		1313493						
ANR	1315028	Symbol	egg -> lang . syscalls		1313493						
ANR	1315029	Symbol	eprintf		1313493						
ANR	1315030	Symbol	* egg -> lang . nestedi		1313493						
ANR	1315031	Symbol	tmp		1313493						
ANR	1315032	Symbol	egg -> lang . varxs		1313493						
ANR	1315033	Symbol	* ptr		1313493						
ANR	1315034	Symbol	egg -> lang . inlines		1313493						
ANR	1315035	Symbol	find_include		1313493						
ANR	1315036	Symbol	ocn		1313493						
ANR	1315037	Symbol	egg -> lang . syscalls [ i ] . name		1313493						
ANR	1315038	Symbol	strcmp		1313493						
ANR	1315039	Symbol	r_egg_mkvar		1313493						
ANR	1315040	Symbol	r_file_slurp		1313493						
ANR	1315041	Symbol	* buf		1313493						
ANR	1315042	Symbol	NULL		1313493						
ANR	1315043	Symbol	var		1313493						
ANR	1315044	Symbol	egg -> lang . inlines [ i ] . body		1313493						
ANR	1315045	Symbol	* egg -> lang . elem		1313493						
ANR	1315046	Symbol	egg -> lang . nargs		1313493						
ANR	1315047	Symbol	egg -> lang . callname		1313493						
ANR	1315048	Symbol	* egg -> lang . ctxpush		1313493						
ANR	1315049	Symbol	eq		1313493						
ANR	1315050	Symbol	oline		1313493						
ANR	1315051	Symbol	skipspaces		1313493						
ANR	1315052	Symbol	egg -> lang . mode		1313493						
ANR	1315053	Symbol	str		1313493						
ANR	1315054	Symbol	* egg -> lang . syscalls		1313493						
ANR	1315055	Symbol	* egg -> lang . elem_n		1313493						
ANR	1315056	Symbol	e -> size		1313493						
ANR	1315057	Symbol	& tmp		1313493						
ANR	1315058	Symbol	is_var		1313493						
ANR	1315059	Symbol	vs		1313493						
ANR	1315060	Symbol	egg -> lang . mathline		1313493						
ANR	1315061	Symbol	egg -> lang . setenviron		1313493						
ANR	1315062	Symbol	* ocn		1313493						
ANR	1315063	Symbol	egg -> lang . elem		1313493						
ANR	1315064	Symbol	egg -> lang . ctxpush		1313493						
ANR	1315065	Symbol	egg -> lang . inlines [ i ] . name		1313493						
ANR	1315066	Symbol	egg -> lang . dstvar		1313493						
ANR	1315067	Symbol	egg -> remit		1313493						
ANR	1315068	Symbol	egg -> lang		1313493						
ANR	1315069	Symbol	* CTX		1313493						
ANR	1315070	Symbol	egg -> lang . includedir		1313493						
ANR	1315071	Symbol	* egg		1313493						
ANR	1315072	Symbol	e -> regs		1313493						
ANR	1315073	Symbol	egg -> lang . varsize		1313493						
ANR	1315074	Symbol	egg -> lang . line		1313493						
ANR	1315075	Symbol	* * egg		1313493						
ANR	1315076	Symbol	egg -> lang . syscallbody		1313493						
ANR	1315077	Symbol	e		1313493						
ANR	1315078	Symbol	i		1313493						
ANR	1315079	Symbol	egg -> lang . nfunctions		1313493						
ANR	1315080	Symbol	egg -> lang . elem_n		1313493						
ANR	1315081	Symbol	egg -> lang . docall		1313493						
ANR	1315082	Symbol	ptr		1313493						
ANR	1315083	Symbol	* e		1313493						
ANR	1315084	Symbol	e -> syscall		1313493						
ANR	1315085	Symbol	p		1313493						
ANR	1315086	Symbol	q		1313493						
ANR	1315087	Symbol	* eq		1313493						
ANR	1315088	Symbol	buf		1313493						
ANR	1315089	Symbol	* i		1313493						
ANR	1315090	Symbol	s		1313493						
ANR	1315091	Symbol	egg -> lang . includefile		1313493						
ANR	1315092	Symbol	egg -> lang . nsyscalls		1313493						
ANR	1315093	Symbol	* egg -> lang . inlines		1313493						
ANR	1315094	Symbol	x00		1313493						
ANR	1315095	Symbol	* p		1313493						
ANR	1315096	Symbol	* q		1313493						
ANR	1315097	Symbol	strdup		1313493						
ANR	1315098	Symbol	egg -> lang . nestedi		1313493						
ANR	1315099	Symbol	get_frame_label		1313493						
ANR	1315100	Function	r_egg_lang_parsechar	1221:0:33062:38533							
ANR	1315101	FunctionDef	"r_egg_lang_parsechar (REgg * egg , char c)"		1315100	0					
ANR	1315102	CompoundStatement		1221:50:33112:38533	1315100	0					
ANR	1315103	IdentifierDeclStatement	REggEmit * e = egg -> remit ;	1222:1:33115:33139	1315100	0	True				
ANR	1315104	IdentifierDecl	* e = egg -> remit		1315100	0					
ANR	1315105	IdentifierDeclType	REggEmit *		1315100	0					
ANR	1315106	Identifier	e		1315100	1					
ANR	1315107	AssignmentExpression	* e = egg -> remit		1315100	2		=			
ANR	1315108	Identifier	e		1315100	0					
ANR	1315109	PtrMemberAccess	egg -> remit		1315100	1					
ANR	1315110	Identifier	egg		1315100	0					
ANR	1315111	Identifier	remit		1315100	1					
ANR	1315112	IdentifierDeclStatement	"char * ptr , str [ 64 ] , * tmp_ptr = NULL ;"	1223:1:33142:33177	1315100	1	True				
ANR	1315113	IdentifierDecl	* ptr		1315100	0					
ANR	1315114	IdentifierDeclType	char *		1315100	0					
ANR	1315115	Identifier	ptr		1315100	1					
ANR	1315116	IdentifierDecl	str [ 64 ]		1315100	1					
ANR	1315117	IdentifierDeclType	char [ 64 ]		1315100	0					
ANR	1315118	Identifier	str		1315100	1					
ANR	1315119	PrimaryExpression	64		1315100	2					
ANR	1315120	IdentifierDecl	* tmp_ptr = NULL		1315100	2					
ANR	1315121	IdentifierDeclType	char *		1315100	0					
ANR	1315122	Identifier	tmp_ptr		1315100	1					
ANR	1315123	AssignmentExpression	* tmp_ptr = NULL		1315100	2		=			
ANR	1315124	Identifier	NULL		1315100	0					
ANR	1315125	Identifier	NULL		1315100	1					
ANR	1315126	IdentifierDeclStatement	"int i , j ;"	1224:1:33180:33188	1315100	2	True				
ANR	1315127	IdentifierDecl	i		1315100	0					
ANR	1315128	IdentifierDeclType	int		1315100	0					
ANR	1315129	Identifier	i		1315100	1					
ANR	1315130	IdentifierDecl	j		1315100	1					
ANR	1315131	IdentifierDeclType	int		1315100	0					
ANR	1315132	Identifier	j		1315100	1					
ANR	1315133	IfStatement	if ( c == '\\n' )		1315100	3					
ANR	1315134	Condition	c == '\\n'	1225:5:33195:33203	1315100	0	True				
ANR	1315135	EqualityExpression	c == '\\n'		1315100	0		==			
ANR	1315136	Identifier	c		1315100	0					
ANR	1315137	PrimaryExpression	'\\n'		1315100	1					
ANR	1315138	CompoundStatement		5:16:93:93	1315100	1					
ANR	1315139	ExpressionStatement	egg -> lang . line ++	1226:2:33210:33226	1315100	0	True				
ANR	1315140	PostIncDecOperationExpression	egg -> lang . line ++		1315100	0					
ANR	1315141	MemberAccess	egg -> lang . line		1315100	0					
ANR	1315142	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315143	Identifier	egg		1315100	0					
ANR	1315144	Identifier	lang		1315100	1					
ANR	1315145	Identifier	line		1315100	1					
ANR	1315146	IncDec	++		1315100	1					
ANR	1315147	ExpressionStatement	egg -> lang . elem_n = 0	1227:2:33230:33250	1315100	1	True				
ANR	1315148	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1315149	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315150	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315151	Identifier	egg		1315100	0					
ANR	1315152	Identifier	lang		1315100	1					
ANR	1315153	Identifier	elem_n		1315100	1					
ANR	1315154	PrimaryExpression	0		1315100	1					
ANR	1315155	IfStatement	if ( egg -> lang . skipline )		1315100	4					
ANR	1315156	Condition	egg -> lang . skipline	1230:5:33276:33293	1315100	0	True				
ANR	1315157	MemberAccess	egg -> lang . skipline		1315100	0					
ANR	1315158	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315159	Identifier	egg		1315100	0					
ANR	1315160	Identifier	lang		1315100	1					
ANR	1315161	Identifier	skipline		1315100	1					
ANR	1315162	CompoundStatement		10:25:183:183	1315100	1					
ANR	1315163	IfStatement	if ( c != '\\n' )		1315100	0					
ANR	1315164	Condition	c != '\\n'	1231:6:33304:33312	1315100	0	True				
ANR	1315165	EqualityExpression	c != '\\n'		1315100	0		!=			
ANR	1315166	Identifier	c		1315100	0					
ANR	1315167	PrimaryExpression	'\\n'		1315100	1					
ANR	1315168	CompoundStatement		11:17:202:202	1315100	1					
ANR	1315169	ExpressionStatement	egg -> lang . oc = c	1232:3:33320:33336	1315100	0	True				
ANR	1315170	AssignmentExpression	egg -> lang . oc = c		1315100	0		=			
ANR	1315171	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315172	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315173	Identifier	egg		1315100	0					
ANR	1315174	Identifier	lang		1315100	1					
ANR	1315175	Identifier	oc		1315100	1					
ANR	1315176	Identifier	c		1315100	1					
ANR	1315177	ReturnStatement	return 0 ;	1233:3:33341:33349	1315100	1	True				
ANR	1315178	PrimaryExpression	0		1315100	0					
ANR	1315179	ExpressionStatement	egg -> lang . skipline = 0	1235:2:33357:33379	1315100	1	True				
ANR	1315180	AssignmentExpression	egg -> lang . skipline = 0		1315100	0		=			
ANR	1315181	MemberAccess	egg -> lang . skipline		1315100	0					
ANR	1315182	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315183	Identifier	egg		1315100	0					
ANR	1315184	Identifier	lang		1315100	1					
ANR	1315185	Identifier	skipline		1315100	1					
ANR	1315186	PrimaryExpression	0		1315100	1					
ANR	1315187	IfStatement	if ( egg -> lang . mode == DATA )		1315100	5					
ANR	1315188	Condition	egg -> lang . mode == DATA	1237:5:33389:33410	1315100	0	True				
ANR	1315189	EqualityExpression	egg -> lang . mode == DATA		1315100	0		==			
ANR	1315190	MemberAccess	egg -> lang . mode		1315100	0					
ANR	1315191	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315192	Identifier	egg		1315100	0					
ANR	1315193	Identifier	lang		1315100	1					
ANR	1315194	Identifier	mode		1315100	1					
ANR	1315195	Identifier	DATA		1315100	1					
ANR	1315196	CompoundStatement		17:29:300:300	1315100	1					
ANR	1315197	ReturnStatement	"return parsedatachar ( egg , c ) ;"	1238:2:33417:33446	1315100	0	True				
ANR	1315198	CallExpression	"parsedatachar ( egg , c )"		1315100	0					
ANR	1315199	Callee	parsedatachar		1315100	0					
ANR	1315200	Identifier	parsedatachar		1315100	0					
ANR	1315201	ArgumentList	egg		1315100	1					
ANR	1315202	Argument	egg		1315100	0					
ANR	1315203	Identifier	egg		1315100	0					
ANR	1315204	Argument	c		1315100	1					
ANR	1315205	Identifier	c		1315100	0					
ANR	1315206	IfStatement	if ( egg -> lang . mode == INLINE )		1315100	6					
ANR	1315207	Condition	egg -> lang . mode == INLINE	1240:5:33456:33479	1315100	0	True				
ANR	1315208	EqualityExpression	egg -> lang . mode == INLINE		1315100	0		==			
ANR	1315209	MemberAccess	egg -> lang . mode		1315100	0					
ANR	1315210	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315211	Identifier	egg		1315100	0					
ANR	1315212	Identifier	lang		1315100	1					
ANR	1315213	Identifier	mode		1315100	1					
ANR	1315214	Identifier	INLINE		1315100	1					
ANR	1315215	CompoundStatement		20:31:369:369	1315100	1					
ANR	1315216	ReturnStatement	"return parseinlinechar ( egg , c ) ;"	1241:2:33486:33517	1315100	0	True				
ANR	1315217	CallExpression	"parseinlinechar ( egg , c )"		1315100	0					
ANR	1315218	Callee	parseinlinechar		1315100	0					
ANR	1315219	Identifier	parseinlinechar		1315100	0					
ANR	1315220	ArgumentList	egg		1315100	1					
ANR	1315221	Argument	egg		1315100	0					
ANR	1315222	Identifier	egg		1315100	0					
ANR	1315223	Argument	c		1315100	1					
ANR	1315224	Identifier	c		1315100	0					
ANR	1315225	IfStatement	if ( egg -> lang . quoteline )		1315100	7					
ANR	1315226	Condition	egg -> lang . quoteline	1244:5:33541:33559	1315100	0	True				
ANR	1315227	MemberAccess	egg -> lang . quoteline		1315100	0					
ANR	1315228	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315229	Identifier	egg		1315100	0					
ANR	1315230	Identifier	lang		1315100	1					
ANR	1315231	Identifier	quoteline		1315100	1					
ANR	1315232	CompoundStatement		24:26:449:449	1315100	1					
ANR	1315233	IfStatement	if ( c != egg -> lang . quoteline )		1315100	0					
ANR	1315234	Condition	c != egg -> lang . quoteline	1245:6:33570:33593	1315100	0	True				
ANR	1315235	EqualityExpression	c != egg -> lang . quoteline		1315100	0		!=			
ANR	1315236	Identifier	c		1315100	0					
ANR	1315237	MemberAccess	egg -> lang . quoteline		1315100	1					
ANR	1315238	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315239	Identifier	egg		1315100	0					
ANR	1315240	Identifier	lang		1315100	1					
ANR	1315241	Identifier	quoteline		1315100	1					
ANR	1315242	CompoundStatement		25:32:483:483	1315100	1					
ANR	1315243	IfStatement	if ( egg -> lang . quotelinevar == 1 )		1315100	0					
ANR	1315244	Condition	egg -> lang . quotelinevar == 1	1246:7:33605:33631	1315100	0	True				
ANR	1315245	EqualityExpression	egg -> lang . quotelinevar == 1		1315100	0		==			
ANR	1315246	MemberAccess	egg -> lang . quotelinevar		1315100	0					
ANR	1315247	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315248	Identifier	egg		1315100	0					
ANR	1315249	Identifier	lang		1315100	1					
ANR	1315250	Identifier	quotelinevar		1315100	1					
ANR	1315251	PrimaryExpression	1		1315100	1					
ANR	1315252	CompoundStatement		26:36:521:521	1315100	1					
ANR	1315253	IfStatement	if ( c == '`' )		1315100	0					
ANR	1315254	Condition	c == '`'	1247:8:33644:33651	1315100	0	True				
ANR	1315255	EqualityExpression	c == '`'		1315100	0		==			
ANR	1315256	Identifier	c		1315100	0					
ANR	1315257	PrimaryExpression	'`'		1315100	1					
ANR	1315258	CompoundStatement		27:18:541:541	1315100	1					
ANR	1315259	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = 0	1248:5:33661:33697	1315100	0	True				
ANR	1315260	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = 0		1315100	0		=			
ANR	1315261	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1315100	0					
ANR	1315262	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315263	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315264	Identifier	egg		1315100	0					
ANR	1315265	Identifier	lang		1315100	1					
ANR	1315266	Identifier	elem		1315100	1					
ANR	1315267	MemberAccess	egg -> lang . elem_n		1315100	1					
ANR	1315268	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315269	Identifier	egg		1315100	0					
ANR	1315270	Identifier	lang		1315100	1					
ANR	1315271	Identifier	elem_n		1315100	1					
ANR	1315272	PrimaryExpression	0		1315100	1					
ANR	1315273	ExpressionStatement	egg -> lang . elem_n = 0	1249:5:33704:33724	1315100	1	True				
ANR	1315274	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1315275	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315276	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315277	Identifier	egg		1315100	0					
ANR	1315278	Identifier	lang		1315100	1					
ANR	1315279	Identifier	elem_n		1315100	1					
ANR	1315280	PrimaryExpression	0		1315100	1					
ANR	1315281	ExpressionStatement	"tmp_ptr = r_egg_mkvar ( egg , str , egg -> lang . elem , 0 )"	1250:5:33731:33782	1315100	2	True				
ANR	1315282	AssignmentExpression	"tmp_ptr = r_egg_mkvar ( egg , str , egg -> lang . elem , 0 )"		1315100	0		=			
ANR	1315283	Identifier	tmp_ptr		1315100	0					
ANR	1315284	CallExpression	"r_egg_mkvar ( egg , str , egg -> lang . elem , 0 )"		1315100	1					
ANR	1315285	Callee	r_egg_mkvar		1315100	0					
ANR	1315286	Identifier	r_egg_mkvar		1315100	0					
ANR	1315287	ArgumentList	egg		1315100	1					
ANR	1315288	Argument	egg		1315100	0					
ANR	1315289	Identifier	egg		1315100	0					
ANR	1315290	Argument	str		1315100	1					
ANR	1315291	Identifier	str		1315100	0					
ANR	1315292	Argument	egg -> lang . elem		1315100	2					
ANR	1315293	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315294	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315295	Identifier	egg		1315100	0					
ANR	1315296	Identifier	lang		1315100	1					
ANR	1315297	Identifier	elem		1315100	1					
ANR	1315298	Argument	0		1315100	3					
ANR	1315299	PrimaryExpression	0		1315100	0					
ANR	1315300	ExpressionStatement	"r_egg_printf ( egg , ""%s"" , tmp_ptr )"	1251:5:33789:33822	1315100	3	True				
ANR	1315301	CallExpression	"r_egg_printf ( egg , ""%s"" , tmp_ptr )"		1315100	0					
ANR	1315302	Callee	r_egg_printf		1315100	0					
ANR	1315303	Identifier	r_egg_printf		1315100	0					
ANR	1315304	ArgumentList	egg		1315100	1					
ANR	1315305	Argument	egg		1315100	0					
ANR	1315306	Identifier	egg		1315100	0					
ANR	1315307	Argument	"""%s"""		1315100	1					
ANR	1315308	PrimaryExpression	"""%s"""		1315100	0					
ANR	1315309	Argument	tmp_ptr		1315100	2					
ANR	1315310	Identifier	tmp_ptr		1315100	0					
ANR	1315311	ExpressionStatement	free ( tmp_ptr )	1252:5:33829:33843	1315100	4	True				
ANR	1315312	CallExpression	free ( tmp_ptr )		1315100	0					
ANR	1315313	Callee	free		1315100	0					
ANR	1315314	Identifier	free		1315100	0					
ANR	1315315	ArgumentList	tmp_ptr		1315100	1					
ANR	1315316	Argument	tmp_ptr		1315100	0					
ANR	1315317	Identifier	tmp_ptr		1315100	0					
ANR	1315318	ExpressionStatement	egg -> lang . quotelinevar = 0	1253:5:33850:33876	1315100	5	True				
ANR	1315319	AssignmentExpression	egg -> lang . quotelinevar = 0		1315100	0		=			
ANR	1315320	MemberAccess	egg -> lang . quotelinevar		1315100	0					
ANR	1315321	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315322	Identifier	egg		1315100	0					
ANR	1315323	Identifier	lang		1315100	1					
ANR	1315324	Identifier	quotelinevar		1315100	1					
ANR	1315325	PrimaryExpression	0		1315100	1					
ANR	1315326	ElseStatement	else		1315100	0					
ANR	1315327	CompoundStatement		34:11:776:776	1315100	0					
ANR	1315328	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c	1255:5:33896:33934	1315100	0	True				
ANR	1315329	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c		1315100	0		=			
ANR	1315330	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ++ ]		1315100	0					
ANR	1315331	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315332	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315333	Identifier	egg		1315100	0					
ANR	1315334	Identifier	lang		1315100	1					
ANR	1315335	Identifier	elem		1315100	1					
ANR	1315336	PostIncDecOperationExpression	egg -> lang . elem_n ++		1315100	1					
ANR	1315337	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315338	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315339	Identifier	egg		1315100	0					
ANR	1315340	Identifier	lang		1315100	1					
ANR	1315341	Identifier	elem_n		1315100	1					
ANR	1315342	IncDec	++		1315100	1					
ANR	1315343	Identifier	c		1315100	1					
ANR	1315344	ElseStatement	else		1315100	0					
ANR	1315345	CompoundStatement		37:10:839:839	1315100	0					
ANR	1315346	IfStatement	if ( c == '`' )		1315100	0					
ANR	1315347	Condition	c == '`'	1258:8:33962:33969	1315100	0	True				
ANR	1315348	EqualityExpression	c == '`'		1315100	0		==			
ANR	1315349	Identifier	c		1315100	0					
ANR	1315350	PrimaryExpression	'`'		1315100	1					
ANR	1315351	CompoundStatement		38:18:859:859	1315100	1					
ANR	1315352	ExpressionStatement	egg -> lang . elem_n = 0	1259:5:33979:33999	1315100	0	True				
ANR	1315353	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1315354	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315355	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315356	Identifier	egg		1315100	0					
ANR	1315357	Identifier	lang		1315100	1					
ANR	1315358	Identifier	elem_n		1315100	1					
ANR	1315359	PrimaryExpression	0		1315100	1					
ANR	1315360	ExpressionStatement	egg -> lang . quotelinevar = 1	1260:5:34006:34032	1315100	1	True				
ANR	1315361	AssignmentExpression	egg -> lang . quotelinevar = 1		1315100	0		=			
ANR	1315362	MemberAccess	egg -> lang . quotelinevar		1315100	0					
ANR	1315363	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315364	Identifier	egg		1315100	0					
ANR	1315365	Identifier	lang		1315100	1					
ANR	1315366	Identifier	quotelinevar		1315100	1					
ANR	1315367	PrimaryExpression	1		1315100	1					
ANR	1315368	ElseStatement	else		1315100	0					
ANR	1315369	CompoundStatement		41:11:932:932	1315100	0					
ANR	1315370	ExpressionStatement	"r_egg_printf ( egg , ""%c"" , c )"	1262:5:34052:34079	1315100	0	True				
ANR	1315371	CallExpression	"r_egg_printf ( egg , ""%c"" , c )"		1315100	0					
ANR	1315372	Callee	r_egg_printf		1315100	0					
ANR	1315373	Identifier	r_egg_printf		1315100	0					
ANR	1315374	ArgumentList	egg		1315100	1					
ANR	1315375	Argument	egg		1315100	0					
ANR	1315376	Identifier	egg		1315100	0					
ANR	1315377	Argument	"""%c"""		1315100	1					
ANR	1315378	PrimaryExpression	"""%c"""		1315100	0					
ANR	1315379	Argument	c		1315100	2					
ANR	1315380	Identifier	c		1315100	0					
ANR	1315381	ExpressionStatement	egg -> lang . oc = c	1265:3:34095:34111	1315100	1	True				
ANR	1315382	AssignmentExpression	egg -> lang . oc = c		1315100	0		=			
ANR	1315383	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315384	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315385	Identifier	egg		1315100	0					
ANR	1315386	Identifier	lang		1315100	1					
ANR	1315387	Identifier	oc		1315100	1					
ANR	1315388	Identifier	c		1315100	1					
ANR	1315389	ReturnStatement	return 0 ;	1266:3:34116:34124	1315100	2	True				
ANR	1315390	PrimaryExpression	0		1315100	0					
ANR	1315391	ElseStatement	else		1315100	0					
ANR	1315392	CompoundStatement		47:9:1022:1022	1315100	0					
ANR	1315393	ExpressionStatement	"r_egg_printf ( egg , ""\\n"" )"	1268:3:34140:34164	1315100	0	True				
ANR	1315394	CallExpression	"r_egg_printf ( egg , ""\\n"" )"		1315100	0					
ANR	1315395	Callee	r_egg_printf		1315100	0					
ANR	1315396	Identifier	r_egg_printf		1315100	0					
ANR	1315397	ArgumentList	egg		1315100	1					
ANR	1315398	Argument	egg		1315100	0					
ANR	1315399	Identifier	egg		1315100	0					
ANR	1315400	Argument	"""\\n"""		1315100	1					
ANR	1315401	PrimaryExpression	"""\\n"""		1315100	0					
ANR	1315402	ExpressionStatement	egg -> lang . quoteline = 0	1269:3:34169:34192	1315100	1	True				
ANR	1315403	AssignmentExpression	egg -> lang . quoteline = 0		1315100	0		=			
ANR	1315404	MemberAccess	egg -> lang . quoteline		1315100	0					
ANR	1315405	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315406	Identifier	egg		1315100	0					
ANR	1315407	Identifier	lang		1315100	1					
ANR	1315408	Identifier	quoteline		1315100	1					
ANR	1315409	PrimaryExpression	0		1315100	1					
ANR	1315410	IfStatement	if ( egg -> lang . commentmode )		1315100	8					
ANR	1315411	Condition	egg -> lang . commentmode	1273:5:34207:34227	1315100	0	True				
ANR	1315412	MemberAccess	egg -> lang . commentmode		1315100	0					
ANR	1315413	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315414	Identifier	egg		1315100	0					
ANR	1315415	Identifier	lang		1315100	1					
ANR	1315416	Identifier	commentmode		1315100	1					
ANR	1315417	CompoundStatement		53:28:1117:1117	1315100	1					
ANR	1315418	IfStatement	if ( c == '/' && egg -> lang . oc == '*' )		1315100	0					
ANR	1315419	Condition	c == '/' && egg -> lang . oc == '*'	1274:6:34238:34268	1315100	0	True				
ANR	1315420	AndExpression	c == '/' && egg -> lang . oc == '*'		1315100	0		&&			
ANR	1315421	EqualityExpression	c == '/'		1315100	0		==			
ANR	1315422	Identifier	c		1315100	0					
ANR	1315423	PrimaryExpression	'/'		1315100	1					
ANR	1315424	EqualityExpression	egg -> lang . oc == '*'		1315100	1		==			
ANR	1315425	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315426	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315427	Identifier	egg		1315100	0					
ANR	1315428	Identifier	lang		1315100	1					
ANR	1315429	Identifier	oc		1315100	1					
ANR	1315430	PrimaryExpression	'*'		1315100	1					
ANR	1315431	CompoundStatement		54:39:1158:1158	1315100	1					
ANR	1315432	ExpressionStatement	egg -> lang . commentmode = 0	1275:3:34276:34301	1315100	0	True				
ANR	1315433	AssignmentExpression	egg -> lang . commentmode = 0		1315100	0		=			
ANR	1315434	MemberAccess	egg -> lang . commentmode		1315100	0					
ANR	1315435	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315436	Identifier	egg		1315100	0					
ANR	1315437	Identifier	lang		1315100	1					
ANR	1315438	Identifier	commentmode		1315100	1					
ANR	1315439	PrimaryExpression	0		1315100	1					
ANR	1315440	ExpressionStatement	egg -> lang . oc = c	1277:2:34309:34325	1315100	1	True				
ANR	1315441	AssignmentExpression	egg -> lang . oc = c		1315100	0		=			
ANR	1315442	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315443	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315444	Identifier	egg		1315100	0					
ANR	1315445	Identifier	lang		1315100	1					
ANR	1315446	Identifier	oc		1315100	1					
ANR	1315447	Identifier	c		1315100	1					
ANR	1315448	ReturnStatement	return 0 ;	1278:2:34329:34337	1315100	2	True				
ANR	1315449	PrimaryExpression	0		1315100	0					
ANR	1315450	ElseStatement	else		1315100	0					
ANR	1315451	IfStatement	if ( c == '*' && egg -> lang . oc == '/' )		1315100	0					
ANR	1315452	Condition	c == '*' && egg -> lang . oc == '/'	1279:12:34351:34381	1315100	0	True				
ANR	1315453	AndExpression	c == '*' && egg -> lang . oc == '/'		1315100	0		&&			
ANR	1315454	EqualityExpression	c == '*'		1315100	0		==			
ANR	1315455	Identifier	c		1315100	0					
ANR	1315456	PrimaryExpression	'*'		1315100	1					
ANR	1315457	EqualityExpression	egg -> lang . oc == '/'		1315100	1		==			
ANR	1315458	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315459	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315460	Identifier	egg		1315100	0					
ANR	1315461	Identifier	lang		1315100	1					
ANR	1315462	Identifier	oc		1315100	1					
ANR	1315463	PrimaryExpression	'/'		1315100	1					
ANR	1315464	CompoundStatement		59:45:1271:1271	1315100	1					
ANR	1315465	ExpressionStatement	egg -> lang . commentmode = 1	1280:2:34388:34413	1315100	0	True				
ANR	1315466	AssignmentExpression	egg -> lang . commentmode = 1		1315100	0		=			
ANR	1315467	MemberAccess	egg -> lang . commentmode		1315100	0					
ANR	1315468	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315469	Identifier	egg		1315100	0					
ANR	1315470	Identifier	lang		1315100	1					
ANR	1315471	Identifier	commentmode		1315100	1					
ANR	1315472	PrimaryExpression	1		1315100	1					
ANR	1315473	IfStatement	if ( egg -> lang . slurp )		1315100	9					
ANR	1315474	Condition	egg -> lang . slurp	1282:5:34423:34437	1315100	0	True				
ANR	1315475	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1315476	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315477	Identifier	egg		1315100	0					
ANR	1315478	Identifier	lang		1315100	1					
ANR	1315479	Identifier	slurp		1315100	1					
ANR	1315480	CompoundStatement		62:22:1327:1327	1315100	1					
ANR	1315481	IfStatement	"if ( egg -> lang . slurp != '""' && c == egg -> lang . slurpin )"		1315100	0					
ANR	1315482	Condition	"egg -> lang . slurp != '""' && c == egg -> lang . slurpin"	1283:6:34448:34495	1315100	0	True				
ANR	1315483	AndExpression	"egg -> lang . slurp != '""' && c == egg -> lang . slurpin"		1315100	0		&&			
ANR	1315484	EqualityExpression	"egg -> lang . slurp != '""'"		1315100	0		!=			
ANR	1315485	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1315486	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315487	Identifier	egg		1315100	0					
ANR	1315488	Identifier	lang		1315100	1					
ANR	1315489	Identifier	slurp		1315100	1					
ANR	1315490	PrimaryExpression	"'""'"		1315100	1					
ANR	1315491	EqualityExpression	c == egg -> lang . slurpin		1315100	1		==			
ANR	1315492	Identifier	c		1315100	0					
ANR	1315493	MemberAccess	egg -> lang . slurpin		1315100	1					
ANR	1315494	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315495	Identifier	egg		1315100	0					
ANR	1315496	Identifier	lang		1315100	1					
ANR	1315497	Identifier	slurpin		1315100	1					
ANR	1315498	CompoundStatement		63:56:1385:1385	1315100	1					
ANR	1315499	ExpressionStatement	"exit ( eprintf ( ""%s:%d Nesting of expressions not yet supported\\n"" , egg -> lang . file , egg -> lang . line ) )"	1284:3:34538:34648	1315100	0	True				
ANR	1315500	CallExpression	"exit ( eprintf ( ""%s:%d Nesting of expressions not yet supported\\n"" , egg -> lang . file , egg -> lang . line ) )"		1315100	0					
ANR	1315501	Callee	exit		1315100	0					
ANR	1315502	Identifier	exit		1315100	0					
ANR	1315503	ArgumentList	"eprintf ( ""%s:%d Nesting of expressions not yet supported\\n"" , egg -> lang . file , egg -> lang . line )"		1315100	1					
ANR	1315504	Argument	"eprintf ( ""%s:%d Nesting of expressions not yet supported\\n"" , egg -> lang . file , egg -> lang . line )"		1315100	0					
ANR	1315505	CallExpression	"eprintf ( ""%s:%d Nesting of expressions not yet supported\\n"" , egg -> lang . file , egg -> lang . line )"		1315100	0					
ANR	1315506	Callee	eprintf		1315100	0					
ANR	1315507	Identifier	eprintf		1315100	0					
ANR	1315508	ArgumentList	"""%s:%d Nesting of expressions not yet supported\\n"""		1315100	1					
ANR	1315509	Argument	"""%s:%d Nesting of expressions not yet supported\\n"""		1315100	0					
ANR	1315510	PrimaryExpression	"""%s:%d Nesting of expressions not yet supported\\n"""		1315100	0					
ANR	1315511	Argument	egg -> lang . file		1315100	1					
ANR	1315512	MemberAccess	egg -> lang . file		1315100	0					
ANR	1315513	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315514	Identifier	egg		1315100	0					
ANR	1315515	Identifier	lang		1315100	1					
ANR	1315516	Identifier	file		1315100	1					
ANR	1315517	Argument	egg -> lang . line		1315100	2					
ANR	1315518	MemberAccess	egg -> lang . line		1315100	0					
ANR	1315519	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315520	Identifier	egg		1315100	0					
ANR	1315521	Identifier	lang		1315100	1					
ANR	1315522	Identifier	line		1315100	1					
ANR	1315523	IfStatement	if ( c == egg -> lang . slurp && egg -> lang . oc != '\\\\' )		1315100	1					
ANR	1315524	Condition	c == egg -> lang . slurp && egg -> lang . oc != '\\\\'	1288:6:34660:34703	1315100	0	True				
ANR	1315525	AndExpression	c == egg -> lang . slurp && egg -> lang . oc != '\\\\'		1315100	0		&&			
ANR	1315526	EqualityExpression	c == egg -> lang . slurp		1315100	0		==			
ANR	1315527	Identifier	c		1315100	0					
ANR	1315528	MemberAccess	egg -> lang . slurp		1315100	1					
ANR	1315529	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315530	Identifier	egg		1315100	0					
ANR	1315531	Identifier	lang		1315100	1					
ANR	1315532	Identifier	slurp		1315100	1					
ANR	1315533	EqualityExpression	egg -> lang . oc != '\\\\'		1315100	1		!=			
ANR	1315534	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1315535	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315536	Identifier	egg		1315100	0					
ANR	1315537	Identifier	lang		1315100	1					
ANR	1315538	Identifier	oc		1315100	1					
ANR	1315539	PrimaryExpression	'\\\\'		1315100	1					
ANR	1315540	CompoundStatement		68:52:1593:1593	1315100	1					
ANR	1315541	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'	1289:3:34736:34775	1315100	0	True				
ANR	1315542	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'		1315100	0		=			
ANR	1315543	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1315100	0					
ANR	1315544	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315545	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315546	Identifier	egg		1315100	0					
ANR	1315547	Identifier	lang		1315100	1					
ANR	1315548	Identifier	elem		1315100	1					
ANR	1315549	MemberAccess	egg -> lang . elem_n		1315100	1					
ANR	1315550	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315551	Identifier	egg		1315100	0					
ANR	1315552	Identifier	lang		1315100	1					
ANR	1315553	Identifier	elem_n		1315100	1					
ANR	1315554	PrimaryExpression	'\\0'		1315100	1					
ANR	1315555	IfStatement	if ( egg -> lang . elem_n > 0 )		1315100	1					
ANR	1315556	Condition	egg -> lang . elem_n > 0	1290:7:34784:34803	1315100	0	True				
ANR	1315557	RelationalExpression	egg -> lang . elem_n > 0		1315100	0		>			
ANR	1315558	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315559	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315560	Identifier	egg		1315100	0					
ANR	1315561	Identifier	lang		1315100	1					
ANR	1315562	Identifier	elem_n		1315100	1					
ANR	1315563	PrimaryExpression	0		1315100	1					
ANR	1315564	CompoundStatement		70:29:1693:1693	1315100	1					
ANR	1315565	ExpressionStatement	"rcc_element ( egg , egg -> lang . elem )"	1291:4:34812:34845	1315100	0	True				
ANR	1315566	CallExpression	"rcc_element ( egg , egg -> lang . elem )"		1315100	0					
ANR	1315567	Callee	rcc_element		1315100	0					
ANR	1315568	Identifier	rcc_element		1315100	0					
ANR	1315569	ArgumentList	egg		1315100	1					
ANR	1315570	Argument	egg		1315100	0					
ANR	1315571	Identifier	egg		1315100	0					
ANR	1315572	Argument	egg -> lang . elem		1315100	1					
ANR	1315573	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315574	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315575	Identifier	egg		1315100	0					
ANR	1315576	Identifier	lang		1315100	1					
ANR	1315577	Identifier	elem		1315100	1					
ANR	1315578	ElseStatement	else		1315100	0					
ANR	1315579	CompoundStatement		72:10:1744:1744	1315100	0					
ANR	1315580	ExpressionStatement	"e -> frame ( egg , 0 )"	1293:4:34863:34880	1315100	0	True				
ANR	1315581	CallExpression	"e -> frame ( egg , 0 )"		1315100	0					
ANR	1315582	Callee	e -> frame		1315100	0					
ANR	1315583	PtrMemberAccess	e -> frame		1315100	0					
ANR	1315584	Identifier	e		1315100	0					
ANR	1315585	Identifier	frame		1315100	1					
ANR	1315586	ArgumentList	egg		1315100	1					
ANR	1315587	Argument	egg		1315100	0					
ANR	1315588	Identifier	egg		1315100	0					
ANR	1315589	Argument	0		1315100	1					
ANR	1315590	PrimaryExpression	0		1315100	0					
ANR	1315591	ExpressionStatement	egg -> lang . elem_n = 0	1295:3:34890:34910	1315100	2	True				
ANR	1315592	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1315593	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315594	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315595	Identifier	egg		1315100	0					
ANR	1315596	Identifier	lang		1315100	1					
ANR	1315597	Identifier	elem_n		1315100	1					
ANR	1315598	PrimaryExpression	0		1315100	1					
ANR	1315599	ExpressionStatement	egg -> lang . slurp = 0	1296:3:34915:34934	1315100	3	True				
ANR	1315600	AssignmentExpression	egg -> lang . slurp = 0		1315100	0		=			
ANR	1315601	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1315602	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315603	Identifier	egg		1315100	0					
ANR	1315604	Identifier	lang		1315100	1					
ANR	1315605	Identifier	slurp		1315100	1					
ANR	1315606	PrimaryExpression	0		1315100	1					
ANR	1315607	ElseStatement	else		1315100	0					
ANR	1315608	CompoundStatement		77:9:1832:1832	1315100	0					
ANR	1315609	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c	1298:3:34950:34988	1315100	0	True				
ANR	1315610	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c		1315100	0		=			
ANR	1315611	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ++ ]		1315100	0					
ANR	1315612	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315613	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315614	Identifier	egg		1315100	0					
ANR	1315615	Identifier	lang		1315100	1					
ANR	1315616	Identifier	elem		1315100	1					
ANR	1315617	PostIncDecOperationExpression	egg -> lang . elem_n ++		1315100	1					
ANR	1315618	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315619	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315620	Identifier	egg		1315100	0					
ANR	1315621	Identifier	lang		1315100	1					
ANR	1315622	Identifier	elem_n		1315100	1					
ANR	1315623	IncDec	++		1315100	1					
ANR	1315624	Identifier	c		1315100	1					
ANR	1315625	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'	1300:2:34996:35035	1315100	2	True				
ANR	1315626	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'		1315100	0		=			
ANR	1315627	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1315100	0					
ANR	1315628	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315629	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315630	Identifier	egg		1315100	0					
ANR	1315631	Identifier	lang		1315100	1					
ANR	1315632	Identifier	elem		1315100	1					
ANR	1315633	MemberAccess	egg -> lang . elem_n		1315100	1					
ANR	1315634	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315635	Identifier	egg		1315100	0					
ANR	1315636	Identifier	lang		1315100	1					
ANR	1315637	Identifier	elem_n		1315100	1					
ANR	1315638	PrimaryExpression	'\\0'		1315100	1					
ANR	1315639	ElseStatement	else		1315100	0					
ANR	1315640	CompoundStatement		81:8:1932:1932	1315100	0					
ANR	1315641	SwitchStatement	switch ( c )		1315100	0					
ANR	1315642	Condition	c	1302:10:35057:35057	1315100	0	True				
ANR	1315643	Identifier	c		1315100	0					
ANR	1315644	CompoundStatement		82:13:1947:1947	1315100	1					
ANR	1315645	Label	case ';' :	1303:2:35064:35072	1315100	0	True				
ANR	1315646	ExpressionStatement	rcc_next ( egg )	1304:3:35077:35091	1315100	1	True				
ANR	1315647	CallExpression	rcc_next ( egg )		1315100	0					
ANR	1315648	Callee	rcc_next		1315100	0					
ANR	1315649	Identifier	rcc_next		1315100	0					
ANR	1315650	ArgumentList	egg		1315100	1					
ANR	1315651	Argument	egg		1315100	0					
ANR	1315652	Identifier	egg		1315100	0					
ANR	1315653	BreakStatement	break ;	1305:3:35096:35101	1315100	2	True				
ANR	1315654	Label	"case '""' :"	1306:2:35105:35113	1315100	3	True				
ANR	1315655	ExpressionStatement	"egg -> lang . slurp = '""'"	1307:3:35118:35139	1315100	4	True				
ANR	1315656	AssignmentExpression	"egg -> lang . slurp = '""'"		1315100	0		=			
ANR	1315657	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1315658	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315659	Identifier	egg		1315100	0					
ANR	1315660	Identifier	lang		1315100	1					
ANR	1315661	Identifier	slurp		1315100	1					
ANR	1315662	PrimaryExpression	"'""'"		1315100	1					
ANR	1315663	BreakStatement	break ;	1308:3:35144:35149	1315100	5	True				
ANR	1315664	Label	case '(' :	1309:2:35153:35161	1315100	6	True				
ANR	1315665	ExpressionStatement	egg -> lang . slurpin = '('	1310:3:35166:35189	1315100	7	True				
ANR	1315666	AssignmentExpression	egg -> lang . slurpin = '('		1315100	0		=			
ANR	1315667	MemberAccess	egg -> lang . slurpin		1315100	0					
ANR	1315668	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315669	Identifier	egg		1315100	0					
ANR	1315670	Identifier	lang		1315100	1					
ANR	1315671	Identifier	slurpin		1315100	1					
ANR	1315672	PrimaryExpression	'('		1315100	1					
ANR	1315673	ExpressionStatement	egg -> lang . slurp = ')'	1311:3:35194:35215	1315100	8	True				
ANR	1315674	AssignmentExpression	egg -> lang . slurp = ')'		1315100	0		=			
ANR	1315675	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1315676	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315677	Identifier	egg		1315100	0					
ANR	1315678	Identifier	lang		1315100	1					
ANR	1315679	Identifier	slurp		1315100	1					
ANR	1315680	PrimaryExpression	')'		1315100	1					
ANR	1315681	BreakStatement	break ;	1312:3:35220:35225	1315100	9	True				
ANR	1315682	Label	case '{' :	1313:2:35229:35237	1315100	10	True				
ANR	1315683	IfStatement	if ( CTX > 0 )		1315100	11					
ANR	1315684	Condition	CTX > 0	1314:7:35246:35252	1315100	0	True				
ANR	1315685	RelationalExpression	CTX > 0		1315100	0		>			
ANR	1315686	Identifier	CTX		1315100	0					
ANR	1315687	PrimaryExpression	0		1315100	1					
ANR	1315688	CompoundStatement		94:16:2142:2142	1315100	1					
ANR	1315689	IfStatement	if ( CTX > 31 || CTX < 0 )		1315100	0					
ANR	1315690	Condition	CTX > 31 || CTX < 0	1315:8:35265:35283	1315100	0	True				
ANR	1315691	OrExpression	CTX > 31 || CTX < 0		1315100	0		||			
ANR	1315692	RelationalExpression	CTX > 31		1315100	0		>			
ANR	1315693	Identifier	CTX		1315100	0					
ANR	1315694	PrimaryExpression	31		1315100	1					
ANR	1315695	RelationalExpression	CTX < 0		1315100	1		<			
ANR	1315696	Identifier	CTX		1315100	0					
ANR	1315697	PrimaryExpression	0		1315100	1					
ANR	1315698	CompoundStatement		95:29:2173:2173	1315100	1					
ANR	1315699	ExpressionStatement	"eprintf ( ""Sinking before overflow\\n"" )"	1316:5:35293:35330	1315100	0	True				
ANR	1315700	CallExpression	"eprintf ( ""Sinking before overflow\\n"" )"		1315100	0					
ANR	1315701	Callee	eprintf		1315100	0					
ANR	1315702	Identifier	eprintf		1315100	0					
ANR	1315703	ArgumentList	"""Sinking before overflow\\n"""		1315100	1					
ANR	1315704	Argument	"""Sinking before overflow\\n"""		1315100	0					
ANR	1315705	PrimaryExpression	"""Sinking before overflow\\n"""		1315100	0					
ANR	1315706	ExpressionStatement	CTX = 0	1317:5:35337:35344	1315100	1	True				
ANR	1315707	AssignmentExpression	CTX = 0		1315100	0		=			
ANR	1315708	Identifier	CTX		1315100	0					
ANR	1315709	PrimaryExpression	0		1315100	1					
ANR	1315710	BreakStatement	break ;	1318:5:35351:35356	1315100	2	True				
ANR	1315711	IfStatement	"if ( egg -> lang . nested_callname [ CTX ] && strstr ( egg -> lang . nested_callname [ CTX ] , ""if"" ) && strstr ( egg -> lang . elem , ""else"" ) )"		1315100	1					
ANR	1315712	Condition	"egg -> lang . nested_callname [ CTX ] && strstr ( egg -> lang . nested_callname [ CTX ] , ""if"" ) && strstr ( egg -> lang . elem , ""else"" )"	1321:8:35430:35551	1315100	0	True				
ANR	1315713	AndExpression	"egg -> lang . nested_callname [ CTX ] && strstr ( egg -> lang . nested_callname [ CTX ] , ""if"" ) && strstr ( egg -> lang . elem , ""else"" )"		1315100	0		&&			
ANR	1315714	ArrayIndexing	egg -> lang . nested_callname [ CTX ]		1315100	0					
ANR	1315715	MemberAccess	egg -> lang . nested_callname		1315100	0					
ANR	1315716	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315717	Identifier	egg		1315100	0					
ANR	1315718	Identifier	lang		1315100	1					
ANR	1315719	Identifier	nested_callname		1315100	1					
ANR	1315720	Identifier	CTX		1315100	1					
ANR	1315721	AndExpression	"strstr ( egg -> lang . nested_callname [ CTX ] , ""if"" ) && strstr ( egg -> lang . elem , ""else"" )"		1315100	1		&&			
ANR	1315722	CallExpression	"strstr ( egg -> lang . nested_callname [ CTX ] , ""if"" )"		1315100	0					
ANR	1315723	Callee	strstr		1315100	0					
ANR	1315724	Identifier	strstr		1315100	0					
ANR	1315725	ArgumentList	egg -> lang . nested_callname [ CTX ]		1315100	1					
ANR	1315726	Argument	egg -> lang . nested_callname [ CTX ]		1315100	0					
ANR	1315727	ArrayIndexing	egg -> lang . nested_callname [ CTX ]		1315100	0					
ANR	1315728	MemberAccess	egg -> lang . nested_callname		1315100	0					
ANR	1315729	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315730	Identifier	egg		1315100	0					
ANR	1315731	Identifier	lang		1315100	1					
ANR	1315732	Identifier	nested_callname		1315100	1					
ANR	1315733	Identifier	CTX		1315100	1					
ANR	1315734	Argument	"""if"""		1315100	1					
ANR	1315735	PrimaryExpression	"""if"""		1315100	0					
ANR	1315736	CallExpression	"strstr ( egg -> lang . elem , ""else"" )"		1315100	1					
ANR	1315737	Callee	strstr		1315100	0					
ANR	1315738	Identifier	strstr		1315100	0					
ANR	1315739	ArgumentList	egg -> lang . elem		1315100	1					
ANR	1315740	Argument	egg -> lang . elem		1315100	0					
ANR	1315741	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1315742	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315743	Identifier	egg		1315100	0					
ANR	1315744	Identifier	lang		1315100	1					
ANR	1315745	Identifier	elem		1315100	1					
ANR	1315746	Argument	"""else"""		1315100	1					
ANR	1315747	PrimaryExpression	"""else"""		1315100	0					
ANR	1315748	CompoundStatement		102:41:2441:2441	1315100	1					
ANR	1315749	ExpressionStatement	* egg -> lang . elem = x00	1323:5:35561:35585	1315100	0	True				
ANR	1315750	AssignmentExpression	* egg -> lang . elem = x00		1315100	0		=			
ANR	1315751	UnaryOperationExpression	* egg -> lang . elem		1315100	0					
ANR	1315752	UnaryOperator	*		1315100	0					
ANR	1315753	MemberAccess	egg -> lang . elem		1315100	1					
ANR	1315754	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315755	Identifier	egg		1315100	0					
ANR	1315756	Identifier	lang		1315100	1					
ANR	1315757	Identifier	elem		1315100	1					
ANR	1315758	Identifier	x00		1315100	1					
ANR	1315759	ExpressionStatement	egg -> lang . elem_n = 0	1324:5:35592:35612	1315100	1	True				
ANR	1315760	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1315761	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1315762	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315763	Identifier	egg		1315100	0					
ANR	1315764	Identifier	lang		1315100	1					
ANR	1315765	Identifier	elem_n		1315100	1					
ANR	1315766	PrimaryExpression	0		1315100	1					
ANR	1315767	Statement	R_FREE	1325:5:35619:35624	1315100	2	True				
ANR	1315768	Statement	(	1325:12:35626:35626	1315100	3	True				
ANR	1315769	Statement	egg	1325:13:35627:35629	1315100	4	True				
ANR	1315770	Statement	->	1325:16:35630:35631	1315100	5	True				
ANR	1315771	Statement	lang	1325:18:35632:35635	1315100	6	True				
ANR	1315772	Statement	.	1325:22:35636:35636	1315100	7	True				
ANR	1315773	Statement	ifelse_table	1325:23:35637:35648	1315100	8	True				
ANR	1315774	Statement	[	1325:35:35649:35649	1315100	9	True				
ANR	1315775	Statement	CTX	1325:36:35650:35652	1315100	10	True				
ANR	1315776	Statement	]	1325:39:35653:35653	1315100	11	True				
ANR	1315777	Statement	[	1325:40:35654:35654	1315100	12	True				
ANR	1315778	Statement	egg	1325:41:35655:35657	1315100	13	True				
ANR	1315779	Statement	->	1325:44:35658:35659	1315100	14	True				
ANR	1315780	Statement	lang	1325:46:35660:35663	1315100	15	True				
ANR	1315781	Statement	.	1325:50:35664:35664	1315100	16	True				
ANR	1315782	Statement	nestedi	1325:51:35665:35671	1315100	17	True				
ANR	1315783	Statement	[	1325:58:35672:35672	1315100	18	True				
ANR	1315784	Statement	CTX	1325:59:35673:35675	1315100	19	True				
ANR	1315785	Statement	]	1325:62:35676:35676	1315100	20	True				
ANR	1315786	Statement	-	1325:64:35678:35678	1315100	21	True				
ANR	1315787	Statement	1	1325:66:35680:35680	1315100	22	True				
ANR	1315788	Statement	]	1325:67:35681:35681	1315100	23	True				
ANR	1315789	Statement	)	1325:68:35682:35682	1315100	24	True				
ANR	1315790	ExpressionStatement	"egg -> lang . ifelse_table [ CTX ] [ egg -> lang . nestedi [ CTX ] - 1 ] = r_str_newf ( ""  __end_%d_%d_%d"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX ] )"	1326:5:35689:35842	1315100	25	True				
ANR	1315791	AssignmentExpression	"egg -> lang . ifelse_table [ CTX ] [ egg -> lang . nestedi [ CTX ] - 1 ] = r_str_newf ( ""  __end_%d_%d_%d"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX ] )"		1315100	0		=			
ANR	1315792	ArrayIndexing	egg -> lang . ifelse_table [ CTX ] [ egg -> lang . nestedi [ CTX ] - 1 ]		1315100	0					
ANR	1315793	ArrayIndexing	egg -> lang . ifelse_table [ CTX ]		1315100	0					
ANR	1315794	MemberAccess	egg -> lang . ifelse_table		1315100	0					
ANR	1315795	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315796	Identifier	egg		1315100	0					
ANR	1315797	Identifier	lang		1315100	1					
ANR	1315798	Identifier	ifelse_table		1315100	1					
ANR	1315799	Identifier	CTX		1315100	1					
ANR	1315800	AdditiveExpression	egg -> lang . nestedi [ CTX ] - 1		1315100	1		-			
ANR	1315801	ArrayIndexing	egg -> lang . nestedi [ CTX ]		1315100	0					
ANR	1315802	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1315803	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315804	Identifier	egg		1315100	0					
ANR	1315805	Identifier	lang		1315100	1					
ANR	1315806	Identifier	nestedi		1315100	1					
ANR	1315807	Identifier	CTX		1315100	1					
ANR	1315808	PrimaryExpression	1		1315100	1					
ANR	1315809	CallExpression	"r_str_newf ( ""  __end_%d_%d_%d"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX ] )"		1315100	1					
ANR	1315810	Callee	r_str_newf		1315100	0					
ANR	1315811	Identifier	r_str_newf		1315100	0					
ANR	1315812	ArgumentList	"""  __end_%d_%d_%d"""		1315100	1					
ANR	1315813	Argument	"""  __end_%d_%d_%d"""		1315100	0					
ANR	1315814	PrimaryExpression	"""  __end_%d_%d_%d"""		1315100	0					
ANR	1315815	Argument	egg -> lang . nfunctions		1315100	1					
ANR	1315816	MemberAccess	egg -> lang . nfunctions		1315100	0					
ANR	1315817	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315818	Identifier	egg		1315100	0					
ANR	1315819	Identifier	lang		1315100	1					
ANR	1315820	Identifier	nfunctions		1315100	1					
ANR	1315821	Argument	CTX		1315100	2					
ANR	1315822	Identifier	CTX		1315100	0					
ANR	1315823	Argument	egg -> lang . nestedi [ CTX ]		1315100	3					
ANR	1315824	ArrayIndexing	egg -> lang . nestedi [ CTX ]		1315100	0					
ANR	1315825	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1315826	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315827	Identifier	egg		1315100	0					
ANR	1315828	Identifier	lang		1315100	1					
ANR	1315829	Identifier	nestedi		1315100	1					
ANR	1315830	Identifier	CTX		1315100	1					
ANR	1315831	ExpressionStatement	"r_egg_printf ( egg , ""  __begin_%d_%d_%d:\\n"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX ] )"	1330:4:35854:35953	1315100	2	True				
ANR	1315832	CallExpression	"r_egg_printf ( egg , ""  __begin_%d_%d_%d:\\n"" , egg -> lang . nfunctions , CTX , egg -> lang . nestedi [ CTX ] )"		1315100	0					
ANR	1315833	Callee	r_egg_printf		1315100	0					
ANR	1315834	Identifier	r_egg_printf		1315100	0					
ANR	1315835	ArgumentList	egg		1315100	1					
ANR	1315836	Argument	egg		1315100	0					
ANR	1315837	Identifier	egg		1315100	0					
ANR	1315838	Argument	"""  __begin_%d_%d_%d:\\n"""		1315100	1					
ANR	1315839	PrimaryExpression	"""  __begin_%d_%d_%d:\\n"""		1315100	0					
ANR	1315840	Argument	egg -> lang . nfunctions		1315100	2					
ANR	1315841	MemberAccess	egg -> lang . nfunctions		1315100	0					
ANR	1315842	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315843	Identifier	egg		1315100	0					
ANR	1315844	Identifier	lang		1315100	1					
ANR	1315845	Identifier	nfunctions		1315100	1					
ANR	1315846	Argument	CTX		1315100	3					
ANR	1315847	Identifier	CTX		1315100	0					
ANR	1315848	Argument	egg -> lang . nestedi [ CTX ]		1315100	4					
ANR	1315849	ArrayIndexing	egg -> lang . nestedi [ CTX ]		1315100	0					
ANR	1315850	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1315851	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315852	Identifier	egg		1315100	0					
ANR	1315853	Identifier	lang		1315100	1					
ANR	1315854	Identifier	nestedi		1315100	1					
ANR	1315855	Identifier	CTX		1315100	1					
ANR	1315856	ExpressionStatement	"rcc_context ( egg , 1 )"	1333:3:35996:36016	1315100	12	True				
ANR	1315857	CallExpression	"rcc_context ( egg , 1 )"		1315100	0					
ANR	1315858	Callee	rcc_context		1315100	0					
ANR	1315859	Identifier	rcc_context		1315100	0					
ANR	1315860	ArgumentList	egg		1315100	1					
ANR	1315861	Argument	egg		1315100	0					
ANR	1315862	Identifier	egg		1315100	0					
ANR	1315863	Argument	1		1315100	1					
ANR	1315864	PrimaryExpression	1		1315100	0					
ANR	1315865	BreakStatement	break ;	1334:3:36021:36026	1315100	13	True				
ANR	1315866	Label	case '}' :	1335:2:36030:36038	1315100	14	True				
ANR	1315867	ExpressionStatement	egg -> lang . endframe = egg -> lang . nested [ CTX ]	1336:3:36043:36085	1315100	15	True				
ANR	1315868	AssignmentExpression	egg -> lang . endframe = egg -> lang . nested [ CTX ]		1315100	0		=			
ANR	1315869	MemberAccess	egg -> lang . endframe		1315100	0					
ANR	1315870	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315871	Identifier	egg		1315100	0					
ANR	1315872	Identifier	lang		1315100	1					
ANR	1315873	Identifier	endframe		1315100	1					
ANR	1315874	ArrayIndexing	egg -> lang . nested [ CTX ]		1315100	1					
ANR	1315875	MemberAccess	egg -> lang . nested		1315100	0					
ANR	1315876	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315877	Identifier	egg		1315100	0					
ANR	1315878	Identifier	lang		1315100	1					
ANR	1315879	Identifier	nested		1315100	1					
ANR	1315880	Identifier	CTX		1315100	1					
ANR	1315881	IfStatement	if ( egg -> lang . endframe )		1315100	16					
ANR	1315882	Condition	egg -> lang . endframe	1337:7:36094:36111	1315100	0	True				
ANR	1315883	MemberAccess	egg -> lang . endframe		1315100	0					
ANR	1315884	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315885	Identifier	egg		1315100	0					
ANR	1315886	Identifier	lang		1315100	1					
ANR	1315887	Identifier	endframe		1315100	1					
ANR	1315888	CompoundStatement		117:27:3001:3001	1315100	1					
ANR	1315889	ExpressionStatement	"r_egg_printf ( egg , ""%s"" , egg -> lang . endframe )"	1339:4:36164:36208	1315100	0	True				
ANR	1315890	CallExpression	"r_egg_printf ( egg , ""%s"" , egg -> lang . endframe )"		1315100	0					
ANR	1315891	Callee	r_egg_printf		1315100	0					
ANR	1315892	Identifier	r_egg_printf		1315100	0					
ANR	1315893	ArgumentList	egg		1315100	1					
ANR	1315894	Argument	egg		1315100	0					
ANR	1315895	Identifier	egg		1315100	0					
ANR	1315896	Argument	"""%s"""		1315100	1					
ANR	1315897	PrimaryExpression	"""%s"""		1315100	0					
ANR	1315898	Argument	egg -> lang . endframe		1315100	2					
ANR	1315899	MemberAccess	egg -> lang . endframe		1315100	0					
ANR	1315900	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315901	Identifier	egg		1315100	0					
ANR	1315902	Identifier	lang		1315100	1					
ANR	1315903	Identifier	endframe		1315100	1					
ANR	1315904	ExpressionStatement	R_FREE ( egg -> lang . nested [ CTX ] )	1340:4:36214:36244	1315100	1	True				
ANR	1315905	CallExpression	R_FREE ( egg -> lang . nested [ CTX ] )		1315100	0					
ANR	1315906	Callee	R_FREE		1315100	0					
ANR	1315907	Identifier	R_FREE		1315100	0					
ANR	1315908	ArgumentList	egg -> lang . nested [ CTX ]		1315100	1					
ANR	1315909	Argument	egg -> lang . nested [ CTX ]		1315100	0					
ANR	1315910	ArrayIndexing	egg -> lang . nested [ CTX ]		1315100	0					
ANR	1315911	MemberAccess	egg -> lang . nested		1315100	0					
ANR	1315912	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315913	Identifier	egg		1315100	0					
ANR	1315914	Identifier	lang		1315100	1					
ANR	1315915	Identifier	nested		1315100	1					
ANR	1315916	Identifier	CTX		1315100	1					
ANR	1315917	IfStatement	if ( CTX > 1 )		1315100	17					
ANR	1315918	Condition	CTX > 1	1343:7:36294:36300	1315100	0	True				
ANR	1315919	RelationalExpression	CTX > 1		1315100	0		>			
ANR	1315920	Identifier	CTX		1315100	0					
ANR	1315921	PrimaryExpression	1		1315100	1					
ANR	1315922	CompoundStatement		123:16:3190:3190	1315100	1					
ANR	1315923	IfStatement	"if ( egg -> lang . nested_callname [ CTX - 1 ] && strstr ( egg -> lang . nested_callname [ CTX - 1 ] , ""if"" ) )"		1315100	0					
ANR	1315924	Condition	"egg -> lang . nested_callname [ CTX - 1 ] && strstr ( egg -> lang . nested_callname [ CTX - 1 ] , ""if"" )"	1344:8:36313:36399	1315100	0	True				
ANR	1315925	AndExpression	"egg -> lang . nested_callname [ CTX - 1 ] && strstr ( egg -> lang . nested_callname [ CTX - 1 ] , ""if"" )"		1315100	0		&&			
ANR	1315926	ArrayIndexing	egg -> lang . nested_callname [ CTX - 1 ]		1315100	0					
ANR	1315927	MemberAccess	egg -> lang . nested_callname		1315100	0					
ANR	1315928	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315929	Identifier	egg		1315100	0					
ANR	1315930	Identifier	lang		1315100	1					
ANR	1315931	Identifier	nested_callname		1315100	1					
ANR	1315932	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1315933	Identifier	CTX		1315100	0					
ANR	1315934	PrimaryExpression	1		1315100	1					
ANR	1315935	CallExpression	"strstr ( egg -> lang . nested_callname [ CTX - 1 ] , ""if"" )"		1315100	1					
ANR	1315936	Callee	strstr		1315100	0					
ANR	1315937	Identifier	strstr		1315100	0					
ANR	1315938	ArgumentList	egg -> lang . nested_callname [ CTX - 1 ]		1315100	1					
ANR	1315939	Argument	egg -> lang . nested_callname [ CTX - 1 ]		1315100	0					
ANR	1315940	ArrayIndexing	egg -> lang . nested_callname [ CTX - 1 ]		1315100	0					
ANR	1315941	MemberAccess	egg -> lang . nested_callname		1315100	0					
ANR	1315942	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315943	Identifier	egg		1315100	0					
ANR	1315944	Identifier	lang		1315100	1					
ANR	1315945	Identifier	nested_callname		1315100	1					
ANR	1315946	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1315947	Identifier	CTX		1315100	0					
ANR	1315948	PrimaryExpression	1		1315100	1					
ANR	1315949	Argument	"""if"""		1315100	1					
ANR	1315950	PrimaryExpression	"""if"""		1315100	0					
ANR	1315951	CompoundStatement		124:97:3289:3289	1315100	1					
ANR	1315952	ExpressionStatement	"tmp_ptr = r_str_newf ( ""__ifelse_%d_%d"" , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"	1345:5:36409:36489	1315100	0	True				
ANR	1315953	AssignmentExpression	"tmp_ptr = r_str_newf ( ""__ifelse_%d_%d"" , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1315100	0		=			
ANR	1315954	Identifier	tmp_ptr		1315100	0					
ANR	1315955	CallExpression	"r_str_newf ( ""__ifelse_%d_%d"" , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1315100	1					
ANR	1315956	Callee	r_str_newf		1315100	0					
ANR	1315957	Identifier	r_str_newf		1315100	0					
ANR	1315958	ArgumentList	"""__ifelse_%d_%d"""		1315100	1					
ANR	1315959	Argument	"""__ifelse_%d_%d"""		1315100	0					
ANR	1315960	PrimaryExpression	"""__ifelse_%d_%d"""		1315100	0					
ANR	1315961	Argument	CTX - 1		1315100	1					
ANR	1315962	AdditiveExpression	CTX - 1		1315100	0		-			
ANR	1315963	Identifier	CTX		1315100	0					
ANR	1315964	PrimaryExpression	1		1315100	1					
ANR	1315965	Argument	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	2					
ANR	1315966	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	0		-			
ANR	1315967	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1315100	0					
ANR	1315968	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1315969	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1315970	Identifier	egg		1315100	0					
ANR	1315971	Identifier	lang		1315100	1					
ANR	1315972	Identifier	nestedi		1315100	1					
ANR	1315973	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1315974	Identifier	CTX		1315100	0					
ANR	1315975	PrimaryExpression	1		1315100	1					
ANR	1315976	PrimaryExpression	1		1315100	1					
ANR	1315977	ExpressionStatement	"e -> jmp ( egg , tmp_ptr , 0 )"	1346:5:36496:36520	1315100	1	True				
ANR	1315978	CallExpression	"e -> jmp ( egg , tmp_ptr , 0 )"		1315100	0					
ANR	1315979	Callee	e -> jmp		1315100	0					
ANR	1315980	PtrMemberAccess	e -> jmp		1315100	0					
ANR	1315981	Identifier	e		1315100	0					
ANR	1315982	Identifier	jmp		1315100	1					
ANR	1315983	ArgumentList	egg		1315100	1					
ANR	1315984	Argument	egg		1315100	0					
ANR	1315985	Identifier	egg		1315100	0					
ANR	1315986	Argument	tmp_ptr		1315100	1					
ANR	1315987	Identifier	tmp_ptr		1315100	0					
ANR	1315988	Argument	0		1315100	2					
ANR	1315989	PrimaryExpression	0		1315100	0					
ANR	1315990	ExpressionStatement	R_FREE ( tmp_ptr )	1347:5:36527:36543	1315100	2	True				
ANR	1315991	CallExpression	R_FREE ( tmp_ptr )		1315100	0					
ANR	1315992	Callee	R_FREE		1315100	0					
ANR	1315993	Identifier	R_FREE		1315100	0					
ANR	1315994	ArgumentList	tmp_ptr		1315100	1					
ANR	1315995	Argument	tmp_ptr		1315100	0					
ANR	1315996	Identifier	tmp_ptr		1315100	0					
ANR	1315997	ExpressionStatement	"egg -> lang . ifelse_table [ CTX - 1 ] [ egg -> lang . nestedi [ CTX - 1 ] - 1 ] = r_str_newf ( ""__end_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"	1348:5:36562:36733	1315100	3	True				
ANR	1315998	AssignmentExpression	"egg -> lang . ifelse_table [ CTX - 1 ] [ egg -> lang . nestedi [ CTX - 1 ] - 1 ] = r_str_newf ( ""__end_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1315100	0		=			
ANR	1315999	ArrayIndexing	egg -> lang . ifelse_table [ CTX - 1 ] [ egg -> lang . nestedi [ CTX - 1 ] - 1 ]		1315100	0					
ANR	1316000	ArrayIndexing	egg -> lang . ifelse_table [ CTX - 1 ]		1315100	0					
ANR	1316001	MemberAccess	egg -> lang . ifelse_table		1315100	0					
ANR	1316002	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316003	Identifier	egg		1315100	0					
ANR	1316004	Identifier	lang		1315100	1					
ANR	1316005	Identifier	ifelse_table		1315100	1					
ANR	1316006	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1316007	Identifier	CTX		1315100	0					
ANR	1316008	PrimaryExpression	1		1315100	1					
ANR	1316009	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	1		-			
ANR	1316010	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1315100	0					
ANR	1316011	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1316012	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316013	Identifier	egg		1315100	0					
ANR	1316014	Identifier	lang		1315100	1					
ANR	1316015	Identifier	nestedi		1315100	1					
ANR	1316016	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1316017	Identifier	CTX		1315100	0					
ANR	1316018	PrimaryExpression	1		1315100	1					
ANR	1316019	PrimaryExpression	1		1315100	1					
ANR	1316020	CallExpression	"r_str_newf ( ""__end_%d_%d_%d"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1315100	1					
ANR	1316021	Callee	r_str_newf		1315100	0					
ANR	1316022	Identifier	r_str_newf		1315100	0					
ANR	1316023	ArgumentList	"""__end_%d_%d_%d"""		1315100	1					
ANR	1316024	Argument	"""__end_%d_%d_%d"""		1315100	0					
ANR	1316025	PrimaryExpression	"""__end_%d_%d_%d"""		1315100	0					
ANR	1316026	Argument	egg -> lang . nfunctions		1315100	1					
ANR	1316027	MemberAccess	egg -> lang . nfunctions		1315100	0					
ANR	1316028	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316029	Identifier	egg		1315100	0					
ANR	1316030	Identifier	lang		1315100	1					
ANR	1316031	Identifier	nfunctions		1315100	1					
ANR	1316032	Argument	CTX - 1		1315100	2					
ANR	1316033	AdditiveExpression	CTX - 1		1315100	0		-			
ANR	1316034	Identifier	CTX		1315100	0					
ANR	1316035	PrimaryExpression	1		1315100	1					
ANR	1316036	Argument	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	3					
ANR	1316037	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	0		-			
ANR	1316038	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1315100	0					
ANR	1316039	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1316040	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316041	Identifier	egg		1315100	0					
ANR	1316042	Identifier	lang		1315100	1					
ANR	1316043	Identifier	nestedi		1315100	1					
ANR	1316044	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1316045	Identifier	CTX		1315100	0					
ANR	1316046	PrimaryExpression	1		1315100	1					
ANR	1316047	PrimaryExpression	1		1315100	1					
ANR	1316048	ExpressionStatement	"r_egg_printf ( egg , ""  __end_%d_%d_%d:\\n"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"	1356:4:36867:36976	1315100	1	True				
ANR	1316049	CallExpression	"r_egg_printf ( egg , ""  __end_%d_%d_%d:\\n"" , egg -> lang . nfunctions , CTX - 1 , egg -> lang . nestedi [ CTX - 1 ] - 1 )"		1315100	0					
ANR	1316050	Callee	r_egg_printf		1315100	0					
ANR	1316051	Identifier	r_egg_printf		1315100	0					
ANR	1316052	ArgumentList	egg		1315100	1					
ANR	1316053	Argument	egg		1315100	0					
ANR	1316054	Identifier	egg		1315100	0					
ANR	1316055	Argument	"""  __end_%d_%d_%d:\\n"""		1315100	1					
ANR	1316056	PrimaryExpression	"""  __end_%d_%d_%d:\\n"""		1315100	0					
ANR	1316057	Argument	egg -> lang . nfunctions		1315100	2					
ANR	1316058	MemberAccess	egg -> lang . nfunctions		1315100	0					
ANR	1316059	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316060	Identifier	egg		1315100	0					
ANR	1316061	Identifier	lang		1315100	1					
ANR	1316062	Identifier	nfunctions		1315100	1					
ANR	1316063	Argument	CTX - 1		1315100	3					
ANR	1316064	AdditiveExpression	CTX - 1		1315100	0		-			
ANR	1316065	Identifier	CTX		1315100	0					
ANR	1316066	PrimaryExpression	1		1315100	1					
ANR	1316067	Argument	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	4					
ANR	1316068	AdditiveExpression	egg -> lang . nestedi [ CTX - 1 ] - 1		1315100	0		-			
ANR	1316069	ArrayIndexing	egg -> lang . nestedi [ CTX - 1 ]		1315100	0					
ANR	1316070	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1316071	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316072	Identifier	egg		1315100	0					
ANR	1316073	Identifier	lang		1315100	1					
ANR	1316074	Identifier	nestedi		1315100	1					
ANR	1316075	AdditiveExpression	CTX - 1		1315100	1		-			
ANR	1316076	Identifier	CTX		1315100	0					
ANR	1316077	PrimaryExpression	1		1315100	1					
ANR	1316078	PrimaryExpression	1		1315100	1					
ANR	1316079	IfStatement	if ( CTX > 0 )		1315100	18					
ANR	1316080	Condition	CTX > 0	1361:7:37034:37040	1315100	0	True				
ANR	1316081	RelationalExpression	CTX > 0		1315100	0		>			
ANR	1316082	Identifier	CTX		1315100	0					
ANR	1316083	PrimaryExpression	0		1315100	1					
ANR	1316084	CompoundStatement		141:16:3930:3930	1315100	1					
ANR	1316085	ExpressionStatement	egg -> lang . nbrackets ++	1362:4:37049:37070	1315100	0	True				
ANR	1316086	PostIncDecOperationExpression	egg -> lang . nbrackets ++		1315100	0					
ANR	1316087	MemberAccess	egg -> lang . nbrackets		1315100	0					
ANR	1316088	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316089	Identifier	egg		1315100	0					
ANR	1316090	Identifier	lang		1315100	1					
ANR	1316091	Identifier	nbrackets		1315100	1					
ANR	1316092	IncDec	++		1315100	1					
ANR	1316093	ExpressionStatement	"rcc_context ( egg , - 1 )"	1364:3:37080:37101	1315100	19	True				
ANR	1316094	CallExpression	"rcc_context ( egg , - 1 )"		1315100	0					
ANR	1316095	Callee	rcc_context		1315100	0					
ANR	1316096	Identifier	rcc_context		1315100	0					
ANR	1316097	ArgumentList	egg		1315100	1					
ANR	1316098	Argument	egg		1315100	0					
ANR	1316099	Identifier	egg		1315100	0					
ANR	1316100	Argument	- 1		1315100	1					
ANR	1316101	UnaryOperationExpression	- 1		1315100	0					
ANR	1316102	UnaryOperator	-		1315100	0					
ANR	1316103	PrimaryExpression	1		1315100	1					
ANR	1316104	IfStatement	if ( CTX == 0 )		1315100	20					
ANR	1316105	Condition	CTX == 0	1365:7:37110:37117	1315100	0	True				
ANR	1316106	EqualityExpression	CTX == 0		1315100	0		==			
ANR	1316107	Identifier	CTX		1315100	0					
ANR	1316108	PrimaryExpression	0		1315100	1					
ANR	1316109	CompoundStatement		145:17:4007:4007	1315100	1					
ANR	1316110	ExpressionStatement	"r_egg_printf ( egg , ""\\n"" )"	1366:4:37126:37150	1315100	0	True				
ANR	1316111	CallExpression	"r_egg_printf ( egg , ""\\n"" )"		1315100	0					
ANR	1316112	Callee	r_egg_printf		1315100	0					
ANR	1316113	Identifier	r_egg_printf		1315100	0					
ANR	1316114	ArgumentList	egg		1315100	1					
ANR	1316115	Argument	egg		1315100	0					
ANR	1316116	Identifier	egg		1315100	0					
ANR	1316117	Argument	"""\\n"""		1315100	1					
ANR	1316118	PrimaryExpression	"""\\n"""		1315100	0					
ANR	1316119	ForStatement	for ( i = 0 ; i < 32 ; i ++ )		1315100	1					
ANR	1316120	ForInit	i = 0 ;	1370:9:37296:37301	1315100	0	True				
ANR	1316121	AssignmentExpression	i = 0		1315100	0		=			
ANR	1316122	Identifier	i		1315100	0					
ANR	1316123	PrimaryExpression	0		1315100	1					
ANR	1316124	Condition	i < 32	1370:16:37303:37308	1315100	1	True				
ANR	1316125	RelationalExpression	i < 32		1315100	0		<			
ANR	1316126	Identifier	i		1315100	0					
ANR	1316127	PrimaryExpression	32		1315100	1					
ANR	1316128	PostIncDecOperationExpression	i ++	1370:24:37311:37313	1315100	2	True				
ANR	1316129	Identifier	i		1315100	0					
ANR	1316130	IncDec	++		1315100	1					
ANR	1316131	CompoundStatement		150:29:4203:4203	1315100	3					
ANR	1316132	ForStatement	for ( j = 0 ; j < egg -> lang . nestedi [ i ] && j < 32 ; j ++ )		1315100	0					
ANR	1316133	ForInit	j = 0 ;	1371:10:37328:37333	1315100	0	True				
ANR	1316134	AssignmentExpression	j = 0		1315100	0		=			
ANR	1316135	Identifier	j		1315100	0					
ANR	1316136	PrimaryExpression	0		1315100	1					
ANR	1316137	Condition	j < egg -> lang . nestedi [ i ] && j < 32	1371:17:37335:37368	1315100	1	True				
ANR	1316138	AndExpression	j < egg -> lang . nestedi [ i ] && j < 32		1315100	0		&&			
ANR	1316139	RelationalExpression	j < egg -> lang . nestedi [ i ]		1315100	0		<			
ANR	1316140	Identifier	j		1315100	0					
ANR	1316141	ArrayIndexing	egg -> lang . nestedi [ i ]		1315100	1					
ANR	1316142	MemberAccess	egg -> lang . nestedi		1315100	0					
ANR	1316143	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316144	Identifier	egg		1315100	0					
ANR	1316145	Identifier	lang		1315100	1					
ANR	1316146	Identifier	nestedi		1315100	1					
ANR	1316147	Identifier	i		1315100	1					
ANR	1316148	RelationalExpression	j < 32		1315100	1		<			
ANR	1316149	Identifier	j		1315100	0					
ANR	1316150	PrimaryExpression	32		1315100	1					
ANR	1316151	PostIncDecOperationExpression	j ++	1371:53:37371:37373	1315100	2	True				
ANR	1316152	Identifier	j		1315100	0					
ANR	1316153	IncDec	++		1315100	1					
ANR	1316154	CompoundStatement		151:58:4263:4263	1315100	3					
ANR	1316155	IfStatement	if ( egg -> lang . ifelse_table [ i ] [ j ] )		1315100	0					
ANR	1316156	Condition	egg -> lang . ifelse_table [ i ] [ j ]	1372:10:37388:37415	1315100	0	True				
ANR	1316157	ArrayIndexing	egg -> lang . ifelse_table [ i ] [ j ]		1315100	0					
ANR	1316158	ArrayIndexing	egg -> lang . ifelse_table [ i ]		1315100	0					
ANR	1316159	MemberAccess	egg -> lang . ifelse_table		1315100	0					
ANR	1316160	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316161	Identifier	egg		1315100	0					
ANR	1316162	Identifier	lang		1315100	1					
ANR	1316163	Identifier	ifelse_table		1315100	1					
ANR	1316164	Identifier	i		1315100	1					
ANR	1316165	Identifier	j		1315100	1					
ANR	1316166	CompoundStatement		152:40:4305:4305	1315100	1					
ANR	1316167	ExpressionStatement	"r_egg_printf ( egg , ""  __ifelse_%d_%d:\\n"" , i , j )"	1373:7:37427:37474	1315100	0	True				
ANR	1316168	CallExpression	"r_egg_printf ( egg , ""  __ifelse_%d_%d:\\n"" , i , j )"		1315100	0					
ANR	1316169	Callee	r_egg_printf		1315100	0					
ANR	1316170	Identifier	r_egg_printf		1315100	0					
ANR	1316171	ArgumentList	egg		1315100	1					
ANR	1316172	Argument	egg		1315100	0					
ANR	1316173	Identifier	egg		1315100	0					
ANR	1316174	Argument	"""  __ifelse_%d_%d:\\n"""		1315100	1					
ANR	1316175	PrimaryExpression	"""  __ifelse_%d_%d:\\n"""		1315100	0					
ANR	1316176	Argument	i		1315100	2					
ANR	1316177	Identifier	i		1315100	0					
ANR	1316178	Argument	j		1315100	3					
ANR	1316179	Identifier	j		1315100	0					
ANR	1316180	ExpressionStatement	"e -> jmp ( egg , egg -> lang . ifelse_table [ i ] [ j ] , 0 )"	1374:7:37483:37528	1315100	1	True				
ANR	1316181	CallExpression	"e -> jmp ( egg , egg -> lang . ifelse_table [ i ] [ j ] , 0 )"		1315100	0					
ANR	1316182	Callee	e -> jmp		1315100	0					
ANR	1316183	PtrMemberAccess	e -> jmp		1315100	0					
ANR	1316184	Identifier	e		1315100	0					
ANR	1316185	Identifier	jmp		1315100	1					
ANR	1316186	ArgumentList	egg		1315100	1					
ANR	1316187	Argument	egg		1315100	0					
ANR	1316188	Identifier	egg		1315100	0					
ANR	1316189	Argument	egg -> lang . ifelse_table [ i ] [ j ]		1315100	1					
ANR	1316190	ArrayIndexing	egg -> lang . ifelse_table [ i ] [ j ]		1315100	0					
ANR	1316191	ArrayIndexing	egg -> lang . ifelse_table [ i ]		1315100	0					
ANR	1316192	MemberAccess	egg -> lang . ifelse_table		1315100	0					
ANR	1316193	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316194	Identifier	egg		1315100	0					
ANR	1316195	Identifier	lang		1315100	1					
ANR	1316196	Identifier	ifelse_table		1315100	1					
ANR	1316197	Identifier	i		1315100	1					
ANR	1316198	Identifier	j		1315100	1					
ANR	1316199	Argument	0		1315100	2					
ANR	1316200	PrimaryExpression	0		1315100	0					
ANR	1316201	ExpressionStatement	R_FREE ( egg -> lang . ifelse_table [ i ] [ j ] )	1375:7:37537:37574	1315100	2	True				
ANR	1316202	CallExpression	R_FREE ( egg -> lang . ifelse_table [ i ] [ j ] )		1315100	0					
ANR	1316203	Callee	R_FREE		1315100	0					
ANR	1316204	Identifier	R_FREE		1315100	0					
ANR	1316205	ArgumentList	egg -> lang . ifelse_table [ i ] [ j ]		1315100	1					
ANR	1316206	Argument	egg -> lang . ifelse_table [ i ] [ j ]		1315100	0					
ANR	1316207	ArrayIndexing	egg -> lang . ifelse_table [ i ] [ j ]		1315100	0					
ANR	1316208	ArrayIndexing	egg -> lang . ifelse_table [ i ]		1315100	0					
ANR	1316209	MemberAccess	egg -> lang . ifelse_table		1315100	0					
ANR	1316210	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316211	Identifier	egg		1315100	0					
ANR	1316212	Identifier	lang		1315100	1					
ANR	1316213	Identifier	ifelse_table		1315100	1					
ANR	1316214	Identifier	i		1315100	1					
ANR	1316215	Identifier	j		1315100	1					
ANR	1316216	ExpressionStatement	egg -> lang . nbrackets = 0	1381:4:37715:37738	1315100	2	True				
ANR	1316217	AssignmentExpression	egg -> lang . nbrackets = 0		1315100	0		=			
ANR	1316218	MemberAccess	egg -> lang . nbrackets		1315100	0					
ANR	1316219	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316220	Identifier	egg		1315100	0					
ANR	1316221	Identifier	lang		1315100	1					
ANR	1316222	Identifier	nbrackets		1315100	1					
ANR	1316223	PrimaryExpression	0		1315100	1					
ANR	1316224	ExpressionStatement	egg -> lang . nfunctions ++	1382:4:37744:37766	1315100	3	True				
ANR	1316225	PostIncDecOperationExpression	egg -> lang . nfunctions ++		1315100	0					
ANR	1316226	MemberAccess	egg -> lang . nfunctions		1315100	0					
ANR	1316227	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316228	Identifier	egg		1315100	0					
ANR	1316229	Identifier	lang		1315100	1					
ANR	1316230	Identifier	nfunctions		1315100	1					
ANR	1316231	IncDec	++		1315100	1					
ANR	1316232	BreakStatement	break ;	1384:3:37776:37781	1315100	21	True				
ANR	1316233	Label	case ':' :	1385:2:37785:37793	1315100	22	True				
ANR	1316234	IfStatement	if ( egg -> lang . oc == '\\n' || egg -> lang . oc == '}' )		1315100	23					
ANR	1316235	Condition	egg -> lang . oc == '\\n' || egg -> lang . oc == '}'	1386:7:37802:37844	1315100	0	True				
ANR	1316236	OrExpression	egg -> lang . oc == '\\n' || egg -> lang . oc == '}'		1315100	0		||			
ANR	1316237	EqualityExpression	egg -> lang . oc == '\\n'		1315100	0		==			
ANR	1316238	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1316239	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316240	Identifier	egg		1315100	0					
ANR	1316241	Identifier	lang		1315100	1					
ANR	1316242	Identifier	oc		1315100	1					
ANR	1316243	PrimaryExpression	'\\n'		1315100	1					
ANR	1316244	EqualityExpression	egg -> lang . oc == '}'		1315100	1		==			
ANR	1316245	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1316246	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316247	Identifier	egg		1315100	0					
ANR	1316248	Identifier	lang		1315100	1					
ANR	1316249	Identifier	oc		1315100	1					
ANR	1316250	PrimaryExpression	'}'		1315100	1					
ANR	1316251	CompoundStatement		166:52:4734:4734	1315100	1					
ANR	1316252	ExpressionStatement	egg -> lang . quoteline = '\\n'	1387:4:37853:37879	1315100	0	True				
ANR	1316253	AssignmentExpression	egg -> lang . quoteline = '\\n'		1315100	0		=			
ANR	1316254	MemberAccess	egg -> lang . quoteline		1315100	0					
ANR	1316255	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316256	Identifier	egg		1315100	0					
ANR	1316257	Identifier	lang		1315100	1					
ANR	1316258	Identifier	quoteline		1315100	1					
ANR	1316259	PrimaryExpression	'\\n'		1315100	1					
ANR	1316260	ElseStatement	else		1315100	0					
ANR	1316261	CompoundStatement		168:10:4778:4778	1315100	0					
ANR	1316262	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c	1389:4:37897:37935	1315100	0	True				
ANR	1316263	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c		1315100	0		=			
ANR	1316264	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ++ ]		1315100	0					
ANR	1316265	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1316266	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316267	Identifier	egg		1315100	0					
ANR	1316268	Identifier	lang		1315100	1					
ANR	1316269	Identifier	elem		1315100	1					
ANR	1316270	PostIncDecOperationExpression	egg -> lang . elem_n ++		1315100	1					
ANR	1316271	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1316272	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316273	Identifier	egg		1315100	0					
ANR	1316274	Identifier	lang		1315100	1					
ANR	1316275	Identifier	elem_n		1315100	1					
ANR	1316276	IncDec	++		1315100	1					
ANR	1316277	Identifier	c		1315100	1					
ANR	1316278	BreakStatement	break ;	1391:3:37945:37950	1315100	24	True				
ANR	1316279	Label	case '#' :	1392:2:37954:37962	1315100	25	True				
ANR	1316280	IfStatement	if ( egg -> lang . oc == '\\n' )		1315100	26					
ANR	1316281	Condition	egg -> lang . oc == '\\n'	1393:7:37971:37990	1315100	0	True				
ANR	1316282	EqualityExpression	egg -> lang . oc == '\\n'		1315100	0		==			
ANR	1316283	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1316284	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316285	Identifier	egg		1315100	0					
ANR	1316286	Identifier	lang		1315100	1					
ANR	1316287	Identifier	oc		1315100	1					
ANR	1316288	PrimaryExpression	'\\n'		1315100	1					
ANR	1316289	CompoundStatement		173:29:4880:4880	1315100	1					
ANR	1316290	ExpressionStatement	egg -> lang . skipline = 1	1394:4:37999:38021	1315100	0	True				
ANR	1316291	AssignmentExpression	egg -> lang . skipline = 1		1315100	0		=			
ANR	1316292	MemberAccess	egg -> lang . skipline		1315100	0					
ANR	1316293	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316294	Identifier	egg		1315100	0					
ANR	1316295	Identifier	lang		1315100	1					
ANR	1316296	Identifier	skipline		1315100	1					
ANR	1316297	PrimaryExpression	1		1315100	1					
ANR	1316298	BreakStatement	break ;	1396:3:38031:38036	1315100	27	True				
ANR	1316299	Label	case '/' :	1397:2:38040:38048	1315100	28	True				
ANR	1316300	IfStatement	if ( egg -> lang . oc == '/' )		1315100	29					
ANR	1316301	Condition	egg -> lang . oc == '/'	1398:7:38057:38075	1315100	0	True				
ANR	1316302	EqualityExpression	egg -> lang . oc == '/'		1315100	0		==			
ANR	1316303	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1316304	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316305	Identifier	egg		1315100	0					
ANR	1316306	Identifier	lang		1315100	1					
ANR	1316307	Identifier	oc		1315100	1					
ANR	1316308	PrimaryExpression	'/'		1315100	1					
ANR	1316309	CompoundStatement		178:28:4965:4965	1315100	1					
ANR	1316310	ExpressionStatement	egg -> lang . skipline = 1	1399:4:38084:38106	1315100	0	True				
ANR	1316311	AssignmentExpression	egg -> lang . skipline = 1		1315100	0		=			
ANR	1316312	MemberAccess	egg -> lang . skipline		1315100	0					
ANR	1316313	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316314	Identifier	egg		1315100	0					
ANR	1316315	Identifier	lang		1315100	1					
ANR	1316316	Identifier	skipline		1315100	1					
ANR	1316317	PrimaryExpression	1		1315100	1					
ANR	1316318	ElseStatement	else		1315100	0					
ANR	1316319	CompoundStatement		180:10:5005:5005	1315100	0					
ANR	1316320	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c	1401:4:38124:38162	1315100	0	True				
ANR	1316321	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c		1315100	0		=			
ANR	1316322	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ++ ]		1315100	0					
ANR	1316323	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1316324	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316325	Identifier	egg		1315100	0					
ANR	1316326	Identifier	lang		1315100	1					
ANR	1316327	Identifier	elem		1315100	1					
ANR	1316328	PostIncDecOperationExpression	egg -> lang . elem_n ++		1315100	1					
ANR	1316329	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1316330	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316331	Identifier	egg		1315100	0					
ANR	1316332	Identifier	lang		1315100	1					
ANR	1316333	Identifier	elem_n		1315100	1					
ANR	1316334	IncDec	++		1315100	1					
ANR	1316335	Identifier	c		1315100	1					
ANR	1316336	BreakStatement	break ;	1403:3:38172:38177	1315100	30	True				
ANR	1316337	Label	default :	1404:2:38181:38188	1315100	31	True				
ANR	1316338	Identifier	default		1315100	0					
ANR	1316339	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c	1405:3:38193:38231	1315100	32	True				
ANR	1316340	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ++ ] = c		1315100	0		=			
ANR	1316341	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ++ ]		1315100	0					
ANR	1316342	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1316343	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316344	Identifier	egg		1315100	0					
ANR	1316345	Identifier	lang		1315100	1					
ANR	1316346	Identifier	elem		1315100	1					
ANR	1316347	PostIncDecOperationExpression	egg -> lang . elem_n ++		1315100	1					
ANR	1316348	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1316349	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316350	Identifier	egg		1315100	0					
ANR	1316351	Identifier	lang		1315100	1					
ANR	1316352	Identifier	elem_n		1315100	1					
ANR	1316353	IncDec	++		1315100	1					
ANR	1316354	Identifier	c		1315100	1					
ANR	1316355	IfStatement	if ( egg -> lang . slurp )		1315100	1					
ANR	1316356	Condition	egg -> lang . slurp	1407:6:38243:38257	1315100	0	True				
ANR	1316357	MemberAccess	egg -> lang . slurp		1315100	0					
ANR	1316358	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316359	Identifier	egg		1315100	0					
ANR	1316360	Identifier	lang		1315100	1					
ANR	1316361	Identifier	slurp		1315100	1					
ANR	1316362	CompoundStatement		187:23:5147:5147	1315100	1					
ANR	1316363	IfStatement	if ( egg -> lang . elem_n )		1315100	0					
ANR	1316364	Condition	egg -> lang . elem_n	1408:7:38269:38284	1315100	0	True				
ANR	1316365	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1316366	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316367	Identifier	egg		1315100	0					
ANR	1316368	Identifier	lang		1315100	1					
ANR	1316369	Identifier	elem_n		1315100	1					
ANR	1316370	CompoundStatement		188:25:5174:5174	1315100	1					
ANR	1316371	ExpressionStatement	ptr = egg -> lang . elem	1409:4:38293:38313	1315100	0	True				
ANR	1316372	AssignmentExpression	ptr = egg -> lang . elem		1315100	0		=			
ANR	1316373	Identifier	ptr		1315100	0					
ANR	1316374	MemberAccess	egg -> lang . elem		1315100	1					
ANR	1316375	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316376	Identifier	egg		1315100	0					
ANR	1316377	Identifier	lang		1315100	1					
ANR	1316378	Identifier	elem		1315100	1					
ANR	1316379	ExpressionStatement	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'	1410:4:38319:38358	1315100	1	True				
ANR	1316380	AssignmentExpression	egg -> lang . elem [ egg -> lang . elem_n ] = '\\0'		1315100	0		=			
ANR	1316381	ArrayIndexing	egg -> lang . elem [ egg -> lang . elem_n ]		1315100	0					
ANR	1316382	MemberAccess	egg -> lang . elem		1315100	0					
ANR	1316383	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316384	Identifier	egg		1315100	0					
ANR	1316385	Identifier	lang		1315100	1					
ANR	1316386	Identifier	elem		1315100	1					
ANR	1316387	MemberAccess	egg -> lang . elem_n		1315100	1					
ANR	1316388	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316389	Identifier	egg		1315100	0					
ANR	1316390	Identifier	lang		1315100	1					
ANR	1316391	Identifier	elem_n		1315100	1					
ANR	1316392	PrimaryExpression	'\\0'		1315100	1					
ANR	1316393	WhileStatement	while ( is_space ( * ptr ) )		1315100	2					
ANR	1316394	Condition	is_space ( * ptr )	1411:11:38371:38385	1315100	0	True				
ANR	1316395	CallExpression	is_space ( * ptr )		1315100	0					
ANR	1316396	Callee	is_space		1315100	0					
ANR	1316397	Identifier	is_space		1315100	0					
ANR	1316398	ArgumentList	* ptr		1315100	1					
ANR	1316399	Argument	* ptr		1315100	0					
ANR	1316400	UnaryOperationExpression	* ptr		1315100	0					
ANR	1316401	UnaryOperator	*		1315100	0					
ANR	1316402	Identifier	ptr		1315100	1					
ANR	1316403	CompoundStatement		191:28:5275:5275	1315100	1					
ANR	1316404	ExpressionStatement	ptr ++	1412:5:38395:38400	1315100	0	True				
ANR	1316405	PostIncDecOperationExpression	ptr ++		1315100	0					
ANR	1316406	Identifier	ptr		1315100	0					
ANR	1316407	IncDec	++		1315100	1					
ANR	1316408	ExpressionStatement	"rcc_fun ( egg , ptr )"	1414:4:38412:38430	1315100	3	True				
ANR	1316409	CallExpression	"rcc_fun ( egg , ptr )"		1315100	0					
ANR	1316410	Callee	rcc_fun		1315100	0					
ANR	1316411	Identifier	rcc_fun		1315100	0					
ANR	1316412	ArgumentList	egg		1315100	1					
ANR	1316413	Argument	egg		1315100	0					
ANR	1316414	Identifier	egg		1315100	0					
ANR	1316415	Argument	ptr		1315100	1					
ANR	1316416	Identifier	ptr		1315100	0					
ANR	1316417	ExpressionStatement	egg -> lang . elem_n = 0	1416:3:38440:38460	1315100	1	True				
ANR	1316418	AssignmentExpression	egg -> lang . elem_n = 0		1315100	0		=			
ANR	1316419	MemberAccess	egg -> lang . elem_n		1315100	0					
ANR	1316420	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316421	Identifier	egg		1315100	0					
ANR	1316422	Identifier	lang		1315100	1					
ANR	1316423	Identifier	elem_n		1315100	1					
ANR	1316424	PrimaryExpression	0		1315100	1					
ANR	1316425	IfStatement	if ( c != '\\t' && c != ' ' )		1315100	10					
ANR	1316426	Condition	c != '\\t' && c != ' '	1419:5:38474:38494	1315100	0	True				
ANR	1316427	AndExpression	c != '\\t' && c != ' '		1315100	0		&&			
ANR	1316428	EqualityExpression	c != '\\t'		1315100	0		!=			
ANR	1316429	Identifier	c		1315100	0					
ANR	1316430	PrimaryExpression	'\\t'		1315100	1					
ANR	1316431	EqualityExpression	c != ' '		1315100	1		!=			
ANR	1316432	Identifier	c		1315100	0					
ANR	1316433	PrimaryExpression	' '		1315100	1					
ANR	1316434	CompoundStatement		199:28:5384:5384	1315100	1					
ANR	1316435	ExpressionStatement	egg -> lang . oc = c	1420:2:38501:38517	1315100	0	True				
ANR	1316436	AssignmentExpression	egg -> lang . oc = c		1315100	0		=			
ANR	1316437	MemberAccess	egg -> lang . oc		1315100	0					
ANR	1316438	PtrMemberAccess	egg -> lang		1315100	0					
ANR	1316439	Identifier	egg		1315100	0					
ANR	1316440	Identifier	lang		1315100	1					
ANR	1316441	Identifier	oc		1315100	1					
ANR	1316442	Identifier	c		1315100	1					
ANR	1316443	ReturnStatement	return 0 ;	1422:1:38523:38531	1315100	11	True				
ANR	1316444	PrimaryExpression	0		1315100	0					
ANR	1316445	ReturnType	R_API int		1315100	1					
ANR	1316446	Identifier	r_egg_lang_parsechar		1315100	2					
ANR	1316447	ParameterList	"REgg * egg , char c"		1315100	3					
ANR	1316448	Parameter	REgg * egg	1221:31:33093:33101	1315100	0	True				
ANR	1316449	ParameterType	REgg *		1315100	0					
ANR	1316450	Identifier	egg		1315100	1					
ANR	1316451	Parameter	char c	1221:42:33104:33109	1315100	1	True				
ANR	1316452	ParameterType	char		1315100	0					
ANR	1316453	Identifier	c		1315100	1					
ANR	1316454	CFGEntryNode	ENTRY		1315100		True				
ANR	1316455	CFGExitNode	EXIT		1315100		True				
ANR	1316456	Symbol	* * * egg		1315100						
ANR	1316457	Symbol	egg		1315100						
ANR	1316458	Symbol	egg -> lang . slurpin		1315100						
ANR	1316459	Symbol	CTX		1315100						
ANR	1316460	Symbol	* egg -> lang		1315100						
ANR	1316461	Symbol	egg -> lang . endframe		1315100						
ANR	1316462	Symbol	egg -> lang . ifelse_table		1315100						
ANR	1316463	Symbol	parsedatachar		1315100						
ANR	1316464	Symbol	eprintf		1315100						
ANR	1316465	Symbol	* egg -> lang . nestedi		1315100						
ANR	1316466	Symbol	egg -> lang . quotelinevar		1315100						
ANR	1316467	Symbol	* ptr		1315100						
ANR	1316468	Symbol	INLINE		1315100						
ANR	1316469	Symbol	r_egg_mkvar		1315100						
ANR	1316470	Symbol	* * i		1315100						
ANR	1316471	Symbol	NULL		1315100						
ANR	1316472	Symbol	egg -> lang . nested_callname		1315100						
ANR	1316473	Symbol	egg -> lang . nested		1315100						
ANR	1316474	Symbol	* egg -> lang . elem		1315100						
ANR	1316475	Symbol	egg -> lang . nbrackets		1315100						
ANR	1316476	Symbol	parseinlinechar		1315100						
ANR	1316477	Symbol	egg -> lang . commentmode		1315100						
ANR	1316478	Symbol	egg -> lang . mode		1315100						
ANR	1316479	Symbol	str		1315100						
ANR	1316480	Symbol	DATA		1315100						
ANR	1316481	Symbol	egg -> lang . slurp		1315100						
ANR	1316482	Symbol	strstr		1315100						
ANR	1316483	Symbol	* egg -> lang . elem_n		1315100						
ANR	1316484	Symbol	* egg -> lang . ifelse_table		1315100						
ANR	1316485	Symbol	egg -> lang . quoteline		1315100						
ANR	1316486	Symbol	* * egg -> lang . ifelse_table		1315100						
ANR	1316487	Symbol	egg -> lang . elem		1315100						
ANR	1316488	Symbol	r_str_newf		1315100						
ANR	1316489	Symbol	egg -> remit		1315100						
ANR	1316490	Symbol	egg -> lang		1315100						
ANR	1316491	Symbol	* CTX		1315100						
ANR	1316492	Symbol	* egg -> lang . nested		1315100						
ANR	1316493	Symbol	* egg		1315100						
ANR	1316494	Symbol	egg -> lang . file		1315100						
ANR	1316495	Symbol	egg -> lang . line		1315100						
ANR	1316496	Symbol	* * egg		1315100						
ANR	1316497	Symbol	* * CTX		1315100						
ANR	1316498	Symbol	is_space		1315100						
ANR	1316499	Symbol	* * egg -> lang . nestedi		1315100						
ANR	1316500	Symbol	c		1315100						
ANR	1316501	Symbol	* egg -> lang . nested_callname		1315100						
ANR	1316502	Symbol	e		1315100						
ANR	1316503	Symbol	i		1315100						
ANR	1316504	Symbol	egg -> lang . nfunctions		1315100						
ANR	1316505	Symbol	j		1315100						
ANR	1316506	Symbol	* * egg -> lang		1315100						
ANR	1316507	Symbol	tmp_ptr		1315100						
ANR	1316508	Symbol	egg -> lang . elem_n		1315100						
ANR	1316509	Symbol	ptr		1315100						
ANR	1316510	Symbol	egg -> lang . oc		1315100						
ANR	1316511	Symbol	* i		1315100						
ANR	1316512	Symbol	* j		1315100						
ANR	1316513	Symbol	x00		1315100						
ANR	1316514	Symbol	egg -> lang . skipline		1315100						
ANR	1316515	Symbol	egg -> lang . nestedi		1315100						
