command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5698958	File	data/converged/CVE-2019-16718~_radare2/rax2.c								
ANR	5698959	DeclStmt									
ANR	5698960	Decl							RNum	RNum *	num
ANR	5698961	DeclStmt									
ANR	5698962	Decl							int	int ( )	help
ANR	5698963	DeclStmt									
ANR	5698964	Decl							ut64	ut64	flags
ANR	5698965	DeclStmt									
ANR	5698966	Decl							int	int ( )	use_stdin
ANR	5698967	DeclStmt									
ANR	5698968	Decl							int	int	force_mode
ANR	5698969	DeclStmt									
ANR	5698970	Decl							int	"int ( char * str , int len , int last )"	rax
ANR	5698971	DeclStmt									
ANR	5698972	Decl							const char	const char *	nl
ANR	5698973	Function	format_output	18:0:375:1431							
ANR	5698974	FunctionDef	"format_output (char mode , const char * s)"		5698973	0					
ANR	5698975	CompoundStatement		18:51:426:1431	5698973	0					
ANR	5698976	IdentifierDeclStatement	"ut64 n = r_num_math ( num , s ) ;"	19:1:429:457	5698973	0	True				
ANR	5698977	IdentifierDecl	"n = r_num_math ( num , s )"		5698973	0					
ANR	5698978	IdentifierDeclType	ut64		5698973	0					
ANR	5698979	Identifier	n		5698973	1					
ANR	5698980	AssignmentExpression	"n = r_num_math ( num , s )"		5698973	2		=			
ANR	5698981	Identifier	n		5698973	0					
ANR	5698982	CallExpression	"r_num_math ( num , s )"		5698973	1					
ANR	5698983	Callee	r_num_math		5698973	0					
ANR	5698984	Identifier	r_num_math		5698973	0					
ANR	5698985	ArgumentList	num		5698973	1					
ANR	5698986	Argument	num		5698973	0					
ANR	5698987	Identifier	num		5698973	0					
ANR	5698988	Argument	s		5698973	1					
ANR	5698989	Identifier	s		5698973	0					
ANR	5698990	IdentifierDeclStatement	char strbits [ 65 ] ;	20:1:460:476	5698973	1	True				
ANR	5698991	IdentifierDecl	strbits [ 65 ]		5698973	0					
ANR	5698992	IdentifierDeclType	char [ 65 ]		5698973	0					
ANR	5698993	Identifier	strbits		5698973	1					
ANR	5698994	PrimaryExpression	65		5698973	2					
ANR	5698995	IfStatement	if ( force_mode )		5698973	2					
ANR	5698996	Condition	force_mode	21:5:483:492	5698973	0	True				
ANR	5698997	Identifier	force_mode		5698973	0					
ANR	5698998	CompoundStatement		4:17:68:68	5698973	1					
ANR	5698999	ExpressionStatement	mode = force_mode	22:2:499:516	5698973	0	True				
ANR	5699000	AssignmentExpression	mode = force_mode		5698973	0		=			
ANR	5699001	Identifier	mode		5698973	0					
ANR	5699002	Identifier	force_mode		5698973	1					
ANR	5699003	IfStatement	if ( flags & 2 )		5698973	3					
ANR	5699004	Condition	flags & 2	24:5:526:534	5698973	0	True				
ANR	5699005	BitAndExpression	flags & 2		5698973	0		&			
ANR	5699006	Identifier	flags		5698973	0					
ANR	5699007	PrimaryExpression	2		5698973	1					
ANR	5699008	CompoundStatement		8:2:114:125	5698973	1					
ANR	5699009	IdentifierDeclStatement	ut64 n2 = n ;	25:2:541:552	5698973	0	True				
ANR	5699010	IdentifierDecl	n2 = n		5698973	0					
ANR	5699011	IdentifierDeclType	ut64		5698973	0					
ANR	5699012	Identifier	n2		5698973	1					
ANR	5699013	AssignmentExpression	n2 = n		5698973	2		=			
ANR	5699014	Identifier	n		5698973	0					
ANR	5699015	Identifier	n		5698973	1					
ANR	5699016	ExpressionStatement	"r_mem_swapendian ( ( ut8 * ) & n , ( ut8 * ) & n2 , ( n >> 32 ) ? 8 : 4 )"	26:2:556:615	5698973	1	True				
ANR	5699017	CallExpression	"r_mem_swapendian ( ( ut8 * ) & n , ( ut8 * ) & n2 , ( n >> 32 ) ? 8 : 4 )"		5698973	0					
ANR	5699018	Callee	r_mem_swapendian		5698973	0					
ANR	5699019	Identifier	r_mem_swapendian		5698973	0					
ANR	5699020	ArgumentList	( ut8 * ) & n		5698973	1					
ANR	5699021	Argument	( ut8 * ) & n		5698973	0					
ANR	5699022	CastExpression	( ut8 * ) & n		5698973	0					
ANR	5699023	CastTarget	ut8 *		5698973	0					
ANR	5699024	UnaryOperationExpression	& n		5698973	1					
ANR	5699025	UnaryOperator	&		5698973	0					
ANR	5699026	Identifier	n		5698973	1					
ANR	5699027	Argument	( ut8 * ) & n2		5698973	1					
ANR	5699028	CastExpression	( ut8 * ) & n2		5698973	0					
ANR	5699029	CastTarget	ut8 *		5698973	0					
ANR	5699030	UnaryOperationExpression	& n2		5698973	1					
ANR	5699031	UnaryOperator	&		5698973	0					
ANR	5699032	Identifier	n2		5698973	1					
ANR	5699033	Argument	( n >> 32 ) ? 8 : 4		5698973	2					
ANR	5699034	ConditionalExpression	( n >> 32 ) ? 8 : 4		5698973	0					
ANR	5699035	Condition	n >> 32		5698973	0					
ANR	5699036	ShiftExpression	n >> 32		5698973	0		>>			
ANR	5699037	Identifier	n		5698973	0					
ANR	5699038	PrimaryExpression	32		5698973	1					
ANR	5699039	PrimaryExpression	8		5698973	1					
ANR	5699040	PrimaryExpression	4		5698973	2					
ANR	5699041	SwitchStatement	switch ( mode )		5698973	4					
ANR	5699042	Condition	mode	28:9:629:632	5698973	0	True				
ANR	5699043	Identifier	mode		5698973	0					
ANR	5699044	CompoundStatement		26:2:529:548	5698973	1					
ANR	5699045	Label	case 'I' :	29:1:638:646	5698973	0	True				
ANR	5699046	Statement	printf	30:2:650:655	5698973	1	True				
ANR	5699047	Statement	(	30:9:657:657	5698973	2	True				
ANR	5699048	Statement	"""%"""	30:10:658:660	5698973	3	True				
ANR	5699049	Statement	PFMT64d	30:14:662:668	5698973	4	True				
ANR	5699050	Statement	"""\\n"""	30:22:670:673	5698973	5	True				
ANR	5699051	Statement	","	30:26:674:674	5698973	6	True				
ANR	5699052	Statement	n	30:28:676:676	5698973	7	True				
ANR	5699053	Statement	)	30:29:677:677	5698973	8	True				
ANR	5699054	ExpressionStatement		30:30:678:678	5698973	9	True				
ANR	5699055	BreakStatement	break ;	31:2:682:687	5698973	10	True				
ANR	5699056	Label	case '0' :	32:1:690:698	5698973	11	True				
ANR	5699057	Statement	printf	33:2:702:707	5698973	12	True				
ANR	5699058	Statement	(	33:9:709:709	5698973	13	True				
ANR	5699059	Statement	"""0x%"""	33:10:710:714	5698973	14	True				
ANR	5699060	Statement	PFMT64x	33:16:716:722	5698973	15	True				
ANR	5699061	Statement	"""\\n"""	33:24:724:727	5698973	16	True				
ANR	5699062	Statement	","	33:28:728:728	5698973	17	True				
ANR	5699063	Statement	n	33:30:730:730	5698973	18	True				
ANR	5699064	Statement	)	33:31:731:731	5698973	19	True				
ANR	5699065	ExpressionStatement		33:32:732:732	5698973	20	True				
ANR	5699066	BreakStatement	break ;	34:2:736:741	5698973	21	True				
ANR	5699067	Label	case 'F' :	35:1:744:752	5698973	22	True				
ANR	5699068	CompoundStatement		19:2:331:354	5698973	23					
ANR	5699069	IdentifierDeclStatement	float * f = ( float * ) & n ;	36:2:758:781	5698973	0	True				
ANR	5699070	IdentifierDecl	* f = ( float * ) & n		5698973	0					
ANR	5699071	IdentifierDeclType	float *		5698973	0					
ANR	5699072	Identifier	f		5698973	1					
ANR	5699073	AssignmentExpression	* f = ( float * ) & n		5698973	2		=			
ANR	5699074	Identifier	f		5698973	0					
ANR	5699075	CastExpression	( float * ) & n		5698973	1					
ANR	5699076	CastTarget	float *		5698973	0					
ANR	5699077	UnaryOperationExpression	& n		5698973	1					
ANR	5699078	UnaryOperator	&		5698973	0					
ANR	5699079	Identifier	n		5698973	1					
ANR	5699080	ExpressionStatement	"printf ( ""%ff\\n"" , * f )"	37:2:785:805	5698973	1	True				
ANR	5699081	CallExpression	"printf ( ""%ff\\n"" , * f )"		5698973	0					
ANR	5699082	Callee	printf		5698973	0					
ANR	5699083	Identifier	printf		5698973	0					
ANR	5699084	ArgumentList	"""%ff\\n"""		5698973	1					
ANR	5699085	Argument	"""%ff\\n"""		5698973	0					
ANR	5699086	PrimaryExpression	"""%ff\\n"""		5698973	0					
ANR	5699087	Argument	* f		5698973	1					
ANR	5699088	UnaryOperationExpression	* f		5698973	0					
ANR	5699089	UnaryOperator	*		5698973	0					
ANR	5699090	Identifier	f		5698973	1					
ANR	5699091	BreakStatement	break ;	38:3:810:815	5698973	24	True				
ANR	5699092	Label	case 'f' :	39:1:818:826	5698973	25	True				
ANR	5699093	ExpressionStatement	"printf ( ""%.01lf\\n"" , num -> fvalue )"	39:11:828:860	5698973	26	True				
ANR	5699094	CallExpression	"printf ( ""%.01lf\\n"" , num -> fvalue )"		5698973	0					
ANR	5699095	Callee	printf		5698973	0					
ANR	5699096	Identifier	printf		5698973	0					
ANR	5699097	ArgumentList	"""%.01lf\\n"""		5698973	1					
ANR	5699098	Argument	"""%.01lf\\n"""		5698973	0					
ANR	5699099	PrimaryExpression	"""%.01lf\\n"""		5698973	0					
ANR	5699100	Argument	num -> fvalue		5698973	1					
ANR	5699101	PtrMemberAccess	num -> fvalue		5698973	0					
ANR	5699102	Identifier	num		5698973	0					
ANR	5699103	Identifier	fvalue		5698973	1					
ANR	5699104	BreakStatement	break ;	39:45:862:867	5698973	27	True				
ANR	5699105	Label	case 'l' :	40:1:870:878	5698973	28	True				
ANR	5699106	ExpressionStatement	R_STATIC_ASSERT ( sizeof ( float ) == 4 )	41:2:882:919	5698973	29	True				
ANR	5699107	CallExpression	R_STATIC_ASSERT ( sizeof ( float ) == 4 )		5698973	0					
ANR	5699108	Callee	R_STATIC_ASSERT		5698973	0					
ANR	5699109	Identifier	R_STATIC_ASSERT		5698973	0					
ANR	5699110	ArgumentList	sizeof ( float ) == 4		5698973	1					
ANR	5699111	Argument	sizeof ( float ) == 4		5698973	0					
ANR	5699112	EqualityExpression	sizeof ( float ) == 4		5698973	0		==			
ANR	5699113	SizeofExpression	sizeof ( float )		5698973	0					
ANR	5699114	Sizeof	sizeof		5698973	0					
ANR	5699115	SizeofOperand	float		5698973	1					
ANR	5699116	PrimaryExpression	4		5698973	1					
ANR	5699117	IdentifierDeclStatement	float f = ( float ) num -> fvalue ;	42:2:923:952	5698973	30	True				
ANR	5699118	IdentifierDecl	f = ( float ) num -> fvalue		5698973	0					
ANR	5699119	IdentifierDeclType	float		5698973	0					
ANR	5699120	Identifier	f		5698973	1					
ANR	5699121	AssignmentExpression	f = ( float ) num -> fvalue		5698973	2		=			
ANR	5699122	Identifier	f		5698973	0					
ANR	5699123	CastExpression	( float ) num -> fvalue		5698973	1					
ANR	5699124	CastTarget	float		5698973	0					
ANR	5699125	PtrMemberAccess	num -> fvalue		5698973	1					
ANR	5699126	Identifier	num		5698973	0					
ANR	5699127	Identifier	fvalue		5698973	1					
ANR	5699128	IdentifierDeclStatement	ut8 * p = ( ut8 * ) & f ;	43:2:956:975	5698973	31	True				
ANR	5699129	IdentifierDecl	* p = ( ut8 * ) & f		5698973	0					
ANR	5699130	IdentifierDeclType	ut8 *		5698973	0					
ANR	5699131	Identifier	p		5698973	1					
ANR	5699132	AssignmentExpression	* p = ( ut8 * ) & f		5698973	2		=			
ANR	5699133	Identifier	p		5698973	0					
ANR	5699134	CastExpression	( ut8 * ) & f		5698973	1					
ANR	5699135	CastTarget	ut8 *		5698973	0					
ANR	5699136	UnaryOperationExpression	& f		5698973	1					
ANR	5699137	UnaryOperator	&		5698973	0					
ANR	5699138	Identifier	f		5698973	1					
ANR	5699139	ExpressionStatement	"printf ( ""Fx%02x%02x%02x%02x\\n"" , p [ 3 ] , p [ 2 ] , p [ 1 ] , p [ 0 ] )"	44:2:979:1034	5698973	32	True				
ANR	5699140	CallExpression	"printf ( ""Fx%02x%02x%02x%02x\\n"" , p [ 3 ] , p [ 2 ] , p [ 1 ] , p [ 0 ] )"		5698973	0					
ANR	5699141	Callee	printf		5698973	0					
ANR	5699142	Identifier	printf		5698973	0					
ANR	5699143	ArgumentList	"""Fx%02x%02x%02x%02x\\n"""		5698973	1					
ANR	5699144	Argument	"""Fx%02x%02x%02x%02x\\n"""		5698973	0					
ANR	5699145	PrimaryExpression	"""Fx%02x%02x%02x%02x\\n"""		5698973	0					
ANR	5699146	Argument	p [ 3 ]		5698973	1					
ANR	5699147	ArrayIndexing	p [ 3 ]		5698973	0					
ANR	5699148	Identifier	p		5698973	0					
ANR	5699149	PrimaryExpression	3		5698973	1					
ANR	5699150	Argument	p [ 2 ]		5698973	2					
ANR	5699151	ArrayIndexing	p [ 2 ]		5698973	0					
ANR	5699152	Identifier	p		5698973	0					
ANR	5699153	PrimaryExpression	2		5698973	1					
ANR	5699154	Argument	p [ 1 ]		5698973	3					
ANR	5699155	ArrayIndexing	p [ 1 ]		5698973	0					
ANR	5699156	Identifier	p		5698973	0					
ANR	5699157	PrimaryExpression	1		5698973	1					
ANR	5699158	Argument	p [ 0 ]		5698973	4					
ANR	5699159	ArrayIndexing	p [ 0 ]		5698973	0					
ANR	5699160	Identifier	p		5698973	0					
ANR	5699161	PrimaryExpression	0		5698973	1					
ANR	5699162	BreakStatement	break ;	45:2:1038:1043	5698973	33	True				
ANR	5699163	Label	case 'O' :	46:1:1046:1054	5698973	34	True				
ANR	5699164	Statement	printf	46:11:1056:1061	5698973	35	True				
ANR	5699165	Statement	(	46:18:1063:1063	5698973	36	True				
ANR	5699166	Statement	"""0%"""	46:19:1064:1067	5698973	37	True				
ANR	5699167	Statement	PFMT64o	46:24:1069:1075	5698973	38	True				
ANR	5699168	Statement	"""\\n"""	46:32:1077:1080	5698973	39	True				
ANR	5699169	Statement	","	46:36:1081:1081	5698973	40	True				
ANR	5699170	Statement	n	46:38:1083:1083	5698973	41	True				
ANR	5699171	Statement	)	46:39:1084:1084	5698973	42	True				
ANR	5699172	ExpressionStatement		46:40:1085:1085	5698973	43	True				
ANR	5699173	BreakStatement	break ;	46:42:1087:1092	5698973	44	True				
ANR	5699174	Label	case 'B' :	47:1:1095:1103	5698973	45	True				
ANR	5699175	IfStatement	if ( n )		5698973	46					
ANR	5699176	Condition	n	48:6:1111:1111	5698973	0	True				
ANR	5699177	Identifier	n		5698973	0					
ANR	5699178	CompoundStatement		31:9:687:687	5698973	1					
ANR	5699179	ExpressionStatement	"r_num_to_bits ( strbits , n )"	49:3:1119:1145	5698973	0	True				
ANR	5699180	CallExpression	"r_num_to_bits ( strbits , n )"		5698973	0					
ANR	5699181	Callee	r_num_to_bits		5698973	0					
ANR	5699182	Identifier	r_num_to_bits		5698973	0					
ANR	5699183	ArgumentList	strbits		5698973	1					
ANR	5699184	Argument	strbits		5698973	0					
ANR	5699185	Identifier	strbits		5698973	0					
ANR	5699186	Argument	n		5698973	1					
ANR	5699187	Identifier	n		5698973	0					
ANR	5699188	ExpressionStatement	"printf ( ""%sb\\n"" , strbits )"	50:3:1150:1175	5698973	1	True				
ANR	5699189	CallExpression	"printf ( ""%sb\\n"" , strbits )"		5698973	0					
ANR	5699190	Callee	printf		5698973	0					
ANR	5699191	Identifier	printf		5698973	0					
ANR	5699192	ArgumentList	"""%sb\\n"""		5698973	1					
ANR	5699193	Argument	"""%sb\\n"""		5698973	0					
ANR	5699194	PrimaryExpression	"""%sb\\n"""		5698973	0					
ANR	5699195	Argument	strbits		5698973	1					
ANR	5699196	Identifier	strbits		5698973	0					
ANR	5699197	ElseStatement	else		5698973	0					
ANR	5699198	CompoundStatement		34:9:759:759	5698973	0					
ANR	5699199	ExpressionStatement	"printf ( ""0b\\n"" )"	52:3:1191:1206	5698973	0	True				
ANR	5699200	CallExpression	"printf ( ""0b\\n"" )"		5698973	0					
ANR	5699201	Callee	printf		5698973	0					
ANR	5699202	Identifier	printf		5698973	0					
ANR	5699203	ArgumentList	"""0b\\n"""		5698973	1					
ANR	5699204	Argument	"""0b\\n"""		5698973	0					
ANR	5699205	PrimaryExpression	"""0b\\n"""		5698973	0					
ANR	5699206	BreakStatement	break ;	54:2:1214:1219	5698973	47	True				
ANR	5699207	Label	case 'T' :	55:1:1222:1230	5698973	48	True				
ANR	5699208	IfStatement	if ( n )		5698973	49					
ANR	5699209	Condition	n	56:6:1238:1238	5698973	0	True				
ANR	5699210	Identifier	n		5698973	0					
ANR	5699211	CompoundStatement		39:9:814:814	5698973	1					
ANR	5699212	ExpressionStatement	"r_num_to_trits ( strbits , n )"	57:3:1246:1273	5698973	0	True				
ANR	5699213	CallExpression	"r_num_to_trits ( strbits , n )"		5698973	0					
ANR	5699214	Callee	r_num_to_trits		5698973	0					
ANR	5699215	Identifier	r_num_to_trits		5698973	0					
ANR	5699216	ArgumentList	strbits		5698973	1					
ANR	5699217	Argument	strbits		5698973	0					
ANR	5699218	Identifier	strbits		5698973	0					
ANR	5699219	Argument	n		5698973	1					
ANR	5699220	Identifier	n		5698973	0					
ANR	5699221	ExpressionStatement	"printf ( ""%st\\n"" , strbits )"	58:3:1278:1303	5698973	1	True				
ANR	5699222	CallExpression	"printf ( ""%st\\n"" , strbits )"		5698973	0					
ANR	5699223	Callee	printf		5698973	0					
ANR	5699224	Identifier	printf		5698973	0					
ANR	5699225	ArgumentList	"""%st\\n"""		5698973	1					
ANR	5699226	Argument	"""%st\\n"""		5698973	0					
ANR	5699227	PrimaryExpression	"""%st\\n"""		5698973	0					
ANR	5699228	Argument	strbits		5698973	1					
ANR	5699229	Identifier	strbits		5698973	0					
ANR	5699230	ElseStatement	else		5698973	0					
ANR	5699231	CompoundStatement		42:9:887:887	5698973	0					
ANR	5699232	ExpressionStatement	"printf ( ""0t\\n"" )"	60:3:1319:1334	5698973	0	True				
ANR	5699233	CallExpression	"printf ( ""0t\\n"" )"		5698973	0					
ANR	5699234	Callee	printf		5698973	0					
ANR	5699235	Identifier	printf		5698973	0					
ANR	5699236	ArgumentList	"""0t\\n"""		5698973	1					
ANR	5699237	Argument	"""0t\\n"""		5698973	0					
ANR	5699238	PrimaryExpression	"""0t\\n"""		5698973	0					
ANR	5699239	BreakStatement	break ;	62:2:1342:1347	5698973	50	True				
ANR	5699240	Label	default :	63:1:1350:1357	5698973	51	True				
ANR	5699241	Identifier	default		5698973	0					
ANR	5699242	ExpressionStatement	"eprintf ( ""Unknown output mode %d\\n"" , mode )"	64:2:1361:1403	5698973	52	True				
ANR	5699243	CallExpression	"eprintf ( ""Unknown output mode %d\\n"" , mode )"		5698973	0					
ANR	5699244	Callee	eprintf		5698973	0					
ANR	5699245	Identifier	eprintf		5698973	0					
ANR	5699246	ArgumentList	"""Unknown output mode %d\\n"""		5698973	1					
ANR	5699247	Argument	"""Unknown output mode %d\\n"""		5698973	0					
ANR	5699248	PrimaryExpression	"""Unknown output mode %d\\n"""		5698973	0					
ANR	5699249	Argument	mode		5698973	1					
ANR	5699250	Identifier	mode		5698973	0					
ANR	5699251	BreakStatement	break ;	65:2:1407:1412	5698973	53	True				
ANR	5699252	ReturnStatement	return true ;	67:1:1418:1429	5698973	5	True				
ANR	5699253	Identifier	true		5698973	0					
ANR	5699254	ReturnType	static int		5698973	1					
ANR	5699255	Identifier	format_output		5698973	2					
ANR	5699256	ParameterList	"char mode , const char * s"		5698973	3					
ANR	5699257	Parameter	char mode	18:25:400:408	5698973	0	True				
ANR	5699258	ParameterType	char		5698973	0					
ANR	5699259	Identifier	mode		5698973	1					
ANR	5699260	Parameter	const char * s	18:36:411:423	5698973	1	True				
ANR	5699261	ParameterType	const char *		5698973	0					
ANR	5699262	Identifier	s		5698973	1					
ANR	5699263	CFGEntryNode	ENTRY		5698973		True				
ANR	5699264	CFGExitNode	EXIT		5698973		True				
ANR	5699265	Symbol	strbits		5698973						
ANR	5699266	Symbol	n2		5698973						
ANR	5699267	Symbol	f		5698973						
ANR	5699268	Symbol	num		5698973						
ANR	5699269	Symbol	flags		5698973						
ANR	5699270	Symbol	& f		5698973						
ANR	5699271	Symbol	n		5698973						
ANR	5699272	Symbol	r_num_math		5698973						
ANR	5699273	Symbol	& n2		5698973						
ANR	5699274	Symbol	mode		5698973						
ANR	5699275	Symbol	* f		5698973						
ANR	5699276	Symbol	* num		5698973						
ANR	5699277	Symbol	p		5698973						
ANR	5699278	Symbol	force_mode		5698973						
ANR	5699279	Symbol	s		5698973						
ANR	5699280	Symbol	& n		5698973						
ANR	5699281	Symbol	true		5698973						
ANR	5699282	Symbol	* p		5698973						
ANR	5699283	Symbol	num -> fvalue		5698973						
ANR	5699284	Function	print_ascii_table	70:0:1434:1502							
ANR	5699285	FunctionDef	print_ascii_table ()		5699284	0					
ANR	5699286	CompoundStatement		70:32:1466:1502	5699284	0					
ANR	5699287	ExpressionStatement	"printf ( ""%s"" , ret_ascii_table ( ) )"	71:1:1469:1500	5699284	0	True				
ANR	5699288	CallExpression	"printf ( ""%s"" , ret_ascii_table ( ) )"		5699284	0					
ANR	5699289	Callee	printf		5699284	0					
ANR	5699290	Identifier	printf		5699284	0					
ANR	5699291	ArgumentList	"""%s"""		5699284	1					
ANR	5699292	Argument	"""%s"""		5699284	0					
ANR	5699293	PrimaryExpression	"""%s"""		5699284	0					
ANR	5699294	Argument	ret_ascii_table ( )		5699284	1					
ANR	5699295	CallExpression	ret_ascii_table ( )		5699284	0					
ANR	5699296	Callee	ret_ascii_table		5699284	0					
ANR	5699297	Identifier	ret_ascii_table		5699284	0					
ANR	5699298	ArgumentList			5699284	1					
ANR	5699299	ReturnType	static void		5699284	1					
ANR	5699300	Identifier	print_ascii_table		5699284	2					
ANR	5699301	ParameterList			5699284	3					
ANR	5699302	CFGEntryNode	ENTRY		5699284		True				
ANR	5699303	CFGExitNode	EXIT		5699284		True				
ANR	5699304	Symbol	ret_ascii_table		5699284						
ANR	5699305	Function	help	74:0:1505:4116							
ANR	5699306	FunctionDef	help ()		5699305	0					
ANR	5699307	CompoundStatement		74:18:1523:4116	5699305	0					
ANR	5699308	Statement	printf	75:1:1526:1531	5699305	0	True				
ANR	5699309	Statement	(	75:8:1533:1533	5699305	1	True				
ANR	5699310	Statement	"""  =[base]                      ;  rax2 =10 0x46 -> output in base 10\\n"""	76:2:1537:1608	5699305	2	True				
ANR	5699311	Statement	"""  int     ->  hex              ;  rax2 10\\n"""	77:2:1612:1656	5699305	3	True				
ANR	5699312	Statement	"""  hex     ->  int              ;  rax2 0xa\\n"""	78:2:1660:1705	5699305	4	True				
ANR	5699313	Statement	"""  -int    ->  hex              ;  rax2 -77\\n"""	79:2:1709:1754	5699305	5	True				
ANR	5699314	Statement	"""  -hex    ->  int              ;  rax2 0xffffffb3\\n"""	80:2:1758:1810	5699305	6	True				
ANR	5699315	Statement	"""  int     ->  bin              ;  rax2 b30\\n"""	81:2:1814:1859	5699305	7	True				
ANR	5699316	Statement	"""  int     ->  ternary          ;  rax2 t42\\n"""	82:2:1863:1908	5699305	8	True				
ANR	5699317	Statement	"""  bin     ->  int              ;  rax2 1010d\\n"""	83:2:1912:1959	5699305	9	True				
ANR	5699318	Statement	"""  ternary ->  int              ;  rax2 1010dt\\n"""	84:2:1963:2011	5699305	10	True				
ANR	5699319	Statement	"""  float   ->  hex              ;  rax2 3.33f\\n"""	85:2:2015:2062	5699305	11	True				
ANR	5699320	Statement	"""  hex     ->  float            ;  rax2 Fx40551ed8\\n"""	86:2:2066:2118	5699305	12	True				
ANR	5699321	Statement	"""  oct     ->  hex              ;  rax2 35o\\n"""	87:2:2122:2167	5699305	13	True				
ANR	5699322	Statement	"""  hex     ->  oct              ;  rax2 Ox12 (O is a letter)\\n"""	88:2:2171:2233	5699305	14	True				
ANR	5699323	Statement	"""  bin     ->  hex              ;  rax2 1100011b\\n"""	89:2:2237:2287	5699305	15	True				
ANR	5699324	Statement	"""  hex     ->  bin              ;  rax2 Bx63\\n"""	90:2:2291:2337	5699305	16	True				
ANR	5699325	Statement	"""  ternary ->  hex              ;  rax2 212t\\n"""	91:2:2341:2387	5699305	17	True				
ANR	5699326	Statement	"""  hex     ->  ternary          ;  rax2 Tx23\\n"""	92:2:2391:2437	5699305	18	True				
ANR	5699327	Statement	"""  raw     ->  hex              ;  rax2 -S < /binfile\\n"""	93:2:2441:2496	5699305	19	True				
ANR	5699328	Statement	"""  hex     ->  raw              ;  rax2 -s 414141\\n"""	94:2:2500:2551	5699305	20	True				
ANR	5699329	Statement	"""  -l                           ;  append newline to output (for -E/-D/-r/..\\n"""	95:2:2555:2633	5699305	21	True				
ANR	5699330	Statement	"""  -a      show ascii table     ;  rax2 -a\\n"""	96:2:2637:2681	5699305	22	True				
ANR	5699331	Statement	"""  -b      bin -> str           ;  rax2 -b 01000101 01110110\\n"""	97:2:2685:2747	5699305	23	True				
ANR	5699332	Statement	"""  -B      str -> bin           ;  rax2 -B hello\\n"""	98:2:2751:2801	5699305	24	True				
ANR	5699333	Statement	"""  -d      force integer        ;  rax2 -d 3 -> 3 instead of 0x3\\n"""	99:2:2805:2871	5699305	25	True				
ANR	5699334	Statement	"""  -e      swap endianness      ;  rax2 -e 0x33\\n"""	100:2:2875:2924	5699305	26	True				
ANR	5699335	Statement	"""  -D      base64 decode        ;\\n"""	101:2:2928:2963	5699305	27	True				
ANR	5699336	Statement	"""  -E      base64 encode        ;\\n"""	102:2:2967:3002	5699305	28	True				
ANR	5699337	Statement	"""  -f      floating point       ;  rax2 -f 6.3+2.1\\n"""	103:2:3006:3058	5699305	29	True				
ANR	5699338	Statement	"""  -F      stdin slurp code hex ;  rax2 -F < shellcode.[c/py/js]\\n"""	104:2:3062:3128	5699305	30	True				
ANR	5699339	Statement	"""  -h      help                 ;  rax2 -h\\n"""	105:2:3132:3176	5699305	31	True				
ANR	5699340	Statement	"""  -i      dump as C byte array ;  rax2 -i < bytes\\n"""	106:2:3180:3232	5699305	32	True				
ANR	5699341	Statement	"""  -k      keep base            ;  rax2 -k 33+3 -> 36\\n"""	107:2:3236:3291	5699305	33	True				
ANR	5699342	Statement	"""  -K      randomart            ;  rax2 -K 0x34 1020304050\\n"""	108:2:3295:3355	5699305	34	True				
ANR	5699343	Statement	"""  -L      bin -> hex(bignum)   ;  rax2 -L 111111111 # 0x1ff\\n"""	109:2:3359:3421	5699305	35	True				
ANR	5699344	Statement	"""  -n      binary number        ;  rax2 -n 0x1234 # 34120000\\n"""	110:2:3425:3487	5699305	36	True				
ANR	5699345	Statement	"""  -o      octalstr -> raw      ;  rax2 -o \\\\162 \\\\62 # r2\\n"""	111:2:3491:3551	5699305	37	True				
ANR	5699346	Statement	"""  -N      binary number        ;  rax2 -N 0x1234 # \\\\x34\\\\x12\\\\x00\\\\x00\\n"""	112:2:3555:3629	5699305	38	True				
ANR	5699347	Statement	"""  -r      r2 style output      ;  rax2 -r 0x1234\\n"""	113:2:3633:3684	5699305	39	True				
ANR	5699348	Statement	"""  -s      hexstr -> raw        ;  rax2 -s 43 4a 50\\n"""	114:2:3688:3741	5699305	40	True				
ANR	5699349	Statement	"""  -S      raw -> hexstr        ;  rax2 -S < /bin/ls > ls.hex\\n"""	115:2:3745:3808	5699305	41	True				
ANR	5699350	Statement	"""  -t      tstamp -> str        ;  rax2 -t 1234567890\\n"""	116:2:3812:3867	5699305	42	True				
ANR	5699351	Statement	"""  -x      hash string          ;  rax2 -x linux osx\\n"""	117:2:3871:3925	5699305	43	True				
ANR	5699352	Statement	"""  -u      units                ;  rax2 -u 389289238 # 317.0M\\n"""	118:2:3929:3992	5699305	44	True				
ANR	5699353	Statement	"""  -w      signed word          ;  rax2 -w 16 0xffff\\n"""	119:2:3996:4050	5699305	45	True				
ANR	5699354	Statement	"""  -v      version              ;  rax2 -v\\n"""	120:2:4054:4098	5699305	46	True				
ANR	5699355	Statement	)	120:47:4099:4099	5699305	47	True				
ANR	5699356	ExpressionStatement		120:48:4100:4100	5699305	48	True				
ANR	5699357	ReturnStatement	return true ;	121:1:4103:4114	5699305	49	True				
ANR	5699358	Identifier	true		5699305	0					
ANR	5699359	ReturnType	static int		5699305	1					
ANR	5699360	Identifier	help		5699305	2					
ANR	5699361	ParameterList			5699305	3					
ANR	5699362	CFGEntryNode	ENTRY		5699305		True				
ANR	5699363	CFGExitNode	EXIT		5699305		True				
ANR	5699364	Symbol	true		5699305						
ANR	5699365	Function	rax	124:0:4119:14861							
ANR	5699366	FunctionDef	"rax (char * str , int len , int last)"		5699365	0					
ANR	5699367	CompoundStatement		124:45:4164:14861	5699365	0					
ANR	5699368	IdentifierDeclStatement	ut8 * buf ;	125:1:4167:4175	5699365	0	True				
ANR	5699369	IdentifierDecl	* buf		5699365	0					
ANR	5699370	IdentifierDeclType	ut8 *		5699365	0					
ANR	5699371	Identifier	buf		5699365	1					
ANR	5699372	IdentifierDeclStatement	"char * p , out_mode = ( flags & 128 ) ? 'I' : '0' ;"	126:1:4178:4221	5699365	1	True				
ANR	5699373	IdentifierDecl	* p		5699365	0					
ANR	5699374	IdentifierDeclType	char *		5699365	0					
ANR	5699375	Identifier	p		5699365	1					
ANR	5699376	IdentifierDecl	out_mode = ( flags & 128 ) ? 'I' : '0'		5699365	1					
ANR	5699377	IdentifierDeclType	char		5699365	0					
ANR	5699378	Identifier	out_mode		5699365	1					
ANR	5699379	AssignmentExpression	out_mode = ( flags & 128 ) ? 'I' : '0'		5699365	2		=			
ANR	5699380	Identifier	out_mode		5699365	0					
ANR	5699381	ConditionalExpression	( flags & 128 ) ? 'I' : '0'		5699365	1					
ANR	5699382	Condition	flags & 128		5699365	0					
ANR	5699383	BitAndExpression	flags & 128		5699365	0		&			
ANR	5699384	Identifier	flags		5699365	0					
ANR	5699385	PrimaryExpression	128		5699365	1					
ANR	5699386	PrimaryExpression	'I'		5699365	1					
ANR	5699387	PrimaryExpression	'0'		5699365	2					
ANR	5699388	IdentifierDeclStatement	int i ;	127:1:4224:4229	5699365	2	True				
ANR	5699389	IdentifierDecl	i		5699365	0					
ANR	5699390	IdentifierDeclType	int		5699365	0					
ANR	5699391	Identifier	i		5699365	1					
ANR	5699392	IfStatement	if ( ! ( flags & 4 ) || ! len )		5699365	3					
ANR	5699393	Condition	! ( flags & 4 ) || ! len	128:5:4236:4255	5699365	0	True				
ANR	5699394	OrExpression	! ( flags & 4 ) || ! len		5699365	0		||			
ANR	5699395	UnaryOperationExpression	! ( flags & 4 )		5699365	0					
ANR	5699396	UnaryOperator	!		5699365	0					
ANR	5699397	BitAndExpression	flags & 4		5699365	1		&			
ANR	5699398	Identifier	flags		5699365	0					
ANR	5699399	PrimaryExpression	4		5699365	1					
ANR	5699400	UnaryOperationExpression	! len		5699365	1					
ANR	5699401	UnaryOperator	!		5699365	0					
ANR	5699402	Identifier	len		5699365	1					
ANR	5699403	CompoundStatement		5:27:93:93	5699365	1					
ANR	5699404	ExpressionStatement	len = strlen ( str )	129:2:4262:4280	5699365	0	True				
ANR	5699405	AssignmentExpression	len = strlen ( str )		5699365	0		=			
ANR	5699406	Identifier	len		5699365	0					
ANR	5699407	CallExpression	strlen ( str )		5699365	1					
ANR	5699408	Callee	strlen		5699365	0					
ANR	5699409	Identifier	strlen		5699365	0					
ANR	5699410	ArgumentList	str		5699365	1					
ANR	5699411	Argument	str		5699365	0					
ANR	5699412	Identifier	str		5699365	0					
ANR	5699413	IfStatement	if ( ( flags & 4 ) )		5699365	4					
ANR	5699414	Condition	flags & 4	131:5:4290:4300	5699365	0	True				
ANR	5699415	BitAndExpression	flags & 4		5699365	0		&			
ANR	5699416	Identifier	flags		5699365	0					
ANR	5699417	PrimaryExpression	4		5699365	1					
ANR	5699418	CompoundStatement		8:18:138:138	5699365	1					
ANR	5699419	GotoStatement	goto dotherax ;	132:2:4307:4320	5699365	0	True				
ANR	5699420	Identifier	dotherax		5699365	0					
ANR	5699421	IfStatement	if ( * str == '=' )		5699365	5					
ANR	5699422	Condition	* str == '='	134:5:4330:4340	5699365	0	True				
ANR	5699423	EqualityExpression	* str == '='		5699365	0		==			
ANR	5699424	UnaryOperationExpression	* str		5699365	0					
ANR	5699425	UnaryOperator	*		5699365	0					
ANR	5699426	Identifier	str		5699365	1					
ANR	5699427	PrimaryExpression	'='		5699365	1					
ANR	5699428	CompoundStatement		11:18:178:178	5699365	1					
ANR	5699429	SwitchStatement	switch ( atoi ( str + 1 ) )		5699365	0					
ANR	5699430	Condition	atoi ( str + 1 )	135:10:4355:4368	5699365	0	True				
ANR	5699431	CallExpression	atoi ( str + 1 )		5699365	0					
ANR	5699432	Callee	atoi		5699365	0					
ANR	5699433	Identifier	atoi		5699365	0					
ANR	5699434	ArgumentList	str + 1		5699365	1					
ANR	5699435	Argument	str + 1		5699365	0					
ANR	5699436	AdditiveExpression	str + 1		5699365	0		+			
ANR	5699437	Identifier	str		5699365	0					
ANR	5699438	PrimaryExpression	1		5699365	1					
ANR	5699439	CompoundStatement		12:26:206:206	5699365	1					
ANR	5699440	Label	case 2 :	136:2:4375:4381	5699365	0	True				
ANR	5699441	ExpressionStatement	force_mode = 'B'	136:10:4383:4399	5699365	1	True				
ANR	5699442	AssignmentExpression	force_mode = 'B'		5699365	0		=			
ANR	5699443	Identifier	force_mode		5699365	0					
ANR	5699444	PrimaryExpression	'B'		5699365	1					
ANR	5699445	BreakStatement	break ;	136:28:4401:4406	5699365	2	True				
ANR	5699446	Label	case 3 :	137:2:4410:4416	5699365	3	True				
ANR	5699447	ExpressionStatement	force_mode = 'T'	137:10:4418:4434	5699365	4	True				
ANR	5699448	AssignmentExpression	force_mode = 'T'		5699365	0		=			
ANR	5699449	Identifier	force_mode		5699365	0					
ANR	5699450	PrimaryExpression	'T'		5699365	1					
ANR	5699451	BreakStatement	break ;	137:28:4436:4441	5699365	5	True				
ANR	5699452	Label	case 8 :	138:2:4445:4451	5699365	6	True				
ANR	5699453	ExpressionStatement	force_mode = 'O'	138:10:4453:4469	5699365	7	True				
ANR	5699454	AssignmentExpression	force_mode = 'O'		5699365	0		=			
ANR	5699455	Identifier	force_mode		5699365	0					
ANR	5699456	PrimaryExpression	'O'		5699365	1					
ANR	5699457	BreakStatement	break ;	138:28:4471:4476	5699365	8	True				
ANR	5699458	Label	case 10 :	139:2:4480:4487	5699365	9	True				
ANR	5699459	ExpressionStatement	force_mode = 'I'	139:11:4489:4505	5699365	10	True				
ANR	5699460	AssignmentExpression	force_mode = 'I'		5699365	0		=			
ANR	5699461	Identifier	force_mode		5699365	0					
ANR	5699462	PrimaryExpression	'I'		5699365	1					
ANR	5699463	BreakStatement	break ;	139:29:4507:4512	5699365	11	True				
ANR	5699464	Label	case 16 :	140:2:4516:4523	5699365	12	True				
ANR	5699465	ExpressionStatement	force_mode = '0'	140:11:4525:4541	5699365	13	True				
ANR	5699466	AssignmentExpression	force_mode = '0'		5699365	0		=			
ANR	5699467	Identifier	force_mode		5699365	0					
ANR	5699468	PrimaryExpression	'0'		5699365	1					
ANR	5699469	BreakStatement	break ;	140:29:4543:4548	5699365	14	True				
ANR	5699470	Label	case 0 :	141:2:4552:4558	5699365	15	True				
ANR	5699471	ExpressionStatement	force_mode = str [ 1 ]	141:10:4560:4579	5699365	16	True				
ANR	5699472	AssignmentExpression	force_mode = str [ 1 ]		5699365	0		=			
ANR	5699473	Identifier	force_mode		5699365	0					
ANR	5699474	ArrayIndexing	str [ 1 ]		5699365	1					
ANR	5699475	Identifier	str		5699365	0					
ANR	5699476	PrimaryExpression	1		5699365	1					
ANR	5699477	BreakStatement	break ;	141:31:4581:4586	5699365	17	True				
ANR	5699478	ReturnStatement	return true ;	143:2:4594:4605	5699365	1	True				
ANR	5699479	Identifier	true		5699365	0					
ANR	5699480	IfStatement	if ( * str == '-' )		5699365	6					
ANR	5699481	Condition	* str == '-'	145:5:4615:4625	5699365	0	True				
ANR	5699482	EqualityExpression	* str == '-'		5699365	0		==			
ANR	5699483	UnaryOperationExpression	* str		5699365	0					
ANR	5699484	UnaryOperator	*		5699365	0					
ANR	5699485	Identifier	str		5699365	1					
ANR	5699486	PrimaryExpression	'-'		5699365	1					
ANR	5699487	CompoundStatement		22:18:463:463	5699365	1					
ANR	5699488	WhileStatement	while ( str [ 1 ] && str [ 1 ] != ' ' )		5699365	0					
ANR	5699489	Condition	str [ 1 ] && str [ 1 ] != ' '	146:9:4639:4661	5699365	0	True				
ANR	5699490	AndExpression	str [ 1 ] && str [ 1 ] != ' '		5699365	0		&&			
ANR	5699491	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5699492	Identifier	str		5699365	0					
ANR	5699493	PrimaryExpression	1		5699365	1					
ANR	5699494	EqualityExpression	str [ 1 ] != ' '		5699365	1		!=			
ANR	5699495	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5699496	Identifier	str		5699365	0					
ANR	5699497	PrimaryExpression	1		5699365	1					
ANR	5699498	PrimaryExpression	' '		5699365	1					
ANR	5699499	CompoundStatement		23:34:499:499	5699365	1					
ANR	5699500	SwitchStatement	switch ( str [ 1 ] )		5699365	0					
ANR	5699501	Condition	str [ 1 ]	147:11:4677:4682	5699365	0	True				
ANR	5699502	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5699503	Identifier	str		5699365	0					
ANR	5699504	PrimaryExpression	1		5699365	1					
ANR	5699505	CompoundStatement		24:19:520:520	5699365	1					
ANR	5699506	Label	case 'l' :	148:3:4690:4698	5699365	0	True				
ANR	5699507	ExpressionStatement	"nl = ""\\n"""	148:13:4700:4709	5699365	1	True				
ANR	5699508	AssignmentExpression	"nl = ""\\n"""		5699365	0		=			
ANR	5699509	Identifier	nl		5699365	0					
ANR	5699510	PrimaryExpression	"""\\n"""		5699365	1					
ANR	5699511	BreakStatement	break ;	148:24:4711:4716	5699365	2	True				
ANR	5699512	Label	case 'a' :	149:3:4721:4729	5699365	3	True				
ANR	5699513	ExpressionStatement	print_ascii_table ( )	149:13:4731:4751	5699365	4	True				
ANR	5699514	CallExpression	print_ascii_table ( )		5699365	0					
ANR	5699515	Callee	print_ascii_table		5699365	0					
ANR	5699516	Identifier	print_ascii_table		5699365	0					
ANR	5699517	ArgumentList			5699365	1					
ANR	5699518	ReturnStatement	return 0 ;	149:35:4753:4761	5699365	5	True				
ANR	5699519	PrimaryExpression	0		5699365	0					
ANR	5699520	Label	case 's' :	150:3:4766:4774	5699365	6	True				
ANR	5699521	ExpressionStatement	flags ^= 1	150:13:4776:4786	5699365	7	True				
ANR	5699522	AssignmentExpression	flags ^= 1		5699365	0		^=			
ANR	5699523	Identifier	flags		5699365	0					
ANR	5699524	PrimaryExpression	1		5699365	1					
ANR	5699525	BreakStatement	break ;	150:25:4788:4793	5699365	8	True				
ANR	5699526	Label	case 'e' :	151:3:4798:4806	5699365	9	True				
ANR	5699527	ExpressionStatement	flags ^= 1 << 1	151:13:4808:4823	5699365	10	True				
ANR	5699528	AssignmentExpression	flags ^= 1 << 1		5699365	0		^=			
ANR	5699529	Identifier	flags		5699365	0					
ANR	5699530	ShiftExpression	1 << 1		5699365	1		<<			
ANR	5699531	PrimaryExpression	1		5699365	0					
ANR	5699532	PrimaryExpression	1		5699365	1					
ANR	5699533	BreakStatement	break ;	151:30:4825:4830	5699365	11	True				
ANR	5699534	Label	case 'S' :	152:3:4835:4843	5699365	12	True				
ANR	5699535	ExpressionStatement	flags ^= 1 << 2	152:13:4845:4860	5699365	13	True				
ANR	5699536	AssignmentExpression	flags ^= 1 << 2		5699365	0		^=			
ANR	5699537	Identifier	flags		5699365	0					
ANR	5699538	ShiftExpression	1 << 2		5699365	1		<<			
ANR	5699539	PrimaryExpression	1		5699365	0					
ANR	5699540	PrimaryExpression	2		5699365	1					
ANR	5699541	BreakStatement	break ;	152:30:4862:4867	5699365	14	True				
ANR	5699542	Label	case 'b' :	153:3:4872:4880	5699365	15	True				
ANR	5699543	ExpressionStatement	flags ^= 1 << 3	153:13:4882:4897	5699365	16	True				
ANR	5699544	AssignmentExpression	flags ^= 1 << 3		5699365	0		^=			
ANR	5699545	Identifier	flags		5699365	0					
ANR	5699546	ShiftExpression	1 << 3		5699365	1		<<			
ANR	5699547	PrimaryExpression	1		5699365	0					
ANR	5699548	PrimaryExpression	3		5699365	1					
ANR	5699549	BreakStatement	break ;	153:30:4899:4904	5699365	17	True				
ANR	5699550	Label	case 'B' :	154:3:4909:4917	5699365	18	True				
ANR	5699551	ExpressionStatement	flags ^= 1 << 17	154:13:4919:4935	5699365	19	True				
ANR	5699552	AssignmentExpression	flags ^= 1 << 17		5699365	0		^=			
ANR	5699553	Identifier	flags		5699365	0					
ANR	5699554	ShiftExpression	1 << 17		5699365	1		<<			
ANR	5699555	PrimaryExpression	1		5699365	0					
ANR	5699556	PrimaryExpression	17		5699365	1					
ANR	5699557	BreakStatement	break ;	154:31:4937:4942	5699365	20	True				
ANR	5699558	Label	case 'x' :	155:3:4947:4955	5699365	21	True				
ANR	5699559	ExpressionStatement	flags ^= 1 << 4	155:13:4957:4972	5699365	22	True				
ANR	5699560	AssignmentExpression	flags ^= 1 << 4		5699365	0		^=			
ANR	5699561	Identifier	flags		5699365	0					
ANR	5699562	ShiftExpression	1 << 4		5699365	1		<<			
ANR	5699563	PrimaryExpression	1		5699365	0					
ANR	5699564	PrimaryExpression	4		5699365	1					
ANR	5699565	BreakStatement	break ;	155:30:4974:4979	5699365	23	True				
ANR	5699566	Label	case 'k' :	156:3:4984:4992	5699365	24	True				
ANR	5699567	ExpressionStatement	flags ^= 1 << 5	156:13:4994:5009	5699365	25	True				
ANR	5699568	AssignmentExpression	flags ^= 1 << 5		5699365	0		^=			
ANR	5699569	Identifier	flags		5699365	0					
ANR	5699570	ShiftExpression	1 << 5		5699365	1		<<			
ANR	5699571	PrimaryExpression	1		5699365	0					
ANR	5699572	PrimaryExpression	5		5699365	1					
ANR	5699573	BreakStatement	break ;	156:30:5011:5016	5699365	26	True				
ANR	5699574	Label	case 'f' :	157:3:5021:5029	5699365	27	True				
ANR	5699575	ExpressionStatement	flags ^= 1 << 6	157:13:5031:5046	5699365	28	True				
ANR	5699576	AssignmentExpression	flags ^= 1 << 6		5699365	0		^=			
ANR	5699577	Identifier	flags		5699365	0					
ANR	5699578	ShiftExpression	1 << 6		5699365	1		<<			
ANR	5699579	PrimaryExpression	1		5699365	0					
ANR	5699580	PrimaryExpression	6		5699365	1					
ANR	5699581	BreakStatement	break ;	157:30:5048:5053	5699365	29	True				
ANR	5699582	Label	case 'd' :	158:3:5058:5066	5699365	30	True				
ANR	5699583	ExpressionStatement	flags ^= 1 << 7	158:13:5068:5083	5699365	31	True				
ANR	5699584	AssignmentExpression	flags ^= 1 << 7		5699365	0		^=			
ANR	5699585	Identifier	flags		5699365	0					
ANR	5699586	ShiftExpression	1 << 7		5699365	1		<<			
ANR	5699587	PrimaryExpression	1		5699365	0					
ANR	5699588	PrimaryExpression	7		5699365	1					
ANR	5699589	BreakStatement	break ;	158:30:5085:5090	5699365	32	True				
ANR	5699590	Label	case 'K' :	159:3:5095:5103	5699365	33	True				
ANR	5699591	ExpressionStatement	flags ^= 1 << 8	159:13:5105:5120	5699365	34	True				
ANR	5699592	AssignmentExpression	flags ^= 1 << 8		5699365	0		^=			
ANR	5699593	Identifier	flags		5699365	0					
ANR	5699594	ShiftExpression	1 << 8		5699365	1		<<			
ANR	5699595	PrimaryExpression	1		5699365	0					
ANR	5699596	PrimaryExpression	8		5699365	1					
ANR	5699597	BreakStatement	break ;	159:30:5122:5127	5699365	35	True				
ANR	5699598	Label	case 'n' :	160:3:5132:5140	5699365	36	True				
ANR	5699599	ExpressionStatement	flags ^= 1 << 9	160:13:5142:5157	5699365	37	True				
ANR	5699600	AssignmentExpression	flags ^= 1 << 9		5699365	0		^=			
ANR	5699601	Identifier	flags		5699365	0					
ANR	5699602	ShiftExpression	1 << 9		5699365	1		<<			
ANR	5699603	PrimaryExpression	1		5699365	0					
ANR	5699604	PrimaryExpression	9		5699365	1					
ANR	5699605	BreakStatement	break ;	160:30:5159:5164	5699365	38	True				
ANR	5699606	Label	case 'u' :	161:3:5169:5177	5699365	39	True				
ANR	5699607	ExpressionStatement	flags ^= 1 << 10	161:13:5179:5195	5699365	40	True				
ANR	5699608	AssignmentExpression	flags ^= 1 << 10		5699365	0		^=			
ANR	5699609	Identifier	flags		5699365	0					
ANR	5699610	ShiftExpression	1 << 10		5699365	1		<<			
ANR	5699611	PrimaryExpression	1		5699365	0					
ANR	5699612	PrimaryExpression	10		5699365	1					
ANR	5699613	BreakStatement	break ;	161:31:5197:5202	5699365	41	True				
ANR	5699614	Label	case 't' :	162:3:5207:5215	5699365	42	True				
ANR	5699615	ExpressionStatement	flags ^= 1 << 11	162:13:5217:5233	5699365	43	True				
ANR	5699616	AssignmentExpression	flags ^= 1 << 11		5699365	0		^=			
ANR	5699617	Identifier	flags		5699365	0					
ANR	5699618	ShiftExpression	1 << 11		5699365	1		<<			
ANR	5699619	PrimaryExpression	1		5699365	0					
ANR	5699620	PrimaryExpression	11		5699365	1					
ANR	5699621	BreakStatement	break ;	162:31:5235:5240	5699365	44	True				
ANR	5699622	Label	case 'E' :	163:3:5245:5253	5699365	45	True				
ANR	5699623	ExpressionStatement	flags ^= 1 << 12	163:13:5255:5271	5699365	46	True				
ANR	5699624	AssignmentExpression	flags ^= 1 << 12		5699365	0		^=			
ANR	5699625	Identifier	flags		5699365	0					
ANR	5699626	ShiftExpression	1 << 12		5699365	1		<<			
ANR	5699627	PrimaryExpression	1		5699365	0					
ANR	5699628	PrimaryExpression	12		5699365	1					
ANR	5699629	BreakStatement	break ;	163:31:5273:5278	5699365	47	True				
ANR	5699630	Label	case 'D' :	164:3:5283:5291	5699365	48	True				
ANR	5699631	ExpressionStatement	flags ^= 1 << 13	164:13:5293:5309	5699365	49	True				
ANR	5699632	AssignmentExpression	flags ^= 1 << 13		5699365	0		^=			
ANR	5699633	Identifier	flags		5699365	0					
ANR	5699634	ShiftExpression	1 << 13		5699365	1		<<			
ANR	5699635	PrimaryExpression	1		5699365	0					
ANR	5699636	PrimaryExpression	13		5699365	1					
ANR	5699637	BreakStatement	break ;	164:31:5311:5316	5699365	50	True				
ANR	5699638	Label	case 'F' :	165:3:5321:5329	5699365	51	True				
ANR	5699639	ExpressionStatement	flags ^= 1 << 14	165:13:5331:5347	5699365	52	True				
ANR	5699640	AssignmentExpression	flags ^= 1 << 14		5699365	0		^=			
ANR	5699641	Identifier	flags		5699365	0					
ANR	5699642	ShiftExpression	1 << 14		5699365	1		<<			
ANR	5699643	PrimaryExpression	1		5699365	0					
ANR	5699644	PrimaryExpression	14		5699365	1					
ANR	5699645	BreakStatement	break ;	165:31:5349:5354	5699365	53	True				
ANR	5699646	Label	case 'N' :	166:3:5359:5367	5699365	54	True				
ANR	5699647	ExpressionStatement	flags ^= 1 << 15	166:13:5369:5385	5699365	55	True				
ANR	5699648	AssignmentExpression	flags ^= 1 << 15		5699365	0		^=			
ANR	5699649	Identifier	flags		5699365	0					
ANR	5699650	ShiftExpression	1 << 15		5699365	1		<<			
ANR	5699651	PrimaryExpression	1		5699365	0					
ANR	5699652	PrimaryExpression	15		5699365	1					
ANR	5699653	BreakStatement	break ;	166:31:5387:5392	5699365	56	True				
ANR	5699654	Label	case 'w' :	167:3:5397:5405	5699365	57	True				
ANR	5699655	ExpressionStatement	flags ^= 1 << 16	167:13:5407:5423	5699365	58	True				
ANR	5699656	AssignmentExpression	flags ^= 1 << 16		5699365	0		^=			
ANR	5699657	Identifier	flags		5699365	0					
ANR	5699658	ShiftExpression	1 << 16		5699365	1		<<			
ANR	5699659	PrimaryExpression	1		5699365	0					
ANR	5699660	PrimaryExpression	16		5699365	1					
ANR	5699661	BreakStatement	break ;	167:31:5425:5430	5699365	59	True				
ANR	5699662	Label	case 'r' :	168:3:5435:5443	5699365	60	True				
ANR	5699663	ExpressionStatement	flags ^= 1 << 18	168:13:5445:5461	5699365	61	True				
ANR	5699664	AssignmentExpression	flags ^= 1 << 18		5699365	0		^=			
ANR	5699665	Identifier	flags		5699365	0					
ANR	5699666	ShiftExpression	1 << 18		5699365	1		<<			
ANR	5699667	PrimaryExpression	1		5699365	0					
ANR	5699668	PrimaryExpression	18		5699365	1					
ANR	5699669	BreakStatement	break ;	168:31:5463:5468	5699365	62	True				
ANR	5699670	Label	case 'L' :	169:3:5473:5481	5699365	63	True				
ANR	5699671	ExpressionStatement	flags ^= 1 << 19	169:13:5483:5499	5699365	64	True				
ANR	5699672	AssignmentExpression	flags ^= 1 << 19		5699365	0		^=			
ANR	5699673	Identifier	flags		5699365	0					
ANR	5699674	ShiftExpression	1 << 19		5699365	1		<<			
ANR	5699675	PrimaryExpression	1		5699365	0					
ANR	5699676	PrimaryExpression	19		5699365	1					
ANR	5699677	BreakStatement	break ;	169:31:5501:5506	5699365	65	True				
ANR	5699678	Label	case 'i' :	170:3:5511:5519	5699365	66	True				
ANR	5699679	ExpressionStatement	flags ^= 1 << 21	170:13:5521:5537	5699365	67	True				
ANR	5699680	AssignmentExpression	flags ^= 1 << 21		5699365	0		^=			
ANR	5699681	Identifier	flags		5699365	0					
ANR	5699682	ShiftExpression	1 << 21		5699365	1		<<			
ANR	5699683	PrimaryExpression	1		5699365	0					
ANR	5699684	PrimaryExpression	21		5699365	1					
ANR	5699685	BreakStatement	break ;	170:31:5539:5544	5699365	68	True				
ANR	5699686	Label	case 'o' :	171:3:5549:5557	5699365	69	True				
ANR	5699687	ExpressionStatement	flags ^= 1 << 22	171:13:5559:5575	5699365	70	True				
ANR	5699688	AssignmentExpression	flags ^= 1 << 22		5699365	0		^=			
ANR	5699689	Identifier	flags		5699365	0					
ANR	5699690	ShiftExpression	1 << 22		5699365	1		<<			
ANR	5699691	PrimaryExpression	1		5699365	0					
ANR	5699692	PrimaryExpression	22		5699365	1					
ANR	5699693	BreakStatement	break ;	171:31:5577:5582	5699365	71	True				
ANR	5699694	Label	case 'v' :	172:3:5587:5595	5699365	72	True				
ANR	5699695	ReturnStatement	"return r_main_version_print ( ""rax2"" ) ;"	172:13:5597:5633	5699365	73	True				
ANR	5699696	CallExpression	"r_main_version_print ( ""rax2"" )"		5699365	0					
ANR	5699697	Callee	r_main_version_print		5699365	0					
ANR	5699698	Identifier	r_main_version_print		5699365	0					
ANR	5699699	ArgumentList	"""rax2"""		5699365	1					
ANR	5699700	Argument	"""rax2"""		5699365	0					
ANR	5699701	PrimaryExpression	"""rax2"""		5699365	0					
ANR	5699702	Label	case '\\0' :	173:3:5638:5647	5699365	74	True				
ANR	5699703	ReturnStatement	return ! use_stdin ( ) ;	173:14:5649:5669	5699365	75	True				
ANR	5699704	UnaryOperationExpression	! use_stdin ( )		5699365	0					
ANR	5699705	UnaryOperator	!		5699365	0					
ANR	5699706	CallExpression	use_stdin ( )		5699365	1					
ANR	5699707	Callee	use_stdin		5699365	0					
ANR	5699708	Identifier	use_stdin		5699365	0					
ANR	5699709	ArgumentList			5699365	1					
ANR	5699710	Label	default :	174:3:5674:5681	5699365	76	True				
ANR	5699711	Identifier	default		5699365	0					
ANR	5699712	ExpressionStatement	out_mode = ( flags ^ 32 ) ? '0' : 'I'	176:4:5737:5770	5699365	77	True				
ANR	5699713	AssignmentExpression	out_mode = ( flags ^ 32 ) ? '0' : 'I'		5699365	0		=			
ANR	5699714	Identifier	out_mode		5699365	0					
ANR	5699715	ConditionalExpression	( flags ^ 32 ) ? '0' : 'I'		5699365	1					
ANR	5699716	Condition	flags ^ 32		5699365	0					
ANR	5699717	ExclusiveOrExpression	flags ^ 32		5699365	0		^			
ANR	5699718	Identifier	flags		5699365	0					
ANR	5699719	PrimaryExpression	32		5699365	1					
ANR	5699720	PrimaryExpression	'0'		5699365	1					
ANR	5699721	PrimaryExpression	'I'		5699365	2					
ANR	5699722	IfStatement	if ( str [ 1 ] >= '0' && str [ 1 ] <= '9' )		5699365	78					
ANR	5699723	Condition	str [ 1 ] >= '0' && str [ 1 ] <= '9'	177:8:5780:5809	5699365	0	True				
ANR	5699724	AndExpression	str [ 1 ] >= '0' && str [ 1 ] <= '9'		5699365	0		&&			
ANR	5699725	RelationalExpression	str [ 1 ] >= '0'		5699365	0		>=			
ANR	5699726	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5699727	Identifier	str		5699365	0					
ANR	5699728	PrimaryExpression	1		5699365	1					
ANR	5699729	PrimaryExpression	'0'		5699365	1					
ANR	5699730	RelationalExpression	str [ 1 ] <= '9'		5699365	1		<=			
ANR	5699731	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5699732	Identifier	str		5699365	0					
ANR	5699733	PrimaryExpression	1		5699365	1					
ANR	5699734	PrimaryExpression	'9'		5699365	1					
ANR	5699735	CompoundStatement		54:40:1647:1647	5699365	1					
ANR	5699736	IfStatement	if ( str [ 2 ] == 'x' )		5699365	0					
ANR	5699737	Condition	str [ 2 ] == 'x'	178:9:5823:5835	5699365	0	True				
ANR	5699738	EqualityExpression	str [ 2 ] == 'x'		5699365	0		==			
ANR	5699739	ArrayIndexing	str [ 2 ]		5699365	0					
ANR	5699740	Identifier	str		5699365	0					
ANR	5699741	PrimaryExpression	2		5699365	1					
ANR	5699742	PrimaryExpression	'x'		5699365	1					
ANR	5699743	CompoundStatement		55:24:1673:1673	5699365	1					
ANR	5699744	ExpressionStatement	out_mode = 'I'	179:6:5846:5860	5699365	0	True				
ANR	5699745	AssignmentExpression	out_mode = 'I'		5699365	0		=			
ANR	5699746	Identifier	out_mode		5699365	0					
ANR	5699747	PrimaryExpression	'I'		5699365	1					
ANR	5699748	ElseStatement	else		5699365	0					
ANR	5699749	IfStatement	"if ( r_str_endswith ( str , ""f"" ) )"		5699365	0					
ANR	5699750	Condition	"r_str_endswith ( str , ""f"" )"	180:16:5878:5902	5699365	0	True				
ANR	5699751	CallExpression	"r_str_endswith ( str , ""f"" )"		5699365	0					
ANR	5699752	Callee	r_str_endswith		5699365	0					
ANR	5699753	Identifier	r_str_endswith		5699365	0					
ANR	5699754	ArgumentList	str		5699365	1					
ANR	5699755	Argument	str		5699365	0					
ANR	5699756	Identifier	str		5699365	0					
ANR	5699757	Argument	"""f"""		5699365	1					
ANR	5699758	PrimaryExpression	"""f"""		5699365	0					
ANR	5699759	CompoundStatement		57:43:1740:1740	5699365	1					
ANR	5699760	ExpressionStatement	out_mode = 'l'	181:6:5913:5927	5699365	0	True				
ANR	5699761	AssignmentExpression	out_mode = 'l'		5699365	0		=			
ANR	5699762	Identifier	out_mode		5699365	0					
ANR	5699763	PrimaryExpression	'l'		5699365	1					
ANR	5699764	ReturnStatement	"return format_output ( out_mode , str ) ;"	183:5:5941:5977	5699365	1	True				
ANR	5699765	CallExpression	"format_output ( out_mode , str )"		5699365	0					
ANR	5699766	Callee	format_output		5699365	0					
ANR	5699767	Identifier	format_output		5699365	0					
ANR	5699768	ArgumentList	out_mode		5699365	1					
ANR	5699769	Argument	out_mode		5699365	0					
ANR	5699770	Identifier	out_mode		5699365	0					
ANR	5699771	Argument	str		5699365	1					
ANR	5699772	Identifier	str		5699365	0					
ANR	5699773	ExpressionStatement	"printf ( ""Usage: rax2 [options] [expr ...]\\n"" )"	185:4:5989:6034	5699365	79	True				
ANR	5699774	CallExpression	"printf ( ""Usage: rax2 [options] [expr ...]\\n"" )"		5699365	0					
ANR	5699775	Callee	printf		5699365	0					
ANR	5699776	Identifier	printf		5699365	0					
ANR	5699777	ArgumentList	"""Usage: rax2 [options] [expr ...]\\n"""		5699365	1					
ANR	5699778	Argument	"""Usage: rax2 [options] [expr ...]\\n"""		5699365	0					
ANR	5699779	PrimaryExpression	"""Usage: rax2 [options] [expr ...]\\n"""		5699365	0					
ANR	5699780	ReturnStatement	return help ( ) ;	186:4:6040:6054	5699365	80	True				
ANR	5699781	CallExpression	help ( )		5699365	0					
ANR	5699782	Callee	help		5699365	0					
ANR	5699783	Identifier	help		5699365	0					
ANR	5699784	ArgumentList			5699365	1					
ANR	5699785	ExpressionStatement	str ++	188:3:6064:6069	5699365	1	True				
ANR	5699786	PostIncDecOperationExpression	str ++		5699365	0					
ANR	5699787	Identifier	str		5699365	0					
ANR	5699788	IncDec	++		5699365	1					
ANR	5699789	IfStatement	if ( last )		5699365	1					
ANR	5699790	Condition	last	190:6:6081:6084	5699365	0	True				
ANR	5699791	Identifier	last		5699365	0					
ANR	5699792	CompoundStatement		67:12:1922:1922	5699365	1					
ANR	5699793	ReturnStatement	return ! use_stdin ( ) ;	191:3:6092:6112	5699365	0	True				
ANR	5699794	UnaryOperationExpression	! use_stdin ( )		5699365	0					
ANR	5699795	UnaryOperator	!		5699365	0					
ANR	5699796	CallExpression	use_stdin ( )		5699365	1					
ANR	5699797	Callee	use_stdin		5699365	0					
ANR	5699798	Identifier	use_stdin		5699365	0					
ANR	5699799	ArgumentList			5699365	1					
ANR	5699800	ReturnStatement	return true ;	193:2:6120:6131	5699365	2	True				
ANR	5699801	Identifier	true		5699365	0					
ANR	5699802	IfStatement	"if ( ! flags && r_str_nlen ( str , 2 ) == 1 )"		5699365	7					
ANR	5699803	Condition	"! flags && r_str_nlen ( str , 2 ) == 1"	195:5:6141:6174	5699365	0	True				
ANR	5699804	AndExpression	"! flags && r_str_nlen ( str , 2 ) == 1"		5699365	0		&&			
ANR	5699805	UnaryOperationExpression	! flags		5699365	0					
ANR	5699806	UnaryOperator	!		5699365	0					
ANR	5699807	Identifier	flags		5699365	1					
ANR	5699808	EqualityExpression	"r_str_nlen ( str , 2 ) == 1"		5699365	1		==			
ANR	5699809	CallExpression	"r_str_nlen ( str , 2 )"		5699365	0					
ANR	5699810	Callee	r_str_nlen		5699365	0					
ANR	5699811	Identifier	r_str_nlen		5699365	0					
ANR	5699812	ArgumentList	str		5699365	1					
ANR	5699813	Argument	str		5699365	0					
ANR	5699814	Identifier	str		5699365	0					
ANR	5699815	Argument	2		5699365	1					
ANR	5699816	PrimaryExpression	2		5699365	0					
ANR	5699817	PrimaryExpression	1		5699365	1					
ANR	5699818	CompoundStatement		72:41:2012:2012	5699365	1					
ANR	5699819	IfStatement	if ( * str == 'q' )		5699365	0					
ANR	5699820	Condition	* str == 'q'	196:6:6185:6195	5699365	0	True				
ANR	5699821	EqualityExpression	* str == 'q'		5699365	0		==			
ANR	5699822	UnaryOperationExpression	* str		5699365	0					
ANR	5699823	UnaryOperator	*		5699365	0					
ANR	5699824	Identifier	str		5699365	1					
ANR	5699825	PrimaryExpression	'q'		5699365	1					
ANR	5699826	CompoundStatement		73:19:2033:2033	5699365	1					
ANR	5699827	ReturnStatement	return false ;	197:3:6203:6215	5699365	0	True				
ANR	5699828	Identifier	false		5699365	0					
ANR	5699829	IfStatement	if ( * str == 'h' || * str == '?' )		5699365	1					
ANR	5699830	Condition	* str == 'h' || * str == '?'	199:6:6227:6252	5699365	0	True				
ANR	5699831	OrExpression	* str == 'h' || * str == '?'		5699365	0		||			
ANR	5699832	EqualityExpression	* str == 'h'		5699365	0		==			
ANR	5699833	UnaryOperationExpression	* str		5699365	0					
ANR	5699834	UnaryOperator	*		5699365	0					
ANR	5699835	Identifier	str		5699365	1					
ANR	5699836	PrimaryExpression	'h'		5699365	1					
ANR	5699837	EqualityExpression	* str == '?'		5699365	1		==			
ANR	5699838	UnaryOperationExpression	* str		5699365	0					
ANR	5699839	UnaryOperator	*		5699365	0					
ANR	5699840	Identifier	str		5699365	1					
ANR	5699841	PrimaryExpression	'?'		5699365	1					
ANR	5699842	CompoundStatement		76:34:2090:2090	5699365	1					
ANR	5699843	ExpressionStatement	help ( )	200:3:6260:6267	5699365	0	True				
ANR	5699844	CallExpression	help ( )		5699365	0					
ANR	5699845	Callee	help		5699365	0					
ANR	5699846	Identifier	help		5699365	0					
ANR	5699847	ArgumentList			5699365	1					
ANR	5699848	ReturnStatement	return false ;	201:3:6272:6284	5699365	1	True				
ANR	5699849	Identifier	false		5699365	0					
ANR	5699850	Label	dotherax :	204:0:6293:6301	5699365	8	True				
ANR	5699851	Identifier	dotherax		5699365	0					
ANR	5699852	IfStatement	if ( flags & 1 )		5699365	9					
ANR	5699853	Condition	flags & 1	205:5:6308:6316	5699365	0	True				
ANR	5699854	BitAndExpression	flags & 1		5699365	0		&			
ANR	5699855	Identifier	flags		5699365	0					
ANR	5699856	PrimaryExpression	1		5699365	1					
ANR	5699857	CompoundStatement		83:2:2164:2197	5699365	1					
ANR	5699858	IdentifierDeclStatement	int n = ( ( strlen ( str ) ) >> 1 ) + 1 ;	206:2:6329:6362	5699365	0	True				
ANR	5699859	IdentifierDecl	n = ( ( strlen ( str ) ) >> 1 ) + 1		5699365	0					
ANR	5699860	IdentifierDeclType	int		5699365	0					
ANR	5699861	Identifier	n		5699365	1					
ANR	5699862	AssignmentExpression	n = ( ( strlen ( str ) ) >> 1 ) + 1		5699365	2		=			
ANR	5699863	Identifier	n		5699365	0					
ANR	5699864	AdditiveExpression	( ( strlen ( str ) ) >> 1 ) + 1		5699365	1		+			
ANR	5699865	ShiftExpression	( strlen ( str ) ) >> 1		5699365	0		>>			
ANR	5699866	CallExpression	strlen ( str )		5699365	0					
ANR	5699867	Callee	strlen		5699365	0					
ANR	5699868	Identifier	strlen		5699365	0					
ANR	5699869	ArgumentList	str		5699365	1					
ANR	5699870	Argument	str		5699365	0					
ANR	5699871	Identifier	str		5699365	0					
ANR	5699872	PrimaryExpression	1		5699365	1					
ANR	5699873	PrimaryExpression	1		5699365	1					
ANR	5699874	ExpressionStatement	buf = malloc ( n )	207:2:6366:6382	5699365	1	True				
ANR	5699875	AssignmentExpression	buf = malloc ( n )		5699365	0		=			
ANR	5699876	Identifier	buf		5699365	0					
ANR	5699877	CallExpression	malloc ( n )		5699365	1					
ANR	5699878	Callee	malloc		5699365	0					
ANR	5699879	Identifier	malloc		5699365	0					
ANR	5699880	ArgumentList	n		5699365	1					
ANR	5699881	Argument	n		5699365	0					
ANR	5699882	Identifier	n		5699365	0					
ANR	5699883	IfStatement	if ( buf )		5699365	2					
ANR	5699884	Condition	buf	208:6:6390:6392	5699365	0	True				
ANR	5699885	Identifier	buf		5699365	0					
ANR	5699886	CompoundStatement		85:11:2230:2230	5699365	1					
ANR	5699887	ExpressionStatement	"memset ( buf , '\\0' , n )"	209:3:6400:6421	5699365	0	True				
ANR	5699888	CallExpression	"memset ( buf , '\\0' , n )"		5699365	0					
ANR	5699889	Callee	memset		5699365	0					
ANR	5699890	Identifier	memset		5699365	0					
ANR	5699891	ArgumentList	buf		5699365	1					
ANR	5699892	Argument	buf		5699365	0					
ANR	5699893	Identifier	buf		5699365	0					
ANR	5699894	Argument	'\\0'		5699365	1					
ANR	5699895	PrimaryExpression	'\\0'		5699365	0					
ANR	5699896	Argument	n		5699365	2					
ANR	5699897	Identifier	n		5699365	0					
ANR	5699898	ExpressionStatement	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"	210:3:6426:6462	5699365	1	True				
ANR	5699899	AssignmentExpression	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"		5699365	0		=			
ANR	5699900	Identifier	n		5699365	0					
ANR	5699901	CallExpression	"r_hex_str2bin ( str , ( ut8 * ) buf )"		5699365	1					
ANR	5699902	Callee	r_hex_str2bin		5699365	0					
ANR	5699903	Identifier	r_hex_str2bin		5699365	0					
ANR	5699904	ArgumentList	str		5699365	1					
ANR	5699905	Argument	str		5699365	0					
ANR	5699906	Identifier	str		5699365	0					
ANR	5699907	Argument	( ut8 * ) buf		5699365	1					
ANR	5699908	CastExpression	( ut8 * ) buf		5699365	0					
ANR	5699909	CastTarget	ut8 *		5699365	0					
ANR	5699910	Identifier	buf		5699365	1					
ANR	5699911	IfStatement	if ( n > 0 )		5699365	2					
ANR	5699912	Condition	n > 0	211:7:6471:6475	5699365	0	True				
ANR	5699913	RelationalExpression	n > 0		5699365	0		>			
ANR	5699914	Identifier	n		5699365	0					
ANR	5699915	PrimaryExpression	0		5699365	1					
ANR	5699916	CompoundStatement		88:14:2313:2313	5699365	1					
ANR	5699917	ExpressionStatement	"fwrite ( buf , n , 1 , stdout )"	212:4:6484:6510	5699365	0	True				
ANR	5699918	CallExpression	"fwrite ( buf , n , 1 , stdout )"		5699365	0					
ANR	5699919	Callee	fwrite		5699365	0					
ANR	5699920	Identifier	fwrite		5699365	0					
ANR	5699921	ArgumentList	buf		5699365	1					
ANR	5699922	Argument	buf		5699365	0					
ANR	5699923	Identifier	buf		5699365	0					
ANR	5699924	Argument	n		5699365	1					
ANR	5699925	Identifier	n		5699365	0					
ANR	5699926	Argument	1		5699365	2					
ANR	5699927	PrimaryExpression	1		5699365	0					
ANR	5699928	Argument	stdout		5699365	3					
ANR	5699929	Identifier	stdout		5699365	0					
ANR	5699930	ExpressionStatement	"puts ( """" )"	215:3:6539:6548	5699365	3	True				
ANR	5699931	CallExpression	"puts ( """" )"		5699365	0					
ANR	5699932	Callee	puts		5699365	0					
ANR	5699933	Identifier	puts		5699365	0					
ANR	5699934	ArgumentList	""""""		5699365	1					
ANR	5699935	Argument	""""""		5699365	0					
ANR	5699936	PrimaryExpression	""""""		5699365	0					
ANR	5699937	ExpressionStatement	fflush ( stdout )	221:3:6606:6621	5699365	4	True				
ANR	5699938	CallExpression	fflush ( stdout )		5699365	0					
ANR	5699939	Callee	fflush		5699365	0					
ANR	5699940	Identifier	fflush		5699365	0					
ANR	5699941	ArgumentList	stdout		5699365	1					
ANR	5699942	Argument	stdout		5699365	0					
ANR	5699943	Identifier	stdout		5699365	0					
ANR	5699944	ExpressionStatement	free ( buf )	222:3:6626:6636	5699365	5	True				
ANR	5699945	CallExpression	free ( buf )		5699365	0					
ANR	5699946	Callee	free		5699365	0					
ANR	5699947	Identifier	free		5699365	0					
ANR	5699948	ArgumentList	buf		5699365	1					
ANR	5699949	Argument	buf		5699365	0					
ANR	5699950	Identifier	buf		5699365	0					
ANR	5699951	ReturnStatement	return true ;	224:2:6644:6655	5699365	3	True				
ANR	5699952	Identifier	true		5699365	0					
ANR	5699953	IfStatement	if ( flags & ( 1 << 2 ) )		5699365	10					
ANR	5699954	Condition	flags & ( 1 << 2 )	226:5:6665:6680	5699365	0	True				
ANR	5699955	BitAndExpression	flags & ( 1 << 2 )		5699365	0		&			
ANR	5699956	Identifier	flags		5699365	0					
ANR	5699957	ShiftExpression	1 << 2		5699365	1		<<			
ANR	5699958	PrimaryExpression	1		5699365	0					
ANR	5699959	PrimaryExpression	2		5699365	1					
ANR	5699960	CompoundStatement		103:23:2518:2518	5699365	1					
ANR	5699961	ForStatement	for ( i = 0 ; i < len ; i ++ )		5699365	0					
ANR	5699962	ForInit	i = 0 ;	227:7:6698:6703	5699365	0	True				
ANR	5699963	AssignmentExpression	i = 0		5699365	0		=			
ANR	5699964	Identifier	i		5699365	0					
ANR	5699965	PrimaryExpression	0		5699365	1					
ANR	5699966	Condition	i < len	227:14:6705:6711	5699365	1	True				
ANR	5699967	RelationalExpression	i < len		5699365	0		<			
ANR	5699968	Identifier	i		5699365	0					
ANR	5699969	Identifier	len		5699365	1					
ANR	5699970	PostIncDecOperationExpression	i ++	227:23:6714:6716	5699365	2	True				
ANR	5699971	Identifier	i		5699365	0					
ANR	5699972	IncDec	++		5699365	1					
ANR	5699973	CompoundStatement		104:28:2554:2554	5699365	3					
ANR	5699974	ExpressionStatement	"printf ( ""%02x"" , ( ut8 ) str [ i ] )"	228:3:6724:6753	5699365	0	True				
ANR	5699975	CallExpression	"printf ( ""%02x"" , ( ut8 ) str [ i ] )"		5699365	0					
ANR	5699976	Callee	printf		5699365	0					
ANR	5699977	Identifier	printf		5699365	0					
ANR	5699978	ArgumentList	"""%02x"""		5699365	1					
ANR	5699979	Argument	"""%02x"""		5699365	0					
ANR	5699980	PrimaryExpression	"""%02x"""		5699365	0					
ANR	5699981	Argument	( ut8 ) str [ i ]		5699365	1					
ANR	5699982	CastExpression	( ut8 ) str [ i ]		5699365	0					
ANR	5699983	CastTarget	ut8		5699365	0					
ANR	5699984	ArrayIndexing	str [ i ]		5699365	1					
ANR	5699985	Identifier	str		5699365	0					
ANR	5699986	Identifier	i		5699365	1					
ANR	5699987	ExpressionStatement	"printf ( ""\\n"" )"	230:2:6761:6774	5699365	1	True				
ANR	5699988	CallExpression	"printf ( ""\\n"" )"		5699365	0					
ANR	5699989	Callee	printf		5699365	0					
ANR	5699990	Identifier	printf		5699365	0					
ANR	5699991	ArgumentList	"""\\n"""		5699365	1					
ANR	5699992	Argument	"""\\n"""		5699365	0					
ANR	5699993	PrimaryExpression	"""\\n"""		5699365	0					
ANR	5699994	ReturnStatement	return true ;	231:2:6778:6789	5699365	2	True				
ANR	5699995	Identifier	true		5699365	0					
ANR	5699996	ElseStatement	else		5699365	0					
ANR	5699997	IfStatement	if ( flags & ( 1 << 3 ) )		5699365	0					
ANR	5699998	Condition	flags & ( 1 << 3 )	232:12:6803:6818	5699365	0	True				
ANR	5699999	BitAndExpression	flags & ( 1 << 3 )		5699365	0		&			
ANR	5700000	Identifier	flags		5699365	0					
ANR	5700001	ShiftExpression	1 << 3		5699365	1		<<			
ANR	5700002	PrimaryExpression	1		5699365	0					
ANR	5700003	PrimaryExpression	3		5699365	1					
ANR	5700004	CompoundStatement		111:2:2680:2693	5699365	1					
ANR	5700005	IdentifierDeclStatement	"int i , len ;"	233:2:6831:6841	5699365	0	True				
ANR	5700006	IdentifierDecl	i		5699365	0					
ANR	5700007	IdentifierDeclType	int		5699365	0					
ANR	5700008	Identifier	i		5699365	1					
ANR	5700009	IdentifierDecl	len		5699365	1					
ANR	5700010	IdentifierDeclType	int		5699365	0					
ANR	5700011	Identifier	len		5699365	1					
ANR	5700012	IdentifierDeclStatement	ut8 buf [ 4096 ] ;	234:2:6845:6858	5699365	1	True				
ANR	5700013	IdentifierDecl	buf [ 4096 ]		5699365	0					
ANR	5700014	IdentifierDeclType	ut8 [ 4096 ]		5699365	0					
ANR	5700015	Identifier	buf		5699365	1					
ANR	5700016	PrimaryExpression	4096		5699365	2					
ANR	5700017	ExpressionStatement	"len = r_str_binstr2bin ( str , buf , sizeof ( buf ) )"	235:2:6862:6909	5699365	2	True				
ANR	5700018	AssignmentExpression	"len = r_str_binstr2bin ( str , buf , sizeof ( buf ) )"		5699365	0		=			
ANR	5700019	Identifier	len		5699365	0					
ANR	5700020	CallExpression	"r_str_binstr2bin ( str , buf , sizeof ( buf ) )"		5699365	1					
ANR	5700021	Callee	r_str_binstr2bin		5699365	0					
ANR	5700022	Identifier	r_str_binstr2bin		5699365	0					
ANR	5700023	ArgumentList	str		5699365	1					
ANR	5700024	Argument	str		5699365	0					
ANR	5700025	Identifier	str		5699365	0					
ANR	5700026	Argument	buf		5699365	1					
ANR	5700027	Identifier	buf		5699365	0					
ANR	5700028	Argument	sizeof ( buf )		5699365	2					
ANR	5700029	SizeofExpression	sizeof ( buf )		5699365	0					
ANR	5700030	Sizeof	sizeof		5699365	0					
ANR	5700031	SizeofOperand	buf		5699365	1					
ANR	5700032	ForStatement	for ( i = 0 ; i < len ; i ++ )		5699365	3					
ANR	5700033	ForInit	i = 0 ;	236:7:6918:6923	5699365	0	True				
ANR	5700034	AssignmentExpression	i = 0		5699365	0		=			
ANR	5700035	Identifier	i		5699365	0					
ANR	5700036	PrimaryExpression	0		5699365	1					
ANR	5700037	Condition	i < len	236:14:6925:6931	5699365	1	True				
ANR	5700038	RelationalExpression	i < len		5699365	0		<			
ANR	5700039	Identifier	i		5699365	0					
ANR	5700040	Identifier	len		5699365	1					
ANR	5700041	PostIncDecOperationExpression	i ++	236:23:6934:6936	5699365	2	True				
ANR	5700042	Identifier	i		5699365	0					
ANR	5700043	IncDec	++		5699365	1					
ANR	5700044	CompoundStatement		113:28:2774:2774	5699365	3					
ANR	5700045	ExpressionStatement	"printf ( ""%c"" , buf [ i ] )"	237:3:6944:6965	5699365	0	True				
ANR	5700046	CallExpression	"printf ( ""%c"" , buf [ i ] )"		5699365	0					
ANR	5700047	Callee	printf		5699365	0					
ANR	5700048	Identifier	printf		5699365	0					
ANR	5700049	ArgumentList	"""%c"""		5699365	1					
ANR	5700050	Argument	"""%c"""		5699365	0					
ANR	5700051	PrimaryExpression	"""%c"""		5699365	0					
ANR	5700052	Argument	buf [ i ]		5699365	1					
ANR	5700053	ArrayIndexing	buf [ i ]		5699365	0					
ANR	5700054	Identifier	buf		5699365	0					
ANR	5700055	Identifier	i		5699365	1					
ANR	5700056	ReturnStatement	return true ;	239:2:6973:6984	5699365	4	True				
ANR	5700057	Identifier	true		5699365	0					
ANR	5700058	ElseStatement	else		5699365	0					
ANR	5700059	IfStatement	if ( flags & ( 1 << 4 ) )		5699365	0					
ANR	5700060	Condition	flags & ( 1 << 4 )	240:12:6998:7013	5699365	0	True				
ANR	5700061	BitAndExpression	flags & ( 1 << 4 )		5699365	0		&			
ANR	5700062	Identifier	flags		5699365	0					
ANR	5700063	ShiftExpression	1 << 4		5699365	1		<<			
ANR	5700064	PrimaryExpression	1		5699365	0					
ANR	5700065	PrimaryExpression	4		5699365	1					
ANR	5700066	CompoundStatement		118:2:2861:2885	5699365	1					
ANR	5700067	IdentifierDeclStatement	int h = r_str_hash ( str ) ;	241:2:7026:7050	5699365	0	True				
ANR	5700068	IdentifierDecl	h = r_str_hash ( str )		5699365	0					
ANR	5700069	IdentifierDeclType	int		5699365	0					
ANR	5700070	Identifier	h		5699365	1					
ANR	5700071	AssignmentExpression	h = r_str_hash ( str )		5699365	2		=			
ANR	5700072	Identifier	h		5699365	0					
ANR	5700073	CallExpression	r_str_hash ( str )		5699365	1					
ANR	5700074	Callee	r_str_hash		5699365	0					
ANR	5700075	Identifier	r_str_hash		5699365	0					
ANR	5700076	ArgumentList	str		5699365	1					
ANR	5700077	Argument	str		5699365	0					
ANR	5700078	Identifier	str		5699365	0					
ANR	5700079	ExpressionStatement	"printf ( ""0x%x\\n"" , h )"	242:2:7054:7074	5699365	1	True				
ANR	5700080	CallExpression	"printf ( ""0x%x\\n"" , h )"		5699365	0					
ANR	5700081	Callee	printf		5699365	0					
ANR	5700082	Identifier	printf		5699365	0					
ANR	5700083	ArgumentList	"""0x%x\\n"""		5699365	1					
ANR	5700084	Argument	"""0x%x\\n"""		5699365	0					
ANR	5700085	PrimaryExpression	"""0x%x\\n"""		5699365	0					
ANR	5700086	Argument	h		5699365	1					
ANR	5700087	Identifier	h		5699365	0					
ANR	5700088	ReturnStatement	return true ;	243:2:7078:7089	5699365	2	True				
ANR	5700089	Identifier	true		5699365	0					
ANR	5700090	ElseStatement	else		5699365	0					
ANR	5700091	IfStatement	if ( flags & ( 1 << 5 ) )		5699365	0					
ANR	5700092	Condition	flags & ( 1 << 5 )	244:12:7103:7118	5699365	0	True				
ANR	5700093	BitAndExpression	flags & ( 1 << 5 )		5699365	0		&			
ANR	5700094	Identifier	flags		5699365	0					
ANR	5700095	ShiftExpression	1 << 5		5699365	1		<<			
ANR	5700096	PrimaryExpression	1		5699365	0					
ANR	5700097	PrimaryExpression	5		5699365	1					
ANR	5700098	CompoundStatement		121:30:2956:2956	5699365	1					
ANR	5700099	ExpressionStatement	out_mode = 'I'	245:2:7131:7145	5699365	0	True				
ANR	5700100	AssignmentExpression	out_mode = 'I'		5699365	0		=			
ANR	5700101	Identifier	out_mode		5699365	0					
ANR	5700102	PrimaryExpression	'I'		5699365	1					
ANR	5700103	ElseStatement	else		5699365	0					
ANR	5700104	IfStatement	if ( flags & ( 1 << 6 ) )		5699365	0					
ANR	5700105	Condition	flags & ( 1 << 6 )	246:12:7159:7174	5699365	0	True				
ANR	5700106	BitAndExpression	flags & ( 1 << 6 )		5699365	0		&			
ANR	5700107	Identifier	flags		5699365	0					
ANR	5700108	ShiftExpression	1 << 6		5699365	1		<<			
ANR	5700109	PrimaryExpression	1		5699365	0					
ANR	5700110	PrimaryExpression	6		5699365	1					
ANR	5700111	CompoundStatement		123:30:3012:3012	5699365	1					
ANR	5700112	ExpressionStatement	out_mode = 'f'	247:2:7187:7201	5699365	0	True				
ANR	5700113	AssignmentExpression	out_mode = 'f'		5699365	0		=			
ANR	5700114	Identifier	out_mode		5699365	0					
ANR	5700115	PrimaryExpression	'f'		5699365	1					
ANR	5700116	ElseStatement	else		5699365	0					
ANR	5700117	IfStatement	if ( flags & ( 1 << 8 ) )		5699365	0					
ANR	5700118	Condition	flags & ( 1 << 8 )	248:12:7215:7230	5699365	0	True				
ANR	5700119	BitAndExpression	flags & ( 1 << 8 )		5699365	0		&			
ANR	5700120	Identifier	flags		5699365	0					
ANR	5700121	ShiftExpression	1 << 8		5699365	1		<<			
ANR	5700122	PrimaryExpression	1		5699365	0					
ANR	5700123	PrimaryExpression	8		5699365	1					
ANR	5700124	CompoundStatement		132:2:3196:3218	5699365	1					
ANR	5700125	IdentifierDeclStatement	int n = ( ( strlen ( str ) ) >> 1 ) + 1 ;	249:2:7243:7276	5699365	0	True				
ANR	5700126	IdentifierDecl	n = ( ( strlen ( str ) ) >> 1 ) + 1		5699365	0					
ANR	5700127	IdentifierDeclType	int		5699365	0					
ANR	5700128	Identifier	n		5699365	1					
ANR	5700129	AssignmentExpression	n = ( ( strlen ( str ) ) >> 1 ) + 1		5699365	2		=			
ANR	5700130	Identifier	n		5699365	0					
ANR	5700131	AdditiveExpression	( ( strlen ( str ) ) >> 1 ) + 1		5699365	1		+			
ANR	5700132	ShiftExpression	( strlen ( str ) ) >> 1		5699365	0		>>			
ANR	5700133	CallExpression	strlen ( str )		5699365	0					
ANR	5700134	Callee	strlen		5699365	0					
ANR	5700135	Identifier	strlen		5699365	0					
ANR	5700136	ArgumentList	str		5699365	1					
ANR	5700137	Argument	str		5699365	0					
ANR	5700138	Identifier	str		5699365	0					
ANR	5700139	PrimaryExpression	1		5699365	1					
ANR	5700140	PrimaryExpression	1		5699365	1					
ANR	5700141	IdentifierDeclStatement	char * s = NULL ;	250:2:7280:7294	5699365	1	True				
ANR	5700142	IdentifierDecl	* s = NULL		5699365	0					
ANR	5700143	IdentifierDeclType	char *		5699365	0					
ANR	5700144	Identifier	s		5699365	1					
ANR	5700145	AssignmentExpression	* s = NULL		5699365	2		=			
ANR	5700146	Identifier	NULL		5699365	0					
ANR	5700147	Identifier	NULL		5699365	1					
ANR	5700148	ExpressionStatement	buf = ( ut8 * ) malloc ( n )	251:2:7298:7322	5699365	2	True				
ANR	5700149	AssignmentExpression	buf = ( ut8 * ) malloc ( n )		5699365	0		=			
ANR	5700150	Identifier	buf		5699365	0					
ANR	5700151	CastExpression	( ut8 * ) malloc ( n )		5699365	1					
ANR	5700152	CastTarget	ut8 *		5699365	0					
ANR	5700153	CallExpression	malloc ( n )		5699365	1					
ANR	5700154	Callee	malloc		5699365	0					
ANR	5700155	Identifier	malloc		5699365	0					
ANR	5700156	ArgumentList	n		5699365	1					
ANR	5700157	Argument	n		5699365	0					
ANR	5700158	Identifier	n		5699365	0					
ANR	5700159	IfStatement	if ( ! buf )		5699365	3					
ANR	5700160	Condition	! buf	252:6:7330:7333	5699365	0	True				
ANR	5700161	UnaryOperationExpression	! buf		5699365	0					
ANR	5700162	UnaryOperator	!		5699365	0					
ANR	5700163	Identifier	buf		5699365	1					
ANR	5700164	CompoundStatement		129:12:3171:3171	5699365	1					
ANR	5700165	ReturnStatement	return false ;	253:3:7341:7353	5699365	0	True				
ANR	5700166	Identifier	false		5699365	0					
ANR	5700167	IdentifierDeclStatement	ut32 * m = ( ut32 * ) buf ;	255:2:7361:7383	5699365	4	True				
ANR	5700168	IdentifierDecl	* m = ( ut32 * ) buf		5699365	0					
ANR	5700169	IdentifierDeclType	ut32 *		5699365	0					
ANR	5700170	Identifier	m		5699365	1					
ANR	5700171	AssignmentExpression	* m = ( ut32 * ) buf		5699365	2		=			
ANR	5700172	Identifier	m		5699365	0					
ANR	5700173	CastExpression	( ut32 * ) buf		5699365	1					
ANR	5700174	CastTarget	ut32 *		5699365	0					
ANR	5700175	Identifier	buf		5699365	1					
ANR	5700176	ExpressionStatement	"memset ( buf , '\\0' , n )"	256:2:7387:7408	5699365	5	True				
ANR	5700177	CallExpression	"memset ( buf , '\\0' , n )"		5699365	0					
ANR	5700178	Callee	memset		5699365	0					
ANR	5700179	Identifier	memset		5699365	0					
ANR	5700180	ArgumentList	buf		5699365	1					
ANR	5700181	Argument	buf		5699365	0					
ANR	5700182	Identifier	buf		5699365	0					
ANR	5700183	Argument	'\\0'		5699365	1					
ANR	5700184	PrimaryExpression	'\\0'		5699365	0					
ANR	5700185	Argument	n		5699365	2					
ANR	5700186	Identifier	n		5699365	0					
ANR	5700187	ExpressionStatement	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"	257:2:7412:7448	5699365	6	True				
ANR	5700188	AssignmentExpression	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"		5699365	0		=			
ANR	5700189	Identifier	n		5699365	0					
ANR	5700190	CallExpression	"r_hex_str2bin ( str , ( ut8 * ) buf )"		5699365	1					
ANR	5700191	Callee	r_hex_str2bin		5699365	0					
ANR	5700192	Identifier	r_hex_str2bin		5699365	0					
ANR	5700193	ArgumentList	str		5699365	1					
ANR	5700194	Argument	str		5699365	0					
ANR	5700195	Identifier	str		5699365	0					
ANR	5700196	Argument	( ut8 * ) buf		5699365	1					
ANR	5700197	CastExpression	( ut8 * ) buf		5699365	0					
ANR	5700198	CastTarget	ut8 *		5699365	0					
ANR	5700199	Identifier	buf		5699365	1					
ANR	5700200	IfStatement	"if ( n < 1 || ! memcmp ( str , ""0x"" , 2 ) )"		5699365	7					
ANR	5700201	Condition	"n < 1 || ! memcmp ( str , ""0x"" , 2 )"	258:6:7456:7486	5699365	0	True				
ANR	5700202	OrExpression	"n < 1 || ! memcmp ( str , ""0x"" , 2 )"		5699365	0		||			
ANR	5700203	RelationalExpression	n < 1		5699365	0		<			
ANR	5700204	Identifier	n		5699365	0					
ANR	5700205	PrimaryExpression	1		5699365	1					
ANR	5700206	UnaryOperationExpression	"! memcmp ( str , ""0x"" , 2 )"		5699365	1					
ANR	5700207	UnaryOperator	!		5699365	0					
ANR	5700208	CallExpression	"memcmp ( str , ""0x"" , 2 )"		5699365	1					
ANR	5700209	Callee	memcmp		5699365	0					
ANR	5700210	Identifier	memcmp		5699365	0					
ANR	5700211	ArgumentList	str		5699365	1					
ANR	5700212	Argument	str		5699365	0					
ANR	5700213	Identifier	str		5699365	0					
ANR	5700214	Argument	"""0x"""		5699365	1					
ANR	5700215	PrimaryExpression	"""0x"""		5699365	0					
ANR	5700216	Argument	2		5699365	2					
ANR	5700217	PrimaryExpression	2		5699365	0					
ANR	5700218	CompoundStatement		136:3:3329:3359	5699365	1					
ANR	5700219	IdentifierDeclStatement	"ut64 q = r_num_math ( num , str ) ;"	259:3:7494:7524	5699365	0	True				
ANR	5700220	IdentifierDecl	"q = r_num_math ( num , str )"		5699365	0					
ANR	5700221	IdentifierDeclType	ut64		5699365	0					
ANR	5700222	Identifier	q		5699365	1					
ANR	5700223	AssignmentExpression	"q = r_num_math ( num , str )"		5699365	2		=			
ANR	5700224	Identifier	q		5699365	0					
ANR	5700225	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5700226	Callee	r_num_math		5699365	0					
ANR	5700227	Identifier	r_num_math		5699365	0					
ANR	5700228	ArgumentList	num		5699365	1					
ANR	5700229	Argument	num		5699365	0					
ANR	5700230	Identifier	num		5699365	0					
ANR	5700231	Argument	str		5699365	1					
ANR	5700232	Identifier	str		5699365	0					
ANR	5700233	ExpressionStatement	"s = r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"	260:3:7529:7578	5699365	1	True				
ANR	5700234	AssignmentExpression	"s = r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"		5699365	0		=			
ANR	5700235	Identifier	s		5699365	0					
ANR	5700236	CallExpression	"r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"		5699365	1					
ANR	5700237	Callee	r_print_randomart		5699365	0					
ANR	5700238	Identifier	r_print_randomart		5699365	0					
ANR	5700239	ArgumentList	( ut8 * ) & q		5699365	1					
ANR	5700240	Argument	( ut8 * ) & q		5699365	0					
ANR	5700241	CastExpression	( ut8 * ) & q		5699365	0					
ANR	5700242	CastTarget	ut8 *		5699365	0					
ANR	5700243	UnaryOperationExpression	& q		5699365	1					
ANR	5700244	UnaryOperator	&		5699365	0					
ANR	5700245	Identifier	q		5699365	1					
ANR	5700246	Argument	sizeof ( q )		5699365	1					
ANR	5700247	SizeofExpression	sizeof ( q )		5699365	0					
ANR	5700248	Sizeof	sizeof		5699365	0					
ANR	5700249	SizeofOperand	q		5699365	1					
ANR	5700250	Argument	q		5699365	2					
ANR	5700251	Identifier	q		5699365	0					
ANR	5700252	ExpressionStatement	"printf ( ""%s\\n"" , s )"	261:3:7583:7601	5699365	2	True				
ANR	5700253	CallExpression	"printf ( ""%s\\n"" , s )"		5699365	0					
ANR	5700254	Callee	printf		5699365	0					
ANR	5700255	Identifier	printf		5699365	0					
ANR	5700256	ArgumentList	"""%s\\n"""		5699365	1					
ANR	5700257	Argument	"""%s\\n"""		5699365	0					
ANR	5700258	PrimaryExpression	"""%s\\n"""		5699365	0					
ANR	5700259	Argument	s		5699365	1					
ANR	5700260	Identifier	s		5699365	0					
ANR	5700261	ExpressionStatement	free ( s )	262:3:7606:7614	5699365	3	True				
ANR	5700262	CallExpression	free ( s )		5699365	0					
ANR	5700263	Callee	free		5699365	0					
ANR	5700264	Identifier	free		5699365	0					
ANR	5700265	ArgumentList	s		5699365	1					
ANR	5700266	Argument	s		5699365	0					
ANR	5700267	Identifier	s		5699365	0					
ANR	5700268	ElseStatement	else		5699365	0					
ANR	5700269	CompoundStatement		140:9:3460:3460	5699365	0					
ANR	5700270	ExpressionStatement	"s = r_print_randomart ( ( ut8 * ) buf , n , * m )"	264:3:7630:7672	5699365	0	True				
ANR	5700271	AssignmentExpression	"s = r_print_randomart ( ( ut8 * ) buf , n , * m )"		5699365	0		=			
ANR	5700272	Identifier	s		5699365	0					
ANR	5700273	CallExpression	"r_print_randomart ( ( ut8 * ) buf , n , * m )"		5699365	1					
ANR	5700274	Callee	r_print_randomart		5699365	0					
ANR	5700275	Identifier	r_print_randomart		5699365	0					
ANR	5700276	ArgumentList	( ut8 * ) buf		5699365	1					
ANR	5700277	Argument	( ut8 * ) buf		5699365	0					
ANR	5700278	CastExpression	( ut8 * ) buf		5699365	0					
ANR	5700279	CastTarget	ut8 *		5699365	0					
ANR	5700280	Identifier	buf		5699365	1					
ANR	5700281	Argument	n		5699365	1					
ANR	5700282	Identifier	n		5699365	0					
ANR	5700283	Argument	* m		5699365	2					
ANR	5700284	UnaryOperationExpression	* m		5699365	0					
ANR	5700285	UnaryOperator	*		5699365	0					
ANR	5700286	Identifier	m		5699365	1					
ANR	5700287	ExpressionStatement	"printf ( ""%s\\n"" , s )"	265:3:7677:7695	5699365	1	True				
ANR	5700288	CallExpression	"printf ( ""%s\\n"" , s )"		5699365	0					
ANR	5700289	Callee	printf		5699365	0					
ANR	5700290	Identifier	printf		5699365	0					
ANR	5700291	ArgumentList	"""%s\\n"""		5699365	1					
ANR	5700292	Argument	"""%s\\n"""		5699365	0					
ANR	5700293	PrimaryExpression	"""%s\\n"""		5699365	0					
ANR	5700294	Argument	s		5699365	1					
ANR	5700295	Identifier	s		5699365	0					
ANR	5700296	ExpressionStatement	free ( s )	266:3:7700:7708	5699365	2	True				
ANR	5700297	CallExpression	free ( s )		5699365	0					
ANR	5700298	Callee	free		5699365	0					
ANR	5700299	Identifier	free		5699365	0					
ANR	5700300	ArgumentList	s		5699365	1					
ANR	5700301	Argument	s		5699365	0					
ANR	5700302	Identifier	s		5699365	0					
ANR	5700303	ExpressionStatement	free ( m )	268:2:7716:7724	5699365	8	True				
ANR	5700304	CallExpression	free ( m )		5699365	0					
ANR	5700305	Callee	free		5699365	0					
ANR	5700306	Identifier	free		5699365	0					
ANR	5700307	ArgumentList	m		5699365	1					
ANR	5700308	Argument	m		5699365	0					
ANR	5700309	Identifier	m		5699365	0					
ANR	5700310	ReturnStatement	return true ;	269:2:7728:7739	5699365	9	True				
ANR	5700311	Identifier	true		5699365	0					
ANR	5700312	ElseStatement	else		5699365	0					
ANR	5700313	IfStatement	if ( flags & ( 1 << 9 ) )		5699365	0					
ANR	5700314	Condition	flags & ( 1 << 9 )	270:12:7753:7768	5699365	0	True				
ANR	5700315	BitAndExpression	flags & ( 1 << 9 )		5699365	0		&			
ANR	5700316	Identifier	flags		5699365	0					
ANR	5700317	ShiftExpression	1 << 9		5699365	1		<<			
ANR	5700318	PrimaryExpression	1		5699365	0					
ANR	5700319	PrimaryExpression	9		5699365	1					
ANR	5700320	CompoundStatement		148:2:3616:3646	5699365	1					
ANR	5700321	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	271:2:7781:7811	5699365	0	True				
ANR	5700322	IdentifierDecl	"n = r_num_math ( num , str )"		5699365	0					
ANR	5700323	IdentifierDeclType	ut64		5699365	0					
ANR	5700324	Identifier	n		5699365	1					
ANR	5700325	AssignmentExpression	"n = r_num_math ( num , str )"		5699365	2		=			
ANR	5700326	Identifier	n		5699365	0					
ANR	5700327	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5700328	Callee	r_num_math		5699365	0					
ANR	5700329	Identifier	r_num_math		5699365	0					
ANR	5700330	ArgumentList	num		5699365	1					
ANR	5700331	Argument	num		5699365	0					
ANR	5700332	Identifier	num		5699365	0					
ANR	5700333	Argument	str		5699365	1					
ANR	5700334	Identifier	str		5699365	0					
ANR	5700335	IfStatement	if ( n >> 32 )		5699365	1					
ANR	5700336	Condition	n >> 32	272:6:7819:7825	5699365	0	True				
ANR	5700337	ShiftExpression	n >> 32		5699365	0		>>			
ANR	5700338	Identifier	n		5699365	0					
ANR	5700339	PrimaryExpression	32		5699365	1					
ANR	5700340	CompoundStatement		151:3:3693:3713	5699365	1					
ANR	5700341	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n ;	274:3:7858:7878	5699365	0	True				
ANR	5700342	IdentifierDecl	* np = ( ut8 * ) & n		5699365	0					
ANR	5700343	IdentifierDeclType	ut8 *		5699365	0					
ANR	5700344	Identifier	np		5699365	1					
ANR	5700345	AssignmentExpression	* np = ( ut8 * ) & n		5699365	2		=			
ANR	5700346	Identifier	np		5699365	0					
ANR	5700347	CastExpression	( ut8 * ) & n		5699365	1					
ANR	5700348	CastTarget	ut8 *		5699365	0					
ANR	5700349	UnaryOperationExpression	& n		5699365	1					
ANR	5700350	UnaryOperator	&		5699365	0					
ANR	5700351	Identifier	n		5699365	1					
ANR	5700352	IfStatement	if ( flags & 1 )		5699365	1					
ANR	5700353	Condition	flags & 1	275:7:7887:7895	5699365	0	True				
ANR	5700354	BitAndExpression	flags & 1		5699365	0		&			
ANR	5700355	Identifier	flags		5699365	0					
ANR	5700356	PrimaryExpression	1		5699365	1					
ANR	5700357	CompoundStatement		152:18:3733:3733	5699365	1					
ANR	5700358	ExpressionStatement	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"	276:4:7904:7938	5699365	0	True				
ANR	5700359	CallExpression	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"		5699365	0					
ANR	5700360	Callee	fwrite		5699365	0					
ANR	5700361	Identifier	fwrite		5699365	0					
ANR	5700362	ArgumentList	& n		5699365	1					
ANR	5700363	Argument	& n		5699365	0					
ANR	5700364	UnaryOperationExpression	& n		5699365	0					
ANR	5700365	UnaryOperator	&		5699365	0					
ANR	5700366	Identifier	n		5699365	1					
ANR	5700367	Argument	sizeof ( n )		5699365	1					
ANR	5700368	SizeofExpression	sizeof ( n )		5699365	0					
ANR	5700369	Sizeof	sizeof		5699365	0					
ANR	5700370	SizeofOperand	n		5699365	1					
ANR	5700371	Argument	1		5699365	2					
ANR	5700372	PrimaryExpression	1		5699365	0					
ANR	5700373	Argument	stdout		5699365	3					
ANR	5700374	Identifier	stdout		5699365	0					
ANR	5700375	ElseStatement	else		5699365	0					
ANR	5700376	CompoundStatement		154:10:3785:3785	5699365	0					
ANR	5700377	Statement	printf	278:4:7956:7961	5699365	0	True				
ANR	5700378	Statement	(	278:11:7963:7963	5699365	1	True				
ANR	5700379	Statement	"""%02x%02x%02x%02x"""	278:12:7964:7981	5699365	2	True				
ANR	5700380	Statement	"""%02x%02x%02x%02x\\n"""	279:5:7988:8007	5699365	3	True				
ANR	5700381	Statement	","	279:25:8008:8008	5699365	4	True				
ANR	5700382	Statement	np	280:5:8015:8016	5699365	5	True				
ANR	5700383	Statement	[	280:7:8017:8017	5699365	6	True				
ANR	5700384	Statement	0	280:8:8018:8018	5699365	7	True				
ANR	5700385	Statement	]	280:9:8019:8019	5699365	8	True				
ANR	5700386	Statement	","	280:10:8020:8020	5699365	9	True				
ANR	5700387	Statement	np	280:12:8022:8023	5699365	10	True				
ANR	5700388	Statement	[	280:14:8024:8024	5699365	11	True				
ANR	5700389	Statement	1	280:15:8025:8025	5699365	12	True				
ANR	5700390	Statement	]	280:16:8026:8026	5699365	13	True				
ANR	5700391	Statement	","	280:17:8027:8027	5699365	14	True				
ANR	5700392	Statement	np	280:19:8029:8030	5699365	15	True				
ANR	5700393	Statement	[	280:21:8031:8031	5699365	16	True				
ANR	5700394	Statement	2	280:22:8032:8032	5699365	17	True				
ANR	5700395	Statement	]	280:23:8033:8033	5699365	18	True				
ANR	5700396	Statement	","	280:24:8034:8034	5699365	19	True				
ANR	5700397	Statement	np	280:26:8036:8037	5699365	20	True				
ANR	5700398	Statement	[	280:28:8038:8038	5699365	21	True				
ANR	5700399	Statement	3	280:29:8039:8039	5699365	22	True				
ANR	5700400	Statement	]	280:30:8040:8040	5699365	23	True				
ANR	5700401	Statement	","	280:31:8041:8041	5699365	24	True				
ANR	5700402	Statement	np	281:5:8048:8049	5699365	25	True				
ANR	5700403	Statement	[	281:7:8050:8050	5699365	26	True				
ANR	5700404	Statement	4	281:8:8051:8051	5699365	27	True				
ANR	5700405	Statement	]	281:9:8052:8052	5699365	28	True				
ANR	5700406	Statement	","	281:10:8053:8053	5699365	29	True				
ANR	5700407	Statement	np	281:12:8055:8056	5699365	30	True				
ANR	5700408	Statement	[	281:14:8057:8057	5699365	31	True				
ANR	5700409	Statement	5	281:15:8058:8058	5699365	32	True				
ANR	5700410	Statement	]	281:16:8059:8059	5699365	33	True				
ANR	5700411	Statement	","	281:17:8060:8060	5699365	34	True				
ANR	5700412	Statement	np	281:19:8062:8063	5699365	35	True				
ANR	5700413	Statement	[	281:21:8064:8064	5699365	36	True				
ANR	5700414	Statement	6	281:22:8065:8065	5699365	37	True				
ANR	5700415	Statement	]	281:23:8066:8066	5699365	38	True				
ANR	5700416	Statement	","	281:24:8067:8067	5699365	39	True				
ANR	5700417	Statement	np	281:26:8069:8070	5699365	40	True				
ANR	5700418	Statement	[	281:28:8071:8071	5699365	41	True				
ANR	5700419	Statement	7	281:29:8072:8072	5699365	42	True				
ANR	5700420	Statement	]	281:30:8073:8073	5699365	43	True				
ANR	5700421	Statement	)	281:31:8074:8074	5699365	44	True				
ANR	5700422	ExpressionStatement		281:32:8075:8075	5699365	45	True				
ANR	5700423	ElseStatement	else		5699365	0					
ANR	5700424	CompoundStatement		163:3:3993:4015	5699365	0					
ANR	5700425	IdentifierDeclStatement	ut32 n32 = ( ut32 ) ( n & UT32_MAX ) ;	285:3:8121:8153	5699365	0	True				
ANR	5700426	IdentifierDecl	n32 = ( ut32 ) ( n & UT32_MAX )		5699365	0					
ANR	5700427	IdentifierDeclType	ut32		5699365	0					
ANR	5700428	Identifier	n32		5699365	1					
ANR	5700429	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5699365	2		=			
ANR	5700430	Identifier	n32		5699365	0					
ANR	5700431	CastExpression	( ut32 ) ( n & UT32_MAX )		5699365	1					
ANR	5700432	CastTarget	ut32		5699365	0					
ANR	5700433	BitAndExpression	n & UT32_MAX		5699365	1		&			
ANR	5700434	Identifier	n		5699365	0					
ANR	5700435	Identifier	UT32_MAX		5699365	1					
ANR	5700436	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n32 ;	286:3:8158:8180	5699365	1	True				
ANR	5700437	IdentifierDecl	* np = ( ut8 * ) & n32		5699365	0					
ANR	5700438	IdentifierDeclType	ut8 *		5699365	0					
ANR	5700439	Identifier	np		5699365	1					
ANR	5700440	AssignmentExpression	* np = ( ut8 * ) & n32		5699365	2		=			
ANR	5700441	Identifier	np		5699365	0					
ANR	5700442	CastExpression	( ut8 * ) & n32		5699365	1					
ANR	5700443	CastTarget	ut8 *		5699365	0					
ANR	5700444	UnaryOperationExpression	& n32		5699365	1					
ANR	5700445	UnaryOperator	&		5699365	0					
ANR	5700446	Identifier	n32		5699365	1					
ANR	5700447	IfStatement	if ( flags & 1 )		5699365	2					
ANR	5700448	Condition	flags & 1	287:7:8189:8197	5699365	0	True				
ANR	5700449	BitAndExpression	flags & 1		5699365	0		&			
ANR	5700450	Identifier	flags		5699365	0					
ANR	5700451	PrimaryExpression	1		5699365	1					
ANR	5700452	CompoundStatement		164:18:4035:4035	5699365	1					
ANR	5700453	ExpressionStatement	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"	288:4:8206:8244	5699365	0	True				
ANR	5700454	CallExpression	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"		5699365	0					
ANR	5700455	Callee	fwrite		5699365	0					
ANR	5700456	Identifier	fwrite		5699365	0					
ANR	5700457	ArgumentList	& n32		5699365	1					
ANR	5700458	Argument	& n32		5699365	0					
ANR	5700459	UnaryOperationExpression	& n32		5699365	0					
ANR	5700460	UnaryOperator	&		5699365	0					
ANR	5700461	Identifier	n32		5699365	1					
ANR	5700462	Argument	sizeof ( n32 )		5699365	1					
ANR	5700463	SizeofExpression	sizeof ( n32 )		5699365	0					
ANR	5700464	Sizeof	sizeof		5699365	0					
ANR	5700465	SizeofOperand	n32		5699365	1					
ANR	5700466	Argument	1		5699365	2					
ANR	5700467	PrimaryExpression	1		5699365	0					
ANR	5700468	Argument	stdout		5699365	3					
ANR	5700469	Identifier	stdout		5699365	0					
ANR	5700470	ElseStatement	else		5699365	0					
ANR	5700471	CompoundStatement		166:10:4091:4091	5699365	0					
ANR	5700472	ExpressionStatement	"printf ( ""%02x%02x%02x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"	290:4:8262:8324	5699365	0	True				
ANR	5700473	CallExpression	"printf ( ""%02x%02x%02x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"		5699365	0					
ANR	5700474	Callee	printf		5699365	0					
ANR	5700475	Identifier	printf		5699365	0					
ANR	5700476	ArgumentList	"""%02x%02x%02x%02x\\n"""		5699365	1					
ANR	5700477	Argument	"""%02x%02x%02x%02x\\n"""		5699365	0					
ANR	5700478	PrimaryExpression	"""%02x%02x%02x%02x\\n"""		5699365	0					
ANR	5700479	Argument	np [ 0 ]		5699365	1					
ANR	5700480	ArrayIndexing	np [ 0 ]		5699365	0					
ANR	5700481	Identifier	np		5699365	0					
ANR	5700482	PrimaryExpression	0		5699365	1					
ANR	5700483	Argument	np [ 1 ]		5699365	2					
ANR	5700484	ArrayIndexing	np [ 1 ]		5699365	0					
ANR	5700485	Identifier	np		5699365	0					
ANR	5700486	PrimaryExpression	1		5699365	1					
ANR	5700487	Argument	np [ 2 ]		5699365	3					
ANR	5700488	ArrayIndexing	np [ 2 ]		5699365	0					
ANR	5700489	Identifier	np		5699365	0					
ANR	5700490	PrimaryExpression	2		5699365	1					
ANR	5700491	Argument	np [ 3 ]		5699365	4					
ANR	5700492	ArrayIndexing	np [ 3 ]		5699365	0					
ANR	5700493	Identifier	np		5699365	0					
ANR	5700494	PrimaryExpression	3		5699365	1					
ANR	5700495	ExpressionStatement	fflush ( stdout )	294:2:8337:8352	5699365	2	True				
ANR	5700496	CallExpression	fflush ( stdout )		5699365	0					
ANR	5700497	Callee	fflush		5699365	0					
ANR	5700498	Identifier	fflush		5699365	0					
ANR	5700499	ArgumentList	stdout		5699365	1					
ANR	5700500	Argument	stdout		5699365	0					
ANR	5700501	Identifier	stdout		5699365	0					
ANR	5700502	ReturnStatement	return true ;	295:2:8356:8367	5699365	3	True				
ANR	5700503	Identifier	true		5699365	0					
ANR	5700504	ElseStatement	else		5699365	0					
ANR	5700505	IfStatement	if ( flags & ( 1 << 17 ) )		5699365	0					
ANR	5700506	Condition	flags & ( 1 << 17 )	296:12:8381:8397	5699365	0	True				
ANR	5700507	BitAndExpression	flags & ( 1 << 17 )		5699365	0		&			
ANR	5700508	Identifier	flags		5699365	0					
ANR	5700509	ShiftExpression	1 << 17		5699365	1		<<			
ANR	5700510	PrimaryExpression	1		5699365	0					
ANR	5700511	PrimaryExpression	17		5699365	1					
ANR	5700512	CompoundStatement		174:2:4258:4267	5699365	1					
ANR	5700513	IdentifierDeclStatement	int i = 0 ;	297:2:8423:8432	5699365	0	True				
ANR	5700514	IdentifierDecl	i = 0		5699365	0					
ANR	5700515	IdentifierDeclType	int		5699365	0					
ANR	5700516	Identifier	i		5699365	1					
ANR	5700517	AssignmentExpression	i = 0		5699365	2		=			
ANR	5700518	Identifier	i		5699365	0					
ANR	5700519	PrimaryExpression	0		5699365	1					
ANR	5700520	ForStatement	for ( i = 0 ; i < strlen ( str ) ; i ++ )		5699365	1					
ANR	5700521	ForInit	i = 0 ;	299:7:8467:8472	5699365	0	True				
ANR	5700522	AssignmentExpression	i = 0		5699365	0		=			
ANR	5700523	Identifier	i		5699365	0					
ANR	5700524	PrimaryExpression	0		5699365	1					
ANR	5700525	Condition	i < strlen ( str )	299:14:8474:8489	5699365	1	True				
ANR	5700526	RelationalExpression	i < strlen ( str )		5699365	0		<			
ANR	5700527	Identifier	i		5699365	0					
ANR	5700528	CallExpression	strlen ( str )		5699365	1					
ANR	5700529	Callee	strlen		5699365	0					
ANR	5700530	Identifier	strlen		5699365	0					
ANR	5700531	ArgumentList	str		5699365	1					
ANR	5700532	Argument	str		5699365	0					
ANR	5700533	Identifier	str		5699365	0					
ANR	5700534	PostIncDecOperationExpression	i ++	299:32:8492:8494	5699365	2	True				
ANR	5700535	Identifier	i		5699365	0					
ANR	5700536	IncDec	++		5699365	1					
ANR	5700537	CompoundStatement		177:3:4337:4352	5699365	3					
ANR	5700538	IdentifierDeclStatement	ut8 ch = str [ i ] ;	300:3:8502:8517	5699365	0	True				
ANR	5700539	IdentifierDecl	ch = str [ i ]		5699365	0					
ANR	5700540	IdentifierDeclType	ut8		5699365	0					
ANR	5700541	Identifier	ch		5699365	1					
ANR	5700542	AssignmentExpression	ch = str [ i ]		5699365	2		=			
ANR	5700543	Identifier	ch		5699365	0					
ANR	5700544	ArrayIndexing	str [ i ]		5699365	1					
ANR	5700545	Identifier	str		5699365	0					
ANR	5700546	Identifier	i		5699365	1					
ANR	5700547	Statement	printf	301:3:8522:8527	5699365	1	True				
ANR	5700548	Statement	(	301:10:8529:8529	5699365	2	True				
ANR	5700549	Statement	"""%d%d%d%d"""	301:11:8530:8539	5699365	3	True				
ANR	5700550	Statement	"""%d%d%d%d"""	302:4:8545:8554	5699365	4	True				
ANR	5700551	Statement	","	302:14:8555:8555	5699365	5	True				
ANR	5700552	Statement	ch	303:4:8561:8562	5699365	6	True				
ANR	5700553	Statement	&	303:7:8564:8564	5699365	7	True				
ANR	5700554	Statement	128	303:9:8566:8568	5699365	8	True				
ANR	5700555	Statement	?	303:12:8569:8569	5699365	9	True				
ANR	5700556	Label	1 :	303:14:8571:8572	5699365	10	True				
ANR	5700557	Statement	0	303:17:8574:8574	5699365	11	True				
ANR	5700558	Statement	","	303:18:8575:8575	5699365	12	True				
ANR	5700559	Statement	ch	304:4:8581:8582	5699365	13	True				
ANR	5700560	Statement	&	304:7:8584:8584	5699365	14	True				
ANR	5700561	Statement	64	304:9:8586:8587	5699365	15	True				
ANR	5700562	Statement	?	304:11:8588:8588	5699365	16	True				
ANR	5700563	Label	1 :	304:13:8590:8591	5699365	17	True				
ANR	5700564	Statement	0	304:16:8593:8593	5699365	18	True				
ANR	5700565	Statement	","	304:17:8594:8594	5699365	19	True				
ANR	5700566	Statement	ch	305:4:8600:8601	5699365	20	True				
ANR	5700567	Statement	&	305:7:8603:8603	5699365	21	True				
ANR	5700568	Statement	32	305:9:8605:8606	5699365	22	True				
ANR	5700569	Statement	?	305:11:8607:8607	5699365	23	True				
ANR	5700570	Label	1 :	305:13:8609:8610	5699365	24	True				
ANR	5700571	Statement	0	305:16:8612:8612	5699365	25	True				
ANR	5700572	Statement	","	305:17:8613:8613	5699365	26	True				
ANR	5700573	Statement	ch	306:4:8619:8620	5699365	27	True				
ANR	5700574	Statement	&	306:7:8622:8622	5699365	28	True				
ANR	5700575	Statement	16	306:9:8624:8625	5699365	29	True				
ANR	5700576	Statement	?	306:11:8626:8626	5699365	30	True				
ANR	5700577	Label	1 :	306:13:8628:8629	5699365	31	True				
ANR	5700578	Statement	0	306:16:8631:8631	5699365	32	True				
ANR	5700579	Statement	","	306:17:8632:8632	5699365	33	True				
ANR	5700580	Statement	ch	307:4:8638:8639	5699365	34	True				
ANR	5700581	Statement	&	307:7:8641:8641	5699365	35	True				
ANR	5700582	Statement	8	307:9:8643:8643	5699365	36	True				
ANR	5700583	Statement	?	307:10:8644:8644	5699365	37	True				
ANR	5700584	Label	1 :	307:12:8646:8647	5699365	38	True				
ANR	5700585	Statement	0	307:15:8649:8649	5699365	39	True				
ANR	5700586	Statement	","	307:16:8650:8650	5699365	40	True				
ANR	5700587	Statement	ch	308:4:8656:8657	5699365	41	True				
ANR	5700588	Statement	&	308:7:8659:8659	5699365	42	True				
ANR	5700589	Statement	4	308:9:8661:8661	5699365	43	True				
ANR	5700590	Statement	?	308:10:8662:8662	5699365	44	True				
ANR	5700591	Label	1 :	308:12:8664:8665	5699365	45	True				
ANR	5700592	Statement	0	308:15:8667:8667	5699365	46	True				
ANR	5700593	Statement	","	308:16:8668:8668	5699365	47	True				
ANR	5700594	Statement	ch	309:4:8674:8675	5699365	48	True				
ANR	5700595	Statement	&	309:7:8677:8677	5699365	49	True				
ANR	5700596	Statement	2	309:9:8679:8679	5699365	50	True				
ANR	5700597	Statement	?	309:10:8680:8680	5699365	51	True				
ANR	5700598	Label	1 :	309:12:8682:8683	5699365	52	True				
ANR	5700599	Statement	0	309:15:8685:8685	5699365	53	True				
ANR	5700600	Statement	","	309:16:8686:8686	5699365	54	True				
ANR	5700601	Statement	ch	310:4:8692:8693	5699365	55	True				
ANR	5700602	Statement	&	310:7:8695:8695	5699365	56	True				
ANR	5700603	Statement	1	310:9:8697:8697	5699365	57	True				
ANR	5700604	Statement	?	310:10:8698:8698	5699365	58	True				
ANR	5700605	Label	1 :	310:12:8700:8701	5699365	59	True				
ANR	5700606	Statement	0	310:15:8703:8703	5699365	60	True				
ANR	5700607	Statement	)	310:16:8704:8704	5699365	61	True				
ANR	5700608	ExpressionStatement		310:17:8705:8705	5699365	62	True				
ANR	5700609	ReturnStatement	return true ;	312:2:8713:8724	5699365	2	True				
ANR	5700610	Identifier	true		5699365	0					
ANR	5700611	ElseStatement	else		5699365	0					
ANR	5700612	IfStatement	if ( flags & ( 1 << 16 ) )		5699365	0					
ANR	5700613	Condition	flags & ( 1 << 16 )	313:12:8738:8754	5699365	0	True				
ANR	5700614	BitAndExpression	flags & ( 1 << 16 )		5699365	0		&			
ANR	5700615	Identifier	flags		5699365	0					
ANR	5700616	ShiftExpression	1 << 16		5699365	1		<<			
ANR	5700617	PrimaryExpression	1		5699365	0					
ANR	5700618	PrimaryExpression	16		5699365	1					
ANR	5700619	CompoundStatement		191:2:4602:4632	5699365	1					
ANR	5700620	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	314:2:8767:8797	5699365	0	True				
ANR	5700621	IdentifierDecl	"n = r_num_math ( num , str )"		5699365	0					
ANR	5700622	IdentifierDeclType	ut64		5699365	0					
ANR	5700623	Identifier	n		5699365	1					
ANR	5700624	AssignmentExpression	"n = r_num_math ( num , str )"		5699365	2		=			
ANR	5700625	Identifier	n		5699365	0					
ANR	5700626	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5700627	Callee	r_num_math		5699365	0					
ANR	5700628	Identifier	r_num_math		5699365	0					
ANR	5700629	ArgumentList	num		5699365	1					
ANR	5700630	Argument	num		5699365	0					
ANR	5700631	Identifier	num		5699365	0					
ANR	5700632	Argument	str		5699365	1					
ANR	5700633	Identifier	str		5699365	0					
ANR	5700634	IfStatement	if ( n >> 31 )		5699365	1					
ANR	5700635	Condition	n >> 31	315:6:8805:8811	5699365	0	True				
ANR	5700636	ShiftExpression	n >> 31		5699365	0		>>			
ANR	5700637	Identifier	n		5699365	0					
ANR	5700638	PrimaryExpression	31		5699365	1					
ANR	5700639	CompoundStatement		192:15:4649:4649	5699365	1					
ANR	5700640	ExpressionStatement	n = ( st64 ) ( st32 ) n	317:3:8835:8854	5699365	0	True				
ANR	5700641	AssignmentExpression	n = ( st64 ) ( st32 ) n		5699365	0		=			
ANR	5700642	Identifier	n		5699365	0					
ANR	5700643	CastExpression	( st64 ) ( st32 ) n		5699365	1					
ANR	5700644	CastTarget	st64		5699365	0					
ANR	5700645	CastExpression	( st32 ) n		5699365	1					
ANR	5700646	CastTarget	st32		5699365	0					
ANR	5700647	Identifier	n		5699365	1					
ANR	5700648	ElseStatement	else		5699365	0					
ANR	5700649	IfStatement	if ( n >> 14 )		5699365	0					
ANR	5700650	Condition	n >> 14	318:13:8869:8875	5699365	0	True				
ANR	5700651	ShiftExpression	n >> 14		5699365	0		>>			
ANR	5700652	Identifier	n		5699365	0					
ANR	5700653	PrimaryExpression	14		5699365	1					
ANR	5700654	CompoundStatement		195:22:4713:4713	5699365	1					
ANR	5700655	ExpressionStatement	n = ( st64 ) ( st16 ) n	319:3:8883:8902	5699365	0	True				
ANR	5700656	AssignmentExpression	n = ( st64 ) ( st16 ) n		5699365	0		=			
ANR	5700657	Identifier	n		5699365	0					
ANR	5700658	CastExpression	( st64 ) ( st16 ) n		5699365	1					
ANR	5700659	CastTarget	st64		5699365	0					
ANR	5700660	CastExpression	( st16 ) n		5699365	1					
ANR	5700661	CastTarget	st16		5699365	0					
ANR	5700662	Identifier	n		5699365	1					
ANR	5700663	ElseStatement	else		5699365	0					
ANR	5700664	IfStatement	if ( n >> 7 )		5699365	0					
ANR	5700665	Condition	n >> 7	320:13:8917:8922	5699365	0	True				
ANR	5700666	ShiftExpression	n >> 7		5699365	0		>>			
ANR	5700667	Identifier	n		5699365	0					
ANR	5700668	PrimaryExpression	7		5699365	1					
ANR	5700669	CompoundStatement		197:21:4760:4760	5699365	1					
ANR	5700670	ExpressionStatement	n = ( st64 ) ( st8 ) n	321:3:8930:8948	5699365	0	True				
ANR	5700671	AssignmentExpression	n = ( st64 ) ( st8 ) n		5699365	0		=			
ANR	5700672	Identifier	n		5699365	0					
ANR	5700673	CastExpression	( st64 ) ( st8 ) n		5699365	1					
ANR	5700674	CastTarget	st64		5699365	0					
ANR	5700675	CastExpression	( st8 ) n		5699365	1					
ANR	5700676	CastTarget	st8		5699365	0					
ANR	5700677	Identifier	n		5699365	1					
ANR	5700678	Statement	printf	323:2:8956:8961	5699365	2	True				
ANR	5700679	Statement	(	323:9:8963:8963	5699365	3	True				
ANR	5700680	Statement	"""%"""	323:10:8964:8966	5699365	4	True				
ANR	5700681	Statement	PFMT64d	323:14:8968:8974	5699365	5	True				
ANR	5700682	Statement	"""\\n"""	323:22:8976:8979	5699365	6	True				
ANR	5700683	Statement	","	323:26:8980:8980	5699365	7	True				
ANR	5700684	Statement	n	323:28:8982:8982	5699365	8	True				
ANR	5700685	Statement	)	323:29:8983:8983	5699365	9	True				
ANR	5700686	ExpressionStatement		323:30:8984:8984	5699365	10	True				
ANR	5700687	ExpressionStatement	fflush ( stdout )	324:2:8988:9003	5699365	11	True				
ANR	5700688	CallExpression	fflush ( stdout )		5699365	0					
ANR	5700689	Callee	fflush		5699365	0					
ANR	5700690	Identifier	fflush		5699365	0					
ANR	5700691	ArgumentList	stdout		5699365	1					
ANR	5700692	Argument	stdout		5699365	0					
ANR	5700693	Identifier	stdout		5699365	0					
ANR	5700694	ReturnStatement	return true ;	325:2:9007:9018	5699365	12	True				
ANR	5700695	Identifier	true		5699365	0					
ANR	5700696	ElseStatement	else		5699365	0					
ANR	5700697	IfStatement	if ( flags & ( 1 << 15 ) )		5699365	0					
ANR	5700698	Condition	flags & ( 1 << 15 )	326:12:9032:9048	5699365	0	True				
ANR	5700699	BitAndExpression	flags & ( 1 << 15 )		5699365	0		&			
ANR	5700700	Identifier	flags		5699365	0					
ANR	5700701	ShiftExpression	1 << 15		5699365	1		<<			
ANR	5700702	PrimaryExpression	1		5699365	0					
ANR	5700703	PrimaryExpression	15		5699365	1					
ANR	5700704	CompoundStatement		204:2:4896:4926	5699365	1					
ANR	5700705	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	327:2:9061:9091	5699365	0	True				
ANR	5700706	IdentifierDecl	"n = r_num_math ( num , str )"		5699365	0					
ANR	5700707	IdentifierDeclType	ut64		5699365	0					
ANR	5700708	Identifier	n		5699365	1					
ANR	5700709	AssignmentExpression	"n = r_num_math ( num , str )"		5699365	2		=			
ANR	5700710	Identifier	n		5699365	0					
ANR	5700711	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5700712	Callee	r_num_math		5699365	0					
ANR	5700713	Identifier	r_num_math		5699365	0					
ANR	5700714	ArgumentList	num		5699365	1					
ANR	5700715	Argument	num		5699365	0					
ANR	5700716	Identifier	num		5699365	0					
ANR	5700717	Argument	str		5699365	1					
ANR	5700718	Identifier	str		5699365	0					
ANR	5700719	IfStatement	if ( n >> 32 )		5699365	1					
ANR	5700720	Condition	n >> 32	328:6:9099:9105	5699365	0	True				
ANR	5700721	ShiftExpression	n >> 32		5699365	0		>>			
ANR	5700722	Identifier	n		5699365	0					
ANR	5700723	PrimaryExpression	32		5699365	1					
ANR	5700724	CompoundStatement		207:3:4973:4993	5699365	1					
ANR	5700725	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n ;	330:3:9138:9158	5699365	0	True				
ANR	5700726	IdentifierDecl	* np = ( ut8 * ) & n		5699365	0					
ANR	5700727	IdentifierDeclType	ut8 *		5699365	0					
ANR	5700728	Identifier	np		5699365	1					
ANR	5700729	AssignmentExpression	* np = ( ut8 * ) & n		5699365	2		=			
ANR	5700730	Identifier	np		5699365	0					
ANR	5700731	CastExpression	( ut8 * ) & n		5699365	1					
ANR	5700732	CastTarget	ut8 *		5699365	0					
ANR	5700733	UnaryOperationExpression	& n		5699365	1					
ANR	5700734	UnaryOperator	&		5699365	0					
ANR	5700735	Identifier	n		5699365	1					
ANR	5700736	IfStatement	if ( flags & 1 )		5699365	1					
ANR	5700737	Condition	flags & 1	331:7:9167:9175	5699365	0	True				
ANR	5700738	BitAndExpression	flags & 1		5699365	0		&			
ANR	5700739	Identifier	flags		5699365	0					
ANR	5700740	PrimaryExpression	1		5699365	1					
ANR	5700741	CompoundStatement		208:18:5013:5013	5699365	1					
ANR	5700742	ExpressionStatement	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"	332:4:9184:9218	5699365	0	True				
ANR	5700743	CallExpression	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"		5699365	0					
ANR	5700744	Callee	fwrite		5699365	0					
ANR	5700745	Identifier	fwrite		5699365	0					
ANR	5700746	ArgumentList	& n		5699365	1					
ANR	5700747	Argument	& n		5699365	0					
ANR	5700748	UnaryOperationExpression	& n		5699365	0					
ANR	5700749	UnaryOperator	&		5699365	0					
ANR	5700750	Identifier	n		5699365	1					
ANR	5700751	Argument	sizeof ( n )		5699365	1					
ANR	5700752	SizeofExpression	sizeof ( n )		5699365	0					
ANR	5700753	Sizeof	sizeof		5699365	0					
ANR	5700754	SizeofOperand	n		5699365	1					
ANR	5700755	Argument	1		5699365	2					
ANR	5700756	PrimaryExpression	1		5699365	0					
ANR	5700757	Argument	stdout		5699365	3					
ANR	5700758	Identifier	stdout		5699365	0					
ANR	5700759	ElseStatement	else		5699365	0					
ANR	5700760	CompoundStatement		210:10:5065:5065	5699365	0					
ANR	5700761	Statement	printf	334:4:9236:9241	5699365	0	True				
ANR	5700762	Statement	(	334:11:9243:9243	5699365	1	True				
ANR	5700763	Statement	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x"""	334:12:9244:9273	5699365	2	True				
ANR	5700764	Statement	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""	335:5:9280:9311	5699365	3	True				
ANR	5700765	Statement	","	335:37:9312:9312	5699365	4	True				
ANR	5700766	Statement	np	336:5:9319:9320	5699365	5	True				
ANR	5700767	Statement	[	336:7:9321:9321	5699365	6	True				
ANR	5700768	Statement	0	336:8:9322:9322	5699365	7	True				
ANR	5700769	Statement	]	336:9:9323:9323	5699365	8	True				
ANR	5700770	Statement	","	336:10:9324:9324	5699365	9	True				
ANR	5700771	Statement	np	336:12:9326:9327	5699365	10	True				
ANR	5700772	Statement	[	336:14:9328:9328	5699365	11	True				
ANR	5700773	Statement	1	336:15:9329:9329	5699365	12	True				
ANR	5700774	Statement	]	336:16:9330:9330	5699365	13	True				
ANR	5700775	Statement	","	336:17:9331:9331	5699365	14	True				
ANR	5700776	Statement	np	336:19:9333:9334	5699365	15	True				
ANR	5700777	Statement	[	336:21:9335:9335	5699365	16	True				
ANR	5700778	Statement	2	336:22:9336:9336	5699365	17	True				
ANR	5700779	Statement	]	336:23:9337:9337	5699365	18	True				
ANR	5700780	Statement	","	336:24:9338:9338	5699365	19	True				
ANR	5700781	Statement	np	336:26:9340:9341	5699365	20	True				
ANR	5700782	Statement	[	336:28:9342:9342	5699365	21	True				
ANR	5700783	Statement	3	336:29:9343:9343	5699365	22	True				
ANR	5700784	Statement	]	336:30:9344:9344	5699365	23	True				
ANR	5700785	Statement	","	336:31:9345:9345	5699365	24	True				
ANR	5700786	Statement	np	337:5:9352:9353	5699365	25	True				
ANR	5700787	Statement	[	337:7:9354:9354	5699365	26	True				
ANR	5700788	Statement	4	337:8:9355:9355	5699365	27	True				
ANR	5700789	Statement	]	337:9:9356:9356	5699365	28	True				
ANR	5700790	Statement	","	337:10:9357:9357	5699365	29	True				
ANR	5700791	Statement	np	337:12:9359:9360	5699365	30	True				
ANR	5700792	Statement	[	337:14:9361:9361	5699365	31	True				
ANR	5700793	Statement	5	337:15:9362:9362	5699365	32	True				
ANR	5700794	Statement	]	337:16:9363:9363	5699365	33	True				
ANR	5700795	Statement	","	337:17:9364:9364	5699365	34	True				
ANR	5700796	Statement	np	337:19:9366:9367	5699365	35	True				
ANR	5700797	Statement	[	337:21:9368:9368	5699365	36	True				
ANR	5700798	Statement	6	337:22:9369:9369	5699365	37	True				
ANR	5700799	Statement	]	337:23:9370:9370	5699365	38	True				
ANR	5700800	Statement	","	337:24:9371:9371	5699365	39	True				
ANR	5700801	Statement	np	337:26:9373:9374	5699365	40	True				
ANR	5700802	Statement	[	337:28:9375:9375	5699365	41	True				
ANR	5700803	Statement	7	337:29:9376:9376	5699365	42	True				
ANR	5700804	Statement	]	337:30:9377:9377	5699365	43	True				
ANR	5700805	Statement	)	337:31:9378:9378	5699365	44	True				
ANR	5700806	ExpressionStatement		337:32:9379:9379	5699365	45	True				
ANR	5700807	ElseStatement	else		5699365	0					
ANR	5700808	CompoundStatement		219:3:5297:5319	5699365	0					
ANR	5700809	IdentifierDeclStatement	ut32 n32 = ( ut32 ) ( n & UT32_MAX ) ;	341:3:9425:9457	5699365	0	True				
ANR	5700810	IdentifierDecl	n32 = ( ut32 ) ( n & UT32_MAX )		5699365	0					
ANR	5700811	IdentifierDeclType	ut32		5699365	0					
ANR	5700812	Identifier	n32		5699365	1					
ANR	5700813	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5699365	2		=			
ANR	5700814	Identifier	n32		5699365	0					
ANR	5700815	CastExpression	( ut32 ) ( n & UT32_MAX )		5699365	1					
ANR	5700816	CastTarget	ut32		5699365	0					
ANR	5700817	BitAndExpression	n & UT32_MAX		5699365	1		&			
ANR	5700818	Identifier	n		5699365	0					
ANR	5700819	Identifier	UT32_MAX		5699365	1					
ANR	5700820	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n32 ;	342:3:9462:9484	5699365	1	True				
ANR	5700821	IdentifierDecl	* np = ( ut8 * ) & n32		5699365	0					
ANR	5700822	IdentifierDeclType	ut8 *		5699365	0					
ANR	5700823	Identifier	np		5699365	1					
ANR	5700824	AssignmentExpression	* np = ( ut8 * ) & n32		5699365	2		=			
ANR	5700825	Identifier	np		5699365	0					
ANR	5700826	CastExpression	( ut8 * ) & n32		5699365	1					
ANR	5700827	CastTarget	ut8 *		5699365	0					
ANR	5700828	UnaryOperationExpression	& n32		5699365	1					
ANR	5700829	UnaryOperator	&		5699365	0					
ANR	5700830	Identifier	n32		5699365	1					
ANR	5700831	IfStatement	if ( flags & 1 )		5699365	2					
ANR	5700832	Condition	flags & 1	343:7:9493:9501	5699365	0	True				
ANR	5700833	BitAndExpression	flags & 1		5699365	0		&			
ANR	5700834	Identifier	flags		5699365	0					
ANR	5700835	PrimaryExpression	1		5699365	1					
ANR	5700836	CompoundStatement		220:18:5339:5339	5699365	1					
ANR	5700837	ExpressionStatement	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"	344:4:9510:9548	5699365	0	True				
ANR	5700838	CallExpression	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"		5699365	0					
ANR	5700839	Callee	fwrite		5699365	0					
ANR	5700840	Identifier	fwrite		5699365	0					
ANR	5700841	ArgumentList	& n32		5699365	1					
ANR	5700842	Argument	& n32		5699365	0					
ANR	5700843	UnaryOperationExpression	& n32		5699365	0					
ANR	5700844	UnaryOperator	&		5699365	0					
ANR	5700845	Identifier	n32		5699365	1					
ANR	5700846	Argument	sizeof ( n32 )		5699365	1					
ANR	5700847	SizeofExpression	sizeof ( n32 )		5699365	0					
ANR	5700848	Sizeof	sizeof		5699365	0					
ANR	5700849	SizeofOperand	n32		5699365	1					
ANR	5700850	Argument	1		5699365	2					
ANR	5700851	PrimaryExpression	1		5699365	0					
ANR	5700852	Argument	stdout		5699365	3					
ANR	5700853	Identifier	stdout		5699365	0					
ANR	5700854	ElseStatement	else		5699365	0					
ANR	5700855	CompoundStatement		222:10:5395:5395	5699365	0					
ANR	5700856	ExpressionStatement	"printf ( ""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"	346:4:9566:9640	5699365	0	True				
ANR	5700857	CallExpression	"printf ( ""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"		5699365	0					
ANR	5700858	Callee	printf		5699365	0					
ANR	5700859	Identifier	printf		5699365	0					
ANR	5700860	ArgumentList	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5699365	1					
ANR	5700861	Argument	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5699365	0					
ANR	5700862	PrimaryExpression	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5699365	0					
ANR	5700863	Argument	np [ 0 ]		5699365	1					
ANR	5700864	ArrayIndexing	np [ 0 ]		5699365	0					
ANR	5700865	Identifier	np		5699365	0					
ANR	5700866	PrimaryExpression	0		5699365	1					
ANR	5700867	Argument	np [ 1 ]		5699365	2					
ANR	5700868	ArrayIndexing	np [ 1 ]		5699365	0					
ANR	5700869	Identifier	np		5699365	0					
ANR	5700870	PrimaryExpression	1		5699365	1					
ANR	5700871	Argument	np [ 2 ]		5699365	3					
ANR	5700872	ArrayIndexing	np [ 2 ]		5699365	0					
ANR	5700873	Identifier	np		5699365	0					
ANR	5700874	PrimaryExpression	2		5699365	1					
ANR	5700875	Argument	np [ 3 ]		5699365	4					
ANR	5700876	ArrayIndexing	np [ 3 ]		5699365	0					
ANR	5700877	Identifier	np		5699365	0					
ANR	5700878	PrimaryExpression	3		5699365	1					
ANR	5700879	ExpressionStatement	fflush ( stdout )	350:2:9653:9668	5699365	2	True				
ANR	5700880	CallExpression	fflush ( stdout )		5699365	0					
ANR	5700881	Callee	fflush		5699365	0					
ANR	5700882	Identifier	fflush		5699365	0					
ANR	5700883	ArgumentList	stdout		5699365	1					
ANR	5700884	Argument	stdout		5699365	0					
ANR	5700885	Identifier	stdout		5699365	0					
ANR	5700886	ReturnStatement	return true ;	351:2:9672:9683	5699365	3	True				
ANR	5700887	Identifier	true		5699365	0					
ANR	5700888	ElseStatement	else		5699365	0					
ANR	5700889	IfStatement	if ( flags & ( 1 << 10 ) )		5699365	0					
ANR	5700890	Condition	flags & ( 1 << 10 )	352:12:9697:9713	5699365	0	True				
ANR	5700891	BitAndExpression	flags & ( 1 << 10 )		5699365	0		&			
ANR	5700892	Identifier	flags		5699365	0					
ANR	5700893	ShiftExpression	1 << 10		5699365	1		<<			
ANR	5700894	PrimaryExpression	1		5699365	0					
ANR	5700895	PrimaryExpression	10		5699365	1					
ANR	5700896	CompoundStatement		230:2:5561:5572	5699365	1					
ANR	5700897	IdentifierDeclStatement	char buf [ 8 ] ;	353:2:9726:9737	5699365	0	True				
ANR	5700898	IdentifierDecl	buf [ 8 ]		5699365	0					
ANR	5700899	IdentifierDeclType	char [ 8 ]		5699365	0					
ANR	5700900	Identifier	buf		5699365	1					
ANR	5700901	PrimaryExpression	8		5699365	2					
ANR	5700902	ExpressionStatement	"r_num_units ( buf , sizeof ( buf ) , r_num_math ( NULL , str ) )"	354:2:9741:9796	5699365	1	True				
ANR	5700903	CallExpression	"r_num_units ( buf , sizeof ( buf ) , r_num_math ( NULL , str ) )"		5699365	0					
ANR	5700904	Callee	r_num_units		5699365	0					
ANR	5700905	Identifier	r_num_units		5699365	0					
ANR	5700906	ArgumentList	buf		5699365	1					
ANR	5700907	Argument	buf		5699365	0					
ANR	5700908	Identifier	buf		5699365	0					
ANR	5700909	Argument	sizeof ( buf )		5699365	1					
ANR	5700910	SizeofExpression	sizeof ( buf )		5699365	0					
ANR	5700911	Sizeof	sizeof		5699365	0					
ANR	5700912	SizeofOperand	buf		5699365	1					
ANR	5700913	Argument	"r_num_math ( NULL , str )"		5699365	2					
ANR	5700914	CallExpression	"r_num_math ( NULL , str )"		5699365	0					
ANR	5700915	Callee	r_num_math		5699365	0					
ANR	5700916	Identifier	r_num_math		5699365	0					
ANR	5700917	ArgumentList	NULL		5699365	1					
ANR	5700918	Argument	NULL		5699365	0					
ANR	5700919	Identifier	NULL		5699365	0					
ANR	5700920	Argument	str		5699365	1					
ANR	5700921	Identifier	str		5699365	0					
ANR	5700922	ExpressionStatement	"printf ( ""%s\\n"" , buf )"	355:2:9800:9820	5699365	2	True				
ANR	5700923	CallExpression	"printf ( ""%s\\n"" , buf )"		5699365	0					
ANR	5700924	Callee	printf		5699365	0					
ANR	5700925	Identifier	printf		5699365	0					
ANR	5700926	ArgumentList	"""%s\\n"""		5699365	1					
ANR	5700927	Argument	"""%s\\n"""		5699365	0					
ANR	5700928	PrimaryExpression	"""%s\\n"""		5699365	0					
ANR	5700929	Argument	buf		5699365	1					
ANR	5700930	Identifier	buf		5699365	0					
ANR	5700931	ReturnStatement	return true ;	356:2:9824:9835	5699365	3	True				
ANR	5700932	Identifier	true		5699365	0					
ANR	5700933	ElseStatement	else		5699365	0					
ANR	5700934	IfStatement	if ( flags & ( 1 << 11 ) )		5699365	0					
ANR	5700935	Condition	flags & ( 1 << 11 )	357:12:9849:9865	5699365	0	True				
ANR	5700936	BitAndExpression	flags & ( 1 << 11 )		5699365	0		&			
ANR	5700937	Identifier	flags		5699365	0					
ANR	5700938	ShiftExpression	1 << 11		5699365	1		<<			
ANR	5700939	PrimaryExpression	1		5699365	0					
ANR	5700940	PrimaryExpression	11		5699365	1					
ANR	5700941	CompoundStatement		236:2:5747:5773	5699365	1					
ANR	5700942	IdentifierDeclStatement	"ut32 n = r_num_math ( num , str ) ;"	358:2:9878:9908	5699365	0	True				
ANR	5700943	IdentifierDecl	"n = r_num_math ( num , str )"		5699365	0					
ANR	5700944	IdentifierDeclType	ut32		5699365	0					
ANR	5700945	Identifier	n		5699365	1					
ANR	5700946	AssignmentExpression	"n = r_num_math ( num , str )"		5699365	2		=			
ANR	5700947	Identifier	n		5699365	0					
ANR	5700948	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5700949	Callee	r_num_math		5699365	0					
ANR	5700950	Identifier	r_num_math		5699365	0					
ANR	5700951	ArgumentList	num		5699365	1					
ANR	5700952	Argument	num		5699365	0					
ANR	5700953	Identifier	num		5699365	0					
ANR	5700954	Argument	str		5699365	1					
ANR	5700955	Identifier	str		5699365	0					
ANR	5700956	IdentifierDeclStatement	RPrint * p = r_print_new ( ) ;	359:2:9912:9938	5699365	1	True				
ANR	5700957	IdentifierDecl	* p = r_print_new ( )		5699365	0					
ANR	5700958	IdentifierDeclType	RPrint *		5699365	0					
ANR	5700959	Identifier	p		5699365	1					
ANR	5700960	AssignmentExpression	* p = r_print_new ( )		5699365	2		=			
ANR	5700961	Identifier	p		5699365	0					
ANR	5700962	CallExpression	r_print_new ( )		5699365	1					
ANR	5700963	Callee	r_print_new		5699365	0					
ANR	5700964	Identifier	r_print_new		5699365	0					
ANR	5700965	ArgumentList			5699365	1					
ANR	5700966	ExpressionStatement	"r_print_date_unix ( p , ( const ut8 * ) & n , sizeof ( ut32 ) )"	360:2:9942:9996	5699365	2	True				
ANR	5700967	CallExpression	"r_print_date_unix ( p , ( const ut8 * ) & n , sizeof ( ut32 ) )"		5699365	0					
ANR	5700968	Callee	r_print_date_unix		5699365	0					
ANR	5700969	Identifier	r_print_date_unix		5699365	0					
ANR	5700970	ArgumentList	p		5699365	1					
ANR	5700971	Argument	p		5699365	0					
ANR	5700972	Identifier	p		5699365	0					
ANR	5700973	Argument	( const ut8 * ) & n		5699365	1					
ANR	5700974	CastExpression	( const ut8 * ) & n		5699365	0					
ANR	5700975	CastTarget	const ut8 *		5699365	0					
ANR	5700976	UnaryOperationExpression	& n		5699365	1					
ANR	5700977	UnaryOperator	&		5699365	0					
ANR	5700978	Identifier	n		5699365	1					
ANR	5700979	Argument	sizeof ( ut32 )		5699365	2					
ANR	5700980	SizeofExpression	sizeof ( ut32 )		5699365	0					
ANR	5700981	Sizeof	sizeof		5699365	0					
ANR	5700982	SizeofOperand	ut32		5699365	1					
ANR	5700983	ExpressionStatement	r_print_free ( p )	361:2:10000:10016	5699365	3	True				
ANR	5700984	CallExpression	r_print_free ( p )		5699365	0					
ANR	5700985	Callee	r_print_free		5699365	0					
ANR	5700986	Identifier	r_print_free		5699365	0					
ANR	5700987	ArgumentList	p		5699365	1					
ANR	5700988	Argument	p		5699365	0					
ANR	5700989	Identifier	p		5699365	0					
ANR	5700990	ReturnStatement	return true ;	362:2:10020:10031	5699365	4	True				
ANR	5700991	Identifier	true		5699365	0					
ANR	5700992	ElseStatement	else		5699365	0					
ANR	5700993	IfStatement	if ( flags & ( 1 << 12 ) )		5699365	0					
ANR	5700994	Condition	flags & ( 1 << 12 )	363:12:10045:10061	5699365	0	True				
ANR	5700995	BitAndExpression	flags & ( 1 << 12 )		5699365	0		&			
ANR	5700996	Identifier	flags		5699365	0					
ANR	5700997	ShiftExpression	1 << 12		5699365	1		<<			
ANR	5700998	PrimaryExpression	1		5699365	0					
ANR	5700999	PrimaryExpression	12		5699365	1					
ANR	5701000	CompoundStatement		243:2:6050:6107	5699365	1					
ANR	5701001	IdentifierDeclStatement	const int len = strlen ( str ) ;	364:2:10074:10102	5699365	0	True				
ANR	5701002	IdentifierDecl	len = strlen ( str )		5699365	0					
ANR	5701003	IdentifierDeclType	const int		5699365	0					
ANR	5701004	Identifier	len		5699365	1					
ANR	5701005	AssignmentExpression	len = strlen ( str )		5699365	2		=			
ANR	5701006	Identifier	len		5699365	0					
ANR	5701007	CallExpression	strlen ( str )		5699365	1					
ANR	5701008	Callee	strlen		5699365	0					
ANR	5701009	Identifier	strlen		5699365	0					
ANR	5701010	ArgumentList	str		5699365	1					
ANR	5701011	Argument	str		5699365	0					
ANR	5701012	Identifier	str		5699365	0					
ANR	5701013	IdentifierDeclStatement	"char * out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 ) ;"	366:2:10215:10272	5699365	1	True				
ANR	5701014	IdentifierDecl	"* out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5699365	0					
ANR	5701015	IdentifierDeclType	char *		5699365	0					
ANR	5701016	Identifier	out		5699365	1					
ANR	5701017	AssignmentExpression	"* out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5699365	2		=			
ANR	5701018	Identifier	out		5699365	0					
ANR	5701019	CallExpression	"calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5699365	1					
ANR	5701020	Callee	calloc		5699365	0					
ANR	5701021	Identifier	calloc		5699365	0					
ANR	5701022	ArgumentList	sizeof ( char )		5699365	1					
ANR	5701023	Argument	sizeof ( char )		5699365	0					
ANR	5701024	SizeofExpression	sizeof ( char )		5699365	0					
ANR	5701025	Sizeof	sizeof		5699365	0					
ANR	5701026	SizeofOperand	char		5699365	1					
ANR	5701027	Argument	( len + 2 ) / 3 * 4 + 1		5699365	1					
ANR	5701028	AdditiveExpression	( len + 2 ) / 3 * 4 + 1		5699365	0		+			
ANR	5701029	MultiplicativeExpression	( len + 2 ) / 3 * 4		5699365	0		/			
ANR	5701030	AdditiveExpression	len + 2		5699365	0		+			
ANR	5701031	Identifier	len		5699365	0					
ANR	5701032	PrimaryExpression	2		5699365	1					
ANR	5701033	MultiplicativeExpression	3 * 4		5699365	1		*			
ANR	5701034	PrimaryExpression	3		5699365	0					
ANR	5701035	PrimaryExpression	4		5699365	1					
ANR	5701036	PrimaryExpression	1		5699365	1					
ANR	5701037	IfStatement	if ( out )		5699365	2					
ANR	5701038	Condition	out	367:6:10312:10314	5699365	0	True				
ANR	5701039	Identifier	out		5699365	0					
ANR	5701040	CompoundStatement		244:11:6152:6152	5699365	1					
ANR	5701041	ExpressionStatement	"r_base64_encode ( out , ( const ut8 * ) str , len )"	368:3:10322:10367	5699365	0	True				
ANR	5701042	CallExpression	"r_base64_encode ( out , ( const ut8 * ) str , len )"		5699365	0					
ANR	5701043	Callee	r_base64_encode		5699365	0					
ANR	5701044	Identifier	r_base64_encode		5699365	0					
ANR	5701045	ArgumentList	out		5699365	1					
ANR	5701046	Argument	out		5699365	0					
ANR	5701047	Identifier	out		5699365	0					
ANR	5701048	Argument	( const ut8 * ) str		5699365	1					
ANR	5701049	CastExpression	( const ut8 * ) str		5699365	0					
ANR	5701050	CastTarget	const ut8 *		5699365	0					
ANR	5701051	Identifier	str		5699365	1					
ANR	5701052	Argument	len		5699365	2					
ANR	5701053	Identifier	len		5699365	0					
ANR	5701054	ExpressionStatement	"printf ( ""%s%s"" , out , nl )"	369:3:10372:10396	5699365	1	True				
ANR	5701055	CallExpression	"printf ( ""%s%s"" , out , nl )"		5699365	0					
ANR	5701056	Callee	printf		5699365	0					
ANR	5701057	Identifier	printf		5699365	0					
ANR	5701058	ArgumentList	"""%s%s"""		5699365	1					
ANR	5701059	Argument	"""%s%s"""		5699365	0					
ANR	5701060	PrimaryExpression	"""%s%s"""		5699365	0					
ANR	5701061	Argument	out		5699365	1					
ANR	5701062	Identifier	out		5699365	0					
ANR	5701063	Argument	nl		5699365	2					
ANR	5701064	Identifier	nl		5699365	0					
ANR	5701065	ExpressionStatement	fflush ( stdout )	370:3:10401:10416	5699365	2	True				
ANR	5701066	CallExpression	fflush ( stdout )		5699365	0					
ANR	5701067	Callee	fflush		5699365	0					
ANR	5701068	Identifier	fflush		5699365	0					
ANR	5701069	ArgumentList	stdout		5699365	1					
ANR	5701070	Argument	stdout		5699365	0					
ANR	5701071	Identifier	stdout		5699365	0					
ANR	5701072	ExpressionStatement	free ( out )	371:3:10421:10431	5699365	3	True				
ANR	5701073	CallExpression	free ( out )		5699365	0					
ANR	5701074	Callee	free		5699365	0					
ANR	5701075	Identifier	free		5699365	0					
ANR	5701076	ArgumentList	out		5699365	1					
ANR	5701077	Argument	out		5699365	0					
ANR	5701078	Identifier	out		5699365	0					
ANR	5701079	ReturnStatement	return true ;	373:2:10439:10450	5699365	3	True				
ANR	5701080	Identifier	true		5699365	0					
ANR	5701081	ElseStatement	else		5699365	0					
ANR	5701082	IfStatement	if ( flags & ( 1 << 13 ) )		5699365	0					
ANR	5701083	Condition	flags & ( 1 << 13 )	374:12:10464:10480	5699365	0	True				
ANR	5701084	BitAndExpression	flags & ( 1 << 13 )		5699365	0		&			
ANR	5701085	Identifier	flags		5699365	0					
ANR	5701086	ShiftExpression	1 << 13		5699365	1		<<			
ANR	5701087	PrimaryExpression	1		5699365	0					
ANR	5701088	PrimaryExpression	13		5699365	1					
ANR	5701089	CompoundStatement		253:2:6360:6409	5699365	1					
ANR	5701090	IdentifierDeclStatement	const int len = strlen ( str ) ;	375:2:10493:10521	5699365	0	True				
ANR	5701091	IdentifierDecl	len = strlen ( str )		5699365	0					
ANR	5701092	IdentifierDeclType	const int		5699365	0					
ANR	5701093	Identifier	len		5699365	1					
ANR	5701094	AssignmentExpression	len = strlen ( str )		5699365	2		=			
ANR	5701095	Identifier	len		5699365	0					
ANR	5701096	CallExpression	strlen ( str )		5699365	1					
ANR	5701097	Callee	strlen		5699365	0					
ANR	5701098	Identifier	strlen		5699365	0					
ANR	5701099	ArgumentList	str		5699365	1					
ANR	5701100	Argument	str		5699365	0					
ANR	5701101	Identifier	str		5699365	0					
ANR	5701102	IdentifierDeclStatement	"ut8 * out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 ) ;"	376:2:10525:10574	5699365	1	True				
ANR	5701103	IdentifierDecl	"* out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5699365	0					
ANR	5701104	IdentifierDeclType	ut8 *		5699365	0					
ANR	5701105	Identifier	out		5699365	1					
ANR	5701106	AssignmentExpression	"* out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5699365	2		=			
ANR	5701107	Identifier	out		5699365	0					
ANR	5701108	CallExpression	"calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5699365	1					
ANR	5701109	Callee	calloc		5699365	0					
ANR	5701110	Identifier	calloc		5699365	0					
ANR	5701111	ArgumentList	sizeof ( ut8 )		5699365	1					
ANR	5701112	Argument	sizeof ( ut8 )		5699365	0					
ANR	5701113	SizeofExpression	sizeof ( ut8 )		5699365	0					
ANR	5701114	Sizeof	sizeof		5699365	0					
ANR	5701115	SizeofOperand	ut8		5699365	1					
ANR	5701116	Argument	len / 4 * 3 + 1		5699365	1					
ANR	5701117	AdditiveExpression	len / 4 * 3 + 1		5699365	0		+			
ANR	5701118	MultiplicativeExpression	len / 4 * 3		5699365	0		/			
ANR	5701119	Identifier	len		5699365	0					
ANR	5701120	MultiplicativeExpression	4 * 3		5699365	1		*			
ANR	5701121	PrimaryExpression	4		5699365	0					
ANR	5701122	PrimaryExpression	3		5699365	1					
ANR	5701123	PrimaryExpression	1		5699365	1					
ANR	5701124	IfStatement	if ( out )		5699365	2					
ANR	5701125	Condition	out	377:6:10582:10584	5699365	0	True				
ANR	5701126	Identifier	out		5699365	0					
ANR	5701127	CompoundStatement		254:11:6422:6422	5699365	1					
ANR	5701128	ExpressionStatement	"r_base64_decode ( out , str , len )"	378:3:10592:10623	5699365	0	True				
ANR	5701129	CallExpression	"r_base64_decode ( out , str , len )"		5699365	0					
ANR	5701130	Callee	r_base64_decode		5699365	0					
ANR	5701131	Identifier	r_base64_decode		5699365	0					
ANR	5701132	ArgumentList	out		5699365	1					
ANR	5701133	Argument	out		5699365	0					
ANR	5701134	Identifier	out		5699365	0					
ANR	5701135	Argument	str		5699365	1					
ANR	5701136	Identifier	str		5699365	0					
ANR	5701137	Argument	len		5699365	2					
ANR	5701138	Identifier	len		5699365	0					
ANR	5701139	ExpressionStatement	"printf ( ""%s%s"" , out , nl )"	379:3:10628:10652	5699365	1	True				
ANR	5701140	CallExpression	"printf ( ""%s%s"" , out , nl )"		5699365	0					
ANR	5701141	Callee	printf		5699365	0					
ANR	5701142	Identifier	printf		5699365	0					
ANR	5701143	ArgumentList	"""%s%s"""		5699365	1					
ANR	5701144	Argument	"""%s%s"""		5699365	0					
ANR	5701145	PrimaryExpression	"""%s%s"""		5699365	0					
ANR	5701146	Argument	out		5699365	1					
ANR	5701147	Identifier	out		5699365	0					
ANR	5701148	Argument	nl		5699365	2					
ANR	5701149	Identifier	nl		5699365	0					
ANR	5701150	ExpressionStatement	fflush ( stdout )	380:3:10657:10672	5699365	2	True				
ANR	5701151	CallExpression	fflush ( stdout )		5699365	0					
ANR	5701152	Callee	fflush		5699365	0					
ANR	5701153	Identifier	fflush		5699365	0					
ANR	5701154	ArgumentList	stdout		5699365	1					
ANR	5701155	Argument	stdout		5699365	0					
ANR	5701156	Identifier	stdout		5699365	0					
ANR	5701157	ExpressionStatement	free ( out )	381:3:10677:10687	5699365	3	True				
ANR	5701158	CallExpression	free ( out )		5699365	0					
ANR	5701159	Callee	free		5699365	0					
ANR	5701160	Identifier	free		5699365	0					
ANR	5701161	ArgumentList	out		5699365	1					
ANR	5701162	Argument	out		5699365	0					
ANR	5701163	Identifier	out		5699365	0					
ANR	5701164	ReturnStatement	return true ;	383:2:10695:10706	5699365	3	True				
ANR	5701165	Identifier	true		5699365	0					
ANR	5701166	ElseStatement	else		5699365	0					
ANR	5701167	IfStatement	if ( flags & 1 << 14 )		5699365	0					
ANR	5701168	Condition	flags & 1 << 14	384:12:10720:10734	5699365	0	True				
ANR	5701169	BitAndExpression	flags & 1 << 14		5699365	0		&			
ANR	5701170	Identifier	flags		5699365	0					
ANR	5701171	ShiftExpression	1 << 14		5699365	1		<<			
ANR	5701172	PrimaryExpression	1		5699365	0					
ANR	5701173	PrimaryExpression	14		5699365	1					
ANR	5701174	CompoundStatement		262:2:6582:6614	5699365	1					
ANR	5701175	IdentifierDeclStatement	char * str = r_stdin_slurp ( NULL ) ;	385:2:10747:10779	5699365	0	True				
ANR	5701176	IdentifierDecl	* str = r_stdin_slurp ( NULL )		5699365	0					
ANR	5701177	IdentifierDeclType	char *		5699365	0					
ANR	5701178	Identifier	str		5699365	1					
ANR	5701179	AssignmentExpression	* str = r_stdin_slurp ( NULL )		5699365	2		=			
ANR	5701180	Identifier	str		5699365	0					
ANR	5701181	CallExpression	r_stdin_slurp ( NULL )		5699365	1					
ANR	5701182	Callee	r_stdin_slurp		5699365	0					
ANR	5701183	Identifier	r_stdin_slurp		5699365	0					
ANR	5701184	ArgumentList	NULL		5699365	1					
ANR	5701185	Argument	NULL		5699365	0					
ANR	5701186	Identifier	NULL		5699365	0					
ANR	5701187	IfStatement	if ( str )		5699365	1					
ANR	5701188	Condition	str	386:6:10787:10789	5699365	0	True				
ANR	5701189	Identifier	str		5699365	0					
ANR	5701190	CompoundStatement		264:3:6632:6665	5699365	1					
ANR	5701191	IdentifierDeclStatement	char * res = r_hex_from_code ( str ) ;	387:3:10797:10830	5699365	0	True				
ANR	5701192	IdentifierDecl	* res = r_hex_from_code ( str )		5699365	0					
ANR	5701193	IdentifierDeclType	char *		5699365	0					
ANR	5701194	Identifier	res		5699365	1					
ANR	5701195	AssignmentExpression	* res = r_hex_from_code ( str )		5699365	2		=			
ANR	5701196	Identifier	res		5699365	0					
ANR	5701197	CallExpression	r_hex_from_code ( str )		5699365	1					
ANR	5701198	Callee	r_hex_from_code		5699365	0					
ANR	5701199	Identifier	r_hex_from_code		5699365	0					
ANR	5701200	ArgumentList	str		5699365	1					
ANR	5701201	Argument	str		5699365	0					
ANR	5701202	Identifier	str		5699365	0					
ANR	5701203	IfStatement	if ( res )		5699365	1					
ANR	5701204	Condition	res	388:7:10839:10841	5699365	0	True				
ANR	5701205	Identifier	res		5699365	0					
ANR	5701206	CompoundStatement		265:12:6679:6679	5699365	1					
ANR	5701207	ExpressionStatement	"printf ( ""%s\\n"" , res )"	389:4:10850:10870	5699365	0	True				
ANR	5701208	CallExpression	"printf ( ""%s\\n"" , res )"		5699365	0					
ANR	5701209	Callee	printf		5699365	0					
ANR	5701210	Identifier	printf		5699365	0					
ANR	5701211	ArgumentList	"""%s\\n"""		5699365	1					
ANR	5701212	Argument	"""%s\\n"""		5699365	0					
ANR	5701213	PrimaryExpression	"""%s\\n"""		5699365	0					
ANR	5701214	Argument	res		5699365	1					
ANR	5701215	Identifier	res		5699365	0					
ANR	5701216	ExpressionStatement	fflush ( stdout )	390:4:10876:10891	5699365	1	True				
ANR	5701217	CallExpression	fflush ( stdout )		5699365	0					
ANR	5701218	Callee	fflush		5699365	0					
ANR	5701219	Identifier	fflush		5699365	0					
ANR	5701220	ArgumentList	stdout		5699365	1					
ANR	5701221	Argument	stdout		5699365	0					
ANR	5701222	Identifier	stdout		5699365	0					
ANR	5701223	ExpressionStatement	free ( res )	391:4:10897:10907	5699365	2	True				
ANR	5701224	CallExpression	free ( res )		5699365	0					
ANR	5701225	Callee	free		5699365	0					
ANR	5701226	Identifier	free		5699365	0					
ANR	5701227	ArgumentList	res		5699365	1					
ANR	5701228	Argument	res		5699365	0					
ANR	5701229	Identifier	res		5699365	0					
ANR	5701230	ElseStatement	else		5699365	0					
ANR	5701231	CompoundStatement		269:10:6754:6754	5699365	0					
ANR	5701232	ExpressionStatement	"eprintf ( ""Invalid input.\\n"" )"	393:4:10925:10953	5699365	0	True				
ANR	5701233	CallExpression	"eprintf ( ""Invalid input.\\n"" )"		5699365	0					
ANR	5701234	Callee	eprintf		5699365	0					
ANR	5701235	Identifier	eprintf		5699365	0					
ANR	5701236	ArgumentList	"""Invalid input.\\n"""		5699365	1					
ANR	5701237	Argument	"""Invalid input.\\n"""		5699365	0					
ANR	5701238	PrimaryExpression	"""Invalid input.\\n"""		5699365	0					
ANR	5701239	ExpressionStatement	free ( str )	395:3:10963:10973	5699365	2	True				
ANR	5701240	CallExpression	free ( str )		5699365	0					
ANR	5701241	Callee	free		5699365	0					
ANR	5701242	Identifier	free		5699365	0					
ANR	5701243	ArgumentList	str		5699365	1					
ANR	5701244	Argument	str		5699365	0					
ANR	5701245	Identifier	str		5699365	0					
ANR	5701246	ReturnStatement	return false ;	397:2:10981:10993	5699365	2	True				
ANR	5701247	Identifier	false		5699365	0					
ANR	5701248	ElseStatement	else		5699365	0					
ANR	5701249	IfStatement	if ( flags & ( 1 << 18 ) )		5699365	0					
ANR	5701250	Condition	flags & ( 1 << 18 )	398:12:11007:11023	5699365	0	True				
ANR	5701251	BitAndExpression	flags & ( 1 << 18 )		5699365	0		&			
ANR	5701252	Identifier	flags		5699365	0					
ANR	5701253	ShiftExpression	1 << 18		5699365	1		<<			
ANR	5701254	PrimaryExpression	1		5699365	0					
ANR	5701255	PrimaryExpression	18		5699365	1					
ANR	5701256	CompoundStatement		281:2:6953:6983	5699365	1					
ANR	5701257	IdentifierDeclStatement	"char * asnum , unit [ 8 ] ;"	399:2:11036:11056	5699365	0	True				
ANR	5701258	IdentifierDecl	* asnum		5699365	0					
ANR	5701259	IdentifierDeclType	char *		5699365	0					
ANR	5701260	Identifier	asnum		5699365	1					
ANR	5701261	IdentifierDecl	unit [ 8 ]		5699365	1					
ANR	5701262	IdentifierDeclType	char [ 8 ]		5699365	0					
ANR	5701263	Identifier	unit		5699365	1					
ANR	5701264	PrimaryExpression	8		5699365	2					
ANR	5701265	IdentifierDeclStatement	char out [ 128 ] ;	400:2:11060:11073	5699365	1	True				
ANR	5701266	IdentifierDecl	out [ 128 ]		5699365	0					
ANR	5701267	IdentifierDeclType	char [ 128 ]		5699365	0					
ANR	5701268	Identifier	out		5699365	1					
ANR	5701269	PrimaryExpression	128		5699365	2					
ANR	5701270	IdentifierDeclStatement	"ut32 n32 , s , a ;"	401:2:11077:11091	5699365	2	True				
ANR	5701271	IdentifierDecl	n32		5699365	0					
ANR	5701272	IdentifierDeclType	ut32		5699365	0					
ANR	5701273	Identifier	n32		5699365	1					
ANR	5701274	IdentifierDecl	s		5699365	1					
ANR	5701275	IdentifierDeclType	ut32		5699365	0					
ANR	5701276	Identifier	s		5699365	1					
ANR	5701277	IdentifierDecl	a		5699365	2					
ANR	5701278	IdentifierDeclType	ut32		5699365	0					
ANR	5701279	Identifier	a		5699365	1					
ANR	5701280	IdentifierDeclStatement	double d ;	402:2:11095:11103	5699365	3	True				
ANR	5701281	IdentifierDecl	d		5699365	0					
ANR	5701282	IdentifierDeclType	double		5699365	0					
ANR	5701283	Identifier	d		5699365	1					
ANR	5701284	IdentifierDeclStatement	float f ;	403:2:11107:11114	5699365	4	True				
ANR	5701285	IdentifierDecl	f		5699365	0					
ANR	5701286	IdentifierDeclType	float		5699365	0					
ANR	5701287	Identifier	f		5699365	1					
ANR	5701288	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	404:2:11118:11148	5699365	5	True				
ANR	5701289	IdentifierDecl	"n = r_num_math ( num , str )"		5699365	0					
ANR	5701290	IdentifierDeclType	ut64		5699365	0					
ANR	5701291	Identifier	n		5699365	1					
ANR	5701292	AssignmentExpression	"n = r_num_math ( num , str )"		5699365	2		=			
ANR	5701293	Identifier	n		5699365	0					
ANR	5701294	CallExpression	"r_num_math ( num , str )"		5699365	1					
ANR	5701295	Callee	r_num_math		5699365	0					
ANR	5701296	Identifier	r_num_math		5699365	0					
ANR	5701297	ArgumentList	num		5699365	1					
ANR	5701298	Argument	num		5699365	0					
ANR	5701299	Identifier	num		5699365	0					
ANR	5701300	Argument	str		5699365	1					
ANR	5701301	Identifier	str		5699365	0					
ANR	5701302	IfStatement	if ( num -> dbz )		5699365	6					
ANR	5701303	Condition	num -> dbz	406:6:11157:11164	5699365	0	True				
ANR	5701304	PtrMemberAccess	num -> dbz		5699365	0					
ANR	5701305	Identifier	num		5699365	0					
ANR	5701306	Identifier	dbz		5699365	1					
ANR	5701307	CompoundStatement		283:16:7002:7002	5699365	1					
ANR	5701308	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	407:3:11172:11214	5699365	0	True				
ANR	5701309	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		5699365	0					
ANR	5701310	Callee	eprintf		5699365	0					
ANR	5701311	Identifier	eprintf		5699365	0					
ANR	5701312	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		5699365	1					
ANR	5701313	Argument	"""RNum ERROR: Division by Zero\\n"""		5699365	0					
ANR	5701314	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		5699365	0					
ANR	5701315	ReturnStatement	return false ;	408:3:11219:11231	5699365	1	True				
ANR	5701316	Identifier	false		5699365	0					
ANR	5701317	ExpressionStatement	n32 = ( ut32 ) ( n & UT32_MAX )	410:2:11239:11266	5699365	7	True				
ANR	5701318	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5699365	0		=			
ANR	5701319	Identifier	n32		5699365	0					
ANR	5701320	CastExpression	( ut32 ) ( n & UT32_MAX )		5699365	1					
ANR	5701321	CastTarget	ut32		5699365	0					
ANR	5701322	BitAndExpression	n & UT32_MAX		5699365	1		&			
ANR	5701323	Identifier	n		5699365	0					
ANR	5701324	Identifier	UT32_MAX		5699365	1					
ANR	5701325	ExpressionStatement	"asnum = r_num_as_string ( NULL , n , false )"	411:2:11270:11310	5699365	8	True				
ANR	5701326	AssignmentExpression	"asnum = r_num_as_string ( NULL , n , false )"		5699365	0		=			
ANR	5701327	Identifier	asnum		5699365	0					
ANR	5701328	CallExpression	"r_num_as_string ( NULL , n , false )"		5699365	1					
ANR	5701329	Callee	r_num_as_string		5699365	0					
ANR	5701330	Identifier	r_num_as_string		5699365	0					
ANR	5701331	ArgumentList	NULL		5699365	1					
ANR	5701332	Argument	NULL		5699365	0					
ANR	5701333	Identifier	NULL		5699365	0					
ANR	5701334	Argument	n		5699365	1					
ANR	5701335	Identifier	n		5699365	0					
ANR	5701336	Argument	false		5699365	2					
ANR	5701337	Identifier	false		5699365	0					
ANR	5701338	ExpressionStatement	"memcpy ( & f , & n32 , sizeof ( f ) )"	412:2:11314:11343	5699365	9	True				
ANR	5701339	CallExpression	"memcpy ( & f , & n32 , sizeof ( f ) )"		5699365	0					
ANR	5701340	Callee	memcpy		5699365	0					
ANR	5701341	Identifier	memcpy		5699365	0					
ANR	5701342	ArgumentList	& f		5699365	1					
ANR	5701343	Argument	& f		5699365	0					
ANR	5701344	UnaryOperationExpression	& f		5699365	0					
ANR	5701345	UnaryOperator	&		5699365	0					
ANR	5701346	Identifier	f		5699365	1					
ANR	5701347	Argument	& n32		5699365	1					
ANR	5701348	UnaryOperationExpression	& n32		5699365	0					
ANR	5701349	UnaryOperator	&		5699365	0					
ANR	5701350	Identifier	n32		5699365	1					
ANR	5701351	Argument	sizeof ( f )		5699365	2					
ANR	5701352	SizeofExpression	sizeof ( f )		5699365	0					
ANR	5701353	Sizeof	sizeof		5699365	0					
ANR	5701354	SizeofOperand	f		5699365	1					
ANR	5701355	ExpressionStatement	"memcpy ( & d , & n , sizeof ( d ) )"	413:2:11347:11374	5699365	10	True				
ANR	5701356	CallExpression	"memcpy ( & d , & n , sizeof ( d ) )"		5699365	0					
ANR	5701357	Callee	memcpy		5699365	0					
ANR	5701358	Identifier	memcpy		5699365	0					
ANR	5701359	ArgumentList	& d		5699365	1					
ANR	5701360	Argument	& d		5699365	0					
ANR	5701361	UnaryOperationExpression	& d		5699365	0					
ANR	5701362	UnaryOperator	&		5699365	0					
ANR	5701363	Identifier	d		5699365	1					
ANR	5701364	Argument	& n		5699365	1					
ANR	5701365	UnaryOperationExpression	& n		5699365	0					
ANR	5701366	UnaryOperator	&		5699365	0					
ANR	5701367	Identifier	n		5699365	1					
ANR	5701368	Argument	sizeof ( d )		5699365	2					
ANR	5701369	SizeofExpression	sizeof ( d )		5699365	0					
ANR	5701370	Sizeof	sizeof		5699365	0					
ANR	5701371	SizeofOperand	d		5699365	1					
ANR	5701372	ExpressionStatement	s = n >> 16 << 12	416:2:11408:11425	5699365	11	True				
ANR	5701373	AssignmentExpression	s = n >> 16 << 12		5699365	0		=			
ANR	5701374	Identifier	s		5699365	0					
ANR	5701375	ShiftExpression	n >> 16 << 12		5699365	1		>>			
ANR	5701376	Identifier	n		5699365	0					
ANR	5701377	ShiftExpression	16 << 12		5699365	1		<<			
ANR	5701378	PrimaryExpression	16		5699365	0					
ANR	5701379	PrimaryExpression	12		5699365	1					
ANR	5701380	ExpressionStatement	a = n & 0x0fff	417:2:11429:11443	5699365	12	True				
ANR	5701381	AssignmentExpression	a = n & 0x0fff		5699365	0		=			
ANR	5701382	Identifier	a		5699365	0					
ANR	5701383	BitAndExpression	n & 0x0fff		5699365	1		&			
ANR	5701384	Identifier	n		5699365	0					
ANR	5701385	PrimaryExpression	0x0fff		5699365	1					
ANR	5701386	ExpressionStatement	"r_num_units ( unit , sizeof ( unit ) , n )"	418:2:11447:11483	5699365	13	True				
ANR	5701387	CallExpression	"r_num_units ( unit , sizeof ( unit ) , n )"		5699365	0					
ANR	5701388	Callee	r_num_units		5699365	0					
ANR	5701389	Identifier	r_num_units		5699365	0					
ANR	5701390	ArgumentList	unit		5699365	1					
ANR	5701391	Argument	unit		5699365	0					
ANR	5701392	Identifier	unit		5699365	0					
ANR	5701393	Argument	sizeof ( unit )		5699365	1					
ANR	5701394	SizeofExpression	sizeof ( unit )		5699365	0					
ANR	5701395	Sizeof	sizeof		5699365	0					
ANR	5701396	SizeofOperand	unit		5699365	1					
ANR	5701397	Argument	n		5699365	2					
ANR	5701398	Identifier	n		5699365	0					
ANR	5701399	Statement	eprintf	420:2:11493:11499	5699365	14	True				
ANR	5701400	Statement	(	420:10:11501:11501	5699365	15	True				
ANR	5701401	Statement	"""%"""	420:11:11502:11504	5699365	16	True				
ANR	5701402	Statement	PFMT64d	420:15:11506:11512	5699365	17	True				
ANR	5701403	Statement	""" 0x%"""	420:23:11514:11519	5699365	18	True				
ANR	5701404	Statement	PFMT64x	420:30:11521:11527	5699365	19	True				
ANR	5701405	Statement	""" 0%"""	420:38:11529:11533	5699365	20	True				
ANR	5701406	Statement	PFMT64o	420:44:11535:11541	5699365	21	True				
ANR	5701407	Statement	""" %s %04x:%04x """	421:3:11546:11561	5699365	22	True				
ANR	5701408	Statement	","	421:19:11562:11562	5699365	23	True				
ANR	5701409	Statement	n	422:3:11567:11567	5699365	24	True				
ANR	5701410	Statement	","	422:4:11568:11568	5699365	25	True				
ANR	5701411	Statement	n	422:6:11570:11570	5699365	26	True				
ANR	5701412	Statement	","	422:7:11571:11571	5699365	27	True				
ANR	5701413	Statement	n	422:9:11573:11573	5699365	28	True				
ANR	5701414	Statement	","	422:10:11574:11574	5699365	29	True				
ANR	5701415	Statement	unit	422:12:11576:11579	5699365	30	True				
ANR	5701416	Statement	","	422:16:11580:11580	5699365	31	True				
ANR	5701417	Statement	s	422:18:11582:11582	5699365	32	True				
ANR	5701418	Statement	","	422:19:11583:11583	5699365	33	True				
ANR	5701419	Statement	a	422:21:11585:11585	5699365	34	True				
ANR	5701420	Statement	)	422:22:11586:11586	5699365	35	True				
ANR	5701421	ExpressionStatement		422:23:11587:11587	5699365	36	True				
ANR	5701422	IfStatement	if ( n >> 32 )		5699365	37					
ANR	5701423	Condition	n >> 32	424:6:11596:11602	5699365	0	True				
ANR	5701424	ShiftExpression	n >> 32		5699365	0		>>			
ANR	5701425	Identifier	n		5699365	0					
ANR	5701426	PrimaryExpression	32		5699365	1					
ANR	5701427	CompoundStatement		301:15:7440:7440	5699365	1					
ANR	5701428	Statement	eprintf	425:3:11610:11616	5699365	0	True				
ANR	5701429	Statement	(	425:11:11618:11618	5699365	1	True				
ANR	5701430	Statement	"""%"""	425:12:11619:11621	5699365	2	True				
ANR	5701431	Statement	PFMT64d	425:16:11623:11629	5699365	3	True				
ANR	5701432	Statement	""" """	425:24:11631:11633	5699365	4	True				
ANR	5701433	Statement	","	425:27:11634:11634	5699365	5	True				
ANR	5701434	Statement	(	425:29:11636:11636	5699365	6	True				
ANR	5701435	Statement	st64	425:30:11637:11640	5699365	7	True				
ANR	5701436	Statement	)	425:34:11641:11641	5699365	8	True				
ANR	5701437	Statement	n	425:36:11643:11643	5699365	9	True				
ANR	5701438	Statement	)	425:37:11644:11644	5699365	10	True				
ANR	5701439	ExpressionStatement		425:38:11645:11645	5699365	11	True				
ANR	5701440	ElseStatement	else		5699365	0					
ANR	5701441	CompoundStatement		303:9:7491:7491	5699365	0					
ANR	5701442	ExpressionStatement	"eprintf ( ""%d "" , ( st32 ) n )"	427:3:11661:11686	5699365	0	True				
ANR	5701443	CallExpression	"eprintf ( ""%d "" , ( st32 ) n )"		5699365	0					
ANR	5701444	Callee	eprintf		5699365	0					
ANR	5701445	Identifier	eprintf		5699365	0					
ANR	5701446	ArgumentList	"""%d """		5699365	1					
ANR	5701447	Argument	"""%d """		5699365	0					
ANR	5701448	PrimaryExpression	"""%d """		5699365	0					
ANR	5701449	Argument	( st32 ) n		5699365	1					
ANR	5701450	CastExpression	( st32 ) n		5699365	0					
ANR	5701451	CastTarget	st32		5699365	0					
ANR	5701452	Identifier	n		5699365	1					
ANR	5701453	IfStatement	if ( asnum )		5699365	38					
ANR	5701454	Condition	asnum	429:6:11698:11702	5699365	0	True				
ANR	5701455	Identifier	asnum		5699365	0					
ANR	5701456	CompoundStatement		306:13:7540:7540	5699365	1					
ANR	5701457	ExpressionStatement	"eprintf ( ""\\""%s\\"" "" , asnum )"	430:3:11710:11736	5699365	0	True				
ANR	5701458	CallExpression	"eprintf ( ""\\""%s\\"" "" , asnum )"		5699365	0					
ANR	5701459	Callee	eprintf		5699365	0					
ANR	5701460	Identifier	eprintf		5699365	0					
ANR	5701461	ArgumentList	"""\\""%s\\"" """		5699365	1					
ANR	5701462	Argument	"""\\""%s\\"" """		5699365	0					
ANR	5701463	PrimaryExpression	"""\\""%s\\"" """		5699365	0					
ANR	5701464	Argument	asnum		5699365	1					
ANR	5701465	Identifier	asnum		5699365	0					
ANR	5701466	ExpressionStatement	free ( asnum )	431:3:11741:11753	5699365	1	True				
ANR	5701467	CallExpression	free ( asnum )		5699365	0					
ANR	5701468	Callee	free		5699365	0					
ANR	5701469	Identifier	free		5699365	0					
ANR	5701470	ArgumentList	asnum		5699365	1					
ANR	5701471	Argument	asnum		5699365	0					
ANR	5701472	Identifier	asnum		5699365	0					
ANR	5701473	ExpressionStatement	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) , NULL )"	434:2:11795:11847	5699365	39	True				
ANR	5701474	CallExpression	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) , NULL )"		5699365	0					
ANR	5701475	Callee	r_str_bits		5699365	0					
ANR	5701476	Identifier	r_str_bits		5699365	0					
ANR	5701477	ArgumentList	out		5699365	1					
ANR	5701478	Argument	out		5699365	0					
ANR	5701479	Identifier	out		5699365	0					
ANR	5701480	Argument	( const ut8 * ) & n		5699365	1					
ANR	5701481	CastExpression	( const ut8 * ) & n		5699365	0					
ANR	5701482	CastTarget	const ut8 *		5699365	0					
ANR	5701483	UnaryOperationExpression	& n		5699365	1					
ANR	5701484	UnaryOperator	&		5699365	0					
ANR	5701485	Identifier	n		5699365	1					
ANR	5701486	Argument	sizeof ( n )		5699365	2					
ANR	5701487	SizeofExpression	sizeof ( n )		5699365	0					
ANR	5701488	Sizeof	sizeof		5699365	0					
ANR	5701489	SizeofOperand	n		5699365	1					
ANR	5701490	Argument	NULL		5699365	3					
ANR	5701491	Identifier	NULL		5699365	0					
ANR	5701492	ExpressionStatement	"eprintf ( ""%s %.01lf %ff %lf\\n"" , out , num -> fvalue , f , d )"	435:2:11851:11909	5699365	40	True				
ANR	5701493	CallExpression	"eprintf ( ""%s %.01lf %ff %lf\\n"" , out , num -> fvalue , f , d )"		5699365	0					
ANR	5701494	Callee	eprintf		5699365	0					
ANR	5701495	Identifier	eprintf		5699365	0					
ANR	5701496	ArgumentList	"""%s %.01lf %ff %lf\\n"""		5699365	1					
ANR	5701497	Argument	"""%s %.01lf %ff %lf\\n"""		5699365	0					
ANR	5701498	PrimaryExpression	"""%s %.01lf %ff %lf\\n"""		5699365	0					
ANR	5701499	Argument	out		5699365	1					
ANR	5701500	Identifier	out		5699365	0					
ANR	5701501	Argument	num -> fvalue		5699365	2					
ANR	5701502	PtrMemberAccess	num -> fvalue		5699365	0					
ANR	5701503	Identifier	num		5699365	0					
ANR	5701504	Identifier	fvalue		5699365	1					
ANR	5701505	Argument	f		5699365	3					
ANR	5701506	Identifier	f		5699365	0					
ANR	5701507	Argument	d		5699365	4					
ANR	5701508	Identifier	d		5699365	0					
ANR	5701509	Statement	printf	438:4:11922:11927	5699365	41	True				
ANR	5701510	Statement	(	438:11:11929:11929	5699365	42	True				
ANR	5701511	Statement	"""hex     0x%"""	438:12:11930:11942	5699365	43	True				
ANR	5701512	Statement	PFMT64x	438:25:11943:11949	5699365	44	True				
ANR	5701513	Statement	"""\\n"""	438:32:11950:11953	5699365	45	True				
ANR	5701514	Statement	","	438:36:11954:11954	5699365	46	True				
ANR	5701515	Statement	n	438:38:11956:11956	5699365	47	True				
ANR	5701516	Statement	)	438:39:11957:11957	5699365	48	True				
ANR	5701517	ExpressionStatement		438:40:11958:11958	5699365	49	True				
ANR	5701518	Statement	printf	439:4:11964:11969	5699365	50	True				
ANR	5701519	Statement	(	439:11:11971:11971	5699365	51	True				
ANR	5701520	Statement	"""octal   0%"""	439:12:11972:11983	5699365	52	True				
ANR	5701521	Statement	PFMT64o	439:24:11984:11990	5699365	53	True				
ANR	5701522	Statement	"""\\n"""	439:31:11991:11994	5699365	54	True				
ANR	5701523	Statement	","	439:35:11995:11995	5699365	55	True				
ANR	5701524	Statement	n	439:37:11997:11997	5699365	56	True				
ANR	5701525	Statement	)	439:38:11998:11998	5699365	57	True				
ANR	5701526	ExpressionStatement		439:39:11999:11999	5699365	58	True				
ANR	5701527	ExpressionStatement	"printf ( ""unit    %s\\n"" , unit )"	440:4:12005:12034	5699365	59	True				
ANR	5701528	CallExpression	"printf ( ""unit    %s\\n"" , unit )"		5699365	0					
ANR	5701529	Callee	printf		5699365	0					
ANR	5701530	Identifier	printf		5699365	0					
ANR	5701531	ArgumentList	"""unit    %s\\n"""		5699365	1					
ANR	5701532	Argument	"""unit    %s\\n"""		5699365	0					
ANR	5701533	PrimaryExpression	"""unit    %s\\n"""		5699365	0					
ANR	5701534	Argument	unit		5699365	1					
ANR	5701535	Identifier	unit		5699365	0					
ANR	5701536	ExpressionStatement	"printf ( ""segment %04x:%04x\\n"" , s , a )"	441:4:12040:12076	5699365	60	True				
ANR	5701537	CallExpression	"printf ( ""segment %04x:%04x\\n"" , s , a )"		5699365	0					
ANR	5701538	Callee	printf		5699365	0					
ANR	5701539	Identifier	printf		5699365	0					
ANR	5701540	ArgumentList	"""segment %04x:%04x\\n"""		5699365	1					
ANR	5701541	Argument	"""segment %04x:%04x\\n"""		5699365	0					
ANR	5701542	PrimaryExpression	"""segment %04x:%04x\\n"""		5699365	0					
ANR	5701543	Argument	s		5699365	1					
ANR	5701544	Identifier	s		5699365	0					
ANR	5701545	Argument	a		5699365	2					
ANR	5701546	Identifier	a		5699365	0					
ANR	5701547	IfStatement	if ( n >> 32 )		5699365	61					
ANR	5701548	Condition	n >> 32	442:8:12086:12092	5699365	0	True				
ANR	5701549	ShiftExpression	n >> 32		5699365	0		>>			
ANR	5701550	Identifier	n		5699365	0					
ANR	5701551	PrimaryExpression	32		5699365	1					
ANR	5701552	CompoundStatement		319:17:7930:7930	5699365	1					
ANR	5701553	Statement	printf	443:5:12102:12107	5699365	0	True				
ANR	5701554	Statement	(	443:12:12109:12109	5699365	1	True				
ANR	5701555	Statement	"""int64   %"""	443:13:12110:12120	5699365	2	True				
ANR	5701556	Statement	PFMT64d	443:24:12121:12127	5699365	3	True				
ANR	5701557	Statement	"""\\n"""	443:31:12128:12131	5699365	4	True				
ANR	5701558	Statement	","	443:35:12132:12132	5699365	5	True				
ANR	5701559	Statement	(	443:37:12134:12134	5699365	6	True				
ANR	5701560	Statement	st64	443:38:12135:12138	5699365	7	True				
ANR	5701561	Statement	)	443:42:12139:12139	5699365	8	True				
ANR	5701562	Statement	n	443:43:12140:12140	5699365	9	True				
ANR	5701563	Statement	)	443:44:12141:12141	5699365	10	True				
ANR	5701564	ExpressionStatement		443:45:12142:12142	5699365	11	True				
ANR	5701565	ElseStatement	else		5699365	0					
ANR	5701566	CompoundStatement		321:11:7990:7990	5699365	0					
ANR	5701567	ExpressionStatement	"printf ( ""int32   %d\\n"" , ( st32 ) n )"	445:5:12162:12194	5699365	0	True				
ANR	5701568	CallExpression	"printf ( ""int32   %d\\n"" , ( st32 ) n )"		5699365	0					
ANR	5701569	Callee	printf		5699365	0					
ANR	5701570	Identifier	printf		5699365	0					
ANR	5701571	ArgumentList	"""int32   %d\\n"""		5699365	1					
ANR	5701572	Argument	"""int32   %d\\n"""		5699365	0					
ANR	5701573	PrimaryExpression	"""int32   %d\\n"""		5699365	0					
ANR	5701574	Argument	( st32 ) n		5699365	1					
ANR	5701575	CastExpression	( st32 ) n		5699365	0					
ANR	5701576	CastTarget	st32		5699365	0					
ANR	5701577	Identifier	n		5699365	1					
ANR	5701578	IfStatement	if ( asnum )		5699365	62					
ANR	5701579	Condition	asnum	447:8:12210:12214	5699365	0	True				
ANR	5701580	Identifier	asnum		5699365	0					
ANR	5701581	CompoundStatement		324:15:8052:8052	5699365	1					
ANR	5701582	ExpressionStatement	"printf ( ""string  \\""%s\\""\\n"" , asnum )"	448:5:12224:12258	5699365	0	True				
ANR	5701583	CallExpression	"printf ( ""string  \\""%s\\""\\n"" , asnum )"		5699365	0					
ANR	5701584	Callee	printf		5699365	0					
ANR	5701585	Identifier	printf		5699365	0					
ANR	5701586	ArgumentList	"""string  \\""%s\\""\\n"""		5699365	1					
ANR	5701587	Argument	"""string  \\""%s\\""\\n"""		5699365	0					
ANR	5701588	PrimaryExpression	"""string  \\""%s\\""\\n"""		5699365	0					
ANR	5701589	Argument	asnum		5699365	1					
ANR	5701590	Identifier	asnum		5699365	0					
ANR	5701591	ExpressionStatement	free ( asnum )	449:5:12265:12277	5699365	1	True				
ANR	5701592	CallExpression	free ( asnum )		5699365	0					
ANR	5701593	Callee	free		5699365	0					
ANR	5701594	Identifier	free		5699365	0					
ANR	5701595	ArgumentList	asnum		5699365	1					
ANR	5701596	Argument	asnum		5699365	0					
ANR	5701597	Identifier	asnum		5699365	0					
ANR	5701598	ExpressionStatement	"r_str_bits64 ( out , n )"	452:4:12325:12346	5699365	63	True				
ANR	5701599	CallExpression	"r_str_bits64 ( out , n )"		5699365	0					
ANR	5701600	Callee	r_str_bits64		5699365	0					
ANR	5701601	Identifier	r_str_bits64		5699365	0					
ANR	5701602	ArgumentList	out		5699365	1					
ANR	5701603	Argument	out		5699365	0					
ANR	5701604	Identifier	out		5699365	0					
ANR	5701605	Argument	n		5699365	1					
ANR	5701606	Identifier	n		5699365	0					
ANR	5701607	ExpressionStatement	"memcpy ( & f , & n , sizeof ( f ) )"	453:4:12352:12379	5699365	64	True				
ANR	5701608	CallExpression	"memcpy ( & f , & n , sizeof ( f ) )"		5699365	0					
ANR	5701609	Callee	memcpy		5699365	0					
ANR	5701610	Identifier	memcpy		5699365	0					
ANR	5701611	ArgumentList	& f		5699365	1					
ANR	5701612	Argument	& f		5699365	0					
ANR	5701613	UnaryOperationExpression	& f		5699365	0					
ANR	5701614	UnaryOperator	&		5699365	0					
ANR	5701615	Identifier	f		5699365	1					
ANR	5701616	Argument	& n		5699365	1					
ANR	5701617	UnaryOperationExpression	& n		5699365	0					
ANR	5701618	UnaryOperator	&		5699365	0					
ANR	5701619	Identifier	n		5699365	1					
ANR	5701620	Argument	sizeof ( f )		5699365	2					
ANR	5701621	SizeofExpression	sizeof ( f )		5699365	0					
ANR	5701622	Sizeof	sizeof		5699365	0					
ANR	5701623	SizeofOperand	f		5699365	1					
ANR	5701624	ExpressionStatement	"memcpy ( & d , & n , sizeof ( d ) )"	454:4:12385:12412	5699365	65	True				
ANR	5701625	CallExpression	"memcpy ( & d , & n , sizeof ( d ) )"		5699365	0					
ANR	5701626	Callee	memcpy		5699365	0					
ANR	5701627	Identifier	memcpy		5699365	0					
ANR	5701628	ArgumentList	& d		5699365	1					
ANR	5701629	Argument	& d		5699365	0					
ANR	5701630	UnaryOperationExpression	& d		5699365	0					
ANR	5701631	UnaryOperator	&		5699365	0					
ANR	5701632	Identifier	d		5699365	1					
ANR	5701633	Argument	& n		5699365	1					
ANR	5701634	UnaryOperationExpression	& n		5699365	0					
ANR	5701635	UnaryOperator	&		5699365	0					
ANR	5701636	Identifier	n		5699365	1					
ANR	5701637	Argument	sizeof ( d )		5699365	2					
ANR	5701638	SizeofExpression	sizeof ( d )		5699365	0					
ANR	5701639	Sizeof	sizeof		5699365	0					
ANR	5701640	SizeofOperand	d		5699365	1					
ANR	5701641	ExpressionStatement	"printf ( ""binary  0b%s\\n"" , out )"	455:4:12418:12448	5699365	66	True				
ANR	5701642	CallExpression	"printf ( ""binary  0b%s\\n"" , out )"		5699365	0					
ANR	5701643	Callee	printf		5699365	0					
ANR	5701644	Identifier	printf		5699365	0					
ANR	5701645	ArgumentList	"""binary  0b%s\\n"""		5699365	1					
ANR	5701646	Argument	"""binary  0b%s\\n"""		5699365	0					
ANR	5701647	PrimaryExpression	"""binary  0b%s\\n"""		5699365	0					
ANR	5701648	Argument	out		5699365	1					
ANR	5701649	Identifier	out		5699365	0					
ANR	5701650	ExpressionStatement	"printf ( ""float:  %ff\\n"" , f )"	456:4:12454:12481	5699365	67	True				
ANR	5701651	CallExpression	"printf ( ""float:  %ff\\n"" , f )"		5699365	0					
ANR	5701652	Callee	printf		5699365	0					
ANR	5701653	Identifier	printf		5699365	0					
ANR	5701654	ArgumentList	"""float:  %ff\\n"""		5699365	1					
ANR	5701655	Argument	"""float:  %ff\\n"""		5699365	0					
ANR	5701656	PrimaryExpression	"""float:  %ff\\n"""		5699365	0					
ANR	5701657	Argument	f		5699365	1					
ANR	5701658	Identifier	f		5699365	0					
ANR	5701659	ExpressionStatement	"printf ( ""double: %lf\\n"" , d )"	457:4:12487:12514	5699365	68	True				
ANR	5701660	CallExpression	"printf ( ""double: %lf\\n"" , d )"		5699365	0					
ANR	5701661	Callee	printf		5699365	0					
ANR	5701662	Identifier	printf		5699365	0					
ANR	5701663	ArgumentList	"""double: %lf\\n"""		5699365	1					
ANR	5701664	Argument	"""double: %lf\\n"""		5699365	0					
ANR	5701665	PrimaryExpression	"""double: %lf\\n"""		5699365	0					
ANR	5701666	Argument	d		5699365	1					
ANR	5701667	Identifier	d		5699365	0					
ANR	5701668	ExpressionStatement	"r_num_to_trits ( out , n )"	460:4:12539:12562	5699365	69	True				
ANR	5701669	CallExpression	"r_num_to_trits ( out , n )"		5699365	0					
ANR	5701670	Callee	r_num_to_trits		5699365	0					
ANR	5701671	Identifier	r_num_to_trits		5699365	0					
ANR	5701672	ArgumentList	out		5699365	1					
ANR	5701673	Argument	out		5699365	0					
ANR	5701674	Identifier	out		5699365	0					
ANR	5701675	Argument	n		5699365	1					
ANR	5701676	Identifier	n		5699365	0					
ANR	5701677	ExpressionStatement	"printf ( ""trits   0t%s\\n"" , out )"	461:4:12568:12598	5699365	70	True				
ANR	5701678	CallExpression	"printf ( ""trits   0t%s\\n"" , out )"		5699365	0					
ANR	5701679	Callee	printf		5699365	0					
ANR	5701680	Identifier	printf		5699365	0					
ANR	5701681	ArgumentList	"""trits   0t%s\\n"""		5699365	1					
ANR	5701682	Argument	"""trits   0t%s\\n"""		5699365	0					
ANR	5701683	PrimaryExpression	"""trits   0t%s\\n"""		5699365	0					
ANR	5701684	Argument	out		5699365	1					
ANR	5701685	Identifier	out		5699365	0					
ANR	5701686	ReturnStatement	return true ;	463:2:12603:12614	5699365	71	True				
ANR	5701687	Identifier	true		5699365	0					
ANR	5701688	ElseStatement	else		5699365	0					
ANR	5701689	IfStatement	if ( flags & ( 1 << 19 ) )		5699365	0					
ANR	5701690	Condition	flags & ( 1 << 19 )	464:12:12628:12644	5699365	0	True				
ANR	5701691	BitAndExpression	flags & ( 1 << 19 )		5699365	0		&			
ANR	5701692	Identifier	flags		5699365	0					
ANR	5701693	ShiftExpression	1 << 19		5699365	1		<<			
ANR	5701694	PrimaryExpression	1		5699365	0					
ANR	5701695	PrimaryExpression	19		5699365	1					
ANR	5701696	CompoundStatement		341:31:8482:8482	5699365	1					
ANR	5701697	ExpressionStatement	"r_print_hex_from_bin ( NULL , str )"	465:2:12657:12689	5699365	0	True				
ANR	5701698	CallExpression	"r_print_hex_from_bin ( NULL , str )"		5699365	0					
ANR	5701699	Callee	r_print_hex_from_bin		5699365	0					
ANR	5701700	Identifier	r_print_hex_from_bin		5699365	0					
ANR	5701701	ArgumentList	NULL		5699365	1					
ANR	5701702	Argument	NULL		5699365	0					
ANR	5701703	Identifier	NULL		5699365	0					
ANR	5701704	Argument	str		5699365	1					
ANR	5701705	Identifier	str		5699365	0					
ANR	5701706	ReturnStatement	return true ;	466:2:12693:12704	5699365	1	True				
ANR	5701707	Identifier	true		5699365	0					
ANR	5701708	ElseStatement	else		5699365	0					
ANR	5701709	IfStatement	if ( flags & ( 1 << 21 ) )		5699365	0					
ANR	5701710	Condition	flags & ( 1 << 21 )	467:12:12718:12734	5699365	0	True				
ANR	5701711	BitAndExpression	flags & ( 1 << 21 )		5699365	0		&			
ANR	5701712	Identifier	flags		5699365	0					
ANR	5701713	ShiftExpression	1 << 21		5699365	1		<<			
ANR	5701714	PrimaryExpression	1		5699365	0					
ANR	5701715	PrimaryExpression	21		5699365	1					
ANR	5701716	CompoundStatement		348:2:8701:8728	5699365	1					
ANR	5701717	Statement	static	468:2:12747:12752	5699365	0	True				
ANR	5701718	IdentifierDeclStatement	"const char start [ ] = ""unsigned char buf[] = {"" ;"	468:9:12754:12800	5699365	1	True				
ANR	5701719	IdentifierDecl	"start [ ] = ""unsigned char buf[] = {"""		5699365	0					
ANR	5701720	IdentifierDeclType	const char [ ]		5699365	0					
ANR	5701721	Identifier	start		5699365	1					
ANR	5701722	AssignmentExpression	"start [ ] = ""unsigned char buf[] = {"""		5699365	2		=			
ANR	5701723	Identifier	start		5699365	0					
ANR	5701724	PrimaryExpression	"""unsigned char buf[] = {"""		5699365	1					
ANR	5701725	ExpressionStatement	printf ( start )	469:2:12804:12818	5699365	2	True				
ANR	5701726	CallExpression	printf ( start )		5699365	0					
ANR	5701727	Callee	printf		5699365	0					
ANR	5701728	Identifier	printf		5699365	0					
ANR	5701729	ArgumentList	start		5699365	1					
ANR	5701730	Argument	start		5699365	0					
ANR	5701731	Identifier	start		5699365	0					
ANR	5701732	IdentifierDeclStatement	const int byte_per_col = 12 ;	471:2:12866:12893	5699365	3	True				
ANR	5701733	IdentifierDecl	byte_per_col = 12		5699365	0					
ANR	5701734	IdentifierDeclType	const int		5699365	0					
ANR	5701735	Identifier	byte_per_col		5699365	1					
ANR	5701736	AssignmentExpression	byte_per_col = 12		5699365	2		=			
ANR	5701737	Identifier	byte_per_col		5699365	0					
ANR	5701738	PrimaryExpression	12		5699365	1					
ANR	5701739	ForStatement	for ( i = 0 ; i < len - 1 ; i ++ )		5699365	4					
ANR	5701740	ForInit	i = 0 ;	472:7:12902:12907	5699365	0	True				
ANR	5701741	AssignmentExpression	i = 0		5699365	0		=			
ANR	5701742	Identifier	i		5699365	0					
ANR	5701743	PrimaryExpression	0		5699365	1					
ANR	5701744	Condition	i < len - 1	472:14:12909:12917	5699365	1	True				
ANR	5701745	RelationalExpression	i < len - 1		5699365	0		<			
ANR	5701746	Identifier	i		5699365	0					
ANR	5701747	AdditiveExpression	len - 1		5699365	1		-			
ANR	5701748	Identifier	len		5699365	0					
ANR	5701749	PrimaryExpression	1		5699365	1					
ANR	5701750	PostIncDecOperationExpression	i ++	472:25:12920:12922	5699365	2	True				
ANR	5701751	Identifier	i		5699365	0					
ANR	5701752	IncDec	++		5699365	1					
ANR	5701753	CompoundStatement		349:30:8760:8760	5699365	3					
ANR	5701754	IfStatement	if ( i % byte_per_col == 0 )		5699365	0					
ANR	5701755	Condition	i % byte_per_col == 0	474:7:12966:12986	5699365	0	True				
ANR	5701756	EqualityExpression	i % byte_per_col == 0		5699365	0		==			
ANR	5701757	MultiplicativeExpression	i % byte_per_col		5699365	0		%			
ANR	5701758	Identifier	i		5699365	0					
ANR	5701759	Identifier	byte_per_col		5699365	1					
ANR	5701760	PrimaryExpression	0		5699365	1					
ANR	5701761	CompoundStatement		351:30:8824:8824	5699365	1					
ANR	5701762	ExpressionStatement	"printf ( ""\\n  "" )"	475:4:12995:13010	5699365	0	True				
ANR	5701763	CallExpression	"printf ( ""\\n  "" )"		5699365	0					
ANR	5701764	Callee	printf		5699365	0					
ANR	5701765	Identifier	printf		5699365	0					
ANR	5701766	ArgumentList	"""\\n  """		5699365	1					
ANR	5701767	Argument	"""\\n  """		5699365	0					
ANR	5701768	PrimaryExpression	"""\\n  """		5699365	0					
ANR	5701769	ExpressionStatement	"printf ( ""0x%02x, "" , ( ut8 ) str [ i ] )"	477:3:13020:13053	5699365	1	True				
ANR	5701770	CallExpression	"printf ( ""0x%02x, "" , ( ut8 ) str [ i ] )"		5699365	0					
ANR	5701771	Callee	printf		5699365	0					
ANR	5701772	Identifier	printf		5699365	0					
ANR	5701773	ArgumentList	"""0x%02x, """		5699365	1					
ANR	5701774	Argument	"""0x%02x, """		5699365	0					
ANR	5701775	PrimaryExpression	"""0x%02x, """		5699365	0					
ANR	5701776	Argument	( ut8 ) str [ i ]		5699365	1					
ANR	5701777	CastExpression	( ut8 ) str [ i ]		5699365	0					
ANR	5701778	CastTarget	ut8		5699365	0					
ANR	5701779	ArrayIndexing	str [ i ]		5699365	1					
ANR	5701780	Identifier	str		5699365	0					
ANR	5701781	Identifier	i		5699365	1					
ANR	5701782	IfStatement	if ( i % byte_per_col == 0 )		5699365	5					
ANR	5701783	Condition	i % byte_per_col == 0	480:6:13104:13124	5699365	0	True				
ANR	5701784	EqualityExpression	i % byte_per_col == 0		5699365	0		==			
ANR	5701785	MultiplicativeExpression	i % byte_per_col		5699365	0		%			
ANR	5701786	Identifier	i		5699365	0					
ANR	5701787	Identifier	byte_per_col		5699365	1					
ANR	5701788	PrimaryExpression	0		5699365	1					
ANR	5701789	CompoundStatement		357:29:8962:8962	5699365	1					
ANR	5701790	ExpressionStatement	"printf ( ""\\n  "" )"	481:3:13132:13146	5699365	0	True				
ANR	5701791	CallExpression	"printf ( ""\\n  "" )"		5699365	0					
ANR	5701792	Callee	printf		5699365	0					
ANR	5701793	Identifier	printf		5699365	0					
ANR	5701794	ArgumentList	"""\\n  """		5699365	1					
ANR	5701795	Argument	"""\\n  """		5699365	0					
ANR	5701796	PrimaryExpression	"""\\n  """		5699365	0					
ANR	5701797	ExpressionStatement	"printf ( ""0x%02x\\n"" , ( ut8 ) str [ len - 1 ] )"	483:2:13154:13191	5699365	6	True				
ANR	5701798	CallExpression	"printf ( ""0x%02x\\n"" , ( ut8 ) str [ len - 1 ] )"		5699365	0					
ANR	5701799	Callee	printf		5699365	0					
ANR	5701800	Identifier	printf		5699365	0					
ANR	5701801	ArgumentList	"""0x%02x\\n"""		5699365	1					
ANR	5701802	Argument	"""0x%02x\\n"""		5699365	0					
ANR	5701803	PrimaryExpression	"""0x%02x\\n"""		5699365	0					
ANR	5701804	Argument	( ut8 ) str [ len - 1 ]		5699365	1					
ANR	5701805	CastExpression	( ut8 ) str [ len - 1 ]		5699365	0					
ANR	5701806	CastTarget	ut8		5699365	0					
ANR	5701807	ArrayIndexing	str [ len - 1 ]		5699365	1					
ANR	5701808	Identifier	str		5699365	0					
ANR	5701809	AdditiveExpression	len - 1		5699365	1		-			
ANR	5701810	Identifier	len		5699365	0					
ANR	5701811	PrimaryExpression	1		5699365	1					
ANR	5701812	ExpressionStatement	"printf ( ""};\\n"" )"	484:2:13195:13210	5699365	7	True				
ANR	5701813	CallExpression	"printf ( ""};\\n"" )"		5699365	0					
ANR	5701814	Callee	printf		5699365	0					
ANR	5701815	Identifier	printf		5699365	0					
ANR	5701816	ArgumentList	"""};\\n"""		5699365	1					
ANR	5701817	Argument	"""};\\n"""		5699365	0					
ANR	5701818	PrimaryExpression	"""};\\n"""		5699365	0					
ANR	5701819	ExpressionStatement	"printf ( ""unsigned int buf_len = %d;\\n"" , len )"	485:2:13214:13258	5699365	8	True				
ANR	5701820	CallExpression	"printf ( ""unsigned int buf_len = %d;\\n"" , len )"		5699365	0					
ANR	5701821	Callee	printf		5699365	0					
ANR	5701822	Identifier	printf		5699365	0					
ANR	5701823	ArgumentList	"""unsigned int buf_len = %d;\\n"""		5699365	1					
ANR	5701824	Argument	"""unsigned int buf_len = %d;\\n"""		5699365	0					
ANR	5701825	PrimaryExpression	"""unsigned int buf_len = %d;\\n"""		5699365	0					
ANR	5701826	Argument	len		5699365	1					
ANR	5701827	Identifier	len		5699365	0					
ANR	5701828	ReturnStatement	return true ;	486:2:13262:13273	5699365	9	True				
ANR	5701829	Identifier	true		5699365	0					
ANR	5701830	ElseStatement	else		5699365	0					
ANR	5701831	IfStatement	if ( flags & ( 1 << 22 ) )		5699365	0					
ANR	5701832	Condition	flags & ( 1 << 22 )	487:12:13287:13303	5699365	0	True				
ANR	5701833	BitAndExpression	flags & ( 1 << 22 )		5699365	0		&			
ANR	5701834	Identifier	flags		5699365	0					
ANR	5701835	ShiftExpression	1 << 22		5699365	1		<<			
ANR	5701836	PrimaryExpression	1		5699365	0					
ANR	5701837	PrimaryExpression	22		5699365	1					
ANR	5701838	CompoundStatement		376:2:9369:9408	5699365	1					
ANR	5701839	IdentifierDeclStatement	"char * asnum , * modified_str ;"	490:2:13353:13379	5699365	0	True				
ANR	5701840	IdentifierDecl	* asnum		5699365	0					
ANR	5701841	IdentifierDeclType	char *		5699365	0					
ANR	5701842	Identifier	asnum		5699365	1					
ANR	5701843	IdentifierDecl	* modified_str		5699365	1					
ANR	5701844	IdentifierDeclType	char *		5699365	0					
ANR	5701845	Identifier	modified_str		5699365	1					
ANR	5701846	IfStatement	if ( * str != '0' )		5699365	1					
ANR	5701847	Condition	* str != '0'	493:6:13422:13432	5699365	0	True				
ANR	5701848	EqualityExpression	* str != '0'		5699365	0		!=			
ANR	5701849	UnaryOperationExpression	* str		5699365	0					
ANR	5701850	UnaryOperator	*		5699365	0					
ANR	5701851	Identifier	str		5699365	1					
ANR	5701852	PrimaryExpression	'0'		5699365	1					
ANR	5701853	CompoundStatement		370:19:9270:9270	5699365	1					
ANR	5701854	ExpressionStatement	"modified_str = r_str_newf ( ""0%s"" , str )"	494:3:13440:13478	5699365	0	True				
ANR	5701855	AssignmentExpression	"modified_str = r_str_newf ( ""0%s"" , str )"		5699365	0		=			
ANR	5701856	Identifier	modified_str		5699365	0					
ANR	5701857	CallExpression	"r_str_newf ( ""0%s"" , str )"		5699365	1					
ANR	5701858	Callee	r_str_newf		5699365	0					
ANR	5701859	Identifier	r_str_newf		5699365	0					
ANR	5701860	ArgumentList	"""0%s"""		5699365	1					
ANR	5701861	Argument	"""0%s"""		5699365	0					
ANR	5701862	PrimaryExpression	"""0%s"""		5699365	0					
ANR	5701863	Argument	str		5699365	1					
ANR	5701864	Identifier	str		5699365	0					
ANR	5701865	ElseStatement	else		5699365	0					
ANR	5701866	CompoundStatement		372:9:9324:9324	5699365	0					
ANR	5701867	ExpressionStatement	modified_str = r_str_newf ( str )	496:3:13494:13525	5699365	0	True				
ANR	5701868	AssignmentExpression	modified_str = r_str_newf ( str )		5699365	0		=			
ANR	5701869	Identifier	modified_str		5699365	0					
ANR	5701870	CallExpression	r_str_newf ( str )		5699365	1					
ANR	5701871	Callee	r_str_newf		5699365	0					
ANR	5701872	Identifier	r_str_newf		5699365	0					
ANR	5701873	ArgumentList	str		5699365	1					
ANR	5701874	Argument	str		5699365	0					
ANR	5701875	Identifier	str		5699365	0					
ANR	5701876	IdentifierDeclStatement	"ut64 n = r_num_math ( num , modified_str ) ;"	499:2:13534:13573	5699365	2	True				
ANR	5701877	IdentifierDecl	"n = r_num_math ( num , modified_str )"		5699365	0					
ANR	5701878	IdentifierDeclType	ut64		5699365	0					
ANR	5701879	Identifier	n		5699365	1					
ANR	5701880	AssignmentExpression	"n = r_num_math ( num , modified_str )"		5699365	2		=			
ANR	5701881	Identifier	n		5699365	0					
ANR	5701882	CallExpression	"r_num_math ( num , modified_str )"		5699365	1					
ANR	5701883	Callee	r_num_math		5699365	0					
ANR	5701884	Identifier	r_num_math		5699365	0					
ANR	5701885	ArgumentList	num		5699365	1					
ANR	5701886	Argument	num		5699365	0					
ANR	5701887	Identifier	num		5699365	0					
ANR	5701888	Argument	modified_str		5699365	1					
ANR	5701889	Identifier	modified_str		5699365	0					
ANR	5701890	ExpressionStatement	free ( modified_str )	500:2:13577:13596	5699365	3	True				
ANR	5701891	CallExpression	free ( modified_str )		5699365	0					
ANR	5701892	Callee	free		5699365	0					
ANR	5701893	Identifier	free		5699365	0					
ANR	5701894	ArgumentList	modified_str		5699365	1					
ANR	5701895	Argument	modified_str		5699365	0					
ANR	5701896	Identifier	modified_str		5699365	0					
ANR	5701897	IfStatement	if ( num -> dbz )		5699365	4					
ANR	5701898	Condition	num -> dbz	501:6:13604:13611	5699365	0	True				
ANR	5701899	PtrMemberAccess	num -> dbz		5699365	0					
ANR	5701900	Identifier	num		5699365	0					
ANR	5701901	Identifier	dbz		5699365	1					
ANR	5701902	CompoundStatement		378:16:9449:9449	5699365	1					
ANR	5701903	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	502:3:13619:13661	5699365	0	True				
ANR	5701904	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		5699365	0					
ANR	5701905	Callee	eprintf		5699365	0					
ANR	5701906	Identifier	eprintf		5699365	0					
ANR	5701907	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		5699365	1					
ANR	5701908	Argument	"""RNum ERROR: Division by Zero\\n"""		5699365	0					
ANR	5701909	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		5699365	0					
ANR	5701910	ReturnStatement	return false ;	503:3:13666:13678	5699365	1	True				
ANR	5701911	Identifier	false		5699365	0					
ANR	5701912	ExpressionStatement	"asnum = r_num_as_string ( NULL , n , false )"	506:2:13687:13727	5699365	5	True				
ANR	5701913	AssignmentExpression	"asnum = r_num_as_string ( NULL , n , false )"		5699365	0		=			
ANR	5701914	Identifier	asnum		5699365	0					
ANR	5701915	CallExpression	"r_num_as_string ( NULL , n , false )"		5699365	1					
ANR	5701916	Callee	r_num_as_string		5699365	0					
ANR	5701917	Identifier	r_num_as_string		5699365	0					
ANR	5701918	ArgumentList	NULL		5699365	1					
ANR	5701919	Argument	NULL		5699365	0					
ANR	5701920	Identifier	NULL		5699365	0					
ANR	5701921	Argument	n		5699365	1					
ANR	5701922	Identifier	n		5699365	0					
ANR	5701923	Argument	false		5699365	2					
ANR	5701924	Identifier	false		5699365	0					
ANR	5701925	IfStatement	if ( asnum )		5699365	6					
ANR	5701926	Condition	asnum	507:6:13735:13739	5699365	0	True				
ANR	5701927	Identifier	asnum		5699365	0					
ANR	5701928	CompoundStatement		384:13:9577:9577	5699365	1					
ANR	5701929	ExpressionStatement	"printf ( ""%s"" , asnum )"	508:3:13747:13767	5699365	0	True				
ANR	5701930	CallExpression	"printf ( ""%s"" , asnum )"		5699365	0					
ANR	5701931	Callee	printf		5699365	0					
ANR	5701932	Identifier	printf		5699365	0					
ANR	5701933	ArgumentList	"""%s"""		5699365	1					
ANR	5701934	Argument	"""%s"""		5699365	0					
ANR	5701935	PrimaryExpression	"""%s"""		5699365	0					
ANR	5701936	Argument	asnum		5699365	1					
ANR	5701937	Identifier	asnum		5699365	0					
ANR	5701938	ExpressionStatement	free ( asnum )	509:3:13772:13784	5699365	1	True				
ANR	5701939	CallExpression	free ( asnum )		5699365	0					
ANR	5701940	Callee	free		5699365	0					
ANR	5701941	Identifier	free		5699365	0					
ANR	5701942	ArgumentList	asnum		5699365	1					
ANR	5701943	Argument	asnum		5699365	0					
ANR	5701944	Identifier	asnum		5699365	0					
ANR	5701945	ElseStatement	else		5699365	0					
ANR	5701946	CompoundStatement		387:9:9630:9630	5699365	0					
ANR	5701947	ExpressionStatement	"printf ( ""No String Possible"" )"	511:3:13800:13828	5699365	0	True				
ANR	5701948	CallExpression	"printf ( ""No String Possible"" )"		5699365	0					
ANR	5701949	Callee	printf		5699365	0					
ANR	5701950	Identifier	printf		5699365	0					
ANR	5701951	ArgumentList	"""No String Possible"""		5699365	1					
ANR	5701952	Argument	"""No String Possible"""		5699365	0					
ANR	5701953	PrimaryExpression	"""No String Possible"""		5699365	0					
ANR	5701954	ReturnStatement	return true ;	513:2:13836:13847	5699365	7	True				
ANR	5701955	Identifier	true		5699365	0					
ANR	5701956	IfStatement	if ( str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' ) )		5699365	11					
ANR	5701957	Condition	str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' )	516:6:13859:13900	5699365	0	True				
ANR	5701958	AndExpression	str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' )		5699365	0		&&			
ANR	5701959	EqualityExpression	str [ 0 ] == '0'		5699365	0		==			
ANR	5701960	ArrayIndexing	str [ 0 ]		5699365	0					
ANR	5701961	Identifier	str		5699365	0					
ANR	5701962	PrimaryExpression	0		5699365	1					
ANR	5701963	PrimaryExpression	'0'		5699365	1					
ANR	5701964	EqualityExpression	tolower ( str [ 1 ] ) == 'x'		5699365	1		==			
ANR	5701965	CallExpression	tolower ( str [ 1 ] )		5699365	0					
ANR	5701966	Callee	tolower		5699365	0					
ANR	5701967	Identifier	tolower		5699365	0					
ANR	5701968	ArgumentList	str [ 1 ]		5699365	1					
ANR	5701969	Argument	str [ 1 ]		5699365	0					
ANR	5701970	ArrayIndexing	str [ 1 ]		5699365	0					
ANR	5701971	Identifier	str		5699365	0					
ANR	5701972	PrimaryExpression	1		5699365	1					
ANR	5701973	PrimaryExpression	'x'		5699365	1					
ANR	5701974	CompoundStatement		393:50:9738:9738	5699365	1					
ANR	5701975	ExpressionStatement	out_mode = ( flags & 32 ) ? '0' : 'I'	517:2:13907:13940	5699365	0	True				
ANR	5701976	AssignmentExpression	out_mode = ( flags & 32 ) ? '0' : 'I'		5699365	0		=			
ANR	5701977	Identifier	out_mode		5699365	0					
ANR	5701978	ConditionalExpression	( flags & 32 ) ? '0' : 'I'		5699365	1					
ANR	5701979	Condition	flags & 32		5699365	0					
ANR	5701980	BitAndExpression	flags & 32		5699365	0		&			
ANR	5701981	Identifier	flags		5699365	0					
ANR	5701982	PrimaryExpression	32		5699365	1					
ANR	5701983	PrimaryExpression	'0'		5699365	1					
ANR	5701984	PrimaryExpression	'I'		5699365	2					
ANR	5701985	ElseStatement	else		5699365	0					
ANR	5701986	IfStatement	"if ( r_str_startswith ( str , ""b"" ) )"		5699365	0					
ANR	5701987	Condition	"r_str_startswith ( str , ""b"" )"	518:12:13954:13980	5699365	0	True				
ANR	5701988	CallExpression	"r_str_startswith ( str , ""b"" )"		5699365	0					
ANR	5701989	Callee	r_str_startswith		5699365	0					
ANR	5701990	Identifier	r_str_startswith		5699365	0					
ANR	5701991	ArgumentList	str		5699365	1					
ANR	5701992	Argument	str		5699365	0					
ANR	5701993	Identifier	str		5699365	0					
ANR	5701994	Argument	"""b"""		5699365	1					
ANR	5701995	PrimaryExpression	"""b"""		5699365	0					
ANR	5701996	CompoundStatement		395:41:9818:9818	5699365	1					
ANR	5701997	ExpressionStatement	out_mode = 'B'	519:2:13987:14001	5699365	0	True				
ANR	5701998	AssignmentExpression	out_mode = 'B'		5699365	0		=			
ANR	5701999	Identifier	out_mode		5699365	0					
ANR	5702000	PrimaryExpression	'B'		5699365	1					
ANR	5702001	ExpressionStatement	str ++	520:2:14005:14010	5699365	1	True				
ANR	5702002	PostIncDecOperationExpression	str ++		5699365	0					
ANR	5702003	Identifier	str		5699365	0					
ANR	5702004	IncDec	++		5699365	1					
ANR	5702005	ElseStatement	else		5699365	0					
ANR	5702006	IfStatement	"if ( r_str_startswith ( str , ""t"" ) )"		5699365	0					
ANR	5702007	Condition	"r_str_startswith ( str , ""t"" )"	521:12:14024:14050	5699365	0	True				
ANR	5702008	CallExpression	"r_str_startswith ( str , ""t"" )"		5699365	0					
ANR	5702009	Callee	r_str_startswith		5699365	0					
ANR	5702010	Identifier	r_str_startswith		5699365	0					
ANR	5702011	ArgumentList	str		5699365	1					
ANR	5702012	Argument	str		5699365	0					
ANR	5702013	Identifier	str		5699365	0					
ANR	5702014	Argument	"""t"""		5699365	1					
ANR	5702015	PrimaryExpression	"""t"""		5699365	0					
ANR	5702016	CompoundStatement		398:41:9888:9888	5699365	1					
ANR	5702017	ExpressionStatement	out_mode = 'T'	522:2:14057:14071	5699365	0	True				
ANR	5702018	AssignmentExpression	out_mode = 'T'		5699365	0		=			
ANR	5702019	Identifier	out_mode		5699365	0					
ANR	5702020	PrimaryExpression	'T'		5699365	1					
ANR	5702021	ExpressionStatement	str ++	523:2:14075:14080	5699365	1	True				
ANR	5702022	PostIncDecOperationExpression	str ++		5699365	0					
ANR	5702023	Identifier	str		5699365	0					
ANR	5702024	IncDec	++		5699365	1					
ANR	5702025	ElseStatement	else		5699365	0					
ANR	5702026	IfStatement	"if ( r_str_startswith ( str , ""Fx"" ) )"		5699365	0					
ANR	5702027	Condition	"r_str_startswith ( str , ""Fx"" )"	524:12:14094:14121	5699365	0	True				
ANR	5702028	CallExpression	"r_str_startswith ( str , ""Fx"" )"		5699365	0					
ANR	5702029	Callee	r_str_startswith		5699365	0					
ANR	5702030	Identifier	r_str_startswith		5699365	0					
ANR	5702031	ArgumentList	str		5699365	1					
ANR	5702032	Argument	str		5699365	0					
ANR	5702033	Identifier	str		5699365	0					
ANR	5702034	Argument	"""Fx"""		5699365	1					
ANR	5702035	PrimaryExpression	"""Fx"""		5699365	0					
ANR	5702036	CompoundStatement		401:42:9959:9959	5699365	1					
ANR	5702037	ExpressionStatement	out_mode = 'F'	525:2:14128:14142	5699365	0	True				
ANR	5702038	AssignmentExpression	out_mode = 'F'		5699365	0		=			
ANR	5702039	Identifier	out_mode		5699365	0					
ANR	5702040	PrimaryExpression	'F'		5699365	1					
ANR	5702041	ExpressionStatement	* str = '0'	526:2:14146:14156	5699365	1	True				
ANR	5702042	AssignmentExpression	* str = '0'		5699365	0		=			
ANR	5702043	UnaryOperationExpression	* str		5699365	0					
ANR	5702044	UnaryOperator	*		5699365	0					
ANR	5702045	Identifier	str		5699365	1					
ANR	5702046	PrimaryExpression	'0'		5699365	1					
ANR	5702047	ElseStatement	else		5699365	0					
ANR	5702048	IfStatement	"if ( r_str_startswith ( str , ""Bx"" ) )"		5699365	0					
ANR	5702049	Condition	"r_str_startswith ( str , ""Bx"" )"	527:12:14170:14197	5699365	0	True				
ANR	5702050	CallExpression	"r_str_startswith ( str , ""Bx"" )"		5699365	0					
ANR	5702051	Callee	r_str_startswith		5699365	0					
ANR	5702052	Identifier	r_str_startswith		5699365	0					
ANR	5702053	ArgumentList	str		5699365	1					
ANR	5702054	Argument	str		5699365	0					
ANR	5702055	Identifier	str		5699365	0					
ANR	5702056	Argument	"""Bx"""		5699365	1					
ANR	5702057	PrimaryExpression	"""Bx"""		5699365	0					
ANR	5702058	CompoundStatement		404:42:10035:10035	5699365	1					
ANR	5702059	ExpressionStatement	out_mode = 'B'	528:2:14204:14218	5699365	0	True				
ANR	5702060	AssignmentExpression	out_mode = 'B'		5699365	0		=			
ANR	5702061	Identifier	out_mode		5699365	0					
ANR	5702062	PrimaryExpression	'B'		5699365	1					
ANR	5702063	ExpressionStatement	* str = '0'	529:2:14222:14232	5699365	1	True				
ANR	5702064	AssignmentExpression	* str = '0'		5699365	0		=			
ANR	5702065	UnaryOperationExpression	* str		5699365	0					
ANR	5702066	UnaryOperator	*		5699365	0					
ANR	5702067	Identifier	str		5699365	1					
ANR	5702068	PrimaryExpression	'0'		5699365	1					
ANR	5702069	ElseStatement	else		5699365	0					
ANR	5702070	IfStatement	"if ( r_str_startswith ( str , ""Tx"" ) )"		5699365	0					
ANR	5702071	Condition	"r_str_startswith ( str , ""Tx"" )"	530:12:14246:14273	5699365	0	True				
ANR	5702072	CallExpression	"r_str_startswith ( str , ""Tx"" )"		5699365	0					
ANR	5702073	Callee	r_str_startswith		5699365	0					
ANR	5702074	Identifier	r_str_startswith		5699365	0					
ANR	5702075	ArgumentList	str		5699365	1					
ANR	5702076	Argument	str		5699365	0					
ANR	5702077	Identifier	str		5699365	0					
ANR	5702078	Argument	"""Tx"""		5699365	1					
ANR	5702079	PrimaryExpression	"""Tx"""		5699365	0					
ANR	5702080	CompoundStatement		407:42:10111:10111	5699365	1					
ANR	5702081	ExpressionStatement	out_mode = 'T'	531:2:14280:14294	5699365	0	True				
ANR	5702082	AssignmentExpression	out_mode = 'T'		5699365	0		=			
ANR	5702083	Identifier	out_mode		5699365	0					
ANR	5702084	PrimaryExpression	'T'		5699365	1					
ANR	5702085	ExpressionStatement	* str = '0'	532:2:14298:14308	5699365	1	True				
ANR	5702086	AssignmentExpression	* str = '0'		5699365	0		=			
ANR	5702087	UnaryOperationExpression	* str		5699365	0					
ANR	5702088	UnaryOperator	*		5699365	0					
ANR	5702089	Identifier	str		5699365	1					
ANR	5702090	PrimaryExpression	'0'		5699365	1					
ANR	5702091	ElseStatement	else		5699365	0					
ANR	5702092	IfStatement	"if ( r_str_startswith ( str , ""Ox"" ) )"		5699365	0					
ANR	5702093	Condition	"r_str_startswith ( str , ""Ox"" )"	533:12:14322:14349	5699365	0	True				
ANR	5702094	CallExpression	"r_str_startswith ( str , ""Ox"" )"		5699365	0					
ANR	5702095	Callee	r_str_startswith		5699365	0					
ANR	5702096	Identifier	r_str_startswith		5699365	0					
ANR	5702097	ArgumentList	str		5699365	1					
ANR	5702098	Argument	str		5699365	0					
ANR	5702099	Identifier	str		5699365	0					
ANR	5702100	Argument	"""Ox"""		5699365	1					
ANR	5702101	PrimaryExpression	"""Ox"""		5699365	0					
ANR	5702102	CompoundStatement		410:42:10187:10187	5699365	1					
ANR	5702103	ExpressionStatement	out_mode = 'O'	534:2:14356:14370	5699365	0	True				
ANR	5702104	AssignmentExpression	out_mode = 'O'		5699365	0		=			
ANR	5702105	Identifier	out_mode		5699365	0					
ANR	5702106	PrimaryExpression	'O'		5699365	1					
ANR	5702107	ExpressionStatement	* str = '0'	535:2:14374:14384	5699365	1	True				
ANR	5702108	AssignmentExpression	* str = '0'		5699365	0		=			
ANR	5702109	UnaryOperationExpression	* str		5699365	0					
ANR	5702110	UnaryOperator	*		5699365	0					
ANR	5702111	Identifier	str		5699365	1					
ANR	5702112	PrimaryExpression	'0'		5699365	1					
ANR	5702113	ElseStatement	else		5699365	0					
ANR	5702114	IfStatement	"if ( r_str_endswith ( str , ""d"" ) )"		5699365	0					
ANR	5702115	Condition	"r_str_endswith ( str , ""d"" )"	536:12:14398:14422	5699365	0	True				
ANR	5702116	CallExpression	"r_str_endswith ( str , ""d"" )"		5699365	0					
ANR	5702117	Callee	r_str_endswith		5699365	0					
ANR	5702118	Identifier	r_str_endswith		5699365	0					
ANR	5702119	ArgumentList	str		5699365	1					
ANR	5702120	Argument	str		5699365	0					
ANR	5702121	Identifier	str		5699365	0					
ANR	5702122	Argument	"""d"""		5699365	1					
ANR	5702123	PrimaryExpression	"""d"""		5699365	0					
ANR	5702124	CompoundStatement		413:39:10260:10260	5699365	1					
ANR	5702125	ExpressionStatement	out_mode = 'I'	537:2:14429:14443	5699365	0	True				
ANR	5702126	AssignmentExpression	out_mode = 'I'		5699365	0		=			
ANR	5702127	Identifier	out_mode		5699365	0					
ANR	5702128	PrimaryExpression	'I'		5699365	1					
ANR	5702129	ExpressionStatement	str [ strlen ( str ) - 1 ] = 'b'	538:2:14447:14474	5699365	1	True				
ANR	5702130	AssignmentExpression	str [ strlen ( str ) - 1 ] = 'b'		5699365	0		=			
ANR	5702131	ArrayIndexing	str [ strlen ( str ) - 1 ]		5699365	0					
ANR	5702132	Identifier	str		5699365	0					
ANR	5702133	AdditiveExpression	strlen ( str ) - 1		5699365	1		-			
ANR	5702134	CallExpression	strlen ( str )		5699365	0					
ANR	5702135	Callee	strlen		5699365	0					
ANR	5702136	Identifier	strlen		5699365	0					
ANR	5702137	ArgumentList	str		5699365	1					
ANR	5702138	Argument	str		5699365	0					
ANR	5702139	Identifier	str		5699365	0					
ANR	5702140	PrimaryExpression	1		5699365	1					
ANR	5702141	PrimaryExpression	'b'		5699365	1					
ANR	5702142	ElseStatement	else		5699365	0					
ANR	5702143	IfStatement	"if ( r_str_endswith ( str , ""f"" ) )"		5699365	0					
ANR	5702144	Condition	"r_str_endswith ( str , ""f"" )"	540:12:14529:14553	5699365	0	True				
ANR	5702145	CallExpression	"r_str_endswith ( str , ""f"" )"		5699365	0					
ANR	5702146	Callee	r_str_endswith		5699365	0					
ANR	5702147	Identifier	r_str_endswith		5699365	0					
ANR	5702148	ArgumentList	str		5699365	1					
ANR	5702149	Argument	str		5699365	0					
ANR	5702150	Identifier	str		5699365	0					
ANR	5702151	Argument	"""f"""		5699365	1					
ANR	5702152	PrimaryExpression	"""f"""		5699365	0					
ANR	5702153	CompoundStatement		417:39:10391:10391	5699365	1					
ANR	5702154	ExpressionStatement	out_mode = 'l'	541:2:14560:14574	5699365	0	True				
ANR	5702155	AssignmentExpression	out_mode = 'l'		5699365	0		=			
ANR	5702156	Identifier	out_mode		5699365	0					
ANR	5702157	PrimaryExpression	'l'		5699365	1					
ANR	5702158	ElseStatement	else		5699365	0					
ANR	5702159	IfStatement	"if ( r_str_endswith ( str , ""dt"" ) )"		5699365	0					
ANR	5702160	Condition	"r_str_endswith ( str , ""dt"" )"	542:12:14588:14613	5699365	0	True				
ANR	5702161	CallExpression	"r_str_endswith ( str , ""dt"" )"		5699365	0					
ANR	5702162	Callee	r_str_endswith		5699365	0					
ANR	5702163	Identifier	r_str_endswith		5699365	0					
ANR	5702164	ArgumentList	str		5699365	1					
ANR	5702165	Argument	str		5699365	0					
ANR	5702166	Identifier	str		5699365	0					
ANR	5702167	Argument	"""dt"""		5699365	1					
ANR	5702168	PrimaryExpression	"""dt"""		5699365	0					
ANR	5702169	CompoundStatement		419:40:10451:10451	5699365	1					
ANR	5702170	ExpressionStatement	out_mode = 'I'	543:2:14620:14634	5699365	0	True				
ANR	5702171	AssignmentExpression	out_mode = 'I'		5699365	0		=			
ANR	5702172	Identifier	out_mode		5699365	0					
ANR	5702173	PrimaryExpression	'I'		5699365	1					
ANR	5702174	ExpressionStatement	str [ strlen ( str ) - 2 ] = 't'	544:2:14638:14665	5699365	1	True				
ANR	5702175	AssignmentExpression	str [ strlen ( str ) - 2 ] = 't'		5699365	0		=			
ANR	5702176	ArrayIndexing	str [ strlen ( str ) - 2 ]		5699365	0					
ANR	5702177	Identifier	str		5699365	0					
ANR	5702178	AdditiveExpression	strlen ( str ) - 2		5699365	1		-			
ANR	5702179	CallExpression	strlen ( str )		5699365	0					
ANR	5702180	Callee	strlen		5699365	0					
ANR	5702181	Identifier	strlen		5699365	0					
ANR	5702182	ArgumentList	str		5699365	1					
ANR	5702183	Argument	str		5699365	0					
ANR	5702184	Identifier	str		5699365	0					
ANR	5702185	PrimaryExpression	2		5699365	1					
ANR	5702186	PrimaryExpression	't'		5699365	1					
ANR	5702187	ExpressionStatement	str [ strlen ( str ) - 1 ] = '\\0'	545:2:14669:14697	5699365	2	True				
ANR	5702188	AssignmentExpression	str [ strlen ( str ) - 1 ] = '\\0'		5699365	0		=			
ANR	5702189	ArrayIndexing	str [ strlen ( str ) - 1 ]		5699365	0					
ANR	5702190	Identifier	str		5699365	0					
ANR	5702191	AdditiveExpression	strlen ( str ) - 1		5699365	1		-			
ANR	5702192	CallExpression	strlen ( str )		5699365	0					
ANR	5702193	Callee	strlen		5699365	0					
ANR	5702194	Identifier	strlen		5699365	0					
ANR	5702195	ArgumentList	str		5699365	1					
ANR	5702196	Argument	str		5699365	0					
ANR	5702197	Identifier	str		5699365	0					
ANR	5702198	PrimaryExpression	1		5699365	1					
ANR	5702199	PrimaryExpression	'\\0'		5699365	1					
ANR	5702200	WhileStatement	"while ( ( p = strchr ( str , ' ' ) ) )"		5699365	12					
ANR	5702201	Condition	"p = strchr ( str , ' ' )"	547:8:14710:14732	5699365	0	True				
ANR	5702202	AssignmentExpression	"p = strchr ( str , ' ' )"		5699365	0		=			
ANR	5702203	Identifier	p		5699365	0					
ANR	5702204	CallExpression	"strchr ( str , ' ' )"		5699365	1					
ANR	5702205	Callee	strchr		5699365	0					
ANR	5702206	Identifier	strchr		5699365	0					
ANR	5702207	ArgumentList	str		5699365	1					
ANR	5702208	Argument	str		5699365	0					
ANR	5702209	Identifier	str		5699365	0					
ANR	5702210	Argument	' '		5699365	1					
ANR	5702211	PrimaryExpression	' '		5699365	0					
ANR	5702212	CompoundStatement		424:33:10570:10570	5699365	1					
ANR	5702213	ExpressionStatement	* p = 0	548:2:14739:14745	5699365	0	True				
ANR	5702214	AssignmentExpression	* p = 0		5699365	0		=			
ANR	5702215	UnaryOperationExpression	* p		5699365	0					
ANR	5702216	UnaryOperator	*		5699365	0					
ANR	5702217	Identifier	p		5699365	1					
ANR	5702218	PrimaryExpression	0		5699365	1					
ANR	5702219	ExpressionStatement	"format_output ( out_mode , str )"	549:2:14749:14778	5699365	1	True				
ANR	5702220	CallExpression	"format_output ( out_mode , str )"		5699365	0					
ANR	5702221	Callee	format_output		5699365	0					
ANR	5702222	Identifier	format_output		5699365	0					
ANR	5702223	ArgumentList	out_mode		5699365	1					
ANR	5702224	Argument	out_mode		5699365	0					
ANR	5702225	Identifier	out_mode		5699365	0					
ANR	5702226	Argument	str		5699365	1					
ANR	5702227	Identifier	str		5699365	0					
ANR	5702228	ExpressionStatement	str = p + 1	550:2:14782:14793	5699365	2	True				
ANR	5702229	AssignmentExpression	str = p + 1		5699365	0		=			
ANR	5702230	Identifier	str		5699365	0					
ANR	5702231	AdditiveExpression	p + 1		5699365	1		+			
ANR	5702232	Identifier	p		5699365	0					
ANR	5702233	PrimaryExpression	1		5699365	1					
ANR	5702234	IfStatement	if ( * str )		5699365	13					
ANR	5702235	Condition	* str	552:5:14803:14806	5699365	0	True				
ANR	5702236	UnaryOperationExpression	* str		5699365	0					
ANR	5702237	UnaryOperator	*		5699365	0					
ANR	5702238	Identifier	str		5699365	1					
ANR	5702239	CompoundStatement		429:11:10644:10644	5699365	1					
ANR	5702240	ExpressionStatement	"format_output ( out_mode , str )"	553:2:14813:14842	5699365	0	True				
ANR	5702241	CallExpression	"format_output ( out_mode , str )"		5699365	0					
ANR	5702242	Callee	format_output		5699365	0					
ANR	5702243	Identifier	format_output		5699365	0					
ANR	5702244	ArgumentList	out_mode		5699365	1					
ANR	5702245	Argument	out_mode		5699365	0					
ANR	5702246	Identifier	out_mode		5699365	0					
ANR	5702247	Argument	str		5699365	1					
ANR	5702248	Identifier	str		5699365	0					
ANR	5702249	ReturnStatement	return true ;	555:1:14848:14859	5699365	14	True				
ANR	5702250	Identifier	true		5699365	0					
ANR	5702251	ReturnType	static int		5699365	1					
ANR	5702252	Identifier	rax		5699365	2					
ANR	5702253	ParameterList	"char * str , int len , int last"		5699365	3					
ANR	5702254	Parameter	char * str	124:15:4134:4142	5699365	0	True				
ANR	5702255	ParameterType	char *		5699365	0					
ANR	5702256	Identifier	str		5699365	1					
ANR	5702257	Parameter	int len	124:26:4145:4151	5699365	1	True				
ANR	5702258	ParameterType	int		5699365	0					
ANR	5702259	Identifier	len		5699365	1					
ANR	5702260	Parameter	int last	124:35:4154:4161	5699365	2	True				
ANR	5702261	ParameterType	int		5699365	0					
ANR	5702262	Identifier	last		5699365	1					
ANR	5702263	CFGEntryNode	ENTRY		5699365		True				
ANR	5702264	CFGExitNode	EXIT		5699365		True				
ANR	5702265	Symbol	UT32_MAX		5699365						
ANR	5702266	Symbol	r_print_new		5699365						
ANR	5702267	Symbol	stdout		5699365						
ANR	5702268	Symbol	tolower		5699365						
ANR	5702269	Symbol	format_output		5699365						
ANR	5702270	Symbol	num		5699365						
ANR	5702271	Symbol	modified_str		5699365						
ANR	5702272	Symbol	strchr		5699365						
ANR	5702273	Symbol	r_str_hash		5699365						
ANR	5702274	Symbol	strlen		5699365						
ANR	5702275	Symbol	r_str_binstr2bin		5699365						
ANR	5702276	Symbol	memcmp		5699365						
ANR	5702277	Symbol	len		5699365						
ANR	5702278	Symbol	asnum		5699365						
ANR	5702279	Symbol	num -> fvalue		5699365						
ANR	5702280	Symbol	r_hex_from_code		5699365						
ANR	5702281	Symbol	res		5699365						
ANR	5702282	Symbol	* buf		5699365						
ANR	5702283	Symbol	NULL		5699365						
ANR	5702284	Symbol	last		5699365						
ANR	5702285	Symbol	str		5699365						
ANR	5702286	Symbol	unit		5699365						
ANR	5702287	Symbol	true		5699365						
ANR	5702288	Symbol	use_stdin		5699365						
ANR	5702289	Symbol	nl		5699365						
ANR	5702290	Symbol	np		5699365						
ANR	5702291	Symbol	r_num_as_string		5699365						
ANR	5702292	Symbol	r_stdin_slurp		5699365						
ANR	5702293	Symbol	flags		5699365						
ANR	5702294	Symbol	r_print_randomart		5699365						
ANR	5702295	Symbol	calloc		5699365						
ANR	5702296	Symbol	r_str_newf		5699365						
ANR	5702297	Symbol	n32		5699365						
ANR	5702298	Symbol	out_mode		5699365						
ANR	5702299	Symbol	r_num_math		5699365						
ANR	5702300	Symbol	out		5699365						
ANR	5702301	Symbol	byte_per_col		5699365						
ANR	5702302	Symbol	r_str_endswith		5699365						
ANR	5702303	Symbol	* str		5699365						
ANR	5702304	Symbol	r_hex_str2bin		5699365						
ANR	5702305	Symbol	atoi		5699365						
ANR	5702306	Symbol	r_str_startswith		5699365						
ANR	5702307	Symbol	malloc		5699365						
ANR	5702308	Symbol	a		5699365						
ANR	5702309	Symbol	d		5699365						
ANR	5702310	Symbol	ch		5699365						
ANR	5702311	Symbol	f		5699365						
ANR	5702312	Symbol	num -> dbz		5699365						
ANR	5702313	Symbol	r_str_nlen		5699365						
ANR	5702314	Symbol	false		5699365						
ANR	5702315	Symbol	h		5699365						
ANR	5702316	Symbol	start		5699365						
ANR	5702317	Symbol	i		5699365						
ANR	5702318	Symbol	& d		5699365						
ANR	5702319	Symbol	* np		5699365						
ANR	5702320	Symbol	& f		5699365						
ANR	5702321	Symbol	m		5699365						
ANR	5702322	Symbol	n		5699365						
ANR	5702323	Symbol	p		5699365						
ANR	5702324	Symbol	r_main_version_print		5699365						
ANR	5702325	Symbol	* num		5699365						
ANR	5702326	Symbol	help		5699365						
ANR	5702327	Symbol	q		5699365						
ANR	5702328	Symbol	buf		5699365						
ANR	5702329	Symbol	force_mode		5699365						
ANR	5702330	Symbol	* i		5699365						
ANR	5702331	Symbol	s		5699365						
ANR	5702332	Symbol	& n		5699365						
ANR	5702333	Symbol	& n32		5699365						
ANR	5702334	Symbol	* strlen		5699365						
ANR	5702335	Symbol	& q		5699365						
ANR	5702336	Symbol	* m		5699365						
ANR	5702337	Symbol	* p		5699365						
ANR	5702338	Symbol	* len		5699365						
ANR	5702339	Function	use_stdin	558:0:14864:15526							
ANR	5702340	FunctionDef	use_stdin ()		5702339	0					
ANR	5702341	CompoundStatement		558:23:14887:15526	5702339	0					
ANR	5702342	IdentifierDeclStatement	"char * buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 ) ;"	559:1:14890:14935	5702339	0	True				
ANR	5702343	IdentifierDecl	"* buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5702339	0					
ANR	5702344	IdentifierDeclType	char *		5702339	0					
ANR	5702345	Identifier	buf		5702339	1					
ANR	5702346	AssignmentExpression	"* buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5702339	2		=			
ANR	5702347	Identifier	buf		5702339	0					
ANR	5702348	CallExpression	"calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5702339	1					
ANR	5702349	Callee	calloc		5702339	0					
ANR	5702350	Identifier	calloc		5702339	0					
ANR	5702351	ArgumentList	1		5702339	1					
ANR	5702352	Argument	1		5702339	0					
ANR	5702353	PrimaryExpression	1		5702339	0					
ANR	5702354	Argument	STDIN_BUFFER_SIZE + 1		5702339	1					
ANR	5702355	AdditiveExpression	STDIN_BUFFER_SIZE + 1		5702339	0		+			
ANR	5702356	Identifier	STDIN_BUFFER_SIZE		5702339	0					
ANR	5702357	PrimaryExpression	1		5702339	1					
ANR	5702358	IdentifierDeclStatement	int l ;	560:1:14938:14943	5702339	1	True				
ANR	5702359	IdentifierDecl	l		5702339	0					
ANR	5702360	IdentifierDeclType	int		5702339	0					
ANR	5702361	Identifier	l		5702339	1					
ANR	5702362	IfStatement	if ( ! buf )		5702339	2					
ANR	5702363	Condition	! buf	561:5:14976:14979	5702339	0	True				
ANR	5702364	UnaryOperationExpression	! buf		5702339	0					
ANR	5702365	UnaryOperator	!		5702339	0					
ANR	5702366	Identifier	buf		5702339	1					
ANR	5702367	CompoundStatement		4:11:94:94	5702339	1					
ANR	5702368	ReturnStatement	return 0 ;	562:2:14986:14994	5702339	0	True				
ANR	5702369	PrimaryExpression	0		5702339	0					
ANR	5702370	IfStatement	if ( ! ( flags & ( 1 << 14 ) ) )		5702339	3					
ANR	5702371	Condition	! ( flags & ( 1 << 14 ) )	564:5:15004:15021	5702339	0	True				
ANR	5702372	UnaryOperationExpression	! ( flags & ( 1 << 14 ) )		5702339	0					
ANR	5702373	UnaryOperator	!		5702339	0					
ANR	5702374	BitAndExpression	flags & ( 1 << 14 )		5702339	1		&			
ANR	5702375	Identifier	flags		5702339	0					
ANR	5702376	ShiftExpression	1 << 14		5702339	1		<<			
ANR	5702377	PrimaryExpression	1		5702339	0					
ANR	5702378	PrimaryExpression	14		5702339	1					
ANR	5702379	CompoundStatement		7:25:136:136	5702339	1					
ANR	5702380	ForStatement	for ( l = 0 ; l >= 0 && l < STDIN_BUFFER_SIZE ; l ++ )		5702339	0					
ANR	5702381	ForInit	l = 0 ;	565:7:15033:15038	5702339	0	True				
ANR	5702382	AssignmentExpression	l = 0		5702339	0		=			
ANR	5702383	Identifier	l		5702339	0					
ANR	5702384	PrimaryExpression	0		5702339	1					
ANR	5702385	Condition	l >= 0 && l < STDIN_BUFFER_SIZE	565:14:15040:15070	5702339	1	True				
ANR	5702386	AndExpression	l >= 0 && l < STDIN_BUFFER_SIZE		5702339	0		&&			
ANR	5702387	RelationalExpression	l >= 0		5702339	0		>=			
ANR	5702388	Identifier	l		5702339	0					
ANR	5702389	PrimaryExpression	0		5702339	1					
ANR	5702390	RelationalExpression	l < STDIN_BUFFER_SIZE		5702339	1		<			
ANR	5702391	Identifier	l		5702339	0					
ANR	5702392	Identifier	STDIN_BUFFER_SIZE		5702339	1					
ANR	5702393	PostIncDecOperationExpression	l ++	565:47:15073:15075	5702339	2	True				
ANR	5702394	Identifier	l		5702339	0					
ANR	5702395	IncDec	++		5702339	1					
ANR	5702396	CompoundStatement		10:3:243:291	5702339	3					
ANR	5702397	IdentifierDeclStatement	"int n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l ) ;"	567:3:15131:15179	5702339	0	True				
ANR	5702398	IdentifierDecl	"n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5702339	0					
ANR	5702399	IdentifierDeclType	int		5702339	0					
ANR	5702400	Identifier	n		5702339	1					
ANR	5702401	AssignmentExpression	"n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5702339	2		=			
ANR	5702402	Identifier	n		5702339	0					
ANR	5702403	CallExpression	"read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5702339	1					
ANR	5702404	Callee	read		5702339	0					
ANR	5702405	Identifier	read		5702339	0					
ANR	5702406	ArgumentList	0		5702339	1					
ANR	5702407	Argument	0		5702339	0					
ANR	5702408	PrimaryExpression	0		5702339	0					
ANR	5702409	Argument	buf + l		5702339	1					
ANR	5702410	AdditiveExpression	buf + l		5702339	0		+			
ANR	5702411	Identifier	buf		5702339	0					
ANR	5702412	Identifier	l		5702339	1					
ANR	5702413	Argument	STDIN_BUFFER_SIZE - l		5702339	2					
ANR	5702414	AdditiveExpression	STDIN_BUFFER_SIZE - l		5702339	0		-			
ANR	5702415	Identifier	STDIN_BUFFER_SIZE		5702339	0					
ANR	5702416	Identifier	l		5702339	1					
ANR	5702417	IfStatement	if ( n < 1 )		5702339	1					
ANR	5702418	Condition	n < 1	568:7:15188:15192	5702339	0	True				
ANR	5702419	RelationalExpression	n < 1		5702339	0		<			
ANR	5702420	Identifier	n		5702339	0					
ANR	5702421	PrimaryExpression	1		5702339	1					
ANR	5702422	CompoundStatement		11:14:307:307	5702339	1					
ANR	5702423	BreakStatement	break ;	569:4:15201:15206	5702339	0	True				
ANR	5702424	ExpressionStatement	l += n	571:3:15216:15222	5702339	2	True				
ANR	5702425	AssignmentExpression	l += n		5702339	0		+=			
ANR	5702426	Identifier	l		5702339	0					
ANR	5702427	Identifier	n		5702339	1					
ANR	5702428	IfStatement	if ( buf [ l - 1 ] == 0 )		5702339	3					
ANR	5702429	Condition	buf [ l - 1 ] == 0	572:7:15231:15245	5702339	0	True				
ANR	5702430	EqualityExpression	buf [ l - 1 ] == 0		5702339	0		==			
ANR	5702431	ArrayIndexing	buf [ l - 1 ]		5702339	0					
ANR	5702432	Identifier	buf		5702339	0					
ANR	5702433	AdditiveExpression	l - 1		5702339	1		-			
ANR	5702434	Identifier	l		5702339	0					
ANR	5702435	PrimaryExpression	1		5702339	1					
ANR	5702436	PrimaryExpression	0		5702339	1					
ANR	5702437	CompoundStatement		15:24:360:360	5702339	1					
ANR	5702438	ExpressionStatement	l --	573:4:15254:15257	5702339	0	True				
ANR	5702439	PostIncDecOperationExpression	l --		5702339	0					
ANR	5702440	Identifier	l		5702339	0					
ANR	5702441	IncDec	--		5702339	1					
ANR	5702442	ContinueStatement	continue ;	574:4:15263:15271	5702339	1	True				
ANR	5702443	ExpressionStatement	buf [ n ] = 0	576:3:15281:15291	5702339	4	True				
ANR	5702444	AssignmentExpression	buf [ n ] = 0		5702339	0		=			
ANR	5702445	ArrayIndexing	buf [ n ]		5702339	0					
ANR	5702446	Identifier	buf		5702339	0					
ANR	5702447	Identifier	n		5702339	1					
ANR	5702448	PrimaryExpression	0		5702339	1					
ANR	5702449	ExpressionStatement	buf [ STDIN_BUFFER_SIZE ] = '\\0'	578:3:15355:15384	5702339	5	True				
ANR	5702450	AssignmentExpression	buf [ STDIN_BUFFER_SIZE ] = '\\0'		5702339	0		=			
ANR	5702451	ArrayIndexing	buf [ STDIN_BUFFER_SIZE ]		5702339	0					
ANR	5702452	Identifier	buf		5702339	0					
ANR	5702453	Identifier	STDIN_BUFFER_SIZE		5702339	1					
ANR	5702454	PrimaryExpression	'\\0'		5702339	1					
ANR	5702455	IfStatement	"if ( ! rax ( buf , l , 0 ) )"		5702339	6					
ANR	5702456	Condition	"! rax ( buf , l , 0 )"	579:7:15393:15408	5702339	0	True				
ANR	5702457	UnaryOperationExpression	"! rax ( buf , l , 0 )"		5702339	0					
ANR	5702458	UnaryOperator	!		5702339	0					
ANR	5702459	CallExpression	"rax ( buf , l , 0 )"		5702339	1					
ANR	5702460	Callee	rax		5702339	0					
ANR	5702461	Identifier	rax		5702339	0					
ANR	5702462	ArgumentList	buf		5702339	1					
ANR	5702463	Argument	buf		5702339	0					
ANR	5702464	Identifier	buf		5702339	0					
ANR	5702465	Argument	l		5702339	1					
ANR	5702466	Identifier	l		5702339	0					
ANR	5702467	Argument	0		5702339	2					
ANR	5702468	PrimaryExpression	0		5702339	0					
ANR	5702469	CompoundStatement		22:25:523:523	5702339	1					
ANR	5702470	BreakStatement	break ;	580:4:15417:15422	5702339	0	True				
ANR	5702471	ExpressionStatement	l = - 1	582:3:15432:15438	5702339	7	True				
ANR	5702472	AssignmentExpression	l = - 1		5702339	0		=			
ANR	5702473	Identifier	l		5702339	0					
ANR	5702474	UnaryOperationExpression	- 1		5702339	1					
ANR	5702475	UnaryOperator	-		5702339	0					
ANR	5702476	PrimaryExpression	1		5702339	1					
ANR	5702477	ElseStatement	else		5702339	0					
ANR	5702478	CompoundStatement		27:8:564:564	5702339	0					
ANR	5702479	ExpressionStatement	l = 1	585:2:15456:15461	5702339	0	True				
ANR	5702480	AssignmentExpression	l = 1		5702339	0		=			
ANR	5702481	Identifier	l		5702339	0					
ANR	5702482	PrimaryExpression	1		5702339	1					
ANR	5702483	IfStatement	if ( l > 0 )		5702339	4					
ANR	5702484	Condition	l > 0	587:5:15471:15475	5702339	0	True				
ANR	5702485	RelationalExpression	l > 0		5702339	0		>			
ANR	5702486	Identifier	l		5702339	0					
ANR	5702487	PrimaryExpression	0		5702339	1					
ANR	5702488	CompoundStatement		30:12:590:590	5702339	1					
ANR	5702489	ExpressionStatement	"rax ( buf , l , 0 )"	588:2:15482:15497	5702339	0	True				
ANR	5702490	CallExpression	"rax ( buf , l , 0 )"		5702339	0					
ANR	5702491	Callee	rax		5702339	0					
ANR	5702492	Identifier	rax		5702339	0					
ANR	5702493	ArgumentList	buf		5702339	1					
ANR	5702494	Argument	buf		5702339	0					
ANR	5702495	Identifier	buf		5702339	0					
ANR	5702496	Argument	l		5702339	1					
ANR	5702497	Identifier	l		5702339	0					
ANR	5702498	Argument	0		5702339	2					
ANR	5702499	PrimaryExpression	0		5702339	0					
ANR	5702500	ExpressionStatement	free ( buf )	590:1:15503:15513	5702339	5	True				
ANR	5702501	CallExpression	free ( buf )		5702339	0					
ANR	5702502	Callee	free		5702339	0					
ANR	5702503	Identifier	free		5702339	0					
ANR	5702504	ArgumentList	buf		5702339	1					
ANR	5702505	Argument	buf		5702339	0					
ANR	5702506	Identifier	buf		5702339	0					
ANR	5702507	ReturnStatement	return 0 ;	591:1:15516:15524	5702339	6	True				
ANR	5702508	PrimaryExpression	0		5702339	0					
ANR	5702509	ReturnType	static int		5702339	1					
ANR	5702510	Identifier	use_stdin		5702339	2					
ANR	5702511	ParameterList			5702339	3					
ANR	5702512	CFGEntryNode	ENTRY		5702339		True				
ANR	5702513	CFGExitNode	EXIT		5702339		True				
ANR	5702514	Symbol	buf		5702339						
ANR	5702515	Symbol	* buf		5702339						
ANR	5702516	Symbol	read		5702339						
ANR	5702517	Symbol	STDIN_BUFFER_SIZE		5702339						
ANR	5702518	Symbol	* l		5702339						
ANR	5702519	Symbol	flags		5702339						
ANR	5702520	Symbol	* n		5702339						
ANR	5702521	Symbol	rax		5702339						
ANR	5702522	Symbol	calloc		5702339						
ANR	5702523	Symbol	l		5702339						
ANR	5702524	Symbol	n		5702339						
ANR	5702525	Symbol	* STDIN_BUFFER_SIZE		5702339						
ANR	5702526	Function	r_main_rax2	594:0:15529:15811							
ANR	5702527	FunctionDef	"r_main_rax2 (int argc , char * * argv)"		5702526	0					
ANR	5702528	CompoundStatement		594:45:15574:15811	5702526	0					
ANR	5702529	IdentifierDeclStatement	int i ;	595:1:15577:15582	5702526	0	True				
ANR	5702530	IdentifierDecl	i		5702526	0					
ANR	5702531	IdentifierDeclType	int		5702526	0					
ANR	5702532	Identifier	i		5702526	1					
ANR	5702533	ExpressionStatement	"num = r_num_new ( NULL , NULL , NULL )"	596:1:15585:15619	5702526	1	True				
ANR	5702534	AssignmentExpression	"num = r_num_new ( NULL , NULL , NULL )"		5702526	0		=			
ANR	5702535	Identifier	num		5702526	0					
ANR	5702536	CallExpression	"r_num_new ( NULL , NULL , NULL )"		5702526	1					
ANR	5702537	Callee	r_num_new		5702526	0					
ANR	5702538	Identifier	r_num_new		5702526	0					
ANR	5702539	ArgumentList	NULL		5702526	1					
ANR	5702540	Argument	NULL		5702526	0					
ANR	5702541	Identifier	NULL		5702526	0					
ANR	5702542	Argument	NULL		5702526	1					
ANR	5702543	Identifier	NULL		5702526	0					
ANR	5702544	Argument	NULL		5702526	2					
ANR	5702545	Identifier	NULL		5702526	0					
ANR	5702546	IfStatement	if ( argc == 1 )		5702526	2					
ANR	5702547	Condition	argc == 1	597:5:15626:15634	5702526	0	True				
ANR	5702548	EqualityExpression	argc == 1		5702526	0		==			
ANR	5702549	Identifier	argc		5702526	0					
ANR	5702550	PrimaryExpression	1		5702526	1					
ANR	5702551	CompoundStatement		4:16:62:62	5702526	1					
ANR	5702552	ExpressionStatement	use_stdin ( )	598:2:15641:15653	5702526	0	True				
ANR	5702553	CallExpression	use_stdin ( )		5702526	0					
ANR	5702554	Callee	use_stdin		5702526	0					
ANR	5702555	Identifier	use_stdin		5702526	0					
ANR	5702556	ArgumentList			5702526	1					
ANR	5702557	ElseStatement	else		5702526	0					
ANR	5702558	CompoundStatement		6:8:88:88	5702526	0					
ANR	5702559	ForStatement	for ( i = 1 ; i < argc ; i ++ )		5702526	0					
ANR	5702560	ForInit	i = 1 ;	600:7:15672:15677	5702526	0	True				
ANR	5702561	AssignmentExpression	i = 1		5702526	0		=			
ANR	5702562	Identifier	i		5702526	0					
ANR	5702563	PrimaryExpression	1		5702526	1					
ANR	5702564	Condition	i < argc	600:14:15679:15686	5702526	1	True				
ANR	5702565	RelationalExpression	i < argc		5702526	0		<			
ANR	5702566	Identifier	i		5702526	0					
ANR	5702567	Identifier	argc		5702526	1					
ANR	5702568	PostIncDecOperationExpression	i ++	600:24:15689:15691	5702526	2	True				
ANR	5702569	Identifier	i		5702526	0					
ANR	5702570	IncDec	++		5702526	1					
ANR	5702571	CompoundStatement		7:29:119:119	5702526	3					
ANR	5702572	ExpressionStatement	r_str_unescape ( argv [ i ] )	601:3:15699:15723	5702526	0	True				
ANR	5702573	CallExpression	r_str_unescape ( argv [ i ] )		5702526	0					
ANR	5702574	Callee	r_str_unescape		5702526	0					
ANR	5702575	Identifier	r_str_unescape		5702526	0					
ANR	5702576	ArgumentList	argv [ i ]		5702526	1					
ANR	5702577	Argument	argv [ i ]		5702526	0					
ANR	5702578	ArrayIndexing	argv [ i ]		5702526	0					
ANR	5702579	Identifier	argv		5702526	0					
ANR	5702580	Identifier	i		5702526	1					
ANR	5702581	ExpressionStatement	"rax ( argv [ i ] , 0 , i == argc - 1 )"	602:3:15728:15759	5702526	1	True				
ANR	5702582	CallExpression	"rax ( argv [ i ] , 0 , i == argc - 1 )"		5702526	0					
ANR	5702583	Callee	rax		5702526	0					
ANR	5702584	Identifier	rax		5702526	0					
ANR	5702585	ArgumentList	argv [ i ]		5702526	1					
ANR	5702586	Argument	argv [ i ]		5702526	0					
ANR	5702587	ArrayIndexing	argv [ i ]		5702526	0					
ANR	5702588	Identifier	argv		5702526	0					
ANR	5702589	Identifier	i		5702526	1					
ANR	5702590	Argument	0		5702526	1					
ANR	5702591	PrimaryExpression	0		5702526	0					
ANR	5702592	Argument	i == argc - 1		5702526	2					
ANR	5702593	EqualityExpression	i == argc - 1		5702526	0		==			
ANR	5702594	Identifier	i		5702526	0					
ANR	5702595	AdditiveExpression	argc - 1		5702526	1		-			
ANR	5702596	Identifier	argc		5702526	0					
ANR	5702597	PrimaryExpression	1		5702526	1					
ANR	5702598	ExpressionStatement	r_num_free ( num )	605:1:15769:15785	5702526	3	True				
ANR	5702599	CallExpression	r_num_free ( num )		5702526	0					
ANR	5702600	Callee	r_num_free		5702526	0					
ANR	5702601	Identifier	r_num_free		5702526	0					
ANR	5702602	ArgumentList	num		5702526	1					
ANR	5702603	Argument	num		5702526	0					
ANR	5702604	Identifier	num		5702526	0					
ANR	5702605	ExpressionStatement	num = NULL	606:1:15788:15798	5702526	4	True				
ANR	5702606	AssignmentExpression	num = NULL		5702526	0		=			
ANR	5702607	Identifier	num		5702526	0					
ANR	5702608	Identifier	NULL		5702526	1					
ANR	5702609	ReturnStatement	return 0 ;	607:1:15801:15809	5702526	5	True				
ANR	5702610	PrimaryExpression	0		5702526	0					
ANR	5702611	ReturnType	R_API int		5702526	1					
ANR	5702612	Identifier	r_main_rax2		5702526	2					
ANR	5702613	ParameterList	"int argc , char * * argv"		5702526	3					
ANR	5702614	Parameter	int argc	594:22:15551:15558	5702526	0	True				
ANR	5702615	ParameterType	int		5702526	0					
ANR	5702616	Identifier	argc		5702526	1					
ANR	5702617	Parameter	char * * argv	594:32:15561:15571	5702526	1	True				
ANR	5702618	ParameterType	char * *		5702526	0					
ANR	5702619	Identifier	argv		5702526	1					
ANR	5702620	CFGEntryNode	ENTRY		5702526		True				
ANR	5702621	CFGExitNode	EXIT		5702526		True				
ANR	5702622	Symbol	argc		5702526						
ANR	5702623	Symbol	r_num_new		5702526						
ANR	5702624	Symbol	NULL		5702526						
ANR	5702625	Symbol	* i		5702526						
ANR	5702626	Symbol	num		5702526						
ANR	5702627	Symbol	i		5702526						
ANR	5702628	Symbol	* argv		5702526						
ANR	5702629	Symbol	argv		5702526						
