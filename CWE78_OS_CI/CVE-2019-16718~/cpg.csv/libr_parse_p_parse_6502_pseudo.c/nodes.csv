command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5013129	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_6502_pseudo.c								
ANR	5013130	ClassDef	<unnamed>	13:8:223:280							
ANR	5013131	DeclStmt									
ANR	5013132	Decl									ADDR_TYPE
ANR	5013133	Function	replace	19:0:283:2418							
ANR	5013134	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr , ADDR_TYPE type)"		5013133	0					
ANR	5013135	CompoundStatement		19:79:362:2418	5013133	0					
ANR	5013136	IdentifierDeclStatement	"int i , j , k ;"	20:1:365:376	5013133	0	True				
ANR	5013137	IdentifierDecl	i		5013133	0					
ANR	5013138	IdentifierDeclType	int		5013133	0					
ANR	5013139	Identifier	i		5013133	1					
ANR	5013140	IdentifierDecl	j		5013133	1					
ANR	5013141	IdentifierDeclType	int		5013133	0					
ANR	5013142	Identifier	j		5013133	1					
ANR	5013143	IdentifierDecl	k		5013133	2					
ANR	5013144	IdentifierDeclType	int		5013133	0					
ANR	5013145	Identifier	k		5013133	1					
ANR	5013146	ClassDefStatement	"struct { int narg ; char * op ; char * str ; } ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } } ;"	21:1:379:1611	5013133	1	True				
ANR	5013147	IdentifierDecl	"ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } }"		5013133	0					
ANR	5013148	IdentifierDeclType	 [ ]		5013133	0					
ANR	5013149	Identifier	ops		5013133	1					
ANR	5013150	AssignmentExpression	"ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } }"		5013133	2		=			
ANR	5013151	Identifier	ops		5013133	0					
ANR	5013152	InitializerList	1		5013133	1					
ANR	5013153	InitializerList	1		5013133	0					
ANR	5013154	PrimaryExpression	1		5013133	0					
ANR	5013155	PrimaryExpression	"""lda"""		5013133	1					
ANR	5013156	PrimaryExpression	"""a = 1"""		5013133	2					
ANR	5013157	InitializerList	2		5013133	1					
ANR	5013158	PrimaryExpression	2		5013133	0					
ANR	5013159	PrimaryExpression	"""lda"""		5013133	1					
ANR	5013160	PrimaryExpression	"""a = (1+2)"""		5013133	2					
ANR	5013161	InitializerList	1		5013133	2					
ANR	5013162	PrimaryExpression	1		5013133	0					
ANR	5013163	PrimaryExpression	"""ldx"""		5013133	1					
ANR	5013164	PrimaryExpression	"""x = 1"""		5013133	2					
ANR	5013165	InitializerList	2		5013133	3					
ANR	5013166	PrimaryExpression	2		5013133	0					
ANR	5013167	PrimaryExpression	"""ldx"""		5013133	1					
ANR	5013168	PrimaryExpression	"""x = (1+2)"""		5013133	2					
ANR	5013169	InitializerList	1		5013133	4					
ANR	5013170	PrimaryExpression	1		5013133	0					
ANR	5013171	PrimaryExpression	"""ldy"""		5013133	1					
ANR	5013172	PrimaryExpression	"""y = 1"""		5013133	2					
ANR	5013173	InitializerList	2		5013133	5					
ANR	5013174	PrimaryExpression	2		5013133	0					
ANR	5013175	PrimaryExpression	"""ldy"""		5013133	1					
ANR	5013176	PrimaryExpression	"""y = (1+2)"""		5013133	2					
ANR	5013177	InitializerList	1		5013133	6					
ANR	5013178	PrimaryExpression	1		5013133	0					
ANR	5013179	PrimaryExpression	"""sta"""		5013133	1					
ANR	5013180	PrimaryExpression	"""[1] = a"""		5013133	2					
ANR	5013181	InitializerList	2		5013133	7					
ANR	5013182	PrimaryExpression	2		5013133	0					
ANR	5013183	PrimaryExpression	"""sta"""		5013133	1					
ANR	5013184	PrimaryExpression	"""[1+2 ] = a"""		5013133	2					
ANR	5013185	InitializerList	1		5013133	8					
ANR	5013186	PrimaryExpression	1		5013133	0					
ANR	5013187	PrimaryExpression	"""stx"""		5013133	1					
ANR	5013188	PrimaryExpression	"""[1] = x"""		5013133	2					
ANR	5013189	InitializerList	2		5013133	9					
ANR	5013190	PrimaryExpression	2		5013133	0					
ANR	5013191	PrimaryExpression	"""stx"""		5013133	1					
ANR	5013192	PrimaryExpression	"""[1+2] = x"""		5013133	2					
ANR	5013193	InitializerList	1		5013133	10					
ANR	5013194	PrimaryExpression	1		5013133	0					
ANR	5013195	PrimaryExpression	"""sty"""		5013133	1					
ANR	5013196	PrimaryExpression	"""[1] = y"""		5013133	2					
ANR	5013197	InitializerList	2		5013133	11					
ANR	5013198	PrimaryExpression	2		5013133	0					
ANR	5013199	PrimaryExpression	"""sty"""		5013133	1					
ANR	5013200	PrimaryExpression	"""[1+2] = y"""		5013133	2					
ANR	5013201	InitializerList	1		5013133	12					
ANR	5013202	PrimaryExpression	1		5013133	0					
ANR	5013203	PrimaryExpression	"""dec"""		5013133	1					
ANR	5013204	PrimaryExpression	"""1--"""		5013133	2					
ANR	5013205	InitializerList	2		5013133	13					
ANR	5013206	PrimaryExpression	2		5013133	0					
ANR	5013207	PrimaryExpression	"""dec"""		5013133	1					
ANR	5013208	PrimaryExpression	"""(1+2)--"""		5013133	2					
ANR	5013209	InitializerList	0		5013133	14					
ANR	5013210	PrimaryExpression	0		5013133	0					
ANR	5013211	PrimaryExpression	"""dcx"""		5013133	1					
ANR	5013212	PrimaryExpression	"""x--"""		5013133	2					
ANR	5013213	InitializerList	0		5013133	15					
ANR	5013214	PrimaryExpression	0		5013133	0					
ANR	5013215	PrimaryExpression	"""dcy"""		5013133	1					
ANR	5013216	PrimaryExpression	"""y--"""		5013133	2					
ANR	5013217	InitializerList	1		5013133	16					
ANR	5013218	PrimaryExpression	1		5013133	0					
ANR	5013219	PrimaryExpression	"""inc"""		5013133	1					
ANR	5013220	PrimaryExpression	"""1++"""		5013133	2					
ANR	5013221	InitializerList	2		5013133	17					
ANR	5013222	PrimaryExpression	2		5013133	0					
ANR	5013223	PrimaryExpression	"""inc"""		5013133	1					
ANR	5013224	PrimaryExpression	"""(1+2)++"""		5013133	2					
ANR	5013225	InitializerList	0		5013133	18					
ANR	5013226	PrimaryExpression	0		5013133	0					
ANR	5013227	PrimaryExpression	"""inx"""		5013133	1					
ANR	5013228	PrimaryExpression	"""x++"""		5013133	2					
ANR	5013229	InitializerList	0		5013133	19					
ANR	5013230	PrimaryExpression	0		5013133	0					
ANR	5013231	PrimaryExpression	"""iny"""		5013133	1					
ANR	5013232	PrimaryExpression	"""y++"""		5013133	2					
ANR	5013233	InitializerList	1		5013133	20					
ANR	5013234	PrimaryExpression	1		5013133	0					
ANR	5013235	PrimaryExpression	"""adc"""		5013133	1					
ANR	5013236	PrimaryExpression	"""a += 1"""		5013133	2					
ANR	5013237	InitializerList	2		5013133	21					
ANR	5013238	PrimaryExpression	2		5013133	0					
ANR	5013239	PrimaryExpression	"""adc"""		5013133	1					
ANR	5013240	PrimaryExpression	"""a += (1+2)"""		5013133	2					
ANR	5013241	InitializerList	1		5013133	22					
ANR	5013242	PrimaryExpression	1		5013133	0					
ANR	5013243	PrimaryExpression	"""sbc"""		5013133	1					
ANR	5013244	PrimaryExpression	"""a -= 1"""		5013133	2					
ANR	5013245	InitializerList	2		5013133	23					
ANR	5013246	PrimaryExpression	2		5013133	0					
ANR	5013247	PrimaryExpression	"""sbc"""		5013133	1					
ANR	5013248	PrimaryExpression	"""a -= (1+2)"""		5013133	2					
ANR	5013249	InitializerList	0		5013133	24					
ANR	5013250	PrimaryExpression	0		5013133	0					
ANR	5013251	PrimaryExpression	"""pha"""		5013133	1					
ANR	5013252	PrimaryExpression	"""push a"""		5013133	2					
ANR	5013253	InitializerList	1		5013133	25					
ANR	5013254	PrimaryExpression	1		5013133	0					
ANR	5013255	PrimaryExpression	"""and"""		5013133	1					
ANR	5013256	PrimaryExpression	"""a &= 1"""		5013133	2					
ANR	5013257	InitializerList	2		5013133	26					
ANR	5013258	PrimaryExpression	2		5013133	0					
ANR	5013259	PrimaryExpression	"""and"""		5013133	1					
ANR	5013260	PrimaryExpression	"""a &= (1+2)"""		5013133	2					
ANR	5013261	InitializerList	1		5013133	27					
ANR	5013262	PrimaryExpression	1		5013133	0					
ANR	5013263	PrimaryExpression	"""eor"""		5013133	1					
ANR	5013264	PrimaryExpression	"""a ^= 1"""		5013133	2					
ANR	5013265	InitializerList	2		5013133	28					
ANR	5013266	PrimaryExpression	2		5013133	0					
ANR	5013267	PrimaryExpression	"""eor"""		5013133	1					
ANR	5013268	PrimaryExpression	"""a ^= (1+2)"""		5013133	2					
ANR	5013269	InitializerList	1		5013133	29					
ANR	5013270	PrimaryExpression	1		5013133	0					
ANR	5013271	PrimaryExpression	"""ora"""		5013133	1					
ANR	5013272	PrimaryExpression	"""a |= 1"""		5013133	2					
ANR	5013273	InitializerList	2		5013133	30					
ANR	5013274	PrimaryExpression	2		5013133	0					
ANR	5013275	PrimaryExpression	"""ora"""		5013133	1					
ANR	5013276	PrimaryExpression	"""a |= (1+2)"""		5013133	2					
ANR	5013277	InitializerList	0		5013133	31					
ANR	5013278	PrimaryExpression	0		5013133	0					
ANR	5013279	PrimaryExpression	"""tax"""		5013133	1					
ANR	5013280	PrimaryExpression	"""x = a"""		5013133	2					
ANR	5013281	InitializerList	0		5013133	32					
ANR	5013282	PrimaryExpression	0		5013133	0					
ANR	5013283	PrimaryExpression	"""tay"""		5013133	1					
ANR	5013284	PrimaryExpression	"""y = a"""		5013133	2					
ANR	5013285	InitializerList	0		5013133	33					
ANR	5013286	PrimaryExpression	0		5013133	0					
ANR	5013287	PrimaryExpression	"""txa"""		5013133	1					
ANR	5013288	PrimaryExpression	"""a = x"""		5013133	2					
ANR	5013289	InitializerList	0		5013133	34					
ANR	5013290	PrimaryExpression	0		5013133	0					
ANR	5013291	PrimaryExpression	"""tya"""		5013133	1					
ANR	5013292	PrimaryExpression	"""a = y"""		5013133	2					
ANR	5013293	InitializerList	0		5013133	35					
ANR	5013294	PrimaryExpression	0		5013133	0					
ANR	5013295	PrimaryExpression	"""tsx"""		5013133	1					
ANR	5013296	PrimaryExpression	"""x = s"""		5013133	2					
ANR	5013297	InitializerList	0		5013133	36					
ANR	5013298	PrimaryExpression	0		5013133	0					
ANR	5013299	PrimaryExpression	"""txs"""		5013133	1					
ANR	5013300	PrimaryExpression	"""s = x"""		5013133	2					
ANR	5013301	InitializerList	0		5013133	37					
ANR	5013302	PrimaryExpression	0		5013133	0					
ANR	5013303	PrimaryExpression	"""brk"""		5013133	1					
ANR	5013304	PrimaryExpression	"""break"""		5013133	2					
ANR	5013305	InitializerList	0		5013133	38					
ANR	5013306	PrimaryExpression	0		5013133	0					
ANR	5013307	PrimaryExpression	"""clc"""		5013133	1					
ANR	5013308	PrimaryExpression	"""clear_carry"""		5013133	2					
ANR	5013309	InitializerList	0		5013133	39					
ANR	5013310	PrimaryExpression	0		5013133	0					
ANR	5013311	PrimaryExpression	"""cld"""		5013133	1					
ANR	5013312	PrimaryExpression	"""clear_decimal"""		5013133	2					
ANR	5013313	InitializerList	0		5013133	40					
ANR	5013314	PrimaryExpression	0		5013133	0					
ANR	5013315	PrimaryExpression	"""cli"""		5013133	1					
ANR	5013316	PrimaryExpression	"""clear_interrupt"""		5013133	2					
ANR	5013317	InitializerList	0		5013133	41					
ANR	5013318	PrimaryExpression	0		5013133	0					
ANR	5013319	PrimaryExpression	"""clv"""		5013133	1					
ANR	5013320	PrimaryExpression	"""clear_overflow"""		5013133	2					
ANR	5013321	InitializerList	0		5013133	42					
ANR	5013322	PrimaryExpression	0		5013133	0					
ANR	5013323	PrimaryExpression	"""sec"""		5013133	1					
ANR	5013324	PrimaryExpression	"""set_carry"""		5013133	2					
ANR	5013325	InitializerList	0		5013133	43					
ANR	5013326	PrimaryExpression	0		5013133	0					
ANR	5013327	PrimaryExpression	"""sed"""		5013133	1					
ANR	5013328	PrimaryExpression	"""set_decimal"""		5013133	2					
ANR	5013329	InitializerList	0		5013133	44					
ANR	5013330	PrimaryExpression	0		5013133	0					
ANR	5013331	PrimaryExpression	"""sei"""		5013133	1					
ANR	5013332	PrimaryExpression	"""set_interrupt"""		5013133	2					
ANR	5013333	InitializerList	1		5013133	45					
ANR	5013334	PrimaryExpression	1		5013133	0					
ANR	5013335	PrimaryExpression	"""jsr"""		5013133	1					
ANR	5013336	PrimaryExpression	"""1()"""		5013133	2					
ANR	5013337	InitializerList	0		5013133	46					
ANR	5013338	PrimaryExpression	0		5013133	0					
ANR	5013339	Identifier	NULL		5013133	1					
ANR	5013340	IfStatement	if ( ! newstr )		5013133	2					
ANR	5013341	Condition	! newstr	73:5:1618:1624	5013133	0	True				
ANR	5013342	UnaryOperationExpression	! newstr		5013133	0					
ANR	5013343	UnaryOperator	!		5013133	0					
ANR	5013344	Identifier	newstr		5013133	1					
ANR	5013345	CompoundStatement		55:14:1264:1264	5013133	1					
ANR	5013346	ReturnStatement	return false ;	74:2:1631:1643	5013133	0	True				
ANR	5013347	Identifier	false		5013133	0					
ANR	5013348	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5013133	3					
ANR	5013349	ForInit	i = 0 ;	77:6:1655:1660	5013133	0	True				
ANR	5013350	AssignmentExpression	i = 0		5013133	0		=			
ANR	5013351	Identifier	i		5013133	0					
ANR	5013352	PrimaryExpression	0		5013133	1					
ANR	5013353	Condition	ops [ i ] . op != NULL	77:13:1662:1678	5013133	1	True				
ANR	5013354	EqualityExpression	ops [ i ] . op != NULL		5013133	0		!=			
ANR	5013355	MemberAccess	ops [ i ] . op		5013133	0					
ANR	5013356	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013357	Identifier	ops		5013133	0					
ANR	5013358	Identifier	i		5013133	1					
ANR	5013359	Identifier	op		5013133	1					
ANR	5013360	Identifier	NULL		5013133	1					
ANR	5013361	PostIncDecOperationExpression	i ++	77:32:1681:1683	5013133	2	True				
ANR	5013362	Identifier	i		5013133	0					
ANR	5013363	IncDec	++		5013133	1					
ANR	5013364	CompoundStatement		59:37:1323:1323	5013133	3					
ANR	5013365	IfStatement	if ( ops [ i ] . narg )		5013133	0					
ANR	5013366	Condition	ops [ i ] . narg	78:6:1694:1704	5013133	0	True				
ANR	5013367	MemberAccess	ops [ i ] . narg		5013133	0					
ANR	5013368	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013369	Identifier	ops		5013133	0					
ANR	5013370	Identifier	i		5013133	1					
ANR	5013371	Identifier	narg		5013133	1					
ANR	5013372	CompoundStatement		60:19:1344:1344	5013133	1					
ANR	5013373	IfStatement	if ( argc - 1 != ops [ i ] . narg )		5013133	0					
ANR	5013374	Condition	argc - 1 != ops [ i ] . narg	79:7:1716:1738	5013133	0	True				
ANR	5013375	EqualityExpression	argc - 1 != ops [ i ] . narg		5013133	0		!=			
ANR	5013376	AdditiveExpression	argc - 1		5013133	0		-			
ANR	5013377	Identifier	argc		5013133	0					
ANR	5013378	PrimaryExpression	1		5013133	1					
ANR	5013379	MemberAccess	ops [ i ] . narg		5013133	1					
ANR	5013380	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013381	Identifier	ops		5013133	0					
ANR	5013382	Identifier	i		5013133	1					
ANR	5013383	Identifier	narg		5013133	1					
ANR	5013384	CompoundStatement		61:32:1378:1378	5013133	1					
ANR	5013385	ContinueStatement	continue ;	80:4:1747:1755	5013133	0	True				
ANR	5013386	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5013133	1					
ANR	5013387	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	83:6:1772:1798	5013133	0	True				
ANR	5013388	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5013133	0					
ANR	5013389	UnaryOperator	!		5013133	0					
ANR	5013390	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5013133	1					
ANR	5013391	Callee	strcmp		5013133	0					
ANR	5013392	Identifier	strcmp		5013133	0					
ANR	5013393	ArgumentList	ops [ i ] . op		5013133	1					
ANR	5013394	Argument	ops [ i ] . op		5013133	0					
ANR	5013395	MemberAccess	ops [ i ] . op		5013133	0					
ANR	5013396	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013397	Identifier	ops		5013133	0					
ANR	5013398	Identifier	i		5013133	1					
ANR	5013399	Identifier	op		5013133	1					
ANR	5013400	Argument	argv [ 0 ]		5013133	1					
ANR	5013401	ArrayIndexing	argv [ 0 ]		5013133	0					
ANR	5013402	Identifier	argv		5013133	0					
ANR	5013403	PrimaryExpression	0		5013133	1					
ANR	5013404	CompoundStatement		65:35:1438:1438	5013133	1					
ANR	5013405	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5013133	0					
ANR	5013406	ForInit	j = k = 0 ;	84:8:1811:1820	5013133	0	True				
ANR	5013407	AssignmentExpression	j = k = 0		5013133	0		=			
ANR	5013408	Identifier	j		5013133	0					
ANR	5013409	AssignmentExpression	k = 0		5013133	1		=			
ANR	5013410	Identifier	k		5013133	0					
ANR	5013411	PrimaryExpression	0		5013133	1					
ANR	5013412	Condition	ops [ i ] . str [ j ] != '\\0'	84:19:1822:1842	5013133	1	True				
ANR	5013413	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5013133	0		!=			
ANR	5013414	ArrayIndexing	ops [ i ] . str [ j ]		5013133	0					
ANR	5013415	MemberAccess	ops [ i ] . str		5013133	0					
ANR	5013416	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013417	Identifier	ops		5013133	0					
ANR	5013418	Identifier	i		5013133	1					
ANR	5013419	Identifier	str		5013133	1					
ANR	5013420	Identifier	j		5013133	1					
ANR	5013421	PrimaryExpression	'\\0'		5013133	1					
ANR	5013422	Expression	"j ++ , k ++"	84:42:1845:1852	5013133	2	True				
ANR	5013423	PostIncDecOperationExpression	j ++		5013133	0					
ANR	5013424	Identifier	j		5013133	0					
ANR	5013425	IncDec	++		5013133	1					
ANR	5013426	PostIncDecOperationExpression	k ++		5013133	1					
ANR	5013427	Identifier	k		5013133	0					
ANR	5013428	IncDec	++		5013133	1					
ANR	5013429	CompoundStatement		66:52:1492:1492	5013133	3					
ANR	5013430	IfStatement	if ( IS_DIGIT ( ops [ i ] . str [ j ] ) )		5013133	0					
ANR	5013431	Condition	IS_DIGIT ( ops [ i ] . str [ j ] )	85:8:1865:1887	5013133	0	True				
ANR	5013432	CallExpression	IS_DIGIT ( ops [ i ] . str [ j ] )		5013133	0					
ANR	5013433	Callee	IS_DIGIT		5013133	0					
ANR	5013434	Identifier	IS_DIGIT		5013133	0					
ANR	5013435	ArgumentList	ops [ i ] . str [ j ]		5013133	1					
ANR	5013436	Argument	ops [ i ] . str [ j ]		5013133	0					
ANR	5013437	ArrayIndexing	ops [ i ] . str [ j ]		5013133	0					
ANR	5013438	MemberAccess	ops [ i ] . str		5013133	0					
ANR	5013439	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013440	Identifier	ops		5013133	0					
ANR	5013441	Identifier	i		5013133	1					
ANR	5013442	Identifier	str		5013133	1					
ANR	5013443	Identifier	j		5013133	1					
ANR	5013444	CompoundStatement		68:5:1534:1575	5013133	1					
ANR	5013445	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	86:5:1897:1938	5013133	0	True				
ANR	5013446	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5013133	0					
ANR	5013447	IdentifierDeclType	const char *		5013133	0					
ANR	5013448	Identifier	w		5013133	1					
ANR	5013449	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5013133	2		=			
ANR	5013450	Identifier	w		5013133	0					
ANR	5013451	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5013133	1					
ANR	5013452	Identifier	argv		5013133	0					
ANR	5013453	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5013133	1		-			
ANR	5013454	ArrayIndexing	ops [ i ] . str [ j ]		5013133	0					
ANR	5013455	MemberAccess	ops [ i ] . str		5013133	0					
ANR	5013456	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013457	Identifier	ops		5013133	0					
ANR	5013458	Identifier	i		5013133	1					
ANR	5013459	Identifier	str		5013133	1					
ANR	5013460	Identifier	j		5013133	1					
ANR	5013461	PrimaryExpression	'0'		5013133	1					
ANR	5013462	IfStatement	if ( w != NULL )		5013133	1					
ANR	5013463	Condition	w != NULL	87:9:1949:1957	5013133	0	True				
ANR	5013464	EqualityExpression	w != NULL		5013133	0		!=			
ANR	5013465	Identifier	w		5013133	0					
ANR	5013466	Identifier	NULL		5013133	1					
ANR	5013467	CompoundStatement		69:20:1597:1597	5013133	1					
ANR	5013468	ExpressionStatement	"strcpy ( newstr + k , w )"	88:6:1968:1989	5013133	0	True				
ANR	5013469	CallExpression	"strcpy ( newstr + k , w )"		5013133	0					
ANR	5013470	Callee	strcpy		5013133	0					
ANR	5013471	Identifier	strcpy		5013133	0					
ANR	5013472	ArgumentList	newstr + k		5013133	1					
ANR	5013473	Argument	newstr + k		5013133	0					
ANR	5013474	AdditiveExpression	newstr + k		5013133	0		+			
ANR	5013475	Identifier	newstr		5013133	0					
ANR	5013476	Identifier	k		5013133	1					
ANR	5013477	Argument	w		5013133	1					
ANR	5013478	Identifier	w		5013133	0					
ANR	5013479	ExpressionStatement	k += strlen ( w ) - 1	89:6:1997:2015	5013133	1	True				
ANR	5013480	AssignmentExpression	k += strlen ( w ) - 1		5013133	0		+=			
ANR	5013481	Identifier	k		5013133	0					
ANR	5013482	AdditiveExpression	strlen ( w ) - 1		5013133	1		-			
ANR	5013483	CallExpression	strlen ( w )		5013133	0					
ANR	5013484	Callee	strlen		5013133	0					
ANR	5013485	Identifier	strlen		5013133	0					
ANR	5013486	ArgumentList	w		5013133	1					
ANR	5013487	Argument	w		5013133	0					
ANR	5013488	Identifier	w		5013133	0					
ANR	5013489	PrimaryExpression	1		5013133	1					
ANR	5013490	ElseStatement	else		5013133	0					
ANR	5013491	CompoundStatement		73:11:1672:1672	5013133	0					
ANR	5013492	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	92:5:2042:2067	5013133	0	True				
ANR	5013493	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5013133	0		=			
ANR	5013494	ArrayIndexing	newstr [ k ]		5013133	0					
ANR	5013495	Identifier	newstr		5013133	0					
ANR	5013496	Identifier	k		5013133	1					
ANR	5013497	ArrayIndexing	ops [ i ] . str [ j ]		5013133	1					
ANR	5013498	MemberAccess	ops [ i ] . str		5013133	0					
ANR	5013499	ArrayIndexing	ops [ i ]		5013133	0					
ANR	5013500	Identifier	ops		5013133	0					
ANR	5013501	Identifier	i		5013133	1					
ANR	5013502	Identifier	str		5013133	1					
ANR	5013503	Identifier	j		5013133	1					
ANR	5013504	ExpressionStatement	newstr [ k ] = '\\0'	95:3:2083:2099	5013133	1	True				
ANR	5013505	AssignmentExpression	newstr [ k ] = '\\0'		5013133	0		=			
ANR	5013506	ArrayIndexing	newstr [ k ]		5013133	0					
ANR	5013507	Identifier	newstr		5013133	0					
ANR	5013508	Identifier	k		5013133	1					
ANR	5013509	PrimaryExpression	'\\0'		5013133	1					
ANR	5013510	IfStatement	if ( argc == 4 && argv [ 2 ] [ 0 ] == '[' )		5013133	2					
ANR	5013511	Condition	argc == 4 && argv [ 2 ] [ 0 ] == '['	96:7:2108:2137	5013133	0	True				
ANR	5013512	AndExpression	argc == 4 && argv [ 2 ] [ 0 ] == '['		5013133	0		&&			
ANR	5013513	EqualityExpression	argc == 4		5013133	0		==			
ANR	5013514	Identifier	argc		5013133	0					
ANR	5013515	PrimaryExpression	4		5013133	1					
ANR	5013516	EqualityExpression	argv [ 2 ] [ 0 ] == '['		5013133	1		==			
ANR	5013517	ArrayIndexing	argv [ 2 ] [ 0 ]		5013133	0					
ANR	5013518	ArrayIndexing	argv [ 2 ]		5013133	0					
ANR	5013519	Identifier	argv		5013133	0					
ANR	5013520	PrimaryExpression	2		5013133	1					
ANR	5013521	PrimaryExpression	0		5013133	1					
ANR	5013522	PrimaryExpression	'['		5013133	1					
ANR	5013523	CompoundStatement		78:39:1777:1777	5013133	1					
ANR	5013524	ExpressionStatement	"strcat ( newstr + k , ""+"" )"	97:4:2146:2170	5013133	0	True				
ANR	5013525	CallExpression	"strcat ( newstr + k , ""+"" )"		5013133	0					
ANR	5013526	Callee	strcat		5013133	0					
ANR	5013527	Identifier	strcat		5013133	0					
ANR	5013528	ArgumentList	newstr + k		5013133	1					
ANR	5013529	Argument	newstr + k		5013133	0					
ANR	5013530	AdditiveExpression	newstr + k		5013133	0		+			
ANR	5013531	Identifier	newstr		5013133	0					
ANR	5013532	Identifier	k		5013133	1					
ANR	5013533	Argument	"""+"""		5013133	1					
ANR	5013534	PrimaryExpression	"""+"""		5013133	0					
ANR	5013535	ExpressionStatement	"strcat ( newstr + k + 3 , argv [ 2 ] )"	98:4:2176:2208	5013133	1	True				
ANR	5013536	CallExpression	"strcat ( newstr + k + 3 , argv [ 2 ] )"		5013133	0					
ANR	5013537	Callee	strcat		5013133	0					
ANR	5013538	Identifier	strcat		5013133	0					
ANR	5013539	ArgumentList	newstr + k + 3		5013133	1					
ANR	5013540	Argument	newstr + k + 3		5013133	0					
ANR	5013541	AdditiveExpression	newstr + k + 3		5013133	0		+			
ANR	5013542	Identifier	newstr		5013133	0					
ANR	5013543	AdditiveExpression	k + 3		5013133	1		+			
ANR	5013544	Identifier	k		5013133	0					
ANR	5013545	PrimaryExpression	3		5013133	1					
ANR	5013546	Argument	argv [ 2 ]		5013133	1					
ANR	5013547	ArrayIndexing	argv [ 2 ]		5013133	0					
ANR	5013548	Identifier	argv		5013133	0					
ANR	5013549	PrimaryExpression	2		5013133	1					
ANR	5013550	ReturnStatement	return true ;	100:3:2218:2229	5013133	3	True				
ANR	5013551	Identifier	true		5013133	0					
ANR	5013552	ExpressionStatement	newstr [ 0 ] = '\\0'	105:1:2266:2282	5013133	4	True				
ANR	5013553	AssignmentExpression	newstr [ 0 ] = '\\0'		5013133	0		=			
ANR	5013554	ArrayIndexing	newstr [ 0 ]		5013133	0					
ANR	5013555	Identifier	newstr		5013133	0					
ANR	5013556	PrimaryExpression	0		5013133	1					
ANR	5013557	PrimaryExpression	'\\0'		5013133	1					
ANR	5013558	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5013133	5					
ANR	5013559	ForInit	i = 0 ;	106:6:2290:2295	5013133	0	True				
ANR	5013560	AssignmentExpression	i = 0		5013133	0		=			
ANR	5013561	Identifier	i		5013133	0					
ANR	5013562	PrimaryExpression	0		5013133	1					
ANR	5013563	Condition	i < argc	106:13:2297:2304	5013133	1	True				
ANR	5013564	RelationalExpression	i < argc		5013133	0		<			
ANR	5013565	Identifier	i		5013133	0					
ANR	5013566	Identifier	argc		5013133	1					
ANR	5013567	PostIncDecOperationExpression	i ++	106:23:2307:2309	5013133	2	True				
ANR	5013568	Identifier	i		5013133	0					
ANR	5013569	IncDec	++		5013133	1					
ANR	5013570	CompoundStatement		88:28:1949:1949	5013133	3					
ANR	5013571	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	107:2:2316:2340	5013133	0	True				
ANR	5013572	CallExpression	"strcat ( newstr , argv [ i ] )"		5013133	0					
ANR	5013573	Callee	strcat		5013133	0					
ANR	5013574	Identifier	strcat		5013133	0					
ANR	5013575	ArgumentList	newstr		5013133	1					
ANR	5013576	Argument	newstr		5013133	0					
ANR	5013577	Identifier	newstr		5013133	0					
ANR	5013578	Argument	argv [ i ]		5013133	1					
ANR	5013579	ArrayIndexing	argv [ i ]		5013133	0					
ANR	5013580	Identifier	argv		5013133	0					
ANR	5013581	Identifier	i		5013133	1					
ANR	5013582	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"	108:2:2344:2398	5013133	1	True				
ANR	5013583	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"		5013133	0					
ANR	5013584	Callee	strcat		5013133	0					
ANR	5013585	Identifier	strcat		5013133	0					
ANR	5013586	ArgumentList	newstr		5013133	1					
ANR	5013587	Argument	newstr		5013133	0					
ANR	5013588	Identifier	newstr		5013133	0					
ANR	5013589	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5013133	1					
ANR	5013590	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5013133	0					
ANR	5013591	Condition	i == 0 || i == argc - 1		5013133	0					
ANR	5013592	OrExpression	i == 0 || i == argc - 1		5013133	0		||			
ANR	5013593	EqualityExpression	i == 0		5013133	0		==			
ANR	5013594	Identifier	i		5013133	0					
ANR	5013595	PrimaryExpression	0		5013133	1					
ANR	5013596	EqualityExpression	i == argc - 1		5013133	1		==			
ANR	5013597	Identifier	i		5013133	0					
ANR	5013598	AdditiveExpression	argc - 1		5013133	1		-			
ANR	5013599	Identifier	argc		5013133	0					
ANR	5013600	PrimaryExpression	1		5013133	1					
ANR	5013601	PrimaryExpression	""" """		5013133	1					
ANR	5013602	PrimaryExpression	""","""		5013133	2					
ANR	5013603	ReturnStatement	return false ;	110:1:2404:2416	5013133	6	True				
ANR	5013604	Identifier	false		5013133	0					
ANR	5013605	ReturnType	static int		5013133	1					
ANR	5013606	Identifier	replace		5013133	2					
ANR	5013607	ParameterList	"int argc , const char * argv [ ] , char * newstr , ADDR_TYPE type"		5013133	3					
ANR	5013608	Parameter	int argc	19:19:302:309	5013133	0	True				
ANR	5013609	ParameterType	int		5013133	0					
ANR	5013610	Identifier	argc		5013133	1					
ANR	5013611	Parameter	const char * argv [ ]	19:29:312:329	5013133	1	True				
ANR	5013612	ParameterType	const char * [ ]		5013133	0					
ANR	5013613	Identifier	argv		5013133	1					
ANR	5013614	Parameter	char * newstr	19:49:332:343	5013133	2	True				
ANR	5013615	ParameterType	char *		5013133	0					
ANR	5013616	Identifier	newstr		5013133	1					
ANR	5013617	Parameter	ADDR_TYPE type	19:63:346:359	5013133	3	True				
ANR	5013618	ParameterType	ADDR_TYPE		5013133	0					
ANR	5013619	Identifier	type		5013133	1					
ANR	5013620	CFGEntryNode	ENTRY		5013133		True				
ANR	5013621	CFGExitNode	EXIT		5013133		True				
ANR	5013622	Symbol	* ops [ i ] . str		5013133						
ANR	5013623	Symbol	* * ops		5013133						
ANR	5013624	Symbol	* argv		5013133						
ANR	5013625	Symbol	type		5013133						
ANR	5013626	Symbol	argv		5013133						
ANR	5013627	Symbol	ops [ i ] . str		5013133						
ANR	5013628	Symbol	strlen		5013133						
ANR	5013629	Symbol	ops [ i ] . narg		5013133						
ANR	5013630	Symbol	ops [ i ] . op		5013133						
ANR	5013631	Symbol	* * argv		5013133						
ANR	5013632	Symbol	* ops		5013133						
ANR	5013633	Symbol	argc		5013133						
ANR	5013634	Symbol	strcmp		5013133						
ANR	5013635	Symbol	* * j		5013133						
ANR	5013636	Symbol	* * i		5013133						
ANR	5013637	Symbol	NULL		5013133						
ANR	5013638	Symbol	false		5013133						
ANR	5013639	Symbol	* * ops [ i ] . str		5013133						
ANR	5013640	Symbol	i		5013133						
ANR	5013641	Symbol	j		5013133						
ANR	5013642	Symbol	k		5013133						
ANR	5013643	Symbol	newstr		5013133						
ANR	5013644	Symbol	IS_DIGIT		5013133						
ANR	5013645	Symbol	* * * ops		5013133						
ANR	5013646	Symbol	ops		5013133						
ANR	5013647	Symbol	* i		5013133						
ANR	5013648	Symbol	* newstr		5013133						
ANR	5013649	Symbol	* j		5013133						
ANR	5013650	Symbol	* k		5013133						
ANR	5013651	Symbol	w		5013133						
ANR	5013652	Symbol	* * * i		5013133						
ANR	5013653	Symbol	true		5013133						
ANR	5013654	Function	addr_type	113:0:2421:2635							
ANR	5013655	FunctionDef	addr_type (const char * str)		5013654	0					
ANR	5013656	CompoundStatement		113:44:2465:2635	5013654	0					
ANR	5013657	IfStatement	"if ( strchr ( str , '(' ) )"		5013654	0					
ANR	5013658	Condition	"strchr ( str , '(' )"	114:5:2472:2487	5013654	0	True				
ANR	5013659	CallExpression	"strchr ( str , '(' )"		5013654	0					
ANR	5013660	Callee	strchr		5013654	0					
ANR	5013661	Identifier	strchr		5013654	0					
ANR	5013662	ArgumentList	str		5013654	1					
ANR	5013663	Argument	str		5013654	0					
ANR	5013664	Identifier	str		5013654	0					
ANR	5013665	Argument	'('		5013654	1					
ANR	5013666	PrimaryExpression	'('		5013654	0					
ANR	5013667	CompoundStatement		7:2:91:116	5013654	1					
ANR	5013668	IdentifierDeclStatement	"char * e = strchr ( str , ')' ) ;"	115:2:2494:2521	5013654	0	True				
ANR	5013669	IdentifierDecl	"* e = strchr ( str , ')' )"		5013654	0					
ANR	5013670	IdentifierDeclType	char *		5013654	0					
ANR	5013671	Identifier	e		5013654	1					
ANR	5013672	AssignmentExpression	"* e = strchr ( str , ')' )"		5013654	2		=			
ANR	5013673	Identifier	e		5013654	0					
ANR	5013674	CallExpression	"strchr ( str , ')' )"		5013654	1					
ANR	5013675	Callee	strchr		5013654	0					
ANR	5013676	Identifier	strchr		5013654	0					
ANR	5013677	ArgumentList	str		5013654	1					
ANR	5013678	Argument	str		5013654	0					
ANR	5013679	Identifier	str		5013654	0					
ANR	5013680	Argument	')'		5013654	1					
ANR	5013681	PrimaryExpression	')'		5013654	0					
ANR	5013682	IfStatement	if ( ! e )		5013654	1					
ANR	5013683	Condition	! e	116:6:2529:2530	5013654	0	True				
ANR	5013684	UnaryOperationExpression	! e		5013654	0					
ANR	5013685	UnaryOperator	!		5013654	0					
ANR	5013686	Identifier	e		5013654	1					
ANR	5013687	CompoundStatement		4:10:67:67	5013654	1					
ANR	5013688	ReturnStatement	return NORM ;	117:3:2538:2549	5013654	0	True				
ANR	5013689	Identifier	NORM		5013654	0					
ANR	5013690	IdentifierDeclStatement	"char * o = strchr ( e , ',' ) ;"	119:2:2557:2582	5013654	2	True				
ANR	5013691	IdentifierDecl	"* o = strchr ( e , ',' )"		5013654	0					
ANR	5013692	IdentifierDeclType	char *		5013654	0					
ANR	5013693	Identifier	o		5013654	1					
ANR	5013694	AssignmentExpression	"* o = strchr ( e , ',' )"		5013654	2		=			
ANR	5013695	Identifier	o		5013654	0					
ANR	5013696	CallExpression	"strchr ( e , ',' )"		5013654	1					
ANR	5013697	Callee	strchr		5013654	0					
ANR	5013698	Identifier	strchr		5013654	0					
ANR	5013699	ArgumentList	e		5013654	1					
ANR	5013700	Argument	e		5013654	0					
ANR	5013701	Identifier	e		5013654	0					
ANR	5013702	Argument	"','"		5013654	1					
ANR	5013703	PrimaryExpression	"','"		5013654	0					
ANR	5013704	ReturnStatement	return ( o ) ? IND_IDX : IDX_IND ;	120:2:2586:2616	5013654	3	True				
ANR	5013705	ConditionalExpression	( o ) ? IND_IDX : IDX_IND		5013654	0					
ANR	5013706	Condition	o		5013654	0					
ANR	5013707	Identifier	o		5013654	0					
ANR	5013708	Identifier	IND_IDX		5013654	1					
ANR	5013709	Identifier	IDX_IND		5013654	2					
ANR	5013710	ReturnStatement	return NORM ;	122:1:2622:2633	5013654	1	True				
ANR	5013711	Identifier	NORM		5013654	0					
ANR	5013712	ReturnType	static ADDR_TYPE		5013654	1					
ANR	5013713	Identifier	addr_type		5013654	2					
ANR	5013714	ParameterList	const char * str		5013654	3					
ANR	5013715	Parameter	const char * str	113:27:2448:2462	5013654	0	True				
ANR	5013716	ParameterType	const char *		5013654	0					
ANR	5013717	Identifier	str		5013654	1					
ANR	5013718	CFGEntryNode	ENTRY		5013654		True				
ANR	5013719	CFGExitNode	EXIT		5013654		True				
ANR	5013720	Symbol	str		5013654						
ANR	5013721	Symbol	e		5013654						
ANR	5013722	Symbol	IND_IDX		5013654						
ANR	5013723	Symbol	NORM		5013654						
ANR	5013724	Symbol	strchr		5013654						
ANR	5013725	Symbol	IDX_IND		5013654						
ANR	5013726	Symbol	o		5013654						
ANR	5013727	Function	parse	125:0:2638:3775							
ANR	5013728	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5013727	0					
ANR	5013729	CompoundStatement		125:57:2695:3775	5013727	0					
ANR	5013730	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] ;"	126:1:2698:2728	5013727	0	True				
ANR	5013731	IdentifierDecl	w0 [ 256 ]		5013727	0					
ANR	5013732	IdentifierDeclType	char [ 256 ]		5013727	0					
ANR	5013733	Identifier	w0		5013727	1					
ANR	5013734	PrimaryExpression	256		5013727	2					
ANR	5013735	IdentifierDecl	w1 [ 256 ]		5013727	1					
ANR	5013736	IdentifierDeclType	char [ 256 ]		5013727	0					
ANR	5013737	Identifier	w1		5013727	1					
ANR	5013738	PrimaryExpression	256		5013727	2					
ANR	5013739	IdentifierDecl	w2 [ 256 ]		5013727	2					
ANR	5013740	IdentifierDeclType	char [ 256 ]		5013727	0					
ANR	5013741	Identifier	w2		5013727	1					
ANR	5013742	PrimaryExpression	256		5013727	2					
ANR	5013743	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	127:1:2731:2757	5013727	1	True				
ANR	5013744	IdentifierDecl	i		5013727	0					
ANR	5013745	IdentifierDeclType	int		5013727	0					
ANR	5013746	Identifier	i		5013727	1					
ANR	5013747	IdentifierDecl	len = strlen ( data )		5013727	1					
ANR	5013748	IdentifierDeclType	int		5013727	0					
ANR	5013749	Identifier	len		5013727	1					
ANR	5013750	AssignmentExpression	len = strlen ( data )		5013727	2		=			
ANR	5013751	Identifier	len		5013727	0					
ANR	5013752	CallExpression	strlen ( data )		5013727	1					
ANR	5013753	Callee	strlen		5013727	0					
ANR	5013754	Identifier	strlen		5013727	0					
ANR	5013755	ArgumentList	data		5013727	1					
ANR	5013756	Argument	data		5013727	0					
ANR	5013757	Identifier	data		5013727	0					
ANR	5013758	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	128:1:2760:2782	5013727	2	True				
ANR	5013759	IdentifierDecl	* buf		5013727	0					
ANR	5013760	IdentifierDeclType	char *		5013727	0					
ANR	5013761	Identifier	buf		5013727	1					
ANR	5013762	IdentifierDecl	* ptr		5013727	1					
ANR	5013763	IdentifierDeclType	char *		5013727	0					
ANR	5013764	Identifier	ptr		5013727	1					
ANR	5013765	IdentifierDecl	* optr		5013727	2					
ANR	5013766	IdentifierDeclType	char *		5013727	0					
ANR	5013767	Identifier	optr		5013727	1					
ANR	5013768	IdentifierDeclStatement	ADDR_TYPE atype ;	129:1:2785:2800	5013727	3	True				
ANR	5013769	IdentifierDecl	atype		5013727	0					
ANR	5013770	IdentifierDeclType	ADDR_TYPE		5013727	0					
ANR	5013771	Identifier	atype		5013727	1					
ANR	5013772	IfStatement	if ( len >= sizeof ( w0 ) )		5013727	4					
ANR	5013773	Condition	len >= sizeof ( w0 )	131:5:2808:2825	5013727	0	True				
ANR	5013774	RelationalExpression	len >= sizeof ( w0 )		5013727	0		>=			
ANR	5013775	Identifier	len		5013727	0					
ANR	5013776	SizeofExpression	sizeof ( w0 )		5013727	1					
ANR	5013777	Sizeof	sizeof		5013727	0					
ANR	5013778	SizeofOperand	w0		5013727	1					
ANR	5013779	CompoundStatement		7:25:132:132	5013727	1					
ANR	5013780	ReturnStatement	return false ;	132:2:2832:2844	5013727	0	True				
ANR	5013781	Identifier	false		5013727	0					
ANR	5013782	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5013727	5					
ANR	5013783	Condition	! ( buf = malloc ( len + 1 ) )	135:5:2885:2909	5013727	0	True				
ANR	5013784	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5013727	0					
ANR	5013785	UnaryOperator	!		5013727	0					
ANR	5013786	AssignmentExpression	buf = malloc ( len + 1 )		5013727	1		=			
ANR	5013787	Identifier	buf		5013727	0					
ANR	5013788	CallExpression	malloc ( len + 1 )		5013727	1					
ANR	5013789	Callee	malloc		5013727	0					
ANR	5013790	Identifier	malloc		5013727	0					
ANR	5013791	ArgumentList	len + 1		5013727	1					
ANR	5013792	Argument	len + 1		5013727	0					
ANR	5013793	AdditiveExpression	len + 1		5013727	0		+			
ANR	5013794	Identifier	len		5013727	0					
ANR	5013795	PrimaryExpression	1		5013727	1					
ANR	5013796	CompoundStatement		11:32:216:216	5013727	1					
ANR	5013797	ReturnStatement	return false ;	136:2:2916:2928	5013727	0	True				
ANR	5013798	Identifier	false		5013727	0					
ANR	5013799	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	138:1:2934:2961	5013727	6	True				
ANR	5013800	CallExpression	"memcpy ( buf , data , len + 1 )"		5013727	0					
ANR	5013801	Callee	memcpy		5013727	0					
ANR	5013802	Identifier	memcpy		5013727	0					
ANR	5013803	ArgumentList	buf		5013727	1					
ANR	5013804	Argument	buf		5013727	0					
ANR	5013805	Identifier	buf		5013727	0					
ANR	5013806	Argument	data		5013727	1					
ANR	5013807	Identifier	data		5013727	0					
ANR	5013808	Argument	len + 1		5013727	2					
ANR	5013809	AdditiveExpression	len + 1		5013727	0		+			
ANR	5013810	Identifier	len		5013727	0					
ANR	5013811	PrimaryExpression	1		5013727	1					
ANR	5013812	IfStatement	if ( * buf )		5013727	7					
ANR	5013813	Condition	* buf	140:5:2969:2972	5013727	0	True				
ANR	5013814	UnaryOperationExpression	* buf		5013727	0					
ANR	5013815	UnaryOperator	*		5013727	0					
ANR	5013816	Identifier	buf		5013727	1					
ANR	5013817	CompoundStatement		47:2:937:947	5013727	1					
ANR	5013818	ExpressionStatement	atype = addr_type ( buf )	141:2:2979:3002	5013727	0	True				
ANR	5013819	AssignmentExpression	atype = addr_type ( buf )		5013727	0		=			
ANR	5013820	Identifier	atype		5013727	0					
ANR	5013821	CallExpression	addr_type ( buf )		5013727	1					
ANR	5013822	Callee	addr_type		5013727	0					
ANR	5013823	Identifier	addr_type		5013727	0					
ANR	5013824	ArgumentList	buf		5013727	1					
ANR	5013825	Argument	buf		5013727	0					
ANR	5013826	Identifier	buf		5013727	0					
ANR	5013827	ExpressionStatement	"r_str_replace_char ( buf , '(' , ' ' )"	142:2:3006:3040	5013727	1	True				
ANR	5013828	CallExpression	"r_str_replace_char ( buf , '(' , ' ' )"		5013727	0					
ANR	5013829	Callee	r_str_replace_char		5013727	0					
ANR	5013830	Identifier	r_str_replace_char		5013727	0					
ANR	5013831	ArgumentList	buf		5013727	1					
ANR	5013832	Argument	buf		5013727	0					
ANR	5013833	Identifier	buf		5013727	0					
ANR	5013834	Argument	'('		5013727	1					
ANR	5013835	PrimaryExpression	'('		5013727	0					
ANR	5013836	Argument	' '		5013727	2					
ANR	5013837	PrimaryExpression	' '		5013727	0					
ANR	5013838	ExpressionStatement	"r_str_replace_char ( buf , ')' , ' ' )"	143:2:3044:3078	5013727	2	True				
ANR	5013839	CallExpression	"r_str_replace_char ( buf , ')' , ' ' )"		5013727	0					
ANR	5013840	Callee	r_str_replace_char		5013727	0					
ANR	5013841	Identifier	r_str_replace_char		5013727	0					
ANR	5013842	ArgumentList	buf		5013727	1					
ANR	5013843	Argument	buf		5013727	0					
ANR	5013844	Identifier	buf		5013727	0					
ANR	5013845	Argument	')'		5013727	1					
ANR	5013846	PrimaryExpression	')'		5013727	0					
ANR	5013847	Argument	' '		5013727	2					
ANR	5013848	PrimaryExpression	' '		5013727	0					
ANR	5013849	ExpressionStatement	* w0 = * w1 = * w2 = '\\0'	144:2:3082:3104	5013727	3	True				
ANR	5013850	AssignmentExpression	* w0 = * w1 = * w2 = '\\0'		5013727	0		=			
ANR	5013851	UnaryOperationExpression	* w0		5013727	0					
ANR	5013852	UnaryOperator	*		5013727	0					
ANR	5013853	Identifier	w0		5013727	1					
ANR	5013854	AssignmentExpression	* w1 = * w2 = '\\0'		5013727	1		=			
ANR	5013855	UnaryOperationExpression	* w1		5013727	0					
ANR	5013856	UnaryOperator	*		5013727	0					
ANR	5013857	Identifier	w1		5013727	1					
ANR	5013858	AssignmentExpression	* w2 = '\\0'		5013727	1		=			
ANR	5013859	UnaryOperationExpression	* w2		5013727	0					
ANR	5013860	UnaryOperator	*		5013727	0					
ANR	5013861	Identifier	w2		5013727	1					
ANR	5013862	PrimaryExpression	'\\0'		5013727	1					
ANR	5013863	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	145:2:3108:3131	5013727	4	True				
ANR	5013864	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5013727	0		=			
ANR	5013865	Identifier	ptr		5013727	0					
ANR	5013866	CallExpression	"strchr ( buf , ' ' )"		5013727	1					
ANR	5013867	Callee	strchr		5013727	0					
ANR	5013868	Identifier	strchr		5013727	0					
ANR	5013869	ArgumentList	buf		5013727	1					
ANR	5013870	Argument	buf		5013727	0					
ANR	5013871	Identifier	buf		5013727	0					
ANR	5013872	Argument	' '		5013727	1					
ANR	5013873	PrimaryExpression	' '		5013727	0					
ANR	5013874	IfStatement	if ( ! ptr )		5013727	5					
ANR	5013875	Condition	! ptr	146:6:3139:3142	5013727	0	True				
ANR	5013876	UnaryOperationExpression	! ptr		5013727	0					
ANR	5013877	UnaryOperator	!		5013727	0					
ANR	5013878	Identifier	ptr		5013727	1					
ANR	5013879	CompoundStatement		22:12:449:449	5013727	1					
ANR	5013880	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	147:3:3150:3174	5013727	0	True				
ANR	5013881	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5013727	0		=			
ANR	5013882	Identifier	ptr		5013727	0					
ANR	5013883	CallExpression	"strchr ( buf , '\\t' )"		5013727	1					
ANR	5013884	Callee	strchr		5013727	0					
ANR	5013885	Identifier	strchr		5013727	0					
ANR	5013886	ArgumentList	buf		5013727	1					
ANR	5013887	Argument	buf		5013727	0					
ANR	5013888	Identifier	buf		5013727	0					
ANR	5013889	Argument	'\\t'		5013727	1					
ANR	5013890	PrimaryExpression	'\\t'		5013727	0					
ANR	5013891	IfStatement	if ( ptr )		5013727	6					
ANR	5013892	Condition	ptr	149:6:3186:3188	5013727	0	True				
ANR	5013893	Identifier	ptr		5013727	0					
ANR	5013894	CompoundStatement		25:11:495:495	5013727	1					
ANR	5013895	ExpressionStatement	* ptr = '\\0'	150:3:3196:3207	5013727	0	True				
ANR	5013896	AssignmentExpression	* ptr = '\\0'		5013727	0		=			
ANR	5013897	UnaryOperationExpression	* ptr		5013727	0					
ANR	5013898	UnaryOperator	*		5013727	0					
ANR	5013899	Identifier	ptr		5013727	1					
ANR	5013900	PrimaryExpression	'\\0'		5013727	1					
ANR	5013901	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5013727	1					
ANR	5013902	ForInit	++ ptr ;	151:8:3217:3222	5013727	0	True				
ANR	5013903	UnaryExpression	++ ptr		5013727	0					
ANR	5013904	IncDec	++		5013727	0					
ANR	5013905	Identifier	ptr		5013727	1					
ANR	5013906	Condition	* ptr == ' '	151:15:3224:3234	5013727	1	True				
ANR	5013907	EqualityExpression	* ptr == ' '		5013727	0		==			
ANR	5013908	UnaryOperationExpression	* ptr		5013727	0					
ANR	5013909	UnaryOperator	*		5013727	0					
ANR	5013910	Identifier	ptr		5013727	1					
ANR	5013911	PrimaryExpression	' '		5013727	1					
ANR	5013912	PostIncDecOperationExpression	ptr ++	151:28:3237:3241	5013727	2	True				
ANR	5013913	Identifier	ptr		5013727	0					
ANR	5013914	IncDec	++		5013727	1					
ANR	5013915	CompoundStatement		27:35:548:548	5013727	3					
ANR	5013916	ExpressionStatement		152:4:3250:3250	5013727	0	True				
ANR	5013917	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	154:3:3260:3293	5013727	2	True				
ANR	5013918	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5013727	0					
ANR	5013919	Callee	strncpy		5013727	0					
ANR	5013920	Identifier	strncpy		5013727	0					
ANR	5013921	ArgumentList	w0		5013727	1					
ANR	5013922	Argument	w0		5013727	0					
ANR	5013923	Identifier	w0		5013727	0					
ANR	5013924	Argument	buf		5013727	1					
ANR	5013925	Identifier	buf		5013727	0					
ANR	5013926	Argument	sizeof ( w0 ) - 1		5013727	2					
ANR	5013927	AdditiveExpression	sizeof ( w0 ) - 1		5013727	0		-			
ANR	5013928	SizeofExpression	sizeof ( w0 )		5013727	0					
ANR	5013929	Sizeof	sizeof		5013727	0					
ANR	5013930	SizeofOperand	w0		5013727	1					
ANR	5013931	PrimaryExpression	1		5013727	1					
ANR	5013932	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	155:3:3298:3331	5013727	3	True				
ANR	5013933	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5013727	0					
ANR	5013934	Callee	strncpy		5013727	0					
ANR	5013935	Identifier	strncpy		5013727	0					
ANR	5013936	ArgumentList	w1		5013727	1					
ANR	5013937	Argument	w1		5013727	0					
ANR	5013938	Identifier	w1		5013727	0					
ANR	5013939	Argument	ptr		5013727	1					
ANR	5013940	Identifier	ptr		5013727	0					
ANR	5013941	Argument	sizeof ( w1 ) - 1		5013727	2					
ANR	5013942	AdditiveExpression	sizeof ( w1 ) - 1		5013727	0		-			
ANR	5013943	SizeofExpression	sizeof ( w1 )		5013727	0					
ANR	5013944	Sizeof	sizeof		5013727	0					
ANR	5013945	SizeofOperand	w1		5013727	1					
ANR	5013946	PrimaryExpression	1		5013727	1					
ANR	5013947	ExpressionStatement	optr = ptr	156:3:3336:3346	5013727	4	True				
ANR	5013948	AssignmentExpression	optr = ptr		5013727	0		=			
ANR	5013949	Identifier	optr		5013727	0					
ANR	5013950	Identifier	ptr		5013727	1					
ANR	5013951	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	157:3:3351:3374	5013727	5	True				
ANR	5013952	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5013727	0		=			
ANR	5013953	Identifier	ptr		5013727	0					
ANR	5013954	CallExpression	"strchr ( ptr , ',' )"		5013727	1					
ANR	5013955	Callee	strchr		5013727	0					
ANR	5013956	Identifier	strchr		5013727	0					
ANR	5013957	ArgumentList	ptr		5013727	1					
ANR	5013958	Argument	ptr		5013727	0					
ANR	5013959	Identifier	ptr		5013727	0					
ANR	5013960	Argument	"','"		5013727	1					
ANR	5013961	PrimaryExpression	"','"		5013727	0					
ANR	5013962	IfStatement	if ( ptr )		5013727	6					
ANR	5013963	Condition	ptr	158:7:3383:3385	5013727	0	True				
ANR	5013964	Identifier	ptr		5013727	0					
ANR	5013965	CompoundStatement		34:12:692:692	5013727	1					
ANR	5013966	ExpressionStatement	* ptr = '\\0'	159:4:3394:3405	5013727	0	True				
ANR	5013967	AssignmentExpression	* ptr = '\\0'		5013727	0		=			
ANR	5013968	UnaryOperationExpression	* ptr		5013727	0					
ANR	5013969	UnaryOperator	*		5013727	0					
ANR	5013970	Identifier	ptr		5013727	1					
ANR	5013971	PrimaryExpression	'\\0'		5013727	1					
ANR	5013972	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5013727	1					
ANR	5013973	ForInit	++ ptr ;	160:9:3416:3421	5013727	0	True				
ANR	5013974	UnaryExpression	++ ptr		5013727	0					
ANR	5013975	IncDec	++		5013727	0					
ANR	5013976	Identifier	ptr		5013727	1					
ANR	5013977	Condition	* ptr == ' '	160:16:3423:3433	5013727	1	True				
ANR	5013978	EqualityExpression	* ptr == ' '		5013727	0		==			
ANR	5013979	UnaryOperationExpression	* ptr		5013727	0					
ANR	5013980	UnaryOperator	*		5013727	0					
ANR	5013981	Identifier	ptr		5013727	1					
ANR	5013982	PrimaryExpression	' '		5013727	1					
ANR	5013983	PostIncDecOperationExpression	ptr ++	160:29:3436:3440	5013727	2	True				
ANR	5013984	Identifier	ptr		5013727	0					
ANR	5013985	IncDec	++		5013727	1					
ANR	5013986	CompoundStatement		36:36:747:747	5013727	3					
ANR	5013987	ExpressionStatement		161:5:3450:3450	5013727	0	True				
ANR	5013988	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	163:4:3462:3496	5013727	2	True				
ANR	5013989	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5013727	0					
ANR	5013990	Callee	strncpy		5013727	0					
ANR	5013991	Identifier	strncpy		5013727	0					
ANR	5013992	ArgumentList	w1		5013727	1					
ANR	5013993	Argument	w1		5013727	0					
ANR	5013994	Identifier	w1		5013727	0					
ANR	5013995	Argument	optr		5013727	1					
ANR	5013996	Identifier	optr		5013727	0					
ANR	5013997	Argument	sizeof ( w1 ) - 1		5013727	2					
ANR	5013998	AdditiveExpression	sizeof ( w1 ) - 1		5013727	0		-			
ANR	5013999	SizeofExpression	sizeof ( w1 )		5013727	0					
ANR	5014000	Sizeof	sizeof		5013727	0					
ANR	5014001	SizeofOperand	w1		5013727	1					
ANR	5014002	PrimaryExpression	1		5013727	1					
ANR	5014003	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	164:4:3502:3535	5013727	3	True				
ANR	5014004	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5013727	0					
ANR	5014005	Callee	strncpy		5013727	0					
ANR	5014006	Identifier	strncpy		5013727	0					
ANR	5014007	ArgumentList	w2		5013727	1					
ANR	5014008	Argument	w2		5013727	0					
ANR	5014009	Identifier	w2		5013727	0					
ANR	5014010	Argument	ptr		5013727	1					
ANR	5014011	Identifier	ptr		5013727	0					
ANR	5014012	Argument	sizeof ( w2 ) - 1		5013727	2					
ANR	5014013	AdditiveExpression	sizeof ( w2 ) - 1		5013727	0		-			
ANR	5014014	SizeofExpression	sizeof ( w2 )		5013727	0					
ANR	5014015	Sizeof	sizeof		5013727	0					
ANR	5014016	SizeofOperand	w2		5013727	1					
ANR	5014017	PrimaryExpression	1		5013727	1					
ANR	5014018	ElseStatement	else		5013727	0					
ANR	5014019	CompoundStatement		42:9:855:855	5013727	0					
ANR	5014020	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	167:3:3556:3589	5013727	0	True				
ANR	5014021	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5013727	0					
ANR	5014022	Callee	strncpy		5013727	0					
ANR	5014023	Identifier	strncpy		5013727	0					
ANR	5014024	ArgumentList	w0		5013727	1					
ANR	5014025	Argument	w0		5013727	0					
ANR	5014026	Identifier	w0		5013727	0					
ANR	5014027	Argument	buf		5013727	1					
ANR	5014028	Identifier	buf		5013727	0					
ANR	5014029	Argument	sizeof ( w0 ) - 1		5013727	2					
ANR	5014030	AdditiveExpression	sizeof ( w0 ) - 1		5013727	0		-			
ANR	5014031	SizeofExpression	sizeof ( w0 )		5013727	0					
ANR	5014032	Sizeof	sizeof		5013727	0					
ANR	5014033	SizeofOperand	w0		5013727	1					
ANR	5014034	PrimaryExpression	1		5013727	1					
ANR	5014035	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 } ;"	170:2:3598:3629	5013727	7	True				
ANR	5014036	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 }"		5013727	0					
ANR	5014037	IdentifierDeclType	const char * [ ]		5013727	0					
ANR	5014038	Identifier	wa		5013727	1					
ANR	5014039	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 }"		5013727	2		=			
ANR	5014040	Identifier	wa		5013727	0					
ANR	5014041	InitializerList	w0		5013727	1					
ANR	5014042	Identifier	w0		5013727	0					
ANR	5014043	Identifier	w1		5013727	1					
ANR	5014044	Identifier	w2		5013727	2					
ANR	5014045	IdentifierDeclStatement	int nw = 0 ;	171:2:3633:3643	5013727	8	True				
ANR	5014046	IdentifierDecl	nw = 0		5013727	0					
ANR	5014047	IdentifierDeclType	int		5013727	0					
ANR	5014048	Identifier	nw		5013727	1					
ANR	5014049	AssignmentExpression	nw = 0		5013727	2		=			
ANR	5014050	Identifier	nw		5013727	0					
ANR	5014051	PrimaryExpression	0		5013727	1					
ANR	5014052	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		5013727	9					
ANR	5014053	ForInit	i = 0 ;	172:7:3652:3657	5013727	0	True				
ANR	5014054	AssignmentExpression	i = 0		5013727	0		=			
ANR	5014055	Identifier	i		5013727	0					
ANR	5014056	PrimaryExpression	0		5013727	1					
ANR	5014057	Condition	i < 3	172:14:3659:3663	5013727	1	True				
ANR	5014058	RelationalExpression	i < 3		5013727	0		<			
ANR	5014059	Identifier	i		5013727	0					
ANR	5014060	PrimaryExpression	3		5013727	1					
ANR	5014061	PostIncDecOperationExpression	i ++	172:21:3666:3668	5013727	2	True				
ANR	5014062	Identifier	i		5013727	0					
ANR	5014063	IncDec	++		5013727	1					
ANR	5014064	CompoundStatement		48:26:975:975	5013727	3					
ANR	5014065	IfStatement	if ( wa [ i ] [ 0 ] )		5013727	0					
ANR	5014066	Condition	wa [ i ] [ 0 ]	173:7:3680:3687	5013727	0	True				
ANR	5014067	ArrayIndexing	wa [ i ] [ 0 ]		5013727	0					
ANR	5014068	ArrayIndexing	wa [ i ]		5013727	0					
ANR	5014069	Identifier	wa		5013727	0					
ANR	5014070	Identifier	i		5013727	1					
ANR	5014071	PrimaryExpression	0		5013727	1					
ANR	5014072	CompoundStatement		49:17:994:994	5013727	1					
ANR	5014073	ExpressionStatement	nw ++	174:4:3696:3700	5013727	0	True				
ANR	5014074	PostIncDecOperationExpression	nw ++		5013727	0					
ANR	5014075	Identifier	nw		5013727	0					
ANR	5014076	IncDec	++		5013727	1					
ANR	5014077	ExpressionStatement	"replace ( nw , wa , str , atype )"	177:2:3713:3741	5013727	10	True				
ANR	5014078	CallExpression	"replace ( nw , wa , str , atype )"		5013727	0					
ANR	5014079	Callee	replace		5013727	0					
ANR	5014080	Identifier	replace		5013727	0					
ANR	5014081	ArgumentList	nw		5013727	1					
ANR	5014082	Argument	nw		5013727	0					
ANR	5014083	Identifier	nw		5013727	0					
ANR	5014084	Argument	wa		5013727	1					
ANR	5014085	Identifier	wa		5013727	0					
ANR	5014086	Argument	str		5013727	2					
ANR	5014087	Identifier	str		5013727	0					
ANR	5014088	Argument	atype		5013727	3					
ANR	5014089	Identifier	atype		5013727	0					
ANR	5014090	ExpressionStatement	free ( buf )	180:1:3748:3758	5013727	8	True				
ANR	5014091	CallExpression	free ( buf )		5013727	0					
ANR	5014092	Callee	free		5013727	0					
ANR	5014093	Identifier	free		5013727	0					
ANR	5014094	ArgumentList	buf		5013727	1					
ANR	5014095	Argument	buf		5013727	0					
ANR	5014096	Identifier	buf		5013727	0					
ANR	5014097	ReturnStatement	return true ;	182:1:3762:3773	5013727	9	True				
ANR	5014098	Identifier	true		5013727	0					
ANR	5014099	ReturnType	static int		5013727	1					
ANR	5014100	Identifier	parse		5013727	2					
ANR	5014101	ParameterList	"RParse * p , const char * data , char * str"		5013727	3					
ANR	5014102	Parameter	RParse * p	125:17:2655:2663	5013727	0	True				
ANR	5014103	ParameterType	RParse *		5013727	0					
ANR	5014104	Identifier	p		5013727	1					
ANR	5014105	Parameter	const char * data	125:28:2666:2681	5013727	1	True				
ANR	5014106	ParameterType	const char *		5013727	0					
ANR	5014107	Identifier	data		5013727	1					
ANR	5014108	Parameter	char * str	125:46:2684:2692	5013727	2	True				
ANR	5014109	ParameterType	char *		5013727	0					
ANR	5014110	Identifier	str		5013727	1					
ANR	5014111	CFGEntryNode	ENTRY		5013727		True				
ANR	5014112	CFGExitNode	EXIT		5013727		True				
ANR	5014113	Symbol	* w2		5013727						
ANR	5014114	Symbol	* w1		5013727						
ANR	5014115	Symbol	data		5013727						
ANR	5014116	Symbol	addr_type		5013727						
ANR	5014117	Symbol	strchr		5013727						
ANR	5014118	Symbol	nw		5013727						
ANR	5014119	Symbol	wa		5013727						
ANR	5014120	Symbol	strlen		5013727						
ANR	5014121	Symbol	* wa		5013727						
ANR	5014122	Symbol	len		5013727						
ANR	5014123	Symbol	atype		5013727						
ANR	5014124	Symbol	* ptr		5013727						
ANR	5014125	Symbol	w0		5013727						
ANR	5014126	Symbol	w1		5013727						
ANR	5014127	Symbol	w2		5013727						
ANR	5014128	Symbol	* w0		5013727						
ANR	5014129	Symbol	malloc		5013727						
ANR	5014130	Symbol	* buf		5013727						
ANR	5014131	Symbol	* * i		5013727						
ANR	5014132	Symbol	false		5013727						
ANR	5014133	Symbol	i		5013727						
ANR	5014134	Symbol	optr		5013727						
ANR	5014135	Symbol	ptr		5013727						
ANR	5014136	Symbol	p		5013727						
ANR	5014137	Symbol	str		5013727						
ANR	5014138	Symbol	buf		5013727						
ANR	5014139	Symbol	* i		5013727						
ANR	5014140	Symbol	* * wa		5013727						
ANR	5014141	Symbol	true		5013727						
ANR	5014142	DeclStmt									
ANR	5014143	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_6502_pseudo
ANR	5014144	DeclStmt									
ANR	5014145	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
