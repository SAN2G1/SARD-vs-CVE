command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5039261	File	data/converged/CVE-2019-16718~_radare2/libr_parse_parse.c								
ANR	5039262	DeclStmt									
ANR	5039263	Decl							include < config . h >	include < config . h > ( r_parse )	R_LIB_VERSION
ANR	5039264	DeclStmt									
ANR	5039265	Decl							RParsePlugin	RParsePlugin * [ ]	parse_static_plugins
ANR	5039266	Function	r_parse_new	14:0:255:720							
ANR	5039267	FunctionDef	r_parse_new ()		5039266	0					
ANR	5039268	CompoundStatement		14:32:287:720	5039266	0					
ANR	5039269	IdentifierDeclStatement	int i ;	15:1:290:295	5039266	0	True				
ANR	5039270	IdentifierDecl	i		5039266	0					
ANR	5039271	IdentifierDeclType	int		5039266	0					
ANR	5039272	Identifier	i		5039266	1					
ANR	5039273	IdentifierDeclStatement	RParse * p = R_NEW0 ( RParse ) ;	16:1:298:325	5039266	1	True				
ANR	5039274	IdentifierDecl	* p = R_NEW0 ( RParse )		5039266	0					
ANR	5039275	IdentifierDeclType	RParse *		5039266	0					
ANR	5039276	Identifier	p		5039266	1					
ANR	5039277	AssignmentExpression	* p = R_NEW0 ( RParse )		5039266	2		=			
ANR	5039278	Identifier	p		5039266	0					
ANR	5039279	CallExpression	R_NEW0 ( RParse )		5039266	1					
ANR	5039280	Callee	R_NEW0		5039266	0					
ANR	5039281	Identifier	R_NEW0		5039266	0					
ANR	5039282	ArgumentList	RParse		5039266	1					
ANR	5039283	Argument	RParse		5039266	0					
ANR	5039284	Identifier	RParse		5039266	0					
ANR	5039285	IfStatement	if ( ! p )		5039266	2					
ANR	5039286	Condition	! p	17:5:332:333	5039266	0	True				
ANR	5039287	UnaryOperationExpression	! p		5039266	0					
ANR	5039288	UnaryOperator	!		5039266	0					
ANR	5039289	Identifier	p		5039266	1					
ANR	5039290	CompoundStatement		4:9:48:48	5039266	1					
ANR	5039291	ReturnStatement	return NULL ;	18:2:340:351	5039266	0	True				
ANR	5039292	Identifier	NULL		5039266	0					
ANR	5039293	ExpressionStatement	p -> parsers = r_list_newf ( NULL )	20:1:357:388	5039266	3	True				
ANR	5039294	AssignmentExpression	p -> parsers = r_list_newf ( NULL )		5039266	0		=			
ANR	5039295	PtrMemberAccess	p -> parsers		5039266	0					
ANR	5039296	Identifier	p		5039266	0					
ANR	5039297	Identifier	parsers		5039266	1					
ANR	5039298	CallExpression	r_list_newf ( NULL )		5039266	1					
ANR	5039299	Callee	r_list_newf		5039266	0					
ANR	5039300	Identifier	r_list_newf		5039266	0					
ANR	5039301	ArgumentList	NULL		5039266	1					
ANR	5039302	Argument	NULL		5039266	0					
ANR	5039303	Identifier	NULL		5039266	0					
ANR	5039304	IfStatement	if ( ! p -> parsers )		5039266	4					
ANR	5039305	Condition	! p -> parsers	21:5:406:416	5039266	0	True				
ANR	5039306	UnaryOperationExpression	! p -> parsers		5039266	0					
ANR	5039307	UnaryOperator	!		5039266	0					
ANR	5039308	PtrMemberAccess	p -> parsers		5039266	1					
ANR	5039309	Identifier	p		5039266	0					
ANR	5039310	Identifier	parsers		5039266	1					
ANR	5039311	CompoundStatement		8:18:131:131	5039266	1					
ANR	5039312	ExpressionStatement	r_parse_free ( p )	22:2:423:439	5039266	0	True				
ANR	5039313	CallExpression	r_parse_free ( p )		5039266	0					
ANR	5039314	Callee	r_parse_free		5039266	0					
ANR	5039315	Identifier	r_parse_free		5039266	0					
ANR	5039316	ArgumentList	p		5039266	1					
ANR	5039317	Argument	p		5039266	0					
ANR	5039318	Identifier	p		5039266	0					
ANR	5039319	ReturnStatement	return NULL ;	23:2:443:454	5039266	1	True				
ANR	5039320	Identifier	NULL		5039266	0					
ANR	5039321	ExpressionStatement	p -> notin_flagspace = NULL	25:1:460:485	5039266	5	True				
ANR	5039322	AssignmentExpression	p -> notin_flagspace = NULL		5039266	0		=			
ANR	5039323	PtrMemberAccess	p -> notin_flagspace		5039266	0					
ANR	5039324	Identifier	p		5039266	0					
ANR	5039325	Identifier	notin_flagspace		5039266	1					
ANR	5039326	Identifier	NULL		5039266	1					
ANR	5039327	ExpressionStatement	p -> flagspace = NULL	26:1:488:507	5039266	6	True				
ANR	5039328	AssignmentExpression	p -> flagspace = NULL		5039266	0		=			
ANR	5039329	PtrMemberAccess	p -> flagspace		5039266	0					
ANR	5039330	Identifier	p		5039266	0					
ANR	5039331	Identifier	flagspace		5039266	1					
ANR	5039332	Identifier	NULL		5039266	1					
ANR	5039333	ExpressionStatement	p -> pseudo = false	27:1:510:527	5039266	7	True				
ANR	5039334	AssignmentExpression	p -> pseudo = false		5039266	0		=			
ANR	5039335	PtrMemberAccess	p -> pseudo		5039266	0					
ANR	5039336	Identifier	p		5039266	0					
ANR	5039337	Identifier	pseudo		5039266	1					
ANR	5039338	Identifier	false		5039266	1					
ANR	5039339	ExpressionStatement	p -> relsub = false	28:1:530:547	5039266	8	True				
ANR	5039340	AssignmentExpression	p -> relsub = false		5039266	0		=			
ANR	5039341	PtrMemberAccess	p -> relsub		5039266	0					
ANR	5039342	Identifier	p		5039266	0					
ANR	5039343	Identifier	relsub		5039266	1					
ANR	5039344	Identifier	false		5039266	1					
ANR	5039345	ExpressionStatement	p -> tailsub = false	29:1:550:568	5039266	9	True				
ANR	5039346	AssignmentExpression	p -> tailsub = false		5039266	0		=			
ANR	5039347	PtrMemberAccess	p -> tailsub		5039266	0					
ANR	5039348	Identifier	p		5039266	0					
ANR	5039349	Identifier	tailsub		5039266	1					
ANR	5039350	Identifier	false		5039266	1					
ANR	5039351	ExpressionStatement	p -> minval = 0x100	30:1:571:588	5039266	10	True				
ANR	5039352	AssignmentExpression	p -> minval = 0x100		5039266	0		=			
ANR	5039353	PtrMemberAccess	p -> minval		5039266	0					
ANR	5039354	Identifier	p		5039266	0					
ANR	5039355	Identifier	minval		5039266	1					
ANR	5039356	PrimaryExpression	0x100		5039266	1					
ANR	5039357	ExpressionStatement	p -> localvar_only = false	31:1:591:615	5039266	11	True				
ANR	5039358	AssignmentExpression	p -> localvar_only = false		5039266	0		=			
ANR	5039359	PtrMemberAccess	p -> localvar_only		5039266	0					
ANR	5039360	Identifier	p		5039266	0					
ANR	5039361	Identifier	localvar_only		5039266	1					
ANR	5039362	Identifier	false		5039266	1					
ANR	5039363	ForStatement	for ( i = 0 ; parse_static_plugins [ i ] ; i ++ )		5039266	12					
ANR	5039364	ForInit	i = 0 ;	32:6:623:628	5039266	0	True				
ANR	5039365	AssignmentExpression	i = 0		5039266	0		=			
ANR	5039366	Identifier	i		5039266	0					
ANR	5039367	PrimaryExpression	0		5039266	1					
ANR	5039368	Condition	parse_static_plugins [ i ]	32:13:630:652	5039266	1	True				
ANR	5039369	ArrayIndexing	parse_static_plugins [ i ]		5039266	0					
ANR	5039370	Identifier	parse_static_plugins		5039266	0					
ANR	5039371	Identifier	i		5039266	1					
ANR	5039372	PostIncDecOperationExpression	i ++	32:38:655:657	5039266	2	True				
ANR	5039373	Identifier	i		5039266	0					
ANR	5039374	IncDec	++		5039266	1					
ANR	5039375	CompoundStatement		19:43:372:372	5039266	3					
ANR	5039376	ExpressionStatement	"r_parse_add ( p , parse_static_plugins [ i ] )"	33:2:664:704	5039266	0	True				
ANR	5039377	CallExpression	"r_parse_add ( p , parse_static_plugins [ i ] )"		5039266	0					
ANR	5039378	Callee	r_parse_add		5039266	0					
ANR	5039379	Identifier	r_parse_add		5039266	0					
ANR	5039380	ArgumentList	p		5039266	1					
ANR	5039381	Argument	p		5039266	0					
ANR	5039382	Identifier	p		5039266	0					
ANR	5039383	Argument	parse_static_plugins [ i ]		5039266	1					
ANR	5039384	ArrayIndexing	parse_static_plugins [ i ]		5039266	0					
ANR	5039385	Identifier	parse_static_plugins		5039266	0					
ANR	5039386	Identifier	i		5039266	1					
ANR	5039387	ReturnStatement	return p ;	35:1:710:718	5039266	13	True				
ANR	5039388	Identifier	p		5039266	0					
ANR	5039389	ReturnType	R_API RParse *		5039266	1					
ANR	5039390	Identifier	r_parse_new		5039266	2					
ANR	5039391	ParameterList			5039266	3					
ANR	5039392	CFGEntryNode	ENTRY		5039266		True				
ANR	5039393	CFGExitNode	EXIT		5039266		True				
ANR	5039394	Symbol	p -> minval		5039266						
ANR	5039395	Symbol	RParse		5039266						
ANR	5039396	Symbol	NULL		5039266						
ANR	5039397	Symbol	parse_static_plugins		5039266						
ANR	5039398	Symbol	r_list_newf		5039266						
ANR	5039399	Symbol	false		5039266						
ANR	5039400	Symbol	i		5039266						
ANR	5039401	Symbol	p -> notin_flagspace		5039266						
ANR	5039402	Symbol	p -> pseudo		5039266						
ANR	5039403	Symbol	p -> localvar_only		5039266						
ANR	5039404	Symbol	p		5039266						
ANR	5039405	Symbol	R_NEW0		5039266						
ANR	5039406	Symbol	p -> tailsub		5039266						
ANR	5039407	Symbol	* i		5039266						
ANR	5039408	Symbol	p -> relsub		5039266						
ANR	5039409	Symbol	p -> parsers		5039266						
ANR	5039410	Symbol	* parse_static_plugins		5039266						
ANR	5039411	Symbol	* p		5039266						
ANR	5039412	Symbol	p -> flagspace		5039266						
ANR	5039413	Function	r_parse_free	38:0:723:798							
ANR	5039414	FunctionDef	r_parse_free (RParse * p)		5039413	0					
ANR	5039415	CompoundStatement		38:35:758:798	5039413	0					
ANR	5039416	ExpressionStatement	r_list_free ( p -> parsers )	39:1:761:785	5039413	0	True				
ANR	5039417	CallExpression	r_list_free ( p -> parsers )		5039413	0					
ANR	5039418	Callee	r_list_free		5039413	0					
ANR	5039419	Identifier	r_list_free		5039413	0					
ANR	5039420	ArgumentList	p -> parsers		5039413	1					
ANR	5039421	Argument	p -> parsers		5039413	0					
ANR	5039422	PtrMemberAccess	p -> parsers		5039413	0					
ANR	5039423	Identifier	p		5039413	0					
ANR	5039424	Identifier	parsers		5039413	1					
ANR	5039425	ExpressionStatement	free ( p )	40:1:788:796	5039413	1	True				
ANR	5039426	CallExpression	free ( p )		5039413	0					
ANR	5039427	Callee	free		5039413	0					
ANR	5039428	Identifier	free		5039413	0					
ANR	5039429	ArgumentList	p		5039413	1					
ANR	5039430	Argument	p		5039413	0					
ANR	5039431	Identifier	p		5039413	0					
ANR	5039432	ReturnType	R_API void		5039413	1					
ANR	5039433	Identifier	r_parse_free		5039413	2					
ANR	5039434	ParameterList	RParse * p		5039413	3					
ANR	5039435	Parameter	RParse * p	38:24:747:755	5039413	0	True				
ANR	5039436	ParameterType	RParse *		5039413	0					
ANR	5039437	Identifier	p		5039413	1					
ANR	5039438	CFGEntryNode	ENTRY		5039413		True				
ANR	5039439	CFGExitNode	EXIT		5039413		True				
ANR	5039440	Symbol	p		5039413						
ANR	5039441	Symbol	p -> parsers		5039413						
ANR	5039442	Symbol	* p		5039413						
ANR	5039443	Function	r_parse_add	43:0:801:1003							
ANR	5039444	FunctionDef	"r_parse_add (RParse * p , RParsePlugin * foo)"		5039443	0					
ANR	5039445	CompoundStatement		43:53:854:1003	5039443	0					
ANR	5039446	IdentifierDeclStatement	bool itsFine = true ;	44:1:857:876	5039443	0	True				
ANR	5039447	IdentifierDecl	itsFine = true		5039443	0					
ANR	5039448	IdentifierDeclType	bool		5039443	0					
ANR	5039449	Identifier	itsFine		5039443	1					
ANR	5039450	AssignmentExpression	itsFine = true		5039443	2		=			
ANR	5039451	Identifier	true		5039443	0					
ANR	5039452	Identifier	true		5039443	1					
ANR	5039453	IfStatement	if ( foo -> init )		5039443	1					
ANR	5039454	Condition	foo -> init	45:5:883:891	5039443	0	True				
ANR	5039455	PtrMemberAccess	foo -> init		5039443	0					
ANR	5039456	Identifier	foo		5039443	0					
ANR	5039457	Identifier	init		5039443	1					
ANR	5039458	CompoundStatement		3:16:39:39	5039443	1					
ANR	5039459	ExpressionStatement	"itsFine = foo -> init ( p , p -> user )"	46:2:898:930	5039443	0	True				
ANR	5039460	AssignmentExpression	"itsFine = foo -> init ( p , p -> user )"		5039443	0		=			
ANR	5039461	Identifier	itsFine		5039443	0					
ANR	5039462	CallExpression	"foo -> init ( p , p -> user )"		5039443	1					
ANR	5039463	Callee	foo -> init		5039443	0					
ANR	5039464	PtrMemberAccess	foo -> init		5039443	0					
ANR	5039465	Identifier	foo		5039443	0					
ANR	5039466	Identifier	init		5039443	1					
ANR	5039467	ArgumentList	p		5039443	1					
ANR	5039468	Argument	p		5039443	0					
ANR	5039469	Identifier	p		5039443	0					
ANR	5039470	Argument	p -> user		5039443	1					
ANR	5039471	PtrMemberAccess	p -> user		5039443	0					
ANR	5039472	Identifier	p		5039443	0					
ANR	5039473	Identifier	user		5039443	1					
ANR	5039474	IfStatement	if ( itsFine )		5039443	2					
ANR	5039475	Condition	itsFine	48:5:940:946	5039443	0	True				
ANR	5039476	Identifier	itsFine		5039443	0					
ANR	5039477	CompoundStatement		6:14:94:94	5039443	1					
ANR	5039478	ExpressionStatement	"r_list_append ( p -> parsers , foo )"	49:2:953:984	5039443	0	True				
ANR	5039479	CallExpression	"r_list_append ( p -> parsers , foo )"		5039443	0					
ANR	5039480	Callee	r_list_append		5039443	0					
ANR	5039481	Identifier	r_list_append		5039443	0					
ANR	5039482	ArgumentList	p -> parsers		5039443	1					
ANR	5039483	Argument	p -> parsers		5039443	0					
ANR	5039484	PtrMemberAccess	p -> parsers		5039443	0					
ANR	5039485	Identifier	p		5039443	0					
ANR	5039486	Identifier	parsers		5039443	1					
ANR	5039487	Argument	foo		5039443	1					
ANR	5039488	Identifier	foo		5039443	0					
ANR	5039489	ReturnStatement	return true ;	51:1:990:1001	5039443	3	True				
ANR	5039490	Identifier	true		5039443	0					
ANR	5039491	ReturnType	R_API bool		5039443	1					
ANR	5039492	Identifier	r_parse_add		5039443	2					
ANR	5039493	ParameterList	"RParse * p , RParsePlugin * foo"		5039443	3					
ANR	5039494	Parameter	RParse * p	43:23:824:832	5039443	0	True				
ANR	5039495	ParameterType	RParse *		5039443	0					
ANR	5039496	Identifier	p		5039443	1					
ANR	5039497	Parameter	RParsePlugin * foo	43:34:835:851	5039443	1	True				
ANR	5039498	ParameterType	RParsePlugin *		5039443	0					
ANR	5039499	Identifier	foo		5039443	1					
ANR	5039500	CFGEntryNode	ENTRY		5039443		True				
ANR	5039501	CFGExitNode	EXIT		5039443		True				
ANR	5039502	Symbol	p		5039443						
ANR	5039503	Symbol	itsFine		5039443						
ANR	5039504	Symbol	foo		5039443						
ANR	5039505	Symbol	foo -> init		5039443						
ANR	5039506	Symbol	true		5039443						
ANR	5039507	Symbol	p -> parsers		5039443						
ANR	5039508	Symbol	* p		5039443						
ANR	5039509	Symbol	p -> user		5039443						
ANR	5039510	Symbol	* foo		5039443						
ANR	5039511	Function	r_parse_use	54:0:1006:1264							
ANR	5039512	FunctionDef	"r_parse_use (RParse * p , const char * name)"		5039511	0					
ANR	5039513	CompoundStatement		54:52:1058:1264	5039511	0					
ANR	5039514	IdentifierDeclStatement	RListIter * iter ;	55:1:1061:1076	5039511	0	True				
ANR	5039515	IdentifierDecl	* iter		5039511	0					
ANR	5039516	IdentifierDeclType	RListIter *		5039511	0					
ANR	5039517	Identifier	iter		5039511	1					
ANR	5039518	IdentifierDeclStatement	RParsePlugin * h ;	56:1:1079:1094	5039511	1	True				
ANR	5039519	IdentifierDecl	* h		5039511	0					
ANR	5039520	IdentifierDeclType	RParsePlugin *		5039511	0					
ANR	5039521	Identifier	h		5039511	1					
ANR	5039522	ExpressionStatement	"r_return_val_if_fail ( p && name , false )"	57:1:1097:1136	5039511	2	True				
ANR	5039523	CallExpression	"r_return_val_if_fail ( p && name , false )"		5039511	0					
ANR	5039524	Callee	r_return_val_if_fail		5039511	0					
ANR	5039525	Identifier	r_return_val_if_fail		5039511	0					
ANR	5039526	ArgumentList	p && name		5039511	1					
ANR	5039527	Argument	p && name		5039511	0					
ANR	5039528	AndExpression	p && name		5039511	0		&&			
ANR	5039529	Identifier	p		5039511	0					
ANR	5039530	Identifier	name		5039511	1					
ANR	5039531	Argument	false		5039511	1					
ANR	5039532	Identifier	false		5039511	0					
ANR	5039533	Statement	r_list_foreach	58:1:1139:1152	5039511	3	True				
ANR	5039534	Statement	(	58:16:1154:1154	5039511	4	True				
ANR	5039535	Statement	p	58:17:1155:1155	5039511	5	True				
ANR	5039536	Statement	->	58:18:1156:1157	5039511	6	True				
ANR	5039537	Statement	parsers	58:20:1158:1164	5039511	7	True				
ANR	5039538	Statement	","	58:27:1165:1165	5039511	8	True				
ANR	5039539	Statement	iter	58:29:1167:1170	5039511	9	True				
ANR	5039540	Statement	","	58:33:1171:1171	5039511	10	True				
ANR	5039541	Statement	h	58:35:1173:1173	5039511	11	True				
ANR	5039542	Statement	)	58:36:1174:1174	5039511	12	True				
ANR	5039543	CompoundStatement		5:38:117:117	5039511	13					
ANR	5039544	IfStatement	"if ( ! strcmp ( h -> name , name ) )"		5039511	0					
ANR	5039545	Condition	"! strcmp ( h -> name , name )"	59:6:1184:1206	5039511	0	True				
ANR	5039546	UnaryOperationExpression	"! strcmp ( h -> name , name )"		5039511	0					
ANR	5039547	UnaryOperator	!		5039511	0					
ANR	5039548	CallExpression	"strcmp ( h -> name , name )"		5039511	1					
ANR	5039549	Callee	strcmp		5039511	0					
ANR	5039550	Identifier	strcmp		5039511	0					
ANR	5039551	ArgumentList	h -> name		5039511	1					
ANR	5039552	Argument	h -> name		5039511	0					
ANR	5039553	PtrMemberAccess	h -> name		5039511	0					
ANR	5039554	Identifier	h		5039511	0					
ANR	5039555	Identifier	name		5039511	1					
ANR	5039556	Argument	name		5039511	1					
ANR	5039557	Identifier	name		5039511	0					
ANR	5039558	CompoundStatement		6:31:150:150	5039511	1					
ANR	5039559	ExpressionStatement	p -> cur = h	60:3:1214:1224	5039511	0	True				
ANR	5039560	AssignmentExpression	p -> cur = h		5039511	0		=			
ANR	5039561	PtrMemberAccess	p -> cur		5039511	0					
ANR	5039562	Identifier	p		5039511	0					
ANR	5039563	Identifier	cur		5039511	1					
ANR	5039564	Identifier	h		5039511	1					
ANR	5039565	ReturnStatement	return true ;	61:3:1229:1240	5039511	1	True				
ANR	5039566	Identifier	true		5039511	0					
ANR	5039567	ReturnStatement	return false ;	64:1:1250:1262	5039511	14	True				
ANR	5039568	Identifier	false		5039511	0					
ANR	5039569	ReturnType	R_API bool		5039511	1					
ANR	5039570	Identifier	r_parse_use		5039511	2					
ANR	5039571	ParameterList	"RParse * p , const char * name"		5039511	3					
ANR	5039572	Parameter	RParse * p	54:23:1029:1037	5039511	0	True				
ANR	5039573	ParameterType	RParse *		5039511	0					
ANR	5039574	Identifier	p		5039511	1					
ANR	5039575	Parameter	const char * name	54:34:1040:1055	5039511	1	True				
ANR	5039576	ParameterType	const char *		5039511	0					
ANR	5039577	Identifier	name		5039511	1					
ANR	5039578	CFGEntryNode	ENTRY		5039511		True				
ANR	5039579	CFGExitNode	EXIT		5039511		True				
ANR	5039580	Symbol	p		5039511						
ANR	5039581	Symbol	strcmp		5039511						
ANR	5039582	Symbol	* h		5039511						
ANR	5039583	Symbol	name		5039511						
ANR	5039584	Symbol	h		5039511						
ANR	5039585	Symbol	false		5039511						
ANR	5039586	Symbol	true		5039511						
ANR	5039587	Symbol	iter		5039511						
ANR	5039588	Symbol	* p		5039511						
ANR	5039589	Symbol	h -> name		5039511						
ANR	5039590	Symbol	p -> cur		5039511						
ANR	5039591	Function	r_parse_assemble	69:0:1466:1947							
ANR	5039592	FunctionDef	"r_parse_assemble (RParse * p , char * data , char * str)"		5039591	0					
ANR	5039593	CompoundStatement		69:62:1528:1947	5039591	0					
ANR	5039594	IdentifierDeclStatement	char * in = strdup ( str ) ;	70:1:1531:1554	5039591	0	True				
ANR	5039595	IdentifierDecl	* in = strdup ( str )		5039591	0					
ANR	5039596	IdentifierDeclType	char *		5039591	0					
ANR	5039597	Identifier	in		5039591	1					
ANR	5039598	AssignmentExpression	* in = strdup ( str )		5039591	2		=			
ANR	5039599	Identifier	in		5039591	0					
ANR	5039600	CallExpression	strdup ( str )		5039591	1					
ANR	5039601	Callee	strdup		5039591	0					
ANR	5039602	Identifier	strdup		5039591	0					
ANR	5039603	ArgumentList	str		5039591	1					
ANR	5039604	Argument	str		5039591	0					
ANR	5039605	Identifier	str		5039591	0					
ANR	5039606	IdentifierDeclStatement	bool ret = false ;	71:1:1557:1573	5039591	1	True				
ANR	5039607	IdentifierDecl	ret = false		5039591	0					
ANR	5039608	IdentifierDeclType	bool		5039591	0					
ANR	5039609	Identifier	ret		5039591	1					
ANR	5039610	AssignmentExpression	ret = false		5039591	2		=			
ANR	5039611	Identifier	false		5039591	0					
ANR	5039612	Identifier	false		5039591	1					
ANR	5039613	IdentifierDeclStatement	"char * s , * o ;"	72:1:1576:1587	5039591	2	True				
ANR	5039614	IdentifierDecl	* s		5039591	0					
ANR	5039615	IdentifierDeclType	char *		5039591	0					
ANR	5039616	Identifier	s		5039591	1					
ANR	5039617	IdentifierDecl	* o		5039591	1					
ANR	5039618	IdentifierDeclType	char *		5039591	0					
ANR	5039619	Identifier	o		5039591	1					
ANR	5039620	ExpressionStatement	data [ 0 ] = '\\0'	74:1:1591:1603	5039591	3	True				
ANR	5039621	AssignmentExpression	data [ 0 ] = '\\0'		5039591	0		=			
ANR	5039622	ArrayIndexing	data [ 0 ]		5039591	0					
ANR	5039623	Identifier	data		5039591	0					
ANR	5039624	PrimaryExpression	0		5039591	1					
ANR	5039625	PrimaryExpression	'\\0'		5039591	1					
ANR	5039626	IfStatement	if ( p -> cur && p -> cur -> assemble )		5039591	4					
ANR	5039627	Condition	p -> cur && p -> cur -> assemble	75:5:1610:1635	5039591	0	True				
ANR	5039628	AndExpression	p -> cur && p -> cur -> assemble		5039591	0		&&			
ANR	5039629	PtrMemberAccess	p -> cur		5039591	0					
ANR	5039630	Identifier	p		5039591	0					
ANR	5039631	Identifier	cur		5039591	1					
ANR	5039632	PtrMemberAccess	p -> cur -> assemble		5039591	1					
ANR	5039633	PtrMemberAccess	p -> cur		5039591	0					
ANR	5039634	Identifier	p		5039591	0					
ANR	5039635	Identifier	cur		5039591	1					
ANR	5039636	Identifier	assemble		5039591	1					
ANR	5039637	CompoundStatement		7:33:109:109	5039591	1					
ANR	5039638	ExpressionStatement	o = data + strlen ( data )	76:2:1642:1666	5039591	0	True				
ANR	5039639	AssignmentExpression	o = data + strlen ( data )		5039591	0		=			
ANR	5039640	Identifier	o		5039591	0					
ANR	5039641	AdditiveExpression	data + strlen ( data )		5039591	1		+			
ANR	5039642	Identifier	data		5039591	0					
ANR	5039643	CallExpression	strlen ( data )		5039591	1					
ANR	5039644	Callee	strlen		5039591	0					
ANR	5039645	Identifier	strlen		5039591	0					
ANR	5039646	ArgumentList	data		5039591	1					
ANR	5039647	Argument	data		5039591	0					
ANR	5039648	Identifier	data		5039591	0					
ANR	5039649	DoStatement	do		5039591	1					
ANR	5039650	CompoundStatement		9:5:144:144	5039591	0					
ANR	5039651	ExpressionStatement	"s = strchr ( str , ';' )"	78:3:1678:1699	5039591	0	True				
ANR	5039652	AssignmentExpression	"s = strchr ( str , ';' )"		5039591	0		=			
ANR	5039653	Identifier	s		5039591	0					
ANR	5039654	CallExpression	"strchr ( str , ';' )"		5039591	1					
ANR	5039655	Callee	strchr		5039591	0					
ANR	5039656	Identifier	strchr		5039591	0					
ANR	5039657	ArgumentList	str		5039591	1					
ANR	5039658	Argument	str		5039591	0					
ANR	5039659	Identifier	str		5039591	0					
ANR	5039660	Argument	';'		5039591	1					
ANR	5039661	PrimaryExpression	';'		5039591	0					
ANR	5039662	IfStatement	if ( s )		5039591	1					
ANR	5039663	Condition	s	79:7:1708:1708	5039591	0	True				
ANR	5039664	Identifier	s		5039591	0					
ANR	5039665	CompoundStatement		11:10:182:182	5039591	1					
ANR	5039666	ExpressionStatement	* s = '\\0'	80:4:1717:1726	5039591	0	True				
ANR	5039667	AssignmentExpression	* s = '\\0'		5039591	0		=			
ANR	5039668	UnaryOperationExpression	* s		5039591	0					
ANR	5039669	UnaryOperator	*		5039591	0					
ANR	5039670	Identifier	s		5039591	1					
ANR	5039671	PrimaryExpression	'\\0'		5039591	1					
ANR	5039672	ExpressionStatement	"ret = p -> cur -> assemble ( p , o , str )"	82:3:1736:1770	5039591	2	True				
ANR	5039673	AssignmentExpression	"ret = p -> cur -> assemble ( p , o , str )"		5039591	0		=			
ANR	5039674	Identifier	ret		5039591	0					
ANR	5039675	CallExpression	"p -> cur -> assemble ( p , o , str )"		5039591	1					
ANR	5039676	Callee	p -> cur -> assemble		5039591	0					
ANR	5039677	PtrMemberAccess	p -> cur -> assemble		5039591	0					
ANR	5039678	PtrMemberAccess	p -> cur		5039591	0					
ANR	5039679	Identifier	p		5039591	0					
ANR	5039680	Identifier	cur		5039591	1					
ANR	5039681	Identifier	assemble		5039591	1					
ANR	5039682	ArgumentList	p		5039591	1					
ANR	5039683	Argument	p		5039591	0					
ANR	5039684	Identifier	p		5039591	0					
ANR	5039685	Argument	o		5039591	1					
ANR	5039686	Identifier	o		5039591	0					
ANR	5039687	Argument	str		5039591	2					
ANR	5039688	Identifier	str		5039591	0					
ANR	5039689	IfStatement	if ( ! ret )		5039591	3					
ANR	5039690	Condition	! ret	83:7:1779:1782	5039591	0	True				
ANR	5039691	UnaryOperationExpression	! ret		5039591	0					
ANR	5039692	UnaryOperator	!		5039591	0					
ANR	5039693	Identifier	ret		5039591	1					
ANR	5039694	CompoundStatement		15:13:256:256	5039591	1					
ANR	5039695	BreakStatement	break ;	84:4:1791:1796	5039591	0	True				
ANR	5039696	IfStatement	if ( s )		5039591	4					
ANR	5039697	Condition	s	86:7:1810:1810	5039591	0	True				
ANR	5039698	Identifier	s		5039591	0					
ANR	5039699	CompoundStatement		18:10:284:284	5039591	1					
ANR	5039700	ExpressionStatement	str = s + 1	87:4:1819:1830	5039591	0	True				
ANR	5039701	AssignmentExpression	str = s + 1		5039591	0		=			
ANR	5039702	Identifier	str		5039591	0					
ANR	5039703	AdditiveExpression	s + 1		5039591	1		+			
ANR	5039704	Identifier	s		5039591	0					
ANR	5039705	PrimaryExpression	1		5039591	1					
ANR	5039706	ExpressionStatement	o += strlen ( data )	88:4:1836:1854	5039591	1	True				
ANR	5039707	AssignmentExpression	o += strlen ( data )		5039591	0		+=			
ANR	5039708	Identifier	o		5039591	0					
ANR	5039709	CallExpression	strlen ( data )		5039591	1					
ANR	5039710	Callee	strlen		5039591	0					
ANR	5039711	Identifier	strlen		5039591	0					
ANR	5039712	ArgumentList	data		5039591	1					
ANR	5039713	Argument	data		5039591	0					
ANR	5039714	Identifier	data		5039591	0					
ANR	5039715	ExpressionStatement	o [ 0 ] = '\\n'	89:4:1860:1871	5039591	2	True				
ANR	5039716	AssignmentExpression	o [ 0 ] = '\\n'		5039591	0		=			
ANR	5039717	ArrayIndexing	o [ 0 ]		5039591	0					
ANR	5039718	Identifier	o		5039591	0					
ANR	5039719	PrimaryExpression	0		5039591	1					
ANR	5039720	PrimaryExpression	'\\n'		5039591	1					
ANR	5039721	ExpressionStatement	o [ 1 ] = '\\0'	90:4:1877:1888	5039591	3	True				
ANR	5039722	AssignmentExpression	o [ 1 ] = '\\0'		5039591	0		=			
ANR	5039723	ArrayIndexing	o [ 1 ]		5039591	0					
ANR	5039724	Identifier	o		5039591	0					
ANR	5039725	PrimaryExpression	1		5039591	1					
ANR	5039726	PrimaryExpression	'\\0'		5039591	1					
ANR	5039727	ExpressionStatement	o ++	91:4:1894:1897	5039591	4	True				
ANR	5039728	PostIncDecOperationExpression	o ++		5039591	0					
ANR	5039729	Identifier	o		5039591	0					
ANR	5039730	IncDec	++		5039591	1					
ANR	5039731	Condition	s	93:11:1915:1915	5039591	1	True				
ANR	5039732	Identifier	s		5039591	0					
ANR	5039733	ExpressionStatement	free ( in )	95:1:1923:1932	5039591	5	True				
ANR	5039734	CallExpression	free ( in )		5039591	0					
ANR	5039735	Callee	free		5039591	0					
ANR	5039736	Identifier	free		5039591	0					
ANR	5039737	ArgumentList	in		5039591	1					
ANR	5039738	Argument	in		5039591	0					
ANR	5039739	Identifier	in		5039591	0					
ANR	5039740	ReturnStatement	return ret ;	96:1:1935:1945	5039591	6	True				
ANR	5039741	Identifier	ret		5039591	0					
ANR	5039742	ReturnType	R_API bool		5039591	1					
ANR	5039743	Identifier	r_parse_assemble		5039591	2					
ANR	5039744	ParameterList	"RParse * p , char * data , char * str"		5039591	3					
ANR	5039745	Parameter	RParse * p	69:28:1494:1502	5039591	0	True				
ANR	5039746	ParameterType	RParse *		5039591	0					
ANR	5039747	Identifier	p		5039591	1					
ANR	5039748	Parameter	char * data	69:39:1505:1514	5039591	1	True				
ANR	5039749	ParameterType	char *		5039591	0					
ANR	5039750	Identifier	data		5039591	1					
ANR	5039751	Parameter	char * str	69:51:1517:1525	5039591	2	True				
ANR	5039752	ParameterType	char *		5039591	0					
ANR	5039753	Identifier	str		5039591	1					
ANR	5039754	CFGEntryNode	ENTRY		5039591		True				
ANR	5039755	CFGExitNode	EXIT		5039591		True				
ANR	5039756	Symbol	ret		5039591						
ANR	5039757	Symbol	data		5039591						
ANR	5039758	Symbol	in		5039591						
ANR	5039759	Symbol	false		5039591						
ANR	5039760	Symbol	p -> cur -> assemble		5039591						
ANR	5039761	Symbol	strchr		5039591						
ANR	5039762	Symbol	o		5039591						
ANR	5039763	Symbol	p -> cur		5039591						
ANR	5039764	Symbol	p		5039591						
ANR	5039765	Symbol	str		5039591						
ANR	5039766	Symbol	strlen		5039591						
ANR	5039767	Symbol	s		5039591						
ANR	5039768	Symbol	* o		5039591						
ANR	5039769	Symbol	* p		5039591						
ANR	5039770	Symbol	strdup		5039591						
ANR	5039771	Symbol	* * p		5039591						
ANR	5039772	Symbol	* data		5039591						
ANR	5039773	Symbol	* s		5039591						
ANR	5039774	Symbol	* p -> cur		5039591						
ANR	5039775	Function	r_parse_parse	101:0:2053:2280							
ANR	5039776	FunctionDef	"r_parse_parse (RParse * p , const char * data , char * str)"		5039775	0					
ANR	5039777	CompoundStatement		101:65:2118:2280	5039775	0					
ANR	5039778	ExpressionStatement	"r_return_val_if_fail ( p && data && str , false )"	102:1:2121:2167	5039775	0	True				
ANR	5039779	CallExpression	"r_return_val_if_fail ( p && data && str , false )"		5039775	0					
ANR	5039780	Callee	r_return_val_if_fail		5039775	0					
ANR	5039781	Identifier	r_return_val_if_fail		5039775	0					
ANR	5039782	ArgumentList	p && data && str		5039775	1					
ANR	5039783	Argument	p && data && str		5039775	0					
ANR	5039784	AndExpression	p && data && str		5039775	0		&&			
ANR	5039785	Identifier	p		5039775	0					
ANR	5039786	AndExpression	data && str		5039775	1		&&			
ANR	5039787	Identifier	data		5039775	0					
ANR	5039788	Identifier	str		5039775	1					
ANR	5039789	Argument	false		5039775	1					
ANR	5039790	Identifier	false		5039775	0					
ANR	5039791	IfStatement	if ( p && data && * data && p -> cur && p -> cur -> parse )		5039775	1					
ANR	5039792	Condition	p && data && * data && p -> cur && p -> cur -> parse	103:5:2174:2218	5039775	0	True				
ANR	5039793	AndExpression	p && data && * data && p -> cur && p -> cur -> parse		5039775	0		&&			
ANR	5039794	Identifier	p		5039775	0					
ANR	5039795	AndExpression	data && * data && p -> cur && p -> cur -> parse		5039775	1		&&			
ANR	5039796	Identifier	data		5039775	0					
ANR	5039797	AndExpression	* data && p -> cur && p -> cur -> parse		5039775	1		&&			
ANR	5039798	UnaryOperationExpression	* data		5039775	0					
ANR	5039799	UnaryOperator	*		5039775	0					
ANR	5039800	Identifier	data		5039775	1					
ANR	5039801	AndExpression	p -> cur && p -> cur -> parse		5039775	1		&&			
ANR	5039802	PtrMemberAccess	p -> cur		5039775	0					
ANR	5039803	Identifier	p		5039775	0					
ANR	5039804	Identifier	cur		5039775	1					
ANR	5039805	PtrMemberAccess	p -> cur -> parse		5039775	1					
ANR	5039806	PtrMemberAccess	p -> cur		5039775	0					
ANR	5039807	Identifier	p		5039775	0					
ANR	5039808	Identifier	cur		5039775	1					
ANR	5039809	Identifier	parse		5039775	1					
ANR	5039810	CompoundStatement		3:52:102:102	5039775	1					
ANR	5039811	ReturnStatement	"return p -> cur -> parse ( p , data , str ) ;"	104:2:2225:2260	5039775	0	True				
ANR	5039812	CallExpression	"p -> cur -> parse ( p , data , str )"		5039775	0					
ANR	5039813	Callee	p -> cur -> parse		5039775	0					
ANR	5039814	PtrMemberAccess	p -> cur -> parse		5039775	0					
ANR	5039815	PtrMemberAccess	p -> cur		5039775	0					
ANR	5039816	Identifier	p		5039775	0					
ANR	5039817	Identifier	cur		5039775	1					
ANR	5039818	Identifier	parse		5039775	1					
ANR	5039819	ArgumentList	p		5039775	1					
ANR	5039820	Argument	p		5039775	0					
ANR	5039821	Identifier	p		5039775	0					
ANR	5039822	Argument	data		5039775	1					
ANR	5039823	Identifier	data		5039775	0					
ANR	5039824	Argument	str		5039775	2					
ANR	5039825	Identifier	str		5039775	0					
ANR	5039826	ReturnStatement	return false ;	106:1:2266:2278	5039775	2	True				
ANR	5039827	Identifier	false		5039775	0					
ANR	5039828	ReturnType	R_API bool		5039775	1					
ANR	5039829	Identifier	r_parse_parse		5039775	2					
ANR	5039830	ParameterList	"RParse * p , const char * data , char * str"		5039775	3					
ANR	5039831	Parameter	RParse * p	101:25:2078:2086	5039775	0	True				
ANR	5039832	ParameterType	RParse *		5039775	0					
ANR	5039833	Identifier	p		5039775	1					
ANR	5039834	Parameter	const char * data	101:36:2089:2104	5039775	1	True				
ANR	5039835	ParameterType	const char *		5039775	0					
ANR	5039836	Identifier	data		5039775	1					
ANR	5039837	Parameter	char * str	101:54:2107:2115	5039775	2	True				
ANR	5039838	ParameterType	char *		5039775	0					
ANR	5039839	Identifier	str		5039775	1					
ANR	5039840	CFGEntryNode	ENTRY		5039775		True				
ANR	5039841	CFGExitNode	EXIT		5039775		True				
ANR	5039842	Symbol	p		5039775						
ANR	5039843	Symbol	str		5039775						
ANR	5039844	Symbol	data		5039775						
ANR	5039845	Symbol	false		5039775						
ANR	5039846	Symbol	p -> cur -> parse		5039775						
ANR	5039847	Symbol	* p		5039775						
ANR	5039848	Symbol	* * p		5039775						
ANR	5039849	Symbol	* data		5039775						
ANR	5039850	Symbol	* p -> cur		5039775						
ANR	5039851	Symbol	p -> cur		5039775						
ANR	5039852	Function	r_parse_immtrim	110:0:2284:2934							
ANR	5039853	FunctionDef	r_parse_immtrim (char * opstr)		5039852	0					
ANR	5039854	CompoundStatement		110:41:2325:2934	5039852	0					
ANR	5039855	IfStatement	if ( ! opstr || ! * opstr )		5039852	0					
ANR	5039856	Condition	! opstr || ! * opstr	111:5:2332:2348	5039852	0	True				
ANR	5039857	OrExpression	! opstr || ! * opstr		5039852	0		||			
ANR	5039858	UnaryOperationExpression	! opstr		5039852	0					
ANR	5039859	UnaryOperator	!		5039852	0					
ANR	5039860	Identifier	opstr		5039852	1					
ANR	5039861	UnaryOperationExpression	! * opstr		5039852	1					
ANR	5039862	UnaryOperator	!		5039852	0					
ANR	5039863	UnaryOperationExpression	* opstr		5039852	1					
ANR	5039864	UnaryOperator	*		5039852	0					
ANR	5039865	Identifier	opstr		5039852	1					
ANR	5039866	CompoundStatement		2:24:25:25	5039852	1					
ANR	5039867	ReturnStatement	return NULL ;	112:2:2355:2366	5039852	0	True				
ANR	5039868	Identifier	NULL		5039852	0					
ANR	5039869	IdentifierDeclStatement	"char * n = strstr ( opstr , ""0x"" ) ;"	114:1:2372:2402	5039852	1	True				
ANR	5039870	IdentifierDecl	"* n = strstr ( opstr , ""0x"" )"		5039852	0					
ANR	5039871	IdentifierDeclType	char *		5039852	0					
ANR	5039872	Identifier	n		5039852	1					
ANR	5039873	AssignmentExpression	"* n = strstr ( opstr , ""0x"" )"		5039852	2		=			
ANR	5039874	Identifier	n		5039852	0					
ANR	5039875	CallExpression	"strstr ( opstr , ""0x"" )"		5039852	1					
ANR	5039876	Callee	strstr		5039852	0					
ANR	5039877	Identifier	strstr		5039852	0					
ANR	5039878	ArgumentList	opstr		5039852	1					
ANR	5039879	Argument	opstr		5039852	0					
ANR	5039880	Identifier	opstr		5039852	0					
ANR	5039881	Argument	"""0x"""		5039852	1					
ANR	5039882	PrimaryExpression	"""0x"""		5039852	0					
ANR	5039883	IfStatement	if ( n )		5039852	2					
ANR	5039884	Condition	n	115:5:2409:2409	5039852	0	True				
ANR	5039885	Identifier	n		5039852	0					
ANR	5039886	CompoundStatement		7:2:90:105	5039852	1					
ANR	5039887	IdentifierDeclStatement	char * p = n + 2 ;	116:2:2416:2431	5039852	0	True				
ANR	5039888	IdentifierDecl	* p = n + 2		5039852	0					
ANR	5039889	IdentifierDeclType	char *		5039852	0					
ANR	5039890	Identifier	p		5039852	1					
ANR	5039891	AssignmentExpression	* p = n + 2		5039852	2		=			
ANR	5039892	Identifier	p		5039852	0					
ANR	5039893	AdditiveExpression	n + 2		5039852	1		+			
ANR	5039894	Identifier	n		5039852	0					
ANR	5039895	PrimaryExpression	2		5039852	1					
ANR	5039896	WhileStatement	while ( IS_HEXCHAR ( * p ) )		5039852	1					
ANR	5039897	Condition	IS_HEXCHAR ( * p )	117:9:2442:2456	5039852	0	True				
ANR	5039898	CallExpression	IS_HEXCHAR ( * p )		5039852	0					
ANR	5039899	Callee	IS_HEXCHAR		5039852	0					
ANR	5039900	Identifier	IS_HEXCHAR		5039852	0					
ANR	5039901	ArgumentList	* p		5039852	1					
ANR	5039902	Argument	* p		5039852	0					
ANR	5039903	UnaryOperationExpression	* p		5039852	0					
ANR	5039904	UnaryOperator	*		5039852	0					
ANR	5039905	Identifier	p		5039852	1					
ANR	5039906	CompoundStatement		8:26:133:133	5039852	1					
ANR	5039907	ExpressionStatement	p ++	118:3:2464:2467	5039852	0	True				
ANR	5039908	PostIncDecOperationExpression	p ++		5039852	0					
ANR	5039909	Identifier	p		5039852	0					
ANR	5039910	IncDec	++		5039852	1					
ANR	5039911	ExpressionStatement	"memmove ( n , p , strlen ( p ) + 1 )"	120:2:2475:2505	5039852	2	True				
ANR	5039912	CallExpression	"memmove ( n , p , strlen ( p ) + 1 )"		5039852	0					
ANR	5039913	Callee	memmove		5039852	0					
ANR	5039914	Identifier	memmove		5039852	0					
ANR	5039915	ArgumentList	n		5039852	1					
ANR	5039916	Argument	n		5039852	0					
ANR	5039917	Identifier	n		5039852	0					
ANR	5039918	Argument	p		5039852	1					
ANR	5039919	Identifier	p		5039852	0					
ANR	5039920	Argument	strlen ( p ) + 1		5039852	2					
ANR	5039921	AdditiveExpression	strlen ( p ) + 1		5039852	0		+			
ANR	5039922	CallExpression	strlen ( p )		5039852	0					
ANR	5039923	Callee	strlen		5039852	0					
ANR	5039924	Identifier	strlen		5039852	0					
ANR	5039925	ArgumentList	p		5039852	1					
ANR	5039926	Argument	p		5039852	0					
ANR	5039927	Identifier	p		5039852	0					
ANR	5039928	PrimaryExpression	1		5039852	1					
ANR	5039929	IfStatement	"if ( strstr ( opstr , "" - ]"" ) )"		5039852	3					
ANR	5039930	Condition	"strstr ( opstr , "" - ]"" )"	122:5:2515:2536	5039852	0	True				
ANR	5039931	CallExpression	"strstr ( opstr , "" - ]"" )"		5039852	0					
ANR	5039932	Callee	strstr		5039852	0					
ANR	5039933	Identifier	strstr		5039852	0					
ANR	5039934	ArgumentList	opstr		5039852	1					
ANR	5039935	Argument	opstr		5039852	0					
ANR	5039936	Identifier	opstr		5039852	0					
ANR	5039937	Argument	""" - ]"""		5039852	1					
ANR	5039938	PrimaryExpression	""" - ]"""		5039852	0					
ANR	5039939	CompoundStatement		13:29:213:213	5039852	1					
ANR	5039940	ExpressionStatement	"opstr = r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"	123:2:2543:2588	5039852	0	True				
ANR	5039941	AssignmentExpression	"opstr = r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"		5039852	0		=			
ANR	5039942	Identifier	opstr		5039852	0					
ANR	5039943	CallExpression	"r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"		5039852	1					
ANR	5039944	Callee	r_str_replace		5039852	0					
ANR	5039945	Identifier	r_str_replace		5039852	0					
ANR	5039946	ArgumentList	opstr		5039852	1					
ANR	5039947	Argument	opstr		5039852	0					
ANR	5039948	Identifier	opstr		5039852	0					
ANR	5039949	Argument	""" - ]"""		5039852	1					
ANR	5039950	PrimaryExpression	""" - ]"""		5039852	0					
ANR	5039951	Argument	"""]"""		5039852	2					
ANR	5039952	PrimaryExpression	"""]"""		5039852	0					
ANR	5039953	Argument	1		5039852	3					
ANR	5039954	PrimaryExpression	1		5039852	0					
ANR	5039955	IfStatement	"if ( strstr ( opstr , "" + ]"" ) )"		5039852	4					
ANR	5039956	Condition	"strstr ( opstr , "" + ]"" )"	125:5:2598:2619	5039852	0	True				
ANR	5039957	CallExpression	"strstr ( opstr , "" + ]"" )"		5039852	0					
ANR	5039958	Callee	strstr		5039852	0					
ANR	5039959	Identifier	strstr		5039852	0					
ANR	5039960	ArgumentList	opstr		5039852	1					
ANR	5039961	Argument	opstr		5039852	0					
ANR	5039962	Identifier	opstr		5039852	0					
ANR	5039963	Argument	""" + ]"""		5039852	1					
ANR	5039964	PrimaryExpression	""" + ]"""		5039852	0					
ANR	5039965	CompoundStatement		16:29:296:296	5039852	1					
ANR	5039966	ExpressionStatement	"opstr = r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"	126:2:2626:2671	5039852	0	True				
ANR	5039967	AssignmentExpression	"opstr = r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"		5039852	0		=			
ANR	5039968	Identifier	opstr		5039852	0					
ANR	5039969	CallExpression	"r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"		5039852	1					
ANR	5039970	Callee	r_str_replace		5039852	0					
ANR	5039971	Identifier	r_str_replace		5039852	0					
ANR	5039972	ArgumentList	opstr		5039852	1					
ANR	5039973	Argument	opstr		5039852	0					
ANR	5039974	Identifier	opstr		5039852	0					
ANR	5039975	Argument	""" + ]"""		5039852	1					
ANR	5039976	PrimaryExpression	""" + ]"""		5039852	0					
ANR	5039977	Argument	"""]"""		5039852	2					
ANR	5039978	PrimaryExpression	"""]"""		5039852	0					
ANR	5039979	Argument	1		5039852	3					
ANR	5039980	PrimaryExpression	1		5039852	0					
ANR	5039981	IfStatement	"if ( strstr ( opstr , "", ]"" ) )"		5039852	5					
ANR	5039982	Condition	"strstr ( opstr , "", ]"" )"	128:5:2681:2701	5039852	0	True				
ANR	5039983	CallExpression	"strstr ( opstr , "", ]"" )"		5039852	0					
ANR	5039984	Callee	strstr		5039852	0					
ANR	5039985	Identifier	strstr		5039852	0					
ANR	5039986	ArgumentList	opstr		5039852	1					
ANR	5039987	Argument	opstr		5039852	0					
ANR	5039988	Identifier	opstr		5039852	0					
ANR	5039989	Argument	""", ]"""		5039852	1					
ANR	5039990	PrimaryExpression	""", ]"""		5039852	0					
ANR	5039991	CompoundStatement		19:28:378:378	5039852	1					
ANR	5039992	ExpressionStatement	"opstr = r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"	129:2:2708:2752	5039852	0	True				
ANR	5039993	AssignmentExpression	"opstr = r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"		5039852	0		=			
ANR	5039994	Identifier	opstr		5039852	0					
ANR	5039995	CallExpression	"r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"		5039852	1					
ANR	5039996	Callee	r_str_replace		5039852	0					
ANR	5039997	Identifier	r_str_replace		5039852	0					
ANR	5039998	ArgumentList	opstr		5039852	1					
ANR	5039999	Argument	opstr		5039852	0					
ANR	5040000	Identifier	opstr		5039852	0					
ANR	5040001	Argument	""", ]"""		5039852	1					
ANR	5040002	PrimaryExpression	""", ]"""		5039852	0					
ANR	5040003	Argument	"""]"""		5039852	2					
ANR	5040004	PrimaryExpression	"""]"""		5039852	0					
ANR	5040005	Argument	1		5039852	3					
ANR	5040006	PrimaryExpression	1		5039852	0					
ANR	5040007	IfStatement	"if ( strstr ( opstr , "" - "" ) )"		5039852	6					
ANR	5040008	Condition	"strstr ( opstr , "" - "" )"	131:5:2762:2782	5039852	0	True				
ANR	5040009	CallExpression	"strstr ( opstr , "" - "" )"		5039852	0					
ANR	5040010	Callee	strstr		5039852	0					
ANR	5040011	Identifier	strstr		5039852	0					
ANR	5040012	ArgumentList	opstr		5039852	1					
ANR	5040013	Argument	opstr		5039852	0					
ANR	5040014	Identifier	opstr		5039852	0					
ANR	5040015	Argument	""" - """		5039852	1					
ANR	5040016	PrimaryExpression	""" - """		5039852	0					
ANR	5040017	CompoundStatement		22:28:459:459	5039852	1					
ANR	5040018	ExpressionStatement	"opstr = r_str_replace ( opstr , "" - "" , ""-"" , 1 )"	132:2:2789:2833	5039852	0	True				
ANR	5040019	AssignmentExpression	"opstr = r_str_replace ( opstr , "" - "" , ""-"" , 1 )"		5039852	0		=			
ANR	5040020	Identifier	opstr		5039852	0					
ANR	5040021	CallExpression	"r_str_replace ( opstr , "" - "" , ""-"" , 1 )"		5039852	1					
ANR	5040022	Callee	r_str_replace		5039852	0					
ANR	5040023	Identifier	r_str_replace		5039852	0					
ANR	5040024	ArgumentList	opstr		5039852	1					
ANR	5040025	Argument	opstr		5039852	0					
ANR	5040026	Identifier	opstr		5039852	0					
ANR	5040027	Argument	""" - """		5039852	1					
ANR	5040028	PrimaryExpression	""" - """		5039852	0					
ANR	5040029	Argument	"""-"""		5039852	2					
ANR	5040030	PrimaryExpression	"""-"""		5039852	0					
ANR	5040031	Argument	1		5039852	3					
ANR	5040032	PrimaryExpression	1		5039852	0					
ANR	5040033	IfStatement	"if ( strstr ( opstr , "" + "" ) )"		5039852	7					
ANR	5040034	Condition	"strstr ( opstr , "" + "" )"	134:5:2843:2863	5039852	0	True				
ANR	5040035	CallExpression	"strstr ( opstr , "" + "" )"		5039852	0					
ANR	5040036	Callee	strstr		5039852	0					
ANR	5040037	Identifier	strstr		5039852	0					
ANR	5040038	ArgumentList	opstr		5039852	1					
ANR	5040039	Argument	opstr		5039852	0					
ANR	5040040	Identifier	opstr		5039852	0					
ANR	5040041	Argument	""" + """		5039852	1					
ANR	5040042	PrimaryExpression	""" + """		5039852	0					
ANR	5040043	CompoundStatement		25:28:540:540	5039852	1					
ANR	5040044	ExpressionStatement	"opstr = r_str_replace ( opstr , "" + "" , ""+"" , 1 )"	135:2:2870:2914	5039852	0	True				
ANR	5040045	AssignmentExpression	"opstr = r_str_replace ( opstr , "" + "" , ""+"" , 1 )"		5039852	0		=			
ANR	5040046	Identifier	opstr		5039852	0					
ANR	5040047	CallExpression	"r_str_replace ( opstr , "" + "" , ""+"" , 1 )"		5039852	1					
ANR	5040048	Callee	r_str_replace		5039852	0					
ANR	5040049	Identifier	r_str_replace		5039852	0					
ANR	5040050	ArgumentList	opstr		5039852	1					
ANR	5040051	Argument	opstr		5039852	0					
ANR	5040052	Identifier	opstr		5039852	0					
ANR	5040053	Argument	""" + """		5039852	1					
ANR	5040054	PrimaryExpression	""" + """		5039852	0					
ANR	5040055	Argument	"""+"""		5039852	2					
ANR	5040056	PrimaryExpression	"""+"""		5039852	0					
ANR	5040057	Argument	1		5039852	3					
ANR	5040058	PrimaryExpression	1		5039852	0					
ANR	5040059	ReturnStatement	return opstr ;	137:1:2920:2932	5039852	8	True				
ANR	5040060	Identifier	opstr		5039852	0					
ANR	5040061	ReturnType	R_API char *		5039852	1					
ANR	5040062	Identifier	r_parse_immtrim		5039852	2					
ANR	5040063	ParameterList	char * opstr		5039852	3					
ANR	5040064	Parameter	char * opstr	110:28:2312:2322	5039852	0	True				
ANR	5040065	ParameterType	char *		5039852	0					
ANR	5040066	Identifier	opstr		5039852	1					
ANR	5040067	CFGEntryNode	ENTRY		5039852		True				
ANR	5040068	CFGExitNode	EXIT		5039852		True				
ANR	5040069	Symbol	opstr		5039852						
ANR	5040070	Symbol	p		5039852						
ANR	5040071	Symbol	strlen		5039852						
ANR	5040072	Symbol	NULL		5039852						
ANR	5040073	Symbol	strstr		5039852						
ANR	5040074	Symbol	r_str_replace		5039852						
ANR	5040075	Symbol	* p		5039852						
ANR	5040076	Symbol	* opstr		5039852						
ANR	5040077	Symbol	IS_HEXCHAR		5039852						
ANR	5040078	Symbol	n		5039852						
ANR	5040079	Function	r_parse_varsub	140:0:2937:3160							
ANR	5040080	FunctionDef	"r_parse_varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5040079	0					
ANR	5040081	CompoundStatement		140:109:3046:3160	5040079	0					
ANR	5040082	IfStatement	if ( p -> cur && p -> cur -> varsub )		5040079	0					
ANR	5040083	Condition	p -> cur && p -> cur -> varsub	141:5:3053:3076	5040079	0	True				
ANR	5040084	AndExpression	p -> cur && p -> cur -> varsub		5040079	0		&&			
ANR	5040085	PtrMemberAccess	p -> cur		5040079	0					
ANR	5040086	Identifier	p		5040079	0					
ANR	5040087	Identifier	cur		5040079	1					
ANR	5040088	PtrMemberAccess	p -> cur -> varsub		5040079	1					
ANR	5040089	PtrMemberAccess	p -> cur		5040079	0					
ANR	5040090	Identifier	p		5040079	0					
ANR	5040091	Identifier	cur		5040079	1					
ANR	5040092	Identifier	varsub		5040079	1					
ANR	5040093	CompoundStatement		2:31:32:32	5040079	1					
ANR	5040094	ReturnStatement	"return p -> cur -> varsub ( p , f , addr , oplen , data , str , len ) ;"	142:2:3083:3140	5040079	0	True				
ANR	5040095	CallExpression	"p -> cur -> varsub ( p , f , addr , oplen , data , str , len )"		5040079	0					
ANR	5040096	Callee	p -> cur -> varsub		5040079	0					
ANR	5040097	PtrMemberAccess	p -> cur -> varsub		5040079	0					
ANR	5040098	PtrMemberAccess	p -> cur		5040079	0					
ANR	5040099	Identifier	p		5040079	0					
ANR	5040100	Identifier	cur		5040079	1					
ANR	5040101	Identifier	varsub		5040079	1					
ANR	5040102	ArgumentList	p		5040079	1					
ANR	5040103	Argument	p		5040079	0					
ANR	5040104	Identifier	p		5040079	0					
ANR	5040105	Argument	f		5040079	1					
ANR	5040106	Identifier	f		5040079	0					
ANR	5040107	Argument	addr		5040079	2					
ANR	5040108	Identifier	addr		5040079	0					
ANR	5040109	Argument	oplen		5040079	3					
ANR	5040110	Identifier	oplen		5040079	0					
ANR	5040111	Argument	data		5040079	4					
ANR	5040112	Identifier	data		5040079	0					
ANR	5040113	Argument	str		5040079	5					
ANR	5040114	Identifier	str		5040079	0					
ANR	5040115	Argument	len		5040079	6					
ANR	5040116	Identifier	len		5040079	0					
ANR	5040117	ReturnStatement	return false ;	144:1:3146:3158	5040079	1	True				
ANR	5040118	Identifier	false		5040079	0					
ANR	5040119	ReturnType	R_API bool		5040079	1					
ANR	5040120	Identifier	r_parse_varsub		5040079	2					
ANR	5040121	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5040079	3					
ANR	5040122	Parameter	RParse * p	140:26:2963:2971	5040079	0	True				
ANR	5040123	ParameterType	RParse *		5040079	0					
ANR	5040124	Identifier	p		5040079	1					
ANR	5040125	Parameter	RAnalFunction * f	140:37:2974:2989	5040079	1	True				
ANR	5040126	ParameterType	RAnalFunction *		5040079	0					
ANR	5040127	Identifier	f		5040079	1					
ANR	5040128	Parameter	ut64 addr	140:55:2992:3000	5040079	2	True				
ANR	5040129	ParameterType	ut64		5040079	0					
ANR	5040130	Identifier	addr		5040079	1					
ANR	5040131	Parameter	int oplen	140:66:3003:3011	5040079	3	True				
ANR	5040132	ParameterType	int		5040079	0					
ANR	5040133	Identifier	oplen		5040079	1					
ANR	5040134	Parameter	char * data	140:77:3014:3023	5040079	4	True				
ANR	5040135	ParameterType	char *		5040079	0					
ANR	5040136	Identifier	data		5040079	1					
ANR	5040137	Parameter	char * str	140:89:3026:3034	5040079	5	True				
ANR	5040138	ParameterType	char *		5040079	0					
ANR	5040139	Identifier	str		5040079	1					
ANR	5040140	Parameter	int len	140:100:3037:3043	5040079	6	True				
ANR	5040141	ParameterType	int		5040079	0					
ANR	5040142	Identifier	len		5040079	1					
ANR	5040143	CFGEntryNode	ENTRY		5040079		True				
ANR	5040144	CFGExitNode	EXIT		5040079		True				
ANR	5040145	Symbol	oplen		5040079						
ANR	5040146	Symbol	data		5040079						
ANR	5040147	Symbol	f		5040079						
ANR	5040148	Symbol	false		5040079						
ANR	5040149	Symbol	p -> cur		5040079						
ANR	5040150	Symbol	p		5040079						
ANR	5040151	Symbol	str		5040079						
ANR	5040152	Symbol	len		5040079						
ANR	5040153	Symbol	p -> cur -> varsub		5040079						
ANR	5040154	Symbol	* p		5040079						
ANR	5040155	Symbol	* * p		5040079						
ANR	5040156	Symbol	addr		5040079						
ANR	5040157	Symbol	* p -> cur		5040079						
ANR	5040158	Function	r_parse_set_user_ptr	148:0:3177:3251							
ANR	5040159	FunctionDef	"r_parse_set_user_ptr (RParse * p , void * user)"		5040158	0					
ANR	5040160	CompoundStatement		148:55:3232:3251	5040158	0					
ANR	5040161	ExpressionStatement	p -> user = user	149:1:3235:3249	5040158	0	True				
ANR	5040162	AssignmentExpression	p -> user = user		5040158	0		=			
ANR	5040163	PtrMemberAccess	p -> user		5040158	0					
ANR	5040164	Identifier	p		5040158	0					
ANR	5040165	Identifier	user		5040158	1					
ANR	5040166	Identifier	user		5040158	1					
ANR	5040167	ReturnType	R_API void		5040158	1					
ANR	5040168	Identifier	r_parse_set_user_ptr		5040158	2					
ANR	5040169	ParameterList	"RParse * p , void * user"		5040158	3					
ANR	5040170	Parameter	RParse * p	148:32:3209:3217	5040158	0	True				
ANR	5040171	ParameterType	RParse *		5040158	0					
ANR	5040172	Identifier	p		5040158	1					
ANR	5040173	Parameter	void * user	148:43:3220:3229	5040158	1	True				
ANR	5040174	ParameterType	void *		5040158	0					
ANR	5040175	Identifier	user		5040158	1					
ANR	5040176	CFGEntryNode	ENTRY		5040158		True				
ANR	5040177	CFGExitNode	EXIT		5040158		True				
ANR	5040178	Symbol	p		5040158						
ANR	5040179	Symbol	* p		5040158						
ANR	5040180	Symbol	user		5040158						
ANR	5040181	Symbol	p -> user		5040158						
