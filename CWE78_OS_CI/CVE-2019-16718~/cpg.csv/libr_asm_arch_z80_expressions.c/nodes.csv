command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3461459	File	data/converged/CVE-2019-16718~_radare2/libr_asm_arch_z80_expressions.c								
ANR	3461460	DeclStmt									
ANR	3461461	Decl							int	"int ( const char * * p , char delimiter , int * valid , int level , int * check , int print_errors )"	do_rd_expr
ANR	3461462	Function	rd_number	41:0:1354:2150							
ANR	3461463	FunctionDef	"rd_number (const char * * p , const char * * endp , int base)"		3461462	0					
ANR	3461464	CompoundStatement		43:0:1421:2150	3461462	0					
ANR	3461465	IdentifierDeclStatement	"int result = 0 , i ;"	44:2:1425:1442	3461462	0	True				
ANR	3461466	IdentifierDecl	result = 0		3461462	0					
ANR	3461467	IdentifierDeclType	int		3461462	0					
ANR	3461468	Identifier	result		3461462	1					
ANR	3461469	AssignmentExpression	result = 0		3461462	2		=			
ANR	3461470	Identifier	result		3461462	0					
ANR	3461471	PrimaryExpression	0		3461462	1					
ANR	3461472	IdentifierDecl	i		3461462	1					
ANR	3461473	IdentifierDeclType	int		3461462	0					
ANR	3461474	Identifier	i		3461462	1					
ANR	3461475	IdentifierDeclStatement	"char * c , num [ ] = ""0123456789abcdefghijklmnopqrstuvwxyz"" ;"	45:2:1446:1501	3461462	1	True				
ANR	3461476	IdentifierDecl	* c		3461462	0					
ANR	3461477	IdentifierDeclType	char *		3461462	0					
ANR	3461478	Identifier	c		3461462	1					
ANR	3461479	IdentifierDecl	"num [ ] = ""0123456789abcdefghijklmnopqrstuvwxyz"""		3461462	1					
ANR	3461480	IdentifierDeclType	char [ ]		3461462	0					
ANR	3461481	Identifier	num		3461462	1					
ANR	3461482	AssignmentExpression	"num [ ] = ""0123456789abcdefghijklmnopqrstuvwxyz"""		3461462	2		=			
ANR	3461483	Identifier	num		3461462	0					
ANR	3461484	PrimaryExpression	"""0123456789abcdefghijklmnopqrstuvwxyz"""		3461462	1					
ANR	3461485	IfStatement	if ( verbose >= 6 )		3461462	2					
ANR	3461486	Condition	verbose >= 6	46:6:1509:1520	3461462	0	True				
ANR	3461487	RelationalExpression	verbose >= 6		3461462	0		>=			
ANR	3461488	Identifier	verbose		3461462	0					
ANR	3461489	PrimaryExpression	6		3461462	1					
ANR	3461490	Statement	fprintf	47:4:1527:1533	3461462	1	True				
ANR	3461491	Statement	(	47:12:1535:1535	3461462	3	True				
ANR	3461492	Statement	stderr	47:13:1536:1541	3461462	4	True				
ANR	3461493	Statement	","	47:19:1542:1542	3461462	5	True				
ANR	3461494	Statement	"""%5d (0x%04x): Starting to read number of base %d"""	47:21:1544:1593	3461462	6	True				
ANR	3461495	Statement	"""(string=%s).\\n"""	48:6:1601:1616	3461462	7	True				
ANR	3461496	Statement	","	48:22:1617:1617	3461462	8	True				
ANR	3461497	Statement	stack	48:24:1619:1623	3461462	9	True				
ANR	3461498	Statement	[	48:29:1624:1624	3461462	10	True				
ANR	3461499	Statement	sp	48:30:1625:1626	3461462	11	True				
ANR	3461500	Statement	]	48:32:1627:1627	3461462	12	True				
ANR	3461501	Statement	.	48:33:1628:1628	3461462	13	True				
ANR	3461502	Statement	line	48:34:1629:1632	3461462	14	True				
ANR	3461503	Statement	","	48:38:1633:1633	3461462	15	True				
ANR	3461504	Statement	addr	48:40:1635:1638	3461462	16	True				
ANR	3461505	Statement	","	48:44:1639:1639	3461462	17	True				
ANR	3461506	Statement	base	48:46:1641:1644	3461462	18	True				
ANR	3461507	Statement	","	48:50:1645:1645	3461462	19	True				
ANR	3461508	Statement	*	48:52:1647:1647	3461462	20	True				
ANR	3461509	Statement	p	48:53:1648:1648	3461462	21	True				
ANR	3461510	Statement	)	48:54:1649:1649	3461462	22	True				
ANR	3461511	ExpressionStatement		48:55:1650:1650	3461462	23	True				
ANR	3461512	ExpressionStatement	num [ base ] = '\\0'	49:2:1654:1670	3461462	24	True				
ANR	3461513	AssignmentExpression	num [ base ] = '\\0'		3461462	0		=			
ANR	3461514	ArrayIndexing	num [ base ]		3461462	0					
ANR	3461515	Identifier	num		3461462	0					
ANR	3461516	Identifier	base		3461462	1					
ANR	3461517	PrimaryExpression	'\\0'		3461462	1					
ANR	3461518	ExpressionStatement	* p = delspc ( * p )	50:2:1674:1690	3461462	25	True				
ANR	3461519	AssignmentExpression	* p = delspc ( * p )		3461462	0		=			
ANR	3461520	UnaryOperationExpression	* p		3461462	0					
ANR	3461521	UnaryOperator	*		3461462	0					
ANR	3461522	Identifier	p		3461462	1					
ANR	3461523	CallExpression	delspc ( * p )		3461462	1					
ANR	3461524	Callee	delspc		3461462	0					
ANR	3461525	Identifier	delspc		3461462	0					
ANR	3461526	ArgumentList	* p		3461462	1					
ANR	3461527	Argument	* p		3461462	0					
ANR	3461528	UnaryOperationExpression	* p		3461462	0					
ANR	3461529	UnaryOperator	*		3461462	0					
ANR	3461530	Identifier	p		3461462	1					
ANR	3461531	WhileStatement	"while ( * * p && ( c = strchr ( num , tolower ( ( const unsigned char ) * * p ) ) ) )"		3461462	26					
ANR	3461532	Condition	"* * p && ( c = strchr ( num , tolower ( ( const unsigned char ) * * p ) ) )"	51:9:1701:1761	3461462	0	True				
ANR	3461533	AndExpression	"* * p && ( c = strchr ( num , tolower ( ( const unsigned char ) * * p ) ) )"		3461462	0		&&			
ANR	3461534	UnaryOperationExpression	* * p		3461462	0					
ANR	3461535	UnaryOperator	*		3461462	0					
ANR	3461536	UnaryOperationExpression	* p		3461462	1					
ANR	3461537	UnaryOperator	*		3461462	0					
ANR	3461538	Identifier	p		3461462	1					
ANR	3461539	AssignmentExpression	"c = strchr ( num , tolower ( ( const unsigned char ) * * p ) )"		3461462	1		=			
ANR	3461540	Identifier	c		3461462	0					
ANR	3461541	CallExpression	"strchr ( num , tolower ( ( const unsigned char ) * * p ) )"		3461462	1					
ANR	3461542	Callee	strchr		3461462	0					
ANR	3461543	Identifier	strchr		3461462	0					
ANR	3461544	ArgumentList	num		3461462	1					
ANR	3461545	Argument	num		3461462	0					
ANR	3461546	Identifier	num		3461462	0					
ANR	3461547	Argument	tolower ( ( const unsigned char ) * * p )		3461462	1					
ANR	3461548	CallExpression	tolower ( ( const unsigned char ) * * p )		3461462	0					
ANR	3461549	Callee	tolower		3461462	0					
ANR	3461550	Identifier	tolower		3461462	0					
ANR	3461551	ArgumentList	( const unsigned char ) * * p		3461462	1					
ANR	3461552	Argument	( const unsigned char ) * * p		3461462	0					
ANR	3461553	CastExpression	( const unsigned char ) * * p		3461462	0					
ANR	3461554	CastTarget	const unsigned char		3461462	0					
ANR	3461555	UnaryOperationExpression	* * p		3461462	1					
ANR	3461556	UnaryOperator	*		3461462	0					
ANR	3461557	UnaryOperationExpression	* p		3461462	1					
ANR	3461558	UnaryOperator	*		3461462	0					
ANR	3461559	Identifier	p		3461462	1					
ANR	3461560	CompoundStatement		10:4:346:346	3461462	1					
ANR	3461561	ExpressionStatement	i = c - num	53:6:1776:1787	3461462	0	True				
ANR	3461562	AssignmentExpression	i = c - num		3461462	0		=			
ANR	3461563	Identifier	i		3461462	0					
ANR	3461564	AdditiveExpression	c - num		3461462	1		-			
ANR	3461565	Identifier	c		3461462	0					
ANR	3461566	Identifier	num		3461462	1					
ANR	3461567	IfStatement	if ( verbose >= 7 )		3461462	1					
ANR	3461568	Condition	verbose >= 7	54:10:1799:1810	3461462	0	True				
ANR	3461569	RelationalExpression	verbose >= 7		3461462	0		>=			
ANR	3461570	Identifier	verbose		3461462	0					
ANR	3461571	PrimaryExpression	7		3461462	1					
ANR	3461572	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Digit found:%1x.\\n"" , stack [ sp ] . line , addr , i )"	55:1:1814:1894	3461462	1	True				
ANR	3461573	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Digit found:%1x.\\n"" , stack [ sp ] . line , addr , i )"		3461462	0					
ANR	3461574	Callee	fprintf		3461462	0					
ANR	3461575	Identifier	fprintf		3461462	0					
ANR	3461576	ArgumentList	stderr		3461462	1					
ANR	3461577	Argument	stderr		3461462	0					
ANR	3461578	Identifier	stderr		3461462	0					
ANR	3461579	Argument	"""%5d (0x%04x): Digit found:%1x.\\n"""		3461462	1					
ANR	3461580	PrimaryExpression	"""%5d (0x%04x): Digit found:%1x.\\n"""		3461462	0					
ANR	3461581	Argument	stack [ sp ] . line		3461462	2					
ANR	3461582	MemberAccess	stack [ sp ] . line		3461462	0					
ANR	3461583	ArrayIndexing	stack [ sp ]		3461462	0					
ANR	3461584	Identifier	stack		3461462	0					
ANR	3461585	Identifier	sp		3461462	1					
ANR	3461586	Identifier	line		3461462	1					
ANR	3461587	Argument	addr		3461462	3					
ANR	3461588	Identifier	addr		3461462	0					
ANR	3461589	Argument	i		3461462	4					
ANR	3461590	Identifier	i		3461462	0					
ANR	3461591	ExpressionStatement	result = result * base + i	57:6:1902:1928	3461462	2	True				
ANR	3461592	AssignmentExpression	result = result * base + i		3461462	0		=			
ANR	3461593	Identifier	result		3461462	0					
ANR	3461594	AdditiveExpression	result * base + i		3461462	1		+			
ANR	3461595	MultiplicativeExpression	result * base		3461462	0		*			
ANR	3461596	Identifier	result		3461462	0					
ANR	3461597	Identifier	base		3461462	1					
ANR	3461598	Identifier	i		3461462	1					
ANR	3461599	ExpressionStatement	( * p ) ++	58:6:1936:1942	3461462	3	True				
ANR	3461600	PostIncDecOperationExpression	( * p ) ++		3461462	0					
ANR	3461601	UnaryOperationExpression	* p		3461462	0					
ANR	3461602	UnaryOperator	*		3461462	0					
ANR	3461603	Identifier	p		3461462	1					
ANR	3461604	IncDec	++		3461462	1					
ANR	3461605	IfStatement	if ( endp )		3461462	27					
ANR	3461606	Condition	endp	60:6:1956:1959	3461462	0	True				
ANR	3461607	Identifier	endp		3461462	0					
ANR	3461608	ExpressionStatement	* endp = * p	61:4:1966:1976	3461462	1	True				
ANR	3461609	AssignmentExpression	* endp = * p		3461462	0		=			
ANR	3461610	UnaryOperationExpression	* endp		3461462	0					
ANR	3461611	UnaryOperator	*		3461462	0					
ANR	3461612	Identifier	endp		3461462	1					
ANR	3461613	UnaryOperationExpression	* p		3461462	1					
ANR	3461614	UnaryOperator	*		3461462	0					
ANR	3461615	Identifier	p		3461462	1					
ANR	3461616	ExpressionStatement	* p = delspc ( * p )	62:2:1980:1996	3461462	28	True				
ANR	3461617	AssignmentExpression	* p = delspc ( * p )		3461462	0		=			
ANR	3461618	UnaryOperationExpression	* p		3461462	0					
ANR	3461619	UnaryOperator	*		3461462	0					
ANR	3461620	Identifier	p		3461462	1					
ANR	3461621	CallExpression	delspc ( * p )		3461462	1					
ANR	3461622	Callee	delspc		3461462	0					
ANR	3461623	Identifier	delspc		3461462	0					
ANR	3461624	ArgumentList	* p		3461462	1					
ANR	3461625	Argument	* p		3461462	0					
ANR	3461626	UnaryOperationExpression	* p		3461462	0					
ANR	3461627	UnaryOperator	*		3461462	0					
ANR	3461628	Identifier	p		3461462	1					
ANR	3461629	IfStatement	if ( verbose >= 7 )		3461462	29					
ANR	3461630	Condition	verbose >= 7	63:6:2004:2015	3461462	0	True				
ANR	3461631	RelationalExpression	verbose >= 7		3461462	0		>=			
ANR	3461632	Identifier	verbose		3461462	0					
ANR	3461633	PrimaryExpression	7		3461462	1					
ANR	3461634	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_number returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	64:4:2022:2131	3461462	1	True				
ANR	3461635	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_number returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3461462	0					
ANR	3461636	Callee	fprintf		3461462	0					
ANR	3461637	Identifier	fprintf		3461462	0					
ANR	3461638	ArgumentList	stderr		3461462	1					
ANR	3461639	Argument	stderr		3461462	0					
ANR	3461640	Identifier	stderr		3461462	0					
ANR	3461641	Argument	"""%5d (0x%04x): rd_number returned %d (%04x).\\n"""		3461462	1					
ANR	3461642	PrimaryExpression	"""%5d (0x%04x): rd_number returned %d (%04x).\\n"""		3461462	0					
ANR	3461643	Argument	stack [ sp ] . line		3461462	2					
ANR	3461644	MemberAccess	stack [ sp ] . line		3461462	0					
ANR	3461645	ArrayIndexing	stack [ sp ]		3461462	0					
ANR	3461646	Identifier	stack		3461462	0					
ANR	3461647	Identifier	sp		3461462	1					
ANR	3461648	Identifier	line		3461462	1					
ANR	3461649	Argument	addr		3461462	3					
ANR	3461650	Identifier	addr		3461462	0					
ANR	3461651	Argument	result		3461462	4					
ANR	3461652	Identifier	result		3461462	0					
ANR	3461653	Argument	result		3461462	5					
ANR	3461654	Identifier	result		3461462	0					
ANR	3461655	ReturnStatement	return result ;	66:2:2135:2148	3461462	30	True				
ANR	3461656	Identifier	result		3461462	0					
ANR	3461657	ReturnType	static int		3461462	1					
ANR	3461658	Identifier	rd_number		3461462	2					
ANR	3461659	ParameterList	"const char * * p , const char * * endp , int base"		3461462	3					
ANR	3461660	Parameter	const char * * p	42:11:1376:1389	3461462	0	True				
ANR	3461661	ParameterType	const char * *		3461462	0					
ANR	3461662	Identifier	p		3461462	1					
ANR	3461663	Parameter	const char * * endp	42:27:1392:1408	3461462	1	True				
ANR	3461664	ParameterType	const char * *		3461462	0					
ANR	3461665	Identifier	endp		3461462	1					
ANR	3461666	Parameter	int base	42:46:1411:1418	3461462	2	True				
ANR	3461667	ParameterType	int		3461462	0					
ANR	3461668	Identifier	base		3461462	1					
ANR	3461669	CFGEntryNode	ENTRY		3461462		True				
ANR	3461670	CFGExitNode	EXIT		3461462		True				
ANR	3461671	Symbol	* sp		3461462						
ANR	3461672	Symbol	stack		3461462						
ANR	3461673	Symbol	c		3461462						
ANR	3461674	Symbol	tolower		3461462						
ANR	3461675	Symbol	num		3461462						
ANR	3461676	Symbol	i		3461462						
ANR	3461677	Symbol	strchr		3461462						
ANR	3461678	Symbol	stderr		3461462						
ANR	3461679	Symbol	verbose		3461462						
ANR	3461680	Symbol	p		3461462						
ANR	3461681	Symbol	result		3461462						
ANR	3461682	Symbol	* num		3461462						
ANR	3461683	Symbol	* endp		3461462						
ANR	3461684	Symbol	* stack		3461462						
ANR	3461685	Symbol	endp		3461462						
ANR	3461686	Symbol	* p		3461462						
ANR	3461687	Symbol	stack [ sp ] . line		3461462						
ANR	3461688	Symbol	* base		3461462						
ANR	3461689	Symbol	* * p		3461462						
ANR	3461690	Symbol	addr		3461462						
ANR	3461691	Symbol	delspc		3461462						
ANR	3461692	Symbol	sp		3461462						
ANR	3461693	Symbol	base		3461462						
ANR	3461694	Function	rd_otherbasenumber	69:0:2153:2913							
ANR	3461695	FunctionDef	"rd_otherbasenumber (const char * * p , int * valid , int print_errors)"		3461694	0					
ANR	3461696	CompoundStatement		71:0:2230:2913	3461694	0					
ANR	3461697	IdentifierDeclStatement	char c ;	72:2:2234:2240	3461694	0	True				
ANR	3461698	IdentifierDecl	c		3461694	0					
ANR	3461699	IdentifierDeclType	char		3461694	0					
ANR	3461700	Identifier	c		3461694	1					
ANR	3461701	IfStatement	if ( verbose >= 6 )		3461694	1					
ANR	3461702	Condition	verbose >= 6	73:6:2248:2259	3461694	0	True				
ANR	3461703	RelationalExpression	verbose >= 6		3461694	0		>=			
ANR	3461704	Identifier	verbose		3461694	0					
ANR	3461705	PrimaryExpression	6		3461694	1					
ANR	3461706	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read basenumber (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	74:4:2266:2380	3461694	1	True				
ANR	3461707	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read basenumber (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3461694	0					
ANR	3461708	Callee	fprintf		3461694	0					
ANR	3461709	Identifier	fprintf		3461694	0					
ANR	3461710	ArgumentList	stderr		3461694	1					
ANR	3461711	Argument	stderr		3461694	0					
ANR	3461712	Identifier	stderr		3461694	0					
ANR	3461713	Argument	"""%5d (0x%04x): Starting to read basenumber (string=%s).\\n"""		3461694	1					
ANR	3461714	PrimaryExpression	"""%5d (0x%04x): Starting to read basenumber (string=%s).\\n"""		3461694	0					
ANR	3461715	Argument	stack [ sp ] . line		3461694	2					
ANR	3461716	MemberAccess	stack [ sp ] . line		3461694	0					
ANR	3461717	ArrayIndexing	stack [ sp ]		3461694	0					
ANR	3461718	Identifier	stack		3461694	0					
ANR	3461719	Identifier	sp		3461694	1					
ANR	3461720	Identifier	line		3461694	1					
ANR	3461721	Argument	addr		3461694	3					
ANR	3461722	Identifier	addr		3461694	0					
ANR	3461723	Argument	* p		3461694	4					
ANR	3461724	UnaryOperationExpression	* p		3461694	0					
ANR	3461725	UnaryOperator	*		3461694	0					
ANR	3461726	Identifier	p		3461694	1					
ANR	3461727	ExpressionStatement	( * p ) ++	77:2:2384:2390	3461694	2	True				
ANR	3461728	PostIncDecOperationExpression	( * p ) ++		3461694	0					
ANR	3461729	UnaryOperationExpression	* p		3461694	0					
ANR	3461730	UnaryOperator	*		3461694	0					
ANR	3461731	Identifier	p		3461694	1					
ANR	3461732	IncDec	++		3461694	1					
ANR	3461733	IfStatement	if ( ! * * p )		3461694	3					
ANR	3461734	Condition	! * * p	78:6:2398:2401	3461694	0	True				
ANR	3461735	UnaryOperationExpression	! * * p		3461694	0					
ANR	3461736	UnaryOperator	!		3461694	0					
ANR	3461737	UnaryOperationExpression	* * p		3461694	1					
ANR	3461738	UnaryOperator	*		3461694	0					
ANR	3461739	UnaryOperationExpression	* p		3461694	1					
ANR	3461740	UnaryOperator	*		3461694	0					
ANR	3461741	Identifier	p		3461694	1					
ANR	3461742	CompoundStatement		9:4:177:177	3461694	1					
ANR	3461743	IfStatement	if ( valid )		3461694	0					
ANR	3461744	Condition	valid	80:10:2420:2424	3461694	0	True				
ANR	3461745	Identifier	valid		3461694	0					
ANR	3461746	ExpressionStatement	* valid = 0	81:1:2428:2438	3461694	1	True				
ANR	3461747	AssignmentExpression	* valid = 0		3461694	0		=			
ANR	3461748	UnaryOperationExpression	* valid		3461694	0					
ANR	3461749	UnaryOperator	*		3461694	0					
ANR	3461750	Identifier	valid		3461694	1					
ANR	3461751	PrimaryExpression	0		3461694	1					
ANR	3461752	ElseStatement	else		3461694	0					
ANR	3461753	IfStatement	if ( print_errors )		3461694	0					
ANR	3461754	Condition	print_errors	82:15:2455:2466	3461694	0	True				
ANR	3461755	Identifier	print_errors		3461694	0					
ANR	3461756	ExpressionStatement	"printerr ( 1 , ""unexpected end of line after `@'\\n"" )"	83:1:2470:2520	3461694	1	True				
ANR	3461757	CallExpression	"printerr ( 1 , ""unexpected end of line after `@'\\n"" )"		3461694	0					
ANR	3461758	Callee	printerr		3461694	0					
ANR	3461759	Identifier	printerr		3461694	0					
ANR	3461760	ArgumentList	1		3461694	1					
ANR	3461761	Argument	1		3461694	0					
ANR	3461762	PrimaryExpression	1		3461694	0					
ANR	3461763	Argument	"""unexpected end of line after `@'\\n"""		3461694	1					
ANR	3461764	PrimaryExpression	"""unexpected end of line after `@'\\n"""		3461694	0					
ANR	3461765	ReturnStatement	return 0 ;	84:6:2528:2536	3461694	1	True				
ANR	3461766	PrimaryExpression	0		3461694	0					
ANR	3461767	IfStatement	if ( * * p == '0' || ! isalnum ( ( const unsigned char ) * * p ) )		3461694	4					
ANR	3461768	Condition	* * p == '0' || ! isalnum ( ( const unsigned char ) * * p )	86:6:2550:2598	3461694	0	True				
ANR	3461769	OrExpression	* * p == '0' || ! isalnum ( ( const unsigned char ) * * p )		3461694	0		||			
ANR	3461770	EqualityExpression	* * p == '0'		3461694	0		==			
ANR	3461771	UnaryOperationExpression	* * p		3461694	0					
ANR	3461772	UnaryOperator	*		3461694	0					
ANR	3461773	UnaryOperationExpression	* p		3461694	1					
ANR	3461774	UnaryOperator	*		3461694	0					
ANR	3461775	Identifier	p		3461694	1					
ANR	3461776	PrimaryExpression	'0'		3461694	1					
ANR	3461777	UnaryOperationExpression	! isalnum ( ( const unsigned char ) * * p )		3461694	1					
ANR	3461778	UnaryOperator	!		3461694	0					
ANR	3461779	CallExpression	isalnum ( ( const unsigned char ) * * p )		3461694	1					
ANR	3461780	Callee	isalnum		3461694	0					
ANR	3461781	Identifier	isalnum		3461694	0					
ANR	3461782	ArgumentList	( const unsigned char ) * * p		3461694	1					
ANR	3461783	Argument	( const unsigned char ) * * p		3461694	0					
ANR	3461784	CastExpression	( const unsigned char ) * * p		3461694	0					
ANR	3461785	CastTarget	const unsigned char		3461694	0					
ANR	3461786	UnaryOperationExpression	* * p		3461694	1					
ANR	3461787	UnaryOperator	*		3461694	0					
ANR	3461788	UnaryOperationExpression	* p		3461694	1					
ANR	3461789	UnaryOperator	*		3461694	0					
ANR	3461790	Identifier	p		3461694	1					
ANR	3461791	CompoundStatement		17:4:374:374	3461694	1					
ANR	3461792	IfStatement	if ( valid )		3461694	0					
ANR	3461793	Condition	valid	88:10:2617:2621	3461694	0	True				
ANR	3461794	Identifier	valid		3461694	0					
ANR	3461795	ExpressionStatement	* valid = 0	89:1:2625:2635	3461694	1	True				
ANR	3461796	AssignmentExpression	* valid = 0		3461694	0		=			
ANR	3461797	UnaryOperationExpression	* valid		3461694	0					
ANR	3461798	UnaryOperator	*		3461694	0					
ANR	3461799	Identifier	valid		3461694	1					
ANR	3461800	PrimaryExpression	0		3461694	1					
ANR	3461801	ElseStatement	else		3461694	0					
ANR	3461802	IfStatement	if ( print_errors )		3461694	0					
ANR	3461803	Condition	print_errors	90:15:2652:2663	3461694	0	True				
ANR	3461804	Identifier	print_errors		3461694	0					
ANR	3461805	ExpressionStatement	"printerr ( 1 , ""base must be between 1 and z\\n"" )"	91:1:2667:2713	3461694	1	True				
ANR	3461806	CallExpression	"printerr ( 1 , ""base must be between 1 and z\\n"" )"		3461694	0					
ANR	3461807	Callee	printerr		3461694	0					
ANR	3461808	Identifier	printerr		3461694	0					
ANR	3461809	ArgumentList	1		3461694	1					
ANR	3461810	Argument	1		3461694	0					
ANR	3461811	PrimaryExpression	1		3461694	0					
ANR	3461812	Argument	"""base must be between 1 and z\\n"""		3461694	1					
ANR	3461813	PrimaryExpression	"""base must be between 1 and z\\n"""		3461694	0					
ANR	3461814	ReturnStatement	return 0 ;	92:6:2721:2729	3461694	1	True				
ANR	3461815	PrimaryExpression	0		3461694	0					
ANR	3461816	ExpressionStatement	c = * * p	94:2:2739:2746	3461694	5	True				
ANR	3461817	AssignmentExpression	c = * * p		3461694	0		=			
ANR	3461818	Identifier	c		3461694	0					
ANR	3461819	UnaryOperationExpression	* * p		3461694	1					
ANR	3461820	UnaryOperator	*		3461694	0					
ANR	3461821	UnaryOperationExpression	* p		3461694	1					
ANR	3461822	UnaryOperator	*		3461694	0					
ANR	3461823	Identifier	p		3461694	1					
ANR	3461824	ExpressionStatement	( * p ) ++	95:2:2750:2756	3461694	6	True				
ANR	3461825	PostIncDecOperationExpression	( * p ) ++		3461694	0					
ANR	3461826	UnaryOperationExpression	* p		3461694	0					
ANR	3461827	UnaryOperator	*		3461694	0					
ANR	3461828	Identifier	p		3461694	1					
ANR	3461829	IncDec	++		3461694	1					
ANR	3461830	IfStatement	if ( isalpha ( ( const unsigned char ) * * p ) )		3461694	7					
ANR	3461831	Condition	isalpha ( ( const unsigned char ) * * p )	96:6:2764:2797	3461694	0	True				
ANR	3461832	CallExpression	isalpha ( ( const unsigned char ) * * p )		3461694	0					
ANR	3461833	Callee	isalpha		3461694	0					
ANR	3461834	Identifier	isalpha		3461694	0					
ANR	3461835	ArgumentList	( const unsigned char ) * * p		3461694	1					
ANR	3461836	Argument	( const unsigned char ) * * p		3461694	0					
ANR	3461837	CastExpression	( const unsigned char ) * * p		3461694	0					
ANR	3461838	CastTarget	const unsigned char		3461694	0					
ANR	3461839	UnaryOperationExpression	* * p		3461694	1					
ANR	3461840	UnaryOperator	*		3461694	0					
ANR	3461841	UnaryOperationExpression	* p		3461694	1					
ANR	3461842	UnaryOperator	*		3461694	0					
ANR	3461843	Identifier	p		3461694	1					
ANR	3461844	ReturnStatement	"return rd_number ( p , NULL , tolower ( ( unsigned char ) c ) - 'a' + 1 ) ;"	97:4:2804:2868	3461694	1	True				
ANR	3461845	CallExpression	"rd_number ( p , NULL , tolower ( ( unsigned char ) c ) - 'a' + 1 )"		3461694	0					
ANR	3461846	Callee	rd_number		3461694	0					
ANR	3461847	Identifier	rd_number		3461694	0					
ANR	3461848	ArgumentList	p		3461694	1					
ANR	3461849	Argument	p		3461694	0					
ANR	3461850	Identifier	p		3461694	0					
ANR	3461851	Argument	NULL		3461694	1					
ANR	3461852	Identifier	NULL		3461694	0					
ANR	3461853	Argument	tolower ( ( unsigned char ) c ) - 'a' + 1		3461694	2					
ANR	3461854	AdditiveExpression	tolower ( ( unsigned char ) c ) - 'a' + 1		3461694	0		-			
ANR	3461855	CallExpression	tolower ( ( unsigned char ) c )		3461694	0					
ANR	3461856	Callee	tolower		3461694	0					
ANR	3461857	Identifier	tolower		3461694	0					
ANR	3461858	ArgumentList	( unsigned char ) c		3461694	1					
ANR	3461859	Argument	( unsigned char ) c		3461694	0					
ANR	3461860	CastExpression	( unsigned char ) c		3461694	0					
ANR	3461861	CastTarget	unsigned char		3461694	0					
ANR	3461862	Identifier	c		3461694	1					
ANR	3461863	AdditiveExpression	'a' + 1		3461694	1		+			
ANR	3461864	PrimaryExpression	'a'		3461694	0					
ANR	3461865	PrimaryExpression	1		3461694	1					
ANR	3461866	ReturnStatement	"return rd_number ( p , NULL , c - '0' + 1 ) ;"	98:2:2872:2911	3461694	8	True				
ANR	3461867	CallExpression	"rd_number ( p , NULL , c - '0' + 1 )"		3461694	0					
ANR	3461868	Callee	rd_number		3461694	0					
ANR	3461869	Identifier	rd_number		3461694	0					
ANR	3461870	ArgumentList	p		3461694	1					
ANR	3461871	Argument	p		3461694	0					
ANR	3461872	Identifier	p		3461694	0					
ANR	3461873	Argument	NULL		3461694	1					
ANR	3461874	Identifier	NULL		3461694	0					
ANR	3461875	Argument	c - '0' + 1		3461694	2					
ANR	3461876	AdditiveExpression	c - '0' + 1		3461694	0		-			
ANR	3461877	Identifier	c		3461694	0					
ANR	3461878	AdditiveExpression	'0' + 1		3461694	1		+			
ANR	3461879	PrimaryExpression	'0'		3461694	0					
ANR	3461880	PrimaryExpression	1		3461694	1					
ANR	3461881	ReturnType	static int		3461694	1					
ANR	3461882	Identifier	rd_otherbasenumber		3461694	2					
ANR	3461883	ParameterList	"const char * * p , int * valid , int print_errors"		3461694	3					
ANR	3461884	Parameter	const char * * p	70:20:2184:2197	3461694	0	True				
ANR	3461885	ParameterType	const char * *		3461694	0					
ANR	3461886	Identifier	p		3461694	1					
ANR	3461887	Parameter	int * valid	70:36:2200:2209	3461694	1	True				
ANR	3461888	ParameterType	int *		3461694	0					
ANR	3461889	Identifier	valid		3461694	1					
ANR	3461890	Parameter	int print_errors	70:48:2212:2227	3461694	2	True				
ANR	3461891	ParameterType	int		3461694	0					
ANR	3461892	Identifier	print_errors		3461694	1					
ANR	3461893	CFGEntryNode	ENTRY		3461694		True				
ANR	3461894	CFGExitNode	EXIT		3461694		True				
ANR	3461895	Symbol	* sp		3461694						
ANR	3461896	Symbol	isalpha		3461694						
ANR	3461897	Symbol	rd_number		3461694						
ANR	3461898	Symbol	stack		3461694						
ANR	3461899	Symbol	c		3461694						
ANR	3461900	Symbol	NULL		3461694						
ANR	3461901	Symbol	isalnum		3461694						
ANR	3461902	Symbol	tolower		3461694						
ANR	3461903	Symbol	* valid		3461694						
ANR	3461904	Symbol	stderr		3461694						
ANR	3461905	Symbol	verbose		3461694						
ANR	3461906	Symbol	p		3461694						
ANR	3461907	Symbol	valid		3461694						
ANR	3461908	Symbol	print_errors		3461694						
ANR	3461909	Symbol	* stack		3461694						
ANR	3461910	Symbol	* p		3461694						
ANR	3461911	Symbol	stack [ sp ] . line		3461694						
ANR	3461912	Symbol	* * p		3461694						
ANR	3461913	Symbol	addr		3461694						
ANR	3461914	Symbol	sp		3461694						
ANR	3461915	Function	rd_character	101:0:2916:4507							
ANR	3461916	FunctionDef	"rd_character (const char * * p , int * valid , int print_errors)"		3461915	0					
ANR	3461917	CompoundStatement		103:0:2987:4507	3461915	0					
ANR	3461918	IdentifierDeclStatement	int i ;	104:2:2991:2996	3461915	0	True				
ANR	3461919	IdentifierDecl	i		3461915	0					
ANR	3461920	IdentifierDeclType	int		3461915	0					
ANR	3461921	Identifier	i		3461915	1					
ANR	3461922	IfStatement	if ( verbose >= 6 )		3461915	1					
ANR	3461923	Condition	verbose >= 6	105:6:3004:3015	3461915	0	True				
ANR	3461924	RelationalExpression	verbose >= 6		3461915	0		>=			
ANR	3461925	Identifier	verbose		3461915	0					
ANR	3461926	PrimaryExpression	6		3461915	1					
ANR	3461927	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read character (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	106:4:3022:3135	3461915	1	True				
ANR	3461928	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read character (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3461915	0					
ANR	3461929	Callee	fprintf		3461915	0					
ANR	3461930	Identifier	fprintf		3461915	0					
ANR	3461931	ArgumentList	stderr		3461915	1					
ANR	3461932	Argument	stderr		3461915	0					
ANR	3461933	Identifier	stderr		3461915	0					
ANR	3461934	Argument	"""%5d (0x%04x): Starting to read character (string=%s).\\n"""		3461915	1					
ANR	3461935	PrimaryExpression	"""%5d (0x%04x): Starting to read character (string=%s).\\n"""		3461915	0					
ANR	3461936	Argument	stack [ sp ] . line		3461915	2					
ANR	3461937	MemberAccess	stack [ sp ] . line		3461915	0					
ANR	3461938	ArrayIndexing	stack [ sp ]		3461915	0					
ANR	3461939	Identifier	stack		3461915	0					
ANR	3461940	Identifier	sp		3461915	1					
ANR	3461941	Identifier	line		3461915	1					
ANR	3461942	Argument	addr		3461915	3					
ANR	3461943	Identifier	addr		3461915	0					
ANR	3461944	Argument	* p		3461915	4					
ANR	3461945	UnaryOperationExpression	* p		3461915	0					
ANR	3461946	UnaryOperator	*		3461915	0					
ANR	3461947	Identifier	p		3461915	1					
ANR	3461948	ExpressionStatement	i = * * p	109:2:3139:3146	3461915	2	True				
ANR	3461949	AssignmentExpression	i = * * p		3461915	0		=			
ANR	3461950	Identifier	i		3461915	0					
ANR	3461951	UnaryOperationExpression	* * p		3461915	1					
ANR	3461952	UnaryOperator	*		3461915	0					
ANR	3461953	UnaryOperationExpression	* p		3461915	1					
ANR	3461954	UnaryOperator	*		3461915	0					
ANR	3461955	Identifier	p		3461915	1					
ANR	3461956	IfStatement	if ( ! i )		3461915	3					
ANR	3461957	Condition	! i	110:6:3154:3155	3461915	0	True				
ANR	3461958	UnaryOperationExpression	! i		3461915	0					
ANR	3461959	UnaryOperator	!		3461915	0					
ANR	3461960	Identifier	i		3461915	1					
ANR	3461961	CompoundStatement		9:4:174:174	3461915	1					
ANR	3461962	IfStatement	if ( valid )		3461915	0					
ANR	3461963	Condition	valid	112:10:3174:3178	3461915	0	True				
ANR	3461964	Identifier	valid		3461915	0					
ANR	3461965	ExpressionStatement	* valid = 0	113:1:3182:3192	3461915	1	True				
ANR	3461966	AssignmentExpression	* valid = 0		3461915	0		=			
ANR	3461967	UnaryOperationExpression	* valid		3461915	0					
ANR	3461968	UnaryOperator	*		3461915	0					
ANR	3461969	Identifier	valid		3461915	1					
ANR	3461970	PrimaryExpression	0		3461915	1					
ANR	3461971	ElseStatement	else		3461915	0					
ANR	3461972	IfStatement	if ( print_errors )		3461915	0					
ANR	3461973	Condition	print_errors	114:15:3209:3220	3461915	0	True				
ANR	3461974	Identifier	print_errors		3461915	0					
ANR	3461975	ExpressionStatement	"printerr ( 1 , ""unexpected end of line in string constant\\n"" )"	115:1:3224:3283	3461915	1	True				
ANR	3461976	CallExpression	"printerr ( 1 , ""unexpected end of line in string constant\\n"" )"		3461915	0					
ANR	3461977	Callee	printerr		3461915	0					
ANR	3461978	Identifier	printerr		3461915	0					
ANR	3461979	ArgumentList	1		3461915	1					
ANR	3461980	Argument	1		3461915	0					
ANR	3461981	PrimaryExpression	1		3461915	0					
ANR	3461982	Argument	"""unexpected end of line in string constant\\n"""		3461915	1					
ANR	3461983	PrimaryExpression	"""unexpected end of line in string constant\\n"""		3461915	0					
ANR	3461984	ReturnStatement	return 0 ;	116:6:3291:3299	3461915	1	True				
ANR	3461985	PrimaryExpression	0		3461915	0					
ANR	3461986	IfStatement	if ( i == '\\\\' )		3461915	4					
ANR	3461987	Condition	i == '\\\\'	118:6:3313:3321	3461915	0	True				
ANR	3461988	EqualityExpression	i == '\\\\'		3461915	0		==			
ANR	3461989	Identifier	i		3461915	0					
ANR	3461990	PrimaryExpression	'\\\\'		3461915	1					
ANR	3461991	CompoundStatement		17:4:340:340	3461915	1					
ANR	3461992	ExpressionStatement	( * p ) ++	120:6:3336:3342	3461915	0	True				
ANR	3461993	PostIncDecOperationExpression	( * p ) ++		3461915	0					
ANR	3461994	UnaryOperationExpression	* p		3461915	0					
ANR	3461995	UnaryOperator	*		3461915	0					
ANR	3461996	Identifier	p		3461915	1					
ANR	3461997	IncDec	++		3461915	1					
ANR	3461998	IfStatement	if ( * * p >= '0' && * * p <= '7' )		3461915	1					
ANR	3461999	Condition	* * p >= '0' && * * p <= '7'	121:10:3354:3377	3461915	0	True				
ANR	3462000	AndExpression	* * p >= '0' && * * p <= '7'		3461915	0		&&			
ANR	3462001	RelationalExpression	* * p >= '0'		3461915	0		>=			
ANR	3462002	UnaryOperationExpression	* * p		3461915	0					
ANR	3462003	UnaryOperator	*		3461915	0					
ANR	3462004	UnaryOperationExpression	* p		3461915	1					
ANR	3462005	UnaryOperator	*		3461915	0					
ANR	3462006	Identifier	p		3461915	1					
ANR	3462007	PrimaryExpression	'0'		3461915	1					
ANR	3462008	RelationalExpression	* * p <= '7'		3461915	1		<=			
ANR	3462009	UnaryOperationExpression	* * p		3461915	0					
ANR	3462010	UnaryOperator	*		3461915	0					
ANR	3462011	UnaryOperationExpression	* p		3461915	1					
ANR	3462012	UnaryOperator	*		3461915	0					
ANR	3462013	Identifier	p		3461915	1					
ANR	3462014	PrimaryExpression	'7'		3461915	1					
ANR	3462015	CompoundStatement		21:3:398:415	3461915	1					
ANR	3462016	IdentifierDeclStatement	"int b , num_digits ;"	123:3:3386:3403	3461915	0	True				
ANR	3462017	IdentifierDecl	b		3461915	0					
ANR	3462018	IdentifierDeclType	int		3461915	0					
ANR	3462019	Identifier	b		3461915	1					
ANR	3462020	IdentifierDecl	num_digits		3461915	1					
ANR	3462021	IdentifierDeclType	int		3461915	0					
ANR	3462022	Identifier	num_digits		3461915	1					
ANR	3462023	ExpressionStatement	i = 0	124:3:3408:3413	3461915	1	True				
ANR	3462024	AssignmentExpression	i = 0		3461915	0		=			
ANR	3462025	Identifier	i		3461915	0					
ANR	3462026	PrimaryExpression	0		3461915	1					
ANR	3462027	IfStatement	if ( ( * p ) [ 1 ] >= '0' && ( * p ) [ 1 ] <= '7' )		3461915	2					
ANR	3462028	Condition	( * p ) [ 1 ] >= '0' && ( * p ) [ 1 ] <= '7'	125:7:3422:3453	3461915	0	True				
ANR	3462029	AndExpression	( * p ) [ 1 ] >= '0' && ( * p ) [ 1 ] <= '7'		3461915	0		&&			
ANR	3462030	RelationalExpression	( * p ) [ 1 ] >= '0'		3461915	0		>=			
ANR	3462031	ArrayIndexing	( * p ) [ 1 ]		3461915	0					
ANR	3462032	UnaryOperationExpression	* p		3461915	0					
ANR	3462033	UnaryOperator	*		3461915	0					
ANR	3462034	Identifier	p		3461915	1					
ANR	3462035	PrimaryExpression	1		3461915	1					
ANR	3462036	PrimaryExpression	'0'		3461915	1					
ANR	3462037	RelationalExpression	( * p ) [ 1 ] <= '7'		3461915	1		<=			
ANR	3462038	ArrayIndexing	( * p ) [ 1 ]		3461915	0					
ANR	3462039	UnaryOperationExpression	* p		3461915	0					
ANR	3462040	UnaryOperator	*		3461915	0					
ANR	3462041	Identifier	p		3461915	1					
ANR	3462042	PrimaryExpression	1		3461915	1					
ANR	3462043	PrimaryExpression	'7'		3461915	1					
ANR	3462044	CompoundStatement		24:5:473:473	3461915	1					
ANR	3462045	IfStatement	if ( * * p <= '3' && ( * p ) [ 2 ] >= '0' && ( * p ) [ 2 ] <= '7' )		3461915	0					
ANR	3462046	Condition	* * p <= '3' && ( * p ) [ 2 ] >= '0' && ( * p ) [ 2 ] <= '7'	127:11:3474:3519	3461915	0	True				
ANR	3462047	AndExpression	* * p <= '3' && ( * p ) [ 2 ] >= '0' && ( * p ) [ 2 ] <= '7'		3461915	0		&&			
ANR	3462048	RelationalExpression	* * p <= '3'		3461915	0		<=			
ANR	3462049	UnaryOperationExpression	* * p		3461915	0					
ANR	3462050	UnaryOperator	*		3461915	0					
ANR	3462051	UnaryOperationExpression	* p		3461915	1					
ANR	3462052	UnaryOperator	*		3461915	0					
ANR	3462053	Identifier	p		3461915	1					
ANR	3462054	PrimaryExpression	'3'		3461915	1					
ANR	3462055	AndExpression	( * p ) [ 2 ] >= '0' && ( * p ) [ 2 ] <= '7'		3461915	1		&&			
ANR	3462056	RelationalExpression	( * p ) [ 2 ] >= '0'		3461915	0		>=			
ANR	3462057	ArrayIndexing	( * p ) [ 2 ]		3461915	0					
ANR	3462058	UnaryOperationExpression	* p		3461915	0					
ANR	3462059	UnaryOperator	*		3461915	0					
ANR	3462060	Identifier	p		3461915	1					
ANR	3462061	PrimaryExpression	2		3461915	1					
ANR	3462062	PrimaryExpression	'0'		3461915	1					
ANR	3462063	RelationalExpression	( * p ) [ 2 ] <= '7'		3461915	1		<=			
ANR	3462064	ArrayIndexing	( * p ) [ 2 ]		3461915	0					
ANR	3462065	UnaryOperationExpression	* p		3461915	0					
ANR	3462066	UnaryOperator	*		3461915	0					
ANR	3462067	Identifier	p		3461915	1					
ANR	3462068	PrimaryExpression	2		3461915	1					
ANR	3462069	PrimaryExpression	'7'		3461915	1					
ANR	3462070	ExpressionStatement	num_digits = 3	128:2:3524:3538	3461915	1	True				
ANR	3462071	AssignmentExpression	num_digits = 3		3461915	0		=			
ANR	3462072	Identifier	num_digits		3461915	0					
ANR	3462073	PrimaryExpression	3		3461915	1					
ANR	3462074	ElseStatement	else		3461915	0					
ANR	3462075	ExpressionStatement	num_digits = 2	130:2:3554:3568	3461915	0	True				
ANR	3462076	AssignmentExpression	num_digits = 2		3461915	0		=			
ANR	3462077	Identifier	num_digits		3461915	0					
ANR	3462078	PrimaryExpression	2		3461915	1					
ANR	3462079	ElseStatement	else		3461915	0					
ANR	3462080	ExpressionStatement	num_digits = 1	133:5:3590:3604	3461915	0	True				
ANR	3462081	AssignmentExpression	num_digits = 1		3461915	0		=			
ANR	3462082	Identifier	num_digits		3461915	0					
ANR	3462083	PrimaryExpression	1		3461915	1					
ANR	3462084	ForStatement	for ( b = 0 ; b < num_digits ; ++ b )		3461915	3					
ANR	3462085	ForInit	b = 0 ;	134:8:3614:3619	3461915	0	True				
ANR	3462086	AssignmentExpression	b = 0		3461915	0		=			
ANR	3462087	Identifier	b		3461915	0					
ANR	3462088	PrimaryExpression	0		3461915	1					
ANR	3462089	Condition	b < num_digits	134:15:3621:3634	3461915	1	True				
ANR	3462090	RelationalExpression	b < num_digits		3461915	0		<			
ANR	3462091	Identifier	b		3461915	0					
ANR	3462092	Identifier	num_digits		3461915	1					
ANR	3462093	UnaryExpression	++ b	134:31:3637:3639	3461915	2	True				
ANR	3462094	IncDec	++		3461915	0					
ANR	3462095	Identifier	b		3461915	1					
ANR	3462096	CompoundStatement		34:7:668:708	3461915	3					
ANR	3462097	IdentifierDeclStatement	int bit = ( * p ) [ num_digits - 1 - b ] - '0' ;	136:7:3656:3696	3461915	0	True				
ANR	3462098	IdentifierDecl	bit = ( * p ) [ num_digits - 1 - b ] - '0'		3461915	0					
ANR	3462099	IdentifierDeclType	int		3461915	0					
ANR	3462100	Identifier	bit		3461915	1					
ANR	3462101	AssignmentExpression	bit = ( * p ) [ num_digits - 1 - b ] - '0'		3461915	2		=			
ANR	3462102	Identifier	bit		3461915	0					
ANR	3462103	AdditiveExpression	( * p ) [ num_digits - 1 - b ] - '0'		3461915	1		-			
ANR	3462104	ArrayIndexing	( * p ) [ num_digits - 1 - b ]		3461915	0					
ANR	3462105	UnaryOperationExpression	* p		3461915	0					
ANR	3462106	UnaryOperator	*		3461915	0					
ANR	3462107	Identifier	p		3461915	1					
ANR	3462108	AdditiveExpression	num_digits - 1 - b		3461915	1		-			
ANR	3462109	Identifier	num_digits		3461915	0					
ANR	3462110	AdditiveExpression	1 - b		3461915	1		-			
ANR	3462111	PrimaryExpression	1		3461915	0					
ANR	3462112	Identifier	b		3461915	1					
ANR	3462113	PrimaryExpression	'0'		3461915	1					
ANR	3462114	ExpressionStatement	i += ( 1 << ( b * 3 ) ) * bit	137:7:3705:3730	3461915	1	True				
ANR	3462115	AssignmentExpression	i += ( 1 << ( b * 3 ) ) * bit		3461915	0		+=			
ANR	3462116	Identifier	i		3461915	0					
ANR	3462117	MultiplicativeExpression	( 1 << ( b * 3 ) ) * bit		3461915	1		*			
ANR	3462118	ShiftExpression	1 << ( b * 3 )		3461915	0		<<			
ANR	3462119	PrimaryExpression	1		3461915	0					
ANR	3462120	MultiplicativeExpression	b * 3		3461915	1		*			
ANR	3462121	Identifier	b		3461915	0					
ANR	3462122	PrimaryExpression	3		3461915	1					
ANR	3462123	Identifier	bit		3461915	1					
ANR	3462124	ExpressionStatement	* p += num_digits	139:3:3742:3758	3461915	4	True				
ANR	3462125	AssignmentExpression	* p += num_digits		3461915	0		+=			
ANR	3462126	UnaryOperationExpression	* p		3461915	0					
ANR	3462127	UnaryOperator	*		3461915	0					
ANR	3462128	Identifier	p		3461915	1					
ANR	3462129	Identifier	num_digits		3461915	1					
ANR	3462130	ElseStatement	else		3461915	0					
ANR	3462131	CompoundStatement		40:1:787:787	3461915	0					
ANR	3462132	SwitchStatement	switch ( * * p )		3461915	0					
ANR	3462133	Condition	* * p	143:11:3788:3790	3461915	0	True				
ANR	3462134	UnaryOperationExpression	* * p		3461915	0					
ANR	3462135	UnaryOperator	*		3461915	0					
ANR	3462136	UnaryOperationExpression	* p		3461915	1					
ANR	3462137	UnaryOperator	*		3461915	0					
ANR	3462138	Identifier	p		3461915	1					
ANR	3462139	CompoundStatement		42:5:810:810	3461915	1					
ANR	3462140	Label	case 'n' :	145:5:3805:3813	3461915	0	True				
ANR	3462141	ExpressionStatement	i = 10	146:7:3822:3828	3461915	1	True				
ANR	3462142	AssignmentExpression	i = 10		3461915	0		=			
ANR	3462143	Identifier	i		3461915	0					
ANR	3462144	PrimaryExpression	10		3461915	1					
ANR	3462145	BreakStatement	break ;	147:7:3837:3842	3461915	2	True				
ANR	3462146	Label	case 'r' :	148:5:3849:3857	3461915	3	True				
ANR	3462147	ExpressionStatement	i = 13	149:7:3866:3872	3461915	4	True				
ANR	3462148	AssignmentExpression	i = 13		3461915	0		=			
ANR	3462149	Identifier	i		3461915	0					
ANR	3462150	PrimaryExpression	13		3461915	1					
ANR	3462151	BreakStatement	break ;	150:7:3881:3886	3461915	5	True				
ANR	3462152	Label	case 't' :	151:5:3893:3901	3461915	6	True				
ANR	3462153	ExpressionStatement	i = 9	152:7:3910:3915	3461915	7	True				
ANR	3462154	AssignmentExpression	i = 9		3461915	0		=			
ANR	3462155	Identifier	i		3461915	0					
ANR	3462156	PrimaryExpression	9		3461915	1					
ANR	3462157	BreakStatement	break ;	153:7:3924:3929	3461915	8	True				
ANR	3462158	Label	case 'a' :	154:5:3936:3944	3461915	9	True				
ANR	3462159	ExpressionStatement	i = 7	155:7:3953:3958	3461915	10	True				
ANR	3462160	AssignmentExpression	i = 7		3461915	0		=			
ANR	3462161	Identifier	i		3461915	0					
ANR	3462162	PrimaryExpression	7		3461915	1					
ANR	3462163	BreakStatement	break ;	156:7:3967:3972	3461915	11	True				
ANR	3462164	Label	case '\\'' :	157:5:3979:3988	3461915	12	True				
ANR	3462165	IfStatement	if ( valid )		3461915	13					
ANR	3462166	Condition	valid	158:11:4001:4005	3461915	0	True				
ANR	3462167	Identifier	valid		3461915	0					
ANR	3462168	ExpressionStatement	* valid = 0	159:2:4010:4020	3461915	1	True				
ANR	3462169	AssignmentExpression	* valid = 0		3461915	0		=			
ANR	3462170	UnaryOperationExpression	* valid		3461915	0					
ANR	3462171	UnaryOperator	*		3461915	0					
ANR	3462172	Identifier	valid		3461915	1					
ANR	3462173	PrimaryExpression	0		3461915	1					
ANR	3462174	ElseStatement	else		3461915	0					
ANR	3462175	IfStatement	if ( print_errors )		3461915	0					
ANR	3462176	Condition	print_errors	160:16:4038:4049	3461915	0	True				
ANR	3462177	Identifier	print_errors		3461915	0					
ANR	3462178	ExpressionStatement	"printerr ( 1 , ""empty literal character\\n"" )"	161:2:4054:4095	3461915	1	True				
ANR	3462179	CallExpression	"printerr ( 1 , ""empty literal character\\n"" )"		3461915	0					
ANR	3462180	Callee	printerr		3461915	0					
ANR	3462181	Identifier	printerr		3461915	0					
ANR	3462182	ArgumentList	1		3461915	1					
ANR	3462183	Argument	1		3461915	0					
ANR	3462184	PrimaryExpression	1		3461915	0					
ANR	3462185	Argument	"""empty literal character\\n"""		3461915	1					
ANR	3462186	PrimaryExpression	"""empty literal character\\n"""		3461915	0					
ANR	3462187	ReturnStatement	return 0 ;	162:7:4104:4112	3461915	14	True				
ANR	3462188	PrimaryExpression	0		3461915	0					
ANR	3462189	Label	case 0 :	163:5:4119:4125	3461915	15	True				
ANR	3462190	IfStatement	if ( valid )		3461915	16					
ANR	3462191	Condition	valid	164:11:4138:4142	3461915	0	True				
ANR	3462192	Identifier	valid		3461915	0					
ANR	3462193	ExpressionStatement	* valid = 0	165:2:4147:4157	3461915	1	True				
ANR	3462194	AssignmentExpression	* valid = 0		3461915	0		=			
ANR	3462195	UnaryOperationExpression	* valid		3461915	0					
ANR	3462196	UnaryOperator	*		3461915	0					
ANR	3462197	Identifier	valid		3461915	1					
ANR	3462198	PrimaryExpression	0		3461915	1					
ANR	3462199	ElseStatement	else		3461915	0					
ANR	3462200	IfStatement	if ( print_errors )		3461915	0					
ANR	3462201	Condition	print_errors	166:16:4175:4186	3461915	0	True				
ANR	3462202	Identifier	print_errors		3461915	0					
ANR	3462203	Statement	printerr	167:2:4191:4198	3461915	1	True				
ANR	3462204	Statement	(	167:11:4200:4200	3461915	17	True				
ANR	3462205	Statement	1	167:12:4201:4201	3461915	18	True				
ANR	3462206	Statement	","	167:13:4202:4202	3461915	19	True				
ANR	3462207	Statement	"""unexpected end of line after """	167:15:4204:4234	3461915	20	True				
ANR	3462208	Statement	"""backslash in string constant\\n"""	168:5:4241:4272	3461915	21	True				
ANR	3462209	Statement	)	168:37:4273:4273	3461915	22	True				
ANR	3462210	ExpressionStatement		168:38:4274:4274	3461915	23	True				
ANR	3462211	ReturnStatement	return 0 ;	169:7:4283:4291	3461915	24	True				
ANR	3462212	PrimaryExpression	0		3461915	0					
ANR	3462213	Label	default :	170:5:4298:4305	3461915	25	True				
ANR	3462214	Identifier	default		3461915	0					
ANR	3462215	ExpressionStatement	i = * * p	171:7:4314:4321	3461915	26	True				
ANR	3462216	AssignmentExpression	i = * * p		3461915	0		=			
ANR	3462217	Identifier	i		3461915	0					
ANR	3462218	UnaryOperationExpression	* * p		3461915	1					
ANR	3462219	UnaryOperator	*		3461915	0					
ANR	3462220	UnaryOperationExpression	* p		3461915	1					
ANR	3462221	UnaryOperator	*		3461915	0					
ANR	3462222	Identifier	p		3461915	1					
ANR	3462223	ExpressionStatement	( * p ) ++	173:3:4333:4339	3461915	1	True				
ANR	3462224	PostIncDecOperationExpression	( * p ) ++		3461915	0					
ANR	3462225	UnaryOperationExpression	* p		3461915	0					
ANR	3462226	UnaryOperator	*		3461915	0					
ANR	3462227	Identifier	p		3461915	1					
ANR	3462228	IncDec	++		3461915	1					
ANR	3462229	ElseStatement	else		3461915	0					
ANR	3462230	ExpressionStatement	( * p ) ++	177:4:4361:4367	3461915	0	True				
ANR	3462231	PostIncDecOperationExpression	( * p ) ++		3461915	0					
ANR	3462232	UnaryOperationExpression	* p		3461915	0					
ANR	3462233	UnaryOperator	*		3461915	0					
ANR	3462234	Identifier	p		3461915	1					
ANR	3462235	IncDec	++		3461915	1					
ANR	3462236	IfStatement	if ( verbose >= 7 )		3461915	5					
ANR	3462237	Condition	verbose >= 7	178:6:4375:4386	3461915	0	True				
ANR	3462238	RelationalExpression	verbose >= 7		3461915	0		>=			
ANR	3462239	Identifier	verbose		3461915	0					
ANR	3462240	PrimaryExpression	7		3461915	1					
ANR	3462241	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_character returned %d (%c).\\n"" , stack [ sp ] . line , addr , i , i )"	179:4:4393:4493	3461915	1	True				
ANR	3462242	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_character returned %d (%c).\\n"" , stack [ sp ] . line , addr , i , i )"		3461915	0					
ANR	3462243	Callee	fprintf		3461915	0					
ANR	3462244	Identifier	fprintf		3461915	0					
ANR	3462245	ArgumentList	stderr		3461915	1					
ANR	3462246	Argument	stderr		3461915	0					
ANR	3462247	Identifier	stderr		3461915	0					
ANR	3462248	Argument	"""%5d (0x%04x): rd_character returned %d (%c).\\n"""		3461915	1					
ANR	3462249	PrimaryExpression	"""%5d (0x%04x): rd_character returned %d (%c).\\n"""		3461915	0					
ANR	3462250	Argument	stack [ sp ] . line		3461915	2					
ANR	3462251	MemberAccess	stack [ sp ] . line		3461915	0					
ANR	3462252	ArrayIndexing	stack [ sp ]		3461915	0					
ANR	3462253	Identifier	stack		3461915	0					
ANR	3462254	Identifier	sp		3461915	1					
ANR	3462255	Identifier	line		3461915	1					
ANR	3462256	Argument	addr		3461915	3					
ANR	3462257	Identifier	addr		3461915	0					
ANR	3462258	Argument	i		3461915	4					
ANR	3462259	Identifier	i		3461915	0					
ANR	3462260	Argument	i		3461915	5					
ANR	3462261	Identifier	i		3461915	0					
ANR	3462262	ReturnStatement	return i ;	181:2:4497:4505	3461915	6	True				
ANR	3462263	Identifier	i		3461915	0					
ANR	3462264	ReturnType	static int		3461915	1					
ANR	3462265	Identifier	rd_character		3461915	2					
ANR	3462266	ParameterList	"const char * * p , int * valid , int print_errors"		3461915	3					
ANR	3462267	Parameter	const char * * p	102:14:2941:2954	3461915	0	True				
ANR	3462268	ParameterType	const char * *		3461915	0					
ANR	3462269	Identifier	p		3461915	1					
ANR	3462270	Parameter	int * valid	102:30:2957:2966	3461915	1	True				
ANR	3462271	ParameterType	int *		3461915	0					
ANR	3462272	Identifier	valid		3461915	1					
ANR	3462273	Parameter	int print_errors	102:42:2969:2984	3461915	2	True				
ANR	3462274	ParameterType	int		3461915	0					
ANR	3462275	Identifier	print_errors		3461915	1					
ANR	3462276	CFGEntryNode	ENTRY		3461915		True				
ANR	3462277	CFGExitNode	EXIT		3461915		True				
ANR	3462278	Symbol	* sp		3461915						
ANR	3462279	Symbol	stack		3461915						
ANR	3462280	Symbol	b		3461915						
ANR	3462281	Symbol	* num_digits		3461915						
ANR	3462282	Symbol	i		3461915						
ANR	3462283	Symbol	* valid		3461915						
ANR	3462284	Symbol	stderr		3461915						
ANR	3462285	Symbol	bit		3461915						
ANR	3462286	Symbol	* b		3461915						
ANR	3462287	Symbol	verbose		3461915						
ANR	3462288	Symbol	p		3461915						
ANR	3462289	Symbol	valid		3461915						
ANR	3462290	Symbol	print_errors		3461915						
ANR	3462291	Symbol	* stack		3461915						
ANR	3462292	Symbol	stack [ sp ] . line		3461915						
ANR	3462293	Symbol	* p		3461915						
ANR	3462294	Symbol	* * p		3461915						
ANR	3462295	Symbol	addr		3461915						
ANR	3462296	Symbol	sp		3461915						
ANR	3462297	Symbol	num_digits		3461915						
ANR	3462298	Function	check_label	184:0:4510:5745							
ANR	3462299	FunctionDef	"check_label (struct label * labels , const char * * p , struct label * * ret , struct label * * previous , int force_skip)"		3462298	0					
ANR	3462300	CompoundStatement		187:0:4639:5745	3462298	0					
ANR	3462301	IdentifierDeclStatement	struct label * l ;	188:2:4643:4658	3462298	0	True				
ANR	3462302	IdentifierDecl	* l		3462298	0					
ANR	3462303	IdentifierDeclType	struct label *		3462298	0					
ANR	3462304	Identifier	l		3462298	1					
ANR	3462305	IdentifierDeclStatement	const char * c ;	189:2:4662:4675	3462298	1	True				
ANR	3462306	IdentifierDecl	* c		3462298	0					
ANR	3462307	IdentifierDeclType	const char *		3462298	0					
ANR	3462308	Identifier	c		3462298	1					
ANR	3462309	IdentifierDeclStatement	unsigned s2 ;	190:2:4679:4690	3462298	2	True				
ANR	3462310	IdentifierDecl	s2		3462298	0					
ANR	3462311	IdentifierDeclType	unsigned		3462298	0					
ANR	3462312	Identifier	s2		3462298	1					
ANR	3462313	ExpressionStatement	* p = delspc ( * p )	191:2:4694:4710	3462298	3	True				
ANR	3462314	AssignmentExpression	* p = delspc ( * p )		3462298	0		=			
ANR	3462315	UnaryOperationExpression	* p		3462298	0					
ANR	3462316	UnaryOperator	*		3462298	0					
ANR	3462317	Identifier	p		3462298	1					
ANR	3462318	CallExpression	delspc ( * p )		3462298	1					
ANR	3462319	Callee	delspc		3462298	0					
ANR	3462320	Identifier	delspc		3462298	0					
ANR	3462321	ArgumentList	* p		3462298	1					
ANR	3462322	Argument	* p		3462298	0					
ANR	3462323	UnaryOperationExpression	* p		3462298	0					
ANR	3462324	UnaryOperator	*		3462298	0					
ANR	3462325	Identifier	p		3462298	1					
ANR	3462326	ForStatement	for ( c = * p ; isalnum ( ( const unsigned char ) * c ) || * c == '_' || * c == '.' ; ++ c )		3462298	4					
ANR	3462327	ForInit	c = * p ;	192:7:4719:4725	3462298	0	True				
ANR	3462328	AssignmentExpression	c = * p		3462298	0		=			
ANR	3462329	Identifier	c		3462298	0					
ANR	3462330	UnaryOperationExpression	* p		3462298	1					
ANR	3462331	UnaryOperator	*		3462298	0					
ANR	3462332	Identifier	p		3462298	1					
ANR	3462333	Condition	isalnum ( ( const unsigned char ) * c ) || * c == '_' || * c == '.'	192:15:4727:4785	3462298	1	True				
ANR	3462334	OrExpression	isalnum ( ( const unsigned char ) * c ) || * c == '_' || * c == '.'		3462298	0		||			
ANR	3462335	CallExpression	isalnum ( ( const unsigned char ) * c )		3462298	0					
ANR	3462336	Callee	isalnum		3462298	0					
ANR	3462337	Identifier	isalnum		3462298	0					
ANR	3462338	ArgumentList	( const unsigned char ) * c		3462298	1					
ANR	3462339	Argument	( const unsigned char ) * c		3462298	0					
ANR	3462340	CastExpression	( const unsigned char ) * c		3462298	0					
ANR	3462341	CastTarget	const unsigned char		3462298	0					
ANR	3462342	UnaryOperationExpression	* c		3462298	1					
ANR	3462343	UnaryOperator	*		3462298	0					
ANR	3462344	Identifier	c		3462298	1					
ANR	3462345	OrExpression	* c == '_' || * c == '.'		3462298	1		||			
ANR	3462346	EqualityExpression	* c == '_'		3462298	0		==			
ANR	3462347	UnaryOperationExpression	* c		3462298	0					
ANR	3462348	UnaryOperator	*		3462298	0					
ANR	3462349	Identifier	c		3462298	1					
ANR	3462350	PrimaryExpression	'_'		3462298	1					
ANR	3462351	EqualityExpression	* c == '.'		3462298	1		==			
ANR	3462352	UnaryOperationExpression	* c		3462298	0					
ANR	3462353	UnaryOperator	*		3462298	0					
ANR	3462354	Identifier	c		3462298	1					
ANR	3462355	PrimaryExpression	'.'		3462298	1					
ANR	3462356	UnaryExpression	++ c	192:76:4788:4790	3462298	2	True				
ANR	3462357	IncDec	++		3462298	0					
ANR	3462358	Identifier	c		3462298	1					
ANR	3462359	CompoundStatement		7:4:157:157	3462298	3					
ANR	3462360	ExpressionStatement	s2 = c - * p	195:2:4807:4818	3462298	5	True				
ANR	3462361	AssignmentExpression	s2 = c - * p		3462298	0		=			
ANR	3462362	Identifier	s2		3462298	0					
ANR	3462363	AdditiveExpression	c - * p		3462298	1		-			
ANR	3462364	Identifier	c		3462298	0					
ANR	3462365	UnaryOperationExpression	* p		3462298	1					
ANR	3462366	UnaryOperator	*		3462298	0					
ANR	3462367	Identifier	p		3462298	1					
ANR	3462368	ForStatement	for ( l = labels ; l ; l = l -> next )		3462298	6					
ANR	3462369	ForInit	l = labels ;	196:7:4827:4837	3462298	0	True				
ANR	3462370	AssignmentExpression	l = labels		3462298	0		=			
ANR	3462371	Identifier	l		3462298	0					
ANR	3462372	Identifier	labels		3462298	1					
ANR	3462373	Condition	l	196:19:4839:4839	3462298	1	True				
ANR	3462374	Identifier	l		3462298	0					
ANR	3462375	AssignmentExpression	l = l -> next	196:22:4842:4852	3462298	2	True	=			
ANR	3462376	Identifier	l		3462298	0					
ANR	3462377	PtrMemberAccess	l -> next		3462298	1					
ANR	3462378	Identifier	l		3462298	0					
ANR	3462379	Identifier	next		3462298	1					
ANR	3462380	CompoundStatement		13:6:249:256	3462298	3					
ANR	3462381	IdentifierDeclStatement	"unsigned s1 , s ;"	198:6:4867:4881	3462298	0	True				
ANR	3462382	IdentifierDecl	s1		3462298	0					
ANR	3462383	IdentifierDeclType	unsigned		3462298	0					
ANR	3462384	Identifier	s1		3462298	1					
ANR	3462385	IdentifierDecl	s		3462298	1					
ANR	3462386	IdentifierDeclType	unsigned		3462298	0					
ANR	3462387	Identifier	s		3462298	1					
ANR	3462388	IdentifierDeclStatement	int cmp ;	199:6:4889:4896	3462298	1	True				
ANR	3462389	IdentifierDecl	cmp		3462298	0					
ANR	3462390	IdentifierDeclType	int		3462298	0					
ANR	3462391	Identifier	cmp		3462298	1					
ANR	3462392	ExpressionStatement	s1 = strlen ( l -> name )	200:6:4904:4925	3462298	2	True				
ANR	3462393	AssignmentExpression	s1 = strlen ( l -> name )		3462298	0		=			
ANR	3462394	Identifier	s1		3462298	0					
ANR	3462395	CallExpression	strlen ( l -> name )		3462298	1					
ANR	3462396	Callee	strlen		3462298	0					
ANR	3462397	Identifier	strlen		3462298	0					
ANR	3462398	ArgumentList	l -> name		3462298	1					
ANR	3462399	Argument	l -> name		3462298	0					
ANR	3462400	PtrMemberAccess	l -> name		3462298	0					
ANR	3462401	Identifier	l		3462298	0					
ANR	3462402	Identifier	name		3462298	1					
ANR	3462403	ExpressionStatement	s = s1 < s2 ? s1 : s2	201:6:4933:4954	3462298	3	True				
ANR	3462404	AssignmentExpression	s = s1 < s2 ? s1 : s2		3462298	0		=			
ANR	3462405	Identifier	s		3462298	0					
ANR	3462406	ConditionalExpression	s1 < s2 ? s1 : s2		3462298	1					
ANR	3462407	Condition	s1 < s2		3462298	0					
ANR	3462408	RelationalExpression	s1 < s2		3462298	0		<			
ANR	3462409	Identifier	s1		3462298	0					
ANR	3462410	Identifier	s2		3462298	1					
ANR	3462411	Identifier	s1		3462298	1					
ANR	3462412	Identifier	s2		3462298	2					
ANR	3462413	ExpressionStatement	"cmp = strncmp ( l -> name , * p , s )"	202:6:4962:4992	3462298	4	True				
ANR	3462414	AssignmentExpression	"cmp = strncmp ( l -> name , * p , s )"		3462298	0		=			
ANR	3462415	Identifier	cmp		3462298	0					
ANR	3462416	CallExpression	"strncmp ( l -> name , * p , s )"		3462298	1					
ANR	3462417	Callee	strncmp		3462298	0					
ANR	3462418	Identifier	strncmp		3462298	0					
ANR	3462419	ArgumentList	l -> name		3462298	1					
ANR	3462420	Argument	l -> name		3462298	0					
ANR	3462421	PtrMemberAccess	l -> name		3462298	0					
ANR	3462422	Identifier	l		3462298	0					
ANR	3462423	Identifier	name		3462298	1					
ANR	3462424	Argument	* p		3462298	1					
ANR	3462425	UnaryOperationExpression	* p		3462298	0					
ANR	3462426	UnaryOperator	*		3462298	0					
ANR	3462427	Identifier	p		3462298	1					
ANR	3462428	Argument	s		3462298	2					
ANR	3462429	Identifier	s		3462298	0					
ANR	3462430	IfStatement	if ( cmp > 0 || ( cmp == 0 && s1 > s ) )		3462298	5					
ANR	3462431	Condition	cmp > 0 || ( cmp == 0 && s1 > s )	203:10:5004:5034	3462298	0	True				
ANR	3462432	OrExpression	cmp > 0 || ( cmp == 0 && s1 > s )		3462298	0		||			
ANR	3462433	RelationalExpression	cmp > 0		3462298	0		>			
ANR	3462434	Identifier	cmp		3462298	0					
ANR	3462435	PrimaryExpression	0		3462298	1					
ANR	3462436	AndExpression	cmp == 0 && s1 > s		3462298	1		&&			
ANR	3462437	EqualityExpression	cmp == 0		3462298	0		==			
ANR	3462438	Identifier	cmp		3462298	0					
ANR	3462439	PrimaryExpression	0		3462298	1					
ANR	3462440	RelationalExpression	s1 > s		3462298	1		>			
ANR	3462441	Identifier	s1		3462298	0					
ANR	3462442	Identifier	s		3462298	1					
ANR	3462443	CompoundStatement		18:1:398:398	3462298	1					
ANR	3462444	IfStatement	if ( force_skip )		3462298	0					
ANR	3462445	Condition	force_skip	205:7:5047:5056	3462298	0	True				
ANR	3462446	Identifier	force_skip		3462298	0					
ANR	3462447	ExpressionStatement	* p = c	206:5:5064:5070	3462298	1	True				
ANR	3462448	AssignmentExpression	* p = c		3462298	0		=			
ANR	3462449	UnaryOperationExpression	* p		3462298	0					
ANR	3462450	UnaryOperator	*		3462298	0					
ANR	3462451	Identifier	p		3462298	1					
ANR	3462452	Identifier	c		3462298	1					
ANR	3462453	ReturnStatement	return 0 ;	207:3:5075:5083	3462298	1	True				
ANR	3462454	PrimaryExpression	0		3462298	0					
ANR	3462455	IfStatement	if ( cmp < 0 || s2 > s )		3462298	6					
ANR	3462456	Condition	cmp < 0 || s2 > s	209:10:5098:5114	3462298	0	True				
ANR	3462457	OrExpression	cmp < 0 || s2 > s		3462298	0		||			
ANR	3462458	RelationalExpression	cmp < 0		3462298	0		<			
ANR	3462459	Identifier	cmp		3462298	0					
ANR	3462460	PrimaryExpression	0		3462298	1					
ANR	3462461	RelationalExpression	s2 > s		3462298	1		>			
ANR	3462462	Identifier	s2		3462298	0					
ANR	3462463	Identifier	s		3462298	1					
ANR	3462464	CompoundStatement		24:1:478:478	3462298	1					
ANR	3462465	IfStatement	if ( previous )		3462298	0					
ANR	3462466	Condition	previous	211:7:5127:5134	3462298	0	True				
ANR	3462467	Identifier	previous		3462298	0					
ANR	3462468	ExpressionStatement	* previous = l	212:5:5142:5155	3462298	1	True				
ANR	3462469	AssignmentExpression	* previous = l		3462298	0		=			
ANR	3462470	UnaryOperationExpression	* previous		3462298	0					
ANR	3462471	UnaryOperator	*		3462298	0					
ANR	3462472	Identifier	previous		3462298	1					
ANR	3462473	Identifier	l		3462298	1					
ANR	3462474	ContinueStatement	continue ;	213:3:5160:5168	3462298	1	True				
ANR	3462475	ExpressionStatement	* p = c	215:6:5179:5185	3462298	7	True				
ANR	3462476	AssignmentExpression	* p = c		3462298	0		=			
ANR	3462477	UnaryOperationExpression	* p		3462298	0					
ANR	3462478	UnaryOperator	*		3462298	0					
ANR	3462479	Identifier	p		3462298	1					
ANR	3462480	Identifier	c		3462298	1					
ANR	3462481	IfStatement	if ( l -> ref )		3462298	8					
ANR	3462482	Condition	l -> ref	217:10:5243:5248	3462298	0	True				
ANR	3462483	PtrMemberAccess	l -> ref		3462298	0					
ANR	3462484	Identifier	l		3462298	0					
ANR	3462485	Identifier	ref		3462298	1					
ANR	3462486	CompoundStatement		32:1:612:612	3462298	1					
ANR	3462487	ExpressionStatement	"compute_ref ( l -> ref , 1 )"	219:3:5257:5280	3462298	0	True				
ANR	3462488	CallExpression	"compute_ref ( l -> ref , 1 )"		3462298	0					
ANR	3462489	Callee	compute_ref		3462298	0					
ANR	3462490	Identifier	compute_ref		3462298	0					
ANR	3462491	ArgumentList	l -> ref		3462298	1					
ANR	3462492	Argument	l -> ref		3462298	0					
ANR	3462493	PtrMemberAccess	l -> ref		3462298	0					
ANR	3462494	Identifier	l		3462298	0					
ANR	3462495	Identifier	ref		3462298	1					
ANR	3462496	Argument	1		3462298	1					
ANR	3462497	PrimaryExpression	1		3462298	0					
ANR	3462498	IfStatement	if ( ! l -> ref -> done )		3462298	1					
ANR	3462499	Condition	! l -> ref -> done	220:7:5289:5301	3462298	0	True				
ANR	3462500	UnaryOperationExpression	! l -> ref -> done		3462298	0					
ANR	3462501	UnaryOperator	!		3462298	0					
ANR	3462502	PtrMemberAccess	l -> ref -> done		3462298	1					
ANR	3462503	PtrMemberAccess	l -> ref		3462298	0					
ANR	3462504	Identifier	l		3462298	0					
ANR	3462505	Identifier	ref		3462298	1					
ANR	3462506	Identifier	done		3462298	1					
ANR	3462507	CompoundStatement		35:5:669:669	3462298	1					
ANR	3462508	IfStatement	if ( verbose >= 6 )		3462298	0					
ANR	3462509	Condition	verbose >= 6	225:11:5501:5512	3462298	0	True				
ANR	3462510	RelationalExpression	verbose >= 6		3462298	0		>=			
ANR	3462511	Identifier	verbose		3462298	0					
ANR	3462512	PrimaryExpression	6		3462298	1					
ANR	3462513	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): returning invalid label %s.\\n"" , stack [ sp ] . line , addr , l -> name )"	226:2:5517:5619	3462298	1	True				
ANR	3462514	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): returning invalid label %s.\\n"" , stack [ sp ] . line , addr , l -> name )"		3462298	0					
ANR	3462515	Callee	fprintf		3462298	0					
ANR	3462516	Identifier	fprintf		3462298	0					
ANR	3462517	ArgumentList	stderr		3462298	1					
ANR	3462518	Argument	stderr		3462298	0					
ANR	3462519	Identifier	stderr		3462298	0					
ANR	3462520	Argument	"""%5d (0x%04x): returning invalid label %s.\\n"""		3462298	1					
ANR	3462521	PrimaryExpression	"""%5d (0x%04x): returning invalid label %s.\\n"""		3462298	0					
ANR	3462522	Argument	stack [ sp ] . line		3462298	2					
ANR	3462523	MemberAccess	stack [ sp ] . line		3462298	0					
ANR	3462524	ArrayIndexing	stack [ sp ]		3462298	0					
ANR	3462525	Identifier	stack		3462298	0					
ANR	3462526	Identifier	sp		3462298	1					
ANR	3462527	Identifier	line		3462298	1					
ANR	3462528	Argument	addr		3462298	3					
ANR	3462529	Identifier	addr		3462298	0					
ANR	3462530	Argument	l -> name		3462298	4					
ANR	3462531	PtrMemberAccess	l -> name		3462298	0					
ANR	3462532	Identifier	l		3462298	0					
ANR	3462533	Identifier	name		3462298	1					
ANR	3462534	ExpressionStatement	* ret = l	229:7:5628:5636	3462298	1	True				
ANR	3462535	AssignmentExpression	* ret = l		3462298	0		=			
ANR	3462536	UnaryOperationExpression	* ret		3462298	0					
ANR	3462537	UnaryOperator	*		3462298	0					
ANR	3462538	Identifier	ret		3462298	1					
ANR	3462539	Identifier	l		3462298	1					
ANR	3462540	ReturnStatement	return 0 ;	230:7:5645:5653	3462298	2	True				
ANR	3462541	PrimaryExpression	0		3462298	0					
ANR	3462542	ExpressionStatement	* ret = l	233:6:5671:5679	3462298	9	True				
ANR	3462543	AssignmentExpression	* ret = l		3462298	0		=			
ANR	3462544	UnaryOperationExpression	* ret		3462298	0					
ANR	3462545	UnaryOperator	*		3462298	0					
ANR	3462546	Identifier	ret		3462298	1					
ANR	3462547	Identifier	l		3462298	1					
ANR	3462548	ReturnStatement	return 1 ;	234:6:5687:5695	3462298	10	True				
ANR	3462549	PrimaryExpression	1		3462298	0					
ANR	3462550	IfStatement	if ( force_skip )		3462298	7					
ANR	3462551	Condition	force_skip	236:6:5709:5718	3462298	0	True				
ANR	3462552	Identifier	force_skip		3462298	0					
ANR	3462553	ExpressionStatement	* p = c	237:4:5725:5731	3462298	1	True				
ANR	3462554	AssignmentExpression	* p = c		3462298	0		=			
ANR	3462555	UnaryOperationExpression	* p		3462298	0					
ANR	3462556	UnaryOperator	*		3462298	0					
ANR	3462557	Identifier	p		3462298	1					
ANR	3462558	Identifier	c		3462298	1					
ANR	3462559	ReturnStatement	return 0 ;	238:2:5735:5743	3462298	8	True				
ANR	3462560	PrimaryExpression	0		3462298	0					
ANR	3462561	ReturnType	static int		3462298	1					
ANR	3462562	Identifier	check_label		3462298	2					
ANR	3462563	ParameterList	"struct label * labels , const char * * p , struct label * * ret , struct label * * previous , int force_skip"		3462298	3					
ANR	3462564	Parameter	struct label * labels	185:13:4534:4553	3462298	0	True				
ANR	3462565	ParameterType	struct label *		3462298	0					
ANR	3462566	Identifier	labels		3462298	1					
ANR	3462567	Parameter	const char * * p	185:35:4556:4569	3462298	1	True				
ANR	3462568	ParameterType	const char * *		3462298	0					
ANR	3462569	Identifier	p		3462298	1					
ANR	3462570	Parameter	struct label * * ret	185:51:4572:4589	3462298	2	True				
ANR	3462571	ParameterType	struct label * *		3462298	0					
ANR	3462572	Identifier	ret		3462298	1					
ANR	3462573	Parameter	struct label * * previous	186:6:4598:4620	3462298	3	True				
ANR	3462574	ParameterType	struct label * *		3462298	0					
ANR	3462575	Identifier	previous		3462298	1					
ANR	3462576	Parameter	int force_skip	186:31:4623:4636	3462298	4	True				
ANR	3462577	ParameterType	int		3462298	0					
ANR	3462578	Identifier	force_skip		3462298	1					
ANR	3462579	CFGEntryNode	ENTRY		3462298		True				
ANR	3462580	CFGExitNode	EXIT		3462298		True				
ANR	3462581	Symbol	* sp		3462298						
ANR	3462582	Symbol	stack		3462298						
ANR	3462583	Symbol	* previous		3462298						
ANR	3462584	Symbol	cmp		3462298						
ANR	3462585	Symbol	* ret		3462298						
ANR	3462586	Symbol	strlen		3462298						
ANR	3462587	Symbol	strncmp		3462298						
ANR	3462588	Symbol	l -> ref		3462298						
ANR	3462589	Symbol	l -> name		3462298						
ANR	3462590	Symbol	stack [ sp ] . line		3462298						
ANR	3462591	Symbol	force_skip		3462298						
ANR	3462592	Symbol	l -> ref -> done		3462298						
ANR	3462593	Symbol	addr		3462298						
ANR	3462594	Symbol	delspc		3462298						
ANR	3462595	Symbol	sp		3462298						
ANR	3462596	Symbol	s1		3462298						
ANR	3462597	Symbol	s2		3462298						
ANR	3462598	Symbol	* * l		3462298						
ANR	3462599	Symbol	ret		3462298						
ANR	3462600	Symbol	c		3462298						
ANR	3462601	Symbol	previous		3462298						
ANR	3462602	Symbol	isalnum		3462298						
ANR	3462603	Symbol	* l -> ref		3462298						
ANR	3462604	Symbol	l		3462298						
ANR	3462605	Symbol	stderr		3462298						
ANR	3462606	Symbol	* c		3462298						
ANR	3462607	Symbol	labels		3462298						
ANR	3462608	Symbol	verbose		3462298						
ANR	3462609	Symbol	p		3462298						
ANR	3462610	Symbol	l -> next		3462298						
ANR	3462611	Symbol	s		3462298						
ANR	3462612	Symbol	* l		3462298						
ANR	3462613	Symbol	* stack		3462298						
ANR	3462614	Symbol	* p		3462298						
ANR	3462615	Function	rd_label	241:0:5748:6845							
ANR	3462616	FunctionDef	"rd_label (const char * * p , int * exists , struct label * * previous , int level , int print_errors)"		3462615	0					
ANR	3462617	CompoundStatement		244:0:5855:6845	3462615	0					
ANR	3462618	IdentifierDeclStatement	struct label * l = NULL ;	245:2:5859:5881	3462615	0	True				
ANR	3462619	IdentifierDecl	* l = NULL		3462615	0					
ANR	3462620	IdentifierDeclType	struct label *		3462615	0					
ANR	3462621	Identifier	l		3462615	1					
ANR	3462622	AssignmentExpression	* l = NULL		3462615	2		=			
ANR	3462623	Identifier	NULL		3462615	0					
ANR	3462624	Identifier	NULL		3462615	1					
ANR	3462625	IdentifierDeclStatement	int s ;	246:2:5885:5890	3462615	1	True				
ANR	3462626	IdentifierDecl	s		3462615	0					
ANR	3462627	IdentifierDeclType	int		3462615	0					
ANR	3462628	Identifier	s		3462615	1					
ANR	3462629	IfStatement	if ( exists )		3462615	2					
ANR	3462630	Condition	exists	247:6:5898:5903	3462615	0	True				
ANR	3462631	Identifier	exists		3462615	0					
ANR	3462632	ExpressionStatement	* exists = 0	248:4:5910:5921	3462615	1	True				
ANR	3462633	AssignmentExpression	* exists = 0		3462615	0		=			
ANR	3462634	UnaryOperationExpression	* exists		3462615	0					
ANR	3462635	UnaryOperator	*		3462615	0					
ANR	3462636	Identifier	exists		3462615	1					
ANR	3462637	PrimaryExpression	0		3462615	1					
ANR	3462638	IfStatement	if ( previous )		3462615	3					
ANR	3462639	Condition	previous	249:6:5929:5936	3462615	0	True				
ANR	3462640	Identifier	previous		3462615	0					
ANR	3462641	ExpressionStatement	* previous = NULL	250:4:5943:5959	3462615	1	True				
ANR	3462642	AssignmentExpression	* previous = NULL		3462615	0		=			
ANR	3462643	UnaryOperationExpression	* previous		3462615	0					
ANR	3462644	UnaryOperator	*		3462615	0					
ANR	3462645	Identifier	previous		3462615	1					
ANR	3462646	Identifier	NULL		3462615	1					
ANR	3462647	IfStatement	if ( verbose >= 6 )		3462615	4					
ANR	3462648	Condition	verbose >= 6	251:6:5967:5978	3462615	0	True				
ANR	3462649	RelationalExpression	verbose >= 6		3462615	0		>=			
ANR	3462650	Identifier	verbose		3462615	0					
ANR	3462651	PrimaryExpression	6		3462615	1					
ANR	3462652	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read label (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	252:4:5985:6088	3462615	1	True				
ANR	3462653	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read label (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3462615	0					
ANR	3462654	Callee	fprintf		3462615	0					
ANR	3462655	Identifier	fprintf		3462615	0					
ANR	3462656	ArgumentList	stderr		3462615	1					
ANR	3462657	Argument	stderr		3462615	0					
ANR	3462658	Identifier	stderr		3462615	0					
ANR	3462659	Argument	"""%5d (0x%04x): Starting to read label (string=%s).\\n"""		3462615	1					
ANR	3462660	PrimaryExpression	"""%5d (0x%04x): Starting to read label (string=%s).\\n"""		3462615	0					
ANR	3462661	Argument	stack [ sp ] . line		3462615	2					
ANR	3462662	MemberAccess	stack [ sp ] . line		3462615	0					
ANR	3462663	ArrayIndexing	stack [ sp ]		3462615	0					
ANR	3462664	Identifier	stack		3462615	0					
ANR	3462665	Identifier	sp		3462615	1					
ANR	3462666	Identifier	line		3462615	1					
ANR	3462667	Argument	addr		3462615	3					
ANR	3462668	Identifier	addr		3462615	0					
ANR	3462669	Argument	* p		3462615	4					
ANR	3462670	UnaryOperationExpression	* p		3462615	0					
ANR	3462671	UnaryOperator	*		3462615	0					
ANR	3462672	Identifier	p		3462615	1					
ANR	3462673	ForStatement	for ( s = level ; s >= 0 ; -- s )		3462615	5					
ANR	3462674	ForInit	s = level ;	254:7:6097:6106	3462615	0	True				
ANR	3462675	AssignmentExpression	s = level		3462615	0		=			
ANR	3462676	Identifier	s		3462615	0					
ANR	3462677	Identifier	level		3462615	1					
ANR	3462678	Condition	s >= 0	254:18:6108:6113	3462615	1	True				
ANR	3462679	RelationalExpression	s >= 0		3462615	0		>=			
ANR	3462680	Identifier	s		3462615	0					
ANR	3462681	PrimaryExpression	0		3462615	1					
ANR	3462682	UnaryExpression	-- s	254:26:6116:6118	3462615	2	True				
ANR	3462683	IncDec	--		3462615	0					
ANR	3462684	Identifier	s		3462615	1					
ANR	3462685	CompoundStatement		12:4:269:269	3462615	3					
ANR	3462686	IfStatement	"if ( check_label ( stack [ s ] . labels , p , & l , ( * * p == '.' && s == sp ) ? previous : NULL , 0 ) )"		3462615	0					
ANR	3462687	Condition	"check_label ( stack [ s ] . labels , p , & l , ( * * p == '.' && s == sp ) ? previous : NULL , 0 )"	256:10:6137:6227	3462615	0	True				
ANR	3462688	CallExpression	"check_label ( stack [ s ] . labels , p , & l , ( * * p == '.' && s == sp ) ? previous : NULL , 0 )"		3462615	0					
ANR	3462689	Callee	check_label		3462615	0					
ANR	3462690	Identifier	check_label		3462615	0					
ANR	3462691	ArgumentList	stack [ s ] . labels		3462615	1					
ANR	3462692	Argument	stack [ s ] . labels		3462615	0					
ANR	3462693	MemberAccess	stack [ s ] . labels		3462615	0					
ANR	3462694	ArrayIndexing	stack [ s ]		3462615	0					
ANR	3462695	Identifier	stack		3462615	0					
ANR	3462696	Identifier	s		3462615	1					
ANR	3462697	Identifier	labels		3462615	1					
ANR	3462698	Argument	p		3462615	1					
ANR	3462699	Identifier	p		3462615	0					
ANR	3462700	Argument	& l		3462615	2					
ANR	3462701	UnaryOperationExpression	& l		3462615	0					
ANR	3462702	UnaryOperator	&		3462615	0					
ANR	3462703	Identifier	l		3462615	1					
ANR	3462704	Argument	( * * p == '.' && s == sp ) ? previous : NULL		3462615	3					
ANR	3462705	ConditionalExpression	( * * p == '.' && s == sp ) ? previous : NULL		3462615	0					
ANR	3462706	Condition	* * p == '.' && s == sp		3462615	0					
ANR	3462707	AndExpression	* * p == '.' && s == sp		3462615	0		&&			
ANR	3462708	EqualityExpression	* * p == '.'		3462615	0		==			
ANR	3462709	UnaryOperationExpression	* * p		3462615	0					
ANR	3462710	UnaryOperator	*		3462615	0					
ANR	3462711	UnaryOperationExpression	* p		3462615	1					
ANR	3462712	UnaryOperator	*		3462615	0					
ANR	3462713	Identifier	p		3462615	1					
ANR	3462714	PrimaryExpression	'.'		3462615	1					
ANR	3462715	EqualityExpression	s == sp		3462615	1		==			
ANR	3462716	Identifier	s		3462615	0					
ANR	3462717	Identifier	sp		3462615	1					
ANR	3462718	Identifier	previous		3462615	1					
ANR	3462719	Identifier	NULL		3462615	2					
ANR	3462720	Argument	0		3462615	4					
ANR	3462721	PrimaryExpression	0		3462615	0					
ANR	3462722	BreakStatement	break ;	258:1:6231:6236	3462615	1	True				
ANR	3462723	IfStatement	if ( s < 0 )		3462615	6					
ANR	3462724	Condition	s < 0	260:6:6250:6254	3462615	0	True				
ANR	3462725	RelationalExpression	s < 0		3462615	0		<			
ANR	3462726	Identifier	s		3462615	0					
ANR	3462727	PrimaryExpression	0		3462615	1					
ANR	3462728	CompoundStatement		20:6:439:461	3462615	1					
ANR	3462729	IdentifierDeclStatement	const char * old_p = * p ;	263:6:6295:6317	3462615	0	True				
ANR	3462730	IdentifierDecl	* old_p = * p		3462615	0					
ANR	3462731	IdentifierDeclType	const char *		3462615	0					
ANR	3462732	Identifier	old_p		3462615	1					
ANR	3462733	AssignmentExpression	* old_p = * p		3462615	2		=			
ANR	3462734	Identifier	old_p		3462615	0					
ANR	3462735	UnaryOperationExpression	* p		3462615	1					
ANR	3462736	UnaryOperator	*		3462615	0					
ANR	3462737	Identifier	p		3462615	1					
ANR	3462738	IfStatement	if ( ! exists && print_errors )		3462615	1					
ANR	3462739	Condition	! exists && print_errors	266:7:6429:6451	3462615	0	True				
ANR	3462740	AndExpression	! exists && print_errors		3462615	0		&&			
ANR	3462741	UnaryOperationExpression	! exists		3462615	0					
ANR	3462742	UnaryOperator	!		3462615	0					
ANR	3462743	Identifier	exists		3462615	1					
ANR	3462744	Identifier	print_errors		3462615	1					
ANR	3462745	ExpressionStatement	"printerr ( 1 , ""using undefined label %.*s\\n"" , * p - old_p , old_p )"	267:5:6459:6522	3462615	1	True				
ANR	3462746	CallExpression	"printerr ( 1 , ""using undefined label %.*s\\n"" , * p - old_p , old_p )"		3462615	0					
ANR	3462747	Callee	printerr		3462615	0					
ANR	3462748	Identifier	printerr		3462615	0					
ANR	3462749	ArgumentList	1		3462615	1					
ANR	3462750	Argument	1		3462615	0					
ANR	3462751	PrimaryExpression	1		3462615	0					
ANR	3462752	Argument	"""using undefined label %.*s\\n"""		3462615	1					
ANR	3462753	PrimaryExpression	"""using undefined label %.*s\\n"""		3462615	0					
ANR	3462754	Argument	* p - old_p		3462615	2					
ANR	3462755	AdditiveExpression	* p - old_p		3462615	0		-			
ANR	3462756	UnaryOperationExpression	* p		3462615	0					
ANR	3462757	UnaryOperator	*		3462615	0					
ANR	3462758	Identifier	p		3462615	1					
ANR	3462759	Identifier	old_p		3462615	1					
ANR	3462760	Argument	old_p		3462615	3					
ANR	3462761	Identifier	old_p		3462615	0					
ANR	3462762	IfStatement	if ( verbose >= 7 )		3462615	2					
ANR	3462763	Condition	verbose >= 7	269:7:6604:6615	3462615	0	True				
ANR	3462764	RelationalExpression	verbose >= 7		3462615	0		>=			
ANR	3462765	Identifier	verbose		3462615	0					
ANR	3462766	PrimaryExpression	7		3462615	1					
ANR	3462767	ExpressionStatement	"fprintf ( stderr , ""rd_label returns invalid value\\n"" )"	270:5:6623:6675	3462615	1	True				
ANR	3462768	CallExpression	"fprintf ( stderr , ""rd_label returns invalid value\\n"" )"		3462615	0					
ANR	3462769	Callee	fprintf		3462615	0					
ANR	3462770	Identifier	fprintf		3462615	0					
ANR	3462771	ArgumentList	stderr		3462615	1					
ANR	3462772	Argument	stderr		3462615	0					
ANR	3462773	Identifier	stderr		3462615	0					
ANR	3462774	Argument	"""rd_label returns invalid value\\n"""		3462615	1					
ANR	3462775	PrimaryExpression	"""rd_label returns invalid value\\n"""		3462615	0					
ANR	3462776	ReturnStatement	return l != NULL ;	271:3:6680:6696	3462615	3	True				
ANR	3462777	EqualityExpression	l != NULL		3462615	0		!=			
ANR	3462778	Identifier	l		3462615	0					
ANR	3462779	Identifier	NULL		3462615	1					
ANR	3462780	IfStatement	if ( exists )		3462615	7					
ANR	3462781	Condition	exists	273:6:6710:6715	3462615	0	True				
ANR	3462782	Identifier	exists		3462615	0					
ANR	3462783	ExpressionStatement	* exists = 1	274:4:6722:6733	3462615	1	True				
ANR	3462784	AssignmentExpression	* exists = 1		3462615	0		=			
ANR	3462785	UnaryOperationExpression	* exists		3462615	0					
ANR	3462786	UnaryOperator	*		3462615	0					
ANR	3462787	Identifier	exists		3462615	1					
ANR	3462788	PrimaryExpression	1		3462615	1					
ANR	3462789	IfStatement	if ( verbose >= 7 )		3462615	8					
ANR	3462790	Condition	verbose >= 7	275:6:6741:6752	3462615	0	True				
ANR	3462791	RelationalExpression	verbose >= 7		3462615	0		>=			
ANR	3462792	Identifier	verbose		3462615	0					
ANR	3462793	PrimaryExpression	7		3462615	1					
ANR	3462794	ExpressionStatement	"fprintf ( stderr , ""rd_label returns valid value 0x%x\\n"" , l -> value )"	276:4:6759:6824	3462615	1	True				
ANR	3462795	CallExpression	"fprintf ( stderr , ""rd_label returns valid value 0x%x\\n"" , l -> value )"		3462615	0					
ANR	3462796	Callee	fprintf		3462615	0					
ANR	3462797	Identifier	fprintf		3462615	0					
ANR	3462798	ArgumentList	stderr		3462615	1					
ANR	3462799	Argument	stderr		3462615	0					
ANR	3462800	Identifier	stderr		3462615	0					
ANR	3462801	Argument	"""rd_label returns valid value 0x%x\\n"""		3462615	1					
ANR	3462802	PrimaryExpression	"""rd_label returns valid value 0x%x\\n"""		3462615	0					
ANR	3462803	Argument	l -> value		3462615	2					
ANR	3462804	PtrMemberAccess	l -> value		3462615	0					
ANR	3462805	Identifier	l		3462615	0					
ANR	3462806	Identifier	value		3462615	1					
ANR	3462807	ReturnStatement	return l -> value ;	277:2:6828:6843	3462615	9	True				
ANR	3462808	PtrMemberAccess	l -> value		3462615	0					
ANR	3462809	Identifier	l		3462615	0					
ANR	3462810	Identifier	value		3462615	1					
ANR	3462811	ReturnType	static int		3462615	1					
ANR	3462812	Identifier	rd_label		3462615	2					
ANR	3462813	ParameterList	"const char * * p , int * exists , struct label * * previous , int level , int print_errors"		3462615	3					
ANR	3462814	Parameter	const char * * p	242:10:5769:5782	3462615	0	True				
ANR	3462815	ParameterType	const char * *		3462615	0					
ANR	3462816	Identifier	p		3462615	1					
ANR	3462817	Parameter	int * exists	242:26:5785:5795	3462615	1	True				
ANR	3462818	ParameterType	int *		3462615	0					
ANR	3462819	Identifier	exists		3462615	1					
ANR	3462820	Parameter	struct label * * previous	242:39:5798:5820	3462615	2	True				
ANR	3462821	ParameterType	struct label * *		3462615	0					
ANR	3462822	Identifier	previous		3462615	1					
ANR	3462823	Parameter	int level	242:64:5823:5831	3462615	3	True				
ANR	3462824	ParameterType	int		3462615	0					
ANR	3462825	Identifier	level		3462615	1					
ANR	3462826	Parameter	int print_errors	243:3:5837:5852	3462615	4	True				
ANR	3462827	ParameterType	int		3462615	0					
ANR	3462828	Identifier	print_errors		3462615	1					
ANR	3462829	CFGEntryNode	ENTRY		3462615		True				
ANR	3462830	CFGExitNode	EXIT		3462615		True				
ANR	3462831	Symbol	* sp		3462615						
ANR	3462832	Symbol	stack		3462615						
ANR	3462833	Symbol	* previous		3462615						
ANR	3462834	Symbol	* exists		3462615						
ANR	3462835	Symbol	old_p		3462615						
ANR	3462836	Symbol	print_errors		3462615						
ANR	3462837	Symbol	stack [ sp ] . line		3462615						
ANR	3462838	Symbol	* * p		3462615						
ANR	3462839	Symbol	addr		3462615						
ANR	3462840	Symbol	sp		3462615						
ANR	3462841	Symbol	l -> value		3462615						
ANR	3462842	Symbol	NULL		3462615						
ANR	3462843	Symbol	previous		3462615						
ANR	3462844	Symbol	level		3462615						
ANR	3462845	Symbol	l		3462615						
ANR	3462846	Symbol	stderr		3462615						
ANR	3462847	Symbol	check_label		3462615						
ANR	3462848	Symbol	verbose		3462615						
ANR	3462849	Symbol	p		3462615						
ANR	3462850	Symbol	& l		3462615						
ANR	3462851	Symbol	s		3462615						
ANR	3462852	Symbol	* l		3462615						
ANR	3462853	Symbol	stack [ s ] . labels		3462615						
ANR	3462854	Symbol	exists		3462615						
ANR	3462855	Symbol	* stack		3462615						
ANR	3462856	Symbol	* p		3462615						
ANR	3462857	Symbol	* s		3462615						
ANR	3462858	Function	rd_value	280:0:6848:10122							
ANR	3462859	FunctionDef	"rd_value (const char * * p , int * valid , int level , int * check , int print_errors)"		3462858	0					
ANR	3462860	CompoundStatement		282:0:6938:10122	3462858	0					
ANR	3462861	IdentifierDeclStatement	"int sign = 1 , not = 0 , base , v ;"	283:2:6942:6972	3462858	0	True				
ANR	3462862	IdentifierDecl	sign = 1		3462858	0					
ANR	3462863	IdentifierDeclType	int		3462858	0					
ANR	3462864	Identifier	sign		3462858	1					
ANR	3462865	AssignmentExpression	sign = 1		3462858	2		=			
ANR	3462866	Identifier	sign		3462858	0					
ANR	3462867	PrimaryExpression	1		3462858	1					
ANR	3462868	IdentifierDecl	not = 0		3462858	1					
ANR	3462869	IdentifierDeclType	int		3462858	0					
ANR	3462870	Identifier	not		3462858	1					
ANR	3462871	AssignmentExpression	not = 0		3462858	2		=			
ANR	3462872	Identifier	not		3462858	0					
ANR	3462873	PrimaryExpression	0		3462858	1					
ANR	3462874	IdentifierDecl	base		3462858	2					
ANR	3462875	IdentifierDeclType	int		3462858	0					
ANR	3462876	Identifier	base		3462858	1					
ANR	3462877	IdentifierDecl	v		3462858	3					
ANR	3462878	IdentifierDeclType	int		3462858	0					
ANR	3462879	Identifier	v		3462858	1					
ANR	3462880	IdentifierDeclStatement	"const char * p0 , * p1 , * p2 ;"	284:2:6976:7000	3462858	1	True				
ANR	3462881	IdentifierDecl	* p0		3462858	0					
ANR	3462882	IdentifierDeclType	const char *		3462858	0					
ANR	3462883	Identifier	p0		3462858	1					
ANR	3462884	IdentifierDecl	* p1		3462858	1					
ANR	3462885	IdentifierDeclType	const char *		3462858	0					
ANR	3462886	Identifier	p1		3462858	1					
ANR	3462887	IdentifierDecl	* p2		3462858	2					
ANR	3462888	IdentifierDeclType	const char *		3462858	0					
ANR	3462889	Identifier	p2		3462858	1					
ANR	3462890	IfStatement	if ( verbose >= 6 )		3462858	2					
ANR	3462891	Condition	verbose >= 6	285:6:7008:7019	3462858	0	True				
ANR	3462892	RelationalExpression	verbose >= 6		3462858	0		>=			
ANR	3462893	Identifier	verbose		3462858	0					
ANR	3462894	PrimaryExpression	6		3462858	1					
ANR	3462895	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read value (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	286:4:7026:7129	3462858	1	True				
ANR	3462896	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read value (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3462858	0					
ANR	3462897	Callee	fprintf		3462858	0					
ANR	3462898	Identifier	fprintf		3462858	0					
ANR	3462899	ArgumentList	stderr		3462858	1					
ANR	3462900	Argument	stderr		3462858	0					
ANR	3462901	Identifier	stderr		3462858	0					
ANR	3462902	Argument	"""%5d (0x%04x): Starting to read value (string=%s).\\n"""		3462858	1					
ANR	3462903	PrimaryExpression	"""%5d (0x%04x): Starting to read value (string=%s).\\n"""		3462858	0					
ANR	3462904	Argument	stack [ sp ] . line		3462858	2					
ANR	3462905	MemberAccess	stack [ sp ] . line		3462858	0					
ANR	3462906	ArrayIndexing	stack [ sp ]		3462858	0					
ANR	3462907	Identifier	stack		3462858	0					
ANR	3462908	Identifier	sp		3462858	1					
ANR	3462909	Identifier	line		3462858	1					
ANR	3462910	Argument	addr		3462858	3					
ANR	3462911	Identifier	addr		3462858	0					
ANR	3462912	Argument	* p		3462858	4					
ANR	3462913	UnaryOperationExpression	* p		3462858	0					
ANR	3462914	UnaryOperator	*		3462858	0					
ANR	3462915	Identifier	p		3462858	1					
ANR	3462916	ExpressionStatement	* p = delspc ( * p )	288:2:7133:7149	3462858	3	True				
ANR	3462917	AssignmentExpression	* p = delspc ( * p )		3462858	0		=			
ANR	3462918	UnaryOperationExpression	* p		3462858	0					
ANR	3462919	UnaryOperator	*		3462858	0					
ANR	3462920	Identifier	p		3462858	1					
ANR	3462921	CallExpression	delspc ( * p )		3462858	1					
ANR	3462922	Callee	delspc		3462858	0					
ANR	3462923	Identifier	delspc		3462858	0					
ANR	3462924	ArgumentList	* p		3462858	1					
ANR	3462925	Argument	* p		3462858	0					
ANR	3462926	UnaryOperationExpression	* p		3462858	0					
ANR	3462927	UnaryOperator	*		3462858	0					
ANR	3462928	Identifier	p		3462858	1					
ANR	3462929	WhileStatement	"while ( * * p && strchr ( ""+-~"" , * * p ) )"		3462858	4					
ANR	3462930	Condition	"* * p && strchr ( ""+-~"" , * * p )"	289:9:7160:7185	3462858	0	True				
ANR	3462931	AndExpression	"* * p && strchr ( ""+-~"" , * * p )"		3462858	0		&&			
ANR	3462932	UnaryOperationExpression	* * p		3462858	0					
ANR	3462933	UnaryOperator	*		3462858	0					
ANR	3462934	UnaryOperationExpression	* p		3462858	1					
ANR	3462935	UnaryOperator	*		3462858	0					
ANR	3462936	Identifier	p		3462858	1					
ANR	3462937	CallExpression	"strchr ( ""+-~"" , * * p )"		3462858	1					
ANR	3462938	Callee	strchr		3462858	0					
ANR	3462939	Identifier	strchr		3462858	0					
ANR	3462940	ArgumentList	"""+-~"""		3462858	1					
ANR	3462941	Argument	"""+-~"""		3462858	0					
ANR	3462942	PrimaryExpression	"""+-~"""		3462858	0					
ANR	3462943	Argument	* * p		3462858	1					
ANR	3462944	UnaryOperationExpression	* * p		3462858	0					
ANR	3462945	UnaryOperator	*		3462858	0					
ANR	3462946	UnaryOperationExpression	* p		3462858	1					
ANR	3462947	UnaryOperator	*		3462858	0					
ANR	3462948	Identifier	p		3462858	1					
ANR	3462949	CompoundStatement		9:4:253:253	3462858	1					
ANR	3462950	IfStatement	if ( * * p == '-' )		3462858	0					
ANR	3462951	Condition	* * p == '-'	291:10:7204:7213	3462858	0	True				
ANR	3462952	EqualityExpression	* * p == '-'		3462858	0		==			
ANR	3462953	UnaryOperationExpression	* * p		3462858	0					
ANR	3462954	UnaryOperator	*		3462858	0					
ANR	3462955	UnaryOperationExpression	* p		3462858	1					
ANR	3462956	UnaryOperator	*		3462858	0					
ANR	3462957	Identifier	p		3462858	1					
ANR	3462958	PrimaryExpression	'-'		3462858	1					
ANR	3462959	ExpressionStatement	sign = - sign	292:1:7217:7229	3462858	1	True				
ANR	3462960	AssignmentExpression	sign = - sign		3462858	0		=			
ANR	3462961	Identifier	sign		3462858	0					
ANR	3462962	UnaryOperationExpression	- sign		3462858	1					
ANR	3462963	UnaryOperator	-		3462858	0					
ANR	3462964	Identifier	sign		3462858	1					
ANR	3462965	ElseStatement	else		3462858	0					
ANR	3462966	IfStatement	if ( * * p == '~' )		3462858	0					
ANR	3462967	Condition	* * p == '~'	293:15:7246:7255	3462858	0	True				
ANR	3462968	EqualityExpression	* * p == '~'		3462858	0		==			
ANR	3462969	UnaryOperationExpression	* * p		3462858	0					
ANR	3462970	UnaryOperator	*		3462858	0					
ANR	3462971	UnaryOperationExpression	* p		3462858	1					
ANR	3462972	UnaryOperator	*		3462858	0					
ANR	3462973	Identifier	p		3462858	1					
ANR	3462974	PrimaryExpression	'~'		3462858	1					
ANR	3462975	ExpressionStatement	not = ~not	294:1:7259:7269	3462858	1	True				
ANR	3462976	AssignmentExpression	not = ~not		3462858	0		=			
ANR	3462977	Identifier	not		3462858	0					
ANR	3462978	Identifier	~not		3462858	1					
ANR	3462979	ExpressionStatement	( * p ) ++	295:6:7277:7283	3462858	1	True				
ANR	3462980	PostIncDecOperationExpression	( * p ) ++		3462858	0					
ANR	3462981	UnaryOperationExpression	* p		3462858	0					
ANR	3462982	UnaryOperator	*		3462858	0					
ANR	3462983	Identifier	p		3462858	1					
ANR	3462984	IncDec	++		3462858	1					
ANR	3462985	ExpressionStatement	* p = delspc ( * p )	296:6:7291:7307	3462858	2	True				
ANR	3462986	AssignmentExpression	* p = delspc ( * p )		3462858	0		=			
ANR	3462987	UnaryOperationExpression	* p		3462858	0					
ANR	3462988	UnaryOperator	*		3462858	0					
ANR	3462989	Identifier	p		3462858	1					
ANR	3462990	CallExpression	delspc ( * p )		3462858	1					
ANR	3462991	Callee	delspc		3462858	0					
ANR	3462992	Identifier	delspc		3462858	0					
ANR	3462993	ArgumentList	* p		3462858	1					
ANR	3462994	Argument	* p		3462858	0					
ANR	3462995	UnaryOperationExpression	* p		3462858	0					
ANR	3462996	UnaryOperator	*		3462858	0					
ANR	3462997	Identifier	p		3462858	1					
ANR	3462998	ExpressionStatement	base = 10	298:2:7317:7326	3462858	5	True				
ANR	3462999	AssignmentExpression	base = 10		3462858	0		=			
ANR	3463000	Identifier	base		3462858	0					
ANR	3463001	PrimaryExpression	10		3462858	1					
ANR	3463002	IfStatement	if ( * * p != '(' )		3462858	6					
ANR	3463003	Condition	* * p != '('	301:6:7455:7464	3462858	0	True				
ANR	3463004	EqualityExpression	* * p != '('		3462858	0		!=			
ANR	3463005	UnaryOperationExpression	* * p		3462858	0					
ANR	3463006	UnaryOperator	*		3462858	0					
ANR	3463007	UnaryOperationExpression	* p		3462858	1					
ANR	3463008	UnaryOperator	*		3462858	0					
ANR	3463009	Identifier	p		3462858	1					
ANR	3463010	PrimaryExpression	'('		3462858	1					
ANR	3463011	ExpressionStatement	* check = 0	302:4:7471:7481	3462858	1	True				
ANR	3463012	AssignmentExpression	* check = 0		3462858	0		=			
ANR	3463013	UnaryOperationExpression	* check		3462858	0					
ANR	3463014	UnaryOperator	*		3462858	0					
ANR	3463015	Identifier	check		3462858	1					
ANR	3463016	PrimaryExpression	0		3462858	1					
ANR	3463017	SwitchStatement	switch ( * * p )		3462858	7					
ANR	3463018	Condition	* * p	304:10:7494:7496	3462858	0	True				
ANR	3463019	UnaryOperationExpression	* * p		3462858	0					
ANR	3463020	UnaryOperator	*		3462858	0					
ANR	3463021	UnaryOperationExpression	* p		3462858	1					
ANR	3463022	UnaryOperator	*		3462858	0					
ANR	3463023	Identifier	p		3462858	1					
ANR	3463024	CompoundStatement		27:6:615:630	3462858	1					
ANR	3463025	IdentifierDeclStatement	"int exist , retval ;"	306:6:7511:7528	3462858	0	True				
ANR	3463026	IdentifierDecl	exist		3462858	0					
ANR	3463027	IdentifierDeclType	int		3462858	0					
ANR	3463028	Identifier	exist		3462858	1					
ANR	3463029	IdentifierDecl	retval		3462858	1					
ANR	3463030	IdentifierDeclType	int		3462858	0					
ANR	3463031	Identifier	retval		3462858	1					
ANR	3463032	IdentifierDeclStatement	char quote ;	307:6:7536:7546	3462858	1	True				
ANR	3463033	IdentifierDecl	quote		3462858	0					
ANR	3463034	IdentifierDeclType	char		3462858	0					
ANR	3463035	Identifier	quote		3462858	1					
ANR	3463036	IdentifierDeclStatement	int dummy_check ;	308:6:7554:7569	3462858	2	True				
ANR	3463037	IdentifierDecl	dummy_check		3462858	0					
ANR	3463038	IdentifierDeclType	int		3462858	0					
ANR	3463039	Identifier	dummy_check		3462858	1					
ANR	3463040	Label	case '(' :	309:4:7575:7583	3462858	3	True				
ANR	3463041	ExpressionStatement	( * p ) ++	310:6:7591:7597	3462858	4	True				
ANR	3463042	PostIncDecOperationExpression	( * p ) ++		3462858	0					
ANR	3463043	UnaryOperationExpression	* p		3462858	0					
ANR	3463044	UnaryOperator	*		3462858	0					
ANR	3463045	Identifier	p		3462858	1					
ANR	3463046	IncDec	++		3462858	1					
ANR	3463047	ExpressionStatement	dummy_check = 0	311:6:7605:7620	3462858	5	True				
ANR	3463048	AssignmentExpression	dummy_check = 0		3462858	0		=			
ANR	3463049	Identifier	dummy_check		3462858	0					
ANR	3463050	PrimaryExpression	0		3462858	1					
ANR	3463051	ExpressionStatement	"retval = not ^ ( sign * do_rd_expr ( p , ')' , valid , level , & dummy_check , print_errors ) )"	312:6:7628:7719	3462858	6	True				
ANR	3463052	AssignmentExpression	"retval = not ^ ( sign * do_rd_expr ( p , ')' , valid , level , & dummy_check , print_errors ) )"		3462858	0		=			
ANR	3463053	Identifier	retval		3462858	0					
ANR	3463054	ExclusiveOrExpression	"not ^ ( sign * do_rd_expr ( p , ')' , valid , level , & dummy_check , print_errors ) )"		3462858	1		^			
ANR	3463055	Identifier	not		3462858	0					
ANR	3463056	MultiplicativeExpression	"sign * do_rd_expr ( p , ')' , valid , level , & dummy_check , print_errors )"		3462858	1		*			
ANR	3463057	Identifier	sign		3462858	0					
ANR	3463058	CallExpression	"do_rd_expr ( p , ')' , valid , level , & dummy_check , print_errors )"		3462858	1					
ANR	3463059	Callee	do_rd_expr		3462858	0					
ANR	3463060	Identifier	do_rd_expr		3462858	0					
ANR	3463061	ArgumentList	p		3462858	1					
ANR	3463062	Argument	p		3462858	0					
ANR	3463063	Identifier	p		3462858	0					
ANR	3463064	Argument	')'		3462858	1					
ANR	3463065	PrimaryExpression	')'		3462858	0					
ANR	3463066	Argument	valid		3462858	2					
ANR	3463067	Identifier	valid		3462858	0					
ANR	3463068	Argument	level		3462858	3					
ANR	3463069	Identifier	level		3462858	0					
ANR	3463070	Argument	& dummy_check		3462858	4					
ANR	3463071	UnaryOperationExpression	& dummy_check		3462858	0					
ANR	3463072	UnaryOperator	&		3462858	0					
ANR	3463073	Identifier	dummy_check		3462858	1					
ANR	3463074	Argument	print_errors		3462858	5					
ANR	3463075	Identifier	print_errors		3462858	0					
ANR	3463076	ExpressionStatement	++ * p	314:6:7727:7731	3462858	7	True				
ANR	3463077	UnaryExpression	++ * p		3462858	0					
ANR	3463078	IncDec	++		3462858	0					
ANR	3463079	UnaryOperationExpression	* p		3462858	1					
ANR	3463080	UnaryOperator	*		3462858	0					
ANR	3463081	Identifier	p		3462858	1					
ANR	3463082	ReturnStatement	return retval ;	315:6:7739:7752	3462858	8	True				
ANR	3463083	Identifier	retval		3462858	0					
ANR	3463084	Label	case '0' :	316:4:7758:7766	3462858	9	True				
ANR	3463085	IfStatement	if ( ( * p ) [ 1 ] == 'x' )		3462858	10					
ANR	3463086	Condition	( * p ) [ 1 ] == 'x'	317:10:7778:7791	3462858	0	True				
ANR	3463087	EqualityExpression	( * p ) [ 1 ] == 'x'		3462858	0		==			
ANR	3463088	ArrayIndexing	( * p ) [ 1 ]		3462858	0					
ANR	3463089	UnaryOperationExpression	* p		3462858	0					
ANR	3463090	UnaryOperator	*		3462858	0					
ANR	3463091	Identifier	p		3462858	1					
ANR	3463092	PrimaryExpression	1		3462858	1					
ANR	3463093	PrimaryExpression	'x'		3462858	1					
ANR	3463094	CompoundStatement		37:1:856:856	3462858	1					
ANR	3463095	ExpressionStatement	( * p ) += 2	319:3:7800:7809	3462858	0	True				
ANR	3463096	AssignmentExpression	( * p ) += 2		3462858	0		+=			
ANR	3463097	UnaryOperationExpression	* p		3462858	0					
ANR	3463098	UnaryOperator	*		3462858	0					
ANR	3463099	Identifier	p		3462858	1					
ANR	3463100	PrimaryExpression	2		3462858	1					
ANR	3463101	ReturnStatement	"return not ^ ( sign * rd_number ( p , NULL , 0x10 ) ) ;"	320:3:7814:7861	3462858	1	True				
ANR	3463102	ExclusiveOrExpression	"not ^ ( sign * rd_number ( p , NULL , 0x10 ) )"		3462858	0		^			
ANR	3463103	Identifier	not		3462858	0					
ANR	3463104	MultiplicativeExpression	"sign * rd_number ( p , NULL , 0x10 )"		3462858	1		*			
ANR	3463105	Identifier	sign		3462858	0					
ANR	3463106	CallExpression	"rd_number ( p , NULL , 0x10 )"		3462858	1					
ANR	3463107	Callee	rd_number		3462858	0					
ANR	3463108	Identifier	rd_number		3462858	0					
ANR	3463109	ArgumentList	p		3462858	1					
ANR	3463110	Argument	p		3462858	0					
ANR	3463111	Identifier	p		3462858	0					
ANR	3463112	Argument	NULL		3462858	1					
ANR	3463113	Identifier	NULL		3462858	0					
ANR	3463114	Argument	0x10		3462858	2					
ANR	3463115	PrimaryExpression	0x10		3462858	0					
ANR	3463116	ExpressionStatement	base = 8	322:6:7872:7880	3462858	11	True				
ANR	3463117	AssignmentExpression	base = 8		3462858	0		=			
ANR	3463118	Identifier	base		3462858	0					
ANR	3463119	PrimaryExpression	8		3462858	1					
ANR	3463120	Label	case '1' :	324:4:7966:7974	3462858	12	True				
ANR	3463121	Label	case '2' :	325:4:7980:7988	3462858	13	True				
ANR	3463122	Label	case '3' :	326:4:7994:8002	3462858	14	True				
ANR	3463123	Label	case '4' :	327:4:8008:8016	3462858	15	True				
ANR	3463124	Label	case '5' :	328:4:8022:8030	3462858	16	True				
ANR	3463125	Label	case '6' :	329:4:8036:8044	3462858	17	True				
ANR	3463126	Label	case '7' :	330:4:8050:8058	3462858	18	True				
ANR	3463127	Label	case '8' :	331:4:8064:8072	3462858	19	True				
ANR	3463128	Label	case '9' :	332:4:8078:8086	3462858	20	True				
ANR	3463129	ExpressionStatement	p0 = * p	333:6:8094:8101	3462858	21	True				
ANR	3463130	AssignmentExpression	p0 = * p		3462858	0		=			
ANR	3463131	Identifier	p0		3462858	0					
ANR	3463132	UnaryOperationExpression	* p		3462858	1					
ANR	3463133	UnaryOperator	*		3462858	0					
ANR	3463134	Identifier	p		3462858	1					
ANR	3463135	ExpressionStatement	"rd_number ( p , & p1 , 36 )"	334:6:8109:8131	3462858	22	True				
ANR	3463136	CallExpression	"rd_number ( p , & p1 , 36 )"		3462858	0					
ANR	3463137	Callee	rd_number		3462858	0					
ANR	3463138	Identifier	rd_number		3462858	0					
ANR	3463139	ArgumentList	p		3462858	1					
ANR	3463140	Argument	p		3462858	0					
ANR	3463141	Identifier	p		3462858	0					
ANR	3463142	Argument	& p1		3462858	1					
ANR	3463143	UnaryOperationExpression	& p1		3462858	0					
ANR	3463144	UnaryOperator	&		3462858	0					
ANR	3463145	Identifier	p1		3462858	1					
ANR	3463146	Argument	36		3462858	2					
ANR	3463147	PrimaryExpression	36		3462858	0					
ANR	3463148	ExpressionStatement	p1 --	335:6:8178:8182	3462858	23	True				
ANR	3463149	PostIncDecOperationExpression	p1 --		3462858	0					
ANR	3463150	Identifier	p1		3462858	0					
ANR	3463151	IncDec	--		3462858	1					
ANR	3463152	SwitchStatement	switch ( * p1 )		3462858	24					
ANR	3463153	Condition	* p1	336:14:8239:8241	3462858	0	True				
ANR	3463154	UnaryOperationExpression	* p1		3462858	0					
ANR	3463155	UnaryOperator	*		3462858	0					
ANR	3463156	Identifier	p1		3462858	1					
ANR	3463157	CompoundStatement		56:1:1306:1306	3462858	1					
ANR	3463158	Label	case 'h' :	338:1:8248:8256	3462858	0	True				
ANR	3463159	Label	case 'H' :	339:1:8259:8267	3462858	1	True				
ANR	3463160	ExpressionStatement	base = 16	340:3:8272:8281	3462858	2	True				
ANR	3463161	AssignmentExpression	base = 16		3462858	0		=			
ANR	3463162	Identifier	base		3462858	0					
ANR	3463163	PrimaryExpression	16		3462858	1					
ANR	3463164	BreakStatement	break ;	341:3:8286:8291	3462858	3	True				
ANR	3463165	Label	case 'b' :	342:1:8294:8302	3462858	4	True				
ANR	3463166	Label	case 'B' :	343:1:8305:8313	3462858	5	True				
ANR	3463167	ExpressionStatement	base = 2	344:3:8318:8326	3462858	6	True				
ANR	3463168	AssignmentExpression	base = 2		3462858	0		=			
ANR	3463169	Identifier	base		3462858	0					
ANR	3463170	PrimaryExpression	2		3462858	1					
ANR	3463171	BreakStatement	break ;	345:3:8331:8336	3462858	7	True				
ANR	3463172	Label	case 'o' :	346:1:8339:8347	3462858	8	True				
ANR	3463173	Label	case 'O' :	347:1:8350:8358	3462858	9	True				
ANR	3463174	Label	case 'q' :	348:1:8361:8369	3462858	10	True				
ANR	3463175	Label	case 'Q' :	349:1:8372:8380	3462858	11	True				
ANR	3463176	ExpressionStatement	base = 8	350:3:8385:8393	3462858	12	True				
ANR	3463177	AssignmentExpression	base = 8		3462858	0		=			
ANR	3463178	Identifier	base		3462858	0					
ANR	3463179	PrimaryExpression	8		3462858	1					
ANR	3463180	BreakStatement	break ;	351:3:8398:8403	3462858	13	True				
ANR	3463181	Label	case 'd' :	352:1:8406:8414	3462858	14	True				
ANR	3463182	Label	case 'D' :	353:1:8417:8425	3462858	15	True				
ANR	3463183	ExpressionStatement	base = 10	354:3:8430:8439	3462858	16	True				
ANR	3463184	AssignmentExpression	base = 10		3462858	0		=			
ANR	3463185	Identifier	base		3462858	0					
ANR	3463186	PrimaryExpression	10		3462858	1					
ANR	3463187	BreakStatement	break ;	355:3:8444:8449	3462858	17	True				
ANR	3463188	Label	default :	356:1:8452:8459	3462858	18	True				
ANR	3463189	Identifier	default		3462858	0					
ANR	3463190	ExpressionStatement	p1 ++	357:3:8481:8485	3462858	19	True				
ANR	3463191	PostIncDecOperationExpression	p1 ++		3462858	0					
ANR	3463192	Identifier	p1		3462858	0					
ANR	3463193	IncDec	++		3462858	1					
ANR	3463194	BreakStatement	break ;	358:3:8490:8495	3462858	20	True				
ANR	3463195	ExpressionStatement	"v = rd_number ( & p0 , & p2 , base )"	360:6:8506:8536	3462858	25	True				
ANR	3463196	AssignmentExpression	"v = rd_number ( & p0 , & p2 , base )"		3462858	0		=			
ANR	3463197	Identifier	v		3462858	0					
ANR	3463198	CallExpression	"rd_number ( & p0 , & p2 , base )"		3462858	1					
ANR	3463199	Callee	rd_number		3462858	0					
ANR	3463200	Identifier	rd_number		3462858	0					
ANR	3463201	ArgumentList	& p0		3462858	1					
ANR	3463202	Argument	& p0		3462858	0					
ANR	3463203	UnaryOperationExpression	& p0		3462858	0					
ANR	3463204	UnaryOperator	&		3462858	0					
ANR	3463205	Identifier	p0		3462858	1					
ANR	3463206	Argument	& p2		3462858	1					
ANR	3463207	UnaryOperationExpression	& p2		3462858	0					
ANR	3463208	UnaryOperator	&		3462858	0					
ANR	3463209	Identifier	p2		3462858	1					
ANR	3463210	Argument	base		3462858	2					
ANR	3463211	Identifier	base		3462858	0					
ANR	3463212	IfStatement	if ( p1 != p2 )		3462858	26					
ANR	3463213	Condition	p1 != p2	361:10:8548:8555	3462858	0	True				
ANR	3463214	EqualityExpression	p1 != p2		3462858	0		!=			
ANR	3463215	Identifier	p1		3462858	0					
ANR	3463216	Identifier	p2		3462858	1					
ANR	3463217	CompoundStatement		81:1:1620:1620	3462858	1					
ANR	3463218	IfStatement	if ( valid )		3462858	0					
ANR	3463219	Condition	valid	363:7:8568:8572	3462858	0	True				
ANR	3463220	Identifier	valid		3462858	0					
ANR	3463221	ExpressionStatement	* valid = 0	364:5:8580:8590	3462858	1	True				
ANR	3463222	AssignmentExpression	* valid = 0		3462858	0		=			
ANR	3463223	UnaryOperationExpression	* valid		3462858	0					
ANR	3463224	UnaryOperator	*		3462858	0					
ANR	3463225	Identifier	valid		3462858	1					
ANR	3463226	PrimaryExpression	0		3462858	1					
ANR	3463227	ElseStatement	else		3462858	0					
ANR	3463228	IfStatement	if ( print_errors )		3462858	0					
ANR	3463229	Condition	print_errors	365:12:8604:8615	3462858	0	True				
ANR	3463230	Identifier	print_errors		3462858	0					
ANR	3463231	ExpressionStatement	"printerr ( 1 , ""invalid character in number: \\'%c\\'\\n"" , * p2 )"	366:5:8623:8681	3462858	1	True				
ANR	3463232	CallExpression	"printerr ( 1 , ""invalid character in number: \\'%c\\'\\n"" , * p2 )"		3462858	0					
ANR	3463233	Callee	printerr		3462858	0					
ANR	3463234	Identifier	printerr		3462858	0					
ANR	3463235	ArgumentList	1		3462858	1					
ANR	3463236	Argument	1		3462858	0					
ANR	3463237	PrimaryExpression	1		3462858	0					
ANR	3463238	Argument	"""invalid character in number: \\'%c\\'\\n"""		3462858	1					
ANR	3463239	PrimaryExpression	"""invalid character in number: \\'%c\\'\\n"""		3462858	0					
ANR	3463240	Argument	* p2		3462858	2					
ANR	3463241	UnaryOperationExpression	* p2		3462858	0					
ANR	3463242	UnaryOperator	*		3462858	0					
ANR	3463243	Identifier	p2		3462858	1					
ANR	3463244	ReturnStatement	return not ^ ( sign * v ) ;	368:6:8692:8715	3462858	27	True				
ANR	3463245	ExclusiveOrExpression	not ^ ( sign * v )		3462858	0		^			
ANR	3463246	Identifier	not		3462858	0					
ANR	3463247	MultiplicativeExpression	sign * v		3462858	1		*			
ANR	3463248	Identifier	sign		3462858	0					
ANR	3463249	Identifier	v		3462858	1					
ANR	3463250	Label	case '$' :	369:4:8721:8729	3462858	28	True				
ANR	3463251	ExpressionStatement	++ * p	370:6:8737:8741	3462858	29	True				
ANR	3463252	UnaryExpression	++ * p		3462858	0					
ANR	3463253	IncDec	++		3462858	0					
ANR	3463254	UnaryOperationExpression	* p		3462858	1					
ANR	3463255	UnaryOperator	*		3462858	0					
ANR	3463256	Identifier	p		3462858	1					
ANR	3463257	ExpressionStatement	* p = delspc ( * p )	371:6:8749:8765	3462858	30	True				
ANR	3463258	AssignmentExpression	* p = delspc ( * p )		3462858	0		=			
ANR	3463259	UnaryOperationExpression	* p		3462858	0					
ANR	3463260	UnaryOperator	*		3462858	0					
ANR	3463261	Identifier	p		3462858	1					
ANR	3463262	CallExpression	delspc ( * p )		3462858	1					
ANR	3463263	Callee	delspc		3462858	0					
ANR	3463264	Identifier	delspc		3462858	0					
ANR	3463265	ArgumentList	* p		3462858	1					
ANR	3463266	Argument	* p		3462858	0					
ANR	3463267	UnaryOperationExpression	* p		3462858	0					
ANR	3463268	UnaryOperator	*		3462858	0					
ANR	3463269	Identifier	p		3462858	1					
ANR	3463270	ExpressionStatement	p0 = * p	372:6:8773:8780	3462858	31	True				
ANR	3463271	AssignmentExpression	p0 = * p		3462858	0		=			
ANR	3463272	Identifier	p0		3462858	0					
ANR	3463273	UnaryOperationExpression	* p		3462858	1					
ANR	3463274	UnaryOperator	*		3462858	0					
ANR	3463275	Identifier	p		3462858	1					
ANR	3463276	ExpressionStatement	"v = rd_number ( & p0 , & p2 , 0x10 )"	373:6:8788:8818	3462858	32	True				
ANR	3463277	AssignmentExpression	"v = rd_number ( & p0 , & p2 , 0x10 )"		3462858	0		=			
ANR	3463278	Identifier	v		3462858	0					
ANR	3463279	CallExpression	"rd_number ( & p0 , & p2 , 0x10 )"		3462858	1					
ANR	3463280	Callee	rd_number		3462858	0					
ANR	3463281	Identifier	rd_number		3462858	0					
ANR	3463282	ArgumentList	& p0		3462858	1					
ANR	3463283	Argument	& p0		3462858	0					
ANR	3463284	UnaryOperationExpression	& p0		3462858	0					
ANR	3463285	UnaryOperator	&		3462858	0					
ANR	3463286	Identifier	p0		3462858	1					
ANR	3463287	Argument	& p2		3462858	1					
ANR	3463288	UnaryOperationExpression	& p2		3462858	0					
ANR	3463289	UnaryOperator	&		3462858	0					
ANR	3463290	Identifier	p2		3462858	1					
ANR	3463291	Argument	0x10		3462858	2					
ANR	3463292	PrimaryExpression	0x10		3462858	0					
ANR	3463293	IfStatement	if ( p2 == * p )		3462858	33					
ANR	3463294	Condition	p2 == * p	374:10:8830:8837	3462858	0	True				
ANR	3463295	EqualityExpression	p2 == * p		3462858	0		==			
ANR	3463296	Identifier	p2		3462858	0					
ANR	3463297	UnaryOperationExpression	* p		3462858	1					
ANR	3463298	UnaryOperator	*		3462858	0					
ANR	3463299	Identifier	p		3462858	1					
ANR	3463300	CompoundStatement		94:1:1902:1902	3462858	1					
ANR	3463301	ExpressionStatement	v = baseaddr	376:3:8846:8858	3462858	0	True				
ANR	3463302	AssignmentExpression	v = baseaddr		3462858	0		=			
ANR	3463303	Identifier	v		3462858	0					
ANR	3463304	Identifier	baseaddr		3462858	1					
ANR	3463305	ElseStatement	else		3462858	0					
ANR	3463306	ExpressionStatement	* p = p2	379:1:8875:8882	3462858	0	True				
ANR	3463307	AssignmentExpression	* p = p2		3462858	0		=			
ANR	3463308	UnaryOperationExpression	* p		3462858	0					
ANR	3463309	UnaryOperator	*		3462858	0					
ANR	3463310	Identifier	p		3462858	1					
ANR	3463311	Identifier	p2		3462858	1					
ANR	3463312	ReturnStatement	return not ^ ( sign * v ) ;	380:6:8890:8913	3462858	34	True				
ANR	3463313	ExclusiveOrExpression	not ^ ( sign * v )		3462858	0		^			
ANR	3463314	Identifier	not		3462858	0					
ANR	3463315	MultiplicativeExpression	sign * v		3462858	1		*			
ANR	3463316	Identifier	sign		3462858	0					
ANR	3463317	Identifier	v		3462858	1					
ANR	3463318	Label	case '%' :	381:4:8919:8927	3462858	35	True				
ANR	3463319	ExpressionStatement	( * p ) ++	382:6:8935:8941	3462858	36	True				
ANR	3463320	PostIncDecOperationExpression	( * p ) ++		3462858	0					
ANR	3463321	UnaryOperationExpression	* p		3462858	0					
ANR	3463322	UnaryOperator	*		3462858	0					
ANR	3463323	Identifier	p		3462858	1					
ANR	3463324	IncDec	++		3462858	1					
ANR	3463325	ReturnStatement	"return not ^ ( sign * rd_number ( p , NULL , 2 ) ) ;"	383:6:8949:8993	3462858	37	True				
ANR	3463326	ExclusiveOrExpression	"not ^ ( sign * rd_number ( p , NULL , 2 ) )"		3462858	0		^			
ANR	3463327	Identifier	not		3462858	0					
ANR	3463328	MultiplicativeExpression	"sign * rd_number ( p , NULL , 2 )"		3462858	1		*			
ANR	3463329	Identifier	sign		3462858	0					
ANR	3463330	CallExpression	"rd_number ( p , NULL , 2 )"		3462858	1					
ANR	3463331	Callee	rd_number		3462858	0					
ANR	3463332	Identifier	rd_number		3462858	0					
ANR	3463333	ArgumentList	p		3462858	1					
ANR	3463334	Argument	p		3462858	0					
ANR	3463335	Identifier	p		3462858	0					
ANR	3463336	Argument	NULL		3462858	1					
ANR	3463337	Identifier	NULL		3462858	0					
ANR	3463338	Argument	2		3462858	2					
ANR	3463339	PrimaryExpression	2		3462858	0					
ANR	3463340	Label	case '\\'' :	384:4:8999:9008	3462858	38	True				
ANR	3463341	Label	"case '""' :"	385:4:9014:9022	3462858	39	True				
ANR	3463342	ExpressionStatement	quote = * * p	386:6:9030:9041	3462858	40	True				
ANR	3463343	AssignmentExpression	quote = * * p		3462858	0		=			
ANR	3463344	Identifier	quote		3462858	0					
ANR	3463345	UnaryOperationExpression	* * p		3462858	1					
ANR	3463346	UnaryOperator	*		3462858	0					
ANR	3463347	UnaryOperationExpression	* p		3462858	1					
ANR	3463348	UnaryOperator	*		3462858	0					
ANR	3463349	Identifier	p		3462858	1					
ANR	3463350	ExpressionStatement	++ * p	387:6:9049:9053	3462858	41	True				
ANR	3463351	UnaryExpression	++ * p		3462858	0					
ANR	3463352	IncDec	++		3462858	0					
ANR	3463353	UnaryOperationExpression	* p		3462858	1					
ANR	3463354	UnaryOperator	*		3462858	0					
ANR	3463355	Identifier	p		3462858	1					
ANR	3463356	ExpressionStatement	"retval = not ^ ( sign * rd_character ( p , valid , print_errors ) )"	388:6:9061:9122	3462858	42	True				
ANR	3463357	AssignmentExpression	"retval = not ^ ( sign * rd_character ( p , valid , print_errors ) )"		3462858	0		=			
ANR	3463358	Identifier	retval		3462858	0					
ANR	3463359	ExclusiveOrExpression	"not ^ ( sign * rd_character ( p , valid , print_errors ) )"		3462858	1		^			
ANR	3463360	Identifier	not		3462858	0					
ANR	3463361	MultiplicativeExpression	"sign * rd_character ( p , valid , print_errors )"		3462858	1		*			
ANR	3463362	Identifier	sign		3462858	0					
ANR	3463363	CallExpression	"rd_character ( p , valid , print_errors )"		3462858	1					
ANR	3463364	Callee	rd_character		3462858	0					
ANR	3463365	Identifier	rd_character		3462858	0					
ANR	3463366	ArgumentList	p		3462858	1					
ANR	3463367	Argument	p		3462858	0					
ANR	3463368	Identifier	p		3462858	0					
ANR	3463369	Argument	valid		3462858	1					
ANR	3463370	Identifier	valid		3462858	0					
ANR	3463371	Argument	print_errors		3462858	2					
ANR	3463372	Identifier	print_errors		3462858	0					
ANR	3463373	IfStatement	if ( * * p != quote )		3462858	43					
ANR	3463374	Condition	* * p != quote	389:10:9134:9145	3462858	0	True				
ANR	3463375	EqualityExpression	* * p != quote		3462858	0		!=			
ANR	3463376	UnaryOperationExpression	* * p		3462858	0					
ANR	3463377	UnaryOperator	*		3462858	0					
ANR	3463378	UnaryOperationExpression	* p		3462858	1					
ANR	3463379	UnaryOperator	*		3462858	0					
ANR	3463380	Identifier	p		3462858	1					
ANR	3463381	Identifier	quote		3462858	1					
ANR	3463382	CompoundStatement		109:1:2210:2210	3462858	1					
ANR	3463383	IfStatement	if ( valid )		3462858	0					
ANR	3463384	Condition	valid	391:7:9158:9162	3462858	0	True				
ANR	3463385	Identifier	valid		3462858	0					
ANR	3463386	ExpressionStatement	* valid = 0	392:5:9170:9180	3462858	1	True				
ANR	3463387	AssignmentExpression	* valid = 0		3462858	0		=			
ANR	3463388	UnaryOperationExpression	* valid		3462858	0					
ANR	3463389	UnaryOperator	*		3462858	0					
ANR	3463390	Identifier	valid		3462858	1					
ANR	3463391	PrimaryExpression	0		3462858	1					
ANR	3463392	ElseStatement	else		3462858	0					
ANR	3463393	IfStatement	if ( print_errors )		3462858	0					
ANR	3463394	Condition	print_errors	393:12:9194:9205	3462858	0	True				
ANR	3463395	Identifier	print_errors		3462858	0					
ANR	3463396	ExpressionStatement	"printerr ( 1 , ""missing closing quote (%c)\\n"" , quote )"	394:5:9213:9264	3462858	1	True				
ANR	3463397	CallExpression	"printerr ( 1 , ""missing closing quote (%c)\\n"" , quote )"		3462858	0					
ANR	3463398	Callee	printerr		3462858	0					
ANR	3463399	Identifier	printerr		3462858	0					
ANR	3463400	ArgumentList	1		3462858	1					
ANR	3463401	Argument	1		3462858	0					
ANR	3463402	PrimaryExpression	1		3462858	0					
ANR	3463403	Argument	"""missing closing quote (%c)\\n"""		3462858	1					
ANR	3463404	PrimaryExpression	"""missing closing quote (%c)\\n"""		3462858	0					
ANR	3463405	Argument	quote		3462858	2					
ANR	3463406	Identifier	quote		3462858	0					
ANR	3463407	ReturnStatement	return 0 ;	395:3:9269:9277	3462858	1	True				
ANR	3463408	PrimaryExpression	0		3462858	0					
ANR	3463409	ExpressionStatement	++ * p	397:6:9288:9292	3462858	44	True				
ANR	3463410	UnaryExpression	++ * p		3462858	0					
ANR	3463411	IncDec	++		3462858	0					
ANR	3463412	UnaryOperationExpression	* p		3462858	1					
ANR	3463413	UnaryOperator	*		3462858	0					
ANR	3463414	Identifier	p		3462858	1					
ANR	3463415	ReturnStatement	return retval ;	398:6:9300:9313	3462858	45	True				
ANR	3463416	Identifier	retval		3462858	0					
ANR	3463417	Label	case '@' :	399:4:9319:9327	3462858	46	True				
ANR	3463418	ReturnStatement	"return not ^ ( sign * rd_otherbasenumber ( p , valid , print_errors ) ) ;"	400:6:9335:9400	3462858	47	True				
ANR	3463419	ExclusiveOrExpression	"not ^ ( sign * rd_otherbasenumber ( p , valid , print_errors ) )"		3462858	0		^			
ANR	3463420	Identifier	not		3462858	0					
ANR	3463421	MultiplicativeExpression	"sign * rd_otherbasenumber ( p , valid , print_errors )"		3462858	1		*			
ANR	3463422	Identifier	sign		3462858	0					
ANR	3463423	CallExpression	"rd_otherbasenumber ( p , valid , print_errors )"		3462858	1					
ANR	3463424	Callee	rd_otherbasenumber		3462858	0					
ANR	3463425	Identifier	rd_otherbasenumber		3462858	0					
ANR	3463426	ArgumentList	p		3462858	1					
ANR	3463427	Argument	p		3462858	0					
ANR	3463428	Identifier	p		3462858	0					
ANR	3463429	Argument	valid		3462858	1					
ANR	3463430	Identifier	valid		3462858	0					
ANR	3463431	Argument	print_errors		3462858	2					
ANR	3463432	Identifier	print_errors		3462858	0					
ANR	3463433	Label	case '?' :	401:4:9406:9414	3462858	48	True				
ANR	3463434	ExpressionStatement	"rd_label ( p , & exist , NULL , level , 0 )"	402:6:9422:9458	3462858	49	True				
ANR	3463435	CallExpression	"rd_label ( p , & exist , NULL , level , 0 )"		3462858	0					
ANR	3463436	Callee	rd_label		3462858	0					
ANR	3463437	Identifier	rd_label		3462858	0					
ANR	3463438	ArgumentList	p		3462858	1					
ANR	3463439	Argument	p		3462858	0					
ANR	3463440	Identifier	p		3462858	0					
ANR	3463441	Argument	& exist		3462858	1					
ANR	3463442	UnaryOperationExpression	& exist		3462858	0					
ANR	3463443	UnaryOperator	&		3462858	0					
ANR	3463444	Identifier	exist		3462858	1					
ANR	3463445	Argument	NULL		3462858	2					
ANR	3463446	Identifier	NULL		3462858	0					
ANR	3463447	Argument	level		3462858	3					
ANR	3463448	Identifier	level		3462858	0					
ANR	3463449	Argument	0		3462858	4					
ANR	3463450	PrimaryExpression	0		3462858	0					
ANR	3463451	ReturnStatement	return not ^ ( sign * exist ) ;	403:6:9466:9493	3462858	50	True				
ANR	3463452	ExclusiveOrExpression	not ^ ( sign * exist )		3462858	0		^			
ANR	3463453	Identifier	not		3462858	0					
ANR	3463454	MultiplicativeExpression	sign * exist		3462858	1		*			
ANR	3463455	Identifier	sign		3462858	0					
ANR	3463456	Identifier	exist		3462858	1					
ANR	3463457	Label	case '&' :	404:4:9499:9507	3462858	51	True				
ANR	3463458	CompoundStatement		124:6:2576:2576	3462858	52					
ANR	3463459	ExpressionStatement	++ * p	406:1:9518:9522	3462858	0	True				
ANR	3463460	UnaryExpression	++ * p		3462858	0					
ANR	3463461	IncDec	++		3462858	0					
ANR	3463462	UnaryOperationExpression	* p		3462858	1					
ANR	3463463	UnaryOperator	*		3462858	0					
ANR	3463464	Identifier	p		3462858	1					
ANR	3463465	SwitchStatement	switch ( * * p )		3462858	1					
ANR	3463466	Condition	* * p	407:9:9533:9535	3462858	0	True				
ANR	3463467	UnaryOperationExpression	* * p		3462858	0					
ANR	3463468	UnaryOperator	*		3462858	0					
ANR	3463469	UnaryOperationExpression	* p		3462858	1					
ANR	3463470	UnaryOperator	*		3462858	0					
ANR	3463471	Identifier	p		3462858	1					
ANR	3463472	CompoundStatement		127:3:2602:2602	3462858	1					
ANR	3463473	Label	case 'h' :	409:3:9546:9554	3462858	0	True				
ANR	3463474	Label	case 'H' :	410:3:9559:9567	3462858	1	True				
ANR	3463475	ExpressionStatement	base = 0x10	411:5:9574:9585	3462858	2	True				
ANR	3463476	AssignmentExpression	base = 0x10		3462858	0		=			
ANR	3463477	Identifier	base		3462858	0					
ANR	3463478	PrimaryExpression	0x10		3462858	1					
ANR	3463479	BreakStatement	break ;	412:5:9592:9597	3462858	3	True				
ANR	3463480	Label	case 'o' :	413:3:9602:9610	3462858	4	True				
ANR	3463481	Label	case 'O' :	414:3:9615:9623	3462858	5	True				
ANR	3463482	ExpressionStatement	base = 010	415:5:9630:9640	3462858	6	True				
ANR	3463483	AssignmentExpression	base = 010		3462858	0		=			
ANR	3463484	Identifier	base		3462858	0					
ANR	3463485	PrimaryExpression	010		3462858	1					
ANR	3463486	BreakStatement	break ;	416:5:9647:9652	3462858	7	True				
ANR	3463487	Label	case 'b' :	417:3:9657:9665	3462858	8	True				
ANR	3463488	Label	case 'B' :	418:3:9670:9678	3462858	9	True				
ANR	3463489	ExpressionStatement	base = 2	419:5:9685:9693	3462858	10	True				
ANR	3463490	AssignmentExpression	base = 2		3462858	0		=			
ANR	3463491	Identifier	base		3462858	0					
ANR	3463492	PrimaryExpression	2		3462858	1					
ANR	3463493	BreakStatement	break ;	420:5:9700:9705	3462858	11	True				
ANR	3463494	Label	default :	421:3:9710:9717	3462858	12	True				
ANR	3463495	Identifier	default		3462858	0					
ANR	3463496	IfStatement	if ( valid )		3462858	13					
ANR	3463497	Condition	valid	422:9:9728:9732	3462858	0	True				
ANR	3463498	Identifier	valid		3462858	0					
ANR	3463499	ExpressionStatement	* valid = 0	423:7:9742:9752	3462858	1	True				
ANR	3463500	AssignmentExpression	* valid = 0		3462858	0		=			
ANR	3463501	UnaryOperationExpression	* valid		3462858	0					
ANR	3463502	UnaryOperator	*		3462858	0					
ANR	3463503	Identifier	valid		3462858	1					
ANR	3463504	PrimaryExpression	0		3462858	1					
ANR	3463505	ElseStatement	else		3462858	0					
ANR	3463506	IfStatement	if ( print_errors )		3462858	0					
ANR	3463507	Condition	print_errors	424:14:9768:9779	3462858	0	True				
ANR	3463508	Identifier	print_errors		3462858	0					
ANR	3463509	ExpressionStatement	"printerr ( 1 , ""invalid literal starting with &%c\\n"" , * * p )"	425:7:9789:9845	3462858	1	True				
ANR	3463510	CallExpression	"printerr ( 1 , ""invalid literal starting with &%c\\n"" , * * p )"		3462858	0					
ANR	3463511	Callee	printerr		3462858	0					
ANR	3463512	Identifier	printerr		3462858	0					
ANR	3463513	ArgumentList	1		3462858	1					
ANR	3463514	Argument	1		3462858	0					
ANR	3463515	PrimaryExpression	1		3462858	0					
ANR	3463516	Argument	"""invalid literal starting with &%c\\n"""		3462858	1					
ANR	3463517	PrimaryExpression	"""invalid literal starting with &%c\\n"""		3462858	0					
ANR	3463518	Argument	* * p		3462858	2					
ANR	3463519	UnaryOperationExpression	* * p		3462858	0					
ANR	3463520	UnaryOperator	*		3462858	0					
ANR	3463521	UnaryOperationExpression	* p		3462858	1					
ANR	3463522	UnaryOperator	*		3462858	0					
ANR	3463523	Identifier	p		3462858	1					
ANR	3463524	ReturnStatement	return 0 ;	426:5:9852:9860	3462858	14	True				
ANR	3463525	PrimaryExpression	0		3462858	0					
ANR	3463526	ExpressionStatement	++ * p	428:1:9868:9872	3462858	2	True				
ANR	3463527	UnaryExpression	++ * p		3462858	0					
ANR	3463528	IncDec	++		3462858	0					
ANR	3463529	UnaryOperationExpression	* p		3462858	1					
ANR	3463530	UnaryOperator	*		3462858	0					
ANR	3463531	Identifier	p		3462858	1					
ANR	3463532	ReturnStatement	"return not ^ ( sign * rd_number ( p , NULL , base ) ) ;"	429:1:9875:9922	3462858	3	True				
ANR	3463533	ExclusiveOrExpression	"not ^ ( sign * rd_number ( p , NULL , base ) )"		3462858	0		^			
ANR	3463534	Identifier	not		3462858	0					
ANR	3463535	MultiplicativeExpression	"sign * rd_number ( p , NULL , base )"		3462858	1		*			
ANR	3463536	Identifier	sign		3462858	0					
ANR	3463537	CallExpression	"rd_number ( p , NULL , base )"		3462858	1					
ANR	3463538	Callee	rd_number		3462858	0					
ANR	3463539	Identifier	rd_number		3462858	0					
ANR	3463540	ArgumentList	p		3462858	1					
ANR	3463541	Argument	p		3462858	0					
ANR	3463542	Identifier	p		3462858	0					
ANR	3463543	Argument	NULL		3462858	1					
ANR	3463544	Identifier	NULL		3462858	0					
ANR	3463545	Argument	base		3462858	2					
ANR	3463546	Identifier	base		3462858	0					
ANR	3463547	Label	default :	431:4:9936:9943	3462858	53	True				
ANR	3463548	Identifier	default		3462858	0					
ANR	3463549	CompoundStatement		152:1:3015:3024	3462858	54					
ANR	3463550	IdentifierDeclStatement	int value ;	433:1:9954:9963	3462858	0	True				
ANR	3463551	IdentifierDecl	value		3462858	0					
ANR	3463552	IdentifierDeclType	int		3462858	0					
ANR	3463553	Identifier	value		3462858	1					
ANR	3463554	ExpressionStatement	exist = 1	434:1:9966:9975	3462858	1	True				
ANR	3463555	AssignmentExpression	exist = 1		3462858	0		=			
ANR	3463556	Identifier	exist		3462858	0					
ANR	3463557	PrimaryExpression	1		3462858	1					
ANR	3463558	ExpressionStatement	"value = rd_label ( p , valid ? & exist : NULL , NULL , level , print_errors )"	435:1:9978:10048	3462858	2	True				
ANR	3463559	AssignmentExpression	"value = rd_label ( p , valid ? & exist : NULL , NULL , level , print_errors )"		3462858	0		=			
ANR	3463560	Identifier	value		3462858	0					
ANR	3463561	CallExpression	"rd_label ( p , valid ? & exist : NULL , NULL , level , print_errors )"		3462858	1					
ANR	3463562	Callee	rd_label		3462858	0					
ANR	3463563	Identifier	rd_label		3462858	0					
ANR	3463564	ArgumentList	p		3462858	1					
ANR	3463565	Argument	p		3462858	0					
ANR	3463566	Identifier	p		3462858	0					
ANR	3463567	Argument	valid ? & exist : NULL		3462858	1					
ANR	3463568	ConditionalExpression	valid ? & exist : NULL		3462858	0					
ANR	3463569	Condition	valid		3462858	0					
ANR	3463570	Identifier	valid		3462858	0					
ANR	3463571	UnaryOperationExpression	& exist		3462858	1					
ANR	3463572	UnaryOperator	&		3462858	0					
ANR	3463573	Identifier	exist		3462858	1					
ANR	3463574	Identifier	NULL		3462858	2					
ANR	3463575	Argument	NULL		3462858	2					
ANR	3463576	Identifier	NULL		3462858	0					
ANR	3463577	Argument	level		3462858	3					
ANR	3463578	Identifier	level		3462858	0					
ANR	3463579	Argument	print_errors		3462858	4					
ANR	3463580	Identifier	print_errors		3462858	0					
ANR	3463581	IfStatement	if ( ! exist )		3462858	3					
ANR	3463582	Condition	! exist	436:5:10055:10060	3462858	0	True				
ANR	3463583	UnaryOperationExpression	! exist		3462858	0					
ANR	3463584	UnaryOperator	!		3462858	0					
ANR	3463585	Identifier	exist		3462858	1					
ANR	3463586	ExpressionStatement	* valid = 0	437:3:10066:10076	3462858	1	True				
ANR	3463587	AssignmentExpression	* valid = 0		3462858	0		=			
ANR	3463588	UnaryOperationExpression	* valid		3462858	0					
ANR	3463589	UnaryOperator	*		3462858	0					
ANR	3463590	Identifier	valid		3462858	1					
ANR	3463591	PrimaryExpression	0		3462858	1					
ANR	3463592	ReturnStatement	return not ^ ( sign * value ) ;	438:1:10079:10106	3462858	4	True				
ANR	3463593	ExclusiveOrExpression	not ^ ( sign * value )		3462858	0		^			
ANR	3463594	Identifier	not		3462858	0					
ANR	3463595	MultiplicativeExpression	sign * value		3462858	1		*			
ANR	3463596	Identifier	sign		3462858	0					
ANR	3463597	Identifier	value		3462858	1					
ANR	3463598	ReturnType	static int		3462858	1					
ANR	3463599	Identifier	rd_value		3462858	2					
ANR	3463600	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3462858	3					
ANR	3463601	Parameter	const char * * p	281:10:6869:6882	3462858	0	True				
ANR	3463602	ParameterType	const char * *		3462858	0					
ANR	3463603	Identifier	p		3462858	1					
ANR	3463604	Parameter	int * valid	281:26:6885:6894	3462858	1	True				
ANR	3463605	ParameterType	int *		3462858	0					
ANR	3463606	Identifier	valid		3462858	1					
ANR	3463607	Parameter	int level	281:38:6897:6905	3462858	2	True				
ANR	3463608	ParameterType	int		3462858	0					
ANR	3463609	Identifier	level		3462858	1					
ANR	3463610	Parameter	int * check	281:49:6908:6917	3462858	3	True				
ANR	3463611	ParameterType	int *		3462858	0					
ANR	3463612	Identifier	check		3462858	1					
ANR	3463613	Parameter	int print_errors	281:61:6920:6935	3462858	4	True				
ANR	3463614	ParameterType	int		3462858	0					
ANR	3463615	Identifier	print_errors		3462858	1					
ANR	3463616	CFGEntryNode	ENTRY		3462858		True				
ANR	3463617	CFGExitNode	EXIT		3462858		True				
ANR	3463618	Symbol	p0		3462858						
ANR	3463619	Symbol	* sp		3462858						
ANR	3463620	Symbol	p1		3462858						
ANR	3463621	Symbol	rd_number		3462858						
ANR	3463622	Symbol	p2		3462858						
ANR	3463623	Symbol	stack		3462858						
ANR	3463624	Symbol	rd_otherbasenumber		3462858						
ANR	3463625	Symbol	sign		3462858						
ANR	3463626	Symbol	strchr		3462858						
ANR	3463627	Symbol	* valid		3462858						
ANR	3463628	Symbol	dummy_check		3462858						
ANR	3463629	Symbol	valid		3462858						
ANR	3463630	Symbol	not		3462858						
ANR	3463631	Symbol	quote		3462858						
ANR	3463632	Symbol	& dummy_check		3462858						
ANR	3463633	Symbol	* check		3462858						
ANR	3463634	Symbol	rd_label		3462858						
ANR	3463635	Symbol	print_errors		3462858						
ANR	3463636	Symbol	stack [ sp ] . line		3462858						
ANR	3463637	Symbol	* * p		3462858						
ANR	3463638	Symbol	addr		3462858						
ANR	3463639	Symbol	sp		3462858						
ANR	3463640	Symbol	delspc		3462858						
ANR	3463641	Symbol	value		3462858						
ANR	3463642	Symbol	NULL		3462858						
ANR	3463643	Symbol	* p1		3462858						
ANR	3463644	Symbol	level		3462858						
ANR	3463645	Symbol	& p1		3462858						
ANR	3463646	Symbol	check		3462858						
ANR	3463647	Symbol	& p0		3462858						
ANR	3463648	Symbol	* p2		3462858						
ANR	3463649	Symbol	baseaddr		3462858						
ANR	3463650	Symbol	stderr		3462858						
ANR	3463651	Symbol	& p2		3462858						
ANR	3463652	Symbol	retval		3462858						
ANR	3463653	Symbol	verbose		3462858						
ANR	3463654	Symbol	~not		3462858						
ANR	3463655	Symbol	do_rd_expr		3462858						
ANR	3463656	Symbol	p		3462858						
ANR	3463657	Symbol	exist		3462858						
ANR	3463658	Symbol	rd_character		3462858						
ANR	3463659	Symbol	& exist		3462858						
ANR	3463660	Symbol	v		3462858						
ANR	3463661	Symbol	* stack		3462858						
ANR	3463662	Symbol	* p		3462858						
ANR	3463663	Symbol	base		3462858						
ANR	3463664	Function	rd_factor	443:0:10125:11052							
ANR	3463665	FunctionDef	"rd_factor (const char * * p , int * valid , int level , int * check , int print_errors)"		3463664	0					
ANR	3463666	CompoundStatement		445:0:10216:11052	3463664	0					
ANR	3463667	IdentifierDeclStatement	int result ;	447:2:10259:10269	3463664	0	True				
ANR	3463668	IdentifierDecl	result		3463664	0					
ANR	3463669	IdentifierDeclType	int		3463664	0					
ANR	3463670	Identifier	result		3463664	1					
ANR	3463671	IfStatement	if ( verbose >= 6 )		3463664	1					
ANR	3463672	Condition	verbose >= 6	448:6:10277:10288	3463664	0	True				
ANR	3463673	RelationalExpression	verbose >= 6		3463664	0		>=			
ANR	3463674	Identifier	verbose		3463664	0					
ANR	3463675	PrimaryExpression	6		3463664	1					
ANR	3463676	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read factor (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	449:4:10295:10399	3463664	1	True				
ANR	3463677	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read factor (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3463664	0					
ANR	3463678	Callee	fprintf		3463664	0					
ANR	3463679	Identifier	fprintf		3463664	0					
ANR	3463680	ArgumentList	stderr		3463664	1					
ANR	3463681	Argument	stderr		3463664	0					
ANR	3463682	Identifier	stderr		3463664	0					
ANR	3463683	Argument	"""%5d (0x%04x): Starting to read factor (string=%s).\\n"""		3463664	1					
ANR	3463684	PrimaryExpression	"""%5d (0x%04x): Starting to read factor (string=%s).\\n"""		3463664	0					
ANR	3463685	Argument	stack [ sp ] . line		3463664	2					
ANR	3463686	MemberAccess	stack [ sp ] . line		3463664	0					
ANR	3463687	ArrayIndexing	stack [ sp ]		3463664	0					
ANR	3463688	Identifier	stack		3463664	0					
ANR	3463689	Identifier	sp		3463664	1					
ANR	3463690	Identifier	line		3463664	1					
ANR	3463691	Argument	addr		3463664	3					
ANR	3463692	Identifier	addr		3463664	0					
ANR	3463693	Argument	* p		3463664	4					
ANR	3463694	UnaryOperationExpression	* p		3463664	0					
ANR	3463695	UnaryOperator	*		3463664	0					
ANR	3463696	Identifier	p		3463664	1					
ANR	3463697	ExpressionStatement	"result = rd_value ( p , valid , level , check , print_errors )"	451:2:10403:10459	3463664	2	True				
ANR	3463698	AssignmentExpression	"result = rd_value ( p , valid , level , check , print_errors )"		3463664	0		=			
ANR	3463699	Identifier	result		3463664	0					
ANR	3463700	CallExpression	"rd_value ( p , valid , level , check , print_errors )"		3463664	1					
ANR	3463701	Callee	rd_value		3463664	0					
ANR	3463702	Identifier	rd_value		3463664	0					
ANR	3463703	ArgumentList	p		3463664	1					
ANR	3463704	Argument	p		3463664	0					
ANR	3463705	Identifier	p		3463664	0					
ANR	3463706	Argument	valid		3463664	1					
ANR	3463707	Identifier	valid		3463664	0					
ANR	3463708	Argument	level		3463664	2					
ANR	3463709	Identifier	level		3463664	0					
ANR	3463710	Argument	check		3463664	3					
ANR	3463711	Identifier	check		3463664	0					
ANR	3463712	Argument	print_errors		3463664	4					
ANR	3463713	Identifier	print_errors		3463664	0					
ANR	3463714	ExpressionStatement	* p = delspc ( * p )	452:2:10463:10479	3463664	3	True				
ANR	3463715	AssignmentExpression	* p = delspc ( * p )		3463664	0		=			
ANR	3463716	UnaryOperationExpression	* p		3463664	0					
ANR	3463717	UnaryOperator	*		3463664	0					
ANR	3463718	Identifier	p		3463664	1					
ANR	3463719	CallExpression	delspc ( * p )		3463664	1					
ANR	3463720	Callee	delspc		3463664	0					
ANR	3463721	Identifier	delspc		3463664	0					
ANR	3463722	ArgumentList	* p		3463664	1					
ANR	3463723	Argument	* p		3463664	0					
ANR	3463724	UnaryOperationExpression	* p		3463664	0					
ANR	3463725	UnaryOperator	*		3463664	0					
ANR	3463726	Identifier	p		3463664	1					
ANR	3463727	WhileStatement	while ( * * p == '*' || * * p == '/' )		3463664	4					
ANR	3463728	Condition	* * p == '*' || * * p == '/'	453:9:10490:10513	3463664	0	True				
ANR	3463729	OrExpression	* * p == '*' || * * p == '/'		3463664	0		||			
ANR	3463730	EqualityExpression	* * p == '*'		3463664	0		==			
ANR	3463731	UnaryOperationExpression	* * p		3463664	0					
ANR	3463732	UnaryOperator	*		3463664	0					
ANR	3463733	UnaryOperationExpression	* p		3463664	1					
ANR	3463734	UnaryOperator	*		3463664	0					
ANR	3463735	Identifier	p		3463664	1					
ANR	3463736	PrimaryExpression	'*'		3463664	1					
ANR	3463737	EqualityExpression	* * p == '/'		3463664	1		==			
ANR	3463738	UnaryOperationExpression	* * p		3463664	0					
ANR	3463739	UnaryOperator	*		3463664	0					
ANR	3463740	UnaryOperationExpression	* p		3463664	1					
ANR	3463741	UnaryOperator	*		3463664	0					
ANR	3463742	Identifier	p		3463664	1					
ANR	3463743	PrimaryExpression	'/'		3463664	1					
ANR	3463744	CompoundStatement		10:4:303:303	3463664	1					
ANR	3463745	ExpressionStatement	* check = 0	455:6:10528:10538	3463664	0	True				
ANR	3463746	AssignmentExpression	* check = 0		3463664	0		=			
ANR	3463747	UnaryOperationExpression	* check		3463664	0					
ANR	3463748	UnaryOperator	*		3463664	0					
ANR	3463749	Identifier	check		3463664	1					
ANR	3463750	PrimaryExpression	0		3463664	1					
ANR	3463751	IfStatement	if ( * * p == '*' )		3463664	1					
ANR	3463752	Condition	* * p == '*'	456:10:10550:10559	3463664	0	True				
ANR	3463753	EqualityExpression	* * p == '*'		3463664	0		==			
ANR	3463754	UnaryOperationExpression	* * p		3463664	0					
ANR	3463755	UnaryOperator	*		3463664	0					
ANR	3463756	UnaryOperationExpression	* p		3463664	1					
ANR	3463757	UnaryOperator	*		3463664	0					
ANR	3463758	Identifier	p		3463664	1					
ANR	3463759	PrimaryExpression	'*'		3463664	1					
ANR	3463760	CompoundStatement		13:1:346:346	3463664	1					
ANR	3463761	ExpressionStatement	( * p ) ++	458:3:10568:10574	3463664	0	True				
ANR	3463762	PostIncDecOperationExpression	( * p ) ++		3463664	0					
ANR	3463763	UnaryOperationExpression	* p		3463664	0					
ANR	3463764	UnaryOperator	*		3463664	0					
ANR	3463765	Identifier	p		3463664	1					
ANR	3463766	IncDec	++		3463664	1					
ANR	3463767	ExpressionStatement	"result *= rd_value ( p , valid , level , check , print_errors )"	459:3:10579:10636	3463664	1	True				
ANR	3463768	AssignmentExpression	"result *= rd_value ( p , valid , level , check , print_errors )"		3463664	0		*=			
ANR	3463769	Identifier	result		3463664	0					
ANR	3463770	CallExpression	"rd_value ( p , valid , level , check , print_errors )"		3463664	1					
ANR	3463771	Callee	rd_value		3463664	0					
ANR	3463772	Identifier	rd_value		3463664	0					
ANR	3463773	ArgumentList	p		3463664	1					
ANR	3463774	Argument	p		3463664	0					
ANR	3463775	Identifier	p		3463664	0					
ANR	3463776	Argument	valid		3463664	1					
ANR	3463777	Identifier	valid		3463664	0					
ANR	3463778	Argument	level		3463664	2					
ANR	3463779	Identifier	level		3463664	0					
ANR	3463780	Argument	check		3463664	3					
ANR	3463781	Identifier	check		3463664	0					
ANR	3463782	Argument	print_errors		3463664	4					
ANR	3463783	Identifier	print_errors		3463664	0					
ANR	3463784	ElseStatement	else		3463664	0					
ANR	3463785	IfStatement	if ( * * p == '/' )		3463664	0					
ANR	3463786	Condition	* * p == '/'	461:15:10656:10665	3463664	0	True				
ANR	3463787	EqualityExpression	* * p == '/'		3463664	0		==			
ANR	3463788	UnaryOperationExpression	* * p		3463664	0					
ANR	3463789	UnaryOperator	*		3463664	0					
ANR	3463790	UnaryOperationExpression	* p		3463664	1					
ANR	3463791	UnaryOperator	*		3463664	0					
ANR	3463792	Identifier	p		3463664	1					
ANR	3463793	PrimaryExpression	'/'		3463664	1					
ANR	3463794	CompoundStatement		20:6:471:530	3463664	1					
ANR	3463795	ExpressionStatement	( * p ) ++	463:3:10674:10680	3463664	0	True				
ANR	3463796	PostIncDecOperationExpression	( * p ) ++		3463664	0					
ANR	3463797	UnaryOperationExpression	* p		3463664	0					
ANR	3463798	UnaryOperator	*		3463664	0					
ANR	3463799	Identifier	p		3463664	1					
ANR	3463800	IncDec	++		3463664	1					
ANR	3463801	IdentifierDeclStatement	"int value = rd_value ( p , valid , level , check , print_errors ) ;"	464:6:10688:10747	3463664	1	True				
ANR	3463802	IdentifierDecl	"value = rd_value ( p , valid , level , check , print_errors )"		3463664	0					
ANR	3463803	IdentifierDeclType	int		3463664	0					
ANR	3463804	Identifier	value		3463664	1					
ANR	3463805	AssignmentExpression	"value = rd_value ( p , valid , level , check , print_errors )"		3463664	2		=			
ANR	3463806	Identifier	value		3463664	0					
ANR	3463807	CallExpression	"rd_value ( p , valid , level , check , print_errors )"		3463664	1					
ANR	3463808	Callee	rd_value		3463664	0					
ANR	3463809	Identifier	rd_value		3463664	0					
ANR	3463810	ArgumentList	p		3463664	1					
ANR	3463811	Argument	p		3463664	0					
ANR	3463812	Identifier	p		3463664	0					
ANR	3463813	Argument	valid		3463664	1					
ANR	3463814	Identifier	valid		3463664	0					
ANR	3463815	Argument	level		3463664	2					
ANR	3463816	Identifier	level		3463664	0					
ANR	3463817	Argument	check		3463664	3					
ANR	3463818	Identifier	check		3463664	0					
ANR	3463819	Argument	print_errors		3463664	4					
ANR	3463820	Identifier	print_errors		3463664	0					
ANR	3463821	IfStatement	if ( value == 0 )		3463664	2					
ANR	3463822	Condition	value == 0	465:10:10759:10768	3463664	0	True				
ANR	3463823	EqualityExpression	value == 0		3463664	0		==			
ANR	3463824	Identifier	value		3463664	0					
ANR	3463825	PrimaryExpression	0		3463664	1					
ANR	3463826	CompoundStatement		21:21:553:553	3463664	1					
ANR	3463827	ExpressionStatement	"printerr ( 1 , ""division by zero\\n"" )"	466:8:10781:10815	3463664	0	True				
ANR	3463828	CallExpression	"printerr ( 1 , ""division by zero\\n"" )"		3463664	0					
ANR	3463829	Callee	printerr		3463664	0					
ANR	3463830	Identifier	printerr		3463664	0					
ANR	3463831	ArgumentList	1		3463664	1					
ANR	3463832	Argument	1		3463664	0					
ANR	3463833	PrimaryExpression	1		3463664	0					
ANR	3463834	Argument	"""division by zero\\n"""		3463664	1					
ANR	3463835	PrimaryExpression	"""division by zero\\n"""		3463664	0					
ANR	3463836	ReturnStatement	return - 1 ;	467:8:10825:10834	3463664	1	True				
ANR	3463837	UnaryOperationExpression	- 1		3463664	0					
ANR	3463838	UnaryOperator	-		3463664	0					
ANR	3463839	PrimaryExpression	1		3463664	1					
ANR	3463840	ExpressionStatement	result /= value	469:6:10850:10865	3463664	3	True				
ANR	3463841	AssignmentExpression	result /= value		3463664	0		/=			
ANR	3463842	Identifier	result		3463664	0					
ANR	3463843	Identifier	value		3463664	1					
ANR	3463844	ExpressionStatement	* p = delspc ( * p )	471:6:10876:10892	3463664	2	True				
ANR	3463845	AssignmentExpression	* p = delspc ( * p )		3463664	0		=			
ANR	3463846	UnaryOperationExpression	* p		3463664	0					
ANR	3463847	UnaryOperator	*		3463664	0					
ANR	3463848	Identifier	p		3463664	1					
ANR	3463849	CallExpression	delspc ( * p )		3463664	1					
ANR	3463850	Callee	delspc		3463664	0					
ANR	3463851	Identifier	delspc		3463664	0					
ANR	3463852	ArgumentList	* p		3463664	1					
ANR	3463853	Argument	* p		3463664	0					
ANR	3463854	UnaryOperationExpression	* p		3463664	0					
ANR	3463855	UnaryOperator	*		3463664	0					
ANR	3463856	Identifier	p		3463664	1					
ANR	3463857	IfStatement	if ( verbose >= 7 )		3463664	5					
ANR	3463858	Condition	verbose >= 7	473:6:10906:10917	3463664	0	True				
ANR	3463859	RelationalExpression	verbose >= 7		3463664	0		>=			
ANR	3463860	Identifier	verbose		3463664	0					
ANR	3463861	PrimaryExpression	7		3463664	1					
ANR	3463862	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_factor returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	474:4:10924:11033	3463664	1	True				
ANR	3463863	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_factor returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3463664	0					
ANR	3463864	Callee	fprintf		3463664	0					
ANR	3463865	Identifier	fprintf		3463664	0					
ANR	3463866	ArgumentList	stderr		3463664	1					
ANR	3463867	Argument	stderr		3463664	0					
ANR	3463868	Identifier	stderr		3463664	0					
ANR	3463869	Argument	"""%5d (0x%04x): rd_factor returned %d (%04x).\\n"""		3463664	1					
ANR	3463870	PrimaryExpression	"""%5d (0x%04x): rd_factor returned %d (%04x).\\n"""		3463664	0					
ANR	3463871	Argument	stack [ sp ] . line		3463664	2					
ANR	3463872	MemberAccess	stack [ sp ] . line		3463664	0					
ANR	3463873	ArrayIndexing	stack [ sp ]		3463664	0					
ANR	3463874	Identifier	stack		3463664	0					
ANR	3463875	Identifier	sp		3463664	1					
ANR	3463876	Identifier	line		3463664	1					
ANR	3463877	Argument	addr		3463664	3					
ANR	3463878	Identifier	addr		3463664	0					
ANR	3463879	Argument	result		3463664	4					
ANR	3463880	Identifier	result		3463664	0					
ANR	3463881	Argument	result		3463664	5					
ANR	3463882	Identifier	result		3463664	0					
ANR	3463883	ReturnStatement	return result ;	476:2:11037:11050	3463664	6	True				
ANR	3463884	Identifier	result		3463664	0					
ANR	3463885	ReturnType	static int		3463664	1					
ANR	3463886	Identifier	rd_factor		3463664	2					
ANR	3463887	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3463664	3					
ANR	3463888	Parameter	const char * * p	444:11:10147:10160	3463664	0	True				
ANR	3463889	ParameterType	const char * *		3463664	0					
ANR	3463890	Identifier	p		3463664	1					
ANR	3463891	Parameter	int * valid	444:27:10163:10172	3463664	1	True				
ANR	3463892	ParameterType	int *		3463664	0					
ANR	3463893	Identifier	valid		3463664	1					
ANR	3463894	Parameter	int level	444:39:10175:10183	3463664	2	True				
ANR	3463895	ParameterType	int		3463664	0					
ANR	3463896	Identifier	level		3463664	1					
ANR	3463897	Parameter	int * check	444:50:10186:10195	3463664	3	True				
ANR	3463898	ParameterType	int *		3463664	0					
ANR	3463899	Identifier	check		3463664	1					
ANR	3463900	Parameter	int print_errors	444:62:10198:10213	3463664	4	True				
ANR	3463901	ParameterType	int		3463664	0					
ANR	3463902	Identifier	print_errors		3463664	1					
ANR	3463903	CFGEntryNode	ENTRY		3463664		True				
ANR	3463904	CFGExitNode	EXIT		3463664		True				
ANR	3463905	Symbol	* sp		3463664						
ANR	3463906	Symbol	stack		3463664						
ANR	3463907	Symbol	level		3463664						
ANR	3463908	Symbol	check		3463664						
ANR	3463909	Symbol	stderr		3463664						
ANR	3463910	Symbol	verbose		3463664						
ANR	3463911	Symbol	p		3463664						
ANR	3463912	Symbol	valid		3463664						
ANR	3463913	Symbol	result		3463664						
ANR	3463914	Symbol	* check		3463664						
ANR	3463915	Symbol	print_errors		3463664						
ANR	3463916	Symbol	* stack		3463664						
ANR	3463917	Symbol	stack [ sp ] . line		3463664						
ANR	3463918	Symbol	* p		3463664						
ANR	3463919	Symbol	rd_value		3463664						
ANR	3463920	Symbol	* * p		3463664						
ANR	3463921	Symbol	addr		3463664						
ANR	3463922	Symbol	sp		3463664						
ANR	3463923	Symbol	delspc		3463664						
ANR	3463924	Symbol	value		3463664						
ANR	3463925	Function	rd_term	479:0:11055:11854							
ANR	3463926	FunctionDef	"rd_term (const char * * p , int * valid , int level , int * check , int print_errors)"		3463925	0					
ANR	3463927	CompoundStatement		481:0:11144:11854	3463925	0					
ANR	3463928	IdentifierDeclStatement	int result ;	483:2:11185:11195	3463925	0	True				
ANR	3463929	IdentifierDecl	result		3463925	0					
ANR	3463930	IdentifierDeclType	int		3463925	0					
ANR	3463931	Identifier	result		3463925	1					
ANR	3463932	IfStatement	if ( verbose >= 6 )		3463925	1					
ANR	3463933	Condition	verbose >= 6	484:6:11203:11214	3463925	0	True				
ANR	3463934	RelationalExpression	verbose >= 6		3463925	0		>=			
ANR	3463935	Identifier	verbose		3463925	0					
ANR	3463936	PrimaryExpression	6		3463925	1					
ANR	3463937	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Starting to read term (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"	485:4:11221:11323	3463925	1	True				
ANR	3463938	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Starting to read term (string=%s).\\n"" , stack [ sp ] . line , addr , * p )"		3463925	0					
ANR	3463939	Callee	fprintf		3463925	0					
ANR	3463940	Identifier	fprintf		3463925	0					
ANR	3463941	ArgumentList	stderr		3463925	1					
ANR	3463942	Argument	stderr		3463925	0					
ANR	3463943	Identifier	stderr		3463925	0					
ANR	3463944	Argument	"""%5d (0x%04x): Starting to read term (string=%s).\\n"""		3463925	1					
ANR	3463945	PrimaryExpression	"""%5d (0x%04x): Starting to read term (string=%s).\\n"""		3463925	0					
ANR	3463946	Argument	stack [ sp ] . line		3463925	2					
ANR	3463947	MemberAccess	stack [ sp ] . line		3463925	0					
ANR	3463948	ArrayIndexing	stack [ sp ]		3463925	0					
ANR	3463949	Identifier	stack		3463925	0					
ANR	3463950	Identifier	sp		3463925	1					
ANR	3463951	Identifier	line		3463925	1					
ANR	3463952	Argument	addr		3463925	3					
ANR	3463953	Identifier	addr		3463925	0					
ANR	3463954	Argument	* p		3463925	4					
ANR	3463955	UnaryOperationExpression	* p		3463925	0					
ANR	3463956	UnaryOperator	*		3463925	0					
ANR	3463957	Identifier	p		3463925	1					
ANR	3463958	ExpressionStatement	"result = rd_factor ( p , valid , level , check , print_errors )"	487:2:11327:11384	3463925	2	True				
ANR	3463959	AssignmentExpression	"result = rd_factor ( p , valid , level , check , print_errors )"		3463925	0		=			
ANR	3463960	Identifier	result		3463925	0					
ANR	3463961	CallExpression	"rd_factor ( p , valid , level , check , print_errors )"		3463925	1					
ANR	3463962	Callee	rd_factor		3463925	0					
ANR	3463963	Identifier	rd_factor		3463925	0					
ANR	3463964	ArgumentList	p		3463925	1					
ANR	3463965	Argument	p		3463925	0					
ANR	3463966	Identifier	p		3463925	0					
ANR	3463967	Argument	valid		3463925	1					
ANR	3463968	Identifier	valid		3463925	0					
ANR	3463969	Argument	level		3463925	2					
ANR	3463970	Identifier	level		3463925	0					
ANR	3463971	Argument	check		3463925	3					
ANR	3463972	Identifier	check		3463925	0					
ANR	3463973	Argument	print_errors		3463925	4					
ANR	3463974	Identifier	print_errors		3463925	0					
ANR	3463975	ExpressionStatement	* p = delspc ( * p )	488:2:11388:11404	3463925	3	True				
ANR	3463976	AssignmentExpression	* p = delspc ( * p )		3463925	0		=			
ANR	3463977	UnaryOperationExpression	* p		3463925	0					
ANR	3463978	UnaryOperator	*		3463925	0					
ANR	3463979	Identifier	p		3463925	1					
ANR	3463980	CallExpression	delspc ( * p )		3463925	1					
ANR	3463981	Callee	delspc		3463925	0					
ANR	3463982	Identifier	delspc		3463925	0					
ANR	3463983	ArgumentList	* p		3463925	1					
ANR	3463984	Argument	* p		3463925	0					
ANR	3463985	UnaryOperationExpression	* p		3463925	0					
ANR	3463986	UnaryOperator	*		3463925	0					
ANR	3463987	Identifier	p		3463925	1					
ANR	3463988	WhileStatement	while ( * * p == '+' || * * p == '-' )		3463925	4					
ANR	3463989	Condition	* * p == '+' || * * p == '-'	489:9:11415:11438	3463925	0	True				
ANR	3463990	OrExpression	* * p == '+' || * * p == '-'		3463925	0		||			
ANR	3463991	EqualityExpression	* * p == '+'		3463925	0		==			
ANR	3463992	UnaryOperationExpression	* * p		3463925	0					
ANR	3463993	UnaryOperator	*		3463925	0					
ANR	3463994	UnaryOperationExpression	* p		3463925	1					
ANR	3463995	UnaryOperator	*		3463925	0					
ANR	3463996	Identifier	p		3463925	1					
ANR	3463997	PrimaryExpression	'+'		3463925	1					
ANR	3463998	EqualityExpression	* * p == '-'		3463925	1		==			
ANR	3463999	UnaryOperationExpression	* * p		3463925	0					
ANR	3464000	UnaryOperator	*		3463925	0					
ANR	3464001	UnaryOperationExpression	* p		3463925	1					
ANR	3464002	UnaryOperator	*		3463925	0					
ANR	3464003	Identifier	p		3463925	1					
ANR	3464004	PrimaryExpression	'-'		3463925	1					
ANR	3464005	CompoundStatement		10:4:300:300	3463925	1					
ANR	3464006	ExpressionStatement	* check = 0	491:6:11453:11463	3463925	0	True				
ANR	3464007	AssignmentExpression	* check = 0		3463925	0		=			
ANR	3464008	UnaryOperationExpression	* check		3463925	0					
ANR	3464009	UnaryOperator	*		3463925	0					
ANR	3464010	Identifier	check		3463925	1					
ANR	3464011	PrimaryExpression	0		3463925	1					
ANR	3464012	IfStatement	if ( * * p == '+' )		3463925	1					
ANR	3464013	Condition	* * p == '+'	492:10:11475:11484	3463925	0	True				
ANR	3464014	EqualityExpression	* * p == '+'		3463925	0		==			
ANR	3464015	UnaryOperationExpression	* * p		3463925	0					
ANR	3464016	UnaryOperator	*		3463925	0					
ANR	3464017	UnaryOperationExpression	* p		3463925	1					
ANR	3464018	UnaryOperator	*		3463925	0					
ANR	3464019	Identifier	p		3463925	1					
ANR	3464020	PrimaryExpression	'+'		3463925	1					
ANR	3464021	CompoundStatement		13:1:343:343	3463925	1					
ANR	3464022	ExpressionStatement	( * p ) ++	494:3:11493:11499	3463925	0	True				
ANR	3464023	PostIncDecOperationExpression	( * p ) ++		3463925	0					
ANR	3464024	UnaryOperationExpression	* p		3463925	0					
ANR	3464025	UnaryOperator	*		3463925	0					
ANR	3464026	Identifier	p		3463925	1					
ANR	3464027	IncDec	++		3463925	1					
ANR	3464028	ExpressionStatement	"result += rd_factor ( p , valid , level , check , print_errors )"	495:3:11504:11562	3463925	1	True				
ANR	3464029	AssignmentExpression	"result += rd_factor ( p , valid , level , check , print_errors )"		3463925	0		+=			
ANR	3464030	Identifier	result		3463925	0					
ANR	3464031	CallExpression	"rd_factor ( p , valid , level , check , print_errors )"		3463925	1					
ANR	3464032	Callee	rd_factor		3463925	0					
ANR	3464033	Identifier	rd_factor		3463925	0					
ANR	3464034	ArgumentList	p		3463925	1					
ANR	3464035	Argument	p		3463925	0					
ANR	3464036	Identifier	p		3463925	0					
ANR	3464037	Argument	valid		3463925	1					
ANR	3464038	Identifier	valid		3463925	0					
ANR	3464039	Argument	level		3463925	2					
ANR	3464040	Identifier	level		3463925	0					
ANR	3464041	Argument	check		3463925	3					
ANR	3464042	Identifier	check		3463925	0					
ANR	3464043	Argument	print_errors		3463925	4					
ANR	3464044	Identifier	print_errors		3463925	0					
ANR	3464045	ElseStatement	else		3463925	0					
ANR	3464046	IfStatement	if ( * * p == '-' )		3463925	0					
ANR	3464047	Condition	* * p == '-'	497:15:11582:11591	3463925	0	True				
ANR	3464048	EqualityExpression	* * p == '-'		3463925	0		==			
ANR	3464049	UnaryOperationExpression	* * p		3463925	0					
ANR	3464050	UnaryOperator	*		3463925	0					
ANR	3464051	UnaryOperationExpression	* p		3463925	1					
ANR	3464052	UnaryOperator	*		3463925	0					
ANR	3464053	Identifier	p		3463925	1					
ANR	3464054	PrimaryExpression	'-'		3463925	1					
ANR	3464055	CompoundStatement		18:1:450:450	3463925	1					
ANR	3464056	ExpressionStatement	( * p ) ++	499:3:11600:11606	3463925	0	True				
ANR	3464057	PostIncDecOperationExpression	( * p ) ++		3463925	0					
ANR	3464058	UnaryOperationExpression	* p		3463925	0					
ANR	3464059	UnaryOperator	*		3463925	0					
ANR	3464060	Identifier	p		3463925	1					
ANR	3464061	IncDec	++		3463925	1					
ANR	3464062	ExpressionStatement	"result -= rd_factor ( p , valid , level , check , print_errors )"	500:3:11611:11669	3463925	1	True				
ANR	3464063	AssignmentExpression	"result -= rd_factor ( p , valid , level , check , print_errors )"		3463925	0		-=			
ANR	3464064	Identifier	result		3463925	0					
ANR	3464065	CallExpression	"rd_factor ( p , valid , level , check , print_errors )"		3463925	1					
ANR	3464066	Callee	rd_factor		3463925	0					
ANR	3464067	Identifier	rd_factor		3463925	0					
ANR	3464068	ArgumentList	p		3463925	1					
ANR	3464069	Argument	p		3463925	0					
ANR	3464070	Identifier	p		3463925	0					
ANR	3464071	Argument	valid		3463925	1					
ANR	3464072	Identifier	valid		3463925	0					
ANR	3464073	Argument	level		3463925	2					
ANR	3464074	Identifier	level		3463925	0					
ANR	3464075	Argument	check		3463925	3					
ANR	3464076	Identifier	check		3463925	0					
ANR	3464077	Argument	print_errors		3463925	4					
ANR	3464078	Identifier	print_errors		3463925	0					
ANR	3464079	ExpressionStatement	* p = delspc ( * p )	502:6:11680:11696	3463925	2	True				
ANR	3464080	AssignmentExpression	* p = delspc ( * p )		3463925	0		=			
ANR	3464081	UnaryOperationExpression	* p		3463925	0					
ANR	3464082	UnaryOperator	*		3463925	0					
ANR	3464083	Identifier	p		3463925	1					
ANR	3464084	CallExpression	delspc ( * p )		3463925	1					
ANR	3464085	Callee	delspc		3463925	0					
ANR	3464086	Identifier	delspc		3463925	0					
ANR	3464087	ArgumentList	* p		3463925	1					
ANR	3464088	Argument	* p		3463925	0					
ANR	3464089	UnaryOperationExpression	* p		3463925	0					
ANR	3464090	UnaryOperator	*		3463925	0					
ANR	3464091	Identifier	p		3463925	1					
ANR	3464092	IfStatement	if ( verbose >= 7 )		3463925	5					
ANR	3464093	Condition	verbose >= 7	504:6:11710:11721	3463925	0	True				
ANR	3464094	RelationalExpression	verbose >= 7		3463925	0		>=			
ANR	3464095	Identifier	verbose		3463925	0					
ANR	3464096	PrimaryExpression	7		3463925	1					
ANR	3464097	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_term returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	505:4:11728:11835	3463925	1	True				
ANR	3464098	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_term returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3463925	0					
ANR	3464099	Callee	fprintf		3463925	0					
ANR	3464100	Identifier	fprintf		3463925	0					
ANR	3464101	ArgumentList	stderr		3463925	1					
ANR	3464102	Argument	stderr		3463925	0					
ANR	3464103	Identifier	stderr		3463925	0					
ANR	3464104	Argument	"""%5d (0x%04x): rd_term returned %d (%04x).\\n"""		3463925	1					
ANR	3464105	PrimaryExpression	"""%5d (0x%04x): rd_term returned %d (%04x).\\n"""		3463925	0					
ANR	3464106	Argument	stack [ sp ] . line		3463925	2					
ANR	3464107	MemberAccess	stack [ sp ] . line		3463925	0					
ANR	3464108	ArrayIndexing	stack [ sp ]		3463925	0					
ANR	3464109	Identifier	stack		3463925	0					
ANR	3464110	Identifier	sp		3463925	1					
ANR	3464111	Identifier	line		3463925	1					
ANR	3464112	Argument	addr		3463925	3					
ANR	3464113	Identifier	addr		3463925	0					
ANR	3464114	Argument	result		3463925	4					
ANR	3464115	Identifier	result		3463925	0					
ANR	3464116	Argument	result		3463925	5					
ANR	3464117	Identifier	result		3463925	0					
ANR	3464118	ReturnStatement	return result ;	507:2:11839:11852	3463925	6	True				
ANR	3464119	Identifier	result		3463925	0					
ANR	3464120	ReturnType	static int		3463925	1					
ANR	3464121	Identifier	rd_term		3463925	2					
ANR	3464122	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3463925	3					
ANR	3464123	Parameter	const char * * p	480:9:11075:11088	3463925	0	True				
ANR	3464124	ParameterType	const char * *		3463925	0					
ANR	3464125	Identifier	p		3463925	1					
ANR	3464126	Parameter	int * valid	480:25:11091:11100	3463925	1	True				
ANR	3464127	ParameterType	int *		3463925	0					
ANR	3464128	Identifier	valid		3463925	1					
ANR	3464129	Parameter	int level	480:37:11103:11111	3463925	2	True				
ANR	3464130	ParameterType	int		3463925	0					
ANR	3464131	Identifier	level		3463925	1					
ANR	3464132	Parameter	int * check	480:48:11114:11123	3463925	3	True				
ANR	3464133	ParameterType	int *		3463925	0					
ANR	3464134	Identifier	check		3463925	1					
ANR	3464135	Parameter	int print_errors	480:60:11126:11141	3463925	4	True				
ANR	3464136	ParameterType	int		3463925	0					
ANR	3464137	Identifier	print_errors		3463925	1					
ANR	3464138	CFGEntryNode	ENTRY		3463925		True				
ANR	3464139	CFGExitNode	EXIT		3463925		True				
ANR	3464140	Symbol	* sp		3463925						
ANR	3464141	Symbol	stack		3463925						
ANR	3464142	Symbol	level		3463925						
ANR	3464143	Symbol	check		3463925						
ANR	3464144	Symbol	stderr		3463925						
ANR	3464145	Symbol	rd_factor		3463925						
ANR	3464146	Symbol	verbose		3463925						
ANR	3464147	Symbol	p		3463925						
ANR	3464148	Symbol	valid		3463925						
ANR	3464149	Symbol	result		3463925						
ANR	3464150	Symbol	* check		3463925						
ANR	3464151	Symbol	print_errors		3463925						
ANR	3464152	Symbol	* stack		3463925						
ANR	3464153	Symbol	* p		3463925						
ANR	3464154	Symbol	stack [ sp ] . line		3463925						
ANR	3464155	Symbol	* * p		3463925						
ANR	3464156	Symbol	addr		3463925						
ANR	3464157	Symbol	sp		3463925						
ANR	3464158	Symbol	delspc		3463925						
ANR	3464159	Function	rd_expr_shift	510:0:11857:12671							
ANR	3464160	FunctionDef	"rd_expr_shift (const char * * p , int * valid , int level , int * check , int print_errors)"		3464159	0					
ANR	3464161	CompoundStatement		513:0:11960:12671	3464159	0					
ANR	3464162	IdentifierDeclStatement	int result ;	514:2:11964:11974	3464159	0	True				
ANR	3464163	IdentifierDecl	result		3464159	0					
ANR	3464164	IdentifierDeclType	int		3464159	0					
ANR	3464165	Identifier	result		3464159	1					
ANR	3464166	IfStatement	if ( verbose >= 6 )		3464159	1					
ANR	3464167	Condition	verbose >= 6	515:6:11982:11993	3464159	0	True				
ANR	3464168	RelationalExpression	verbose >= 6		3464159	0		>=			
ANR	3464169	Identifier	verbose		3464159	0					
ANR	3464170	PrimaryExpression	6		3464159	1					
ANR	3464171	Statement	fprintf	516:4:12000:12006	3464159	1	True				
ANR	3464172	Statement	(	516:12:12008:12008	3464159	2	True				
ANR	3464173	Statement	stderr	516:13:12009:12014	3464159	3	True				
ANR	3464174	Statement	","	516:19:12015:12015	3464159	4	True				
ANR	3464175	Statement	"""%5d (0x%04x): Starting to read shift expression """	516:21:12017:12066	3464159	5	True				
ANR	3464176	Statement	"""(string=%s).\\n"""	517:6:12074:12089	3464159	6	True				
ANR	3464177	Statement	","	517:22:12090:12090	3464159	7	True				
ANR	3464178	Statement	stack	517:24:12092:12096	3464159	8	True				
ANR	3464179	Statement	[	517:29:12097:12097	3464159	9	True				
ANR	3464180	Statement	sp	517:30:12098:12099	3464159	10	True				
ANR	3464181	Statement	]	517:32:12100:12100	3464159	11	True				
ANR	3464182	Statement	.	517:33:12101:12101	3464159	12	True				
ANR	3464183	Statement	line	517:34:12102:12105	3464159	13	True				
ANR	3464184	Statement	","	517:38:12106:12106	3464159	14	True				
ANR	3464185	Statement	addr	517:40:12108:12111	3464159	15	True				
ANR	3464186	Statement	","	517:44:12112:12112	3464159	16	True				
ANR	3464187	Statement	*	517:46:12114:12114	3464159	17	True				
ANR	3464188	Statement	p	517:47:12115:12115	3464159	18	True				
ANR	3464189	Statement	)	517:48:12116:12116	3464159	19	True				
ANR	3464190	ExpressionStatement		517:49:12117:12117	3464159	20	True				
ANR	3464191	ExpressionStatement	"result = rd_term ( p , valid , level , check , print_errors )"	518:2:12121:12176	3464159	21	True				
ANR	3464192	AssignmentExpression	"result = rd_term ( p , valid , level , check , print_errors )"		3464159	0		=			
ANR	3464193	Identifier	result		3464159	0					
ANR	3464194	CallExpression	"rd_term ( p , valid , level , check , print_errors )"		3464159	1					
ANR	3464195	Callee	rd_term		3464159	0					
ANR	3464196	Identifier	rd_term		3464159	0					
ANR	3464197	ArgumentList	p		3464159	1					
ANR	3464198	Argument	p		3464159	0					
ANR	3464199	Identifier	p		3464159	0					
ANR	3464200	Argument	valid		3464159	1					
ANR	3464201	Identifier	valid		3464159	0					
ANR	3464202	Argument	level		3464159	2					
ANR	3464203	Identifier	level		3464159	0					
ANR	3464204	Argument	check		3464159	3					
ANR	3464205	Identifier	check		3464159	0					
ANR	3464206	Argument	print_errors		3464159	4					
ANR	3464207	Identifier	print_errors		3464159	0					
ANR	3464208	ExpressionStatement	* p = delspc ( * p )	519:2:12180:12196	3464159	22	True				
ANR	3464209	AssignmentExpression	* p = delspc ( * p )		3464159	0		=			
ANR	3464210	UnaryOperationExpression	* p		3464159	0					
ANR	3464211	UnaryOperator	*		3464159	0					
ANR	3464212	Identifier	p		3464159	1					
ANR	3464213	CallExpression	delspc ( * p )		3464159	1					
ANR	3464214	Callee	delspc		3464159	0					
ANR	3464215	Identifier	delspc		3464159	0					
ANR	3464216	ArgumentList	* p		3464159	1					
ANR	3464217	Argument	* p		3464159	0					
ANR	3464218	UnaryOperationExpression	* p		3464159	0					
ANR	3464219	UnaryOperator	*		3464159	0					
ANR	3464220	Identifier	p		3464159	1					
ANR	3464221	WhileStatement	while ( ( * * p == '<' || * * p == '>' ) && ( * p ) [ 1 ] == * * p )		3464159	23					
ANR	3464222	Condition	( * * p == '<' || * * p == '>' ) && ( * p ) [ 1 ] == * * p	520:9:12207:12250	3464159	0	True				
ANR	3464223	AndExpression	( * * p == '<' || * * p == '>' ) && ( * p ) [ 1 ] == * * p		3464159	0		&&			
ANR	3464224	OrExpression	* * p == '<' || * * p == '>'		3464159	0		||			
ANR	3464225	EqualityExpression	* * p == '<'		3464159	0		==			
ANR	3464226	UnaryOperationExpression	* * p		3464159	0					
ANR	3464227	UnaryOperator	*		3464159	0					
ANR	3464228	UnaryOperationExpression	* p		3464159	1					
ANR	3464229	UnaryOperator	*		3464159	0					
ANR	3464230	Identifier	p		3464159	1					
ANR	3464231	PrimaryExpression	'<'		3464159	1					
ANR	3464232	EqualityExpression	* * p == '>'		3464159	1		==			
ANR	3464233	UnaryOperationExpression	* * p		3464159	0					
ANR	3464234	UnaryOperator	*		3464159	0					
ANR	3464235	UnaryOperationExpression	* p		3464159	1					
ANR	3464236	UnaryOperator	*		3464159	0					
ANR	3464237	Identifier	p		3464159	1					
ANR	3464238	PrimaryExpression	'>'		3464159	1					
ANR	3464239	EqualityExpression	( * p ) [ 1 ] == * * p		3464159	1		==			
ANR	3464240	ArrayIndexing	( * p ) [ 1 ]		3464159	0					
ANR	3464241	UnaryOperationExpression	* p		3464159	0					
ANR	3464242	UnaryOperator	*		3464159	0					
ANR	3464243	Identifier	p		3464159	1					
ANR	3464244	PrimaryExpression	1		3464159	1					
ANR	3464245	UnaryOperationExpression	* * p		3464159	1					
ANR	3464246	UnaryOperator	*		3464159	0					
ANR	3464247	UnaryOperationExpression	* p		3464159	1					
ANR	3464248	UnaryOperator	*		3464159	0					
ANR	3464249	Identifier	p		3464159	1					
ANR	3464250	CompoundStatement		9:4:296:296	3464159	1					
ANR	3464251	ExpressionStatement	* check = 0	522:6:12265:12275	3464159	0	True				
ANR	3464252	AssignmentExpression	* check = 0		3464159	0		=			
ANR	3464253	UnaryOperationExpression	* check		3464159	0					
ANR	3464254	UnaryOperator	*		3464159	0					
ANR	3464255	Identifier	check		3464159	1					
ANR	3464256	PrimaryExpression	0		3464159	1					
ANR	3464257	IfStatement	if ( * * p == '<' )		3464159	1					
ANR	3464258	Condition	* * p == '<'	523:10:12287:12296	3464159	0	True				
ANR	3464259	EqualityExpression	* * p == '<'		3464159	0		==			
ANR	3464260	UnaryOperationExpression	* * p		3464159	0					
ANR	3464261	UnaryOperator	*		3464159	0					
ANR	3464262	UnaryOperationExpression	* p		3464159	1					
ANR	3464263	UnaryOperator	*		3464159	0					
ANR	3464264	Identifier	p		3464159	1					
ANR	3464265	PrimaryExpression	'<'		3464159	1					
ANR	3464266	CompoundStatement		12:1:339:339	3464159	1					
ANR	3464267	ExpressionStatement	( * p ) += 2	525:3:12305:12314	3464159	0	True				
ANR	3464268	AssignmentExpression	( * p ) += 2		3464159	0		+=			
ANR	3464269	UnaryOperationExpression	* p		3464159	0					
ANR	3464270	UnaryOperator	*		3464159	0					
ANR	3464271	Identifier	p		3464159	1					
ANR	3464272	PrimaryExpression	2		3464159	1					
ANR	3464273	ExpressionStatement	"result <<= rd_term ( p , valid , level , check , print_errors )"	526:3:12319:12376	3464159	1	True				
ANR	3464274	AssignmentExpression	"result <<= rd_term ( p , valid , level , check , print_errors )"		3464159	0		<<=			
ANR	3464275	Identifier	result		3464159	0					
ANR	3464276	CallExpression	"rd_term ( p , valid , level , check , print_errors )"		3464159	1					
ANR	3464277	Callee	rd_term		3464159	0					
ANR	3464278	Identifier	rd_term		3464159	0					
ANR	3464279	ArgumentList	p		3464159	1					
ANR	3464280	Argument	p		3464159	0					
ANR	3464281	Identifier	p		3464159	0					
ANR	3464282	Argument	valid		3464159	1					
ANR	3464283	Identifier	valid		3464159	0					
ANR	3464284	Argument	level		3464159	2					
ANR	3464285	Identifier	level		3464159	0					
ANR	3464286	Argument	check		3464159	3					
ANR	3464287	Identifier	check		3464159	0					
ANR	3464288	Argument	print_errors		3464159	4					
ANR	3464289	Identifier	print_errors		3464159	0					
ANR	3464290	ElseStatement	else		3464159	0					
ANR	3464291	IfStatement	if ( * * p == '>' )		3464159	0					
ANR	3464292	Condition	* * p == '>'	528:15:12396:12405	3464159	0	True				
ANR	3464293	EqualityExpression	* * p == '>'		3464159	0		==			
ANR	3464294	UnaryOperationExpression	* * p		3464159	0					
ANR	3464295	UnaryOperator	*		3464159	0					
ANR	3464296	UnaryOperationExpression	* p		3464159	1					
ANR	3464297	UnaryOperator	*		3464159	0					
ANR	3464298	Identifier	p		3464159	1					
ANR	3464299	PrimaryExpression	'>'		3464159	1					
ANR	3464300	CompoundStatement		17:1:448:448	3464159	1					
ANR	3464301	ExpressionStatement	( * p ) += 2	530:3:12414:12423	3464159	0	True				
ANR	3464302	AssignmentExpression	( * p ) += 2		3464159	0		+=			
ANR	3464303	UnaryOperationExpression	* p		3464159	0					
ANR	3464304	UnaryOperator	*		3464159	0					
ANR	3464305	Identifier	p		3464159	1					
ANR	3464306	PrimaryExpression	2		3464159	1					
ANR	3464307	ExpressionStatement	"result >>= rd_term ( p , valid , level , check , print_errors )"	531:3:12428:12485	3464159	1	True				
ANR	3464308	AssignmentExpression	"result >>= rd_term ( p , valid , level , check , print_errors )"		3464159	0		>>=			
ANR	3464309	Identifier	result		3464159	0					
ANR	3464310	CallExpression	"rd_term ( p , valid , level , check , print_errors )"		3464159	1					
ANR	3464311	Callee	rd_term		3464159	0					
ANR	3464312	Identifier	rd_term		3464159	0					
ANR	3464313	ArgumentList	p		3464159	1					
ANR	3464314	Argument	p		3464159	0					
ANR	3464315	Identifier	p		3464159	0					
ANR	3464316	Argument	valid		3464159	1					
ANR	3464317	Identifier	valid		3464159	0					
ANR	3464318	Argument	level		3464159	2					
ANR	3464319	Identifier	level		3464159	0					
ANR	3464320	Argument	check		3464159	3					
ANR	3464321	Identifier	check		3464159	0					
ANR	3464322	Argument	print_errors		3464159	4					
ANR	3464323	Identifier	print_errors		3464159	0					
ANR	3464324	ExpressionStatement	* p = delspc ( * p )	533:6:12496:12512	3464159	2	True				
ANR	3464325	AssignmentExpression	* p = delspc ( * p )		3464159	0		=			
ANR	3464326	UnaryOperationExpression	* p		3464159	0					
ANR	3464327	UnaryOperator	*		3464159	0					
ANR	3464328	Identifier	p		3464159	1					
ANR	3464329	CallExpression	delspc ( * p )		3464159	1					
ANR	3464330	Callee	delspc		3464159	0					
ANR	3464331	Identifier	delspc		3464159	0					
ANR	3464332	ArgumentList	* p		3464159	1					
ANR	3464333	Argument	* p		3464159	0					
ANR	3464334	UnaryOperationExpression	* p		3464159	0					
ANR	3464335	UnaryOperator	*		3464159	0					
ANR	3464336	Identifier	p		3464159	1					
ANR	3464337	IfStatement	if ( verbose >= 7 )		3464159	24					
ANR	3464338	Condition	verbose >= 7	535:6:12526:12537	3464159	0	True				
ANR	3464339	RelationalExpression	verbose >= 7		3464159	0		>=			
ANR	3464340	Identifier	verbose		3464159	0					
ANR	3464341	PrimaryExpression	7		3464159	1					
ANR	3464342	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_shift returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	536:4:12544:12652	3464159	1	True				
ANR	3464343	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_shift returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3464159	0					
ANR	3464344	Callee	fprintf		3464159	0					
ANR	3464345	Identifier	fprintf		3464159	0					
ANR	3464346	ArgumentList	stderr		3464159	1					
ANR	3464347	Argument	stderr		3464159	0					
ANR	3464348	Identifier	stderr		3464159	0					
ANR	3464349	Argument	"""%5d (0x%04x): rd_shift returned %d (%04x).\\n"""		3464159	1					
ANR	3464350	PrimaryExpression	"""%5d (0x%04x): rd_shift returned %d (%04x).\\n"""		3464159	0					
ANR	3464351	Argument	stack [ sp ] . line		3464159	2					
ANR	3464352	MemberAccess	stack [ sp ] . line		3464159	0					
ANR	3464353	ArrayIndexing	stack [ sp ]		3464159	0					
ANR	3464354	Identifier	stack		3464159	0					
ANR	3464355	Identifier	sp		3464159	1					
ANR	3464356	Identifier	line		3464159	1					
ANR	3464357	Argument	addr		3464159	3					
ANR	3464358	Identifier	addr		3464159	0					
ANR	3464359	Argument	result		3464159	4					
ANR	3464360	Identifier	result		3464159	0					
ANR	3464361	Argument	result		3464159	5					
ANR	3464362	Identifier	result		3464159	0					
ANR	3464363	ReturnStatement	return result ;	538:2:12656:12669	3464159	25	True				
ANR	3464364	Identifier	result		3464159	0					
ANR	3464365	ReturnType	static int		3464159	1					
ANR	3464366	Identifier	rd_expr_shift		3464159	2					
ANR	3464367	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3464159	3					
ANR	3464368	Parameter	const char * * p	511:15:11883:11896	3464159	0	True				
ANR	3464369	ParameterType	const char * *		3464159	0					
ANR	3464370	Identifier	p		3464159	1					
ANR	3464371	Parameter	int * valid	511:31:11899:11908	3464159	1	True				
ANR	3464372	ParameterType	int *		3464159	0					
ANR	3464373	Identifier	valid		3464159	1					
ANR	3464374	Parameter	int level	511:43:11911:11919	3464159	2	True				
ANR	3464375	ParameterType	int		3464159	0					
ANR	3464376	Identifier	level		3464159	1					
ANR	3464377	Parameter	int * check	511:54:11922:11931	3464159	3	True				
ANR	3464378	ParameterType	int *		3464159	0					
ANR	3464379	Identifier	check		3464159	1					
ANR	3464380	Parameter	int print_errors	512:8:11942:11957	3464159	4	True				
ANR	3464381	ParameterType	int		3464159	0					
ANR	3464382	Identifier	print_errors		3464159	1					
ANR	3464383	CFGEntryNode	ENTRY		3464159		True				
ANR	3464384	CFGExitNode	EXIT		3464159		True				
ANR	3464385	Symbol	* sp		3464159						
ANR	3464386	Symbol	rd_term		3464159						
ANR	3464387	Symbol	stack		3464159						
ANR	3464388	Symbol	level		3464159						
ANR	3464389	Symbol	check		3464159						
ANR	3464390	Symbol	stderr		3464159						
ANR	3464391	Symbol	verbose		3464159						
ANR	3464392	Symbol	p		3464159						
ANR	3464393	Symbol	valid		3464159						
ANR	3464394	Symbol	result		3464159						
ANR	3464395	Symbol	* check		3464159						
ANR	3464396	Symbol	print_errors		3464159						
ANR	3464397	Symbol	* stack		3464159						
ANR	3464398	Symbol	* p		3464159						
ANR	3464399	Symbol	stack [ sp ] . line		3464159						
ANR	3464400	Symbol	* * p		3464159						
ANR	3464401	Symbol	addr		3464159						
ANR	3464402	Symbol	delspc		3464159						
ANR	3464403	Symbol	sp		3464159						
ANR	3464404	Function	rd_expr_unequal	541:0:12674:13830							
ANR	3464405	FunctionDef	"rd_expr_unequal (const char * * p , int * valid , int level , int * check , int print_errors)"		3464404	0					
ANR	3464406	CompoundStatement		544:0:12774:13830	3464404	0					
ANR	3464407	IdentifierDeclStatement	int result ;	545:2:12778:12788	3464404	0	True				
ANR	3464408	IdentifierDecl	result		3464404	0					
ANR	3464409	IdentifierDeclType	int		3464404	0					
ANR	3464410	Identifier	result		3464404	1					
ANR	3464411	IfStatement	if ( verbose >= 6 )		3464404	1					
ANR	3464412	Condition	verbose >= 6	546:6:12796:12807	3464404	0	True				
ANR	3464413	RelationalExpression	verbose >= 6		3464404	0		>=			
ANR	3464414	Identifier	verbose		3464404	0					
ANR	3464415	PrimaryExpression	6		3464404	1					
ANR	3464416	Statement	fprintf	547:4:12814:12820	3464404	1	True				
ANR	3464417	Statement	(	547:12:12822:12822	3464404	2	True				
ANR	3464418	Statement	stderr	547:13:12823:12828	3464404	3	True				
ANR	3464419	Statement	","	547:19:12829:12829	3464404	4	True				
ANR	3464420	Statement	"""%5d (0x%04x): Starting to read """	547:21:12831:12863	3464404	5	True				
ANR	3464421	Statement	"""unequality expression (string=%s).\\n"""	548:6:12871:12908	3464404	6	True				
ANR	3464422	Statement	","	548:44:12909:12909	3464404	7	True				
ANR	3464423	Statement	stack	548:46:12911:12915	3464404	8	True				
ANR	3464424	Statement	[	548:51:12916:12916	3464404	9	True				
ANR	3464425	Statement	sp	548:52:12917:12918	3464404	10	True				
ANR	3464426	Statement	]	548:54:12919:12919	3464404	11	True				
ANR	3464427	Statement	.	548:55:12920:12920	3464404	12	True				
ANR	3464428	Statement	line	548:56:12921:12924	3464404	13	True				
ANR	3464429	Statement	","	548:60:12925:12925	3464404	14	True				
ANR	3464430	Statement	addr	548:62:12927:12930	3464404	15	True				
ANR	3464431	Statement	","	548:66:12931:12931	3464404	16	True				
ANR	3464432	Statement	*	549:6:12939:12939	3464404	17	True				
ANR	3464433	Statement	p	549:7:12940:12940	3464404	18	True				
ANR	3464434	Statement	)	549:8:12941:12941	3464404	19	True				
ANR	3464435	ExpressionStatement		549:9:12942:12942	3464404	20	True				
ANR	3464436	ExpressionStatement	"result = rd_expr_shift ( p , valid , level , check , print_errors )"	550:2:12946:13007	3464404	21	True				
ANR	3464437	AssignmentExpression	"result = rd_expr_shift ( p , valid , level , check , print_errors )"		3464404	0		=			
ANR	3464438	Identifier	result		3464404	0					
ANR	3464439	CallExpression	"rd_expr_shift ( p , valid , level , check , print_errors )"		3464404	1					
ANR	3464440	Callee	rd_expr_shift		3464404	0					
ANR	3464441	Identifier	rd_expr_shift		3464404	0					
ANR	3464442	ArgumentList	p		3464404	1					
ANR	3464443	Argument	p		3464404	0					
ANR	3464444	Identifier	p		3464404	0					
ANR	3464445	Argument	valid		3464404	1					
ANR	3464446	Identifier	valid		3464404	0					
ANR	3464447	Argument	level		3464404	2					
ANR	3464448	Identifier	level		3464404	0					
ANR	3464449	Argument	check		3464404	3					
ANR	3464450	Identifier	check		3464404	0					
ANR	3464451	Argument	print_errors		3464404	4					
ANR	3464452	Identifier	print_errors		3464404	0					
ANR	3464453	ExpressionStatement	* p = delspc ( * p )	551:2:13011:13027	3464404	22	True				
ANR	3464454	AssignmentExpression	* p = delspc ( * p )		3464404	0		=			
ANR	3464455	UnaryOperationExpression	* p		3464404	0					
ANR	3464456	UnaryOperator	*		3464404	0					
ANR	3464457	Identifier	p		3464404	1					
ANR	3464458	CallExpression	delspc ( * p )		3464404	1					
ANR	3464459	Callee	delspc		3464404	0					
ANR	3464460	Identifier	delspc		3464404	0					
ANR	3464461	ArgumentList	* p		3464404	1					
ANR	3464462	Argument	* p		3464404	0					
ANR	3464463	UnaryOperationExpression	* p		3464404	0					
ANR	3464464	UnaryOperator	*		3464404	0					
ANR	3464465	Identifier	p		3464404	1					
ANR	3464466	IfStatement	if ( * * p == '<' && ( * p ) [ 1 ] == '=' )		3464404	23					
ANR	3464467	Condition	* * p == '<' && ( * p ) [ 1 ] == '='	552:6:13035:13062	3464404	0	True				
ANR	3464468	AndExpression	* * p == '<' && ( * p ) [ 1 ] == '='		3464404	0		&&			
ANR	3464469	EqualityExpression	* * p == '<'		3464404	0		==			
ANR	3464470	UnaryOperationExpression	* * p		3464404	0					
ANR	3464471	UnaryOperator	*		3464404	0					
ANR	3464472	UnaryOperationExpression	* p		3464404	1					
ANR	3464473	UnaryOperator	*		3464404	0					
ANR	3464474	Identifier	p		3464404	1					
ANR	3464475	PrimaryExpression	'<'		3464404	1					
ANR	3464476	EqualityExpression	( * p ) [ 1 ] == '='		3464404	1		==			
ANR	3464477	ArrayIndexing	( * p ) [ 1 ]		3464404	0					
ANR	3464478	UnaryOperationExpression	* p		3464404	0					
ANR	3464479	UnaryOperator	*		3464404	0					
ANR	3464480	Identifier	p		3464404	1					
ANR	3464481	PrimaryExpression	1		3464404	1					
ANR	3464482	PrimaryExpression	'='		3464404	1					
ANR	3464483	CompoundStatement		10:4:294:294	3464404	1					
ANR	3464484	ExpressionStatement	* check = 0	554:6:13077:13087	3464404	0	True				
ANR	3464485	AssignmentExpression	* check = 0		3464404	0		=			
ANR	3464486	UnaryOperationExpression	* check		3464404	0					
ANR	3464487	UnaryOperator	*		3464404	0					
ANR	3464488	Identifier	check		3464404	1					
ANR	3464489	PrimaryExpression	0		3464404	1					
ANR	3464490	ExpressionStatement	( * p ) += 2	555:6:13095:13104	3464404	1	True				
ANR	3464491	AssignmentExpression	( * p ) += 2		3464404	0		+=			
ANR	3464492	UnaryOperationExpression	* p		3464404	0					
ANR	3464493	UnaryOperator	*		3464404	0					
ANR	3464494	Identifier	p		3464404	1					
ANR	3464495	PrimaryExpression	2		3464404	1					
ANR	3464496	ReturnStatement	"return result <= rd_expr_unequal ( p , valid , level , check , print_errors ) ;"	556:6:13112:13183	3464404	2	True				
ANR	3464497	RelationalExpression	"result <= rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	0		<=			
ANR	3464498	Identifier	result		3464404	0					
ANR	3464499	CallExpression	"rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	1					
ANR	3464500	Callee	rd_expr_unequal		3464404	0					
ANR	3464501	Identifier	rd_expr_unequal		3464404	0					
ANR	3464502	ArgumentList	p		3464404	1					
ANR	3464503	Argument	p		3464404	0					
ANR	3464504	Identifier	p		3464404	0					
ANR	3464505	Argument	valid		3464404	1					
ANR	3464506	Identifier	valid		3464404	0					
ANR	3464507	Argument	level		3464404	2					
ANR	3464508	Identifier	level		3464404	0					
ANR	3464509	Argument	check		3464404	3					
ANR	3464510	Identifier	check		3464404	0					
ANR	3464511	Argument	print_errors		3464404	4					
ANR	3464512	Identifier	print_errors		3464404	0					
ANR	3464513	ElseStatement	else		3464404	0					
ANR	3464514	IfStatement	if ( * * p == '>' && ( * p ) [ 1 ] == '=' )		3464404	0					
ANR	3464515	Condition	* * p == '>' && ( * p ) [ 1 ] == '='	558:11:13202:13229	3464404	0	True				
ANR	3464516	AndExpression	* * p == '>' && ( * p ) [ 1 ] == '='		3464404	0		&&			
ANR	3464517	EqualityExpression	* * p == '>'		3464404	0		==			
ANR	3464518	UnaryOperationExpression	* * p		3464404	0					
ANR	3464519	UnaryOperator	*		3464404	0					
ANR	3464520	UnaryOperationExpression	* p		3464404	1					
ANR	3464521	UnaryOperator	*		3464404	0					
ANR	3464522	Identifier	p		3464404	1					
ANR	3464523	PrimaryExpression	'>'		3464404	1					
ANR	3464524	EqualityExpression	( * p ) [ 1 ] == '='		3464404	1		==			
ANR	3464525	ArrayIndexing	( * p ) [ 1 ]		3464404	0					
ANR	3464526	UnaryOperationExpression	* p		3464404	0					
ANR	3464527	UnaryOperator	*		3464404	0					
ANR	3464528	Identifier	p		3464404	1					
ANR	3464529	PrimaryExpression	1		3464404	1					
ANR	3464530	PrimaryExpression	'='		3464404	1					
ANR	3464531	CompoundStatement		16:4:461:461	3464404	1					
ANR	3464532	ExpressionStatement	* check = 0	560:6:13244:13254	3464404	0	True				
ANR	3464533	AssignmentExpression	* check = 0		3464404	0		=			
ANR	3464534	UnaryOperationExpression	* check		3464404	0					
ANR	3464535	UnaryOperator	*		3464404	0					
ANR	3464536	Identifier	check		3464404	1					
ANR	3464537	PrimaryExpression	0		3464404	1					
ANR	3464538	ExpressionStatement	( * p ) += 2	561:6:13262:13271	3464404	1	True				
ANR	3464539	AssignmentExpression	( * p ) += 2		3464404	0		+=			
ANR	3464540	UnaryOperationExpression	* p		3464404	0					
ANR	3464541	UnaryOperator	*		3464404	0					
ANR	3464542	Identifier	p		3464404	1					
ANR	3464543	PrimaryExpression	2		3464404	1					
ANR	3464544	ReturnStatement	"return result >= rd_expr_unequal ( p , valid , level , check , print_errors ) ;"	562:6:13279:13350	3464404	2	True				
ANR	3464545	RelationalExpression	"result >= rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	0		>=			
ANR	3464546	Identifier	result		3464404	0					
ANR	3464547	CallExpression	"rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	1					
ANR	3464548	Callee	rd_expr_unequal		3464404	0					
ANR	3464549	Identifier	rd_expr_unequal		3464404	0					
ANR	3464550	ArgumentList	p		3464404	1					
ANR	3464551	Argument	p		3464404	0					
ANR	3464552	Identifier	p		3464404	0					
ANR	3464553	Argument	valid		3464404	1					
ANR	3464554	Identifier	valid		3464404	0					
ANR	3464555	Argument	level		3464404	2					
ANR	3464556	Identifier	level		3464404	0					
ANR	3464557	Argument	check		3464404	3					
ANR	3464558	Identifier	check		3464404	0					
ANR	3464559	Argument	print_errors		3464404	4					
ANR	3464560	Identifier	print_errors		3464404	0					
ANR	3464561	IfStatement	if ( * * p == '<' && ( * p ) [ 1 ] != '<' )		3464404	24					
ANR	3464562	Condition	* * p == '<' && ( * p ) [ 1 ] != '<'	564:6:13364:13391	3464404	0	True				
ANR	3464563	AndExpression	* * p == '<' && ( * p ) [ 1 ] != '<'		3464404	0		&&			
ANR	3464564	EqualityExpression	* * p == '<'		3464404	0		==			
ANR	3464565	UnaryOperationExpression	* * p		3464404	0					
ANR	3464566	UnaryOperator	*		3464404	0					
ANR	3464567	UnaryOperationExpression	* p		3464404	1					
ANR	3464568	UnaryOperator	*		3464404	0					
ANR	3464569	Identifier	p		3464404	1					
ANR	3464570	PrimaryExpression	'<'		3464404	1					
ANR	3464571	EqualityExpression	( * p ) [ 1 ] != '<'		3464404	1		!=			
ANR	3464572	ArrayIndexing	( * p ) [ 1 ]		3464404	0					
ANR	3464573	UnaryOperationExpression	* p		3464404	0					
ANR	3464574	UnaryOperator	*		3464404	0					
ANR	3464575	Identifier	p		3464404	1					
ANR	3464576	PrimaryExpression	1		3464404	1					
ANR	3464577	PrimaryExpression	'<'		3464404	1					
ANR	3464578	CompoundStatement		22:4:623:623	3464404	1					
ANR	3464579	ExpressionStatement	* check = 0	566:6:13406:13416	3464404	0	True				
ANR	3464580	AssignmentExpression	* check = 0		3464404	0		=			
ANR	3464581	UnaryOperationExpression	* check		3464404	0					
ANR	3464582	UnaryOperator	*		3464404	0					
ANR	3464583	Identifier	check		3464404	1					
ANR	3464584	PrimaryExpression	0		3464404	1					
ANR	3464585	ExpressionStatement	( * p ) ++	567:6:13424:13430	3464404	1	True				
ANR	3464586	PostIncDecOperationExpression	( * p ) ++		3464404	0					
ANR	3464587	UnaryOperationExpression	* p		3464404	0					
ANR	3464588	UnaryOperator	*		3464404	0					
ANR	3464589	Identifier	p		3464404	1					
ANR	3464590	IncDec	++		3464404	1					
ANR	3464591	ReturnStatement	"return result < rd_expr_unequal ( p , valid , level , check , print_errors ) ;"	568:6:13438:13508	3464404	2	True				
ANR	3464592	RelationalExpression	"result < rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	0		<			
ANR	3464593	Identifier	result		3464404	0					
ANR	3464594	CallExpression	"rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	1					
ANR	3464595	Callee	rd_expr_unequal		3464404	0					
ANR	3464596	Identifier	rd_expr_unequal		3464404	0					
ANR	3464597	ArgumentList	p		3464404	1					
ANR	3464598	Argument	p		3464404	0					
ANR	3464599	Identifier	p		3464404	0					
ANR	3464600	Argument	valid		3464404	1					
ANR	3464601	Identifier	valid		3464404	0					
ANR	3464602	Argument	level		3464404	2					
ANR	3464603	Identifier	level		3464404	0					
ANR	3464604	Argument	check		3464404	3					
ANR	3464605	Identifier	check		3464404	0					
ANR	3464606	Argument	print_errors		3464404	4					
ANR	3464607	Identifier	print_errors		3464404	0					
ANR	3464608	ElseStatement	else		3464404	0					
ANR	3464609	IfStatement	if ( * * p == '>' && ( * p ) [ 1 ] != '>' )		3464404	0					
ANR	3464610	Condition	* * p == '>' && ( * p ) [ 1 ] != '>'	570:11:13527:13554	3464404	0	True				
ANR	3464611	AndExpression	* * p == '>' && ( * p ) [ 1 ] != '>'		3464404	0		&&			
ANR	3464612	EqualityExpression	* * p == '>'		3464404	0		==			
ANR	3464613	UnaryOperationExpression	* * p		3464404	0					
ANR	3464614	UnaryOperator	*		3464404	0					
ANR	3464615	UnaryOperationExpression	* p		3464404	1					
ANR	3464616	UnaryOperator	*		3464404	0					
ANR	3464617	Identifier	p		3464404	1					
ANR	3464618	PrimaryExpression	'>'		3464404	1					
ANR	3464619	EqualityExpression	( * p ) [ 1 ] != '>'		3464404	1		!=			
ANR	3464620	ArrayIndexing	( * p ) [ 1 ]		3464404	0					
ANR	3464621	UnaryOperationExpression	* p		3464404	0					
ANR	3464622	UnaryOperator	*		3464404	0					
ANR	3464623	Identifier	p		3464404	1					
ANR	3464624	PrimaryExpression	1		3464404	1					
ANR	3464625	PrimaryExpression	'>'		3464404	1					
ANR	3464626	CompoundStatement		28:4:786:786	3464404	1					
ANR	3464627	ExpressionStatement	* check = 0	572:6:13569:13579	3464404	0	True				
ANR	3464628	AssignmentExpression	* check = 0		3464404	0		=			
ANR	3464629	UnaryOperationExpression	* check		3464404	0					
ANR	3464630	UnaryOperator	*		3464404	0					
ANR	3464631	Identifier	check		3464404	1					
ANR	3464632	PrimaryExpression	0		3464404	1					
ANR	3464633	ExpressionStatement	( * p ) ++	573:6:13587:13593	3464404	1	True				
ANR	3464634	PostIncDecOperationExpression	( * p ) ++		3464404	0					
ANR	3464635	UnaryOperationExpression	* p		3464404	0					
ANR	3464636	UnaryOperator	*		3464404	0					
ANR	3464637	Identifier	p		3464404	1					
ANR	3464638	IncDec	++		3464404	1					
ANR	3464639	ReturnStatement	"return result > rd_expr_unequal ( p , valid , level , check , print_errors ) ;"	574:6:13601:13671	3464404	2	True				
ANR	3464640	RelationalExpression	"result > rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	0		>			
ANR	3464641	Identifier	result		3464404	0					
ANR	3464642	CallExpression	"rd_expr_unequal ( p , valid , level , check , print_errors )"		3464404	1					
ANR	3464643	Callee	rd_expr_unequal		3464404	0					
ANR	3464644	Identifier	rd_expr_unequal		3464404	0					
ANR	3464645	ArgumentList	p		3464404	1					
ANR	3464646	Argument	p		3464404	0					
ANR	3464647	Identifier	p		3464404	0					
ANR	3464648	Argument	valid		3464404	1					
ANR	3464649	Identifier	valid		3464404	0					
ANR	3464650	Argument	level		3464404	2					
ANR	3464651	Identifier	level		3464404	0					
ANR	3464652	Argument	check		3464404	3					
ANR	3464653	Identifier	check		3464404	0					
ANR	3464654	Argument	print_errors		3464404	4					
ANR	3464655	Identifier	print_errors		3464404	0					
ANR	3464656	IfStatement	if ( verbose >= 7 )		3464404	25					
ANR	3464657	Condition	verbose >= 7	576:6:13685:13696	3464404	0	True				
ANR	3464658	RelationalExpression	verbose >= 7		3464404	0		>=			
ANR	3464659	Identifier	verbose		3464404	0					
ANR	3464660	PrimaryExpression	7		3464404	1					
ANR	3464661	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_shift returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	577:4:13703:13811	3464404	1	True				
ANR	3464662	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_shift returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3464404	0					
ANR	3464663	Callee	fprintf		3464404	0					
ANR	3464664	Identifier	fprintf		3464404	0					
ANR	3464665	ArgumentList	stderr		3464404	1					
ANR	3464666	Argument	stderr		3464404	0					
ANR	3464667	Identifier	stderr		3464404	0					
ANR	3464668	Argument	"""%5d (0x%04x): rd_shift returned %d (%04x).\\n"""		3464404	1					
ANR	3464669	PrimaryExpression	"""%5d (0x%04x): rd_shift returned %d (%04x).\\n"""		3464404	0					
ANR	3464670	Argument	stack [ sp ] . line		3464404	2					
ANR	3464671	MemberAccess	stack [ sp ] . line		3464404	0					
ANR	3464672	ArrayIndexing	stack [ sp ]		3464404	0					
ANR	3464673	Identifier	stack		3464404	0					
ANR	3464674	Identifier	sp		3464404	1					
ANR	3464675	Identifier	line		3464404	1					
ANR	3464676	Argument	addr		3464404	3					
ANR	3464677	Identifier	addr		3464404	0					
ANR	3464678	Argument	result		3464404	4					
ANR	3464679	Identifier	result		3464404	0					
ANR	3464680	Argument	result		3464404	5					
ANR	3464681	Identifier	result		3464404	0					
ANR	3464682	ReturnStatement	return result ;	579:2:13815:13828	3464404	26	True				
ANR	3464683	Identifier	result		3464404	0					
ANR	3464684	ReturnType	static int		3464404	1					
ANR	3464685	Identifier	rd_expr_unequal		3464404	2					
ANR	3464686	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3464404	3					
ANR	3464687	Parameter	const char * * p	542:17:12702:12715	3464404	0	True				
ANR	3464688	ParameterType	const char * *		3464404	0					
ANR	3464689	Identifier	p		3464404	1					
ANR	3464690	Parameter	int * valid	542:33:12718:12727	3464404	1	True				
ANR	3464691	ParameterType	int *		3464404	0					
ANR	3464692	Identifier	valid		3464404	1					
ANR	3464693	Parameter	int level	542:45:12730:12738	3464404	2	True				
ANR	3464694	ParameterType	int		3464404	0					
ANR	3464695	Identifier	level		3464404	1					
ANR	3464696	Parameter	int * check	542:56:12741:12750	3464404	3	True				
ANR	3464697	ParameterType	int *		3464404	0					
ANR	3464698	Identifier	check		3464404	1					
ANR	3464699	Parameter	int print_errors	543:3:12756:12771	3464404	4	True				
ANR	3464700	ParameterType	int		3464404	0					
ANR	3464701	Identifier	print_errors		3464404	1					
ANR	3464702	CFGEntryNode	ENTRY		3464404		True				
ANR	3464703	CFGExitNode	EXIT		3464404		True				
ANR	3464704	Symbol	rd_expr_unequal		3464404						
ANR	3464705	Symbol	* sp		3464404						
ANR	3464706	Symbol	stack		3464404						
ANR	3464707	Symbol	level		3464404						
ANR	3464708	Symbol	check		3464404						
ANR	3464709	Symbol	stderr		3464404						
ANR	3464710	Symbol	verbose		3464404						
ANR	3464711	Symbol	p		3464404						
ANR	3464712	Symbol	valid		3464404						
ANR	3464713	Symbol	result		3464404						
ANR	3464714	Symbol	rd_expr_shift		3464404						
ANR	3464715	Symbol	* check		3464404						
ANR	3464716	Symbol	print_errors		3464404						
ANR	3464717	Symbol	* stack		3464404						
ANR	3464718	Symbol	* p		3464404						
ANR	3464719	Symbol	stack [ sp ] . line		3464404						
ANR	3464720	Symbol	* * p		3464404						
ANR	3464721	Symbol	addr		3464404						
ANR	3464722	Symbol	delspc		3464404						
ANR	3464723	Symbol	sp		3464404						
ANR	3464724	Function	rd_expr_equal	582:0:13833:14668							
ANR	3464725	FunctionDef	"rd_expr_equal (const char * * p , int * valid , int level , int * check , int print_errors)"		3464724	0					
ANR	3464726	CompoundStatement		585:0:13936:14668	3464724	0					
ANR	3464727	IdentifierDeclStatement	int result ;	586:2:13940:13950	3464724	0	True				
ANR	3464728	IdentifierDecl	result		3464724	0					
ANR	3464729	IdentifierDeclType	int		3464724	0					
ANR	3464730	Identifier	result		3464724	1					
ANR	3464731	IfStatement	if ( verbose >= 6 )		3464724	1					
ANR	3464732	Condition	verbose >= 6	587:6:13958:13969	3464724	0	True				
ANR	3464733	RelationalExpression	verbose >= 6		3464724	0		>=			
ANR	3464734	Identifier	verbose		3464724	0					
ANR	3464735	PrimaryExpression	6		3464724	1					
ANR	3464736	Statement	fprintf	588:4:13976:13982	3464724	1	True				
ANR	3464737	Statement	(	588:12:13984:13984	3464724	2	True				
ANR	3464738	Statement	stderr	588:13:13985:13990	3464724	3	True				
ANR	3464739	Statement	","	588:19:13991:13991	3464724	4	True				
ANR	3464740	Statement	"""%5d (0x%04x): Starting to read equality epression """	588:21:13993:14044	3464724	5	True				
ANR	3464741	Statement	"""(string=%s).\\n"""	589:6:14052:14067	3464724	6	True				
ANR	3464742	Statement	","	589:22:14068:14068	3464724	7	True				
ANR	3464743	Statement	stack	589:24:14070:14074	3464724	8	True				
ANR	3464744	Statement	[	589:29:14075:14075	3464724	9	True				
ANR	3464745	Statement	sp	589:30:14076:14077	3464724	10	True				
ANR	3464746	Statement	]	589:32:14078:14078	3464724	11	True				
ANR	3464747	Statement	.	589:33:14079:14079	3464724	12	True				
ANR	3464748	Statement	line	589:34:14080:14083	3464724	13	True				
ANR	3464749	Statement	","	589:38:14084:14084	3464724	14	True				
ANR	3464750	Statement	addr	589:40:14086:14089	3464724	15	True				
ANR	3464751	Statement	","	589:44:14090:14090	3464724	16	True				
ANR	3464752	Statement	*	589:46:14092:14092	3464724	17	True				
ANR	3464753	Statement	p	589:47:14093:14093	3464724	18	True				
ANR	3464754	Statement	)	589:48:14094:14094	3464724	19	True				
ANR	3464755	ExpressionStatement		589:49:14095:14095	3464724	20	True				
ANR	3464756	ExpressionStatement	"result = rd_expr_unequal ( p , valid , level , check , print_errors )"	590:2:14099:14162	3464724	21	True				
ANR	3464757	AssignmentExpression	"result = rd_expr_unequal ( p , valid , level , check , print_errors )"		3464724	0		=			
ANR	3464758	Identifier	result		3464724	0					
ANR	3464759	CallExpression	"rd_expr_unequal ( p , valid , level , check , print_errors )"		3464724	1					
ANR	3464760	Callee	rd_expr_unequal		3464724	0					
ANR	3464761	Identifier	rd_expr_unequal		3464724	0					
ANR	3464762	ArgumentList	p		3464724	1					
ANR	3464763	Argument	p		3464724	0					
ANR	3464764	Identifier	p		3464724	0					
ANR	3464765	Argument	valid		3464724	1					
ANR	3464766	Identifier	valid		3464724	0					
ANR	3464767	Argument	level		3464724	2					
ANR	3464768	Identifier	level		3464724	0					
ANR	3464769	Argument	check		3464724	3					
ANR	3464770	Identifier	check		3464724	0					
ANR	3464771	Argument	print_errors		3464724	4					
ANR	3464772	Identifier	print_errors		3464724	0					
ANR	3464773	ExpressionStatement	* p = delspc ( * p )	591:2:14166:14182	3464724	22	True				
ANR	3464774	AssignmentExpression	* p = delspc ( * p )		3464724	0		=			
ANR	3464775	UnaryOperationExpression	* p		3464724	0					
ANR	3464776	UnaryOperator	*		3464724	0					
ANR	3464777	Identifier	p		3464724	1					
ANR	3464778	CallExpression	delspc ( * p )		3464724	1					
ANR	3464779	Callee	delspc		3464724	0					
ANR	3464780	Identifier	delspc		3464724	0					
ANR	3464781	ArgumentList	* p		3464724	1					
ANR	3464782	Argument	* p		3464724	0					
ANR	3464783	UnaryOperationExpression	* p		3464724	0					
ANR	3464784	UnaryOperator	*		3464724	0					
ANR	3464785	Identifier	p		3464724	1					
ANR	3464786	IfStatement	if ( * * p == '=' )		3464724	23					
ANR	3464787	Condition	* * p == '='	592:6:14190:14199	3464724	0	True				
ANR	3464788	EqualityExpression	* * p == '='		3464724	0		==			
ANR	3464789	UnaryOperationExpression	* * p		3464724	0					
ANR	3464790	UnaryOperator	*		3464724	0					
ANR	3464791	UnaryOperationExpression	* p		3464724	1					
ANR	3464792	UnaryOperator	*		3464724	0					
ANR	3464793	Identifier	p		3464724	1					
ANR	3464794	PrimaryExpression	'='		3464724	1					
ANR	3464795	CompoundStatement		9:4:269:269	3464724	1					
ANR	3464796	ExpressionStatement	* check = 0	594:6:14214:14224	3464724	0	True				
ANR	3464797	AssignmentExpression	* check = 0		3464724	0		=			
ANR	3464798	UnaryOperationExpression	* check		3464724	0					
ANR	3464799	UnaryOperator	*		3464724	0					
ANR	3464800	Identifier	check		3464724	1					
ANR	3464801	PrimaryExpression	0		3464724	1					
ANR	3464802	ExpressionStatement	++ * p	595:6:14232:14236	3464724	1	True				
ANR	3464803	UnaryExpression	++ * p		3464724	0					
ANR	3464804	IncDec	++		3464724	0					
ANR	3464805	UnaryOperationExpression	* p		3464724	1					
ANR	3464806	UnaryOperator	*		3464724	0					
ANR	3464807	Identifier	p		3464724	1					
ANR	3464808	IfStatement	if ( * * p == '=' )		3464724	2					
ANR	3464809	Condition	* * p == '='	596:10:14248:14257	3464724	0	True				
ANR	3464810	EqualityExpression	* * p == '='		3464724	0		==			
ANR	3464811	UnaryOperationExpression	* * p		3464724	0					
ANR	3464812	UnaryOperator	*		3464724	0					
ANR	3464813	UnaryOperationExpression	* p		3464724	1					
ANR	3464814	UnaryOperator	*		3464724	0					
ANR	3464815	Identifier	p		3464724	1					
ANR	3464816	PrimaryExpression	'='		3464724	1					
ANR	3464817	ExpressionStatement	++ * p	597:1:14261:14267	3464724	1	True				
ANR	3464818	UnaryExpression	++ * p		3464724	0					
ANR	3464819	IncDec	++		3464724	0					
ANR	3464820	UnaryOperationExpression	* p		3464724	1					
ANR	3464821	UnaryOperator	*		3464724	0					
ANR	3464822	Identifier	p		3464724	1					
ANR	3464823	ReturnStatement	"return result == rd_expr_equal ( p , valid , level , check , print_errors ) ;"	598:6:14275:14344	3464724	3	True				
ANR	3464824	EqualityExpression	"result == rd_expr_equal ( p , valid , level , check , print_errors )"		3464724	0		==			
ANR	3464825	Identifier	result		3464724	0					
ANR	3464826	CallExpression	"rd_expr_equal ( p , valid , level , check , print_errors )"		3464724	1					
ANR	3464827	Callee	rd_expr_equal		3464724	0					
ANR	3464828	Identifier	rd_expr_equal		3464724	0					
ANR	3464829	ArgumentList	p		3464724	1					
ANR	3464830	Argument	p		3464724	0					
ANR	3464831	Identifier	p		3464724	0					
ANR	3464832	Argument	valid		3464724	1					
ANR	3464833	Identifier	valid		3464724	0					
ANR	3464834	Argument	level		3464724	2					
ANR	3464835	Identifier	level		3464724	0					
ANR	3464836	Argument	check		3464724	3					
ANR	3464837	Identifier	check		3464724	0					
ANR	3464838	Argument	print_errors		3464724	4					
ANR	3464839	Identifier	print_errors		3464724	0					
ANR	3464840	ElseStatement	else		3464724	0					
ANR	3464841	IfStatement	if ( * * p == '!' && ( * p ) [ 1 ] == '=' )		3464724	0					
ANR	3464842	Condition	* * p == '!' && ( * p ) [ 1 ] == '='	600:11:14363:14390	3464724	0	True				
ANR	3464843	AndExpression	* * p == '!' && ( * p ) [ 1 ] == '='		3464724	0		&&			
ANR	3464844	EqualityExpression	* * p == '!'		3464724	0		==			
ANR	3464845	UnaryOperationExpression	* * p		3464724	0					
ANR	3464846	UnaryOperator	*		3464724	0					
ANR	3464847	UnaryOperationExpression	* p		3464724	1					
ANR	3464848	UnaryOperator	*		3464724	0					
ANR	3464849	Identifier	p		3464724	1					
ANR	3464850	PrimaryExpression	'!'		3464724	1					
ANR	3464851	EqualityExpression	( * p ) [ 1 ] == '='		3464724	1		==			
ANR	3464852	ArrayIndexing	( * p ) [ 1 ]		3464724	0					
ANR	3464853	UnaryOperationExpression	* p		3464724	0					
ANR	3464854	UnaryOperator	*		3464724	0					
ANR	3464855	Identifier	p		3464724	1					
ANR	3464856	PrimaryExpression	1		3464724	1					
ANR	3464857	PrimaryExpression	'='		3464724	1					
ANR	3464858	CompoundStatement		17:4:460:460	3464724	1					
ANR	3464859	ExpressionStatement	* check = 0	602:6:14405:14415	3464724	0	True				
ANR	3464860	AssignmentExpression	* check = 0		3464724	0		=			
ANR	3464861	UnaryOperationExpression	* check		3464724	0					
ANR	3464862	UnaryOperator	*		3464724	0					
ANR	3464863	Identifier	check		3464724	1					
ANR	3464864	PrimaryExpression	0		3464724	1					
ANR	3464865	ExpressionStatement	( * p ) += 2	603:6:14423:14432	3464724	1	True				
ANR	3464866	AssignmentExpression	( * p ) += 2		3464724	0		+=			
ANR	3464867	UnaryOperationExpression	* p		3464724	0					
ANR	3464868	UnaryOperator	*		3464724	0					
ANR	3464869	Identifier	p		3464724	1					
ANR	3464870	PrimaryExpression	2		3464724	1					
ANR	3464871	ReturnStatement	"return result != rd_expr_equal ( p , valid , level , check , print_errors ) ;"	604:6:14440:14509	3464724	2	True				
ANR	3464872	EqualityExpression	"result != rd_expr_equal ( p , valid , level , check , print_errors )"		3464724	0		!=			
ANR	3464873	Identifier	result		3464724	0					
ANR	3464874	CallExpression	"rd_expr_equal ( p , valid , level , check , print_errors )"		3464724	1					
ANR	3464875	Callee	rd_expr_equal		3464724	0					
ANR	3464876	Identifier	rd_expr_equal		3464724	0					
ANR	3464877	ArgumentList	p		3464724	1					
ANR	3464878	Argument	p		3464724	0					
ANR	3464879	Identifier	p		3464724	0					
ANR	3464880	Argument	valid		3464724	1					
ANR	3464881	Identifier	valid		3464724	0					
ANR	3464882	Argument	level		3464724	2					
ANR	3464883	Identifier	level		3464724	0					
ANR	3464884	Argument	check		3464724	3					
ANR	3464885	Identifier	check		3464724	0					
ANR	3464886	Argument	print_errors		3464724	4					
ANR	3464887	Identifier	print_errors		3464724	0					
ANR	3464888	IfStatement	if ( verbose >= 7 )		3464724	24					
ANR	3464889	Condition	verbose >= 7	606:6:14523:14534	3464724	0	True				
ANR	3464890	RelationalExpression	verbose >= 7		3464724	0		>=			
ANR	3464891	Identifier	verbose		3464724	0					
ANR	3464892	PrimaryExpression	7		3464724	1					
ANR	3464893	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_equal returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	607:4:14541:14649	3464724	1	True				
ANR	3464894	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_equal returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3464724	0					
ANR	3464895	Callee	fprintf		3464724	0					
ANR	3464896	Identifier	fprintf		3464724	0					
ANR	3464897	ArgumentList	stderr		3464724	1					
ANR	3464898	Argument	stderr		3464724	0					
ANR	3464899	Identifier	stderr		3464724	0					
ANR	3464900	Argument	"""%5d (0x%04x): rd_equal returned %d (%04x).\\n"""		3464724	1					
ANR	3464901	PrimaryExpression	"""%5d (0x%04x): rd_equal returned %d (%04x).\\n"""		3464724	0					
ANR	3464902	Argument	stack [ sp ] . line		3464724	2					
ANR	3464903	MemberAccess	stack [ sp ] . line		3464724	0					
ANR	3464904	ArrayIndexing	stack [ sp ]		3464724	0					
ANR	3464905	Identifier	stack		3464724	0					
ANR	3464906	Identifier	sp		3464724	1					
ANR	3464907	Identifier	line		3464724	1					
ANR	3464908	Argument	addr		3464724	3					
ANR	3464909	Identifier	addr		3464724	0					
ANR	3464910	Argument	result		3464724	4					
ANR	3464911	Identifier	result		3464724	0					
ANR	3464912	Argument	result		3464724	5					
ANR	3464913	Identifier	result		3464724	0					
ANR	3464914	ReturnStatement	return result ;	609:2:14653:14666	3464724	25	True				
ANR	3464915	Identifier	result		3464724	0					
ANR	3464916	ReturnType	static int		3464724	1					
ANR	3464917	Identifier	rd_expr_equal		3464724	2					
ANR	3464918	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3464724	3					
ANR	3464919	Parameter	const char * * p	583:15:13859:13872	3464724	0	True				
ANR	3464920	ParameterType	const char * *		3464724	0					
ANR	3464921	Identifier	p		3464724	1					
ANR	3464922	Parameter	int * valid	583:31:13875:13884	3464724	1	True				
ANR	3464923	ParameterType	int *		3464724	0					
ANR	3464924	Identifier	valid		3464724	1					
ANR	3464925	Parameter	int level	583:43:13887:13895	3464724	2	True				
ANR	3464926	ParameterType	int		3464724	0					
ANR	3464927	Identifier	level		3464724	1					
ANR	3464928	Parameter	int * check	583:54:13898:13907	3464724	3	True				
ANR	3464929	ParameterType	int *		3464724	0					
ANR	3464930	Identifier	check		3464724	1					
ANR	3464931	Parameter	int print_errors	584:8:13918:13933	3464724	4	True				
ANR	3464932	ParameterType	int		3464724	0					
ANR	3464933	Identifier	print_errors		3464724	1					
ANR	3464934	CFGEntryNode	ENTRY		3464724		True				
ANR	3464935	CFGExitNode	EXIT		3464724		True				
ANR	3464936	Symbol	rd_expr_unequal		3464724						
ANR	3464937	Symbol	* sp		3464724						
ANR	3464938	Symbol	stack		3464724						
ANR	3464939	Symbol	rd_expr_equal		3464724						
ANR	3464940	Symbol	level		3464724						
ANR	3464941	Symbol	check		3464724						
ANR	3464942	Symbol	stderr		3464724						
ANR	3464943	Symbol	verbose		3464724						
ANR	3464944	Symbol	p		3464724						
ANR	3464945	Symbol	valid		3464724						
ANR	3464946	Symbol	result		3464724						
ANR	3464947	Symbol	* check		3464724						
ANR	3464948	Symbol	print_errors		3464724						
ANR	3464949	Symbol	* stack		3464724						
ANR	3464950	Symbol	* p		3464724						
ANR	3464951	Symbol	stack [ sp ] . line		3464724						
ANR	3464952	Symbol	* * p		3464724						
ANR	3464953	Symbol	addr		3464724						
ANR	3464954	Symbol	delspc		3464724						
ANR	3464955	Symbol	sp		3464724						
ANR	3464956	Function	rd_expr_and	612:0:14671:15296							
ANR	3464957	FunctionDef	"rd_expr_and (const char * * p , int * valid , int level , int * check , int print_errors)"		3464956	0					
ANR	3464958	CompoundStatement		615:0:14770:15296	3464956	0					
ANR	3464959	IdentifierDeclStatement	int result ;	616:2:14774:14784	3464956	0	True				
ANR	3464960	IdentifierDecl	result		3464956	0					
ANR	3464961	IdentifierDeclType	int		3464956	0					
ANR	3464962	Identifier	result		3464956	1					
ANR	3464963	IfStatement	if ( verbose >= 6 )		3464956	1					
ANR	3464964	Condition	verbose >= 6	617:6:14792:14803	3464956	0	True				
ANR	3464965	RelationalExpression	verbose >= 6		3464956	0		>=			
ANR	3464966	Identifier	verbose		3464956	0					
ANR	3464967	PrimaryExpression	6		3464956	1					
ANR	3464968	Statement	fprintf	618:4:14810:14816	3464956	1	True				
ANR	3464969	Statement	(	618:12:14818:14818	3464956	2	True				
ANR	3464970	Statement	stderr	618:13:14819:14824	3464956	3	True				
ANR	3464971	Statement	","	618:19:14825:14825	3464956	4	True				
ANR	3464972	Statement	"""%5d (0x%04x): Starting to read and expression """	618:21:14827:14874	3464956	5	True				
ANR	3464973	Statement	"""(string=%s).\\n"""	619:6:14882:14897	3464956	6	True				
ANR	3464974	Statement	","	619:22:14898:14898	3464956	7	True				
ANR	3464975	Statement	stack	619:24:14900:14904	3464956	8	True				
ANR	3464976	Statement	[	619:29:14905:14905	3464956	9	True				
ANR	3464977	Statement	sp	619:30:14906:14907	3464956	10	True				
ANR	3464978	Statement	]	619:32:14908:14908	3464956	11	True				
ANR	3464979	Statement	.	619:33:14909:14909	3464956	12	True				
ANR	3464980	Statement	line	619:34:14910:14913	3464956	13	True				
ANR	3464981	Statement	","	619:38:14914:14914	3464956	14	True				
ANR	3464982	Statement	addr	619:40:14916:14919	3464956	15	True				
ANR	3464983	Statement	","	619:44:14920:14920	3464956	16	True				
ANR	3464984	Statement	*	619:46:14922:14922	3464956	17	True				
ANR	3464985	Statement	p	619:47:14923:14923	3464956	18	True				
ANR	3464986	Statement	)	619:48:14924:14924	3464956	19	True				
ANR	3464987	ExpressionStatement		619:49:14925:14925	3464956	20	True				
ANR	3464988	ExpressionStatement	"result = rd_expr_equal ( p , valid , level , check , print_errors )"	620:2:14929:14990	3464956	21	True				
ANR	3464989	AssignmentExpression	"result = rd_expr_equal ( p , valid , level , check , print_errors )"		3464956	0		=			
ANR	3464990	Identifier	result		3464956	0					
ANR	3464991	CallExpression	"rd_expr_equal ( p , valid , level , check , print_errors )"		3464956	1					
ANR	3464992	Callee	rd_expr_equal		3464956	0					
ANR	3464993	Identifier	rd_expr_equal		3464956	0					
ANR	3464994	ArgumentList	p		3464956	1					
ANR	3464995	Argument	p		3464956	0					
ANR	3464996	Identifier	p		3464956	0					
ANR	3464997	Argument	valid		3464956	1					
ANR	3464998	Identifier	valid		3464956	0					
ANR	3464999	Argument	level		3464956	2					
ANR	3465000	Identifier	level		3464956	0					
ANR	3465001	Argument	check		3464956	3					
ANR	3465002	Identifier	check		3464956	0					
ANR	3465003	Argument	print_errors		3464956	4					
ANR	3465004	Identifier	print_errors		3464956	0					
ANR	3465005	ExpressionStatement	* p = delspc ( * p )	621:2:14994:15010	3464956	22	True				
ANR	3465006	AssignmentExpression	* p = delspc ( * p )		3464956	0		=			
ANR	3465007	UnaryOperationExpression	* p		3464956	0					
ANR	3465008	UnaryOperator	*		3464956	0					
ANR	3465009	Identifier	p		3464956	1					
ANR	3465010	CallExpression	delspc ( * p )		3464956	1					
ANR	3465011	Callee	delspc		3464956	0					
ANR	3465012	Identifier	delspc		3464956	0					
ANR	3465013	ArgumentList	* p		3464956	1					
ANR	3465014	Argument	* p		3464956	0					
ANR	3465015	UnaryOperationExpression	* p		3464956	0					
ANR	3465016	UnaryOperator	*		3464956	0					
ANR	3465017	Identifier	p		3464956	1					
ANR	3465018	IfStatement	if ( * * p == '&' )		3464956	23					
ANR	3465019	Condition	* * p == '&'	622:6:15018:15027	3464956	0	True				
ANR	3465020	EqualityExpression	* * p == '&'		3464956	0		==			
ANR	3465021	UnaryOperationExpression	* * p		3464956	0					
ANR	3465022	UnaryOperator	*		3464956	0					
ANR	3465023	UnaryOperationExpression	* p		3464956	1					
ANR	3465024	UnaryOperator	*		3464956	0					
ANR	3465025	Identifier	p		3464956	1					
ANR	3465026	PrimaryExpression	'&'		3464956	1					
ANR	3465027	CompoundStatement		9:4:263:263	3464956	1					
ANR	3465028	ExpressionStatement	* check = 0	624:6:15042:15052	3464956	0	True				
ANR	3465029	AssignmentExpression	* check = 0		3464956	0		=			
ANR	3465030	UnaryOperationExpression	* check		3464956	0					
ANR	3465031	UnaryOperator	*		3464956	0					
ANR	3465032	Identifier	check		3464956	1					
ANR	3465033	PrimaryExpression	0		3464956	1					
ANR	3465034	ExpressionStatement	( * p ) ++	625:6:15060:15066	3464956	1	True				
ANR	3465035	PostIncDecOperationExpression	( * p ) ++		3464956	0					
ANR	3465036	UnaryOperationExpression	* p		3464956	0					
ANR	3465037	UnaryOperator	*		3464956	0					
ANR	3465038	Identifier	p		3464956	1					
ANR	3465039	IncDec	++		3464956	1					
ANR	3465040	ExpressionStatement	"result &= rd_expr_and ( p , valid , level , check , print_errors )"	626:6:15074:15134	3464956	2	True				
ANR	3465041	AssignmentExpression	"result &= rd_expr_and ( p , valid , level , check , print_errors )"		3464956	0		&=			
ANR	3465042	Identifier	result		3464956	0					
ANR	3465043	CallExpression	"rd_expr_and ( p , valid , level , check , print_errors )"		3464956	1					
ANR	3465044	Callee	rd_expr_and		3464956	0					
ANR	3465045	Identifier	rd_expr_and		3464956	0					
ANR	3465046	ArgumentList	p		3464956	1					
ANR	3465047	Argument	p		3464956	0					
ANR	3465048	Identifier	p		3464956	0					
ANR	3465049	Argument	valid		3464956	1					
ANR	3465050	Identifier	valid		3464956	0					
ANR	3465051	Argument	level		3464956	2					
ANR	3465052	Identifier	level		3464956	0					
ANR	3465053	Argument	check		3464956	3					
ANR	3465054	Identifier	check		3464956	0					
ANR	3465055	Argument	print_errors		3464956	4					
ANR	3465056	Identifier	print_errors		3464956	0					
ANR	3465057	IfStatement	if ( verbose >= 7 )		3464956	24					
ANR	3465058	Condition	verbose >= 7	628:6:15148:15159	3464956	0	True				
ANR	3465059	RelationalExpression	verbose >= 7		3464956	0		>=			
ANR	3465060	Identifier	verbose		3464956	0					
ANR	3465061	PrimaryExpression	7		3464956	1					
ANR	3465062	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_and returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	629:4:15166:15277	3464956	1	True				
ANR	3465063	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_and returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3464956	0					
ANR	3465064	Callee	fprintf		3464956	0					
ANR	3465065	Identifier	fprintf		3464956	0					
ANR	3465066	ArgumentList	stderr		3464956	1					
ANR	3465067	Argument	stderr		3464956	0					
ANR	3465068	Identifier	stderr		3464956	0					
ANR	3465069	Argument	"""%5d (0x%04x): rd_expr_and returned %d (%04x).\\n"""		3464956	1					
ANR	3465070	PrimaryExpression	"""%5d (0x%04x): rd_expr_and returned %d (%04x).\\n"""		3464956	0					
ANR	3465071	Argument	stack [ sp ] . line		3464956	2					
ANR	3465072	MemberAccess	stack [ sp ] . line		3464956	0					
ANR	3465073	ArrayIndexing	stack [ sp ]		3464956	0					
ANR	3465074	Identifier	stack		3464956	0					
ANR	3465075	Identifier	sp		3464956	1					
ANR	3465076	Identifier	line		3464956	1					
ANR	3465077	Argument	addr		3464956	3					
ANR	3465078	Identifier	addr		3464956	0					
ANR	3465079	Argument	result		3464956	4					
ANR	3465080	Identifier	result		3464956	0					
ANR	3465081	Argument	result		3464956	5					
ANR	3465082	Identifier	result		3464956	0					
ANR	3465083	ReturnStatement	return result ;	631:2:15281:15294	3464956	25	True				
ANR	3465084	Identifier	result		3464956	0					
ANR	3465085	ReturnType	static int		3464956	1					
ANR	3465086	Identifier	rd_expr_and		3464956	2					
ANR	3465087	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3464956	3					
ANR	3465088	Parameter	const char * * p	613:13:14695:14708	3464956	0	True				
ANR	3465089	ParameterType	const char * *		3464956	0					
ANR	3465090	Identifier	p		3464956	1					
ANR	3465091	Parameter	int * valid	613:29:14711:14720	3464956	1	True				
ANR	3465092	ParameterType	int *		3464956	0					
ANR	3465093	Identifier	valid		3464956	1					
ANR	3465094	Parameter	int level	613:41:14723:14731	3464956	2	True				
ANR	3465095	ParameterType	int		3464956	0					
ANR	3465096	Identifier	level		3464956	1					
ANR	3465097	Parameter	int * check	613:52:14734:14743	3464956	3	True				
ANR	3465098	ParameterType	int *		3464956	0					
ANR	3465099	Identifier	check		3464956	1					
ANR	3465100	Parameter	int print_errors	614:6:14752:14767	3464956	4	True				
ANR	3465101	ParameterType	int		3464956	0					
ANR	3465102	Identifier	print_errors		3464956	1					
ANR	3465103	CFGEntryNode	ENTRY		3464956		True				
ANR	3465104	CFGExitNode	EXIT		3464956		True				
ANR	3465105	Symbol	* sp		3464956						
ANR	3465106	Symbol	stack		3464956						
ANR	3465107	Symbol	rd_expr_equal		3464956						
ANR	3465108	Symbol	level		3464956						
ANR	3465109	Symbol	check		3464956						
ANR	3465110	Symbol	stderr		3464956						
ANR	3465111	Symbol	verbose		3464956						
ANR	3465112	Symbol	p		3464956						
ANR	3465113	Symbol	valid		3464956						
ANR	3465114	Symbol	result		3464956						
ANR	3465115	Symbol	* check		3464956						
ANR	3465116	Symbol	print_errors		3464956						
ANR	3465117	Symbol	* stack		3464956						
ANR	3465118	Symbol	* p		3464956						
ANR	3465119	Symbol	stack [ sp ] . line		3464956						
ANR	3465120	Symbol	* * p		3464956						
ANR	3465121	Symbol	rd_expr_and		3464956						
ANR	3465122	Symbol	addr		3464956						
ANR	3465123	Symbol	delspc		3464956						
ANR	3465124	Symbol	sp		3464956						
ANR	3465125	Function	rd_expr_xor	634:0:15299:16075							
ANR	3465126	FunctionDef	"rd_expr_xor (const char * * p , int * valid , int level , int * check , int print_errors)"		3465125	0					
ANR	3465127	CompoundStatement		637:0:15398:16075	3465125	0					
ANR	3465128	IdentifierDeclStatement	int result ;	638:2:15402:15412	3465125	0	True				
ANR	3465129	IdentifierDecl	result		3465125	0					
ANR	3465130	IdentifierDeclType	int		3465125	0					
ANR	3465131	Identifier	result		3465125	1					
ANR	3465132	IfStatement	if ( verbose >= 6 )		3465125	1					
ANR	3465133	Condition	verbose >= 6	639:6:15420:15431	3465125	0	True				
ANR	3465134	RelationalExpression	verbose >= 6		3465125	0		>=			
ANR	3465135	Identifier	verbose		3465125	0					
ANR	3465136	PrimaryExpression	6		3465125	1					
ANR	3465137	Statement	fprintf	640:4:15438:15444	3465125	1	True				
ANR	3465138	Statement	(	640:12:15446:15446	3465125	2	True				
ANR	3465139	Statement	stderr	640:13:15447:15452	3465125	3	True				
ANR	3465140	Statement	","	640:19:15453:15453	3465125	4	True				
ANR	3465141	Statement	"""%5d (0x%04x): Starting to read xor expression """	640:21:15455:15502	3465125	5	True				
ANR	3465142	Statement	"""(string=%s).\\n"""	641:6:15510:15525	3465125	6	True				
ANR	3465143	Statement	","	641:22:15526:15526	3465125	7	True				
ANR	3465144	Statement	stack	641:24:15528:15532	3465125	8	True				
ANR	3465145	Statement	[	641:29:15533:15533	3465125	9	True				
ANR	3465146	Statement	sp	641:30:15534:15535	3465125	10	True				
ANR	3465147	Statement	]	641:32:15536:15536	3465125	11	True				
ANR	3465148	Statement	.	641:33:15537:15537	3465125	12	True				
ANR	3465149	Statement	line	641:34:15538:15541	3465125	13	True				
ANR	3465150	Statement	","	641:38:15542:15542	3465125	14	True				
ANR	3465151	Statement	addr	641:40:15544:15547	3465125	15	True				
ANR	3465152	Statement	","	641:44:15548:15548	3465125	16	True				
ANR	3465153	Statement	*	641:46:15550:15550	3465125	17	True				
ANR	3465154	Statement	p	641:47:15551:15551	3465125	18	True				
ANR	3465155	Statement	)	641:48:15552:15552	3465125	19	True				
ANR	3465156	ExpressionStatement		641:49:15553:15553	3465125	20	True				
ANR	3465157	ExpressionStatement	"result = rd_expr_and ( p , valid , level , check , print_errors )"	642:2:15557:15616	3465125	21	True				
ANR	3465158	AssignmentExpression	"result = rd_expr_and ( p , valid , level , check , print_errors )"		3465125	0		=			
ANR	3465159	Identifier	result		3465125	0					
ANR	3465160	CallExpression	"rd_expr_and ( p , valid , level , check , print_errors )"		3465125	1					
ANR	3465161	Callee	rd_expr_and		3465125	0					
ANR	3465162	Identifier	rd_expr_and		3465125	0					
ANR	3465163	ArgumentList	p		3465125	1					
ANR	3465164	Argument	p		3465125	0					
ANR	3465165	Identifier	p		3465125	0					
ANR	3465166	Argument	valid		3465125	1					
ANR	3465167	Identifier	valid		3465125	0					
ANR	3465168	Argument	level		3465125	2					
ANR	3465169	Identifier	level		3465125	0					
ANR	3465170	Argument	check		3465125	3					
ANR	3465171	Identifier	check		3465125	0					
ANR	3465172	Argument	print_errors		3465125	4					
ANR	3465173	Identifier	print_errors		3465125	0					
ANR	3465174	IfStatement	if ( verbose >= 7 )		3465125	22					
ANR	3465175	Condition	verbose >= 7	643:6:15624:15635	3465125	0	True				
ANR	3465176	RelationalExpression	verbose >= 7		3465125	0		>=			
ANR	3465177	Identifier	verbose		3465125	0					
ANR	3465178	PrimaryExpression	7		3465125	1					
ANR	3465179	Statement	fprintf	644:4:15642:15648	3465125	1	True				
ANR	3465180	Statement	(	644:12:15650:15650	3465125	23	True				
ANR	3465181	Statement	stderr	644:13:15651:15656	3465125	24	True				
ANR	3465182	Statement	","	644:19:15657:15657	3465125	25	True				
ANR	3465183	Statement	"""%5d (0x%04x): rd_expr_xor: rd_expr_and returned %d """	644:21:15659:15711	3465125	26	True				
ANR	3465184	Statement	"""(%04x).\\n"""	645:6:15719:15729	3465125	27	True				
ANR	3465185	Statement	","	645:17:15730:15730	3465125	28	True				
ANR	3465186	Statement	stack	645:19:15732:15736	3465125	29	True				
ANR	3465187	Statement	[	645:24:15737:15737	3465125	30	True				
ANR	3465188	Statement	sp	645:25:15738:15739	3465125	31	True				
ANR	3465189	Statement	]	645:27:15740:15740	3465125	32	True				
ANR	3465190	Statement	.	645:28:15741:15741	3465125	33	True				
ANR	3465191	Statement	line	645:29:15742:15745	3465125	34	True				
ANR	3465192	Statement	","	645:33:15746:15746	3465125	35	True				
ANR	3465193	Statement	addr	645:35:15748:15751	3465125	36	True				
ANR	3465194	Statement	","	645:39:15752:15752	3465125	37	True				
ANR	3465195	Statement	result	645:41:15754:15759	3465125	38	True				
ANR	3465196	Statement	","	645:47:15760:15760	3465125	39	True				
ANR	3465197	Statement	result	645:49:15762:15767	3465125	40	True				
ANR	3465198	Statement	)	645:55:15768:15768	3465125	41	True				
ANR	3465199	ExpressionStatement		645:56:15769:15769	3465125	42	True				
ANR	3465200	ExpressionStatement	* p = delspc ( * p )	646:2:15773:15789	3465125	43	True				
ANR	3465201	AssignmentExpression	* p = delspc ( * p )		3465125	0		=			
ANR	3465202	UnaryOperationExpression	* p		3465125	0					
ANR	3465203	UnaryOperator	*		3465125	0					
ANR	3465204	Identifier	p		3465125	1					
ANR	3465205	CallExpression	delspc ( * p )		3465125	1					
ANR	3465206	Callee	delspc		3465125	0					
ANR	3465207	Identifier	delspc		3465125	0					
ANR	3465208	ArgumentList	* p		3465125	1					
ANR	3465209	Argument	* p		3465125	0					
ANR	3465210	UnaryOperationExpression	* p		3465125	0					
ANR	3465211	UnaryOperator	*		3465125	0					
ANR	3465212	Identifier	p		3465125	1					
ANR	3465213	IfStatement	if ( * * p == '^' )		3465125	44					
ANR	3465214	Condition	* * p == '^'	647:6:15797:15806	3465125	0	True				
ANR	3465215	EqualityExpression	* * p == '^'		3465125	0		==			
ANR	3465216	UnaryOperationExpression	* * p		3465125	0					
ANR	3465217	UnaryOperator	*		3465125	0					
ANR	3465218	UnaryOperationExpression	* p		3465125	1					
ANR	3465219	UnaryOperator	*		3465125	0					
ANR	3465220	Identifier	p		3465125	1					
ANR	3465221	PrimaryExpression	'^'		3465125	1					
ANR	3465222	CompoundStatement		12:4:414:414	3465125	1					
ANR	3465223	ExpressionStatement	* check = 0	649:6:15821:15831	3465125	0	True				
ANR	3465224	AssignmentExpression	* check = 0		3465125	0		=			
ANR	3465225	UnaryOperationExpression	* check		3465125	0					
ANR	3465226	UnaryOperator	*		3465125	0					
ANR	3465227	Identifier	check		3465125	1					
ANR	3465228	PrimaryExpression	0		3465125	1					
ANR	3465229	ExpressionStatement	( * p ) ++	650:6:15839:15845	3465125	1	True				
ANR	3465230	PostIncDecOperationExpression	( * p ) ++		3465125	0					
ANR	3465231	UnaryOperationExpression	* p		3465125	0					
ANR	3465232	UnaryOperator	*		3465125	0					
ANR	3465233	Identifier	p		3465125	1					
ANR	3465234	IncDec	++		3465125	1					
ANR	3465235	ExpressionStatement	"result ^= rd_expr_xor ( p , valid , level , check , print_errors )"	651:6:15853:15913	3465125	2	True				
ANR	3465236	AssignmentExpression	"result ^= rd_expr_xor ( p , valid , level , check , print_errors )"		3465125	0		^=			
ANR	3465237	Identifier	result		3465125	0					
ANR	3465238	CallExpression	"rd_expr_xor ( p , valid , level , check , print_errors )"		3465125	1					
ANR	3465239	Callee	rd_expr_xor		3465125	0					
ANR	3465240	Identifier	rd_expr_xor		3465125	0					
ANR	3465241	ArgumentList	p		3465125	1					
ANR	3465242	Argument	p		3465125	0					
ANR	3465243	Identifier	p		3465125	0					
ANR	3465244	Argument	valid		3465125	1					
ANR	3465245	Identifier	valid		3465125	0					
ANR	3465246	Argument	level		3465125	2					
ANR	3465247	Identifier	level		3465125	0					
ANR	3465248	Argument	check		3465125	3					
ANR	3465249	Identifier	check		3465125	0					
ANR	3465250	Argument	print_errors		3465125	4					
ANR	3465251	Identifier	print_errors		3465125	0					
ANR	3465252	IfStatement	if ( verbose >= 7 )		3465125	45					
ANR	3465253	Condition	verbose >= 7	653:6:15927:15938	3465125	0	True				
ANR	3465254	RelationalExpression	verbose >= 7		3465125	0		>=			
ANR	3465255	Identifier	verbose		3465125	0					
ANR	3465256	PrimaryExpression	7		3465125	1					
ANR	3465257	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_xor returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	654:4:15945:16056	3465125	1	True				
ANR	3465258	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_xor returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3465125	0					
ANR	3465259	Callee	fprintf		3465125	0					
ANR	3465260	Identifier	fprintf		3465125	0					
ANR	3465261	ArgumentList	stderr		3465125	1					
ANR	3465262	Argument	stderr		3465125	0					
ANR	3465263	Identifier	stderr		3465125	0					
ANR	3465264	Argument	"""%5d (0x%04x): rd_expr_xor returned %d (%04x).\\n"""		3465125	1					
ANR	3465265	PrimaryExpression	"""%5d (0x%04x): rd_expr_xor returned %d (%04x).\\n"""		3465125	0					
ANR	3465266	Argument	stack [ sp ] . line		3465125	2					
ANR	3465267	MemberAccess	stack [ sp ] . line		3465125	0					
ANR	3465268	ArrayIndexing	stack [ sp ]		3465125	0					
ANR	3465269	Identifier	stack		3465125	0					
ANR	3465270	Identifier	sp		3465125	1					
ANR	3465271	Identifier	line		3465125	1					
ANR	3465272	Argument	addr		3465125	3					
ANR	3465273	Identifier	addr		3465125	0					
ANR	3465274	Argument	result		3465125	4					
ANR	3465275	Identifier	result		3465125	0					
ANR	3465276	Argument	result		3465125	5					
ANR	3465277	Identifier	result		3465125	0					
ANR	3465278	ReturnStatement	return result ;	656:2:16060:16073	3465125	46	True				
ANR	3465279	Identifier	result		3465125	0					
ANR	3465280	ReturnType	static int		3465125	1					
ANR	3465281	Identifier	rd_expr_xor		3465125	2					
ANR	3465282	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3465125	3					
ANR	3465283	Parameter	const char * * p	635:13:15323:15336	3465125	0	True				
ANR	3465284	ParameterType	const char * *		3465125	0					
ANR	3465285	Identifier	p		3465125	1					
ANR	3465286	Parameter	int * valid	635:29:15339:15348	3465125	1	True				
ANR	3465287	ParameterType	int *		3465125	0					
ANR	3465288	Identifier	valid		3465125	1					
ANR	3465289	Parameter	int level	635:41:15351:15359	3465125	2	True				
ANR	3465290	ParameterType	int		3465125	0					
ANR	3465291	Identifier	level		3465125	1					
ANR	3465292	Parameter	int * check	635:52:15362:15371	3465125	3	True				
ANR	3465293	ParameterType	int *		3465125	0					
ANR	3465294	Identifier	check		3465125	1					
ANR	3465295	Parameter	int print_errors	636:6:15380:15395	3465125	4	True				
ANR	3465296	ParameterType	int		3465125	0					
ANR	3465297	Identifier	print_errors		3465125	1					
ANR	3465298	CFGEntryNode	ENTRY		3465125		True				
ANR	3465299	CFGExitNode	EXIT		3465125		True				
ANR	3465300	Symbol	* sp		3465125						
ANR	3465301	Symbol	stack		3465125						
ANR	3465302	Symbol	level		3465125						
ANR	3465303	Symbol	check		3465125						
ANR	3465304	Symbol	stderr		3465125						
ANR	3465305	Symbol	verbose		3465125						
ANR	3465306	Symbol	p		3465125						
ANR	3465307	Symbol	valid		3465125						
ANR	3465308	Symbol	result		3465125						
ANR	3465309	Symbol	* check		3465125						
ANR	3465310	Symbol	print_errors		3465125						
ANR	3465311	Symbol	* stack		3465125						
ANR	3465312	Symbol	* p		3465125						
ANR	3465313	Symbol	stack [ sp ] . line		3465125						
ANR	3465314	Symbol	rd_expr_and		3465125						
ANR	3465315	Symbol	* * p		3465125						
ANR	3465316	Symbol	addr		3465125						
ANR	3465317	Symbol	delspc		3465125						
ANR	3465318	Symbol	sp		3465125						
ANR	3465319	Symbol	rd_expr_xor		3465125						
ANR	3465320	Function	rd_expr_or	659:0:16078:16848							
ANR	3465321	FunctionDef	"rd_expr_or (const char * * p , int * valid , int level , int * check , int print_errors)"		3465320	0					
ANR	3465322	CompoundStatement		662:0:16175:16848	3465320	0					
ANR	3465323	IdentifierDeclStatement	int result ;	663:2:16179:16189	3465320	0	True				
ANR	3465324	IdentifierDecl	result		3465320	0					
ANR	3465325	IdentifierDeclType	int		3465320	0					
ANR	3465326	Identifier	result		3465320	1					
ANR	3465327	IfStatement	if ( verbose >= 6 )		3465320	1					
ANR	3465328	Condition	verbose >= 6	664:6:16197:16208	3465320	0	True				
ANR	3465329	RelationalExpression	verbose >= 6		3465320	0		>=			
ANR	3465330	Identifier	verbose		3465320	0					
ANR	3465331	PrimaryExpression	6		3465320	1					
ANR	3465332	Statement	fprintf	665:4:16215:16221	3465320	1	True				
ANR	3465333	Statement	(	665:12:16223:16223	3465320	2	True				
ANR	3465334	Statement	stderr	665:13:16224:16229	3465320	3	True				
ANR	3465335	Statement	","	665:19:16230:16230	3465320	4	True				
ANR	3465336	Statement	"""%5d (0x%04x): Starting to read or expression """	665:21:16232:16278	3465320	5	True				
ANR	3465337	Statement	"""(string=%s).\\n"""	666:6:16286:16301	3465320	6	True				
ANR	3465338	Statement	","	666:22:16302:16302	3465320	7	True				
ANR	3465339	Statement	stack	666:24:16304:16308	3465320	8	True				
ANR	3465340	Statement	[	666:29:16309:16309	3465320	9	True				
ANR	3465341	Statement	sp	666:30:16310:16311	3465320	10	True				
ANR	3465342	Statement	]	666:32:16312:16312	3465320	11	True				
ANR	3465343	Statement	.	666:33:16313:16313	3465320	12	True				
ANR	3465344	Statement	line	666:34:16314:16317	3465320	13	True				
ANR	3465345	Statement	","	666:38:16318:16318	3465320	14	True				
ANR	3465346	Statement	addr	666:40:16320:16323	3465320	15	True				
ANR	3465347	Statement	","	666:44:16324:16324	3465320	16	True				
ANR	3465348	Statement	*	666:46:16326:16326	3465320	17	True				
ANR	3465349	Statement	p	666:47:16327:16327	3465320	18	True				
ANR	3465350	Statement	)	666:48:16328:16328	3465320	19	True				
ANR	3465351	ExpressionStatement		666:49:16329:16329	3465320	20	True				
ANR	3465352	ExpressionStatement	"result = rd_expr_xor ( p , valid , level , check , print_errors )"	667:2:16333:16392	3465320	21	True				
ANR	3465353	AssignmentExpression	"result = rd_expr_xor ( p , valid , level , check , print_errors )"		3465320	0		=			
ANR	3465354	Identifier	result		3465320	0					
ANR	3465355	CallExpression	"rd_expr_xor ( p , valid , level , check , print_errors )"		3465320	1					
ANR	3465356	Callee	rd_expr_xor		3465320	0					
ANR	3465357	Identifier	rd_expr_xor		3465320	0					
ANR	3465358	ArgumentList	p		3465320	1					
ANR	3465359	Argument	p		3465320	0					
ANR	3465360	Identifier	p		3465320	0					
ANR	3465361	Argument	valid		3465320	1					
ANR	3465362	Identifier	valid		3465320	0					
ANR	3465363	Argument	level		3465320	2					
ANR	3465364	Identifier	level		3465320	0					
ANR	3465365	Argument	check		3465320	3					
ANR	3465366	Identifier	check		3465320	0					
ANR	3465367	Argument	print_errors		3465320	4					
ANR	3465368	Identifier	print_errors		3465320	0					
ANR	3465369	IfStatement	if ( verbose >= 7 )		3465320	22					
ANR	3465370	Condition	verbose >= 7	668:6:16400:16411	3465320	0	True				
ANR	3465371	RelationalExpression	verbose >= 7		3465320	0		>=			
ANR	3465372	Identifier	verbose		3465320	0					
ANR	3465373	PrimaryExpression	7		3465320	1					
ANR	3465374	Statement	fprintf	669:4:16418:16424	3465320	1	True				
ANR	3465375	Statement	(	669:12:16426:16426	3465320	23	True				
ANR	3465376	Statement	stderr	669:13:16427:16432	3465320	24	True				
ANR	3465377	Statement	","	669:19:16433:16433	3465320	25	True				
ANR	3465378	Statement	"""%5d (0x%04x): rd_expr_or: rd_expr_xor returned %d """	669:21:16435:16486	3465320	26	True				
ANR	3465379	Statement	"""(%04x).\\n"""	670:6:16494:16504	3465320	27	True				
ANR	3465380	Statement	","	670:17:16505:16505	3465320	28	True				
ANR	3465381	Statement	stack	670:19:16507:16511	3465320	29	True				
ANR	3465382	Statement	[	670:24:16512:16512	3465320	30	True				
ANR	3465383	Statement	sp	670:25:16513:16514	3465320	31	True				
ANR	3465384	Statement	]	670:27:16515:16515	3465320	32	True				
ANR	3465385	Statement	.	670:28:16516:16516	3465320	33	True				
ANR	3465386	Statement	line	670:29:16517:16520	3465320	34	True				
ANR	3465387	Statement	","	670:33:16521:16521	3465320	35	True				
ANR	3465388	Statement	addr	670:35:16523:16526	3465320	36	True				
ANR	3465389	Statement	","	670:39:16527:16527	3465320	37	True				
ANR	3465390	Statement	result	670:41:16529:16534	3465320	38	True				
ANR	3465391	Statement	","	670:47:16535:16535	3465320	39	True				
ANR	3465392	Statement	result	670:49:16537:16542	3465320	40	True				
ANR	3465393	Statement	)	670:55:16543:16543	3465320	41	True				
ANR	3465394	ExpressionStatement		670:56:16544:16544	3465320	42	True				
ANR	3465395	ExpressionStatement	* p = delspc ( * p )	671:2:16548:16564	3465320	43	True				
ANR	3465396	AssignmentExpression	* p = delspc ( * p )		3465320	0		=			
ANR	3465397	UnaryOperationExpression	* p		3465320	0					
ANR	3465398	UnaryOperator	*		3465320	0					
ANR	3465399	Identifier	p		3465320	1					
ANR	3465400	CallExpression	delspc ( * p )		3465320	1					
ANR	3465401	Callee	delspc		3465320	0					
ANR	3465402	Identifier	delspc		3465320	0					
ANR	3465403	ArgumentList	* p		3465320	1					
ANR	3465404	Argument	* p		3465320	0					
ANR	3465405	UnaryOperationExpression	* p		3465320	0					
ANR	3465406	UnaryOperator	*		3465320	0					
ANR	3465407	Identifier	p		3465320	1					
ANR	3465408	IfStatement	if ( * * p == '|' )		3465320	44					
ANR	3465409	Condition	* * p == '|'	672:6:16572:16581	3465320	0	True				
ANR	3465410	EqualityExpression	* * p == '|'		3465320	0		==			
ANR	3465411	UnaryOperationExpression	* * p		3465320	0					
ANR	3465412	UnaryOperator	*		3465320	0					
ANR	3465413	UnaryOperationExpression	* p		3465320	1					
ANR	3465414	UnaryOperator	*		3465320	0					
ANR	3465415	Identifier	p		3465320	1					
ANR	3465416	PrimaryExpression	'|'		3465320	1					
ANR	3465417	CompoundStatement		12:4:412:412	3465320	1					
ANR	3465418	ExpressionStatement	* check = 0	674:6:16596:16606	3465320	0	True				
ANR	3465419	AssignmentExpression	* check = 0		3465320	0		=			
ANR	3465420	UnaryOperationExpression	* check		3465320	0					
ANR	3465421	UnaryOperator	*		3465320	0					
ANR	3465422	Identifier	check		3465320	1					
ANR	3465423	PrimaryExpression	0		3465320	1					
ANR	3465424	ExpressionStatement	( * p ) ++	675:6:16614:16620	3465320	1	True				
ANR	3465425	PostIncDecOperationExpression	( * p ) ++		3465320	0					
ANR	3465426	UnaryOperationExpression	* p		3465320	0					
ANR	3465427	UnaryOperator	*		3465320	0					
ANR	3465428	Identifier	p		3465320	1					
ANR	3465429	IncDec	++		3465320	1					
ANR	3465430	ExpressionStatement	"result |= rd_expr_or ( p , valid , level , check , print_errors )"	676:6:16628:16687	3465320	2	True				
ANR	3465431	AssignmentExpression	"result |= rd_expr_or ( p , valid , level , check , print_errors )"		3465320	0		|=			
ANR	3465432	Identifier	result		3465320	0					
ANR	3465433	CallExpression	"rd_expr_or ( p , valid , level , check , print_errors )"		3465320	1					
ANR	3465434	Callee	rd_expr_or		3465320	0					
ANR	3465435	Identifier	rd_expr_or		3465320	0					
ANR	3465436	ArgumentList	p		3465320	1					
ANR	3465437	Argument	p		3465320	0					
ANR	3465438	Identifier	p		3465320	0					
ANR	3465439	Argument	valid		3465320	1					
ANR	3465440	Identifier	valid		3465320	0					
ANR	3465441	Argument	level		3465320	2					
ANR	3465442	Identifier	level		3465320	0					
ANR	3465443	Argument	check		3465320	3					
ANR	3465444	Identifier	check		3465320	0					
ANR	3465445	Argument	print_errors		3465320	4					
ANR	3465446	Identifier	print_errors		3465320	0					
ANR	3465447	IfStatement	if ( verbose >= 7 )		3465320	45					
ANR	3465448	Condition	verbose >= 7	678:6:16701:16712	3465320	0	True				
ANR	3465449	RelationalExpression	verbose >= 7		3465320	0		>=			
ANR	3465450	Identifier	verbose		3465320	0					
ANR	3465451	PrimaryExpression	7		3465320	1					
ANR	3465452	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_or returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	679:4:16719:16829	3465320	1	True				
ANR	3465453	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_expr_or returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3465320	0					
ANR	3465454	Callee	fprintf		3465320	0					
ANR	3465455	Identifier	fprintf		3465320	0					
ANR	3465456	ArgumentList	stderr		3465320	1					
ANR	3465457	Argument	stderr		3465320	0					
ANR	3465458	Identifier	stderr		3465320	0					
ANR	3465459	Argument	"""%5d (0x%04x): rd_expr_or returned %d (%04x).\\n"""		3465320	1					
ANR	3465460	PrimaryExpression	"""%5d (0x%04x): rd_expr_or returned %d (%04x).\\n"""		3465320	0					
ANR	3465461	Argument	stack [ sp ] . line		3465320	2					
ANR	3465462	MemberAccess	stack [ sp ] . line		3465320	0					
ANR	3465463	ArrayIndexing	stack [ sp ]		3465320	0					
ANR	3465464	Identifier	stack		3465320	0					
ANR	3465465	Identifier	sp		3465320	1					
ANR	3465466	Identifier	line		3465320	1					
ANR	3465467	Argument	addr		3465320	3					
ANR	3465468	Identifier	addr		3465320	0					
ANR	3465469	Argument	result		3465320	4					
ANR	3465470	Identifier	result		3465320	0					
ANR	3465471	Argument	result		3465320	5					
ANR	3465472	Identifier	result		3465320	0					
ANR	3465473	ReturnStatement	return result ;	681:2:16833:16846	3465320	46	True				
ANR	3465474	Identifier	result		3465320	0					
ANR	3465475	ReturnType	static int		3465320	1					
ANR	3465476	Identifier	rd_expr_or		3465320	2					
ANR	3465477	ParameterList	"const char * * p , int * valid , int level , int * check , int print_errors"		3465320	3					
ANR	3465478	Parameter	const char * * p	660:12:16101:16114	3465320	0	True				
ANR	3465479	ParameterType	const char * *		3465320	0					
ANR	3465480	Identifier	p		3465320	1					
ANR	3465481	Parameter	int * valid	660:28:16117:16126	3465320	1	True				
ANR	3465482	ParameterType	int *		3465320	0					
ANR	3465483	Identifier	valid		3465320	1					
ANR	3465484	Parameter	int level	660:40:16129:16137	3465320	2	True				
ANR	3465485	ParameterType	int		3465320	0					
ANR	3465486	Identifier	level		3465320	1					
ANR	3465487	Parameter	int * check	660:51:16140:16149	3465320	3	True				
ANR	3465488	ParameterType	int *		3465320	0					
ANR	3465489	Identifier	check		3465320	1					
ANR	3465490	Parameter	int print_errors	661:5:16157:16172	3465320	4	True				
ANR	3465491	ParameterType	int		3465320	0					
ANR	3465492	Identifier	print_errors		3465320	1					
ANR	3465493	CFGEntryNode	ENTRY		3465320		True				
ANR	3465494	CFGExitNode	EXIT		3465320		True				
ANR	3465495	Symbol	* sp		3465320						
ANR	3465496	Symbol	stack		3465320						
ANR	3465497	Symbol	level		3465320						
ANR	3465498	Symbol	check		3465320						
ANR	3465499	Symbol	stderr		3465320						
ANR	3465500	Symbol	verbose		3465320						
ANR	3465501	Symbol	p		3465320						
ANR	3465502	Symbol	valid		3465320						
ANR	3465503	Symbol	result		3465320						
ANR	3465504	Symbol	* check		3465320						
ANR	3465505	Symbol	print_errors		3465320						
ANR	3465506	Symbol	rd_expr_or		3465320						
ANR	3465507	Symbol	* stack		3465320						
ANR	3465508	Symbol	* p		3465320						
ANR	3465509	Symbol	stack [ sp ] . line		3465320						
ANR	3465510	Symbol	* * p		3465320						
ANR	3465511	Symbol	addr		3465320						
ANR	3465512	Symbol	delspc		3465320						
ANR	3465513	Symbol	sp		3465320						
ANR	3465514	Symbol	rd_expr_xor		3465320						
ANR	3465515	Function	do_rd_expr	684:0:16851:18393							
ANR	3465516	FunctionDef	"do_rd_expr (const char * * p , char delimiter , int * valid , int level , int * check , int print_errors)"		3465515	0					
ANR	3465517	CompoundStatement		687:0:16964:18393	3465515	0					
ANR	3465518	IdentifierDeclStatement	int result = 0 ;	689:2:17023:17037	3465515	0	True				
ANR	3465519	IdentifierDecl	result = 0		3465515	0					
ANR	3465520	IdentifierDeclType	int		3465515	0					
ANR	3465521	Identifier	result		3465515	1					
ANR	3465522	AssignmentExpression	result = 0		3465515	2		=			
ANR	3465523	Identifier	result		3465515	0					
ANR	3465524	PrimaryExpression	0		3465515	1					
ANR	3465525	IfStatement	if ( verbose >= 6 )		3465515	1					
ANR	3465526	Condition	verbose >= 6	690:6:17045:17056	3465515	0	True				
ANR	3465527	RelationalExpression	verbose >= 6		3465515	0		>=			
ANR	3465528	Identifier	verbose		3465515	0					
ANR	3465529	PrimaryExpression	6		3465515	1					
ANR	3465530	Statement	fprintf	691:4:17063:17069	3465515	1	True				
ANR	3465531	Statement	(	691:12:17071:17071	3465515	2	True				
ANR	3465532	Statement	stderr	691:13:17072:17077	3465515	3	True				
ANR	3465533	Statement	","	691:19:17078:17078	3465515	4	True				
ANR	3465534	Statement	"""%5d (0x%04x): Starting to read expression """	692:6:17086:17129	3465515	5	True				
ANR	3465535	Statement	"""(string=%s, delimiter=%c).\\n"""	693:6:17137:17166	3465515	6	True				
ANR	3465536	Statement	","	693:36:17167:17167	3465515	7	True				
ANR	3465537	Statement	stack	693:38:17169:17173	3465515	8	True				
ANR	3465538	Statement	[	693:43:17174:17174	3465515	9	True				
ANR	3465539	Statement	sp	693:44:17175:17176	3465515	10	True				
ANR	3465540	Statement	]	693:46:17177:17177	3465515	11	True				
ANR	3465541	Statement	.	693:47:17178:17178	3465515	12	True				
ANR	3465542	Statement	line	693:48:17179:17182	3465515	13	True				
ANR	3465543	Statement	","	693:52:17183:17183	3465515	14	True				
ANR	3465544	Statement	addr	693:54:17185:17188	3465515	15	True				
ANR	3465545	Statement	","	693:58:17189:17189	3465515	16	True				
ANR	3465546	Statement	*	693:60:17191:17191	3465515	17	True				
ANR	3465547	Statement	p	693:61:17192:17192	3465515	18	True				
ANR	3465548	Statement	","	693:62:17193:17193	3465515	19	True				
ANR	3465549	Statement	delimiter	694:6:17201:17209	3465515	20	True				
ANR	3465550	Statement	?	694:16:17211:17211	3465515	21	True				
ANR	3465551	Label	delimiter :	694:18:17213:17223	3465515	22	True				
ANR	3465552	Identifier	delimiter		3465515	0					
ANR	3465553	Statement	' '	694:30:17225:17227	3465515	23	True				
ANR	3465554	Statement	)	694:33:17228:17228	3465515	24	True				
ANR	3465555	ExpressionStatement		694:34:17229:17229	3465515	25	True				
ANR	3465556	ExpressionStatement	* p = delspc ( * p )	695:2:17233:17249	3465515	26	True				
ANR	3465557	AssignmentExpression	* p = delspc ( * p )		3465515	0		=			
ANR	3465558	UnaryOperationExpression	* p		3465515	0					
ANR	3465559	UnaryOperator	*		3465515	0					
ANR	3465560	Identifier	p		3465515	1					
ANR	3465561	CallExpression	delspc ( * p )		3465515	1					
ANR	3465562	Callee	delspc		3465515	0					
ANR	3465563	Identifier	delspc		3465515	0					
ANR	3465564	ArgumentList	* p		3465515	1					
ANR	3465565	Argument	* p		3465515	0					
ANR	3465566	UnaryOperationExpression	* p		3465515	0					
ANR	3465567	UnaryOperator	*		3465515	0					
ANR	3465568	Identifier	p		3465515	1					
ANR	3465569	IfStatement	if ( ! * * p || * * p == delimiter )		3465515	27					
ANR	3465570	Condition	! * * p || * * p == delimiter	696:6:17257:17280	3465515	0	True				
ANR	3465571	OrExpression	! * * p || * * p == delimiter		3465515	0		||			
ANR	3465572	UnaryOperationExpression	! * * p		3465515	0					
ANR	3465573	UnaryOperator	!		3465515	0					
ANR	3465574	UnaryOperationExpression	* * p		3465515	1					
ANR	3465575	UnaryOperator	*		3465515	0					
ANR	3465576	UnaryOperationExpression	* p		3465515	1					
ANR	3465577	UnaryOperator	*		3465515	0					
ANR	3465578	Identifier	p		3465515	1					
ANR	3465579	EqualityExpression	* * p == delimiter		3465515	1		==			
ANR	3465580	UnaryOperationExpression	* * p		3465515	0					
ANR	3465581	UnaryOperator	*		3465515	0					
ANR	3465582	UnaryOperationExpression	* p		3465515	1					
ANR	3465583	UnaryOperator	*		3465515	0					
ANR	3465584	Identifier	p		3465515	1					
ANR	3465585	Identifier	delimiter		3465515	1					
ANR	3465586	CompoundStatement		11:4:322:322	3465515	1					
ANR	3465587	IfStatement	if ( valid )		3465515	0					
ANR	3465588	Condition	valid	698:10:17299:17303	3465515	0	True				
ANR	3465589	Identifier	valid		3465515	0					
ANR	3465590	ExpressionStatement	* valid = 0	699:1:17307:17317	3465515	1	True				
ANR	3465591	AssignmentExpression	* valid = 0		3465515	0		=			
ANR	3465592	UnaryOperationExpression	* valid		3465515	0					
ANR	3465593	UnaryOperator	*		3465515	0					
ANR	3465594	Identifier	valid		3465515	1					
ANR	3465595	PrimaryExpression	0		3465515	1					
ANR	3465596	ElseStatement	else		3465515	0					
ANR	3465597	IfStatement	if ( print_errors )		3465515	0					
ANR	3465598	Condition	print_errors	700:15:17334:17345	3465515	0	True				
ANR	3465599	Identifier	print_errors		3465515	0					
ANR	3465600	ExpressionStatement	"printerr ( 1 , ""expression expected (not %s)\\n"" , * p )"	701:1:17349:17399	3465515	1	True				
ANR	3465601	CallExpression	"printerr ( 1 , ""expression expected (not %s)\\n"" , * p )"		3465515	0					
ANR	3465602	Callee	printerr		3465515	0					
ANR	3465603	Identifier	printerr		3465515	0					
ANR	3465604	ArgumentList	1		3465515	1					
ANR	3465605	Argument	1		3465515	0					
ANR	3465606	PrimaryExpression	1		3465515	0					
ANR	3465607	Argument	"""expression expected (not %s)\\n"""		3465515	1					
ANR	3465608	PrimaryExpression	"""expression expected (not %s)\\n"""		3465515	0					
ANR	3465609	Argument	* p		3465515	2					
ANR	3465610	UnaryOperationExpression	* p		3465515	0					
ANR	3465611	UnaryOperator	*		3465515	0					
ANR	3465612	Identifier	p		3465515	1					
ANR	3465613	ReturnStatement	return 0 ;	702:6:17407:17415	3465515	1	True				
ANR	3465614	PrimaryExpression	0		3465515	0					
ANR	3465615	ExpressionStatement	"result = rd_expr_or ( p , valid , level , check , print_errors )"	704:2:17425:17483	3465515	28	True				
ANR	3465616	AssignmentExpression	"result = rd_expr_or ( p , valid , level , check , print_errors )"		3465515	0		=			
ANR	3465617	Identifier	result		3465515	0					
ANR	3465618	CallExpression	"rd_expr_or ( p , valid , level , check , print_errors )"		3465515	1					
ANR	3465619	Callee	rd_expr_or		3465515	0					
ANR	3465620	Identifier	rd_expr_or		3465515	0					
ANR	3465621	ArgumentList	p		3465515	1					
ANR	3465622	Argument	p		3465515	0					
ANR	3465623	Identifier	p		3465515	0					
ANR	3465624	Argument	valid		3465515	1					
ANR	3465625	Identifier	valid		3465515	0					
ANR	3465626	Argument	level		3465515	2					
ANR	3465627	Identifier	level		3465515	0					
ANR	3465628	Argument	check		3465515	3					
ANR	3465629	Identifier	check		3465515	0					
ANR	3465630	Argument	print_errors		3465515	4					
ANR	3465631	Identifier	print_errors		3465515	0					
ANR	3465632	ExpressionStatement	* p = delspc ( * p )	705:2:17487:17503	3465515	29	True				
ANR	3465633	AssignmentExpression	* p = delspc ( * p )		3465515	0		=			
ANR	3465634	UnaryOperationExpression	* p		3465515	0					
ANR	3465635	UnaryOperator	*		3465515	0					
ANR	3465636	Identifier	p		3465515	1					
ANR	3465637	CallExpression	delspc ( * p )		3465515	1					
ANR	3465638	Callee	delspc		3465515	0					
ANR	3465639	Identifier	delspc		3465515	0					
ANR	3465640	ArgumentList	* p		3465515	1					
ANR	3465641	Argument	* p		3465515	0					
ANR	3465642	UnaryOperationExpression	* p		3465515	0					
ANR	3465643	UnaryOperator	*		3465515	0					
ANR	3465644	Identifier	p		3465515	1					
ANR	3465645	IfStatement	if ( * * p == '?' )		3465515	30					
ANR	3465646	Condition	* * p == '?'	706:6:17511:17520	3465515	0	True				
ANR	3465647	EqualityExpression	* * p == '?'		3465515	0		==			
ANR	3465648	UnaryOperationExpression	* * p		3465515	0					
ANR	3465649	UnaryOperator	*		3465515	0					
ANR	3465650	UnaryOperationExpression	* p		3465515	1					
ANR	3465651	UnaryOperator	*		3465515	0					
ANR	3465652	Identifier	p		3465515	1					
ANR	3465653	PrimaryExpression	'?'		3465515	1					
ANR	3465654	CompoundStatement		21:4:562:562	3465515	1					
ANR	3465655	ExpressionStatement	* check = 0	708:6:17535:17545	3465515	0	True				
ANR	3465656	AssignmentExpression	* check = 0		3465515	0		=			
ANR	3465657	UnaryOperationExpression	* check		3465515	0					
ANR	3465658	UnaryOperator	*		3465515	0					
ANR	3465659	Identifier	check		3465515	1					
ANR	3465660	PrimaryExpression	0		3465515	1					
ANR	3465661	ExpressionStatement	( * p ) ++	709:6:17553:17559	3465515	1	True				
ANR	3465662	PostIncDecOperationExpression	( * p ) ++		3465515	0					
ANR	3465663	UnaryOperationExpression	* p		3465515	0					
ANR	3465664	UnaryOperator	*		3465515	0					
ANR	3465665	Identifier	p		3465515	1					
ANR	3465666	IncDec	++		3465515	1					
ANR	3465667	IfStatement	if ( result )		3465515	2					
ANR	3465668	Condition	result	710:10:17571:17576	3465515	0	True				
ANR	3465669	Identifier	result		3465515	0					
ANR	3465670	CompoundStatement		25:1:615:615	3465515	1					
ANR	3465671	ExpressionStatement	"result = do_rd_expr ( p , ':' , valid , level , check , print_errors )"	712:3:17585:17648	3465515	0	True				
ANR	3465672	AssignmentExpression	"result = do_rd_expr ( p , ':' , valid , level , check , print_errors )"		3465515	0		=			
ANR	3465673	Identifier	result		3465515	0					
ANR	3465674	CallExpression	"do_rd_expr ( p , ':' , valid , level , check , print_errors )"		3465515	1					
ANR	3465675	Callee	do_rd_expr		3465515	0					
ANR	3465676	Identifier	do_rd_expr		3465515	0					
ANR	3465677	ArgumentList	p		3465515	1					
ANR	3465678	Argument	p		3465515	0					
ANR	3465679	Identifier	p		3465515	0					
ANR	3465680	Argument	':'		3465515	1					
ANR	3465681	PrimaryExpression	':'		3465515	0					
ANR	3465682	Argument	valid		3465515	2					
ANR	3465683	Identifier	valid		3465515	0					
ANR	3465684	Argument	level		3465515	3					
ANR	3465685	Identifier	level		3465515	0					
ANR	3465686	Argument	check		3465515	4					
ANR	3465687	Identifier	check		3465515	0					
ANR	3465688	Argument	print_errors		3465515	5					
ANR	3465689	Identifier	print_errors		3465515	0					
ANR	3465690	IfStatement	if ( * * p )		3465515	1					
ANR	3465691	Condition	* * p	713:7:17657:17659	3465515	0	True				
ANR	3465692	UnaryOperationExpression	* * p		3465515	0					
ANR	3465693	UnaryOperator	*		3465515	0					
ANR	3465694	UnaryOperationExpression	* p		3465515	1					
ANR	3465695	UnaryOperator	*		3465515	0					
ANR	3465696	Identifier	p		3465515	1					
ANR	3465697	ExpressionStatement	( * p ) ++	714:5:17667:17673	3465515	1	True				
ANR	3465698	PostIncDecOperationExpression	( * p ) ++		3465515	0					
ANR	3465699	UnaryOperationExpression	* p		3465515	0					
ANR	3465700	UnaryOperator	*		3465515	0					
ANR	3465701	Identifier	p		3465515	1					
ANR	3465702	IncDec	++		3465515	1					
ANR	3465703	ExpressionStatement	"do_rd_expr ( p , delimiter , valid , level , check , print_errors )"	715:3:17678:17738	3465515	2	True				
ANR	3465704	CallExpression	"do_rd_expr ( p , delimiter , valid , level , check , print_errors )"		3465515	0					
ANR	3465705	Callee	do_rd_expr		3465515	0					
ANR	3465706	Identifier	do_rd_expr		3465515	0					
ANR	3465707	ArgumentList	p		3465515	1					
ANR	3465708	Argument	p		3465515	0					
ANR	3465709	Identifier	p		3465515	0					
ANR	3465710	Argument	delimiter		3465515	1					
ANR	3465711	Identifier	delimiter		3465515	0					
ANR	3465712	Argument	valid		3465515	2					
ANR	3465713	Identifier	valid		3465515	0					
ANR	3465714	Argument	level		3465515	3					
ANR	3465715	Identifier	level		3465515	0					
ANR	3465716	Argument	check		3465515	4					
ANR	3465717	Identifier	check		3465515	0					
ANR	3465718	Argument	print_errors		3465515	5					
ANR	3465719	Identifier	print_errors		3465515	0					
ANR	3465720	ElseStatement	else		3465515	0					
ANR	3465721	CompoundStatement		32:1:790:790	3465515	0					
ANR	3465722	ExpressionStatement	"do_rd_expr ( p , ':' , valid , level , check , print_errors )"	719:3:17760:17814	3465515	0	True				
ANR	3465723	CallExpression	"do_rd_expr ( p , ':' , valid , level , check , print_errors )"		3465515	0					
ANR	3465724	Callee	do_rd_expr		3465515	0					
ANR	3465725	Identifier	do_rd_expr		3465515	0					
ANR	3465726	ArgumentList	p		3465515	1					
ANR	3465727	Argument	p		3465515	0					
ANR	3465728	Identifier	p		3465515	0					
ANR	3465729	Argument	':'		3465515	1					
ANR	3465730	PrimaryExpression	':'		3465515	0					
ANR	3465731	Argument	valid		3465515	2					
ANR	3465732	Identifier	valid		3465515	0					
ANR	3465733	Argument	level		3465515	3					
ANR	3465734	Identifier	level		3465515	0					
ANR	3465735	Argument	check		3465515	4					
ANR	3465736	Identifier	check		3465515	0					
ANR	3465737	Argument	print_errors		3465515	5					
ANR	3465738	Identifier	print_errors		3465515	0					
ANR	3465739	IfStatement	if ( * * p )		3465515	1					
ANR	3465740	Condition	* * p	720:7:17823:17825	3465515	0	True				
ANR	3465741	UnaryOperationExpression	* * p		3465515	0					
ANR	3465742	UnaryOperator	*		3465515	0					
ANR	3465743	UnaryOperationExpression	* p		3465515	1					
ANR	3465744	UnaryOperator	*		3465515	0					
ANR	3465745	Identifier	p		3465515	1					
ANR	3465746	ExpressionStatement	( * p ) ++	721:5:17833:17839	3465515	1	True				
ANR	3465747	PostIncDecOperationExpression	( * p ) ++		3465515	0					
ANR	3465748	UnaryOperationExpression	* p		3465515	0					
ANR	3465749	UnaryOperator	*		3465515	0					
ANR	3465750	Identifier	p		3465515	1					
ANR	3465751	IncDec	++		3465515	1					
ANR	3465752	ExpressionStatement	"result = do_rd_expr ( p , delimiter , valid , level , check , print_errors )"	722:3:17844:17923	3465515	2	True				
ANR	3465753	AssignmentExpression	"result = do_rd_expr ( p , delimiter , valid , level , check , print_errors )"		3465515	0		=			
ANR	3465754	Identifier	result		3465515	0					
ANR	3465755	CallExpression	"do_rd_expr ( p , delimiter , valid , level , check , print_errors )"		3465515	1					
ANR	3465756	Callee	do_rd_expr		3465515	0					
ANR	3465757	Identifier	do_rd_expr		3465515	0					
ANR	3465758	ArgumentList	p		3465515	1					
ANR	3465759	Argument	p		3465515	0					
ANR	3465760	Identifier	p		3465515	0					
ANR	3465761	Argument	delimiter		3465515	1					
ANR	3465762	Identifier	delimiter		3465515	0					
ANR	3465763	Argument	valid		3465515	2					
ANR	3465764	Identifier	valid		3465515	0					
ANR	3465765	Argument	level		3465515	3					
ANR	3465766	Identifier	level		3465515	0					
ANR	3465767	Argument	check		3465515	4					
ANR	3465768	Identifier	check		3465515	0					
ANR	3465769	Argument	print_errors		3465515	5					
ANR	3465770	Identifier	print_errors		3465515	0					
ANR	3465771	ExpressionStatement	* p = delspc ( * p )	726:2:17936:17952	3465515	31	True				
ANR	3465772	AssignmentExpression	* p = delspc ( * p )		3465515	0		=			
ANR	3465773	UnaryOperationExpression	* p		3465515	0					
ANR	3465774	UnaryOperator	*		3465515	0					
ANR	3465775	Identifier	p		3465515	1					
ANR	3465776	CallExpression	delspc ( * p )		3465515	1					
ANR	3465777	Callee	delspc		3465515	0					
ANR	3465778	Identifier	delspc		3465515	0					
ANR	3465779	ArgumentList	* p		3465515	1					
ANR	3465780	Argument	* p		3465515	0					
ANR	3465781	UnaryOperationExpression	* p		3465515	0					
ANR	3465782	UnaryOperator	*		3465515	0					
ANR	3465783	Identifier	p		3465515	1					
ANR	3465784	IfStatement	if ( * * p && * * p != delimiter )		3465515	32					
ANR	3465785	Condition	* * p && * * p != delimiter	727:6:17960:17982	3465515	0	True				
ANR	3465786	AndExpression	* * p && * * p != delimiter		3465515	0		&&			
ANR	3465787	UnaryOperationExpression	* * p		3465515	0					
ANR	3465788	UnaryOperator	*		3465515	0					
ANR	3465789	UnaryOperationExpression	* p		3465515	1					
ANR	3465790	UnaryOperator	*		3465515	0					
ANR	3465791	Identifier	p		3465515	1					
ANR	3465792	EqualityExpression	* * p != delimiter		3465515	1		!=			
ANR	3465793	UnaryOperationExpression	* * p		3465515	0					
ANR	3465794	UnaryOperator	*		3465515	0					
ANR	3465795	UnaryOperationExpression	* p		3465515	1					
ANR	3465796	UnaryOperator	*		3465515	0					
ANR	3465797	Identifier	p		3465515	1					
ANR	3465798	Identifier	delimiter		3465515	1					
ANR	3465799	CompoundStatement		42:4:1024:1024	3465515	1					
ANR	3465800	IfStatement	if ( valid )		3465515	0					
ANR	3465801	Condition	valid	729:10:18001:18005	3465515	0	True				
ANR	3465802	Identifier	valid		3465515	0					
ANR	3465803	ExpressionStatement	* valid = 0	730:1:18009:18019	3465515	1	True				
ANR	3465804	AssignmentExpression	* valid = 0		3465515	0		=			
ANR	3465805	UnaryOperationExpression	* valid		3465515	0					
ANR	3465806	UnaryOperator	*		3465515	0					
ANR	3465807	Identifier	valid		3465515	1					
ANR	3465808	PrimaryExpression	0		3465515	1					
ANR	3465809	ElseStatement	else		3465515	0					
ANR	3465810	IfStatement	if ( print_errors )		3465515	0					
ANR	3465811	Condition	print_errors	731:15:18036:18047	3465515	0	True				
ANR	3465812	Identifier	print_errors		3465515	0					
ANR	3465813	ExpressionStatement	"printerr ( 1 , ""junk at end of expression: %s\\n"" , * p )"	732:1:18051:18102	3465515	1	True				
ANR	3465814	CallExpression	"printerr ( 1 , ""junk at end of expression: %s\\n"" , * p )"		3465515	0					
ANR	3465815	Callee	printerr		3465515	0					
ANR	3465816	Identifier	printerr		3465515	0					
ANR	3465817	ArgumentList	1		3465515	1					
ANR	3465818	Argument	1		3465515	0					
ANR	3465819	PrimaryExpression	1		3465515	0					
ANR	3465820	Argument	"""junk at end of expression: %s\\n"""		3465515	1					
ANR	3465821	PrimaryExpression	"""junk at end of expression: %s\\n"""		3465515	0					
ANR	3465822	Argument	* p		3465515	2					
ANR	3465823	UnaryOperationExpression	* p		3465515	0					
ANR	3465824	UnaryOperator	*		3465515	0					
ANR	3465825	Identifier	p		3465515	1					
ANR	3465826	IfStatement	if ( verbose >= 7 )		3465515	33					
ANR	3465827	Condition	verbose >= 7	734:6:18116:18127	3465515	0	True				
ANR	3465828	RelationalExpression	verbose >= 7		3465515	0		>=			
ANR	3465829	Identifier	verbose		3465515	0					
ANR	3465830	PrimaryExpression	7		3465515	1					
ANR	3465831	CompoundStatement		49:4:1169:1169	3465515	1					
ANR	3465832	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): rd_expr returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"	736:6:18142:18251	3465515	0	True				
ANR	3465833	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): rd_expr returned %d (%04x).\\n"" , stack [ sp ] . line , addr , result , result )"		3465515	0					
ANR	3465834	Callee	fprintf		3465515	0					
ANR	3465835	Identifier	fprintf		3465515	0					
ANR	3465836	ArgumentList	stderr		3465515	1					
ANR	3465837	Argument	stderr		3465515	0					
ANR	3465838	Identifier	stderr		3465515	0					
ANR	3465839	Argument	"""%5d (0x%04x): rd_expr returned %d (%04x).\\n"""		3465515	1					
ANR	3465840	PrimaryExpression	"""%5d (0x%04x): rd_expr returned %d (%04x).\\n"""		3465515	0					
ANR	3465841	Argument	stack [ sp ] . line		3465515	2					
ANR	3465842	MemberAccess	stack [ sp ] . line		3465515	0					
ANR	3465843	ArrayIndexing	stack [ sp ]		3465515	0					
ANR	3465844	Identifier	stack		3465515	0					
ANR	3465845	Identifier	sp		3465515	1					
ANR	3465846	Identifier	line		3465515	1					
ANR	3465847	Argument	addr		3465515	3					
ANR	3465848	Identifier	addr		3465515	0					
ANR	3465849	Argument	result		3465515	4					
ANR	3465850	Identifier	result		3465515	0					
ANR	3465851	Argument	result		3465515	5					
ANR	3465852	Identifier	result		3465515	0					
ANR	3465853	IfStatement	if ( valid && ! * valid )		3465515	1					
ANR	3465854	Condition	valid && ! * valid	738:10:18263:18278	3465515	0	True				
ANR	3465855	AndExpression	valid && ! * valid		3465515	0		&&			
ANR	3465856	Identifier	valid		3465515	0					
ANR	3465857	UnaryOperationExpression	! * valid		3465515	1					
ANR	3465858	UnaryOperator	!		3465515	0					
ANR	3465859	UnaryOperationExpression	* valid		3465515	1					
ANR	3465860	UnaryOperator	*		3465515	0					
ANR	3465861	Identifier	valid		3465515	1					
ANR	3465862	ExpressionStatement	"fprintf ( stderr , ""%5d (0x%04x): Returning invalid result.\\n"" , stack [ sp ] . line , addr )"	739:1:18282:18368	3465515	1	True				
ANR	3465863	CallExpression	"fprintf ( stderr , ""%5d (0x%04x): Returning invalid result.\\n"" , stack [ sp ] . line , addr )"		3465515	0					
ANR	3465864	Callee	fprintf		3465515	0					
ANR	3465865	Identifier	fprintf		3465515	0					
ANR	3465866	ArgumentList	stderr		3465515	1					
ANR	3465867	Argument	stderr		3465515	0					
ANR	3465868	Identifier	stderr		3465515	0					
ANR	3465869	Argument	"""%5d (0x%04x): Returning invalid result.\\n"""		3465515	1					
ANR	3465870	PrimaryExpression	"""%5d (0x%04x): Returning invalid result.\\n"""		3465515	0					
ANR	3465871	Argument	stack [ sp ] . line		3465515	2					
ANR	3465872	MemberAccess	stack [ sp ] . line		3465515	0					
ANR	3465873	ArrayIndexing	stack [ sp ]		3465515	0					
ANR	3465874	Identifier	stack		3465515	0					
ANR	3465875	Identifier	sp		3465515	1					
ANR	3465876	Identifier	line		3465515	1					
ANR	3465877	Argument	addr		3465515	3					
ANR	3465878	Identifier	addr		3465515	0					
ANR	3465879	ReturnStatement	return result ;	742:2:18378:18391	3465515	34	True				
ANR	3465880	Identifier	result		3465515	0					
ANR	3465881	ReturnType	static int		3465515	1					
ANR	3465882	Identifier	do_rd_expr		3465515	2					
ANR	3465883	ParameterList	"const char * * p , char delimiter , int * valid , int level , int * check , int print_errors"		3465515	3					
ANR	3465884	Parameter	const char * * p	685:12:16874:16887	3465515	0	True				
ANR	3465885	ParameterType	const char * *		3465515	0					
ANR	3465886	Identifier	p		3465515	1					
ANR	3465887	Parameter	char delimiter	685:28:16890:16903	3465515	1	True				
ANR	3465888	ParameterType	char		3465515	0					
ANR	3465889	Identifier	delimiter		3465515	1					
ANR	3465890	Parameter	int * valid	685:44:16906:16915	3465515	2	True				
ANR	3465891	ParameterType	int *		3465515	0					
ANR	3465892	Identifier	valid		3465515	1					
ANR	3465893	Parameter	int level	685:56:16918:16926	3465515	3	True				
ANR	3465894	ParameterType	int		3465515	0					
ANR	3465895	Identifier	level		3465515	1					
ANR	3465896	Parameter	int * check	685:67:16929:16938	3465515	4	True				
ANR	3465897	ParameterType	int *		3465515	0					
ANR	3465898	Identifier	check		3465515	1					
ANR	3465899	Parameter	int print_errors	686:5:16946:16961	3465515	5	True				
ANR	3465900	ParameterType	int		3465515	0					
ANR	3465901	Identifier	print_errors		3465515	1					
ANR	3465902	CFGEntryNode	ENTRY		3465515		True				
ANR	3465903	CFGExitNode	EXIT		3465515		True				
ANR	3465904	Symbol	* sp		3465515						
ANR	3465905	Symbol	stack		3465515						
ANR	3465906	Symbol	level		3465515						
ANR	3465907	Symbol	check		3465515						
ANR	3465908	Symbol	* valid		3465515						
ANR	3465909	Symbol	stderr		3465515						
ANR	3465910	Symbol	verbose		3465515						
ANR	3465911	Symbol	do_rd_expr		3465515						
ANR	3465912	Symbol	p		3465515						
ANR	3465913	Symbol	valid		3465515						
ANR	3465914	Symbol	result		3465515						
ANR	3465915	Symbol	delimiter		3465515						
ANR	3465916	Symbol	* check		3465515						
ANR	3465917	Symbol	print_errors		3465515						
ANR	3465918	Symbol	rd_expr_or		3465515						
ANR	3465919	Symbol	* stack		3465515						
ANR	3465920	Symbol	* p		3465515						
ANR	3465921	Symbol	stack [ sp ] . line		3465515						
ANR	3465922	Symbol	* * p		3465515						
ANR	3465923	Symbol	addr		3465515						
ANR	3465924	Symbol	delspc		3465515						
ANR	3465925	Symbol	sp		3465515						
ANR	3465926	Function	rd_expr	745:0:18396:18759							
ANR	3465927	FunctionDef	"rd_expr (const char * * p , char delimiter , int * valid , int level , int print_errors)"		3465926	0					
ANR	3465928	CompoundStatement		748:0:18491:18759	3465926	0					
ANR	3465929	IdentifierDeclStatement	int check = 1 ;	749:2:18495:18508	3465926	0	True				
ANR	3465930	IdentifierDecl	check = 1		3465926	0					
ANR	3465931	IdentifierDeclType	int		3465926	0					
ANR	3465932	Identifier	check		3465926	1					
ANR	3465933	AssignmentExpression	check = 1		3465926	2		=			
ANR	3465934	Identifier	check		3465926	0					
ANR	3465935	PrimaryExpression	1		3465926	1					
ANR	3465936	IdentifierDeclStatement	int result ;	750:2:18512:18522	3465926	1	True				
ANR	3465937	IdentifierDecl	result		3465926	0					
ANR	3465938	IdentifierDeclType	int		3465926	0					
ANR	3465939	Identifier	result		3465926	1					
ANR	3465940	IfStatement	if ( valid )		3465926	2					
ANR	3465941	Condition	valid	751:6:18530:18534	3465926	0	True				
ANR	3465942	Identifier	valid		3465926	0					
ANR	3465943	ExpressionStatement	* valid = 1	752:4:18541:18551	3465926	1	True				
ANR	3465944	AssignmentExpression	* valid = 1		3465926	0		=			
ANR	3465945	UnaryOperationExpression	* valid		3465926	0					
ANR	3465946	UnaryOperator	*		3465926	0					
ANR	3465947	Identifier	valid		3465926	1					
ANR	3465948	PrimaryExpression	1		3465926	1					
ANR	3465949	ExpressionStatement	"result = do_rd_expr ( p , delimiter , valid , level , & check , print_errors )"	753:2:18555:18625	3465926	3	True				
ANR	3465950	AssignmentExpression	"result = do_rd_expr ( p , delimiter , valid , level , & check , print_errors )"		3465926	0		=			
ANR	3465951	Identifier	result		3465926	0					
ANR	3465952	CallExpression	"do_rd_expr ( p , delimiter , valid , level , & check , print_errors )"		3465926	1					
ANR	3465953	Callee	do_rd_expr		3465926	0					
ANR	3465954	Identifier	do_rd_expr		3465926	0					
ANR	3465955	ArgumentList	p		3465926	1					
ANR	3465956	Argument	p		3465926	0					
ANR	3465957	Identifier	p		3465926	0					
ANR	3465958	Argument	delimiter		3465926	1					
ANR	3465959	Identifier	delimiter		3465926	0					
ANR	3465960	Argument	valid		3465926	2					
ANR	3465961	Identifier	valid		3465926	0					
ANR	3465962	Argument	level		3465926	3					
ANR	3465963	Identifier	level		3465926	0					
ANR	3465964	Argument	& check		3465926	4					
ANR	3465965	UnaryOperationExpression	& check		3465926	0					
ANR	3465966	UnaryOperator	&		3465926	0					
ANR	3465967	Identifier	check		3465926	1					
ANR	3465968	Argument	print_errors		3465926	5					
ANR	3465969	Identifier	print_errors		3465926	0					
ANR	3465970	IfStatement	if ( print_errors && ( ! valid || * valid ) && check )		3465926	4					
ANR	3465971	Condition	print_errors && ( ! valid || * valid ) && check	754:6:18633:18675	3465926	0	True				
ANR	3465972	AndExpression	print_errors && ( ! valid || * valid ) && check		3465926	0		&&			
ANR	3465973	Identifier	print_errors		3465926	0					
ANR	3465974	AndExpression	( ! valid || * valid ) && check		3465926	1		&&			
ANR	3465975	OrExpression	! valid || * valid		3465926	0		||			
ANR	3465976	UnaryOperationExpression	! valid		3465926	0					
ANR	3465977	UnaryOperator	!		3465926	0					
ANR	3465978	Identifier	valid		3465926	1					
ANR	3465979	UnaryOperationExpression	* valid		3465926	1					
ANR	3465980	UnaryOperator	*		3465926	0					
ANR	3465981	Identifier	valid		3465926	1					
ANR	3465982	Identifier	check		3465926	1					
ANR	3465983	ExpressionStatement	"printerr ( 0 , ""expression fully enclosed in parenthesis\\n"" )"	755:4:18682:18740	3465926	1	True				
ANR	3465984	CallExpression	"printerr ( 0 , ""expression fully enclosed in parenthesis\\n"" )"		3465926	0					
ANR	3465985	Callee	printerr		3465926	0					
ANR	3465986	Identifier	printerr		3465926	0					
ANR	3465987	ArgumentList	0		3465926	1					
ANR	3465988	Argument	0		3465926	0					
ANR	3465989	PrimaryExpression	0		3465926	0					
ANR	3465990	Argument	"""expression fully enclosed in parenthesis\\n"""		3465926	1					
ANR	3465991	PrimaryExpression	"""expression fully enclosed in parenthesis\\n"""		3465926	0					
ANR	3465992	ReturnStatement	return result ;	756:2:18744:18757	3465926	5	True				
ANR	3465993	Identifier	result		3465926	0					
ANR	3465994	ReturnType	static int		3465926	1					
ANR	3465995	Identifier	rd_expr		3465926	2					
ANR	3465996	ParameterList	"const char * * p , char delimiter , int * valid , int level , int print_errors"		3465926	3					
ANR	3465997	Parameter	const char * * p	746:9:18416:18429	3465926	0	True				
ANR	3465998	ParameterType	const char * *		3465926	0					
ANR	3465999	Identifier	p		3465926	1					
ANR	3466000	Parameter	char delimiter	746:25:18432:18445	3465926	1	True				
ANR	3466001	ParameterType	char		3465926	0					
ANR	3466002	Identifier	delimiter		3465926	1					
ANR	3466003	Parameter	int * valid	746:41:18448:18457	3465926	2	True				
ANR	3466004	ParameterType	int *		3465926	0					
ANR	3466005	Identifier	valid		3465926	1					
ANR	3466006	Parameter	int level	746:53:18460:18468	3465926	3	True				
ANR	3466007	ParameterType	int		3465926	0					
ANR	3466008	Identifier	level		3465926	1					
ANR	3466009	Parameter	int print_errors	747:2:18473:18488	3465926	4	True				
ANR	3466010	ParameterType	int		3465926	0					
ANR	3466011	Identifier	print_errors		3465926	1					
ANR	3466012	CFGEntryNode	ENTRY		3465926		True				
ANR	3466013	CFGExitNode	EXIT		3465926		True				
ANR	3466014	Symbol	p		3465926						
ANR	3466015	Symbol	valid		3465926						
ANR	3466016	Symbol	result		3465926						
ANR	3466017	Symbol	level		3465926						
ANR	3466018	Symbol	& check		3465926						
ANR	3466019	Symbol	delimiter		3465926						
ANR	3466020	Symbol	print_errors		3465926						
ANR	3466021	Symbol	check		3465926						
ANR	3466022	Symbol	* valid		3465926						
ANR	3466023	Symbol	do_rd_expr		3465926						
