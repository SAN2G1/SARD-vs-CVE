command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5161541	File	data/converged/CVE-2019-16718~_radare2/libr_util_name.c								
ANR	5161542	Function	r_name_validate_char	5:0:74:300							
ANR	5161543	FunctionDef	r_name_validate_char (const char ch)		5161542	0					
ANR	5161544	CompoundStatement		5:46:120:300	5161542	0					
ANR	5161545	IfStatement	if ( ( ch >= 'a' && ch <= 'z' ) || ( ch >= 'A' && ch <= 'Z' ) || ( IS_DIGIT ( ch ) ) )		5161542	0					
ANR	5161546	Condition	( ch >= 'a' && ch <= 'z' ) || ( ch >= 'A' && ch <= 'Z' ) || ( IS_DIGIT ( ch ) )	6:5:127:196	5161542	0	True				
ANR	5161547	OrExpression	( ch >= 'a' && ch <= 'z' ) || ( ch >= 'A' && ch <= 'Z' ) || ( IS_DIGIT ( ch ) )		5161542	0		||			
ANR	5161548	AndExpression	ch >= 'a' && ch <= 'z'		5161542	0		&&			
ANR	5161549	RelationalExpression	ch >= 'a'		5161542	0		>=			
ANR	5161550	Identifier	ch		5161542	0					
ANR	5161551	PrimaryExpression	'a'		5161542	1					
ANR	5161552	RelationalExpression	ch <= 'z'		5161542	1		<=			
ANR	5161553	Identifier	ch		5161542	0					
ANR	5161554	PrimaryExpression	'z'		5161542	1					
ANR	5161555	OrExpression	( ch >= 'A' && ch <= 'Z' ) || ( IS_DIGIT ( ch ) )		5161542	1		||			
ANR	5161556	AndExpression	ch >= 'A' && ch <= 'Z'		5161542	0		&&			
ANR	5161557	RelationalExpression	ch >= 'A'		5161542	0		>=			
ANR	5161558	Identifier	ch		5161542	0					
ANR	5161559	PrimaryExpression	'A'		5161542	1					
ANR	5161560	RelationalExpression	ch <= 'Z'		5161542	1		<=			
ANR	5161561	Identifier	ch		5161542	0					
ANR	5161562	PrimaryExpression	'Z'		5161542	1					
ANR	5161563	CallExpression	IS_DIGIT ( ch )		5161542	1					
ANR	5161564	Callee	IS_DIGIT		5161542	0					
ANR	5161565	Identifier	IS_DIGIT		5161542	0					
ANR	5161566	ArgumentList	ch		5161542	1					
ANR	5161567	Argument	ch		5161542	0					
ANR	5161568	Identifier	ch		5161542	0					
ANR	5161569	CompoundStatement		2:77:78:78	5161542	1					
ANR	5161570	ReturnStatement	return true ;	7:2:203:214	5161542	0	True				
ANR	5161571	Identifier	true		5161542	0					
ANR	5161572	SwitchStatement	switch ( ch )		5161542	1					
ANR	5161573	Condition	ch	9:9:228:229	5161542	0	True				
ANR	5161574	Identifier	ch		5161542	0					
ANR	5161575	CompoundStatement		5:13:111:111	5161542	1					
ANR	5161576	Label	case ':' :	10:1:235:243	5161542	0	True				
ANR	5161577	Label	case '.' :	11:1:246:254	5161542	1	True				
ANR	5161578	Label	case '_' :	12:1:257:265	5161542	2	True				
ANR	5161579	ReturnStatement	return true ;	13:2:269:280	5161542	3	True				
ANR	5161580	Identifier	true		5161542	0					
ANR	5161581	ReturnStatement	return false ;	15:1:286:298	5161542	2	True				
ANR	5161582	Identifier	false		5161542	0					
ANR	5161583	ReturnType	R_API int		5161542	1					
ANR	5161584	Identifier	r_name_validate_char		5161542	2					
ANR	5161585	ParameterList	const char ch		5161542	3					
ANR	5161586	Parameter	const char ch	5:31:105:117	5161542	0	True				
ANR	5161587	ParameterType	const char		5161542	0					
ANR	5161588	Identifier	ch		5161542	1					
ANR	5161589	CFGEntryNode	ENTRY		5161542		True				
ANR	5161590	CFGExitNode	EXIT		5161542		True				
ANR	5161591	Symbol	ch		5161542						
ANR	5161592	Symbol	true		5161542						
ANR	5161593	Symbol	false		5161542						
ANR	5161594	Symbol	IS_DIGIT		5161542						
ANR	5161595	Function	r_name_check	18:0:303:602							
ANR	5161596	FunctionDef	r_name_check (const char * name)		5161595	0					
ANR	5161597	CompoundStatement		18:41:344:602	5161595	0					
ANR	5161598	IfStatement	if ( ! name || ! * name || IS_DIGIT ( * name ) )		5161595	0					
ANR	5161599	Condition	! name || ! * name || IS_DIGIT ( * name )	20:5:381:415	5161595	0	True				
ANR	5161600	OrExpression	! name || ! * name || IS_DIGIT ( * name )		5161595	0		||			
ANR	5161601	UnaryOperationExpression	! name		5161595	0					
ANR	5161602	UnaryOperator	!		5161595	0					
ANR	5161603	Identifier	name		5161595	1					
ANR	5161604	OrExpression	! * name || IS_DIGIT ( * name )		5161595	1		||			
ANR	5161605	UnaryOperationExpression	! * name		5161595	0					
ANR	5161606	UnaryOperator	!		5161595	0					
ANR	5161607	UnaryOperationExpression	* name		5161595	1					
ANR	5161608	UnaryOperator	*		5161595	0					
ANR	5161609	Identifier	name		5161595	1					
ANR	5161610	CallExpression	IS_DIGIT ( * name )		5161595	1					
ANR	5161611	Callee	IS_DIGIT		5161595	0					
ANR	5161612	Identifier	IS_DIGIT		5161595	0					
ANR	5161613	ArgumentList	* name		5161595	1					
ANR	5161614	Argument	* name		5161595	0					
ANR	5161615	UnaryOperationExpression	* name		5161595	0					
ANR	5161616	UnaryOperator	*		5161595	0					
ANR	5161617	Identifier	name		5161595	1					
ANR	5161618	CompoundStatement		3:42:73:73	5161595	1					
ANR	5161619	ReturnStatement	return false ;	21:2:422:434	5161595	0	True				
ANR	5161620	Identifier	false		5161595	0					
ANR	5161621	ForStatement	for ( ; * name != '\\0' ; name ++ )		5161595	1					
ANR	5161622	Condition	* name != '\\0'	24:8:500:512	5161595	0	True				
ANR	5161623	EqualityExpression	* name != '\\0'		5161595	0		!=			
ANR	5161624	UnaryOperationExpression	* name		5161595	0					
ANR	5161625	UnaryOperator	*		5161595	0					
ANR	5161626	Identifier	name		5161595	1					
ANR	5161627	PrimaryExpression	'\\0'		5161595	1					
ANR	5161628	PostIncDecOperationExpression	name ++	24:23:515:520	5161595	1	True				
ANR	5161629	Identifier	name		5161595	0					
ANR	5161630	IncDec	++		5161595	1					
ANR	5161631	CompoundStatement		7:31:178:178	5161595	2					
ANR	5161632	IfStatement	if ( ! r_name_validate_char ( * name ) )		5161595	0					
ANR	5161633	Condition	! r_name_validate_char ( * name )	25:6:531:559	5161595	0	True				
ANR	5161634	UnaryOperationExpression	! r_name_validate_char ( * name )		5161595	0					
ANR	5161635	UnaryOperator	!		5161595	0					
ANR	5161636	CallExpression	r_name_validate_char ( * name )		5161595	1					
ANR	5161637	Callee	r_name_validate_char		5161595	0					
ANR	5161638	Identifier	r_name_validate_char		5161595	0					
ANR	5161639	ArgumentList	* name		5161595	1					
ANR	5161640	Argument	* name		5161595	0					
ANR	5161641	UnaryOperationExpression	* name		5161595	0					
ANR	5161642	UnaryOperator	*		5161595	0					
ANR	5161643	Identifier	name		5161595	1					
ANR	5161644	CompoundStatement		8:37:217:217	5161595	1					
ANR	5161645	ReturnStatement	return false ;	26:3:567:579	5161595	0	True				
ANR	5161646	Identifier	false		5161595	0					
ANR	5161647	ReturnStatement	return true ;	29:1:589:600	5161595	2	True				
ANR	5161648	Identifier	true		5161595	0					
ANR	5161649	ReturnType	R_API int		5161595	1					
ANR	5161650	Identifier	r_name_check		5161595	2					
ANR	5161651	ParameterList	const char * name		5161595	3					
ANR	5161652	Parameter	const char * name	18:23:326:341	5161595	0	True				
ANR	5161653	ParameterType	const char *		5161595	0					
ANR	5161654	Identifier	name		5161595	1					
ANR	5161655	CFGEntryNode	ENTRY		5161595		True				
ANR	5161656	CFGExitNode	EXIT		5161595		True				
ANR	5161657	Symbol	* name		5161595						
ANR	5161658	Symbol	name		5161595						
ANR	5161659	Symbol	false		5161595						
ANR	5161660	Symbol	true		5161595						
ANR	5161661	Symbol	r_name_validate_char		5161595						
ANR	5161662	Symbol	IS_DIGIT		5161595						
ANR	5161663	Function	is_special_char	32:0:605:770							
ANR	5161664	FunctionDef	is_special_char (char * name)		5161663	0					
ANR	5161665	CompoundStatement		32:48:653:770	5161663	0					
ANR	5161666	IdentifierDeclStatement	const char n = * name ;	33:1:656:676	5161663	0	True				
ANR	5161667	IdentifierDecl	n = * name		5161663	0					
ANR	5161668	IdentifierDeclType	const char		5161663	0					
ANR	5161669	Identifier	n		5161663	1					
ANR	5161670	AssignmentExpression	n = * name		5161663	2		=			
ANR	5161671	Identifier	n		5161663	0					
ANR	5161672	UnaryOperationExpression	* name		5161663	1					
ANR	5161673	UnaryOperator	*		5161663	0					
ANR	5161674	Identifier	name		5161663	1					
ANR	5161675	ReturnStatement	return ( n == 'b' || n == 'f' || n == 'n' || n == 'r' || n == 't' || n == 'v' || n == 'a' ) ;	34:1:679:768	5161663	1	True				
ANR	5161676	OrExpression	n == 'b' || n == 'f' || n == 'n' || n == 'r' || n == 't' || n == 'v' || n == 'a'		5161663	0		||			
ANR	5161677	EqualityExpression	n == 'b'		5161663	0		==			
ANR	5161678	Identifier	n		5161663	0					
ANR	5161679	PrimaryExpression	'b'		5161663	1					
ANR	5161680	OrExpression	n == 'f' || n == 'n' || n == 'r' || n == 't' || n == 'v' || n == 'a'		5161663	1		||			
ANR	5161681	EqualityExpression	n == 'f'		5161663	0		==			
ANR	5161682	Identifier	n		5161663	0					
ANR	5161683	PrimaryExpression	'f'		5161663	1					
ANR	5161684	OrExpression	n == 'n' || n == 'r' || n == 't' || n == 'v' || n == 'a'		5161663	1		||			
ANR	5161685	EqualityExpression	n == 'n'		5161663	0		==			
ANR	5161686	Identifier	n		5161663	0					
ANR	5161687	PrimaryExpression	'n'		5161663	1					
ANR	5161688	OrExpression	n == 'r' || n == 't' || n == 'v' || n == 'a'		5161663	1		||			
ANR	5161689	EqualityExpression	n == 'r'		5161663	0		==			
ANR	5161690	Identifier	n		5161663	0					
ANR	5161691	PrimaryExpression	'r'		5161663	1					
ANR	5161692	OrExpression	n == 't' || n == 'v' || n == 'a'		5161663	1		||			
ANR	5161693	EqualityExpression	n == 't'		5161663	0		==			
ANR	5161694	Identifier	n		5161663	0					
ANR	5161695	PrimaryExpression	't'		5161663	1					
ANR	5161696	OrExpression	n == 'v' || n == 'a'		5161663	1		||			
ANR	5161697	EqualityExpression	n == 'v'		5161663	0		==			
ANR	5161698	Identifier	n		5161663	0					
ANR	5161699	PrimaryExpression	'v'		5161663	1					
ANR	5161700	EqualityExpression	n == 'a'		5161663	1		==			
ANR	5161701	Identifier	n		5161663	0					
ANR	5161702	PrimaryExpression	'a'		5161663	1					
ANR	5161703	ReturnType	static inline bool		5161663	1					
ANR	5161704	Identifier	is_special_char		5161663	2					
ANR	5161705	ParameterList	char * name		5161663	3					
ANR	5161706	Parameter	char * name	32:36:641:650	5161663	0	True				
ANR	5161707	ParameterType	char *		5161663	0					
ANR	5161708	Identifier	name		5161663	1					
ANR	5161709	CFGEntryNode	ENTRY		5161663		True				
ANR	5161710	CFGExitNode	EXIT		5161663		True				
ANR	5161711	Symbol	* name		5161663						
ANR	5161712	Symbol	name		5161663						
ANR	5161713	Symbol	n		5161663						
ANR	5161714	Function	r_name_filter	37:0:773:1766							
ANR	5161715	FunctionDef	"r_name_filter (char * name , int maxlen)"		5161714	0					
ANR	5161716	CompoundStatement		37:48:821:1766	5161714	0					
ANR	5161717	IdentifierDeclStatement	int i ;	38:1:824:829	5161714	0	True				
ANR	5161718	IdentifierDecl	i		5161714	0					
ANR	5161719	IdentifierDeclType	int		5161714	0					
ANR	5161720	Identifier	i		5161714	1					
ANR	5161721	IdentifierDeclStatement	size_t len ;	39:1:832:842	5161714	1	True				
ANR	5161722	IdentifierDecl	len		5161714	0					
ANR	5161723	IdentifierDeclType	size_t		5161714	0					
ANR	5161724	Identifier	len		5161714	1					
ANR	5161725	IfStatement	if ( ! name )		5161714	2					
ANR	5161726	Condition	! name	40:5:849:853	5161714	0	True				
ANR	5161727	UnaryOperationExpression	! name		5161714	0					
ANR	5161728	UnaryOperator	!		5161714	0					
ANR	5161729	Identifier	name		5161714	1					
ANR	5161730	CompoundStatement		4:12:34:34	5161714	1					
ANR	5161731	ReturnStatement	return 0 ;	41:2:860:868	5161714	0	True				
ANR	5161732	PrimaryExpression	0		5161714	0					
ANR	5161733	IfStatement	if ( maxlen < 0 )		5161714	3					
ANR	5161734	Condition	maxlen < 0	43:5:878:887	5161714	0	True				
ANR	5161735	RelationalExpression	maxlen < 0		5161714	0		<			
ANR	5161736	Identifier	maxlen		5161714	0					
ANR	5161737	PrimaryExpression	0		5161714	1					
ANR	5161738	CompoundStatement		7:17:68:68	5161714	1					
ANR	5161739	ExpressionStatement	maxlen = strlen ( name )	44:2:894:916	5161714	0	True				
ANR	5161740	AssignmentExpression	maxlen = strlen ( name )		5161714	0		=			
ANR	5161741	Identifier	maxlen		5161714	0					
ANR	5161742	CallExpression	strlen ( name )		5161714	1					
ANR	5161743	Callee	strlen		5161714	0					
ANR	5161744	Identifier	strlen		5161714	0					
ANR	5161745	ArgumentList	name		5161714	1					
ANR	5161746	Argument	name		5161714	0					
ANR	5161747	Identifier	name		5161714	0					
ANR	5161748	IdentifierDeclStatement	char * oname = name = r_str_trim_head_tail ( name ) ;	46:1:922:970	5161714	4	True				
ANR	5161749	IdentifierDecl	* oname = name = r_str_trim_head_tail ( name )		5161714	0					
ANR	5161750	IdentifierDeclType	char *		5161714	0					
ANR	5161751	Identifier	oname		5161714	1					
ANR	5161752	AssignmentExpression	* oname = name = r_str_trim_head_tail ( name )		5161714	2		=			
ANR	5161753	Identifier	oname		5161714	0					
ANR	5161754	AssignmentExpression	name = r_str_trim_head_tail ( name )		5161714	1		=			
ANR	5161755	Identifier	name		5161714	0					
ANR	5161756	CallExpression	r_str_trim_head_tail ( name )		5161714	1					
ANR	5161757	Callee	r_str_trim_head_tail		5161714	0					
ANR	5161758	Identifier	r_str_trim_head_tail		5161714	0					
ANR	5161759	ArgumentList	name		5161714	1					
ANR	5161760	Argument	name		5161714	0					
ANR	5161761	Identifier	name		5161714	0					
ANR	5161762	ForStatement	"for ( i = 0 ; * name ; name ++ , i ++ )"		5161714	5					
ANR	5161763	ForInit	i = 0 ;	47:6:978:983	5161714	0	True				
ANR	5161764	AssignmentExpression	i = 0		5161714	0		=			
ANR	5161765	Identifier	i		5161714	0					
ANR	5161766	PrimaryExpression	0		5161714	1					
ANR	5161767	Condition	* name	47:13:985:989	5161714	1	True				
ANR	5161768	UnaryOperationExpression	* name		5161714	0					
ANR	5161769	UnaryOperator	*		5161714	0					
ANR	5161770	Identifier	name		5161714	1					
ANR	5161771	Expression	"name ++ , i ++"	47:20:992:1002	5161714	2	True				
ANR	5161772	PostIncDecOperationExpression	name ++		5161714	0					
ANR	5161773	Identifier	name		5161714	0					
ANR	5161774	IncDec	++		5161714	1					
ANR	5161775	PostIncDecOperationExpression	i ++		5161714	1					
ANR	5161776	Identifier	i		5161714	0					
ANR	5161777	IncDec	++		5161714	1					
ANR	5161778	CompoundStatement		11:33:183:183	5161714	3					
ANR	5161779	IfStatement	if ( maxlen && i > maxlen )		5161714	0					
ANR	5161780	Condition	maxlen && i > maxlen	48:6:1013:1032	5161714	0	True				
ANR	5161781	AndExpression	maxlen && i > maxlen		5161714	0		&&			
ANR	5161782	Identifier	maxlen		5161714	0					
ANR	5161783	RelationalExpression	i > maxlen		5161714	1		>			
ANR	5161784	Identifier	i		5161714	0					
ANR	5161785	Identifier	maxlen		5161714	1					
ANR	5161786	CompoundStatement		12:28:213:213	5161714	1					
ANR	5161787	ExpressionStatement	* name = '\\0'	49:3:1040:1052	5161714	0	True				
ANR	5161788	AssignmentExpression	* name = '\\0'		5161714	0		=			
ANR	5161789	UnaryOperationExpression	* name		5161714	0					
ANR	5161790	UnaryOperator	*		5161714	0					
ANR	5161791	Identifier	name		5161714	1					
ANR	5161792	PrimaryExpression	'\\0'		5161714	1					
ANR	5161793	BreakStatement	break ;	50:3:1057:1062	5161714	1	True				
ANR	5161794	IfStatement	if ( ! r_name_validate_char ( * name ) && * name != '\\\\' )		5161714	1					
ANR	5161795	Condition	! r_name_validate_char ( * name ) && * name != '\\\\'	52:6:1074:1119	5161714	0	True				
ANR	5161796	AndExpression	! r_name_validate_char ( * name ) && * name != '\\\\'		5161714	0		&&			
ANR	5161797	UnaryOperationExpression	! r_name_validate_char ( * name )		5161714	0					
ANR	5161798	UnaryOperator	!		5161714	0					
ANR	5161799	CallExpression	r_name_validate_char ( * name )		5161714	1					
ANR	5161800	Callee	r_name_validate_char		5161714	0					
ANR	5161801	Identifier	r_name_validate_char		5161714	0					
ANR	5161802	ArgumentList	* name		5161714	1					
ANR	5161803	Argument	* name		5161714	0					
ANR	5161804	UnaryOperationExpression	* name		5161714	0					
ANR	5161805	UnaryOperator	*		5161714	0					
ANR	5161806	Identifier	name		5161714	1					
ANR	5161807	EqualityExpression	* name != '\\\\'		5161714	1		!=			
ANR	5161808	UnaryOperationExpression	* name		5161714	0					
ANR	5161809	UnaryOperator	*		5161714	0					
ANR	5161810	Identifier	name		5161714	1					
ANR	5161811	PrimaryExpression	'\\\\'		5161714	1					
ANR	5161812	CompoundStatement		16:54:300:300	5161714	1					
ANR	5161813	ExpressionStatement	* name = '_'	53:3:1127:1138	5161714	0	True				
ANR	5161814	AssignmentExpression	* name = '_'		5161714	0		=			
ANR	5161815	UnaryOperationExpression	* name		5161714	0					
ANR	5161816	UnaryOperator	*		5161714	0					
ANR	5161817	Identifier	name		5161714	1					
ANR	5161818	PrimaryExpression	'_'		5161714	1					
ANR	5161819	WhileStatement	while ( i > 0 )		5161714	6					
ANR	5161820	Condition	i > 0	58:8:1205:1209	5161714	0	True				
ANR	5161821	RelationalExpression	i > 0		5161714	0		>			
ANR	5161822	Identifier	i		5161714	0					
ANR	5161823	PrimaryExpression	0		5161714	1					
ANR	5161824	CompoundStatement		22:15:390:390	5161714	1					
ANR	5161825	IfStatement	if ( * ( name - 1 ) == '\\\\' && is_special_char ( name ) )		5161714	0					
ANR	5161826	Condition	* ( name - 1 ) == '\\\\' && is_special_char ( name )	59:6:1220:1264	5161714	0	True				
ANR	5161827	AndExpression	* ( name - 1 ) == '\\\\' && is_special_char ( name )		5161714	0		&&			
ANR	5161828	EqualityExpression	* ( name - 1 ) == '\\\\'		5161714	0		==			
ANR	5161829	UnaryOperationExpression	* ( name - 1 )		5161714	0					
ANR	5161830	UnaryOperator	*		5161714	0					
ANR	5161831	AdditiveExpression	name - 1		5161714	1		-			
ANR	5161832	Identifier	name		5161714	0					
ANR	5161833	PrimaryExpression	1		5161714	1					
ANR	5161834	PrimaryExpression	'\\\\'		5161714	1					
ANR	5161835	CallExpression	is_special_char ( name )		5161714	1					
ANR	5161836	Callee	is_special_char		5161714	0					
ANR	5161837	Identifier	is_special_char		5161714	0					
ANR	5161838	ArgumentList	name		5161714	1					
ANR	5161839	Argument	name		5161714	0					
ANR	5161840	Identifier	name		5161714	0					
ANR	5161841	CompoundStatement		23:53:445:445	5161714	1					
ANR	5161842	ExpressionStatement	* name = '_'	60:3:1272:1283	5161714	0	True				
ANR	5161843	AssignmentExpression	* name = '_'		5161714	0		=			
ANR	5161844	UnaryOperationExpression	* name		5161714	0					
ANR	5161845	UnaryOperator	*		5161714	0					
ANR	5161846	Identifier	name		5161714	1					
ANR	5161847	PrimaryExpression	'_'		5161714	1					
ANR	5161848	ExpressionStatement	* ( name - 1 ) = '_'	61:3:1288:1305	5161714	1	True				
ANR	5161849	AssignmentExpression	* ( name - 1 ) = '_'		5161714	0		=			
ANR	5161850	UnaryOperationExpression	* ( name - 1 )		5161714	0					
ANR	5161851	UnaryOperator	*		5161714	0					
ANR	5161852	AdditiveExpression	name - 1		5161714	1		-			
ANR	5161853	Identifier	name		5161714	0					
ANR	5161854	PrimaryExpression	1		5161714	1					
ANR	5161855	PrimaryExpression	'_'		5161714	1					
ANR	5161856	IfStatement	if ( * name == '\\\\' )		5161714	1					
ANR	5161857	Condition	* name == '\\\\'	63:6:1317:1329	5161714	0	True				
ANR	5161858	EqualityExpression	* name == '\\\\'		5161714	0		==			
ANR	5161859	UnaryOperationExpression	* name		5161714	0					
ANR	5161860	UnaryOperator	*		5161714	0					
ANR	5161861	Identifier	name		5161714	1					
ANR	5161862	PrimaryExpression	'\\\\'		5161714	1					
ANR	5161863	CompoundStatement		27:21:510:510	5161714	1					
ANR	5161864	ExpressionStatement	* name = '_'	64:3:1337:1348	5161714	0	True				
ANR	5161865	AssignmentExpression	* name = '_'		5161714	0		=			
ANR	5161866	UnaryOperationExpression	* name		5161714	0					
ANR	5161867	UnaryOperator	*		5161714	0					
ANR	5161868	Identifier	name		5161714	1					
ANR	5161869	PrimaryExpression	'_'		5161714	1					
ANR	5161870	ExpressionStatement	name --	66:2:1356:1362	5161714	2	True				
ANR	5161871	PostIncDecOperationExpression	name --		5161714	0					
ANR	5161872	Identifier	name		5161714	0					
ANR	5161873	IncDec	--		5161714	1					
ANR	5161874	ExpressionStatement	i --	67:2:1366:1369	5161714	3	True				
ANR	5161875	PostIncDecOperationExpression	i --		5161714	0					
ANR	5161876	Identifier	i		5161714	0					
ANR	5161877	IncDec	--		5161714	1					
ANR	5161878	IfStatement	if ( * name == '\\\\' )		5161714	7					
ANR	5161879	Condition	* name == '\\\\'	69:5:1379:1391	5161714	0	True				
ANR	5161880	EqualityExpression	* name == '\\\\'		5161714	0		==			
ANR	5161881	UnaryOperationExpression	* name		5161714	0					
ANR	5161882	UnaryOperator	*		5161714	0					
ANR	5161883	Identifier	name		5161714	1					
ANR	5161884	PrimaryExpression	'\\\\'		5161714	1					
ANR	5161885	CompoundStatement		33:20:572:572	5161714	1					
ANR	5161886	ExpressionStatement	* name = '_'	70:2:1398:1409	5161714	0	True				
ANR	5161887	AssignmentExpression	* name = '_'		5161714	0		=			
ANR	5161888	UnaryOperationExpression	* name		5161714	0					
ANR	5161889	UnaryOperator	*		5161714	0					
ANR	5161890	Identifier	name		5161714	1					
ANR	5161891	PrimaryExpression	'_'		5161714	1					
ANR	5161892	ExpressionStatement	len = strlen ( name )	73:1:1461:1480	5161714	8	True				
ANR	5161893	AssignmentExpression	len = strlen ( name )		5161714	0		=			
ANR	5161894	Identifier	len		5161714	0					
ANR	5161895	CallExpression	strlen ( name )		5161714	1					
ANR	5161896	Callee	strlen		5161714	0					
ANR	5161897	Identifier	strlen		5161714	0					
ANR	5161898	ArgumentList	name		5161714	1					
ANR	5161899	Argument	name		5161714	0					
ANR	5161900	Identifier	name		5161714	0					
ANR	5161901	ForStatement	for ( ; len > 0 && * ( name + len - 1 ) == '_' ; len -- )		5161714	9					
ANR	5161902	Condition	len > 0 && * ( name + len - 1 ) == '_'	74:8:1490:1524	5161714	0	True				
ANR	5161903	AndExpression	len > 0 && * ( name + len - 1 ) == '_'		5161714	0		&&			
ANR	5161904	RelationalExpression	len > 0		5161714	0		>			
ANR	5161905	Identifier	len		5161714	0					
ANR	5161906	PrimaryExpression	0		5161714	1					
ANR	5161907	EqualityExpression	* ( name + len - 1 ) == '_'		5161714	1		==			
ANR	5161908	UnaryOperationExpression	* ( name + len - 1 )		5161714	0					
ANR	5161909	UnaryOperator	*		5161714	0					
ANR	5161910	AdditiveExpression	name + len - 1		5161714	1		+			
ANR	5161911	Identifier	name		5161714	0					
ANR	5161912	AdditiveExpression	len - 1		5161714	1		-			
ANR	5161913	Identifier	len		5161714	0					
ANR	5161914	PrimaryExpression	1		5161714	1					
ANR	5161915	PrimaryExpression	'_'		5161714	1					
ANR	5161916	PostIncDecOperationExpression	len --	74:45:1527:1531	5161714	1	True				
ANR	5161917	Identifier	len		5161714	0					
ANR	5161918	IncDec	--		5161714	1					
ANR	5161919	CompoundStatement		38:52:712:712	5161714	2					
ANR	5161920	ExpressionStatement		75:2:1538:1538	5161714	0	True				
ANR	5161921	IfStatement	if ( ! len )		5161714	10					
ANR	5161922	Condition	! len	77:5:1548:1551	5161714	0	True				
ANR	5161923	UnaryOperationExpression	! len		5161714	0					
ANR	5161924	UnaryOperator	!		5161714	0					
ANR	5161925	Identifier	len		5161714	1					
ANR	5161926	CompoundStatement		41:11:732:732	5161714	1					
ANR	5161927	ReturnStatement	return r_name_check ( oname ) ;	78:2:1595:1622	5161714	0	True				
ANR	5161928	CallExpression	r_name_check ( oname )		5161714	0					
ANR	5161929	Callee	r_name_check		5161714	0					
ANR	5161930	Identifier	r_name_check		5161714	0					
ANR	5161931	ArgumentList	oname		5161714	1					
ANR	5161932	Argument	oname		5161714	0					
ANR	5161933	Identifier	oname		5161714	0					
ANR	5161934	ForStatement	"for ( i = 0 ; * ( name + i ) == '_' ; i ++ , len -- )"		5161714	11					
ANR	5161935	ForInit	i = 0 ;	80:6:1633:1638	5161714	0	True				
ANR	5161936	AssignmentExpression	i = 0		5161714	0		=			
ANR	5161937	Identifier	i		5161714	0					
ANR	5161938	PrimaryExpression	0		5161714	1					
ANR	5161939	Condition	* ( name + i ) == '_'	80:13:1640:1657	5161714	1	True				
ANR	5161940	EqualityExpression	* ( name + i ) == '_'		5161714	0		==			
ANR	5161941	UnaryOperationExpression	* ( name + i )		5161714	0					
ANR	5161942	UnaryOperator	*		5161714	0					
ANR	5161943	AdditiveExpression	name + i		5161714	1		+			
ANR	5161944	Identifier	name		5161714	0					
ANR	5161945	Identifier	i		5161714	1					
ANR	5161946	PrimaryExpression	'_'		5161714	1					
ANR	5161947	Expression	"i ++ , len --"	80:33:1660:1669	5161714	2	True				
ANR	5161948	PostIncDecOperationExpression	i ++		5161714	0					
ANR	5161949	Identifier	i		5161714	0					
ANR	5161950	IncDec	++		5161714	1					
ANR	5161951	PostIncDecOperationExpression	len --		5161714	1					
ANR	5161952	Identifier	len		5161714	0					
ANR	5161953	IncDec	--		5161714	1					
ANR	5161954	CompoundStatement		44:45:850:850	5161714	3					
ANR	5161955	ExpressionStatement		81:2:1676:1676	5161714	0	True				
ANR	5161956	ExpressionStatement	"memmove ( name , name + i , len )"	83:1:1682:1711	5161714	12	True				
ANR	5161957	CallExpression	"memmove ( name , name + i , len )"		5161714	0					
ANR	5161958	Callee	memmove		5161714	0					
ANR	5161959	Identifier	memmove		5161714	0					
ANR	5161960	ArgumentList	name		5161714	1					
ANR	5161961	Argument	name		5161714	0					
ANR	5161962	Identifier	name		5161714	0					
ANR	5161963	Argument	name + i		5161714	1					
ANR	5161964	AdditiveExpression	name + i		5161714	0		+			
ANR	5161965	Identifier	name		5161714	0					
ANR	5161966	Identifier	i		5161714	1					
ANR	5161967	Argument	len		5161714	2					
ANR	5161968	Identifier	len		5161714	0					
ANR	5161969	ExpressionStatement	* ( name + len ) = '\\0'	84:1:1714:1734	5161714	13	True				
ANR	5161970	AssignmentExpression	* ( name + len ) = '\\0'		5161714	0		=			
ANR	5161971	UnaryOperationExpression	* ( name + len )		5161714	0					
ANR	5161972	UnaryOperator	*		5161714	0					
ANR	5161973	AdditiveExpression	name + len		5161714	1		+			
ANR	5161974	Identifier	name		5161714	0					
ANR	5161975	Identifier	len		5161714	1					
ANR	5161976	PrimaryExpression	'\\0'		5161714	1					
ANR	5161977	ReturnStatement	return r_name_check ( oname ) ;	85:1:1737:1764	5161714	14	True				
ANR	5161978	CallExpression	r_name_check ( oname )		5161714	0					
ANR	5161979	Callee	r_name_check		5161714	0					
ANR	5161980	Identifier	r_name_check		5161714	0					
ANR	5161981	ArgumentList	oname		5161714	1					
ANR	5161982	Argument	oname		5161714	0					
ANR	5161983	Identifier	oname		5161714	0					
ANR	5161984	ReturnType	R_API int		5161714	1					
ANR	5161985	Identifier	r_name_filter		5161714	2					
ANR	5161986	ParameterList	"char * name , int maxlen"		5161714	3					
ANR	5161987	Parameter	char * name	37:24:797:806	5161714	0	True				
ANR	5161988	ParameterType	char *		5161714	0					
ANR	5161989	Identifier	name		5161714	1					
ANR	5161990	Parameter	int maxlen	37:36:809:818	5161714	1	True				
ANR	5161991	ParameterType	int		5161714	0					
ANR	5161992	Identifier	maxlen		5161714	1					
ANR	5161993	CFGEntryNode	ENTRY		5161714		True				
ANR	5161994	CFGExitNode	EXIT		5161714		True				
ANR	5161995	Symbol	* name		5161714						
ANR	5161996	Symbol	* ( name + i )		5161714						
ANR	5161997	Symbol	* ( name + len - 1 )		5161714						
ANR	5161998	Symbol	i		5161714						
ANR	5161999	Symbol	is_special_char		5161714						
ANR	5162000	Symbol	r_name_check		5161714						
ANR	5162001	Symbol	strlen		5161714						
ANR	5162002	Symbol	* ( name + len )		5161714						
ANR	5162003	Symbol	* ( name - 1 )		5161714						
ANR	5162004	Symbol	* i		5161714						
ANR	5162005	Symbol	len		5161714						
ANR	5162006	Symbol	oname		5161714						
ANR	5162007	Symbol	r_str_trim_head_tail		5161714						
ANR	5162008	Symbol	name		5161714						
ANR	5162009	Symbol	r_name_validate_char		5161714						
ANR	5162010	Symbol	maxlen		5161714						
ANR	5162011	Symbol	* len		5161714						
ANR	5162012	Function	r_name_filter2	88:0:1769:2003							
ANR	5162013	FunctionDef	r_name_filter2 (const char * name)		5162012	0					
ANR	5162014	CompoundStatement		88:45:1814:2003	5162012	0					
ANR	5162015	IdentifierDeclStatement	int i ;	89:1:1817:1822	5162012	0	True				
ANR	5162016	IdentifierDecl	i		5162012	0					
ANR	5162017	IdentifierDeclType	int		5162012	0					
ANR	5162018	Identifier	i		5162012	1					
ANR	5162019	WhileStatement	while ( ! IS_PRINTABLE ( * name ) )		5162012	1					
ANR	5162020	Condition	! IS_PRINTABLE ( * name )	90:8:1832:1852	5162012	0	True				
ANR	5162021	UnaryOperationExpression	! IS_PRINTABLE ( * name )		5162012	0					
ANR	5162022	UnaryOperator	!		5162012	0					
ANR	5162023	CallExpression	IS_PRINTABLE ( * name )		5162012	1					
ANR	5162024	Callee	IS_PRINTABLE		5162012	0					
ANR	5162025	Identifier	IS_PRINTABLE		5162012	0					
ANR	5162026	ArgumentList	* name		5162012	1					
ANR	5162027	Argument	* name		5162012	0					
ANR	5162028	UnaryOperationExpression	* name		5162012	0					
ANR	5162029	UnaryOperator	*		5162012	0					
ANR	5162030	Identifier	name		5162012	1					
ANR	5162031	CompoundStatement		3:31:40:40	5162012	1					
ANR	5162032	ExpressionStatement	name ++	91:2:1859:1865	5162012	0	True				
ANR	5162033	PostIncDecOperationExpression	name ++		5162012	0					
ANR	5162034	Identifier	name		5162012	0					
ANR	5162035	IncDec	++		5162012	1					
ANR	5162036	IdentifierDeclStatement	char * res = strdup ( name ) ;	93:1:1871:1896	5162012	2	True				
ANR	5162037	IdentifierDecl	* res = strdup ( name )		5162012	0					
ANR	5162038	IdentifierDeclType	char *		5162012	0					
ANR	5162039	Identifier	res		5162012	1					
ANR	5162040	AssignmentExpression	* res = strdup ( name )		5162012	2		=			
ANR	5162041	Identifier	res		5162012	0					
ANR	5162042	CallExpression	strdup ( name )		5162012	1					
ANR	5162043	Callee	strdup		5162012	0					
ANR	5162044	Identifier	strdup		5162012	0					
ANR	5162045	ArgumentList	name		5162012	1					
ANR	5162046	Argument	name		5162012	0					
ANR	5162047	Identifier	name		5162012	0					
ANR	5162048	ForStatement	for ( i = 0 ; res [ i ] ; i ++ )		5162012	3					
ANR	5162049	ForInit	i = 0 ;	94:6:1904:1909	5162012	0	True				
ANR	5162050	AssignmentExpression	i = 0		5162012	0		=			
ANR	5162051	Identifier	i		5162012	0					
ANR	5162052	PrimaryExpression	0		5162012	1					
ANR	5162053	Condition	res [ i ]	94:13:1911:1916	5162012	1	True				
ANR	5162054	ArrayIndexing	res [ i ]		5162012	0					
ANR	5162055	Identifier	res		5162012	0					
ANR	5162056	Identifier	i		5162012	1					
ANR	5162057	PostIncDecOperationExpression	i ++	94:21:1919:1921	5162012	2	True				
ANR	5162058	Identifier	i		5162012	0					
ANR	5162059	IncDec	++		5162012	1					
ANR	5162060	CompoundStatement		7:26:109:109	5162012	3					
ANR	5162061	IfStatement	if ( ! r_name_validate_char ( res [ i ] ) )		5162012	0					
ANR	5162062	Condition	! r_name_validate_char ( res [ i ] )	95:6:1932:1961	5162012	0	True				
ANR	5162063	UnaryOperationExpression	! r_name_validate_char ( res [ i ] )		5162012	0					
ANR	5162064	UnaryOperator	!		5162012	0					
ANR	5162065	CallExpression	r_name_validate_char ( res [ i ] )		5162012	1					
ANR	5162066	Callee	r_name_validate_char		5162012	0					
ANR	5162067	Identifier	r_name_validate_char		5162012	0					
ANR	5162068	ArgumentList	res [ i ]		5162012	1					
ANR	5162069	Argument	res [ i ]		5162012	0					
ANR	5162070	ArrayIndexing	res [ i ]		5162012	0					
ANR	5162071	Identifier	res		5162012	0					
ANR	5162072	Identifier	i		5162012	1					
ANR	5162073	CompoundStatement		8:38:149:149	5162012	1					
ANR	5162074	ExpressionStatement	res [ i ] = '_'	96:3:1969:1981	5162012	0	True				
ANR	5162075	AssignmentExpression	res [ i ] = '_'		5162012	0		=			
ANR	5162076	ArrayIndexing	res [ i ]		5162012	0					
ANR	5162077	Identifier	res		5162012	0					
ANR	5162078	Identifier	i		5162012	1					
ANR	5162079	PrimaryExpression	'_'		5162012	1					
ANR	5162080	ReturnStatement	return res ;	99:1:1991:2001	5162012	4	True				
ANR	5162081	Identifier	res		5162012	0					
ANR	5162082	ReturnType	R_API char *		5162012	1					
ANR	5162083	Identifier	r_name_filter2		5162012	2					
ANR	5162084	ParameterList	const char * name		5162012	3					
ANR	5162085	Parameter	const char * name	88:27:1796:1811	5162012	0	True				
ANR	5162086	ParameterType	const char *		5162012	0					
ANR	5162087	Identifier	name		5162012	1					
ANR	5162088	CFGEntryNode	ENTRY		5162012		True				
ANR	5162089	CFGExitNode	EXIT		5162012		True				
ANR	5162090	Symbol	* name		5162012						
ANR	5162091	Symbol	res		5162012						
ANR	5162092	Symbol	IS_PRINTABLE		5162012						
ANR	5162093	Symbol	* i		5162012						
ANR	5162094	Symbol	name		5162012						
ANR	5162095	Symbol	i		5162012						
ANR	5162096	Symbol	* res		5162012						
ANR	5162097	Symbol	strdup		5162012						
ANR	5162098	Symbol	r_name_validate_char		5162012						
