command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	924714	File	data/converged/CVE-2019-16718~_radare2/cmd_help.c								
ANR	924715	Function	vernum	9:0:176:557							
ANR	924716	FunctionDef	vernum (const char * s)		924715	0					
ANR	924717	CompoundStatement		9:34:210:557	924715	0					
ANR	924718	IdentifierDeclStatement	char * a = strdup ( s ) ;	13:1:392:412	924715	0	True				
ANR	924719	IdentifierDecl	* a = strdup ( s )		924715	0					
ANR	924720	IdentifierDeclType	char *		924715	0					
ANR	924721	Identifier	a		924715	1					
ANR	924722	AssignmentExpression	* a = strdup ( s )		924715	2		=			
ANR	924723	Identifier	a		924715	0					
ANR	924724	CallExpression	strdup ( s )		924715	1					
ANR	924725	Callee	strdup		924715	0					
ANR	924726	Identifier	strdup		924715	0					
ANR	924727	ArgumentList	s		924715	1					
ANR	924728	Argument	s		924715	0					
ANR	924729	Identifier	s		924715	0					
ANR	924730	ExpressionStatement	"a = r_str_replace ( a , ""."" , ""0"" , 1 )"	14:1:415:449	924715	1	True				
ANR	924731	AssignmentExpression	"a = r_str_replace ( a , ""."" , ""0"" , 1 )"		924715	0		=			
ANR	924732	Identifier	a		924715	0					
ANR	924733	CallExpression	"r_str_replace ( a , ""."" , ""0"" , 1 )"		924715	1					
ANR	924734	Callee	r_str_replace		924715	0					
ANR	924735	Identifier	r_str_replace		924715	0					
ANR	924736	ArgumentList	a		924715	1					
ANR	924737	Argument	a		924715	0					
ANR	924738	Identifier	a		924715	0					
ANR	924739	Argument	"""."""		924715	1					
ANR	924740	PrimaryExpression	"""."""		924715	0					
ANR	924741	Argument	"""0"""		924715	2					
ANR	924742	PrimaryExpression	"""0"""		924715	0					
ANR	924743	Argument	1		924715	3					
ANR	924744	PrimaryExpression	1		924715	0					
ANR	924745	IdentifierDeclStatement	"char * dash = strchr ( a , '-' ) ;"	15:1:452:480	924715	2	True				
ANR	924746	IdentifierDecl	"* dash = strchr ( a , '-' )"		924715	0					
ANR	924747	IdentifierDeclType	char *		924715	0					
ANR	924748	Identifier	dash		924715	1					
ANR	924749	AssignmentExpression	"* dash = strchr ( a , '-' )"		924715	2		=			
ANR	924750	Identifier	dash		924715	0					
ANR	924751	CallExpression	"strchr ( a , '-' )"		924715	1					
ANR	924752	Callee	strchr		924715	0					
ANR	924753	Identifier	strchr		924715	0					
ANR	924754	ArgumentList	a		924715	1					
ANR	924755	Argument	a		924715	0					
ANR	924756	Identifier	a		924715	0					
ANR	924757	Argument	'-'		924715	1					
ANR	924758	PrimaryExpression	'-'		924715	0					
ANR	924759	IfStatement	if ( dash )		924715	3					
ANR	924760	Condition	dash	16:5:487:490	924715	0	True				
ANR	924761	Identifier	dash		924715	0					
ANR	924762	CompoundStatement		8:11:282:282	924715	1					
ANR	924763	ExpressionStatement	* dash = 0	17:2:497:506	924715	0	True				
ANR	924764	AssignmentExpression	* dash = 0		924715	0		=			
ANR	924765	UnaryOperationExpression	* dash		924715	0					
ANR	924766	UnaryOperator	*		924715	0					
ANR	924767	Identifier	dash		924715	1					
ANR	924768	PrimaryExpression	0		924715	1					
ANR	924769	IdentifierDeclStatement	ut32 res = atoi ( a ) ;	19:1:512:531	924715	4	True				
ANR	924770	IdentifierDecl	res = atoi ( a )		924715	0					
ANR	924771	IdentifierDeclType	ut32		924715	0					
ANR	924772	Identifier	res		924715	1					
ANR	924773	AssignmentExpression	res = atoi ( a )		924715	2		=			
ANR	924774	Identifier	res		924715	0					
ANR	924775	CallExpression	atoi ( a )		924715	1					
ANR	924776	Callee	atoi		924715	0					
ANR	924777	Identifier	atoi		924715	0					
ANR	924778	ArgumentList	a		924715	1					
ANR	924779	Argument	a		924715	0					
ANR	924780	Identifier	a		924715	0					
ANR	924781	ExpressionStatement	free ( a )	20:1:534:542	924715	5	True				
ANR	924782	CallExpression	free ( a )		924715	0					
ANR	924783	Callee	free		924715	0					
ANR	924784	Identifier	free		924715	0					
ANR	924785	ArgumentList	a		924715	1					
ANR	924786	Argument	a		924715	0					
ANR	924787	Identifier	a		924715	0					
ANR	924788	ReturnStatement	return res ;	21:1:545:555	924715	6	True				
ANR	924789	Identifier	res		924715	0					
ANR	924790	ReturnType	static ut32		924715	1					
ANR	924791	Identifier	vernum		924715	2					
ANR	924792	ParameterList	const char * s		924715	3					
ANR	924793	Parameter	const char * s	9:19:195:207	924715	0	True				
ANR	924794	ParameterType	const char *		924715	0					
ANR	924795	Identifier	s		924715	1					
ANR	924796	CFGEntryNode	ENTRY		924715		True				
ANR	924797	CFGExitNode	EXIT		924715		True				
ANR	924798	Symbol	atoi		924715						
ANR	924799	Symbol	a		924715						
ANR	924800	Symbol	res		924715						
ANR	924801	Symbol	s		924715						
ANR	924802	Symbol	* dash		924715						
ANR	924803	Symbol	r_str_replace		924715						
ANR	924804	Symbol	strchr		924715						
ANR	924805	Symbol	strdup		924715						
ANR	924806	Symbol	dash		924715						
ANR	924807	DeclStmt									
ANR	924808	Decl							const char	const char * [ ]	help_msg_percent
ANR	924809	DeclStmt									
ANR	924810	Decl							const char	const char * [ ]	help_msg_env
ANR	924811	DeclStmt									
ANR	924812	Decl							const char	const char * [ ]	help_msg_exclamation
ANR	924813	DeclStmt									
ANR	924814	Decl							const char	const char * [ ]	help_msg_root
ANR	924815	DeclStmt									
ANR	924816	Decl							const char	const char * [ ]	help_msg_question
ANR	924817	DeclStmt									
ANR	924818	Decl							const char	const char * [ ]	help_msg_question_v
ANR	924819	DeclStmt									
ANR	924820	Decl							const char	const char * [ ]	help_msg_question_V
ANR	924821	DeclStmt									
ANR	924822	Decl							const char	const char * [ ]	help_msg_greater_sign
ANR	924823	DeclStmt									
ANR	924824	Decl							const char	const char * [ ]	help_msg_intro
ANR	924825	Function	cmd_help_exclamation	250:0:10661:10795							
ANR	924826	FunctionDef	cmd_help_exclamation (RCore * core)		924825	0					
ANR	924827	CompoundStatement		250:46:10707:10795	924825	0					
ANR	924828	ExpressionStatement	"r_core_cmd_help ( core , help_msg_exclamation )"	251:1:10710:10754	924825	0	True				
ANR	924829	CallExpression	"r_core_cmd_help ( core , help_msg_exclamation )"		924825	0					
ANR	924830	Callee	r_core_cmd_help		924825	0					
ANR	924831	Identifier	r_core_cmd_help		924825	0					
ANR	924832	ArgumentList	core		924825	1					
ANR	924833	Argument	core		924825	0					
ANR	924834	Identifier	core		924825	0					
ANR	924835	Argument	help_msg_exclamation		924825	1					
ANR	924836	Identifier	help_msg_exclamation		924825	0					
ANR	924837	ExpressionStatement	"r_core_cmd_help ( core , help_msg_env )"	252:1:10757:10793	924825	1	True				
ANR	924838	CallExpression	"r_core_cmd_help ( core , help_msg_env )"		924825	0					
ANR	924839	Callee	r_core_cmd_help		924825	0					
ANR	924840	Identifier	r_core_cmd_help		924825	0					
ANR	924841	ArgumentList	core		924825	1					
ANR	924842	Argument	core		924825	0					
ANR	924843	Identifier	core		924825	0					
ANR	924844	Argument	help_msg_env		924825	1					
ANR	924845	Identifier	help_msg_env		924825	0					
ANR	924846	ReturnType	static void		924825	1					
ANR	924847	Identifier	cmd_help_exclamation		924825	2					
ANR	924848	ParameterList	RCore * core		924825	3					
ANR	924849	Parameter	RCore * core	250:33:10694:10704	924825	0	True				
ANR	924850	ParameterType	RCore *		924825	0					
ANR	924851	Identifier	core		924825	1					
ANR	924852	CFGEntryNode	ENTRY		924825		True				
ANR	924853	CFGExitNode	EXIT		924825		True				
ANR	924854	Symbol	core		924825						
ANR	924855	Symbol	help_msg_exclamation		924825						
ANR	924856	Symbol	help_msg_env		924825						
ANR	924857	Function	cmd_help_percent	255:0:10798:10924							
ANR	924858	FunctionDef	cmd_help_percent (RCore * core)		924857	0					
ANR	924859	CompoundStatement		255:42:10840:10924	924857	0					
ANR	924860	ExpressionStatement	"r_core_cmd_help ( core , help_msg_percent )"	256:1:10843:10883	924857	0	True				
ANR	924861	CallExpression	"r_core_cmd_help ( core , help_msg_percent )"		924857	0					
ANR	924862	Callee	r_core_cmd_help		924857	0					
ANR	924863	Identifier	r_core_cmd_help		924857	0					
ANR	924864	ArgumentList	core		924857	1					
ANR	924865	Argument	core		924857	0					
ANR	924866	Identifier	core		924857	0					
ANR	924867	Argument	help_msg_percent		924857	1					
ANR	924868	Identifier	help_msg_percent		924857	0					
ANR	924869	ExpressionStatement	"r_core_cmd_help ( core , help_msg_env )"	257:1:10886:10922	924857	1	True				
ANR	924870	CallExpression	"r_core_cmd_help ( core , help_msg_env )"		924857	0					
ANR	924871	Callee	r_core_cmd_help		924857	0					
ANR	924872	Identifier	r_core_cmd_help		924857	0					
ANR	924873	ArgumentList	core		924857	1					
ANR	924874	Argument	core		924857	0					
ANR	924875	Identifier	core		924857	0					
ANR	924876	Argument	help_msg_env		924857	1					
ANR	924877	Identifier	help_msg_env		924857	0					
ANR	924878	ReturnType	static void		924857	1					
ANR	924879	Identifier	cmd_help_percent		924857	2					
ANR	924880	ParameterList	RCore * core		924857	3					
ANR	924881	Parameter	RCore * core	255:29:10827:10837	924857	0	True				
ANR	924882	ParameterType	RCore *		924857	0					
ANR	924883	Identifier	core		924857	1					
ANR	924884	CFGEntryNode	ENTRY		924857		True				
ANR	924885	CFGExitNode	EXIT		924857		True				
ANR	924886	Symbol	core		924857						
ANR	924887	Symbol	help_msg_percent		924857						
ANR	924888	Symbol	help_msg_env		924857						
ANR	924889	Function	cmd_help_init	260:0:10927:11130							
ANR	924890	FunctionDef	cmd_help_init (RCore * core)		924889	0					
ANR	924891	CompoundStatement		260:39:10966:11130	924889	0					
ANR	924892	Statement	DEFINE_CMD_DESCRIPTOR_SPECIAL	261:1:10969:10997	924889	0	True				
ANR	924893	Statement	(	261:31:10999:10999	924889	1	True				
ANR	924894	Statement	core	261:32:11000:11003	924889	2	True				
ANR	924895	Statement	","	261:36:11004:11004	924889	3	True				
ANR	924896	Statement	?	261:38:11006:11006	924889	4	True				
ANR	924897	Statement	","	261:39:11007:11007	924889	5	True				
ANR	924898	Statement	question	261:41:11009:11016	924889	6	True				
ANR	924899	Statement	)	261:49:11017:11017	924889	7	True				
ANR	924900	ExpressionStatement		261:50:11018:11018	924889	8	True				
ANR	924901	Statement	DEFINE_CMD_DESCRIPTOR_SPECIAL	262:1:11021:11049	924889	9	True				
ANR	924902	Statement	(	262:31:11051:11051	924889	10	True				
ANR	924903	Statement	core	262:32:11052:11055	924889	11	True				
ANR	924904	Statement	","	262:36:11056:11056	924889	12	True				
ANR	924905	Statement	?	262:38:11058:11058	924889	13	True				
ANR	924906	Statement	v	262:39:11059:11059	924889	14	True				
ANR	924907	Statement	","	262:40:11060:11060	924889	15	True				
ANR	924908	Statement	question_v	262:42:11062:11071	924889	16	True				
ANR	924909	Statement	)	262:52:11072:11072	924889	17	True				
ANR	924910	ExpressionStatement		262:53:11073:11073	924889	18	True				
ANR	924911	Statement	DEFINE_CMD_DESCRIPTOR_SPECIAL	263:1:11076:11104	924889	19	True				
ANR	924912	Statement	(	263:31:11106:11106	924889	20	True				
ANR	924913	Statement	core	263:32:11107:11110	924889	21	True				
ANR	924914	Statement	","	263:36:11111:11111	924889	22	True				
ANR	924915	Statement	?	263:38:11113:11113	924889	23	True				
ANR	924916	Statement	V	263:39:11114:11114	924889	24	True				
ANR	924917	Statement	","	263:40:11115:11115	924889	25	True				
ANR	924918	Statement	question_V	263:42:11117:11126	924889	26	True				
ANR	924919	Statement	)	263:52:11127:11127	924889	27	True				
ANR	924920	ExpressionStatement		263:53:11128:11128	924889	28	True				
ANR	924921	ReturnType	static void		924889	1					
ANR	924922	Identifier	cmd_help_init		924889	2					
ANR	924923	ParameterList	RCore * core		924889	3					
ANR	924924	Parameter	RCore * core	260:26:10953:10963	924889	0	True				
ANR	924925	ParameterType	RCore *		924889	0					
ANR	924926	Identifier	core		924889	1					
ANR	924927	CFGEntryNode	ENTRY		924889		True				
ANR	924928	CFGExitNode	EXIT		924889		True				
ANR	924929	Symbol	core		924889						
ANR	924930	Function	findBreakChar	266:0:11133:11268							
ANR	924931	FunctionDef	findBreakChar (const char * s)		924930	0					
ANR	924932	CompoundStatement		266:48:11181:11268	924930	0					
ANR	924933	WhileStatement	while ( * s )		924930	0					
ANR	924934	Condition	* s	267:8:11191:11192	924930	0	True				
ANR	924935	UnaryOperationExpression	* s		924930	0					
ANR	924936	UnaryOperator	*		924930	0					
ANR	924937	Identifier	s		924930	1					
ANR	924938	CompoundStatement		2:12:13:13	924930	1					
ANR	924939	IfStatement	if ( ! r_name_validate_char ( * s ) )		924930	0					
ANR	924940	Condition	! r_name_validate_char ( * s )	268:6:11203:11228	924930	0	True				
ANR	924941	UnaryOperationExpression	! r_name_validate_char ( * s )		924930	0					
ANR	924942	UnaryOperator	!		924930	0					
ANR	924943	CallExpression	r_name_validate_char ( * s )		924930	1					
ANR	924944	Callee	r_name_validate_char		924930	0					
ANR	924945	Identifier	r_name_validate_char		924930	0					
ANR	924946	ArgumentList	* s		924930	1					
ANR	924947	Argument	* s		924930	0					
ANR	924948	UnaryOperationExpression	* s		924930	0					
ANR	924949	UnaryOperator	*		924930	0					
ANR	924950	Identifier	s		924930	1					
ANR	924951	CompoundStatement		3:34:49:49	924930	1					
ANR	924952	BreakStatement	break ;	269:3:11236:11241	924930	0	True				
ANR	924953	ExpressionStatement	s ++	271:2:11249:11252	924930	1	True				
ANR	924954	PostIncDecOperationExpression	s ++		924930	0					
ANR	924955	Identifier	s		924930	0					
ANR	924956	IncDec	++		924930	1					
ANR	924957	ReturnStatement	return s ;	273:1:11258:11266	924930	1	True				
ANR	924958	Identifier	s		924930	0					
ANR	924959	ReturnType	static const char *		924930	1					
ANR	924960	Identifier	findBreakChar		924930	2					
ANR	924961	ParameterList	const char * s		924930	3					
ANR	924962	Parameter	const char * s	266:33:11166:11178	924930	0	True				
ANR	924963	ParameterType	const char *		924930	0					
ANR	924964	Identifier	s		924930	1					
ANR	924965	CFGEntryNode	ENTRY		924930		True				
ANR	924966	CFGExitNode	EXIT		924930		True				
ANR	924967	Symbol	s		924930						
ANR	924968	Symbol	r_name_validate_char		924930						
ANR	924969	Symbol	* s		924930						
ANR	924970	Function	filterFlags	276:0:11271:12158							
ANR	924971	FunctionDef	"filterFlags (RCore * core , const char * msg)"		924970	0					
ANR	924972	CompoundStatement		276:55:11326:12158	924970	0					
ANR	924973	IdentifierDeclStatement	"const char * dollar , * end ;"	277:1:11329:11353	924970	0	True				
ANR	924974	IdentifierDecl	* dollar		924970	0					
ANR	924975	IdentifierDeclType	const char *		924970	0					
ANR	924976	Identifier	dollar		924970	1					
ANR	924977	IdentifierDecl	* end		924970	1					
ANR	924978	IdentifierDeclType	const char *		924970	0					
ANR	924979	Identifier	end		924970	1					
ANR	924980	IdentifierDeclStatement	"char * word , * buf = NULL ;"	278:1:11356:11379	924970	1	True				
ANR	924981	IdentifierDecl	* word		924970	0					
ANR	924982	IdentifierDeclType	char *		924970	0					
ANR	924983	Identifier	word		924970	1					
ANR	924984	IdentifierDecl	* buf = NULL		924970	1					
ANR	924985	IdentifierDeclType	char *		924970	0					
ANR	924986	Identifier	buf		924970	1					
ANR	924987	AssignmentExpression	* buf = NULL		924970	2		=			
ANR	924988	Identifier	NULL		924970	0					
ANR	924989	Identifier	NULL		924970	1					
ANR	924990	ForStatement	for ( ; ; )		924970	2					
ANR	924991	CompoundStatement		4:10:64:64	924970	0					
ANR	924992	ExpressionStatement	"dollar = strchr ( msg , '$' )"	280:2:11395:11421	924970	0	True				
ANR	924993	AssignmentExpression	"dollar = strchr ( msg , '$' )"		924970	0		=			
ANR	924994	Identifier	dollar		924970	0					
ANR	924995	CallExpression	"strchr ( msg , '$' )"		924970	1					
ANR	924996	Callee	strchr		924970	0					
ANR	924997	Identifier	strchr		924970	0					
ANR	924998	ArgumentList	msg		924970	1					
ANR	924999	Argument	msg		924970	0					
ANR	925000	Identifier	msg		924970	0					
ANR	925001	Argument	'$'		924970	1					
ANR	925002	PrimaryExpression	'$'		924970	0					
ANR	925003	IfStatement	if ( ! dollar )		924970	1					
ANR	925004	Condition	! dollar	281:6:11429:11435	924970	0	True				
ANR	925005	UnaryOperationExpression	! dollar		924970	0					
ANR	925006	UnaryOperator	!		924970	0					
ANR	925007	Identifier	dollar		924970	1					
ANR	925008	CompoundStatement		6:15:111:111	924970	1					
ANR	925009	BreakStatement	break ;	282:3:11443:11448	924970	0	True				
ANR	925010	ExpressionStatement	"buf = r_str_appendlen ( buf , msg , dollar - msg )"	284:2:11456:11500	924970	2	True				
ANR	925011	AssignmentExpression	"buf = r_str_appendlen ( buf , msg , dollar - msg )"		924970	0		=			
ANR	925012	Identifier	buf		924970	0					
ANR	925013	CallExpression	"r_str_appendlen ( buf , msg , dollar - msg )"		924970	1					
ANR	925014	Callee	r_str_appendlen		924970	0					
ANR	925015	Identifier	r_str_appendlen		924970	0					
ANR	925016	ArgumentList	buf		924970	1					
ANR	925017	Argument	buf		924970	0					
ANR	925018	Identifier	buf		924970	0					
ANR	925019	Argument	msg		924970	1					
ANR	925020	Identifier	msg		924970	0					
ANR	925021	Argument	dollar - msg		924970	2					
ANR	925022	AdditiveExpression	dollar - msg		924970	0		-			
ANR	925023	Identifier	dollar		924970	0					
ANR	925024	Identifier	msg		924970	1					
ANR	925025	IfStatement	if ( dollar [ 1 ] == '{' )		924970	3					
ANR	925026	Condition	dollar [ 1 ] == '{'	285:6:11508:11521	924970	0	True				
ANR	925027	EqualityExpression	dollar [ 1 ] == '{'		924970	0		==			
ANR	925028	ArrayIndexing	dollar [ 1 ]		924970	0					
ANR	925029	Identifier	dollar		924970	0					
ANR	925030	PrimaryExpression	1		924970	1					
ANR	925031	PrimaryExpression	'{'		924970	1					
ANR	925032	CompoundStatement		10:22:197:197	924970	1					
ANR	925033	ExpressionStatement	"end = strchr ( dollar + 2 , '}' )"	287:3:11542:11570	924970	0	True				
ANR	925034	AssignmentExpression	"end = strchr ( dollar + 2 , '}' )"		924970	0		=			
ANR	925035	Identifier	end		924970	0					
ANR	925036	CallExpression	"strchr ( dollar + 2 , '}' )"		924970	1					
ANR	925037	Callee	strchr		924970	0					
ANR	925038	Identifier	strchr		924970	0					
ANR	925039	ArgumentList	dollar + 2		924970	1					
ANR	925040	Argument	dollar + 2		924970	0					
ANR	925041	AdditiveExpression	dollar + 2		924970	0		+			
ANR	925042	Identifier	dollar		924970	0					
ANR	925043	PrimaryExpression	2		924970	1					
ANR	925044	Argument	'}'		924970	1					
ANR	925045	PrimaryExpression	'}'		924970	0					
ANR	925046	IfStatement	if ( end )		924970	1					
ANR	925047	Condition	end	288:7:11579:11581	924970	0	True				
ANR	925048	Identifier	end		924970	0					
ANR	925049	CompoundStatement		13:12:257:257	924970	1					
ANR	925050	ExpressionStatement	"word = r_str_newlen ( dollar + 2 , end - dollar - 2 )"	289:4:11590:11634	924970	0	True				
ANR	925051	AssignmentExpression	"word = r_str_newlen ( dollar + 2 , end - dollar - 2 )"		924970	0		=			
ANR	925052	Identifier	word		924970	0					
ANR	925053	CallExpression	"r_str_newlen ( dollar + 2 , end - dollar - 2 )"		924970	1					
ANR	925054	Callee	r_str_newlen		924970	0					
ANR	925055	Identifier	r_str_newlen		924970	0					
ANR	925056	ArgumentList	dollar + 2		924970	1					
ANR	925057	Argument	dollar + 2		924970	0					
ANR	925058	AdditiveExpression	dollar + 2		924970	0		+			
ANR	925059	Identifier	dollar		924970	0					
ANR	925060	PrimaryExpression	2		924970	1					
ANR	925061	Argument	end - dollar - 2		924970	1					
ANR	925062	AdditiveExpression	end - dollar - 2		924970	0		-			
ANR	925063	Identifier	end		924970	0					
ANR	925064	AdditiveExpression	dollar - 2		924970	1		-			
ANR	925065	Identifier	dollar		924970	0					
ANR	925066	PrimaryExpression	2		924970	1					
ANR	925067	ExpressionStatement	end ++	290:4:11640:11645	924970	1	True				
ANR	925068	PostIncDecOperationExpression	end ++		924970	0					
ANR	925069	Identifier	end		924970	0					
ANR	925070	IncDec	++		924970	1					
ANR	925071	ElseStatement	else		924970	0					
ANR	925072	CompoundStatement		16:10:330:330	924970	0					
ANR	925073	ExpressionStatement	msg = dollar + 1	292:4:11663:11677	924970	0	True				
ANR	925074	AssignmentExpression	msg = dollar + 1		924970	0		=			
ANR	925075	Identifier	msg		924970	0					
ANR	925076	AdditiveExpression	dollar + 1		924970	1		+			
ANR	925077	Identifier	dollar		924970	0					
ANR	925078	PrimaryExpression	1		924970	1					
ANR	925079	ExpressionStatement	"buf = r_str_append ( buf , ""$"" )"	293:4:11683:11712	924970	1	True				
ANR	925080	AssignmentExpression	"buf = r_str_append ( buf , ""$"" )"		924970	0		=			
ANR	925081	Identifier	buf		924970	0					
ANR	925082	CallExpression	"r_str_append ( buf , ""$"" )"		924970	1					
ANR	925083	Callee	r_str_append		924970	0					
ANR	925084	Identifier	r_str_append		924970	0					
ANR	925085	ArgumentList	buf		924970	1					
ANR	925086	Argument	buf		924970	0					
ANR	925087	Identifier	buf		924970	0					
ANR	925088	Argument	"""$"""		924970	1					
ANR	925089	PrimaryExpression	"""$"""		924970	0					
ANR	925090	ContinueStatement	continue ;	294:4:11718:11726	924970	2	True				
ANR	925091	ElseStatement	else		924970	0					
ANR	925092	CompoundStatement		21:9:415:415	924970	0					
ANR	925093	ExpressionStatement	end = findBreakChar ( dollar + 1 )	297:3:11747:11777	924970	0	True				
ANR	925094	AssignmentExpression	end = findBreakChar ( dollar + 1 )		924970	0		=			
ANR	925095	Identifier	end		924970	0					
ANR	925096	CallExpression	findBreakChar ( dollar + 1 )		924970	1					
ANR	925097	Callee	findBreakChar		924970	0					
ANR	925098	Identifier	findBreakChar		924970	0					
ANR	925099	ArgumentList	dollar + 1		924970	1					
ANR	925100	Argument	dollar + 1		924970	0					
ANR	925101	AdditiveExpression	dollar + 1		924970	0		+			
ANR	925102	Identifier	dollar		924970	0					
ANR	925103	PrimaryExpression	1		924970	1					
ANR	925104	IfStatement	if ( ! end )		924970	1					
ANR	925105	Condition	! end	298:7:11786:11789	924970	0	True				
ANR	925106	UnaryOperationExpression	! end		924970	0					
ANR	925107	UnaryOperator	!		924970	0					
ANR	925108	Identifier	end		924970	1					
ANR	925109	CompoundStatement		23:13:465:465	924970	1					
ANR	925110	ExpressionStatement	end = dollar + strlen ( dollar )	299:4:11798:11828	924970	0	True				
ANR	925111	AssignmentExpression	end = dollar + strlen ( dollar )		924970	0		=			
ANR	925112	Identifier	end		924970	0					
ANR	925113	AdditiveExpression	dollar + strlen ( dollar )		924970	1		+			
ANR	925114	Identifier	dollar		924970	0					
ANR	925115	CallExpression	strlen ( dollar )		924970	1					
ANR	925116	Callee	strlen		924970	0					
ANR	925117	Identifier	strlen		924970	0					
ANR	925118	ArgumentList	dollar		924970	1					
ANR	925119	Argument	dollar		924970	0					
ANR	925120	Identifier	dollar		924970	0					
ANR	925121	ExpressionStatement	"word = r_str_newlen ( dollar + 1 , end - dollar - 1 )"	301:3:11838:11882	924970	2	True				
ANR	925122	AssignmentExpression	"word = r_str_newlen ( dollar + 1 , end - dollar - 1 )"		924970	0		=			
ANR	925123	Identifier	word		924970	0					
ANR	925124	CallExpression	"r_str_newlen ( dollar + 1 , end - dollar - 1 )"		924970	1					
ANR	925125	Callee	r_str_newlen		924970	0					
ANR	925126	Identifier	r_str_newlen		924970	0					
ANR	925127	ArgumentList	dollar + 1		924970	1					
ANR	925128	Argument	dollar + 1		924970	0					
ANR	925129	AdditiveExpression	dollar + 1		924970	0		+			
ANR	925130	Identifier	dollar		924970	0					
ANR	925131	PrimaryExpression	1		924970	1					
ANR	925132	Argument	end - dollar - 1		924970	1					
ANR	925133	AdditiveExpression	end - dollar - 1		924970	0		-			
ANR	925134	Identifier	end		924970	0					
ANR	925135	AdditiveExpression	dollar - 1		924970	1		-			
ANR	925136	Identifier	dollar		924970	0					
ANR	925137	PrimaryExpression	1		924970	1					
ANR	925138	IfStatement	if ( end && word )		924970	4					
ANR	925139	Condition	end && word	303:6:11894:11904	924970	0	True				
ANR	925140	AndExpression	end && word		924970	0		&&			
ANR	925141	Identifier	end		924970	0					
ANR	925142	Identifier	word		924970	1					
ANR	925143	CompoundStatement		30:3:629:641	924970	1					
ANR	925144	IdentifierDeclStatement	"ut64 val = r_num_math ( core -> num , word ) ;"	304:3:11912:11951	924970	0	True				
ANR	925145	IdentifierDecl	"val = r_num_math ( core -> num , word )"		924970	0					
ANR	925146	IdentifierDeclType	ut64		924970	0					
ANR	925147	Identifier	val		924970	1					
ANR	925148	AssignmentExpression	"val = r_num_math ( core -> num , word )"		924970	2		=			
ANR	925149	Identifier	val		924970	0					
ANR	925150	CallExpression	"r_num_math ( core -> num , word )"		924970	1					
ANR	925151	Callee	r_num_math		924970	0					
ANR	925152	Identifier	r_num_math		924970	0					
ANR	925153	ArgumentList	core -> num		924970	1					
ANR	925154	Argument	core -> num		924970	0					
ANR	925155	PtrMemberAccess	core -> num		924970	0					
ANR	925156	Identifier	core		924970	0					
ANR	925157	Identifier	num		924970	1					
ANR	925158	Argument	word		924970	1					
ANR	925159	Identifier	word		924970	0					
ANR	925160	IdentifierDeclStatement	char num [ 32 ] ;	305:3:11956:11968	924970	1	True				
ANR	925161	IdentifierDecl	num [ 32 ]		924970	0					
ANR	925162	IdentifierDeclType	char [ 32 ]		924970	0					
ANR	925163	Identifier	num		924970	1					
ANR	925164	PrimaryExpression	32		924970	2					
ANR	925165	Statement	snprintf	306:3:11973:11980	924970	2	True				
ANR	925166	Statement	(	306:12:11982:11982	924970	3	True				
ANR	925167	Statement	num	306:13:11983:11985	924970	4	True				
ANR	925168	Statement	","	306:16:11986:11986	924970	5	True				
ANR	925169	Statement	sizeof	306:18:11988:11993	924970	6	True				
ANR	925170	Statement	(	306:25:11995:11995	924970	7	True				
ANR	925171	Statement	num	306:26:11996:11998	924970	8	True				
ANR	925172	Statement	)	306:29:11999:11999	924970	9	True				
ANR	925173	Statement	","	306:30:12000:12000	924970	10	True				
ANR	925174	Statement	"""0x%"""	306:32:12002:12006	924970	11	True				
ANR	925175	Statement	PFMT64x	306:37:12007:12013	924970	12	True				
ANR	925176	Statement	","	306:44:12014:12014	924970	13	True				
ANR	925177	Statement	val	306:46:12016:12018	924970	14	True				
ANR	925178	Statement	)	306:49:12019:12019	924970	15	True				
ANR	925179	ExpressionStatement		306:50:12020:12020	924970	16	True				
ANR	925180	ExpressionStatement	"buf = r_str_append ( buf , num )"	307:3:12025:12054	924970	17	True				
ANR	925181	AssignmentExpression	"buf = r_str_append ( buf , num )"		924970	0		=			
ANR	925182	Identifier	buf		924970	0					
ANR	925183	CallExpression	"r_str_append ( buf , num )"		924970	1					
ANR	925184	Callee	r_str_append		924970	0					
ANR	925185	Identifier	r_str_append		924970	0					
ANR	925186	ArgumentList	buf		924970	1					
ANR	925187	Argument	buf		924970	0					
ANR	925188	Identifier	buf		924970	0					
ANR	925189	Argument	num		924970	1					
ANR	925190	Identifier	num		924970	0					
ANR	925191	ExpressionStatement	msg = end	308:3:12059:12068	924970	18	True				
ANR	925192	AssignmentExpression	msg = end		924970	0		=			
ANR	925193	Identifier	msg		924970	0					
ANR	925194	Identifier	end		924970	1					
ANR	925195	ElseStatement	else		924970	0					
ANR	925196	CompoundStatement		34:9:752:752	924970	0					
ANR	925197	BreakStatement	break ;	310:3:12084:12089	924970	0	True				
ANR	925198	ExpressionStatement	free ( word )	312:2:12097:12108	924970	5	True				
ANR	925199	CallExpression	free ( word )		924970	0					
ANR	925200	Callee	free		924970	0					
ANR	925201	Identifier	free		924970	0					
ANR	925202	ArgumentList	word		924970	1					
ANR	925203	Argument	word		924970	0					
ANR	925204	Identifier	word		924970	0					
ANR	925205	ExpressionStatement	"buf = r_str_append ( buf , msg )"	314:1:12114:12143	924970	3	True				
ANR	925206	AssignmentExpression	"buf = r_str_append ( buf , msg )"		924970	0		=			
ANR	925207	Identifier	buf		924970	0					
ANR	925208	CallExpression	"r_str_append ( buf , msg )"		924970	1					
ANR	925209	Callee	r_str_append		924970	0					
ANR	925210	Identifier	r_str_append		924970	0					
ANR	925211	ArgumentList	buf		924970	1					
ANR	925212	Argument	buf		924970	0					
ANR	925213	Identifier	buf		924970	0					
ANR	925214	Argument	msg		924970	1					
ANR	925215	Identifier	msg		924970	0					
ANR	925216	ReturnStatement	return buf ;	315:1:12146:12156	924970	4	True				
ANR	925217	Identifier	buf		924970	0					
ANR	925218	ReturnType	static char *		924970	1					
ANR	925219	Identifier	filterFlags		924970	2					
ANR	925220	ParameterList	"RCore * core , const char * msg"		924970	3					
ANR	925221	Parameter	RCore * core	276:25:11296:11306	924970	0	True				
ANR	925222	ParameterType	RCore *		924970	0					
ANR	925223	Identifier	core		924970	1					
ANR	925224	Parameter	const char * msg	276:38:11309:11323	924970	1	True				
ANR	925225	ParameterType	const char *		924970	0					
ANR	925226	Identifier	msg		924970	1					
ANR	925227	CFGEntryNode	ENTRY		924970		True				
ANR	925228	CFGExitNode	EXIT		924970		True				
ANR	925229	InfiniteForNode	true		924970		True				
ANR	925230	Symbol	msg		924970						
ANR	925231	Symbol	val		924970						
ANR	925232	Symbol	r_str_append		924970						
ANR	925233	Symbol	NULL		924970						
ANR	925234	Symbol	num		924970						
ANR	925235	Symbol	* core		924970						
ANR	925236	Symbol	strchr		924970						
ANR	925237	Symbol	findBreakChar		924970						
ANR	925238	Symbol	dollar		924970						
ANR	925239	Symbol	r_num_math		924970						
ANR	925240	Symbol	core		924970						
ANR	925241	Symbol	strlen		924970						
ANR	925242	Symbol	buf		924970						
ANR	925243	Symbol	r_str_appendlen		924970						
ANR	925244	Symbol	end		924970						
ANR	925245	Symbol	r_str_newlen		924970						
ANR	925246	Symbol	core -> num		924970						
ANR	925247	Symbol	word		924970						
ANR	925248	Symbol	* dollar		924970						
ANR	925249	ClassDef	<unnamed>	318:0:12161:12204							
ANR	925250	Function	getClippy	323:0:12208:13078							
ANR	925251	FunctionDef	getClippy (int type)		925250	0					
ANR	925252	CompoundStatement		323:39:12247:13078	925250	0					
ANR	925253	IfStatement	if ( type == R_AVATAR_ORANGG )		925250	0					
ANR	925254	Condition	type == R_AVATAR_ORANGG	324:5:12254:12276	925250	0	True				
ANR	925255	EqualityExpression	type == R_AVATAR_ORANGG		925250	0		==			
ANR	925256	Identifier	type		925250	0					
ANR	925257	Identifier	R_AVATAR_ORANGG		925250	1					
ANR	925258	CompoundStatement		2:30:31:31	925250	1					
ANR	925259	Statement	return	325:3:12284:12289	925250	0	True				
ANR	925260	Statement	"""      _______\\n"""	326:3:12294:12310	925250	1	True				
ANR	925261	Statement	"""     /       \\\\      .-%s-.\\n"""	327:3:12315:12345	925250	2	True				
ANR	925262	Statement	"""   _| ( o) (o)\\\\_    | %s |\\n"""	328:3:12350:12380	925250	3	True				
ANR	925263	Statement	"""  / _     .\\\\. | \\\\  <| %s |\\n"""	329:3:12385:12416	925250	4	True				
ANR	925264	Statement	"""  \\\\| \\\\   ____ / 7`  | %s |\\n"""	330:3:12421:12452	925250	5	True				
ANR	925265	Statement	"""  '|\\\\|  `---'/      `-%s-'\\n"""	331:3:12457:12487	925250	6	True				
ANR	925266	Statement	"""     | /----. \\\\\\n"""	332:3:12492:12511	925250	7	True				
ANR	925267	Statement	"""     | \\\\___/  |___\\n"""	333:3:12516:12538	925250	8	True				
ANR	925268	ExpressionStatement	"""     `-----'`-----'\\n"""	334:3:12543:12570	925250	9	True				
ANR	925269	PrimaryExpression	"""     `-----'`-----'\\n"""		925250	0					
ANR	925270	IdentifierDeclStatement	const int choose = r_num_rand ( 3 ) ;	337:1:12576:12609	925250	1	True				
ANR	925271	IdentifierDecl	choose = r_num_rand ( 3 )		925250	0					
ANR	925272	IdentifierDeclType	const int		925250	0					
ANR	925273	Identifier	choose		925250	1					
ANR	925274	AssignmentExpression	choose = r_num_rand ( 3 )		925250	2		=			
ANR	925275	Identifier	choose		925250	0					
ANR	925276	CallExpression	r_num_rand ( 3 )		925250	1					
ANR	925277	Callee	r_num_rand		925250	0					
ANR	925278	Identifier	r_num_rand		925250	0					
ANR	925279	ArgumentList	3		925250	1					
ANR	925280	Argument	3		925250	0					
ANR	925281	PrimaryExpression	3		925250	0					
ANR	925282	SwitchStatement	switch ( choose )		925250	2					
ANR	925283	Condition	choose	338:9:12620:12625	925250	0	True				
ANR	925284	Identifier	choose		925250	0					
ANR	925285	CompoundStatement		16:17:380:380	925250	1					
ANR	925286	Label	case 0 :	339:1:12631:12637	925250	0	True				
ANR	925287	Statement	return	339:9:12639:12644	925250	1	True				
ANR	925288	Statement	""" .--.     .-%s-.\\n"""	340:0:12646:12665	925250	2	True				
ANR	925289	Statement	""" | _|     | %s |\\n"""	341:0:12667:12686	925250	3	True				
ANR	925290	Statement	""" | O O   <  %s |\\n"""	342:0:12688:12707	925250	4	True				
ANR	925291	Statement	""" |  |  |  | %s |\\n"""	343:0:12709:12728	925250	5	True				
ANR	925292	Statement	""" || | /   `-%s-'\\n"""	344:0:12730:12749	925250	6	True				
ANR	925293	Statement	""" |`-'|\\n"""	345:0:12751:12760	925250	7	True				
ANR	925294	ExpressionStatement	""" `---'\\n"""	346:0:12762:12772	925250	8	True				
ANR	925295	PrimaryExpression	""" `---'\\n"""		925250	0					
ANR	925296	Label	case 1 :	347:1:12775:12781	925250	9	True				
ANR	925297	Statement	return	347:9:12783:12788	925250	10	True				
ANR	925298	Statement	""" .--.     .-%s-.\\n"""	348:0:12790:12809	925250	11	True				
ANR	925299	Statement	""" |   \\\\    | %s |\\n"""	349:0:12811:12831	925250	12	True				
ANR	925300	Statement	""" | O o   <  %s |\\n"""	350:0:12833:12852	925250	13	True				
ANR	925301	Statement	""" |   | /  | %s |\\n"""	351:0:12854:12873	925250	14	True				
ANR	925302	Statement	""" |  ( /   `-%s-'\\n"""	352:0:12875:12894	925250	15	True				
ANR	925303	Statement	""" |   / \\n"""	353:0:12896:12906	925250	16	True				
ANR	925304	ExpressionStatement	""" `--'\\n"""	354:0:12908:12917	925250	17	True				
ANR	925305	PrimaryExpression	""" `--'\\n"""		925250	0					
ANR	925306	Label	case 2 :	355:1:12920:12926	925250	18	True				
ANR	925307	Statement	return	355:9:12928:12933	925250	19	True				
ANR	925308	Statement	""" .--.     .-%s-.\\n"""	356:0:12935:12954	925250	20	True				
ANR	925309	Statement	""" | _|_    | %s |\\n"""	357:0:12956:12975	925250	21	True				
ANR	925310	Statement	""" | O O   <  %s |\\n"""	358:0:12977:12996	925250	22	True				
ANR	925311	Statement	""" |  ||    | %s |\\n"""	359:0:12998:13017	925250	23	True				
ANR	925312	Statement	""" | _:|    `-%s-'\\n"""	360:0:13019:13038	925250	24	True				
ANR	925313	Statement	""" |   |\\n"""	361:0:13040:13049	925250	25	True				
ANR	925314	ExpressionStatement	""" `---'\\n"""	362:0:13051:13061	925250	26	True				
ANR	925315	PrimaryExpression	""" `---'\\n"""		925250	0					
ANR	925316	ReturnStatement	"return """" ;"	364:1:13067:13076	925250	3	True				
ANR	925317	PrimaryExpression	""""""		925250	0					
ANR	925318	ReturnType	static const char *		925250	1					
ANR	925319	Identifier	getClippy		925250	2					
ANR	925320	ParameterList	int type		925250	3					
ANR	925321	Parameter	int type	323:29:12237:12244	925250	0	True				
ANR	925322	ParameterType	int		925250	0					
ANR	925323	Identifier	type		925250	1					
ANR	925324	CFGEntryNode	ENTRY		925250		True				
ANR	925325	CFGExitNode	EXIT		925250		True				
ANR	925326	Symbol	choose		925250						
ANR	925327	Symbol	type		925250						
ANR	925328	Symbol	R_AVATAR_ORANGG		925250						
ANR	925329	Symbol	r_num_rand		925250						
ANR	925330	Function	r_core_clippy	367:0:13081:13480							
ANR	925331	FunctionDef	r_core_clippy (const char * msg)		925330	0					
ANR	925332	CompoundStatement		367:42:13123:13480	925330	0					
ANR	925333	IdentifierDeclStatement	int type = R_AVATAR_CLIPPY ;	368:1:13126:13152	925330	0	True				
ANR	925334	IdentifierDecl	type = R_AVATAR_CLIPPY		925330	0					
ANR	925335	IdentifierDeclType	int		925330	0					
ANR	925336	Identifier	type		925330	1					
ANR	925337	AssignmentExpression	type = R_AVATAR_CLIPPY		925330	2		=			
ANR	925338	Identifier	R_AVATAR_CLIPPY		925330	0					
ANR	925339	Identifier	R_AVATAR_CLIPPY		925330	1					
ANR	925340	IfStatement	if ( * msg == '+' )		925330	1					
ANR	925341	Condition	* msg == '+'	369:5:13159:13169	925330	0	True				
ANR	925342	EqualityExpression	* msg == '+'		925330	0		==			
ANR	925343	UnaryOperationExpression	* msg		925330	0					
ANR	925344	UnaryOperator	*		925330	0					
ANR	925345	Identifier	msg		925330	1					
ANR	925346	PrimaryExpression	'+'		925330	1					
ANR	925347	CompoundStatement		4:2:52:83	925330	1					
ANR	925348	IdentifierDeclStatement	"char * space = strchr ( msg , ' ' ) ;"	370:2:13176:13207	925330	0	True				
ANR	925349	IdentifierDecl	"* space = strchr ( msg , ' ' )"		925330	0					
ANR	925350	IdentifierDeclType	char *		925330	0					
ANR	925351	Identifier	space		925330	1					
ANR	925352	AssignmentExpression	"* space = strchr ( msg , ' ' )"		925330	2		=			
ANR	925353	Identifier	space		925330	0					
ANR	925354	CallExpression	"strchr ( msg , ' ' )"		925330	1					
ANR	925355	Callee	strchr		925330	0					
ANR	925356	Identifier	strchr		925330	0					
ANR	925357	ArgumentList	msg		925330	1					
ANR	925358	Argument	msg		925330	0					
ANR	925359	Identifier	msg		925330	0					
ANR	925360	Argument	' '		925330	1					
ANR	925361	PrimaryExpression	' '		925330	0					
ANR	925362	IfStatement	if ( ! space )		925330	1					
ANR	925363	Condition	! space	371:6:13215:13220	925330	0	True				
ANR	925364	UnaryOperationExpression	! space		925330	0					
ANR	925365	UnaryOperator	!		925330	0					
ANR	925366	Identifier	space		925330	1					
ANR	925367	CompoundStatement		5:14:99:99	925330	1					
ANR	925368	ReturnStatement	return ;	372:3:13228:13234	925330	0	True				
ANR	925369	ExpressionStatement	type = R_AVATAR_ORANGG	374:2:13242:13264	925330	2	True				
ANR	925370	AssignmentExpression	type = R_AVATAR_ORANGG		925330	0		=			
ANR	925371	Identifier	type		925330	0					
ANR	925372	Identifier	R_AVATAR_ORANGG		925330	1					
ANR	925373	ExpressionStatement	msg = space + 1	375:2:13268:13283	925330	3	True				
ANR	925374	AssignmentExpression	msg = space + 1		925330	0		=			
ANR	925375	Identifier	msg		925330	0					
ANR	925376	AdditiveExpression	space + 1		925330	1		+			
ANR	925377	Identifier	space		925330	0					
ANR	925378	PrimaryExpression	1		925330	1					
ANR	925379	IdentifierDeclStatement	int msglen = strlen ( msg ) ;	377:1:13289:13314	925330	2	True				
ANR	925380	IdentifierDecl	msglen = strlen ( msg )		925330	0					
ANR	925381	IdentifierDeclType	int		925330	0					
ANR	925382	Identifier	msglen		925330	1					
ANR	925383	AssignmentExpression	msglen = strlen ( msg )		925330	2		=			
ANR	925384	Identifier	msglen		925330	0					
ANR	925385	CallExpression	strlen ( msg )		925330	1					
ANR	925386	Callee	strlen		925330	0					
ANR	925387	Identifier	strlen		925330	0					
ANR	925388	ArgumentList	msg		925330	1					
ANR	925389	Argument	msg		925330	0					
ANR	925390	Identifier	msg		925330	0					
ANR	925391	IdentifierDeclStatement	"char * l = strdup ( r_str_pad ( '-' , msglen ) ) ;"	378:1:13317:13359	925330	3	True				
ANR	925392	IdentifierDecl	"* l = strdup ( r_str_pad ( '-' , msglen ) )"		925330	0					
ANR	925393	IdentifierDeclType	char *		925330	0					
ANR	925394	Identifier	l		925330	1					
ANR	925395	AssignmentExpression	"* l = strdup ( r_str_pad ( '-' , msglen ) )"		925330	2		=			
ANR	925396	Identifier	l		925330	0					
ANR	925397	CallExpression	"strdup ( r_str_pad ( '-' , msglen ) )"		925330	1					
ANR	925398	Callee	strdup		925330	0					
ANR	925399	Identifier	strdup		925330	0					
ANR	925400	ArgumentList	"r_str_pad ( '-' , msglen )"		925330	1					
ANR	925401	Argument	"r_str_pad ( '-' , msglen )"		925330	0					
ANR	925402	CallExpression	"r_str_pad ( '-' , msglen )"		925330	0					
ANR	925403	Callee	r_str_pad		925330	0					
ANR	925404	Identifier	r_str_pad		925330	0					
ANR	925405	ArgumentList	'-'		925330	1					
ANR	925406	Argument	'-'		925330	0					
ANR	925407	PrimaryExpression	'-'		925330	0					
ANR	925408	Argument	msglen		925330	1					
ANR	925409	Identifier	msglen		925330	0					
ANR	925410	IdentifierDeclStatement	"char * s = strdup ( r_str_pad ( ' ' , msglen ) ) ;"	379:1:13362:13404	925330	4	True				
ANR	925411	IdentifierDecl	"* s = strdup ( r_str_pad ( ' ' , msglen ) )"		925330	0					
ANR	925412	IdentifierDeclType	char *		925330	0					
ANR	925413	Identifier	s		925330	1					
ANR	925414	AssignmentExpression	"* s = strdup ( r_str_pad ( ' ' , msglen ) )"		925330	2		=			
ANR	925415	Identifier	s		925330	0					
ANR	925416	CallExpression	"strdup ( r_str_pad ( ' ' , msglen ) )"		925330	1					
ANR	925417	Callee	strdup		925330	0					
ANR	925418	Identifier	strdup		925330	0					
ANR	925419	ArgumentList	"r_str_pad ( ' ' , msglen )"		925330	1					
ANR	925420	Argument	"r_str_pad ( ' ' , msglen )"		925330	0					
ANR	925421	CallExpression	"r_str_pad ( ' ' , msglen )"		925330	0					
ANR	925422	Callee	r_str_pad		925330	0					
ANR	925423	Identifier	r_str_pad		925330	0					
ANR	925424	ArgumentList	' '		925330	1					
ANR	925425	Argument	' '		925330	0					
ANR	925426	PrimaryExpression	' '		925330	0					
ANR	925427	Argument	msglen		925330	1					
ANR	925428	Identifier	msglen		925330	0					
ANR	925429	ExpressionStatement	"r_cons_printf ( getClippy ( type ) , l , s , msg , s , l )"	380:1:13407:13456	925330	5	True				
ANR	925430	CallExpression	"r_cons_printf ( getClippy ( type ) , l , s , msg , s , l )"		925330	0					
ANR	925431	Callee	r_cons_printf		925330	0					
ANR	925432	Identifier	r_cons_printf		925330	0					
ANR	925433	ArgumentList	getClippy ( type )		925330	1					
ANR	925434	Argument	getClippy ( type )		925330	0					
ANR	925435	CallExpression	getClippy ( type )		925330	0					
ANR	925436	Callee	getClippy		925330	0					
ANR	925437	Identifier	getClippy		925330	0					
ANR	925438	ArgumentList	type		925330	1					
ANR	925439	Argument	type		925330	0					
ANR	925440	Identifier	type		925330	0					
ANR	925441	Argument	l		925330	1					
ANR	925442	Identifier	l		925330	0					
ANR	925443	Argument	s		925330	2					
ANR	925444	Identifier	s		925330	0					
ANR	925445	Argument	msg		925330	3					
ANR	925446	Identifier	msg		925330	0					
ANR	925447	Argument	s		925330	4					
ANR	925448	Identifier	s		925330	0					
ANR	925449	Argument	l		925330	5					
ANR	925450	Identifier	l		925330	0					
ANR	925451	ExpressionStatement	free ( l )	381:1:13459:13467	925330	6	True				
ANR	925452	CallExpression	free ( l )		925330	0					
ANR	925453	Callee	free		925330	0					
ANR	925454	Identifier	free		925330	0					
ANR	925455	ArgumentList	l		925330	1					
ANR	925456	Argument	l		925330	0					
ANR	925457	Identifier	l		925330	0					
ANR	925458	ExpressionStatement	free ( s )	382:1:13470:13478	925330	7	True				
ANR	925459	CallExpression	free ( s )		925330	0					
ANR	925460	Callee	free		925330	0					
ANR	925461	Identifier	free		925330	0					
ANR	925462	ArgumentList	s		925330	1					
ANR	925463	Argument	s		925330	0					
ANR	925464	Identifier	s		925330	0					
ANR	925465	ReturnType	R_API void		925330	1					
ANR	925466	Identifier	r_core_clippy		925330	2					
ANR	925467	ParameterList	const char * msg		925330	3					
ANR	925468	Parameter	const char * msg	367:25:13106:13120	925330	0	True				
ANR	925469	ParameterType	const char *		925330	0					
ANR	925470	Identifier	msg		925330	1					
ANR	925471	CFGEntryNode	ENTRY		925330		True				
ANR	925472	CFGExitNode	EXIT		925330		True				
ANR	925473	Symbol	msg		925330						
ANR	925474	Symbol	r_str_pad		925330						
ANR	925475	Symbol	getClippy		925330						
ANR	925476	Symbol	strchr		925330						
ANR	925477	Symbol	* msg		925330						
ANR	925478	Symbol	type		925330						
ANR	925479	Symbol	l		925330						
ANR	925480	Symbol	space		925330						
ANR	925481	Symbol	msglen		925330						
ANR	925482	Symbol	strlen		925330						
ANR	925483	Symbol	s		925330						
ANR	925484	Symbol	R_AVATAR_CLIPPY		925330						
ANR	925485	Symbol	strdup		925330						
ANR	925486	Symbol	R_AVATAR_ORANGG		925330						
ANR	925487	Function	cmd_help	386:0:13484:33346							
ANR	925488	FunctionDef	"cmd_help (void * data , const char * input)"		925487	0					
ANR	925489	CompoundStatement		386:51:13535:33346	925487	0					
ANR	925490	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	387:1:13538:13565	925487	0	True				
ANR	925491	IdentifierDecl	* core = ( RCore * ) data		925487	0					
ANR	925492	IdentifierDeclType	RCore *		925487	0					
ANR	925493	Identifier	core		925487	1					
ANR	925494	AssignmentExpression	* core = ( RCore * ) data		925487	2		=			
ANR	925495	Identifier	core		925487	0					
ANR	925496	CastExpression	( RCore * ) data		925487	1					
ANR	925497	CastTarget	RCore *		925487	0					
ANR	925498	Identifier	data		925487	1					
ANR	925499	IdentifierDeclStatement	RIOMap * map ;	388:1:13568:13579	925487	1	True				
ANR	925500	IdentifierDecl	* map		925487	0					
ANR	925501	IdentifierDeclType	RIOMap *		925487	0					
ANR	925502	Identifier	map		925487	1					
ANR	925503	IdentifierDeclStatement	const char * k ;	389:1:13582:13595	925487	2	True				
ANR	925504	IdentifierDecl	* k		925487	0					
ANR	925505	IdentifierDeclType	const char *		925487	0					
ANR	925506	Identifier	k		925487	1					
ANR	925507	IdentifierDeclStatement	RListIter * iter ;	390:1:13598:13613	925487	3	True				
ANR	925508	IdentifierDecl	* iter		925487	0					
ANR	925509	IdentifierDeclType	RListIter *		925487	0					
ANR	925510	Identifier	iter		925487	1					
ANR	925511	IdentifierDeclStatement	"char * p , out [ 128 ] = R_EMPTY ;"	391:1:13616:13643	925487	4	True				
ANR	925512	IdentifierDecl	* p		925487	0					
ANR	925513	IdentifierDeclType	char *		925487	0					
ANR	925514	Identifier	p		925487	1					
ANR	925515	IdentifierDecl	out [ 128 ] = R_EMPTY		925487	1					
ANR	925516	IdentifierDeclType	char [ 128 ]		925487	0					
ANR	925517	Identifier	out		925487	1					
ANR	925518	PrimaryExpression	128		925487	2					
ANR	925519	AssignmentExpression	out [ 128 ] = R_EMPTY		925487	3		=			
ANR	925520	Identifier	R_EMPTY		925487	0					
ANR	925521	Identifier	R_EMPTY		925487	1					
ANR	925522	IdentifierDeclStatement	ut64 n ;	392:1:13646:13652	925487	5	True				
ANR	925523	IdentifierDecl	n		925487	0					
ANR	925524	IdentifierDeclType	ut64		925487	0					
ANR	925525	Identifier	n		925487	1					
ANR	925526	IdentifierDeclStatement	int i ;	393:1:13655:13660	925487	6	True				
ANR	925527	IdentifierDecl	i		925487	0					
ANR	925528	IdentifierDeclType	int		925487	0					
ANR	925529	Identifier	i		925487	1					
ANR	925530	IdentifierDeclStatement	RList * tmp ;	394:1:13663:13673	925487	7	True				
ANR	925531	IdentifierDecl	* tmp		925487	0					
ANR	925532	IdentifierDeclType	RList *		925487	0					
ANR	925533	Identifier	tmp		925487	1					
ANR	925534	SwitchStatement	switch ( input [ 0 ] )		925487	8					
ANR	925535	Condition	input [ 0 ]	396:9:13685:13692	925487	0	True				
ANR	925536	ArrayIndexing	input [ 0 ]		925487	0					
ANR	925537	Identifier	input		925487	0					
ANR	925538	PrimaryExpression	0		925487	1					
ANR	925539	CompoundStatement		11:19:159:159	925487	1					
ANR	925540	Label	case '0' :	397:1:13698:13706	925487	0	True				
ANR	925541	ExpressionStatement	core -> curtab = 0	398:2:13718:13734	925487	1	True				
ANR	925542	AssignmentExpression	core -> curtab = 0		925487	0		=			
ANR	925543	PtrMemberAccess	core -> curtab		925487	0					
ANR	925544	Identifier	core		925487	0					
ANR	925545	Identifier	curtab		925487	1					
ANR	925546	PrimaryExpression	0		925487	1					
ANR	925547	BreakStatement	break ;	399:2:13738:13743	925487	2	True				
ANR	925548	Label	case '1' :	400:1:13746:13754	925487	3	True				
ANR	925549	IfStatement	if ( core -> curtab < 0 )		925487	4					
ANR	925550	Condition	core -> curtab < 0	401:6:13770:13785	925487	0	True				
ANR	925551	RelationalExpression	core -> curtab < 0		925487	0		<			
ANR	925552	PtrMemberAccess	core -> curtab		925487	0					
ANR	925553	Identifier	core		925487	0					
ANR	925554	Identifier	curtab		925487	1					
ANR	925555	PrimaryExpression	0		925487	1					
ANR	925556	CompoundStatement		16:24:252:252	925487	1					
ANR	925557	ExpressionStatement	core -> curtab = 0	402:3:13793:13809	925487	0	True				
ANR	925558	AssignmentExpression	core -> curtab = 0		925487	0		=			
ANR	925559	PtrMemberAccess	core -> curtab		925487	0					
ANR	925560	Identifier	core		925487	0					
ANR	925561	Identifier	curtab		925487	1					
ANR	925562	PrimaryExpression	0		925487	1					
ANR	925563	ExpressionStatement	core -> curtab ++	404:2:13817:13832	925487	5	True				
ANR	925564	PostIncDecOperationExpression	core -> curtab ++		925487	0					
ANR	925565	PtrMemberAccess	core -> curtab		925487	0					
ANR	925566	Identifier	core		925487	0					
ANR	925567	Identifier	curtab		925487	1					
ANR	925568	IncDec	++		925487	1					
ANR	925569	BreakStatement	break ;	405:2:13836:13841	925487	6	True				
ANR	925570	Label	case 'r' :	406:1:13844:13852	925487	7	True				
ANR	925571	CompoundStatement		24:2:393:410	925487	8					
ANR	925572	IdentifierDeclStatement	ut64 b = 0 ;	408:2:13915:13925	925487	0	True				
ANR	925573	IdentifierDecl	b = 0		925487	0					
ANR	925574	IdentifierDeclType	ut64		925487	0					
ANR	925575	Identifier	b		925487	1					
ANR	925576	AssignmentExpression	b = 0		925487	2		=			
ANR	925577	Identifier	b		925487	0					
ANR	925578	PrimaryExpression	0		925487	1					
ANR	925579	IdentifierDeclStatement	ut32 r = UT32_MAX ;	409:2:13929:13946	925487	1	True				
ANR	925580	IdentifierDecl	r = UT32_MAX		925487	0					
ANR	925581	IdentifierDeclType	ut32		925487	0					
ANR	925582	Identifier	r		925487	1					
ANR	925583	AssignmentExpression	r = UT32_MAX		925487	2		=			
ANR	925584	Identifier	UT32_MAX		925487	0					
ANR	925585	Identifier	UT32_MAX		925487	1					
ANR	925586	IfStatement	if ( input [ 1 ] )		925487	2					
ANR	925587	Condition	input [ 1 ]	410:6:13954:13961	925487	0	True				
ANR	925588	ArrayIndexing	input [ 1 ]		925487	0					
ANR	925589	Identifier	input		925487	0					
ANR	925590	PrimaryExpression	1		925487	1					
ANR	925591	CompoundStatement		25:16:428:428	925487	1					
ANR	925592	ExpressionStatement	"strncpy ( out , input + ( input [ 1 ] == ' ' ? 2 : 1 ) , sizeof ( out ) - 1 )"	411:3:13969:14027	925487	0	True				
ANR	925593	CallExpression	"strncpy ( out , input + ( input [ 1 ] == ' ' ? 2 : 1 ) , sizeof ( out ) - 1 )"		925487	0					
ANR	925594	Callee	strncpy		925487	0					
ANR	925595	Identifier	strncpy		925487	0					
ANR	925596	ArgumentList	out		925487	1					
ANR	925597	Argument	out		925487	0					
ANR	925598	Identifier	out		925487	0					
ANR	925599	Argument	input + ( input [ 1 ] == ' ' ? 2 : 1 )		925487	1					
ANR	925600	AdditiveExpression	input + ( input [ 1 ] == ' ' ? 2 : 1 )		925487	0		+			
ANR	925601	Identifier	input		925487	0					
ANR	925602	ConditionalExpression	input [ 1 ] == ' ' ? 2 : 1		925487	1					
ANR	925603	Condition	input [ 1 ] == ' '		925487	0					
ANR	925604	EqualityExpression	input [ 1 ] == ' '		925487	0		==			
ANR	925605	ArrayIndexing	input [ 1 ]		925487	0					
ANR	925606	Identifier	input		925487	0					
ANR	925607	PrimaryExpression	1		925487	1					
ANR	925608	PrimaryExpression	' '		925487	1					
ANR	925609	PrimaryExpression	2		925487	1					
ANR	925610	PrimaryExpression	1		925487	2					
ANR	925611	Argument	sizeof ( out ) - 1		925487	2					
ANR	925612	AdditiveExpression	sizeof ( out ) - 1		925487	0		-			
ANR	925613	SizeofExpression	sizeof ( out )		925487	0					
ANR	925614	Sizeof	sizeof		925487	0					
ANR	925615	SizeofOperand	out		925487	1					
ANR	925616	PrimaryExpression	1		925487	1					
ANR	925617	ExpressionStatement	"p = strchr ( out + 1 , ' ' )"	412:3:14032:14057	925487	1	True				
ANR	925618	AssignmentExpression	"p = strchr ( out + 1 , ' ' )"		925487	0		=			
ANR	925619	Identifier	p		925487	0					
ANR	925620	CallExpression	"strchr ( out + 1 , ' ' )"		925487	1					
ANR	925621	Callee	strchr		925487	0					
ANR	925622	Identifier	strchr		925487	0					
ANR	925623	ArgumentList	out + 1		925487	1					
ANR	925624	Argument	out + 1		925487	0					
ANR	925625	AdditiveExpression	out + 1		925487	0		+			
ANR	925626	Identifier	out		925487	0					
ANR	925627	PrimaryExpression	1		925487	1					
ANR	925628	Argument	' '		925487	1					
ANR	925629	PrimaryExpression	' '		925487	0					
ANR	925630	IfStatement	if ( p )		925487	2					
ANR	925631	Condition	p	413:7:14066:14066	925487	0	True				
ANR	925632	Identifier	p		925487	0					
ANR	925633	CompoundStatement		28:10:533:533	925487	1					
ANR	925634	ExpressionStatement	* p = 0	414:4:14075:14081	925487	0	True				
ANR	925635	AssignmentExpression	* p = 0		925487	0		=			
ANR	925636	UnaryOperationExpression	* p		925487	0					
ANR	925637	UnaryOperator	*		925487	0					
ANR	925638	Identifier	p		925487	1					
ANR	925639	PrimaryExpression	0		925487	1					
ANR	925640	ExpressionStatement	"b = ( ut32 ) r_num_math ( core -> num , out )"	415:4:14087:14124	925487	1	True				
ANR	925641	AssignmentExpression	"b = ( ut32 ) r_num_math ( core -> num , out )"		925487	0		=			
ANR	925642	Identifier	b		925487	0					
ANR	925643	CastExpression	"( ut32 ) r_num_math ( core -> num , out )"		925487	1					
ANR	925644	CastTarget	ut32		925487	0					
ANR	925645	CallExpression	"r_num_math ( core -> num , out )"		925487	1					
ANR	925646	Callee	r_num_math		925487	0					
ANR	925647	Identifier	r_num_math		925487	0					
ANR	925648	ArgumentList	core -> num		925487	1					
ANR	925649	Argument	core -> num		925487	0					
ANR	925650	PtrMemberAccess	core -> num		925487	0					
ANR	925651	Identifier	core		925487	0					
ANR	925652	Identifier	num		925487	1					
ANR	925653	Argument	out		925487	1					
ANR	925654	Identifier	out		925487	0					
ANR	925655	ExpressionStatement	"r = ( ut32 ) r_num_math ( core -> num , p + 1 ) - b"	416:4:14130:14169	925487	2	True				
ANR	925656	AssignmentExpression	"r = ( ut32 ) r_num_math ( core -> num , p + 1 ) - b"		925487	0		=			
ANR	925657	Identifier	r		925487	0					
ANR	925658	AdditiveExpression	"( ut32 ) r_num_math ( core -> num , p + 1 ) - b"		925487	1		-			
ANR	925659	CastExpression	"( ut32 ) r_num_math ( core -> num , p + 1 )"		925487	0					
ANR	925660	CastTarget	ut32		925487	0					
ANR	925661	CallExpression	"r_num_math ( core -> num , p + 1 )"		925487	1					
ANR	925662	Callee	r_num_math		925487	0					
ANR	925663	Identifier	r_num_math		925487	0					
ANR	925664	ArgumentList	core -> num		925487	1					
ANR	925665	Argument	core -> num		925487	0					
ANR	925666	PtrMemberAccess	core -> num		925487	0					
ANR	925667	Identifier	core		925487	0					
ANR	925668	Identifier	num		925487	1					
ANR	925669	Argument	p + 1		925487	1					
ANR	925670	AdditiveExpression	p + 1		925487	0		+			
ANR	925671	Identifier	p		925487	0					
ANR	925672	PrimaryExpression	1		925487	1					
ANR	925673	Identifier	b		925487	1					
ANR	925674	ElseStatement	else		925487	0					
ANR	925675	CompoundStatement		32:10:645:645	925487	0					
ANR	925676	ExpressionStatement	"r = ( ut32 ) r_num_math ( core -> num , out )"	418:4:14187:14224	925487	0	True				
ANR	925677	AssignmentExpression	"r = ( ut32 ) r_num_math ( core -> num , out )"		925487	0		=			
ANR	925678	Identifier	r		925487	0					
ANR	925679	CastExpression	"( ut32 ) r_num_math ( core -> num , out )"		925487	1					
ANR	925680	CastTarget	ut32		925487	0					
ANR	925681	CallExpression	"r_num_math ( core -> num , out )"		925487	1					
ANR	925682	Callee	r_num_math		925487	0					
ANR	925683	Identifier	r_num_math		925487	0					
ANR	925684	ArgumentList	core -> num		925487	1					
ANR	925685	Argument	core -> num		925487	0					
ANR	925686	PtrMemberAccess	core -> num		925487	0					
ANR	925687	Identifier	core		925487	0					
ANR	925688	Identifier	num		925487	1					
ANR	925689	Argument	out		925487	1					
ANR	925690	Identifier	out		925487	0					
ANR	925691	ElseStatement	else		925487	0					
ANR	925692	CompoundStatement		35:9:704:704	925487	0					
ANR	925693	Statement	r	421:3:14245:14245	925487	0	True				
ANR	925694	Statement	=	421:5:14247:14247	925487	1	True				
ANR	925695	Statement	0L	421:7:14249:14250	925487	2	True				
ANR	925696	ExpressionStatement	L	421:9:14251:14252	925487	3	True				
ANR	925697	Identifier	L		925487	0					
ANR	925698	IfStatement	if ( ! r )		925487	3					
ANR	925699	Condition	! r	423:6:14264:14265	925487	0	True				
ANR	925700	UnaryOperationExpression	! r		925487	0					
ANR	925701	UnaryOperator	!		925487	0					
ANR	925702	Identifier	r		925487	1					
ANR	925703	CompoundStatement		38:10:732:732	925487	1					
ANR	925704	ExpressionStatement	r = UT32_MAX >> 1	424:3:14273:14290	925487	0	True				
ANR	925705	AssignmentExpression	r = UT32_MAX >> 1		925487	0		=			
ANR	925706	Identifier	r		925487	0					
ANR	925707	ShiftExpression	UT32_MAX >> 1		925487	1		>>			
ANR	925708	Identifier	UT32_MAX		925487	0					
ANR	925709	PrimaryExpression	1		925487	1					
ANR	925710	ExpressionStatement	core -> num -> value = ( ut64 ) ( b + r_num_rand ( r ) )	426:2:14298:14344	925487	4	True				
ANR	925711	AssignmentExpression	core -> num -> value = ( ut64 ) ( b + r_num_rand ( r ) )		925487	0		=			
ANR	925712	PtrMemberAccess	core -> num -> value		925487	0					
ANR	925713	PtrMemberAccess	core -> num		925487	0					
ANR	925714	Identifier	core		925487	0					
ANR	925715	Identifier	num		925487	1					
ANR	925716	Identifier	value		925487	1					
ANR	925717	CastExpression	( ut64 ) ( b + r_num_rand ( r ) )		925487	1					
ANR	925718	CastTarget	ut64		925487	0					
ANR	925719	AdditiveExpression	b + r_num_rand ( r )		925487	1		+			
ANR	925720	Identifier	b		925487	0					
ANR	925721	CallExpression	r_num_rand ( r )		925487	1					
ANR	925722	Callee	r_num_rand		925487	0					
ANR	925723	Identifier	r_num_rand		925487	0					
ANR	925724	ArgumentList	r		925487	1					
ANR	925725	Argument	r		925487	0					
ANR	925726	Identifier	r		925487	0					
ANR	925727	Statement	r_cons_printf	427:2:14348:14360	925487	5	True				
ANR	925728	Statement	(	427:16:14362:14362	925487	6	True				
ANR	925729	Statement	"""0x%"""	427:17:14363:14367	925487	7	True				
ANR	925730	Statement	PFMT64x	427:22:14368:14374	925487	8	True				
ANR	925731	Statement	"""\\n"""	427:29:14375:14378	925487	9	True				
ANR	925732	Statement	","	427:33:14379:14379	925487	10	True				
ANR	925733	Statement	core	427:35:14381:14384	925487	11	True				
ANR	925734	Statement	->	427:39:14385:14386	925487	12	True				
ANR	925735	Statement	num	427:41:14387:14389	925487	13	True				
ANR	925736	Statement	->	427:44:14390:14391	925487	14	True				
ANR	925737	Statement	value	427:46:14392:14396	925487	15	True				
ANR	925738	Statement	)	427:51:14397:14397	925487	16	True				
ANR	925739	ExpressionStatement		427:52:14398:14398	925487	17	True				
ANR	925740	BreakStatement	break ;	429:2:14406:14411	925487	9	True				
ANR	925741	Label	case 'a' :	430:1:14414:14422	925487	10	True				
ANR	925742	ExpressionStatement	"r_cons_printf ( ""%s"" , ret_ascii_table ( ) )"	431:2:14434:14473	925487	11	True				
ANR	925743	CallExpression	"r_cons_printf ( ""%s"" , ret_ascii_table ( ) )"		925487	0					
ANR	925744	Callee	r_cons_printf		925487	0					
ANR	925745	Identifier	r_cons_printf		925487	0					
ANR	925746	ArgumentList	"""%s"""		925487	1					
ANR	925747	Argument	"""%s"""		925487	0					
ANR	925748	PrimaryExpression	"""%s"""		925487	0					
ANR	925749	Argument	ret_ascii_table ( )		925487	1					
ANR	925750	CallExpression	ret_ascii_table ( )		925487	0					
ANR	925751	Callee	ret_ascii_table		925487	0					
ANR	925752	Identifier	ret_ascii_table		925487	0					
ANR	925753	ArgumentList			925487	1					
ANR	925754	BreakStatement	break ;	432:2:14477:14482	925487	12	True				
ANR	925755	Label	case 'b' :	433:1:14485:14493	925487	13	True				
ANR	925756	IfStatement	if ( input [ 1 ] == '6' && input [ 2 ] == '4' )		925487	14					
ANR	925757	Condition	input [ 1 ] == '6' && input [ 2 ] == '4'	434:6:14509:14542	925487	0	True				
ANR	925758	AndExpression	input [ 1 ] == '6' && input [ 2 ] == '4'		925487	0		&&			
ANR	925759	EqualityExpression	input [ 1 ] == '6'		925487	0		==			
ANR	925760	ArrayIndexing	input [ 1 ]		925487	0					
ANR	925761	Identifier	input		925487	0					
ANR	925762	PrimaryExpression	1		925487	1					
ANR	925763	PrimaryExpression	'6'		925487	1					
ANR	925764	EqualityExpression	input [ 2 ] == '4'		925487	1		==			
ANR	925765	ArrayIndexing	input [ 2 ]		925487	0					
ANR	925766	Identifier	input		925487	0					
ANR	925767	PrimaryExpression	2		925487	1					
ANR	925768	PrimaryExpression	'4'		925487	1					
ANR	925769	CompoundStatement		52:3:1112:1153	925487	1					
ANR	925770	IdentifierDeclStatement	const int buflen = ( strlen ( input + 3 ) * 4 ) + 1 ;	436:3:14598:14643	925487	0	True				
ANR	925771	IdentifierDecl	buflen = ( strlen ( input + 3 ) * 4 ) + 1		925487	0					
ANR	925772	IdentifierDeclType	const int		925487	0					
ANR	925773	Identifier	buflen		925487	1					
ANR	925774	AssignmentExpression	buflen = ( strlen ( input + 3 ) * 4 ) + 1		925487	2		=			
ANR	925775	Identifier	buflen		925487	0					
ANR	925776	AdditiveExpression	( strlen ( input + 3 ) * 4 ) + 1		925487	1		+			
ANR	925777	MultiplicativeExpression	strlen ( input + 3 ) * 4		925487	0		*			
ANR	925778	CallExpression	strlen ( input + 3 )		925487	0					
ANR	925779	Callee	strlen		925487	0					
ANR	925780	Identifier	strlen		925487	0					
ANR	925781	ArgumentList	input + 3		925487	1					
ANR	925782	Argument	input + 3		925487	0					
ANR	925783	AdditiveExpression	input + 3		925487	0		+			
ANR	925784	Identifier	input		925487	0					
ANR	925785	PrimaryExpression	3		925487	1					
ANR	925786	PrimaryExpression	4		925487	1					
ANR	925787	PrimaryExpression	1		925487	1					
ANR	925788	IdentifierDeclStatement	"char * buf = calloc ( buflen , sizeof ( char ) ) ;"	437:3:14648:14689	925487	1	True				
ANR	925789	IdentifierDecl	"* buf = calloc ( buflen , sizeof ( char ) )"		925487	0					
ANR	925790	IdentifierDeclType	char *		925487	0					
ANR	925791	Identifier	buf		925487	1					
ANR	925792	AssignmentExpression	"* buf = calloc ( buflen , sizeof ( char ) )"		925487	2		=			
ANR	925793	Identifier	buf		925487	0					
ANR	925794	CallExpression	"calloc ( buflen , sizeof ( char ) )"		925487	1					
ANR	925795	Callee	calloc		925487	0					
ANR	925796	Identifier	calloc		925487	0					
ANR	925797	ArgumentList	buflen		925487	1					
ANR	925798	Argument	buflen		925487	0					
ANR	925799	Identifier	buflen		925487	0					
ANR	925800	Argument	sizeof ( char )		925487	1					
ANR	925801	SizeofExpression	sizeof ( char )		925487	0					
ANR	925802	Sizeof	sizeof		925487	0					
ANR	925803	SizeofOperand	char		925487	1					
ANR	925804	IfStatement	if ( ! buf )		925487	2					
ANR	925805	Condition	! buf	438:7:14698:14701	925487	0	True				
ANR	925806	UnaryOperationExpression	! buf		925487	0					
ANR	925807	UnaryOperator	!		925487	0					
ANR	925808	Identifier	buf		925487	1					
ANR	925809	CompoundStatement		53:13:1168:1168	925487	1					
ANR	925810	ReturnStatement	return false ;	439:4:14710:14722	925487	0	True				
ANR	925811	Identifier	false		925487	0					
ANR	925812	IfStatement	if ( input [ 3 ] == '-' )		925487	3					
ANR	925813	Condition	input [ 3 ] == '-'	441:7:14736:14750	925487	0	True				
ANR	925814	EqualityExpression	input [ 3 ] == '-'		925487	0		==			
ANR	925815	ArrayIndexing	input [ 3 ]		925487	0					
ANR	925816	Identifier	input		925487	0					
ANR	925817	PrimaryExpression	3		925487	1					
ANR	925818	PrimaryExpression	'-'		925487	1					
ANR	925819	CompoundStatement		56:24:1217:1217	925487	1					
ANR	925820	ExpressionStatement	"r_base64_decode ( ( ut8 * ) buf , input + 4 , - 1 )"	442:4:14759:14801	925487	0	True				
ANR	925821	CallExpression	"r_base64_decode ( ( ut8 * ) buf , input + 4 , - 1 )"		925487	0					
ANR	925822	Callee	r_base64_decode		925487	0					
ANR	925823	Identifier	r_base64_decode		925487	0					
ANR	925824	ArgumentList	( ut8 * ) buf		925487	1					
ANR	925825	Argument	( ut8 * ) buf		925487	0					
ANR	925826	CastExpression	( ut8 * ) buf		925487	0					
ANR	925827	CastTarget	ut8 *		925487	0					
ANR	925828	Identifier	buf		925487	1					
ANR	925829	Argument	input + 4		925487	1					
ANR	925830	AdditiveExpression	input + 4		925487	0		+			
ANR	925831	Identifier	input		925487	0					
ANR	925832	PrimaryExpression	4		925487	1					
ANR	925833	Argument	- 1		925487	2					
ANR	925834	UnaryOperationExpression	- 1		925487	0					
ANR	925835	UnaryOperator	-		925487	0					
ANR	925836	PrimaryExpression	1		925487	1					
ANR	925837	ElseStatement	else		925487	0					
ANR	925838	IfStatement	if ( input [ 3 ] == ' ' )		925487	0					
ANR	925839	Condition	input [ 3 ] == ' '	443:14:14817:14831	925487	0	True				
ANR	925840	EqualityExpression	input [ 3 ] == ' '		925487	0		==			
ANR	925841	ArrayIndexing	input [ 3 ]		925487	0					
ANR	925842	Identifier	input		925487	0					
ANR	925843	PrimaryExpression	3		925487	1					
ANR	925844	PrimaryExpression	' '		925487	1					
ANR	925845	CompoundStatement		58:31:1298:1298	925487	1					
ANR	925846	ExpressionStatement	"r_base64_encode ( buf , ( const ut8 * ) input + 4 , - 1 )"	444:4:14840:14888	925487	0	True				
ANR	925847	CallExpression	"r_base64_encode ( buf , ( const ut8 * ) input + 4 , - 1 )"		925487	0					
ANR	925848	Callee	r_base64_encode		925487	0					
ANR	925849	Identifier	r_base64_encode		925487	0					
ANR	925850	ArgumentList	buf		925487	1					
ANR	925851	Argument	buf		925487	0					
ANR	925852	Identifier	buf		925487	0					
ANR	925853	Argument	( const ut8 * ) input + 4		925487	1					
ANR	925854	AdditiveExpression	( const ut8 * ) input + 4		925487	0		+			
ANR	925855	CastExpression	( const ut8 * ) input		925487	0					
ANR	925856	CastTarget	const ut8 *		925487	0					
ANR	925857	Identifier	input		925487	1					
ANR	925858	PrimaryExpression	4		925487	1					
ANR	925859	Argument	- 1		925487	2					
ANR	925860	UnaryOperationExpression	- 1		925487	0					
ANR	925861	UnaryOperator	-		925487	0					
ANR	925862	PrimaryExpression	1		925487	1					
ANR	925863	ExpressionStatement	r_cons_println ( buf )	446:3:14898:14918	925487	4	True				
ANR	925864	CallExpression	r_cons_println ( buf )		925487	0					
ANR	925865	Callee	r_cons_println		925487	0					
ANR	925866	Identifier	r_cons_println		925487	0					
ANR	925867	ArgumentList	buf		925487	1					
ANR	925868	Argument	buf		925487	0					
ANR	925869	Identifier	buf		925487	0					
ANR	925870	ExpressionStatement	free ( buf )	447:3:14923:14933	925487	5	True				
ANR	925871	CallExpression	free ( buf )		925487	0					
ANR	925872	Callee	free		925487	0					
ANR	925873	Identifier	free		925487	0					
ANR	925874	ArgumentList	buf		925487	1					
ANR	925875	Argument	buf		925487	0					
ANR	925876	Identifier	buf		925487	0					
ANR	925877	ElseStatement	else		925487	0					
ANR	925878	IfStatement	if ( input [ 1 ] == 't' && input [ 2 ] == 'w' )		925487	0					
ANR	925879	Condition	input [ 1 ] == 't' && input [ 2 ] == 'w'	448:13:14948:14981	925487	0	True				
ANR	925880	AndExpression	input [ 1 ] == 't' && input [ 2 ] == 'w'		925487	0		&&			
ANR	925881	EqualityExpression	input [ 1 ] == 't'		925487	0		==			
ANR	925882	ArrayIndexing	input [ 1 ]		925487	0					
ANR	925883	Identifier	input		925487	0					
ANR	925884	PrimaryExpression	1		925487	1					
ANR	925885	PrimaryExpression	't'		925487	1					
ANR	925886	EqualityExpression	input [ 2 ] == 'w'		925487	1		==			
ANR	925887	ArrayIndexing	input [ 2 ]		925487	0					
ANR	925888	Identifier	input		925487	0					
ANR	925889	PrimaryExpression	2		925487	1					
ANR	925890	PrimaryExpression	'w'		925487	1					
ANR	925891	CompoundStatement		63:49:1448:1448	925487	1					
ANR	925892	IfStatement	"if ( r_num_between ( core -> num , input + 3 ) == - 1 )"		925487	0					
ANR	925893	Condition	"r_num_between ( core -> num , input + 3 ) == - 1"	449:7:15003:15044	925487	0	True				
ANR	925894	EqualityExpression	"r_num_between ( core -> num , input + 3 ) == - 1"		925487	0		==			
ANR	925895	CallExpression	"r_num_between ( core -> num , input + 3 )"		925487	0					
ANR	925896	Callee	r_num_between		925487	0					
ANR	925897	Identifier	r_num_between		925487	0					
ANR	925898	ArgumentList	core -> num		925487	1					
ANR	925899	Argument	core -> num		925487	0					
ANR	925900	PtrMemberAccess	core -> num		925487	0					
ANR	925901	Identifier	core		925487	0					
ANR	925902	Identifier	num		925487	1					
ANR	925903	Argument	input + 3		925487	1					
ANR	925904	AdditiveExpression	input + 3		925487	0		+			
ANR	925905	Identifier	input		925487	0					
ANR	925906	PrimaryExpression	3		925487	1					
ANR	925907	UnaryOperationExpression	- 1		925487	1					
ANR	925908	UnaryOperator	-		925487	0					
ANR	925909	PrimaryExpression	1		925487	1					
ANR	925910	CompoundStatement		64:51:1511:1511	925487	1					
ANR	925911	ExpressionStatement	"eprintf ( ""Usage: ?btw num|(expr) num|(expr) num|(expr)\\n"" )"	450:4:15053:15111	925487	0	True				
ANR	925912	CallExpression	"eprintf ( ""Usage: ?btw num|(expr) num|(expr) num|(expr)\\n"" )"		925487	0					
ANR	925913	Callee	eprintf		925487	0					
ANR	925914	Identifier	eprintf		925487	0					
ANR	925915	ArgumentList	"""Usage: ?btw num|(expr) num|(expr) num|(expr)\\n"""		925487	1					
ANR	925916	Argument	"""Usage: ?btw num|(expr) num|(expr) num|(expr)\\n"""		925487	0					
ANR	925917	PrimaryExpression	"""Usage: ?btw num|(expr) num|(expr) num|(expr)\\n"""		925487	0					
ANR	925918	ElseStatement	else		925487	0					
ANR	925919	CompoundStatement		67:9:1591:1591	925487	0					
ANR	925920	ExpressionStatement	"n = r_num_get ( core -> num , input + 1 )"	453:3:15132:15166	925487	0	True				
ANR	925921	AssignmentExpression	"n = r_num_get ( core -> num , input + 1 )"		925487	0		=			
ANR	925922	Identifier	n		925487	0					
ANR	925923	CallExpression	"r_num_get ( core -> num , input + 1 )"		925487	1					
ANR	925924	Callee	r_num_get		925487	0					
ANR	925925	Identifier	r_num_get		925487	0					
ANR	925926	ArgumentList	core -> num		925487	1					
ANR	925927	Argument	core -> num		925487	0					
ANR	925928	PtrMemberAccess	core -> num		925487	0					
ANR	925929	Identifier	core		925487	0					
ANR	925930	Identifier	num		925487	1					
ANR	925931	Argument	input + 1		925487	1					
ANR	925932	AdditiveExpression	input + 1		925487	0		+			
ANR	925933	Identifier	input		925487	0					
ANR	925934	PrimaryExpression	1		925487	1					
ANR	925935	ExpressionStatement	"r_num_to_bits ( out , n )"	454:3:15171:15193	925487	1	True				
ANR	925936	CallExpression	"r_num_to_bits ( out , n )"		925487	0					
ANR	925937	Callee	r_num_to_bits		925487	0					
ANR	925938	Identifier	r_num_to_bits		925487	0					
ANR	925939	ArgumentList	out		925487	1					
ANR	925940	Argument	out		925487	0					
ANR	925941	Identifier	out		925487	0					
ANR	925942	Argument	n		925487	1					
ANR	925943	Identifier	n		925487	0					
ANR	925944	ExpressionStatement	"r_cons_printf ( ""%sb\\n"" , out )"	455:3:15198:15226	925487	2	True				
ANR	925945	CallExpression	"r_cons_printf ( ""%sb\\n"" , out )"		925487	0					
ANR	925946	Callee	r_cons_printf		925487	0					
ANR	925947	Identifier	r_cons_printf		925487	0					
ANR	925948	ArgumentList	"""%sb\\n"""		925487	1					
ANR	925949	Argument	"""%sb\\n"""		925487	0					
ANR	925950	PrimaryExpression	"""%sb\\n"""		925487	0					
ANR	925951	Argument	out		925487	1					
ANR	925952	Identifier	out		925487	0					
ANR	925953	BreakStatement	break ;	457:2:15234:15239	925487	15	True				
ANR	925954	Label	case 'B' :	458:1:15242:15250	925487	16	True				
ANR	925955	ExpressionStatement	k = r_str_trim_ro ( input + 1 )	459:2:15262:15291	925487	17	True				
ANR	925956	AssignmentExpression	k = r_str_trim_ro ( input + 1 )		925487	0		=			
ANR	925957	Identifier	k		925487	0					
ANR	925958	CallExpression	r_str_trim_ro ( input + 1 )		925487	1					
ANR	925959	Callee	r_str_trim_ro		925487	0					
ANR	925960	Identifier	r_str_trim_ro		925487	0					
ANR	925961	ArgumentList	input + 1		925487	1					
ANR	925962	Argument	input + 1		925487	0					
ANR	925963	AdditiveExpression	input + 1		925487	0		+			
ANR	925964	Identifier	input		925487	0					
ANR	925965	PrimaryExpression	1		925487	1					
ANR	925966	ExpressionStatement	"tmp = r_core_get_boundaries_prot ( core , - 1 , k , ""search"" )"	460:2:15295:15351	925487	18	True				
ANR	925967	AssignmentExpression	"tmp = r_core_get_boundaries_prot ( core , - 1 , k , ""search"" )"		925487	0		=			
ANR	925968	Identifier	tmp		925487	0					
ANR	925969	CallExpression	"r_core_get_boundaries_prot ( core , - 1 , k , ""search"" )"		925487	1					
ANR	925970	Callee	r_core_get_boundaries_prot		925487	0					
ANR	925971	Identifier	r_core_get_boundaries_prot		925487	0					
ANR	925972	ArgumentList	core		925487	1					
ANR	925973	Argument	core		925487	0					
ANR	925974	Identifier	core		925487	0					
ANR	925975	Argument	- 1		925487	1					
ANR	925976	UnaryOperationExpression	- 1		925487	0					
ANR	925977	UnaryOperator	-		925487	0					
ANR	925978	PrimaryExpression	1		925487	1					
ANR	925979	Argument	k		925487	2					
ANR	925980	Identifier	k		925487	0					
ANR	925981	Argument	"""search"""		925487	3					
ANR	925982	PrimaryExpression	"""search"""		925487	0					
ANR	925983	IfStatement	if ( ! tmp )		925487	19					
ANR	925984	Condition	! tmp	461:6:15359:15362	925487	0	True				
ANR	925985	UnaryOperationExpression	! tmp		925487	0					
ANR	925986	UnaryOperator	!		925487	0					
ANR	925987	Identifier	tmp		925487	1					
ANR	925988	CompoundStatement		76:12:1829:1829	925487	1					
ANR	925989	ReturnStatement	return false ;	462:3:15370:15382	925487	0	True				
ANR	925990	Identifier	false		925487	0					
ANR	925991	Statement	r_list_foreach	464:2:15390:15403	925487	20	True				
ANR	925992	Statement	(	464:17:15405:15405	925487	21	True				
ANR	925993	Statement	tmp	464:18:15406:15408	925487	22	True				
ANR	925994	Statement	","	464:21:15409:15409	925487	23	True				
ANR	925995	Statement	iter	464:23:15411:15414	925487	24	True				
ANR	925996	Statement	","	464:27:15415:15415	925487	25	True				
ANR	925997	Statement	map	464:29:15417:15419	925487	26	True				
ANR	925998	Statement	)	464:32:15420:15420	925487	27	True				
ANR	925999	CompoundStatement		79:34:1886:1886	925487	28					
ANR	926000	Statement	r_cons_printf	465:3:15427:15439	925487	0	True				
ANR	926001	Statement	(	465:17:15441:15441	925487	1	True				
ANR	926002	Statement	"""0x%"""	465:18:15442:15446	925487	2	True				
ANR	926003	Statement	PFMT64x	465:23:15447:15453	925487	3	True				
ANR	926004	Statement	""" 0x%"""	465:30:15454:15459	925487	4	True				
ANR	926005	Statement	PFMT64x	465:36:15460:15466	925487	5	True				
ANR	926006	Statement	"""\\n"""	465:43:15467:15470	925487	6	True				
ANR	926007	Statement	","	465:47:15471:15471	925487	7	True				
ANR	926008	Statement	map	465:49:15473:15475	925487	8	True				
ANR	926009	Statement	->	465:52:15476:15477	925487	9	True				
ANR	926010	Statement	itv	465:54:15478:15480	925487	10	True				
ANR	926011	Statement	.	465:57:15481:15481	925487	11	True				
ANR	926012	Statement	addr	465:58:15482:15485	925487	12	True				
ANR	926013	Statement	","	465:62:15486:15486	925487	13	True				
ANR	926014	Statement	r_itv_end	465:64:15488:15496	925487	14	True				
ANR	926015	Statement	(	465:74:15498:15498	925487	15	True				
ANR	926016	Statement	map	465:75:15499:15501	925487	16	True				
ANR	926017	Statement	->	465:78:15502:15503	925487	17	True				
ANR	926018	Statement	itv	465:80:15504:15506	925487	18	True				
ANR	926019	Statement	)	465:83:15507:15507	925487	19	True				
ANR	926020	Statement	)	465:84:15508:15508	925487	20	True				
ANR	926021	ExpressionStatement		465:85:15509:15509	925487	21	True				
ANR	926022	ExpressionStatement	r_list_free ( tmp )	467:2:15517:15534	925487	29	True				
ANR	926023	CallExpression	r_list_free ( tmp )		925487	0					
ANR	926024	Callee	r_list_free		925487	0					
ANR	926025	Identifier	r_list_free		925487	0					
ANR	926026	ArgumentList	tmp		925487	1					
ANR	926027	Argument	tmp		925487	0					
ANR	926028	Identifier	tmp		925487	0					
ANR	926029	BreakStatement	break ;	468:2:15538:15543	925487	30	True				
ANR	926030	Label	case 'h' :	469:1:15546:15554	925487	31	True				
ANR	926031	IfStatement	if ( input [ 1 ] == ' ' )		925487	32					
ANR	926032	Condition	input [ 1 ] == ' '	470:6:15570:15584	925487	0	True				
ANR	926033	EqualityExpression	input [ 1 ] == ' '		925487	0		==			
ANR	926034	ArrayIndexing	input [ 1 ]		925487	0					
ANR	926035	Identifier	input		925487	0					
ANR	926036	PrimaryExpression	1		925487	1					
ANR	926037	PrimaryExpression	' '		925487	1					
ANR	926038	CompoundStatement		85:23:2051:2051	925487	1					
ANR	926039	ExpressionStatement	"r_cons_printf ( ""0x%08x\\n"" , ( ut32 ) r_str_hash ( input + 2 ) )"	471:3:15592:15648	925487	0	True				
ANR	926040	CallExpression	"r_cons_printf ( ""0x%08x\\n"" , ( ut32 ) r_str_hash ( input + 2 ) )"		925487	0					
ANR	926041	Callee	r_cons_printf		925487	0					
ANR	926042	Identifier	r_cons_printf		925487	0					
ANR	926043	ArgumentList	"""0x%08x\\n"""		925487	1					
ANR	926044	Argument	"""0x%08x\\n"""		925487	0					
ANR	926045	PrimaryExpression	"""0x%08x\\n"""		925487	0					
ANR	926046	Argument	( ut32 ) r_str_hash ( input + 2 )		925487	1					
ANR	926047	CastExpression	( ut32 ) r_str_hash ( input + 2 )		925487	0					
ANR	926048	CastTarget	ut32		925487	0					
ANR	926049	CallExpression	r_str_hash ( input + 2 )		925487	1					
ANR	926050	Callee	r_str_hash		925487	0					
ANR	926051	Identifier	r_str_hash		925487	0					
ANR	926052	ArgumentList	input + 2		925487	1					
ANR	926053	Argument	input + 2		925487	0					
ANR	926054	AdditiveExpression	input + 2		925487	0		+			
ANR	926055	Identifier	input		925487	0					
ANR	926056	PrimaryExpression	2		925487	1					
ANR	926057	ElseStatement	else		925487	0					
ANR	926058	CompoundStatement		87:9:2123:2123	925487	0					
ANR	926059	ExpressionStatement	"eprintf ( ""Usage: ?h [string-to-hash]\\n"" )"	473:3:15664:15704	925487	0	True				
ANR	926060	CallExpression	"eprintf ( ""Usage: ?h [string-to-hash]\\n"" )"		925487	0					
ANR	926061	Callee	eprintf		925487	0					
ANR	926062	Identifier	eprintf		925487	0					
ANR	926063	ArgumentList	"""Usage: ?h [string-to-hash]\\n"""		925487	1					
ANR	926064	Argument	"""Usage: ?h [string-to-hash]\\n"""		925487	0					
ANR	926065	PrimaryExpression	"""Usage: ?h [string-to-hash]\\n"""		925487	0					
ANR	926066	BreakStatement	break ;	475:2:15712:15717	925487	33	True				
ANR	926067	Label	case 'F' :	476:1:15720:15728	925487	34	True				
ANR	926068	ExpressionStatement	r_cons_flush ( )	477:2:15740:15755	925487	35	True				
ANR	926069	CallExpression	r_cons_flush ( )		925487	0					
ANR	926070	Callee	r_cons_flush		925487	0					
ANR	926071	Identifier	r_cons_flush		925487	0					
ANR	926072	ArgumentList			925487	1					
ANR	926073	BreakStatement	break ;	478:2:15759:15764	925487	36	True				
ANR	926074	Label	case 'f' :	479:1:15767:15775	925487	37	True				
ANR	926075	IfStatement	if ( input [ 1 ] == ' ' )		925487	38					
ANR	926076	Condition	input [ 1 ] == ' '	480:6:15791:15805	925487	0	True				
ANR	926077	EqualityExpression	input [ 1 ] == ' '		925487	0		==			
ANR	926078	ArrayIndexing	input [ 1 ]		925487	0					
ANR	926079	Identifier	input		925487	0					
ANR	926080	PrimaryExpression	1		925487	1					
ANR	926081	PrimaryExpression	' '		925487	1					
ANR	926082	CompoundStatement		96:3:2277:2309	925487	1					
ANR	926083	IdentifierDeclStatement	"char * q , * p = strdup ( input + 2 ) ;"	481:3:15813:15845	925487	0	True				
ANR	926084	IdentifierDecl	* q		925487	0					
ANR	926085	IdentifierDeclType	char *		925487	0					
ANR	926086	Identifier	q		925487	1					
ANR	926087	IdentifierDecl	* p = strdup ( input + 2 )		925487	1					
ANR	926088	IdentifierDeclType	char *		925487	0					
ANR	926089	Identifier	p		925487	1					
ANR	926090	AssignmentExpression	* p = strdup ( input + 2 )		925487	2		=			
ANR	926091	Identifier	p		925487	0					
ANR	926092	CallExpression	strdup ( input + 2 )		925487	1					
ANR	926093	Callee	strdup		925487	0					
ANR	926094	Identifier	strdup		925487	0					
ANR	926095	ArgumentList	input + 2		925487	1					
ANR	926096	Argument	input + 2		925487	0					
ANR	926097	AdditiveExpression	input + 2		925487	0		+			
ANR	926098	Identifier	input		925487	0					
ANR	926099	PrimaryExpression	2		925487	1					
ANR	926100	IfStatement	if ( ! p )		925487	1					
ANR	926101	Condition	! p	482:7:15854:15855	925487	0	True				
ANR	926102	UnaryOperationExpression	! p		925487	0					
ANR	926103	UnaryOperator	!		925487	0					
ANR	926104	Identifier	p		925487	1					
ANR	926105	CompoundStatement		97:11:2322:2322	925487	1					
ANR	926106	ExpressionStatement	"eprintf ( ""Cannot strdup\\n"" )"	483:4:15864:15891	925487	0	True				
ANR	926107	CallExpression	"eprintf ( ""Cannot strdup\\n"" )"		925487	0					
ANR	926108	Callee	eprintf		925487	0					
ANR	926109	Identifier	eprintf		925487	0					
ANR	926110	ArgumentList	"""Cannot strdup\\n"""		925487	1					
ANR	926111	Argument	"""Cannot strdup\\n"""		925487	0					
ANR	926112	PrimaryExpression	"""Cannot strdup\\n"""		925487	0					
ANR	926113	ReturnStatement	return 0 ;	484:4:15897:15905	925487	1	True				
ANR	926114	PrimaryExpression	0		925487	0					
ANR	926115	ExpressionStatement	"q = strchr ( p , ' ' )"	486:3:15915:15934	925487	2	True				
ANR	926116	AssignmentExpression	"q = strchr ( p , ' ' )"		925487	0		=			
ANR	926117	Identifier	q		925487	0					
ANR	926118	CallExpression	"strchr ( p , ' ' )"		925487	1					
ANR	926119	Callee	strchr		925487	0					
ANR	926120	Identifier	strchr		925487	0					
ANR	926121	ArgumentList	p		925487	1					
ANR	926122	Argument	p		925487	0					
ANR	926123	Identifier	p		925487	0					
ANR	926124	Argument	' '		925487	1					
ANR	926125	PrimaryExpression	' '		925487	0					
ANR	926126	IfStatement	if ( q )		925487	3					
ANR	926127	Condition	q	487:7:15943:15943	925487	0	True				
ANR	926128	Identifier	q		925487	0					
ANR	926129	CompoundStatement		102:10:2410:2410	925487	1					
ANR	926130	ExpressionStatement	* q = 0	488:4:15952:15958	925487	0	True				
ANR	926131	AssignmentExpression	* q = 0		925487	0		=			
ANR	926132	UnaryOperationExpression	* q		925487	0					
ANR	926133	UnaryOperator	*		925487	0					
ANR	926134	Identifier	q		925487	1					
ANR	926135	PrimaryExpression	0		925487	1					
ANR	926136	ExpressionStatement	"n = r_num_get ( core -> num , p )"	489:4:15964:15992	925487	1	True				
ANR	926137	AssignmentExpression	"n = r_num_get ( core -> num , p )"		925487	0		=			
ANR	926138	Identifier	n		925487	0					
ANR	926139	CallExpression	"r_num_get ( core -> num , p )"		925487	1					
ANR	926140	Callee	r_num_get		925487	0					
ANR	926141	Identifier	r_num_get		925487	0					
ANR	926142	ArgumentList	core -> num		925487	1					
ANR	926143	Argument	core -> num		925487	0					
ANR	926144	PtrMemberAccess	core -> num		925487	0					
ANR	926145	Identifier	core		925487	0					
ANR	926146	Identifier	num		925487	1					
ANR	926147	Argument	p		925487	1					
ANR	926148	Identifier	p		925487	0					
ANR	926149	ExpressionStatement	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) * 8 , q + 1 )"	490:4:15998:16053	925487	2	True				
ANR	926150	CallExpression	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) * 8 , q + 1 )"		925487	0					
ANR	926151	Callee	r_str_bits		925487	0					
ANR	926152	Identifier	r_str_bits		925487	0					
ANR	926153	ArgumentList	out		925487	1					
ANR	926154	Argument	out		925487	0					
ANR	926155	Identifier	out		925487	0					
ANR	926156	Argument	( const ut8 * ) & n		925487	1					
ANR	926157	CastExpression	( const ut8 * ) & n		925487	0					
ANR	926158	CastTarget	const ut8 *		925487	0					
ANR	926159	UnaryOperationExpression	& n		925487	1					
ANR	926160	UnaryOperator	&		925487	0					
ANR	926161	Identifier	n		925487	1					
ANR	926162	Argument	sizeof ( n ) * 8		925487	2					
ANR	926163	MultiplicativeExpression	sizeof ( n ) * 8		925487	0		*			
ANR	926164	SizeofExpression	sizeof ( n )		925487	0					
ANR	926165	Sizeof	sizeof		925487	0					
ANR	926166	SizeofOperand	n		925487	1					
ANR	926167	PrimaryExpression	8		925487	1					
ANR	926168	Argument	q + 1		925487	3					
ANR	926169	AdditiveExpression	q + 1		925487	0		+			
ANR	926170	Identifier	q		925487	0					
ANR	926171	PrimaryExpression	1		925487	1					
ANR	926172	ExpressionStatement	r_cons_println ( out )	491:4:16059:16079	925487	3	True				
ANR	926173	CallExpression	r_cons_println ( out )		925487	0					
ANR	926174	Callee	r_cons_println		925487	0					
ANR	926175	Identifier	r_cons_println		925487	0					
ANR	926176	ArgumentList	out		925487	1					
ANR	926177	Argument	out		925487	0					
ANR	926178	Identifier	out		925487	0					
ANR	926179	ElseStatement	else		925487	0					
ANR	926180	CompoundStatement		107:10:2555:2555	925487	0					
ANR	926181	ExpressionStatement	"eprintf ( ""Usage: \\""?b value bitstring\\""\\n"" )"	493:4:16097:16140	925487	0	True				
ANR	926182	CallExpression	"eprintf ( ""Usage: \\""?b value bitstring\\""\\n"" )"		925487	0					
ANR	926183	Callee	eprintf		925487	0					
ANR	926184	Identifier	eprintf		925487	0					
ANR	926185	ArgumentList	"""Usage: \\""?b value bitstring\\""\\n"""		925487	1					
ANR	926186	Argument	"""Usage: \\""?b value bitstring\\""\\n"""		925487	0					
ANR	926187	PrimaryExpression	"""Usage: \\""?b value bitstring\\""\\n"""		925487	0					
ANR	926188	ExpressionStatement	free ( p )	495:3:16150:16158	925487	4	True				
ANR	926189	CallExpression	free ( p )		925487	0					
ANR	926190	Callee	free		925487	0					
ANR	926191	Identifier	free		925487	0					
ANR	926192	ArgumentList	p		925487	1					
ANR	926193	Argument	p		925487	0					
ANR	926194	Identifier	p		925487	0					
ANR	926195	ElseStatement	else		925487	0					
ANR	926196	CompoundStatement		111:9:2633:2633	925487	0					
ANR	926197	ExpressionStatement	"eprintf ( ""Whitespace expected after '?f'\\n"" )"	497:3:16174:16218	925487	0	True				
ANR	926198	CallExpression	"eprintf ( ""Whitespace expected after '?f'\\n"" )"		925487	0					
ANR	926199	Callee	eprintf		925487	0					
ANR	926200	Identifier	eprintf		925487	0					
ANR	926201	ArgumentList	"""Whitespace expected after '?f'\\n"""		925487	1					
ANR	926202	Argument	"""Whitespace expected after '?f'\\n"""		925487	0					
ANR	926203	PrimaryExpression	"""Whitespace expected after '?f'\\n"""		925487	0					
ANR	926204	BreakStatement	break ;	499:2:16226:16231	925487	39	True				
ANR	926205	Label	case 'o' :	500:1:16234:16242	925487	40	True				
ANR	926206	ExpressionStatement	"n = r_num_math ( core -> num , input + 1 )"	501:2:16254:16289	925487	41	True				
ANR	926207	AssignmentExpression	"n = r_num_math ( core -> num , input + 1 )"		925487	0		=			
ANR	926208	Identifier	n		925487	0					
ANR	926209	CallExpression	"r_num_math ( core -> num , input + 1 )"		925487	1					
ANR	926210	Callee	r_num_math		925487	0					
ANR	926211	Identifier	r_num_math		925487	0					
ANR	926212	ArgumentList	core -> num		925487	1					
ANR	926213	Argument	core -> num		925487	0					
ANR	926214	PtrMemberAccess	core -> num		925487	0					
ANR	926215	Identifier	core		925487	0					
ANR	926216	Identifier	num		925487	1					
ANR	926217	Argument	input + 1		925487	1					
ANR	926218	AdditiveExpression	input + 1		925487	0		+			
ANR	926219	Identifier	input		925487	0					
ANR	926220	PrimaryExpression	1		925487	1					
ANR	926221	Statement	r_cons_printf	502:2:16293:16305	925487	42	True				
ANR	926222	Statement	(	502:16:16307:16307	925487	43	True				
ANR	926223	Statement	"""0%"""	502:17:16308:16311	925487	44	True				
ANR	926224	Statement	PFMT64o	502:21:16312:16318	925487	45	True				
ANR	926225	Statement	"""\\n"""	502:28:16319:16322	925487	46	True				
ANR	926226	Statement	","	502:32:16323:16323	925487	47	True				
ANR	926227	Statement	n	502:34:16325:16325	925487	48	True				
ANR	926228	Statement	)	502:35:16326:16326	925487	49	True				
ANR	926229	ExpressionStatement		502:36:16327:16327	925487	50	True				
ANR	926230	BreakStatement	break ;	503:2:16331:16336	925487	51	True				
ANR	926231	Label	case 'T' :	504:1:16339:16347	925487	52	True				
ANR	926232	Statement	r_cons_printf	505:2:16359:16371	925487	53	True				
ANR	926233	Statement	(	505:15:16372:16372	925487	54	True				
ANR	926234	Statement	"""plug.init = %"""	505:16:16373:16387	925487	55	True				
ANR	926235	Statement	PFMT64d	505:31:16388:16394	925487	56	True				
ANR	926236	Statement	"""\\n"""	505:38:16395:16398	925487	57	True				
ANR	926237	Statement	"""plug.load = %"""	506:3:16403:16417	925487	58	True				
ANR	926238	Statement	PFMT64d	506:18:16418:16424	925487	59	True				
ANR	926239	Statement	"""\\n"""	506:25:16425:16428	925487	60	True				
ANR	926240	Statement	"""file.load = %"""	507:3:16433:16447	925487	61	True				
ANR	926241	Statement	PFMT64d	507:18:16448:16454	925487	62	True				
ANR	926242	Statement	"""\\n"""	507:25:16455:16458	925487	63	True				
ANR	926243	Statement	","	507:29:16459:16459	925487	64	True				
ANR	926244	Statement	core	508:3:16464:16467	925487	65	True				
ANR	926245	Statement	->	508:7:16468:16469	925487	66	True				
ANR	926246	Statement	times	508:9:16470:16474	925487	67	True				
ANR	926247	Statement	->	508:14:16475:16476	925487	68	True				
ANR	926248	Statement	loadlibs_init_time	508:16:16477:16494	925487	69	True				
ANR	926249	Statement	","	508:34:16495:16495	925487	70	True				
ANR	926250	Statement	core	509:3:16500:16503	925487	71	True				
ANR	926251	Statement	->	509:7:16504:16505	925487	72	True				
ANR	926252	Statement	times	509:9:16506:16510	925487	73	True				
ANR	926253	Statement	->	509:14:16511:16512	925487	74	True				
ANR	926254	Statement	loadlibs_time	509:16:16513:16525	925487	75	True				
ANR	926255	Statement	","	509:29:16526:16526	925487	76	True				
ANR	926256	Statement	core	510:3:16531:16534	925487	77	True				
ANR	926257	Statement	->	510:7:16535:16536	925487	78	True				
ANR	926258	Statement	times	510:9:16537:16541	925487	79	True				
ANR	926259	Statement	->	510:14:16542:16543	925487	80	True				
ANR	926260	Statement	file_open_time	510:16:16544:16557	925487	81	True				
ANR	926261	Statement	)	510:30:16558:16558	925487	82	True				
ANR	926262	ExpressionStatement		510:31:16559:16559	925487	83	True				
ANR	926263	BreakStatement	break ;	511:2:16563:16568	925487	84	True				
ANR	926264	Label	case 'u' :	512:1:16571:16579	925487	85	True				
ANR	926265	CompoundStatement		129:3:3060:3072	925487	86					
ANR	926266	IdentifierDeclStatement	char unit [ 8 ] ;	514:3:16596:16608	925487	0	True				
ANR	926267	IdentifierDecl	unit [ 8 ]		925487	0					
ANR	926268	IdentifierDeclType	char [ 8 ]		925487	0					
ANR	926269	Identifier	unit		925487	1					
ANR	926270	PrimaryExpression	8		925487	2					
ANR	926271	ExpressionStatement	"n = r_num_math ( core -> num , input + 1 )"	515:3:16613:16648	925487	1	True				
ANR	926272	AssignmentExpression	"n = r_num_math ( core -> num , input + 1 )"		925487	0		=			
ANR	926273	Identifier	n		925487	0					
ANR	926274	CallExpression	"r_num_math ( core -> num , input + 1 )"		925487	1					
ANR	926275	Callee	r_num_math		925487	0					
ANR	926276	Identifier	r_num_math		925487	0					
ANR	926277	ArgumentList	core -> num		925487	1					
ANR	926278	Argument	core -> num		925487	0					
ANR	926279	PtrMemberAccess	core -> num		925487	0					
ANR	926280	Identifier	core		925487	0					
ANR	926281	Identifier	num		925487	1					
ANR	926282	Argument	input + 1		925487	1					
ANR	926283	AdditiveExpression	input + 1		925487	0		+			
ANR	926284	Identifier	input		925487	0					
ANR	926285	PrimaryExpression	1		925487	1					
ANR	926286	ExpressionStatement	"r_num_units ( unit , sizeof ( unit ) , n )"	516:3:16653:16689	925487	2	True				
ANR	926287	CallExpression	"r_num_units ( unit , sizeof ( unit ) , n )"		925487	0					
ANR	926288	Callee	r_num_units		925487	0					
ANR	926289	Identifier	r_num_units		925487	0					
ANR	926290	ArgumentList	unit		925487	1					
ANR	926291	Argument	unit		925487	0					
ANR	926292	Identifier	unit		925487	0					
ANR	926293	Argument	sizeof ( unit )		925487	1					
ANR	926294	SizeofExpression	sizeof ( unit )		925487	0					
ANR	926295	Sizeof	sizeof		925487	0					
ANR	926296	SizeofOperand	unit		925487	1					
ANR	926297	Argument	n		925487	2					
ANR	926298	Identifier	n		925487	0					
ANR	926299	ExpressionStatement	r_cons_println ( unit )	517:3:16694:16715	925487	3	True				
ANR	926300	CallExpression	r_cons_println ( unit )		925487	0					
ANR	926301	Callee	r_cons_println		925487	0					
ANR	926302	Identifier	r_cons_println		925487	0					
ANR	926303	ArgumentList	unit		925487	1					
ANR	926304	Argument	unit		925487	0					
ANR	926305	Identifier	unit		925487	0					
ANR	926306	BreakStatement	break ;	519:2:16723:16728	925487	87	True				
ANR	926307	Label	case 'j' :	520:1:16731:16739	925487	88	True				
ANR	926308	Label	case ' ' :	521:1:16750:16758	925487	89	True				
ANR	926309	CompoundStatement		145:3:3442:3455	925487	90					
ANR	926310	IdentifierDeclStatement	"char * asnum , unit [ 8 ] ;"	523:3:16775:16795	925487	0	True				
ANR	926311	IdentifierDecl	* asnum		925487	0					
ANR	926312	IdentifierDeclType	char *		925487	0					
ANR	926313	Identifier	asnum		925487	1					
ANR	926314	IdentifierDecl	unit [ 8 ]		925487	1					
ANR	926315	IdentifierDeclType	char [ 8 ]		925487	0					
ANR	926316	Identifier	unit		925487	1					
ANR	926317	PrimaryExpression	8		925487	2					
ANR	926318	IdentifierDeclStatement	"ut32 s , a ;"	524:3:16800:16809	925487	1	True				
ANR	926319	IdentifierDecl	s		925487	0					
ANR	926320	IdentifierDeclType	ut32		925487	0					
ANR	926321	Identifier	s		925487	1					
ANR	926322	IdentifierDecl	a		925487	1					
ANR	926323	IdentifierDeclType	ut32		925487	0					
ANR	926324	Identifier	a		925487	1					
ANR	926325	IdentifierDeclStatement	double d ;	525:3:16814:16822	925487	2	True				
ANR	926326	IdentifierDecl	d		925487	0					
ANR	926327	IdentifierDeclType	double		925487	0					
ANR	926328	Identifier	d		925487	1					
ANR	926329	IdentifierDeclStatement	float f ;	526:3:16827:16834	925487	3	True				
ANR	926330	IdentifierDecl	f		925487	0					
ANR	926331	IdentifierDeclType	float		925487	0					
ANR	926332	Identifier	f		925487	1					
ANR	926333	Statement	char	527:3:16839:16842	925487	4	True				
ANR	926334	Statement	*	527:8:16844:16844	925487	5	True				
ANR	926335	Statement	const	527:10:16846:16850	925487	6	True				
ANR	926336	ExpressionStatement	inputs = strdup ( input + 1 )	527:16:16852:16879	925487	7	True				
ANR	926337	AssignmentExpression	inputs = strdup ( input + 1 )		925487	0		=			
ANR	926338	Identifier	inputs		925487	0					
ANR	926339	CallExpression	strdup ( input + 1 )		925487	1					
ANR	926340	Callee	strdup		925487	0					
ANR	926341	Identifier	strdup		925487	0					
ANR	926342	ArgumentList	input + 1		925487	1					
ANR	926343	Argument	input + 1		925487	0					
ANR	926344	AdditiveExpression	input + 1		925487	0		+			
ANR	926345	Identifier	input		925487	0					
ANR	926346	PrimaryExpression	1		925487	1					
ANR	926347	IdentifierDeclStatement	RList * list = r_num_str_split_list ( inputs ) ;	528:3:16884:16927	925487	8	True				
ANR	926348	IdentifierDecl	* list = r_num_str_split_list ( inputs )		925487	0					
ANR	926349	IdentifierDeclType	RList *		925487	0					
ANR	926350	Identifier	list		925487	1					
ANR	926351	AssignmentExpression	* list = r_num_str_split_list ( inputs )		925487	2		=			
ANR	926352	Identifier	list		925487	0					
ANR	926353	CallExpression	r_num_str_split_list ( inputs )		925487	1					
ANR	926354	Callee	r_num_str_split_list		925487	0					
ANR	926355	Identifier	r_num_str_split_list		925487	0					
ANR	926356	ArgumentList	inputs		925487	1					
ANR	926357	Argument	inputs		925487	0					
ANR	926358	Identifier	inputs		925487	0					
ANR	926359	IdentifierDeclStatement	const int list_len = r_list_length ( list ) ;	529:3:16932:16973	925487	9	True				
ANR	926360	IdentifierDecl	list_len = r_list_length ( list )		925487	0					
ANR	926361	IdentifierDeclType	const int		925487	0					
ANR	926362	Identifier	list_len		925487	1					
ANR	926363	AssignmentExpression	list_len = r_list_length ( list )		925487	2		=			
ANR	926364	Identifier	list_len		925487	0					
ANR	926365	CallExpression	r_list_length ( list )		925487	1					
ANR	926366	Callee	r_list_length		925487	0					
ANR	926367	Identifier	r_list_length		925487	0					
ANR	926368	ArgumentList	list		925487	1					
ANR	926369	Argument	list		925487	0					
ANR	926370	Identifier	list		925487	0					
ANR	926371	IdentifierDeclStatement	PJ * pj = NULL ;	530:3:16978:16991	925487	10	True				
ANR	926372	IdentifierDecl	* pj = NULL		925487	0					
ANR	926373	IdentifierDeclType	PJ *		925487	0					
ANR	926374	Identifier	pj		925487	1					
ANR	926375	AssignmentExpression	* pj = NULL		925487	2		=			
ANR	926376	Identifier	NULL		925487	0					
ANR	926377	Identifier	NULL		925487	1					
ANR	926378	IfStatement	if ( * input == 'j' )		925487	11					
ANR	926379	Condition	* input == 'j'	531:7:17000:17013	925487	0	True				
ANR	926380	EqualityExpression	* input == 'j'		925487	0		==			
ANR	926381	UnaryOperationExpression	* input		925487	0					
ANR	926382	UnaryOperator	*		925487	0					
ANR	926383	Identifier	input		925487	1					
ANR	926384	PrimaryExpression	'j'		925487	1					
ANR	926385	CompoundStatement		146:23:3480:3480	925487	1					
ANR	926386	ExpressionStatement	pj = pj_new ( )	532:4:17022:17036	925487	0	True				
ANR	926387	AssignmentExpression	pj = pj_new ( )		925487	0		=			
ANR	926388	Identifier	pj		925487	0					
ANR	926389	CallExpression	pj_new ( )		925487	1					
ANR	926390	Callee	pj_new		925487	0					
ANR	926391	Identifier	pj_new		925487	0					
ANR	926392	ArgumentList			925487	1					
ANR	926393	ExpressionStatement	pj_o ( pj )	533:4:17042:17051	925487	1	True				
ANR	926394	CallExpression	pj_o ( pj )		925487	0					
ANR	926395	Callee	pj_o		925487	0					
ANR	926396	Identifier	pj_o		925487	0					
ANR	926397	ArgumentList	pj		925487	1					
ANR	926398	Argument	pj		925487	0					
ANR	926399	Identifier	pj		925487	0					
ANR	926400	ForStatement	for ( i = 0 ; i < list_len ; i ++ )		925487	12					
ANR	926401	ForInit	i = 0 ;	535:8:17066:17071	925487	0	True				
ANR	926402	AssignmentExpression	i = 0		925487	0		=			
ANR	926403	Identifier	i		925487	0					
ANR	926404	PrimaryExpression	0		925487	1					
ANR	926405	Condition	i < list_len	535:15:17073:17084	925487	1	True				
ANR	926406	RelationalExpression	i < list_len		925487	0		<			
ANR	926407	Identifier	i		925487	0					
ANR	926408	Identifier	list_len		925487	1					
ANR	926409	PostIncDecOperationExpression	i ++	535:29:17087:17089	925487	2	True				
ANR	926410	Identifier	i		925487	0					
ANR	926411	IncDec	++		925487	1					
ANR	926412	CompoundStatement		151:4:3562:3602	925487	3					
ANR	926413	IdentifierDeclStatement	const char * str = r_list_pop_head ( list ) ;	536:4:17098:17138	925487	0	True				
ANR	926414	IdentifierDecl	* str = r_list_pop_head ( list )		925487	0					
ANR	926415	IdentifierDeclType	const char *		925487	0					
ANR	926416	Identifier	str		925487	1					
ANR	926417	AssignmentExpression	* str = r_list_pop_head ( list )		925487	2		=			
ANR	926418	Identifier	str		925487	0					
ANR	926419	CallExpression	r_list_pop_head ( list )		925487	1					
ANR	926420	Callee	r_list_pop_head		925487	0					
ANR	926421	Identifier	r_list_pop_head		925487	0					
ANR	926422	ArgumentList	list		925487	1					
ANR	926423	Argument	list		925487	0					
ANR	926424	Identifier	list		925487	0					
ANR	926425	IfStatement	if ( ! * str )		925487	1					
ANR	926426	Condition	! * str	537:8:17148:17152	925487	0	True				
ANR	926427	UnaryOperationExpression	! * str		925487	0					
ANR	926428	UnaryOperator	!		925487	0					
ANR	926429	UnaryOperationExpression	* str		925487	1					
ANR	926430	UnaryOperator	*		925487	0					
ANR	926431	Identifier	str		925487	1					
ANR	926432	CompoundStatement		152:15:3619:3619	925487	1					
ANR	926433	ContinueStatement	continue ;	538:5:17162:17170	925487	0	True				
ANR	926434	ExpressionStatement	"n = r_num_math ( core -> num , str )"	540:4:17182:17213	925487	2	True				
ANR	926435	AssignmentExpression	"n = r_num_math ( core -> num , str )"		925487	0		=			
ANR	926436	Identifier	n		925487	0					
ANR	926437	CallExpression	"r_num_math ( core -> num , str )"		925487	1					
ANR	926438	Callee	r_num_math		925487	0					
ANR	926439	Identifier	r_num_math		925487	0					
ANR	926440	ArgumentList	core -> num		925487	1					
ANR	926441	Argument	core -> num		925487	0					
ANR	926442	PtrMemberAccess	core -> num		925487	0					
ANR	926443	Identifier	core		925487	0					
ANR	926444	Identifier	num		925487	1					
ANR	926445	Argument	str		925487	1					
ANR	926446	Identifier	str		925487	0					
ANR	926447	IfStatement	if ( core -> num -> dbz )		925487	3					
ANR	926448	Condition	core -> num -> dbz	541:8:17223:17236	925487	0	True				
ANR	926449	PtrMemberAccess	core -> num -> dbz		925487	0					
ANR	926450	PtrMemberAccess	core -> num		925487	0					
ANR	926451	Identifier	core		925487	0					
ANR	926452	Identifier	num		925487	1					
ANR	926453	Identifier	dbz		925487	1					
ANR	926454	CompoundStatement		156:24:3703:3703	925487	1					
ANR	926455	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	542:5:17246:17288	925487	0	True				
ANR	926456	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		925487	0					
ANR	926457	Callee	eprintf		925487	0					
ANR	926458	Identifier	eprintf		925487	0					
ANR	926459	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		925487	1					
ANR	926460	Argument	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	926461	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	926462	ExpressionStatement	"asnum = r_num_as_string ( NULL , n , false )"	544:4:17300:17341	925487	4	True				
ANR	926463	AssignmentExpression	"asnum = r_num_as_string ( NULL , n , false )"		925487	0		=			
ANR	926464	Identifier	asnum		925487	0					
ANR	926465	CallExpression	"r_num_as_string ( NULL , n , false )"		925487	1					
ANR	926466	Callee	r_num_as_string		925487	0					
ANR	926467	Identifier	r_num_as_string		925487	0					
ANR	926468	ArgumentList	NULL		925487	1					
ANR	926469	Argument	NULL		925487	0					
ANR	926470	Identifier	NULL		925487	0					
ANR	926471	Argument	n		925487	1					
ANR	926472	Identifier	n		925487	0					
ANR	926473	Argument	false		925487	2					
ANR	926474	Identifier	false		925487	0					
ANR	926475	ExpressionStatement	s = n >> 16 << 12	546:4:17378:17395	925487	5	True				
ANR	926476	AssignmentExpression	s = n >> 16 << 12		925487	0		=			
ANR	926477	Identifier	s		925487	0					
ANR	926478	ShiftExpression	n >> 16 << 12		925487	1		>>			
ANR	926479	Identifier	n		925487	0					
ANR	926480	ShiftExpression	16 << 12		925487	1		<<			
ANR	926481	PrimaryExpression	16		925487	0					
ANR	926482	PrimaryExpression	12		925487	1					
ANR	926483	ExpressionStatement	a = n & 0x0fff	547:4:17401:17415	925487	6	True				
ANR	926484	AssignmentExpression	a = n & 0x0fff		925487	0		=			
ANR	926485	Identifier	a		925487	0					
ANR	926486	BitAndExpression	n & 0x0fff		925487	1		&			
ANR	926487	Identifier	n		925487	0					
ANR	926488	PrimaryExpression	0x0fff		925487	1					
ANR	926489	ExpressionStatement	"r_num_units ( unit , sizeof ( unit ) , n )"	548:4:17421:17457	925487	7	True				
ANR	926490	CallExpression	"r_num_units ( unit , sizeof ( unit ) , n )"		925487	0					
ANR	926491	Callee	r_num_units		925487	0					
ANR	926492	Identifier	r_num_units		925487	0					
ANR	926493	ArgumentList	unit		925487	1					
ANR	926494	Argument	unit		925487	0					
ANR	926495	Identifier	unit		925487	0					
ANR	926496	Argument	sizeof ( unit )		925487	1					
ANR	926497	SizeofExpression	sizeof ( unit )		925487	0					
ANR	926498	Sizeof	sizeof		925487	0					
ANR	926499	SizeofOperand	unit		925487	1					
ANR	926500	Argument	n		925487	2					
ANR	926501	Identifier	n		925487	0					
ANR	926502	IfStatement	if ( * input == 'j' )		925487	8					
ANR	926503	Condition	* input == 'j'	549:8:17467:17480	925487	0	True				
ANR	926504	EqualityExpression	* input == 'j'		925487	0		==			
ANR	926505	UnaryOperationExpression	* input		925487	0					
ANR	926506	UnaryOperator	*		925487	0					
ANR	926507	Identifier	input		925487	1					
ANR	926508	PrimaryExpression	'j'		925487	1					
ANR	926509	CompoundStatement		164:24:3947:3947	925487	1					
ANR	926510	ExpressionStatement	"pj_ks ( pj , ""int32"" , sdb_fmt ( ""%d"" , ( st32 ) ( n & UT32_MAX ) ) )"	550:5:17490:17547	925487	0	True				
ANR	926511	CallExpression	"pj_ks ( pj , ""int32"" , sdb_fmt ( ""%d"" , ( st32 ) ( n & UT32_MAX ) ) )"		925487	0					
ANR	926512	Callee	pj_ks		925487	0					
ANR	926513	Identifier	pj_ks		925487	0					
ANR	926514	ArgumentList	pj		925487	1					
ANR	926515	Argument	pj		925487	0					
ANR	926516	Identifier	pj		925487	0					
ANR	926517	Argument	"""int32"""		925487	1					
ANR	926518	PrimaryExpression	"""int32"""		925487	0					
ANR	926519	Argument	"sdb_fmt ( ""%d"" , ( st32 ) ( n & UT32_MAX ) )"		925487	2					
ANR	926520	CallExpression	"sdb_fmt ( ""%d"" , ( st32 ) ( n & UT32_MAX ) )"		925487	0					
ANR	926521	Callee	sdb_fmt		925487	0					
ANR	926522	Identifier	sdb_fmt		925487	0					
ANR	926523	ArgumentList	"""%d"""		925487	1					
ANR	926524	Argument	"""%d"""		925487	0					
ANR	926525	PrimaryExpression	"""%d"""		925487	0					
ANR	926526	Argument	( st32 ) ( n & UT32_MAX )		925487	1					
ANR	926527	CastExpression	( st32 ) ( n & UT32_MAX )		925487	0					
ANR	926528	CastTarget	st32		925487	0					
ANR	926529	BitAndExpression	n & UT32_MAX		925487	1		&			
ANR	926530	Identifier	n		925487	0					
ANR	926531	Identifier	UT32_MAX		925487	1					
ANR	926532	ExpressionStatement	"pj_ks ( pj , ""uint32"" , sdb_fmt ( ""%u"" , ( ut32 ) n ) )"	551:5:17554:17599	925487	1	True				
ANR	926533	CallExpression	"pj_ks ( pj , ""uint32"" , sdb_fmt ( ""%u"" , ( ut32 ) n ) )"		925487	0					
ANR	926534	Callee	pj_ks		925487	0					
ANR	926535	Identifier	pj_ks		925487	0					
ANR	926536	ArgumentList	pj		925487	1					
ANR	926537	Argument	pj		925487	0					
ANR	926538	Identifier	pj		925487	0					
ANR	926539	Argument	"""uint32"""		925487	1					
ANR	926540	PrimaryExpression	"""uint32"""		925487	0					
ANR	926541	Argument	"sdb_fmt ( ""%u"" , ( ut32 ) n )"		925487	2					
ANR	926542	CallExpression	"sdb_fmt ( ""%u"" , ( ut32 ) n )"		925487	0					
ANR	926543	Callee	sdb_fmt		925487	0					
ANR	926544	Identifier	sdb_fmt		925487	0					
ANR	926545	ArgumentList	"""%u"""		925487	1					
ANR	926546	Argument	"""%u"""		925487	0					
ANR	926547	PrimaryExpression	"""%u"""		925487	0					
ANR	926548	Argument	( ut32 ) n		925487	1					
ANR	926549	CastExpression	( ut32 ) n		925487	0					
ANR	926550	CastTarget	ut32		925487	0					
ANR	926551	Identifier	n		925487	1					
ANR	926552	Statement	pj_ks	552:5:17606:17610	925487	2	True				
ANR	926553	Statement	(	552:11:17612:17612	925487	3	True				
ANR	926554	Statement	pj	552:12:17613:17614	925487	4	True				
ANR	926555	Statement	","	552:14:17615:17615	925487	5	True				
ANR	926556	Statement	"""int64"""	552:16:17617:17623	925487	6	True				
ANR	926557	Statement	","	552:23:17624:17624	925487	7	True				
ANR	926558	Statement	sdb_fmt	552:25:17626:17632	925487	8	True				
ANR	926559	Statement	(	552:33:17634:17634	925487	9	True				
ANR	926560	Statement	"""%"""	552:34:17635:17637	925487	10	True				
ANR	926561	Statement	PFMT64d	552:37:17638:17644	925487	11	True				
ANR	926562	Statement	","	552:44:17645:17645	925487	12	True				
ANR	926563	Statement	(	552:46:17647:17647	925487	13	True				
ANR	926564	Statement	st64	552:47:17648:17651	925487	14	True				
ANR	926565	Statement	)	552:51:17652:17652	925487	15	True				
ANR	926566	Statement	n	552:52:17653:17653	925487	16	True				
ANR	926567	Statement	)	552:53:17654:17654	925487	17	True				
ANR	926568	Statement	)	552:54:17655:17655	925487	18	True				
ANR	926569	ExpressionStatement		552:55:17656:17656	925487	19	True				
ANR	926570	Statement	pj_ks	553:5:17663:17667	925487	20	True				
ANR	926571	Statement	(	553:11:17669:17669	925487	21	True				
ANR	926572	Statement	pj	553:12:17670:17671	925487	22	True				
ANR	926573	Statement	","	553:14:17672:17672	925487	23	True				
ANR	926574	Statement	"""uint64"""	553:16:17674:17681	925487	24	True				
ANR	926575	Statement	","	553:24:17682:17682	925487	25	True				
ANR	926576	Statement	sdb_fmt	553:26:17684:17690	925487	26	True				
ANR	926577	Statement	(	553:34:17692:17692	925487	27	True				
ANR	926578	Statement	"""%"""	553:35:17693:17695	925487	28	True				
ANR	926579	Statement	PFMT64u	553:38:17696:17702	925487	29	True				
ANR	926580	Statement	","	553:45:17703:17703	925487	30	True				
ANR	926581	Statement	(	553:47:17705:17705	925487	31	True				
ANR	926582	Statement	ut64	553:48:17706:17709	925487	32	True				
ANR	926583	Statement	)	553:52:17710:17710	925487	33	True				
ANR	926584	Statement	n	553:53:17711:17711	925487	34	True				
ANR	926585	Statement	)	553:54:17712:17712	925487	35	True				
ANR	926586	Statement	)	553:55:17713:17713	925487	36	True				
ANR	926587	ExpressionStatement		553:56:17714:17714	925487	37	True				
ANR	926588	Statement	pj_ks	554:5:17721:17725	925487	38	True				
ANR	926589	Statement	(	554:11:17727:17727	925487	39	True				
ANR	926590	Statement	pj	554:12:17728:17729	925487	40	True				
ANR	926591	Statement	","	554:14:17730:17730	925487	41	True				
ANR	926592	Statement	"""hex"""	554:16:17732:17736	925487	42	True				
ANR	926593	Statement	","	554:21:17737:17737	925487	43	True				
ANR	926594	Statement	sdb_fmt	554:23:17739:17745	925487	44	True				
ANR	926595	Statement	(	554:31:17747:17747	925487	45	True				
ANR	926596	Statement	"""0x%08"""	554:32:17748:17754	925487	46	True				
ANR	926597	Statement	PFMT64x	554:39:17755:17761	925487	47	True				
ANR	926598	Statement	","	554:46:17762:17762	925487	48	True				
ANR	926599	Statement	n	554:48:17764:17764	925487	49	True				
ANR	926600	Statement	)	554:49:17765:17765	925487	50	True				
ANR	926601	Statement	)	554:50:17766:17766	925487	51	True				
ANR	926602	ExpressionStatement		554:51:17767:17767	925487	52	True				
ANR	926603	Statement	pj_ks	555:5:17774:17778	925487	53	True				
ANR	926604	Statement	(	555:11:17780:17780	925487	54	True				
ANR	926605	Statement	pj	555:12:17781:17782	925487	55	True				
ANR	926606	Statement	","	555:14:17783:17783	925487	56	True				
ANR	926607	Statement	"""octal"""	555:16:17785:17791	925487	57	True				
ANR	926608	Statement	","	555:23:17792:17792	925487	58	True				
ANR	926609	Statement	sdb_fmt	555:25:17794:17800	925487	59	True				
ANR	926610	Statement	(	555:33:17802:17802	925487	60	True				
ANR	926611	Statement	"""0%"""	555:34:17803:17806	925487	61	True				
ANR	926612	Statement	PFMT64o	555:38:17807:17813	925487	62	True				
ANR	926613	Statement	","	555:45:17814:17814	925487	63	True				
ANR	926614	Statement	n	555:47:17816:17816	925487	64	True				
ANR	926615	Statement	)	555:48:17817:17817	925487	65	True				
ANR	926616	Statement	)	555:49:17818:17818	925487	66	True				
ANR	926617	ExpressionStatement		555:50:17819:17819	925487	67	True				
ANR	926618	ExpressionStatement	"pj_ks ( pj , ""unit"" , unit )"	556:5:17826:17850	925487	68	True				
ANR	926619	CallExpression	"pj_ks ( pj , ""unit"" , unit )"		925487	0					
ANR	926620	Callee	pj_ks		925487	0					
ANR	926621	Identifier	pj_ks		925487	0					
ANR	926622	ArgumentList	pj		925487	1					
ANR	926623	Argument	pj		925487	0					
ANR	926624	Identifier	pj		925487	0					
ANR	926625	Argument	"""unit"""		925487	1					
ANR	926626	PrimaryExpression	"""unit"""		925487	0					
ANR	926627	Argument	unit		925487	2					
ANR	926628	Identifier	unit		925487	0					
ANR	926629	ExpressionStatement	"pj_ks ( pj , ""segment"" , sdb_fmt ( ""%04x:%04x"" , s , a ) )"	557:5:17857:17907	925487	69	True				
ANR	926630	CallExpression	"pj_ks ( pj , ""segment"" , sdb_fmt ( ""%04x:%04x"" , s , a ) )"		925487	0					
ANR	926631	Callee	pj_ks		925487	0					
ANR	926632	Identifier	pj_ks		925487	0					
ANR	926633	ArgumentList	pj		925487	1					
ANR	926634	Argument	pj		925487	0					
ANR	926635	Identifier	pj		925487	0					
ANR	926636	Argument	"""segment"""		925487	1					
ANR	926637	PrimaryExpression	"""segment"""		925487	0					
ANR	926638	Argument	"sdb_fmt ( ""%04x:%04x"" , s , a )"		925487	2					
ANR	926639	CallExpression	"sdb_fmt ( ""%04x:%04x"" , s , a )"		925487	0					
ANR	926640	Callee	sdb_fmt		925487	0					
ANR	926641	Identifier	sdb_fmt		925487	0					
ANR	926642	ArgumentList	"""%04x:%04x"""		925487	1					
ANR	926643	Argument	"""%04x:%04x"""		925487	0					
ANR	926644	PrimaryExpression	"""%04x:%04x"""		925487	0					
ANR	926645	Argument	s		925487	1					
ANR	926646	Identifier	s		925487	0					
ANR	926647	Argument	a		925487	2					
ANR	926648	Identifier	a		925487	0					
ANR	926649	ElseStatement	else		925487	0					
ANR	926650	CompoundStatement		174:11:4390:4390	925487	0					
ANR	926651	IfStatement	if ( n >> 32 )		925487	0					
ANR	926652	Condition	n >> 32	560:9:17937:17943	925487	0	True				
ANR	926653	ShiftExpression	n >> 32		925487	0		>>			
ANR	926654	Identifier	n		925487	0					
ANR	926655	PrimaryExpression	32		925487	1					
ANR	926656	CompoundStatement		175:18:4410:4410	925487	1					
ANR	926657	Statement	r_cons_printf	561:6:17954:17966	925487	0	True				
ANR	926658	Statement	(	561:20:17968:17968	925487	1	True				
ANR	926659	Statement	"""int64   %"""	561:21:17969:17979	925487	2	True				
ANR	926660	Statement	PFMT64d	561:32:17980:17986	925487	3	True				
ANR	926661	Statement	"""\\n"""	561:39:17987:17990	925487	4	True				
ANR	926662	Statement	","	561:43:17991:17991	925487	5	True				
ANR	926663	Statement	(	561:45:17993:17993	925487	6	True				
ANR	926664	Statement	st64	561:46:17994:17997	925487	7	True				
ANR	926665	Statement	)	561:50:17998:17998	925487	8	True				
ANR	926666	Statement	n	561:51:17999:17999	925487	9	True				
ANR	926667	Statement	)	561:52:18000:18000	925487	10	True				
ANR	926668	ExpressionStatement		561:53:18001:18001	925487	11	True				
ANR	926669	Statement	r_cons_printf	562:6:18009:18021	925487	12	True				
ANR	926670	Statement	(	562:20:18023:18023	925487	13	True				
ANR	926671	Statement	"""uint64  %"""	562:21:18024:18034	925487	14	True				
ANR	926672	Statement	PFMT64u	562:32:18035:18041	925487	15	True				
ANR	926673	Statement	"""\\n"""	562:39:18042:18045	925487	16	True				
ANR	926674	Statement	","	562:43:18046:18046	925487	17	True				
ANR	926675	Statement	(	562:45:18048:18048	925487	18	True				
ANR	926676	Statement	ut64	562:46:18049:18052	925487	19	True				
ANR	926677	Statement	)	562:50:18053:18053	925487	20	True				
ANR	926678	Statement	n	562:51:18054:18054	925487	21	True				
ANR	926679	Statement	)	562:52:18055:18055	925487	22	True				
ANR	926680	ExpressionStatement		562:53:18056:18056	925487	23	True				
ANR	926681	ElseStatement	else		925487	0					
ANR	926682	CompoundStatement		178:12:4534:4534	925487	0					
ANR	926683	ExpressionStatement	"r_cons_printf ( ""int32   %d\\n"" , ( st32 ) n )"	564:6:18078:18117	925487	0	True				
ANR	926684	CallExpression	"r_cons_printf ( ""int32   %d\\n"" , ( st32 ) n )"		925487	0					
ANR	926685	Callee	r_cons_printf		925487	0					
ANR	926686	Identifier	r_cons_printf		925487	0					
ANR	926687	ArgumentList	"""int32   %d\\n"""		925487	1					
ANR	926688	Argument	"""int32   %d\\n"""		925487	0					
ANR	926689	PrimaryExpression	"""int32   %d\\n"""		925487	0					
ANR	926690	Argument	( st32 ) n		925487	1					
ANR	926691	CastExpression	( st32 ) n		925487	0					
ANR	926692	CastTarget	st32		925487	0					
ANR	926693	Identifier	n		925487	1					
ANR	926694	ExpressionStatement	"r_cons_printf ( ""uint32  %u\\n"" , ( ut32 ) n )"	565:6:18125:18164	925487	1	True				
ANR	926695	CallExpression	"r_cons_printf ( ""uint32  %u\\n"" , ( ut32 ) n )"		925487	0					
ANR	926696	Callee	r_cons_printf		925487	0					
ANR	926697	Identifier	r_cons_printf		925487	0					
ANR	926698	ArgumentList	"""uint32  %u\\n"""		925487	1					
ANR	926699	Argument	"""uint32  %u\\n"""		925487	0					
ANR	926700	PrimaryExpression	"""uint32  %u\\n"""		925487	0					
ANR	926701	Argument	( ut32 ) n		925487	1					
ANR	926702	CastExpression	( ut32 ) n		925487	0					
ANR	926703	CastTarget	ut32		925487	0					
ANR	926704	Identifier	n		925487	1					
ANR	926705	Statement	r_cons_printf	567:5:18178:18190	925487	1	True				
ANR	926706	Statement	(	567:19:18192:18192	925487	2	True				
ANR	926707	Statement	"""hex     0x%"""	567:20:18193:18205	925487	3	True				
ANR	926708	Statement	PFMT64x	567:33:18206:18212	925487	4	True				
ANR	926709	Statement	"""\\n"""	567:40:18213:18216	925487	5	True				
ANR	926710	Statement	","	567:44:18217:18217	925487	6	True				
ANR	926711	Statement	n	567:46:18219:18219	925487	7	True				
ANR	926712	Statement	)	567:47:18220:18220	925487	8	True				
ANR	926713	ExpressionStatement		567:48:18221:18221	925487	9	True				
ANR	926714	Statement	r_cons_printf	568:5:18228:18240	925487	10	True				
ANR	926715	Statement	(	568:19:18242:18242	925487	11	True				
ANR	926716	Statement	"""octal   0%"""	568:20:18243:18254	925487	12	True				
ANR	926717	Statement	PFMT64o	568:32:18255:18261	925487	13	True				
ANR	926718	Statement	"""\\n"""	568:39:18262:18265	925487	14	True				
ANR	926719	Statement	","	568:43:18266:18266	925487	15	True				
ANR	926720	Statement	n	568:45:18268:18268	925487	16	True				
ANR	926721	Statement	)	568:46:18269:18269	925487	17	True				
ANR	926722	ExpressionStatement		568:47:18270:18270	925487	18	True				
ANR	926723	ExpressionStatement	"r_cons_printf ( ""unit    %s\\n"" , unit )"	569:5:18277:18313	925487	19	True				
ANR	926724	CallExpression	"r_cons_printf ( ""unit    %s\\n"" , unit )"		925487	0					
ANR	926725	Callee	r_cons_printf		925487	0					
ANR	926726	Identifier	r_cons_printf		925487	0					
ANR	926727	ArgumentList	"""unit    %s\\n"""		925487	1					
ANR	926728	Argument	"""unit    %s\\n"""		925487	0					
ANR	926729	PrimaryExpression	"""unit    %s\\n"""		925487	0					
ANR	926730	Argument	unit		925487	1					
ANR	926731	Identifier	unit		925487	0					
ANR	926732	ExpressionStatement	"r_cons_printf ( ""segment %04x:%04x\\n"" , s , a )"	570:5:18320:18363	925487	20	True				
ANR	926733	CallExpression	"r_cons_printf ( ""segment %04x:%04x\\n"" , s , a )"		925487	0					
ANR	926734	Callee	r_cons_printf		925487	0					
ANR	926735	Identifier	r_cons_printf		925487	0					
ANR	926736	ArgumentList	"""segment %04x:%04x\\n"""		925487	1					
ANR	926737	Argument	"""segment %04x:%04x\\n"""		925487	0					
ANR	926738	PrimaryExpression	"""segment %04x:%04x\\n"""		925487	0					
ANR	926739	Argument	s		925487	1					
ANR	926740	Identifier	s		925487	0					
ANR	926741	Argument	a		925487	2					
ANR	926742	Identifier	a		925487	0					
ANR	926743	IfStatement	if ( asnum )		925487	21					
ANR	926744	Condition	asnum	572:9:18380:18384	925487	0	True				
ANR	926745	Identifier	asnum		925487	0					
ANR	926746	CompoundStatement		187:16:4851:4851	925487	1					
ANR	926747	ExpressionStatement	"r_cons_printf ( ""string  \\""%s\\""\\n"" , asnum )"	573:6:18395:18436	925487	0	True				
ANR	926748	CallExpression	"r_cons_printf ( ""string  \\""%s\\""\\n"" , asnum )"		925487	0					
ANR	926749	Callee	r_cons_printf		925487	0					
ANR	926750	Identifier	r_cons_printf		925487	0					
ANR	926751	ArgumentList	"""string  \\""%s\\""\\n"""		925487	1					
ANR	926752	Argument	"""string  \\""%s\\""\\n"""		925487	0					
ANR	926753	PrimaryExpression	"""string  \\""%s\\""\\n"""		925487	0					
ANR	926754	Argument	asnum		925487	1					
ANR	926755	Identifier	asnum		925487	0					
ANR	926756	ExpressionStatement	free ( asnum )	574:6:18444:18456	925487	1	True				
ANR	926757	CallExpression	free ( asnum )		925487	0					
ANR	926758	Callee	free		925487	0					
ANR	926759	Identifier	free		925487	0					
ANR	926760	ArgumentList	asnum		925487	1					
ANR	926761	Argument	asnum		925487	0					
ANR	926762	Identifier	asnum		925487	0					
ANR	926763	ExpressionStatement	"r_str_bits64 ( out , n )"	578:4:18511:18532	925487	9	True				
ANR	926764	CallExpression	"r_str_bits64 ( out , n )"		925487	0					
ANR	926765	Callee	r_str_bits64		925487	0					
ANR	926766	Identifier	r_str_bits64		925487	0					
ANR	926767	ArgumentList	out		925487	1					
ANR	926768	Argument	out		925487	0					
ANR	926769	Identifier	out		925487	0					
ANR	926770	Argument	n		925487	1					
ANR	926771	Identifier	n		925487	0					
ANR	926772	ExpressionStatement	f = d = core -> num -> fvalue	579:4:18538:18563	925487	10	True				
ANR	926773	AssignmentExpression	f = d = core -> num -> fvalue		925487	0		=			
ANR	926774	Identifier	f		925487	0					
ANR	926775	AssignmentExpression	d = core -> num -> fvalue		925487	1		=			
ANR	926776	Identifier	d		925487	0					
ANR	926777	PtrMemberAccess	core -> num -> fvalue		925487	1					
ANR	926778	PtrMemberAccess	core -> num		925487	0					
ANR	926779	Identifier	core		925487	0					
ANR	926780	Identifier	num		925487	1					
ANR	926781	Identifier	fvalue		925487	1					
ANR	926782	ExpressionStatement	"memcpy ( & f , & n , sizeof ( f ) )"	580:4:18569:18596	925487	11	True				
ANR	926783	CallExpression	"memcpy ( & f , & n , sizeof ( f ) )"		925487	0					
ANR	926784	Callee	memcpy		925487	0					
ANR	926785	Identifier	memcpy		925487	0					
ANR	926786	ArgumentList	& f		925487	1					
ANR	926787	Argument	& f		925487	0					
ANR	926788	UnaryOperationExpression	& f		925487	0					
ANR	926789	UnaryOperator	&		925487	0					
ANR	926790	Identifier	f		925487	1					
ANR	926791	Argument	& n		925487	1					
ANR	926792	UnaryOperationExpression	& n		925487	0					
ANR	926793	UnaryOperator	&		925487	0					
ANR	926794	Identifier	n		925487	1					
ANR	926795	Argument	sizeof ( f )		925487	2					
ANR	926796	SizeofExpression	sizeof ( f )		925487	0					
ANR	926797	Sizeof	sizeof		925487	0					
ANR	926798	SizeofOperand	f		925487	1					
ANR	926799	ExpressionStatement	"memcpy ( & d , & n , sizeof ( d ) )"	581:4:18602:18629	925487	12	True				
ANR	926800	CallExpression	"memcpy ( & d , & n , sizeof ( d ) )"		925487	0					
ANR	926801	Callee	memcpy		925487	0					
ANR	926802	Identifier	memcpy		925487	0					
ANR	926803	ArgumentList	& d		925487	1					
ANR	926804	Argument	& d		925487	0					
ANR	926805	UnaryOperationExpression	& d		925487	0					
ANR	926806	UnaryOperator	&		925487	0					
ANR	926807	Identifier	d		925487	1					
ANR	926808	Argument	& n		925487	1					
ANR	926809	UnaryOperationExpression	& n		925487	0					
ANR	926810	UnaryOperator	&		925487	0					
ANR	926811	Identifier	n		925487	1					
ANR	926812	Argument	sizeof ( d )		925487	2					
ANR	926813	SizeofExpression	sizeof ( d )		925487	0					
ANR	926814	Sizeof	sizeof		925487	0					
ANR	926815	SizeofOperand	d		925487	1					
ANR	926816	IfStatement	if ( isnan ( f ) && signbit ( f ) )		925487	13					
ANR	926817	Condition	isnan ( f ) && signbit ( f )	583:8:18706:18729	925487	0	True				
ANR	926818	AndExpression	isnan ( f ) && signbit ( f )		925487	0		&&			
ANR	926819	CallExpression	isnan ( f )		925487	0					
ANR	926820	Callee	isnan		925487	0					
ANR	926821	Identifier	isnan		925487	0					
ANR	926822	ArgumentList	f		925487	1					
ANR	926823	Argument	f		925487	0					
ANR	926824	Identifier	f		925487	0					
ANR	926825	CallExpression	signbit ( f )		925487	1					
ANR	926826	Callee	signbit		925487	0					
ANR	926827	Identifier	signbit		925487	0					
ANR	926828	ArgumentList	f		925487	1					
ANR	926829	Argument	f		925487	0					
ANR	926830	Identifier	f		925487	0					
ANR	926831	CompoundStatement		198:34:5196:5196	925487	1					
ANR	926832	ExpressionStatement	f = - f	584:5:18739:18745	925487	0	True				
ANR	926833	AssignmentExpression	f = - f		925487	0		=			
ANR	926834	Identifier	f		925487	0					
ANR	926835	UnaryOperationExpression	- f		925487	1					
ANR	926836	UnaryOperator	-		925487	0					
ANR	926837	Identifier	f		925487	1					
ANR	926838	IfStatement	if ( isnan ( d ) && signbit ( d ) )		925487	14					
ANR	926839	Condition	isnan ( d ) && signbit ( d )	586:8:18761:18784	925487	0	True				
ANR	926840	AndExpression	isnan ( d ) && signbit ( d )		925487	0		&&			
ANR	926841	CallExpression	isnan ( d )		925487	0					
ANR	926842	Callee	isnan		925487	0					
ANR	926843	Identifier	isnan		925487	0					
ANR	926844	ArgumentList	d		925487	1					
ANR	926845	Argument	d		925487	0					
ANR	926846	Identifier	d		925487	0					
ANR	926847	CallExpression	signbit ( d )		925487	1					
ANR	926848	Callee	signbit		925487	0					
ANR	926849	Identifier	signbit		925487	0					
ANR	926850	ArgumentList	d		925487	1					
ANR	926851	Argument	d		925487	0					
ANR	926852	Identifier	d		925487	0					
ANR	926853	CompoundStatement		201:34:5251:5251	925487	1					
ANR	926854	ExpressionStatement	d = - d	587:5:18794:18800	925487	0	True				
ANR	926855	AssignmentExpression	d = - d		925487	0		=			
ANR	926856	Identifier	d		925487	0					
ANR	926857	UnaryOperationExpression	- d		925487	1					
ANR	926858	UnaryOperator	-		925487	0					
ANR	926859	Identifier	d		925487	1					
ANR	926860	IfStatement	if ( * input == 'j' )		925487	15					
ANR	926861	Condition	* input == 'j'	589:8:18816:18829	925487	0	True				
ANR	926862	EqualityExpression	* input == 'j'		925487	0		==			
ANR	926863	UnaryOperationExpression	* input		925487	0					
ANR	926864	UnaryOperator	*		925487	0					
ANR	926865	Identifier	input		925487	1					
ANR	926866	PrimaryExpression	'j'		925487	1					
ANR	926867	CompoundStatement		204:24:5296:5296	925487	1					
ANR	926868	ExpressionStatement	"pj_ks ( pj , ""fvalue"" , sdb_fmt ( ""%.1lf"" , core -> num -> fvalue ) )"	590:5:18839:18897	925487	0	True				
ANR	926869	CallExpression	"pj_ks ( pj , ""fvalue"" , sdb_fmt ( ""%.1lf"" , core -> num -> fvalue ) )"		925487	0					
ANR	926870	Callee	pj_ks		925487	0					
ANR	926871	Identifier	pj_ks		925487	0					
ANR	926872	ArgumentList	pj		925487	1					
ANR	926873	Argument	pj		925487	0					
ANR	926874	Identifier	pj		925487	0					
ANR	926875	Argument	"""fvalue"""		925487	1					
ANR	926876	PrimaryExpression	"""fvalue"""		925487	0					
ANR	926877	Argument	"sdb_fmt ( ""%.1lf"" , core -> num -> fvalue )"		925487	2					
ANR	926878	CallExpression	"sdb_fmt ( ""%.1lf"" , core -> num -> fvalue )"		925487	0					
ANR	926879	Callee	sdb_fmt		925487	0					
ANR	926880	Identifier	sdb_fmt		925487	0					
ANR	926881	ArgumentList	"""%.1lf"""		925487	1					
ANR	926882	Argument	"""%.1lf"""		925487	0					
ANR	926883	PrimaryExpression	"""%.1lf"""		925487	0					
ANR	926884	Argument	core -> num -> fvalue		925487	1					
ANR	926885	PtrMemberAccess	core -> num -> fvalue		925487	0					
ANR	926886	PtrMemberAccess	core -> num		925487	0					
ANR	926887	Identifier	core		925487	0					
ANR	926888	Identifier	num		925487	1					
ANR	926889	Identifier	fvalue		925487	1					
ANR	926890	ExpressionStatement	"pj_ks ( pj , ""float"" , sdb_fmt ( ""%ff"" , f ) )"	591:5:18904:18943	925487	1	True				
ANR	926891	CallExpression	"pj_ks ( pj , ""float"" , sdb_fmt ( ""%ff"" , f ) )"		925487	0					
ANR	926892	Callee	pj_ks		925487	0					
ANR	926893	Identifier	pj_ks		925487	0					
ANR	926894	ArgumentList	pj		925487	1					
ANR	926895	Argument	pj		925487	0					
ANR	926896	Identifier	pj		925487	0					
ANR	926897	Argument	"""float"""		925487	1					
ANR	926898	PrimaryExpression	"""float"""		925487	0					
ANR	926899	Argument	"sdb_fmt ( ""%ff"" , f )"		925487	2					
ANR	926900	CallExpression	"sdb_fmt ( ""%ff"" , f )"		925487	0					
ANR	926901	Callee	sdb_fmt		925487	0					
ANR	926902	Identifier	sdb_fmt		925487	0					
ANR	926903	ArgumentList	"""%ff"""		925487	1					
ANR	926904	Argument	"""%ff"""		925487	0					
ANR	926905	PrimaryExpression	"""%ff"""		925487	0					
ANR	926906	Argument	f		925487	1					
ANR	926907	Identifier	f		925487	0					
ANR	926908	ExpressionStatement	"pj_ks ( pj , ""double"" , sdb_fmt ( ""%lf"" , d ) )"	592:5:18950:18990	925487	2	True				
ANR	926909	CallExpression	"pj_ks ( pj , ""double"" , sdb_fmt ( ""%lf"" , d ) )"		925487	0					
ANR	926910	Callee	pj_ks		925487	0					
ANR	926911	Identifier	pj_ks		925487	0					
ANR	926912	ArgumentList	pj		925487	1					
ANR	926913	Argument	pj		925487	0					
ANR	926914	Identifier	pj		925487	0					
ANR	926915	Argument	"""double"""		925487	1					
ANR	926916	PrimaryExpression	"""double"""		925487	0					
ANR	926917	Argument	"sdb_fmt ( ""%lf"" , d )"		925487	2					
ANR	926918	CallExpression	"sdb_fmt ( ""%lf"" , d )"		925487	0					
ANR	926919	Callee	sdb_fmt		925487	0					
ANR	926920	Identifier	sdb_fmt		925487	0					
ANR	926921	ArgumentList	"""%lf"""		925487	1					
ANR	926922	Argument	"""%lf"""		925487	0					
ANR	926923	PrimaryExpression	"""%lf"""		925487	0					
ANR	926924	Argument	d		925487	1					
ANR	926925	Identifier	d		925487	0					
ANR	926926	ExpressionStatement	"pj_ks ( pj , ""binary"" , sdb_fmt ( ""0b%s"" , out ) )"	593:5:18997:19040	925487	3	True				
ANR	926927	CallExpression	"pj_ks ( pj , ""binary"" , sdb_fmt ( ""0b%s"" , out ) )"		925487	0					
ANR	926928	Callee	pj_ks		925487	0					
ANR	926929	Identifier	pj_ks		925487	0					
ANR	926930	ArgumentList	pj		925487	1					
ANR	926931	Argument	pj		925487	0					
ANR	926932	Identifier	pj		925487	0					
ANR	926933	Argument	"""binary"""		925487	1					
ANR	926934	PrimaryExpression	"""binary"""		925487	0					
ANR	926935	Argument	"sdb_fmt ( ""0b%s"" , out )"		925487	2					
ANR	926936	CallExpression	"sdb_fmt ( ""0b%s"" , out )"		925487	0					
ANR	926937	Callee	sdb_fmt		925487	0					
ANR	926938	Identifier	sdb_fmt		925487	0					
ANR	926939	ArgumentList	"""0b%s"""		925487	1					
ANR	926940	Argument	"""0b%s"""		925487	0					
ANR	926941	PrimaryExpression	"""0b%s"""		925487	0					
ANR	926942	Argument	out		925487	1					
ANR	926943	Identifier	out		925487	0					
ANR	926944	ExpressionStatement	"r_num_to_trits ( out , n )"	594:5:19047:19070	925487	4	True				
ANR	926945	CallExpression	"r_num_to_trits ( out , n )"		925487	0					
ANR	926946	Callee	r_num_to_trits		925487	0					
ANR	926947	Identifier	r_num_to_trits		925487	0					
ANR	926948	ArgumentList	out		925487	1					
ANR	926949	Argument	out		925487	0					
ANR	926950	Identifier	out		925487	0					
ANR	926951	Argument	n		925487	1					
ANR	926952	Identifier	n		925487	0					
ANR	926953	ExpressionStatement	"pj_ks ( pj , ""trits"" , sdb_fmt ( ""0t%s"" , out ) )"	595:5:19077:19119	925487	5	True				
ANR	926954	CallExpression	"pj_ks ( pj , ""trits"" , sdb_fmt ( ""0t%s"" , out ) )"		925487	0					
ANR	926955	Callee	pj_ks		925487	0					
ANR	926956	Identifier	pj_ks		925487	0					
ANR	926957	ArgumentList	pj		925487	1					
ANR	926958	Argument	pj		925487	0					
ANR	926959	Identifier	pj		925487	0					
ANR	926960	Argument	"""trits"""		925487	1					
ANR	926961	PrimaryExpression	"""trits"""		925487	0					
ANR	926962	Argument	"sdb_fmt ( ""0t%s"" , out )"		925487	2					
ANR	926963	CallExpression	"sdb_fmt ( ""0t%s"" , out )"		925487	0					
ANR	926964	Callee	sdb_fmt		925487	0					
ANR	926965	Identifier	sdb_fmt		925487	0					
ANR	926966	ArgumentList	"""0t%s"""		925487	1					
ANR	926967	Argument	"""0t%s"""		925487	0					
ANR	926968	PrimaryExpression	"""0t%s"""		925487	0					
ANR	926969	Argument	out		925487	1					
ANR	926970	Identifier	out		925487	0					
ANR	926971	ElseStatement	else		925487	0					
ANR	926972	CompoundStatement		211:11:5596:5596	925487	0					
ANR	926973	ExpressionStatement	"r_cons_printf ( ""fvalue: %.1lf\\n"" , core -> num -> fvalue )"	597:5:19139:19191	925487	0	True				
ANR	926974	CallExpression	"r_cons_printf ( ""fvalue: %.1lf\\n"" , core -> num -> fvalue )"		925487	0					
ANR	926975	Callee	r_cons_printf		925487	0					
ANR	926976	Identifier	r_cons_printf		925487	0					
ANR	926977	ArgumentList	"""fvalue: %.1lf\\n"""		925487	1					
ANR	926978	Argument	"""fvalue: %.1lf\\n"""		925487	0					
ANR	926979	PrimaryExpression	"""fvalue: %.1lf\\n"""		925487	0					
ANR	926980	Argument	core -> num -> fvalue		925487	1					
ANR	926981	PtrMemberAccess	core -> num -> fvalue		925487	0					
ANR	926982	PtrMemberAccess	core -> num		925487	0					
ANR	926983	Identifier	core		925487	0					
ANR	926984	Identifier	num		925487	1					
ANR	926985	Identifier	fvalue		925487	1					
ANR	926986	ExpressionStatement	"r_cons_printf ( ""float:  %ff\\n"" , f )"	598:5:19198:19232	925487	1	True				
ANR	926987	CallExpression	"r_cons_printf ( ""float:  %ff\\n"" , f )"		925487	0					
ANR	926988	Callee	r_cons_printf		925487	0					
ANR	926989	Identifier	r_cons_printf		925487	0					
ANR	926990	ArgumentList	"""float:  %ff\\n"""		925487	1					
ANR	926991	Argument	"""float:  %ff\\n"""		925487	0					
ANR	926992	PrimaryExpression	"""float:  %ff\\n"""		925487	0					
ANR	926993	Argument	f		925487	1					
ANR	926994	Identifier	f		925487	0					
ANR	926995	ExpressionStatement	"r_cons_printf ( ""double: %lf\\n"" , d )"	599:5:19239:19273	925487	2	True				
ANR	926996	CallExpression	"r_cons_printf ( ""double: %lf\\n"" , d )"		925487	0					
ANR	926997	Callee	r_cons_printf		925487	0					
ANR	926998	Identifier	r_cons_printf		925487	0					
ANR	926999	ArgumentList	"""double: %lf\\n"""		925487	1					
ANR	927000	Argument	"""double: %lf\\n"""		925487	0					
ANR	927001	PrimaryExpression	"""double: %lf\\n"""		925487	0					
ANR	927002	Argument	d		925487	1					
ANR	927003	Identifier	d		925487	0					
ANR	927004	ExpressionStatement	"r_cons_printf ( ""binary  0b%s\\n"" , out )"	600:5:19280:19317	925487	3	True				
ANR	927005	CallExpression	"r_cons_printf ( ""binary  0b%s\\n"" , out )"		925487	0					
ANR	927006	Callee	r_cons_printf		925487	0					
ANR	927007	Identifier	r_cons_printf		925487	0					
ANR	927008	ArgumentList	"""binary  0b%s\\n"""		925487	1					
ANR	927009	Argument	"""binary  0b%s\\n"""		925487	0					
ANR	927010	PrimaryExpression	"""binary  0b%s\\n"""		925487	0					
ANR	927011	Argument	out		925487	1					
ANR	927012	Identifier	out		925487	0					
ANR	927013	ExpressionStatement	"r_num_to_trits ( out , n )"	603:5:19344:19367	925487	4	True				
ANR	927014	CallExpression	"r_num_to_trits ( out , n )"		925487	0					
ANR	927015	Callee	r_num_to_trits		925487	0					
ANR	927016	Identifier	r_num_to_trits		925487	0					
ANR	927017	ArgumentList	out		925487	1					
ANR	927018	Argument	out		925487	0					
ANR	927019	Identifier	out		925487	0					
ANR	927020	Argument	n		925487	1					
ANR	927021	Identifier	n		925487	0					
ANR	927022	ExpressionStatement	"r_cons_printf ( ""trits   0t%s\\n"" , out )"	604:5:19374:19411	925487	5	True				
ANR	927023	CallExpression	"r_cons_printf ( ""trits   0t%s\\n"" , out )"		925487	0					
ANR	927024	Callee	r_cons_printf		925487	0					
ANR	927025	Identifier	r_cons_printf		925487	0					
ANR	927026	ArgumentList	"""trits   0t%s\\n"""		925487	1					
ANR	927027	Argument	"""trits   0t%s\\n"""		925487	0					
ANR	927028	PrimaryExpression	"""trits   0t%s\\n"""		925487	0					
ANR	927029	Argument	out		925487	1					
ANR	927030	Identifier	out		925487	0					
ANR	927031	IfStatement	if ( * input == 'j' )		925487	13					
ANR	927032	Condition	* input == 'j'	607:7:19431:19444	925487	0	True				
ANR	927033	EqualityExpression	* input == 'j'		925487	0		==			
ANR	927034	UnaryOperationExpression	* input		925487	0					
ANR	927035	UnaryOperator	*		925487	0					
ANR	927036	Identifier	input		925487	1					
ANR	927037	PrimaryExpression	'j'		925487	1					
ANR	927038	CompoundStatement		222:23:5911:5911	925487	1					
ANR	927039	ExpressionStatement	pj_end ( pj )	608:4:19453:19464	925487	0	True				
ANR	927040	CallExpression	pj_end ( pj )		925487	0					
ANR	927041	Callee	pj_end		925487	0					
ANR	927042	Identifier	pj_end		925487	0					
ANR	927043	ArgumentList	pj		925487	1					
ANR	927044	Argument	pj		925487	0					
ANR	927045	Identifier	pj		925487	0					
ANR	927046	ExpressionStatement	free ( inputs )	610:3:19474:19487	925487	14	True				
ANR	927047	CallExpression	free ( inputs )		925487	0					
ANR	927048	Callee	free		925487	0					
ANR	927049	Identifier	free		925487	0					
ANR	927050	ArgumentList	inputs		925487	1					
ANR	927051	Argument	inputs		925487	0					
ANR	927052	Identifier	inputs		925487	0					
ANR	927053	ExpressionStatement	r_list_free ( list )	611:3:19492:19510	925487	15	True				
ANR	927054	CallExpression	r_list_free ( list )		925487	0					
ANR	927055	Callee	r_list_free		925487	0					
ANR	927056	Identifier	r_list_free		925487	0					
ANR	927057	ArgumentList	list		925487	1					
ANR	927058	Argument	list		925487	0					
ANR	927059	Identifier	list		925487	0					
ANR	927060	IfStatement	if ( pj )		925487	16					
ANR	927061	Condition	pj	612:7:19519:19520	925487	0	True				
ANR	927062	Identifier	pj		925487	0					
ANR	927063	CompoundStatement		227:11:5987:5987	925487	1					
ANR	927064	ExpressionStatement	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"	613:4:19529:19567	925487	0	True				
ANR	927065	CallExpression	"r_cons_printf ( ""%s\\n"" , pj_string ( pj ) )"		925487	0					
ANR	927066	Callee	r_cons_printf		925487	0					
ANR	927067	Identifier	r_cons_printf		925487	0					
ANR	927068	ArgumentList	"""%s\\n"""		925487	1					
ANR	927069	Argument	"""%s\\n"""		925487	0					
ANR	927070	PrimaryExpression	"""%s\\n"""		925487	0					
ANR	927071	Argument	pj_string ( pj )		925487	1					
ANR	927072	CallExpression	pj_string ( pj )		925487	0					
ANR	927073	Callee	pj_string		925487	0					
ANR	927074	Identifier	pj_string		925487	0					
ANR	927075	ArgumentList	pj		925487	1					
ANR	927076	Argument	pj		925487	0					
ANR	927077	Identifier	pj		925487	0					
ANR	927078	ExpressionStatement	pj_free ( pj )	614:4:19573:19585	925487	1	True				
ANR	927079	CallExpression	pj_free ( pj )		925487	0					
ANR	927080	Callee	pj_free		925487	0					
ANR	927081	Identifier	pj_free		925487	0					
ANR	927082	ArgumentList	pj		925487	1					
ANR	927083	Argument	pj		925487	0					
ANR	927084	Identifier	pj		925487	0					
ANR	927085	BreakStatement	break ;	617:2:19598:19603	925487	91	True				
ANR	927086	Label	case 'q' :	618:1:19606:19614	925487	92	True				
ANR	927087	IfStatement	if ( core -> num -> dbz )		925487	93					
ANR	927088	Condition	core -> num -> dbz	619:6:19630:19643	925487	0	True				
ANR	927089	PtrMemberAccess	core -> num -> dbz		925487	0					
ANR	927090	PtrMemberAccess	core -> num		925487	0					
ANR	927091	Identifier	core		925487	0					
ANR	927092	Identifier	num		925487	1					
ANR	927093	Identifier	dbz		925487	1					
ANR	927094	CompoundStatement		234:22:6110:6110	925487	1					
ANR	927095	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	620:3:19651:19693	925487	0	True				
ANR	927096	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		925487	0					
ANR	927097	Callee	eprintf		925487	0					
ANR	927098	Identifier	eprintf		925487	0					
ANR	927099	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		925487	1					
ANR	927100	Argument	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	927101	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	927102	IfStatement	if ( input [ 1 ] == '?' )		925487	94					
ANR	927103	Condition	input [ 1 ] == '?'	622:6:19705:19719	925487	0	True				
ANR	927104	EqualityExpression	input [ 1 ] == '?'		925487	0		==			
ANR	927105	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927106	Identifier	input		925487	0					
ANR	927107	PrimaryExpression	1		925487	1					
ANR	927108	PrimaryExpression	'?'		925487	1					
ANR	927109	CompoundStatement		237:23:6186:6186	925487	1					
ANR	927110	Statement	r_cons_printf	623:3:19727:19739	925487	0	True				
ANR	927111	Statement	(	623:17:19741:19741	925487	1	True				
ANR	927112	Statement	"""|Usage: ?q [num]  # Update $? without printing anything\\n"""	623:18:19742:19800	925487	2	True				
ANR	927113	Statement	"""|?q 123; ?? x    # hexdump if 123 != 0"""	624:4:19806:19845	925487	3	True				
ANR	927114	Statement	)	624:44:19846:19846	925487	4	True				
ANR	927115	ExpressionStatement		624:45:19847:19847	925487	5	True				
ANR	927116	ElseStatement	else		925487	0					
ANR	927117	CompoundStatement		241:3:6327:6366	925487	0					
ANR	927118	IdentifierDeclStatement	"const char * space = strchr ( input , ' ' ) ;"	626:3:19863:19902	925487	0	True				
ANR	927119	IdentifierDecl	"* space = strchr ( input , ' ' )"		925487	0					
ANR	927120	IdentifierDeclType	const char *		925487	0					
ANR	927121	Identifier	space		925487	1					
ANR	927122	AssignmentExpression	"* space = strchr ( input , ' ' )"		925487	2		=			
ANR	927123	Identifier	space		925487	0					
ANR	927124	CallExpression	"strchr ( input , ' ' )"		925487	1					
ANR	927125	Callee	strchr		925487	0					
ANR	927126	Identifier	strchr		925487	0					
ANR	927127	ArgumentList	input		925487	1					
ANR	927128	Argument	input		925487	0					
ANR	927129	Identifier	input		925487	0					
ANR	927130	Argument	' '		925487	1					
ANR	927131	PrimaryExpression	' '		925487	0					
ANR	927132	IfStatement	if ( space )		925487	1					
ANR	927133	Condition	space	627:7:19911:19915	925487	0	True				
ANR	927134	Identifier	space		925487	0					
ANR	927135	CompoundStatement		242:14:6382:6382	925487	1					
ANR	927136	ExpressionStatement	"n = r_num_math ( core -> num , space + 1 )"	628:4:19924:19961	925487	0	True				
ANR	927137	AssignmentExpression	"n = r_num_math ( core -> num , space + 1 )"		925487	0		=			
ANR	927138	Identifier	n		925487	0					
ANR	927139	CallExpression	"r_num_math ( core -> num , space + 1 )"		925487	1					
ANR	927140	Callee	r_num_math		925487	0					
ANR	927141	Identifier	r_num_math		925487	0					
ANR	927142	ArgumentList	core -> num		925487	1					
ANR	927143	Argument	core -> num		925487	0					
ANR	927144	PtrMemberAccess	core -> num		925487	0					
ANR	927145	Identifier	core		925487	0					
ANR	927146	Identifier	num		925487	1					
ANR	927147	Argument	space + 1		925487	1					
ANR	927148	AdditiveExpression	space + 1		925487	0		+			
ANR	927149	Identifier	space		925487	0					
ANR	927150	PrimaryExpression	1		925487	1					
ANR	927151	ElseStatement	else		925487	0					
ANR	927152	CompoundStatement		244:10:6437:6437	925487	0					
ANR	927153	ExpressionStatement	"n = r_num_math ( core -> num , ""$?"" )"	630:4:19979:20011	925487	0	True				
ANR	927154	AssignmentExpression	"n = r_num_math ( core -> num , ""$?"" )"		925487	0		=			
ANR	927155	Identifier	n		925487	0					
ANR	927156	CallExpression	"r_num_math ( core -> num , ""$?"" )"		925487	1					
ANR	927157	Callee	r_num_math		925487	0					
ANR	927158	Identifier	r_num_math		925487	0					
ANR	927159	ArgumentList	core -> num		925487	1					
ANR	927160	Argument	core -> num		925487	0					
ANR	927161	PtrMemberAccess	core -> num		925487	0					
ANR	927162	Identifier	core		925487	0					
ANR	927163	Identifier	num		925487	1					
ANR	927164	Argument	"""$?"""		925487	1					
ANR	927165	PrimaryExpression	"""$?"""		925487	0					
ANR	927166	ExpressionStatement	core -> num -> value = n	632:3:20021:20041	925487	2	True				
ANR	927167	AssignmentExpression	core -> num -> value = n		925487	0		=			
ANR	927168	PtrMemberAccess	core -> num -> value		925487	0					
ANR	927169	PtrMemberAccess	core -> num		925487	0					
ANR	927170	Identifier	core		925487	0					
ANR	927171	Identifier	num		925487	1					
ANR	927172	Identifier	value		925487	1					
ANR	927173	Identifier	n		925487	1					
ANR	927174	BreakStatement	break ;	634:2:20062:20067	925487	95	True				
ANR	927175	Label	case 'v' :	635:1:20070:20078	925487	96	True				
ANR	927176	CompoundStatement		252:3:6559:6598	925487	97					
ANR	927177	IdentifierDeclStatement	"const char * space = strchr ( input , ' ' ) ;"	637:3:20095:20134	925487	0	True				
ANR	927178	IdentifierDecl	"* space = strchr ( input , ' ' )"		925487	0					
ANR	927179	IdentifierDeclType	const char *		925487	0					
ANR	927180	Identifier	space		925487	1					
ANR	927181	AssignmentExpression	"* space = strchr ( input , ' ' )"		925487	2		=			
ANR	927182	Identifier	space		925487	0					
ANR	927183	CallExpression	"strchr ( input , ' ' )"		925487	1					
ANR	927184	Callee	strchr		925487	0					
ANR	927185	Identifier	strchr		925487	0					
ANR	927186	ArgumentList	input		925487	1					
ANR	927187	Argument	input		925487	0					
ANR	927188	Identifier	input		925487	0					
ANR	927189	Argument	' '		925487	1					
ANR	927190	PrimaryExpression	' '		925487	0					
ANR	927191	IfStatement	if ( space )		925487	1					
ANR	927192	Condition	space	638:7:20143:20147	925487	0	True				
ANR	927193	Identifier	space		925487	0					
ANR	927194	CompoundStatement		253:14:6614:6614	925487	1					
ANR	927195	ExpressionStatement	"n = r_num_math ( core -> num , space + 1 )"	639:4:20156:20193	925487	0	True				
ANR	927196	AssignmentExpression	"n = r_num_math ( core -> num , space + 1 )"		925487	0		=			
ANR	927197	Identifier	n		925487	0					
ANR	927198	CallExpression	"r_num_math ( core -> num , space + 1 )"		925487	1					
ANR	927199	Callee	r_num_math		925487	0					
ANR	927200	Identifier	r_num_math		925487	0					
ANR	927201	ArgumentList	core -> num		925487	1					
ANR	927202	Argument	core -> num		925487	0					
ANR	927203	PtrMemberAccess	core -> num		925487	0					
ANR	927204	Identifier	core		925487	0					
ANR	927205	Identifier	num		925487	1					
ANR	927206	Argument	space + 1		925487	1					
ANR	927207	AdditiveExpression	space + 1		925487	0		+			
ANR	927208	Identifier	space		925487	0					
ANR	927209	PrimaryExpression	1		925487	1					
ANR	927210	ElseStatement	else		925487	0					
ANR	927211	CompoundStatement		255:10:6669:6669	925487	0					
ANR	927212	ExpressionStatement	"n = r_num_math ( core -> num , ""$?"" )"	641:4:20211:20243	925487	0	True				
ANR	927213	AssignmentExpression	"n = r_num_math ( core -> num , ""$?"" )"		925487	0		=			
ANR	927214	Identifier	n		925487	0					
ANR	927215	CallExpression	"r_num_math ( core -> num , ""$?"" )"		925487	1					
ANR	927216	Callee	r_num_math		925487	0					
ANR	927217	Identifier	r_num_math		925487	0					
ANR	927218	ArgumentList	core -> num		925487	1					
ANR	927219	Argument	core -> num		925487	0					
ANR	927220	PtrMemberAccess	core -> num		925487	0					
ANR	927221	Identifier	core		925487	0					
ANR	927222	Identifier	num		925487	1					
ANR	927223	Argument	"""$?"""		925487	1					
ANR	927224	PrimaryExpression	"""$?"""		925487	0					
ANR	927225	IfStatement	if ( core -> num -> dbz )		925487	98					
ANR	927226	Condition	core -> num -> dbz	644:6:20260:20273	925487	0	True				
ANR	927227	PtrMemberAccess	core -> num -> dbz		925487	0					
ANR	927228	PtrMemberAccess	core -> num		925487	0					
ANR	927229	Identifier	core		925487	0					
ANR	927230	Identifier	num		925487	1					
ANR	927231	Identifier	dbz		925487	1					
ANR	927232	CompoundStatement		259:22:6740:6740	925487	1					
ANR	927233	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	645:3:20281:20323	925487	0	True				
ANR	927234	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		925487	0					
ANR	927235	Callee	eprintf		925487	0					
ANR	927236	Identifier	eprintf		925487	0					
ANR	927237	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		925487	1					
ANR	927238	Argument	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	927239	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	927240	SwitchStatement	switch ( input [ 1 ] )		925487	99					
ANR	927241	Condition	input [ 1 ]	647:10:20339:20346	925487	0	True				
ANR	927242	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927243	Identifier	input		925487	0					
ANR	927244	PrimaryExpression	1		925487	1					
ANR	927245	CompoundStatement		262:20:6813:6813	925487	1					
ANR	927246	Label	case '?' :	648:2:20353:20361	925487	0	True				
ANR	927247	Statement	r_cons_printf	649:3:20366:20378	925487	1	True				
ANR	927248	Statement	(	649:17:20380:20380	925487	2	True				
ANR	927249	Statement	"""|Usage: ?v[id][ num]  # Show value\\n"""	649:18:20381:20418	925487	3	True				
ANR	927250	Statement	"""|?vx number  -> show 8 digit padding in hex\\n"""	650:4:20424:20470	925487	4	True				
ANR	927251	Statement	"""|?vi1 200    -> 1 byte size value (char)\\n"""	651:4:20476:20519	925487	5	True				
ANR	927252	Statement	"""|?vi2 0xffff -> 2 byte size value (short)\\n"""	652:4:20525:20569	925487	6	True				
ANR	927253	Statement	"""|?vi4 0xffff -> 4 byte size value (int)\\n"""	653:4:20575:20617	925487	7	True				
ANR	927254	Statement	"""|?vi8 0xffff -> 8 byte size value (st64)\\n"""	654:4:20623:20666	925487	8	True				
ANR	927255	Statement	"""| No argument shows $? value\\n"""	655:4:20672:20703	925487	9	True				
ANR	927256	Statement	"""|?vi will show in decimal instead of hex\\n"""	656:4:20709:20752	925487	10	True				
ANR	927257	Statement	)	656:48:20753:20753	925487	11	True				
ANR	927258	ExpressionStatement		656:49:20754:20754	925487	12	True				
ANR	927259	BreakStatement	break ;	657:3:20759:20764	925487	13	True				
ANR	927260	Label	case '\\0' :	658:2:20768:20777	925487	14	True				
ANR	927261	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , ( st32 ) n )"	659:3:20782:20813	925487	15	True				
ANR	927262	CallExpression	"r_cons_printf ( ""%d\\n"" , ( st32 ) n )"		925487	0					
ANR	927263	Callee	r_cons_printf		925487	0					
ANR	927264	Identifier	r_cons_printf		925487	0					
ANR	927265	ArgumentList	"""%d\\n"""		925487	1					
ANR	927266	Argument	"""%d\\n"""		925487	0					
ANR	927267	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	927268	Argument	( st32 ) n		925487	1					
ANR	927269	CastExpression	( st32 ) n		925487	0					
ANR	927270	CastTarget	st32		925487	0					
ANR	927271	Identifier	n		925487	1					
ANR	927272	BreakStatement	break ;	660:3:20818:20823	925487	16	True				
ANR	927273	Label	case 'x' :	661:2:20827:20835	925487	17	True				
ANR	927274	Statement	r_cons_printf	662:3:20849:20861	925487	18	True				
ANR	927275	Statement	(	662:17:20863:20863	925487	19	True				
ANR	927276	Statement	"""0x%08"""	662:18:20864:20870	925487	20	True				
ANR	927277	Statement	PFMT64x	662:25:20871:20877	925487	21	True				
ANR	927278	Statement	"""\\n"""	662:32:20878:20881	925487	22	True				
ANR	927279	Statement	","	662:36:20882:20882	925487	23	True				
ANR	927280	Statement	n	662:38:20884:20884	925487	24	True				
ANR	927281	Statement	)	662:39:20885:20885	925487	25	True				
ANR	927282	ExpressionStatement		662:40:20886:20886	925487	26	True				
ANR	927283	BreakStatement	break ;	663:3:20891:20896	925487	27	True				
ANR	927284	Label	case 'i' :	664:2:20900:20908	925487	28	True				
ANR	927285	SwitchStatement	switch ( input [ 2 ] )		925487	29					
ANR	927286	Condition	input [ 2 ]	665:11:20930:20937	925487	0	True				
ANR	927287	ArrayIndexing	input [ 2 ]		925487	0					
ANR	927288	Identifier	input		925487	0					
ANR	927289	PrimaryExpression	2		925487	1					
ANR	927290	CompoundStatement		280:21:7404:7404	925487	1					
ANR	927291	Label	case '1' :	666:3:20945:20953	925487	0	True				
ANR	927292	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , ( st8 ) ( n & UT8_MAX ) )"	667:4:20967:21009	925487	1	True				
ANR	927293	CallExpression	"r_cons_printf ( ""%d\\n"" , ( st8 ) ( n & UT8_MAX ) )"		925487	0					
ANR	927294	Callee	r_cons_printf		925487	0					
ANR	927295	Identifier	r_cons_printf		925487	0					
ANR	927296	ArgumentList	"""%d\\n"""		925487	1					
ANR	927297	Argument	"""%d\\n"""		925487	0					
ANR	927298	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	927299	Argument	( st8 ) ( n & UT8_MAX )		925487	1					
ANR	927300	CastExpression	( st8 ) ( n & UT8_MAX )		925487	0					
ANR	927301	CastTarget	st8		925487	0					
ANR	927302	BitAndExpression	n & UT8_MAX		925487	1		&			
ANR	927303	Identifier	n		925487	0					
ANR	927304	Identifier	UT8_MAX		925487	1					
ANR	927305	BreakStatement	break ;	668:4:21015:21020	925487	2	True				
ANR	927306	Label	case '2' :	669:3:21025:21033	925487	3	True				
ANR	927307	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , ( st16 ) ( n & UT16_MAX ) )"	670:4:21047:21091	925487	4	True				
ANR	927308	CallExpression	"r_cons_printf ( ""%d\\n"" , ( st16 ) ( n & UT16_MAX ) )"		925487	0					
ANR	927309	Callee	r_cons_printf		925487	0					
ANR	927310	Identifier	r_cons_printf		925487	0					
ANR	927311	ArgumentList	"""%d\\n"""		925487	1					
ANR	927312	Argument	"""%d\\n"""		925487	0					
ANR	927313	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	927314	Argument	( st16 ) ( n & UT16_MAX )		925487	1					
ANR	927315	CastExpression	( st16 ) ( n & UT16_MAX )		925487	0					
ANR	927316	CastTarget	st16		925487	0					
ANR	927317	BitAndExpression	n & UT16_MAX		925487	1		&			
ANR	927318	Identifier	n		925487	0					
ANR	927319	Identifier	UT16_MAX		925487	1					
ANR	927320	BreakStatement	break ;	671:4:21097:21102	925487	5	True				
ANR	927321	Label	case '4' :	672:3:21107:21115	925487	6	True				
ANR	927322	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , ( st32 ) ( n & UT32_MAX ) )"	673:4:21130:21174	925487	7	True				
ANR	927323	CallExpression	"r_cons_printf ( ""%d\\n"" , ( st32 ) ( n & UT32_MAX ) )"		925487	0					
ANR	927324	Callee	r_cons_printf		925487	0					
ANR	927325	Identifier	r_cons_printf		925487	0					
ANR	927326	ArgumentList	"""%d\\n"""		925487	1					
ANR	927327	Argument	"""%d\\n"""		925487	0					
ANR	927328	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	927329	Argument	( st32 ) ( n & UT32_MAX )		925487	1					
ANR	927330	CastExpression	( st32 ) ( n & UT32_MAX )		925487	0					
ANR	927331	CastTarget	st32		925487	0					
ANR	927332	BitAndExpression	n & UT32_MAX		925487	1		&			
ANR	927333	Identifier	n		925487	0					
ANR	927334	Identifier	UT32_MAX		925487	1					
ANR	927335	BreakStatement	break ;	674:4:21180:21185	925487	8	True				
ANR	927336	Label	case '8' :	675:3:21190:21198	925487	9	True				
ANR	927337	Statement	r_cons_printf	676:4:21213:21225	925487	10	True				
ANR	927338	Statement	(	676:18:21227:21227	925487	11	True				
ANR	927339	Statement	"""%"""	676:19:21228:21230	925487	12	True				
ANR	927340	Statement	PFMT64d	676:22:21231:21237	925487	13	True				
ANR	927341	Statement	"""\\n"""	676:29:21238:21241	925487	14	True				
ANR	927342	Statement	","	676:33:21242:21242	925487	15	True				
ANR	927343	Statement	(	676:35:21244:21244	925487	16	True				
ANR	927344	Statement	st64	676:36:21245:21248	925487	17	True				
ANR	927345	Statement	)	676:40:21249:21249	925487	18	True				
ANR	927346	Statement	(	676:41:21250:21250	925487	19	True				
ANR	927347	Statement	n	676:42:21251:21251	925487	20	True				
ANR	927348	Statement	&	676:44:21253:21253	925487	21	True				
ANR	927349	Statement	UT64_MAX	676:46:21255:21262	925487	22	True				
ANR	927350	Statement	)	676:54:21263:21263	925487	23	True				
ANR	927351	Statement	)	676:55:21264:21264	925487	24	True				
ANR	927352	ExpressionStatement		676:56:21265:21265	925487	25	True				
ANR	927353	BreakStatement	break ;	677:4:21271:21276	925487	26	True				
ANR	927354	Label	default :	678:3:21281:21288	925487	27	True				
ANR	927355	Identifier	default		925487	0					
ANR	927356	Statement	r_cons_printf	679:4:21294:21306	925487	28	True				
ANR	927357	Statement	(	679:18:21308:21308	925487	29	True				
ANR	927358	Statement	"""%"""	679:19:21309:21311	925487	30	True				
ANR	927359	Statement	PFMT64d	679:22:21312:21318	925487	31	True				
ANR	927360	Statement	"""\\n"""	679:29:21319:21322	925487	32	True				
ANR	927361	Statement	","	679:33:21323:21323	925487	33	True				
ANR	927362	Statement	n	679:35:21325:21325	925487	34	True				
ANR	927363	Statement	)	679:36:21326:21326	925487	35	True				
ANR	927364	ExpressionStatement		679:37:21327:21327	925487	36	True				
ANR	927365	BreakStatement	break ;	680:4:21333:21338	925487	37	True				
ANR	927366	BreakStatement	break ;	682:3:21348:21353	925487	30	True				
ANR	927367	Label	case 'd' :	683:2:21357:21365	925487	31	True				
ANR	927368	Statement	r_cons_printf	684:3:21370:21382	925487	32	True				
ANR	927369	Statement	(	684:17:21384:21384	925487	33	True				
ANR	927370	Statement	"""%"""	684:18:21385:21387	925487	34	True				
ANR	927371	Statement	PFMT64d	684:21:21388:21394	925487	35	True				
ANR	927372	Statement	"""\\n"""	684:28:21395:21398	925487	36	True				
ANR	927373	Statement	","	684:32:21399:21399	925487	37	True				
ANR	927374	Statement	n	684:34:21401:21401	925487	38	True				
ANR	927375	Statement	)	684:35:21402:21402	925487	39	True				
ANR	927376	ExpressionStatement		684:36:21403:21403	925487	40	True				
ANR	927377	BreakStatement	break ;	685:3:21408:21413	925487	41	True				
ANR	927378	Label	default :	686:2:21417:21424	925487	42	True				
ANR	927379	Identifier	default		925487	0					
ANR	927380	Statement	r_cons_printf	687:3:21429:21441	925487	43	True				
ANR	927381	Statement	(	687:17:21443:21443	925487	44	True				
ANR	927382	Statement	"""0x%"""	687:18:21444:21448	925487	45	True				
ANR	927383	Statement	PFMT64x	687:23:21449:21455	925487	46	True				
ANR	927384	Statement	"""\\n"""	687:30:21456:21459	925487	47	True				
ANR	927385	Statement	","	687:34:21460:21460	925487	48	True				
ANR	927386	Statement	n	687:36:21462:21462	925487	49	True				
ANR	927387	Statement	)	687:37:21463:21463	925487	50	True				
ANR	927388	ExpressionStatement		687:38:21464:21464	925487	51	True				
ANR	927389	ExpressionStatement	core -> num -> value = n	689:2:21472:21492	925487	100	True				
ANR	927390	AssignmentExpression	core -> num -> value = n		925487	0		=			
ANR	927391	PtrMemberAccess	core -> num -> value		925487	0					
ANR	927392	PtrMemberAccess	core -> num		925487	0					
ANR	927393	Identifier	core		925487	0					
ANR	927394	Identifier	num		925487	1					
ANR	927395	Identifier	value		925487	1					
ANR	927396	Identifier	n		925487	1					
ANR	927397	BreakStatement	break ;	690:2:21509:21514	925487	101	True				
ANR	927398	Label	case '=' :	691:1:21517:21525	925487	102	True				
ANR	927399	IfStatement	if ( input [ 1 ] )		925487	103					
ANR	927400	Condition	input [ 1 ]	692:6:21556:21563	925487	0	True				
ANR	927401	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927402	Identifier	input		925487	0					
ANR	927403	PrimaryExpression	1		925487	1					
ANR	927404	CompoundStatement		307:16:8030:8030	925487	1					
ANR	927405	ExpressionStatement	"r_num_math ( core -> num , input + 1 )"	693:3:21571:21602	925487	0	True				
ANR	927406	CallExpression	"r_num_math ( core -> num , input + 1 )"		925487	0					
ANR	927407	Callee	r_num_math		925487	0					
ANR	927408	Identifier	r_num_math		925487	0					
ANR	927409	ArgumentList	core -> num		925487	1					
ANR	927410	Argument	core -> num		925487	0					
ANR	927411	PtrMemberAccess	core -> num		925487	0					
ANR	927412	Identifier	core		925487	0					
ANR	927413	Identifier	num		925487	1					
ANR	927414	Argument	input + 1		925487	1					
ANR	927415	AdditiveExpression	input + 1		925487	0		+			
ANR	927416	Identifier	input		925487	0					
ANR	927417	PrimaryExpression	1		925487	1					
ANR	927418	ElseStatement	else		925487	0					
ANR	927419	CompoundStatement		309:9:8077:8077	925487	0					
ANR	927420	Statement	r_cons_printf	695:3:21618:21630	925487	0	True				
ANR	927421	Statement	(	695:17:21632:21632	925487	1	True				
ANR	927422	Statement	"""0x%"""	695:18:21633:21637	925487	2	True				
ANR	927423	Statement	PFMT64x	695:23:21638:21644	925487	3	True				
ANR	927424	Statement	"""\\n"""	695:30:21645:21648	925487	4	True				
ANR	927425	Statement	","	695:34:21649:21649	925487	5	True				
ANR	927426	Statement	core	695:36:21651:21654	925487	6	True				
ANR	927427	Statement	->	695:40:21655:21656	925487	7	True				
ANR	927428	Statement	num	695:42:21657:21659	925487	8	True				
ANR	927429	Statement	->	695:45:21660:21661	925487	9	True				
ANR	927430	Statement	value	695:47:21662:21666	925487	10	True				
ANR	927431	Statement	)	695:52:21667:21667	925487	11	True				
ANR	927432	ExpressionStatement		695:53:21668:21668	925487	12	True				
ANR	927433	BreakStatement	break ;	697:2:21676:21681	925487	104	True				
ANR	927434	Label	case '+' :	698:1:21684:21692	925487	105	True				
ANR	927435	IfStatement	if ( input [ 1 ] )		925487	106					
ANR	927436	Condition	input [ 1 ]	699:6:21708:21715	925487	0	True				
ANR	927437	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927438	Identifier	input		925487	0					
ANR	927439	PrimaryExpression	1		925487	1					
ANR	927440	CompoundStatement		315:3:8187:8218	925487	1					
ANR	927441	IdentifierDeclStatement	st64 n = ( st64 ) core -> num -> value ;	700:3:21723:21754	925487	0	True				
ANR	927442	IdentifierDecl	n = ( st64 ) core -> num -> value		925487	0					
ANR	927443	IdentifierDeclType	st64		925487	0					
ANR	927444	Identifier	n		925487	1					
ANR	927445	AssignmentExpression	n = ( st64 ) core -> num -> value		925487	2		=			
ANR	927446	Identifier	n		925487	0					
ANR	927447	CastExpression	( st64 ) core -> num -> value		925487	1					
ANR	927448	CastTarget	st64		925487	0					
ANR	927449	PtrMemberAccess	core -> num -> value		925487	1					
ANR	927450	PtrMemberAccess	core -> num		925487	0					
ANR	927451	Identifier	core		925487	0					
ANR	927452	Identifier	num		925487	1					
ANR	927453	Identifier	value		925487	1					
ANR	927454	IfStatement	if ( n > 0 )		925487	1					
ANR	927455	Condition	n > 0	701:7:21763:21767	925487	0	True				
ANR	927456	RelationalExpression	n > 0		925487	0		>			
ANR	927457	Identifier	n		925487	0					
ANR	927458	PrimaryExpression	0		925487	1					
ANR	927459	CompoundStatement		316:14:8234:8234	925487	1					
ANR	927460	ExpressionStatement	"r_core_cmd ( core , input + 1 , 0 )"	702:4:21776:21807	925487	0	True				
ANR	927461	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	0					
ANR	927462	Callee	r_core_cmd		925487	0					
ANR	927463	Identifier	r_core_cmd		925487	0					
ANR	927464	ArgumentList	core		925487	1					
ANR	927465	Argument	core		925487	0					
ANR	927466	Identifier	core		925487	0					
ANR	927467	Argument	input + 1		925487	1					
ANR	927468	AdditiveExpression	input + 1		925487	0		+			
ANR	927469	Identifier	input		925487	0					
ANR	927470	PrimaryExpression	1		925487	1					
ANR	927471	Argument	0		925487	2					
ANR	927472	PrimaryExpression	0		925487	0					
ANR	927473	ElseStatement	else		925487	0					
ANR	927474	CompoundStatement		319:9:8287:8287	925487	0					
ANR	927475	Statement	r_cons_printf	705:3:21828:21840	925487	0	True				
ANR	927476	Statement	(	705:17:21842:21842	925487	1	True				
ANR	927477	Statement	"""0x%"""	705:18:21843:21847	925487	2	True				
ANR	927478	Statement	PFMT64x	705:23:21848:21854	925487	3	True				
ANR	927479	Statement	"""\\n"""	705:30:21855:21858	925487	4	True				
ANR	927480	Statement	","	705:34:21859:21859	925487	5	True				
ANR	927481	Statement	core	705:36:21861:21864	925487	6	True				
ANR	927482	Statement	->	705:40:21865:21866	925487	7	True				
ANR	927483	Statement	num	705:42:21867:21869	925487	8	True				
ANR	927484	Statement	->	705:45:21870:21871	925487	9	True				
ANR	927485	Statement	value	705:47:21872:21876	925487	10	True				
ANR	927486	Statement	)	705:52:21877:21877	925487	11	True				
ANR	927487	ExpressionStatement		705:53:21878:21878	925487	12	True				
ANR	927488	BreakStatement	break ;	707:2:21886:21891	925487	107	True				
ANR	927489	Label	case '-' :	708:1:21894:21902	925487	108	True				
ANR	927490	IfStatement	if ( input [ 1 ] )		925487	109					
ANR	927491	Condition	input [ 1 ]	709:6:21918:21925	925487	0	True				
ANR	927492	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927493	Identifier	input		925487	0					
ANR	927494	PrimaryExpression	1		925487	1					
ANR	927495	CompoundStatement		325:3:8397:8428	925487	1					
ANR	927496	IdentifierDeclStatement	st64 n = ( st64 ) core -> num -> value ;	710:3:21933:21964	925487	0	True				
ANR	927497	IdentifierDecl	n = ( st64 ) core -> num -> value		925487	0					
ANR	927498	IdentifierDeclType	st64		925487	0					
ANR	927499	Identifier	n		925487	1					
ANR	927500	AssignmentExpression	n = ( st64 ) core -> num -> value		925487	2		=			
ANR	927501	Identifier	n		925487	0					
ANR	927502	CastExpression	( st64 ) core -> num -> value		925487	1					
ANR	927503	CastTarget	st64		925487	0					
ANR	927504	PtrMemberAccess	core -> num -> value		925487	1					
ANR	927505	PtrMemberAccess	core -> num		925487	0					
ANR	927506	Identifier	core		925487	0					
ANR	927507	Identifier	num		925487	1					
ANR	927508	Identifier	value		925487	1					
ANR	927509	IfStatement	if ( n < 0 )		925487	1					
ANR	927510	Condition	n < 0	711:7:21973:21977	925487	0	True				
ANR	927511	RelationalExpression	n < 0		925487	0		<			
ANR	927512	Identifier	n		925487	0					
ANR	927513	PrimaryExpression	0		925487	1					
ANR	927514	CompoundStatement		326:14:8444:8444	925487	1					
ANR	927515	ExpressionStatement	"r_core_cmd ( core , input + 1 , 0 )"	712:4:21986:22017	925487	0	True				
ANR	927516	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	0					
ANR	927517	Callee	r_core_cmd		925487	0					
ANR	927518	Identifier	r_core_cmd		925487	0					
ANR	927519	ArgumentList	core		925487	1					
ANR	927520	Argument	core		925487	0					
ANR	927521	Identifier	core		925487	0					
ANR	927522	Argument	input + 1		925487	1					
ANR	927523	AdditiveExpression	input + 1		925487	0		+			
ANR	927524	Identifier	input		925487	0					
ANR	927525	PrimaryExpression	1		925487	1					
ANR	927526	Argument	0		925487	2					
ANR	927527	PrimaryExpression	0		925487	0					
ANR	927528	ElseStatement	else		925487	0					
ANR	927529	CompoundStatement		329:9:8497:8497	925487	0					
ANR	927530	Statement	r_cons_printf	715:3:22038:22050	925487	0	True				
ANR	927531	Statement	(	715:17:22052:22052	925487	1	True				
ANR	927532	Statement	"""0x%"""	715:18:22053:22057	925487	2	True				
ANR	927533	Statement	PFMT64x	715:23:22058:22064	925487	3	True				
ANR	927534	Statement	"""\\n"""	715:30:22065:22068	925487	4	True				
ANR	927535	Statement	","	715:34:22069:22069	925487	5	True				
ANR	927536	Statement	core	715:36:22071:22074	925487	6	True				
ANR	927537	Statement	->	715:40:22075:22076	925487	7	True				
ANR	927538	Statement	num	715:42:22077:22079	925487	8	True				
ANR	927539	Statement	->	715:45:22080:22081	925487	9	True				
ANR	927540	Statement	value	715:47:22082:22086	925487	10	True				
ANR	927541	Statement	)	715:52:22087:22087	925487	11	True				
ANR	927542	ExpressionStatement		715:53:22088:22088	925487	12	True				
ANR	927543	BreakStatement	break ;	717:2:22096:22101	925487	110	True				
ANR	927544	Label	case '!' :	718:1:22104:22112	925487	111	True				
ANR	927545	IfStatement	if ( input [ 1 ] )		925487	112					
ANR	927546	Condition	input [ 1 ]	719:6:22128:22135	925487	0	True				
ANR	927547	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927548	Identifier	input		925487	0					
ANR	927549	PrimaryExpression	1		925487	1					
ANR	927550	CompoundStatement		334:16:8602:8602	925487	1					
ANR	927551	IfStatement	if ( ! core -> num -> value )		925487	0					
ANR	927552	Condition	! core -> num -> value	720:7:22147:22163	925487	0	True				
ANR	927553	UnaryOperationExpression	! core -> num -> value		925487	0					
ANR	927554	UnaryOperator	!		925487	0					
ANR	927555	PtrMemberAccess	core -> num -> value		925487	1					
ANR	927556	PtrMemberAccess	core -> num		925487	0					
ANR	927557	Identifier	core		925487	0					
ANR	927558	Identifier	num		925487	1					
ANR	927559	Identifier	value		925487	1					
ANR	927560	CompoundStatement		335:26:8630:8630	925487	1					
ANR	927561	IfStatement	if ( input [ 1 ] == '?' )		925487	0					
ANR	927562	Condition	input [ 1 ] == '?'	721:8:22176:22190	925487	0	True				
ANR	927563	EqualityExpression	input [ 1 ] == '?'		925487	0		==			
ANR	927564	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927565	Identifier	input		925487	0					
ANR	927566	PrimaryExpression	1		925487	1					
ANR	927567	PrimaryExpression	'?'		925487	1					
ANR	927568	CompoundStatement		336:25:8657:8657	925487	1					
ANR	927569	ExpressionStatement	cmd_help_exclamation ( core )	722:5:22200:22227	925487	0	True				
ANR	927570	CallExpression	cmd_help_exclamation ( core )		925487	0					
ANR	927571	Callee	cmd_help_exclamation		925487	0					
ANR	927572	Identifier	cmd_help_exclamation		925487	0					
ANR	927573	ArgumentList	core		925487	1					
ANR	927574	Argument	core		925487	0					
ANR	927575	Identifier	core		925487	0					
ANR	927576	ReturnStatement	return 0 ;	723:5:22234:22242	925487	1	True				
ANR	927577	PrimaryExpression	0		925487	0					
ANR	927578	ElseStatement	else		925487	0					
ANR	927579	CompoundStatement		339:11:8719:8719	925487	0					
ANR	927580	ReturnStatement	"return core -> num -> value = r_core_cmd ( core , input + 1 , 0 ) ;"	725:5:22262:22317	925487	0	True				
ANR	927581	AssignmentExpression	"core -> num -> value = r_core_cmd ( core , input + 1 , 0 )"		925487	0		=			
ANR	927582	PtrMemberAccess	core -> num -> value		925487	0					
ANR	927583	PtrMemberAccess	core -> num		925487	0					
ANR	927584	Identifier	core		925487	0					
ANR	927585	Identifier	num		925487	1					
ANR	927586	Identifier	value		925487	1					
ANR	927587	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	1					
ANR	927588	Callee	r_core_cmd		925487	0					
ANR	927589	Identifier	r_core_cmd		925487	0					
ANR	927590	ArgumentList	core		925487	1					
ANR	927591	Argument	core		925487	0					
ANR	927592	Identifier	core		925487	0					
ANR	927593	Argument	input + 1		925487	1					
ANR	927594	AdditiveExpression	input + 1		925487	0		+			
ANR	927595	Identifier	input		925487	0					
ANR	927596	PrimaryExpression	1		925487	1					
ANR	927597	Argument	0		925487	2					
ANR	927598	PrimaryExpression	0		925487	0					
ANR	927599	ElseStatement	else		925487	0					
ANR	927600	CompoundStatement		343:9:8803:8803	925487	0					
ANR	927601	Statement	r_cons_printf	729:3:22344:22356	925487	0	True				
ANR	927602	Statement	(	729:17:22358:22358	925487	1	True				
ANR	927603	Statement	"""0x%"""	729:18:22359:22363	925487	2	True				
ANR	927604	Statement	PFMT64x	729:23:22364:22370	925487	3	True				
ANR	927605	Statement	"""\\n"""	729:30:22371:22374	925487	4	True				
ANR	927606	Statement	","	729:34:22375:22375	925487	5	True				
ANR	927607	Statement	core	729:36:22377:22380	925487	6	True				
ANR	927608	Statement	->	729:40:22381:22382	925487	7	True				
ANR	927609	Statement	num	729:42:22383:22385	925487	8	True				
ANR	927610	Statement	->	729:45:22386:22387	925487	9	True				
ANR	927611	Statement	value	729:47:22388:22392	925487	10	True				
ANR	927612	Statement	)	729:52:22393:22393	925487	11	True				
ANR	927613	ExpressionStatement		729:53:22394:22394	925487	12	True				
ANR	927614	BreakStatement	break ;	731:2:22402:22407	925487	113	True				
ANR	927615	Label	case '@' :	732:1:22410:22418	925487	114	True				
ANR	927616	IfStatement	if ( input [ 1 ] == '@' )		925487	115					
ANR	927617	Condition	input [ 1 ] == '@'	733:6:22434:22448	925487	0	True				
ANR	927618	EqualityExpression	input [ 1 ] == '@'		925487	0		==			
ANR	927619	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927620	Identifier	input		925487	0					
ANR	927621	PrimaryExpression	1		925487	1					
ANR	927622	PrimaryExpression	'@'		925487	1					
ANR	927623	CompoundStatement		348:23:8915:8915	925487	1					
ANR	927624	IfStatement	if ( input [ 2 ] == '@' )		925487	0					
ANR	927625	Condition	input [ 2 ] == '@'	734:7:22460:22474	925487	0	True				
ANR	927626	EqualityExpression	input [ 2 ] == '@'		925487	0		==			
ANR	927627	ArrayIndexing	input [ 2 ]		925487	0					
ANR	927628	Identifier	input		925487	0					
ANR	927629	PrimaryExpression	2		925487	1					
ANR	927630	PrimaryExpression	'@'		925487	1					
ANR	927631	CompoundStatement		349:24:8941:8941	925487	1					
ANR	927632	ExpressionStatement	"r_core_cmd_help ( core , help_msg_at_at_at )"	735:4:22483:22524	925487	0	True				
ANR	927633	CallExpression	"r_core_cmd_help ( core , help_msg_at_at_at )"		925487	0					
ANR	927634	Callee	r_core_cmd_help		925487	0					
ANR	927635	Identifier	r_core_cmd_help		925487	0					
ANR	927636	ArgumentList	core		925487	1					
ANR	927637	Argument	core		925487	0					
ANR	927638	Identifier	core		925487	0					
ANR	927639	Argument	help_msg_at_at_at		925487	1					
ANR	927640	Identifier	help_msg_at_at_at		925487	0					
ANR	927641	ElseStatement	else		925487	0					
ANR	927642	CompoundStatement		351:10:9000:9000	925487	0					
ANR	927643	ExpressionStatement	"r_core_cmd_help ( core , help_msg_at_at )"	737:4:22542:22580	925487	0	True				
ANR	927644	CallExpression	"r_core_cmd_help ( core , help_msg_at_at )"		925487	0					
ANR	927645	Callee	r_core_cmd_help		925487	0					
ANR	927646	Identifier	r_core_cmd_help		925487	0					
ANR	927647	ArgumentList	core		925487	1					
ANR	927648	Argument	core		925487	0					
ANR	927649	Identifier	core		925487	0					
ANR	927650	Argument	help_msg_at_at		925487	1					
ANR	927651	Identifier	help_msg_at_at		925487	0					
ANR	927652	ElseStatement	else		925487	0					
ANR	927653	CompoundStatement		354:9:9060:9060	925487	0					
ANR	927654	ExpressionStatement	"r_core_cmd_help ( core , help_msg_at )"	740:3:22601:22636	925487	0	True				
ANR	927655	CallExpression	"r_core_cmd_help ( core , help_msg_at )"		925487	0					
ANR	927656	Callee	r_core_cmd_help		925487	0					
ANR	927657	Identifier	r_core_cmd_help		925487	0					
ANR	927658	ArgumentList	core		925487	1					
ANR	927659	Argument	core		925487	0					
ANR	927660	Identifier	core		925487	0					
ANR	927661	Argument	help_msg_at		925487	1					
ANR	927662	Identifier	help_msg_at		925487	0					
ANR	927663	BreakStatement	break ;	742:2:22644:22649	925487	116	True				
ANR	927664	Label	case '&' :	743:1:22652:22660	925487	117	True				
ANR	927665	ExpressionStatement	helpCmdTasks ( core )	744:2:22672:22691	925487	118	True				
ANR	927666	CallExpression	helpCmdTasks ( core )		925487	0					
ANR	927667	Callee	helpCmdTasks		925487	0					
ANR	927668	Identifier	helpCmdTasks		925487	0					
ANR	927669	ArgumentList	core		925487	1					
ANR	927670	Argument	core		925487	0					
ANR	927671	Identifier	core		925487	0					
ANR	927672	BreakStatement	break ;	745:2:22695:22700	925487	119	True				
ANR	927673	Label	case '%' :	746:1:22703:22711	925487	120	True				
ANR	927674	IfStatement	if ( input [ 1 ] == '?' )		925487	121					
ANR	927675	Condition	input [ 1 ] == '?'	747:6:22727:22741	925487	0	True				
ANR	927676	EqualityExpression	input [ 1 ] == '?'		925487	0		==			
ANR	927677	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927678	Identifier	input		925487	0					
ANR	927679	PrimaryExpression	1		925487	1					
ANR	927680	PrimaryExpression	'?'		925487	1					
ANR	927681	CompoundStatement		362:23:9208:9208	925487	1					
ANR	927682	ExpressionStatement	cmd_help_percent ( core )	748:3:22749:22772	925487	0	True				
ANR	927683	CallExpression	cmd_help_percent ( core )		925487	0					
ANR	927684	Callee	cmd_help_percent		925487	0					
ANR	927685	Identifier	cmd_help_percent		925487	0					
ANR	927686	ArgumentList	core		925487	1					
ANR	927687	Argument	core		925487	0					
ANR	927688	Identifier	core		925487	0					
ANR	927689	BreakStatement	break ;	750:2:22780:22785	925487	122	True				
ANR	927690	Label	case '$' :	751:1:22788:22796	925487	123	True				
ANR	927691	IfStatement	if ( input [ 1 ] == '?' )		925487	124					
ANR	927692	Condition	input [ 1 ] == '?'	752:6:22812:22826	925487	0	True				
ANR	927693	EqualityExpression	input [ 1 ] == '?'		925487	0		==			
ANR	927694	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927695	Identifier	input		925487	0					
ANR	927696	PrimaryExpression	1		925487	1					
ANR	927697	PrimaryExpression	'?'		925487	1					
ANR	927698	CompoundStatement		367:23:9293:9293	925487	1					
ANR	927699	ExpressionStatement	"r_core_cmd_help ( core , help_msg_question_v )"	753:3:22834:22877	925487	0	True				
ANR	927700	CallExpression	"r_core_cmd_help ( core , help_msg_question_v )"		925487	0					
ANR	927701	Callee	r_core_cmd_help		925487	0					
ANR	927702	Identifier	r_core_cmd_help		925487	0					
ANR	927703	ArgumentList	core		925487	1					
ANR	927704	Argument	core		925487	0					
ANR	927705	Identifier	core		925487	0					
ANR	927706	Argument	help_msg_question_v		925487	1					
ANR	927707	Identifier	help_msg_question_v		925487	0					
ANR	927708	ElseStatement	else		925487	0					
ANR	927709	CompoundStatement		376:3:9637:9706	925487	0					
ANR	927710	IdentifierDeclStatement	int i = 0 ;	755:3:22893:22902	925487	0	True				
ANR	927711	IdentifierDecl	i = 0		925487	0					
ANR	927712	IdentifierDeclType	int		925487	0					
ANR	927713	Identifier	i		925487	1					
ANR	927714	AssignmentExpression	i = 0		925487	2		=			
ANR	927715	Identifier	i		925487	0					
ANR	927716	PrimaryExpression	0		925487	1					
ANR	927717	IdentifierDeclStatement	"const char * vars [ ] = { ""$$"" , ""$$$"" , ""$?"" , ""$b"" , ""$B"" , ""$F"" , ""$Fj"" , ""$Ff"" , ""$FB"" , ""$Fb"" , ""$Fs"" , ""$FE"" , ""$FS"" , ""$FI"" , ""$c"" , ""$r"" , ""$D"" , ""$DD"" , ""$e"" , ""$f"" , ""$j"" , ""$Ja"" , ""$l"" , ""$m"" , ""$M"" , ""$MM"" , ""$o"" , ""$p"" , ""$P"" , ""$s"" , ""$S"" , ""$SS"" , ""$v"" , ""$w"" , NULL } ;"	756:3:22907:23168	925487	1	True				
ANR	927718	IdentifierDecl	"* vars [ ] = { ""$$"" , ""$$$"" , ""$?"" , ""$b"" , ""$B"" , ""$F"" , ""$Fj"" , ""$Ff"" , ""$FB"" , ""$Fb"" , ""$Fs"" , ""$FE"" , ""$FS"" , ""$FI"" , ""$c"" , ""$r"" , ""$D"" , ""$DD"" , ""$e"" , ""$f"" , ""$j"" , ""$Ja"" , ""$l"" , ""$m"" , ""$M"" , ""$MM"" , ""$o"" , ""$p"" , ""$P"" , ""$s"" , ""$S"" , ""$SS"" , ""$v"" , ""$w"" , NULL }"		925487	0					
ANR	927719	IdentifierDeclType	const char * [ ]		925487	0					
ANR	927720	Identifier	vars		925487	1					
ANR	927721	AssignmentExpression	"* vars [ ] = { ""$$"" , ""$$$"" , ""$?"" , ""$b"" , ""$B"" , ""$F"" , ""$Fj"" , ""$Ff"" , ""$FB"" , ""$Fb"" , ""$Fs"" , ""$FE"" , ""$FS"" , ""$FI"" , ""$c"" , ""$r"" , ""$D"" , ""$DD"" , ""$e"" , ""$f"" , ""$j"" , ""$Ja"" , ""$l"" , ""$m"" , ""$M"" , ""$MM"" , ""$o"" , ""$p"" , ""$P"" , ""$s"" , ""$S"" , ""$SS"" , ""$v"" , ""$w"" , NULL }"		925487	2		=			
ANR	927722	Identifier	vars		925487	0					
ANR	927723	InitializerList	"""$$"""		925487	1					
ANR	927724	PrimaryExpression	"""$$"""		925487	0					
ANR	927725	PrimaryExpression	"""$$$"""		925487	1					
ANR	927726	PrimaryExpression	"""$?"""		925487	2					
ANR	927727	PrimaryExpression	"""$b"""		925487	3					
ANR	927728	PrimaryExpression	"""$B"""		925487	4					
ANR	927729	PrimaryExpression	"""$F"""		925487	5					
ANR	927730	PrimaryExpression	"""$Fj"""		925487	6					
ANR	927731	PrimaryExpression	"""$Ff"""		925487	7					
ANR	927732	PrimaryExpression	"""$FB"""		925487	8					
ANR	927733	PrimaryExpression	"""$Fb"""		925487	9					
ANR	927734	PrimaryExpression	"""$Fs"""		925487	10					
ANR	927735	PrimaryExpression	"""$FE"""		925487	11					
ANR	927736	PrimaryExpression	"""$FS"""		925487	12					
ANR	927737	PrimaryExpression	"""$FI"""		925487	13					
ANR	927738	PrimaryExpression	"""$c"""		925487	14					
ANR	927739	PrimaryExpression	"""$r"""		925487	15					
ANR	927740	PrimaryExpression	"""$D"""		925487	16					
ANR	927741	PrimaryExpression	"""$DD"""		925487	17					
ANR	927742	PrimaryExpression	"""$e"""		925487	18					
ANR	927743	PrimaryExpression	"""$f"""		925487	19					
ANR	927744	PrimaryExpression	"""$j"""		925487	20					
ANR	927745	PrimaryExpression	"""$Ja"""		925487	21					
ANR	927746	PrimaryExpression	"""$l"""		925487	22					
ANR	927747	PrimaryExpression	"""$m"""		925487	23					
ANR	927748	PrimaryExpression	"""$M"""		925487	24					
ANR	927749	PrimaryExpression	"""$MM"""		925487	25					
ANR	927750	PrimaryExpression	"""$o"""		925487	26					
ANR	927751	PrimaryExpression	"""$p"""		925487	27					
ANR	927752	PrimaryExpression	"""$P"""		925487	28					
ANR	927753	PrimaryExpression	"""$s"""		925487	29					
ANR	927754	PrimaryExpression	"""$S"""		925487	30					
ANR	927755	PrimaryExpression	"""$SS"""		925487	31					
ANR	927756	PrimaryExpression	"""$v"""		925487	32					
ANR	927757	PrimaryExpression	"""$w"""		925487	33					
ANR	927758	Identifier	NULL		925487	34					
ANR	927759	IdentifierDeclStatement	"const bool wideOffsets = r_config_get_i ( core -> config , ""scr.wideoff"" ) ;"	761:3:23173:23242	925487	2	True				
ANR	927760	IdentifierDecl	"wideOffsets = r_config_get_i ( core -> config , ""scr.wideoff"" )"		925487	0					
ANR	927761	IdentifierDeclType	const bool		925487	0					
ANR	927762	Identifier	wideOffsets		925487	1					
ANR	927763	AssignmentExpression	"wideOffsets = r_config_get_i ( core -> config , ""scr.wideoff"" )"		925487	2		=			
ANR	927764	Identifier	wideOffsets		925487	0					
ANR	927765	CallExpression	"r_config_get_i ( core -> config , ""scr.wideoff"" )"		925487	1					
ANR	927766	Callee	r_config_get_i		925487	0					
ANR	927767	Identifier	r_config_get_i		925487	0					
ANR	927768	ArgumentList	core -> config		925487	1					
ANR	927769	Argument	core -> config		925487	0					
ANR	927770	PtrMemberAccess	core -> config		925487	0					
ANR	927771	Identifier	core		925487	0					
ANR	927772	Identifier	config		925487	1					
ANR	927773	Argument	"""scr.wideoff"""		925487	1					
ANR	927774	PrimaryExpression	"""scr.wideoff"""		925487	0					
ANR	927775	WhileStatement	while ( vars [ i ] )		925487	3					
ANR	927776	Condition	vars [ i ]	762:10:23254:23260	925487	0	True				
ANR	927777	ArrayIndexing	vars [ i ]		925487	0					
ANR	927778	Identifier	vars		925487	0					
ANR	927779	Identifier	i		925487	1					
ANR	927780	CompoundStatement		378:4:9733:9788	925487	1					
ANR	927781	IdentifierDeclStatement	"const char * pad = r_str_pad ( ' ' , 6 - strlen ( vars [ i ] ) ) ;"	763:4:23269:23324	925487	0	True				
ANR	927782	IdentifierDecl	"* pad = r_str_pad ( ' ' , 6 - strlen ( vars [ i ] ) )"		925487	0					
ANR	927783	IdentifierDeclType	const char *		925487	0					
ANR	927784	Identifier	pad		925487	1					
ANR	927785	AssignmentExpression	"* pad = r_str_pad ( ' ' , 6 - strlen ( vars [ i ] ) )"		925487	2		=			
ANR	927786	Identifier	pad		925487	0					
ANR	927787	CallExpression	"r_str_pad ( ' ' , 6 - strlen ( vars [ i ] ) )"		925487	1					
ANR	927788	Callee	r_str_pad		925487	0					
ANR	927789	Identifier	r_str_pad		925487	0					
ANR	927790	ArgumentList	' '		925487	1					
ANR	927791	Argument	' '		925487	0					
ANR	927792	PrimaryExpression	' '		925487	0					
ANR	927793	Argument	6 - strlen ( vars [ i ] )		925487	1					
ANR	927794	AdditiveExpression	6 - strlen ( vars [ i ] )		925487	0		-			
ANR	927795	PrimaryExpression	6		925487	0					
ANR	927796	CallExpression	strlen ( vars [ i ] )		925487	1					
ANR	927797	Callee	strlen		925487	0					
ANR	927798	Identifier	strlen		925487	0					
ANR	927799	ArgumentList	vars [ i ]		925487	1					
ANR	927800	Argument	vars [ i ]		925487	0					
ANR	927801	ArrayIndexing	vars [ i ]		925487	0					
ANR	927802	Identifier	vars		925487	0					
ANR	927803	Identifier	i		925487	1					
ANR	927804	IfStatement	if ( wideOffsets )		925487	1					
ANR	927805	Condition	wideOffsets	764:8:23334:23344	925487	0	True				
ANR	927806	Identifier	wideOffsets		925487	0					
ANR	927807	CompoundStatement		379:21:9811:9811	925487	1					
ANR	927808	Statement	eprintf	765:5:23354:23360	925487	0	True				
ANR	927809	Statement	(	765:13:23362:23362	925487	1	True				
ANR	927810	Statement	"""%s %s 0x%016"""	765:14:23363:23376	925487	2	True				
ANR	927811	Statement	PFMT64x	765:28:23377:23383	925487	3	True				
ANR	927812	Statement	"""\\n"""	765:35:23384:23387	925487	4	True				
ANR	927813	Statement	","	765:39:23388:23388	925487	5	True				
ANR	927814	Statement	vars	765:41:23390:23393	925487	6	True				
ANR	927815	Statement	[	765:45:23394:23394	925487	7	True				
ANR	927816	Statement	i	765:46:23395:23395	925487	8	True				
ANR	927817	Statement	]	765:47:23396:23396	925487	9	True				
ANR	927818	Statement	","	765:48:23397:23397	925487	10	True				
ANR	927819	Statement	pad	765:50:23399:23401	925487	11	True				
ANR	927820	Statement	","	765:53:23402:23402	925487	12	True				
ANR	927821	Statement	r_num_math	765:55:23404:23413	925487	13	True				
ANR	927822	Statement	(	765:66:23415:23415	925487	14	True				
ANR	927823	Statement	core	765:67:23416:23419	925487	15	True				
ANR	927824	Statement	->	765:71:23420:23421	925487	16	True				
ANR	927825	Statement	num	765:73:23422:23424	925487	17	True				
ANR	927826	Statement	","	765:76:23425:23425	925487	18	True				
ANR	927827	Statement	vars	765:78:23427:23430	925487	19	True				
ANR	927828	Statement	[	765:82:23431:23431	925487	20	True				
ANR	927829	Statement	i	765:83:23432:23432	925487	21	True				
ANR	927830	Statement	]	765:84:23433:23433	925487	22	True				
ANR	927831	Statement	)	765:85:23434:23434	925487	23	True				
ANR	927832	Statement	)	765:86:23435:23435	925487	24	True				
ANR	927833	ExpressionStatement		765:87:23436:23436	925487	25	True				
ANR	927834	ElseStatement	else		925487	0					
ANR	927835	CompoundStatement		381:11:9913:9913	925487	0					
ANR	927836	Statement	eprintf	767:5:23456:23462	925487	0	True				
ANR	927837	Statement	(	767:13:23464:23464	925487	1	True				
ANR	927838	Statement	"""%s %s 0x%08"""	767:14:23465:23477	925487	2	True				
ANR	927839	Statement	PFMT64x	767:27:23478:23484	925487	3	True				
ANR	927840	Statement	"""\\n"""	767:34:23485:23488	925487	4	True				
ANR	927841	Statement	","	767:38:23489:23489	925487	5	True				
ANR	927842	Statement	vars	767:40:23491:23494	925487	6	True				
ANR	927843	Statement	[	767:44:23495:23495	925487	7	True				
ANR	927844	Statement	i	767:45:23496:23496	925487	8	True				
ANR	927845	Statement	]	767:46:23497:23497	925487	9	True				
ANR	927846	Statement	","	767:47:23498:23498	925487	10	True				
ANR	927847	Statement	pad	767:49:23500:23502	925487	11	True				
ANR	927848	Statement	","	767:52:23503:23503	925487	12	True				
ANR	927849	Statement	r_num_math	767:54:23505:23514	925487	13	True				
ANR	927850	Statement	(	767:65:23516:23516	925487	14	True				
ANR	927851	Statement	core	767:66:23517:23520	925487	15	True				
ANR	927852	Statement	->	767:70:23521:23522	925487	16	True				
ANR	927853	Statement	num	767:72:23523:23525	925487	17	True				
ANR	927854	Statement	","	767:75:23526:23526	925487	18	True				
ANR	927855	Statement	vars	767:77:23528:23531	925487	19	True				
ANR	927856	Statement	[	767:81:23532:23532	925487	20	True				
ANR	927857	Statement	i	767:82:23533:23533	925487	21	True				
ANR	927858	Statement	]	767:83:23534:23534	925487	22	True				
ANR	927859	Statement	)	767:84:23535:23535	925487	23	True				
ANR	927860	Statement	)	767:85:23536:23536	925487	24	True				
ANR	927861	ExpressionStatement		767:86:23537:23537	925487	25	True				
ANR	927862	ExpressionStatement	i ++	769:4:23549:23552	925487	2	True				
ANR	927863	PostIncDecOperationExpression	i ++		925487	0					
ANR	927864	Identifier	i		925487	0					
ANR	927865	IncDec	++		925487	1					
ANR	927866	ReturnStatement	return true ;	772:2:23565:23576	925487	125	True				
ANR	927867	Identifier	true		925487	0					
ANR	927868	Label	case 'V' :	773:1:23579:23587	925487	126	True				
ANR	927869	SwitchStatement	switch ( input [ 1 ] )		925487	127					
ANR	927870	Condition	input [ 1 ]	774:10:23607:23614	925487	0	True				
ANR	927871	ArrayIndexing	input [ 1 ]		925487	0					
ANR	927872	Identifier	input		925487	0					
ANR	927873	PrimaryExpression	1		925487	1					
ANR	927874	CompoundStatement		389:20:10081:10081	925487	1					
ANR	927875	Label	case '?' :	775:2:23621:23629	925487	0	True				
ANR	927876	ExpressionStatement	"r_core_cmd_help ( core , help_msg_question_V )"	776:3:23643:23686	925487	1	True				
ANR	927877	CallExpression	"r_core_cmd_help ( core , help_msg_question_V )"		925487	0					
ANR	927878	Callee	r_core_cmd_help		925487	0					
ANR	927879	Identifier	r_core_cmd_help		925487	0					
ANR	927880	ArgumentList	core		925487	1					
ANR	927881	Argument	core		925487	0					
ANR	927882	Identifier	core		925487	0					
ANR	927883	Argument	help_msg_question_V		925487	1					
ANR	927884	Identifier	help_msg_question_V		925487	0					
ANR	927885	BreakStatement	break ;	777:3:23691:23696	925487	2	True				
ANR	927886	Label	case 0 :	778:2:23700:23706	925487	3	True				
ANR	927887	ExpressionStatement	"r_cons_printf ( ""%s release\\n"" , R2_VERSION )"	780:3:23746:23788	925487	4	True				
ANR	927888	CallExpression	"r_cons_printf ( ""%s release\\n"" , R2_VERSION )"		925487	0					
ANR	927889	Callee	r_cons_printf		925487	0					
ANR	927890	Identifier	r_cons_printf		925487	0					
ANR	927891	ArgumentList	"""%s release\\n"""		925487	1					
ANR	927892	Argument	"""%s release\\n"""		925487	0					
ANR	927893	PrimaryExpression	"""%s release\\n"""		925487	0					
ANR	927894	Argument	R2_VERSION		925487	1					
ANR	927895	Identifier	R2_VERSION		925487	0					
ANR	927896	BreakStatement	break ;	788:3:24014:24019	925487	5	True				
ANR	927897	Label	case 'c' :	789:2:24023:24031	925487	6	True				
ANR	927898	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , vernum ( R2_VERSION ) )"	790:3:24045:24088	925487	7	True				
ANR	927899	CallExpression	"r_cons_printf ( ""%d\\n"" , vernum ( R2_VERSION ) )"		925487	0					
ANR	927900	Callee	r_cons_printf		925487	0					
ANR	927901	Identifier	r_cons_printf		925487	0					
ANR	927902	ArgumentList	"""%d\\n"""		925487	1					
ANR	927903	Argument	"""%d\\n"""		925487	0					
ANR	927904	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	927905	Argument	vernum ( R2_VERSION )		925487	1					
ANR	927906	CallExpression	vernum ( R2_VERSION )		925487	0					
ANR	927907	Callee	vernum		925487	0					
ANR	927908	Identifier	vernum		925487	0					
ANR	927909	ArgumentList	R2_VERSION		925487	1					
ANR	927910	Argument	R2_VERSION		925487	0					
ANR	927911	Identifier	R2_VERSION		925487	0					
ANR	927912	BreakStatement	break ;	791:3:24093:24098	925487	8	True				
ANR	927913	Label	case 'j' :	792:2:24102:24110	925487	9	True				
ANR	927914	ExpressionStatement	"r_cons_printf ( ""{\\""archos\\"":\\""%s-%s\\"""" , R_SYS_OS , R_SYS_ARCH )"	793:3:24124:24185	925487	10	True				
ANR	927915	CallExpression	"r_cons_printf ( ""{\\""archos\\"":\\""%s-%s\\"""" , R_SYS_OS , R_SYS_ARCH )"		925487	0					
ANR	927916	Callee	r_cons_printf		925487	0					
ANR	927917	Identifier	r_cons_printf		925487	0					
ANR	927918	ArgumentList	"""{\\""archos\\"":\\""%s-%s\\"""""		925487	1					
ANR	927919	Argument	"""{\\""archos\\"":\\""%s-%s\\"""""		925487	0					
ANR	927920	PrimaryExpression	"""{\\""archos\\"":\\""%s-%s\\"""""		925487	0					
ANR	927921	Argument	R_SYS_OS		925487	1					
ANR	927922	Identifier	R_SYS_OS		925487	0					
ANR	927923	Argument	R_SYS_ARCH		925487	2					
ANR	927924	Identifier	R_SYS_ARCH		925487	0					
ANR	927925	ExpressionStatement	"r_cons_printf ( "",\\""arch\\"":\\""%s\\"""" , R_SYS_ARCH )"	794:3:24190:24236	925487	11	True				
ANR	927926	CallExpression	"r_cons_printf ( "",\\""arch\\"":\\""%s\\"""" , R_SYS_ARCH )"		925487	0					
ANR	927927	Callee	r_cons_printf		925487	0					
ANR	927928	Identifier	r_cons_printf		925487	0					
ANR	927929	ArgumentList	""",\\""arch\\"":\\""%s\\"""""		925487	1					
ANR	927930	Argument	""",\\""arch\\"":\\""%s\\"""""		925487	0					
ANR	927931	PrimaryExpression	""",\\""arch\\"":\\""%s\\"""""		925487	0					
ANR	927932	Argument	R_SYS_ARCH		925487	1					
ANR	927933	Identifier	R_SYS_ARCH		925487	0					
ANR	927934	ExpressionStatement	"r_cons_printf ( "",\\""os\\"":\\""%s\\"""" , R_SYS_OS )"	795:3:24241:24283	925487	12	True				
ANR	927935	CallExpression	"r_cons_printf ( "",\\""os\\"":\\""%s\\"""" , R_SYS_OS )"		925487	0					
ANR	927936	Callee	r_cons_printf		925487	0					
ANR	927937	Identifier	r_cons_printf		925487	0					
ANR	927938	ArgumentList	""",\\""os\\"":\\""%s\\"""""		925487	1					
ANR	927939	Argument	""",\\""os\\"":\\""%s\\"""""		925487	0					
ANR	927940	PrimaryExpression	""",\\""os\\"":\\""%s\\"""""		925487	0					
ANR	927941	Argument	R_SYS_OS		925487	1					
ANR	927942	Identifier	R_SYS_OS		925487	0					
ANR	927943	ExpressionStatement	"r_cons_printf ( "",\\""commit\\"":%d"" , R2_VERSION_COMMIT )"	796:3:24288:24339	925487	13	True				
ANR	927944	CallExpression	"r_cons_printf ( "",\\""commit\\"":%d"" , R2_VERSION_COMMIT )"		925487	0					
ANR	927945	Callee	r_cons_printf		925487	0					
ANR	927946	Identifier	r_cons_printf		925487	0					
ANR	927947	ArgumentList	""",\\""commit\\"":%d"""		925487	1					
ANR	927948	Argument	""",\\""commit\\"":%d"""		925487	0					
ANR	927949	PrimaryExpression	""",\\""commit\\"":%d"""		925487	0					
ANR	927950	Argument	R2_VERSION_COMMIT		925487	1					
ANR	927951	Identifier	R2_VERSION_COMMIT		925487	0					
ANR	927952	ExpressionStatement	"r_cons_printf ( "",\\""tap\\"":\\""%s\\"""" , R2_GITTAP )"	797:3:24344:24388	925487	14	True				
ANR	927953	CallExpression	"r_cons_printf ( "",\\""tap\\"":\\""%s\\"""" , R2_GITTAP )"		925487	0					
ANR	927954	Callee	r_cons_printf		925487	0					
ANR	927955	Identifier	r_cons_printf		925487	0					
ANR	927956	ArgumentList	""",\\""tap\\"":\\""%s\\"""""		925487	1					
ANR	927957	Argument	""",\\""tap\\"":\\""%s\\"""""		925487	0					
ANR	927958	PrimaryExpression	""",\\""tap\\"":\\""%s\\"""""		925487	0					
ANR	927959	Argument	R2_GITTAP		925487	1					
ANR	927960	Identifier	R2_GITTAP		925487	0					
ANR	927961	ExpressionStatement	"r_cons_printf ( "",\\""nversion\\"":%d"" , vernum ( R2_VERSION ) )"	798:3:24393:24448	925487	15	True				
ANR	927962	CallExpression	"r_cons_printf ( "",\\""nversion\\"":%d"" , vernum ( R2_VERSION ) )"		925487	0					
ANR	927963	Callee	r_cons_printf		925487	0					
ANR	927964	Identifier	r_cons_printf		925487	0					
ANR	927965	ArgumentList	""",\\""nversion\\"":%d"""		925487	1					
ANR	927966	Argument	""",\\""nversion\\"":%d"""		925487	0					
ANR	927967	PrimaryExpression	""",\\""nversion\\"":%d"""		925487	0					
ANR	927968	Argument	vernum ( R2_VERSION )		925487	1					
ANR	927969	CallExpression	vernum ( R2_VERSION )		925487	0					
ANR	927970	Callee	vernum		925487	0					
ANR	927971	Identifier	vernum		925487	0					
ANR	927972	ArgumentList	R2_VERSION		925487	1					
ANR	927973	Argument	R2_VERSION		925487	0					
ANR	927974	Identifier	R2_VERSION		925487	0					
ANR	927975	ExpressionStatement	"r_cons_printf ( "",\\""version\\"":\\""%s\\""}\\n"" , R2_VERSION )"	799:3:24453:24505	925487	16	True				
ANR	927976	CallExpression	"r_cons_printf ( "",\\""version\\"":\\""%s\\""}\\n"" , R2_VERSION )"		925487	0					
ANR	927977	Callee	r_cons_printf		925487	0					
ANR	927978	Identifier	r_cons_printf		925487	0					
ANR	927979	ArgumentList	""",\\""version\\"":\\""%s\\""}\\n"""		925487	1					
ANR	927980	Argument	""",\\""version\\"":\\""%s\\""}\\n"""		925487	0					
ANR	927981	PrimaryExpression	""",\\""version\\"":\\""%s\\""}\\n"""		925487	0					
ANR	927982	Argument	R2_VERSION		925487	1					
ANR	927983	Identifier	R2_VERSION		925487	0					
ANR	927984	BreakStatement	break ;	800:3:24510:24515	925487	17	True				
ANR	927985	Label	case 'q' :	801:2:24519:24527	925487	18	True				
ANR	927986	ExpressionStatement	r_cons_println ( R2_VERSION )	802:3:24541:24568	925487	19	True				
ANR	927987	CallExpression	r_cons_println ( R2_VERSION )		925487	0					
ANR	927988	Callee	r_cons_println		925487	0					
ANR	927989	Identifier	r_cons_println		925487	0					
ANR	927990	ArgumentList	R2_VERSION		925487	1					
ANR	927991	Argument	R2_VERSION		925487	0					
ANR	927992	Identifier	R2_VERSION		925487	0					
ANR	927993	BreakStatement	break ;	803:3:24573:24578	925487	20	True				
ANR	927994	BreakStatement	break ;	805:2:24586:24591	925487	128	True				
ANR	927995	Label	case 'l' :	806:1:24594:24602	925487	129	True				
ANR	927996	IfStatement	if ( input [ 1 ] == 'q' )		925487	130					
ANR	927997	Condition	input [ 1 ] == 'q'	807:6:24618:24632	925487	0	True				
ANR	927998	EqualityExpression	input [ 1 ] == 'q'		925487	0		==			
ANR	927999	ArrayIndexing	input [ 1 ]		925487	0					
ANR	928000	Identifier	input		925487	0					
ANR	928001	PrimaryExpression	1		925487	1					
ANR	928002	PrimaryExpression	'q'		925487	1					
ANR	928003	CompoundStatement		422:23:11099:11099	925487	1					
ANR	928004	ForStatement	for ( input += 2 ; input [ 0 ] == ' ' ; input ++ )		925487	0					
ANR	928005	ForInit	input += 2 ;	808:8:24645:24653	925487	0	True				
ANR	928006	AssignmentExpression	input += 2		925487	0		+=			
ANR	928007	Identifier	input		925487	0					
ANR	928008	PrimaryExpression	2		925487	1					
ANR	928009	Condition	input [ 0 ] == ' '	808:18:24655:24669	925487	1	True				
ANR	928010	EqualityExpression	input [ 0 ] == ' '		925487	0		==			
ANR	928011	ArrayIndexing	input [ 0 ]		925487	0					
ANR	928012	Identifier	input		925487	0					
ANR	928013	PrimaryExpression	0		925487	1					
ANR	928014	PrimaryExpression	' '		925487	1					
ANR	928015	PostIncDecOperationExpression	input ++	808:35:24672:24678	925487	2	True				
ANR	928016	Identifier	input		925487	0					
ANR	928017	IncDec	++		925487	1					
ANR	928018	ExpressionStatement		808:43:24680:24680	925487	3	True				
ANR	928019	ExpressionStatement	core -> num -> value = strlen ( input )	809:3:24685:24718	925487	1	True				
ANR	928020	AssignmentExpression	core -> num -> value = strlen ( input )		925487	0		=			
ANR	928021	PtrMemberAccess	core -> num -> value		925487	0					
ANR	928022	PtrMemberAccess	core -> num		925487	0					
ANR	928023	Identifier	core		925487	0					
ANR	928024	Identifier	num		925487	1					
ANR	928025	Identifier	value		925487	1					
ANR	928026	CallExpression	strlen ( input )		925487	1					
ANR	928027	Callee	strlen		925487	0					
ANR	928028	Identifier	strlen		925487	0					
ANR	928029	ArgumentList	input		925487	1					
ANR	928030	Argument	input		925487	0					
ANR	928031	Identifier	input		925487	0					
ANR	928032	ElseStatement	else		925487	0					
ANR	928033	CompoundStatement		425:9:11193:11193	925487	0					
ANR	928034	ForStatement	for ( input ++ ; input [ 0 ] == ' ' ; input ++ )		925487	0					
ANR	928035	ForInit	input ++ ;	811:8:24739:24746	925487	0	True				
ANR	928036	PostIncDecOperationExpression	input ++		925487	0					
ANR	928037	Identifier	input		925487	0					
ANR	928038	IncDec	++		925487	1					
ANR	928039	Condition	input [ 0 ] == ' '	811:17:24748:24762	925487	1	True				
ANR	928040	EqualityExpression	input [ 0 ] == ' '		925487	0		==			
ANR	928041	ArrayIndexing	input [ 0 ]		925487	0					
ANR	928042	Identifier	input		925487	0					
ANR	928043	PrimaryExpression	0		925487	1					
ANR	928044	PrimaryExpression	' '		925487	1					
ANR	928045	PostIncDecOperationExpression	input ++	811:34:24765:24771	925487	2	True				
ANR	928046	Identifier	input		925487	0					
ANR	928047	IncDec	++		925487	1					
ANR	928048	ExpressionStatement		811:42:24773:24773	925487	3	True				
ANR	928049	ExpressionStatement	core -> num -> value = strlen ( input )	812:3:24778:24811	925487	1	True				
ANR	928050	AssignmentExpression	core -> num -> value = strlen ( input )		925487	0		=			
ANR	928051	PtrMemberAccess	core -> num -> value		925487	0					
ANR	928052	PtrMemberAccess	core -> num		925487	0					
ANR	928053	Identifier	core		925487	0					
ANR	928054	Identifier	num		925487	1					
ANR	928055	Identifier	value		925487	1					
ANR	928056	CallExpression	strlen ( input )		925487	1					
ANR	928057	Callee	strlen		925487	0					
ANR	928058	Identifier	strlen		925487	0					
ANR	928059	ArgumentList	input		925487	1					
ANR	928060	Argument	input		925487	0					
ANR	928061	Identifier	input		925487	0					
ANR	928062	ExpressionStatement	"r_cons_printf ( ""%d\\n"" , core -> num -> value )"	813:3:24816:24856	925487	2	True				
ANR	928063	CallExpression	"r_cons_printf ( ""%d\\n"" , core -> num -> value )"		925487	0					
ANR	928064	Callee	r_cons_printf		925487	0					
ANR	928065	Identifier	r_cons_printf		925487	0					
ANR	928066	ArgumentList	"""%d\\n"""		925487	1					
ANR	928067	Argument	"""%d\\n"""		925487	0					
ANR	928068	PrimaryExpression	"""%d\\n"""		925487	0					
ANR	928069	Argument	core -> num -> value		925487	1					
ANR	928070	PtrMemberAccess	core -> num -> value		925487	0					
ANR	928071	PtrMemberAccess	core -> num		925487	0					
ANR	928072	Identifier	core		925487	0					
ANR	928073	Identifier	num		925487	1					
ANR	928074	Identifier	value		925487	1					
ANR	928075	BreakStatement	break ;	815:2:24864:24869	925487	131	True				
ANR	928076	Label	case 'X' :	816:1:24872:24880	925487	132	True				
ANR	928077	ForStatement	for ( input ++ ; input [ 0 ] == ' ' ; input ++ )		925487	133					
ANR	928078	ForInit	input ++ ;	817:7:24897:24904	925487	0	True				
ANR	928079	PostIncDecOperationExpression	input ++		925487	0					
ANR	928080	Identifier	input		925487	0					
ANR	928081	IncDec	++		925487	1					
ANR	928082	Condition	input [ 0 ] == ' '	817:16:24906:24920	925487	1	True				
ANR	928083	EqualityExpression	input [ 0 ] == ' '		925487	0		==			
ANR	928084	ArrayIndexing	input [ 0 ]		925487	0					
ANR	928085	Identifier	input		925487	0					
ANR	928086	PrimaryExpression	0		925487	1					
ANR	928087	PrimaryExpression	' '		925487	1					
ANR	928088	PostIncDecOperationExpression	input ++	817:33:24923:24929	925487	2	True				
ANR	928089	Identifier	input		925487	0					
ANR	928090	IncDec	++		925487	1					
ANR	928091	ExpressionStatement		817:41:24931:24931	925487	3	True				
ANR	928092	ExpressionStatement	"n = r_num_math ( core -> num , input )"	818:2:24935:24968	925487	134	True				
ANR	928093	AssignmentExpression	"n = r_num_math ( core -> num , input )"		925487	0		=			
ANR	928094	Identifier	n		925487	0					
ANR	928095	CallExpression	"r_num_math ( core -> num , input )"		925487	1					
ANR	928096	Callee	r_num_math		925487	0					
ANR	928097	Identifier	r_num_math		925487	0					
ANR	928098	ArgumentList	core -> num		925487	1					
ANR	928099	Argument	core -> num		925487	0					
ANR	928100	PtrMemberAccess	core -> num		925487	0					
ANR	928101	Identifier	core		925487	0					
ANR	928102	Identifier	num		925487	1					
ANR	928103	Argument	input		925487	1					
ANR	928104	Identifier	input		925487	0					
ANR	928105	Statement	r_cons_printf	819:2:24972:24984	925487	135	True				
ANR	928106	Statement	(	819:16:24986:24986	925487	136	True				
ANR	928107	Statement	"""%"""	819:17:24987:24989	925487	137	True				
ANR	928108	Statement	PFMT64x	819:20:24990:24996	925487	138	True				
ANR	928109	Statement	"""\\n"""	819:27:24997:25000	925487	139	True				
ANR	928110	Statement	","	819:31:25001:25001	925487	140	True				
ANR	928111	Statement	n	819:33:25003:25003	925487	141	True				
ANR	928112	Statement	)	819:34:25004:25004	925487	142	True				
ANR	928113	ExpressionStatement		819:35:25005:25005	925487	143	True				
ANR	928114	BreakStatement	break ;	820:2:25009:25014	925487	144	True				
ANR	928115	Label	case 'x' :	821:1:25017:25025	925487	145	True				
ANR	928116	ForStatement	for ( input ++ ; input [ 0 ] == ' ' ; input ++ )		925487	146					
ANR	928117	ForInit	input ++ ;	822:7:25042:25049	925487	0	True				
ANR	928118	PostIncDecOperationExpression	input ++		925487	0					
ANR	928119	Identifier	input		925487	0					
ANR	928120	IncDec	++		925487	1					
ANR	928121	Condition	input [ 0 ] == ' '	822:16:25051:25065	925487	1	True				
ANR	928122	EqualityExpression	input [ 0 ] == ' '		925487	0		==			
ANR	928123	ArrayIndexing	input [ 0 ]		925487	0					
ANR	928124	Identifier	input		925487	0					
ANR	928125	PrimaryExpression	0		925487	1					
ANR	928126	PrimaryExpression	' '		925487	1					
ANR	928127	PostIncDecOperationExpression	input ++	822:33:25068:25074	925487	2	True				
ANR	928128	Identifier	input		925487	0					
ANR	928129	IncDec	++		925487	1					
ANR	928130	ExpressionStatement		822:41:25076:25076	925487	3	True				
ANR	928131	IfStatement	if ( * input == '-' )		925487	147					
ANR	928132	Condition	* input == '-'	823:6:25084:25096	925487	0	True				
ANR	928133	EqualityExpression	* input == '-'		925487	0		==			
ANR	928134	UnaryOperationExpression	* input		925487	0					
ANR	928135	UnaryOperator	*		925487	0					
ANR	928136	Identifier	input		925487	1					
ANR	928137	PrimaryExpression	'-'		925487	1					
ANR	928138	CompoundStatement		439:3:11568:11606	925487	1					
ANR	928139	IdentifierDeclStatement	ut8 * out = malloc ( strlen ( input ) + 1 ) ;	824:3:25104:25142	925487	0	True				
ANR	928140	IdentifierDecl	* out = malloc ( strlen ( input ) + 1 )		925487	0					
ANR	928141	IdentifierDeclType	ut8 *		925487	0					
ANR	928142	Identifier	out		925487	1					
ANR	928143	AssignmentExpression	* out = malloc ( strlen ( input ) + 1 )		925487	2		=			
ANR	928144	Identifier	out		925487	0					
ANR	928145	CallExpression	malloc ( strlen ( input ) + 1 )		925487	1					
ANR	928146	Callee	malloc		925487	0					
ANR	928147	Identifier	malloc		925487	0					
ANR	928148	ArgumentList	strlen ( input ) + 1		925487	1					
ANR	928149	Argument	strlen ( input ) + 1		925487	0					
ANR	928150	AdditiveExpression	strlen ( input ) + 1		925487	0		+			
ANR	928151	CallExpression	strlen ( input )		925487	0					
ANR	928152	Callee	strlen		925487	0					
ANR	928153	Identifier	strlen		925487	0					
ANR	928154	ArgumentList	input		925487	1					
ANR	928155	Argument	input		925487	0					
ANR	928156	Identifier	input		925487	0					
ANR	928157	PrimaryExpression	1		925487	1					
ANR	928158	IfStatement	if ( out )		925487	1					
ANR	928159	Condition	out	825:7:25151:25153	925487	0	True				
ANR	928160	Identifier	out		925487	0					
ANR	928161	CompoundStatement		441:4:11626:11666	925487	1					
ANR	928162	IdentifierDeclStatement	"int len = r_hex_str2bin ( input + 1 , out ) ;"	826:4:25162:25202	925487	0	True				
ANR	928163	IdentifierDecl	"len = r_hex_str2bin ( input + 1 , out )"		925487	0					
ANR	928164	IdentifierDeclType	int		925487	0					
ANR	928165	Identifier	len		925487	1					
ANR	928166	AssignmentExpression	"len = r_hex_str2bin ( input + 1 , out )"		925487	2		=			
ANR	928167	Identifier	len		925487	0					
ANR	928168	CallExpression	"r_hex_str2bin ( input + 1 , out )"		925487	1					
ANR	928169	Callee	r_hex_str2bin		925487	0					
ANR	928170	Identifier	r_hex_str2bin		925487	0					
ANR	928171	ArgumentList	input + 1		925487	1					
ANR	928172	Argument	input + 1		925487	0					
ANR	928173	AdditiveExpression	input + 1		925487	0		+			
ANR	928174	Identifier	input		925487	0					
ANR	928175	PrimaryExpression	1		925487	1					
ANR	928176	Argument	out		925487	1					
ANR	928177	Identifier	out		925487	0					
ANR	928178	IfStatement	if ( len >= 0 )		925487	1					
ANR	928179	Condition	len >= 0	827:8:25212:25219	925487	0	True				
ANR	928180	RelationalExpression	len >= 0		925487	0		>=			
ANR	928181	Identifier	len		925487	0					
ANR	928182	PrimaryExpression	0		925487	1					
ANR	928183	CompoundStatement		442:18:11686:11686	925487	1					
ANR	928184	ExpressionStatement	out [ len ] = 0	828:5:25229:25241	925487	0	True				
ANR	928185	AssignmentExpression	out [ len ] = 0		925487	0		=			
ANR	928186	ArrayIndexing	out [ len ]		925487	0					
ANR	928187	Identifier	out		925487	0					
ANR	928188	Identifier	len		925487	1					
ANR	928189	PrimaryExpression	0		925487	1					
ANR	928190	ExpressionStatement	r_cons_println ( ( const char * ) out )	829:5:25248:25281	925487	1	True				
ANR	928191	CallExpression	r_cons_println ( ( const char * ) out )		925487	0					
ANR	928192	Callee	r_cons_println		925487	0					
ANR	928193	Identifier	r_cons_println		925487	0					
ANR	928194	ArgumentList	( const char * ) out		925487	1					
ANR	928195	Argument	( const char * ) out		925487	0					
ANR	928196	CastExpression	( const char * ) out		925487	0					
ANR	928197	CastTarget	const char *		925487	0					
ANR	928198	Identifier	out		925487	1					
ANR	928199	ElseStatement	else		925487	0					
ANR	928200	CompoundStatement		445:11:11758:11758	925487	0					
ANR	928201	ExpressionStatement	"eprintf ( ""Error parsing the hexpair string\\n"" )"	831:5:25301:25347	925487	0	True				
ANR	928202	CallExpression	"eprintf ( ""Error parsing the hexpair string\\n"" )"		925487	0					
ANR	928203	Callee	eprintf		925487	0					
ANR	928204	Identifier	eprintf		925487	0					
ANR	928205	ArgumentList	"""Error parsing the hexpair string\\n"""		925487	1					
ANR	928206	Argument	"""Error parsing the hexpair string\\n"""		925487	0					
ANR	928207	PrimaryExpression	"""Error parsing the hexpair string\\n"""		925487	0					
ANR	928208	ExpressionStatement	free ( out )	833:4:25359:25369	925487	2	True				
ANR	928209	CallExpression	free ( out )		925487	0					
ANR	928210	Callee	free		925487	0					
ANR	928211	Identifier	free		925487	0					
ANR	928212	ArgumentList	out		925487	1					
ANR	928213	Argument	out		925487	0					
ANR	928214	Identifier	out		925487	0					
ANR	928215	ElseStatement	else		925487	0					
ANR	928216	IfStatement	if ( * input == '+' )		925487	0					
ANR	928217	Condition	* input == '+'	835:13:25389:25401	925487	0	True				
ANR	928218	EqualityExpression	* input == '+'		925487	0		==			
ANR	928219	UnaryOperationExpression	* input		925487	0					
ANR	928220	UnaryOperator	*		925487	0					
ANR	928221	Identifier	input		925487	1					
ANR	928222	PrimaryExpression	'+'		925487	1					
ANR	928223	CompoundStatement		452:3:11916:11954	925487	1					
ANR	928224	IdentifierDeclStatement	"ut64 n = r_num_math ( core -> num , input ) ;"	836:3:25409:25447	925487	0	True				
ANR	928225	IdentifierDecl	"n = r_num_math ( core -> num , input )"		925487	0					
ANR	928226	IdentifierDeclType	ut64		925487	0					
ANR	928227	Identifier	n		925487	1					
ANR	928228	AssignmentExpression	"n = r_num_math ( core -> num , input )"		925487	2		=			
ANR	928229	Identifier	n		925487	0					
ANR	928230	CallExpression	"r_num_math ( core -> num , input )"		925487	1					
ANR	928231	Callee	r_num_math		925487	0					
ANR	928232	Identifier	r_num_math		925487	0					
ANR	928233	ArgumentList	core -> num		925487	1					
ANR	928234	Argument	core -> num		925487	0					
ANR	928235	PtrMemberAccess	core -> num		925487	0					
ANR	928236	Identifier	core		925487	0					
ANR	928237	Identifier	num		925487	1					
ANR	928238	Argument	input		925487	1					
ANR	928239	Identifier	input		925487	0					
ANR	928240	IdentifierDeclStatement	"int bits = r_num_to_bits ( NULL , n ) / 8 ;"	837:3:25452:25490	925487	1	True				
ANR	928241	IdentifierDecl	"bits = r_num_to_bits ( NULL , n ) / 8"		925487	0					
ANR	928242	IdentifierDeclType	int		925487	0					
ANR	928243	Identifier	bits		925487	1					
ANR	928244	AssignmentExpression	"bits = r_num_to_bits ( NULL , n ) / 8"		925487	2		=			
ANR	928245	Identifier	bits		925487	0					
ANR	928246	MultiplicativeExpression	"r_num_to_bits ( NULL , n ) / 8"		925487	1		/			
ANR	928247	CallExpression	"r_num_to_bits ( NULL , n )"		925487	0					
ANR	928248	Callee	r_num_to_bits		925487	0					
ANR	928249	Identifier	r_num_to_bits		925487	0					
ANR	928250	ArgumentList	NULL		925487	1					
ANR	928251	Argument	NULL		925487	0					
ANR	928252	Identifier	NULL		925487	0					
ANR	928253	Argument	n		925487	1					
ANR	928254	Identifier	n		925487	0					
ANR	928255	PrimaryExpression	8		925487	1					
ANR	928256	ForStatement	for ( i = 0 ; i < bits ; i ++ )		925487	2					
ANR	928257	ForInit	i = 0 ;	838:8:25500:25505	925487	0	True				
ANR	928258	AssignmentExpression	i = 0		925487	0		=			
ANR	928259	Identifier	i		925487	0					
ANR	928260	PrimaryExpression	0		925487	1					
ANR	928261	Condition	i < bits	838:15:25507:25514	925487	1	True				
ANR	928262	RelationalExpression	i < bits		925487	0		<			
ANR	928263	Identifier	i		925487	0					
ANR	928264	Identifier	bits		925487	1					
ANR	928265	PostIncDecOperationExpression	i ++	838:25:25517:25519	925487	2	True				
ANR	928266	Identifier	i		925487	0					
ANR	928267	IncDec	++		925487	1					
ANR	928268	CompoundStatement		453:30:11986:11986	925487	3					
ANR	928269	ExpressionStatement	"r_cons_printf ( ""%02x"" , ( ut8 ) ( ( n >> ( i * 8 ) ) & 0xff ) )"	839:4:25528:25579	925487	0	True				
ANR	928270	CallExpression	"r_cons_printf ( ""%02x"" , ( ut8 ) ( ( n >> ( i * 8 ) ) & 0xff ) )"		925487	0					
ANR	928271	Callee	r_cons_printf		925487	0					
ANR	928272	Identifier	r_cons_printf		925487	0					
ANR	928273	ArgumentList	"""%02x"""		925487	1					
ANR	928274	Argument	"""%02x"""		925487	0					
ANR	928275	PrimaryExpression	"""%02x"""		925487	0					
ANR	928276	Argument	( ut8 ) ( ( n >> ( i * 8 ) ) & 0xff )		925487	1					
ANR	928277	CastExpression	( ut8 ) ( ( n >> ( i * 8 ) ) & 0xff )		925487	0					
ANR	928278	CastTarget	ut8		925487	0					
ANR	928279	BitAndExpression	( n >> ( i * 8 ) ) & 0xff		925487	1		&			
ANR	928280	ShiftExpression	n >> ( i * 8 )		925487	0		>>			
ANR	928281	Identifier	n		925487	0					
ANR	928282	MultiplicativeExpression	i * 8		925487	1		*			
ANR	928283	Identifier	i		925487	0					
ANR	928284	PrimaryExpression	8		925487	1					
ANR	928285	PrimaryExpression	0xff		925487	1					
ANR	928286	ExpressionStatement	r_cons_newline ( )	841:3:25589:25606	925487	3	True				
ANR	928287	CallExpression	r_cons_newline ( )		925487	0					
ANR	928288	Callee	r_cons_newline		925487	0					
ANR	928289	Identifier	r_cons_newline		925487	0					
ANR	928290	ArgumentList			925487	1					
ANR	928291	ElseStatement	else		925487	0					
ANR	928292	CompoundStatement		457:9:12081:12081	925487	0					
ANR	928293	IfStatement	if ( * input == ' ' )		925487	0					
ANR	928294	Condition	* input == ' '	843:7:25626:25638	925487	0	True				
ANR	928295	EqualityExpression	* input == ' '		925487	0		==			
ANR	928296	UnaryOperationExpression	* input		925487	0					
ANR	928297	UnaryOperator	*		925487	0					
ANR	928298	Identifier	input		925487	1					
ANR	928299	PrimaryExpression	' '		925487	1					
ANR	928300	CompoundStatement		458:22:12105:12105	925487	1					
ANR	928301	ExpressionStatement	input ++	844:4:25647:25654	925487	0	True				
ANR	928302	PostIncDecOperationExpression	input ++		925487	0					
ANR	928303	Identifier	input		925487	0					
ANR	928304	IncDec	++		925487	1					
ANR	928305	ForStatement	for ( i = 0 ; input [ i ] ; i ++ )		925487	1					
ANR	928306	ForInit	i = 0 ;	846:8:25669:25674	925487	0	True				
ANR	928307	AssignmentExpression	i = 0		925487	0		=			
ANR	928308	Identifier	i		925487	0					
ANR	928309	PrimaryExpression	0		925487	1					
ANR	928310	Condition	input [ i ]	846:15:25676:25683	925487	1	True				
ANR	928311	ArrayIndexing	input [ i ]		925487	0					
ANR	928312	Identifier	input		925487	0					
ANR	928313	Identifier	i		925487	1					
ANR	928314	PostIncDecOperationExpression	i ++	846:25:25686:25688	925487	2	True				
ANR	928315	Identifier	i		925487	0					
ANR	928316	IncDec	++		925487	1					
ANR	928317	CompoundStatement		461:30:12155:12155	925487	3					
ANR	928318	ExpressionStatement	"r_cons_printf ( ""%02x"" , input [ i ] )"	847:4:25697:25729	925487	0	True				
ANR	928319	CallExpression	"r_cons_printf ( ""%02x"" , input [ i ] )"		925487	0					
ANR	928320	Callee	r_cons_printf		925487	0					
ANR	928321	Identifier	r_cons_printf		925487	0					
ANR	928322	ArgumentList	"""%02x"""		925487	1					
ANR	928323	Argument	"""%02x"""		925487	0					
ANR	928324	PrimaryExpression	"""%02x"""		925487	0					
ANR	928325	Argument	input [ i ]		925487	1					
ANR	928326	ArrayIndexing	input [ i ]		925487	0					
ANR	928327	Identifier	input		925487	0					
ANR	928328	Identifier	i		925487	1					
ANR	928329	ExpressionStatement	r_cons_newline ( )	849:3:25739:25756	925487	2	True				
ANR	928330	CallExpression	r_cons_newline ( )		925487	0					
ANR	928331	Callee	r_cons_newline		925487	0					
ANR	928332	Identifier	r_cons_newline		925487	0					
ANR	928333	ArgumentList			925487	1					
ANR	928334	BreakStatement	break ;	851:2:25764:25769	925487	148	True				
ANR	928335	Label	case 'E' :	852:1:25772:25780	925487	149	True				
ANR	928336	ExpressionStatement	r_core_clippy ( r_str_trim_ro ( input + 1 ) )	853:2:25804:25845	925487	150	True				
ANR	928337	CallExpression	r_core_clippy ( r_str_trim_ro ( input + 1 ) )		925487	0					
ANR	928338	Callee	r_core_clippy		925487	0					
ANR	928339	Identifier	r_core_clippy		925487	0					
ANR	928340	ArgumentList	r_str_trim_ro ( input + 1 )		925487	1					
ANR	928341	Argument	r_str_trim_ro ( input + 1 )		925487	0					
ANR	928342	CallExpression	r_str_trim_ro ( input + 1 )		925487	0					
ANR	928343	Callee	r_str_trim_ro		925487	0					
ANR	928344	Identifier	r_str_trim_ro		925487	0					
ANR	928345	ArgumentList	input + 1		925487	1					
ANR	928346	Argument	input + 1		925487	0					
ANR	928347	AdditiveExpression	input + 1		925487	0		+			
ANR	928348	Identifier	input		925487	0					
ANR	928349	PrimaryExpression	1		925487	1					
ANR	928350	BreakStatement	break ;	854:2:25849:25854	925487	151	True				
ANR	928351	Label	case 'e' :	855:1:25857:25865	925487	152	True				
ANR	928352	SwitchStatement	switch ( input [ 1 ] )		925487	153					
ANR	928353	Condition	input [ 1 ]	856:10:25890:25897	925487	0	True				
ANR	928354	ArrayIndexing	input [ 1 ]		925487	0					
ANR	928355	Identifier	input		925487	0					
ANR	928356	PrimaryExpression	1		925487	1					
ANR	928357	CompoundStatement		471:20:12364:12364	925487	1					
ANR	928358	Label	case '=' :	857:2:25904:25912	925487	0	True				
ANR	928359	CompoundStatement		473:3:12392:12435	925487	1					
ANR	928360	IdentifierDeclStatement	"ut64 pc = r_num_math ( core -> num , input + 2 ) ;"	858:3:25928:25971	925487	0	True				
ANR	928361	IdentifierDecl	"pc = r_num_math ( core -> num , input + 2 )"		925487	0					
ANR	928362	IdentifierDeclType	ut64		925487	0					
ANR	928363	Identifier	pc		925487	1					
ANR	928364	AssignmentExpression	"pc = r_num_math ( core -> num , input + 2 )"		925487	2		=			
ANR	928365	Identifier	pc		925487	0					
ANR	928366	CallExpression	"r_num_math ( core -> num , input + 2 )"		925487	1					
ANR	928367	Callee	r_num_math		925487	0					
ANR	928368	Identifier	r_num_math		925487	0					
ANR	928369	ArgumentList	core -> num		925487	1					
ANR	928370	Argument	core -> num		925487	0					
ANR	928371	PtrMemberAccess	core -> num		925487	0					
ANR	928372	Identifier	core		925487	0					
ANR	928373	Identifier	num		925487	1					
ANR	928374	Argument	input + 2		925487	1					
ANR	928375	AdditiveExpression	input + 2		925487	0		+			
ANR	928376	Identifier	input		925487	0					
ANR	928377	PrimaryExpression	2		925487	1					
ANR	928378	ExpressionStatement	"r_print_progressbar ( core -> print , pc , 80 )"	859:3:25976:26017	925487	1	True				
ANR	928379	CallExpression	"r_print_progressbar ( core -> print , pc , 80 )"		925487	0					
ANR	928380	Callee	r_print_progressbar		925487	0					
ANR	928381	Identifier	r_print_progressbar		925487	0					
ANR	928382	ArgumentList	core -> print		925487	1					
ANR	928383	Argument	core -> print		925487	0					
ANR	928384	PtrMemberAccess	core -> print		925487	0					
ANR	928385	Identifier	core		925487	0					
ANR	928386	Identifier	print		925487	1					
ANR	928387	Argument	pc		925487	1					
ANR	928388	Identifier	pc		925487	0					
ANR	928389	Argument	80		925487	2					
ANR	928390	PrimaryExpression	80		925487	0					
ANR	928391	ExpressionStatement	r_cons_newline ( )	860:3:26022:26039	925487	2	True				
ANR	928392	CallExpression	r_cons_newline ( )		925487	0					
ANR	928393	Callee	r_cons_newline		925487	0					
ANR	928394	Identifier	r_cons_newline		925487	0					
ANR	928395	ArgumentList			925487	1					
ANR	928396	BreakStatement	break ;	861:3:26044:26049	925487	3	True				
ANR	928397	Label	case 'b' :	863:2:26057:26065	925487	2	True				
ANR	928398	CompoundStatement		481:3:12631:12673	925487	3					
ANR	928399	IdentifierDeclStatement	char * arg = strdup ( r_str_trim_ro ( input + 2 ) ) ;	864:3:26081:26127	925487	0	True				
ANR	928400	IdentifierDecl	* arg = strdup ( r_str_trim_ro ( input + 2 ) )		925487	0					
ANR	928401	IdentifierDeclType	char *		925487	0					
ANR	928402	Identifier	arg		925487	1					
ANR	928403	AssignmentExpression	* arg = strdup ( r_str_trim_ro ( input + 2 ) )		925487	2		=			
ANR	928404	Identifier	arg		925487	0					
ANR	928405	CallExpression	strdup ( r_str_trim_ro ( input + 2 ) )		925487	1					
ANR	928406	Callee	strdup		925487	0					
ANR	928407	Identifier	strdup		925487	0					
ANR	928408	ArgumentList	r_str_trim_ro ( input + 2 )		925487	1					
ANR	928409	Argument	r_str_trim_ro ( input + 2 )		925487	0					
ANR	928410	CallExpression	r_str_trim_ro ( input + 2 )		925487	0					
ANR	928411	Callee	r_str_trim_ro		925487	0					
ANR	928412	Identifier	r_str_trim_ro		925487	0					
ANR	928413	ArgumentList	input + 2		925487	1					
ANR	928414	Argument	input + 2		925487	0					
ANR	928415	AdditiveExpression	input + 2		925487	0		+			
ANR	928416	Identifier	input		925487	0					
ANR	928417	PrimaryExpression	2		925487	1					
ANR	928418	IdentifierDeclStatement	"int n = r_str_split ( arg , ' ' ) ;"	865:3:26132:26162	925487	1	True				
ANR	928419	IdentifierDecl	"n = r_str_split ( arg , ' ' )"		925487	0					
ANR	928420	IdentifierDeclType	int		925487	0					
ANR	928421	Identifier	n		925487	1					
ANR	928422	AssignmentExpression	"n = r_str_split ( arg , ' ' )"		925487	2		=			
ANR	928423	Identifier	n		925487	0					
ANR	928424	CallExpression	"r_str_split ( arg , ' ' )"		925487	1					
ANR	928425	Callee	r_str_split		925487	0					
ANR	928426	Identifier	r_str_split		925487	0					
ANR	928427	ArgumentList	arg		925487	1					
ANR	928428	Argument	arg		925487	0					
ANR	928429	Identifier	arg		925487	0					
ANR	928430	Argument	' '		925487	1					
ANR	928431	PrimaryExpression	' '		925487	0					
ANR	928432	IdentifierDeclStatement	"ut64 * portions = calloc ( n , sizeof ( ut64 ) ) ;"	866:3:26167:26209	925487	2	True				
ANR	928433	IdentifierDecl	"* portions = calloc ( n , sizeof ( ut64 ) )"		925487	0					
ANR	928434	IdentifierDeclType	ut64 *		925487	0					
ANR	928435	Identifier	portions		925487	1					
ANR	928436	AssignmentExpression	"* portions = calloc ( n , sizeof ( ut64 ) )"		925487	2		=			
ANR	928437	Identifier	portions		925487	0					
ANR	928438	CallExpression	"calloc ( n , sizeof ( ut64 ) )"		925487	1					
ANR	928439	Callee	calloc		925487	0					
ANR	928440	Identifier	calloc		925487	0					
ANR	928441	ArgumentList	n		925487	1					
ANR	928442	Argument	n		925487	0					
ANR	928443	Identifier	n		925487	0					
ANR	928444	Argument	sizeof ( ut64 )		925487	1					
ANR	928445	SizeofExpression	sizeof ( ut64 )		925487	0					
ANR	928446	Sizeof	sizeof		925487	0					
ANR	928447	SizeofOperand	ut64		925487	1					
ANR	928448	ForStatement	for ( i = 0 ; i < n ; i ++ )		925487	3					
ANR	928449	ForInit	i = 0 ;	867:8:26219:26224	925487	0	True				
ANR	928450	AssignmentExpression	i = 0		925487	0		=			
ANR	928451	Identifier	i		925487	0					
ANR	928452	PrimaryExpression	0		925487	1					
ANR	928453	Condition	i < n	867:15:26226:26230	925487	1	True				
ANR	928454	RelationalExpression	i < n		925487	0		<			
ANR	928455	Identifier	i		925487	0					
ANR	928456	Identifier	n		925487	1					
ANR	928457	PostIncDecOperationExpression	i ++	867:22:26233:26235	925487	2	True				
ANR	928458	Identifier	i		925487	0					
ANR	928459	IncDec	++		925487	1					
ANR	928460	CompoundStatement		482:27:12702:12702	925487	3					
ANR	928461	ExpressionStatement	"portions [ i ] = r_num_math ( core -> num , r_str_word_get0 ( arg , i ) )"	868:4:26244:26306	925487	0	True				
ANR	928462	AssignmentExpression	"portions [ i ] = r_num_math ( core -> num , r_str_word_get0 ( arg , i ) )"		925487	0		=			
ANR	928463	ArrayIndexing	portions [ i ]		925487	0					
ANR	928464	Identifier	portions		925487	0					
ANR	928465	Identifier	i		925487	1					
ANR	928466	CallExpression	"r_num_math ( core -> num , r_str_word_get0 ( arg , i ) )"		925487	1					
ANR	928467	Callee	r_num_math		925487	0					
ANR	928468	Identifier	r_num_math		925487	0					
ANR	928469	ArgumentList	core -> num		925487	1					
ANR	928470	Argument	core -> num		925487	0					
ANR	928471	PtrMemberAccess	core -> num		925487	0					
ANR	928472	Identifier	core		925487	0					
ANR	928473	Identifier	num		925487	1					
ANR	928474	Argument	"r_str_word_get0 ( arg , i )"		925487	1					
ANR	928475	CallExpression	"r_str_word_get0 ( arg , i )"		925487	0					
ANR	928476	Callee	r_str_word_get0		925487	0					
ANR	928477	Identifier	r_str_word_get0		925487	0					
ANR	928478	ArgumentList	arg		925487	1					
ANR	928479	Argument	arg		925487	0					
ANR	928480	Identifier	arg		925487	0					
ANR	928481	Argument	i		925487	1					
ANR	928482	Identifier	i		925487	0					
ANR	928483	ExpressionStatement	"r_print_portionbar ( core -> print , portions , n )"	870:3:26316:26361	925487	4	True				
ANR	928484	CallExpression	"r_print_portionbar ( core -> print , portions , n )"		925487	0					
ANR	928485	Callee	r_print_portionbar		925487	0					
ANR	928486	Identifier	r_print_portionbar		925487	0					
ANR	928487	ArgumentList	core -> print		925487	1					
ANR	928488	Argument	core -> print		925487	0					
ANR	928489	PtrMemberAccess	core -> print		925487	0					
ANR	928490	Identifier	core		925487	0					
ANR	928491	Identifier	print		925487	1					
ANR	928492	Argument	portions		925487	1					
ANR	928493	Identifier	portions		925487	0					
ANR	928494	Argument	n		925487	2					
ANR	928495	Identifier	n		925487	0					
ANR	928496	ExpressionStatement	free ( arg )	871:3:26366:26376	925487	5	True				
ANR	928497	CallExpression	free ( arg )		925487	0					
ANR	928498	Callee	free		925487	0					
ANR	928499	Identifier	free		925487	0					
ANR	928500	ArgumentList	arg		925487	1					
ANR	928501	Argument	arg		925487	0					
ANR	928502	Identifier	arg		925487	0					
ANR	928503	BreakStatement	break ;	872:3:26381:26386	925487	6	True				
ANR	928504	Label	case 's' :	874:2:26394:26402	925487	4	True				
ANR	928505	CompoundStatement		492:3:12938:12965	925487	5					
ANR	928506	IdentifierDeclStatement	char * msg = strdup ( input + 2 ) ;	875:3:26418:26448	925487	0	True				
ANR	928507	IdentifierDecl	* msg = strdup ( input + 2 )		925487	0					
ANR	928508	IdentifierDeclType	char *		925487	0					
ANR	928509	Identifier	msg		925487	1					
ANR	928510	AssignmentExpression	* msg = strdup ( input + 2 )		925487	2		=			
ANR	928511	Identifier	msg		925487	0					
ANR	928512	CallExpression	strdup ( input + 2 )		925487	1					
ANR	928513	Callee	strdup		925487	0					
ANR	928514	Identifier	strdup		925487	0					
ANR	928515	ArgumentList	input + 2		925487	1					
ANR	928516	Argument	input + 2		925487	0					
ANR	928517	AdditiveExpression	input + 2		925487	0		+			
ANR	928518	Identifier	input		925487	0					
ANR	928519	PrimaryExpression	2		925487	1					
ANR	928520	ExpressionStatement	r_str_trim ( msg )	876:3:26453:26469	925487	1	True				
ANR	928521	CallExpression	r_str_trim ( msg )		925487	0					
ANR	928522	Callee	r_str_trim		925487	0					
ANR	928523	Identifier	r_str_trim		925487	0					
ANR	928524	ArgumentList	msg		925487	1					
ANR	928525	Argument	msg		925487	0					
ANR	928526	Identifier	msg		925487	0					
ANR	928527	IdentifierDeclStatement	"char * p = strchr ( msg , '&' ) ;"	877:3:26474:26501	925487	2	True				
ANR	928528	IdentifierDecl	"* p = strchr ( msg , '&' )"		925487	0					
ANR	928529	IdentifierDeclType	char *		925487	0					
ANR	928530	Identifier	p		925487	1					
ANR	928531	AssignmentExpression	"* p = strchr ( msg , '&' )"		925487	2		=			
ANR	928532	Identifier	p		925487	0					
ANR	928533	CallExpression	"strchr ( msg , '&' )"		925487	1					
ANR	928534	Callee	strchr		925487	0					
ANR	928535	Identifier	strchr		925487	0					
ANR	928536	ArgumentList	msg		925487	1					
ANR	928537	Argument	msg		925487	0					
ANR	928538	Identifier	msg		925487	0					
ANR	928539	Argument	'&'		925487	1					
ANR	928540	PrimaryExpression	'&'		925487	0					
ANR	928541	IfStatement	if ( p )		925487	3					
ANR	928542	Condition	p	878:7:26510:26510	925487	0	True				
ANR	928543	Identifier	p		925487	0					
ANR	928544	ExpressionStatement	* p = 0	878:10:26513:26519	925487	1	True				
ANR	928545	AssignmentExpression	* p = 0		925487	0		=			
ANR	928546	UnaryOperationExpression	* p		925487	0					
ANR	928547	UnaryOperator	*		925487	0					
ANR	928548	Identifier	p		925487	1					
ANR	928549	PrimaryExpression	0		925487	1					
ANR	928550	ExpressionStatement	"r_sys_tts ( msg , p != NULL )"	879:3:26524:26550	925487	4	True				
ANR	928551	CallExpression	"r_sys_tts ( msg , p != NULL )"		925487	0					
ANR	928552	Callee	r_sys_tts		925487	0					
ANR	928553	Identifier	r_sys_tts		925487	0					
ANR	928554	ArgumentList	msg		925487	1					
ANR	928555	Argument	msg		925487	0					
ANR	928556	Identifier	msg		925487	0					
ANR	928557	Argument	p != NULL		925487	1					
ANR	928558	EqualityExpression	p != NULL		925487	0		!=			
ANR	928559	Identifier	p		925487	0					
ANR	928560	Identifier	NULL		925487	1					
ANR	928561	ExpressionStatement	free ( msg )	880:3:26555:26565	925487	5	True				
ANR	928562	CallExpression	free ( msg )		925487	0					
ANR	928563	Callee	free		925487	0					
ANR	928564	Identifier	free		925487	0					
ANR	928565	ArgumentList	msg		925487	1					
ANR	928566	Argument	msg		925487	0					
ANR	928567	Identifier	msg		925487	0					
ANR	928568	BreakStatement	break ;	881:3:26570:26575	925487	6	True				
ANR	928569	Label	case 'c' :	883:2:26583:26591	925487	6	True				
ANR	928570	ExpressionStatement	"r_cons_column ( r_num_math ( core -> num , input + 2 ) )"	884:3:26612:26661	925487	7	True				
ANR	928571	CallExpression	"r_cons_column ( r_num_math ( core -> num , input + 2 ) )"		925487	0					
ANR	928572	Callee	r_cons_column		925487	0					
ANR	928573	Identifier	r_cons_column		925487	0					
ANR	928574	ArgumentList	"r_num_math ( core -> num , input + 2 )"		925487	1					
ANR	928575	Argument	"r_num_math ( core -> num , input + 2 )"		925487	0					
ANR	928576	CallExpression	"r_num_math ( core -> num , input + 2 )"		925487	0					
ANR	928577	Callee	r_num_math		925487	0					
ANR	928578	Identifier	r_num_math		925487	0					
ANR	928579	ArgumentList	core -> num		925487	1					
ANR	928580	Argument	core -> num		925487	0					
ANR	928581	PtrMemberAccess	core -> num		925487	0					
ANR	928582	Identifier	core		925487	0					
ANR	928583	Identifier	num		925487	1					
ANR	928584	Argument	input + 2		925487	1					
ANR	928585	AdditiveExpression	input + 2		925487	0		+			
ANR	928586	Identifier	input		925487	0					
ANR	928587	PrimaryExpression	2		925487	1					
ANR	928588	BreakStatement	break ;	885:3:26666:26671	925487	8	True				
ANR	928589	Label	case 'g' :	886:2:26675:26683	925487	9	True				
ANR	928590	CompoundStatement		504:3:13239:13269	925487	10					
ANR	928591	IdentifierDeclStatement	int x = atoi ( input + 2 ) ;	887:3:26706:26730	925487	0	True				
ANR	928592	IdentifierDecl	x = atoi ( input + 2 )		925487	0					
ANR	928593	IdentifierDeclType	int		925487	0					
ANR	928594	Identifier	x		925487	1					
ANR	928595	AssignmentExpression	x = atoi ( input + 2 )		925487	2		=			
ANR	928596	Identifier	x		925487	0					
ANR	928597	CallExpression	atoi ( input + 2 )		925487	1					
ANR	928598	Callee	atoi		925487	0					
ANR	928599	Identifier	atoi		925487	0					
ANR	928600	ArgumentList	input + 2		925487	1					
ANR	928601	Argument	input + 2		925487	0					
ANR	928602	AdditiveExpression	input + 2		925487	0		+			
ANR	928603	Identifier	input		925487	0					
ANR	928604	PrimaryExpression	2		925487	1					
ANR	928605	IdentifierDeclStatement	"char * arg = strchr ( input + 2 , ' ' ) ;"	888:3:26735:26770	925487	1	True				
ANR	928606	IdentifierDecl	"* arg = strchr ( input + 2 , ' ' )"		925487	0					
ANR	928607	IdentifierDeclType	char *		925487	0					
ANR	928608	Identifier	arg		925487	1					
ANR	928609	AssignmentExpression	"* arg = strchr ( input + 2 , ' ' )"		925487	2		=			
ANR	928610	Identifier	arg		925487	0					
ANR	928611	CallExpression	"strchr ( input + 2 , ' ' )"		925487	1					
ANR	928612	Callee	strchr		925487	0					
ANR	928613	Identifier	strchr		925487	0					
ANR	928614	ArgumentList	input + 2		925487	1					
ANR	928615	Argument	input + 2		925487	0					
ANR	928616	AdditiveExpression	input + 2		925487	0		+			
ANR	928617	Identifier	input		925487	0					
ANR	928618	PrimaryExpression	2		925487	1					
ANR	928619	Argument	' '		925487	1					
ANR	928620	PrimaryExpression	' '		925487	0					
ANR	928621	IdentifierDeclStatement	int y = arg ? atoi ( arg + 1 ) : 0 ;	889:3:26775:26805	925487	2	True				
ANR	928622	IdentifierDecl	y = arg ? atoi ( arg + 1 ) : 0		925487	0					
ANR	928623	IdentifierDeclType	int		925487	0					
ANR	928624	Identifier	y		925487	1					
ANR	928625	AssignmentExpression	y = arg ? atoi ( arg + 1 ) : 0		925487	2		=			
ANR	928626	Identifier	y		925487	0					
ANR	928627	ConditionalExpression	arg ? atoi ( arg + 1 ) : 0		925487	1					
ANR	928628	Condition	arg		925487	0					
ANR	928629	Identifier	arg		925487	0					
ANR	928630	CallExpression	atoi ( arg + 1 )		925487	1					
ANR	928631	Callee	atoi		925487	0					
ANR	928632	Identifier	atoi		925487	0					
ANR	928633	ArgumentList	arg + 1		925487	1					
ANR	928634	Argument	arg + 1		925487	0					
ANR	928635	AdditiveExpression	arg + 1		925487	0		+			
ANR	928636	Identifier	arg		925487	0					
ANR	928637	PrimaryExpression	1		925487	1					
ANR	928638	PrimaryExpression	0		925487	2					
ANR	928639	ExpressionStatement	"r_cons_gotoxy ( x , y )"	890:3:26810:26830	925487	3	True				
ANR	928640	CallExpression	"r_cons_gotoxy ( x , y )"		925487	0					
ANR	928641	Callee	r_cons_gotoxy		925487	0					
ANR	928642	Identifier	r_cons_gotoxy		925487	0					
ANR	928643	ArgumentList	x		925487	1					
ANR	928644	Argument	x		925487	0					
ANR	928645	Identifier	x		925487	0					
ANR	928646	Argument	y		925487	1					
ANR	928647	Identifier	y		925487	0					
ANR	928648	BreakStatement	break ;	892:3:26840:26845	925487	11	True				
ANR	928649	Label	case 'n' :	893:2:26849:26857	925487	12	True				
ANR	928650	CompoundStatement		511:3:13450:13488	925487	13					
ANR	928651	IdentifierDeclStatement	const char * msg = r_str_trim_ro ( input + 2 ) ;	894:3:26881:26924	925487	0	True				
ANR	928652	IdentifierDecl	* msg = r_str_trim_ro ( input + 2 )		925487	0					
ANR	928653	IdentifierDeclType	const char *		925487	0					
ANR	928654	Identifier	msg		925487	1					
ANR	928655	AssignmentExpression	* msg = r_str_trim_ro ( input + 2 )		925487	2		=			
ANR	928656	Identifier	msg		925487	0					
ANR	928657	CallExpression	r_str_trim_ro ( input + 2 )		925487	1					
ANR	928658	Callee	r_str_trim_ro		925487	0					
ANR	928659	Identifier	r_str_trim_ro		925487	0					
ANR	928660	ArgumentList	input + 2		925487	1					
ANR	928661	Argument	input + 2		925487	0					
ANR	928662	AdditiveExpression	input + 2		925487	0		+			
ANR	928663	Identifier	input		925487	0					
ANR	928664	PrimaryExpression	2		925487	1					
ANR	928665	IdentifierDeclStatement	"char * newmsg = filterFlags ( core , msg ) ;"	896:3:26986:27024	925487	1	True				
ANR	928666	IdentifierDecl	"* newmsg = filterFlags ( core , msg )"		925487	0					
ANR	928667	IdentifierDeclType	char *		925487	0					
ANR	928668	Identifier	newmsg		925487	1					
ANR	928669	AssignmentExpression	"* newmsg = filterFlags ( core , msg )"		925487	2		=			
ANR	928670	Identifier	newmsg		925487	0					
ANR	928671	CallExpression	"filterFlags ( core , msg )"		925487	1					
ANR	928672	Callee	filterFlags		925487	0					
ANR	928673	Identifier	filterFlags		925487	0					
ANR	928674	ArgumentList	core		925487	1					
ANR	928675	Argument	core		925487	0					
ANR	928676	Identifier	core		925487	0					
ANR	928677	Argument	msg		925487	1					
ANR	928678	Identifier	msg		925487	0					
ANR	928679	ExpressionStatement	r_str_unescape ( newmsg )	897:3:27029:27052	925487	2	True				
ANR	928680	CallExpression	r_str_unescape ( newmsg )		925487	0					
ANR	928681	Callee	r_str_unescape		925487	0					
ANR	928682	Identifier	r_str_unescape		925487	0					
ANR	928683	ArgumentList	newmsg		925487	1					
ANR	928684	Argument	newmsg		925487	0					
ANR	928685	Identifier	newmsg		925487	0					
ANR	928686	ExpressionStatement	r_cons_print ( newmsg )	898:3:27057:27078	925487	3	True				
ANR	928687	CallExpression	r_cons_print ( newmsg )		925487	0					
ANR	928688	Callee	r_cons_print		925487	0					
ANR	928689	Identifier	r_cons_print		925487	0					
ANR	928690	ArgumentList	newmsg		925487	1					
ANR	928691	Argument	newmsg		925487	0					
ANR	928692	Identifier	newmsg		925487	0					
ANR	928693	ExpressionStatement	free ( newmsg )	899:3:27083:27096	925487	4	True				
ANR	928694	CallExpression	free ( newmsg )		925487	0					
ANR	928695	Callee	free		925487	0					
ANR	928696	Identifier	free		925487	0					
ANR	928697	ArgumentList	newmsg		925487	1					
ANR	928698	Argument	newmsg		925487	0					
ANR	928699	Identifier	newmsg		925487	0					
ANR	928700	BreakStatement	break ;	900:3:27101:27106	925487	5	True				
ANR	928701	Label	case 'd' :	902:2:27114:27122	925487	14	True				
ANR	928702	IfStatement	if ( input [ 2 ] == 'd' )		925487	15					
ANR	928703	Condition	input [ 2 ] == 'd'	903:9:27142:27156	925487	0	True				
ANR	928704	EqualityExpression	input [ 2 ] == 'd'		925487	0		==			
ANR	928705	ArrayIndexing	input [ 2 ]		925487	0					
ANR	928706	Identifier	input		925487	0					
ANR	928707	PrimaryExpression	2		925487	1					
ANR	928708	PrimaryExpression	'd'		925487	1					
ANR	928709	CompoundStatement		519:6:13631:13638	925487	1					
ANR	928710	IdentifierDeclStatement	"int i , j ;"	904:6:27167:27174	925487	0	True				
ANR	928711	IdentifierDecl	i		925487	0					
ANR	928712	IdentifierDeclType	int		925487	0					
ANR	928713	Identifier	i		925487	1					
ANR	928714	IdentifierDecl	j		925487	1					
ANR	928715	IdentifierDeclType	int		925487	0					
ANR	928716	Identifier	j		925487	1					
ANR	928717	ExpressionStatement	r_cons_show_cursor ( 0 )	905:6:27182:27204	925487	1	True				
ANR	928718	CallExpression	r_cons_show_cursor ( 0 )		925487	0					
ANR	928719	Callee	r_cons_show_cursor		925487	0					
ANR	928720	Identifier	r_cons_show_cursor		925487	0					
ANR	928721	ArgumentList	0		925487	1					
ANR	928722	Argument	0		925487	0					
ANR	928723	PrimaryExpression	0		925487	0					
ANR	928724	ExpressionStatement	r_cons_clear00 ( )	906:6:27212:27229	925487	2	True				
ANR	928725	CallExpression	r_cons_clear00 ( )		925487	0					
ANR	928726	Callee	r_cons_clear00		925487	0					
ANR	928727	Identifier	r_cons_clear00		925487	0					
ANR	928728	ArgumentList			925487	1					
ANR	928729	ForStatement	for ( i = 1 ; i < 100 ; i ++ )		925487	3					
ANR	928730	ForInit	i = 1 ;	907:11:27242:27247	925487	0	True				
ANR	928731	AssignmentExpression	i = 1		925487	0		=			
ANR	928732	Identifier	i		925487	0					
ANR	928733	PrimaryExpression	1		925487	1					
ANR	928734	Condition	i < 100	907:18:27249:27255	925487	1	True				
ANR	928735	RelationalExpression	i < 100		925487	0		<			
ANR	928736	Identifier	i		925487	0					
ANR	928737	PrimaryExpression	100		925487	1					
ANR	928738	PostIncDecOperationExpression	i ++	907:27:27258:27260	925487	2	True				
ANR	928739	Identifier	i		925487	0					
ANR	928740	IncDec	++		925487	1					
ANR	928741	CompoundStatement		522:32:13727:13727	925487	3					
ANR	928742	IfStatement	if ( r_cons_is_breaked ( ) )		925487	0					
ANR	928743	Condition	r_cons_is_breaked ( )	908:11:27276:27295	925487	0	True				
ANR	928744	CallExpression	r_cons_is_breaked ( )		925487	0					
ANR	928745	Callee	r_cons_is_breaked		925487	0					
ANR	928746	Identifier	r_cons_is_breaked		925487	0					
ANR	928747	ArgumentList			925487	1					
ANR	928748	CompoundStatement		523:33:13762:13762	925487	1					
ANR	928749	BreakStatement	break ;	909:8:27308:27313	925487	0	True				
ANR	928750	ForStatement	for ( j = 0 ; j < 20 ; j ++ )		925487	1					
ANR	928751	ForInit	j = 0 ;	911:12:27336:27341	925487	0	True				
ANR	928752	AssignmentExpression	j = 0		925487	0		=			
ANR	928753	Identifier	j		925487	0					
ANR	928754	PrimaryExpression	0		925487	1					
ANR	928755	Condition	j < 20	911:19:27343:27348	925487	1	True				
ANR	928756	RelationalExpression	j < 20		925487	0		<			
ANR	928757	Identifier	j		925487	0					
ANR	928758	PrimaryExpression	20		925487	1					
ANR	928759	PostIncDecOperationExpression	j ++	911:27:27351:27353	925487	2	True				
ANR	928760	Identifier	j		925487	0					
ANR	928761	IncDec	++		925487	1					
ANR	928762	CompoundStatement		527:8:13830:13855	925487	3					
ANR	928763	IdentifierDeclStatement	char * d = r_str_donut ( i ) ;	912:8:27366:27391	925487	0	True				
ANR	928764	IdentifierDecl	* d = r_str_donut ( i )		925487	0					
ANR	928765	IdentifierDeclType	char *		925487	0					
ANR	928766	Identifier	d		925487	1					
ANR	928767	AssignmentExpression	* d = r_str_donut ( i )		925487	2		=			
ANR	928768	Identifier	d		925487	0					
ANR	928769	CallExpression	r_str_donut ( i )		925487	1					
ANR	928770	Callee	r_str_donut		925487	0					
ANR	928771	Identifier	r_str_donut		925487	0					
ANR	928772	ArgumentList	i		925487	1					
ANR	928773	Argument	i		925487	0					
ANR	928774	Identifier	i		925487	0					
ANR	928775	ExpressionStatement	"r_cons_gotoxy ( 0 , 0 )"	913:8:27401:27420	925487	1	True				
ANR	928776	CallExpression	"r_cons_gotoxy ( 0 , 0 )"		925487	0					
ANR	928777	Callee	r_cons_gotoxy		925487	0					
ANR	928778	Identifier	r_cons_gotoxy		925487	0					
ANR	928779	ArgumentList	0		925487	1					
ANR	928780	Argument	0		925487	0					
ANR	928781	PrimaryExpression	0		925487	0					
ANR	928782	Argument	0		925487	1					
ANR	928783	PrimaryExpression	0		925487	0					
ANR	928784	ExpressionStatement	r_str_trim_tail ( d )	914:8:27430:27449	925487	2	True				
ANR	928785	CallExpression	r_str_trim_tail ( d )		925487	0					
ANR	928786	Callee	r_str_trim_tail		925487	0					
ANR	928787	Identifier	r_str_trim_tail		925487	0					
ANR	928788	ArgumentList	d		925487	1					
ANR	928789	Argument	d		925487	0					
ANR	928790	Identifier	d		925487	0					
ANR	928791	ExpressionStatement	r_cons_clear_line ( 0 )	915:8:27459:27480	925487	3	True				
ANR	928792	CallExpression	r_cons_clear_line ( 0 )		925487	0					
ANR	928793	Callee	r_cons_clear_line		925487	0					
ANR	928794	Identifier	r_cons_clear_line		925487	0					
ANR	928795	ArgumentList	0		925487	1					
ANR	928796	Argument	0		925487	0					
ANR	928797	PrimaryExpression	0		925487	0					
ANR	928798	ExpressionStatement	"r_cons_printf ( ""Downloading the Gibson...\\n\\n"" )"	916:8:27490:27537	925487	4	True				
ANR	928799	CallExpression	"r_cons_printf ( ""Downloading the Gibson...\\n\\n"" )"		925487	0					
ANR	928800	Callee	r_cons_printf		925487	0					
ANR	928801	Identifier	r_cons_printf		925487	0					
ANR	928802	ArgumentList	"""Downloading the Gibson...\\n\\n"""		925487	1					
ANR	928803	Argument	"""Downloading the Gibson...\\n\\n"""		925487	0					
ANR	928804	PrimaryExpression	"""Downloading the Gibson...\\n\\n"""		925487	0					
ANR	928805	ExpressionStatement	"r_core_cmdf ( core , ""?e=%d"" , i )"	917:8:27547:27577	925487	5	True				
ANR	928806	CallExpression	"r_core_cmdf ( core , ""?e=%d"" , i )"		925487	0					
ANR	928807	Callee	r_core_cmdf		925487	0					
ANR	928808	Identifier	r_core_cmdf		925487	0					
ANR	928809	ArgumentList	core		925487	1					
ANR	928810	Argument	core		925487	0					
ANR	928811	Identifier	core		925487	0					
ANR	928812	Argument	"""?e=%d"""		925487	1					
ANR	928813	PrimaryExpression	"""?e=%d"""		925487	0					
ANR	928814	Argument	i		925487	2					
ANR	928815	Identifier	i		925487	0					
ANR	928816	ExpressionStatement	r_cons_strcat ( d )	918:8:27587:27604	925487	6	True				
ANR	928817	CallExpression	r_cons_strcat ( d )		925487	0					
ANR	928818	Callee	r_cons_strcat		925487	0					
ANR	928819	Identifier	r_cons_strcat		925487	0					
ANR	928820	ArgumentList	d		925487	1					
ANR	928821	Argument	d		925487	0					
ANR	928822	Identifier	d		925487	0					
ANR	928823	ExpressionStatement	r_cons_clear_line ( 0 )	919:8:27614:27635	925487	7	True				
ANR	928824	CallExpression	r_cons_clear_line ( 0 )		925487	0					
ANR	928825	Callee	r_cons_clear_line		925487	0					
ANR	928826	Identifier	r_cons_clear_line		925487	0					
ANR	928827	ArgumentList	0		925487	1					
ANR	928828	Argument	0		925487	0					
ANR	928829	PrimaryExpression	0		925487	0					
ANR	928830	ExpressionStatement	r_cons_newline ( )	920:8:27645:27662	925487	8	True				
ANR	928831	CallExpression	r_cons_newline ( )		925487	0					
ANR	928832	Callee	r_cons_newline		925487	0					
ANR	928833	Identifier	r_cons_newline		925487	0					
ANR	928834	ArgumentList			925487	1					
ANR	928835	ExpressionStatement	free ( d )	921:8:27672:27680	925487	9	True				
ANR	928836	CallExpression	free ( d )		925487	0					
ANR	928837	Callee	free		925487	0					
ANR	928838	Identifier	free		925487	0					
ANR	928839	ArgumentList	d		925487	1					
ANR	928840	Argument	d		925487	0					
ANR	928841	Identifier	d		925487	0					
ANR	928842	ExpressionStatement	r_cons_flush ( )	922:8:27690:27705	925487	10	True				
ANR	928843	CallExpression	r_cons_flush ( )		925487	0					
ANR	928844	Callee	r_cons_flush		925487	0					
ANR	928845	Identifier	r_cons_flush		925487	0					
ANR	928846	ArgumentList			925487	1					
ANR	928847	ExpressionStatement	r_sys_usleep ( 2000 )	923:8:27715:27734	925487	11	True				
ANR	928848	CallExpression	r_sys_usleep ( 2000 )		925487	0					
ANR	928849	Callee	r_sys_usleep		925487	0					
ANR	928850	Identifier	r_sys_usleep		925487	0					
ANR	928851	ArgumentList	2000		925487	1					
ANR	928852	Argument	2000		925487	0					
ANR	928853	PrimaryExpression	2000		925487	0					
ANR	928854	ExpressionStatement	r_cons_clear00 ( )	926:6:27759:27775	925487	4	True				
ANR	928855	CallExpression	r_cons_clear00 ( )		925487	0					
ANR	928856	Callee	r_cons_clear00		925487	0					
ANR	928857	Identifier	r_cons_clear00		925487	0					
ANR	928858	ArgumentList			925487	1					
ANR	928859	ExpressionStatement	"r_cons_printf ( ""\\nPayload installed. Thanks for your patience.\\n\\n"" )"	927:6:27783:27851	925487	5	True				
ANR	928860	CallExpression	"r_cons_printf ( ""\\nPayload installed. Thanks for your patience.\\n\\n"" )"		925487	0					
ANR	928861	Callee	r_cons_printf		925487	0					
ANR	928862	Identifier	r_cons_printf		925487	0					
ANR	928863	ArgumentList	"""\\nPayload installed. Thanks for your patience.\\n\\n"""		925487	1					
ANR	928864	Argument	"""\\nPayload installed. Thanks for your patience.\\n\\n"""		925487	0					
ANR	928865	PrimaryExpression	"""\\nPayload installed. Thanks for your patience.\\n\\n"""		925487	0					
ANR	928866	ElseStatement	else		925487	0					
ANR	928867	CompoundStatement		546:6:14427:14527	925487	0					
ANR	928868	IdentifierDeclStatement	"char * d = r_str_donut ( r_num_math ( core -> num , input + 2 ) ) ;"	929:6:27871:27928	925487	0	True				
ANR	928869	IdentifierDecl	"* d = r_str_donut ( r_num_math ( core -> num , input + 2 ) )"		925487	0					
ANR	928870	IdentifierDeclType	char *		925487	0					
ANR	928871	Identifier	d		925487	1					
ANR	928872	AssignmentExpression	"* d = r_str_donut ( r_num_math ( core -> num , input + 2 ) )"		925487	2		=			
ANR	928873	Identifier	d		925487	0					
ANR	928874	CallExpression	"r_str_donut ( r_num_math ( core -> num , input + 2 ) )"		925487	1					
ANR	928875	Callee	r_str_donut		925487	0					
ANR	928876	Identifier	r_str_donut		925487	0					
ANR	928877	ArgumentList	"r_num_math ( core -> num , input + 2 )"		925487	1					
ANR	928878	Argument	"r_num_math ( core -> num , input + 2 )"		925487	0					
ANR	928879	CallExpression	"r_num_math ( core -> num , input + 2 )"		925487	0					
ANR	928880	Callee	r_num_math		925487	0					
ANR	928881	Identifier	r_num_math		925487	0					
ANR	928882	ArgumentList	core -> num		925487	1					
ANR	928883	Argument	core -> num		925487	0					
ANR	928884	PtrMemberAccess	core -> num		925487	0					
ANR	928885	Identifier	core		925487	0					
ANR	928886	Identifier	num		925487	1					
ANR	928887	Argument	input + 2		925487	1					
ANR	928888	AdditiveExpression	input + 2		925487	0		+			
ANR	928889	Identifier	input		925487	0					
ANR	928890	PrimaryExpression	2		925487	1					
ANR	928891	ExpressionStatement	r_str_trim_tail ( d )	930:6:27936:27955	925487	1	True				
ANR	928892	CallExpression	r_str_trim_tail ( d )		925487	0					
ANR	928893	Callee	r_str_trim_tail		925487	0					
ANR	928894	Identifier	r_str_trim_tail		925487	0					
ANR	928895	ArgumentList	d		925487	1					
ANR	928896	Argument	d		925487	0					
ANR	928897	Identifier	d		925487	0					
ANR	928898	IdentifierDeclStatement	"const char * color = ( core -> cons && core -> cons -> context -> pal . flag ) ? core -> cons -> context -> pal . flag : """" ;"	931:6:27963:28063	925487	2	True				
ANR	928899	IdentifierDecl	"* color = ( core -> cons && core -> cons -> context -> pal . flag ) ? core -> cons -> context -> pal . flag : """""		925487	0					
ANR	928900	IdentifierDeclType	const char *		925487	0					
ANR	928901	Identifier	color		925487	1					
ANR	928902	AssignmentExpression	"* color = ( core -> cons && core -> cons -> context -> pal . flag ) ? core -> cons -> context -> pal . flag : """""		925487	2		=			
ANR	928903	Identifier	color		925487	0					
ANR	928904	ConditionalExpression	"( core -> cons && core -> cons -> context -> pal . flag ) ? core -> cons -> context -> pal . flag : """""		925487	1					
ANR	928905	Condition	core -> cons && core -> cons -> context -> pal . flag		925487	0					
ANR	928906	AndExpression	core -> cons && core -> cons -> context -> pal . flag		925487	0		&&			
ANR	928907	PtrMemberAccess	core -> cons		925487	0					
ANR	928908	Identifier	core		925487	0					
ANR	928909	Identifier	cons		925487	1					
ANR	928910	MemberAccess	core -> cons -> context -> pal . flag		925487	1					
ANR	928911	PtrMemberAccess	core -> cons -> context -> pal		925487	0					
ANR	928912	PtrMemberAccess	core -> cons -> context		925487	0					
ANR	928913	PtrMemberAccess	core -> cons		925487	0					
ANR	928914	Identifier	core		925487	0					
ANR	928915	Identifier	cons		925487	1					
ANR	928916	Identifier	context		925487	1					
ANR	928917	Identifier	pal		925487	1					
ANR	928918	Identifier	flag		925487	1					
ANR	928919	MemberAccess	core -> cons -> context -> pal . flag		925487	1					
ANR	928920	PtrMemberAccess	core -> cons -> context -> pal		925487	0					
ANR	928921	PtrMemberAccess	core -> cons -> context		925487	0					
ANR	928922	PtrMemberAccess	core -> cons		925487	0					
ANR	928923	Identifier	core		925487	0					
ANR	928924	Identifier	cons		925487	1					
ANR	928925	Identifier	context		925487	1					
ANR	928926	Identifier	pal		925487	1					
ANR	928927	Identifier	flag		925487	1					
ANR	928928	PrimaryExpression	""""""		925487	2					
ANR	928929	ExpressionStatement	"r_cons_printf ( ""%s%s"" , color , d )"	932:6:28071:28103	925487	3	True				
ANR	928930	CallExpression	"r_cons_printf ( ""%s%s"" , color , d )"		925487	0					
ANR	928931	Callee	r_cons_printf		925487	0					
ANR	928932	Identifier	r_cons_printf		925487	0					
ANR	928933	ArgumentList	"""%s%s"""		925487	1					
ANR	928934	Argument	"""%s%s"""		925487	0					
ANR	928935	PrimaryExpression	"""%s%s"""		925487	0					
ANR	928936	Argument	color		925487	1					
ANR	928937	Identifier	color		925487	0					
ANR	928938	Argument	d		925487	2					
ANR	928939	Identifier	d		925487	0					
ANR	928940	ExpressionStatement	r_cons_newline ( )	933:6:28111:28128	925487	4	True				
ANR	928941	CallExpression	r_cons_newline ( )		925487	0					
ANR	928942	Callee	r_cons_newline		925487	0					
ANR	928943	Identifier	r_cons_newline		925487	0					
ANR	928944	ArgumentList			925487	1					
ANR	928945	ExpressionStatement	free ( d )	934:6:28136:28144	925487	5	True				
ANR	928946	CallExpression	free ( d )		925487	0					
ANR	928947	Callee	free		925487	0					
ANR	928948	Identifier	free		925487	0					
ANR	928949	ArgumentList	d		925487	1					
ANR	928950	Argument	d		925487	0					
ANR	928951	Identifier	d		925487	0					
ANR	928952	BreakStatement	break ;	936:3:28154:28159	925487	16	True				
ANR	928953	Label	case 'p' :	937:2:28163:28171	925487	17	True				
ANR	928954	CompoundStatement		562:6:14932:14984	925487	18					
ANR	928955	IdentifierDeclStatement	"char * word , * str = strdup ( input + 2 ) ;"	939:3:28183:28220	925487	0	True				
ANR	928956	IdentifierDecl	* word		925487	0					
ANR	928957	IdentifierDeclType	char *		925487	0					
ANR	928958	Identifier	word		925487	1					
ANR	928959	IdentifierDecl	* str = strdup ( input + 2 )		925487	1					
ANR	928960	IdentifierDeclType	char *		925487	0					
ANR	928961	Identifier	str		925487	1					
ANR	928962	AssignmentExpression	* str = strdup ( input + 2 )		925487	2		=			
ANR	928963	Identifier	str		925487	0					
ANR	928964	CallExpression	strdup ( input + 2 )		925487	1					
ANR	928965	Callee	strdup		925487	0					
ANR	928966	Identifier	strdup		925487	0					
ANR	928967	ArgumentList	input + 2		925487	1					
ANR	928968	Argument	input + 2		925487	0					
ANR	928969	AdditiveExpression	input + 2		925487	0		+			
ANR	928970	Identifier	input		925487	0					
ANR	928971	PrimaryExpression	2		925487	1					
ANR	928972	IdentifierDeclStatement	"RList * list = r_str_split_list ( str , "" "" , 0 ) ;"	940:6:28228:28272	925487	1	True				
ANR	928973	IdentifierDecl	"* list = r_str_split_list ( str , "" "" , 0 )"		925487	0					
ANR	928974	IdentifierDeclType	RList *		925487	0					
ANR	928975	Identifier	list		925487	1					
ANR	928976	AssignmentExpression	"* list = r_str_split_list ( str , "" "" , 0 )"		925487	2		=			
ANR	928977	Identifier	list		925487	0					
ANR	928978	CallExpression	"r_str_split_list ( str , "" "" , 0 )"		925487	1					
ANR	928979	Callee	r_str_split_list		925487	0					
ANR	928980	Identifier	r_str_split_list		925487	0					
ANR	928981	ArgumentList	str		925487	1					
ANR	928982	Argument	str		925487	0					
ANR	928983	Identifier	str		925487	0					
ANR	928984	Argument	""" """		925487	1					
ANR	928985	PrimaryExpression	""" """		925487	0					
ANR	928986	Argument	0		925487	2					
ANR	928987	PrimaryExpression	0		925487	0					
ANR	928988	IdentifierDeclStatement	"ut64 * nums = calloc ( sizeof ( ut64 ) , r_list_length ( list ) ) ;"	941:6:28280:28337	925487	2	True				
ANR	928989	IdentifierDecl	"* nums = calloc ( sizeof ( ut64 ) , r_list_length ( list ) )"		925487	0					
ANR	928990	IdentifierDeclType	ut64 *		925487	0					
ANR	928991	Identifier	nums		925487	1					
ANR	928992	AssignmentExpression	"* nums = calloc ( sizeof ( ut64 ) , r_list_length ( list ) )"		925487	2		=			
ANR	928993	Identifier	nums		925487	0					
ANR	928994	CallExpression	"calloc ( sizeof ( ut64 ) , r_list_length ( list ) )"		925487	1					
ANR	928995	Callee	calloc		925487	0					
ANR	928996	Identifier	calloc		925487	0					
ANR	928997	ArgumentList	sizeof ( ut64 )		925487	1					
ANR	928998	Argument	sizeof ( ut64 )		925487	0					
ANR	928999	SizeofExpression	sizeof ( ut64 )		925487	0					
ANR	929000	Sizeof	sizeof		925487	0					
ANR	929001	SizeofOperand	ut64		925487	1					
ANR	929002	Argument	r_list_length ( list )		925487	1					
ANR	929003	CallExpression	r_list_length ( list )		925487	0					
ANR	929004	Callee	r_list_length		925487	0					
ANR	929005	Identifier	r_list_length		925487	0					
ANR	929006	ArgumentList	list		925487	1					
ANR	929007	Argument	list		925487	0					
ANR	929008	Identifier	list		925487	0					
ANR	929009	IdentifierDeclStatement	int i = 0 ;	942:6:28345:28354	925487	3	True				
ANR	929010	IdentifierDecl	i = 0		925487	0					
ANR	929011	IdentifierDeclType	int		925487	0					
ANR	929012	Identifier	i		925487	1					
ANR	929013	AssignmentExpression	i = 0		925487	2		=			
ANR	929014	Identifier	i		925487	0					
ANR	929015	PrimaryExpression	0		925487	1					
ANR	929016	Statement	r_list_foreach	943:6:28362:28375	925487	4	True				
ANR	929017	Statement	(	943:21:28377:28377	925487	5	True				
ANR	929018	Statement	list	943:22:28378:28381	925487	6	True				
ANR	929019	Statement	","	943:26:28382:28382	925487	7	True				
ANR	929020	Statement	iter	943:28:28384:28387	925487	8	True				
ANR	929021	Statement	","	943:32:28388:28388	925487	9	True				
ANR	929022	Statement	word	943:34:28390:28393	925487	10	True				
ANR	929023	Statement	)	943:38:28394:28394	925487	11	True				
ANR	929024	CompoundStatement		558:40:14860:14860	925487	12					
ANR	929025	ExpressionStatement	"nums [ i ] = r_num_math ( core -> num , word )"	944:5:28403:28441	925487	0	True				
ANR	929026	AssignmentExpression	"nums [ i ] = r_num_math ( core -> num , word )"		925487	0		=			
ANR	929027	ArrayIndexing	nums [ i ]		925487	0					
ANR	929028	Identifier	nums		925487	0					
ANR	929029	Identifier	i		925487	1					
ANR	929030	CallExpression	"r_num_math ( core -> num , word )"		925487	1					
ANR	929031	Callee	r_num_math		925487	0					
ANR	929032	Identifier	r_num_math		925487	0					
ANR	929033	ArgumentList	core -> num		925487	1					
ANR	929034	Argument	core -> num		925487	0					
ANR	929035	PtrMemberAccess	core -> num		925487	0					
ANR	929036	Identifier	core		925487	0					
ANR	929037	Identifier	num		925487	1					
ANR	929038	Argument	word		925487	1					
ANR	929039	Identifier	word		925487	0					
ANR	929040	ExpressionStatement		944:44:28442:28442	925487	1	True				
ANR	929041	ExpressionStatement	i ++	945:5:28449:28452	925487	2	True				
ANR	929042	PostIncDecOperationExpression	i ++		925487	0					
ANR	929043	Identifier	i		925487	0					
ANR	929044	IncDec	++		925487	1					
ANR	929045	IdentifierDeclStatement	"int size = r_config_get_i ( core -> config , ""hex.cols"" ) ;"	947:6:28468:28520	925487	13	True				
ANR	929046	IdentifierDecl	"size = r_config_get_i ( core -> config , ""hex.cols"" )"		925487	0					
ANR	929047	IdentifierDeclType	int		925487	0					
ANR	929048	Identifier	size		925487	1					
ANR	929049	AssignmentExpression	"size = r_config_get_i ( core -> config , ""hex.cols"" )"		925487	2		=			
ANR	929050	Identifier	size		925487	0					
ANR	929051	CallExpression	"r_config_get_i ( core -> config , ""hex.cols"" )"		925487	1					
ANR	929052	Callee	r_config_get_i		925487	0					
ANR	929053	Identifier	r_config_get_i		925487	0					
ANR	929054	ArgumentList	core -> config		925487	1					
ANR	929055	Argument	core -> config		925487	0					
ANR	929056	PtrMemberAccess	core -> config		925487	0					
ANR	929057	Identifier	core		925487	0					
ANR	929058	Identifier	config		925487	1					
ANR	929059	Argument	"""hex.cols"""		925487	1					
ANR	929060	PrimaryExpression	"""hex.cols"""		925487	0					
ANR	929061	ExpressionStatement	"r_print_pie ( core -> print , nums , r_list_length ( list ) , size )"	948:6:28528:28587	925487	14	True				
ANR	929062	CallExpression	"r_print_pie ( core -> print , nums , r_list_length ( list ) , size )"		925487	0					
ANR	929063	Callee	r_print_pie		925487	0					
ANR	929064	Identifier	r_print_pie		925487	0					
ANR	929065	ArgumentList	core -> print		925487	1					
ANR	929066	Argument	core -> print		925487	0					
ANR	929067	PtrMemberAccess	core -> print		925487	0					
ANR	929068	Identifier	core		925487	0					
ANR	929069	Identifier	print		925487	1					
ANR	929070	Argument	nums		925487	1					
ANR	929071	Identifier	nums		925487	0					
ANR	929072	Argument	r_list_length ( list )		925487	2					
ANR	929073	CallExpression	r_list_length ( list )		925487	0					
ANR	929074	Callee	r_list_length		925487	0					
ANR	929075	Identifier	r_list_length		925487	0					
ANR	929076	ArgumentList	list		925487	1					
ANR	929077	Argument	list		925487	0					
ANR	929078	Identifier	list		925487	0					
ANR	929079	Argument	size		925487	3					
ANR	929080	Identifier	size		925487	0					
ANR	929081	ExpressionStatement	r_list_free ( list )	949:6:28595:28613	925487	15	True				
ANR	929082	CallExpression	r_list_free ( list )		925487	0					
ANR	929083	Callee	r_list_free		925487	0					
ANR	929084	Identifier	r_list_free		925487	0					
ANR	929085	ArgumentList	list		925487	1					
ANR	929086	Argument	list		925487	0					
ANR	929087	Identifier	list		925487	0					
ANR	929088	BreakStatement	break ;	951:3:28625:28630	925487	19	True				
ANR	929089	Label	case ' ' :	952:2:28634:28642	925487	20	True				
ANR	929090	CompoundStatement		570:3:15216:15254	925487	21					
ANR	929091	IdentifierDeclStatement	const char * msg = r_str_trim_ro ( input + 1 ) ;	953:3:28649:28690	925487	0	True				
ANR	929092	IdentifierDecl	* msg = r_str_trim_ro ( input + 1 )		925487	0					
ANR	929093	IdentifierDeclType	const char *		925487	0					
ANR	929094	Identifier	msg		925487	1					
ANR	929095	AssignmentExpression	* msg = r_str_trim_ro ( input + 1 )		925487	2		=			
ANR	929096	Identifier	msg		925487	0					
ANR	929097	CallExpression	r_str_trim_ro ( input + 1 )		925487	1					
ANR	929098	Callee	r_str_trim_ro		925487	0					
ANR	929099	Identifier	r_str_trim_ro		925487	0					
ANR	929100	ArgumentList	input + 1		925487	1					
ANR	929101	Argument	input + 1		925487	0					
ANR	929102	AdditiveExpression	input + 1		925487	0		+			
ANR	929103	Identifier	input		925487	0					
ANR	929104	PrimaryExpression	1		925487	1					
ANR	929105	IdentifierDeclStatement	"char * newmsg = filterFlags ( core , msg ) ;"	955:3:28752:28790	925487	1	True				
ANR	929106	IdentifierDecl	"* newmsg = filterFlags ( core , msg )"		925487	0					
ANR	929107	IdentifierDeclType	char *		925487	0					
ANR	929108	Identifier	newmsg		925487	1					
ANR	929109	AssignmentExpression	"* newmsg = filterFlags ( core , msg )"		925487	2		=			
ANR	929110	Identifier	newmsg		925487	0					
ANR	929111	CallExpression	"filterFlags ( core , msg )"		925487	1					
ANR	929112	Callee	filterFlags		925487	0					
ANR	929113	Identifier	filterFlags		925487	0					
ANR	929114	ArgumentList	core		925487	1					
ANR	929115	Argument	core		925487	0					
ANR	929116	Identifier	core		925487	0					
ANR	929117	Argument	msg		925487	1					
ANR	929118	Identifier	msg		925487	0					
ANR	929119	ExpressionStatement	r_str_unescape ( newmsg )	956:3:28795:28818	925487	2	True				
ANR	929120	CallExpression	r_str_unescape ( newmsg )		925487	0					
ANR	929121	Callee	r_str_unescape		925487	0					
ANR	929122	Identifier	r_str_unescape		925487	0					
ANR	929123	ArgumentList	newmsg		925487	1					
ANR	929124	Argument	newmsg		925487	0					
ANR	929125	Identifier	newmsg		925487	0					
ANR	929126	ExpressionStatement	r_cons_println ( newmsg )	957:3:28823:28846	925487	3	True				
ANR	929127	CallExpression	r_cons_println ( newmsg )		925487	0					
ANR	929128	Callee	r_cons_println		925487	0					
ANR	929129	Identifier	r_cons_println		925487	0					
ANR	929130	ArgumentList	newmsg		925487	1					
ANR	929131	Argument	newmsg		925487	0					
ANR	929132	Identifier	newmsg		925487	0					
ANR	929133	ExpressionStatement	free ( newmsg )	958:3:28851:28864	925487	4	True				
ANR	929134	CallExpression	free ( newmsg )		925487	0					
ANR	929135	Callee	free		925487	0					
ANR	929136	Identifier	free		925487	0					
ANR	929137	ArgumentList	newmsg		925487	1					
ANR	929138	Argument	newmsg		925487	0					
ANR	929139	Identifier	newmsg		925487	0					
ANR	929140	BreakStatement	break ;	960:3:28874:28879	925487	22	True				
ANR	929141	Label	case 0 :	961:2:28883:28889	925487	23	True				
ANR	929142	ExpressionStatement	r_cons_newline ( )	962:3:28894:28911	925487	24	True				
ANR	929143	CallExpression	r_cons_newline ( )		925487	0					
ANR	929144	Callee	r_cons_newline		925487	0					
ANR	929145	Identifier	r_cons_newline		925487	0					
ANR	929146	ArgumentList			925487	1					
ANR	929147	BreakStatement	break ;	963:3:28916:28921	925487	25	True				
ANR	929148	Label	default :	964:2:28925:28932	925487	26	True				
ANR	929149	Identifier	default		925487	0					
ANR	929150	ExpressionStatement	"eprintf ( ""Usage: ?e[...]\\n"" )"	965:3:28937:28965	925487	27	True				
ANR	929151	CallExpression	"eprintf ( ""Usage: ?e[...]\\n"" )"		925487	0					
ANR	929152	Callee	eprintf		925487	0					
ANR	929153	Identifier	eprintf		925487	0					
ANR	929154	ArgumentList	"""Usage: ?e[...]\\n"""		925487	1					
ANR	929155	Argument	"""Usage: ?e[...]\\n"""		925487	0					
ANR	929156	PrimaryExpression	"""Usage: ?e[...]\\n"""		925487	0					
ANR	929157	ExpressionStatement	"eprintf ( "" e msg       echo message\\n"" )"	966:3:28970:29009	925487	28	True				
ANR	929158	CallExpression	"eprintf ( "" e msg       echo message\\n"" )"		925487	0					
ANR	929159	Callee	eprintf		925487	0					
ANR	929160	Identifier	eprintf		925487	0					
ANR	929161	ArgumentList	""" e msg       echo message\\n"""		925487	1					
ANR	929162	Argument	""" e msg       echo message\\n"""		925487	0					
ANR	929163	PrimaryExpression	""" e msg       echo message\\n"""		925487	0					
ANR	929164	ExpressionStatement	"eprintf ( "" e= N...     progressbar N percent\\n"" )"	967:3:29014:29062	925487	29	True				
ANR	929165	CallExpression	"eprintf ( "" e= N...     progressbar N percent\\n"" )"		925487	0					
ANR	929166	Callee	eprintf		925487	0					
ANR	929167	Identifier	eprintf		925487	0					
ANR	929168	ArgumentList	""" e= N...     progressbar N percent\\n"""		925487	1					
ANR	929169	Argument	""" e= N...     progressbar N percent\\n"""		925487	0					
ANR	929170	PrimaryExpression	""" e= N...     progressbar N percent\\n"""		925487	0					
ANR	929171	ExpressionStatement	"eprintf ( "" ed N...     display a donut\\n"" )"	968:3:29067:29109	925487	30	True				
ANR	929172	CallExpression	"eprintf ( "" ed N...     display a donut\\n"" )"		925487	0					
ANR	929173	Callee	eprintf		925487	0					
ANR	929174	Identifier	eprintf		925487	0					
ANR	929175	ArgumentList	""" ed N...     display a donut\\n"""		925487	1					
ANR	929176	Argument	""" ed N...     display a donut\\n"""		925487	0					
ANR	929177	PrimaryExpression	""" ed N...     display a donut\\n"""		925487	0					
ANR	929178	ExpressionStatement	"eprintf ( "" ep N...     echo pie chart\\n"" )"	969:3:29114:29155	925487	31	True				
ANR	929179	CallExpression	"eprintf ( "" ep N...     echo pie chart\\n"" )"		925487	0					
ANR	929180	Callee	eprintf		925487	0					
ANR	929181	Identifier	eprintf		925487	0					
ANR	929182	ArgumentList	""" ep N...     echo pie chart\\n"""		925487	1					
ANR	929183	Argument	""" ep N...     echo pie chart\\n"""		925487	0					
ANR	929184	PrimaryExpression	""" ep N...     echo pie chart\\n"""		925487	0					
ANR	929185	ExpressionStatement	"eprintf ( "" eb N...     echo portions bar\\n"" )"	970:3:29160:29204	925487	32	True				
ANR	929186	CallExpression	"eprintf ( "" eb N...     echo portions bar\\n"" )"		925487	0					
ANR	929187	Callee	eprintf		925487	0					
ANR	929188	Identifier	eprintf		925487	0					
ANR	929189	ArgumentList	""" eb N...     echo portions bar\\n"""		925487	1					
ANR	929190	Argument	""" eb N...     echo portions bar\\n"""		925487	0					
ANR	929191	PrimaryExpression	""" eb N...     echo portions bar\\n"""		925487	0					
ANR	929192	ExpressionStatement	"eprintf ( "" en msg      echo without newline\\n"" )"	971:3:29209:29256	925487	33	True				
ANR	929193	CallExpression	"eprintf ( "" en msg      echo without newline\\n"" )"		925487	0					
ANR	929194	Callee	eprintf		925487	0					
ANR	929195	Identifier	eprintf		925487	0					
ANR	929196	ArgumentList	""" en msg      echo without newline\\n"""		925487	1					
ANR	929197	Argument	""" en msg      echo without newline\\n"""		925487	0					
ANR	929198	PrimaryExpression	""" en msg      echo without newline\\n"""		925487	0					
ANR	929199	ExpressionStatement	"eprintf ( "" eg x y      gotoxy\\n"" )"	972:3:29261:29294	925487	34	True				
ANR	929200	CallExpression	"eprintf ( "" eg x y      gotoxy\\n"" )"		925487	0					
ANR	929201	Callee	eprintf		925487	0					
ANR	929202	Identifier	eprintf		925487	0					
ANR	929203	ArgumentList	""" eg x y      gotoxy\\n"""		925487	1					
ANR	929204	Argument	""" eg x y      gotoxy\\n"""		925487	0					
ANR	929205	PrimaryExpression	""" eg x y      gotoxy\\n"""		925487	0					
ANR	929206	ExpressionStatement	"eprintf ( "" es msg      use text-to-speech technology\\n"" )"	973:3:29299:29355	925487	35	True				
ANR	929207	CallExpression	"eprintf ( "" es msg      use text-to-speech technology\\n"" )"		925487	0					
ANR	929208	Callee	eprintf		925487	0					
ANR	929209	Identifier	eprintf		925487	0					
ANR	929210	ArgumentList	""" es msg      use text-to-speech technology\\n"""		925487	1					
ANR	929211	Argument	""" es msg      use text-to-speech technology\\n"""		925487	0					
ANR	929212	PrimaryExpression	""" es msg      use text-to-speech technology\\n"""		925487	0					
ANR	929213	BreakStatement	break ;	974:3:29360:29365	925487	36	True				
ANR	929214	BreakStatement	break ;	976:2:29373:29378	925487	154	True				
ANR	929215	Label	case 's' :	977:1:29381:29389	925487	155	True				
ANR	929216	CompoundStatement		594:2:15912:15924	925487	156					
ANR	929217	IdentifierDeclStatement	"ut64 from , to , step ;"	978:2:29425:29444	925487	0	True				
ANR	929218	IdentifierDecl	from		925487	0					
ANR	929219	IdentifierDeclType	ut64		925487	0					
ANR	929220	Identifier	from		925487	1					
ANR	929221	IdentifierDecl	to		925487	1					
ANR	929222	IdentifierDeclType	ut64		925487	0					
ANR	929223	Identifier	to		925487	1					
ANR	929224	IdentifierDecl	step		925487	2					
ANR	929225	IdentifierDeclType	ut64		925487	0					
ANR	929226	Identifier	step		925487	1					
ANR	929227	IdentifierDeclStatement	"char * p , * p2 ;"	979:2:29448:29460	925487	1	True				
ANR	929228	IdentifierDecl	* p		925487	0					
ANR	929229	IdentifierDeclType	char *		925487	0					
ANR	929230	Identifier	p		925487	1					
ANR	929231	IdentifierDecl	* p2		925487	1					
ANR	929232	IdentifierDeclType	char *		925487	0					
ANR	929233	Identifier	p2		925487	1					
ANR	929234	ForStatement	for ( input ++ ; * input == ' ' ; input ++ )		925487	2					
ANR	929235	ForInit	input ++ ;	980:7:29469:29476	925487	0	True				
ANR	929236	PostIncDecOperationExpression	input ++		925487	0					
ANR	929237	Identifier	input		925487	0					
ANR	929238	IncDec	++		925487	1					
ANR	929239	Condition	* input == ' '	980:16:29478:29488	925487	1	True				
ANR	929240	EqualityExpression	* input == ' '		925487	0		==			
ANR	929241	UnaryOperationExpression	* input		925487	0					
ANR	929242	UnaryOperator	*		925487	0					
ANR	929243	Identifier	input		925487	1					
ANR	929244	PrimaryExpression	' '		925487	1					
ANR	929245	PostIncDecOperationExpression	input ++	980:29:29491:29497	925487	2	True				
ANR	929246	Identifier	input		925487	0					
ANR	929247	IncDec	++		925487	1					
ANR	929248	ExpressionStatement		980:37:29499:29499	925487	3	True				
ANR	929249	ExpressionStatement	"p = strchr ( input , ' ' )"	981:2:29503:29526	925487	3	True				
ANR	929250	AssignmentExpression	"p = strchr ( input , ' ' )"		925487	0		=			
ANR	929251	Identifier	p		925487	0					
ANR	929252	CallExpression	"strchr ( input , ' ' )"		925487	1					
ANR	929253	Callee	strchr		925487	0					
ANR	929254	Identifier	strchr		925487	0					
ANR	929255	ArgumentList	input		925487	1					
ANR	929256	Argument	input		925487	0					
ANR	929257	Identifier	input		925487	0					
ANR	929258	Argument	' '		925487	1					
ANR	929259	PrimaryExpression	' '		925487	0					
ANR	929260	IfStatement	if ( p )		925487	4					
ANR	929261	Condition	p	982:6:29534:29534	925487	0	True				
ANR	929262	Identifier	p		925487	0					
ANR	929263	CompoundStatement		597:9:16001:16001	925487	1					
ANR	929264	ExpressionStatement	* p = '\\0'	983:3:29542:29551	925487	0	True				
ANR	929265	AssignmentExpression	* p = '\\0'		925487	0		=			
ANR	929266	UnaryOperationExpression	* p		925487	0					
ANR	929267	UnaryOperator	*		925487	0					
ANR	929268	Identifier	p		925487	1					
ANR	929269	PrimaryExpression	'\\0'		925487	1					
ANR	929270	ExpressionStatement	"from = r_num_math ( core -> num , input )"	984:3:29556:29592	925487	1	True				
ANR	929271	AssignmentExpression	"from = r_num_math ( core -> num , input )"		925487	0		=			
ANR	929272	Identifier	from		925487	0					
ANR	929273	CallExpression	"r_num_math ( core -> num , input )"		925487	1					
ANR	929274	Callee	r_num_math		925487	0					
ANR	929275	Identifier	r_num_math		925487	0					
ANR	929276	ArgumentList	core -> num		925487	1					
ANR	929277	Argument	core -> num		925487	0					
ANR	929278	PtrMemberAccess	core -> num		925487	0					
ANR	929279	Identifier	core		925487	0					
ANR	929280	Identifier	num		925487	1					
ANR	929281	Argument	input		925487	1					
ANR	929282	Identifier	input		925487	0					
ANR	929283	ExpressionStatement	"p2 = strchr ( p + 1 , ' ' )"	985:3:29597:29619	925487	2	True				
ANR	929284	AssignmentExpression	"p2 = strchr ( p + 1 , ' ' )"		925487	0		=			
ANR	929285	Identifier	p2		925487	0					
ANR	929286	CallExpression	"strchr ( p + 1 , ' ' )"		925487	1					
ANR	929287	Callee	strchr		925487	0					
ANR	929288	Identifier	strchr		925487	0					
ANR	929289	ArgumentList	p + 1		925487	1					
ANR	929290	Argument	p + 1		925487	0					
ANR	929291	AdditiveExpression	p + 1		925487	0		+			
ANR	929292	Identifier	p		925487	0					
ANR	929293	PrimaryExpression	1		925487	1					
ANR	929294	Argument	' '		925487	1					
ANR	929295	PrimaryExpression	' '		925487	0					
ANR	929296	IfStatement	if ( p2 )		925487	3					
ANR	929297	Condition	p2	986:7:29628:29629	925487	0	True				
ANR	929298	Identifier	p2		925487	0					
ANR	929299	CompoundStatement		601:11:16096:16096	925487	1					
ANR	929300	ExpressionStatement	* p2 = '\\0'	987:4:29638:29648	925487	0	True				
ANR	929301	AssignmentExpression	* p2 = '\\0'		925487	0		=			
ANR	929302	UnaryOperationExpression	* p2		925487	0					
ANR	929303	UnaryOperator	*		925487	0					
ANR	929304	Identifier	p2		925487	1					
ANR	929305	PrimaryExpression	'\\0'		925487	1					
ANR	929306	ExpressionStatement	"step = r_num_math ( core -> num , p2 + 1 )"	988:4:29654:29691	925487	1	True				
ANR	929307	AssignmentExpression	"step = r_num_math ( core -> num , p2 + 1 )"		925487	0		=			
ANR	929308	Identifier	step		925487	0					
ANR	929309	CallExpression	"r_num_math ( core -> num , p2 + 1 )"		925487	1					
ANR	929310	Callee	r_num_math		925487	0					
ANR	929311	Identifier	r_num_math		925487	0					
ANR	929312	ArgumentList	core -> num		925487	1					
ANR	929313	Argument	core -> num		925487	0					
ANR	929314	PtrMemberAccess	core -> num		925487	0					
ANR	929315	Identifier	core		925487	0					
ANR	929316	Identifier	num		925487	1					
ANR	929317	Argument	p2 + 1		925487	1					
ANR	929318	AdditiveExpression	p2 + 1		925487	0		+			
ANR	929319	Identifier	p2		925487	0					
ANR	929320	PrimaryExpression	1		925487	1					
ANR	929321	ElseStatement	else		925487	0					
ANR	929322	CompoundStatement		604:10:16167:16167	925487	0					
ANR	929323	ExpressionStatement	step = 1	990:4:29709:29717	925487	0	True				
ANR	929324	AssignmentExpression	step = 1		925487	0		=			
ANR	929325	Identifier	step		925487	0					
ANR	929326	PrimaryExpression	1		925487	1					
ANR	929327	ExpressionStatement	"to = r_num_math ( core -> num , p + 1 )"	992:3:29727:29761	925487	4	True				
ANR	929328	AssignmentExpression	"to = r_num_math ( core -> num , p + 1 )"		925487	0		=			
ANR	929329	Identifier	to		925487	0					
ANR	929330	CallExpression	"r_num_math ( core -> num , p + 1 )"		925487	1					
ANR	929331	Callee	r_num_math		925487	0					
ANR	929332	Identifier	r_num_math		925487	0					
ANR	929333	ArgumentList	core -> num		925487	1					
ANR	929334	Argument	core -> num		925487	0					
ANR	929335	PtrMemberAccess	core -> num		925487	0					
ANR	929336	Identifier	core		925487	0					
ANR	929337	Identifier	num		925487	1					
ANR	929338	Argument	p + 1		925487	1					
ANR	929339	AdditiveExpression	p + 1		925487	0		+			
ANR	929340	Identifier	p		925487	0					
ANR	929341	PrimaryExpression	1		925487	1					
ANR	929342	ForStatement	for ( ; from <= to ; from += step )		925487	5					
ANR	929343	Condition	from <= to	993:9:29772:29781	925487	0	True				
ANR	929344	RelationalExpression	from <= to		925487	0		<=			
ANR	929345	Identifier	from		925487	0					
ANR	929346	Identifier	to		925487	1					
ANR	929347	AssignmentExpression	from += step	993:21:29784:29795	925487	1	True	+=			
ANR	929348	Identifier	from		925487	0					
ANR	929349	Identifier	step		925487	1					
ANR	929350	Statement	r_cons_printf	994:4:29802:29814	925487	2	True				
ANR	929351	Statement	(	994:18:29816:29816	925487	6	True				
ANR	929352	Statement	"""%"""	994:19:29817:29819	925487	7	True				
ANR	929353	Statement	PFMT64d	994:22:29820:29826	925487	8	True				
ANR	929354	Statement	""" """	994:29:29827:29829	925487	9	True				
ANR	929355	Statement	","	994:32:29830:29830	925487	10	True				
ANR	929356	Statement	from	994:34:29832:29835	925487	11	True				
ANR	929357	Statement	)	994:38:29836:29836	925487	12	True				
ANR	929358	ExpressionStatement		994:39:29837:29837	925487	13	True				
ANR	929359	ExpressionStatement	r_cons_newline ( )	995:3:29842:29859	925487	14	True				
ANR	929360	CallExpression	r_cons_newline ( )		925487	0					
ANR	929361	Callee	r_cons_newline		925487	0					
ANR	929362	Identifier	r_cons_newline		925487	0					
ANR	929363	ArgumentList			925487	1					
ANR	929364	BreakStatement	break ;	997:2:29867:29872	925487	5	True				
ANR	929365	Label	case 'P' :	999:1:29878:29886	925487	157	True				
ANR	929366	IfStatement	if ( core -> io -> va )		925487	158					
ANR	929367	Condition	core -> io -> va	1000:6:29902:29913	925487	0	True				
ANR	929368	PtrMemberAccess	core -> io -> va		925487	0					
ANR	929369	PtrMemberAccess	core -> io		925487	0					
ANR	929370	Identifier	core		925487	0					
ANR	929371	Identifier	io		925487	1					
ANR	929372	Identifier	va		925487	1					
ANR	929373	CompoundStatement		618:3:16475:16521	925487	1					
ANR	929374	IdentifierDeclStatement	"ut64 o , n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset ;"	1001:3:29921:30006	925487	0	True				
ANR	929375	IdentifierDecl	o		925487	0					
ANR	929376	IdentifierDeclType	ut64		925487	0					
ANR	929377	Identifier	o		925487	1					
ANR	929378	IdentifierDecl	"n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	1					
ANR	929379	IdentifierDeclType	ut64		925487	0					
ANR	929380	Identifier	n		925487	1					
ANR	929381	AssignmentExpression	"n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	2		=			
ANR	929382	Identifier	n		925487	0					
ANR	929383	ConditionalExpression	"( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	1					
ANR	929384	Condition	input [ 0 ] && input [ 1 ]		925487	0					
ANR	929385	AndExpression	input [ 0 ] && input [ 1 ]		925487	0		&&			
ANR	929386	ArrayIndexing	input [ 0 ]		925487	0					
ANR	929387	Identifier	input		925487	0					
ANR	929388	PrimaryExpression	0		925487	1					
ANR	929389	ArrayIndexing	input [ 1 ]		925487	1					
ANR	929390	Identifier	input		925487	0					
ANR	929391	PrimaryExpression	1		925487	1					
ANR	929392	CallExpression	"r_num_math ( core -> num , input + 2 )"		925487	1					
ANR	929393	Callee	r_num_math		925487	0					
ANR	929394	Identifier	r_num_math		925487	0					
ANR	929395	ArgumentList	core -> num		925487	1					
ANR	929396	Argument	core -> num		925487	0					
ANR	929397	PtrMemberAccess	core -> num		925487	0					
ANR	929398	Identifier	core		925487	0					
ANR	929399	Identifier	num		925487	1					
ANR	929400	Argument	input + 2		925487	1					
ANR	929401	AdditiveExpression	input + 2		925487	0		+			
ANR	929402	Identifier	input		925487	0					
ANR	929403	PrimaryExpression	2		925487	1					
ANR	929404	PtrMemberAccess	core -> offset		925487	2					
ANR	929405	Identifier	core		925487	0					
ANR	929406	Identifier	offset		925487	1					
ANR	929407	IdentifierDeclStatement	"RIOMap * map = r_io_map_get_paddr ( core -> io , n ) ;"	1003:3:30011:30057	925487	1	True				
ANR	929408	IdentifierDecl	"* map = r_io_map_get_paddr ( core -> io , n )"		925487	0					
ANR	929409	IdentifierDeclType	RIOMap *		925487	0					
ANR	929410	Identifier	map		925487	1					
ANR	929411	AssignmentExpression	"* map = r_io_map_get_paddr ( core -> io , n )"		925487	2		=			
ANR	929412	Identifier	map		925487	0					
ANR	929413	CallExpression	"r_io_map_get_paddr ( core -> io , n )"		925487	1					
ANR	929414	Callee	r_io_map_get_paddr		925487	0					
ANR	929415	Identifier	r_io_map_get_paddr		925487	0					
ANR	929416	ArgumentList	core -> io		925487	1					
ANR	929417	Argument	core -> io		925487	0					
ANR	929418	PtrMemberAccess	core -> io		925487	0					
ANR	929419	Identifier	core		925487	0					
ANR	929420	Identifier	io		925487	1					
ANR	929421	Argument	n		925487	1					
ANR	929422	Identifier	n		925487	0					
ANR	929423	IfStatement	if ( map )		925487	2					
ANR	929424	Condition	map	1004:7:30066:30068	925487	0	True				
ANR	929425	Identifier	map		925487	0					
ANR	929426	CompoundStatement		619:12:16535:16535	925487	1					
ANR	929427	ExpressionStatement	o = n + map -> itv . addr - map -> delta	1005:4:30077:30111	925487	0	True				
ANR	929428	AssignmentExpression	o = n + map -> itv . addr - map -> delta		925487	0		=			
ANR	929429	Identifier	o		925487	0					
ANR	929430	AdditiveExpression	n + map -> itv . addr - map -> delta		925487	1		+			
ANR	929431	Identifier	n		925487	0					
ANR	929432	AdditiveExpression	map -> itv . addr - map -> delta		925487	1		-			
ANR	929433	MemberAccess	map -> itv . addr		925487	0					
ANR	929434	PtrMemberAccess	map -> itv		925487	0					
ANR	929435	Identifier	map		925487	0					
ANR	929436	Identifier	itv		925487	1					
ANR	929437	Identifier	addr		925487	1					
ANR	929438	PtrMemberAccess	map -> delta		925487	1					
ANR	929439	Identifier	map		925487	0					
ANR	929440	Identifier	delta		925487	1					
ANR	929441	Statement	r_cons_printf	1006:4:30117:30129	925487	1	True				
ANR	929442	Statement	(	1006:18:30131:30131	925487	2	True				
ANR	929443	Statement	"""0x%08"""	1006:19:30132:30138	925487	3	True				
ANR	929444	Statement	PFMT64x	1006:26:30139:30145	925487	4	True				
ANR	929445	Statement	"""\\n"""	1006:33:30146:30149	925487	5	True				
ANR	929446	Statement	","	1006:37:30150:30150	925487	6	True				
ANR	929447	Statement	o	1006:39:30152:30152	925487	7	True				
ANR	929448	Statement	)	1006:40:30153:30153	925487	8	True				
ANR	929449	ExpressionStatement		1006:41:30154:30154	925487	9	True				
ANR	929450	ElseStatement	else		925487	0					
ANR	929451	CompoundStatement		622:10:16630:16630	925487	0					
ANR	929452	Statement	r_cons_printf	1008:4:30172:30184	925487	0	True				
ANR	929453	Statement	(	1008:18:30186:30186	925487	1	True				
ANR	929454	Statement	"""no map at 0x%08"""	1008:19:30187:30203	925487	2	True				
ANR	929455	Statement	PFMT64x	1008:36:30204:30210	925487	3	True				
ANR	929456	Statement	"""\\n"""	1008:43:30211:30214	925487	4	True				
ANR	929457	Statement	","	1008:47:30215:30215	925487	5	True				
ANR	929458	Statement	n	1008:49:30217:30217	925487	6	True				
ANR	929459	Statement	)	1008:50:30218:30218	925487	7	True				
ANR	929460	ExpressionStatement		1008:51:30219:30219	925487	8	True				
ANR	929461	ElseStatement	else		925487	0					
ANR	929462	CompoundStatement		625:9:16699:16699	925487	0					
ANR	929463	Statement	r_cons_printf	1011:3:30240:30252	925487	0	True				
ANR	929464	Statement	(	1011:17:30254:30254	925487	1	True				
ANR	929465	Statement	"""0x%08"""	1011:18:30255:30261	925487	2	True				
ANR	929466	Statement	PFMT64x	1011:25:30262:30268	925487	3	True				
ANR	929467	Statement	"""\\n"""	1011:32:30269:30272	925487	4	True				
ANR	929468	Statement	","	1011:36:30273:30273	925487	5	True				
ANR	929469	Statement	core	1011:38:30275:30278	925487	6	True				
ANR	929470	Statement	->	1011:42:30279:30280	925487	7	True				
ANR	929471	Statement	offset	1011:44:30281:30286	925487	8	True				
ANR	929472	Statement	)	1011:50:30287:30287	925487	9	True				
ANR	929473	ExpressionStatement		1011:51:30288:30288	925487	10	True				
ANR	929474	BreakStatement	break ;	1013:2:30296:30301	925487	159	True				
ANR	929475	Label	case 'p' :	1014:1:30304:30312	925487	160	True				
ANR	929476	IfStatement	if ( core -> io -> va )		925487	161					
ANR	929477	Condition	core -> io -> va	1015:6:30328:30339	925487	0	True				
ANR	929478	PtrMemberAccess	core -> io -> va		925487	0					
ANR	929479	PtrMemberAccess	core -> io		925487	0					
ANR	929480	Identifier	core		925487	0					
ANR	929481	Identifier	io		925487	1					
ANR	929482	Identifier	va		925487	1					
ANR	929483	CompoundStatement		634:3:16926:16966	925487	1					
ANR	929484	IdentifierDeclStatement	"ut64 o , n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset ;"	1017:3:30370:30457	925487	0	True				
ANR	929485	IdentifierDecl	o		925487	0					
ANR	929486	IdentifierDeclType	ut64		925487	0					
ANR	929487	Identifier	o		925487	1					
ANR	929488	IdentifierDecl	"n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	1					
ANR	929489	IdentifierDeclType	ut64		925487	0					
ANR	929490	Identifier	n		925487	1					
ANR	929491	AssignmentExpression	"n = ( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	2		=			
ANR	929492	Identifier	n		925487	0					
ANR	929493	ConditionalExpression	"( input [ 0 ] && input [ 1 ] ) ? r_num_math ( core -> num , input + 2 ) : core -> offset"		925487	1					
ANR	929494	Condition	input [ 0 ] && input [ 1 ]		925487	0					
ANR	929495	AndExpression	input [ 0 ] && input [ 1 ]		925487	0		&&			
ANR	929496	ArrayIndexing	input [ 0 ]		925487	0					
ANR	929497	Identifier	input		925487	0					
ANR	929498	PrimaryExpression	0		925487	1					
ANR	929499	ArrayIndexing	input [ 1 ]		925487	1					
ANR	929500	Identifier	input		925487	0					
ANR	929501	PrimaryExpression	1		925487	1					
ANR	929502	CallExpression	"r_num_math ( core -> num , input + 2 )"		925487	1					
ANR	929503	Callee	r_num_math		925487	0					
ANR	929504	Identifier	r_num_math		925487	0					
ANR	929505	ArgumentList	core -> num		925487	1					
ANR	929506	Argument	core -> num		925487	0					
ANR	929507	PtrMemberAccess	core -> num		925487	0					
ANR	929508	Identifier	core		925487	0					
ANR	929509	Identifier	num		925487	1					
ANR	929510	Argument	input + 2		925487	1					
ANR	929511	AdditiveExpression	input + 2		925487	0		+			
ANR	929512	Identifier	input		925487	0					
ANR	929513	PrimaryExpression	2		925487	1					
ANR	929514	PtrMemberAccess	core -> offset		925487	2					
ANR	929515	Identifier	core		925487	0					
ANR	929516	Identifier	offset		925487	1					
ANR	929517	IdentifierDeclStatement	"RIOMap * map = r_io_map_get ( core -> io , n ) ;"	1019:3:30462:30502	925487	1	True				
ANR	929518	IdentifierDecl	"* map = r_io_map_get ( core -> io , n )"		925487	0					
ANR	929519	IdentifierDeclType	RIOMap *		925487	0					
ANR	929520	Identifier	map		925487	1					
ANR	929521	AssignmentExpression	"* map = r_io_map_get ( core -> io , n )"		925487	2		=			
ANR	929522	Identifier	map		925487	0					
ANR	929523	CallExpression	"r_io_map_get ( core -> io , n )"		925487	1					
ANR	929524	Callee	r_io_map_get		925487	0					
ANR	929525	Identifier	r_io_map_get		925487	0					
ANR	929526	ArgumentList	core -> io		925487	1					
ANR	929527	Argument	core -> io		925487	0					
ANR	929528	PtrMemberAccess	core -> io		925487	0					
ANR	929529	Identifier	core		925487	0					
ANR	929530	Identifier	io		925487	1					
ANR	929531	Argument	n		925487	1					
ANR	929532	Identifier	n		925487	0					
ANR	929533	IfStatement	if ( map )		925487	2					
ANR	929534	Condition	map	1020:7:30511:30513	925487	0	True				
ANR	929535	Identifier	map		925487	0					
ANR	929536	CompoundStatement		635:12:16980:16980	925487	1					
ANR	929537	ExpressionStatement	o = n - map -> itv . addr + map -> delta	1021:4:30522:30556	925487	0	True				
ANR	929538	AssignmentExpression	o = n - map -> itv . addr + map -> delta		925487	0		=			
ANR	929539	Identifier	o		925487	0					
ANR	929540	AdditiveExpression	n - map -> itv . addr + map -> delta		925487	1		-			
ANR	929541	Identifier	n		925487	0					
ANR	929542	AdditiveExpression	map -> itv . addr + map -> delta		925487	1		+			
ANR	929543	MemberAccess	map -> itv . addr		925487	0					
ANR	929544	PtrMemberAccess	map -> itv		925487	0					
ANR	929545	Identifier	map		925487	0					
ANR	929546	Identifier	itv		925487	1					
ANR	929547	Identifier	addr		925487	1					
ANR	929548	PtrMemberAccess	map -> delta		925487	1					
ANR	929549	Identifier	map		925487	0					
ANR	929550	Identifier	delta		925487	1					
ANR	929551	Statement	r_cons_printf	1022:4:30562:30574	925487	1	True				
ANR	929552	Statement	(	1022:18:30576:30576	925487	2	True				
ANR	929553	Statement	"""0x%08"""	1022:19:30577:30583	925487	3	True				
ANR	929554	Statement	PFMT64x	1022:26:30584:30590	925487	4	True				
ANR	929555	Statement	"""\\n"""	1022:33:30591:30594	925487	5	True				
ANR	929556	Statement	","	1022:37:30595:30595	925487	6	True				
ANR	929557	Statement	o	1022:39:30597:30597	925487	7	True				
ANR	929558	Statement	)	1022:40:30598:30598	925487	8	True				
ANR	929559	ExpressionStatement		1022:41:30599:30599	925487	9	True				
ANR	929560	ElseStatement	else		925487	0					
ANR	929561	CompoundStatement		638:10:17075:17075	925487	0					
ANR	929562	Statement	r_cons_printf	1024:4:30617:30629	925487	0	True				
ANR	929563	Statement	(	1024:18:30631:30631	925487	1	True				
ANR	929564	Statement	"""no map at 0x%08"""	1024:19:30632:30648	925487	2	True				
ANR	929565	Statement	PFMT64x	1024:36:30649:30655	925487	3	True				
ANR	929566	Statement	"""\\n"""	1024:43:30656:30659	925487	4	True				
ANR	929567	Statement	","	1024:47:30660:30660	925487	5	True				
ANR	929568	Statement	n	1024:49:30662:30662	925487	6	True				
ANR	929569	Statement	)	1024:50:30663:30663	925487	7	True				
ANR	929570	ExpressionStatement		1024:51:30664:30664	925487	8	True				
ANR	929571	ElseStatement	else		925487	0					
ANR	929572	CompoundStatement		641:9:17144:17144	925487	0					
ANR	929573	Statement	r_cons_printf	1027:3:30685:30697	925487	0	True				
ANR	929574	Statement	(	1027:17:30699:30699	925487	1	True				
ANR	929575	Statement	"""0x%08"""	1027:18:30700:30706	925487	2	True				
ANR	929576	Statement	PFMT64x	1027:25:30707:30713	925487	3	True				
ANR	929577	Statement	"""\\n"""	1027:32:30714:30717	925487	4	True				
ANR	929578	Statement	","	1027:36:30718:30718	925487	5	True				
ANR	929579	Statement	core	1027:38:30720:30723	925487	6	True				
ANR	929580	Statement	->	1027:42:30724:30725	925487	7	True				
ANR	929581	Statement	offset	1027:44:30726:30731	925487	8	True				
ANR	929582	Statement	)	1027:50:30732:30732	925487	9	True				
ANR	929583	ExpressionStatement		1027:51:30733:30733	925487	10	True				
ANR	929584	BreakStatement	break ;	1029:2:30741:30746	925487	162	True				
ANR	929585	Label	case '_' :	1030:1:30749:30757	925487	163	True				
ANR	929586	ExpressionStatement	"r_core_yank_hud_file ( core , input + 1 )"	1031:2:30779:30815	925487	164	True				
ANR	929587	CallExpression	"r_core_yank_hud_file ( core , input + 1 )"		925487	0					
ANR	929588	Callee	r_core_yank_hud_file		925487	0					
ANR	929589	Identifier	r_core_yank_hud_file		925487	0					
ANR	929590	ArgumentList	core		925487	1					
ANR	929591	Argument	core		925487	0					
ANR	929592	Identifier	core		925487	0					
ANR	929593	Argument	input + 1		925487	1					
ANR	929594	AdditiveExpression	input + 1		925487	0		+			
ANR	929595	Identifier	input		925487	0					
ANR	929596	PrimaryExpression	1		925487	1					
ANR	929597	BreakStatement	break ;	1032:2:30819:30824	925487	165	True				
ANR	929598	Label	case 'i' :	1033:1:30827:30835	925487	166	True				
ANR	929599	ExpressionStatement	r_cons_set_raw ( 0 )	1034:2:30857:30874	925487	167	True				
ANR	929600	CallExpression	r_cons_set_raw ( 0 )		925487	0					
ANR	929601	Callee	r_cons_set_raw		925487	0					
ANR	929602	Identifier	r_cons_set_raw		925487	0					
ANR	929603	ArgumentList	0		925487	1					
ANR	929604	Argument	0		925487	0					
ANR	929605	PrimaryExpression	0		925487	0					
ANR	929606	IfStatement	if ( ! r_cons_is_interactive ( ) )		925487	168					
ANR	929607	Condition	! r_cons_is_interactive ( )	1035:6:30882:30906	925487	0	True				
ANR	929608	UnaryOperationExpression	! r_cons_is_interactive ( )		925487	0					
ANR	929609	UnaryOperator	!		925487	0					
ANR	929610	CallExpression	r_cons_is_interactive ( )		925487	1					
ANR	929611	Callee	r_cons_is_interactive		925487	0					
ANR	929612	Identifier	r_cons_is_interactive		925487	0					
ANR	929613	ArgumentList			925487	1					
ANR	929614	CompoundStatement		650:33:17373:17373	925487	1					
ANR	929615	ExpressionStatement	"eprintf ( ""Not running in interactive mode\\n"" )"	1036:3:30914:30959	925487	0	True				
ANR	929616	CallExpression	"eprintf ( ""Not running in interactive mode\\n"" )"		925487	0					
ANR	929617	Callee	eprintf		925487	0					
ANR	929618	Identifier	eprintf		925487	0					
ANR	929619	ArgumentList	"""Not running in interactive mode\\n"""		925487	1					
ANR	929620	Argument	"""Not running in interactive mode\\n"""		925487	0					
ANR	929621	PrimaryExpression	"""Not running in interactive mode\\n"""		925487	0					
ANR	929622	ElseStatement	else		925487	0					
ANR	929623	CompoundStatement		652:9:17434:17434	925487	0					
ANR	929624	SwitchStatement	switch ( input [ 1 ] )		925487	0					
ANR	929625	Condition	input [ 1 ]	1038:11:30983:30990	925487	0	True				
ANR	929626	ArrayIndexing	input [ 1 ]		925487	0					
ANR	929627	Identifier	input		925487	0					
ANR	929628	PrimaryExpression	1		925487	1					
ANR	929629	CompoundStatement		653:21:17457:17457	925487	1					
ANR	929630	Label	case 'f' :	1039:3:30998:31006	925487	0	True				
ANR	929631	ExpressionStatement	"core -> num -> value = ! r_num_conditional ( core -> num , input + 2 )"	1040:4:31021:31081	925487	1	True				
ANR	929632	AssignmentExpression	"core -> num -> value = ! r_num_conditional ( core -> num , input + 2 )"		925487	0		=			
ANR	929633	PtrMemberAccess	core -> num -> value		925487	0					
ANR	929634	PtrMemberAccess	core -> num		925487	0					
ANR	929635	Identifier	core		925487	0					
ANR	929636	Identifier	num		925487	1					
ANR	929637	Identifier	value		925487	1					
ANR	929638	UnaryOperationExpression	"! r_num_conditional ( core -> num , input + 2 )"		925487	1					
ANR	929639	UnaryOperator	!		925487	0					
ANR	929640	CallExpression	"r_num_conditional ( core -> num , input + 2 )"		925487	1					
ANR	929641	Callee	r_num_conditional		925487	0					
ANR	929642	Identifier	r_num_conditional		925487	0					
ANR	929643	ArgumentList	core -> num		925487	1					
ANR	929644	Argument	core -> num		925487	0					
ANR	929645	PtrMemberAccess	core -> num		925487	0					
ANR	929646	Identifier	core		925487	0					
ANR	929647	Identifier	num		925487	1					
ANR	929648	Argument	input + 2		925487	1					
ANR	929649	AdditiveExpression	input + 2		925487	0		+			
ANR	929650	Identifier	input		925487	0					
ANR	929651	PrimaryExpression	2		925487	1					
ANR	929652	ExpressionStatement	"eprintf ( ""%s\\n"" , r_str_bool ( ! core -> num -> value ) )"	1041:4:31087:31135	925487	2	True				
ANR	929653	CallExpression	"eprintf ( ""%s\\n"" , r_str_bool ( ! core -> num -> value ) )"		925487	0					
ANR	929654	Callee	eprintf		925487	0					
ANR	929655	Identifier	eprintf		925487	0					
ANR	929656	ArgumentList	"""%s\\n"""		925487	1					
ANR	929657	Argument	"""%s\\n"""		925487	0					
ANR	929658	PrimaryExpression	"""%s\\n"""		925487	0					
ANR	929659	Argument	r_str_bool ( ! core -> num -> value )		925487	1					
ANR	929660	CallExpression	r_str_bool ( ! core -> num -> value )		925487	0					
ANR	929661	Callee	r_str_bool		925487	0					
ANR	929662	Identifier	r_str_bool		925487	0					
ANR	929663	ArgumentList	! core -> num -> value		925487	1					
ANR	929664	Argument	! core -> num -> value		925487	0					
ANR	929665	UnaryOperationExpression	! core -> num -> value		925487	0					
ANR	929666	UnaryOperator	!		925487	0					
ANR	929667	PtrMemberAccess	core -> num -> value		925487	1					
ANR	929668	PtrMemberAccess	core -> num		925487	0					
ANR	929669	Identifier	core		925487	0					
ANR	929670	Identifier	num		925487	1					
ANR	929671	Identifier	value		925487	1					
ANR	929672	BreakStatement	break ;	1042:4:31141:31146	925487	3	True				
ANR	929673	Label	case 'm' :	1043:3:31151:31159	925487	4	True				
ANR	929674	ExpressionStatement	r_cons_message ( input + 2 )	1044:4:31174:31200	925487	5	True				
ANR	929675	CallExpression	r_cons_message ( input + 2 )		925487	0					
ANR	929676	Callee	r_cons_message		925487	0					
ANR	929677	Identifier	r_cons_message		925487	0					
ANR	929678	ArgumentList	input + 2		925487	1					
ANR	929679	Argument	input + 2		925487	0					
ANR	929680	AdditiveExpression	input + 2		925487	0		+			
ANR	929681	Identifier	input		925487	0					
ANR	929682	PrimaryExpression	2		925487	1					
ANR	929683	BreakStatement	break ;	1045:4:31206:31211	925487	6	True				
ANR	929684	Label	case 'p' :	1046:3:31216:31224	925487	7	True				
ANR	929685	ExpressionStatement	"core -> num -> value = r_core_yank_hud_path ( core , input + 2 , 0 ) == true"	1047:4:31239:31307	925487	8	True				
ANR	929686	AssignmentExpression	"core -> num -> value = r_core_yank_hud_path ( core , input + 2 , 0 ) == true"		925487	0		=			
ANR	929687	PtrMemberAccess	core -> num -> value		925487	0					
ANR	929688	PtrMemberAccess	core -> num		925487	0					
ANR	929689	Identifier	core		925487	0					
ANR	929690	Identifier	num		925487	1					
ANR	929691	Identifier	value		925487	1					
ANR	929692	EqualityExpression	"r_core_yank_hud_path ( core , input + 2 , 0 ) == true"		925487	1		==			
ANR	929693	CallExpression	"r_core_yank_hud_path ( core , input + 2 , 0 )"		925487	0					
ANR	929694	Callee	r_core_yank_hud_path		925487	0					
ANR	929695	Identifier	r_core_yank_hud_path		925487	0					
ANR	929696	ArgumentList	core		925487	1					
ANR	929697	Argument	core		925487	0					
ANR	929698	Identifier	core		925487	0					
ANR	929699	Argument	input + 2		925487	1					
ANR	929700	AdditiveExpression	input + 2		925487	0		+			
ANR	929701	Identifier	input		925487	0					
ANR	929702	PrimaryExpression	2		925487	1					
ANR	929703	Argument	0		925487	2					
ANR	929704	PrimaryExpression	0		925487	0					
ANR	929705	Identifier	true		925487	1					
ANR	929706	BreakStatement	break ;	1048:4:31313:31318	925487	9	True				
ANR	929707	Label	case 'k' :	1049:3:31323:31331	925487	10	True				
ANR	929708	ExpressionStatement	r_cons_any_key ( NULL )	1050:5:31347:31368	925487	11	True				
ANR	929709	CallExpression	r_cons_any_key ( NULL )		925487	0					
ANR	929710	Callee	r_cons_any_key		925487	0					
ANR	929711	Identifier	r_cons_any_key		925487	0					
ANR	929712	ArgumentList	NULL		925487	1					
ANR	929713	Argument	NULL		925487	0					
ANR	929714	Identifier	NULL		925487	0					
ANR	929715	BreakStatement	break ;	1051:5:31375:31380	925487	12	True				
ANR	929716	Label	case 'y' :	1052:3:31385:31393	925487	13	True				
ANR	929717	ForStatement	for ( input += 2 ; * input == ' ' ; input ++ )		925487	14					
ANR	929718	ForInit	input += 2 ;	1053:10:31414:31424	925487	0	True				
ANR	929719	AssignmentExpression	input += 2		925487	0		+=			
ANR	929720	Identifier	input		925487	0					
ANR	929721	PrimaryExpression	2		925487	1					
ANR	929722	Condition	* input == ' '	1053:22:31426:31436	925487	1	True				
ANR	929723	EqualityExpression	* input == ' '		925487	0		==			
ANR	929724	UnaryOperationExpression	* input		925487	0					
ANR	929725	UnaryOperator	*		925487	0					
ANR	929726	Identifier	input		925487	1					
ANR	929727	PrimaryExpression	' '		925487	1					
ANR	929728	PostIncDecOperationExpression	input ++	1053:35:31439:31445	925487	2	True				
ANR	929729	Identifier	input		925487	0					
ANR	929730	IncDec	++		925487	1					
ANR	929731	ExpressionStatement		1053:43:31447:31447	925487	3	True				
ANR	929732	ExpressionStatement	"core -> num -> value = r_cons_yesno ( 1 , ""%s? (Y/n)"" , input )"	1054:5:31454:31509	925487	15	True				
ANR	929733	AssignmentExpression	"core -> num -> value = r_cons_yesno ( 1 , ""%s? (Y/n)"" , input )"		925487	0		=			
ANR	929734	PtrMemberAccess	core -> num -> value		925487	0					
ANR	929735	PtrMemberAccess	core -> num		925487	0					
ANR	929736	Identifier	core		925487	0					
ANR	929737	Identifier	num		925487	1					
ANR	929738	Identifier	value		925487	1					
ANR	929739	CallExpression	"r_cons_yesno ( 1 , ""%s? (Y/n)"" , input )"		925487	1					
ANR	929740	Callee	r_cons_yesno		925487	0					
ANR	929741	Identifier	r_cons_yesno		925487	0					
ANR	929742	ArgumentList	1		925487	1					
ANR	929743	Argument	1		925487	0					
ANR	929744	PrimaryExpression	1		925487	0					
ANR	929745	Argument	"""%s? (Y/n)"""		925487	1					
ANR	929746	PrimaryExpression	"""%s? (Y/n)"""		925487	0					
ANR	929747	Argument	input		925487	2					
ANR	929748	Identifier	input		925487	0					
ANR	929749	BreakStatement	break ;	1055:5:31516:31521	925487	16	True				
ANR	929750	Label	case 'n' :	1056:3:31526:31534	925487	17	True				
ANR	929751	ForStatement	for ( input += 2 ; * input == ' ' ; input ++ )		925487	18					
ANR	929752	ForInit	input += 2 ;	1057:10:31555:31565	925487	0	True				
ANR	929753	AssignmentExpression	input += 2		925487	0		+=			
ANR	929754	Identifier	input		925487	0					
ANR	929755	PrimaryExpression	2		925487	1					
ANR	929756	Condition	* input == ' '	1057:22:31567:31577	925487	1	True				
ANR	929757	EqualityExpression	* input == ' '		925487	0		==			
ANR	929758	UnaryOperationExpression	* input		925487	0					
ANR	929759	UnaryOperator	*		925487	0					
ANR	929760	Identifier	input		925487	1					
ANR	929761	PrimaryExpression	' '		925487	1					
ANR	929762	PostIncDecOperationExpression	input ++	1057:35:31580:31586	925487	2	True				
ANR	929763	Identifier	input		925487	0					
ANR	929764	IncDec	++		925487	1					
ANR	929765	ExpressionStatement		1057:43:31588:31588	925487	3	True				
ANR	929766	ExpressionStatement	"core -> num -> value = r_cons_yesno ( 0 , ""%s? (y/N)"" , input )"	1058:5:31595:31650	925487	19	True				
ANR	929767	AssignmentExpression	"core -> num -> value = r_cons_yesno ( 0 , ""%s? (y/N)"" , input )"		925487	0		=			
ANR	929768	PtrMemberAccess	core -> num -> value		925487	0					
ANR	929769	PtrMemberAccess	core -> num		925487	0					
ANR	929770	Identifier	core		925487	0					
ANR	929771	Identifier	num		925487	1					
ANR	929772	Identifier	value		925487	1					
ANR	929773	CallExpression	"r_cons_yesno ( 0 , ""%s? (y/N)"" , input )"		925487	1					
ANR	929774	Callee	r_cons_yesno		925487	0					
ANR	929775	Identifier	r_cons_yesno		925487	0					
ANR	929776	ArgumentList	0		925487	1					
ANR	929777	Argument	0		925487	0					
ANR	929778	PrimaryExpression	0		925487	0					
ANR	929779	Argument	"""%s? (y/N)"""		925487	1					
ANR	929780	PrimaryExpression	"""%s? (y/N)"""		925487	0					
ANR	929781	Argument	input		925487	2					
ANR	929782	Identifier	input		925487	0					
ANR	929783	BreakStatement	break ;	1059:5:31657:31662	925487	20	True				
ANR	929784	Label	default :	1060:3:31667:31674	925487	21	True				
ANR	929785	Identifier	default		925487	0					
ANR	929786	CompoundStatement		676:4:18146:18160	925487	22					
ANR	929787	IdentifierDeclStatement	char foo [ 1024 ] ;	1061:4:31682:31696	925487	0	True				
ANR	929788	IdentifierDecl	foo [ 1024 ]		925487	0					
ANR	929789	IdentifierDeclType	char [ 1024 ]		925487	0					
ANR	929790	Identifier	foo		925487	1					
ANR	929791	PrimaryExpression	1024		925487	2					
ANR	929792	ExpressionStatement	r_cons_flush ( )	1062:4:31702:31717	925487	1	True				
ANR	929793	CallExpression	r_cons_flush ( )		925487	0					
ANR	929794	Callee	r_cons_flush		925487	0					
ANR	929795	Identifier	r_cons_flush		925487	0					
ANR	929796	ArgumentList			925487	1					
ANR	929797	ForStatement	for ( input ++ ; * input == ' ' ; input ++ )		925487	2					
ANR	929798	ForInit	input ++ ;	1063:9:31728:31735	925487	0	True				
ANR	929799	PostIncDecOperationExpression	input ++		925487	0					
ANR	929800	Identifier	input		925487	0					
ANR	929801	IncDec	++		925487	1					
ANR	929802	Condition	* input == ' '	1063:18:31737:31749	925487	1	True				
ANR	929803	EqualityExpression	* input == ' '		925487	0		==			
ANR	929804	UnaryOperationExpression	* input		925487	0					
ANR	929805	UnaryOperator	*		925487	0					
ANR	929806	Identifier	input		925487	1					
ANR	929807	PrimaryExpression	' '		925487	1					
ANR	929808	PostIncDecOperationExpression	input ++	1063:33:31752:31758	925487	2	True				
ANR	929809	Identifier	input		925487	0					
ANR	929810	IncDec	++		925487	1					
ANR	929811	ExpressionStatement		1063:41:31760:31760	925487	3	True				
ANR	929812	ExpressionStatement	"snprintf ( foo , sizeof ( foo ) - 1 , ""%s: "" , input )"	1065:4:31794:31841	925487	3	True				
ANR	929813	CallExpression	"snprintf ( foo , sizeof ( foo ) - 1 , ""%s: "" , input )"		925487	0					
ANR	929814	Callee	snprintf		925487	0					
ANR	929815	Identifier	snprintf		925487	0					
ANR	929816	ArgumentList	foo		925487	1					
ANR	929817	Argument	foo		925487	0					
ANR	929818	Identifier	foo		925487	0					
ANR	929819	Argument	sizeof ( foo ) - 1		925487	1					
ANR	929820	AdditiveExpression	sizeof ( foo ) - 1		925487	0		-			
ANR	929821	SizeofExpression	sizeof ( foo )		925487	0					
ANR	929822	Sizeof	sizeof		925487	0					
ANR	929823	SizeofOperand	foo		925487	1					
ANR	929824	PrimaryExpression	1		925487	1					
ANR	929825	Argument	"""%s: """		925487	2					
ANR	929826	PrimaryExpression	"""%s: """		925487	0					
ANR	929827	Argument	input		925487	3					
ANR	929828	Identifier	input		925487	0					
ANR	929829	ExpressionStatement	r_line_set_prompt ( foo )	1066:4:31847:31870	925487	4	True				
ANR	929830	CallExpression	r_line_set_prompt ( foo )		925487	0					
ANR	929831	Callee	r_line_set_prompt		925487	0					
ANR	929832	Identifier	r_line_set_prompt		925487	0					
ANR	929833	ArgumentList	foo		925487	1					
ANR	929834	Argument	foo		925487	0					
ANR	929835	Identifier	foo		925487	0					
ANR	929836	ExpressionStatement	"r_cons_fgets ( foo , sizeof ( foo ) - 1 , 0 , NULL )"	1067:4:31876:31919	925487	5	True				
ANR	929837	CallExpression	"r_cons_fgets ( foo , sizeof ( foo ) - 1 , 0 , NULL )"		925487	0					
ANR	929838	Callee	r_cons_fgets		925487	0					
ANR	929839	Identifier	r_cons_fgets		925487	0					
ANR	929840	ArgumentList	foo		925487	1					
ANR	929841	Argument	foo		925487	0					
ANR	929842	Identifier	foo		925487	0					
ANR	929843	Argument	sizeof ( foo ) - 1		925487	1					
ANR	929844	AdditiveExpression	sizeof ( foo ) - 1		925487	0		-			
ANR	929845	SizeofExpression	sizeof ( foo )		925487	0					
ANR	929846	Sizeof	sizeof		925487	0					
ANR	929847	SizeofOperand	foo		925487	1					
ANR	929848	PrimaryExpression	1		925487	1					
ANR	929849	Argument	0		925487	2					
ANR	929850	PrimaryExpression	0		925487	0					
ANR	929851	Argument	NULL		925487	3					
ANR	929852	Identifier	NULL		925487	0					
ANR	929853	ExpressionStatement	foo [ sizeof ( foo ) - 1 ] = 0	1068:4:31925:31950	925487	6	True				
ANR	929854	AssignmentExpression	foo [ sizeof ( foo ) - 1 ] = 0		925487	0		=			
ANR	929855	ArrayIndexing	foo [ sizeof ( foo ) - 1 ]		925487	0					
ANR	929856	Identifier	foo		925487	0					
ANR	929857	AdditiveExpression	sizeof ( foo ) - 1		925487	1		-			
ANR	929858	SizeofExpression	sizeof ( foo )		925487	0					
ANR	929859	Sizeof	sizeof		925487	0					
ANR	929860	SizeofOperand	foo		925487	1					
ANR	929861	PrimaryExpression	1		925487	1					
ANR	929862	PrimaryExpression	0		925487	1					
ANR	929863	ExpressionStatement	"r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , foo , strlen ( foo ) + 1 )"	1069:4:31956:32026	925487	7	True				
ANR	929864	CallExpression	"r_core_yank_set_str ( core , R_CORE_FOREIGN_ADDR , foo , strlen ( foo ) + 1 )"		925487	0					
ANR	929865	Callee	r_core_yank_set_str		925487	0					
ANR	929866	Identifier	r_core_yank_set_str		925487	0					
ANR	929867	ArgumentList	core		925487	1					
ANR	929868	Argument	core		925487	0					
ANR	929869	Identifier	core		925487	0					
ANR	929870	Argument	R_CORE_FOREIGN_ADDR		925487	1					
ANR	929871	Identifier	R_CORE_FOREIGN_ADDR		925487	0					
ANR	929872	Argument	foo		925487	2					
ANR	929873	Identifier	foo		925487	0					
ANR	929874	Argument	strlen ( foo ) + 1		925487	3					
ANR	929875	AdditiveExpression	strlen ( foo ) + 1		925487	0		+			
ANR	929876	CallExpression	strlen ( foo )		925487	0					
ANR	929877	Callee	strlen		925487	0					
ANR	929878	Identifier	strlen		925487	0					
ANR	929879	ArgumentList	foo		925487	1					
ANR	929880	Argument	foo		925487	0					
ANR	929881	Identifier	foo		925487	0					
ANR	929882	PrimaryExpression	1		925487	1					
ANR	929883	ExpressionStatement	"core -> num -> value = r_num_math ( core -> num , foo )"	1070:4:32032:32078	925487	8	True				
ANR	929884	AssignmentExpression	"core -> num -> value = r_num_math ( core -> num , foo )"		925487	0		=			
ANR	929885	PtrMemberAccess	core -> num -> value		925487	0					
ANR	929886	PtrMemberAccess	core -> num		925487	0					
ANR	929887	Identifier	core		925487	0					
ANR	929888	Identifier	num		925487	1					
ANR	929889	Identifier	value		925487	1					
ANR	929890	CallExpression	"r_num_math ( core -> num , foo )"		925487	1					
ANR	929891	Callee	r_num_math		925487	0					
ANR	929892	Identifier	r_num_math		925487	0					
ANR	929893	ArgumentList	core -> num		925487	1					
ANR	929894	Argument	core -> num		925487	0					
ANR	929895	PtrMemberAccess	core -> num		925487	0					
ANR	929896	Identifier	core		925487	0					
ANR	929897	Identifier	num		925487	1					
ANR	929898	Argument	foo		925487	1					
ANR	929899	Identifier	foo		925487	0					
ANR	929900	BreakStatement	break ;	1072:4:32090:32095	925487	23	True				
ANR	929901	ExpressionStatement	r_cons_set_raw ( 0 )	1075:2:32108:32126	925487	169	True				
ANR	929902	CallExpression	r_cons_set_raw ( 0 )		925487	0					
ANR	929903	Callee	r_cons_set_raw		925487	0					
ANR	929904	Identifier	r_cons_set_raw		925487	0					
ANR	929905	ArgumentList	0		925487	1					
ANR	929906	Argument	0		925487	0					
ANR	929907	PrimaryExpression	0		925487	0					
ANR	929908	BreakStatement	break ;	1076:2:32130:32135	925487	170	True				
ANR	929909	Label	case 'w' :	1077:1:32138:32146	925487	171	True				
ANR	929910	CompoundStatement		694:2:18673:18738	925487	172					
ANR	929911	IdentifierDeclStatement	"ut64 addr = r_num_math ( core -> num , input + 1 ) ;"	1078:2:32160:32205	925487	0	True				
ANR	929912	IdentifierDecl	"addr = r_num_math ( core -> num , input + 1 )"		925487	0					
ANR	929913	IdentifierDeclType	ut64		925487	0					
ANR	929914	Identifier	addr		925487	1					
ANR	929915	AssignmentExpression	"addr = r_num_math ( core -> num , input + 1 )"		925487	2		=			
ANR	929916	Identifier	addr		925487	0					
ANR	929917	CallExpression	"r_num_math ( core -> num , input + 1 )"		925487	1					
ANR	929918	Callee	r_num_math		925487	0					
ANR	929919	Identifier	r_num_math		925487	0					
ANR	929920	ArgumentList	core -> num		925487	1					
ANR	929921	Argument	core -> num		925487	0					
ANR	929922	PtrMemberAccess	core -> num		925487	0					
ANR	929923	Identifier	core		925487	0					
ANR	929924	Identifier	num		925487	1					
ANR	929925	Argument	input + 1		925487	1					
ANR	929926	AdditiveExpression	input + 1		925487	0		+			
ANR	929927	Identifier	input		925487	0					
ANR	929928	PrimaryExpression	1		925487	1					
ANR	929929	IdentifierDeclStatement	"char * rstr = core -> print -> hasrefs ( core -> print -> user , addr , true ) ;"	1079:2:32209:32274	925487	1	True				
ANR	929930	IdentifierDecl	"* rstr = core -> print -> hasrefs ( core -> print -> user , addr , true )"		925487	0					
ANR	929931	IdentifierDeclType	char *		925487	0					
ANR	929932	Identifier	rstr		925487	1					
ANR	929933	AssignmentExpression	"* rstr = core -> print -> hasrefs ( core -> print -> user , addr , true )"		925487	2		=			
ANR	929934	Identifier	rstr		925487	0					
ANR	929935	CallExpression	"core -> print -> hasrefs ( core -> print -> user , addr , true )"		925487	1					
ANR	929936	Callee	core -> print -> hasrefs		925487	0					
ANR	929937	PtrMemberAccess	core -> print -> hasrefs		925487	0					
ANR	929938	PtrMemberAccess	core -> print		925487	0					
ANR	929939	Identifier	core		925487	0					
ANR	929940	Identifier	print		925487	1					
ANR	929941	Identifier	hasrefs		925487	1					
ANR	929942	ArgumentList	core -> print -> user		925487	1					
ANR	929943	Argument	core -> print -> user		925487	0					
ANR	929944	PtrMemberAccess	core -> print -> user		925487	0					
ANR	929945	PtrMemberAccess	core -> print		925487	0					
ANR	929946	Identifier	core		925487	0					
ANR	929947	Identifier	print		925487	1					
ANR	929948	Identifier	user		925487	1					
ANR	929949	Argument	addr		925487	1					
ANR	929950	Identifier	addr		925487	0					
ANR	929951	Argument	true		925487	2					
ANR	929952	Identifier	true		925487	0					
ANR	929953	IfStatement	if ( ! rstr )		925487	2					
ANR	929954	Condition	! rstr	1080:6:32282:32286	925487	0	True				
ANR	929955	UnaryOperationExpression	! rstr		925487	0					
ANR	929956	UnaryOperator	!		925487	0					
ANR	929957	Identifier	rstr		925487	1					
ANR	929958	CompoundStatement		695:13:18753:18753	925487	1					
ANR	929959	ExpressionStatement	"eprintf ( ""Cannot get refs\\n"" )"	1081:3:32294:32323	925487	0	True				
ANR	929960	CallExpression	"eprintf ( ""Cannot get refs\\n"" )"		925487	0					
ANR	929961	Callee	eprintf		925487	0					
ANR	929962	Identifier	eprintf		925487	0					
ANR	929963	ArgumentList	"""Cannot get refs\\n"""		925487	1					
ANR	929964	Argument	"""Cannot get refs\\n"""		925487	0					
ANR	929965	PrimaryExpression	"""Cannot get refs\\n"""		925487	0					
ANR	929966	BreakStatement	break ;	1082:3:32328:32333	925487	1	True				
ANR	929967	ExpressionStatement	r_cons_println ( rstr )	1084:2:32341:32362	925487	3	True				
ANR	929968	CallExpression	r_cons_println ( rstr )		925487	0					
ANR	929969	Callee	r_cons_println		925487	0					
ANR	929970	Identifier	r_cons_println		925487	0					
ANR	929971	ArgumentList	rstr		925487	1					
ANR	929972	Argument	rstr		925487	0					
ANR	929973	Identifier	rstr		925487	0					
ANR	929974	ExpressionStatement	free ( rstr )	1085:2:32366:32377	925487	4	True				
ANR	929975	CallExpression	free ( rstr )		925487	0					
ANR	929976	Callee	free		925487	0					
ANR	929977	Identifier	free		925487	0					
ANR	929978	ArgumentList	rstr		925487	1					
ANR	929979	Argument	rstr		925487	0					
ANR	929980	Identifier	rstr		925487	0					
ANR	929981	BreakStatement	break ;	1086:2:32381:32386	925487	5	True				
ANR	929982	Label	case 't' :	1088:1:32392:32400	925487	173	True				
ANR	929983	CompoundStatement		704:2:18878:18898	925487	174					
ANR	929984	IdentifierDeclStatement	struct r_prof_t prof ;	1089:2:32414:32434	925487	0	True				
ANR	929985	IdentifierDecl	prof		925487	0					
ANR	929986	IdentifierDeclType	struct r_prof_t		925487	0					
ANR	929987	Identifier	prof		925487	1					
ANR	929988	ExpressionStatement	r_prof_start ( & prof )	1090:2:32438:32458	925487	1	True				
ANR	929989	CallExpression	r_prof_start ( & prof )		925487	0					
ANR	929990	Callee	r_prof_start		925487	0					
ANR	929991	Identifier	r_prof_start		925487	0					
ANR	929992	ArgumentList	& prof		925487	1					
ANR	929993	Argument	& prof		925487	0					
ANR	929994	UnaryOperationExpression	& prof		925487	0					
ANR	929995	UnaryOperator	&		925487	0					
ANR	929996	Identifier	prof		925487	1					
ANR	929997	ExpressionStatement	"r_core_cmd ( core , input + 1 , 0 )"	1091:2:32462:32493	925487	2	True				
ANR	929998	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	0					
ANR	929999	Callee	r_core_cmd		925487	0					
ANR	930000	Identifier	r_core_cmd		925487	0					
ANR	930001	ArgumentList	core		925487	1					
ANR	930002	Argument	core		925487	0					
ANR	930003	Identifier	core		925487	0					
ANR	930004	Argument	input + 1		925487	1					
ANR	930005	AdditiveExpression	input + 1		925487	0		+			
ANR	930006	Identifier	input		925487	0					
ANR	930007	PrimaryExpression	1		925487	1					
ANR	930008	Argument	0		925487	2					
ANR	930009	PrimaryExpression	0		925487	0					
ANR	930010	ExpressionStatement	r_prof_end ( & prof )	1092:2:32497:32515	925487	3	True				
ANR	930011	CallExpression	r_prof_end ( & prof )		925487	0					
ANR	930012	Callee	r_prof_end		925487	0					
ANR	930013	Identifier	r_prof_end		925487	0					
ANR	930014	ArgumentList	& prof		925487	1					
ANR	930015	Argument	& prof		925487	0					
ANR	930016	UnaryOperationExpression	& prof		925487	0					
ANR	930017	UnaryOperator	&		925487	0					
ANR	930018	Identifier	prof		925487	1					
ANR	930019	ExpressionStatement	core -> num -> value = ( ut64 ) ( int ) prof . result	1093:2:32519:32560	925487	4	True				
ANR	930020	AssignmentExpression	core -> num -> value = ( ut64 ) ( int ) prof . result		925487	0		=			
ANR	930021	PtrMemberAccess	core -> num -> value		925487	0					
ANR	930022	PtrMemberAccess	core -> num		925487	0					
ANR	930023	Identifier	core		925487	0					
ANR	930024	Identifier	num		925487	1					
ANR	930025	Identifier	value		925487	1					
ANR	930026	CastExpression	( ut64 ) ( int ) prof . result		925487	1					
ANR	930027	CastTarget	ut64		925487	0					
ANR	930028	CastExpression	( int ) prof . result		925487	1					
ANR	930029	CastTarget	int		925487	0					
ANR	930030	MemberAccess	prof . result		925487	1					
ANR	930031	Identifier	prof		925487	0					
ANR	930032	Identifier	result		925487	1					
ANR	930033	ExpressionStatement	"eprintf ( ""%lf\\n"" , prof . result )"	1094:2:32564:32594	925487	5	True				
ANR	930034	CallExpression	"eprintf ( ""%lf\\n"" , prof . result )"		925487	0					
ANR	930035	Callee	eprintf		925487	0					
ANR	930036	Identifier	eprintf		925487	0					
ANR	930037	ArgumentList	"""%lf\\n"""		925487	1					
ANR	930038	Argument	"""%lf\\n"""		925487	0					
ANR	930039	PrimaryExpression	"""%lf\\n"""		925487	0					
ANR	930040	Argument	prof . result		925487	1					
ANR	930041	MemberAccess	prof . result		925487	0					
ANR	930042	Identifier	prof		925487	0					
ANR	930043	Identifier	result		925487	1					
ANR	930044	BreakStatement	break ;	1095:2:32598:32603	925487	6	True				
ANR	930045	Label	case '?' :	1097:1:32609:32617	925487	175	True				
ANR	930046	IfStatement	if ( input [ 1 ] == '?' )		925487	176					
ANR	930047	Condition	input [ 1 ] == '?'	1098:6:32633:32647	925487	0	True				
ANR	930048	EqualityExpression	input [ 1 ] == '?'		925487	0		==			
ANR	930049	ArrayIndexing	input [ 1 ]		925487	0					
ANR	930050	Identifier	input		925487	0					
ANR	930051	PrimaryExpression	1		925487	1					
ANR	930052	PrimaryExpression	'?'		925487	1					
ANR	930053	CompoundStatement		713:23:19114:19114	925487	1					
ANR	930054	IfStatement	if ( input [ 2 ] == '?' )		925487	0					
ANR	930055	Condition	input [ 2 ] == '?'	1099:7:32659:32673	925487	0	True				
ANR	930056	EqualityExpression	input [ 2 ] == '?'		925487	0		==			
ANR	930057	ArrayIndexing	input [ 2 ]		925487	0					
ANR	930058	Identifier	input		925487	0					
ANR	930059	PrimaryExpression	2		925487	1					
ANR	930060	PrimaryExpression	'?'		925487	1					
ANR	930061	CompoundStatement		714:24:19140:19140	925487	1					
ANR	930062	ExpressionStatement	"r_core_clippy ( ""What are you doing?"" )"	1100:4:32691:32728	925487	0	True				
ANR	930063	CallExpression	"r_core_clippy ( ""What are you doing?"" )"		925487	0					
ANR	930064	Callee	r_core_clippy		925487	0					
ANR	930065	Identifier	r_core_clippy		925487	0					
ANR	930066	ArgumentList	"""What are you doing?"""		925487	1					
ANR	930067	Argument	"""What are you doing?"""		925487	0					
ANR	930068	PrimaryExpression	"""What are you doing?"""		925487	0					
ANR	930069	ReturnStatement	return 0 ;	1101:4:32734:32742	925487	1	True				
ANR	930070	PrimaryExpression	0		925487	0					
ANR	930071	IfStatement	if ( input [ 2 ] )		925487	1					
ANR	930072	Condition	input [ 2 ]	1103:7:32756:32763	925487	0	True				
ANR	930073	ArrayIndexing	input [ 2 ]		925487	0					
ANR	930074	Identifier	input		925487	0					
ANR	930075	PrimaryExpression	2		925487	1					
ANR	930076	CompoundStatement		718:17:19230:19230	925487	1					
ANR	930077	IfStatement	if ( core -> num -> value )		925487	0					
ANR	930078	Condition	core -> num -> value	1104:8:32776:32791	925487	0	True				
ANR	930079	PtrMemberAccess	core -> num -> value		925487	0					
ANR	930080	PtrMemberAccess	core -> num		925487	0					
ANR	930081	Identifier	core		925487	0					
ANR	930082	Identifier	num		925487	1					
ANR	930083	Identifier	value		925487	1					
ANR	930084	CompoundStatement		719:26:19258:19258	925487	1					
ANR	930085	ExpressionStatement	"r_core_cmd ( core , input + 1 , 0 )"	1105:5:32801:32832	925487	0	True				
ANR	930086	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	0					
ANR	930087	Callee	r_core_cmd		925487	0					
ANR	930088	Identifier	r_core_cmd		925487	0					
ANR	930089	ArgumentList	core		925487	1					
ANR	930090	Argument	core		925487	0					
ANR	930091	Identifier	core		925487	0					
ANR	930092	Argument	input + 1		925487	1					
ANR	930093	AdditiveExpression	input + 1		925487	0		+			
ANR	930094	Identifier	input		925487	0					
ANR	930095	PrimaryExpression	1		925487	1					
ANR	930096	Argument	0		925487	2					
ANR	930097	PrimaryExpression	0		925487	0					
ANR	930098	BreakStatement	break ;	1107:4:32844:32849	925487	1	True				
ANR	930099	ExpressionStatement	"r_core_cmd_help ( core , help_msg_question )"	1109:3:32859:32900	925487	2	True				
ANR	930100	CallExpression	"r_core_cmd_help ( core , help_msg_question )"		925487	0					
ANR	930101	Callee	r_core_cmd_help		925487	0					
ANR	930102	Identifier	r_core_cmd_help		925487	0					
ANR	930103	ArgumentList	core		925487	1					
ANR	930104	Argument	core		925487	0					
ANR	930105	Identifier	core		925487	0					
ANR	930106	Argument	help_msg_question		925487	1					
ANR	930107	Identifier	help_msg_question		925487	0					
ANR	930108	ReturnStatement	return 0 ;	1110:3:32905:32913	925487	3	True				
ANR	930109	PrimaryExpression	0		925487	0					
ANR	930110	ElseStatement	else		925487	0					
ANR	930111	IfStatement	if ( input [ 1 ] )		925487	0					
ANR	930112	Condition	input [ 1 ]	1111:13:32928:32935	925487	0	True				
ANR	930113	ArrayIndexing	input [ 1 ]		925487	0					
ANR	930114	Identifier	input		925487	0					
ANR	930115	PrimaryExpression	1		925487	1					
ANR	930116	CompoundStatement		726:23:19402:19402	925487	1					
ANR	930117	IfStatement	if ( core -> num -> value )		925487	0					
ANR	930118	Condition	core -> num -> value	1112:7:32947:32962	925487	0	True				
ANR	930119	PtrMemberAccess	core -> num -> value		925487	0					
ANR	930120	PtrMemberAccess	core -> num		925487	0					
ANR	930121	Identifier	core		925487	0					
ANR	930122	Identifier	num		925487	1					
ANR	930123	Identifier	value		925487	1					
ANR	930124	CompoundStatement		727:25:19429:19429	925487	1					
ANR	930125	ExpressionStatement	"core -> num -> value = r_core_cmd ( core , input + 1 , 0 )"	1113:4:32971:33019	925487	0	True				
ANR	930126	AssignmentExpression	"core -> num -> value = r_core_cmd ( core , input + 1 , 0 )"		925487	0		=			
ANR	930127	PtrMemberAccess	core -> num -> value		925487	0					
ANR	930128	PtrMemberAccess	core -> num		925487	0					
ANR	930129	Identifier	core		925487	0					
ANR	930130	Identifier	num		925487	1					
ANR	930131	Identifier	value		925487	1					
ANR	930132	CallExpression	"r_core_cmd ( core , input + 1 , 0 )"		925487	1					
ANR	930133	Callee	r_core_cmd		925487	0					
ANR	930134	Identifier	r_core_cmd		925487	0					
ANR	930135	ArgumentList	core		925487	1					
ANR	930136	Argument	core		925487	0					
ANR	930137	Identifier	core		925487	0					
ANR	930138	Argument	input + 1		925487	1					
ANR	930139	AdditiveExpression	input + 1		925487	0		+			
ANR	930140	Identifier	input		925487	0					
ANR	930141	PrimaryExpression	1		925487	1					
ANR	930142	Argument	0		925487	2					
ANR	930143	PrimaryExpression	0		925487	0					
ANR	930144	ElseStatement	else		925487	0					
ANR	930145	CompoundStatement		730:9:19499:19499	925487	0					
ANR	930146	IfStatement	if ( core -> num -> dbz )		925487	0					
ANR	930147	Condition	core -> num -> dbz	1116:7:33044:33057	925487	0	True				
ANR	930148	PtrMemberAccess	core -> num -> dbz		925487	0					
ANR	930149	PtrMemberAccess	core -> num		925487	0					
ANR	930150	Identifier	core		925487	0					
ANR	930151	Identifier	num		925487	1					
ANR	930152	Identifier	dbz		925487	1					
ANR	930153	CompoundStatement		731:23:19524:19524	925487	1					
ANR	930154	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	1117:4:33066:33108	925487	0	True				
ANR	930155	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		925487	0					
ANR	930156	Callee	eprintf		925487	0					
ANR	930157	Identifier	eprintf		925487	0					
ANR	930158	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		925487	1					
ANR	930159	Argument	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	930160	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		925487	0					
ANR	930161	Statement	r_cons_printf	1119:3:33118:33130	925487	1	True				
ANR	930162	Statement	(	1119:17:33132:33132	925487	2	True				
ANR	930163	Statement	"""%"""	1119:18:33133:33135	925487	3	True				
ANR	930164	Statement	PFMT64d	1119:21:33136:33142	925487	4	True				
ANR	930165	Statement	"""\\n"""	1119:28:33143:33146	925487	5	True				
ANR	930166	Statement	","	1119:32:33147:33147	925487	6	True				
ANR	930167	Statement	core	1119:34:33149:33152	925487	7	True				
ANR	930168	Statement	->	1119:38:33153:33154	925487	8	True				
ANR	930169	Statement	num	1119:40:33155:33157	925487	9	True				
ANR	930170	Statement	->	1119:43:33158:33159	925487	10	True				
ANR	930171	Statement	value	1119:45:33160:33164	925487	11	True				
ANR	930172	Statement	)	1119:50:33165:33165	925487	12	True				
ANR	930173	ExpressionStatement		1119:51:33166:33166	925487	13	True				
ANR	930174	BreakStatement	break ;	1121:2:33174:33179	925487	177	True				
ANR	930175	Label	case '\\0' :	1122:1:33182:33191	925487	178	True				
ANR	930176	Label	default :	1123:1:33201:33208	925487	179	True				
ANR	930177	Identifier	default		925487	0					
ANR	930178	ExpressionStatement	"r_core_cmd_help ( core , help_msg_intro )"	1125:2:33242:33280	925487	180	True				
ANR	930179	CallExpression	"r_core_cmd_help ( core , help_msg_intro )"		925487	0					
ANR	930180	Callee	r_core_cmd_help		925487	0					
ANR	930181	Identifier	r_core_cmd_help		925487	0					
ANR	930182	ArgumentList	core		925487	1					
ANR	930183	Argument	core		925487	0					
ANR	930184	Identifier	core		925487	0					
ANR	930185	Argument	help_msg_intro		925487	1					
ANR	930186	Identifier	help_msg_intro		925487	0					
ANR	930187	ExpressionStatement	"r_core_cmd_help ( core , help_msg_root )"	1126:2:33284:33321	925487	181	True				
ANR	930188	CallExpression	"r_core_cmd_help ( core , help_msg_root )"		925487	0					
ANR	930189	Callee	r_core_cmd_help		925487	0					
ANR	930190	Identifier	r_core_cmd_help		925487	0					
ANR	930191	ArgumentList	core		925487	1					
ANR	930192	Argument	core		925487	0					
ANR	930193	Identifier	core		925487	0					
ANR	930194	Argument	help_msg_root		925487	1					
ANR	930195	Identifier	help_msg_root		925487	0					
ANR	930196	BreakStatement	break ;	1127:2:33325:33330	925487	182	True				
ANR	930197	ReturnStatement	return 0 ;	1129:1:33336:33344	925487	9	True				
ANR	930198	PrimaryExpression	0		925487	0					
ANR	930199	ReturnType	static int		925487	1					
ANR	930200	Identifier	cmd_help		925487	2					
ANR	930201	ParameterList	"void * data , const char * input"		925487	3					
ANR	930202	Parameter	void * data	386:20:13504:13513	925487	0	True				
ANR	930203	ParameterType	void *		925487	0					
ANR	930204	Identifier	data		925487	1					
ANR	930205	Parameter	const char * input	386:32:13516:13532	925487	1	True				
ANR	930206	ParameterType	const char *		925487	0					
ANR	930207	Identifier	input		925487	1					
ANR	930208	CFGEntryNode	ENTRY		925487		True				
ANR	930209	CFGExitNode	EXIT		925487		True				
ANR	930210	Symbol	core -> num -> dbz		925487						
ANR	930211	Symbol	wideOffsets		925487						
ANR	930212	Symbol	R_SYS_ARCH		925487						
ANR	930213	Symbol	* map		925487						
ANR	930214	Symbol	* input		925487						
ANR	930215	Symbol	strchr		925487						
ANR	930216	Symbol	core -> offset		925487						
ANR	930217	Symbol	r_str_hash		925487						
ANR	930218	Symbol	len		925487						
ANR	930219	Symbol	tmp		925487						
ANR	930220	Symbol	buflen		925487						
ANR	930221	Symbol	* core -> num		925487						
ANR	930222	Symbol	vars		925487						
ANR	930223	Symbol	portions		925487						
ANR	930224	Symbol	r_cons_is_interactive		925487						
ANR	930225	Symbol	vernum		925487						
ANR	930226	Symbol	bits		925487						
ANR	930227	Symbol	iter		925487						
ANR	930228	Symbol	str		925487						
ANR	930229	Symbol	input		925487						
ANR	930230	Symbol	r_str_donut		925487						
ANR	930231	Symbol	* * * core		925487						
ANR	930232	Symbol	core -> cons -> context -> pal		925487						
ANR	930233	Symbol	size		925487						
ANR	930234	Symbol	r_config_get_i		925487						
ANR	930235	Symbol	core -> print -> user		925487						
ANR	930236	Symbol	r_str_trim_ro		925487						
ANR	930237	Symbol	* out		925487						
ANR	930238	Symbol	R2_GITTAP		925487						
ANR	930239	Symbol	word		925487						
ANR	930240	Symbol	r_io_map_get_paddr		925487						
ANR	930241	Symbol	core -> cons -> context		925487						
ANR	930242	Symbol	* nums		925487						
ANR	930243	Symbol	r_num_as_string		925487						
ANR	930244	Symbol	* core -> cons		925487						
ANR	930245	Symbol	* core		925487						
ANR	930246	Symbol	signbit		925487						
ANR	930247	Symbol	rstr		925487						
ANR	930248	Symbol	help_msg_question_V		925487						
ANR	930249	Symbol	isnan		925487						
ANR	930250	Symbol	out		925487						
ANR	930251	Symbol	map -> delta		925487						
ANR	930252	Symbol	r_cons_is_breaked		925487						
ANR	930253	Symbol	core -> cons		925487						
ANR	930254	Symbol	core -> io		925487						
ANR	930255	Symbol	help_msg_at		925487						
ANR	930256	Symbol	arg		925487						
ANR	930257	Symbol	* str		925487						
ANR	930258	Symbol	map		925487						
ANR	930259	Symbol	r_hex_str2bin		925487						
ANR	930260	Symbol	atoi		925487						
ANR	930261	Symbol	a		925487						
ANR	930262	Symbol	malloc		925487						
ANR	930263	Symbol	b		925487						
ANR	930264	Symbol	r_str_pad		925487						
ANR	930265	Symbol	d		925487						
ANR	930266	Symbol	core -> curtab		925487						
ANR	930267	Symbol	f		925487						
ANR	930268	Symbol	r_core_yank_hud_path		925487						
ANR	930269	Symbol	r_cons_yesno		925487						
ANR	930270	Symbol	i		925487						
ANR	930271	Symbol	r_str_word_get0		925487						
ANR	930272	Symbol	j		925487						
ANR	930273	Symbol	k		925487						
ANR	930274	Symbol	* p2		925487						
ANR	930275	Symbol	prof		925487						
ANR	930276	Symbol	n		925487						
ANR	930277	Symbol	o		925487						
ANR	930278	Symbol	p		925487						
ANR	930279	Symbol	q		925487						
ANR	930280	Symbol	r		925487						
ANR	930281	Symbol	buf		925487						
ANR	930282	Symbol	* core -> print		925487						
ANR	930283	Symbol	s		925487						
ANR	930284	Symbol	UT8_MAX		925487						
ANR	930285	Symbol	x		925487						
ANR	930286	Symbol	y		925487						
ANR	930287	Symbol	r_core_get_boundaries_prot		925487						
ANR	930288	Symbol	to		925487						
ANR	930289	Symbol	R_SYS_OS		925487						
ANR	930290	Symbol	r_list_length		925487						
ANR	930291	Symbol	* len		925487						
ANR	930292	Symbol	filterFlags		925487						
ANR	930293	Symbol	UT32_MAX		925487						
ANR	930294	Symbol	msg		925487						
ANR	930295	Symbol	r_core_cmd		925487						
ANR	930296	Symbol	R2_VERSION_COMMIT		925487						
ANR	930297	Symbol	data		925487						
ANR	930298	Symbol	pj_string		925487						
ANR	930299	Symbol	inputs		925487						
ANR	930300	Symbol	core -> num -> value		925487						
ANR	930301	Symbol	help_msg_at_at_at		925487						
ANR	930302	Symbol	space		925487						
ANR	930303	Symbol	* foo		925487						
ANR	930304	Symbol	strlen		925487						
ANR	930305	Symbol	pad		925487						
ANR	930306	Symbol	core -> cons -> context -> pal . flag		925487						
ANR	930307	Symbol	core -> print -> hasrefs		925487						
ANR	930308	Symbol	asnum		925487						
ANR	930309	Symbol	r_num_get		925487						
ANR	930310	Symbol	from		925487						
ANR	930311	Symbol	UT16_MAX		925487						
ANR	930312	Symbol	core -> num		925487						
ANR	930313	Symbol	newmsg		925487						
ANR	930314	Symbol	nums		925487						
ANR	930315	Symbol	help_msg_intro		925487						
ANR	930316	Symbol	help_msg_at_at		925487						
ANR	930317	Symbol	NULL		925487						
ANR	930318	Symbol	r_num_conditional		925487						
ANR	930319	Symbol	* * core -> cons		925487						
ANR	930320	Symbol	core -> num -> fvalue		925487						
ANR	930321	Symbol	help_msg_question_v		925487						
ANR	930322	Symbol	list		925487						
ANR	930323	Symbol	* portions		925487						
ANR	930324	Symbol	R2_VERSION		925487						
ANR	930325	Symbol	core -> io -> va		925487						
ANR	930326	Symbol	core		925487						
ANR	930327	Symbol	unit		925487						
ANR	930328	Symbol	r_num_to_bits		925487						
ANR	930329	Symbol	true		925487						
ANR	930330	Symbol	help_msg_question		925487						
ANR	930331	Symbol	core -> print		925487						
ANR	930332	Symbol	p2		925487						
ANR	930333	Symbol	map -> itv		925487						
ANR	930334	Symbol	prof . result		925487						
ANR	930335	Symbol	color		925487						
ANR	930336	Symbol	* vars		925487						
ANR	930337	Symbol	foo		925487						
ANR	930338	Symbol	r_str_split_list		925487						
ANR	930339	Symbol	R_EMPTY		925487						
ANR	930340	Symbol	calloc		925487						
ANR	930341	Symbol	help_msg_root		925487						
ANR	930342	Symbol	list_len		925487						
ANR	930343	Symbol	r_num_math		925487						
ANR	930344	Symbol	ret_ascii_table		925487						
ANR	930345	Symbol	* core -> cons -> context		925487						
ANR	930346	Symbol	map -> itv . addr		925487						
ANR	930347	Symbol	addr		925487						
ANR	930348	Symbol	& prof		925487						
ANR	930349	Symbol	sdb_fmt		925487						
ANR	930350	Symbol	* * core		925487						
ANR	930351	Symbol	core -> config		925487						
ANR	930352	Symbol	r_str_bool		925487						
ANR	930353	Symbol	r_num_between		925487						
ANR	930354	Symbol	false		925487						
ANR	930355	Symbol	& d		925487						
ANR	930356	Symbol	& f		925487						
ANR	930357	Symbol	r_num_str_split_list		925487						
ANR	930358	Symbol	r_num_rand		925487						
ANR	930359	Symbol	R_CORE_FOREIGN_ADDR		925487						
ANR	930360	Symbol	* core -> io		925487						
ANR	930361	Symbol	r_list_pop_head		925487						
ANR	930362	Symbol	* i		925487						
ANR	930363	Symbol	pc		925487						
ANR	930364	Symbol	& n		925487						
ANR	930365	Symbol	r_str_split		925487						
ANR	930366	Symbol	* p		925487						
ANR	930367	Symbol	pj		925487						
ANR	930368	Symbol	pj_new		925487						
ANR	930369	Symbol	step		925487						
ANR	930370	Symbol	strdup		925487						
ANR	930371	Symbol	* q		925487						
ANR	930372	Symbol	r_io_map_get		925487						
