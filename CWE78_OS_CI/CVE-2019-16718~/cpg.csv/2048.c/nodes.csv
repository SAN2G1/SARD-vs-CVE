command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1	File	data/converged/CVE-2019-16718~_radare2/2048.c								
ANR	2	DeclStmt									
ANR	3	Decl							int	int	score
ANR	4	DeclStmt									
ANR	5	Decl							int	int	moves
ANR	6	Function	twok_init	9:0:147:281							
ANR	7	FunctionDef	twok_init ()		6	0					
ANR	8	CompoundStatement		9:24:171:281	6	0					
ANR	9	IdentifierDeclStatement	"int i , j ;"	10:1:174:182	6	0	True				
ANR	10	IdentifierDecl	i		6	0					
ANR	11	IdentifierDeclType	int		6	0					
ANR	12	Identifier	i		6	1					
ANR	13	IdentifierDecl	j		6	1					
ANR	14	IdentifierDeclType	int		6	0					
ANR	15	Identifier	j		6	1					
ANR	16	ExpressionStatement	score = 0	11:1:185:194	6	1	True				
ANR	17	AssignmentExpression	score = 0		6	0		=			
ANR	18	Identifier	score		6	0					
ANR	19	PrimaryExpression	0		6	1					
ANR	20	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		6	2					
ANR	21	ForInit	i = 0 ;	12:6:202:207	6	0	True				
ANR	22	AssignmentExpression	i = 0		6	0		=			
ANR	23	Identifier	i		6	0					
ANR	24	PrimaryExpression	0		6	1					
ANR	25	Condition	i < 4	12:13:209:213	6	1	True				
ANR	26	RelationalExpression	i < 4		6	0		<			
ANR	27	Identifier	i		6	0					
ANR	28	PrimaryExpression	4		6	1					
ANR	29	PostIncDecOperationExpression	i ++	12:20:216:218	6	2	True				
ANR	30	Identifier	i		6	0					
ANR	31	IncDec	++		6	1					
ANR	32	CompoundStatement		4:25:49:49	6	3					
ANR	33	ForStatement	for ( j = 0 ; j < 4 ; j ++ )		6	0					
ANR	34	ForInit	j = 0 ;	13:7:230:235	6	0	True				
ANR	35	AssignmentExpression	j = 0		6	0		=			
ANR	36	Identifier	j		6	0					
ANR	37	PrimaryExpression	0		6	1					
ANR	38	Condition	j < 4	13:14:237:241	6	1	True				
ANR	39	RelationalExpression	j < 4		6	0		<			
ANR	40	Identifier	j		6	0					
ANR	41	PrimaryExpression	4		6	1					
ANR	42	PostIncDecOperationExpression	j ++	13:21:244:246	6	2	True				
ANR	43	Identifier	j		6	0					
ANR	44	IncDec	++		6	1					
ANR	45	CompoundStatement		5:26:77:77	6	3					
ANR	46	ExpressionStatement	twok_buf [ i ] [ j ] = 0	14:3:254:272	6	0	True				
ANR	47	AssignmentExpression	twok_buf [ i ] [ j ] = 0		6	0		=			
ANR	48	ArrayIndexing	twok_buf [ i ] [ j ]		6	0					
ANR	49	ArrayIndexing	twok_buf [ i ]		6	0					
ANR	50	Identifier	twok_buf		6	0					
ANR	51	Identifier	i		6	1					
ANR	52	Identifier	j		6	1					
ANR	53	PrimaryExpression	0		6	1					
ANR	54	ReturnType	static void		6	1					
ANR	55	Identifier	twok_init		6	2					
ANR	56	ParameterList			6	3					
ANR	57	CFGEntryNode	ENTRY		6		True				
ANR	58	CFGExitNode	EXIT		6		True				
ANR	59	Symbol	score		6						
ANR	60	Symbol	* * twok_buf		6						
ANR	61	Symbol	* * i		6						
ANR	62	Symbol	* i		6						
ANR	63	Symbol	* j		6						
ANR	64	Symbol	i		6						
ANR	65	Symbol	j		6						
ANR	66	Symbol	twok_buf		6						
ANR	67	Symbol	* twok_buf		6						
ANR	68	Function	twok_add	19:0:284:470							
ANR	69	FunctionDef	twok_add ()		68	0					
ANR	70	CompoundStatement		19:23:307:470	68	0					
ANR	71	IdentifierDeclStatement	"int i , j ;"	20:1:310:318	68	0	True				
ANR	72	IdentifierDecl	i		68	0					
ANR	73	IdentifierDeclType	int		68	0					
ANR	74	Identifier	i		68	1					
ANR	75	IdentifierDecl	j		68	1					
ANR	76	IdentifierDeclType	int		68	0					
ANR	77	Identifier	j		68	1					
ANR	78	WhileStatement	while ( true )		68	1					
ANR	79	Condition	true	21:8:328:331	68	0	True				
ANR	80	Identifier	true		68	0					
ANR	81	CompoundStatement		3:14:26:26	68	1					
ANR	82	ExpressionStatement	i = r_num_rand ( 4 )	22:2:338:356	68	0	True				
ANR	83	AssignmentExpression	i = r_num_rand ( 4 )		68	0		=			
ANR	84	Identifier	i		68	0					
ANR	85	CallExpression	r_num_rand ( 4 )		68	1					
ANR	86	Callee	r_num_rand		68	0					
ANR	87	Identifier	r_num_rand		68	0					
ANR	88	ArgumentList	4		68	1					
ANR	89	Argument	4		68	0					
ANR	90	PrimaryExpression	4		68	0					
ANR	91	ExpressionStatement	j = r_num_rand ( 4 )	23:2:360:378	68	1	True				
ANR	92	AssignmentExpression	j = r_num_rand ( 4 )		68	0		=			
ANR	93	Identifier	j		68	0					
ANR	94	CallExpression	r_num_rand ( 4 )		68	1					
ANR	95	Callee	r_num_rand		68	0					
ANR	96	Identifier	r_num_rand		68	0					
ANR	97	ArgumentList	4		68	1					
ANR	98	Argument	4		68	0					
ANR	99	PrimaryExpression	4		68	0					
ANR	100	IfStatement	if ( ! twok_buf [ i ] [ j ] )		68	2					
ANR	101	Condition	! twok_buf [ i ] [ j ]	24:6:386:400	68	0	True				
ANR	102	UnaryOperationExpression	! twok_buf [ i ] [ j ]		68	0					
ANR	103	UnaryOperator	!		68	0					
ANR	104	ArrayIndexing	twok_buf [ i ] [ j ]		68	1					
ANR	105	ArrayIndexing	twok_buf [ i ]		68	0					
ANR	106	Identifier	twok_buf		68	0					
ANR	107	Identifier	i		68	1					
ANR	108	Identifier	j		68	1					
ANR	109	CompoundStatement		6:23:95:95	68	1					
ANR	110	ExpressionStatement	twok_buf [ i ] [ j ] = 1 + ( r_num_rand ( 10 ) == 1 )	25:3:408:451	68	0	True				
ANR	111	AssignmentExpression	twok_buf [ i ] [ j ] = 1 + ( r_num_rand ( 10 ) == 1 )		68	0		=			
ANR	112	ArrayIndexing	twok_buf [ i ] [ j ]		68	0					
ANR	113	ArrayIndexing	twok_buf [ i ]		68	0					
ANR	114	Identifier	twok_buf		68	0					
ANR	115	Identifier	i		68	1					
ANR	116	Identifier	j		68	1					
ANR	117	AdditiveExpression	1 + ( r_num_rand ( 10 ) == 1 )		68	1		+			
ANR	118	PrimaryExpression	1		68	0					
ANR	119	EqualityExpression	r_num_rand ( 10 ) == 1		68	1		==			
ANR	120	CallExpression	r_num_rand ( 10 )		68	0					
ANR	121	Callee	r_num_rand		68	0					
ANR	122	Identifier	r_num_rand		68	0					
ANR	123	ArgumentList	10		68	1					
ANR	124	Argument	10		68	0					
ANR	125	PrimaryExpression	10		68	0					
ANR	126	PrimaryExpression	1		68	1					
ANR	127	BreakStatement	break ;	26:3:456:461	68	1	True				
ANR	128	ReturnType	static void		68	1					
ANR	129	Identifier	twok_add		68	2					
ANR	130	ParameterList			68	3					
ANR	131	CFGEntryNode	ENTRY		68		True				
ANR	132	CFGExitNode	EXIT		68		True				
ANR	133	Symbol	* * twok_buf		68						
ANR	134	Symbol	* * i		68						
ANR	135	Symbol	* i		68						
ANR	136	Symbol	* j		68						
ANR	137	Symbol	true		68						
ANR	138	Symbol	i		68						
ANR	139	Symbol	j		68						
ANR	140	Symbol	* twok_buf		68						
ANR	141	Symbol	twok_buf		68						
ANR	142	Symbol	r_num_rand		68						
ANR	143	Function	twok_fin	31:0:473:896							
ANR	144	FunctionDef	twok_fin ()		143	0					
ANR	145	CompoundStatement		31:23:496:896	143	0					
ANR	146	IdentifierDeclStatement	"int i , j ;"	32:1:499:507	143	0	True				
ANR	147	IdentifierDecl	i		143	0					
ANR	148	IdentifierDeclType	int		143	0					
ANR	149	Identifier	i		143	1					
ANR	150	IdentifierDecl	j		143	1					
ANR	151	IdentifierDeclType	int		143	0					
ANR	152	Identifier	j		143	1					
ANR	153	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		143	1					
ANR	154	ForInit	i = 0 ;	33:6:515:520	143	0	True				
ANR	155	AssignmentExpression	i = 0		143	0		=			
ANR	156	Identifier	i		143	0					
ANR	157	PrimaryExpression	0		143	1					
ANR	158	Condition	i < 4	33:13:522:526	143	1	True				
ANR	159	RelationalExpression	i < 4		143	0		<			
ANR	160	Identifier	i		143	0					
ANR	161	PrimaryExpression	4		143	1					
ANR	162	PostIncDecOperationExpression	i ++	33:20:529:531	143	2	True				
ANR	163	Identifier	i		143	0					
ANR	164	IncDec	++		143	1					
ANR	165	CompoundStatement		3:25:37:37	143	3					
ANR	166	ForStatement	for ( j = 0 ; j < 4 ; j ++ )		143	0					
ANR	167	ForInit	j = 0 ;	34:7:543:548	143	0	True				
ANR	168	AssignmentExpression	j = 0		143	0		=			
ANR	169	Identifier	j		143	0					
ANR	170	PrimaryExpression	0		143	1					
ANR	171	Condition	j < 4	34:14:550:554	143	1	True				
ANR	172	RelationalExpression	j < 4		143	0		<			
ANR	173	Identifier	j		143	0					
ANR	174	PrimaryExpression	4		143	1					
ANR	175	PostIncDecOperationExpression	j ++	34:21:557:559	143	2	True				
ANR	176	Identifier	j		143	0					
ANR	177	IncDec	++		143	1					
ANR	178	CompoundStatement		4:26:65:65	143	3					
ANR	179	IfStatement	if ( ! twok_buf [ i ] [ j ] )		143	0					
ANR	180	Condition	! twok_buf [ i ] [ j ]	35:7:571:585	143	0	True				
ANR	181	UnaryOperationExpression	! twok_buf [ i ] [ j ]		143	0					
ANR	182	UnaryOperator	!		143	0					
ANR	183	ArrayIndexing	twok_buf [ i ] [ j ]		143	1					
ANR	184	ArrayIndexing	twok_buf [ i ]		143	0					
ANR	185	Identifier	twok_buf		143	0					
ANR	186	Identifier	i		143	1					
ANR	187	Identifier	j		143	1					
ANR	188	CompoundStatement		5:24:91:91	143	1					
ANR	189	ReturnStatement	return true ;	36:4:594:605	143	0	True				
ANR	190	Identifier	true		143	0					
ANR	191	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		143	2					
ANR	192	ForInit	i = 0 ;	40:6:625:630	143	0	True				
ANR	193	AssignmentExpression	i = 0		143	0		=			
ANR	194	Identifier	i		143	0					
ANR	195	PrimaryExpression	0		143	1					
ANR	196	Condition	i < 4	40:13:632:636	143	1	True				
ANR	197	RelationalExpression	i < 4		143	0		<			
ANR	198	Identifier	i		143	0					
ANR	199	PrimaryExpression	4		143	1					
ANR	200	PostIncDecOperationExpression	i ++	40:20:639:641	143	2	True				
ANR	201	Identifier	i		143	0					
ANR	202	IncDec	++		143	1					
ANR	203	CompoundStatement		10:25:147:147	143	3					
ANR	204	ForStatement	for ( j = 0 ; j < 3 ; j ++ )		143	0					
ANR	205	ForInit	j = 0 ;	41:7:653:658	143	0	True				
ANR	206	AssignmentExpression	j = 0		143	0		=			
ANR	207	Identifier	j		143	0					
ANR	208	PrimaryExpression	0		143	1					
ANR	209	Condition	j < 3	41:14:660:664	143	1	True				
ANR	210	RelationalExpression	j < 3		143	0		<			
ANR	211	Identifier	j		143	0					
ANR	212	PrimaryExpression	3		143	1					
ANR	213	PostIncDecOperationExpression	j ++	41:21:667:669	143	2	True				
ANR	214	Identifier	j		143	0					
ANR	215	IncDec	++		143	1					
ANR	216	CompoundStatement		11:26:175:175	143	3					
ANR	217	IfStatement	if ( twok_buf [ i ] [ j ] == twok_buf [ i ] [ j + 1 ] )		143	0					
ANR	218	Condition	twok_buf [ i ] [ j ] == twok_buf [ i ] [ j + 1 ]	42:7:681:716	143	0	True				
ANR	219	EqualityExpression	twok_buf [ i ] [ j ] == twok_buf [ i ] [ j + 1 ]		143	0		==			
ANR	220	ArrayIndexing	twok_buf [ i ] [ j ]		143	0					
ANR	221	ArrayIndexing	twok_buf [ i ]		143	0					
ANR	222	Identifier	twok_buf		143	0					
ANR	223	Identifier	i		143	1					
ANR	224	Identifier	j		143	1					
ANR	225	ArrayIndexing	twok_buf [ i ] [ j + 1 ]		143	1					
ANR	226	ArrayIndexing	twok_buf [ i ]		143	0					
ANR	227	Identifier	twok_buf		143	0					
ANR	228	Identifier	i		143	1					
ANR	229	AdditiveExpression	j + 1		143	1		+			
ANR	230	Identifier	j		143	0					
ANR	231	PrimaryExpression	1		143	1					
ANR	232	CompoundStatement		12:45:222:222	143	1					
ANR	233	ReturnStatement	return true ;	43:4:725:736	143	0	True				
ANR	234	Identifier	true		143	0					
ANR	235	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		143	3					
ANR	236	ForInit	i = 0 ;	47:6:756:761	143	0	True				
ANR	237	AssignmentExpression	i = 0		143	0		=			
ANR	238	Identifier	i		143	0					
ANR	239	PrimaryExpression	0		143	1					
ANR	240	Condition	i < 3	47:13:763:767	143	1	True				
ANR	241	RelationalExpression	i < 3		143	0		<			
ANR	242	Identifier	i		143	0					
ANR	243	PrimaryExpression	3		143	1					
ANR	244	PostIncDecOperationExpression	i ++	47:20:770:772	143	2	True				
ANR	245	Identifier	i		143	0					
ANR	246	IncDec	++		143	1					
ANR	247	CompoundStatement		17:25:278:278	143	3					
ANR	248	ForStatement	for ( j = 0 ; j < 4 ; j ++ )		143	0					
ANR	249	ForInit	j = 0 ;	48:7:784:789	143	0	True				
ANR	250	AssignmentExpression	j = 0		143	0		=			
ANR	251	Identifier	j		143	0					
ANR	252	PrimaryExpression	0		143	1					
ANR	253	Condition	j < 4	48:14:791:795	143	1	True				
ANR	254	RelationalExpression	j < 4		143	0		<			
ANR	255	Identifier	j		143	0					
ANR	256	PrimaryExpression	4		143	1					
ANR	257	PostIncDecOperationExpression	j ++	48:21:798:800	143	2	True				
ANR	258	Identifier	j		143	0					
ANR	259	IncDec	++		143	1					
ANR	260	CompoundStatement		18:26:306:306	143	3					
ANR	261	IfStatement	if ( twok_buf [ i ] [ j ] == twok_buf [ i + 1 ] [ j ] )		143	0					
ANR	262	Condition	twok_buf [ i ] [ j ] == twok_buf [ i + 1 ] [ j ]	49:7:812:847	143	0	True				
ANR	263	EqualityExpression	twok_buf [ i ] [ j ] == twok_buf [ i + 1 ] [ j ]		143	0		==			
ANR	264	ArrayIndexing	twok_buf [ i ] [ j ]		143	0					
ANR	265	ArrayIndexing	twok_buf [ i ]		143	0					
ANR	266	Identifier	twok_buf		143	0					
ANR	267	Identifier	i		143	1					
ANR	268	Identifier	j		143	1					
ANR	269	ArrayIndexing	twok_buf [ i + 1 ] [ j ]		143	1					
ANR	270	ArrayIndexing	twok_buf [ i + 1 ]		143	0					
ANR	271	Identifier	twok_buf		143	0					
ANR	272	AdditiveExpression	i + 1		143	1		+			
ANR	273	Identifier	i		143	0					
ANR	274	PrimaryExpression	1		143	1					
ANR	275	Identifier	j		143	1					
ANR	276	CompoundStatement		19:45:353:353	143	1					
ANR	277	ReturnStatement	return true ;	50:4:856:867	143	0	True				
ANR	278	Identifier	true		143	0					
ANR	279	ReturnStatement	return false ;	54:1:882:894	143	4	True				
ANR	280	Identifier	false		143	0					
ANR	281	ReturnType	static bool		143	1					
ANR	282	Identifier	twok_fin		143	2					
ANR	283	ParameterList			143	3					
ANR	284	CFGEntryNode	ENTRY		143		True				
ANR	285	CFGExitNode	EXIT		143		True				
ANR	286	Symbol	* * twok_buf		143						
ANR	287	Symbol	* * i		143						
ANR	288	Symbol	* i		143						
ANR	289	Symbol	* j		143						
ANR	290	Symbol	true		143						
ANR	291	Symbol	false		143						
ANR	292	Symbol	i		143						
ANR	293	Symbol	j		143						
ANR	294	Symbol	* twok_buf		143						
ANR	295	Symbol	twok_buf		143						
ANR	296	Function	twok_move	57:0:899:1595							
ANR	297	FunctionDef	"twok_move (int u , int v)"		296	0					
ANR	298	CompoundStatement		57:36:935:1595	296	0					
ANR	299	IdentifierDeclStatement	"int i , j , k ;"	58:1:938:949	296	0	True				
ANR	300	IdentifierDecl	i		296	0					
ANR	301	IdentifierDeclType	int		296	0					
ANR	302	Identifier	i		296	1					
ANR	303	IdentifierDecl	j		296	1					
ANR	304	IdentifierDeclType	int		296	0					
ANR	305	Identifier	j		296	1					
ANR	306	IdentifierDecl	k		296	2					
ANR	307	IdentifierDeclType	int		296	0					
ANR	308	Identifier	k		296	1					
ANR	309	IdentifierDeclStatement	"int nKI = 0 , nKJ = 0 , nIK = 0 , nJK = 0 ;"	59:1:952:990	296	1	True				
ANR	310	IdentifierDecl	nKI = 0		296	0					
ANR	311	IdentifierDeclType	int		296	0					
ANR	312	Identifier	nKI		296	1					
ANR	313	AssignmentExpression	nKI = 0		296	2		=			
ANR	314	Identifier	nKI		296	0					
ANR	315	PrimaryExpression	0		296	1					
ANR	316	IdentifierDecl	nKJ = 0		296	1					
ANR	317	IdentifierDeclType	int		296	0					
ANR	318	Identifier	nKJ		296	1					
ANR	319	AssignmentExpression	nKJ = 0		296	2		=			
ANR	320	Identifier	nKJ		296	0					
ANR	321	PrimaryExpression	0		296	1					
ANR	322	IdentifierDecl	nIK = 0		296	2					
ANR	323	IdentifierDeclType	int		296	0					
ANR	324	Identifier	nIK		296	1					
ANR	325	AssignmentExpression	nIK = 0		296	2		=			
ANR	326	Identifier	nIK		296	0					
ANR	327	PrimaryExpression	0		296	1					
ANR	328	IdentifierDecl	nJK = 0		296	3					
ANR	329	IdentifierDeclType	int		296	0					
ANR	330	Identifier	nJK		296	1					
ANR	331	AssignmentExpression	nJK = 0		296	2		=			
ANR	332	Identifier	nJK		296	0					
ANR	333	PrimaryExpression	0		296	1					
ANR	334	IdentifierDeclStatement	int moved = 0 ;	60:1:993:1006	296	2	True				
ANR	335	IdentifierDecl	moved = 0		296	0					
ANR	336	IdentifierDeclType	int		296	0					
ANR	337	Identifier	moved		296	1					
ANR	338	AssignmentExpression	moved = 0		296	2		=			
ANR	339	Identifier	moved		296	0					
ANR	340	PrimaryExpression	0		296	1					
ANR	341	ForStatement	for ( k = 0 ; k < 4 ; ++ k )		296	3					
ANR	342	ForInit	k = 0 ;	61:6:1014:1019	296	0	True				
ANR	343	AssignmentExpression	k = 0		296	0		=			
ANR	344	Identifier	k		296	0					
ANR	345	PrimaryExpression	0		296	1					
ANR	346	Condition	k < 4	61:13:1021:1025	296	1	True				
ANR	347	RelationalExpression	k < 4		296	0		<			
ANR	348	Identifier	k		296	0					
ANR	349	PrimaryExpression	4		296	1					
ANR	350	UnaryExpression	++ k	61:20:1028:1030	296	2	True				
ANR	351	IncDec	++		296	0					
ANR	352	Identifier	k		296	1					
ANR	353	CompoundStatement		5:25:97:97	296	3					
ANR	354	ForStatement	for ( i = 0 ; i < 4 ; ++ i )		296	0					
ANR	355	ForInit	i = 0 ;	62:7:1042:1047	296	0	True				
ANR	356	AssignmentExpression	i = 0		296	0		=			
ANR	357	Identifier	i		296	0					
ANR	358	PrimaryExpression	0		296	1					
ANR	359	Condition	i < 4	62:14:1049:1053	296	1	True				
ANR	360	RelationalExpression	i < 4		296	0		<			
ANR	361	Identifier	i		296	0					
ANR	362	PrimaryExpression	4		296	1					
ANR	363	UnaryExpression	++ i	62:21:1056:1058	296	2	True				
ANR	364	IncDec	++		296	0					
ANR	365	Identifier	i		296	1					
ANR	366	CompoundStatement		6:26:125:125	296	3					
ANR	367	ForStatement	for ( j = i + 1 ; j < 4 && ! twok_buf [ nKJ = u ? k : v ? j : 3 - j ] [ nJK = ! u ? k : v ? j : 3 - j ] ; ++ j )		296	0					
ANR	368	ForInit	j = i + 1 ;	63:8:1071:1080	296	0	True				
ANR	369	AssignmentExpression	j = i + 1		296	0		=			
ANR	370	Identifier	j		296	0					
ANR	371	AdditiveExpression	i + 1		296	1		+			
ANR	372	Identifier	i		296	0					
ANR	373	PrimaryExpression	1		296	1					
ANR	374	Condition	j < 4 && ! twok_buf [ nKJ = u ? k : v ? j : 3 - j ] [ nJK = ! u ? k : v ? j : 3 - j ]	63:19:1082:1158	296	1	True				
ANR	375	AndExpression	j < 4 && ! twok_buf [ nKJ = u ? k : v ? j : 3 - j ] [ nJK = ! u ? k : v ? j : 3 - j ]		296	0		&&			
ANR	376	RelationalExpression	j < 4		296	0		<			
ANR	377	Identifier	j		296	0					
ANR	378	PrimaryExpression	4		296	1					
ANR	379	UnaryOperationExpression	! twok_buf [ nKJ = u ? k : v ? j : 3 - j ] [ nJK = ! u ? k : v ? j : 3 - j ]		296	1					
ANR	380	UnaryOperator	!		296	0					
ANR	381	ArrayIndexing	twok_buf [ nKJ = u ? k : v ? j : 3 - j ] [ nJK = ! u ? k : v ? j : 3 - j ]		296	1					
ANR	382	ArrayIndexing	twok_buf [ nKJ = u ? k : v ? j : 3 - j ]		296	0					
ANR	383	Identifier	twok_buf		296	0					
ANR	384	AssignmentExpression	nKJ = u ? k : v ? j : 3 - j		296	1		=			
ANR	385	Identifier	nKJ		296	0					
ANR	386	ConditionalExpression	u ? k : v ? j : 3 - j		296	1					
ANR	387	Condition	u		296	0					
ANR	388	Identifier	u		296	0					
ANR	389	Identifier	k		296	1					
ANR	390	ConditionalExpression	v ? j : 3 - j		296	2					
ANR	391	Condition	v		296	0					
ANR	392	Identifier	v		296	0					
ANR	393	Identifier	j		296	1					
ANR	394	AdditiveExpression	3 - j		296	2		-			
ANR	395	PrimaryExpression	3		296	0					
ANR	396	Identifier	j		296	1					
ANR	397	AssignmentExpression	nJK = ! u ? k : v ? j : 3 - j		296	1		=			
ANR	398	Identifier	nJK		296	0					
ANR	399	ConditionalExpression	! u ? k : v ? j : 3 - j		296	1					
ANR	400	Condition	! u		296	0					
ANR	401	UnaryOperationExpression	! u		296	0					
ANR	402	UnaryOperator	!		296	0					
ANR	403	Identifier	u		296	1					
ANR	404	Identifier	k		296	1					
ANR	405	ConditionalExpression	v ? j : 3 - j		296	2					
ANR	406	Condition	v		296	0					
ANR	407	Identifier	v		296	0					
ANR	408	Identifier	j		296	1					
ANR	409	AdditiveExpression	3 - j		296	2		-			
ANR	410	PrimaryExpression	3		296	0					
ANR	411	Identifier	j		296	1					
ANR	412	UnaryExpression	++ j	63:98:1161:1163	296	2	True				
ANR	413	IncDec	++		296	0					
ANR	414	Identifier	j		296	1					
ANR	415	CompoundStatement		7:103:230:230	296	3					
ANR	416	ExpressionStatement		64:4:1172:1172	296	0	True				
ANR	417	IfStatement	if ( j == 4 )		296	1					
ANR	418	Condition	j == 4	66:7:1186:1191	296	0	True				
ANR	419	EqualityExpression	j == 4		296	0		==			
ANR	420	Identifier	j		296	0					
ANR	421	PrimaryExpression	4		296	1					
ANR	422	CompoundStatement		10:15:258:258	296	1					
ANR	423	ContinueStatement	continue ;	67:4:1200:1208	296	0	True				
ANR	424	ExpressionStatement	nKI = u ? k : v ? i : 3 - i	69:3:1218:1241	296	2	True				
ANR	425	AssignmentExpression	nKI = u ? k : v ? i : 3 - i		296	0		=			
ANR	426	Identifier	nKI		296	0					
ANR	427	ConditionalExpression	u ? k : v ? i : 3 - i		296	1					
ANR	428	Condition	u		296	0					
ANR	429	Identifier	u		296	0					
ANR	430	Identifier	k		296	1					
ANR	431	ConditionalExpression	v ? i : 3 - i		296	2					
ANR	432	Condition	v		296	0					
ANR	433	Identifier	v		296	0					
ANR	434	Identifier	i		296	1					
ANR	435	AdditiveExpression	3 - i		296	2		-			
ANR	436	PrimaryExpression	3		296	0					
ANR	437	Identifier	i		296	1					
ANR	438	ExpressionStatement	nIK = ! u ? k : v ? i : 3 - i	70:3:1246:1270	296	3	True				
ANR	439	AssignmentExpression	nIK = ! u ? k : v ? i : 3 - i		296	0		=			
ANR	440	Identifier	nIK		296	0					
ANR	441	ConditionalExpression	! u ? k : v ? i : 3 - i		296	1					
ANR	442	Condition	! u		296	0					
ANR	443	UnaryOperationExpression	! u		296	0					
ANR	444	UnaryOperator	!		296	0					
ANR	445	Identifier	u		296	1					
ANR	446	Identifier	k		296	1					
ANR	447	ConditionalExpression	v ? i : 3 - i		296	2					
ANR	448	Condition	v		296	0					
ANR	449	Identifier	v		296	0					
ANR	450	Identifier	i		296	1					
ANR	451	AdditiveExpression	3 - i		296	2		-			
ANR	452	PrimaryExpression	3		296	0					
ANR	453	Identifier	i		296	1					
ANR	454	IfStatement	if ( ! twok_buf [ nKI ] [ nIK ] )		296	4					
ANR	455	Condition	! twok_buf [ nKI ] [ nIK ]	71:7:1279:1297	296	0	True				
ANR	456	UnaryOperationExpression	! twok_buf [ nKI ] [ nIK ]		296	0					
ANR	457	UnaryOperator	!		296	0					
ANR	458	ArrayIndexing	twok_buf [ nKI ] [ nIK ]		296	1					
ANR	459	ArrayIndexing	twok_buf [ nKI ]		296	0					
ANR	460	Identifier	twok_buf		296	0					
ANR	461	Identifier	nKI		296	1					
ANR	462	Identifier	nIK		296	1					
ANR	463	CompoundStatement		15:28:364:364	296	1					
ANR	464	ExpressionStatement	twok_buf [ nKI ] [ nIK ] = twok_buf [ nKJ ] [ nJK ]	72:4:1306:1345	296	0	True				
ANR	465	AssignmentExpression	twok_buf [ nKI ] [ nIK ] = twok_buf [ nKJ ] [ nJK ]		296	0		=			
ANR	466	ArrayIndexing	twok_buf [ nKI ] [ nIK ]		296	0					
ANR	467	ArrayIndexing	twok_buf [ nKI ]		296	0					
ANR	468	Identifier	twok_buf		296	0					
ANR	469	Identifier	nKI		296	1					
ANR	470	Identifier	nIK		296	1					
ANR	471	ArrayIndexing	twok_buf [ nKJ ] [ nJK ]		296	1					
ANR	472	ArrayIndexing	twok_buf [ nKJ ]		296	0					
ANR	473	Identifier	twok_buf		296	0					
ANR	474	Identifier	nKJ		296	1					
ANR	475	Identifier	nJK		296	1					
ANR	476	ExpressionStatement	twok_buf [ nKJ ] [ nJK ] = 0	73:4:1351:1373	296	1	True				
ANR	477	AssignmentExpression	twok_buf [ nKJ ] [ nJK ] = 0		296	0		=			
ANR	478	ArrayIndexing	twok_buf [ nKJ ] [ nJK ]		296	0					
ANR	479	ArrayIndexing	twok_buf [ nKJ ]		296	0					
ANR	480	Identifier	twok_buf		296	0					
ANR	481	Identifier	nKJ		296	1					
ANR	482	Identifier	nJK		296	1					
ANR	483	PrimaryExpression	0		296	1					
ANR	484	ExpressionStatement	-- i	74:4:1379:1382	296	2	True				
ANR	485	UnaryExpression	-- i		296	0					
ANR	486	IncDec	--		296	0					
ANR	487	Identifier	i		296	1					
ANR	488	ExpressionStatement	moved = 1	75:4:1388:1397	296	3	True				
ANR	489	AssignmentExpression	moved = 1		296	0		=			
ANR	490	Identifier	moved		296	0					
ANR	491	PrimaryExpression	1		296	1					
ANR	492	ElseStatement	else		296	0					
ANR	493	IfStatement	if ( twok_buf [ nKI ] [ nIK ] == twok_buf [ nKJ ] [ nJK ] )		296	0					
ANR	494	Condition	twok_buf [ nKI ] [ nIK ] == twok_buf [ nKJ ] [ nJK ]	76:14:1413:1452	296	0	True				
ANR	495	EqualityExpression	twok_buf [ nKI ] [ nIK ] == twok_buf [ nKJ ] [ nJK ]		296	0		==			
ANR	496	ArrayIndexing	twok_buf [ nKI ] [ nIK ]		296	0					
ANR	497	ArrayIndexing	twok_buf [ nKI ]		296	0					
ANR	498	Identifier	twok_buf		296	0					
ANR	499	Identifier	nKI		296	1					
ANR	500	Identifier	nIK		296	1					
ANR	501	ArrayIndexing	twok_buf [ nKJ ] [ nJK ]		296	1					
ANR	502	ArrayIndexing	twok_buf [ nKJ ]		296	0					
ANR	503	Identifier	twok_buf		296	0					
ANR	504	Identifier	nKJ		296	1					
ANR	505	Identifier	nJK		296	1					
ANR	506	CompoundStatement		20:56:519:519	296	1					
ANR	507	ExpressionStatement	score += 1 << ++ twok_buf [ nKI ] [ nIK ]	77:4:1461:1495	296	0	True				
ANR	508	AssignmentExpression	score += 1 << ++ twok_buf [ nKI ] [ nIK ]		296	0		+=			
ANR	509	Identifier	score		296	0					
ANR	510	ShiftExpression	1 << ++ twok_buf [ nKI ] [ nIK ]		296	1		<<			
ANR	511	PrimaryExpression	1		296	0					
ANR	512	UnaryExpression	++ twok_buf [ nKI ] [ nIK ]		296	1					
ANR	513	IncDec	++		296	0					
ANR	514	ArrayIndexing	twok_buf [ nKI ] [ nIK ]		296	1					
ANR	515	ArrayIndexing	twok_buf [ nKI ]		296	0					
ANR	516	Identifier	twok_buf		296	0					
ANR	517	Identifier	nKI		296	1					
ANR	518	Identifier	nIK		296	1					
ANR	519	ExpressionStatement	twok_buf [ nKJ ] [ nJK ] = 0	78:4:1501:1523	296	1	True				
ANR	520	AssignmentExpression	twok_buf [ nKJ ] [ nJK ] = 0		296	0		=			
ANR	521	ArrayIndexing	twok_buf [ nKJ ] [ nJK ]		296	0					
ANR	522	ArrayIndexing	twok_buf [ nKJ ]		296	0					
ANR	523	Identifier	twok_buf		296	0					
ANR	524	Identifier	nKJ		296	1					
ANR	525	Identifier	nJK		296	1					
ANR	526	PrimaryExpression	0		296	1					
ANR	527	ExpressionStatement	moved = 1	79:4:1529:1538	296	2	True				
ANR	528	AssignmentExpression	moved = 1		296	0		=			
ANR	529	Identifier	moved		296	0					
ANR	530	PrimaryExpression	1		296	1					
ANR	531	IfStatement	if ( moved )		296	4					
ANR	532	Condition	moved	83:5:1557:1561	296	0	True				
ANR	533	Identifier	moved		296	0					
ANR	534	CompoundStatement		27:12:628:628	296	1					
ANR	535	ExpressionStatement	twok_add ( )	84:2:1568:1579	296	0	True				
ANR	536	CallExpression	twok_add ( )		296	0					
ANR	537	Callee	twok_add		296	0					
ANR	538	Identifier	twok_add		296	0					
ANR	539	ArgumentList			296	1					
ANR	540	ExpressionStatement	moves ++	85:2:1583:1590	296	1	True				
ANR	541	PostIncDecOperationExpression	moves ++		296	0					
ANR	542	Identifier	moves		296	0					
ANR	543	IncDec	++		296	1					
ANR	544	ReturnType	static void		296	1					
ANR	545	Identifier	twok_move		296	2					
ANR	546	ParameterList	"int u , int v"		296	3					
ANR	547	Parameter	int u	57:22:921:925	296	0	True				
ANR	548	ParameterType	int		296	0					
ANR	549	Identifier	u		296	1					
ANR	550	Parameter	int v	57:29:928:932	296	1	True				
ANR	551	ParameterType	int		296	0					
ANR	552	Identifier	v		296	1					
ANR	553	CFGEntryNode	ENTRY		296		True				
ANR	554	CFGExitNode	EXIT		296		True				
ANR	555	Symbol	* * nKI		296						
ANR	556	Symbol	* * twok_buf		296						
ANR	557	Symbol	* * nKJ		296						
ANR	558	Symbol	moved		296						
ANR	559	Symbol	i		296						
ANR	560	Symbol	j		296						
ANR	561	Symbol	k		296						
ANR	562	Symbol	* twok_buf		296						
ANR	563	Symbol	nKJ		296						
ANR	564	Symbol	nKI		296						
ANR	565	Symbol	nJK		296						
ANR	566	Symbol	nIK		296						
ANR	567	Symbol	score		296						
ANR	568	Symbol	u		296						
ANR	569	Symbol	v		296						
ANR	570	Symbol	* nKI		296						
ANR	571	Symbol	moves		296						
ANR	572	Symbol	* nKJ		296						
ANR	573	Symbol	* nJK		296						
ANR	574	Symbol	* nIK		296						
ANR	575	Symbol	twok_buf		296						
ANR	576	Function	getval	89:0:1598:2050							
ANR	577	FunctionDef	"getval (bool color , char * val0 , int i , int x)"		576	0					
ANR	578	CompoundStatement		89:57:1655:2050	576	0					
ANR	579	IdentifierDeclStatement	"const char * colorarray [ ] = { Color_WHITE , Color_RED , Color_GREEN , Color_MAGENTA , Color_YELLOW , Color_CYAN , Color_BLUE , Color_GRAY } ;"	90:1:1658:1807	576	0	True				
ANR	580	IdentifierDecl	"* colorarray [ ] = { Color_WHITE , Color_RED , Color_GREEN , Color_MAGENTA , Color_YELLOW , Color_CYAN , Color_BLUE , Color_GRAY }"		576	0					
ANR	581	IdentifierDeclType	const char * [ ]		576	0					
ANR	582	Identifier	colorarray		576	1					
ANR	583	AssignmentExpression	"* colorarray [ ] = { Color_WHITE , Color_RED , Color_GREEN , Color_MAGENTA , Color_YELLOW , Color_CYAN , Color_BLUE , Color_GRAY }"		576	2		=			
ANR	584	Identifier	colorarray		576	0					
ANR	585	InitializerList	Color_WHITE		576	1					
ANR	586	Identifier	Color_WHITE		576	0					
ANR	587	Identifier	Color_RED		576	1					
ANR	588	Identifier	Color_GREEN		576	2					
ANR	589	Identifier	Color_MAGENTA		576	3					
ANR	590	Identifier	Color_YELLOW		576	4					
ANR	591	Identifier	Color_CYAN		576	5					
ANR	592	Identifier	Color_BLUE		576	6					
ANR	593	Identifier	Color_GRAY		576	7					
ANR	594	IfStatement	if ( twok_buf [ i ] [ x ] )		576	1					
ANR	595	Condition	twok_buf [ i ] [ x ]	100:5:1814:1827	576	0	True				
ANR	596	ArrayIndexing	twok_buf [ i ] [ x ]		576	0					
ANR	597	ArrayIndexing	twok_buf [ i ]		576	0					
ANR	598	Identifier	twok_buf		576	0					
ANR	599	Identifier	i		576	1					
ANR	600	Identifier	x		576	1					
ANR	601	CompoundStatement		12:21:174:174	576	1					
ANR	602	IfStatement	if ( color )		576	0					
ANR	603	Condition	color	101:6:1838:1842	576	0	True				
ANR	604	Identifier	color		576	0					
ANR	605	CompoundStatement		13:13:189:189	576	1					
ANR	606	Statement	snprintf	102:3:1850:1857	576	0	True				
ANR	607	Statement	(	102:12:1859:1859	576	1	True				
ANR	608	Statement	val0	102:13:1860:1863	576	2	True				
ANR	609	Statement	","	102:17:1864:1864	576	3	True				
ANR	610	Statement	31	102:18:1865:1866	576	4	True				
ANR	611	Statement	","	102:20:1867:1867	576	5	True				
ANR	612	Statement	"""%s%4d"""	102:22:1869:1875	576	6	True				
ANR	613	Statement	Color_RESET	102:29:1876:1886	576	7	True				
ANR	614	Statement	","	102:40:1887:1887	576	8	True				
ANR	615	Statement	colorarray	102:42:1889:1898	576	9	True				
ANR	616	Statement	[	102:53:1900:1900	576	10	True				
ANR	617	Statement	twok_buf	102:54:1901:1908	576	11	True				
ANR	618	Statement	[	102:63:1910:1910	576	12	True				
ANR	619	Statement	i	102:64:1911:1911	576	13	True				
ANR	620	Statement	]	102:65:1912:1912	576	14	True				
ANR	621	Statement	[	102:66:1913:1913	576	15	True				
ANR	622	Statement	x	102:67:1914:1914	576	16	True				
ANR	623	Statement	]	102:68:1915:1915	576	17	True				
ANR	624	Statement	%	102:70:1917:1917	576	18	True				
ANR	625	Statement	8	102:72:1919:1919	576	19	True				
ANR	626	Statement	]	102:74:1921:1921	576	20	True				
ANR	627	Statement	","	102:75:1922:1922	576	21	True				
ANR	628	Statement	1	102:77:1924:1924	576	22	True				
ANR	629	Statement	<<	102:79:1926:1927	576	23	True				
ANR	630	Statement	twok_buf	102:82:1929:1936	576	24	True				
ANR	631	Statement	[	102:90:1937:1937	576	25	True				
ANR	632	Statement	i	102:91:1938:1938	576	26	True				
ANR	633	Statement	]	102:92:1939:1939	576	27	True				
ANR	634	Statement	[	102:93:1940:1940	576	28	True				
ANR	635	Statement	x	102:94:1941:1941	576	29	True				
ANR	636	Statement	]	102:95:1942:1942	576	30	True				
ANR	637	Statement	)	102:96:1943:1943	576	31	True				
ANR	638	ExpressionStatement		102:97:1944:1944	576	32	True				
ANR	639	ElseStatement	else		576	0					
ANR	640	CompoundStatement		15:9:299:299	576	0					
ANR	641	ExpressionStatement	"snprintf ( val0 , 31 , ""%4d"" , 1 << twok_buf [ i ] [ x ] )"	104:3:1960:2006	576	0	True				
ANR	642	CallExpression	"snprintf ( val0 , 31 , ""%4d"" , 1 << twok_buf [ i ] [ x ] )"		576	0					
ANR	643	Callee	snprintf		576	0					
ANR	644	Identifier	snprintf		576	0					
ANR	645	ArgumentList	val0		576	1					
ANR	646	Argument	val0		576	0					
ANR	647	Identifier	val0		576	0					
ANR	648	Argument	31		576	1					
ANR	649	PrimaryExpression	31		576	0					
ANR	650	Argument	"""%4d"""		576	2					
ANR	651	PrimaryExpression	"""%4d"""		576	0					
ANR	652	Argument	1 << twok_buf [ i ] [ x ]		576	3					
ANR	653	ShiftExpression	1 << twok_buf [ i ] [ x ]		576	0		<<			
ANR	654	PrimaryExpression	1		576	0					
ANR	655	ArrayIndexing	twok_buf [ i ] [ x ]		576	1					
ANR	656	ArrayIndexing	twok_buf [ i ]		576	0					
ANR	657	Identifier	twok_buf		576	0					
ANR	658	Identifier	i		576	1					
ANR	659	Identifier	x		576	1					
ANR	660	ElseStatement	else		576	0					
ANR	661	CompoundStatement		18:8:364:364	576	0					
ANR	662	ExpressionStatement	"strcpy ( val0 , ""    "" )"	107:2:2024:2045	576	0	True				
ANR	663	CallExpression	"strcpy ( val0 , ""    "" )"		576	0					
ANR	664	Callee	strcpy		576	0					
ANR	665	Identifier	strcpy		576	0					
ANR	666	ArgumentList	val0		576	1					
ANR	667	Argument	val0		576	0					
ANR	668	Identifier	val0		576	0					
ANR	669	Argument	"""    """		576	1					
ANR	670	PrimaryExpression	"""    """		576	0					
ANR	671	ReturnType	static void		576	1					
ANR	672	Identifier	getval		576	2					
ANR	673	ParameterList	"bool color , char * val0 , int i , int x"		576	3					
ANR	674	Parameter	bool color	89:19:1617:1626	576	0	True				
ANR	675	ParameterType	bool		576	0					
ANR	676	Identifier	color		576	1					
ANR	677	Parameter	char * val0	89:31:1629:1638	576	1	True				
ANR	678	ParameterType	char *		576	0					
ANR	679	Identifier	val0		576	1					
ANR	680	Parameter	int i	89:43:1641:1645	576	2	True				
ANR	681	ParameterType	int		576	0					
ANR	682	Identifier	i		576	1					
ANR	683	Parameter	int x	89:50:1648:1652	576	3	True				
ANR	684	ParameterType	int		576	0					
ANR	685	Identifier	x		576	1					
ANR	686	CFGEntryNode	ENTRY		576		True				
ANR	687	CFGExitNode	EXIT		576		True				
ANR	688	Symbol	* * twok_buf		576						
ANR	689	Symbol	Color_GREEN		576						
ANR	690	Symbol	* * i		576						
ANR	691	Symbol	* x		576						
ANR	692	Symbol	Color_GRAY		576						
ANR	693	Symbol	color		576						
ANR	694	Symbol	Color_YELLOW		576						
ANR	695	Symbol	Color_CYAN		576						
ANR	696	Symbol	i		576						
ANR	697	Symbol	* twok_buf		576						
ANR	698	Symbol	Color_MAGENTA		576						
ANR	699	Symbol	colorarray		576						
ANR	700	Symbol	Color_WHITE		576						
ANR	701	Symbol	Color_BLUE		576						
ANR	702	Symbol	* i		576						
ANR	703	Symbol	val0		576						
ANR	704	Symbol	x		576						
ANR	705	Symbol	twok_buf		576						
ANR	706	Symbol	Color_RED		576						
ANR	707	Function	twok_print	111:0:2053:3224							
ANR	708	FunctionDef	twok_print (bool color)		707	0					
ANR	709	CompoundStatement		111:35:2088:3224	707	0					
ANR	710	IdentifierDeclStatement	char val0 [ 32 ] ;	112:1:2091:2104	707	0	True				
ANR	711	IdentifierDecl	val0 [ 32 ]		707	0					
ANR	712	IdentifierDeclType	char [ 32 ]		707	0					
ANR	713	Identifier	val0		707	1					
ANR	714	PrimaryExpression	32		707	2					
ANR	715	IdentifierDeclStatement	char val1 [ 32 ] ;	113:1:2107:2120	707	1	True				
ANR	716	IdentifierDecl	val1 [ 32 ]		707	0					
ANR	717	IdentifierDeclType	char [ 32 ]		707	0					
ANR	718	Identifier	val1		707	1					
ANR	719	PrimaryExpression	32		707	2					
ANR	720	IdentifierDeclStatement	char val2 [ 32 ] ;	114:1:2123:2136	707	2	True				
ANR	721	IdentifierDecl	val2 [ 32 ]		707	0					
ANR	722	IdentifierDeclType	char [ 32 ]		707	0					
ANR	723	Identifier	val2		707	1					
ANR	724	PrimaryExpression	32		707	2					
ANR	725	IdentifierDeclStatement	char val3 [ 32 ] ;	115:1:2139:2152	707	3	True				
ANR	726	IdentifierDecl	val3 [ 32 ]		707	0					
ANR	727	IdentifierDeclType	char [ 32 ]		707	0					
ANR	728	Identifier	val3		707	1					
ANR	729	PrimaryExpression	32		707	2					
ANR	730	IdentifierDeclStatement	int i ;	116:1:2155:2160	707	4	True				
ANR	731	IdentifierDecl	i		707	0					
ANR	732	IdentifierDeclType	int		707	0					
ANR	733	Identifier	i		707	1					
ANR	734	IfStatement	if ( color )		707	5					
ANR	735	Condition	color	117:5:2167:2171	707	0	True				
ANR	736	Identifier	color		707	0					
ANR	737	CompoundStatement		7:12:85:85	707	1					
ANR	738	Statement	printf	118:2:2178:2183	707	0	True				
ANR	739	Statement	(	118:9:2185:2185	707	1	True				
ANR	740	Statement	Color_BBLUE	118:10:2186:2196	707	2	True				
ANR	741	Statement	"""  +------+------+------+------+\\n"""	118:21:2197:2231	707	3	True				
ANR	742	Statement	)	118:56:2232:2232	707	4	True				
ANR	743	ExpressionStatement		118:57:2233:2233	707	5	True				
ANR	744	ElseStatement	else		707	0					
ANR	745	CompoundStatement		9:8:154:154	707	0					
ANR	746	ExpressionStatement	"printf ( ""  +------+------+------+------+\\n"" )"	120:2:2247:2291	707	0	True				
ANR	747	CallExpression	"printf ( ""  +------+------+------+------+\\n"" )"		707	0					
ANR	748	Callee	printf		707	0					
ANR	749	Identifier	printf		707	0					
ANR	750	ArgumentList	"""  +------+------+------+------+\\n"""		707	1					
ANR	751	Argument	"""  +------+------+------+------+\\n"""		707	0					
ANR	752	PrimaryExpression	"""  +------+------+------+------+\\n"""		707	0					
ANR	753	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		707	6					
ANR	754	ForInit	i = 0 ;	122:6:2302:2307	707	0	True				
ANR	755	AssignmentExpression	i = 0		707	0		=			
ANR	756	Identifier	i		707	0					
ANR	757	PrimaryExpression	0		707	1					
ANR	758	Condition	i < 4	122:13:2309:2313	707	1	True				
ANR	759	RelationalExpression	i < 4		707	0		<			
ANR	760	Identifier	i		707	0					
ANR	761	PrimaryExpression	4		707	1					
ANR	762	PostIncDecOperationExpression	i ++	122:20:2316:2318	707	2	True				
ANR	763	Identifier	i		707	0					
ANR	764	IncDec	++		707	1					
ANR	765	CompoundStatement		12:25:232:232	707	3					
ANR	766	ExpressionStatement	"getval ( color , val0 , i , 0 )"	123:2:2325:2351	707	0	True				
ANR	767	CallExpression	"getval ( color , val0 , i , 0 )"		707	0					
ANR	768	Callee	getval		707	0					
ANR	769	Identifier	getval		707	0					
ANR	770	ArgumentList	color		707	1					
ANR	771	Argument	color		707	0					
ANR	772	Identifier	color		707	0					
ANR	773	Argument	val0		707	1					
ANR	774	Identifier	val0		707	0					
ANR	775	Argument	i		707	2					
ANR	776	Identifier	i		707	0					
ANR	777	Argument	0		707	3					
ANR	778	PrimaryExpression	0		707	0					
ANR	779	ExpressionStatement	"getval ( color , val1 , i , 1 )"	124:2:2355:2381	707	1	True				
ANR	780	CallExpression	"getval ( color , val1 , i , 1 )"		707	0					
ANR	781	Callee	getval		707	0					
ANR	782	Identifier	getval		707	0					
ANR	783	ArgumentList	color		707	1					
ANR	784	Argument	color		707	0					
ANR	785	Identifier	color		707	0					
ANR	786	Argument	val1		707	1					
ANR	787	Identifier	val1		707	0					
ANR	788	Argument	i		707	2					
ANR	789	Identifier	i		707	0					
ANR	790	Argument	1		707	3					
ANR	791	PrimaryExpression	1		707	0					
ANR	792	ExpressionStatement	"getval ( color , val2 , i , 2 )"	125:2:2385:2411	707	2	True				
ANR	793	CallExpression	"getval ( color , val2 , i , 2 )"		707	0					
ANR	794	Callee	getval		707	0					
ANR	795	Identifier	getval		707	0					
ANR	796	ArgumentList	color		707	1					
ANR	797	Argument	color		707	0					
ANR	798	Identifier	color		707	0					
ANR	799	Argument	val2		707	1					
ANR	800	Identifier	val2		707	0					
ANR	801	Argument	i		707	2					
ANR	802	Identifier	i		707	0					
ANR	803	Argument	2		707	3					
ANR	804	PrimaryExpression	2		707	0					
ANR	805	ExpressionStatement	"getval ( color , val3 , i , 3 )"	126:2:2415:2441	707	3	True				
ANR	806	CallExpression	"getval ( color , val3 , i , 3 )"		707	0					
ANR	807	Callee	getval		707	0					
ANR	808	Identifier	getval		707	0					
ANR	809	ArgumentList	color		707	1					
ANR	810	Argument	color		707	0					
ANR	811	Identifier	color		707	0					
ANR	812	Argument	val3		707	1					
ANR	813	Identifier	val3		707	0					
ANR	814	Argument	i		707	2					
ANR	815	Identifier	i		707	0					
ANR	816	Argument	3		707	3					
ANR	817	PrimaryExpression	3		707	0					
ANR	818	IfStatement	if ( color )		707	4					
ANR	819	Condition	color	127:6:2449:2453	707	0	True				
ANR	820	Identifier	color		707	0					
ANR	821	CompoundStatement		17:13:367:367	707	1					
ANR	822	Statement	printf	128:3:2461:2466	707	0	True				
ANR	823	Statement	(	128:10:2468:2468	707	1	True				
ANR	824	Statement	Color_BBLUE	128:11:2469:2479	707	2	True				
ANR	825	Statement	"""  |      |      |      |      |\\n"""	128:22:2480:2514	707	3	True				
ANR	826	Statement	)	128:57:2515:2515	707	4	True				
ANR	827	ExpressionStatement		128:58:2516:2516	707	5	True				
ANR	828	Statement	printf	129:3:2521:2526	707	6	True				
ANR	829	Statement	(	129:10:2528:2528	707	7	True				
ANR	830	Statement	"""  |"""	129:11:2529:2533	707	8	True				
ANR	831	Statement	Color_RESET	129:16:2534:2544	707	9	True				
ANR	832	Statement	""" %s """	129:27:2545:2550	707	10	True				
ANR	833	Statement	Color_BBLUE	129:33:2551:2561	707	11	True				
ANR	834	Statement	"""|"""	129:44:2562:2564	707	12	True				
ANR	835	Statement	Color_RESET	129:47:2565:2575	707	13	True				
ANR	836	Statement	""" %s """	129:58:2576:2581	707	14	True				
ANR	837	Statement	Color_BBLUE	130:4:2587:2597	707	15	True				
ANR	838	Statement	"""|"""	130:15:2598:2600	707	16	True				
ANR	839	Statement	Color_RESET	130:18:2601:2611	707	17	True				
ANR	840	Statement	""" %s """	130:29:2612:2617	707	18	True				
ANR	841	Statement	Color_BBLUE	130:35:2618:2628	707	19	True				
ANR	842	Statement	"""|"""	130:46:2629:2631	707	20	True				
ANR	843	Statement	Color_RESET	130:49:2632:2642	707	21	True				
ANR	844	Statement	""" %s """	130:60:2643:2648	707	22	True				
ANR	845	Statement	Color_BBLUE	130:66:2649:2659	707	23	True				
ANR	846	Statement	"""|\\n"""	130:77:2660:2664	707	24	True				
ANR	847	Statement	","	130:82:2665:2665	707	25	True				
ANR	848	Statement	val0	131:4:2671:2674	707	26	True				
ANR	849	Statement	","	131:8:2675:2675	707	27	True				
ANR	850	Statement	val1	131:10:2677:2680	707	28	True				
ANR	851	Statement	","	131:14:2681:2681	707	29	True				
ANR	852	Statement	val2	131:16:2683:2686	707	30	True				
ANR	853	Statement	","	131:20:2687:2687	707	31	True				
ANR	854	Statement	val3	131:22:2689:2692	707	32	True				
ANR	855	Statement	)	131:26:2693:2693	707	33	True				
ANR	856	ExpressionStatement		131:27:2694:2694	707	34	True				
ANR	857	ExpressionStatement	"printf ( ""  |      |      |      |      |\\n"" )"	132:3:2699:2743	707	35	True				
ANR	858	CallExpression	"printf ( ""  |      |      |      |      |\\n"" )"		707	0					
ANR	859	Callee	printf		707	0					
ANR	860	Identifier	printf		707	0					
ANR	861	ArgumentList	"""  |      |      |      |      |\\n"""		707	1					
ANR	862	Argument	"""  |      |      |      |      |\\n"""		707	0					
ANR	863	PrimaryExpression	"""  |      |      |      |      |\\n"""		707	0					
ANR	864	Statement	printf	133:3:2748:2753	707	36	True				
ANR	865	Statement	(	133:10:2755:2755	707	37	True				
ANR	866	Statement	"""  +------+------+------+------+\\n"""	133:11:2756:2790	707	38	True				
ANR	867	Statement	Color_RESET	133:46:2791:2801	707	39	True				
ANR	868	Statement	)	133:57:2802:2802	707	40	True				
ANR	869	ExpressionStatement		133:58:2803:2803	707	41	True				
ANR	870	ElseStatement	else		707	0					
ANR	871	CompoundStatement		24:9:725:725	707	0					
ANR	872	ExpressionStatement	"printf ( ""  |      |      |      |      |\\n"" )"	135:3:2819:2863	707	0	True				
ANR	873	CallExpression	"printf ( ""  |      |      |      |      |\\n"" )"		707	0					
ANR	874	Callee	printf		707	0					
ANR	875	Identifier	printf		707	0					
ANR	876	ArgumentList	"""  |      |      |      |      |\\n"""		707	1					
ANR	877	Argument	"""  |      |      |      |      |\\n"""		707	0					
ANR	878	PrimaryExpression	"""  |      |      |      |      |\\n"""		707	0					
ANR	879	ExpressionStatement	"printf ( ""  | %s | %s | %s | %s |\\n"" , val0 , val1 , val2 , val3 )"	136:3:2868:2932	707	1	True				
ANR	880	CallExpression	"printf ( ""  | %s | %s | %s | %s |\\n"" , val0 , val1 , val2 , val3 )"		707	0					
ANR	881	Callee	printf		707	0					
ANR	882	Identifier	printf		707	0					
ANR	883	ArgumentList	"""  | %s | %s | %s | %s |\\n"""		707	1					
ANR	884	Argument	"""  | %s | %s | %s | %s |\\n"""		707	0					
ANR	885	PrimaryExpression	"""  | %s | %s | %s | %s |\\n"""		707	0					
ANR	886	Argument	val0		707	1					
ANR	887	Identifier	val0		707	0					
ANR	888	Argument	val1		707	2					
ANR	889	Identifier	val1		707	0					
ANR	890	Argument	val2		707	3					
ANR	891	Identifier	val2		707	0					
ANR	892	Argument	val3		707	4					
ANR	893	Identifier	val3		707	0					
ANR	894	ExpressionStatement	"printf ( ""  |      |      |      |      |\\n"" )"	138:3:2937:2981	707	2	True				
ANR	895	CallExpression	"printf ( ""  |      |      |      |      |\\n"" )"		707	0					
ANR	896	Callee	printf		707	0					
ANR	897	Identifier	printf		707	0					
ANR	898	ArgumentList	"""  |      |      |      |      |\\n"""		707	1					
ANR	899	Argument	"""  |      |      |      |      |\\n"""		707	0					
ANR	900	PrimaryExpression	"""  |      |      |      |      |\\n"""		707	0					
ANR	901	ExpressionStatement	"printf ( ""  +------+------+------+------+\\n"" )"	139:3:2986:3030	707	3	True				
ANR	902	CallExpression	"printf ( ""  +------+------+------+------+\\n"" )"		707	0					
ANR	903	Callee	printf		707	0					
ANR	904	Identifier	printf		707	0					
ANR	905	ArgumentList	"""  +------+------+------+------+\\n"""		707	1					
ANR	906	Argument	"""  +------+------+------+------+\\n"""		707	0					
ANR	907	PrimaryExpression	"""  +------+------+------+------+\\n"""		707	0					
ANR	908	ExpressionStatement	"printf ( ""Hexboard:     'hjkl' and 'q'uit\\n"" )"	142:1:3040:3084	707	7	True				
ANR	909	CallExpression	"printf ( ""Hexboard:     'hjkl' and 'q'uit\\n"" )"		707	0					
ANR	910	Callee	printf		707	0					
ANR	911	Identifier	printf		707	0					
ANR	912	ArgumentList	"""Hexboard:     'hjkl' and 'q'uit\\n"""		707	1					
ANR	913	Argument	"""Hexboard:     'hjkl' and 'q'uit\\n"""		707	0					
ANR	914	PrimaryExpression	"""Hexboard:     'hjkl' and 'q'uit\\n"""		707	0					
ANR	915	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		707	8					
ANR	916	ForInit	i = 0 ;	143:6:3092:3097	707	0	True				
ANR	917	AssignmentExpression	i = 0		707	0		=			
ANR	918	Identifier	i		707	0					
ANR	919	PrimaryExpression	0		707	1					
ANR	920	Condition	i < 4	143:13:3099:3103	707	1	True				
ANR	921	RelationalExpression	i < 4		707	0		<			
ANR	922	Identifier	i		707	0					
ANR	923	PrimaryExpression	4		707	1					
ANR	924	PostIncDecOperationExpression	i ++	143:20:3106:3108	707	2	True				
ANR	925	Identifier	i		707	0					
ANR	926	IncDec	++		707	1					
ANR	927	CompoundStatement		33:25:1022:1022	707	3					
ANR	928	ExpressionStatement	"printf ( ""  %02x %02x %02x %02x\\n"" , twok_buf [ i ] [ 0 ] , twok_buf [ i ] [ 1 ] , twok_buf [ i ] [ 2 ] , twok_buf [ i ] [ 3 ] )"	144:2:3115:3219	707	0	True				
ANR	929	CallExpression	"printf ( ""  %02x %02x %02x %02x\\n"" , twok_buf [ i ] [ 0 ] , twok_buf [ i ] [ 1 ] , twok_buf [ i ] [ 2 ] , twok_buf [ i ] [ 3 ] )"		707	0					
ANR	930	Callee	printf		707	0					
ANR	931	Identifier	printf		707	0					
ANR	932	ArgumentList	"""  %02x %02x %02x %02x\\n"""		707	1					
ANR	933	Argument	"""  %02x %02x %02x %02x\\n"""		707	0					
ANR	934	PrimaryExpression	"""  %02x %02x %02x %02x\\n"""		707	0					
ANR	935	Argument	twok_buf [ i ] [ 0 ]		707	1					
ANR	936	ArrayIndexing	twok_buf [ i ] [ 0 ]		707	0					
ANR	937	ArrayIndexing	twok_buf [ i ]		707	0					
ANR	938	Identifier	twok_buf		707	0					
ANR	939	Identifier	i		707	1					
ANR	940	PrimaryExpression	0		707	1					
ANR	941	Argument	twok_buf [ i ] [ 1 ]		707	2					
ANR	942	ArrayIndexing	twok_buf [ i ] [ 1 ]		707	0					
ANR	943	ArrayIndexing	twok_buf [ i ]		707	0					
ANR	944	Identifier	twok_buf		707	0					
ANR	945	Identifier	i		707	1					
ANR	946	PrimaryExpression	1		707	1					
ANR	947	Argument	twok_buf [ i ] [ 2 ]		707	3					
ANR	948	ArrayIndexing	twok_buf [ i ] [ 2 ]		707	0					
ANR	949	ArrayIndexing	twok_buf [ i ]		707	0					
ANR	950	Identifier	twok_buf		707	0					
ANR	951	Identifier	i		707	1					
ANR	952	PrimaryExpression	2		707	1					
ANR	953	Argument	twok_buf [ i ] [ 3 ]		707	4					
ANR	954	ArrayIndexing	twok_buf [ i ] [ 3 ]		707	0					
ANR	955	ArrayIndexing	twok_buf [ i ]		707	0					
ANR	956	Identifier	twok_buf		707	0					
ANR	957	Identifier	i		707	1					
ANR	958	PrimaryExpression	3		707	1					
ANR	959	ReturnType	static void		707	1					
ANR	960	Identifier	twok_print		707	2					
ANR	961	ParameterList	bool color		707	3					
ANR	962	Parameter	bool color	111:23:2076:2085	707	0	True				
ANR	963	ParameterType	bool		707	0					
ANR	964	Identifier	color		707	1					
ANR	965	CFGEntryNode	ENTRY		707		True				
ANR	966	CFGExitNode	EXIT		707		True				
ANR	967	Symbol	* * twok_buf		707						
ANR	968	Symbol	* * i		707						
ANR	969	Symbol	* i		707						
ANR	970	Symbol	color		707						
ANR	971	Symbol	val3		707						
ANR	972	Symbol	val2		707						
ANR	973	Symbol	val1		707						
ANR	974	Symbol	val0		707						
ANR	975	Symbol	i		707						
ANR	976	Symbol	twok_buf		707						
ANR	977	Symbol	* twok_buf		707						
ANR	978	Function	r_cons_2048	150:0:3227:4187							
ANR	979	FunctionDef	r_cons_2048 (bool color)		978	0					
ANR	980	CompoundStatement		150:35:3262:4187	978	0					
ANR	981	IdentifierDeclStatement	int ch ;	151:1:3265:3271	978	0	True				
ANR	982	IdentifierDecl	ch		978	0					
ANR	983	IdentifierDeclType	int		978	0					
ANR	984	Identifier	ch		978	1					
ANR	985	ExpressionStatement	r_cons_set_raw ( 1 )	152:1:3274:3292	978	1	True				
ANR	986	CallExpression	r_cons_set_raw ( 1 )		978	0					
ANR	987	Callee	r_cons_set_raw		978	0					
ANR	988	Identifier	r_cons_set_raw		978	0					
ANR	989	ArgumentList	1		978	1					
ANR	990	Argument	1		978	0					
ANR	991	PrimaryExpression	1		978	0					
ANR	992	ExpressionStatement	twok_init ( )	153:1:3295:3307	978	2	True				
ANR	993	CallExpression	twok_init ( )		978	0					
ANR	994	Callee	twok_init		978	0					
ANR	995	Identifier	twok_init		978	0					
ANR	996	ArgumentList			978	1					
ANR	997	ExpressionStatement	twok_add ( )	154:1:3310:3321	978	3	True				
ANR	998	CallExpression	twok_add ( )		978	0					
ANR	999	Callee	twok_add		978	0					
ANR	1000	Identifier	twok_add		978	0					
ANR	1001	ArgumentList			978	1					
ANR	1002	ExpressionStatement	twok_add ( )	155:1:3324:3335	978	4	True				
ANR	1003	CallExpression	twok_add ( )		978	0					
ANR	1004	Callee	twok_add		978	0					
ANR	1005	Identifier	twok_add		978	0					
ANR	1006	ArgumentList			978	1					
ANR	1007	WhileStatement	while ( twok_fin ( ) )		978	5					
ANR	1008	Condition	twok_fin ( )	156:8:3345:3355	978	0	True				
ANR	1009	CallExpression	twok_fin ( )		978	0					
ANR	1010	Callee	twok_fin		978	0					
ANR	1011	Identifier	twok_fin		978	0					
ANR	1012	ArgumentList			978	1					
ANR	1013	CompoundStatement		7:21:95:95	978	1					
ANR	1014	ExpressionStatement	r_cons_clear00 ( )	157:2:3362:3379	978	0	True				
ANR	1015	CallExpression	r_cons_clear00 ( )		978	0					
ANR	1016	Callee	r_cons_clear00		978	0					
ANR	1017	Identifier	r_cons_clear00		978	0					
ANR	1018	ArgumentList			978	1					
ANR	1019	IfStatement	if ( color )		978	1					
ANR	1020	Condition	color	158:6:3387:3391	978	0	True				
ANR	1021	Identifier	color		978	0					
ANR	1022	CompoundStatement		9:13:131:131	978	1					
ANR	1023	Statement	r_cons_printf	159:3:3399:3411	978	0	True				
ANR	1024	Statement	(	159:17:3413:3413	978	1	True				
ANR	1025	Statement	Color_GREEN	159:18:3414:3424	978	2	True				
ANR	1026	Statement	"""[r2048]"""	159:29:3425:3433	978	3	True				
ANR	1027	Statement	Color_BYELLOW	159:38:3434:3446	978	4	True				
ANR	1028	Statement	""" score: %d   moves: %d\\n"""	159:51:3447:3472	978	5	True				
ANR	1029	Statement	Color_RESET	159:77:3473:3483	978	6	True				
ANR	1030	Statement	","	159:88:3484:3484	978	7	True				
ANR	1031	Statement	score	159:90:3486:3490	978	8	True				
ANR	1032	Statement	","	159:95:3491:3491	978	9	True				
ANR	1033	Statement	moves	159:97:3493:3497	978	10	True				
ANR	1034	Statement	)	159:102:3498:3498	978	11	True				
ANR	1035	ExpressionStatement		159:103:3499:3499	978	12	True				
ANR	1036	ElseStatement	else		978	0					
ANR	1037	CompoundStatement		11:9:247:247	978	0					
ANR	1038	ExpressionStatement	"r_cons_printf ( ""[r2048] score: %d   moves: %d\\n"" , score , moves )"	161:3:3515:3578	978	0	True				
ANR	1039	CallExpression	"r_cons_printf ( ""[r2048] score: %d   moves: %d\\n"" , score , moves )"		978	0					
ANR	1040	Callee	r_cons_printf		978	0					
ANR	1041	Identifier	r_cons_printf		978	0					
ANR	1042	ArgumentList	"""[r2048] score: %d   moves: %d\\n"""		978	1					
ANR	1043	Argument	"""[r2048] score: %d   moves: %d\\n"""		978	0					
ANR	1044	PrimaryExpression	"""[r2048] score: %d   moves: %d\\n"""		978	0					
ANR	1045	Argument	score		978	1					
ANR	1046	Identifier	score		978	0					
ANR	1047	Argument	moves		978	2					
ANR	1048	Identifier	moves		978	0					
ANR	1049	ExpressionStatement	r_cons_flush ( )	163:2:3586:3601	978	2	True				
ANR	1050	CallExpression	r_cons_flush ( )		978	0					
ANR	1051	Callee	r_cons_flush		978	0					
ANR	1052	Identifier	r_cons_flush		978	0					
ANR	1053	ArgumentList			978	1					
ANR	1054	ExpressionStatement	twok_print ( color )	164:2:3605:3623	978	3	True				
ANR	1055	CallExpression	twok_print ( color )		978	0					
ANR	1056	Callee	twok_print		978	0					
ANR	1057	Identifier	twok_print		978	0					
ANR	1058	ArgumentList	color		978	1					
ANR	1059	Argument	color		978	0					
ANR	1060	Identifier	color		978	0					
ANR	1061	ExpressionStatement	ch = r_cons_readchar ( )	165:2:3627:3650	978	4	True				
ANR	1062	AssignmentExpression	ch = r_cons_readchar ( )		978	0		=			
ANR	1063	Identifier	ch		978	0					
ANR	1064	CallExpression	r_cons_readchar ( )		978	1					
ANR	1065	Callee	r_cons_readchar		978	0					
ANR	1066	Identifier	r_cons_readchar		978	0					
ANR	1067	ArgumentList			978	1					
ANR	1068	ExpressionStatement	ch = r_cons_arrow_to_hjkl ( ch )	166:2:3654:3684	978	5	True				
ANR	1069	AssignmentExpression	ch = r_cons_arrow_to_hjkl ( ch )		978	0		=			
ANR	1070	Identifier	ch		978	0					
ANR	1071	CallExpression	r_cons_arrow_to_hjkl ( ch )		978	1					
ANR	1072	Callee	r_cons_arrow_to_hjkl		978	0					
ANR	1073	Identifier	r_cons_arrow_to_hjkl		978	0					
ANR	1074	ArgumentList	ch		978	1					
ANR	1075	Argument	ch		978	0					
ANR	1076	Identifier	ch		978	0					
ANR	1077	SwitchStatement	switch ( ch )		978	6					
ANR	1078	Condition	ch	167:10:3696:3697	978	0	True				
ANR	1079	Identifier	ch		978	0					
ANR	1080	CompoundStatement		18:14:437:437	978	1					
ANR	1081	Label	case 'h' :	168:2:3704:3712	978	0	True				
ANR	1082	ExpressionStatement	"twok_move ( 1 , 1 )"	169:3:3717:3733	978	1	True				
ANR	1083	CallExpression	"twok_move ( 1 , 1 )"		978	0					
ANR	1084	Callee	twok_move		978	0					
ANR	1085	Identifier	twok_move		978	0					
ANR	1086	ArgumentList	1		978	1					
ANR	1087	Argument	1		978	0					
ANR	1088	PrimaryExpression	1		978	0					
ANR	1089	Argument	1		978	1					
ANR	1090	PrimaryExpression	1		978	0					
ANR	1091	BreakStatement	break ;	170:3:3738:3743	978	2	True				
ANR	1092	Label	case 'j' :	171:2:3747:3755	978	3	True				
ANR	1093	ExpressionStatement	"twok_move ( 0 , 0 )"	172:3:3760:3776	978	4	True				
ANR	1094	CallExpression	"twok_move ( 0 , 0 )"		978	0					
ANR	1095	Callee	twok_move		978	0					
ANR	1096	Identifier	twok_move		978	0					
ANR	1097	ArgumentList	0		978	1					
ANR	1098	Argument	0		978	0					
ANR	1099	PrimaryExpression	0		978	0					
ANR	1100	Argument	0		978	1					
ANR	1101	PrimaryExpression	0		978	0					
ANR	1102	BreakStatement	break ;	173:3:3781:3786	978	5	True				
ANR	1103	Label	case 'k' :	174:2:3790:3798	978	6	True				
ANR	1104	ExpressionStatement	"twok_move ( 0 , 1 )"	175:3:3803:3819	978	7	True				
ANR	1105	CallExpression	"twok_move ( 0 , 1 )"		978	0					
ANR	1106	Callee	twok_move		978	0					
ANR	1107	Identifier	twok_move		978	0					
ANR	1108	ArgumentList	0		978	1					
ANR	1109	Argument	0		978	0					
ANR	1110	PrimaryExpression	0		978	0					
ANR	1111	Argument	1		978	1					
ANR	1112	PrimaryExpression	1		978	0					
ANR	1113	BreakStatement	break ;	176:3:3824:3829	978	8	True				
ANR	1114	Label	case 'l' :	177:2:3833:3841	978	9	True				
ANR	1115	ExpressionStatement	"twok_move ( 1 , 0 )"	178:3:3846:3862	978	10	True				
ANR	1116	CallExpression	"twok_move ( 1 , 0 )"		978	0					
ANR	1117	Callee	twok_move		978	0					
ANR	1118	Identifier	twok_move		978	0					
ANR	1119	ArgumentList	1		978	1					
ANR	1120	Argument	1		978	0					
ANR	1121	PrimaryExpression	1		978	0					
ANR	1122	Argument	0		978	1					
ANR	1123	PrimaryExpression	0		978	0					
ANR	1124	BreakStatement	break ;	179:3:3867:3872	978	11	True				
ANR	1125	IfStatement	if ( ch < 1 || ch == 'q' )		978	7					
ANR	1126	Condition	ch < 1 || ch == 'q'	181:6:3884:3902	978	0	True				
ANR	1127	OrExpression	ch < 1 || ch == 'q'		978	0		||			
ANR	1128	RelationalExpression	ch < 1		978	0		<			
ANR	1129	Identifier	ch		978	0					
ANR	1130	PrimaryExpression	1		978	1					
ANR	1131	EqualityExpression	ch == 'q'		978	1		==			
ANR	1132	Identifier	ch		978	0					
ANR	1133	PrimaryExpression	'q'		978	1					
ANR	1134	CompoundStatement		32:27:642:642	978	1					
ANR	1135	BreakStatement	break ;	182:3:3910:3915	978	0	True				
ANR	1136	ExpressionStatement	r_cons_clear00 ( )	185:1:3925:3942	978	6	True				
ANR	1137	CallExpression	r_cons_clear00 ( )		978	0					
ANR	1138	Callee	r_cons_clear00		978	0					
ANR	1139	Identifier	r_cons_clear00		978	0					
ANR	1140	ArgumentList			978	1					
ANR	1141	ExpressionStatement	"r_cons_printf ( ""[r2048] score: %d\\n"" , score )"	186:1:3945:3989	978	7	True				
ANR	1142	CallExpression	"r_cons_printf ( ""[r2048] score: %d\\n"" , score )"		978	0					
ANR	1143	Callee	r_cons_printf		978	0					
ANR	1144	Identifier	r_cons_printf		978	0					
ANR	1145	ArgumentList	"""[r2048] score: %d\\n"""		978	1					
ANR	1146	Argument	"""[r2048] score: %d\\n"""		978	0					
ANR	1147	PrimaryExpression	"""[r2048] score: %d\\n"""		978	0					
ANR	1148	Argument	score		978	1					
ANR	1149	Identifier	score		978	0					
ANR	1150	ExpressionStatement	r_cons_flush ( )	187:1:3992:4007	978	8	True				
ANR	1151	CallExpression	r_cons_flush ( )		978	0					
ANR	1152	Callee	r_cons_flush		978	0					
ANR	1153	Identifier	r_cons_flush		978	0					
ANR	1154	ArgumentList			978	1					
ANR	1155	ExpressionStatement	twok_print ( color )	188:1:4010:4028	978	9	True				
ANR	1156	CallExpression	twok_print ( color )		978	0					
ANR	1157	Callee	twok_print		978	0					
ANR	1158	Identifier	twok_print		978	0					
ANR	1159	ArgumentList	color		978	1					
ANR	1160	Argument	color		978	0					
ANR	1161	Identifier	color		978	0					
ANR	1162	ExpressionStatement	"r_cons_printf ( ""\\n  [r2048.score] %d\\n"" , score )"	190:1:4032:4079	978	10	True				
ANR	1163	CallExpression	"r_cons_printf ( ""\\n  [r2048.score] %d\\n"" , score )"		978	0					
ANR	1164	Callee	r_cons_printf		978	0					
ANR	1165	Identifier	r_cons_printf		978	0					
ANR	1166	ArgumentList	"""\\n  [r2048.score] %d\\n"""		978	1					
ANR	1167	Argument	"""\\n  [r2048.score] %d\\n"""		978	0					
ANR	1168	PrimaryExpression	"""\\n  [r2048.score] %d\\n"""		978	0					
ANR	1169	Argument	score		978	1					
ANR	1170	Identifier	score		978	0					
ANR	1171	DoStatement	do		978	11					
ANR	1172	CompoundStatement		42:4:822:822	978	0					
ANR	1173	ExpressionStatement	"ch = r_cons_any_key ( ""Press 'q' to quit."" )"	192:2:4089:4131	978	0	True				
ANR	1174	AssignmentExpression	"ch = r_cons_any_key ( ""Press 'q' to quit."" )"		978	0		=			
ANR	1175	Identifier	ch		978	0					
ANR	1176	CallExpression	"r_cons_any_key ( ""Press 'q' to quit."" )"		978	1					
ANR	1177	Callee	r_cons_any_key		978	0					
ANR	1178	Identifier	r_cons_any_key		978	0					
ANR	1179	ArgumentList	"""Press 'q' to quit."""		978	1					
ANR	1180	Argument	"""Press 'q' to quit."""		978	0					
ANR	1181	PrimaryExpression	"""Press 'q' to quit."""		978	0					
ANR	1182	Condition	ch != 'q' && ch >= 1	193:10:4143:4162	978	1	True				
ANR	1183	AndExpression	ch != 'q' && ch >= 1		978	0		&&			
ANR	1184	EqualityExpression	ch != 'q'		978	0		!=			
ANR	1185	Identifier	ch		978	0					
ANR	1186	PrimaryExpression	'q'		978	1					
ANR	1187	RelationalExpression	ch >= 1		978	1		>=			
ANR	1188	Identifier	ch		978	0					
ANR	1189	PrimaryExpression	1		978	1					
ANR	1190	ExpressionStatement	r_cons_set_raw ( 0 )	194:1:4167:4185	978	12	True				
ANR	1191	CallExpression	r_cons_set_raw ( 0 )		978	0					
ANR	1192	Callee	r_cons_set_raw		978	0					
ANR	1193	Identifier	r_cons_set_raw		978	0					
ANR	1194	ArgumentList	0		978	1					
ANR	1195	Argument	0		978	0					
ANR	1196	PrimaryExpression	0		978	0					
ANR	1197	ReturnType	R_API void		978	1					
ANR	1198	Identifier	r_cons_2048		978	2					
ANR	1199	ParameterList	bool color		978	3					
ANR	1200	Parameter	bool color	150:23:3250:3259	978	0	True				
ANR	1201	ParameterType	bool		978	0					
ANR	1202	Identifier	color		978	1					
ANR	1203	CFGEntryNode	ENTRY		978		True				
ANR	1204	CFGExitNode	EXIT		978		True				
ANR	1205	Symbol	score		978						
ANR	1206	Symbol	r_cons_arrow_to_hjkl		978						
ANR	1207	Symbol	twok_fin		978						
ANR	1208	Symbol	r_cons_readchar		978						
ANR	1209	Symbol	color		978						
ANR	1210	Symbol	ch		978						
ANR	1211	Symbol	moves		978						
ANR	1212	Symbol	r_cons_any_key		978						
