command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5535105	File	data/converged/CVE-2019-16718~_radare2/parse_arm_pseudo.c								
ANR	5535106	Function	replace	12:0:213:6226							
ANR	5535107	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5535106	0					
ANR	5535108	CompoundStatement		12:63:276:6226	5535106	0					
ANR	5535109	Statement	define	13:1:279:284	5535106	0	True				
ANR	5535110	Statement	MAXPSEUDOOPS	13:8:286:297	5535106	1	True				
ANR	5535111	Statement	10	13:21:299:300	5535106	2	True				
ANR	5535112	IdentifierDeclStatement	"int i , j , k , d ;"	14:1:303:317	5535106	3	True				
ANR	5535113	IdentifierDecl	i		5535106	0					
ANR	5535114	IdentifierDeclType	int		5535106	0					
ANR	5535115	Identifier	i		5535106	1					
ANR	5535116	IdentifierDecl	j		5535106	1					
ANR	5535117	IdentifierDeclType	int		5535106	0					
ANR	5535118	Identifier	j		5535106	1					
ANR	5535119	IdentifierDecl	k		5535106	2					
ANR	5535120	IdentifierDeclType	int		5535106	0					
ANR	5535121	Identifier	k		5535106	1					
ANR	5535122	IdentifierDecl	d		5535106	3					
ANR	5535123	IdentifierDeclType	int		5535106	0					
ANR	5535124	Identifier	d		5535106	1					
ANR	5535125	IdentifierDeclStatement	char ch ;	15:1:320:327	5535106	4	True				
ANR	5535126	IdentifierDecl	ch		5535106	0					
ANR	5535127	IdentifierDeclType	char		5535106	0					
ANR	5535128	Identifier	ch		5535106	1					
ANR	5535129	ClassDefStatement	"struct { int narg ; char * op ; char * str ; int args [ MAXPSEUDOOPS ] ; } ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } } ;"	16:1:330:5106	5535106	5	True				
ANR	5535130	IdentifierDecl	"ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } }"		5535106	0					
ANR	5535131	IdentifierDeclType	 [ ]		5535106	0					
ANR	5535132	Identifier	ops		5535106	1					
ANR	5535133	AssignmentExpression	"ops [ ] = { { 0 , ""abs"" , ""# = abs(#)"" , { 1 , 1 } } , { 0 , ""adc"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 2 , ""add"" , ""# += #"" , { 1 , 2 } } , { 2 , ""adds"" , ""# += #"" , { 1 , 2 } } , { 3 , ""adds"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""add.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adf"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""adrp"" , ""# = #"" , { 1 , 2 } } , { 0 , ""adr"" , ""# = #"" , { 1 , 2 } } , { 0 , ""and"" , ""# = # & #"" , { 1 , 2 , 3 } } , { 0 , ""ands"" , ""# &= #"" , { 1 , 2 } } , { 0 , ""asls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""asrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""asr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""b"" , ""jmp #"" , { 1 } } , { 0 , ""cbz"" , ""if !# jmp #"" , { 1 , 2 } } , { 0 , ""cbnz"" , ""if # jmp #"" , { 1 , 2 } } , { 0 , ""b.w"" , ""jmp #"" , { 1 } } , { 0 , ""b.gt"" , ""jmp ifgt #"" , { 1 } } , { 0 , ""b.le"" , ""jmp ifle #"" , { 1 } } , { 0 , ""beq lr"" , ""ifeq ret"" , { 0 } } , { 0 , ""beq"" , ""je #"" , { 1 } } , { 0 , ""call"" , ""# ()"" , { 1 } } , { 0 , ""bl"" , ""# ()"" , { 1 } } , { 0 , ""blx"" , ""# ()"" , { 1 } } , { 0 , ""bx lr"" , ""ret"" , { 0 } } , { 0 , ""bxeq"" , ""je #"" , { 1 } } , { 0 , ""cmf"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""cmn"" , ""if (# != #)"" , { 1 , 2 } } , { 0 , ""cmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""fcmp"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""tst"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""dvf"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""eor"" , ""# = # ^ #"" , { 1 , 2 , 3 } } , { 1 , ""bkpt"" , ""breakpoint #"" , { 1 } } , { 1 , ""udf"" , ""undefined #"" , { 1 } } , { 2 , ""sxtb"" , ""# = (char) #"" , { 1 , 2 } } , { 2 , ""sxth"" , ""# = (short) #"" , { 1 , 2 } } , { 0 , ""fdv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fml"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 2 , ""ldr"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrh"" , ""# = (word) #"" , { 1 , 2 } } , { 3 , ""ldrh"" , ""# = (word) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrb"" , ""# = (byte) #"" , { 1 , 2 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 2 , ""ldrsb"" , ""# = (byte) #"" , { 1 , 2 } } , { 2 , ""ldr.w"" , ""# = #"" , { 1 , 2 } } , { 2 , ""ldrsw"" , ""# = #"" , { 1 , 2 } } , { 3 , ""ldr"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsb"" , ""# = (byte) # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldr.w"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 3 , ""ldrsw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""mov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""fmov"" , ""# = #"" , { 1 , 2 } } , { 0 , ""mvn"" , ""# = ~#"" , { 1 , 2 } } , { 0 , ""movz"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movk"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movn"" , ""# = #"" , { 1 , 2 } } , { 0 , ""neg"" , ""# = !#"" , { 1 , 2 } } , { 0 , ""sxtw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""stur"" , ""# = #"" , { 2 , 1 } } , { 0 , ""stp"" , ""# = (#, 2)"" , { 3 , 1 } } , { 0 , ""ldp"" , ""(#, 2) = 3"" , { 1 } } , { 0 , ""vmov.i32"" , ""# = #"" , { 1 , 2 } } , { 0 , ""muf"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""mul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""fmul"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""muls"" , ""# = # * #"" , { 1 , 2 , 3 } } , { 0 , ""div"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""fdiv"" , ""# = # / #"" , { 1 , 2 , 3 } } , { 0 , ""udiv"" , ""# = (unsigned) # / #"" , { 1 , 2 , 3 } } , { 0 , ""orr"" , ""# = # | #"" , { 1 , 2 , 3 } } , { 0 , ""rmf"" , ""# = # % #"" , { 1 , 2 , 3 } } , { 0 , ""bge"" , ""(>=) goto #"" , { 1 } } , { 0 , ""sbc"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""sqt"" , ""# = sqrt(#)"" , { 1 , 2 } } , { 0 , ""lsrs"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsls"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""lsr"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 2 , ""str"" , ""# = #"" , { 2 , 1 } } , { 2 , ""strb"" , ""# = (byte) #"" , { 2 , 1 } } , { 2 , ""strh"" , ""# = (half) #"" , { 2 , 1 } } , { 2 , ""strh.w"" , ""# = (half) #"" , { 2 , 1 } } , { 3 , ""str"" , ""# + # = #"" , { 2 , 3 , 1 } } , { 3 , ""strb"" , ""# + # = (byte) #"" , { 2 , 3 , 1 } } , { 3 , ""strh"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""strh.w"" , ""# + # = (half) #"" , { 2 , 3 , 1 } } , { 3 , ""sub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""subs"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 3 , ""fsub"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 2 , ""sub"" , ""# -= #"" , { 1 , 2 } } , { 2 , ""subs"" , ""# -= #"" , { 1 , 2 } } , { 0 , ""swp"" , ""swap(#, 2)"" , { 1 } } , { 0 , ""movs"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movw"" , ""# = #"" , { 1 , 2 } } , { 0 , ""movt"" , ""# |= # << 16"" , { 1 , 2 } } , { 0 , ""vmov"" , ""# = (float) # . #"" , { 1 , 2 , 3 } } , { 0 , ""vdiv.f64"" , ""# = (float) # / #"" , { 1 , 2 , 3 } } , { 0 , ""addw"" , ""# = # + #"" , { 1 , 2 , 3 } } , { 0 , ""sub.w"" , ""# = # - #"" , { 1 , 2 , 3 } } , { 0 , ""tst.w"" , ""if (# == #)"" , { 1 , 2 } } , { 0 , ""lsr.w"" , ""# = # >> #"" , { 1 , 2 , 3 } } , { 0 , ""lsl.w"" , ""# = # << #"" , { 1 , 2 , 3 } } , { 0 , ""pop.w"" , ""pop #"" , { 1 } } , { 0 , ""vpop"" , ""pop #"" , { 1 } } , { 0 , ""vpush"" , ""push #"" , { 1 } } , { 0 , ""push.w"" , ""push #"" , { 1 } } , { 0 , NULL } }"		5535106	2		=			
ANR	5535134	Identifier	ops		5535106	0					
ANR	5535135	InitializerList	0		5535106	1					
ANR	5535136	InitializerList	0		5535106	0					
ANR	5535137	PrimaryExpression	0		5535106	0					
ANR	5535138	PrimaryExpression	"""abs"""		5535106	1					
ANR	5535139	PrimaryExpression	"""# = abs(#)"""		5535106	2					
ANR	5535140	InitializerList	1		5535106	3					
ANR	5535141	PrimaryExpression	1		5535106	0					
ANR	5535142	PrimaryExpression	1		5535106	1					
ANR	5535143	InitializerList	0		5535106	1					
ANR	5535144	PrimaryExpression	0		5535106	0					
ANR	5535145	PrimaryExpression	"""adc"""		5535106	1					
ANR	5535146	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535147	InitializerList	1		5535106	3					
ANR	5535148	PrimaryExpression	1		5535106	0					
ANR	5535149	PrimaryExpression	2		5535106	1					
ANR	5535150	PrimaryExpression	3		5535106	2					
ANR	5535151	InitializerList	3		5535106	2					
ANR	5535152	PrimaryExpression	3		5535106	0					
ANR	5535153	PrimaryExpression	"""add"""		5535106	1					
ANR	5535154	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535155	InitializerList	1		5535106	3					
ANR	5535156	PrimaryExpression	1		5535106	0					
ANR	5535157	PrimaryExpression	2		5535106	1					
ANR	5535158	PrimaryExpression	3		5535106	2					
ANR	5535159	InitializerList	2		5535106	3					
ANR	5535160	PrimaryExpression	2		5535106	0					
ANR	5535161	PrimaryExpression	"""add"""		5535106	1					
ANR	5535162	PrimaryExpression	"""# += #"""		5535106	2					
ANR	5535163	InitializerList	1		5535106	3					
ANR	5535164	PrimaryExpression	1		5535106	0					
ANR	5535165	PrimaryExpression	2		5535106	1					
ANR	5535166	InitializerList	2		5535106	4					
ANR	5535167	PrimaryExpression	2		5535106	0					
ANR	5535168	PrimaryExpression	"""adds"""		5535106	1					
ANR	5535169	PrimaryExpression	"""# += #"""		5535106	2					
ANR	5535170	InitializerList	1		5535106	3					
ANR	5535171	PrimaryExpression	1		5535106	0					
ANR	5535172	PrimaryExpression	2		5535106	1					
ANR	5535173	InitializerList	3		5535106	5					
ANR	5535174	PrimaryExpression	3		5535106	0					
ANR	5535175	PrimaryExpression	"""adds"""		5535106	1					
ANR	5535176	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535177	InitializerList	1		5535106	3					
ANR	5535178	PrimaryExpression	1		5535106	0					
ANR	5535179	PrimaryExpression	2		5535106	1					
ANR	5535180	PrimaryExpression	3		5535106	2					
ANR	5535181	InitializerList	3		5535106	6					
ANR	5535182	PrimaryExpression	3		5535106	0					
ANR	5535183	PrimaryExpression	"""addw"""		5535106	1					
ANR	5535184	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535185	InitializerList	1		5535106	3					
ANR	5535186	PrimaryExpression	1		5535106	0					
ANR	5535187	PrimaryExpression	2		5535106	1					
ANR	5535188	PrimaryExpression	3		5535106	2					
ANR	5535189	InitializerList	3		5535106	7					
ANR	5535190	PrimaryExpression	3		5535106	0					
ANR	5535191	PrimaryExpression	"""add.w"""		5535106	1					
ANR	5535192	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535193	InitializerList	1		5535106	3					
ANR	5535194	PrimaryExpression	1		5535106	0					
ANR	5535195	PrimaryExpression	2		5535106	1					
ANR	5535196	PrimaryExpression	3		5535106	2					
ANR	5535197	InitializerList	0		5535106	8					
ANR	5535198	PrimaryExpression	0		5535106	0					
ANR	5535199	PrimaryExpression	"""adf"""		5535106	1					
ANR	5535200	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535201	InitializerList	1		5535106	3					
ANR	5535202	PrimaryExpression	1		5535106	0					
ANR	5535203	PrimaryExpression	2		5535106	1					
ANR	5535204	PrimaryExpression	3		5535106	2					
ANR	5535205	InitializerList	0		5535106	9					
ANR	5535206	PrimaryExpression	0		5535106	0					
ANR	5535207	PrimaryExpression	"""adrp"""		5535106	1					
ANR	5535208	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535209	InitializerList	1		5535106	3					
ANR	5535210	PrimaryExpression	1		5535106	0					
ANR	5535211	PrimaryExpression	2		5535106	1					
ANR	5535212	InitializerList	0		5535106	10					
ANR	5535213	PrimaryExpression	0		5535106	0					
ANR	5535214	PrimaryExpression	"""adr"""		5535106	1					
ANR	5535215	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535216	InitializerList	1		5535106	3					
ANR	5535217	PrimaryExpression	1		5535106	0					
ANR	5535218	PrimaryExpression	2		5535106	1					
ANR	5535219	InitializerList	0		5535106	11					
ANR	5535220	PrimaryExpression	0		5535106	0					
ANR	5535221	PrimaryExpression	"""and"""		5535106	1					
ANR	5535222	PrimaryExpression	"""# = # & #"""		5535106	2					
ANR	5535223	InitializerList	1		5535106	3					
ANR	5535224	PrimaryExpression	1		5535106	0					
ANR	5535225	PrimaryExpression	2		5535106	1					
ANR	5535226	PrimaryExpression	3		5535106	2					
ANR	5535227	InitializerList	0		5535106	12					
ANR	5535228	PrimaryExpression	0		5535106	0					
ANR	5535229	PrimaryExpression	"""ands"""		5535106	1					
ANR	5535230	PrimaryExpression	"""# &= #"""		5535106	2					
ANR	5535231	InitializerList	1		5535106	3					
ANR	5535232	PrimaryExpression	1		5535106	0					
ANR	5535233	PrimaryExpression	2		5535106	1					
ANR	5535234	InitializerList	0		5535106	13					
ANR	5535235	PrimaryExpression	0		5535106	0					
ANR	5535236	PrimaryExpression	"""asls"""		5535106	1					
ANR	5535237	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535238	InitializerList	1		5535106	3					
ANR	5535239	PrimaryExpression	1		5535106	0					
ANR	5535240	PrimaryExpression	2		5535106	1					
ANR	5535241	PrimaryExpression	3		5535106	2					
ANR	5535242	InitializerList	0		5535106	14					
ANR	5535243	PrimaryExpression	0		5535106	0					
ANR	5535244	PrimaryExpression	"""asl"""		5535106	1					
ANR	5535245	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535246	InitializerList	1		5535106	3					
ANR	5535247	PrimaryExpression	1		5535106	0					
ANR	5535248	PrimaryExpression	2		5535106	1					
ANR	5535249	PrimaryExpression	3		5535106	2					
ANR	5535250	InitializerList	0		5535106	15					
ANR	5535251	PrimaryExpression	0		5535106	0					
ANR	5535252	PrimaryExpression	"""asrs"""		5535106	1					
ANR	5535253	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535254	InitializerList	1		5535106	3					
ANR	5535255	PrimaryExpression	1		5535106	0					
ANR	5535256	PrimaryExpression	2		5535106	1					
ANR	5535257	PrimaryExpression	3		5535106	2					
ANR	5535258	InitializerList	0		5535106	16					
ANR	5535259	PrimaryExpression	0		5535106	0					
ANR	5535260	PrimaryExpression	"""asr"""		5535106	1					
ANR	5535261	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535262	InitializerList	1		5535106	3					
ANR	5535263	PrimaryExpression	1		5535106	0					
ANR	5535264	PrimaryExpression	2		5535106	1					
ANR	5535265	PrimaryExpression	3		5535106	2					
ANR	5535266	InitializerList	0		5535106	17					
ANR	5535267	PrimaryExpression	0		5535106	0					
ANR	5535268	PrimaryExpression	"""b"""		5535106	1					
ANR	5535269	PrimaryExpression	"""jmp #"""		5535106	2					
ANR	5535270	InitializerList	1		5535106	3					
ANR	5535271	PrimaryExpression	1		5535106	0					
ANR	5535272	InitializerList	0		5535106	18					
ANR	5535273	PrimaryExpression	0		5535106	0					
ANR	5535274	PrimaryExpression	"""cbz"""		5535106	1					
ANR	5535275	PrimaryExpression	"""if !# jmp #"""		5535106	2					
ANR	5535276	InitializerList	1		5535106	3					
ANR	5535277	PrimaryExpression	1		5535106	0					
ANR	5535278	PrimaryExpression	2		5535106	1					
ANR	5535279	InitializerList	0		5535106	19					
ANR	5535280	PrimaryExpression	0		5535106	0					
ANR	5535281	PrimaryExpression	"""cbnz"""		5535106	1					
ANR	5535282	PrimaryExpression	"""if # jmp #"""		5535106	2					
ANR	5535283	InitializerList	1		5535106	3					
ANR	5535284	PrimaryExpression	1		5535106	0					
ANR	5535285	PrimaryExpression	2		5535106	1					
ANR	5535286	InitializerList	0		5535106	20					
ANR	5535287	PrimaryExpression	0		5535106	0					
ANR	5535288	PrimaryExpression	"""b.w"""		5535106	1					
ANR	5535289	PrimaryExpression	"""jmp #"""		5535106	2					
ANR	5535290	InitializerList	1		5535106	3					
ANR	5535291	PrimaryExpression	1		5535106	0					
ANR	5535292	InitializerList	0		5535106	21					
ANR	5535293	PrimaryExpression	0		5535106	0					
ANR	5535294	PrimaryExpression	"""b.gt"""		5535106	1					
ANR	5535295	PrimaryExpression	"""jmp ifgt #"""		5535106	2					
ANR	5535296	InitializerList	1		5535106	3					
ANR	5535297	PrimaryExpression	1		5535106	0					
ANR	5535298	InitializerList	0		5535106	22					
ANR	5535299	PrimaryExpression	0		5535106	0					
ANR	5535300	PrimaryExpression	"""b.le"""		5535106	1					
ANR	5535301	PrimaryExpression	"""jmp ifle #"""		5535106	2					
ANR	5535302	InitializerList	1		5535106	3					
ANR	5535303	PrimaryExpression	1		5535106	0					
ANR	5535304	InitializerList	0		5535106	23					
ANR	5535305	PrimaryExpression	0		5535106	0					
ANR	5535306	PrimaryExpression	"""beq lr"""		5535106	1					
ANR	5535307	PrimaryExpression	"""ifeq ret"""		5535106	2					
ANR	5535308	InitializerList	0		5535106	3					
ANR	5535309	PrimaryExpression	0		5535106	0					
ANR	5535310	InitializerList	0		5535106	24					
ANR	5535311	PrimaryExpression	0		5535106	0					
ANR	5535312	PrimaryExpression	"""beq"""		5535106	1					
ANR	5535313	PrimaryExpression	"""je #"""		5535106	2					
ANR	5535314	InitializerList	1		5535106	3					
ANR	5535315	PrimaryExpression	1		5535106	0					
ANR	5535316	InitializerList	0		5535106	25					
ANR	5535317	PrimaryExpression	0		5535106	0					
ANR	5535318	PrimaryExpression	"""call"""		5535106	1					
ANR	5535319	PrimaryExpression	"""# ()"""		5535106	2					
ANR	5535320	InitializerList	1		5535106	3					
ANR	5535321	PrimaryExpression	1		5535106	0					
ANR	5535322	InitializerList	0		5535106	26					
ANR	5535323	PrimaryExpression	0		5535106	0					
ANR	5535324	PrimaryExpression	"""bl"""		5535106	1					
ANR	5535325	PrimaryExpression	"""# ()"""		5535106	2					
ANR	5535326	InitializerList	1		5535106	3					
ANR	5535327	PrimaryExpression	1		5535106	0					
ANR	5535328	InitializerList	0		5535106	27					
ANR	5535329	PrimaryExpression	0		5535106	0					
ANR	5535330	PrimaryExpression	"""blx"""		5535106	1					
ANR	5535331	PrimaryExpression	"""# ()"""		5535106	2					
ANR	5535332	InitializerList	1		5535106	3					
ANR	5535333	PrimaryExpression	1		5535106	0					
ANR	5535334	InitializerList	0		5535106	28					
ANR	5535335	PrimaryExpression	0		5535106	0					
ANR	5535336	PrimaryExpression	"""bx lr"""		5535106	1					
ANR	5535337	PrimaryExpression	"""ret"""		5535106	2					
ANR	5535338	InitializerList	0		5535106	3					
ANR	5535339	PrimaryExpression	0		5535106	0					
ANR	5535340	InitializerList	0		5535106	29					
ANR	5535341	PrimaryExpression	0		5535106	0					
ANR	5535342	PrimaryExpression	"""bxeq"""		5535106	1					
ANR	5535343	PrimaryExpression	"""je #"""		5535106	2					
ANR	5535344	InitializerList	1		5535106	3					
ANR	5535345	PrimaryExpression	1		5535106	0					
ANR	5535346	InitializerList	0		5535106	30					
ANR	5535347	PrimaryExpression	0		5535106	0					
ANR	5535348	PrimaryExpression	"""cmf"""		5535106	1					
ANR	5535349	PrimaryExpression	"""if (# == #)"""		5535106	2					
ANR	5535350	InitializerList	1		5535106	3					
ANR	5535351	PrimaryExpression	1		5535106	0					
ANR	5535352	PrimaryExpression	2		5535106	1					
ANR	5535353	InitializerList	0		5535106	31					
ANR	5535354	PrimaryExpression	0		5535106	0					
ANR	5535355	PrimaryExpression	"""cmn"""		5535106	1					
ANR	5535356	PrimaryExpression	"""if (# != #)"""		5535106	2					
ANR	5535357	InitializerList	1		5535106	3					
ANR	5535358	PrimaryExpression	1		5535106	0					
ANR	5535359	PrimaryExpression	2		5535106	1					
ANR	5535360	InitializerList	0		5535106	32					
ANR	5535361	PrimaryExpression	0		5535106	0					
ANR	5535362	PrimaryExpression	"""cmp"""		5535106	1					
ANR	5535363	PrimaryExpression	"""if (# == #)"""		5535106	2					
ANR	5535364	InitializerList	1		5535106	3					
ANR	5535365	PrimaryExpression	1		5535106	0					
ANR	5535366	PrimaryExpression	2		5535106	1					
ANR	5535367	InitializerList	0		5535106	33					
ANR	5535368	PrimaryExpression	0		5535106	0					
ANR	5535369	PrimaryExpression	"""fcmp"""		5535106	1					
ANR	5535370	PrimaryExpression	"""if (# == #)"""		5535106	2					
ANR	5535371	InitializerList	1		5535106	3					
ANR	5535372	PrimaryExpression	1		5535106	0					
ANR	5535373	PrimaryExpression	2		5535106	1					
ANR	5535374	InitializerList	0		5535106	34					
ANR	5535375	PrimaryExpression	0		5535106	0					
ANR	5535376	PrimaryExpression	"""tst"""		5535106	1					
ANR	5535377	PrimaryExpression	"""if (# == #)"""		5535106	2					
ANR	5535378	InitializerList	1		5535106	3					
ANR	5535379	PrimaryExpression	1		5535106	0					
ANR	5535380	PrimaryExpression	2		5535106	1					
ANR	5535381	InitializerList	0		5535106	35					
ANR	5535382	PrimaryExpression	0		5535106	0					
ANR	5535383	PrimaryExpression	"""dvf"""		5535106	1					
ANR	5535384	PrimaryExpression	"""# = # / #"""		5535106	2					
ANR	5535385	InitializerList	1		5535106	3					
ANR	5535386	PrimaryExpression	1		5535106	0					
ANR	5535387	PrimaryExpression	2		5535106	1					
ANR	5535388	PrimaryExpression	3		5535106	2					
ANR	5535389	InitializerList	0		5535106	36					
ANR	5535390	PrimaryExpression	0		5535106	0					
ANR	5535391	PrimaryExpression	"""eor"""		5535106	1					
ANR	5535392	PrimaryExpression	"""# = # ^ #"""		5535106	2					
ANR	5535393	InitializerList	1		5535106	3					
ANR	5535394	PrimaryExpression	1		5535106	0					
ANR	5535395	PrimaryExpression	2		5535106	1					
ANR	5535396	PrimaryExpression	3		5535106	2					
ANR	5535397	InitializerList	1		5535106	37					
ANR	5535398	PrimaryExpression	1		5535106	0					
ANR	5535399	PrimaryExpression	"""bkpt"""		5535106	1					
ANR	5535400	PrimaryExpression	"""breakpoint #"""		5535106	2					
ANR	5535401	InitializerList	1		5535106	3					
ANR	5535402	PrimaryExpression	1		5535106	0					
ANR	5535403	InitializerList	1		5535106	38					
ANR	5535404	PrimaryExpression	1		5535106	0					
ANR	5535405	PrimaryExpression	"""udf"""		5535106	1					
ANR	5535406	PrimaryExpression	"""undefined #"""		5535106	2					
ANR	5535407	InitializerList	1		5535106	3					
ANR	5535408	PrimaryExpression	1		5535106	0					
ANR	5535409	InitializerList	2		5535106	39					
ANR	5535410	PrimaryExpression	2		5535106	0					
ANR	5535411	PrimaryExpression	"""sxtb"""		5535106	1					
ANR	5535412	PrimaryExpression	"""# = (char) #"""		5535106	2					
ANR	5535413	InitializerList	1		5535106	3					
ANR	5535414	PrimaryExpression	1		5535106	0					
ANR	5535415	PrimaryExpression	2		5535106	1					
ANR	5535416	InitializerList	2		5535106	40					
ANR	5535417	PrimaryExpression	2		5535106	0					
ANR	5535418	PrimaryExpression	"""sxth"""		5535106	1					
ANR	5535419	PrimaryExpression	"""# = (short) #"""		5535106	2					
ANR	5535420	InitializerList	1		5535106	3					
ANR	5535421	PrimaryExpression	1		5535106	0					
ANR	5535422	PrimaryExpression	2		5535106	1					
ANR	5535423	InitializerList	0		5535106	41					
ANR	5535424	PrimaryExpression	0		5535106	0					
ANR	5535425	PrimaryExpression	"""fdv"""		5535106	1					
ANR	5535426	PrimaryExpression	"""# = # / #"""		5535106	2					
ANR	5535427	InitializerList	1		5535106	3					
ANR	5535428	PrimaryExpression	1		5535106	0					
ANR	5535429	PrimaryExpression	2		5535106	1					
ANR	5535430	PrimaryExpression	3		5535106	2					
ANR	5535431	InitializerList	0		5535106	42					
ANR	5535432	PrimaryExpression	0		5535106	0					
ANR	5535433	PrimaryExpression	"""fml"""		5535106	1					
ANR	5535434	PrimaryExpression	"""# = # * #"""		5535106	2					
ANR	5535435	InitializerList	1		5535106	3					
ANR	5535436	PrimaryExpression	1		5535106	0					
ANR	5535437	PrimaryExpression	2		5535106	1					
ANR	5535438	PrimaryExpression	3		5535106	2					
ANR	5535439	InitializerList	2		5535106	43					
ANR	5535440	PrimaryExpression	2		5535106	0					
ANR	5535441	PrimaryExpression	"""ldr"""		5535106	1					
ANR	5535442	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535443	InitializerList	1		5535106	3					
ANR	5535444	PrimaryExpression	1		5535106	0					
ANR	5535445	PrimaryExpression	2		5535106	1					
ANR	5535446	InitializerList	2		5535106	44					
ANR	5535447	PrimaryExpression	2		5535106	0					
ANR	5535448	PrimaryExpression	"""ldrh"""		5535106	1					
ANR	5535449	PrimaryExpression	"""# = (word) #"""		5535106	2					
ANR	5535450	InitializerList	1		5535106	3					
ANR	5535451	PrimaryExpression	1		5535106	0					
ANR	5535452	PrimaryExpression	2		5535106	1					
ANR	5535453	InitializerList	3		5535106	45					
ANR	5535454	PrimaryExpression	3		5535106	0					
ANR	5535455	PrimaryExpression	"""ldrh"""		5535106	1					
ANR	5535456	PrimaryExpression	"""# = (word) # + #"""		5535106	2					
ANR	5535457	InitializerList	1		5535106	3					
ANR	5535458	PrimaryExpression	1		5535106	0					
ANR	5535459	PrimaryExpression	2		5535106	1					
ANR	5535460	PrimaryExpression	3		5535106	2					
ANR	5535461	InitializerList	2		5535106	46					
ANR	5535462	PrimaryExpression	2		5535106	0					
ANR	5535463	PrimaryExpression	"""ldrb"""		5535106	1					
ANR	5535464	PrimaryExpression	"""# = (byte) #"""		5535106	2					
ANR	5535465	InitializerList	1		5535106	3					
ANR	5535466	PrimaryExpression	1		5535106	0					
ANR	5535467	PrimaryExpression	2		5535106	1					
ANR	5535468	InitializerList	3		5535106	47					
ANR	5535469	PrimaryExpression	3		5535106	0					
ANR	5535470	PrimaryExpression	"""ldrb"""		5535106	1					
ANR	5535471	PrimaryExpression	"""# = (byte) # + #"""		5535106	2					
ANR	5535472	InitializerList	1		5535106	3					
ANR	5535473	PrimaryExpression	1		5535106	0					
ANR	5535474	PrimaryExpression	2		5535106	1					
ANR	5535475	PrimaryExpression	3		5535106	2					
ANR	5535476	InitializerList	2		5535106	48					
ANR	5535477	PrimaryExpression	2		5535106	0					
ANR	5535478	PrimaryExpression	"""ldrsb"""		5535106	1					
ANR	5535479	PrimaryExpression	"""# = (byte) #"""		5535106	2					
ANR	5535480	InitializerList	1		5535106	3					
ANR	5535481	PrimaryExpression	1		5535106	0					
ANR	5535482	PrimaryExpression	2		5535106	1					
ANR	5535483	InitializerList	2		5535106	49					
ANR	5535484	PrimaryExpression	2		5535106	0					
ANR	5535485	PrimaryExpression	"""ldr.w"""		5535106	1					
ANR	5535486	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535487	InitializerList	1		5535106	3					
ANR	5535488	PrimaryExpression	1		5535106	0					
ANR	5535489	PrimaryExpression	2		5535106	1					
ANR	5535490	InitializerList	2		5535106	50					
ANR	5535491	PrimaryExpression	2		5535106	0					
ANR	5535492	PrimaryExpression	"""ldrsw"""		5535106	1					
ANR	5535493	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535494	InitializerList	1		5535106	3					
ANR	5535495	PrimaryExpression	1		5535106	0					
ANR	5535496	PrimaryExpression	2		5535106	1					
ANR	5535497	InitializerList	3		5535106	51					
ANR	5535498	PrimaryExpression	3		5535106	0					
ANR	5535499	PrimaryExpression	"""ldr"""		5535106	1					
ANR	5535500	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535501	InitializerList	1		5535106	3					
ANR	5535502	PrimaryExpression	1		5535106	0					
ANR	5535503	PrimaryExpression	2		5535106	1					
ANR	5535504	PrimaryExpression	3		5535106	2					
ANR	5535505	InitializerList	3		5535106	52					
ANR	5535506	PrimaryExpression	3		5535106	0					
ANR	5535507	PrimaryExpression	"""ldrb"""		5535106	1					
ANR	5535508	PrimaryExpression	"""# = (byte) # + #"""		5535106	2					
ANR	5535509	InitializerList	1		5535106	3					
ANR	5535510	PrimaryExpression	1		5535106	0					
ANR	5535511	PrimaryExpression	2		5535106	1					
ANR	5535512	PrimaryExpression	3		5535106	2					
ANR	5535513	InitializerList	3		5535106	53					
ANR	5535514	PrimaryExpression	3		5535106	0					
ANR	5535515	PrimaryExpression	"""ldrsb"""		5535106	1					
ANR	5535516	PrimaryExpression	"""# = (byte) # + #"""		5535106	2					
ANR	5535517	InitializerList	1		5535106	3					
ANR	5535518	PrimaryExpression	1		5535106	0					
ANR	5535519	PrimaryExpression	2		5535106	1					
ANR	5535520	PrimaryExpression	3		5535106	2					
ANR	5535521	InitializerList	3		5535106	54					
ANR	5535522	PrimaryExpression	3		5535106	0					
ANR	5535523	PrimaryExpression	"""ldr.w"""		5535106	1					
ANR	5535524	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535525	InitializerList	1		5535106	3					
ANR	5535526	PrimaryExpression	1		5535106	0					
ANR	5535527	PrimaryExpression	2		5535106	1					
ANR	5535528	PrimaryExpression	3		5535106	2					
ANR	5535529	InitializerList	3		5535106	55					
ANR	5535530	PrimaryExpression	3		5535106	0					
ANR	5535531	PrimaryExpression	"""ldrsw"""		5535106	1					
ANR	5535532	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535533	InitializerList	1		5535106	3					
ANR	5535534	PrimaryExpression	1		5535106	0					
ANR	5535535	PrimaryExpression	2		5535106	1					
ANR	5535536	PrimaryExpression	3		5535106	2					
ANR	5535537	InitializerList	0		5535106	56					
ANR	5535538	PrimaryExpression	0		5535106	0					
ANR	5535539	PrimaryExpression	"""lsl"""		5535106	1					
ANR	5535540	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535541	InitializerList	1		5535106	3					
ANR	5535542	PrimaryExpression	1		5535106	0					
ANR	5535543	PrimaryExpression	2		5535106	1					
ANR	5535544	PrimaryExpression	3		5535106	2					
ANR	5535545	InitializerList	0		5535106	57					
ANR	5535546	PrimaryExpression	0		5535106	0					
ANR	5535547	PrimaryExpression	"""lsr"""		5535106	1					
ANR	5535548	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535549	InitializerList	1		5535106	3					
ANR	5535550	PrimaryExpression	1		5535106	0					
ANR	5535551	PrimaryExpression	2		5535106	1					
ANR	5535552	PrimaryExpression	3		5535106	2					
ANR	5535553	InitializerList	0		5535106	58					
ANR	5535554	PrimaryExpression	0		5535106	0					
ANR	5535555	PrimaryExpression	"""mov"""		5535106	1					
ANR	5535556	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535557	InitializerList	1		5535106	3					
ANR	5535558	PrimaryExpression	1		5535106	0					
ANR	5535559	PrimaryExpression	2		5535106	1					
ANR	5535560	InitializerList	0		5535106	59					
ANR	5535561	PrimaryExpression	0		5535106	0					
ANR	5535562	PrimaryExpression	"""fmov"""		5535106	1					
ANR	5535563	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535564	InitializerList	1		5535106	3					
ANR	5535565	PrimaryExpression	1		5535106	0					
ANR	5535566	PrimaryExpression	2		5535106	1					
ANR	5535567	InitializerList	0		5535106	60					
ANR	5535568	PrimaryExpression	0		5535106	0					
ANR	5535569	PrimaryExpression	"""mvn"""		5535106	1					
ANR	5535570	PrimaryExpression	"""# = ~#"""		5535106	2					
ANR	5535571	InitializerList	1		5535106	3					
ANR	5535572	PrimaryExpression	1		5535106	0					
ANR	5535573	PrimaryExpression	2		5535106	1					
ANR	5535574	InitializerList	0		5535106	61					
ANR	5535575	PrimaryExpression	0		5535106	0					
ANR	5535576	PrimaryExpression	"""movz"""		5535106	1					
ANR	5535577	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535578	InitializerList	1		5535106	3					
ANR	5535579	PrimaryExpression	1		5535106	0					
ANR	5535580	PrimaryExpression	2		5535106	1					
ANR	5535581	InitializerList	0		5535106	62					
ANR	5535582	PrimaryExpression	0		5535106	0					
ANR	5535583	PrimaryExpression	"""movk"""		5535106	1					
ANR	5535584	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535585	InitializerList	1		5535106	3					
ANR	5535586	PrimaryExpression	1		5535106	0					
ANR	5535587	PrimaryExpression	2		5535106	1					
ANR	5535588	InitializerList	0		5535106	63					
ANR	5535589	PrimaryExpression	0		5535106	0					
ANR	5535590	PrimaryExpression	"""movn"""		5535106	1					
ANR	5535591	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535592	InitializerList	1		5535106	3					
ANR	5535593	PrimaryExpression	1		5535106	0					
ANR	5535594	PrimaryExpression	2		5535106	1					
ANR	5535595	InitializerList	0		5535106	64					
ANR	5535596	PrimaryExpression	0		5535106	0					
ANR	5535597	PrimaryExpression	"""neg"""		5535106	1					
ANR	5535598	PrimaryExpression	"""# = !#"""		5535106	2					
ANR	5535599	InitializerList	1		5535106	3					
ANR	5535600	PrimaryExpression	1		5535106	0					
ANR	5535601	PrimaryExpression	2		5535106	1					
ANR	5535602	InitializerList	0		5535106	65					
ANR	5535603	PrimaryExpression	0		5535106	0					
ANR	5535604	PrimaryExpression	"""sxtw"""		5535106	1					
ANR	5535605	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535606	InitializerList	1		5535106	3					
ANR	5535607	PrimaryExpression	1		5535106	0					
ANR	5535608	PrimaryExpression	2		5535106	1					
ANR	5535609	InitializerList	0		5535106	66					
ANR	5535610	PrimaryExpression	0		5535106	0					
ANR	5535611	PrimaryExpression	"""stur"""		5535106	1					
ANR	5535612	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535613	InitializerList	2		5535106	3					
ANR	5535614	PrimaryExpression	2		5535106	0					
ANR	5535615	PrimaryExpression	1		5535106	1					
ANR	5535616	InitializerList	0		5535106	67					
ANR	5535617	PrimaryExpression	0		5535106	0					
ANR	5535618	PrimaryExpression	"""stp"""		5535106	1					
ANR	5535619	PrimaryExpression	"""# = (#, 2)"""		5535106	2					
ANR	5535620	InitializerList	3		5535106	3					
ANR	5535621	PrimaryExpression	3		5535106	0					
ANR	5535622	PrimaryExpression	1		5535106	1					
ANR	5535623	InitializerList	0		5535106	68					
ANR	5535624	PrimaryExpression	0		5535106	0					
ANR	5535625	PrimaryExpression	"""ldp"""		5535106	1					
ANR	5535626	PrimaryExpression	"""(#, 2) = 3"""		5535106	2					
ANR	5535627	InitializerList	1		5535106	3					
ANR	5535628	PrimaryExpression	1		5535106	0					
ANR	5535629	InitializerList	0		5535106	69					
ANR	5535630	PrimaryExpression	0		5535106	0					
ANR	5535631	PrimaryExpression	"""vmov.i32"""		5535106	1					
ANR	5535632	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535633	InitializerList	1		5535106	3					
ANR	5535634	PrimaryExpression	1		5535106	0					
ANR	5535635	PrimaryExpression	2		5535106	1					
ANR	5535636	InitializerList	0		5535106	70					
ANR	5535637	PrimaryExpression	0		5535106	0					
ANR	5535638	PrimaryExpression	"""muf"""		5535106	1					
ANR	5535639	PrimaryExpression	"""# = # * #"""		5535106	2					
ANR	5535640	InitializerList	1		5535106	3					
ANR	5535641	PrimaryExpression	1		5535106	0					
ANR	5535642	PrimaryExpression	2		5535106	1					
ANR	5535643	PrimaryExpression	3		5535106	2					
ANR	5535644	InitializerList	0		5535106	71					
ANR	5535645	PrimaryExpression	0		5535106	0					
ANR	5535646	PrimaryExpression	"""mul"""		5535106	1					
ANR	5535647	PrimaryExpression	"""# = # * #"""		5535106	2					
ANR	5535648	InitializerList	1		5535106	3					
ANR	5535649	PrimaryExpression	1		5535106	0					
ANR	5535650	PrimaryExpression	2		5535106	1					
ANR	5535651	PrimaryExpression	3		5535106	2					
ANR	5535652	InitializerList	0		5535106	72					
ANR	5535653	PrimaryExpression	0		5535106	0					
ANR	5535654	PrimaryExpression	"""fmul"""		5535106	1					
ANR	5535655	PrimaryExpression	"""# = # * #"""		5535106	2					
ANR	5535656	InitializerList	1		5535106	3					
ANR	5535657	PrimaryExpression	1		5535106	0					
ANR	5535658	PrimaryExpression	2		5535106	1					
ANR	5535659	PrimaryExpression	3		5535106	2					
ANR	5535660	InitializerList	0		5535106	73					
ANR	5535661	PrimaryExpression	0		5535106	0					
ANR	5535662	PrimaryExpression	"""muls"""		5535106	1					
ANR	5535663	PrimaryExpression	"""# = # * #"""		5535106	2					
ANR	5535664	InitializerList	1		5535106	3					
ANR	5535665	PrimaryExpression	1		5535106	0					
ANR	5535666	PrimaryExpression	2		5535106	1					
ANR	5535667	PrimaryExpression	3		5535106	2					
ANR	5535668	InitializerList	0		5535106	74					
ANR	5535669	PrimaryExpression	0		5535106	0					
ANR	5535670	PrimaryExpression	"""div"""		5535106	1					
ANR	5535671	PrimaryExpression	"""# = # / #"""		5535106	2					
ANR	5535672	InitializerList	1		5535106	3					
ANR	5535673	PrimaryExpression	1		5535106	0					
ANR	5535674	PrimaryExpression	2		5535106	1					
ANR	5535675	PrimaryExpression	3		5535106	2					
ANR	5535676	InitializerList	0		5535106	75					
ANR	5535677	PrimaryExpression	0		5535106	0					
ANR	5535678	PrimaryExpression	"""fdiv"""		5535106	1					
ANR	5535679	PrimaryExpression	"""# = # / #"""		5535106	2					
ANR	5535680	InitializerList	1		5535106	3					
ANR	5535681	PrimaryExpression	1		5535106	0					
ANR	5535682	PrimaryExpression	2		5535106	1					
ANR	5535683	PrimaryExpression	3		5535106	2					
ANR	5535684	InitializerList	0		5535106	76					
ANR	5535685	PrimaryExpression	0		5535106	0					
ANR	5535686	PrimaryExpression	"""udiv"""		5535106	1					
ANR	5535687	PrimaryExpression	"""# = (unsigned) # / #"""		5535106	2					
ANR	5535688	InitializerList	1		5535106	3					
ANR	5535689	PrimaryExpression	1		5535106	0					
ANR	5535690	PrimaryExpression	2		5535106	1					
ANR	5535691	PrimaryExpression	3		5535106	2					
ANR	5535692	InitializerList	0		5535106	77					
ANR	5535693	PrimaryExpression	0		5535106	0					
ANR	5535694	PrimaryExpression	"""orr"""		5535106	1					
ANR	5535695	PrimaryExpression	"""# = # | #"""		5535106	2					
ANR	5535696	InitializerList	1		5535106	3					
ANR	5535697	PrimaryExpression	1		5535106	0					
ANR	5535698	PrimaryExpression	2		5535106	1					
ANR	5535699	PrimaryExpression	3		5535106	2					
ANR	5535700	InitializerList	0		5535106	78					
ANR	5535701	PrimaryExpression	0		5535106	0					
ANR	5535702	PrimaryExpression	"""rmf"""		5535106	1					
ANR	5535703	PrimaryExpression	"""# = # % #"""		5535106	2					
ANR	5535704	InitializerList	1		5535106	3					
ANR	5535705	PrimaryExpression	1		5535106	0					
ANR	5535706	PrimaryExpression	2		5535106	1					
ANR	5535707	PrimaryExpression	3		5535106	2					
ANR	5535708	InitializerList	0		5535106	79					
ANR	5535709	PrimaryExpression	0		5535106	0					
ANR	5535710	PrimaryExpression	"""bge"""		5535106	1					
ANR	5535711	PrimaryExpression	"""(>=) goto #"""		5535106	2					
ANR	5535712	InitializerList	1		5535106	3					
ANR	5535713	PrimaryExpression	1		5535106	0					
ANR	5535714	InitializerList	0		5535106	80					
ANR	5535715	PrimaryExpression	0		5535106	0					
ANR	5535716	PrimaryExpression	"""sbc"""		5535106	1					
ANR	5535717	PrimaryExpression	"""# = # - #"""		5535106	2					
ANR	5535718	InitializerList	1		5535106	3					
ANR	5535719	PrimaryExpression	1		5535106	0					
ANR	5535720	PrimaryExpression	2		5535106	1					
ANR	5535721	PrimaryExpression	3		5535106	2					
ANR	5535722	InitializerList	0		5535106	81					
ANR	5535723	PrimaryExpression	0		5535106	0					
ANR	5535724	PrimaryExpression	"""sqt"""		5535106	1					
ANR	5535725	PrimaryExpression	"""# = sqrt(#)"""		5535106	2					
ANR	5535726	InitializerList	1		5535106	3					
ANR	5535727	PrimaryExpression	1		5535106	0					
ANR	5535728	PrimaryExpression	2		5535106	1					
ANR	5535729	InitializerList	0		5535106	82					
ANR	5535730	PrimaryExpression	0		5535106	0					
ANR	5535731	PrimaryExpression	"""lsrs"""		5535106	1					
ANR	5535732	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535733	InitializerList	1		5535106	3					
ANR	5535734	PrimaryExpression	1		5535106	0					
ANR	5535735	PrimaryExpression	2		5535106	1					
ANR	5535736	PrimaryExpression	3		5535106	2					
ANR	5535737	InitializerList	0		5535106	83					
ANR	5535738	PrimaryExpression	0		5535106	0					
ANR	5535739	PrimaryExpression	"""lsls"""		5535106	1					
ANR	5535740	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535741	InitializerList	1		5535106	3					
ANR	5535742	PrimaryExpression	1		5535106	0					
ANR	5535743	PrimaryExpression	2		5535106	1					
ANR	5535744	PrimaryExpression	3		5535106	2					
ANR	5535745	InitializerList	0		5535106	84					
ANR	5535746	PrimaryExpression	0		5535106	0					
ANR	5535747	PrimaryExpression	"""lsr"""		5535106	1					
ANR	5535748	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535749	InitializerList	1		5535106	3					
ANR	5535750	PrimaryExpression	1		5535106	0					
ANR	5535751	PrimaryExpression	2		5535106	1					
ANR	5535752	PrimaryExpression	3		5535106	2					
ANR	5535753	InitializerList	0		5535106	85					
ANR	5535754	PrimaryExpression	0		5535106	0					
ANR	5535755	PrimaryExpression	"""lsl"""		5535106	1					
ANR	5535756	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535757	InitializerList	1		5535106	3					
ANR	5535758	PrimaryExpression	1		5535106	0					
ANR	5535759	PrimaryExpression	2		5535106	1					
ANR	5535760	PrimaryExpression	3		5535106	2					
ANR	5535761	InitializerList	2		5535106	86					
ANR	5535762	PrimaryExpression	2		5535106	0					
ANR	5535763	PrimaryExpression	"""str"""		5535106	1					
ANR	5535764	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535765	InitializerList	2		5535106	3					
ANR	5535766	PrimaryExpression	2		5535106	0					
ANR	5535767	PrimaryExpression	1		5535106	1					
ANR	5535768	InitializerList	2		5535106	87					
ANR	5535769	PrimaryExpression	2		5535106	0					
ANR	5535770	PrimaryExpression	"""strb"""		5535106	1					
ANR	5535771	PrimaryExpression	"""# = (byte) #"""		5535106	2					
ANR	5535772	InitializerList	2		5535106	3					
ANR	5535773	PrimaryExpression	2		5535106	0					
ANR	5535774	PrimaryExpression	1		5535106	1					
ANR	5535775	InitializerList	2		5535106	88					
ANR	5535776	PrimaryExpression	2		5535106	0					
ANR	5535777	PrimaryExpression	"""strh"""		5535106	1					
ANR	5535778	PrimaryExpression	"""# = (half) #"""		5535106	2					
ANR	5535779	InitializerList	2		5535106	3					
ANR	5535780	PrimaryExpression	2		5535106	0					
ANR	5535781	PrimaryExpression	1		5535106	1					
ANR	5535782	InitializerList	2		5535106	89					
ANR	5535783	PrimaryExpression	2		5535106	0					
ANR	5535784	PrimaryExpression	"""strh.w"""		5535106	1					
ANR	5535785	PrimaryExpression	"""# = (half) #"""		5535106	2					
ANR	5535786	InitializerList	2		5535106	3					
ANR	5535787	PrimaryExpression	2		5535106	0					
ANR	5535788	PrimaryExpression	1		5535106	1					
ANR	5535789	InitializerList	3		5535106	90					
ANR	5535790	PrimaryExpression	3		5535106	0					
ANR	5535791	PrimaryExpression	"""str"""		5535106	1					
ANR	5535792	PrimaryExpression	"""# + # = #"""		5535106	2					
ANR	5535793	InitializerList	2		5535106	3					
ANR	5535794	PrimaryExpression	2		5535106	0					
ANR	5535795	PrimaryExpression	3		5535106	1					
ANR	5535796	PrimaryExpression	1		5535106	2					
ANR	5535797	InitializerList	3		5535106	91					
ANR	5535798	PrimaryExpression	3		5535106	0					
ANR	5535799	PrimaryExpression	"""strb"""		5535106	1					
ANR	5535800	PrimaryExpression	"""# + # = (byte) #"""		5535106	2					
ANR	5535801	InitializerList	2		5535106	3					
ANR	5535802	PrimaryExpression	2		5535106	0					
ANR	5535803	PrimaryExpression	3		5535106	1					
ANR	5535804	PrimaryExpression	1		5535106	2					
ANR	5535805	InitializerList	3		5535106	92					
ANR	5535806	PrimaryExpression	3		5535106	0					
ANR	5535807	PrimaryExpression	"""strh"""		5535106	1					
ANR	5535808	PrimaryExpression	"""# + # = (half) #"""		5535106	2					
ANR	5535809	InitializerList	2		5535106	3					
ANR	5535810	PrimaryExpression	2		5535106	0					
ANR	5535811	PrimaryExpression	3		5535106	1					
ANR	5535812	PrimaryExpression	1		5535106	2					
ANR	5535813	InitializerList	3		5535106	93					
ANR	5535814	PrimaryExpression	3		5535106	0					
ANR	5535815	PrimaryExpression	"""strh.w"""		5535106	1					
ANR	5535816	PrimaryExpression	"""# + # = (half) #"""		5535106	2					
ANR	5535817	InitializerList	2		5535106	3					
ANR	5535818	PrimaryExpression	2		5535106	0					
ANR	5535819	PrimaryExpression	3		5535106	1					
ANR	5535820	PrimaryExpression	1		5535106	2					
ANR	5535821	InitializerList	3		5535106	94					
ANR	5535822	PrimaryExpression	3		5535106	0					
ANR	5535823	PrimaryExpression	"""sub"""		5535106	1					
ANR	5535824	PrimaryExpression	"""# = # - #"""		5535106	2					
ANR	5535825	InitializerList	1		5535106	3					
ANR	5535826	PrimaryExpression	1		5535106	0					
ANR	5535827	PrimaryExpression	2		5535106	1					
ANR	5535828	PrimaryExpression	3		5535106	2					
ANR	5535829	InitializerList	3		5535106	95					
ANR	5535830	PrimaryExpression	3		5535106	0					
ANR	5535831	PrimaryExpression	"""subs"""		5535106	1					
ANR	5535832	PrimaryExpression	"""# = # - #"""		5535106	2					
ANR	5535833	InitializerList	1		5535106	3					
ANR	5535834	PrimaryExpression	1		5535106	0					
ANR	5535835	PrimaryExpression	2		5535106	1					
ANR	5535836	PrimaryExpression	3		5535106	2					
ANR	5535837	InitializerList	3		5535106	96					
ANR	5535838	PrimaryExpression	3		5535106	0					
ANR	5535839	PrimaryExpression	"""fsub"""		5535106	1					
ANR	5535840	PrimaryExpression	"""# = # - #"""		5535106	2					
ANR	5535841	InitializerList	1		5535106	3					
ANR	5535842	PrimaryExpression	1		5535106	0					
ANR	5535843	PrimaryExpression	2		5535106	1					
ANR	5535844	PrimaryExpression	3		5535106	2					
ANR	5535845	InitializerList	2		5535106	97					
ANR	5535846	PrimaryExpression	2		5535106	0					
ANR	5535847	PrimaryExpression	"""sub"""		5535106	1					
ANR	5535848	PrimaryExpression	"""# -= #"""		5535106	2					
ANR	5535849	InitializerList	1		5535106	3					
ANR	5535850	PrimaryExpression	1		5535106	0					
ANR	5535851	PrimaryExpression	2		5535106	1					
ANR	5535852	InitializerList	2		5535106	98					
ANR	5535853	PrimaryExpression	2		5535106	0					
ANR	5535854	PrimaryExpression	"""subs"""		5535106	1					
ANR	5535855	PrimaryExpression	"""# -= #"""		5535106	2					
ANR	5535856	InitializerList	1		5535106	3					
ANR	5535857	PrimaryExpression	1		5535106	0					
ANR	5535858	PrimaryExpression	2		5535106	1					
ANR	5535859	InitializerList	0		5535106	99					
ANR	5535860	PrimaryExpression	0		5535106	0					
ANR	5535861	PrimaryExpression	"""swp"""		5535106	1					
ANR	5535862	PrimaryExpression	"""swap(#, 2)"""		5535106	2					
ANR	5535863	InitializerList	1		5535106	3					
ANR	5535864	PrimaryExpression	1		5535106	0					
ANR	5535865	InitializerList	0		5535106	100					
ANR	5535866	PrimaryExpression	0		5535106	0					
ANR	5535867	PrimaryExpression	"""movs"""		5535106	1					
ANR	5535868	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535869	InitializerList	1		5535106	3					
ANR	5535870	PrimaryExpression	1		5535106	0					
ANR	5535871	PrimaryExpression	2		5535106	1					
ANR	5535872	InitializerList	0		5535106	101					
ANR	5535873	PrimaryExpression	0		5535106	0					
ANR	5535874	PrimaryExpression	"""movw"""		5535106	1					
ANR	5535875	PrimaryExpression	"""# = #"""		5535106	2					
ANR	5535876	InitializerList	1		5535106	3					
ANR	5535877	PrimaryExpression	1		5535106	0					
ANR	5535878	PrimaryExpression	2		5535106	1					
ANR	5535879	InitializerList	0		5535106	102					
ANR	5535880	PrimaryExpression	0		5535106	0					
ANR	5535881	PrimaryExpression	"""movt"""		5535106	1					
ANR	5535882	PrimaryExpression	"""# |= # << 16"""		5535106	2					
ANR	5535883	InitializerList	1		5535106	3					
ANR	5535884	PrimaryExpression	1		5535106	0					
ANR	5535885	PrimaryExpression	2		5535106	1					
ANR	5535886	InitializerList	0		5535106	103					
ANR	5535887	PrimaryExpression	0		5535106	0					
ANR	5535888	PrimaryExpression	"""vmov"""		5535106	1					
ANR	5535889	PrimaryExpression	"""# = (float) # . #"""		5535106	2					
ANR	5535890	InitializerList	1		5535106	3					
ANR	5535891	PrimaryExpression	1		5535106	0					
ANR	5535892	PrimaryExpression	2		5535106	1					
ANR	5535893	PrimaryExpression	3		5535106	2					
ANR	5535894	InitializerList	0		5535106	104					
ANR	5535895	PrimaryExpression	0		5535106	0					
ANR	5535896	PrimaryExpression	"""vdiv.f64"""		5535106	1					
ANR	5535897	PrimaryExpression	"""# = (float) # / #"""		5535106	2					
ANR	5535898	InitializerList	1		5535106	3					
ANR	5535899	PrimaryExpression	1		5535106	0					
ANR	5535900	PrimaryExpression	2		5535106	1					
ANR	5535901	PrimaryExpression	3		5535106	2					
ANR	5535902	InitializerList	0		5535106	105					
ANR	5535903	PrimaryExpression	0		5535106	0					
ANR	5535904	PrimaryExpression	"""addw"""		5535106	1					
ANR	5535905	PrimaryExpression	"""# = # + #"""		5535106	2					
ANR	5535906	InitializerList	1		5535106	3					
ANR	5535907	PrimaryExpression	1		5535106	0					
ANR	5535908	PrimaryExpression	2		5535106	1					
ANR	5535909	PrimaryExpression	3		5535106	2					
ANR	5535910	InitializerList	0		5535106	106					
ANR	5535911	PrimaryExpression	0		5535106	0					
ANR	5535912	PrimaryExpression	"""sub.w"""		5535106	1					
ANR	5535913	PrimaryExpression	"""# = # - #"""		5535106	2					
ANR	5535914	InitializerList	1		5535106	3					
ANR	5535915	PrimaryExpression	1		5535106	0					
ANR	5535916	PrimaryExpression	2		5535106	1					
ANR	5535917	PrimaryExpression	3		5535106	2					
ANR	5535918	InitializerList	0		5535106	107					
ANR	5535919	PrimaryExpression	0		5535106	0					
ANR	5535920	PrimaryExpression	"""tst.w"""		5535106	1					
ANR	5535921	PrimaryExpression	"""if (# == #)"""		5535106	2					
ANR	5535922	InitializerList	1		5535106	3					
ANR	5535923	PrimaryExpression	1		5535106	0					
ANR	5535924	PrimaryExpression	2		5535106	1					
ANR	5535925	InitializerList	0		5535106	108					
ANR	5535926	PrimaryExpression	0		5535106	0					
ANR	5535927	PrimaryExpression	"""lsr.w"""		5535106	1					
ANR	5535928	PrimaryExpression	"""# = # >> #"""		5535106	2					
ANR	5535929	InitializerList	1		5535106	3					
ANR	5535930	PrimaryExpression	1		5535106	0					
ANR	5535931	PrimaryExpression	2		5535106	1					
ANR	5535932	PrimaryExpression	3		5535106	2					
ANR	5535933	InitializerList	0		5535106	109					
ANR	5535934	PrimaryExpression	0		5535106	0					
ANR	5535935	PrimaryExpression	"""lsl.w"""		5535106	1					
ANR	5535936	PrimaryExpression	"""# = # << #"""		5535106	2					
ANR	5535937	InitializerList	1		5535106	3					
ANR	5535938	PrimaryExpression	1		5535106	0					
ANR	5535939	PrimaryExpression	2		5535106	1					
ANR	5535940	PrimaryExpression	3		5535106	2					
ANR	5535941	InitializerList	0		5535106	110					
ANR	5535942	PrimaryExpression	0		5535106	0					
ANR	5535943	PrimaryExpression	"""pop.w"""		5535106	1					
ANR	5535944	PrimaryExpression	"""pop #"""		5535106	2					
ANR	5535945	InitializerList	1		5535106	3					
ANR	5535946	PrimaryExpression	1		5535106	0					
ANR	5535947	InitializerList	0		5535106	111					
ANR	5535948	PrimaryExpression	0		5535106	0					
ANR	5535949	PrimaryExpression	"""vpop"""		5535106	1					
ANR	5535950	PrimaryExpression	"""pop #"""		5535106	2					
ANR	5535951	InitializerList	1		5535106	3					
ANR	5535952	PrimaryExpression	1		5535106	0					
ANR	5535953	InitializerList	0		5535106	112					
ANR	5535954	PrimaryExpression	0		5535106	0					
ANR	5535955	PrimaryExpression	"""vpush"""		5535106	1					
ANR	5535956	PrimaryExpression	"""push #"""		5535106	2					
ANR	5535957	InitializerList	1		5535106	3					
ANR	5535958	PrimaryExpression	1		5535106	0					
ANR	5535959	InitializerList	0		5535106	113					
ANR	5535960	PrimaryExpression	0		5535106	0					
ANR	5535961	PrimaryExpression	"""push.w"""		5535106	1					
ANR	5535962	PrimaryExpression	"""push #"""		5535106	2					
ANR	5535963	InitializerList	1		5535106	3					
ANR	5535964	PrimaryExpression	1		5535106	0					
ANR	5535965	InitializerList	0		5535106	114					
ANR	5535966	PrimaryExpression	0		5535106	0					
ANR	5535967	Identifier	NULL		5535106	1					
ANR	5535968	IfStatement	if ( ! newstr )		5535106	6					
ANR	5535969	Condition	! newstr	139:5:5113:5119	5535106	0	True				
ANR	5535970	UnaryOperationExpression	! newstr		5535106	0					
ANR	5535971	UnaryOperator	!		5535106	0					
ANR	5535972	Identifier	newstr		5535106	1					
ANR	5535973	CompoundStatement		128:14:4845:4845	5535106	1					
ANR	5535974	ReturnStatement	return false ;	140:2:5126:5138	5535106	0	True				
ANR	5535975	Identifier	false		5535106	0					
ANR	5535976	ForStatement	for ( i = 0 ; ops [ i ] . op ; i ++ )		5535106	7					
ANR	5535977	ForInit	i = 0 ;	143:6:5150:5155	5535106	0	True				
ANR	5535978	AssignmentExpression	i = 0		5535106	0		=			
ANR	5535979	Identifier	i		5535106	0					
ANR	5535980	PrimaryExpression	0		5535106	1					
ANR	5535981	Condition	ops [ i ] . op	143:13:5157:5165	5535106	1	True				
ANR	5535982	MemberAccess	ops [ i ] . op		5535106	0					
ANR	5535983	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5535984	Identifier	ops		5535106	0					
ANR	5535985	Identifier	i		5535106	1					
ANR	5535986	Identifier	op		5535106	1					
ANR	5535987	PostIncDecOperationExpression	i ++	143:24:5168:5170	5535106	2	True				
ANR	5535988	Identifier	i		5535106	0					
ANR	5535989	IncDec	++		5535106	1					
ANR	5535990	CompoundStatement		132:29:4896:4896	5535106	3					
ANR	5535991	IfStatement	if ( ops [ i ] . narg )		5535106	0					
ANR	5535992	Condition	ops [ i ] . narg	144:6:5181:5191	5535106	0	True				
ANR	5535993	MemberAccess	ops [ i ] . narg		5535106	0					
ANR	5535994	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5535995	Identifier	ops		5535106	0					
ANR	5535996	Identifier	i		5535106	1					
ANR	5535997	Identifier	narg		5535106	1					
ANR	5535998	CompoundStatement		133:19:4917:4917	5535106	1					
ANR	5535999	IfStatement	if ( argc - 1 != ops [ i ] . narg )		5535106	0					
ANR	5536000	Condition	argc - 1 != ops [ i ] . narg	145:7:5203:5225	5535106	0	True				
ANR	5536001	EqualityExpression	argc - 1 != ops [ i ] . narg		5535106	0		!=			
ANR	5536002	AdditiveExpression	argc - 1		5535106	0		-			
ANR	5536003	Identifier	argc		5535106	0					
ANR	5536004	PrimaryExpression	1		5535106	1					
ANR	5536005	MemberAccess	ops [ i ] . narg		5535106	1					
ANR	5536006	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5536007	Identifier	ops		5535106	0					
ANR	5536008	Identifier	i		5535106	1					
ANR	5536009	Identifier	narg		5535106	1					
ANR	5536010	CompoundStatement		134:32:4951:4951	5535106	1					
ANR	5536011	ContinueStatement	continue ;	146:4:5234:5242	5535106	0	True				
ANR	5536012	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5535106	1					
ANR	5536013	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	149:6:5259:5286	5535106	0	True				
ANR	5536014	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5535106	0					
ANR	5536015	UnaryOperator	!		5535106	0					
ANR	5536016	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5535106	1					
ANR	5536017	Callee	strcmp		5535106	0					
ANR	5536018	Identifier	strcmp		5535106	0					
ANR	5536019	ArgumentList	ops [ i ] . op		5535106	1					
ANR	5536020	Argument	ops [ i ] . op		5535106	0					
ANR	5536021	MemberAccess	ops [ i ] . op		5535106	0					
ANR	5536022	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5536023	Identifier	ops		5535106	0					
ANR	5536024	Identifier	i		5535106	1					
ANR	5536025	Identifier	op		5535106	1					
ANR	5536026	Argument	argv [ 0 ]		5535106	1					
ANR	5536027	ArrayIndexing	argv [ 0 ]		5535106	0					
ANR	5536028	Identifier	argv		5535106	0					
ANR	5536029	PrimaryExpression	0		5535106	1					
ANR	5536030	CompoundStatement		138:36:5012:5012	5535106	1					
ANR	5536031	IfStatement	if ( newstr )		5535106	0					
ANR	5536032	Condition	newstr	150:7:5298:5303	5535106	0	True				
ANR	5536033	Identifier	newstr		5535106	0					
ANR	5536034	CompoundStatement		139:15:5029:5029	5535106	1					
ANR	5536035	ExpressionStatement	d = 0	151:4:5312:5317	5535106	0	True				
ANR	5536036	AssignmentExpression	d = 0		5535106	0		=			
ANR	5536037	Identifier	d		5535106	0					
ANR	5536038	PrimaryExpression	0		5535106	1					
ANR	5536039	ExpressionStatement	j = 0	152:4:5323:5328	5535106	1	True				
ANR	5536040	AssignmentExpression	j = 0		5535106	0		=			
ANR	5536041	Identifier	j		5535106	0					
ANR	5536042	PrimaryExpression	0		5535106	1					
ANR	5536043	ExpressionStatement	ch = ops [ i ] . str [ j ]	153:4:5334:5352	5535106	2	True				
ANR	5536044	AssignmentExpression	ch = ops [ i ] . str [ j ]		5535106	0		=			
ANR	5536045	Identifier	ch		5535106	0					
ANR	5536046	ArrayIndexing	ops [ i ] . str [ j ]		5535106	1					
ANR	5536047	MemberAccess	ops [ i ] . str		5535106	0					
ANR	5536048	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5536049	Identifier	ops		5535106	0					
ANR	5536050	Identifier	i		5535106	1					
ANR	5536051	Identifier	str		5535106	1					
ANR	5536052	Identifier	j		5535106	1					
ANR	5536053	ForStatement	"for ( j = 0 , k = 0 ; ch != '\\0' ; j ++ , k ++ )"		5535106	3					
ANR	5536054	ForInit	"j = 0 , k = 0 ;"	154:9:5363:5375	5535106	0	True				
ANR	5536055	Expression	"j = 0 , k = 0"		5535106	0					
ANR	5536056	AssignmentExpression	j = 0		5535106	0		=			
ANR	5536057	Identifier	j		5535106	0					
ANR	5536058	PrimaryExpression	0		5535106	1					
ANR	5536059	AssignmentExpression	k = 0		5535106	1		=			
ANR	5536060	Identifier	k		5535106	0					
ANR	5536061	PrimaryExpression	0		5535106	1					
ANR	5536062	Condition	ch != '\\0'	154:23:5377:5386	5535106	1	True				
ANR	5536063	EqualityExpression	ch != '\\0'		5535106	0		!=			
ANR	5536064	Identifier	ch		5535106	0					
ANR	5536065	PrimaryExpression	'\\0'		5535106	1					
ANR	5536066	Expression	"j ++ , k ++"	154:35:5389:5396	5535106	2	True				
ANR	5536067	PostIncDecOperationExpression	j ++		5535106	0					
ANR	5536068	Identifier	j		5535106	0					
ANR	5536069	IncDec	++		5535106	1					
ANR	5536070	PostIncDecOperationExpression	k ++		5535106	1					
ANR	5536071	Identifier	k		5535106	0					
ANR	5536072	IncDec	++		5535106	1					
ANR	5536073	CompoundStatement		143:45:5122:5122	5535106	3					
ANR	5536074	ExpressionStatement	ch = ops [ i ] . str [ j ]	155:5:5406:5424	5535106	0	True				
ANR	5536075	AssignmentExpression	ch = ops [ i ] . str [ j ]		5535106	0		=			
ANR	5536076	Identifier	ch		5535106	0					
ANR	5536077	ArrayIndexing	ops [ i ] . str [ j ]		5535106	1					
ANR	5536078	MemberAccess	ops [ i ] . str		5535106	0					
ANR	5536079	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5536080	Identifier	ops		5535106	0					
ANR	5536081	Identifier	i		5535106	1					
ANR	5536082	Identifier	str		5535106	1					
ANR	5536083	Identifier	j		5535106	1					
ANR	5536084	IfStatement	if ( ch == '#' )		5535106	1					
ANR	5536085	Condition	ch == '#'	156:9:5435:5443	5535106	0	True				
ANR	5536086	EqualityExpression	ch == '#'		5535106	0		==			
ANR	5536087	Identifier	ch		5535106	0					
ANR	5536088	PrimaryExpression	'#'		5535106	1					
ANR	5536089	CompoundStatement		156:6:5401:5426	5535106	1					
ANR	5536090	IfStatement	if ( d >= MAXPSEUDOOPS )		5535106	0					
ANR	5536091	Condition	d >= MAXPSEUDOOPS	157:10:5458:5474	5535106	0	True				
ANR	5536092	RelationalExpression	d >= MAXPSEUDOOPS		5535106	0		>=			
ANR	5536093	Identifier	d		5535106	0					
ANR	5536094	Identifier	MAXPSEUDOOPS		5535106	1					
ANR	5536095	CompoundStatement		146:29:5200:5200	5535106	1					
ANR	5536096	ContinueStatement	continue ;	159:7:5525:5533	5535106	0	True				
ANR	5536097	IdentifierDeclStatement	int idx = ops [ i ] . args [ d ] ;	161:6:5549:5573	5535106	1	True				
ANR	5536098	IdentifierDecl	idx = ops [ i ] . args [ d ]		5535106	0					
ANR	5536099	IdentifierDeclType	int		5535106	0					
ANR	5536100	Identifier	idx		5535106	1					
ANR	5536101	AssignmentExpression	idx = ops [ i ] . args [ d ]		5535106	2		=			
ANR	5536102	Identifier	idx		5535106	0					
ANR	5536103	ArrayIndexing	ops [ i ] . args [ d ]		5535106	1					
ANR	5536104	MemberAccess	ops [ i ] . args		5535106	0					
ANR	5536105	ArrayIndexing	ops [ i ]		5535106	0					
ANR	5536106	Identifier	ops		5535106	0					
ANR	5536107	Identifier	i		5535106	1					
ANR	5536108	Identifier	args		5535106	1					
ANR	5536109	Identifier	d		5535106	1					
ANR	5536110	ExpressionStatement	d ++	162:6:5581:5584	5535106	2	True				
ANR	5536111	PostIncDecOperationExpression	d ++		5535106	0					
ANR	5536112	Identifier	d		5535106	0					
ANR	5536113	IncDec	++		5535106	1					
ANR	5536114	IfStatement	if ( idx <= 0 )		5535106	3					
ANR	5536115	Condition	idx <= 0	163:10:5596:5603	5535106	0	True				
ANR	5536116	RelationalExpression	idx <= 0		5535106	0		<=			
ANR	5536117	Identifier	idx		5535106	0					
ANR	5536118	PrimaryExpression	0		5535106	1					
ANR	5536119	CompoundStatement		152:20:5329:5329	5535106	1					
ANR	5536120	ContinueStatement	continue ;	165:7:5654:5662	5535106	0	True				
ANR	5536121	IdentifierDeclStatement	const char * w = argv [ idx ] ;	167:6:5678:5703	5535106	4	True				
ANR	5536122	IdentifierDecl	* w = argv [ idx ]		5535106	0					
ANR	5536123	IdentifierDeclType	const char *		5535106	0					
ANR	5536124	Identifier	w		5535106	1					
ANR	5536125	AssignmentExpression	* w = argv [ idx ]		5535106	2		=			
ANR	5536126	Identifier	w		5535106	0					
ANR	5536127	ArrayIndexing	argv [ idx ]		5535106	1					
ANR	5536128	Identifier	argv		5535106	0					
ANR	5536129	Identifier	idx		5535106	1					
ANR	5536130	IfStatement	if ( w )		5535106	5					
ANR	5536131	Condition	w	168:10:5715:5715	5535106	0	True				
ANR	5536132	Identifier	w		5535106	0					
ANR	5536133	CompoundStatement		157:13:5441:5441	5535106	1					
ANR	5536134	ExpressionStatement	"strcpy ( newstr + k , w )"	169:7:5727:5749	5535106	0	True				
ANR	5536135	CallExpression	"strcpy ( newstr + k , w )"		5535106	0					
ANR	5536136	Callee	strcpy		5535106	0					
ANR	5536137	Identifier	strcpy		5535106	0					
ANR	5536138	ArgumentList	newstr + k		5535106	1					
ANR	5536139	Argument	newstr + k		5535106	0					
ANR	5536140	AdditiveExpression	newstr + k		5535106	0		+			
ANR	5536141	Identifier	newstr		5535106	0					
ANR	5536142	Identifier	k		5535106	1					
ANR	5536143	Argument	w		5535106	1					
ANR	5536144	Identifier	w		5535106	0					
ANR	5536145	ExpressionStatement	k += strlen ( w ) - 1	170:7:5758:5777	5535106	1	True				
ANR	5536146	AssignmentExpression	k += strlen ( w ) - 1		5535106	0		+=			
ANR	5536147	Identifier	k		5535106	0					
ANR	5536148	AdditiveExpression	strlen ( w ) - 1		5535106	1		-			
ANR	5536149	CallExpression	strlen ( w )		5535106	0					
ANR	5536150	Callee	strlen		5535106	0					
ANR	5536151	Identifier	strlen		5535106	0					
ANR	5536152	ArgumentList	w		5535106	1					
ANR	5536153	Argument	w		5535106	0					
ANR	5536154	Identifier	w		5535106	0					
ANR	5536155	PrimaryExpression	1		5535106	1					
ANR	5536156	ElseStatement	else		5535106	0					
ANR	5536157	CompoundStatement		161:12:5522:5522	5535106	0					
ANR	5536158	ExpressionStatement	newstr [ k ] = ch	173:6:5807:5821	5535106	0	True				
ANR	5536159	AssignmentExpression	newstr [ k ] = ch		5535106	0		=			
ANR	5536160	ArrayIndexing	newstr [ k ]		5535106	0					
ANR	5536161	Identifier	newstr		5535106	0					
ANR	5536162	Identifier	k		5535106	1					
ANR	5536163	Identifier	ch		5535106	1					
ANR	5536164	ExpressionStatement	newstr [ k ] = '\\0'	176:4:5840:5856	5535106	4	True				
ANR	5536165	AssignmentExpression	newstr [ k ] = '\\0'		5535106	0		=			
ANR	5536166	ArrayIndexing	newstr [ k ]		5535106	0					
ANR	5536167	Identifier	newstr		5535106	0					
ANR	5536168	Identifier	k		5535106	1					
ANR	5536169	PrimaryExpression	'\\0'		5535106	1					
ANR	5536170	ExpressionStatement	"r_str_replace_char ( newstr , '{' , '(' )"	179:3:5867:5904	5535106	1	True				
ANR	5536171	CallExpression	"r_str_replace_char ( newstr , '{' , '(' )"		5535106	0					
ANR	5536172	Callee	r_str_replace_char		5535106	0					
ANR	5536173	Identifier	r_str_replace_char		5535106	0					
ANR	5536174	ArgumentList	newstr		5535106	1					
ANR	5536175	Argument	newstr		5535106	0					
ANR	5536176	Identifier	newstr		5535106	0					
ANR	5536177	Argument	'{'		5535106	1					
ANR	5536178	PrimaryExpression	'{'		5535106	0					
ANR	5536179	Argument	'('		5535106	2					
ANR	5536180	PrimaryExpression	'('		5535106	0					
ANR	5536181	ExpressionStatement	"r_str_replace_char ( newstr , '}' , ')' )"	180:3:5909:5946	5535106	2	True				
ANR	5536182	CallExpression	"r_str_replace_char ( newstr , '}' , ')' )"		5535106	0					
ANR	5536183	Callee	r_str_replace_char		5535106	0					
ANR	5536184	Identifier	r_str_replace_char		5535106	0					
ANR	5536185	ArgumentList	newstr		5535106	1					
ANR	5536186	Argument	newstr		5535106	0					
ANR	5536187	Identifier	newstr		5535106	0					
ANR	5536188	Argument	'}'		5535106	1					
ANR	5536189	PrimaryExpression	'}'		5535106	0					
ANR	5536190	Argument	')'		5535106	2					
ANR	5536191	PrimaryExpression	')'		5535106	0					
ANR	5536192	ReturnStatement	return true ;	181:3:5951:5962	5535106	3	True				
ANR	5536193	Identifier	true		5535106	0					
ANR	5536194	ExpressionStatement	newstr [ 0 ] = '\\0'	186:1:5999:6015	5535106	8	True				
ANR	5536195	AssignmentExpression	newstr [ 0 ] = '\\0'		5535106	0		=			
ANR	5536196	ArrayIndexing	newstr [ 0 ]		5535106	0					
ANR	5536197	Identifier	newstr		5535106	0					
ANR	5536198	PrimaryExpression	0		5535106	1					
ANR	5536199	PrimaryExpression	'\\0'		5535106	1					
ANR	5536200	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5535106	9					
ANR	5536201	ForInit	i = 0 ;	187:6:6023:6028	5535106	0	True				
ANR	5536202	AssignmentExpression	i = 0		5535106	0		=			
ANR	5536203	Identifier	i		5535106	0					
ANR	5536204	PrimaryExpression	0		5535106	1					
ANR	5536205	Condition	i < argc	187:13:6030:6037	5535106	1	True				
ANR	5536206	RelationalExpression	i < argc		5535106	0		<			
ANR	5536207	Identifier	i		5535106	0					
ANR	5536208	Identifier	argc		5535106	1					
ANR	5536209	PostIncDecOperationExpression	i ++	187:23:6040:6042	5535106	2	True				
ANR	5536210	Identifier	i		5535106	0					
ANR	5536211	IncDec	++		5535106	1					
ANR	5536212	CompoundStatement		176:28:5768:5768	5535106	3					
ANR	5536213	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	188:2:6049:6073	5535106	0	True				
ANR	5536214	CallExpression	"strcat ( newstr , argv [ i ] )"		5535106	0					
ANR	5536215	Callee	strcat		5535106	0					
ANR	5536216	Identifier	strcat		5535106	0					
ANR	5536217	ArgumentList	newstr		5535106	1					
ANR	5536218	Argument	newstr		5535106	0					
ANR	5536219	Identifier	newstr		5535106	0					
ANR	5536220	Argument	argv [ i ]		5535106	1					
ANR	5536221	ArrayIndexing	argv [ i ]		5535106	0					
ANR	5536222	Identifier	argv		5535106	0					
ANR	5536223	Identifier	i		5535106	1					
ANR	5536224	ExpressionStatement	"strcat ( newstr , ( ! i || i == argc - 1 ) ? "" "" : "","" )"	189:2:6077:6126	5535106	1	True				
ANR	5536225	CallExpression	"strcat ( newstr , ( ! i || i == argc - 1 ) ? "" "" : "","" )"		5535106	0					
ANR	5536226	Callee	strcat		5535106	0					
ANR	5536227	Identifier	strcat		5535106	0					
ANR	5536228	ArgumentList	newstr		5535106	1					
ANR	5536229	Argument	newstr		5535106	0					
ANR	5536230	Identifier	newstr		5535106	0					
ANR	5536231	Argument	"( ! i || i == argc - 1 ) ? "" "" : "","""		5535106	1					
ANR	5536232	ConditionalExpression	"( ! i || i == argc - 1 ) ? "" "" : "","""		5535106	0					
ANR	5536233	Condition	! i || i == argc - 1		5535106	0					
ANR	5536234	OrExpression	! i || i == argc - 1		5535106	0		||			
ANR	5536235	UnaryOperationExpression	! i		5535106	0					
ANR	5536236	UnaryOperator	!		5535106	0					
ANR	5536237	Identifier	i		5535106	1					
ANR	5536238	EqualityExpression	i == argc - 1		5535106	1		==			
ANR	5536239	Identifier	i		5535106	0					
ANR	5536240	AdditiveExpression	argc - 1		5535106	1		-			
ANR	5536241	Identifier	argc		5535106	0					
ANR	5536242	PrimaryExpression	1		5535106	1					
ANR	5536243	PrimaryExpression	""" """		5535106	1					
ANR	5536244	PrimaryExpression	""","""		5535106	2					
ANR	5536245	ExpressionStatement	"r_str_replace_char ( newstr , '{' , '(' )"	191:1:6132:6169	5535106	10	True				
ANR	5536246	CallExpression	"r_str_replace_char ( newstr , '{' , '(' )"		5535106	0					
ANR	5536247	Callee	r_str_replace_char		5535106	0					
ANR	5536248	Identifier	r_str_replace_char		5535106	0					
ANR	5536249	ArgumentList	newstr		5535106	1					
ANR	5536250	Argument	newstr		5535106	0					
ANR	5536251	Identifier	newstr		5535106	0					
ANR	5536252	Argument	'{'		5535106	1					
ANR	5536253	PrimaryExpression	'{'		5535106	0					
ANR	5536254	Argument	'('		5535106	2					
ANR	5536255	PrimaryExpression	'('		5535106	0					
ANR	5536256	ExpressionStatement	"r_str_replace_char ( newstr , '}' , ')' )"	192:1:6172:6209	5535106	11	True				
ANR	5536257	CallExpression	"r_str_replace_char ( newstr , '}' , ')' )"		5535106	0					
ANR	5536258	Callee	r_str_replace_char		5535106	0					
ANR	5536259	Identifier	r_str_replace_char		5535106	0					
ANR	5536260	ArgumentList	newstr		5535106	1					
ANR	5536261	Argument	newstr		5535106	0					
ANR	5536262	Identifier	newstr		5535106	0					
ANR	5536263	Argument	'}'		5535106	1					
ANR	5536264	PrimaryExpression	'}'		5535106	0					
ANR	5536265	Argument	')'		5535106	2					
ANR	5536266	PrimaryExpression	')'		5535106	0					
ANR	5536267	ReturnStatement	return false ;	193:1:6212:6224	5535106	12	True				
ANR	5536268	Identifier	false		5535106	0					
ANR	5536269	ReturnType	static int		5535106	1					
ANR	5536270	Identifier	replace		5535106	2					
ANR	5536271	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5535106	3					
ANR	5536272	Parameter	int argc	12:19:232:239	5535106	0	True				
ANR	5536273	ParameterType	int		5535106	0					
ANR	5536274	Identifier	argc		5535106	1					
ANR	5536275	Parameter	const char * argv [ ]	12:29:242:259	5535106	1	True				
ANR	5536276	ParameterType	const char * [ ]		5535106	0					
ANR	5536277	Identifier	argv		5535106	1					
ANR	5536278	Parameter	char * newstr	12:49:262:273	5535106	2	True				
ANR	5536279	ParameterType	char *		5535106	0					
ANR	5536280	Identifier	newstr		5535106	1					
ANR	5536281	CFGEntryNode	ENTRY		5535106		True				
ANR	5536282	CFGExitNode	EXIT		5535106		True				
ANR	5536283	Symbol	* ops [ i ] . str		5535106						
ANR	5536284	Symbol	* * ops		5535106						
ANR	5536285	Symbol	* argv		5535106						
ANR	5536286	Symbol	* ops [ i ] . args		5535106						
ANR	5536287	Symbol	argv		5535106						
ANR	5536288	Symbol	ops [ i ] . str		5535106						
ANR	5536289	Symbol	strlen		5535106						
ANR	5536290	Symbol	ops [ i ] . narg		5535106						
ANR	5536291	Symbol	ops [ i ] . op		5535106						
ANR	5536292	Symbol	* idx		5535106						
ANR	5536293	Symbol	* ops		5535106						
ANR	5536294	Symbol	argc		5535106						
ANR	5536295	Symbol	strcmp		5535106						
ANR	5536296	Symbol	* * i		5535106						
ANR	5536297	Symbol	NULL		5535106						
ANR	5536298	Symbol	d		5535106						
ANR	5536299	Symbol	ch		5535106						
ANR	5536300	Symbol	false		5535106						
ANR	5536301	Symbol	i		5535106						
ANR	5536302	Symbol	j		5535106						
ANR	5536303	Symbol	k		5535106						
ANR	5536304	Symbol	newstr		5535106						
ANR	5536305	Symbol	* d		5535106						
ANR	5536306	Symbol	MAXPSEUDOOPS		5535106						
ANR	5536307	Symbol	ops [ i ] . args		5535106						
ANR	5536308	Symbol	ops		5535106						
ANR	5536309	Symbol	* i		5535106						
ANR	5536310	Symbol	* newstr		5535106						
ANR	5536311	Symbol	* j		5535106						
ANR	5536312	Symbol	* k		5535106						
ANR	5536313	Symbol	w		5535106						
ANR	5536314	Symbol	true		5535106						
ANR	5536315	Symbol	idx		5535106						
ANR	5536316	Function	parse	196:0:6229:7872							
ANR	5536317	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5536316	0					
ANR	5536318	CompoundStatement		196:57:6286:7872	5536316	0					
ANR	5536319	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] , w3 [ 256 ] ;"	197:1:6289:6328	5536316	0	True				
ANR	5536320	IdentifierDecl	w0 [ 256 ]		5536316	0					
ANR	5536321	IdentifierDeclType	char [ 256 ]		5536316	0					
ANR	5536322	Identifier	w0		5536316	1					
ANR	5536323	PrimaryExpression	256		5536316	2					
ANR	5536324	IdentifierDecl	w1 [ 256 ]		5536316	1					
ANR	5536325	IdentifierDeclType	char [ 256 ]		5536316	0					
ANR	5536326	Identifier	w1		5536316	1					
ANR	5536327	PrimaryExpression	256		5536316	2					
ANR	5536328	IdentifierDecl	w2 [ 256 ]		5536316	2					
ANR	5536329	IdentifierDeclType	char [ 256 ]		5536316	0					
ANR	5536330	Identifier	w2		5536316	1					
ANR	5536331	PrimaryExpression	256		5536316	2					
ANR	5536332	IdentifierDecl	w3 [ 256 ]		5536316	3					
ANR	5536333	IdentifierDeclType	char [ 256 ]		5536316	0					
ANR	5536334	Identifier	w3		5536316	1					
ANR	5536335	PrimaryExpression	256		5536316	2					
ANR	5536336	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	198:1:6331:6357	5536316	1	True				
ANR	5536337	IdentifierDecl	i		5536316	0					
ANR	5536338	IdentifierDeclType	int		5536316	0					
ANR	5536339	Identifier	i		5536316	1					
ANR	5536340	IdentifierDecl	len = strlen ( data )		5536316	1					
ANR	5536341	IdentifierDeclType	int		5536316	0					
ANR	5536342	Identifier	len		5536316	1					
ANR	5536343	AssignmentExpression	len = strlen ( data )		5536316	2		=			
ANR	5536344	Identifier	len		5536316	0					
ANR	5536345	CallExpression	strlen ( data )		5536316	1					
ANR	5536346	Callee	strlen		5536316	0					
ANR	5536347	Identifier	strlen		5536316	0					
ANR	5536348	ArgumentList	data		5536316	1					
ANR	5536349	Argument	data		5536316	0					
ANR	5536350	Identifier	data		5536316	0					
ANR	5536351	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	199:1:6360:6382	5536316	2	True				
ANR	5536352	IdentifierDecl	* buf		5536316	0					
ANR	5536353	IdentifierDeclType	char *		5536316	0					
ANR	5536354	Identifier	buf		5536316	1					
ANR	5536355	IdentifierDecl	* ptr		5536316	1					
ANR	5536356	IdentifierDeclType	char *		5536316	0					
ANR	5536357	Identifier	ptr		5536316	1					
ANR	5536358	IdentifierDecl	* optr		5536316	2					
ANR	5536359	IdentifierDeclType	char *		5536316	0					
ANR	5536360	Identifier	optr		5536316	1					
ANR	5536361	IfStatement	if ( len >= sizeof ( w0 ) )		5536316	3					
ANR	5536362	Condition	len >= sizeof ( w0 )	201:5:6390:6407	5536316	0	True				
ANR	5536363	RelationalExpression	len >= sizeof ( w0 )		5536316	0		>=			
ANR	5536364	Identifier	len		5536316	0					
ANR	5536365	SizeofExpression	sizeof ( w0 )		5536316	1					
ANR	5536366	Sizeof	sizeof		5536316	0					
ANR	5536367	SizeofOperand	w0		5536316	1					
ANR	5536368	CompoundStatement		6:25:123:123	5536316	1					
ANR	5536369	ReturnStatement	return false ;	202:2:6414:6426	5536316	0	True				
ANR	5536370	Identifier	false		5536316	0					
ANR	5536371	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5536316	4					
ANR	5536372	Condition	! ( buf = malloc ( len + 1 ) )	205:5:6467:6491	5536316	0	True				
ANR	5536373	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5536316	0					
ANR	5536374	UnaryOperator	!		5536316	0					
ANR	5536375	AssignmentExpression	buf = malloc ( len + 1 )		5536316	1		=			
ANR	5536376	Identifier	buf		5536316	0					
ANR	5536377	CallExpression	malloc ( len + 1 )		5536316	1					
ANR	5536378	Callee	malloc		5536316	0					
ANR	5536379	Identifier	malloc		5536316	0					
ANR	5536380	ArgumentList	len + 1		5536316	1					
ANR	5536381	Argument	len + 1		5536316	0					
ANR	5536382	AdditiveExpression	len + 1		5536316	0		+			
ANR	5536383	Identifier	len		5536316	0					
ANR	5536384	PrimaryExpression	1		5536316	1					
ANR	5536385	CompoundStatement		10:32:207:207	5536316	1					
ANR	5536386	ReturnStatement	return false ;	206:2:6498:6510	5536316	0	True				
ANR	5536387	Identifier	false		5536316	0					
ANR	5536388	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	208:1:6516:6543	5536316	5	True				
ANR	5536389	CallExpression	"memcpy ( buf , data , len + 1 )"		5536316	0					
ANR	5536390	Callee	memcpy		5536316	0					
ANR	5536391	Identifier	memcpy		5536316	0					
ANR	5536392	ArgumentList	buf		5536316	1					
ANR	5536393	Argument	buf		5536316	0					
ANR	5536394	Identifier	buf		5536316	0					
ANR	5536395	Argument	data		5536316	1					
ANR	5536396	Identifier	data		5536316	0					
ANR	5536397	Argument	len + 1		5536316	2					
ANR	5536398	AdditiveExpression	len + 1		5536316	0		+			
ANR	5536399	Identifier	len		5536316	0					
ANR	5536400	PrimaryExpression	1		5536316	1					
ANR	5536401	IfStatement	if ( * buf )		5536316	6					
ANR	5536402	Condition	* buf	209:5:6550:6553	5536316	0	True				
ANR	5536403	UnaryOperationExpression	* buf		5536316	0					
ANR	5536404	UnaryOperator	*		5536316	0					
ANR	5536405	Identifier	buf		5536316	1					
ANR	5536406	CompoundStatement		14:11:269:269	5536316	1					
ANR	5536407	ExpressionStatement	* w0 = * w1 = * w2 = * w3 = '\\0'	210:2:6560:6588	5536316	0	True				
ANR	5536408	AssignmentExpression	* w0 = * w1 = * w2 = * w3 = '\\0'		5536316	0		=			
ANR	5536409	UnaryOperationExpression	* w0		5536316	0					
ANR	5536410	UnaryOperator	*		5536316	0					
ANR	5536411	Identifier	w0		5536316	1					
ANR	5536412	AssignmentExpression	* w1 = * w2 = * w3 = '\\0'		5536316	1		=			
ANR	5536413	UnaryOperationExpression	* w1		5536316	0					
ANR	5536414	UnaryOperator	*		5536316	0					
ANR	5536415	Identifier	w1		5536316	1					
ANR	5536416	AssignmentExpression	* w2 = * w3 = '\\0'		5536316	1		=			
ANR	5536417	UnaryOperationExpression	* w2		5536316	0					
ANR	5536418	UnaryOperator	*		5536316	0					
ANR	5536419	Identifier	w2		5536316	1					
ANR	5536420	AssignmentExpression	* w3 = '\\0'		5536316	1		=			
ANR	5536421	UnaryOperationExpression	* w3		5536316	0					
ANR	5536422	UnaryOperator	*		5536316	0					
ANR	5536423	Identifier	w3		5536316	1					
ANR	5536424	PrimaryExpression	'\\0'		5536316	1					
ANR	5536425	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	211:2:6592:6615	5536316	1	True				
ANR	5536426	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5536316	0		=			
ANR	5536427	Identifier	ptr		5536316	0					
ANR	5536428	CallExpression	"strchr ( buf , ' ' )"		5536316	1					
ANR	5536429	Callee	strchr		5536316	0					
ANR	5536430	Identifier	strchr		5536316	0					
ANR	5536431	ArgumentList	buf		5536316	1					
ANR	5536432	Argument	buf		5536316	0					
ANR	5536433	Identifier	buf		5536316	0					
ANR	5536434	Argument	' '		5536316	1					
ANR	5536435	PrimaryExpression	' '		5536316	0					
ANR	5536436	IfStatement	if ( ! ptr )		5536316	2					
ANR	5536437	Condition	! ptr	212:6:6623:6626	5536316	0	True				
ANR	5536438	UnaryOperationExpression	! ptr		5536316	0					
ANR	5536439	UnaryOperator	!		5536316	0					
ANR	5536440	Identifier	ptr		5536316	1					
ANR	5536441	CompoundStatement		17:12:342:342	5536316	1					
ANR	5536442	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	213:3:6634:6658	5536316	0	True				
ANR	5536443	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5536316	0		=			
ANR	5536444	Identifier	ptr		5536316	0					
ANR	5536445	CallExpression	"strchr ( buf , '\\t' )"		5536316	1					
ANR	5536446	Callee	strchr		5536316	0					
ANR	5536447	Identifier	strchr		5536316	0					
ANR	5536448	ArgumentList	buf		5536316	1					
ANR	5536449	Argument	buf		5536316	0					
ANR	5536450	Identifier	buf		5536316	0					
ANR	5536451	Argument	'\\t'		5536316	1					
ANR	5536452	PrimaryExpression	'\\t'		5536316	0					
ANR	5536453	IfStatement	if ( ptr )		5536316	3					
ANR	5536454	Condition	ptr	215:6:6670:6672	5536316	0	True				
ANR	5536455	Identifier	ptr		5536316	0					
ANR	5536456	CompoundStatement		20:11:388:388	5536316	1					
ANR	5536457	ExpressionStatement	* ptr = '\\0'	216:3:6680:6691	5536316	0	True				
ANR	5536458	AssignmentExpression	* ptr = '\\0'		5536316	0		=			
ANR	5536459	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536460	UnaryOperator	*		5536316	0					
ANR	5536461	Identifier	ptr		5536316	1					
ANR	5536462	PrimaryExpression	'\\0'		5536316	1					
ANR	5536463	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5536316	1					
ANR	5536464	ForInit	++ ptr ;	217:8:6701:6706	5536316	0	True				
ANR	5536465	UnaryExpression	++ ptr		5536316	0					
ANR	5536466	IncDec	++		5536316	0					
ANR	5536467	Identifier	ptr		5536316	1					
ANR	5536468	Condition	* ptr == ' '	217:15:6708:6718	5536316	1	True				
ANR	5536469	EqualityExpression	* ptr == ' '		5536316	0		==			
ANR	5536470	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536471	UnaryOperator	*		5536316	0					
ANR	5536472	Identifier	ptr		5536316	1					
ANR	5536473	PrimaryExpression	' '		5536316	1					
ANR	5536474	PostIncDecOperationExpression	ptr ++	217:28:6721:6725	5536316	2	True				
ANR	5536475	Identifier	ptr		5536316	0					
ANR	5536476	IncDec	++		5536316	1					
ANR	5536477	CompoundStatement		22:35:441:441	5536316	3					
ANR	5536478	ExpressionStatement		218:4:6734:6734	5536316	0	True				
ANR	5536479	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	220:3:6744:6778	5536316	2	True				
ANR	5536480	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5536316	0					
ANR	5536481	Callee	strncpy		5536316	0					
ANR	5536482	Identifier	strncpy		5536316	0					
ANR	5536483	ArgumentList	w0		5536316	1					
ANR	5536484	Argument	w0		5536316	0					
ANR	5536485	Identifier	w0		5536316	0					
ANR	5536486	Argument	buf		5536316	1					
ANR	5536487	Identifier	buf		5536316	0					
ANR	5536488	Argument	sizeof ( w0 ) - 1		5536316	2					
ANR	5536489	AdditiveExpression	sizeof ( w0 ) - 1		5536316	0		-			
ANR	5536490	SizeofExpression	sizeof ( w0 )		5536316	0					
ANR	5536491	Sizeof	sizeof		5536316	0					
ANR	5536492	SizeofOperand	w0		5536316	1					
ANR	5536493	PrimaryExpression	1		5536316	1					
ANR	5536494	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	221:3:6783:6817	5536316	3	True				
ANR	5536495	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5536316	0					
ANR	5536496	Callee	strncpy		5536316	0					
ANR	5536497	Identifier	strncpy		5536316	0					
ANR	5536498	ArgumentList	w1		5536316	1					
ANR	5536499	Argument	w1		5536316	0					
ANR	5536500	Identifier	w1		5536316	0					
ANR	5536501	Argument	ptr		5536316	1					
ANR	5536502	Identifier	ptr		5536316	0					
ANR	5536503	Argument	sizeof ( w1 ) - 1		5536316	2					
ANR	5536504	AdditiveExpression	sizeof ( w1 ) - 1		5536316	0		-			
ANR	5536505	SizeofExpression	sizeof ( w1 )		5536316	0					
ANR	5536506	Sizeof	sizeof		5536316	0					
ANR	5536507	SizeofOperand	w1		5536316	1					
ANR	5536508	PrimaryExpression	1		5536316	1					
ANR	5536509	ExpressionStatement	optr = ptr	223:3:6823:6833	5536316	4	True				
ANR	5536510	AssignmentExpression	optr = ptr		5536316	0		=			
ANR	5536511	Identifier	optr		5536316	0					
ANR	5536512	Identifier	ptr		5536316	1					
ANR	5536513	IfStatement	if ( * ptr == '(' )		5536316	5					
ANR	5536514	Condition	* ptr == '('	224:7:6842:6852	5536316	0	True				
ANR	5536515	EqualityExpression	* ptr == '('		5536316	0		==			
ANR	5536516	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536517	UnaryOperator	*		5536316	0					
ANR	5536518	Identifier	ptr		5536316	1					
ANR	5536519	PrimaryExpression	'('		5536316	1					
ANR	5536520	CompoundStatement		29:20:568:568	5536316	1					
ANR	5536521	ExpressionStatement	"ptr = strchr ( ptr + 1 , ')' )"	225:4:6861:6886	5536316	0	True				
ANR	5536522	AssignmentExpression	"ptr = strchr ( ptr + 1 , ')' )"		5536316	0		=			
ANR	5536523	Identifier	ptr		5536316	0					
ANR	5536524	CallExpression	"strchr ( ptr + 1 , ')' )"		5536316	1					
ANR	5536525	Callee	strchr		5536316	0					
ANR	5536526	Identifier	strchr		5536316	0					
ANR	5536527	ArgumentList	ptr + 1		5536316	1					
ANR	5536528	Argument	ptr + 1		5536316	0					
ANR	5536529	AdditiveExpression	ptr + 1		5536316	0		+			
ANR	5536530	Identifier	ptr		5536316	0					
ANR	5536531	PrimaryExpression	1		5536316	1					
ANR	5536532	Argument	')'		5536316	1					
ANR	5536533	PrimaryExpression	')'		5536316	0					
ANR	5536534	IfStatement	if ( ptr && * ptr == '[' )		5536316	6					
ANR	5536535	Condition	ptr && * ptr == '['	227:7:6900:6917	5536316	0	True				
ANR	5536536	AndExpression	ptr && * ptr == '['		5536316	0		&&			
ANR	5536537	Identifier	ptr		5536316	0					
ANR	5536538	EqualityExpression	* ptr == '['		5536316	1		==			
ANR	5536539	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536540	UnaryOperator	*		5536316	0					
ANR	5536541	Identifier	ptr		5536316	1					
ANR	5536542	PrimaryExpression	'['		5536316	1					
ANR	5536543	CompoundStatement		32:27:633:633	5536316	1					
ANR	5536544	ExpressionStatement	"ptr = strchr ( ptr + 1 , ']' )"	228:4:6926:6951	5536316	0	True				
ANR	5536545	AssignmentExpression	"ptr = strchr ( ptr + 1 , ']' )"		5536316	0		=			
ANR	5536546	Identifier	ptr		5536316	0					
ANR	5536547	CallExpression	"strchr ( ptr + 1 , ']' )"		5536316	1					
ANR	5536548	Callee	strchr		5536316	0					
ANR	5536549	Identifier	strchr		5536316	0					
ANR	5536550	ArgumentList	ptr + 1		5536316	1					
ANR	5536551	Argument	ptr + 1		5536316	0					
ANR	5536552	AdditiveExpression	ptr + 1		5536316	0		+			
ANR	5536553	Identifier	ptr		5536316	0					
ANR	5536554	PrimaryExpression	1		5536316	1					
ANR	5536555	Argument	']'		5536316	1					
ANR	5536556	PrimaryExpression	']'		5536316	0					
ANR	5536557	IfStatement	if ( ptr && * ptr == '{' )		5536316	7					
ANR	5536558	Condition	ptr && * ptr == '{'	230:7:6965:6982	5536316	0	True				
ANR	5536559	AndExpression	ptr && * ptr == '{'		5536316	0		&&			
ANR	5536560	Identifier	ptr		5536316	0					
ANR	5536561	EqualityExpression	* ptr == '{'		5536316	1		==			
ANR	5536562	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536563	UnaryOperator	*		5536316	0					
ANR	5536564	Identifier	ptr		5536316	1					
ANR	5536565	PrimaryExpression	'{'		5536316	1					
ANR	5536566	CompoundStatement		35:27:698:698	5536316	1					
ANR	5536567	ExpressionStatement	"ptr = strchr ( ptr + 1 , '}' )"	231:4:6991:7016	5536316	0	True				
ANR	5536568	AssignmentExpression	"ptr = strchr ( ptr + 1 , '}' )"		5536316	0		=			
ANR	5536569	Identifier	ptr		5536316	0					
ANR	5536570	CallExpression	"strchr ( ptr + 1 , '}' )"		5536316	1					
ANR	5536571	Callee	strchr		5536316	0					
ANR	5536572	Identifier	strchr		5536316	0					
ANR	5536573	ArgumentList	ptr + 1		5536316	1					
ANR	5536574	Argument	ptr + 1		5536316	0					
ANR	5536575	AdditiveExpression	ptr + 1		5536316	0		+			
ANR	5536576	Identifier	ptr		5536316	0					
ANR	5536577	PrimaryExpression	1		5536316	1					
ANR	5536578	Argument	'}'		5536316	1					
ANR	5536579	PrimaryExpression	'}'		5536316	0					
ANR	5536580	IfStatement	if ( ! ptr )		5536316	8					
ANR	5536581	Condition	! ptr	233:7:7030:7033	5536316	0	True				
ANR	5536582	UnaryOperationExpression	! ptr		5536316	0					
ANR	5536583	UnaryOperator	!		5536316	0					
ANR	5536584	Identifier	ptr		5536316	1					
ANR	5536585	CompoundStatement		38:13:749:749	5536316	1					
ANR	5536586	ExpressionStatement	"eprintf ( ""Unbalanced bracket\\n"" )"	234:4:7042:7074	5536316	0	True				
ANR	5536587	CallExpression	"eprintf ( ""Unbalanced bracket\\n"" )"		5536316	0					
ANR	5536588	Callee	eprintf		5536316	0					
ANR	5536589	Identifier	eprintf		5536316	0					
ANR	5536590	ArgumentList	"""Unbalanced bracket\\n"""		5536316	1					
ANR	5536591	Argument	"""Unbalanced bracket\\n"""		5536316	0					
ANR	5536592	PrimaryExpression	"""Unbalanced bracket\\n"""		5536316	0					
ANR	5536593	ExpressionStatement	free ( buf )	235:4:7080:7089	5536316	1	True				
ANR	5536594	CallExpression	free ( buf )		5536316	0					
ANR	5536595	Callee	free		5536316	0					
ANR	5536596	Identifier	free		5536316	0					
ANR	5536597	ArgumentList	buf		5536316	1					
ANR	5536598	Argument	buf		5536316	0					
ANR	5536599	Identifier	buf		5536316	0					
ANR	5536600	ReturnStatement	return false ;	236:4:7095:7107	5536316	2	True				
ANR	5536601	Identifier	false		5536316	0					
ANR	5536602	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	238:3:7117:7140	5536316	9	True				
ANR	5536603	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5536316	0		=			
ANR	5536604	Identifier	ptr		5536316	0					
ANR	5536605	CallExpression	"strchr ( ptr , ',' )"		5536316	1					
ANR	5536606	Callee	strchr		5536316	0					
ANR	5536607	Identifier	strchr		5536316	0					
ANR	5536608	ArgumentList	ptr		5536316	1					
ANR	5536609	Argument	ptr		5536316	0					
ANR	5536610	Identifier	ptr		5536316	0					
ANR	5536611	Argument	"','"		5536316	1					
ANR	5536612	PrimaryExpression	"','"		5536316	0					
ANR	5536613	IfStatement	if ( ptr )		5536316	10					
ANR	5536614	Condition	ptr	239:7:7149:7151	5536316	0	True				
ANR	5536615	Identifier	ptr		5536316	0					
ANR	5536616	CompoundStatement		44:12:867:867	5536316	1					
ANR	5536617	ExpressionStatement	* ptr = '\\0'	240:4:7160:7171	5536316	0	True				
ANR	5536618	AssignmentExpression	* ptr = '\\0'		5536316	0		=			
ANR	5536619	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536620	UnaryOperator	*		5536316	0					
ANR	5536621	Identifier	ptr		5536316	1					
ANR	5536622	PrimaryExpression	'\\0'		5536316	1					
ANR	5536623	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5536316	1					
ANR	5536624	ForInit	++ ptr ;	241:9:7182:7187	5536316	0	True				
ANR	5536625	UnaryExpression	++ ptr		5536316	0					
ANR	5536626	IncDec	++		5536316	0					
ANR	5536627	Identifier	ptr		5536316	1					
ANR	5536628	Condition	* ptr == ' '	241:16:7189:7199	5536316	1	True				
ANR	5536629	EqualityExpression	* ptr == ' '		5536316	0		==			
ANR	5536630	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536631	UnaryOperator	*		5536316	0					
ANR	5536632	Identifier	ptr		5536316	1					
ANR	5536633	PrimaryExpression	' '		5536316	1					
ANR	5536634	PostIncDecOperationExpression	ptr ++	241:29:7202:7206	5536316	2	True				
ANR	5536635	Identifier	ptr		5536316	0					
ANR	5536636	IncDec	++		5536316	1					
ANR	5536637	CompoundStatement		46:36:922:922	5536316	3					
ANR	5536638	ExpressionStatement		242:5:7216:7216	5536316	0	True				
ANR	5536639	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	244:4:7228:7263	5536316	2	True				
ANR	5536640	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5536316	0					
ANR	5536641	Callee	strncpy		5536316	0					
ANR	5536642	Identifier	strncpy		5536316	0					
ANR	5536643	ArgumentList	w1		5536316	1					
ANR	5536644	Argument	w1		5536316	0					
ANR	5536645	Identifier	w1		5536316	0					
ANR	5536646	Argument	optr		5536316	1					
ANR	5536647	Identifier	optr		5536316	0					
ANR	5536648	Argument	sizeof ( w1 ) - 1		5536316	2					
ANR	5536649	AdditiveExpression	sizeof ( w1 ) - 1		5536316	0		-			
ANR	5536650	SizeofExpression	sizeof ( w1 )		5536316	0					
ANR	5536651	Sizeof	sizeof		5536316	0					
ANR	5536652	SizeofOperand	w1		5536316	1					
ANR	5536653	PrimaryExpression	1		5536316	1					
ANR	5536654	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	245:4:7269:7303	5536316	3	True				
ANR	5536655	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5536316	0					
ANR	5536656	Callee	strncpy		5536316	0					
ANR	5536657	Identifier	strncpy		5536316	0					
ANR	5536658	ArgumentList	w2		5536316	1					
ANR	5536659	Argument	w2		5536316	0					
ANR	5536660	Identifier	w2		5536316	0					
ANR	5536661	Argument	ptr		5536316	1					
ANR	5536662	Identifier	ptr		5536316	0					
ANR	5536663	Argument	sizeof ( w2 ) - 1		5536316	2					
ANR	5536664	AdditiveExpression	sizeof ( w2 ) - 1		5536316	0		-			
ANR	5536665	SizeofExpression	sizeof ( w2 )		5536316	0					
ANR	5536666	Sizeof	sizeof		5536316	0					
ANR	5536667	SizeofOperand	w2		5536316	1					
ANR	5536668	PrimaryExpression	1		5536316	1					
ANR	5536669	ExpressionStatement	optr = ptr	246:4:7309:7319	5536316	4	True				
ANR	5536670	AssignmentExpression	optr = ptr		5536316	0		=			
ANR	5536671	Identifier	optr		5536316	0					
ANR	5536672	Identifier	ptr		5536316	1					
ANR	5536673	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	247:4:7325:7348	5536316	5	True				
ANR	5536674	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5536316	0		=			
ANR	5536675	Identifier	ptr		5536316	0					
ANR	5536676	CallExpression	"strchr ( ptr , ',' )"		5536316	1					
ANR	5536677	Callee	strchr		5536316	0					
ANR	5536678	Identifier	strchr		5536316	0					
ANR	5536679	ArgumentList	ptr		5536316	1					
ANR	5536680	Argument	ptr		5536316	0					
ANR	5536681	Identifier	ptr		5536316	0					
ANR	5536682	Argument	"','"		5536316	1					
ANR	5536683	PrimaryExpression	"','"		5536316	0					
ANR	5536684	IfStatement	if ( ptr )		5536316	6					
ANR	5536685	Condition	ptr	248:8:7358:7360	5536316	0	True				
ANR	5536686	Identifier	ptr		5536316	0					
ANR	5536687	CompoundStatement		53:13:1076:1076	5536316	1					
ANR	5536688	ExpressionStatement	* ptr = '\\0'	249:5:7370:7381	5536316	0	True				
ANR	5536689	AssignmentExpression	* ptr = '\\0'		5536316	0		=			
ANR	5536690	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536691	UnaryOperator	*		5536316	0					
ANR	5536692	Identifier	ptr		5536316	1					
ANR	5536693	PrimaryExpression	'\\0'		5536316	1					
ANR	5536694	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5536316	1					
ANR	5536695	ForInit	++ ptr ;	250:10:7393:7398	5536316	0	True				
ANR	5536696	UnaryExpression	++ ptr		5536316	0					
ANR	5536697	IncDec	++		5536316	0					
ANR	5536698	Identifier	ptr		5536316	1					
ANR	5536699	Condition	* ptr == ' '	250:17:7400:7410	5536316	1	True				
ANR	5536700	EqualityExpression	* ptr == ' '		5536316	0		==			
ANR	5536701	UnaryOperationExpression	* ptr		5536316	0					
ANR	5536702	UnaryOperator	*		5536316	0					
ANR	5536703	Identifier	ptr		5536316	1					
ANR	5536704	PrimaryExpression	' '		5536316	1					
ANR	5536705	PostIncDecOperationExpression	ptr ++	250:30:7413:7417	5536316	2	True				
ANR	5536706	Identifier	ptr		5536316	0					
ANR	5536707	IncDec	++		5536316	1					
ANR	5536708	CompoundStatement		55:37:1133:1133	5536316	3					
ANR	5536709	ExpressionStatement		251:6:7428:7428	5536316	0	True				
ANR	5536710	ExpressionStatement	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"	253:5:7442:7477	5536316	2	True				
ANR	5536711	CallExpression	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"		5536316	0					
ANR	5536712	Callee	strncpy		5536316	0					
ANR	5536713	Identifier	strncpy		5536316	0					
ANR	5536714	ArgumentList	w2		5536316	1					
ANR	5536715	Argument	w2		5536316	0					
ANR	5536716	Identifier	w2		5536316	0					
ANR	5536717	Argument	optr		5536316	1					
ANR	5536718	Identifier	optr		5536316	0					
ANR	5536719	Argument	sizeof ( w2 ) - 1		5536316	2					
ANR	5536720	AdditiveExpression	sizeof ( w2 ) - 1		5536316	0		-			
ANR	5536721	SizeofExpression	sizeof ( w2 )		5536316	0					
ANR	5536722	Sizeof	sizeof		5536316	0					
ANR	5536723	SizeofOperand	w2		5536316	1					
ANR	5536724	PrimaryExpression	1		5536316	1					
ANR	5536725	ExpressionStatement	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"	254:5:7484:7518	5536316	3	True				
ANR	5536726	CallExpression	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"		5536316	0					
ANR	5536727	Callee	strncpy		5536316	0					
ANR	5536728	Identifier	strncpy		5536316	0					
ANR	5536729	ArgumentList	w3		5536316	1					
ANR	5536730	Argument	w3		5536316	0					
ANR	5536731	Identifier	w3		5536316	0					
ANR	5536732	Argument	ptr		5536316	1					
ANR	5536733	Identifier	ptr		5536316	0					
ANR	5536734	Argument	sizeof ( w3 ) - 1		5536316	2					
ANR	5536735	AdditiveExpression	sizeof ( w3 ) - 1		5536316	0		-			
ANR	5536736	SizeofExpression	sizeof ( w3 )		5536316	0					
ANR	5536737	Sizeof	sizeof		5536316	0					
ANR	5536738	SizeofOperand	w3		5536316	1					
ANR	5536739	PrimaryExpression	1		5536316	1					
ANR	5536740	CompoundStatement		65:3:1297:1307	5536316	4					
ANR	5536741	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 } ;"	259:3:7542:7579	5536316	0	True				
ANR	5536742	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5536316	0					
ANR	5536743	IdentifierDeclType	const char * [ ]		5536316	0					
ANR	5536744	Identifier	wa		5536316	1					
ANR	5536745	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 }"		5536316	2		=			
ANR	5536746	Identifier	wa		5536316	0					
ANR	5536747	InitializerList	w0		5536316	1					
ANR	5536748	Identifier	w0		5536316	0					
ANR	5536749	Identifier	w1		5536316	1					
ANR	5536750	Identifier	w2		5536316	2					
ANR	5536751	Identifier	w3		5536316	3					
ANR	5536752	IdentifierDeclStatement	int nw = 0 ;	260:3:7584:7594	5536316	1	True				
ANR	5536753	IdentifierDecl	nw = 0		5536316	0					
ANR	5536754	IdentifierDeclType	int		5536316	0					
ANR	5536755	Identifier	nw		5536316	1					
ANR	5536756	AssignmentExpression	nw = 0		5536316	2		=			
ANR	5536757	Identifier	nw		5536316	0					
ANR	5536758	PrimaryExpression	0		5536316	1					
ANR	5536759	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5536316	2					
ANR	5536760	ForInit	i = 0 ;	261:8:7604:7609	5536316	0	True				
ANR	5536761	AssignmentExpression	i = 0		5536316	0		=			
ANR	5536762	Identifier	i		5536316	0					
ANR	5536763	PrimaryExpression	0		5536316	1					
ANR	5536764	Condition	i < 4	261:15:7611:7615	5536316	1	True				
ANR	5536765	RelationalExpression	i < 4		5536316	0		<			
ANR	5536766	Identifier	i		5536316	0					
ANR	5536767	PrimaryExpression	4		5536316	1					
ANR	5536768	PostIncDecOperationExpression	i ++	261:22:7618:7620	5536316	2	True				
ANR	5536769	Identifier	i		5536316	0					
ANR	5536770	IncDec	++		5536316	1					
ANR	5536771	CompoundStatement		66:27:1336:1336	5536316	3					
ANR	5536772	IfStatement	if ( wa [ i ] [ 0 ] )		5536316	0					
ANR	5536773	Condition	wa [ i ] [ 0 ]	262:8:7633:7640	5536316	0	True				
ANR	5536774	ArrayIndexing	wa [ i ] [ 0 ]		5536316	0					
ANR	5536775	ArrayIndexing	wa [ i ]		5536316	0					
ANR	5536776	Identifier	wa		5536316	0					
ANR	5536777	Identifier	i		5536316	1					
ANR	5536778	PrimaryExpression	0		5536316	1					
ANR	5536779	CompoundStatement		67:18:1356:1356	5536316	1					
ANR	5536780	ExpressionStatement	nw ++	263:5:7650:7654	5536316	0	True				
ANR	5536781	PostIncDecOperationExpression	nw ++		5536316	0					
ANR	5536782	Identifier	nw		5536316	0					
ANR	5536783	IncDec	++		5536316	1					
ANR	5536784	ExpressionStatement	"replace ( nw , wa , str )"	266:3:7670:7691	5536316	3	True				
ANR	5536785	CallExpression	"replace ( nw , wa , str )"		5536316	0					
ANR	5536786	Callee	replace		5536316	0					
ANR	5536787	Identifier	replace		5536316	0					
ANR	5536788	ArgumentList	nw		5536316	1					
ANR	5536789	Argument	nw		5536316	0					
ANR	5536790	Identifier	nw		5536316	0					
ANR	5536791	Argument	wa		5536316	1					
ANR	5536792	Identifier	wa		5536316	0					
ANR	5536793	Argument	str		5536316	2					
ANR	5536794	Identifier	str		5536316	0					
ANR	5536795	CompoundStatement		75:2:1418:1440	5536316	7					
ANR	5536796	IdentifierDeclStatement	char * s = strdup ( str ) ;	270:2:7705:7727	5536316	0	True				
ANR	5536797	IdentifierDecl	* s = strdup ( str )		5536316	0					
ANR	5536798	IdentifierDeclType	char *		5536316	0					
ANR	5536799	Identifier	s		5536316	1					
ANR	5536800	AssignmentExpression	* s = strdup ( str )		5536316	2		=			
ANR	5536801	Identifier	s		5536316	0					
ANR	5536802	CallExpression	strdup ( str )		5536316	1					
ANR	5536803	Callee	strdup		5536316	0					
ANR	5536804	Identifier	strdup		5536316	0					
ANR	5536805	ArgumentList	str		5536316	1					
ANR	5536806	Argument	str		5536316	0					
ANR	5536807	Identifier	str		5536316	0					
ANR	5536808	ExpressionStatement	"s = r_str_replace ( s , ""+ -"" , ""- "" , 1 )"	271:2:7731:7768	5536316	1	True				
ANR	5536809	AssignmentExpression	"s = r_str_replace ( s , ""+ -"" , ""- "" , 1 )"		5536316	0		=			
ANR	5536810	Identifier	s		5536316	0					
ANR	5536811	CallExpression	"r_str_replace ( s , ""+ -"" , ""- "" , 1 )"		5536316	1					
ANR	5536812	Callee	r_str_replace		5536316	0					
ANR	5536813	Identifier	r_str_replace		5536316	0					
ANR	5536814	ArgumentList	s		5536316	1					
ANR	5536815	Argument	s		5536316	0					
ANR	5536816	Identifier	s		5536316	0					
ANR	5536817	Argument	"""+ -"""		5536316	1					
ANR	5536818	PrimaryExpression	"""+ -"""		5536316	0					
ANR	5536819	Argument	"""- """		5536316	2					
ANR	5536820	PrimaryExpression	"""- """		5536316	0					
ANR	5536821	Argument	1		5536316	3					
ANR	5536822	PrimaryExpression	1		5536316	0					
ANR	5536823	ExpressionStatement	"s = r_str_replace ( s , ""- -"" , ""+ "" , 1 )"	272:2:7772:7809	5536316	2	True				
ANR	5536824	AssignmentExpression	"s = r_str_replace ( s , ""- -"" , ""+ "" , 1 )"		5536316	0		=			
ANR	5536825	Identifier	s		5536316	0					
ANR	5536826	CallExpression	"r_str_replace ( s , ""- -"" , ""+ "" , 1 )"		5536316	1					
ANR	5536827	Callee	r_str_replace		5536316	0					
ANR	5536828	Identifier	r_str_replace		5536316	0					
ANR	5536829	ArgumentList	s		5536316	1					
ANR	5536830	Argument	s		5536316	0					
ANR	5536831	Identifier	s		5536316	0					
ANR	5536832	Argument	"""- -"""		5536316	1					
ANR	5536833	PrimaryExpression	"""- -"""		5536316	0					
ANR	5536834	Argument	"""+ """		5536316	2					
ANR	5536835	PrimaryExpression	"""+ """		5536316	0					
ANR	5536836	Argument	1		5536316	3					
ANR	5536837	PrimaryExpression	1		5536316	0					
ANR	5536838	ExpressionStatement	"strcpy ( str , s )"	273:2:7813:7828	5536316	3	True				
ANR	5536839	CallExpression	"strcpy ( str , s )"		5536316	0					
ANR	5536840	Callee	strcpy		5536316	0					
ANR	5536841	Identifier	strcpy		5536316	0					
ANR	5536842	ArgumentList	str		5536316	1					
ANR	5536843	Argument	str		5536316	0					
ANR	5536844	Identifier	str		5536316	0					
ANR	5536845	Argument	s		5536316	1					
ANR	5536846	Identifier	s		5536316	0					
ANR	5536847	ExpressionStatement	free ( s )	274:2:7832:7840	5536316	4	True				
ANR	5536848	CallExpression	free ( s )		5536316	0					
ANR	5536849	Callee	free		5536316	0					
ANR	5536850	Identifier	free		5536316	0					
ANR	5536851	ArgumentList	s		5536316	1					
ANR	5536852	Argument	s		5536316	0					
ANR	5536853	Identifier	s		5536316	0					
ANR	5536854	ExpressionStatement	free ( buf )	276:1:7846:7856	5536316	8	True				
ANR	5536855	CallExpression	free ( buf )		5536316	0					
ANR	5536856	Callee	free		5536316	0					
ANR	5536857	Identifier	free		5536316	0					
ANR	5536858	ArgumentList	buf		5536316	1					
ANR	5536859	Argument	buf		5536316	0					
ANR	5536860	Identifier	buf		5536316	0					
ANR	5536861	ReturnStatement	return true ;	277:1:7859:7870	5536316	9	True				
ANR	5536862	Identifier	true		5536316	0					
ANR	5536863	ReturnType	static int		5536316	1					
ANR	5536864	Identifier	parse		5536316	2					
ANR	5536865	ParameterList	"RParse * p , const char * data , char * str"		5536316	3					
ANR	5536866	Parameter	RParse * p	196:17:6246:6254	5536316	0	True				
ANR	5536867	ParameterType	RParse *		5536316	0					
ANR	5536868	Identifier	p		5536316	1					
ANR	5536869	Parameter	const char * data	196:28:6257:6272	5536316	1	True				
ANR	5536870	ParameterType	const char *		5536316	0					
ANR	5536871	Identifier	data		5536316	1					
ANR	5536872	Parameter	char * str	196:46:6275:6283	5536316	2	True				
ANR	5536873	ParameterType	char *		5536316	0					
ANR	5536874	Identifier	str		5536316	1					
ANR	5536875	CFGEntryNode	ENTRY		5536316		True				
ANR	5536876	CFGExitNode	EXIT		5536316		True				
ANR	5536877	Symbol	* w3		5536316						
ANR	5536878	Symbol	* w2		5536316						
ANR	5536879	Symbol	* w1		5536316						
ANR	5536880	Symbol	data		5536316						
ANR	5536881	Symbol	strchr		5536316						
ANR	5536882	Symbol	nw		5536316						
ANR	5536883	Symbol	wa		5536316						
ANR	5536884	Symbol	strlen		5536316						
ANR	5536885	Symbol	* wa		5536316						
ANR	5536886	Symbol	len		5536316						
ANR	5536887	Symbol	r_str_replace		5536316						
ANR	5536888	Symbol	* ptr		5536316						
ANR	5536889	Symbol	w0		5536316						
ANR	5536890	Symbol	w1		5536316						
ANR	5536891	Symbol	w2		5536316						
ANR	5536892	Symbol	w3		5536316						
ANR	5536893	Symbol	* w0		5536316						
ANR	5536894	Symbol	malloc		5536316						
ANR	5536895	Symbol	* buf		5536316						
ANR	5536896	Symbol	* * i		5536316						
ANR	5536897	Symbol	false		5536316						
ANR	5536898	Symbol	i		5536316						
ANR	5536899	Symbol	optr		5536316						
ANR	5536900	Symbol	ptr		5536316						
ANR	5536901	Symbol	p		5536316						
ANR	5536902	Symbol	str		5536316						
ANR	5536903	Symbol	buf		5536316						
ANR	5536904	Symbol	* i		5536316						
ANR	5536905	Symbol	s		5536316						
ANR	5536906	Symbol	* * wa		5536316						
ANR	5536907	Symbol	true		5536316						
ANR	5536908	Symbol	strdup		5536316						
ANR	5536909	Function	varsub	280:0:7875:11742							
ANR	5536910	FunctionDef	"varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5536909	0					
ANR	5536911	CompoundStatement		280:102:7977:11742	5536909	0					
ANR	5536912	IdentifierDeclStatement	RList * spargs = NULL ;	281:1:7980:8000	5536909	0	True				
ANR	5536913	IdentifierDecl	* spargs = NULL		5536909	0					
ANR	5536914	IdentifierDeclType	RList *		5536909	0					
ANR	5536915	Identifier	spargs		5536909	1					
ANR	5536916	AssignmentExpression	* spargs = NULL		5536909	2		=			
ANR	5536917	Identifier	NULL		5536909	0					
ANR	5536918	Identifier	NULL		5536909	1					
ANR	5536919	IdentifierDeclStatement	RList * bpargs = NULL ;	282:1:8003:8023	5536909	1	True				
ANR	5536920	IdentifierDecl	* bpargs = NULL		5536909	0					
ANR	5536921	IdentifierDeclType	RList *		5536909	0					
ANR	5536922	Identifier	bpargs		5536909	1					
ANR	5536923	AssignmentExpression	* bpargs = NULL		5536909	2		=			
ANR	5536924	Identifier	NULL		5536909	0					
ANR	5536925	Identifier	NULL		5536909	1					
ANR	5536926	IdentifierDeclStatement	RAnalVar * var ;	283:1:8026:8039	5536909	2	True				
ANR	5536927	IdentifierDecl	* var		5536909	0					
ANR	5536928	IdentifierDeclType	RAnalVar *		5536909	0					
ANR	5536929	Identifier	var		5536909	1					
ANR	5536930	IdentifierDeclStatement	RListIter * iter ;	284:1:8042:8057	5536909	3	True				
ANR	5536931	IdentifierDecl	* iter		5536909	0					
ANR	5536932	IdentifierDeclType	RListIter *		5536909	0					
ANR	5536933	Identifier	iter		5536909	1					
ANR	5536934	IdentifierDeclStatement	RAnal * anal = p -> analb . anal ;	285:1:8060:8087	5536909	4	True				
ANR	5536935	IdentifierDecl	* anal = p -> analb . anal		5536909	0					
ANR	5536936	IdentifierDeclType	RAnal *		5536909	0					
ANR	5536937	Identifier	anal		5536909	1					
ANR	5536938	AssignmentExpression	* anal = p -> analb . anal		5536909	2		=			
ANR	5536939	Identifier	anal		5536909	0					
ANR	5536940	MemberAccess	p -> analb . anal		5536909	1					
ANR	5536941	PtrMemberAccess	p -> analb		5536909	0					
ANR	5536942	Identifier	p		5536909	0					
ANR	5536943	Identifier	analb		5536909	1					
ANR	5536944	Identifier	anal		5536909	1					
ANR	5536945	IdentifierDeclStatement	"char * oldstr , * newstr ;"	286:1:8090:8111	5536909	5	True				
ANR	5536946	IdentifierDecl	* oldstr		5536909	0					
ANR	5536947	IdentifierDeclType	char *		5536909	0					
ANR	5536948	Identifier	oldstr		5536909	1					
ANR	5536949	IdentifierDecl	* newstr		5536909	1					
ANR	5536950	IdentifierDeclType	char *		5536909	0					
ANR	5536951	Identifier	newstr		5536909	1					
ANR	5536952	IdentifierDeclStatement	char * tstr = strdup ( data ) ;	287:1:8114:8140	5536909	6	True				
ANR	5536953	IdentifierDecl	* tstr = strdup ( data )		5536909	0					
ANR	5536954	IdentifierDeclType	char *		5536909	0					
ANR	5536955	Identifier	tstr		5536909	1					
ANR	5536956	AssignmentExpression	* tstr = strdup ( data )		5536909	2		=			
ANR	5536957	Identifier	tstr		5536909	0					
ANR	5536958	CallExpression	strdup ( data )		5536909	1					
ANR	5536959	Callee	strdup		5536909	0					
ANR	5536960	Identifier	strdup		5536909	0					
ANR	5536961	ArgumentList	data		5536909	1					
ANR	5536962	Argument	data		5536909	0					
ANR	5536963	Identifier	data		5536909	0					
ANR	5536964	IfStatement	if ( ! tstr )		5536909	7					
ANR	5536965	Condition	! tstr	288:5:8147:8151	5536909	0	True				
ANR	5536966	UnaryOperationExpression	! tstr		5536909	0					
ANR	5536967	UnaryOperator	!		5536909	0					
ANR	5536968	Identifier	tstr		5536909	1					
ANR	5536969	CompoundStatement		9:12:176:176	5536909	1					
ANR	5536970	ReturnStatement	return false ;	289:2:8158:8170	5536909	0	True				
ANR	5536971	Identifier	false		5536909	0					
ANR	5536972	IfStatement	if ( ! p -> varlist )		5536909	8					
ANR	5536973	Condition	! p -> varlist	292:5:8181:8191	5536909	0	True				
ANR	5536974	UnaryOperationExpression	! p -> varlist		5536909	0					
ANR	5536975	UnaryOperator	!		5536909	0					
ANR	5536976	PtrMemberAccess	p -> varlist		5536909	1					
ANR	5536977	Identifier	p		5536909	0					
ANR	5536978	Identifier	varlist		5536909	1					
ANR	5536979	CompoundStatement		13:18:216:216	5536909	1					
ANR	5536980	ExpressionStatement	free ( tstr )	293:2:8198:8209	5536909	0	True				
ANR	5536981	CallExpression	free ( tstr )		5536909	0					
ANR	5536982	Callee	free		5536909	0					
ANR	5536983	Identifier	free		5536909	0					
ANR	5536984	ArgumentList	tstr		5536909	1					
ANR	5536985	Argument	tstr		5536909	0					
ANR	5536986	Identifier	tstr		5536909	0					
ANR	5536987	ReturnStatement	return false ;	294:2:8213:8225	5536909	1	True				
ANR	5536988	Identifier	false		5536909	0					
ANR	5536989	IfStatement	if ( p -> relsub )		5536909	9					
ANR	5536990	Condition	p -> relsub	296:5:8235:8243	5536909	0	True				
ANR	5536991	PtrMemberAccess	p -> relsub		5536909	0					
ANR	5536992	Identifier	p		5536909	0					
ANR	5536993	Identifier	relsub		5536909	1					
ANR	5536994	CompoundStatement		18:2:272:321	5536909	1					
ANR	5536995	IdentifierDeclStatement	"char * rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" ) ;"	297:2:8250:8299	5536909	0	True				
ANR	5536996	IdentifierDecl	"* rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5536909	0					
ANR	5536997	IdentifierDeclType	char *		5536909	0					
ANR	5536998	Identifier	rip		5536909	1					
ANR	5536999	AssignmentExpression	"* rip = ( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5536909	2		=			
ANR	5537000	Identifier	rip		5536909	0					
ANR	5537001	CastExpression	"( char * ) r_str_casestr ( tstr , ""[pc, "" )"		5536909	1					
ANR	5537002	CastTarget	char *		5536909	0					
ANR	5537003	CallExpression	"r_str_casestr ( tstr , ""[pc, "" )"		5536909	1					
ANR	5537004	Callee	r_str_casestr		5536909	0					
ANR	5537005	Identifier	r_str_casestr		5536909	0					
ANR	5537006	ArgumentList	tstr		5536909	1					
ANR	5537007	Argument	tstr		5536909	0					
ANR	5537008	Identifier	tstr		5536909	0					
ANR	5537009	Argument	"""[pc, """		5536909	1					
ANR	5537010	PrimaryExpression	"""[pc, """		5536909	0					
ANR	5537011	IfStatement	if ( ! rip )		5536909	1					
ANR	5537012	Condition	! rip	298:6:8307:8310	5536909	0	True				
ANR	5537013	UnaryOperationExpression	! rip		5536909	0					
ANR	5537014	UnaryOperator	!		5536909	0					
ANR	5537015	Identifier	rip		5536909	1					
ANR	5537016	CompoundStatement		19:12:335:335	5536909	1					
ANR	5537017	ExpressionStatement	"rip = ( char * ) r_str_casestr ( tstr , ""[PC, "" )"	299:3:8318:8361	5536909	0	True				
ANR	5537018	AssignmentExpression	"rip = ( char * ) r_str_casestr ( tstr , ""[PC, "" )"		5536909	0		=			
ANR	5537019	Identifier	rip		5536909	0					
ANR	5537020	CastExpression	"( char * ) r_str_casestr ( tstr , ""[PC, "" )"		5536909	1					
ANR	5537021	CastTarget	char *		5536909	0					
ANR	5537022	CallExpression	"r_str_casestr ( tstr , ""[PC, "" )"		5536909	1					
ANR	5537023	Callee	r_str_casestr		5536909	0					
ANR	5537024	Identifier	r_str_casestr		5536909	0					
ANR	5537025	ArgumentList	tstr		5536909	1					
ANR	5537026	Argument	tstr		5536909	0					
ANR	5537027	Identifier	tstr		5536909	0					
ANR	5537028	Argument	"""[PC, """		5536909	1					
ANR	5537029	PrimaryExpression	"""[PC, """		5536909	0					
ANR	5537030	IfStatement	"if ( rip && ! strchr ( rip + 4 , ',' ) )"		5536909	2					
ANR	5537031	Condition	"rip && ! strchr ( rip + 4 , ',' )"	301:6:8373:8401	5536909	0	True				
ANR	5537032	AndExpression	"rip && ! strchr ( rip + 4 , ',' )"		5536909	0		&&			
ANR	5537033	Identifier	rip		5536909	0					
ANR	5537034	UnaryOperationExpression	"! strchr ( rip + 4 , ',' )"		5536909	1					
ANR	5537035	UnaryOperator	!		5536909	0					
ANR	5537036	CallExpression	"strchr ( rip + 4 , ',' )"		5536909	1					
ANR	5537037	Callee	strchr		5536909	0					
ANR	5537038	Identifier	strchr		5536909	0					
ANR	5537039	ArgumentList	rip + 4		5536909	1					
ANR	5537040	Argument	rip + 4		5536909	0					
ANR	5537041	AdditiveExpression	rip + 4		5536909	0		+			
ANR	5537042	Identifier	rip		5536909	0					
ANR	5537043	PrimaryExpression	4		5536909	1					
ANR	5537044	Argument	"','"		5536909	1					
ANR	5537045	PrimaryExpression	"','"		5536909	0					
ANR	5537046	CompoundStatement		27:3:613:646	5536909	1					
ANR	5537047	ExpressionStatement	rip += 4	302:3:8409:8417	5536909	0	True				
ANR	5537048	AssignmentExpression	rip += 4		5536909	0		+=			
ANR	5537049	Identifier	rip		5536909	0					
ANR	5537050	PrimaryExpression	4		5536909	1					
ANR	5537051	IdentifierDeclStatement	"char * tstr_new , * ripend = strchr ( rip , ']' ) ;"	303:3:8422:8465	5536909	1	True				
ANR	5537052	IdentifierDecl	* tstr_new		5536909	0					
ANR	5537053	IdentifierDeclType	char *		5536909	0					
ANR	5537054	Identifier	tstr_new		5536909	1					
ANR	5537055	IdentifierDecl	"* ripend = strchr ( rip , ']' )"		5536909	1					
ANR	5537056	IdentifierDeclType	char *		5536909	0					
ANR	5537057	Identifier	ripend		5536909	1					
ANR	5537058	AssignmentExpression	"* ripend = strchr ( rip , ']' )"		5536909	2		=			
ANR	5537059	Identifier	ripend		5536909	0					
ANR	5537060	CallExpression	"strchr ( rip , ']' )"		5536909	1					
ANR	5537061	Callee	strchr		5536909	0					
ANR	5537062	Identifier	strchr		5536909	0					
ANR	5537063	ArgumentList	rip		5536909	1					
ANR	5537064	Argument	rip		5536909	0					
ANR	5537065	Identifier	rip		5536909	0					
ANR	5537066	Argument	']'		5536909	1					
ANR	5537067	PrimaryExpression	']'		5536909	0					
ANR	5537068	IdentifierDeclStatement	"const char * neg = strchr ( rip , '-' ) ;"	304:3:8470:8505	5536909	2	True				
ANR	5537069	IdentifierDecl	"* neg = strchr ( rip , '-' )"		5536909	0					
ANR	5537070	IdentifierDeclType	const char *		5536909	0					
ANR	5537071	Identifier	neg		5536909	1					
ANR	5537072	AssignmentExpression	"* neg = strchr ( rip , '-' )"		5536909	2		=			
ANR	5537073	Identifier	neg		5536909	0					
ANR	5537074	CallExpression	"strchr ( rip , '-' )"		5536909	1					
ANR	5537075	Callee	strchr		5536909	0					
ANR	5537076	Identifier	strchr		5536909	0					
ANR	5537077	ArgumentList	rip		5536909	1					
ANR	5537078	Argument	rip		5536909	0					
ANR	5537079	Identifier	rip		5536909	0					
ANR	5537080	Argument	'-'		5536909	1					
ANR	5537081	PrimaryExpression	'-'		5536909	0					
ANR	5537082	IdentifierDeclStatement	"ut64 off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8 ;"	305:3:8510:8586	5536909	3	True				
ANR	5537083	IdentifierDecl	"off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5536909	0					
ANR	5537084	IdentifierDeclType	ut64		5536909	0					
ANR	5537085	Identifier	off		5536909	1					
ANR	5537086	AssignmentExpression	"off = ( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5536909	2		=			
ANR	5537087	Identifier	off		5536909	0					
ANR	5537088	ConditionalExpression	"( oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" ) ) ? 4 : 8"		5536909	1					
ANR	5537089	Condition	"oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5536909	0					
ANR	5537090	OrExpression	"oplen == 2 || strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5536909	0		||			
ANR	5537091	EqualityExpression	oplen == 2		5536909	0		==			
ANR	5537092	Identifier	oplen		5536909	0					
ANR	5537093	PrimaryExpression	2		5536909	1					
ANR	5537094	OrExpression	"strstr ( tstr , "".w"" ) || strstr ( tstr , "".W"" )"		5536909	1		||			
ANR	5537095	CallExpression	"strstr ( tstr , "".w"" )"		5536909	0					
ANR	5537096	Callee	strstr		5536909	0					
ANR	5537097	Identifier	strstr		5536909	0					
ANR	5537098	ArgumentList	tstr		5536909	1					
ANR	5537099	Argument	tstr		5536909	0					
ANR	5537100	Identifier	tstr		5536909	0					
ANR	5537101	Argument	""".w"""		5536909	1					
ANR	5537102	PrimaryExpression	""".w"""		5536909	0					
ANR	5537103	CallExpression	"strstr ( tstr , "".W"" )"		5536909	1					
ANR	5537104	Callee	strstr		5536909	0					
ANR	5537105	Identifier	strstr		5536909	0					
ANR	5537106	ArgumentList	tstr		5536909	1					
ANR	5537107	Argument	tstr		5536909	0					
ANR	5537108	Identifier	tstr		5536909	0					
ANR	5537109	Argument	""".W"""		5536909	1					
ANR	5537110	PrimaryExpression	""".W"""		5536909	0					
ANR	5537111	PrimaryExpression	4		5536909	1					
ANR	5537112	PrimaryExpression	8		5536909	2					
ANR	5537113	IdentifierDeclStatement	ut64 repl_num = ( addr + off ) & ~3 ;	306:3:8591:8624	5536909	4	True				
ANR	5537114	IdentifierDecl	repl_num = ( addr + off ) & ~3		5536909	0					
ANR	5537115	IdentifierDeclType	ut64		5536909	0					
ANR	5537116	Identifier	repl_num		5536909	1					
ANR	5537117	AssignmentExpression	repl_num = ( addr + off ) & ~3		5536909	2		=			
ANR	5537118	Identifier	repl_num		5536909	0					
ANR	5537119	BitAndExpression	( addr + off ) & ~3		5536909	1		&			
ANR	5537120	AdditiveExpression	addr + off		5536909	0		+			
ANR	5537121	Identifier	addr		5536909	0					
ANR	5537122	Identifier	off		5536909	1					
ANR	5537123	Identifier	~3		5536909	1					
ANR	5537124	IfStatement	if ( ! ripend )		5536909	5					
ANR	5537125	Condition	! ripend	307:7:8633:8639	5536909	0	True				
ANR	5537126	UnaryOperationExpression	! ripend		5536909	0					
ANR	5537127	UnaryOperator	!		5536909	0					
ANR	5537128	Identifier	ripend		5536909	1					
ANR	5537129	CompoundStatement		28:16:664:664	5536909	1					
ANR	5537130	ExpressionStatement	"ripend = ""]"""	308:4:8648:8660	5536909	0	True				
ANR	5537131	AssignmentExpression	"ripend = ""]"""		5536909	0		=			
ANR	5537132	Identifier	ripend		5536909	0					
ANR	5537133	PrimaryExpression	"""]"""		5536909	1					
ANR	5537134	IfStatement	if ( neg )		5536909	6					
ANR	5537135	Condition	neg	310:7:8674:8676	5536909	0	True				
ANR	5537136	Identifier	neg		5536909	0					
ANR	5537137	CompoundStatement		31:12:701:701	5536909	1					
ANR	5537138	ExpressionStatement	"repl_num -= r_num_get ( NULL , neg + 1 )"	311:4:8685:8722	5536909	0	True				
ANR	5537139	AssignmentExpression	"repl_num -= r_num_get ( NULL , neg + 1 )"		5536909	0		-=			
ANR	5537140	Identifier	repl_num		5536909	0					
ANR	5537141	CallExpression	"r_num_get ( NULL , neg + 1 )"		5536909	1					
ANR	5537142	Callee	r_num_get		5536909	0					
ANR	5537143	Identifier	r_num_get		5536909	0					
ANR	5537144	ArgumentList	NULL		5536909	1					
ANR	5537145	Argument	NULL		5536909	0					
ANR	5537146	Identifier	NULL		5536909	0					
ANR	5537147	Argument	neg + 1		5536909	1					
ANR	5537148	AdditiveExpression	neg + 1		5536909	0		+			
ANR	5537149	Identifier	neg		5536909	0					
ANR	5537150	PrimaryExpression	1		5536909	1					
ANR	5537151	ElseStatement	else		5536909	0					
ANR	5537152	CompoundStatement		33:10:756:756	5536909	0					
ANR	5537153	ExpressionStatement	"repl_num += r_num_get ( NULL , rip )"	313:4:8740:8773	5536909	0	True				
ANR	5537154	AssignmentExpression	"repl_num += r_num_get ( NULL , rip )"		5536909	0		+=			
ANR	5537155	Identifier	repl_num		5536909	0					
ANR	5537156	CallExpression	"r_num_get ( NULL , rip )"		5536909	1					
ANR	5537157	Callee	r_num_get		5536909	0					
ANR	5537158	Identifier	r_num_get		5536909	0					
ANR	5537159	ArgumentList	NULL		5536909	1					
ANR	5537160	Argument	NULL		5536909	0					
ANR	5537161	Identifier	NULL		5536909	0					
ANR	5537162	Argument	rip		5536909	1					
ANR	5537163	Identifier	rip		5536909	0					
ANR	5537164	ExpressionStatement	rip -= 3	315:3:8783:8791	5536909	7	True				
ANR	5537165	AssignmentExpression	rip -= 3		5536909	0		-=			
ANR	5537166	Identifier	rip		5536909	0					
ANR	5537167	PrimaryExpression	3		5536909	1					
ANR	5537168	ExpressionStatement	* rip = 0	316:3:8796:8804	5536909	8	True				
ANR	5537169	AssignmentExpression	* rip = 0		5536909	0		=			
ANR	5537170	UnaryOperationExpression	* rip		5536909	0					
ANR	5537171	UnaryOperator	*		5536909	0					
ANR	5537172	Identifier	rip		5536909	1					
ANR	5537173	PrimaryExpression	0		5536909	1					
ANR	5537174	Statement	tstr_new	317:3:8809:8816	5536909	9	True				
ANR	5537175	Statement	=	317:12:8818:8818	5536909	10	True				
ANR	5537176	Statement	r_str_newf	317:14:8820:8829	5536909	11	True				
ANR	5537177	Statement	(	317:25:8831:8831	5536909	12	True				
ANR	5537178	Statement	"""%s0x%08"""	317:26:8832:8840	5536909	13	True				
ANR	5537179	Statement	PFMT64x	317:35:8841:8847	5536909	14	True				
ANR	5537180	Statement	"""%s"""	317:42:8848:8851	5536909	15	True				
ANR	5537181	Statement	","	317:46:8852:8852	5536909	16	True				
ANR	5537182	Statement	tstr	317:48:8854:8857	5536909	17	True				
ANR	5537183	Statement	","	317:52:8858:8858	5536909	18	True				
ANR	5537184	Statement	repl_num	317:54:8860:8867	5536909	19	True				
ANR	5537185	Statement	","	317:62:8868:8868	5536909	20	True				
ANR	5537186	Statement	ripend	317:64:8870:8875	5536909	21	True				
ANR	5537187	Statement	)	317:70:8876:8876	5536909	22	True				
ANR	5537188	ExpressionStatement		317:71:8877:8877	5536909	23	True				
ANR	5537189	ExpressionStatement	free ( tstr )	318:3:8882:8893	5536909	24	True				
ANR	5537190	CallExpression	free ( tstr )		5536909	0					
ANR	5537191	Callee	free		5536909	0					
ANR	5537192	Identifier	free		5536909	0					
ANR	5537193	ArgumentList	tstr		5536909	1					
ANR	5537194	Argument	tstr		5536909	0					
ANR	5537195	Identifier	tstr		5536909	0					
ANR	5537196	ExpressionStatement	tstr = tstr_new	319:3:8898:8913	5536909	25	True				
ANR	5537197	AssignmentExpression	tstr = tstr_new		5536909	0		=			
ANR	5537198	Identifier	tstr		5536909	0					
ANR	5537199	Identifier	tstr_new		5536909	1					
ANR	5537200	ExpressionStatement	"bpargs = p -> varlist ( anal , f , 'b' )"	323:1:8924:8958	5536909	10	True				
ANR	5537201	AssignmentExpression	"bpargs = p -> varlist ( anal , f , 'b' )"		5536909	0		=			
ANR	5537202	Identifier	bpargs		5536909	0					
ANR	5537203	CallExpression	"p -> varlist ( anal , f , 'b' )"		5536909	1					
ANR	5537204	Callee	p -> varlist		5536909	0					
ANR	5537205	PtrMemberAccess	p -> varlist		5536909	0					
ANR	5537206	Identifier	p		5536909	0					
ANR	5537207	Identifier	varlist		5536909	1					
ANR	5537208	ArgumentList	anal		5536909	1					
ANR	5537209	Argument	anal		5536909	0					
ANR	5537210	Identifier	anal		5536909	0					
ANR	5537211	Argument	f		5536909	1					
ANR	5537212	Identifier	f		5536909	0					
ANR	5537213	Argument	'b'		5536909	2					
ANR	5537214	PrimaryExpression	'b'		5536909	0					
ANR	5537215	ExpressionStatement	"spargs = p -> varlist ( anal , f , 's' )"	324:1:8961:8995	5536909	11	True				
ANR	5537216	AssignmentExpression	"spargs = p -> varlist ( anal , f , 's' )"		5536909	0		=			
ANR	5537217	Identifier	spargs		5536909	0					
ANR	5537218	CallExpression	"p -> varlist ( anal , f , 's' )"		5536909	1					
ANR	5537219	Callee	p -> varlist		5536909	0					
ANR	5537220	PtrMemberAccess	p -> varlist		5536909	0					
ANR	5537221	Identifier	p		5536909	0					
ANR	5537222	Identifier	varlist		5536909	1					
ANR	5537223	ArgumentList	anal		5536909	1					
ANR	5537224	Argument	anal		5536909	0					
ANR	5537225	Identifier	anal		5536909	0					
ANR	5537226	Argument	f		5536909	1					
ANR	5537227	Identifier	f		5536909	0					
ANR	5537228	Argument	's'		5536909	2					
ANR	5537229	PrimaryExpression	's'		5536909	0					
ANR	5537230	IdentifierDeclStatement	bool ucase = IS_UPPER ( * tstr ) ;	325:1:8998:9027	5536909	12	True				
ANR	5537231	IdentifierDecl	ucase = IS_UPPER ( * tstr )		5536909	0					
ANR	5537232	IdentifierDeclType	bool		5536909	0					
ANR	5537233	Identifier	ucase		5536909	1					
ANR	5537234	AssignmentExpression	ucase = IS_UPPER ( * tstr )		5536909	2		=			
ANR	5537235	Identifier	ucase		5536909	0					
ANR	5537236	CallExpression	IS_UPPER ( * tstr )		5536909	1					
ANR	5537237	Callee	IS_UPPER		5536909	0					
ANR	5537238	Identifier	IS_UPPER		5536909	0					
ANR	5537239	ArgumentList	* tstr		5536909	1					
ANR	5537240	Argument	* tstr		5536909	0					
ANR	5537241	UnaryOperationExpression	* tstr		5536909	0					
ANR	5537242	UnaryOperator	*		5536909	0					
ANR	5537243	Identifier	tstr		5536909	1					
ANR	5537244	Statement	r_list_foreach	326:1:9030:9043	5536909	13	True				
ANR	5537245	Statement	(	326:16:9045:9045	5536909	14	True				
ANR	5537246	Statement	bpargs	326:17:9046:9051	5536909	15	True				
ANR	5537247	Statement	","	326:23:9052:9052	5536909	16	True				
ANR	5537248	Statement	iter	326:25:9054:9057	5536909	17	True				
ANR	5537249	Statement	","	326:29:9058:9058	5536909	18	True				
ANR	5537250	Statement	var	326:31:9060:9062	5536909	19	True				
ANR	5537251	Statement	)	326:34:9063:9063	5536909	20	True				
ANR	5537252	CompoundStatement		49:2:1137:1155	5536909	21					
ANR	5537253	IdentifierDeclStatement	char * reg = anal -> reg -> name [ R_REG_NAME_BP ] ;	327:2:9069:9111	5536909	0	True				
ANR	5537254	IdentifierDecl	* reg = anal -> reg -> name [ R_REG_NAME_BP ]		5536909	0					
ANR	5537255	IdentifierDeclType	char *		5536909	0					
ANR	5537256	Identifier	reg		5536909	1					
ANR	5537257	AssignmentExpression	* reg = anal -> reg -> name [ R_REG_NAME_BP ]		5536909	2		=			
ANR	5537258	Identifier	reg		5536909	0					
ANR	5537259	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5536909	1					
ANR	5537260	PtrMemberAccess	anal -> reg -> name		5536909	0					
ANR	5537261	PtrMemberAccess	anal -> reg		5536909	0					
ANR	5537262	Identifier	anal		5536909	0					
ANR	5537263	Identifier	reg		5536909	1					
ANR	5537264	Identifier	name		5536909	1					
ANR	5537265	Identifier	R_REG_NAME_BP		5536909	1					
ANR	5537266	IdentifierDeclStatement	char * tmplt = NULL ;	328:2:9115:9133	5536909	1	True				
ANR	5537267	IdentifierDecl	* tmplt = NULL		5536909	0					
ANR	5537268	IdentifierDeclType	char *		5536909	0					
ANR	5537269	Identifier	tmplt		5536909	1					
ANR	5537270	AssignmentExpression	* tmplt = NULL		5536909	2		=			
ANR	5537271	Identifier	NULL		5536909	0					
ANR	5537272	Identifier	NULL		5536909	1					
ANR	5537273	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5536909	2					
ANR	5537274	Condition	var -> delta > - 10 && var -> delta < 10	329:6:9141:9175	5536909	0	True				
ANR	5537275	AndExpression	var -> delta > - 10 && var -> delta < 10		5536909	0		&&			
ANR	5537276	RelationalExpression	var -> delta > - 10		5536909	0		>			
ANR	5537277	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537278	Identifier	var		5536909	0					
ANR	5537279	Identifier	delta		5536909	1					
ANR	5537280	UnaryOperationExpression	- 10		5536909	1					
ANR	5537281	UnaryOperator	-		5536909	0					
ANR	5537282	PrimaryExpression	10		5536909	1					
ANR	5537283	RelationalExpression	var -> delta < 10		5536909	1		<			
ANR	5537284	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537285	Identifier	var		5536909	0					
ANR	5537286	Identifier	delta		5536909	1					
ANR	5537287	PrimaryExpression	10		5536909	1					
ANR	5537288	CompoundStatement		50:43:1200:1200	5536909	1					
ANR	5537289	IfStatement	if ( p -> pseudo )		5536909	0					
ANR	5537290	Condition	p -> pseudo	330:7:9187:9195	5536909	0	True				
ANR	5537291	PtrMemberAccess	p -> pseudo		5536909	0					
ANR	5537292	Identifier	p		5536909	0					
ANR	5537293	Identifier	pseudo		5536909	1					
ANR	5537294	CompoundStatement		53:4:1247:1269	5536909	1					
ANR	5537295	IdentifierDeclStatement	char sign = '+' ;	331:4:9204:9219	5536909	0	True				
ANR	5537296	IdentifierDecl	sign = '+'		5536909	0					
ANR	5537297	IdentifierDeclType	char		5536909	0					
ANR	5537298	Identifier	sign		5536909	1					
ANR	5537299	AssignmentExpression	sign = '+'		5536909	2		=			
ANR	5537300	Identifier	sign		5536909	0					
ANR	5537301	PrimaryExpression	'+'		5536909	1					
ANR	5537302	IdentifierDeclStatement	int delta = var -> delta ;	332:4:9225:9247	5536909	1	True				
ANR	5537303	IdentifierDecl	delta = var -> delta		5536909	0					
ANR	5537304	IdentifierDeclType	int		5536909	0					
ANR	5537305	Identifier	delta		5536909	1					
ANR	5537306	AssignmentExpression	delta = var -> delta		5536909	2		=			
ANR	5537307	Identifier	delta		5536909	0					
ANR	5537308	PtrMemberAccess	var -> delta		5536909	1					
ANR	5537309	Identifier	var		5536909	0					
ANR	5537310	Identifier	delta		5536909	1					
ANR	5537311	IfStatement	if ( var -> delta < 0 )		5536909	2					
ANR	5537312	Condition	var -> delta < 0	333:8:9257:9270	5536909	0	True				
ANR	5537313	RelationalExpression	var -> delta < 0		5536909	0		<			
ANR	5537314	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537315	Identifier	var		5536909	0					
ANR	5537316	Identifier	delta		5536909	1					
ANR	5537317	PrimaryExpression	0		5536909	1					
ANR	5537318	CompoundStatement		54:24:1295:1295	5536909	1					
ANR	5537319	ExpressionStatement	sign = '-'	334:5:9280:9290	5536909	0	True				
ANR	5537320	AssignmentExpression	sign = '-'		5536909	0		=			
ANR	5537321	Identifier	sign		5536909	0					
ANR	5537322	PrimaryExpression	'-'		5536909	1					
ANR	5537323	ExpressionStatement	delta = - delta	335:5:9297:9311	5536909	1	True				
ANR	5537324	AssignmentExpression	delta = - delta		5536909	0		=			
ANR	5537325	Identifier	delta		5536909	0					
ANR	5537326	UnaryOperationExpression	- delta		5536909	1					
ANR	5537327	UnaryOperator	-		5536909	0					
ANR	5537328	Identifier	delta		5536909	1					
ANR	5537329	ExpressionStatement	"oldstr = r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"	337:4:9323:9375	5536909	3	True				
ANR	5537330	AssignmentExpression	"oldstr = r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"		5536909	0		=			
ANR	5537331	Identifier	oldstr		5536909	0					
ANR	5537332	CallExpression	"r_str_newf ( ""[%s %c %d]"" , reg , sign , delta )"		5536909	1					
ANR	5537333	Callee	r_str_newf		5536909	0					
ANR	5537334	Identifier	r_str_newf		5536909	0					
ANR	5537335	ArgumentList	"""[%s %c %d]"""		5536909	1					
ANR	5537336	Argument	"""[%s %c %d]"""		5536909	0					
ANR	5537337	PrimaryExpression	"""[%s %c %d]"""		5536909	0					
ANR	5537338	Argument	reg		5536909	1					
ANR	5537339	Identifier	reg		5536909	0					
ANR	5537340	Argument	sign		5536909	2					
ANR	5537341	Identifier	sign		5536909	0					
ANR	5537342	Argument	delta		5536909	3					
ANR	5537343	Identifier	delta		5536909	0					
ANR	5537344	ElseStatement	else		5536909	0					
ANR	5537345	CompoundStatement		59:10:1409:1409	5536909	0					
ANR	5537346	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"	339:4:9393:9442	5536909	0	True				
ANR	5537347	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"		5536909	0		=			
ANR	5537348	Identifier	oldstr		5536909	0					
ANR	5537349	CallExpression	"r_str_newf ( ""[%s, %d]"" , reg , var -> delta )"		5536909	1					
ANR	5537350	Callee	r_str_newf		5536909	0					
ANR	5537351	Identifier	r_str_newf		5536909	0					
ANR	5537352	ArgumentList	"""[%s, %d]"""		5536909	1					
ANR	5537353	Argument	"""[%s, %d]"""		5536909	0					
ANR	5537354	PrimaryExpression	"""[%s, %d]"""		5536909	0					
ANR	5537355	Argument	reg		5536909	1					
ANR	5537356	Identifier	reg		5536909	0					
ANR	5537357	Argument	var -> delta		5536909	2					
ANR	5537358	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537359	Identifier	var		5536909	0					
ANR	5537360	Identifier	delta		5536909	1					
ANR	5537361	ElseStatement	else		5536909	0					
ANR	5537362	IfStatement	if ( var -> delta > 0 )		5536909	0					
ANR	5537363	Condition	var -> delta > 0	341:13:9462:9475	5536909	0	True				
ANR	5537364	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537365	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537366	Identifier	var		5536909	0					
ANR	5537367	Identifier	delta		5536909	1					
ANR	5537368	PrimaryExpression	0		5536909	1					
ANR	5537369	CompoundStatement		62:29:1500:1500	5536909	1					
ANR	5537370	ExpressionStatement	"tmplt = p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"	342:3:9483:9556	5536909	0	True				
ANR	5537371	AssignmentExpression	"tmplt = p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"		5536909	0		=			
ANR	5537372	Identifier	tmplt		5536909	0					
ANR	5537373	ConditionalExpression	"p -> pseudo ? ""[%s + 0x%x]"" : ( ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"" )"		5536909	1					
ANR	5537374	Condition	p -> pseudo		5536909	0					
ANR	5537375	PtrMemberAccess	p -> pseudo		5536909	0					
ANR	5537376	Identifier	p		5536909	0					
ANR	5537377	Identifier	pseudo		5536909	1					
ANR	5537378	PrimaryExpression	"""[%s + 0x%x]"""		5536909	1					
ANR	5537379	ConditionalExpression	"ucase ? ""[%s, 0x%X]"" : ""[%s, 0x%x]"""		5536909	2					
ANR	5537380	Condition	ucase		5536909	0					
ANR	5537381	Identifier	ucase		5536909	0					
ANR	5537382	PrimaryExpression	"""[%s, 0x%X]"""		5536909	1					
ANR	5537383	PrimaryExpression	"""[%s, 0x%x]"""		5536909	2					
ANR	5537384	ExpressionStatement	"oldstr = r_str_newf ( tmplt , reg , var -> delta )"	343:3:9561:9605	5536909	1	True				
ANR	5537385	AssignmentExpression	"oldstr = r_str_newf ( tmplt , reg , var -> delta )"		5536909	0		=			
ANR	5537386	Identifier	oldstr		5536909	0					
ANR	5537387	CallExpression	"r_str_newf ( tmplt , reg , var -> delta )"		5536909	1					
ANR	5537388	Callee	r_str_newf		5536909	0					
ANR	5537389	Identifier	r_str_newf		5536909	0					
ANR	5537390	ArgumentList	tmplt		5536909	1					
ANR	5537391	Argument	tmplt		5536909	0					
ANR	5537392	Identifier	tmplt		5536909	0					
ANR	5537393	Argument	reg		5536909	1					
ANR	5537394	Identifier	reg		5536909	0					
ANR	5537395	Argument	var -> delta		5536909	2					
ANR	5537396	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537397	Identifier	var		5536909	0					
ANR	5537398	Identifier	delta		5536909	1					
ANR	5537399	ElseStatement	else		5536909	0					
ANR	5537400	CompoundStatement		65:9:1638:1638	5536909	0					
ANR	5537401	ExpressionStatement	"tmplt = p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"	345:3:9621:9696	5536909	0	True				
ANR	5537402	AssignmentExpression	"tmplt = p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"		5536909	0		=			
ANR	5537403	Identifier	tmplt		5536909	0					
ANR	5537404	ConditionalExpression	"p -> pseudo ? ""[%s - 0x%x]"" : ( ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"" )"		5536909	1					
ANR	5537405	Condition	p -> pseudo		5536909	0					
ANR	5537406	PtrMemberAccess	p -> pseudo		5536909	0					
ANR	5537407	Identifier	p		5536909	0					
ANR	5537408	Identifier	pseudo		5536909	1					
ANR	5537409	PrimaryExpression	"""[%s - 0x%x]"""		5536909	1					
ANR	5537410	ConditionalExpression	"ucase ? ""[%s, -0x%X]"" : ""[%s, -0x%x]"""		5536909	2					
ANR	5537411	Condition	ucase		5536909	0					
ANR	5537412	Identifier	ucase		5536909	0					
ANR	5537413	PrimaryExpression	"""[%s, -0x%X]"""		5536909	1					
ANR	5537414	PrimaryExpression	"""[%s, -0x%x]"""		5536909	2					
ANR	5537415	ExpressionStatement	"oldstr = r_str_newf ( tmplt , reg , - var -> delta )"	346:3:9701:9746	5536909	1	True				
ANR	5537416	AssignmentExpression	"oldstr = r_str_newf ( tmplt , reg , - var -> delta )"		5536909	0		=			
ANR	5537417	Identifier	oldstr		5536909	0					
ANR	5537418	CallExpression	"r_str_newf ( tmplt , reg , - var -> delta )"		5536909	1					
ANR	5537419	Callee	r_str_newf		5536909	0					
ANR	5537420	Identifier	r_str_newf		5536909	0					
ANR	5537421	ArgumentList	tmplt		5536909	1					
ANR	5537422	Argument	tmplt		5536909	0					
ANR	5537423	Identifier	tmplt		5536909	0					
ANR	5537424	Argument	reg		5536909	1					
ANR	5537425	Identifier	reg		5536909	0					
ANR	5537426	Argument	- var -> delta		5536909	2					
ANR	5537427	UnaryOperationExpression	- var -> delta		5536909	0					
ANR	5537428	UnaryOperator	-		5536909	0					
ANR	5537429	PtrMemberAccess	var -> delta		5536909	1					
ANR	5537430	Identifier	var		5536909	0					
ANR	5537431	Identifier	delta		5536909	1					
ANR	5537432	IfStatement	if ( ucase )		5536909	3					
ANR	5537433	Condition	ucase	348:6:9758:9762	5536909	0	True				
ANR	5537434	Identifier	ucase		5536909	0					
ANR	5537435	CompoundStatement		70:3:1792:1826	5536909	1					
ANR	5537436	IdentifierDeclStatement	"char * comma = strchr ( oldstr , ',' ) ;"	349:3:9770:9804	5536909	0	True				
ANR	5537437	IdentifierDecl	"* comma = strchr ( oldstr , ',' )"		5536909	0					
ANR	5537438	IdentifierDeclType	char *		5536909	0					
ANR	5537439	Identifier	comma		5536909	1					
ANR	5537440	AssignmentExpression	"* comma = strchr ( oldstr , ',' )"		5536909	2		=			
ANR	5537441	Identifier	comma		5536909	0					
ANR	5537442	CallExpression	"strchr ( oldstr , ',' )"		5536909	1					
ANR	5537443	Callee	strchr		5536909	0					
ANR	5537444	Identifier	strchr		5536909	0					
ANR	5537445	ArgumentList	oldstr		5536909	1					
ANR	5537446	Argument	oldstr		5536909	0					
ANR	5537447	Identifier	oldstr		5536909	0					
ANR	5537448	Argument	"','"		5536909	1					
ANR	5537449	PrimaryExpression	"','"		5536909	0					
ANR	5537450	IfStatement	if ( comma )		5536909	1					
ANR	5537451	Condition	comma	350:7:9813:9817	5536909	0	True				
ANR	5537452	Identifier	comma		5536909	0					
ANR	5537453	CompoundStatement		71:14:1842:1842	5536909	1					
ANR	5537454	ExpressionStatement	* comma = 0	351:4:9826:9836	5536909	0	True				
ANR	5537455	AssignmentExpression	* comma = 0		5536909	0		=			
ANR	5537456	UnaryOperationExpression	* comma		5536909	0					
ANR	5537457	UnaryOperator	*		5536909	0					
ANR	5537458	Identifier	comma		5536909	1					
ANR	5537459	PrimaryExpression	0		5536909	1					
ANR	5537460	ExpressionStatement	"r_str_case ( oldstr , true )"	352:4:9842:9867	5536909	1	True				
ANR	5537461	CallExpression	"r_str_case ( oldstr , true )"		5536909	0					
ANR	5537462	Callee	r_str_case		5536909	0					
ANR	5537463	Identifier	r_str_case		5536909	0					
ANR	5537464	ArgumentList	oldstr		5536909	1					
ANR	5537465	Argument	oldstr		5536909	0					
ANR	5537466	Identifier	oldstr		5536909	0					
ANR	5537467	Argument	true		5536909	1					
ANR	5537468	Identifier	true		5536909	0					
ANR	5537469	ExpressionStatement	"* comma = ','"	353:4:9873:9885	5536909	2	True				
ANR	5537470	AssignmentExpression	"* comma = ','"		5536909	0		=			
ANR	5537471	UnaryOperationExpression	* comma		5536909	0					
ANR	5537472	UnaryOperator	*		5536909	0					
ANR	5537473	Identifier	comma		5536909	1					
ANR	5537474	PrimaryExpression	"','"		5536909	1					
ANR	5537475	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5536909	4					
ANR	5537476	Condition	"strstr ( tstr , oldstr )"	356:6:9902:9922	5536909	0	True				
ANR	5537477	CallExpression	"strstr ( tstr , oldstr )"		5536909	0					
ANR	5537478	Callee	strstr		5536909	0					
ANR	5537479	Identifier	strstr		5536909	0					
ANR	5537480	ArgumentList	tstr		5536909	1					
ANR	5537481	Argument	tstr		5536909	0					
ANR	5537482	Identifier	tstr		5536909	0					
ANR	5537483	Argument	oldstr		5536909	1					
ANR	5537484	Identifier	oldstr		5536909	0					
ANR	5537485	CompoundStatement		77:29:1947:1947	5536909	1					
ANR	5537486	IfStatement	if ( p -> localvar_only )		5536909	0					
ANR	5537487	Condition	p -> localvar_only	357:7:9934:9949	5536909	0	True				
ANR	5537488	PtrMemberAccess	p -> localvar_only		5536909	0					
ANR	5537489	Identifier	p		5536909	0					
ANR	5537490	Identifier	localvar_only		5536909	1					
ANR	5537491	CompoundStatement		78:25:1974:1974	5536909	1					
ANR	5537492	ExpressionStatement	"newstr = r_str_newf ( ""[%s]"" , var -> name )"	358:4:9958:9997	5536909	0	True				
ANR	5537493	AssignmentExpression	"newstr = r_str_newf ( ""[%s]"" , var -> name )"		5536909	0		=			
ANR	5537494	Identifier	newstr		5536909	0					
ANR	5537495	CallExpression	"r_str_newf ( ""[%s]"" , var -> name )"		5536909	1					
ANR	5537496	Callee	r_str_newf		5536909	0					
ANR	5537497	Identifier	r_str_newf		5536909	0					
ANR	5537498	ArgumentList	"""[%s]"""		5536909	1					
ANR	5537499	Argument	"""[%s]"""		5536909	0					
ANR	5537500	PrimaryExpression	"""[%s]"""		5536909	0					
ANR	5537501	Argument	var -> name		5536909	1					
ANR	5537502	PtrMemberAccess	var -> name		5536909	0					
ANR	5537503	Identifier	var		5536909	0					
ANR	5537504	Identifier	name		5536909	1					
ANR	5537505	ElseStatement	else		5536909	0					
ANR	5537506	CompoundStatement		80:10:2031:2031	5536909	0					
ANR	5537507	ExpressionStatement	"newstr = r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"	360:4:10015:10098	5536909	0	True				
ANR	5537508	AssignmentExpression	"newstr = r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	0		=			
ANR	5537509	Identifier	newstr		5536909	0					
ANR	5537510	CallExpression	"r_str_newf ( ""[%s %c %s]"" , reg , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	1					
ANR	5537511	Callee	r_str_newf		5536909	0					
ANR	5537512	Identifier	r_str_newf		5536909	0					
ANR	5537513	ArgumentList	"""[%s %c %s]"""		5536909	1					
ANR	5537514	Argument	"""[%s %c %s]"""		5536909	0					
ANR	5537515	PrimaryExpression	"""[%s %c %s]"""		5536909	0					
ANR	5537516	Argument	reg		5536909	1					
ANR	5537517	Identifier	reg		5536909	0					
ANR	5537518	Argument	var -> delta > 0 ? '+' : '-'		5536909	2					
ANR	5537519	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5536909	0					
ANR	5537520	Condition	var -> delta > 0		5536909	0					
ANR	5537521	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537522	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537523	Identifier	var		5536909	0					
ANR	5537524	Identifier	delta		5536909	1					
ANR	5537525	PrimaryExpression	0		5536909	1					
ANR	5537526	PrimaryExpression	'+'		5536909	1					
ANR	5537527	PrimaryExpression	'-'		5536909	2					
ANR	5537528	Argument	var -> name		5536909	3					
ANR	5537529	PtrMemberAccess	var -> name		5536909	0					
ANR	5537530	Identifier	var		5536909	0					
ANR	5537531	Identifier	name		5536909	1					
ANR	5537532	IfStatement	if ( ucase )		5536909	1					
ANR	5537533	Condition	ucase	363:7:10112:10116	5536909	0	True				
ANR	5537534	Identifier	ucase		5536909	0					
ANR	5537535	CompoundStatement		85:4:2147:2181	5536909	1					
ANR	5537536	IdentifierDeclStatement	"char * comma = strchr ( newstr , ' ' ) ;"	364:4:10125:10159	5536909	0	True				
ANR	5537537	IdentifierDecl	"* comma = strchr ( newstr , ' ' )"		5536909	0					
ANR	5537538	IdentifierDeclType	char *		5536909	0					
ANR	5537539	Identifier	comma		5536909	1					
ANR	5537540	AssignmentExpression	"* comma = strchr ( newstr , ' ' )"		5536909	2		=			
ANR	5537541	Identifier	comma		5536909	0					
ANR	5537542	CallExpression	"strchr ( newstr , ' ' )"		5536909	1					
ANR	5537543	Callee	strchr		5536909	0					
ANR	5537544	Identifier	strchr		5536909	0					
ANR	5537545	ArgumentList	newstr		5536909	1					
ANR	5537546	Argument	newstr		5536909	0					
ANR	5537547	Identifier	newstr		5536909	0					
ANR	5537548	Argument	' '		5536909	1					
ANR	5537549	PrimaryExpression	' '		5536909	0					
ANR	5537550	IfStatement	if ( comma )		5536909	1					
ANR	5537551	Condition	comma	365:8:10169:10173	5536909	0	True				
ANR	5537552	Identifier	comma		5536909	0					
ANR	5537553	CompoundStatement		86:15:2198:2198	5536909	1					
ANR	5537554	ExpressionStatement	* comma = 0	366:5:10183:10193	5536909	0	True				
ANR	5537555	AssignmentExpression	* comma = 0		5536909	0		=			
ANR	5537556	UnaryOperationExpression	* comma		5536909	0					
ANR	5537557	UnaryOperator	*		5536909	0					
ANR	5537558	Identifier	comma		5536909	1					
ANR	5537559	PrimaryExpression	0		5536909	1					
ANR	5537560	ExpressionStatement	"r_str_case ( newstr , true )"	367:5:10200:10225	5536909	1	True				
ANR	5537561	CallExpression	"r_str_case ( newstr , true )"		5536909	0					
ANR	5537562	Callee	r_str_case		5536909	0					
ANR	5537563	Identifier	r_str_case		5536909	0					
ANR	5537564	ArgumentList	newstr		5536909	1					
ANR	5537565	Argument	newstr		5536909	0					
ANR	5537566	Identifier	newstr		5536909	0					
ANR	5537567	Argument	true		5536909	1					
ANR	5537568	Identifier	true		5536909	0					
ANR	5537569	ExpressionStatement	* comma = ' '	368:5:10232:10244	5536909	2	True				
ANR	5537570	AssignmentExpression	* comma = ' '		5536909	0		=			
ANR	5537571	UnaryOperationExpression	* comma		5536909	0					
ANR	5537572	UnaryOperator	*		5536909	0					
ANR	5537573	Identifier	comma		5536909	1					
ANR	5537574	PrimaryExpression	' '		5536909	1					
ANR	5537575	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	371:3:10260:10306	5536909	2	True				
ANR	5537576	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	0		=			
ANR	5537577	Identifier	tstr		5536909	0					
ANR	5537578	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	1					
ANR	5537579	Callee	r_str_replace		5536909	0					
ANR	5537580	Identifier	r_str_replace		5536909	0					
ANR	5537581	ArgumentList	tstr		5536909	1					
ANR	5537582	Argument	tstr		5536909	0					
ANR	5537583	Identifier	tstr		5536909	0					
ANR	5537584	Argument	oldstr		5536909	1					
ANR	5537585	Identifier	oldstr		5536909	0					
ANR	5537586	Argument	newstr		5536909	2					
ANR	5537587	Identifier	newstr		5536909	0					
ANR	5537588	Argument	1		5536909	3					
ANR	5537589	PrimaryExpression	1		5536909	0					
ANR	5537590	ExpressionStatement	free ( newstr )	372:3:10311:10324	5536909	3	True				
ANR	5537591	CallExpression	free ( newstr )		5536909	0					
ANR	5537592	Callee	free		5536909	0					
ANR	5537593	Identifier	free		5536909	0					
ANR	5537594	ArgumentList	newstr		5536909	1					
ANR	5537595	Argument	newstr		5536909	0					
ANR	5537596	Identifier	newstr		5536909	0					
ANR	5537597	ExpressionStatement	free ( oldstr )	373:3:10329:10342	5536909	4	True				
ANR	5537598	CallExpression	free ( oldstr )		5536909	0					
ANR	5537599	Callee	free		5536909	0					
ANR	5537600	Identifier	free		5536909	0					
ANR	5537601	ArgumentList	oldstr		5536909	1					
ANR	5537602	Argument	oldstr		5536909	0					
ANR	5537603	Identifier	oldstr		5536909	0					
ANR	5537604	BreakStatement	break ;	374:3:10347:10352	5536909	5	True				
ANR	5537605	ExpressionStatement	free ( oldstr )	376:2:10360:10373	5536909	5	True				
ANR	5537606	CallExpression	free ( oldstr )		5536909	0					
ANR	5537607	Callee	free		5536909	0					
ANR	5537608	Identifier	free		5536909	0					
ANR	5537609	ArgumentList	oldstr		5536909	1					
ANR	5537610	Argument	oldstr		5536909	0					
ANR	5537611	Identifier	oldstr		5536909	0					
ANR	5537612	Statement	r_list_foreach	378:1:10379:10392	5536909	22	True				
ANR	5537613	Statement	(	378:16:10394:10394	5536909	23	True				
ANR	5537614	Statement	spargs	378:17:10395:10400	5536909	24	True				
ANR	5537615	Statement	","	378:23:10401:10401	5536909	25	True				
ANR	5537616	Statement	iter	378:25:10403:10406	5536909	26	True				
ANR	5537617	Statement	","	378:29:10407:10407	5536909	27	True				
ANR	5537618	Statement	var	378:31:10409:10411	5536909	28	True				
ANR	5537619	Statement	)	378:34:10412:10412	5536909	29	True				
ANR	5537620	CompoundStatement		99:36:2436:2436	5536909	30					
ANR	5537621	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5536909	0					
ANR	5537622	Condition	var -> delta > - 10 && var -> delta < 10	379:6:10422:10456	5536909	0	True				
ANR	5537623	AndExpression	var -> delta > - 10 && var -> delta < 10		5536909	0		&&			
ANR	5537624	RelationalExpression	var -> delta > - 10		5536909	0		>			
ANR	5537625	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537626	Identifier	var		5536909	0					
ANR	5537627	Identifier	delta		5536909	1					
ANR	5537628	UnaryOperationExpression	- 10		5536909	1					
ANR	5537629	UnaryOperator	-		5536909	0					
ANR	5537630	PrimaryExpression	10		5536909	1					
ANR	5537631	RelationalExpression	var -> delta < 10		5536909	1		<			
ANR	5537632	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537633	Identifier	var		5536909	0					
ANR	5537634	Identifier	delta		5536909	1					
ANR	5537635	PrimaryExpression	10		5536909	1					
ANR	5537636	CompoundStatement		100:43:2481:2481	5536909	1					
ANR	5537637	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, %d]"" , var -> delta )"	380:3:10464:10508	5536909	0	True				
ANR	5537638	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, %d]"" , var -> delta )"		5536909	0		=			
ANR	5537639	Identifier	oldstr		5536909	0					
ANR	5537640	CallExpression	"r_str_newf ( ""[sp, %d]"" , var -> delta )"		5536909	1					
ANR	5537641	Callee	r_str_newf		5536909	0					
ANR	5537642	Identifier	r_str_newf		5536909	0					
ANR	5537643	ArgumentList	"""[sp, %d]"""		5536909	1					
ANR	5537644	Argument	"""[sp, %d]"""		5536909	0					
ANR	5537645	PrimaryExpression	"""[sp, %d]"""		5536909	0					
ANR	5537646	Argument	var -> delta		5536909	1					
ANR	5537647	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537648	Identifier	var		5536909	0					
ANR	5537649	Identifier	delta		5536909	1					
ANR	5537650	ElseStatement	else		5536909	0					
ANR	5537651	IfStatement	if ( var -> delta > 0 )		5536909	0					
ANR	5537652	Condition	var -> delta > 0	381:13:10523:10536	5536909	0	True				
ANR	5537653	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537654	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537655	Identifier	var		5536909	0					
ANR	5537656	Identifier	delta		5536909	1					
ANR	5537657	PrimaryExpression	0		5536909	1					
ANR	5537658	CompoundStatement		102:29:2561:2561	5536909	1					
ANR	5537659	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"	382:3:10544:10590	5536909	0	True				
ANR	5537660	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"		5536909	0		=			
ANR	5537661	Identifier	oldstr		5536909	0					
ANR	5537662	CallExpression	"r_str_newf ( ""[sp, 0x%x]"" , var -> delta )"		5536909	1					
ANR	5537663	Callee	r_str_newf		5536909	0					
ANR	5537664	Identifier	r_str_newf		5536909	0					
ANR	5537665	ArgumentList	"""[sp, 0x%x]"""		5536909	1					
ANR	5537666	Argument	"""[sp, 0x%x]"""		5536909	0					
ANR	5537667	PrimaryExpression	"""[sp, 0x%x]"""		5536909	0					
ANR	5537668	Argument	var -> delta		5536909	1					
ANR	5537669	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537670	Identifier	var		5536909	0					
ANR	5537671	Identifier	delta		5536909	1					
ANR	5537672	ElseStatement	else		5536909	0					
ANR	5537673	CompoundStatement		104:9:2623:2623	5536909	0					
ANR	5537674	ExpressionStatement	"oldstr = r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"	384:3:10606:10654	5536909	0	True				
ANR	5537675	AssignmentExpression	"oldstr = r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"		5536909	0		=			
ANR	5537676	Identifier	oldstr		5536909	0					
ANR	5537677	CallExpression	"r_str_newf ( ""[sp, -0x%x]"" , - var -> delta )"		5536909	1					
ANR	5537678	Callee	r_str_newf		5536909	0					
ANR	5537679	Identifier	r_str_newf		5536909	0					
ANR	5537680	ArgumentList	"""[sp, -0x%x]"""		5536909	1					
ANR	5537681	Argument	"""[sp, -0x%x]"""		5536909	0					
ANR	5537682	PrimaryExpression	"""[sp, -0x%x]"""		5536909	0					
ANR	5537683	Argument	- var -> delta		5536909	1					
ANR	5537684	UnaryOperationExpression	- var -> delta		5536909	0					
ANR	5537685	UnaryOperator	-		5536909	0					
ANR	5537686	PtrMemberAccess	var -> delta		5536909	1					
ANR	5537687	Identifier	var		5536909	0					
ANR	5537688	Identifier	delta		5536909	1					
ANR	5537689	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5536909	1					
ANR	5537690	Condition	"strstr ( tstr , oldstr )"	386:6:10666:10686	5536909	0	True				
ANR	5537691	CallExpression	"strstr ( tstr , oldstr )"		5536909	0					
ANR	5537692	Callee	strstr		5536909	0					
ANR	5537693	Identifier	strstr		5536909	0					
ANR	5537694	ArgumentList	tstr		5536909	1					
ANR	5537695	Argument	tstr		5536909	0					
ANR	5537696	Identifier	tstr		5536909	0					
ANR	5537697	Argument	oldstr		5536909	1					
ANR	5537698	Identifier	oldstr		5536909	0					
ANR	5537699	CompoundStatement		107:29:2711:2711	5536909	1					
ANR	5537700	ExpressionStatement	"newstr = r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"	387:3:10694:10775	5536909	0	True				
ANR	5537701	AssignmentExpression	"newstr = r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	0		=			
ANR	5537702	Identifier	newstr		5536909	0					
ANR	5537703	CallExpression	"r_str_newf ( ""[sp %c %s]"" , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	1					
ANR	5537704	Callee	r_str_newf		5536909	0					
ANR	5537705	Identifier	r_str_newf		5536909	0					
ANR	5537706	ArgumentList	"""[sp %c %s]"""		5536909	1					
ANR	5537707	Argument	"""[sp %c %s]"""		5536909	0					
ANR	5537708	PrimaryExpression	"""[sp %c %s]"""		5536909	0					
ANR	5537709	Argument	var -> delta > 0 ? '+' : '-'		5536909	1					
ANR	5537710	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5536909	0					
ANR	5537711	Condition	var -> delta > 0		5536909	0					
ANR	5537712	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537713	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537714	Identifier	var		5536909	0					
ANR	5537715	Identifier	delta		5536909	1					
ANR	5537716	PrimaryExpression	0		5536909	1					
ANR	5537717	PrimaryExpression	'+'		5536909	1					
ANR	5537718	PrimaryExpression	'-'		5536909	2					
ANR	5537719	Argument	var -> name		5536909	2					
ANR	5537720	PtrMemberAccess	var -> name		5536909	0					
ANR	5537721	Identifier	var		5536909	0					
ANR	5537722	Identifier	name		5536909	1					
ANR	5537723	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	390:3:10780:10826	5536909	1	True				
ANR	5537724	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	0		=			
ANR	5537725	Identifier	tstr		5536909	0					
ANR	5537726	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	1					
ANR	5537727	Callee	r_str_replace		5536909	0					
ANR	5537728	Identifier	r_str_replace		5536909	0					
ANR	5537729	ArgumentList	tstr		5536909	1					
ANR	5537730	Argument	tstr		5536909	0					
ANR	5537731	Identifier	tstr		5536909	0					
ANR	5537732	Argument	oldstr		5536909	1					
ANR	5537733	Identifier	oldstr		5536909	0					
ANR	5537734	Argument	newstr		5536909	2					
ANR	5537735	Identifier	newstr		5536909	0					
ANR	5537736	Argument	1		5536909	3					
ANR	5537737	PrimaryExpression	1		5536909	0					
ANR	5537738	ExpressionStatement	free ( newstr )	391:3:10831:10844	5536909	2	True				
ANR	5537739	CallExpression	free ( newstr )		5536909	0					
ANR	5537740	Callee	free		5536909	0					
ANR	5537741	Identifier	free		5536909	0					
ANR	5537742	ArgumentList	newstr		5536909	1					
ANR	5537743	Argument	newstr		5536909	0					
ANR	5537744	Identifier	newstr		5536909	0					
ANR	5537745	ExpressionStatement	free ( oldstr )	392:3:10849:10862	5536909	3	True				
ANR	5537746	CallExpression	free ( oldstr )		5536909	0					
ANR	5537747	Callee	free		5536909	0					
ANR	5537748	Identifier	free		5536909	0					
ANR	5537749	ArgumentList	oldstr		5536909	1					
ANR	5537750	Argument	oldstr		5536909	0					
ANR	5537751	Identifier	oldstr		5536909	0					
ANR	5537752	BreakStatement	break ;	393:3:10867:10872	5536909	4	True				
ANR	5537753	ExpressionStatement	free ( oldstr )	395:2:10880:10893	5536909	2	True				
ANR	5537754	CallExpression	free ( oldstr )		5536909	0					
ANR	5537755	Callee	free		5536909	0					
ANR	5537756	Identifier	free		5536909	0					
ANR	5537757	ArgumentList	oldstr		5536909	1					
ANR	5537758	Argument	oldstr		5536909	0					
ANR	5537759	Identifier	oldstr		5536909	0					
ANR	5537760	IfStatement	if ( var -> delta > - 10 && var -> delta < 10 )		5536909	3					
ANR	5537761	Condition	var -> delta > - 10 && var -> delta < 10	396:6:10901:10935	5536909	0	True				
ANR	5537762	AndExpression	var -> delta > - 10 && var -> delta < 10		5536909	0		&&			
ANR	5537763	RelationalExpression	var -> delta > - 10		5536909	0		>			
ANR	5537764	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537765	Identifier	var		5536909	0					
ANR	5537766	Identifier	delta		5536909	1					
ANR	5537767	UnaryOperationExpression	- 10		5536909	1					
ANR	5537768	UnaryOperator	-		5536909	0					
ANR	5537769	PrimaryExpression	10		5536909	1					
ANR	5537770	RelationalExpression	var -> delta < 10		5536909	1		<			
ANR	5537771	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537772	Identifier	var		5536909	0					
ANR	5537773	Identifier	delta		5536909	1					
ANR	5537774	PrimaryExpression	10		5536909	1					
ANR	5537775	CompoundStatement		117:43:2960:2960	5536909	1					
ANR	5537776	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"	397:3:10943:11027	5536909	0	True				
ANR	5537777	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5536909	0		=			
ANR	5537778	Identifier	oldstr		5536909	0					
ANR	5537779	CallExpression	"r_str_newf ( ""[%s, %d]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5536909	1					
ANR	5537780	Callee	r_str_newf		5536909	0					
ANR	5537781	Identifier	r_str_newf		5536909	0					
ANR	5537782	ArgumentList	"""[%s, %d]"""		5536909	1					
ANR	5537783	Argument	"""[%s, %d]"""		5536909	0					
ANR	5537784	PrimaryExpression	"""[%s, %d]"""		5536909	0					
ANR	5537785	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	1					
ANR	5537786	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	0					
ANR	5537787	PtrMemberAccess	anal -> reg -> name		5536909	0					
ANR	5537788	PtrMemberAccess	anal -> reg		5536909	0					
ANR	5537789	Identifier	anal		5536909	0					
ANR	5537790	Identifier	reg		5536909	1					
ANR	5537791	Identifier	name		5536909	1					
ANR	5537792	Identifier	R_REG_NAME_SP		5536909	1					
ANR	5537793	Argument	var -> delta		5536909	2					
ANR	5537794	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537795	Identifier	var		5536909	0					
ANR	5537796	Identifier	delta		5536909	1					
ANR	5537797	ElseStatement	else		5536909	0					
ANR	5537798	IfStatement	if ( var -> delta > 0 )		5536909	0					
ANR	5537799	Condition	var -> delta > 0	400:13:11042:11055	5536909	0	True				
ANR	5537800	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537801	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537802	Identifier	var		5536909	0					
ANR	5537803	Identifier	delta		5536909	1					
ANR	5537804	PrimaryExpression	0		5536909	1					
ANR	5537805	CompoundStatement		121:29:3080:3080	5536909	1					
ANR	5537806	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"	401:3:11063:11149	5536909	0	True				
ANR	5537807	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5536909	0		=			
ANR	5537808	Identifier	oldstr		5536909	0					
ANR	5537809	CallExpression	"r_str_newf ( ""[%s, 0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , var -> delta )"		5536909	1					
ANR	5537810	Callee	r_str_newf		5536909	0					
ANR	5537811	Identifier	r_str_newf		5536909	0					
ANR	5537812	ArgumentList	"""[%s, 0x%x]"""		5536909	1					
ANR	5537813	Argument	"""[%s, 0x%x]"""		5536909	0					
ANR	5537814	PrimaryExpression	"""[%s, 0x%x]"""		5536909	0					
ANR	5537815	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	1					
ANR	5537816	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	0					
ANR	5537817	PtrMemberAccess	anal -> reg -> name		5536909	0					
ANR	5537818	PtrMemberAccess	anal -> reg		5536909	0					
ANR	5537819	Identifier	anal		5536909	0					
ANR	5537820	Identifier	reg		5536909	1					
ANR	5537821	Identifier	name		5536909	1					
ANR	5537822	Identifier	R_REG_NAME_SP		5536909	1					
ANR	5537823	Argument	var -> delta		5536909	2					
ANR	5537824	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537825	Identifier	var		5536909	0					
ANR	5537826	Identifier	delta		5536909	1					
ANR	5537827	ElseStatement	else		5536909	0					
ANR	5537828	CompoundStatement		125:9:3182:3182	5536909	0					
ANR	5537829	ExpressionStatement	"oldstr = r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"	405:3:11165:11253	5536909	0	True				
ANR	5537830	AssignmentExpression	"oldstr = r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"		5536909	0		=			
ANR	5537831	Identifier	oldstr		5536909	0					
ANR	5537832	CallExpression	"r_str_newf ( ""[%s, -0x%x]"" , anal -> reg -> name [ R_REG_NAME_SP ] , - var -> delta )"		5536909	1					
ANR	5537833	Callee	r_str_newf		5536909	0					
ANR	5537834	Identifier	r_str_newf		5536909	0					
ANR	5537835	ArgumentList	"""[%s, -0x%x]"""		5536909	1					
ANR	5537836	Argument	"""[%s, -0x%x]"""		5536909	0					
ANR	5537837	PrimaryExpression	"""[%s, -0x%x]"""		5536909	0					
ANR	5537838	Argument	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	1					
ANR	5537839	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_SP ]		5536909	0					
ANR	5537840	PtrMemberAccess	anal -> reg -> name		5536909	0					
ANR	5537841	PtrMemberAccess	anal -> reg		5536909	0					
ANR	5537842	Identifier	anal		5536909	0					
ANR	5537843	Identifier	reg		5536909	1					
ANR	5537844	Identifier	name		5536909	1					
ANR	5537845	Identifier	R_REG_NAME_SP		5536909	1					
ANR	5537846	Argument	- var -> delta		5536909	2					
ANR	5537847	UnaryOperationExpression	- var -> delta		5536909	0					
ANR	5537848	UnaryOperator	-		5536909	0					
ANR	5537849	PtrMemberAccess	var -> delta		5536909	1					
ANR	5537850	Identifier	var		5536909	0					
ANR	5537851	Identifier	delta		5536909	1					
ANR	5537852	IfStatement	"if ( strstr ( tstr , oldstr ) )"		5536909	4					
ANR	5537853	Condition	"strstr ( tstr , oldstr )"	409:6:11265:11285	5536909	0	True				
ANR	5537854	CallExpression	"strstr ( tstr , oldstr )"		5536909	0					
ANR	5537855	Callee	strstr		5536909	0					
ANR	5537856	Identifier	strstr		5536909	0					
ANR	5537857	ArgumentList	tstr		5536909	1					
ANR	5537858	Argument	tstr		5536909	0					
ANR	5537859	Identifier	tstr		5536909	0					
ANR	5537860	Argument	oldstr		5536909	1					
ANR	5537861	Identifier	oldstr		5536909	0					
ANR	5537862	CompoundStatement		130:29:3310:3310	5536909	1					
ANR	5537863	ExpressionStatement	"newstr = r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"	410:3:11293:11410	5536909	0	True				
ANR	5537864	AssignmentExpression	"newstr = r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	0		=			
ANR	5537865	Identifier	newstr		5536909	0					
ANR	5537866	CallExpression	"r_str_newf ( ""[%s %c %s]"" , anal -> reg -> name [ R_REG_NAME_BP ] , var -> delta > 0 ? '+' : '-' , var -> name )"		5536909	1					
ANR	5537867	Callee	r_str_newf		5536909	0					
ANR	5537868	Identifier	r_str_newf		5536909	0					
ANR	5537869	ArgumentList	"""[%s %c %s]"""		5536909	1					
ANR	5537870	Argument	"""[%s %c %s]"""		5536909	0					
ANR	5537871	PrimaryExpression	"""[%s %c %s]"""		5536909	0					
ANR	5537872	Argument	anal -> reg -> name [ R_REG_NAME_BP ]		5536909	1					
ANR	5537873	ArrayIndexing	anal -> reg -> name [ R_REG_NAME_BP ]		5536909	0					
ANR	5537874	PtrMemberAccess	anal -> reg -> name		5536909	0					
ANR	5537875	PtrMemberAccess	anal -> reg		5536909	0					
ANR	5537876	Identifier	anal		5536909	0					
ANR	5537877	Identifier	reg		5536909	1					
ANR	5537878	Identifier	name		5536909	1					
ANR	5537879	Identifier	R_REG_NAME_BP		5536909	1					
ANR	5537880	Argument	var -> delta > 0 ? '+' : '-'		5536909	2					
ANR	5537881	ConditionalExpression	var -> delta > 0 ? '+' : '-'		5536909	0					
ANR	5537882	Condition	var -> delta > 0		5536909	0					
ANR	5537883	RelationalExpression	var -> delta > 0		5536909	0		>			
ANR	5537884	PtrMemberAccess	var -> delta		5536909	0					
ANR	5537885	Identifier	var		5536909	0					
ANR	5537886	Identifier	delta		5536909	1					
ANR	5537887	PrimaryExpression	0		5536909	1					
ANR	5537888	PrimaryExpression	'+'		5536909	1					
ANR	5537889	PrimaryExpression	'-'		5536909	2					
ANR	5537890	Argument	var -> name		5536909	3					
ANR	5537891	PtrMemberAccess	var -> name		5536909	0					
ANR	5537892	Identifier	var		5536909	0					
ANR	5537893	Identifier	name		5536909	1					
ANR	5537894	ExpressionStatement	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"	414:3:11415:11461	5536909	1	True				
ANR	5537895	AssignmentExpression	"tstr = r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	0		=			
ANR	5537896	Identifier	tstr		5536909	0					
ANR	5537897	CallExpression	"r_str_replace ( tstr , oldstr , newstr , 1 )"		5536909	1					
ANR	5537898	Callee	r_str_replace		5536909	0					
ANR	5537899	Identifier	r_str_replace		5536909	0					
ANR	5537900	ArgumentList	tstr		5536909	1					
ANR	5537901	Argument	tstr		5536909	0					
ANR	5537902	Identifier	tstr		5536909	0					
ANR	5537903	Argument	oldstr		5536909	1					
ANR	5537904	Identifier	oldstr		5536909	0					
ANR	5537905	Argument	newstr		5536909	2					
ANR	5537906	Identifier	newstr		5536909	0					
ANR	5537907	Argument	1		5536909	3					
ANR	5537908	PrimaryExpression	1		5536909	0					
ANR	5537909	ExpressionStatement	free ( newstr )	415:3:11466:11479	5536909	2	True				
ANR	5537910	CallExpression	free ( newstr )		5536909	0					
ANR	5537911	Callee	free		5536909	0					
ANR	5537912	Identifier	free		5536909	0					
ANR	5537913	ArgumentList	newstr		5536909	1					
ANR	5537914	Argument	newstr		5536909	0					
ANR	5537915	Identifier	newstr		5536909	0					
ANR	5537916	ExpressionStatement	free ( oldstr )	416:3:11484:11497	5536909	3	True				
ANR	5537917	CallExpression	free ( oldstr )		5536909	0					
ANR	5537918	Callee	free		5536909	0					
ANR	5537919	Identifier	free		5536909	0					
ANR	5537920	ArgumentList	oldstr		5536909	1					
ANR	5537921	Argument	oldstr		5536909	0					
ANR	5537922	Identifier	oldstr		5536909	0					
ANR	5537923	BreakStatement	break ;	417:3:11502:11507	5536909	4	True				
ANR	5537924	ExpressionStatement	free ( oldstr )	419:2:11515:11528	5536909	5	True				
ANR	5537925	CallExpression	free ( oldstr )		5536909	0					
ANR	5537926	Callee	free		5536909	0					
ANR	5537927	Identifier	free		5536909	0					
ANR	5537928	ArgumentList	oldstr		5536909	1					
ANR	5537929	Argument	oldstr		5536909	0					
ANR	5537930	Identifier	oldstr		5536909	0					
ANR	5537931	ExpressionStatement	r_list_free ( bpargs )	421:1:11534:11554	5536909	31	True				
ANR	5537932	CallExpression	r_list_free ( bpargs )		5536909	0					
ANR	5537933	Callee	r_list_free		5536909	0					
ANR	5537934	Identifier	r_list_free		5536909	0					
ANR	5537935	ArgumentList	bpargs		5536909	1					
ANR	5537936	Argument	bpargs		5536909	0					
ANR	5537937	Identifier	bpargs		5536909	0					
ANR	5537938	ExpressionStatement	r_list_free ( spargs )	422:1:11557:11577	5536909	32	True				
ANR	5537939	CallExpression	r_list_free ( spargs )		5536909	0					
ANR	5537940	Callee	r_list_free		5536909	0					
ANR	5537941	Identifier	r_list_free		5536909	0					
ANR	5537942	ArgumentList	spargs		5536909	1					
ANR	5537943	Argument	spargs		5536909	0					
ANR	5537944	Identifier	spargs		5536909	0					
ANR	5537945	IfStatement	if ( len > strlen ( tstr ) )		5536909	33					
ANR	5537946	Condition	len > strlen ( tstr )	423:5:11584:11602	5536909	0	True				
ANR	5537947	RelationalExpression	len > strlen ( tstr )		5536909	0		>			
ANR	5537948	Identifier	len		5536909	0					
ANR	5537949	CallExpression	strlen ( tstr )		5536909	1					
ANR	5537950	Callee	strlen		5536909	0					
ANR	5537951	Identifier	strlen		5536909	0					
ANR	5537952	ArgumentList	tstr		5536909	1					
ANR	5537953	Argument	tstr		5536909	0					
ANR	5537954	Identifier	tstr		5536909	0					
ANR	5537955	CompoundStatement		144:26:3627:3627	5536909	1					
ANR	5537956	ExpressionStatement	"strcpy ( str , tstr )"	424:2:11609:11628	5536909	0	True				
ANR	5537957	CallExpression	"strcpy ( str , tstr )"		5536909	0					
ANR	5537958	Callee	strcpy		5536909	0					
ANR	5537959	Identifier	strcpy		5536909	0					
ANR	5537960	ArgumentList	str		5536909	1					
ANR	5537961	Argument	str		5536909	0					
ANR	5537962	Identifier	str		5536909	0					
ANR	5537963	Argument	tstr		5536909	1					
ANR	5537964	Identifier	tstr		5536909	0					
ANR	5537965	ElseStatement	else		5536909	0					
ANR	5537966	CompoundStatement		146:8:3660:3660	5536909	0					
ANR	5537967	ExpressionStatement	free ( tstr )	427:2:11682:11693	5536909	0	True				
ANR	5537968	CallExpression	free ( tstr )		5536909	0					
ANR	5537969	Callee	free		5536909	0					
ANR	5537970	Identifier	free		5536909	0					
ANR	5537971	ArgumentList	tstr		5536909	1					
ANR	5537972	Argument	tstr		5536909	0					
ANR	5537973	Identifier	tstr		5536909	0					
ANR	5537974	ReturnStatement	return false ;	428:2:11697:11709	5536909	1	True				
ANR	5537975	Identifier	false		5536909	0					
ANR	5537976	ExpressionStatement	free ( tstr )	430:1:11715:11726	5536909	34	True				
ANR	5537977	CallExpression	free ( tstr )		5536909	0					
ANR	5537978	Callee	free		5536909	0					
ANR	5537979	Identifier	free		5536909	0					
ANR	5537980	ArgumentList	tstr		5536909	1					
ANR	5537981	Argument	tstr		5536909	0					
ANR	5537982	Identifier	tstr		5536909	0					
ANR	5537983	ReturnStatement	return true ;	431:1:11729:11740	5536909	35	True				
ANR	5537984	Identifier	true		5536909	0					
ANR	5537985	ReturnType	static bool		5536909	1					
ANR	5537986	Identifier	varsub		5536909	2					
ANR	5537987	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5536909	3					
ANR	5537988	Parameter	RParse * p	280:19:7894:7902	5536909	0	True				
ANR	5537989	ParameterType	RParse *		5536909	0					
ANR	5537990	Identifier	p		5536909	1					
ANR	5537991	Parameter	RAnalFunction * f	280:30:7905:7920	5536909	1	True				
ANR	5537992	ParameterType	RAnalFunction *		5536909	0					
ANR	5537993	Identifier	f		5536909	1					
ANR	5537994	Parameter	ut64 addr	280:48:7923:7931	5536909	2	True				
ANR	5537995	ParameterType	ut64		5536909	0					
ANR	5537996	Identifier	addr		5536909	1					
ANR	5537997	Parameter	int oplen	280:59:7934:7942	5536909	3	True				
ANR	5537998	ParameterType	int		5536909	0					
ANR	5537999	Identifier	oplen		5536909	1					
ANR	5538000	Parameter	char * data	280:70:7945:7954	5536909	4	True				
ANR	5538001	ParameterType	char *		5536909	0					
ANR	5538002	Identifier	data		5536909	1					
ANR	5538003	Parameter	char * str	280:82:7957:7965	5536909	5	True				
ANR	5538004	ParameterType	char *		5536909	0					
ANR	5538005	Identifier	str		5536909	1					
ANR	5538006	Parameter	int len	280:93:7968:7974	5536909	6	True				
ANR	5538007	ParameterType	int		5536909	0					
ANR	5538008	Identifier	len		5536909	1					
ANR	5538009	CFGEntryNode	ENTRY		5536909		True				
ANR	5538010	CFGExitNode	EXIT		5536909		True				
ANR	5538011	CFGErrorNode	ERROR		5536909		True				
ANR	5538012	Symbol	anal -> reg		5536909						
ANR	5538013	Symbol	data		5536909						
ANR	5538014	Symbol	p -> varlist		5536909						
ANR	5538015	Symbol	sign		5536909						
ANR	5538016	Symbol	delta		5536909						
ANR	5538017	Symbol	strchr		5536909						
ANR	5538018	Symbol	tstr		5536909						
ANR	5538019	Symbol	var -> delta		5536909						
ANR	5538020	Symbol	neg		5536909						
ANR	5538021	Symbol	strlen		5536909						
ANR	5538022	Symbol	len		5536909						
ANR	5538023	Symbol	reg		5536909						
ANR	5538024	Symbol	rip		5536909						
ANR	5538025	Symbol	r_num_get		5536909						
ANR	5538026	Symbol	anal -> reg -> name		5536909						
ANR	5538027	Symbol	R_REG_NAME_BP		5536909						
ANR	5538028	Symbol	oldstr		5536909						
ANR	5538029	Symbol	NULL		5536909						
ANR	5538030	Symbol	var		5536909						
ANR	5538031	Symbol	ripend		5536909						
ANR	5538032	Symbol	iter		5536909						
ANR	5538033	Symbol	spargs		5536909						
ANR	5538034	Symbol	str		5536909						
ANR	5538035	Symbol	R_REG_NAME_SP		5536909						
ANR	5538036	Symbol	anal		5536909						
ANR	5538037	Symbol	strstr		5536909						
ANR	5538038	Symbol	bpargs		5536909						
ANR	5538039	Symbol	true		5536909						
ANR	5538040	Symbol	var -> name		5536909						
ANR	5538041	Symbol	ucase		5536909						
ANR	5538042	Symbol	* anal -> reg -> name		5536909						
ANR	5538043	Symbol	* R_REG_NAME_SP		5536909						
ANR	5538044	Symbol	r_str_casestr		5536909						
ANR	5538045	Symbol	* rip		5536909						
ANR	5538046	Symbol	oplen		5536909						
ANR	5538047	Symbol	tstr_new		5536909						
ANR	5538048	Symbol	tmplt		5536909						
ANR	5538049	Symbol	r_str_newf		5536909						
ANR	5538050	Symbol	p -> localvar_only		5536909						
ANR	5538051	Symbol	* * anal		5536909						
ANR	5538052	Symbol	* var		5536909						
ANR	5538053	Symbol	* anal		5536909						
ANR	5538054	Symbol	* * * anal		5536909						
ANR	5538055	Symbol	* anal -> reg		5536909						
ANR	5538056	Symbol	* tstr		5536909						
ANR	5538057	Symbol	r_str_replace		5536909						
ANR	5538058	Symbol	p -> analb . anal		5536909						
ANR	5538059	Symbol	* comma		5536909						
ANR	5538060	Symbol	* * anal -> reg		5536909						
ANR	5538061	Symbol	addr		5536909						
ANR	5538062	Symbol	f		5536909						
ANR	5538063	Symbol	p -> analb		5536909						
ANR	5538064	Symbol	IS_UPPER		5536909						
ANR	5538065	Symbol	false		5536909						
ANR	5538066	Symbol	p -> pseudo		5536909						
ANR	5538067	Symbol	newstr		5536909						
ANR	5538068	Symbol	off		5536909						
ANR	5538069	Symbol	repl_num		5536909						
ANR	5538070	Symbol	p		5536909						
ANR	5538071	Symbol	comma		5536909						
ANR	5538072	Symbol	~3		5536909						
ANR	5538073	Symbol	* R_REG_NAME_BP		5536909						
ANR	5538074	Symbol	p -> relsub		5536909						
ANR	5538075	Symbol	* p		5536909						
ANR	5538076	Symbol	strdup		5536909						
ANR	5538077	DeclStmt									
ANR	5538078	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_arm_pseudo
ANR	5538079	DeclStmt									
ANR	5538080	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
