command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5599535	File	data/converged/CVE-2019-16718~_radare2/profile.c								
ANR	5599536	Function	parse_alias	7:0:112:347							
ANR	5599537	FunctionDef	"parse_alias (RReg * reg , char * * tok , const int n)"		5599536	0					
ANR	5599538	CompoundStatement		7:67:179:347	5599536	0					
ANR	5599539	IfStatement	if ( n == 2 )		5599536	0					
ANR	5599540	Condition	n == 2	8:5:186:191	5599536	0	True				
ANR	5599541	EqualityExpression	n == 2		5599536	0		==			
ANR	5599542	Identifier	n		5599536	0					
ANR	5599543	PrimaryExpression	2		5599536	1					
ANR	5599544	CompoundStatement		3:2:18:60	5599536	1					
ANR	5599545	IdentifierDeclStatement	int role = r_reg_get_name_idx ( tok [ 0 ] + 1 ) ;	9:2:198:240	5599536	0	True				
ANR	5599546	IdentifierDecl	role = r_reg_get_name_idx ( tok [ 0 ] + 1 )		5599536	0					
ANR	5599547	IdentifierDeclType	int		5599536	0					
ANR	5599548	Identifier	role		5599536	1					
ANR	5599549	AssignmentExpression	role = r_reg_get_name_idx ( tok [ 0 ] + 1 )		5599536	2		=			
ANR	5599550	Identifier	role		5599536	0					
ANR	5599551	CallExpression	r_reg_get_name_idx ( tok [ 0 ] + 1 )		5599536	1					
ANR	5599552	Callee	r_reg_get_name_idx		5599536	0					
ANR	5599553	Identifier	r_reg_get_name_idx		5599536	0					
ANR	5599554	ArgumentList	tok [ 0 ] + 1		5599536	1					
ANR	5599555	Argument	tok [ 0 ] + 1		5599536	0					
ANR	5599556	AdditiveExpression	tok [ 0 ] + 1		5599536	0		+			
ANR	5599557	ArrayIndexing	tok [ 0 ]		5599536	0					
ANR	5599558	Identifier	tok		5599536	0					
ANR	5599559	PrimaryExpression	0		5599536	1					
ANR	5599560	PrimaryExpression	1		5599536	1					
ANR	5599561	ReturnStatement	"return r_reg_set_name ( reg , role , tok [ 1 ] ) ? NULL : ""Invalid alias"" ;"	10:2:244:316	5599536	1	True				
ANR	5599562	ConditionalExpression	"r_reg_set_name ( reg , role , tok [ 1 ] ) ? NULL : ""Invalid alias"""		5599536	0					
ANR	5599563	Condition	"r_reg_set_name ( reg , role , tok [ 1 ] )"		5599536	0					
ANR	5599564	CallExpression	"r_reg_set_name ( reg , role , tok [ 1 ] )"		5599536	0					
ANR	5599565	Callee	r_reg_set_name		5599536	0					
ANR	5599566	Identifier	r_reg_set_name		5599536	0					
ANR	5599567	ArgumentList	reg		5599536	1					
ANR	5599568	Argument	reg		5599536	0					
ANR	5599569	Identifier	reg		5599536	0					
ANR	5599570	Argument	role		5599536	1					
ANR	5599571	Identifier	role		5599536	0					
ANR	5599572	Argument	tok [ 1 ]		5599536	2					
ANR	5599573	ArrayIndexing	tok [ 1 ]		5599536	0					
ANR	5599574	Identifier	tok		5599536	0					
ANR	5599575	PrimaryExpression	1		5599536	1					
ANR	5599576	Identifier	NULL		5599536	1					
ANR	5599577	PrimaryExpression	"""Invalid alias"""		5599536	2					
ANR	5599578	ReturnStatement	"return ""Invalid syntax"" ;"	14:1:322:345	5599536	1	True				
ANR	5599579	PrimaryExpression	"""Invalid syntax"""		5599536	0					
ANR	5599580	ReturnType	static const char *		5599536	1					
ANR	5599581	Identifier	parse_alias		5599536	2					
ANR	5599582	ParameterList	"RReg * reg , char * * tok , const int n"		5599536	3					
ANR	5599583	Parameter	RReg * reg	7:31:143:151	5599536	0	True				
ANR	5599584	ParameterType	RReg *		5599536	0					
ANR	5599585	Identifier	reg		5599536	1					
ANR	5599586	Parameter	char * * tok	7:42:154:163	5599536	1	True				
ANR	5599587	ParameterType	char * *		5599536	0					
ANR	5599588	Identifier	tok		5599536	1					
ANR	5599589	Parameter	const int n	7:54:166:176	5599536	2	True				
ANR	5599590	ParameterType	const int		5599536	0					
ANR	5599591	Identifier	n		5599536	1					
ANR	5599592	CFGEntryNode	ENTRY		5599536		True				
ANR	5599593	CFGExitNode	EXIT		5599536		True				
ANR	5599594	Symbol	tok		5599536						
ANR	5599595	Symbol	r_reg_get_name_idx		5599536						
ANR	5599596	Symbol	role		5599536						
ANR	5599597	Symbol	NULL		5599536						
ANR	5599598	Symbol	reg		5599536						
ANR	5599599	Symbol	r_reg_set_name		5599536						
ANR	5599600	Symbol	* tok		5599536						
ANR	5599601	Symbol	n		5599536						
ANR	5599602	Function	parse_size	20:0:477:775							
ANR	5599603	FunctionDef	"parse_size (char * s , char * * end)"		5599602	0					
ANR	5599604	CompoundStatement		20:44:521:775	5599602	0					
ANR	5599605	IfStatement	if ( * s == '.' )		5599602	0					
ANR	5599606	Condition	* s == '.'	21:5:528:536	5599602	0	True				
ANR	5599607	EqualityExpression	* s == '.'		5599602	0		==			
ANR	5599608	UnaryOperationExpression	* s		5599602	0					
ANR	5599609	UnaryOperator	*		5599602	0					
ANR	5599610	Identifier	s		5599602	1					
ANR	5599611	PrimaryExpression	'.'		5599602	1					
ANR	5599612	CompoundStatement		2:16:17:17	5599602	1					
ANR	5599613	ReturnStatement	"return strtoul ( s + 1 , end , 10 ) ;"	22:2:543:574	5599602	0	True				
ANR	5599614	CallExpression	"strtoul ( s + 1 , end , 10 )"		5599602	0					
ANR	5599615	Callee	strtoul		5599602	0					
ANR	5599616	Identifier	strtoul		5599602	0					
ANR	5599617	ArgumentList	s + 1		5599602	1					
ANR	5599618	Argument	s + 1		5599602	0					
ANR	5599619	AdditiveExpression	s + 1		5599602	0		+			
ANR	5599620	Identifier	s		5599602	0					
ANR	5599621	PrimaryExpression	1		5599602	1					
ANR	5599622	Argument	end		5599602	1					
ANR	5599623	Identifier	end		5599602	0					
ANR	5599624	Argument	10		5599602	2					
ANR	5599625	PrimaryExpression	10		5599602	0					
ANR	5599626	IdentifierDeclStatement	"char * has_dot = strchr ( s , '.' ) ;"	24:1:580:611	5599602	1	True				
ANR	5599627	IdentifierDecl	"* has_dot = strchr ( s , '.' )"		5599602	0					
ANR	5599628	IdentifierDeclType	char *		5599602	0					
ANR	5599629	Identifier	has_dot		5599602	1					
ANR	5599630	AssignmentExpression	"* has_dot = strchr ( s , '.' )"		5599602	2		=			
ANR	5599631	Identifier	has_dot		5599602	0					
ANR	5599632	CallExpression	"strchr ( s , '.' )"		5599602	1					
ANR	5599633	Callee	strchr		5599602	0					
ANR	5599634	Identifier	strchr		5599602	0					
ANR	5599635	ArgumentList	s		5599602	1					
ANR	5599636	Argument	s		5599602	0					
ANR	5599637	Identifier	s		5599602	0					
ANR	5599638	Argument	'.'		5599602	1					
ANR	5599639	PrimaryExpression	'.'		5599602	0					
ANR	5599640	IfStatement	if ( has_dot )		5599602	2					
ANR	5599641	Condition	has_dot	25:5:618:624	5599602	0	True				
ANR	5599642	Identifier	has_dot		5599602	0					
ANR	5599643	CompoundStatement		9:2:164:198	5599602	1					
ANR	5599644	ExpressionStatement	* has_dot ++ = 0	26:2:631:645	5599602	0	True				
ANR	5599645	AssignmentExpression	* has_dot ++ = 0		5599602	0		=			
ANR	5599646	UnaryOperationExpression	* has_dot ++		5599602	0					
ANR	5599647	UnaryOperator	*		5599602	0					
ANR	5599648	PostIncDecOperationExpression	has_dot ++		5599602	1					
ANR	5599649	Identifier	has_dot		5599602	0					
ANR	5599650	IncDec	++		5599602	1					
ANR	5599651	PrimaryExpression	0		5599602	1					
ANR	5599652	IdentifierDeclStatement	"ut64 a = strtoul ( s , end , 0 ) << 3 ;"	27:2:649:682	5599602	1	True				
ANR	5599653	IdentifierDecl	"a = strtoul ( s , end , 0 ) << 3"		5599602	0					
ANR	5599654	IdentifierDeclType	ut64		5599602	0					
ANR	5599655	Identifier	a		5599602	1					
ANR	5599656	AssignmentExpression	"a = strtoul ( s , end , 0 ) << 3"		5599602	2		=			
ANR	5599657	Identifier	a		5599602	0					
ANR	5599658	ShiftExpression	"strtoul ( s , end , 0 ) << 3"		5599602	1		<<			
ANR	5599659	CallExpression	"strtoul ( s , end , 0 )"		5599602	0					
ANR	5599660	Callee	strtoul		5599602	0					
ANR	5599661	Identifier	strtoul		5599602	0					
ANR	5599662	ArgumentList	s		5599602	1					
ANR	5599663	Argument	s		5599602	0					
ANR	5599664	Identifier	s		5599602	0					
ANR	5599665	Argument	end		5599602	1					
ANR	5599666	Identifier	end		5599602	0					
ANR	5599667	Argument	0		5599602	2					
ANR	5599668	PrimaryExpression	0		5599602	0					
ANR	5599669	PrimaryExpression	3		5599602	1					
ANR	5599670	IdentifierDeclStatement	"ut64 b = strtoul ( has_dot , end , 0 ) ;"	28:2:686:720	5599602	2	True				
ANR	5599671	IdentifierDecl	"b = strtoul ( has_dot , end , 0 )"		5599602	0					
ANR	5599672	IdentifierDeclType	ut64		5599602	0					
ANR	5599673	Identifier	b		5599602	1					
ANR	5599674	AssignmentExpression	"b = strtoul ( has_dot , end , 0 )"		5599602	2		=			
ANR	5599675	Identifier	b		5599602	0					
ANR	5599676	CallExpression	"strtoul ( has_dot , end , 0 )"		5599602	1					
ANR	5599677	Callee	strtoul		5599602	0					
ANR	5599678	Identifier	strtoul		5599602	0					
ANR	5599679	ArgumentList	has_dot		5599602	1					
ANR	5599680	Argument	has_dot		5599602	0					
ANR	5599681	Identifier	has_dot		5599602	0					
ANR	5599682	Argument	end		5599602	1					
ANR	5599683	Identifier	end		5599602	0					
ANR	5599684	Argument	0		5599602	2					
ANR	5599685	PrimaryExpression	0		5599602	0					
ANR	5599686	ReturnStatement	return a + b ;	29:2:724:736	5599602	3	True				
ANR	5599687	AdditiveExpression	a + b		5599602	0		+			
ANR	5599688	Identifier	a		5599602	0					
ANR	5599689	Identifier	b		5599602	1					
ANR	5599690	ReturnStatement	"return strtoul ( s , end , 0 ) << 3 ;"	31:1:742:773	5599602	3	True				
ANR	5599691	ShiftExpression	"strtoul ( s , end , 0 ) << 3"		5599602	0		<<			
ANR	5599692	CallExpression	"strtoul ( s , end , 0 )"		5599602	0					
ANR	5599693	Callee	strtoul		5599602	0					
ANR	5599694	Identifier	strtoul		5599602	0					
ANR	5599695	ArgumentList	s		5599602	1					
ANR	5599696	Argument	s		5599602	0					
ANR	5599697	Identifier	s		5599602	0					
ANR	5599698	Argument	end		5599602	1					
ANR	5599699	Identifier	end		5599602	0					
ANR	5599700	Argument	0		5599602	2					
ANR	5599701	PrimaryExpression	0		5599602	0					
ANR	5599702	PrimaryExpression	3		5599602	1					
ANR	5599703	ReturnType	static ut64		5599602	1					
ANR	5599704	Identifier	parse_size		5599602	2					
ANR	5599705	ParameterList	"char * s , char * * end"		5599602	3					
ANR	5599706	Parameter	char * s	20:23:500:506	5599602	0	True				
ANR	5599707	ParameterType	char *		5599602	0					
ANR	5599708	Identifier	s		5599602	1					
ANR	5599709	Parameter	char * * end	20:32:509:518	5599602	1	True				
ANR	5599710	ParameterType	char * *		5599602	0					
ANR	5599711	Identifier	end		5599602	1					
ANR	5599712	CFGEntryNode	ENTRY		5599602		True				
ANR	5599713	CFGExitNode	EXIT		5599602		True				
ANR	5599714	Symbol	a		5599602						
ANR	5599715	Symbol	b		5599602						
ANR	5599716	Symbol	s		5599602						
ANR	5599717	Symbol	strtoul		5599602						
ANR	5599718	Symbol	strchr		5599602						
ANR	5599719	Symbol	end		5599602						
ANR	5599720	Symbol	has_dot		5599602						
ANR	5599721	Symbol	* s		5599602						
ANR	5599722	Symbol	* has_dot ++		5599602						
ANR	5599723	Function	parse_def	34:0:778:2968							
ANR	5599724	FunctionDef	"parse_def (RReg * reg , char * * tok , const int n)"		5599723	0					
ANR	5599725	CompoundStatement		34:65:843:2968	5599723	0					
ANR	5599726	IdentifierDeclStatement	char * end ;	35:1:846:855	5599723	0	True				
ANR	5599727	IdentifierDecl	* end		5599723	0					
ANR	5599728	IdentifierDeclType	char *		5599723	0					
ANR	5599729	Identifier	end		5599723	1					
ANR	5599730	IdentifierDeclStatement	"int type , type2 ;"	36:1:858:873	5599723	1	True				
ANR	5599731	IdentifierDecl	type		5599723	0					
ANR	5599732	IdentifierDeclType	int		5599723	0					
ANR	5599733	Identifier	type		5599723	1					
ANR	5599734	IdentifierDecl	type2		5599723	1					
ANR	5599735	IdentifierDeclType	int		5599723	0					
ANR	5599736	Identifier	type2		5599723	1					
ANR	5599737	IfStatement	if ( n != 5 && n != 6 )		5599723	2					
ANR	5599738	Condition	n != 5 && n != 6	38:5:881:896	5599723	0	True				
ANR	5599739	AndExpression	n != 5 && n != 6		5599723	0		&&			
ANR	5599740	EqualityExpression	n != 5		5599723	0		!=			
ANR	5599741	Identifier	n		5599723	0					
ANR	5599742	PrimaryExpression	5		5599723	1					
ANR	5599743	EqualityExpression	n != 6		5599723	1		!=			
ANR	5599744	Identifier	n		5599723	0					
ANR	5599745	PrimaryExpression	6		5599723	1					
ANR	5599746	CompoundStatement		5:23:55:55	5599723	1					
ANR	5599747	ReturnStatement	"return ""Invalid syntax: Wrong number of columns"" ;"	39:2:903:951	5599723	0	True				
ANR	5599748	PrimaryExpression	"""Invalid syntax: Wrong number of columns"""		5599723	0					
ANR	5599749	IdentifierDeclStatement	"char * p = strchr ( tok [ 0 ] , '@' ) ;"	41:1:957:987	5599723	3	True				
ANR	5599750	IdentifierDecl	"* p = strchr ( tok [ 0 ] , '@' )"		5599723	0					
ANR	5599751	IdentifierDeclType	char *		5599723	0					
ANR	5599752	Identifier	p		5599723	1					
ANR	5599753	AssignmentExpression	"* p = strchr ( tok [ 0 ] , '@' )"		5599723	2		=			
ANR	5599754	Identifier	p		5599723	0					
ANR	5599755	CallExpression	"strchr ( tok [ 0 ] , '@' )"		5599723	1					
ANR	5599756	Callee	strchr		5599723	0					
ANR	5599757	Identifier	strchr		5599723	0					
ANR	5599758	ArgumentList	tok [ 0 ]		5599723	1					
ANR	5599759	Argument	tok [ 0 ]		5599723	0					
ANR	5599760	ArrayIndexing	tok [ 0 ]		5599723	0					
ANR	5599761	Identifier	tok		5599723	0					
ANR	5599762	PrimaryExpression	0		5599723	1					
ANR	5599763	Argument	'@'		5599723	1					
ANR	5599764	PrimaryExpression	'@'		5599723	0					
ANR	5599765	IfStatement	if ( p )		5599723	4					
ANR	5599766	Condition	p	42:5:994:994	5599723	0	True				
ANR	5599767	Identifier	p		5599723	0					
ANR	5599768	CompoundStatement		11:2:189:219	5599723	1					
ANR	5599769	IdentifierDeclStatement	char * tok0 = strdup ( tok [ 0 ] ) ;	43:2:1001:1029	5599723	0	True				
ANR	5599770	IdentifierDecl	* tok0 = strdup ( tok [ 0 ] )		5599723	0					
ANR	5599771	IdentifierDeclType	char *		5599723	0					
ANR	5599772	Identifier	tok0		5599723	1					
ANR	5599773	AssignmentExpression	* tok0 = strdup ( tok [ 0 ] )		5599723	2		=			
ANR	5599774	Identifier	tok0		5599723	0					
ANR	5599775	CallExpression	strdup ( tok [ 0 ] )		5599723	1					
ANR	5599776	Callee	strdup		5599723	0					
ANR	5599777	Identifier	strdup		5599723	0					
ANR	5599778	ArgumentList	tok [ 0 ]		5599723	1					
ANR	5599779	Argument	tok [ 0 ]		5599723	0					
ANR	5599780	ArrayIndexing	tok [ 0 ]		5599723	0					
ANR	5599781	Identifier	tok		5599723	0					
ANR	5599782	PrimaryExpression	0		5599723	1					
ANR	5599783	IdentifierDeclStatement	char * at = tok0 + ( p - tok [ 0 ] ) ;	44:2:1033:1063	5599723	1	True				
ANR	5599784	IdentifierDecl	* at = tok0 + ( p - tok [ 0 ] )		5599723	0					
ANR	5599785	IdentifierDeclType	char *		5599723	0					
ANR	5599786	Identifier	at		5599723	1					
ANR	5599787	AssignmentExpression	* at = tok0 + ( p - tok [ 0 ] )		5599723	2		=			
ANR	5599788	Identifier	at		5599723	0					
ANR	5599789	AdditiveExpression	tok0 + ( p - tok [ 0 ] )		5599723	1		+			
ANR	5599790	Identifier	tok0		5599723	0					
ANR	5599791	AdditiveExpression	p - tok [ 0 ]		5599723	1		-			
ANR	5599792	Identifier	p		5599723	0					
ANR	5599793	ArrayIndexing	tok [ 0 ]		5599723	1					
ANR	5599794	Identifier	tok		5599723	0					
ANR	5599795	PrimaryExpression	0		5599723	1					
ANR	5599796	ExpressionStatement	* at ++ = 0	45:2:1067:1076	5599723	2	True				
ANR	5599797	AssignmentExpression	* at ++ = 0		5599723	0		=			
ANR	5599798	UnaryOperationExpression	* at ++		5599723	0					
ANR	5599799	UnaryOperator	*		5599723	0					
ANR	5599800	PostIncDecOperationExpression	at ++		5599723	1					
ANR	5599801	Identifier	at		5599723	0					
ANR	5599802	IncDec	++		5599723	1					
ANR	5599803	PrimaryExpression	0		5599723	1					
ANR	5599804	ExpressionStatement	type = r_reg_type_by_name ( tok0 )	46:2:1080:1112	5599723	3	True				
ANR	5599805	AssignmentExpression	type = r_reg_type_by_name ( tok0 )		5599723	0		=			
ANR	5599806	Identifier	type		5599723	0					
ANR	5599807	CallExpression	r_reg_type_by_name ( tok0 )		5599723	1					
ANR	5599808	Callee	r_reg_type_by_name		5599723	0					
ANR	5599809	Identifier	r_reg_type_by_name		5599723	0					
ANR	5599810	ArgumentList	tok0		5599723	1					
ANR	5599811	Argument	tok0		5599723	0					
ANR	5599812	Identifier	tok0		5599723	0					
ANR	5599813	ExpressionStatement	type2 = r_reg_type_by_name ( at )	47:2:1116:1147	5599723	4	True				
ANR	5599814	AssignmentExpression	type2 = r_reg_type_by_name ( at )		5599723	0		=			
ANR	5599815	Identifier	type2		5599723	0					
ANR	5599816	CallExpression	r_reg_type_by_name ( at )		5599723	1					
ANR	5599817	Callee	r_reg_type_by_name		5599723	0					
ANR	5599818	Identifier	r_reg_type_by_name		5599723	0					
ANR	5599819	ArgumentList	at		5599723	1					
ANR	5599820	Argument	at		5599723	0					
ANR	5599821	Identifier	at		5599723	0					
ANR	5599822	ExpressionStatement	free ( tok0 )	48:2:1151:1162	5599723	5	True				
ANR	5599823	CallExpression	free ( tok0 )		5599723	0					
ANR	5599824	Callee	free		5599723	0					
ANR	5599825	Identifier	free		5599723	0					
ANR	5599826	ArgumentList	tok0		5599723	1					
ANR	5599827	Argument	tok0		5599723	0					
ANR	5599828	Identifier	tok0		5599723	0					
ANR	5599829	ElseStatement	else		5599723	0					
ANR	5599830	CompoundStatement		16:8:328:328	5599723	0					
ANR	5599831	ExpressionStatement	type2 = type = r_reg_type_by_name ( tok [ 0 ] )	50:2:1176:1218	5599723	0	True				
ANR	5599832	AssignmentExpression	type2 = type = r_reg_type_by_name ( tok [ 0 ] )		5599723	0		=			
ANR	5599833	Identifier	type2		5599723	0					
ANR	5599834	AssignmentExpression	type = r_reg_type_by_name ( tok [ 0 ] )		5599723	1		=			
ANR	5599835	Identifier	type		5599723	0					
ANR	5599836	CallExpression	r_reg_type_by_name ( tok [ 0 ] )		5599723	1					
ANR	5599837	Callee	r_reg_type_by_name		5599723	0					
ANR	5599838	Identifier	r_reg_type_by_name		5599723	0					
ANR	5599839	ArgumentList	tok [ 0 ]		5599723	1					
ANR	5599840	Argument	tok [ 0 ]		5599723	0					
ANR	5599841	ArrayIndexing	tok [ 0 ]		5599723	0					
ANR	5599842	Identifier	tok		5599723	0					
ANR	5599843	PrimaryExpression	0		5599723	1					
ANR	5599844	IfStatement	if ( type == R_REG_TYPE_FLG )		5599723	1					
ANR	5599845	Condition	type == R_REG_TYPE_FLG	52:6:1277:1298	5599723	0	True				
ANR	5599846	EqualityExpression	type == R_REG_TYPE_FLG		5599723	0		==			
ANR	5599847	Identifier	type		5599723	0					
ANR	5599848	Identifier	R_REG_TYPE_FLG		5599723	1					
ANR	5599849	CompoundStatement		19:30:457:457	5599723	1					
ANR	5599850	ExpressionStatement	type2 = R_REG_TYPE_GPR	53:3:1306:1328	5599723	0	True				
ANR	5599851	AssignmentExpression	type2 = R_REG_TYPE_GPR		5599723	0		=			
ANR	5599852	Identifier	type2		5599723	0					
ANR	5599853	Identifier	R_REG_TYPE_GPR		5599723	1					
ANR	5599854	IfStatement	if ( type < 0 || type2 < 0 )		5599723	5					
ANR	5599855	Condition	type < 0 || type2 < 0	56:5:1342:1362	5599723	0	True				
ANR	5599856	OrExpression	type < 0 || type2 < 0		5599723	0		||			
ANR	5599857	RelationalExpression	type < 0		5599723	0		<			
ANR	5599858	Identifier	type		5599723	0					
ANR	5599859	PrimaryExpression	0		5599723	1					
ANR	5599860	RelationalExpression	type2 < 0		5599723	1		<			
ANR	5599861	Identifier	type2		5599723	0					
ANR	5599862	PrimaryExpression	0		5599723	1					
ANR	5599863	CompoundStatement		23:28:521:521	5599723	1					
ANR	5599864	ReturnStatement	"return ""Invalid register type"" ;"	57:2:1369:1399	5599723	0	True				
ANR	5599865	PrimaryExpression	"""Invalid register type"""		5599723	0					
ANR	5599866	IfStatement	"if ( r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL ) )"		5599723	6					
ANR	5599867	Condition	"r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL )"	60:5:1415:1453	5599723	0	True				
ANR	5599868	CallExpression	"r_reg_get ( reg , tok [ 1 ] , R_REG_TYPE_ALL )"		5599723	0					
ANR	5599869	Callee	r_reg_get		5599723	0					
ANR	5599870	Identifier	r_reg_get		5599723	0					
ANR	5599871	ArgumentList	reg		5599723	1					
ANR	5599872	Argument	reg		5599723	0					
ANR	5599873	Identifier	reg		5599723	0					
ANR	5599874	Argument	tok [ 1 ]		5599723	1					
ANR	5599875	ArrayIndexing	tok [ 1 ]		5599723	0					
ANR	5599876	Identifier	tok		5599723	0					
ANR	5599877	PrimaryExpression	1		5599723	1					
ANR	5599878	Argument	R_REG_TYPE_ALL		5599723	2					
ANR	5599879	Identifier	R_REG_TYPE_ALL		5599723	0					
ANR	5599880	CompoundStatement		27:46:612:612	5599723	1					
ANR	5599881	ExpressionStatement	"eprintf ( ""Ignoring duplicated register definition '%s'\\n"" , tok [ 1 ] )"	61:2:1460:1526	5599723	0	True				
ANR	5599882	CallExpression	"eprintf ( ""Ignoring duplicated register definition '%s'\\n"" , tok [ 1 ] )"		5599723	0					
ANR	5599883	Callee	eprintf		5599723	0					
ANR	5599884	Identifier	eprintf		5599723	0					
ANR	5599885	ArgumentList	"""Ignoring duplicated register definition '%s'\\n"""		5599723	1					
ANR	5599886	Argument	"""Ignoring duplicated register definition '%s'\\n"""		5599723	0					
ANR	5599887	PrimaryExpression	"""Ignoring duplicated register definition '%s'\\n"""		5599723	0					
ANR	5599888	Argument	tok [ 1 ]		5599723	1					
ANR	5599889	ArrayIndexing	tok [ 1 ]		5599723	0					
ANR	5599890	Identifier	tok		5599723	0					
ANR	5599891	PrimaryExpression	1		5599723	1					
ANR	5599892	ReturnStatement	return NULL ;	62:2:1530:1541	5599723	1	True				
ANR	5599893	Identifier	NULL		5599723	0					
ANR	5599894	IdentifierDeclStatement	RRegItem * item = R_NEW0 ( RRegItem ) ;	67:1:1599:1633	5599723	7	True				
ANR	5599895	IdentifierDecl	* item = R_NEW0 ( RRegItem )		5599723	0					
ANR	5599896	IdentifierDeclType	RRegItem *		5599723	0					
ANR	5599897	Identifier	item		5599723	1					
ANR	5599898	AssignmentExpression	* item = R_NEW0 ( RRegItem )		5599723	2		=			
ANR	5599899	Identifier	item		5599723	0					
ANR	5599900	CallExpression	R_NEW0 ( RRegItem )		5599723	1					
ANR	5599901	Callee	R_NEW0		5599723	0					
ANR	5599902	Identifier	R_NEW0		5599723	0					
ANR	5599903	ArgumentList	RRegItem		5599723	1					
ANR	5599904	Argument	RRegItem		5599723	0					
ANR	5599905	Identifier	RRegItem		5599723	0					
ANR	5599906	IfStatement	if ( ! item )		5599723	8					
ANR	5599907	Condition	! item	68:5:1640:1644	5599723	0	True				
ANR	5599908	UnaryOperationExpression	! item		5599723	0					
ANR	5599909	UnaryOperator	!		5599723	0					
ANR	5599910	Identifier	item		5599723	1					
ANR	5599911	CompoundStatement		35:12:803:803	5599723	1					
ANR	5599912	ReturnStatement	"return ""Unable to allocate memory"" ;"	69:2:1651:1685	5599723	0	True				
ANR	5599913	PrimaryExpression	"""Unable to allocate memory"""		5599723	0					
ANR	5599914	ExpressionStatement	item -> type = type	72:1:1692:1709	5599723	9	True				
ANR	5599915	AssignmentExpression	item -> type = type		5599723	0		=			
ANR	5599916	PtrMemberAccess	item -> type		5599723	0					
ANR	5599917	Identifier	item		5599723	0					
ANR	5599918	Identifier	type		5599723	1					
ANR	5599919	Identifier	type		5599723	1					
ANR	5599920	ExpressionStatement	item -> name = strdup ( tok [ 1 ] )	73:1:1712:1740	5599723	10	True				
ANR	5599921	AssignmentExpression	item -> name = strdup ( tok [ 1 ] )		5599723	0		=			
ANR	5599922	PtrMemberAccess	item -> name		5599723	0					
ANR	5599923	Identifier	item		5599723	0					
ANR	5599924	Identifier	name		5599723	1					
ANR	5599925	CallExpression	strdup ( tok [ 1 ] )		5599723	1					
ANR	5599926	Callee	strdup		5599723	0					
ANR	5599927	Identifier	strdup		5599723	0					
ANR	5599928	ArgumentList	tok [ 1 ]		5599723	1					
ANR	5599929	Argument	tok [ 1 ]		5599723	0					
ANR	5599930	ArrayIndexing	tok [ 1 ]		5599723	0					
ANR	5599931	Identifier	tok		5599723	0					
ANR	5599932	PrimaryExpression	1		5599723	1					
ANR	5599933	ExpressionStatement	"item -> size = parse_size ( tok [ 2 ] , & end )"	75:1:1794:1832	5599723	11	True				
ANR	5599934	AssignmentExpression	"item -> size = parse_size ( tok [ 2 ] , & end )"		5599723	0		=			
ANR	5599935	PtrMemberAccess	item -> size		5599723	0					
ANR	5599936	Identifier	item		5599723	0					
ANR	5599937	Identifier	size		5599723	1					
ANR	5599938	CallExpression	"parse_size ( tok [ 2 ] , & end )"		5599723	1					
ANR	5599939	Callee	parse_size		5599723	0					
ANR	5599940	Identifier	parse_size		5599723	0					
ANR	5599941	ArgumentList	tok [ 2 ]		5599723	1					
ANR	5599942	Argument	tok [ 2 ]		5599723	0					
ANR	5599943	ArrayIndexing	tok [ 2 ]		5599723	0					
ANR	5599944	Identifier	tok		5599723	0					
ANR	5599945	PrimaryExpression	2		5599723	1					
ANR	5599946	Argument	& end		5599723	1					
ANR	5599947	UnaryOperationExpression	& end		5599723	0					
ANR	5599948	UnaryOperator	&		5599723	0					
ANR	5599949	Identifier	end		5599723	1					
ANR	5599950	IfStatement	if ( * end != '\\0' || ! item -> size )		5599723	12					
ANR	5599951	Condition	* end != '\\0' || ! item -> size	76:5:1839:1865	5599723	0	True				
ANR	5599952	OrExpression	* end != '\\0' || ! item -> size		5599723	0		||			
ANR	5599953	EqualityExpression	* end != '\\0'		5599723	0		!=			
ANR	5599954	UnaryOperationExpression	* end		5599723	0					
ANR	5599955	UnaryOperator	*		5599723	0					
ANR	5599956	Identifier	end		5599723	1					
ANR	5599957	PrimaryExpression	'\\0'		5599723	1					
ANR	5599958	UnaryOperationExpression	! item -> size		5599723	1					
ANR	5599959	UnaryOperator	!		5599723	0					
ANR	5599960	PtrMemberAccess	item -> size		5599723	1					
ANR	5599961	Identifier	item		5599723	0					
ANR	5599962	Identifier	size		5599723	1					
ANR	5599963	CompoundStatement		43:34:1024:1024	5599723	1					
ANR	5599964	ExpressionStatement	r_reg_item_free ( item )	77:2:1872:1894	5599723	0	True				
ANR	5599965	CallExpression	r_reg_item_free ( item )		5599723	0					
ANR	5599966	Callee	r_reg_item_free		5599723	0					
ANR	5599967	Identifier	r_reg_item_free		5599723	0					
ANR	5599968	ArgumentList	item		5599723	1					
ANR	5599969	Argument	item		5599723	0					
ANR	5599970	Identifier	item		5599723	0					
ANR	5599971	ReturnStatement	"return ""Invalid size"" ;"	78:2:1898:1919	5599723	1	True				
ANR	5599972	PrimaryExpression	"""Invalid size"""		5599723	0					
ANR	5599973	IfStatement	"if ( ! strcmp ( tok [ 3 ] , ""?"" ) )"		5599723	13					
ANR	5599974	Condition	"! strcmp ( tok [ 3 ] , ""?"" )"	80:5:1929:1949	5599723	0	True				
ANR	5599975	UnaryOperationExpression	"! strcmp ( tok [ 3 ] , ""?"" )"		5599723	0					
ANR	5599976	UnaryOperator	!		5599723	0					
ANR	5599977	CallExpression	"strcmp ( tok [ 3 ] , ""?"" )"		5599723	1					
ANR	5599978	Callee	strcmp		5599723	0					
ANR	5599979	Identifier	strcmp		5599723	0					
ANR	5599980	ArgumentList	tok [ 3 ]		5599723	1					
ANR	5599981	Argument	tok [ 3 ]		5599723	0					
ANR	5599982	ArrayIndexing	tok [ 3 ]		5599723	0					
ANR	5599983	Identifier	tok		5599723	0					
ANR	5599984	PrimaryExpression	3		5599723	1					
ANR	5599985	Argument	"""?"""		5599723	1					
ANR	5599986	PrimaryExpression	"""?"""		5599723	0					
ANR	5599987	CompoundStatement		47:28:1108:1108	5599723	1					
ANR	5599988	ExpressionStatement	item -> offset = - 1	81:2:1956:1973	5599723	0	True				
ANR	5599989	AssignmentExpression	item -> offset = - 1		5599723	0		=			
ANR	5599990	PtrMemberAccess	item -> offset		5599723	0					
ANR	5599991	Identifier	item		5599723	0					
ANR	5599992	Identifier	offset		5599723	1					
ANR	5599993	UnaryOperationExpression	- 1		5599723	1					
ANR	5599994	UnaryOperator	-		5599723	0					
ANR	5599995	PrimaryExpression	1		5599723	1					
ANR	5599996	ElseStatement	else		5599723	0					
ANR	5599997	CompoundStatement		49:8:1139:1139	5599723	0					
ANR	5599998	ExpressionStatement	"item -> offset = parse_size ( tok [ 3 ] , & end )"	83:2:1987:2027	5599723	0	True				
ANR	5599999	AssignmentExpression	"item -> offset = parse_size ( tok [ 3 ] , & end )"		5599723	0		=			
ANR	5600000	PtrMemberAccess	item -> offset		5599723	0					
ANR	5600001	Identifier	item		5599723	0					
ANR	5600002	Identifier	offset		5599723	1					
ANR	5600003	CallExpression	"parse_size ( tok [ 3 ] , & end )"		5599723	1					
ANR	5600004	Callee	parse_size		5599723	0					
ANR	5600005	Identifier	parse_size		5599723	0					
ANR	5600006	ArgumentList	tok [ 3 ]		5599723	1					
ANR	5600007	Argument	tok [ 3 ]		5599723	0					
ANR	5600008	ArrayIndexing	tok [ 3 ]		5599723	0					
ANR	5600009	Identifier	tok		5599723	0					
ANR	5600010	PrimaryExpression	3		5599723	1					
ANR	5600011	Argument	& end		5599723	1					
ANR	5600012	UnaryOperationExpression	& end		5599723	0					
ANR	5600013	UnaryOperator	&		5599723	0					
ANR	5600014	Identifier	end		5599723	1					
ANR	5600015	IfStatement	if ( * end != '\\0' )		5599723	14					
ANR	5600016	Condition	* end != '\\0'	85:5:2037:2048	5599723	0	True				
ANR	5600017	EqualityExpression	* end != '\\0'		5599723	0		!=			
ANR	5600018	UnaryOperationExpression	* end		5599723	0					
ANR	5600019	UnaryOperator	*		5599723	0					
ANR	5600020	Identifier	end		5599723	1					
ANR	5600021	PrimaryExpression	'\\0'		5599723	1					
ANR	5600022	CompoundStatement		52:19:1207:1207	5599723	1					
ANR	5600023	ExpressionStatement	r_reg_item_free ( item )	86:2:2055:2077	5599723	0	True				
ANR	5600024	CallExpression	r_reg_item_free ( item )		5599723	0					
ANR	5600025	Callee	r_reg_item_free		5599723	0					
ANR	5600026	Identifier	r_reg_item_free		5599723	0					
ANR	5600027	ArgumentList	item		5599723	1					
ANR	5600028	Argument	item		5599723	0					
ANR	5600029	Identifier	item		5599723	0					
ANR	5600030	ReturnStatement	"return ""Invalid offset"" ;"	87:2:2081:2104	5599723	1	True				
ANR	5600031	PrimaryExpression	"""Invalid offset"""		5599723	0					
ANR	5600032	ExpressionStatement	"item -> packed_size = parse_size ( tok [ 4 ] , & end )"	89:1:2110:2155	5599723	15	True				
ANR	5600033	AssignmentExpression	"item -> packed_size = parse_size ( tok [ 4 ] , & end )"		5599723	0		=			
ANR	5600034	PtrMemberAccess	item -> packed_size		5599723	0					
ANR	5600035	Identifier	item		5599723	0					
ANR	5600036	Identifier	packed_size		5599723	1					
ANR	5600037	CallExpression	"parse_size ( tok [ 4 ] , & end )"		5599723	1					
ANR	5600038	Callee	parse_size		5599723	0					
ANR	5600039	Identifier	parse_size		5599723	0					
ANR	5600040	ArgumentList	tok [ 4 ]		5599723	1					
ANR	5600041	Argument	tok [ 4 ]		5599723	0					
ANR	5600042	ArrayIndexing	tok [ 4 ]		5599723	0					
ANR	5600043	Identifier	tok		5599723	0					
ANR	5600044	PrimaryExpression	4		5599723	1					
ANR	5600045	Argument	& end		5599723	1					
ANR	5600046	UnaryOperationExpression	& end		5599723	0					
ANR	5600047	UnaryOperator	&		5599723	0					
ANR	5600048	Identifier	end		5599723	1					
ANR	5600049	IfStatement	if ( * end != '\\0' )		5599723	16					
ANR	5600050	Condition	* end != '\\0'	90:5:2162:2173	5599723	0	True				
ANR	5600051	EqualityExpression	* end != '\\0'		5599723	0		!=			
ANR	5600052	UnaryOperationExpression	* end		5599723	0					
ANR	5600053	UnaryOperator	*		5599723	0					
ANR	5600054	Identifier	end		5599723	1					
ANR	5600055	PrimaryExpression	'\\0'		5599723	1					
ANR	5600056	CompoundStatement		57:19:1332:1332	5599723	1					
ANR	5600057	ExpressionStatement	r_reg_item_free ( item )	91:2:2180:2202	5599723	0	True				
ANR	5600058	CallExpression	r_reg_item_free ( item )		5599723	0					
ANR	5600059	Callee	r_reg_item_free		5599723	0					
ANR	5600060	Identifier	r_reg_item_free		5599723	0					
ANR	5600061	ArgumentList	item		5599723	1					
ANR	5600062	Argument	item		5599723	0					
ANR	5600063	Identifier	item		5599723	0					
ANR	5600064	ReturnStatement	"return ""Invalid packed size"" ;"	92:2:2206:2234	5599723	1	True				
ANR	5600065	PrimaryExpression	"""Invalid packed size"""		5599723	0					
ANR	5600066	ExpressionStatement	reg -> bits |= item -> size	96:1:2296:2319	5599723	17	True				
ANR	5600067	AssignmentExpression	reg -> bits |= item -> size		5599723	0		|=			
ANR	5600068	PtrMemberAccess	reg -> bits		5599723	0					
ANR	5600069	Identifier	reg		5599723	0					
ANR	5600070	Identifier	bits		5599723	1					
ANR	5600071	PtrMemberAccess	item -> size		5599723	1					
ANR	5600072	Identifier	item		5599723	0					
ANR	5600073	Identifier	size		5599723	1					
ANR	5600074	IfStatement	if ( n == 6 )		5599723	18					
ANR	5600075	Condition	n == 6	99:5:2348:2353	5599723	0	True				
ANR	5600076	EqualityExpression	n == 6		5599723	0		==			
ANR	5600077	Identifier	n		5599723	0					
ANR	5600078	PrimaryExpression	6		5599723	1					
ANR	5600079	CompoundStatement		66:13:1512:1512	5599723	1					
ANR	5600080	ExpressionStatement	item -> flags = strdup ( tok [ 5 ] )	100:2:2360:2389	5599723	0	True				
ANR	5600081	AssignmentExpression	item -> flags = strdup ( tok [ 5 ] )		5599723	0		=			
ANR	5600082	PtrMemberAccess	item -> flags		5599723	0					
ANR	5600083	Identifier	item		5599723	0					
ANR	5600084	Identifier	flags		5599723	1					
ANR	5600085	CallExpression	strdup ( tok [ 5 ] )		5599723	1					
ANR	5600086	Callee	strdup		5599723	0					
ANR	5600087	Identifier	strdup		5599723	0					
ANR	5600088	ArgumentList	tok [ 5 ]		5599723	1					
ANR	5600089	Argument	tok [ 5 ]		5599723	0					
ANR	5600090	ArrayIndexing	tok [ 5 ]		5599723	0					
ANR	5600091	Identifier	tok		5599723	0					
ANR	5600092	PrimaryExpression	5		5599723	1					
ANR	5600093	ExpressionStatement	item -> arena = type2	103:1:2396:2415	5599723	19	True				
ANR	5600094	AssignmentExpression	item -> arena = type2		5599723	0		=			
ANR	5600095	PtrMemberAccess	item -> arena		5599723	0					
ANR	5600096	Identifier	item		5599723	0					
ANR	5600097	Identifier	arena		5599723	1					
ANR	5600098	Identifier	type2		5599723	1					
ANR	5600099	IfStatement	if ( ! reg -> regset [ type2 ] . regs )		5599723	20					
ANR	5600100	Condition	! reg -> regset [ type2 ] . regs	104:5:2422:2445	5599723	0	True				
ANR	5600101	UnaryOperationExpression	! reg -> regset [ type2 ] . regs		5599723	0					
ANR	5600102	UnaryOperator	!		5599723	0					
ANR	5600103	MemberAccess	reg -> regset [ type2 ] . regs		5599723	1					
ANR	5600104	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600105	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600106	Identifier	reg		5599723	0					
ANR	5600107	Identifier	regset		5599723	1					
ANR	5600108	Identifier	type2		5599723	1					
ANR	5600109	Identifier	regs		5599723	1					
ANR	5600110	CompoundStatement		71:31:1604:1604	5599723	1					
ANR	5600111	ExpressionStatement	reg -> regset [ type2 ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )	105:2:2452:2518	5599723	0	True				
ANR	5600112	AssignmentExpression	reg -> regset [ type2 ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )		5599723	0		=			
ANR	5600113	MemberAccess	reg -> regset [ type2 ] . regs		5599723	0					
ANR	5600114	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600115	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600116	Identifier	reg		5599723	0					
ANR	5600117	Identifier	regset		5599723	1					
ANR	5600118	Identifier	type2		5599723	1					
ANR	5600119	Identifier	regs		5599723	1					
ANR	5600120	CallExpression	r_list_newf ( ( RListFree ) r_reg_item_free )		5599723	1					
ANR	5600121	Callee	r_list_newf		5599723	0					
ANR	5600122	Identifier	r_list_newf		5599723	0					
ANR	5600123	ArgumentList	( RListFree ) r_reg_item_free		5599723	1					
ANR	5600124	Argument	( RListFree ) r_reg_item_free		5599723	0					
ANR	5600125	CastExpression	( RListFree ) r_reg_item_free		5599723	0					
ANR	5600126	CastTarget	RListFree		5599723	0					
ANR	5600127	Identifier	r_reg_item_free		5599723	1					
ANR	5600128	ExpressionStatement	"r_list_append ( reg -> regset [ type2 ] . regs , item )"	107:1:2524:2569	5599723	21	True				
ANR	5600129	CallExpression	"r_list_append ( reg -> regset [ type2 ] . regs , item )"		5599723	0					
ANR	5600130	Callee	r_list_append		5599723	0					
ANR	5600131	Identifier	r_list_append		5599723	0					
ANR	5600132	ArgumentList	reg -> regset [ type2 ] . regs		5599723	1					
ANR	5600133	Argument	reg -> regset [ type2 ] . regs		5599723	0					
ANR	5600134	MemberAccess	reg -> regset [ type2 ] . regs		5599723	0					
ANR	5600135	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600136	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600137	Identifier	reg		5599723	0					
ANR	5600138	Identifier	regset		5599723	1					
ANR	5600139	Identifier	type2		5599723	1					
ANR	5600140	Identifier	regs		5599723	1					
ANR	5600141	Argument	item		5599723	1					
ANR	5600142	Identifier	item		5599723	0					
ANR	5600143	IfStatement	if ( ! reg -> regset [ type2 ] . ht_regs )		5599723	22					
ANR	5600144	Condition	! reg -> regset [ type2 ] . ht_regs	108:5:2576:2602	5599723	0	True				
ANR	5600145	UnaryOperationExpression	! reg -> regset [ type2 ] . ht_regs		5599723	0					
ANR	5600146	UnaryOperator	!		5599723	0					
ANR	5600147	MemberAccess	reg -> regset [ type2 ] . ht_regs		5599723	1					
ANR	5600148	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600149	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600150	Identifier	reg		5599723	0					
ANR	5600151	Identifier	regset		5599723	1					
ANR	5600152	Identifier	type2		5599723	1					
ANR	5600153	Identifier	ht_regs		5599723	1					
ANR	5600154	CompoundStatement		75:34:1761:1761	5599723	1					
ANR	5600155	ExpressionStatement	reg -> regset [ type2 ] . ht_regs = ht_pp_new0 ( )	109:2:2609:2651	5599723	0	True				
ANR	5600156	AssignmentExpression	reg -> regset [ type2 ] . ht_regs = ht_pp_new0 ( )		5599723	0		=			
ANR	5600157	MemberAccess	reg -> regset [ type2 ] . ht_regs		5599723	0					
ANR	5600158	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600159	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600160	Identifier	reg		5599723	0					
ANR	5600161	Identifier	regset		5599723	1					
ANR	5600162	Identifier	type2		5599723	1					
ANR	5600163	Identifier	ht_regs		5599723	1					
ANR	5600164	CallExpression	ht_pp_new0 ( )		5599723	1					
ANR	5600165	Callee	ht_pp_new0		5599723	0					
ANR	5600166	Identifier	ht_pp_new0		5599723	0					
ANR	5600167	ArgumentList			5599723	1					
ANR	5600168	ExpressionStatement	"ht_pp_insert ( reg -> regset [ type2 ] . ht_regs , item -> name , item )"	111:1:2657:2716	5599723	23	True				
ANR	5600169	CallExpression	"ht_pp_insert ( reg -> regset [ type2 ] . ht_regs , item -> name , item )"		5599723	0					
ANR	5600170	Callee	ht_pp_insert		5599723	0					
ANR	5600171	Identifier	ht_pp_insert		5599723	0					
ANR	5600172	ArgumentList	reg -> regset [ type2 ] . ht_regs		5599723	1					
ANR	5600173	Argument	reg -> regset [ type2 ] . ht_regs		5599723	0					
ANR	5600174	MemberAccess	reg -> regset [ type2 ] . ht_regs		5599723	0					
ANR	5600175	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600176	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600177	Identifier	reg		5599723	0					
ANR	5600178	Identifier	regset		5599723	1					
ANR	5600179	Identifier	type2		5599723	1					
ANR	5600180	Identifier	ht_regs		5599723	1					
ANR	5600181	Argument	item -> name		5599723	1					
ANR	5600182	PtrMemberAccess	item -> name		5599723	0					
ANR	5600183	Identifier	item		5599723	0					
ANR	5600184	Identifier	name		5599723	1					
ANR	5600185	Argument	item		5599723	2					
ANR	5600186	Identifier	item		5599723	0					
ANR	5600187	IfStatement	if ( item -> offset + item -> size > reg -> size )		5599723	24					
ANR	5600188	Condition	item -> offset + item -> size > reg -> size	114:5:2760:2796	5599723	0	True				
ANR	5600189	RelationalExpression	item -> offset + item -> size > reg -> size		5599723	0		>			
ANR	5600190	AdditiveExpression	item -> offset + item -> size		5599723	0		+			
ANR	5600191	PtrMemberAccess	item -> offset		5599723	0					
ANR	5600192	Identifier	item		5599723	0					
ANR	5600193	Identifier	offset		5599723	1					
ANR	5600194	PtrMemberAccess	item -> size		5599723	1					
ANR	5600195	Identifier	item		5599723	0					
ANR	5600196	Identifier	size		5599723	1					
ANR	5600197	PtrMemberAccess	reg -> size		5599723	1					
ANR	5600198	Identifier	reg		5599723	0					
ANR	5600199	Identifier	size		5599723	1					
ANR	5600200	CompoundStatement		81:44:1955:1955	5599723	1					
ANR	5600201	ExpressionStatement	reg -> size = item -> offset + item -> size	115:2:2803:2840	5599723	0	True				
ANR	5600202	AssignmentExpression	reg -> size = item -> offset + item -> size		5599723	0		=			
ANR	5600203	PtrMemberAccess	reg -> size		5599723	0					
ANR	5600204	Identifier	reg		5599723	0					
ANR	5600205	Identifier	size		5599723	1					
ANR	5600206	AdditiveExpression	item -> offset + item -> size		5599723	1		+			
ANR	5600207	PtrMemberAccess	item -> offset		5599723	0					
ANR	5600208	Identifier	item		5599723	0					
ANR	5600209	Identifier	offset		5599723	1					
ANR	5600210	PtrMemberAccess	item -> size		5599723	1					
ANR	5600211	Identifier	item		5599723	0					
ANR	5600212	Identifier	size		5599723	1					
ANR	5600213	ExpressionStatement	reg -> regset [ type2 ] . maskregstype |= ( ( int ) 1 << type )	118:1:2901:2952	5599723	25	True				
ANR	5600214	AssignmentExpression	reg -> regset [ type2 ] . maskregstype |= ( ( int ) 1 << type )		5599723	0		|=			
ANR	5600215	MemberAccess	reg -> regset [ type2 ] . maskregstype		5599723	0					
ANR	5600216	ArrayIndexing	reg -> regset [ type2 ]		5599723	0					
ANR	5600217	PtrMemberAccess	reg -> regset		5599723	0					
ANR	5600218	Identifier	reg		5599723	0					
ANR	5600219	Identifier	regset		5599723	1					
ANR	5600220	Identifier	type2		5599723	1					
ANR	5600221	Identifier	maskregstype		5599723	1					
ANR	5600222	ShiftExpression	( int ) 1 << type		5599723	1		<<			
ANR	5600223	CastExpression	( int ) 1		5599723	0					
ANR	5600224	CastTarget	int		5599723	0					
ANR	5600225	PrimaryExpression	1		5599723	1					
ANR	5600226	Identifier	type		5599723	1					
ANR	5600227	ReturnStatement	return NULL ;	119:1:2955:2966	5599723	26	True				
ANR	5600228	Identifier	NULL		5599723	0					
ANR	5600229	ReturnType	static const char *		5599723	1					
ANR	5600230	Identifier	parse_def		5599723	2					
ANR	5600231	ParameterList	"RReg * reg , char * * tok , const int n"		5599723	3					
ANR	5600232	Parameter	RReg * reg	34:29:807:815	5599723	0	True				
ANR	5600233	ParameterType	RReg *		5599723	0					
ANR	5600234	Identifier	reg		5599723	1					
ANR	5600235	Parameter	char * * tok	34:40:818:827	5599723	1	True				
ANR	5600236	ParameterType	char * *		5599723	0					
ANR	5600237	Identifier	tok		5599723	1					
ANR	5600238	Parameter	const int n	34:52:830:840	5599723	2	True				
ANR	5600239	ParameterType	const int		5599723	0					
ANR	5600240	Identifier	n		5599723	1					
ANR	5600241	CFGEntryNode	ENTRY		5599723		True				
ANR	5600242	CFGExitNode	EXIT		5599723		True				
ANR	5600243	Symbol	parse_size		5599723						
ANR	5600244	Symbol	item -> type		5599723						
ANR	5600245	Symbol	& end		5599723						
ANR	5600246	Symbol	reg -> regset [ type2 ] . maskregstype		5599723						
ANR	5600247	Symbol	strchr		5599723						
ANR	5600248	Symbol	item -> flags		5599723						
ANR	5600249	Symbol	type		5599723						
ANR	5600250	Symbol	reg -> regset [ type2 ] . regs		5599723						
ANR	5600251	Symbol	item -> arena		5599723						
ANR	5600252	Symbol	reg -> regset		5599723						
ANR	5600253	Symbol	reg -> regset [ type2 ] . ht_regs		5599723						
ANR	5600254	Symbol	tok		5599723						
ANR	5600255	Symbol	r_reg_type_by_name		5599723						
ANR	5600256	Symbol	RRegItem		5599723						
ANR	5600257	Symbol	ht_pp_new0		5599723						
ANR	5600258	Symbol	reg		5599723						
ANR	5600259	Symbol	tok0		5599723						
ANR	5600260	Symbol	R_REG_TYPE_FLG		5599723						
ANR	5600261	Symbol	R_REG_TYPE_ALL		5599723						
ANR	5600262	Symbol	* item		5599723						
ANR	5600263	Symbol	end		5599723						
ANR	5600264	Symbol	* at ++		5599723						
ANR	5600265	Symbol	R_REG_TYPE_GPR		5599723						
ANR	5600266	Symbol	r_reg_get		5599723						
ANR	5600267	Symbol	item -> offset		5599723						
ANR	5600268	Symbol	strcmp		5599723						
ANR	5600269	Symbol	item		5599723						
ANR	5600270	Symbol	* reg -> regset		5599723						
ANR	5600271	Symbol	type2		5599723						
ANR	5600272	Symbol	NULL		5599723						
ANR	5600273	Symbol	r_list_newf		5599723						
ANR	5600274	Symbol	* * reg		5599723						
ANR	5600275	Symbol	n		5599723						
ANR	5600276	Symbol	p		5599723						
ANR	5600277	Symbol	R_NEW0		5599723						
ANR	5600278	Symbol	item -> packed_size		5599723						
ANR	5600279	Symbol	r_reg_item_free		5599723						
ANR	5600280	Symbol	at		5599723						
ANR	5600281	Symbol	item -> name		5599723						
ANR	5600282	Symbol	reg -> size		5599723						
ANR	5600283	Symbol	* tok		5599723						
ANR	5600284	Symbol	* end		5599723						
ANR	5600285	Symbol	strdup		5599723						
ANR	5600286	Symbol	reg -> bits		5599723						
ANR	5600287	Symbol	item -> size		5599723						
ANR	5600288	Symbol	* reg		5599723						
ANR	5600289	Symbol	* type2		5599723						
ANR	5600290	Function	r_reg_set_profile_string	123:0:2999:5638							
ANR	5600291	FunctionDef	"r_reg_set_profile_string (RReg * reg , const char * str)"		5600290	0					
ANR	5600292	CompoundStatement		123:64:3063:5638	5600290	0					
ANR	5600293	IdentifierDeclStatement	char * tok [ PARSER_MAX_TOKENS ] ;	124:1:3066:3094	5600290	0	True				
ANR	5600294	IdentifierDecl	* tok [ PARSER_MAX_TOKENS ]		5600290	0					
ANR	5600295	IdentifierDeclType	char * [ PARSER_MAX_TOKENS ]		5600290	0					
ANR	5600296	Identifier	tok		5600290	1					
ANR	5600297	Identifier	PARSER_MAX_TOKENS		5600290	2					
ANR	5600298	IdentifierDeclStatement	char tmp [ 128 ] ;	125:1:3097:3110	5600290	1	True				
ANR	5600299	IdentifierDecl	tmp [ 128 ]		5600290	0					
ANR	5600300	IdentifierDeclType	char [ 128 ]		5600290	0					
ANR	5600301	Identifier	tmp		5600290	1					
ANR	5600302	PrimaryExpression	128		5600290	2					
ANR	5600303	IdentifierDeclStatement	"int i , j , l ;"	126:1:3113:3124	5600290	2	True				
ANR	5600304	IdentifierDecl	i		5600290	0					
ANR	5600305	IdentifierDeclType	int		5600290	0					
ANR	5600306	Identifier	i		5600290	1					
ANR	5600307	IdentifierDecl	j		5600290	1					
ANR	5600308	IdentifierDeclType	int		5600290	0					
ANR	5600309	Identifier	j		5600290	1					
ANR	5600310	IdentifierDecl	l		5600290	2					
ANR	5600311	IdentifierDeclType	int		5600290	0					
ANR	5600312	Identifier	l		5600290	1					
ANR	5600313	IdentifierDeclStatement	const char * p = str ;	127:1:3127:3146	5600290	3	True				
ANR	5600314	IdentifierDecl	* p = str		5600290	0					
ANR	5600315	IdentifierDeclType	const char *		5600290	0					
ANR	5600316	Identifier	p		5600290	1					
ANR	5600317	AssignmentExpression	* p = str		5600290	2		=			
ANR	5600318	Identifier	str		5600290	0					
ANR	5600319	Identifier	str		5600290	1					
ANR	5600320	ExpressionStatement	"r_return_val_if_fail ( reg && str , false )"	129:1:3150:3190	5600290	4	True				
ANR	5600321	CallExpression	"r_return_val_if_fail ( reg && str , false )"		5600290	0					
ANR	5600322	Callee	r_return_val_if_fail		5600290	0					
ANR	5600323	Identifier	r_return_val_if_fail		5600290	0					
ANR	5600324	ArgumentList	reg && str		5600290	1					
ANR	5600325	Argument	reg && str		5600290	0					
ANR	5600326	AndExpression	reg && str		5600290	0		&&			
ANR	5600327	Identifier	reg		5600290	0					
ANR	5600328	Identifier	str		5600290	1					
ANR	5600329	Argument	false		5600290	1					
ANR	5600330	Identifier	false		5600290	0					
ANR	5600331	IfStatement	"if ( reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str ) )"		5600290	5					
ANR	5600332	Condition	"reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str )"	132:5:3234:3292	5600290	0	True				
ANR	5600333	AndExpression	"reg -> reg_profile_str && ! strcmp ( reg -> reg_profile_str , str )"		5600290	0		&&			
ANR	5600334	PtrMemberAccess	reg -> reg_profile_str		5600290	0					
ANR	5600335	Identifier	reg		5600290	0					
ANR	5600336	Identifier	reg_profile_str		5600290	1					
ANR	5600337	UnaryOperationExpression	"! strcmp ( reg -> reg_profile_str , str )"		5600290	1					
ANR	5600338	UnaryOperator	!		5600290	0					
ANR	5600339	CallExpression	"strcmp ( reg -> reg_profile_str , str )"		5600290	1					
ANR	5600340	Callee	strcmp		5600290	0					
ANR	5600341	Identifier	strcmp		5600290	0					
ANR	5600342	ArgumentList	reg -> reg_profile_str		5600290	1					
ANR	5600343	Argument	reg -> reg_profile_str		5600290	0					
ANR	5600344	PtrMemberAccess	reg -> reg_profile_str		5600290	0					
ANR	5600345	Identifier	reg		5600290	0					
ANR	5600346	Identifier	reg_profile_str		5600290	1					
ANR	5600347	Argument	str		5600290	1					
ANR	5600348	Identifier	str		5600290	0					
ANR	5600349	CompoundStatement		10:66:231:231	5600290	1					
ANR	5600350	ReturnStatement	return true ;	133:2:3299:3310	5600290	0	True				
ANR	5600351	Identifier	true		5600290	0					
ANR	5600352	ExpressionStatement	r_reg_arena_pop ( reg )	137:1:3387:3408	5600290	6	True				
ANR	5600353	CallExpression	r_reg_arena_pop ( reg )		5600290	0					
ANR	5600354	Callee	r_reg_arena_pop		5600290	0					
ANR	5600355	Identifier	r_reg_arena_pop		5600290	0					
ANR	5600356	ArgumentList	reg		5600290	1					
ANR	5600357	Argument	reg		5600290	0					
ANR	5600358	Identifier	reg		5600290	0					
ANR	5600359	ExpressionStatement	"r_reg_free_internal ( reg , true )"	139:1:3439:3470	5600290	7	True				
ANR	5600360	CallExpression	"r_reg_free_internal ( reg , true )"		5600290	0					
ANR	5600361	Callee	r_reg_free_internal		5600290	0					
ANR	5600362	Identifier	r_reg_free_internal		5600290	0					
ANR	5600363	ArgumentList	reg		5600290	1					
ANR	5600364	Argument	reg		5600290	0					
ANR	5600365	Identifier	reg		5600290	0					
ANR	5600366	Argument	true		5600290	1					
ANR	5600367	Identifier	true		5600290	0					
ANR	5600368	ExpressionStatement	r_reg_arena_shrink ( reg )	140:1:3473:3497	5600290	8	True				
ANR	5600369	CallExpression	r_reg_arena_shrink ( reg )		5600290	0					
ANR	5600370	Callee	r_reg_arena_shrink		5600290	0					
ANR	5600371	Identifier	r_reg_arena_shrink		5600290	0					
ANR	5600372	ArgumentList	reg		5600290	1					
ANR	5600373	Argument	reg		5600290	0					
ANR	5600374	Identifier	reg		5600290	0					
ANR	5600375	ExpressionStatement	reg -> reg_profile_str = strdup ( str )	143:1:3530:3565	5600290	9	True				
ANR	5600376	AssignmentExpression	reg -> reg_profile_str = strdup ( str )		5600290	0		=			
ANR	5600377	PtrMemberAccess	reg -> reg_profile_str		5600290	0					
ANR	5600378	Identifier	reg		5600290	0					
ANR	5600379	Identifier	reg_profile_str		5600290	1					
ANR	5600380	CallExpression	strdup ( str )		5600290	1					
ANR	5600381	Callee	strdup		5600290	0					
ANR	5600382	Identifier	strdup		5600290	0					
ANR	5600383	ArgumentList	str		5600290	1					
ANR	5600384	Argument	str		5600290	0					
ANR	5600385	Identifier	str		5600290	0					
ANR	5600386	ExpressionStatement	l = 0	146:1:3585:3590	5600290	10	True				
ANR	5600387	AssignmentExpression	l = 0		5600290	0		=			
ANR	5600388	Identifier	l		5600290	0					
ANR	5600389	PrimaryExpression	0		5600290	1					
ANR	5600390	DoStatement	do		5600290	11					
ANR	5600391	CompoundStatement		26:4:551:551	5600290	0					
ANR	5600392	ExpressionStatement	l ++	150:2:3646:3649	5600290	0	True				
ANR	5600393	PostIncDecOperationExpression	l ++		5600290	0					
ANR	5600394	Identifier	l		5600290	0					
ANR	5600395	IncDec	++		5600290	1					
ANR	5600396	IfStatement	if ( * p == '#' )		5600290	1					
ANR	5600397	Condition	* p == '#'	152:6:3681:3689	5600290	0	True				
ANR	5600398	EqualityExpression	* p == '#'		5600290	0		==			
ANR	5600399	UnaryOperationExpression	* p		5600290	0					
ANR	5600400	UnaryOperator	*		5600290	0					
ANR	5600401	Identifier	p		5600290	1					
ANR	5600402	PrimaryExpression	'#'		5600290	1					
ANR	5600403	CompoundStatement		31:3:633:650	5600290	1					
ANR	5600404	IdentifierDeclStatement	const char * q = p ;	153:3:3697:3714	5600290	0	True				
ANR	5600405	IdentifierDecl	* q = p		5600290	0					
ANR	5600406	IdentifierDeclType	const char *		5600290	0					
ANR	5600407	Identifier	q		5600290	1					
ANR	5600408	AssignmentExpression	* q = p		5600290	2		=			
ANR	5600409	Identifier	p		5600290	0					
ANR	5600410	Identifier	p		5600290	1					
ANR	5600411	WhileStatement	while ( * q != '\\n' )		5600290	1					
ANR	5600412	Condition	* q != '\\n'	154:10:3726:3735	5600290	0	True				
ANR	5600413	EqualityExpression	* q != '\\n'		5600290	0		!=			
ANR	5600414	UnaryOperationExpression	* q		5600290	0					
ANR	5600415	UnaryOperator	*		5600290	0					
ANR	5600416	Identifier	q		5600290	1					
ANR	5600417	PrimaryExpression	'\\n'		5600290	1					
ANR	5600418	CompoundStatement		32:22:674:674	5600290	1					
ANR	5600419	ExpressionStatement	q ++	155:4:3744:3747	5600290	0	True				
ANR	5600420	PostIncDecOperationExpression	q ++		5600290	0					
ANR	5600421	Identifier	q		5600290	0					
ANR	5600422	IncDec	++		5600290	1					
ANR	5600423	ExpressionStatement	"reg -> reg_profile_cmt = r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"	157:3:3757:3844	5600290	2	True				
ANR	5600424	AssignmentExpression	"reg -> reg_profile_cmt = r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"		5600290	0		=			
ANR	5600425	PtrMemberAccess	reg -> reg_profile_cmt		5600290	0					
ANR	5600426	Identifier	reg		5600290	0					
ANR	5600427	Identifier	reg_profile_cmt		5600290	1					
ANR	5600428	CallExpression	"r_str_appendlen ( reg -> reg_profile_cmt , p , ( int ) ( q - p ) + 1 )"		5600290	1					
ANR	5600429	Callee	r_str_appendlen		5600290	0					
ANR	5600430	Identifier	r_str_appendlen		5600290	0					
ANR	5600431	ArgumentList	reg -> reg_profile_cmt		5600290	1					
ANR	5600432	Argument	reg -> reg_profile_cmt		5600290	0					
ANR	5600433	PtrMemberAccess	reg -> reg_profile_cmt		5600290	0					
ANR	5600434	Identifier	reg		5600290	0					
ANR	5600435	Identifier	reg_profile_cmt		5600290	1					
ANR	5600436	Argument	p		5600290	1					
ANR	5600437	Identifier	p		5600290	0					
ANR	5600438	Argument	( int ) ( q - p ) + 1		5600290	2					
ANR	5600439	AdditiveExpression	( int ) ( q - p ) + 1		5600290	0		+			
ANR	5600440	CastExpression	( int ) ( q - p )		5600290	0					
ANR	5600441	CastTarget	int		5600290	0					
ANR	5600442	AdditiveExpression	q - p		5600290	1		-			
ANR	5600443	Identifier	q		5600290	0					
ANR	5600444	Identifier	p		5600290	1					
ANR	5600445	PrimaryExpression	1		5600290	1					
ANR	5600446	ExpressionStatement	p = q	159:3:3849:3854	5600290	3	True				
ANR	5600447	AssignmentExpression	p = q		5600290	0		=			
ANR	5600448	Identifier	p		5600290	0					
ANR	5600449	Identifier	q		5600290	1					
ANR	5600450	ContinueStatement	continue ;	160:3:3859:3867	5600290	4	True				
ANR	5600451	ExpressionStatement	j = 0	162:2:3875:3880	5600290	2	True				
ANR	5600452	AssignmentExpression	j = 0		5600290	0		=			
ANR	5600453	Identifier	j		5600290	0					
ANR	5600454	PrimaryExpression	0		5600290	1					
ANR	5600455	WhileStatement	while ( * p )		5600290	3					
ANR	5600456	Condition	* p	164:9:3911:3912	5600290	0	True				
ANR	5600457	UnaryOperationExpression	* p		5600290	0					
ANR	5600458	UnaryOperator	*		5600290	0					
ANR	5600459	Identifier	p		5600290	1					
ANR	5600460	CompoundStatement		42:13:851:851	5600290	1					
ANR	5600461	WhileStatement	while ( * p == ' ' || * p == '\\t' )		5600290	0					
ANR	5600462	Condition	* p == ' ' || * p == '\\t'	166:10:3953:3975	5600290	0	True				
ANR	5600463	OrExpression	* p == ' ' || * p == '\\t'		5600290	0		||			
ANR	5600464	EqualityExpression	* p == ' '		5600290	0		==			
ANR	5600465	UnaryOperationExpression	* p		5600290	0					
ANR	5600466	UnaryOperator	*		5600290	0					
ANR	5600467	Identifier	p		5600290	1					
ANR	5600468	PrimaryExpression	' '		5600290	1					
ANR	5600469	EqualityExpression	* p == '\\t'		5600290	1		==			
ANR	5600470	UnaryOperationExpression	* p		5600290	0					
ANR	5600471	UnaryOperator	*		5600290	0					
ANR	5600472	Identifier	p		5600290	1					
ANR	5600473	PrimaryExpression	'\\t'		5600290	1					
ANR	5600474	CompoundStatement		44:35:914:914	5600290	1					
ANR	5600475	ExpressionStatement	p ++	167:4:3984:3987	5600290	0	True				
ANR	5600476	PostIncDecOperationExpression	p ++		5600290	0					
ANR	5600477	Identifier	p		5600290	0					
ANR	5600478	IncDec	++		5600290	1					
ANR	5600479	IfStatement	if ( * p == '#' )		5600290	1					
ANR	5600480	Condition	* p == '#'	170:7:4061:4069	5600290	0	True				
ANR	5600481	EqualityExpression	* p == '#'		5600290	0		==			
ANR	5600482	UnaryOperationExpression	* p		5600290	0					
ANR	5600483	UnaryOperator	*		5600290	0					
ANR	5600484	Identifier	p		5600290	1					
ANR	5600485	PrimaryExpression	'#'		5600290	1					
ANR	5600486	CompoundStatement		48:18:1008:1008	5600290	1					
ANR	5600487	WhileStatement	while ( * p != '\\n' )		5600290	0					
ANR	5600488	Condition	* p != '\\n'	171:11:4085:4094	5600290	0	True				
ANR	5600489	EqualityExpression	* p != '\\n'		5600290	0		!=			
ANR	5600490	UnaryOperationExpression	* p		5600290	0					
ANR	5600491	UnaryOperator	*		5600290	0					
ANR	5600492	Identifier	p		5600290	1					
ANR	5600493	PrimaryExpression	'\\n'		5600290	1					
ANR	5600494	CompoundStatement		49:23:1033:1033	5600290	1					
ANR	5600495	ExpressionStatement	p ++	172:5:4104:4107	5600290	0	True				
ANR	5600496	PostIncDecOperationExpression	p ++		5600290	0					
ANR	5600497	Identifier	p		5600290	0					
ANR	5600498	IncDec	++		5600290	1					
ANR	5600499	IfStatement	if ( * p == '\\n' )		5600290	2					
ANR	5600500	Condition	* p == '\\n'	176:7:4139:4148	5600290	0	True				
ANR	5600501	EqualityExpression	* p == '\\n'		5600290	0		==			
ANR	5600502	UnaryOperationExpression	* p		5600290	0					
ANR	5600503	UnaryOperator	*		5600290	0					
ANR	5600504	Identifier	p		5600290	1					
ANR	5600505	PrimaryExpression	'\\n'		5600290	1					
ANR	5600506	CompoundStatement		54:19:1087:1087	5600290	1					
ANR	5600507	BreakStatement	break ;	177:4:4157:4162	5600290	0	True				
ANR	5600508	ForStatement	for ( i = 0 ; isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1 ; )		5600290	3					
ANR	5600509	ForInit	i = 0 ;	181:8:4289:4294	5600290	0	True				
ANR	5600510	AssignmentExpression	i = 0		5600290	0		=			
ANR	5600511	Identifier	i		5600290	0					
ANR	5600512	PrimaryExpression	0		5600290	1					
ANR	5600513	Condition	isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1	181:15:4296:4352	5600290	1	True				
ANR	5600514	AndExpression	isgraph ( ( const unsigned char ) * p ) && i < sizeof ( tmp ) - 1		5600290	0		&&			
ANR	5600515	CallExpression	isgraph ( ( const unsigned char ) * p )		5600290	0					
ANR	5600516	Callee	isgraph		5600290	0					
ANR	5600517	Identifier	isgraph		5600290	0					
ANR	5600518	ArgumentList	( const unsigned char ) * p		5600290	1					
ANR	5600519	Argument	( const unsigned char ) * p		5600290	0					
ANR	5600520	CastExpression	( const unsigned char ) * p		5600290	0					
ANR	5600521	CastTarget	const unsigned char		5600290	0					
ANR	5600522	UnaryOperationExpression	* p		5600290	1					
ANR	5600523	UnaryOperator	*		5600290	0					
ANR	5600524	Identifier	p		5600290	1					
ANR	5600525	RelationalExpression	i < sizeof ( tmp ) - 1		5600290	1		<			
ANR	5600526	Identifier	i		5600290	0					
ANR	5600527	AdditiveExpression	sizeof ( tmp ) - 1		5600290	1		-			
ANR	5600528	SizeofExpression	sizeof ( tmp )		5600290	0					
ANR	5600529	Sizeof	sizeof		5600290	0					
ANR	5600530	SizeofOperand	tmp		5600290	1					
ANR	5600531	PrimaryExpression	1		5600290	1					
ANR	5600532	CompoundStatement		59:75:1292:1292	5600290	2					
ANR	5600533	ExpressionStatement	tmp [ i ++ ] = * p ++	182:4:4362:4377	5600290	0	True				
ANR	5600534	AssignmentExpression	tmp [ i ++ ] = * p ++		5600290	0		=			
ANR	5600535	ArrayIndexing	tmp [ i ++ ]		5600290	0					
ANR	5600536	Identifier	tmp		5600290	0					
ANR	5600537	PostIncDecOperationExpression	i ++		5600290	1					
ANR	5600538	Identifier	i		5600290	0					
ANR	5600539	IncDec	++		5600290	1					
ANR	5600540	UnaryOperationExpression	* p ++		5600290	1					
ANR	5600541	UnaryOperator	*		5600290	0					
ANR	5600542	PostIncDecOperationExpression	p ++		5600290	1					
ANR	5600543	Identifier	p		5600290	0					
ANR	5600544	IncDec	++		5600290	1					
ANR	5600545	ExpressionStatement	tmp [ i ] = '\\0'	184:3:4387:4400	5600290	4	True				
ANR	5600546	AssignmentExpression	tmp [ i ] = '\\0'		5600290	0		=			
ANR	5600547	ArrayIndexing	tmp [ i ]		5600290	0					
ANR	5600548	Identifier	tmp		5600290	0					
ANR	5600549	Identifier	i		5600290	1					
ANR	5600550	PrimaryExpression	'\\0'		5600290	1					
ANR	5600551	IfStatement	if ( j > PARSER_MAX_TOKENS - 1 )		5600290	5					
ANR	5600552	Condition	j > PARSER_MAX_TOKENS - 1	186:7:4442:4466	5600290	0	True				
ANR	5600553	RelationalExpression	j > PARSER_MAX_TOKENS - 1		5600290	0		>			
ANR	5600554	Identifier	j		5600290	0					
ANR	5600555	AdditiveExpression	PARSER_MAX_TOKENS - 1		5600290	1		-			
ANR	5600556	Identifier	PARSER_MAX_TOKENS		5600290	0					
ANR	5600557	PrimaryExpression	1		5600290	1					
ANR	5600558	CompoundStatement		64:34:1405:1405	5600290	1					
ANR	5600559	BreakStatement	break ;	187:4:4475:4480	5600290	0	True				
ANR	5600560	ExpressionStatement	tok [ j ++ ] = strdup ( tmp )	190:3:4511:4534	5600290	6	True				
ANR	5600561	AssignmentExpression	tok [ j ++ ] = strdup ( tmp )		5600290	0		=			
ANR	5600562	ArrayIndexing	tok [ j ++ ]		5600290	0					
ANR	5600563	Identifier	tok		5600290	0					
ANR	5600564	PostIncDecOperationExpression	j ++		5600290	1					
ANR	5600565	Identifier	j		5600290	0					
ANR	5600566	IncDec	++		5600290	1					
ANR	5600567	CallExpression	strdup ( tmp )		5600290	1					
ANR	5600568	Callee	strdup		5600290	0					
ANR	5600569	Identifier	strdup		5600290	0					
ANR	5600570	ArgumentList	tmp		5600290	1					
ANR	5600571	Argument	tmp		5600290	0					
ANR	5600572	Identifier	tmp		5600290	0					
ANR	5600573	IfStatement	if ( j )		5600290	4					
ANR	5600574	Condition	j	193:6:4567:4567	5600290	0	True				
ANR	5600575	Identifier	j		5600290	0					
ANR	5600576	CompoundStatement		75:3:1621:1714	5600290	1					
ANR	5600577	IdentifierDeclStatement	char * first = tok [ 0 ] ;	195:3:4603:4623	5600290	0	True				
ANR	5600578	IdentifierDecl	* first = tok [ 0 ]		5600290	0					
ANR	5600579	IdentifierDeclType	char *		5600290	0					
ANR	5600580	Identifier	first		5600290	1					
ANR	5600581	AssignmentExpression	* first = tok [ 0 ]		5600290	2		=			
ANR	5600582	Identifier	first		5600290	0					
ANR	5600583	ArrayIndexing	tok [ 0 ]		5600290	1					
ANR	5600584	Identifier	tok		5600290	0					
ANR	5600585	PrimaryExpression	0		5600290	1					
ANR	5600586	IdentifierDeclStatement	"const char * r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j ) ;"	197:3:4685:4778	5600290	1	True				
ANR	5600587	IdentifierDecl	"* r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5600290	0					
ANR	5600588	IdentifierDeclType	const char *		5600290	0					
ANR	5600589	Identifier	r		5600290	1					
ANR	5600590	AssignmentExpression	"* r = ( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5600290	2		=			
ANR	5600591	Identifier	r		5600290	0					
ANR	5600592	ConditionalExpression	"( * first == '=' ) ? parse_alias ( reg , tok , j ) : parse_def ( reg , tok , j )"		5600290	1					
ANR	5600593	Condition	* first == '='		5600290	0					
ANR	5600594	EqualityExpression	* first == '='		5600290	0		==			
ANR	5600595	UnaryOperationExpression	* first		5600290	0					
ANR	5600596	UnaryOperator	*		5600290	0					
ANR	5600597	Identifier	first		5600290	1					
ANR	5600598	PrimaryExpression	'='		5600290	1					
ANR	5600599	CallExpression	"parse_alias ( reg , tok , j )"		5600290	1					
ANR	5600600	Callee	parse_alias		5600290	0					
ANR	5600601	Identifier	parse_alias		5600290	0					
ANR	5600602	ArgumentList	reg		5600290	1					
ANR	5600603	Argument	reg		5600290	0					
ANR	5600604	Identifier	reg		5600290	0					
ANR	5600605	Argument	tok		5600290	1					
ANR	5600606	Identifier	tok		5600290	0					
ANR	5600607	Argument	j		5600290	2					
ANR	5600608	Identifier	j		5600290	0					
ANR	5600609	CallExpression	"parse_def ( reg , tok , j )"		5600290	2					
ANR	5600610	Callee	parse_def		5600290	0					
ANR	5600611	Identifier	parse_def		5600290	0					
ANR	5600612	ArgumentList	reg		5600290	1					
ANR	5600613	Argument	reg		5600290	0					
ANR	5600614	Identifier	reg		5600290	0					
ANR	5600615	Argument	tok		5600290	1					
ANR	5600616	Identifier	tok		5600290	0					
ANR	5600617	Argument	j		5600290	2					
ANR	5600618	Identifier	j		5600290	0					
ANR	5600619	ForStatement	for ( i = 0 ; i < j ; i ++ )		5600290	2					
ANR	5600620	ForInit	i = 0 ;	201:8:4803:4808	5600290	0	True				
ANR	5600621	AssignmentExpression	i = 0		5600290	0		=			
ANR	5600622	Identifier	i		5600290	0					
ANR	5600623	PrimaryExpression	0		5600290	1					
ANR	5600624	Condition	i < j	201:15:4810:4814	5600290	1	True				
ANR	5600625	RelationalExpression	i < j		5600290	0		<			
ANR	5600626	Identifier	i		5600290	0					
ANR	5600627	Identifier	j		5600290	1					
ANR	5600628	PostIncDecOperationExpression	i ++	201:22:4817:4819	5600290	2	True				
ANR	5600629	Identifier	i		5600290	0					
ANR	5600630	IncDec	++		5600290	1					
ANR	5600631	CompoundStatement		79:27:1758:1758	5600290	3					
ANR	5600632	ExpressionStatement	free ( tok [ i ] )	202:4:4828:4841	5600290	0	True				
ANR	5600633	CallExpression	free ( tok [ i ] )		5600290	0					
ANR	5600634	Callee	free		5600290	0					
ANR	5600635	Identifier	free		5600290	0					
ANR	5600636	ArgumentList	tok [ i ]		5600290	1					
ANR	5600637	Argument	tok [ i ]		5600290	0					
ANR	5600638	ArrayIndexing	tok [ i ]		5600290	0					
ANR	5600639	Identifier	tok		5600290	0					
ANR	5600640	Identifier	i		5600290	1					
ANR	5600641	IfStatement	if ( r )		5600290	3					
ANR	5600642	Condition	r	205:7:4899:4899	5600290	0	True				
ANR	5600643	Identifier	r		5600290	0					
ANR	5600644	CompoundStatement		83:10:1838:1838	5600290	1					
ANR	5600645	ExpressionStatement	"eprintf ( ""%s: Parse error @ line %d (%s)\\n"" , __FUNCTION__ , l , r )"	206:4:4908:4977	5600290	0	True				
ANR	5600646	CallExpression	"eprintf ( ""%s: Parse error @ line %d (%s)\\n"" , __FUNCTION__ , l , r )"		5600290	0					
ANR	5600647	Callee	eprintf		5600290	0					
ANR	5600648	Identifier	eprintf		5600290	0					
ANR	5600649	ArgumentList	"""%s: Parse error @ line %d (%s)\\n"""		5600290	1					
ANR	5600650	Argument	"""%s: Parse error @ line %d (%s)\\n"""		5600290	0					
ANR	5600651	PrimaryExpression	"""%s: Parse error @ line %d (%s)\\n"""		5600290	0					
ANR	5600652	Argument	__FUNCTION__		5600290	1					
ANR	5600653	Identifier	__FUNCTION__		5600290	0					
ANR	5600654	Argument	l		5600290	2					
ANR	5600655	Identifier	l		5600290	0					
ANR	5600656	Argument	r		5600290	3					
ANR	5600657	Identifier	r		5600290	0					
ANR	5600658	ExpressionStatement	"r_reg_free_internal ( reg , false )"	210:4:5030:5062	5600290	1	True				
ANR	5600659	CallExpression	"r_reg_free_internal ( reg , false )"		5600290	0					
ANR	5600660	Callee	r_reg_free_internal		5600290	0					
ANR	5600661	Identifier	r_reg_free_internal		5600290	0					
ANR	5600662	ArgumentList	reg		5600290	1					
ANR	5600663	Argument	reg		5600290	0					
ANR	5600664	Identifier	reg		5600290	0					
ANR	5600665	Argument	false		5600290	1					
ANR	5600666	Identifier	false		5600290	0					
ANR	5600667	ReturnStatement	return false ;	211:4:5068:5080	5600290	2	True				
ANR	5600668	Identifier	false		5600290	0					
ANR	5600669	Condition	* p ++	214:10:5101:5104	5600290	1	True				
ANR	5600670	UnaryOperationExpression	* p ++		5600290	0					
ANR	5600671	UnaryOperator	*		5600290	0					
ANR	5600672	PostIncDecOperationExpression	p ++		5600290	1					
ANR	5600673	Identifier	p		5600290	0					
ANR	5600674	IncDec	++		5600290	1					
ANR	5600675	ExpressionStatement	reg -> size = 0	215:1:5109:5122	5600290	12	True				
ANR	5600676	AssignmentExpression	reg -> size = 0		5600290	0		=			
ANR	5600677	PtrMemberAccess	reg -> size		5600290	0					
ANR	5600678	Identifier	reg		5600290	0					
ANR	5600679	Identifier	size		5600290	1					
ANR	5600680	PrimaryExpression	0		5600290	1					
ANR	5600681	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5600290	13					
ANR	5600682	ForInit	i = 0 ;	216:6:5130:5135	5600290	0	True				
ANR	5600683	AssignmentExpression	i = 0		5600290	0		=			
ANR	5600684	Identifier	i		5600290	0					
ANR	5600685	PrimaryExpression	0		5600290	1					
ANR	5600686	Condition	i < R_REG_TYPE_LAST	216:13:5137:5155	5600290	1	True				
ANR	5600687	RelationalExpression	i < R_REG_TYPE_LAST		5600290	0		<			
ANR	5600688	Identifier	i		5600290	0					
ANR	5600689	Identifier	R_REG_TYPE_LAST		5600290	1					
ANR	5600690	PostIncDecOperationExpression	i ++	216:34:5158:5160	5600290	2	True				
ANR	5600691	Identifier	i		5600290	0					
ANR	5600692	IncDec	++		5600290	1					
ANR	5600693	CompoundStatement		95:2:2103:2132	5600290	3					
ANR	5600694	IdentifierDeclStatement	RRegSet * rs = & reg -> regset [ i ] ;	217:2:5167:5196	5600290	0	True				
ANR	5600695	IdentifierDecl	* rs = & reg -> regset [ i ]		5600290	0					
ANR	5600696	IdentifierDeclType	RRegSet *		5600290	0					
ANR	5600697	Identifier	rs		5600290	1					
ANR	5600698	AssignmentExpression	* rs = & reg -> regset [ i ]		5600290	2		=			
ANR	5600699	Identifier	rs		5600290	0					
ANR	5600700	UnaryOperationExpression	& reg -> regset [ i ]		5600290	1					
ANR	5600701	UnaryOperator	&		5600290	0					
ANR	5600702	ArrayIndexing	reg -> regset [ i ]		5600290	1					
ANR	5600703	PtrMemberAccess	reg -> regset		5600290	0					
ANR	5600704	Identifier	reg		5600290	0					
ANR	5600705	Identifier	regset		5600290	1					
ANR	5600706	Identifier	i		5600290	1					
ANR	5600707	IfStatement	if ( rs && rs -> arena )		5600290	1					
ANR	5600708	Condition	rs && rs -> arena	219:6:5279:5293	5600290	0	True				
ANR	5600709	AndExpression	rs && rs -> arena		5600290	0		&&			
ANR	5600710	Identifier	rs		5600290	0					
ANR	5600711	PtrMemberAccess	rs -> arena		5600290	1					
ANR	5600712	Identifier	rs		5600290	0					
ANR	5600713	Identifier	arena		5600290	1					
ANR	5600714	CompoundStatement		97:23:2232:2232	5600290	1					
ANR	5600715	ExpressionStatement	reg -> size += rs -> arena -> size	220:3:5301:5329	5600290	0	True				
ANR	5600716	AssignmentExpression	reg -> size += rs -> arena -> size		5600290	0		+=			
ANR	5600717	PtrMemberAccess	reg -> size		5600290	0					
ANR	5600718	Identifier	reg		5600290	0					
ANR	5600719	Identifier	size		5600290	1					
ANR	5600720	PtrMemberAccess	rs -> arena -> size		5600290	1					
ANR	5600721	PtrMemberAccess	rs -> arena		5600290	0					
ANR	5600722	Identifier	rs		5600290	0					
ANR	5600723	Identifier	arena		5600290	1					
ANR	5600724	Identifier	size		5600290	1					
ANR	5600725	ExpressionStatement	r_reg_fit_arena ( reg )	228:1:5494:5515	5600290	14	True				
ANR	5600726	CallExpression	r_reg_fit_arena ( reg )		5600290	0					
ANR	5600727	Callee	r_reg_fit_arena		5600290	0					
ANR	5600728	Identifier	r_reg_fit_arena		5600290	0					
ANR	5600729	ArgumentList	reg		5600290	1					
ANR	5600730	Argument	reg		5600290	0					
ANR	5600731	Identifier	reg		5600290	0					
ANR	5600732	ExpressionStatement	r_reg_arena_push ( reg )	230:1:5561:5583	5600290	15	True				
ANR	5600733	CallExpression	r_reg_arena_push ( reg )		5600290	0					
ANR	5600734	Callee	r_reg_arena_push		5600290	0					
ANR	5600735	Identifier	r_reg_arena_push		5600290	0					
ANR	5600736	ArgumentList	reg		5600290	1					
ANR	5600737	Argument	reg		5600290	0					
ANR	5600738	Identifier	reg		5600290	0					
ANR	5600739	ExpressionStatement	r_reg_reindex ( reg )	231:1:5586:5605	5600290	16	True				
ANR	5600740	CallExpression	r_reg_reindex ( reg )		5600290	0					
ANR	5600741	Callee	r_reg_reindex		5600290	0					
ANR	5600742	Identifier	r_reg_reindex		5600290	0					
ANR	5600743	ArgumentList	reg		5600290	1					
ANR	5600744	Argument	reg		5600290	0					
ANR	5600745	Identifier	reg		5600290	0					
ANR	5600746	ReturnStatement	return true ;	233:1:5625:5636	5600290	17	True				
ANR	5600747	Identifier	true		5600290	0					
ANR	5600748	ReturnType	R_API bool		5600290	1					
ANR	5600749	Identifier	r_reg_set_profile_string		5600290	2					
ANR	5600750	ParameterList	"RReg * reg , const char * str"		5600290	3					
ANR	5600751	Parameter	RReg * reg	123:36:3035:3043	5600290	0	True				
ANR	5600752	ParameterType	RReg *		5600290	0					
ANR	5600753	Identifier	reg		5600290	1					
ANR	5600754	Parameter	const char * str	123:47:3046:3060	5600290	1	True				
ANR	5600755	ParameterType	const char *		5600290	0					
ANR	5600756	Identifier	str		5600290	1					
ANR	5600757	CFGEntryNode	ENTRY		5600290		True				
ANR	5600758	CFGExitNode	EXIT		5600290		True				
ANR	5600759	Symbol	* tmp		5600290						
ANR	5600760	Symbol	rs		5600290						
ANR	5600761	Symbol	reg -> reg_profile_str		5600290						
ANR	5600762	Symbol	rs -> arena -> size		5600290						
ANR	5600763	Symbol	reg -> regset		5600290						
ANR	5600764	Symbol	tok		5600290						
ANR	5600765	Symbol	PARSER_MAX_TOKENS		5600290						
ANR	5600766	Symbol	reg		5600290						
ANR	5600767	Symbol	* first		5600290						
ANR	5600768	Symbol	tmp		5600290						
ANR	5600769	Symbol	r_str_appendlen		5600290						
ANR	5600770	Symbol	strcmp		5600290						
ANR	5600771	Symbol	* rs		5600290						
ANR	5600772	Symbol	* p ++		5600290						
ANR	5600773	Symbol	false		5600290						
ANR	5600774	Symbol	isgraph		5600290						
ANR	5600775	Symbol	i		5600290						
ANR	5600776	Symbol	R_REG_TYPE_LAST		5600290						
ANR	5600777	Symbol	j		5600290						
ANR	5600778	Symbol	l		5600290						
ANR	5600779	Symbol	__FUNCTION__		5600290						
ANR	5600780	Symbol	reg -> reg_profile_cmt		5600290						
ANR	5600781	Symbol	* * rs		5600290						
ANR	5600782	Symbol	str		5600290						
ANR	5600783	Symbol	p		5600290						
ANR	5600784	Symbol	q		5600290						
ANR	5600785	Symbol	r		5600290						
ANR	5600786	Symbol	* i		5600290						
ANR	5600787	Symbol	* rs -> arena		5600290						
ANR	5600788	Symbol	rs -> arena		5600290						
ANR	5600789	Symbol	true		5600290						
ANR	5600790	Symbol	reg -> size		5600290						
ANR	5600791	Symbol	* p		5600290						
ANR	5600792	Symbol	* tok		5600290						
ANR	5600793	Symbol	parse_alias		5600290						
ANR	5600794	Symbol	strdup		5600290						
ANR	5600795	Symbol	* q		5600290						
ANR	5600796	Symbol	parse_def		5600290						
ANR	5600797	Symbol	* reg		5600290						
ANR	5600798	Symbol	first		5600290						
ANR	5600799	Function	r_reg_set_profile	236:0:5641:6097							
ANR	5600800	FunctionDef	"r_reg_set_profile (RReg * reg , const char * profile)"		5600799	0					
ANR	5600801	CompoundStatement		236:61:5702:6097	5600799	0					
ANR	5600802	IdentifierDeclStatement	"char * base , * file ;"	237:1:5705:5722	5600799	0	True				
ANR	5600803	IdentifierDecl	* base		5600799	0					
ANR	5600804	IdentifierDeclType	char *		5600799	0					
ANR	5600805	Identifier	base		5600799	1					
ANR	5600806	IdentifierDecl	* file		5600799	1					
ANR	5600807	IdentifierDeclType	char *		5600799	0					
ANR	5600808	Identifier	file		5600799	1					
ANR	5600809	IdentifierDeclStatement	"char * str = r_file_slurp ( profile , NULL ) ;"	238:1:5725:5765	5600799	1	True				
ANR	5600810	IdentifierDecl	"* str = r_file_slurp ( profile , NULL )"		5600799	0					
ANR	5600811	IdentifierDeclType	char *		5600799	0					
ANR	5600812	Identifier	str		5600799	1					
ANR	5600813	AssignmentExpression	"* str = r_file_slurp ( profile , NULL )"		5600799	2		=			
ANR	5600814	Identifier	str		5600799	0					
ANR	5600815	CallExpression	"r_file_slurp ( profile , NULL )"		5600799	1					
ANR	5600816	Callee	r_file_slurp		5600799	0					
ANR	5600817	Identifier	r_file_slurp		5600799	0					
ANR	5600818	ArgumentList	profile		5600799	1					
ANR	5600819	Argument	profile		5600799	0					
ANR	5600820	Identifier	profile		5600799	0					
ANR	5600821	Argument	NULL		5600799	1					
ANR	5600822	Identifier	NULL		5600799	0					
ANR	5600823	IfStatement	if ( ! str )		5600799	2					
ANR	5600824	Condition	! str	239:5:5772:5775	5600799	0	True				
ANR	5600825	UnaryOperationExpression	! str		5600799	0					
ANR	5600826	UnaryOperator	!		5600799	0					
ANR	5600827	Identifier	str		5600799	1					
ANR	5600828	CompoundStatement		4:11:75:75	5600799	1					
ANR	5600829	ExpressionStatement	base = r_sys_getenv ( R_LIB_ENV )	240:2:5782:5813	5600799	0	True				
ANR	5600830	AssignmentExpression	base = r_sys_getenv ( R_LIB_ENV )		5600799	0		=			
ANR	5600831	Identifier	base		5600799	0					
ANR	5600832	CallExpression	r_sys_getenv ( R_LIB_ENV )		5600799	1					
ANR	5600833	Callee	r_sys_getenv		5600799	0					
ANR	5600834	Identifier	r_sys_getenv		5600799	0					
ANR	5600835	ArgumentList	R_LIB_ENV		5600799	1					
ANR	5600836	Argument	R_LIB_ENV		5600799	0					
ANR	5600837	Identifier	R_LIB_ENV		5600799	0					
ANR	5600838	IfStatement	if ( base )		5600799	1					
ANR	5600839	Condition	base	241:6:5821:5824	5600799	0	True				
ANR	5600840	Identifier	base		5600799	0					
ANR	5600841	CompoundStatement		6:12:124:124	5600799	1					
ANR	5600842	ExpressionStatement	"file = r_str_append ( base , profile )"	242:3:5832:5867	5600799	0	True				
ANR	5600843	AssignmentExpression	"file = r_str_append ( base , profile )"		5600799	0		=			
ANR	5600844	Identifier	file		5600799	0					
ANR	5600845	CallExpression	"r_str_append ( base , profile )"		5600799	1					
ANR	5600846	Callee	r_str_append		5600799	0					
ANR	5600847	Identifier	r_str_append		5600799	0					
ANR	5600848	ArgumentList	base		5600799	1					
ANR	5600849	Argument	base		5600799	0					
ANR	5600850	Identifier	base		5600799	0					
ANR	5600851	Argument	profile		5600799	1					
ANR	5600852	Identifier	profile		5600799	0					
ANR	5600853	ExpressionStatement	"str = r_file_slurp ( file , NULL )"	243:3:5872:5903	5600799	1	True				
ANR	5600854	AssignmentExpression	"str = r_file_slurp ( file , NULL )"		5600799	0		=			
ANR	5600855	Identifier	str		5600799	0					
ANR	5600856	CallExpression	"r_file_slurp ( file , NULL )"		5600799	1					
ANR	5600857	Callee	r_file_slurp		5600799	0					
ANR	5600858	Identifier	r_file_slurp		5600799	0					
ANR	5600859	ArgumentList	file		5600799	1					
ANR	5600860	Argument	file		5600799	0					
ANR	5600861	Identifier	file		5600799	0					
ANR	5600862	Argument	NULL		5600799	1					
ANR	5600863	Identifier	NULL		5600799	0					
ANR	5600864	ExpressionStatement	free ( file )	244:3:5908:5919	5600799	2	True				
ANR	5600865	CallExpression	free ( file )		5600799	0					
ANR	5600866	Callee	free		5600799	0					
ANR	5600867	Identifier	free		5600799	0					
ANR	5600868	ArgumentList	file		5600799	1					
ANR	5600869	Argument	file		5600799	0					
ANR	5600870	Identifier	file		5600799	0					
ANR	5600871	IfStatement	if ( ! str )		5600799	3					
ANR	5600872	Condition	! str	247:5:5933:5936	5600799	0	True				
ANR	5600873	UnaryOperationExpression	! str		5600799	0					
ANR	5600874	UnaryOperator	!		5600799	0					
ANR	5600875	Identifier	str		5600799	1					
ANR	5600876	CompoundStatement		12:11:236:236	5600799	1					
ANR	5600877	ExpressionStatement	"eprintf ( ""r_reg_set_profile: Cannot find '%s'\\n"" , profile )"	248:2:5943:6001	5600799	0	True				
ANR	5600878	CallExpression	"eprintf ( ""r_reg_set_profile: Cannot find '%s'\\n"" , profile )"		5600799	0					
ANR	5600879	Callee	eprintf		5600799	0					
ANR	5600880	Identifier	eprintf		5600799	0					
ANR	5600881	ArgumentList	"""r_reg_set_profile: Cannot find '%s'\\n"""		5600799	1					
ANR	5600882	Argument	"""r_reg_set_profile: Cannot find '%s'\\n"""		5600799	0					
ANR	5600883	PrimaryExpression	"""r_reg_set_profile: Cannot find '%s'\\n"""		5600799	0					
ANR	5600884	Argument	profile		5600799	1					
ANR	5600885	Identifier	profile		5600799	0					
ANR	5600886	ReturnStatement	return false ;	249:2:6005:6017	5600799	1	True				
ANR	5600887	Identifier	false		5600799	0					
ANR	5600888	IdentifierDeclStatement	"bool ret = r_reg_set_profile_string ( reg , str ) ;"	251:1:6023:6069	5600799	4	True				
ANR	5600889	IdentifierDecl	"ret = r_reg_set_profile_string ( reg , str )"		5600799	0					
ANR	5600890	IdentifierDeclType	bool		5600799	0					
ANR	5600891	Identifier	ret		5600799	1					
ANR	5600892	AssignmentExpression	"ret = r_reg_set_profile_string ( reg , str )"		5600799	2		=			
ANR	5600893	Identifier	ret		5600799	0					
ANR	5600894	CallExpression	"r_reg_set_profile_string ( reg , str )"		5600799	1					
ANR	5600895	Callee	r_reg_set_profile_string		5600799	0					
ANR	5600896	Identifier	r_reg_set_profile_string		5600799	0					
ANR	5600897	ArgumentList	reg		5600799	1					
ANR	5600898	Argument	reg		5600799	0					
ANR	5600899	Identifier	reg		5600799	0					
ANR	5600900	Argument	str		5600799	1					
ANR	5600901	Identifier	str		5600799	0					
ANR	5600902	ExpressionStatement	free ( str )	252:1:6072:6082	5600799	5	True				
ANR	5600903	CallExpression	free ( str )		5600799	0					
ANR	5600904	Callee	free		5600799	0					
ANR	5600905	Identifier	free		5600799	0					
ANR	5600906	ArgumentList	str		5600799	1					
ANR	5600907	Argument	str		5600799	0					
ANR	5600908	Identifier	str		5600799	0					
ANR	5600909	ReturnStatement	return ret ;	253:1:6085:6095	5600799	6	True				
ANR	5600910	Identifier	ret		5600799	0					
ANR	5600911	ReturnType	R_API bool		5600799	1					
ANR	5600912	Identifier	r_reg_set_profile		5600799	2					
ANR	5600913	ParameterList	"RReg * reg , const char * profile"		5600799	3					
ANR	5600914	Parameter	RReg * reg	236:29:5670:5678	5600799	0	True				
ANR	5600915	ParameterType	RReg *		5600799	0					
ANR	5600916	Identifier	reg		5600799	1					
ANR	5600917	Parameter	const char * profile	236:40:5681:5699	5600799	1	True				
ANR	5600918	ParameterType	const char *		5600799	0					
ANR	5600919	Identifier	profile		5600799	1					
ANR	5600920	CFGEntryNode	ENTRY		5600799		True				
ANR	5600921	CFGExitNode	EXIT		5600799		True				
ANR	5600922	Symbol	ret		5600799						
ANR	5600923	Symbol	r_str_append		5600799						
ANR	5600924	Symbol	r_file_slurp		5600799						
ANR	5600925	Symbol	NULL		5600799						
ANR	5600926	Symbol	r_sys_getenv		5600799						
ANR	5600927	Symbol	profile		5600799						
ANR	5600928	Symbol	false		5600799						
ANR	5600929	Symbol	str		5600799						
ANR	5600930	Symbol	R_LIB_ENV		5600799						
ANR	5600931	Symbol	file		5600799						
ANR	5600932	Symbol	reg		5600799						
ANR	5600933	Symbol	r_reg_set_profile_string		5600799						
ANR	5600934	Symbol	base		5600799						
ANR	5600935	Function	gdb_to_r2_profile	256:0:6100:8921							
ANR	5600936	FunctionDef	gdb_to_r2_profile (char * gdb)		5600935	0					
ANR	5600937	CompoundStatement		256:41:6141:8921	5600935	0					
ANR	5600938	IdentifierDeclStatement	"char * ptr = gdb , * ptr1 , * gptr , * gptr1 ;"	257:1:6144:6181	5600935	0	True				
ANR	5600939	IdentifierDecl	* ptr = gdb		5600935	0					
ANR	5600940	IdentifierDeclType	char *		5600935	0					
ANR	5600941	Identifier	ptr		5600935	1					
ANR	5600942	AssignmentExpression	* ptr = gdb		5600935	2		=			
ANR	5600943	Identifier	gdb		5600935	0					
ANR	5600944	Identifier	gdb		5600935	1					
ANR	5600945	IdentifierDecl	* ptr1		5600935	1					
ANR	5600946	IdentifierDeclType	char *		5600935	0					
ANR	5600947	Identifier	ptr1		5600935	1					
ANR	5600948	IdentifierDecl	* gptr		5600935	2					
ANR	5600949	IdentifierDeclType	char *		5600935	0					
ANR	5600950	Identifier	gptr		5600935	1					
ANR	5600951	IdentifierDecl	* gptr1		5600935	3					
ANR	5600952	IdentifierDeclType	char *		5600935	0					
ANR	5600953	Identifier	gptr1		5600935	1					
ANR	5600954	IdentifierDeclStatement	"char name [ 16 ] , groups [ 128 ] , type [ 16 ] ;"	258:1:6184:6220	5600935	1	True				
ANR	5600955	IdentifierDecl	name [ 16 ]		5600935	0					
ANR	5600956	IdentifierDeclType	char [ 16 ]		5600935	0					
ANR	5600957	Identifier	name		5600935	1					
ANR	5600958	PrimaryExpression	16		5600935	2					
ANR	5600959	IdentifierDecl	groups [ 128 ]		5600935	1					
ANR	5600960	IdentifierDeclType	char [ 128 ]		5600935	0					
ANR	5600961	Identifier	groups		5600935	1					
ANR	5600962	PrimaryExpression	128		5600935	2					
ANR	5600963	IdentifierDecl	type [ 16 ]		5600935	2					
ANR	5600964	IdentifierDeclType	char [ 16 ]		5600935	0					
ANR	5600965	Identifier	type		5600935	1					
ANR	5600966	PrimaryExpression	16		5600935	2					
ANR	5600967	IdentifierDeclStatement	"const int all = 1 , gpr = 2 , save = 4 , restore = 8 , float_ = 16 , sse = 32 , vector = 64 , system = 128 , mmx = 256 ;"	259:1:6223:6337	5600935	2	True				
ANR	5600968	IdentifierDecl	all = 1		5600935	0					
ANR	5600969	IdentifierDeclType	const int		5600935	0					
ANR	5600970	Identifier	all		5600935	1					
ANR	5600971	AssignmentExpression	all = 1		5600935	2		=			
ANR	5600972	Identifier	all		5600935	0					
ANR	5600973	PrimaryExpression	1		5600935	1					
ANR	5600974	IdentifierDecl	gpr = 2		5600935	1					
ANR	5600975	IdentifierDeclType	const int		5600935	0					
ANR	5600976	Identifier	gpr		5600935	1					
ANR	5600977	AssignmentExpression	gpr = 2		5600935	2		=			
ANR	5600978	Identifier	gpr		5600935	0					
ANR	5600979	PrimaryExpression	2		5600935	1					
ANR	5600980	IdentifierDecl	save = 4		5600935	2					
ANR	5600981	IdentifierDeclType	const int		5600935	0					
ANR	5600982	Identifier	save		5600935	1					
ANR	5600983	AssignmentExpression	save = 4		5600935	2		=			
ANR	5600984	Identifier	save		5600935	0					
ANR	5600985	PrimaryExpression	4		5600935	1					
ANR	5600986	IdentifierDecl	restore = 8		5600935	3					
ANR	5600987	IdentifierDeclType	const int		5600935	0					
ANR	5600988	Identifier	restore		5600935	1					
ANR	5600989	AssignmentExpression	restore = 8		5600935	2		=			
ANR	5600990	Identifier	restore		5600935	0					
ANR	5600991	PrimaryExpression	8		5600935	1					
ANR	5600992	IdentifierDecl	float_ = 16		5600935	4					
ANR	5600993	IdentifierDeclType	const int		5600935	0					
ANR	5600994	Identifier	float_		5600935	1					
ANR	5600995	AssignmentExpression	float_ = 16		5600935	2		=			
ANR	5600996	Identifier	float_		5600935	0					
ANR	5600997	PrimaryExpression	16		5600935	1					
ANR	5600998	IdentifierDecl	sse = 32		5600935	5					
ANR	5600999	IdentifierDeclType	const int		5600935	0					
ANR	5601000	Identifier	sse		5600935	1					
ANR	5601001	AssignmentExpression	sse = 32		5600935	2		=			
ANR	5601002	Identifier	sse		5600935	0					
ANR	5601003	PrimaryExpression	32		5600935	1					
ANR	5601004	IdentifierDecl	vector = 64		5600935	6					
ANR	5601005	IdentifierDeclType	const int		5600935	0					
ANR	5601006	Identifier	vector		5600935	1					
ANR	5601007	AssignmentExpression	vector = 64		5600935	2		=			
ANR	5601008	Identifier	vector		5600935	0					
ANR	5601009	PrimaryExpression	64		5600935	1					
ANR	5601010	IdentifierDecl	system = 128		5600935	7					
ANR	5601011	IdentifierDeclType	const int		5600935	0					
ANR	5601012	Identifier	system		5600935	1					
ANR	5601013	AssignmentExpression	system = 128		5600935	2		=			
ANR	5601014	Identifier	system		5600935	0					
ANR	5601015	PrimaryExpression	128		5600935	1					
ANR	5601016	IdentifierDecl	mmx = 256		5600935	8					
ANR	5601017	IdentifierDeclType	const int		5600935	0					
ANR	5601018	Identifier	mmx		5600935	1					
ANR	5601019	AssignmentExpression	mmx = 256		5600935	2		=			
ANR	5601020	Identifier	mmx		5600935	0					
ANR	5601021	PrimaryExpression	256		5600935	1					
ANR	5601022	IdentifierDeclStatement	"int number , rel , offset , size , type_bits , ret ;"	261:1:6340:6385	5600935	3	True				
ANR	5601023	IdentifierDecl	number		5600935	0					
ANR	5601024	IdentifierDeclType	int		5600935	0					
ANR	5601025	Identifier	number		5600935	1					
ANR	5601026	IdentifierDecl	rel		5600935	1					
ANR	5601027	IdentifierDeclType	int		5600935	0					
ANR	5601028	Identifier	rel		5600935	1					
ANR	5601029	IdentifierDecl	offset		5600935	2					
ANR	5601030	IdentifierDeclType	int		5600935	0					
ANR	5601031	Identifier	offset		5600935	1					
ANR	5601032	IdentifierDecl	size		5600935	3					
ANR	5601033	IdentifierDeclType	int		5600935	0					
ANR	5601034	Identifier	size		5600935	1					
ANR	5601035	IdentifierDecl	type_bits		5600935	4					
ANR	5601036	IdentifierDeclType	int		5600935	0					
ANR	5601037	Identifier	type_bits		5600935	1					
ANR	5601038	IdentifierDecl	ret		5600935	5					
ANR	5601039	IdentifierDeclType	int		5600935	0					
ANR	5601040	Identifier	ret		5600935	1					
ANR	5601041	WhileStatement	while ( isspace ( ( ut8 ) * ptr ) )		5600935	4					
ANR	5601042	Condition	isspace ( ( ut8 ) * ptr )	266:8:6517:6535	5600935	0	True				
ANR	5601043	CallExpression	isspace ( ( ut8 ) * ptr )		5600935	0					
ANR	5601044	Callee	isspace		5600935	0					
ANR	5601045	Identifier	isspace		5600935	0					
ANR	5601046	ArgumentList	( ut8 ) * ptr		5600935	1					
ANR	5601047	Argument	( ut8 ) * ptr		5600935	0					
ANR	5601048	CastExpression	( ut8 ) * ptr		5600935	0					
ANR	5601049	CastTarget	ut8		5600935	0					
ANR	5601050	UnaryOperationExpression	* ptr		5600935	1					
ANR	5601051	UnaryOperator	*		5600935	0					
ANR	5601052	Identifier	ptr		5600935	1					
ANR	5601053	CompoundStatement		11:29:396:396	5600935	1					
ANR	5601054	ExpressionStatement	ptr ++	267:2:6542:6547	5600935	0	True				
ANR	5601055	PostIncDecOperationExpression	ptr ++		5600935	0					
ANR	5601056	Identifier	ptr		5600935	0					
ANR	5601057	IncDec	++		5600935	1					
ANR	5601058	IfStatement	"if ( r_str_startswith ( ptr , ""Name"" ) )"		5600935	5					
ANR	5601059	Condition	"r_str_startswith ( ptr , ""Name"" )"	270:5:6622:6651	5600935	0	True				
ANR	5601060	CallExpression	"r_str_startswith ( ptr , ""Name"" )"		5600935	0					
ANR	5601061	Callee	r_str_startswith		5600935	0					
ANR	5601062	Identifier	r_str_startswith		5600935	0					
ANR	5601063	ArgumentList	ptr		5600935	1					
ANR	5601064	Argument	ptr		5600935	0					
ANR	5601065	Identifier	ptr		5600935	0					
ANR	5601066	Argument	"""Name"""		5600935	1					
ANR	5601067	PrimaryExpression	"""Name"""		5600935	0					
ANR	5601068	CompoundStatement		15:37:512:512	5600935	1					
ANR	5601069	IfStatement	"if ( ! ( ptr = strchr ( ptr , '\\n' ) ) )"		5600935	0					
ANR	5601070	Condition	"! ( ptr = strchr ( ptr , '\\n' ) )"	271:6:6662:6688	5600935	0	True				
ANR	5601071	UnaryOperationExpression	"! ( ptr = strchr ( ptr , '\\n' ) )"		5600935	0					
ANR	5601072	UnaryOperator	!		5600935	0					
ANR	5601073	AssignmentExpression	"ptr = strchr ( ptr , '\\n' )"		5600935	1		=			
ANR	5601074	Identifier	ptr		5600935	0					
ANR	5601075	CallExpression	"strchr ( ptr , '\\n' )"		5600935	1					
ANR	5601076	Callee	strchr		5600935	0					
ANR	5601077	Identifier	strchr		5600935	0					
ANR	5601078	ArgumentList	ptr		5600935	1					
ANR	5601079	Argument	ptr		5600935	0					
ANR	5601080	Identifier	ptr		5600935	0					
ANR	5601081	Argument	'\\n'		5600935	1					
ANR	5601082	PrimaryExpression	'\\n'		5600935	0					
ANR	5601083	CompoundStatement		16:35:549:549	5600935	1					
ANR	5601084	ReturnStatement	return false ;	272:3:6696:6708	5600935	0	True				
ANR	5601085	Identifier	false		5600935	0					
ANR	5601086	ExpressionStatement	ptr ++	274:2:6716:6721	5600935	1	True				
ANR	5601087	PostIncDecOperationExpression	ptr ++		5600935	0					
ANR	5601088	Identifier	ptr		5600935	0					
ANR	5601089	IncDec	++		5600935	1					
ANR	5601090	ForStatement	for ( ; ; )		5600935	6					
ANR	5601091	CompoundStatement		21:10:594:594	5600935	0					
ANR	5601092	WhileStatement	while ( isspace ( ( ut8 ) * ptr ) )		5600935	0					
ANR	5601093	Condition	isspace ( ( ut8 ) * ptr )	278:9:6805:6823	5600935	0	True				
ANR	5601094	CallExpression	isspace ( ( ut8 ) * ptr )		5600935	0					
ANR	5601095	Callee	isspace		5600935	0					
ANR	5601096	Identifier	isspace		5600935	0					
ANR	5601097	ArgumentList	( ut8 ) * ptr		5600935	1					
ANR	5601098	Argument	( ut8 ) * ptr		5600935	0					
ANR	5601099	CastExpression	( ut8 ) * ptr		5600935	0					
ANR	5601100	CastTarget	ut8		5600935	0					
ANR	5601101	UnaryOperationExpression	* ptr		5600935	1					
ANR	5601102	UnaryOperator	*		5600935	0					
ANR	5601103	Identifier	ptr		5600935	1					
ANR	5601104	CompoundStatement		23:30:684:684	5600935	1					
ANR	5601105	ExpressionStatement	ptr ++	279:3:6831:6836	5600935	0	True				
ANR	5601106	PostIncDecOperationExpression	ptr ++		5600935	0					
ANR	5601107	Identifier	ptr		5600935	0					
ANR	5601108	IncDec	++		5600935	1					
ANR	5601109	IfStatement	if ( ! * ptr )		5600935	1					
ANR	5601110	Condition	! * ptr	281:6:6848:6852	5600935	0	True				
ANR	5601111	UnaryOperationExpression	! * ptr		5600935	0					
ANR	5601112	UnaryOperator	!		5600935	0					
ANR	5601113	UnaryOperationExpression	* ptr		5600935	1					
ANR	5601114	UnaryOperator	*		5600935	0					
ANR	5601115	Identifier	ptr		5600935	1					
ANR	5601116	CompoundStatement		26:13:713:713	5600935	1					
ANR	5601117	BreakStatement	break ;	282:3:6860:6865	5600935	0	True				
ANR	5601118	IfStatement	"if ( ( ptr1 = strchr ( ptr , '\\n' ) ) )"		5600935	2					
ANR	5601119	Condition	"ptr1 = strchr ( ptr , '\\n' )"	284:6:6877:6903	5600935	0	True				
ANR	5601120	AssignmentExpression	"ptr1 = strchr ( ptr , '\\n' )"		5600935	0		=			
ANR	5601121	Identifier	ptr1		5600935	0					
ANR	5601122	CallExpression	"strchr ( ptr , '\\n' )"		5600935	1					
ANR	5601123	Callee	strchr		5600935	0					
ANR	5601124	Identifier	strchr		5600935	0					
ANR	5601125	ArgumentList	ptr		5600935	1					
ANR	5601126	Argument	ptr		5600935	0					
ANR	5601127	Identifier	ptr		5600935	0					
ANR	5601128	Argument	'\\n'		5600935	1					
ANR	5601129	PrimaryExpression	'\\n'		5600935	0					
ANR	5601130	CompoundStatement		29:35:764:764	5600935	1					
ANR	5601131	ExpressionStatement	* ptr1 = '\\0'	285:3:6911:6923	5600935	0	True				
ANR	5601132	AssignmentExpression	* ptr1 = '\\0'		5600935	0		=			
ANR	5601133	UnaryOperationExpression	* ptr1		5600935	0					
ANR	5601134	UnaryOperator	*		5600935	0					
ANR	5601135	Identifier	ptr1		5600935	1					
ANR	5601136	PrimaryExpression	'\\0'		5600935	1					
ANR	5601137	ExpressionStatement	"ret = sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"	287:2:6931:7028	5600935	3	True				
ANR	5601138	AssignmentExpression	"ret = sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"		5600935	0		=			
ANR	5601139	Identifier	ret		5600935	0					
ANR	5601140	CallExpression	"sscanf ( ptr , "" %s %d %d %d %d %s %s"" , name , & number , & rel , & offset , & size , type , groups )"		5600935	1					
ANR	5601141	Callee	sscanf		5600935	0					
ANR	5601142	Identifier	sscanf		5600935	0					
ANR	5601143	ArgumentList	ptr		5600935	1					
ANR	5601144	Argument	ptr		5600935	0					
ANR	5601145	Identifier	ptr		5600935	0					
ANR	5601146	Argument	""" %s %d %d %d %d %s %s"""		5600935	1					
ANR	5601147	PrimaryExpression	""" %s %d %d %d %d %s %s"""		5600935	0					
ANR	5601148	Argument	name		5600935	2					
ANR	5601149	Identifier	name		5600935	0					
ANR	5601150	Argument	& number		5600935	3					
ANR	5601151	UnaryOperationExpression	& number		5600935	0					
ANR	5601152	UnaryOperator	&		5600935	0					
ANR	5601153	Identifier	number		5600935	1					
ANR	5601154	Argument	& rel		5600935	4					
ANR	5601155	UnaryOperationExpression	& rel		5600935	0					
ANR	5601156	UnaryOperator	&		5600935	0					
ANR	5601157	Identifier	rel		5600935	1					
ANR	5601158	Argument	& offset		5600935	5					
ANR	5601159	UnaryOperationExpression	& offset		5600935	0					
ANR	5601160	UnaryOperator	&		5600935	0					
ANR	5601161	Identifier	offset		5600935	1					
ANR	5601162	Argument	& size		5600935	6					
ANR	5601163	UnaryOperationExpression	& size		5600935	0					
ANR	5601164	UnaryOperator	&		5600935	0					
ANR	5601165	Identifier	size		5600935	1					
ANR	5601166	Argument	type		5600935	7					
ANR	5601167	Identifier	type		5600935	0					
ANR	5601168	Argument	groups		5600935	8					
ANR	5601169	Identifier	groups		5600935	0					
ANR	5601170	IfStatement	if ( ret < 6 )		5600935	4					
ANR	5601171	Condition	ret < 6	290:6:7072:7078	5600935	0	True				
ANR	5601172	RelationalExpression	ret < 6		5600935	0		<			
ANR	5601173	Identifier	ret		5600935	0					
ANR	5601174	PrimaryExpression	6		5600935	1					
ANR	5601175	CompoundStatement		35:15:939:939	5600935	1					
ANR	5601176	ExpressionStatement	"eprintf ( ""Could not parse line: %s\\n"" , ptr )"	291:3:7086:7129	5600935	0	True				
ANR	5601177	CallExpression	"eprintf ( ""Could not parse line: %s\\n"" , ptr )"		5600935	0					
ANR	5601178	Callee	eprintf		5600935	0					
ANR	5601179	Identifier	eprintf		5600935	0					
ANR	5601180	ArgumentList	"""Could not parse line: %s\\n"""		5600935	1					
ANR	5601181	Argument	"""Could not parse line: %s\\n"""		5600935	0					
ANR	5601182	PrimaryExpression	"""Could not parse line: %s\\n"""		5600935	0					
ANR	5601183	Argument	ptr		5600935	1					
ANR	5601184	Identifier	ptr		5600935	0					
ANR	5601185	IfStatement	if ( ! ptr1 )		5600935	1					
ANR	5601186	Condition	! ptr1	292:7:7138:7142	5600935	0	True				
ANR	5601187	UnaryOperationExpression	! ptr1		5600935	0					
ANR	5601188	UnaryOperator	!		5600935	0					
ANR	5601189	Identifier	ptr1		5600935	1					
ANR	5601190	CompoundStatement		37:14:1003:1003	5600935	1					
ANR	5601191	ReturnStatement	return true ;	293:4:7151:7162	5600935	0	True				
ANR	5601192	Identifier	true		5600935	0					
ANR	5601193	ExpressionStatement	ptr = ptr1 + 1	295:3:7172:7186	5600935	2	True				
ANR	5601194	AssignmentExpression	ptr = ptr1 + 1		5600935	0		=			
ANR	5601195	Identifier	ptr		5600935	0					
ANR	5601196	AdditiveExpression	ptr1 + 1		5600935	1		+			
ANR	5601197	Identifier	ptr1		5600935	0					
ANR	5601198	PrimaryExpression	1		5600935	1					
ANR	5601199	ContinueStatement	continue ;	296:3:7191:7199	5600935	3	True				
ANR	5601200	IfStatement	"if ( r_str_startswith ( name , ""''"" ) )"		5600935	5					
ANR	5601201	Condition	"r_str_startswith ( name , ""''"" )"	299:6:7241:7269	5600935	0	True				
ANR	5601202	CallExpression	"r_str_startswith ( name , ""''"" )"		5600935	0					
ANR	5601203	Callee	r_str_startswith		5600935	0					
ANR	5601204	Identifier	r_str_startswith		5600935	0					
ANR	5601205	ArgumentList	name		5600935	1					
ANR	5601206	Argument	name		5600935	0					
ANR	5601207	Identifier	name		5600935	0					
ANR	5601208	Argument	"""''"""		5600935	1					
ANR	5601209	PrimaryExpression	"""''"""		5600935	0					
ANR	5601210	CompoundStatement		44:37:1130:1130	5600935	1					
ANR	5601211	IfStatement	if ( ! ptr1 )		5600935	0					
ANR	5601212	Condition	! ptr1	300:7:7281:7285	5600935	0	True				
ANR	5601213	UnaryOperationExpression	! ptr1		5600935	0					
ANR	5601214	UnaryOperator	!		5600935	0					
ANR	5601215	Identifier	ptr1		5600935	1					
ANR	5601216	CompoundStatement		45:14:1146:1146	5600935	1					
ANR	5601217	ReturnStatement	return true ;	301:4:7294:7305	5600935	0	True				
ANR	5601218	Identifier	true		5600935	0					
ANR	5601219	ExpressionStatement	ptr = ptr1 + 1	303:3:7315:7329	5600935	1	True				
ANR	5601220	AssignmentExpression	ptr = ptr1 + 1		5600935	0		=			
ANR	5601221	Identifier	ptr		5600935	0					
ANR	5601222	AdditiveExpression	ptr1 + 1		5600935	1		+			
ANR	5601223	Identifier	ptr1		5600935	0					
ANR	5601224	PrimaryExpression	1		5600935	1					
ANR	5601225	ContinueStatement	continue ;	304:3:7334:7342	5600935	2	True				
ANR	5601226	IfStatement	if ( size == 0 )		5600935	6					
ANR	5601227	Condition	size == 0	307:6:7378:7386	5600935	0	True				
ANR	5601228	EqualityExpression	size == 0		5600935	0		==			
ANR	5601229	Identifier	size		5600935	0					
ANR	5601230	PrimaryExpression	0		5600935	1					
ANR	5601231	CompoundStatement		52:17:1247:1247	5600935	1					
ANR	5601232	IfStatement	if ( ! ptr1 )		5600935	0					
ANR	5601233	Condition	! ptr1	308:7:7398:7402	5600935	0	True				
ANR	5601234	UnaryOperationExpression	! ptr1		5600935	0					
ANR	5601235	UnaryOperator	!		5600935	0					
ANR	5601236	Identifier	ptr1		5600935	1					
ANR	5601237	CompoundStatement		53:14:1263:1263	5600935	1					
ANR	5601238	ReturnStatement	return true ;	309:4:7411:7422	5600935	0	True				
ANR	5601239	Identifier	true		5600935	0					
ANR	5601240	ExpressionStatement	ptr = ptr1 + 1	311:3:7432:7446	5600935	1	True				
ANR	5601241	AssignmentExpression	ptr = ptr1 + 1		5600935	0		=			
ANR	5601242	Identifier	ptr		5600935	0					
ANR	5601243	AdditiveExpression	ptr1 + 1		5600935	1		+			
ANR	5601244	Identifier	ptr1		5600935	0					
ANR	5601245	PrimaryExpression	1		5600935	1					
ANR	5601246	ContinueStatement	continue ;	312:3:7451:7459	5600935	2	True				
ANR	5601247	ExpressionStatement	gptr = groups	315:2:7484:7497	5600935	7	True				
ANR	5601248	AssignmentExpression	gptr = groups		5600935	0		=			
ANR	5601249	Identifier	gptr		5600935	0					
ANR	5601250	Identifier	groups		5600935	1					
ANR	5601251	ExpressionStatement	type_bits = 0	316:2:7501:7514	5600935	8	True				
ANR	5601252	AssignmentExpression	type_bits = 0		5600935	0		=			
ANR	5601253	Identifier	type_bits		5600935	0					
ANR	5601254	PrimaryExpression	0		5600935	1					
ANR	5601255	WhileStatement	while ( 1 )		5600935	9					
ANR	5601256	Condition	1	317:9:7525:7525	5600935	0	True				
ANR	5601257	PrimaryExpression	1		5600935	0					
ANR	5601258	CompoundStatement		62:12:1386:1386	5600935	1					
ANR	5601259	IfStatement	"if ( ( gptr1 = strchr ( gptr , ',' ) ) )"		5600935	0					
ANR	5601260	Condition	"gptr1 = strchr ( gptr , ',' )"	318:7:7537:7564	5600935	0	True				
ANR	5601261	AssignmentExpression	"gptr1 = strchr ( gptr , ',' )"		5600935	0		=			
ANR	5601262	Identifier	gptr1		5600935	0					
ANR	5601263	CallExpression	"strchr ( gptr , ',' )"		5600935	1					
ANR	5601264	Callee	strchr		5600935	0					
ANR	5601265	Identifier	strchr		5600935	0					
ANR	5601266	ArgumentList	gptr		5600935	1					
ANR	5601267	Argument	gptr		5600935	0					
ANR	5601268	Identifier	gptr		5600935	0					
ANR	5601269	Argument	"','"		5600935	1					
ANR	5601270	PrimaryExpression	"','"		5600935	0					
ANR	5601271	CompoundStatement		63:37:1425:1425	5600935	1					
ANR	5601272	ExpressionStatement	* gptr1 = '\\0'	319:4:7573:7586	5600935	0	True				
ANR	5601273	AssignmentExpression	* gptr1 = '\\0'		5600935	0		=			
ANR	5601274	UnaryOperationExpression	* gptr1		5600935	0					
ANR	5601275	UnaryOperator	*		5600935	0					
ANR	5601276	Identifier	gptr1		5600935	1					
ANR	5601277	PrimaryExpression	'\\0'		5600935	1					
ANR	5601278	IfStatement	"if ( r_str_startswith ( gptr , ""general"" ) )"		5600935	1					
ANR	5601279	Condition	"r_str_startswith ( gptr , ""general"" )"	321:7:7600:7633	5600935	0	True				
ANR	5601280	CallExpression	"r_str_startswith ( gptr , ""general"" )"		5600935	0					
ANR	5601281	Callee	r_str_startswith		5600935	0					
ANR	5601282	Identifier	r_str_startswith		5600935	0					
ANR	5601283	ArgumentList	gptr		5600935	1					
ANR	5601284	Argument	gptr		5600935	0					
ANR	5601285	Identifier	gptr		5600935	0					
ANR	5601286	Argument	"""general"""		5600935	1					
ANR	5601287	PrimaryExpression	"""general"""		5600935	0					
ANR	5601288	CompoundStatement		66:43:1494:1494	5600935	1					
ANR	5601289	ExpressionStatement	type_bits |= gpr	322:4:7642:7658	5600935	0	True				
ANR	5601290	AssignmentExpression	type_bits |= gpr		5600935	0		|=			
ANR	5601291	Identifier	type_bits		5600935	0					
ANR	5601292	Identifier	gpr		5600935	1					
ANR	5601293	ElseStatement	else		5600935	0					
ANR	5601294	IfStatement	"if ( r_str_startswith ( gptr , ""all"" ) )"		5600935	0					
ANR	5601295	Condition	"r_str_startswith ( gptr , ""all"" )"	323:14:7674:7703	5600935	0	True				
ANR	5601296	CallExpression	"r_str_startswith ( gptr , ""all"" )"		5600935	0					
ANR	5601297	Callee	r_str_startswith		5600935	0					
ANR	5601298	Identifier	r_str_startswith		5600935	0					
ANR	5601299	ArgumentList	gptr		5600935	1					
ANR	5601300	Argument	gptr		5600935	0					
ANR	5601301	Identifier	gptr		5600935	0					
ANR	5601302	Argument	"""all"""		5600935	1					
ANR	5601303	PrimaryExpression	"""all"""		5600935	0					
ANR	5601304	CompoundStatement		68:46:1564:1564	5600935	1					
ANR	5601305	ExpressionStatement	type_bits |= all	324:4:7712:7728	5600935	0	True				
ANR	5601306	AssignmentExpression	type_bits |= all		5600935	0		|=			
ANR	5601307	Identifier	type_bits		5600935	0					
ANR	5601308	Identifier	all		5600935	1					
ANR	5601309	ElseStatement	else		5600935	0					
ANR	5601310	IfStatement	"if ( r_str_startswith ( gptr , ""save"" ) )"		5600935	0					
ANR	5601311	Condition	"r_str_startswith ( gptr , ""save"" )"	325:14:7744:7774	5600935	0	True				
ANR	5601312	CallExpression	"r_str_startswith ( gptr , ""save"" )"		5600935	0					
ANR	5601313	Callee	r_str_startswith		5600935	0					
ANR	5601314	Identifier	r_str_startswith		5600935	0					
ANR	5601315	ArgumentList	gptr		5600935	1					
ANR	5601316	Argument	gptr		5600935	0					
ANR	5601317	Identifier	gptr		5600935	0					
ANR	5601318	Argument	"""save"""		5600935	1					
ANR	5601319	PrimaryExpression	"""save"""		5600935	0					
ANR	5601320	CompoundStatement		70:47:1635:1635	5600935	1					
ANR	5601321	ExpressionStatement	type_bits |= save	326:4:7783:7800	5600935	0	True				
ANR	5601322	AssignmentExpression	type_bits |= save		5600935	0		|=			
ANR	5601323	Identifier	type_bits		5600935	0					
ANR	5601324	Identifier	save		5600935	1					
ANR	5601325	ElseStatement	else		5600935	0					
ANR	5601326	IfStatement	"if ( r_str_startswith ( gptr , ""restore"" ) )"		5600935	0					
ANR	5601327	Condition	"r_str_startswith ( gptr , ""restore"" )"	327:14:7816:7849	5600935	0	True				
ANR	5601328	CallExpression	"r_str_startswith ( gptr , ""restore"" )"		5600935	0					
ANR	5601329	Callee	r_str_startswith		5600935	0					
ANR	5601330	Identifier	r_str_startswith		5600935	0					
ANR	5601331	ArgumentList	gptr		5600935	1					
ANR	5601332	Argument	gptr		5600935	0					
ANR	5601333	Identifier	gptr		5600935	0					
ANR	5601334	Argument	"""restore"""		5600935	1					
ANR	5601335	PrimaryExpression	"""restore"""		5600935	0					
ANR	5601336	CompoundStatement		72:50:1710:1710	5600935	1					
ANR	5601337	ExpressionStatement	type_bits |= restore	328:4:7858:7878	5600935	0	True				
ANR	5601338	AssignmentExpression	type_bits |= restore		5600935	0		|=			
ANR	5601339	Identifier	type_bits		5600935	0					
ANR	5601340	Identifier	restore		5600935	1					
ANR	5601341	ElseStatement	else		5600935	0					
ANR	5601342	IfStatement	"if ( r_str_startswith ( gptr , ""float"" ) )"		5600935	0					
ANR	5601343	Condition	"r_str_startswith ( gptr , ""float"" )"	329:14:7894:7925	5600935	0	True				
ANR	5601344	CallExpression	"r_str_startswith ( gptr , ""float"" )"		5600935	0					
ANR	5601345	Callee	r_str_startswith		5600935	0					
ANR	5601346	Identifier	r_str_startswith		5600935	0					
ANR	5601347	ArgumentList	gptr		5600935	1					
ANR	5601348	Argument	gptr		5600935	0					
ANR	5601349	Identifier	gptr		5600935	0					
ANR	5601350	Argument	"""float"""		5600935	1					
ANR	5601351	PrimaryExpression	"""float"""		5600935	0					
ANR	5601352	CompoundStatement		74:48:1786:1786	5600935	1					
ANR	5601353	ExpressionStatement	type_bits |= float_	330:4:7934:7953	5600935	0	True				
ANR	5601354	AssignmentExpression	type_bits |= float_		5600935	0		|=			
ANR	5601355	Identifier	type_bits		5600935	0					
ANR	5601356	Identifier	float_		5600935	1					
ANR	5601357	ElseStatement	else		5600935	0					
ANR	5601358	IfStatement	"if ( r_str_startswith ( gptr , ""sse"" ) )"		5600935	0					
ANR	5601359	Condition	"r_str_startswith ( gptr , ""sse"" )"	331:14:7969:7998	5600935	0	True				
ANR	5601360	CallExpression	"r_str_startswith ( gptr , ""sse"" )"		5600935	0					
ANR	5601361	Callee	r_str_startswith		5600935	0					
ANR	5601362	Identifier	r_str_startswith		5600935	0					
ANR	5601363	ArgumentList	gptr		5600935	1					
ANR	5601364	Argument	gptr		5600935	0					
ANR	5601365	Identifier	gptr		5600935	0					
ANR	5601366	Argument	"""sse"""		5600935	1					
ANR	5601367	PrimaryExpression	"""sse"""		5600935	0					
ANR	5601368	CompoundStatement		76:46:1859:1859	5600935	1					
ANR	5601369	ExpressionStatement	type_bits |= sse	332:4:8007:8023	5600935	0	True				
ANR	5601370	AssignmentExpression	type_bits |= sse		5600935	0		|=			
ANR	5601371	Identifier	type_bits		5600935	0					
ANR	5601372	Identifier	sse		5600935	1					
ANR	5601373	ElseStatement	else		5600935	0					
ANR	5601374	IfStatement	"if ( r_str_startswith ( gptr , ""mmx"" ) )"		5600935	0					
ANR	5601375	Condition	"r_str_startswith ( gptr , ""mmx"" )"	333:14:8039:8068	5600935	0	True				
ANR	5601376	CallExpression	"r_str_startswith ( gptr , ""mmx"" )"		5600935	0					
ANR	5601377	Callee	r_str_startswith		5600935	0					
ANR	5601378	Identifier	r_str_startswith		5600935	0					
ANR	5601379	ArgumentList	gptr		5600935	1					
ANR	5601380	Argument	gptr		5600935	0					
ANR	5601381	Identifier	gptr		5600935	0					
ANR	5601382	Argument	"""mmx"""		5600935	1					
ANR	5601383	PrimaryExpression	"""mmx"""		5600935	0					
ANR	5601384	CompoundStatement		78:46:1929:1929	5600935	1					
ANR	5601385	ExpressionStatement	type_bits |= mmx	334:4:8077:8093	5600935	0	True				
ANR	5601386	AssignmentExpression	type_bits |= mmx		5600935	0		|=			
ANR	5601387	Identifier	type_bits		5600935	0					
ANR	5601388	Identifier	mmx		5600935	1					
ANR	5601389	ElseStatement	else		5600935	0					
ANR	5601390	IfStatement	"if ( r_str_startswith ( gptr , ""vector"" ) )"		5600935	0					
ANR	5601391	Condition	"r_str_startswith ( gptr , ""vector"" )"	335:14:8109:8141	5600935	0	True				
ANR	5601392	CallExpression	"r_str_startswith ( gptr , ""vector"" )"		5600935	0					
ANR	5601393	Callee	r_str_startswith		5600935	0					
ANR	5601394	Identifier	r_str_startswith		5600935	0					
ANR	5601395	ArgumentList	gptr		5600935	1					
ANR	5601396	Argument	gptr		5600935	0					
ANR	5601397	Identifier	gptr		5600935	0					
ANR	5601398	Argument	"""vector"""		5600935	1					
ANR	5601399	PrimaryExpression	"""vector"""		5600935	0					
ANR	5601400	CompoundStatement		80:49:2002:2002	5600935	1					
ANR	5601401	ExpressionStatement	type_bits |= vector	336:4:8150:8169	5600935	0	True				
ANR	5601402	AssignmentExpression	type_bits |= vector		5600935	0		|=			
ANR	5601403	Identifier	type_bits		5600935	0					
ANR	5601404	Identifier	vector		5600935	1					
ANR	5601405	ElseStatement	else		5600935	0					
ANR	5601406	IfStatement	"if ( r_str_startswith ( gptr , ""system"" ) )"		5600935	0					
ANR	5601407	Condition	"r_str_startswith ( gptr , ""system"" )"	337:14:8185:8217	5600935	0	True				
ANR	5601408	CallExpression	"r_str_startswith ( gptr , ""system"" )"		5600935	0					
ANR	5601409	Callee	r_str_startswith		5600935	0					
ANR	5601410	Identifier	r_str_startswith		5600935	0					
ANR	5601411	ArgumentList	gptr		5600935	1					
ANR	5601412	Argument	gptr		5600935	0					
ANR	5601413	Identifier	gptr		5600935	0					
ANR	5601414	Argument	"""system"""		5600935	1					
ANR	5601415	PrimaryExpression	"""system"""		5600935	0					
ANR	5601416	CompoundStatement		82:49:2078:2078	5600935	1					
ANR	5601417	ExpressionStatement	type_bits |= system	338:4:8226:8245	5600935	0	True				
ANR	5601418	AssignmentExpression	type_bits |= system		5600935	0		|=			
ANR	5601419	Identifier	type_bits		5600935	0					
ANR	5601420	Identifier	system		5600935	1					
ANR	5601421	IfStatement	if ( ! gptr1 )		5600935	2					
ANR	5601422	Condition	! gptr1	340:7:8259:8264	5600935	0	True				
ANR	5601423	UnaryOperationExpression	! gptr1		5600935	0					
ANR	5601424	UnaryOperator	!		5600935	0					
ANR	5601425	Identifier	gptr1		5600935	1					
ANR	5601426	CompoundStatement		85:15:2125:2125	5600935	1					
ANR	5601427	BreakStatement	break ;	341:4:8273:8278	5600935	0	True				
ANR	5601428	ExpressionStatement	gptr = gptr1 + 1	343:3:8288:8304	5600935	3	True				
ANR	5601429	AssignmentExpression	gptr = gptr1 + 1		5600935	0		=			
ANR	5601430	Identifier	gptr		5600935	0					
ANR	5601431	AdditiveExpression	gptr1 + 1		5600935	1		+			
ANR	5601432	Identifier	gptr1		5600935	0					
ANR	5601433	PrimaryExpression	1		5600935	1					
ANR	5601434	IfStatement	if ( ! * type )		5600935	10					
ANR	5601435	Condition	! * type	346:6:8350:8355	5600935	0	True				
ANR	5601436	UnaryOperationExpression	! * type		5600935	0					
ANR	5601437	UnaryOperator	!		5600935	0					
ANR	5601438	UnaryOperationExpression	* type		5600935	1					
ANR	5601439	UnaryOperator	*		5600935	0					
ANR	5601440	Identifier	type		5600935	1					
ANR	5601441	CompoundStatement		91:14:2216:2216	5600935	1					
ANR	5601442	IfStatement	if ( ! ptr1 )		5600935	0					
ANR	5601443	Condition	! ptr1	347:7:8367:8371	5600935	0	True				
ANR	5601444	UnaryOperationExpression	! ptr1		5600935	0					
ANR	5601445	UnaryOperator	!		5600935	0					
ANR	5601446	Identifier	ptr1		5600935	1					
ANR	5601447	CompoundStatement		92:14:2232:2232	5600935	1					
ANR	5601448	ReturnStatement	return true ;	348:4:8380:8391	5600935	0	True				
ANR	5601449	Identifier	true		5600935	0					
ANR	5601450	ExpressionStatement	ptr = ptr1 + 1	350:3:8401:8415	5600935	1	True				
ANR	5601451	AssignmentExpression	ptr = ptr1 + 1		5600935	0		=			
ANR	5601452	Identifier	ptr		5600935	0					
ANR	5601453	AdditiveExpression	ptr1 + 1		5600935	1		+			
ANR	5601454	Identifier	ptr1		5600935	0					
ANR	5601455	PrimaryExpression	1		5600935	1					
ANR	5601456	ContinueStatement	continue ;	351:3:8420:8428	5600935	2	True				
ANR	5601457	IfStatement	if ( ! ( type_bits & sse ) && ! ( type_bits & float_ ) )		5600935	11					
ANR	5601458	Condition	! ( type_bits & sse ) && ! ( type_bits & float_ )	354:6:8523:8565	5600935	0	True				
ANR	5601459	AndExpression	! ( type_bits & sse ) && ! ( type_bits & float_ )		5600935	0		&&			
ANR	5601460	UnaryOperationExpression	! ( type_bits & sse )		5600935	0					
ANR	5601461	UnaryOperator	!		5600935	0					
ANR	5601462	BitAndExpression	type_bits & sse		5600935	1		&			
ANR	5601463	Identifier	type_bits		5600935	0					
ANR	5601464	Identifier	sse		5600935	1					
ANR	5601465	UnaryOperationExpression	! ( type_bits & float_ )		5600935	1					
ANR	5601466	UnaryOperator	!		5600935	0					
ANR	5601467	BitAndExpression	type_bits & float_		5600935	1		&			
ANR	5601468	Identifier	type_bits		5600935	0					
ANR	5601469	Identifier	float_		5600935	1					
ANR	5601470	CompoundStatement		99:51:2426:2426	5600935	1					
ANR	5601471	ExpressionStatement	type_bits |= gpr	355:3:8573:8589	5600935	0	True				
ANR	5601472	AssignmentExpression	type_bits |= gpr		5600935	0		|=			
ANR	5601473	Identifier	type_bits		5600935	0					
ANR	5601474	Identifier	gpr		5600935	1					
ANR	5601475	ExpressionStatement	"eprintf ( ""%s\\t%s\\t.%d\\t%d\\t0\\n"" , ( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"" , name , size * 8 , offset )"	358:2:8613:8816	5600935	12	True				
ANR	5601476	CallExpression	"eprintf ( ""%s\\t%s\\t.%d\\t%d\\t0\\n"" , ( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"" , name , size * 8 , offset )"		5600935	0					
ANR	5601477	Callee	eprintf		5600935	0					
ANR	5601478	Identifier	eprintf		5600935	0					
ANR	5601479	ArgumentList	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5600935	1					
ANR	5601480	Argument	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5600935	0					
ANR	5601481	PrimaryExpression	"""%s\\t%s\\t.%d\\t%d\\t0\\n"""		5600935	0					
ANR	5601482	Argument	"( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"""		5600935	1					
ANR	5601483	ConditionalExpression	"( ( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse ) ) ? ""fpu"" : ""gpr"""		5600935	0					
ANR	5601484	Condition	( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse )		5600935	0					
ANR	5601485	OrExpression	( type_bits & mmx ) || ( type_bits & float_ ) || ( type_bits & sse )		5600935	0		||			
ANR	5601486	BitAndExpression	type_bits & mmx		5600935	0		&			
ANR	5601487	Identifier	type_bits		5600935	0					
ANR	5601488	Identifier	mmx		5600935	1					
ANR	5601489	OrExpression	( type_bits & float_ ) || ( type_bits & sse )		5600935	1		||			
ANR	5601490	BitAndExpression	type_bits & float_		5600935	0		&			
ANR	5601491	Identifier	type_bits		5600935	0					
ANR	5601492	Identifier	float_		5600935	1					
ANR	5601493	BitAndExpression	type_bits & sse		5600935	1		&			
ANR	5601494	Identifier	type_bits		5600935	0					
ANR	5601495	Identifier	sse		5600935	1					
ANR	5601496	PrimaryExpression	"""fpu"""		5600935	1					
ANR	5601497	PrimaryExpression	"""gpr"""		5600935	2					
ANR	5601498	Argument	name		5600935	2					
ANR	5601499	Identifier	name		5600935	0					
ANR	5601500	Argument	size * 8		5600935	3					
ANR	5601501	MultiplicativeExpression	size * 8		5600935	0		*			
ANR	5601502	Identifier	size		5600935	0					
ANR	5601503	PrimaryExpression	8		5600935	1					
ANR	5601504	Argument	offset		5600935	4					
ANR	5601505	Identifier	offset		5600935	0					
ANR	5601506	IfStatement	if ( ! ptr1 )		5600935	13					
ANR	5601507	Condition	! ptr1	363:6:8845:8849	5600935	0	True				
ANR	5601508	UnaryOperationExpression	! ptr1		5600935	0					
ANR	5601509	UnaryOperator	!		5600935	0					
ANR	5601510	Identifier	ptr1		5600935	1					
ANR	5601511	CompoundStatement		108:13:2710:2710	5600935	1					
ANR	5601512	ReturnStatement	return true ;	364:3:8857:8868	5600935	0	True				
ANR	5601513	Identifier	true		5600935	0					
ANR	5601514	ExpressionStatement	ptr = ptr1 + 1	366:2:8876:8890	5600935	14	True				
ANR	5601515	AssignmentExpression	ptr = ptr1 + 1		5600935	0		=			
ANR	5601516	Identifier	ptr		5600935	0					
ANR	5601517	AdditiveExpression	ptr1 + 1		5600935	1		+			
ANR	5601518	Identifier	ptr1		5600935	0					
ANR	5601519	PrimaryExpression	1		5600935	1					
ANR	5601520	ContinueStatement	continue ;	367:2:8894:8902	5600935	15	True				
ANR	5601521	ReturnStatement	return true ;	369:1:8908:8919	5600935	7	True				
ANR	5601522	Identifier	true		5600935	0					
ANR	5601523	ReturnType	static bool		5600935	1					
ANR	5601524	Identifier	gdb_to_r2_profile		5600935	2					
ANR	5601525	ParameterList	char * gdb		5600935	3					
ANR	5601526	Parameter	char * gdb	256:30:6130:6138	5600935	0	True				
ANR	5601527	ParameterType	char *		5600935	0					
ANR	5601528	Identifier	gdb		5600935	1					
ANR	5601529	CFGEntryNode	ENTRY		5600935		True				
ANR	5601530	CFGExitNode	EXIT		5600935		True				
ANR	5601531	InfiniteForNode	true		5600935		True				
ANR	5601532	Symbol	sse		5600935						
ANR	5601533	Symbol	type_bits		5600935						
ANR	5601534	Symbol	save		5600935						
ANR	5601535	Symbol	strchr		5600935						
ANR	5601536	Symbol	gptr1		5600935						
ANR	5601537	Symbol	type		5600935						
ANR	5601538	Symbol	& number		5600935						
ANR	5601539	Symbol	number		5600935						
ANR	5601540	Symbol	* type		5600935						
ANR	5601541	Symbol	gptr		5600935						
ANR	5601542	Symbol	rel		5600935						
ANR	5601543	Symbol	* ptr		5600935						
ANR	5601544	Symbol	mmx		5600935						
ANR	5601545	Symbol	vector		5600935						
ANR	5601546	Symbol	* ptr1		5600935						
ANR	5601547	Symbol	all		5600935						
ANR	5601548	Symbol	ret		5600935						
ANR	5601549	Symbol	r_str_startswith		5600935						
ANR	5601550	Symbol	gdb		5600935						
ANR	5601551	Symbol	restore		5600935						
ANR	5601552	Symbol	offset		5600935						
ANR	5601553	Symbol	& offset		5600935						
ANR	5601554	Symbol	gpr		5600935						
ANR	5601555	Symbol	isspace		5600935						
ANR	5601556	Symbol	false		5600935						
ANR	5601557	Symbol	groups		5600935						
ANR	5601558	Symbol	& size		5600935						
ANR	5601559	Symbol	ptr		5600935						
ANR	5601560	Symbol	system		5600935						
ANR	5601561	Symbol	size		5600935						
ANR	5601562	Symbol	* gptr1		5600935						
ANR	5601563	Symbol	sscanf		5600935						
ANR	5601564	Symbol	ptr1		5600935						
ANR	5601565	Symbol	float_		5600935						
ANR	5601566	Symbol	name		5600935						
ANR	5601567	Symbol	& rel		5600935						
ANR	5601568	Symbol	true		5600935						
ANR	5601569	Function	r_reg_parse_gdb_profile	372:0:8924:9407							
ANR	5601570	FunctionDef	r_reg_parse_gdb_profile (const char * profile_file)		5601569	0					
ANR	5601571	CompoundStatement		372:61:8985:9407	5601569	0					
ANR	5601572	IdentifierDeclStatement	"char * base , * str = NULL ;"	373:1:8988:9011	5601569	0	True				
ANR	5601573	IdentifierDecl	* base		5601569	0					
ANR	5601574	IdentifierDeclType	char *		5601569	0					
ANR	5601575	Identifier	base		5601569	1					
ANR	5601576	IdentifierDecl	* str = NULL		5601569	1					
ANR	5601577	IdentifierDeclType	char *		5601569	0					
ANR	5601578	Identifier	str		5601569	1					
ANR	5601579	AssignmentExpression	* str = NULL		5601569	2		=			
ANR	5601580	Identifier	NULL		5601569	0					
ANR	5601581	Identifier	NULL		5601569	1					
ANR	5601582	IfStatement	"if ( ! ( str = r_file_slurp ( profile_file , NULL ) ) )"		5601569	1					
ANR	5601583	Condition	"! ( str = r_file_slurp ( profile_file , NULL ) )"	374:5:9018:9059	5601569	0	True				
ANR	5601584	UnaryOperationExpression	"! ( str = r_file_slurp ( profile_file , NULL ) )"		5601569	0					
ANR	5601585	UnaryOperator	!		5601569	0					
ANR	5601586	AssignmentExpression	"str = r_file_slurp ( profile_file , NULL )"		5601569	1		=			
ANR	5601587	Identifier	str		5601569	0					
ANR	5601588	CallExpression	"r_file_slurp ( profile_file , NULL )"		5601569	1					
ANR	5601589	Callee	r_file_slurp		5601569	0					
ANR	5601590	Identifier	r_file_slurp		5601569	0					
ANR	5601591	ArgumentList	profile_file		5601569	1					
ANR	5601592	Argument	profile_file		5601569	0					
ANR	5601593	Identifier	profile_file		5601569	0					
ANR	5601594	Argument	NULL		5601569	1					
ANR	5601595	Identifier	NULL		5601569	0					
ANR	5601596	CompoundStatement		3:49:76:76	5601569	1					
ANR	5601597	IfStatement	if ( ( base = r_sys_getenv ( R_LIB_ENV ) ) )		5601569	0					
ANR	5601598	Condition	base = r_sys_getenv ( R_LIB_ENV )	375:6:9070:9102	5601569	0	True				
ANR	5601599	AssignmentExpression	base = r_sys_getenv ( R_LIB_ENV )		5601569	0		=			
ANR	5601600	Identifier	base		5601569	0					
ANR	5601601	CallExpression	r_sys_getenv ( R_LIB_ENV )		5601569	1					
ANR	5601602	Callee	r_sys_getenv		5601569	0					
ANR	5601603	Identifier	r_sys_getenv		5601569	0					
ANR	5601604	ArgumentList	R_LIB_ENV		5601569	1					
ANR	5601605	Argument	R_LIB_ENV		5601569	0					
ANR	5601606	Identifier	R_LIB_ENV		5601569	0					
ANR	5601607	CompoundStatement		5:3:124:170	5601569	1					
ANR	5601608	IdentifierDeclStatement	"char * file = r_str_append ( base , profile_file ) ;"	376:3:9110:9156	5601569	0	True				
ANR	5601609	IdentifierDecl	"* file = r_str_append ( base , profile_file )"		5601569	0					
ANR	5601610	IdentifierDeclType	char *		5601569	0					
ANR	5601611	Identifier	file		5601569	1					
ANR	5601612	AssignmentExpression	"* file = r_str_append ( base , profile_file )"		5601569	2		=			
ANR	5601613	Identifier	file		5601569	0					
ANR	5601614	CallExpression	"r_str_append ( base , profile_file )"		5601569	1					
ANR	5601615	Callee	r_str_append		5601569	0					
ANR	5601616	Identifier	r_str_append		5601569	0					
ANR	5601617	ArgumentList	base		5601569	1					
ANR	5601618	Argument	base		5601569	0					
ANR	5601619	Identifier	base		5601569	0					
ANR	5601620	Argument	profile_file		5601569	1					
ANR	5601621	Identifier	profile_file		5601569	0					
ANR	5601622	IfStatement	if ( file )		5601569	1					
ANR	5601623	Condition	file	377:7:9165:9168	5601569	0	True				
ANR	5601624	Identifier	file		5601569	0					
ANR	5601625	CompoundStatement		6:13:185:185	5601569	1					
ANR	5601626	ExpressionStatement	"str = r_file_slurp ( file , NULL )"	378:4:9177:9208	5601569	0	True				
ANR	5601627	AssignmentExpression	"str = r_file_slurp ( file , NULL )"		5601569	0		=			
ANR	5601628	Identifier	str		5601569	0					
ANR	5601629	CallExpression	"r_file_slurp ( file , NULL )"		5601569	1					
ANR	5601630	Callee	r_file_slurp		5601569	0					
ANR	5601631	Identifier	r_file_slurp		5601569	0					
ANR	5601632	ArgumentList	file		5601569	1					
ANR	5601633	Argument	file		5601569	0					
ANR	5601634	Identifier	file		5601569	0					
ANR	5601635	Argument	NULL		5601569	1					
ANR	5601636	Identifier	NULL		5601569	0					
ANR	5601637	ExpressionStatement	free ( file )	379:4:9214:9225	5601569	1	True				
ANR	5601638	CallExpression	free ( file )		5601569	0					
ANR	5601639	Callee	free		5601569	0					
ANR	5601640	Identifier	free		5601569	0					
ANR	5601641	ArgumentList	file		5601569	1					
ANR	5601642	Argument	file		5601569	0					
ANR	5601643	Identifier	file		5601569	0					
ANR	5601644	IfStatement	if ( ! str )		5601569	2					
ANR	5601645	Condition	! str	383:5:9244:9247	5601569	0	True				
ANR	5601646	UnaryOperationExpression	! str		5601569	0					
ANR	5601647	UnaryOperator	!		5601569	0					
ANR	5601648	Identifier	str		5601569	1					
ANR	5601649	CompoundStatement		12:11:264:264	5601569	1					
ANR	5601650	ExpressionStatement	"eprintf ( ""r_reg_parse_gdb_profile: Cannot find '%s'\\n"" , profile_file )"	384:2:9254:9323	5601569	0	True				
ANR	5601651	CallExpression	"eprintf ( ""r_reg_parse_gdb_profile: Cannot find '%s'\\n"" , profile_file )"		5601569	0					
ANR	5601652	Callee	eprintf		5601569	0					
ANR	5601653	Identifier	eprintf		5601569	0					
ANR	5601654	ArgumentList	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5601569	1					
ANR	5601655	Argument	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5601569	0					
ANR	5601656	PrimaryExpression	"""r_reg_parse_gdb_profile: Cannot find '%s'\\n"""		5601569	0					
ANR	5601657	Argument	profile_file		5601569	1					
ANR	5601658	Identifier	profile_file		5601569	0					
ANR	5601659	ReturnStatement	return false ;	385:2:9327:9339	5601569	1	True				
ANR	5601660	Identifier	false		5601569	0					
ANR	5601661	IdentifierDeclStatement	bool ret = gdb_to_r2_profile ( str ) ;	387:1:9345:9379	5601569	3	True				
ANR	5601662	IdentifierDecl	ret = gdb_to_r2_profile ( str )		5601569	0					
ANR	5601663	IdentifierDeclType	bool		5601569	0					
ANR	5601664	Identifier	ret		5601569	1					
ANR	5601665	AssignmentExpression	ret = gdb_to_r2_profile ( str )		5601569	2		=			
ANR	5601666	Identifier	ret		5601569	0					
ANR	5601667	CallExpression	gdb_to_r2_profile ( str )		5601569	1					
ANR	5601668	Callee	gdb_to_r2_profile		5601569	0					
ANR	5601669	Identifier	gdb_to_r2_profile		5601569	0					
ANR	5601670	ArgumentList	str		5601569	1					
ANR	5601671	Argument	str		5601569	0					
ANR	5601672	Identifier	str		5601569	0					
ANR	5601673	ExpressionStatement	free ( str )	388:1:9382:9392	5601569	4	True				
ANR	5601674	CallExpression	free ( str )		5601569	0					
ANR	5601675	Callee	free		5601569	0					
ANR	5601676	Identifier	free		5601569	0					
ANR	5601677	ArgumentList	str		5601569	1					
ANR	5601678	Argument	str		5601569	0					
ANR	5601679	Identifier	str		5601569	0					
ANR	5601680	ReturnStatement	return ret ;	389:1:9395:9405	5601569	5	True				
ANR	5601681	Identifier	ret		5601569	0					
ANR	5601682	ReturnType	R_API bool		5601569	1					
ANR	5601683	Identifier	r_reg_parse_gdb_profile		5601569	2					
ANR	5601684	ParameterList	const char * profile_file		5601569	3					
ANR	5601685	Parameter	const char * profile_file	372:35:8959:8982	5601569	0	True				
ANR	5601686	ParameterType	const char *		5601569	0					
ANR	5601687	Identifier	profile_file		5601569	1					
ANR	5601688	CFGEntryNode	ENTRY		5601569		True				
ANR	5601689	CFGExitNode	EXIT		5601569		True				
ANR	5601690	Symbol	str		5601569						
ANR	5601691	Symbol	ret		5601569						
ANR	5601692	Symbol	r_str_append		5601569						
ANR	5601693	Symbol	r_file_slurp		5601569						
ANR	5601694	Symbol	R_LIB_ENV		5601569						
ANR	5601695	Symbol	NULL		5601569						
ANR	5601696	Symbol	file		5601569						
ANR	5601697	Symbol	r_sys_getenv		5601569						
ANR	5601698	Symbol	gdb_to_r2_profile		5601569						
ANR	5601699	Symbol	false		5601569						
ANR	5601700	Symbol	profile_file		5601569						
ANR	5601701	Symbol	base		5601569						
