command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5533167	File	data/converged/CVE-2019-16718~_radare2/parse.c								
ANR	5533168	DeclStmt									
ANR	5533169	Decl							include < config . h >	include < config . h > ( r_parse )	R_LIB_VERSION
ANR	5533170	DeclStmt									
ANR	5533171	Decl							RParsePlugin	RParsePlugin * [ ]	parse_static_plugins
ANR	5533172	Function	r_parse_new	14:0:255:720							
ANR	5533173	FunctionDef	r_parse_new ()		5533172	0					
ANR	5533174	CompoundStatement		14:32:287:720	5533172	0					
ANR	5533175	IdentifierDeclStatement	int i ;	15:1:290:295	5533172	0	True				
ANR	5533176	IdentifierDecl	i		5533172	0					
ANR	5533177	IdentifierDeclType	int		5533172	0					
ANR	5533178	Identifier	i		5533172	1					
ANR	5533179	IdentifierDeclStatement	RParse * p = R_NEW0 ( RParse ) ;	16:1:298:325	5533172	1	True				
ANR	5533180	IdentifierDecl	* p = R_NEW0 ( RParse )		5533172	0					
ANR	5533181	IdentifierDeclType	RParse *		5533172	0					
ANR	5533182	Identifier	p		5533172	1					
ANR	5533183	AssignmentExpression	* p = R_NEW0 ( RParse )		5533172	2		=			
ANR	5533184	Identifier	p		5533172	0					
ANR	5533185	CallExpression	R_NEW0 ( RParse )		5533172	1					
ANR	5533186	Callee	R_NEW0		5533172	0					
ANR	5533187	Identifier	R_NEW0		5533172	0					
ANR	5533188	ArgumentList	RParse		5533172	1					
ANR	5533189	Argument	RParse		5533172	0					
ANR	5533190	Identifier	RParse		5533172	0					
ANR	5533191	IfStatement	if ( ! p )		5533172	2					
ANR	5533192	Condition	! p	17:5:332:333	5533172	0	True				
ANR	5533193	UnaryOperationExpression	! p		5533172	0					
ANR	5533194	UnaryOperator	!		5533172	0					
ANR	5533195	Identifier	p		5533172	1					
ANR	5533196	CompoundStatement		4:9:48:48	5533172	1					
ANR	5533197	ReturnStatement	return NULL ;	18:2:340:351	5533172	0	True				
ANR	5533198	Identifier	NULL		5533172	0					
ANR	5533199	ExpressionStatement	p -> parsers = r_list_newf ( NULL )	20:1:357:388	5533172	3	True				
ANR	5533200	AssignmentExpression	p -> parsers = r_list_newf ( NULL )		5533172	0		=			
ANR	5533201	PtrMemberAccess	p -> parsers		5533172	0					
ANR	5533202	Identifier	p		5533172	0					
ANR	5533203	Identifier	parsers		5533172	1					
ANR	5533204	CallExpression	r_list_newf ( NULL )		5533172	1					
ANR	5533205	Callee	r_list_newf		5533172	0					
ANR	5533206	Identifier	r_list_newf		5533172	0					
ANR	5533207	ArgumentList	NULL		5533172	1					
ANR	5533208	Argument	NULL		5533172	0					
ANR	5533209	Identifier	NULL		5533172	0					
ANR	5533210	IfStatement	if ( ! p -> parsers )		5533172	4					
ANR	5533211	Condition	! p -> parsers	21:5:406:416	5533172	0	True				
ANR	5533212	UnaryOperationExpression	! p -> parsers		5533172	0					
ANR	5533213	UnaryOperator	!		5533172	0					
ANR	5533214	PtrMemberAccess	p -> parsers		5533172	1					
ANR	5533215	Identifier	p		5533172	0					
ANR	5533216	Identifier	parsers		5533172	1					
ANR	5533217	CompoundStatement		8:18:131:131	5533172	1					
ANR	5533218	ExpressionStatement	r_parse_free ( p )	22:2:423:439	5533172	0	True				
ANR	5533219	CallExpression	r_parse_free ( p )		5533172	0					
ANR	5533220	Callee	r_parse_free		5533172	0					
ANR	5533221	Identifier	r_parse_free		5533172	0					
ANR	5533222	ArgumentList	p		5533172	1					
ANR	5533223	Argument	p		5533172	0					
ANR	5533224	Identifier	p		5533172	0					
ANR	5533225	ReturnStatement	return NULL ;	23:2:443:454	5533172	1	True				
ANR	5533226	Identifier	NULL		5533172	0					
ANR	5533227	ExpressionStatement	p -> notin_flagspace = NULL	25:1:460:485	5533172	5	True				
ANR	5533228	AssignmentExpression	p -> notin_flagspace = NULL		5533172	0		=			
ANR	5533229	PtrMemberAccess	p -> notin_flagspace		5533172	0					
ANR	5533230	Identifier	p		5533172	0					
ANR	5533231	Identifier	notin_flagspace		5533172	1					
ANR	5533232	Identifier	NULL		5533172	1					
ANR	5533233	ExpressionStatement	p -> flagspace = NULL	26:1:488:507	5533172	6	True				
ANR	5533234	AssignmentExpression	p -> flagspace = NULL		5533172	0		=			
ANR	5533235	PtrMemberAccess	p -> flagspace		5533172	0					
ANR	5533236	Identifier	p		5533172	0					
ANR	5533237	Identifier	flagspace		5533172	1					
ANR	5533238	Identifier	NULL		5533172	1					
ANR	5533239	ExpressionStatement	p -> pseudo = false	27:1:510:527	5533172	7	True				
ANR	5533240	AssignmentExpression	p -> pseudo = false		5533172	0		=			
ANR	5533241	PtrMemberAccess	p -> pseudo		5533172	0					
ANR	5533242	Identifier	p		5533172	0					
ANR	5533243	Identifier	pseudo		5533172	1					
ANR	5533244	Identifier	false		5533172	1					
ANR	5533245	ExpressionStatement	p -> relsub = false	28:1:530:547	5533172	8	True				
ANR	5533246	AssignmentExpression	p -> relsub = false		5533172	0		=			
ANR	5533247	PtrMemberAccess	p -> relsub		5533172	0					
ANR	5533248	Identifier	p		5533172	0					
ANR	5533249	Identifier	relsub		5533172	1					
ANR	5533250	Identifier	false		5533172	1					
ANR	5533251	ExpressionStatement	p -> tailsub = false	29:1:550:568	5533172	9	True				
ANR	5533252	AssignmentExpression	p -> tailsub = false		5533172	0		=			
ANR	5533253	PtrMemberAccess	p -> tailsub		5533172	0					
ANR	5533254	Identifier	p		5533172	0					
ANR	5533255	Identifier	tailsub		5533172	1					
ANR	5533256	Identifier	false		5533172	1					
ANR	5533257	ExpressionStatement	p -> minval = 0x100	30:1:571:588	5533172	10	True				
ANR	5533258	AssignmentExpression	p -> minval = 0x100		5533172	0		=			
ANR	5533259	PtrMemberAccess	p -> minval		5533172	0					
ANR	5533260	Identifier	p		5533172	0					
ANR	5533261	Identifier	minval		5533172	1					
ANR	5533262	PrimaryExpression	0x100		5533172	1					
ANR	5533263	ExpressionStatement	p -> localvar_only = false	31:1:591:615	5533172	11	True				
ANR	5533264	AssignmentExpression	p -> localvar_only = false		5533172	0		=			
ANR	5533265	PtrMemberAccess	p -> localvar_only		5533172	0					
ANR	5533266	Identifier	p		5533172	0					
ANR	5533267	Identifier	localvar_only		5533172	1					
ANR	5533268	Identifier	false		5533172	1					
ANR	5533269	ForStatement	for ( i = 0 ; parse_static_plugins [ i ] ; i ++ )		5533172	12					
ANR	5533270	ForInit	i = 0 ;	32:6:623:628	5533172	0	True				
ANR	5533271	AssignmentExpression	i = 0		5533172	0		=			
ANR	5533272	Identifier	i		5533172	0					
ANR	5533273	PrimaryExpression	0		5533172	1					
ANR	5533274	Condition	parse_static_plugins [ i ]	32:13:630:652	5533172	1	True				
ANR	5533275	ArrayIndexing	parse_static_plugins [ i ]		5533172	0					
ANR	5533276	Identifier	parse_static_plugins		5533172	0					
ANR	5533277	Identifier	i		5533172	1					
ANR	5533278	PostIncDecOperationExpression	i ++	32:38:655:657	5533172	2	True				
ANR	5533279	Identifier	i		5533172	0					
ANR	5533280	IncDec	++		5533172	1					
ANR	5533281	CompoundStatement		19:43:372:372	5533172	3					
ANR	5533282	ExpressionStatement	"r_parse_add ( p , parse_static_plugins [ i ] )"	33:2:664:704	5533172	0	True				
ANR	5533283	CallExpression	"r_parse_add ( p , parse_static_plugins [ i ] )"		5533172	0					
ANR	5533284	Callee	r_parse_add		5533172	0					
ANR	5533285	Identifier	r_parse_add		5533172	0					
ANR	5533286	ArgumentList	p		5533172	1					
ANR	5533287	Argument	p		5533172	0					
ANR	5533288	Identifier	p		5533172	0					
ANR	5533289	Argument	parse_static_plugins [ i ]		5533172	1					
ANR	5533290	ArrayIndexing	parse_static_plugins [ i ]		5533172	0					
ANR	5533291	Identifier	parse_static_plugins		5533172	0					
ANR	5533292	Identifier	i		5533172	1					
ANR	5533293	ReturnStatement	return p ;	35:1:710:718	5533172	13	True				
ANR	5533294	Identifier	p		5533172	0					
ANR	5533295	ReturnType	R_API RParse *		5533172	1					
ANR	5533296	Identifier	r_parse_new		5533172	2					
ANR	5533297	ParameterList			5533172	3					
ANR	5533298	CFGEntryNode	ENTRY		5533172		True				
ANR	5533299	CFGExitNode	EXIT		5533172		True				
ANR	5533300	Symbol	p -> minval		5533172						
ANR	5533301	Symbol	RParse		5533172						
ANR	5533302	Symbol	NULL		5533172						
ANR	5533303	Symbol	parse_static_plugins		5533172						
ANR	5533304	Symbol	r_list_newf		5533172						
ANR	5533305	Symbol	false		5533172						
ANR	5533306	Symbol	i		5533172						
ANR	5533307	Symbol	p -> notin_flagspace		5533172						
ANR	5533308	Symbol	p -> pseudo		5533172						
ANR	5533309	Symbol	p -> localvar_only		5533172						
ANR	5533310	Symbol	p		5533172						
ANR	5533311	Symbol	R_NEW0		5533172						
ANR	5533312	Symbol	p -> tailsub		5533172						
ANR	5533313	Symbol	* i		5533172						
ANR	5533314	Symbol	p -> relsub		5533172						
ANR	5533315	Symbol	p -> parsers		5533172						
ANR	5533316	Symbol	* parse_static_plugins		5533172						
ANR	5533317	Symbol	* p		5533172						
ANR	5533318	Symbol	p -> flagspace		5533172						
ANR	5533319	Function	r_parse_free	38:0:723:798							
ANR	5533320	FunctionDef	r_parse_free (RParse * p)		5533319	0					
ANR	5533321	CompoundStatement		38:35:758:798	5533319	0					
ANR	5533322	ExpressionStatement	r_list_free ( p -> parsers )	39:1:761:785	5533319	0	True				
ANR	5533323	CallExpression	r_list_free ( p -> parsers )		5533319	0					
ANR	5533324	Callee	r_list_free		5533319	0					
ANR	5533325	Identifier	r_list_free		5533319	0					
ANR	5533326	ArgumentList	p -> parsers		5533319	1					
ANR	5533327	Argument	p -> parsers		5533319	0					
ANR	5533328	PtrMemberAccess	p -> parsers		5533319	0					
ANR	5533329	Identifier	p		5533319	0					
ANR	5533330	Identifier	parsers		5533319	1					
ANR	5533331	ExpressionStatement	free ( p )	40:1:788:796	5533319	1	True				
ANR	5533332	CallExpression	free ( p )		5533319	0					
ANR	5533333	Callee	free		5533319	0					
ANR	5533334	Identifier	free		5533319	0					
ANR	5533335	ArgumentList	p		5533319	1					
ANR	5533336	Argument	p		5533319	0					
ANR	5533337	Identifier	p		5533319	0					
ANR	5533338	ReturnType	R_API void		5533319	1					
ANR	5533339	Identifier	r_parse_free		5533319	2					
ANR	5533340	ParameterList	RParse * p		5533319	3					
ANR	5533341	Parameter	RParse * p	38:24:747:755	5533319	0	True				
ANR	5533342	ParameterType	RParse *		5533319	0					
ANR	5533343	Identifier	p		5533319	1					
ANR	5533344	CFGEntryNode	ENTRY		5533319		True				
ANR	5533345	CFGExitNode	EXIT		5533319		True				
ANR	5533346	Symbol	p		5533319						
ANR	5533347	Symbol	p -> parsers		5533319						
ANR	5533348	Symbol	* p		5533319						
ANR	5533349	Function	r_parse_add	43:0:801:1003							
ANR	5533350	FunctionDef	"r_parse_add (RParse * p , RParsePlugin * foo)"		5533349	0					
ANR	5533351	CompoundStatement		43:53:854:1003	5533349	0					
ANR	5533352	IdentifierDeclStatement	bool itsFine = true ;	44:1:857:876	5533349	0	True				
ANR	5533353	IdentifierDecl	itsFine = true		5533349	0					
ANR	5533354	IdentifierDeclType	bool		5533349	0					
ANR	5533355	Identifier	itsFine		5533349	1					
ANR	5533356	AssignmentExpression	itsFine = true		5533349	2		=			
ANR	5533357	Identifier	true		5533349	0					
ANR	5533358	Identifier	true		5533349	1					
ANR	5533359	IfStatement	if ( foo -> init )		5533349	1					
ANR	5533360	Condition	foo -> init	45:5:883:891	5533349	0	True				
ANR	5533361	PtrMemberAccess	foo -> init		5533349	0					
ANR	5533362	Identifier	foo		5533349	0					
ANR	5533363	Identifier	init		5533349	1					
ANR	5533364	CompoundStatement		3:16:39:39	5533349	1					
ANR	5533365	ExpressionStatement	"itsFine = foo -> init ( p , p -> user )"	46:2:898:930	5533349	0	True				
ANR	5533366	AssignmentExpression	"itsFine = foo -> init ( p , p -> user )"		5533349	0		=			
ANR	5533367	Identifier	itsFine		5533349	0					
ANR	5533368	CallExpression	"foo -> init ( p , p -> user )"		5533349	1					
ANR	5533369	Callee	foo -> init		5533349	0					
ANR	5533370	PtrMemberAccess	foo -> init		5533349	0					
ANR	5533371	Identifier	foo		5533349	0					
ANR	5533372	Identifier	init		5533349	1					
ANR	5533373	ArgumentList	p		5533349	1					
ANR	5533374	Argument	p		5533349	0					
ANR	5533375	Identifier	p		5533349	0					
ANR	5533376	Argument	p -> user		5533349	1					
ANR	5533377	PtrMemberAccess	p -> user		5533349	0					
ANR	5533378	Identifier	p		5533349	0					
ANR	5533379	Identifier	user		5533349	1					
ANR	5533380	IfStatement	if ( itsFine )		5533349	2					
ANR	5533381	Condition	itsFine	48:5:940:946	5533349	0	True				
ANR	5533382	Identifier	itsFine		5533349	0					
ANR	5533383	CompoundStatement		6:14:94:94	5533349	1					
ANR	5533384	ExpressionStatement	"r_list_append ( p -> parsers , foo )"	49:2:953:984	5533349	0	True				
ANR	5533385	CallExpression	"r_list_append ( p -> parsers , foo )"		5533349	0					
ANR	5533386	Callee	r_list_append		5533349	0					
ANR	5533387	Identifier	r_list_append		5533349	0					
ANR	5533388	ArgumentList	p -> parsers		5533349	1					
ANR	5533389	Argument	p -> parsers		5533349	0					
ANR	5533390	PtrMemberAccess	p -> parsers		5533349	0					
ANR	5533391	Identifier	p		5533349	0					
ANR	5533392	Identifier	parsers		5533349	1					
ANR	5533393	Argument	foo		5533349	1					
ANR	5533394	Identifier	foo		5533349	0					
ANR	5533395	ReturnStatement	return true ;	51:1:990:1001	5533349	3	True				
ANR	5533396	Identifier	true		5533349	0					
ANR	5533397	ReturnType	R_API bool		5533349	1					
ANR	5533398	Identifier	r_parse_add		5533349	2					
ANR	5533399	ParameterList	"RParse * p , RParsePlugin * foo"		5533349	3					
ANR	5533400	Parameter	RParse * p	43:23:824:832	5533349	0	True				
ANR	5533401	ParameterType	RParse *		5533349	0					
ANR	5533402	Identifier	p		5533349	1					
ANR	5533403	Parameter	RParsePlugin * foo	43:34:835:851	5533349	1	True				
ANR	5533404	ParameterType	RParsePlugin *		5533349	0					
ANR	5533405	Identifier	foo		5533349	1					
ANR	5533406	CFGEntryNode	ENTRY		5533349		True				
ANR	5533407	CFGExitNode	EXIT		5533349		True				
ANR	5533408	Symbol	p		5533349						
ANR	5533409	Symbol	itsFine		5533349						
ANR	5533410	Symbol	foo		5533349						
ANR	5533411	Symbol	foo -> init		5533349						
ANR	5533412	Symbol	true		5533349						
ANR	5533413	Symbol	p -> parsers		5533349						
ANR	5533414	Symbol	* p		5533349						
ANR	5533415	Symbol	p -> user		5533349						
ANR	5533416	Symbol	* foo		5533349						
ANR	5533417	Function	r_parse_use	54:0:1006:1264							
ANR	5533418	FunctionDef	"r_parse_use (RParse * p , const char * name)"		5533417	0					
ANR	5533419	CompoundStatement		54:52:1058:1264	5533417	0					
ANR	5533420	IdentifierDeclStatement	RListIter * iter ;	55:1:1061:1076	5533417	0	True				
ANR	5533421	IdentifierDecl	* iter		5533417	0					
ANR	5533422	IdentifierDeclType	RListIter *		5533417	0					
ANR	5533423	Identifier	iter		5533417	1					
ANR	5533424	IdentifierDeclStatement	RParsePlugin * h ;	56:1:1079:1094	5533417	1	True				
ANR	5533425	IdentifierDecl	* h		5533417	0					
ANR	5533426	IdentifierDeclType	RParsePlugin *		5533417	0					
ANR	5533427	Identifier	h		5533417	1					
ANR	5533428	ExpressionStatement	"r_return_val_if_fail ( p && name , false )"	57:1:1097:1136	5533417	2	True				
ANR	5533429	CallExpression	"r_return_val_if_fail ( p && name , false )"		5533417	0					
ANR	5533430	Callee	r_return_val_if_fail		5533417	0					
ANR	5533431	Identifier	r_return_val_if_fail		5533417	0					
ANR	5533432	ArgumentList	p && name		5533417	1					
ANR	5533433	Argument	p && name		5533417	0					
ANR	5533434	AndExpression	p && name		5533417	0		&&			
ANR	5533435	Identifier	p		5533417	0					
ANR	5533436	Identifier	name		5533417	1					
ANR	5533437	Argument	false		5533417	1					
ANR	5533438	Identifier	false		5533417	0					
ANR	5533439	Statement	r_list_foreach	58:1:1139:1152	5533417	3	True				
ANR	5533440	Statement	(	58:16:1154:1154	5533417	4	True				
ANR	5533441	Statement	p	58:17:1155:1155	5533417	5	True				
ANR	5533442	Statement	->	58:18:1156:1157	5533417	6	True				
ANR	5533443	Statement	parsers	58:20:1158:1164	5533417	7	True				
ANR	5533444	Statement	","	58:27:1165:1165	5533417	8	True				
ANR	5533445	Statement	iter	58:29:1167:1170	5533417	9	True				
ANR	5533446	Statement	","	58:33:1171:1171	5533417	10	True				
ANR	5533447	Statement	h	58:35:1173:1173	5533417	11	True				
ANR	5533448	Statement	)	58:36:1174:1174	5533417	12	True				
ANR	5533449	CompoundStatement		5:38:117:117	5533417	13					
ANR	5533450	IfStatement	"if ( ! strcmp ( h -> name , name ) )"		5533417	0					
ANR	5533451	Condition	"! strcmp ( h -> name , name )"	59:6:1184:1206	5533417	0	True				
ANR	5533452	UnaryOperationExpression	"! strcmp ( h -> name , name )"		5533417	0					
ANR	5533453	UnaryOperator	!		5533417	0					
ANR	5533454	CallExpression	"strcmp ( h -> name , name )"		5533417	1					
ANR	5533455	Callee	strcmp		5533417	0					
ANR	5533456	Identifier	strcmp		5533417	0					
ANR	5533457	ArgumentList	h -> name		5533417	1					
ANR	5533458	Argument	h -> name		5533417	0					
ANR	5533459	PtrMemberAccess	h -> name		5533417	0					
ANR	5533460	Identifier	h		5533417	0					
ANR	5533461	Identifier	name		5533417	1					
ANR	5533462	Argument	name		5533417	1					
ANR	5533463	Identifier	name		5533417	0					
ANR	5533464	CompoundStatement		6:31:150:150	5533417	1					
ANR	5533465	ExpressionStatement	p -> cur = h	60:3:1214:1224	5533417	0	True				
ANR	5533466	AssignmentExpression	p -> cur = h		5533417	0		=			
ANR	5533467	PtrMemberAccess	p -> cur		5533417	0					
ANR	5533468	Identifier	p		5533417	0					
ANR	5533469	Identifier	cur		5533417	1					
ANR	5533470	Identifier	h		5533417	1					
ANR	5533471	ReturnStatement	return true ;	61:3:1229:1240	5533417	1	True				
ANR	5533472	Identifier	true		5533417	0					
ANR	5533473	ReturnStatement	return false ;	64:1:1250:1262	5533417	14	True				
ANR	5533474	Identifier	false		5533417	0					
ANR	5533475	ReturnType	R_API bool		5533417	1					
ANR	5533476	Identifier	r_parse_use		5533417	2					
ANR	5533477	ParameterList	"RParse * p , const char * name"		5533417	3					
ANR	5533478	Parameter	RParse * p	54:23:1029:1037	5533417	0	True				
ANR	5533479	ParameterType	RParse *		5533417	0					
ANR	5533480	Identifier	p		5533417	1					
ANR	5533481	Parameter	const char * name	54:34:1040:1055	5533417	1	True				
ANR	5533482	ParameterType	const char *		5533417	0					
ANR	5533483	Identifier	name		5533417	1					
ANR	5533484	CFGEntryNode	ENTRY		5533417		True				
ANR	5533485	CFGExitNode	EXIT		5533417		True				
ANR	5533486	Symbol	p		5533417						
ANR	5533487	Symbol	strcmp		5533417						
ANR	5533488	Symbol	* h		5533417						
ANR	5533489	Symbol	name		5533417						
ANR	5533490	Symbol	h		5533417						
ANR	5533491	Symbol	false		5533417						
ANR	5533492	Symbol	true		5533417						
ANR	5533493	Symbol	iter		5533417						
ANR	5533494	Symbol	* p		5533417						
ANR	5533495	Symbol	h -> name		5533417						
ANR	5533496	Symbol	p -> cur		5533417						
ANR	5533497	Function	r_parse_assemble	69:0:1466:1947							
ANR	5533498	FunctionDef	"r_parse_assemble (RParse * p , char * data , char * str)"		5533497	0					
ANR	5533499	CompoundStatement		69:62:1528:1947	5533497	0					
ANR	5533500	IdentifierDeclStatement	char * in = strdup ( str ) ;	70:1:1531:1554	5533497	0	True				
ANR	5533501	IdentifierDecl	* in = strdup ( str )		5533497	0					
ANR	5533502	IdentifierDeclType	char *		5533497	0					
ANR	5533503	Identifier	in		5533497	1					
ANR	5533504	AssignmentExpression	* in = strdup ( str )		5533497	2		=			
ANR	5533505	Identifier	in		5533497	0					
ANR	5533506	CallExpression	strdup ( str )		5533497	1					
ANR	5533507	Callee	strdup		5533497	0					
ANR	5533508	Identifier	strdup		5533497	0					
ANR	5533509	ArgumentList	str		5533497	1					
ANR	5533510	Argument	str		5533497	0					
ANR	5533511	Identifier	str		5533497	0					
ANR	5533512	IdentifierDeclStatement	bool ret = false ;	71:1:1557:1573	5533497	1	True				
ANR	5533513	IdentifierDecl	ret = false		5533497	0					
ANR	5533514	IdentifierDeclType	bool		5533497	0					
ANR	5533515	Identifier	ret		5533497	1					
ANR	5533516	AssignmentExpression	ret = false		5533497	2		=			
ANR	5533517	Identifier	false		5533497	0					
ANR	5533518	Identifier	false		5533497	1					
ANR	5533519	IdentifierDeclStatement	"char * s , * o ;"	72:1:1576:1587	5533497	2	True				
ANR	5533520	IdentifierDecl	* s		5533497	0					
ANR	5533521	IdentifierDeclType	char *		5533497	0					
ANR	5533522	Identifier	s		5533497	1					
ANR	5533523	IdentifierDecl	* o		5533497	1					
ANR	5533524	IdentifierDeclType	char *		5533497	0					
ANR	5533525	Identifier	o		5533497	1					
ANR	5533526	ExpressionStatement	data [ 0 ] = '\\0'	74:1:1591:1603	5533497	3	True				
ANR	5533527	AssignmentExpression	data [ 0 ] = '\\0'		5533497	0		=			
ANR	5533528	ArrayIndexing	data [ 0 ]		5533497	0					
ANR	5533529	Identifier	data		5533497	0					
ANR	5533530	PrimaryExpression	0		5533497	1					
ANR	5533531	PrimaryExpression	'\\0'		5533497	1					
ANR	5533532	IfStatement	if ( p -> cur && p -> cur -> assemble )		5533497	4					
ANR	5533533	Condition	p -> cur && p -> cur -> assemble	75:5:1610:1635	5533497	0	True				
ANR	5533534	AndExpression	p -> cur && p -> cur -> assemble		5533497	0		&&			
ANR	5533535	PtrMemberAccess	p -> cur		5533497	0					
ANR	5533536	Identifier	p		5533497	0					
ANR	5533537	Identifier	cur		5533497	1					
ANR	5533538	PtrMemberAccess	p -> cur -> assemble		5533497	1					
ANR	5533539	PtrMemberAccess	p -> cur		5533497	0					
ANR	5533540	Identifier	p		5533497	0					
ANR	5533541	Identifier	cur		5533497	1					
ANR	5533542	Identifier	assemble		5533497	1					
ANR	5533543	CompoundStatement		7:33:109:109	5533497	1					
ANR	5533544	ExpressionStatement	o = data + strlen ( data )	76:2:1642:1666	5533497	0	True				
ANR	5533545	AssignmentExpression	o = data + strlen ( data )		5533497	0		=			
ANR	5533546	Identifier	o		5533497	0					
ANR	5533547	AdditiveExpression	data + strlen ( data )		5533497	1		+			
ANR	5533548	Identifier	data		5533497	0					
ANR	5533549	CallExpression	strlen ( data )		5533497	1					
ANR	5533550	Callee	strlen		5533497	0					
ANR	5533551	Identifier	strlen		5533497	0					
ANR	5533552	ArgumentList	data		5533497	1					
ANR	5533553	Argument	data		5533497	0					
ANR	5533554	Identifier	data		5533497	0					
ANR	5533555	DoStatement	do		5533497	1					
ANR	5533556	CompoundStatement		9:5:144:144	5533497	0					
ANR	5533557	ExpressionStatement	"s = strchr ( str , ';' )"	78:3:1678:1699	5533497	0	True				
ANR	5533558	AssignmentExpression	"s = strchr ( str , ';' )"		5533497	0		=			
ANR	5533559	Identifier	s		5533497	0					
ANR	5533560	CallExpression	"strchr ( str , ';' )"		5533497	1					
ANR	5533561	Callee	strchr		5533497	0					
ANR	5533562	Identifier	strchr		5533497	0					
ANR	5533563	ArgumentList	str		5533497	1					
ANR	5533564	Argument	str		5533497	0					
ANR	5533565	Identifier	str		5533497	0					
ANR	5533566	Argument	';'		5533497	1					
ANR	5533567	PrimaryExpression	';'		5533497	0					
ANR	5533568	IfStatement	if ( s )		5533497	1					
ANR	5533569	Condition	s	79:7:1708:1708	5533497	0	True				
ANR	5533570	Identifier	s		5533497	0					
ANR	5533571	CompoundStatement		11:10:182:182	5533497	1					
ANR	5533572	ExpressionStatement	* s = '\\0'	80:4:1717:1726	5533497	0	True				
ANR	5533573	AssignmentExpression	* s = '\\0'		5533497	0		=			
ANR	5533574	UnaryOperationExpression	* s		5533497	0					
ANR	5533575	UnaryOperator	*		5533497	0					
ANR	5533576	Identifier	s		5533497	1					
ANR	5533577	PrimaryExpression	'\\0'		5533497	1					
ANR	5533578	ExpressionStatement	"ret = p -> cur -> assemble ( p , o , str )"	82:3:1736:1770	5533497	2	True				
ANR	5533579	AssignmentExpression	"ret = p -> cur -> assemble ( p , o , str )"		5533497	0		=			
ANR	5533580	Identifier	ret		5533497	0					
ANR	5533581	CallExpression	"p -> cur -> assemble ( p , o , str )"		5533497	1					
ANR	5533582	Callee	p -> cur -> assemble		5533497	0					
ANR	5533583	PtrMemberAccess	p -> cur -> assemble		5533497	0					
ANR	5533584	PtrMemberAccess	p -> cur		5533497	0					
ANR	5533585	Identifier	p		5533497	0					
ANR	5533586	Identifier	cur		5533497	1					
ANR	5533587	Identifier	assemble		5533497	1					
ANR	5533588	ArgumentList	p		5533497	1					
ANR	5533589	Argument	p		5533497	0					
ANR	5533590	Identifier	p		5533497	0					
ANR	5533591	Argument	o		5533497	1					
ANR	5533592	Identifier	o		5533497	0					
ANR	5533593	Argument	str		5533497	2					
ANR	5533594	Identifier	str		5533497	0					
ANR	5533595	IfStatement	if ( ! ret )		5533497	3					
ANR	5533596	Condition	! ret	83:7:1779:1782	5533497	0	True				
ANR	5533597	UnaryOperationExpression	! ret		5533497	0					
ANR	5533598	UnaryOperator	!		5533497	0					
ANR	5533599	Identifier	ret		5533497	1					
ANR	5533600	CompoundStatement		15:13:256:256	5533497	1					
ANR	5533601	BreakStatement	break ;	84:4:1791:1796	5533497	0	True				
ANR	5533602	IfStatement	if ( s )		5533497	4					
ANR	5533603	Condition	s	86:7:1810:1810	5533497	0	True				
ANR	5533604	Identifier	s		5533497	0					
ANR	5533605	CompoundStatement		18:10:284:284	5533497	1					
ANR	5533606	ExpressionStatement	str = s + 1	87:4:1819:1830	5533497	0	True				
ANR	5533607	AssignmentExpression	str = s + 1		5533497	0		=			
ANR	5533608	Identifier	str		5533497	0					
ANR	5533609	AdditiveExpression	s + 1		5533497	1		+			
ANR	5533610	Identifier	s		5533497	0					
ANR	5533611	PrimaryExpression	1		5533497	1					
ANR	5533612	ExpressionStatement	o += strlen ( data )	88:4:1836:1854	5533497	1	True				
ANR	5533613	AssignmentExpression	o += strlen ( data )		5533497	0		+=			
ANR	5533614	Identifier	o		5533497	0					
ANR	5533615	CallExpression	strlen ( data )		5533497	1					
ANR	5533616	Callee	strlen		5533497	0					
ANR	5533617	Identifier	strlen		5533497	0					
ANR	5533618	ArgumentList	data		5533497	1					
ANR	5533619	Argument	data		5533497	0					
ANR	5533620	Identifier	data		5533497	0					
ANR	5533621	ExpressionStatement	o [ 0 ] = '\\n'	89:4:1860:1871	5533497	2	True				
ANR	5533622	AssignmentExpression	o [ 0 ] = '\\n'		5533497	0		=			
ANR	5533623	ArrayIndexing	o [ 0 ]		5533497	0					
ANR	5533624	Identifier	o		5533497	0					
ANR	5533625	PrimaryExpression	0		5533497	1					
ANR	5533626	PrimaryExpression	'\\n'		5533497	1					
ANR	5533627	ExpressionStatement	o [ 1 ] = '\\0'	90:4:1877:1888	5533497	3	True				
ANR	5533628	AssignmentExpression	o [ 1 ] = '\\0'		5533497	0		=			
ANR	5533629	ArrayIndexing	o [ 1 ]		5533497	0					
ANR	5533630	Identifier	o		5533497	0					
ANR	5533631	PrimaryExpression	1		5533497	1					
ANR	5533632	PrimaryExpression	'\\0'		5533497	1					
ANR	5533633	ExpressionStatement	o ++	91:4:1894:1897	5533497	4	True				
ANR	5533634	PostIncDecOperationExpression	o ++		5533497	0					
ANR	5533635	Identifier	o		5533497	0					
ANR	5533636	IncDec	++		5533497	1					
ANR	5533637	Condition	s	93:11:1915:1915	5533497	1	True				
ANR	5533638	Identifier	s		5533497	0					
ANR	5533639	ExpressionStatement	free ( in )	95:1:1923:1932	5533497	5	True				
ANR	5533640	CallExpression	free ( in )		5533497	0					
ANR	5533641	Callee	free		5533497	0					
ANR	5533642	Identifier	free		5533497	0					
ANR	5533643	ArgumentList	in		5533497	1					
ANR	5533644	Argument	in		5533497	0					
ANR	5533645	Identifier	in		5533497	0					
ANR	5533646	ReturnStatement	return ret ;	96:1:1935:1945	5533497	6	True				
ANR	5533647	Identifier	ret		5533497	0					
ANR	5533648	ReturnType	R_API bool		5533497	1					
ANR	5533649	Identifier	r_parse_assemble		5533497	2					
ANR	5533650	ParameterList	"RParse * p , char * data , char * str"		5533497	3					
ANR	5533651	Parameter	RParse * p	69:28:1494:1502	5533497	0	True				
ANR	5533652	ParameterType	RParse *		5533497	0					
ANR	5533653	Identifier	p		5533497	1					
ANR	5533654	Parameter	char * data	69:39:1505:1514	5533497	1	True				
ANR	5533655	ParameterType	char *		5533497	0					
ANR	5533656	Identifier	data		5533497	1					
ANR	5533657	Parameter	char * str	69:51:1517:1525	5533497	2	True				
ANR	5533658	ParameterType	char *		5533497	0					
ANR	5533659	Identifier	str		5533497	1					
ANR	5533660	CFGEntryNode	ENTRY		5533497		True				
ANR	5533661	CFGExitNode	EXIT		5533497		True				
ANR	5533662	Symbol	ret		5533497						
ANR	5533663	Symbol	data		5533497						
ANR	5533664	Symbol	in		5533497						
ANR	5533665	Symbol	false		5533497						
ANR	5533666	Symbol	p -> cur -> assemble		5533497						
ANR	5533667	Symbol	strchr		5533497						
ANR	5533668	Symbol	o		5533497						
ANR	5533669	Symbol	p -> cur		5533497						
ANR	5533670	Symbol	p		5533497						
ANR	5533671	Symbol	str		5533497						
ANR	5533672	Symbol	strlen		5533497						
ANR	5533673	Symbol	s		5533497						
ANR	5533674	Symbol	* o		5533497						
ANR	5533675	Symbol	* p		5533497						
ANR	5533676	Symbol	strdup		5533497						
ANR	5533677	Symbol	* * p		5533497						
ANR	5533678	Symbol	* data		5533497						
ANR	5533679	Symbol	* s		5533497						
ANR	5533680	Symbol	* p -> cur		5533497						
ANR	5533681	Function	r_parse_parse	101:0:2053:2280							
ANR	5533682	FunctionDef	"r_parse_parse (RParse * p , const char * data , char * str)"		5533681	0					
ANR	5533683	CompoundStatement		101:65:2118:2280	5533681	0					
ANR	5533684	ExpressionStatement	"r_return_val_if_fail ( p && data && str , false )"	102:1:2121:2167	5533681	0	True				
ANR	5533685	CallExpression	"r_return_val_if_fail ( p && data && str , false )"		5533681	0					
ANR	5533686	Callee	r_return_val_if_fail		5533681	0					
ANR	5533687	Identifier	r_return_val_if_fail		5533681	0					
ANR	5533688	ArgumentList	p && data && str		5533681	1					
ANR	5533689	Argument	p && data && str		5533681	0					
ANR	5533690	AndExpression	p && data && str		5533681	0		&&			
ANR	5533691	Identifier	p		5533681	0					
ANR	5533692	AndExpression	data && str		5533681	1		&&			
ANR	5533693	Identifier	data		5533681	0					
ANR	5533694	Identifier	str		5533681	1					
ANR	5533695	Argument	false		5533681	1					
ANR	5533696	Identifier	false		5533681	0					
ANR	5533697	IfStatement	if ( p && data && * data && p -> cur && p -> cur -> parse )		5533681	1					
ANR	5533698	Condition	p && data && * data && p -> cur && p -> cur -> parse	103:5:2174:2218	5533681	0	True				
ANR	5533699	AndExpression	p && data && * data && p -> cur && p -> cur -> parse		5533681	0		&&			
ANR	5533700	Identifier	p		5533681	0					
ANR	5533701	AndExpression	data && * data && p -> cur && p -> cur -> parse		5533681	1		&&			
ANR	5533702	Identifier	data		5533681	0					
ANR	5533703	AndExpression	* data && p -> cur && p -> cur -> parse		5533681	1		&&			
ANR	5533704	UnaryOperationExpression	* data		5533681	0					
ANR	5533705	UnaryOperator	*		5533681	0					
ANR	5533706	Identifier	data		5533681	1					
ANR	5533707	AndExpression	p -> cur && p -> cur -> parse		5533681	1		&&			
ANR	5533708	PtrMemberAccess	p -> cur		5533681	0					
ANR	5533709	Identifier	p		5533681	0					
ANR	5533710	Identifier	cur		5533681	1					
ANR	5533711	PtrMemberAccess	p -> cur -> parse		5533681	1					
ANR	5533712	PtrMemberAccess	p -> cur		5533681	0					
ANR	5533713	Identifier	p		5533681	0					
ANR	5533714	Identifier	cur		5533681	1					
ANR	5533715	Identifier	parse		5533681	1					
ANR	5533716	CompoundStatement		3:52:102:102	5533681	1					
ANR	5533717	ReturnStatement	"return p -> cur -> parse ( p , data , str ) ;"	104:2:2225:2260	5533681	0	True				
ANR	5533718	CallExpression	"p -> cur -> parse ( p , data , str )"		5533681	0					
ANR	5533719	Callee	p -> cur -> parse		5533681	0					
ANR	5533720	PtrMemberAccess	p -> cur -> parse		5533681	0					
ANR	5533721	PtrMemberAccess	p -> cur		5533681	0					
ANR	5533722	Identifier	p		5533681	0					
ANR	5533723	Identifier	cur		5533681	1					
ANR	5533724	Identifier	parse		5533681	1					
ANR	5533725	ArgumentList	p		5533681	1					
ANR	5533726	Argument	p		5533681	0					
ANR	5533727	Identifier	p		5533681	0					
ANR	5533728	Argument	data		5533681	1					
ANR	5533729	Identifier	data		5533681	0					
ANR	5533730	Argument	str		5533681	2					
ANR	5533731	Identifier	str		5533681	0					
ANR	5533732	ReturnStatement	return false ;	106:1:2266:2278	5533681	2	True				
ANR	5533733	Identifier	false		5533681	0					
ANR	5533734	ReturnType	R_API bool		5533681	1					
ANR	5533735	Identifier	r_parse_parse		5533681	2					
ANR	5533736	ParameterList	"RParse * p , const char * data , char * str"		5533681	3					
ANR	5533737	Parameter	RParse * p	101:25:2078:2086	5533681	0	True				
ANR	5533738	ParameterType	RParse *		5533681	0					
ANR	5533739	Identifier	p		5533681	1					
ANR	5533740	Parameter	const char * data	101:36:2089:2104	5533681	1	True				
ANR	5533741	ParameterType	const char *		5533681	0					
ANR	5533742	Identifier	data		5533681	1					
ANR	5533743	Parameter	char * str	101:54:2107:2115	5533681	2	True				
ANR	5533744	ParameterType	char *		5533681	0					
ANR	5533745	Identifier	str		5533681	1					
ANR	5533746	CFGEntryNode	ENTRY		5533681		True				
ANR	5533747	CFGExitNode	EXIT		5533681		True				
ANR	5533748	Symbol	p		5533681						
ANR	5533749	Symbol	str		5533681						
ANR	5533750	Symbol	data		5533681						
ANR	5533751	Symbol	false		5533681						
ANR	5533752	Symbol	p -> cur -> parse		5533681						
ANR	5533753	Symbol	* p		5533681						
ANR	5533754	Symbol	* * p		5533681						
ANR	5533755	Symbol	* data		5533681						
ANR	5533756	Symbol	* p -> cur		5533681						
ANR	5533757	Symbol	p -> cur		5533681						
ANR	5533758	Function	r_parse_immtrim	110:0:2284:2934							
ANR	5533759	FunctionDef	r_parse_immtrim (char * opstr)		5533758	0					
ANR	5533760	CompoundStatement		110:41:2325:2934	5533758	0					
ANR	5533761	IfStatement	if ( ! opstr || ! * opstr )		5533758	0					
ANR	5533762	Condition	! opstr || ! * opstr	111:5:2332:2348	5533758	0	True				
ANR	5533763	OrExpression	! opstr || ! * opstr		5533758	0		||			
ANR	5533764	UnaryOperationExpression	! opstr		5533758	0					
ANR	5533765	UnaryOperator	!		5533758	0					
ANR	5533766	Identifier	opstr		5533758	1					
ANR	5533767	UnaryOperationExpression	! * opstr		5533758	1					
ANR	5533768	UnaryOperator	!		5533758	0					
ANR	5533769	UnaryOperationExpression	* opstr		5533758	1					
ANR	5533770	UnaryOperator	*		5533758	0					
ANR	5533771	Identifier	opstr		5533758	1					
ANR	5533772	CompoundStatement		2:24:25:25	5533758	1					
ANR	5533773	ReturnStatement	return NULL ;	112:2:2355:2366	5533758	0	True				
ANR	5533774	Identifier	NULL		5533758	0					
ANR	5533775	IdentifierDeclStatement	"char * n = strstr ( opstr , ""0x"" ) ;"	114:1:2372:2402	5533758	1	True				
ANR	5533776	IdentifierDecl	"* n = strstr ( opstr , ""0x"" )"		5533758	0					
ANR	5533777	IdentifierDeclType	char *		5533758	0					
ANR	5533778	Identifier	n		5533758	1					
ANR	5533779	AssignmentExpression	"* n = strstr ( opstr , ""0x"" )"		5533758	2		=			
ANR	5533780	Identifier	n		5533758	0					
ANR	5533781	CallExpression	"strstr ( opstr , ""0x"" )"		5533758	1					
ANR	5533782	Callee	strstr		5533758	0					
ANR	5533783	Identifier	strstr		5533758	0					
ANR	5533784	ArgumentList	opstr		5533758	1					
ANR	5533785	Argument	opstr		5533758	0					
ANR	5533786	Identifier	opstr		5533758	0					
ANR	5533787	Argument	"""0x"""		5533758	1					
ANR	5533788	PrimaryExpression	"""0x"""		5533758	0					
ANR	5533789	IfStatement	if ( n )		5533758	2					
ANR	5533790	Condition	n	115:5:2409:2409	5533758	0	True				
ANR	5533791	Identifier	n		5533758	0					
ANR	5533792	CompoundStatement		7:2:90:105	5533758	1					
ANR	5533793	IdentifierDeclStatement	char * p = n + 2 ;	116:2:2416:2431	5533758	0	True				
ANR	5533794	IdentifierDecl	* p = n + 2		5533758	0					
ANR	5533795	IdentifierDeclType	char *		5533758	0					
ANR	5533796	Identifier	p		5533758	1					
ANR	5533797	AssignmentExpression	* p = n + 2		5533758	2		=			
ANR	5533798	Identifier	p		5533758	0					
ANR	5533799	AdditiveExpression	n + 2		5533758	1		+			
ANR	5533800	Identifier	n		5533758	0					
ANR	5533801	PrimaryExpression	2		5533758	1					
ANR	5533802	WhileStatement	while ( IS_HEXCHAR ( * p ) )		5533758	1					
ANR	5533803	Condition	IS_HEXCHAR ( * p )	117:9:2442:2456	5533758	0	True				
ANR	5533804	CallExpression	IS_HEXCHAR ( * p )		5533758	0					
ANR	5533805	Callee	IS_HEXCHAR		5533758	0					
ANR	5533806	Identifier	IS_HEXCHAR		5533758	0					
ANR	5533807	ArgumentList	* p		5533758	1					
ANR	5533808	Argument	* p		5533758	0					
ANR	5533809	UnaryOperationExpression	* p		5533758	0					
ANR	5533810	UnaryOperator	*		5533758	0					
ANR	5533811	Identifier	p		5533758	1					
ANR	5533812	CompoundStatement		8:26:133:133	5533758	1					
ANR	5533813	ExpressionStatement	p ++	118:3:2464:2467	5533758	0	True				
ANR	5533814	PostIncDecOperationExpression	p ++		5533758	0					
ANR	5533815	Identifier	p		5533758	0					
ANR	5533816	IncDec	++		5533758	1					
ANR	5533817	ExpressionStatement	"memmove ( n , p , strlen ( p ) + 1 )"	120:2:2475:2505	5533758	2	True				
ANR	5533818	CallExpression	"memmove ( n , p , strlen ( p ) + 1 )"		5533758	0					
ANR	5533819	Callee	memmove		5533758	0					
ANR	5533820	Identifier	memmove		5533758	0					
ANR	5533821	ArgumentList	n		5533758	1					
ANR	5533822	Argument	n		5533758	0					
ANR	5533823	Identifier	n		5533758	0					
ANR	5533824	Argument	p		5533758	1					
ANR	5533825	Identifier	p		5533758	0					
ANR	5533826	Argument	strlen ( p ) + 1		5533758	2					
ANR	5533827	AdditiveExpression	strlen ( p ) + 1		5533758	0		+			
ANR	5533828	CallExpression	strlen ( p )		5533758	0					
ANR	5533829	Callee	strlen		5533758	0					
ANR	5533830	Identifier	strlen		5533758	0					
ANR	5533831	ArgumentList	p		5533758	1					
ANR	5533832	Argument	p		5533758	0					
ANR	5533833	Identifier	p		5533758	0					
ANR	5533834	PrimaryExpression	1		5533758	1					
ANR	5533835	IfStatement	"if ( strstr ( opstr , "" - ]"" ) )"		5533758	3					
ANR	5533836	Condition	"strstr ( opstr , "" - ]"" )"	122:5:2515:2536	5533758	0	True				
ANR	5533837	CallExpression	"strstr ( opstr , "" - ]"" )"		5533758	0					
ANR	5533838	Callee	strstr		5533758	0					
ANR	5533839	Identifier	strstr		5533758	0					
ANR	5533840	ArgumentList	opstr		5533758	1					
ANR	5533841	Argument	opstr		5533758	0					
ANR	5533842	Identifier	opstr		5533758	0					
ANR	5533843	Argument	""" - ]"""		5533758	1					
ANR	5533844	PrimaryExpression	""" - ]"""		5533758	0					
ANR	5533845	CompoundStatement		13:29:213:213	5533758	1					
ANR	5533846	ExpressionStatement	"opstr = r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"	123:2:2543:2588	5533758	0	True				
ANR	5533847	AssignmentExpression	"opstr = r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"		5533758	0		=			
ANR	5533848	Identifier	opstr		5533758	0					
ANR	5533849	CallExpression	"r_str_replace ( opstr , "" - ]"" , ""]"" , 1 )"		5533758	1					
ANR	5533850	Callee	r_str_replace		5533758	0					
ANR	5533851	Identifier	r_str_replace		5533758	0					
ANR	5533852	ArgumentList	opstr		5533758	1					
ANR	5533853	Argument	opstr		5533758	0					
ANR	5533854	Identifier	opstr		5533758	0					
ANR	5533855	Argument	""" - ]"""		5533758	1					
ANR	5533856	PrimaryExpression	""" - ]"""		5533758	0					
ANR	5533857	Argument	"""]"""		5533758	2					
ANR	5533858	PrimaryExpression	"""]"""		5533758	0					
ANR	5533859	Argument	1		5533758	3					
ANR	5533860	PrimaryExpression	1		5533758	0					
ANR	5533861	IfStatement	"if ( strstr ( opstr , "" + ]"" ) )"		5533758	4					
ANR	5533862	Condition	"strstr ( opstr , "" + ]"" )"	125:5:2598:2619	5533758	0	True				
ANR	5533863	CallExpression	"strstr ( opstr , "" + ]"" )"		5533758	0					
ANR	5533864	Callee	strstr		5533758	0					
ANR	5533865	Identifier	strstr		5533758	0					
ANR	5533866	ArgumentList	opstr		5533758	1					
ANR	5533867	Argument	opstr		5533758	0					
ANR	5533868	Identifier	opstr		5533758	0					
ANR	5533869	Argument	""" + ]"""		5533758	1					
ANR	5533870	PrimaryExpression	""" + ]"""		5533758	0					
ANR	5533871	CompoundStatement		16:29:296:296	5533758	1					
ANR	5533872	ExpressionStatement	"opstr = r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"	126:2:2626:2671	5533758	0	True				
ANR	5533873	AssignmentExpression	"opstr = r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"		5533758	0		=			
ANR	5533874	Identifier	opstr		5533758	0					
ANR	5533875	CallExpression	"r_str_replace ( opstr , "" + ]"" , ""]"" , 1 )"		5533758	1					
ANR	5533876	Callee	r_str_replace		5533758	0					
ANR	5533877	Identifier	r_str_replace		5533758	0					
ANR	5533878	ArgumentList	opstr		5533758	1					
ANR	5533879	Argument	opstr		5533758	0					
ANR	5533880	Identifier	opstr		5533758	0					
ANR	5533881	Argument	""" + ]"""		5533758	1					
ANR	5533882	PrimaryExpression	""" + ]"""		5533758	0					
ANR	5533883	Argument	"""]"""		5533758	2					
ANR	5533884	PrimaryExpression	"""]"""		5533758	0					
ANR	5533885	Argument	1		5533758	3					
ANR	5533886	PrimaryExpression	1		5533758	0					
ANR	5533887	IfStatement	"if ( strstr ( opstr , "", ]"" ) )"		5533758	5					
ANR	5533888	Condition	"strstr ( opstr , "", ]"" )"	128:5:2681:2701	5533758	0	True				
ANR	5533889	CallExpression	"strstr ( opstr , "", ]"" )"		5533758	0					
ANR	5533890	Callee	strstr		5533758	0					
ANR	5533891	Identifier	strstr		5533758	0					
ANR	5533892	ArgumentList	opstr		5533758	1					
ANR	5533893	Argument	opstr		5533758	0					
ANR	5533894	Identifier	opstr		5533758	0					
ANR	5533895	Argument	""", ]"""		5533758	1					
ANR	5533896	PrimaryExpression	""", ]"""		5533758	0					
ANR	5533897	CompoundStatement		19:28:378:378	5533758	1					
ANR	5533898	ExpressionStatement	"opstr = r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"	129:2:2708:2752	5533758	0	True				
ANR	5533899	AssignmentExpression	"opstr = r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"		5533758	0		=			
ANR	5533900	Identifier	opstr		5533758	0					
ANR	5533901	CallExpression	"r_str_replace ( opstr , "", ]"" , ""]"" , 1 )"		5533758	1					
ANR	5533902	Callee	r_str_replace		5533758	0					
ANR	5533903	Identifier	r_str_replace		5533758	0					
ANR	5533904	ArgumentList	opstr		5533758	1					
ANR	5533905	Argument	opstr		5533758	0					
ANR	5533906	Identifier	opstr		5533758	0					
ANR	5533907	Argument	""", ]"""		5533758	1					
ANR	5533908	PrimaryExpression	""", ]"""		5533758	0					
ANR	5533909	Argument	"""]"""		5533758	2					
ANR	5533910	PrimaryExpression	"""]"""		5533758	0					
ANR	5533911	Argument	1		5533758	3					
ANR	5533912	PrimaryExpression	1		5533758	0					
ANR	5533913	IfStatement	"if ( strstr ( opstr , "" - "" ) )"		5533758	6					
ANR	5533914	Condition	"strstr ( opstr , "" - "" )"	131:5:2762:2782	5533758	0	True				
ANR	5533915	CallExpression	"strstr ( opstr , "" - "" )"		5533758	0					
ANR	5533916	Callee	strstr		5533758	0					
ANR	5533917	Identifier	strstr		5533758	0					
ANR	5533918	ArgumentList	opstr		5533758	1					
ANR	5533919	Argument	opstr		5533758	0					
ANR	5533920	Identifier	opstr		5533758	0					
ANR	5533921	Argument	""" - """		5533758	1					
ANR	5533922	PrimaryExpression	""" - """		5533758	0					
ANR	5533923	CompoundStatement		22:28:459:459	5533758	1					
ANR	5533924	ExpressionStatement	"opstr = r_str_replace ( opstr , "" - "" , ""-"" , 1 )"	132:2:2789:2833	5533758	0	True				
ANR	5533925	AssignmentExpression	"opstr = r_str_replace ( opstr , "" - "" , ""-"" , 1 )"		5533758	0		=			
ANR	5533926	Identifier	opstr		5533758	0					
ANR	5533927	CallExpression	"r_str_replace ( opstr , "" - "" , ""-"" , 1 )"		5533758	1					
ANR	5533928	Callee	r_str_replace		5533758	0					
ANR	5533929	Identifier	r_str_replace		5533758	0					
ANR	5533930	ArgumentList	opstr		5533758	1					
ANR	5533931	Argument	opstr		5533758	0					
ANR	5533932	Identifier	opstr		5533758	0					
ANR	5533933	Argument	""" - """		5533758	1					
ANR	5533934	PrimaryExpression	""" - """		5533758	0					
ANR	5533935	Argument	"""-"""		5533758	2					
ANR	5533936	PrimaryExpression	"""-"""		5533758	0					
ANR	5533937	Argument	1		5533758	3					
ANR	5533938	PrimaryExpression	1		5533758	0					
ANR	5533939	IfStatement	"if ( strstr ( opstr , "" + "" ) )"		5533758	7					
ANR	5533940	Condition	"strstr ( opstr , "" + "" )"	134:5:2843:2863	5533758	0	True				
ANR	5533941	CallExpression	"strstr ( opstr , "" + "" )"		5533758	0					
ANR	5533942	Callee	strstr		5533758	0					
ANR	5533943	Identifier	strstr		5533758	0					
ANR	5533944	ArgumentList	opstr		5533758	1					
ANR	5533945	Argument	opstr		5533758	0					
ANR	5533946	Identifier	opstr		5533758	0					
ANR	5533947	Argument	""" + """		5533758	1					
ANR	5533948	PrimaryExpression	""" + """		5533758	0					
ANR	5533949	CompoundStatement		25:28:540:540	5533758	1					
ANR	5533950	ExpressionStatement	"opstr = r_str_replace ( opstr , "" + "" , ""+"" , 1 )"	135:2:2870:2914	5533758	0	True				
ANR	5533951	AssignmentExpression	"opstr = r_str_replace ( opstr , "" + "" , ""+"" , 1 )"		5533758	0		=			
ANR	5533952	Identifier	opstr		5533758	0					
ANR	5533953	CallExpression	"r_str_replace ( opstr , "" + "" , ""+"" , 1 )"		5533758	1					
ANR	5533954	Callee	r_str_replace		5533758	0					
ANR	5533955	Identifier	r_str_replace		5533758	0					
ANR	5533956	ArgumentList	opstr		5533758	1					
ANR	5533957	Argument	opstr		5533758	0					
ANR	5533958	Identifier	opstr		5533758	0					
ANR	5533959	Argument	""" + """		5533758	1					
ANR	5533960	PrimaryExpression	""" + """		5533758	0					
ANR	5533961	Argument	"""+"""		5533758	2					
ANR	5533962	PrimaryExpression	"""+"""		5533758	0					
ANR	5533963	Argument	1		5533758	3					
ANR	5533964	PrimaryExpression	1		5533758	0					
ANR	5533965	ReturnStatement	return opstr ;	137:1:2920:2932	5533758	8	True				
ANR	5533966	Identifier	opstr		5533758	0					
ANR	5533967	ReturnType	R_API char *		5533758	1					
ANR	5533968	Identifier	r_parse_immtrim		5533758	2					
ANR	5533969	ParameterList	char * opstr		5533758	3					
ANR	5533970	Parameter	char * opstr	110:28:2312:2322	5533758	0	True				
ANR	5533971	ParameterType	char *		5533758	0					
ANR	5533972	Identifier	opstr		5533758	1					
ANR	5533973	CFGEntryNode	ENTRY		5533758		True				
ANR	5533974	CFGExitNode	EXIT		5533758		True				
ANR	5533975	Symbol	opstr		5533758						
ANR	5533976	Symbol	p		5533758						
ANR	5533977	Symbol	strlen		5533758						
ANR	5533978	Symbol	NULL		5533758						
ANR	5533979	Symbol	strstr		5533758						
ANR	5533980	Symbol	r_str_replace		5533758						
ANR	5533981	Symbol	* p		5533758						
ANR	5533982	Symbol	* opstr		5533758						
ANR	5533983	Symbol	IS_HEXCHAR		5533758						
ANR	5533984	Symbol	n		5533758						
ANR	5533985	Function	r_parse_varsub	140:0:2937:3160							
ANR	5533986	FunctionDef	"r_parse_varsub (RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len)"		5533985	0					
ANR	5533987	CompoundStatement		140:109:3046:3160	5533985	0					
ANR	5533988	IfStatement	if ( p -> cur && p -> cur -> varsub )		5533985	0					
ANR	5533989	Condition	p -> cur && p -> cur -> varsub	141:5:3053:3076	5533985	0	True				
ANR	5533990	AndExpression	p -> cur && p -> cur -> varsub		5533985	0		&&			
ANR	5533991	PtrMemberAccess	p -> cur		5533985	0					
ANR	5533992	Identifier	p		5533985	0					
ANR	5533993	Identifier	cur		5533985	1					
ANR	5533994	PtrMemberAccess	p -> cur -> varsub		5533985	1					
ANR	5533995	PtrMemberAccess	p -> cur		5533985	0					
ANR	5533996	Identifier	p		5533985	0					
ANR	5533997	Identifier	cur		5533985	1					
ANR	5533998	Identifier	varsub		5533985	1					
ANR	5533999	CompoundStatement		2:31:32:32	5533985	1					
ANR	5534000	ReturnStatement	"return p -> cur -> varsub ( p , f , addr , oplen , data , str , len ) ;"	142:2:3083:3140	5533985	0	True				
ANR	5534001	CallExpression	"p -> cur -> varsub ( p , f , addr , oplen , data , str , len )"		5533985	0					
ANR	5534002	Callee	p -> cur -> varsub		5533985	0					
ANR	5534003	PtrMemberAccess	p -> cur -> varsub		5533985	0					
ANR	5534004	PtrMemberAccess	p -> cur		5533985	0					
ANR	5534005	Identifier	p		5533985	0					
ANR	5534006	Identifier	cur		5533985	1					
ANR	5534007	Identifier	varsub		5533985	1					
ANR	5534008	ArgumentList	p		5533985	1					
ANR	5534009	Argument	p		5533985	0					
ANR	5534010	Identifier	p		5533985	0					
ANR	5534011	Argument	f		5533985	1					
ANR	5534012	Identifier	f		5533985	0					
ANR	5534013	Argument	addr		5533985	2					
ANR	5534014	Identifier	addr		5533985	0					
ANR	5534015	Argument	oplen		5533985	3					
ANR	5534016	Identifier	oplen		5533985	0					
ANR	5534017	Argument	data		5533985	4					
ANR	5534018	Identifier	data		5533985	0					
ANR	5534019	Argument	str		5533985	5					
ANR	5534020	Identifier	str		5533985	0					
ANR	5534021	Argument	len		5533985	6					
ANR	5534022	Identifier	len		5533985	0					
ANR	5534023	ReturnStatement	return false ;	144:1:3146:3158	5533985	1	True				
ANR	5534024	Identifier	false		5533985	0					
ANR	5534025	ReturnType	R_API bool		5533985	1					
ANR	5534026	Identifier	r_parse_varsub		5533985	2					
ANR	5534027	ParameterList	"RParse * p , RAnalFunction * f , ut64 addr , int oplen , char * data , char * str , int len"		5533985	3					
ANR	5534028	Parameter	RParse * p	140:26:2963:2971	5533985	0	True				
ANR	5534029	ParameterType	RParse *		5533985	0					
ANR	5534030	Identifier	p		5533985	1					
ANR	5534031	Parameter	RAnalFunction * f	140:37:2974:2989	5533985	1	True				
ANR	5534032	ParameterType	RAnalFunction *		5533985	0					
ANR	5534033	Identifier	f		5533985	1					
ANR	5534034	Parameter	ut64 addr	140:55:2992:3000	5533985	2	True				
ANR	5534035	ParameterType	ut64		5533985	0					
ANR	5534036	Identifier	addr		5533985	1					
ANR	5534037	Parameter	int oplen	140:66:3003:3011	5533985	3	True				
ANR	5534038	ParameterType	int		5533985	0					
ANR	5534039	Identifier	oplen		5533985	1					
ANR	5534040	Parameter	char * data	140:77:3014:3023	5533985	4	True				
ANR	5534041	ParameterType	char *		5533985	0					
ANR	5534042	Identifier	data		5533985	1					
ANR	5534043	Parameter	char * str	140:89:3026:3034	5533985	5	True				
ANR	5534044	ParameterType	char *		5533985	0					
ANR	5534045	Identifier	str		5533985	1					
ANR	5534046	Parameter	int len	140:100:3037:3043	5533985	6	True				
ANR	5534047	ParameterType	int		5533985	0					
ANR	5534048	Identifier	len		5533985	1					
ANR	5534049	CFGEntryNode	ENTRY		5533985		True				
ANR	5534050	CFGExitNode	EXIT		5533985		True				
ANR	5534051	Symbol	oplen		5533985						
ANR	5534052	Symbol	data		5533985						
ANR	5534053	Symbol	f		5533985						
ANR	5534054	Symbol	false		5533985						
ANR	5534055	Symbol	p -> cur		5533985						
ANR	5534056	Symbol	p		5533985						
ANR	5534057	Symbol	str		5533985						
ANR	5534058	Symbol	len		5533985						
ANR	5534059	Symbol	p -> cur -> varsub		5533985						
ANR	5534060	Symbol	* p		5533985						
ANR	5534061	Symbol	* * p		5533985						
ANR	5534062	Symbol	addr		5533985						
ANR	5534063	Symbol	* p -> cur		5533985						
ANR	5534064	Function	r_parse_set_user_ptr	148:0:3177:3251							
ANR	5534065	FunctionDef	"r_parse_set_user_ptr (RParse * p , void * user)"		5534064	0					
ANR	5534066	CompoundStatement		148:55:3232:3251	5534064	0					
ANR	5534067	ExpressionStatement	p -> user = user	149:1:3235:3249	5534064	0	True				
ANR	5534068	AssignmentExpression	p -> user = user		5534064	0		=			
ANR	5534069	PtrMemberAccess	p -> user		5534064	0					
ANR	5534070	Identifier	p		5534064	0					
ANR	5534071	Identifier	user		5534064	1					
ANR	5534072	Identifier	user		5534064	1					
ANR	5534073	ReturnType	R_API void		5534064	1					
ANR	5534074	Identifier	r_parse_set_user_ptr		5534064	2					
ANR	5534075	ParameterList	"RParse * p , void * user"		5534064	3					
ANR	5534076	Parameter	RParse * p	148:32:3209:3217	5534064	0	True				
ANR	5534077	ParameterType	RParse *		5534064	0					
ANR	5534078	Identifier	p		5534064	1					
ANR	5534079	Parameter	void * user	148:43:3220:3229	5534064	1	True				
ANR	5534080	ParameterType	void *		5534064	0					
ANR	5534081	Identifier	user		5534064	1					
ANR	5534082	CFGEntryNode	ENTRY		5534064		True				
ANR	5534083	CFGExitNode	EXIT		5534064		True				
ANR	5534084	Symbol	p		5534064						
ANR	5534085	Symbol	* p		5534064						
ANR	5534086	Symbol	user		5534064						
ANR	5534087	Symbol	p -> user		5534064						
