command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5018179	File	data/converged/CVE-2019-16718~_radare2/libr_parse_p_parse_avr_pseudo.c								
ANR	5018180	Function	replace	13:0:213:3395							
ANR	5018181	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5018180	0					
ANR	5018182	CompoundStatement		13:64:277:3395	5018180	0					
ANR	5018183	IdentifierDeclStatement	"int i , j , k ;"	14:1:280:289	5018180	0	True				
ANR	5018184	IdentifierDecl	i		5018180	0					
ANR	5018185	IdentifierDeclType	int		5018180	0					
ANR	5018186	Identifier	i		5018180	1					
ANR	5018187	IdentifierDecl	j		5018180	1					
ANR	5018188	IdentifierDeclType	int		5018180	0					
ANR	5018189	Identifier	j		5018180	1					
ANR	5018190	IdentifierDecl	k		5018180	2					
ANR	5018191	IdentifierDeclType	int		5018180	0					
ANR	5018192	Identifier	k		5018180	1					
ANR	5018193	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } } ;"	15:1:292:2719	5018180	1	True				
ANR	5018194	IdentifierDecl	"ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } }"		5018180	0					
ANR	5018195	IdentifierDeclType	 [ ]		5018180	0					
ANR	5018196	Identifier	ops		5018180	1					
ANR	5018197	AssignmentExpression	"ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } }"		5018180	2		=			
ANR	5018198	Identifier	ops		5018180	0					
ANR	5018199	InitializerList	"""add"""		5018180	1					
ANR	5018200	InitializerList	"""add"""		5018180	0					
ANR	5018201	PrimaryExpression	"""add"""		5018180	0					
ANR	5018202	PrimaryExpression	"""A += B"""		5018180	1					
ANR	5018203	InitializerList	"""adc"""		5018180	1					
ANR	5018204	PrimaryExpression	"""adc"""		5018180	0					
ANR	5018205	PrimaryExpression	"""A += B + carry"""		5018180	1					
ANR	5018206	InitializerList	"""adiw"""		5018180	2					
ANR	5018207	PrimaryExpression	"""adiw"""		5018180	0					
ANR	5018208	PrimaryExpression	"""A+1:A += B"""		5018180	1					
ANR	5018209	InitializerList	"""sub"""		5018180	3					
ANR	5018210	PrimaryExpression	"""sub"""		5018180	0					
ANR	5018211	PrimaryExpression	"""A -= B"""		5018180	1					
ANR	5018212	InitializerList	"""subi"""		5018180	4					
ANR	5018213	PrimaryExpression	"""subi"""		5018180	0					
ANR	5018214	PrimaryExpression	"""A -= B"""		5018180	1					
ANR	5018215	InitializerList	"""sbc"""		5018180	5					
ANR	5018216	PrimaryExpression	"""sbc"""		5018180	0					
ANR	5018217	PrimaryExpression	"""A -= (B + carry)"""		5018180	1					
ANR	5018218	InitializerList	"""sbci"""		5018180	6					
ANR	5018219	PrimaryExpression	"""sbci"""		5018180	0					
ANR	5018220	PrimaryExpression	"""A -= (B + carry)"""		5018180	1					
ANR	5018221	InitializerList	"""sbiw"""		5018180	7					
ANR	5018222	PrimaryExpression	"""sbiw"""		5018180	0					
ANR	5018223	PrimaryExpression	"""A+1:A -= B"""		5018180	1					
ANR	5018224	InitializerList	"""and"""		5018180	8					
ANR	5018225	PrimaryExpression	"""and"""		5018180	0					
ANR	5018226	PrimaryExpression	"""A &= B"""		5018180	1					
ANR	5018227	InitializerList	"""andi"""		5018180	9					
ANR	5018228	PrimaryExpression	"""andi"""		5018180	0					
ANR	5018229	PrimaryExpression	"""A &= B"""		5018180	1					
ANR	5018230	InitializerList	"""or"""		5018180	10					
ANR	5018231	PrimaryExpression	"""or"""		5018180	0					
ANR	5018232	PrimaryExpression	"""A |= B"""		5018180	1					
ANR	5018233	InitializerList	"""ori"""		5018180	11					
ANR	5018234	PrimaryExpression	"""ori"""		5018180	0					
ANR	5018235	PrimaryExpression	"""A |= B"""		5018180	1					
ANR	5018236	InitializerList	"""eor"""		5018180	12					
ANR	5018237	PrimaryExpression	"""eor"""		5018180	0					
ANR	5018238	PrimaryExpression	"""A ^= B"""		5018180	1					
ANR	5018239	InitializerList	"""com"""		5018180	13					
ANR	5018240	PrimaryExpression	"""com"""		5018180	0					
ANR	5018241	PrimaryExpression	"""A = 0xff - A"""		5018180	1					
ANR	5018242	InitializerList	"""neg"""		5018180	14					
ANR	5018243	PrimaryExpression	"""neg"""		5018180	0					
ANR	5018244	PrimaryExpression	"""A = -A"""		5018180	1					
ANR	5018245	InitializerList	"""sbr"""		5018180	15					
ANR	5018246	PrimaryExpression	"""sbr"""		5018180	0					
ANR	5018247	PrimaryExpression	"""A |= B"""		5018180	1					
ANR	5018248	InitializerList	"""cbr"""		5018180	16					
ANR	5018249	PrimaryExpression	"""cbr"""		5018180	0					
ANR	5018250	PrimaryExpression	"""A &= (0xff - B)"""		5018180	1					
ANR	5018251	InitializerList	"""inc"""		5018180	17					
ANR	5018252	PrimaryExpression	"""inc"""		5018180	0					
ANR	5018253	PrimaryExpression	"""A++"""		5018180	1					
ANR	5018254	InitializerList	"""dec"""		5018180	18					
ANR	5018255	PrimaryExpression	"""dec"""		5018180	0					
ANR	5018256	PrimaryExpression	"""A--"""		5018180	1					
ANR	5018257	InitializerList	"""tst"""		5018180	19					
ANR	5018258	PrimaryExpression	"""tst"""		5018180	0					
ANR	5018259	PrimaryExpression	"""A &= A"""		5018180	1					
ANR	5018260	InitializerList	"""clr"""		5018180	20					
ANR	5018261	PrimaryExpression	"""clr"""		5018180	0					
ANR	5018262	PrimaryExpression	"""A ^= A"""		5018180	1					
ANR	5018263	InitializerList	"""ser"""		5018180	21					
ANR	5018264	PrimaryExpression	"""ser"""		5018180	0					
ANR	5018265	PrimaryExpression	"""A = 0xff"""		5018180	1					
ANR	5018266	InitializerList	"""mul"""		5018180	22					
ANR	5018267	PrimaryExpression	"""mul"""		5018180	0					
ANR	5018268	PrimaryExpression	"""r1:r0 = A * B"""		5018180	1					
ANR	5018269	InitializerList	"""rjmp"""		5018180	23					
ANR	5018270	PrimaryExpression	"""rjmp"""		5018180	0					
ANR	5018271	PrimaryExpression	"""goto A"""		5018180	1					
ANR	5018272	InitializerList	"""ijmp"""		5018180	24					
ANR	5018273	PrimaryExpression	"""ijmp"""		5018180	0					
ANR	5018274	PrimaryExpression	"""goto z"""		5018180	1					
ANR	5018275	InitializerList	"""jmp"""		5018180	25					
ANR	5018276	PrimaryExpression	"""jmp"""		5018180	0					
ANR	5018277	PrimaryExpression	"""goto A"""		5018180	1					
ANR	5018278	InitializerList	"""rcall"""		5018180	26					
ANR	5018279	PrimaryExpression	"""rcall"""		5018180	0					
ANR	5018280	PrimaryExpression	"""goto A"""		5018180	1					
ANR	5018281	InitializerList	"""icall"""		5018180	27					
ANR	5018282	PrimaryExpression	"""icall"""		5018180	0					
ANR	5018283	PrimaryExpression	"""goto z"""		5018180	1					
ANR	5018284	InitializerList	"""call"""		5018180	28					
ANR	5018285	PrimaryExpression	"""call"""		5018180	0					
ANR	5018286	PrimaryExpression	"""goto A"""		5018180	1					
ANR	5018287	InitializerList	"""ret"""		5018180	29					
ANR	5018288	PrimaryExpression	"""ret"""		5018180	0					
ANR	5018289	PrimaryExpression	"""return"""		5018180	1					
ANR	5018290	InitializerList	"""iret"""		5018180	30					
ANR	5018291	PrimaryExpression	"""iret"""		5018180	0					
ANR	5018292	PrimaryExpression	"""return_interrupt()"""		5018180	1					
ANR	5018293	InitializerList	"""cp"""		5018180	31					
ANR	5018294	PrimaryExpression	"""cp"""		5018180	0					
ANR	5018295	PrimaryExpression	"""var = A - B"""		5018180	1					
ANR	5018296	InitializerList	"""cpc"""		5018180	32					
ANR	5018297	PrimaryExpression	"""cpc"""		5018180	0					
ANR	5018298	PrimaryExpression	"""var = A - B - carry"""		5018180	1					
ANR	5018299	InitializerList	"""cpi"""		5018180	33					
ANR	5018300	PrimaryExpression	"""cpi"""		5018180	0					
ANR	5018301	PrimaryExpression	"""var = A - B"""		5018180	1					
ANR	5018302	InitializerList	"""breq"""		5018180	34					
ANR	5018303	PrimaryExpression	"""breq"""		5018180	0					
ANR	5018304	PrimaryExpression	"""if(!var) goto A"""		5018180	1					
ANR	5018305	InitializerList	"""brne"""		5018180	35					
ANR	5018306	PrimaryExpression	"""brne"""		5018180	0					
ANR	5018307	PrimaryExpression	"""if(var) goto A"""		5018180	1					
ANR	5018308	InitializerList	"""brsh"""		5018180	36					
ANR	5018309	PrimaryExpression	"""brsh"""		5018180	0					
ANR	5018310	PrimaryExpression	"""if(var >= 0) goto A"""		5018180	1					
ANR	5018311	InitializerList	"""brlo"""		5018180	37					
ANR	5018312	PrimaryExpression	"""brlo"""		5018180	0					
ANR	5018313	PrimaryExpression	"""if(var < 0) goto A"""		5018180	1					
ANR	5018314	InitializerList	"""brmi"""		5018180	38					
ANR	5018315	PrimaryExpression	"""brmi"""		5018180	0					
ANR	5018316	PrimaryExpression	"""if(var < 0) goto A"""		5018180	1					
ANR	5018317	InitializerList	"""brpl"""		5018180	39					
ANR	5018318	PrimaryExpression	"""brpl"""		5018180	0					
ANR	5018319	PrimaryExpression	"""if(var > 0) goto A"""		5018180	1					
ANR	5018320	InitializerList	"""brge"""		5018180	40					
ANR	5018321	PrimaryExpression	"""brge"""		5018180	0					
ANR	5018322	PrimaryExpression	"""if(var >= 0) goto A"""		5018180	1					
ANR	5018323	InitializerList	"""brlt"""		5018180	41					
ANR	5018324	PrimaryExpression	"""brlt"""		5018180	0					
ANR	5018325	PrimaryExpression	"""if(var < 0) goto A"""		5018180	1					
ANR	5018326	InitializerList	"""mov"""		5018180	42					
ANR	5018327	PrimaryExpression	"""mov"""		5018180	0					
ANR	5018328	PrimaryExpression	"""A = B"""		5018180	1					
ANR	5018329	InitializerList	"""movw"""		5018180	43					
ANR	5018330	PrimaryExpression	"""movw"""		5018180	0					
ANR	5018331	PrimaryExpression	"""A+1:A = B+1:B"""		5018180	1					
ANR	5018332	InitializerList	"""ldi"""		5018180	44					
ANR	5018333	PrimaryExpression	"""ldi"""		5018180	0					
ANR	5018334	PrimaryExpression	"""A = B"""		5018180	1					
ANR	5018335	InitializerList	"""lds"""		5018180	45					
ANR	5018336	PrimaryExpression	"""lds"""		5018180	0					
ANR	5018337	PrimaryExpression	"""A = *(B)"""		5018180	1					
ANR	5018338	InitializerList	"""ld"""		5018180	46					
ANR	5018339	PrimaryExpression	"""ld"""		5018180	0					
ANR	5018340	PrimaryExpression	"""A = *(B)"""		5018180	1					
ANR	5018341	InitializerList	"""ldd"""		5018180	47					
ANR	5018342	PrimaryExpression	"""ldd"""		5018180	0					
ANR	5018343	PrimaryExpression	"""A = *(B)"""		5018180	1					
ANR	5018344	InitializerList	"""lpm"""		5018180	48					
ANR	5018345	PrimaryExpression	"""lpm"""		5018180	0					
ANR	5018346	PrimaryExpression	"""r0 = z"""		5018180	1					
ANR	5018347	InitializerList	"""in"""		5018180	49					
ANR	5018348	PrimaryExpression	"""in"""		5018180	0					
ANR	5018349	PrimaryExpression	"""A = B"""		5018180	1					
ANR	5018350	InitializerList	"""out"""		5018180	50					
ANR	5018351	PrimaryExpression	"""out"""		5018180	0					
ANR	5018352	PrimaryExpression	"""A = B"""		5018180	1					
ANR	5018353	InitializerList	"""push"""		5018180	51					
ANR	5018354	PrimaryExpression	"""push"""		5018180	0					
ANR	5018355	PrimaryExpression	"""push(A)"""		5018180	1					
ANR	5018356	InitializerList	"""pop"""		5018180	52					
ANR	5018357	PrimaryExpression	"""pop"""		5018180	0					
ANR	5018358	PrimaryExpression	"""A = pop()"""		5018180	1					
ANR	5018359	InitializerList	"""lsl"""		5018180	53					
ANR	5018360	PrimaryExpression	"""lsl"""		5018180	0					
ANR	5018361	PrimaryExpression	"""A <<= 1"""		5018180	1					
ANR	5018362	InitializerList	"""lsr"""		5018180	54					
ANR	5018363	PrimaryExpression	"""lsr"""		5018180	0					
ANR	5018364	PrimaryExpression	"""A >>= 1"""		5018180	1					
ANR	5018365	InitializerList	"""rol"""		5018180	55					
ANR	5018366	PrimaryExpression	"""rol"""		5018180	0					
ANR	5018367	PrimaryExpression	"""A = (A << 1) | (A >> 7)"""		5018180	1					
ANR	5018368	InitializerList	"""ror"""		5018180	56					
ANR	5018369	PrimaryExpression	"""ror"""		5018180	0					
ANR	5018370	PrimaryExpression	"""A = (A << 7) | (A >> 1)"""		5018180	1					
ANR	5018371	InitializerList	"""asr"""		5018180	57					
ANR	5018372	PrimaryExpression	"""asr"""		5018180	0					
ANR	5018373	PrimaryExpression	"""A >>= 1"""		5018180	1					
ANR	5018374	InitializerList	"""swap"""		5018180	58					
ANR	5018375	PrimaryExpression	"""swap"""		5018180	0					
ANR	5018376	PrimaryExpression	"""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"""		5018180	1					
ANR	5018377	InitializerList	"""sec"""		5018180	59					
ANR	5018378	PrimaryExpression	"""sec"""		5018180	0					
ANR	5018379	PrimaryExpression	"""c = 1"""		5018180	1					
ANR	5018380	InitializerList	"""clc"""		5018180	60					
ANR	5018381	PrimaryExpression	"""clc"""		5018180	0					
ANR	5018382	PrimaryExpression	"""c = 0"""		5018180	1					
ANR	5018383	InitializerList	"""sen"""		5018180	61					
ANR	5018384	PrimaryExpression	"""sen"""		5018180	0					
ANR	5018385	PrimaryExpression	"""n = 1"""		5018180	1					
ANR	5018386	InitializerList	"""cln"""		5018180	62					
ANR	5018387	PrimaryExpression	"""cln"""		5018180	0					
ANR	5018388	PrimaryExpression	"""n = 0"""		5018180	1					
ANR	5018389	InitializerList	"""sez"""		5018180	63					
ANR	5018390	PrimaryExpression	"""sez"""		5018180	0					
ANR	5018391	PrimaryExpression	"""z = 1"""		5018180	1					
ANR	5018392	InitializerList	"""clz"""		5018180	64					
ANR	5018393	PrimaryExpression	"""clz"""		5018180	0					
ANR	5018394	PrimaryExpression	"""z = 0"""		5018180	1					
ANR	5018395	InitializerList	"""sei"""		5018180	65					
ANR	5018396	PrimaryExpression	"""sei"""		5018180	0					
ANR	5018397	PrimaryExpression	"""i = 1"""		5018180	1					
ANR	5018398	InitializerList	"""cli"""		5018180	66					
ANR	5018399	PrimaryExpression	"""cli"""		5018180	0					
ANR	5018400	PrimaryExpression	"""i = 0"""		5018180	1					
ANR	5018401	InitializerList	"""ses"""		5018180	67					
ANR	5018402	PrimaryExpression	"""ses"""		5018180	0					
ANR	5018403	PrimaryExpression	"""s = 1"""		5018180	1					
ANR	5018404	InitializerList	"""cls"""		5018180	68					
ANR	5018405	PrimaryExpression	"""cls"""		5018180	0					
ANR	5018406	PrimaryExpression	"""s = 0"""		5018180	1					
ANR	5018407	InitializerList	"""sev"""		5018180	69					
ANR	5018408	PrimaryExpression	"""sev"""		5018180	0					
ANR	5018409	PrimaryExpression	"""v = 1"""		5018180	1					
ANR	5018410	InitializerList	"""clv"""		5018180	70					
ANR	5018411	PrimaryExpression	"""clv"""		5018180	0					
ANR	5018412	PrimaryExpression	"""v = 0"""		5018180	1					
ANR	5018413	InitializerList	"""set"""		5018180	71					
ANR	5018414	PrimaryExpression	"""set"""		5018180	0					
ANR	5018415	PrimaryExpression	"""t = 1"""		5018180	1					
ANR	5018416	InitializerList	"""clt"""		5018180	72					
ANR	5018417	PrimaryExpression	"""clt"""		5018180	0					
ANR	5018418	PrimaryExpression	"""t = 0"""		5018180	1					
ANR	5018419	InitializerList	"""seh"""		5018180	73					
ANR	5018420	PrimaryExpression	"""seh"""		5018180	0					
ANR	5018421	PrimaryExpression	"""h = 1"""		5018180	1					
ANR	5018422	InitializerList	"""clh"""		5018180	74					
ANR	5018423	PrimaryExpression	"""clh"""		5018180	0					
ANR	5018424	PrimaryExpression	"""h = 0"""		5018180	1					
ANR	5018425	InitializerList	"""nop"""		5018180	75					
ANR	5018426	PrimaryExpression	"""nop"""		5018180	0					
ANR	5018427	PrimaryExpression	""""""		5018180	1					
ANR	5018428	InitializerList	"""halt"""		5018180	76					
ANR	5018429	PrimaryExpression	"""halt"""		5018180	0					
ANR	5018430	PrimaryExpression	"""_halt()"""		5018180	1					
ANR	5018431	InitializerList	"""wdr"""		5018180	77					
ANR	5018432	PrimaryExpression	"""wdr"""		5018180	0					
ANR	5018433	PrimaryExpression	"""_watchdog_reset()"""		5018180	1					
ANR	5018434	InitializerList	"""std"""		5018180	78					
ANR	5018435	PrimaryExpression	"""std"""		5018180	0					
ANR	5018436	PrimaryExpression	"""*(A) = B"""		5018180	1					
ANR	5018437	InitializerList	"""st"""		5018180	79					
ANR	5018438	PrimaryExpression	"""st"""		5018180	0					
ANR	5018439	PrimaryExpression	"""*(A) = B"""		5018180	1					
ANR	5018440	InitializerList	"""sts"""		5018180	80					
ANR	5018441	PrimaryExpression	"""sts"""		5018180	0					
ANR	5018442	PrimaryExpression	"""*(A) = B"""		5018180	1					
ANR	5018443	InitializerList	NULL		5018180	81					
ANR	5018444	Identifier	NULL		5018180	0					
ANR	5018445	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5018180	2					
ANR	5018446	ForInit	i = 0 ;	103:6:2728:2733	5018180	0	True				
ANR	5018447	AssignmentExpression	i = 0		5018180	0		=			
ANR	5018448	Identifier	i		5018180	0					
ANR	5018449	PrimaryExpression	0		5018180	1					
ANR	5018450	Condition	ops [ i ] . op != NULL	103:13:2735:2751	5018180	1	True				
ANR	5018451	EqualityExpression	ops [ i ] . op != NULL		5018180	0		!=			
ANR	5018452	MemberAccess	ops [ i ] . op		5018180	0					
ANR	5018453	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018454	Identifier	ops		5018180	0					
ANR	5018455	Identifier	i		5018180	1					
ANR	5018456	Identifier	op		5018180	1					
ANR	5018457	Identifier	NULL		5018180	1					
ANR	5018458	PostIncDecOperationExpression	i ++	103:32:2754:2756	5018180	2	True				
ANR	5018459	Identifier	i		5018180	0					
ANR	5018460	IncDec	++		5018180	1					
ANR	5018461	CompoundStatement		91:37:2481:2481	5018180	3					
ANR	5018462	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5018180	0					
ANR	5018463	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	104:6:2767:2794	5018180	0	True				
ANR	5018464	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5018180	0					
ANR	5018465	UnaryOperator	!		5018180	0					
ANR	5018466	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5018180	1					
ANR	5018467	Callee	strcmp		5018180	0					
ANR	5018468	Identifier	strcmp		5018180	0					
ANR	5018469	ArgumentList	ops [ i ] . op		5018180	1					
ANR	5018470	Argument	ops [ i ] . op		5018180	0					
ANR	5018471	MemberAccess	ops [ i ] . op		5018180	0					
ANR	5018472	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018473	Identifier	ops		5018180	0					
ANR	5018474	Identifier	i		5018180	1					
ANR	5018475	Identifier	op		5018180	1					
ANR	5018476	Argument	argv [ 0 ]		5018180	1					
ANR	5018477	ArrayIndexing	argv [ 0 ]		5018180	0					
ANR	5018478	Identifier	argv		5018180	0					
ANR	5018479	PrimaryExpression	0		5018180	1					
ANR	5018480	CompoundStatement		92:36:2519:2519	5018180	1					
ANR	5018481	IfStatement	if ( newstr != NULL )		5018180	0					
ANR	5018482	Condition	newstr != NULL	105:7:2806:2819	5018180	0	True				
ANR	5018483	EqualityExpression	newstr != NULL		5018180	0		!=			
ANR	5018484	Identifier	newstr		5018180	0					
ANR	5018485	Identifier	NULL		5018180	1					
ANR	5018486	CompoundStatement		93:23:2544:2544	5018180	1					
ANR	5018487	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5018180	0					
ANR	5018488	ForInit	j = k = 0 ;	106:9:2833:2842	5018180	0	True				
ANR	5018489	AssignmentExpression	j = k = 0		5018180	0		=			
ANR	5018490	Identifier	j		5018180	0					
ANR	5018491	AssignmentExpression	k = 0		5018180	1		=			
ANR	5018492	Identifier	k		5018180	0					
ANR	5018493	PrimaryExpression	0		5018180	1					
ANR	5018494	Condition	ops [ i ] . str [ j ] != '\\0'	106:20:2844:2864	5018180	1	True				
ANR	5018495	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5018180	0		!=			
ANR	5018496	ArrayIndexing	ops [ i ] . str [ j ]		5018180	0					
ANR	5018497	MemberAccess	ops [ i ] . str		5018180	0					
ANR	5018498	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018499	Identifier	ops		5018180	0					
ANR	5018500	Identifier	i		5018180	1					
ANR	5018501	Identifier	str		5018180	1					
ANR	5018502	Identifier	j		5018180	1					
ANR	5018503	PrimaryExpression	'\\0'		5018180	1					
ANR	5018504	Expression	"j ++ , k ++"	106:43:2867:2874	5018180	2	True				
ANR	5018505	PostIncDecOperationExpression	j ++		5018180	0					
ANR	5018506	Identifier	j		5018180	0					
ANR	5018507	IncDec	++		5018180	1					
ANR	5018508	PostIncDecOperationExpression	k ++		5018180	1					
ANR	5018509	Identifier	k		5018180	0					
ANR	5018510	IncDec	++		5018180	1					
ANR	5018511	CompoundStatement		94:53:2599:2599	5018180	3					
ANR	5018512	IfStatement	if ( ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J' )		5018180	0					
ANR	5018513	Condition	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'	107:9:2888:2931	5018180	0	True				
ANR	5018514	AndExpression	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'		5018180	0		&&			
ANR	5018515	RelationalExpression	ops [ i ] . str [ j ] >= 'A'		5018180	0		>=			
ANR	5018516	ArrayIndexing	ops [ i ] . str [ j ]		5018180	0					
ANR	5018517	MemberAccess	ops [ i ] . str		5018180	0					
ANR	5018518	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018519	Identifier	ops		5018180	0					
ANR	5018520	Identifier	i		5018180	1					
ANR	5018521	Identifier	str		5018180	1					
ANR	5018522	Identifier	j		5018180	1					
ANR	5018523	PrimaryExpression	'A'		5018180	1					
ANR	5018524	RelationalExpression	ops [ i ] . str [ j ] <= 'J'		5018180	1		<=			
ANR	5018525	ArrayIndexing	ops [ i ] . str [ j ]		5018180	0					
ANR	5018526	MemberAccess	ops [ i ] . str		5018180	0					
ANR	5018527	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018528	Identifier	ops		5018180	0					
ANR	5018529	Identifier	i		5018180	1					
ANR	5018530	Identifier	str		5018180	1					
ANR	5018531	Identifier	j		5018180	1					
ANR	5018532	PrimaryExpression	'J'		5018180	1					
ANR	5018533	CompoundStatement		96:6:2664:2705	5018180	1					
ANR	5018534	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '@' ] ;	108:6:2942:2983	5018180	0	True				
ANR	5018535	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5018180	0					
ANR	5018536	IdentifierDeclType	const char *		5018180	0					
ANR	5018537	Identifier	w		5018180	1					
ANR	5018538	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5018180	2		=			
ANR	5018539	Identifier	w		5018180	0					
ANR	5018540	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '@' ]		5018180	1					
ANR	5018541	Identifier	argv		5018180	0					
ANR	5018542	AdditiveExpression	ops [ i ] . str [ j ] - '@'		5018180	1		-			
ANR	5018543	ArrayIndexing	ops [ i ] . str [ j ]		5018180	0					
ANR	5018544	MemberAccess	ops [ i ] . str		5018180	0					
ANR	5018545	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018546	Identifier	ops		5018180	0					
ANR	5018547	Identifier	i		5018180	1					
ANR	5018548	Identifier	str		5018180	1					
ANR	5018549	Identifier	j		5018180	1					
ANR	5018550	PrimaryExpression	'@'		5018180	1					
ANR	5018551	IfStatement	if ( w != NULL )		5018180	1					
ANR	5018552	Condition	w != NULL	109:10:2995:3003	5018180	0	True				
ANR	5018553	EqualityExpression	w != NULL		5018180	0		!=			
ANR	5018554	Identifier	w		5018180	0					
ANR	5018555	Identifier	NULL		5018180	1					
ANR	5018556	CompoundStatement		97:21:2728:2728	5018180	1					
ANR	5018557	ExpressionStatement	"strcpy ( newstr + k , w )"	110:7:3015:3037	5018180	0	True				
ANR	5018558	CallExpression	"strcpy ( newstr + k , w )"		5018180	0					
ANR	5018559	Callee	strcpy		5018180	0					
ANR	5018560	Identifier	strcpy		5018180	0					
ANR	5018561	ArgumentList	newstr + k		5018180	1					
ANR	5018562	Argument	newstr + k		5018180	0					
ANR	5018563	AdditiveExpression	newstr + k		5018180	0		+			
ANR	5018564	Identifier	newstr		5018180	0					
ANR	5018565	Identifier	k		5018180	1					
ANR	5018566	Argument	w		5018180	1					
ANR	5018567	Identifier	w		5018180	0					
ANR	5018568	ExpressionStatement	k += strlen ( w ) - 1	111:7:3046:3064	5018180	1	True				
ANR	5018569	AssignmentExpression	k += strlen ( w ) - 1		5018180	0		+=			
ANR	5018570	Identifier	k		5018180	0					
ANR	5018571	AdditiveExpression	strlen ( w ) - 1		5018180	1		-			
ANR	5018572	CallExpression	strlen ( w )		5018180	0					
ANR	5018573	Callee	strlen		5018180	0					
ANR	5018574	Identifier	strlen		5018180	0					
ANR	5018575	ArgumentList	w		5018180	1					
ANR	5018576	Argument	w		5018180	0					
ANR	5018577	Identifier	w		5018180	0					
ANR	5018578	PrimaryExpression	1		5018180	1					
ANR	5018579	ElseStatement	else		5018180	0					
ANR	5018580	CompoundStatement		101:12:2808:2808	5018180	0					
ANR	5018581	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	114:6:3094:3119	5018180	0	True				
ANR	5018582	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5018180	0		=			
ANR	5018583	ArrayIndexing	newstr [ k ]		5018180	0					
ANR	5018584	Identifier	newstr		5018180	0					
ANR	5018585	Identifier	k		5018180	1					
ANR	5018586	ArrayIndexing	ops [ i ] . str [ j ]		5018180	1					
ANR	5018587	MemberAccess	ops [ i ] . str		5018180	0					
ANR	5018588	ArrayIndexing	ops [ i ]		5018180	0					
ANR	5018589	Identifier	ops		5018180	0					
ANR	5018590	Identifier	i		5018180	1					
ANR	5018591	Identifier	str		5018180	1					
ANR	5018592	Identifier	j		5018180	1					
ANR	5018593	ExpressionStatement	newstr [ k ] = '\\0'	117:4:3138:3154	5018180	1	True				
ANR	5018594	AssignmentExpression	newstr [ k ] = '\\0'		5018180	0		=			
ANR	5018595	ArrayIndexing	newstr [ k ]		5018180	0					
ANR	5018596	Identifier	newstr		5018180	0					
ANR	5018597	Identifier	k		5018180	1					
ANR	5018598	PrimaryExpression	'\\0'		5018180	1					
ANR	5018599	ReturnStatement	return true ;	119:3:3164:3175	5018180	1	True				
ANR	5018600	Identifier	true		5018180	0					
ANR	5018601	IfStatement	if ( newstr != NULL )		5018180	3					
ANR	5018602	Condition	newstr != NULL	124:5:3216:3229	5018180	0	True				
ANR	5018603	EqualityExpression	newstr != NULL		5018180	0		!=			
ANR	5018604	Identifier	newstr		5018180	0					
ANR	5018605	Identifier	NULL		5018180	1					
ANR	5018606	CompoundStatement		112:21:2954:2954	5018180	1					
ANR	5018607	ExpressionStatement	newstr [ 0 ] = '\\0'	125:2:3236:3252	5018180	0	True				
ANR	5018608	AssignmentExpression	newstr [ 0 ] = '\\0'		5018180	0		=			
ANR	5018609	ArrayIndexing	newstr [ 0 ]		5018180	0					
ANR	5018610	Identifier	newstr		5018180	0					
ANR	5018611	PrimaryExpression	0		5018180	1					
ANR	5018612	PrimaryExpression	'\\0'		5018180	1					
ANR	5018613	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5018180	1					
ANR	5018614	ForInit	i = 0 ;	126:7:3261:3266	5018180	0	True				
ANR	5018615	AssignmentExpression	i = 0		5018180	0		=			
ANR	5018616	Identifier	i		5018180	0					
ANR	5018617	PrimaryExpression	0		5018180	1					
ANR	5018618	Condition	i < argc	126:14:3268:3275	5018180	1	True				
ANR	5018619	RelationalExpression	i < argc		5018180	0		<			
ANR	5018620	Identifier	i		5018180	0					
ANR	5018621	Identifier	argc		5018180	1					
ANR	5018622	PostIncDecOperationExpression	i ++	126:24:3278:3280	5018180	2	True				
ANR	5018623	Identifier	i		5018180	0					
ANR	5018624	IncDec	++		5018180	1					
ANR	5018625	CompoundStatement		114:29:3005:3005	5018180	3					
ANR	5018626	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	127:3:3288:3312	5018180	0	True				
ANR	5018627	CallExpression	"strcat ( newstr , argv [ i ] )"		5018180	0					
ANR	5018628	Callee	strcat		5018180	0					
ANR	5018629	Identifier	strcat		5018180	0					
ANR	5018630	ArgumentList	newstr		5018180	1					
ANR	5018631	Argument	newstr		5018180	0					
ANR	5018632	Identifier	newstr		5018180	0					
ANR	5018633	Argument	argv [ i ]		5018180	1					
ANR	5018634	ArrayIndexing	argv [ i ]		5018180	0					
ANR	5018635	Identifier	argv		5018180	0					
ANR	5018636	Identifier	i		5018180	1					
ANR	5018637	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	128:3:3317:3370	5018180	1	True				
ANR	5018638	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5018180	0					
ANR	5018639	Callee	strcat		5018180	0					
ANR	5018640	Identifier	strcat		5018180	0					
ANR	5018641	ArgumentList	newstr		5018180	1					
ANR	5018642	Argument	newstr		5018180	0					
ANR	5018643	Identifier	newstr		5018180	0					
ANR	5018644	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5018180	1					
ANR	5018645	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5018180	0					
ANR	5018646	Condition	i == 0 || i == argc - 1		5018180	0					
ANR	5018647	OrExpression	i == 0 || i == argc - 1		5018180	0		||			
ANR	5018648	EqualityExpression	i == 0		5018180	0		==			
ANR	5018649	Identifier	i		5018180	0					
ANR	5018650	PrimaryExpression	0		5018180	1					
ANR	5018651	EqualityExpression	i == argc - 1		5018180	1		==			
ANR	5018652	Identifier	i		5018180	0					
ANR	5018653	AdditiveExpression	argc - 1		5018180	1		-			
ANR	5018654	Identifier	argc		5018180	0					
ANR	5018655	PrimaryExpression	1		5018180	1					
ANR	5018656	PrimaryExpression	""" """		5018180	1					
ANR	5018657	PrimaryExpression	""", """		5018180	2					
ANR	5018658	ReturnStatement	return false ;	132:1:3381:3393	5018180	4	True				
ANR	5018659	Identifier	false		5018180	0					
ANR	5018660	ReturnType	static bool		5018180	1					
ANR	5018661	Identifier	replace		5018180	2					
ANR	5018662	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5018180	3					
ANR	5018663	Parameter	int argc	13:20:233:240	5018180	0	True				
ANR	5018664	ParameterType	int		5018180	0					
ANR	5018665	Identifier	argc		5018180	1					
ANR	5018666	Parameter	const char * argv [ ]	13:30:243:260	5018180	1	True				
ANR	5018667	ParameterType	const char * [ ]		5018180	0					
ANR	5018668	Identifier	argv		5018180	1					
ANR	5018669	Parameter	char * newstr	13:50:263:274	5018180	2	True				
ANR	5018670	ParameterType	char *		5018180	0					
ANR	5018671	Identifier	newstr		5018180	1					
ANR	5018672	CFGEntryNode	ENTRY		5018180		True				
ANR	5018673	CFGExitNode	EXIT		5018180		True				
ANR	5018674	Symbol	* ops [ i ] . str		5018180						
ANR	5018675	Symbol	* * ops		5018180						
ANR	5018676	Symbol	* argv		5018180						
ANR	5018677	Symbol	argv		5018180						
ANR	5018678	Symbol	ops [ i ] . str		5018180						
ANR	5018679	Symbol	strlen		5018180						
ANR	5018680	Symbol	ops [ i ] . op		5018180						
ANR	5018681	Symbol	* ops		5018180						
ANR	5018682	Symbol	argc		5018180						
ANR	5018683	Symbol	strcmp		5018180						
ANR	5018684	Symbol	* * j		5018180						
ANR	5018685	Symbol	* * i		5018180						
ANR	5018686	Symbol	NULL		5018180						
ANR	5018687	Symbol	* * ops [ i ] . str		5018180						
ANR	5018688	Symbol	false		5018180						
ANR	5018689	Symbol	i		5018180						
ANR	5018690	Symbol	j		5018180						
ANR	5018691	Symbol	k		5018180						
ANR	5018692	Symbol	newstr		5018180						
ANR	5018693	Symbol	* * * ops		5018180						
ANR	5018694	Symbol	ops		5018180						
ANR	5018695	Symbol	* i		5018180						
ANR	5018696	Symbol	* newstr		5018180						
ANR	5018697	Symbol	* j		5018180						
ANR	5018698	Symbol	* k		5018180						
ANR	5018699	Symbol	w		5018180						
ANR	5018700	Symbol	* * * i		5018180						
ANR	5018701	Symbol	true		5018180						
ANR	5018702	Function	parse	136:0:3414:5009							
ANR	5018703	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5018702	0					
ANR	5018704	CompoundStatement		136:57:3471:5009	5018702	0					
ANR	5018705	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	137:1:3474:3500	5018702	0	True				
ANR	5018706	IdentifierDecl	i		5018702	0					
ANR	5018707	IdentifierDeclType	int		5018702	0					
ANR	5018708	Identifier	i		5018702	1					
ANR	5018709	IdentifierDecl	len = strlen ( data )		5018702	1					
ANR	5018710	IdentifierDeclType	int		5018702	0					
ANR	5018711	Identifier	len		5018702	1					
ANR	5018712	AssignmentExpression	len = strlen ( data )		5018702	2		=			
ANR	5018713	Identifier	len		5018702	0					
ANR	5018714	CallExpression	strlen ( data )		5018702	1					
ANR	5018715	Callee	strlen		5018702	0					
ANR	5018716	Identifier	strlen		5018702	0					
ANR	5018717	ArgumentList	data		5018702	1					
ANR	5018718	Argument	data		5018702	0					
ANR	5018719	Identifier	data		5018702	0					
ANR	5018720	IdentifierDeclStatement	char w0 [ WSZ ] ;	138:1:3503:3515	5018702	1	True				
ANR	5018721	IdentifierDecl	w0 [ WSZ ]		5018702	0					
ANR	5018722	IdentifierDeclType	char [ WSZ ]		5018702	0					
ANR	5018723	Identifier	w0		5018702	1					
ANR	5018724	Identifier	WSZ		5018702	2					
ANR	5018725	IdentifierDeclStatement	char w1 [ WSZ ] ;	139:1:3518:3530	5018702	2	True				
ANR	5018726	IdentifierDecl	w1 [ WSZ ]		5018702	0					
ANR	5018727	IdentifierDeclType	char [ WSZ ]		5018702	0					
ANR	5018728	Identifier	w1		5018702	1					
ANR	5018729	Identifier	WSZ		5018702	2					
ANR	5018730	IdentifierDeclStatement	char w2 [ WSZ ] ;	140:1:3533:3545	5018702	3	True				
ANR	5018731	IdentifierDecl	w2 [ WSZ ]		5018702	0					
ANR	5018732	IdentifierDeclType	char [ WSZ ]		5018702	0					
ANR	5018733	Identifier	w2		5018702	1					
ANR	5018734	Identifier	WSZ		5018702	2					
ANR	5018735	IdentifierDeclStatement	char w3 [ WSZ ] ;	141:1:3548:3560	5018702	4	True				
ANR	5018736	IdentifierDecl	w3 [ WSZ ]		5018702	0					
ANR	5018737	IdentifierDeclType	char [ WSZ ]		5018702	0					
ANR	5018738	Identifier	w3		5018702	1					
ANR	5018739	Identifier	WSZ		5018702	2					
ANR	5018740	IdentifierDeclStatement	char w4 [ WSZ ] ;	142:1:3563:3575	5018702	5	True				
ANR	5018741	IdentifierDecl	w4 [ WSZ ]		5018702	0					
ANR	5018742	IdentifierDeclType	char [ WSZ ]		5018702	0					
ANR	5018743	Identifier	w4		5018702	1					
ANR	5018744	Identifier	WSZ		5018702	2					
ANR	5018745	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	143:1:3578:3600	5018702	6	True				
ANR	5018746	IdentifierDecl	* buf		5018702	0					
ANR	5018747	IdentifierDeclType	char *		5018702	0					
ANR	5018748	Identifier	buf		5018702	1					
ANR	5018749	IdentifierDecl	* ptr		5018702	1					
ANR	5018750	IdentifierDeclType	char *		5018702	0					
ANR	5018751	Identifier	ptr		5018702	1					
ANR	5018752	IdentifierDecl	* optr		5018702	2					
ANR	5018753	IdentifierDeclType	char *		5018702	0					
ANR	5018754	Identifier	optr		5018702	1					
ANR	5018755	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5018702	7					
ANR	5018756	Condition	! ( buf = malloc ( len + 1 ) )	146:5:3639:3663	5018702	0	True				
ANR	5018757	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5018702	0					
ANR	5018758	UnaryOperator	!		5018702	0					
ANR	5018759	AssignmentExpression	buf = malloc ( len + 1 )		5018702	1		=			
ANR	5018760	Identifier	buf		5018702	0					
ANR	5018761	CallExpression	malloc ( len + 1 )		5018702	1					
ANR	5018762	Callee	malloc		5018702	0					
ANR	5018763	Identifier	malloc		5018702	0					
ANR	5018764	ArgumentList	len + 1		5018702	1					
ANR	5018765	Argument	len + 1		5018702	0					
ANR	5018766	AdditiveExpression	len + 1		5018702	0		+			
ANR	5018767	Identifier	len		5018702	0					
ANR	5018768	PrimaryExpression	1		5018702	1					
ANR	5018769	CompoundStatement		11:32:194:194	5018702	1					
ANR	5018770	ReturnStatement	return false ;	147:2:3670:3682	5018702	0	True				
ANR	5018771	Identifier	false		5018702	0					
ANR	5018772	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	149:1:3688:3715	5018702	8	True				
ANR	5018773	CallExpression	"memcpy ( buf , data , len + 1 )"		5018702	0					
ANR	5018774	Callee	memcpy		5018702	0					
ANR	5018775	Identifier	memcpy		5018702	0					
ANR	5018776	ArgumentList	buf		5018702	1					
ANR	5018777	Argument	buf		5018702	0					
ANR	5018778	Identifier	buf		5018702	0					
ANR	5018779	Argument	data		5018702	1					
ANR	5018780	Identifier	data		5018702	0					
ANR	5018781	Argument	len + 1		5018702	2					
ANR	5018782	AdditiveExpression	len + 1		5018702	0		+			
ANR	5018783	Identifier	len		5018702	0					
ANR	5018784	PrimaryExpression	1		5018702	1					
ANR	5018785	ExpressionStatement	r_str_trim ( buf )	151:1:3719:3735	5018702	9	True				
ANR	5018786	CallExpression	r_str_trim ( buf )		5018702	0					
ANR	5018787	Callee	r_str_trim		5018702	0					
ANR	5018788	Identifier	r_str_trim		5018702	0					
ANR	5018789	ArgumentList	buf		5018702	1					
ANR	5018790	Argument	buf		5018702	0					
ANR	5018791	Identifier	buf		5018702	0					
ANR	5018792	IfStatement	if ( * buf )		5018702	10					
ANR	5018793	Condition	* buf	152:5:3742:3745	5018702	0	True				
ANR	5018794	UnaryOperationExpression	* buf		5018702	0					
ANR	5018795	UnaryOperator	*		5018702	0					
ANR	5018796	Identifier	buf		5018702	1					
ANR	5018797	CompoundStatement		17:11:276:276	5018702	1					
ANR	5018798	ExpressionStatement	w0 [ 0 ] = '\\0'	153:2:3752:3764	5018702	0	True				
ANR	5018799	AssignmentExpression	w0 [ 0 ] = '\\0'		5018702	0		=			
ANR	5018800	ArrayIndexing	w0 [ 0 ]		5018702	0					
ANR	5018801	Identifier	w0		5018702	0					
ANR	5018802	PrimaryExpression	0		5018702	1					
ANR	5018803	PrimaryExpression	'\\0'		5018702	1					
ANR	5018804	ExpressionStatement	w1 [ 0 ] = '\\0'	154:2:3768:3780	5018702	1	True				
ANR	5018805	AssignmentExpression	w1 [ 0 ] = '\\0'		5018702	0		=			
ANR	5018806	ArrayIndexing	w1 [ 0 ]		5018702	0					
ANR	5018807	Identifier	w1		5018702	0					
ANR	5018808	PrimaryExpression	0		5018702	1					
ANR	5018809	PrimaryExpression	'\\0'		5018702	1					
ANR	5018810	ExpressionStatement	w2 [ 0 ] = '\\0'	155:2:3784:3796	5018702	2	True				
ANR	5018811	AssignmentExpression	w2 [ 0 ] = '\\0'		5018702	0		=			
ANR	5018812	ArrayIndexing	w2 [ 0 ]		5018702	0					
ANR	5018813	Identifier	w2		5018702	0					
ANR	5018814	PrimaryExpression	0		5018702	1					
ANR	5018815	PrimaryExpression	'\\0'		5018702	1					
ANR	5018816	ExpressionStatement	w3 [ 0 ] = '\\0'	156:2:3800:3812	5018702	3	True				
ANR	5018817	AssignmentExpression	w3 [ 0 ] = '\\0'		5018702	0		=			
ANR	5018818	ArrayIndexing	w3 [ 0 ]		5018702	0					
ANR	5018819	Identifier	w3		5018702	0					
ANR	5018820	PrimaryExpression	0		5018702	1					
ANR	5018821	PrimaryExpression	'\\0'		5018702	1					
ANR	5018822	ExpressionStatement	w4 [ 0 ] = '\\0'	157:2:3816:3828	5018702	4	True				
ANR	5018823	AssignmentExpression	w4 [ 0 ] = '\\0'		5018702	0		=			
ANR	5018824	ArrayIndexing	w4 [ 0 ]		5018702	0					
ANR	5018825	Identifier	w4		5018702	0					
ANR	5018826	PrimaryExpression	0		5018702	1					
ANR	5018827	PrimaryExpression	'\\0'		5018702	1					
ANR	5018828	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	158:2:3832:3855	5018702	5	True				
ANR	5018829	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5018702	0		=			
ANR	5018830	Identifier	ptr		5018702	0					
ANR	5018831	CallExpression	"strchr ( buf , ' ' )"		5018702	1					
ANR	5018832	Callee	strchr		5018702	0					
ANR	5018833	Identifier	strchr		5018702	0					
ANR	5018834	ArgumentList	buf		5018702	1					
ANR	5018835	Argument	buf		5018702	0					
ANR	5018836	Identifier	buf		5018702	0					
ANR	5018837	Argument	' '		5018702	1					
ANR	5018838	PrimaryExpression	' '		5018702	0					
ANR	5018839	IfStatement	if ( ! ptr )		5018702	6					
ANR	5018840	Condition	! ptr	159:6:3863:3866	5018702	0	True				
ANR	5018841	UnaryOperationExpression	! ptr		5018702	0					
ANR	5018842	UnaryOperator	!		5018702	0					
ANR	5018843	Identifier	ptr		5018702	1					
ANR	5018844	CompoundStatement		24:12:397:397	5018702	1					
ANR	5018845	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	160:3:3874:3898	5018702	0	True				
ANR	5018846	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5018702	0		=			
ANR	5018847	Identifier	ptr		5018702	0					
ANR	5018848	CallExpression	"strchr ( buf , '\\t' )"		5018702	1					
ANR	5018849	Callee	strchr		5018702	0					
ANR	5018850	Identifier	strchr		5018702	0					
ANR	5018851	ArgumentList	buf		5018702	1					
ANR	5018852	Argument	buf		5018702	0					
ANR	5018853	Identifier	buf		5018702	0					
ANR	5018854	Argument	'\\t'		5018702	1					
ANR	5018855	PrimaryExpression	'\\t'		5018702	0					
ANR	5018856	IfStatement	if ( ptr )		5018702	7					
ANR	5018857	Condition	ptr	162:6:3910:3912	5018702	0	True				
ANR	5018858	Identifier	ptr		5018702	0					
ANR	5018859	CompoundStatement		27:11:443:443	5018702	1					
ANR	5018860	ExpressionStatement	* ptr = '\\0'	163:3:3920:3931	5018702	0	True				
ANR	5018861	AssignmentExpression	* ptr = '\\0'		5018702	0		=			
ANR	5018862	UnaryOperationExpression	* ptr		5018702	0					
ANR	5018863	UnaryOperator	*		5018702	0					
ANR	5018864	Identifier	ptr		5018702	1					
ANR	5018865	PrimaryExpression	'\\0'		5018702	1					
ANR	5018866	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5018702	1					
ANR	5018867	ForInit	++ ptr ;	164:8:3941:3946	5018702	0	True				
ANR	5018868	UnaryExpression	++ ptr		5018702	0					
ANR	5018869	IncDec	++		5018702	0					
ANR	5018870	Identifier	ptr		5018702	1					
ANR	5018871	Condition	* ptr == ' '	164:15:3948:3958	5018702	1	True				
ANR	5018872	EqualityExpression	* ptr == ' '		5018702	0		==			
ANR	5018873	UnaryOperationExpression	* ptr		5018702	0					
ANR	5018874	UnaryOperator	*		5018702	0					
ANR	5018875	Identifier	ptr		5018702	1					
ANR	5018876	PrimaryExpression	' '		5018702	1					
ANR	5018877	PostIncDecOperationExpression	ptr ++	164:28:3961:3965	5018702	2	True				
ANR	5018878	Identifier	ptr		5018702	0					
ANR	5018879	IncDec	++		5018702	1					
ANR	5018880	CompoundStatement		29:35:496:496	5018702	3					
ANR	5018881	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	167:3:4004:4030	5018702	2	True				
ANR	5018882	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5018702	0					
ANR	5018883	Callee	strncpy		5018702	0					
ANR	5018884	Identifier	strncpy		5018702	0					
ANR	5018885	ArgumentList	w0		5018702	1					
ANR	5018886	Argument	w0		5018702	0					
ANR	5018887	Identifier	w0		5018702	0					
ANR	5018888	Argument	buf		5018702	1					
ANR	5018889	Identifier	buf		5018702	0					
ANR	5018890	Argument	WSZ - 1		5018702	2					
ANR	5018891	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5018892	Identifier	WSZ		5018702	0					
ANR	5018893	PrimaryExpression	1		5018702	1					
ANR	5018894	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	168:3:4035:4061	5018702	3	True				
ANR	5018895	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5018702	0					
ANR	5018896	Callee	strncpy		5018702	0					
ANR	5018897	Identifier	strncpy		5018702	0					
ANR	5018898	ArgumentList	w1		5018702	1					
ANR	5018899	Argument	w1		5018702	0					
ANR	5018900	Identifier	w1		5018702	0					
ANR	5018901	Argument	ptr		5018702	1					
ANR	5018902	Identifier	ptr		5018702	0					
ANR	5018903	Argument	WSZ - 1		5018702	2					
ANR	5018904	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5018905	Identifier	WSZ		5018702	0					
ANR	5018906	PrimaryExpression	1		5018702	1					
ANR	5018907	ExpressionStatement	optr = ptr	170:3:4067:4077	5018702	4	True				
ANR	5018908	AssignmentExpression	optr = ptr		5018702	0		=			
ANR	5018909	Identifier	optr		5018702	0					
ANR	5018910	Identifier	ptr		5018702	1					
ANR	5018911	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	171:3:4082:4105	5018702	5	True				
ANR	5018912	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5018702	0		=			
ANR	5018913	Identifier	ptr		5018702	0					
ANR	5018914	CallExpression	"strchr ( ptr , ',' )"		5018702	1					
ANR	5018915	Callee	strchr		5018702	0					
ANR	5018916	Identifier	strchr		5018702	0					
ANR	5018917	ArgumentList	ptr		5018702	1					
ANR	5018918	Argument	ptr		5018702	0					
ANR	5018919	Identifier	ptr		5018702	0					
ANR	5018920	Argument	"','"		5018702	1					
ANR	5018921	PrimaryExpression	"','"		5018702	0					
ANR	5018922	IfStatement	if ( ptr )		5018702	6					
ANR	5018923	Condition	ptr	172:7:4114:4116	5018702	0	True				
ANR	5018924	Identifier	ptr		5018702	0					
ANR	5018925	CompoundStatement		37:12:647:647	5018702	1					
ANR	5018926	ExpressionStatement	* ptr = '\\0'	173:4:4125:4136	5018702	0	True				
ANR	5018927	AssignmentExpression	* ptr = '\\0'		5018702	0		=			
ANR	5018928	UnaryOperationExpression	* ptr		5018702	0					
ANR	5018929	UnaryOperator	*		5018702	0					
ANR	5018930	Identifier	ptr		5018702	1					
ANR	5018931	PrimaryExpression	'\\0'		5018702	1					
ANR	5018932	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5018702	1					
ANR	5018933	ForInit	++ ptr ;	174:9:4147:4152	5018702	0	True				
ANR	5018934	UnaryExpression	++ ptr		5018702	0					
ANR	5018935	IncDec	++		5018702	0					
ANR	5018936	Identifier	ptr		5018702	1					
ANR	5018937	Condition	* ptr == ' '	174:16:4154:4164	5018702	1	True				
ANR	5018938	EqualityExpression	* ptr == ' '		5018702	0		==			
ANR	5018939	UnaryOperationExpression	* ptr		5018702	0					
ANR	5018940	UnaryOperator	*		5018702	0					
ANR	5018941	Identifier	ptr		5018702	1					
ANR	5018942	PrimaryExpression	' '		5018702	1					
ANR	5018943	PostIncDecOperationExpression	ptr ++	174:29:4167:4171	5018702	2	True				
ANR	5018944	Identifier	ptr		5018702	0					
ANR	5018945	IncDec	++		5018702	1					
ANR	5018946	CompoundStatement		39:36:702:702	5018702	3					
ANR	5018947	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	177:4:4213:4240	5018702	2	True				
ANR	5018948	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5018702	0					
ANR	5018949	Callee	strncpy		5018702	0					
ANR	5018950	Identifier	strncpy		5018702	0					
ANR	5018951	ArgumentList	w1		5018702	1					
ANR	5018952	Argument	w1		5018702	0					
ANR	5018953	Identifier	w1		5018702	0					
ANR	5018954	Argument	optr		5018702	1					
ANR	5018955	Identifier	optr		5018702	0					
ANR	5018956	Argument	WSZ - 1		5018702	2					
ANR	5018957	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5018958	Identifier	WSZ		5018702	0					
ANR	5018959	PrimaryExpression	1		5018702	1					
ANR	5018960	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	178:4:4246:4272	5018702	3	True				
ANR	5018961	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5018702	0					
ANR	5018962	Callee	strncpy		5018702	0					
ANR	5018963	Identifier	strncpy		5018702	0					
ANR	5018964	ArgumentList	w2		5018702	1					
ANR	5018965	Argument	w2		5018702	0					
ANR	5018966	Identifier	w2		5018702	0					
ANR	5018967	Argument	ptr		5018702	1					
ANR	5018968	Identifier	ptr		5018702	0					
ANR	5018969	Argument	WSZ - 1		5018702	2					
ANR	5018970	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5018971	Identifier	WSZ		5018702	0					
ANR	5018972	PrimaryExpression	1		5018702	1					
ANR	5018973	ExpressionStatement	optr = ptr	179:4:4278:4288	5018702	4	True				
ANR	5018974	AssignmentExpression	optr = ptr		5018702	0		=			
ANR	5018975	Identifier	optr		5018702	0					
ANR	5018976	Identifier	ptr		5018702	1					
ANR	5018977	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	180:4:4294:4317	5018702	5	True				
ANR	5018978	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5018702	0		=			
ANR	5018979	Identifier	ptr		5018702	0					
ANR	5018980	CallExpression	"strchr ( ptr , ',' )"		5018702	1					
ANR	5018981	Callee	strchr		5018702	0					
ANR	5018982	Identifier	strchr		5018702	0					
ANR	5018983	ArgumentList	ptr		5018702	1					
ANR	5018984	Argument	ptr		5018702	0					
ANR	5018985	Identifier	ptr		5018702	0					
ANR	5018986	Argument	"','"		5018702	1					
ANR	5018987	PrimaryExpression	"','"		5018702	0					
ANR	5018988	IfStatement	if ( ptr )		5018702	6					
ANR	5018989	Condition	ptr	181:8:4327:4329	5018702	0	True				
ANR	5018990	Identifier	ptr		5018702	0					
ANR	5018991	CompoundStatement		46:13:860:860	5018702	1					
ANR	5018992	ExpressionStatement	* ptr = '\\0'	182:5:4339:4350	5018702	0	True				
ANR	5018993	AssignmentExpression	* ptr = '\\0'		5018702	0		=			
ANR	5018994	UnaryOperationExpression	* ptr		5018702	0					
ANR	5018995	UnaryOperator	*		5018702	0					
ANR	5018996	Identifier	ptr		5018702	1					
ANR	5018997	PrimaryExpression	'\\0'		5018702	1					
ANR	5018998	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5018702	1					
ANR	5018999	ForInit	++ ptr ;	183:10:4362:4367	5018702	0	True				
ANR	5019000	UnaryExpression	++ ptr		5018702	0					
ANR	5019001	IncDec	++		5018702	0					
ANR	5019002	Identifier	ptr		5018702	1					
ANR	5019003	Condition	* ptr == ' '	183:17:4369:4379	5018702	1	True				
ANR	5019004	EqualityExpression	* ptr == ' '		5018702	0		==			
ANR	5019005	UnaryOperationExpression	* ptr		5018702	0					
ANR	5019006	UnaryOperator	*		5018702	0					
ANR	5019007	Identifier	ptr		5018702	1					
ANR	5019008	PrimaryExpression	' '		5018702	1					
ANR	5019009	PostIncDecOperationExpression	ptr ++	183:30:4382:4386	5018702	2	True				
ANR	5019010	Identifier	ptr		5018702	0					
ANR	5019011	IncDec	++		5018702	1					
ANR	5019012	CompoundStatement		48:37:917:917	5018702	3					
ANR	5019013	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	186:5:4431:4458	5018702	2	True				
ANR	5019014	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5018702	0					
ANR	5019015	Callee	strncpy		5018702	0					
ANR	5019016	Identifier	strncpy		5018702	0					
ANR	5019017	ArgumentList	w2		5018702	1					
ANR	5019018	Argument	w2		5018702	0					
ANR	5019019	Identifier	w2		5018702	0					
ANR	5019020	Argument	optr		5018702	1					
ANR	5019021	Identifier	optr		5018702	0					
ANR	5019022	Argument	WSZ - 1		5018702	2					
ANR	5019023	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5019024	Identifier	WSZ		5018702	0					
ANR	5019025	PrimaryExpression	1		5018702	1					
ANR	5019026	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	187:5:4465:4491	5018702	3	True				
ANR	5019027	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5018702	0					
ANR	5019028	Callee	strncpy		5018702	0					
ANR	5019029	Identifier	strncpy		5018702	0					
ANR	5019030	ArgumentList	w3		5018702	1					
ANR	5019031	Argument	w3		5018702	0					
ANR	5019032	Identifier	w3		5018702	0					
ANR	5019033	Argument	ptr		5018702	1					
ANR	5019034	Identifier	ptr		5018702	0					
ANR	5019035	Argument	WSZ - 1		5018702	2					
ANR	5019036	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5019037	Identifier	WSZ		5018702	0					
ANR	5019038	PrimaryExpression	1		5018702	1					
ANR	5019039	ExpressionStatement	optr = ptr	188:5:4498:4508	5018702	4	True				
ANR	5019040	AssignmentExpression	optr = ptr		5018702	0		=			
ANR	5019041	Identifier	optr		5018702	0					
ANR	5019042	Identifier	ptr		5018702	1					
ANR	5019043	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	190:5:4529:4552	5018702	5	True				
ANR	5019044	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5018702	0		=			
ANR	5019045	Identifier	ptr		5018702	0					
ANR	5019046	CallExpression	"strchr ( ptr , ',' )"		5018702	1					
ANR	5019047	Callee	strchr		5018702	0					
ANR	5019048	Identifier	strchr		5018702	0					
ANR	5019049	ArgumentList	ptr		5018702	1					
ANR	5019050	Argument	ptr		5018702	0					
ANR	5019051	Identifier	ptr		5018702	0					
ANR	5019052	Argument	"','"		5018702	1					
ANR	5019053	PrimaryExpression	"','"		5018702	0					
ANR	5019054	IfStatement	if ( ptr )		5018702	6					
ANR	5019055	Condition	ptr	191:9:4563:4565	5018702	0	True				
ANR	5019056	Identifier	ptr		5018702	0					
ANR	5019057	CompoundStatement		56:14:1096:1096	5018702	1					
ANR	5019058	ExpressionStatement	* ptr = '\\0'	192:6:4576:4587	5018702	0	True				
ANR	5019059	AssignmentExpression	* ptr = '\\0'		5018702	0		=			
ANR	5019060	UnaryOperationExpression	* ptr		5018702	0					
ANR	5019061	UnaryOperator	*		5018702	0					
ANR	5019062	Identifier	ptr		5018702	1					
ANR	5019063	PrimaryExpression	'\\0'		5018702	1					
ANR	5019064	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5018702	1					
ANR	5019065	ForInit	++ ptr ;	193:11:4600:4605	5018702	0	True				
ANR	5019066	UnaryExpression	++ ptr		5018702	0					
ANR	5019067	IncDec	++		5018702	0					
ANR	5019068	Identifier	ptr		5018702	1					
ANR	5019069	Condition	* ptr == ' '	193:18:4607:4617	5018702	1	True				
ANR	5019070	EqualityExpression	* ptr == ' '		5018702	0		==			
ANR	5019071	UnaryOperationExpression	* ptr		5018702	0					
ANR	5019072	UnaryOperator	*		5018702	0					
ANR	5019073	Identifier	ptr		5018702	1					
ANR	5019074	PrimaryExpression	' '		5018702	1					
ANR	5019075	PostIncDecOperationExpression	ptr ++	193:31:4620:4624	5018702	2	True				
ANR	5019076	Identifier	ptr		5018702	0					
ANR	5019077	IncDec	++		5018702	1					
ANR	5019078	CompoundStatement		58:38:1155:1155	5018702	3					
ANR	5019079	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	196:6:4672:4699	5018702	2	True				
ANR	5019080	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5018702	0					
ANR	5019081	Callee	strncpy		5018702	0					
ANR	5019082	Identifier	strncpy		5018702	0					
ANR	5019083	ArgumentList	w3		5018702	1					
ANR	5019084	Argument	w3		5018702	0					
ANR	5019085	Identifier	w3		5018702	0					
ANR	5019086	Argument	optr		5018702	1					
ANR	5019087	Identifier	optr		5018702	0					
ANR	5019088	Argument	WSZ - 1		5018702	2					
ANR	5019089	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5019090	Identifier	WSZ		5018702	0					
ANR	5019091	PrimaryExpression	1		5018702	1					
ANR	5019092	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	197:6:4707:4733	5018702	3	True				
ANR	5019093	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5018702	0					
ANR	5019094	Callee	strncpy		5018702	0					
ANR	5019095	Identifier	strncpy		5018702	0					
ANR	5019096	ArgumentList	w4		5018702	1					
ANR	5019097	Argument	w4		5018702	0					
ANR	5019098	Identifier	w4		5018702	0					
ANR	5019099	Argument	ptr		5018702	1					
ANR	5019100	Identifier	ptr		5018702	0					
ANR	5019101	Argument	WSZ - 1		5018702	2					
ANR	5019102	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5019103	Identifier	WSZ		5018702	0					
ANR	5019104	PrimaryExpression	1		5018702	1					
ANR	5019105	ElseStatement	else		5018702	0					
ANR	5019106	CompoundStatement		66:9:1290:1290	5018702	0					
ANR	5019107	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	202:3:4767:4793	5018702	0	True				
ANR	5019108	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5018702	0					
ANR	5019109	Callee	strncpy		5018702	0					
ANR	5019110	Identifier	strncpy		5018702	0					
ANR	5019111	ArgumentList	w0		5018702	1					
ANR	5019112	Argument	w0		5018702	0					
ANR	5019113	Identifier	w0		5018702	0					
ANR	5019114	Argument	buf		5018702	1					
ANR	5019115	Identifier	buf		5018702	0					
ANR	5019116	Argument	WSZ - 1		5018702	2					
ANR	5019117	AdditiveExpression	WSZ - 1		5018702	0		-			
ANR	5019118	Identifier	WSZ		5018702	0					
ANR	5019119	PrimaryExpression	1		5018702	1					
ANR	5019120	CompoundStatement		71:3:1380:1390	5018702	8					
ANR	5019121	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	205:3:4806:4847	5018702	0	True				
ANR	5019122	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5018702	0					
ANR	5019123	IdentifierDeclType	const char * [ ]		5018702	0					
ANR	5019124	Identifier	wa		5018702	1					
ANR	5019125	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5018702	2		=			
ANR	5019126	Identifier	wa		5018702	0					
ANR	5019127	InitializerList	w0		5018702	1					
ANR	5019128	Identifier	w0		5018702	0					
ANR	5019129	Identifier	w1		5018702	1					
ANR	5019130	Identifier	w2		5018702	2					
ANR	5019131	Identifier	w3		5018702	3					
ANR	5019132	Identifier	w4		5018702	4					
ANR	5019133	IdentifierDeclStatement	int nw = 0 ;	206:3:4852:4862	5018702	1	True				
ANR	5019134	IdentifierDecl	nw = 0		5018702	0					
ANR	5019135	IdentifierDeclType	int		5018702	0					
ANR	5019136	Identifier	nw		5018702	1					
ANR	5019137	AssignmentExpression	nw = 0		5018702	2		=			
ANR	5019138	Identifier	nw		5018702	0					
ANR	5019139	PrimaryExpression	0		5018702	1					
ANR	5019140	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5018702	2					
ANR	5019141	ForInit	i = 0 ;	207:8:4872:4877	5018702	0	True				
ANR	5019142	AssignmentExpression	i = 0		5018702	0		=			
ANR	5019143	Identifier	i		5018702	0					
ANR	5019144	PrimaryExpression	0		5018702	1					
ANR	5019145	Condition	i < 5	207:15:4879:4883	5018702	1	True				
ANR	5019146	RelationalExpression	i < 5		5018702	0		<			
ANR	5019147	Identifier	i		5018702	0					
ANR	5019148	PrimaryExpression	5		5018702	1					
ANR	5019149	PostIncDecOperationExpression	i ++	207:22:4886:4888	5018702	2	True				
ANR	5019150	Identifier	i		5018702	0					
ANR	5019151	IncDec	++		5018702	1					
ANR	5019152	CompoundStatement		72:27:1419:1419	5018702	3					
ANR	5019153	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5018702	0					
ANR	5019154	Condition	wa [ i ] [ 0 ] != '\\0'	208:8:4901:4916	5018702	0	True				
ANR	5019155	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5018702	0		!=			
ANR	5019156	ArrayIndexing	wa [ i ] [ 0 ]		5018702	0					
ANR	5019157	ArrayIndexing	wa [ i ]		5018702	0					
ANR	5019158	Identifier	wa		5018702	0					
ANR	5019159	Identifier	i		5018702	1					
ANR	5019160	PrimaryExpression	0		5018702	1					
ANR	5019161	PrimaryExpression	'\\0'		5018702	1					
ANR	5019162	CompoundStatement		73:26:1447:1447	5018702	1					
ANR	5019163	ExpressionStatement	nw ++	209:5:4926:4930	5018702	0	True				
ANR	5019164	PostIncDecOperationExpression	nw ++		5018702	0					
ANR	5019165	Identifier	nw		5018702	0					
ANR	5019166	IncDec	++		5018702	1					
ANR	5019167	ExpressionStatement	"( void ) replace ( nw , wa , str )"	212:3:4946:4973	5018702	3	True				
ANR	5019168	CastExpression	"( void ) replace ( nw , wa , str )"		5018702	0					
ANR	5019169	CastTarget	void		5018702	0					
ANR	5019170	CallExpression	"replace ( nw , wa , str )"		5018702	1					
ANR	5019171	Callee	replace		5018702	0					
ANR	5019172	Identifier	replace		5018702	0					
ANR	5019173	ArgumentList	nw		5018702	1					
ANR	5019174	Argument	nw		5018702	0					
ANR	5019175	Identifier	nw		5018702	0					
ANR	5019176	Argument	wa		5018702	1					
ANR	5019177	Identifier	wa		5018702	0					
ANR	5019178	Argument	str		5018702	2					
ANR	5019179	Identifier	str		5018702	0					
ANR	5019180	ExpressionStatement	free ( buf )	215:1:4983:4993	5018702	11	True				
ANR	5019181	CallExpression	free ( buf )		5018702	0					
ANR	5019182	Callee	free		5018702	0					
ANR	5019183	Identifier	free		5018702	0					
ANR	5019184	ArgumentList	buf		5018702	1					
ANR	5019185	Argument	buf		5018702	0					
ANR	5019186	Identifier	buf		5018702	0					
ANR	5019187	ReturnStatement	return true ;	216:1:4996:5007	5018702	12	True				
ANR	5019188	Identifier	true		5018702	0					
ANR	5019189	ReturnType	static int		5018702	1					
ANR	5019190	Identifier	parse		5018702	2					
ANR	5019191	ParameterList	"RParse * p , const char * data , char * str"		5018702	3					
ANR	5019192	Parameter	RParse * p	136:17:3431:3439	5018702	0	True				
ANR	5019193	ParameterType	RParse *		5018702	0					
ANR	5019194	Identifier	p		5018702	1					
ANR	5019195	Parameter	const char * data	136:28:3442:3457	5018702	1	True				
ANR	5019196	ParameterType	const char *		5018702	0					
ANR	5019197	Identifier	data		5018702	1					
ANR	5019198	Parameter	char * str	136:46:3460:3468	5018702	2	True				
ANR	5019199	ParameterType	char *		5018702	0					
ANR	5019200	Identifier	str		5018702	1					
ANR	5019201	CFGEntryNode	ENTRY		5018702		True				
ANR	5019202	CFGExitNode	EXIT		5018702		True				
ANR	5019203	Symbol	* w4		5018702						
ANR	5019204	Symbol	* w3		5018702						
ANR	5019205	Symbol	* w2		5018702						
ANR	5019206	Symbol	* w1		5018702						
ANR	5019207	Symbol	data		5018702						
ANR	5019208	Symbol	strchr		5018702						
ANR	5019209	Symbol	nw		5018702						
ANR	5019210	Symbol	wa		5018702						
ANR	5019211	Symbol	strlen		5018702						
ANR	5019212	Symbol	* wa		5018702						
ANR	5019213	Symbol	len		5018702						
ANR	5019214	Symbol	* ptr		5018702						
ANR	5019215	Symbol	w0		5018702						
ANR	5019216	Symbol	w1		5018702						
ANR	5019217	Symbol	w2		5018702						
ANR	5019218	Symbol	w3		5018702						
ANR	5019219	Symbol	* w0		5018702						
ANR	5019220	Symbol	w4		5018702						
ANR	5019221	Symbol	malloc		5018702						
ANR	5019222	Symbol	* buf		5018702						
ANR	5019223	Symbol	* * i		5018702						
ANR	5019224	Symbol	false		5018702						
ANR	5019225	Symbol	i		5018702						
ANR	5019226	Symbol	optr		5018702						
ANR	5019227	Symbol	ptr		5018702						
ANR	5019228	Symbol	p		5018702						
ANR	5019229	Symbol	str		5018702						
ANR	5019230	Symbol	buf		5018702						
ANR	5019231	Symbol	* i		5018702						
ANR	5019232	Symbol	* * wa		5018702						
ANR	5019233	Symbol	true		5018702						
ANR	5019234	Symbol	WSZ		5018702						
ANR	5019235	DeclStmt									
ANR	5019236	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_avr_pseudo
ANR	5019237	DeclStmt									
ANR	5019238	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
