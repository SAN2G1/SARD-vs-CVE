command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6511786	File	data/converged/CVE-2019-16718~_radare2/windows_message.c								
ANR	6511787	DeclStmt									
ANR	6511788	Decl							char	char * [ ]	msg_types_arr
ANR	6511789	Function	__free_window	249:0:6381:6471							
ANR	6511790	FunctionDef	__free_window (void * ptr)		6511789	0					
ANR	6511791	CompoundStatement		249:36:6417:6471	6511789	0					
ANR	6511792	IdentifierDeclStatement	window * win = ptr ;	250:1:6420:6437	6511789	0	True				
ANR	6511793	IdentifierDecl	* win = ptr		6511789	0					
ANR	6511794	IdentifierDeclType	window *		6511789	0					
ANR	6511795	Identifier	win		6511789	1					
ANR	6511796	AssignmentExpression	* win = ptr		6511789	2		=			
ANR	6511797	Identifier	ptr		6511789	0					
ANR	6511798	Identifier	ptr		6511789	1					
ANR	6511799	ExpressionStatement	free ( win -> name )	251:1:6440:6456	6511789	1	True				
ANR	6511800	CallExpression	free ( win -> name )		6511789	0					
ANR	6511801	Callee	free		6511789	0					
ANR	6511802	Identifier	free		6511789	0					
ANR	6511803	ArgumentList	win -> name		6511789	1					
ANR	6511804	Argument	win -> name		6511789	0					
ANR	6511805	PtrMemberAccess	win -> name		6511789	0					
ANR	6511806	Identifier	win		6511789	0					
ANR	6511807	Identifier	name		6511789	1					
ANR	6511808	ExpressionStatement	free ( win )	252:1:6459:6469	6511789	2	True				
ANR	6511809	CallExpression	free ( win )		6511789	0					
ANR	6511810	Callee	free		6511789	0					
ANR	6511811	Identifier	free		6511789	0					
ANR	6511812	ArgumentList	win		6511789	1					
ANR	6511813	Argument	win		6511789	0					
ANR	6511814	Identifier	win		6511789	0					
ANR	6511815	ReturnType	RListFree		6511789	1					
ANR	6511816	Identifier	__free_window		6511789	2					
ANR	6511817	ParameterList	void * ptr		6511789	3					
ANR	6511818	Parameter	void * ptr	249:25:6406:6414	6511789	0	True				
ANR	6511819	ParameterType	void *		6511789	0					
ANR	6511820	Identifier	ptr		6511789	1					
ANR	6511821	CFGEntryNode	ENTRY		6511789		True				
ANR	6511822	CFGExitNode	EXIT		6511789		True				
ANR	6511823	Symbol	win -> name		6511789						
ANR	6511824	Symbol	* win		6511789						
ANR	6511825	Symbol	win		6511789						
ANR	6511826	Symbol	ptr		6511789						
ANR	6511827	Function	__enum_childs	255:0:6474:7107							
ANR	6511828	FunctionDef	"__enum_childs (_In_ HWND hwnd , _In_ LPARAM lParam)"		6511827	0					
ANR	6511829	CompoundStatement		258:2:6551:7107	6511827	0					
ANR	6511830	IdentifierDeclStatement	RList * windows = lParam ;	259:1:6554:6577	6511827	0	True				
ANR	6511831	IdentifierDecl	* windows = lParam		6511827	0					
ANR	6511832	IdentifierDeclType	RList *		6511827	0					
ANR	6511833	Identifier	windows		6511827	1					
ANR	6511834	AssignmentExpression	* windows = lParam		6511827	2		=			
ANR	6511835	Identifier	lParam		6511827	0					
ANR	6511836	Identifier	lParam		6511827	1					
ANR	6511837	IdentifierDeclStatement	window * win = R_NEW0 ( window ) ;	260:1:6580:6609	6511827	1	True				
ANR	6511838	IdentifierDecl	* win = R_NEW0 ( window )		6511827	0					
ANR	6511839	IdentifierDeclType	window *		6511827	0					
ANR	6511840	Identifier	win		6511827	1					
ANR	6511841	AssignmentExpression	* win = R_NEW0 ( window )		6511827	2		=			
ANR	6511842	Identifier	win		6511827	0					
ANR	6511843	CallExpression	R_NEW0 ( window )		6511827	1					
ANR	6511844	Callee	R_NEW0		6511827	0					
ANR	6511845	Identifier	R_NEW0		6511827	0					
ANR	6511846	ArgumentList	window		6511827	1					
ANR	6511847	Argument	window		6511827	0					
ANR	6511848	Identifier	window		6511827	0					
ANR	6511849	IfStatement	if ( ! win )		6511827	2					
ANR	6511850	Condition	! win	261:5:6616:6619	6511827	0	True				
ANR	6511851	UnaryOperationExpression	! win		6511827	0					
ANR	6511852	UnaryOperator	!		6511827	0					
ANR	6511853	Identifier	win		6511827	1					
ANR	6511854	CompoundStatement		4:11:70:70	6511827	1					
ANR	6511855	ExpressionStatement	r_list_free ( windows )	262:2:6626:6647	6511827	0	True				
ANR	6511856	CallExpression	r_list_free ( windows )		6511827	0					
ANR	6511857	Callee	r_list_free		6511827	0					
ANR	6511858	Identifier	r_list_free		6511827	0					
ANR	6511859	ArgumentList	windows		6511827	1					
ANR	6511860	Argument	windows		6511827	0					
ANR	6511861	Identifier	windows		6511827	0					
ANR	6511862	ReturnStatement	return false ;	263:2:6651:6663	6511827	1	True				
ANR	6511863	Identifier	false		6511827	0					
ANR	6511864	ExpressionStatement	"win -> tid = GetWindowThreadProcessId ( hwnd , NULL )"	265:1:6669:6717	6511827	3	True				
ANR	6511865	AssignmentExpression	"win -> tid = GetWindowThreadProcessId ( hwnd , NULL )"		6511827	0		=			
ANR	6511866	PtrMemberAccess	win -> tid		6511827	0					
ANR	6511867	Identifier	win		6511827	0					
ANR	6511868	Identifier	tid		6511827	1					
ANR	6511869	CallExpression	"GetWindowThreadProcessId ( hwnd , NULL )"		6511827	1					
ANR	6511870	Callee	GetWindowThreadProcessId		6511827	0					
ANR	6511871	Identifier	GetWindowThreadProcessId		6511827	0					
ANR	6511872	ArgumentList	hwnd		6511827	1					
ANR	6511873	Argument	hwnd		6511827	0					
ANR	6511874	Identifier	hwnd		6511827	0					
ANR	6511875	Argument	NULL		6511827	1					
ANR	6511876	Identifier	NULL		6511827	0					
ANR	6511877	ExpressionStatement	win -> h = hwnd	266:1:6720:6733	6511827	4	True				
ANR	6511878	AssignmentExpression	win -> h = hwnd		6511827	0		=			
ANR	6511879	PtrMemberAccess	win -> h		6511827	0					
ANR	6511880	Identifier	win		6511827	0					
ANR	6511881	Identifier	h		6511827	1					
ANR	6511882	Identifier	hwnd		6511827	1					
ANR	6511883	IdentifierDeclStatement	const size_t sz = MAX_CLASS_NAME * sizeof ( TCHAR ) ;	267:1:6736:6785	6511827	5	True				
ANR	6511884	IdentifierDecl	sz = MAX_CLASS_NAME * sizeof ( TCHAR )		6511827	0					
ANR	6511885	IdentifierDeclType	const size_t		6511827	0					
ANR	6511886	Identifier	sz		6511827	1					
ANR	6511887	AssignmentExpression	sz = MAX_CLASS_NAME * sizeof ( TCHAR )		6511827	2		=			
ANR	6511888	Identifier	sz		6511827	0					
ANR	6511889	MultiplicativeExpression	MAX_CLASS_NAME * sizeof ( TCHAR )		6511827	1		*			
ANR	6511890	Identifier	MAX_CLASS_NAME		6511827	0					
ANR	6511891	SizeofExpression	sizeof ( TCHAR )		6511827	1					
ANR	6511892	Sizeof	sizeof		6511827	0					
ANR	6511893	SizeofOperand	TCHAR		6511827	1					
ANR	6511894	IdentifierDeclStatement	char * tmp = malloc ( sz ) ;	268:1:6788:6811	6511827	6	True				
ANR	6511895	IdentifierDecl	* tmp = malloc ( sz )		6511827	0					
ANR	6511896	IdentifierDeclType	char *		6511827	0					
ANR	6511897	Identifier	tmp		6511827	1					
ANR	6511898	AssignmentExpression	* tmp = malloc ( sz )		6511827	2		=			
ANR	6511899	Identifier	tmp		6511827	0					
ANR	6511900	CallExpression	malloc ( sz )		6511827	1					
ANR	6511901	Callee	malloc		6511827	0					
ANR	6511902	Identifier	malloc		6511827	0					
ANR	6511903	ArgumentList	sz		6511827	1					
ANR	6511904	Argument	sz		6511827	0					
ANR	6511905	Identifier	sz		6511827	0					
ANR	6511906	IfStatement	if ( ! tmp )		6511827	7					
ANR	6511907	Condition	! tmp	269:5:6818:6821	6511827	0	True				
ANR	6511908	UnaryOperationExpression	! tmp		6511827	0					
ANR	6511909	UnaryOperator	!		6511827	0					
ANR	6511910	Identifier	tmp		6511827	1					
ANR	6511911	CompoundStatement		12:11:272:272	6511827	1					
ANR	6511912	ExpressionStatement	r_list_free ( windows )	270:2:6828:6849	6511827	0	True				
ANR	6511913	CallExpression	r_list_free ( windows )		6511827	0					
ANR	6511914	Callee	r_list_free		6511827	0					
ANR	6511915	Identifier	r_list_free		6511827	0					
ANR	6511916	ArgumentList	windows		6511827	1					
ANR	6511917	Argument	windows		6511827	0					
ANR	6511918	Identifier	windows		6511827	0					
ANR	6511919	ReturnStatement	return false ;	271:2:6853:6865	6511827	1	True				
ANR	6511920	Identifier	false		6511827	0					
ANR	6511921	ExpressionStatement	"GetClassNameW ( hwnd , tmp , MAX_CLASS_NAME )"	273:1:6871:6912	6511827	8	True				
ANR	6511922	CallExpression	"GetClassNameW ( hwnd , tmp , MAX_CLASS_NAME )"		6511827	0					
ANR	6511923	Callee	GetClassNameW		6511827	0					
ANR	6511924	Identifier	GetClassNameW		6511827	0					
ANR	6511925	ArgumentList	hwnd		6511827	1					
ANR	6511926	Argument	hwnd		6511827	0					
ANR	6511927	Identifier	hwnd		6511827	0					
ANR	6511928	Argument	tmp		6511827	1					
ANR	6511929	Identifier	tmp		6511827	0					
ANR	6511930	Argument	MAX_CLASS_NAME		6511827	2					
ANR	6511931	Identifier	MAX_CLASS_NAME		6511827	0					
ANR	6511932	ExpressionStatement	"win -> proc = GetClassLongPtrW ( hwnd , GCLP_WNDPROC )"	274:1:6915:6964	6511827	9	True				
ANR	6511933	AssignmentExpression	"win -> proc = GetClassLongPtrW ( hwnd , GCLP_WNDPROC )"		6511827	0		=			
ANR	6511934	PtrMemberAccess	win -> proc		6511827	0					
ANR	6511935	Identifier	win		6511827	0					
ANR	6511936	Identifier	proc		6511827	1					
ANR	6511937	CallExpression	"GetClassLongPtrW ( hwnd , GCLP_WNDPROC )"		6511827	1					
ANR	6511938	Callee	GetClassLongPtrW		6511827	0					
ANR	6511939	Identifier	GetClassLongPtrW		6511827	0					
ANR	6511940	ArgumentList	hwnd		6511827	1					
ANR	6511941	Argument	hwnd		6511827	0					
ANR	6511942	Identifier	hwnd		6511827	0					
ANR	6511943	Argument	GCLP_WNDPROC		6511827	1					
ANR	6511944	Identifier	GCLP_WNDPROC		6511827	0					
ANR	6511945	ExpressionStatement	win -> name = r_utf16_to_utf8 ( tmp )	275:1:6967:7000	6511827	10	True				
ANR	6511946	AssignmentExpression	win -> name = r_utf16_to_utf8 ( tmp )		6511827	0		=			
ANR	6511947	PtrMemberAccess	win -> name		6511827	0					
ANR	6511948	Identifier	win		6511827	0					
ANR	6511949	Identifier	name		6511827	1					
ANR	6511950	CallExpression	r_utf16_to_utf8 ( tmp )		6511827	1					
ANR	6511951	Callee	r_utf16_to_utf8		6511827	0					
ANR	6511952	Identifier	r_utf16_to_utf8		6511827	0					
ANR	6511953	ArgumentList	tmp		6511827	1					
ANR	6511954	Argument	tmp		6511827	0					
ANR	6511955	Identifier	tmp		6511827	0					
ANR	6511956	IfStatement	if ( ! win -> name )		6511827	11					
ANR	6511957	Condition	! win -> name	276:5:7007:7016	6511827	0	True				
ANR	6511958	UnaryOperationExpression	! win -> name		6511827	0					
ANR	6511959	UnaryOperator	!		6511827	0					
ANR	6511960	PtrMemberAccess	win -> name		6511827	1					
ANR	6511961	Identifier	win		6511827	0					
ANR	6511962	Identifier	name		6511827	1					
ANR	6511963	CompoundStatement		19:17:467:467	6511827	1					
ANR	6511964	ExpressionStatement	"win -> name = strdup ( """" )"	277:2:7023:7046	6511827	0	True				
ANR	6511965	AssignmentExpression	"win -> name = strdup ( """" )"		6511827	0		=			
ANR	6511966	PtrMemberAccess	win -> name		6511827	0					
ANR	6511967	Identifier	win		6511827	0					
ANR	6511968	Identifier	name		6511827	1					
ANR	6511969	CallExpression	"strdup ( """" )"		6511827	1					
ANR	6511970	Callee	strdup		6511827	0					
ANR	6511971	Identifier	strdup		6511827	0					
ANR	6511972	ArgumentList	""""""		6511827	1					
ANR	6511973	Argument	""""""		6511827	0					
ANR	6511974	PrimaryExpression	""""""		6511827	0					
ANR	6511975	ExpressionStatement	free ( tmp )	279:1:7052:7062	6511827	12	True				
ANR	6511976	CallExpression	free ( tmp )		6511827	0					
ANR	6511977	Callee	free		6511827	0					
ANR	6511978	Identifier	free		6511827	0					
ANR	6511979	ArgumentList	tmp		6511827	1					
ANR	6511980	Argument	tmp		6511827	0					
ANR	6511981	Identifier	tmp		6511827	0					
ANR	6511982	ExpressionStatement	"r_list_push ( windows , win )"	280:1:7065:7091	6511827	13	True				
ANR	6511983	CallExpression	"r_list_push ( windows , win )"		6511827	0					
ANR	6511984	Callee	r_list_push		6511827	0					
ANR	6511985	Identifier	r_list_push		6511827	0					
ANR	6511986	ArgumentList	windows		6511827	1					
ANR	6511987	Argument	windows		6511827	0					
ANR	6511988	Identifier	windows		6511827	0					
ANR	6511989	Argument	win		6511827	1					
ANR	6511990	Identifier	win		6511827	0					
ANR	6511991	ReturnStatement	return true ;	281:1:7094:7105	6511827	14	True				
ANR	6511992	Identifier	true		6511827	0					
ANR	6511993	ReturnType	static BOOL CALLBACK		6511827	1					
ANR	6511994	Identifier	__enum_childs		6511827	2					
ANR	6511995	ParameterList	"_In_ HWND hwnd , _In_ LPARAM lParam"		6511827	3					
ANR	6511996	Parameter	_In_ HWND hwnd	256:1:6511:6526	6511827	0	True				
ANR	6511997	ParameterType	_In_ HWND		6511827	0					
ANR	6511998	Identifier	hwnd		6511827	1					
ANR	6511999	Parameter	_In_ LPARAM lParam	257:1:6530:6547	6511827	1	True				
ANR	6512000	ParameterType	_In_ LPARAM		6511827	0					
ANR	6512001	Identifier	lParam		6511827	1					
ANR	6512002	CFGEntryNode	ENTRY		6511827		True				
ANR	6512003	CFGExitNode	EXIT		6511827		True				
ANR	6512004	Symbol	lParam		6511827						
ANR	6512005	Symbol	malloc		6511827						
ANR	6512006	Symbol	win -> name		6511827						
ANR	6512007	Symbol	NULL		6511827						
ANR	6512008	Symbol	win -> tid		6511827						
ANR	6512009	Symbol	* win		6511827						
ANR	6512010	Symbol	sz		6511827						
ANR	6512011	Symbol	false		6511827						
ANR	6512012	Symbol	r_utf16_to_utf8		6511827						
ANR	6512013	Symbol	MAX_CLASS_NAME		6511827						
ANR	6512014	Symbol	windows		6511827						
ANR	6512015	Symbol	R_NEW0		6511827						
ANR	6512016	Symbol	hwnd		6511827						
ANR	6512017	Symbol	tmp		6511827						
ANR	6512018	Symbol	GetWindowThreadProcessId		6511827						
ANR	6512019	Symbol	true		6511827						
ANR	6512020	Symbol	win -> proc		6511827						
ANR	6512021	Symbol	win -> h		6511827						
ANR	6512022	Symbol	window		6511827						
ANR	6512023	Symbol	strdup		6511827						
ANR	6512024	Symbol	win		6511827						
ANR	6512025	Symbol	GCLP_WNDPROC		6511827						
ANR	6512026	Symbol	GetClassLongPtrW		6511827						
ANR	6512027	Function	__get_windows	284:0:7110:8065							
ANR	6512028	FunctionDef	__get_windows (RDebug * dbg)		6512027	0					
ANR	6512029	CompoundStatement		284:41:7151:8065	6512027	0					
ANR	6512030	ExpressionStatement	GetWindowLongPtrW	285:1:7154:7171	6512027	0	True				
ANR	6512031	Identifier	GetWindowLongPtrW		6512027	0					
ANR	6512032	IdentifierDeclStatement	RList * windows = r_list_newf ( ( RListFree ) __free_window ) ;	286:1:7174:7228	6512027	1	True				
ANR	6512033	IdentifierDecl	* windows = r_list_newf ( ( RListFree ) __free_window )		6512027	0					
ANR	6512034	IdentifierDeclType	RList *		6512027	0					
ANR	6512035	Identifier	windows		6512027	1					
ANR	6512036	AssignmentExpression	* windows = r_list_newf ( ( RListFree ) __free_window )		6512027	2		=			
ANR	6512037	Identifier	windows		6512027	0					
ANR	6512038	CallExpression	r_list_newf ( ( RListFree ) __free_window )		6512027	1					
ANR	6512039	Callee	r_list_newf		6512027	0					
ANR	6512040	Identifier	r_list_newf		6512027	0					
ANR	6512041	ArgumentList	( RListFree ) __free_window		6512027	1					
ANR	6512042	Argument	( RListFree ) __free_window		6512027	0					
ANR	6512043	CastExpression	( RListFree ) __free_window		6512027	0					
ANR	6512044	CastTarget	RListFree		6512027	0					
ANR	6512045	Identifier	__free_window		6512027	1					
ANR	6512046	IdentifierDeclStatement	HWND hCurWnd = NULL ;	287:1:7231:7250	6512027	2	True				
ANR	6512047	IdentifierDecl	hCurWnd = NULL		6512027	0					
ANR	6512048	IdentifierDeclType	HWND		6512027	0					
ANR	6512049	Identifier	hCurWnd		6512027	1					
ANR	6512050	AssignmentExpression	hCurWnd = NULL		6512027	2		=			
ANR	6512051	Identifier	NULL		6512027	0					
ANR	6512052	Identifier	NULL		6512027	1					
ANR	6512053	DoStatement	do		6512027	3					
ANR	6512054	CompoundStatement		8:2:187:245	6512027	0					
ANR	6512055	ExpressionStatement	"hCurWnd = FindWindowEx ( NULL , hCurWnd , NULL , NULL )"	289:2:7260:7310	6512027	0	True				
ANR	6512056	AssignmentExpression	"hCurWnd = FindWindowEx ( NULL , hCurWnd , NULL , NULL )"		6512027	0		=			
ANR	6512057	Identifier	hCurWnd		6512027	0					
ANR	6512058	CallExpression	"FindWindowEx ( NULL , hCurWnd , NULL , NULL )"		6512027	1					
ANR	6512059	Callee	FindWindowEx		6512027	0					
ANR	6512060	Identifier	FindWindowEx		6512027	0					
ANR	6512061	ArgumentList	NULL		6512027	1					
ANR	6512062	Argument	NULL		6512027	0					
ANR	6512063	Identifier	NULL		6512027	0					
ANR	6512064	Argument	hCurWnd		6512027	1					
ANR	6512065	Identifier	hCurWnd		6512027	0					
ANR	6512066	Argument	NULL		6512027	2					
ANR	6512067	Identifier	NULL		6512027	0					
ANR	6512068	Argument	NULL		6512027	3					
ANR	6512069	Identifier	NULL		6512027	0					
ANR	6512070	IdentifierDeclStatement	DWORD dwProcessID = 0 ;	290:2:7314:7335	6512027	1	True				
ANR	6512071	IdentifierDecl	dwProcessID = 0		6512027	0					
ANR	6512072	IdentifierDeclType	DWORD		6512027	0					
ANR	6512073	Identifier	dwProcessID		6512027	1					
ANR	6512074	AssignmentExpression	dwProcessID = 0		6512027	2		=			
ANR	6512075	Identifier	dwProcessID		6512027	0					
ANR	6512076	PrimaryExpression	0		6512027	1					
ANR	6512077	IdentifierDeclStatement	"int tid = GetWindowThreadProcessId ( hCurWnd , & dwProcessID ) ;"	291:2:7339:7397	6512027	2	True				
ANR	6512078	IdentifierDecl	"tid = GetWindowThreadProcessId ( hCurWnd , & dwProcessID )"		6512027	0					
ANR	6512079	IdentifierDeclType	int		6512027	0					
ANR	6512080	Identifier	tid		6512027	1					
ANR	6512081	AssignmentExpression	"tid = GetWindowThreadProcessId ( hCurWnd , & dwProcessID )"		6512027	2		=			
ANR	6512082	Identifier	tid		6512027	0					
ANR	6512083	CallExpression	"GetWindowThreadProcessId ( hCurWnd , & dwProcessID )"		6512027	1					
ANR	6512084	Callee	GetWindowThreadProcessId		6512027	0					
ANR	6512085	Identifier	GetWindowThreadProcessId		6512027	0					
ANR	6512086	ArgumentList	hCurWnd		6512027	1					
ANR	6512087	Argument	hCurWnd		6512027	0					
ANR	6512088	Identifier	hCurWnd		6512027	0					
ANR	6512089	Argument	& dwProcessID		6512027	1					
ANR	6512090	UnaryOperationExpression	& dwProcessID		6512027	0					
ANR	6512091	UnaryOperator	&		6512027	0					
ANR	6512092	Identifier	dwProcessID		6512027	1					
ANR	6512093	IfStatement	if ( dbg -> pid == dwProcessID )		6512027	3					
ANR	6512094	Condition	dbg -> pid == dwProcessID	292:6:7405:7427	6512027	0	True				
ANR	6512095	EqualityExpression	dbg -> pid == dwProcessID		6512027	0		==			
ANR	6512096	PtrMemberAccess	dbg -> pid		6512027	0					
ANR	6512097	Identifier	dbg		6512027	0					
ANR	6512098	Identifier	pid		6512027	1					
ANR	6512099	Identifier	dwProcessID		6512027	1					
ANR	6512100	CompoundStatement		19:3:530:553	6512027	1					
ANR	6512101	ExpressionStatement	"EnumChildWindows ( hCurWnd , __enum_childs , windows )"	293:3:7435:7485	6512027	0	True				
ANR	6512102	CallExpression	"EnumChildWindows ( hCurWnd , __enum_childs , windows )"		6512027	0					
ANR	6512103	Callee	EnumChildWindows		6512027	0					
ANR	6512104	Identifier	EnumChildWindows		6512027	0					
ANR	6512105	ArgumentList	hCurWnd		6512027	1					
ANR	6512106	Argument	hCurWnd		6512027	0					
ANR	6512107	Identifier	hCurWnd		6512027	0					
ANR	6512108	Argument	__enum_childs		6512027	1					
ANR	6512109	Identifier	__enum_childs		6512027	0					
ANR	6512110	Argument	windows		6512027	2					
ANR	6512111	Identifier	windows		6512027	0					
ANR	6512112	IdentifierDeclStatement	window * win = R_NEW0 ( window ) ;	294:3:7490:7519	6512027	1	True				
ANR	6512113	IdentifierDecl	* win = R_NEW0 ( window )		6512027	0					
ANR	6512114	IdentifierDeclType	window *		6512027	0					
ANR	6512115	Identifier	win		6512027	1					
ANR	6512116	AssignmentExpression	* win = R_NEW0 ( window )		6512027	2		=			
ANR	6512117	Identifier	win		6512027	0					
ANR	6512118	CallExpression	R_NEW0 ( window )		6512027	1					
ANR	6512119	Callee	R_NEW0		6512027	0					
ANR	6512120	Identifier	R_NEW0		6512027	0					
ANR	6512121	ArgumentList	window		6512027	1					
ANR	6512122	Argument	window		6512027	0					
ANR	6512123	Identifier	window		6512027	0					
ANR	6512124	IfStatement	if ( ! win )		6512027	2					
ANR	6512125	Condition	! win	295:7:7528:7531	6512027	0	True				
ANR	6512126	UnaryOperationExpression	! win		6512027	0					
ANR	6512127	UnaryOperator	!		6512027	0					
ANR	6512128	Identifier	win		6512027	1					
ANR	6512129	CompoundStatement		12:13:382:382	6512027	1					
ANR	6512130	ExpressionStatement	r_list_free ( windows )	296:4:7540:7561	6512027	0	True				
ANR	6512131	CallExpression	r_list_free ( windows )		6512027	0					
ANR	6512132	Callee	r_list_free		6512027	0					
ANR	6512133	Identifier	r_list_free		6512027	0					
ANR	6512134	ArgumentList	windows		6512027	1					
ANR	6512135	Argument	windows		6512027	0					
ANR	6512136	Identifier	windows		6512027	0					
ANR	6512137	ReturnStatement	return NULL ;	297:4:7567:7578	6512027	1	True				
ANR	6512138	Identifier	NULL		6512027	0					
ANR	6512139	ExpressionStatement	win -> tid = tid	299:3:7588:7602	6512027	3	True				
ANR	6512140	AssignmentExpression	win -> tid = tid		6512027	0		=			
ANR	6512141	PtrMemberAccess	win -> tid		6512027	0					
ANR	6512142	Identifier	win		6512027	0					
ANR	6512143	Identifier	tid		6512027	1					
ANR	6512144	Identifier	tid		6512027	1					
ANR	6512145	ExpressionStatement	win -> h = hCurWnd	300:3:7607:7623	6512027	4	True				
ANR	6512146	AssignmentExpression	win -> h = hCurWnd		6512027	0		=			
ANR	6512147	PtrMemberAccess	win -> h		6512027	0					
ANR	6512148	Identifier	win		6512027	0					
ANR	6512149	Identifier	h		6512027	1					
ANR	6512150	Identifier	hCurWnd		6512027	1					
ANR	6512151	IdentifierDeclStatement	const size_t sz = MAX_CLASS_NAME * sizeof ( WCHAR ) ;	301:3:7628:7677	6512027	5	True				
ANR	6512152	IdentifierDecl	sz = MAX_CLASS_NAME * sizeof ( WCHAR )		6512027	0					
ANR	6512153	IdentifierDeclType	const size_t		6512027	0					
ANR	6512154	Identifier	sz		6512027	1					
ANR	6512155	AssignmentExpression	sz = MAX_CLASS_NAME * sizeof ( WCHAR )		6512027	2		=			
ANR	6512156	Identifier	sz		6512027	0					
ANR	6512157	MultiplicativeExpression	MAX_CLASS_NAME * sizeof ( WCHAR )		6512027	1		*			
ANR	6512158	Identifier	MAX_CLASS_NAME		6512027	0					
ANR	6512159	SizeofExpression	sizeof ( WCHAR )		6512027	1					
ANR	6512160	Sizeof	sizeof		6512027	0					
ANR	6512161	SizeofOperand	WCHAR		6512027	1					
ANR	6512162	IdentifierDeclStatement	char * tmp = malloc ( sz ) ;	302:3:7682:7705	6512027	6	True				
ANR	6512163	IdentifierDecl	* tmp = malloc ( sz )		6512027	0					
ANR	6512164	IdentifierDeclType	char *		6512027	0					
ANR	6512165	Identifier	tmp		6512027	1					
ANR	6512166	AssignmentExpression	* tmp = malloc ( sz )		6512027	2		=			
ANR	6512167	Identifier	tmp		6512027	0					
ANR	6512168	CallExpression	malloc ( sz )		6512027	1					
ANR	6512169	Callee	malloc		6512027	0					
ANR	6512170	Identifier	malloc		6512027	0					
ANR	6512171	ArgumentList	sz		6512027	1					
ANR	6512172	Argument	sz		6512027	0					
ANR	6512173	Identifier	sz		6512027	0					
ANR	6512174	IfStatement	if ( ! tmp )		6512027	7					
ANR	6512175	Condition	! tmp	303:7:7714:7717	6512027	0	True				
ANR	6512176	UnaryOperationExpression	! tmp		6512027	0					
ANR	6512177	UnaryOperator	!		6512027	0					
ANR	6512178	Identifier	tmp		6512027	1					
ANR	6512179	CompoundStatement		20:13:568:568	6512027	1					
ANR	6512180	ExpressionStatement	r_list_free ( windows )	304:4:7726:7747	6512027	0	True				
ANR	6512181	CallExpression	r_list_free ( windows )		6512027	0					
ANR	6512182	Callee	r_list_free		6512027	0					
ANR	6512183	Identifier	r_list_free		6512027	0					
ANR	6512184	ArgumentList	windows		6512027	1					
ANR	6512185	Argument	windows		6512027	0					
ANR	6512186	Identifier	windows		6512027	0					
ANR	6512187	ReturnStatement	return NULL ;	305:4:7753:7764	6512027	1	True				
ANR	6512188	Identifier	NULL		6512027	0					
ANR	6512189	ExpressionStatement	"GetClassNameW ( hCurWnd , tmp , MAX_CLASS_NAME )"	307:3:7774:7818	6512027	8	True				
ANR	6512190	CallExpression	"GetClassNameW ( hCurWnd , tmp , MAX_CLASS_NAME )"		6512027	0					
ANR	6512191	Callee	GetClassNameW		6512027	0					
ANR	6512192	Identifier	GetClassNameW		6512027	0					
ANR	6512193	ArgumentList	hCurWnd		6512027	1					
ANR	6512194	Argument	hCurWnd		6512027	0					
ANR	6512195	Identifier	hCurWnd		6512027	0					
ANR	6512196	Argument	tmp		6512027	1					
ANR	6512197	Identifier	tmp		6512027	0					
ANR	6512198	Argument	MAX_CLASS_NAME		6512027	2					
ANR	6512199	Identifier	MAX_CLASS_NAME		6512027	0					
ANR	6512200	ExpressionStatement	"win -> proc = GetClassLongPtrW ( hCurWnd , GCLP_WNDPROC )"	308:3:7823:7875	6512027	9	True				
ANR	6512201	AssignmentExpression	"win -> proc = GetClassLongPtrW ( hCurWnd , GCLP_WNDPROC )"		6512027	0		=			
ANR	6512202	PtrMemberAccess	win -> proc		6512027	0					
ANR	6512203	Identifier	win		6512027	0					
ANR	6512204	Identifier	proc		6512027	1					
ANR	6512205	CallExpression	"GetClassLongPtrW ( hCurWnd , GCLP_WNDPROC )"		6512027	1					
ANR	6512206	Callee	GetClassLongPtrW		6512027	0					
ANR	6512207	Identifier	GetClassLongPtrW		6512027	0					
ANR	6512208	ArgumentList	hCurWnd		6512027	1					
ANR	6512209	Argument	hCurWnd		6512027	0					
ANR	6512210	Identifier	hCurWnd		6512027	0					
ANR	6512211	Argument	GCLP_WNDPROC		6512027	1					
ANR	6512212	Identifier	GCLP_WNDPROC		6512027	0					
ANR	6512213	ExpressionStatement	win -> name = r_utf16_to_utf8 ( tmp )	309:3:7880:7913	6512027	10	True				
ANR	6512214	AssignmentExpression	win -> name = r_utf16_to_utf8 ( tmp )		6512027	0		=			
ANR	6512215	PtrMemberAccess	win -> name		6512027	0					
ANR	6512216	Identifier	win		6512027	0					
ANR	6512217	Identifier	name		6512027	1					
ANR	6512218	CallExpression	r_utf16_to_utf8 ( tmp )		6512027	1					
ANR	6512219	Callee	r_utf16_to_utf8		6512027	0					
ANR	6512220	Identifier	r_utf16_to_utf8		6512027	0					
ANR	6512221	ArgumentList	tmp		6512027	1					
ANR	6512222	Argument	tmp		6512027	0					
ANR	6512223	Identifier	tmp		6512027	0					
ANR	6512224	IfStatement	if ( ! win -> name )		6512027	11					
ANR	6512225	Condition	! win -> name	310:7:7922:7931	6512027	0	True				
ANR	6512226	UnaryOperationExpression	! win -> name		6512027	0					
ANR	6512227	UnaryOperator	!		6512027	0					
ANR	6512228	PtrMemberAccess	win -> name		6512027	1					
ANR	6512229	Identifier	win		6512027	0					
ANR	6512230	Identifier	name		6512027	1					
ANR	6512231	CompoundStatement		27:19:782:782	6512027	1					
ANR	6512232	ExpressionStatement	"win -> name = strdup ( """" )"	311:4:7940:7963	6512027	0	True				
ANR	6512233	AssignmentExpression	"win -> name = strdup ( """" )"		6512027	0		=			
ANR	6512234	PtrMemberAccess	win -> name		6512027	0					
ANR	6512235	Identifier	win		6512027	0					
ANR	6512236	Identifier	name		6512027	1					
ANR	6512237	CallExpression	"strdup ( """" )"		6512027	1					
ANR	6512238	Callee	strdup		6512027	0					
ANR	6512239	Identifier	strdup		6512027	0					
ANR	6512240	ArgumentList	""""""		6512027	1					
ANR	6512241	Argument	""""""		6512027	0					
ANR	6512242	PrimaryExpression	""""""		6512027	0					
ANR	6512243	ExpressionStatement	free ( tmp )	313:3:7973:7983	6512027	12	True				
ANR	6512244	CallExpression	free ( tmp )		6512027	0					
ANR	6512245	Callee	free		6512027	0					
ANR	6512246	Identifier	free		6512027	0					
ANR	6512247	ArgumentList	tmp		6512027	1					
ANR	6512248	Argument	tmp		6512027	0					
ANR	6512249	Identifier	tmp		6512027	0					
ANR	6512250	ExpressionStatement	"r_list_push ( windows , win )"	314:3:7988:8014	6512027	13	True				
ANR	6512251	CallExpression	"r_list_push ( windows , win )"		6512027	0					
ANR	6512252	Callee	r_list_push		6512027	0					
ANR	6512253	Identifier	r_list_push		6512027	0					
ANR	6512254	ArgumentList	windows		6512027	1					
ANR	6512255	Argument	windows		6512027	0					
ANR	6512256	Identifier	windows		6512027	0					
ANR	6512257	Argument	win		6512027	1					
ANR	6512258	Identifier	win		6512027	0					
ANR	6512259	Condition	hCurWnd != NULL	316:10:8030:8044	6512027	1	True				
ANR	6512260	EqualityExpression	hCurWnd != NULL		6512027	0		!=			
ANR	6512261	Identifier	hCurWnd		6512027	0					
ANR	6512262	Identifier	NULL		6512027	1					
ANR	6512263	ReturnStatement	return windows ;	317:1:8049:8063	6512027	4	True				
ANR	6512264	Identifier	windows		6512027	0					
ANR	6512265	ReturnType	static RList *		6512027	1					
ANR	6512266	Identifier	__get_windows		6512027	2					
ANR	6512267	ParameterList	RDebug * dbg		6512027	3					
ANR	6512268	Parameter	RDebug * dbg	284:28:7138:7148	6512027	0	True				
ANR	6512269	ParameterType	RDebug *		6512027	0					
ANR	6512270	Identifier	dbg		6512027	1					
ANR	6512271	CFGEntryNode	ENTRY		6512027		True				
ANR	6512272	CFGExitNode	EXIT		6512027		True				
ANR	6512273	Symbol	* win		6512027						
ANR	6512274	Symbol	r_utf16_to_utf8		6512027						
ANR	6512275	Symbol	tid		6512027						
ANR	6512276	Symbol	tmp		6512027						
ANR	6512277	Symbol	hCurWnd		6512027						
ANR	6512278	Symbol	win -> proc		6512027						
ANR	6512279	Symbol	win -> h		6512027						
ANR	6512280	Symbol	dwProcessID		6512027						
ANR	6512281	Symbol	win		6512027						
ANR	6512282	Symbol	GetClassLongPtrW		6512027						
ANR	6512283	Symbol	GCLP_WNDPROC		6512027						
ANR	6512284	Symbol	malloc		6512027						
ANR	6512285	Symbol	win -> name		6512027						
ANR	6512286	Symbol	NULL		6512027						
ANR	6512287	Symbol	r_list_newf		6512027						
ANR	6512288	Symbol	win -> tid		6512027						
ANR	6512289	Symbol	sz		6512027						
ANR	6512290	Symbol	dbg		6512027						
ANR	6512291	Symbol	MAX_CLASS_NAME		6512027						
ANR	6512292	Symbol	windows		6512027						
ANR	6512293	Symbol	* dbg		6512027						
ANR	6512294	Symbol	& dwProcessID		6512027						
ANR	6512295	Symbol	R_NEW0		6512027						
ANR	6512296	Symbol	__free_window		6512027						
ANR	6512297	Symbol	__enum_childs		6512027						
ANR	6512298	Symbol	dbg -> pid		6512027						
ANR	6512299	Symbol	FindWindowEx		6512027						
ANR	6512300	Symbol	GetWindowThreadProcessId		6512027						
ANR	6512301	Symbol	window		6512027						
ANR	6512302	Symbol	strdup		6512027						
ANR	6512303	Function	__get_dispatchmessage_offset	321:0:8069:8850							
ANR	6512304	FunctionDef	__get_dispatchmessage_offset (RDebug * dbg)		6512303	0					
ANR	6512305	CompoundStatement		321:54:8123:8850	6512303	0					
ANR	6512306	IdentifierDeclStatement	RList * modlist = r_debug_modules_list ( dbg ) ;	322:1:8126:8169	6512303	0	True				
ANR	6512307	IdentifierDecl	* modlist = r_debug_modules_list ( dbg )		6512303	0					
ANR	6512308	IdentifierDeclType	RList *		6512303	0					
ANR	6512309	Identifier	modlist		6512303	1					
ANR	6512310	AssignmentExpression	* modlist = r_debug_modules_list ( dbg )		6512303	2		=			
ANR	6512311	Identifier	modlist		6512303	0					
ANR	6512312	CallExpression	r_debug_modules_list ( dbg )		6512303	1					
ANR	6512313	Callee	r_debug_modules_list		6512303	0					
ANR	6512314	Identifier	r_debug_modules_list		6512303	0					
ANR	6512315	ArgumentList	dbg		6512303	1					
ANR	6512316	Argument	dbg		6512303	0					
ANR	6512317	Identifier	dbg		6512303	0					
ANR	6512318	IdentifierDeclStatement	RListIter * it ;	323:1:8172:8185	6512303	1	True				
ANR	6512319	IdentifierDecl	* it		6512303	0					
ANR	6512320	IdentifierDeclType	RListIter *		6512303	0					
ANR	6512321	Identifier	it		6512303	1					
ANR	6512322	IdentifierDeclStatement	RDebugMap * mod ;	324:1:8188:8202	6512303	2	True				
ANR	6512323	IdentifierDecl	* mod		6512303	0					
ANR	6512324	IdentifierDeclType	RDebugMap *		6512303	0					
ANR	6512325	Identifier	mod		6512303	1					
ANR	6512326	IdentifierDeclStatement	bool found = false ;	325:1:8205:8223	6512303	3	True				
ANR	6512327	IdentifierDecl	found = false		6512303	0					
ANR	6512328	IdentifierDeclType	bool		6512303	0					
ANR	6512329	Identifier	found		6512303	1					
ANR	6512330	AssignmentExpression	found = false		6512303	2		=			
ANR	6512331	Identifier	false		6512303	0					
ANR	6512332	Identifier	false		6512303	1					
ANR	6512333	Statement	r_list_foreach	326:1:8226:8239	6512303	4	True				
ANR	6512334	Statement	(	326:16:8241:8241	6512303	5	True				
ANR	6512335	Statement	modlist	326:17:8242:8248	6512303	6	True				
ANR	6512336	Statement	","	326:24:8249:8249	6512303	7	True				
ANR	6512337	Statement	it	326:26:8251:8252	6512303	8	True				
ANR	6512338	Statement	","	326:28:8253:8253	6512303	9	True				
ANR	6512339	Statement	mod	326:30:8255:8257	6512303	10	True				
ANR	6512340	Statement	)	326:33:8258:8258	6512303	11	True				
ANR	6512341	CompoundStatement		6:35:136:136	6512303	12					
ANR	6512342	IfStatement	"if ( ! strnicmp ( mod -> name , ""user32.dll"" , sizeof ( ""user32.dll"" ) ) )"		6512303	0					
ANR	6512343	Condition	"! strnicmp ( mod -> name , ""user32.dll"" , sizeof ( ""user32.dll"" ) )"	327:6:8268:8325	6512303	0	True				
ANR	6512344	UnaryOperationExpression	"! strnicmp ( mod -> name , ""user32.dll"" , sizeof ( ""user32.dll"" ) )"		6512303	0					
ANR	6512345	UnaryOperator	!		6512303	0					
ANR	6512346	CallExpression	"strnicmp ( mod -> name , ""user32.dll"" , sizeof ( ""user32.dll"" ) )"		6512303	1					
ANR	6512347	Callee	strnicmp		6512303	0					
ANR	6512348	Identifier	strnicmp		6512303	0					
ANR	6512349	ArgumentList	mod -> name		6512303	1					
ANR	6512350	Argument	mod -> name		6512303	0					
ANR	6512351	PtrMemberAccess	mod -> name		6512303	0					
ANR	6512352	Identifier	mod		6512303	0					
ANR	6512353	Identifier	name		6512303	1					
ANR	6512354	Argument	"""user32.dll"""		6512303	1					
ANR	6512355	PrimaryExpression	"""user32.dll"""		6512303	0					
ANR	6512356	Argument	"sizeof ( ""user32.dll"" )"		6512303	2					
ANR	6512357	SizeofExpression	"sizeof ( ""user32.dll"" )"		6512303	0					
ANR	6512358	Sizeof	sizeof		6512303	0					
ANR	6512359	PrimaryExpression	"""user32.dll"""		6512303	1					
ANR	6512360	CompoundStatement		7:66:204:204	6512303	1					
ANR	6512361	ExpressionStatement	found = true	328:3:8333:8345	6512303	0	True				
ANR	6512362	AssignmentExpression	found = true		6512303	0		=			
ANR	6512363	Identifier	found		6512303	0					
ANR	6512364	Identifier	true		6512303	1					
ANR	6512365	BreakStatement	break ;	329:3:8350:8355	6512303	1	True				
ANR	6512366	IfStatement	if ( ! found )		6512303	13					
ANR	6512367	Condition	! found	332:5:8369:8374	6512303	0	True				
ANR	6512368	UnaryOperationExpression	! found		6512303	0					
ANR	6512369	UnaryOperator	!		6512303	0					
ANR	6512370	Identifier	found		6512303	1					
ANR	6512371	CompoundStatement		12:13:253:253	6512303	1					
ANR	6512372	ReturnStatement	return 0 ;	333:2:8381:8389	6512303	0	True				
ANR	6512373	PrimaryExpression	0		6512303	0					
ANR	6512374	IdentifierDeclStatement	"char * res = dbg -> corebind . cmdstr ( dbg -> corebind . core , ""f~DispatchMessageW"" ) ;"	335:1:8395:8469	6512303	14	True				
ANR	6512375	IdentifierDecl	"* res = dbg -> corebind . cmdstr ( dbg -> corebind . core , ""f~DispatchMessageW"" )"		6512303	0					
ANR	6512376	IdentifierDeclType	char *		6512303	0					
ANR	6512377	Identifier	res		6512303	1					
ANR	6512378	AssignmentExpression	"* res = dbg -> corebind . cmdstr ( dbg -> corebind . core , ""f~DispatchMessageW"" )"		6512303	2		=			
ANR	6512379	Identifier	res		6512303	0					
ANR	6512380	CallExpression	"dbg -> corebind . cmdstr ( dbg -> corebind . core , ""f~DispatchMessageW"" )"		6512303	1					
ANR	6512381	Callee	dbg -> corebind . cmdstr		6512303	0					
ANR	6512382	MemberAccess	dbg -> corebind . cmdstr		6512303	0					
ANR	6512383	PtrMemberAccess	dbg -> corebind		6512303	0					
ANR	6512384	Identifier	dbg		6512303	0					
ANR	6512385	Identifier	corebind		6512303	1					
ANR	6512386	Identifier	cmdstr		6512303	1					
ANR	6512387	ArgumentList	dbg -> corebind . core		6512303	1					
ANR	6512388	Argument	dbg -> corebind . core		6512303	0					
ANR	6512389	MemberAccess	dbg -> corebind . core		6512303	0					
ANR	6512390	PtrMemberAccess	dbg -> corebind		6512303	0					
ANR	6512391	Identifier	dbg		6512303	0					
ANR	6512392	Identifier	corebind		6512303	1					
ANR	6512393	Identifier	core		6512303	1					
ANR	6512394	Argument	"""f~DispatchMessageW"""		6512303	1					
ANR	6512395	PrimaryExpression	"""f~DispatchMessageW"""		6512303	0					
ANR	6512396	IfStatement	if ( ! * res )		6512303	15					
ANR	6512397	Condition	! * res	336:5:8476:8480	6512303	0	True				
ANR	6512398	UnaryOperationExpression	! * res		6512303	0					
ANR	6512399	UnaryOperator	!		6512303	0					
ANR	6512400	UnaryOperationExpression	* res		6512303	1					
ANR	6512401	UnaryOperator	*		6512303	0					
ANR	6512402	Identifier	res		6512303	1					
ANR	6512403	CompoundStatement		16:12:359:359	6512303	1					
ANR	6512404	ExpressionStatement	free ( res )	337:2:8487:8497	6512303	0	True				
ANR	6512405	CallExpression	free ( res )		6512303	0					
ANR	6512406	Callee	free		6512303	0					
ANR	6512407	Identifier	free		6512303	0					
ANR	6512408	ArgumentList	res		6512303	1					
ANR	6512409	Argument	res		6512303	0					
ANR	6512410	Identifier	res		6512303	0					
ANR	6512411	ReturnStatement	return 0 ;	338:2:8501:8509	6512303	1	True				
ANR	6512412	PrimaryExpression	0		6512303	0					
ANR	6512413	IdentifierDeclStatement	"char * line = strtok ( res , ""\\n"" ) ;"	340:1:8515:8546	6512303	16	True				
ANR	6512414	IdentifierDecl	"* line = strtok ( res , ""\\n"" )"		6512303	0					
ANR	6512415	IdentifierDeclType	char *		6512303	0					
ANR	6512416	Identifier	line		6512303	1					
ANR	6512417	AssignmentExpression	"* line = strtok ( res , ""\\n"" )"		6512303	2		=			
ANR	6512418	Identifier	line		6512303	0					
ANR	6512419	CallExpression	"strtok ( res , ""\\n"" )"		6512303	1					
ANR	6512420	Callee	strtok		6512303	0					
ANR	6512421	Identifier	strtok		6512303	0					
ANR	6512422	ArgumentList	res		6512303	1					
ANR	6512423	Argument	res		6512303	0					
ANR	6512424	Identifier	res		6512303	0					
ANR	6512425	Argument	"""\\n"""		6512303	1					
ANR	6512426	PrimaryExpression	"""\\n"""		6512303	0					
ANR	6512427	IdentifierDeclStatement	ut64 offset = 0 ;	341:1:8549:8564	6512303	17	True				
ANR	6512428	IdentifierDecl	offset = 0		6512303	0					
ANR	6512429	IdentifierDeclType	ut64		6512303	0					
ANR	6512430	Identifier	offset		6512303	1					
ANR	6512431	AssignmentExpression	offset = 0		6512303	2		=			
ANR	6512432	Identifier	offset		6512303	0					
ANR	6512433	PrimaryExpression	0		6512303	1					
ANR	6512434	DoStatement	do		6512303	18					
ANR	6512435	CompoundStatement		23:2:451:482	6512303	0					
ANR	6512436	IdentifierDeclStatement	"char * sym = strrchr ( line , ' ' ) ;"	343:2:8575:8606	6512303	0	True				
ANR	6512437	IdentifierDecl	"* sym = strrchr ( line , ' ' )"		6512303	0					
ANR	6512438	IdentifierDeclType	char *		6512303	0					
ANR	6512439	Identifier	sym		6512303	1					
ANR	6512440	AssignmentExpression	"* sym = strrchr ( line , ' ' )"		6512303	2		=			
ANR	6512441	Identifier	sym		6512303	0					
ANR	6512442	CallExpression	"strrchr ( line , ' ' )"		6512303	1					
ANR	6512443	Callee	strrchr		6512303	0					
ANR	6512444	Identifier	strrchr		6512303	0					
ANR	6512445	ArgumentList	line		6512303	1					
ANR	6512446	Argument	line		6512303	0					
ANR	6512447	Identifier	line		6512303	0					
ANR	6512448	Argument	' '		6512303	1					
ANR	6512449	PrimaryExpression	' '		6512303	0					
ANR	6512450	IfStatement	"if ( sym && r_str_startswith ( sym + 1 , ""sym.imp"" ) )"		6512303	1					
ANR	6512451	Condition	"sym && r_str_startswith ( sym + 1 , ""sym.imp"" )"	344:6:8614:8657	6512303	0	True				
ANR	6512452	AndExpression	"sym && r_str_startswith ( sym + 1 , ""sym.imp"" )"		6512303	0		&&			
ANR	6512453	Identifier	sym		6512303	0					
ANR	6512454	CallExpression	"r_str_startswith ( sym + 1 , ""sym.imp"" )"		6512303	1					
ANR	6512455	Callee	r_str_startswith		6512303	0					
ANR	6512456	Identifier	r_str_startswith		6512303	0					
ANR	6512457	ArgumentList	sym + 1		6512303	1					
ANR	6512458	Argument	sym + 1		6512303	0					
ANR	6512459	AdditiveExpression	sym + 1		6512303	0		+			
ANR	6512460	Identifier	sym		6512303	0					
ANR	6512461	PrimaryExpression	1		6512303	1					
ANR	6512462	Argument	"""sym.imp"""		6512303	1					
ANR	6512463	PrimaryExpression	"""sym.imp"""		6512303	0					
ANR	6512464	CompoundStatement		24:52:536:536	6512303	1					
ANR	6512465	ExpressionStatement	"offset = r_num_math ( NULL , line )"	345:3:8665:8697	6512303	0	True				
ANR	6512466	AssignmentExpression	"offset = r_num_math ( NULL , line )"		6512303	0		=			
ANR	6512467	Identifier	offset		6512303	0					
ANR	6512468	CallExpression	"r_num_math ( NULL , line )"		6512303	1					
ANR	6512469	Callee	r_num_math		6512303	0					
ANR	6512470	Identifier	r_num_math		6512303	0					
ANR	6512471	ArgumentList	NULL		6512303	1					
ANR	6512472	Argument	NULL		6512303	0					
ANR	6512473	Identifier	NULL		6512303	0					
ANR	6512474	Argument	line		6512303	1					
ANR	6512475	Identifier	line		6512303	0					
ANR	6512476	ExpressionStatement	"dbg -> iob . read_at ( dbg -> iob . io , offset , & offset , sizeof ( offset ) )"	346:3:8702:8766	6512303	1	True				
ANR	6512477	CallExpression	"dbg -> iob . read_at ( dbg -> iob . io , offset , & offset , sizeof ( offset ) )"		6512303	0					
ANR	6512478	Callee	dbg -> iob . read_at		6512303	0					
ANR	6512479	MemberAccess	dbg -> iob . read_at		6512303	0					
ANR	6512480	PtrMemberAccess	dbg -> iob		6512303	0					
ANR	6512481	Identifier	dbg		6512303	0					
ANR	6512482	Identifier	iob		6512303	1					
ANR	6512483	Identifier	read_at		6512303	1					
ANR	6512484	ArgumentList	dbg -> iob . io		6512303	1					
ANR	6512485	Argument	dbg -> iob . io		6512303	0					
ANR	6512486	MemberAccess	dbg -> iob . io		6512303	0					
ANR	6512487	PtrMemberAccess	dbg -> iob		6512303	0					
ANR	6512488	Identifier	dbg		6512303	0					
ANR	6512489	Identifier	iob		6512303	1					
ANR	6512490	Identifier	io		6512303	1					
ANR	6512491	Argument	offset		6512303	1					
ANR	6512492	Identifier	offset		6512303	0					
ANR	6512493	Argument	& offset		6512303	2					
ANR	6512494	UnaryOperationExpression	& offset		6512303	0					
ANR	6512495	UnaryOperator	&		6512303	0					
ANR	6512496	Identifier	offset		6512303	1					
ANR	6512497	Argument	sizeof ( offset )		6512303	3					
ANR	6512498	SizeofExpression	sizeof ( offset )		6512303	0					
ANR	6512499	Sizeof	sizeof		6512303	0					
ANR	6512500	SizeofOperand	offset		6512303	1					
ANR	6512501	BreakStatement	break ;	347:3:8771:8776	6512303	2	True				
ANR	6512502	Condition	"line = strtok ( NULL , ""\\n"" )"	349:10:8792:8817	6512303	1	True				
ANR	6512503	AssignmentExpression	"line = strtok ( NULL , ""\\n"" )"		6512303	0		=			
ANR	6512504	Identifier	line		6512303	0					
ANR	6512505	CallExpression	"strtok ( NULL , ""\\n"" )"		6512303	1					
ANR	6512506	Callee	strtok		6512303	0					
ANR	6512507	Identifier	strtok		6512303	0					
ANR	6512508	ArgumentList	NULL		6512303	1					
ANR	6512509	Argument	NULL		6512303	0					
ANR	6512510	Identifier	NULL		6512303	0					
ANR	6512511	Argument	"""\\n"""		6512303	1					
ANR	6512512	PrimaryExpression	"""\\n"""		6512303	0					
ANR	6512513	ExpressionStatement	free ( res )	350:1:8822:8832	6512303	19	True				
ANR	6512514	CallExpression	free ( res )		6512303	0					
ANR	6512515	Callee	free		6512303	0					
ANR	6512516	Identifier	free		6512303	0					
ANR	6512517	ArgumentList	res		6512303	1					
ANR	6512518	Argument	res		6512303	0					
ANR	6512519	Identifier	res		6512303	0					
ANR	6512520	ReturnStatement	return offset ;	351:1:8835:8848	6512303	20	True				
ANR	6512521	Identifier	offset		6512303	0					
ANR	6512522	ReturnType	static ut64		6512303	1					
ANR	6512523	Identifier	__get_dispatchmessage_offset		6512303	2					
ANR	6512524	ParameterList	RDebug * dbg		6512303	3					
ANR	6512525	Parameter	RDebug * dbg	321:41:8110:8120	6512303	0	True				
ANR	6512526	ParameterType	RDebug *		6512303	0					
ANR	6512527	Identifier	dbg		6512303	1					
ANR	6512528	CFGEntryNode	ENTRY		6512303		True				
ANR	6512529	CFGExitNode	EXIT		6512303		True				
ANR	6512530	CFGErrorNode	ERROR		6512303		True				
ANR	6512531	Symbol	dbg -> iob . io		6512303						
ANR	6512532	Symbol	mod		6512303						
ANR	6512533	Symbol	modlist		6512303						
ANR	6512534	Symbol	line		6512303						
ANR	6512535	Symbol	sym		6512303						
ANR	6512536	Symbol	* res		6512303						
ANR	6512537	Symbol	r_num_math		6512303						
ANR	6512538	Symbol	dbg -> corebind . core		6512303						
ANR	6512539	Symbol	found		6512303						
ANR	6512540	Symbol	dbg -> corebind . cmdstr		6512303						
ANR	6512541	Symbol	strnicmp		6512303						
ANR	6512542	Symbol	r_str_startswith		6512303						
ANR	6512543	Symbol	res		6512303						
ANR	6512544	Symbol	NULL		6512303						
ANR	6512545	Symbol	dbg -> iob		6512303						
ANR	6512546	Symbol	offset		6512303						
ANR	6512547	Symbol	r_debug_modules_list		6512303						
ANR	6512548	Symbol	& offset		6512303						
ANR	6512549	Symbol	dbg		6512303						
ANR	6512550	Symbol	false		6512303						
ANR	6512551	Symbol	mod -> name		6512303						
ANR	6512552	Symbol	strtok		6512303						
ANR	6512553	Symbol	it		6512303						
ANR	6512554	Symbol	* mod		6512303						
ANR	6512555	Symbol	* dbg		6512303						
ANR	6512556	Symbol	dbg -> corebind		6512303						
ANR	6512557	Symbol	strrchr		6512303						
ANR	6512558	Symbol	true		6512303						
ANR	6512559	Function	__init_msg_types	354:0:8853:9041							
ANR	6512560	FunctionDef	__init_msg_types (Sdb * * msg_types)		6512559	0					
ANR	6512561	CompoundStatement		354:46:8899:9041	6512559	0					
ANR	6512562	ExpressionStatement	* msg_types = sdb_new0 ( )	355:1:8902:8926	6512559	0	True				
ANR	6512563	AssignmentExpression	* msg_types = sdb_new0 ( )		6512559	0		=			
ANR	6512564	UnaryOperationExpression	* msg_types		6512559	0					
ANR	6512565	UnaryOperator	*		6512559	0					
ANR	6512566	Identifier	msg_types		6512559	1					
ANR	6512567	CallExpression	sdb_new0 ( )		6512559	1					
ANR	6512568	Callee	sdb_new0		6512559	0					
ANR	6512569	Identifier	sdb_new0		6512559	0					
ANR	6512570	ArgumentList			6512559	1					
ANR	6512571	IdentifierDeclStatement	int i ;	356:1:8929:8934	6512559	1	True				
ANR	6512572	IdentifierDecl	i		6512559	0					
ANR	6512573	IdentifierDeclType	int		6512559	0					
ANR	6512574	Identifier	i		6512559	1					
ANR	6512575	IdentifierDeclStatement	char * cur_type ;	357:1:8937:8951	6512559	2	True				
ANR	6512576	IdentifierDecl	* cur_type		6512559	0					
ANR	6512577	IdentifierDeclType	char *		6512559	0					
ANR	6512578	Identifier	cur_type		6512559	1					
ANR	6512579	ForStatement	for ( i = 0 ; cur_type = msg_types_arr [ i ] ; i ++ )		6512559	3					
ANR	6512580	ForInit	i = 0 ;	358:6:8959:8964	6512559	0	True				
ANR	6512581	AssignmentExpression	i = 0		6512559	0		=			
ANR	6512582	Identifier	i		6512559	0					
ANR	6512583	PrimaryExpression	0		6512559	1					
ANR	6512584	Condition	cur_type = msg_types_arr [ i ]	358:13:8966:8992	6512559	1	True				
ANR	6512585	AssignmentExpression	cur_type = msg_types_arr [ i ]		6512559	0		=			
ANR	6512586	Identifier	cur_type		6512559	0					
ANR	6512587	ArrayIndexing	msg_types_arr [ i ]		6512559	1					
ANR	6512588	Identifier	msg_types_arr		6512559	0					
ANR	6512589	Identifier	i		6512559	1					
ANR	6512590	PostIncDecOperationExpression	i ++	358:42:8995:8997	6512559	2	True				
ANR	6512591	Identifier	i		6512559	0					
ANR	6512592	IncDec	++		6512559	1					
ANR	6512593	CompoundStatement		5:47:100:100	6512559	3					
ANR	6512594	ExpressionStatement	"sdb_query ( * msg_types , cur_type )"	359:2:9004:9036	6512559	0	True				
ANR	6512595	CallExpression	"sdb_query ( * msg_types , cur_type )"		6512559	0					
ANR	6512596	Callee	sdb_query		6512559	0					
ANR	6512597	Identifier	sdb_query		6512559	0					
ANR	6512598	ArgumentList	* msg_types		6512559	1					
ANR	6512599	Argument	* msg_types		6512559	0					
ANR	6512600	UnaryOperationExpression	* msg_types		6512559	0					
ANR	6512601	UnaryOperator	*		6512559	0					
ANR	6512602	Identifier	msg_types		6512559	1					
ANR	6512603	Argument	cur_type		6512559	1					
ANR	6512604	Identifier	cur_type		6512559	0					
ANR	6512605	ReturnType	static void		6512559	1					
ANR	6512606	Identifier	__init_msg_types		6512559	2					
ANR	6512607	ParameterList	Sdb * * msg_types		6512559	3					
ANR	6512608	Parameter	Sdb * * msg_types	354:29:8882:8896	6512559	0	True				
ANR	6512609	ParameterType	Sdb * *		6512559	0					
ANR	6512610	Identifier	msg_types		6512559	1					
ANR	6512611	CFGEntryNode	ENTRY		6512559		True				
ANR	6512612	CFGExitNode	EXIT		6512559		True				
ANR	6512613	Symbol	sdb_new0		6512559						
ANR	6512614	Symbol	* msg_types		6512559						
ANR	6512615	Symbol	* i		6512559						
ANR	6512616	Symbol	msg_types		6512559						
ANR	6512617	Symbol	i		6512559						
ANR	6512618	Symbol	msg_types_arr		6512559						
ANR	6512619	Symbol	cur_type		6512559						
ANR	6512620	Symbol	* msg_types_arr		6512559						
ANR	6512621	Function	__get_msg_type	363:0:9044:9337							
ANR	6512622	FunctionDef	__get_msg_type (char * name)		6512621	0					
ANR	6512623	CompoundStatement		363:40:9084:9337	6512621	0					
ANR	6512624	Statement	static	364:1:9087:9092	6512621	0	True				
ANR	6512625	IdentifierDeclStatement	Sdb * msg_types = NULL ;	364:8:9094:9115	6512621	1	True				
ANR	6512626	IdentifierDecl	* msg_types = NULL		6512621	0					
ANR	6512627	IdentifierDeclType	Sdb *		6512621	0					
ANR	6512628	Identifier	msg_types		6512621	1					
ANR	6512629	AssignmentExpression	* msg_types = NULL		6512621	2		=			
ANR	6512630	Identifier	NULL		6512621	0					
ANR	6512631	Identifier	NULL		6512621	1					
ANR	6512632	IfStatement	if ( ! msg_types )		6512621	2					
ANR	6512633	Condition	! msg_types	365:5:9122:9131	6512621	0	True				
ANR	6512634	UnaryOperationExpression	! msg_types		6512621	0					
ANR	6512635	UnaryOperator	!		6512621	0					
ANR	6512636	Identifier	msg_types		6512621	1					
ANR	6512637	CompoundStatement		3:17:49:49	6512621	1					
ANR	6512638	ExpressionStatement	__init_msg_types ( & msg_types )	366:2:9138:9167	6512621	0	True				
ANR	6512639	CallExpression	__init_msg_types ( & msg_types )		6512621	0					
ANR	6512640	Callee	__init_msg_types		6512621	0					
ANR	6512641	Identifier	__init_msg_types		6512621	0					
ANR	6512642	ArgumentList	& msg_types		6512621	1					
ANR	6512643	Argument	& msg_types		6512621	0					
ANR	6512644	UnaryOperationExpression	& msg_types		6512621	0					
ANR	6512645	UnaryOperator	&		6512621	0					
ANR	6512646	Identifier	msg_types		6512621	1					
ANR	6512647	IdentifierDeclStatement	int found ;	368:1:9173:9182	6512621	3	True				
ANR	6512648	IdentifierDecl	found		6512621	0					
ANR	6512649	IdentifierDeclType	int		6512621	0					
ANR	6512650	Identifier	found		6512621	1					
ANR	6512651	IdentifierDeclStatement	"const char * type_str = sdb_const_get ( msg_types , name , & found ) ;"	369:1:9185:9247	6512621	4	True				
ANR	6512652	IdentifierDecl	"* type_str = sdb_const_get ( msg_types , name , & found )"		6512621	0					
ANR	6512653	IdentifierDeclType	const char *		6512621	0					
ANR	6512654	Identifier	type_str		6512621	1					
ANR	6512655	AssignmentExpression	"* type_str = sdb_const_get ( msg_types , name , & found )"		6512621	2		=			
ANR	6512656	Identifier	type_str		6512621	0					
ANR	6512657	CallExpression	"sdb_const_get ( msg_types , name , & found )"		6512621	1					
ANR	6512658	Callee	sdb_const_get		6512621	0					
ANR	6512659	Identifier	sdb_const_get		6512621	0					
ANR	6512660	ArgumentList	msg_types		6512621	1					
ANR	6512661	Argument	msg_types		6512621	0					
ANR	6512662	Identifier	msg_types		6512621	0					
ANR	6512663	Argument	name		6512621	1					
ANR	6512664	Identifier	name		6512621	0					
ANR	6512665	Argument	& found		6512621	2					
ANR	6512666	UnaryOperationExpression	& found		6512621	0					
ANR	6512667	UnaryOperator	&		6512621	0					
ANR	6512668	Identifier	found		6512621	1					
ANR	6512669	IfStatement	if ( found )		6512621	5					
ANR	6512670	Condition	found	370:5:9254:9258	6512621	0	True				
ANR	6512671	Identifier	found		6512621	0					
ANR	6512672	CompoundStatement		9:2:180:218	6512621	1					
ANR	6512673	IdentifierDeclStatement	"int type = r_num_math ( NULL , type_str ) ;"	371:2:9265:9303	6512621	0	True				
ANR	6512674	IdentifierDecl	"type = r_num_math ( NULL , type_str )"		6512621	0					
ANR	6512675	IdentifierDeclType	int		6512621	0					
ANR	6512676	Identifier	type		6512621	1					
ANR	6512677	AssignmentExpression	"type = r_num_math ( NULL , type_str )"		6512621	2		=			
ANR	6512678	Identifier	type		6512621	0					
ANR	6512679	CallExpression	"r_num_math ( NULL , type_str )"		6512621	1					
ANR	6512680	Callee	r_num_math		6512621	0					
ANR	6512681	Identifier	r_num_math		6512621	0					
ANR	6512682	ArgumentList	NULL		6512621	1					
ANR	6512683	Argument	NULL		6512621	0					
ANR	6512684	Identifier	NULL		6512621	0					
ANR	6512685	Argument	type_str		6512621	1					
ANR	6512686	Identifier	type_str		6512621	0					
ANR	6512687	ReturnStatement	return type ;	372:2:9307:9318	6512621	1	True				
ANR	6512688	Identifier	type		6512621	0					
ANR	6512689	ReturnStatement	return NULL ;	374:1:9324:9335	6512621	6	True				
ANR	6512690	Identifier	NULL		6512621	0					
ANR	6512691	ReturnType	static DWORD		6512621	1					
ANR	6512692	Identifier	__get_msg_type		6512621	2					
ANR	6512693	ParameterList	char * name		6512621	3					
ANR	6512694	Parameter	char * name	363:28:9072:9081	6512621	0	True				
ANR	6512695	ParameterType	char *		6512621	0					
ANR	6512696	Identifier	name		6512621	1					
ANR	6512697	CFGEntryNode	ENTRY		6512621		True				
ANR	6512698	CFGExitNode	EXIT		6512621		True				
ANR	6512699	Symbol	& found		6512621						
ANR	6512700	Symbol	NULL		6512621						
ANR	6512701	Symbol	found		6512621						
ANR	6512702	Symbol	& msg_types		6512621						
ANR	6512703	Symbol	name		6512621						
ANR	6512704	Symbol	msg_types		6512621						
ANR	6512705	Symbol	type_str		6512621						
ANR	6512706	Symbol	type		6512621						
ANR	6512707	Symbol	sdb_const_get		6512621						
ANR	6512708	Symbol	r_num_math		6512621						
ANR	6512709	Function	__print_windows	377:0:9340:9989							
ANR	6512710	FunctionDef	"__print_windows (RDebug * dbg , RList * windows)"		6512709	0					
ANR	6512711	CompoundStatement		377:57:9397:9989	6512709	0					
ANR	6512712	IdentifierDeclStatement	RTable * tbl = r_table_new ( ) ;	378:1:9400:9428	6512709	0	True				
ANR	6512713	IdentifierDecl	* tbl = r_table_new ( )		6512709	0					
ANR	6512714	IdentifierDeclType	RTable *		6512709	0					
ANR	6512715	Identifier	tbl		6512709	1					
ANR	6512716	AssignmentExpression	* tbl = r_table_new ( )		6512709	2		=			
ANR	6512717	Identifier	tbl		6512709	0					
ANR	6512718	CallExpression	r_table_new ( )		6512709	1					
ANR	6512719	Callee	r_table_new		6512709	0					
ANR	6512720	Identifier	r_table_new		6512709	0					
ANR	6512721	ArgumentList			6512709	1					
ANR	6512722	ExpressionStatement	"r_table_add_column ( tbl , r_table_type ( ""number"" ) , ""Handle"" , ST32_MAX )"	379:1:9431:9500	6512709	1	True				
ANR	6512723	CallExpression	"r_table_add_column ( tbl , r_table_type ( ""number"" ) , ""Handle"" , ST32_MAX )"		6512709	0					
ANR	6512724	Callee	r_table_add_column		6512709	0					
ANR	6512725	Identifier	r_table_add_column		6512709	0					
ANR	6512726	ArgumentList	tbl		6512709	1					
ANR	6512727	Argument	tbl		6512709	0					
ANR	6512728	Identifier	tbl		6512709	0					
ANR	6512729	Argument	"r_table_type ( ""number"" )"		6512709	1					
ANR	6512730	CallExpression	"r_table_type ( ""number"" )"		6512709	0					
ANR	6512731	Callee	r_table_type		6512709	0					
ANR	6512732	Identifier	r_table_type		6512709	0					
ANR	6512733	ArgumentList	"""number"""		6512709	1					
ANR	6512734	Argument	"""number"""		6512709	0					
ANR	6512735	PrimaryExpression	"""number"""		6512709	0					
ANR	6512736	Argument	"""Handle"""		6512709	2					
ANR	6512737	PrimaryExpression	"""Handle"""		6512709	0					
ANR	6512738	Argument	ST32_MAX		6512709	3					
ANR	6512739	Identifier	ST32_MAX		6512709	0					
ANR	6512740	ExpressionStatement	"r_table_add_column ( tbl , r_table_type ( ""number"" ) , ""TID"" , ST32_MAX )"	380:1:9503:9569	6512709	2	True				
ANR	6512741	CallExpression	"r_table_add_column ( tbl , r_table_type ( ""number"" ) , ""TID"" , ST32_MAX )"		6512709	0					
ANR	6512742	Callee	r_table_add_column		6512709	0					
ANR	6512743	Identifier	r_table_add_column		6512709	0					
ANR	6512744	ArgumentList	tbl		6512709	1					
ANR	6512745	Argument	tbl		6512709	0					
ANR	6512746	Identifier	tbl		6512709	0					
ANR	6512747	Argument	"r_table_type ( ""number"" )"		6512709	1					
ANR	6512748	CallExpression	"r_table_type ( ""number"" )"		6512709	0					
ANR	6512749	Callee	r_table_type		6512709	0					
ANR	6512750	Identifier	r_table_type		6512709	0					
ANR	6512751	ArgumentList	"""number"""		6512709	1					
ANR	6512752	Argument	"""number"""		6512709	0					
ANR	6512753	PrimaryExpression	"""number"""		6512709	0					
ANR	6512754	Argument	"""TID"""		6512709	2					
ANR	6512755	PrimaryExpression	"""TID"""		6512709	0					
ANR	6512756	Argument	ST32_MAX		6512709	3					
ANR	6512757	Identifier	ST32_MAX		6512709	0					
ANR	6512758	ExpressionStatement	"r_table_add_column ( tbl , r_table_type ( ""string"" ) , ""Class Name"" , ST32_MAX )"	381:1:9572:9645	6512709	3	True				
ANR	6512759	CallExpression	"r_table_add_column ( tbl , r_table_type ( ""string"" ) , ""Class Name"" , ST32_MAX )"		6512709	0					
ANR	6512760	Callee	r_table_add_column		6512709	0					
ANR	6512761	Identifier	r_table_add_column		6512709	0					
ANR	6512762	ArgumentList	tbl		6512709	1					
ANR	6512763	Argument	tbl		6512709	0					
ANR	6512764	Identifier	tbl		6512709	0					
ANR	6512765	Argument	"r_table_type ( ""string"" )"		6512709	1					
ANR	6512766	CallExpression	"r_table_type ( ""string"" )"		6512709	0					
ANR	6512767	Callee	r_table_type		6512709	0					
ANR	6512768	Identifier	r_table_type		6512709	0					
ANR	6512769	ArgumentList	"""string"""		6512709	1					
ANR	6512770	Argument	"""string"""		6512709	0					
ANR	6512771	PrimaryExpression	"""string"""		6512709	0					
ANR	6512772	Argument	"""Class Name"""		6512709	2					
ANR	6512773	PrimaryExpression	"""Class Name"""		6512709	0					
ANR	6512774	Argument	ST32_MAX		6512709	3					
ANR	6512775	Identifier	ST32_MAX		6512709	0					
ANR	6512776	IdentifierDeclStatement	RListIter * it ;	382:1:9648:9661	6512709	4	True				
ANR	6512777	IdentifierDecl	* it		6512709	0					
ANR	6512778	IdentifierDeclType	RListIter *		6512709	0					
ANR	6512779	Identifier	it		6512709	1					
ANR	6512780	IdentifierDeclStatement	window * win ;	383:1:9664:9675	6512709	5	True				
ANR	6512781	IdentifierDecl	* win		6512709	0					
ANR	6512782	IdentifierDeclType	window *		6512709	0					
ANR	6512783	Identifier	win		6512709	1					
ANR	6512784	Statement	r_list_foreach	384:1:9678:9691	6512709	6	True				
ANR	6512785	Statement	(	384:16:9693:9693	6512709	7	True				
ANR	6512786	Statement	windows	384:17:9694:9700	6512709	8	True				
ANR	6512787	Statement	","	384:24:9701:9701	6512709	9	True				
ANR	6512788	Statement	it	384:26:9703:9704	6512709	10	True				
ANR	6512789	Statement	","	384:28:9705:9705	6512709	11	True				
ANR	6512790	Statement	win	384:30:9707:9709	6512709	12	True				
ANR	6512791	Statement	)	384:33:9710:9710	6512709	13	True				
ANR	6512792	CompoundStatement		8:35:314:314	6512709	14					
ANR	6512793	Statement	char	385:2:9716:9719	6512709	0	True				
ANR	6512794	Statement	*	385:7:9721:9721	6512709	1	True				
ANR	6512795	Statement	handle	385:8:9722:9727	6512709	2	True				
ANR	6512796	Statement	=	385:15:9729:9729	6512709	3	True				
ANR	6512797	Statement	r_str_newf	385:17:9731:9740	6512709	4	True				
ANR	6512798	Statement	(	385:28:9742:9742	6512709	5	True				
ANR	6512799	Statement	"""0x%08"""	385:29:9743:9749	6512709	6	True				
ANR	6512800	Statement	PFMT32x	385:36:9750:9756	6512709	7	True				
ANR	6512801	Statement	""""""	385:43:9757:9758	6512709	8	True				
ANR	6512802	Statement	","	385:45:9759:9759	6512709	9	True				
ANR	6512803	Statement	win	385:47:9761:9763	6512709	10	True				
ANR	6512804	Statement	->	385:50:9764:9765	6512709	11	True				
ANR	6512805	Statement	h	385:52:9766:9766	6512709	12	True				
ANR	6512806	Statement	)	385:53:9767:9767	6512709	13	True				
ANR	6512807	ExpressionStatement		385:54:9768:9768	6512709	14	True				
ANR	6512808	Statement	char	386:2:9772:9775	6512709	15	True				
ANR	6512809	Statement	*	386:7:9777:9777	6512709	16	True				
ANR	6512810	Statement	tid	386:8:9778:9780	6512709	17	True				
ANR	6512811	Statement	=	386:12:9782:9782	6512709	18	True				
ANR	6512812	Statement	r_str_newf	386:14:9784:9793	6512709	19	True				
ANR	6512813	Statement	(	386:25:9795:9795	6512709	20	True				
ANR	6512814	Statement	"""%"""	386:26:9796:9798	6512709	21	True				
ANR	6512815	Statement	PFMT32u	386:29:9799:9805	6512709	22	True				
ANR	6512816	Statement	""""""	386:36:9806:9807	6512709	23	True				
ANR	6512817	Statement	","	386:38:9808:9808	6512709	24	True				
ANR	6512818	Statement	win	386:40:9810:9812	6512709	25	True				
ANR	6512819	Statement	->	386:43:9813:9814	6512709	26	True				
ANR	6512820	Statement	tid	386:45:9815:9817	6512709	27	True				
ANR	6512821	Statement	)	386:48:9818:9818	6512709	28	True				
ANR	6512822	ExpressionStatement		386:49:9819:9819	6512709	29	True				
ANR	6512823	ExpressionStatement	"r_table_add_row ( tbl , handle , tid , win -> name , NULL )"	387:2:9823:9874	6512709	30	True				
ANR	6512824	CallExpression	"r_table_add_row ( tbl , handle , tid , win -> name , NULL )"		6512709	0					
ANR	6512825	Callee	r_table_add_row		6512709	0					
ANR	6512826	Identifier	r_table_add_row		6512709	0					
ANR	6512827	ArgumentList	tbl		6512709	1					
ANR	6512828	Argument	tbl		6512709	0					
ANR	6512829	Identifier	tbl		6512709	0					
ANR	6512830	Argument	handle		6512709	1					
ANR	6512831	Identifier	handle		6512709	0					
ANR	6512832	Argument	tid		6512709	2					
ANR	6512833	Identifier	tid		6512709	0					
ANR	6512834	Argument	win -> name		6512709	3					
ANR	6512835	PtrMemberAccess	win -> name		6512709	0					
ANR	6512836	Identifier	win		6512709	0					
ANR	6512837	Identifier	name		6512709	1					
ANR	6512838	Argument	NULL		6512709	4					
ANR	6512839	Identifier	NULL		6512709	0					
ANR	6512840	ExpressionStatement	free ( handle )	388:2:9878:9891	6512709	31	True				
ANR	6512841	CallExpression	free ( handle )		6512709	0					
ANR	6512842	Callee	free		6512709	0					
ANR	6512843	Identifier	free		6512709	0					
ANR	6512844	ArgumentList	handle		6512709	1					
ANR	6512845	Argument	handle		6512709	0					
ANR	6512846	Identifier	handle		6512709	0					
ANR	6512847	IdentifierDeclStatement	char * t = r_table_tofancystring ( tbl ) ;	390:1:9897:9934	6512709	15	True				
ANR	6512848	IdentifierDecl	* t = r_table_tofancystring ( tbl )		6512709	0					
ANR	6512849	IdentifierDeclType	char *		6512709	0					
ANR	6512850	Identifier	t		6512709	1					
ANR	6512851	AssignmentExpression	* t = r_table_tofancystring ( tbl )		6512709	2		=			
ANR	6512852	Identifier	t		6512709	0					
ANR	6512853	CallExpression	r_table_tofancystring ( tbl )		6512709	1					
ANR	6512854	Callee	r_table_tofancystring		6512709	0					
ANR	6512855	Identifier	r_table_tofancystring		6512709	0					
ANR	6512856	ArgumentList	tbl		6512709	1					
ANR	6512857	Argument	tbl		6512709	0					
ANR	6512858	Identifier	tbl		6512709	0					
ANR	6512859	ExpressionStatement	dbg -> cb_printf ( t )	391:1:9937:9955	6512709	16	True				
ANR	6512860	CallExpression	dbg -> cb_printf ( t )		6512709	0					
ANR	6512861	Callee	dbg -> cb_printf		6512709	0					
ANR	6512862	PtrMemberAccess	dbg -> cb_printf		6512709	0					
ANR	6512863	Identifier	dbg		6512709	0					
ANR	6512864	Identifier	cb_printf		6512709	1					
ANR	6512865	ArgumentList	t		6512709	1					
ANR	6512866	Argument	t		6512709	0					
ANR	6512867	Identifier	t		6512709	0					
ANR	6512868	ExpressionStatement	free ( t )	392:1:9958:9966	6512709	17	True				
ANR	6512869	CallExpression	free ( t )		6512709	0					
ANR	6512870	Callee	free		6512709	0					
ANR	6512871	Identifier	free		6512709	0					
ANR	6512872	ArgumentList	t		6512709	1					
ANR	6512873	Argument	t		6512709	0					
ANR	6512874	Identifier	t		6512709	0					
ANR	6512875	ExpressionStatement	r_table_free ( tbl )	393:1:9969:9987	6512709	18	True				
ANR	6512876	CallExpression	r_table_free ( tbl )		6512709	0					
ANR	6512877	Callee	r_table_free		6512709	0					
ANR	6512878	Identifier	r_table_free		6512709	0					
ANR	6512879	ArgumentList	tbl		6512709	1					
ANR	6512880	Argument	tbl		6512709	0					
ANR	6512881	Identifier	tbl		6512709	0					
ANR	6512882	ReturnType	static void		6512709	1					
ANR	6512883	Identifier	__print_windows		6512709	2					
ANR	6512884	ParameterList	"RDebug * dbg , RList * windows"		6512709	3					
ANR	6512885	Parameter	RDebug * dbg	377:28:9368:9378	6512709	0	True				
ANR	6512886	ParameterType	RDebug *		6512709	0					
ANR	6512887	Identifier	dbg		6512709	1					
ANR	6512888	Parameter	RList * windows	377:41:9381:9394	6512709	1	True				
ANR	6512889	ParameterType	RList *		6512709	0					
ANR	6512890	Identifier	windows		6512709	1					
ANR	6512891	CFGEntryNode	ENTRY		6512709		True				
ANR	6512892	CFGExitNode	EXIT		6512709		True				
ANR	6512893	Symbol	win -> name		6512709						
ANR	6512894	Symbol	NULL		6512709						
ANR	6512895	Symbol	ST32_MAX		6512709						
ANR	6512896	Symbol	* win		6512709						
ANR	6512897	Symbol	dbg		6512709						
ANR	6512898	Symbol	handle		6512709						
ANR	6512899	Symbol	it		6512709						
ANR	6512900	Symbol	windows		6512709						
ANR	6512901	Symbol	tid		6512709						
ANR	6512902	Symbol	r_table_tofancystring		6512709						
ANR	6512903	Symbol	t		6512709						
ANR	6512904	Symbol	r_table_new		6512709						
ANR	6512905	Symbol	r_table_type		6512709						
ANR	6512906	Symbol	win		6512709						
ANR	6512907	Symbol	tbl		6512709						
ANR	6512908	Function	r_w32_print_windows	396:0:9992:10249							
ANR	6512909	FunctionDef	r_w32_print_windows (RDebug * dbg)		6512908	0					
ANR	6512910	CompoundStatement		396:44:10036:10249	6512908	0					
ANR	6512911	IdentifierDeclStatement	RList * windows = __get_windows ( dbg ) ;	397:1:10039:10075	6512908	0	True				
ANR	6512912	IdentifierDecl	* windows = __get_windows ( dbg )		6512908	0					
ANR	6512913	IdentifierDeclType	RList *		6512908	0					
ANR	6512914	Identifier	windows		6512908	1					
ANR	6512915	AssignmentExpression	* windows = __get_windows ( dbg )		6512908	2		=			
ANR	6512916	Identifier	windows		6512908	0					
ANR	6512917	CallExpression	__get_windows ( dbg )		6512908	1					
ANR	6512918	Callee	__get_windows		6512908	0					
ANR	6512919	Identifier	__get_windows		6512908	0					
ANR	6512920	ArgumentList	dbg		6512908	1					
ANR	6512921	Argument	dbg		6512908	0					
ANR	6512922	Identifier	dbg		6512908	0					
ANR	6512923	IfStatement	if ( windows )		6512908	1					
ANR	6512924	Condition	windows	398:5:10082:10088	6512908	0	True				
ANR	6512925	Identifier	windows		6512908	0					
ANR	6512926	CompoundStatement		3:14:54:54	6512908	1					
ANR	6512927	IfStatement	if ( ! windows -> length )		6512908	0					
ANR	6512928	Condition	! windows -> length	399:6:10099:10114	6512908	0	True				
ANR	6512929	UnaryOperationExpression	! windows -> length		6512908	0					
ANR	6512930	UnaryOperator	!		6512908	0					
ANR	6512931	PtrMemberAccess	windows -> length		6512908	1					
ANR	6512932	Identifier	windows		6512908	0					
ANR	6512933	Identifier	length		6512908	1					
ANR	6512934	CompoundStatement		4:24:80:80	6512908	1					
ANR	6512935	ExpressionStatement	"dbg -> cb_printf ( ""No windows for this process.\\n"" )"	400:3:10122:10171	6512908	0	True				
ANR	6512936	CallExpression	"dbg -> cb_printf ( ""No windows for this process.\\n"" )"		6512908	0					
ANR	6512937	Callee	dbg -> cb_printf		6512908	0					
ANR	6512938	PtrMemberAccess	dbg -> cb_printf		6512908	0					
ANR	6512939	Identifier	dbg		6512908	0					
ANR	6512940	Identifier	cb_printf		6512908	1					
ANR	6512941	ArgumentList	"""No windows for this process.\\n"""		6512908	1					
ANR	6512942	Argument	"""No windows for this process.\\n"""		6512908	0					
ANR	6512943	PrimaryExpression	"""No windows for this process.\\n"""		6512908	0					
ANR	6512944	ReturnStatement	return ;	401:3:10176:10182	6512908	1	True				
ANR	6512945	ExpressionStatement	"__print_windows ( dbg , windows )"	403:2:10190:10220	6512908	1	True				
ANR	6512946	CallExpression	"__print_windows ( dbg , windows )"		6512908	0					
ANR	6512947	Callee	__print_windows		6512908	0					
ANR	6512948	Identifier	__print_windows		6512908	0					
ANR	6512949	ArgumentList	dbg		6512908	1					
ANR	6512950	Argument	dbg		6512908	0					
ANR	6512951	Identifier	dbg		6512908	0					
ANR	6512952	Argument	windows		6512908	1					
ANR	6512953	Identifier	windows		6512908	0					
ANR	6512954	ExpressionStatement	r_list_free ( windows )	405:1:10226:10247	6512908	2	True				
ANR	6512955	CallExpression	r_list_free ( windows )		6512908	0					
ANR	6512956	Callee	r_list_free		6512908	0					
ANR	6512957	Identifier	r_list_free		6512908	0					
ANR	6512958	ArgumentList	windows		6512908	1					
ANR	6512959	Argument	windows		6512908	0					
ANR	6512960	Identifier	windows		6512908	0					
ANR	6512961	ReturnType	R_API void		6512908	1					
ANR	6512962	Identifier	r_w32_print_windows		6512908	2					
ANR	6512963	ParameterList	RDebug * dbg		6512908	3					
ANR	6512964	Parameter	RDebug * dbg	396:31:10023:10033	6512908	0	True				
ANR	6512965	ParameterType	RDebug *		6512908	0					
ANR	6512966	Identifier	dbg		6512908	1					
ANR	6512967	CFGEntryNode	ENTRY		6512908		True				
ANR	6512968	CFGExitNode	EXIT		6512908		True				
ANR	6512969	Symbol	__get_windows		6512908						
ANR	6512970	Symbol	windows -> length		6512908						
ANR	6512971	Symbol	* windows		6512908						
ANR	6512972	Symbol	dbg		6512908						
ANR	6512973	Symbol	windows		6512908						
ANR	6512974	Function	r_w32_add_winmsg_breakpoint	408:0:10252:11593							
ANR	6512975	FunctionDef	"r_w32_add_winmsg_breakpoint (RDebug * dbg , char * name)"		6512974	0					
ANR	6512976	CompoundStatement		408:64:10316:11593	6512974	0					
ANR	6512977	ExpressionStatement	"r_return_val_if_fail ( dbg && name , false )"	409:1:10319:10360	6512974	0	True				
ANR	6512978	CallExpression	"r_return_val_if_fail ( dbg && name , false )"		6512974	0					
ANR	6512979	Callee	r_return_val_if_fail		6512974	0					
ANR	6512980	Identifier	r_return_val_if_fail		6512974	0					
ANR	6512981	ArgumentList	dbg && name		6512974	1					
ANR	6512982	Argument	dbg && name		6512974	0					
ANR	6512983	AndExpression	dbg && name		6512974	0		&&			
ANR	6512984	Identifier	dbg		6512974	0					
ANR	6512985	Identifier	name		6512974	1					
ANR	6512986	Argument	false		6512974	1					
ANR	6512987	Identifier	false		6512974	0					
ANR	6512988	ExpressionStatement	r_str_trim ( name )	410:1:10363:10380	6512974	1	True				
ANR	6512989	CallExpression	r_str_trim ( name )		6512974	0					
ANR	6512990	Callee	r_str_trim		6512974	0					
ANR	6512991	Identifier	r_str_trim		6512974	0					
ANR	6512992	ArgumentList	name		6512974	1					
ANR	6512993	Argument	name		6512974	0					
ANR	6512994	Identifier	name		6512974	0					
ANR	6512995	IdentifierDeclStatement	"char * window_id = strchr ( name , ' ' ) ;"	411:1:10383:10419	6512974	2	True				
ANR	6512996	IdentifierDecl	"* window_id = strchr ( name , ' ' )"		6512974	0					
ANR	6512997	IdentifierDeclType	char *		6512974	0					
ANR	6512998	Identifier	window_id		6512974	1					
ANR	6512999	AssignmentExpression	"* window_id = strchr ( name , ' ' )"		6512974	2		=			
ANR	6513000	Identifier	window_id		6512974	0					
ANR	6513001	CallExpression	"strchr ( name , ' ' )"		6512974	1					
ANR	6513002	Callee	strchr		6512974	0					
ANR	6513003	Identifier	strchr		6512974	0					
ANR	6513004	ArgumentList	name		6512974	1					
ANR	6513005	Argument	name		6512974	0					
ANR	6513006	Identifier	name		6512974	0					
ANR	6513007	Argument	' '		6512974	1					
ANR	6513008	PrimaryExpression	' '		6512974	0					
ANR	6513009	IfStatement	if ( window_id )		6512974	3					
ANR	6513010	Condition	window_id	412:5:10426:10434	6512974	0	True				
ANR	6513011	Identifier	window_id		6512974	0					
ANR	6513012	CompoundStatement		5:16:120:120	6512974	1					
ANR	6513013	ExpressionStatement	* window_id = 0	413:2:10441:10455	6512974	0	True				
ANR	6513014	AssignmentExpression	* window_id = 0		6512974	0		=			
ANR	6513015	UnaryOperationExpression	* window_id		6512974	0					
ANR	6513016	UnaryOperator	*		6512974	0					
ANR	6513017	Identifier	window_id		6512974	1					
ANR	6513018	PrimaryExpression	0		6512974	1					
ANR	6513019	ExpressionStatement	window_id ++	414:2:10459:10470	6512974	1	True				
ANR	6513020	PostIncDecOperationExpression	window_id ++		6512974	0					
ANR	6513021	Identifier	window_id		6512974	0					
ANR	6513022	IncDec	++		6512974	1					
ANR	6513023	IdentifierDeclStatement	DWORD type = __get_msg_type ( name ) ;	416:1:10476:10510	6512974	4	True				
ANR	6513024	IdentifierDecl	type = __get_msg_type ( name )		6512974	0					
ANR	6513025	IdentifierDeclType	DWORD		6512974	0					
ANR	6513026	Identifier	type		6512974	1					
ANR	6513027	AssignmentExpression	type = __get_msg_type ( name )		6512974	2		=			
ANR	6513028	Identifier	type		6512974	0					
ANR	6513029	CallExpression	__get_msg_type ( name )		6512974	1					
ANR	6513030	Callee	__get_msg_type		6512974	0					
ANR	6513031	Identifier	__get_msg_type		6512974	0					
ANR	6513032	ArgumentList	name		6512974	1					
ANR	6513033	Argument	name		6512974	0					
ANR	6513034	Identifier	name		6512974	0					
ANR	6513035	IfStatement	if ( ! type )		6512974	5					
ANR	6513036	Condition	! type	417:5:10517:10521	6512974	0	True				
ANR	6513037	UnaryOperationExpression	! type		6512974	0					
ANR	6513038	UnaryOperator	!		6512974	0					
ANR	6513039	Identifier	type		6512974	1					
ANR	6513040	CompoundStatement		10:12:207:207	6512974	1					
ANR	6513041	ReturnStatement	return false ;	418:2:10528:10540	6512974	0	True				
ANR	6513042	Identifier	false		6512974	0					
ANR	6513043	IdentifierDeclStatement	ut64 offset = 0 ;	420:1:10546:10561	6512974	6	True				
ANR	6513044	IdentifierDecl	offset = 0		6512974	0					
ANR	6513045	IdentifierDeclType	ut64		6512974	0					
ANR	6513046	Identifier	offset		6512974	1					
ANR	6513047	AssignmentExpression	offset = 0		6512974	2		=			
ANR	6513048	Identifier	offset		6512974	0					
ANR	6513049	PrimaryExpression	0		6512974	1					
ANR	6513050	IfStatement	if ( window_id )		6512974	7					
ANR	6513051	Condition	window_id	421:5:10568:10576	6512974	0	True				
ANR	6513052	Identifier	window_id		6512974	0					
ANR	6513053	CompoundStatement		21:2:463:474	6512974	1					
ANR	6513054	IdentifierDeclStatement	RList * windows = __get_windows ( dbg ) ;	422:2:10583:10619	6512974	0	True				
ANR	6513055	IdentifierDecl	* windows = __get_windows ( dbg )		6512974	0					
ANR	6513056	IdentifierDeclType	RList *		6512974	0					
ANR	6513057	Identifier	windows		6512974	1					
ANR	6513058	AssignmentExpression	* windows = __get_windows ( dbg )		6512974	2		=			
ANR	6513059	Identifier	windows		6512974	0					
ANR	6513060	CallExpression	__get_windows ( dbg )		6512974	1					
ANR	6513061	Callee	__get_windows		6512974	0					
ANR	6513062	Identifier	__get_windows		6512974	0					
ANR	6513063	ArgumentList	dbg		6512974	1					
ANR	6513064	Argument	dbg		6512974	0					
ANR	6513065	Identifier	dbg		6512974	0					
ANR	6513066	IfStatement	if ( windows && ! windows -> length )		6512974	1					
ANR	6513067	Condition	windows && ! windows -> length	423:6:10627:10653	6512974	0	True				
ANR	6513068	AndExpression	windows && ! windows -> length		6512974	0		&&			
ANR	6513069	Identifier	windows		6512974	0					
ANR	6513070	UnaryOperationExpression	! windows -> length		6512974	1					
ANR	6513071	UnaryOperator	!		6512974	0					
ANR	6513072	PtrMemberAccess	windows -> length		6512974	1					
ANR	6513073	Identifier	windows		6512974	0					
ANR	6513074	Identifier	length		6512974	1					
ANR	6513075	CompoundStatement		16:35:339:339	6512974	1					
ANR	6513076	ExpressionStatement	"dbg -> cb_printf ( ""No windows for this process.\\n"" )"	424:3:10661:10710	6512974	0	True				
ANR	6513077	CallExpression	"dbg -> cb_printf ( ""No windows for this process.\\n"" )"		6512974	0					
ANR	6513078	Callee	dbg -> cb_printf		6512974	0					
ANR	6513079	PtrMemberAccess	dbg -> cb_printf		6512974	0					
ANR	6513080	Identifier	dbg		6512974	0					
ANR	6513081	Identifier	cb_printf		6512974	1					
ANR	6513082	ArgumentList	"""No windows for this process.\\n"""		6512974	1					
ANR	6513083	Argument	"""No windows for this process.\\n"""		6512974	0					
ANR	6513084	PrimaryExpression	"""No windows for this process.\\n"""		6512974	0					
ANR	6513085	IdentifierDeclStatement	"ut64 win_h = r_num_math ( NULL , window_id ) ;"	426:2:10718:10759	6512974	2	True				
ANR	6513086	IdentifierDecl	"win_h = r_num_math ( NULL , window_id )"		6512974	0					
ANR	6513087	IdentifierDeclType	ut64		6512974	0					
ANR	6513088	Identifier	win_h		6512974	1					
ANR	6513089	AssignmentExpression	"win_h = r_num_math ( NULL , window_id )"		6512974	2		=			
ANR	6513090	Identifier	win_h		6512974	0					
ANR	6513091	CallExpression	"r_num_math ( NULL , window_id )"		6512974	1					
ANR	6513092	Callee	r_num_math		6512974	0					
ANR	6513093	Identifier	r_num_math		6512974	0					
ANR	6513094	ArgumentList	NULL		6512974	1					
ANR	6513095	Argument	NULL		6512974	0					
ANR	6513096	Identifier	NULL		6512974	0					
ANR	6513097	Argument	window_id		6512974	1					
ANR	6513098	Identifier	window_id		6512974	0					
ANR	6513099	IdentifierDeclStatement	RListIter * it ;	427:2:10763:10776	6512974	3	True				
ANR	6513100	IdentifierDecl	* it		6512974	0					
ANR	6513101	IdentifierDeclType	RListIter *		6512974	0					
ANR	6513102	Identifier	it		6512974	1					
ANR	6513103	IdentifierDeclStatement	window * win ;	428:2:10780:10791	6512974	4	True				
ANR	6513104	IdentifierDecl	* win		6512974	0					
ANR	6513105	IdentifierDeclType	window *		6512974	0					
ANR	6513106	Identifier	win		6512974	1					
ANR	6513107	Statement	r_list_foreach	429:2:10795:10808	6512974	5	True				
ANR	6513108	Statement	(	429:17:10810:10810	6512974	6	True				
ANR	6513109	Statement	windows	429:18:10811:10817	6512974	7	True				
ANR	6513110	Statement	","	429:25:10818:10818	6512974	8	True				
ANR	6513111	Statement	it	429:27:10820:10821	6512974	9	True				
ANR	6513112	Statement	","	429:29:10822:10822	6512974	10	True				
ANR	6513113	Statement	win	429:31:10824:10826	6512974	11	True				
ANR	6513114	Statement	)	429:34:10827:10827	6512974	12	True				
ANR	6513115	CompoundStatement		22:36:512:512	6512974	13					
ANR	6513116	IfStatement	"if ( win -> h == win_h || ! strnicmp ( win -> name , window_id , strlen ( window_id ) ) )"		6512974	0					
ANR	6513117	Condition	"win -> h == win_h || ! strnicmp ( win -> name , window_id , strlen ( window_id ) )"	430:7:10838:10908	6512974	0	True				
ANR	6513118	OrExpression	"win -> h == win_h || ! strnicmp ( win -> name , window_id , strlen ( window_id ) )"		6512974	0		||			
ANR	6513119	EqualityExpression	win -> h == win_h		6512974	0		==			
ANR	6513120	PtrMemberAccess	win -> h		6512974	0					
ANR	6513121	Identifier	win		6512974	0					
ANR	6513122	Identifier	h		6512974	1					
ANR	6513123	Identifier	win_h		6512974	1					
ANR	6513124	UnaryOperationExpression	"! strnicmp ( win -> name , window_id , strlen ( window_id ) )"		6512974	1					
ANR	6513125	UnaryOperator	!		6512974	0					
ANR	6513126	CallExpression	"strnicmp ( win -> name , window_id , strlen ( window_id ) )"		6512974	1					
ANR	6513127	Callee	strnicmp		6512974	0					
ANR	6513128	Identifier	strnicmp		6512974	0					
ANR	6513129	ArgumentList	win -> name		6512974	1					
ANR	6513130	Argument	win -> name		6512974	0					
ANR	6513131	PtrMemberAccess	win -> name		6512974	0					
ANR	6513132	Identifier	win		6512974	0					
ANR	6513133	Identifier	name		6512974	1					
ANR	6513134	Argument	window_id		6512974	1					
ANR	6513135	Identifier	window_id		6512974	0					
ANR	6513136	Argument	strlen ( window_id )		6512974	2					
ANR	6513137	CallExpression	strlen ( window_id )		6512974	0					
ANR	6513138	Callee	strlen		6512974	0					
ANR	6513139	Identifier	strlen		6512974	0					
ANR	6513140	ArgumentList	window_id		6512974	1					
ANR	6513141	Argument	window_id		6512974	0					
ANR	6513142	Identifier	window_id		6512974	0					
ANR	6513143	CompoundStatement		23:80:594:594	6512974	1					
ANR	6513144	ExpressionStatement	offset = win -> proc	431:4:10917:10935	6512974	0	True				
ANR	6513145	AssignmentExpression	offset = win -> proc		6512974	0		=			
ANR	6513146	Identifier	offset		6512974	0					
ANR	6513147	PtrMemberAccess	win -> proc		6512974	1					
ANR	6513148	Identifier	win		6512974	0					
ANR	6513149	Identifier	proc		6512974	1					
ANR	6513150	BreakStatement	break ;	432:4:10941:10946	6512974	1	True				
ANR	6513151	IfStatement	if ( ! offset )		6512974	14					
ANR	6513152	Condition	! offset	435:6:10963:10969	6512974	0	True				
ANR	6513153	UnaryOperationExpression	! offset		6512974	0					
ANR	6513154	UnaryOperator	!		6512974	0					
ANR	6513155	Identifier	offset		6512974	1					
ANR	6513156	CompoundStatement		28:15:655:655	6512974	1					
ANR	6513157	ExpressionStatement	"dbg -> cb_printf ( ""Window not found, try these:\\n"" )"	436:3:10977:11026	6512974	0	True				
ANR	6513158	CallExpression	"dbg -> cb_printf ( ""Window not found, try these:\\n"" )"		6512974	0					
ANR	6513159	Callee	dbg -> cb_printf		6512974	0					
ANR	6513160	PtrMemberAccess	dbg -> cb_printf		6512974	0					
ANR	6513161	Identifier	dbg		6512974	0					
ANR	6513162	Identifier	cb_printf		6512974	1					
ANR	6513163	ArgumentList	"""Window not found, try these:\\n"""		6512974	1					
ANR	6513164	Argument	"""Window not found, try these:\\n"""		6512974	0					
ANR	6513165	PrimaryExpression	"""Window not found, try these:\\n"""		6512974	0					
ANR	6513166	ExpressionStatement	"__print_windows ( dbg , windows )"	437:3:11031:11061	6512974	1	True				
ANR	6513167	CallExpression	"__print_windows ( dbg , windows )"		6512974	0					
ANR	6513168	Callee	__print_windows		6512974	0					
ANR	6513169	Identifier	__print_windows		6512974	0					
ANR	6513170	ArgumentList	dbg		6512974	1					
ANR	6513171	Argument	dbg		6512974	0					
ANR	6513172	Identifier	dbg		6512974	0					
ANR	6513173	Argument	windows		6512974	1					
ANR	6513174	Identifier	windows		6512974	0					
ANR	6513175	ExpressionStatement	r_list_free ( windows )	439:2:11069:11090	6512974	15	True				
ANR	6513176	CallExpression	r_list_free ( windows )		6512974	0					
ANR	6513177	Callee	r_list_free		6512974	0					
ANR	6513178	Identifier	r_list_free		6512974	0					
ANR	6513179	ArgumentList	windows		6512974	1					
ANR	6513180	Argument	windows		6512974	0					
ANR	6513181	Identifier	windows		6512974	0					
ANR	6513182	ElseStatement	else		6512974	0					
ANR	6513183	CompoundStatement		33:8:783:783	6512974	0					
ANR	6513184	ExpressionStatement	offset = __get_dispatchmessage_offset ( dbg )	441:2:11104:11147	6512974	0	True				
ANR	6513185	AssignmentExpression	offset = __get_dispatchmessage_offset ( dbg )		6512974	0		=			
ANR	6513186	Identifier	offset		6512974	0					
ANR	6513187	CallExpression	__get_dispatchmessage_offset ( dbg )		6512974	1					
ANR	6513188	Callee	__get_dispatchmessage_offset		6512974	0					
ANR	6513189	Identifier	__get_dispatchmessage_offset		6512974	0					
ANR	6513190	ArgumentList	dbg		6512974	1					
ANR	6513191	Argument	dbg		6512974	0					
ANR	6513192	Identifier	dbg		6512974	0					
ANR	6513193	IfStatement	if ( ! offset )		6512974	8					
ANR	6513194	Condition	! offset	443:5:11157:11163	6512974	0	True				
ANR	6513195	UnaryOperationExpression	! offset		6512974	0					
ANR	6513196	UnaryOperator	!		6512974	0					
ANR	6513197	Identifier	offset		6512974	1					
ANR	6513198	CompoundStatement		36:14:849:849	6512974	1					
ANR	6513199	ReturnStatement	return false ;	444:2:11170:11182	6512974	0	True				
ANR	6513200	Identifier	false		6512974	0					
ANR	6513201	ExpressionStatement	"r_debug_bp_add ( dbg , offset , 0 , 0 , 0 , NULL , 0 )"	446:1:11188:11234	6512974	9	True				
ANR	6513202	CallExpression	"r_debug_bp_add ( dbg , offset , 0 , 0 , 0 , NULL , 0 )"		6512974	0					
ANR	6513203	Callee	r_debug_bp_add		6512974	0					
ANR	6513204	Identifier	r_debug_bp_add		6512974	0					
ANR	6513205	ArgumentList	dbg		6512974	1					
ANR	6513206	Argument	dbg		6512974	0					
ANR	6513207	Identifier	dbg		6512974	0					
ANR	6513208	Argument	offset		6512974	1					
ANR	6513209	Identifier	offset		6512974	0					
ANR	6513210	Argument	0		6512974	2					
ANR	6513211	PrimaryExpression	0		6512974	0					
ANR	6513212	Argument	0		6512974	3					
ANR	6513213	PrimaryExpression	0		6512974	0					
ANR	6513214	Argument	0		6512974	4					
ANR	6513215	PrimaryExpression	0		6512974	0					
ANR	6513216	Argument	NULL		6512974	5					
ANR	6513217	Identifier	NULL		6512974	0					
ANR	6513218	Argument	0		6512974	6					
ANR	6513219	PrimaryExpression	0		6512974	0					
ANR	6513220	IdentifierDeclStatement	char * cond ;	447:1:11237:11247	6512974	10	True				
ANR	6513221	IdentifierDecl	* cond		6512974	0					
ANR	6513222	IdentifierDeclType	char *		6512974	0					
ANR	6513223	Identifier	cond		6512974	1					
ANR	6513224	IfStatement	if ( window_id )		6512974	11					
ANR	6513225	Condition	window_id	448:5:11254:11262	6512974	0	True				
ANR	6513226	Identifier	window_id		6512974	0					
ANR	6513227	CompoundStatement		41:16:948:948	6512974	1					
ANR	6513228	ExpressionStatement	"cond = r_str_newf ( ""?= `ae %d,edx,-`"" , type )"	449:2:11269:11313	6512974	0	True				
ANR	6513229	AssignmentExpression	"cond = r_str_newf ( ""?= `ae %d,edx,-`"" , type )"		6512974	0		=			
ANR	6513230	Identifier	cond		6512974	0					
ANR	6513231	CallExpression	"r_str_newf ( ""?= `ae %d,edx,-`"" , type )"		6512974	1					
ANR	6513232	Callee	r_str_newf		6512974	0					
ANR	6513233	Identifier	r_str_newf		6512974	0					
ANR	6513234	ArgumentList	"""?= `ae %d,edx,-`"""		6512974	1					
ANR	6513235	Argument	"""?= `ae %d,edx,-`"""		6512974	0					
ANR	6513236	PrimaryExpression	"""?= `ae %d,edx,-`"""		6512974	0					
ANR	6513237	Argument	type		6512974	1					
ANR	6513238	Identifier	type		6512974	0					
ANR	6513239	ElseStatement	else		6512974	0					
ANR	6513240	CompoundStatement		44:2:1010:1019	6512974	0					
ANR	6513241	IdentifierDeclStatement	char * reg ;	451:2:11327:11336	6512974	0	True				
ANR	6513242	IdentifierDecl	* reg		6512974	0					
ANR	6513243	IdentifierDeclType	char *		6512974	0					
ANR	6513244	Identifier	reg		6512974	1					
ANR	6513245	IfStatement	if ( dbg -> bits == R_SYS_BITS_64 )		6512974	1					
ANR	6513246	Condition	dbg -> bits == R_SYS_BITS_64	452:6:11344:11369	6512974	0	True				
ANR	6513247	EqualityExpression	dbg -> bits == R_SYS_BITS_64		6512974	0		==			
ANR	6513248	PtrMemberAccess	dbg -> bits		6512974	0					
ANR	6513249	Identifier	dbg		6512974	0					
ANR	6513250	Identifier	bits		6512974	1					
ANR	6513251	Identifier	R_SYS_BITS_64		6512974	1					
ANR	6513252	CompoundStatement		45:34:1055:1055	6512974	1					
ANR	6513253	ExpressionStatement	"reg = ""rcx"""	453:3:11377:11388	6512974	0	True				
ANR	6513254	AssignmentExpression	"reg = ""rcx"""		6512974	0		=			
ANR	6513255	Identifier	reg		6512974	0					
ANR	6513256	PrimaryExpression	"""rcx"""		6512974	1					
ANR	6513257	ElseStatement	else		6512974	0					
ANR	6513258	CompoundStatement		47:9:1082:1082	6512974	0					
ANR	6513259	ExpressionStatement	"reg = ""ecx"""	455:3:11404:11415	6512974	0	True				
ANR	6513260	AssignmentExpression	"reg = ""ecx"""		6512974	0		=			
ANR	6513261	Identifier	reg		6512974	0					
ANR	6513262	PrimaryExpression	"""ecx"""		6512974	1					
ANR	6513263	ExpressionStatement	"cond = r_str_newf ( ""?= `ae %d,%s,%d,+,[4],-`"" , type , reg , dbg -> bits )"	457:2:11423:11491	6512974	2	True				
ANR	6513264	AssignmentExpression	"cond = r_str_newf ( ""?= `ae %d,%s,%d,+,[4],-`"" , type , reg , dbg -> bits )"		6512974	0		=			
ANR	6513265	Identifier	cond		6512974	0					
ANR	6513266	CallExpression	"r_str_newf ( ""?= `ae %d,%s,%d,+,[4],-`"" , type , reg , dbg -> bits )"		6512974	1					
ANR	6513267	Callee	r_str_newf		6512974	0					
ANR	6513268	Identifier	r_str_newf		6512974	0					
ANR	6513269	ArgumentList	"""?= `ae %d,%s,%d,+,[4],-`"""		6512974	1					
ANR	6513270	Argument	"""?= `ae %d,%s,%d,+,[4],-`"""		6512974	0					
ANR	6513271	PrimaryExpression	"""?= `ae %d,%s,%d,+,[4],-`"""		6512974	0					
ANR	6513272	Argument	type		6512974	1					
ANR	6513273	Identifier	type		6512974	0					
ANR	6513274	Argument	reg		6512974	2					
ANR	6513275	Identifier	reg		6512974	0					
ANR	6513276	Argument	dbg -> bits		6512974	3					
ANR	6513277	PtrMemberAccess	dbg -> bits		6512974	0					
ANR	6513278	Identifier	dbg		6512974	0					
ANR	6513279	Identifier	bits		6512974	1					
ANR	6513280	Statement	dbg	459:1:11497:11499	6512974	12	True				
ANR	6513281	Statement	->	459:4:11500:11501	6512974	13	True				
ANR	6513282	Statement	corebind	459:6:11502:11509	6512974	14	True				
ANR	6513283	Statement	.	459:14:11510:11510	6512974	15	True				
ANR	6513284	Statement	cmdf	459:15:11511:11514	6512974	16	True				
ANR	6513285	Statement	(	459:20:11516:11516	6512974	17	True				
ANR	6513286	Statement	dbg	459:21:11517:11519	6512974	18	True				
ANR	6513287	Statement	->	459:24:11520:11521	6512974	19	True				
ANR	6513288	Statement	corebind	459:26:11522:11529	6512974	20	True				
ANR	6513289	Statement	.	459:34:11530:11530	6512974	21	True				
ANR	6513290	Statement	core	459:35:11531:11534	6512974	22	True				
ANR	6513291	Statement	","	459:39:11535:11535	6512974	23	True				
ANR	6513292	Statement	"""\\""dbC 0x%"""	459:41:11537:11547	6512974	24	True				
ANR	6513293	Statement	PFMT64x	459:52:11548:11554	6512974	25	True				
ANR	6513294	Statement	""" %s\\"""""	459:59:11555:11561	6512974	26	True				
ANR	6513295	Statement	","	459:66:11562:11562	6512974	27	True				
ANR	6513296	Statement	offset	459:68:11564:11569	6512974	28	True				
ANR	6513297	Statement	","	459:74:11570:11570	6512974	29	True				
ANR	6513298	Statement	cond	459:76:11572:11575	6512974	30	True				
ANR	6513299	Statement	)	459:80:11576:11576	6512974	31	True				
ANR	6513300	ExpressionStatement		459:81:11577:11577	6512974	32	True				
ANR	6513301	ReturnStatement	return true ;	460:1:11580:11591	6512974	33	True				
ANR	6513302	Identifier	true		6512974	0					
ANR	6513303	ReturnType	R_API bool		6512974	1					
ANR	6513304	Identifier	r_w32_add_winmsg_breakpoint		6512974	2					
ANR	6513305	ParameterList	"RDebug * dbg , char * name"		6512974	3					
ANR	6513306	Parameter	RDebug * dbg	408:39:10291:10301	6512974	0	True				
ANR	6513307	ParameterType	RDebug *		6512974	0					
ANR	6513308	Identifier	dbg		6512974	1					
ANR	6513309	Parameter	char * name	408:52:10304:10313	6512974	1	True				
ANR	6513310	ParameterType	char *		6512974	0					
ANR	6513311	Identifier	name		6512974	1					
ANR	6513312	CFGEntryNode	ENTRY		6512974		True				
ANR	6513313	CFGExitNode	EXIT		6512974		True				
ANR	6513314	CFGErrorNode	ERROR		6512974		True				
ANR	6513315	Symbol	* windows		6512974						
ANR	6513316	Symbol	* win		6512974						
ANR	6513317	Symbol	strchr		6512974						
ANR	6513318	Symbol	dbg -> bits		6512974						
ANR	6513319	Symbol	r_str_newf		6512974						
ANR	6513320	Symbol	type		6512974						
ANR	6513321	Symbol	cond		6512974						
ANR	6513322	Symbol	r_num_math		6512974						
ANR	6513323	Symbol	* window_id		6512974						
ANR	6513324	Symbol	strlen		6512974						
ANR	6513325	Symbol	reg		6512974						
ANR	6513326	Symbol	win -> proc		6512974						
ANR	6513327	Symbol	window_id		6512974						
ANR	6513328	Symbol	win -> h		6512974						
ANR	6513329	Symbol	strnicmp		6512974						
ANR	6513330	Symbol	win		6512974						
ANR	6513331	Symbol	R_SYS_BITS_64		6512974						
ANR	6513332	Symbol	win -> name		6512974						
ANR	6513333	Symbol	NULL		6512974						
ANR	6513334	Symbol	offset		6512974						
ANR	6513335	Symbol	__get_dispatchmessage_offset		6512974						
ANR	6513336	Symbol	dbg		6512974						
ANR	6513337	Symbol	false		6512974						
ANR	6513338	Symbol	it		6512974						
ANR	6513339	Symbol	windows		6512974						
ANR	6513340	Symbol	* dbg		6512974						
ANR	6513341	Symbol	__get_msg_type		6512974						
ANR	6513342	Symbol	__get_windows		6512974						
ANR	6513343	Symbol	windows -> length		6512974						
ANR	6513344	Symbol	name		6512974						
ANR	6513345	Symbol	true		6512974						
ANR	6513346	Symbol	win_h		6512974						
