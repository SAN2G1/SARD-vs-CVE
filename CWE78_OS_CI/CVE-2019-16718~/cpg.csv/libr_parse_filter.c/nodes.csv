command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5009751	File	data/converged/CVE-2019-16718~_radare2/libr_parse_filter.c								
ANR	5009752	Function	isvalidflag	14:0:340:557							
ANR	5009753	FunctionDef	isvalidflag (RFlagItem * flag)		5009752	0					
ANR	5009754	CompoundStatement		14:41:381:557	5009752	0					
ANR	5009755	IfStatement	if ( flag )		5009752	0					
ANR	5009756	Condition	flag	15:5:388:391	5009752	0	True				
ANR	5009757	Identifier	flag		5009752	0					
ANR	5009758	CompoundStatement		2:11:12:12	5009752	1					
ANR	5009759	IfStatement	"if ( strstr ( flag -> name , ""main"" ) || strstr ( flag -> name , ""entry"" ) )"		5009752	0					
ANR	5009760	Condition	"strstr ( flag -> name , ""main"" ) || strstr ( flag -> name , ""entry"" )"	16:6:402:460	5009752	0	True				
ANR	5009761	OrExpression	"strstr ( flag -> name , ""main"" ) || strstr ( flag -> name , ""entry"" )"		5009752	0		||			
ANR	5009762	CallExpression	"strstr ( flag -> name , ""main"" )"		5009752	0					
ANR	5009763	Callee	strstr		5009752	0					
ANR	5009764	Identifier	strstr		5009752	0					
ANR	5009765	ArgumentList	flag -> name		5009752	1					
ANR	5009766	Argument	flag -> name		5009752	0					
ANR	5009767	PtrMemberAccess	flag -> name		5009752	0					
ANR	5009768	Identifier	flag		5009752	0					
ANR	5009769	Identifier	name		5009752	1					
ANR	5009770	Argument	"""main"""		5009752	1					
ANR	5009771	PrimaryExpression	"""main"""		5009752	0					
ANR	5009772	CallExpression	"strstr ( flag -> name , ""entry"" )"		5009752	1					
ANR	5009773	Callee	strstr		5009752	0					
ANR	5009774	Identifier	strstr		5009752	0					
ANR	5009775	ArgumentList	flag -> name		5009752	1					
ANR	5009776	Argument	flag -> name		5009752	0					
ANR	5009777	PtrMemberAccess	flag -> name		5009752	0					
ANR	5009778	Identifier	flag		5009752	0					
ANR	5009779	Identifier	name		5009752	1					
ANR	5009780	Argument	"""entry"""		5009752	1					
ANR	5009781	PrimaryExpression	"""entry"""		5009752	0					
ANR	5009782	CompoundStatement		3:67:81:81	5009752	1					
ANR	5009783	ReturnStatement	return true ;	17:3:468:479	5009752	0	True				
ANR	5009784	Identifier	true		5009752	0					
ANR	5009785	IfStatement	"if ( strchr ( flag -> name , '.' ) )"		5009752	1					
ANR	5009786	Condition	"strchr ( flag -> name , '.' )"	19:6:491:514	5009752	0	True				
ANR	5009787	CallExpression	"strchr ( flag -> name , '.' )"		5009752	0					
ANR	5009788	Callee	strchr		5009752	0					
ANR	5009789	Identifier	strchr		5009752	0					
ANR	5009790	ArgumentList	flag -> name		5009752	1					
ANR	5009791	Argument	flag -> name		5009752	0					
ANR	5009792	PtrMemberAccess	flag -> name		5009752	0					
ANR	5009793	Identifier	flag		5009752	0					
ANR	5009794	Identifier	name		5009752	1					
ANR	5009795	Argument	'.'		5009752	1					
ANR	5009796	PrimaryExpression	'.'		5009752	0					
ANR	5009797	CompoundStatement		6:32:135:135	5009752	1					
ANR	5009798	ReturnStatement	return true ;	20:3:522:533	5009752	0	True				
ANR	5009799	Identifier	true		5009752	0					
ANR	5009800	ReturnStatement	return false ;	23:1:543:555	5009752	1	True				
ANR	5009801	Identifier	false		5009752	0					
ANR	5009802	ReturnType	static bool		5009752	1					
ANR	5009803	Identifier	isvalidflag		5009752	2					
ANR	5009804	ParameterList	RFlagItem * flag		5009752	3					
ANR	5009805	Parameter	RFlagItem * flag	14:24:364:378	5009752	0	True				
ANR	5009806	ParameterType	RFlagItem *		5009752	0					
ANR	5009807	Identifier	flag		5009752	1					
ANR	5009808	CFGEntryNode	ENTRY		5009752		True				
ANR	5009809	CFGExitNode	EXIT		5009752		True				
ANR	5009810	Symbol	flag		5009752						
ANR	5009811	Symbol	strstr		5009752						
ANR	5009812	Symbol	flag -> name		5009752						
ANR	5009813	Symbol	true		5009752						
ANR	5009814	Symbol	false		5009752						
ANR	5009815	Symbol	strchr		5009752						
ANR	5009816	Symbol	* flag		5009752						
ANR	5009817	Function	findEnd	26:0:560:709							
ANR	5009818	FunctionDef	findEnd (const char * s)		5009817	0					
ANR	5009819	CompoundStatement		26:36:596:709	5009817	0					
ANR	5009820	WhileStatement	while ( * s == 'x' || IS_HEXCHAR ( * s ) )		5009817	0					
ANR	5009821	Condition	* s == 'x' || IS_HEXCHAR ( * s )	27:8:606:633	5009817	0	True				
ANR	5009822	OrExpression	* s == 'x' || IS_HEXCHAR ( * s )		5009817	0		||			
ANR	5009823	EqualityExpression	* s == 'x'		5009817	0		==			
ANR	5009824	UnaryOperationExpression	* s		5009817	0					
ANR	5009825	UnaryOperator	*		5009817	0					
ANR	5009826	Identifier	s		5009817	1					
ANR	5009827	PrimaryExpression	'x'		5009817	1					
ANR	5009828	CallExpression	IS_HEXCHAR ( * s )		5009817	1					
ANR	5009829	Callee	IS_HEXCHAR		5009817	0					
ANR	5009830	Identifier	IS_HEXCHAR		5009817	0					
ANR	5009831	ArgumentList	* s		5009817	1					
ANR	5009832	Argument	* s		5009817	0					
ANR	5009833	UnaryOperationExpression	* s		5009817	0					
ANR	5009834	UnaryOperator	*		5009817	0					
ANR	5009835	Identifier	s		5009817	1					
ANR	5009836	CompoundStatement		2:38:39:39	5009817	1					
ANR	5009837	ExpressionStatement	s ++	28:2:640:643	5009817	0	True				
ANR	5009838	PostIncDecOperationExpression	s ++		5009817	0					
ANR	5009839	Identifier	s		5009817	0					
ANR	5009840	IncDec	++		5009817	1					
ANR	5009841	ReturnStatement	return strdup ( s ) ;	31:1:690:707	5009817	1	True				
ANR	5009842	CallExpression	strdup ( s )		5009817	0					
ANR	5009843	Callee	strdup		5009817	0					
ANR	5009844	Identifier	strdup		5009817	0					
ANR	5009845	ArgumentList	s		5009817	1					
ANR	5009846	Argument	s		5009817	0					
ANR	5009847	Identifier	s		5009817	0					
ANR	5009848	ReturnType	static char *		5009817	1					
ANR	5009849	Identifier	findEnd		5009817	2					
ANR	5009850	ParameterList	const char * s		5009817	3					
ANR	5009851	Parameter	const char * s	26:21:581:593	5009817	0	True				
ANR	5009852	ParameterType	const char *		5009817	0					
ANR	5009853	Identifier	s		5009817	1					
ANR	5009854	CFGEntryNode	ENTRY		5009817		True				
ANR	5009855	CFGExitNode	EXIT		5009817		True				
ANR	5009856	Symbol	s		5009817						
ANR	5009857	Symbol	IS_HEXCHAR		5009817						
ANR	5009858	Symbol	strdup		5009817						
ANR	5009859	Symbol	* s		5009817						
ANR	5009860	Function	insert	34:0:712:866							
ANR	5009861	FunctionDef	"insert (char * dst , const char * src)"		5009860	0					
ANR	5009862	CompoundStatement		34:47:759:866	5009860	0					
ANR	5009863	IdentifierDeclStatement	char * endNum = findEnd ( dst ) ;	35:1:762:790	5009860	0	True				
ANR	5009864	IdentifierDecl	* endNum = findEnd ( dst )		5009860	0					
ANR	5009865	IdentifierDeclType	char *		5009860	0					
ANR	5009866	Identifier	endNum		5009860	1					
ANR	5009867	AssignmentExpression	* endNum = findEnd ( dst )		5009860	2		=			
ANR	5009868	Identifier	endNum		5009860	0					
ANR	5009869	CallExpression	findEnd ( dst )		5009860	1					
ANR	5009870	Callee	findEnd		5009860	0					
ANR	5009871	Identifier	findEnd		5009860	0					
ANR	5009872	ArgumentList	dst		5009860	1					
ANR	5009873	Argument	dst		5009860	0					
ANR	5009874	Identifier	dst		5009860	0					
ANR	5009875	ExpressionStatement	"strcpy ( dst , src )"	36:1:793:810	5009860	1	True				
ANR	5009876	CallExpression	"strcpy ( dst , src )"		5009860	0					
ANR	5009877	Callee	strcpy		5009860	0					
ANR	5009878	Identifier	strcpy		5009860	0					
ANR	5009879	ArgumentList	dst		5009860	1					
ANR	5009880	Argument	dst		5009860	0					
ANR	5009881	Identifier	dst		5009860	0					
ANR	5009882	Argument	src		5009860	1					
ANR	5009883	Identifier	src		5009860	0					
ANR	5009884	ExpressionStatement	"strcpy ( dst + strlen ( src ) , endNum )"	37:1:813:848	5009860	2	True				
ANR	5009885	CallExpression	"strcpy ( dst + strlen ( src ) , endNum )"		5009860	0					
ANR	5009886	Callee	strcpy		5009860	0					
ANR	5009887	Identifier	strcpy		5009860	0					
ANR	5009888	ArgumentList	dst + strlen ( src )		5009860	1					
ANR	5009889	Argument	dst + strlen ( src )		5009860	0					
ANR	5009890	AdditiveExpression	dst + strlen ( src )		5009860	0		+			
ANR	5009891	Identifier	dst		5009860	0					
ANR	5009892	CallExpression	strlen ( src )		5009860	1					
ANR	5009893	Callee	strlen		5009860	0					
ANR	5009894	Identifier	strlen		5009860	0					
ANR	5009895	ArgumentList	src		5009860	1					
ANR	5009896	Argument	src		5009860	0					
ANR	5009897	Identifier	src		5009860	0					
ANR	5009898	Argument	endNum		5009860	1					
ANR	5009899	Identifier	endNum		5009860	0					
ANR	5009900	ExpressionStatement	free ( endNum )	38:1:851:864	5009860	3	True				
ANR	5009901	CallExpression	free ( endNum )		5009860	0					
ANR	5009902	Callee	free		5009860	0					
ANR	5009903	Identifier	free		5009860	0					
ANR	5009904	ArgumentList	endNum		5009860	1					
ANR	5009905	Argument	endNum		5009860	0					
ANR	5009906	Identifier	endNum		5009860	0					
ANR	5009907	ReturnType	static void		5009860	1					
ANR	5009908	Identifier	insert		5009860	2					
ANR	5009909	ParameterList	"char * dst , const char * src"		5009860	3					
ANR	5009910	Parameter	char * dst	34:19:731:739	5009860	0	True				
ANR	5009911	ParameterType	char *		5009860	0					
ANR	5009912	Identifier	dst		5009860	1					
ANR	5009913	Parameter	const char * src	34:30:742:756	5009860	1	True				
ANR	5009914	ParameterType	const char *		5009860	0					
ANR	5009915	Identifier	src		5009860	1					
ANR	5009916	CFGEntryNode	ENTRY		5009860		True				
ANR	5009917	CFGExitNode	EXIT		5009860		True				
ANR	5009918	Symbol	strlen		5009860						
ANR	5009919	Symbol	dst		5009860						
ANR	5009920	Symbol	src		5009860						
ANR	5009921	Symbol	findEnd		5009860						
ANR	5009922	Symbol	endNum		5009860						
ANR	5009923	Function	replaceWords	42:0:901:1177							
ANR	5009924	FunctionDef	"replaceWords (char * s , const char * k , const char * v)"		5009923	0					
ANR	5009925	CompoundStatement		42:64:965:1177	5009923	0					
ANR	5009926	ForStatement	for ( ; ; )		5009923	0					
ANR	5009927	CompoundStatement		8:2:96:120	5009923	0					
ANR	5009928	IdentifierDeclStatement	"char * p = strstr ( s , k ) ;"	44:2:981:1004	5009923	0	True				
ANR	5009929	IdentifierDecl	"* p = strstr ( s , k )"		5009923	0					
ANR	5009930	IdentifierDeclType	char *		5009923	0					
ANR	5009931	Identifier	p		5009923	1					
ANR	5009932	AssignmentExpression	"* p = strstr ( s , k )"		5009923	2		=			
ANR	5009933	Identifier	p		5009923	0					
ANR	5009934	CallExpression	"strstr ( s , k )"		5009923	1					
ANR	5009935	Callee	strstr		5009923	0					
ANR	5009936	Identifier	strstr		5009923	0					
ANR	5009937	ArgumentList	s		5009923	1					
ANR	5009938	Argument	s		5009923	0					
ANR	5009939	Identifier	s		5009923	0					
ANR	5009940	Argument	k		5009923	1					
ANR	5009941	Identifier	k		5009923	0					
ANR	5009942	IfStatement	if ( ! p )		5009923	1					
ANR	5009943	Condition	! p	45:6:1012:1013	5009923	0	True				
ANR	5009944	UnaryOperationExpression	! p		5009923	0					
ANR	5009945	UnaryOperator	!		5009923	0					
ANR	5009946	Identifier	p		5009923	1					
ANR	5009947	CompoundStatement		4:10:50:50	5009923	1					
ANR	5009948	BreakStatement	break ;	46:3:1021:1026	5009923	0	True				
ANR	5009949	IdentifierDeclStatement	char * s = p + strlen ( k ) ;	48:2:1034:1058	5009923	2	True				
ANR	5009950	IdentifierDecl	* s = p + strlen ( k )		5009923	0					
ANR	5009951	IdentifierDeclType	char *		5009923	0					
ANR	5009952	Identifier	s		5009923	1					
ANR	5009953	AssignmentExpression	* s = p + strlen ( k )		5009923	2		=			
ANR	5009954	Identifier	s		5009923	0					
ANR	5009955	AdditiveExpression	p + strlen ( k )		5009923	1		+			
ANR	5009956	Identifier	p		5009923	0					
ANR	5009957	CallExpression	strlen ( k )		5009923	1					
ANR	5009958	Callee	strlen		5009923	0					
ANR	5009959	Identifier	strlen		5009923	0					
ANR	5009960	ArgumentList	k		5009923	1					
ANR	5009961	Argument	k		5009923	0					
ANR	5009962	Identifier	k		5009923	0					
ANR	5009963	IdentifierDeclStatement	char * d = p + strlen ( v ) ;	49:2:1062:1086	5009923	3	True				
ANR	5009964	IdentifierDecl	* d = p + strlen ( v )		5009923	0					
ANR	5009965	IdentifierDeclType	char *		5009923	0					
ANR	5009966	Identifier	d		5009923	1					
ANR	5009967	AssignmentExpression	* d = p + strlen ( v )		5009923	2		=			
ANR	5009968	Identifier	d		5009923	0					
ANR	5009969	AdditiveExpression	p + strlen ( v )		5009923	1		+			
ANR	5009970	Identifier	p		5009923	0					
ANR	5009971	CallExpression	strlen ( v )		5009923	1					
ANR	5009972	Callee	strlen		5009923	0					
ANR	5009973	Identifier	strlen		5009923	0					
ANR	5009974	ArgumentList	v		5009923	1					
ANR	5009975	Argument	v		5009923	0					
ANR	5009976	Identifier	v		5009923	0					
ANR	5009977	ExpressionStatement	"memmove ( d , s , strlen ( s ) + 1 )"	50:2:1090:1120	5009923	4	True				
ANR	5009978	CallExpression	"memmove ( d , s , strlen ( s ) + 1 )"		5009923	0					
ANR	5009979	Callee	memmove		5009923	0					
ANR	5009980	Identifier	memmove		5009923	0					
ANR	5009981	ArgumentList	d		5009923	1					
ANR	5009982	Argument	d		5009923	0					
ANR	5009983	Identifier	d		5009923	0					
ANR	5009984	Argument	s		5009923	1					
ANR	5009985	Identifier	s		5009923	0					
ANR	5009986	Argument	strlen ( s ) + 1		5009923	2					
ANR	5009987	AdditiveExpression	strlen ( s ) + 1		5009923	0		+			
ANR	5009988	CallExpression	strlen ( s )		5009923	0					
ANR	5009989	Callee	strlen		5009923	0					
ANR	5009990	Identifier	strlen		5009923	0					
ANR	5009991	ArgumentList	s		5009923	1					
ANR	5009992	Argument	s		5009923	0					
ANR	5009993	Identifier	s		5009923	0					
ANR	5009994	PrimaryExpression	1		5009923	1					
ANR	5009995	ExpressionStatement	"memmove ( p , v , strlen ( v ) )"	51:2:1124:1150	5009923	5	True				
ANR	5009996	CallExpression	"memmove ( p , v , strlen ( v ) )"		5009923	0					
ANR	5009997	Callee	memmove		5009923	0					
ANR	5009998	Identifier	memmove		5009923	0					
ANR	5009999	ArgumentList	p		5009923	1					
ANR	5010000	Argument	p		5009923	0					
ANR	5010001	Identifier	p		5009923	0					
ANR	5010002	Argument	v		5009923	1					
ANR	5010003	Identifier	v		5009923	0					
ANR	5010004	Argument	strlen ( v )		5009923	2					
ANR	5010005	CallExpression	strlen ( v )		5009923	0					
ANR	5010006	Callee	strlen		5009923	0					
ANR	5010007	Identifier	strlen		5009923	0					
ANR	5010008	ArgumentList	v		5009923	1					
ANR	5010009	Argument	v		5009923	0					
ANR	5010010	Identifier	v		5009923	0					
ANR	5010011	ExpressionStatement	s = p + strlen ( v )	52:2:1154:1172	5009923	6	True				
ANR	5010012	AssignmentExpression	s = p + strlen ( v )		5009923	0		=			
ANR	5010013	Identifier	s		5009923	0					
ANR	5010014	AdditiveExpression	p + strlen ( v )		5009923	1		+			
ANR	5010015	Identifier	p		5009923	0					
ANR	5010016	CallExpression	strlen ( v )		5009923	1					
ANR	5010017	Callee	strlen		5009923	0					
ANR	5010018	Identifier	strlen		5009923	0					
ANR	5010019	ArgumentList	v		5009923	1					
ANR	5010020	Argument	v		5009923	0					
ANR	5010021	Identifier	v		5009923	0					
ANR	5010022	ReturnType	static void		5009923	1					
ANR	5010023	Identifier	replaceWords		5009923	2					
ANR	5010024	ParameterList	"char * s , const char * k , const char * v"		5009923	3					
ANR	5010025	Parameter	char * s	42:25:926:932	5009923	0	True				
ANR	5010026	ParameterType	char *		5009923	0					
ANR	5010027	Identifier	s		5009923	1					
ANR	5010028	Parameter	const char * k	42:34:935:947	5009923	1	True				
ANR	5010029	ParameterType	const char *		5009923	0					
ANR	5010030	Identifier	k		5009923	1					
ANR	5010031	Parameter	const char * v	42:49:950:962	5009923	2	True				
ANR	5010032	ParameterType	const char *		5009923	0					
ANR	5010033	Identifier	v		5009923	1					
ANR	5010034	CFGEntryNode	ENTRY		5009923		True				
ANR	5010035	CFGExitNode	EXIT		5009923		True				
ANR	5010036	InfiniteForNode	true		5009923		True				
ANR	5010037	Symbol	p		5009923						
ANR	5010038	Symbol	strlen		5009923						
ANR	5010039	Symbol	s		5009923						
ANR	5010040	Symbol	d		5009923						
ANR	5010041	Symbol	strstr		5009923						
ANR	5010042	Symbol	v		5009923						
ANR	5010043	Symbol	k		5009923						
ANR	5010044	Function	findNextNumber	56:0:1180:2087							
ANR	5010045	FunctionDef	findNextNumber (char * op)		5010044	0					
ANR	5010046	CompoundStatement		56:38:1218:2087	5010044	0					
ANR	5010047	IfStatement	if ( ! op )		5010044	0					
ANR	5010048	Condition	! op	57:5:1225:1227	5010044	0	True				
ANR	5010049	UnaryOperationExpression	! op		5010044	0					
ANR	5010050	UnaryOperator	!		5010044	0					
ANR	5010051	Identifier	op		5010044	1					
ANR	5010052	CompoundStatement		2:10:11:11	5010044	1					
ANR	5010053	ReturnStatement	return NULL ;	58:2:1234:1245	5010044	0	True				
ANR	5010054	Identifier	NULL		5010044	0					
ANR	5010055	IdentifierDeclStatement	bool ansi_found = false ;	60:1:1251:1274	5010044	1	True				
ANR	5010056	IdentifierDecl	ansi_found = false		5010044	0					
ANR	5010057	IdentifierDeclType	bool		5010044	0					
ANR	5010058	Identifier	ansi_found		5010044	1					
ANR	5010059	AssignmentExpression	ansi_found = false		5010044	2		=			
ANR	5010060	Identifier	false		5010044	0					
ANR	5010061	Identifier	false		5010044	1					
ANR	5010062	IdentifierDeclStatement	char * p = op ;	61:1:1277:1289	5010044	2	True				
ANR	5010063	IdentifierDecl	* p = op		5010044	0					
ANR	5010064	IdentifierDeclType	char *		5010044	0					
ANR	5010065	Identifier	p		5010044	1					
ANR	5010066	AssignmentExpression	* p = op		5010044	2		=			
ANR	5010067	Identifier	op		5010044	0					
ANR	5010068	Identifier	op		5010044	1					
ANR	5010069	IdentifierDeclStatement	const char * o = NULL ;	62:1:1292:1312	5010044	3	True				
ANR	5010070	IdentifierDecl	* o = NULL		5010044	0					
ANR	5010071	IdentifierDeclType	const char *		5010044	0					
ANR	5010072	Identifier	o		5010044	1					
ANR	5010073	AssignmentExpression	* o = NULL		5010044	2		=			
ANR	5010074	Identifier	NULL		5010044	0					
ANR	5010075	Identifier	NULL		5010044	1					
ANR	5010076	WhileStatement	while ( * p )		5010044	4					
ANR	5010077	Condition	* p	63:8:1322:1323	5010044	0	True				
ANR	5010078	UnaryOperationExpression	* p		5010044	0					
ANR	5010079	UnaryOperator	*		5010044	0					
ANR	5010080	Identifier	p		5010044	1					
ANR	5010081	CompoundStatement		8:12:107:107	5010044	1					
ANR	5010082	IfStatement	if ( p [ 0 ] == 0x1b && p [ 1 ] == '[' )		5010044	0					
ANR	5010083	Condition	p [ 0 ] == 0x1b && p [ 1 ] == '['	64:6:1334:1360	5010044	0	True				
ANR	5010084	AndExpression	p [ 0 ] == 0x1b && p [ 1 ] == '['		5010044	0		&&			
ANR	5010085	EqualityExpression	p [ 0 ] == 0x1b		5010044	0		==			
ANR	5010086	ArrayIndexing	p [ 0 ]		5010044	0					
ANR	5010087	Identifier	p		5010044	0					
ANR	5010088	PrimaryExpression	0		5010044	1					
ANR	5010089	PrimaryExpression	0x1b		5010044	1					
ANR	5010090	EqualityExpression	p [ 1 ] == '['		5010044	1		==			
ANR	5010091	ArrayIndexing	p [ 1 ]		5010044	0					
ANR	5010092	Identifier	p		5010044	0					
ANR	5010093	PrimaryExpression	1		5010044	1					
ANR	5010094	PrimaryExpression	'['		5010044	1					
ANR	5010095	CompoundStatement		9:35:144:144	5010044	1					
ANR	5010096	ExpressionStatement	ansi_found = true	65:3:1368:1385	5010044	0	True				
ANR	5010097	AssignmentExpression	ansi_found = true		5010044	0		=			
ANR	5010098	Identifier	ansi_found		5010044	0					
ANR	5010099	Identifier	true		5010044	1					
ANR	5010100	ExpressionStatement	p += 2	66:3:1390:1396	5010044	1	True				
ANR	5010101	AssignmentExpression	p += 2		5010044	0		+=			
ANR	5010102	Identifier	p		5010044	0					
ANR	5010103	PrimaryExpression	2		5010044	1					
ANR	5010104	ForStatement	for ( ; * p && * p != 'J' && * p != 'm' && * p != 'H' ; p ++ )		5010044	2					
ANR	5010105	Condition	* p && * p != 'J' && * p != 'm' && * p != 'H'	67:10:1408:1448	5010044	0	True				
ANR	5010106	AndExpression	* p && * p != 'J' && * p != 'm' && * p != 'H'		5010044	0		&&			
ANR	5010107	UnaryOperationExpression	* p		5010044	0					
ANR	5010108	UnaryOperator	*		5010044	0					
ANR	5010109	Identifier	p		5010044	1					
ANR	5010110	AndExpression	* p != 'J' && * p != 'm' && * p != 'H'		5010044	1		&&			
ANR	5010111	EqualityExpression	* p != 'J'		5010044	0		!=			
ANR	5010112	UnaryOperationExpression	* p		5010044	0					
ANR	5010113	UnaryOperator	*		5010044	0					
ANR	5010114	Identifier	p		5010044	1					
ANR	5010115	PrimaryExpression	'J'		5010044	1					
ANR	5010116	AndExpression	* p != 'm' && * p != 'H'		5010044	1		&&			
ANR	5010117	EqualityExpression	* p != 'm'		5010044	0		!=			
ANR	5010118	UnaryOperationExpression	* p		5010044	0					
ANR	5010119	UnaryOperator	*		5010044	0					
ANR	5010120	Identifier	p		5010044	1					
ANR	5010121	PrimaryExpression	'm'		5010044	1					
ANR	5010122	EqualityExpression	* p != 'H'		5010044	1		!=			
ANR	5010123	UnaryOperationExpression	* p		5010044	0					
ANR	5010124	UnaryOperator	*		5010044	0					
ANR	5010125	Identifier	p		5010044	1					
ANR	5010126	PrimaryExpression	'H'		5010044	1					
ANR	5010127	PostIncDecOperationExpression	p ++	67:53:1451:1453	5010044	1	True				
ANR	5010128	Identifier	p		5010044	0					
ANR	5010129	IncDec	++		5010044	1					
ANR	5010130	CompoundStatement		12:58:237:237	5010044	2					
ANR	5010131	ExpressionStatement		68:4:1462:1462	5010044	0	True				
ANR	5010132	IfStatement	if ( * p )		5010044	3					
ANR	5010133	Condition	* p	70:7:1476:1477	5010044	0	True				
ANR	5010134	UnaryOperationExpression	* p		5010044	0					
ANR	5010135	UnaryOperator	*		5010044	0					
ANR	5010136	Identifier	p		5010044	1					
ANR	5010137	CompoundStatement		15:11:261:261	5010044	1					
ANR	5010138	ExpressionStatement	p ++	71:4:1486:1489	5010044	0	True				
ANR	5010139	PostIncDecOperationExpression	p ++		5010044	0					
ANR	5010140	Identifier	p		5010044	0					
ANR	5010141	IncDec	++		5010044	1					
ANR	5010142	IfStatement	if ( ! * p )		5010044	1					
ANR	5010143	Condition	! * p	72:8:1499:1501	5010044	0	True				
ANR	5010144	UnaryOperationExpression	! * p		5010044	0					
ANR	5010145	UnaryOperator	!		5010044	0					
ANR	5010146	UnaryOperationExpression	* p		5010044	1					
ANR	5010147	UnaryOperator	*		5010044	0					
ANR	5010148	Identifier	p		5010044	1					
ANR	5010149	CompoundStatement		17:13:285:285	5010044	1					
ANR	5010150	BreakStatement	break ;	73:5:1511:1516	5010044	0	True				
ANR	5010151	ExpressionStatement	o = p - 1	76:3:1532:1541	5010044	4	True				
ANR	5010152	AssignmentExpression	o = p - 1		5010044	0		=			
ANR	5010153	Identifier	o		5010044	0					
ANR	5010154	AdditiveExpression	p - 1		5010044	1		-			
ANR	5010155	Identifier	p		5010044	0					
ANR	5010156	PrimaryExpression	1		5010044	1					
ANR	5010157	ElseStatement	else		5010044	0					
ANR	5010158	CompoundStatement		23:3:338:363	5010044	0					
ANR	5010159	IdentifierDeclStatement	bool isSpace = ansi_found ;	78:3:1557:1582	5010044	0	True				
ANR	5010160	IdentifierDecl	isSpace = ansi_found		5010044	0					
ANR	5010161	IdentifierDeclType	bool		5010044	0					
ANR	5010162	Identifier	isSpace		5010044	1					
ANR	5010163	AssignmentExpression	isSpace = ansi_found		5010044	2		=			
ANR	5010164	Identifier	ansi_found		5010044	0					
ANR	5010165	Identifier	ansi_found		5010044	1					
ANR	5010166	ExpressionStatement	ansi_found = false	79:3:1587:1605	5010044	1	True				
ANR	5010167	AssignmentExpression	ansi_found = false		5010044	0		=			
ANR	5010168	Identifier	ansi_found		5010044	0					
ANR	5010169	Identifier	false		5010044	1					
ANR	5010170	IfStatement	if ( ! isSpace )		5010044	2					
ANR	5010171	Condition	! isSpace	80:7:1614:1621	5010044	0	True				
ANR	5010172	UnaryOperationExpression	! isSpace		5010044	0					
ANR	5010173	UnaryOperator	!		5010044	0					
ANR	5010174	Identifier	isSpace		5010044	1					
ANR	5010175	CompoundStatement		25:17:405:405	5010044	1					
ANR	5010176	ExpressionStatement	isSpace = p == op	81:4:1630:1647	5010044	0	True				
ANR	5010177	AssignmentExpression	isSpace = p == op		5010044	0		=			
ANR	5010178	Identifier	isSpace		5010044	0					
ANR	5010179	EqualityExpression	p == op		5010044	1		==			
ANR	5010180	Identifier	p		5010044	0					
ANR	5010181	Identifier	op		5010044	1					
ANR	5010182	IfStatement	if ( ! isSpace && o )		5010044	1					
ANR	5010183	Condition	! isSpace && o	82:8:1657:1669	5010044	0	True				
ANR	5010184	AndExpression	! isSpace && o		5010044	0		&&			
ANR	5010185	UnaryOperationExpression	! isSpace		5010044	0					
ANR	5010186	UnaryOperator	!		5010044	0					
ANR	5010187	Identifier	isSpace		5010044	1					
ANR	5010188	Identifier	o		5010044	1					
ANR	5010189	CompoundStatement		27:23:453:453	5010044	1					
ANR	5010190	ExpressionStatement	"isSpace = ( * o == ' ' || * o == ',' || * o == '[' )"	83:5:1679:1726	5010044	0	True				
ANR	5010191	AssignmentExpression	"isSpace = ( * o == ' ' || * o == ',' || * o == '[' )"		5010044	0		=			
ANR	5010192	Identifier	isSpace		5010044	0					
ANR	5010193	OrExpression	"* o == ' ' || * o == ',' || * o == '['"		5010044	1		||			
ANR	5010194	EqualityExpression	* o == ' '		5010044	0		==			
ANR	5010195	UnaryOperationExpression	* o		5010044	0					
ANR	5010196	UnaryOperator	*		5010044	0					
ANR	5010197	Identifier	o		5010044	1					
ANR	5010198	PrimaryExpression	' '		5010044	1					
ANR	5010199	OrExpression	"* o == ',' || * o == '['"		5010044	1		||			
ANR	5010200	EqualityExpression	"* o == ','"		5010044	0		==			
ANR	5010201	UnaryOperationExpression	* o		5010044	0					
ANR	5010202	UnaryOperator	*		5010044	0					
ANR	5010203	Identifier	o		5010044	1					
ANR	5010204	PrimaryExpression	"','"		5010044	1					
ANR	5010205	EqualityExpression	* o == '['		5010044	1		==			
ANR	5010206	UnaryOperationExpression	* o		5010044	0					
ANR	5010207	UnaryOperator	*		5010044	0					
ANR	5010208	Identifier	o		5010044	1					
ANR	5010209	PrimaryExpression	'['		5010044	1					
ANR	5010210	IfStatement	if ( * p == '[' )		5010044	3					
ANR	5010211	Condition	* p == '['	86:7:1746:1754	5010044	0	True				
ANR	5010212	EqualityExpression	* p == '['		5010044	0		==			
ANR	5010213	UnaryOperationExpression	* p		5010044	0					
ANR	5010214	UnaryOperator	*		5010044	0					
ANR	5010215	Identifier	p		5010044	1					
ANR	5010216	PrimaryExpression	'['		5010044	1					
ANR	5010217	CompoundStatement		31:18:538:538	5010044	1					
ANR	5010218	ExpressionStatement	p ++	87:4:1763:1766	5010044	0	True				
ANR	5010219	PostIncDecOperationExpression	p ++		5010044	0					
ANR	5010220	Identifier	p		5010044	0					
ANR	5010221	IncDec	++		5010044	1					
ANR	5010222	IfStatement	if ( ! * p )		5010044	1					
ANR	5010223	Condition	! * p	88:8:1776:1778	5010044	0	True				
ANR	5010224	UnaryOperationExpression	! * p		5010044	0					
ANR	5010225	UnaryOperator	!		5010044	0					
ANR	5010226	UnaryOperationExpression	* p		5010044	1					
ANR	5010227	UnaryOperator	*		5010044	0					
ANR	5010228	Identifier	p		5010044	1					
ANR	5010229	CompoundStatement		33:13:562:562	5010044	1					
ANR	5010230	BreakStatement	break ;	89:5:1788:1793	5010044	0	True				
ANR	5010231	IfStatement	if ( ! IS_DIGIT ( * p ) )		5010044	2					
ANR	5010232	Condition	! IS_DIGIT ( * p )	91:8:1809:1822	5010044	0	True				
ANR	5010233	UnaryOperationExpression	! IS_DIGIT ( * p )		5010044	0					
ANR	5010234	UnaryOperator	!		5010044	0					
ANR	5010235	CallExpression	IS_DIGIT ( * p )		5010044	1					
ANR	5010236	Callee	IS_DIGIT		5010044	0					
ANR	5010237	Identifier	IS_DIGIT		5010044	0					
ANR	5010238	ArgumentList	* p		5010044	1					
ANR	5010239	Argument	* p		5010044	0					
ANR	5010240	UnaryOperationExpression	* p		5010044	0					
ANR	5010241	UnaryOperator	*		5010044	0					
ANR	5010242	Identifier	p		5010044	1					
ANR	5010243	CompoundStatement		37:5:613:624	5010044	1					
ANR	5010244	IdentifierDeclStatement	char * t = p ;	92:5:1832:1843	5010044	0	True				
ANR	5010245	IdentifierDecl	* t = p		5010044	0					
ANR	5010246	IdentifierDeclType	char *		5010044	0					
ANR	5010247	Identifier	t		5010044	1					
ANR	5010248	AssignmentExpression	* t = p		5010044	2		=			
ANR	5010249	Identifier	p		5010044	0					
ANR	5010250	Identifier	p		5010044	1					
ANR	5010251	ForStatement	for ( ; * t && * t != ']' ; t ++ )		5010044	1					
ANR	5010252	Condition	* t && * t != ']'	93:12:1857:1871	5010044	0	True				
ANR	5010253	AndExpression	* t && * t != ']'		5010044	0		&&			
ANR	5010254	UnaryOperationExpression	* t		5010044	0					
ANR	5010255	UnaryOperator	*		5010044	0					
ANR	5010256	Identifier	t		5010044	1					
ANR	5010257	EqualityExpression	* t != ']'		5010044	1		!=			
ANR	5010258	UnaryOperationExpression	* t		5010044	0					
ANR	5010259	UnaryOperator	*		5010044	0					
ANR	5010260	Identifier	t		5010044	1					
ANR	5010261	PrimaryExpression	']'		5010044	1					
ANR	5010262	PostIncDecOperationExpression	t ++	93:29:1874:1876	5010044	1	True				
ANR	5010263	Identifier	t		5010044	0					
ANR	5010264	IncDec	++		5010044	1					
ANR	5010265	CompoundStatement		38:34:660:660	5010044	2					
ANR	5010266	ExpressionStatement		94:6:1887:1887	5010044	0	True				
ANR	5010267	IfStatement	if ( * t == ']' )		5010044	2					
ANR	5010268	Condition	* t == ']'	96:9:1905:1913	5010044	0	True				
ANR	5010269	EqualityExpression	* t == ']'		5010044	0		==			
ANR	5010270	UnaryOperationExpression	* t		5010044	0					
ANR	5010271	UnaryOperator	*		5010044	0					
ANR	5010272	Identifier	t		5010044	1					
ANR	5010273	PrimaryExpression	']'		5010044	1					
ANR	5010274	CompoundStatement		41:20:697:697	5010044	1					
ANR	5010275	ContinueStatement	continue ;	97:6:1924:1932	5010044	0	True				
ANR	5010276	ExpressionStatement	p = t	99:5:1946:1951	5010044	3	True				
ANR	5010277	AssignmentExpression	p = t		5010044	0		=			
ANR	5010278	Identifier	p		5010044	0					
ANR	5010279	Identifier	t		5010044	1					
ANR	5010280	IfStatement	if ( ! * p )		5010044	4					
ANR	5010281	Condition	! * p	100:9:1962:1964	5010044	0	True				
ANR	5010282	UnaryOperationExpression	! * p		5010044	0					
ANR	5010283	UnaryOperator	!		5010044	0					
ANR	5010284	UnaryOperationExpression	* p		5010044	1					
ANR	5010285	UnaryOperator	*		5010044	0					
ANR	5010286	Identifier	p		5010044	1					
ANR	5010287	CompoundStatement		45:14:748:748	5010044	1					
ANR	5010288	BreakStatement	break ;	101:6:1975:1980	5010044	0	True				
ANR	5010289	IfStatement	if ( isSpace && IS_DIGIT ( * p ) )		5010044	4					
ANR	5010290	Condition	isSpace && IS_DIGIT ( * p )	105:7:2007:2030	5010044	0	True				
ANR	5010291	AndExpression	isSpace && IS_DIGIT ( * p )		5010044	0		&&			
ANR	5010292	Identifier	isSpace		5010044	0					
ANR	5010293	CallExpression	IS_DIGIT ( * p )		5010044	1					
ANR	5010294	Callee	IS_DIGIT		5010044	0					
ANR	5010295	Identifier	IS_DIGIT		5010044	0					
ANR	5010296	ArgumentList	* p		5010044	1					
ANR	5010297	Argument	* p		5010044	0					
ANR	5010298	UnaryOperationExpression	* p		5010044	0					
ANR	5010299	UnaryOperator	*		5010044	0					
ANR	5010300	Identifier	p		5010044	1					
ANR	5010301	CompoundStatement		50:33:814:814	5010044	1					
ANR	5010302	ReturnStatement	return p ;	106:4:2039:2047	5010044	0	True				
ANR	5010303	Identifier	p		5010044	0					
ANR	5010304	ExpressionStatement	o = p ++	108:3:2057:2064	5010044	5	True				
ANR	5010305	AssignmentExpression	o = p ++		5010044	0		=			
ANR	5010306	Identifier	o		5010044	0					
ANR	5010307	PostIncDecOperationExpression	p ++		5010044	1					
ANR	5010308	Identifier	p		5010044	0					
ANR	5010309	IncDec	++		5010044	1					
ANR	5010310	ReturnStatement	return NULL ;	111:1:2074:2085	5010044	5	True				
ANR	5010311	Identifier	NULL		5010044	0					
ANR	5010312	ReturnType	static char *		5010044	1					
ANR	5010313	Identifier	findNextNumber		5010044	2					
ANR	5010314	ParameterList	char * op		5010044	3					
ANR	5010315	Parameter	char * op	56:28:1208:1215	5010044	0	True				
ANR	5010316	ParameterType	char *		5010044	0					
ANR	5010317	Identifier	op		5010044	1					
ANR	5010318	CFGEntryNode	ENTRY		5010044		True				
ANR	5010319	CFGExitNode	EXIT		5010044		True				
ANR	5010320	Symbol	op		5010044						
ANR	5010321	Symbol	NULL		5010044						
ANR	5010322	Symbol	false		5010044						
ANR	5010323	Symbol	isSpace		5010044						
ANR	5010324	Symbol	o		5010044						
ANR	5010325	Symbol	IS_DIGIT		5010044						
ANR	5010326	Symbol	p		5010044						
ANR	5010327	Symbol	t		5010044						
ANR	5010328	Symbol	ansi_found		5010044						
ANR	5010329	Symbol	true		5010044						
ANR	5010330	Symbol	* o		5010044						
ANR	5010331	Symbol	* p		5010044						
ANR	5010332	Symbol	* t		5010044						
ANR	5010333	Function	__replaceRegisters	114:0:2090:2522							
ANR	5010334	FunctionDef	"__replaceRegisters (RReg * reg , char * s , bool x86)"		5010333	0					
ANR	5010335	CompoundStatement		114:61:2151:2522	5010333	0					
ANR	5010336	IdentifierDeclStatement	int i ;	115:1:2154:2159	5010333	0	True				
ANR	5010337	IdentifierDecl	i		5010333	0					
ANR	5010338	IdentifierDeclType	int		5010333	0					
ANR	5010339	Identifier	i		5010333	1					
ANR	5010340	ForStatement	for ( i = 0 ; i < 64 ; i ++ )		5010333	1					
ANR	5010341	ForInit	i = 0 ;	116:6:2167:2172	5010333	0	True				
ANR	5010342	AssignmentExpression	i = 0		5010333	0		=			
ANR	5010343	Identifier	i		5010333	0					
ANR	5010344	PrimaryExpression	0		5010333	1					
ANR	5010345	Condition	i < 64	116:13:2174:2179	5010333	1	True				
ANR	5010346	RelationalExpression	i < 64		5010333	0		<			
ANR	5010347	Identifier	i		5010333	0					
ANR	5010348	PrimaryExpression	64		5010333	1					
ANR	5010349	PostIncDecOperationExpression	i ++	116:21:2182:2184	5010333	2	True				
ANR	5010350	Identifier	i		5010333	0					
ANR	5010351	IncDec	++		5010333	1					
ANR	5010352	CompoundStatement		8:2:133:167	5010333	3					
ANR	5010353	IdentifierDeclStatement	"const char * k = r_reg_get_name ( reg , i ) ;"	117:2:2191:2230	5010333	0	True				
ANR	5010354	IdentifierDecl	"* k = r_reg_get_name ( reg , i )"		5010333	0					
ANR	5010355	IdentifierDeclType	const char *		5010333	0					
ANR	5010356	Identifier	k		5010333	1					
ANR	5010357	AssignmentExpression	"* k = r_reg_get_name ( reg , i )"		5010333	2		=			
ANR	5010358	Identifier	k		5010333	0					
ANR	5010359	CallExpression	"r_reg_get_name ( reg , i )"		5010333	1					
ANR	5010360	Callee	r_reg_get_name		5010333	0					
ANR	5010361	Identifier	r_reg_get_name		5010333	0					
ANR	5010362	ArgumentList	reg		5010333	1					
ANR	5010363	Argument	reg		5010333	0					
ANR	5010364	Identifier	reg		5010333	0					
ANR	5010365	Argument	i		5010333	1					
ANR	5010366	Identifier	i		5010333	0					
ANR	5010367	IfStatement	if ( ! k || i == R_REG_NAME_PC )		5010333	1					
ANR	5010368	Condition	! k || i == R_REG_NAME_PC	118:6:2238:2261	5010333	0	True				
ANR	5010369	OrExpression	! k || i == R_REG_NAME_PC		5010333	0		||			
ANR	5010370	UnaryOperationExpression	! k		5010333	0					
ANR	5010371	UnaryOperator	!		5010333	0					
ANR	5010372	Identifier	k		5010333	1					
ANR	5010373	EqualityExpression	i == R_REG_NAME_PC		5010333	1		==			
ANR	5010374	Identifier	i		5010333	0					
ANR	5010375	Identifier	R_REG_NAME_PC		5010333	1					
ANR	5010376	CompoundStatement		5:32:112:112	5010333	1					
ANR	5010377	ContinueStatement	continue ;	119:3:2269:2277	5010333	0	True				
ANR	5010378	IdentifierDeclStatement	const char * v = r_reg_get_role ( i ) ;	121:2:2285:2319	5010333	2	True				
ANR	5010379	IdentifierDecl	* v = r_reg_get_role ( i )		5010333	0					
ANR	5010380	IdentifierDeclType	const char *		5010333	0					
ANR	5010381	Identifier	v		5010333	1					
ANR	5010382	AssignmentExpression	* v = r_reg_get_role ( i )		5010333	2		=			
ANR	5010383	Identifier	v		5010333	0					
ANR	5010384	CallExpression	r_reg_get_role ( i )		5010333	1					
ANR	5010385	Callee	r_reg_get_role		5010333	0					
ANR	5010386	Identifier	r_reg_get_role		5010333	0					
ANR	5010387	ArgumentList	i		5010333	1					
ANR	5010388	Argument	i		5010333	0					
ANR	5010389	Identifier	i		5010333	0					
ANR	5010390	IfStatement	if ( ! v )		5010333	3					
ANR	5010391	Condition	! v	122:6:2327:2328	5010333	0	True				
ANR	5010392	UnaryOperationExpression	! v		5010333	0					
ANR	5010393	UnaryOperator	!		5010333	0					
ANR	5010394	Identifier	v		5010333	1					
ANR	5010395	CompoundStatement		9:10:179:179	5010333	1					
ANR	5010396	BreakStatement	break ;	123:3:2336:2341	5010333	0	True				
ANR	5010397	IfStatement	if ( x86 && * k == 'r' )		5010333	4					
ANR	5010398	Condition	x86 && * k == 'r'	125:6:2353:2368	5010333	0	True				
ANR	5010399	AndExpression	x86 && * k == 'r'		5010333	0		&&			
ANR	5010400	Identifier	x86		5010333	0					
ANR	5010401	EqualityExpression	* k == 'r'		5010333	1		==			
ANR	5010402	UnaryOperationExpression	* k		5010333	0					
ANR	5010403	UnaryOperator	*		5010333	0					
ANR	5010404	Identifier	k		5010333	1					
ANR	5010405	PrimaryExpression	'r'		5010333	1					
ANR	5010406	CompoundStatement		14:3:251:275	5010333	1					
ANR	5010407	ExpressionStatement	"replaceWords ( s , k , v )"	126:3:2376:2398	5010333	0	True				
ANR	5010408	CallExpression	"replaceWords ( s , k , v )"		5010333	0					
ANR	5010409	Callee	replaceWords		5010333	0					
ANR	5010410	Identifier	replaceWords		5010333	0					
ANR	5010411	ArgumentList	s		5010333	1					
ANR	5010412	Argument	s		5010333	0					
ANR	5010413	Identifier	s		5010333	0					
ANR	5010414	Argument	k		5010333	1					
ANR	5010415	Identifier	k		5010333	0					
ANR	5010416	Argument	v		5010333	2					
ANR	5010417	Identifier	v		5010333	0					
ANR	5010418	IdentifierDeclStatement	char * reg32 = strdup ( k ) ;	127:3:2403:2427	5010333	1	True				
ANR	5010419	IdentifierDecl	* reg32 = strdup ( k )		5010333	0					
ANR	5010420	IdentifierDeclType	char *		5010333	0					
ANR	5010421	Identifier	reg32		5010333	1					
ANR	5010422	AssignmentExpression	* reg32 = strdup ( k )		5010333	2		=			
ANR	5010423	Identifier	reg32		5010333	0					
ANR	5010424	CallExpression	strdup ( k )		5010333	1					
ANR	5010425	Callee	strdup		5010333	0					
ANR	5010426	Identifier	strdup		5010333	0					
ANR	5010427	ArgumentList	k		5010333	1					
ANR	5010428	Argument	k		5010333	0					
ANR	5010429	Identifier	k		5010333	0					
ANR	5010430	ExpressionStatement	* reg32 = 'e'	128:3:2432:2444	5010333	2	True				
ANR	5010431	AssignmentExpression	* reg32 = 'e'		5010333	0		=			
ANR	5010432	UnaryOperationExpression	* reg32		5010333	0					
ANR	5010433	UnaryOperator	*		5010333	0					
ANR	5010434	Identifier	reg32		5010333	1					
ANR	5010435	PrimaryExpression	'e'		5010333	1					
ANR	5010436	ExpressionStatement	"replaceWords ( s , reg32 , v )"	129:3:2449:2475	5010333	3	True				
ANR	5010437	CallExpression	"replaceWords ( s , reg32 , v )"		5010333	0					
ANR	5010438	Callee	replaceWords		5010333	0					
ANR	5010439	Identifier	replaceWords		5010333	0					
ANR	5010440	ArgumentList	s		5010333	1					
ANR	5010441	Argument	s		5010333	0					
ANR	5010442	Identifier	s		5010333	0					
ANR	5010443	Argument	reg32		5010333	1					
ANR	5010444	Identifier	reg32		5010333	0					
ANR	5010445	Argument	v		5010333	2					
ANR	5010446	Identifier	v		5010333	0					
ANR	5010447	ElseStatement	else		5010333	0					
ANR	5010448	CompoundStatement		17:9:334:334	5010333	0					
ANR	5010449	ExpressionStatement	"replaceWords ( s , k , v )"	131:3:2491:2513	5010333	0	True				
ANR	5010450	CallExpression	"replaceWords ( s , k , v )"		5010333	0					
ANR	5010451	Callee	replaceWords		5010333	0					
ANR	5010452	Identifier	replaceWords		5010333	0					
ANR	5010453	ArgumentList	s		5010333	1					
ANR	5010454	Argument	s		5010333	0					
ANR	5010455	Identifier	s		5010333	0					
ANR	5010456	Argument	k		5010333	1					
ANR	5010457	Identifier	k		5010333	0					
ANR	5010458	Argument	v		5010333	2					
ANR	5010459	Identifier	v		5010333	0					
ANR	5010460	ReturnType	static void		5010333	1					
ANR	5010461	Identifier	__replaceRegisters		5010333	2					
ANR	5010462	ParameterList	"RReg * reg , char * s , bool x86"		5010333	3					
ANR	5010463	Parameter	RReg * reg	114:31:2121:2129	5010333	0	True				
ANR	5010464	ParameterType	RReg *		5010333	0					
ANR	5010465	Identifier	reg		5010333	1					
ANR	5010466	Parameter	char * s	114:42:2132:2138	5010333	1	True				
ANR	5010467	ParameterType	char *		5010333	0					
ANR	5010468	Identifier	s		5010333	1					
ANR	5010469	Parameter	bool x86	114:51:2141:2148	5010333	2	True				
ANR	5010470	ParameterType	bool		5010333	0					
ANR	5010471	Identifier	x86		5010333	1					
ANR	5010472	CFGEntryNode	ENTRY		5010333		True				
ANR	5010473	CFGExitNode	EXIT		5010333		True				
ANR	5010474	Symbol	R_REG_NAME_PC		5010333						
ANR	5010475	Symbol	reg32		5010333						
ANR	5010476	Symbol	i		5010333						
ANR	5010477	Symbol	k		5010333						
ANR	5010478	Symbol	* reg32		5010333						
ANR	5010479	Symbol	r_reg_get_role		5010333						
ANR	5010480	Symbol	s		5010333						
ANR	5010481	Symbol	reg		5010333						
ANR	5010482	Symbol	r_reg_get_name		5010333						
ANR	5010483	Symbol	* k		5010333						
ANR	5010484	Symbol	v		5010333						
ANR	5010485	Symbol	x86		5010333						
ANR	5010486	Symbol	strdup		5010333						
ANR	5010487	Function	filter	136:0:2525:12169							
ANR	5010488	FunctionDef	"filter (RParse * p , ut64 addr , RFlag * f , RAnalHint * hint , char * data , char * str , int len , bool big_endian)"		5010487	0					
ANR	5010489	CompoundStatement		136:117:2642:12169	5010487	0					
ANR	5010490	IdentifierDeclStatement	"char * ptr = data , * ptr2 , * ptr_backup ;"	137:1:2645:2681	5010487	0	True				
ANR	5010491	IdentifierDecl	* ptr = data		5010487	0					
ANR	5010492	IdentifierDeclType	char *		5010487	0					
ANR	5010493	Identifier	ptr		5010487	1					
ANR	5010494	AssignmentExpression	* ptr = data		5010487	2		=			
ANR	5010495	Identifier	data		5010487	0					
ANR	5010496	Identifier	data		5010487	1					
ANR	5010497	IdentifierDecl	* ptr2		5010487	1					
ANR	5010498	IdentifierDeclType	char *		5010487	0					
ANR	5010499	Identifier	ptr2		5010487	1					
ANR	5010500	IdentifierDecl	* ptr_backup		5010487	2					
ANR	5010501	IdentifierDeclType	char *		5010487	0					
ANR	5010502	Identifier	ptr_backup		5010487	1					
ANR	5010503	IdentifierDeclStatement	RAnalFunction * fcn ;	138:1:2684:2702	5010487	1	True				
ANR	5010504	IdentifierDecl	* fcn		5010487	0					
ANR	5010505	IdentifierDeclType	RAnalFunction *		5010487	0					
ANR	5010506	Identifier	fcn		5010487	1					
ANR	5010507	IdentifierDeclStatement	RFlagItem * flag ;	139:1:2705:2720	5010487	2	True				
ANR	5010508	IdentifierDecl	* flag		5010487	0					
ANR	5010509	IdentifierDeclType	RFlagItem *		5010487	0					
ANR	5010510	Identifier	flag		5010487	1					
ANR	5010511	IdentifierDeclStatement	ut64 off ;	140:1:2723:2731	5010487	3	True				
ANR	5010512	IdentifierDecl	off		5010487	0					
ANR	5010513	IdentifierDeclType	ut64		5010487	0					
ANR	5010514	Identifier	off		5010487	1					
ANR	5010515	IdentifierDeclStatement	bool x86 = false ;	141:1:2734:2750	5010487	4	True				
ANR	5010516	IdentifierDecl	x86 = false		5010487	0					
ANR	5010517	IdentifierDeclType	bool		5010487	0					
ANR	5010518	Identifier	x86		5010487	1					
ANR	5010519	AssignmentExpression	x86 = false		5010487	2		=			
ANR	5010520	Identifier	false		5010487	0					
ANR	5010521	Identifier	false		5010487	1					
ANR	5010522	IdentifierDeclStatement	bool arm = false ;	142:1:2753:2769	5010487	5	True				
ANR	5010523	IdentifierDecl	arm = false		5010487	0					
ANR	5010524	IdentifierDeclType	bool		5010487	0					
ANR	5010525	Identifier	arm		5010487	1					
ANR	5010526	AssignmentExpression	arm = false		5010487	2		=			
ANR	5010527	Identifier	false		5010487	0					
ANR	5010528	Identifier	false		5010487	1					
ANR	5010529	IfStatement	if ( p && p -> cur && p -> cur -> name )		5010487	6					
ANR	5010530	Condition	p && p -> cur && p -> cur -> name	143:5:2776:2802	5010487	0	True				
ANR	5010531	AndExpression	p && p -> cur && p -> cur -> name		5010487	0		&&			
ANR	5010532	Identifier	p		5010487	0					
ANR	5010533	AndExpression	p -> cur && p -> cur -> name		5010487	1		&&			
ANR	5010534	PtrMemberAccess	p -> cur		5010487	0					
ANR	5010535	Identifier	p		5010487	0					
ANR	5010536	Identifier	cur		5010487	1					
ANR	5010537	PtrMemberAccess	p -> cur -> name		5010487	1					
ANR	5010538	PtrMemberAccess	p -> cur		5010487	0					
ANR	5010539	Identifier	p		5010487	0					
ANR	5010540	Identifier	cur		5010487	1					
ANR	5010541	Identifier	name		5010487	1					
ANR	5010542	CompoundStatement		8:34:162:162	5010487	1					
ANR	5010543	IfStatement	"if ( strstr ( p -> cur -> name , ""x86"" ) )"		5010487	0					
ANR	5010544	Condition	"strstr ( p -> cur -> name , ""x86"" )"	144:6:2813:2840	5010487	0	True				
ANR	5010545	CallExpression	"strstr ( p -> cur -> name , ""x86"" )"		5010487	0					
ANR	5010546	Callee	strstr		5010487	0					
ANR	5010547	Identifier	strstr		5010487	0					
ANR	5010548	ArgumentList	p -> cur -> name		5010487	1					
ANR	5010549	Argument	p -> cur -> name		5010487	0					
ANR	5010550	PtrMemberAccess	p -> cur -> name		5010487	0					
ANR	5010551	PtrMemberAccess	p -> cur		5010487	0					
ANR	5010552	Identifier	p		5010487	0					
ANR	5010553	Identifier	cur		5010487	1					
ANR	5010554	Identifier	name		5010487	1					
ANR	5010555	Argument	"""x86"""		5010487	1					
ANR	5010556	PrimaryExpression	"""x86"""		5010487	0					
ANR	5010557	CompoundStatement		9:36:200:200	5010487	1					
ANR	5010558	ExpressionStatement	x86 = true	145:3:2848:2858	5010487	0	True				
ANR	5010559	AssignmentExpression	x86 = true		5010487	0		=			
ANR	5010560	Identifier	x86		5010487	0					
ANR	5010561	Identifier	true		5010487	1					
ANR	5010562	IfStatement	"if ( strstr ( p -> cur -> name , ""m68k"" ) )"		5010487	1					
ANR	5010563	Condition	"strstr ( p -> cur -> name , ""m68k"" )"	147:6:2870:2898	5010487	0	True				
ANR	5010564	CallExpression	"strstr ( p -> cur -> name , ""m68k"" )"		5010487	0					
ANR	5010565	Callee	strstr		5010487	0					
ANR	5010566	Identifier	strstr		5010487	0					
ANR	5010567	ArgumentList	p -> cur -> name		5010487	1					
ANR	5010568	Argument	p -> cur -> name		5010487	0					
ANR	5010569	PtrMemberAccess	p -> cur -> name		5010487	0					
ANR	5010570	PtrMemberAccess	p -> cur		5010487	0					
ANR	5010571	Identifier	p		5010487	0					
ANR	5010572	Identifier	cur		5010487	1					
ANR	5010573	Identifier	name		5010487	1					
ANR	5010574	Argument	"""m68k"""		5010487	1					
ANR	5010575	PrimaryExpression	"""m68k"""		5010487	0					
ANR	5010576	CompoundStatement		12:37:258:258	5010487	1					
ANR	5010577	ExpressionStatement	x86 = true	148:3:2906:2916	5010487	0	True				
ANR	5010578	AssignmentExpression	x86 = true		5010487	0		=			
ANR	5010579	Identifier	x86		5010487	0					
ANR	5010580	Identifier	true		5010487	1					
ANR	5010581	IfStatement	"if ( strstr ( p -> cur -> name , ""arm"" ) )"		5010487	2					
ANR	5010582	Condition	"strstr ( p -> cur -> name , ""arm"" )"	150:6:2928:2955	5010487	0	True				
ANR	5010583	CallExpression	"strstr ( p -> cur -> name , ""arm"" )"		5010487	0					
ANR	5010584	Callee	strstr		5010487	0					
ANR	5010585	Identifier	strstr		5010487	0					
ANR	5010586	ArgumentList	p -> cur -> name		5010487	1					
ANR	5010587	Argument	p -> cur -> name		5010487	0					
ANR	5010588	PtrMemberAccess	p -> cur -> name		5010487	0					
ANR	5010589	PtrMemberAccess	p -> cur		5010487	0					
ANR	5010590	Identifier	p		5010487	0					
ANR	5010591	Identifier	cur		5010487	1					
ANR	5010592	Identifier	name		5010487	1					
ANR	5010593	Argument	"""arm"""		5010487	1					
ANR	5010594	PrimaryExpression	"""arm"""		5010487	0					
ANR	5010595	CompoundStatement		15:36:315:315	5010487	1					
ANR	5010596	ExpressionStatement	arm = true	151:3:2963:2973	5010487	0	True				
ANR	5010597	AssignmentExpression	arm = true		5010487	0		=			
ANR	5010598	Identifier	arm		5010487	0					
ANR	5010599	Identifier	true		5010487	1					
ANR	5010600	IfStatement	if ( ! data || ! p )		5010487	7					
ANR	5010601	Condition	! data || ! p	154:5:2987:2997	5010487	0	True				
ANR	5010602	OrExpression	! data || ! p		5010487	0		||			
ANR	5010603	UnaryOperationExpression	! data		5010487	0					
ANR	5010604	UnaryOperator	!		5010487	0					
ANR	5010605	Identifier	data		5010487	1					
ANR	5010606	UnaryOperationExpression	! p		5010487	1					
ANR	5010607	UnaryOperator	!		5010487	0					
ANR	5010608	Identifier	p		5010487	1					
ANR	5010609	CompoundStatement		19:18:357:357	5010487	1					
ANR	5010610	ReturnStatement	return 0 ;	155:2:3004:3012	5010487	0	True				
ANR	5010611	PrimaryExpression	0		5010487	0					
ANR	5010612	ExpressionStatement	"replaceWords ( ptr , ""dword "" , src )"	158:1:3035:3068	5010487	8	True				
ANR	5010613	CallExpression	"replaceWords ( ptr , ""dword "" , src )"		5010487	0					
ANR	5010614	Callee	replaceWords		5010487	0					
ANR	5010615	Identifier	replaceWords		5010487	0					
ANR	5010616	ArgumentList	ptr		5010487	1					
ANR	5010617	Argument	ptr		5010487	0					
ANR	5010618	Identifier	ptr		5010487	0					
ANR	5010619	Argument	"""dword """		5010487	1					
ANR	5010620	PrimaryExpression	"""dword """		5010487	0					
ANR	5010621	Argument	src		5010487	2					
ANR	5010622	Identifier	src		5010487	0					
ANR	5010623	ExpressionStatement	"replaceWords ( ptr , ""qword "" , src )"	159:1:3071:3104	5010487	9	True				
ANR	5010624	CallExpression	"replaceWords ( ptr , ""qword "" , src )"		5010487	0					
ANR	5010625	Callee	replaceWords		5010487	0					
ANR	5010626	Identifier	replaceWords		5010487	0					
ANR	5010627	ArgumentList	ptr		5010487	1					
ANR	5010628	Argument	ptr		5010487	0					
ANR	5010629	Identifier	ptr		5010487	0					
ANR	5010630	Argument	"""qword """		5010487	1					
ANR	5010631	PrimaryExpression	"""qword """		5010487	0					
ANR	5010632	Argument	src		5010487	2					
ANR	5010633	Identifier	src		5010487	0					
ANR	5010634	IfStatement	if ( p -> regsub )		5010487	10					
ANR	5010635	Condition	p -> regsub	161:5:3118:3126	5010487	0	True				
ANR	5010636	PtrMemberAccess	p -> regsub		5010487	0					
ANR	5010637	Identifier	p		5010487	0					
ANR	5010638	Identifier	regsub		5010487	1					
ANR	5010639	CompoundStatement		26:16:486:486	5010487	1					
ANR	5010640	ExpressionStatement	"__replaceRegisters ( p -> analb . anal -> reg , ptr , false )"	162:2:3133:3184	5010487	0	True				
ANR	5010641	CallExpression	"__replaceRegisters ( p -> analb . anal -> reg , ptr , false )"		5010487	0					
ANR	5010642	Callee	__replaceRegisters		5010487	0					
ANR	5010643	Identifier	__replaceRegisters		5010487	0					
ANR	5010644	ArgumentList	p -> analb . anal -> reg		5010487	1					
ANR	5010645	Argument	p -> analb . anal -> reg		5010487	0					
ANR	5010646	PtrMemberAccess	p -> analb . anal -> reg		5010487	0					
ANR	5010647	MemberAccess	p -> analb . anal		5010487	0					
ANR	5010648	PtrMemberAccess	p -> analb		5010487	0					
ANR	5010649	Identifier	p		5010487	0					
ANR	5010650	Identifier	analb		5010487	1					
ANR	5010651	Identifier	anal		5010487	1					
ANR	5010652	Identifier	reg		5010487	1					
ANR	5010653	Argument	ptr		5010487	1					
ANR	5010654	Identifier	ptr		5010487	0					
ANR	5010655	Argument	false		5010487	2					
ANR	5010656	Identifier	false		5010487	0					
ANR	5010657	IfStatement	if ( x86 )		5010487	1					
ANR	5010658	Condition	x86	163:6:3192:3194	5010487	0	True				
ANR	5010659	Identifier	x86		5010487	0					
ANR	5010660	CompoundStatement		28:11:554:554	5010487	1					
ANR	5010661	ExpressionStatement	"__replaceRegisters ( p -> analb . anal -> reg , ptr , true )"	164:3:3202:3252	5010487	0	True				
ANR	5010662	CallExpression	"__replaceRegisters ( p -> analb . anal -> reg , ptr , true )"		5010487	0					
ANR	5010663	Callee	__replaceRegisters		5010487	0					
ANR	5010664	Identifier	__replaceRegisters		5010487	0					
ANR	5010665	ArgumentList	p -> analb . anal -> reg		5010487	1					
ANR	5010666	Argument	p -> analb . anal -> reg		5010487	0					
ANR	5010667	PtrMemberAccess	p -> analb . anal -> reg		5010487	0					
ANR	5010668	MemberAccess	p -> analb . anal		5010487	0					
ANR	5010669	PtrMemberAccess	p -> analb		5010487	0					
ANR	5010670	Identifier	p		5010487	0					
ANR	5010671	Identifier	analb		5010487	1					
ANR	5010672	Identifier	anal		5010487	1					
ANR	5010673	Identifier	reg		5010487	1					
ANR	5010674	Argument	ptr		5010487	1					
ANR	5010675	Identifier	ptr		5010487	0					
ANR	5010676	Argument	true		5010487	2					
ANR	5010677	Identifier	true		5010487	0					
ANR	5010678	ExpressionStatement	ptr2 = NULL	167:1:3262:3273	5010487	11	True				
ANR	5010679	AssignmentExpression	ptr2 = NULL		5010487	0		=			
ANR	5010680	Identifier	ptr2		5010487	0					
ANR	5010681	Identifier	NULL		5010487	1					
ANR	5010682	IdentifierDeclStatement	char * nptr ;	169:1:3297:3307	5010487	12	True				
ANR	5010683	IdentifierDecl	* nptr		5010487	0					
ANR	5010684	IdentifierDeclType	char *		5010487	0					
ANR	5010685	Identifier	nptr		5010487	1					
ANR	5010686	IdentifierDeclStatement	int count = 0 ;	170:1:3310:3323	5010487	13	True				
ANR	5010687	IdentifierDecl	count = 0		5010487	0					
ANR	5010688	IdentifierDeclType	int		5010487	0					
ANR	5010689	Identifier	count		5010487	1					
ANR	5010690	AssignmentExpression	count = 0		5010487	2		=			
ANR	5010691	Identifier	count		5010487	0					
ANR	5010692	PrimaryExpression	0		5010487	1					
ANR	5010693	ForStatement	for ( count = 0 ; ( nptr = findNextNumber ( ptr ) ) ; count ++ )		5010487	14					
ANR	5010694	ForInit	count = 0 ;	171:6:3331:3340	5010487	0	True				
ANR	5010695	AssignmentExpression	count = 0		5010487	0		=			
ANR	5010696	Identifier	count		5010487	0					
ANR	5010697	PrimaryExpression	0		5010487	1					
ANR	5010698	Condition	nptr = findNextNumber ( ptr )	171:17:3342:3370	5010487	1	True				
ANR	5010699	AssignmentExpression	nptr = findNextNumber ( ptr )		5010487	0		=			
ANR	5010700	Identifier	nptr		5010487	0					
ANR	5010701	CallExpression	findNextNumber ( ptr )		5010487	1					
ANR	5010702	Callee	findNextNumber		5010487	0					
ANR	5010703	Identifier	findNextNumber		5010487	0					
ANR	5010704	ArgumentList	ptr		5010487	1					
ANR	5010705	Argument	ptr		5010487	0					
ANR	5010706	Identifier	ptr		5010487	0					
ANR	5010707	PostIncDecOperationExpression	count ++	171:49:3374:3380	5010487	2	True				
ANR	5010708	Identifier	count		5010487	0					
ANR	5010709	IncDec	++		5010487	1					
ANR	5010710	CompoundStatement		36:58:740:740	5010487	3					
ANR	5010711	ExpressionStatement	ptr = nptr	172:2:3387:3397	5010487	0	True				
ANR	5010712	AssignmentExpression	ptr = nptr		5010487	0		=			
ANR	5010713	Identifier	ptr		5010487	0					
ANR	5010714	Identifier	nptr		5010487	1					
ANR	5010715	IfStatement	if ( x86 )		5010487	1					
ANR	5010716	Condition	x86	173:6:3405:3407	5010487	0	True				
ANR	5010717	Identifier	x86		5010487	0					
ANR	5010718	CompoundStatement		38:11:767:767	5010487	1					
ANR	5010719	ForStatement	for ( ptr2 = ptr ; * ptr2 && ! isx86separator ( * ptr2 ) ; ptr2 ++ )		5010487	0					
ANR	5010720	ForInit	ptr2 = ptr ;	174:8:3420:3430	5010487	0	True				
ANR	5010721	AssignmentExpression	ptr2 = ptr		5010487	0		=			
ANR	5010722	Identifier	ptr2		5010487	0					
ANR	5010723	Identifier	ptr		5010487	1					
ANR	5010724	Condition	* ptr2 && ! isx86separator ( * ptr2 )	174:20:3432:3463	5010487	1	True				
ANR	5010725	AndExpression	* ptr2 && ! isx86separator ( * ptr2 )		5010487	0		&&			
ANR	5010726	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010727	UnaryOperator	*		5010487	0					
ANR	5010728	Identifier	ptr2		5010487	1					
ANR	5010729	UnaryOperationExpression	! isx86separator ( * ptr2 )		5010487	1					
ANR	5010730	UnaryOperator	!		5010487	0					
ANR	5010731	CallExpression	isx86separator ( * ptr2 )		5010487	1					
ANR	5010732	Callee	isx86separator		5010487	0					
ANR	5010733	Identifier	isx86separator		5010487	0					
ANR	5010734	ArgumentList	* ptr2		5010487	1					
ANR	5010735	Argument	* ptr2		5010487	0					
ANR	5010736	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010737	UnaryOperator	*		5010487	0					
ANR	5010738	Identifier	ptr2		5010487	1					
ANR	5010739	PostIncDecOperationExpression	ptr2 ++	174:54:3466:3471	5010487	2	True				
ANR	5010740	Identifier	ptr2		5010487	0					
ANR	5010741	IncDec	++		5010487	1					
ANR	5010742	CompoundStatement		39:62:831:831	5010487	3					
ANR	5010743	ExpressionStatement		175:4:3480:3480	5010487	0	True				
ANR	5010744	ElseStatement	else		5010487	0					
ANR	5010745	CompoundStatement		42:9:853:853	5010487	0					
ANR	5010746	ForStatement	for ( ptr2 = ptr ; * ptr2 && ( * ptr2 != ']' && ( * ptr2 != x1b ) && ! IS_SEPARATOR ( * ptr2 ) ) ; ptr2 ++ )		5010487	0					
ANR	5010747	ForInit	ptr2 = ptr ;	178:8:3506:3516	5010487	0	True				
ANR	5010748	AssignmentExpression	ptr2 = ptr		5010487	0		=			
ANR	5010749	Identifier	ptr2		5010487	0					
ANR	5010750	Identifier	ptr		5010487	1					
ANR	5010751	Condition	* ptr2 && ( * ptr2 != ']' && ( * ptr2 != x1b ) && ! IS_SEPARATOR ( * ptr2 ) )	178:20:3518:3586	5010487	1	True				
ANR	5010752	AndExpression	* ptr2 && ( * ptr2 != ']' && ( * ptr2 != x1b ) && ! IS_SEPARATOR ( * ptr2 ) )		5010487	0		&&			
ANR	5010753	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010754	UnaryOperator	*		5010487	0					
ANR	5010755	Identifier	ptr2		5010487	1					
ANR	5010756	AndExpression	* ptr2 != ']' && ( * ptr2 != x1b ) && ! IS_SEPARATOR ( * ptr2 )		5010487	1		&&			
ANR	5010757	EqualityExpression	* ptr2 != ']'		5010487	0		!=			
ANR	5010758	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010759	UnaryOperator	*		5010487	0					
ANR	5010760	Identifier	ptr2		5010487	1					
ANR	5010761	PrimaryExpression	']'		5010487	1					
ANR	5010762	AndExpression	( * ptr2 != x1b ) && ! IS_SEPARATOR ( * ptr2 )		5010487	1		&&			
ANR	5010763	EqualityExpression	* ptr2 != x1b		5010487	0		!=			
ANR	5010764	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010765	UnaryOperator	*		5010487	0					
ANR	5010766	Identifier	ptr2		5010487	1					
ANR	5010767	Identifier	x1b		5010487	1					
ANR	5010768	UnaryOperationExpression	! IS_SEPARATOR ( * ptr2 )		5010487	1					
ANR	5010769	UnaryOperator	!		5010487	0					
ANR	5010770	CallExpression	IS_SEPARATOR ( * ptr2 )		5010487	1					
ANR	5010771	Callee	IS_SEPARATOR		5010487	0					
ANR	5010772	Identifier	IS_SEPARATOR		5010487	0					
ANR	5010773	ArgumentList	* ptr2		5010487	1					
ANR	5010774	Argument	* ptr2		5010487	0					
ANR	5010775	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010776	UnaryOperator	*		5010487	0					
ANR	5010777	Identifier	ptr2		5010487	1					
ANR	5010778	PostIncDecOperationExpression	ptr2 ++	178:91:3589:3594	5010487	2	True				
ANR	5010779	Identifier	ptr2		5010487	0					
ANR	5010780	IncDec	++		5010487	1					
ANR	5010781	CompoundStatement		43:99:954:954	5010487	3					
ANR	5010782	ExpressionStatement		179:4:3603:3603	5010487	0	True				
ANR	5010783	ExpressionStatement	"off = r_num_math ( NULL , ptr )"	182:2:3616:3644	5010487	2	True				
ANR	5010784	AssignmentExpression	"off = r_num_math ( NULL , ptr )"		5010487	0		=			
ANR	5010785	Identifier	off		5010487	0					
ANR	5010786	CallExpression	"r_num_math ( NULL , ptr )"		5010487	1					
ANR	5010787	Callee	r_num_math		5010487	0					
ANR	5010788	Identifier	r_num_math		5010487	0					
ANR	5010789	ArgumentList	NULL		5010487	1					
ANR	5010790	Argument	NULL		5010487	0					
ANR	5010791	Identifier	NULL		5010487	0					
ANR	5010792	Argument	ptr		5010487	1					
ANR	5010793	Identifier	ptr		5010487	0					
ANR	5010794	IfStatement	if ( off >= p -> minval )		5010487	3					
ANR	5010795	Condition	off >= p -> minval	183:6:3652:3667	5010487	0	True				
ANR	5010796	RelationalExpression	off >= p -> minval		5010487	0		>=			
ANR	5010797	Identifier	off		5010487	0					
ANR	5010798	PtrMemberAccess	p -> minval		5010487	1					
ANR	5010799	Identifier	p		5010487	0					
ANR	5010800	Identifier	minval		5010487	1					
ANR	5010801	CompoundStatement		48:24:1027:1027	5010487	1					
ANR	5010802	ExpressionStatement	"fcn = p -> analb . get_fcn_in ( p -> analb . anal , off , 0 )"	184:3:3675:3724	5010487	0	True				
ANR	5010803	AssignmentExpression	"fcn = p -> analb . get_fcn_in ( p -> analb . anal , off , 0 )"		5010487	0		=			
ANR	5010804	Identifier	fcn		5010487	0					
ANR	5010805	CallExpression	"p -> analb . get_fcn_in ( p -> analb . anal , off , 0 )"		5010487	1					
ANR	5010806	Callee	p -> analb . get_fcn_in		5010487	0					
ANR	5010807	MemberAccess	p -> analb . get_fcn_in		5010487	0					
ANR	5010808	PtrMemberAccess	p -> analb		5010487	0					
ANR	5010809	Identifier	p		5010487	0					
ANR	5010810	Identifier	analb		5010487	1					
ANR	5010811	Identifier	get_fcn_in		5010487	1					
ANR	5010812	ArgumentList	p -> analb . anal		5010487	1					
ANR	5010813	Argument	p -> analb . anal		5010487	0					
ANR	5010814	MemberAccess	p -> analb . anal		5010487	0					
ANR	5010815	PtrMemberAccess	p -> analb		5010487	0					
ANR	5010816	Identifier	p		5010487	0					
ANR	5010817	Identifier	analb		5010487	1					
ANR	5010818	Identifier	anal		5010487	1					
ANR	5010819	Argument	off		5010487	1					
ANR	5010820	Identifier	off		5010487	0					
ANR	5010821	Argument	0		5010487	2					
ANR	5010822	PrimaryExpression	0		5010487	0					
ANR	5010823	IfStatement	if ( fcn && fcn -> addr == off )		5010487	1					
ANR	5010824	Condition	fcn && fcn -> addr == off	185:7:3733:3755	5010487	0	True				
ANR	5010825	AndExpression	fcn && fcn -> addr == off		5010487	0		&&			
ANR	5010826	Identifier	fcn		5010487	0					
ANR	5010827	EqualityExpression	fcn -> addr == off		5010487	1		==			
ANR	5010828	PtrMemberAccess	fcn -> addr		5010487	0					
ANR	5010829	Identifier	fcn		5010487	0					
ANR	5010830	Identifier	addr		5010487	1					
ANR	5010831	Identifier	off		5010487	1					
ANR	5010832	CompoundStatement		50:32:1115:1115	5010487	1					
ANR	5010833	ExpressionStatement	* ptr = 0	186:4:3764:3772	5010487	0	True				
ANR	5010834	AssignmentExpression	* ptr = 0		5010487	0		=			
ANR	5010835	UnaryOperationExpression	* ptr		5010487	0					
ANR	5010836	UnaryOperator	*		5010487	0					
ANR	5010837	Identifier	ptr		5010487	1					
ANR	5010838	PrimaryExpression	0		5010487	1					
ANR	5010839	ExpressionStatement	ptr2 --	188:4:3821:3827	5010487	1	True				
ANR	5010840	PostIncDecOperationExpression	ptr2 --		5010487	0					
ANR	5010841	Identifier	ptr2		5010487	0					
ANR	5010842	IncDec	--		5010487	1					
ANR	5010843	IfStatement	if ( * ptr2 != 0x1b )		5010487	2					
ANR	5010844	Condition	* ptr2 != 0x1b	189:8:3837:3849	5010487	0	True				
ANR	5010845	EqualityExpression	* ptr2 != 0x1b		5010487	0		!=			
ANR	5010846	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5010847	UnaryOperator	*		5010487	0					
ANR	5010848	Identifier	ptr2		5010487	1					
ANR	5010849	PrimaryExpression	0x1b		5010487	1					
ANR	5010850	CompoundStatement		54:23:1209:1209	5010487	1					
ANR	5010851	ExpressionStatement	ptr2 ++	190:5:3859:3865	5010487	0	True				
ANR	5010852	PostIncDecOperationExpression	ptr2 ++		5010487	0					
ANR	5010853	Identifier	ptr2		5010487	0					
ANR	5010854	IncDec	++		5010487	1					
ANR	5010855	ExpressionStatement	"snprintf ( str , len , ""%s%s%s"" , data , fcn -> name , ( ptr != ptr2 ) ? ptr2 : """" )"	192:4:3877:3953	5010487	3	True				
ANR	5010856	CallExpression	"snprintf ( str , len , ""%s%s%s"" , data , fcn -> name , ( ptr != ptr2 ) ? ptr2 : """" )"		5010487	0					
ANR	5010857	Callee	snprintf		5010487	0					
ANR	5010858	Identifier	snprintf		5010487	0					
ANR	5010859	ArgumentList	str		5010487	1					
ANR	5010860	Argument	str		5010487	0					
ANR	5010861	Identifier	str		5010487	0					
ANR	5010862	Argument	len		5010487	1					
ANR	5010863	Identifier	len		5010487	0					
ANR	5010864	Argument	"""%s%s%s"""		5010487	2					
ANR	5010865	PrimaryExpression	"""%s%s%s"""		5010487	0					
ANR	5010866	Argument	data		5010487	3					
ANR	5010867	Identifier	data		5010487	0					
ANR	5010868	Argument	fcn -> name		5010487	4					
ANR	5010869	PtrMemberAccess	fcn -> name		5010487	0					
ANR	5010870	Identifier	fcn		5010487	0					
ANR	5010871	Identifier	name		5010487	1					
ANR	5010872	Argument	"( ptr != ptr2 ) ? ptr2 : """""		5010487	5					
ANR	5010873	ConditionalExpression	"( ptr != ptr2 ) ? ptr2 : """""		5010487	0					
ANR	5010874	Condition	ptr != ptr2		5010487	0					
ANR	5010875	EqualityExpression	ptr != ptr2		5010487	0		!=			
ANR	5010876	Identifier	ptr		5010487	0					
ANR	5010877	Identifier	ptr2		5010487	1					
ANR	5010878	Identifier	ptr2		5010487	1					
ANR	5010879	PrimaryExpression	""""""		5010487	2					
ANR	5010880	ReturnStatement	return true ;	194:4:3959:3970	5010487	4	True				
ANR	5010881	Identifier	true		5010487	0					
ANR	5010882	IfStatement	if ( f )		5010487	2					
ANR	5010883	Condition	f	196:7:3984:3984	5010487	0	True				
ANR	5010884	Identifier	f		5010487	0					
ANR	5010885	CompoundStatement		77:4:1845:1903	5010487	1					
ANR	5010886	IdentifierDeclStatement	RFlagItem * flag2 ;	197:4:3993:4009	5010487	0	True				
ANR	5010887	IdentifierDecl	* flag2		5010487	0					
ANR	5010888	IdentifierDeclType	RFlagItem *		5010487	0					
ANR	5010889	Identifier	flag2		5010487	1					
ANR	5010890	IdentifierDeclStatement	"bool lea = x86 && r_str_startswith ( data , ""lea"" ) && ( data [ 3 ] == ' ' || data [ 3 ] == 0x1b ) ;"	198:4:4015:4115	5010487	1	True				
ANR	5010891	IdentifierDecl	"lea = x86 && r_str_startswith ( data , ""lea"" ) && ( data [ 3 ] == ' ' || data [ 3 ] == 0x1b )"		5010487	0					
ANR	5010892	IdentifierDeclType	bool		5010487	0					
ANR	5010893	Identifier	lea		5010487	1					
ANR	5010894	AssignmentExpression	"lea = x86 && r_str_startswith ( data , ""lea"" ) && ( data [ 3 ] == ' ' || data [ 3 ] == 0x1b )"		5010487	2		=			
ANR	5010895	Identifier	lea		5010487	0					
ANR	5010896	AndExpression	"x86 && r_str_startswith ( data , ""lea"" ) && ( data [ 3 ] == ' ' || data [ 3 ] == 0x1b )"		5010487	1		&&			
ANR	5010897	Identifier	x86		5010487	0					
ANR	5010898	AndExpression	"r_str_startswith ( data , ""lea"" ) && ( data [ 3 ] == ' ' || data [ 3 ] == 0x1b )"		5010487	1		&&			
ANR	5010899	CallExpression	"r_str_startswith ( data , ""lea"" )"		5010487	0					
ANR	5010900	Callee	r_str_startswith		5010487	0					
ANR	5010901	Identifier	r_str_startswith		5010487	0					
ANR	5010902	ArgumentList	data		5010487	1					
ANR	5010903	Argument	data		5010487	0					
ANR	5010904	Identifier	data		5010487	0					
ANR	5010905	Argument	"""lea"""		5010487	1					
ANR	5010906	PrimaryExpression	"""lea"""		5010487	0					
ANR	5010907	OrExpression	data [ 3 ] == ' ' || data [ 3 ] == 0x1b		5010487	1		||			
ANR	5010908	EqualityExpression	data [ 3 ] == ' '		5010487	0		==			
ANR	5010909	ArrayIndexing	data [ 3 ]		5010487	0					
ANR	5010910	Identifier	data		5010487	0					
ANR	5010911	PrimaryExpression	3		5010487	1					
ANR	5010912	PrimaryExpression	' '		5010487	1					
ANR	5010913	EqualityExpression	data [ 3 ] == 0x1b		5010487	1		==			
ANR	5010914	ArrayIndexing	data [ 3 ]		5010487	0					
ANR	5010915	Identifier	data		5010487	0					
ANR	5010916	PrimaryExpression	3		5010487	1					
ANR	5010917	PrimaryExpression	0x1b		5010487	1					
ANR	5010918	IdentifierDeclStatement	bool remove_brackets = false ;	200:4:4121:4149	5010487	2	True				
ANR	5010919	IdentifierDecl	remove_brackets = false		5010487	0					
ANR	5010920	IdentifierDeclType	bool		5010487	0					
ANR	5010921	Identifier	remove_brackets		5010487	1					
ANR	5010922	AssignmentExpression	remove_brackets = false		5010487	2		=			
ANR	5010923	Identifier	false		5010487	0					
ANR	5010924	Identifier	false		5010487	1					
ANR	5010925	ExpressionStatement	"flag = p -> flag_get ( f , off )"	201:4:4155:4182	5010487	3	True				
ANR	5010926	AssignmentExpression	"flag = p -> flag_get ( f , off )"		5010487	0		=			
ANR	5010927	Identifier	flag		5010487	0					
ANR	5010928	CallExpression	"p -> flag_get ( f , off )"		5010487	1					
ANR	5010929	Callee	p -> flag_get		5010487	0					
ANR	5010930	PtrMemberAccess	p -> flag_get		5010487	0					
ANR	5010931	Identifier	p		5010487	0					
ANR	5010932	Identifier	flag_get		5010487	1					
ANR	5010933	ArgumentList	f		5010487	1					
ANR	5010934	Argument	f		5010487	0					
ANR	5010935	Identifier	f		5010487	0					
ANR	5010936	Argument	off		5010487	1					
ANR	5010937	Identifier	off		5010487	0					
ANR	5010938	IfStatement	if ( ( ! flag || arm ) && p -> relsub_addr )		5010487	4					
ANR	5010939	Condition	( ! flag || arm ) && p -> relsub_addr	202:8:4192:4223	5010487	0	True				
ANR	5010940	AndExpression	( ! flag || arm ) && p -> relsub_addr		5010487	0		&&			
ANR	5010941	OrExpression	! flag || arm		5010487	0		||			
ANR	5010942	UnaryOperationExpression	! flag		5010487	0					
ANR	5010943	UnaryOperator	!		5010487	0					
ANR	5010944	Identifier	flag		5010487	1					
ANR	5010945	Identifier	arm		5010487	1					
ANR	5010946	PtrMemberAccess	p -> relsub_addr		5010487	1					
ANR	5010947	Identifier	p		5010487	0					
ANR	5010948	Identifier	relsub_addr		5010487	1					
ANR	5010949	CompoundStatement		67:42:1583:1583	5010487	1					
ANR	5010950	ExpressionStatement	remove_brackets = lea || ( arm && p -> relsub_addr )	203:5:4233:4281	5010487	0	True				
ANR	5010951	AssignmentExpression	remove_brackets = lea || ( arm && p -> relsub_addr )		5010487	0		=			
ANR	5010952	Identifier	remove_brackets		5010487	0					
ANR	5010953	OrExpression	lea || ( arm && p -> relsub_addr )		5010487	1		||			
ANR	5010954	Identifier	lea		5010487	0					
ANR	5010955	AndExpression	arm && p -> relsub_addr		5010487	1		&&			
ANR	5010956	Identifier	arm		5010487	0					
ANR	5010957	PtrMemberAccess	p -> relsub_addr		5010487	1					
ANR	5010958	Identifier	p		5010487	0					
ANR	5010959	Identifier	relsub_addr		5010487	1					
ANR	5010960	ExpressionStatement	"flag2 = p -> flag_get ( f , p -> relsub_addr )"	204:5:4288:4327	5010487	1	True				
ANR	5010961	AssignmentExpression	"flag2 = p -> flag_get ( f , p -> relsub_addr )"		5010487	0		=			
ANR	5010962	Identifier	flag2		5010487	0					
ANR	5010963	CallExpression	"p -> flag_get ( f , p -> relsub_addr )"		5010487	1					
ANR	5010964	Callee	p -> flag_get		5010487	0					
ANR	5010965	PtrMemberAccess	p -> flag_get		5010487	0					
ANR	5010966	Identifier	p		5010487	0					
ANR	5010967	Identifier	flag_get		5010487	1					
ANR	5010968	ArgumentList	f		5010487	1					
ANR	5010969	Argument	f		5010487	0					
ANR	5010970	Identifier	f		5010487	0					
ANR	5010971	Argument	p -> relsub_addr		5010487	1					
ANR	5010972	PtrMemberAccess	p -> relsub_addr		5010487	0					
ANR	5010973	Identifier	p		5010487	0					
ANR	5010974	Identifier	relsub_addr		5010487	1					
ANR	5010975	IfStatement	if ( ! flag || arm )		5010487	2					
ANR	5010976	Condition	! flag || arm	205:9:4338:4349	5010487	0	True				
ANR	5010977	OrExpression	! flag || arm		5010487	0		||			
ANR	5010978	UnaryOperationExpression	! flag		5010487	0					
ANR	5010979	UnaryOperator	!		5010487	0					
ANR	5010980	Identifier	flag		5010487	1					
ANR	5010981	Identifier	arm		5010487	1					
ANR	5010982	CompoundStatement		70:23:1709:1709	5010487	1					
ANR	5010983	ExpressionStatement	flag = flag2	206:6:4360:4372	5010487	0	True				
ANR	5010984	AssignmentExpression	flag = flag2		5010487	0		=			
ANR	5010985	Identifier	flag		5010487	0					
ANR	5010986	Identifier	flag2		5010487	1					
ANR	5010987	IfStatement	"if ( flag && ! strncmp ( flag -> name , ""section."" , 8 ) )"		5010487	5					
ANR	5010988	Condition	"flag && ! strncmp ( flag -> name , ""section."" , 8 )"	209:8:4395:4438	5010487	0	True				
ANR	5010989	AndExpression	"flag && ! strncmp ( flag -> name , ""section."" , 8 )"		5010487	0		&&			
ANR	5010990	Identifier	flag		5010487	0					
ANR	5010991	UnaryOperationExpression	"! strncmp ( flag -> name , ""section."" , 8 )"		5010487	1					
ANR	5010992	UnaryOperator	!		5010487	0					
ANR	5010993	CallExpression	"strncmp ( flag -> name , ""section."" , 8 )"		5010487	1					
ANR	5010994	Callee	strncmp		5010487	0					
ANR	5010995	Identifier	strncmp		5010487	0					
ANR	5010996	ArgumentList	flag -> name		5010487	1					
ANR	5010997	Argument	flag -> name		5010487	0					
ANR	5010998	PtrMemberAccess	flag -> name		5010487	0					
ANR	5010999	Identifier	flag		5010487	0					
ANR	5011000	Identifier	name		5010487	1					
ANR	5011001	Argument	"""section."""		5010487	1					
ANR	5011002	PrimaryExpression	"""section."""		5010487	0					
ANR	5011003	Argument	8		5010487	2					
ANR	5011004	PrimaryExpression	8		5010487	0					
ANR	5011005	CompoundStatement		74:54:1798:1798	5010487	1					
ANR	5011006	ExpressionStatement	"flag = r_flag_get_i ( f , off )"	210:5:4448:4476	5010487	0	True				
ANR	5011007	AssignmentExpression	"flag = r_flag_get_i ( f , off )"		5010487	0		=			
ANR	5011008	Identifier	flag		5010487	0					
ANR	5011009	CallExpression	"r_flag_get_i ( f , off )"		5010487	1					
ANR	5011010	Callee	r_flag_get_i		5010487	0					
ANR	5011011	Identifier	r_flag_get_i		5010487	0					
ANR	5011012	ArgumentList	f		5010487	1					
ANR	5011013	Argument	f		5010487	0					
ANR	5011014	Identifier	f		5010487	0					
ANR	5011015	Argument	off		5010487	1					
ANR	5011016	Identifier	off		5010487	0					
ANR	5011017	IdentifierDeclStatement	"const char * label = p -> label_get ( p -> analb . anal , fcn , off ) ;"	212:4:4488:4546	5010487	6	True				
ANR	5011018	IdentifierDecl	"* label = p -> label_get ( p -> analb . anal , fcn , off )"		5010487	0					
ANR	5011019	IdentifierDeclType	const char *		5010487	0					
ANR	5011020	Identifier	label		5010487	1					
ANR	5011021	AssignmentExpression	"* label = p -> label_get ( p -> analb . anal , fcn , off )"		5010487	2		=			
ANR	5011022	Identifier	label		5010487	0					
ANR	5011023	CallExpression	"p -> label_get ( p -> analb . anal , fcn , off )"		5010487	1					
ANR	5011024	Callee	p -> label_get		5010487	0					
ANR	5011025	PtrMemberAccess	p -> label_get		5010487	0					
ANR	5011026	Identifier	p		5010487	0					
ANR	5011027	Identifier	label_get		5010487	1					
ANR	5011028	ArgumentList	p -> analb . anal		5010487	1					
ANR	5011029	Argument	p -> analb . anal		5010487	0					
ANR	5011030	MemberAccess	p -> analb . anal		5010487	0					
ANR	5011031	PtrMemberAccess	p -> analb		5010487	0					
ANR	5011032	Identifier	p		5010487	0					
ANR	5011033	Identifier	analb		5010487	1					
ANR	5011034	Identifier	anal		5010487	1					
ANR	5011035	Argument	fcn		5010487	1					
ANR	5011036	Identifier	fcn		5010487	0					
ANR	5011037	Argument	off		5010487	2					
ANR	5011038	Identifier	off		5010487	0					
ANR	5011039	IfStatement	if ( label || isvalidflag ( flag ) )		5010487	7					
ANR	5011040	Condition	label || isvalidflag ( flag )	213:8:4556:4582	5010487	0	True				
ANR	5011041	OrExpression	label || isvalidflag ( flag )		5010487	0		||			
ANR	5011042	Identifier	label		5010487	0					
ANR	5011043	CallExpression	isvalidflag ( flag )		5010487	1					
ANR	5011044	Callee	isvalidflag		5010487	0					
ANR	5011045	Identifier	isvalidflag		5010487	0					
ANR	5011046	ArgumentList	flag		5010487	1					
ANR	5011047	Argument	flag		5010487	0					
ANR	5011048	Identifier	flag		5010487	0					
ANR	5011049	CompoundStatement		140:5:3747:3766	5010487	1					
ANR	5011050	IfStatement	if ( p -> notin_flagspace )		5010487	0					
ANR	5011051	Condition	p -> notin_flagspace	214:9:4596:4613	5010487	0	True				
ANR	5011052	PtrMemberAccess	p -> notin_flagspace		5010487	0					
ANR	5011053	Identifier	p		5010487	0					
ANR	5011054	Identifier	notin_flagspace		5010487	1					
ANR	5011055	CompoundStatement		79:29:1973:1973	5010487	1					
ANR	5011056	IfStatement	if ( p -> flagspace == flag -> space )		5010487	0					
ANR	5011057	Condition	p -> flagspace == flag -> space	215:10:4628:4654	5010487	0	True				
ANR	5011058	EqualityExpression	p -> flagspace == flag -> space		5010487	0		==			
ANR	5011059	PtrMemberAccess	p -> flagspace		5010487	0					
ANR	5011060	Identifier	p		5010487	0					
ANR	5011061	Identifier	flagspace		5010487	1					
ANR	5011062	PtrMemberAccess	flag -> space		5010487	1					
ANR	5011063	Identifier	flag		5010487	0					
ANR	5011064	Identifier	space		5010487	1					
ANR	5011065	CompoundStatement		80:39:2014:2014	5010487	1					
ANR	5011066	ContinueStatement	continue ;	216:7:4666:4674	5010487	0	True				
ANR	5011067	ElseStatement	else		5010487	0					
ANR	5011068	IfStatement	if ( p -> flagspace && ( p -> flagspace != flag -> space ) )		5010487	0					
ANR	5011069	Condition	p -> flagspace && ( p -> flagspace != flag -> space )	218:16:4700:4744	5010487	0	True				
ANR	5011070	AndExpression	p -> flagspace && ( p -> flagspace != flag -> space )		5010487	0		&&			
ANR	5011071	PtrMemberAccess	p -> flagspace		5010487	0					
ANR	5011072	Identifier	p		5010487	0					
ANR	5011073	Identifier	flagspace		5010487	1					
ANR	5011074	EqualityExpression	p -> flagspace != flag -> space		5010487	1		!=			
ANR	5011075	PtrMemberAccess	p -> flagspace		5010487	0					
ANR	5011076	Identifier	p		5010487	0					
ANR	5011077	Identifier	flagspace		5010487	1					
ANR	5011078	PtrMemberAccess	flag -> space		5010487	1					
ANR	5011079	Identifier	flag		5010487	0					
ANR	5011080	Identifier	space		5010487	1					
ANR	5011081	CompoundStatement		83:63:2104:2104	5010487	1					
ANR	5011082	ExpressionStatement	ptr = ptr2	219:6:4755:4765	5010487	0	True				
ANR	5011083	AssignmentExpression	ptr = ptr2		5010487	0		=			
ANR	5011084	Identifier	ptr		5010487	0					
ANR	5011085	Identifier	ptr2		5010487	1					
ANR	5011086	ContinueStatement	continue ;	220:6:4773:4781	5010487	1	True				
ANR	5011087	ExpressionStatement	ptr2 --	223:5:4839:4845	5010487	1	True				
ANR	5011088	PostIncDecOperationExpression	ptr2 --		5010487	0					
ANR	5011089	Identifier	ptr2		5010487	0					
ANR	5011090	IncDec	--		5010487	1					
ANR	5011091	IfStatement	if ( * ptr2 != 0x1b )		5010487	2					
ANR	5011092	Condition	* ptr2 != 0x1b	224:9:4856:4868	5010487	0	True				
ANR	5011093	EqualityExpression	* ptr2 != 0x1b		5010487	0		!=			
ANR	5011094	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5011095	UnaryOperator	*		5010487	0					
ANR	5011096	Identifier	ptr2		5010487	1					
ANR	5011097	PrimaryExpression	0x1b		5010487	1					
ANR	5011098	CompoundStatement		89:24:2228:2228	5010487	1					
ANR	5011099	ExpressionStatement	ptr2 ++	225:6:4879:4885	5010487	0	True				
ANR	5011100	PostIncDecOperationExpression	ptr2 ++		5010487	0					
ANR	5011101	Identifier	ptr2		5010487	0					
ANR	5011102	IncDec	++		5010487	1					
ANR	5011103	ExpressionStatement	ptr_backup = ptr	227:5:4899:4915	5010487	3	True				
ANR	5011104	AssignmentExpression	ptr_backup = ptr		5010487	0		=			
ANR	5011105	Identifier	ptr_backup		5010487	0					
ANR	5011106	Identifier	ptr		5010487	1					
ANR	5011107	IfStatement	if ( remove_brackets && ptr != ptr2 && * ptr )		5010487	4					
ANR	5011108	Condition	remove_brackets && ptr != ptr2 && * ptr	228:9:4926:4963	5010487	0	True				
ANR	5011109	AndExpression	remove_brackets && ptr != ptr2 && * ptr		5010487	0		&&			
ANR	5011110	Identifier	remove_brackets		5010487	0					
ANR	5011111	AndExpression	ptr != ptr2 && * ptr		5010487	1		&&			
ANR	5011112	EqualityExpression	ptr != ptr2		5010487	0		!=			
ANR	5011113	Identifier	ptr		5010487	0					
ANR	5011114	Identifier	ptr2		5010487	1					
ANR	5011115	UnaryOperationExpression	* ptr		5010487	1					
ANR	5011116	UnaryOperator	*		5010487	0					
ANR	5011117	Identifier	ptr		5010487	1					
ANR	5011118	CompoundStatement		93:49:2323:2323	5010487	1					
ANR	5011119	IfStatement	if ( * ptr2 == ']' )		5010487	0					
ANR	5011120	Condition	* ptr2 == ']'	229:10:4978:4989	5010487	0	True				
ANR	5011121	EqualityExpression	* ptr2 == ']'		5010487	0		==			
ANR	5011122	UnaryOperationExpression	* ptr2		5010487	0					
ANR	5011123	UnaryOperator	*		5010487	0					
ANR	5011124	Identifier	ptr2		5010487	1					
ANR	5011125	PrimaryExpression	']'		5010487	1					
ANR	5011126	CompoundStatement		94:24:2349:2349	5010487	1					
ANR	5011127	ExpressionStatement	ptr2 ++	230:7:5001:5007	5010487	0	True				
ANR	5011128	PostIncDecOperationExpression	ptr2 ++		5010487	0					
ANR	5011129	Identifier	ptr2		5010487	0					
ANR	5011130	IncDec	++		5010487	1					
ANR	5011131	ForStatement	for ( ptr -- ; ptr > data && * ptr != '[' ; ptr -- )		5010487	1					
ANR	5011132	ForInit	ptr -- ;	231:12:5021:5026	5010487	0	True				
ANR	5011133	PostIncDecOperationExpression	ptr --		5010487	0					
ANR	5011134	Identifier	ptr		5010487	0					
ANR	5011135	IncDec	--		5010487	1					
ANR	5011136	Condition	ptr > data && * ptr != '['	231:19:5028:5052	5010487	1	True				
ANR	5011137	AndExpression	ptr > data && * ptr != '['		5010487	0		&&			
ANR	5011138	RelationalExpression	ptr > data		5010487	0		>			
ANR	5011139	Identifier	ptr		5010487	0					
ANR	5011140	Identifier	data		5010487	1					
ANR	5011141	EqualityExpression	* ptr != '['		5010487	1		!=			
ANR	5011142	UnaryOperationExpression	* ptr		5010487	0					
ANR	5011143	UnaryOperator	*		5010487	0					
ANR	5011144	Identifier	ptr		5010487	1					
ANR	5011145	PrimaryExpression	'['		5010487	1					
ANR	5011146	PostIncDecOperationExpression	ptr --	231:46:5055:5059	5010487	2	True				
ANR	5011147	Identifier	ptr		5010487	0					
ANR	5011148	IncDec	--		5010487	1					
ANR	5011149	CompoundStatement		96:53:2419:2419	5010487	3					
ANR	5011150	ExpressionStatement		232:8:5072:5072	5010487	0	True				
ANR	5011151	IfStatement	if ( ptr == data )		5010487	2					
ANR	5011152	Condition	ptr == data	234:11:5094:5104	5010487	0	True				
ANR	5011153	EqualityExpression	ptr == data		5010487	0		==			
ANR	5011154	Identifier	ptr		5010487	0					
ANR	5011155	Identifier	data		5010487	1					
ANR	5011156	CompoundStatement		99:24:2464:2464	5010487	1					
ANR	5011157	ExpressionStatement	ptr = ptr_backup	235:8:5117:5133	5010487	0	True				
ANR	5011158	AssignmentExpression	ptr = ptr_backup		5010487	0		=			
ANR	5011159	Identifier	ptr		5010487	0					
ANR	5011160	Identifier	ptr_backup		5010487	1					
ANR	5011161	ExpressionStatement	* ptr = 0	239:5:5164:5172	5010487	5	True				
ANR	5011162	AssignmentExpression	* ptr = 0		5010487	0		=			
ANR	5011163	UnaryOperationExpression	* ptr		5010487	0					
ANR	5011164	UnaryOperator	*		5010487	0					
ANR	5011165	Identifier	ptr		5010487	1					
ANR	5011166	PrimaryExpression	0		5010487	1					
ANR	5011167	IdentifierDeclStatement	char * flagname ;	240:5:5179:5193	5010487	6	True				
ANR	5011168	IdentifierDecl	* flagname		5010487	0					
ANR	5011169	IdentifierDeclType	char *		5010487	0					
ANR	5011170	Identifier	flagname		5010487	1					
ANR	5011171	IfStatement	if ( label )		5010487	7					
ANR	5011172	Condition	label	241:9:5204:5208	5010487	0	True				
ANR	5011173	Identifier	label		5010487	0					
ANR	5011174	CompoundStatement		106:16:2568:2568	5010487	1					
ANR	5011175	ExpressionStatement	"flagname = r_str_newf ( "".%s"" , label )"	242:6:5219:5255	5010487	0	True				
ANR	5011176	AssignmentExpression	"flagname = r_str_newf ( "".%s"" , label )"		5010487	0		=			
ANR	5011177	Identifier	flagname		5010487	0					
ANR	5011178	CallExpression	"r_str_newf ( "".%s"" , label )"		5010487	1					
ANR	5011179	Callee	r_str_newf		5010487	0					
ANR	5011180	Identifier	r_str_newf		5010487	0					
ANR	5011181	ArgumentList	""".%s"""		5010487	1					
ANR	5011182	Argument	""".%s"""		5010487	0					
ANR	5011183	PrimaryExpression	""".%s"""		5010487	0					
ANR	5011184	Argument	label		5010487	1					
ANR	5011185	Identifier	label		5010487	0					
ANR	5011186	ElseStatement	else		5010487	0					
ANR	5011187	CompoundStatement		108:12:2626:2626	5010487	0					
ANR	5011188	ExpressionStatement	flagname = strdup ( f -> realnames ? flag -> realname : flag -> name )	244:6:5277:5338	5010487	0	True				
ANR	5011189	AssignmentExpression	flagname = strdup ( f -> realnames ? flag -> realname : flag -> name )		5010487	0		=			
ANR	5011190	Identifier	flagname		5010487	0					
ANR	5011191	CallExpression	strdup ( f -> realnames ? flag -> realname : flag -> name )		5010487	1					
ANR	5011192	Callee	strdup		5010487	0					
ANR	5011193	Identifier	strdup		5010487	0					
ANR	5011194	ArgumentList	f -> realnames ? flag -> realname : flag -> name		5010487	1					
ANR	5011195	Argument	f -> realnames ? flag -> realname : flag -> name		5010487	0					
ANR	5011196	ConditionalExpression	f -> realnames ? flag -> realname : flag -> name		5010487	0					
ANR	5011197	Condition	f -> realnames		5010487	0					
ANR	5011198	PtrMemberAccess	f -> realnames		5010487	0					
ANR	5011199	Identifier	f		5010487	0					
ANR	5011200	Identifier	realnames		5010487	1					
ANR	5011201	PtrMemberAccess	flag -> realname		5010487	1					
ANR	5011202	Identifier	flag		5010487	0					
ANR	5011203	Identifier	realname		5010487	1					
ANR	5011204	PtrMemberAccess	flag -> name		5010487	2					
ANR	5011205	Identifier	flag		5010487	0					
ANR	5011206	Identifier	name		5010487	1					
ANR	5011207	IdentifierDeclStatement	int maxflagname = p -> maxflagnamelen ;	246:5:5352:5387	5010487	8	True				
ANR	5011208	IdentifierDecl	maxflagname = p -> maxflagnamelen		5010487	0					
ANR	5011209	IdentifierDeclType	int		5010487	0					
ANR	5011210	Identifier	maxflagname		5010487	1					
ANR	5011211	AssignmentExpression	maxflagname = p -> maxflagnamelen		5010487	2		=			
ANR	5011212	Identifier	maxflagname		5010487	0					
ANR	5011213	PtrMemberAccess	p -> maxflagnamelen		5010487	1					
ANR	5011214	Identifier	p		5010487	0					
ANR	5011215	Identifier	maxflagnamelen		5010487	1					
ANR	5011216	IfStatement	if ( maxflagname > 0 && strlen ( flagname ) > maxflagname )		5010487	9					
ANR	5011217	Condition	maxflagname > 0 && strlen ( flagname ) > maxflagname	247:9:5398:5447	5010487	0	True				
ANR	5011218	AndExpression	maxflagname > 0 && strlen ( flagname ) > maxflagname		5010487	0		&&			
ANR	5011219	RelationalExpression	maxflagname > 0		5010487	0		>			
ANR	5011220	Identifier	maxflagname		5010487	0					
ANR	5011221	PrimaryExpression	0		5010487	1					
ANR	5011222	RelationalExpression	strlen ( flagname ) > maxflagname		5010487	1		>			
ANR	5011223	CallExpression	strlen ( flagname )		5010487	0					
ANR	5011224	Callee	strlen		5010487	0					
ANR	5011225	Identifier	strlen		5010487	0					
ANR	5011226	ArgumentList	flagname		5010487	1					
ANR	5011227	Argument	flagname		5010487	0					
ANR	5011228	Identifier	flagname		5010487	0					
ANR	5011229	Identifier	maxflagname		5010487	1					
ANR	5011230	CompoundStatement		115:6:2941:2959	5010487	1					
ANR	5011231	IdentifierDeclStatement	"char * doublelower = ( char * ) r_str_rstr ( flagname , ""__"" ) ;"	248:6:5458:5513	5010487	0	True				
ANR	5011232	IdentifierDecl	"* doublelower = ( char * ) r_str_rstr ( flagname , ""__"" )"		5010487	0					
ANR	5011233	IdentifierDeclType	char *		5010487	0					
ANR	5011234	Identifier	doublelower		5010487	1					
ANR	5011235	AssignmentExpression	"* doublelower = ( char * ) r_str_rstr ( flagname , ""__"" )"		5010487	2		=			
ANR	5011236	Identifier	doublelower		5010487	0					
ANR	5011237	CastExpression	"( char * ) r_str_rstr ( flagname , ""__"" )"		5010487	1					
ANR	5011238	CastTarget	char *		5010487	0					
ANR	5011239	CallExpression	"r_str_rstr ( flagname , ""__"" )"		5010487	1					
ANR	5011240	Callee	r_str_rstr		5010487	0					
ANR	5011241	Identifier	r_str_rstr		5010487	0					
ANR	5011242	ArgumentList	flagname		5010487	1					
ANR	5011243	Argument	flagname		5010487	0					
ANR	5011244	Identifier	flagname		5010487	0					
ANR	5011245	Argument	"""__"""		5010487	1					
ANR	5011246	PrimaryExpression	"""__"""		5010487	0					
ANR	5011247	IdentifierDeclStatement	"char * doublecolon = ( char * ) r_str_rstr ( flagname , ""::"" ) ;"	249:6:5521:5576	5010487	1	True				
ANR	5011248	IdentifierDecl	"* doublecolon = ( char * ) r_str_rstr ( flagname , ""::"" )"		5010487	0					
ANR	5011249	IdentifierDeclType	char *		5010487	0					
ANR	5011250	Identifier	doublecolon		5010487	1					
ANR	5011251	AssignmentExpression	"* doublecolon = ( char * ) r_str_rstr ( flagname , ""::"" )"		5010487	2		=			
ANR	5011252	Identifier	doublecolon		5010487	0					
ANR	5011253	CastExpression	"( char * ) r_str_rstr ( flagname , ""::"" )"		5010487	1					
ANR	5011254	CastTarget	char *		5010487	0					
ANR	5011255	CallExpression	"r_str_rstr ( flagname , ""::"" )"		5010487	1					
ANR	5011256	Callee	r_str_rstr		5010487	0					
ANR	5011257	Identifier	r_str_rstr		5010487	0					
ANR	5011258	ArgumentList	flagname		5010487	1					
ANR	5011259	Argument	flagname		5010487	0					
ANR	5011260	Identifier	flagname		5010487	0					
ANR	5011261	Argument	"""::"""		5010487	1					
ANR	5011262	PrimaryExpression	"""::"""		5010487	0					
ANR	5011263	IdentifierDeclStatement	char * token = NULL ;	250:6:5584:5602	5010487	2	True				
ANR	5011264	IdentifierDecl	* token = NULL		5010487	0					
ANR	5011265	IdentifierDeclType	char *		5010487	0					
ANR	5011266	Identifier	token		5010487	1					
ANR	5011267	AssignmentExpression	* token = NULL		5010487	2		=			
ANR	5011268	Identifier	NULL		5010487	0					
ANR	5011269	Identifier	NULL		5010487	1					
ANR	5011270	IfStatement	if ( doublelower && doublecolon )		5010487	3					
ANR	5011271	Condition	doublelower && doublecolon	251:10:5614:5639	5010487	0	True				
ANR	5011272	AndExpression	doublelower && doublecolon		5010487	0		&&			
ANR	5011273	Identifier	doublelower		5010487	0					
ANR	5011274	Identifier	doublecolon		5010487	1					
ANR	5011275	CompoundStatement		116:38:2999:2999	5010487	1					
ANR	5011276	ExpressionStatement	"token = R_MAX ( doublelower , doublecolon )"	252:7:5651:5691	5010487	0	True				
ANR	5011277	AssignmentExpression	"token = R_MAX ( doublelower , doublecolon )"		5010487	0		=			
ANR	5011278	Identifier	token		5010487	0					
ANR	5011279	CallExpression	"R_MAX ( doublelower , doublecolon )"		5010487	1					
ANR	5011280	Callee	R_MAX		5010487	0					
ANR	5011281	Identifier	R_MAX		5010487	0					
ANR	5011282	ArgumentList	doublelower		5010487	1					
ANR	5011283	Argument	doublelower		5010487	0					
ANR	5011284	Identifier	doublelower		5010487	0					
ANR	5011285	Argument	doublecolon		5010487	1					
ANR	5011286	Identifier	doublecolon		5010487	0					
ANR	5011287	ElseStatement	else		5010487	0					
ANR	5011288	CompoundStatement		118:13:3063:3063	5010487	0					
ANR	5011289	ExpressionStatement	token = doublelower ? doublelower : doublecolon	254:7:5715:5760	5010487	0	True				
ANR	5011290	AssignmentExpression	token = doublelower ? doublelower : doublecolon		5010487	0		=			
ANR	5011291	Identifier	token		5010487	0					
ANR	5011292	ConditionalExpression	doublelower ? doublelower : doublecolon		5010487	1					
ANR	5011293	Condition	doublelower		5010487	0					
ANR	5011294	Identifier	doublelower		5010487	0					
ANR	5011295	Identifier	doublelower		5010487	1					
ANR	5011296	Identifier	doublecolon		5010487	2					
ANR	5011297	IfStatement	if ( token )		5010487	4					
ANR	5011298	Condition	token	256:10:5780:5784	5010487	0	True				
ANR	5011299	Identifier	token		5010487	0					
ANR	5011300	CompoundStatement		123:7:3209:3255	5010487	1					
ANR	5011301	IdentifierDeclStatement	"const char * mod = doublecolon ? ""(cxx)"" : ""(...)"" ;"	257:7:5796:5843	5010487	0	True				
ANR	5011302	IdentifierDecl	"* mod = doublecolon ? ""(cxx)"" : ""(...)"""		5010487	0					
ANR	5011303	IdentifierDeclType	const char *		5010487	0					
ANR	5011304	Identifier	mod		5010487	1					
ANR	5011305	AssignmentExpression	"* mod = doublecolon ? ""(cxx)"" : ""(...)"""		5010487	2		=			
ANR	5011306	Identifier	mod		5010487	0					
ANR	5011307	ConditionalExpression	"doublecolon ? ""(cxx)"" : ""(...)"""		5010487	1					
ANR	5011308	Condition	doublecolon		5010487	0					
ANR	5011309	Identifier	doublecolon		5010487	0					
ANR	5011310	PrimaryExpression	"""(cxx)"""		5010487	1					
ANR	5011311	PrimaryExpression	"""(...)"""		5010487	2					
ANR	5011312	IdentifierDeclStatement	"char * newstr = r_str_newf ( ""%s%s"" , mod , token ) ;"	258:7:5852:5898	5010487	1	True				
ANR	5011313	IdentifierDecl	"* newstr = r_str_newf ( ""%s%s"" , mod , token )"		5010487	0					
ANR	5011314	IdentifierDeclType	char *		5010487	0					
ANR	5011315	Identifier	newstr		5010487	1					
ANR	5011316	AssignmentExpression	"* newstr = r_str_newf ( ""%s%s"" , mod , token )"		5010487	2		=			
ANR	5011317	Identifier	newstr		5010487	0					
ANR	5011318	CallExpression	"r_str_newf ( ""%s%s"" , mod , token )"		5010487	1					
ANR	5011319	Callee	r_str_newf		5010487	0					
ANR	5011320	Identifier	r_str_newf		5010487	0					
ANR	5011321	ArgumentList	"""%s%s"""		5010487	1					
ANR	5011322	Argument	"""%s%s"""		5010487	0					
ANR	5011323	PrimaryExpression	"""%s%s"""		5010487	0					
ANR	5011324	Argument	mod		5010487	1					
ANR	5011325	Identifier	mod		5010487	0					
ANR	5011326	Argument	token		5010487	2					
ANR	5011327	Identifier	token		5010487	0					
ANR	5011328	ExpressionStatement	free ( flagname )	259:7:5907:5922	5010487	2	True				
ANR	5011329	CallExpression	free ( flagname )		5010487	0					
ANR	5011330	Callee	free		5010487	0					
ANR	5011331	Identifier	free		5010487	0					
ANR	5011332	ArgumentList	flagname		5010487	1					
ANR	5011333	Argument	flagname		5010487	0					
ANR	5011334	Identifier	flagname		5010487	0					
ANR	5011335	ExpressionStatement	flagname = newstr	260:7:5931:5948	5010487	3	True				
ANR	5011336	AssignmentExpression	flagname = newstr		5010487	0		=			
ANR	5011337	Identifier	flagname		5010487	0					
ANR	5011338	Identifier	newstr		5010487	1					
ANR	5011339	ElseStatement	else		5010487	0					
ANR	5011340	CompoundStatement		128:7:3384:3396	5010487	0					
ANR	5011341	IdentifierDeclStatement	"const char * lower = r_str_rstr ( flagname , ""_"" ) ;"	262:7:5972:6018	5010487	0	True				
ANR	5011342	IdentifierDecl	"* lower = r_str_rstr ( flagname , ""_"" )"		5010487	0					
ANR	5011343	IdentifierDeclType	const char *		5010487	0					
ANR	5011344	Identifier	lower		5010487	1					
ANR	5011345	AssignmentExpression	"* lower = r_str_rstr ( flagname , ""_"" )"		5010487	2		=			
ANR	5011346	Identifier	lower		5010487	0					
ANR	5011347	CallExpression	"r_str_rstr ( flagname , ""_"" )"		5010487	1					
ANR	5011348	Callee	r_str_rstr		5010487	0					
ANR	5011349	Identifier	r_str_rstr		5010487	0					
ANR	5011350	ArgumentList	flagname		5010487	1					
ANR	5011351	Argument	flagname		5010487	0					
ANR	5011352	Identifier	flagname		5010487	0					
ANR	5011353	Argument	"""_"""		5010487	1					
ANR	5011354	PrimaryExpression	"""_"""		5010487	0					
ANR	5011355	IdentifierDeclStatement	char * newstr ;	263:7:6027:6039	5010487	1	True				
ANR	5011356	IdentifierDecl	* newstr		5010487	0					
ANR	5011357	IdentifierDeclType	char *		5010487	0					
ANR	5011358	Identifier	newstr		5010487	1					
ANR	5011359	IfStatement	if ( lower )		5010487	2					
ANR	5011360	Condition	lower	264:11:6052:6056	5010487	0	True				
ANR	5011361	Identifier	lower		5010487	0					
ANR	5011362	CompoundStatement		129:18:3416:3416	5010487	1					
ANR	5011363	ExpressionStatement	"newstr = r_str_newf ( ""..%s"" , lower + 1 )"	265:8:6069:6108	5010487	0	True				
ANR	5011364	AssignmentExpression	"newstr = r_str_newf ( ""..%s"" , lower + 1 )"		5010487	0		=			
ANR	5011365	Identifier	newstr		5010487	0					
ANR	5011366	CallExpression	"r_str_newf ( ""..%s"" , lower + 1 )"		5010487	1					
ANR	5011367	Callee	r_str_newf		5010487	0					
ANR	5011368	Identifier	r_str_newf		5010487	0					
ANR	5011369	ArgumentList	"""..%s"""		5010487	1					
ANR	5011370	Argument	"""..%s"""		5010487	0					
ANR	5011371	PrimaryExpression	"""..%s"""		5010487	0					
ANR	5011372	Argument	lower + 1		5010487	1					
ANR	5011373	AdditiveExpression	lower + 1		5010487	0		+			
ANR	5011374	Identifier	lower		5010487	0					
ANR	5011375	PrimaryExpression	1		5010487	1					
ANR	5011376	ElseStatement	else		5010487	0					
ANR	5011377	CompoundStatement		131:14:3481:3481	5010487	0					
ANR	5011378	ExpressionStatement	"newstr = r_str_newf ( ""..%s"" , flagname + ( strlen ( flagname ) - maxflagname ) )"	267:8:6134:6208	5010487	0	True				
ANR	5011379	AssignmentExpression	"newstr = r_str_newf ( ""..%s"" , flagname + ( strlen ( flagname ) - maxflagname ) )"		5010487	0		=			
ANR	5011380	Identifier	newstr		5010487	0					
ANR	5011381	CallExpression	"r_str_newf ( ""..%s"" , flagname + ( strlen ( flagname ) - maxflagname ) )"		5010487	1					
ANR	5011382	Callee	r_str_newf		5010487	0					
ANR	5011383	Identifier	r_str_newf		5010487	0					
ANR	5011384	ArgumentList	"""..%s"""		5010487	1					
ANR	5011385	Argument	"""..%s"""		5010487	0					
ANR	5011386	PrimaryExpression	"""..%s"""		5010487	0					
ANR	5011387	Argument	flagname + ( strlen ( flagname ) - maxflagname )		5010487	1					
ANR	5011388	AdditiveExpression	flagname + ( strlen ( flagname ) - maxflagname )		5010487	0		+			
ANR	5011389	Identifier	flagname		5010487	0					
ANR	5011390	AdditiveExpression	strlen ( flagname ) - maxflagname		5010487	1		-			
ANR	5011391	CallExpression	strlen ( flagname )		5010487	0					
ANR	5011392	Callee	strlen		5010487	0					
ANR	5011393	Identifier	strlen		5010487	0					
ANR	5011394	ArgumentList	flagname		5010487	1					
ANR	5011395	Argument	flagname		5010487	0					
ANR	5011396	Identifier	flagname		5010487	0					
ANR	5011397	Identifier	maxflagname		5010487	1					
ANR	5011398	ExpressionStatement	free ( flagname )	269:7:6226:6241	5010487	3	True				
ANR	5011399	CallExpression	free ( flagname )		5010487	0					
ANR	5011400	Callee	free		5010487	0					
ANR	5011401	Identifier	free		5010487	0					
ANR	5011402	ArgumentList	flagname		5010487	1					
ANR	5011403	Argument	flagname		5010487	0					
ANR	5011404	Identifier	flagname		5010487	0					
ANR	5011405	ExpressionStatement	flagname = newstr	270:7:6250:6267	5010487	4	True				
ANR	5011406	AssignmentExpression	flagname = newstr		5010487	0		=			
ANR	5011407	Identifier	flagname		5010487	0					
ANR	5011408	Identifier	newstr		5010487	1					
ANR	5011409	ExpressionStatement	"snprintf ( str , len , ""%s%s%s"" , data , flagname , ( ptr != ptr2 ) ? ptr2 : """" )"	273:5:6289:6361	5010487	10	True				
ANR	5011410	CallExpression	"snprintf ( str , len , ""%s%s%s"" , data , flagname , ( ptr != ptr2 ) ? ptr2 : """" )"		5010487	0					
ANR	5011411	Callee	snprintf		5010487	0					
ANR	5011412	Identifier	snprintf		5010487	0					
ANR	5011413	ArgumentList	str		5010487	1					
ANR	5011414	Argument	str		5010487	0					
ANR	5011415	Identifier	str		5010487	0					
ANR	5011416	Argument	len		5010487	1					
ANR	5011417	Identifier	len		5010487	0					
ANR	5011418	Argument	"""%s%s%s"""		5010487	2					
ANR	5011419	PrimaryExpression	"""%s%s%s"""		5010487	0					
ANR	5011420	Argument	data		5010487	3					
ANR	5011421	Identifier	data		5010487	0					
ANR	5011422	Argument	flagname		5010487	4					
ANR	5011423	Identifier	flagname		5010487	0					
ANR	5011424	Argument	"( ptr != ptr2 ) ? ptr2 : """""		5010487	5					
ANR	5011425	ConditionalExpression	"( ptr != ptr2 ) ? ptr2 : """""		5010487	0					
ANR	5011426	Condition	ptr != ptr2		5010487	0					
ANR	5011427	EqualityExpression	ptr != ptr2		5010487	0		!=			
ANR	5011428	Identifier	ptr		5010487	0					
ANR	5011429	Identifier	ptr2		5010487	1					
ANR	5011430	Identifier	ptr2		5010487	1					
ANR	5011431	PrimaryExpression	""""""		5010487	2					
ANR	5011432	ExpressionStatement	free ( flagname )	274:5:6368:6383	5010487	11	True				
ANR	5011433	CallExpression	free ( flagname )		5010487	0					
ANR	5011434	Callee	free		5010487	0					
ANR	5011435	Identifier	free		5010487	0					
ANR	5011436	ArgumentList	flagname		5010487	1					
ANR	5011437	Argument	flagname		5010487	0					
ANR	5011438	Identifier	flagname		5010487	0					
ANR	5011439	IdentifierDeclStatement	bool banned = false ;	275:5:6390:6409	5010487	12	True				
ANR	5011440	IdentifierDecl	banned = false		5010487	0					
ANR	5011441	IdentifierDeclType	bool		5010487	0					
ANR	5011442	Identifier	banned		5010487	1					
ANR	5011443	AssignmentExpression	banned = false		5010487	2		=			
ANR	5011444	Identifier	false		5010487	0					
ANR	5011445	Identifier	false		5010487	1					
ANR	5011446	CompoundStatement		144:6:3863:3896	5010487	13					
ANR	5011447	IdentifierDeclStatement	"const char * p = strchr ( str , '[' ) ;"	277:6:6424:6457	5010487	0	True				
ANR	5011448	IdentifierDecl	"* p = strchr ( str , '[' )"		5010487	0					
ANR	5011449	IdentifierDeclType	const char *		5010487	0					
ANR	5011450	Identifier	p		5010487	1					
ANR	5011451	AssignmentExpression	"* p = strchr ( str , '[' )"		5010487	2		=			
ANR	5011452	Identifier	p		5010487	0					
ANR	5011453	CallExpression	"strchr ( str , '[' )"		5010487	1					
ANR	5011454	Callee	strchr		5010487	0					
ANR	5011455	Identifier	strchr		5010487	0					
ANR	5011456	ArgumentList	str		5010487	1					
ANR	5011457	Argument	str		5010487	0					
ANR	5011458	Identifier	str		5010487	0					
ANR	5011459	Argument	'['		5010487	1					
ANR	5011460	PrimaryExpression	'['		5010487	0					
ANR	5011461	IdentifierDeclStatement	"const char * a = strchr ( str , '+' ) ;"	278:6:6465:6498	5010487	1	True				
ANR	5011462	IdentifierDecl	"* a = strchr ( str , '+' )"		5010487	0					
ANR	5011463	IdentifierDeclType	const char *		5010487	0					
ANR	5011464	Identifier	a		5010487	1					
ANR	5011465	AssignmentExpression	"* a = strchr ( str , '+' )"		5010487	2		=			
ANR	5011466	Identifier	a		5010487	0					
ANR	5011467	CallExpression	"strchr ( str , '+' )"		5010487	1					
ANR	5011468	Callee	strchr		5010487	0					
ANR	5011469	Identifier	strchr		5010487	0					
ANR	5011470	ArgumentList	str		5010487	1					
ANR	5011471	Argument	str		5010487	0					
ANR	5011472	Identifier	str		5010487	0					
ANR	5011473	Argument	'+'		5010487	1					
ANR	5011474	PrimaryExpression	'+'		5010487	0					
ANR	5011475	IdentifierDeclStatement	"const char * m = strchr ( str , '*' ) ;"	279:6:6506:6539	5010487	2	True				
ANR	5011476	IdentifierDecl	"* m = strchr ( str , '*' )"		5010487	0					
ANR	5011477	IdentifierDeclType	const char *		5010487	0					
ANR	5011478	Identifier	m		5010487	1					
ANR	5011479	AssignmentExpression	"* m = strchr ( str , '*' )"		5010487	2		=			
ANR	5011480	Identifier	m		5010487	0					
ANR	5011481	CallExpression	"strchr ( str , '*' )"		5010487	1					
ANR	5011482	Callee	strchr		5010487	0					
ANR	5011483	Identifier	strchr		5010487	0					
ANR	5011484	ArgumentList	str		5010487	1					
ANR	5011485	Argument	str		5010487	0					
ANR	5011486	Identifier	str		5010487	0					
ANR	5011487	Argument	'*'		5010487	1					
ANR	5011488	PrimaryExpression	'*'		5010487	0					
ANR	5011489	IfStatement	if ( p && ( a || m ) )		5010487	3					
ANR	5011490	Condition	p && ( a || m )	280:10:6551:6563	5010487	0	True				
ANR	5011491	AndExpression	p && ( a || m )		5010487	0		&&			
ANR	5011492	Identifier	p		5010487	0					
ANR	5011493	OrExpression	a || m		5010487	1		||			
ANR	5011494	Identifier	a		5010487	0					
ANR	5011495	Identifier	m		5010487	1					
ANR	5011496	CompoundStatement		145:25:3923:3923	5010487	1					
ANR	5011497	ExpressionStatement	banned = true	281:7:6575:6588	5010487	0	True				
ANR	5011498	AssignmentExpression	banned = true		5010487	0		=			
ANR	5011499	Identifier	banned		5010487	0					
ANR	5011500	Identifier	true		5010487	1					
ANR	5011501	IfStatement	if ( p -> relsub_addr && ! banned && lea )		5010487	14					
ANR	5011502	Condition	p -> relsub_addr && ! banned && lea	284:9:6614:6645	5010487	0	True				
ANR	5011503	AndExpression	p -> relsub_addr && ! banned && lea		5010487	0		&&			
ANR	5011504	PtrMemberAccess	p -> relsub_addr		5010487	0					
ANR	5011505	Identifier	p		5010487	0					
ANR	5011506	Identifier	relsub_addr		5010487	1					
ANR	5011507	AndExpression	! banned && lea		5010487	1		&&			
ANR	5011508	UnaryOperationExpression	! banned		5010487	0					
ANR	5011509	UnaryOperator	!		5010487	0					
ANR	5011510	Identifier	banned		5010487	1					
ANR	5011511	Identifier	lea		5010487	1					
ANR	5011512	CompoundStatement		153:6:4201:4224	5010487	1					
ANR	5011513	IdentifierDeclStatement	int flag_len = strlen ( flag -> name ) ;	285:6:6686:6720	5010487	0	True				
ANR	5011514	IdentifierDecl	flag_len = strlen ( flag -> name )		5010487	0					
ANR	5011515	IdentifierDeclType	int		5010487	0					
ANR	5011516	Identifier	flag_len		5010487	1					
ANR	5011517	AssignmentExpression	flag_len = strlen ( flag -> name )		5010487	2		=			
ANR	5011518	Identifier	flag_len		5010487	0					
ANR	5011519	CallExpression	strlen ( flag -> name )		5010487	1					
ANR	5011520	Callee	strlen		5010487	0					
ANR	5011521	Identifier	strlen		5010487	0					
ANR	5011522	ArgumentList	flag -> name		5010487	1					
ANR	5011523	Argument	flag -> name		5010487	0					
ANR	5011524	PtrMemberAccess	flag -> name		5010487	0					
ANR	5011525	Identifier	flag		5010487	0					
ANR	5011526	Identifier	name		5010487	1					
ANR	5011527	IdentifierDeclStatement	char * ptr_end = str + strlen ( data ) + flag_len - 1 ;	286:6:6728:6778	5010487	1	True				
ANR	5011528	IdentifierDecl	* ptr_end = str + strlen ( data ) + flag_len - 1		5010487	0					
ANR	5011529	IdentifierDeclType	char *		5010487	0					
ANR	5011530	Identifier	ptr_end		5010487	1					
ANR	5011531	AssignmentExpression	* ptr_end = str + strlen ( data ) + flag_len - 1		5010487	2		=			
ANR	5011532	Identifier	ptr_end		5010487	0					
ANR	5011533	AdditiveExpression	str + strlen ( data ) + flag_len - 1		5010487	1		+			
ANR	5011534	Identifier	str		5010487	0					
ANR	5011535	AdditiveExpression	strlen ( data ) + flag_len - 1		5010487	1		+			
ANR	5011536	CallExpression	strlen ( data )		5010487	0					
ANR	5011537	Callee	strlen		5010487	0					
ANR	5011538	Identifier	strlen		5010487	0					
ANR	5011539	ArgumentList	data		5010487	1					
ANR	5011540	Argument	data		5010487	0					
ANR	5011541	Identifier	data		5010487	0					
ANR	5011542	AdditiveExpression	flag_len - 1		5010487	1		-			
ANR	5011543	Identifier	flag_len		5010487	0					
ANR	5011544	PrimaryExpression	1		5010487	1					
ANR	5011545	IdentifierDeclStatement	"char * ptr_right = ptr_end + 1 , * ptr_left , * ptr_esc ;"	287:6:6786:6836	5010487	2	True				
ANR	5011546	IdentifierDecl	* ptr_right = ptr_end + 1		5010487	0					
ANR	5011547	IdentifierDeclType	char *		5010487	0					
ANR	5011548	Identifier	ptr_right		5010487	1					
ANR	5011549	AssignmentExpression	* ptr_right = ptr_end + 1		5010487	2		=			
ANR	5011550	Identifier	ptr_right		5010487	0					
ANR	5011551	AdditiveExpression	ptr_end + 1		5010487	1		+			
ANR	5011552	Identifier	ptr_end		5010487	0					
ANR	5011553	PrimaryExpression	1		5010487	1					
ANR	5011554	IdentifierDecl	* ptr_left		5010487	1					
ANR	5011555	IdentifierDeclType	char *		5010487	0					
ANR	5011556	Identifier	ptr_left		5010487	1					
ANR	5011557	IdentifierDecl	* ptr_esc		5010487	2					
ANR	5011558	IdentifierDeclType	char *		5010487	0					
ANR	5011559	Identifier	ptr_esc		5010487	1					
ANR	5011560	IdentifierDeclStatement	bool ansi_found = false ;	288:6:6844:6867	5010487	3	True				
ANR	5011561	IdentifierDecl	ansi_found = false		5010487	0					
ANR	5011562	IdentifierDeclType	bool		5010487	0					
ANR	5011563	Identifier	ansi_found		5010487	1					
ANR	5011564	AssignmentExpression	ansi_found = false		5010487	2		=			
ANR	5011565	Identifier	false		5010487	0					
ANR	5011566	Identifier	false		5010487	1					
ANR	5011567	IfStatement	if ( ! * ptr_end )		5010487	4					
ANR	5011568	Condition	! * ptr_end	289:10:6879:6887	5010487	0	True				
ANR	5011569	UnaryOperationExpression	! * ptr_end		5010487	0					
ANR	5011570	UnaryOperator	!		5010487	0					
ANR	5011571	UnaryOperationExpression	* ptr_end		5010487	1					
ANR	5011572	UnaryOperator	*		5010487	0					
ANR	5011573	Identifier	ptr_end		5010487	1					
ANR	5011574	CompoundStatement		154:21:4247:4247	5010487	1					
ANR	5011575	ReturnStatement	return true ;	290:7:6899:6910	5010487	0	True				
ANR	5011576	Identifier	true		5010487	0					
ANR	5011577	WhileStatement	while ( * ptr_right )		5010487	5					
ANR	5011578	Condition	* ptr_right	292:13:6933:6942	5010487	0	True				
ANR	5011579	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011580	UnaryOperator	*		5010487	0					
ANR	5011581	Identifier	ptr_right		5010487	1					
ANR	5011582	CompoundStatement		157:25:4302:4302	5010487	1					
ANR	5011583	IfStatement	if ( * ptr_right == 0x1b )		5010487	0					
ANR	5011584	Condition	* ptr_right == 0x1b	293:11:6958:6975	5010487	0	True				
ANR	5011585	EqualityExpression	* ptr_right == 0x1b		5010487	0		==			
ANR	5011586	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011587	UnaryOperator	*		5010487	0					
ANR	5011588	Identifier	ptr_right		5010487	1					
ANR	5011589	PrimaryExpression	0x1b		5010487	1					
ANR	5011590	CompoundStatement		158:31:4335:4335	5010487	1					
ANR	5011591	WhileStatement	while ( * ptr_right && * ptr_right != 'm' )		5010487	0					
ANR	5011592	Condition	* ptr_right && * ptr_right != 'm'	294:15:6995:7025	5010487	0	True				
ANR	5011593	AndExpression	* ptr_right && * ptr_right != 'm'		5010487	0		&&			
ANR	5011594	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011595	UnaryOperator	*		5010487	0					
ANR	5011596	Identifier	ptr_right		5010487	1					
ANR	5011597	EqualityExpression	* ptr_right != 'm'		5010487	1		!=			
ANR	5011598	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011599	UnaryOperator	*		5010487	0					
ANR	5011600	Identifier	ptr_right		5010487	1					
ANR	5011601	PrimaryExpression	'm'		5010487	1					
ANR	5011602	CompoundStatement		159:48:4385:4385	5010487	1					
ANR	5011603	ExpressionStatement	ptr_right ++	295:9:7039:7050	5010487	0	True				
ANR	5011604	PostIncDecOperationExpression	ptr_right ++		5010487	0					
ANR	5011605	Identifier	ptr_right		5010487	0					
ANR	5011606	IncDec	++		5010487	1					
ANR	5011607	IfStatement	if ( * ptr_right )		5010487	1					
ANR	5011608	Condition	* ptr_right	297:12:7074:7083	5010487	0	True				
ANR	5011609	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011610	UnaryOperator	*		5010487	0					
ANR	5011611	Identifier	ptr_right		5010487	1					
ANR	5011612	CompoundStatement		162:24:4443:4443	5010487	1					
ANR	5011613	ExpressionStatement	ptr_right ++	298:9:7097:7108	5010487	0	True				
ANR	5011614	PostIncDecOperationExpression	ptr_right ++		5010487	0					
ANR	5011615	Identifier	ptr_right		5010487	0					
ANR	5011616	IncDec	++		5010487	1					
ANR	5011617	ExpressionStatement	ansi_found = true	300:8:7128:7145	5010487	2	True				
ANR	5011618	AssignmentExpression	ansi_found = true		5010487	0		=			
ANR	5011619	Identifier	ansi_found		5010487	0					
ANR	5011620	Identifier	true		5010487	1					
ANR	5011621	ContinueStatement	continue ;	301:8:7155:7163	5010487	3	True				
ANR	5011622	IfStatement	if ( * ptr_right == ']' )		5010487	1					
ANR	5011623	Condition	* ptr_right == ']'	303:11:7185:7201	5010487	0	True				
ANR	5011624	EqualityExpression	* ptr_right == ']'		5010487	0		==			
ANR	5011625	UnaryOperationExpression	* ptr_right		5010487	0					
ANR	5011626	UnaryOperator	*		5010487	0					
ANR	5011627	Identifier	ptr_right		5010487	1					
ANR	5011628	PrimaryExpression	']'		5010487	1					
ANR	5011629	CompoundStatement		199:8:5477:5514	5010487	1					
ANR	5011630	ExpressionStatement	ptr_left = ptr_esc = ptr_end - flag_len	304:8:7214:7253	5010487	0	True				
ANR	5011631	AssignmentExpression	ptr_left = ptr_esc = ptr_end - flag_len		5010487	0		=			
ANR	5011632	Identifier	ptr_left		5010487	0					
ANR	5011633	AssignmentExpression	ptr_esc = ptr_end - flag_len		5010487	1		=			
ANR	5011634	Identifier	ptr_esc		5010487	0					
ANR	5011635	AdditiveExpression	ptr_end - flag_len		5010487	1		-			
ANR	5011636	Identifier	ptr_end		5010487	0					
ANR	5011637	Identifier	flag_len		5010487	1					
ANR	5011638	WhileStatement	while ( ptr_left >= str )		5010487	1					
ANR	5011639	Condition	ptr_left >= str	305:15:7270:7284	5010487	0	True				
ANR	5011640	RelationalExpression	ptr_left >= str		5010487	0		>=			
ANR	5011641	Identifier	ptr_left		5010487	0					
ANR	5011642	Identifier	str		5010487	1					
ANR	5011643	CompoundStatement		170:32:4644:4644	5010487	1					
ANR	5011644	IfStatement	if ( * ptr_left == '[' && ( ptr_left == str || * ( ptr_left - 1 ) != 0x1b ) )		5010487	0					
ANR	5011645	Condition	* ptr_left == '[' && ( ptr_left == str || * ( ptr_left - 1 ) != 0x1b )	306:13:7302:7374	5010487	0	True				
ANR	5011646	AndExpression	* ptr_left == '[' && ( ptr_left == str || * ( ptr_left - 1 ) != 0x1b )		5010487	0		&&			
ANR	5011647	EqualityExpression	* ptr_left == '['		5010487	0		==			
ANR	5011648	UnaryOperationExpression	* ptr_left		5010487	0					
ANR	5011649	UnaryOperator	*		5010487	0					
ANR	5011650	Identifier	ptr_left		5010487	1					
ANR	5011651	PrimaryExpression	'['		5010487	1					
ANR	5011652	OrExpression	ptr_left == str || * ( ptr_left - 1 ) != 0x1b		5010487	1		||			
ANR	5011653	EqualityExpression	ptr_left == str		5010487	0		==			
ANR	5011654	Identifier	ptr_left		5010487	0					
ANR	5011655	Identifier	str		5010487	1					
ANR	5011656	EqualityExpression	* ( ptr_left - 1 ) != 0x1b		5010487	1		!=			
ANR	5011657	UnaryOperationExpression	* ( ptr_left - 1 )		5010487	0					
ANR	5011658	UnaryOperator	*		5010487	0					
ANR	5011659	AdditiveExpression	ptr_left - 1		5010487	1		-			
ANR	5011660	Identifier	ptr_left		5010487	0					
ANR	5011661	PrimaryExpression	1		5010487	1					
ANR	5011662	PrimaryExpression	0x1b		5010487	1					
ANR	5011663	CompoundStatement		172:55:4734:4734	5010487	1					
ANR	5011664	BreakStatement	break ;	308:10:7389:7394	5010487	0	True				
ANR	5011665	ExpressionStatement	ptr_left --	310:9:7416:7426	5010487	1	True				
ANR	5011666	PostIncDecOperationExpression	ptr_left --		5010487	0					
ANR	5011667	Identifier	ptr_left		5010487	0					
ANR	5011668	IncDec	--		5010487	1					
ANR	5011669	IfStatement	if ( ptr_left < str )		5010487	2					
ANR	5011670	Condition	ptr_left < str	312:12:7450:7463	5010487	0	True				
ANR	5011671	RelationalExpression	ptr_left < str		5010487	0		<			
ANR	5011672	Identifier	ptr_left		5010487	0					
ANR	5011673	Identifier	str		5010487	1					
ANR	5011674	CompoundStatement		177:28:4823:4823	5010487	1					
ANR	5011675	BreakStatement	break ;	313:9:7477:7482	5010487	0	True				
ANR	5011676	ForStatement	for ( ; ptr_esc >= str && * ptr_esc != 0x1b ; ptr_esc -- )		5010487	3					
ANR	5011677	Condition	ptr_esc >= str && * ptr_esc != 0x1b	315:15:7509:7542	5010487	0	True				
ANR	5011678	AndExpression	ptr_esc >= str && * ptr_esc != 0x1b		5010487	0		&&			
ANR	5011679	RelationalExpression	ptr_esc >= str		5010487	0		>=			
ANR	5011680	Identifier	ptr_esc		5010487	0					
ANR	5011681	Identifier	str		5010487	1					
ANR	5011682	EqualityExpression	* ptr_esc != 0x1b		5010487	1		!=			
ANR	5011683	UnaryOperationExpression	* ptr_esc		5010487	0					
ANR	5011684	UnaryOperator	*		5010487	0					
ANR	5011685	Identifier	ptr_esc		5010487	1					
ANR	5011686	PrimaryExpression	0x1b		5010487	1					
ANR	5011687	PostIncDecOperationExpression	ptr_esc --	315:51:7545:7553	5010487	1	True				
ANR	5011688	Identifier	ptr_esc		5010487	0					
ANR	5011689	IncDec	--		5010487	1					
ANR	5011690	CompoundStatement		180:62:4913:4913	5010487	2					
ANR	5011691	ExpressionStatement		316:9:7567:7567	5010487	0	True				
ANR	5011692	IfStatement	if ( ptr_esc < str )		5010487	4					
ANR	5011693	Condition	ptr_esc < str	318:12:7591:7603	5010487	0	True				
ANR	5011694	RelationalExpression	ptr_esc < str		5010487	0		<			
ANR	5011695	Identifier	ptr_esc		5010487	0					
ANR	5011696	Identifier	str		5010487	1					
ANR	5011697	CompoundStatement		183:27:4963:4963	5010487	1					
ANR	5011698	ExpressionStatement	ptr_esc = ptr_end - flag_len + 1	319:9:7617:7649	5010487	0	True				
ANR	5011699	AssignmentExpression	ptr_esc = ptr_end - flag_len + 1		5010487	0		=			
ANR	5011700	Identifier	ptr_esc		5010487	0					
ANR	5011701	AdditiveExpression	ptr_end - flag_len + 1		5010487	1		-			
ANR	5011702	Identifier	ptr_end		5010487	0					
ANR	5011703	AdditiveExpression	flag_len + 1		5010487	1		+			
ANR	5011704	Identifier	flag_len		5010487	0					
ANR	5011705	PrimaryExpression	1		5010487	1					
ANR	5011706	IdentifierDeclStatement	int copied_len = ptr_end - ptr_esc + 1 ;	321:8:7669:7707	5010487	5	True				
ANR	5011707	IdentifierDecl	copied_len = ptr_end - ptr_esc + 1		5010487	0					
ANR	5011708	IdentifierDeclType	int		5010487	0					
ANR	5011709	Identifier	copied_len		5010487	1					
ANR	5011710	AssignmentExpression	copied_len = ptr_end - ptr_esc + 1		5010487	2		=			
ANR	5011711	Identifier	copied_len		5010487	0					
ANR	5011712	AdditiveExpression	ptr_end - ptr_esc + 1		5010487	1		-			
ANR	5011713	Identifier	ptr_end		5010487	0					
ANR	5011714	AdditiveExpression	ptr_esc + 1		5010487	1		+			
ANR	5011715	Identifier	ptr_esc		5010487	0					
ANR	5011716	PrimaryExpression	1		5010487	1					
ANR	5011717	IfStatement	if ( copied_len < 1 )		5010487	6					
ANR	5011718	Condition	copied_len < 1	322:12:7721:7734	5010487	0	True				
ANR	5011719	RelationalExpression	copied_len < 1		5010487	0		<			
ANR	5011720	Identifier	copied_len		5010487	0					
ANR	5011721	PrimaryExpression	1		5010487	1					
ANR	5011722	CompoundStatement		187:28:5094:5094	5010487	1					
ANR	5011723	BreakStatement	break ;	323:9:7748:7753	5010487	0	True				
ANR	5011724	ExpressionStatement	"memmove ( ptr_left , ptr_esc , copied_len )"	325:8:7773:7812	5010487	7	True				
ANR	5011725	CallExpression	"memmove ( ptr_left , ptr_esc , copied_len )"		5010487	0					
ANR	5011726	Callee	memmove		5010487	0					
ANR	5011727	Identifier	memmove		5010487	0					
ANR	5011728	ArgumentList	ptr_left		5010487	1					
ANR	5011729	Argument	ptr_left		5010487	0					
ANR	5011730	Identifier	ptr_left		5010487	0					
ANR	5011731	Argument	ptr_esc		5010487	1					
ANR	5011732	Identifier	ptr_esc		5010487	0					
ANR	5011733	Argument	copied_len		5010487	2					
ANR	5011734	Identifier	copied_len		5010487	0					
ANR	5011735	IdentifierDeclStatement	"char * dptr_left = strcpy ( ptr_left + copied_len , ( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """" ) ;"	326:8:7822:7945	5010487	8	True				
ANR	5011736	IdentifierDecl	"* dptr_left = strcpy ( ptr_left + copied_len , ( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """" )"		5010487	0					
ANR	5011737	IdentifierDeclType	char *		5010487	0					
ANR	5011738	Identifier	dptr_left		5010487	1					
ANR	5011739	AssignmentExpression	"* dptr_left = strcpy ( ptr_left + copied_len , ( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """" )"		5010487	2		=			
ANR	5011740	Identifier	dptr_left		5010487	0					
ANR	5011741	CallExpression	"strcpy ( ptr_left + copied_len , ( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """" )"		5010487	1					
ANR	5011742	Callee	strcpy		5010487	0					
ANR	5011743	Identifier	strcpy		5010487	0					
ANR	5011744	ArgumentList	ptr_left + copied_len		5010487	1					
ANR	5011745	Argument	ptr_left + copied_len		5010487	0					
ANR	5011746	AdditiveExpression	ptr_left + copied_len		5010487	0		+			
ANR	5011747	Identifier	ptr_left		5010487	0					
ANR	5011748	Identifier	copied_len		5010487	1					
ANR	5011749	Argument	"( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """""		5010487	1					
ANR	5011750	ConditionalExpression	"( ansi_found && ptr_right - ptr_end + 1 >= 4 ) ? Color_RESET : """""		5010487	0					
ANR	5011751	Condition	ansi_found && ptr_right - ptr_end + 1 >= 4		5010487	0					
ANR	5011752	AndExpression	ansi_found && ptr_right - ptr_end + 1 >= 4		5010487	0		&&			
ANR	5011753	Identifier	ansi_found		5010487	0					
ANR	5011754	RelationalExpression	ptr_right - ptr_end + 1 >= 4		5010487	1		>=			
ANR	5011755	AdditiveExpression	ptr_right - ptr_end + 1		5010487	0		-			
ANR	5011756	Identifier	ptr_right		5010487	0					
ANR	5011757	AdditiveExpression	ptr_end + 1		5010487	1		+			
ANR	5011758	Identifier	ptr_end		5010487	0					
ANR	5011759	PrimaryExpression	1		5010487	1					
ANR	5011760	PrimaryExpression	4		5010487	1					
ANR	5011761	Identifier	Color_RESET		5010487	1					
ANR	5011762	PrimaryExpression	""""""		5010487	2					
ANR	5011763	IdentifierDeclStatement	int dlen = strlen ( dptr_left ) ;	328:8:7955:7984	5010487	9	True				
ANR	5011764	IdentifierDecl	dlen = strlen ( dptr_left )		5010487	0					
ANR	5011765	IdentifierDeclType	int		5010487	0					
ANR	5011766	Identifier	dlen		5010487	1					
ANR	5011767	AssignmentExpression	dlen = strlen ( dptr_left )		5010487	2		=			
ANR	5011768	Identifier	dlen		5010487	0					
ANR	5011769	CallExpression	strlen ( dptr_left )		5010487	1					
ANR	5011770	Callee	strlen		5010487	0					
ANR	5011771	Identifier	strlen		5010487	0					
ANR	5011772	ArgumentList	dptr_left		5010487	1					
ANR	5011773	Argument	dptr_left		5010487	0					
ANR	5011774	Identifier	dptr_left		5010487	0					
ANR	5011775	ExpressionStatement	dptr_left += dlen	329:8:7994:8011	5010487	10	True				
ANR	5011776	AssignmentExpression	dptr_left += dlen		5010487	0		+=			
ANR	5011777	Identifier	dptr_left		5010487	0					
ANR	5011778	Identifier	dlen		5010487	1					
ANR	5011779	IdentifierDeclStatement	char * dptr_end = ptr_right + 1 ;	330:8:8021:8051	5010487	11	True				
ANR	5011780	IdentifierDecl	* dptr_end = ptr_right + 1		5010487	0					
ANR	5011781	IdentifierDeclType	char *		5010487	0					
ANR	5011782	Identifier	dptr_end		5010487	1					
ANR	5011783	AssignmentExpression	* dptr_end = ptr_right + 1		5010487	2		=			
ANR	5011784	Identifier	dptr_end		5010487	0					
ANR	5011785	AdditiveExpression	ptr_right + 1		5010487	1		+			
ANR	5011786	Identifier	ptr_right		5010487	0					
ANR	5011787	PrimaryExpression	1		5010487	1					
ANR	5011788	WhileStatement	while ( * dptr_end )		5010487	12					
ANR	5011789	Condition	* dptr_end	331:15:8068:8076	5010487	0	True				
ANR	5011790	UnaryOperationExpression	* dptr_end		5010487	0					
ANR	5011791	UnaryOperator	*		5010487	0					
ANR	5011792	Identifier	dptr_end		5010487	1					
ANR	5011793	CompoundStatement		196:26:5436:5436	5010487	1					
ANR	5011794	ExpressionStatement	dptr_end ++	332:9:8090:8100	5010487	0	True				
ANR	5011795	PostIncDecOperationExpression	dptr_end ++		5010487	0					
ANR	5011796	Identifier	dptr_end		5010487	0					
ANR	5011797	IncDec	++		5010487	1					
ANR	5011798	IdentifierDeclStatement	int llen = dptr_end - ( ptr_right + 1 ) ;	334:8:8120:8157	5010487	13	True				
ANR	5011799	IdentifierDecl	llen = dptr_end - ( ptr_right + 1 )		5010487	0					
ANR	5011800	IdentifierDeclType	int		5010487	0					
ANR	5011801	Identifier	llen		5010487	1					
ANR	5011802	AssignmentExpression	llen = dptr_end - ( ptr_right + 1 )		5010487	2		=			
ANR	5011803	Identifier	llen		5010487	0					
ANR	5011804	AdditiveExpression	dptr_end - ( ptr_right + 1 )		5010487	1		-			
ANR	5011805	Identifier	dptr_end		5010487	0					
ANR	5011806	AdditiveExpression	ptr_right + 1		5010487	1		+			
ANR	5011807	Identifier	ptr_right		5010487	0					
ANR	5011808	PrimaryExpression	1		5010487	1					
ANR	5011809	ExpressionStatement	"memmove ( dptr_left , ptr_right + 1 , llen )"	335:8:8167:8207	5010487	14	True				
ANR	5011810	CallExpression	"memmove ( dptr_left , ptr_right + 1 , llen )"		5010487	0					
ANR	5011811	Callee	memmove		5010487	0					
ANR	5011812	Identifier	memmove		5010487	0					
ANR	5011813	ArgumentList	dptr_left		5010487	1					
ANR	5011814	Argument	dptr_left		5010487	0					
ANR	5011815	Identifier	dptr_left		5010487	0					
ANR	5011816	Argument	ptr_right + 1		5010487	1					
ANR	5011817	AdditiveExpression	ptr_right + 1		5010487	0		+			
ANR	5011818	Identifier	ptr_right		5010487	0					
ANR	5011819	PrimaryExpression	1		5010487	1					
ANR	5011820	Argument	llen		5010487	2					
ANR	5011821	Identifier	llen		5010487	0					
ANR	5011822	ExpressionStatement	dptr_left [ llen ] = 0	336:8:8217:8236	5010487	15	True				
ANR	5011823	AssignmentExpression	dptr_left [ llen ] = 0		5010487	0		=			
ANR	5011824	ArrayIndexing	dptr_left [ llen ]		5010487	0					
ANR	5011825	Identifier	dptr_left		5010487	0					
ANR	5011826	Identifier	llen		5010487	1					
ANR	5011827	PrimaryExpression	0		5010487	1					
ANR	5011828	BreakStatement	break ;	338:7:8254:8259	5010487	2	True				
ANR	5011829	ReturnStatement	return true ;	341:5:8281:8292	5010487	15	True				
ANR	5011830	Identifier	true		5010487	0					
ANR	5011831	IfStatement	if ( p -> tailsub )		5010487	8					
ANR	5011832	Condition	p -> tailsub	343:8:8308:8317	5010487	0	True				
ANR	5011833	PtrMemberAccess	p -> tailsub		5010487	0					
ANR	5011834	Identifier	p		5010487	0					
ANR	5011835	Identifier	tailsub		5010487	1					
ANR	5011836	CompoundStatement		208:20:5677:5677	5010487	1					
ANR	5011837	IfStatement	if ( off != UT64_MAX )		5010487	0					
ANR	5011838	Condition	off != UT64_MAX	344:9:8373:8387	5010487	0	True				
ANR	5011839	EqualityExpression	off != UT64_MAX		5010487	0		!=			
ANR	5011840	Identifier	off		5010487	0					
ANR	5011841	Identifier	UT64_MAX		5010487	1					
ANR	5011842	CompoundStatement		209:26:5747:5747	5010487	1					
ANR	5011843	IfStatement	if ( off == addr )		5010487	0					
ANR	5011844	Condition	off == addr	345:10:8402:8412	5010487	0	True				
ANR	5011845	EqualityExpression	off == addr		5010487	0		==			
ANR	5011846	Identifier	off		5010487	0					
ANR	5011847	Identifier	addr		5010487	1					
ANR	5011848	CompoundStatement		210:23:5772:5772	5010487	1					
ANR	5011849	ExpressionStatement	"insert ( ptr , ""$$"" )"	346:7:8424:8442	5010487	0	True				
ANR	5011850	CallExpression	"insert ( ptr , ""$$"" )"		5010487	0					
ANR	5011851	Callee	insert		5010487	0					
ANR	5011852	Identifier	insert		5010487	0					
ANR	5011853	ArgumentList	ptr		5010487	1					
ANR	5011854	Argument	ptr		5010487	0					
ANR	5011855	Identifier	ptr		5010487	0					
ANR	5011856	Argument	"""$$"""		5010487	1					
ANR	5011857	PrimaryExpression	"""$$"""		5010487	0					
ANR	5011858	ElseStatement	else		5010487	0					
ANR	5011859	CompoundStatement		213:7:5823:5868	5010487	0					
ANR	5011860	IdentifierDeclStatement	"ut64 tail = r_num_tail_base ( NULL , addr , off ) ;"	348:7:8466:8511	5010487	0	True				
ANR	5011861	IdentifierDecl	"tail = r_num_tail_base ( NULL , addr , off )"		5010487	0					
ANR	5011862	IdentifierDeclType	ut64		5010487	0					
ANR	5011863	Identifier	tail		5010487	1					
ANR	5011864	AssignmentExpression	"tail = r_num_tail_base ( NULL , addr , off )"		5010487	2		=			
ANR	5011865	Identifier	tail		5010487	0					
ANR	5011866	CallExpression	"r_num_tail_base ( NULL , addr , off )"		5010487	1					
ANR	5011867	Callee	r_num_tail_base		5010487	0					
ANR	5011868	Identifier	r_num_tail_base		5010487	0					
ANR	5011869	ArgumentList	NULL		5010487	1					
ANR	5011870	Argument	NULL		5010487	0					
ANR	5011871	Identifier	NULL		5010487	0					
ANR	5011872	Argument	addr		5010487	1					
ANR	5011873	Identifier	addr		5010487	0					
ANR	5011874	Argument	off		5010487	2					
ANR	5011875	Identifier	off		5010487	0					
ANR	5011876	IfStatement	if ( tail != UT64_MAX )		5010487	1					
ANR	5011877	Condition	tail != UT64_MAX	349:11:8524:8539	5010487	0	True				
ANR	5011878	EqualityExpression	tail != UT64_MAX		5010487	0		!=			
ANR	5011879	Identifier	tail		5010487	0					
ANR	5011880	Identifier	UT64_MAX		5010487	1					
ANR	5011881	CompoundStatement		215:8:5909:5922	5010487	1					
ANR	5011882	IdentifierDeclStatement	char str [ 128 ] ;	350:8:8552:8565	5010487	0	True				
ANR	5011883	IdentifierDecl	str [ 128 ]		5010487	0					
ANR	5011884	IdentifierDeclType	char [ 128 ]		5010487	0					
ANR	5011885	Identifier	str		5010487	1					
ANR	5011886	PrimaryExpression	128		5010487	2					
ANR	5011887	Statement	snprintf	351:8:8575:8582	5010487	1	True				
ANR	5011888	Statement	(	351:17:8584:8584	5010487	2	True				
ANR	5011889	Statement	str	351:18:8585:8587	5010487	3	True				
ANR	5011890	Statement	","	351:21:8588:8588	5010487	4	True				
ANR	5011891	Statement	sizeof	351:23:8590:8595	5010487	5	True				
ANR	5011892	Statement	(	351:30:8597:8597	5010487	6	True				
ANR	5011893	Statement	str	351:31:8598:8600	5010487	7	True				
ANR	5011894	Statement	)	351:34:8601:8601	5010487	8	True				
ANR	5011895	Statement	","	351:35:8602:8602	5010487	9	True				
ANR	5011896	Statement	"""..%"""	351:37:8604:8608	5010487	10	True				
ANR	5011897	Statement	PFMT64x	351:42:8609:8615	5010487	11	True				
ANR	5011898	Statement	","	351:49:8616:8616	5010487	12	True				
ANR	5011899	Statement	tail	351:51:8618:8621	5010487	13	True				
ANR	5011900	Statement	)	351:55:8622:8622	5010487	14	True				
ANR	5011901	ExpressionStatement		351:56:8623:8623	5010487	15	True				
ANR	5011902	ExpressionStatement	"insert ( ptr , str )"	352:8:8633:8650	5010487	16	True				
ANR	5011903	CallExpression	"insert ( ptr , str )"		5010487	0					
ANR	5011904	Callee	insert		5010487	0					
ANR	5011905	Identifier	insert		5010487	0					
ANR	5011906	ArgumentList	ptr		5010487	1					
ANR	5011907	Argument	ptr		5010487	0					
ANR	5011908	Identifier	ptr		5010487	0					
ANR	5011909	Argument	str		5010487	1					
ANR	5011910	Identifier	str		5010487	0					
ANR	5011911	IfStatement	if ( hint )		5010487	4					
ANR	5011912	Condition	hint	359:6:8697:8700	5010487	0	True				
ANR	5011913	Identifier	hint		5010487	0					
ANR	5011914	CompoundStatement		233:3:6256:6269	5010487	1					
ANR	5011915	IdentifierDeclStatement	const int nw = hint -> nword ;	360:3:8708:8734	5010487	0	True				
ANR	5011916	IdentifierDecl	nw = hint -> nword		5010487	0					
ANR	5011917	IdentifierDeclType	const int		5010487	0					
ANR	5011918	Identifier	nw		5010487	1					
ANR	5011919	AssignmentExpression	nw = hint -> nword		5010487	2		=			
ANR	5011920	Identifier	nw		5010487	0					
ANR	5011921	PtrMemberAccess	hint -> nword		5010487	1					
ANR	5011922	Identifier	hint		5010487	0					
ANR	5011923	Identifier	nword		5010487	1					
ANR	5011924	IfStatement	if ( count != nw )		5010487	1					
ANR	5011925	Condition	count != nw	361:7:8743:8753	5010487	0	True				
ANR	5011926	EqualityExpression	count != nw		5010487	0		!=			
ANR	5011927	Identifier	count		5010487	0					
ANR	5011928	Identifier	nw		5010487	1					
ANR	5011929	CompoundStatement		226:20:6113:6113	5010487	1					
ANR	5011930	ExpressionStatement	ptr = ptr2	362:4:8762:8772	5010487	0	True				
ANR	5011931	AssignmentExpression	ptr = ptr2		5010487	0		=			
ANR	5011932	Identifier	ptr		5010487	0					
ANR	5011933	Identifier	ptr2		5010487	1					
ANR	5011934	ContinueStatement	continue ;	363:4:8778:8786	5010487	1	True				
ANR	5011935	IdentifierDeclStatement	"int pnumleft , immbase = hint -> immbase ;"	365:3:8796:8833	5010487	2	True				
ANR	5011936	IdentifierDecl	pnumleft		5010487	0					
ANR	5011937	IdentifierDeclType	int		5010487	0					
ANR	5011938	Identifier	pnumleft		5010487	1					
ANR	5011939	IdentifierDecl	immbase = hint -> immbase		5010487	1					
ANR	5011940	IdentifierDeclType	int		5010487	0					
ANR	5011941	Identifier	immbase		5010487	1					
ANR	5011942	AssignmentExpression	immbase = hint -> immbase		5010487	2		=			
ANR	5011943	Identifier	immbase		5010487	0					
ANR	5011944	PtrMemberAccess	hint -> immbase		5010487	1					
ANR	5011945	Identifier	hint		5010487	0					
ANR	5011946	Identifier	immbase		5010487	1					
ANR	5011947	IdentifierDeclStatement	"char num [ 256 ] = { 0 } , * pnum , * tmp ;"	366:3:8838:8870	5010487	3	True				
ANR	5011948	IdentifierDecl	num [ 256 ] = { 0 }		5010487	0					
ANR	5011949	IdentifierDeclType	char [ 256 ]		5010487	0					
ANR	5011950	Identifier	num		5010487	1					
ANR	5011951	PrimaryExpression	256		5010487	2					
ANR	5011952	AssignmentExpression	num [ 256 ] = { 0 }		5010487	3		=			
ANR	5011953	Identifier	num		5010487	0					
ANR	5011954	InitializerList	0		5010487	1					
ANR	5011955	PrimaryExpression	0		5010487	0					
ANR	5011956	IdentifierDecl	* pnum		5010487	1					
ANR	5011957	IdentifierDeclType	char *		5010487	0					
ANR	5011958	Identifier	pnum		5010487	1					
ANR	5011959	IdentifierDecl	* tmp		5010487	2					
ANR	5011960	IdentifierDeclType	char *		5010487	0					
ANR	5011961	Identifier	tmp		5010487	1					
ANR	5011962	IdentifierDeclStatement	bool is_hex = false ;	367:3:8875:8894	5010487	4	True				
ANR	5011963	IdentifierDecl	is_hex = false		5010487	0					
ANR	5011964	IdentifierDeclType	bool		5010487	0					
ANR	5011965	Identifier	is_hex		5010487	1					
ANR	5011966	AssignmentExpression	is_hex = false		5010487	2		=			
ANR	5011967	Identifier	false		5010487	0					
ANR	5011968	Identifier	false		5010487	1					
ANR	5011969	IdentifierDeclStatement	int tmp_count ;	368:3:8899:8912	5010487	5	True				
ANR	5011970	IdentifierDecl	tmp_count		5010487	0					
ANR	5011971	IdentifierDeclType	int		5010487	0					
ANR	5011972	Identifier	tmp_count		5010487	1					
ANR	5011973	IfStatement	if ( hint -> offset )		5010487	6					
ANR	5011974	Condition	hint -> offset	369:7:8921:8932	5010487	0	True				
ANR	5011975	PtrMemberAccess	hint -> offset		5010487	0					
ANR	5011976	Identifier	hint		5010487	0					
ANR	5011977	Identifier	offset		5010487	1					
ANR	5011978	CompoundStatement		234:21:6292:6292	5010487	1					
ANR	5011979	ExpressionStatement	* ptr = 0	370:4:8941:8949	5010487	0	True				
ANR	5011980	AssignmentExpression	* ptr = 0		5010487	0		=			
ANR	5011981	UnaryOperationExpression	* ptr		5010487	0					
ANR	5011982	UnaryOperator	*		5010487	0					
ANR	5011983	Identifier	ptr		5010487	1					
ANR	5011984	PrimaryExpression	0		5010487	1					
ANR	5011985	ExpressionStatement	"snprintf ( str , len , ""%s%s%s"" , data , hint -> offset , ( ptr != ptr2 ) ? ptr2 : """" )"	371:4:8955:9029	5010487	1	True				
ANR	5011986	CallExpression	"snprintf ( str , len , ""%s%s%s"" , data , hint -> offset , ( ptr != ptr2 ) ? ptr2 : """" )"		5010487	0					
ANR	5011987	Callee	snprintf		5010487	0					
ANR	5011988	Identifier	snprintf		5010487	0					
ANR	5011989	ArgumentList	str		5010487	1					
ANR	5011990	Argument	str		5010487	0					
ANR	5011991	Identifier	str		5010487	0					
ANR	5011992	Argument	len		5010487	1					
ANR	5011993	Identifier	len		5010487	0					
ANR	5011994	Argument	"""%s%s%s"""		5010487	2					
ANR	5011995	PrimaryExpression	"""%s%s%s"""		5010487	0					
ANR	5011996	Argument	data		5010487	3					
ANR	5011997	Identifier	data		5010487	0					
ANR	5011998	Argument	hint -> offset		5010487	4					
ANR	5011999	PtrMemberAccess	hint -> offset		5010487	0					
ANR	5012000	Identifier	hint		5010487	0					
ANR	5012001	Identifier	offset		5010487	1					
ANR	5012002	Argument	"( ptr != ptr2 ) ? ptr2 : """""		5010487	5					
ANR	5012003	ConditionalExpression	"( ptr != ptr2 ) ? ptr2 : """""		5010487	0					
ANR	5012004	Condition	ptr != ptr2		5010487	0					
ANR	5012005	EqualityExpression	ptr != ptr2		5010487	0		!=			
ANR	5012006	Identifier	ptr		5010487	0					
ANR	5012007	Identifier	ptr2		5010487	1					
ANR	5012008	Identifier	ptr2		5010487	1					
ANR	5012009	PrimaryExpression	""""""		5010487	2					
ANR	5012010	ReturnStatement	return true ;	372:4:9035:9046	5010487	2	True				
ANR	5012011	Identifier	true		5010487	0					
ANR	5012012	ExpressionStatement	"strncpy ( num , ptr , sizeof ( num ) - 2 )"	374:3:9056:9090	5010487	7	True				
ANR	5012013	CallExpression	"strncpy ( num , ptr , sizeof ( num ) - 2 )"		5010487	0					
ANR	5012014	Callee	strncpy		5010487	0					
ANR	5012015	Identifier	strncpy		5010487	0					
ANR	5012016	ArgumentList	num		5010487	1					
ANR	5012017	Argument	num		5010487	0					
ANR	5012018	Identifier	num		5010487	0					
ANR	5012019	Argument	ptr		5010487	1					
ANR	5012020	Identifier	ptr		5010487	0					
ANR	5012021	Argument	sizeof ( num ) - 2		5010487	2					
ANR	5012022	AdditiveExpression	sizeof ( num ) - 2		5010487	0		-			
ANR	5012023	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012024	Sizeof	sizeof		5010487	0					
ANR	5012025	SizeofOperand	num		5010487	1					
ANR	5012026	PrimaryExpression	2		5010487	1					
ANR	5012027	ExpressionStatement	pnum = num	375:3:9095:9105	5010487	8	True				
ANR	5012028	AssignmentExpression	pnum = num		5010487	0		=			
ANR	5012029	Identifier	pnum		5010487	0					
ANR	5012030	Identifier	num		5010487	1					
ANR	5012031	IfStatement	"if ( ! strncmp ( pnum , ""0x"" , 2 ) )"		5010487	9					
ANR	5012032	Condition	"! strncmp ( pnum , ""0x"" , 2 )"	376:7:9114:9137	5010487	0	True				
ANR	5012033	UnaryOperationExpression	"! strncmp ( pnum , ""0x"" , 2 )"		5010487	0					
ANR	5012034	UnaryOperator	!		5010487	0					
ANR	5012035	CallExpression	"strncmp ( pnum , ""0x"" , 2 )"		5010487	1					
ANR	5012036	Callee	strncmp		5010487	0					
ANR	5012037	Identifier	strncmp		5010487	0					
ANR	5012038	ArgumentList	pnum		5010487	1					
ANR	5012039	Argument	pnum		5010487	0					
ANR	5012040	Identifier	pnum		5010487	0					
ANR	5012041	Argument	"""0x"""		5010487	1					
ANR	5012042	PrimaryExpression	"""0x"""		5010487	0					
ANR	5012043	Argument	2		5010487	2					
ANR	5012044	PrimaryExpression	2		5010487	0					
ANR	5012045	CompoundStatement		241:33:6497:6497	5010487	1					
ANR	5012046	ExpressionStatement	is_hex = true	377:4:9146:9159	5010487	0	True				
ANR	5012047	AssignmentExpression	is_hex = true		5010487	0		=			
ANR	5012048	Identifier	is_hex		5010487	0					
ANR	5012049	Identifier	true		5010487	1					
ANR	5012050	ExpressionStatement	pnum += 2	378:4:9165:9174	5010487	1	True				
ANR	5012051	AssignmentExpression	pnum += 2		5010487	0		+=			
ANR	5012052	Identifier	pnum		5010487	0					
ANR	5012053	PrimaryExpression	2		5010487	1					
ANR	5012054	ForStatement	for ( ; * pnum ; pnum ++ )		5010487	10					
ANR	5012055	Condition	* pnum	380:10:9191:9195	5010487	0	True				
ANR	5012056	UnaryOperationExpression	* pnum		5010487	0					
ANR	5012057	UnaryOperator	*		5010487	0					
ANR	5012058	Identifier	pnum		5010487	1					
ANR	5012059	PostIncDecOperationExpression	pnum ++	380:17:9198:9203	5010487	1	True				
ANR	5012060	Identifier	pnum		5010487	0					
ANR	5012061	IncDec	++		5010487	1					
ANR	5012062	CompoundStatement		245:25:6563:6563	5010487	2					
ANR	5012063	IfStatement	if ( ( is_hex && IS_HEXCHAR ( * pnum ) ) || IS_DIGIT ( * pnum ) )		5010487	0					
ANR	5012064	Condition	( is_hex && IS_HEXCHAR ( * pnum ) ) || IS_DIGIT ( * pnum )	381:8:9216:9265	5010487	0	True				
ANR	5012065	OrExpression	( is_hex && IS_HEXCHAR ( * pnum ) ) || IS_DIGIT ( * pnum )		5010487	0		||			
ANR	5012066	AndExpression	is_hex && IS_HEXCHAR ( * pnum )		5010487	0		&&			
ANR	5012067	Identifier	is_hex		5010487	0					
ANR	5012068	CallExpression	IS_HEXCHAR ( * pnum )		5010487	1					
ANR	5012069	Callee	IS_HEXCHAR		5010487	0					
ANR	5012070	Identifier	IS_HEXCHAR		5010487	0					
ANR	5012071	ArgumentList	* pnum		5010487	1					
ANR	5012072	Argument	* pnum		5010487	0					
ANR	5012073	UnaryOperationExpression	* pnum		5010487	0					
ANR	5012074	UnaryOperator	*		5010487	0					
ANR	5012075	Identifier	pnum		5010487	1					
ANR	5012076	CallExpression	IS_DIGIT ( * pnum )		5010487	1					
ANR	5012077	Callee	IS_DIGIT		5010487	0					
ANR	5012078	Identifier	IS_DIGIT		5010487	0					
ANR	5012079	ArgumentList	* pnum		5010487	1					
ANR	5012080	Argument	* pnum		5010487	0					
ANR	5012081	UnaryOperationExpression	* pnum		5010487	0					
ANR	5012082	UnaryOperator	*		5010487	0					
ANR	5012083	Identifier	pnum		5010487	1					
ANR	5012084	CompoundStatement		246:60:6625:6625	5010487	1					
ANR	5012085	ContinueStatement	continue ;	382:5:9275:9283	5010487	0	True				
ANR	5012086	BreakStatement	break ;	384:4:9295:9300	5010487	1	True				
ANR	5012087	ExpressionStatement	* pnum = 0	386:3:9310:9319	5010487	11	True				
ANR	5012088	AssignmentExpression	* pnum = 0		5010487	0		=			
ANR	5012089	UnaryOperationExpression	* pnum		5010487	0					
ANR	5012090	UnaryOperator	*		5010487	0					
ANR	5012091	Identifier	pnum		5010487	1					
ANR	5012092	PrimaryExpression	0		5010487	1					
ANR	5012093	SwitchStatement	switch ( immbase )		5010487	12					
ANR	5012094	Condition	immbase	387:11:9332:9338	5010487	0	True				
ANR	5012095	Identifier	immbase		5010487	0					
ANR	5012096	CompoundStatement		252:20:6698:6698	5010487	1					
ANR	5012097	Label	case 0 :	388:3:9346:9352	5010487	0	True				
ANR	5012098	BreakStatement	break ;	390:4:9376:9381	5010487	1	True				
ANR	5012099	Label	case 1 :	391:3:9386:9392	5010487	2	True				
ANR	5012100	ExpressionStatement	tmp_count = 0	392:4:9416:9429	5010487	3	True				
ANR	5012101	AssignmentExpression	tmp_count = 0		5010487	0		=			
ANR	5012102	Identifier	tmp_count		5010487	0					
ANR	5012103	PrimaryExpression	0		5010487	1					
ANR	5012104	ForStatement	for ( tmp = data ; tmp < ptr ; tmp ++ )		5010487	4					
ANR	5012105	ForInit	tmp = data ;	393:9:9440:9450	5010487	0	True				
ANR	5012106	AssignmentExpression	tmp = data		5010487	0		=			
ANR	5012107	Identifier	tmp		5010487	0					
ANR	5012108	Identifier	data		5010487	1					
ANR	5012109	Condition	tmp < ptr	393:21:9452:9460	5010487	1	True				
ANR	5012110	RelationalExpression	tmp < ptr		5010487	0		<			
ANR	5012111	Identifier	tmp		5010487	0					
ANR	5012112	Identifier	ptr		5010487	1					
ANR	5012113	PostIncDecOperationExpression	tmp ++	393:32:9463:9467	5010487	2	True				
ANR	5012114	Identifier	tmp		5010487	0					
ANR	5012115	IncDec	++		5010487	1					
ANR	5012116	CompoundStatement		258:39:6827:6827	5010487	3					
ANR	5012117	IfStatement	if ( * tmp == 0x1b )		5010487	0					
ANR	5012118	Condition	* tmp == 0x1b	394:9:9481:9492	5010487	0	True				
ANR	5012119	EqualityExpression	* tmp == 0x1b		5010487	0		==			
ANR	5012120	UnaryOperationExpression	* tmp		5010487	0					
ANR	5012121	UnaryOperator	*		5010487	0					
ANR	5012122	Identifier	tmp		5010487	1					
ANR	5012123	PrimaryExpression	0x1b		5010487	1					
ANR	5012124	CompoundStatement		259:23:6852:6852	5010487	1					
ANR	5012125	WhileStatement	while ( tmp < ptr - 1 && * tmp != 'm' )		5010487	0					
ANR	5012126	Condition	tmp < ptr - 1 && * tmp != 'm'	395:13:9510:9537	5010487	0	True				
ANR	5012127	AndExpression	tmp < ptr - 1 && * tmp != 'm'		5010487	0		&&			
ANR	5012128	RelationalExpression	tmp < ptr - 1		5010487	0		<			
ANR	5012129	Identifier	tmp		5010487	0					
ANR	5012130	AdditiveExpression	ptr - 1		5010487	1		-			
ANR	5012131	Identifier	ptr		5010487	0					
ANR	5012132	PrimaryExpression	1		5010487	1					
ANR	5012133	EqualityExpression	* tmp != 'm'		5010487	1		!=			
ANR	5012134	UnaryOperationExpression	* tmp		5010487	0					
ANR	5012135	UnaryOperator	*		5010487	0					
ANR	5012136	Identifier	tmp		5010487	1					
ANR	5012137	PrimaryExpression	'm'		5010487	1					
ANR	5012138	CompoundStatement		260:43:6897:6897	5010487	1					
ANR	5012139	ExpressionStatement	tmp ++	396:7:9549:9554	5010487	0	True				
ANR	5012140	PostIncDecOperationExpression	tmp ++		5010487	0					
ANR	5012141	Identifier	tmp		5010487	0					
ANR	5012142	IncDec	++		5010487	1					
ANR	5012143	ContinueStatement	continue ;	398:6:9570:9578	5010487	1	True				
ANR	5012144	ElseStatement	else		5010487	0					
ANR	5012145	IfStatement	if ( * tmp == '[' )		5010487	0					
ANR	5012146	Condition	* tmp == '['	399:16:9596:9606	5010487	0	True				
ANR	5012147	EqualityExpression	* tmp == '['		5010487	0		==			
ANR	5012148	UnaryOperationExpression	* tmp		5010487	0					
ANR	5012149	UnaryOperator	*		5010487	0					
ANR	5012150	Identifier	tmp		5010487	1					
ANR	5012151	PrimaryExpression	'['		5010487	1					
ANR	5012152	CompoundStatement		264:29:6966:6966	5010487	1					
ANR	5012153	ExpressionStatement	tmp_count ++	400:6:9617:9628	5010487	0	True				
ANR	5012154	PostIncDecOperationExpression	tmp_count ++		5010487	0					
ANR	5012155	Identifier	tmp_count		5010487	0					
ANR	5012156	IncDec	++		5010487	1					
ANR	5012157	ElseStatement	else		5010487	0					
ANR	5012158	IfStatement	if ( * tmp == ']' )		5010487	0					
ANR	5012159	Condition	* tmp == ']'	401:16:9646:9656	5010487	0	True				
ANR	5012160	EqualityExpression	* tmp == ']'		5010487	0		==			
ANR	5012161	UnaryOperationExpression	* tmp		5010487	0					
ANR	5012162	UnaryOperator	*		5010487	0					
ANR	5012163	Identifier	tmp		5010487	1					
ANR	5012164	PrimaryExpression	']'		5010487	1					
ANR	5012165	CompoundStatement		266:29:7016:7016	5010487	1					
ANR	5012166	ExpressionStatement	tmp_count --	402:6:9667:9678	5010487	0	True				
ANR	5012167	PostIncDecOperationExpression	tmp_count --		5010487	0					
ANR	5012168	Identifier	tmp_count		5010487	0					
ANR	5012169	IncDec	--		5010487	1					
ANR	5012170	IfStatement	if ( tmp_count > 0 )		5010487	5					
ANR	5012171	Condition	tmp_count > 0	405:8:9701:9713	5010487	0	True				
ANR	5012172	RelationalExpression	tmp_count > 0		5010487	0		>			
ANR	5012173	Identifier	tmp_count		5010487	0					
ANR	5012174	PrimaryExpression	0		5010487	1					
ANR	5012175	CompoundStatement		270:23:7073:7073	5010487	1					
ANR	5012176	ExpressionStatement	ptr = ptr2	406:5:9723:9733	5010487	0	True				
ANR	5012177	AssignmentExpression	ptr = ptr2		5010487	0		=			
ANR	5012178	Identifier	ptr		5010487	0					
ANR	5012179	Identifier	ptr2		5010487	1					
ANR	5012180	ContinueStatement	continue ;	407:5:9740:9748	5010487	1	True				
ANR	5012181	ExpressionStatement	"memset ( num , 0 , sizeof ( num ) )"	409:4:9760:9789	5010487	6	True				
ANR	5012182	CallExpression	"memset ( num , 0 , sizeof ( num ) )"		5010487	0					
ANR	5012183	Callee	memset		5010487	0					
ANR	5012184	Identifier	memset		5010487	0					
ANR	5012185	ArgumentList	num		5010487	1					
ANR	5012186	Argument	num		5010487	0					
ANR	5012187	Identifier	num		5010487	0					
ANR	5012188	Argument	0		5010487	1					
ANR	5012189	PrimaryExpression	0		5010487	0					
ANR	5012190	Argument	sizeof ( num )		5010487	2					
ANR	5012191	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012192	Sizeof	sizeof		5010487	0					
ANR	5012193	SizeofOperand	num		5010487	1					
ANR	5012194	ExpressionStatement	pnum = num	410:4:9795:9805	5010487	7	True				
ANR	5012195	AssignmentExpression	pnum = num		5010487	0		=			
ANR	5012196	Identifier	pnum		5010487	0					
ANR	5012197	Identifier	num		5010487	1					
ANR	5012198	ExpressionStatement	* pnum ++ = '\\''	411:4:9811:9825	5010487	8	True				
ANR	5012199	AssignmentExpression	* pnum ++ = '\\''		5010487	0		=			
ANR	5012200	UnaryOperationExpression	* pnum ++		5010487	0					
ANR	5012201	UnaryOperator	*		5010487	0					
ANR	5012202	PostIncDecOperationExpression	pnum ++		5010487	1					
ANR	5012203	Identifier	pnum		5010487	0					
ANR	5012204	IncDec	++		5010487	1					
ANR	5012205	PrimaryExpression	'\\''		5010487	1					
ANR	5012206	ExpressionStatement	pnumleft = sizeof ( num ) - 2	412:4:9831:9858	5010487	9	True				
ANR	5012207	AssignmentExpression	pnumleft = sizeof ( num ) - 2		5010487	0		=			
ANR	5012208	Identifier	pnumleft		5010487	0					
ANR	5012209	AdditiveExpression	sizeof ( num ) - 2		5010487	1		-			
ANR	5012210	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012211	Sizeof	sizeof		5010487	0					
ANR	5012212	SizeofOperand	num		5010487	1					
ANR	5012213	PrimaryExpression	2		5010487	1					
ANR	5012214	WhileStatement	while ( off )		5010487	10					
ANR	5012215	Condition	off	416:11:9997:9999	5010487	0	True				
ANR	5012216	Identifier	off		5010487	0					
ANR	5012217	CompoundStatement		282:5:7366:7372	5010487	1					
ANR	5012218	IdentifierDeclStatement	ut8 ch ;	417:5:10009:10015	5010487	0	True				
ANR	5012219	IdentifierDecl	ch		5010487	0					
ANR	5012220	IdentifierDeclType	ut8		5010487	0					
ANR	5012221	Identifier	ch		5010487	1					
ANR	5012222	IfStatement	if ( big_endian )		5010487	1					
ANR	5012223	Condition	big_endian	418:9:10026:10035	5010487	0	True				
ANR	5012224	Identifier	big_endian		5010487	0					
ANR	5012225	CompoundStatement		283:21:7395:7395	5010487	1					
ANR	5012226	ExpressionStatement	ch = off & 0xff	419:6:10046:10061	5010487	0	True				
ANR	5012227	AssignmentExpression	ch = off & 0xff		5010487	0		=			
ANR	5012228	Identifier	ch		5010487	0					
ANR	5012229	BitAndExpression	off & 0xff		5010487	1		&			
ANR	5012230	Identifier	off		5010487	0					
ANR	5012231	PrimaryExpression	0xff		5010487	1					
ANR	5012232	ExpressionStatement	off >>= 8	420:6:10069:10078	5010487	1	True				
ANR	5012233	AssignmentExpression	off >>= 8		5010487	0		>>=			
ANR	5012234	Identifier	off		5010487	0					
ANR	5012235	PrimaryExpression	8		5010487	1					
ANR	5012236	ElseStatement	else		5010487	0					
ANR	5012237	CompoundStatement		286:12:7449:7449	5010487	0					
ANR	5012238	ExpressionStatement	ch = off >> ( 8 * ( sizeof ( off ) - 1 ) )	422:6:10100:10136	5010487	0	True				
ANR	5012239	AssignmentExpression	ch = off >> ( 8 * ( sizeof ( off ) - 1 ) )		5010487	0		=			
ANR	5012240	Identifier	ch		5010487	0					
ANR	5012241	ShiftExpression	off >> ( 8 * ( sizeof ( off ) - 1 ) )		5010487	1		>>			
ANR	5012242	Identifier	off		5010487	0					
ANR	5012243	MultiplicativeExpression	8 * ( sizeof ( off ) - 1 )		5010487	1		*			
ANR	5012244	PrimaryExpression	8		5010487	0					
ANR	5012245	AdditiveExpression	sizeof ( off ) - 1		5010487	1		-			
ANR	5012246	SizeofExpression	sizeof ( off )		5010487	0					
ANR	5012247	Sizeof	sizeof		5010487	0					
ANR	5012248	SizeofOperand	off		5010487	1					
ANR	5012249	PrimaryExpression	1		5010487	1					
ANR	5012250	ExpressionStatement	off <<= 8	423:6:10144:10153	5010487	1	True				
ANR	5012251	AssignmentExpression	off <<= 8		5010487	0		<<=			
ANR	5012252	Identifier	off		5010487	0					
ANR	5012253	PrimaryExpression	8		5010487	1					
ANR	5012254	IfStatement	if ( num [ 1 ] == '\\0' && ch == '\\0' )		5010487	2					
ANR	5012255	Condition	num [ 1 ] == '\\0' && ch == '\\0'	427:9:10203:10230	5010487	0	True				
ANR	5012256	AndExpression	num [ 1 ] == '\\0' && ch == '\\0'		5010487	0		&&			
ANR	5012257	EqualityExpression	num [ 1 ] == '\\0'		5010487	0		==			
ANR	5012258	ArrayIndexing	num [ 1 ]		5010487	0					
ANR	5012259	Identifier	num		5010487	0					
ANR	5012260	PrimaryExpression	1		5010487	1					
ANR	5012261	PrimaryExpression	'\\0'		5010487	1					
ANR	5012262	EqualityExpression	ch == '\\0'		5010487	1		==			
ANR	5012263	Identifier	ch		5010487	0					
ANR	5012264	PrimaryExpression	'\\0'		5010487	1					
ANR	5012265	CompoundStatement		292:39:7590:7590	5010487	1					
ANR	5012266	ContinueStatement	continue ;	428:6:10241:10249	5010487	0	True				
ANR	5012267	IfStatement	if ( IS_PRINTABLE ( ch ) )		5010487	3					
ANR	5012268	Condition	IS_PRINTABLE ( ch )	430:9:10267:10282	5010487	0	True				
ANR	5012269	CallExpression	IS_PRINTABLE ( ch )		5010487	0					
ANR	5012270	Callee	IS_PRINTABLE		5010487	0					
ANR	5012271	Identifier	IS_PRINTABLE		5010487	0					
ANR	5012272	ArgumentList	ch		5010487	1					
ANR	5012273	Argument	ch		5010487	0					
ANR	5012274	Identifier	ch		5010487	0					
ANR	5012275	CompoundStatement		295:27:7642:7642	5010487	1					
ANR	5012276	ExpressionStatement	* pnum ++ = ch	431:6:10293:10305	5010487	0	True				
ANR	5012277	AssignmentExpression	* pnum ++ = ch		5010487	0		=			
ANR	5012278	UnaryOperationExpression	* pnum ++		5010487	0					
ANR	5012279	UnaryOperator	*		5010487	0					
ANR	5012280	PostIncDecOperationExpression	pnum ++		5010487	1					
ANR	5012281	Identifier	pnum		5010487	0					
ANR	5012282	IncDec	++		5010487	1					
ANR	5012283	Identifier	ch		5010487	1					
ANR	5012284	ExpressionStatement	pnumleft --	432:6:10313:10324	5010487	1	True				
ANR	5012285	PostIncDecOperationExpression	pnumleft --		5010487	0					
ANR	5012286	Identifier	pnumleft		5010487	0					
ANR	5012287	IncDec	--		5010487	1					
ANR	5012288	ElseStatement	else		5010487	0					
ANR	5012289	CompoundStatement		299:6:7703:7753	5010487	0					
ANR	5012290	IdentifierDeclStatement	"int sz = snprintf ( pnum , pnumleft , ""\\\\x%2.2x"" , ch ) ;"	434:6:10346:10396	5010487	0	True				
ANR	5012291	IdentifierDecl	"sz = snprintf ( pnum , pnumleft , ""\\\\x%2.2x"" , ch )"		5010487	0					
ANR	5012292	IdentifierDeclType	int		5010487	0					
ANR	5012293	Identifier	sz		5010487	1					
ANR	5012294	AssignmentExpression	"sz = snprintf ( pnum , pnumleft , ""\\\\x%2.2x"" , ch )"		5010487	2		=			
ANR	5012295	Identifier	sz		5010487	0					
ANR	5012296	CallExpression	"snprintf ( pnum , pnumleft , ""\\\\x%2.2x"" , ch )"		5010487	1					
ANR	5012297	Callee	snprintf		5010487	0					
ANR	5012298	Identifier	snprintf		5010487	0					
ANR	5012299	ArgumentList	pnum		5010487	1					
ANR	5012300	Argument	pnum		5010487	0					
ANR	5012301	Identifier	pnum		5010487	0					
ANR	5012302	Argument	pnumleft		5010487	1					
ANR	5012303	Identifier	pnumleft		5010487	0					
ANR	5012304	Argument	"""\\\\x%2.2x"""		5010487	2					
ANR	5012305	PrimaryExpression	"""\\\\x%2.2x"""		5010487	0					
ANR	5012306	Argument	ch		5010487	3					
ANR	5012307	Identifier	ch		5010487	0					
ANR	5012308	IfStatement	if ( sz < 0 )		5010487	1					
ANR	5012309	Condition	sz < 0	435:10:10408:10413	5010487	0	True				
ANR	5012310	RelationalExpression	sz < 0		5010487	0		<			
ANR	5012311	Identifier	sz		5010487	0					
ANR	5012312	PrimaryExpression	0		5010487	1					
ANR	5012313	CompoundStatement		300:18:7773:7773	5010487	1					
ANR	5012314	BreakStatement	break ;	436:7:10425:10430	5010487	0	True				
ANR	5012315	ExpressionStatement	pnum += sz	438:6:10446:10456	5010487	2	True				
ANR	5012316	AssignmentExpression	pnum += sz		5010487	0		+=			
ANR	5012317	Identifier	pnum		5010487	0					
ANR	5012318	Identifier	sz		5010487	1					
ANR	5012319	ExpressionStatement	pnumleft -= sz	439:6:10464:10478	5010487	3	True				
ANR	5012320	AssignmentExpression	pnumleft -= sz		5010487	0		-=			
ANR	5012321	Identifier	pnumleft		5010487	0					
ANR	5012322	Identifier	sz		5010487	1					
ANR	5012323	ExpressionStatement	* pnum ++ = '\\''	442:4:10497:10511	5010487	11	True				
ANR	5012324	AssignmentExpression	* pnum ++ = '\\''		5010487	0		=			
ANR	5012325	UnaryOperationExpression	* pnum ++		5010487	0					
ANR	5012326	UnaryOperator	*		5010487	0					
ANR	5012327	PostIncDecOperationExpression	pnum ++		5010487	1					
ANR	5012328	Identifier	pnum		5010487	0					
ANR	5012329	IncDec	++		5010487	1					
ANR	5012330	PrimaryExpression	'\\''		5010487	1					
ANR	5012331	ExpressionStatement	* pnum = '\\0'	443:4:10517:10529	5010487	12	True				
ANR	5012332	AssignmentExpression	* pnum = '\\0'		5010487	0		=			
ANR	5012333	UnaryOperationExpression	* pnum		5010487	0					
ANR	5012334	UnaryOperator	*		5010487	0					
ANR	5012335	Identifier	pnum		5010487	1					
ANR	5012336	PrimaryExpression	'\\0'		5010487	1					
ANR	5012337	BreakStatement	break ;	444:4:10535:10540	5010487	13	True				
ANR	5012338	Label	case 2 :	445:3:10545:10551	5010487	14	True				
ANR	5012339	ExpressionStatement	"r_num_to_bits ( num , off )"	446:4:10557:10581	5010487	15	True				
ANR	5012340	CallExpression	"r_num_to_bits ( num , off )"		5010487	0					
ANR	5012341	Callee	r_num_to_bits		5010487	0					
ANR	5012342	Identifier	r_num_to_bits		5010487	0					
ANR	5012343	ArgumentList	num		5010487	1					
ANR	5012344	Argument	num		5010487	0					
ANR	5012345	Identifier	num		5010487	0					
ANR	5012346	Argument	off		5010487	1					
ANR	5012347	Identifier	off		5010487	0					
ANR	5012348	ExpressionStatement	"strcat ( num , ""b"" )"	447:4:10587:10604	5010487	16	True				
ANR	5012349	CallExpression	"strcat ( num , ""b"" )"		5010487	0					
ANR	5012350	Callee	strcat		5010487	0					
ANR	5012351	Identifier	strcat		5010487	0					
ANR	5012352	ArgumentList	num		5010487	1					
ANR	5012353	Argument	num		5010487	0					
ANR	5012354	Identifier	num		5010487	0					
ANR	5012355	Argument	"""b"""		5010487	1					
ANR	5012356	PrimaryExpression	"""b"""		5010487	0					
ANR	5012357	BreakStatement	break ;	448:4:10610:10615	5010487	17	True				
ANR	5012358	Label	case 3 :	449:3:10620:10626	5010487	18	True				
ANR	5012359	CompoundStatement		316:5:7996:8009	5010487	19					
ANR	5012360	IdentifierDeclStatement	ut64 swap = 0 ;	451:5:10639:10652	5010487	0	True				
ANR	5012361	IdentifierDecl	swap = 0		5010487	0					
ANR	5012362	IdentifierDeclType	ut64		5010487	0					
ANR	5012363	Identifier	swap		5010487	1					
ANR	5012364	AssignmentExpression	swap = 0		5010487	2		=			
ANR	5012365	Identifier	swap		5010487	0					
ANR	5012366	PrimaryExpression	0		5010487	1					
ANR	5012367	IfStatement	if ( big_endian )		5010487	1					
ANR	5012368	Condition	big_endian	452:9:10663:10672	5010487	0	True				
ANR	5012369	Identifier	big_endian		5010487	0					
ANR	5012370	CompoundStatement		317:21:8032:8032	5010487	1					
ANR	5012371	ExpressionStatement	swap = off & 0xffff	453:6:10683:10702	5010487	0	True				
ANR	5012372	AssignmentExpression	swap = off & 0xffff		5010487	0		=			
ANR	5012373	Identifier	swap		5010487	0					
ANR	5012374	BitAndExpression	off & 0xffff		5010487	1		&			
ANR	5012375	Identifier	off		5010487	0					
ANR	5012376	PrimaryExpression	0xffff		5010487	1					
ANR	5012377	ElseStatement	else		5010487	0					
ANR	5012378	CompoundStatement		319:12:8073:8073	5010487	0					
ANR	5012379	IfStatement	if ( off >> 32 )		5010487	0					
ANR	5012380	Condition	off >> 32	455:10:10728:10736	5010487	0	True				
ANR	5012381	ShiftExpression	off >> 32		5010487	0		>>			
ANR	5012382	Identifier	off		5010487	0					
ANR	5012383	PrimaryExpression	32		5010487	1					
ANR	5012384	CompoundStatement		320:21:8096:8096	5010487	1					
ANR	5012385	ExpressionStatement	"r_mem_swapendian ( ( ut8 * ) & swap , ( const ut8 * ) & off , sizeof ( off ) )"	456:7:10748:10810	5010487	0	True				
ANR	5012386	CallExpression	"r_mem_swapendian ( ( ut8 * ) & swap , ( const ut8 * ) & off , sizeof ( off ) )"		5010487	0					
ANR	5012387	Callee	r_mem_swapendian		5010487	0					
ANR	5012388	Identifier	r_mem_swapendian		5010487	0					
ANR	5012389	ArgumentList	( ut8 * ) & swap		5010487	1					
ANR	5012390	Argument	( ut8 * ) & swap		5010487	0					
ANR	5012391	CastExpression	( ut8 * ) & swap		5010487	0					
ANR	5012392	CastTarget	ut8 *		5010487	0					
ANR	5012393	UnaryOperationExpression	& swap		5010487	1					
ANR	5012394	UnaryOperator	&		5010487	0					
ANR	5012395	Identifier	swap		5010487	1					
ANR	5012396	Argument	( const ut8 * ) & off		5010487	1					
ANR	5012397	CastExpression	( const ut8 * ) & off		5010487	0					
ANR	5012398	CastTarget	const ut8 *		5010487	0					
ANR	5012399	UnaryOperationExpression	& off		5010487	1					
ANR	5012400	UnaryOperator	&		5010487	0					
ANR	5012401	Identifier	off		5010487	1					
ANR	5012402	Argument	sizeof ( off )		5010487	2					
ANR	5012403	SizeofExpression	sizeof ( off )		5010487	0					
ANR	5012404	Sizeof	sizeof		5010487	0					
ANR	5012405	SizeofOperand	off		5010487	1					
ANR	5012406	ElseStatement	else		5010487	0					
ANR	5012407	IfStatement	if ( off >> 16 )		5010487	0					
ANR	5012408	Condition	off >> 16	457:17:10829:10837	5010487	0	True				
ANR	5012409	ShiftExpression	off >> 16		5010487	0		>>			
ANR	5012410	Identifier	off		5010487	0					
ANR	5012411	PrimaryExpression	16		5010487	1					
ANR	5012412	CompoundStatement		323:7:8206:8219	5010487	1					
ANR	5012413	IdentifierDeclStatement	ut32 port = 0 ;	458:7:10849:10862	5010487	0	True				
ANR	5012414	IdentifierDecl	port = 0		5010487	0					
ANR	5012415	IdentifierDeclType	ut32		5010487	0					
ANR	5012416	Identifier	port		5010487	1					
ANR	5012417	AssignmentExpression	port = 0		5010487	2		=			
ANR	5012418	Identifier	port		5010487	0					
ANR	5012419	PrimaryExpression	0		5010487	1					
ANR	5012420	ExpressionStatement	"r_mem_swapendian ( ( ut8 * ) & port , ( const ut8 * ) & off , sizeof ( port ) )"	459:7:10871:10934	5010487	1	True				
ANR	5012421	CallExpression	"r_mem_swapendian ( ( ut8 * ) & port , ( const ut8 * ) & off , sizeof ( port ) )"		5010487	0					
ANR	5012422	Callee	r_mem_swapendian		5010487	0					
ANR	5012423	Identifier	r_mem_swapendian		5010487	0					
ANR	5012424	ArgumentList	( ut8 * ) & port		5010487	1					
ANR	5012425	Argument	( ut8 * ) & port		5010487	0					
ANR	5012426	CastExpression	( ut8 * ) & port		5010487	0					
ANR	5012427	CastTarget	ut8 *		5010487	0					
ANR	5012428	UnaryOperationExpression	& port		5010487	1					
ANR	5012429	UnaryOperator	&		5010487	0					
ANR	5012430	Identifier	port		5010487	1					
ANR	5012431	Argument	( const ut8 * ) & off		5010487	1					
ANR	5012432	CastExpression	( const ut8 * ) & off		5010487	0					
ANR	5012433	CastTarget	const ut8 *		5010487	0					
ANR	5012434	UnaryOperationExpression	& off		5010487	1					
ANR	5012435	UnaryOperator	&		5010487	0					
ANR	5012436	Identifier	off		5010487	1					
ANR	5012437	Argument	sizeof ( port )		5010487	2					
ANR	5012438	SizeofExpression	sizeof ( port )		5010487	0					
ANR	5012439	Sizeof	sizeof		5010487	0					
ANR	5012440	SizeofOperand	port		5010487	1					
ANR	5012441	ExpressionStatement	swap = port	460:7:10943:10954	5010487	2	True				
ANR	5012442	AssignmentExpression	swap = port		5010487	0		=			
ANR	5012443	Identifier	swap		5010487	0					
ANR	5012444	Identifier	port		5010487	1					
ANR	5012445	ElseStatement	else		5010487	0					
ANR	5012446	CompoundStatement		327:7:8335:8348	5010487	0					
ANR	5012447	IdentifierDeclStatement	ut16 port = 0 ;	462:7:10978:10991	5010487	0	True				
ANR	5012448	IdentifierDecl	port = 0		5010487	0					
ANR	5012449	IdentifierDeclType	ut16		5010487	0					
ANR	5012450	Identifier	port		5010487	1					
ANR	5012451	AssignmentExpression	port = 0		5010487	2		=			
ANR	5012452	Identifier	port		5010487	0					
ANR	5012453	PrimaryExpression	0		5010487	1					
ANR	5012454	ExpressionStatement	"r_mem_swapendian ( ( ut8 * ) & port , ( const ut8 * ) & off , sizeof ( port ) )"	463:7:11000:11063	5010487	1	True				
ANR	5012455	CallExpression	"r_mem_swapendian ( ( ut8 * ) & port , ( const ut8 * ) & off , sizeof ( port ) )"		5010487	0					
ANR	5012456	Callee	r_mem_swapendian		5010487	0					
ANR	5012457	Identifier	r_mem_swapendian		5010487	0					
ANR	5012458	ArgumentList	( ut8 * ) & port		5010487	1					
ANR	5012459	Argument	( ut8 * ) & port		5010487	0					
ANR	5012460	CastExpression	( ut8 * ) & port		5010487	0					
ANR	5012461	CastTarget	ut8 *		5010487	0					
ANR	5012462	UnaryOperationExpression	& port		5010487	1					
ANR	5012463	UnaryOperator	&		5010487	0					
ANR	5012464	Identifier	port		5010487	1					
ANR	5012465	Argument	( const ut8 * ) & off		5010487	1					
ANR	5012466	CastExpression	( const ut8 * ) & off		5010487	0					
ANR	5012467	CastTarget	const ut8 *		5010487	0					
ANR	5012468	UnaryOperationExpression	& off		5010487	1					
ANR	5012469	UnaryOperator	&		5010487	0					
ANR	5012470	Identifier	off		5010487	1					
ANR	5012471	Argument	sizeof ( port )		5010487	2					
ANR	5012472	SizeofExpression	sizeof ( port )		5010487	0					
ANR	5012473	Sizeof	sizeof		5010487	0					
ANR	5012474	SizeofOperand	port		5010487	1					
ANR	5012475	ExpressionStatement	swap = port	464:7:11072:11083	5010487	2	True				
ANR	5012476	AssignmentExpression	swap = port		5010487	0		=			
ANR	5012477	Identifier	swap		5010487	0					
ANR	5012478	Identifier	port		5010487	1					
ANR	5012479	ExpressionStatement	"snprintf ( num , sizeof ( num ) , ""htons (%d)"" , ( int ) ( swap & 0xFFFF ) )"	467:5:11105:11169	5010487	2	True				
ANR	5012480	CallExpression	"snprintf ( num , sizeof ( num ) , ""htons (%d)"" , ( int ) ( swap & 0xFFFF ) )"		5010487	0					
ANR	5012481	Callee	snprintf		5010487	0					
ANR	5012482	Identifier	snprintf		5010487	0					
ANR	5012483	ArgumentList	num		5010487	1					
ANR	5012484	Argument	num		5010487	0					
ANR	5012485	Identifier	num		5010487	0					
ANR	5012486	Argument	sizeof ( num )		5010487	1					
ANR	5012487	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012488	Sizeof	sizeof		5010487	0					
ANR	5012489	SizeofOperand	num		5010487	1					
ANR	5012490	Argument	"""htons (%d)"""		5010487	2					
ANR	5012491	PrimaryExpression	"""htons (%d)"""		5010487	0					
ANR	5012492	Argument	( int ) ( swap & 0xFFFF )		5010487	3					
ANR	5012493	CastExpression	( int ) ( swap & 0xFFFF )		5010487	0					
ANR	5012494	CastTarget	int		5010487	0					
ANR	5012495	BitAndExpression	swap & 0xFFFF		5010487	1		&			
ANR	5012496	Identifier	swap		5010487	0					
ANR	5012497	PrimaryExpression	0xFFFF		5010487	1					
ANR	5012498	BreakStatement	break ;	469:4:11181:11186	5010487	20	True				
ANR	5012499	Label	case 8 :	470:3:11191:11197	5010487	21	True				
ANR	5012500	ExpressionStatement	"snprintf ( num , sizeof ( num ) , ""0%o"" , ( int ) off )"	471:4:11203:11248	5010487	22	True				
ANR	5012501	CallExpression	"snprintf ( num , sizeof ( num ) , ""0%o"" , ( int ) off )"		5010487	0					
ANR	5012502	Callee	snprintf		5010487	0					
ANR	5012503	Identifier	snprintf		5010487	0					
ANR	5012504	ArgumentList	num		5010487	1					
ANR	5012505	Argument	num		5010487	0					
ANR	5012506	Identifier	num		5010487	0					
ANR	5012507	Argument	sizeof ( num )		5010487	1					
ANR	5012508	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012509	Sizeof	sizeof		5010487	0					
ANR	5012510	SizeofOperand	num		5010487	1					
ANR	5012511	Argument	"""0%o"""		5010487	2					
ANR	5012512	PrimaryExpression	"""0%o"""		5010487	0					
ANR	5012513	Argument	( int ) off		5010487	3					
ANR	5012514	CastExpression	( int ) off		5010487	0					
ANR	5012515	CastTarget	int		5010487	0					
ANR	5012516	Identifier	off		5010487	1					
ANR	5012517	BreakStatement	break ;	472:4:11254:11259	5010487	23	True				
ANR	5012518	Label	case 10 :	473:3:11264:11271	5010487	24	True				
ANR	5012519	Statement	snprintf	474:4:11277:11284	5010487	25	True				
ANR	5012520	Statement	(	474:13:11286:11286	5010487	26	True				
ANR	5012521	Statement	num	474:14:11287:11289	5010487	27	True				
ANR	5012522	Statement	","	474:17:11290:11290	5010487	28	True				
ANR	5012523	Statement	sizeof	474:19:11292:11297	5010487	29	True				
ANR	5012524	Statement	(	474:26:11299:11299	5010487	30	True				
ANR	5012525	Statement	num	474:27:11300:11302	5010487	31	True				
ANR	5012526	Statement	)	474:30:11303:11303	5010487	32	True				
ANR	5012527	Statement	","	474:31:11304:11304	5010487	33	True				
ANR	5012528	Statement	"""%"""	474:33:11306:11308	5010487	34	True				
ANR	5012529	Statement	PFMT64d	474:37:11310:11316	5010487	35	True				
ANR	5012530	Statement	","	474:44:11317:11317	5010487	36	True				
ANR	5012531	Statement	(	474:46:11319:11319	5010487	37	True				
ANR	5012532	Statement	st64	474:47:11320:11323	5010487	38	True				
ANR	5012533	Statement	)	474:51:11324:11324	5010487	39	True				
ANR	5012534	Statement	off	474:52:11325:11327	5010487	40	True				
ANR	5012535	Statement	)	474:55:11328:11328	5010487	41	True				
ANR	5012536	ExpressionStatement		474:56:11329:11329	5010487	42	True				
ANR	5012537	BreakStatement	break ;	475:4:11335:11340	5010487	43	True				
ANR	5012538	Label	case 32 :	476:3:11345:11352	5010487	44	True				
ANR	5012539	CompoundStatement		344:5:8744:8765	5010487	45					
ANR	5012540	IdentifierDeclStatement	ut32 ip32 = off ;	478:5:11365:11380	5010487	0	True				
ANR	5012541	IdentifierDecl	ip32 = off		5010487	0					
ANR	5012542	IdentifierDeclType	ut32		5010487	0					
ANR	5012543	Identifier	ip32		5010487	1					
ANR	5012544	AssignmentExpression	ip32 = off		5010487	2		=			
ANR	5012545	Identifier	off		5010487	0					
ANR	5012546	Identifier	off		5010487	1					
ANR	5012547	IdentifierDeclStatement	ut8 * ip = ( ut8 * ) & ip32 ;	479:5:11387:11408	5010487	1	True				
ANR	5012548	IdentifierDecl	* ip = ( ut8 * ) & ip32		5010487	0					
ANR	5012549	IdentifierDeclType	ut8 *		5010487	0					
ANR	5012550	Identifier	ip		5010487	1					
ANR	5012551	AssignmentExpression	* ip = ( ut8 * ) & ip32		5010487	2		=			
ANR	5012552	Identifier	ip		5010487	0					
ANR	5012553	CastExpression	( ut8 * ) & ip32		5010487	1					
ANR	5012554	CastTarget	ut8 *		5010487	0					
ANR	5012555	UnaryOperationExpression	& ip32		5010487	1					
ANR	5012556	UnaryOperator	&		5010487	0					
ANR	5012557	Identifier	ip32		5010487	1					
ANR	5012558	ExpressionStatement	"snprintf ( num , sizeof ( num ) , ""%d.%d.%d.%d"" , ip [ 0 ] , ip [ 1 ] , ip [ 2 ] , ip [ 3 ] )"	480:5:11415:11486	5010487	2	True				
ANR	5012559	CallExpression	"snprintf ( num , sizeof ( num ) , ""%d.%d.%d.%d"" , ip [ 0 ] , ip [ 1 ] , ip [ 2 ] , ip [ 3 ] )"		5010487	0					
ANR	5012560	Callee	snprintf		5010487	0					
ANR	5012561	Identifier	snprintf		5010487	0					
ANR	5012562	ArgumentList	num		5010487	1					
ANR	5012563	Argument	num		5010487	0					
ANR	5012564	Identifier	num		5010487	0					
ANR	5012565	Argument	sizeof ( num )		5010487	1					
ANR	5012566	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012567	Sizeof	sizeof		5010487	0					
ANR	5012568	SizeofOperand	num		5010487	1					
ANR	5012569	Argument	"""%d.%d.%d.%d"""		5010487	2					
ANR	5012570	PrimaryExpression	"""%d.%d.%d.%d"""		5010487	0					
ANR	5012571	Argument	ip [ 0 ]		5010487	3					
ANR	5012572	ArrayIndexing	ip [ 0 ]		5010487	0					
ANR	5012573	Identifier	ip		5010487	0					
ANR	5012574	PrimaryExpression	0		5010487	1					
ANR	5012575	Argument	ip [ 1 ]		5010487	4					
ANR	5012576	ArrayIndexing	ip [ 1 ]		5010487	0					
ANR	5012577	Identifier	ip		5010487	0					
ANR	5012578	PrimaryExpression	1		5010487	1					
ANR	5012579	Argument	ip [ 2 ]		5010487	5					
ANR	5012580	ArrayIndexing	ip [ 2 ]		5010487	0					
ANR	5012581	Identifier	ip		5010487	0					
ANR	5012582	PrimaryExpression	2		5010487	1					
ANR	5012583	Argument	ip [ 3 ]		5010487	6					
ANR	5012584	ArrayIndexing	ip [ 3 ]		5010487	0					
ANR	5012585	Identifier	ip		5010487	0					
ANR	5012586	PrimaryExpression	3		5010487	1					
ANR	5012587	BreakStatement	break ;	482:4:11498:11503	5010487	46	True				
ANR	5012588	Label	case 80 :	483:3:11508:11515	5010487	47	True				
ANR	5012589	IfStatement	if ( p && p -> analb . anal && p -> analb . anal -> syscall )		5010487	48					
ANR	5012590	Condition	p && p -> analb . anal && p -> analb . anal -> syscall	484:8:11525:11568	5010487	0	True				
ANR	5012591	AndExpression	p && p -> analb . anal && p -> analb . anal -> syscall		5010487	0		&&			
ANR	5012592	Identifier	p		5010487	0					
ANR	5012593	AndExpression	p -> analb . anal && p -> analb . anal -> syscall		5010487	1		&&			
ANR	5012594	MemberAccess	p -> analb . anal		5010487	0					
ANR	5012595	PtrMemberAccess	p -> analb		5010487	0					
ANR	5012596	Identifier	p		5010487	0					
ANR	5012597	Identifier	analb		5010487	1					
ANR	5012598	Identifier	anal		5010487	1					
ANR	5012599	PtrMemberAccess	p -> analb . anal -> syscall		5010487	1					
ANR	5012600	MemberAccess	p -> analb . anal		5010487	0					
ANR	5012601	PtrMemberAccess	p -> analb		5010487	0					
ANR	5012602	Identifier	p		5010487	0					
ANR	5012603	Identifier	analb		5010487	1					
ANR	5012604	Identifier	anal		5010487	1					
ANR	5012605	Identifier	syscall		5010487	1					
ANR	5012606	CompoundStatement		350:5:8935:8951	5010487	1					
ANR	5012607	IdentifierDeclStatement	RSyscallItem * si ;	485:5:11578:11594	5010487	0	True				
ANR	5012608	IdentifierDecl	* si		5010487	0					
ANR	5012609	IdentifierDeclType	RSyscallItem *		5010487	0					
ANR	5012610	Identifier	si		5010487	1					
ANR	5012611	ExpressionStatement	"si = r_syscall_get ( p -> analb . anal -> syscall , off , - 1 )"	486:5:11601:11653	5010487	1	True				
ANR	5012612	AssignmentExpression	"si = r_syscall_get ( p -> analb . anal -> syscall , off , - 1 )"		5010487	0		=			
ANR	5012613	Identifier	si		5010487	0					
ANR	5012614	CallExpression	"r_syscall_get ( p -> analb . anal -> syscall , off , - 1 )"		5010487	1					
ANR	5012615	Callee	r_syscall_get		5010487	0					
ANR	5012616	Identifier	r_syscall_get		5010487	0					
ANR	5012617	ArgumentList	p -> analb . anal -> syscall		5010487	1					
ANR	5012618	Argument	p -> analb . anal -> syscall		5010487	0					
ANR	5012619	PtrMemberAccess	p -> analb . anal -> syscall		5010487	0					
ANR	5012620	MemberAccess	p -> analb . anal		5010487	0					
ANR	5012621	PtrMemberAccess	p -> analb		5010487	0					
ANR	5012622	Identifier	p		5010487	0					
ANR	5012623	Identifier	analb		5010487	1					
ANR	5012624	Identifier	anal		5010487	1					
ANR	5012625	Identifier	syscall		5010487	1					
ANR	5012626	Argument	off		5010487	1					
ANR	5012627	Identifier	off		5010487	0					
ANR	5012628	Argument	- 1		5010487	2					
ANR	5012629	UnaryOperationExpression	- 1		5010487	0					
ANR	5012630	UnaryOperator	-		5010487	0					
ANR	5012631	PrimaryExpression	1		5010487	1					
ANR	5012632	IfStatement	if ( si )		5010487	2					
ANR	5012633	Condition	si	487:9:11664:11665	5010487	0	True				
ANR	5012634	Identifier	si		5010487	0					
ANR	5012635	CompoundStatement		352:13:9025:9025	5010487	1					
ANR	5012636	ExpressionStatement	"snprintf ( num , sizeof ( num ) , ""%s()"" , si -> name )"	488:6:11676:11722	5010487	0	True				
ANR	5012637	CallExpression	"snprintf ( num , sizeof ( num ) , ""%s()"" , si -> name )"		5010487	0					
ANR	5012638	Callee	snprintf		5010487	0					
ANR	5012639	Identifier	snprintf		5010487	0					
ANR	5012640	ArgumentList	num		5010487	1					
ANR	5012641	Argument	num		5010487	0					
ANR	5012642	Identifier	num		5010487	0					
ANR	5012643	Argument	sizeof ( num )		5010487	1					
ANR	5012644	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012645	Sizeof	sizeof		5010487	0					
ANR	5012646	SizeofOperand	num		5010487	1					
ANR	5012647	Argument	"""%s()"""		5010487	2					
ANR	5012648	PrimaryExpression	"""%s()"""		5010487	0					
ANR	5012649	Argument	si -> name		5010487	3					
ANR	5012650	PtrMemberAccess	si -> name		5010487	0					
ANR	5012651	Identifier	si		5010487	0					
ANR	5012652	Identifier	name		5010487	1					
ANR	5012653	ElseStatement	else		5010487	0					
ANR	5012654	CompoundStatement		354:12:9093:9093	5010487	0					
ANR	5012655	ExpressionStatement	"snprintf ( num , sizeof ( num ) , ""unknown()"" )"	490:6:11744:11785	5010487	0	True				
ANR	5012656	CallExpression	"snprintf ( num , sizeof ( num ) , ""unknown()"" )"		5010487	0					
ANR	5012657	Callee	snprintf		5010487	0					
ANR	5012658	Identifier	snprintf		5010487	0					
ANR	5012659	ArgumentList	num		5010487	1					
ANR	5012660	Argument	num		5010487	0					
ANR	5012661	Identifier	num		5010487	0					
ANR	5012662	Argument	sizeof ( num )		5010487	1					
ANR	5012663	SizeofExpression	sizeof ( num )		5010487	0					
ANR	5012664	Sizeof	sizeof		5010487	0					
ANR	5012665	SizeofOperand	num		5010487	1					
ANR	5012666	Argument	"""unknown()"""		5010487	2					
ANR	5012667	PrimaryExpression	"""unknown()"""		5010487	0					
ANR	5012668	BreakStatement	break ;	493:4:11804:11809	5010487	49	True				
ANR	5012669	Label	case 16 :	494:3:11814:11821	5010487	50	True				
ANR	5012670	Label	default :	496:3:11847:11854	5010487	51	True				
ANR	5012671	Identifier	default		5010487	0					
ANR	5012672	Statement	snprintf	497:4:11860:11867	5010487	52	True				
ANR	5012673	Statement	(	497:13:11869:11869	5010487	53	True				
ANR	5012674	Statement	num	497:14:11870:11872	5010487	54	True				
ANR	5012675	Statement	","	497:17:11873:11873	5010487	55	True				
ANR	5012676	Statement	sizeof	497:19:11875:11880	5010487	56	True				
ANR	5012677	Statement	(	497:26:11882:11882	5010487	57	True				
ANR	5012678	Statement	num	497:27:11883:11885	5010487	58	True				
ANR	5012679	Statement	)	497:30:11886:11886	5010487	59	True				
ANR	5012680	Statement	","	497:31:11887:11887	5010487	60	True				
ANR	5012681	Statement	"""0x%"""	497:33:11889:11893	5010487	61	True				
ANR	5012682	Statement	PFMT64x	497:38:11894:11900	5010487	62	True				
ANR	5012683	Statement	","	497:45:11901:11901	5010487	63	True				
ANR	5012684	Statement	(	497:47:11903:11903	5010487	64	True				
ANR	5012685	Statement	ut64	497:48:11904:11907	5010487	65	True				
ANR	5012686	Statement	)	497:52:11908:11908	5010487	66	True				
ANR	5012687	Statement	off	497:54:11910:11912	5010487	67	True				
ANR	5012688	Statement	)	497:57:11913:11913	5010487	68	True				
ANR	5012689	ExpressionStatement		497:58:11914:11914	5010487	69	True				
ANR	5012690	BreakStatement	break ;	498:4:11920:11925	5010487	70	True				
ANR	5012691	ExpressionStatement	* ptr = 0	500:3:11935:11943	5010487	13	True				
ANR	5012692	AssignmentExpression	* ptr = 0		5010487	0		=			
ANR	5012693	UnaryOperationExpression	* ptr		5010487	0					
ANR	5012694	UnaryOperator	*		5010487	0					
ANR	5012695	Identifier	ptr		5010487	1					
ANR	5012696	PrimaryExpression	0		5010487	1					
ANR	5012697	ExpressionStatement	"snprintf ( str , len , ""%s%s%s"" , data , num , ( ptr != ptr2 ) ? ptr2 : """" )"	501:3:11948:12013	5010487	14	True				
ANR	5012698	CallExpression	"snprintf ( str , len , ""%s%s%s"" , data , num , ( ptr != ptr2 ) ? ptr2 : """" )"		5010487	0					
ANR	5012699	Callee	snprintf		5010487	0					
ANR	5012700	Identifier	snprintf		5010487	0					
ANR	5012701	ArgumentList	str		5010487	1					
ANR	5012702	Argument	str		5010487	0					
ANR	5012703	Identifier	str		5010487	0					
ANR	5012704	Argument	len		5010487	1					
ANR	5012705	Identifier	len		5010487	0					
ANR	5012706	Argument	"""%s%s%s"""		5010487	2					
ANR	5012707	PrimaryExpression	"""%s%s%s"""		5010487	0					
ANR	5012708	Argument	data		5010487	3					
ANR	5012709	Identifier	data		5010487	0					
ANR	5012710	Argument	num		5010487	4					
ANR	5012711	Identifier	num		5010487	0					
ANR	5012712	Argument	"( ptr != ptr2 ) ? ptr2 : """""		5010487	5					
ANR	5012713	ConditionalExpression	"( ptr != ptr2 ) ? ptr2 : """""		5010487	0					
ANR	5012714	Condition	ptr != ptr2		5010487	0					
ANR	5012715	EqualityExpression	ptr != ptr2		5010487	0		!=			
ANR	5012716	Identifier	ptr		5010487	0					
ANR	5012717	Identifier	ptr2		5010487	1					
ANR	5012718	Identifier	ptr2		5010487	1					
ANR	5012719	PrimaryExpression	""""""		5010487	2					
ANR	5012720	ReturnStatement	return true ;	502:3:12018:12029	5010487	15	True				
ANR	5012721	Identifier	true		5010487	0					
ANR	5012722	ExpressionStatement	ptr = ptr2	504:2:12037:12047	5010487	5	True				
ANR	5012723	AssignmentExpression	ptr = ptr2		5010487	0		=			
ANR	5012724	Identifier	ptr		5010487	0					
ANR	5012725	Identifier	ptr2		5010487	1					
ANR	5012726	IfStatement	if ( data != str )		5010487	15					
ANR	5012727	Condition	data != str	506:5:12057:12067	5010487	0	True				
ANR	5012728	EqualityExpression	data != str		5010487	0		!=			
ANR	5012729	Identifier	data		5010487	0					
ANR	5012730	Identifier	str		5010487	1					
ANR	5012731	CompoundStatement		371:18:9427:9427	5010487	1					
ANR	5012732	ExpressionStatement	"strncpy ( str , data , len )"	507:2:12074:12098	5010487	0	True				
ANR	5012733	CallExpression	"strncpy ( str , data , len )"		5010487	0					
ANR	5012734	Callee	strncpy		5010487	0					
ANR	5012735	Identifier	strncpy		5010487	0					
ANR	5012736	ArgumentList	str		5010487	1					
ANR	5012737	Argument	str		5010487	0					
ANR	5012738	Identifier	str		5010487	0					
ANR	5012739	Argument	data		5010487	1					
ANR	5012740	Identifier	data		5010487	0					
ANR	5012741	Argument	len		5010487	2					
ANR	5012742	Identifier	len		5010487	0					
ANR	5012743	ElseStatement	else		5010487	0					
ANR	5012744	CompoundStatement		373:8:9465:9465	5010487	0					
ANR	5012745	ExpressionStatement	"eprintf ( ""Invalid str/data inputs\\n"" )"	509:2:12112:12149	5010487	0	True				
ANR	5012746	CallExpression	"eprintf ( ""Invalid str/data inputs\\n"" )"		5010487	0					
ANR	5012747	Callee	eprintf		5010487	0					
ANR	5012748	Identifier	eprintf		5010487	0					
ANR	5012749	ArgumentList	"""Invalid str/data inputs\\n"""		5010487	1					
ANR	5012750	Argument	"""Invalid str/data inputs\\n"""		5010487	0					
ANR	5012751	PrimaryExpression	"""Invalid str/data inputs\\n"""		5010487	0					
ANR	5012752	ReturnStatement	return false ;	511:1:12155:12167	5010487	16	True				
ANR	5012753	Identifier	false		5010487	0					
ANR	5012754	ReturnType	static bool		5010487	1					
ANR	5012755	Identifier	filter		5010487	2					
ANR	5012756	ParameterList	"RParse * p , ut64 addr , RFlag * f , RAnalHint * hint , char * data , char * str , int len , bool big_endian"		5010487	3					
ANR	5012757	Parameter	RParse * p	136:19:2544:2552	5010487	0	True				
ANR	5012758	ParameterType	RParse *		5010487	0					
ANR	5012759	Identifier	p		5010487	1					
ANR	5012760	Parameter	ut64 addr	136:30:2555:2563	5010487	1	True				
ANR	5012761	ParameterType	ut64		5010487	0					
ANR	5012762	Identifier	addr		5010487	1					
ANR	5012763	Parameter	RFlag * f	136:41:2566:2573	5010487	2	True				
ANR	5012764	ParameterType	RFlag *		5010487	0					
ANR	5012765	Identifier	f		5010487	1					
ANR	5012766	Parameter	RAnalHint * hint	136:51:2576:2590	5010487	3	True				
ANR	5012767	ParameterType	RAnalHint *		5010487	0					
ANR	5012768	Identifier	hint		5010487	1					
ANR	5012769	Parameter	char * data	136:68:2593:2602	5010487	4	True				
ANR	5012770	ParameterType	char *		5010487	0					
ANR	5012771	Identifier	data		5010487	1					
ANR	5012772	Parameter	char * str	136:80:2605:2613	5010487	5	True				
ANR	5012773	ParameterType	char *		5010487	0					
ANR	5012774	Identifier	str		5010487	1					
ANR	5012775	Parameter	int len	136:91:2616:2622	5010487	6	True				
ANR	5012776	ParameterType	int		5010487	0					
ANR	5012777	Identifier	len		5010487	1					
ANR	5012778	Parameter	bool big_endian	136:100:2625:2639	5010487	7	True				
ANR	5012779	ParameterType	bool		5010487	0					
ANR	5012780	Identifier	big_endian		5010487	1					
ANR	5012781	CFGEntryNode	ENTRY		5010487		True				
ANR	5012782	CFGExitNode	EXIT		5010487		True				
ANR	5012783	Symbol	mod		5010487						
ANR	5012784	Symbol	hint -> offset		5010487						
ANR	5012785	Symbol	* fcn		5010487						
ANR	5012786	Symbol	lea		5010487						
ANR	5012787	Symbol	p -> notin_flagspace		5010487						
ANR	5012788	Symbol	strchr		5010487						
ANR	5012789	Symbol	strcpy		5010487						
ANR	5012790	Symbol	strncmp		5010487						
ANR	5012791	Symbol	len		5010487						
ANR	5012792	Symbol	ptr_end		5010487						
ANR	5012793	Symbol	copied_len		5010487						
ANR	5012794	Symbol	tmp		5010487						
ANR	5012795	Symbol	p -> regsub		5010487						
ANR	5012796	Symbol	p -> flagspace		5010487						
ANR	5012797	Symbol	llen		5010487						
ANR	5012798	Symbol	r_flag_get_i		5010487						
ANR	5012799	Symbol	* p -> cur		5010487						
ANR	5012800	Symbol	dlen		5010487						
ANR	5012801	Symbol	* si		5010487						
ANR	5012802	Symbol	* hint		5010487						
ANR	5012803	Symbol	pnum		5010487						
ANR	5012804	Symbol	lower		5010487						
ANR	5012805	Symbol	ip		5010487						
ANR	5012806	Symbol	is_hex		5010487						
ANR	5012807	Symbol	p -> analb . get_fcn_in		5010487						
ANR	5012808	Symbol	str		5010487						
ANR	5012809	Symbol	ptr2		5010487						
ANR	5012810	Symbol	dptr_end		5010487						
ANR	5012811	Symbol	p -> relsub_addr		5010487						
ANR	5012812	Symbol	p -> analb . anal -> syscall		5010487						
ANR	5012813	Symbol	ansi_found		5010487						
ANR	5012814	Symbol	* flag		5010487						
ANR	5012815	Symbol	* tmp		5010487						
ANR	5012816	Symbol	r_num_tail_base		5010487						
ANR	5012817	Symbol	flag		5010487						
ANR	5012818	Symbol	r_syscall_get		5010487						
ANR	5012819	Symbol	Color_RESET		5010487						
ANR	5012820	Symbol	& ip32		5010487						
ANR	5012821	Symbol	fcn		5010487						
ANR	5012822	Symbol	& off		5010487						
ANR	5012823	Symbol	p -> analb . anal -> reg		5010487						
ANR	5012824	Symbol	si		5010487						
ANR	5012825	Symbol	pnumleft		5010487						
ANR	5012826	Symbol	p -> analb . anal		5010487						
ANR	5012827	Symbol	* * p		5010487						
ANR	5012828	Symbol	arm		5010487						
ANR	5012829	Symbol	* p -> analb . anal		5010487						
ANR	5012830	Symbol	hint -> immbase		5010487						
ANR	5012831	Symbol	r_str_startswith		5010487						
ANR	5012832	Symbol	a		5010487						
ANR	5012833	Symbol	ch		5010487						
ANR	5012834	Symbol	f		5010487						
ANR	5012835	Symbol	* p -> analb		5010487						
ANR	5012836	Symbol	tail		5010487						
ANR	5012837	Symbol	sz		5010487						
ANR	5012838	Symbol	flag -> space		5010487						
ANR	5012839	Symbol	* ptr_end		5010487						
ANR	5012840	Symbol	m		5010487						
ANR	5012841	Symbol	off		5010487						
ANR	5012842	Symbol	token		5010487						
ANR	5012843	Symbol	IS_DIGIT		5010487						
ANR	5012844	Symbol	p		5010487						
ANR	5012845	Symbol	findNextNumber		5010487						
ANR	5012846	Symbol	big_endian		5010487						
ANR	5012847	Symbol	ptr_left		5010487						
ANR	5012848	Symbol	r_str_rstr		5010487						
ANR	5012849	Symbol	x86		5010487						
ANR	5012850	Symbol	R_MAX		5010487						
ANR	5012851	Symbol	fcn -> addr		5010487						
ANR	5012852	Symbol	p -> maxflagnamelen		5010487						
ANR	5012853	Symbol	p -> cur -> name		5010487						
ANR	5012854	Symbol	* data		5010487						
ANR	5012855	Symbol	IS_SEPARATOR		5010487						
ANR	5012856	Symbol	IS_PRINTABLE		5010487						
ANR	5012857	Symbol	data		5010487						
ANR	5012858	Symbol	fcn -> name		5010487						
ANR	5012859	Symbol	immbase		5010487						
ANR	5012860	Symbol	num		5010487						
ANR	5012861	Symbol	tmp_count		5010487						
ANR	5012862	Symbol	* ptr_left		5010487						
ANR	5012863	Symbol	flag2		5010487						
ANR	5012864	Symbol	p -> label_get		5010487						
ANR	5012865	Symbol	p -> cur		5010487						
ANR	5012866	Symbol	strlen		5010487						
ANR	5012867	Symbol	remove_brackets		5010487						
ANR	5012868	Symbol	* ptr		5010487						
ANR	5012869	Symbol	doublelower		5010487						
ANR	5012870	Symbol	ptr_right		5010487						
ANR	5012871	Symbol	* ptr2		5010487						
ANR	5012872	Symbol	dptr_left		5010487						
ANR	5012873	Symbol	IS_HEXCHAR		5010487						
ANR	5012874	Symbol	& swap		5010487						
ANR	5012875	Symbol	* dptr_left		5010487						
ANR	5012876	Symbol	si -> name		5010487						
ANR	5012877	Symbol	p -> minval		5010487						
ANR	5012878	Symbol	NULL		5010487						
ANR	5012879	Symbol	* ( ptr_left - 1 )		5010487						
ANR	5012880	Symbol	swap		5010487						
ANR	5012881	Symbol	count		5010487						
ANR	5012882	Symbol	ptr_backup		5010487						
ANR	5012883	Symbol	p -> flag_get		5010487						
ANR	5012884	Symbol	f -> realnames		5010487						
ANR	5012885	Symbol	hint -> nword		5010487						
ANR	5012886	Symbol	strstr		5010487						
ANR	5012887	Symbol	port		5010487						
ANR	5012888	Symbol	hint		5010487						
ANR	5012889	Symbol	true		5010487						
ANR	5012890	Symbol	ptr_esc		5010487						
ANR	5012891	Symbol	isx86separator		5010487						
ANR	5012892	Symbol	* pnum ++		5010487						
ANR	5012893	Symbol	x1b		5010487						
ANR	5012894	Symbol	nw		5010487						
ANR	5012895	Symbol	flagname		5010487						
ANR	5012896	Symbol	r_str_newf		5010487						
ANR	5012897	Symbol	* ip		5010487						
ANR	5012898	Symbol	r_num_math		5010487						
ANR	5012899	Symbol	* ptr_esc		5010487						
ANR	5012900	Symbol	* ptr_right		5010487						
ANR	5012901	Symbol	isvalidflag		5010487						
ANR	5012902	Symbol	banned		5010487						
ANR	5012903	Symbol	addr		5010487						
ANR	5012904	Symbol	UT64_MAX		5010487						
ANR	5012905	Symbol	maxflagname		5010487						
ANR	5012906	Symbol	snprintf		5010487						
ANR	5012907	Symbol	src		5010487						
ANR	5012908	Symbol	flag -> name		5010487						
ANR	5012909	Symbol	p -> analb		5010487						
ANR	5012910	Symbol	doublecolon		5010487						
ANR	5012911	Symbol	false		5010487						
ANR	5012912	Symbol	label		5010487						
ANR	5012913	Symbol	newstr		5010487						
ANR	5012914	Symbol	ptr		5010487						
ANR	5012915	Symbol	* pnum		5010487						
ANR	5012916	Symbol	* f		5010487						
ANR	5012917	Symbol	* num		5010487						
ANR	5012918	Symbol	flag -> realname		5010487						
ANR	5012919	Symbol	p -> tailsub		5010487						
ANR	5012920	Symbol	nptr		5010487						
ANR	5012921	Symbol	* dptr_end		5010487						
ANR	5012922	Symbol	& port		5010487						
ANR	5012923	Symbol	flag_len		5010487						
ANR	5012924	Symbol	ip32		5010487						
ANR	5012925	Symbol	* p		5010487						
ANR	5012926	Symbol	strdup		5010487						
ANR	5012927	Symbol	* llen		5010487						
ANR	5012928	Function	r_parse_filter	520:0:12587:12886							
ANR	5012929	FunctionDef	"r_parse_filter (RParse * p , ut64 addr , RFlag * f , RAnalHint * hint , char * data , char * str , int len , bool big_endian)"		5012928	0					
ANR	5012930	CompoundStatement		520:124:12711:12886	5012928	0					
ANR	5012931	ExpressionStatement	"filter ( p , addr , f , hint , data , str , len , big_endian )"	521:1:12714:12767	5012928	0	True				
ANR	5012932	CallExpression	"filter ( p , addr , f , hint , data , str , len , big_endian )"		5012928	0					
ANR	5012933	Callee	filter		5012928	0					
ANR	5012934	Identifier	filter		5012928	0					
ANR	5012935	ArgumentList	p		5012928	1					
ANR	5012936	Argument	p		5012928	0					
ANR	5012937	Identifier	p		5012928	0					
ANR	5012938	Argument	addr		5012928	1					
ANR	5012939	Identifier	addr		5012928	0					
ANR	5012940	Argument	f		5012928	2					
ANR	5012941	Identifier	f		5012928	0					
ANR	5012942	Argument	hint		5012928	3					
ANR	5012943	Identifier	hint		5012928	0					
ANR	5012944	Argument	data		5012928	4					
ANR	5012945	Identifier	data		5012928	0					
ANR	5012946	Argument	str		5012928	5					
ANR	5012947	Identifier	str		5012928	0					
ANR	5012948	Argument	len		5012928	6					
ANR	5012949	Identifier	len		5012928	0					
ANR	5012950	Argument	big_endian		5012928	7					
ANR	5012951	Identifier	big_endian		5012928	0					
ANR	5012952	IfStatement	if ( p -> cur && p -> cur -> filter )		5012928	1					
ANR	5012953	Condition	p -> cur && p -> cur -> filter	522:5:12774:12797	5012928	0	True				
ANR	5012954	AndExpression	p -> cur && p -> cur -> filter		5012928	0		&&			
ANR	5012955	PtrMemberAccess	p -> cur		5012928	0					
ANR	5012956	Identifier	p		5012928	0					
ANR	5012957	Identifier	cur		5012928	1					
ANR	5012958	PtrMemberAccess	p -> cur -> filter		5012928	1					
ANR	5012959	PtrMemberAccess	p -> cur		5012928	0					
ANR	5012960	Identifier	p		5012928	0					
ANR	5012961	Identifier	cur		5012928	1					
ANR	5012962	Identifier	filter		5012928	1					
ANR	5012963	CompoundStatement		3:31:88:88	5012928	1					
ANR	5012964	ReturnStatement	"return p -> cur -> filter ( p , addr , f , data , str , len , big_endian ) ;"	523:2:12804:12866	5012928	0	True				
ANR	5012965	CallExpression	"p -> cur -> filter ( p , addr , f , data , str , len , big_endian )"		5012928	0					
ANR	5012966	Callee	p -> cur -> filter		5012928	0					
ANR	5012967	PtrMemberAccess	p -> cur -> filter		5012928	0					
ANR	5012968	PtrMemberAccess	p -> cur		5012928	0					
ANR	5012969	Identifier	p		5012928	0					
ANR	5012970	Identifier	cur		5012928	1					
ANR	5012971	Identifier	filter		5012928	1					
ANR	5012972	ArgumentList	p		5012928	1					
ANR	5012973	Argument	p		5012928	0					
ANR	5012974	Identifier	p		5012928	0					
ANR	5012975	Argument	addr		5012928	1					
ANR	5012976	Identifier	addr		5012928	0					
ANR	5012977	Argument	f		5012928	2					
ANR	5012978	Identifier	f		5012928	0					
ANR	5012979	Argument	data		5012928	3					
ANR	5012980	Identifier	data		5012928	0					
ANR	5012981	Argument	str		5012928	4					
ANR	5012982	Identifier	str		5012928	0					
ANR	5012983	Argument	len		5012928	5					
ANR	5012984	Identifier	len		5012928	0					
ANR	5012985	Argument	big_endian		5012928	6					
ANR	5012986	Identifier	big_endian		5012928	0					
ANR	5012987	ReturnStatement	return false ;	525:1:12872:12884	5012928	2	True				
ANR	5012988	Identifier	false		5012928	0					
ANR	5012989	ReturnType	R_API bool		5012928	1					
ANR	5012990	Identifier	r_parse_filter		5012928	2					
ANR	5012991	ParameterList	"RParse * p , ut64 addr , RFlag * f , RAnalHint * hint , char * data , char * str , int len , bool big_endian"		5012928	3					
ANR	5012992	Parameter	RParse * p	520:26:12613:12621	5012928	0	True				
ANR	5012993	ParameterType	RParse *		5012928	0					
ANR	5012994	Identifier	p		5012928	1					
ANR	5012995	Parameter	ut64 addr	520:37:12624:12632	5012928	1	True				
ANR	5012996	ParameterType	ut64		5012928	0					
ANR	5012997	Identifier	addr		5012928	1					
ANR	5012998	Parameter	RFlag * f	520:48:12635:12642	5012928	2	True				
ANR	5012999	ParameterType	RFlag *		5012928	0					
ANR	5013000	Identifier	f		5012928	1					
ANR	5013001	Parameter	RAnalHint * hint	520:58:12645:12659	5012928	3	True				
ANR	5013002	ParameterType	RAnalHint *		5012928	0					
ANR	5013003	Identifier	hint		5012928	1					
ANR	5013004	Parameter	char * data	520:75:12662:12671	5012928	4	True				
ANR	5013005	ParameterType	char *		5012928	0					
ANR	5013006	Identifier	data		5012928	1					
ANR	5013007	Parameter	char * str	520:87:12674:12682	5012928	5	True				
ANR	5013008	ParameterType	char *		5012928	0					
ANR	5013009	Identifier	str		5012928	1					
ANR	5013010	Parameter	int len	520:98:12685:12691	5012928	6	True				
ANR	5013011	ParameterType	int		5012928	0					
ANR	5013012	Identifier	len		5012928	1					
ANR	5013013	Parameter	bool big_endian	520:107:12694:12708	5012928	7	True				
ANR	5013014	ParameterType	bool		5012928	0					
ANR	5013015	Identifier	big_endian		5012928	1					
ANR	5013016	CFGEntryNode	ENTRY		5012928		True				
ANR	5013017	CFGExitNode	EXIT		5012928		True				
ANR	5013018	Symbol	data		5012928						
ANR	5013019	Symbol	f		5012928						
ANR	5013020	Symbol	false		5012928						
ANR	5013021	Symbol	p -> cur		5012928						
ANR	5013022	Symbol	p		5012928						
ANR	5013023	Symbol	str		5012928						
ANR	5013024	Symbol	len		5012928						
ANR	5013025	Symbol	big_endian		5012928						
ANR	5013026	Symbol	hint		5012928						
ANR	5013027	Symbol	* p		5012928						
ANR	5013028	Symbol	p -> cur -> filter		5012928						
ANR	5013029	Symbol	* * p		5012928						
ANR	5013030	Symbol	addr		5012928						
ANR	5013031	Symbol	* p -> cur		5012928						
ANR	5013032	Function	r_parse_filter_dup	529:0:12987:13268							
ANR	5013033	FunctionDef	"r_parse_filter_dup (RParse * p , ut64 addr , const char * opstr)"		5013032	0					
ANR	5013034	CompoundStatement		529:72:13059:13268	5013032	0					
ANR	5013035	IdentifierDeclStatement	const size_t out_len = 256 ;	530:1:13062:13088	5013032	0	True				
ANR	5013036	IdentifierDecl	out_len = 256		5013032	0					
ANR	5013037	IdentifierDeclType	const size_t		5013032	0					
ANR	5013038	Identifier	out_len		5013032	1					
ANR	5013039	AssignmentExpression	out_len = 256		5013032	2		=			
ANR	5013040	Identifier	out_len		5013032	0					
ANR	5013041	PrimaryExpression	256		5013032	1					
ANR	5013042	IdentifierDeclStatement	char * in = strdup ( opstr ) ;	531:1:13091:13116	5013032	1	True				
ANR	5013043	IdentifierDecl	* in = strdup ( opstr )		5013032	0					
ANR	5013044	IdentifierDeclType	char *		5013032	0					
ANR	5013045	Identifier	in		5013032	1					
ANR	5013046	AssignmentExpression	* in = strdup ( opstr )		5013032	2		=			
ANR	5013047	Identifier	in		5013032	0					
ANR	5013048	CallExpression	strdup ( opstr )		5013032	1					
ANR	5013049	Callee	strdup		5013032	0					
ANR	5013050	Identifier	strdup		5013032	0					
ANR	5013051	ArgumentList	opstr		5013032	1					
ANR	5013052	Argument	opstr		5013032	0					
ANR	5013053	Identifier	opstr		5013032	0					
ANR	5013054	IdentifierDeclStatement	"char * out = calloc ( out_len , 1 ) ;"	532:1:13119:13150	5013032	2	True				
ANR	5013055	IdentifierDecl	"* out = calloc ( out_len , 1 )"		5013032	0					
ANR	5013056	IdentifierDeclType	char *		5013032	0					
ANR	5013057	Identifier	out		5013032	1					
ANR	5013058	AssignmentExpression	"* out = calloc ( out_len , 1 )"		5013032	2		=			
ANR	5013059	Identifier	out		5013032	0					
ANR	5013060	CallExpression	"calloc ( out_len , 1 )"		5013032	1					
ANR	5013061	Callee	calloc		5013032	0					
ANR	5013062	Identifier	calloc		5013032	0					
ANR	5013063	ArgumentList	out_len		5013032	1					
ANR	5013064	Argument	out_len		5013032	0					
ANR	5013065	Identifier	out_len		5013032	0					
ANR	5013066	Argument	1		5013032	1					
ANR	5013067	PrimaryExpression	1		5013032	0					
ANR	5013068	IfStatement	"if ( ! r_parse_filter ( p , addr , NULL , NULL , in , out , out_len , false ) )"		5013032	3					
ANR	5013069	Condition	"! r_parse_filter ( p , addr , NULL , NULL , in , out , out_len , false )"	533:5:13157:13218	5013032	0	True				
ANR	5013070	UnaryOperationExpression	"! r_parse_filter ( p , addr , NULL , NULL , in , out , out_len , false )"		5013032	0					
ANR	5013071	UnaryOperator	!		5013032	0					
ANR	5013072	CallExpression	"r_parse_filter ( p , addr , NULL , NULL , in , out , out_len , false )"		5013032	1					
ANR	5013073	Callee	r_parse_filter		5013032	0					
ANR	5013074	Identifier	r_parse_filter		5013032	0					
ANR	5013075	ArgumentList	p		5013032	1					
ANR	5013076	Argument	p		5013032	0					
ANR	5013077	Identifier	p		5013032	0					
ANR	5013078	Argument	addr		5013032	1					
ANR	5013079	Identifier	addr		5013032	0					
ANR	5013080	Argument	NULL		5013032	2					
ANR	5013081	Identifier	NULL		5013032	0					
ANR	5013082	Argument	NULL		5013032	3					
ANR	5013083	Identifier	NULL		5013032	0					
ANR	5013084	Argument	in		5013032	4					
ANR	5013085	Identifier	in		5013032	0					
ANR	5013086	Argument	out		5013032	5					
ANR	5013087	Identifier	out		5013032	0					
ANR	5013088	Argument	out_len		5013032	6					
ANR	5013089	Identifier	out_len		5013032	0					
ANR	5013090	Argument	false		5013032	7					
ANR	5013091	Identifier	false		5013032	0					
ANR	5013092	CompoundStatement		5:69:161:161	5013032	1					
ANR	5013093	ExpressionStatement	free ( out )	534:2:13225:13235	5013032	0	True				
ANR	5013094	CallExpression	free ( out )		5013032	0					
ANR	5013095	Callee	free		5013032	0					
ANR	5013096	Identifier	free		5013032	0					
ANR	5013097	ArgumentList	out		5013032	1					
ANR	5013098	Argument	out		5013032	0					
ANR	5013099	Identifier	out		5013032	0					
ANR	5013100	ReturnStatement	return NULL ;	535:2:13239:13250	5013032	1	True				
ANR	5013101	Identifier	NULL		5013032	0					
ANR	5013102	ReturnStatement	return out ;	537:1:13256:13266	5013032	4	True				
ANR	5013103	Identifier	out		5013032	0					
ANR	5013104	ReturnType	R_API char *		5013032	1					
ANR	5013105	Identifier	r_parse_filter_dup		5013032	2					
ANR	5013106	ParameterList	"RParse * p , ut64 addr , const char * opstr"		5013032	3					
ANR	5013107	Parameter	RParse * p	529:31:13018:13026	5013032	0	True				
ANR	5013108	ParameterType	RParse *		5013032	0					
ANR	5013109	Identifier	p		5013032	1					
ANR	5013110	Parameter	ut64 addr	529:42:13029:13037	5013032	1	True				
ANR	5013111	ParameterType	ut64		5013032	0					
ANR	5013112	Identifier	addr		5013032	1					
ANR	5013113	Parameter	const char * opstr	529:53:13040:13056	5013032	2	True				
ANR	5013114	ParameterType	const char *		5013032	0					
ANR	5013115	Identifier	opstr		5013032	1					
ANR	5013116	CFGEntryNode	ENTRY		5013032		True				
ANR	5013117	CFGExitNode	EXIT		5013032		True				
ANR	5013118	Symbol	p		5013032						
ANR	5013119	Symbol	opstr		5013032						
ANR	5013120	Symbol	NULL		5013032						
ANR	5013121	Symbol	r_parse_filter		5013032						
ANR	5013122	Symbol	in		5013032						
ANR	5013123	Symbol	false		5013032						
ANR	5013124	Symbol	strdup		5013032						
ANR	5013125	Symbol	calloc		5013032						
ANR	5013126	Symbol	addr		5013032						
ANR	5013127	Symbol	out_len		5013032						
ANR	5013128	Symbol	out		5013032						
