command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5106486	File	data/converged/CVE-2019-16718~_radare2/libr_util_constr.c								
ANR	5106487	Function	r_constr_new	5:0:52:205							
ANR	5106488	FunctionDef	r_constr_new (int size)		5106487	0					
ANR	5106489	CompoundStatement		5:39:91:205	5106487	0					
ANR	5106490	IdentifierDeclStatement	RConstr * c = R_NEW ( RConstr ) ;	6:1:94:122	5106487	0	True				
ANR	5106491	IdentifierDecl	* c = R_NEW ( RConstr )		5106487	0					
ANR	5106492	IdentifierDeclType	RConstr *		5106487	0					
ANR	5106493	Identifier	c		5106487	1					
ANR	5106494	AssignmentExpression	* c = R_NEW ( RConstr )		5106487	2		=			
ANR	5106495	Identifier	c		5106487	0					
ANR	5106496	CallExpression	R_NEW ( RConstr )		5106487	1					
ANR	5106497	Callee	R_NEW		5106487	0					
ANR	5106498	Identifier	R_NEW		5106487	0					
ANR	5106499	ArgumentList	RConstr		5106487	1					
ANR	5106500	Argument	RConstr		5106487	0					
ANR	5106501	Identifier	RConstr		5106487	0					
ANR	5106502	ExpressionStatement	c -> l = size > 0 ? size : 1024	7:1:125:150	5106487	1	True				
ANR	5106503	AssignmentExpression	c -> l = size > 0 ? size : 1024		5106487	0		=			
ANR	5106504	PtrMemberAccess	c -> l		5106487	0					
ANR	5106505	Identifier	c		5106487	0					
ANR	5106506	Identifier	l		5106487	1					
ANR	5106507	ConditionalExpression	size > 0 ? size : 1024		5106487	1					
ANR	5106508	Condition	size > 0		5106487	0					
ANR	5106509	RelationalExpression	size > 0		5106487	0		>			
ANR	5106510	Identifier	size		5106487	0					
ANR	5106511	PrimaryExpression	0		5106487	1					
ANR	5106512	Identifier	size		5106487	1					
ANR	5106513	PrimaryExpression	1024		5106487	2					
ANR	5106514	ExpressionStatement	c -> b = malloc ( c -> l )	8:1:153:173	5106487	2	True				
ANR	5106515	AssignmentExpression	c -> b = malloc ( c -> l )		5106487	0		=			
ANR	5106516	PtrMemberAccess	c -> b		5106487	0					
ANR	5106517	Identifier	c		5106487	0					
ANR	5106518	Identifier	b		5106487	1					
ANR	5106519	CallExpression	malloc ( c -> l )		5106487	1					
ANR	5106520	Callee	malloc		5106487	0					
ANR	5106521	Identifier	malloc		5106487	0					
ANR	5106522	ArgumentList	c -> l		5106487	1					
ANR	5106523	Argument	c -> l		5106487	0					
ANR	5106524	PtrMemberAccess	c -> l		5106487	0					
ANR	5106525	Identifier	c		5106487	0					
ANR	5106526	Identifier	l		5106487	1					
ANR	5106527	ExpressionStatement	c -> i = * c -> b = 0	9:1:176:192	5106487	3	True				
ANR	5106528	AssignmentExpression	c -> i = * c -> b = 0		5106487	0		=			
ANR	5106529	PtrMemberAccess	c -> i		5106487	0					
ANR	5106530	Identifier	c		5106487	0					
ANR	5106531	Identifier	i		5106487	1					
ANR	5106532	AssignmentExpression	* c -> b = 0		5106487	1		=			
ANR	5106533	UnaryOperationExpression	* c -> b		5106487	0					
ANR	5106534	UnaryOperator	*		5106487	0					
ANR	5106535	PtrMemberAccess	c -> b		5106487	1					
ANR	5106536	Identifier	c		5106487	0					
ANR	5106537	Identifier	b		5106487	1					
ANR	5106538	PrimaryExpression	0		5106487	1					
ANR	5106539	ReturnStatement	return c ;	10:1:195:203	5106487	4	True				
ANR	5106540	Identifier	c		5106487	0					
ANR	5106541	ReturnType	R_API RConstr *		5106487	1					
ANR	5106542	Identifier	r_constr_new		5106487	2					
ANR	5106543	ParameterList	int size		5106487	3					
ANR	5106544	Parameter	int size	5:29:81:88	5106487	0	True				
ANR	5106545	ParameterType	int		5106487	0					
ANR	5106546	Identifier	size		5106487	1					
ANR	5106547	CFGEntryNode	ENTRY		5106487		True				
ANR	5106548	CFGExitNode	EXIT		5106487		True				
ANR	5106549	Symbol	malloc		5106487						
ANR	5106550	Symbol	RConstr		5106487						
ANR	5106551	Symbol	c -> l		5106487						
ANR	5106552	Symbol	c		5106487						
ANR	5106553	Symbol	size		5106487						
ANR	5106554	Symbol	* c -> b		5106487						
ANR	5106555	Symbol	c -> b		5106487						
ANR	5106556	Symbol	* * c		5106487						
ANR	5106557	Symbol	R_NEW		5106487						
ANR	5106558	Symbol	* c		5106487						
ANR	5106559	Symbol	c -> i		5106487						
ANR	5106560	Function	r_constr_free	13:0:208:273							
ANR	5106561	FunctionDef	r_constr_free (RConstr * c)		5106560	0					
ANR	5106562	CompoundStatement		13:38:246:273	5106560	0					
ANR	5106563	ExpressionStatement	free ( c -> b )	14:1:249:260	5106560	0	True				
ANR	5106564	CallExpression	free ( c -> b )		5106560	0					
ANR	5106565	Callee	free		5106560	0					
ANR	5106566	Identifier	free		5106560	0					
ANR	5106567	ArgumentList	c -> b		5106560	1					
ANR	5106568	Argument	c -> b		5106560	0					
ANR	5106569	PtrMemberAccess	c -> b		5106560	0					
ANR	5106570	Identifier	c		5106560	0					
ANR	5106571	Identifier	b		5106560	1					
ANR	5106572	ExpressionStatement	free ( c )	15:1:263:271	5106560	1	True				
ANR	5106573	CallExpression	free ( c )		5106560	0					
ANR	5106574	Callee	free		5106560	0					
ANR	5106575	Identifier	free		5106560	0					
ANR	5106576	ArgumentList	c		5106560	1					
ANR	5106577	Argument	c		5106560	0					
ANR	5106578	Identifier	c		5106560	0					
ANR	5106579	ReturnType	R_API void		5106560	1					
ANR	5106580	Identifier	r_constr_free		5106560	2					
ANR	5106581	ParameterList	RConstr * c		5106560	3					
ANR	5106582	Parameter	RConstr * c	13:26:234:243	5106560	0	True				
ANR	5106583	ParameterType	RConstr *		5106560	0					
ANR	5106584	Identifier	c		5106560	1					
ANR	5106585	CFGEntryNode	ENTRY		5106560		True				
ANR	5106586	CFGExitNode	EXIT		5106560		True				
ANR	5106587	Symbol	c		5106560						
ANR	5106588	Symbol	c -> b		5106560						
ANR	5106589	Symbol	* c		5106560						
ANR	5106590	Function	r_constr_get	18:6:282:474							
ANR	5106591	FunctionDef	"r_constr_get (RConstr * c , const char * str)"		5106590	0					
ANR	5106592	CompoundStatement		18:61:337:474	5106590	0					
ANR	5106593	IdentifierDeclStatement	"char * e = c -> b + c -> i , * p = c -> b ;"	19:1:340:370	5106590	0	True				
ANR	5106594	IdentifierDecl	* e = c -> b + c -> i		5106590	0					
ANR	5106595	IdentifierDeclType	char *		5106590	0					
ANR	5106596	Identifier	e		5106590	1					
ANR	5106597	AssignmentExpression	* e = c -> b + c -> i		5106590	2		=			
ANR	5106598	Identifier	e		5106590	0					
ANR	5106599	AdditiveExpression	c -> b + c -> i		5106590	1		+			
ANR	5106600	PtrMemberAccess	c -> b		5106590	0					
ANR	5106601	Identifier	c		5106590	0					
ANR	5106602	Identifier	b		5106590	1					
ANR	5106603	PtrMemberAccess	c -> i		5106590	1					
ANR	5106604	Identifier	c		5106590	0					
ANR	5106605	Identifier	i		5106590	1					
ANR	5106606	IdentifierDecl	* p = c -> b		5106590	1					
ANR	5106607	IdentifierDeclType	char *		5106590	0					
ANR	5106608	Identifier	p		5106590	1					
ANR	5106609	AssignmentExpression	* p = c -> b		5106590	2		=			
ANR	5106610	Identifier	p		5106590	0					
ANR	5106611	PtrMemberAccess	c -> b		5106590	1					
ANR	5106612	Identifier	c		5106590	0					
ANR	5106613	Identifier	b		5106590	1					
ANR	5106614	ForStatement	for ( p = c -> b ; p < e ; p += strlen ( p ) + 1 )		5106590	1					
ANR	5106615	ForInit	p = c -> b ;	20:6:378:386	5106590	0	True				
ANR	5106616	AssignmentExpression	p = c -> b		5106590	0		=			
ANR	5106617	Identifier	p		5106590	0					
ANR	5106618	PtrMemberAccess	c -> b		5106590	1					
ANR	5106619	Identifier	c		5106590	0					
ANR	5106620	Identifier	b		5106590	1					
ANR	5106621	Condition	p < e	20:16:388:390	5106590	1	True				
ANR	5106622	RelationalExpression	p < e		5106590	0		<			
ANR	5106623	Identifier	p		5106590	0					
ANR	5106624	Identifier	e		5106590	1					
ANR	5106625	AssignmentExpression	p += strlen ( p ) + 1	20:21:393:409	5106590	2	True	+=			
ANR	5106626	Identifier	p		5106590	0					
ANR	5106627	AdditiveExpression	strlen ( p ) + 1		5106590	1		+			
ANR	5106628	CallExpression	strlen ( p )		5106590	0					
ANR	5106629	Callee	strlen		5106590	0					
ANR	5106630	Identifier	strlen		5106590	0					
ANR	5106631	ArgumentList	p		5106590	1					
ANR	5106632	Argument	p		5106590	0					
ANR	5106633	Identifier	p		5106590	0					
ANR	5106634	PrimaryExpression	1		5106590	1					
ANR	5106635	CompoundStatement		3:40:74:74	5106590	3					
ANR	5106636	IfStatement	"if ( ! strcmp ( p , str ) )"		5106590	0					
ANR	5106637	Condition	"! strcmp ( p , str )"	21:6:420:435	5106590	0	True				
ANR	5106638	UnaryOperationExpression	"! strcmp ( p , str )"		5106590	0					
ANR	5106639	UnaryOperator	!		5106590	0					
ANR	5106640	CallExpression	"strcmp ( p , str )"		5106590	1					
ANR	5106641	Callee	strcmp		5106590	0					
ANR	5106642	Identifier	strcmp		5106590	0					
ANR	5106643	ArgumentList	p		5106590	1					
ANR	5106644	Argument	p		5106590	0					
ANR	5106645	Identifier	p		5106590	0					
ANR	5106646	Argument	str		5106590	1					
ANR	5106647	Identifier	str		5106590	0					
ANR	5106648	CompoundStatement		4:24:100:100	5106590	1					
ANR	5106649	ReturnStatement	return p ;	22:3:443:451	5106590	0	True				
ANR	5106650	Identifier	p		5106590	0					
ANR	5106651	ReturnStatement	return NULL ;	25:1:461:472	5106590	2	True				
ANR	5106652	Identifier	NULL		5106590	0					
ANR	5106653	ReturnType	const char *		5106590	1					
ANR	5106654	Identifier	r_constr_get		5106590	2					
ANR	5106655	ParameterList	"RConstr * c , const char * str"		5106590	3					
ANR	5106656	Parameter	RConstr * c	18:32:308:317	5106590	0	True				
ANR	5106657	ParameterType	RConstr *		5106590	0					
ANR	5106658	Identifier	c		5106590	1					
ANR	5106659	Parameter	const char * str	18:44:320:334	5106590	1	True				
ANR	5106660	ParameterType	const char *		5106590	0					
ANR	5106661	Identifier	str		5106590	1					
ANR	5106662	CFGEntryNode	ENTRY		5106590		True				
ANR	5106663	CFGExitNode	EXIT		5106590		True				
ANR	5106664	Symbol	str		5106590						
ANR	5106665	Symbol	p		5106590						
ANR	5106666	Symbol	strcmp		5106590						
ANR	5106667	Symbol	strlen		5106590						
ANR	5106668	Symbol	c		5106590						
ANR	5106669	Symbol	NULL		5106590						
ANR	5106670	Symbol	e		5106590						
ANR	5106671	Symbol	c -> b		5106590						
ANR	5106672	Symbol	* c		5106590						
ANR	5106673	Symbol	c -> i		5106590						
ANR	5106674	Function	r_constr_append	28:6:483:692							
ANR	5106675	FunctionDef	"r_constr_append (RConstr * c , const char * str)"		5106674	0					
ANR	5106676	CompoundStatement		28:64:541:692	5106674	0					
ANR	5106677	IdentifierDeclStatement	"int i = c -> i , l = strlen ( str ) + 1 ;"	29:1:544:576	5106674	0	True				
ANR	5106678	IdentifierDecl	i = c -> i		5106674	0					
ANR	5106679	IdentifierDeclType	int		5106674	0					
ANR	5106680	Identifier	i		5106674	1					
ANR	5106681	AssignmentExpression	i = c -> i		5106674	2		=			
ANR	5106682	Identifier	i		5106674	0					
ANR	5106683	PtrMemberAccess	c -> i		5106674	1					
ANR	5106684	Identifier	c		5106674	0					
ANR	5106685	Identifier	i		5106674	1					
ANR	5106686	IdentifierDecl	l = strlen ( str ) + 1		5106674	1					
ANR	5106687	IdentifierDeclType	int		5106674	0					
ANR	5106688	Identifier	l		5106674	1					
ANR	5106689	AssignmentExpression	l = strlen ( str ) + 1		5106674	2		=			
ANR	5106690	Identifier	l		5106674	0					
ANR	5106691	AdditiveExpression	strlen ( str ) + 1		5106674	1		+			
ANR	5106692	CallExpression	strlen ( str )		5106674	0					
ANR	5106693	Callee	strlen		5106674	0					
ANR	5106694	Identifier	strlen		5106674	0					
ANR	5106695	ArgumentList	str		5106674	1					
ANR	5106696	Argument	str		5106674	0					
ANR	5106697	Identifier	str		5106674	0					
ANR	5106698	PrimaryExpression	1		5106674	1					
ANR	5106699	IfStatement	if ( ( c -> b + i + l ) >= ( c -> b + c -> l ) )		5106674	1					
ANR	5106700	Condition	( c -> b + i + l ) >= ( c -> b + c -> l )	30:5:583:613	5106674	0	True				
ANR	5106701	RelationalExpression	( c -> b + i + l ) >= ( c -> b + c -> l )		5106674	0		>=			
ANR	5106702	AdditiveExpression	c -> b + i + l		5106674	0		+			
ANR	5106703	PtrMemberAccess	c -> b		5106674	0					
ANR	5106704	Identifier	c		5106674	0					
ANR	5106705	Identifier	b		5106674	1					
ANR	5106706	AdditiveExpression	i + l		5106674	1		+			
ANR	5106707	Identifier	i		5106674	0					
ANR	5106708	Identifier	l		5106674	1					
ANR	5106709	AdditiveExpression	c -> b + c -> l		5106674	1		+			
ANR	5106710	PtrMemberAccess	c -> b		5106674	0					
ANR	5106711	Identifier	c		5106674	0					
ANR	5106712	Identifier	b		5106674	1					
ANR	5106713	PtrMemberAccess	c -> l		5106674	1					
ANR	5106714	Identifier	c		5106674	0					
ANR	5106715	Identifier	l		5106674	1					
ANR	5106716	CompoundStatement		3:38:74:74	5106674	1					
ANR	5106717	ReturnStatement	return NULL ;	31:2:620:631	5106674	0	True				
ANR	5106718	Identifier	NULL		5106674	0					
ANR	5106719	ExpressionStatement	"memcpy ( c -> b + i , str , l )"	33:1:637:662	5106674	2	True				
ANR	5106720	CallExpression	"memcpy ( c -> b + i , str , l )"		5106674	0					
ANR	5106721	Callee	memcpy		5106674	0					
ANR	5106722	Identifier	memcpy		5106674	0					
ANR	5106723	ArgumentList	c -> b + i		5106674	1					
ANR	5106724	Argument	c -> b + i		5106674	0					
ANR	5106725	AdditiveExpression	c -> b + i		5106674	0		+			
ANR	5106726	PtrMemberAccess	c -> b		5106674	0					
ANR	5106727	Identifier	c		5106674	0					
ANR	5106728	Identifier	b		5106674	1					
ANR	5106729	Identifier	i		5106674	1					
ANR	5106730	Argument	str		5106674	1					
ANR	5106731	Identifier	str		5106674	0					
ANR	5106732	Argument	l		5106674	2					
ANR	5106733	Identifier	l		5106674	0					
ANR	5106734	ExpressionStatement	c -> i += l	34:1:665:674	5106674	3	True				
ANR	5106735	AssignmentExpression	c -> i += l		5106674	0		+=			
ANR	5106736	PtrMemberAccess	c -> i		5106674	0					
ANR	5106737	Identifier	c		5106674	0					
ANR	5106738	Identifier	i		5106674	1					
ANR	5106739	Identifier	l		5106674	1					
ANR	5106740	ReturnStatement	return c -> b + i ;	35:1:677:690	5106674	4	True				
ANR	5106741	AdditiveExpression	c -> b + i		5106674	0		+			
ANR	5106742	PtrMemberAccess	c -> b		5106674	0					
ANR	5106743	Identifier	c		5106674	0					
ANR	5106744	Identifier	b		5106674	1					
ANR	5106745	Identifier	i		5106674	1					
ANR	5106746	ReturnType	const char *		5106674	1					
ANR	5106747	Identifier	r_constr_append		5106674	2					
ANR	5106748	ParameterList	"RConstr * c , const char * str"		5106674	3					
ANR	5106749	Parameter	RConstr * c	28:35:512:521	5106674	0	True				
ANR	5106750	ParameterType	RConstr *		5106674	0					
ANR	5106751	Identifier	c		5106674	1					
ANR	5106752	Parameter	const char * str	28:47:524:538	5106674	1	True				
ANR	5106753	ParameterType	const char *		5106674	0					
ANR	5106754	Identifier	str		5106674	1					
ANR	5106755	CFGEntryNode	ENTRY		5106674		True				
ANR	5106756	CFGExitNode	EXIT		5106674		True				
ANR	5106757	Symbol	str		5106674						
ANR	5106758	Symbol	strlen		5106674						
ANR	5106759	Symbol	c -> l		5106674						
ANR	5106760	Symbol	c		5106674						
ANR	5106761	Symbol	NULL		5106674						
ANR	5106762	Symbol	c -> b		5106674						
ANR	5106763	Symbol	i		5106674						
ANR	5106764	Symbol	l		5106674						
ANR	5106765	Symbol	* c		5106674						
ANR	5106766	Symbol	c -> i		5106674						
ANR	5106767	Function	r_constr_add	38:6:701:840							
ANR	5106768	FunctionDef	"r_constr_add (RConstr * c , const char * str)"		5106767	0					
ANR	5106769	CompoundStatement		38:61:756:840	5106767	0					
ANR	5106770	IdentifierDeclStatement	"char * p = ( char * ) r_constr_get ( c , str ) ;"	39:1:759:798	5106767	0	True				
ANR	5106771	IdentifierDecl	"* p = ( char * ) r_constr_get ( c , str )"		5106767	0					
ANR	5106772	IdentifierDeclType	char *		5106767	0					
ANR	5106773	Identifier	p		5106767	1					
ANR	5106774	AssignmentExpression	"* p = ( char * ) r_constr_get ( c , str )"		5106767	2		=			
ANR	5106775	Identifier	p		5106767	0					
ANR	5106776	CastExpression	"( char * ) r_constr_get ( c , str )"		5106767	1					
ANR	5106777	CastTarget	char *		5106767	0					
ANR	5106778	CallExpression	"r_constr_get ( c , str )"		5106767	1					
ANR	5106779	Callee	r_constr_get		5106767	0					
ANR	5106780	Identifier	r_constr_get		5106767	0					
ANR	5106781	ArgumentList	c		5106767	1					
ANR	5106782	Argument	c		5106767	0					
ANR	5106783	Identifier	c		5106767	0					
ANR	5106784	Argument	str		5106767	1					
ANR	5106785	Identifier	str		5106767	0					
ANR	5106786	ReturnStatement	"return p ? p : r_constr_append ( c , str ) ;"	40:1:801:838	5106767	1	True				
ANR	5106787	ConditionalExpression	"p ? p : r_constr_append ( c , str )"		5106767	0					
ANR	5106788	Condition	p		5106767	0					
ANR	5106789	Identifier	p		5106767	0					
ANR	5106790	Identifier	p		5106767	1					
ANR	5106791	CallExpression	"r_constr_append ( c , str )"		5106767	2					
ANR	5106792	Callee	r_constr_append		5106767	0					
ANR	5106793	Identifier	r_constr_append		5106767	0					
ANR	5106794	ArgumentList	c		5106767	1					
ANR	5106795	Argument	c		5106767	0					
ANR	5106796	Identifier	c		5106767	0					
ANR	5106797	Argument	str		5106767	1					
ANR	5106798	Identifier	str		5106767	0					
ANR	5106799	ReturnType	const char *		5106767	1					
ANR	5106800	Identifier	r_constr_add		5106767	2					
ANR	5106801	ParameterList	"RConstr * c , const char * str"		5106767	3					
ANR	5106802	Parameter	RConstr * c	38:32:727:736	5106767	0	True				
ANR	5106803	ParameterType	RConstr *		5106767	0					
ANR	5106804	Identifier	c		5106767	1					
ANR	5106805	Parameter	const char * str	38:44:739:753	5106767	1	True				
ANR	5106806	ParameterType	const char *		5106767	0					
ANR	5106807	Identifier	str		5106767	1					
ANR	5106808	CFGEntryNode	ENTRY		5106767		True				
ANR	5106809	CFGExitNode	EXIT		5106767		True				
ANR	5106810	Symbol	str		5106767						
ANR	5106811	Symbol	p		5106767						
ANR	5106812	Symbol	c		5106767						
ANR	5106813	Symbol	r_constr_get		5106767						
ANR	5106814	Symbol	r_constr_append		5106767						
ANR	5106815	Function	main	44:0:852:1065							
ANR	5106816	FunctionDef	main ()		5106815	0					
ANR	5106817	CompoundStatement		44:7:859:1065	5106815	0					
ANR	5106818	IdentifierDeclStatement	RConstr * cstr = r_constr_new ( 7 ) ;	45:1:862:894	5106815	0	True				
ANR	5106819	IdentifierDecl	* cstr = r_constr_new ( 7 )		5106815	0					
ANR	5106820	IdentifierDeclType	RConstr *		5106815	0					
ANR	5106821	Identifier	cstr		5106815	1					
ANR	5106822	AssignmentExpression	* cstr = r_constr_new ( 7 )		5106815	2		=			
ANR	5106823	Identifier	cstr		5106815	0					
ANR	5106824	CallExpression	r_constr_new ( 7 )		5106815	1					
ANR	5106825	Callee	r_constr_new		5106815	0					
ANR	5106826	Identifier	r_constr_new		5106815	0					
ANR	5106827	ArgumentList	7		5106815	1					
ANR	5106828	Argument	7		5106815	0					
ANR	5106829	PrimaryExpression	7		5106815	0					
ANR	5106830	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"	47:1:898:943	5106815	1	True				
ANR	5106831	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"		5106815	0					
ANR	5106832	Callee	printf		5106815	0					
ANR	5106833	Identifier	printf		5106815	0					
ANR	5106834	ArgumentList	"""%s\\n"""		5106815	1					
ANR	5106835	Argument	"""%s\\n"""		5106815	0					
ANR	5106836	PrimaryExpression	"""%s\\n"""		5106815	0					
ANR	5106837	Argument	"r_constr_add ( cstr , ""Hello"" )"		5106815	1					
ANR	5106838	CallExpression	"r_constr_add ( cstr , ""Hello"" )"		5106815	0					
ANR	5106839	Callee	r_constr_add		5106815	0					
ANR	5106840	Identifier	r_constr_add		5106815	0					
ANR	5106841	ArgumentList	cstr		5106815	1					
ANR	5106842	Argument	cstr		5106815	0					
ANR	5106843	Identifier	cstr		5106815	0					
ANR	5106844	Argument	"""Hello"""		5106815	1					
ANR	5106845	PrimaryExpression	"""Hello"""		5106815	0					
ANR	5106846	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"	48:1:946:991	5106815	2	True				
ANR	5106847	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""Hello"" ) )"		5106815	0					
ANR	5106848	Callee	printf		5106815	0					
ANR	5106849	Identifier	printf		5106815	0					
ANR	5106850	ArgumentList	"""%s\\n"""		5106815	1					
ANR	5106851	Argument	"""%s\\n"""		5106815	0					
ANR	5106852	PrimaryExpression	"""%s\\n"""		5106815	0					
ANR	5106853	Argument	"r_constr_add ( cstr , ""Hello"" )"		5106815	1					
ANR	5106854	CallExpression	"r_constr_add ( cstr , ""Hello"" )"		5106815	0					
ANR	5106855	Callee	r_constr_add		5106815	0					
ANR	5106856	Identifier	r_constr_add		5106815	0					
ANR	5106857	ArgumentList	cstr		5106815	1					
ANR	5106858	Argument	cstr		5106815	0					
ANR	5106859	Identifier	cstr		5106815	0					
ANR	5106860	Argument	"""Hello"""		5106815	1					
ANR	5106861	PrimaryExpression	"""Hello"""		5106815	0					
ANR	5106862	ExpressionStatement	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""World"" ) )"	49:1:994:1039	5106815	3	True				
ANR	5106863	CallExpression	"printf ( ""%s\\n"" , r_constr_add ( cstr , ""World"" ) )"		5106815	0					
ANR	5106864	Callee	printf		5106815	0					
ANR	5106865	Identifier	printf		5106815	0					
ANR	5106866	ArgumentList	"""%s\\n"""		5106815	1					
ANR	5106867	Argument	"""%s\\n"""		5106815	0					
ANR	5106868	PrimaryExpression	"""%s\\n"""		5106815	0					
ANR	5106869	Argument	"r_constr_add ( cstr , ""World"" )"		5106815	1					
ANR	5106870	CallExpression	"r_constr_add ( cstr , ""World"" )"		5106815	0					
ANR	5106871	Callee	r_constr_add		5106815	0					
ANR	5106872	Identifier	r_constr_add		5106815	0					
ANR	5106873	ArgumentList	cstr		5106815	1					
ANR	5106874	Argument	cstr		5106815	0					
ANR	5106875	Identifier	cstr		5106815	0					
ANR	5106876	Argument	"""World"""		5106815	1					
ANR	5106877	PrimaryExpression	"""World"""		5106815	0					
ANR	5106878	ExpressionStatement	r_constr_free ( cstr )	51:1:1043:1063	5106815	4	True				
ANR	5106879	CallExpression	r_constr_free ( cstr )		5106815	0					
ANR	5106880	Callee	r_constr_free		5106815	0					
ANR	5106881	Identifier	r_constr_free		5106815	0					
ANR	5106882	ArgumentList	cstr		5106815	1					
ANR	5106883	Argument	cstr		5106815	0					
ANR	5106884	Identifier	cstr		5106815	0					
ANR	5106885	Identifier	main		5106815	1					
ANR	5106886	ParameterList			5106815	2					
ANR	5106887	CFGEntryNode	ENTRY		5106815		True				
ANR	5106888	CFGExitNode	EXIT		5106815		True				
ANR	5106889	Symbol	cstr		5106815						
ANR	5106890	Symbol	r_constr_new		5106815						
ANR	5106891	Symbol	r_constr_add		5106815						
