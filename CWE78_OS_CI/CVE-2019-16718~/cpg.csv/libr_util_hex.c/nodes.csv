command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5143776	File	data/converged/CVE-2019-16718~_radare2/libr_util_hex.c								
ANR	5143777	Function	r_hex_to_byte	9:0:174:473							
ANR	5143778	FunctionDef	"r_hex_to_byte (ut8 * val , ut8 c)"		5143777	0					
ANR	5143779	CompoundStatement		9:41:215:473	5143777	0					
ANR	5143780	IfStatement	if ( IS_DIGIT ( c ) )		5143777	0					
ANR	5143781	Condition	IS_DIGIT ( c )	10:5:222:233	5143777	0	True				
ANR	5143782	CallExpression	IS_DIGIT ( c )		5143777	0					
ANR	5143783	Callee	IS_DIGIT		5143777	0					
ANR	5143784	Identifier	IS_DIGIT		5143777	0					
ANR	5143785	ArgumentList	c		5143777	1					
ANR	5143786	Argument	c		5143777	0					
ANR	5143787	Identifier	c		5143777	0					
ANR	5143788	CompoundStatement		2:19:20:20	5143777	1					
ANR	5143789	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - '0' )	11:2:240:275	5143777	0	True				
ANR	5143790	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - '0' )		5143777	0		=			
ANR	5143791	UnaryOperationExpression	* val		5143777	0					
ANR	5143792	UnaryOperator	*		5143777	0					
ANR	5143793	Identifier	val		5143777	1					
ANR	5143794	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - '0' )		5143777	1		+			
ANR	5143795	MultiplicativeExpression	( ut8 ) ( * val ) * 16		5143777	0		*			
ANR	5143796	CastExpression	( ut8 ) ( * val )		5143777	0					
ANR	5143797	CastTarget	ut8		5143777	0					
ANR	5143798	UnaryOperationExpression	* val		5143777	1					
ANR	5143799	UnaryOperator	*		5143777	0					
ANR	5143800	Identifier	val		5143777	1					
ANR	5143801	PrimaryExpression	16		5143777	1					
ANR	5143802	AdditiveExpression	c - '0'		5143777	1		-			
ANR	5143803	Identifier	c		5143777	0					
ANR	5143804	PrimaryExpression	'0'		5143777	1					
ANR	5143805	ElseStatement	else		5143777	0					
ANR	5143806	IfStatement	if ( c >= 'A' && c <= 'F' )		5143777	0					
ANR	5143807	Condition	c >= 'A' && c <= 'F'	12:12:289:308	5143777	0	True				
ANR	5143808	AndExpression	c >= 'A' && c <= 'F'		5143777	0		&&			
ANR	5143809	RelationalExpression	c >= 'A'		5143777	0		>=			
ANR	5143810	Identifier	c		5143777	0					
ANR	5143811	PrimaryExpression	'A'		5143777	1					
ANR	5143812	RelationalExpression	c <= 'F'		5143777	1		<=			
ANR	5143813	Identifier	c		5143777	0					
ANR	5143814	PrimaryExpression	'F'		5143777	1					
ANR	5143815	CompoundStatement		4:34:95:95	5143777	1					
ANR	5143816	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )	13:2:315:355	5143777	0	True				
ANR	5143817	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )		5143777	0		=			
ANR	5143818	UnaryOperationExpression	* val		5143777	0					
ANR	5143819	UnaryOperator	*		5143777	0					
ANR	5143820	Identifier	val		5143777	1					
ANR	5143821	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - 'A' + 10 )		5143777	1		+			
ANR	5143822	MultiplicativeExpression	( ut8 ) ( * val ) * 16		5143777	0		*			
ANR	5143823	CastExpression	( ut8 ) ( * val )		5143777	0					
ANR	5143824	CastTarget	ut8		5143777	0					
ANR	5143825	UnaryOperationExpression	* val		5143777	1					
ANR	5143826	UnaryOperator	*		5143777	0					
ANR	5143827	Identifier	val		5143777	1					
ANR	5143828	PrimaryExpression	16		5143777	1					
ANR	5143829	AdditiveExpression	c - 'A' + 10		5143777	1		-			
ANR	5143830	Identifier	c		5143777	0					
ANR	5143831	AdditiveExpression	'A' + 10		5143777	1		+			
ANR	5143832	PrimaryExpression	'A'		5143777	0					
ANR	5143833	PrimaryExpression	10		5143777	1					
ANR	5143834	ElseStatement	else		5143777	0					
ANR	5143835	IfStatement	if ( c >= 'a' && c <= 'f' )		5143777	0					
ANR	5143836	Condition	c >= 'a' && c <= 'f'	14:12:369:388	5143777	0	True				
ANR	5143837	AndExpression	c >= 'a' && c <= 'f'		5143777	0		&&			
ANR	5143838	RelationalExpression	c >= 'a'		5143777	0		>=			
ANR	5143839	Identifier	c		5143777	0					
ANR	5143840	PrimaryExpression	'a'		5143777	1					
ANR	5143841	RelationalExpression	c <= 'f'		5143777	1		<=			
ANR	5143842	Identifier	c		5143777	0					
ANR	5143843	PrimaryExpression	'f'		5143777	1					
ANR	5143844	CompoundStatement		6:34:175:175	5143777	1					
ANR	5143845	ExpressionStatement	* val = ( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )	15:2:395:435	5143777	0	True				
ANR	5143846	AssignmentExpression	* val = ( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )		5143777	0		=			
ANR	5143847	UnaryOperationExpression	* val		5143777	0					
ANR	5143848	UnaryOperator	*		5143777	0					
ANR	5143849	Identifier	val		5143777	1					
ANR	5143850	AdditiveExpression	( ut8 ) ( * val ) * 16 + ( c - 'a' + 10 )		5143777	1		+			
ANR	5143851	MultiplicativeExpression	( ut8 ) ( * val ) * 16		5143777	0		*			
ANR	5143852	CastExpression	( ut8 ) ( * val )		5143777	0					
ANR	5143853	CastTarget	ut8		5143777	0					
ANR	5143854	UnaryOperationExpression	* val		5143777	1					
ANR	5143855	UnaryOperator	*		5143777	0					
ANR	5143856	Identifier	val		5143777	1					
ANR	5143857	PrimaryExpression	16		5143777	1					
ANR	5143858	AdditiveExpression	c - 'a' + 10		5143777	1		-			
ANR	5143859	Identifier	c		5143777	0					
ANR	5143860	AdditiveExpression	'a' + 10		5143777	1		+			
ANR	5143861	PrimaryExpression	'a'		5143777	0					
ANR	5143862	PrimaryExpression	10		5143777	1					
ANR	5143863	ElseStatement	else		5143777	0					
ANR	5143864	CompoundStatement		8:8:229:229	5143777	0					
ANR	5143865	ReturnStatement	return 1 ;	17:2:449:457	5143777	0	True				
ANR	5143866	PrimaryExpression	1		5143777	0					
ANR	5143867	ReturnStatement	return 0 ;	19:1:463:471	5143777	1	True				
ANR	5143868	PrimaryExpression	0		5143777	0					
ANR	5143869	ReturnType	R_API int		5143777	1					
ANR	5143870	Identifier	r_hex_to_byte		5143777	2					
ANR	5143871	ParameterList	"ut8 * val , ut8 c"		5143777	3					
ANR	5143872	Parameter	ut8 * val	9:24:198:205	5143777	0	True				
ANR	5143873	ParameterType	ut8 *		5143777	0					
ANR	5143874	Identifier	val		5143777	1					
ANR	5143875	Parameter	ut8 c	9:34:208:212	5143777	1	True				
ANR	5143876	ParameterType	ut8		5143777	0					
ANR	5143877	Identifier	c		5143777	1					
ANR	5143878	CFGEntryNode	ENTRY		5143777		True				
ANR	5143879	CFGExitNode	EXIT		5143777		True				
ANR	5143880	Symbol	val		5143777						
ANR	5143881	Symbol	c		5143777						
ANR	5143882	Symbol	* val		5143777						
ANR	5143883	Symbol	IS_DIGIT		5143777						
ANR	5143884	Function	r_hex_from_py_str	22:0:476:678							
ANR	5143885	FunctionDef	"r_hex_from_py_str (char * out , const char * code)"		5143884	0					
ANR	5143886	CompoundStatement		22:59:535:678	5143884	0					
ANR	5143887	IfStatement	"if ( ! strncmp ( code , ""'''"" , 3 ) )"		5143884	0					
ANR	5143888	Condition	"! strncmp ( code , ""'''"" , 3 )"	23:5:542:566	5143884	0	True				
ANR	5143889	UnaryOperationExpression	"! strncmp ( code , ""'''"" , 3 )"		5143884	0					
ANR	5143890	UnaryOperator	!		5143884	0					
ANR	5143891	CallExpression	"strncmp ( code , ""'''"" , 3 )"		5143884	1					
ANR	5143892	Callee	strncmp		5143884	0					
ANR	5143893	Identifier	strncmp		5143884	0					
ANR	5143894	ArgumentList	code		5143884	1					
ANR	5143895	Argument	code		5143884	0					
ANR	5143896	Identifier	code		5143884	0					
ANR	5143897	Argument	"""'''"""		5143884	1					
ANR	5143898	PrimaryExpression	"""'''"""		5143884	0					
ANR	5143899	Argument	3		5143884	2					
ANR	5143900	PrimaryExpression	3		5143884	0					
ANR	5143901	CompoundStatement		3:2:37:61	5143884	1					
ANR	5143902	IdentifierDeclStatement	const char * s = code + 2 ;	24:2:573:597	5143884	0	True				
ANR	5143903	IdentifierDecl	* s = code + 2		5143884	0					
ANR	5143904	IdentifierDeclType	const char *		5143884	0					
ANR	5143905	Identifier	s		5143884	1					
ANR	5143906	AssignmentExpression	* s = code + 2		5143884	2		=			
ANR	5143907	Identifier	s		5143884	0					
ANR	5143908	AdditiveExpression	code + 2		5143884	1		+			
ANR	5143909	Identifier	code		5143884	0					
ANR	5143910	PrimaryExpression	2		5143884	1					
ANR	5143911	ReturnStatement	"return r_hex_from_c_str ( out , & s ) ;"	25:2:601:634	5143884	1	True				
ANR	5143912	CallExpression	"r_hex_from_c_str ( out , & s )"		5143884	0					
ANR	5143913	Callee	r_hex_from_c_str		5143884	0					
ANR	5143914	Identifier	r_hex_from_c_str		5143884	0					
ANR	5143915	ArgumentList	out		5143884	1					
ANR	5143916	Argument	out		5143884	0					
ANR	5143917	Identifier	out		5143884	0					
ANR	5143918	Argument	& s		5143884	1					
ANR	5143919	UnaryOperationExpression	& s		5143884	0					
ANR	5143920	UnaryOperator	&		5143884	0					
ANR	5143921	Identifier	s		5143884	1					
ANR	5143922	ReturnStatement	"return r_hex_from_c_str ( out , & code ) ;"	27:1:640:676	5143884	1	True				
ANR	5143923	CallExpression	"r_hex_from_c_str ( out , & code )"		5143884	0					
ANR	5143924	Callee	r_hex_from_c_str		5143884	0					
ANR	5143925	Identifier	r_hex_from_c_str		5143884	0					
ANR	5143926	ArgumentList	out		5143884	1					
ANR	5143927	Argument	out		5143884	0					
ANR	5143928	Identifier	out		5143884	0					
ANR	5143929	Argument	& code		5143884	1					
ANR	5143930	UnaryOperationExpression	& code		5143884	0					
ANR	5143931	UnaryOperator	&		5143884	0					
ANR	5143932	Identifier	code		5143884	1					
ANR	5143933	ReturnType	R_API char *		5143884	1					
ANR	5143934	Identifier	r_hex_from_py_str		5143884	2					
ANR	5143935	ParameterList	"char * out , const char * code"		5143884	3					
ANR	5143936	Parameter	char * out	22:30:506:514	5143884	0	True				
ANR	5143937	ParameterType	char *		5143884	0					
ANR	5143938	Identifier	out		5143884	1					
ANR	5143939	Parameter	const char * code	22:41:517:532	5143884	1	True				
ANR	5143940	ParameterType	const char *		5143884	0					
ANR	5143941	Identifier	code		5143884	1					
ANR	5143942	CFGEntryNode	ENTRY		5143884		True				
ANR	5143943	CFGExitNode	EXIT		5143884		True				
ANR	5143944	Symbol	strncmp		5143884						
ANR	5143945	Symbol	r_hex_from_c_str		5143884						
ANR	5143946	Symbol	code		5143884						
ANR	5143947	Symbol	s		5143884						
ANR	5143948	Symbol	& s		5143884						
ANR	5143949	Symbol	& code		5143884						
ANR	5143950	Symbol	out		5143884						
ANR	5143951	Function	skip_comment_py	30:0:681:856							
ANR	5143952	FunctionDef	skip_comment_py (const char * code)		5143951	0					
ANR	5143953	CompoundStatement		30:53:734:856	5143951	0					
ANR	5143954	IfStatement	if ( * code != '#' )		5143951	0					
ANR	5143955	Condition	* code != '#'	31:5:741:752	5143951	0	True				
ANR	5143956	EqualityExpression	* code != '#'		5143951	0		!=			
ANR	5143957	UnaryOperationExpression	* code		5143951	0					
ANR	5143958	UnaryOperator	*		5143951	0					
ANR	5143959	Identifier	code		5143951	1					
ANR	5143960	PrimaryExpression	'#'		5143951	1					
ANR	5143961	CompoundStatement		2:19:20:20	5143951	1					
ANR	5143962	ReturnStatement	return code ;	32:2:759:770	5143951	0	True				
ANR	5143963	Identifier	code		5143951	0					
ANR	5143964	IdentifierDeclStatement	"char * end = strchr ( code , '\\n' ) ;"	34:1:776:807	5143951	1	True				
ANR	5143965	IdentifierDecl	"* end = strchr ( code , '\\n' )"		5143951	0					
ANR	5143966	IdentifierDeclType	char *		5143951	0					
ANR	5143967	Identifier	end		5143951	1					
ANR	5143968	AssignmentExpression	"* end = strchr ( code , '\\n' )"		5143951	2		=			
ANR	5143969	Identifier	end		5143951	0					
ANR	5143970	CallExpression	"strchr ( code , '\\n' )"		5143951	1					
ANR	5143971	Callee	strchr		5143951	0					
ANR	5143972	Identifier	strchr		5143951	0					
ANR	5143973	ArgumentList	code		5143951	1					
ANR	5143974	Argument	code		5143951	0					
ANR	5143975	Identifier	code		5143951	0					
ANR	5143976	Argument	'\\n'		5143951	1					
ANR	5143977	PrimaryExpression	'\\n'		5143951	0					
ANR	5143978	IfStatement	if ( end )		5143951	2					
ANR	5143979	Condition	end	35:5:814:816	5143951	0	True				
ANR	5143980	Identifier	end		5143951	0					
ANR	5143981	CompoundStatement		6:10:84:84	5143951	1					
ANR	5143982	ExpressionStatement	code = end	36:2:823:833	5143951	0	True				
ANR	5143983	AssignmentExpression	code = end		5143951	0		=			
ANR	5143984	Identifier	code		5143951	0					
ANR	5143985	Identifier	end		5143951	1					
ANR	5143986	ReturnStatement	return code + 1 ;	38:1:839:854	5143951	3	True				
ANR	5143987	AdditiveExpression	code + 1		5143951	0		+			
ANR	5143988	Identifier	code		5143951	0					
ANR	5143989	PrimaryExpression	1		5143951	1					
ANR	5143990	ReturnType	static const char *		5143951	1					
ANR	5143991	Identifier	skip_comment_py		5143951	2					
ANR	5143992	ParameterList	const char * code		5143951	3					
ANR	5143993	Parameter	const char * code	30:35:716:731	5143951	0	True				
ANR	5143994	ParameterType	const char *		5143951	0					
ANR	5143995	Identifier	code		5143951	1					
ANR	5143996	CFGEntryNode	ENTRY		5143951		True				
ANR	5143997	CFGExitNode	EXIT		5143951		True				
ANR	5143998	Symbol	code		5143951						
ANR	5143999	Symbol	strchr		5143951						
ANR	5144000	Symbol	end		5143951						
ANR	5144001	Symbol	* code		5143951						
ANR	5144002	Function	r_hex_from_py_array	41:0:859:1575							
ANR	5144003	FunctionDef	"r_hex_from_py_array (char * out , const char * code)"		5144002	0					
ANR	5144004	CompoundStatement		41:61:920:1575	5144002	0					
ANR	5144005	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdef"" ;"	42:1:923:960	5144002	0	True				
ANR	5144006	IdentifierDecl	"abc [ ] = ""0123456789abcdef"""		5144002	0					
ANR	5144007	IdentifierDeclType	const char [ ]		5144002	0					
ANR	5144008	Identifier	abc		5144002	1					
ANR	5144009	AssignmentExpression	"abc [ ] = ""0123456789abcdef"""		5144002	2		=			
ANR	5144010	Identifier	abc		5144002	0					
ANR	5144011	PrimaryExpression	"""0123456789abcdef"""		5144002	1					
ANR	5144012	IfStatement	"if ( * code != '[' || ! strchr ( code , ']' ) )"		5144002	1					
ANR	5144013	Condition	"* code != '[' || ! strchr ( code , ']' )"	43:5:967:1001	5144002	0	True				
ANR	5144014	OrExpression	"* code != '[' || ! strchr ( code , ']' )"		5144002	0		||			
ANR	5144015	EqualityExpression	* code != '['		5144002	0		!=			
ANR	5144016	UnaryOperationExpression	* code		5144002	0					
ANR	5144017	UnaryOperator	*		5144002	0					
ANR	5144018	Identifier	code		5144002	1					
ANR	5144019	PrimaryExpression	'['		5144002	1					
ANR	5144020	UnaryOperationExpression	"! strchr ( code , ']' )"		5144002	1					
ANR	5144021	UnaryOperator	!		5144002	0					
ANR	5144022	CallExpression	"strchr ( code , ']' )"		5144002	1					
ANR	5144023	Callee	strchr		5144002	0					
ANR	5144024	Identifier	strchr		5144002	0					
ANR	5144025	ArgumentList	code		5144002	1					
ANR	5144026	Argument	code		5144002	0					
ANR	5144027	Identifier	code		5144002	0					
ANR	5144028	Argument	']'		5144002	1					
ANR	5144029	PrimaryExpression	']'		5144002	0					
ANR	5144030	CompoundStatement		3:42:83:83	5144002	1					
ANR	5144031	ReturnStatement	return NULL ;	44:2:1008:1019	5144002	0	True				
ANR	5144032	Identifier	NULL		5144002	0					
ANR	5144033	ExpressionStatement	code ++	46:1:1025:1031	5144002	2	True				
ANR	5144034	PostIncDecOperationExpression	code ++		5144002	0					
ANR	5144035	Identifier	code		5144002	0					
ANR	5144036	IncDec	++		5144002	1					
ANR	5144037	ForStatement	for ( ; * code ; code ++ )		5144002	3					
ANR	5144038	Condition	* code	47:8:1041:1045	5144002	0	True				
ANR	5144039	UnaryOperationExpression	* code		5144002	0					
ANR	5144040	UnaryOperator	*		5144002	0					
ANR	5144041	Identifier	code		5144002	1					
ANR	5144042	PostIncDecOperationExpression	code ++	47:15:1048:1053	5144002	1	True				
ANR	5144043	Identifier	code		5144002	0					
ANR	5144044	IncDec	++		5144002	1					
ANR	5144045	CompoundStatement		16:2:306:330	5144002	2					
ANR	5144046	IdentifierDeclStatement	"char * comma = strchr ( code , ',' ) ;"	48:2:1060:1092	5144002	0	True				
ANR	5144047	IdentifierDecl	"* comma = strchr ( code , ',' )"		5144002	0					
ANR	5144048	IdentifierDeclType	char *		5144002	0					
ANR	5144049	Identifier	comma		5144002	1					
ANR	5144050	AssignmentExpression	"* comma = strchr ( code , ',' )"		5144002	2		=			
ANR	5144051	Identifier	comma		5144002	0					
ANR	5144052	CallExpression	"strchr ( code , ',' )"		5144002	1					
ANR	5144053	Callee	strchr		5144002	0					
ANR	5144054	Identifier	strchr		5144002	0					
ANR	5144055	ArgumentList	code		5144002	1					
ANR	5144056	Argument	code		5144002	0					
ANR	5144057	Identifier	code		5144002	0					
ANR	5144058	Argument	"','"		5144002	1					
ANR	5144059	PrimaryExpression	"','"		5144002	0					
ANR	5144060	IfStatement	if ( ! comma )		5144002	1					
ANR	5144061	Condition	! comma	49:6:1100:1105	5144002	0	True				
ANR	5144062	UnaryOperationExpression	! comma		5144002	0					
ANR	5144063	UnaryOperator	!		5144002	0					
ANR	5144064	Identifier	comma		5144002	1					
ANR	5144065	CompoundStatement		9:14:187:187	5144002	1					
ANR	5144066	ExpressionStatement	"comma = strchr ( code , ']' )"	50:3:1113:1139	5144002	0	True				
ANR	5144067	AssignmentExpression	"comma = strchr ( code , ']' )"		5144002	0		=			
ANR	5144068	Identifier	comma		5144002	0					
ANR	5144069	CallExpression	"strchr ( code , ']' )"		5144002	1					
ANR	5144070	Callee	strchr		5144002	0					
ANR	5144071	Identifier	strchr		5144002	0					
ANR	5144072	ArgumentList	code		5144002	1					
ANR	5144073	Argument	code		5144002	0					
ANR	5144074	Identifier	code		5144002	0					
ANR	5144075	Argument	']'		5144002	1					
ANR	5144076	PrimaryExpression	']'		5144002	0					
ANR	5144077	IfStatement	if ( ! comma )		5144002	2					
ANR	5144078	Condition	! comma	52:6:1151:1156	5144002	0	True				
ANR	5144079	UnaryOperationExpression	! comma		5144002	0					
ANR	5144080	UnaryOperator	!		5144002	0					
ANR	5144081	Identifier	comma		5144002	1					
ANR	5144082	CompoundStatement		12:14:238:238	5144002	1					
ANR	5144083	BreakStatement	break ;	53:3:1164:1169	5144002	0	True				
ANR	5144084	IdentifierDeclStatement	"char * _word = r_str_ndup ( code , comma - code ) ;"	55:2:1177:1223	5144002	3	True				
ANR	5144085	IdentifierDecl	"* _word = r_str_ndup ( code , comma - code )"		5144002	0					
ANR	5144086	IdentifierDeclType	char *		5144002	0					
ANR	5144087	Identifier	_word		5144002	1					
ANR	5144088	AssignmentExpression	"* _word = r_str_ndup ( code , comma - code )"		5144002	2		=			
ANR	5144089	Identifier	_word		5144002	0					
ANR	5144090	CallExpression	"r_str_ndup ( code , comma - code )"		5144002	1					
ANR	5144091	Callee	r_str_ndup		5144002	0					
ANR	5144092	Identifier	r_str_ndup		5144002	0					
ANR	5144093	ArgumentList	code		5144002	1					
ANR	5144094	Argument	code		5144002	0					
ANR	5144095	Identifier	code		5144002	0					
ANR	5144096	Argument	comma - code		5144002	1					
ANR	5144097	AdditiveExpression	comma - code		5144002	0		-			
ANR	5144098	Identifier	comma		5144002	0					
ANR	5144099	Identifier	code		5144002	1					
ANR	5144100	IdentifierDeclStatement	const char * word = _word ;	56:2:1227:1251	5144002	4	True				
ANR	5144101	IdentifierDecl	* word = _word		5144002	0					
ANR	5144102	IdentifierDeclType	const char *		5144002	0					
ANR	5144103	Identifier	word		5144002	1					
ANR	5144104	AssignmentExpression	* word = _word		5144002	2		=			
ANR	5144105	Identifier	_word		5144002	0					
ANR	5144106	Identifier	_word		5144002	1					
ANR	5144107	WhileStatement	while ( * word == ' ' || * word == '\\t' || * word == '\\n' )		5144002	5					
ANR	5144108	Condition	* word == ' ' || * word == '\\t' || * word == '\\n'	57:9:1262:1307	5144002	0	True				
ANR	5144109	OrExpression	* word == ' ' || * word == '\\t' || * word == '\\n'		5144002	0		||			
ANR	5144110	EqualityExpression	* word == ' '		5144002	0		==			
ANR	5144111	UnaryOperationExpression	* word		5144002	0					
ANR	5144112	UnaryOperator	*		5144002	0					
ANR	5144113	Identifier	word		5144002	1					
ANR	5144114	PrimaryExpression	' '		5144002	1					
ANR	5144115	OrExpression	* word == '\\t' || * word == '\\n'		5144002	1		||			
ANR	5144116	EqualityExpression	* word == '\\t'		5144002	0		==			
ANR	5144117	UnaryOperationExpression	* word		5144002	0					
ANR	5144118	UnaryOperator	*		5144002	0					
ANR	5144119	Identifier	word		5144002	1					
ANR	5144120	PrimaryExpression	'\\t'		5144002	1					
ANR	5144121	EqualityExpression	* word == '\\n'		5144002	1		==			
ANR	5144122	UnaryOperationExpression	* word		5144002	0					
ANR	5144123	UnaryOperator	*		5144002	0					
ANR	5144124	Identifier	word		5144002	1					
ANR	5144125	PrimaryExpression	'\\n'		5144002	1					
ANR	5144126	CompoundStatement		17:57:389:389	5144002	1					
ANR	5144127	ExpressionStatement	word ++	58:3:1315:1321	5144002	0	True				
ANR	5144128	PostIncDecOperationExpression	word ++		5144002	0					
ANR	5144129	Identifier	word		5144002	0					
ANR	5144130	IncDec	++		5144002	1					
ANR	5144131	ExpressionStatement	word = skip_comment_py ( word )	59:3:1326:1355	5144002	1	True				
ANR	5144132	AssignmentExpression	word = skip_comment_py ( word )		5144002	0		=			
ANR	5144133	Identifier	word		5144002	0					
ANR	5144134	CallExpression	skip_comment_py ( word )		5144002	1					
ANR	5144135	Callee	skip_comment_py		5144002	0					
ANR	5144136	Identifier	skip_comment_py		5144002	0					
ANR	5144137	ArgumentList	word		5144002	1					
ANR	5144138	Argument	word		5144002	0					
ANR	5144139	Identifier	word		5144002	0					
ANR	5144140	IfStatement	if ( IS_DIGIT ( * word ) )		5144002	6					
ANR	5144141	Condition	IS_DIGIT ( * word )	61:6:1367:1382	5144002	0	True				
ANR	5144142	CallExpression	IS_DIGIT ( * word )		5144002	0					
ANR	5144143	Callee	IS_DIGIT		5144002	0					
ANR	5144144	Identifier	IS_DIGIT		5144002	0					
ANR	5144145	ArgumentList	* word		5144002	1					
ANR	5144146	Argument	* word		5144002	0					
ANR	5144147	UnaryOperationExpression	* word		5144002	0					
ANR	5144148	UnaryOperator	*		5144002	0					
ANR	5144149	Identifier	word		5144002	1					
ANR	5144150	CompoundStatement		22:3:469:505	5144002	1					
ANR	5144151	IdentifierDeclStatement	"ut8 n = ( ut8 ) r_num_math ( NULL , word ) ;"	62:3:1390:1426	5144002	0	True				
ANR	5144152	IdentifierDecl	"n = ( ut8 ) r_num_math ( NULL , word )"		5144002	0					
ANR	5144153	IdentifierDeclType	ut8		5144002	0					
ANR	5144154	Identifier	n		5144002	1					
ANR	5144155	AssignmentExpression	"n = ( ut8 ) r_num_math ( NULL , word )"		5144002	2		=			
ANR	5144156	Identifier	n		5144002	0					
ANR	5144157	CastExpression	"( ut8 ) r_num_math ( NULL , word )"		5144002	1					
ANR	5144158	CastTarget	ut8		5144002	0					
ANR	5144159	CallExpression	"r_num_math ( NULL , word )"		5144002	1					
ANR	5144160	Callee	r_num_math		5144002	0					
ANR	5144161	Identifier	r_num_math		5144002	0					
ANR	5144162	ArgumentList	NULL		5144002	1					
ANR	5144163	Argument	NULL		5144002	0					
ANR	5144164	Identifier	NULL		5144002	0					
ANR	5144165	Argument	word		5144002	1					
ANR	5144166	Identifier	word		5144002	0					
ANR	5144167	ExpressionStatement	* out ++ = abc [ ( n >> 4 ) & 0xf ]	63:3:1431:1459	5144002	1	True				
ANR	5144168	AssignmentExpression	* out ++ = abc [ ( n >> 4 ) & 0xf ]		5144002	0		=			
ANR	5144169	UnaryOperationExpression	* out ++		5144002	0					
ANR	5144170	UnaryOperator	*		5144002	0					
ANR	5144171	PostIncDecOperationExpression	out ++		5144002	1					
ANR	5144172	Identifier	out		5144002	0					
ANR	5144173	IncDec	++		5144002	1					
ANR	5144174	ArrayIndexing	abc [ ( n >> 4 ) & 0xf ]		5144002	1					
ANR	5144175	Identifier	abc		5144002	0					
ANR	5144176	BitAndExpression	( n >> 4 ) & 0xf		5144002	1		&			
ANR	5144177	ShiftExpression	n >> 4		5144002	0		>>			
ANR	5144178	Identifier	n		5144002	0					
ANR	5144179	PrimaryExpression	4		5144002	1					
ANR	5144180	PrimaryExpression	0xf		5144002	1					
ANR	5144181	ExpressionStatement	* out ++ = abc [ n & 0xf ]	64:3:1464:1485	5144002	2	True				
ANR	5144182	AssignmentExpression	* out ++ = abc [ n & 0xf ]		5144002	0		=			
ANR	5144183	UnaryOperationExpression	* out ++		5144002	0					
ANR	5144184	UnaryOperator	*		5144002	0					
ANR	5144185	PostIncDecOperationExpression	out ++		5144002	1					
ANR	5144186	Identifier	out		5144002	0					
ANR	5144187	IncDec	++		5144002	1					
ANR	5144188	ArrayIndexing	abc [ n & 0xf ]		5144002	1					
ANR	5144189	Identifier	abc		5144002	0					
ANR	5144190	BitAndExpression	n & 0xf		5144002	1		&			
ANR	5144191	Identifier	n		5144002	0					
ANR	5144192	PrimaryExpression	0xf		5144002	1					
ANR	5144193	ExpressionStatement	free ( _word )	66:2:1493:1505	5144002	7	True				
ANR	5144194	CallExpression	free ( _word )		5144002	0					
ANR	5144195	Callee	free		5144002	0					
ANR	5144196	Identifier	free		5144002	0					
ANR	5144197	ArgumentList	_word		5144002	1					
ANR	5144198	Argument	_word		5144002	0					
ANR	5144199	Identifier	_word		5144002	0					
ANR	5144200	ExpressionStatement	code = comma	67:2:1509:1521	5144002	8	True				
ANR	5144201	AssignmentExpression	code = comma		5144002	0		=			
ANR	5144202	Identifier	code		5144002	0					
ANR	5144203	Identifier	comma		5144002	1					
ANR	5144204	IfStatement	if ( * code == ']' )		5144002	9					
ANR	5144205	Condition	* code == ']'	68:6:1529:1540	5144002	0	True				
ANR	5144206	EqualityExpression	* code == ']'		5144002	0		==			
ANR	5144207	UnaryOperationExpression	* code		5144002	0					
ANR	5144208	UnaryOperator	*		5144002	0					
ANR	5144209	Identifier	code		5144002	1					
ANR	5144210	PrimaryExpression	']'		5144002	1					
ANR	5144211	CompoundStatement		28:20:622:622	5144002	1					
ANR	5144212	BreakStatement	break ;	69:3:1548:1553	5144002	0	True				
ANR	5144213	ReturnStatement	return out ;	72:1:1563:1573	5144002	4	True				
ANR	5144214	Identifier	out		5144002	0					
ANR	5144215	ReturnType	R_API char *		5144002	1					
ANR	5144216	Identifier	r_hex_from_py_array		5144002	2					
ANR	5144217	ParameterList	"char * out , const char * code"		5144002	3					
ANR	5144218	Parameter	char * out	41:32:891:899	5144002	0	True				
ANR	5144219	ParameterType	char *		5144002	0					
ANR	5144220	Identifier	out		5144002	1					
ANR	5144221	Parameter	const char * code	41:43:902:917	5144002	1	True				
ANR	5144222	ParameterType	const char *		5144002	0					
ANR	5144223	Identifier	code		5144002	1					
ANR	5144224	CFGEntryNode	ENTRY		5144002		True				
ANR	5144225	CFGExitNode	EXIT		5144002		True				
ANR	5144226	Symbol	* out ++		5144002						
ANR	5144227	Symbol	code		5144002						
ANR	5144228	Symbol	abc		5144002						
ANR	5144229	Symbol	NULL		5144002						
ANR	5144230	Symbol	r_str_ndup		5144002						
ANR	5144231	Symbol	* word		5144002						
ANR	5144232	Symbol	strchr		5144002						
ANR	5144233	Symbol	n		5144002						
ANR	5144234	Symbol	out		5144002						
ANR	5144235	Symbol	IS_DIGIT		5144002						
ANR	5144236	Symbol	r_num_math		5144002						
ANR	5144237	Symbol	comma		5144002						
ANR	5144238	Symbol	* abc		5144002						
ANR	5144239	Symbol	* n		5144002						
ANR	5144240	Symbol	skip_comment_py		5144002						
ANR	5144241	Symbol	_word		5144002						
ANR	5144242	Symbol	word		5144002						
ANR	5144243	Symbol	* code		5144002						
ANR	5144244	Function	r_hex_from_py	75:0:1578:2184							
ANR	5144245	FunctionDef	r_hex_from_py (const char * code)		5144244	0					
ANR	5144246	CompoundStatement		75:44:1622:2184	5144244	0					
ANR	5144247	IfStatement	if ( ! code )		5144244	0					
ANR	5144248	Condition	! code	76:5:1629:1633	5144244	0	True				
ANR	5144249	UnaryOperationExpression	! code		5144244	0					
ANR	5144250	UnaryOperator	!		5144244	0					
ANR	5144251	Identifier	code		5144244	1					
ANR	5144252	CompoundStatement		2:12:13:13	5144244	1					
ANR	5144253	ReturnStatement	return NULL ;	77:2:1640:1651	5144244	0	True				
ANR	5144254	Identifier	NULL		5144244	0					
ANR	5144255	Statement	char	79:1:1657:1660	5144244	1	True				
ANR	5144256	Statement	*	79:6:1662:1662	5144244	2	True				
ANR	5144257	Statement	const	79:8:1664:1668	5144244	3	True				
ANR	5144258	ExpressionStatement	ret = malloc ( strlen ( code ) * 3 )	79:14:1670:1702	5144244	4	True				
ANR	5144259	AssignmentExpression	ret = malloc ( strlen ( code ) * 3 )		5144244	0		=			
ANR	5144260	Identifier	ret		5144244	0					
ANR	5144261	CallExpression	malloc ( strlen ( code ) * 3 )		5144244	1					
ANR	5144262	Callee	malloc		5144244	0					
ANR	5144263	Identifier	malloc		5144244	0					
ANR	5144264	ArgumentList	strlen ( code ) * 3		5144244	1					
ANR	5144265	Argument	strlen ( code ) * 3		5144244	0					
ANR	5144266	MultiplicativeExpression	strlen ( code ) * 3		5144244	0		*			
ANR	5144267	CallExpression	strlen ( code )		5144244	0					
ANR	5144268	Callee	strlen		5144244	0					
ANR	5144269	Identifier	strlen		5144244	0					
ANR	5144270	ArgumentList	code		5144244	1					
ANR	5144271	Argument	code		5144244	0					
ANR	5144272	Identifier	code		5144244	0					
ANR	5144273	PrimaryExpression	3		5144244	1					
ANR	5144274	IfStatement	if ( ! ret )		5144244	5					
ANR	5144275	Condition	! ret	80:5:1709:1712	5144244	0	True				
ANR	5144276	UnaryOperationExpression	! ret		5144244	0					
ANR	5144277	UnaryOperator	!		5144244	0					
ANR	5144278	Identifier	ret		5144244	1					
ANR	5144279	CompoundStatement		6:11:92:92	5144244	1					
ANR	5144280	ReturnStatement	return NULL ;	81:2:1719:1730	5144244	0	True				
ANR	5144281	Identifier	NULL		5144244	0					
ANR	5144282	ExpressionStatement	* ret = '\\0'	83:1:1736:1747	5144244	6	True				
ANR	5144283	AssignmentExpression	* ret = '\\0'		5144244	0		=			
ANR	5144284	UnaryOperationExpression	* ret		5144244	0					
ANR	5144285	UnaryOperator	*		5144244	0					
ANR	5144286	Identifier	ret		5144244	1					
ANR	5144287	PrimaryExpression	'\\0'		5144244	1					
ANR	5144288	IdentifierDeclStatement	char * out = ret ;	84:1:1750:1765	5144244	7	True				
ANR	5144289	IdentifierDecl	* out = ret		5144244	0					
ANR	5144290	IdentifierDeclType	char *		5144244	0					
ANR	5144291	Identifier	out		5144244	1					
ANR	5144292	AssignmentExpression	* out = ret		5144244	2		=			
ANR	5144293	Identifier	ret		5144244	0					
ANR	5144294	Identifier	ret		5144244	1					
ANR	5144295	IdentifierDeclStatement	"const char * tmp_code = strchr ( code , '=' ) ;"	85:1:1768:1809	5144244	8	True				
ANR	5144296	IdentifierDecl	"* tmp_code = strchr ( code , '=' )"		5144244	0					
ANR	5144297	IdentifierDeclType	const char *		5144244	0					
ANR	5144298	Identifier	tmp_code		5144244	1					
ANR	5144299	AssignmentExpression	"* tmp_code = strchr ( code , '=' )"		5144244	2		=			
ANR	5144300	Identifier	tmp_code		5144244	0					
ANR	5144301	CallExpression	"strchr ( code , '=' )"		5144244	1					
ANR	5144302	Callee	strchr		5144244	0					
ANR	5144303	Identifier	strchr		5144244	0					
ANR	5144304	ArgumentList	code		5144244	1					
ANR	5144305	Argument	code		5144244	0					
ANR	5144306	Identifier	code		5144244	0					
ANR	5144307	Argument	'='		5144244	1					
ANR	5144308	PrimaryExpression	'='		5144244	0					
ANR	5144309	IfStatement	if ( tmp_code )		5144244	9					
ANR	5144310	Condition	tmp_code	86:5:1816:1823	5144244	0	True				
ANR	5144311	Identifier	tmp_code		5144244	0					
ANR	5144312	CompoundStatement		12:15:203:203	5144244	1					
ANR	5144313	ExpressionStatement	code = tmp_code	87:2:1830:1845	5144244	0	True				
ANR	5144314	AssignmentExpression	code = tmp_code		5144244	0		=			
ANR	5144315	Identifier	code		5144244	0					
ANR	5144316	Identifier	tmp_code		5144244	1					
ANR	5144317	ForStatement	"for ( ; * code && * code != '[' && * code != '\\'' && * code != '""' ; code ++ )"		5144244	10					
ANR	5144318	Condition	"* code && * code != '[' && * code != '\\'' && * code != '""'"	89:8:1858:1914	5144244	0	True				
ANR	5144319	AndExpression	"* code && * code != '[' && * code != '\\'' && * code != '""'"		5144244	0		&&			
ANR	5144320	UnaryOperationExpression	* code		5144244	0					
ANR	5144321	UnaryOperator	*		5144244	0					
ANR	5144322	Identifier	code		5144244	1					
ANR	5144323	AndExpression	"* code != '[' && * code != '\\'' && * code != '""'"		5144244	1		&&			
ANR	5144324	EqualityExpression	* code != '['		5144244	0		!=			
ANR	5144325	UnaryOperationExpression	* code		5144244	0					
ANR	5144326	UnaryOperator	*		5144244	0					
ANR	5144327	Identifier	code		5144244	1					
ANR	5144328	PrimaryExpression	'['		5144244	1					
ANR	5144329	AndExpression	"* code != '\\'' && * code != '""'"		5144244	1		&&			
ANR	5144330	EqualityExpression	* code != '\\''		5144244	0		!=			
ANR	5144331	UnaryOperationExpression	* code		5144244	0					
ANR	5144332	UnaryOperator	*		5144244	0					
ANR	5144333	Identifier	code		5144244	1					
ANR	5144334	PrimaryExpression	'\\''		5144244	1					
ANR	5144335	EqualityExpression	"* code != '""'"		5144244	1		!=			
ANR	5144336	UnaryOperationExpression	* code		5144244	0					
ANR	5144337	UnaryOperator	*		5144244	0					
ANR	5144338	Identifier	code		5144244	1					
ANR	5144339	PrimaryExpression	"'""'"		5144244	1					
ANR	5144340	PostIncDecOperationExpression	code ++	90:20:1917:1922	5144244	1	True				
ANR	5144341	Identifier	code		5144244	0					
ANR	5144342	IncDec	++		5144244	1					
ANR	5144343	CompoundStatement		16:28:302:302	5144244	2					
ANR	5144344	ExpressionStatement	code = skip_comment_py ( code )	91:2:1929:1958	5144244	0	True				
ANR	5144345	AssignmentExpression	code = skip_comment_py ( code )		5144244	0		=			
ANR	5144346	Identifier	code		5144244	0					
ANR	5144347	CallExpression	skip_comment_py ( code )		5144244	1					
ANR	5144348	Callee	skip_comment_py		5144244	0					
ANR	5144349	Identifier	skip_comment_py		5144244	0					
ANR	5144350	ArgumentList	code		5144244	1					
ANR	5144351	Argument	code		5144244	0					
ANR	5144352	Identifier	code		5144244	0					
ANR	5144353	IfStatement	if ( * code == '[' )		5144244	11					
ANR	5144354	Condition	* code == '['	93:5:1968:1979	5144244	0	True				
ANR	5144355	EqualityExpression	* code == '['		5144244	0		==			
ANR	5144356	UnaryOperationExpression	* code		5144244	0					
ANR	5144357	UnaryOperator	*		5144244	0					
ANR	5144358	Identifier	code		5144244	1					
ANR	5144359	PrimaryExpression	'['		5144244	1					
ANR	5144360	CompoundStatement		19:19:359:359	5144244	1					
ANR	5144361	ExpressionStatement	"out = r_hex_from_py_array ( out , code )"	94:2:1986:2023	5144244	0	True				
ANR	5144362	AssignmentExpression	"out = r_hex_from_py_array ( out , code )"		5144244	0		=			
ANR	5144363	Identifier	out		5144244	0					
ANR	5144364	CallExpression	"r_hex_from_py_array ( out , code )"		5144244	1					
ANR	5144365	Callee	r_hex_from_py_array		5144244	0					
ANR	5144366	Identifier	r_hex_from_py_array		5144244	0					
ANR	5144367	ArgumentList	out		5144244	1					
ANR	5144368	Argument	out		5144244	0					
ANR	5144369	Identifier	out		5144244	0					
ANR	5144370	Argument	code		5144244	1					
ANR	5144371	Identifier	code		5144244	0					
ANR	5144372	ElseStatement	else		5144244	0					
ANR	5144373	IfStatement	"if ( * code == '""' || * code == '\\'' )"		5144244	0					
ANR	5144374	Condition	"* code == '""' || * code == '\\''"	95:12:2037:2065	5144244	0	True				
ANR	5144375	OrExpression	"* code == '""' || * code == '\\''"		5144244	0		||			
ANR	5144376	EqualityExpression	"* code == '""'"		5144244	0		==			
ANR	5144377	UnaryOperationExpression	* code		5144244	0					
ANR	5144378	UnaryOperator	*		5144244	0					
ANR	5144379	Identifier	code		5144244	1					
ANR	5144380	PrimaryExpression	"'""'"		5144244	1					
ANR	5144381	EqualityExpression	* code == '\\''		5144244	1		==			
ANR	5144382	UnaryOperationExpression	* code		5144244	0					
ANR	5144383	UnaryOperator	*		5144244	0					
ANR	5144384	Identifier	code		5144244	1					
ANR	5144385	PrimaryExpression	'\\''		5144244	1					
ANR	5144386	CompoundStatement		21:43:445:445	5144244	1					
ANR	5144387	ExpressionStatement	"out = r_hex_from_py_str ( out , code )"	96:2:2072:2107	5144244	0	True				
ANR	5144388	AssignmentExpression	"out = r_hex_from_py_str ( out , code )"		5144244	0		=			
ANR	5144389	Identifier	out		5144244	0					
ANR	5144390	CallExpression	"r_hex_from_py_str ( out , code )"		5144244	1					
ANR	5144391	Callee	r_hex_from_py_str		5144244	0					
ANR	5144392	Identifier	r_hex_from_py_str		5144244	0					
ANR	5144393	ArgumentList	out		5144244	1					
ANR	5144394	Argument	out		5144244	0					
ANR	5144395	Identifier	out		5144244	0					
ANR	5144396	Argument	code		5144244	1					
ANR	5144397	Identifier	code		5144244	0					
ANR	5144398	IfStatement	if ( ! out )		5144244	12					
ANR	5144399	Condition	! out	98:5:2117:2120	5144244	0	True				
ANR	5144400	UnaryOperationExpression	! out		5144244	0					
ANR	5144401	UnaryOperator	!		5144244	0					
ANR	5144402	Identifier	out		5144244	1					
ANR	5144403	CompoundStatement		24:11:500:500	5144244	1					
ANR	5144404	ExpressionStatement	free ( ret )	99:2:2127:2137	5144244	0	True				
ANR	5144405	CallExpression	free ( ret )		5144244	0					
ANR	5144406	Callee	free		5144244	0					
ANR	5144407	Identifier	free		5144244	0					
ANR	5144408	ArgumentList	ret		5144244	1					
ANR	5144409	Argument	ret		5144244	0					
ANR	5144410	Identifier	ret		5144244	0					
ANR	5144411	ReturnStatement	return NULL ;	100:2:2141:2152	5144244	1	True				
ANR	5144412	Identifier	NULL		5144244	0					
ANR	5144413	ExpressionStatement	* out = '\\0'	102:1:2158:2169	5144244	13	True				
ANR	5144414	AssignmentExpression	* out = '\\0'		5144244	0		=			
ANR	5144415	UnaryOperationExpression	* out		5144244	0					
ANR	5144416	UnaryOperator	*		5144244	0					
ANR	5144417	Identifier	out		5144244	1					
ANR	5144418	PrimaryExpression	'\\0'		5144244	1					
ANR	5144419	ReturnStatement	return ret ;	103:1:2172:2182	5144244	14	True				
ANR	5144420	Identifier	ret		5144244	0					
ANR	5144421	ReturnType	R_API char *		5144244	1					
ANR	5144422	Identifier	r_hex_from_py		5144244	2					
ANR	5144423	ParameterList	const char * code		5144244	3					
ANR	5144424	Parameter	const char * code	75:26:1604:1619	5144244	0	True				
ANR	5144425	ParameterType	const char *		5144244	0					
ANR	5144426	Identifier	code		5144244	1					
ANR	5144427	CFGEntryNode	ENTRY		5144244		True				
ANR	5144428	CFGExitNode	EXIT		5144244		True				
ANR	5144429	Symbol	ret		5144244						
ANR	5144430	Symbol	malloc		5144244						
ANR	5144431	Symbol	tmp_code		5144244						
ANR	5144432	Symbol	code		5144244						
ANR	5144433	Symbol	NULL		5144244						
ANR	5144434	Symbol	strchr		5144244						
ANR	5144435	Symbol	* ret		5144244						
ANR	5144436	Symbol	out		5144244						
ANR	5144437	Symbol	strlen		5144244						
ANR	5144438	Symbol	* out		5144244						
ANR	5144439	Symbol	skip_comment_py		5144244						
ANR	5144440	Symbol	r_hex_from_py_str		5144244						
ANR	5144441	Symbol	r_hex_from_py_array		5144244						
ANR	5144442	Symbol	* code		5144244						
ANR	5144443	Function	r_hex_from_c_str	106:0:2187:3177							
ANR	5144444	FunctionDef	"r_hex_from_c_str (char * out , const char * * code)"		5144443	0					
ANR	5144445	CompoundStatement		106:59:2246:3177	5144443	0					
ANR	5144446	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdefABCDEF"" ;"	107:1:2249:2292	5144443	0	True				
ANR	5144447	IdentifierDecl	"abc [ ] = ""0123456789abcdefABCDEF"""		5144443	0					
ANR	5144448	IdentifierDeclType	const char [ ]		5144443	0					
ANR	5144449	Identifier	abc		5144443	1					
ANR	5144450	AssignmentExpression	"abc [ ] = ""0123456789abcdefABCDEF"""		5144443	2		=			
ANR	5144451	Identifier	abc		5144443	0					
ANR	5144452	PrimaryExpression	"""0123456789abcdefABCDEF"""		5144443	1					
ANR	5144453	IdentifierDeclStatement	const char * iter = * code ;	108:1:2295:2319	5144443	1	True				
ANR	5144454	IdentifierDecl	* iter = * code		5144443	0					
ANR	5144455	IdentifierDeclType	const char *		5144443	0					
ANR	5144456	Identifier	iter		5144443	1					
ANR	5144457	AssignmentExpression	* iter = * code		5144443	2		=			
ANR	5144458	Identifier	iter		5144443	0					
ANR	5144459	UnaryOperationExpression	* code		5144443	1					
ANR	5144460	UnaryOperator	*		5144443	0					
ANR	5144461	Identifier	code		5144443	1					
ANR	5144462	IfStatement	"if ( * iter != '\\'' && * iter != '""' )"		5144443	2					
ANR	5144463	Condition	"* iter != '\\'' && * iter != '""'"	109:5:2326:2354	5144443	0	True				
ANR	5144464	AndExpression	"* iter != '\\'' && * iter != '""'"		5144443	0		&&			
ANR	5144465	EqualityExpression	* iter != '\\''		5144443	0		!=			
ANR	5144466	UnaryOperationExpression	* iter		5144443	0					
ANR	5144467	UnaryOperator	*		5144443	0					
ANR	5144468	Identifier	iter		5144443	1					
ANR	5144469	PrimaryExpression	'\\''		5144443	1					
ANR	5144470	EqualityExpression	"* iter != '""'"		5144443	1		!=			
ANR	5144471	UnaryOperationExpression	* iter		5144443	0					
ANR	5144472	UnaryOperator	*		5144443	0					
ANR	5144473	Identifier	iter		5144443	1					
ANR	5144474	PrimaryExpression	"'""'"		5144443	1					
ANR	5144475	CompoundStatement		4:36:110:110	5144443	1					
ANR	5144476	ReturnStatement	return NULL ;	110:2:2361:2372	5144443	0	True				
ANR	5144477	Identifier	NULL		5144443	0					
ANR	5144478	IdentifierDeclStatement	const char end_char = * iter ;	112:1:2378:2405	5144443	3	True				
ANR	5144479	IdentifierDecl	end_char = * iter		5144443	0					
ANR	5144480	IdentifierDeclType	const char		5144443	0					
ANR	5144481	Identifier	end_char		5144443	1					
ANR	5144482	AssignmentExpression	end_char = * iter		5144443	2		=			
ANR	5144483	Identifier	end_char		5144443	0					
ANR	5144484	UnaryOperationExpression	* iter		5144443	1					
ANR	5144485	UnaryOperator	*		5144443	0					
ANR	5144486	Identifier	iter		5144443	1					
ANR	5144487	ExpressionStatement	iter ++	113:1:2408:2414	5144443	4	True				
ANR	5144488	PostIncDecOperationExpression	iter ++		5144443	0					
ANR	5144489	Identifier	iter		5144443	0					
ANR	5144490	IncDec	++		5144443	1					
ANR	5144491	ForStatement	for ( ; * iter && * iter != end_char ; iter ++ )		5144443	5					
ANR	5144492	Condition	* iter && * iter != end_char	114:8:2424:2449	5144443	0	True				
ANR	5144493	AndExpression	* iter && * iter != end_char		5144443	0		&&			
ANR	5144494	UnaryOperationExpression	* iter		5144443	0					
ANR	5144495	UnaryOperator	*		5144443	0					
ANR	5144496	Identifier	iter		5144443	1					
ANR	5144497	EqualityExpression	* iter != end_char		5144443	1		!=			
ANR	5144498	UnaryOperationExpression	* iter		5144443	0					
ANR	5144499	UnaryOperator	*		5144443	0					
ANR	5144500	Identifier	iter		5144443	1					
ANR	5144501	Identifier	end_char		5144443	1					
ANR	5144502	PostIncDecOperationExpression	iter ++	114:36:2452:2457	5144443	1	True				
ANR	5144503	Identifier	iter		5144443	0					
ANR	5144504	IncDec	++		5144443	1					
ANR	5144505	CompoundStatement		9:44:213:213	5144443	2					
ANR	5144506	IfStatement	if ( * iter == '\\\\' )		5144443	0					
ANR	5144507	Condition	* iter == '\\\\'	115:6:2468:2480	5144443	0	True				
ANR	5144508	EqualityExpression	* iter == '\\\\'		5144443	0		==			
ANR	5144509	UnaryOperationExpression	* iter		5144443	0					
ANR	5144510	UnaryOperator	*		5144443	0					
ANR	5144511	Identifier	iter		5144443	1					
ANR	5144512	PrimaryExpression	'\\\\'		5144443	1					
ANR	5144513	CompoundStatement		10:21:236:236	5144443	1					
ANR	5144514	ExpressionStatement	iter ++	116:3:2488:2494	5144443	0	True				
ANR	5144515	PostIncDecOperationExpression	iter ++		5144443	0					
ANR	5144516	Identifier	iter		5144443	0					
ANR	5144517	IncDec	++		5144443	1					
ANR	5144518	SwitchStatement	switch ( iter [ 0 ] )		5144443	1					
ANR	5144519	Condition	iter [ 0 ]	117:11:2507:2513	5144443	0	True				
ANR	5144520	ArrayIndexing	iter [ 0 ]		5144443	0					
ANR	5144521	Identifier	iter		5144443	0					
ANR	5144522	PrimaryExpression	0		5144443	1					
ANR	5144523	CompoundStatement		12:20:269:269	5144443	1					
ANR	5144524	Label	case 'e' :	118:3:2521:2529	5144443	0	True				
ANR	5144525	ExpressionStatement	* out ++ = '1'	118:13:2531:2541	5144443	1	True				
ANR	5144526	AssignmentExpression	* out ++ = '1'		5144443	0		=			
ANR	5144527	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144528	UnaryOperator	*		5144443	0					
ANR	5144529	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144530	Identifier	out		5144443	0					
ANR	5144531	IncDec	++		5144443	1					
ANR	5144532	PrimaryExpression	'1'		5144443	1					
ANR	5144533	ExpressionStatement	* out ++ = 'b'	118:24:2542:2552	5144443	2	True				
ANR	5144534	AssignmentExpression	* out ++ = 'b'		5144443	0		=			
ANR	5144535	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144536	UnaryOperator	*		5144443	0					
ANR	5144537	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144538	Identifier	out		5144443	0					
ANR	5144539	IncDec	++		5144443	1					
ANR	5144540	PrimaryExpression	'b'		5144443	1					
ANR	5144541	BreakStatement	break ;	118:35:2553:2558	5144443	3	True				
ANR	5144542	Label	case 'r' :	119:3:2563:2571	5144443	4	True				
ANR	5144543	ExpressionStatement	* out ++ = '0'	119:13:2573:2583	5144443	5	True				
ANR	5144544	AssignmentExpression	* out ++ = '0'		5144443	0		=			
ANR	5144545	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144546	UnaryOperator	*		5144443	0					
ANR	5144547	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144548	Identifier	out		5144443	0					
ANR	5144549	IncDec	++		5144443	1					
ANR	5144550	PrimaryExpression	'0'		5144443	1					
ANR	5144551	ExpressionStatement	* out ++ = 'd'	119:24:2584:2594	5144443	6	True				
ANR	5144552	AssignmentExpression	* out ++ = 'd'		5144443	0		=			
ANR	5144553	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144554	UnaryOperator	*		5144443	0					
ANR	5144555	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144556	Identifier	out		5144443	0					
ANR	5144557	IncDec	++		5144443	1					
ANR	5144558	PrimaryExpression	'd'		5144443	1					
ANR	5144559	BreakStatement	break ;	119:35:2595:2600	5144443	7	True				
ANR	5144560	Label	case 'n' :	120:3:2605:2613	5144443	8	True				
ANR	5144561	ExpressionStatement	* out ++ = '0'	120:13:2615:2625	5144443	9	True				
ANR	5144562	AssignmentExpression	* out ++ = '0'		5144443	0		=			
ANR	5144563	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144564	UnaryOperator	*		5144443	0					
ANR	5144565	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144566	Identifier	out		5144443	0					
ANR	5144567	IncDec	++		5144443	1					
ANR	5144568	PrimaryExpression	'0'		5144443	1					
ANR	5144569	ExpressionStatement	* out ++ = 'a'	120:24:2626:2636	5144443	10	True				
ANR	5144570	AssignmentExpression	* out ++ = 'a'		5144443	0		=			
ANR	5144571	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144572	UnaryOperator	*		5144443	0					
ANR	5144573	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144574	Identifier	out		5144443	0					
ANR	5144575	IncDec	++		5144443	1					
ANR	5144576	PrimaryExpression	'a'		5144443	1					
ANR	5144577	BreakStatement	break ;	120:35:2637:2642	5144443	11	True				
ANR	5144578	Label	case 'x' :	121:3:2647:2655	5144443	12	True				
ANR	5144579	CompoundStatement		18:4:438:454	5144443	13					
ANR	5144580	IdentifierDeclStatement	ut8 c1 = iter [ 1 ] ;	122:4:2663:2679	5144443	0	True				
ANR	5144581	IdentifierDecl	c1 = iter [ 1 ]		5144443	0					
ANR	5144582	IdentifierDeclType	ut8		5144443	0					
ANR	5144583	Identifier	c1		5144443	1					
ANR	5144584	AssignmentExpression	c1 = iter [ 1 ]		5144443	2		=			
ANR	5144585	Identifier	c1		5144443	0					
ANR	5144586	ArrayIndexing	iter [ 1 ]		5144443	1					
ANR	5144587	Identifier	iter		5144443	0					
ANR	5144588	PrimaryExpression	1		5144443	1					
ANR	5144589	IdentifierDeclStatement	ut8 c2 = iter [ 2 ] ;	123:4:2685:2701	5144443	1	True				
ANR	5144590	IdentifierDecl	c2 = iter [ 2 ]		5144443	0					
ANR	5144591	IdentifierDeclType	ut8		5144443	0					
ANR	5144592	Identifier	c2		5144443	1					
ANR	5144593	AssignmentExpression	c2 = iter [ 2 ]		5144443	2		=			
ANR	5144594	Identifier	c2		5144443	0					
ANR	5144595	ArrayIndexing	iter [ 2 ]		5144443	1					
ANR	5144596	Identifier	iter		5144443	0					
ANR	5144597	PrimaryExpression	2		5144443	1					
ANR	5144598	ExpressionStatement	iter += 2	124:4:2707:2716	5144443	2	True				
ANR	5144599	AssignmentExpression	iter += 2		5144443	0		+=			
ANR	5144600	Identifier	iter		5144443	0					
ANR	5144601	PrimaryExpression	2		5144443	1					
ANR	5144602	IfStatement	if ( c1 == '\\0' || c2 == '\\0' )		5144443	3					
ANR	5144603	Condition	c1 == '\\0' || c2 == '\\0'	125:8:2726:2749	5144443	0	True				
ANR	5144604	OrExpression	c1 == '\\0' || c2 == '\\0'		5144443	0		||			
ANR	5144605	EqualityExpression	c1 == '\\0'		5144443	0		==			
ANR	5144606	Identifier	c1		5144443	0					
ANR	5144607	PrimaryExpression	'\\0'		5144443	1					
ANR	5144608	EqualityExpression	c2 == '\\0'		5144443	1		==			
ANR	5144609	Identifier	c2		5144443	0					
ANR	5144610	PrimaryExpression	'\\0'		5144443	1					
ANR	5144611	CompoundStatement		20:34:505:505	5144443	1					
ANR	5144612	ReturnStatement	return NULL ;	126:5:2759:2770	5144443	0	True				
ANR	5144613	Identifier	NULL		5144443	0					
ANR	5144614	ElseStatement	else		5144443	0					
ANR	5144615	IfStatement	"if ( strchr ( abc , c1 ) && strchr ( abc , c2 ) )"		5144443	0					
ANR	5144616	Condition	"strchr ( abc , c1 ) && strchr ( abc , c2 )"	127:15:2787:2822	5144443	0	True				
ANR	5144617	AndExpression	"strchr ( abc , c1 ) && strchr ( abc , c2 )"		5144443	0		&&			
ANR	5144618	CallExpression	"strchr ( abc , c1 )"		5144443	0					
ANR	5144619	Callee	strchr		5144443	0					
ANR	5144620	Identifier	strchr		5144443	0					
ANR	5144621	ArgumentList	abc		5144443	1					
ANR	5144622	Argument	abc		5144443	0					
ANR	5144623	Identifier	abc		5144443	0					
ANR	5144624	Argument	c1		5144443	1					
ANR	5144625	Identifier	c1		5144443	0					
ANR	5144626	CallExpression	"strchr ( abc , c2 )"		5144443	1					
ANR	5144627	Callee	strchr		5144443	0					
ANR	5144628	Identifier	strchr		5144443	0					
ANR	5144629	ArgumentList	abc		5144443	1					
ANR	5144630	Argument	abc		5144443	0					
ANR	5144631	Identifier	abc		5144443	0					
ANR	5144632	Argument	c2		5144443	1					
ANR	5144633	Identifier	c2		5144443	0					
ANR	5144634	CompoundStatement		22:53:578:578	5144443	1					
ANR	5144635	ExpressionStatement	* out ++ = tolower ( c1 )	128:5:2832:2853	5144443	0	True				
ANR	5144636	AssignmentExpression	* out ++ = tolower ( c1 )		5144443	0		=			
ANR	5144637	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144638	UnaryOperator	*		5144443	0					
ANR	5144639	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144640	Identifier	out		5144443	0					
ANR	5144641	IncDec	++		5144443	1					
ANR	5144642	CallExpression	tolower ( c1 )		5144443	1					
ANR	5144643	Callee	tolower		5144443	0					
ANR	5144644	Identifier	tolower		5144443	0					
ANR	5144645	ArgumentList	c1		5144443	1					
ANR	5144646	Argument	c1		5144443	0					
ANR	5144647	Identifier	c1		5144443	0					
ANR	5144648	ExpressionStatement	* out ++ = tolower ( c2 )	129:5:2860:2881	5144443	1	True				
ANR	5144649	AssignmentExpression	* out ++ = tolower ( c2 )		5144443	0		=			
ANR	5144650	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144651	UnaryOperator	*		5144443	0					
ANR	5144652	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144653	Identifier	out		5144443	0					
ANR	5144654	IncDec	++		5144443	1					
ANR	5144655	CallExpression	tolower ( c2 )		5144443	1					
ANR	5144656	Callee	tolower		5144443	0					
ANR	5144657	Identifier	tolower		5144443	0					
ANR	5144658	ArgumentList	c2		5144443	1					
ANR	5144659	Argument	c2		5144443	0					
ANR	5144660	Identifier	c2		5144443	0					
ANR	5144661	ElseStatement	else		5144443	0					
ANR	5144662	CompoundStatement		25:11:647:647	5144443	0					
ANR	5144663	ReturnStatement	return NULL ;	131:5:2901:2912	5144443	0	True				
ANR	5144664	Identifier	NULL		5144443	0					
ANR	5144665	BreakStatement	break ;	133:4:2924:2929	5144443	4	True				
ANR	5144666	Label	default :	135:3:2941:2948	5144443	14	True				
ANR	5144667	Identifier	default		5144443	0					
ANR	5144668	IfStatement	if ( iter [ 0 ] == end_char )		5144443	15					
ANR	5144669	Condition	iter [ 0 ] == end_char	136:8:2958:2976	5144443	0	True				
ANR	5144670	EqualityExpression	iter [ 0 ] == end_char		5144443	0		==			
ANR	5144671	ArrayIndexing	iter [ 0 ]		5144443	0					
ANR	5144672	Identifier	iter		5144443	0					
ANR	5144673	PrimaryExpression	0		5144443	1					
ANR	5144674	Identifier	end_char		5144443	1					
ANR	5144675	CompoundStatement		31:29:732:732	5144443	1					
ANR	5144676	ExpressionStatement	* out ++ = abc [ * iter >> 4 ]	137:5:2986:3010	5144443	0	True				
ANR	5144677	AssignmentExpression	* out ++ = abc [ * iter >> 4 ]		5144443	0		=			
ANR	5144678	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144679	UnaryOperator	*		5144443	0					
ANR	5144680	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144681	Identifier	out		5144443	0					
ANR	5144682	IncDec	++		5144443	1					
ANR	5144683	ArrayIndexing	abc [ * iter >> 4 ]		5144443	1					
ANR	5144684	Identifier	abc		5144443	0					
ANR	5144685	ShiftExpression	* iter >> 4		5144443	1		>>			
ANR	5144686	UnaryOperationExpression	* iter		5144443	0					
ANR	5144687	UnaryOperator	*		5144443	0					
ANR	5144688	Identifier	iter		5144443	1					
ANR	5144689	PrimaryExpression	4		5144443	1					
ANR	5144690	ExpressionStatement	* out ++ = abc [ * iter & 0xf ]	138:5:3017:3042	5144443	1	True				
ANR	5144691	AssignmentExpression	* out ++ = abc [ * iter & 0xf ]		5144443	0		=			
ANR	5144692	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144693	UnaryOperator	*		5144443	0					
ANR	5144694	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144695	Identifier	out		5144443	0					
ANR	5144696	IncDec	++		5144443	1					
ANR	5144697	ArrayIndexing	abc [ * iter & 0xf ]		5144443	1					
ANR	5144698	Identifier	abc		5144443	0					
ANR	5144699	BitAndExpression	* iter & 0xf		5144443	1		&			
ANR	5144700	UnaryOperationExpression	* iter		5144443	0					
ANR	5144701	UnaryOperator	*		5144443	0					
ANR	5144702	Identifier	iter		5144443	1					
ANR	5144703	PrimaryExpression	0xf		5144443	1					
ANR	5144704	ReturnStatement	return NULL ;	140:4:3054:3065	5144443	16	True				
ANR	5144705	Identifier	NULL		5144443	0					
ANR	5144706	ElseStatement	else		5144443	0					
ANR	5144707	CompoundStatement		37:9:834:834	5144443	0					
ANR	5144708	ExpressionStatement	* out ++ = abc [ * iter >> 4 ]	143:3:3086:3110	5144443	0	True				
ANR	5144709	AssignmentExpression	* out ++ = abc [ * iter >> 4 ]		5144443	0		=			
ANR	5144710	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144711	UnaryOperator	*		5144443	0					
ANR	5144712	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144713	Identifier	out		5144443	0					
ANR	5144714	IncDec	++		5144443	1					
ANR	5144715	ArrayIndexing	abc [ * iter >> 4 ]		5144443	1					
ANR	5144716	Identifier	abc		5144443	0					
ANR	5144717	ShiftExpression	* iter >> 4		5144443	1		>>			
ANR	5144718	UnaryOperationExpression	* iter		5144443	0					
ANR	5144719	UnaryOperator	*		5144443	0					
ANR	5144720	Identifier	iter		5144443	1					
ANR	5144721	PrimaryExpression	4		5144443	1					
ANR	5144722	ExpressionStatement	* out ++ = abc [ * iter & 0xf ]	144:3:3115:3140	5144443	1	True				
ANR	5144723	AssignmentExpression	* out ++ = abc [ * iter & 0xf ]		5144443	0		=			
ANR	5144724	UnaryOperationExpression	* out ++		5144443	0					
ANR	5144725	UnaryOperator	*		5144443	0					
ANR	5144726	PostIncDecOperationExpression	out ++		5144443	1					
ANR	5144727	Identifier	out		5144443	0					
ANR	5144728	IncDec	++		5144443	1					
ANR	5144729	ArrayIndexing	abc [ * iter & 0xf ]		5144443	1					
ANR	5144730	Identifier	abc		5144443	0					
ANR	5144731	BitAndExpression	* iter & 0xf		5144443	1		&			
ANR	5144732	UnaryOperationExpression	* iter		5144443	0					
ANR	5144733	UnaryOperator	*		5144443	0					
ANR	5144734	Identifier	iter		5144443	1					
ANR	5144735	PrimaryExpression	0xf		5144443	1					
ANR	5144736	ExpressionStatement	* code = iter	147:1:3150:3162	5144443	6	True				
ANR	5144737	AssignmentExpression	* code = iter		5144443	0		=			
ANR	5144738	UnaryOperationExpression	* code		5144443	0					
ANR	5144739	UnaryOperator	*		5144443	0					
ANR	5144740	Identifier	code		5144443	1					
ANR	5144741	Identifier	iter		5144443	1					
ANR	5144742	ReturnStatement	return out ;	148:1:3165:3175	5144443	7	True				
ANR	5144743	Identifier	out		5144443	0					
ANR	5144744	ReturnType	R_API char *		5144443	1					
ANR	5144745	Identifier	r_hex_from_c_str		5144443	2					
ANR	5144746	ParameterList	"char * out , const char * * code"		5144443	3					
ANR	5144747	Parameter	char * out	106:29:2216:2224	5144443	0	True				
ANR	5144748	ParameterType	char *		5144443	0					
ANR	5144749	Identifier	out		5144443	1					
ANR	5144750	Parameter	const char * * code	106:40:2227:2243	5144443	1	True				
ANR	5144751	ParameterType	const char * *		5144443	0					
ANR	5144752	Identifier	code		5144443	1					
ANR	5144753	CFGEntryNode	ENTRY		5144443		True				
ANR	5144754	CFGExitNode	EXIT		5144443		True				
ANR	5144755	Symbol	* out ++		5144443						
ANR	5144756	Symbol	code		5144443						
ANR	5144757	Symbol	abc		5144443						
ANR	5144758	Symbol	NULL		5144443						
ANR	5144759	Symbol	tolower		5144443						
ANR	5144760	Symbol	end_char		5144443						
ANR	5144761	Symbol	iter		5144443						
ANR	5144762	Symbol	strchr		5144443						
ANR	5144763	Symbol	c1		5144443						
ANR	5144764	Symbol	out		5144443						
ANR	5144765	Symbol	c2		5144443						
ANR	5144766	Symbol	* iter		5144443						
ANR	5144767	Symbol	* abc		5144443						
ANR	5144768	Symbol	* * iter		5144443						
ANR	5144769	Symbol	* code		5144443						
ANR	5144770	Function	skip_comment_c	151:0:3180:3512							
ANR	5144771	FunctionDef	skip_comment_c (const char * code)		5144770	0					
ANR	5144772	CompoundStatement		151:45:3225:3512	5144770	0					
ANR	5144773	IfStatement	"if ( ! strncmp ( code , ""/*"" , 2 ) )"		5144770	0					
ANR	5144774	Condition	"! strncmp ( code , ""/*"" , 2 )"	152:5:3232:3255	5144770	0	True				
ANR	5144775	UnaryOperationExpression	"! strncmp ( code , ""/*"" , 2 )"		5144770	0					
ANR	5144776	UnaryOperator	!		5144770	0					
ANR	5144777	CallExpression	"strncmp ( code , ""/*"" , 2 )"		5144770	1					
ANR	5144778	Callee	strncmp		5144770	0					
ANR	5144779	Identifier	strncmp		5144770	0					
ANR	5144780	ArgumentList	code		5144770	1					
ANR	5144781	Argument	code		5144770	0					
ANR	5144782	Identifier	code		5144770	0					
ANR	5144783	Argument	"""/*"""		5144770	1					
ANR	5144784	PrimaryExpression	"""/*"""		5144770	0					
ANR	5144785	Argument	2		5144770	2					
ANR	5144786	PrimaryExpression	2		5144770	0					
ANR	5144787	CompoundStatement		3:2:36:67	5144770	1					
ANR	5144788	IdentifierDeclStatement	"char * end = strstr ( code , ""*/"" ) ;"	153:2:3262:3293	5144770	0	True				
ANR	5144789	IdentifierDecl	"* end = strstr ( code , ""*/"" )"		5144770	0					
ANR	5144790	IdentifierDeclType	char *		5144770	0					
ANR	5144791	Identifier	end		5144770	1					
ANR	5144792	AssignmentExpression	"* end = strstr ( code , ""*/"" )"		5144770	2		=			
ANR	5144793	Identifier	end		5144770	0					
ANR	5144794	CallExpression	"strstr ( code , ""*/"" )"		5144770	1					
ANR	5144795	Callee	strstr		5144770	0					
ANR	5144796	Identifier	strstr		5144770	0					
ANR	5144797	ArgumentList	code		5144770	1					
ANR	5144798	Argument	code		5144770	0					
ANR	5144799	Identifier	code		5144770	0					
ANR	5144800	Argument	"""*/"""		5144770	1					
ANR	5144801	PrimaryExpression	"""*/"""		5144770	0					
ANR	5144802	IfStatement	if ( end )		5144770	1					
ANR	5144803	Condition	end	154:6:3301:3303	5144770	0	True				
ANR	5144804	Identifier	end		5144770	0					
ANR	5144805	CompoundStatement		4:11:80:80	5144770	1					
ANR	5144806	ExpressionStatement	code = end + 2	155:3:3311:3325	5144770	0	True				
ANR	5144807	AssignmentExpression	code = end + 2		5144770	0		=			
ANR	5144808	Identifier	code		5144770	0					
ANR	5144809	AdditiveExpression	end + 2		5144770	1		+			
ANR	5144810	Identifier	end		5144770	0					
ANR	5144811	PrimaryExpression	2		5144770	1					
ANR	5144812	ElseStatement	else		5144770	0					
ANR	5144813	CompoundStatement		6:9:110:110	5144770	0					
ANR	5144814	ExpressionStatement	"eprintf ( ""Missing closing comment\\n"" )"	157:3:3341:3378	5144770	0	True				
ANR	5144815	CallExpression	"eprintf ( ""Missing closing comment\\n"" )"		5144770	0					
ANR	5144816	Callee	eprintf		5144770	0					
ANR	5144817	Identifier	eprintf		5144770	0					
ANR	5144818	ArgumentList	"""Missing closing comment\\n"""		5144770	1					
ANR	5144819	Argument	"""Missing closing comment\\n"""		5144770	0					
ANR	5144820	PrimaryExpression	"""Missing closing comment\\n"""		5144770	0					
ANR	5144821	ElseStatement	else		5144770	0					
ANR	5144822	IfStatement	"if ( ! strncmp ( code , ""//"" , 2 ) )"		5144770	0					
ANR	5144823	Condition	"! strncmp ( code , ""//"" , 2 )"	159:12:3396:3419	5144770	0	True				
ANR	5144824	UnaryOperationExpression	"! strncmp ( code , ""//"" , 2 )"		5144770	0					
ANR	5144825	UnaryOperator	!		5144770	0					
ANR	5144826	CallExpression	"strncmp ( code , ""//"" , 2 )"		5144770	1					
ANR	5144827	Callee	strncmp		5144770	0					
ANR	5144828	Identifier	strncmp		5144770	0					
ANR	5144829	ArgumentList	code		5144770	1					
ANR	5144830	Argument	code		5144770	0					
ANR	5144831	Identifier	code		5144770	0					
ANR	5144832	Argument	"""//"""		5144770	1					
ANR	5144833	PrimaryExpression	"""//"""		5144770	0					
ANR	5144834	Argument	2		5144770	2					
ANR	5144835	PrimaryExpression	2		5144770	0					
ANR	5144836	CompoundStatement		10:2:200:231	5144770	1					
ANR	5144837	IdentifierDeclStatement	"char * end = strchr ( code , '\\n' ) ;"	160:2:3426:3457	5144770	0	True				
ANR	5144838	IdentifierDecl	"* end = strchr ( code , '\\n' )"		5144770	0					
ANR	5144839	IdentifierDeclType	char *		5144770	0					
ANR	5144840	Identifier	end		5144770	1					
ANR	5144841	AssignmentExpression	"* end = strchr ( code , '\\n' )"		5144770	2		=			
ANR	5144842	Identifier	end		5144770	0					
ANR	5144843	CallExpression	"strchr ( code , '\\n' )"		5144770	1					
ANR	5144844	Callee	strchr		5144770	0					
ANR	5144845	Identifier	strchr		5144770	0					
ANR	5144846	ArgumentList	code		5144770	1					
ANR	5144847	Argument	code		5144770	0					
ANR	5144848	Identifier	code		5144770	0					
ANR	5144849	Argument	'\\n'		5144770	1					
ANR	5144850	PrimaryExpression	'\\n'		5144770	0					
ANR	5144851	IfStatement	if ( end )		5144770	1					
ANR	5144852	Condition	end	161:6:3465:3467	5144770	0	True				
ANR	5144853	Identifier	end		5144770	0					
ANR	5144854	CompoundStatement		11:11:244:244	5144770	1					
ANR	5144855	ExpressionStatement	code = end + 2	162:3:3475:3489	5144770	0	True				
ANR	5144856	AssignmentExpression	code = end + 2		5144770	0		=			
ANR	5144857	Identifier	code		5144770	0					
ANR	5144858	AdditiveExpression	end + 2		5144770	1		+			
ANR	5144859	Identifier	end		5144770	0					
ANR	5144860	PrimaryExpression	2		5144770	1					
ANR	5144861	ReturnStatement	return code ;	165:1:3499:3510	5144770	1	True				
ANR	5144862	Identifier	code		5144770	0					
ANR	5144863	ReturnType	const char *		5144770	1					
ANR	5144864	Identifier	skip_comment_c		5144770	2					
ANR	5144865	ParameterList	const char * code		5144770	3					
ANR	5144866	Parameter	const char * code	151:27:3207:3222	5144770	0	True				
ANR	5144867	ParameterType	const char *		5144770	0					
ANR	5144868	Identifier	code		5144770	1					
ANR	5144869	CFGEntryNode	ENTRY		5144770		True				
ANR	5144870	CFGExitNode	EXIT		5144770		True				
ANR	5144871	Symbol	strncmp		5144770						
ANR	5144872	Symbol	code		5144770						
ANR	5144873	Symbol	strstr		5144770						
ANR	5144874	Symbol	strchr		5144770						
ANR	5144875	Symbol	end		5144770						
ANR	5144876	Function	r_hex_from_c_array	168:0:3515:4236							
ANR	5144877	FunctionDef	"r_hex_from_c_array (char * out , const char * code)"		5144876	0					
ANR	5144878	CompoundStatement		168:60:3575:4236	5144876	0					
ANR	5144879	IdentifierDeclStatement	"const char abc [ ] = ""0123456789abcdef"" ;"	169:1:3578:3615	5144876	0	True				
ANR	5144880	IdentifierDecl	"abc [ ] = ""0123456789abcdef"""		5144876	0					
ANR	5144881	IdentifierDeclType	const char [ ]		5144876	0					
ANR	5144882	Identifier	abc		5144876	1					
ANR	5144883	AssignmentExpression	"abc [ ] = ""0123456789abcdef"""		5144876	2		=			
ANR	5144884	Identifier	abc		5144876	0					
ANR	5144885	PrimaryExpression	"""0123456789abcdef"""		5144876	1					
ANR	5144886	IfStatement	"if ( * code != '{' || ! strchr ( code , '}' ) )"		5144876	1					
ANR	5144887	Condition	"* code != '{' || ! strchr ( code , '}' )"	170:5:3622:3655	5144876	0	True				
ANR	5144888	OrExpression	"* code != '{' || ! strchr ( code , '}' )"		5144876	0		||			
ANR	5144889	EqualityExpression	* code != '{'		5144876	0		!=			
ANR	5144890	UnaryOperationExpression	* code		5144876	0					
ANR	5144891	UnaryOperator	*		5144876	0					
ANR	5144892	Identifier	code		5144876	1					
ANR	5144893	PrimaryExpression	'{'		5144876	1					
ANR	5144894	UnaryOperationExpression	"! strchr ( code , '}' )"		5144876	1					
ANR	5144895	UnaryOperator	!		5144876	0					
ANR	5144896	CallExpression	"strchr ( code , '}' )"		5144876	1					
ANR	5144897	Callee	strchr		5144876	0					
ANR	5144898	Identifier	strchr		5144876	0					
ANR	5144899	ArgumentList	code		5144876	1					
ANR	5144900	Argument	code		5144876	0					
ANR	5144901	Identifier	code		5144876	0					
ANR	5144902	Argument	'}'		5144876	1					
ANR	5144903	PrimaryExpression	'}'		5144876	0					
ANR	5144904	CompoundStatement		3:41:82:82	5144876	1					
ANR	5144905	ReturnStatement	return NULL ;	171:2:3662:3673	5144876	0	True				
ANR	5144906	Identifier	NULL		5144876	0					
ANR	5144907	ExpressionStatement	code ++	173:1:3679:3685	5144876	2	True				
ANR	5144908	PostIncDecOperationExpression	code ++		5144876	0					
ANR	5144909	Identifier	code		5144876	0					
ANR	5144910	IncDec	++		5144876	1					
ANR	5144911	ForStatement	for ( ; * code ; code ++ )		5144876	3					
ANR	5144912	Condition	* code	174:8:3695:3699	5144876	0	True				
ANR	5144913	UnaryOperationExpression	* code		5144876	0					
ANR	5144914	UnaryOperator	*		5144876	0					
ANR	5144915	Identifier	code		5144876	1					
ANR	5144916	PostIncDecOperationExpression	code ++	174:15:3702:3707	5144876	1	True				
ANR	5144917	Identifier	code		5144876	0					
ANR	5144918	IncDec	++		5144876	1					
ANR	5144919	CompoundStatement		13:2:281:305	5144876	2					
ANR	5144920	IdentifierDeclStatement	"const char * comma = strchr ( code , ',' ) ;"	175:2:3714:3752	5144876	0	True				
ANR	5144921	IdentifierDecl	"* comma = strchr ( code , ',' )"		5144876	0					
ANR	5144922	IdentifierDeclType	const char *		5144876	0					
ANR	5144923	Identifier	comma		5144876	1					
ANR	5144924	AssignmentExpression	"* comma = strchr ( code , ',' )"		5144876	2		=			
ANR	5144925	Identifier	comma		5144876	0					
ANR	5144926	CallExpression	"strchr ( code , ',' )"		5144876	1					
ANR	5144927	Callee	strchr		5144876	0					
ANR	5144928	Identifier	strchr		5144876	0					
ANR	5144929	ArgumentList	code		5144876	1					
ANR	5144930	Argument	code		5144876	0					
ANR	5144931	Identifier	code		5144876	0					
ANR	5144932	Argument	"','"		5144876	1					
ANR	5144933	PrimaryExpression	"','"		5144876	0					
ANR	5144934	IfStatement	if ( ! comma )		5144876	1					
ANR	5144935	Condition	! comma	176:6:3760:3765	5144876	0	True				
ANR	5144936	UnaryOperationExpression	! comma		5144876	0					
ANR	5144937	UnaryOperator	!		5144876	0					
ANR	5144938	Identifier	comma		5144876	1					
ANR	5144939	CompoundStatement		9:14:192:192	5144876	1					
ANR	5144940	ExpressionStatement	"comma = strchr ( code , '}' )"	177:3:3773:3799	5144876	0	True				
ANR	5144941	AssignmentExpression	"comma = strchr ( code , '}' )"		5144876	0		=			
ANR	5144942	Identifier	comma		5144876	0					
ANR	5144943	CallExpression	"strchr ( code , '}' )"		5144876	1					
ANR	5144944	Callee	strchr		5144876	0					
ANR	5144945	Identifier	strchr		5144876	0					
ANR	5144946	ArgumentList	code		5144876	1					
ANR	5144947	Argument	code		5144876	0					
ANR	5144948	Identifier	code		5144876	0					
ANR	5144949	Argument	'}'		5144876	1					
ANR	5144950	PrimaryExpression	'}'		5144876	0					
ANR	5144951	IdentifierDeclStatement	"char * _word = r_str_ndup ( code , comma - code ) ;"	179:2:3807:3853	5144876	2	True				
ANR	5144952	IdentifierDecl	"* _word = r_str_ndup ( code , comma - code )"		5144876	0					
ANR	5144953	IdentifierDeclType	char *		5144876	0					
ANR	5144954	Identifier	_word		5144876	1					
ANR	5144955	AssignmentExpression	"* _word = r_str_ndup ( code , comma - code )"		5144876	2		=			
ANR	5144956	Identifier	_word		5144876	0					
ANR	5144957	CallExpression	"r_str_ndup ( code , comma - code )"		5144876	1					
ANR	5144958	Callee	r_str_ndup		5144876	0					
ANR	5144959	Identifier	r_str_ndup		5144876	0					
ANR	5144960	ArgumentList	code		5144876	1					
ANR	5144961	Argument	code		5144876	0					
ANR	5144962	Identifier	code		5144876	0					
ANR	5144963	Argument	comma - code		5144876	1					
ANR	5144964	AdditiveExpression	comma - code		5144876	0		-			
ANR	5144965	Identifier	comma		5144876	0					
ANR	5144966	Identifier	code		5144876	1					
ANR	5144967	IdentifierDeclStatement	const char * word = _word ;	180:2:3857:3881	5144876	3	True				
ANR	5144968	IdentifierDecl	* word = _word		5144876	0					
ANR	5144969	IdentifierDeclType	const char *		5144876	0					
ANR	5144970	Identifier	word		5144876	1					
ANR	5144971	AssignmentExpression	* word = _word		5144876	2		=			
ANR	5144972	Identifier	_word		5144876	0					
ANR	5144973	Identifier	_word		5144876	1					
ANR	5144974	ExpressionStatement	word = skip_comment_c ( word )	181:2:3885:3913	5144876	4	True				
ANR	5144975	AssignmentExpression	word = skip_comment_c ( word )		5144876	0		=			
ANR	5144976	Identifier	word		5144876	0					
ANR	5144977	CallExpression	skip_comment_c ( word )		5144876	1					
ANR	5144978	Callee	skip_comment_c		5144876	0					
ANR	5144979	Identifier	skip_comment_c		5144876	0					
ANR	5144980	ArgumentList	word		5144876	1					
ANR	5144981	Argument	word		5144876	0					
ANR	5144982	Identifier	word		5144876	0					
ANR	5144983	WhileStatement	while ( * word == ' ' || * word == '\\t' || * word == '\\n' )		5144876	5					
ANR	5144984	Condition	* word == ' ' || * word == '\\t' || * word == '\\n'	182:9:3924:3969	5144876	0	True				
ANR	5144985	OrExpression	* word == ' ' || * word == '\\t' || * word == '\\n'		5144876	0		||			
ANR	5144986	EqualityExpression	* word == ' '		5144876	0		==			
ANR	5144987	UnaryOperationExpression	* word		5144876	0					
ANR	5144988	UnaryOperator	*		5144876	0					
ANR	5144989	Identifier	word		5144876	1					
ANR	5144990	PrimaryExpression	' '		5144876	1					
ANR	5144991	OrExpression	* word == '\\t' || * word == '\\n'		5144876	1		||			
ANR	5144992	EqualityExpression	* word == '\\t'		5144876	0		==			
ANR	5144993	UnaryOperationExpression	* word		5144876	0					
ANR	5144994	UnaryOperator	*		5144876	0					
ANR	5144995	Identifier	word		5144876	1					
ANR	5144996	PrimaryExpression	'\\t'		5144876	1					
ANR	5144997	EqualityExpression	* word == '\\n'		5144876	1		==			
ANR	5144998	UnaryOperationExpression	* word		5144876	0					
ANR	5144999	UnaryOperator	*		5144876	0					
ANR	5145000	Identifier	word		5144876	1					
ANR	5145001	PrimaryExpression	'\\n'		5144876	1					
ANR	5145002	CompoundStatement		15:57:396:396	5144876	1					
ANR	5145003	ExpressionStatement	word ++	183:3:3977:3983	5144876	0	True				
ANR	5145004	PostIncDecOperationExpression	word ++		5144876	0					
ANR	5145005	Identifier	word		5144876	0					
ANR	5145006	IncDec	++		5144876	1					
ANR	5145007	ExpressionStatement	word = skip_comment_c ( word )	184:3:3988:4016	5144876	1	True				
ANR	5145008	AssignmentExpression	word = skip_comment_c ( word )		5144876	0		=			
ANR	5145009	Identifier	word		5144876	0					
ANR	5145010	CallExpression	skip_comment_c ( word )		5144876	1					
ANR	5145011	Callee	skip_comment_c		5144876	0					
ANR	5145012	Identifier	skip_comment_c		5144876	0					
ANR	5145013	ArgumentList	word		5144876	1					
ANR	5145014	Argument	word		5144876	0					
ANR	5145015	Identifier	word		5144876	0					
ANR	5145016	IfStatement	if ( IS_DIGIT ( * word ) )		5144876	6					
ANR	5145017	Condition	IS_DIGIT ( * word )	186:6:4028:4043	5144876	0	True				
ANR	5145018	CallExpression	IS_DIGIT ( * word )		5144876	0					
ANR	5145019	Callee	IS_DIGIT		5144876	0					
ANR	5145020	Identifier	IS_DIGIT		5144876	0					
ANR	5145021	ArgumentList	* word		5144876	1					
ANR	5145022	Argument	* word		5144876	0					
ANR	5145023	UnaryOperationExpression	* word		5144876	0					
ANR	5145024	UnaryOperator	*		5144876	0					
ANR	5145025	Identifier	word		5144876	1					
ANR	5145026	CompoundStatement		20:3:475:511	5144876	1					
ANR	5145027	IdentifierDeclStatement	"ut8 n = ( ut8 ) r_num_math ( NULL , word ) ;"	187:3:4051:4087	5144876	0	True				
ANR	5145028	IdentifierDecl	"n = ( ut8 ) r_num_math ( NULL , word )"		5144876	0					
ANR	5145029	IdentifierDeclType	ut8		5144876	0					
ANR	5145030	Identifier	n		5144876	1					
ANR	5145031	AssignmentExpression	"n = ( ut8 ) r_num_math ( NULL , word )"		5144876	2		=			
ANR	5145032	Identifier	n		5144876	0					
ANR	5145033	CastExpression	"( ut8 ) r_num_math ( NULL , word )"		5144876	1					
ANR	5145034	CastTarget	ut8		5144876	0					
ANR	5145035	CallExpression	"r_num_math ( NULL , word )"		5144876	1					
ANR	5145036	Callee	r_num_math		5144876	0					
ANR	5145037	Identifier	r_num_math		5144876	0					
ANR	5145038	ArgumentList	NULL		5144876	1					
ANR	5145039	Argument	NULL		5144876	0					
ANR	5145040	Identifier	NULL		5144876	0					
ANR	5145041	Argument	word		5144876	1					
ANR	5145042	Identifier	word		5144876	0					
ANR	5145043	ExpressionStatement	* out ++ = abc [ ( n >> 4 ) & 0xf ]	188:3:4092:4120	5144876	1	True				
ANR	5145044	AssignmentExpression	* out ++ = abc [ ( n >> 4 ) & 0xf ]		5144876	0		=			
ANR	5145045	UnaryOperationExpression	* out ++		5144876	0					
ANR	5145046	UnaryOperator	*		5144876	0					
ANR	5145047	PostIncDecOperationExpression	out ++		5144876	1					
ANR	5145048	Identifier	out		5144876	0					
ANR	5145049	IncDec	++		5144876	1					
ANR	5145050	ArrayIndexing	abc [ ( n >> 4 ) & 0xf ]		5144876	1					
ANR	5145051	Identifier	abc		5144876	0					
ANR	5145052	BitAndExpression	( n >> 4 ) & 0xf		5144876	1		&			
ANR	5145053	ShiftExpression	n >> 4		5144876	0		>>			
ANR	5145054	Identifier	n		5144876	0					
ANR	5145055	PrimaryExpression	4		5144876	1					
ANR	5145056	PrimaryExpression	0xf		5144876	1					
ANR	5145057	ExpressionStatement	* out ++ = abc [ n & 0xf ]	189:3:4125:4146	5144876	2	True				
ANR	5145058	AssignmentExpression	* out ++ = abc [ n & 0xf ]		5144876	0		=			
ANR	5145059	UnaryOperationExpression	* out ++		5144876	0					
ANR	5145060	UnaryOperator	*		5144876	0					
ANR	5145061	PostIncDecOperationExpression	out ++		5144876	1					
ANR	5145062	Identifier	out		5144876	0					
ANR	5145063	IncDec	++		5144876	1					
ANR	5145064	ArrayIndexing	abc [ n & 0xf ]		5144876	1					
ANR	5145065	Identifier	abc		5144876	0					
ANR	5145066	BitAndExpression	n & 0xf		5144876	1		&			
ANR	5145067	Identifier	n		5144876	0					
ANR	5145068	PrimaryExpression	0xf		5144876	1					
ANR	5145069	ExpressionStatement	free ( _word )	191:2:4154:4166	5144876	7	True				
ANR	5145070	CallExpression	free ( _word )		5144876	0					
ANR	5145071	Callee	free		5144876	0					
ANR	5145072	Identifier	free		5144876	0					
ANR	5145073	ArgumentList	_word		5144876	1					
ANR	5145074	Argument	_word		5144876	0					
ANR	5145075	Identifier	_word		5144876	0					
ANR	5145076	ExpressionStatement	code = comma	192:2:4170:4182	5144876	8	True				
ANR	5145077	AssignmentExpression	code = comma		5144876	0		=			
ANR	5145078	Identifier	code		5144876	0					
ANR	5145079	Identifier	comma		5144876	1					
ANR	5145080	IfStatement	if ( * code == '}' )		5144876	9					
ANR	5145081	Condition	* code == '}'	193:6:4190:4201	5144876	0	True				
ANR	5145082	EqualityExpression	* code == '}'		5144876	0		==			
ANR	5145083	UnaryOperationExpression	* code		5144876	0					
ANR	5145084	UnaryOperator	*		5144876	0					
ANR	5145085	Identifier	code		5144876	1					
ANR	5145086	PrimaryExpression	'}'		5144876	1					
ANR	5145087	CompoundStatement		26:20:628:628	5144876	1					
ANR	5145088	BreakStatement	break ;	194:3:4209:4214	5144876	0	True				
ANR	5145089	ReturnStatement	return out ;	197:1:4224:4234	5144876	4	True				
ANR	5145090	Identifier	out		5144876	0					
ANR	5145091	ReturnType	R_API char *		5144876	1					
ANR	5145092	Identifier	r_hex_from_c_array		5144876	2					
ANR	5145093	ParameterList	"char * out , const char * code"		5144876	3					
ANR	5145094	Parameter	char * out	168:31:3546:3554	5144876	0	True				
ANR	5145095	ParameterType	char *		5144876	0					
ANR	5145096	Identifier	out		5144876	1					
ANR	5145097	Parameter	const char * code	168:42:3557:3572	5144876	1	True				
ANR	5145098	ParameterType	const char *		5144876	0					
ANR	5145099	Identifier	code		5144876	1					
ANR	5145100	CFGEntryNode	ENTRY		5144876		True				
ANR	5145101	CFGExitNode	EXIT		5144876		True				
ANR	5145102	Symbol	* out ++		5144876						
ANR	5145103	Symbol	code		5144876						
ANR	5145104	Symbol	abc		5144876						
ANR	5145105	Symbol	NULL		5144876						
ANR	5145106	Symbol	r_str_ndup		5144876						
ANR	5145107	Symbol	* word		5144876						
ANR	5145108	Symbol	strchr		5144876						
ANR	5145109	Symbol	n		5144876						
ANR	5145110	Symbol	out		5144876						
ANR	5145111	Symbol	IS_DIGIT		5144876						
ANR	5145112	Symbol	r_num_math		5144876						
ANR	5145113	Symbol	comma		5144876						
ANR	5145114	Symbol	* abc		5144876						
ANR	5145115	Symbol	skip_comment_c		5144876						
ANR	5145116	Symbol	* n		5144876						
ANR	5145117	Symbol	_word		5144876						
ANR	5145118	Symbol	word		5144876						
ANR	5145119	Symbol	* code		5144876						
ANR	5145120	Function	r_hex_from_c	205:0:4317:5080							
ANR	5145121	FunctionDef	r_hex_from_c (const char * code)		5145120	0					
ANR	5145122	CompoundStatement		205:43:4360:5080	5145120	0					
ANR	5145123	IfStatement	if ( ! code )		5145120	0					
ANR	5145124	Condition	! code	206:5:4367:4371	5145120	0	True				
ANR	5145125	UnaryOperationExpression	! code		5145120	0					
ANR	5145126	UnaryOperator	!		5145120	0					
ANR	5145127	Identifier	code		5145120	1					
ANR	5145128	CompoundStatement		2:12:13:13	5145120	1					
ANR	5145129	ReturnStatement	return NULL ;	207:2:4378:4389	5145120	0	True				
ANR	5145130	Identifier	NULL		5145120	0					
ANR	5145131	Statement	char	209:1:4395:4398	5145120	1	True				
ANR	5145132	Statement	*	209:6:4400:4400	5145120	2	True				
ANR	5145133	Statement	const	209:8:4402:4406	5145120	3	True				
ANR	5145134	ExpressionStatement	ret = malloc ( strlen ( code ) * 3 )	209:14:4408:4440	5145120	4	True				
ANR	5145135	AssignmentExpression	ret = malloc ( strlen ( code ) * 3 )		5145120	0		=			
ANR	5145136	Identifier	ret		5145120	0					
ANR	5145137	CallExpression	malloc ( strlen ( code ) * 3 )		5145120	1					
ANR	5145138	Callee	malloc		5145120	0					
ANR	5145139	Identifier	malloc		5145120	0					
ANR	5145140	ArgumentList	strlen ( code ) * 3		5145120	1					
ANR	5145141	Argument	strlen ( code ) * 3		5145120	0					
ANR	5145142	MultiplicativeExpression	strlen ( code ) * 3		5145120	0		*			
ANR	5145143	CallExpression	strlen ( code )		5145120	0					
ANR	5145144	Callee	strlen		5145120	0					
ANR	5145145	Identifier	strlen		5145120	0					
ANR	5145146	ArgumentList	code		5145120	1					
ANR	5145147	Argument	code		5145120	0					
ANR	5145148	Identifier	code		5145120	0					
ANR	5145149	PrimaryExpression	3		5145120	1					
ANR	5145150	IfStatement	if ( ! ret )		5145120	5					
ANR	5145151	Condition	! ret	210:5:4447:4450	5145120	0	True				
ANR	5145152	UnaryOperationExpression	! ret		5145120	0					
ANR	5145153	UnaryOperator	!		5145120	0					
ANR	5145154	Identifier	ret		5145120	1					
ANR	5145155	CompoundStatement		6:11:92:92	5145120	1					
ANR	5145156	ReturnStatement	return NULL ;	211:2:4457:4468	5145120	0	True				
ANR	5145157	Identifier	NULL		5145120	0					
ANR	5145158	ExpressionStatement	* ret = '\\0'	213:1:4474:4485	5145120	6	True				
ANR	5145159	AssignmentExpression	* ret = '\\0'		5145120	0		=			
ANR	5145160	UnaryOperationExpression	* ret		5145120	0					
ANR	5145161	UnaryOperator	*		5145120	0					
ANR	5145162	Identifier	ret		5145120	1					
ANR	5145163	PrimaryExpression	'\\0'		5145120	1					
ANR	5145164	IdentifierDeclStatement	char * out = ret ;	214:1:4488:4503	5145120	7	True				
ANR	5145165	IdentifierDecl	* out = ret		5145120	0					
ANR	5145166	IdentifierDeclType	char *		5145120	0					
ANR	5145167	Identifier	out		5145120	1					
ANR	5145168	AssignmentExpression	* out = ret		5145120	2		=			
ANR	5145169	Identifier	ret		5145120	0					
ANR	5145170	Identifier	ret		5145120	1					
ANR	5145171	IdentifierDeclStatement	"const char * tmp_code = strchr ( code , '=' ) ;"	215:1:4506:4547	5145120	8	True				
ANR	5145172	IdentifierDecl	"* tmp_code = strchr ( code , '=' )"		5145120	0					
ANR	5145173	IdentifierDeclType	const char *		5145120	0					
ANR	5145174	Identifier	tmp_code		5145120	1					
ANR	5145175	AssignmentExpression	"* tmp_code = strchr ( code , '=' )"		5145120	2		=			
ANR	5145176	Identifier	tmp_code		5145120	0					
ANR	5145177	CallExpression	"strchr ( code , '=' )"		5145120	1					
ANR	5145178	Callee	strchr		5145120	0					
ANR	5145179	Identifier	strchr		5145120	0					
ANR	5145180	ArgumentList	code		5145120	1					
ANR	5145181	Argument	code		5145120	0					
ANR	5145182	Identifier	code		5145120	0					
ANR	5145183	Argument	'='		5145120	1					
ANR	5145184	PrimaryExpression	'='		5145120	0					
ANR	5145185	IfStatement	if ( tmp_code )		5145120	9					
ANR	5145186	Condition	tmp_code	216:5:4554:4561	5145120	0	True				
ANR	5145187	Identifier	tmp_code		5145120	0					
ANR	5145188	CompoundStatement		12:15:203:203	5145120	1					
ANR	5145189	ExpressionStatement	code = tmp_code	217:2:4568:4583	5145120	0	True				
ANR	5145190	AssignmentExpression	code = tmp_code		5145120	0		=			
ANR	5145191	Identifier	code		5145120	0					
ANR	5145192	Identifier	tmp_code		5145120	1					
ANR	5145193	ForStatement	"for ( ; * code != '\\0' && * code != '{' && * code != '""' ; code ++ )"		5145120	10					
ANR	5145194	Condition	"* code != '\\0' && * code != '{' && * code != '""'"	219:8:4596:4640	5145120	0	True				
ANR	5145195	AndExpression	"* code != '\\0' && * code != '{' && * code != '""'"		5145120	0		&&			
ANR	5145196	EqualityExpression	* code != '\\0'		5145120	0		!=			
ANR	5145197	UnaryOperationExpression	* code		5145120	0					
ANR	5145198	UnaryOperator	*		5145120	0					
ANR	5145199	Identifier	code		5145120	1					
ANR	5145200	PrimaryExpression	'\\0'		5145120	1					
ANR	5145201	AndExpression	"* code != '{' && * code != '""'"		5145120	1		&&			
ANR	5145202	EqualityExpression	* code != '{'		5145120	0		!=			
ANR	5145203	UnaryOperationExpression	* code		5145120	0					
ANR	5145204	UnaryOperator	*		5145120	0					
ANR	5145205	Identifier	code		5145120	1					
ANR	5145206	PrimaryExpression	'{'		5145120	1					
ANR	5145207	EqualityExpression	"* code != '""'"		5145120	1		!=			
ANR	5145208	UnaryOperationExpression	* code		5145120	0					
ANR	5145209	UnaryOperator	*		5145120	0					
ANR	5145210	Identifier	code		5145120	1					
ANR	5145211	PrimaryExpression	"'""'"		5145120	1					
ANR	5145212	PostIncDecOperationExpression	code ++	219:55:4643:4648	5145120	1	True				
ANR	5145213	Identifier	code		5145120	0					
ANR	5145214	IncDec	++		5145120	1					
ANR	5145215	CompoundStatement		15:63:290:290	5145120	2					
ANR	5145216	ExpressionStatement	code = skip_comment_c ( code )	220:2:4655:4683	5145120	0	True				
ANR	5145217	AssignmentExpression	code = skip_comment_c ( code )		5145120	0		=			
ANR	5145218	Identifier	code		5145120	0					
ANR	5145219	CallExpression	skip_comment_c ( code )		5145120	1					
ANR	5145220	Callee	skip_comment_c		5145120	0					
ANR	5145221	Identifier	skip_comment_c		5145120	0					
ANR	5145222	ArgumentList	code		5145120	1					
ANR	5145223	Argument	code		5145120	0					
ANR	5145224	Identifier	code		5145120	0					
ANR	5145225	IfStatement	if ( * code == '{' )		5145120	11					
ANR	5145226	Condition	* code == '{'	222:5:4693:4704	5145120	0	True				
ANR	5145227	EqualityExpression	* code == '{'		5145120	0		==			
ANR	5145228	UnaryOperationExpression	* code		5145120	0					
ANR	5145229	UnaryOperator	*		5145120	0					
ANR	5145230	Identifier	code		5145120	1					
ANR	5145231	PrimaryExpression	'{'		5145120	1					
ANR	5145232	CompoundStatement		18:19:346:346	5145120	1					
ANR	5145233	ExpressionStatement	"out = r_hex_from_c_array ( out , code )"	223:2:4711:4747	5145120	0	True				
ANR	5145234	AssignmentExpression	"out = r_hex_from_c_array ( out , code )"		5145120	0		=			
ANR	5145235	Identifier	out		5145120	0					
ANR	5145236	CallExpression	"r_hex_from_c_array ( out , code )"		5145120	1					
ANR	5145237	Callee	r_hex_from_c_array		5145120	0					
ANR	5145238	Identifier	r_hex_from_c_array		5145120	0					
ANR	5145239	ArgumentList	out		5145120	1					
ANR	5145240	Argument	out		5145120	0					
ANR	5145241	Identifier	out		5145120	0					
ANR	5145242	Argument	code		5145120	1					
ANR	5145243	Identifier	code		5145120	0					
ANR	5145244	ElseStatement	else		5145120	0					
ANR	5145245	IfStatement	"if ( * code == '""' )"		5145120	0					
ANR	5145246	Condition	"* code == '""'"	224:12:4761:4772	5145120	0	True				
ANR	5145247	EqualityExpression	"* code == '""'"		5145120	0		==			
ANR	5145248	UnaryOperationExpression	* code		5145120	0					
ANR	5145249	UnaryOperator	*		5145120	0					
ANR	5145250	Identifier	code		5145120	1					
ANR	5145251	PrimaryExpression	"'""'"		5145120	1					
ANR	5145252	CompoundStatement		21:2:418:437	5145120	1					
ANR	5145253	IdentifierDeclStatement	"const char * s1 , * s2 ;"	225:2:4779:4798	5145120	0	True				
ANR	5145254	IdentifierDecl	* s1		5145120	0					
ANR	5145255	IdentifierDeclType	const char *		5145120	0					
ANR	5145256	Identifier	s1		5145120	1					
ANR	5145257	IdentifierDecl	* s2		5145120	1					
ANR	5145258	IdentifierDeclType	const char *		5145120	0					
ANR	5145259	Identifier	s2		5145120	1					
ANR	5145260	ExpressionStatement	s1 = code	226:2:4802:4811	5145120	1	True				
ANR	5145261	AssignmentExpression	s1 = code		5145120	0		=			
ANR	5145262	Identifier	s1		5145120	0					
ANR	5145263	Identifier	code		5145120	1					
ANR	5145264	DoStatement	do		5145120	2					
ANR	5145265	CompoundStatement		23:5:457:457	5145120	0					
ANR	5145266	ExpressionStatement	code = s1	228:3:4823:4832	5145120	0	True				
ANR	5145267	AssignmentExpression	code = s1		5145120	0		=			
ANR	5145268	Identifier	code		5145120	0					
ANR	5145269	Identifier	s1		5145120	1					
ANR	5145270	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	229:3:4837:4872	5145120	1	True				
ANR	5145271	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		5145120	0		=			
ANR	5145272	Identifier	out		5145120	0					
ANR	5145273	CallExpression	"r_hex_from_c_str ( out , & code )"		5145120	1					
ANR	5145274	Callee	r_hex_from_c_str		5145120	0					
ANR	5145275	Identifier	r_hex_from_c_str		5145120	0					
ANR	5145276	ArgumentList	out		5145120	1					
ANR	5145277	Argument	out		5145120	0					
ANR	5145278	Identifier	out		5145120	0					
ANR	5145279	Argument	& code		5145120	1					
ANR	5145280	UnaryOperationExpression	& code		5145120	0					
ANR	5145281	UnaryOperator	&		5145120	0					
ANR	5145282	Identifier	code		5145120	1					
ANR	5145283	IfStatement	if ( ! out )		5145120	2					
ANR	5145284	Condition	! out	230:7:4881:4884	5145120	0	True				
ANR	5145285	UnaryOperationExpression	! out		5145120	0					
ANR	5145286	UnaryOperator	!		5145120	0					
ANR	5145287	Identifier	out		5145120	1					
ANR	5145288	CompoundStatement		26:13:526:526	5145120	1					
ANR	5145289	BreakStatement	break ;	231:4:4893:4898	5145120	0	True				
ANR	5145290	ExpressionStatement	"s1 = strchr ( code + 1 , '""' )"	233:3:4908:4935	5145120	3	True				
ANR	5145291	AssignmentExpression	"s1 = strchr ( code + 1 , '""' )"		5145120	0		=			
ANR	5145292	Identifier	s1		5145120	0					
ANR	5145293	CallExpression	"strchr ( code + 1 , '""' )"		5145120	1					
ANR	5145294	Callee	strchr		5145120	0					
ANR	5145295	Identifier	strchr		5145120	0					
ANR	5145296	ArgumentList	code + 1		5145120	1					
ANR	5145297	Argument	code + 1		5145120	0					
ANR	5145298	AdditiveExpression	code + 1		5145120	0		+			
ANR	5145299	Identifier	code		5145120	0					
ANR	5145300	PrimaryExpression	1		5145120	1					
ANR	5145301	Argument	"'""'"		5145120	1					
ANR	5145302	PrimaryExpression	"'""'"		5145120	0					
ANR	5145303	ExpressionStatement	"s2 = strchr ( code + 1 , ';' )"	234:3:4940:4967	5145120	4	True				
ANR	5145304	AssignmentExpression	"s2 = strchr ( code + 1 , ';' )"		5145120	0		=			
ANR	5145305	Identifier	s2		5145120	0					
ANR	5145306	CallExpression	"strchr ( code + 1 , ';' )"		5145120	1					
ANR	5145307	Callee	strchr		5145120	0					
ANR	5145308	Identifier	strchr		5145120	0					
ANR	5145309	ArgumentList	code + 1		5145120	1					
ANR	5145310	Argument	code + 1		5145120	0					
ANR	5145311	AdditiveExpression	code + 1		5145120	0		+			
ANR	5145312	Identifier	code		5145120	0					
ANR	5145313	PrimaryExpression	1		5145120	1					
ANR	5145314	Argument	';'		5145120	1					
ANR	5145315	PrimaryExpression	';'		5145120	0					
ANR	5145316	Condition	s1 && s2 && ( s1 <= s2 )	235:11:4980:5001	5145120	1	True				
ANR	5145317	AndExpression	s1 && s2 && ( s1 <= s2 )		5145120	0		&&			
ANR	5145318	Identifier	s1		5145120	0					
ANR	5145319	AndExpression	s2 && ( s1 <= s2 )		5145120	1		&&			
ANR	5145320	Identifier	s2		5145120	0					
ANR	5145321	RelationalExpression	s1 <= s2		5145120	1		<=			
ANR	5145322	Identifier	s1		5145120	0					
ANR	5145323	Identifier	s2		5145120	1					
ANR	5145324	IfStatement	if ( ! out )		5145120	12					
ANR	5145325	Condition	! out	237:5:5013:5016	5145120	0	True				
ANR	5145326	UnaryOperationExpression	! out		5145120	0					
ANR	5145327	UnaryOperator	!		5145120	0					
ANR	5145328	Identifier	out		5145120	1					
ANR	5145329	CompoundStatement		33:11:658:658	5145120	1					
ANR	5145330	ExpressionStatement	free ( ret )	238:2:5023:5033	5145120	0	True				
ANR	5145331	CallExpression	free ( ret )		5145120	0					
ANR	5145332	Callee	free		5145120	0					
ANR	5145333	Identifier	free		5145120	0					
ANR	5145334	ArgumentList	ret		5145120	1					
ANR	5145335	Argument	ret		5145120	0					
ANR	5145336	Identifier	ret		5145120	0					
ANR	5145337	ReturnStatement	return NULL ;	239:2:5037:5048	5145120	1	True				
ANR	5145338	Identifier	NULL		5145120	0					
ANR	5145339	ExpressionStatement	* out = '\\0'	241:1:5054:5065	5145120	13	True				
ANR	5145340	AssignmentExpression	* out = '\\0'		5145120	0		=			
ANR	5145341	UnaryOperationExpression	* out		5145120	0					
ANR	5145342	UnaryOperator	*		5145120	0					
ANR	5145343	Identifier	out		5145120	1					
ANR	5145344	PrimaryExpression	'\\0'		5145120	1					
ANR	5145345	ReturnStatement	return ret ;	242:1:5068:5078	5145120	14	True				
ANR	5145346	Identifier	ret		5145120	0					
ANR	5145347	ReturnType	R_API char *		5145120	1					
ANR	5145348	Identifier	r_hex_from_c		5145120	2					
ANR	5145349	ParameterList	const char * code		5145120	3					
ANR	5145350	Parameter	const char * code	205:25:4342:4357	5145120	0	True				
ANR	5145351	ParameterType	const char *		5145120	0					
ANR	5145352	Identifier	code		5145120	1					
ANR	5145353	CFGEntryNode	ENTRY		5145120		True				
ANR	5145354	CFGExitNode	EXIT		5145120		True				
ANR	5145355	Symbol	ret		5145120						
ANR	5145356	Symbol	malloc		5145120						
ANR	5145357	Symbol	tmp_code		5145120						
ANR	5145358	Symbol	r_hex_from_c_str		5145120						
ANR	5145359	Symbol	code		5145120						
ANR	5145360	Symbol	NULL		5145120						
ANR	5145361	Symbol	strchr		5145120						
ANR	5145362	Symbol	* ret		5145120						
ANR	5145363	Symbol	& code		5145120						
ANR	5145364	Symbol	out		5145120						
ANR	5145365	Symbol	strlen		5145120						
ANR	5145366	Symbol	skip_comment_c		5145120						
ANR	5145367	Symbol	* out		5145120						
ANR	5145368	Symbol	r_hex_from_c_array		5145120						
ANR	5145369	Symbol	* code		5145120						
ANR	5145370	Symbol	s1		5145120						
ANR	5145371	Symbol	s2		5145120						
ANR	5145372	Function	r_hex_from_js	246:0:5084:6112							
ANR	5145373	FunctionDef	r_hex_from_js (const char * code)		5145372	0					
ANR	5145374	CompoundStatement		246:44:5128:6112	5145372	0					
ANR	5145375	IdentifierDeclStatement	"char * s1 = strchr ( code , '\\'' ) ;"	247:1:5131:5162	5145372	0	True				
ANR	5145376	IdentifierDecl	"* s1 = strchr ( code , '\\'' )"		5145372	0					
ANR	5145377	IdentifierDeclType	char *		5145372	0					
ANR	5145378	Identifier	s1		5145372	1					
ANR	5145379	AssignmentExpression	"* s1 = strchr ( code , '\\'' )"		5145372	2		=			
ANR	5145380	Identifier	s1		5145372	0					
ANR	5145381	CallExpression	"strchr ( code , '\\'' )"		5145372	1					
ANR	5145382	Callee	strchr		5145372	0					
ANR	5145383	Identifier	strchr		5145372	0					
ANR	5145384	ArgumentList	code		5145372	1					
ANR	5145385	Argument	code		5145372	0					
ANR	5145386	Identifier	code		5145372	0					
ANR	5145387	Argument	'\\''		5145372	1					
ANR	5145388	PrimaryExpression	'\\''		5145372	0					
ANR	5145389	IdentifierDeclStatement	"char * s2 = strchr ( code , '""' ) ;"	248:1:5165:5195	5145372	1	True				
ANR	5145390	IdentifierDecl	"* s2 = strchr ( code , '""' )"		5145372	0					
ANR	5145391	IdentifierDeclType	char *		5145372	0					
ANR	5145392	Identifier	s2		5145372	1					
ANR	5145393	AssignmentExpression	"* s2 = strchr ( code , '""' )"		5145372	2		=			
ANR	5145394	Identifier	s2		5145372	0					
ANR	5145395	CallExpression	"strchr ( code , '""' )"		5145372	1					
ANR	5145396	Callee	strchr		5145372	0					
ANR	5145397	Identifier	strchr		5145372	0					
ANR	5145398	ArgumentList	code		5145372	1					
ANR	5145399	Argument	code		5145372	0					
ANR	5145400	Identifier	code		5145372	0					
ANR	5145401	Argument	"'""'"		5145372	1					
ANR	5145402	PrimaryExpression	"'""'"		5145372	0					
ANR	5145403	IfStatement	if ( ! ( s1 || s2 ) )		5145372	2					
ANR	5145404	Condition	! ( s1 || s2 )	251:5:5244:5254	5145372	0	True				
ANR	5145405	UnaryOperationExpression	! ( s1 || s2 )		5145372	0					
ANR	5145406	UnaryOperator	!		5145372	0					
ANR	5145407	OrExpression	s1 || s2		5145372	1		||			
ANR	5145408	Identifier	s1		5145372	0					
ANR	5145409	Identifier	s2		5145372	1					
ANR	5145410	CompoundStatement		6:18:128:128	5145372	1					
ANR	5145411	ReturnStatement	return NULL ;	252:2:5261:5272	5145372	0	True				
ANR	5145412	Identifier	NULL		5145372	0					
ANR	5145413	IdentifierDeclStatement	"char * start , * end ;"	255:1:5279:5298	5145372	3	True				
ANR	5145414	IdentifierDecl	* start		5145372	0					
ANR	5145415	IdentifierDeclType	char *		5145372	0					
ANR	5145416	Identifier	start		5145372	1					
ANR	5145417	IdentifierDecl	* end		5145372	1					
ANR	5145418	IdentifierDeclType	char *		5145372	0					
ANR	5145419	Identifier	end		5145372	1					
ANR	5145420	IfStatement	if ( s1 < s2 )		5145372	4					
ANR	5145421	Condition	s1 < s2	256:5:5305:5311	5145372	0	True				
ANR	5145422	RelationalExpression	s1 < s2		5145372	0		<			
ANR	5145423	Identifier	s1		5145372	0					
ANR	5145424	Identifier	s2		5145372	1					
ANR	5145425	CompoundStatement		11:14:185:185	5145372	1					
ANR	5145426	ExpressionStatement	start = s1	257:2:5318:5328	5145372	0	True				
ANR	5145427	AssignmentExpression	start = s1		5145372	0		=			
ANR	5145428	Identifier	start		5145372	0					
ANR	5145429	Identifier	s1		5145372	1					
ANR	5145430	ExpressionStatement	"end = strchr ( start + 1 , '\\'' )"	258:2:5332:5362	5145372	1	True				
ANR	5145431	AssignmentExpression	"end = strchr ( start + 1 , '\\'' )"		5145372	0		=			
ANR	5145432	Identifier	end		5145372	0					
ANR	5145433	CallExpression	"strchr ( start + 1 , '\\'' )"		5145372	1					
ANR	5145434	Callee	strchr		5145372	0					
ANR	5145435	Identifier	strchr		5145372	0					
ANR	5145436	ArgumentList	start + 1		5145372	1					
ANR	5145437	Argument	start + 1		5145372	0					
ANR	5145438	AdditiveExpression	start + 1		5145372	0		+			
ANR	5145439	Identifier	start		5145372	0					
ANR	5145440	PrimaryExpression	1		5145372	1					
ANR	5145441	Argument	'\\''		5145372	1					
ANR	5145442	PrimaryExpression	'\\''		5145372	0					
ANR	5145443	ElseStatement	else		5145372	0					
ANR	5145444	CompoundStatement		14:8:243:243	5145372	0					
ANR	5145445	ExpressionStatement	start = s2	260:2:5376:5386	5145372	0	True				
ANR	5145446	AssignmentExpression	start = s2		5145372	0		=			
ANR	5145447	Identifier	start		5145372	0					
ANR	5145448	Identifier	s2		5145372	1					
ANR	5145449	ExpressionStatement	"end = strchr ( start + 1 , '""' )"	261:2:5390:5419	5145372	1	True				
ANR	5145450	AssignmentExpression	"end = strchr ( start + 1 , '""' )"		5145372	0		=			
ANR	5145451	Identifier	end		5145372	0					
ANR	5145452	CallExpression	"strchr ( start + 1 , '""' )"		5145372	1					
ANR	5145453	Callee	strchr		5145372	0					
ANR	5145454	Identifier	strchr		5145372	0					
ANR	5145455	ArgumentList	start + 1		5145372	1					
ANR	5145456	Argument	start + 1		5145372	0					
ANR	5145457	AdditiveExpression	start + 1		5145372	0		+			
ANR	5145458	Identifier	start		5145372	0					
ANR	5145459	PrimaryExpression	1		5145372	1					
ANR	5145460	Argument	"'""'"		5145372	1					
ANR	5145461	PrimaryExpression	"'""'"		5145372	0					
ANR	5145462	IfStatement	if ( ! end )		5145372	5					
ANR	5145463	Condition	! end	265:5:5474:5477	5145372	0	True				
ANR	5145464	UnaryOperationExpression	! end		5145372	0					
ANR	5145465	UnaryOperator	!		5145372	0					
ANR	5145466	Identifier	end		5145372	1					
ANR	5145467	CompoundStatement		20:11:351:351	5145372	1					
ANR	5145468	ReturnStatement	return NULL ;	266:2:5484:5495	5145372	0	True				
ANR	5145469	Identifier	NULL		5145372	0					
ANR	5145470	IdentifierDeclStatement	"char * str = r_str_ndup ( start + 1 , end - start - 1 ) ;"	269:1:5502:5554	5145372	6	True				
ANR	5145471	IdentifierDecl	"* str = r_str_ndup ( start + 1 , end - start - 1 )"		5145372	0					
ANR	5145472	IdentifierDeclType	char *		5145372	0					
ANR	5145473	Identifier	str		5145372	1					
ANR	5145474	AssignmentExpression	"* str = r_str_ndup ( start + 1 , end - start - 1 )"		5145372	2		=			
ANR	5145475	Identifier	str		5145372	0					
ANR	5145476	CallExpression	"r_str_ndup ( start + 1 , end - start - 1 )"		5145372	1					
ANR	5145477	Callee	r_str_ndup		5145372	0					
ANR	5145478	Identifier	r_str_ndup		5145372	0					
ANR	5145479	ArgumentList	start + 1		5145372	1					
ANR	5145480	Argument	start + 1		5145372	0					
ANR	5145481	AdditiveExpression	start + 1		5145372	0		+			
ANR	5145482	Identifier	start		5145372	0					
ANR	5145483	PrimaryExpression	1		5145372	1					
ANR	5145484	Argument	end - start - 1		5145372	1					
ANR	5145485	AdditiveExpression	end - start - 1		5145372	0		-			
ANR	5145486	Identifier	end		5145372	0					
ANR	5145487	AdditiveExpression	start - 1		5145372	1		-			
ANR	5145488	Identifier	start		5145372	0					
ANR	5145489	PrimaryExpression	1		5145372	1					
ANR	5145490	IdentifierDeclStatement	ut8 * b64d = malloc ( end - start ) ;	272:1:5618:5650	5145372	7	True				
ANR	5145491	IdentifierDecl	* b64d = malloc ( end - start )		5145372	0					
ANR	5145492	IdentifierDeclType	ut8 *		5145372	0					
ANR	5145493	Identifier	b64d		5145372	1					
ANR	5145494	AssignmentExpression	* b64d = malloc ( end - start )		5145372	2		=			
ANR	5145495	Identifier	b64d		5145372	0					
ANR	5145496	CallExpression	malloc ( end - start )		5145372	1					
ANR	5145497	Callee	malloc		5145372	0					
ANR	5145498	Identifier	malloc		5145372	0					
ANR	5145499	ArgumentList	end - start		5145372	1					
ANR	5145500	Argument	end - start		5145372	0					
ANR	5145501	AdditiveExpression	end - start		5145372	0		-			
ANR	5145502	Identifier	end		5145372	0					
ANR	5145503	Identifier	start		5145372	1					
ANR	5145504	IfStatement	if ( ! b64d )		5145372	8					
ANR	5145505	Condition	! b64d	273:5:5657:5661	5145372	0	True				
ANR	5145506	UnaryOperationExpression	! b64d		5145372	0					
ANR	5145507	UnaryOperator	!		5145372	0					
ANR	5145508	Identifier	b64d		5145372	1					
ANR	5145509	CompoundStatement		28:12:535:535	5145372	1					
ANR	5145510	ExpressionStatement	free ( str )	274:2:5668:5678	5145372	0	True				
ANR	5145511	CallExpression	free ( str )		5145372	0					
ANR	5145512	Callee	free		5145372	0					
ANR	5145513	Identifier	free		5145372	0					
ANR	5145514	ArgumentList	str		5145372	1					
ANR	5145515	Argument	str		5145372	0					
ANR	5145516	Identifier	str		5145372	0					
ANR	5145517	ReturnStatement	return NULL ;	275:2:5682:5693	5145372	1	True				
ANR	5145518	Identifier	NULL		5145372	0					
ANR	5145519	ExpressionStatement	"r_base64_decode ( b64d , str , end - start - 1 )"	278:1:5700:5744	5145372	9	True				
ANR	5145520	CallExpression	"r_base64_decode ( b64d , str , end - start - 1 )"		5145372	0					
ANR	5145521	Callee	r_base64_decode		5145372	0					
ANR	5145522	Identifier	r_base64_decode		5145372	0					
ANR	5145523	ArgumentList	b64d		5145372	1					
ANR	5145524	Argument	b64d		5145372	0					
ANR	5145525	Identifier	b64d		5145372	0					
ANR	5145526	Argument	str		5145372	1					
ANR	5145527	Identifier	str		5145372	0					
ANR	5145528	Argument	end - start - 1		5145372	2					
ANR	5145529	AdditiveExpression	end - start - 1		5145372	0		-			
ANR	5145530	Identifier	end		5145372	0					
ANR	5145531	AdditiveExpression	start - 1		5145372	1		-			
ANR	5145532	Identifier	start		5145372	0					
ANR	5145533	PrimaryExpression	1		5145372	1					
ANR	5145534	IfStatement	if ( ! b64d )		5145372	10					
ANR	5145535	Condition	! b64d	279:5:5751:5755	5145372	0	True				
ANR	5145536	UnaryOperationExpression	! b64d		5145372	0					
ANR	5145537	UnaryOperator	!		5145372	0					
ANR	5145538	Identifier	b64d		5145372	1					
ANR	5145539	CompoundStatement		34:12:629:629	5145372	1					
ANR	5145540	ExpressionStatement	free ( str )	280:2:5762:5772	5145372	0	True				
ANR	5145541	CallExpression	free ( str )		5145372	0					
ANR	5145542	Callee	free		5145372	0					
ANR	5145543	Identifier	free		5145372	0					
ANR	5145544	ArgumentList	str		5145372	1					
ANR	5145545	Argument	str		5145372	0					
ANR	5145546	Identifier	str		5145372	0					
ANR	5145547	ExpressionStatement	free ( b64d )	281:2:5776:5787	5145372	1	True				
ANR	5145548	CallExpression	free ( b64d )		5145372	0					
ANR	5145549	Callee	free		5145372	0					
ANR	5145550	Identifier	free		5145372	0					
ANR	5145551	ArgumentList	b64d		5145372	1					
ANR	5145552	Argument	b64d		5145372	0					
ANR	5145553	Identifier	b64d		5145372	0					
ANR	5145554	ReturnStatement	return NULL ;	282:2:5791:5802	5145372	2	True				
ANR	5145555	Identifier	NULL		5145372	0					
ANR	5145556	IdentifierDeclStatement	"int i , len = strlen ( ( const char * ) b64d ) ;"	286:1:5837:5877	5145372	11	True				
ANR	5145557	IdentifierDecl	i		5145372	0					
ANR	5145558	IdentifierDeclType	int		5145372	0					
ANR	5145559	Identifier	i		5145372	1					
ANR	5145560	IdentifierDecl	len = strlen ( ( const char * ) b64d )		5145372	1					
ANR	5145561	IdentifierDeclType	int		5145372	0					
ANR	5145562	Identifier	len		5145372	1					
ANR	5145563	AssignmentExpression	len = strlen ( ( const char * ) b64d )		5145372	2		=			
ANR	5145564	Identifier	len		5145372	0					
ANR	5145565	CallExpression	strlen ( ( const char * ) b64d )		5145372	1					
ANR	5145566	Callee	strlen		5145372	0					
ANR	5145567	Identifier	strlen		5145372	0					
ANR	5145568	ArgumentList	( const char * ) b64d		5145372	1					
ANR	5145569	Argument	( const char * ) b64d		5145372	0					
ANR	5145570	CastExpression	( const char * ) b64d		5145372	0					
ANR	5145571	CastTarget	const char *		5145372	0					
ANR	5145572	Identifier	b64d		5145372	1					
ANR	5145573	IdentifierDeclStatement	char * out = malloc ( len * 2 + 1 ) ;	287:1:5880:5913	5145372	12	True				
ANR	5145574	IdentifierDecl	* out = malloc ( len * 2 + 1 )		5145372	0					
ANR	5145575	IdentifierDeclType	char *		5145372	0					
ANR	5145576	Identifier	out		5145372	1					
ANR	5145577	AssignmentExpression	* out = malloc ( len * 2 + 1 )		5145372	2		=			
ANR	5145578	Identifier	out		5145372	0					
ANR	5145579	CallExpression	malloc ( len * 2 + 1 )		5145372	1					
ANR	5145580	Callee	malloc		5145372	0					
ANR	5145581	Identifier	malloc		5145372	0					
ANR	5145582	ArgumentList	len * 2 + 1		5145372	1					
ANR	5145583	Argument	len * 2 + 1		5145372	0					
ANR	5145584	AdditiveExpression	len * 2 + 1		5145372	0		+			
ANR	5145585	MultiplicativeExpression	len * 2		5145372	0		*			
ANR	5145586	Identifier	len		5145372	0					
ANR	5145587	PrimaryExpression	2		5145372	1					
ANR	5145588	PrimaryExpression	1		5145372	1					
ANR	5145589	IfStatement	if ( ! out )		5145372	13					
ANR	5145590	Condition	! out	288:5:5920:5923	5145372	0	True				
ANR	5145591	UnaryOperationExpression	! out		5145372	0					
ANR	5145592	UnaryOperator	!		5145372	0					
ANR	5145593	Identifier	out		5145372	1					
ANR	5145594	CompoundStatement		43:11:797:797	5145372	1					
ANR	5145595	ExpressionStatement	free ( str )	289:2:5930:5940	5145372	0	True				
ANR	5145596	CallExpression	free ( str )		5145372	0					
ANR	5145597	Callee	free		5145372	0					
ANR	5145598	Identifier	free		5145372	0					
ANR	5145599	ArgumentList	str		5145372	1					
ANR	5145600	Argument	str		5145372	0					
ANR	5145601	Identifier	str		5145372	0					
ANR	5145602	ExpressionStatement	free ( b64d )	290:2:5944:5955	5145372	1	True				
ANR	5145603	CallExpression	free ( b64d )		5145372	0					
ANR	5145604	Callee	free		5145372	0					
ANR	5145605	Identifier	free		5145372	0					
ANR	5145606	ArgumentList	b64d		5145372	1					
ANR	5145607	Argument	b64d		5145372	0					
ANR	5145608	Identifier	b64d		5145372	0					
ANR	5145609	ReturnStatement	return NULL ;	291:2:5959:5970	5145372	2	True				
ANR	5145610	Identifier	NULL		5145372	0					
ANR	5145611	ForStatement	for ( i = 0 ; i < len ; i ++ )		5145372	14					
ANR	5145612	ForInit	i = 0 ;	293:6:5981:5986	5145372	0	True				
ANR	5145613	AssignmentExpression	i = 0		5145372	0		=			
ANR	5145614	Identifier	i		5145372	0					
ANR	5145615	PrimaryExpression	0		5145372	1					
ANR	5145616	Condition	i < len	293:13:5988:5994	5145372	1	True				
ANR	5145617	RelationalExpression	i < len		5145372	0		<			
ANR	5145618	Identifier	i		5145372	0					
ANR	5145619	Identifier	len		5145372	1					
ANR	5145620	PostIncDecOperationExpression	i ++	293:22:5997:5999	5145372	2	True				
ANR	5145621	Identifier	i		5145372	0					
ANR	5145622	IncDec	++		5145372	1					
ANR	5145623	CompoundStatement		48:27:873:873	5145372	3					
ANR	5145624	ExpressionStatement	"sprintf ( & out [ i * 2 ] , ""%02x"" , b64d [ i ] )"	294:2:6006:6044	5145372	0	True				
ANR	5145625	CallExpression	"sprintf ( & out [ i * 2 ] , ""%02x"" , b64d [ i ] )"		5145372	0					
ANR	5145626	Callee	sprintf		5145372	0					
ANR	5145627	Identifier	sprintf		5145372	0					
ANR	5145628	ArgumentList	& out [ i * 2 ]		5145372	1					
ANR	5145629	Argument	& out [ i * 2 ]		5145372	0					
ANR	5145630	UnaryOperationExpression	& out [ i * 2 ]		5145372	0					
ANR	5145631	UnaryOperator	&		5145372	0					
ANR	5145632	ArrayIndexing	out [ i * 2 ]		5145372	1					
ANR	5145633	Identifier	out		5145372	0					
ANR	5145634	MultiplicativeExpression	i * 2		5145372	1		*			
ANR	5145635	Identifier	i		5145372	0					
ANR	5145636	PrimaryExpression	2		5145372	1					
ANR	5145637	Argument	"""%02x"""		5145372	1					
ANR	5145638	PrimaryExpression	"""%02x"""		5145372	0					
ANR	5145639	Argument	b64d [ i ]		5145372	2					
ANR	5145640	ArrayIndexing	b64d [ i ]		5145372	0					
ANR	5145641	Identifier	b64d		5145372	0					
ANR	5145642	Identifier	i		5145372	1					
ANR	5145643	ExpressionStatement	out [ len * 2 ] = '\\0'	296:1:6050:6069	5145372	15	True				
ANR	5145644	AssignmentExpression	out [ len * 2 ] = '\\0'		5145372	0		=			
ANR	5145645	ArrayIndexing	out [ len * 2 ]		5145372	0					
ANR	5145646	Identifier	out		5145372	0					
ANR	5145647	MultiplicativeExpression	len * 2		5145372	1		*			
ANR	5145648	Identifier	len		5145372	0					
ANR	5145649	PrimaryExpression	2		5145372	1					
ANR	5145650	PrimaryExpression	'\\0'		5145372	1					
ANR	5145651	ExpressionStatement	free ( str )	298:1:6073:6083	5145372	16	True				
ANR	5145652	CallExpression	free ( str )		5145372	0					
ANR	5145653	Callee	free		5145372	0					
ANR	5145654	Identifier	free		5145372	0					
ANR	5145655	ArgumentList	str		5145372	1					
ANR	5145656	Argument	str		5145372	0					
ANR	5145657	Identifier	str		5145372	0					
ANR	5145658	ExpressionStatement	free ( b64d )	299:1:6086:6097	5145372	17	True				
ANR	5145659	CallExpression	free ( b64d )		5145372	0					
ANR	5145660	Callee	free		5145372	0					
ANR	5145661	Identifier	free		5145372	0					
ANR	5145662	ArgumentList	b64d		5145372	1					
ANR	5145663	Argument	b64d		5145372	0					
ANR	5145664	Identifier	b64d		5145372	0					
ANR	5145665	ReturnStatement	return out ;	300:1:6100:6110	5145372	18	True				
ANR	5145666	Identifier	out		5145372	0					
ANR	5145667	ReturnType	R_API char *		5145372	1					
ANR	5145668	Identifier	r_hex_from_js		5145372	2					
ANR	5145669	ParameterList	const char * code		5145372	3					
ANR	5145670	Parameter	const char * code	246:26:5110:5125	5145372	0	True				
ANR	5145671	ParameterType	const char *		5145372	0					
ANR	5145672	Identifier	code		5145372	1					
ANR	5145673	CFGEntryNode	ENTRY		5145372		True				
ANR	5145674	CFGExitNode	EXIT		5145372		True				
ANR	5145675	Symbol	malloc		5145372						
ANR	5145676	Symbol	* b64d		5145372						
ANR	5145677	Symbol	code		5145372						
ANR	5145678	Symbol	NULL		5145372						
ANR	5145679	Symbol	r_str_ndup		5145372						
ANR	5145680	Symbol	start		5145372						
ANR	5145681	Symbol	strchr		5145372						
ANR	5145682	Symbol	b64d		5145372						
ANR	5145683	Symbol	i		5145372						
ANR	5145684	Symbol	out		5145372						
ANR	5145685	Symbol	str		5145372						
ANR	5145686	Symbol	strlen		5145372						
ANR	5145687	Symbol	* i		5145372						
ANR	5145688	Symbol	len		5145372						
ANR	5145689	Symbol	* out		5145372						
ANR	5145690	Symbol	end		5145372						
ANR	5145691	Symbol	s1		5145372						
ANR	5145692	Symbol	s2		5145372						
ANR	5145693	Symbol	* len		5145372						
ANR	5145694	Function	r_hex_no_code	309:0:6202:6649							
ANR	5145695	FunctionDef	r_hex_no_code (const char * code)		5145694	0					
ANR	5145696	CompoundStatement		309:44:6246:6649	5145694	0					
ANR	5145697	IfStatement	if ( ! code )		5145694	0					
ANR	5145698	Condition	! code	310:5:6253:6257	5145694	0	True				
ANR	5145699	UnaryOperationExpression	! code		5145694	0					
ANR	5145700	UnaryOperator	!		5145694	0					
ANR	5145701	Identifier	code		5145694	1					
ANR	5145702	CompoundStatement		2:12:13:13	5145694	1					
ANR	5145703	ReturnStatement	return NULL ;	311:2:6264:6275	5145694	0	True				
ANR	5145704	Identifier	NULL		5145694	0					
ANR	5145705	Statement	char	313:1:6281:6284	5145694	1	True				
ANR	5145706	Statement	*	313:6:6286:6286	5145694	2	True				
ANR	5145707	Statement	const	313:8:6288:6292	5145694	3	True				
ANR	5145708	ExpressionStatement	"ret = calloc ( 1 , strlen ( code ) * 3 )"	313:14:6294:6329	5145694	4	True				
ANR	5145709	AssignmentExpression	"ret = calloc ( 1 , strlen ( code ) * 3 )"		5145694	0		=			
ANR	5145710	Identifier	ret		5145694	0					
ANR	5145711	CallExpression	"calloc ( 1 , strlen ( code ) * 3 )"		5145694	1					
ANR	5145712	Callee	calloc		5145694	0					
ANR	5145713	Identifier	calloc		5145694	0					
ANR	5145714	ArgumentList	1		5145694	1					
ANR	5145715	Argument	1		5145694	0					
ANR	5145716	PrimaryExpression	1		5145694	0					
ANR	5145717	Argument	strlen ( code ) * 3		5145694	1					
ANR	5145718	MultiplicativeExpression	strlen ( code ) * 3		5145694	0		*			
ANR	5145719	CallExpression	strlen ( code )		5145694	0					
ANR	5145720	Callee	strlen		5145694	0					
ANR	5145721	Identifier	strlen		5145694	0					
ANR	5145722	ArgumentList	code		5145694	1					
ANR	5145723	Argument	code		5145694	0					
ANR	5145724	Identifier	code		5145694	0					
ANR	5145725	PrimaryExpression	3		5145694	1					
ANR	5145726	IfStatement	if ( ! ret )		5145694	5					
ANR	5145727	Condition	! ret	314:5:6336:6339	5145694	0	True				
ANR	5145728	UnaryOperationExpression	! ret		5145694	0					
ANR	5145729	UnaryOperator	!		5145694	0					
ANR	5145730	Identifier	ret		5145694	1					
ANR	5145731	CompoundStatement		6:11:95:95	5145694	1					
ANR	5145732	ReturnStatement	return NULL ;	315:2:6346:6357	5145694	0	True				
ANR	5145733	Identifier	NULL		5145694	0					
ANR	5145734	ExpressionStatement	* ret = '\\0'	317:1:6363:6374	5145694	6	True				
ANR	5145735	AssignmentExpression	* ret = '\\0'		5145694	0		=			
ANR	5145736	UnaryOperationExpression	* ret		5145694	0					
ANR	5145737	UnaryOperator	*		5145694	0					
ANR	5145738	Identifier	ret		5145694	1					
ANR	5145739	PrimaryExpression	'\\0'		5145694	1					
ANR	5145740	IdentifierDeclStatement	char * out = ret ;	318:1:6377:6392	5145694	7	True				
ANR	5145741	IdentifierDecl	* out = ret		5145694	0					
ANR	5145742	IdentifierDeclType	char *		5145694	0					
ANR	5145743	Identifier	out		5145694	1					
ANR	5145744	AssignmentExpression	* out = ret		5145694	2		=			
ANR	5145745	Identifier	ret		5145694	0					
ANR	5145746	Identifier	ret		5145694	1					
ANR	5145747	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	319:1:6395:6430	5145694	8	True				
ANR	5145748	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		5145694	0		=			
ANR	5145749	Identifier	out		5145694	0					
ANR	5145750	CallExpression	"r_hex_from_c_str ( out , & code )"		5145694	1					
ANR	5145751	Callee	r_hex_from_c_str		5145694	0					
ANR	5145752	Identifier	r_hex_from_c_str		5145694	0					
ANR	5145753	ArgumentList	out		5145694	1					
ANR	5145754	Argument	out		5145694	0					
ANR	5145755	Identifier	out		5145694	0					
ANR	5145756	Argument	& code		5145694	1					
ANR	5145757	UnaryOperationExpression	& code		5145694	0					
ANR	5145758	UnaryOperator	&		5145694	0					
ANR	5145759	Identifier	code		5145694	1					
ANR	5145760	ExpressionStatement	"code = strchr ( code + 1 , '""' )"	320:1:6433:6462	5145694	9	True				
ANR	5145761	AssignmentExpression	"code = strchr ( code + 1 , '""' )"		5145694	0		=			
ANR	5145762	Identifier	code		5145694	0					
ANR	5145763	CallExpression	"strchr ( code + 1 , '""' )"		5145694	1					
ANR	5145764	Callee	strchr		5145694	0					
ANR	5145765	Identifier	strchr		5145694	0					
ANR	5145766	ArgumentList	code + 1		5145694	1					
ANR	5145767	Argument	code + 1		5145694	0					
ANR	5145768	AdditiveExpression	code + 1		5145694	0		+			
ANR	5145769	Identifier	code		5145694	0					
ANR	5145770	PrimaryExpression	1		5145694	1					
ANR	5145771	Argument	"'""'"		5145694	1					
ANR	5145772	PrimaryExpression	"'""'"		5145694	0					
ANR	5145773	IfStatement	if ( ! out )		5145694	10					
ANR	5145774	Condition	! out	321:5:6469:6472	5145694	0	True				
ANR	5145775	UnaryOperationExpression	! out		5145694	0					
ANR	5145776	UnaryOperator	!		5145694	0					
ANR	5145777	Identifier	out		5145694	1					
ANR	5145778	CompoundStatement		13:11:228:228	5145694	1					
ANR	5145779	ExpressionStatement	free ( ret )	322:2:6479:6489	5145694	0	True				
ANR	5145780	CallExpression	free ( ret )		5145694	0					
ANR	5145781	Callee	free		5145694	0					
ANR	5145782	Identifier	free		5145694	0					
ANR	5145783	ArgumentList	ret		5145694	1					
ANR	5145784	Argument	ret		5145694	0					
ANR	5145785	Identifier	ret		5145694	0					
ANR	5145786	ReturnStatement	return NULL ;	323:2:6493:6504	5145694	1	True				
ANR	5145787	Identifier	NULL		5145694	0					
ANR	5145788	ExpressionStatement	* out = '\\0'	325:1:6510:6521	5145694	11	True				
ANR	5145789	AssignmentExpression	* out = '\\0'		5145694	0		=			
ANR	5145790	UnaryOperationExpression	* out		5145694	0					
ANR	5145791	UnaryOperator	*		5145694	0					
ANR	5145792	Identifier	out		5145694	1					
ANR	5145793	PrimaryExpression	'\\0'		5145694	1					
ANR	5145794	WhileStatement	while ( out && code )		5145694	12					
ANR	5145795	Condition	out && code	326:8:6531:6541	5145694	0	True				
ANR	5145796	AndExpression	out && code		5145694	0		&&			
ANR	5145797	Identifier	out		5145694	0					
ANR	5145798	Identifier	code		5145694	1					
ANR	5145799	CompoundStatement		18:21:297:297	5145694	1					
ANR	5145800	ExpressionStatement	* out = '\\0'	327:2:6548:6559	5145694	0	True				
ANR	5145801	AssignmentExpression	* out = '\\0'		5145694	0		=			
ANR	5145802	UnaryOperationExpression	* out		5145694	0					
ANR	5145803	UnaryOperator	*		5145694	0					
ANR	5145804	Identifier	out		5145694	1					
ANR	5145805	PrimaryExpression	'\\0'		5145694	1					
ANR	5145806	ExpressionStatement	"out = r_hex_from_c_str ( out , & code )"	328:2:6563:6598	5145694	1	True				
ANR	5145807	AssignmentExpression	"out = r_hex_from_c_str ( out , & code )"		5145694	0		=			
ANR	5145808	Identifier	out		5145694	0					
ANR	5145809	CallExpression	"r_hex_from_c_str ( out , & code )"		5145694	1					
ANR	5145810	Callee	r_hex_from_c_str		5145694	0					
ANR	5145811	Identifier	r_hex_from_c_str		5145694	0					
ANR	5145812	ArgumentList	out		5145694	1					
ANR	5145813	Argument	out		5145694	0					
ANR	5145814	Identifier	out		5145694	0					
ANR	5145815	Argument	& code		5145694	1					
ANR	5145816	UnaryOperationExpression	& code		5145694	0					
ANR	5145817	UnaryOperator	&		5145694	0					
ANR	5145818	Identifier	code		5145694	1					
ANR	5145819	ExpressionStatement	"code = strchr ( code + 1 , '""' )"	329:2:6602:6631	5145694	2	True				
ANR	5145820	AssignmentExpression	"code = strchr ( code + 1 , '""' )"		5145694	0		=			
ANR	5145821	Identifier	code		5145694	0					
ANR	5145822	CallExpression	"strchr ( code + 1 , '""' )"		5145694	1					
ANR	5145823	Callee	strchr		5145694	0					
ANR	5145824	Identifier	strchr		5145694	0					
ANR	5145825	ArgumentList	code + 1		5145694	1					
ANR	5145826	Argument	code + 1		5145694	0					
ANR	5145827	AdditiveExpression	code + 1		5145694	0		+			
ANR	5145828	Identifier	code		5145694	0					
ANR	5145829	PrimaryExpression	1		5145694	1					
ANR	5145830	Argument	"'""'"		5145694	1					
ANR	5145831	PrimaryExpression	"'""'"		5145694	0					
ANR	5145832	ReturnStatement	return ret ;	331:1:6637:6647	5145694	13	True				
ANR	5145833	Identifier	ret		5145694	0					
ANR	5145834	ReturnType	R_API char *		5145694	1					
ANR	5145835	Identifier	r_hex_no_code		5145694	2					
ANR	5145836	ParameterList	const char * code		5145694	3					
ANR	5145837	Parameter	const char * code	309:26:6228:6243	5145694	0	True				
ANR	5145838	ParameterType	const char *		5145694	0					
ANR	5145839	Identifier	code		5145694	1					
ANR	5145840	CFGEntryNode	ENTRY		5145694		True				
ANR	5145841	CFGExitNode	EXIT		5145694		True				
ANR	5145842	Symbol	ret		5145694						
ANR	5145843	Symbol	strlen		5145694						
ANR	5145844	Symbol	r_hex_from_c_str		5145694						
ANR	5145845	Symbol	code		5145694						
ANR	5145846	Symbol	NULL		5145694						
ANR	5145847	Symbol	* out		5145694						
ANR	5145848	Symbol	strchr		5145694						
ANR	5145849	Symbol	calloc		5145694						
ANR	5145850	Symbol	* ret		5145694						
ANR	5145851	Symbol	& code		5145694						
ANR	5145852	Symbol	out		5145694						
ANR	5145853	Function	r_hex_from_code	334:0:6652:6999							
ANR	5145854	FunctionDef	r_hex_from_code (const char * code)		5145853	0					
ANR	5145855	CompoundStatement		334:46:6698:6999	5145853	0					
ANR	5145856	IfStatement	"if ( ! strchr ( code , '=' ) )"		5145853	0					
ANR	5145857	Condition	"! strchr ( code , '=' )"	335:5:6705:6723	5145853	0	True				
ANR	5145858	UnaryOperationExpression	"! strchr ( code , '=' )"		5145853	0					
ANR	5145859	UnaryOperator	!		5145853	0					
ANR	5145860	CallExpression	"strchr ( code , '=' )"		5145853	1					
ANR	5145861	Callee	strchr		5145853	0					
ANR	5145862	Identifier	strchr		5145853	0					
ANR	5145863	ArgumentList	code		5145853	1					
ANR	5145864	Argument	code		5145853	0					
ANR	5145865	Identifier	code		5145853	0					
ANR	5145866	Argument	'='		5145853	1					
ANR	5145867	PrimaryExpression	'='		5145853	0					
ANR	5145868	CompoundStatement		2:26:27:27	5145853	1					
ANR	5145869	ReturnStatement	return r_hex_no_code ( code ) ;	336:2:6730:6757	5145853	0	True				
ANR	5145870	CallExpression	r_hex_no_code ( code )		5145853	0					
ANR	5145871	Callee	r_hex_no_code		5145853	0					
ANR	5145872	Identifier	r_hex_no_code		5145853	0					
ANR	5145873	ArgumentList	code		5145853	1					
ANR	5145874	Argument	code		5145853	0					
ANR	5145875	Identifier	code		5145853	0					
ANR	5145876	IfStatement	"if ( strstr ( code , ""char"" ) || strstr ( code , ""int"" ) )"		5145853	1					
ANR	5145877	Condition	"strstr ( code , ""char"" ) || strstr ( code , ""int"" )"	339:5:6785:6829	5145853	0	True				
ANR	5145878	OrExpression	"strstr ( code , ""char"" ) || strstr ( code , ""int"" )"		5145853	0		||			
ANR	5145879	CallExpression	"strstr ( code , ""char"" )"		5145853	0					
ANR	5145880	Callee	strstr		5145853	0					
ANR	5145881	Identifier	strstr		5145853	0					
ANR	5145882	ArgumentList	code		5145853	1					
ANR	5145883	Argument	code		5145853	0					
ANR	5145884	Identifier	code		5145853	0					
ANR	5145885	Argument	"""char"""		5145853	1					
ANR	5145886	PrimaryExpression	"""char"""		5145853	0					
ANR	5145887	CallExpression	"strstr ( code , ""int"" )"		5145853	1					
ANR	5145888	Callee	strstr		5145853	0					
ANR	5145889	Identifier	strstr		5145853	0					
ANR	5145890	ArgumentList	code		5145853	1					
ANR	5145891	Argument	code		5145853	0					
ANR	5145892	Identifier	code		5145853	0					
ANR	5145893	Argument	"""int"""		5145853	1					
ANR	5145894	PrimaryExpression	"""int"""		5145853	0					
ANR	5145895	CompoundStatement		6:52:133:133	5145853	1					
ANR	5145896	ReturnStatement	return r_hex_from_c ( code ) ;	340:2:6836:6862	5145853	0	True				
ANR	5145897	CallExpression	r_hex_from_c ( code )		5145853	0					
ANR	5145898	Callee	r_hex_from_c		5145853	0					
ANR	5145899	Identifier	r_hex_from_c		5145853	0					
ANR	5145900	ArgumentList	code		5145853	1					
ANR	5145901	Argument	code		5145853	0					
ANR	5145902	Identifier	code		5145853	0					
ANR	5145903	IfStatement	"if ( strstr ( code , ""var"" ) )"		5145853	2					
ANR	5145904	Condition	"strstr ( code , ""var"" )"	343:5:6890:6909	5145853	0	True				
ANR	5145905	CallExpression	"strstr ( code , ""var"" )"		5145853	0					
ANR	5145906	Callee	strstr		5145853	0					
ANR	5145907	Identifier	strstr		5145853	0					
ANR	5145908	ArgumentList	code		5145853	1					
ANR	5145909	Argument	code		5145853	0					
ANR	5145910	Identifier	code		5145853	0					
ANR	5145911	Argument	"""var"""		5145853	1					
ANR	5145912	PrimaryExpression	"""var"""		5145853	0					
ANR	5145913	CompoundStatement		10:27:213:213	5145853	1					
ANR	5145914	ReturnStatement	return r_hex_from_js ( code ) ;	344:2:6916:6943	5145853	0	True				
ANR	5145915	CallExpression	r_hex_from_js ( code )		5145853	0					
ANR	5145916	Callee	r_hex_from_js		5145853	0					
ANR	5145917	Identifier	r_hex_from_js		5145853	0					
ANR	5145918	ArgumentList	code		5145853	1					
ANR	5145919	Argument	code		5145853	0					
ANR	5145920	Identifier	code		5145853	0					
ANR	5145921	ReturnStatement	return r_hex_from_py ( code ) ;	347:1:6970:6997	5145853	3	True				
ANR	5145922	CallExpression	r_hex_from_py ( code )		5145853	0					
ANR	5145923	Callee	r_hex_from_py		5145853	0					
ANR	5145924	Identifier	r_hex_from_py		5145853	0					
ANR	5145925	ArgumentList	code		5145853	1					
ANR	5145926	Argument	code		5145853	0					
ANR	5145927	Identifier	code		5145853	0					
ANR	5145928	ReturnType	R_API char *		5145853	1					
ANR	5145929	Identifier	r_hex_from_code		5145853	2					
ANR	5145930	ParameterList	const char * code		5145853	3					
ANR	5145931	Parameter	const char * code	334:28:6680:6695	5145853	0	True				
ANR	5145932	ParameterType	const char *		5145853	0					
ANR	5145933	Identifier	code		5145853	1					
ANR	5145934	CFGEntryNode	ENTRY		5145853		True				
ANR	5145935	CFGExitNode	EXIT		5145853		True				
ANR	5145936	Symbol	r_hex_no_code		5145853						
ANR	5145937	Symbol	code		5145853						
ANR	5145938	Symbol	r_hex_from_js		5145853						
ANR	5145939	Symbol	r_hex_from_py		5145853						
ANR	5145940	Symbol	strstr		5145853						
ANR	5145941	Symbol	strchr		5145853						
ANR	5145942	Symbol	r_hex_from_c		5145853						
ANR	5145943	Function	r_hex_pair2bin	352:0:7069:7454							
ANR	5145944	FunctionDef	r_hex_pair2bin (const char * arg)		5145943	0					
ANR	5145945	CompoundStatement		352:42:7111:7454	5145943	0					
ANR	5145946	IdentifierDeclStatement	"ut8 * ptr , c = 0 , d = 0 ;"	353:1:7114:7136	5145943	0	True				
ANR	5145947	IdentifierDecl	* ptr		5145943	0					
ANR	5145948	IdentifierDeclType	ut8 *		5145943	0					
ANR	5145949	Identifier	ptr		5145943	1					
ANR	5145950	IdentifierDecl	c = 0		5145943	1					
ANR	5145951	IdentifierDeclType	ut8		5145943	0					
ANR	5145952	Identifier	c		5145943	1					
ANR	5145953	AssignmentExpression	c = 0		5145943	2		=			
ANR	5145954	Identifier	c		5145943	0					
ANR	5145955	PrimaryExpression	0		5145943	1					
ANR	5145956	IdentifierDecl	d = 0		5145943	2					
ANR	5145957	IdentifierDeclType	ut8		5145943	0					
ANR	5145958	Identifier	d		5145943	1					
ANR	5145959	AssignmentExpression	d = 0		5145943	2		=			
ANR	5145960	Identifier	d		5145943	0					
ANR	5145961	PrimaryExpression	0		5145943	1					
ANR	5145962	IdentifierDeclStatement	ut32 j = 0 ;	354:1:7139:7149	5145943	1	True				
ANR	5145963	IdentifierDecl	j = 0		5145943	0					
ANR	5145964	IdentifierDeclType	ut32		5145943	0					
ANR	5145965	Identifier	j		5145943	1					
ANR	5145966	AssignmentExpression	j = 0		5145943	2		=			
ANR	5145967	Identifier	j		5145943	0					
ANR	5145968	PrimaryExpression	0		5145943	1					
ANR	5145969	ForStatement	for ( ptr = ( ut8 * ) arg ; ; ptr = ptr + 1 )		5145943	2					
ANR	5145970	ForInit	ptr = ( ut8 * ) arg ;	356:6:7158:7173	5145943	0	True				
ANR	5145971	AssignmentExpression	ptr = ( ut8 * ) arg		5145943	0		=			
ANR	5145972	Identifier	ptr		5145943	0					
ANR	5145973	CastExpression	( ut8 * ) arg		5145943	1					
ANR	5145974	CastTarget	ut8 *		5145943	0					
ANR	5145975	Identifier	arg		5145943	1					
ANR	5145976	AssignmentExpression	ptr = ptr + 1	356:24:7176:7188	5145943	1	True	=			
ANR	5145977	Identifier	ptr		5145943	0					
ANR	5145978	AdditiveExpression	ptr + 1		5145943	1		+			
ANR	5145979	Identifier	ptr		5145943	0					
ANR	5145980	PrimaryExpression	1		5145943	1					
ANR	5145981	CompoundStatement		5:39:79:79	5145943	2					
ANR	5145982	IfStatement	if ( ! * ptr || * ptr == ' ' || j == 2 )		5145943	0					
ANR	5145983	Condition	! * ptr || * ptr == ' ' || j == 2	357:6:7199:7224	5145943	0	True				
ANR	5145984	OrExpression	! * ptr || * ptr == ' ' || j == 2		5145943	0		||			
ANR	5145985	UnaryOperationExpression	! * ptr		5145943	0					
ANR	5145986	UnaryOperator	!		5145943	0					
ANR	5145987	UnaryOperationExpression	* ptr		5145943	1					
ANR	5145988	UnaryOperator	*		5145943	0					
ANR	5145989	Identifier	ptr		5145943	1					
ANR	5145990	OrExpression	* ptr == ' ' || j == 2		5145943	1		||			
ANR	5145991	EqualityExpression	* ptr == ' '		5145943	0		==			
ANR	5145992	UnaryOperationExpression	* ptr		5145943	0					
ANR	5145993	UnaryOperator	*		5145943	0					
ANR	5145994	Identifier	ptr		5145943	1					
ANR	5145995	PrimaryExpression	' '		5145943	1					
ANR	5145996	EqualityExpression	j == 2		5145943	1		==			
ANR	5145997	Identifier	j		5145943	0					
ANR	5145998	PrimaryExpression	2		5145943	1					
ANR	5145999	CompoundStatement		6:34:115:115	5145943	1					
ANR	5146000	BreakStatement	break ;	358:3:7232:7237	5145943	0	True				
ANR	5146001	ExpressionStatement	d = c	360:2:7245:7250	5145943	1	True				
ANR	5146002	AssignmentExpression	d = c		5145943	0		=			
ANR	5146003	Identifier	d		5145943	0					
ANR	5146004	Identifier	c		5145943	1					
ANR	5146005	IfStatement	"if ( * ptr != '.' && r_hex_to_byte ( & c , * ptr ) )"		5145943	2					
ANR	5146006	Condition	"* ptr != '.' && r_hex_to_byte ( & c , * ptr )"	361:6:7258:7296	5145943	0	True				
ANR	5146007	AndExpression	"* ptr != '.' && r_hex_to_byte ( & c , * ptr )"		5145943	0		&&			
ANR	5146008	EqualityExpression	* ptr != '.'		5145943	0		!=			
ANR	5146009	UnaryOperationExpression	* ptr		5145943	0					
ANR	5146010	UnaryOperator	*		5145943	0					
ANR	5146011	Identifier	ptr		5145943	1					
ANR	5146012	PrimaryExpression	'.'		5145943	1					
ANR	5146013	CallExpression	"r_hex_to_byte ( & c , * ptr )"		5145943	1					
ANR	5146014	Callee	r_hex_to_byte		5145943	0					
ANR	5146015	Identifier	r_hex_to_byte		5145943	0					
ANR	5146016	ArgumentList	& c		5145943	1					
ANR	5146017	Argument	& c		5145943	0					
ANR	5146018	UnaryOperationExpression	& c		5145943	0					
ANR	5146019	UnaryOperator	&		5145943	0					
ANR	5146020	Identifier	c		5145943	1					
ANR	5146021	Argument	* ptr		5145943	1					
ANR	5146022	UnaryOperationExpression	* ptr		5145943	0					
ANR	5146023	UnaryOperator	*		5145943	0					
ANR	5146024	Identifier	ptr		5145943	1					
ANR	5146025	CompoundStatement		10:47:187:187	5145943	1					
ANR	5146026	ExpressionStatement	"eprintf ( ""Invalid hexa string at char '%c' (%s).\\n"" , * ptr , arg )"	362:3:7304:7371	5145943	0	True				
ANR	5146027	CallExpression	"eprintf ( ""Invalid hexa string at char '%c' (%s).\\n"" , * ptr , arg )"		5145943	0					
ANR	5146028	Callee	eprintf		5145943	0					
ANR	5146029	Identifier	eprintf		5145943	0					
ANR	5146030	ArgumentList	"""Invalid hexa string at char '%c' (%s).\\n"""		5145943	1					
ANR	5146031	Argument	"""Invalid hexa string at char '%c' (%s).\\n"""		5145943	0					
ANR	5146032	PrimaryExpression	"""Invalid hexa string at char '%c' (%s).\\n"""		5145943	0					
ANR	5146033	Argument	* ptr		5145943	1					
ANR	5146034	UnaryOperationExpression	* ptr		5145943	0					
ANR	5146035	UnaryOperator	*		5145943	0					
ANR	5146036	Identifier	ptr		5145943	1					
ANR	5146037	Argument	arg		5145943	2					
ANR	5146038	Identifier	arg		5145943	0					
ANR	5146039	ReturnStatement	return - 1 ;	364:3:7376:7385	5145943	1	True				
ANR	5146040	UnaryOperationExpression	- 1		5145943	0					
ANR	5146041	UnaryOperator	-		5145943	0					
ANR	5146042	PrimaryExpression	1		5145943	1					
ANR	5146043	ExpressionStatement	c |= d	366:2:7393:7399	5145943	3	True				
ANR	5146044	AssignmentExpression	c |= d		5145943	0		|=			
ANR	5146045	Identifier	c		5145943	0					
ANR	5146046	Identifier	d		5145943	1					
ANR	5146047	IfStatement	if ( j ++ == 0 )		5145943	4					
ANR	5146048	Condition	j ++ == 0	367:6:7407:7414	5145943	0	True				
ANR	5146049	EqualityExpression	j ++ == 0		5145943	0		==			
ANR	5146050	PostIncDecOperationExpression	j ++		5145943	0					
ANR	5146051	Identifier	j		5145943	0					
ANR	5146052	IncDec	++		5145943	1					
ANR	5146053	PrimaryExpression	0		5145943	1					
ANR	5146054	CompoundStatement		16:16:305:305	5145943	1					
ANR	5146055	ExpressionStatement	c <<= 4	368:3:7422:7429	5145943	0	True				
ANR	5146056	AssignmentExpression	c <<= 4		5145943	0		<<=			
ANR	5146057	Identifier	c		5145943	0					
ANR	5146058	PrimaryExpression	4		5145943	1					
ANR	5146059	ReturnStatement	return ( int ) c ;	371:1:7439:7452	5145943	3	True				
ANR	5146060	CastExpression	( int ) c		5145943	0					
ANR	5146061	CastTarget	int		5145943	0					
ANR	5146062	Identifier	c		5145943	1					
ANR	5146063	ReturnType	R_API int		5145943	1					
ANR	5146064	Identifier	r_hex_pair2bin		5145943	2					
ANR	5146065	ParameterList	const char * arg		5145943	3					
ANR	5146066	Parameter	const char * arg	352:25:7094:7108	5145943	0	True				
ANR	5146067	ParameterType	const char *		5145943	0					
ANR	5146068	Identifier	arg		5145943	1					
ANR	5146069	CFGEntryNode	ENTRY		5145943		True				
ANR	5146070	CFGExitNode	EXIT		5145943		True				
ANR	5146071	InfiniteForNode	true		5145943		True				
ANR	5146072	Symbol	c		5145943						
ANR	5146073	Symbol	d		5145943						
ANR	5146074	Symbol	arg		5145943						
ANR	5146075	Symbol	* ptr		5145943						
ANR	5146076	Symbol	& c		5145943						
ANR	5146077	Symbol	j		5145943						
ANR	5146078	Symbol	r_hex_to_byte		5145943						
ANR	5146079	Symbol	ptr		5145943						
ANR	5146080	Function	r_hex_bin2str	374:0:7457:7730							
ANR	5146081	FunctionDef	"r_hex_bin2str (const ut8 * in , int len , char * out)"		5146080	0					
ANR	5146082	CompoundStatement		374:59:7516:7730	5146080	0					
ANR	5146083	IdentifierDeclStatement	"int i , idx ;"	375:1:7519:7529	5146080	0	True				
ANR	5146084	IdentifierDecl	i		5146080	0					
ANR	5146085	IdentifierDeclType	int		5146080	0					
ANR	5146086	Identifier	i		5146080	1					
ANR	5146087	IdentifierDecl	idx		5146080	1					
ANR	5146088	IdentifierDeclType	int		5146080	0					
ANR	5146089	Identifier	idx		5146080	1					
ANR	5146090	IdentifierDeclStatement	char tmp [ 8 ] ;	376:1:7532:7543	5146080	1	True				
ANR	5146091	IdentifierDecl	tmp [ 8 ]		5146080	0					
ANR	5146092	IdentifierDeclType	char [ 8 ]		5146080	0					
ANR	5146093	Identifier	tmp		5146080	1					
ANR	5146094	PrimaryExpression	8		5146080	2					
ANR	5146095	IfStatement	if ( len < 0 )		5146080	2					
ANR	5146096	Condition	len < 0	377:5:7550:7556	5146080	0	True				
ANR	5146097	RelationalExpression	len < 0		5146080	0		<			
ANR	5146098	Identifier	len		5146080	0					
ANR	5146099	PrimaryExpression	0		5146080	1					
ANR	5146100	CompoundStatement		4:14:42:42	5146080	1					
ANR	5146101	ReturnStatement	return 0 ;	378:2:7563:7571	5146080	0	True				
ANR	5146102	PrimaryExpression	0		5146080	0					
ANR	5146103	ForStatement	"for ( idx = i = 0 ; i < len ; i ++ , idx += 2 )"		5146080	3					
ANR	5146104	ForInit	idx = i = 0 ;	380:6:7582:7593	5146080	0	True				
ANR	5146105	AssignmentExpression	idx = i = 0		5146080	0		=			
ANR	5146106	Identifier	idx		5146080	0					
ANR	5146107	AssignmentExpression	i = 0		5146080	1		=			
ANR	5146108	Identifier	i		5146080	0					
ANR	5146109	PrimaryExpression	0		5146080	1					
ANR	5146110	Condition	i < len	380:19:7595:7601	5146080	1	True				
ANR	5146111	RelationalExpression	i < len		5146080	0		<			
ANR	5146112	Identifier	i		5146080	0					
ANR	5146113	Identifier	len		5146080	1					
ANR	5146114	Expression	"i ++ , idx += 2"	380:28:7604:7616	5146080	2	True				
ANR	5146115	PostIncDecOperationExpression	i ++		5146080	0					
ANR	5146116	Identifier	i		5146080	0					
ANR	5146117	IncDec	++		5146080	1					
ANR	5146118	AssignmentExpression	idx += 2		5146080	1		+=			
ANR	5146119	Identifier	idx		5146080	0					
ANR	5146120	PrimaryExpression	2		5146080	1					
ANR	5146121	CompoundStatement		7:44:103:103	5146080	3					
ANR	5146122	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"	381:2:7624:7667	5146080	0	True				
ANR	5146123	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"		5146080	0					
ANR	5146124	Callee	snprintf		5146080	0					
ANR	5146125	Identifier	snprintf		5146080	0					
ANR	5146126	ArgumentList	tmp		5146080	1					
ANR	5146127	Argument	tmp		5146080	0					
ANR	5146128	Identifier	tmp		5146080	0					
ANR	5146129	Argument	sizeof ( tmp )		5146080	1					
ANR	5146130	SizeofExpression	sizeof ( tmp )		5146080	0					
ANR	5146131	Sizeof	sizeof		5146080	0					
ANR	5146132	SizeofOperand	tmp		5146080	1					
ANR	5146133	Argument	"""%02x"""		5146080	2					
ANR	5146134	PrimaryExpression	"""%02x"""		5146080	0					
ANR	5146135	Argument	in [ i ]		5146080	3					
ANR	5146136	ArrayIndexing	in [ i ]		5146080	0					
ANR	5146137	Identifier	in		5146080	0					
ANR	5146138	Identifier	i		5146080	1					
ANR	5146139	ExpressionStatement	"memcpy ( out + idx , tmp , 2 )"	382:2:7671:7697	5146080	1	True				
ANR	5146140	CallExpression	"memcpy ( out + idx , tmp , 2 )"		5146080	0					
ANR	5146141	Callee	memcpy		5146080	0					
ANR	5146142	Identifier	memcpy		5146080	0					
ANR	5146143	ArgumentList	out + idx		5146080	1					
ANR	5146144	Argument	out + idx		5146080	0					
ANR	5146145	AdditiveExpression	out + idx		5146080	0		+			
ANR	5146146	Identifier	out		5146080	0					
ANR	5146147	Identifier	idx		5146080	1					
ANR	5146148	Argument	tmp		5146080	1					
ANR	5146149	Identifier	tmp		5146080	0					
ANR	5146150	Argument	2		5146080	2					
ANR	5146151	PrimaryExpression	2		5146080	0					
ANR	5146152	ExpressionStatement	out [ idx ] = 0	384:1:7703:7715	5146080	4	True				
ANR	5146153	AssignmentExpression	out [ idx ] = 0		5146080	0		=			
ANR	5146154	ArrayIndexing	out [ idx ]		5146080	0					
ANR	5146155	Identifier	out		5146080	0					
ANR	5146156	Identifier	idx		5146080	1					
ANR	5146157	PrimaryExpression	0		5146080	1					
ANR	5146158	ReturnStatement	return len ;	385:1:7718:7728	5146080	5	True				
ANR	5146159	Identifier	len		5146080	0					
ANR	5146160	ReturnType	R_API int		5146080	1					
ANR	5146161	Identifier	r_hex_bin2str		5146080	2					
ANR	5146162	ParameterList	"const ut8 * in , int len , char * out"		5146080	3					
ANR	5146163	Parameter	const ut8 * in	374:24:7481:7493	5146080	0	True				
ANR	5146164	ParameterType	const ut8 *		5146080	0					
ANR	5146165	Identifier	in		5146080	1					
ANR	5146166	Parameter	int len	374:39:7496:7502	5146080	1	True				
ANR	5146167	ParameterType	int		5146080	0					
ANR	5146168	Identifier	len		5146080	1					
ANR	5146169	Parameter	char * out	374:48:7505:7513	5146080	2	True				
ANR	5146170	ParameterType	char *		5146080	0					
ANR	5146171	Identifier	out		5146080	1					
ANR	5146172	CFGEntryNode	ENTRY		5146080		True				
ANR	5146173	CFGExitNode	EXIT		5146080		True				
ANR	5146174	Symbol	* i		5146080						
ANR	5146175	Symbol	len		5146080						
ANR	5146176	Symbol	in		5146080						
ANR	5146177	Symbol	tmp		5146080						
ANR	5146178	Symbol	* in		5146080						
ANR	5146179	Symbol	* out		5146080						
ANR	5146180	Symbol	* idx		5146080						
ANR	5146181	Symbol	i		5146080						
ANR	5146182	Symbol	idx		5146080						
ANR	5146183	Symbol	out		5146080						
ANR	5146184	Function	r_hex_bin2strdup	388:0:7733:8082							
ANR	5146185	FunctionDef	"r_hex_bin2strdup (const ut8 * in , int len)"		5146184	0					
ANR	5146186	CompoundStatement		388:53:7786:8082	5146184	0					
ANR	5146187	IdentifierDeclStatement	"int i , idx ;"	389:1:7789:7799	5146184	0	True				
ANR	5146188	IdentifierDecl	i		5146184	0					
ANR	5146189	IdentifierDeclType	int		5146184	0					
ANR	5146190	Identifier	i		5146184	1					
ANR	5146191	IdentifierDecl	idx		5146184	1					
ANR	5146192	IdentifierDeclType	int		5146184	0					
ANR	5146193	Identifier	idx		5146184	1					
ANR	5146194	IdentifierDeclStatement	"char tmp [ 5 ] , * out ;"	390:1:7802:7819	5146184	1	True				
ANR	5146195	IdentifierDecl	tmp [ 5 ]		5146184	0					
ANR	5146196	IdentifierDeclType	char [ 5 ]		5146184	0					
ANR	5146197	Identifier	tmp		5146184	1					
ANR	5146198	PrimaryExpression	5		5146184	2					
ANR	5146199	IdentifierDecl	* out		5146184	1					
ANR	5146200	IdentifierDeclType	char *		5146184	0					
ANR	5146201	Identifier	out		5146184	1					
ANR	5146202	IfStatement	if ( ( len + 1 ) * 2 < len )		5146184	2					
ANR	5146203	Condition	( len + 1 ) * 2 < len	392:5:7827:7845	5146184	0	True				
ANR	5146204	RelationalExpression	( len + 1 ) * 2 < len		5146184	0		<			
ANR	5146205	MultiplicativeExpression	( len + 1 ) * 2		5146184	0		*			
ANR	5146206	AdditiveExpression	len + 1		5146184	0		+			
ANR	5146207	Identifier	len		5146184	0					
ANR	5146208	PrimaryExpression	1		5146184	1					
ANR	5146209	PrimaryExpression	2		5146184	1					
ANR	5146210	Identifier	len		5146184	1					
ANR	5146211	CompoundStatement		5:26:61:61	5146184	1					
ANR	5146212	ReturnStatement	return NULL ;	393:2:7852:7863	5146184	0	True				
ANR	5146213	Identifier	NULL		5146184	0					
ANR	5146214	ExpressionStatement	out = malloc ( ( len + 1 ) * 2 )	395:1:7869:7897	5146184	3	True				
ANR	5146215	AssignmentExpression	out = malloc ( ( len + 1 ) * 2 )		5146184	0		=			
ANR	5146216	Identifier	out		5146184	0					
ANR	5146217	CallExpression	malloc ( ( len + 1 ) * 2 )		5146184	1					
ANR	5146218	Callee	malloc		5146184	0					
ANR	5146219	Identifier	malloc		5146184	0					
ANR	5146220	ArgumentList	( len + 1 ) * 2		5146184	1					
ANR	5146221	Argument	( len + 1 ) * 2		5146184	0					
ANR	5146222	MultiplicativeExpression	( len + 1 ) * 2		5146184	0		*			
ANR	5146223	AdditiveExpression	len + 1		5146184	0		+			
ANR	5146224	Identifier	len		5146184	0					
ANR	5146225	PrimaryExpression	1		5146184	1					
ANR	5146226	PrimaryExpression	2		5146184	1					
ANR	5146227	IfStatement	if ( ! out )		5146184	4					
ANR	5146228	Condition	! out	396:5:7904:7907	5146184	0	True				
ANR	5146229	UnaryOperationExpression	! out		5146184	0					
ANR	5146230	UnaryOperator	!		5146184	0					
ANR	5146231	Identifier	out		5146184	1					
ANR	5146232	CompoundStatement		9:11:123:123	5146184	1					
ANR	5146233	ReturnStatement	return NULL ;	397:2:7914:7925	5146184	0	True				
ANR	5146234	Identifier	NULL		5146184	0					
ANR	5146235	ForStatement	"for ( i = idx = 0 ; i < len ; i ++ , idx += 2 )"		5146184	5					
ANR	5146236	ForInit	i = idx = 0 ;	399:6:7936:7947	5146184	0	True				
ANR	5146237	AssignmentExpression	i = idx = 0		5146184	0		=			
ANR	5146238	Identifier	i		5146184	0					
ANR	5146239	AssignmentExpression	idx = 0		5146184	1		=			
ANR	5146240	Identifier	idx		5146184	0					
ANR	5146241	PrimaryExpression	0		5146184	1					
ANR	5146242	Condition	i < len	399:19:7949:7955	5146184	1	True				
ANR	5146243	RelationalExpression	i < len		5146184	0		<			
ANR	5146244	Identifier	i		5146184	0					
ANR	5146245	Identifier	len		5146184	1					
ANR	5146246	Expression	"i ++ , idx += 2"	399:28:7958:7970	5146184	2	True				
ANR	5146247	PostIncDecOperationExpression	i ++		5146184	0					
ANR	5146248	Identifier	i		5146184	0					
ANR	5146249	IncDec	++		5146184	1					
ANR	5146250	AssignmentExpression	idx += 2		5146184	1		+=			
ANR	5146251	Identifier	idx		5146184	0					
ANR	5146252	PrimaryExpression	2		5146184	1					
ANR	5146253	CompoundStatement		12:44:187:187	5146184	3					
ANR	5146254	ExpressionStatement	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"	400:2:7978:8021	5146184	0	True				
ANR	5146255	CallExpression	"snprintf ( tmp , sizeof ( tmp ) , ""%02x"" , in [ i ] )"		5146184	0					
ANR	5146256	Callee	snprintf		5146184	0					
ANR	5146257	Identifier	snprintf		5146184	0					
ANR	5146258	ArgumentList	tmp		5146184	1					
ANR	5146259	Argument	tmp		5146184	0					
ANR	5146260	Identifier	tmp		5146184	0					
ANR	5146261	Argument	sizeof ( tmp )		5146184	1					
ANR	5146262	SizeofExpression	sizeof ( tmp )		5146184	0					
ANR	5146263	Sizeof	sizeof		5146184	0					
ANR	5146264	SizeofOperand	tmp		5146184	1					
ANR	5146265	Argument	"""%02x"""		5146184	2					
ANR	5146266	PrimaryExpression	"""%02x"""		5146184	0					
ANR	5146267	Argument	in [ i ]		5146184	3					
ANR	5146268	ArrayIndexing	in [ i ]		5146184	0					
ANR	5146269	Identifier	in		5146184	0					
ANR	5146270	Identifier	i		5146184	1					
ANR	5146271	ExpressionStatement	"memcpy ( out + idx , tmp , 2 )"	401:2:8025:8049	5146184	1	True				
ANR	5146272	CallExpression	"memcpy ( out + idx , tmp , 2 )"		5146184	0					
ANR	5146273	Callee	memcpy		5146184	0					
ANR	5146274	Identifier	memcpy		5146184	0					
ANR	5146275	ArgumentList	out + idx		5146184	1					
ANR	5146276	Argument	out + idx		5146184	0					
ANR	5146277	AdditiveExpression	out + idx		5146184	0		+			
ANR	5146278	Identifier	out		5146184	0					
ANR	5146279	Identifier	idx		5146184	1					
ANR	5146280	Argument	tmp		5146184	1					
ANR	5146281	Identifier	tmp		5146184	0					
ANR	5146282	Argument	2		5146184	2					
ANR	5146283	PrimaryExpression	2		5146184	0					
ANR	5146284	ExpressionStatement	out [ idx ] = 0	403:1:8055:8067	5146184	6	True				
ANR	5146285	AssignmentExpression	out [ idx ] = 0		5146184	0		=			
ANR	5146286	ArrayIndexing	out [ idx ]		5146184	0					
ANR	5146287	Identifier	out		5146184	0					
ANR	5146288	Identifier	idx		5146184	1					
ANR	5146289	PrimaryExpression	0		5146184	1					
ANR	5146290	ReturnStatement	return out ;	404:1:8070:8080	5146184	7	True				
ANR	5146291	Identifier	out		5146184	0					
ANR	5146292	ReturnType	R_API char *		5146184	1					
ANR	5146293	Identifier	r_hex_bin2strdup		5146184	2					
ANR	5146294	ParameterList	"const ut8 * in , int len"		5146184	3					
ANR	5146295	Parameter	const ut8 * in	388:29:7762:7774	5146184	0	True				
ANR	5146296	ParameterType	const ut8 *		5146184	0					
ANR	5146297	Identifier	in		5146184	1					
ANR	5146298	Parameter	int len	388:44:7777:7783	5146184	1	True				
ANR	5146299	ParameterType	int		5146184	0					
ANR	5146300	Identifier	len		5146184	1					
ANR	5146301	CFGEntryNode	ENTRY		5146184		True				
ANR	5146302	CFGExitNode	EXIT		5146184		True				
ANR	5146303	Symbol	malloc		5146184						
ANR	5146304	Symbol	NULL		5146184						
ANR	5146305	Symbol	* i		5146184						
ANR	5146306	Symbol	len		5146184						
ANR	5146307	Symbol	in		5146184						
ANR	5146308	Symbol	tmp		5146184						
ANR	5146309	Symbol	* in		5146184						
ANR	5146310	Symbol	* out		5146184						
ANR	5146311	Symbol	* idx		5146184						
ANR	5146312	Symbol	i		5146184						
ANR	5146313	Symbol	idx		5146184						
ANR	5146314	Symbol	out		5146184						
ANR	5146315	Function	r_hex_str2bin	407:0:8085:8929							
ANR	5146316	FunctionDef	"r_hex_str2bin (const char * in , ut8 * out)"		5146315	0					
ANR	5146317	CompoundStatement		407:50:8135:8929	5146315	0					
ANR	5146318	IdentifierDeclStatement	long nibbles = 0 ;	408:1:8138:8154	5146315	0	True				
ANR	5146319	IdentifierDecl	nibbles = 0		5146315	0					
ANR	5146320	IdentifierDeclType	long		5146315	0					
ANR	5146321	Identifier	nibbles		5146315	1					
ANR	5146322	AssignmentExpression	nibbles = 0		5146315	2		=			
ANR	5146323	Identifier	nibbles		5146315	0					
ANR	5146324	PrimaryExpression	0		5146315	1					
ANR	5146325	WhileStatement	while ( in && * in )		5146315	1					
ANR	5146326	Condition	in && * in	410:8:8165:8173	5146315	0	True				
ANR	5146327	AndExpression	in && * in		5146315	0		&&			
ANR	5146328	Identifier	in		5146315	0					
ANR	5146329	UnaryOperationExpression	* in		5146315	1					
ANR	5146330	UnaryOperator	*		5146315	0					
ANR	5146331	Identifier	in		5146315	1					
ANR	5146332	CompoundStatement		5:2:44:51	5146315	1					
ANR	5146333	IdentifierDeclStatement	ut8 tmp ;	411:2:8180:8187	5146315	0	True				
ANR	5146334	IdentifierDecl	tmp		5146315	0					
ANR	5146335	IdentifierDeclType	ut8		5146315	0					
ANR	5146336	Identifier	tmp		5146315	1					
ANR	5146337	IfStatement	if ( * in == '0' && in [ 1 ] == 'x' )		5146315	1					
ANR	5146338	Condition	* in == '0' && in [ 1 ] == 'x'	413:6:8219:8244	5146315	0	True				
ANR	5146339	AndExpression	* in == '0' && in [ 1 ] == 'x'		5146315	0		&&			
ANR	5146340	EqualityExpression	* in == '0'		5146315	0		==			
ANR	5146341	UnaryOperationExpression	* in		5146315	0					
ANR	5146342	UnaryOperator	*		5146315	0					
ANR	5146343	Identifier	in		5146315	1					
ANR	5146344	PrimaryExpression	'0'		5146315	1					
ANR	5146345	EqualityExpression	in [ 1 ] == 'x'		5146315	1		==			
ANR	5146346	ArrayIndexing	in [ 1 ]		5146315	0					
ANR	5146347	Identifier	in		5146315	0					
ANR	5146348	PrimaryExpression	1		5146315	1					
ANR	5146349	PrimaryExpression	'x'		5146315	1					
ANR	5146350	CompoundStatement		7:34:111:111	5146315	1					
ANR	5146351	ExpressionStatement	in += 2	414:3:8252:8259	5146315	0	True				
ANR	5146352	AssignmentExpression	in += 2		5146315	0		+=			
ANR	5146353	Identifier	in		5146315	0					
ANR	5146354	PrimaryExpression	2		5146315	1					
ANR	5146355	WhileStatement	"while ( ! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in ) )"		5146315	2					
ANR	5146356	Condition	"! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"	417:9:8298:8347	5146315	0	True				
ANR	5146357	UnaryOperationExpression	"! r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"		5146315	0					
ANR	5146358	UnaryOperator	!		5146315	0					
ANR	5146359	CallExpression	"r_hex_to_byte ( out ? & out [ nibbles / 2 ] : & tmp , * in )"		5146315	1					
ANR	5146360	Callee	r_hex_to_byte		5146315	0					
ANR	5146361	Identifier	r_hex_to_byte		5146315	0					
ANR	5146362	ArgumentList	out ? & out [ nibbles / 2 ] : & tmp		5146315	1					
ANR	5146363	Argument	out ? & out [ nibbles / 2 ] : & tmp		5146315	0					
ANR	5146364	ConditionalExpression	out ? & out [ nibbles / 2 ] : & tmp		5146315	0					
ANR	5146365	Condition	out		5146315	0					
ANR	5146366	Identifier	out		5146315	0					
ANR	5146367	UnaryOperationExpression	& out [ nibbles / 2 ]		5146315	1					
ANR	5146368	UnaryOperator	&		5146315	0					
ANR	5146369	ArrayIndexing	out [ nibbles / 2 ]		5146315	1					
ANR	5146370	Identifier	out		5146315	0					
ANR	5146371	MultiplicativeExpression	nibbles / 2		5146315	1		/			
ANR	5146372	Identifier	nibbles		5146315	0					
ANR	5146373	PrimaryExpression	2		5146315	1					
ANR	5146374	UnaryOperationExpression	& tmp		5146315	2					
ANR	5146375	UnaryOperator	&		5146315	0					
ANR	5146376	Identifier	tmp		5146315	1					
ANR	5146377	Argument	* in		5146315	1					
ANR	5146378	UnaryOperationExpression	* in		5146315	0					
ANR	5146379	UnaryOperator	*		5146315	0					
ANR	5146380	Identifier	in		5146315	1					
ANR	5146381	CompoundStatement		11:61:214:214	5146315	1					
ANR	5146382	ExpressionStatement	nibbles ++	418:3:8355:8364	5146315	0	True				
ANR	5146383	PostIncDecOperationExpression	nibbles ++		5146315	0					
ANR	5146384	Identifier	nibbles		5146315	0					
ANR	5146385	IncDec	++		5146315	1					
ANR	5146386	ExpressionStatement	in ++	419:3:8369:8373	5146315	1	True				
ANR	5146387	PostIncDecOperationExpression	in ++		5146315	0					
ANR	5146388	Identifier	in		5146315	0					
ANR	5146389	IncDec	++		5146315	1					
ANR	5146390	IfStatement	if ( * in == '\\0' )		5146315	3					
ANR	5146391	Condition	* in == '\\0'	421:6:8385:8395	5146315	0	True				
ANR	5146392	EqualityExpression	* in == '\\0'		5146315	0		==			
ANR	5146393	UnaryOperationExpression	* in		5146315	0					
ANR	5146394	UnaryOperator	*		5146315	0					
ANR	5146395	Identifier	in		5146315	1					
ANR	5146396	PrimaryExpression	'\\0'		5146315	1					
ANR	5146397	CompoundStatement		15:19:262:262	5146315	1					
ANR	5146398	BreakStatement	break ;	422:3:8403:8408	5146315	0	True				
ANR	5146399	IfStatement	if ( * in == '#' || ( * in == '/' && in [ 1 ] == '/' ) )		5146315	4					
ANR	5146400	Condition	* in == '#' || ( * in == '/' && in [ 1 ] == '/' )	425:6:8437:8478	5146315	0	True				
ANR	5146401	OrExpression	* in == '#' || ( * in == '/' && in [ 1 ] == '/' )		5146315	0		||			
ANR	5146402	EqualityExpression	* in == '#'		5146315	0		==			
ANR	5146403	UnaryOperationExpression	* in		5146315	0					
ANR	5146404	UnaryOperator	*		5146315	0					
ANR	5146405	Identifier	in		5146315	1					
ANR	5146406	PrimaryExpression	'#'		5146315	1					
ANR	5146407	AndExpression	* in == '/' && in [ 1 ] == '/'		5146315	1		&&			
ANR	5146408	EqualityExpression	* in == '/'		5146315	0		==			
ANR	5146409	UnaryOperationExpression	* in		5146315	0					
ANR	5146410	UnaryOperator	*		5146315	0					
ANR	5146411	Identifier	in		5146315	1					
ANR	5146412	PrimaryExpression	'/'		5146315	1					
ANR	5146413	EqualityExpression	in [ 1 ] == '/'		5146315	1		==			
ANR	5146414	ArrayIndexing	in [ 1 ]		5146315	0					
ANR	5146415	Identifier	in		5146315	0					
ANR	5146416	PrimaryExpression	1		5146315	1					
ANR	5146417	PrimaryExpression	'/'		5146315	1					
ANR	5146418	CompoundStatement		19:50:345:345	5146315	1					
ANR	5146419	IfStatement	"if ( ( in = strchr ( in , '\\n' ) ) )"		5146315	0					
ANR	5146420	Condition	"in = strchr ( in , '\\n' )"	426:7:8490:8513	5146315	0	True				
ANR	5146421	AssignmentExpression	"in = strchr ( in , '\\n' )"		5146315	0		=			
ANR	5146422	Identifier	in		5146315	0					
ANR	5146423	CallExpression	"strchr ( in , '\\n' )"		5146315	1					
ANR	5146424	Callee	strchr		5146315	0					
ANR	5146425	Identifier	strchr		5146315	0					
ANR	5146426	ArgumentList	in		5146315	1					
ANR	5146427	Argument	in		5146315	0					
ANR	5146428	Identifier	in		5146315	0					
ANR	5146429	Argument	'\\n'		5146315	1					
ANR	5146430	PrimaryExpression	'\\n'		5146315	0					
ANR	5146431	CompoundStatement		20:33:380:380	5146315	1					
ANR	5146432	ExpressionStatement	in ++	427:4:8522:8526	5146315	0	True				
ANR	5146433	PostIncDecOperationExpression	in ++		5146315	0					
ANR	5146434	Identifier	in		5146315	0					
ANR	5146435	IncDec	++		5146315	1					
ANR	5146436	ContinueStatement	continue ;	429:3:8536:8544	5146315	1	True				
ANR	5146437	ElseStatement	else		5146315	0					
ANR	5146438	IfStatement	if ( * in == '/' && in [ 1 ] == '*' )		5146315	0					
ANR	5146439	Condition	* in == '/' && in [ 1 ] == '*'	430:13:8559:8584	5146315	0	True				
ANR	5146440	AndExpression	* in == '/' && in [ 1 ] == '*'		5146315	0		&&			
ANR	5146441	EqualityExpression	* in == '/'		5146315	0		==			
ANR	5146442	UnaryOperationExpression	* in		5146315	0					
ANR	5146443	UnaryOperator	*		5146315	0					
ANR	5146444	Identifier	in		5146315	1					
ANR	5146445	PrimaryExpression	'/'		5146315	1					
ANR	5146446	EqualityExpression	in [ 1 ] == '*'		5146315	1		==			
ANR	5146447	ArrayIndexing	in [ 1 ]		5146315	0					
ANR	5146448	Identifier	in		5146315	0					
ANR	5146449	PrimaryExpression	1		5146315	1					
ANR	5146450	PrimaryExpression	'*'		5146315	1					
ANR	5146451	CompoundStatement		24:41:451:451	5146315	1					
ANR	5146452	IfStatement	"if ( ( in = strstr ( in , ""*/"" ) ) )"		5146315	0					
ANR	5146453	Condition	"in = strstr ( in , ""*/"" )"	431:7:8596:8619	5146315	0	True				
ANR	5146454	AssignmentExpression	"in = strstr ( in , ""*/"" )"		5146315	0		=			
ANR	5146455	Identifier	in		5146315	0					
ANR	5146456	CallExpression	"strstr ( in , ""*/"" )"		5146315	1					
ANR	5146457	Callee	strstr		5146315	0					
ANR	5146458	Identifier	strstr		5146315	0					
ANR	5146459	ArgumentList	in		5146315	1					
ANR	5146460	Argument	in		5146315	0					
ANR	5146461	Identifier	in		5146315	0					
ANR	5146462	Argument	"""*/"""		5146315	1					
ANR	5146463	PrimaryExpression	"""*/"""		5146315	0					
ANR	5146464	CompoundStatement		25:33:486:486	5146315	1					
ANR	5146465	ExpressionStatement	in += 2	432:4:8628:8635	5146315	0	True				
ANR	5146466	AssignmentExpression	in += 2		5146315	0		+=			
ANR	5146467	Identifier	in		5146315	0					
ANR	5146468	PrimaryExpression	2		5146315	1					
ANR	5146469	ContinueStatement	continue ;	434:3:8645:8653	5146315	1	True				
ANR	5146470	ElseStatement	else		5146315	0					
ANR	5146471	IfStatement	if ( ! IS_WHITESPACE ( * in ) && * in != '\\n' )		5146315	0					
ANR	5146472	Condition	! IS_WHITESPACE ( * in ) && * in != '\\n'	435:13:8668:8702	5146315	0	True				
ANR	5146473	AndExpression	! IS_WHITESPACE ( * in ) && * in != '\\n'		5146315	0		&&			
ANR	5146474	UnaryOperationExpression	! IS_WHITESPACE ( * in )		5146315	0					
ANR	5146475	UnaryOperator	!		5146315	0					
ANR	5146476	CallExpression	IS_WHITESPACE ( * in )		5146315	1					
ANR	5146477	Callee	IS_WHITESPACE		5146315	0					
ANR	5146478	Identifier	IS_WHITESPACE		5146315	0					
ANR	5146479	ArgumentList	* in		5146315	1					
ANR	5146480	Argument	* in		5146315	0					
ANR	5146481	UnaryOperationExpression	* in		5146315	0					
ANR	5146482	UnaryOperator	*		5146315	0					
ANR	5146483	Identifier	in		5146315	1					
ANR	5146484	EqualityExpression	* in != '\\n'		5146315	1		!=			
ANR	5146485	UnaryOperationExpression	* in		5146315	0					
ANR	5146486	UnaryOperator	*		5146315	0					
ANR	5146487	Identifier	in		5146315	1					
ANR	5146488	PrimaryExpression	'\\n'		5146315	1					
ANR	5146489	CompoundStatement		29:50:569:569	5146315	1					
ANR	5146490	ReturnStatement	return 0 ;	437:3:8746:8754	5146315	0	True				
ANR	5146491	PrimaryExpression	0		5146315	0					
ANR	5146492	ExpressionStatement	in ++	440:2:8787:8791	5146315	5	True				
ANR	5146493	PostIncDecOperationExpression	in ++		5146315	0					
ANR	5146494	Identifier	in		5146315	0					
ANR	5146495	IncDec	++		5146315	1					
ANR	5146496	IfStatement	if ( nibbles % 2 )		5146315	2					
ANR	5146497	Condition	nibbles % 2	443:5:8802:8812	5146315	0	True				
ANR	5146498	MultiplicativeExpression	nibbles % 2		5146315	0		%			
ANR	5146499	Identifier	nibbles		5146315	0					
ANR	5146500	PrimaryExpression	2		5146315	1					
ANR	5146501	CompoundStatement		37:18:679:679	5146315	1					
ANR	5146502	IfStatement	if ( out )		5146315	0					
ANR	5146503	Condition	out	444:6:8823:8825	5146315	0	True				
ANR	5146504	Identifier	out		5146315	0					
ANR	5146505	CompoundStatement		38:11:692:692	5146315	1					
ANR	5146506	ExpressionStatement	"r_hex_to_byte ( & out [ nibbles / 2 ] , '0' )"	445:3:8833:8871	5146315	0	True				
ANR	5146507	CallExpression	"r_hex_to_byte ( & out [ nibbles / 2 ] , '0' )"		5146315	0					
ANR	5146508	Callee	r_hex_to_byte		5146315	0					
ANR	5146509	Identifier	r_hex_to_byte		5146315	0					
ANR	5146510	ArgumentList	& out [ nibbles / 2 ]		5146315	1					
ANR	5146511	Argument	& out [ nibbles / 2 ]		5146315	0					
ANR	5146512	UnaryOperationExpression	& out [ nibbles / 2 ]		5146315	0					
ANR	5146513	UnaryOperator	&		5146315	0					
ANR	5146514	ArrayIndexing	out [ nibbles / 2 ]		5146315	1					
ANR	5146515	Identifier	out		5146315	0					
ANR	5146516	MultiplicativeExpression	nibbles / 2		5146315	1		/			
ANR	5146517	Identifier	nibbles		5146315	0					
ANR	5146518	PrimaryExpression	2		5146315	1					
ANR	5146519	Argument	'0'		5146315	1					
ANR	5146520	PrimaryExpression	'0'		5146315	0					
ANR	5146521	ReturnStatement	return - ( nibbles + 1 ) / 2 ;	447:2:8879:8902	5146315	1	True				
ANR	5146522	MultiplicativeExpression	- ( nibbles + 1 ) / 2		5146315	0		/			
ANR	5146523	UnaryOperationExpression	- ( nibbles + 1 )		5146315	0					
ANR	5146524	UnaryOperator	-		5146315	0					
ANR	5146525	AdditiveExpression	nibbles + 1		5146315	1		+			
ANR	5146526	Identifier	nibbles		5146315	0					
ANR	5146527	PrimaryExpression	1		5146315	1					
ANR	5146528	PrimaryExpression	2		5146315	1					
ANR	5146529	ReturnStatement	return nibbles / 2 ;	450:1:8909:8927	5146315	3	True				
ANR	5146530	MultiplicativeExpression	nibbles / 2		5146315	0		/			
ANR	5146531	Identifier	nibbles		5146315	0					
ANR	5146532	PrimaryExpression	2		5146315	1					
ANR	5146533	ReturnType	R_API int		5146315	1					
ANR	5146534	Identifier	r_hex_str2bin		5146315	2					
ANR	5146535	ParameterList	"const char * in , ut8 * out"		5146315	3					
ANR	5146536	Parameter	const char * in	407:24:8109:8122	5146315	0	True				
ANR	5146537	ParameterType	const char *		5146315	0					
ANR	5146538	Identifier	in		5146315	1					
ANR	5146539	Parameter	ut8 * out	407:40:8125:8132	5146315	1	True				
ANR	5146540	ParameterType	ut8 *		5146315	0					
ANR	5146541	Identifier	out		5146315	1					
ANR	5146542	CFGEntryNode	ENTRY		5146315		True				
ANR	5146543	CFGExitNode	EXIT		5146315		True				
ANR	5146544	Symbol	nibbles		5146315						
ANR	5146545	Symbol	in		5146315						
ANR	5146546	Symbol	strstr		5146315						
ANR	5146547	Symbol	tmp		5146315						
ANR	5146548	Symbol	* in		5146315						
ANR	5146549	Symbol	strchr		5146315						
ANR	5146550	Symbol	r_hex_to_byte		5146315						
ANR	5146551	Symbol	& tmp		5146315						
ANR	5146552	Symbol	IS_WHITESPACE		5146315						
ANR	5146553	Symbol	out		5146315						
ANR	5146554	Function	r_hex_str2binmask	453:0:8932:9576							
ANR	5146555	FunctionDef	"r_hex_str2binmask (const char * in , ut8 * out , ut8 * mask)"		5146554	0					
ANR	5146556	CompoundStatement		453:65:8997:9576	5146554	0					
ANR	5146557	IdentifierDeclStatement	ut8 * ptr ;	454:1:9000:9008	5146554	0	True				
ANR	5146558	IdentifierDecl	* ptr		5146554	0					
ANR	5146559	IdentifierDeclType	ut8 *		5146554	0					
ANR	5146560	Identifier	ptr		5146554	1					
ANR	5146561	IdentifierDeclStatement	"int len , ilen = strlen ( in ) + 1 ;"	455:1:9011:9040	5146554	1	True				
ANR	5146562	IdentifierDecl	len		5146554	0					
ANR	5146563	IdentifierDeclType	int		5146554	0					
ANR	5146564	Identifier	len		5146554	1					
ANR	5146565	IdentifierDecl	ilen = strlen ( in ) + 1		5146554	1					
ANR	5146566	IdentifierDeclType	int		5146554	0					
ANR	5146567	Identifier	ilen		5146554	1					
ANR	5146568	AssignmentExpression	ilen = strlen ( in ) + 1		5146554	2		=			
ANR	5146569	Identifier	ilen		5146554	0					
ANR	5146570	AdditiveExpression	strlen ( in ) + 1		5146554	1		+			
ANR	5146571	CallExpression	strlen ( in )		5146554	0					
ANR	5146572	Callee	strlen		5146554	0					
ANR	5146573	Identifier	strlen		5146554	0					
ANR	5146574	ArgumentList	in		5146554	1					
ANR	5146575	Argument	in		5146554	0					
ANR	5146576	Identifier	in		5146554	0					
ANR	5146577	PrimaryExpression	1		5146554	1					
ANR	5146578	IdentifierDeclStatement	int has_nibble = 0 ;	456:1:9043:9061	5146554	2	True				
ANR	5146579	IdentifierDecl	has_nibble = 0		5146554	0					
ANR	5146580	IdentifierDeclType	int		5146554	0					
ANR	5146581	Identifier	has_nibble		5146554	1					
ANR	5146582	AssignmentExpression	has_nibble = 0		5146554	2		=			
ANR	5146583	Identifier	has_nibble		5146554	0					
ANR	5146584	PrimaryExpression	0		5146554	1					
ANR	5146585	ExpressionStatement	"memcpy ( out , in , ilen )"	457:1:9064:9086	5146554	3	True				
ANR	5146586	CallExpression	"memcpy ( out , in , ilen )"		5146554	0					
ANR	5146587	Callee	memcpy		5146554	0					
ANR	5146588	Identifier	memcpy		5146554	0					
ANR	5146589	ArgumentList	out		5146554	1					
ANR	5146590	Argument	out		5146554	0					
ANR	5146591	Identifier	out		5146554	0					
ANR	5146592	Argument	in		5146554	1					
ANR	5146593	Identifier	in		5146554	0					
ANR	5146594	Argument	ilen		5146554	2					
ANR	5146595	Identifier	ilen		5146554	0					
ANR	5146596	ForStatement	for ( ptr = out ; * ptr ; ptr ++ )		5146554	4					
ANR	5146597	ForInit	ptr = out ;	458:6:9094:9103	5146554	0	True				
ANR	5146598	AssignmentExpression	ptr = out		5146554	0		=			
ANR	5146599	Identifier	ptr		5146554	0					
ANR	5146600	Identifier	out		5146554	1					
ANR	5146601	Condition	* ptr	458:17:9105:9108	5146554	1	True				
ANR	5146602	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146603	UnaryOperator	*		5146554	0					
ANR	5146604	Identifier	ptr		5146554	1					
ANR	5146605	PostIncDecOperationExpression	ptr ++	458:23:9111:9115	5146554	2	True				
ANR	5146606	Identifier	ptr		5146554	0					
ANR	5146607	IncDec	++		5146554	1					
ANR	5146608	CompoundStatement		6:30:120:120	5146554	3					
ANR	5146609	IfStatement	if ( * ptr == '.' )		5146554	0					
ANR	5146610	Condition	* ptr == '.'	459:6:9126:9136	5146554	0	True				
ANR	5146611	EqualityExpression	* ptr == '.'		5146554	0		==			
ANR	5146612	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146613	UnaryOperator	*		5146554	0					
ANR	5146614	Identifier	ptr		5146554	1					
ANR	5146615	PrimaryExpression	'.'		5146554	1					
ANR	5146616	CompoundStatement		7:19:141:141	5146554	1					
ANR	5146617	ExpressionStatement	* ptr = '0'	460:3:9144:9154	5146554	0	True				
ANR	5146618	AssignmentExpression	* ptr = '0'		5146554	0		=			
ANR	5146619	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146620	UnaryOperator	*		5146554	0					
ANR	5146621	Identifier	ptr		5146554	1					
ANR	5146622	PrimaryExpression	'0'		5146554	1					
ANR	5146623	ExpressionStatement	"len = r_hex_str2bin ( ( char * ) out , out )"	463:1:9164:9201	5146554	5	True				
ANR	5146624	AssignmentExpression	"len = r_hex_str2bin ( ( char * ) out , out )"		5146554	0		=			
ANR	5146625	Identifier	len		5146554	0					
ANR	5146626	CallExpression	"r_hex_str2bin ( ( char * ) out , out )"		5146554	1					
ANR	5146627	Callee	r_hex_str2bin		5146554	0					
ANR	5146628	Identifier	r_hex_str2bin		5146554	0					
ANR	5146629	ArgumentList	( char * ) out		5146554	1					
ANR	5146630	Argument	( char * ) out		5146554	0					
ANR	5146631	CastExpression	( char * ) out		5146554	0					
ANR	5146632	CastTarget	char *		5146554	0					
ANR	5146633	Identifier	out		5146554	1					
ANR	5146634	Argument	out		5146554	1					
ANR	5146635	Identifier	out		5146554	0					
ANR	5146636	IfStatement	if ( len < 0 )		5146554	6					
ANR	5146637	Condition	len < 0	464:5:9208:9212	5146554	0	True				
ANR	5146638	RelationalExpression	len < 0		5146554	0		<			
ANR	5146639	Identifier	len		5146554	0					
ANR	5146640	PrimaryExpression	0		5146554	1					
ANR	5146641	CompoundStatement		12:12:217:217	5146554	1					
ANR	5146642	ExpressionStatement	has_nibble = 1	464:14:9217:9231	5146554	0	True				
ANR	5146643	AssignmentExpression	has_nibble = 1		5146554	0		=			
ANR	5146644	Identifier	has_nibble		5146554	0					
ANR	5146645	PrimaryExpression	1		5146554	1					
ANR	5146646	ExpressionStatement	len = - ( len + 1 )	464:30:9233:9247	5146554	1	True				
ANR	5146647	AssignmentExpression	len = - ( len + 1 )		5146554	0		=			
ANR	5146648	Identifier	len		5146554	0					
ANR	5146649	UnaryOperationExpression	- ( len + 1 )		5146554	1					
ANR	5146650	UnaryOperator	-		5146554	0					
ANR	5146651	AdditiveExpression	len + 1		5146554	1		+			
ANR	5146652	Identifier	len		5146554	0					
ANR	5146653	PrimaryExpression	1		5146554	1					
ANR	5146654	IfStatement	if ( len != - 1 )		5146554	7					
ANR	5146655	Condition	len != - 1	465:5:9256:9264	5146554	0	True				
ANR	5146656	EqualityExpression	len != - 1		5146554	0		!=			
ANR	5146657	Identifier	len		5146554	0					
ANR	5146658	UnaryOperationExpression	- 1		5146554	1					
ANR	5146659	UnaryOperator	-		5146554	0					
ANR	5146660	PrimaryExpression	1		5146554	1					
ANR	5146661	CompoundStatement		13:16:269:269	5146554	1					
ANR	5146662	ExpressionStatement	"memcpy ( mask , in , ilen )"	466:2:9271:9294	5146554	0	True				
ANR	5146663	CallExpression	"memcpy ( mask , in , ilen )"		5146554	0					
ANR	5146664	Callee	memcpy		5146554	0					
ANR	5146665	Identifier	memcpy		5146554	0					
ANR	5146666	ArgumentList	mask		5146554	1					
ANR	5146667	Argument	mask		5146554	0					
ANR	5146668	Identifier	mask		5146554	0					
ANR	5146669	Argument	in		5146554	1					
ANR	5146670	Identifier	in		5146554	0					
ANR	5146671	Argument	ilen		5146554	2					
ANR	5146672	Identifier	ilen		5146554	0					
ANR	5146673	IfStatement	if ( has_nibble )		5146554	1					
ANR	5146674	Condition	has_nibble	467:6:9302:9311	5146554	0	True				
ANR	5146675	Identifier	has_nibble		5146554	0					
ANR	5146676	CompoundStatement		15:18:316:316	5146554	1					
ANR	5146677	ExpressionStatement	"memcpy ( mask + ilen , ""f0"" , 3 )"	468:3:9319:9348	5146554	0	True				
ANR	5146678	CallExpression	"memcpy ( mask + ilen , ""f0"" , 3 )"		5146554	0					
ANR	5146679	Callee	memcpy		5146554	0					
ANR	5146680	Identifier	memcpy		5146554	0					
ANR	5146681	ArgumentList	mask + ilen		5146554	1					
ANR	5146682	Argument	mask + ilen		5146554	0					
ANR	5146683	AdditiveExpression	mask + ilen		5146554	0		+			
ANR	5146684	Identifier	mask		5146554	0					
ANR	5146685	Identifier	ilen		5146554	1					
ANR	5146686	Argument	"""f0"""		5146554	1					
ANR	5146687	PrimaryExpression	"""f0"""		5146554	0					
ANR	5146688	Argument	3		5146554	2					
ANR	5146689	PrimaryExpression	3		5146554	0					
ANR	5146690	ForStatement	for ( ptr = mask ; * ptr ; ptr ++ )		5146554	2					
ANR	5146691	ForInit	ptr = mask ;	470:7:9361:9371	5146554	0	True				
ANR	5146692	AssignmentExpression	ptr = mask		5146554	0		=			
ANR	5146693	Identifier	ptr		5146554	0					
ANR	5146694	Identifier	mask		5146554	1					
ANR	5146695	Condition	* ptr	470:19:9373:9376	5146554	1	True				
ANR	5146696	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146697	UnaryOperator	*		5146554	0					
ANR	5146698	Identifier	ptr		5146554	1					
ANR	5146699	PostIncDecOperationExpression	ptr ++	470:25:9379:9383	5146554	2	True				
ANR	5146700	Identifier	ptr		5146554	0					
ANR	5146701	IncDec	++		5146554	1					
ANR	5146702	CompoundStatement		18:32:388:388	5146554	3					
ANR	5146703	IfStatement	if ( IS_HEXCHAR ( * ptr ) )		5146554	0					
ANR	5146704	Condition	IS_HEXCHAR ( * ptr )	471:7:9395:9411	5146554	0	True				
ANR	5146705	CallExpression	IS_HEXCHAR ( * ptr )		5146554	0					
ANR	5146706	Callee	IS_HEXCHAR		5146554	0					
ANR	5146707	Identifier	IS_HEXCHAR		5146554	0					
ANR	5146708	ArgumentList	* ptr		5146554	1					
ANR	5146709	Argument	* ptr		5146554	0					
ANR	5146710	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146711	UnaryOperator	*		5146554	0					
ANR	5146712	Identifier	ptr		5146554	1					
ANR	5146713	CompoundStatement		19:26:416:416	5146554	1					
ANR	5146714	ExpressionStatement	* ptr = 'f'	472:4:9420:9430	5146554	0	True				
ANR	5146715	AssignmentExpression	* ptr = 'f'		5146554	0		=			
ANR	5146716	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146717	UnaryOperator	*		5146554	0					
ANR	5146718	Identifier	ptr		5146554	1					
ANR	5146719	PrimaryExpression	'f'		5146554	1					
ANR	5146720	ElseStatement	else		5146554	0					
ANR	5146721	IfStatement	if ( * ptr == '.' )		5146554	0					
ANR	5146722	Condition	* ptr == '.'	473:14:9446:9456	5146554	0	True				
ANR	5146723	EqualityExpression	* ptr == '.'		5146554	0		==			
ANR	5146724	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146725	UnaryOperator	*		5146554	0					
ANR	5146726	Identifier	ptr		5146554	1					
ANR	5146727	PrimaryExpression	'.'		5146554	1					
ANR	5146728	CompoundStatement		21:27:461:461	5146554	1					
ANR	5146729	ExpressionStatement	* ptr = '0'	474:4:9465:9475	5146554	0	True				
ANR	5146730	AssignmentExpression	* ptr = '0'		5146554	0		=			
ANR	5146731	UnaryOperationExpression	* ptr		5146554	0					
ANR	5146732	UnaryOperator	*		5146554	0					
ANR	5146733	Identifier	ptr		5146554	1					
ANR	5146734	PrimaryExpression	'0'		5146554	1					
ANR	5146735	ExpressionStatement	"len = r_hex_str2bin ( ( char * ) mask , mask )"	477:2:9488:9527	5146554	3	True				
ANR	5146736	AssignmentExpression	"len = r_hex_str2bin ( ( char * ) mask , mask )"		5146554	0		=			
ANR	5146737	Identifier	len		5146554	0					
ANR	5146738	CallExpression	"r_hex_str2bin ( ( char * ) mask , mask )"		5146554	1					
ANR	5146739	Callee	r_hex_str2bin		5146554	0					
ANR	5146740	Identifier	r_hex_str2bin		5146554	0					
ANR	5146741	ArgumentList	( char * ) mask		5146554	1					
ANR	5146742	Argument	( char * ) mask		5146554	0					
ANR	5146743	CastExpression	( char * ) mask		5146554	0					
ANR	5146744	CastTarget	char *		5146554	0					
ANR	5146745	Identifier	mask		5146554	1					
ANR	5146746	Argument	mask		5146554	1					
ANR	5146747	Identifier	mask		5146554	0					
ANR	5146748	IfStatement	if ( len < 0 )		5146554	4					
ANR	5146749	Condition	len < 0	478:6:9535:9541	5146554	0	True				
ANR	5146750	RelationalExpression	len < 0		5146554	0		<			
ANR	5146751	Identifier	len		5146554	0					
ANR	5146752	PrimaryExpression	0		5146554	1					
ANR	5146753	CompoundStatement		26:15:546:546	5146554	1					
ANR	5146754	ExpressionStatement	len ++	479:3:9549:9554	5146554	0	True				
ANR	5146755	PostIncDecOperationExpression	len ++		5146554	0					
ANR	5146756	Identifier	len		5146554	0					
ANR	5146757	IncDec	++		5146554	1					
ANR	5146758	ReturnStatement	return len ;	482:1:9564:9574	5146554	8	True				
ANR	5146759	Identifier	len		5146554	0					
ANR	5146760	ReturnType	R_API int		5146554	1					
ANR	5146761	Identifier	r_hex_str2binmask		5146554	2					
ANR	5146762	ParameterList	"const char * in , ut8 * out , ut8 * mask"		5146554	3					
ANR	5146763	Parameter	const char * in	453:28:8960:8973	5146554	0	True				
ANR	5146764	ParameterType	const char *		5146554	0					
ANR	5146765	Identifier	in		5146554	1					
ANR	5146766	Parameter	ut8 * out	453:44:8976:8983	5146554	1	True				
ANR	5146767	ParameterType	ut8 *		5146554	0					
ANR	5146768	Identifier	out		5146554	1					
ANR	5146769	Parameter	ut8 * mask	453:54:8986:8994	5146554	2	True				
ANR	5146770	ParameterType	ut8 *		5146554	0					
ANR	5146771	Identifier	mask		5146554	1					
ANR	5146772	CFGEntryNode	ENTRY		5146554		True				
ANR	5146773	CFGExitNode	EXIT		5146554		True				
ANR	5146774	Symbol	strlen		5146554						
ANR	5146775	Symbol	len		5146554						
ANR	5146776	Symbol	in		5146554						
ANR	5146777	Symbol	* ptr		5146554						
ANR	5146778	Symbol	IS_HEXCHAR		5146554						
ANR	5146779	Symbol	has_nibble		5146554						
ANR	5146780	Symbol	ilen		5146554						
ANR	5146781	Symbol	r_hex_str2bin		5146554						
ANR	5146782	Symbol	out		5146554						
ANR	5146783	Symbol	mask		5146554						
ANR	5146784	Symbol	ptr		5146554						
ANR	5146785	Function	r_hex_bin_truncate	485:0:9579:9940							
ANR	5146786	FunctionDef	"r_hex_bin_truncate (ut64 in , int n)"		5146785	0					
ANR	5146787	CompoundStatement		485:47:9626:9940	5146785	0					
ANR	5146788	SwitchStatement	switch ( n )		5146785	0					
ANR	5146789	Condition	n	486:9:9637:9637	5146785	0	True				
ANR	5146790	Identifier	n		5146785	0					
ANR	5146791	CompoundStatement		2:12:13:13	5146785	1					
ANR	5146792	Label	case 1 :	487:1:9643:9649	5146785	0	True				
ANR	5146793	IfStatement	if ( ( in & UT8_GT0 ) )		5146785	1					
ANR	5146794	Condition	in & UT8_GT0	488:6:9657:9670	5146785	0	True				
ANR	5146795	BitAndExpression	in & UT8_GT0		5146785	0		&			
ANR	5146796	Identifier	in		5146785	0					
ANR	5146797	Identifier	UT8_GT0		5146785	1					
ANR	5146798	CompoundStatement		4:22:46:46	5146785	1					
ANR	5146799	ReturnStatement	return UT64_8U | in ;	489:3:9678:9697	5146785	0	True				
ANR	5146800	InclusiveOrExpression	UT64_8U | in		5146785	0		|			
ANR	5146801	Identifier	UT64_8U		5146785	0					
ANR	5146802	Identifier	in		5146785	1					
ANR	5146803	ReturnStatement	return in & UT8_MAX ;	491:2:9705:9722	5146785	2	True				
ANR	5146804	BitAndExpression	in & UT8_MAX		5146785	0		&			
ANR	5146805	Identifier	in		5146785	0					
ANR	5146806	Identifier	UT8_MAX		5146785	1					
ANR	5146807	Label	case 2 :	492:1:9725:9731	5146785	3	True				
ANR	5146808	IfStatement	if ( ( in & UT16_GT0 ) )		5146785	4					
ANR	5146809	Condition	in & UT16_GT0	493:6:9739:9753	5146785	0	True				
ANR	5146810	BitAndExpression	in & UT16_GT0		5146785	0		&			
ANR	5146811	Identifier	in		5146785	0					
ANR	5146812	Identifier	UT16_GT0		5146785	1					
ANR	5146813	CompoundStatement		9:23:129:129	5146785	1					
ANR	5146814	ReturnStatement	return UT64_16U | in ;	494:3:9761:9781	5146785	0	True				
ANR	5146815	InclusiveOrExpression	UT64_16U | in		5146785	0		|			
ANR	5146816	Identifier	UT64_16U		5146785	0					
ANR	5146817	Identifier	in		5146785	1					
ANR	5146818	ReturnStatement	return in & UT16_MAX ;	496:2:9789:9807	5146785	5	True				
ANR	5146819	BitAndExpression	in & UT16_MAX		5146785	0		&			
ANR	5146820	Identifier	in		5146785	0					
ANR	5146821	Identifier	UT16_MAX		5146785	1					
ANR	5146822	Label	case 4 :	497:1:9810:9816	5146785	6	True				
ANR	5146823	IfStatement	if ( ( in & UT32_GT0 ) )		5146785	7					
ANR	5146824	Condition	in & UT32_GT0	498:6:9824:9838	5146785	0	True				
ANR	5146825	BitAndExpression	in & UT32_GT0		5146785	0		&			
ANR	5146826	Identifier	in		5146785	0					
ANR	5146827	Identifier	UT32_GT0		5146785	1					
ANR	5146828	CompoundStatement		14:23:214:214	5146785	1					
ANR	5146829	ReturnStatement	return UT64_32U | in ;	499:3:9846:9866	5146785	0	True				
ANR	5146830	InclusiveOrExpression	UT64_32U | in		5146785	0		|			
ANR	5146831	Identifier	UT64_32U		5146785	0					
ANR	5146832	Identifier	in		5146785	1					
ANR	5146833	ReturnStatement	return in & UT32_MAX ;	501:2:9874:9892	5146785	8	True				
ANR	5146834	BitAndExpression	in & UT32_MAX		5146785	0		&			
ANR	5146835	Identifier	in		5146785	0					
ANR	5146836	Identifier	UT32_MAX		5146785	1					
ANR	5146837	Label	case 8 :	502:1:9895:9901	5146785	9	True				
ANR	5146838	ReturnStatement	return in & UT64_MAX ;	503:2:9905:9923	5146785	10	True				
ANR	5146839	BitAndExpression	in & UT64_MAX		5146785	0		&			
ANR	5146840	Identifier	in		5146785	0					
ANR	5146841	Identifier	UT64_MAX		5146785	1					
ANR	5146842	ReturnStatement	return in ;	505:1:9929:9938	5146785	1	True				
ANR	5146843	Identifier	in		5146785	0					
ANR	5146844	ReturnType	R_API st64		5146785	1					
ANR	5146845	Identifier	r_hex_bin_truncate		5146785	2					
ANR	5146846	ParameterList	"ut64 in , int n"		5146785	3					
ANR	5146847	Parameter	ut64 in	485:31:9610:9616	5146785	0	True				
ANR	5146848	ParameterType	ut64		5146785	0					
ANR	5146849	Identifier	in		5146785	1					
ANR	5146850	Parameter	int n	485:40:9619:9623	5146785	1	True				
ANR	5146851	ParameterType	int		5146785	0					
ANR	5146852	Identifier	n		5146785	1					
ANR	5146853	CFGEntryNode	ENTRY		5146785		True				
ANR	5146854	CFGExitNode	EXIT		5146785		True				
ANR	5146855	Symbol	UT32_MAX		5146785						
ANR	5146856	Symbol	UT32_GT0		5146785						
ANR	5146857	Symbol	UT64_16U		5146785						
ANR	5146858	Symbol	UT8_MAX		5146785						
ANR	5146859	Symbol	in		5146785						
ANR	5146860	Symbol	UT64_8U		5146785						
ANR	5146861	Symbol	UT8_GT0		5146785						
ANR	5146862	Symbol	UT64_32U		5146785						
ANR	5146863	Symbol	UT16_GT0		5146785						
ANR	5146864	Symbol	UT16_MAX		5146785						
ANR	5146865	Symbol	UT64_MAX		5146785						
ANR	5146866	Symbol	n		5146785						
ANR	5146867	Function	r_hex_str_is_valid	509:0:10023:10358							
ANR	5146868	FunctionDef	r_hex_str_is_valid (const char * str)		5146867	0					
ANR	5146869	CompoundStatement		509:46:10069:10358	5146867	0					
ANR	5146870	IdentifierDeclStatement	int i ;	510:1:10072:10077	5146867	0	True				
ANR	5146871	IdentifierDecl	i		5146867	0					
ANR	5146872	IdentifierDeclType	int		5146867	0					
ANR	5146873	Identifier	i		5146867	1					
ANR	5146874	IdentifierDeclStatement	int len = 0 ;	511:1:10080:10091	5146867	1	True				
ANR	5146875	IdentifierDecl	len = 0		5146867	0					
ANR	5146876	IdentifierDeclType	int		5146867	0					
ANR	5146877	Identifier	len		5146867	1					
ANR	5146878	AssignmentExpression	len = 0		5146867	2		=			
ANR	5146879	Identifier	len		5146867	0					
ANR	5146880	PrimaryExpression	0		5146867	1					
ANR	5146881	IfStatement	"if ( ! strncmp ( str , ""0x"" , 2 ) )"		5146867	2					
ANR	5146882	Condition	"! strncmp ( str , ""0x"" , 2 )"	512:5:10098:10120	5146867	0	True				
ANR	5146883	UnaryOperationExpression	"! strncmp ( str , ""0x"" , 2 )"		5146867	0					
ANR	5146884	UnaryOperator	!		5146867	0					
ANR	5146885	CallExpression	"strncmp ( str , ""0x"" , 2 )"		5146867	1					
ANR	5146886	Callee	strncmp		5146867	0					
ANR	5146887	Identifier	strncmp		5146867	0					
ANR	5146888	ArgumentList	str		5146867	1					
ANR	5146889	Argument	str		5146867	0					
ANR	5146890	Identifier	str		5146867	0					
ANR	5146891	Argument	"""0x"""		5146867	1					
ANR	5146892	PrimaryExpression	"""0x"""		5146867	0					
ANR	5146893	Argument	2		5146867	2					
ANR	5146894	PrimaryExpression	2		5146867	0					
ANR	5146895	CompoundStatement		4:30:53:53	5146867	1					
ANR	5146896	ExpressionStatement	str += 2	513:2:10127:10135	5146867	0	True				
ANR	5146897	AssignmentExpression	str += 2		5146867	0		+=			
ANR	5146898	Identifier	str		5146867	0					
ANR	5146899	PrimaryExpression	2		5146867	1					
ANR	5146900	ForStatement	for ( i = 0 ; str [ i ] != '\\0' ; i ++ )		5146867	3					
ANR	5146901	ForInit	i = 0 ;	515:6:10146:10151	5146867	0	True				
ANR	5146902	AssignmentExpression	i = 0		5146867	0		=			
ANR	5146903	Identifier	i		5146867	0					
ANR	5146904	PrimaryExpression	0		5146867	1					
ANR	5146905	Condition	str [ i ] != '\\0'	515:13:10153:10166	5146867	1	True				
ANR	5146906	EqualityExpression	str [ i ] != '\\0'		5146867	0		!=			
ANR	5146907	ArrayIndexing	str [ i ]		5146867	0					
ANR	5146908	Identifier	str		5146867	0					
ANR	5146909	Identifier	i		5146867	1					
ANR	5146910	PrimaryExpression	'\\0'		5146867	1					
ANR	5146911	PostIncDecOperationExpression	i ++	515:29:10169:10171	5146867	2	True				
ANR	5146912	Identifier	i		5146867	0					
ANR	5146913	IncDec	++		5146867	1					
ANR	5146914	CompoundStatement		7:34:104:104	5146867	3					
ANR	5146915	IfStatement	if ( IS_HEXCHAR ( str [ i ] ) )		5146867	0					
ANR	5146916	Condition	IS_HEXCHAR ( str [ i ] )	516:6:10182:10200	5146867	0	True				
ANR	5146917	CallExpression	IS_HEXCHAR ( str [ i ] )		5146867	0					
ANR	5146918	Callee	IS_HEXCHAR		5146867	0					
ANR	5146919	Identifier	IS_HEXCHAR		5146867	0					
ANR	5146920	ArgumentList	str [ i ]		5146867	1					
ANR	5146921	Argument	str [ i ]		5146867	0					
ANR	5146922	ArrayIndexing	str [ i ]		5146867	0					
ANR	5146923	Identifier	str		5146867	0					
ANR	5146924	Identifier	i		5146867	1					
ANR	5146925	CompoundStatement		8:27:133:133	5146867	1					
ANR	5146926	ExpressionStatement	len ++	517:3:10208:10213	5146867	0	True				
ANR	5146927	PostIncDecOperationExpression	len ++		5146867	0					
ANR	5146928	Identifier	len		5146867	0					
ANR	5146929	IncDec	++		5146867	1					
ANR	5146930	IfStatement	if ( IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] ) )		5146867	1					
ANR	5146931	Condition	IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] )	519:6:10225:10269	5146867	0	True				
ANR	5146932	OrExpression	IS_HEXCHAR ( str [ i ] ) || IS_WHITESPACE ( str [ i ] )		5146867	0		||			
ANR	5146933	CallExpression	IS_HEXCHAR ( str [ i ] )		5146867	0					
ANR	5146934	Callee	IS_HEXCHAR		5146867	0					
ANR	5146935	Identifier	IS_HEXCHAR		5146867	0					
ANR	5146936	ArgumentList	str [ i ]		5146867	1					
ANR	5146937	Argument	str [ i ]		5146867	0					
ANR	5146938	ArrayIndexing	str [ i ]		5146867	0					
ANR	5146939	Identifier	str		5146867	0					
ANR	5146940	Identifier	i		5146867	1					
ANR	5146941	CallExpression	IS_WHITESPACE ( str [ i ] )		5146867	1					
ANR	5146942	Callee	IS_WHITESPACE		5146867	0					
ANR	5146943	Identifier	IS_WHITESPACE		5146867	0					
ANR	5146944	ArgumentList	str [ i ]		5146867	1					
ANR	5146945	Argument	str [ i ]		5146867	0					
ANR	5146946	ArrayIndexing	str [ i ]		5146867	0					
ANR	5146947	Identifier	str		5146867	0					
ANR	5146948	Identifier	i		5146867	1					
ANR	5146949	CompoundStatement		11:53:202:202	5146867	1					
ANR	5146950	ContinueStatement	continue ;	520:3:10277:10285	5146867	0	True				
ANR	5146951	ReturnStatement	return - 1 ;	522:2:10293:10302	5146867	2	True				
ANR	5146952	UnaryOperationExpression	- 1		5146867	0					
ANR	5146953	UnaryOperator	-		5146867	0					
ANR	5146954	PrimaryExpression	1		5146867	1					
ANR	5146955	ReturnStatement	return len ;	524:1:10346:10356	5146867	4	True				
ANR	5146956	Identifier	len		5146867	0					
ANR	5146957	ReturnType	R_API int		5146867	1					
ANR	5146958	Identifier	r_hex_str_is_valid		5146867	2					
ANR	5146959	ParameterList	const char * str		5146867	3					
ANR	5146960	Parameter	const char * str	509:29:10052:10066	5146867	0	True				
ANR	5146961	ParameterType	const char *		5146867	0					
ANR	5146962	Identifier	str		5146867	1					
ANR	5146963	CFGEntryNode	ENTRY		5146867		True				
ANR	5146964	CFGExitNode	EXIT		5146867		True				
ANR	5146965	Symbol	str		5146867						
ANR	5146966	Symbol	strncmp		5146867						
ANR	5146967	Symbol	* i		5146867						
ANR	5146968	Symbol	len		5146867						
ANR	5146969	Symbol	i		5146867						
ANR	5146970	Symbol	* str		5146867						
ANR	5146971	Symbol	IS_HEXCHAR		5146867						
ANR	5146972	Symbol	IS_WHITESPACE		5146867						
