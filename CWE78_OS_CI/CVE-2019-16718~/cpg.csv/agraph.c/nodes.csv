command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	61834	File	data/converged/CVE-2019-16718~_radare2/agraph.c								
ANR	61835	DeclStmt									
ANR	61836	Decl							int	int	mousemode
ANR	61837	DeclStmt									
ANR	61838	Decl							int	int	disMode
ANR	61839	DeclStmt									
ANR	61840	Decl							int	int	discroll
ANR	61841	DeclStmt									
ANR	61842	Decl							bool	bool	graphCursor
ANR	61843	DeclStmt									
ANR	61844	Decl							const char	const char * [ ]	mousemodes
ANR	61845	ClassDef	len_pos_t	61:0:1751:1790							
ANR	61846	DeclStmt									
ANR	61847	Decl							int	int	len
ANR	61848	DeclStmt									
ANR	61849	Decl							int	int	pos
ANR	61850	ClassDef	dist_t	66:0:1794:1869							
ANR	61851	DeclStmt									
ANR	61852	Decl							const RGraphNode	const RGraphNode *	from
ANR	61853	DeclStmt									
ANR	61854	Decl							const RGraphNode	const RGraphNode *	to
ANR	61855	DeclStmt									
ANR	61856	Decl							int	int	dist
ANR	61857	ClassDef	g_cb	72:0:1873:1967							
ANR	61858	DeclStmt									
ANR	61859	Decl							RAGraph	RAGraph *	graph
ANR	61860	DeclStmt									
ANR	61861	Decl							RANodeCallback	RANodeCallback	node_cb
ANR	61862	DeclStmt									
ANR	61863	Decl							RAEdgeCallback	RAEdgeCallback	edge_cb
ANR	61864	DeclStmt									
ANR	61865	Decl							void	void *	data
ANR	61866	ClassDef	ascii_edge_t	79:8:1979:2069							
ANR	61867	DeclStmt									
ANR	61868	Decl							RANode	RANode *	from
ANR	61869	DeclStmt									
ANR	61870	Decl							RANode	RANode *	to
ANR	61871	DeclStmt									
ANR	61872	Decl							RList	RList *	x
ANR	61873	Decl							RList	RList *	y
ANR	61874	DeclStmt									
ANR	61875	Decl							int	int	is_reversed
ANR	61876	DeclStmt									
ANR	61877	Decl							ascii_edge_t	ascii_edge_t	AEdge
ANR	61878	ClassDef	layer_t	86:0:2072:2174							
ANR	61879	DeclStmt									
ANR	61880	Decl							int	int	n_nodes
ANR	61881	DeclStmt									
ANR	61882	Decl							RGraphNode	RGraphNode * *	nodes
ANR	61883	DeclStmt									
ANR	61884	Decl							int	int	position
ANR	61885	DeclStmt									
ANR	61886	Decl							int	int	height
ANR	61887	DeclStmt									
ANR	61888	Decl							int	int	width
ANR	61889	DeclStmt									
ANR	61890	Decl							int	int	gap
ANR	61891	ClassDef	agraph_refresh_data	95:0:2178:2286							
ANR	61892	DeclStmt									
ANR	61893	Decl							RCore	RCore *	core
ANR	61894	DeclStmt									
ANR	61895	Decl							RAGraph	RAGraph *	g
ANR	61896	DeclStmt									
ANR	61897	Decl							RAnalFunction	RAnalFunction * *	fcn
ANR	61898	DeclStmt									
ANR	61899	Decl							bool	bool	follow_offset
ANR	61900	DeclStmt									
ANR	61901	Decl							int	int	fs
ANR	61902	Function	is_offset	107:0:2460:2543							
ANR	61903	FunctionDef	is_offset (const RAGraph * g)		61902	0					
ANR	61904	CompoundStatement		107:40:2500:2543	61902	0					
ANR	61905	ReturnStatement	return g -> mode == R_AGRAPH_MODE_OFFSET ;	108:1:2503:2541	61902	0	True				
ANR	61906	EqualityExpression	g -> mode == R_AGRAPH_MODE_OFFSET		61902	0		==			
ANR	61907	PtrMemberAccess	g -> mode		61902	0					
ANR	61908	Identifier	g		61902	0					
ANR	61909	Identifier	mode		61902	1					
ANR	61910	Identifier	R_AGRAPH_MODE_OFFSET		61902	1					
ANR	61911	ReturnType	static bool		61902	1					
ANR	61912	Identifier	is_offset		61902	2					
ANR	61913	ParameterList	const RAGraph * g		61902	3					
ANR	61914	Parameter	const RAGraph * g	107:22:2482:2497	61902	0	True				
ANR	61915	ParameterType	const RAGraph *		61902	0					
ANR	61916	Identifier	g		61902	1					
ANR	61917	CFGEntryNode	ENTRY		61902		True				
ANR	61918	CFGExitNode	EXIT		61902		True				
ANR	61919	Symbol	g -> mode		61902						
ANR	61920	Symbol	* g		61902						
ANR	61921	Symbol	R_AGRAPH_MODE_OFFSET		61902						
ANR	61922	Symbol	g		61902						
ANR	61923	Function	is_mini	111:0:2546:2625							
ANR	61924	FunctionDef	is_mini (const RAGraph * g)		61923	0					
ANR	61925	CompoundStatement		111:38:2584:2625	61923	0					
ANR	61926	ReturnStatement	return g -> mode == R_AGRAPH_MODE_MINI ;	112:1:2587:2623	61923	0	True				
ANR	61927	EqualityExpression	g -> mode == R_AGRAPH_MODE_MINI		61923	0		==			
ANR	61928	PtrMemberAccess	g -> mode		61923	0					
ANR	61929	Identifier	g		61923	0					
ANR	61930	Identifier	mode		61923	1					
ANR	61931	Identifier	R_AGRAPH_MODE_MINI		61923	1					
ANR	61932	ReturnType	static bool		61923	1					
ANR	61933	Identifier	is_mini		61923	2					
ANR	61934	ParameterList	const RAGraph * g		61923	3					
ANR	61935	Parameter	const RAGraph * g	111:20:2566:2581	61923	0	True				
ANR	61936	ParameterType	const RAGraph *		61923	0					
ANR	61937	Identifier	g		61923	1					
ANR	61938	CFGEntryNode	ENTRY		61923		True				
ANR	61939	CFGExitNode	EXIT		61923		True				
ANR	61940	Symbol	g -> mode		61923						
ANR	61941	Symbol	* g		61923						
ANR	61942	Symbol	g		61923						
ANR	61943	Symbol	R_AGRAPH_MODE_MINI		61923						
ANR	61944	Function	is_tiny	115:0:2628:2721							
ANR	61945	FunctionDef	is_tiny (const RAGraph * g)		61944	0					
ANR	61946	CompoundStatement		115:38:2666:2721	61944	0					
ANR	61947	ReturnStatement	return g -> is_tiny || g -> mode == R_AGRAPH_MODE_TINY ;	116:1:2669:2719	61944	0	True				
ANR	61948	OrExpression	g -> is_tiny || g -> mode == R_AGRAPH_MODE_TINY		61944	0		||			
ANR	61949	PtrMemberAccess	g -> is_tiny		61944	0					
ANR	61950	Identifier	g		61944	0					
ANR	61951	Identifier	is_tiny		61944	1					
ANR	61952	EqualityExpression	g -> mode == R_AGRAPH_MODE_TINY		61944	1		==			
ANR	61953	PtrMemberAccess	g -> mode		61944	0					
ANR	61954	Identifier	g		61944	0					
ANR	61955	Identifier	mode		61944	1					
ANR	61956	Identifier	R_AGRAPH_MODE_TINY		61944	1					
ANR	61957	ReturnType	static bool		61944	1					
ANR	61958	Identifier	is_tiny		61944	2					
ANR	61959	ParameterList	const RAGraph * g		61944	3					
ANR	61960	Parameter	const RAGraph * g	115:20:2648:2663	61944	0	True				
ANR	61961	ParameterType	const RAGraph *		61944	0					
ANR	61962	Identifier	g		61944	1					
ANR	61963	CFGEntryNode	ENTRY		61944		True				
ANR	61964	CFGExitNode	EXIT		61944		True				
ANR	61965	Symbol	g -> mode		61944						
ANR	61966	Symbol	* g		61944						
ANR	61967	Symbol	g -> is_tiny		61944						
ANR	61968	Symbol	g		61944						
ANR	61969	Symbol	R_AGRAPH_MODE_TINY		61944						
ANR	61970	Function	is_summary	119:0:2724:2809							
ANR	61971	FunctionDef	is_summary (const RAGraph * g)		61970	0					
ANR	61972	CompoundStatement		119:41:2765:2809	61970	0					
ANR	61973	ReturnStatement	return g -> mode == R_AGRAPH_MODE_SUMMARY ;	120:1:2768:2807	61970	0	True				
ANR	61974	EqualityExpression	g -> mode == R_AGRAPH_MODE_SUMMARY		61970	0		==			
ANR	61975	PtrMemberAccess	g -> mode		61970	0					
ANR	61976	Identifier	g		61970	0					
ANR	61977	Identifier	mode		61970	1					
ANR	61978	Identifier	R_AGRAPH_MODE_SUMMARY		61970	1					
ANR	61979	ReturnType	static bool		61970	1					
ANR	61980	Identifier	is_summary		61970	2					
ANR	61981	ParameterList	const RAGraph * g		61970	3					
ANR	61982	Parameter	const RAGraph * g	119:23:2747:2762	61970	0	True				
ANR	61983	ParameterType	const RAGraph *		61970	0					
ANR	61984	Identifier	g		61970	1					
ANR	61985	CFGEntryNode	ENTRY		61970		True				
ANR	61986	CFGExitNode	EXIT		61970		True				
ANR	61987	Symbol	g -> mode		61970						
ANR	61988	Symbol	* g		61970						
ANR	61989	Symbol	g		61970						
ANR	61990	Symbol	R_AGRAPH_MODE_SUMMARY		61970						
ANR	61991	Function	is_comments	123:0:2812:2899							
ANR	61992	FunctionDef	is_comments (const RAGraph * g)		61991	0					
ANR	61993	CompoundStatement		123:42:2854:2899	61991	0					
ANR	61994	ReturnStatement	return g -> mode == R_AGRAPH_MODE_COMMENTS ;	124:1:2857:2897	61991	0	True				
ANR	61995	EqualityExpression	g -> mode == R_AGRAPH_MODE_COMMENTS		61991	0		==			
ANR	61996	PtrMemberAccess	g -> mode		61991	0					
ANR	61997	Identifier	g		61991	0					
ANR	61998	Identifier	mode		61991	1					
ANR	61999	Identifier	R_AGRAPH_MODE_COMMENTS		61991	1					
ANR	62000	ReturnType	static bool		61991	1					
ANR	62001	Identifier	is_comments		61991	2					
ANR	62002	ParameterList	const RAGraph * g		61991	3					
ANR	62003	Parameter	const RAGraph * g	123:24:2836:2851	61991	0	True				
ANR	62004	ParameterType	const RAGraph *		61991	0					
ANR	62005	Identifier	g		61991	1					
ANR	62006	CFGEntryNode	ENTRY		61991		True				
ANR	62007	CFGExitNode	EXIT		61991		True				
ANR	62008	Symbol	g -> mode		61991						
ANR	62009	Symbol	* g		61991						
ANR	62010	Symbol	R_AGRAPH_MODE_COMMENTS		61991						
ANR	62011	Symbol	g		61991						
ANR	62012	Function	next_mode	127:0:2902:2975							
ANR	62013	FunctionDef	next_mode (int mode)		62012	0					
ANR	62014	CompoundStatement		127:31:2933:2975	62012	0					
ANR	62015	ReturnStatement	return ( mode + 1 ) % R_AGRAPH_MODE_MAX ;	128:1:2936:2973	62012	0	True				
ANR	62016	MultiplicativeExpression	( mode + 1 ) % R_AGRAPH_MODE_MAX		62012	0		%			
ANR	62017	AdditiveExpression	mode + 1		62012	0		+			
ANR	62018	Identifier	mode		62012	0					
ANR	62019	PrimaryExpression	1		62012	1					
ANR	62020	Identifier	R_AGRAPH_MODE_MAX		62012	1					
ANR	62021	ReturnType	static int		62012	1					
ANR	62022	Identifier	next_mode		62012	2					
ANR	62023	ParameterList	int mode		62012	3					
ANR	62024	Parameter	int mode	127:21:2923:2930	62012	0	True				
ANR	62025	ParameterType	int		62012	0					
ANR	62026	Identifier	mode		62012	1					
ANR	62027	CFGEntryNode	ENTRY		62012		True				
ANR	62028	CFGExitNode	EXIT		62012		True				
ANR	62029	Symbol	mode		62012						
ANR	62030	Symbol	R_AGRAPH_MODE_MAX		62012						
ANR	62031	Function	prev_mode	131:0:2978:3071							
ANR	62032	FunctionDef	prev_mode (int mode)		62031	0					
ANR	62033	CompoundStatement		131:31:3009:3071	62031	0					
ANR	62034	ReturnStatement	return ( mode + R_AGRAPH_MODE_MAX - 1 ) % R_AGRAPH_MODE_MAX ;	132:1:3012:3069	62031	0	True				
ANR	62035	MultiplicativeExpression	( mode + R_AGRAPH_MODE_MAX - 1 ) % R_AGRAPH_MODE_MAX		62031	0		%			
ANR	62036	AdditiveExpression	mode + R_AGRAPH_MODE_MAX - 1		62031	0		+			
ANR	62037	Identifier	mode		62031	0					
ANR	62038	AdditiveExpression	R_AGRAPH_MODE_MAX - 1		62031	1		-			
ANR	62039	Identifier	R_AGRAPH_MODE_MAX		62031	0					
ANR	62040	PrimaryExpression	1		62031	1					
ANR	62041	Identifier	R_AGRAPH_MODE_MAX		62031	1					
ANR	62042	ReturnType	static int		62031	1					
ANR	62043	Identifier	prev_mode		62031	2					
ANR	62044	ParameterList	int mode		62031	3					
ANR	62045	Parameter	int mode	131:21:2999:3006	62031	0	True				
ANR	62046	ParameterType	int		62031	0					
ANR	62047	Identifier	mode		62031	1					
ANR	62048	CFGEntryNode	ENTRY		62031		True				
ANR	62049	CFGExitNode	EXIT		62031		True				
ANR	62050	Symbol	mode		62031						
ANR	62051	Symbol	R_AGRAPH_MODE_MAX		62031						
ANR	62052	Function	agraph_get_title	135:0:3074:3429							
ANR	62053	FunctionDef	"agraph_get_title (const RAGraph * g , RANode * n , bool in)"		62052	0					
ANR	62054	CompoundStatement		135:74:3148:3429	62052	0					
ANR	62055	IfStatement	if ( n -> title && * n -> title )		62052	0					
ANR	62056	Condition	n -> title && * n -> title	136:5:3155:3175	62052	0	True				
ANR	62057	AndExpression	n -> title && * n -> title		62052	0		&&			
ANR	62058	PtrMemberAccess	n -> title		62052	0					
ANR	62059	Identifier	n		62052	0					
ANR	62060	Identifier	title		62052	1					
ANR	62061	UnaryOperationExpression	* n -> title		62052	1					
ANR	62062	UnaryOperator	*		62052	0					
ANR	62063	PtrMemberAccess	n -> title		62052	1					
ANR	62064	Identifier	n		62052	0					
ANR	62065	Identifier	title		62052	1					
ANR	62066	CompoundStatement		2:28:29:29	62052	1					
ANR	62067	ReturnStatement	return n -> gnode ;	137:2:3182:3197	62052	0	True				
ANR	62068	PtrMemberAccess	n -> gnode		62052	0					
ANR	62069	Identifier	n		62052	0					
ANR	62070	Identifier	gnode		62052	1					
ANR	62071	IdentifierDeclStatement	const RList * outnodes = in ? n -> gnode -> in_nodes : n -> gnode -> out_nodes ;	139:1:3203:3271	62052	1	True				
ANR	62072	IdentifierDecl	* outnodes = in ? n -> gnode -> in_nodes : n -> gnode -> out_nodes		62052	0					
ANR	62073	IdentifierDeclType	const RList *		62052	0					
ANR	62074	Identifier	outnodes		62052	1					
ANR	62075	AssignmentExpression	* outnodes = in ? n -> gnode -> in_nodes : n -> gnode -> out_nodes		62052	2		=			
ANR	62076	Identifier	outnodes		62052	0					
ANR	62077	ConditionalExpression	in ? n -> gnode -> in_nodes : n -> gnode -> out_nodes		62052	1					
ANR	62078	Condition	in		62052	0					
ANR	62079	Identifier	in		62052	0					
ANR	62080	PtrMemberAccess	n -> gnode -> in_nodes		62052	1					
ANR	62081	PtrMemberAccess	n -> gnode		62052	0					
ANR	62082	Identifier	n		62052	0					
ANR	62083	Identifier	gnode		62052	1					
ANR	62084	Identifier	in_nodes		62052	1					
ANR	62085	PtrMemberAccess	n -> gnode -> out_nodes		62052	2					
ANR	62086	PtrMemberAccess	n -> gnode		62052	0					
ANR	62087	Identifier	n		62052	0					
ANR	62088	Identifier	gnode		62052	1					
ANR	62089	Identifier	out_nodes		62052	1					
ANR	62090	IdentifierDeclStatement	RGraphNode * gn ;	140:1:3274:3288	62052	2	True				
ANR	62091	IdentifierDecl	* gn		62052	0					
ANR	62092	IdentifierDeclType	RGraphNode *		62052	0					
ANR	62093	Identifier	gn		62052	1					
ANR	62094	IdentifierDeclStatement	RListIter * iter ;	141:1:3291:3306	62052	3	True				
ANR	62095	IdentifierDecl	* iter		62052	0					
ANR	62096	IdentifierDeclType	RListIter *		62052	0					
ANR	62097	Identifier	iter		62052	1					
ANR	62098	Statement	r_list_foreach	143:1:3310:3323	62052	4	True				
ANR	62099	Statement	(	143:16:3325:3325	62052	5	True				
ANR	62100	Statement	outnodes	143:17:3326:3333	62052	6	True				
ANR	62101	Statement	","	143:25:3334:3334	62052	7	True				
ANR	62102	Statement	iter	143:27:3336:3339	62052	8	True				
ANR	62103	Statement	","	143:31:3340:3340	62052	9	True				
ANR	62104	Statement	gn	143:33:3342:3343	62052	10	True				
ANR	62105	Statement	)	143:35:3344:3344	62052	11	True				
ANR	62106	CompoundStatement		10:2:201:222	62052	12					
ANR	62107	IdentifierDeclStatement	RANode * an = gn -> data ;	144:2:3350:3371	62052	0	True				
ANR	62108	IdentifierDecl	* an = gn -> data		62052	0					
ANR	62109	IdentifierDeclType	RANode *		62052	0					
ANR	62110	Identifier	an		62052	1					
ANR	62111	AssignmentExpression	* an = gn -> data		62052	2		=			
ANR	62112	Identifier	an		62052	0					
ANR	62113	PtrMemberAccess	gn -> data		62052	1					
ANR	62114	Identifier	gn		62052	0					
ANR	62115	Identifier	data		62052	1					
ANR	62116	ReturnStatement	"return agraph_get_title ( g , an , in ) ;"	145:2:3375:3410	62052	1	True				
ANR	62117	CallExpression	"agraph_get_title ( g , an , in )"		62052	0					
ANR	62118	Callee	agraph_get_title		62052	0					
ANR	62119	Identifier	agraph_get_title		62052	0					
ANR	62120	ArgumentList	g		62052	1					
ANR	62121	Argument	g		62052	0					
ANR	62122	Identifier	g		62052	0					
ANR	62123	Argument	an		62052	1					
ANR	62124	Identifier	an		62052	0					
ANR	62125	Argument	in		62052	2					
ANR	62126	Identifier	in		62052	0					
ANR	62127	ReturnStatement	return NULL ;	147:1:3416:3427	62052	13	True				
ANR	62128	Identifier	NULL		62052	0					
ANR	62129	ReturnType	static RGraphNode *		62052	1					
ANR	62130	Identifier	agraph_get_title		62052	2					
ANR	62131	ParameterList	"const RAGraph * g , RANode * n , bool in"		62052	3					
ANR	62132	Parameter	const RAGraph * g	135:36:3110:3125	62052	0	True				
ANR	62133	ParameterType	const RAGraph *		62052	0					
ANR	62134	Identifier	g		62052	1					
ANR	62135	Parameter	RANode * n	135:54:3128:3136	62052	1	True				
ANR	62136	ParameterType	RANode *		62052	0					
ANR	62137	Identifier	n		62052	1					
ANR	62138	Parameter	bool in	135:65:3139:3145	62052	2	True				
ANR	62139	ParameterType	bool		62052	0					
ANR	62140	Identifier	in		62052	1					
ANR	62141	CFGEntryNode	ENTRY		62052		True				
ANR	62142	CFGExitNode	EXIT		62052		True				
ANR	62143	Symbol	n -> gnode		62052						
ANR	62144	Symbol	NULL		62052						
ANR	62145	Symbol	in		62052						
ANR	62146	Symbol	n -> gnode -> out_nodes		62052						
ANR	62147	Symbol	g		62052						
ANR	62148	Symbol	gn		62052						
ANR	62149	Symbol	agraph_get_title		62052						
ANR	62150	Symbol	iter		62052						
ANR	62151	Symbol	* n -> gnode		62052						
ANR	62152	Symbol	outnodes		62052						
ANR	62153	Symbol	an		62052						
ANR	62154	Symbol	n		62052						
ANR	62155	Symbol	* gn		62052						
ANR	62156	Symbol	* n -> title		62052						
ANR	62157	Symbol	gn -> data		62052						
ANR	62158	Symbol	* n		62052						
ANR	62159	Symbol	n -> title		62052						
ANR	62160	Symbol	n -> gnode -> in_nodes		62052						
ANR	62161	Symbol	* * n		62052						
ANR	62162	Function	mode2opts	150:0:3432:3653							
ANR	62163	FunctionDef	mode2opts (const RAGraph * g)		62162	0					
ANR	62164	CompoundStatement		150:39:3471:3653	62162	0					
ANR	62165	IdentifierDeclStatement	int opts = 0 ;	151:1:3474:3486	62162	0	True				
ANR	62166	IdentifierDecl	opts = 0		62162	0					
ANR	62167	IdentifierDeclType	int		62162	0					
ANR	62168	Identifier	opts		62162	1					
ANR	62169	AssignmentExpression	opts = 0		62162	2		=			
ANR	62170	Identifier	opts		62162	0					
ANR	62171	PrimaryExpression	0		62162	1					
ANR	62172	IfStatement	if ( is_offset ( g ) )		62162	1					
ANR	62173	Condition	is_offset ( g )	152:5:3493:3505	62162	0	True				
ANR	62174	CallExpression	is_offset ( g )		62162	0					
ANR	62175	Callee	is_offset		62162	0					
ANR	62176	Identifier	is_offset		62162	0					
ANR	62177	ArgumentList	g		62162	1					
ANR	62178	Argument	g		62162	0					
ANR	62179	Identifier	g		62162	0					
ANR	62180	CompoundStatement		3:20:36:36	62162	1					
ANR	62181	ExpressionStatement	opts |= BODY_OFFSETS	153:2:3512:3532	62162	0	True				
ANR	62182	AssignmentExpression	opts |= BODY_OFFSETS		62162	0		|=			
ANR	62183	Identifier	opts		62162	0					
ANR	62184	Identifier	BODY_OFFSETS		62162	1					
ANR	62185	IfStatement	if ( is_comments ( g ) )		62162	2					
ANR	62186	Condition	is_comments ( g )	155:5:3542:3556	62162	0	True				
ANR	62187	CallExpression	is_comments ( g )		62162	0					
ANR	62188	Callee	is_comments		62162	0					
ANR	62189	Identifier	is_comments		62162	0					
ANR	62190	ArgumentList	g		62162	1					
ANR	62191	Argument	g		62162	0					
ANR	62192	Identifier	g		62162	0					
ANR	62193	CompoundStatement		6:22:87:87	62162	1					
ANR	62194	ExpressionStatement	opts |= BODY_COMMENTS	156:2:3563:3584	62162	0	True				
ANR	62195	AssignmentExpression	opts |= BODY_COMMENTS		62162	0		|=			
ANR	62196	Identifier	opts		62162	0					
ANR	62197	Identifier	BODY_COMMENTS		62162	1					
ANR	62198	IfStatement	if ( is_summary ( g ) )		62162	3					
ANR	62199	Condition	is_summary ( g )	158:5:3594:3607	62162	0	True				
ANR	62200	CallExpression	is_summary ( g )		62162	0					
ANR	62201	Callee	is_summary		62162	0					
ANR	62202	Identifier	is_summary		62162	0					
ANR	62203	ArgumentList	g		62162	1					
ANR	62204	Argument	g		62162	0					
ANR	62205	Identifier	g		62162	0					
ANR	62206	CompoundStatement		9:21:138:138	62162	1					
ANR	62207	ExpressionStatement	opts |= BODY_SUMMARY	159:2:3614:3634	62162	0	True				
ANR	62208	AssignmentExpression	opts |= BODY_SUMMARY		62162	0		|=			
ANR	62209	Identifier	opts		62162	0					
ANR	62210	Identifier	BODY_SUMMARY		62162	1					
ANR	62211	ReturnStatement	return opts ;	161:1:3640:3651	62162	4	True				
ANR	62212	Identifier	opts		62162	0					
ANR	62213	ReturnType	static int		62162	1					
ANR	62214	Identifier	mode2opts		62162	2					
ANR	62215	ParameterList	const RAGraph * g		62162	3					
ANR	62216	Parameter	const RAGraph * g	150:21:3453:3468	62162	0	True				
ANR	62217	ParameterType	const RAGraph *		62162	0					
ANR	62218	Identifier	g		62162	1					
ANR	62219	CFGEntryNode	ENTRY		62162		True				
ANR	62220	CFGExitNode	EXIT		62162		True				
ANR	62221	Symbol	is_comments		62162						
ANR	62222	Symbol	is_summary		62162						
ANR	62223	Symbol	opts		62162						
ANR	62224	Symbol	BODY_COMMENTS		62162						
ANR	62225	Symbol	g		62162						
ANR	62226	Symbol	BODY_SUMMARY		62162						
ANR	62227	Symbol	is_offset		62162						
ANR	62228	Symbol	BODY_OFFSETS		62162						
ANR	62229	Function	rotateAsmemu	165:0:3684:4065							
ANR	62230	FunctionDef	rotateAsmemu (RCore * core)		62229	0					
ANR	62231	CompoundStatement		165:38:3722:4065	62229	0					
ANR	62232	IdentifierDeclStatement	"const bool isEmuStr = r_config_get_i ( core -> config , ""emu.str"" ) ;"	166:1:3725:3787	62229	0	True				
ANR	62233	IdentifierDecl	"isEmuStr = r_config_get_i ( core -> config , ""emu.str"" )"		62229	0					
ANR	62234	IdentifierDeclType	const bool		62229	0					
ANR	62235	Identifier	isEmuStr		62229	1					
ANR	62236	AssignmentExpression	"isEmuStr = r_config_get_i ( core -> config , ""emu.str"" )"		62229	2		=			
ANR	62237	Identifier	isEmuStr		62229	0					
ANR	62238	CallExpression	"r_config_get_i ( core -> config , ""emu.str"" )"		62229	1					
ANR	62239	Callee	r_config_get_i		62229	0					
ANR	62240	Identifier	r_config_get_i		62229	0					
ANR	62241	ArgumentList	core -> config		62229	1					
ANR	62242	Argument	core -> config		62229	0					
ANR	62243	PtrMemberAccess	core -> config		62229	0					
ANR	62244	Identifier	core		62229	0					
ANR	62245	Identifier	config		62229	1					
ANR	62246	Argument	"""emu.str"""		62229	1					
ANR	62247	PrimaryExpression	"""emu.str"""		62229	0					
ANR	62248	IdentifierDeclStatement	"const bool isEmu = r_config_get_i ( core -> config , ""asm.emu"" ) ;"	167:1:3790:3849	62229	1	True				
ANR	62249	IdentifierDecl	"isEmu = r_config_get_i ( core -> config , ""asm.emu"" )"		62229	0					
ANR	62250	IdentifierDeclType	const bool		62229	0					
ANR	62251	Identifier	isEmu		62229	1					
ANR	62252	AssignmentExpression	"isEmu = r_config_get_i ( core -> config , ""asm.emu"" )"		62229	2		=			
ANR	62253	Identifier	isEmu		62229	0					
ANR	62254	CallExpression	"r_config_get_i ( core -> config , ""asm.emu"" )"		62229	1					
ANR	62255	Callee	r_config_get_i		62229	0					
ANR	62256	Identifier	r_config_get_i		62229	0					
ANR	62257	ArgumentList	core -> config		62229	1					
ANR	62258	Argument	core -> config		62229	0					
ANR	62259	PtrMemberAccess	core -> config		62229	0					
ANR	62260	Identifier	core		62229	0					
ANR	62261	Identifier	config		62229	1					
ANR	62262	Argument	"""asm.emu"""		62229	1					
ANR	62263	PrimaryExpression	"""asm.emu"""		62229	0					
ANR	62264	IfStatement	if ( isEmu )		62229	2					
ANR	62265	Condition	isEmu	168:5:3856:3860	62229	0	True				
ANR	62266	Identifier	isEmu		62229	0					
ANR	62267	CompoundStatement		4:12:140:140	62229	1					
ANR	62268	IfStatement	if ( isEmuStr )		62229	0					
ANR	62269	Condition	isEmuStr	169:6:3871:3878	62229	0	True				
ANR	62270	Identifier	isEmuStr		62229	0					
ANR	62271	CompoundStatement		5:16:158:158	62229	1					
ANR	62272	ExpressionStatement	"r_config_set ( core -> config , ""emu.str"" , ""false"" )"	170:3:3886:3933	62229	0	True				
ANR	62273	CallExpression	"r_config_set ( core -> config , ""emu.str"" , ""false"" )"		62229	0					
ANR	62274	Callee	r_config_set		62229	0					
ANR	62275	Identifier	r_config_set		62229	0					
ANR	62276	ArgumentList	core -> config		62229	1					
ANR	62277	Argument	core -> config		62229	0					
ANR	62278	PtrMemberAccess	core -> config		62229	0					
ANR	62279	Identifier	core		62229	0					
ANR	62280	Identifier	config		62229	1					
ANR	62281	Argument	"""emu.str"""		62229	1					
ANR	62282	PrimaryExpression	"""emu.str"""		62229	0					
ANR	62283	Argument	"""false"""		62229	2					
ANR	62284	PrimaryExpression	"""false"""		62229	0					
ANR	62285	ElseStatement	else		62229	0					
ANR	62286	CompoundStatement		7:9:221:221	62229	0					
ANR	62287	ExpressionStatement	"r_config_set ( core -> config , ""asm.emu"" , ""false"" )"	172:3:3949:3996	62229	0	True				
ANR	62288	CallExpression	"r_config_set ( core -> config , ""asm.emu"" , ""false"" )"		62229	0					
ANR	62289	Callee	r_config_set		62229	0					
ANR	62290	Identifier	r_config_set		62229	0					
ANR	62291	ArgumentList	core -> config		62229	1					
ANR	62292	Argument	core -> config		62229	0					
ANR	62293	PtrMemberAccess	core -> config		62229	0					
ANR	62294	Identifier	core		62229	0					
ANR	62295	Identifier	config		62229	1					
ANR	62296	Argument	"""asm.emu"""		62229	1					
ANR	62297	PrimaryExpression	"""asm.emu"""		62229	0					
ANR	62298	Argument	"""false"""		62229	2					
ANR	62299	PrimaryExpression	"""false"""		62229	0					
ANR	62300	ElseStatement	else		62229	0					
ANR	62301	CompoundStatement		10:8:287:287	62229	0					
ANR	62302	ExpressionStatement	"r_config_set ( core -> config , ""emu.str"" , ""true"" )"	175:2:4014:4060	62229	0	True				
ANR	62303	CallExpression	"r_config_set ( core -> config , ""emu.str"" , ""true"" )"		62229	0					
ANR	62304	Callee	r_config_set		62229	0					
ANR	62305	Identifier	r_config_set		62229	0					
ANR	62306	ArgumentList	core -> config		62229	1					
ANR	62307	Argument	core -> config		62229	0					
ANR	62308	PtrMemberAccess	core -> config		62229	0					
ANR	62309	Identifier	core		62229	0					
ANR	62310	Identifier	config		62229	1					
ANR	62311	Argument	"""emu.str"""		62229	1					
ANR	62312	PrimaryExpression	"""emu.str"""		62229	0					
ANR	62313	Argument	"""true"""		62229	2					
ANR	62314	PrimaryExpression	"""true"""		62229	0					
ANR	62315	ReturnType	static void		62229	1					
ANR	62316	Identifier	rotateAsmemu		62229	2					
ANR	62317	ParameterList	RCore * core		62229	3					
ANR	62318	Parameter	RCore * core	165:25:3709:3719	62229	0	True				
ANR	62319	ParameterType	RCore *		62229	0					
ANR	62320	Identifier	core		62229	1					
ANR	62321	CFGEntryNode	ENTRY		62229		True				
ANR	62322	CFGExitNode	EXIT		62229		True				
ANR	62323	Symbol	core -> config		62229						
ANR	62324	Symbol	core		62229						
ANR	62325	Symbol	isEmuStr		62229						
ANR	62326	Symbol	r_config_get_i		62229						
ANR	62327	Symbol	* core		62229						
ANR	62328	Symbol	isEmu		62229						
ANR	62329	Function	showcursor	179:0:4068:4301							
ANR	62330	FunctionDef	"showcursor (RCore * core , int x)"		62329	0					
ANR	62331	CompoundStatement		179:43:4111:4301	62329	0					
ANR	62332	IfStatement	if ( ! x )		62329	0					
ANR	62333	Condition	! x	180:5:4118:4119	62329	0	True				
ANR	62334	UnaryOperationExpression	! x		62329	0					
ANR	62335	UnaryOperator	!		62329	0					
ANR	62336	Identifier	x		62329	1					
ANR	62337	CompoundStatement		3:2:14:68	62329	1					
ANR	62338	IdentifierDeclStatement	"int wheel = r_config_get_i ( core -> config , ""scr.wheel"" ) ;"	181:2:4126:4180	62329	0	True				
ANR	62339	IdentifierDecl	"wheel = r_config_get_i ( core -> config , ""scr.wheel"" )"		62329	0					
ANR	62340	IdentifierDeclType	int		62329	0					
ANR	62341	Identifier	wheel		62329	1					
ANR	62342	AssignmentExpression	"wheel = r_config_get_i ( core -> config , ""scr.wheel"" )"		62329	2		=			
ANR	62343	Identifier	wheel		62329	0					
ANR	62344	CallExpression	"r_config_get_i ( core -> config , ""scr.wheel"" )"		62329	1					
ANR	62345	Callee	r_config_get_i		62329	0					
ANR	62346	Identifier	r_config_get_i		62329	0					
ANR	62347	ArgumentList	core -> config		62329	1					
ANR	62348	Argument	core -> config		62329	0					
ANR	62349	PtrMemberAccess	core -> config		62329	0					
ANR	62350	Identifier	core		62329	0					
ANR	62351	Identifier	config		62329	1					
ANR	62352	Argument	"""scr.wheel"""		62329	1					
ANR	62353	PrimaryExpression	"""scr.wheel"""		62329	0					
ANR	62354	IfStatement	if ( wheel )		62329	1					
ANR	62355	Condition	wheel	182:6:4188:4192	62329	0	True				
ANR	62356	Identifier	wheel		62329	0					
ANR	62357	CompoundStatement		4:13:83:83	62329	1					
ANR	62358	ExpressionStatement	r_cons_enable_mouse ( true )	183:3:4200:4226	62329	0	True				
ANR	62359	CallExpression	r_cons_enable_mouse ( true )		62329	0					
ANR	62360	Callee	r_cons_enable_mouse		62329	0					
ANR	62361	Identifier	r_cons_enable_mouse		62329	0					
ANR	62362	ArgumentList	true		62329	1					
ANR	62363	Argument	true		62329	0					
ANR	62364	Identifier	true		62329	0					
ANR	62365	ElseStatement	else		62329	0					
ANR	62366	CompoundStatement		7:8:128:128	62329	0					
ANR	62367	ExpressionStatement	r_cons_enable_mouse ( false )	186:2:4244:4271	62329	0	True				
ANR	62368	CallExpression	r_cons_enable_mouse ( false )		62329	0					
ANR	62369	Callee	r_cons_enable_mouse		62329	0					
ANR	62370	Identifier	r_cons_enable_mouse		62329	0					
ANR	62371	ArgumentList	false		62329	1					
ANR	62372	Argument	false		62329	0					
ANR	62373	Identifier	false		62329	0					
ANR	62374	ExpressionStatement	r_cons_show_cursor ( x )	188:1:4277:4299	62329	1	True				
ANR	62375	CallExpression	r_cons_show_cursor ( x )		62329	0					
ANR	62376	Callee	r_cons_show_cursor		62329	0					
ANR	62377	Identifier	r_cons_show_cursor		62329	0					
ANR	62378	ArgumentList	x		62329	1					
ANR	62379	Argument	x		62329	0					
ANR	62380	Identifier	x		62329	0					
ANR	62381	ReturnType	static void		62329	1					
ANR	62382	Identifier	showcursor		62329	2					
ANR	62383	ParameterList	"RCore * core , int x"		62329	3					
ANR	62384	Parameter	RCore * core	179:23:4091:4101	62329	0	True				
ANR	62385	ParameterType	RCore *		62329	0					
ANR	62386	Identifier	core		62329	1					
ANR	62387	Parameter	int x	179:36:4104:4108	62329	1	True				
ANR	62388	ParameterType	int		62329	0					
ANR	62389	Identifier	x		62329	1					
ANR	62390	CFGEntryNode	ENTRY		62329		True				
ANR	62391	CFGExitNode	EXIT		62329		True				
ANR	62392	Symbol	core -> config		62329						
ANR	62393	Symbol	core		62329						
ANR	62394	Symbol	wheel		62329						
ANR	62395	Symbol	r_config_get_i		62329						
ANR	62396	Symbol	x		62329						
ANR	62397	Symbol	* core		62329						
ANR	62398	Symbol	true		62329						
ANR	62399	Symbol	false		62329						
ANR	62400	Function	get_title	191:0:4304:4381							
ANR	62401	FunctionDef	get_title (ut64 addr)		62400	0					
ANR	62402	CompoundStatement		191:34:4338:4381	62400	0					
ANR	62403	Statement	return	192:1:4341:4346	62400	0	True				
ANR	62404	Statement	r_str_newf	192:8:4348:4357	62400	1	True				
ANR	62405	Statement	(	192:19:4359:4359	62400	2	True				
ANR	62406	Statement	"""0x%"""	192:20:4360:4364	62400	3	True				
ANR	62407	Statement	PFMT64x	192:25:4365:4371	62400	4	True				
ANR	62408	Statement	","	192:32:4372:4372	62400	5	True				
ANR	62409	Statement	addr	192:34:4374:4377	62400	6	True				
ANR	62410	Statement	)	192:38:4378:4378	62400	7	True				
ANR	62411	ExpressionStatement		192:39:4379:4379	62400	8	True				
ANR	62412	ReturnType	static char *		62400	1					
ANR	62413	Identifier	get_title		62400	2					
ANR	62414	ParameterList	ut64 addr		62400	3					
ANR	62415	Parameter	ut64 addr	191:23:4327:4335	62400	0	True				
ANR	62416	ParameterType	ut64		62400	0					
ANR	62417	Identifier	addr		62400	1					
ANR	62418	CFGEntryNode	ENTRY		62400		True				
ANR	62419	CFGExitNode	EXIT		62400		True				
ANR	62420	Symbol	addr		62400						
ANR	62421	DeclStmt									
ANR	62422	Decl							int	int ( struct agraph_refresh_data * grd )	agraph_refresh
ANR	62423	Function	update_node_dimension	197:0:4445:5708							
ANR	62424	FunctionDef	"update_node_dimension (const RGraph * g , int is_mini , int zoom , int edgemode , bool callgraph , int layout)"		62423	0					
ANR	62425	CompoundStatement		197:116:4561:5708	62423	0					
ANR	62426	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g ) ;	198:1:4564:4606	62423	0	True				
ANR	62427	IdentifierDecl	* nodes = r_graph_get_nodes ( g )		62423	0					
ANR	62428	IdentifierDeclType	const RList *		62423	0					
ANR	62429	Identifier	nodes		62423	1					
ANR	62430	AssignmentExpression	* nodes = r_graph_get_nodes ( g )		62423	2		=			
ANR	62431	Identifier	nodes		62423	0					
ANR	62432	CallExpression	r_graph_get_nodes ( g )		62423	1					
ANR	62433	Callee	r_graph_get_nodes		62423	0					
ANR	62434	Identifier	r_graph_get_nodes		62423	0					
ANR	62435	ArgumentList	g		62423	1					
ANR	62436	Argument	g		62423	0					
ANR	62437	Identifier	g		62423	0					
ANR	62438	IdentifierDeclStatement	RGraphNode * gn ;	199:1:4609:4623	62423	1	True				
ANR	62439	IdentifierDecl	* gn		62423	0					
ANR	62440	IdentifierDeclType	RGraphNode *		62423	0					
ANR	62441	Identifier	gn		62423	1					
ANR	62442	IdentifierDeclStatement	RListIter * it ;	200:1:4626:4639	62423	2	True				
ANR	62443	IdentifierDecl	* it		62423	0					
ANR	62444	IdentifierDeclType	RListIter *		62423	0					
ANR	62445	Identifier	it		62423	1					
ANR	62446	IdentifierDeclStatement	RANode * n ;	201:1:4642:4651	62423	3	True				
ANR	62447	IdentifierDecl	* n		62423	0					
ANR	62448	IdentifierDeclType	RANode *		62423	0					
ANR	62449	Identifier	n		62423	1					
ANR	62450	Statement	graph_foreach_anode	202:1:4654:4672	62423	4	True				
ANR	62451	Statement	(	202:21:4674:4674	62423	5	True				
ANR	62452	Statement	nodes	202:22:4675:4679	62423	6	True				
ANR	62453	Statement	","	202:27:4680:4680	62423	7	True				
ANR	62454	Statement	it	202:29:4682:4683	62423	8	True				
ANR	62455	Statement	","	202:31:4684:4684	62423	9	True				
ANR	62456	Statement	gn	202:33:4686:4687	62423	10	True				
ANR	62457	Statement	","	202:35:4688:4688	62423	11	True				
ANR	62458	Statement	n	202:37:4690:4690	62423	12	True				
ANR	62459	Statement	)	202:38:4691:4691	62423	13	True				
ANR	62460	CompoundStatement		6:40:131:131	62423	14					
ANR	62461	IfStatement	if ( is_mini )		62423	0					
ANR	62462	Condition	is_mini	203:6:4701:4707	62423	0	True				
ANR	62463	Identifier	is_mini		62423	0					
ANR	62464	CompoundStatement		7:15:148:148	62423	1					
ANR	62465	ExpressionStatement	n -> h = 1	204:3:4715:4723	62423	0	True				
ANR	62466	AssignmentExpression	n -> h = 1		62423	0		=			
ANR	62467	PtrMemberAccess	n -> h		62423	0					
ANR	62468	Identifier	n		62423	0					
ANR	62469	Identifier	h		62423	1					
ANR	62470	PrimaryExpression	1		62423	1					
ANR	62471	ExpressionStatement	n -> w = MINIGRAPH_NODE_MIN_WIDTH	205:3:4728:4759	62423	1	True				
ANR	62472	AssignmentExpression	n -> w = MINIGRAPH_NODE_MIN_WIDTH		62423	0		=			
ANR	62473	PtrMemberAccess	n -> w		62423	0					
ANR	62474	Identifier	n		62423	0					
ANR	62475	Identifier	w		62423	1					
ANR	62476	Identifier	MINIGRAPH_NODE_MIN_WIDTH		62423	1					
ANR	62477	ElseStatement	else		62423	0					
ANR	62478	IfStatement	if ( n -> is_mini )		62423	0					
ANR	62479	Condition	n -> is_mini	206:13:4774:4783	62423	0	True				
ANR	62480	PtrMemberAccess	n -> is_mini		62423	0					
ANR	62481	Identifier	n		62423	0					
ANR	62482	Identifier	is_mini		62423	1					
ANR	62483	CompoundStatement		10:25:224:224	62423	1					
ANR	62484	ExpressionStatement	n -> h = 1	207:3:4791:4799	62423	0	True				
ANR	62485	AssignmentExpression	n -> h = 1		62423	0		=			
ANR	62486	PtrMemberAccess	n -> h		62423	0					
ANR	62487	Identifier	n		62423	0					
ANR	62488	Identifier	h		62423	1					
ANR	62489	PrimaryExpression	1		62423	1					
ANR	62490	ExpressionStatement	n -> w = MININODE_MIN_WIDTH	208:3:4804:4829	62423	1	True				
ANR	62491	AssignmentExpression	n -> w = MININODE_MIN_WIDTH		62423	0		=			
ANR	62492	PtrMemberAccess	n -> w		62423	0					
ANR	62493	Identifier	n		62423	0					
ANR	62494	Identifier	w		62423	1					
ANR	62495	Identifier	MININODE_MIN_WIDTH		62423	1					
ANR	62496	ElseStatement	else		62423	0					
ANR	62497	CompoundStatement		15:3:332:376	62423	0					
ANR	62498	ExpressionStatement	"n -> w = r_str_bounds ( n -> body , ( int * ) & n -> h )"	210:3:4845:4889	62423	0	True				
ANR	62499	AssignmentExpression	"n -> w = r_str_bounds ( n -> body , ( int * ) & n -> h )"		62423	0		=			
ANR	62500	PtrMemberAccess	n -> w		62423	0					
ANR	62501	Identifier	n		62423	0					
ANR	62502	Identifier	w		62423	1					
ANR	62503	CallExpression	"r_str_bounds ( n -> body , ( int * ) & n -> h )"		62423	1					
ANR	62504	Callee	r_str_bounds		62423	0					
ANR	62505	Identifier	r_str_bounds		62423	0					
ANR	62506	ArgumentList	n -> body		62423	1					
ANR	62507	Argument	n -> body		62423	0					
ANR	62508	PtrMemberAccess	n -> body		62423	0					
ANR	62509	Identifier	n		62423	0					
ANR	62510	Identifier	body		62423	1					
ANR	62511	Argument	( int * ) & n -> h		62423	1					
ANR	62512	CastExpression	( int * ) & n -> h		62423	0					
ANR	62513	CastTarget	int *		62423	0					
ANR	62514	UnaryOperationExpression	& n -> h		62423	1					
ANR	62515	UnaryOperator	&		62423	0					
ANR	62516	PtrMemberAccess	n -> h		62423	1					
ANR	62517	Identifier	n		62423	0					
ANR	62518	Identifier	h		62423	1					
ANR	62519	IdentifierDeclStatement	ut32 len = strlen ( n -> title ) + MARGIN_TEXT_X ;	211:3:4894:4938	62423	1	True				
ANR	62520	IdentifierDecl	len = strlen ( n -> title ) + MARGIN_TEXT_X		62423	0					
ANR	62521	IdentifierDeclType	ut32		62423	0					
ANR	62522	Identifier	len		62423	1					
ANR	62523	AssignmentExpression	len = strlen ( n -> title ) + MARGIN_TEXT_X		62423	2		=			
ANR	62524	Identifier	len		62423	0					
ANR	62525	AdditiveExpression	strlen ( n -> title ) + MARGIN_TEXT_X		62423	1		+			
ANR	62526	CallExpression	strlen ( n -> title )		62423	0					
ANR	62527	Callee	strlen		62423	0					
ANR	62528	Identifier	strlen		62423	0					
ANR	62529	ArgumentList	n -> title		62423	1					
ANR	62530	Argument	n -> title		62423	0					
ANR	62531	PtrMemberAccess	n -> title		62423	0					
ANR	62532	Identifier	n		62423	0					
ANR	62533	Identifier	title		62423	1					
ANR	62534	Identifier	MARGIN_TEXT_X		62423	1					
ANR	62535	IfStatement	if ( len > INT_MAX )		62423	2					
ANR	62536	Condition	len > INT_MAX	212:7:4947:4959	62423	0	True				
ANR	62537	RelationalExpression	len > INT_MAX		62423	0		>			
ANR	62538	Identifier	len		62423	0					
ANR	62539	Identifier	INT_MAX		62423	1					
ANR	62540	CompoundStatement		16:22:400:400	62423	1					
ANR	62541	ExpressionStatement	len = INT_MAX	213:4:4968:4981	62423	0	True				
ANR	62542	AssignmentExpression	len = INT_MAX		62423	0		=			
ANR	62543	Identifier	len		62423	0					
ANR	62544	Identifier	INT_MAX		62423	1					
ANR	62545	IfStatement	if ( len > n -> w )		62423	3					
ANR	62546	Condition	len > n -> w	215:7:4995:5004	62423	0	True				
ANR	62547	RelationalExpression	len > n -> w		62423	0		>			
ANR	62548	Identifier	len		62423	0					
ANR	62549	PtrMemberAccess	n -> w		62423	1					
ANR	62550	Identifier	n		62423	0					
ANR	62551	Identifier	w		62423	1					
ANR	62552	CompoundStatement		19:19:445:445	62423	1					
ANR	62553	ExpressionStatement	n -> w = len	216:4:5013:5023	62423	0	True				
ANR	62554	AssignmentExpression	n -> w = len		62423	0		=			
ANR	62555	PtrMemberAccess	n -> w		62423	0					
ANR	62556	Identifier	n		62423	0					
ANR	62557	Identifier	w		62423	1					
ANR	62558	Identifier	len		62423	1					
ANR	62559	ExpressionStatement	n -> w += BORDER_WIDTH	219:3:5078:5098	62423	4	True				
ANR	62560	AssignmentExpression	n -> w += BORDER_WIDTH		62423	0		+=			
ANR	62561	PtrMemberAccess	n -> w		62423	0					
ANR	62562	Identifier	n		62423	0					
ANR	62563	Identifier	w		62423	1					
ANR	62564	Identifier	BORDER_WIDTH		62423	1					
ANR	62565	ExpressionStatement	n -> h += BORDER_HEIGHT	220:3:5103:5124	62423	5	True				
ANR	62566	AssignmentExpression	n -> h += BORDER_HEIGHT		62423	0		+=			
ANR	62567	PtrMemberAccess	n -> h		62423	0					
ANR	62568	Identifier	n		62423	0					
ANR	62569	Identifier	h		62423	1					
ANR	62570	Identifier	BORDER_HEIGHT		62423	1					
ANR	62571	ExpressionStatement	"n -> w = R_MAX ( MIN_NODE_WIDTH , ( n -> w * zoom ) / 100 )"	222:3:5157:5207	62423	6	True				
ANR	62572	AssignmentExpression	"n -> w = R_MAX ( MIN_NODE_WIDTH , ( n -> w * zoom ) / 100 )"		62423	0		=			
ANR	62573	PtrMemberAccess	n -> w		62423	0					
ANR	62574	Identifier	n		62423	0					
ANR	62575	Identifier	w		62423	1					
ANR	62576	CallExpression	"R_MAX ( MIN_NODE_WIDTH , ( n -> w * zoom ) / 100 )"		62423	1					
ANR	62577	Callee	R_MAX		62423	0					
ANR	62578	Identifier	R_MAX		62423	0					
ANR	62579	ArgumentList	MIN_NODE_WIDTH		62423	1					
ANR	62580	Argument	MIN_NODE_WIDTH		62423	0					
ANR	62581	Identifier	MIN_NODE_WIDTH		62423	0					
ANR	62582	Argument	( n -> w * zoom ) / 100		62423	1					
ANR	62583	MultiplicativeExpression	( n -> w * zoom ) / 100		62423	0		/			
ANR	62584	MultiplicativeExpression	n -> w * zoom		62423	0		*			
ANR	62585	PtrMemberAccess	n -> w		62423	0					
ANR	62586	Identifier	n		62423	0					
ANR	62587	Identifier	w		62423	1					
ANR	62588	Identifier	zoom		62423	1					
ANR	62589	PrimaryExpression	100		62423	1					
ANR	62590	ExpressionStatement	"n -> h = R_MAX ( MIN_NODE_HEIGHT , ( n -> h * zoom ) / 100 )"	223:3:5212:5263	62423	7	True				
ANR	62591	AssignmentExpression	"n -> h = R_MAX ( MIN_NODE_HEIGHT , ( n -> h * zoom ) / 100 )"		62423	0		=			
ANR	62592	PtrMemberAccess	n -> h		62423	0					
ANR	62593	Identifier	n		62423	0					
ANR	62594	Identifier	h		62423	1					
ANR	62595	CallExpression	"R_MAX ( MIN_NODE_HEIGHT , ( n -> h * zoom ) / 100 )"		62423	1					
ANR	62596	Callee	R_MAX		62423	0					
ANR	62597	Identifier	R_MAX		62423	0					
ANR	62598	ArgumentList	MIN_NODE_HEIGHT		62423	1					
ANR	62599	Argument	MIN_NODE_HEIGHT		62423	0					
ANR	62600	Identifier	MIN_NODE_HEIGHT		62423	0					
ANR	62601	Argument	( n -> h * zoom ) / 100		62423	1					
ANR	62602	MultiplicativeExpression	( n -> h * zoom ) / 100		62423	0		/			
ANR	62603	MultiplicativeExpression	n -> h * zoom		62423	0		*			
ANR	62604	PtrMemberAccess	n -> h		62423	0					
ANR	62605	Identifier	n		62423	0					
ANR	62606	Identifier	h		62423	1					
ANR	62607	Identifier	zoom		62423	1					
ANR	62608	PrimaryExpression	100		62423	1					
ANR	62609	IfStatement	if ( edgemode == 2 && ! callgraph )		62423	8					
ANR	62610	Condition	edgemode == 2 && ! callgraph	225:7:5273:5299	62423	0	True				
ANR	62611	AndExpression	edgemode == 2 && ! callgraph		62423	0		&&			
ANR	62612	EqualityExpression	edgemode == 2		62423	0		==			
ANR	62613	Identifier	edgemode		62423	0					
ANR	62614	PrimaryExpression	2		62423	1					
ANR	62615	UnaryOperationExpression	! callgraph		62423	1					
ANR	62616	UnaryOperator	!		62423	0					
ANR	62617	Identifier	callgraph		62423	1					
ANR	62618	CompoundStatement		29:36:740:740	62423	1					
ANR	62619	IfStatement	if ( ! layout )		62423	0					
ANR	62620	Condition	! layout	226:8:5312:5318	62423	0	True				
ANR	62621	UnaryOperationExpression	! layout		62423	0					
ANR	62622	UnaryOperator	!		62423	0					
ANR	62623	Identifier	layout		62423	1					
ANR	62624	CompoundStatement		30:17:759:759	62423	1					
ANR	62625	ExpressionStatement	"n -> w = R_MAX ( n -> w , ( r_list_length ( n -> gnode -> out_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"	227:5:5328:5414	62423	0	True				
ANR	62626	AssignmentExpression	"n -> w = R_MAX ( n -> w , ( r_list_length ( n -> gnode -> out_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"		62423	0		=			
ANR	62627	PtrMemberAccess	n -> w		62423	0					
ANR	62628	Identifier	n		62423	0					
ANR	62629	Identifier	w		62423	1					
ANR	62630	CallExpression	"R_MAX ( n -> w , ( r_list_length ( n -> gnode -> out_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"		62423	1					
ANR	62631	Callee	R_MAX		62423	0					
ANR	62632	Identifier	R_MAX		62423	0					
ANR	62633	ArgumentList	n -> w		62423	1					
ANR	62634	Argument	n -> w		62423	0					
ANR	62635	PtrMemberAccess	n -> w		62423	0					
ANR	62636	Identifier	n		62423	0					
ANR	62637	Identifier	w		62423	1					
ANR	62638	Argument	( r_list_length ( n -> gnode -> out_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2		62423	1					
ANR	62639	AdditiveExpression	( r_list_length ( n -> gnode -> out_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2		62423	0		+			
ANR	62640	AdditiveExpression	r_list_length ( n -> gnode -> out_nodes ) * 2 + 1		62423	0		+			
ANR	62641	MultiplicativeExpression	r_list_length ( n -> gnode -> out_nodes ) * 2		62423	0		*			
ANR	62642	CallExpression	r_list_length ( n -> gnode -> out_nodes )		62423	0					
ANR	62643	Callee	r_list_length		62423	0					
ANR	62644	Identifier	r_list_length		62423	0					
ANR	62645	ArgumentList	n -> gnode -> out_nodes		62423	1					
ANR	62646	Argument	n -> gnode -> out_nodes		62423	0					
ANR	62647	PtrMemberAccess	n -> gnode -> out_nodes		62423	0					
ANR	62648	PtrMemberAccess	n -> gnode		62423	0					
ANR	62649	Identifier	n		62423	0					
ANR	62650	Identifier	gnode		62423	1					
ANR	62651	Identifier	out_nodes		62423	1					
ANR	62652	PrimaryExpression	2		62423	1					
ANR	62653	PrimaryExpression	1		62423	1					
ANR	62654	MultiplicativeExpression	R_EDGES_X_INC * 2		62423	1		*			
ANR	62655	Identifier	R_EDGES_X_INC		62423	0					
ANR	62656	PrimaryExpression	2		62423	1					
ANR	62657	ExpressionStatement	"n -> w = R_MAX ( n -> w , ( r_list_length ( n -> gnode -> in_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"	228:5:5421:5506	62423	1	True				
ANR	62658	AssignmentExpression	"n -> w = R_MAX ( n -> w , ( r_list_length ( n -> gnode -> in_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"		62423	0		=			
ANR	62659	PtrMemberAccess	n -> w		62423	0					
ANR	62660	Identifier	n		62423	0					
ANR	62661	Identifier	w		62423	1					
ANR	62662	CallExpression	"R_MAX ( n -> w , ( r_list_length ( n -> gnode -> in_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2 )"		62423	1					
ANR	62663	Callee	R_MAX		62423	0					
ANR	62664	Identifier	R_MAX		62423	0					
ANR	62665	ArgumentList	n -> w		62423	1					
ANR	62666	Argument	n -> w		62423	0					
ANR	62667	PtrMemberAccess	n -> w		62423	0					
ANR	62668	Identifier	n		62423	0					
ANR	62669	Identifier	w		62423	1					
ANR	62670	Argument	( r_list_length ( n -> gnode -> in_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2		62423	1					
ANR	62671	AdditiveExpression	( r_list_length ( n -> gnode -> in_nodes ) * 2 + 1 ) + R_EDGES_X_INC * 2		62423	0		+			
ANR	62672	AdditiveExpression	r_list_length ( n -> gnode -> in_nodes ) * 2 + 1		62423	0		+			
ANR	62673	MultiplicativeExpression	r_list_length ( n -> gnode -> in_nodes ) * 2		62423	0		*			
ANR	62674	CallExpression	r_list_length ( n -> gnode -> in_nodes )		62423	0					
ANR	62675	Callee	r_list_length		62423	0					
ANR	62676	Identifier	r_list_length		62423	0					
ANR	62677	ArgumentList	n -> gnode -> in_nodes		62423	1					
ANR	62678	Argument	n -> gnode -> in_nodes		62423	0					
ANR	62679	PtrMemberAccess	n -> gnode -> in_nodes		62423	0					
ANR	62680	PtrMemberAccess	n -> gnode		62423	0					
ANR	62681	Identifier	n		62423	0					
ANR	62682	Identifier	gnode		62423	1					
ANR	62683	Identifier	in_nodes		62423	1					
ANR	62684	PrimaryExpression	2		62423	1					
ANR	62685	PrimaryExpression	1		62423	1					
ANR	62686	MultiplicativeExpression	R_EDGES_X_INC * 2		62423	1		*			
ANR	62687	Identifier	R_EDGES_X_INC		62423	0					
ANR	62688	PrimaryExpression	2		62423	1					
ANR	62689	ElseStatement	else		62423	0					
ANR	62690	CompoundStatement		33:11:957:957	62423	0					
ANR	62691	ExpressionStatement	"n -> h = R_MAX ( n -> h , ( r_list_length ( n -> gnode -> out_nodes ) + 1 ) + R_EDGES_X_INC )"	230:5:5526:5604	62423	0	True				
ANR	62692	AssignmentExpression	"n -> h = R_MAX ( n -> h , ( r_list_length ( n -> gnode -> out_nodes ) + 1 ) + R_EDGES_X_INC )"		62423	0		=			
ANR	62693	PtrMemberAccess	n -> h		62423	0					
ANR	62694	Identifier	n		62423	0					
ANR	62695	Identifier	h		62423	1					
ANR	62696	CallExpression	"R_MAX ( n -> h , ( r_list_length ( n -> gnode -> out_nodes ) + 1 ) + R_EDGES_X_INC )"		62423	1					
ANR	62697	Callee	R_MAX		62423	0					
ANR	62698	Identifier	R_MAX		62423	0					
ANR	62699	ArgumentList	n -> h		62423	1					
ANR	62700	Argument	n -> h		62423	0					
ANR	62701	PtrMemberAccess	n -> h		62423	0					
ANR	62702	Identifier	n		62423	0					
ANR	62703	Identifier	h		62423	1					
ANR	62704	Argument	( r_list_length ( n -> gnode -> out_nodes ) + 1 ) + R_EDGES_X_INC		62423	1					
ANR	62705	AdditiveExpression	( r_list_length ( n -> gnode -> out_nodes ) + 1 ) + R_EDGES_X_INC		62423	0		+			
ANR	62706	AdditiveExpression	r_list_length ( n -> gnode -> out_nodes ) + 1		62423	0		+			
ANR	62707	CallExpression	r_list_length ( n -> gnode -> out_nodes )		62423	0					
ANR	62708	Callee	r_list_length		62423	0					
ANR	62709	Identifier	r_list_length		62423	0					
ANR	62710	ArgumentList	n -> gnode -> out_nodes		62423	1					
ANR	62711	Argument	n -> gnode -> out_nodes		62423	0					
ANR	62712	PtrMemberAccess	n -> gnode -> out_nodes		62423	0					
ANR	62713	PtrMemberAccess	n -> gnode		62423	0					
ANR	62714	Identifier	n		62423	0					
ANR	62715	Identifier	gnode		62423	1					
ANR	62716	Identifier	out_nodes		62423	1					
ANR	62717	PrimaryExpression	1		62423	1					
ANR	62718	Identifier	R_EDGES_X_INC		62423	1					
ANR	62719	ExpressionStatement	"n -> h = R_MAX ( n -> h , ( r_list_length ( n -> gnode -> in_nodes ) + 1 ) + R_EDGES_X_INC )"	231:5:5611:5688	62423	1	True				
ANR	62720	AssignmentExpression	"n -> h = R_MAX ( n -> h , ( r_list_length ( n -> gnode -> in_nodes ) + 1 ) + R_EDGES_X_INC )"		62423	0		=			
ANR	62721	PtrMemberAccess	n -> h		62423	0					
ANR	62722	Identifier	n		62423	0					
ANR	62723	Identifier	h		62423	1					
ANR	62724	CallExpression	"R_MAX ( n -> h , ( r_list_length ( n -> gnode -> in_nodes ) + 1 ) + R_EDGES_X_INC )"		62423	1					
ANR	62725	Callee	R_MAX		62423	0					
ANR	62726	Identifier	R_MAX		62423	0					
ANR	62727	ArgumentList	n -> h		62423	1					
ANR	62728	Argument	n -> h		62423	0					
ANR	62729	PtrMemberAccess	n -> h		62423	0					
ANR	62730	Identifier	n		62423	0					
ANR	62731	Identifier	h		62423	1					
ANR	62732	Argument	( r_list_length ( n -> gnode -> in_nodes ) + 1 ) + R_EDGES_X_INC		62423	1					
ANR	62733	AdditiveExpression	( r_list_length ( n -> gnode -> in_nodes ) + 1 ) + R_EDGES_X_INC		62423	0		+			
ANR	62734	AdditiveExpression	r_list_length ( n -> gnode -> in_nodes ) + 1		62423	0		+			
ANR	62735	CallExpression	r_list_length ( n -> gnode -> in_nodes )		62423	0					
ANR	62736	Callee	r_list_length		62423	0					
ANR	62737	Identifier	r_list_length		62423	0					
ANR	62738	ArgumentList	n -> gnode -> in_nodes		62423	1					
ANR	62739	Argument	n -> gnode -> in_nodes		62423	0					
ANR	62740	PtrMemberAccess	n -> gnode -> in_nodes		62423	0					
ANR	62741	PtrMemberAccess	n -> gnode		62423	0					
ANR	62742	Identifier	n		62423	0					
ANR	62743	Identifier	gnode		62423	1					
ANR	62744	Identifier	in_nodes		62423	1					
ANR	62745	PrimaryExpression	1		62423	1					
ANR	62746	Identifier	R_EDGES_X_INC		62423	1					
ANR	62747	ReturnType	static void		62423	1					
ANR	62748	Identifier	update_node_dimension		62423	2					
ANR	62749	ParameterList	"const RGraph * g , int is_mini , int zoom , int edgemode , bool callgraph , int layout"		62423	3					
ANR	62750	Parameter	const RGraph * g	197:34:4479:4493	62423	0	True				
ANR	62751	ParameterType	const RGraph *		62423	0					
ANR	62752	Identifier	g		62423	1					
ANR	62753	Parameter	int is_mini	197:51:4496:4506	62423	1	True				
ANR	62754	ParameterType	int		62423	0					
ANR	62755	Identifier	is_mini		62423	1					
ANR	62756	Parameter	int zoom	197:64:4509:4516	62423	2	True				
ANR	62757	ParameterType	int		62423	0					
ANR	62758	Identifier	zoom		62423	1					
ANR	62759	Parameter	int edgemode	197:74:4519:4530	62423	3	True				
ANR	62760	ParameterType	int		62423	0					
ANR	62761	Identifier	edgemode		62423	1					
ANR	62762	Parameter	bool callgraph	197:88:4533:4546	62423	4	True				
ANR	62763	ParameterType	bool		62423	0					
ANR	62764	Identifier	callgraph		62423	1					
ANR	62765	Parameter	int layout	197:104:4549:4558	62423	5	True				
ANR	62766	ParameterType	int		62423	0					
ANR	62767	Identifier	layout		62423	1					
ANR	62768	CFGEntryNode	ENTRY		62423		True				
ANR	62769	CFGExitNode	EXIT		62423		True				
ANR	62770	Symbol	n -> gnode		62423						
ANR	62771	Symbol	n -> gnode -> out_nodes		62423						
ANR	62772	Symbol	MARGIN_TEXT_X		62423						
ANR	62773	Symbol	* n -> gnode		62423						
ANR	62774	Symbol	r_str_bounds		62423						
ANR	62775	Symbol	strlen		62423						
ANR	62776	Symbol	len		62423						
ANR	62777	Symbol	is_mini		62423						
ANR	62778	Symbol	MININODE_MIN_WIDTH		62423						
ANR	62779	Symbol	INT_MAX		62423						
ANR	62780	Symbol	n -> gnode -> in_nodes		62423						
ANR	62781	Symbol	* * n		62423						
ANR	62782	Symbol	R_EDGES_X_INC		62423						
ANR	62783	Symbol	BORDER_WIDTH		62423						
ANR	62784	Symbol	MIN_NODE_WIDTH		62423						
ANR	62785	Symbol	r_graph_get_nodes		62423						
ANR	62786	Symbol	& n -> h		62423						
ANR	62787	Symbol	callgraph		62423						
ANR	62788	Symbol	n -> h		62423						
ANR	62789	Symbol	g		62423						
ANR	62790	Symbol	gn		62423						
ANR	62791	Symbol	n -> is_mini		62423						
ANR	62792	Symbol	zoom		62423						
ANR	62793	Symbol	edgemode		62423						
ANR	62794	Symbol	it		62423						
ANR	62795	Symbol	n		62423						
ANR	62796	Symbol	layout		62423						
ANR	62797	Symbol	BORDER_HEIGHT		62423						
ANR	62798	Symbol	nodes		62423						
ANR	62799	Symbol	MINIGRAPH_NODE_MIN_WIDTH		62423						
ANR	62800	Symbol	n -> w		62423						
ANR	62801	Symbol	* n		62423						
ANR	62802	Symbol	R_MAX		62423						
ANR	62803	Symbol	n -> title		62423						
ANR	62804	Symbol	n -> body		62423						
ANR	62805	Symbol	r_list_length		62423						
ANR	62806	Symbol	MIN_NODE_HEIGHT		62423						
ANR	62807	Function	append_shortcut	238:0:5711:6136							
ANR	62808	FunctionDef	"append_shortcut (const RAGraph * g , char * title , char * nodetitle , int left)"		62807	0					
ANR	62809	CompoundStatement		238:87:5798:6136	62807	0					
ANR	62810	IdentifierDeclStatement	"char * shortcut = sdb_get ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle ) , 0 ) ;"	239:1:5801:5885	62807	0	True				
ANR	62811	IdentifierDecl	"* shortcut = sdb_get ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle ) , 0 )"		62807	0					
ANR	62812	IdentifierDeclType	char *		62807	0					
ANR	62813	Identifier	shortcut		62807	1					
ANR	62814	AssignmentExpression	"* shortcut = sdb_get ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle ) , 0 )"		62807	2		=			
ANR	62815	Identifier	shortcut		62807	0					
ANR	62816	CallExpression	"sdb_get ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle ) , 0 )"		62807	1					
ANR	62817	Callee	sdb_get		62807	0					
ANR	62818	Identifier	sdb_get		62807	0					
ANR	62819	ArgumentList	g -> db		62807	1					
ANR	62820	Argument	g -> db		62807	0					
ANR	62821	PtrMemberAccess	g -> db		62807	0					
ANR	62822	Identifier	g		62807	0					
ANR	62823	Identifier	db		62807	1					
ANR	62824	Argument	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle )"		62807	1					
ANR	62825	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , nodetitle )"		62807	0					
ANR	62826	Callee	sdb_fmt		62807	0					
ANR	62827	Identifier	sdb_fmt		62807	0					
ANR	62828	ArgumentList	"""agraph.nodes.%s.shortcut"""		62807	1					
ANR	62829	Argument	"""agraph.nodes.%s.shortcut"""		62807	0					
ANR	62830	PrimaryExpression	"""agraph.nodes.%s.shortcut"""		62807	0					
ANR	62831	Argument	nodetitle		62807	1					
ANR	62832	Identifier	nodetitle		62807	0					
ANR	62833	Argument	0		62807	2					
ANR	62834	PrimaryExpression	0		62807	0					
ANR	62835	IfStatement	if ( shortcut )		62807	1					
ANR	62836	Condition	shortcut	240:5:5892:5899	62807	0	True				
ANR	62837	Identifier	shortcut		62807	0					
ANR	62838	CompoundStatement		3:15:103:103	62807	1					
ANR	62839	IfStatement	if ( g -> can -> color )		62807	0					
ANR	62840	Condition	g -> can -> color	241:6:5910:5922	62807	0	True				
ANR	62841	PtrMemberAccess	g -> can -> color		62807	0					
ANR	62842	PtrMemberAccess	g -> can		62807	0					
ANR	62843	Identifier	g		62807	0					
ANR	62844	Identifier	can		62807	1					
ANR	62845	Identifier	color		62807	1					
ANR	62846	CompoundStatement		4:21:126:126	62807	1					
ANR	62847	Statement	strncat	243:3:5968:5974	62807	0	True				
ANR	62848	Statement	(	243:11:5976:5976	62807	1	True				
ANR	62849	Statement	title	243:12:5977:5981	62807	2	True				
ANR	62850	Statement	","	243:17:5982:5982	62807	3	True				
ANR	62851	Statement	sdb_fmt	243:19:5984:5990	62807	4	True				
ANR	62852	Statement	(	243:27:5992:5992	62807	5	True				
ANR	62853	Statement	Color_YELLOW	243:28:5993:6004	62807	6	True				
ANR	62854	Statement	"""[o%s]"""	243:40:6005:6011	62807	7	True				
ANR	62855	Statement	Color_RESET	243:47:6012:6022	62807	8	True				
ANR	62856	Statement	","	243:58:6023:6023	62807	9	True				
ANR	62857	Statement	shortcut	243:61:6026:6033	62807	10	True				
ANR	62858	Statement	)	243:69:6034:6034	62807	11	True				
ANR	62859	Statement	","	243:70:6035:6035	62807	12	True				
ANR	62860	Statement	left	243:72:6037:6040	62807	13	True				
ANR	62861	Statement	)	243:76:6041:6041	62807	14	True				
ANR	62862	ExpressionStatement		243:77:6042:6042	62807	15	True				
ANR	62863	ElseStatement	else		62807	0					
ANR	62864	CompoundStatement		7:9:254:254	62807	0					
ANR	62865	ExpressionStatement	"strncat ( title , sdb_fmt ( ""[o%s]"" , shortcut ) , left )"	245:3:6058:6108	62807	0	True				
ANR	62866	CallExpression	"strncat ( title , sdb_fmt ( ""[o%s]"" , shortcut ) , left )"		62807	0					
ANR	62867	Callee	strncat		62807	0					
ANR	62868	Identifier	strncat		62807	0					
ANR	62869	ArgumentList	title		62807	1					
ANR	62870	Argument	title		62807	0					
ANR	62871	Identifier	title		62807	0					
ANR	62872	Argument	"sdb_fmt ( ""[o%s]"" , shortcut )"		62807	1					
ANR	62873	CallExpression	"sdb_fmt ( ""[o%s]"" , shortcut )"		62807	0					
ANR	62874	Callee	sdb_fmt		62807	0					
ANR	62875	Identifier	sdb_fmt		62807	0					
ANR	62876	ArgumentList	"""[o%s]"""		62807	1					
ANR	62877	Argument	"""[o%s]"""		62807	0					
ANR	62878	PrimaryExpression	"""[o%s]"""		62807	0					
ANR	62879	Argument	shortcut		62807	1					
ANR	62880	Identifier	shortcut		62807	0					
ANR	62881	Argument	left		62807	2					
ANR	62882	Identifier	left		62807	0					
ANR	62883	ExpressionStatement	free ( shortcut )	247:2:6116:6131	62807	1	True				
ANR	62884	CallExpression	free ( shortcut )		62807	0					
ANR	62885	Callee	free		62807	0					
ANR	62886	Identifier	free		62807	0					
ANR	62887	ArgumentList	shortcut		62807	1					
ANR	62888	Argument	shortcut		62807	0					
ANR	62889	Identifier	shortcut		62807	0					
ANR	62890	ReturnType	static void		62807	1					
ANR	62891	Identifier	append_shortcut		62807	2					
ANR	62892	ParameterList	"const RAGraph * g , char * title , char * nodetitle , int left"		62807	3					
ANR	62893	Parameter	const RAGraph * g	238:29:5740:5755	62807	0	True				
ANR	62894	ParameterType	const RAGraph *		62807	0					
ANR	62895	Identifier	g		62807	1					
ANR	62896	Parameter	char * title	238:47:5758:5768	62807	1	True				
ANR	62897	ParameterType	char *		62807	0					
ANR	62898	Identifier	title		62807	1					
ANR	62899	Parameter	char * nodetitle	238:60:5771:5785	62807	2	True				
ANR	62900	ParameterType	char *		62807	0					
ANR	62901	Identifier	nodetitle		62807	1					
ANR	62902	Parameter	int left	238:77:5788:5795	62807	3	True				
ANR	62903	ParameterType	int		62807	0					
ANR	62904	Identifier	left		62807	1					
ANR	62905	CFGEntryNode	ENTRY		62807		True				
ANR	62906	CFGExitNode	EXIT		62807		True				
ANR	62907	Symbol	* * g		62807						
ANR	62908	Symbol	g		62807						
ANR	62909	Symbol	g -> db		62807						
ANR	62910	Symbol	sdb_get		62807						
ANR	62911	Symbol	title		62807						
ANR	62912	Symbol	* g -> can		62807						
ANR	62913	Symbol	nodetitle		62807						
ANR	62914	Symbol	* g		62807						
ANR	62915	Symbol	shortcut		62807						
ANR	62916	Symbol	g -> can -> color		62807						
ANR	62917	Symbol	left		62807						
ANR	62918	Symbol	sdb_fmt		62807						
ANR	62919	Symbol	g -> can		62807						
ANR	62920	Function	mini_RANode_print	251:0:6139:7603							
ANR	62921	FunctionDef	"mini_RANode_print (const RAGraph * g , const RANode * n , int cur , bool details)"		62920	0					
ANR	62922	CompoundStatement		251:88:6227:7603	62920	0					
ANR	62923	IdentifierDeclStatement	char title [ TITLE_LEN ] ;	252:1:6230:6251	62920	0	True				
ANR	62924	IdentifierDecl	title [ TITLE_LEN ]		62920	0					
ANR	62925	IdentifierDeclType	char [ TITLE_LEN ]		62920	0					
ANR	62926	Identifier	title		62920	1					
ANR	62927	Identifier	TITLE_LEN		62920	2					
ANR	62928	IdentifierDeclStatement	"int x , delta_x = 0 ;"	253:1:6254:6272	62920	1	True				
ANR	62929	IdentifierDecl	x		62920	0					
ANR	62930	IdentifierDeclType	int		62920	0					
ANR	62931	Identifier	x		62920	1					
ANR	62932	IdentifierDecl	delta_x = 0		62920	1					
ANR	62933	IdentifierDeclType	int		62920	0					
ANR	62934	Identifier	delta_x		62920	1					
ANR	62935	AssignmentExpression	delta_x = 0		62920	2		=			
ANR	62936	Identifier	delta_x		62920	0					
ANR	62937	PrimaryExpression	0		62920	1					
ANR	62938	IfStatement	"if ( ! G ( n -> x + MINIGRAPH_NODE_CENTER_X , n -> y ) && ! G ( n -> x + MINIGRAPH_NODE_CENTER_X + n -> w , n -> y ) )"		62920	2					
ANR	62939	Condition	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X , n -> y ) && ! G ( n -> x + MINIGRAPH_NODE_CENTER_X + n -> w , n -> y )"	255:5:6280:6377	62920	0	True				
ANR	62940	AndExpression	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X , n -> y ) && ! G ( n -> x + MINIGRAPH_NODE_CENTER_X + n -> w , n -> y )"		62920	0		&&			
ANR	62941	UnaryOperationExpression	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X , n -> y )"		62920	0					
ANR	62942	UnaryOperator	!		62920	0					
ANR	62943	CallExpression	"G ( n -> x + MINIGRAPH_NODE_CENTER_X , n -> y )"		62920	1					
ANR	62944	Callee	G		62920	0					
ANR	62945	Identifier	G		62920	0					
ANR	62946	ArgumentList	n -> x + MINIGRAPH_NODE_CENTER_X		62920	1					
ANR	62947	Argument	n -> x + MINIGRAPH_NODE_CENTER_X		62920	0					
ANR	62948	AdditiveExpression	n -> x + MINIGRAPH_NODE_CENTER_X		62920	0		+			
ANR	62949	PtrMemberAccess	n -> x		62920	0					
ANR	62950	Identifier	n		62920	0					
ANR	62951	Identifier	x		62920	1					
ANR	62952	Identifier	MINIGRAPH_NODE_CENTER_X		62920	1					
ANR	62953	Argument	n -> y		62920	1					
ANR	62954	PtrMemberAccess	n -> y		62920	0					
ANR	62955	Identifier	n		62920	0					
ANR	62956	Identifier	y		62920	1					
ANR	62957	UnaryOperationExpression	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X + n -> w , n -> y )"		62920	1					
ANR	62958	UnaryOperator	!		62920	0					
ANR	62959	CallExpression	"G ( n -> x + MINIGRAPH_NODE_CENTER_X + n -> w , n -> y )"		62920	1					
ANR	62960	Callee	G		62920	0					
ANR	62961	Identifier	G		62920	0					
ANR	62962	ArgumentList	n -> x + MINIGRAPH_NODE_CENTER_X + n -> w		62920	1					
ANR	62963	Argument	n -> x + MINIGRAPH_NODE_CENTER_X + n -> w		62920	0					
ANR	62964	AdditiveExpression	n -> x + MINIGRAPH_NODE_CENTER_X + n -> w		62920	0		+			
ANR	62965	PtrMemberAccess	n -> x		62920	0					
ANR	62966	Identifier	n		62920	0					
ANR	62967	Identifier	x		62920	1					
ANR	62968	AdditiveExpression	MINIGRAPH_NODE_CENTER_X + n -> w		62920	1		+			
ANR	62969	Identifier	MINIGRAPH_NODE_CENTER_X		62920	0					
ANR	62970	PtrMemberAccess	n -> w		62920	1					
ANR	62971	Identifier	n		62920	0					
ANR	62972	Identifier	w		62920	1					
ANR	62973	Argument	n -> y		62920	1					
ANR	62974	PtrMemberAccess	n -> y		62920	0					
ANR	62975	Identifier	n		62920	0					
ANR	62976	Identifier	y		62920	1					
ANR	62977	CompoundStatement		6:55:152:152	62920	1					
ANR	62978	ReturnStatement	return ;	257:2:6384:6390	62920	0	True				
ANR	62979	ExpressionStatement	x = n -> x + MINIGRAPH_NODE_CENTER_X + g -> can -> sx	260:1:6397:6444	62920	3	True				
ANR	62980	AssignmentExpression	x = n -> x + MINIGRAPH_NODE_CENTER_X + g -> can -> sx		62920	0		=			
ANR	62981	Identifier	x		62920	0					
ANR	62982	AdditiveExpression	n -> x + MINIGRAPH_NODE_CENTER_X + g -> can -> sx		62920	1		+			
ANR	62983	PtrMemberAccess	n -> x		62920	0					
ANR	62984	Identifier	n		62920	0					
ANR	62985	Identifier	x		62920	1					
ANR	62986	AdditiveExpression	MINIGRAPH_NODE_CENTER_X + g -> can -> sx		62920	1		+			
ANR	62987	Identifier	MINIGRAPH_NODE_CENTER_X		62920	0					
ANR	62988	PtrMemberAccess	g -> can -> sx		62920	1					
ANR	62989	PtrMemberAccess	g -> can		62920	0					
ANR	62990	Identifier	g		62920	0					
ANR	62991	Identifier	can		62920	1					
ANR	62992	Identifier	sx		62920	1					
ANR	62993	IfStatement	if ( x < 0 )		62920	4					
ANR	62994	Condition	x < 0	261:5:6451:6455	62920	0	True				
ANR	62995	RelationalExpression	x < 0		62920	0		<			
ANR	62996	Identifier	x		62920	0					
ANR	62997	PrimaryExpression	0		62920	1					
ANR	62998	CompoundStatement		11:12:230:230	62920	1					
ANR	62999	ExpressionStatement	delta_x = - x	262:2:6462:6474	62920	0	True				
ANR	63000	AssignmentExpression	delta_x = - x		62920	0		=			
ANR	63001	Identifier	delta_x		62920	0					
ANR	63002	UnaryOperationExpression	- x		62920	1					
ANR	63003	UnaryOperator	-		62920	0					
ANR	63004	Identifier	x		62920	1					
ANR	63005	IfStatement	"if ( ! G ( n -> x + MINIGRAPH_NODE_CENTER_X + delta_x , n -> y ) )"		62920	5					
ANR	63006	Condition	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X + delta_x , n -> y )"	264:5:6484:6534	62920	0	True				
ANR	63007	UnaryOperationExpression	"! G ( n -> x + MINIGRAPH_NODE_CENTER_X + delta_x , n -> y )"		62920	0					
ANR	63008	UnaryOperator	!		62920	0					
ANR	63009	CallExpression	"G ( n -> x + MINIGRAPH_NODE_CENTER_X + delta_x , n -> y )"		62920	1					
ANR	63010	Callee	G		62920	0					
ANR	63011	Identifier	G		62920	0					
ANR	63012	ArgumentList	n -> x + MINIGRAPH_NODE_CENTER_X + delta_x		62920	1					
ANR	63013	Argument	n -> x + MINIGRAPH_NODE_CENTER_X + delta_x		62920	0					
ANR	63014	AdditiveExpression	n -> x + MINIGRAPH_NODE_CENTER_X + delta_x		62920	0		+			
ANR	63015	PtrMemberAccess	n -> x		62920	0					
ANR	63016	Identifier	n		62920	0					
ANR	63017	Identifier	x		62920	1					
ANR	63018	AdditiveExpression	MINIGRAPH_NODE_CENTER_X + delta_x		62920	1		+			
ANR	63019	Identifier	MINIGRAPH_NODE_CENTER_X		62920	0					
ANR	63020	Identifier	delta_x		62920	1					
ANR	63021	Argument	n -> y		62920	1					
ANR	63022	PtrMemberAccess	n -> y		62920	0					
ANR	63023	Identifier	n		62920	0					
ANR	63024	Identifier	y		62920	1					
ANR	63025	CompoundStatement		14:58:309:309	62920	1					
ANR	63026	ReturnStatement	return ;	265:2:6541:6547	62920	0	True				
ANR	63027	IfStatement	if ( details )		62920	6					
ANR	63028	Condition	details	268:5:6558:6564	62920	0	True				
ANR	63029	Identifier	details		62920	0					
ANR	63030	CompoundStatement		18:14:339:339	62920	1					
ANR	63031	IfStatement	if ( cur )		62920	0					
ANR	63032	Condition	cur	269:6:6575:6577	62920	0	True				
ANR	63033	Identifier	cur		62920	0					
ANR	63034	CompoundStatement		19:11:352:352	62920	1					
ANR	63035	ExpressionStatement	W ( & MINIGRAPH_NODE_TEXT_CUR [ delta_x ] )	270:3:6585:6622	62920	0	True				
ANR	63036	CallExpression	W ( & MINIGRAPH_NODE_TEXT_CUR [ delta_x ] )		62920	0					
ANR	63037	Callee	W		62920	0					
ANR	63038	Identifier	W		62920	0					
ANR	63039	ArgumentList	& MINIGRAPH_NODE_TEXT_CUR [ delta_x ]		62920	1					
ANR	63040	Argument	& MINIGRAPH_NODE_TEXT_CUR [ delta_x ]		62920	0					
ANR	63041	UnaryOperationExpression	& MINIGRAPH_NODE_TEXT_CUR [ delta_x ]		62920	0					
ANR	63042	UnaryOperator	&		62920	0					
ANR	63043	ArrayIndexing	MINIGRAPH_NODE_TEXT_CUR [ delta_x ]		62920	1					
ANR	63044	Identifier	MINIGRAPH_NODE_TEXT_CUR		62920	0					
ANR	63045	Identifier	delta_x		62920	1					
ANR	63046	ExpressionStatement	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 2 )"	271:3:6627:6666	62920	1	True				
ANR	63047	CastExpression	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 2 )"		62920	0					
ANR	63048	CastTarget	void		62920	0					
ANR	63049	CallExpression	"G ( - g -> can -> sx , - g -> can -> sy + 2 )"		62920	1					
ANR	63050	Callee	G		62920	0					
ANR	63051	Identifier	G		62920	0					
ANR	63052	ArgumentList	- g -> can -> sx		62920	1					
ANR	63053	Argument	- g -> can -> sx		62920	0					
ANR	63054	UnaryOperationExpression	- g -> can -> sx		62920	0					
ANR	63055	UnaryOperator	-		62920	0					
ANR	63056	PtrMemberAccess	g -> can -> sx		62920	1					
ANR	63057	PtrMemberAccess	g -> can		62920	0					
ANR	63058	Identifier	g		62920	0					
ANR	63059	Identifier	can		62920	1					
ANR	63060	Identifier	sx		62920	1					
ANR	63061	Argument	- g -> can -> sy + 2		62920	1					
ANR	63062	AdditiveExpression	- g -> can -> sy + 2		62920	0		+			
ANR	63063	UnaryOperationExpression	- g -> can -> sy		62920	0					
ANR	63064	UnaryOperator	-		62920	0					
ANR	63065	PtrMemberAccess	g -> can -> sy		62920	1					
ANR	63066	PtrMemberAccess	g -> can		62920	0					
ANR	63067	Identifier	g		62920	0					
ANR	63068	Identifier	can		62920	1					
ANR	63069	Identifier	sy		62920	1					
ANR	63070	PrimaryExpression	2		62920	1					
ANR	63071	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , ""[ %s ]"" , n -> title )"	272:3:6671:6731	62920	2	True				
ANR	63072	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , ""[ %s ]"" , n -> title )"		62920	0					
ANR	63073	Callee	snprintf		62920	0					
ANR	63074	Identifier	snprintf		62920	0					
ANR	63075	ArgumentList	title		62920	1					
ANR	63076	Argument	title		62920	0					
ANR	63077	Identifier	title		62920	0					
ANR	63078	Argument	sizeof ( title ) - 1		62920	1					
ANR	63079	AdditiveExpression	sizeof ( title ) - 1		62920	0		-			
ANR	63080	SizeofExpression	sizeof ( title )		62920	0					
ANR	63081	Sizeof	sizeof		62920	0					
ANR	63082	SizeofOperand	title		62920	1					
ANR	63083	PrimaryExpression	1		62920	1					
ANR	63084	Argument	"""[ %s ]"""		62920	2					
ANR	63085	PrimaryExpression	"""[ %s ]"""		62920	0					
ANR	63086	Argument	n -> title		62920	3					
ANR	63087	PtrMemberAccess	n -> title		62920	0					
ANR	63088	Identifier	n		62920	0					
ANR	63089	Identifier	title		62920	1					
ANR	63090	ExpressionStatement	W ( title )	274:3:6736:6745	62920	3	True				
ANR	63091	CallExpression	W ( title )		62920	0					
ANR	63092	Callee	W		62920	0					
ANR	63093	Identifier	W		62920	0					
ANR	63094	ArgumentList	title		62920	1					
ANR	63095	Argument	title		62920	0					
ANR	63096	Identifier	title		62920	0					
ANR	63097	IfStatement	if ( discroll > 0 )		62920	4					
ANR	63098	Condition	discroll > 0	275:7:6754:6765	62920	0	True				
ANR	63099	RelationalExpression	discroll > 0		62920	0		>			
ANR	63100	Identifier	discroll		62920	0					
ANR	63101	PrimaryExpression	0		62920	1					
ANR	63102	CompoundStatement		26:4:546:605	62920	1					
ANR	63103	IdentifierDeclStatement	"char * body = r_str_ansi_crop ( n -> body , 0 , discroll , - 1 , - 1 ) ;"	276:4:6774:6833	62920	0	True				
ANR	63104	IdentifierDecl	"* body = r_str_ansi_crop ( n -> body , 0 , discroll , - 1 , - 1 )"		62920	0					
ANR	63105	IdentifierDeclType	char *		62920	0					
ANR	63106	Identifier	body		62920	1					
ANR	63107	AssignmentExpression	"* body = r_str_ansi_crop ( n -> body , 0 , discroll , - 1 , - 1 )"		62920	2		=			
ANR	63108	Identifier	body		62920	0					
ANR	63109	CallExpression	"r_str_ansi_crop ( n -> body , 0 , discroll , - 1 , - 1 )"		62920	1					
ANR	63110	Callee	r_str_ansi_crop		62920	0					
ANR	63111	Identifier	r_str_ansi_crop		62920	0					
ANR	63112	ArgumentList	n -> body		62920	1					
ANR	63113	Argument	n -> body		62920	0					
ANR	63114	PtrMemberAccess	n -> body		62920	0					
ANR	63115	Identifier	n		62920	0					
ANR	63116	Identifier	body		62920	1					
ANR	63117	Argument	0		62920	1					
ANR	63118	PrimaryExpression	0		62920	0					
ANR	63119	Argument	discroll		62920	2					
ANR	63120	Identifier	discroll		62920	0					
ANR	63121	Argument	- 1		62920	3					
ANR	63122	UnaryOperationExpression	- 1		62920	0					
ANR	63123	UnaryOperator	-		62920	0					
ANR	63124	PrimaryExpression	1		62920	1					
ANR	63125	Argument	- 1		62920	4					
ANR	63126	UnaryOperationExpression	- 1		62920	0					
ANR	63127	UnaryOperator	-		62920	0					
ANR	63128	PrimaryExpression	1		62920	1					
ANR	63129	ExpressionStatement	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 3 )"	277:4:6839:6878	62920	1	True				
ANR	63130	CastExpression	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 3 )"		62920	0					
ANR	63131	CastTarget	void		62920	0					
ANR	63132	CallExpression	"G ( - g -> can -> sx , - g -> can -> sy + 3 )"		62920	1					
ANR	63133	Callee	G		62920	0					
ANR	63134	Identifier	G		62920	0					
ANR	63135	ArgumentList	- g -> can -> sx		62920	1					
ANR	63136	Argument	- g -> can -> sx		62920	0					
ANR	63137	UnaryOperationExpression	- g -> can -> sx		62920	0					
ANR	63138	UnaryOperator	-		62920	0					
ANR	63139	PtrMemberAccess	g -> can -> sx		62920	1					
ANR	63140	PtrMemberAccess	g -> can		62920	0					
ANR	63141	Identifier	g		62920	0					
ANR	63142	Identifier	can		62920	1					
ANR	63143	Identifier	sx		62920	1					
ANR	63144	Argument	- g -> can -> sy + 3		62920	1					
ANR	63145	AdditiveExpression	- g -> can -> sy + 3		62920	0		+			
ANR	63146	UnaryOperationExpression	- g -> can -> sy		62920	0					
ANR	63147	UnaryOperator	-		62920	0					
ANR	63148	PtrMemberAccess	g -> can -> sy		62920	1					
ANR	63149	PtrMemberAccess	g -> can		62920	0					
ANR	63150	Identifier	g		62920	0					
ANR	63151	Identifier	can		62920	1					
ANR	63152	Identifier	sy		62920	1					
ANR	63153	PrimaryExpression	3		62920	1					
ANR	63154	ExpressionStatement	W ( body )	278:4:6884:6892	62920	2	True				
ANR	63155	CallExpression	W ( body )		62920	0					
ANR	63156	Callee	W		62920	0					
ANR	63157	Identifier	W		62920	0					
ANR	63158	ArgumentList	body		62920	1					
ANR	63159	Argument	body		62920	0					
ANR	63160	Identifier	body		62920	0					
ANR	63161	ExpressionStatement	free ( body )	279:4:6898:6909	62920	3	True				
ANR	63162	CallExpression	free ( body )		62920	0					
ANR	63163	Callee	free		62920	0					
ANR	63164	Identifier	free		62920	0					
ANR	63165	ArgumentList	body		62920	1					
ANR	63166	Argument	body		62920	0					
ANR	63167	Identifier	body		62920	0					
ANR	63168	ElseStatement	else		62920	0					
ANR	63169	CompoundStatement		30:10:693:693	62920	0					
ANR	63170	ExpressionStatement	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 3 )"	281:4:6927:6966	62920	0	True				
ANR	63171	CastExpression	"( void ) G ( - g -> can -> sx , - g -> can -> sy + 3 )"		62920	0					
ANR	63172	CastTarget	void		62920	0					
ANR	63173	CallExpression	"G ( - g -> can -> sx , - g -> can -> sy + 3 )"		62920	1					
ANR	63174	Callee	G		62920	0					
ANR	63175	Identifier	G		62920	0					
ANR	63176	ArgumentList	- g -> can -> sx		62920	1					
ANR	63177	Argument	- g -> can -> sx		62920	0					
ANR	63178	UnaryOperationExpression	- g -> can -> sx		62920	0					
ANR	63179	UnaryOperator	-		62920	0					
ANR	63180	PtrMemberAccess	g -> can -> sx		62920	1					
ANR	63181	PtrMemberAccess	g -> can		62920	0					
ANR	63182	Identifier	g		62920	0					
ANR	63183	Identifier	can		62920	1					
ANR	63184	Identifier	sx		62920	1					
ANR	63185	Argument	- g -> can -> sy + 3		62920	1					
ANR	63186	AdditiveExpression	- g -> can -> sy + 3		62920	0		+			
ANR	63187	UnaryOperationExpression	- g -> can -> sy		62920	0					
ANR	63188	UnaryOperator	-		62920	0					
ANR	63189	PtrMemberAccess	g -> can -> sy		62920	1					
ANR	63190	PtrMemberAccess	g -> can		62920	0					
ANR	63191	Identifier	g		62920	0					
ANR	63192	Identifier	can		62920	1					
ANR	63193	Identifier	sy		62920	1					
ANR	63194	PrimaryExpression	3		62920	1					
ANR	63195	ExpressionStatement	W ( n -> body )	282:4:6972:6983	62920	1	True				
ANR	63196	CallExpression	W ( n -> body )		62920	0					
ANR	63197	Callee	W		62920	0					
ANR	63198	Identifier	W		62920	0					
ANR	63199	ArgumentList	n -> body		62920	1					
ANR	63200	Argument	n -> body		62920	0					
ANR	63201	PtrMemberAccess	n -> body		62920	0					
ANR	63202	Identifier	n		62920	0					
ANR	63203	Identifier	body		62920	1					
ANR	63204	ElseStatement	else		62920	0					
ANR	63205	CompoundStatement		35:3:776:794	62920	0					
ANR	63206	IdentifierDeclStatement	"char * str = ""____"" ;"	285:3:7004:7022	62920	0	True				
ANR	63207	IdentifierDecl	"* str = ""____"""		62920	0					
ANR	63208	IdentifierDeclType	char *		62920	0					
ANR	63209	Identifier	str		62920	1					
ANR	63210	AssignmentExpression	"* str = ""____"""		62920	2		=			
ANR	63211	Identifier	str		62920	0					
ANR	63212	PrimaryExpression	"""____"""		62920	1					
ANR	63213	IfStatement	if ( n -> title )		62920	1					
ANR	63214	Condition	n -> title	286:7:7031:7038	62920	0	True				
ANR	63215	PtrMemberAccess	n -> title		62920	0					
ANR	63216	Identifier	n		62920	0					
ANR	63217	Identifier	title		62920	1					
ANR	63218	CompoundStatement		37:4:819:844	62920	1					
ANR	63219	IdentifierDeclStatement	int l = strlen ( n -> title ) ;	287:4:7047:7072	62920	0	True				
ANR	63220	IdentifierDecl	l = strlen ( n -> title )		62920	0					
ANR	63221	IdentifierDeclType	int		62920	0					
ANR	63222	Identifier	l		62920	1					
ANR	63223	AssignmentExpression	l = strlen ( n -> title )		62920	2		=			
ANR	63224	Identifier	l		62920	0					
ANR	63225	CallExpression	strlen ( n -> title )		62920	1					
ANR	63226	Callee	strlen		62920	0					
ANR	63227	Identifier	strlen		62920	0					
ANR	63228	ArgumentList	n -> title		62920	1					
ANR	63229	Argument	n -> title		62920	0					
ANR	63230	PtrMemberAccess	n -> title		62920	0					
ANR	63231	Identifier	n		62920	0					
ANR	63232	Identifier	title		62920	1					
ANR	63233	ExpressionStatement	str = n -> title	288:4:7078:7092	62920	1	True				
ANR	63234	AssignmentExpression	str = n -> title		62920	0		=			
ANR	63235	Identifier	str		62920	0					
ANR	63236	PtrMemberAccess	n -> title		62920	1					
ANR	63237	Identifier	n		62920	0					
ANR	63238	Identifier	title		62920	1					
ANR	63239	IfStatement	if ( l > MINIGRAPH_NODE_TITLE_LEN )		62920	2					
ANR	63240	Condition	l > MINIGRAPH_NODE_TITLE_LEN	289:8:7102:7129	62920	0	True				
ANR	63241	RelationalExpression	l > MINIGRAPH_NODE_TITLE_LEN		62920	0		>			
ANR	63242	Identifier	l		62920	0					
ANR	63243	Identifier	MINIGRAPH_NODE_TITLE_LEN		62920	1					
ANR	63244	CompoundStatement		39:38:904:904	62920	1					
ANR	63245	ExpressionStatement	str += l - MINIGRAPH_NODE_TITLE_LEN	290:5:7139:7174	62920	0	True				
ANR	63246	AssignmentExpression	str += l - MINIGRAPH_NODE_TITLE_LEN		62920	0		+=			
ANR	63247	Identifier	str		62920	0					
ANR	63248	AdditiveExpression	l - MINIGRAPH_NODE_TITLE_LEN		62920	1		-			
ANR	63249	Identifier	l		62920	0					
ANR	63250	Identifier	MINIGRAPH_NODE_TITLE_LEN		62920	1					
ANR	63251	IfStatement	if ( g -> can -> color )		62920	2					
ANR	63252	Condition	g -> can -> color	293:7:7194:7206	62920	0	True				
ANR	63253	PtrMemberAccess	g -> can -> color		62920	0					
ANR	63254	PtrMemberAccess	g -> can		62920	0					
ANR	63255	Identifier	g		62920	0					
ANR	63256	Identifier	can		62920	1					
ANR	63257	Identifier	color		62920	1					
ANR	63258	CompoundStatement		43:22:981:981	62920	1					
ANR	63259	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , ""%s__%s__"" , Color_RESET , str )"	294:4:7215:7281	62920	0	True				
ANR	63260	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , ""%s__%s__"" , Color_RESET , str )"		62920	0					
ANR	63261	Callee	snprintf		62920	0					
ANR	63262	Identifier	snprintf		62920	0					
ANR	63263	ArgumentList	title		62920	1					
ANR	63264	Argument	title		62920	0					
ANR	63265	Identifier	title		62920	0					
ANR	63266	Argument	sizeof ( title ) - 1		62920	1					
ANR	63267	AdditiveExpression	sizeof ( title ) - 1		62920	0		-			
ANR	63268	SizeofExpression	sizeof ( title )		62920	0					
ANR	63269	Sizeof	sizeof		62920	0					
ANR	63270	SizeofOperand	title		62920	1					
ANR	63271	PrimaryExpression	1		62920	1					
ANR	63272	Argument	"""%s__%s__"""		62920	2					
ANR	63273	PrimaryExpression	"""%s__%s__"""		62920	0					
ANR	63274	Argument	Color_RESET		62920	3					
ANR	63275	Identifier	Color_RESET		62920	0					
ANR	63276	Argument	str		62920	4					
ANR	63277	Identifier	str		62920	0					
ANR	63278	ElseStatement	else		62920	0					
ANR	63279	CompoundStatement		45:10:1065:1065	62920	0					
ANR	63280	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , ""__%s__"" , str )"	296:4:7299:7350	62920	0	True				
ANR	63281	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , ""__%s__"" , str )"		62920	0					
ANR	63282	Callee	snprintf		62920	0					
ANR	63283	Identifier	snprintf		62920	0					
ANR	63284	ArgumentList	title		62920	1					
ANR	63285	Argument	title		62920	0					
ANR	63286	Identifier	title		62920	0					
ANR	63287	Argument	sizeof ( title ) - 1		62920	1					
ANR	63288	AdditiveExpression	sizeof ( title ) - 1		62920	0		-			
ANR	63289	SizeofExpression	sizeof ( title )		62920	0					
ANR	63290	Sizeof	sizeof		62920	0					
ANR	63291	SizeofOperand	title		62920	1					
ANR	63292	PrimaryExpression	1		62920	1					
ANR	63293	Argument	"""__%s__"""		62920	2					
ANR	63294	PrimaryExpression	"""__%s__"""		62920	0					
ANR	63295	Argument	str		62920	3					
ANR	63296	Identifier	str		62920	0					
ANR	63297	ExpressionStatement	"append_shortcut ( g , title , n -> title , sizeof ( title ) - strlen ( title ) - 1 )"	298:3:7360:7433	62920	3	True				
ANR	63298	CallExpression	"append_shortcut ( g , title , n -> title , sizeof ( title ) - strlen ( title ) - 1 )"		62920	0					
ANR	63299	Callee	append_shortcut		62920	0					
ANR	63300	Identifier	append_shortcut		62920	0					
ANR	63301	ArgumentList	g		62920	1					
ANR	63302	Argument	g		62920	0					
ANR	63303	Identifier	g		62920	0					
ANR	63304	Argument	title		62920	1					
ANR	63305	Identifier	title		62920	0					
ANR	63306	Argument	n -> title		62920	2					
ANR	63307	PtrMemberAccess	n -> title		62920	0					
ANR	63308	Identifier	n		62920	0					
ANR	63309	Identifier	title		62920	1					
ANR	63310	Argument	sizeof ( title ) - strlen ( title ) - 1		62920	3					
ANR	63311	AdditiveExpression	sizeof ( title ) - strlen ( title ) - 1		62920	0		-			
ANR	63312	SizeofExpression	sizeof ( title )		62920	0					
ANR	63313	Sizeof	sizeof		62920	0					
ANR	63314	SizeofOperand	title		62920	1					
ANR	63315	AdditiveExpression	strlen ( title ) - 1		62920	1		-			
ANR	63316	CallExpression	strlen ( title )		62920	0					
ANR	63317	Callee	strlen		62920	0					
ANR	63318	Identifier	strlen		62920	0					
ANR	63319	ArgumentList	title		62920	1					
ANR	63320	Argument	title		62920	0					
ANR	63321	Identifier	title		62920	0					
ANR	63322	PrimaryExpression	1		62920	1					
ANR	63323	ExpressionStatement	"W ( r_str_ansi_crop ( title , delta_x , 0 , 20 , 1 ) )"	299:3:7438:7484	62920	4	True				
ANR	63324	CallExpression	"W ( r_str_ansi_crop ( title , delta_x , 0 , 20 , 1 ) )"		62920	0					
ANR	63325	Callee	W		62920	0					
ANR	63326	Identifier	W		62920	0					
ANR	63327	ArgumentList	"r_str_ansi_crop ( title , delta_x , 0 , 20 , 1 )"		62920	1					
ANR	63328	Argument	"r_str_ansi_crop ( title , delta_x , 0 , 20 , 1 )"		62920	0					
ANR	63329	CallExpression	"r_str_ansi_crop ( title , delta_x , 0 , 20 , 1 )"		62920	0					
ANR	63330	Callee	r_str_ansi_crop		62920	0					
ANR	63331	Identifier	r_str_ansi_crop		62920	0					
ANR	63332	ArgumentList	title		62920	1					
ANR	63333	Argument	title		62920	0					
ANR	63334	Identifier	title		62920	0					
ANR	63335	Argument	delta_x		62920	1					
ANR	63336	Identifier	delta_x		62920	0					
ANR	63337	Argument	0		62920	2					
ANR	63338	PrimaryExpression	0		62920	0					
ANR	63339	Argument	20		62920	3					
ANR	63340	PrimaryExpression	20		62920	0					
ANR	63341	Argument	1		62920	4					
ANR	63342	PrimaryExpression	1		62920	0					
ANR	63343	ElseStatement	else		62920	0					
ANR	63344	CompoundStatement		51:8:1270:1270	62920	0					
ANR	63345	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , cur ? ""[ %s ]"" : ""  %s  "" , n -> title )"	302:2:7502:7576	62920	0	True				
ANR	63346	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , cur ? ""[ %s ]"" : ""  %s  "" , n -> title )"		62920	0					
ANR	63347	Callee	snprintf		62920	0					
ANR	63348	Identifier	snprintf		62920	0					
ANR	63349	ArgumentList	title		62920	1					
ANR	63350	Argument	title		62920	0					
ANR	63351	Identifier	title		62920	0					
ANR	63352	Argument	sizeof ( title ) - 1		62920	1					
ANR	63353	AdditiveExpression	sizeof ( title ) - 1		62920	0		-			
ANR	63354	SizeofExpression	sizeof ( title )		62920	0					
ANR	63355	Sizeof	sizeof		62920	0					
ANR	63356	SizeofOperand	title		62920	1					
ANR	63357	PrimaryExpression	1		62920	1					
ANR	63358	Argument	"cur ? ""[ %s ]"" : ""  %s  """		62920	2					
ANR	63359	ConditionalExpression	"cur ? ""[ %s ]"" : ""  %s  """		62920	0					
ANR	63360	Condition	cur		62920	0					
ANR	63361	Identifier	cur		62920	0					
ANR	63362	PrimaryExpression	"""[ %s ]"""		62920	1					
ANR	63363	PrimaryExpression	"""  %s  """		62920	2					
ANR	63364	Argument	n -> title		62920	3					
ANR	63365	PtrMemberAccess	n -> title		62920	0					
ANR	63366	Identifier	n		62920	0					
ANR	63367	Identifier	title		62920	1					
ANR	63368	ExpressionStatement	W ( title )	304:2:7580:7589	62920	1	True				
ANR	63369	CallExpression	W ( title )		62920	0					
ANR	63370	Callee	W		62920	0					
ANR	63371	Identifier	W		62920	0					
ANR	63372	ArgumentList	title		62920	1					
ANR	63373	Argument	title		62920	0					
ANR	63374	Identifier	title		62920	0					
ANR	63375	ReturnStatement	return ;	306:1:7595:7601	62920	7	True				
ANR	63376	ReturnType	static void		62920	1					
ANR	63377	Identifier	mini_RANode_print		62920	2					
ANR	63378	ParameterList	"const RAGraph * g , const RANode * n , int cur , bool details"		62920	3					
ANR	63379	Parameter	const RAGraph * g	251:30:6169:6184	62920	0	True				
ANR	63380	ParameterType	const RAGraph *		62920	0					
ANR	63381	Identifier	g		62920	1					
ANR	63382	Parameter	const RANode * n	251:48:6187:6201	62920	1	True				
ANR	63383	ParameterType	const RANode *		62920	0					
ANR	63384	Identifier	n		62920	1					
ANR	63385	Parameter	int cur	251:65:6204:6210	62920	2	True				
ANR	63386	ParameterType	int		62920	0					
ANR	63387	Identifier	cur		62920	1					
ANR	63388	Parameter	bool details	251:74:6213:6224	62920	3	True				
ANR	63389	ParameterType	bool		62920	0					
ANR	63390	Identifier	details		62920	1					
ANR	63391	CFGEntryNode	ENTRY		62920		True				
ANR	63392	CFGExitNode	EXIT		62920		True				
ANR	63393	Symbol	cur		62920						
ANR	63394	Symbol	delta_x		62920						
ANR	63395	Symbol	MINIGRAPH_NODE_TITLE_LEN		62920						
ANR	63396	Symbol	G		62920						
ANR	63397	Symbol	Color_RESET		62920						
ANR	63398	Symbol	MINIGRAPH_NODE_CENTER_X		62920						
ANR	63399	Symbol	title		62920						
ANR	63400	Symbol	body		62920						
ANR	63401	Symbol	* g -> can		62920						
ANR	63402	Symbol	strlen		62920						
ANR	63403	Symbol	g -> can -> color		62920						
ANR	63404	Symbol	r_str_ansi_crop		62920						
ANR	63405	Symbol	details		62920						
ANR	63406	Symbol	discroll		62920						
ANR	63407	Symbol	g -> can -> sx		62920						
ANR	63408	Symbol	g -> can		62920						
ANR	63409	Symbol	g -> can -> sy		62920						
ANR	63410	Symbol	* * g		62920						
ANR	63411	Symbol	g		62920						
ANR	63412	Symbol	l		62920						
ANR	63413	Symbol	n		62920						
ANR	63414	Symbol	str		62920						
ANR	63415	Symbol	n -> y		62920						
ANR	63416	Symbol	* g		62920						
ANR	63417	Symbol	n -> x		62920						
ANR	63418	Symbol	n -> w		62920						
ANR	63419	Symbol	x		62920						
ANR	63420	Symbol	* n		62920						
ANR	63421	Symbol	n -> title		62920						
ANR	63422	Symbol	MINIGRAPH_NODE_TEXT_CUR		62920						
ANR	63423	Symbol	n -> body		62920						
ANR	63424	Function	tiny_RANode_print	309:0:7606:7837							
ANR	63425	FunctionDef	"tiny_RANode_print (const RAGraph * g , const RANode * n , int cur)"		63424	0					
ANR	63426	CompoundStatement		309:74:7680:7837	63424	0					
ANR	63427	ExpressionStatement	"G ( n -> x , n -> y )"	310:1:7683:7697	63424	0	True				
ANR	63428	CallExpression	"G ( n -> x , n -> y )"		63424	0					
ANR	63429	Callee	G		63424	0					
ANR	63430	Identifier	G		63424	0					
ANR	63431	ArgumentList	n -> x		63424	1					
ANR	63432	Argument	n -> x		63424	0					
ANR	63433	PtrMemberAccess	n -> x		63424	0					
ANR	63434	Identifier	n		63424	0					
ANR	63435	Identifier	x		63424	1					
ANR	63436	Argument	n -> y		63424	1					
ANR	63437	PtrMemberAccess	n -> y		63424	0					
ANR	63438	Identifier	n		63424	0					
ANR	63439	Identifier	y		63424	1					
ANR	63440	IdentifierDeclStatement	RCons * cons = r_cons_singleton ( ) ;	311:1:7700:7733	63424	1	True				
ANR	63441	IdentifierDecl	* cons = r_cons_singleton ( )		63424	0					
ANR	63442	IdentifierDeclType	RCons *		63424	0					
ANR	63443	Identifier	cons		63424	1					
ANR	63444	AssignmentExpression	* cons = r_cons_singleton ( )		63424	2		=			
ANR	63445	Identifier	cons		63424	0					
ANR	63446	CallExpression	r_cons_singleton ( )		63424	1					
ANR	63447	Callee	r_cons_singleton		63424	0					
ANR	63448	Identifier	r_cons_singleton		63424	0					
ANR	63449	ArgumentList			63424	1					
ANR	63450	IdentifierDeclStatement	"char * circle = cons -> use_utf8 ? UTF_CIRCLE : ""()"" ;"	312:1:7736:7784	63424	2	True				
ANR	63451	IdentifierDecl	"* circle = cons -> use_utf8 ? UTF_CIRCLE : ""()"""		63424	0					
ANR	63452	IdentifierDeclType	char *		63424	0					
ANR	63453	Identifier	circle		63424	1					
ANR	63454	AssignmentExpression	"* circle = cons -> use_utf8 ? UTF_CIRCLE : ""()"""		63424	2		=			
ANR	63455	Identifier	circle		63424	0					
ANR	63456	ConditionalExpression	"cons -> use_utf8 ? UTF_CIRCLE : ""()"""		63424	1					
ANR	63457	Condition	cons -> use_utf8		63424	0					
ANR	63458	PtrMemberAccess	cons -> use_utf8		63424	0					
ANR	63459	Identifier	cons		63424	0					
ANR	63460	Identifier	use_utf8		63424	1					
ANR	63461	Identifier	UTF_CIRCLE		63424	1					
ANR	63462	PrimaryExpression	"""()"""		63424	2					
ANR	63463	IfStatement	if ( cur )		63424	3					
ANR	63464	Condition	cur	313:5:7791:7793	63424	0	True				
ANR	63465	Identifier	cur		63424	0					
ANR	63466	CompoundStatement		5:10:115:115	63424	1					
ANR	63467	ExpressionStatement	"W ( ""##"" )"	314:2:7800:7808	63424	0	True				
ANR	63468	CallExpression	"W ( ""##"" )"		63424	0					
ANR	63469	Callee	W		63424	0					
ANR	63470	Identifier	W		63424	0					
ANR	63471	ArgumentList	"""##"""		63424	1					
ANR	63472	Argument	"""##"""		63424	0					
ANR	63473	PrimaryExpression	"""##"""		63424	0					
ANR	63474	ElseStatement	else		63424	0					
ANR	63475	CompoundStatement		7:8:137:137	63424	0					
ANR	63476	ExpressionStatement	W ( circle )	316:2:7822:7832	63424	0	True				
ANR	63477	CallExpression	W ( circle )		63424	0					
ANR	63478	Callee	W		63424	0					
ANR	63479	Identifier	W		63424	0					
ANR	63480	ArgumentList	circle		63424	1					
ANR	63481	Argument	circle		63424	0					
ANR	63482	Identifier	circle		63424	0					
ANR	63483	ReturnType	static void		63424	1					
ANR	63484	Identifier	tiny_RANode_print		63424	2					
ANR	63485	ParameterList	"const RAGraph * g , const RANode * n , int cur"		63424	3					
ANR	63486	Parameter	const RAGraph * g	309:30:7636:7651	63424	0	True				
ANR	63487	ParameterType	const RAGraph *		63424	0					
ANR	63488	Identifier	g		63424	1					
ANR	63489	Parameter	const RANode * n	309:48:7654:7668	63424	1	True				
ANR	63490	ParameterType	const RANode *		63424	0					
ANR	63491	Identifier	n		63424	1					
ANR	63492	Parameter	int cur	309:65:7671:7677	63424	2	True				
ANR	63493	ParameterType	int		63424	0					
ANR	63494	Identifier	cur		63424	1					
ANR	63495	CFGEntryNode	ENTRY		63424		True				
ANR	63496	CFGExitNode	EXIT		63424		True				
ANR	63497	Symbol	UTF_CIRCLE		63424						
ANR	63498	Symbol	cur		63424						
ANR	63499	Symbol	n -> y		63424						
ANR	63500	Symbol	n -> x		63424						
ANR	63501	Symbol	g		63424						
ANR	63502	Symbol	* n		63424						
ANR	63503	Symbol	r_cons_singleton		63424						
ANR	63504	Symbol	* cons		63424						
ANR	63505	Symbol	circle		63424						
ANR	63506	Symbol	cons -> use_utf8		63424						
ANR	63507	Symbol	n		63424						
ANR	63508	Symbol	cons		63424						
ANR	63509	Function	get_node_color	320:0:7840:8337							
ANR	63510	FunctionDef	"get_node_color (int color , int cur)"		63509	0					
ANR	63511	CompoundStatement		320:49:7889:8337	63509	0					
ANR	63512	IdentifierDeclStatement	RCons * cons = r_cons_singleton ( ) ;	321:8:7899:7932	63509	0	True				
ANR	63513	IdentifierDecl	* cons = r_cons_singleton ( )		63509	0					
ANR	63514	IdentifierDeclType	RCons *		63509	0					
ANR	63515	Identifier	cons		63509	1					
ANR	63516	AssignmentExpression	* cons = r_cons_singleton ( )		63509	2		=			
ANR	63517	Identifier	cons		63509	0					
ANR	63518	CallExpression	r_cons_singleton ( )		63509	1					
ANR	63519	Callee	r_cons_singleton		63509	0					
ANR	63520	Identifier	r_cons_singleton		63509	0					
ANR	63521	ArgumentList			63509	1					
ANR	63522	IfStatement	if ( color == - 1 )		63509	1					
ANR	63523	Condition	color == - 1	322:12:7946:7956	63509	0	True				
ANR	63524	EqualityExpression	color == - 1		63509	0		==			
ANR	63525	Identifier	color		63509	0					
ANR	63526	UnaryOperationExpression	- 1		63509	1					
ANR	63527	UnaryOperator	-		63509	0					
ANR	63528	PrimaryExpression	1		63509	1					
ANR	63529	CompoundStatement		3:25:69:69	63509	1					
ANR	63530	ReturnStatement	return cur ? cons -> context -> pal . graph_box2 : cons -> context -> pal . graph_box ;	323:16:7977:8050	63509	0	True				
ANR	63531	ConditionalExpression	cur ? cons -> context -> pal . graph_box2 : cons -> context -> pal . graph_box		63509	0					
ANR	63532	Condition	cur		63509	0					
ANR	63533	Identifier	cur		63509	0					
ANR	63534	MemberAccess	cons -> context -> pal . graph_box2		63509	1					
ANR	63535	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63536	PtrMemberAccess	cons -> context		63509	0					
ANR	63537	Identifier	cons		63509	0					
ANR	63538	Identifier	context		63509	1					
ANR	63539	Identifier	pal		63509	1					
ANR	63540	Identifier	graph_box2		63509	1					
ANR	63541	MemberAccess	cons -> context -> pal . graph_box		63509	2					
ANR	63542	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63543	PtrMemberAccess	cons -> context		63509	0					
ANR	63544	Identifier	cons		63509	0					
ANR	63545	Identifier	context		63509	1					
ANR	63546	Identifier	pal		63509	1					
ANR	63547	Identifier	graph_box		63509	1					
ANR	63548	ReturnStatement	return color ? ( color == R_ANAL_DIFF_TYPE_MATCH ? cons -> context -> pal . graph_diff_match : color == R_ANAL_DIFF_TYPE_UNMATCH ? cons -> context -> pal . graph_diff_unmatch : cons -> context -> pal . graph_diff_new ) : cons -> context -> pal . graph_diff_unknown ;	325:8:8070:8335	63509	2	True				
ANR	63549	ConditionalExpression	color ? ( color == R_ANAL_DIFF_TYPE_MATCH ? cons -> context -> pal . graph_diff_match : color == R_ANAL_DIFF_TYPE_UNMATCH ? cons -> context -> pal . graph_diff_unmatch : cons -> context -> pal . graph_diff_new ) : cons -> context -> pal . graph_diff_unknown		63509	0					
ANR	63550	Condition	color		63509	0					
ANR	63551	Identifier	color		63509	0					
ANR	63552	ConditionalExpression	color == R_ANAL_DIFF_TYPE_MATCH ? cons -> context -> pal . graph_diff_match : color == R_ANAL_DIFF_TYPE_UNMATCH ? cons -> context -> pal . graph_diff_unmatch : cons -> context -> pal . graph_diff_new		63509	1					
ANR	63553	Condition	color == R_ANAL_DIFF_TYPE_MATCH		63509	0					
ANR	63554	EqualityExpression	color == R_ANAL_DIFF_TYPE_MATCH		63509	0		==			
ANR	63555	Identifier	color		63509	0					
ANR	63556	Identifier	R_ANAL_DIFF_TYPE_MATCH		63509	1					
ANR	63557	MemberAccess	cons -> context -> pal . graph_diff_match		63509	1					
ANR	63558	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63559	PtrMemberAccess	cons -> context		63509	0					
ANR	63560	Identifier	cons		63509	0					
ANR	63561	Identifier	context		63509	1					
ANR	63562	Identifier	pal		63509	1					
ANR	63563	Identifier	graph_diff_match		63509	1					
ANR	63564	ConditionalExpression	color == R_ANAL_DIFF_TYPE_UNMATCH ? cons -> context -> pal . graph_diff_unmatch : cons -> context -> pal . graph_diff_new		63509	2					
ANR	63565	Condition	color == R_ANAL_DIFF_TYPE_UNMATCH		63509	0					
ANR	63566	EqualityExpression	color == R_ANAL_DIFF_TYPE_UNMATCH		63509	0		==			
ANR	63567	Identifier	color		63509	0					
ANR	63568	Identifier	R_ANAL_DIFF_TYPE_UNMATCH		63509	1					
ANR	63569	MemberAccess	cons -> context -> pal . graph_diff_unmatch		63509	1					
ANR	63570	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63571	PtrMemberAccess	cons -> context		63509	0					
ANR	63572	Identifier	cons		63509	0					
ANR	63573	Identifier	context		63509	1					
ANR	63574	Identifier	pal		63509	1					
ANR	63575	Identifier	graph_diff_unmatch		63509	1					
ANR	63576	MemberAccess	cons -> context -> pal . graph_diff_new		63509	2					
ANR	63577	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63578	PtrMemberAccess	cons -> context		63509	0					
ANR	63579	Identifier	cons		63509	0					
ANR	63580	Identifier	context		63509	1					
ANR	63581	Identifier	pal		63509	1					
ANR	63582	Identifier	graph_diff_new		63509	1					
ANR	63583	MemberAccess	cons -> context -> pal . graph_diff_unknown		63509	2					
ANR	63584	PtrMemberAccess	cons -> context -> pal		63509	0					
ANR	63585	PtrMemberAccess	cons -> context		63509	0					
ANR	63586	Identifier	cons		63509	0					
ANR	63587	Identifier	context		63509	1					
ANR	63588	Identifier	pal		63509	1					
ANR	63589	Identifier	graph_diff_unknown		63509	1					
ANR	63590	ReturnType	static char *		63509	1					
ANR	63591	Identifier	get_node_color		63509	2					
ANR	63592	ParameterList	"int color , int cur"		63509	3					
ANR	63593	Parameter	int color	320:29:7869:7877	63509	0	True				
ANR	63594	ParameterType	int		63509	0					
ANR	63595	Identifier	color		63509	1					
ANR	63596	Parameter	int cur	320:40:7880:7886	63509	1	True				
ANR	63597	ParameterType	int		63509	0					
ANR	63598	Identifier	cur		63509	1					
ANR	63599	CFGEntryNode	ENTRY		63509		True				
ANR	63600	CFGExitNode	EXIT		63509		True				
ANR	63601	Symbol	cur		63509						
ANR	63602	Symbol	cons -> context		63509						
ANR	63603	Symbol	color		63509						
ANR	63604	Symbol	R_ANAL_DIFF_TYPE_MATCH		63509						
ANR	63605	Symbol	* * cons		63509						
ANR	63606	Symbol	cons -> context -> pal . graph_diff_unmatch		63509						
ANR	63607	Symbol	cons -> context -> pal . graph_diff_match		63509						
ANR	63608	Symbol	cons -> context -> pal . graph_diff_unknown		63509						
ANR	63609	Symbol	R_ANAL_DIFF_TYPE_UNMATCH		63509						
ANR	63610	Symbol	cons -> context -> pal . graph_box2		63509						
ANR	63611	Symbol	r_cons_singleton		63509						
ANR	63612	Symbol	* cons		63509						
ANR	63613	Symbol	cons -> context -> pal . graph_box		63509						
ANR	63614	Symbol	* cons -> context		63509						
ANR	63615	Symbol	cons -> context -> pal		63509						
ANR	63616	Symbol	cons		63509						
ANR	63617	Symbol	cons -> context -> pal . graph_diff_new		63509						
ANR	63618	Function	normal_RANode_print	330:0:8340:11180							
ANR	63619	FunctionDef	"normal_RANode_print (const RAGraph * g , const RANode * n , int cur)"		63618	0					
ANR	63620	CompoundStatement		330:76:8416:11180	63618	0					
ANR	63621	IdentifierDeclStatement	"ut32 center_x = 0 , center_y = 0 ;"	331:1:8419:8450	63618	0	True				
ANR	63622	IdentifierDecl	center_x = 0		63618	0					
ANR	63623	IdentifierDeclType	ut32		63618	0					
ANR	63624	Identifier	center_x		63618	1					
ANR	63625	AssignmentExpression	center_x = 0		63618	2		=			
ANR	63626	Identifier	center_x		63618	0					
ANR	63627	PrimaryExpression	0		63618	1					
ANR	63628	IdentifierDecl	center_y = 0		63618	1					
ANR	63629	IdentifierDeclType	ut32		63618	0					
ANR	63630	Identifier	center_y		63618	1					
ANR	63631	AssignmentExpression	center_y = 0		63618	2		=			
ANR	63632	Identifier	center_y		63618	0					
ANR	63633	PrimaryExpression	0		63618	1					
ANR	63634	IdentifierDeclStatement	"ut32 delta_x = 0 , delta_txt_x = 0 ;"	332:1:8453:8486	63618	1	True				
ANR	63635	IdentifierDecl	delta_x = 0		63618	0					
ANR	63636	IdentifierDeclType	ut32		63618	0					
ANR	63637	Identifier	delta_x		63618	1					
ANR	63638	AssignmentExpression	delta_x = 0		63618	2		=			
ANR	63639	Identifier	delta_x		63618	0					
ANR	63640	PrimaryExpression	0		63618	1					
ANR	63641	IdentifierDecl	delta_txt_x = 0		63618	1					
ANR	63642	IdentifierDeclType	ut32		63618	0					
ANR	63643	Identifier	delta_txt_x		63618	1					
ANR	63644	AssignmentExpression	delta_txt_x = 0		63618	2		=			
ANR	63645	Identifier	delta_txt_x		63618	0					
ANR	63646	PrimaryExpression	0		63618	1					
ANR	63647	IdentifierDeclStatement	"ut32 delta_y = 0 , delta_txt_y = 0 ;"	333:1:8489:8522	63618	2	True				
ANR	63648	IdentifierDecl	delta_y = 0		63618	0					
ANR	63649	IdentifierDeclType	ut32		63618	0					
ANR	63650	Identifier	delta_y		63618	1					
ANR	63651	AssignmentExpression	delta_y = 0		63618	2		=			
ANR	63652	Identifier	delta_y		63618	0					
ANR	63653	PrimaryExpression	0		63618	1					
ANR	63654	IdentifierDecl	delta_txt_y = 0		63618	1					
ANR	63655	IdentifierDeclType	ut32		63618	0					
ANR	63656	Identifier	delta_txt_y		63618	1					
ANR	63657	AssignmentExpression	delta_txt_y = 0		63618	2		=			
ANR	63658	Identifier	delta_txt_y		63618	0					
ANR	63659	PrimaryExpression	0		63618	1					
ANR	63660	IdentifierDeclStatement	char title [ TITLE_LEN ] ;	334:1:8525:8546	63618	3	True				
ANR	63661	IdentifierDecl	title [ TITLE_LEN ]		63618	0					
ANR	63662	IdentifierDeclType	char [ TITLE_LEN ]		63618	0					
ANR	63663	Identifier	title		63618	1					
ANR	63664	Identifier	TITLE_LEN		63618	2					
ANR	63665	IdentifierDeclStatement	char * body ;	335:1:8549:8559	63618	4	True				
ANR	63666	IdentifierDecl	* body		63618	0					
ANR	63667	IdentifierDeclType	char *		63618	0					
ANR	63668	Identifier	body		63618	1					
ANR	63669	IdentifierDeclStatement	"int x , y ;"	336:1:8562:8570	63618	5	True				
ANR	63670	IdentifierDecl	x		63618	0					
ANR	63671	IdentifierDeclType	int		63618	0					
ANR	63672	Identifier	x		63618	1					
ANR	63673	IdentifierDecl	y		63618	1					
ANR	63674	IdentifierDeclType	int		63618	0					
ANR	63675	Identifier	y		63618	1					
ANR	63676	IdentifierDeclStatement	int color = n -> difftype ;	337:1:8573:8596	63618	6	True				
ANR	63677	IdentifierDecl	color = n -> difftype		63618	0					
ANR	63678	IdentifierDeclType	int		63618	0					
ANR	63679	Identifier	color		63618	1					
ANR	63680	AssignmentExpression	color = n -> difftype		63618	2		=			
ANR	63681	Identifier	color		63618	0					
ANR	63682	PtrMemberAccess	n -> difftype		63618	1					
ANR	63683	Identifier	n		63618	0					
ANR	63684	Identifier	difftype		63618	1					
ANR	63685	IdentifierDeclStatement	const bool showTitle = g -> show_node_titles ;	338:1:8599:8641	63618	7	True				
ANR	63686	IdentifierDecl	showTitle = g -> show_node_titles		63618	0					
ANR	63687	IdentifierDeclType	const bool		63618	0					
ANR	63688	Identifier	showTitle		63618	1					
ANR	63689	AssignmentExpression	showTitle = g -> show_node_titles		63618	2		=			
ANR	63690	Identifier	showTitle		63618	0					
ANR	63691	PtrMemberAccess	g -> show_node_titles		63618	1					
ANR	63692	Identifier	g		63618	0					
ANR	63693	Identifier	show_node_titles		63618	1					
ANR	63694	IdentifierDeclStatement	const bool showBody = g -> show_node_body ;	339:1:8644:8683	63618	8	True				
ANR	63695	IdentifierDecl	showBody = g -> show_node_body		63618	0					
ANR	63696	IdentifierDeclType	const bool		63618	0					
ANR	63697	Identifier	showBody		63618	1					
ANR	63698	AssignmentExpression	showBody = g -> show_node_body		63618	2		=			
ANR	63699	Identifier	showBody		63618	0					
ANR	63700	PtrMemberAccess	g -> show_node_body		63618	1					
ANR	63701	Identifier	g		63618	0					
ANR	63702	Identifier	show_node_body		63618	1					
ANR	63703	ExpressionStatement	x = n -> x + g -> can -> sx	341:1:8687:8708	63618	9	True				
ANR	63704	AssignmentExpression	x = n -> x + g -> can -> sx		63618	0		=			
ANR	63705	Identifier	x		63618	0					
ANR	63706	AdditiveExpression	n -> x + g -> can -> sx		63618	1		+			
ANR	63707	PtrMemberAccess	n -> x		63618	0					
ANR	63708	Identifier	n		63618	0					
ANR	63709	Identifier	x		63618	1					
ANR	63710	PtrMemberAccess	g -> can -> sx		63618	1					
ANR	63711	PtrMemberAccess	g -> can		63618	0					
ANR	63712	Identifier	g		63618	0					
ANR	63713	Identifier	can		63618	1					
ANR	63714	Identifier	sx		63618	1					
ANR	63715	ExpressionStatement	y = n -> y + g -> can -> sy	342:1:8711:8732	63618	10	True				
ANR	63716	AssignmentExpression	y = n -> y + g -> can -> sy		63618	0		=			
ANR	63717	Identifier	y		63618	0					
ANR	63718	AdditiveExpression	n -> y + g -> can -> sy		63618	1		+			
ANR	63719	PtrMemberAccess	n -> y		63618	0					
ANR	63720	Identifier	n		63618	0					
ANR	63721	Identifier	y		63618	1					
ANR	63722	PtrMemberAccess	g -> can -> sy		63618	1					
ANR	63723	PtrMemberAccess	g -> can		63618	0					
ANR	63724	Identifier	g		63618	0					
ANR	63725	Identifier	can		63618	1					
ANR	63726	Identifier	sy		63618	1					
ANR	63727	IfStatement	if ( x + MARGIN_TEXT_X < 0 )		63618	11					
ANR	63728	Condition	x + MARGIN_TEXT_X < 0	343:5:8739:8759	63618	0	True				
ANR	63729	RelationalExpression	x + MARGIN_TEXT_X < 0		63618	0		<			
ANR	63730	AdditiveExpression	x + MARGIN_TEXT_X		63618	0		+			
ANR	63731	Identifier	x		63618	0					
ANR	63732	Identifier	MARGIN_TEXT_X		63618	1					
ANR	63733	PrimaryExpression	0		63618	1					
ANR	63734	CompoundStatement		14:28:345:345	63618	1					
ANR	63735	ExpressionStatement	delta_x = - ( x + MARGIN_TEXT_X )	344:2:8766:8796	63618	0	True				
ANR	63736	AssignmentExpression	delta_x = - ( x + MARGIN_TEXT_X )		63618	0		=			
ANR	63737	Identifier	delta_x		63618	0					
ANR	63738	UnaryOperationExpression	- ( x + MARGIN_TEXT_X )		63618	1					
ANR	63739	UnaryOperator	-		63618	0					
ANR	63740	AdditiveExpression	x + MARGIN_TEXT_X		63618	1		+			
ANR	63741	Identifier	x		63618	0					
ANR	63742	Identifier	MARGIN_TEXT_X		63618	1					
ANR	63743	IfStatement	if ( x + n -> w < - MARGIN_TEXT_X )		63618	12					
ANR	63744	Condition	x + n -> w < - MARGIN_TEXT_X	346:5:8806:8830	63618	0	True				
ANR	63745	RelationalExpression	x + n -> w < - MARGIN_TEXT_X		63618	0		<			
ANR	63746	AdditiveExpression	x + n -> w		63618	0		+			
ANR	63747	Identifier	x		63618	0					
ANR	63748	PtrMemberAccess	n -> w		63618	1					
ANR	63749	Identifier	n		63618	0					
ANR	63750	Identifier	w		63618	1					
ANR	63751	UnaryOperationExpression	- MARGIN_TEXT_X		63618	1					
ANR	63752	UnaryOperator	-		63618	0					
ANR	63753	Identifier	MARGIN_TEXT_X		63618	1					
ANR	63754	CompoundStatement		17:32:416:416	63618	1					
ANR	63755	ReturnStatement	return ;	347:2:8837:8843	63618	0	True				
ANR	63756	IfStatement	if ( y < - 1 )		63618	13					
ANR	63757	Condition	y < - 1	349:5:8853:8858	63618	0	True				
ANR	63758	RelationalExpression	y < - 1		63618	0		<			
ANR	63759	Identifier	y		63618	0					
ANR	63760	UnaryOperationExpression	- 1		63618	1					
ANR	63761	UnaryOperator	-		63618	0					
ANR	63762	PrimaryExpression	1		63618	1					
ANR	63763	CompoundStatement		20:13:444:444	63618	1					
ANR	63764	ExpressionStatement	"delta_y = R_MIN ( n -> h - BORDER_HEIGHT - 1 , - y - MARGIN_TEXT_Y )"	350:2:8865:8927	63618	0	True				
ANR	63765	AssignmentExpression	"delta_y = R_MIN ( n -> h - BORDER_HEIGHT - 1 , - y - MARGIN_TEXT_Y )"		63618	0		=			
ANR	63766	Identifier	delta_y		63618	0					
ANR	63767	CallExpression	"R_MIN ( n -> h - BORDER_HEIGHT - 1 , - y - MARGIN_TEXT_Y )"		63618	1					
ANR	63768	Callee	R_MIN		63618	0					
ANR	63769	Identifier	R_MIN		63618	0					
ANR	63770	ArgumentList	n -> h - BORDER_HEIGHT - 1		63618	1					
ANR	63771	Argument	n -> h - BORDER_HEIGHT - 1		63618	0					
ANR	63772	AdditiveExpression	n -> h - BORDER_HEIGHT - 1		63618	0		-			
ANR	63773	PtrMemberAccess	n -> h		63618	0					
ANR	63774	Identifier	n		63618	0					
ANR	63775	Identifier	h		63618	1					
ANR	63776	AdditiveExpression	BORDER_HEIGHT - 1		63618	1		-			
ANR	63777	Identifier	BORDER_HEIGHT		63618	0					
ANR	63778	PrimaryExpression	1		63618	1					
ANR	63779	Argument	- y - MARGIN_TEXT_Y		63618	1					
ANR	63780	AdditiveExpression	- y - MARGIN_TEXT_Y		63618	0		-			
ANR	63781	UnaryOperationExpression	- y		63618	0					
ANR	63782	UnaryOperator	-		63618	0					
ANR	63783	Identifier	y		63618	1					
ANR	63784	Identifier	MARGIN_TEXT_Y		63618	1					
ANR	63785	IfStatement	if ( showTitle )		63618	14					
ANR	63786	Condition	showTitle	353:5:8960:8968	63618	0	True				
ANR	63787	Identifier	showTitle		63618	0					
ANR	63788	CompoundStatement		24:16:554:554	63618	1					
ANR	63789	IfStatement	if ( cur )		63618	0					
ANR	63790	Condition	cur	354:6:8979:8981	63618	0	True				
ANR	63791	Identifier	cur		63618	0					
ANR	63792	CompoundStatement		25:11:567:567	63618	1					
ANR	63793	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , ""[%s]"" , n -> title )"	355:3:8989:9043	63618	0	True				
ANR	63794	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , ""[%s]"" , n -> title )"		63618	0					
ANR	63795	Callee	snprintf		63618	0					
ANR	63796	Identifier	snprintf		63618	0					
ANR	63797	ArgumentList	title		63618	1					
ANR	63798	Argument	title		63618	0					
ANR	63799	Identifier	title		63618	0					
ANR	63800	Argument	sizeof ( title ) - 1		63618	1					
ANR	63801	AdditiveExpression	sizeof ( title ) - 1		63618	0		-			
ANR	63802	SizeofExpression	sizeof ( title )		63618	0					
ANR	63803	Sizeof	sizeof		63618	0					
ANR	63804	SizeofOperand	title		63618	1					
ANR	63805	PrimaryExpression	1		63618	1					
ANR	63806	Argument	"""[%s]"""		63618	2					
ANR	63807	PrimaryExpression	"""[%s]"""		63618	0					
ANR	63808	Argument	n -> title		63618	3					
ANR	63809	PtrMemberAccess	n -> title		63618	0					
ANR	63810	Identifier	n		63618	0					
ANR	63811	Identifier	title		63618	1					
ANR	63812	ElseStatement	else		63618	0					
ANR	63813	CompoundStatement		28:3:642:688	63618	0					
ANR	63814	IdentifierDeclStatement	"char * color = g -> can -> color ? Color_RESET : """" ;"	357:3:9059:9105	63618	0	True				
ANR	63815	IdentifierDecl	"* color = g -> can -> color ? Color_RESET : """""		63618	0					
ANR	63816	IdentifierDeclType	char *		63618	0					
ANR	63817	Identifier	color		63618	1					
ANR	63818	AssignmentExpression	"* color = g -> can -> color ? Color_RESET : """""		63618	2		=			
ANR	63819	Identifier	color		63618	0					
ANR	63820	ConditionalExpression	"g -> can -> color ? Color_RESET : """""		63618	1					
ANR	63821	Condition	g -> can -> color		63618	0					
ANR	63822	PtrMemberAccess	g -> can -> color		63618	0					
ANR	63823	PtrMemberAccess	g -> can		63618	0					
ANR	63824	Identifier	g		63618	0					
ANR	63825	Identifier	can		63618	1					
ANR	63826	Identifier	color		63618	1					
ANR	63827	Identifier	Color_RESET		63618	1					
ANR	63828	PrimaryExpression	""""""		63618	2					
ANR	63829	ExpressionStatement	"snprintf ( title , sizeof ( title ) - 1 , "" %s%s "" , color , n -> title )"	358:3:9110:9173	63618	1	True				
ANR	63830	CallExpression	"snprintf ( title , sizeof ( title ) - 1 , "" %s%s "" , color , n -> title )"		63618	0					
ANR	63831	Callee	snprintf		63618	0					
ANR	63832	Identifier	snprintf		63618	0					
ANR	63833	ArgumentList	title		63618	1					
ANR	63834	Argument	title		63618	0					
ANR	63835	Identifier	title		63618	0					
ANR	63836	Argument	sizeof ( title ) - 1		63618	1					
ANR	63837	AdditiveExpression	sizeof ( title ) - 1		63618	0		-			
ANR	63838	SizeofExpression	sizeof ( title )		63618	0					
ANR	63839	Sizeof	sizeof		63618	0					
ANR	63840	SizeofOperand	title		63618	1					
ANR	63841	PrimaryExpression	1		63618	1					
ANR	63842	Argument	""" %s%s """		63618	2					
ANR	63843	PrimaryExpression	""" %s%s """		63618	0					
ANR	63844	Argument	color		63618	3					
ANR	63845	Identifier	color		63618	0					
ANR	63846	Argument	n -> title		63618	4					
ANR	63847	PtrMemberAccess	n -> title		63618	0					
ANR	63848	Identifier	n		63618	0					
ANR	63849	Identifier	title		63618	1					
ANR	63850	ExpressionStatement	"append_shortcut ( g , title , n -> title , sizeof ( title ) - strlen ( title ) - 1 )"	359:3:9178:9251	63618	2	True				
ANR	63851	CallExpression	"append_shortcut ( g , title , n -> title , sizeof ( title ) - strlen ( title ) - 1 )"		63618	0					
ANR	63852	Callee	append_shortcut		63618	0					
ANR	63853	Identifier	append_shortcut		63618	0					
ANR	63854	ArgumentList	g		63618	1					
ANR	63855	Argument	g		63618	0					
ANR	63856	Identifier	g		63618	0					
ANR	63857	Argument	title		63618	1					
ANR	63858	Identifier	title		63618	0					
ANR	63859	Argument	n -> title		63618	2					
ANR	63860	PtrMemberAccess	n -> title		63618	0					
ANR	63861	Identifier	n		63618	0					
ANR	63862	Identifier	title		63618	1					
ANR	63863	Argument	sizeof ( title ) - strlen ( title ) - 1		63618	3					
ANR	63864	AdditiveExpression	sizeof ( title ) - strlen ( title ) - 1		63618	0		-			
ANR	63865	SizeofExpression	sizeof ( title )		63618	0					
ANR	63866	Sizeof	sizeof		63618	0					
ANR	63867	SizeofOperand	title		63618	1					
ANR	63868	AdditiveExpression	strlen ( title ) - 1		63618	1		-			
ANR	63869	CallExpression	strlen ( title )		63618	0					
ANR	63870	Callee	strlen		63618	0					
ANR	63871	Identifier	strlen		63618	0					
ANR	63872	ArgumentList	title		63618	1					
ANR	63873	Argument	title		63618	0					
ANR	63874	Identifier	title		63618	0					
ANR	63875	PrimaryExpression	1		63618	1					
ANR	63876	IfStatement	"if ( ( delta_x < strlen ( title ) ) && G ( n -> x + MARGIN_TEXT_X + delta_x , n -> y + 1 ) )"		63618	1					
ANR	63877	Condition	"( delta_x < strlen ( title ) ) && G ( n -> x + MARGIN_TEXT_X + delta_x , n -> y + 1 )"	361:6:9263:9336	63618	0	True				
ANR	63878	AndExpression	"( delta_x < strlen ( title ) ) && G ( n -> x + MARGIN_TEXT_X + delta_x , n -> y + 1 )"		63618	0		&&			
ANR	63879	RelationalExpression	delta_x < strlen ( title )		63618	0		<			
ANR	63880	Identifier	delta_x		63618	0					
ANR	63881	CallExpression	strlen ( title )		63618	1					
ANR	63882	Callee	strlen		63618	0					
ANR	63883	Identifier	strlen		63618	0					
ANR	63884	ArgumentList	title		63618	1					
ANR	63885	Argument	title		63618	0					
ANR	63886	Identifier	title		63618	0					
ANR	63887	CallExpression	"G ( n -> x + MARGIN_TEXT_X + delta_x , n -> y + 1 )"		63618	1					
ANR	63888	Callee	G		63618	0					
ANR	63889	Identifier	G		63618	0					
ANR	63890	ArgumentList	n -> x + MARGIN_TEXT_X + delta_x		63618	1					
ANR	63891	Argument	n -> x + MARGIN_TEXT_X + delta_x		63618	0					
ANR	63892	AdditiveExpression	n -> x + MARGIN_TEXT_X + delta_x		63618	0		+			
ANR	63893	PtrMemberAccess	n -> x		63618	0					
ANR	63894	Identifier	n		63618	0					
ANR	63895	Identifier	x		63618	1					
ANR	63896	AdditiveExpression	MARGIN_TEXT_X + delta_x		63618	1		+			
ANR	63897	Identifier	MARGIN_TEXT_X		63618	0					
ANR	63898	Identifier	delta_x		63618	1					
ANR	63899	Argument	n -> y + 1		63618	1					
ANR	63900	AdditiveExpression	n -> y + 1		63618	0		+			
ANR	63901	PtrMemberAccess	n -> y		63618	0					
ANR	63902	Identifier	n		63618	0					
ANR	63903	Identifier	y		63618	1					
ANR	63904	PrimaryExpression	1		63618	1					
ANR	63905	CompoundStatement		33:3:927:998	63618	1					
ANR	63906	IdentifierDeclStatement	"char * res = r_str_ansi_crop ( title , delta_x , 0 , n -> w - BORDER_WIDTH , 1 ) ;"	362:3:9344:9415	63618	0	True				
ANR	63907	IdentifierDecl	"* res = r_str_ansi_crop ( title , delta_x , 0 , n -> w - BORDER_WIDTH , 1 )"		63618	0					
ANR	63908	IdentifierDeclType	char *		63618	0					
ANR	63909	Identifier	res		63618	1					
ANR	63910	AssignmentExpression	"* res = r_str_ansi_crop ( title , delta_x , 0 , n -> w - BORDER_WIDTH , 1 )"		63618	2		=			
ANR	63911	Identifier	res		63618	0					
ANR	63912	CallExpression	"r_str_ansi_crop ( title , delta_x , 0 , n -> w - BORDER_WIDTH , 1 )"		63618	1					
ANR	63913	Callee	r_str_ansi_crop		63618	0					
ANR	63914	Identifier	r_str_ansi_crop		63618	0					
ANR	63915	ArgumentList	title		63618	1					
ANR	63916	Argument	title		63618	0					
ANR	63917	Identifier	title		63618	0					
ANR	63918	Argument	delta_x		63618	1					
ANR	63919	Identifier	delta_x		63618	0					
ANR	63920	Argument	0		63618	2					
ANR	63921	PrimaryExpression	0		63618	0					
ANR	63922	Argument	n -> w - BORDER_WIDTH		63618	3					
ANR	63923	AdditiveExpression	n -> w - BORDER_WIDTH		63618	0		-			
ANR	63924	PtrMemberAccess	n -> w		63618	0					
ANR	63925	Identifier	n		63618	0					
ANR	63926	Identifier	w		63618	1					
ANR	63927	Identifier	BORDER_WIDTH		63618	1					
ANR	63928	Argument	1		63618	4					
ANR	63929	PrimaryExpression	1		63618	0					
ANR	63930	ExpressionStatement	W ( res )	363:3:9420:9427	63618	1	True				
ANR	63931	CallExpression	W ( res )		63618	0					
ANR	63932	Callee	W		63618	0					
ANR	63933	Identifier	W		63618	0					
ANR	63934	ArgumentList	res		63618	1					
ANR	63935	Argument	res		63618	0					
ANR	63936	Identifier	res		63618	0					
ANR	63937	ExpressionStatement	free ( res )	364:3:9432:9442	63618	2	True				
ANR	63938	CallExpression	free ( res )		63618	0					
ANR	63939	Callee	free		63618	0					
ANR	63940	Identifier	free		63618	0					
ANR	63941	ArgumentList	res		63618	1					
ANR	63942	Argument	res		63618	0					
ANR	63943	Identifier	res		63618	0					
ANR	63944	IfStatement	if ( g -> zoom > ZOOM_DEFAULT )		63618	15					
ANR	63945	Condition	g -> zoom > ZOOM_DEFAULT	369:5:9479:9500	63618	0	True				
ANR	63946	RelationalExpression	g -> zoom > ZOOM_DEFAULT		63618	0		>			
ANR	63947	PtrMemberAccess	g -> zoom		63618	0					
ANR	63948	Identifier	g		63618	0					
ANR	63949	Identifier	zoom		63618	1					
ANR	63950	Identifier	ZOOM_DEFAULT		63618	1					
ANR	63951	CompoundStatement		40:29:1086:1086	63618	1					
ANR	63952	ExpressionStatement	center_x = ( g -> zoom - ZOOM_DEFAULT ) / 10	370:2:9507:9547	63618	0	True				
ANR	63953	AssignmentExpression	center_x = ( g -> zoom - ZOOM_DEFAULT ) / 10		63618	0		=			
ANR	63954	Identifier	center_x		63618	0					
ANR	63955	MultiplicativeExpression	( g -> zoom - ZOOM_DEFAULT ) / 10		63618	1		/			
ANR	63956	AdditiveExpression	g -> zoom - ZOOM_DEFAULT		63618	0		-			
ANR	63957	PtrMemberAccess	g -> zoom		63618	0					
ANR	63958	Identifier	g		63618	0					
ANR	63959	Identifier	zoom		63618	1					
ANR	63960	Identifier	ZOOM_DEFAULT		63618	1					
ANR	63961	PrimaryExpression	10		63618	1					
ANR	63962	ExpressionStatement	center_y = ( g -> zoom - ZOOM_DEFAULT ) / 30	371:2:9551:9591	63618	1	True				
ANR	63963	AssignmentExpression	center_y = ( g -> zoom - ZOOM_DEFAULT ) / 30		63618	0		=			
ANR	63964	Identifier	center_y		63618	0					
ANR	63965	MultiplicativeExpression	( g -> zoom - ZOOM_DEFAULT ) / 30		63618	1		/			
ANR	63966	AdditiveExpression	g -> zoom - ZOOM_DEFAULT		63618	0		-			
ANR	63967	PtrMemberAccess	g -> zoom		63618	0					
ANR	63968	Identifier	g		63618	0					
ANR	63969	Identifier	zoom		63618	1					
ANR	63970	Identifier	ZOOM_DEFAULT		63618	1					
ANR	63971	PrimaryExpression	30		63618	1					
ANR	63972	ExpressionStatement	"delta_txt_x = R_MIN ( delta_x , center_x )"	372:2:9595:9634	63618	2	True				
ANR	63973	AssignmentExpression	"delta_txt_x = R_MIN ( delta_x , center_x )"		63618	0		=			
ANR	63974	Identifier	delta_txt_x		63618	0					
ANR	63975	CallExpression	"R_MIN ( delta_x , center_x )"		63618	1					
ANR	63976	Callee	R_MIN		63618	0					
ANR	63977	Identifier	R_MIN		63618	0					
ANR	63978	ArgumentList	delta_x		63618	1					
ANR	63979	Argument	delta_x		63618	0					
ANR	63980	Identifier	delta_x		63618	0					
ANR	63981	Argument	center_x		63618	1					
ANR	63982	Identifier	center_x		63618	0					
ANR	63983	ExpressionStatement	"delta_txt_y = R_MIN ( delta_y , center_y )"	373:2:9638:9677	63618	3	True				
ANR	63984	AssignmentExpression	"delta_txt_y = R_MIN ( delta_y , center_y )"		63618	0		=			
ANR	63985	Identifier	delta_txt_y		63618	0					
ANR	63986	CallExpression	"R_MIN ( delta_y , center_y )"		63618	1					
ANR	63987	Callee	R_MIN		63618	0					
ANR	63988	Identifier	R_MIN		63618	0					
ANR	63989	ArgumentList	delta_y		63618	1					
ANR	63990	Argument	delta_y		63618	0					
ANR	63991	Identifier	delta_y		63618	0					
ANR	63992	Argument	center_y		63618	1					
ANR	63993	Identifier	center_y		63618	0					
ANR	63994	IfStatement	if ( showBody )		63618	16					
ANR	63995	Condition	showBody	375:5:9687:9694	63618	0	True				
ANR	63996	Identifier	showBody		63618	0					
ANR	63997	CompoundStatement		46:15:1280:1280	63618	1					
ANR	63998	IfStatement	"if ( G ( n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x , n -> y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y ) )"		63618	0					
ANR	63999	Condition	"G ( n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x , n -> y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y )"	376:6:9705:9825	63618	0	True				
ANR	64000	CallExpression	"G ( n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x , n -> y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y )"		63618	0					
ANR	64001	Callee	G		63618	0					
ANR	64002	Identifier	G		63618	0					
ANR	64003	ArgumentList	n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x		63618	1					
ANR	64004	Argument	n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x		63618	0					
ANR	64005	AdditiveExpression	n -> x + MARGIN_TEXT_X + delta_x + center_x - delta_txt_x		63618	0		+			
ANR	64006	PtrMemberAccess	n -> x		63618	0					
ANR	64007	Identifier	n		63618	0					
ANR	64008	Identifier	x		63618	1					
ANR	64009	AdditiveExpression	MARGIN_TEXT_X + delta_x + center_x - delta_txt_x		63618	1		+			
ANR	64010	Identifier	MARGIN_TEXT_X		63618	0					
ANR	64011	AdditiveExpression	delta_x + center_x - delta_txt_x		63618	1		+			
ANR	64012	Identifier	delta_x		63618	0					
ANR	64013	AdditiveExpression	center_x - delta_txt_x		63618	1		-			
ANR	64014	Identifier	center_x		63618	0					
ANR	64015	Identifier	delta_txt_x		63618	1					
ANR	64016	Argument	n -> y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y		63618	1					
ANR	64017	AdditiveExpression	n -> y + MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y		63618	0		+			
ANR	64018	PtrMemberAccess	n -> y		63618	0					
ANR	64019	Identifier	n		63618	0					
ANR	64020	Identifier	y		63618	1					
ANR	64021	AdditiveExpression	MARGIN_TEXT_Y + delta_y + center_y - delta_txt_y		63618	1		+			
ANR	64022	Identifier	MARGIN_TEXT_Y		63618	0					
ANR	64023	AdditiveExpression	delta_y + center_y - delta_txt_y		63618	1		+			
ANR	64024	Identifier	delta_y		63618	0					
ANR	64025	AdditiveExpression	center_y - delta_txt_y		63618	1		-			
ANR	64026	Identifier	center_y		63618	0					
ANR	64027	Identifier	delta_txt_y		63618	1					
ANR	64028	CompoundStatement		51:3:1538:1598	63618	1					
ANR	64029	IdentifierDeclStatement	ut32 body_x = center_x >= delta_x ? 0 : delta_x - center_x ;	378:3:9833:9889	63618	0	True				
ANR	64030	IdentifierDecl	body_x = center_x >= delta_x ? 0 : delta_x - center_x		63618	0					
ANR	64031	IdentifierDeclType	ut32		63618	0					
ANR	64032	Identifier	body_x		63618	1					
ANR	64033	AssignmentExpression	body_x = center_x >= delta_x ? 0 : delta_x - center_x		63618	2		=			
ANR	64034	Identifier	body_x		63618	0					
ANR	64035	ConditionalExpression	center_x >= delta_x ? 0 : delta_x - center_x		63618	1					
ANR	64036	Condition	center_x >= delta_x		63618	0					
ANR	64037	RelationalExpression	center_x >= delta_x		63618	0		>=			
ANR	64038	Identifier	center_x		63618	0					
ANR	64039	Identifier	delta_x		63618	1					
ANR	64040	PrimaryExpression	0		63618	1					
ANR	64041	AdditiveExpression	delta_x - center_x		63618	2		-			
ANR	64042	Identifier	delta_x		63618	0					
ANR	64043	Identifier	center_x		63618	1					
ANR	64044	IdentifierDeclStatement	ut32 body_y = center_y >= delta_y ? 0 : delta_y - center_y ;	379:3:9894:9950	63618	1	True				
ANR	64045	IdentifierDecl	body_y = center_y >= delta_y ? 0 : delta_y - center_y		63618	0					
ANR	64046	IdentifierDeclType	ut32		63618	0					
ANR	64047	Identifier	body_y		63618	1					
ANR	64048	AssignmentExpression	body_y = center_y >= delta_y ? 0 : delta_y - center_y		63618	2		=			
ANR	64049	Identifier	body_y		63618	0					
ANR	64050	ConditionalExpression	center_y >= delta_y ? 0 : delta_y - center_y		63618	1					
ANR	64051	Condition	center_y >= delta_y		63618	0					
ANR	64052	RelationalExpression	center_y >= delta_y		63618	0		>=			
ANR	64053	Identifier	center_y		63618	0					
ANR	64054	Identifier	delta_y		63618	1					
ANR	64055	PrimaryExpression	0		63618	1					
ANR	64056	AdditiveExpression	delta_y - center_y		63618	2		-			
ANR	64057	Identifier	delta_y		63618	0					
ANR	64058	Identifier	center_y		63618	1					
ANR	64059	IdentifierDeclStatement	ut32 body_h = BORDER_HEIGHT >= n -> h ? 1 : n -> h - BORDER_HEIGHT ;	380:3:9955:10015	63618	2	True				
ANR	64060	IdentifierDecl	body_h = BORDER_HEIGHT >= n -> h ? 1 : n -> h - BORDER_HEIGHT		63618	0					
ANR	64061	IdentifierDeclType	ut32		63618	0					
ANR	64062	Identifier	body_h		63618	1					
ANR	64063	AssignmentExpression	body_h = BORDER_HEIGHT >= n -> h ? 1 : n -> h - BORDER_HEIGHT		63618	2		=			
ANR	64064	Identifier	body_h		63618	0					
ANR	64065	ConditionalExpression	BORDER_HEIGHT >= n -> h ? 1 : n -> h - BORDER_HEIGHT		63618	1					
ANR	64066	Condition	BORDER_HEIGHT >= n -> h		63618	0					
ANR	64067	RelationalExpression	BORDER_HEIGHT >= n -> h		63618	0		>=			
ANR	64068	Identifier	BORDER_HEIGHT		63618	0					
ANR	64069	PtrMemberAccess	n -> h		63618	1					
ANR	64070	Identifier	n		63618	0					
ANR	64071	Identifier	h		63618	1					
ANR	64072	PrimaryExpression	1		63618	1					
ANR	64073	AdditiveExpression	n -> h - BORDER_HEIGHT		63618	2		-			
ANR	64074	PtrMemberAccess	n -> h		63618	0					
ANR	64075	Identifier	n		63618	0					
ANR	64076	Identifier	h		63618	1					
ANR	64077	Identifier	BORDER_HEIGHT		63618	1					
ANR	64078	IfStatement	if ( g -> zoom < ZOOM_DEFAULT )		63618	3					
ANR	64079	Condition	g -> zoom < ZOOM_DEFAULT	382:7:10025:10046	63618	0	True				
ANR	64080	RelationalExpression	g -> zoom < ZOOM_DEFAULT		63618	0		<			
ANR	64081	PtrMemberAccess	g -> zoom		63618	0					
ANR	64082	Identifier	g		63618	0					
ANR	64083	Identifier	zoom		63618	1					
ANR	64084	Identifier	ZOOM_DEFAULT		63618	1					
ANR	64085	CompoundStatement		53:31:1632:1632	63618	1					
ANR	64086	ExpressionStatement	body_h --	383:4:10055:10063	63618	0	True				
ANR	64087	PostIncDecOperationExpression	body_h --		63618	0					
ANR	64088	Identifier	body_h		63618	0					
ANR	64089	IncDec	--		63618	1					
ANR	64090	IfStatement	if ( body_y + 1 <= body_h )		63618	4					
ANR	64091	Condition	body_y + 1 <= body_h	385:7:10077:10096	63618	0	True				
ANR	64092	RelationalExpression	body_y + 1 <= body_h		63618	0		<=			
ANR	64093	AdditiveExpression	body_y + 1		63618	0		+			
ANR	64094	Identifier	body_y		63618	0					
ANR	64095	PrimaryExpression	1		63618	1					
ANR	64096	Identifier	body_h		63618	1					
ANR	64097	CompoundStatement		56:29:1682:1682	63618	1					
ANR	64098	ExpressionStatement	"body = r_str_ansi_crop ( n -> body , body_x , body_y , n -> w - BORDER_WIDTH , body_h )"	386:4:10105:10200	63618	0	True				
ANR	64099	AssignmentExpression	"body = r_str_ansi_crop ( n -> body , body_x , body_y , n -> w - BORDER_WIDTH , body_h )"		63618	0		=			
ANR	64100	Identifier	body		63618	0					
ANR	64101	CallExpression	"r_str_ansi_crop ( n -> body , body_x , body_y , n -> w - BORDER_WIDTH , body_h )"		63618	1					
ANR	64102	Callee	r_str_ansi_crop		63618	0					
ANR	64103	Identifier	r_str_ansi_crop		63618	0					
ANR	64104	ArgumentList	n -> body		63618	1					
ANR	64105	Argument	n -> body		63618	0					
ANR	64106	PtrMemberAccess	n -> body		63618	0					
ANR	64107	Identifier	n		63618	0					
ANR	64108	Identifier	body		63618	1					
ANR	64109	Argument	body_x		63618	1					
ANR	64110	Identifier	body_x		63618	0					
ANR	64111	Argument	body_y		63618	2					
ANR	64112	Identifier	body_y		63618	0					
ANR	64113	Argument	n -> w - BORDER_WIDTH		63618	3					
ANR	64114	AdditiveExpression	n -> w - BORDER_WIDTH		63618	0		-			
ANR	64115	PtrMemberAccess	n -> w		63618	0					
ANR	64116	Identifier	n		63618	0					
ANR	64117	Identifier	w		63618	1					
ANR	64118	Identifier	BORDER_WIDTH		63618	1					
ANR	64119	Argument	body_h		63618	4					
ANR	64120	Identifier	body_h		63618	0					
ANR	64121	IfStatement	if ( body )		63618	1					
ANR	64122	Condition	body	390:8:10210:10213	63618	0	True				
ANR	64123	Identifier	body		63618	0					
ANR	64124	CompoundStatement		61:14:1799:1799	63618	1					
ANR	64125	ExpressionStatement	W ( body )	391:5:10223:10231	63618	0	True				
ANR	64126	CallExpression	W ( body )		63618	0					
ANR	64127	Callee	W		63618	0					
ANR	64128	Identifier	W		63618	0					
ANR	64129	ArgumentList	body		63618	1					
ANR	64130	Argument	body		63618	0					
ANR	64131	Identifier	body		63618	0					
ANR	64132	IfStatement	if ( g -> zoom < ZOOM_DEFAULT )		63618	1					
ANR	64133	Condition	g -> zoom < ZOOM_DEFAULT	392:9:10242:10263	63618	0	True				
ANR	64134	RelationalExpression	g -> zoom < ZOOM_DEFAULT		63618	0		<			
ANR	64135	PtrMemberAccess	g -> zoom		63618	0					
ANR	64136	Identifier	g		63618	0					
ANR	64137	Identifier	zoom		63618	1					
ANR	64138	Identifier	ZOOM_DEFAULT		63618	1					
ANR	64139	CompoundStatement		63:33:1849:1849	63618	1					
ANR	64140	ExpressionStatement	"W ( ""\\n"" )"	393:6:10274:10282	63618	0	True				
ANR	64141	CallExpression	"W ( ""\\n"" )"		63618	0					
ANR	64142	Callee	W		63618	0					
ANR	64143	Identifier	W		63618	0					
ANR	64144	ArgumentList	"""\\n"""		63618	1					
ANR	64145	Argument	"""\\n"""		63618	0					
ANR	64146	PrimaryExpression	"""\\n"""		63618	0					
ANR	64147	ExpressionStatement	free ( body )	395:5:10296:10307	63618	2	True				
ANR	64148	CallExpression	free ( body )		63618	0					
ANR	64149	Callee	free		63618	0					
ANR	64150	Identifier	free		63618	0					
ANR	64151	ArgumentList	body		63618	1					
ANR	64152	Argument	body		63618	0					
ANR	64153	Identifier	body		63618	0					
ANR	64154	ElseStatement	else		63618	0					
ANR	64155	CompoundStatement		67:11:1903:1903	63618	0					
ANR	64156	ExpressionStatement	W ( n -> body )	397:5:10327:10338	63618	0	True				
ANR	64157	CallExpression	W ( n -> body )		63618	0					
ANR	64158	Callee	W		63618	0					
ANR	64159	Identifier	W		63618	0					
ANR	64160	ArgumentList	n -> body		63618	1					
ANR	64161	Argument	n -> body		63618	0					
ANR	64162	PtrMemberAccess	n -> body		63618	0					
ANR	64163	Identifier	n		63618	0					
ANR	64164	Identifier	body		63618	1					
ANR	64165	IfStatement	if ( n -> body && * n -> body )		63618	5					
ANR	64166	Condition	n -> body && * n -> body	401:7:10424:10442	63618	0	True				
ANR	64167	AndExpression	n -> body && * n -> body		63618	0		&&			
ANR	64168	PtrMemberAccess	n -> body		63618	0					
ANR	64169	Identifier	n		63618	0					
ANR	64170	Identifier	body		63618	1					
ANR	64171	UnaryOperationExpression	* n -> body		63618	1					
ANR	64172	UnaryOperator	*		63618	0					
ANR	64173	PtrMemberAccess	n -> body		63618	1					
ANR	64174	Identifier	n		63618	0					
ANR	64175	Identifier	body		63618	1					
ANR	64176	CompoundStatement		72:28:2028:2028	63618	1					
ANR	64177	IfStatement	if ( body_y <= body_h && g -> zoom < ZOOM_DEFAULT )		63618	0					
ANR	64178	Condition	body_y <= body_h && g -> zoom < ZOOM_DEFAULT	402:8:10455:10496	63618	0	True				
ANR	64179	AndExpression	body_y <= body_h && g -> zoom < ZOOM_DEFAULT		63618	0		&&			
ANR	64180	RelationalExpression	body_y <= body_h		63618	0		<=			
ANR	64181	Identifier	body_y		63618	0					
ANR	64182	Identifier	body_h		63618	1					
ANR	64183	RelationalExpression	g -> zoom < ZOOM_DEFAULT		63618	1		<			
ANR	64184	PtrMemberAccess	g -> zoom		63618	0					
ANR	64185	Identifier	g		63618	0					
ANR	64186	Identifier	zoom		63618	1					
ANR	64187	Identifier	ZOOM_DEFAULT		63618	1					
ANR	64188	CompoundStatement		74:5:2089:2107	63618	1					
ANR	64189	IdentifierDeclStatement	"char * dots = ""..."" ;"	403:5:10506:10524	63618	0	True				
ANR	64190	IdentifierDecl	"* dots = ""..."""		63618	0					
ANR	64191	IdentifierDeclType	char *		63618	0					
ANR	64192	Identifier	dots		63618	1					
ANR	64193	AssignmentExpression	"* dots = ""..."""		63618	2		=			
ANR	64194	Identifier	dots		63618	0					
ANR	64195	PrimaryExpression	"""..."""		63618	1					
ANR	64196	IfStatement	if ( delta_x < strlen ( dots ) )		63618	1					
ANR	64197	Condition	delta_x < strlen ( dots )	404:9:10535:10557	63618	0	True				
ANR	64198	RelationalExpression	delta_x < strlen ( dots )		63618	0		<			
ANR	64199	Identifier	delta_x		63618	0					
ANR	64200	CallExpression	strlen ( dots )		63618	1					
ANR	64201	Callee	strlen		63618	0					
ANR	64202	Identifier	strlen		63618	0					
ANR	64203	ArgumentList	dots		63618	1					
ANR	64204	Argument	dots		63618	0					
ANR	64205	Identifier	dots		63618	0					
ANR	64206	CompoundStatement		75:34:2143:2143	63618	1					
ANR	64207	ExpressionStatement	dots += delta_x	405:6:10568:10583	63618	0	True				
ANR	64208	AssignmentExpression	dots += delta_x		63618	0		+=			
ANR	64209	Identifier	dots		63618	0					
ANR	64210	Identifier	delta_x		63618	1					
ANR	64211	ExpressionStatement	W ( dots )	406:6:10591:10599	63618	1	True				
ANR	64212	CallExpression	W ( dots )		63618	0					
ANR	64213	Callee	W		63618	0					
ANR	64214	Identifier	W		63618	0					
ANR	64215	ArgumentList	dots		63618	1					
ANR	64216	Argument	dots		63618	0					
ANR	64217	Identifier	dots		63618	0					
ANR	64218	IfStatement	if ( g -> show_node_bubble )		63618	17					
ANR	64219	Condition	g -> show_node_bubble	415:5:10751:10769	63618	0	True				
ANR	64220	PtrMemberAccess	g -> show_node_bubble		63618	0					
ANR	64221	Identifier	g		63618	0					
ANR	64222	Identifier	show_node_bubble		63618	1					
ANR	64223	CompoundStatement		86:26:2355:2355	63618	1					
ANR	64224	IfStatement	if ( cur )		63618	0					
ANR	64225	Condition	cur	416:6:10780:10782	63618	0	True				
ANR	64226	Identifier	cur		63618	0					
ANR	64227	CompoundStatement		87:11:2368:2368	63618	1					
ANR	64228	ExpressionStatement	"r_cons_canvas_circle ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"	417:3:10790:10871	63618	0	True				
ANR	64229	CallExpression	"r_cons_canvas_circle ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"		63618	0					
ANR	64230	Callee	r_cons_canvas_circle		63618	0					
ANR	64231	Identifier	r_cons_canvas_circle		63618	0					
ANR	64232	ArgumentList	g -> can		63618	1					
ANR	64233	Argument	g -> can		63618	0					
ANR	64234	PtrMemberAccess	g -> can		63618	0					
ANR	64235	Identifier	g		63618	0					
ANR	64236	Identifier	can		63618	1					
ANR	64237	Argument	n -> x		63618	1					
ANR	64238	PtrMemberAccess	n -> x		63618	0					
ANR	64239	Identifier	n		63618	0					
ANR	64240	Identifier	x		63618	1					
ANR	64241	Argument	n -> y		63618	2					
ANR	64242	PtrMemberAccess	n -> y		63618	0					
ANR	64243	Identifier	n		63618	0					
ANR	64244	Identifier	y		63618	1					
ANR	64245	Argument	n -> w		63618	3					
ANR	64246	PtrMemberAccess	n -> w		63618	0					
ANR	64247	Identifier	n		63618	0					
ANR	64248	Identifier	w		63618	1					
ANR	64249	Argument	n -> h		63618	4					
ANR	64250	PtrMemberAccess	n -> h		63618	0					
ANR	64251	Identifier	n		63618	0					
ANR	64252	Identifier	h		63618	1					
ANR	64253	Argument	"get_node_color ( color , cur )"		63618	5					
ANR	64254	CallExpression	"get_node_color ( color , cur )"		63618	0					
ANR	64255	Callee	get_node_color		63618	0					
ANR	64256	Identifier	get_node_color		63618	0					
ANR	64257	ArgumentList	color		63618	1					
ANR	64258	Argument	color		63618	0					
ANR	64259	Identifier	color		63618	0					
ANR	64260	Argument	cur		63618	1					
ANR	64261	Identifier	cur		63618	0					
ANR	64262	ElseStatement	else		63618	0					
ANR	64263	CompoundStatement		89:9:2465:2465	63618	0					
ANR	64264	ExpressionStatement	"r_cons_canvas_circle ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"	419:3:10887:10967	63618	0	True				
ANR	64265	CallExpression	"r_cons_canvas_circle ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"		63618	0					
ANR	64266	Callee	r_cons_canvas_circle		63618	0					
ANR	64267	Identifier	r_cons_canvas_circle		63618	0					
ANR	64268	ArgumentList	g -> can		63618	1					
ANR	64269	Argument	g -> can		63618	0					
ANR	64270	PtrMemberAccess	g -> can		63618	0					
ANR	64271	Identifier	g		63618	0					
ANR	64272	Identifier	can		63618	1					
ANR	64273	Argument	n -> x		63618	1					
ANR	64274	PtrMemberAccess	n -> x		63618	0					
ANR	64275	Identifier	n		63618	0					
ANR	64276	Identifier	x		63618	1					
ANR	64277	Argument	n -> y		63618	2					
ANR	64278	PtrMemberAccess	n -> y		63618	0					
ANR	64279	Identifier	n		63618	0					
ANR	64280	Identifier	y		63618	1					
ANR	64281	Argument	n -> w		63618	3					
ANR	64282	PtrMemberAccess	n -> w		63618	0					
ANR	64283	Identifier	n		63618	0					
ANR	64284	Identifier	w		63618	1					
ANR	64285	Argument	n -> h		63618	4					
ANR	64286	PtrMemberAccess	n -> h		63618	0					
ANR	64287	Identifier	n		63618	0					
ANR	64288	Identifier	h		63618	1					
ANR	64289	Argument	"get_node_color ( color , cur )"		63618	5					
ANR	64290	CallExpression	"get_node_color ( color , cur )"		63618	0					
ANR	64291	Callee	get_node_color		63618	0					
ANR	64292	Identifier	get_node_color		63618	0					
ANR	64293	ArgumentList	color		63618	1					
ANR	64294	Argument	color		63618	0					
ANR	64295	Identifier	color		63618	0					
ANR	64296	Argument	cur		63618	1					
ANR	64297	Identifier	cur		63618	0					
ANR	64298	ElseStatement	else		63618	0					
ANR	64299	CompoundStatement		92:8:2564:2564	63618	0					
ANR	64300	IfStatement	if ( cur )		63618	0					
ANR	64301	Condition	cur	422:6:10989:10991	63618	0	True				
ANR	64302	Identifier	cur		63618	0					
ANR	64303	CompoundStatement		93:11:2577:2577	63618	1					
ANR	64304	ExpressionStatement	"r_cons_canvas_box ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"	423:3:10999:11077	63618	0	True				
ANR	64305	CallExpression	"r_cons_canvas_box ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"		63618	0					
ANR	64306	Callee	r_cons_canvas_box		63618	0					
ANR	64307	Identifier	r_cons_canvas_box		63618	0					
ANR	64308	ArgumentList	g -> can		63618	1					
ANR	64309	Argument	g -> can		63618	0					
ANR	64310	PtrMemberAccess	g -> can		63618	0					
ANR	64311	Identifier	g		63618	0					
ANR	64312	Identifier	can		63618	1					
ANR	64313	Argument	n -> x		63618	1					
ANR	64314	PtrMemberAccess	n -> x		63618	0					
ANR	64315	Identifier	n		63618	0					
ANR	64316	Identifier	x		63618	1					
ANR	64317	Argument	n -> y		63618	2					
ANR	64318	PtrMemberAccess	n -> y		63618	0					
ANR	64319	Identifier	n		63618	0					
ANR	64320	Identifier	y		63618	1					
ANR	64321	Argument	n -> w		63618	3					
ANR	64322	PtrMemberAccess	n -> w		63618	0					
ANR	64323	Identifier	n		63618	0					
ANR	64324	Identifier	w		63618	1					
ANR	64325	Argument	n -> h		63618	4					
ANR	64326	PtrMemberAccess	n -> h		63618	0					
ANR	64327	Identifier	n		63618	0					
ANR	64328	Identifier	h		63618	1					
ANR	64329	Argument	"get_node_color ( color , cur )"		63618	5					
ANR	64330	CallExpression	"get_node_color ( color , cur )"		63618	0					
ANR	64331	Callee	get_node_color		63618	0					
ANR	64332	Identifier	get_node_color		63618	0					
ANR	64333	ArgumentList	color		63618	1					
ANR	64334	Argument	color		63618	0					
ANR	64335	Identifier	color		63618	0					
ANR	64336	Argument	cur		63618	1					
ANR	64337	Identifier	cur		63618	0					
ANR	64338	ElseStatement	else		63618	0					
ANR	64339	CompoundStatement		95:9:2671:2671	63618	0					
ANR	64340	ExpressionStatement	"r_cons_canvas_box ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"	425:3:11093:11171	63618	0	True				
ANR	64341	CallExpression	"r_cons_canvas_box ( g -> can , n -> x , n -> y , n -> w , n -> h , get_node_color ( color , cur ) )"		63618	0					
ANR	64342	Callee	r_cons_canvas_box		63618	0					
ANR	64343	Identifier	r_cons_canvas_box		63618	0					
ANR	64344	ArgumentList	g -> can		63618	1					
ANR	64345	Argument	g -> can		63618	0					
ANR	64346	PtrMemberAccess	g -> can		63618	0					
ANR	64347	Identifier	g		63618	0					
ANR	64348	Identifier	can		63618	1					
ANR	64349	Argument	n -> x		63618	1					
ANR	64350	PtrMemberAccess	n -> x		63618	0					
ANR	64351	Identifier	n		63618	0					
ANR	64352	Identifier	x		63618	1					
ANR	64353	Argument	n -> y		63618	2					
ANR	64354	PtrMemberAccess	n -> y		63618	0					
ANR	64355	Identifier	n		63618	0					
ANR	64356	Identifier	y		63618	1					
ANR	64357	Argument	n -> w		63618	3					
ANR	64358	PtrMemberAccess	n -> w		63618	0					
ANR	64359	Identifier	n		63618	0					
ANR	64360	Identifier	w		63618	1					
ANR	64361	Argument	n -> h		63618	4					
ANR	64362	PtrMemberAccess	n -> h		63618	0					
ANR	64363	Identifier	n		63618	0					
ANR	64364	Identifier	h		63618	1					
ANR	64365	Argument	"get_node_color ( color , cur )"		63618	5					
ANR	64366	CallExpression	"get_node_color ( color , cur )"		63618	0					
ANR	64367	Callee	get_node_color		63618	0					
ANR	64368	Identifier	get_node_color		63618	0					
ANR	64369	ArgumentList	color		63618	1					
ANR	64370	Argument	color		63618	0					
ANR	64371	Identifier	color		63618	0					
ANR	64372	Argument	cur		63618	1					
ANR	64373	Identifier	cur		63618	0					
ANR	64374	ReturnType	static void		63618	1					
ANR	64375	Identifier	normal_RANode_print		63618	2					
ANR	64376	ParameterList	"const RAGraph * g , const RANode * n , int cur"		63618	3					
ANR	64377	Parameter	const RAGraph * g	330:32:8372:8387	63618	0	True				
ANR	64378	ParameterType	const RAGraph *		63618	0					
ANR	64379	Identifier	g		63618	1					
ANR	64380	Parameter	const RANode * n	330:50:8390:8404	63618	1	True				
ANR	64381	ParameterType	const RANode *		63618	0					
ANR	64382	Identifier	n		63618	1					
ANR	64383	Parameter	int cur	330:67:8407:8413	63618	2	True				
ANR	64384	ParameterType	int		63618	0					
ANR	64385	Identifier	cur		63618	1					
ANR	64386	CFGEntryNode	ENTRY		63618		True				
ANR	64387	CFGExitNode	EXIT		63618		True				
ANR	64388	Symbol	ZOOM_DEFAULT		63618						
ANR	64389	Symbol	MARGIN_TEXT_Y		63618						
ANR	64390	Symbol	delta_txt_x		63618						
ANR	64391	Symbol	MARGIN_TEXT_X		63618						
ANR	64392	Symbol	delta_txt_y		63618						
ANR	64393	Symbol	body		63618						
ANR	64394	Symbol	g -> show_node_titles		63618						
ANR	64395	Symbol	body_h		63618						
ANR	64396	Symbol	strlen		63618						
ANR	64397	Symbol	g -> can -> color		63618						
ANR	64398	Symbol	g -> show_node_bubble		63618						
ANR	64399	Symbol	body_y		63618						
ANR	64400	Symbol	body_x		63618						
ANR	64401	Symbol	g -> can -> sx		63618						
ANR	64402	Symbol	g -> can		63618						
ANR	64403	Symbol	g -> can -> sy		63618						
ANR	64404	Symbol	res		63618						
ANR	64405	Symbol	* * g		63618						
ANR	64406	Symbol	n -> h		63618						
ANR	64407	Symbol	BORDER_HEIGHT		63618						
ANR	64408	Symbol	n -> y		63618						
ANR	64409	Symbol	showTitle		63618						
ANR	64410	Symbol	n -> x		63618						
ANR	64411	Symbol	n -> w		63618						
ANR	64412	Symbol	n -> title		63618						
ANR	64413	Symbol	n -> body		63618						
ANR	64414	Symbol	center_y		63618						
ANR	64415	Symbol	center_x		63618						
ANR	64416	Symbol	cur		63618						
ANR	64417	Symbol	delta_x		63618						
ANR	64418	Symbol	delta_y		63618						
ANR	64419	Symbol	color		63618						
ANR	64420	Symbol	g -> show_node_body		63618						
ANR	64421	Symbol	g -> zoom		63618						
ANR	64422	Symbol	G		63618						
ANR	64423	Symbol	Color_RESET		63618						
ANR	64424	Symbol	title		63618						
ANR	64425	Symbol	n -> difftype		63618						
ANR	64426	Symbol	* g -> can		63618						
ANR	64427	Symbol	r_str_ansi_crop		63618						
ANR	64428	Symbol	* * n		63618						
ANR	64429	Symbol	BORDER_WIDTH		63618						
ANR	64430	Symbol	dots		63618						
ANR	64431	Symbol	g		63618						
ANR	64432	Symbol	R_MIN		63618						
ANR	64433	Symbol	n		63618						
ANR	64434	Symbol	* g		63618						
ANR	64435	Symbol	x		63618						
ANR	64436	Symbol	* n		63618						
ANR	64437	Symbol	y		63618						
ANR	64438	Symbol	showBody		63618						
ANR	64439	Symbol	get_node_color		63618						
ANR	64440	Symbol	* n -> body		63618						
ANR	64441	Function	get_crossing_matrix	430:0:11183:14045							
ANR	64442	FunctionDef	"get_crossing_matrix (const RGraph * g , const struct layer_t layers [ ] , int maxlayer , int i , int from_up , int * n_rows)"		64441	0					
ANR	64443	CompoundStatement		433:46:11410:14045	64441	0					
ANR	64444	IdentifierDeclStatement	"int j , len = layers [ i ] . n_nodes ;"	434:1:11413:11443	64441	0	True				
ANR	64445	IdentifierDecl	j		64441	0					
ANR	64446	IdentifierDeclType	int		64441	0					
ANR	64447	Identifier	j		64441	1					
ANR	64448	IdentifierDecl	len = layers [ i ] . n_nodes		64441	1					
ANR	64449	IdentifierDeclType	int		64441	0					
ANR	64450	Identifier	len		64441	1					
ANR	64451	AssignmentExpression	len = layers [ i ] . n_nodes		64441	2		=			
ANR	64452	Identifier	len		64441	0					
ANR	64453	MemberAccess	layers [ i ] . n_nodes		64441	1					
ANR	64454	ArrayIndexing	layers [ i ]		64441	0					
ANR	64455	Identifier	layers		64441	0					
ANR	64456	Identifier	i		64441	1					
ANR	64457	Identifier	n_nodes		64441	1					
ANR	64458	Statement	int	436:1:11447:11449	64441	1	True				
ANR	64459	Statement	*	436:5:11451:11451	64441	2	True				
ANR	64460	Statement	*	436:6:11452:11452	64441	3	True				
ANR	64461	Statement	m	436:7:11453:11453	64441	4	True				
ANR	64462	Statement	=	436:9:11455:11455	64441	5	True				
ANR	64463	Statement	R_NEWS0	436:11:11457:11463	64441	6	True				
ANR	64464	Statement	(	436:19:11465:11465	64441	7	True				
ANR	64465	Statement	int	436:20:11466:11468	64441	8	True				
ANR	64466	Statement	*	436:24:11470:11470	64441	9	True				
ANR	64467	Statement	","	436:25:11471:11471	64441	10	True				
ANR	64468	Statement	len	436:27:11473:11475	64441	11	True				
ANR	64469	Statement	)	436:30:11476:11476	64441	12	True				
ANR	64470	ExpressionStatement		436:31:11477:11477	64441	13	True				
ANR	64471	IfStatement	if ( ! m )		64441	14					
ANR	64472	Condition	! m	437:5:11484:11485	64441	0	True				
ANR	64473	UnaryOperationExpression	! m		64441	0					
ANR	64474	UnaryOperator	!		64441	0					
ANR	64475	Identifier	m		64441	1					
ANR	64476	CompoundStatement		5:9:77:77	64441	1					
ANR	64477	ReturnStatement	return NULL ;	438:2:11492:11503	64441	0	True				
ANR	64478	Identifier	NULL		64441	0					
ANR	64479	ForStatement	for ( j = 0 ; j < len ; j ++ )		64441	15					
ANR	64480	ForInit	j = 0 ;	440:6:11514:11519	64441	0	True				
ANR	64481	AssignmentExpression	j = 0		64441	0		=			
ANR	64482	Identifier	j		64441	0					
ANR	64483	PrimaryExpression	0		64441	1					
ANR	64484	Condition	j < len	440:13:11521:11527	64441	1	True				
ANR	64485	RelationalExpression	j < len		64441	0		<			
ANR	64486	Identifier	j		64441	0					
ANR	64487	Identifier	len		64441	1					
ANR	64488	PostIncDecOperationExpression	j ++	440:22:11530:11532	64441	2	True				
ANR	64489	Identifier	j		64441	0					
ANR	64490	IncDec	++		64441	1					
ANR	64491	CompoundStatement		8:27:124:124	64441	3					
ANR	64492	ExpressionStatement	"m [ j ] = R_NEWS0 ( int , len )"	441:2:11539:11564	64441	0	True				
ANR	64493	AssignmentExpression	"m [ j ] = R_NEWS0 ( int , len )"		64441	0		=			
ANR	64494	ArrayIndexing	m [ j ]		64441	0					
ANR	64495	Identifier	m		64441	0					
ANR	64496	Identifier	j		64441	1					
ANR	64497	CallExpression	"R_NEWS0 ( int , len )"		64441	1					
ANR	64498	Callee	R_NEWS0		64441	0					
ANR	64499	Identifier	R_NEWS0		64441	0					
ANR	64500	ArgumentList	int		64441	1					
ANR	64501	Argument	int		64441	0					
ANR	64502	Identifier	int		64441	0					
ANR	64503	Argument	len		64441	1					
ANR	64504	Identifier	len		64441	0					
ANR	64505	IfStatement	if ( ! m [ j ] )		64441	1					
ANR	64506	Condition	! m [ j ]	442:6:11572:11576	64441	0	True				
ANR	64507	UnaryOperationExpression	! m [ j ]		64441	0					
ANR	64508	UnaryOperator	!		64441	0					
ANR	64509	ArrayIndexing	m [ j ]		64441	1					
ANR	64510	Identifier	m		64441	0					
ANR	64511	Identifier	j		64441	1					
ANR	64512	CompoundStatement		10:13:168:168	64441	1					
ANR	64513	GotoStatement	goto err_row ;	443:3:11584:11596	64441	0	True				
ANR	64514	Identifier	err_row		64441	0					
ANR	64515	IfStatement	if ( i > 0 && from_up )		64441	16					
ANR	64516	Condition	i > 0 && from_up	448:5:11729:11744	64441	0	True				
ANR	64517	AndExpression	i > 0 && from_up		64441	0		&&			
ANR	64518	RelationalExpression	i > 0		64441	0		>			
ANR	64519	Identifier	i		64441	0					
ANR	64520	PrimaryExpression	0		64441	1					
ANR	64521	Identifier	from_up		64441	1					
ANR	64522	CompoundStatement		16:23:336:336	64441	1					
ANR	64523	IfStatement	if ( r_cons_is_breaked ( ) )		64441	0					
ANR	64524	Condition	r_cons_is_breaked ( )	449:6:11755:11774	64441	0	True				
ANR	64525	CallExpression	r_cons_is_breaked ( )		64441	0					
ANR	64526	Callee	r_cons_is_breaked		64441	0					
ANR	64527	Identifier	r_cons_is_breaked		64441	0					
ANR	64528	ArgumentList			64441	1					
ANR	64529	CompoundStatement		17:28:366:366	64441	1					
ANR	64530	GotoStatement	goto err_row ;	450:3:11782:11794	64441	0	True				
ANR	64531	Identifier	err_row		64441	0					
ANR	64532	ForStatement	for ( j = 0 ; j < layers [ i - 1 ] . n_nodes ; j ++ )		64441	1					
ANR	64533	ForInit	j = 0 ;	452:7:11807:11812	64441	0	True				
ANR	64534	AssignmentExpression	j = 0		64441	0		=			
ANR	64535	Identifier	j		64441	0					
ANR	64536	PrimaryExpression	0		64441	1					
ANR	64537	Condition	j < layers [ i - 1 ] . n_nodes	452:14:11814:11838	64441	1	True				
ANR	64538	RelationalExpression	j < layers [ i - 1 ] . n_nodes		64441	0		<			
ANR	64539	Identifier	j		64441	0					
ANR	64540	MemberAccess	layers [ i - 1 ] . n_nodes		64441	1					
ANR	64541	ArrayIndexing	layers [ i - 1 ]		64441	0					
ANR	64542	Identifier	layers		64441	0					
ANR	64543	AdditiveExpression	i - 1		64441	1		-			
ANR	64544	Identifier	i		64441	0					
ANR	64545	PrimaryExpression	1		64441	1					
ANR	64546	Identifier	n_nodes		64441	1					
ANR	64547	PostIncDecOperationExpression	j ++	452:41:11841:11843	64441	2	True				
ANR	64548	Identifier	j		64441	0					
ANR	64549	IncDec	++		64441	1					
ANR	64550	CompoundStatement		24:3:565:579	64441	3					
ANR	64551	IdentifierDeclStatement	const RGraphNode * gj = layers [ i - 1 ] . nodes [ j ] ;	453:3:11851:11896	64441	0	True				
ANR	64552	IdentifierDecl	* gj = layers [ i - 1 ] . nodes [ j ]		64441	0					
ANR	64553	IdentifierDeclType	const RGraphNode *		64441	0					
ANR	64554	Identifier	gj		64441	1					
ANR	64555	AssignmentExpression	* gj = layers [ i - 1 ] . nodes [ j ]		64441	2		=			
ANR	64556	Identifier	gj		64441	0					
ANR	64557	ArrayIndexing	layers [ i - 1 ] . nodes [ j ]		64441	1					
ANR	64558	MemberAccess	layers [ i - 1 ] . nodes		64441	0					
ANR	64559	ArrayIndexing	layers [ i - 1 ]		64441	0					
ANR	64560	Identifier	layers		64441	0					
ANR	64561	AdditiveExpression	i - 1		64441	1		-			
ANR	64562	Identifier	i		64441	0					
ANR	64563	PrimaryExpression	1		64441	1					
ANR	64564	Identifier	nodes		64441	1					
ANR	64565	Identifier	j		64441	1					
ANR	64566	IdentifierDeclStatement	"const RList * neigh = r_graph_get_neighbours ( g , gj ) ;"	454:3:11901:11952	64441	1	True				
ANR	64567	IdentifierDecl	"* neigh = r_graph_get_neighbours ( g , gj )"		64441	0					
ANR	64568	IdentifierDeclType	const RList *		64441	0					
ANR	64569	Identifier	neigh		64441	1					
ANR	64570	AssignmentExpression	"* neigh = r_graph_get_neighbours ( g , gj )"		64441	2		=			
ANR	64571	Identifier	neigh		64441	0					
ANR	64572	CallExpression	"r_graph_get_neighbours ( g , gj )"		64441	1					
ANR	64573	Callee	r_graph_get_neighbours		64441	0					
ANR	64574	Identifier	r_graph_get_neighbours		64441	0					
ANR	64575	ArgumentList	g		64441	1					
ANR	64576	Argument	g		64441	0					
ANR	64577	Identifier	g		64441	0					
ANR	64578	Argument	gj		64441	1					
ANR	64579	Identifier	gj		64441	0					
ANR	64580	IdentifierDeclStatement	RGraphNode * gk ;	455:3:11957:11971	64441	2	True				
ANR	64581	IdentifierDecl	* gk		64441	0					
ANR	64582	IdentifierDeclType	RGraphNode *		64441	0					
ANR	64583	Identifier	gk		64441	1					
ANR	64584	IdentifierDeclStatement	RListIter * itk ;	456:3:11976:11990	64441	3	True				
ANR	64585	IdentifierDecl	* itk		64441	0					
ANR	64586	IdentifierDeclType	RListIter *		64441	0					
ANR	64587	Identifier	itk		64441	1					
ANR	64588	Statement	r_list_foreach	458:3:11996:12009	64441	4	True				
ANR	64589	Statement	(	458:18:12011:12011	64441	5	True				
ANR	64590	Statement	neigh	458:19:12012:12016	64441	6	True				
ANR	64591	Statement	","	458:24:12017:12017	64441	7	True				
ANR	64592	Statement	itk	458:26:12019:12021	64441	8	True				
ANR	64593	Statement	","	458:29:12022:12022	64441	9	True				
ANR	64594	Statement	gk	458:31:12024:12025	64441	10	True				
ANR	64595	Statement	)	458:33:12026:12026	64441	11	True				
ANR	64596	CompoundStatement		27:4:623:628	64441	12					
ANR	64597	IdentifierDeclStatement	int s ;	459:4:12034:12039	64441	0	True				
ANR	64598	IdentifierDecl	s		64441	0					
ANR	64599	IdentifierDeclType	int		64441	0					
ANR	64600	Identifier	s		64441	1					
ANR	64601	IfStatement	if ( gj == gk )		64441	1					
ANR	64602	Condition	gj == gk	461:8:12071:12078	64441	0	True				
ANR	64603	EqualityExpression	gj == gk		64441	0		==			
ANR	64604	Identifier	gj		64441	0					
ANR	64605	Identifier	gk		64441	1					
ANR	64606	CompoundStatement		29:18:670:670	64441	1					
ANR	64607	ContinueStatement	continue ;	462:5:12088:12096	64441	0	True				
ANR	64608	ForStatement	for ( s = 0 ; s < j ; ++ s )		64441	2					
ANR	64609	ForInit	s = 0 ;	464:9:12113:12118	64441	0	True				
ANR	64610	AssignmentExpression	s = 0		64441	0		=			
ANR	64611	Identifier	s		64441	0					
ANR	64612	PrimaryExpression	0		64441	1					
ANR	64613	Condition	s < j	464:16:12120:12124	64441	1	True				
ANR	64614	RelationalExpression	s < j		64441	0		<			
ANR	64615	Identifier	s		64441	0					
ANR	64616	Identifier	j		64441	1					
ANR	64617	UnaryExpression	++ s	464:23:12127:12129	64441	2	True				
ANR	64618	IncDec	++		64441	0					
ANR	64619	Identifier	s		64441	1					
ANR	64620	CompoundStatement		36:5:861:875	64441	3					
ANR	64621	IdentifierDeclStatement	const RGraphNode * gs = layers [ i - 1 ] . nodes [ s ] ;	465:5:12139:12184	64441	0	True				
ANR	64622	IdentifierDecl	* gs = layers [ i - 1 ] . nodes [ s ]		64441	0					
ANR	64623	IdentifierDeclType	const RGraphNode *		64441	0					
ANR	64624	Identifier	gs		64441	1					
ANR	64625	AssignmentExpression	* gs = layers [ i - 1 ] . nodes [ s ]		64441	2		=			
ANR	64626	Identifier	gs		64441	0					
ANR	64627	ArrayIndexing	layers [ i - 1 ] . nodes [ s ]		64441	1					
ANR	64628	MemberAccess	layers [ i - 1 ] . nodes		64441	0					
ANR	64629	ArrayIndexing	layers [ i - 1 ]		64441	0					
ANR	64630	Identifier	layers		64441	0					
ANR	64631	AdditiveExpression	i - 1		64441	1		-			
ANR	64632	Identifier	i		64441	0					
ANR	64633	PrimaryExpression	1		64441	1					
ANR	64634	Identifier	nodes		64441	1					
ANR	64635	Identifier	s		64441	1					
ANR	64636	IdentifierDeclStatement	"const RList * neigh_s = r_graph_get_neighbours ( g , gs ) ;"	466:5:12191:12244	64441	1	True				
ANR	64637	IdentifierDecl	"* neigh_s = r_graph_get_neighbours ( g , gs )"		64441	0					
ANR	64638	IdentifierDeclType	const RList *		64441	0					
ANR	64639	Identifier	neigh_s		64441	1					
ANR	64640	AssignmentExpression	"* neigh_s = r_graph_get_neighbours ( g , gs )"		64441	2		=			
ANR	64641	Identifier	neigh_s		64441	0					
ANR	64642	CallExpression	"r_graph_get_neighbours ( g , gs )"		64441	1					
ANR	64643	Callee	r_graph_get_neighbours		64441	0					
ANR	64644	Identifier	r_graph_get_neighbours		64441	0					
ANR	64645	ArgumentList	g		64441	1					
ANR	64646	Argument	g		64441	0					
ANR	64647	Identifier	g		64441	0					
ANR	64648	Argument	gs		64441	1					
ANR	64649	Identifier	gs		64441	0					
ANR	64650	IdentifierDeclStatement	RGraphNode * gt ;	467:5:12251:12265	64441	2	True				
ANR	64651	IdentifierDecl	* gt		64441	0					
ANR	64652	IdentifierDeclType	RGraphNode *		64441	0					
ANR	64653	Identifier	gt		64441	1					
ANR	64654	IdentifierDeclStatement	RListIter * itt ;	468:5:12272:12286	64441	3	True				
ANR	64655	IdentifierDecl	* itt		64441	0					
ANR	64656	IdentifierDeclType	RListIter *		64441	0					
ANR	64657	Identifier	itt		64441	1					
ANR	64658	Statement	r_list_foreach	470:5:12294:12307	64441	4	True				
ANR	64659	Statement	(	470:20:12309:12309	64441	5	True				
ANR	64660	Statement	neigh_s	470:21:12310:12316	64441	6	True				
ANR	64661	Statement	","	470:28:12317:12317	64441	7	True				
ANR	64662	Statement	itt	470:30:12319:12321	64441	8	True				
ANR	64663	Statement	","	470:33:12322:12322	64441	9	True				
ANR	64664	Statement	gt	470:35:12324:12325	64441	10	True				
ANR	64665	Statement	)	470:37:12326:12326	64441	11	True				
ANR	64666	CompoundStatement		39:6:925:946	64441	12					
ANR	64667	IdentifierDeclStatement	"const RANode * ak , * at ;"	471:6:12336:12357	64441	0	True				
ANR	64668	IdentifierDecl	* ak		64441	0					
ANR	64669	IdentifierDeclType	const RANode *		64441	0					
ANR	64670	Identifier	ak		64441	1					
ANR	64671	IdentifierDecl	* at		64441	1					
ANR	64672	IdentifierDeclType	const RANode *		64441	0					
ANR	64673	Identifier	at		64441	1					
ANR	64674	IfStatement	if ( gt == gk || gt == gs )		64441	1					
ANR	64675	Condition	gt == gk || gt == gs	472:10:12414:12433	64441	0	True				
ANR	64676	OrExpression	gt == gk || gt == gs		64441	0		||			
ANR	64677	EqualityExpression	gt == gk		64441	0		==			
ANR	64678	Identifier	gt		64441	0					
ANR	64679	Identifier	gk		64441	1					
ANR	64680	EqualityExpression	gt == gs		64441	1		==			
ANR	64681	Identifier	gt		64441	0					
ANR	64682	Identifier	gs		64441	1					
ANR	64683	CompoundStatement		40:32:1025:1025	64441	1					
ANR	64684	ContinueStatement	continue ;	473:7:12445:12453	64441	0	True				
ANR	64685	ExpressionStatement	ak = get_anode ( gk )	475:6:12469:12488	64441	2	True				
ANR	64686	AssignmentExpression	ak = get_anode ( gk )		64441	0		=			
ANR	64687	Identifier	ak		64441	0					
ANR	64688	CallExpression	get_anode ( gk )		64441	1					
ANR	64689	Callee	get_anode		64441	0					
ANR	64690	Identifier	get_anode		64441	0					
ANR	64691	ArgumentList	gk		64441	1					
ANR	64692	Argument	gk		64441	0					
ANR	64693	Identifier	gk		64441	0					
ANR	64694	ExpressionStatement	at = get_anode ( gt )	476:6:12496:12515	64441	3	True				
ANR	64695	AssignmentExpression	at = get_anode ( gt )		64441	0		=			
ANR	64696	Identifier	at		64441	0					
ANR	64697	CallExpression	get_anode ( gt )		64441	1					
ANR	64698	Callee	get_anode		64441	0					
ANR	64699	Identifier	get_anode		64441	0					
ANR	64700	ArgumentList	gt		64441	1					
ANR	64701	Argument	gt		64441	0					
ANR	64702	Identifier	gt		64441	0					
ANR	64703	IfStatement	if ( ak -> layer != i || at -> layer != i )		64441	4					
ANR	64704	Condition	ak -> layer != i || at -> layer != i	477:10:12527:12558	64441	0	True				
ANR	64705	OrExpression	ak -> layer != i || at -> layer != i		64441	0		||			
ANR	64706	EqualityExpression	ak -> layer != i		64441	0		!=			
ANR	64707	PtrMemberAccess	ak -> layer		64441	0					
ANR	64708	Identifier	ak		64441	0					
ANR	64709	Identifier	layer		64441	1					
ANR	64710	Identifier	i		64441	1					
ANR	64711	EqualityExpression	at -> layer != i		64441	1		!=			
ANR	64712	PtrMemberAccess	at -> layer		64441	0					
ANR	64713	Identifier	at		64441	0					
ANR	64714	Identifier	layer		64441	1					
ANR	64715	Identifier	i		64441	1					
ANR	64716	CompoundStatement		45:44:1150:1150	64441	1					
ANR	64717	ExpressionStatement	"eprintf ( ""(WARNING) \\""%s\\"" (%d) or \\""%s\\"" (%d) are not on the right layer (%d)\\n"" , ak -> title , ak -> layer , at -> title , at -> layer , i )"	481:7:12692:12845	64441	0	True				
ANR	64718	CallExpression	"eprintf ( ""(WARNING) \\""%s\\"" (%d) or \\""%s\\"" (%d) are not on the right layer (%d)\\n"" , ak -> title , ak -> layer , at -> title , at -> layer , i )"		64441	0					
ANR	64719	Callee	eprintf		64441	0					
ANR	64720	Identifier	eprintf		64441	0					
ANR	64721	ArgumentList	"""(WARNING) \\""%s\\"" (%d) or \\""%s\\"" (%d) are not on the right layer (%d)\\n"""		64441	1					
ANR	64722	Argument	"""(WARNING) \\""%s\\"" (%d) or \\""%s\\"" (%d) are not on the right layer (%d)\\n"""		64441	0					
ANR	64723	PrimaryExpression	"""(WARNING) \\""%s\\"" (%d) or \\""%s\\"" (%d) are not on the right layer (%d)\\n"""		64441	0					
ANR	64724	Argument	ak -> title		64441	1					
ANR	64725	PtrMemberAccess	ak -> title		64441	0					
ANR	64726	Identifier	ak		64441	0					
ANR	64727	Identifier	title		64441	1					
ANR	64728	Argument	ak -> layer		64441	2					
ANR	64729	PtrMemberAccess	ak -> layer		64441	0					
ANR	64730	Identifier	ak		64441	0					
ANR	64731	Identifier	layer		64441	1					
ANR	64732	Argument	at -> title		64441	3					
ANR	64733	PtrMemberAccess	at -> title		64441	0					
ANR	64734	Identifier	at		64441	0					
ANR	64735	Identifier	title		64441	1					
ANR	64736	Argument	at -> layer		64441	4					
ANR	64737	PtrMemberAccess	at -> layer		64441	0					
ANR	64738	Identifier	at		64441	0					
ANR	64739	Identifier	layer		64441	1					
ANR	64740	Argument	i		64441	5					
ANR	64741	Identifier	i		64441	0					
ANR	64742	ContinueStatement	continue ;	486:7:12861:12869	64441	1	True				
ANR	64743	ExpressionStatement	m [ ak -> pos_in_layer ] [ at -> pos_in_layer ] ++	488:6:12885:12924	64441	5	True				
ANR	64744	PostIncDecOperationExpression	m [ ak -> pos_in_layer ] [ at -> pos_in_layer ] ++		64441	0					
ANR	64745	ArrayIndexing	m [ ak -> pos_in_layer ] [ at -> pos_in_layer ]		64441	0					
ANR	64746	ArrayIndexing	m [ ak -> pos_in_layer ]		64441	0					
ANR	64747	Identifier	m		64441	0					
ANR	64748	PtrMemberAccess	ak -> pos_in_layer		64441	1					
ANR	64749	Identifier	ak		64441	0					
ANR	64750	Identifier	pos_in_layer		64441	1					
ANR	64751	PtrMemberAccess	at -> pos_in_layer		64441	1					
ANR	64752	Identifier	at		64441	0					
ANR	64753	Identifier	pos_in_layer		64441	1					
ANR	64754	IncDec	++		64441	1					
ANR	64755	IfStatement	if ( i < maxlayer - 1 && ! from_up )		64441	17					
ANR	64756	Condition	i < maxlayer - 1 && ! from_up	496:5:13014:13041	64441	0	True				
ANR	64757	AndExpression	i < maxlayer - 1 && ! from_up		64441	0		&&			
ANR	64758	RelationalExpression	i < maxlayer - 1		64441	0		<			
ANR	64759	Identifier	i		64441	0					
ANR	64760	AdditiveExpression	maxlayer - 1		64441	1		-			
ANR	64761	Identifier	maxlayer		64441	0					
ANR	64762	PrimaryExpression	1		64441	1					
ANR	64763	UnaryOperationExpression	! from_up		64441	1					
ANR	64764	UnaryOperator	!		64441	0					
ANR	64765	Identifier	from_up		64441	1					
ANR	64766	CompoundStatement		64:35:1633:1633	64441	1					
ANR	64767	IfStatement	if ( r_cons_is_breaked ( ) )		64441	0					
ANR	64768	Condition	r_cons_is_breaked ( )	497:6:13052:13071	64441	0	True				
ANR	64769	CallExpression	r_cons_is_breaked ( )		64441	0					
ANR	64770	Callee	r_cons_is_breaked		64441	0					
ANR	64771	Identifier	r_cons_is_breaked		64441	0					
ANR	64772	ArgumentList			64441	1					
ANR	64773	CompoundStatement		65:28:1663:1663	64441	1					
ANR	64774	GotoStatement	goto err_row ;	498:3:13079:13091	64441	0	True				
ANR	64775	Identifier	err_row		64441	0					
ANR	64776	ForStatement	for ( j = 0 ; j < layers [ i ] . n_nodes ; ++ j )		64441	1					
ANR	64777	ForInit	j = 0 ;	500:7:13104:13109	64441	0	True				
ANR	64778	AssignmentExpression	j = 0		64441	0		=			
ANR	64779	Identifier	j		64441	0					
ANR	64780	PrimaryExpression	0		64441	1					
ANR	64781	Condition	j < layers [ i ] . n_nodes	500:14:13111:13131	64441	1	True				
ANR	64782	RelationalExpression	j < layers [ i ] . n_nodes		64441	0		<			
ANR	64783	Identifier	j		64441	0					
ANR	64784	MemberAccess	layers [ i ] . n_nodes		64441	1					
ANR	64785	ArrayIndexing	layers [ i ]		64441	0					
ANR	64786	Identifier	layers		64441	0					
ANR	64787	Identifier	i		64441	1					
ANR	64788	Identifier	n_nodes		64441	1					
ANR	64789	UnaryExpression	++ j	500:37:13134:13136	64441	2	True				
ANR	64790	IncDec	++		64441	0					
ANR	64791	Identifier	j		64441	1					
ANR	64792	CompoundStatement		73:3:1897:1911	64441	3					
ANR	64793	IdentifierDeclStatement	const RGraphNode * gj = layers [ i ] . nodes [ j ] ;	501:3:13144:13185	64441	0	True				
ANR	64794	IdentifierDecl	* gj = layers [ i ] . nodes [ j ]		64441	0					
ANR	64795	IdentifierDeclType	const RGraphNode *		64441	0					
ANR	64796	Identifier	gj		64441	1					
ANR	64797	AssignmentExpression	* gj = layers [ i ] . nodes [ j ]		64441	2		=			
ANR	64798	Identifier	gj		64441	0					
ANR	64799	ArrayIndexing	layers [ i ] . nodes [ j ]		64441	1					
ANR	64800	MemberAccess	layers [ i ] . nodes		64441	0					
ANR	64801	ArrayIndexing	layers [ i ]		64441	0					
ANR	64802	Identifier	layers		64441	0					
ANR	64803	Identifier	i		64441	1					
ANR	64804	Identifier	nodes		64441	1					
ANR	64805	Identifier	j		64441	1					
ANR	64806	IdentifierDeclStatement	"const RList * neigh = r_graph_get_neighbours ( g , gj ) ;"	502:3:13190:13241	64441	1	True				
ANR	64807	IdentifierDecl	"* neigh = r_graph_get_neighbours ( g , gj )"		64441	0					
ANR	64808	IdentifierDeclType	const RList *		64441	0					
ANR	64809	Identifier	neigh		64441	1					
ANR	64810	AssignmentExpression	"* neigh = r_graph_get_neighbours ( g , gj )"		64441	2		=			
ANR	64811	Identifier	neigh		64441	0					
ANR	64812	CallExpression	"r_graph_get_neighbours ( g , gj )"		64441	1					
ANR	64813	Callee	r_graph_get_neighbours		64441	0					
ANR	64814	Identifier	r_graph_get_neighbours		64441	0					
ANR	64815	ArgumentList	g		64441	1					
ANR	64816	Argument	g		64441	0					
ANR	64817	Identifier	g		64441	0					
ANR	64818	Argument	gj		64441	1					
ANR	64819	Identifier	gj		64441	0					
ANR	64820	IdentifierDeclStatement	"const RANode * ak , * aj = get_anode ( gj ) ;"	503:3:13246:13284	64441	2	True				
ANR	64821	IdentifierDecl	* ak		64441	0					
ANR	64822	IdentifierDeclType	const RANode *		64441	0					
ANR	64823	Identifier	ak		64441	1					
ANR	64824	IdentifierDecl	* aj = get_anode ( gj )		64441	1					
ANR	64825	IdentifierDeclType	const RANode *		64441	0					
ANR	64826	Identifier	aj		64441	1					
ANR	64827	AssignmentExpression	* aj = get_anode ( gj )		64441	2		=			
ANR	64828	Identifier	aj		64441	0					
ANR	64829	CallExpression	get_anode ( gj )		64441	1					
ANR	64830	Callee	get_anode		64441	0					
ANR	64831	Identifier	get_anode		64441	0					
ANR	64832	ArgumentList	gj		64441	1					
ANR	64833	Argument	gj		64441	0					
ANR	64834	Identifier	gj		64441	0					
ANR	64835	IdentifierDeclStatement	RGraphNode * gk ;	504:3:13289:13303	64441	3	True				
ANR	64836	IdentifierDecl	* gk		64441	0					
ANR	64837	IdentifierDeclType	RGraphNode *		64441	0					
ANR	64838	Identifier	gk		64441	1					
ANR	64839	IdentifierDeclStatement	RListIter * itk ;	505:3:13308:13322	64441	4	True				
ANR	64840	IdentifierDecl	* itk		64441	0					
ANR	64841	IdentifierDeclType	RListIter *		64441	0					
ANR	64842	Identifier	itk		64441	1					
ANR	64843	IfStatement	if ( r_cons_is_breaked ( ) )		64441	5					
ANR	64844	Condition	r_cons_is_breaked ( )	507:7:13332:13351	64441	0	True				
ANR	64845	CallExpression	r_cons_is_breaked ( )		64441	0					
ANR	64846	Callee	r_cons_is_breaked		64441	0					
ANR	64847	Identifier	r_cons_is_breaked		64441	0					
ANR	64848	ArgumentList			64441	1					
ANR	64849	CompoundStatement		75:29:1943:1943	64441	1					
ANR	64850	GotoStatement	goto err_row ;	508:4:13360:13372	64441	0	True				
ANR	64851	Identifier	err_row		64441	0					
ANR	64852	Statement	graph_foreach_anode	510:3:13382:13400	64441	6	True				
ANR	64853	Statement	(	510:23:13402:13402	64441	7	True				
ANR	64854	Statement	neigh	510:24:13403:13407	64441	8	True				
ANR	64855	Statement	","	510:29:13408:13408	64441	9	True				
ANR	64856	Statement	itk	510:31:13410:13412	64441	10	True				
ANR	64857	Statement	","	510:34:13413:13413	64441	11	True				
ANR	64858	Statement	gk	510:36:13415:13416	64441	12	True				
ANR	64859	Statement	","	510:38:13417:13417	64441	13	True				
ANR	64860	Statement	ak	510:40:13419:13420	64441	14	True				
ANR	64861	Statement	)	510:42:13421:13421	64441	15	True				
ANR	64862	CompoundStatement		79:4:2018:2023	64441	16					
ANR	64863	IdentifierDeclStatement	int s ;	511:4:13429:13434	64441	0	True				
ANR	64864	IdentifierDecl	s		64441	0					
ANR	64865	IdentifierDeclType	int		64441	0					
ANR	64866	Identifier	s		64441	1					
ANR	64867	ForStatement	for ( s = 0 ; s < layers [ i ] . n_nodes ; ++ s )		64441	1					
ANR	64868	ForInit	s = 0 ;	512:9:13445:13450	64441	0	True				
ANR	64869	AssignmentExpression	s = 0		64441	0		=			
ANR	64870	Identifier	s		64441	0					
ANR	64871	PrimaryExpression	0		64441	1					
ANR	64872	Condition	s < layers [ i ] . n_nodes	512:16:13452:13472	64441	1	True				
ANR	64873	RelationalExpression	s < layers [ i ] . n_nodes		64441	0		<			
ANR	64874	Identifier	s		64441	0					
ANR	64875	MemberAccess	layers [ i ] . n_nodes		64441	1					
ANR	64876	ArrayIndexing	layers [ i ]		64441	0					
ANR	64877	Identifier	layers		64441	0					
ANR	64878	Identifier	i		64441	1					
ANR	64879	Identifier	n_nodes		64441	1					
ANR	64880	UnaryExpression	++ s	512:39:13475:13477	64441	2	True				
ANR	64881	IncDec	++		64441	0					
ANR	64882	Identifier	s		64441	1					
ANR	64883	CompoundStatement		85:5:2193:2231	64441	3					
ANR	64884	IdentifierDeclStatement	const RGraphNode * gs = layers [ i ] . nodes [ s ] ;	513:5:13487:13528	64441	0	True				
ANR	64885	IdentifierDecl	* gs = layers [ i ] . nodes [ s ]		64441	0					
ANR	64886	IdentifierDeclType	const RGraphNode *		64441	0					
ANR	64887	Identifier	gs		64441	1					
ANR	64888	AssignmentExpression	* gs = layers [ i ] . nodes [ s ]		64441	2		=			
ANR	64889	Identifier	gs		64441	0					
ANR	64890	ArrayIndexing	layers [ i ] . nodes [ s ]		64441	1					
ANR	64891	MemberAccess	layers [ i ] . nodes		64441	0					
ANR	64892	ArrayIndexing	layers [ i ]		64441	0					
ANR	64893	Identifier	layers		64441	0					
ANR	64894	Identifier	i		64441	1					
ANR	64895	Identifier	nodes		64441	1					
ANR	64896	Identifier	s		64441	1					
ANR	64897	IdentifierDeclStatement	const RList * neigh_s ;	514:5:13535:13555	64441	1	True				
ANR	64898	IdentifierDecl	* neigh_s		64441	0					
ANR	64899	IdentifierDeclType	const RList *		64441	0					
ANR	64900	Identifier	neigh_s		64441	1					
ANR	64901	IdentifierDeclStatement	RGraphNode * gt ;	515:5:13562:13576	64441	2	True				
ANR	64902	IdentifierDecl	* gt		64441	0					
ANR	64903	IdentifierDeclType	RGraphNode *		64441	0					
ANR	64904	Identifier	gt		64441	1					
ANR	64905	IdentifierDeclStatement	RListIter * itt ;	516:5:13583:13597	64441	3	True				
ANR	64906	IdentifierDecl	* itt		64441	0					
ANR	64907	IdentifierDeclType	RListIter *		64441	0					
ANR	64908	Identifier	itt		64441	1					
ANR	64909	IdentifierDeclStatement	"const RANode * at , * as = get_anode ( gs ) ;"	517:5:13604:13642	64441	4	True				
ANR	64910	IdentifierDecl	* at		64441	0					
ANR	64911	IdentifierDeclType	const RANode *		64441	0					
ANR	64912	Identifier	at		64441	1					
ANR	64913	IdentifierDecl	* as = get_anode ( gs )		64441	1					
ANR	64914	IdentifierDeclType	const RANode *		64441	0					
ANR	64915	Identifier	as		64441	1					
ANR	64916	AssignmentExpression	* as = get_anode ( gs )		64441	2		=			
ANR	64917	Identifier	as		64441	0					
ANR	64918	CallExpression	get_anode ( gs )		64441	1					
ANR	64919	Callee	get_anode		64441	0					
ANR	64920	Identifier	get_anode		64441	0					
ANR	64921	ArgumentList	gs		64441	1					
ANR	64922	Argument	gs		64441	0					
ANR	64923	Identifier	gs		64441	0					
ANR	64924	IfStatement	if ( gs == gj )		64441	5					
ANR	64925	Condition	gs == gj	519:9:13654:13661	64441	0	True				
ANR	64926	EqualityExpression	gs == gj		64441	0		==			
ANR	64927	Identifier	gs		64441	0					
ANR	64928	Identifier	gj		64441	1					
ANR	64929	CompoundStatement		87:19:2253:2253	64441	1					
ANR	64930	ContinueStatement	continue ;	520:6:13672:13680	64441	0	True				
ANR	64931	ExpressionStatement	"neigh_s = r_graph_get_neighbours ( g , gs )"	522:5:13694:13734	64441	6	True				
ANR	64932	AssignmentExpression	"neigh_s = r_graph_get_neighbours ( g , gs )"		64441	0		=			
ANR	64933	Identifier	neigh_s		64441	0					
ANR	64934	CallExpression	"r_graph_get_neighbours ( g , gs )"		64441	1					
ANR	64935	Callee	r_graph_get_neighbours		64441	0					
ANR	64936	Identifier	r_graph_get_neighbours		64441	0					
ANR	64937	ArgumentList	g		64441	1					
ANR	64938	Argument	g		64441	0					
ANR	64939	Identifier	g		64441	0					
ANR	64940	Argument	gs		64441	1					
ANR	64941	Identifier	gs		64441	0					
ANR	64942	Statement	graph_foreach_anode	523:5:13741:13759	64441	7	True				
ANR	64943	Statement	(	523:25:13761:13761	64441	8	True				
ANR	64944	Statement	neigh_s	523:26:13762:13768	64441	9	True				
ANR	64945	Statement	","	523:33:13769:13769	64441	10	True				
ANR	64946	Statement	itt	523:35:13771:13773	64441	11	True				
ANR	64947	Statement	","	523:38:13774:13774	64441	12	True				
ANR	64948	Statement	gt	523:40:13776:13777	64441	13	True				
ANR	64949	Statement	","	523:42:13778:13778	64441	14	True				
ANR	64950	Statement	at	523:44:13780:13781	64441	15	True				
ANR	64951	Statement	)	523:46:13782:13782	64441	16	True				
ANR	64952	CompoundStatement		91:48:2373:2373	64441	17					
ANR	64953	IfStatement	if ( at -> pos_in_layer < ak -> pos_in_layer )		64441	0					
ANR	64954	Condition	at -> pos_in_layer < ak -> pos_in_layer	524:10:13796:13830	64441	0	True				
ANR	64955	RelationalExpression	at -> pos_in_layer < ak -> pos_in_layer		64441	0		<			
ANR	64956	PtrMemberAccess	at -> pos_in_layer		64441	0					
ANR	64957	Identifier	at		64441	0					
ANR	64958	Identifier	pos_in_layer		64441	1					
ANR	64959	PtrMemberAccess	ak -> pos_in_layer		64441	1					
ANR	64960	Identifier	ak		64441	0					
ANR	64961	Identifier	pos_in_layer		64441	1					
ANR	64962	CompoundStatement		92:47:2422:2422	64441	1					
ANR	64963	ExpressionStatement	m [ aj -> pos_in_layer ] [ as -> pos_in_layer ] ++	525:7:13842:13881	64441	0	True				
ANR	64964	PostIncDecOperationExpression	m [ aj -> pos_in_layer ] [ as -> pos_in_layer ] ++		64441	0					
ANR	64965	ArrayIndexing	m [ aj -> pos_in_layer ] [ as -> pos_in_layer ]		64441	0					
ANR	64966	ArrayIndexing	m [ aj -> pos_in_layer ]		64441	0					
ANR	64967	Identifier	m		64441	0					
ANR	64968	PtrMemberAccess	aj -> pos_in_layer		64441	1					
ANR	64969	Identifier	aj		64441	0					
ANR	64970	Identifier	pos_in_layer		64441	1					
ANR	64971	PtrMemberAccess	as -> pos_in_layer		64441	1					
ANR	64972	Identifier	as		64441	0					
ANR	64973	Identifier	pos_in_layer		64441	1					
ANR	64974	IncDec	++		64441	1					
ANR	64975	IfStatement	if ( n_rows )		64441	18					
ANR	64976	Condition	n_rows	533:5:13922:13927	64441	0	True				
ANR	64977	Identifier	n_rows		64441	0					
ANR	64978	CompoundStatement		101:13:2519:2519	64441	1					
ANR	64979	ExpressionStatement	* n_rows = len	534:2:13934:13947	64441	0	True				
ANR	64980	AssignmentExpression	* n_rows = len		64441	0		=			
ANR	64981	UnaryOperationExpression	* n_rows		64441	0					
ANR	64982	UnaryOperator	*		64441	0					
ANR	64983	Identifier	n_rows		64441	1					
ANR	64984	Identifier	len		64441	1					
ANR	64985	ReturnStatement	return m ;	536:1:13953:13961	64441	19	True				
ANR	64986	Identifier	m		64441	0					
ANR	64987	Label	err_row :	538:0:13964:13971	64441	20	True				
ANR	64988	Identifier	err_row		64441	0					
ANR	64989	ForStatement	for ( i = 0 ; i < len ; i ++ )		64441	21					
ANR	64990	ForInit	i = 0 ;	539:6:13979:13984	64441	0	True				
ANR	64991	AssignmentExpression	i = 0		64441	0		=			
ANR	64992	Identifier	i		64441	0					
ANR	64993	PrimaryExpression	0		64441	1					
ANR	64994	Condition	i < len	539:13:13986:13992	64441	1	True				
ANR	64995	RelationalExpression	i < len		64441	0		<			
ANR	64996	Identifier	i		64441	0					
ANR	64997	Identifier	len		64441	1					
ANR	64998	PostIncDecOperationExpression	i ++	539:22:13995:13997	64441	2	True				
ANR	64999	Identifier	i		64441	0					
ANR	65000	IncDec	++		64441	1					
ANR	65001	CompoundStatement		107:27:2589:2589	64441	3					
ANR	65002	ExpressionStatement	free ( m [ i ] )	540:2:14004:14015	64441	0	True				
ANR	65003	CallExpression	free ( m [ i ] )		64441	0					
ANR	65004	Callee	free		64441	0					
ANR	65005	Identifier	free		64441	0					
ANR	65006	ArgumentList	m [ i ]		64441	1					
ANR	65007	Argument	m [ i ]		64441	0					
ANR	65008	ArrayIndexing	m [ i ]		64441	0					
ANR	65009	Identifier	m		64441	0					
ANR	65010	Identifier	i		64441	1					
ANR	65011	ExpressionStatement	free ( m )	542:1:14021:14029	64441	22	True				
ANR	65012	CallExpression	free ( m )		64441	0					
ANR	65013	Callee	free		64441	0					
ANR	65014	Identifier	free		64441	0					
ANR	65015	ArgumentList	m		64441	1					
ANR	65016	Argument	m		64441	0					
ANR	65017	Identifier	m		64441	0					
ANR	65018	ReturnStatement	return NULL ;	543:1:14032:14043	64441	23	True				
ANR	65019	Identifier	NULL		64441	0					
ANR	65020	ReturnType	static int * *		64441	1					
ANR	65021	Identifier	get_crossing_matrix		64441	2					
ANR	65022	ParameterList	"const RGraph * g , const struct layer_t layers [ ] , int maxlayer , int i , int from_up , int * n_rows"		64441	3					
ANR	65023	Parameter	const RGraph * g	430:33:11216:11230	64441	0	True				
ANR	65024	ParameterType	const RGraph *		64441	0					
ANR	65025	Identifier	g		64441	1					
ANR	65026	Parameter	const struct layer_t layers [ ]	431:33:11266:11294	64441	1	True				
ANR	65027	ParameterType	const struct layer_t [ ]		64441	0					
ANR	65028	Identifier	layers		64441	1					
ANR	65029	Parameter	int maxlayer	432:33:11330:11341	64441	2	True				
ANR	65030	ParameterType	int		64441	0					
ANR	65031	Identifier	maxlayer		64441	1					
ANR	65032	Parameter	int i	432:47:11344:11348	64441	3	True				
ANR	65033	ParameterType	int		64441	0					
ANR	65034	Identifier	i		64441	1					
ANR	65035	Parameter	int from_up	432:54:11351:11361	64441	4	True				
ANR	65036	ParameterType	int		64441	0					
ANR	65037	Identifier	from_up		64441	1					
ANR	65038	Parameter	int * n_rows	433:33:11397:11407	64441	5	True				
ANR	65039	ParameterType	int *		64441	0					
ANR	65040	Identifier	n_rows		64441	1					
ANR	65041	CFGEntryNode	ENTRY		64441		True				
ANR	65042	CFGExitNode	EXIT		64441		True				
ANR	65043	Symbol	* * layers		64441						
ANR	65044	Symbol	* as -> pos_in_layer		64441						
ANR	65045	Symbol	* layers [ i ] . nodes		64441						
ANR	65046	Symbol	at -> pos_in_layer		64441						
ANR	65047	Symbol	aj -> pos_in_layer		64441						
ANR	65048	Symbol	len		64441						
ANR	65049	Symbol	* * ak		64441						
ANR	65050	Symbol	* * aj		64441						
ANR	65051	Symbol	layers		64441						
ANR	65052	Symbol	neigh_s		64441						
ANR	65053	Symbol	* * ak -> pos_in_layer		64441						
ANR	65054	Symbol	* * as		64441						
ANR	65055	Symbol	* * at		64441						
ANR	65056	Symbol	* n_rows		64441						
ANR	65057	Symbol	itk		64441						
ANR	65058	Symbol	* * i		64441						
ANR	65059	Symbol	ak -> layer		64441						
ANR	65060	Symbol	NULL		64441						
ANR	65061	Symbol	as -> pos_in_layer		64441						
ANR	65062	Symbol	itt		64441						
ANR	65063	Symbol	aj		64441						
ANR	65064	Symbol	ak		64441						
ANR	65065	Symbol	ak -> pos_in_layer		64441						
ANR	65066	Symbol	n_rows		64441						
ANR	65067	Symbol	ak -> title		64441						
ANR	65068	Symbol	as		64441						
ANR	65069	Symbol	at		64441						
ANR	65070	Symbol	* aj -> pos_in_layer		64441						
ANR	65071	Symbol	* layers [ i - 1 ] . nodes		64441						
ANR	65072	Symbol	from_up		64441						
ANR	65073	Symbol	r_graph_get_neighbours		64441						
ANR	65074	Symbol	* aj		64441						
ANR	65075	Symbol	neigh		64441						
ANR	65076	Symbol	r_cons_is_breaked		64441						
ANR	65077	Symbol	layers [ i ] . n_nodes		64441						
ANR	65078	Symbol	R_NEWS0		64441						
ANR	65079	Symbol	layers [ i - 1 ] . nodes		64441						
ANR	65080	Symbol	* at -> pos_in_layer		64441						
ANR	65081	Symbol	* * m		64441						
ANR	65082	Symbol	* ak -> pos_in_layer		64441						
ANR	65083	Symbol	at -> layer		64441						
ANR	65084	Symbol	gj		64441						
ANR	65085	Symbol	get_anode		64441						
ANR	65086	Symbol	gk		64441						
ANR	65087	Symbol	g		64441						
ANR	65088	Symbol	i		64441						
ANR	65089	Symbol	j		64441						
ANR	65090	Symbol	* layers		64441						
ANR	65091	Symbol	maxlayer		64441						
ANR	65092	Symbol	gs		64441						
ANR	65093	Symbol	m		64441						
ANR	65094	Symbol	gt		64441						
ANR	65095	Symbol	int		64441						
ANR	65096	Symbol	layers [ i ] . nodes		64441						
ANR	65097	Symbol	* * * aj		64441						
ANR	65098	Symbol	* * aj -> pos_in_layer		64441						
ANR	65099	Symbol	* i		64441						
ANR	65100	Symbol	s		64441						
ANR	65101	Symbol	* ak		64441						
ANR	65102	Symbol	* j		64441						
ANR	65103	Symbol	at -> title		64441						
ANR	65104	Symbol	* * * ak		64441						
ANR	65105	Symbol	* m		64441						
ANR	65106	Symbol	* at		64441						
ANR	65107	Symbol	* as		64441						
ANR	65108	Symbol	* s		64441						
ANR	65109	Symbol	layers [ i - 1 ] . n_nodes		64441						
ANR	65110	Function	layer_sweep	546:0:14048:15213							
ANR	65111	FunctionDef	"layer_sweep (const RGraph * g , const struct layer_t layers [ ] , int maxlayer , int i , int from_up)"		65110	0					
ANR	65112	CompoundStatement		547:57:14176:15213	65110	0					
ANR	65113	IdentifierDeclStatement	"RGraphNode * u , * v ;"	548:1:14179:14196	65110	0	True				
ANR	65114	IdentifierDecl	* u		65110	0					
ANR	65115	IdentifierDeclType	RGraphNode *		65110	0					
ANR	65116	Identifier	u		65110	1					
ANR	65117	IdentifierDecl	* v		65110	1					
ANR	65118	IdentifierDeclType	RGraphNode *		65110	0					
ANR	65119	Identifier	v		65110	1					
ANR	65120	IdentifierDeclStatement	"const RANode * au , * av ;"	549:1:14199:14220	65110	1	True				
ANR	65121	IdentifierDecl	* au		65110	0					
ANR	65122	IdentifierDeclType	const RANode *		65110	0					
ANR	65123	Identifier	au		65110	1					
ANR	65124	IdentifierDecl	* av		65110	1					
ANR	65125	IdentifierDeclType	const RANode *		65110	0					
ANR	65126	Identifier	av		65110	1					
ANR	65127	IdentifierDeclStatement	"int n_rows , j , changed = false ;"	550:1:14223:14253	65110	2	True				
ANR	65128	IdentifierDecl	n_rows		65110	0					
ANR	65129	IdentifierDeclType	int		65110	0					
ANR	65130	Identifier	n_rows		65110	1					
ANR	65131	IdentifierDecl	j		65110	1					
ANR	65132	IdentifierDeclType	int		65110	0					
ANR	65133	Identifier	j		65110	1					
ANR	65134	IdentifierDecl	changed = false		65110	2					
ANR	65135	IdentifierDeclType	int		65110	0					
ANR	65136	Identifier	changed		65110	1					
ANR	65137	AssignmentExpression	changed = false		65110	2		=			
ANR	65138	Identifier	false		65110	0					
ANR	65139	Identifier	false		65110	1					
ANR	65140	IdentifierDeclStatement	int len = layers [ i ] . n_nodes ;	551:1:14256:14283	65110	3	True				
ANR	65141	IdentifierDecl	len = layers [ i ] . n_nodes		65110	0					
ANR	65142	IdentifierDeclType	int		65110	0					
ANR	65143	Identifier	len		65110	1					
ANR	65144	AssignmentExpression	len = layers [ i ] . n_nodes		65110	2		=			
ANR	65145	Identifier	len		65110	0					
ANR	65146	MemberAccess	layers [ i ] . n_nodes		65110	1					
ANR	65147	ArrayIndexing	layers [ i ]		65110	0					
ANR	65148	Identifier	layers		65110	0					
ANR	65149	Identifier	i		65110	1					
ANR	65150	Identifier	n_nodes		65110	1					
ANR	65151	IdentifierDeclStatement	"int * * cross_matrix = get_crossing_matrix ( g , layers , maxlayer , i , from_up , & n_rows ) ;"	553:1:14287:14370	65110	4	True				
ANR	65152	IdentifierDecl	"* * cross_matrix = get_crossing_matrix ( g , layers , maxlayer , i , from_up , & n_rows )"		65110	0					
ANR	65153	IdentifierDeclType	int * *		65110	0					
ANR	65154	Identifier	cross_matrix		65110	1					
ANR	65155	AssignmentExpression	"* * cross_matrix = get_crossing_matrix ( g , layers , maxlayer , i , from_up , & n_rows )"		65110	2		=			
ANR	65156	Identifier	cross_matrix		65110	0					
ANR	65157	CallExpression	"get_crossing_matrix ( g , layers , maxlayer , i , from_up , & n_rows )"		65110	1					
ANR	65158	Callee	get_crossing_matrix		65110	0					
ANR	65159	Identifier	get_crossing_matrix		65110	0					
ANR	65160	ArgumentList	g		65110	1					
ANR	65161	Argument	g		65110	0					
ANR	65162	Identifier	g		65110	0					
ANR	65163	Argument	layers		65110	1					
ANR	65164	Identifier	layers		65110	0					
ANR	65165	Argument	maxlayer		65110	2					
ANR	65166	Identifier	maxlayer		65110	0					
ANR	65167	Argument	i		65110	3					
ANR	65168	Identifier	i		65110	0					
ANR	65169	Argument	from_up		65110	4					
ANR	65170	Identifier	from_up		65110	0					
ANR	65171	Argument	& n_rows		65110	5					
ANR	65172	UnaryOperationExpression	& n_rows		65110	0					
ANR	65173	UnaryOperator	&		65110	0					
ANR	65174	Identifier	n_rows		65110	1					
ANR	65175	IfStatement	if ( ! cross_matrix )		65110	5					
ANR	65176	Condition	! cross_matrix	554:5:14377:14389	65110	0	True				
ANR	65177	UnaryOperationExpression	! cross_matrix		65110	0					
ANR	65178	UnaryOperator	!		65110	0					
ANR	65179	Identifier	cross_matrix		65110	1					
ANR	65180	CompoundStatement		8:20:215:215	65110	1					
ANR	65181	ReturnStatement	return - 1 ;	555:2:14396:14405	65110	0	True				
ANR	65182	UnaryOperationExpression	- 1		65110	0					
ANR	65183	UnaryOperator	-		65110	0					
ANR	65184	PrimaryExpression	1		65110	1					
ANR	65185	ForStatement	for ( j = 0 ; j < len - 1 ; ++ j )		65110	6					
ANR	65186	ForInit	j = 0 ;	558:6:14434:14439	65110	0	True				
ANR	65187	AssignmentExpression	j = 0		65110	0		=			
ANR	65188	Identifier	j		65110	0					
ANR	65189	PrimaryExpression	0		65110	1					
ANR	65190	Condition	j < len - 1	558:13:14441:14451	65110	1	True				
ANR	65191	RelationalExpression	j < len - 1		65110	0		<			
ANR	65192	Identifier	j		65110	0					
ANR	65193	AdditiveExpression	len - 1		65110	1		-			
ANR	65194	Identifier	len		65110	0					
ANR	65195	PrimaryExpression	1		65110	1					
ANR	65196	UnaryExpression	++ j	558:26:14454:14456	65110	2	True				
ANR	65197	IncDec	++		65110	0					
ANR	65198	Identifier	j		65110	1					
ANR	65199	CompoundStatement		13:2:286:302	65110	3					
ANR	65200	IdentifierDeclStatement	"int auidx , avidx ;"	559:2:14463:14479	65110	0	True				
ANR	65201	IdentifierDecl	auidx		65110	0					
ANR	65202	IdentifierDeclType	int		65110	0					
ANR	65203	Identifier	auidx		65110	1					
ANR	65204	IdentifierDecl	avidx		65110	1					
ANR	65205	IdentifierDeclType	int		65110	0					
ANR	65206	Identifier	avidx		65110	1					
ANR	65207	ExpressionStatement	u = layers [ i ] . nodes [ j ]	561:2:14484:14506	65110	1	True				
ANR	65208	AssignmentExpression	u = layers [ i ] . nodes [ j ]		65110	0		=			
ANR	65209	Identifier	u		65110	0					
ANR	65210	ArrayIndexing	layers [ i ] . nodes [ j ]		65110	1					
ANR	65211	MemberAccess	layers [ i ] . nodes		65110	0					
ANR	65212	ArrayIndexing	layers [ i ]		65110	0					
ANR	65213	Identifier	layers		65110	0					
ANR	65214	Identifier	i		65110	1					
ANR	65215	Identifier	nodes		65110	1					
ANR	65216	Identifier	j		65110	1					
ANR	65217	ExpressionStatement	v = layers [ i ] . nodes [ j + 1 ]	562:2:14510:14536	65110	2	True				
ANR	65218	AssignmentExpression	v = layers [ i ] . nodes [ j + 1 ]		65110	0		=			
ANR	65219	Identifier	v		65110	0					
ANR	65220	ArrayIndexing	layers [ i ] . nodes [ j + 1 ]		65110	1					
ANR	65221	MemberAccess	layers [ i ] . nodes		65110	0					
ANR	65222	ArrayIndexing	layers [ i ]		65110	0					
ANR	65223	Identifier	layers		65110	0					
ANR	65224	Identifier	i		65110	1					
ANR	65225	Identifier	nodes		65110	1					
ANR	65226	AdditiveExpression	j + 1		65110	1		+			
ANR	65227	Identifier	j		65110	0					
ANR	65228	PrimaryExpression	1		65110	1					
ANR	65229	ExpressionStatement	au = get_anode ( u )	563:2:14540:14558	65110	3	True				
ANR	65230	AssignmentExpression	au = get_anode ( u )		65110	0		=			
ANR	65231	Identifier	au		65110	0					
ANR	65232	CallExpression	get_anode ( u )		65110	1					
ANR	65233	Callee	get_anode		65110	0					
ANR	65234	Identifier	get_anode		65110	0					
ANR	65235	ArgumentList	u		65110	1					
ANR	65236	Argument	u		65110	0					
ANR	65237	Identifier	u		65110	0					
ANR	65238	ExpressionStatement	av = get_anode ( v )	564:2:14562:14580	65110	4	True				
ANR	65239	AssignmentExpression	av = get_anode ( v )		65110	0		=			
ANR	65240	Identifier	av		65110	0					
ANR	65241	CallExpression	get_anode ( v )		65110	1					
ANR	65242	Callee	get_anode		65110	0					
ANR	65243	Identifier	get_anode		65110	0					
ANR	65244	ArgumentList	v		65110	1					
ANR	65245	Argument	v		65110	0					
ANR	65246	Identifier	v		65110	0					
ANR	65247	ExpressionStatement	auidx = au -> pos_in_layer	565:2:14584:14608	65110	5	True				
ANR	65248	AssignmentExpression	auidx = au -> pos_in_layer		65110	0		=			
ANR	65249	Identifier	auidx		65110	0					
ANR	65250	PtrMemberAccess	au -> pos_in_layer		65110	1					
ANR	65251	Identifier	au		65110	0					
ANR	65252	Identifier	pos_in_layer		65110	1					
ANR	65253	ExpressionStatement	avidx = av -> pos_in_layer	566:2:14612:14636	65110	6	True				
ANR	65254	AssignmentExpression	avidx = av -> pos_in_layer		65110	0		=			
ANR	65255	Identifier	avidx		65110	0					
ANR	65256	PtrMemberAccess	av -> pos_in_layer		65110	1					
ANR	65257	Identifier	av		65110	0					
ANR	65258	Identifier	pos_in_layer		65110	1					
ANR	65259	IfStatement	if ( cross_matrix [ auidx ] [ avidx ] > cross_matrix [ avidx ] [ auidx ] )		65110	7					
ANR	65260	Condition	cross_matrix [ auidx ] [ avidx ] > cross_matrix [ avidx ] [ auidx ]	568:6:14645:14699	65110	0	True				
ANR	65261	RelationalExpression	cross_matrix [ auidx ] [ avidx ] > cross_matrix [ avidx ] [ auidx ]		65110	0		>			
ANR	65262	ArrayIndexing	cross_matrix [ auidx ] [ avidx ]		65110	0					
ANR	65263	ArrayIndexing	cross_matrix [ auidx ]		65110	0					
ANR	65264	Identifier	cross_matrix		65110	0					
ANR	65265	Identifier	auidx		65110	1					
ANR	65266	Identifier	avidx		65110	1					
ANR	65267	ArrayIndexing	cross_matrix [ avidx ] [ auidx ]		65110	1					
ANR	65268	ArrayIndexing	cross_matrix [ avidx ]		65110	0					
ANR	65269	Identifier	cross_matrix		65110	0					
ANR	65270	Identifier	avidx		65110	1					
ANR	65271	Identifier	auidx		65110	1					
ANR	65272	CompoundStatement		22:63:525:525	65110	1					
ANR	65273	ExpressionStatement	layers [ i ] . nodes [ j ] = v	570:3:14730:14752	65110	0	True				
ANR	65274	AssignmentExpression	layers [ i ] . nodes [ j ] = v		65110	0		=			
ANR	65275	ArrayIndexing	layers [ i ] . nodes [ j ]		65110	0					
ANR	65276	MemberAccess	layers [ i ] . nodes		65110	0					
ANR	65277	ArrayIndexing	layers [ i ]		65110	0					
ANR	65278	Identifier	layers		65110	0					
ANR	65279	Identifier	i		65110	1					
ANR	65280	Identifier	nodes		65110	1					
ANR	65281	Identifier	j		65110	1					
ANR	65282	Identifier	v		65110	1					
ANR	65283	ExpressionStatement	layers [ i ] . nodes [ j + 1 ] = u	571:3:14757:14783	65110	1	True				
ANR	65284	AssignmentExpression	layers [ i ] . nodes [ j + 1 ] = u		65110	0		=			
ANR	65285	ArrayIndexing	layers [ i ] . nodes [ j + 1 ]		65110	0					
ANR	65286	MemberAccess	layers [ i ] . nodes		65110	0					
ANR	65287	ArrayIndexing	layers [ i ]		65110	0					
ANR	65288	Identifier	layers		65110	0					
ANR	65289	Identifier	i		65110	1					
ANR	65290	Identifier	nodes		65110	1					
ANR	65291	AdditiveExpression	j + 1		65110	1		+			
ANR	65292	Identifier	j		65110	0					
ANR	65293	PrimaryExpression	1		65110	1					
ANR	65294	Identifier	u		65110	1					
ANR	65295	ExpressionStatement	changed = true	572:3:14788:14802	65110	2	True				
ANR	65296	AssignmentExpression	changed = true		65110	0		=			
ANR	65297	Identifier	changed		65110	0					
ANR	65298	Identifier	true		65110	1					
ANR	65299	ForStatement	for ( j = 0 ; j < layers [ i ] . n_nodes ; ++ j )		65110	7					
ANR	65300	ForInit	j = 0 ;	579:6:15003:15008	65110	0	True				
ANR	65301	AssignmentExpression	j = 0		65110	0		=			
ANR	65302	Identifier	j		65110	0					
ANR	65303	PrimaryExpression	0		65110	1					
ANR	65304	Condition	j < layers [ i ] . n_nodes	579:13:15010:15030	65110	1	True				
ANR	65305	RelationalExpression	j < layers [ i ] . n_nodes		65110	0		<			
ANR	65306	Identifier	j		65110	0					
ANR	65307	MemberAccess	layers [ i ] . n_nodes		65110	1					
ANR	65308	ArrayIndexing	layers [ i ]		65110	0					
ANR	65309	Identifier	layers		65110	0					
ANR	65310	Identifier	i		65110	1					
ANR	65311	Identifier	n_nodes		65110	1					
ANR	65312	UnaryExpression	++ j	579:36:15033:15035	65110	2	True				
ANR	65313	IncDec	++		65110	0					
ANR	65314	Identifier	j		65110	1					
ANR	65315	CompoundStatement		34:2:865:907	65110	3					
ANR	65316	IdentifierDeclStatement	RANode * n = get_anode ( layers [ i ] . nodes [ j ] ) ;	580:2:15042:15084	65110	0	True				
ANR	65317	IdentifierDecl	* n = get_anode ( layers [ i ] . nodes [ j ] )		65110	0					
ANR	65318	IdentifierDeclType	RANode *		65110	0					
ANR	65319	Identifier	n		65110	1					
ANR	65320	AssignmentExpression	* n = get_anode ( layers [ i ] . nodes [ j ] )		65110	2		=			
ANR	65321	Identifier	n		65110	0					
ANR	65322	CallExpression	get_anode ( layers [ i ] . nodes [ j ] )		65110	1					
ANR	65323	Callee	get_anode		65110	0					
ANR	65324	Identifier	get_anode		65110	0					
ANR	65325	ArgumentList	layers [ i ] . nodes [ j ]		65110	1					
ANR	65326	Argument	layers [ i ] . nodes [ j ]		65110	0					
ANR	65327	ArrayIndexing	layers [ i ] . nodes [ j ]		65110	0					
ANR	65328	MemberAccess	layers [ i ] . nodes		65110	0					
ANR	65329	ArrayIndexing	layers [ i ]		65110	0					
ANR	65330	Identifier	layers		65110	0					
ANR	65331	Identifier	i		65110	1					
ANR	65332	Identifier	nodes		65110	1					
ANR	65333	Identifier	j		65110	1					
ANR	65334	ExpressionStatement	n -> pos_in_layer = j	581:2:15088:15107	65110	1	True				
ANR	65335	AssignmentExpression	n -> pos_in_layer = j		65110	0		=			
ANR	65336	PtrMemberAccess	n -> pos_in_layer		65110	0					
ANR	65337	Identifier	n		65110	0					
ANR	65338	Identifier	pos_in_layer		65110	1					
ANR	65339	Identifier	j		65110	1					
ANR	65340	ForStatement	for ( j = 0 ; j < n_rows ; ++ j )		65110	8					
ANR	65341	ForInit	j = 0 ;	584:6:15119:15124	65110	0	True				
ANR	65342	AssignmentExpression	j = 0		65110	0		=			
ANR	65343	Identifier	j		65110	0					
ANR	65344	PrimaryExpression	0		65110	1					
ANR	65345	Condition	j < n_rows	584:13:15126:15135	65110	1	True				
ANR	65346	RelationalExpression	j < n_rows		65110	0		<			
ANR	65347	Identifier	j		65110	0					
ANR	65348	Identifier	n_rows		65110	1					
ANR	65349	UnaryExpression	++ j	584:25:15138:15140	65110	2	True				
ANR	65350	IncDec	++		65110	0					
ANR	65351	Identifier	j		65110	1					
ANR	65352	CompoundStatement		38:30:966:966	65110	3					
ANR	65353	ExpressionStatement	free ( cross_matrix [ j ] )	585:2:15147:15169	65110	0	True				
ANR	65354	CallExpression	free ( cross_matrix [ j ] )		65110	0					
ANR	65355	Callee	free		65110	0					
ANR	65356	Identifier	free		65110	0					
ANR	65357	ArgumentList	cross_matrix [ j ]		65110	1					
ANR	65358	Argument	cross_matrix [ j ]		65110	0					
ANR	65359	ArrayIndexing	cross_matrix [ j ]		65110	0					
ANR	65360	Identifier	cross_matrix		65110	0					
ANR	65361	Identifier	j		65110	1					
ANR	65362	ExpressionStatement	free ( cross_matrix )	587:1:15175:15194	65110	9	True				
ANR	65363	CallExpression	free ( cross_matrix )		65110	0					
ANR	65364	Callee	free		65110	0					
ANR	65365	Identifier	free		65110	0					
ANR	65366	ArgumentList	cross_matrix		65110	1					
ANR	65367	Argument	cross_matrix		65110	0					
ANR	65368	Identifier	cross_matrix		65110	0					
ANR	65369	ReturnStatement	return changed ;	588:1:15197:15211	65110	10	True				
ANR	65370	Identifier	changed		65110	0					
ANR	65371	ReturnType	static int		65110	1					
ANR	65372	Identifier	layer_sweep		65110	2					
ANR	65373	ParameterList	"const RGraph * g , const struct layer_t layers [ ] , int maxlayer , int i , int from_up"		65110	3					
ANR	65374	Parameter	const RGraph * g	546:23:14071:14085	65110	0	True				
ANR	65375	ParameterType	const RGraph *		65110	0					
ANR	65376	Identifier	g		65110	1					
ANR	65377	Parameter	const struct layer_t layers [ ]	546:40:14088:14116	65110	1	True				
ANR	65378	ParameterType	const struct layer_t [ ]		65110	0					
ANR	65379	Identifier	layers		65110	1					
ANR	65380	Parameter	int maxlayer	547:23:14142:14153	65110	2	True				
ANR	65381	ParameterType	int		65110	0					
ANR	65382	Identifier	maxlayer		65110	1					
ANR	65383	Parameter	int i	547:37:14156:14160	65110	3	True				
ANR	65384	ParameterType	int		65110	0					
ANR	65385	Identifier	i		65110	1					
ANR	65386	Parameter	int from_up	547:44:14163:14173	65110	4	True				
ANR	65387	ParameterType	int		65110	0					
ANR	65388	Identifier	from_up		65110	1					
ANR	65389	CFGEntryNode	ENTRY		65110		True				
ANR	65390	CFGExitNode	EXIT		65110		True				
ANR	65391	Symbol	* * layers		65110						
ANR	65392	Symbol	from_up		65110						
ANR	65393	Symbol	auidx		65110						
ANR	65394	Symbol	* layers [ i ] . nodes		65110						
ANR	65395	Symbol	layers [ i ] . n_nodes		65110						
ANR	65396	Symbol	* * auidx		65110						
ANR	65397	Symbol	len		65110						
ANR	65398	Symbol	layers		65110						
ANR	65399	Symbol	* avidx		65110						
ANR	65400	Symbol	& n_rows		65110						
ANR	65401	Symbol	get_crossing_matrix		65110						
ANR	65402	Symbol	* cross_matrix		65110						
ANR	65403	Symbol	* * i		65110						
ANR	65404	Symbol	get_anode		65110						
ANR	65405	Symbol	av -> pos_in_layer		65110						
ANR	65406	Symbol	cross_matrix		65110						
ANR	65407	Symbol	avidx		65110						
ANR	65408	Symbol	g		65110						
ANR	65409	Symbol	false		65110						
ANR	65410	Symbol	* * cross_matrix		65110						
ANR	65411	Symbol	i		65110						
ANR	65412	Symbol	j		65110						
ANR	65413	Symbol	* layers		65110						
ANR	65414	Symbol	maxlayer		65110						
ANR	65415	Symbol	n		65110						
ANR	65416	Symbol	n_rows		65110						
ANR	65417	Symbol	layers [ i ] . nodes		65110						
ANR	65418	Symbol	* * avidx		65110						
ANR	65419	Symbol	* i		65110						
ANR	65420	Symbol	n -> pos_in_layer		65110						
ANR	65421	Symbol	au		65110						
ANR	65422	Symbol	* j		65110						
ANR	65423	Symbol	u		65110						
ANR	65424	Symbol	av		65110						
ANR	65425	Symbol	v		65110						
ANR	65426	Symbol	* av		65110						
ANR	65427	Symbol	true		65110						
ANR	65428	Symbol	* n		65110						
ANR	65429	Symbol	* au		65110						
ANR	65430	Symbol	au -> pos_in_layer		65110						
ANR	65431	Symbol	* auidx		65110						
ANR	65432	Symbol	changed		65110						
ANR	65433	Function	view_cyclic_edge	591:0:15216:15512							
ANR	65434	FunctionDef	"view_cyclic_edge (const RGraphEdge * e , const RGraphVisitor * vis)"		65433	0					
ANR	65435	CompoundStatement		591:76:15292:15512	65433	0					
ANR	65436	IdentifierDeclStatement	const RAGraph * g = ( RAGraph * ) vis -> data ;	592:1:15295:15335	65433	0	True				
ANR	65437	IdentifierDecl	* g = ( RAGraph * ) vis -> data		65433	0					
ANR	65438	IdentifierDeclType	const RAGraph *		65433	0					
ANR	65439	Identifier	g		65433	1					
ANR	65440	AssignmentExpression	* g = ( RAGraph * ) vis -> data		65433	2		=			
ANR	65441	Identifier	g		65433	0					
ANR	65442	CastExpression	( RAGraph * ) vis -> data		65433	1					
ANR	65443	CastTarget	RAGraph *		65433	0					
ANR	65444	PtrMemberAccess	vis -> data		65433	1					
ANR	65445	Identifier	vis		65433	0					
ANR	65446	Identifier	data		65433	1					
ANR	65447	IdentifierDeclStatement	RGraphEdge * new_e = R_NEW0 ( RGraphEdge ) ;	593:1:15338:15377	65433	1	True				
ANR	65448	IdentifierDecl	* new_e = R_NEW0 ( RGraphEdge )		65433	0					
ANR	65449	IdentifierDeclType	RGraphEdge *		65433	0					
ANR	65450	Identifier	new_e		65433	1					
ANR	65451	AssignmentExpression	* new_e = R_NEW0 ( RGraphEdge )		65433	2		=			
ANR	65452	Identifier	new_e		65433	0					
ANR	65453	CallExpression	R_NEW0 ( RGraphEdge )		65433	1					
ANR	65454	Callee	R_NEW0		65433	0					
ANR	65455	Identifier	R_NEW0		65433	0					
ANR	65456	ArgumentList	RGraphEdge		65433	1					
ANR	65457	Argument	RGraphEdge		65433	0					
ANR	65458	Identifier	RGraphEdge		65433	0					
ANR	65459	IfStatement	if ( ! new_e )		65433	2					
ANR	65460	Condition	! new_e	594:5:15384:15389	65433	0	True				
ANR	65461	UnaryOperationExpression	! new_e		65433	0					
ANR	65462	UnaryOperator	!		65433	0					
ANR	65463	Identifier	new_e		65433	1					
ANR	65464	CompoundStatement		4:13:99:99	65433	1					
ANR	65465	ReturnStatement	return ;	595:2:15396:15402	65433	0	True				
ANR	65466	ExpressionStatement	new_e -> from = e -> from	597:1:15408:15429	65433	3	True				
ANR	65467	AssignmentExpression	new_e -> from = e -> from		65433	0		=			
ANR	65468	PtrMemberAccess	new_e -> from		65433	0					
ANR	65469	Identifier	new_e		65433	0					
ANR	65470	Identifier	from		65433	1					
ANR	65471	PtrMemberAccess	e -> from		65433	1					
ANR	65472	Identifier	e		65433	0					
ANR	65473	Identifier	from		65433	1					
ANR	65474	ExpressionStatement	new_e -> to = e -> to	598:1:15432:15449	65433	4	True				
ANR	65475	AssignmentExpression	new_e -> to = e -> to		65433	0		=			
ANR	65476	PtrMemberAccess	new_e -> to		65433	0					
ANR	65477	Identifier	new_e		65433	0					
ANR	65478	Identifier	to		65433	1					
ANR	65479	PtrMemberAccess	e -> to		65433	1					
ANR	65480	Identifier	e		65433	0					
ANR	65481	Identifier	to		65433	1					
ANR	65482	ExpressionStatement	new_e -> nth = e -> nth	599:1:15452:15471	65433	5	True				
ANR	65483	AssignmentExpression	new_e -> nth = e -> nth		65433	0		=			
ANR	65484	PtrMemberAccess	new_e -> nth		65433	0					
ANR	65485	Identifier	new_e		65433	0					
ANR	65486	Identifier	nth		65433	1					
ANR	65487	PtrMemberAccess	e -> nth		65433	1					
ANR	65488	Identifier	e		65433	0					
ANR	65489	Identifier	nth		65433	1					
ANR	65490	ExpressionStatement	"r_list_append ( g -> back_edges , new_e )"	600:1:15474:15510	65433	6	True				
ANR	65491	CallExpression	"r_list_append ( g -> back_edges , new_e )"		65433	0					
ANR	65492	Callee	r_list_append		65433	0					
ANR	65493	Identifier	r_list_append		65433	0					
ANR	65494	ArgumentList	g -> back_edges		65433	1					
ANR	65495	Argument	g -> back_edges		65433	0					
ANR	65496	PtrMemberAccess	g -> back_edges		65433	0					
ANR	65497	Identifier	g		65433	0					
ANR	65498	Identifier	back_edges		65433	1					
ANR	65499	Argument	new_e		65433	1					
ANR	65500	Identifier	new_e		65433	0					
ANR	65501	ReturnType	static void		65433	1					
ANR	65502	Identifier	view_cyclic_edge		65433	2					
ANR	65503	ParameterList	"const RGraphEdge * e , const RGraphVisitor * vis"		65433	3					
ANR	65504	Parameter	const RGraphEdge * e	591:29:15245:15263	65433	0	True				
ANR	65505	ParameterType	const RGraphEdge *		65433	0					
ANR	65506	Identifier	e		65433	1					
ANR	65507	Parameter	const RGraphVisitor * vis	591:50:15266:15289	65433	1	True				
ANR	65508	ParameterType	const RGraphVisitor *		65433	0					
ANR	65509	Identifier	vis		65433	1					
ANR	65510	CFGEntryNode	ENTRY		65433		True				
ANR	65511	CFGExitNode	EXIT		65433		True				
ANR	65512	Symbol	vis		65433						
ANR	65513	Symbol	e -> from		65433						
ANR	65514	Symbol	e		65433						
ANR	65515	Symbol	RGraphEdge		65433						
ANR	65516	Symbol	g		65433						
ANR	65517	Symbol	e -> to		65433						
ANR	65518	Symbol	* vis		65433						
ANR	65519	Symbol	e -> nth		65433						
ANR	65520	Symbol	* new_e		65433						
ANR	65521	Symbol	g -> back_edges		65433						
ANR	65522	Symbol	new_e -> from		65433						
ANR	65523	Symbol	* e		65433						
ANR	65524	Symbol	R_NEW0		65433						
ANR	65525	Symbol	* g		65433						
ANR	65526	Symbol	new_e -> to		65433						
ANR	65527	Symbol	new_e -> nth		65433						
ANR	65528	Symbol	new_e		65433						
ANR	65529	Symbol	vis -> data		65433						
ANR	65530	Function	view_dummy	603:0:15515:15960							
ANR	65531	FunctionDef	"view_dummy (const RGraphEdge * e , const RGraphVisitor * vis)"		65530	0					
ANR	65532	CompoundStatement		603:70:15585:15960	65530	0					
ANR	65533	IdentifierDeclStatement	const RANode * a = get_anode ( e -> from ) ;	604:1:15588:15625	65530	0	True				
ANR	65534	IdentifierDecl	* a = get_anode ( e -> from )		65530	0					
ANR	65535	IdentifierDeclType	const RANode *		65530	0					
ANR	65536	Identifier	a		65530	1					
ANR	65537	AssignmentExpression	* a = get_anode ( e -> from )		65530	2		=			
ANR	65538	Identifier	a		65530	0					
ANR	65539	CallExpression	get_anode ( e -> from )		65530	1					
ANR	65540	Callee	get_anode		65530	0					
ANR	65541	Identifier	get_anode		65530	0					
ANR	65542	ArgumentList	e -> from		65530	1					
ANR	65543	Argument	e -> from		65530	0					
ANR	65544	PtrMemberAccess	e -> from		65530	0					
ANR	65545	Identifier	e		65530	0					
ANR	65546	Identifier	from		65530	1					
ANR	65547	IdentifierDeclStatement	const RANode * b = get_anode ( e -> to ) ;	605:1:15628:15663	65530	1	True				
ANR	65548	IdentifierDecl	* b = get_anode ( e -> to )		65530	0					
ANR	65549	IdentifierDeclType	const RANode *		65530	0					
ANR	65550	Identifier	b		65530	1					
ANR	65551	AssignmentExpression	* b = get_anode ( e -> to )		65530	2		=			
ANR	65552	Identifier	b		65530	0					
ANR	65553	CallExpression	get_anode ( e -> to )		65530	1					
ANR	65554	Callee	get_anode		65530	0					
ANR	65555	Identifier	get_anode		65530	0					
ANR	65556	ArgumentList	e -> to		65530	1					
ANR	65557	Argument	e -> to		65530	0					
ANR	65558	PtrMemberAccess	e -> to		65530	0					
ANR	65559	Identifier	e		65530	0					
ANR	65560	Identifier	to		65530	1					
ANR	65561	IdentifierDeclStatement	RList * long_edges = ( RList * ) vis -> data ;	606:1:15666:15705	65530	2	True				
ANR	65562	IdentifierDecl	* long_edges = ( RList * ) vis -> data		65530	0					
ANR	65563	IdentifierDeclType	RList *		65530	0					
ANR	65564	Identifier	long_edges		65530	1					
ANR	65565	AssignmentExpression	* long_edges = ( RList * ) vis -> data		65530	2		=			
ANR	65566	Identifier	long_edges		65530	0					
ANR	65567	CastExpression	( RList * ) vis -> data		65530	1					
ANR	65568	CastTarget	RList *		65530	0					
ANR	65569	PtrMemberAccess	vis -> data		65530	1					
ANR	65570	Identifier	vis		65530	0					
ANR	65571	Identifier	data		65530	1					
ANR	65572	IfStatement	if ( ! a || ! b )		65530	3					
ANR	65573	Condition	! a || ! b	607:5:15712:15719	65530	0	True				
ANR	65574	OrExpression	! a || ! b		65530	0		||			
ANR	65575	UnaryOperationExpression	! a		65530	0					
ANR	65576	UnaryOperator	!		65530	0					
ANR	65577	Identifier	a		65530	1					
ANR	65578	UnaryOperationExpression	! b		65530	1					
ANR	65579	UnaryOperator	!		65530	0					
ANR	65580	Identifier	b		65530	1					
ANR	65581	CompoundStatement		5:15:136:136	65530	1					
ANR	65582	ReturnStatement	return ;	608:2:15726:15732	65530	0	True				
ANR	65583	IfStatement	if ( R_ABS ( a -> layer - b -> layer ) > 1 )		65530	4					
ANR	65584	Condition	R_ABS ( a -> layer - b -> layer ) > 1	610:5:15742:15772	65530	0	True				
ANR	65585	RelationalExpression	R_ABS ( a -> layer - b -> layer ) > 1		65530	0		>			
ANR	65586	CallExpression	R_ABS ( a -> layer - b -> layer )		65530	0					
ANR	65587	Callee	R_ABS		65530	0					
ANR	65588	Identifier	R_ABS		65530	0					
ANR	65589	ArgumentList	a -> layer - b -> layer		65530	1					
ANR	65590	Argument	a -> layer - b -> layer		65530	0					
ANR	65591	AdditiveExpression	a -> layer - b -> layer		65530	0		-			
ANR	65592	PtrMemberAccess	a -> layer		65530	0					
ANR	65593	Identifier	a		65530	0					
ANR	65594	Identifier	layer		65530	1					
ANR	65595	PtrMemberAccess	b -> layer		65530	1					
ANR	65596	Identifier	b		65530	0					
ANR	65597	Identifier	layer		65530	1					
ANR	65598	PrimaryExpression	1		65530	1					
ANR	65599	CompoundStatement		9:2:193:232	65530	1					
ANR	65600	IdentifierDeclStatement	RGraphEdge * new_e = R_NEW0 ( RGraphEdge ) ;	611:2:15779:15818	65530	0	True				
ANR	65601	IdentifierDecl	* new_e = R_NEW0 ( RGraphEdge )		65530	0					
ANR	65602	IdentifierDeclType	RGraphEdge *		65530	0					
ANR	65603	Identifier	new_e		65530	1					
ANR	65604	AssignmentExpression	* new_e = R_NEW0 ( RGraphEdge )		65530	2		=			
ANR	65605	Identifier	new_e		65530	0					
ANR	65606	CallExpression	R_NEW0 ( RGraphEdge )		65530	1					
ANR	65607	Callee	R_NEW0		65530	0					
ANR	65608	Identifier	R_NEW0		65530	0					
ANR	65609	ArgumentList	RGraphEdge		65530	1					
ANR	65610	Argument	RGraphEdge		65530	0					
ANR	65611	Identifier	RGraphEdge		65530	0					
ANR	65612	IfStatement	if ( ! new_e )		65530	1					
ANR	65613	Condition	! new_e	612:6:15826:15831	65530	0	True				
ANR	65614	UnaryOperationExpression	! new_e		65530	0					
ANR	65615	UnaryOperator	!		65530	0					
ANR	65616	Identifier	new_e		65530	1					
ANR	65617	CompoundStatement		10:14:248:248	65530	1					
ANR	65618	ReturnStatement	return ;	613:3:15839:15845	65530	0	True				
ANR	65619	ExpressionStatement	new_e -> from = e -> from	615:2:15853:15874	65530	2	True				
ANR	65620	AssignmentExpression	new_e -> from = e -> from		65530	0		=			
ANR	65621	PtrMemberAccess	new_e -> from		65530	0					
ANR	65622	Identifier	new_e		65530	0					
ANR	65623	Identifier	from		65530	1					
ANR	65624	PtrMemberAccess	e -> from		65530	1					
ANR	65625	Identifier	e		65530	0					
ANR	65626	Identifier	from		65530	1					
ANR	65627	ExpressionStatement	new_e -> to = e -> to	616:2:15878:15895	65530	3	True				
ANR	65628	AssignmentExpression	new_e -> to = e -> to		65530	0		=			
ANR	65629	PtrMemberAccess	new_e -> to		65530	0					
ANR	65630	Identifier	new_e		65530	0					
ANR	65631	Identifier	to		65530	1					
ANR	65632	PtrMemberAccess	e -> to		65530	1					
ANR	65633	Identifier	e		65530	0					
ANR	65634	Identifier	to		65530	1					
ANR	65635	ExpressionStatement	new_e -> nth = e -> nth	617:2:15899:15918	65530	4	True				
ANR	65636	AssignmentExpression	new_e -> nth = e -> nth		65530	0		=			
ANR	65637	PtrMemberAccess	new_e -> nth		65530	0					
ANR	65638	Identifier	new_e		65530	0					
ANR	65639	Identifier	nth		65530	1					
ANR	65640	PtrMemberAccess	e -> nth		65530	1					
ANR	65641	Identifier	e		65530	0					
ANR	65642	Identifier	nth		65530	1					
ANR	65643	ExpressionStatement	"r_list_append ( long_edges , new_e )"	618:2:15922:15955	65530	5	True				
ANR	65644	CallExpression	"r_list_append ( long_edges , new_e )"		65530	0					
ANR	65645	Callee	r_list_append		65530	0					
ANR	65646	Identifier	r_list_append		65530	0					
ANR	65647	ArgumentList	long_edges		65530	1					
ANR	65648	Argument	long_edges		65530	0					
ANR	65649	Identifier	long_edges		65530	0					
ANR	65650	Argument	new_e		65530	1					
ANR	65651	Identifier	new_e		65530	0					
ANR	65652	ReturnType	static void		65530	1					
ANR	65653	Identifier	view_dummy		65530	2					
ANR	65654	ParameterList	"const RGraphEdge * e , const RGraphVisitor * vis"		65530	3					
ANR	65655	Parameter	const RGraphEdge * e	603:23:15538:15556	65530	0	True				
ANR	65656	ParameterType	const RGraphEdge *		65530	0					
ANR	65657	Identifier	e		65530	1					
ANR	65658	Parameter	const RGraphVisitor * vis	603:44:15559:15582	65530	1	True				
ANR	65659	ParameterType	const RGraphVisitor *		65530	0					
ANR	65660	Identifier	vis		65530	1					
ANR	65661	CFGEntryNode	ENTRY		65530		True				
ANR	65662	CFGExitNode	EXIT		65530		True				
ANR	65663	Symbol	vis		65530						
ANR	65664	Symbol	a		65530						
ANR	65665	Symbol	b		65530						
ANR	65666	Symbol	get_anode		65530						
ANR	65667	Symbol	e -> from		65530						
ANR	65668	Symbol	e		65530						
ANR	65669	Symbol	RGraphEdge		65530						
ANR	65670	Symbol	e -> to		65530						
ANR	65671	Symbol	* vis		65530						
ANR	65672	Symbol	R_ABS		65530						
ANR	65673	Symbol	* a		65530						
ANR	65674	Symbol	* b		65530						
ANR	65675	Symbol	e -> nth		65530						
ANR	65676	Symbol	* new_e		65530						
ANR	65677	Symbol	* e		65530						
ANR	65678	Symbol	new_e -> from		65530						
ANR	65679	Symbol	R_NEW0		65530						
ANR	65680	Symbol	a -> layer		65530						
ANR	65681	Symbol	new_e -> to		65530						
ANR	65682	Symbol	long_edges		65530						
ANR	65683	Symbol	new_e -> nth		65530						
ANR	65684	Symbol	new_e		65530						
ANR	65685	Symbol	vis -> data		65530						
ANR	65686	Symbol	b -> layer		65530						
ANR	65687	Function	remove_cycles	624:0:16083:16646							
ANR	65688	FunctionDef	remove_cycles (RAGraph * g)		65687	0					
ANR	65689	CompoundStatement		624:38:16121:16646	65687	0					
ANR	65690	IdentifierDeclStatement	"RGraphVisitor cyclic_vis = { NULL , NULL , NULL , NULL , NULL , NULL } ;"	625:1:16124:16192	65687	0	True				
ANR	65691	IdentifierDecl	"cyclic_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		65687	0					
ANR	65692	IdentifierDeclType	RGraphVisitor		65687	0					
ANR	65693	Identifier	cyclic_vis		65687	1					
ANR	65694	AssignmentExpression	"cyclic_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		65687	2		=			
ANR	65695	Identifier	cyclic_vis		65687	0					
ANR	65696	InitializerList	NULL		65687	1					
ANR	65697	Identifier	NULL		65687	0					
ANR	65698	Identifier	NULL		65687	1					
ANR	65699	Identifier	NULL		65687	2					
ANR	65700	Identifier	NULL		65687	3					
ANR	65701	Identifier	NULL		65687	4					
ANR	65702	Identifier	NULL		65687	5					
ANR	65703	IdentifierDeclStatement	const RGraphEdge * e ;	628:1:16195:16214	65687	1	True				
ANR	65704	IdentifierDecl	* e		65687	0					
ANR	65705	IdentifierDeclType	const RGraphEdge *		65687	0					
ANR	65706	Identifier	e		65687	1					
ANR	65707	IdentifierDeclStatement	const RListIter * it ;	629:1:16217:16236	65687	2	True				
ANR	65708	IdentifierDecl	* it		65687	0					
ANR	65709	IdentifierDeclType	const RListIter *		65687	0					
ANR	65710	Identifier	it		65687	1					
ANR	65711	ExpressionStatement	g -> back_edges = r_list_new ( )	631:1:16240:16269	65687	3	True				
ANR	65712	AssignmentExpression	g -> back_edges = r_list_new ( )		65687	0		=			
ANR	65713	PtrMemberAccess	g -> back_edges		65687	0					
ANR	65714	Identifier	g		65687	0					
ANR	65715	Identifier	back_edges		65687	1					
ANR	65716	CallExpression	r_list_new ( )		65687	1					
ANR	65717	Callee	r_list_new		65687	0					
ANR	65718	Identifier	r_list_new		65687	0					
ANR	65719	ArgumentList			65687	1					
ANR	65720	ExpressionStatement	cyclic_vis . back_edge = ( RGraphEdgeCallback ) view_cyclic_edge	632:1:16272:16332	65687	4	True				
ANR	65721	AssignmentExpression	cyclic_vis . back_edge = ( RGraphEdgeCallback ) view_cyclic_edge		65687	0		=			
ANR	65722	MemberAccess	cyclic_vis . back_edge		65687	0					
ANR	65723	Identifier	cyclic_vis		65687	0					
ANR	65724	Identifier	back_edge		65687	1					
ANR	65725	CastExpression	( RGraphEdgeCallback ) view_cyclic_edge		65687	1					
ANR	65726	CastTarget	RGraphEdgeCallback		65687	0					
ANR	65727	Identifier	view_cyclic_edge		65687	1					
ANR	65728	ExpressionStatement	cyclic_vis . data = g	633:1:16335:16354	65687	5	True				
ANR	65729	AssignmentExpression	cyclic_vis . data = g		65687	0		=			
ANR	65730	MemberAccess	cyclic_vis . data		65687	0					
ANR	65731	Identifier	cyclic_vis		65687	0					
ANR	65732	Identifier	data		65687	1					
ANR	65733	Identifier	g		65687	1					
ANR	65734	ExpressionStatement	"r_graph_dfs ( g -> graph , & cyclic_vis )"	634:1:16357:16392	65687	6	True				
ANR	65735	CallExpression	"r_graph_dfs ( g -> graph , & cyclic_vis )"		65687	0					
ANR	65736	Callee	r_graph_dfs		65687	0					
ANR	65737	Identifier	r_graph_dfs		65687	0					
ANR	65738	ArgumentList	g -> graph		65687	1					
ANR	65739	Argument	g -> graph		65687	0					
ANR	65740	PtrMemberAccess	g -> graph		65687	0					
ANR	65741	Identifier	g		65687	0					
ANR	65742	Identifier	graph		65687	1					
ANR	65743	Argument	& cyclic_vis		65687	1					
ANR	65744	UnaryOperationExpression	& cyclic_vis		65687	0					
ANR	65745	UnaryOperator	&		65687	0					
ANR	65746	Identifier	cyclic_vis		65687	1					
ANR	65747	Statement	r_list_foreach	636:1:16396:16409	65687	7	True				
ANR	65748	Statement	(	636:16:16411:16411	65687	8	True				
ANR	65749	Statement	g	636:17:16412:16412	65687	9	True				
ANR	65750	Statement	->	636:18:16413:16414	65687	10	True				
ANR	65751	Statement	back_edges	636:20:16415:16424	65687	11	True				
ANR	65752	Statement	","	636:30:16425:16425	65687	12	True				
ANR	65753	Statement	it	636:32:16427:16428	65687	13	True				
ANR	65754	Statement	","	636:34:16429:16429	65687	14	True				
ANR	65755	Statement	e	636:36:16431:16431	65687	15	True				
ANR	65756	Statement	)	636:37:16432:16432	65687	16	True				
ANR	65757	CompoundStatement		15:2:369:412	65687	17					
ANR	65758	IdentifierDeclStatement	RANode * from = e -> from ? get_anode ( e -> from ) : NULL ;	637:2:16438:16487	65687	0	True				
ANR	65759	IdentifierDecl	* from = e -> from ? get_anode ( e -> from ) : NULL		65687	0					
ANR	65760	IdentifierDeclType	RANode *		65687	0					
ANR	65761	Identifier	from		65687	1					
ANR	65762	AssignmentExpression	* from = e -> from ? get_anode ( e -> from ) : NULL		65687	2		=			
ANR	65763	Identifier	from		65687	0					
ANR	65764	ConditionalExpression	e -> from ? get_anode ( e -> from ) : NULL		65687	1					
ANR	65765	Condition	e -> from		65687	0					
ANR	65766	PtrMemberAccess	e -> from		65687	0					
ANR	65767	Identifier	e		65687	0					
ANR	65768	Identifier	from		65687	1					
ANR	65769	CallExpression	get_anode ( e -> from )		65687	1					
ANR	65770	Callee	get_anode		65687	0					
ANR	65771	Identifier	get_anode		65687	0					
ANR	65772	ArgumentList	e -> from		65687	1					
ANR	65773	Argument	e -> from		65687	0					
ANR	65774	PtrMemberAccess	e -> from		65687	0					
ANR	65775	Identifier	e		65687	0					
ANR	65776	Identifier	from		65687	1					
ANR	65777	Identifier	NULL		65687	2					
ANR	65778	IdentifierDeclStatement	RANode * to = e -> to ? get_anode ( e -> to ) : NULL ;	638:2:16491:16534	65687	1	True				
ANR	65779	IdentifierDecl	* to = e -> to ? get_anode ( e -> to ) : NULL		65687	0					
ANR	65780	IdentifierDeclType	RANode *		65687	0					
ANR	65781	Identifier	to		65687	1					
ANR	65782	AssignmentExpression	* to = e -> to ? get_anode ( e -> to ) : NULL		65687	2		=			
ANR	65783	Identifier	to		65687	0					
ANR	65784	ConditionalExpression	e -> to ? get_anode ( e -> to ) : NULL		65687	1					
ANR	65785	Condition	e -> to		65687	0					
ANR	65786	PtrMemberAccess	e -> to		65687	0					
ANR	65787	Identifier	e		65687	0					
ANR	65788	Identifier	to		65687	1					
ANR	65789	CallExpression	get_anode ( e -> to )		65687	1					
ANR	65790	Callee	get_anode		65687	0					
ANR	65791	Identifier	get_anode		65687	0					
ANR	65792	ArgumentList	e -> to		65687	1					
ANR	65793	Argument	e -> to		65687	0					
ANR	65794	PtrMemberAccess	e -> to		65687	0					
ANR	65795	Identifier	e		65687	0					
ANR	65796	Identifier	to		65687	1					
ANR	65797	Identifier	NULL		65687	2					
ANR	65798	IfStatement	if ( from && to )		65687	2					
ANR	65799	Condition	from && to	639:6:16542:16551	65687	0	True				
ANR	65800	AndExpression	from && to		65687	0		&&			
ANR	65801	Identifier	from		65687	0					
ANR	65802	Identifier	to		65687	1					
ANR	65803	CompoundStatement		16:18:432:432	65687	1					
ANR	65804	ExpressionStatement	"r_agraph_del_edge ( g , from , to )"	640:3:16559:16590	65687	0	True				
ANR	65805	CallExpression	"r_agraph_del_edge ( g , from , to )"		65687	0					
ANR	65806	Callee	r_agraph_del_edge		65687	0					
ANR	65807	Identifier	r_agraph_del_edge		65687	0					
ANR	65808	ArgumentList	g		65687	1					
ANR	65809	Argument	g		65687	0					
ANR	65810	Identifier	g		65687	0					
ANR	65811	Argument	from		65687	1					
ANR	65812	Identifier	from		65687	0					
ANR	65813	Argument	to		65687	2					
ANR	65814	Identifier	to		65687	0					
ANR	65815	ExpressionStatement	"r_agraph_add_edge_at ( g , to , from , e -> nth )"	641:3:16595:16637	65687	1	True				
ANR	65816	CallExpression	"r_agraph_add_edge_at ( g , to , from , e -> nth )"		65687	0					
ANR	65817	Callee	r_agraph_add_edge_at		65687	0					
ANR	65818	Identifier	r_agraph_add_edge_at		65687	0					
ANR	65819	ArgumentList	g		65687	1					
ANR	65820	Argument	g		65687	0					
ANR	65821	Identifier	g		65687	0					
ANR	65822	Argument	to		65687	1					
ANR	65823	Identifier	to		65687	0					
ANR	65824	Argument	from		65687	2					
ANR	65825	Identifier	from		65687	0					
ANR	65826	Argument	e -> nth		65687	3					
ANR	65827	PtrMemberAccess	e -> nth		65687	0					
ANR	65828	Identifier	e		65687	0					
ANR	65829	Identifier	nth		65687	1					
ANR	65830	ReturnType	static void		65687	1					
ANR	65831	Identifier	remove_cycles		65687	2					
ANR	65832	ParameterList	RAGraph * g		65687	3					
ANR	65833	Parameter	RAGraph * g	624:26:16109:16118	65687	0	True				
ANR	65834	ParameterType	RAGraph *		65687	0					
ANR	65835	Identifier	g		65687	1					
ANR	65836	CFGEntryNode	ENTRY		65687		True				
ANR	65837	CFGExitNode	EXIT		65687		True				
ANR	65838	Symbol	& cyclic_vis		65687						
ANR	65839	Symbol	NULL		65687						
ANR	65840	Symbol	get_anode		65687						
ANR	65841	Symbol	e -> from		65687						
ANR	65842	Symbol	e		65687						
ANR	65843	Symbol	cyclic_vis . data		65687						
ANR	65844	Symbol	g		65687						
ANR	65845	Symbol	e -> to		65687						
ANR	65846	Symbol	it		65687						
ANR	65847	Symbol	e -> nth		65687						
ANR	65848	Symbol	g -> back_edges		65687						
ANR	65849	Symbol	* e		65687						
ANR	65850	Symbol	* g		65687						
ANR	65851	Symbol	g -> graph		65687						
ANR	65852	Symbol	from		65687						
ANR	65853	Symbol	cyclic_vis		65687						
ANR	65854	Symbol	to		65687						
ANR	65855	Symbol	cyclic_vis . back_edge		65687						
ANR	65856	Symbol	view_cyclic_edge		65687						
ANR	65857	Symbol	r_list_new		65687						
ANR	65858	Function	add_sorted	646:0:16649:16766							
ANR	65859	FunctionDef	"add_sorted (RGraphNode * n , RGraphVisitor * vis)"		65858	0					
ANR	65860	CompoundStatement		646:58:16707:16766	65858	0					
ANR	65861	IdentifierDeclStatement	RList * l = ( RList * ) vis -> data ;	647:1:16710:16740	65858	0	True				
ANR	65862	IdentifierDecl	* l = ( RList * ) vis -> data		65858	0					
ANR	65863	IdentifierDeclType	RList *		65858	0					
ANR	65864	Identifier	l		65858	1					
ANR	65865	AssignmentExpression	* l = ( RList * ) vis -> data		65858	2		=			
ANR	65866	Identifier	l		65858	0					
ANR	65867	CastExpression	( RList * ) vis -> data		65858	1					
ANR	65868	CastTarget	RList *		65858	0					
ANR	65869	PtrMemberAccess	vis -> data		65858	1					
ANR	65870	Identifier	vis		65858	0					
ANR	65871	Identifier	data		65858	1					
ANR	65872	ExpressionStatement	"r_list_prepend ( l , n )"	648:1:16743:16764	65858	1	True				
ANR	65873	CallExpression	"r_list_prepend ( l , n )"		65858	0					
ANR	65874	Callee	r_list_prepend		65858	0					
ANR	65875	Identifier	r_list_prepend		65858	0					
ANR	65876	ArgumentList	l		65858	1					
ANR	65877	Argument	l		65858	0					
ANR	65878	Identifier	l		65858	0					
ANR	65879	Argument	n		65858	1					
ANR	65880	Identifier	n		65858	0					
ANR	65881	ReturnType	static void		65858	1					
ANR	65882	Identifier	add_sorted		65858	2					
ANR	65883	ParameterList	"RGraphNode * n , RGraphVisitor * vis"		65858	3					
ANR	65884	Parameter	RGraphNode * n	646:23:16672:16684	65858	0	True				
ANR	65885	ParameterType	RGraphNode *		65858	0					
ANR	65886	Identifier	n		65858	1					
ANR	65887	Parameter	RGraphVisitor * vis	646:38:16687:16704	65858	1	True				
ANR	65888	ParameterType	RGraphVisitor *		65858	0					
ANR	65889	Identifier	vis		65858	1					
ANR	65890	CFGEntryNode	ENTRY		65858		True				
ANR	65891	CFGExitNode	EXIT		65858		True				
ANR	65892	Symbol	vis		65858						
ANR	65893	Symbol	* vis		65858						
ANR	65894	Symbol	l		65858						
ANR	65895	Symbol	vis -> data		65858						
ANR	65896	Symbol	n		65858						
ANR	65897	Function	assign_layers	657:0:17096:17793							
ANR	65898	FunctionDef	assign_layers (const RAGraph * g)		65897	0					
ANR	65899	CompoundStatement		657:44:17140:17793	65897	0					
ANR	65900	IdentifierDeclStatement	"RGraphVisitor layer_vis = { NULL , NULL , NULL , NULL , NULL , NULL } ;"	658:1:17143:17210	65897	0	True				
ANR	65901	IdentifierDecl	"layer_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		65897	0					
ANR	65902	IdentifierDeclType	RGraphVisitor		65897	0					
ANR	65903	Identifier	layer_vis		65897	1					
ANR	65904	AssignmentExpression	"layer_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		65897	2		=			
ANR	65905	Identifier	layer_vis		65897	0					
ANR	65906	InitializerList	NULL		65897	1					
ANR	65907	Identifier	NULL		65897	0					
ANR	65908	Identifier	NULL		65897	1					
ANR	65909	Identifier	NULL		65897	2					
ANR	65910	Identifier	NULL		65897	3					
ANR	65911	Identifier	NULL		65897	4					
ANR	65912	Identifier	NULL		65897	5					
ANR	65913	IdentifierDeclStatement	const RGraphNode * gn ;	661:1:17213:17233	65897	1	True				
ANR	65914	IdentifierDecl	* gn		65897	0					
ANR	65915	IdentifierDeclType	const RGraphNode *		65897	0					
ANR	65916	Identifier	gn		65897	1					
ANR	65917	IdentifierDeclStatement	const RListIter * it ;	662:1:17236:17255	65897	2	True				
ANR	65918	IdentifierDecl	* it		65897	0					
ANR	65919	IdentifierDeclType	const RListIter *		65897	0					
ANR	65920	Identifier	it		65897	1					
ANR	65921	IdentifierDeclStatement	RANode * n ;	663:1:17258:17267	65897	3	True				
ANR	65922	IdentifierDecl	* n		65897	0					
ANR	65923	IdentifierDeclType	RANode *		65897	0					
ANR	65924	Identifier	n		65897	1					
ANR	65925	IdentifierDeclStatement	RList * topological_sort = r_list_new ( ) ;	664:1:17270:17309	65897	4	True				
ANR	65926	IdentifierDecl	* topological_sort = r_list_new ( )		65897	0					
ANR	65927	IdentifierDeclType	RList *		65897	0					
ANR	65928	Identifier	topological_sort		65897	1					
ANR	65929	AssignmentExpression	* topological_sort = r_list_new ( )		65897	2		=			
ANR	65930	Identifier	topological_sort		65897	0					
ANR	65931	CallExpression	r_list_new ( )		65897	1					
ANR	65932	Callee	r_list_new		65897	0					
ANR	65933	Identifier	r_list_new		65897	0					
ANR	65934	ArgumentList			65897	1					
ANR	65935	ExpressionStatement	layer_vis . data = topological_sort	666:1:17313:17346	65897	5	True				
ANR	65936	AssignmentExpression	layer_vis . data = topological_sort		65897	0		=			
ANR	65937	MemberAccess	layer_vis . data		65897	0					
ANR	65938	Identifier	layer_vis		65897	0					
ANR	65939	Identifier	data		65897	1					
ANR	65940	Identifier	topological_sort		65897	1					
ANR	65941	ExpressionStatement	layer_vis . finish_node = ( RGraphNodeCallback ) add_sorted	667:1:17349:17404	65897	6	True				
ANR	65942	AssignmentExpression	layer_vis . finish_node = ( RGraphNodeCallback ) add_sorted		65897	0		=			
ANR	65943	MemberAccess	layer_vis . finish_node		65897	0					
ANR	65944	Identifier	layer_vis		65897	0					
ANR	65945	Identifier	finish_node		65897	1					
ANR	65946	CastExpression	( RGraphNodeCallback ) add_sorted		65897	1					
ANR	65947	CastTarget	RGraphNodeCallback		65897	0					
ANR	65948	Identifier	add_sorted		65897	1					
ANR	65949	ExpressionStatement	"r_graph_dfs ( g -> graph , & layer_vis )"	668:1:17407:17441	65897	7	True				
ANR	65950	CallExpression	"r_graph_dfs ( g -> graph , & layer_vis )"		65897	0					
ANR	65951	Callee	r_graph_dfs		65897	0					
ANR	65952	Identifier	r_graph_dfs		65897	0					
ANR	65953	ArgumentList	g -> graph		65897	1					
ANR	65954	Argument	g -> graph		65897	0					
ANR	65955	PtrMemberAccess	g -> graph		65897	0					
ANR	65956	Identifier	g		65897	0					
ANR	65957	Identifier	graph		65897	1					
ANR	65958	Argument	& layer_vis		65897	1					
ANR	65959	UnaryOperationExpression	& layer_vis		65897	0					
ANR	65960	UnaryOperator	&		65897	0					
ANR	65961	Identifier	layer_vis		65897	1					
ANR	65962	Statement	graph_foreach_anode	670:1:17445:17463	65897	8	True				
ANR	65963	Statement	(	670:21:17465:17465	65897	9	True				
ANR	65964	Statement	topological_sort	670:22:17466:17481	65897	10	True				
ANR	65965	Statement	","	670:38:17482:17482	65897	11	True				
ANR	65966	Statement	it	670:40:17484:17485	65897	12	True				
ANR	65967	Statement	","	670:42:17486:17486	65897	13	True				
ANR	65968	Statement	gn	670:44:17488:17489	65897	14	True				
ANR	65969	Statement	","	670:46:17490:17490	65897	15	True				
ANR	65970	Statement	n	670:48:17492:17492	65897	16	True				
ANR	65971	Statement	)	670:49:17493:17493	65897	17	True				
ANR	65972	CompoundStatement		18:2:452:465	65897	18					
ANR	65973	IdentifierDeclStatement	"const RList * innodes = r_graph_innodes ( g -> graph , gn ) ;"	671:2:17499:17552	65897	0	True				
ANR	65974	IdentifierDecl	"* innodes = r_graph_innodes ( g -> graph , gn )"		65897	0					
ANR	65975	IdentifierDeclType	const RList *		65897	0					
ANR	65976	Identifier	innodes		65897	1					
ANR	65977	AssignmentExpression	"* innodes = r_graph_innodes ( g -> graph , gn )"		65897	2		=			
ANR	65978	Identifier	innodes		65897	0					
ANR	65979	CallExpression	"r_graph_innodes ( g -> graph , gn )"		65897	1					
ANR	65980	Callee	r_graph_innodes		65897	0					
ANR	65981	Identifier	r_graph_innodes		65897	0					
ANR	65982	ArgumentList	g -> graph		65897	1					
ANR	65983	Argument	g -> graph		65897	0					
ANR	65984	PtrMemberAccess	g -> graph		65897	0					
ANR	65985	Identifier	g		65897	0					
ANR	65986	Identifier	graph		65897	1					
ANR	65987	Argument	gn		65897	1					
ANR	65988	Identifier	gn		65897	0					
ANR	65989	IdentifierDeclStatement	RListIter * it ;	672:2:17556:17569	65897	1	True				
ANR	65990	IdentifierDecl	* it		65897	0					
ANR	65991	IdentifierDeclType	RListIter *		65897	0					
ANR	65992	Identifier	it		65897	1					
ANR	65993	IdentifierDeclStatement	RGraphNode * prev ;	673:2:17573:17589	65897	2	True				
ANR	65994	IdentifierDecl	* prev		65897	0					
ANR	65995	IdentifierDeclType	RGraphNode *		65897	0					
ANR	65996	Identifier	prev		65897	1					
ANR	65997	IdentifierDeclStatement	RANode * preva ;	674:2:17593:17606	65897	3	True				
ANR	65998	IdentifierDecl	* preva		65897	0					
ANR	65999	IdentifierDeclType	RANode *		65897	0					
ANR	66000	Identifier	preva		65897	1					
ANR	66001	ExpressionStatement	n -> layer = 0	676:2:17611:17623	65897	4	True				
ANR	66002	AssignmentExpression	n -> layer = 0		65897	0		=			
ANR	66003	PtrMemberAccess	n -> layer		65897	0					
ANR	66004	Identifier	n		65897	0					
ANR	66005	Identifier	layer		65897	1					
ANR	66006	PrimaryExpression	0		65897	1					
ANR	66007	Statement	graph_foreach_anode	677:2:17627:17645	65897	5	True				
ANR	66008	Statement	(	677:22:17647:17647	65897	6	True				
ANR	66009	Statement	innodes	677:23:17648:17654	65897	7	True				
ANR	66010	Statement	","	677:30:17655:17655	65897	8	True				
ANR	66011	Statement	it	677:32:17657:17658	65897	9	True				
ANR	66012	Statement	","	677:34:17659:17659	65897	10	True				
ANR	66013	Statement	prev	677:36:17661:17664	65897	11	True				
ANR	66014	Statement	","	677:40:17665:17665	65897	12	True				
ANR	66015	Statement	preva	677:42:17667:17671	65897	13	True				
ANR	66016	Statement	)	677:47:17672:17672	65897	14	True				
ANR	66017	CompoundStatement		21:49:533:533	65897	15					
ANR	66018	IfStatement	if ( preva -> layer + 1 > n -> layer )		65897	0					
ANR	66019	Condition	preva -> layer + 1 > n -> layer	678:7:17683:17709	65897	0	True				
ANR	66020	RelationalExpression	preva -> layer + 1 > n -> layer		65897	0		>			
ANR	66021	AdditiveExpression	preva -> layer + 1		65897	0		+			
ANR	66022	PtrMemberAccess	preva -> layer		65897	0					
ANR	66023	Identifier	preva		65897	0					
ANR	66024	Identifier	layer		65897	1					
ANR	66025	PrimaryExpression	1		65897	1					
ANR	66026	PtrMemberAccess	n -> layer		65897	1					
ANR	66027	Identifier	n		65897	0					
ANR	66028	Identifier	layer		65897	1					
ANR	66029	CompoundStatement		22:36:571:571	65897	1					
ANR	66030	ExpressionStatement	n -> layer = preva -> layer + 1	679:4:17718:17745	65897	0	True				
ANR	66031	AssignmentExpression	n -> layer = preva -> layer + 1		65897	0		=			
ANR	66032	PtrMemberAccess	n -> layer		65897	0					
ANR	66033	Identifier	n		65897	0					
ANR	66034	Identifier	layer		65897	1					
ANR	66035	AdditiveExpression	preva -> layer + 1		65897	1		+			
ANR	66036	PtrMemberAccess	preva -> layer		65897	0					
ANR	66037	Identifier	preva		65897	0					
ANR	66038	Identifier	layer		65897	1					
ANR	66039	PrimaryExpression	1		65897	1					
ANR	66040	ExpressionStatement	r_list_free ( topological_sort )	684:1:17761:17791	65897	19	True				
ANR	66041	CallExpression	r_list_free ( topological_sort )		65897	0					
ANR	66042	Callee	r_list_free		65897	0					
ANR	66043	Identifier	r_list_free		65897	0					
ANR	66044	ArgumentList	topological_sort		65897	1					
ANR	66045	Argument	topological_sort		65897	0					
ANR	66046	Identifier	topological_sort		65897	0					
ANR	66047	ReturnType	static void		65897	1					
ANR	66048	Identifier	assign_layers		65897	2					
ANR	66049	ParameterList	const RAGraph * g		65897	3					
ANR	66050	Parameter	const RAGraph * g	657:26:17122:17137	65897	0	True				
ANR	66051	ParameterType	const RAGraph *		65897	0					
ANR	66052	Identifier	g		65897	1					
ANR	66053	CFGEntryNode	ENTRY		65897		True				
ANR	66054	CFGExitNode	EXIT		65897		True				
ANR	66055	Symbol	preva -> layer		65897						
ANR	66056	Symbol	NULL		65897						
ANR	66057	Symbol	g		65897						
ANR	66058	Symbol	gn		65897						
ANR	66059	Symbol	prev		65897						
ANR	66060	Symbol	& layer_vis		65897						
ANR	66061	Symbol	innodes		65897						
ANR	66062	Symbol	it		65897						
ANR	66063	Symbol	n		65897						
ANR	66064	Symbol	r_graph_innodes		65897						
ANR	66065	Symbol	layer_vis . finish_node		65897						
ANR	66066	Symbol	* g		65897						
ANR	66067	Symbol	preva		65897						
ANR	66068	Symbol	g -> graph		65897						
ANR	66069	Symbol	topological_sort		65897						
ANR	66070	Symbol	add_sorted		65897						
ANR	66071	Symbol	* n		65897						
ANR	66072	Symbol	* preva		65897						
ANR	66073	Symbol	n -> layer		65897						
ANR	66074	Symbol	layer_vis		65897						
ANR	66075	Symbol	layer_vis . data		65897						
ANR	66076	Symbol	r_list_new		65897						
ANR	66077	Function	find_edge	687:0:17796:17913							
ANR	66078	FunctionDef	"find_edge (const RGraphEdge * a , const RGraphEdge * b)"		66077	0					
ANR	66079	CompoundStatement		687:63:17859:17913	66077	0					
ANR	66080	ReturnStatement	return a -> from == b -> to && a -> to == b -> from ? 0 : 1 ;	688:1:17862:17911	66077	0	True				
ANR	66081	ConditionalExpression	a -> from == b -> to && a -> to == b -> from ? 0 : 1		66077	0					
ANR	66082	Condition	a -> from == b -> to && a -> to == b -> from		66077	0					
ANR	66083	AndExpression	a -> from == b -> to && a -> to == b -> from		66077	0		&&			
ANR	66084	EqualityExpression	a -> from == b -> to		66077	0		==			
ANR	66085	PtrMemberAccess	a -> from		66077	0					
ANR	66086	Identifier	a		66077	0					
ANR	66087	Identifier	from		66077	1					
ANR	66088	PtrMemberAccess	b -> to		66077	1					
ANR	66089	Identifier	b		66077	0					
ANR	66090	Identifier	to		66077	1					
ANR	66091	EqualityExpression	a -> to == b -> from		66077	1		==			
ANR	66092	PtrMemberAccess	a -> to		66077	0					
ANR	66093	Identifier	a		66077	0					
ANR	66094	Identifier	to		66077	1					
ANR	66095	PtrMemberAccess	b -> from		66077	1					
ANR	66096	Identifier	b		66077	0					
ANR	66097	Identifier	from		66077	1					
ANR	66098	PrimaryExpression	0		66077	1					
ANR	66099	PrimaryExpression	1		66077	2					
ANR	66100	ReturnType	static int		66077	1					
ANR	66101	Identifier	find_edge		66077	2					
ANR	66102	ParameterList	"const RGraphEdge * a , const RGraphEdge * b"		66077	3					
ANR	66103	Parameter	const RGraphEdge * a	687:21:17817:17835	66077	0	True				
ANR	66104	ParameterType	const RGraphEdge *		66077	0					
ANR	66105	Identifier	a		66077	1					
ANR	66106	Parameter	const RGraphEdge * b	687:42:17838:17856	66077	1	True				
ANR	66107	ParameterType	const RGraphEdge *		66077	0					
ANR	66108	Identifier	b		66077	1					
ANR	66109	CFGEntryNode	ENTRY		66077		True				
ANR	66110	CFGExitNode	EXIT		66077		True				
ANR	66111	Symbol	a		66077						
ANR	66112	Symbol	a -> from		66077						
ANR	66113	Symbol	b		66077						
ANR	66114	Symbol	a -> to		66077						
ANR	66115	Symbol	b -> to		66077						
ANR	66116	Symbol	b -> from		66077						
ANR	66117	Symbol	* a		66077						
ANR	66118	Symbol	* b		66077						
ANR	66119	Function	is_reversed	691:0:17916:18062							
ANR	66120	FunctionDef	"is_reversed (const RAGraph * g , const RGraphEdge * e)"		66119	0					
ANR	66121	CompoundStatement		691:62:17978:18062	66119	0					
ANR	66122	ReturnStatement	"return r_list_find ( g -> back_edges , e , ( RListComparator ) find_edge ) ? true : false ;"	692:1:17981:18060	66119	0	True				
ANR	66123	ConditionalExpression	"r_list_find ( g -> back_edges , e , ( RListComparator ) find_edge ) ? true : false"		66119	0					
ANR	66124	Condition	"r_list_find ( g -> back_edges , e , ( RListComparator ) find_edge )"		66119	0					
ANR	66125	CallExpression	"r_list_find ( g -> back_edges , e , ( RListComparator ) find_edge )"		66119	0					
ANR	66126	Callee	r_list_find		66119	0					
ANR	66127	Identifier	r_list_find		66119	0					
ANR	66128	ArgumentList	g -> back_edges		66119	1					
ANR	66129	Argument	g -> back_edges		66119	0					
ANR	66130	PtrMemberAccess	g -> back_edges		66119	0					
ANR	66131	Identifier	g		66119	0					
ANR	66132	Identifier	back_edges		66119	1					
ANR	66133	Argument	e		66119	1					
ANR	66134	Identifier	e		66119	0					
ANR	66135	Argument	( RListComparator ) find_edge		66119	2					
ANR	66136	CastExpression	( RListComparator ) find_edge		66119	0					
ANR	66137	CastTarget	RListComparator		66119	0					
ANR	66138	Identifier	find_edge		66119	1					
ANR	66139	Identifier	true		66119	1					
ANR	66140	Identifier	false		66119	2					
ANR	66141	ReturnType	static int		66119	1					
ANR	66142	Identifier	is_reversed		66119	2					
ANR	66143	ParameterList	"const RAGraph * g , const RGraphEdge * e"		66119	3					
ANR	66144	Parameter	const RAGraph * g	691:23:17939:17954	66119	0	True				
ANR	66145	ParameterType	const RAGraph *		66119	0					
ANR	66146	Identifier	g		66119	1					
ANR	66147	Parameter	const RGraphEdge * e	691:41:17957:17975	66119	1	True				
ANR	66148	ParameterType	const RGraphEdge *		66119	0					
ANR	66149	Identifier	e		66119	1					
ANR	66150	CFGEntryNode	ENTRY		66119		True				
ANR	66151	CFGExitNode	EXIT		66119		True				
ANR	66152	Symbol	r_list_find		66119						
ANR	66153	Symbol	* g		66119						
ANR	66154	Symbol	e		66119						
ANR	66155	Symbol	g		66119						
ANR	66156	Symbol	false		66119						
ANR	66157	Symbol	true		66119						
ANR	66158	Symbol	find_edge		66119						
ANR	66159	Symbol	g -> back_edges		66119						
ANR	66160	Function	create_dummy_nodes	696:0:18134:19204							
ANR	66161	FunctionDef	create_dummy_nodes (RAGraph * g)		66160	0					
ANR	66162	CompoundStatement		696:43:18177:19204	66160	0					
ANR	66163	IfStatement	if ( ! g -> dummy )		66160	0					
ANR	66164	Condition	! g -> dummy	697:5:18184:18192	66160	0	True				
ANR	66165	UnaryOperationExpression	! g -> dummy		66160	0					
ANR	66166	UnaryOperator	!		66160	0					
ANR	66167	PtrMemberAccess	g -> dummy		66160	1					
ANR	66168	Identifier	g		66160	0					
ANR	66169	Identifier	dummy		66160	1					
ANR	66170	CompoundStatement		2:16:17:17	66160	1					
ANR	66171	ReturnStatement	return ;	698:2:18199:18205	66160	0	True				
ANR	66172	IdentifierDeclStatement	"RGraphVisitor dummy_vis = { NULL , NULL , NULL , NULL , NULL , NULL } ;"	700:1:18211:18278	66160	1	True				
ANR	66173	IdentifierDecl	"dummy_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		66160	0					
ANR	66174	IdentifierDeclType	RGraphVisitor		66160	0					
ANR	66175	Identifier	dummy_vis		66160	1					
ANR	66176	AssignmentExpression	"dummy_vis = { NULL , NULL , NULL , NULL , NULL , NULL }"		66160	2		=			
ANR	66177	Identifier	dummy_vis		66160	0					
ANR	66178	InitializerList	NULL		66160	1					
ANR	66179	Identifier	NULL		66160	0					
ANR	66180	Identifier	NULL		66160	1					
ANR	66181	Identifier	NULL		66160	2					
ANR	66182	Identifier	NULL		66160	3					
ANR	66183	Identifier	NULL		66160	4					
ANR	66184	Identifier	NULL		66160	5					
ANR	66185	IdentifierDeclStatement	const RListIter * it ;	703:1:18281:18300	66160	2	True				
ANR	66186	IdentifierDecl	* it		66160	0					
ANR	66187	IdentifierDeclType	const RListIter *		66160	0					
ANR	66188	Identifier	it		66160	1					
ANR	66189	IdentifierDeclStatement	const RGraphEdge * e ;	704:1:18303:18322	66160	3	True				
ANR	66190	IdentifierDecl	* e		66160	0					
ANR	66191	IdentifierDeclType	const RGraphEdge *		66160	0					
ANR	66192	Identifier	e		66160	1					
ANR	66193	ExpressionStatement	g -> long_edges = r_list_newf ( ( RListFree ) free )	706:1:18326:18371	66160	4	True				
ANR	66194	AssignmentExpression	g -> long_edges = r_list_newf ( ( RListFree ) free )		66160	0		=			
ANR	66195	PtrMemberAccess	g -> long_edges		66160	0					
ANR	66196	Identifier	g		66160	0					
ANR	66197	Identifier	long_edges		66160	1					
ANR	66198	CallExpression	r_list_newf ( ( RListFree ) free )		66160	1					
ANR	66199	Callee	r_list_newf		66160	0					
ANR	66200	Identifier	r_list_newf		66160	0					
ANR	66201	ArgumentList	( RListFree ) free		66160	1					
ANR	66202	Argument	( RListFree ) free		66160	0					
ANR	66203	CastExpression	( RListFree ) free		66160	0					
ANR	66204	CastTarget	RListFree		66160	0					
ANR	66205	Identifier	free		66160	1					
ANR	66206	ExpressionStatement	dummy_vis . data = g -> long_edges	707:1:18374:18404	66160	5	True				
ANR	66207	AssignmentExpression	dummy_vis . data = g -> long_edges		66160	0		=			
ANR	66208	MemberAccess	dummy_vis . data		66160	0					
ANR	66209	Identifier	dummy_vis		66160	0					
ANR	66210	Identifier	data		66160	1					
ANR	66211	PtrMemberAccess	g -> long_edges		66160	1					
ANR	66212	Identifier	g		66160	0					
ANR	66213	Identifier	long_edges		66160	1					
ANR	66214	ExpressionStatement	dummy_vis . tree_edge = ( RGraphEdgeCallback ) view_dummy	708:1:18407:18460	66160	6	True				
ANR	66215	AssignmentExpression	dummy_vis . tree_edge = ( RGraphEdgeCallback ) view_dummy		66160	0		=			
ANR	66216	MemberAccess	dummy_vis . tree_edge		66160	0					
ANR	66217	Identifier	dummy_vis		66160	0					
ANR	66218	Identifier	tree_edge		66160	1					
ANR	66219	CastExpression	( RGraphEdgeCallback ) view_dummy		66160	1					
ANR	66220	CastTarget	RGraphEdgeCallback		66160	0					
ANR	66221	Identifier	view_dummy		66160	1					
ANR	66222	ExpressionStatement	dummy_vis . fcross_edge = ( RGraphEdgeCallback ) view_dummy	709:1:18463:18518	66160	7	True				
ANR	66223	AssignmentExpression	dummy_vis . fcross_edge = ( RGraphEdgeCallback ) view_dummy		66160	0		=			
ANR	66224	MemberAccess	dummy_vis . fcross_edge		66160	0					
ANR	66225	Identifier	dummy_vis		66160	0					
ANR	66226	Identifier	fcross_edge		66160	1					
ANR	66227	CastExpression	( RGraphEdgeCallback ) view_dummy		66160	1					
ANR	66228	CastTarget	RGraphEdgeCallback		66160	0					
ANR	66229	Identifier	view_dummy		66160	1					
ANR	66230	ExpressionStatement	"r_graph_dfs ( g -> graph , & dummy_vis )"	710:1:18521:18555	66160	8	True				
ANR	66231	CallExpression	"r_graph_dfs ( g -> graph , & dummy_vis )"		66160	0					
ANR	66232	Callee	r_graph_dfs		66160	0					
ANR	66233	Identifier	r_graph_dfs		66160	0					
ANR	66234	ArgumentList	g -> graph		66160	1					
ANR	66235	Argument	g -> graph		66160	0					
ANR	66236	PtrMemberAccess	g -> graph		66160	0					
ANR	66237	Identifier	g		66160	0					
ANR	66238	Identifier	graph		66160	1					
ANR	66239	Argument	& dummy_vis		66160	1					
ANR	66240	UnaryOperationExpression	& dummy_vis		66160	0					
ANR	66241	UnaryOperator	&		66160	0					
ANR	66242	Identifier	dummy_vis		66160	1					
ANR	66243	Statement	r_list_foreach	712:1:18559:18572	66160	9	True				
ANR	66244	Statement	(	712:16:18574:18574	66160	10	True				
ANR	66245	Statement	g	712:17:18575:18575	66160	11	True				
ANR	66246	Statement	->	712:18:18576:18577	66160	12	True				
ANR	66247	Statement	long_edges	712:20:18578:18587	66160	13	True				
ANR	66248	Statement	","	712:30:18588:18588	66160	14	True				
ANR	66249	Statement	it	712:32:18590:18591	66160	15	True				
ANR	66250	Statement	","	712:34:18592:18592	66160	16	True				
ANR	66251	Statement	e	712:36:18594:18594	66160	17	True				
ANR	66252	Statement	)	712:37:18595:18595	66160	18	True				
ANR	66253	CompoundStatement		22:2:585:604	66160	19					
ANR	66254	IdentifierDeclStatement	RANode * from = get_anode ( e -> from ) ;	713:2:18601:18635	66160	0	True				
ANR	66255	IdentifierDecl	* from = get_anode ( e -> from )		66160	0					
ANR	66256	IdentifierDeclType	RANode *		66160	0					
ANR	66257	Identifier	from		66160	1					
ANR	66258	AssignmentExpression	* from = get_anode ( e -> from )		66160	2		=			
ANR	66259	Identifier	from		66160	0					
ANR	66260	CallExpression	get_anode ( e -> from )		66160	1					
ANR	66261	Callee	get_anode		66160	0					
ANR	66262	Identifier	get_anode		66160	0					
ANR	66263	ArgumentList	e -> from		66160	1					
ANR	66264	Argument	e -> from		66160	0					
ANR	66265	PtrMemberAccess	e -> from		66160	0					
ANR	66266	Identifier	e		66160	0					
ANR	66267	Identifier	from		66160	1					
ANR	66268	IdentifierDeclStatement	RANode * to = get_anode ( e -> to ) ;	714:2:18639:18669	66160	1	True				
ANR	66269	IdentifierDecl	* to = get_anode ( e -> to )		66160	0					
ANR	66270	IdentifierDeclType	RANode *		66160	0					
ANR	66271	Identifier	to		66160	1					
ANR	66272	AssignmentExpression	* to = get_anode ( e -> to )		66160	2		=			
ANR	66273	Identifier	to		66160	0					
ANR	66274	CallExpression	get_anode ( e -> to )		66160	1					
ANR	66275	Callee	get_anode		66160	0					
ANR	66276	Identifier	get_anode		66160	0					
ANR	66277	ArgumentList	e -> to		66160	1					
ANR	66278	Argument	e -> to		66160	0					
ANR	66279	PtrMemberAccess	e -> to		66160	0					
ANR	66280	Identifier	e		66160	0					
ANR	66281	Identifier	to		66160	1					
ANR	66282	IdentifierDeclStatement	int diff_layer = R_ABS ( from -> layer - to -> layer ) ;	715:2:18673:18721	66160	2	True				
ANR	66283	IdentifierDecl	diff_layer = R_ABS ( from -> layer - to -> layer )		66160	0					
ANR	66284	IdentifierDeclType	int		66160	0					
ANR	66285	Identifier	diff_layer		66160	1					
ANR	66286	AssignmentExpression	diff_layer = R_ABS ( from -> layer - to -> layer )		66160	2		=			
ANR	66287	Identifier	diff_layer		66160	0					
ANR	66288	CallExpression	R_ABS ( from -> layer - to -> layer )		66160	1					
ANR	66289	Callee	R_ABS		66160	0					
ANR	66290	Identifier	R_ABS		66160	0					
ANR	66291	ArgumentList	from -> layer - to -> layer		66160	1					
ANR	66292	Argument	from -> layer - to -> layer		66160	0					
ANR	66293	AdditiveExpression	from -> layer - to -> layer		66160	0		-			
ANR	66294	PtrMemberAccess	from -> layer		66160	0					
ANR	66295	Identifier	from		66160	0					
ANR	66296	Identifier	layer		66160	1					
ANR	66297	PtrMemberAccess	to -> layer		66160	1					
ANR	66298	Identifier	to		66160	0					
ANR	66299	Identifier	layer		66160	1					
ANR	66300	IdentifierDeclStatement	RANode * prev = get_anode ( e -> from ) ;	716:2:18725:18759	66160	3	True				
ANR	66301	IdentifierDecl	* prev = get_anode ( e -> from )		66160	0					
ANR	66302	IdentifierDeclType	RANode *		66160	0					
ANR	66303	Identifier	prev		66160	1					
ANR	66304	AssignmentExpression	* prev = get_anode ( e -> from )		66160	2		=			
ANR	66305	Identifier	prev		66160	0					
ANR	66306	CallExpression	get_anode ( e -> from )		66160	1					
ANR	66307	Callee	get_anode		66160	0					
ANR	66308	Identifier	get_anode		66160	0					
ANR	66309	ArgumentList	e -> from		66160	1					
ANR	66310	Argument	e -> from		66160	0					
ANR	66311	PtrMemberAccess	e -> from		66160	0					
ANR	66312	Identifier	e		66160	0					
ANR	66313	Identifier	from		66160	1					
ANR	66314	IdentifierDeclStatement	"int i , nth = e -> nth ;"	717:2:18763:18782	66160	4	True				
ANR	66315	IdentifierDecl	i		66160	0					
ANR	66316	IdentifierDeclType	int		66160	0					
ANR	66317	Identifier	i		66160	1					
ANR	66318	IdentifierDecl	nth = e -> nth		66160	1					
ANR	66319	IdentifierDeclType	int		66160	0					
ANR	66320	Identifier	nth		66160	1					
ANR	66321	AssignmentExpression	nth = e -> nth		66160	2		=			
ANR	66322	Identifier	nth		66160	0					
ANR	66323	PtrMemberAccess	e -> nth		66160	1					
ANR	66324	Identifier	e		66160	0					
ANR	66325	Identifier	nth		66160	1					
ANR	66326	ExpressionStatement	"r_agraph_del_edge ( g , from , to )"	719:2:18787:18818	66160	5	True				
ANR	66327	CallExpression	"r_agraph_del_edge ( g , from , to )"		66160	0					
ANR	66328	Callee	r_agraph_del_edge		66160	0					
ANR	66329	Identifier	r_agraph_del_edge		66160	0					
ANR	66330	ArgumentList	g		66160	1					
ANR	66331	Argument	g		66160	0					
ANR	66332	Identifier	g		66160	0					
ANR	66333	Argument	from		66160	1					
ANR	66334	Identifier	from		66160	0					
ANR	66335	Argument	to		66160	2					
ANR	66336	Identifier	to		66160	0					
ANR	66337	ForStatement	for ( i = 1 ; i < diff_layer ; ++ i )		66160	6					
ANR	66338	ForInit	i = 1 ;	720:7:18827:18832	66160	0	True				
ANR	66339	AssignmentExpression	i = 1		66160	0		=			
ANR	66340	Identifier	i		66160	0					
ANR	66341	PrimaryExpression	1		66160	1					
ANR	66342	Condition	i < diff_layer	720:14:18834:18847	66160	1	True				
ANR	66343	RelationalExpression	i < diff_layer		66160	0		<			
ANR	66344	Identifier	i		66160	0					
ANR	66345	Identifier	diff_layer		66160	1					
ANR	66346	UnaryExpression	++ i	720:30:18850:18852	66160	2	True				
ANR	66347	IncDec	++		66160	0					
ANR	66348	Identifier	i		66160	1					
ANR	66349	CompoundStatement		26:3:682:731	66160	3					
ANR	66350	IdentifierDeclStatement	"RANode * dummy = r_agraph_add_node ( g , NULL , NULL ) ;"	721:3:18860:18909	66160	0	True				
ANR	66351	IdentifierDecl	"* dummy = r_agraph_add_node ( g , NULL , NULL )"		66160	0					
ANR	66352	IdentifierDeclType	RANode *		66160	0					
ANR	66353	Identifier	dummy		66160	1					
ANR	66354	AssignmentExpression	"* dummy = r_agraph_add_node ( g , NULL , NULL )"		66160	2		=			
ANR	66355	Identifier	dummy		66160	0					
ANR	66356	CallExpression	"r_agraph_add_node ( g , NULL , NULL )"		66160	1					
ANR	66357	Callee	r_agraph_add_node		66160	0					
ANR	66358	Identifier	r_agraph_add_node		66160	0					
ANR	66359	ArgumentList	g		66160	1					
ANR	66360	Argument	g		66160	0					
ANR	66361	Identifier	g		66160	0					
ANR	66362	Argument	NULL		66160	1					
ANR	66363	Identifier	NULL		66160	0					
ANR	66364	Argument	NULL		66160	2					
ANR	66365	Identifier	NULL		66160	0					
ANR	66366	IfStatement	if ( ! dummy )		66160	1					
ANR	66367	Condition	! dummy	722:7:18918:18923	66160	0	True				
ANR	66368	UnaryOperationExpression	! dummy		66160	0					
ANR	66369	UnaryOperator	!		66160	0					
ANR	66370	Identifier	dummy		66160	1					
ANR	66371	CompoundStatement		27:15:748:748	66160	1					
ANR	66372	ReturnStatement	return ;	723:4:18932:18938	66160	0	True				
ANR	66373	ExpressionStatement	dummy -> is_dummy = true	725:3:18948:18970	66160	2	True				
ANR	66374	AssignmentExpression	dummy -> is_dummy = true		66160	0		=			
ANR	66375	PtrMemberAccess	dummy -> is_dummy		66160	0					
ANR	66376	Identifier	dummy		66160	0					
ANR	66377	Identifier	is_dummy		66160	1					
ANR	66378	Identifier	true		66160	1					
ANR	66379	ExpressionStatement	dummy -> layer = from -> layer + i	726:3:18975:19005	66160	3	True				
ANR	66380	AssignmentExpression	dummy -> layer = from -> layer + i		66160	0		=			
ANR	66381	PtrMemberAccess	dummy -> layer		66160	0					
ANR	66382	Identifier	dummy		66160	0					
ANR	66383	Identifier	layer		66160	1					
ANR	66384	AdditiveExpression	from -> layer + i		66160	1		+			
ANR	66385	PtrMemberAccess	from -> layer		66160	0					
ANR	66386	Identifier	from		66160	0					
ANR	66387	Identifier	layer		66160	1					
ANR	66388	Identifier	i		66160	1					
ANR	66389	ExpressionStatement	"dummy -> is_reversed = is_reversed ( g , e )"	727:3:19010:19049	66160	4	True				
ANR	66390	AssignmentExpression	"dummy -> is_reversed = is_reversed ( g , e )"		66160	0		=			
ANR	66391	PtrMemberAccess	dummy -> is_reversed		66160	0					
ANR	66392	Identifier	dummy		66160	0					
ANR	66393	Identifier	is_reversed		66160	1					
ANR	66394	CallExpression	"is_reversed ( g , e )"		66160	1					
ANR	66395	Callee	is_reversed		66160	0					
ANR	66396	Identifier	is_reversed		66160	0					
ANR	66397	ArgumentList	g		66160	1					
ANR	66398	Argument	g		66160	0					
ANR	66399	Identifier	g		66160	0					
ANR	66400	Argument	e		66160	1					
ANR	66401	Identifier	e		66160	0					
ANR	66402	ExpressionStatement	dummy -> w = 1	728:3:19054:19066	66160	5	True				
ANR	66403	AssignmentExpression	dummy -> w = 1		66160	0		=			
ANR	66404	PtrMemberAccess	dummy -> w		66160	0					
ANR	66405	Identifier	dummy		66160	0					
ANR	66406	Identifier	w		66160	1					
ANR	66407	PrimaryExpression	1		66160	1					
ANR	66408	ExpressionStatement	"r_agraph_add_edge_at ( g , prev , dummy , nth )"	729:3:19071:19113	66160	6	True				
ANR	66409	CallExpression	"r_agraph_add_edge_at ( g , prev , dummy , nth )"		66160	0					
ANR	66410	Callee	r_agraph_add_edge_at		66160	0					
ANR	66411	Identifier	r_agraph_add_edge_at		66160	0					
ANR	66412	ArgumentList	g		66160	1					
ANR	66413	Argument	g		66160	0					
ANR	66414	Identifier	g		66160	0					
ANR	66415	Argument	prev		66160	1					
ANR	66416	Identifier	prev		66160	0					
ANR	66417	Argument	dummy		66160	2					
ANR	66418	Identifier	dummy		66160	0					
ANR	66419	Argument	nth		66160	3					
ANR	66420	Identifier	nth		66160	0					
ANR	66421	ExpressionStatement	prev = dummy	731:3:19119:19131	66160	7	True				
ANR	66422	AssignmentExpression	prev = dummy		66160	0		=			
ANR	66423	Identifier	prev		66160	0					
ANR	66424	Identifier	dummy		66160	1					
ANR	66425	ExpressionStatement	nth = - 1	732:3:19136:19144	66160	8	True				
ANR	66426	AssignmentExpression	nth = - 1		66160	0		=			
ANR	66427	Identifier	nth		66160	0					
ANR	66428	UnaryOperationExpression	- 1		66160	1					
ANR	66429	UnaryOperator	-		66160	0					
ANR	66430	PrimaryExpression	1		66160	1					
ANR	66431	ExpressionStatement	"r_graph_add_edge ( g -> graph , prev -> gnode , e -> to )"	734:2:19152:19199	66160	7	True				
ANR	66432	CallExpression	"r_graph_add_edge ( g -> graph , prev -> gnode , e -> to )"		66160	0					
ANR	66433	Callee	r_graph_add_edge		66160	0					
ANR	66434	Identifier	r_graph_add_edge		66160	0					
ANR	66435	ArgumentList	g -> graph		66160	1					
ANR	66436	Argument	g -> graph		66160	0					
ANR	66437	PtrMemberAccess	g -> graph		66160	0					
ANR	66438	Identifier	g		66160	0					
ANR	66439	Identifier	graph		66160	1					
ANR	66440	Argument	prev -> gnode		66160	1					
ANR	66441	PtrMemberAccess	prev -> gnode		66160	0					
ANR	66442	Identifier	prev		66160	0					
ANR	66443	Identifier	gnode		66160	1					
ANR	66444	Argument	e -> to		66160	2					
ANR	66445	PtrMemberAccess	e -> to		66160	0					
ANR	66446	Identifier	e		66160	0					
ANR	66447	Identifier	to		66160	1					
ANR	66448	ReturnType	static void		66160	1					
ANR	66449	Identifier	create_dummy_nodes		66160	2					
ANR	66450	ParameterList	RAGraph * g		66160	3					
ANR	66451	Parameter	RAGraph * g	696:31:18165:18174	66160	0	True				
ANR	66452	ParameterType	RAGraph *		66160	0					
ANR	66453	Identifier	g		66160	1					
ANR	66454	CFGEntryNode	ENTRY		66160		True				
ANR	66455	CFGExitNode	EXIT		66160		True				
ANR	66456	Symbol	dummy -> is_dummy		66160						
ANR	66457	Symbol	dummy -> layer		66160						
ANR	66458	Symbol	from -> layer		66160						
ANR	66459	Symbol	prev		66160						
ANR	66460	Symbol	dummy_vis . data		66160						
ANR	66461	Symbol	e -> to		66160						
ANR	66462	Symbol	R_ABS		66160						
ANR	66463	Symbol	* prev		66160						
ANR	66464	Symbol	dummy_vis		66160						
ANR	66465	Symbol	dummy		66160						
ANR	66466	Symbol	view_dummy		66160						
ANR	66467	Symbol	g -> graph		66160						
ANR	66468	Symbol	g -> dummy		66160						
ANR	66469	Symbol	from		66160						
ANR	66470	Symbol	is_reversed		66160						
ANR	66471	Symbol	free		66160						
ANR	66472	Symbol	g -> long_edges		66160						
ANR	66473	Symbol	* to		66160						
ANR	66474	Symbol	NULL		66160						
ANR	66475	Symbol	e -> from		66160						
ANR	66476	Symbol	get_anode		66160						
ANR	66477	Symbol	nth		66160						
ANR	66478	Symbol	e		66160						
ANR	66479	Symbol	r_list_newf		66160						
ANR	66480	Symbol	prev -> gnode		66160						
ANR	66481	Symbol	diff_layer		66160						
ANR	66482	Symbol	g		66160						
ANR	66483	Symbol	dummy_vis . tree_edge		66160						
ANR	66484	Symbol	i		66160						
ANR	66485	Symbol	* dummy		66160						
ANR	66486	Symbol	it		66160						
ANR	66487	Symbol	dummy_vis . fcross_edge		66160						
ANR	66488	Symbol	& dummy_vis		66160						
ANR	66489	Symbol	e -> nth		66160						
ANR	66490	Symbol	r_agraph_add_node		66160						
ANR	66491	Symbol	* e		66160						
ANR	66492	Symbol	dummy -> w		66160						
ANR	66493	Symbol	* g		66160						
ANR	66494	Symbol	true		66160						
ANR	66495	Symbol	to		66160						
ANR	66496	Symbol	* from		66160						
ANR	66497	Symbol	to -> layer		66160						
ANR	66498	Symbol	dummy -> is_reversed		66160						
ANR	66499	Function	create_layers	739:0:19281:20265							
ANR	66500	FunctionDef	create_layers (RAGraph * g)		66499	0					
ANR	66501	CompoundStatement		739:38:19319:20265	66499	0					
ANR	66502	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	740:1:19322:19371	66499	0	True				
ANR	66503	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		66499	0					
ANR	66504	IdentifierDeclType	const RList *		66499	0					
ANR	66505	Identifier	nodes		66499	1					
ANR	66506	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		66499	2		=			
ANR	66507	Identifier	nodes		66499	0					
ANR	66508	CallExpression	r_graph_get_nodes ( g -> graph )		66499	1					
ANR	66509	Callee	r_graph_get_nodes		66499	0					
ANR	66510	Identifier	r_graph_get_nodes		66499	0					
ANR	66511	ArgumentList	g -> graph		66499	1					
ANR	66512	Argument	g -> graph		66499	0					
ANR	66513	PtrMemberAccess	g -> graph		66499	0					
ANR	66514	Identifier	g		66499	0					
ANR	66515	Identifier	graph		66499	1					
ANR	66516	IdentifierDeclStatement	RGraphNode * gn ;	741:1:19374:19388	66499	1	True				
ANR	66517	IdentifierDecl	* gn		66499	0					
ANR	66518	IdentifierDeclType	RGraphNode *		66499	0					
ANR	66519	Identifier	gn		66499	1					
ANR	66520	IdentifierDeclStatement	const RListIter * it ;	742:1:19391:19410	66499	2	True				
ANR	66521	IdentifierDecl	* it		66499	0					
ANR	66522	IdentifierDeclType	const RListIter *		66499	0					
ANR	66523	Identifier	it		66499	1					
ANR	66524	IdentifierDeclStatement	RANode * n ;	743:1:19413:19422	66499	3	True				
ANR	66525	IdentifierDecl	* n		66499	0					
ANR	66526	IdentifierDeclType	RANode *		66499	0					
ANR	66527	Identifier	n		66499	1					
ANR	66528	IdentifierDeclStatement	int i ;	744:1:19425:19430	66499	4	True				
ANR	66529	IdentifierDecl	i		66499	0					
ANR	66530	IdentifierDeclType	int		66499	0					
ANR	66531	Identifier	i		66499	1					
ANR	66532	ExpressionStatement	g -> n_layers = 0	747:1:19460:19475	66499	5	True				
ANR	66533	AssignmentExpression	g -> n_layers = 0		66499	0		=			
ANR	66534	PtrMemberAccess	g -> n_layers		66499	0					
ANR	66535	Identifier	g		66499	0					
ANR	66536	Identifier	n_layers		66499	1					
ANR	66537	PrimaryExpression	0		66499	1					
ANR	66538	Statement	graph_foreach_anode	748:1:19478:19496	66499	6	True				
ANR	66539	Statement	(	748:21:19498:19498	66499	7	True				
ANR	66540	Statement	nodes	748:22:19499:19503	66499	8	True				
ANR	66541	Statement	","	748:27:19504:19504	66499	9	True				
ANR	66542	Statement	it	748:29:19506:19507	66499	10	True				
ANR	66543	Statement	","	748:31:19508:19508	66499	11	True				
ANR	66544	Statement	gn	748:33:19510:19511	66499	12	True				
ANR	66545	Statement	","	748:35:19512:19512	66499	13	True				
ANR	66546	Statement	n	748:37:19514:19514	66499	14	True				
ANR	66547	Statement	)	748:38:19515:19515	66499	15	True				
ANR	66548	CompoundStatement		10:40:197:197	66499	16					
ANR	66549	IfStatement	if ( n -> layer > g -> n_layers )		66499	0					
ANR	66550	Condition	n -> layer > g -> n_layers	749:6:19525:19546	66499	0	True				
ANR	66551	RelationalExpression	n -> layer > g -> n_layers		66499	0		>			
ANR	66552	PtrMemberAccess	n -> layer		66499	0					
ANR	66553	Identifier	n		66499	0					
ANR	66554	Identifier	layer		66499	1					
ANR	66555	PtrMemberAccess	g -> n_layers		66499	1					
ANR	66556	Identifier	g		66499	0					
ANR	66557	Identifier	n_layers		66499	1					
ANR	66558	CompoundStatement		11:30:229:229	66499	1					
ANR	66559	ExpressionStatement	g -> n_layers = n -> layer	750:3:19554:19576	66499	0	True				
ANR	66560	AssignmentExpression	g -> n_layers = n -> layer		66499	0		=			
ANR	66561	PtrMemberAccess	g -> n_layers		66499	0					
ANR	66562	Identifier	g		66499	0					
ANR	66563	Identifier	n_layers		66499	1					
ANR	66564	PtrMemberAccess	n -> layer		66499	1					
ANR	66565	Identifier	n		66499	0					
ANR	66566	Identifier	layer		66499	1					
ANR	66567	ExpressionStatement	g -> n_layers ++	755:1:19645:19658	66499	17	True				
ANR	66568	PostIncDecOperationExpression	g -> n_layers ++		66499	0					
ANR	66569	PtrMemberAccess	g -> n_layers		66499	0					
ANR	66570	Identifier	g		66499	0					
ANR	66571	Identifier	n_layers		66499	1					
ANR	66572	IncDec	++		66499	1					
ANR	66573	IfStatement	if ( sizeof ( struct layer_t ) * g -> n_layers < g -> n_layers )		66499	18					
ANR	66574	Condition	sizeof ( struct layer_t ) * g -> n_layers < g -> n_layers	756:5:19665:19715	66499	0	True				
ANR	66575	RelationalExpression	sizeof ( struct layer_t ) * g -> n_layers < g -> n_layers		66499	0		<			
ANR	66576	MultiplicativeExpression	sizeof ( struct layer_t ) * g -> n_layers		66499	0		*			
ANR	66577	SizeofExpression	sizeof ( struct layer_t )		66499	0					
ANR	66578	Sizeof	sizeof		66499	0					
ANR	66579	SizeofOperand	struct layer_t		66499	1					
ANR	66580	PtrMemberAccess	g -> n_layers		66499	1					
ANR	66581	Identifier	g		66499	0					
ANR	66582	Identifier	n_layers		66499	1					
ANR	66583	PtrMemberAccess	g -> n_layers		66499	1					
ANR	66584	Identifier	g		66499	0					
ANR	66585	Identifier	n_layers		66499	1					
ANR	66586	CompoundStatement		18:58:398:398	66499	1					
ANR	66587	ReturnStatement	return ;	757:2:19722:19728	66499	0	True				
ANR	66588	Statement	g	759:1:19734:19734	66499	19	True				
ANR	66589	Statement	->	759:2:19735:19736	66499	20	True				
ANR	66590	Statement	layers	759:4:19737:19742	66499	21	True				
ANR	66591	Statement	=	759:11:19744:19744	66499	22	True				
ANR	66592	Statement	R_NEWS0	759:13:19746:19752	66499	23	True				
ANR	66593	Statement	(	759:21:19754:19754	66499	24	True				
ANR	66594	Statement	struct	759:22:19755:19760	66499	25	True				
ANR	66595	Statement	layer_t	759:29:19762:19768	66499	26	True				
ANR	66596	Statement	","	759:36:19769:19769	66499	27	True				
ANR	66597	Statement	g	759:38:19771:19771	66499	28	True				
ANR	66598	Statement	->	759:39:19772:19773	66499	29	True				
ANR	66599	Statement	n_layers	759:41:19774:19781	66499	30	True				
ANR	66600	Statement	)	759:49:19782:19782	66499	31	True				
ANR	66601	ExpressionStatement		759:50:19783:19783	66499	32	True				
ANR	66602	Statement	graph_foreach_anode	761:1:19787:19805	66499	33	True				
ANR	66603	Statement	(	761:21:19807:19807	66499	34	True				
ANR	66604	Statement	nodes	761:22:19808:19812	66499	35	True				
ANR	66605	Statement	","	761:27:19813:19813	66499	36	True				
ANR	66606	Statement	it	761:29:19815:19816	66499	37	True				
ANR	66607	Statement	","	761:31:19817:19817	66499	38	True				
ANR	66608	Statement	gn	761:33:19819:19820	66499	39	True				
ANR	66609	Statement	","	761:35:19821:19821	66499	40	True				
ANR	66610	Statement	n	761:37:19823:19823	66499	41	True				
ANR	66611	Statement	)	761:38:19824:19824	66499	42	True				
ANR	66612	CompoundStatement		23:40:506:506	66499	43					
ANR	66613	ExpressionStatement	g -> layers [ n -> layer ] . n_nodes ++	762:2:19830:19859	66499	0	True				
ANR	66614	PostIncDecOperationExpression	g -> layers [ n -> layer ] . n_nodes ++		66499	0					
ANR	66615	MemberAccess	g -> layers [ n -> layer ] . n_nodes		66499	0					
ANR	66616	ArrayIndexing	g -> layers [ n -> layer ]		66499	0					
ANR	66617	PtrMemberAccess	g -> layers		66499	0					
ANR	66618	Identifier	g		66499	0					
ANR	66619	Identifier	layers		66499	1					
ANR	66620	PtrMemberAccess	n -> layer		66499	1					
ANR	66621	Identifier	n		66499	0					
ANR	66622	Identifier	layer		66499	1					
ANR	66623	Identifier	n_nodes		66499	1					
ANR	66624	IncDec	++		66499	1					
ANR	66625	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		66499	44					
ANR	66626	ForInit	i = 0 ;	765:6:19871:19876	66499	0	True				
ANR	66627	AssignmentExpression	i = 0		66499	0		=			
ANR	66628	Identifier	i		66499	0					
ANR	66629	PrimaryExpression	0		66499	1					
ANR	66630	Condition	i < g -> n_layers	765:13:19878:19892	66499	1	True				
ANR	66631	RelationalExpression	i < g -> n_layers		66499	0		<			
ANR	66632	Identifier	i		66499	0					
ANR	66633	PtrMemberAccess	g -> n_layers		66499	1					
ANR	66634	Identifier	g		66499	0					
ANR	66635	Identifier	n_layers		66499	1					
ANR	66636	UnaryExpression	++ i	765:30:19895:19897	66499	2	True				
ANR	66637	IncDec	++		66499	0					
ANR	66638	Identifier	i		66499	1					
ANR	66639	CompoundStatement		27:35:580:580	66499	3					
ANR	66640	IfStatement	if ( sizeof ( RGraphNode * ) * g -> layers [ i ] . n_nodes < g -> layers [ i ] . n_nodes )		66499	0					
ANR	66641	Condition	sizeof ( RGraphNode * ) * g -> layers [ i ] . n_nodes < g -> layers [ i ] . n_nodes	766:6:19908:19974	66499	0	True				
ANR	66642	RelationalExpression	sizeof ( RGraphNode * ) * g -> layers [ i ] . n_nodes < g -> layers [ i ] . n_nodes		66499	0		<			
ANR	66643	MultiplicativeExpression	sizeof ( RGraphNode * ) * g -> layers [ i ] . n_nodes		66499	0		*			
ANR	66644	SizeofExpression	sizeof ( RGraphNode * )		66499	0					
ANR	66645	Sizeof	sizeof		66499	0					
ANR	66646	SizeofOperand	RGraphNode *		66499	1					
ANR	66647	MemberAccess	g -> layers [ i ] . n_nodes		66499	1					
ANR	66648	ArrayIndexing	g -> layers [ i ]		66499	0					
ANR	66649	PtrMemberAccess	g -> layers		66499	0					
ANR	66650	Identifier	g		66499	0					
ANR	66651	Identifier	layers		66499	1					
ANR	66652	Identifier	i		66499	1					
ANR	66653	Identifier	n_nodes		66499	1					
ANR	66654	MemberAccess	g -> layers [ i ] . n_nodes		66499	1					
ANR	66655	ArrayIndexing	g -> layers [ i ]		66499	0					
ANR	66656	PtrMemberAccess	g -> layers		66499	0					
ANR	66657	Identifier	g		66499	0					
ANR	66658	Identifier	layers		66499	1					
ANR	66659	Identifier	i		66499	1					
ANR	66660	Identifier	n_nodes		66499	1					
ANR	66661	CompoundStatement		28:75:657:657	66499	1					
ANR	66662	ContinueStatement	continue ;	767:3:19982:19990	66499	0	True				
ANR	66663	Statement	g	769:2:19998:19998	66499	1	True				
ANR	66664	Statement	->	769:3:19999:20000	66499	2	True				
ANR	66665	Statement	layers	769:5:20001:20006	66499	3	True				
ANR	66666	Statement	[	769:11:20007:20007	66499	4	True				
ANR	66667	Statement	i	769:12:20008:20008	66499	5	True				
ANR	66668	Statement	]	769:13:20009:20009	66499	6	True				
ANR	66669	Statement	.	769:14:20010:20010	66499	7	True				
ANR	66670	Statement	nodes	769:15:20011:20015	66499	8	True				
ANR	66671	Statement	=	769:21:20017:20017	66499	9	True				
ANR	66672	Statement	R_NEWS0	769:23:20019:20025	66499	10	True				
ANR	66673	Statement	(	769:31:20027:20027	66499	11	True				
ANR	66674	Statement	RGraphNode	769:32:20028:20037	66499	12	True				
ANR	66675	Statement	*	769:43:20039:20039	66499	13	True				
ANR	66676	Statement	","	769:44:20040:20040	66499	14	True				
ANR	66677	Statement	1	770:3:20045:20045	66499	15	True				
ANR	66678	Statement	+	770:5:20047:20047	66499	16	True				
ANR	66679	Statement	g	770:7:20049:20049	66499	17	True				
ANR	66680	Statement	->	770:8:20050:20051	66499	18	True				
ANR	66681	Statement	layers	770:10:20052:20057	66499	19	True				
ANR	66682	Statement	[	770:16:20058:20058	66499	20	True				
ANR	66683	Statement	i	770:17:20059:20059	66499	21	True				
ANR	66684	Statement	]	770:18:20060:20060	66499	22	True				
ANR	66685	Statement	.	770:19:20061:20061	66499	23	True				
ANR	66686	Statement	n_nodes	770:20:20062:20068	66499	24	True				
ANR	66687	Statement	)	770:27:20069:20069	66499	25	True				
ANR	66688	ExpressionStatement		770:28:20070:20070	66499	26	True				
ANR	66689	ExpressionStatement	g -> layers [ i ] . position = 0	771:2:20074:20099	66499	27	True				
ANR	66690	AssignmentExpression	g -> layers [ i ] . position = 0		66499	0		=			
ANR	66691	MemberAccess	g -> layers [ i ] . position		66499	0					
ANR	66692	ArrayIndexing	g -> layers [ i ]		66499	0					
ANR	66693	PtrMemberAccess	g -> layers		66499	0					
ANR	66694	Identifier	g		66499	0					
ANR	66695	Identifier	layers		66499	1					
ANR	66696	Identifier	i		66499	1					
ANR	66697	Identifier	position		66499	1					
ANR	66698	PrimaryExpression	0		66499	1					
ANR	66699	Statement	graph_foreach_anode	773:1:20105:20123	66499	45	True				
ANR	66700	Statement	(	773:21:20125:20125	66499	46	True				
ANR	66701	Statement	nodes	773:22:20126:20130	66499	47	True				
ANR	66702	Statement	","	773:27:20131:20131	66499	48	True				
ANR	66703	Statement	it	773:29:20133:20134	66499	49	True				
ANR	66704	Statement	","	773:31:20135:20135	66499	50	True				
ANR	66705	Statement	gn	773:33:20137:20138	66499	51	True				
ANR	66706	Statement	","	773:35:20139:20139	66499	52	True				
ANR	66707	Statement	n	773:37:20141:20141	66499	53	True				
ANR	66708	Statement	)	773:38:20142:20142	66499	54	True				
ANR	66709	CompoundStatement		35:40:824:824	66499	55					
ANR	66710	ExpressionStatement	n -> pos_in_layer = g -> layers [ n -> layer ] . position	774:2:20148:20194	66499	0	True				
ANR	66711	AssignmentExpression	n -> pos_in_layer = g -> layers [ n -> layer ] . position		66499	0		=			
ANR	66712	PtrMemberAccess	n -> pos_in_layer		66499	0					
ANR	66713	Identifier	n		66499	0					
ANR	66714	Identifier	pos_in_layer		66499	1					
ANR	66715	MemberAccess	g -> layers [ n -> layer ] . position		66499	1					
ANR	66716	ArrayIndexing	g -> layers [ n -> layer ]		66499	0					
ANR	66717	PtrMemberAccess	g -> layers		66499	0					
ANR	66718	Identifier	g		66499	0					
ANR	66719	Identifier	layers		66499	1					
ANR	66720	PtrMemberAccess	n -> layer		66499	1					
ANR	66721	Identifier	n		66499	0					
ANR	66722	Identifier	layer		66499	1					
ANR	66723	Identifier	position		66499	1					
ANR	66724	ExpressionStatement	g -> layers [ n -> layer ] . nodes [ g -> layers [ n -> layer ] . position ++ ] = gn	775:2:20198:20260	66499	1	True				
ANR	66725	AssignmentExpression	g -> layers [ n -> layer ] . nodes [ g -> layers [ n -> layer ] . position ++ ] = gn		66499	0		=			
ANR	66726	ArrayIndexing	g -> layers [ n -> layer ] . nodes [ g -> layers [ n -> layer ] . position ++ ]		66499	0					
ANR	66727	MemberAccess	g -> layers [ n -> layer ] . nodes		66499	0					
ANR	66728	ArrayIndexing	g -> layers [ n -> layer ]		66499	0					
ANR	66729	PtrMemberAccess	g -> layers		66499	0					
ANR	66730	Identifier	g		66499	0					
ANR	66731	Identifier	layers		66499	1					
ANR	66732	PtrMemberAccess	n -> layer		66499	1					
ANR	66733	Identifier	n		66499	0					
ANR	66734	Identifier	layer		66499	1					
ANR	66735	Identifier	nodes		66499	1					
ANR	66736	PostIncDecOperationExpression	g -> layers [ n -> layer ] . position ++		66499	1					
ANR	66737	MemberAccess	g -> layers [ n -> layer ] . position		66499	0					
ANR	66738	ArrayIndexing	g -> layers [ n -> layer ]		66499	0					
ANR	66739	PtrMemberAccess	g -> layers		66499	0					
ANR	66740	Identifier	g		66499	0					
ANR	66741	Identifier	layers		66499	1					
ANR	66742	PtrMemberAccess	n -> layer		66499	1					
ANR	66743	Identifier	n		66499	0					
ANR	66744	Identifier	layer		66499	1					
ANR	66745	Identifier	position		66499	1					
ANR	66746	IncDec	++		66499	1					
ANR	66747	Identifier	gn		66499	1					
ANR	66748	ReturnType	static void		66499	1					
ANR	66749	Identifier	create_layers		66499	2					
ANR	66750	ParameterList	RAGraph * g		66499	3					
ANR	66751	Parameter	RAGraph * g	739:26:19307:19316	66499	0	True				
ANR	66752	ParameterType	RAGraph *		66499	0					
ANR	66753	Identifier	g		66499	1					
ANR	66754	CFGEntryNode	ENTRY		66499		True				
ANR	66755	CFGExitNode	EXIT		66499		True				
ANR	66756	Symbol	g -> layers [ i ] . position		66499						
ANR	66757	Symbol	g -> n_layers		66499						
ANR	66758	Symbol	g -> graph		66499						
ANR	66759	Symbol	* * n		66499						
ANR	66760	Symbol	* n -> layer		66499						
ANR	66761	Symbol	r_graph_get_nodes		66499						
ANR	66762	Symbol	* * g		66499						
ANR	66763	Symbol	g		66499						
ANR	66764	Symbol	gn		66499						
ANR	66765	Symbol	i		66499						
ANR	66766	Symbol	g -> layers [ n -> layer ] . nodes		66499						
ANR	66767	Symbol	it		66499						
ANR	66768	Symbol	* * n -> layer		66499						
ANR	66769	Symbol	n		66499						
ANR	66770	Symbol	g -> layers [ n -> layer ] . position		66499						
ANR	66771	Symbol	* g		66499						
ANR	66772	Symbol	nodes		66499						
ANR	66773	Symbol	g -> layers [ n -> layer ] . n_nodes		66499						
ANR	66774	Symbol	* i		66499						
ANR	66775	Symbol	n -> pos_in_layer		66499						
ANR	66776	Symbol	* * * n		66499						
ANR	66777	Symbol	* n		66499						
ANR	66778	Symbol	* g -> layers [ n -> layer ] . nodes		66499						
ANR	66779	Symbol	n -> layer		66499						
ANR	66780	Symbol	* g -> layers		66499						
ANR	66781	Symbol	* * * g		66499						
ANR	66782	Symbol	g -> layers [ i ] . n_nodes		66499						
ANR	66783	Symbol	g -> layers		66499						
ANR	66784	Symbol	* * g -> layers		66499						
ANR	66785	Function	minimize_crossings	782:0:20417:21067							
ANR	66786	FunctionDef	minimize_crossings (const RAGraph * g)		66785	0					
ANR	66787	CompoundStatement		782:49:20466:21067	66785	0					
ANR	66788	IdentifierDeclStatement	"int i , cross_changed , max_changes = 4096 ;"	783:1:20469:20509	66785	0	True				
ANR	66789	IdentifierDecl	i		66785	0					
ANR	66790	IdentifierDeclType	int		66785	0					
ANR	66791	Identifier	i		66785	1					
ANR	66792	IdentifierDecl	cross_changed		66785	1					
ANR	66793	IdentifierDeclType	int		66785	0					
ANR	66794	Identifier	cross_changed		66785	1					
ANR	66795	IdentifierDecl	max_changes = 4096		66785	2					
ANR	66796	IdentifierDeclType	int		66785	0					
ANR	66797	Identifier	max_changes		66785	1					
ANR	66798	AssignmentExpression	max_changes = 4096		66785	2		=			
ANR	66799	Identifier	max_changes		66785	0					
ANR	66800	PrimaryExpression	4096		66785	1					
ANR	66801	DoStatement	do		66785	1					
ANR	66802	CompoundStatement		4:4:49:49	66785	0					
ANR	66803	ExpressionStatement	cross_changed = false	786:2:20520:20541	66785	0	True				
ANR	66804	AssignmentExpression	cross_changed = false		66785	0		=			
ANR	66805	Identifier	cross_changed		66785	0					
ANR	66806	Identifier	false		66785	1					
ANR	66807	ExpressionStatement	max_changes --	787:2:20545:20558	66785	1	True				
ANR	66808	PostIncDecOperationExpression	max_changes --		66785	0					
ANR	66809	Identifier	max_changes		66785	0					
ANR	66810	IncDec	--		66785	1					
ANR	66811	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		66785	2					
ANR	66812	ForInit	i = 0 ;	789:7:20568:20573	66785	0	True				
ANR	66813	AssignmentExpression	i = 0		66785	0		=			
ANR	66814	Identifier	i		66785	0					
ANR	66815	PrimaryExpression	0		66785	1					
ANR	66816	Condition	i < g -> n_layers	789:14:20575:20589	66785	1	True				
ANR	66817	RelationalExpression	i < g -> n_layers		66785	0		<			
ANR	66818	Identifier	i		66785	0					
ANR	66819	PtrMemberAccess	g -> n_layers		66785	1					
ANR	66820	Identifier	g		66785	0					
ANR	66821	Identifier	n_layers		66785	1					
ANR	66822	UnaryExpression	++ i	789:31:20592:20594	66785	2	True				
ANR	66823	IncDec	++		66785	0					
ANR	66824	Identifier	i		66785	1					
ANR	66825	CompoundStatement		9:3:135:199	66785	3					
ANR	66826	IdentifierDeclStatement	"int rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , true ) ;"	790:3:20602:20666	66785	0	True				
ANR	66827	IdentifierDecl	"rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , true )"		66785	0					
ANR	66828	IdentifierDeclType	int		66785	0					
ANR	66829	Identifier	rc		66785	1					
ANR	66830	AssignmentExpression	"rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , true )"		66785	2		=			
ANR	66831	Identifier	rc		66785	0					
ANR	66832	CallExpression	"layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , true )"		66785	1					
ANR	66833	Callee	layer_sweep		66785	0					
ANR	66834	Identifier	layer_sweep		66785	0					
ANR	66835	ArgumentList	g -> graph		66785	1					
ANR	66836	Argument	g -> graph		66785	0					
ANR	66837	PtrMemberAccess	g -> graph		66785	0					
ANR	66838	Identifier	g		66785	0					
ANR	66839	Identifier	graph		66785	1					
ANR	66840	Argument	g -> layers		66785	1					
ANR	66841	PtrMemberAccess	g -> layers		66785	0					
ANR	66842	Identifier	g		66785	0					
ANR	66843	Identifier	layers		66785	1					
ANR	66844	Argument	g -> n_layers		66785	2					
ANR	66845	PtrMemberAccess	g -> n_layers		66785	0					
ANR	66846	Identifier	g		66785	0					
ANR	66847	Identifier	n_layers		66785	1					
ANR	66848	Argument	i		66785	3					
ANR	66849	Identifier	i		66785	0					
ANR	66850	Argument	true		66785	4					
ANR	66851	Identifier	true		66785	0					
ANR	66852	IfStatement	if ( rc == - 1 )		66785	1					
ANR	66853	Condition	rc == - 1	791:7:20675:20682	66785	0	True				
ANR	66854	EqualityExpression	rc == - 1		66785	0		==			
ANR	66855	Identifier	rc		66785	0					
ANR	66856	UnaryOperationExpression	- 1		66785	1					
ANR	66857	UnaryOperator	-		66785	0					
ANR	66858	PrimaryExpression	1		66785	1					
ANR	66859	CompoundStatement		10:17:218:218	66785	1					
ANR	66860	ReturnStatement	return ;	792:4:20691:20697	66785	0	True				
ANR	66861	ExpressionStatement	cross_changed |= ! ! rc	794:3:20707:20728	66785	2	True				
ANR	66862	AssignmentExpression	cross_changed |= ! ! rc		66785	0		|=			
ANR	66863	Identifier	cross_changed		66785	0					
ANR	66864	UnaryOperationExpression	! ! rc		66785	1					
ANR	66865	UnaryOperator	!		66785	0					
ANR	66866	UnaryOperationExpression	! rc		66785	1					
ANR	66867	UnaryOperator	!		66785	0					
ANR	66868	Identifier	rc		66785	1					
ANR	66869	Condition	cross_changed && max_changes	796:10:20744:20771	66785	1	True				
ANR	66870	AndExpression	cross_changed && max_changes		66785	0		&&			
ANR	66871	Identifier	cross_changed		66785	0					
ANR	66872	Identifier	max_changes		66785	1					
ANR	66873	ExpressionStatement	max_changes = 4096	798:1:20777:20795	66785	2	True				
ANR	66874	AssignmentExpression	max_changes = 4096		66785	0		=			
ANR	66875	Identifier	max_changes		66785	0					
ANR	66876	PrimaryExpression	4096		66785	1					
ANR	66877	DoStatement	do		66785	3					
ANR	66878	CompoundStatement		19:4:335:335	66785	0					
ANR	66879	ExpressionStatement	cross_changed = false	801:2:20806:20827	66785	0	True				
ANR	66880	AssignmentExpression	cross_changed = false		66785	0		=			
ANR	66881	Identifier	cross_changed		66785	0					
ANR	66882	Identifier	false		66785	1					
ANR	66883	ExpressionStatement	max_changes --	802:2:20831:20844	66785	1	True				
ANR	66884	PostIncDecOperationExpression	max_changes --		66785	0					
ANR	66885	Identifier	max_changes		66785	0					
ANR	66886	IncDec	--		66785	1					
ANR	66887	ForStatement	for ( i = g -> n_layers - 1 ; i >= 0 ; -- i )		66785	2					
ANR	66888	ForInit	i = g -> n_layers - 1 ;	804:7:20854:20873	66785	0	True				
ANR	66889	AssignmentExpression	i = g -> n_layers - 1		66785	0		=			
ANR	66890	Identifier	i		66785	0					
ANR	66891	AdditiveExpression	g -> n_layers - 1		66785	1		-			
ANR	66892	PtrMemberAccess	g -> n_layers		66785	0					
ANR	66893	Identifier	g		66785	0					
ANR	66894	Identifier	n_layers		66785	1					
ANR	66895	PrimaryExpression	1		66785	1					
ANR	66896	Condition	i >= 0	804:28:20875:20880	66785	1	True				
ANR	66897	RelationalExpression	i >= 0		66785	0		>=			
ANR	66898	Identifier	i		66785	0					
ANR	66899	PrimaryExpression	0		66785	1					
ANR	66900	UnaryExpression	-- i	804:36:20883:20885	66785	2	True				
ANR	66901	IncDec	--		66785	0					
ANR	66902	Identifier	i		66785	1					
ANR	66903	CompoundStatement		24:3:426:491	66785	3					
ANR	66904	IdentifierDeclStatement	"int rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , false ) ;"	805:3:20893:20958	66785	0	True				
ANR	66905	IdentifierDecl	"rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , false )"		66785	0					
ANR	66906	IdentifierDeclType	int		66785	0					
ANR	66907	Identifier	rc		66785	1					
ANR	66908	AssignmentExpression	"rc = layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , false )"		66785	2		=			
ANR	66909	Identifier	rc		66785	0					
ANR	66910	CallExpression	"layer_sweep ( g -> graph , g -> layers , g -> n_layers , i , false )"		66785	1					
ANR	66911	Callee	layer_sweep		66785	0					
ANR	66912	Identifier	layer_sweep		66785	0					
ANR	66913	ArgumentList	g -> graph		66785	1					
ANR	66914	Argument	g -> graph		66785	0					
ANR	66915	PtrMemberAccess	g -> graph		66785	0					
ANR	66916	Identifier	g		66785	0					
ANR	66917	Identifier	graph		66785	1					
ANR	66918	Argument	g -> layers		66785	1					
ANR	66919	PtrMemberAccess	g -> layers		66785	0					
ANR	66920	Identifier	g		66785	0					
ANR	66921	Identifier	layers		66785	1					
ANR	66922	Argument	g -> n_layers		66785	2					
ANR	66923	PtrMemberAccess	g -> n_layers		66785	0					
ANR	66924	Identifier	g		66785	0					
ANR	66925	Identifier	n_layers		66785	1					
ANR	66926	Argument	i		66785	3					
ANR	66927	Identifier	i		66785	0					
ANR	66928	Argument	false		66785	4					
ANR	66929	Identifier	false		66785	0					
ANR	66930	IfStatement	if ( rc == - 1 )		66785	1					
ANR	66931	Condition	rc == - 1	806:7:20967:20974	66785	0	True				
ANR	66932	EqualityExpression	rc == - 1		66785	0		==			
ANR	66933	Identifier	rc		66785	0					
ANR	66934	UnaryOperationExpression	- 1		66785	1					
ANR	66935	UnaryOperator	-		66785	0					
ANR	66936	PrimaryExpression	1		66785	1					
ANR	66937	CompoundStatement		25:17:510:510	66785	1					
ANR	66938	ReturnStatement	return ;	807:4:20983:20989	66785	0	True				
ANR	66939	ExpressionStatement	cross_changed |= ! ! rc	809:3:20999:21020	66785	2	True				
ANR	66940	AssignmentExpression	cross_changed |= ! ! rc		66785	0		|=			
ANR	66941	Identifier	cross_changed		66785	0					
ANR	66942	UnaryOperationExpression	! ! rc		66785	1					
ANR	66943	UnaryOperator	!		66785	0					
ANR	66944	UnaryOperationExpression	! rc		66785	1					
ANR	66945	UnaryOperator	!		66785	0					
ANR	66946	Identifier	rc		66785	1					
ANR	66947	Condition	cross_changed && max_changes	811:10:21036:21063	66785	1	True				
ANR	66948	AndExpression	cross_changed && max_changes		66785	0		&&			
ANR	66949	Identifier	cross_changed		66785	0					
ANR	66950	Identifier	max_changes		66785	1					
ANR	66951	ReturnType	static void		66785	1					
ANR	66952	Identifier	minimize_crossings		66785	2					
ANR	66953	ParameterList	const RAGraph * g		66785	3					
ANR	66954	Parameter	const RAGraph * g	782:31:20448:20463	66785	0	True				
ANR	66955	ParameterType	const RAGraph *		66785	0					
ANR	66956	Identifier	g		66785	1					
ANR	66957	CFGEntryNode	ENTRY		66785		True				
ANR	66958	CFGExitNode	EXIT		66785		True				
ANR	66959	Symbol	* g		66785						
ANR	66960	Symbol	rc		66785						
ANR	66961	Symbol	cross_changed		66785						
ANR	66962	Symbol	layer_sweep		66785						
ANR	66963	Symbol	g -> graph		66785						
ANR	66964	Symbol	g		66785						
ANR	66965	Symbol	false		66785						
ANR	66966	Symbol	true		66785						
ANR	66967	Symbol	i		66785						
ANR	66968	Symbol	g -> n_layers		66785						
ANR	66969	Symbol	max_changes		66785						
ANR	66970	Symbol	g -> layers		66785						
ANR	66971	Function	find_dist	814:0:21070:21193							
ANR	66972	FunctionDef	"find_dist (const struct dist_t * a , const struct dist_t * b)"		66971	0					
ANR	66973	CompoundStatement		814:69:21139:21193	66971	0					
ANR	66974	ReturnStatement	return a -> from == b -> from && a -> to == b -> to ? 0 : 1 ;	815:1:21142:21191	66971	0	True				
ANR	66975	ConditionalExpression	a -> from == b -> from && a -> to == b -> to ? 0 : 1		66971	0					
ANR	66976	Condition	a -> from == b -> from && a -> to == b -> to		66971	0					
ANR	66977	AndExpression	a -> from == b -> from && a -> to == b -> to		66971	0		&&			
ANR	66978	EqualityExpression	a -> from == b -> from		66971	0		==			
ANR	66979	PtrMemberAccess	a -> from		66971	0					
ANR	66980	Identifier	a		66971	0					
ANR	66981	Identifier	from		66971	1					
ANR	66982	PtrMemberAccess	b -> from		66971	1					
ANR	66983	Identifier	b		66971	0					
ANR	66984	Identifier	from		66971	1					
ANR	66985	EqualityExpression	a -> to == b -> to		66971	1		==			
ANR	66986	PtrMemberAccess	a -> to		66971	0					
ANR	66987	Identifier	a		66971	0					
ANR	66988	Identifier	to		66971	1					
ANR	66989	PtrMemberAccess	b -> to		66971	1					
ANR	66990	Identifier	b		66971	0					
ANR	66991	Identifier	to		66971	1					
ANR	66992	PrimaryExpression	0		66971	1					
ANR	66993	PrimaryExpression	1		66971	2					
ANR	66994	ReturnType	static int		66971	1					
ANR	66995	Identifier	find_dist		66971	2					
ANR	66996	ParameterList	"const struct dist_t * a , const struct dist_t * b"		66971	3					
ANR	66997	Parameter	const struct dist_t * a	814:21:21091:21112	66971	0	True				
ANR	66998	ParameterType	const struct dist_t *		66971	0					
ANR	66999	Identifier	a		66971	1					
ANR	67000	Parameter	const struct dist_t * b	814:45:21115:21136	66971	1	True				
ANR	67001	ParameterType	const struct dist_t *		66971	0					
ANR	67002	Identifier	b		66971	1					
ANR	67003	CFGEntryNode	ENTRY		66971		True				
ANR	67004	CFGExitNode	EXIT		66971		True				
ANR	67005	Symbol	a		66971						
ANR	67006	Symbol	a -> from		66971						
ANR	67007	Symbol	b		66971						
ANR	67008	Symbol	a -> to		66971						
ANR	67009	Symbol	b -> to		66971						
ANR	67010	Symbol	b -> from		66971						
ANR	67011	Symbol	* a		66971						
ANR	67012	Symbol	* b		66971						
ANR	67013	Function	dist_nodes	821:0:21383:22827							
ANR	67014	FunctionDef	"dist_nodes (const RAGraph * g , const RGraphNode * a , const RGraphNode * b)"		67013	0					
ANR	67015	CompoundStatement		821:82:21465:22827	67013	0					
ANR	67016	IdentifierDeclStatement	struct dist_t d ;	822:1:21468:21483	67013	0	True				
ANR	67017	IdentifierDecl	d		67013	0					
ANR	67018	IdentifierDeclType	struct dist_t		67013	0					
ANR	67019	Identifier	d		67013	1					
ANR	67020	IdentifierDeclStatement	"const RANode * aa , * ab ;"	823:1:21486:21507	67013	1	True				
ANR	67021	IdentifierDecl	* aa		67013	0					
ANR	67022	IdentifierDeclType	const RANode *		67013	0					
ANR	67023	Identifier	aa		67013	1					
ANR	67024	IdentifierDecl	* ab		67013	1					
ANR	67025	IdentifierDeclType	const RANode *		67013	0					
ANR	67026	Identifier	ab		67013	1					
ANR	67027	IdentifierDeclStatement	RListIter * it ;	824:1:21510:21523	67013	2	True				
ANR	67028	IdentifierDecl	* it		67013	0					
ANR	67029	IdentifierDeclType	RListIter *		67013	0					
ANR	67030	Identifier	it		67013	1					
ANR	67031	IdentifierDeclStatement	int res = 0 ;	825:1:21526:21537	67013	3	True				
ANR	67032	IdentifierDecl	res = 0		67013	0					
ANR	67033	IdentifierDeclType	int		67013	0					
ANR	67034	Identifier	res		67013	1					
ANR	67035	AssignmentExpression	res = 0		67013	2		=			
ANR	67036	Identifier	res		67013	0					
ANR	67037	PrimaryExpression	0		67013	1					
ANR	67038	IfStatement	if ( g -> dists )		67013	4					
ANR	67039	Condition	g -> dists	827:5:21545:21552	67013	0	True				
ANR	67040	PtrMemberAccess	g -> dists		67013	0					
ANR	67041	Identifier	g		67013	0					
ANR	67042	Identifier	dists		67013	1					
ANR	67043	CompoundStatement		7:15:89:89	67013	1					
ANR	67044	ExpressionStatement	d . from = a	828:2:21559:21569	67013	0	True				
ANR	67045	AssignmentExpression	d . from = a		67013	0		=			
ANR	67046	MemberAccess	d . from		67013	0					
ANR	67047	Identifier	d		67013	0					
ANR	67048	Identifier	from		67013	1					
ANR	67049	Identifier	a		67013	1					
ANR	67050	ExpressionStatement	d . to = b	829:2:21573:21581	67013	1	True				
ANR	67051	AssignmentExpression	d . to = b		67013	0		=			
ANR	67052	MemberAccess	d . to		67013	0					
ANR	67053	Identifier	d		67013	0					
ANR	67054	Identifier	to		67013	1					
ANR	67055	Identifier	b		67013	1					
ANR	67056	ExpressionStatement	"it = r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"	830:2:21585:21645	67013	2	True				
ANR	67057	AssignmentExpression	"it = r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"		67013	0		=			
ANR	67058	Identifier	it		67013	0					
ANR	67059	CallExpression	"r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"		67013	1					
ANR	67060	Callee	r_list_find		67013	0					
ANR	67061	Identifier	r_list_find		67013	0					
ANR	67062	ArgumentList	g -> dists		67013	1					
ANR	67063	Argument	g -> dists		67013	0					
ANR	67064	PtrMemberAccess	g -> dists		67013	0					
ANR	67065	Identifier	g		67013	0					
ANR	67066	Identifier	dists		67013	1					
ANR	67067	Argument	& d		67013	1					
ANR	67068	UnaryOperationExpression	& d		67013	0					
ANR	67069	UnaryOperator	&		67013	0					
ANR	67070	Identifier	d		67013	1					
ANR	67071	Argument	( RListComparator ) find_dist		67013	2					
ANR	67072	CastExpression	( RListComparator ) find_dist		67013	0					
ANR	67073	CastTarget	RListComparator		67013	0					
ANR	67074	Identifier	find_dist		67013	1					
ANR	67075	IfStatement	if ( it )		67013	3					
ANR	67076	Condition	it	831:6:21653:21654	67013	0	True				
ANR	67077	Identifier	it		67013	0					
ANR	67078	CompoundStatement		12:3:196:260	67013	1					
ANR	67079	IdentifierDeclStatement	struct dist_t * old = ( struct dist_t * ) r_list_iter_get_data ( it ) ;	832:3:21662:21726	67013	0	True				
ANR	67080	IdentifierDecl	* old = ( struct dist_t * ) r_list_iter_get_data ( it )		67013	0					
ANR	67081	IdentifierDeclType	struct dist_t *		67013	0					
ANR	67082	Identifier	old		67013	1					
ANR	67083	AssignmentExpression	* old = ( struct dist_t * ) r_list_iter_get_data ( it )		67013	2		=			
ANR	67084	Identifier	old		67013	0					
ANR	67085	CastExpression	( struct dist_t * ) r_list_iter_get_data ( it )		67013	1					
ANR	67086	CastTarget	struct dist_t *		67013	0					
ANR	67087	CallExpression	r_list_iter_get_data ( it )		67013	1					
ANR	67088	Callee	r_list_iter_get_data		67013	0					
ANR	67089	Identifier	r_list_iter_get_data		67013	0					
ANR	67090	ArgumentList	it		67013	1					
ANR	67091	Argument	it		67013	0					
ANR	67092	Identifier	it		67013	0					
ANR	67093	ReturnStatement	return old -> dist ;	833:3:21731:21747	67013	1	True				
ANR	67094	PtrMemberAccess	old -> dist		67013	0					
ANR	67095	Identifier	old		67013	0					
ANR	67096	Identifier	dist		67013	1					
ANR	67097	ExpressionStatement	aa = get_anode ( a )	837:1:21758:21776	67013	5	True				
ANR	67098	AssignmentExpression	aa = get_anode ( a )		67013	0		=			
ANR	67099	Identifier	aa		67013	0					
ANR	67100	CallExpression	get_anode ( a )		67013	1					
ANR	67101	Callee	get_anode		67013	0					
ANR	67102	Identifier	get_anode		67013	0					
ANR	67103	ArgumentList	a		67013	1					
ANR	67104	Argument	a		67013	0					
ANR	67105	Identifier	a		67013	0					
ANR	67106	ExpressionStatement	ab = get_anode ( b )	838:1:21779:21797	67013	6	True				
ANR	67107	AssignmentExpression	ab = get_anode ( b )		67013	0		=			
ANR	67108	Identifier	ab		67013	0					
ANR	67109	CallExpression	get_anode ( b )		67013	1					
ANR	67110	Callee	get_anode		67013	0					
ANR	67111	Identifier	get_anode		67013	0					
ANR	67112	ArgumentList	b		67013	1					
ANR	67113	Argument	b		67013	0					
ANR	67114	Identifier	b		67013	0					
ANR	67115	IfStatement	if ( aa && ab && aa -> layer == ab -> layer )		67013	7					
ANR	67116	Condition	aa && ab && aa -> layer == ab -> layer	839:5:21804:21837	67013	0	True				
ANR	67117	AndExpression	aa && ab && aa -> layer == ab -> layer		67013	0		&&			
ANR	67118	Identifier	aa		67013	0					
ANR	67119	AndExpression	ab && aa -> layer == ab -> layer		67013	1		&&			
ANR	67120	Identifier	ab		67013	0					
ANR	67121	EqualityExpression	aa -> layer == ab -> layer		67013	1		==			
ANR	67122	PtrMemberAccess	aa -> layer		67013	0					
ANR	67123	Identifier	aa		67013	0					
ANR	67124	Identifier	layer		67013	1					
ANR	67125	PtrMemberAccess	ab -> layer		67013	1					
ANR	67126	Identifier	ab		67013	0					
ANR	67127	Identifier	layer		67013	1					
ANR	67128	CompoundStatement		20:2:378:383	67013	1					
ANR	67129	IdentifierDeclStatement	int i ;	840:2:21844:21849	67013	0	True				
ANR	67130	IdentifierDecl	i		67013	0					
ANR	67131	IdentifierDeclType	int		67013	0					
ANR	67132	Identifier	i		67013	1					
ANR	67133	ExpressionStatement	res = aa == ab && ! aa -> is_reversed ? HORIZONTAL_NODE_SPACING : 0	842:2:21854:21916	67013	1	True				
ANR	67134	AssignmentExpression	res = aa == ab && ! aa -> is_reversed ? HORIZONTAL_NODE_SPACING : 0		67013	0		=			
ANR	67135	Identifier	res		67013	0					
ANR	67136	ConditionalExpression	aa == ab && ! aa -> is_reversed ? HORIZONTAL_NODE_SPACING : 0		67013	1					
ANR	67137	Condition	aa == ab && ! aa -> is_reversed		67013	0					
ANR	67138	AndExpression	aa == ab && ! aa -> is_reversed		67013	0		&&			
ANR	67139	EqualityExpression	aa == ab		67013	0		==			
ANR	67140	Identifier	aa		67013	0					
ANR	67141	Identifier	ab		67013	1					
ANR	67142	UnaryOperationExpression	! aa -> is_reversed		67013	1					
ANR	67143	UnaryOperator	!		67013	0					
ANR	67144	PtrMemberAccess	aa -> is_reversed		67013	1					
ANR	67145	Identifier	aa		67013	0					
ANR	67146	Identifier	is_reversed		67013	1					
ANR	67147	Identifier	HORIZONTAL_NODE_SPACING		67013	1					
ANR	67148	PrimaryExpression	0		67013	2					
ANR	67149	ForStatement	for ( i = aa -> pos_in_layer ; i < ab -> pos_in_layer ; ++ i )		67013	2					
ANR	67150	ForInit	i = aa -> pos_in_layer ;	843:7:21925:21945	67013	0	True				
ANR	67151	AssignmentExpression	i = aa -> pos_in_layer		67013	0		=			
ANR	67152	Identifier	i		67013	0					
ANR	67153	PtrMemberAccess	aa -> pos_in_layer		67013	1					
ANR	67154	Identifier	aa		67013	0					
ANR	67155	Identifier	pos_in_layer		67013	1					
ANR	67156	Condition	i < ab -> pos_in_layer	843:29:21947:21966	67013	1	True				
ANR	67157	RelationalExpression	i < ab -> pos_in_layer		67013	0		<			
ANR	67158	Identifier	i		67013	0					
ANR	67159	PtrMemberAccess	ab -> pos_in_layer		67013	1					
ANR	67160	Identifier	ab		67013	0					
ANR	67161	Identifier	pos_in_layer		67013	1					
ANR	67162	UnaryExpression	++ i	843:51:21969:21971	67013	2	True				
ANR	67163	IncDec	++		67013	0					
ANR	67164	Identifier	i		67013	1					
ANR	67165	CompoundStatement		28:3:718:735	67013	3					
ANR	67166	IdentifierDeclStatement	const RGraphNode * cur = g -> layers [ aa -> layer ] . nodes [ i ] ;	844:3:21979:22032	67013	0	True				
ANR	67167	IdentifierDecl	* cur = g -> layers [ aa -> layer ] . nodes [ i ]		67013	0					
ANR	67168	IdentifierDeclType	const RGraphNode *		67013	0					
ANR	67169	Identifier	cur		67013	1					
ANR	67170	AssignmentExpression	* cur = g -> layers [ aa -> layer ] . nodes [ i ]		67013	2		=			
ANR	67171	Identifier	cur		67013	0					
ANR	67172	ArrayIndexing	g -> layers [ aa -> layer ] . nodes [ i ]		67013	1					
ANR	67173	MemberAccess	g -> layers [ aa -> layer ] . nodes		67013	0					
ANR	67174	ArrayIndexing	g -> layers [ aa -> layer ]		67013	0					
ANR	67175	PtrMemberAccess	g -> layers		67013	0					
ANR	67176	Identifier	g		67013	0					
ANR	67177	Identifier	layers		67013	1					
ANR	67178	PtrMemberAccess	aa -> layer		67013	1					
ANR	67179	Identifier	aa		67013	0					
ANR	67180	Identifier	layer		67013	1					
ANR	67181	Identifier	nodes		67013	1					
ANR	67182	Identifier	i		67013	1					
ANR	67183	IdentifierDeclStatement	const RGraphNode * next = g -> layers [ aa -> layer ] . nodes [ i + 1 ] ;	845:3:22037:22095	67013	1	True				
ANR	67184	IdentifierDecl	* next = g -> layers [ aa -> layer ] . nodes [ i + 1 ]		67013	0					
ANR	67185	IdentifierDeclType	const RGraphNode *		67013	0					
ANR	67186	Identifier	next		67013	1					
ANR	67187	AssignmentExpression	* next = g -> layers [ aa -> layer ] . nodes [ i + 1 ]		67013	2		=			
ANR	67188	Identifier	next		67013	0					
ANR	67189	ArrayIndexing	g -> layers [ aa -> layer ] . nodes [ i + 1 ]		67013	1					
ANR	67190	MemberAccess	g -> layers [ aa -> layer ] . nodes		67013	0					
ANR	67191	ArrayIndexing	g -> layers [ aa -> layer ]		67013	0					
ANR	67192	PtrMemberAccess	g -> layers		67013	0					
ANR	67193	Identifier	g		67013	0					
ANR	67194	Identifier	layers		67013	1					
ANR	67195	PtrMemberAccess	aa -> layer		67013	1					
ANR	67196	Identifier	aa		67013	0					
ANR	67197	Identifier	layer		67013	1					
ANR	67198	Identifier	nodes		67013	1					
ANR	67199	AdditiveExpression	i + 1		67013	1		+			
ANR	67200	Identifier	i		67013	0					
ANR	67201	PrimaryExpression	1		67013	1					
ANR	67202	IdentifierDeclStatement	const RANode * anext = get_anode ( next ) ;	846:3:22100:22138	67013	2	True				
ANR	67203	IdentifierDecl	* anext = get_anode ( next )		67013	0					
ANR	67204	IdentifierDeclType	const RANode *		67013	0					
ANR	67205	Identifier	anext		67013	1					
ANR	67206	AssignmentExpression	* anext = get_anode ( next )		67013	2		=			
ANR	67207	Identifier	anext		67013	0					
ANR	67208	CallExpression	get_anode ( next )		67013	1					
ANR	67209	Callee	get_anode		67013	0					
ANR	67210	Identifier	get_anode		67013	0					
ANR	67211	ArgumentList	next		67013	1					
ANR	67212	Argument	next		67013	0					
ANR	67213	Identifier	next		67013	0					
ANR	67214	IdentifierDeclStatement	const RANode * acur = get_anode ( cur ) ;	847:3:22143:22179	67013	3	True				
ANR	67215	IdentifierDecl	* acur = get_anode ( cur )		67013	0					
ANR	67216	IdentifierDeclType	const RANode *		67013	0					
ANR	67217	Identifier	acur		67013	1					
ANR	67218	AssignmentExpression	* acur = get_anode ( cur )		67013	2		=			
ANR	67219	Identifier	acur		67013	0					
ANR	67220	CallExpression	get_anode ( cur )		67013	1					
ANR	67221	Callee	get_anode		67013	0					
ANR	67222	Identifier	get_anode		67013	0					
ANR	67223	ArgumentList	cur		67013	1					
ANR	67224	Argument	cur		67013	0					
ANR	67225	Identifier	cur		67013	0					
ANR	67226	IdentifierDeclStatement	int found = false ;	848:3:22184:22201	67013	4	True				
ANR	67227	IdentifierDecl	found = false		67013	0					
ANR	67228	IdentifierDeclType	int		67013	0					
ANR	67229	Identifier	found		67013	1					
ANR	67230	AssignmentExpression	found = false		67013	2		=			
ANR	67231	Identifier	false		67013	0					
ANR	67232	Identifier	false		67013	1					
ANR	67233	IfStatement	if ( g -> dists )		67013	5					
ANR	67234	Condition	g -> dists	850:7:22211:22218	67013	0	True				
ANR	67235	PtrMemberAccess	g -> dists		67013	0					
ANR	67236	Identifier	g		67013	0					
ANR	67237	Identifier	dists		67013	1					
ANR	67238	CompoundStatement		30:17:755:755	67013	1					
ANR	67239	ExpressionStatement	d . from = cur	851:4:22227:22239	67013	0	True				
ANR	67240	AssignmentExpression	d . from = cur		67013	0		=			
ANR	67241	MemberAccess	d . from		67013	0					
ANR	67242	Identifier	d		67013	0					
ANR	67243	Identifier	from		67013	1					
ANR	67244	Identifier	cur		67013	1					
ANR	67245	ExpressionStatement	d . to = next	852:4:22245:22256	67013	1	True				
ANR	67246	AssignmentExpression	d . to = next		67013	0		=			
ANR	67247	MemberAccess	d . to		67013	0					
ANR	67248	Identifier	d		67013	0					
ANR	67249	Identifier	to		67013	1					
ANR	67250	Identifier	next		67013	1					
ANR	67251	ExpressionStatement	"it = r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"	853:4:22262:22322	67013	2	True				
ANR	67252	AssignmentExpression	"it = r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"		67013	0		=			
ANR	67253	Identifier	it		67013	0					
ANR	67254	CallExpression	"r_list_find ( g -> dists , & d , ( RListComparator ) find_dist )"		67013	1					
ANR	67255	Callee	r_list_find		67013	0					
ANR	67256	Identifier	r_list_find		67013	0					
ANR	67257	ArgumentList	g -> dists		67013	1					
ANR	67258	Argument	g -> dists		67013	0					
ANR	67259	PtrMemberAccess	g -> dists		67013	0					
ANR	67260	Identifier	g		67013	0					
ANR	67261	Identifier	dists		67013	1					
ANR	67262	Argument	& d		67013	1					
ANR	67263	UnaryOperationExpression	& d		67013	0					
ANR	67264	UnaryOperator	&		67013	0					
ANR	67265	Identifier	d		67013	1					
ANR	67266	Argument	( RListComparator ) find_dist		67013	2					
ANR	67267	CastExpression	( RListComparator ) find_dist		67013	0					
ANR	67268	CastTarget	RListComparator		67013	0					
ANR	67269	Identifier	find_dist		67013	1					
ANR	67270	IfStatement	if ( it )		67013	3					
ANR	67271	Condition	it	854:8:22332:22333	67013	0	True				
ANR	67272	Identifier	it		67013	0					
ANR	67273	CompoundStatement		35:5:877:941	67013	1					
ANR	67274	IdentifierDeclStatement	struct dist_t * old = ( struct dist_t * ) r_list_iter_get_data ( it ) ;	855:5:22343:22407	67013	0	True				
ANR	67275	IdentifierDecl	* old = ( struct dist_t * ) r_list_iter_get_data ( it )		67013	0					
ANR	67276	IdentifierDeclType	struct dist_t *		67013	0					
ANR	67277	Identifier	old		67013	1					
ANR	67278	AssignmentExpression	* old = ( struct dist_t * ) r_list_iter_get_data ( it )		67013	2		=			
ANR	67279	Identifier	old		67013	0					
ANR	67280	CastExpression	( struct dist_t * ) r_list_iter_get_data ( it )		67013	1					
ANR	67281	CastTarget	struct dist_t *		67013	0					
ANR	67282	CallExpression	r_list_iter_get_data ( it )		67013	1					
ANR	67283	Callee	r_list_iter_get_data		67013	0					
ANR	67284	Identifier	r_list_iter_get_data		67013	0					
ANR	67285	ArgumentList	it		67013	1					
ANR	67286	Argument	it		67013	0					
ANR	67287	Identifier	it		67013	0					
ANR	67288	ExpressionStatement	res += old -> dist	856:5:22414:22430	67013	1	True				
ANR	67289	AssignmentExpression	res += old -> dist		67013	0		+=			
ANR	67290	Identifier	res		67013	0					
ANR	67291	PtrMemberAccess	old -> dist		67013	1					
ANR	67292	Identifier	old		67013	0					
ANR	67293	Identifier	dist		67013	1					
ANR	67294	ExpressionStatement	found = true	857:5:22437:22449	67013	2	True				
ANR	67295	AssignmentExpression	found = true		67013	0		=			
ANR	67296	Identifier	found		67013	0					
ANR	67297	Identifier	true		67013	1					
ANR	67298	IfStatement	if ( acur && anext && ! found )		67013	6					
ANR	67299	Condition	acur && anext && ! found	861:7:22470:22492	67013	0	True				
ANR	67300	AndExpression	acur && anext && ! found		67013	0		&&			
ANR	67301	Identifier	acur		67013	0					
ANR	67302	AndExpression	anext && ! found		67013	1		&&			
ANR	67303	Identifier	anext		67013	0					
ANR	67304	UnaryOperationExpression	! found		67013	1					
ANR	67305	UnaryOperator	!		67013	0					
ANR	67306	Identifier	found		67013	1					
ANR	67307	CompoundStatement		42:4:1035:1070	67013	1					
ANR	67308	IdentifierDeclStatement	int space = HORIZONTAL_NODE_SPACING ;	862:4:22501:22536	67013	0	True				
ANR	67309	IdentifierDecl	space = HORIZONTAL_NODE_SPACING		67013	0					
ANR	67310	IdentifierDeclType	int		67013	0					
ANR	67311	Identifier	space		67013	1					
ANR	67312	AssignmentExpression	space = HORIZONTAL_NODE_SPACING		67013	2		=			
ANR	67313	Identifier	HORIZONTAL_NODE_SPACING		67013	0					
ANR	67314	Identifier	HORIZONTAL_NODE_SPACING		67013	1					
ANR	67315	IfStatement	if ( acur -> is_reversed && anext -> is_reversed )		67013	1					
ANR	67316	Condition	acur -> is_reversed && anext -> is_reversed	863:8:22546:22584	67013	0	True				
ANR	67317	AndExpression	acur -> is_reversed && anext -> is_reversed		67013	0		&&			
ANR	67318	PtrMemberAccess	acur -> is_reversed		67013	0					
ANR	67319	Identifier	acur		67013	0					
ANR	67320	Identifier	is_reversed		67013	1					
ANR	67321	PtrMemberAccess	anext -> is_reversed		67013	1					
ANR	67322	Identifier	anext		67013	0					
ANR	67323	Identifier	is_reversed		67013	1					
ANR	67324	CompoundStatement		43:49:1121:1121	67013	1					
ANR	67325	IfStatement	if ( ! acur -> is_reversed )		67013	0					
ANR	67326	Condition	! acur -> is_reversed	864:9:22598:22615	67013	0	True				
ANR	67327	UnaryOperationExpression	! acur -> is_reversed		67013	0					
ANR	67328	UnaryOperator	!		67013	0					
ANR	67329	PtrMemberAccess	acur -> is_reversed		67013	1					
ANR	67330	Identifier	acur		67013	0					
ANR	67331	Identifier	is_reversed		67013	1					
ANR	67332	CompoundStatement		44:29:1152:1152	67013	1					
ANR	67333	ExpressionStatement	res += acur -> w / 2	865:6:22626:22644	67013	0	True				
ANR	67334	AssignmentExpression	res += acur -> w / 2		67013	0		+=			
ANR	67335	Identifier	res		67013	0					
ANR	67336	MultiplicativeExpression	acur -> w / 2		67013	1		/			
ANR	67337	PtrMemberAccess	acur -> w		67013	0					
ANR	67338	Identifier	acur		67013	0					
ANR	67339	Identifier	w		67013	1					
ANR	67340	PrimaryExpression	2		67013	1					
ANR	67341	ElseStatement	else		67013	0					
ANR	67342	IfStatement	if ( ! anext -> is_reversed )		67013	0					
ANR	67343	Condition	! anext -> is_reversed	866:16:22662:22680	67013	0	True				
ANR	67344	UnaryOperationExpression	! anext -> is_reversed		67013	0					
ANR	67345	UnaryOperator	!		67013	0					
ANR	67346	PtrMemberAccess	anext -> is_reversed		67013	1					
ANR	67347	Identifier	anext		67013	0					
ANR	67348	Identifier	is_reversed		67013	1					
ANR	67349	CompoundStatement		46:37:1217:1217	67013	1					
ANR	67350	ExpressionStatement	res += anext -> w / 2	867:6:22691:22710	67013	0	True				
ANR	67351	AssignmentExpression	res += anext -> w / 2		67013	0		+=			
ANR	67352	Identifier	res		67013	0					
ANR	67353	MultiplicativeExpression	anext -> w / 2		67013	1		/			
ANR	67354	PtrMemberAccess	anext -> w		67013	0					
ANR	67355	Identifier	anext		67013	0					
ANR	67356	Identifier	w		67013	1					
ANR	67357	PrimaryExpression	2		67013	1					
ANR	67358	ExpressionStatement	res += 1	869:5:22724:22732	67013	1	True				
ANR	67359	AssignmentExpression	res += 1		67013	0		+=			
ANR	67360	Identifier	res		67013	0					
ANR	67361	PrimaryExpression	1		67013	1					
ANR	67362	ElseStatement	else		67013	0					
ANR	67363	CompoundStatement		50:11:1279:1279	67013	0					
ANR	67364	ExpressionStatement	res += acur -> w / 2 + anext -> w / 2 + space	871:5:22752:22793	67013	0	True				
ANR	67365	AssignmentExpression	res += acur -> w / 2 + anext -> w / 2 + space		67013	0		+=			
ANR	67366	Identifier	res		67013	0					
ANR	67367	AdditiveExpression	acur -> w / 2 + anext -> w / 2 + space		67013	1		+			
ANR	67368	MultiplicativeExpression	acur -> w / 2		67013	0		/			
ANR	67369	PtrMemberAccess	acur -> w		67013	0					
ANR	67370	Identifier	acur		67013	0					
ANR	67371	Identifier	w		67013	1					
ANR	67372	PrimaryExpression	2		67013	1					
ANR	67373	AdditiveExpression	anext -> w / 2 + space		67013	1		+			
ANR	67374	MultiplicativeExpression	anext -> w / 2		67013	0		/			
ANR	67375	PtrMemberAccess	anext -> w		67013	0					
ANR	67376	Identifier	anext		67013	0					
ANR	67377	Identifier	w		67013	1					
ANR	67378	PrimaryExpression	2		67013	1					
ANR	67379	Identifier	space		67013	1					
ANR	67380	ReturnStatement	return res ;	877:1:22815:22825	67013	8	True				
ANR	67381	Identifier	res		67013	0					
ANR	67382	ReturnType	static int		67013	1					
ANR	67383	Identifier	dist_nodes		67013	2					
ANR	67384	ParameterList	"const RAGraph * g , const RGraphNode * a , const RGraphNode * b"		67013	3					
ANR	67385	Parameter	const RAGraph * g	821:22:21405:21420	67013	0	True				
ANR	67386	ParameterType	const RAGraph *		67013	0					
ANR	67387	Identifier	g		67013	1					
ANR	67388	Parameter	const RGraphNode * a	821:40:21423:21441	67013	1	True				
ANR	67389	ParameterType	const RGraphNode *		67013	0					
ANR	67390	Identifier	a		67013	1					
ANR	67391	Parameter	const RGraphNode * b	821:61:21444:21462	67013	2	True				
ANR	67392	ParameterType	const RGraphNode *		67013	0					
ANR	67393	Identifier	b		67013	1					
ANR	67394	CFGEntryNode	ENTRY		67013		True				
ANR	67395	CFGExitNode	EXIT		67013		True				
ANR	67396	Symbol	old -> dist		67013						
ANR	67397	Symbol	anext -> is_reversed		67013						
ANR	67398	Symbol	aa -> pos_in_layer		67013						
ANR	67399	Symbol	HORIZONTAL_NODE_SPACING		67013						
ANR	67400	Symbol	* * aa		67013						
ANR	67401	Symbol	space		67013						
ANR	67402	Symbol	acur		67013						
ANR	67403	Symbol	d . to		67013						
ANR	67404	Symbol	acur -> w		67013						
ANR	67405	Symbol	acur -> is_reversed		67013						
ANR	67406	Symbol	aa		67013						
ANR	67407	Symbol	aa -> is_reversed		67013						
ANR	67408	Symbol	ab		67013						
ANR	67409	Symbol	res		67013						
ANR	67410	Symbol	ab -> layer		67013						
ANR	67411	Symbol	* * g		67013						
ANR	67412	Symbol	old		67013						
ANR	67413	Symbol	it		67013						
ANR	67414	Symbol	ab -> pos_in_layer		67013						
ANR	67415	Symbol	r_list_find		67013						
ANR	67416	Symbol	* * aa -> layer		67013						
ANR	67417	Symbol	* anext		67013						
ANR	67418	Symbol	d . from		67013						
ANR	67419	Symbol	g -> layers [ aa -> layer ] . nodes		67013						
ANR	67420	Symbol	true		67013						
ANR	67421	Symbol	aa -> layer		67013						
ANR	67422	Symbol	* * * g		67013						
ANR	67423	Symbol	* g -> layers		67013						
ANR	67424	Symbol	next		67013						
ANR	67425	Symbol	cur		67013						
ANR	67426	Symbol	* ab		67013						
ANR	67427	Symbol	* aa		67013						
ANR	67428	Symbol	g -> dists		67013						
ANR	67429	Symbol	* g -> layers [ aa -> layer ] . nodes		67013						
ANR	67430	Symbol	* old		67013						
ANR	67431	Symbol	found		67013						
ANR	67432	Symbol	r_list_iter_get_data		67013						
ANR	67433	Symbol	anext -> w		67013						
ANR	67434	Symbol	anext		67013						
ANR	67435	Symbol	a		67013						
ANR	67436	Symbol	b		67013						
ANR	67437	Symbol	get_anode		67013						
ANR	67438	Symbol	* aa -> layer		67013						
ANR	67439	Symbol	d		67013						
ANR	67440	Symbol	g		67013						
ANR	67441	Symbol	false		67013						
ANR	67442	Symbol	i		67013						
ANR	67443	Symbol	* acur		67013						
ANR	67444	Symbol	& d		67013						
ANR	67445	Symbol	* g		67013						
ANR	67446	Symbol	* i		67013						
ANR	67447	Symbol	find_dist		67013						
ANR	67448	Symbol	* * * aa		67013						
ANR	67449	Symbol	g -> layers		67013						
ANR	67450	Symbol	* * g -> layers		67013						
ANR	67451	Function	set_dist_nodes	881:0:22900:23525							
ANR	67452	FunctionDef	"set_dist_nodes (const RAGraph * g , int l , int cur , int next)"		67451	0					
ANR	67453	CompoundStatement		881:71:22971:23525	67451	0					
ANR	67454	IdentifierDeclStatement	"struct dist_t * d , find_el ;"	882:1:22974:22999	67451	0	True				
ANR	67455	IdentifierDecl	* d		67451	0					
ANR	67456	IdentifierDeclType	struct dist_t *		67451	0					
ANR	67457	Identifier	d		67451	1					
ANR	67458	IdentifierDecl	find_el		67451	1					
ANR	67459	IdentifierDeclType	struct dist_t		67451	0					
ANR	67460	Identifier	find_el		67451	1					
ANR	67461	IdentifierDeclStatement	"const RGraphNode * vi , * vip ;"	883:1:23002:23028	67451	1	True				
ANR	67462	IdentifierDecl	* vi		67451	0					
ANR	67463	IdentifierDeclType	const RGraphNode *		67451	0					
ANR	67464	Identifier	vi		67451	1					
ANR	67465	IdentifierDecl	* vip		67451	1					
ANR	67466	IdentifierDeclType	const RGraphNode *		67451	0					
ANR	67467	Identifier	vip		67451	1					
ANR	67468	IdentifierDeclStatement	"const RANode * avi , * avip ;"	884:1:23031:23055	67451	2	True				
ANR	67469	IdentifierDecl	* avi		67451	0					
ANR	67470	IdentifierDeclType	const RANode *		67451	0					
ANR	67471	Identifier	avi		67451	1					
ANR	67472	IdentifierDecl	* avip		67451	1					
ANR	67473	IdentifierDeclType	const RANode *		67451	0					
ANR	67474	Identifier	avip		67451	1					
ANR	67475	IdentifierDeclStatement	RListIter * it ;	885:1:23058:23071	67451	3	True				
ANR	67476	IdentifierDecl	* it		67451	0					
ANR	67477	IdentifierDeclType	RListIter *		67451	0					
ANR	67478	Identifier	it		67451	1					
ANR	67479	IfStatement	if ( ! g -> dists )		67451	4					
ANR	67480	Condition	! g -> dists	887:5:23079:23087	67451	0	True				
ANR	67481	UnaryOperationExpression	! g -> dists		67451	0					
ANR	67482	UnaryOperator	!		67451	0					
ANR	67483	PtrMemberAccess	g -> dists		67451	1					
ANR	67484	Identifier	g		67451	0					
ANR	67485	Identifier	dists		67451	1					
ANR	67486	CompoundStatement		7:16:118:118	67451	1					
ANR	67487	ReturnStatement	return ;	888:2:23094:23100	67451	0	True				
ANR	67488	ExpressionStatement	vi = g -> layers [ l ] . nodes [ cur ]	890:1:23106:23134	67451	5	True				
ANR	67489	AssignmentExpression	vi = g -> layers [ l ] . nodes [ cur ]		67451	0		=			
ANR	67490	Identifier	vi		67451	0					
ANR	67491	ArrayIndexing	g -> layers [ l ] . nodes [ cur ]		67451	1					
ANR	67492	MemberAccess	g -> layers [ l ] . nodes		67451	0					
ANR	67493	ArrayIndexing	g -> layers [ l ]		67451	0					
ANR	67494	PtrMemberAccess	g -> layers		67451	0					
ANR	67495	Identifier	g		67451	0					
ANR	67496	Identifier	layers		67451	1					
ANR	67497	Identifier	l		67451	1					
ANR	67498	Identifier	nodes		67451	1					
ANR	67499	Identifier	cur		67451	1					
ANR	67500	ExpressionStatement	vip = g -> layers [ l ] . nodes [ next ]	891:1:23137:23167	67451	6	True				
ANR	67501	AssignmentExpression	vip = g -> layers [ l ] . nodes [ next ]		67451	0		=			
ANR	67502	Identifier	vip		67451	0					
ANR	67503	ArrayIndexing	g -> layers [ l ] . nodes [ next ]		67451	1					
ANR	67504	MemberAccess	g -> layers [ l ] . nodes		67451	0					
ANR	67505	ArrayIndexing	g -> layers [ l ]		67451	0					
ANR	67506	PtrMemberAccess	g -> layers		67451	0					
ANR	67507	Identifier	g		67451	0					
ANR	67508	Identifier	layers		67451	1					
ANR	67509	Identifier	l		67451	1					
ANR	67510	Identifier	nodes		67451	1					
ANR	67511	Identifier	next		67451	1					
ANR	67512	ExpressionStatement	avi = get_anode ( vi )	892:1:23170:23190	67451	7	True				
ANR	67513	AssignmentExpression	avi = get_anode ( vi )		67451	0		=			
ANR	67514	Identifier	avi		67451	0					
ANR	67515	CallExpression	get_anode ( vi )		67451	1					
ANR	67516	Callee	get_anode		67451	0					
ANR	67517	Identifier	get_anode		67451	0					
ANR	67518	ArgumentList	vi		67451	1					
ANR	67519	Argument	vi		67451	0					
ANR	67520	Identifier	vi		67451	0					
ANR	67521	ExpressionStatement	avip = get_anode ( vip )	893:1:23193:23215	67451	8	True				
ANR	67522	AssignmentExpression	avip = get_anode ( vip )		67451	0		=			
ANR	67523	Identifier	avip		67451	0					
ANR	67524	CallExpression	get_anode ( vip )		67451	1					
ANR	67525	Callee	get_anode		67451	0					
ANR	67526	Identifier	get_anode		67451	0					
ANR	67527	ArgumentList	vip		67451	1					
ANR	67528	Argument	vip		67451	0					
ANR	67529	Identifier	vip		67451	0					
ANR	67530	ExpressionStatement	find_el . from = vi	895:1:23219:23236	67451	9	True				
ANR	67531	AssignmentExpression	find_el . from = vi		67451	0		=			
ANR	67532	MemberAccess	find_el . from		67451	0					
ANR	67533	Identifier	find_el		67451	0					
ANR	67534	Identifier	from		67451	1					
ANR	67535	Identifier	vi		67451	1					
ANR	67536	ExpressionStatement	find_el . to = vip	896:1:23239:23255	67451	10	True				
ANR	67537	AssignmentExpression	find_el . to = vip		67451	0		=			
ANR	67538	MemberAccess	find_el . to		67451	0					
ANR	67539	Identifier	find_el		67451	0					
ANR	67540	Identifier	to		67451	1					
ANR	67541	Identifier	vip		67451	1					
ANR	67542	ExpressionStatement	"it = r_list_find ( g -> dists , & find_el , ( RListComparator ) find_dist )"	897:1:23258:23324	67451	11	True				
ANR	67543	AssignmentExpression	"it = r_list_find ( g -> dists , & find_el , ( RListComparator ) find_dist )"		67451	0		=			
ANR	67544	Identifier	it		67451	0					
ANR	67545	CallExpression	"r_list_find ( g -> dists , & find_el , ( RListComparator ) find_dist )"		67451	1					
ANR	67546	Callee	r_list_find		67451	0					
ANR	67547	Identifier	r_list_find		67451	0					
ANR	67548	ArgumentList	g -> dists		67451	1					
ANR	67549	Argument	g -> dists		67451	0					
ANR	67550	PtrMemberAccess	g -> dists		67451	0					
ANR	67551	Identifier	g		67451	0					
ANR	67552	Identifier	dists		67451	1					
ANR	67553	Argument	& find_el		67451	1					
ANR	67554	UnaryOperationExpression	& find_el		67451	0					
ANR	67555	UnaryOperator	&		67451	0					
ANR	67556	Identifier	find_el		67451	1					
ANR	67557	Argument	( RListComparator ) find_dist		67451	2					
ANR	67558	CastExpression	( RListComparator ) find_dist		67451	0					
ANR	67559	CastTarget	RListComparator		67451	0					
ANR	67560	Identifier	find_dist		67451	1					
ANR	67561	Statement	d	898:1:23327:23327	67451	12	True				
ANR	67562	Statement	=	898:3:23329:23329	67451	13	True				
ANR	67563	Statement	it	898:5:23331:23332	67451	14	True				
ANR	67564	Statement	?	898:7:23333:23333	67451	15	True				
ANR	67565	Statement	(	898:9:23335:23335	67451	16	True				
ANR	67566	Statement	struct	898:10:23336:23341	67451	17	True				
ANR	67567	Statement	dist_t	898:17:23343:23348	67451	18	True				
ANR	67568	Statement	*	898:24:23350:23350	67451	19	True				
ANR	67569	Statement	)	898:25:23351:23351	67451	20	True				
ANR	67570	Statement	r_list_iter_get_data	898:27:23353:23372	67451	21	True				
ANR	67571	Statement	(	898:48:23374:23374	67451	22	True				
ANR	67572	Statement	it	898:49:23375:23376	67451	23	True				
ANR	67573	Statement	)	898:51:23377:23377	67451	24	True				
ANR	67574	Statement	:	898:52:23378:23378	67451	25	True				
ANR	67575	Statement	R_NEW0	898:54:23380:23385	67451	26	True				
ANR	67576	Statement	(	898:61:23387:23387	67451	27	True				
ANR	67577	Statement	struct	898:62:23388:23393	67451	28	True				
ANR	67578	Statement	dist_t	898:69:23395:23400	67451	29	True				
ANR	67579	Statement	)	898:75:23401:23401	67451	30	True				
ANR	67580	ExpressionStatement		898:76:23402:23402	67451	31	True				
ANR	67581	ExpressionStatement	d -> from = vi	900:1:23406:23418	67451	32	True				
ANR	67582	AssignmentExpression	d -> from = vi		67451	0		=			
ANR	67583	PtrMemberAccess	d -> from		67451	0					
ANR	67584	Identifier	d		67451	0					
ANR	67585	Identifier	from		67451	1					
ANR	67586	Identifier	vi		67451	1					
ANR	67587	ExpressionStatement	d -> to = vip	901:1:23421:23432	67451	33	True				
ANR	67588	AssignmentExpression	d -> to = vip		67451	0		=			
ANR	67589	PtrMemberAccess	d -> to		67451	0					
ANR	67590	Identifier	d		67451	0					
ANR	67591	Identifier	to		67451	1					
ANR	67592	Identifier	vip		67451	1					
ANR	67593	ExpressionStatement	d -> dist = ( avip && avi ) ? avip -> x - avi -> x : 0	902:1:23435:23479	67451	34	True				
ANR	67594	AssignmentExpression	d -> dist = ( avip && avi ) ? avip -> x - avi -> x : 0		67451	0		=			
ANR	67595	PtrMemberAccess	d -> dist		67451	0					
ANR	67596	Identifier	d		67451	0					
ANR	67597	Identifier	dist		67451	1					
ANR	67598	ConditionalExpression	( avip && avi ) ? avip -> x - avi -> x : 0		67451	1					
ANR	67599	Condition	avip && avi		67451	0					
ANR	67600	AndExpression	avip && avi		67451	0		&&			
ANR	67601	Identifier	avip		67451	0					
ANR	67602	Identifier	avi		67451	1					
ANR	67603	AdditiveExpression	avip -> x - avi -> x		67451	1		-			
ANR	67604	PtrMemberAccess	avip -> x		67451	0					
ANR	67605	Identifier	avip		67451	0					
ANR	67606	Identifier	x		67451	1					
ANR	67607	PtrMemberAccess	avi -> x		67451	1					
ANR	67608	Identifier	avi		67451	0					
ANR	67609	Identifier	x		67451	1					
ANR	67610	PrimaryExpression	0		67451	2					
ANR	67611	IfStatement	if ( ! it )		67451	35					
ANR	67612	Condition	! it	903:5:23486:23488	67451	0	True				
ANR	67613	UnaryOperationExpression	! it		67451	0					
ANR	67614	UnaryOperator	!		67451	0					
ANR	67615	Identifier	it		67451	1					
ANR	67616	CompoundStatement		23:10:519:519	67451	1					
ANR	67617	ExpressionStatement	"r_list_push ( g -> dists , d )"	904:2:23495:23520	67451	0	True				
ANR	67618	CallExpression	"r_list_push ( g -> dists , d )"		67451	0					
ANR	67619	Callee	r_list_push		67451	0					
ANR	67620	Identifier	r_list_push		67451	0					
ANR	67621	ArgumentList	g -> dists		67451	1					
ANR	67622	Argument	g -> dists		67451	0					
ANR	67623	PtrMemberAccess	g -> dists		67451	0					
ANR	67624	Identifier	g		67451	0					
ANR	67625	Identifier	dists		67451	1					
ANR	67626	Argument	d		67451	1					
ANR	67627	Identifier	d		67451	0					
ANR	67628	ReturnType	static void		67451	1					
ANR	67629	Identifier	set_dist_nodes		67451	2					
ANR	67630	ParameterList	"const RAGraph * g , int l , int cur , int next"		67451	3					
ANR	67631	Parameter	const RAGraph * g	881:27:22927:22942	67451	0	True				
ANR	67632	ParameterType	const RAGraph *		67451	0					
ANR	67633	Identifier	g		67451	1					
ANR	67634	Parameter	int l	881:45:22945:22949	67451	1	True				
ANR	67635	ParameterType	int		67451	0					
ANR	67636	Identifier	l		67451	1					
ANR	67637	Parameter	int cur	881:52:22952:22958	67451	2	True				
ANR	67638	ParameterType	int		67451	0					
ANR	67639	Identifier	cur		67451	1					
ANR	67640	Parameter	int next	881:61:22961:22968	67451	3	True				
ANR	67641	ParameterType	int		67451	0					
ANR	67642	Identifier	next		67451	1					
ANR	67643	CFGEntryNode	ENTRY		67451		True				
ANR	67644	CFGExitNode	EXIT		67451		True				
ANR	67645	Symbol	next		67451						
ANR	67646	Symbol	& find_el		67451						
ANR	67647	Symbol	cur		67451						
ANR	67648	Symbol	* avi		67451						
ANR	67649	Symbol	find_el		67451						
ANR	67650	Symbol	g -> dists		67451						
ANR	67651	Symbol	* g -> layers [ l ] . nodes		67451						
ANR	67652	Symbol	* next		67451						
ANR	67653	Symbol	* avip		67451						
ANR	67654	Symbol	find_el . from		67451						
ANR	67655	Symbol	avip -> x		67451						
ANR	67656	Symbol	avi		67451						
ANR	67657	Symbol	* cur		67451						
ANR	67658	Symbol	vip		67451						
ANR	67659	Symbol	* * l		67451						
ANR	67660	Symbol	get_anode		67451						
ANR	67661	Symbol	avi -> x		67451						
ANR	67662	Symbol	d		67451						
ANR	67663	Symbol	* * g		67451						
ANR	67664	Symbol	d -> from		67451						
ANR	67665	Symbol	g		67451						
ANR	67666	Symbol	find_el . to		67451						
ANR	67667	Symbol	it		67451						
ANR	67668	Symbol	l		67451						
ANR	67669	Symbol	g -> layers [ l ] . nodes		67451						
ANR	67670	Symbol	* d		67451						
ANR	67671	Symbol	d -> dist		67451						
ANR	67672	Symbol	d -> to		67451						
ANR	67673	Symbol	avip		67451						
ANR	67674	Symbol	* g		67451						
ANR	67675	Symbol	r_list_find		67451						
ANR	67676	Symbol	vi		67451						
ANR	67677	Symbol	* l		67451						
ANR	67678	Symbol	find_dist		67451						
ANR	67679	Symbol	* g -> layers		67451						
ANR	67680	Symbol	* * * g		67451						
ANR	67681	Symbol	g -> layers		67451						
ANR	67682	Symbol	* * g -> layers		67451						
ANR	67683	Function	is_valid_pos	908:0:23528:23636							
ANR	67684	FunctionDef	"is_valid_pos (const RAGraph * g , int l , int pos)"		67683	0					
ANR	67685	CompoundStatement		908:58:23586:23636	67683	0					
ANR	67686	ReturnStatement	return pos >= 0 && pos < g -> layers [ l ] . n_nodes ;	909:1:23589:23634	67683	0	True				
ANR	67687	AndExpression	pos >= 0 && pos < g -> layers [ l ] . n_nodes		67683	0		&&			
ANR	67688	RelationalExpression	pos >= 0		67683	0		>=			
ANR	67689	Identifier	pos		67683	0					
ANR	67690	PrimaryExpression	0		67683	1					
ANR	67691	RelationalExpression	pos < g -> layers [ l ] . n_nodes		67683	1		<			
ANR	67692	Identifier	pos		67683	0					
ANR	67693	MemberAccess	g -> layers [ l ] . n_nodes		67683	1					
ANR	67694	ArrayIndexing	g -> layers [ l ]		67683	0					
ANR	67695	PtrMemberAccess	g -> layers		67683	0					
ANR	67696	Identifier	g		67683	0					
ANR	67697	Identifier	layers		67683	1					
ANR	67698	Identifier	l		67683	1					
ANR	67699	Identifier	n_nodes		67683	1					
ANR	67700	ReturnType	static int		67683	1					
ANR	67701	Identifier	is_valid_pos		67683	2					
ANR	67702	ParameterList	"const RAGraph * g , int l , int pos"		67683	3					
ANR	67703	Parameter	const RAGraph * g	908:24:23552:23567	67683	0	True				
ANR	67704	ParameterType	const RAGraph *		67683	0					
ANR	67705	Identifier	g		67683	1					
ANR	67706	Parameter	int l	908:42:23570:23574	67683	1	True				
ANR	67707	ParameterType	int		67683	0					
ANR	67708	Identifier	l		67683	1					
ANR	67709	Parameter	int pos	908:49:23577:23583	67683	2	True				
ANR	67710	ParameterType	int		67683	0					
ANR	67711	Identifier	pos		67683	1					
ANR	67712	CFGEntryNode	ENTRY		67683		True				
ANR	67713	CFGExitNode	EXIT		67683		True				
ANR	67714	Symbol	* g		67683						
ANR	67715	Symbol	* * g		67683						
ANR	67716	Symbol	pos		67683						
ANR	67717	Symbol	* l		67683						
ANR	67718	Symbol	g		67683						
ANR	67719	Symbol	* g -> layers		67683						
ANR	67720	Symbol	l		67683						
ANR	67721	Symbol	g -> layers		67683						
ANR	67722	Symbol	g -> layers [ l ] . n_nodes		67683						
ANR	67723	Function	compute_vertical_nodes	916:0:23848:24605							
ANR	67724	FunctionDef	compute_vertical_nodes (const RAGraph * g)		67723	0					
ANR	67725	CompoundStatement		916:53:23901:24605	67723	0					
ANR	67726	IdentifierDeclStatement	Sdb * res = sdb_new0 ( ) ;	917:1:23904:23926	67723	0	True				
ANR	67727	IdentifierDecl	* res = sdb_new0 ( )		67723	0					
ANR	67728	IdentifierDeclType	Sdb *		67723	0					
ANR	67729	Identifier	res		67723	1					
ANR	67730	AssignmentExpression	* res = sdb_new0 ( )		67723	2		=			
ANR	67731	Identifier	res		67723	0					
ANR	67732	CallExpression	sdb_new0 ( )		67723	1					
ANR	67733	Callee	sdb_new0		67723	0					
ANR	67734	Identifier	sdb_new0		67723	0					
ANR	67735	ArgumentList			67723	1					
ANR	67736	IdentifierDeclStatement	"int i , j ;"	918:1:23929:23937	67723	1	True				
ANR	67737	IdentifierDecl	i		67723	0					
ANR	67738	IdentifierDeclType	int		67723	0					
ANR	67739	Identifier	i		67723	1					
ANR	67740	IdentifierDecl	j		67723	1					
ANR	67741	IdentifierDeclType	int		67723	0					
ANR	67742	Identifier	j		67723	1					
ANR	67743	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		67723	2					
ANR	67744	ForInit	i = 0 ;	920:6:23946:23951	67723	0	True				
ANR	67745	AssignmentExpression	i = 0		67723	0		=			
ANR	67746	Identifier	i		67723	0					
ANR	67747	PrimaryExpression	0		67723	1					
ANR	67748	Condition	i < g -> n_layers	920:13:23953:23967	67723	1	True				
ANR	67749	RelationalExpression	i < g -> n_layers		67723	0		<			
ANR	67750	Identifier	i		67723	0					
ANR	67751	PtrMemberAccess	g -> n_layers		67723	1					
ANR	67752	Identifier	g		67723	0					
ANR	67753	Identifier	n_layers		67723	1					
ANR	67754	UnaryExpression	++ i	920:30:23970:23972	67723	2	True				
ANR	67755	IncDec	++		67723	0					
ANR	67756	Identifier	i		67723	1					
ANR	67757	CompoundStatement		5:35:73:73	67723	3					
ANR	67758	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; ++ j )		67723	0					
ANR	67759	ForInit	j = 0 ;	921:7:23984:23989	67723	0	True				
ANR	67760	AssignmentExpression	j = 0		67723	0		=			
ANR	67761	Identifier	j		67723	0					
ANR	67762	PrimaryExpression	0		67723	1					
ANR	67763	Condition	j < g -> layers [ i ] . n_nodes	921:14:23991:24014	67723	1	True				
ANR	67764	RelationalExpression	j < g -> layers [ i ] . n_nodes		67723	0		<			
ANR	67765	Identifier	j		67723	0					
ANR	67766	MemberAccess	g -> layers [ i ] . n_nodes		67723	1					
ANR	67767	ArrayIndexing	g -> layers [ i ]		67723	0					
ANR	67768	PtrMemberAccess	g -> layers		67723	0					
ANR	67769	Identifier	g		67723	0					
ANR	67770	Identifier	layers		67723	1					
ANR	67771	Identifier	i		67723	1					
ANR	67772	Identifier	n_nodes		67723	1					
ANR	67773	UnaryExpression	++ j	921:40:24017:24019	67723	2	True				
ANR	67774	IncDec	++		67723	0					
ANR	67775	Identifier	j		67723	1					
ANR	67776	CompoundStatement		9:3:215:248	67723	3					
ANR	67777	IdentifierDeclStatement	RGraphNode * gn = g -> layers [ i ] . nodes [ j ] ;	922:3:24027:24065	67723	0	True				
ANR	67778	IdentifierDecl	* gn = g -> layers [ i ] . nodes [ j ]		67723	0					
ANR	67779	IdentifierDeclType	RGraphNode *		67723	0					
ANR	67780	Identifier	gn		67723	1					
ANR	67781	AssignmentExpression	* gn = g -> layers [ i ] . nodes [ j ]		67723	2		=			
ANR	67782	Identifier	gn		67723	0					
ANR	67783	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		67723	1					
ANR	67784	MemberAccess	g -> layers [ i ] . nodes		67723	0					
ANR	67785	ArrayIndexing	g -> layers [ i ]		67723	0					
ANR	67786	PtrMemberAccess	g -> layers		67723	0					
ANR	67787	Identifier	g		67723	0					
ANR	67788	Identifier	layers		67723	1					
ANR	67789	Identifier	i		67723	1					
ANR	67790	Identifier	nodes		67723	1					
ANR	67791	Identifier	j		67723	1					
ANR	67792	IdentifierDeclStatement	"const RList * Ln = hash_get_rlist ( res , gn ) ;"	923:3:24070:24112	67723	1	True				
ANR	67793	IdentifierDecl	"* Ln = hash_get_rlist ( res , gn )"		67723	0					
ANR	67794	IdentifierDeclType	const RList *		67723	0					
ANR	67795	Identifier	Ln		67723	1					
ANR	67796	AssignmentExpression	"* Ln = hash_get_rlist ( res , gn )"		67723	2		=			
ANR	67797	Identifier	Ln		67723	0					
ANR	67798	CallExpression	"hash_get_rlist ( res , gn )"		67723	1					
ANR	67799	Callee	hash_get_rlist		67723	0					
ANR	67800	Identifier	hash_get_rlist		67723	0					
ANR	67801	ArgumentList	res		67723	1					
ANR	67802	Argument	res		67723	0					
ANR	67803	Identifier	res		67723	0					
ANR	67804	Argument	gn		67723	1					
ANR	67805	Identifier	gn		67723	0					
ANR	67806	IdentifierDeclStatement	const RANode * an = get_anode ( gn ) ;	924:3:24117:24150	67723	2	True				
ANR	67807	IdentifierDecl	* an = get_anode ( gn )		67723	0					
ANR	67808	IdentifierDeclType	const RANode *		67723	0					
ANR	67809	Identifier	an		67723	1					
ANR	67810	AssignmentExpression	* an = get_anode ( gn )		67723	2		=			
ANR	67811	Identifier	an		67723	0					
ANR	67812	CallExpression	get_anode ( gn )		67723	1					
ANR	67813	Callee	get_anode		67723	0					
ANR	67814	Identifier	get_anode		67723	0					
ANR	67815	ArgumentList	gn		67723	1					
ANR	67816	Argument	gn		67723	0					
ANR	67817	Identifier	gn		67723	0					
ANR	67818	IfStatement	if ( ! Ln )		67723	3					
ANR	67819	Condition	! Ln	926:7:24160:24162	67723	0	True				
ANR	67820	UnaryOperationExpression	! Ln		67723	0					
ANR	67821	UnaryOperator	!		67723	0					
ANR	67822	Identifier	Ln		67723	1					
ANR	67823	CompoundStatement		12:4:269:296	67723	1					
ANR	67824	IdentifierDeclStatement	RList * vert = r_list_new ( ) ;	927:4:24171:24198	67723	0	True				
ANR	67825	IdentifierDecl	* vert = r_list_new ( )		67723	0					
ANR	67826	IdentifierDeclType	RList *		67723	0					
ANR	67827	Identifier	vert		67723	1					
ANR	67828	AssignmentExpression	* vert = r_list_new ( )		67723	2		=			
ANR	67829	Identifier	vert		67723	0					
ANR	67830	CallExpression	r_list_new ( )		67723	1					
ANR	67831	Callee	r_list_new		67723	0					
ANR	67832	Identifier	r_list_new		67723	0					
ANR	67833	ArgumentList			67723	1					
ANR	67834	ExpressionStatement	"hash_set ( res , gn , vert )"	928:4:24204:24228	67723	1	True				
ANR	67835	CallExpression	"hash_set ( res , gn , vert )"		67723	0					
ANR	67836	Callee	hash_set		67723	0					
ANR	67837	Identifier	hash_set		67723	0					
ANR	67838	ArgumentList	res		67723	1					
ANR	67839	Argument	res		67723	0					
ANR	67840	Identifier	res		67723	0					
ANR	67841	Argument	gn		67723	1					
ANR	67842	Identifier	gn		67723	0					
ANR	67843	Argument	vert		67723	2					
ANR	67844	Identifier	vert		67723	0					
ANR	67845	IfStatement	if ( an -> is_dummy )		67723	2					
ANR	67846	Condition	an -> is_dummy	929:8:24238:24249	67723	0	True				
ANR	67847	PtrMemberAccess	an -> is_dummy		67723	0					
ANR	67848	Identifier	an		67723	0					
ANR	67849	Identifier	is_dummy		67723	1					
ANR	67850	CompoundStatement		16:5:385:423	67723	1					
ANR	67851	IdentifierDeclStatement	RGraphNode * next = gn ;	930:5:24259:24280	67723	0	True				
ANR	67852	IdentifierDecl	* next = gn		67723	0					
ANR	67853	IdentifierDeclType	RGraphNode *		67723	0					
ANR	67854	Identifier	next		67723	1					
ANR	67855	AssignmentExpression	* next = gn		67723	2		=			
ANR	67856	Identifier	gn		67723	0					
ANR	67857	Identifier	gn		67723	1					
ANR	67858	IdentifierDeclStatement	const RANode * anext = get_anode ( next ) ;	931:5:24287:24325	67723	1	True				
ANR	67859	IdentifierDecl	* anext = get_anode ( next )		67723	0					
ANR	67860	IdentifierDeclType	const RANode *		67723	0					
ANR	67861	Identifier	anext		67723	1					
ANR	67862	AssignmentExpression	* anext = get_anode ( next )		67723	2		=			
ANR	67863	Identifier	anext		67723	0					
ANR	67864	CallExpression	get_anode ( next )		67723	1					
ANR	67865	Callee	get_anode		67723	0					
ANR	67866	Identifier	get_anode		67723	0					
ANR	67867	ArgumentList	next		67723	1					
ANR	67868	Argument	next		67723	0					
ANR	67869	Identifier	next		67723	0					
ANR	67870	WhileStatement	while ( anext -> is_dummy )		67723	2					
ANR	67871	Condition	anext -> is_dummy	933:12:24340:24354	67723	0	True				
ANR	67872	PtrMemberAccess	anext -> is_dummy		67723	0					
ANR	67873	Identifier	anext		67723	0					
ANR	67874	Identifier	is_dummy		67723	1					
ANR	67875	CompoundStatement		18:29:455:455	67723	1					
ANR	67876	ExpressionStatement	"r_list_append ( vert , next )"	934:6:24365:24391	67723	0	True				
ANR	67877	CallExpression	"r_list_append ( vert , next )"		67723	0					
ANR	67878	Callee	r_list_append		67723	0					
ANR	67879	Identifier	r_list_append		67723	0					
ANR	67880	ArgumentList	vert		67723	1					
ANR	67881	Argument	vert		67723	0					
ANR	67882	Identifier	vert		67723	0					
ANR	67883	Argument	next		67723	1					
ANR	67884	Identifier	next		67723	0					
ANR	67885	ExpressionStatement	"next = r_graph_nth_neighbour ( g -> graph , next , 0 )"	935:6:24399:24447	67723	1	True				
ANR	67886	AssignmentExpression	"next = r_graph_nth_neighbour ( g -> graph , next , 0 )"		67723	0		=			
ANR	67887	Identifier	next		67723	0					
ANR	67888	CallExpression	"r_graph_nth_neighbour ( g -> graph , next , 0 )"		67723	1					
ANR	67889	Callee	r_graph_nth_neighbour		67723	0					
ANR	67890	Identifier	r_graph_nth_neighbour		67723	0					
ANR	67891	ArgumentList	g -> graph		67723	1					
ANR	67892	Argument	g -> graph		67723	0					
ANR	67893	PtrMemberAccess	g -> graph		67723	0					
ANR	67894	Identifier	g		67723	0					
ANR	67895	Identifier	graph		67723	1					
ANR	67896	Argument	next		67723	1					
ANR	67897	Identifier	next		67723	0					
ANR	67898	Argument	0		67723	2					
ANR	67899	PrimaryExpression	0		67723	0					
ANR	67900	IfStatement	if ( ! next )		67723	2					
ANR	67901	Condition	! next	936:10:24459:24463	67723	0	True				
ANR	67902	UnaryOperationExpression	! next		67723	0					
ANR	67903	UnaryOperator	!		67723	0					
ANR	67904	Identifier	next		67723	1					
ANR	67905	CompoundStatement		21:17:564:564	67723	1					
ANR	67906	BreakStatement	break ;	937:7:24475:24480	67723	0	True				
ANR	67907	ExpressionStatement	anext = get_anode ( next )	939:6:24496:24520	67723	3	True				
ANR	67908	AssignmentExpression	anext = get_anode ( next )		67723	0		=			
ANR	67909	Identifier	anext		67723	0					
ANR	67910	CallExpression	get_anode ( next )		67723	1					
ANR	67911	Callee	get_anode		67723	0					
ANR	67912	Identifier	get_anode		67723	0					
ANR	67913	ArgumentList	next		67723	1					
ANR	67914	Argument	next		67723	0					
ANR	67915	Identifier	next		67723	0					
ANR	67916	ElseStatement	else		67723	0					
ANR	67917	CompoundStatement		26:11:638:638	67723	0					
ANR	67918	ExpressionStatement	"r_list_append ( vert , gn )"	942:5:24547:24571	67723	0	True				
ANR	67919	CallExpression	"r_list_append ( vert , gn )"		67723	0					
ANR	67920	Callee	r_list_append		67723	0					
ANR	67921	Identifier	r_list_append		67723	0					
ANR	67922	ArgumentList	vert		67723	1					
ANR	67923	Argument	vert		67723	0					
ANR	67924	Identifier	vert		67723	0					
ANR	67925	Argument	gn		67723	1					
ANR	67926	Identifier	gn		67723	0					
ANR	67927	ReturnStatement	return res ;	948:1:24593:24603	67723	3	True				
ANR	67928	Identifier	res		67723	0					
ANR	67929	ReturnType	static Sdb *		67723	1					
ANR	67930	Identifier	compute_vertical_nodes		67723	2					
ANR	67931	ParameterList	const RAGraph * g		67723	3					
ANR	67932	Parameter	const RAGraph * g	916:35:23883:23898	67723	0	True				
ANR	67933	ParameterType	const RAGraph *		67723	0					
ANR	67934	Identifier	g		67723	1					
ANR	67935	CFGEntryNode	ENTRY		67723		True				
ANR	67936	CFGExitNode	EXIT		67723		True				
ANR	67937	Symbol	next		67723						
ANR	67938	Symbol	vert		67723						
ANR	67939	Symbol	hash_get_rlist		67723						
ANR	67940	Symbol	g -> n_layers		67723						
ANR	67941	Symbol	g -> layers [ i ] . nodes		67723						
ANR	67942	Symbol	g -> graph		67723						
ANR	67943	Symbol	anext -> is_dummy		67723						
ANR	67944	Symbol	* g -> layers [ i ] . nodes		67723						
ANR	67945	Symbol	an -> is_dummy		67723						
ANR	67946	Symbol	anext		67723						
ANR	67947	Symbol	r_graph_nth_neighbour		67723						
ANR	67948	Symbol	res		67723						
ANR	67949	Symbol	sdb_new0		67723						
ANR	67950	Symbol	* * i		67723						
ANR	67951	Symbol	Ln		67723						
ANR	67952	Symbol	get_anode		67723						
ANR	67953	Symbol	* * g		67723						
ANR	67954	Symbol	g		67723						
ANR	67955	Symbol	gn		67723						
ANR	67956	Symbol	i		67723						
ANR	67957	Symbol	j		67723						
ANR	67958	Symbol	an		67723						
ANR	67959	Symbol	* an		67723						
ANR	67960	Symbol	* g		67723						
ANR	67961	Symbol	* i		67723						
ANR	67962	Symbol	* j		67723						
ANR	67963	Symbol	* anext		67723						
ANR	67964	Symbol	* g -> layers		67723						
ANR	67965	Symbol	* * * g		67723						
ANR	67966	Symbol	g -> layers [ i ] . n_nodes		67723						
ANR	67967	Symbol	g -> layers		67723						
ANR	67968	Symbol	* * g -> layers		67723						
ANR	67969	Symbol	r_list_new		67723						
ANR	67970	Function	compute_classes	956:0:24830:25754							
ANR	67971	FunctionDef	"compute_classes (const RAGraph * g , Sdb * v_nodes , int is_left , int * n_classes)"		67970	0					
ANR	67972	CompoundStatement		956:92:24922:25754	67970	0					
ANR	67973	IdentifierDeclStatement	"int i , j , c ;"	957:1:24925:24936	67970	0	True				
ANR	67974	IdentifierDecl	i		67970	0					
ANR	67975	IdentifierDeclType	int		67970	0					
ANR	67976	Identifier	i		67970	1					
ANR	67977	IdentifierDecl	j		67970	1					
ANR	67978	IdentifierDeclType	int		67970	0					
ANR	67979	Identifier	j		67970	1					
ANR	67980	IdentifierDecl	c		67970	2					
ANR	67981	IdentifierDeclType	int		67970	0					
ANR	67982	Identifier	c		67970	1					
ANR	67983	Statement	RList	958:1:24939:24943	67970	1	True				
ANR	67984	Statement	*	958:7:24945:24945	67970	2	True				
ANR	67985	Statement	*	958:8:24946:24946	67970	3	True				
ANR	67986	Statement	res	958:9:24947:24949	67970	4	True				
ANR	67987	Statement	=	958:13:24951:24951	67970	5	True				
ANR	67988	Statement	R_NEWS0	958:15:24953:24959	67970	6	True				
ANR	67989	Statement	(	958:23:24961:24961	67970	7	True				
ANR	67990	Statement	RList	958:24:24962:24966	67970	8	True				
ANR	67991	Statement	*	958:30:24968:24968	67970	9	True				
ANR	67992	Statement	","	958:31:24969:24969	67970	10	True				
ANR	67993	Statement	g	958:33:24971:24971	67970	11	True				
ANR	67994	Statement	->	958:34:24972:24973	67970	12	True				
ANR	67995	Statement	n_layers	958:36:24974:24981	67970	13	True				
ANR	67996	Statement	)	958:44:24982:24982	67970	14	True				
ANR	67997	ExpressionStatement		958:45:24983:24983	67970	15	True				
ANR	67998	IdentifierDeclStatement	RGraphNode * gn ;	959:1:24986:25000	67970	16	True				
ANR	67999	IdentifierDecl	* gn		67970	0					
ANR	68000	IdentifierDeclType	RGraphNode *		67970	0					
ANR	68001	Identifier	gn		67970	1					
ANR	68002	IdentifierDeclStatement	const RListIter * it ;	960:1:25003:25022	67970	17	True				
ANR	68003	IdentifierDecl	* it		67970	0					
ANR	68004	IdentifierDeclType	const RListIter *		67970	0					
ANR	68005	Identifier	it		67970	1					
ANR	68006	IdentifierDeclStatement	RANode * n ;	961:1:25025:25034	67970	18	True				
ANR	68007	IdentifierDecl	* n		67970	0					
ANR	68008	IdentifierDeclType	RANode *		67970	0					
ANR	68009	Identifier	n		67970	1					
ANR	68010	Statement	graph_foreach_anode	963:1:25038:25056	67970	19	True				
ANR	68011	Statement	(	963:21:25058:25058	67970	20	True				
ANR	68012	Statement	r_graph_get_nodes	963:22:25059:25075	67970	21	True				
ANR	68013	Statement	(	963:40:25077:25077	67970	22	True				
ANR	68014	Statement	g	963:41:25078:25078	67970	23	True				
ANR	68015	Statement	->	963:42:25079:25080	67970	24	True				
ANR	68016	Statement	graph	963:44:25081:25085	67970	25	True				
ANR	68017	Statement	)	963:49:25086:25086	67970	26	True				
ANR	68018	Statement	","	963:50:25087:25087	67970	27	True				
ANR	68019	Statement	it	963:52:25089:25090	67970	28	True				
ANR	68020	Statement	","	963:54:25091:25091	67970	29	True				
ANR	68021	Statement	gn	963:56:25093:25094	67970	30	True				
ANR	68022	Statement	","	963:58:25095:25095	67970	31	True				
ANR	68023	Statement	n	963:60:25097:25097	67970	32	True				
ANR	68024	Statement	)	963:61:25098:25098	67970	33	True				
ANR	68025	CompoundStatement		8:63:177:177	67970	34					
ANR	68026	ExpressionStatement	n -> klass = - 1	964:2:25104:25117	67970	0	True				
ANR	68027	AssignmentExpression	n -> klass = - 1		67970	0		=			
ANR	68028	PtrMemberAccess	n -> klass		67970	0					
ANR	68029	Identifier	n		67970	0					
ANR	68030	Identifier	klass		67970	1					
ANR	68031	UnaryOperationExpression	- 1		67970	1					
ANR	68032	UnaryOperator	-		67970	0					
ANR	68033	PrimaryExpression	1		67970	1					
ANR	68034	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		67970	35					
ANR	68035	ForInit	i = 0 ;	967:6:25129:25134	67970	0	True				
ANR	68036	AssignmentExpression	i = 0		67970	0		=			
ANR	68037	Identifier	i		67970	0					
ANR	68038	PrimaryExpression	0		67970	1					
ANR	68039	Condition	i < g -> n_layers	967:13:25136:25150	67970	1	True				
ANR	68040	RelationalExpression	i < g -> n_layers		67970	0		<			
ANR	68041	Identifier	i		67970	0					
ANR	68042	PtrMemberAccess	g -> n_layers		67970	1					
ANR	68043	Identifier	g		67970	0					
ANR	68044	Identifier	n_layers		67970	1					
ANR	68045	UnaryExpression	++ i	967:30:25153:25155	67970	2	True				
ANR	68046	IncDec	++		67970	0					
ANR	68047	Identifier	i		67970	1					
ANR	68048	CompoundStatement		12:35:235:235	67970	3					
ANR	68049	ExpressionStatement	c = i	968:2:25162:25167	67970	0	True				
ANR	68050	AssignmentExpression	c = i		67970	0		=			
ANR	68051	Identifier	c		67970	0					
ANR	68052	Identifier	i		67970	1					
ANR	68053	ForStatement	for ( j = is_left ? 0 : g -> layers [ i ] . n_nodes - 1 ; ( is_left && j < g -> layers [ i ] . n_nodes ) || ( ! is_left && j >= 0 ) ; j = is_left ? j + 1 : j - 1 )		67970	1					
ANR	68054	ForInit	j = is_left ? 0 : g -> layers [ i ] . n_nodes - 1 ;	970:7:25177:25217	67970	0	True				
ANR	68055	AssignmentExpression	j = is_left ? 0 : g -> layers [ i ] . n_nodes - 1		67970	0		=			
ANR	68056	Identifier	j		67970	0					
ANR	68057	ConditionalExpression	is_left ? 0 : g -> layers [ i ] . n_nodes - 1		67970	1					
ANR	68058	Condition	is_left		67970	0					
ANR	68059	Identifier	is_left		67970	0					
ANR	68060	PrimaryExpression	0		67970	1					
ANR	68061	AdditiveExpression	g -> layers [ i ] . n_nodes - 1		67970	2		-			
ANR	68062	MemberAccess	g -> layers [ i ] . n_nodes		67970	0					
ANR	68063	ArrayIndexing	g -> layers [ i ]		67970	0					
ANR	68064	PtrMemberAccess	g -> layers		67970	0					
ANR	68065	Identifier	g		67970	0					
ANR	68066	Identifier	layers		67970	1					
ANR	68067	Identifier	i		67970	1					
ANR	68068	Identifier	n_nodes		67970	1					
ANR	68069	PrimaryExpression	1		67970	1					
ANR	68070	Condition	( is_left && j < g -> layers [ i ] . n_nodes ) || ( ! is_left && j >= 0 )	971:7:25226:25286	67970	1	True				
ANR	68071	OrExpression	( is_left && j < g -> layers [ i ] . n_nodes ) || ( ! is_left && j >= 0 )		67970	0		||			
ANR	68072	AndExpression	is_left && j < g -> layers [ i ] . n_nodes		67970	0		&&			
ANR	68073	Identifier	is_left		67970	0					
ANR	68074	RelationalExpression	j < g -> layers [ i ] . n_nodes		67970	1		<			
ANR	68075	Identifier	j		67970	0					
ANR	68076	MemberAccess	g -> layers [ i ] . n_nodes		67970	1					
ANR	68077	ArrayIndexing	g -> layers [ i ]		67970	0					
ANR	68078	PtrMemberAccess	g -> layers		67970	0					
ANR	68079	Identifier	g		67970	0					
ANR	68080	Identifier	layers		67970	1					
ANR	68081	Identifier	i		67970	1					
ANR	68082	Identifier	n_nodes		67970	1					
ANR	68083	AndExpression	! is_left && j >= 0		67970	1		&&			
ANR	68084	UnaryOperationExpression	! is_left		67970	0					
ANR	68085	UnaryOperator	!		67970	0					
ANR	68086	Identifier	is_left		67970	1					
ANR	68087	RelationalExpression	j >= 0		67970	1		>=			
ANR	68088	Identifier	j		67970	0					
ANR	68089	PrimaryExpression	0		67970	1					
ANR	68090	AssignmentExpression	j = is_left ? j + 1 : j - 1	972:7:25296:25320	67970	2	True	=			
ANR	68091	Identifier	j		67970	0					
ANR	68092	ConditionalExpression	is_left ? j + 1 : j - 1		67970	1					
ANR	68093	Condition	is_left		67970	0					
ANR	68094	Identifier	is_left		67970	0					
ANR	68095	AdditiveExpression	j + 1		67970	1		+			
ANR	68096	Identifier	j		67970	0					
ANR	68097	PrimaryExpression	1		67970	1					
ANR	68098	AdditiveExpression	j - 1		67970	2		-			
ANR	68099	Identifier	j		67970	0					
ANR	68100	PrimaryExpression	1		67970	1					
ANR	68101	CompoundStatement		19:3:454:487	67970	3					
ANR	68102	IdentifierDeclStatement	const RGraphNode * gj = g -> layers [ i ] . nodes [ j ] ;	973:3:25328:25372	67970	0	True				
ANR	68103	IdentifierDecl	* gj = g -> layers [ i ] . nodes [ j ]		67970	0					
ANR	68104	IdentifierDeclType	const RGraphNode *		67970	0					
ANR	68105	Identifier	gj		67970	1					
ANR	68106	AssignmentExpression	* gj = g -> layers [ i ] . nodes [ j ]		67970	2		=			
ANR	68107	Identifier	gj		67970	0					
ANR	68108	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		67970	1					
ANR	68109	MemberAccess	g -> layers [ i ] . nodes		67970	0					
ANR	68110	ArrayIndexing	g -> layers [ i ]		67970	0					
ANR	68111	PtrMemberAccess	g -> layers		67970	0					
ANR	68112	Identifier	g		67970	0					
ANR	68113	Identifier	layers		67970	1					
ANR	68114	Identifier	i		67970	1					
ANR	68115	Identifier	nodes		67970	1					
ANR	68116	Identifier	j		67970	1					
ANR	68117	IdentifierDeclStatement	const RANode * aj = get_anode ( gj ) ;	974:3:25377:25410	67970	1	True				
ANR	68118	IdentifierDecl	* aj = get_anode ( gj )		67970	0					
ANR	68119	IdentifierDeclType	const RANode *		67970	0					
ANR	68120	Identifier	aj		67970	1					
ANR	68121	AssignmentExpression	* aj = get_anode ( gj )		67970	2		=			
ANR	68122	Identifier	aj		67970	0					
ANR	68123	CallExpression	get_anode ( gj )		67970	1					
ANR	68124	Callee	get_anode		67970	0					
ANR	68125	Identifier	get_anode		67970	0					
ANR	68126	ArgumentList	gj		67970	1					
ANR	68127	Argument	gj		67970	0					
ANR	68128	Identifier	gj		67970	0					
ANR	68129	IfStatement	if ( aj -> klass == - 1 )		67970	2					
ANR	68130	Condition	aj -> klass == - 1	976:7:25420:25434	67970	0	True				
ANR	68131	EqualityExpression	aj -> klass == - 1		67970	0		==			
ANR	68132	PtrMemberAccess	aj -> klass		67970	0					
ANR	68133	Identifier	aj		67970	0					
ANR	68134	Identifier	klass		67970	1					
ANR	68135	UnaryOperationExpression	- 1		67970	1					
ANR	68136	UnaryOperator	-		67970	0					
ANR	68137	PrimaryExpression	1		67970	1					
ANR	68138	CompoundStatement		22:4:520:567	67970	1					
ANR	68139	IdentifierDeclStatement	"const RList * laj = hash_get_rlist ( v_nodes , gj ) ;"	977:4:25443:25490	67970	0	True				
ANR	68140	IdentifierDecl	"* laj = hash_get_rlist ( v_nodes , gj )"		67970	0					
ANR	68141	IdentifierDeclType	const RList *		67970	0					
ANR	68142	Identifier	laj		67970	1					
ANR	68143	AssignmentExpression	"* laj = hash_get_rlist ( v_nodes , gj )"		67970	2		=			
ANR	68144	Identifier	laj		67970	0					
ANR	68145	CallExpression	"hash_get_rlist ( v_nodes , gj )"		67970	1					
ANR	68146	Callee	hash_get_rlist		67970	0					
ANR	68147	Identifier	hash_get_rlist		67970	0					
ANR	68148	ArgumentList	v_nodes		67970	1					
ANR	68149	Argument	v_nodes		67970	0					
ANR	68150	Identifier	v_nodes		67970	0					
ANR	68151	Argument	gj		67970	1					
ANR	68152	Identifier	gj		67970	0					
ANR	68153	IfStatement	if ( ! res [ c ] )		67970	1					
ANR	68154	Condition	! res [ c ]	979:8:25501:25507	67970	0	True				
ANR	68155	UnaryOperationExpression	! res [ c ]		67970	0					
ANR	68156	UnaryOperator	!		67970	0					
ANR	68157	ArrayIndexing	res [ c ]		67970	1					
ANR	68158	Identifier	res		67970	0					
ANR	68159	Identifier	c		67970	1					
ANR	68160	CompoundStatement		24:17:587:587	67970	1					
ANR	68161	ExpressionStatement	res [ c ] = r_list_new ( )	980:5:25517:25539	67970	0	True				
ANR	68162	AssignmentExpression	res [ c ] = r_list_new ( )		67970	0		=			
ANR	68163	ArrayIndexing	res [ c ]		67970	0					
ANR	68164	Identifier	res		67970	0					
ANR	68165	Identifier	c		67970	1					
ANR	68166	CallExpression	r_list_new ( )		67970	1					
ANR	68167	Callee	r_list_new		67970	0					
ANR	68168	Identifier	r_list_new		67970	0					
ANR	68169	ArgumentList			67970	1					
ANR	68170	Statement	graph_foreach_anode	982:4:25551:25569	67970	2	True				
ANR	68171	Statement	(	982:24:25571:25571	67970	3	True				
ANR	68172	Statement	laj	982:25:25572:25574	67970	4	True				
ANR	68173	Statement	","	982:28:25575:25575	67970	5	True				
ANR	68174	Statement	it	982:30:25577:25578	67970	6	True				
ANR	68175	Statement	","	982:32:25579:25579	67970	7	True				
ANR	68176	Statement	gn	982:34:25581:25582	67970	8	True				
ANR	68177	Statement	","	982:36:25583:25583	67970	9	True				
ANR	68178	Statement	n	982:38:25585:25585	67970	10	True				
ANR	68179	Statement	)	982:39:25586:25586	67970	11	True				
ANR	68180	CompoundStatement		27:41:665:665	67970	12					
ANR	68181	ExpressionStatement	"r_list_append ( res [ c ] , gn )"	983:5:25595:25621	67970	0	True				
ANR	68182	CallExpression	"r_list_append ( res [ c ] , gn )"		67970	0					
ANR	68183	Callee	r_list_append		67970	0					
ANR	68184	Identifier	r_list_append		67970	0					
ANR	68185	ArgumentList	res [ c ]		67970	1					
ANR	68186	Argument	res [ c ]		67970	0					
ANR	68187	ArrayIndexing	res [ c ]		67970	0					
ANR	68188	Identifier	res		67970	0					
ANR	68189	Identifier	c		67970	1					
ANR	68190	Argument	gn		67970	1					
ANR	68191	Identifier	gn		67970	0					
ANR	68192	ExpressionStatement	n -> klass = c	984:5:25628:25640	67970	1	True				
ANR	68193	AssignmentExpression	n -> klass = c		67970	0		=			
ANR	68194	PtrMemberAccess	n -> klass		67970	0					
ANR	68195	Identifier	n		67970	0					
ANR	68196	Identifier	klass		67970	1					
ANR	68197	Identifier	c		67970	1					
ANR	68198	ElseStatement	else		67970	0					
ANR	68199	CompoundStatement		31:10:735:735	67970	0					
ANR	68200	ExpressionStatement	c = aj -> klass	987:4:25664:25677	67970	0	True				
ANR	68201	AssignmentExpression	c = aj -> klass		67970	0		=			
ANR	68202	Identifier	c		67970	0					
ANR	68203	PtrMemberAccess	aj -> klass		67970	1					
ANR	68204	Identifier	aj		67970	0					
ANR	68205	Identifier	klass		67970	1					
ANR	68206	IfStatement	if ( n_classes )		67970	36					
ANR	68207	Condition	n_classes	992:5:25697:25705	67970	0	True				
ANR	68208	Identifier	n_classes		67970	0					
ANR	68209	CompoundStatement		37:16:785:785	67970	1					
ANR	68210	ExpressionStatement	* n_classes = g -> n_layers	993:2:25712:25736	67970	0	True				
ANR	68211	AssignmentExpression	* n_classes = g -> n_layers		67970	0		=			
ANR	68212	UnaryOperationExpression	* n_classes		67970	0					
ANR	68213	UnaryOperator	*		67970	0					
ANR	68214	Identifier	n_classes		67970	1					
ANR	68215	PtrMemberAccess	g -> n_layers		67970	1					
ANR	68216	Identifier	g		67970	0					
ANR	68217	Identifier	n_layers		67970	1					
ANR	68218	ReturnStatement	return res ;	995:1:25742:25752	67970	37	True				
ANR	68219	Identifier	res		67970	0					
ANR	68220	ReturnType	static RList * *		67970	1					
ANR	68221	Identifier	compute_classes		67970	2					
ANR	68222	ParameterList	"const RAGraph * g , Sdb * v_nodes , int is_left , int * n_classes"		67970	3					
ANR	68223	Parameter	const RAGraph * g	956:31:24861:24876	67970	0	True				
ANR	68224	ParameterType	const RAGraph *		67970	0					
ANR	68225	Identifier	g		67970	1					
ANR	68226	Parameter	Sdb * v_nodes	956:49:24879:24890	67970	1	True				
ANR	68227	ParameterType	Sdb *		67970	0					
ANR	68228	Identifier	v_nodes		67970	1					
ANR	68229	Parameter	int is_left	956:63:24893:24903	67970	2	True				
ANR	68230	ParameterType	int		67970	0					
ANR	68231	Identifier	is_left		67970	1					
ANR	68232	Parameter	int * n_classes	956:76:24906:24919	67970	3	True				
ANR	68233	ParameterType	int *		67970	0					
ANR	68234	Identifier	n_classes		67970	1					
ANR	68235	CFGEntryNode	ENTRY		67970		True				
ANR	68236	CFGExitNode	EXIT		67970		True				
ANR	68237	Symbol	hash_get_rlist		67970						
ANR	68238	Symbol	g -> n_layers		67970						
ANR	68239	Symbol	* res		67970						
ANR	68240	Symbol	* aj		67970						
ANR	68241	Symbol	n_classes		67970						
ANR	68242	Symbol	aj -> klass		67970						
ANR	68243	Symbol	g -> layers [ i ] . nodes		67970						
ANR	68244	Symbol	* n_classes		67970						
ANR	68245	Symbol	laj		67970						
ANR	68246	Symbol	v_nodes		67970						
ANR	68247	Symbol	* g -> layers [ i ] . nodes		67970						
ANR	68248	Symbol	res		67970						
ANR	68249	Symbol	* * i		67970						
ANR	68250	Symbol	c		67970						
ANR	68251	Symbol	gj		67970						
ANR	68252	Symbol	get_anode		67970						
ANR	68253	Symbol	is_left		67970						
ANR	68254	Symbol	* * g		67970						
ANR	68255	Symbol	n -> klass		67970						
ANR	68256	Symbol	g		67970						
ANR	68257	Symbol	gn		67970						
ANR	68258	Symbol	i		67970						
ANR	68259	Symbol	aj		67970						
ANR	68260	Symbol	j		67970						
ANR	68261	Symbol	it		67970						
ANR	68262	Symbol	* c		67970						
ANR	68263	Symbol	n		67970						
ANR	68264	Symbol	* g		67970						
ANR	68265	Symbol	* i		67970						
ANR	68266	Symbol	* j		67970						
ANR	68267	Symbol	* n		67970						
ANR	68268	Symbol	* g -> layers		67970						
ANR	68269	Symbol	* * * g		67970						
ANR	68270	Symbol	g -> layers [ i ] . n_nodes		67970						
ANR	68271	Symbol	g -> layers		67970						
ANR	68272	Symbol	* * g -> layers		67970						
ANR	68273	Symbol	r_list_new		67970						
ANR	68274	Function	cmp_dist	998:0:25757:25838							
ANR	68275	FunctionDef	"cmp_dist (const size_t a , const size_t b)"		68274	0					
ANR	68276	CompoundStatement		998:52:25809:25838	68274	0					
ANR	68277	ReturnStatement	return ( int ) a < ( int ) b ;	999:1:25812:25836	68274	0	True				
ANR	68278	RelationalExpression	( int ) a < ( int ) b		68274	0		<			
ANR	68279	CastExpression	( int ) a		68274	0					
ANR	68280	CastTarget	int		68274	0					
ANR	68281	Identifier	a		68274	1					
ANR	68282	CastExpression	( int ) b		68274	1					
ANR	68283	CastTarget	int		68274	0					
ANR	68284	Identifier	b		68274	1					
ANR	68285	ReturnType	static int		68274	1					
ANR	68286	Identifier	cmp_dist		68274	2					
ANR	68287	ParameterList	"const size_t a , const size_t b"		68274	3					
ANR	68288	Parameter	const size_t a	998:20:25777:25790	68274	0	True				
ANR	68289	ParameterType	const size_t		68274	0					
ANR	68290	Identifier	a		68274	1					
ANR	68291	Parameter	const size_t b	998:36:25793:25806	68274	1	True				
ANR	68292	ParameterType	const size_t		68274	0					
ANR	68293	Identifier	b		68274	1					
ANR	68294	CFGEntryNode	ENTRY		68274		True				
ANR	68295	CFGExitNode	EXIT		68274		True				
ANR	68296	Symbol	a		68274						
ANR	68297	Symbol	b		68274						
ANR	68298	Function	get_sibling	1002:0:25841:26196							
ANR	68299	FunctionDef	"get_sibling (const RAGraph * g , const RANode * n , int is_left , int is_adjust_class)"		68298	0					
ANR	68300	CompoundStatement		1002:100:25941:26196	68298	0					
ANR	68301	IdentifierDeclStatement	RGraphNode * res = NULL ;	1003:1:25944:25966	68298	0	True				
ANR	68302	IdentifierDecl	* res = NULL		68298	0					
ANR	68303	IdentifierDeclType	RGraphNode *		68298	0					
ANR	68304	Identifier	res		68298	1					
ANR	68305	AssignmentExpression	* res = NULL		68298	2		=			
ANR	68306	Identifier	NULL		68298	0					
ANR	68307	Identifier	NULL		68298	1					
ANR	68308	IdentifierDeclStatement	int pos = n -> pos_in_layer ;	1004:1:25969:25994	68298	1	True				
ANR	68309	IdentifierDecl	pos = n -> pos_in_layer		68298	0					
ANR	68310	IdentifierDeclType	int		68298	0					
ANR	68311	Identifier	pos		68298	1					
ANR	68312	AssignmentExpression	pos = n -> pos_in_layer		68298	2		=			
ANR	68313	Identifier	pos		68298	0					
ANR	68314	PtrMemberAccess	n -> pos_in_layer		68298	1					
ANR	68315	Identifier	n		68298	0					
ANR	68316	Identifier	pos_in_layer		68298	1					
ANR	68317	IfStatement	if ( ( is_left && is_adjust_class ) || ( ! is_left && ! is_adjust_class ) )		68298	2					
ANR	68318	Condition	( is_left && is_adjust_class ) || ( ! is_left && ! is_adjust_class )	1006:5:26002:26063	68298	0	True				
ANR	68319	OrExpression	( is_left && is_adjust_class ) || ( ! is_left && ! is_adjust_class )		68298	0		||			
ANR	68320	AndExpression	is_left && is_adjust_class		68298	0		&&			
ANR	68321	Identifier	is_left		68298	0					
ANR	68322	Identifier	is_adjust_class		68298	1					
ANR	68323	AndExpression	! is_left && ! is_adjust_class		68298	1		&&			
ANR	68324	UnaryOperationExpression	! is_left		68298	0					
ANR	68325	UnaryOperator	!		68298	0					
ANR	68326	Identifier	is_left		68298	1					
ANR	68327	UnaryOperationExpression	! is_adjust_class		68298	1					
ANR	68328	UnaryOperator	!		68298	0					
ANR	68329	Identifier	is_adjust_class		68298	1					
ANR	68330	CompoundStatement		5:69:124:124	68298	1					
ANR	68331	ExpressionStatement	pos ++	1007:2:26070:26075	68298	0	True				
ANR	68332	PostIncDecOperationExpression	pos ++		68298	0					
ANR	68333	Identifier	pos		68298	0					
ANR	68334	IncDec	++		68298	1					
ANR	68335	ElseStatement	else		68298	0					
ANR	68336	CompoundStatement		7:8:143:143	68298	0					
ANR	68337	ExpressionStatement	pos --	1009:2:26089:26094	68298	0	True				
ANR	68338	PostIncDecOperationExpression	pos --		68298	0					
ANR	68339	Identifier	pos		68298	0					
ANR	68340	IncDec	--		68298	1					
ANR	68341	IfStatement	"if ( is_valid_pos ( g , n -> layer , pos ) )"		68298	3					
ANR	68342	Condition	"is_valid_pos ( g , n -> layer , pos )"	1012:5:26105:26135	68298	0	True				
ANR	68343	CallExpression	"is_valid_pos ( g , n -> layer , pos )"		68298	0					
ANR	68344	Callee	is_valid_pos		68298	0					
ANR	68345	Identifier	is_valid_pos		68298	0					
ANR	68346	ArgumentList	g		68298	1					
ANR	68347	Argument	g		68298	0					
ANR	68348	Identifier	g		68298	0					
ANR	68349	Argument	n -> layer		68298	1					
ANR	68350	PtrMemberAccess	n -> layer		68298	0					
ANR	68351	Identifier	n		68298	0					
ANR	68352	Identifier	layer		68298	1					
ANR	68353	Argument	pos		68298	2					
ANR	68354	Identifier	pos		68298	0					
ANR	68355	CompoundStatement		11:38:196:196	68298	1					
ANR	68356	ExpressionStatement	res = g -> layers [ n -> layer ] . nodes [ pos ]	1013:2:26142:26178	68298	0	True				
ANR	68357	AssignmentExpression	res = g -> layers [ n -> layer ] . nodes [ pos ]		68298	0		=			
ANR	68358	Identifier	res		68298	0					
ANR	68359	ArrayIndexing	g -> layers [ n -> layer ] . nodes [ pos ]		68298	1					
ANR	68360	MemberAccess	g -> layers [ n -> layer ] . nodes		68298	0					
ANR	68361	ArrayIndexing	g -> layers [ n -> layer ]		68298	0					
ANR	68362	PtrMemberAccess	g -> layers		68298	0					
ANR	68363	Identifier	g		68298	0					
ANR	68364	Identifier	layers		68298	1					
ANR	68365	PtrMemberAccess	n -> layer		68298	1					
ANR	68366	Identifier	n		68298	0					
ANR	68367	Identifier	layer		68298	1					
ANR	68368	Identifier	nodes		68298	1					
ANR	68369	Identifier	pos		68298	1					
ANR	68370	ReturnStatement	return res ;	1015:1:26184:26194	68298	4	True				
ANR	68371	Identifier	res		68298	0					
ANR	68372	ReturnType	static RGraphNode *		68298	1					
ANR	68373	Identifier	get_sibling		68298	2					
ANR	68374	ParameterList	"const RAGraph * g , const RANode * n , int is_left , int is_adjust_class"		68298	3					
ANR	68375	Parameter	const RAGraph * g	1002:31:25872:25887	68298	0	True				
ANR	68376	ParameterType	const RAGraph *		68298	0					
ANR	68377	Identifier	g		68298	1					
ANR	68378	Parameter	const RANode * n	1002:49:25890:25904	68298	1	True				
ANR	68379	ParameterType	const RANode *		68298	0					
ANR	68380	Identifier	n		68298	1					
ANR	68381	Parameter	int is_left	1002:66:25907:25917	68298	2	True				
ANR	68382	ParameterType	int		68298	0					
ANR	68383	Identifier	is_left		68298	1					
ANR	68384	Parameter	int is_adjust_class	1002:79:25920:25938	68298	3	True				
ANR	68385	ParameterType	int		68298	0					
ANR	68386	Identifier	is_adjust_class		68298	1					
ANR	68387	CFGEntryNode	ENTRY		68298		True				
ANR	68388	CFGExitNode	EXIT		68298		True				
ANR	68389	Symbol	* n -> layer		68298						
ANR	68390	Symbol	res		68298						
ANR	68391	Symbol	NULL		68298						
ANR	68392	Symbol	is_left		68298						
ANR	68393	Symbol	* * g		68298						
ANR	68394	Symbol	g		68298						
ANR	68395	Symbol	g -> layers [ n -> layer ] . nodes		68298						
ANR	68396	Symbol	is_adjust_class		68298						
ANR	68397	Symbol	* * n -> layer		68298						
ANR	68398	Symbol	n		68298						
ANR	68399	Symbol	is_valid_pos		68298						
ANR	68400	Symbol	* g		68298						
ANR	68401	Symbol	n -> pos_in_layer		68298						
ANR	68402	Symbol	* * * n		68298						
ANR	68403	Symbol	pos		68298						
ANR	68404	Symbol	* n		68298						
ANR	68405	Symbol	* g -> layers [ n -> layer ] . nodes		68298						
ANR	68406	Symbol	n -> layer		68298						
ANR	68407	Symbol	* g -> layers		68298						
ANR	68408	Symbol	* * * g		68298						
ANR	68409	Symbol	g -> layers		68298						
ANR	68410	Symbol	* * n		68298						
ANR	68411	Symbol	* * g -> layers		68298						
ANR	68412	Symbol	* pos		68298						
ANR	68413	Function	adjust_class_val	1018:0:26199:26508							
ANR	68414	FunctionDef	"adjust_class_val (const RAGraph * g , const RGraphNode * gn , const RGraphNode * sibl , Sdb * res , int is_left)"		68413	0					
ANR	68415	CompoundStatement		1018:115:26314:26508	68413	0					
ANR	68416	IfStatement	if ( is_left )		68413	0					
ANR	68417	Condition	is_left	1019:5:26321:26327	68413	0	True				
ANR	68418	Identifier	is_left		68413	0					
ANR	68419	CompoundStatement		2:14:15:15	68413	1					
ANR	68420	ReturnStatement	"return hash_get_int ( res , sibl ) - hash_get_int ( res , gn ) - dist_nodes ( g , gn , sibl ) ;"	1020:2:26334:26417	68413	0	True				
ANR	68421	AdditiveExpression	"hash_get_int ( res , sibl ) - hash_get_int ( res , gn ) - dist_nodes ( g , gn , sibl )"		68413	0		-			
ANR	68422	CallExpression	"hash_get_int ( res , sibl )"		68413	0					
ANR	68423	Callee	hash_get_int		68413	0					
ANR	68424	Identifier	hash_get_int		68413	0					
ANR	68425	ArgumentList	res		68413	1					
ANR	68426	Argument	res		68413	0					
ANR	68427	Identifier	res		68413	0					
ANR	68428	Argument	sibl		68413	1					
ANR	68429	Identifier	sibl		68413	0					
ANR	68430	AdditiveExpression	"hash_get_int ( res , gn ) - dist_nodes ( g , gn , sibl )"		68413	1		-			
ANR	68431	CallExpression	"hash_get_int ( res , gn )"		68413	0					
ANR	68432	Callee	hash_get_int		68413	0					
ANR	68433	Identifier	hash_get_int		68413	0					
ANR	68434	ArgumentList	res		68413	1					
ANR	68435	Argument	res		68413	0					
ANR	68436	Identifier	res		68413	0					
ANR	68437	Argument	gn		68413	1					
ANR	68438	Identifier	gn		68413	0					
ANR	68439	CallExpression	"dist_nodes ( g , gn , sibl )"		68413	1					
ANR	68440	Callee	dist_nodes		68413	0					
ANR	68441	Identifier	dist_nodes		68413	0					
ANR	68442	ArgumentList	g		68413	1					
ANR	68443	Argument	g		68413	0					
ANR	68444	Identifier	g		68413	0					
ANR	68445	Argument	gn		68413	1					
ANR	68446	Identifier	gn		68413	0					
ANR	68447	Argument	sibl		68413	2					
ANR	68448	Identifier	sibl		68413	0					
ANR	68449	ReturnStatement	"return hash_get_int ( res , gn ) - hash_get_int ( res , sibl ) - dist_nodes ( g , sibl , gn ) ;"	1022:1:26423:26506	68413	1	True				
ANR	68450	AdditiveExpression	"hash_get_int ( res , gn ) - hash_get_int ( res , sibl ) - dist_nodes ( g , sibl , gn )"		68413	0		-			
ANR	68451	CallExpression	"hash_get_int ( res , gn )"		68413	0					
ANR	68452	Callee	hash_get_int		68413	0					
ANR	68453	Identifier	hash_get_int		68413	0					
ANR	68454	ArgumentList	res		68413	1					
ANR	68455	Argument	res		68413	0					
ANR	68456	Identifier	res		68413	0					
ANR	68457	Argument	gn		68413	1					
ANR	68458	Identifier	gn		68413	0					
ANR	68459	AdditiveExpression	"hash_get_int ( res , sibl ) - dist_nodes ( g , sibl , gn )"		68413	1		-			
ANR	68460	CallExpression	"hash_get_int ( res , sibl )"		68413	0					
ANR	68461	Callee	hash_get_int		68413	0					
ANR	68462	Identifier	hash_get_int		68413	0					
ANR	68463	ArgumentList	res		68413	1					
ANR	68464	Argument	res		68413	0					
ANR	68465	Identifier	res		68413	0					
ANR	68466	Argument	sibl		68413	1					
ANR	68467	Identifier	sibl		68413	0					
ANR	68468	CallExpression	"dist_nodes ( g , sibl , gn )"		68413	1					
ANR	68469	Callee	dist_nodes		68413	0					
ANR	68470	Identifier	dist_nodes		68413	0					
ANR	68471	ArgumentList	g		68413	1					
ANR	68472	Argument	g		68413	0					
ANR	68473	Identifier	g		68413	0					
ANR	68474	Argument	sibl		68413	1					
ANR	68475	Identifier	sibl		68413	0					
ANR	68476	Argument	gn		68413	2					
ANR	68477	Identifier	gn		68413	0					
ANR	68478	ReturnType	static int		68413	1					
ANR	68479	Identifier	adjust_class_val		68413	2					
ANR	68480	ParameterList	"const RAGraph * g , const RGraphNode * gn , const RGraphNode * sibl , Sdb * res , int is_left"		68413	3					
ANR	68481	Parameter	const RAGraph * g	1018:28:26227:26242	68413	0	True				
ANR	68482	ParameterType	const RAGraph *		68413	0					
ANR	68483	Identifier	g		68413	1					
ANR	68484	Parameter	const RGraphNode * gn	1018:46:26245:26264	68413	1	True				
ANR	68485	ParameterType	const RGraphNode *		68413	0					
ANR	68486	Identifier	gn		68413	1					
ANR	68487	Parameter	const RGraphNode * sibl	1018:68:26267:26288	68413	2	True				
ANR	68488	ParameterType	const RGraphNode *		68413	0					
ANR	68489	Identifier	sibl		68413	1					
ANR	68490	Parameter	Sdb * res	1018:92:26291:26298	68413	3	True				
ANR	68491	ParameterType	Sdb *		68413	0					
ANR	68492	Identifier	res		68413	1					
ANR	68493	Parameter	int is_left	1018:102:26301:26311	68413	4	True				
ANR	68494	ParameterType	int		68413	0					
ANR	68495	Identifier	is_left		68413	1					
ANR	68496	CFGEntryNode	ENTRY		68413		True				
ANR	68497	CFGExitNode	EXIT		68413		True				
ANR	68498	Symbol	res		68413						
ANR	68499	Symbol	dist_nodes		68413						
ANR	68500	Symbol	is_left		68413						
ANR	68501	Symbol	sibl		68413						
ANR	68502	Symbol	g		68413						
ANR	68503	Symbol	gn		68413						
ANR	68504	Symbol	hash_get_int		68413						
ANR	68505	Function	adjust_class	1027:0:26628:28037							
ANR	68506	FunctionDef	"adjust_class (const RAGraph * g , int is_left , RList * * classes , Sdb * res , int c)"		68505	0					
ANR	68507	CompoundStatement		1027:90:26718:28037	68505	0					
ANR	68508	IdentifierDeclStatement	const RGraphNode * gn ;	1028:1:26721:26741	68505	0	True				
ANR	68509	IdentifierDecl	* gn		68505	0					
ANR	68510	IdentifierDeclType	const RGraphNode *		68505	0					
ANR	68511	Identifier	gn		68505	1					
ANR	68512	IdentifierDeclStatement	const RListIter * it ;	1029:1:26744:26763	68505	1	True				
ANR	68513	IdentifierDecl	* it		68505	0					
ANR	68514	IdentifierDeclType	const RListIter *		68505	0					
ANR	68515	Identifier	it		68505	1					
ANR	68516	IdentifierDeclStatement	const RANode * an ;	1030:1:26766:26782	68505	2	True				
ANR	68517	IdentifierDecl	* an		68505	0					
ANR	68518	IdentifierDeclType	const RANode *		68505	0					
ANR	68519	Identifier	an		68505	1					
ANR	68520	IdentifierDeclStatement	"int dist , v , is_first = true ;"	1031:1:26785:26813	68505	3	True				
ANR	68521	IdentifierDecl	dist		68505	0					
ANR	68522	IdentifierDeclType	int		68505	0					
ANR	68523	Identifier	dist		68505	1					
ANR	68524	IdentifierDecl	v		68505	1					
ANR	68525	IdentifierDeclType	int		68505	0					
ANR	68526	Identifier	v		68505	1					
ANR	68527	IdentifierDecl	is_first = true		68505	2					
ANR	68528	IdentifierDeclType	int		68505	0					
ANR	68529	Identifier	is_first		68505	1					
ANR	68530	AssignmentExpression	is_first = true		68505	2		=			
ANR	68531	Identifier	true		68505	0					
ANR	68532	Identifier	true		68505	1					
ANR	68533	Statement	graph_foreach_anode	1033:1:26817:26835	68505	4	True				
ANR	68534	Statement	(	1033:21:26837:26837	68505	5	True				
ANR	68535	Statement	classes	1033:22:26838:26844	68505	6	True				
ANR	68536	Statement	[	1033:29:26845:26845	68505	7	True				
ANR	68537	Statement	c	1033:30:26846:26846	68505	8	True				
ANR	68538	Statement	]	1033:31:26847:26847	68505	9	True				
ANR	68539	Statement	","	1033:32:26848:26848	68505	10	True				
ANR	68540	Statement	it	1033:34:26850:26851	68505	11	True				
ANR	68541	Statement	","	1033:36:26852:26852	68505	12	True				
ANR	68542	Statement	gn	1033:38:26854:26855	68505	13	True				
ANR	68543	Statement	","	1033:40:26856:26856	68505	14	True				
ANR	68544	Statement	an	1033:42:26858:26859	68505	15	True				
ANR	68545	Statement	)	1033:44:26860:26860	68505	16	True				
ANR	68546	CompoundStatement		9:2:176:200	68505	17					
ANR	68547	IdentifierDeclStatement	const RGraphNode * sibling ;	1034:2:26866:26891	68505	0	True				
ANR	68548	IdentifierDecl	* sibling		68505	0					
ANR	68549	IdentifierDeclType	const RGraphNode *		68505	0					
ANR	68550	Identifier	sibling		68505	1					
ANR	68551	IdentifierDeclStatement	const RANode * sibl_anode ;	1035:2:26895:26919	68505	1	True				
ANR	68552	IdentifierDecl	* sibl_anode		68505	0					
ANR	68553	IdentifierDeclType	const RANode *		68505	0					
ANR	68554	Identifier	sibl_anode		68505	1					
ANR	68555	ExpressionStatement	"sibling = get_sibling ( g , an , is_left , true )"	1037:2:26924:26968	68505	2	True				
ANR	68556	AssignmentExpression	"sibling = get_sibling ( g , an , is_left , true )"		68505	0		=			
ANR	68557	Identifier	sibling		68505	0					
ANR	68558	CallExpression	"get_sibling ( g , an , is_left , true )"		68505	1					
ANR	68559	Callee	get_sibling		68505	0					
ANR	68560	Identifier	get_sibling		68505	0					
ANR	68561	ArgumentList	g		68505	1					
ANR	68562	Argument	g		68505	0					
ANR	68563	Identifier	g		68505	0					
ANR	68564	Argument	an		68505	1					
ANR	68565	Identifier	an		68505	0					
ANR	68566	Argument	is_left		68505	2					
ANR	68567	Identifier	is_left		68505	0					
ANR	68568	Argument	true		68505	3					
ANR	68569	Identifier	true		68505	0					
ANR	68570	IfStatement	if ( ! sibling )		68505	3					
ANR	68571	Condition	! sibling	1038:6:26976:26983	68505	0	True				
ANR	68572	UnaryOperationExpression	! sibling		68505	0					
ANR	68573	UnaryOperator	!		68505	0					
ANR	68574	Identifier	sibling		68505	1					
ANR	68575	CompoundStatement		12:16:267:267	68505	1					
ANR	68576	ContinueStatement	continue ;	1039:3:26991:26999	68505	0	True				
ANR	68577	ExpressionStatement	sibl_anode = get_anode ( sibling )	1041:2:27007:27039	68505	4	True				
ANR	68578	AssignmentExpression	sibl_anode = get_anode ( sibling )		68505	0		=			
ANR	68579	Identifier	sibl_anode		68505	0					
ANR	68580	CallExpression	get_anode ( sibling )		68505	1					
ANR	68581	Callee	get_anode		68505	0					
ANR	68582	Identifier	get_anode		68505	0					
ANR	68583	ArgumentList	sibling		68505	1					
ANR	68584	Argument	sibling		68505	0					
ANR	68585	Identifier	sibling		68505	0					
ANR	68586	IfStatement	if ( sibl_anode -> klass == c )		68505	5					
ANR	68587	Condition	sibl_anode -> klass == c	1042:6:27047:27068	68505	0	True				
ANR	68588	EqualityExpression	sibl_anode -> klass == c		68505	0		==			
ANR	68589	PtrMemberAccess	sibl_anode -> klass		68505	0					
ANR	68590	Identifier	sibl_anode		68505	0					
ANR	68591	Identifier	klass		68505	1					
ANR	68592	Identifier	c		68505	1					
ANR	68593	CompoundStatement		16:30:352:352	68505	1					
ANR	68594	ContinueStatement	continue ;	1043:3:27076:27084	68505	0	True				
ANR	68595	ExpressionStatement	"v = adjust_class_val ( g , gn , sibling , res , is_left )"	1045:2:27092:27143	68505	6	True				
ANR	68596	AssignmentExpression	"v = adjust_class_val ( g , gn , sibling , res , is_left )"		68505	0		=			
ANR	68597	Identifier	v		68505	0					
ANR	68598	CallExpression	"adjust_class_val ( g , gn , sibling , res , is_left )"		68505	1					
ANR	68599	Callee	adjust_class_val		68505	0					
ANR	68600	Identifier	adjust_class_val		68505	0					
ANR	68601	ArgumentList	g		68505	1					
ANR	68602	Argument	g		68505	0					
ANR	68603	Identifier	g		68505	0					
ANR	68604	Argument	gn		68505	1					
ANR	68605	Identifier	gn		68505	0					
ANR	68606	Argument	sibling		68505	2					
ANR	68607	Identifier	sibling		68505	0					
ANR	68608	Argument	res		68505	3					
ANR	68609	Identifier	res		68505	0					
ANR	68610	Argument	is_left		68505	4					
ANR	68611	Identifier	is_left		68505	0					
ANR	68612	ExpressionStatement	"dist = is_first ? v : R_MIN ( dist , v )"	1046:2:27147:27182	68505	7	True				
ANR	68613	AssignmentExpression	"dist = is_first ? v : R_MIN ( dist , v )"		68505	0		=			
ANR	68614	Identifier	dist		68505	0					
ANR	68615	ConditionalExpression	"is_first ? v : R_MIN ( dist , v )"		68505	1					
ANR	68616	Condition	is_first		68505	0					
ANR	68617	Identifier	is_first		68505	0					
ANR	68618	Identifier	v		68505	1					
ANR	68619	CallExpression	"R_MIN ( dist , v )"		68505	2					
ANR	68620	Callee	R_MIN		68505	0					
ANR	68621	Identifier	R_MIN		68505	0					
ANR	68622	ArgumentList	dist		68505	1					
ANR	68623	Argument	dist		68505	0					
ANR	68624	Identifier	dist		68505	0					
ANR	68625	Argument	v		68505	1					
ANR	68626	Identifier	v		68505	0					
ANR	68627	ExpressionStatement	is_first = false	1047:2:27186:27202	68505	8	True				
ANR	68628	AssignmentExpression	is_first = false		68505	0		=			
ANR	68629	Identifier	is_first		68505	0					
ANR	68630	Identifier	false		68505	1					
ANR	68631	IfStatement	if ( is_first )		68505	18					
ANR	68632	Condition	is_first	1050:5:27213:27220	68505	0	True				
ANR	68633	Identifier	is_first		68505	0					
ANR	68634	CompoundStatement		26:2:539:546	68505	1					
ANR	68635	IdentifierDeclStatement	RList * heap = r_list_new ( ) ;	1051:2:27227:27254	68505	0	True				
ANR	68636	IdentifierDecl	* heap = r_list_new ( )		68505	0					
ANR	68637	IdentifierDeclType	RList *		68505	0					
ANR	68638	Identifier	heap		68505	1					
ANR	68639	AssignmentExpression	* heap = r_list_new ( )		68505	2		=			
ANR	68640	Identifier	heap		68505	0					
ANR	68641	CallExpression	r_list_new ( )		68505	1					
ANR	68642	Callee	r_list_new		68505	0					
ANR	68643	Identifier	r_list_new		68505	0					
ANR	68644	ArgumentList			68505	1					
ANR	68645	IdentifierDeclStatement	int len ;	1052:2:27258:27265	68505	1	True				
ANR	68646	IdentifierDecl	len		68505	0					
ANR	68647	IdentifierDeclType	int		68505	0					
ANR	68648	Identifier	len		68505	1					
ANR	68649	Statement	graph_foreach_anode	1054:2:27270:27288	68505	2	True				
ANR	68650	Statement	(	1054:22:27290:27290	68505	3	True				
ANR	68651	Statement	classes	1054:23:27291:27297	68505	4	True				
ANR	68652	Statement	[	1054:30:27298:27298	68505	5	True				
ANR	68653	Statement	c	1054:31:27299:27299	68505	6	True				
ANR	68654	Statement	]	1054:32:27300:27300	68505	7	True				
ANR	68655	Statement	","	1054:33:27301:27301	68505	8	True				
ANR	68656	Statement	it	1054:35:27303:27304	68505	9	True				
ANR	68657	Statement	","	1054:37:27305:27305	68505	10	True				
ANR	68658	Statement	gn	1054:39:27307:27308	68505	11	True				
ANR	68659	Statement	","	1054:41:27309:27309	68505	12	True				
ANR	68660	Statement	an	1054:43:27311:27312	68505	13	True				
ANR	68661	Statement	)	1054:45:27313:27313	68505	14	True				
ANR	68662	CompoundStatement		32:3:714:730	68505	15					
ANR	68663	IdentifierDeclStatement	"const RList * neigh = r_graph_all_neighbours ( g -> graph , gn ) ;"	1055:3:27320:27378	68505	0	True				
ANR	68664	IdentifierDecl	"* neigh = r_graph_all_neighbours ( g -> graph , gn )"		68505	0					
ANR	68665	IdentifierDeclType	const RList *		68505	0					
ANR	68666	Identifier	neigh		68505	1					
ANR	68667	AssignmentExpression	"* neigh = r_graph_all_neighbours ( g -> graph , gn )"		68505	2		=			
ANR	68668	Identifier	neigh		68505	0					
ANR	68669	CallExpression	"r_graph_all_neighbours ( g -> graph , gn )"		68505	1					
ANR	68670	Callee	r_graph_all_neighbours		68505	0					
ANR	68671	Identifier	r_graph_all_neighbours		68505	0					
ANR	68672	ArgumentList	g -> graph		68505	1					
ANR	68673	Argument	g -> graph		68505	0					
ANR	68674	PtrMemberAccess	g -> graph		68505	0					
ANR	68675	Identifier	g		68505	0					
ANR	68676	Identifier	graph		68505	1					
ANR	68677	Argument	gn		68505	1					
ANR	68678	Identifier	gn		68505	0					
ANR	68679	IdentifierDeclStatement	const RGraphNode * gk ;	1056:3:27383:27403	68505	1	True				
ANR	68680	IdentifierDecl	* gk		68505	0					
ANR	68681	IdentifierDeclType	const RGraphNode *		68505	0					
ANR	68682	Identifier	gk		68505	1					
ANR	68683	IdentifierDeclStatement	const RListIter * itk ;	1057:3:27408:27428	68505	2	True				
ANR	68684	IdentifierDecl	* itk		68505	0					
ANR	68685	IdentifierDeclType	const RListIter *		68505	0					
ANR	68686	Identifier	itk		68505	1					
ANR	68687	IdentifierDeclStatement	const RANode * ak ;	1058:3:27433:27449	68505	3	True				
ANR	68688	IdentifierDecl	* ak		68505	0					
ANR	68689	IdentifierDeclType	const RANode *		68505	0					
ANR	68690	Identifier	ak		68505	1					
ANR	68691	Statement	graph_foreach_anode	1060:3:27455:27473	68505	4	True				
ANR	68692	Statement	(	1060:23:27475:27475	68505	5	True				
ANR	68693	Statement	neigh	1060:24:27476:27480	68505	6	True				
ANR	68694	Statement	","	1060:29:27481:27481	68505	7	True				
ANR	68695	Statement	itk	1060:31:27483:27485	68505	8	True				
ANR	68696	Statement	","	1060:34:27486:27486	68505	9	True				
ANR	68697	Statement	gk	1060:36:27488:27489	68505	10	True				
ANR	68698	Statement	","	1060:38:27490:27490	68505	11	True				
ANR	68699	Statement	ak	1060:40:27492:27493	68505	12	True				
ANR	68700	Statement	)	1060:42:27494:27494	68505	13	True				
ANR	68701	CompoundStatement		34:44:777:777	68505	14					
ANR	68702	IfStatement	if ( ak -> klass < c )		68505	0					
ANR	68703	Condition	ak -> klass < c	1061:8:27506:27518	68505	0	True				
ANR	68704	RelationalExpression	ak -> klass < c		68505	0		<			
ANR	68705	PtrMemberAccess	ak -> klass		68505	0					
ANR	68706	Identifier	ak		68505	0					
ANR	68707	Identifier	klass		68505	1					
ANR	68708	Identifier	c		68505	1					
ANR	68709	CompoundStatement		36:5:809:835	68505	1					
ANR	68710	IdentifierDeclStatement	size_t d = ( ak -> x - an -> x ) ;	1062:5:27528:27554	68505	0	True				
ANR	68711	IdentifierDecl	d = ( ak -> x - an -> x )		68505	0					
ANR	68712	IdentifierDeclType	size_t		68505	0					
ANR	68713	Identifier	d		68505	1					
ANR	68714	AssignmentExpression	d = ( ak -> x - an -> x )		68505	2		=			
ANR	68715	Identifier	d		68505	0					
ANR	68716	AdditiveExpression	ak -> x - an -> x		68505	1		-			
ANR	68717	PtrMemberAccess	ak -> x		68505	0					
ANR	68718	Identifier	ak		68505	0					
ANR	68719	Identifier	x		68505	1					
ANR	68720	PtrMemberAccess	an -> x		68505	1					
ANR	68721	Identifier	an		68505	0					
ANR	68722	Identifier	x		68505	1					
ANR	68723	IfStatement	if ( d > 0 )		68505	1					
ANR	68724	Condition	d > 0	1063:9:27565:27569	68505	0	True				
ANR	68725	RelationalExpression	d > 0		68505	0		>			
ANR	68726	Identifier	d		68505	0					
ANR	68727	PrimaryExpression	0		68505	1					
ANR	68728	CompoundStatement		37:16:853:853	68505	1					
ANR	68729	ExpressionStatement	"r_list_append ( heap , ( void * ) d )"	1064:6:27580:27612	68505	0	True				
ANR	68730	CallExpression	"r_list_append ( heap , ( void * ) d )"		68505	0					
ANR	68731	Callee	r_list_append		68505	0					
ANR	68732	Identifier	r_list_append		68505	0					
ANR	68733	ArgumentList	heap		68505	1					
ANR	68734	Argument	heap		68505	0					
ANR	68735	Identifier	heap		68505	0					
ANR	68736	Argument	( void * ) d		68505	1					
ANR	68737	CastExpression	( void * ) d		68505	0					
ANR	68738	CastTarget	void *		68505	0					
ANR	68739	Identifier	d		68505	1					
ANR	68740	ExpressionStatement	len = r_list_length ( heap )	1070:2:27639:27665	68505	16	True				
ANR	68741	AssignmentExpression	len = r_list_length ( heap )		68505	0		=			
ANR	68742	Identifier	len		68505	0					
ANR	68743	CallExpression	r_list_length ( heap )		68505	1					
ANR	68744	Callee	r_list_length		68505	0					
ANR	68745	Identifier	r_list_length		68505	0					
ANR	68746	ArgumentList	heap		68505	1					
ANR	68747	Argument	heap		68505	0					
ANR	68748	Identifier	heap		68505	0					
ANR	68749	IfStatement	if ( len == 0 )		68505	17					
ANR	68750	Condition	len == 0	1071:6:27673:27680	68505	0	True				
ANR	68751	EqualityExpression	len == 0		68505	0		==			
ANR	68752	Identifier	len		68505	0					
ANR	68753	PrimaryExpression	0		68505	1					
ANR	68754	CompoundStatement		45:16:964:964	68505	1					
ANR	68755	ExpressionStatement	dist = 0	1072:3:27688:27696	68505	0	True				
ANR	68756	AssignmentExpression	dist = 0		68505	0		=			
ANR	68757	Identifier	dist		68505	0					
ANR	68758	PrimaryExpression	0		68505	1					
ANR	68759	ElseStatement	else		68505	0					
ANR	68760	CompoundStatement		47:9:988:988	68505	0					
ANR	68761	ExpressionStatement	"r_list_sort ( heap , ( RListComparator ) cmp_dist )"	1074:3:27712:27758	68505	0	True				
ANR	68762	CallExpression	"r_list_sort ( heap , ( RListComparator ) cmp_dist )"		68505	0					
ANR	68763	Callee	r_list_sort		68505	0					
ANR	68764	Identifier	r_list_sort		68505	0					
ANR	68765	ArgumentList	heap		68505	1					
ANR	68766	Argument	heap		68505	0					
ANR	68767	Identifier	heap		68505	0					
ANR	68768	Argument	( RListComparator ) cmp_dist		68505	1					
ANR	68769	CastExpression	( RListComparator ) cmp_dist		68505	0					
ANR	68770	CastTarget	RListComparator		68505	0					
ANR	68771	Identifier	cmp_dist		68505	1					
ANR	68772	ExpressionStatement	"dist = ( int ) ( size_t ) r_list_get_n ( heap , len / 2 )"	1075:3:27763:27813	68505	1	True				
ANR	68773	AssignmentExpression	"dist = ( int ) ( size_t ) r_list_get_n ( heap , len / 2 )"		68505	0		=			
ANR	68774	Identifier	dist		68505	0					
ANR	68775	CastExpression	"( int ) ( size_t ) r_list_get_n ( heap , len / 2 )"		68505	1					
ANR	68776	CastTarget	int		68505	0					
ANR	68777	CastExpression	"( size_t ) r_list_get_n ( heap , len / 2 )"		68505	1					
ANR	68778	CastTarget	size_t		68505	0					
ANR	68779	CallExpression	"r_list_get_n ( heap , len / 2 )"		68505	1					
ANR	68780	Callee	r_list_get_n		68505	0					
ANR	68781	Identifier	r_list_get_n		68505	0					
ANR	68782	ArgumentList	heap		68505	1					
ANR	68783	Argument	heap		68505	0					
ANR	68784	Identifier	heap		68505	0					
ANR	68785	Argument	len / 2		68505	1					
ANR	68786	MultiplicativeExpression	len / 2		68505	0		/			
ANR	68787	Identifier	len		68505	0					
ANR	68788	PrimaryExpression	2		68505	1					
ANR	68789	ExpressionStatement	r_list_free ( heap )	1078:2:27822:27840	68505	18	True				
ANR	68790	CallExpression	r_list_free ( heap )		68505	0					
ANR	68791	Callee	r_list_free		68505	0					
ANR	68792	Identifier	r_list_free		68505	0					
ANR	68793	ArgumentList	heap		68505	1					
ANR	68794	Argument	heap		68505	0					
ANR	68795	Identifier	heap		68505	0					
ANR	68796	Statement	graph_foreach_anode	1081:1:27847:27865	68505	19	True				
ANR	68797	Statement	(	1081:21:27867:27867	68505	20	True				
ANR	68798	Statement	classes	1081:22:27868:27874	68505	21	True				
ANR	68799	Statement	[	1081:29:27875:27875	68505	22	True				
ANR	68800	Statement	c	1081:30:27876:27876	68505	23	True				
ANR	68801	Statement	]	1081:31:27877:27877	68505	24	True				
ANR	68802	Statement	","	1081:32:27878:27878	68505	25	True				
ANR	68803	Statement	it	1081:34:27880:27881	68505	26	True				
ANR	68804	Statement	","	1081:36:27882:27882	68505	27	True				
ANR	68805	Statement	gn	1081:38:27884:27885	68505	28	True				
ANR	68806	Statement	","	1081:40:27886:27886	68505	29	True				
ANR	68807	Statement	an	1081:42:27888:27889	68505	30	True				
ANR	68808	Statement	)	1081:44:27890:27890	68505	31	True				
ANR	68809	CompoundStatement		57:2:1223:1282	68505	32					
ANR	68810	IdentifierDeclStatement	"const int old_val = hash_get_int ( res , gn ) ;"	1082:2:27896:27938	68505	0	True				
ANR	68811	IdentifierDecl	"old_val = hash_get_int ( res , gn )"		68505	0					
ANR	68812	IdentifierDeclType	const int		68505	0					
ANR	68813	Identifier	old_val		68505	1					
ANR	68814	AssignmentExpression	"old_val = hash_get_int ( res , gn )"		68505	2		=			
ANR	68815	Identifier	old_val		68505	0					
ANR	68816	CallExpression	"hash_get_int ( res , gn )"		68505	1					
ANR	68817	Callee	hash_get_int		68505	0					
ANR	68818	Identifier	hash_get_int		68505	0					
ANR	68819	ArgumentList	res		68505	1					
ANR	68820	Argument	res		68505	0					
ANR	68821	Identifier	res		68505	0					
ANR	68822	Argument	gn		68505	1					
ANR	68823	Identifier	gn		68505	0					
ANR	68824	IdentifierDeclStatement	const int new_val = is_left ? old_val + dist : old_val - dist ;	1083:2:27942:28001	68505	1	True				
ANR	68825	IdentifierDecl	new_val = is_left ? old_val + dist : old_val - dist		68505	0					
ANR	68826	IdentifierDeclType	const int		68505	0					
ANR	68827	Identifier	new_val		68505	1					
ANR	68828	AssignmentExpression	new_val = is_left ? old_val + dist : old_val - dist		68505	2		=			
ANR	68829	Identifier	new_val		68505	0					
ANR	68830	ConditionalExpression	is_left ? old_val + dist : old_val - dist		68505	1					
ANR	68831	Condition	is_left		68505	0					
ANR	68832	Identifier	is_left		68505	0					
ANR	68833	AdditiveExpression	old_val + dist		68505	1		+			
ANR	68834	Identifier	old_val		68505	0					
ANR	68835	Identifier	dist		68505	1					
ANR	68836	AdditiveExpression	old_val - dist		68505	2		-			
ANR	68837	Identifier	old_val		68505	0					
ANR	68838	Identifier	dist		68505	1					
ANR	68839	ExpressionStatement	"hash_set ( res , gn , new_val )"	1084:2:28005:28032	68505	2	True				
ANR	68840	CallExpression	"hash_set ( res , gn , new_val )"		68505	0					
ANR	68841	Callee	hash_set		68505	0					
ANR	68842	Identifier	hash_set		68505	0					
ANR	68843	ArgumentList	res		68505	1					
ANR	68844	Argument	res		68505	0					
ANR	68845	Identifier	res		68505	0					
ANR	68846	Argument	gn		68505	1					
ANR	68847	Identifier	gn		68505	0					
ANR	68848	Argument	new_val		68505	2					
ANR	68849	Identifier	new_val		68505	0					
ANR	68850	ReturnType	static void		68505	1					
ANR	68851	Identifier	adjust_class		68505	2					
ANR	68852	ParameterList	"const RAGraph * g , int is_left , RList * * classes , Sdb * res , int c"		68505	3					
ANR	68853	Parameter	const RAGraph * g	1027:25:26653:26668	68505	0	True				
ANR	68854	ParameterType	const RAGraph *		68505	0					
ANR	68855	Identifier	g		68505	1					
ANR	68856	Parameter	int is_left	1027:43:26671:26681	68505	1	True				
ANR	68857	ParameterType	int		68505	0					
ANR	68858	Identifier	is_left		68505	1					
ANR	68859	Parameter	RList * * classes	1027:56:26684:26698	68505	2	True				
ANR	68860	ParameterType	RList * *		68505	0					
ANR	68861	Identifier	classes		68505	1					
ANR	68862	Parameter	Sdb * res	1027:73:26701:26708	68505	3	True				
ANR	68863	ParameterType	Sdb *		68505	0					
ANR	68864	Identifier	res		68505	1					
ANR	68865	Parameter	int c	1027:83:26711:26715	68505	4	True				
ANR	68866	ParameterType	int		68505	0					
ANR	68867	Identifier	c		68505	1					
ANR	68868	CFGEntryNode	ENTRY		68505		True				
ANR	68869	CFGExitNode	EXIT		68505		True				
ANR	68870	CFGErrorNode	ERROR		68505		True				
ANR	68871	Symbol	r_graph_all_neighbours		68505						
ANR	68872	Symbol	new_val		68505						
ANR	68873	Symbol	old_val		68505						
ANR	68874	Symbol	classes		68505						
ANR	68875	Symbol	dist		68505						
ANR	68876	Symbol	sibl_anode		68505						
ANR	68877	Symbol	neigh		68505						
ANR	68878	Symbol	len		68505						
ANR	68879	Symbol	ak -> x		68505						
ANR	68880	Symbol	g -> graph		68505						
ANR	68881	Symbol	an -> x		68505						
ANR	68882	Symbol	get_sibling		68505						
ANR	68883	Symbol	cmp_dist		68505						
ANR	68884	Symbol	heap		68505						
ANR	68885	Symbol	res		68505						
ANR	68886	Symbol	itk		68505						
ANR	68887	Symbol	c		68505						
ANR	68888	Symbol	get_anode		68505						
ANR	68889	Symbol	is_left		68505						
ANR	68890	Symbol	gk		68505						
ANR	68891	Symbol	d		68505						
ANR	68892	Symbol	g		68505						
ANR	68893	Symbol	gn		68505						
ANR	68894	Symbol	is_first		68505						
ANR	68895	Symbol	false		68505						
ANR	68896	Symbol	r_list_get_n		68505						
ANR	68897	Symbol	R_MIN		68505						
ANR	68898	Symbol	ak		68505						
ANR	68899	Symbol	it		68505						
ANR	68900	Symbol	an		68505						
ANR	68901	Symbol	hash_get_int		68505						
ANR	68902	Symbol	* an		68505						
ANR	68903	Symbol	* g		68505						
ANR	68904	Symbol	sibl_anode -> klass		68505						
ANR	68905	Symbol	sibling		68505						
ANR	68906	Symbol	* ak		68505						
ANR	68907	Symbol	v		68505						
ANR	68908	Symbol	ak -> klass		68505						
ANR	68909	Symbol	true		68505						
ANR	68910	Symbol	adjust_class_val		68505						
ANR	68911	Symbol	r_list_length		68505						
ANR	68912	Symbol	* sibl_anode		68505						
ANR	68913	Symbol	r_list_new		68505						
ANR	68914	Function	place_nodes_val	1088:0:28040:28298							
ANR	68915	FunctionDef	"place_nodes_val (const RAGraph * g , const RGraphNode * gn , const RGraphNode * sibl , Sdb * res , int is_left)"		68914	0					
ANR	68916	CompoundStatement		1088:114:28154:28298	68914	0					
ANR	68917	IfStatement	if ( is_left )		68914	0					
ANR	68918	Condition	is_left	1089:5:28161:28167	68914	0	True				
ANR	68919	Identifier	is_left		68914	0					
ANR	68920	CompoundStatement		2:14:15:15	68914	1					
ANR	68921	ReturnStatement	"return hash_get_int ( res , sibl ) + dist_nodes ( g , sibl , gn ) ;"	1090:2:28174:28232	68914	0	True				
ANR	68922	AdditiveExpression	"hash_get_int ( res , sibl ) + dist_nodes ( g , sibl , gn )"		68914	0		+			
ANR	68923	CallExpression	"hash_get_int ( res , sibl )"		68914	0					
ANR	68924	Callee	hash_get_int		68914	0					
ANR	68925	Identifier	hash_get_int		68914	0					
ANR	68926	ArgumentList	res		68914	1					
ANR	68927	Argument	res		68914	0					
ANR	68928	Identifier	res		68914	0					
ANR	68929	Argument	sibl		68914	1					
ANR	68930	Identifier	sibl		68914	0					
ANR	68931	CallExpression	"dist_nodes ( g , sibl , gn )"		68914	1					
ANR	68932	Callee	dist_nodes		68914	0					
ANR	68933	Identifier	dist_nodes		68914	0					
ANR	68934	ArgumentList	g		68914	1					
ANR	68935	Argument	g		68914	0					
ANR	68936	Identifier	g		68914	0					
ANR	68937	Argument	sibl		68914	1					
ANR	68938	Identifier	sibl		68914	0					
ANR	68939	Argument	gn		68914	2					
ANR	68940	Identifier	gn		68914	0					
ANR	68941	ReturnStatement	"return hash_get_int ( res , sibl ) - dist_nodes ( g , gn , sibl ) ;"	1092:1:28238:28296	68914	1	True				
ANR	68942	AdditiveExpression	"hash_get_int ( res , sibl ) - dist_nodes ( g , gn , sibl )"		68914	0		-			
ANR	68943	CallExpression	"hash_get_int ( res , sibl )"		68914	0					
ANR	68944	Callee	hash_get_int		68914	0					
ANR	68945	Identifier	hash_get_int		68914	0					
ANR	68946	ArgumentList	res		68914	1					
ANR	68947	Argument	res		68914	0					
ANR	68948	Identifier	res		68914	0					
ANR	68949	Argument	sibl		68914	1					
ANR	68950	Identifier	sibl		68914	0					
ANR	68951	CallExpression	"dist_nodes ( g , gn , sibl )"		68914	1					
ANR	68952	Callee	dist_nodes		68914	0					
ANR	68953	Identifier	dist_nodes		68914	0					
ANR	68954	ArgumentList	g		68914	1					
ANR	68955	Argument	g		68914	0					
ANR	68956	Identifier	g		68914	0					
ANR	68957	Argument	gn		68914	1					
ANR	68958	Identifier	gn		68914	0					
ANR	68959	Argument	sibl		68914	2					
ANR	68960	Identifier	sibl		68914	0					
ANR	68961	ReturnType	static int		68914	1					
ANR	68962	Identifier	place_nodes_val		68914	2					
ANR	68963	ParameterList	"const RAGraph * g , const RGraphNode * gn , const RGraphNode * sibl , Sdb * res , int is_left"		68914	3					
ANR	68964	Parameter	const RAGraph * g	1088:27:28067:28082	68914	0	True				
ANR	68965	ParameterType	const RAGraph *		68914	0					
ANR	68966	Identifier	g		68914	1					
ANR	68967	Parameter	const RGraphNode * gn	1088:45:28085:28104	68914	1	True				
ANR	68968	ParameterType	const RGraphNode *		68914	0					
ANR	68969	Identifier	gn		68914	1					
ANR	68970	Parameter	const RGraphNode * sibl	1088:67:28107:28128	68914	2	True				
ANR	68971	ParameterType	const RGraphNode *		68914	0					
ANR	68972	Identifier	sibl		68914	1					
ANR	68973	Parameter	Sdb * res	1088:91:28131:28138	68914	3	True				
ANR	68974	ParameterType	Sdb *		68914	0					
ANR	68975	Identifier	res		68914	1					
ANR	68976	Parameter	int is_left	1088:101:28141:28151	68914	4	True				
ANR	68977	ParameterType	int		68914	0					
ANR	68978	Identifier	is_left		68914	1					
ANR	68979	CFGEntryNode	ENTRY		68914		True				
ANR	68980	CFGExitNode	EXIT		68914		True				
ANR	68981	Symbol	res		68914						
ANR	68982	Symbol	dist_nodes		68914						
ANR	68983	Symbol	is_left		68914						
ANR	68984	Symbol	sibl		68914						
ANR	68985	Symbol	g		68914						
ANR	68986	Symbol	gn		68914						
ANR	68987	Symbol	hash_get_int		68914						
ANR	68988	Function	place_nodes_sel_p	1095:0:28301:28504							
ANR	68989	FunctionDef	"place_nodes_sel_p (int newval , int oldval , int is_first , int is_left)"		68988	0					
ANR	68990	CompoundStatement		1095:80:28381:28504	68988	0					
ANR	68991	IfStatement	if ( is_first )		68988	0					
ANR	68992	Condition	is_first	1096:5:28388:28395	68988	0	True				
ANR	68993	Identifier	is_first		68988	0					
ANR	68994	CompoundStatement		2:15:16:16	68988	1					
ANR	68995	ReturnStatement	return newval ;	1097:2:28402:28415	68988	0	True				
ANR	68996	Identifier	newval		68988	0					
ANR	68997	IfStatement	if ( is_left )		68988	1					
ANR	68998	Condition	is_left	1099:5:28425:28431	68988	0	True				
ANR	68999	Identifier	is_left		68988	0					
ANR	69000	CompoundStatement		5:14:52:52	68988	1					
ANR	69001	ReturnStatement	"return R_MAX ( oldval , newval ) ;"	1100:2:28438:28467	68988	0	True				
ANR	69002	CallExpression	"R_MAX ( oldval , newval )"		68988	0					
ANR	69003	Callee	R_MAX		68988	0					
ANR	69004	Identifier	R_MAX		68988	0					
ANR	69005	ArgumentList	oldval		68988	1					
ANR	69006	Argument	oldval		68988	0					
ANR	69007	Identifier	oldval		68988	0					
ANR	69008	Argument	newval		68988	1					
ANR	69009	Identifier	newval		68988	0					
ANR	69010	ReturnStatement	"return R_MIN ( oldval , newval ) ;"	1102:1:28473:28502	68988	2	True				
ANR	69011	CallExpression	"R_MIN ( oldval , newval )"		68988	0					
ANR	69012	Callee	R_MIN		68988	0					
ANR	69013	Identifier	R_MIN		68988	0					
ANR	69014	ArgumentList	oldval		68988	1					
ANR	69015	Argument	oldval		68988	0					
ANR	69016	Identifier	oldval		68988	0					
ANR	69017	Argument	newval		68988	1					
ANR	69018	Identifier	newval		68988	0					
ANR	69019	ReturnType	static int		68988	1					
ANR	69020	Identifier	place_nodes_sel_p		68988	2					
ANR	69021	ParameterList	"int newval , int oldval , int is_first , int is_left"		68988	3					
ANR	69022	Parameter	int newval	1095:29:28330:28339	68988	0	True				
ANR	69023	ParameterType	int		68988	0					
ANR	69024	Identifier	newval		68988	1					
ANR	69025	Parameter	int oldval	1095:41:28342:28351	68988	1	True				
ANR	69026	ParameterType	int		68988	0					
ANR	69027	Identifier	oldval		68988	1					
ANR	69028	Parameter	int is_first	1095:53:28354:28365	68988	2	True				
ANR	69029	ParameterType	int		68988	0					
ANR	69030	Identifier	is_first		68988	1					
ANR	69031	Parameter	int is_left	1095:67:28368:28378	68988	3	True				
ANR	69032	ParameterType	int		68988	0					
ANR	69033	Identifier	is_left		68988	1					
ANR	69034	CFGEntryNode	ENTRY		68988		True				
ANR	69035	CFGExitNode	EXIT		68988		True				
ANR	69036	Symbol	oldval		68988						
ANR	69037	Symbol	is_left		68988						
ANR	69038	Symbol	is_first		68988						
ANR	69039	Symbol	R_MAX		68988						
ANR	69040	Symbol	R_MIN		68988						
ANR	69041	Symbol	newval		68988						
ANR	69042	Function	place_nodes	1106:0:28552:29484							
ANR	69043	FunctionDef	"place_nodes (const RAGraph * g , const RGraphNode * gn , int is_left , Sdb * v_nodes , RList * * classes , Sdb * res , Sdb * placed)"		69042	0					
ANR	69044	CompoundStatement		1106:131:28683:29484	69042	0					
ANR	69045	IdentifierDeclStatement	"const RList * lv = hash_get_rlist ( v_nodes , gn ) ;"	1107:1:28686:28732	69042	0	True				
ANR	69046	IdentifierDecl	"* lv = hash_get_rlist ( v_nodes , gn )"		69042	0					
ANR	69047	IdentifierDeclType	const RList *		69042	0					
ANR	69048	Identifier	lv		69042	1					
ANR	69049	AssignmentExpression	"* lv = hash_get_rlist ( v_nodes , gn )"		69042	2		=			
ANR	69050	Identifier	lv		69042	0					
ANR	69051	CallExpression	"hash_get_rlist ( v_nodes , gn )"		69042	1					
ANR	69052	Callee	hash_get_rlist		69042	0					
ANR	69053	Identifier	hash_get_rlist		69042	0					
ANR	69054	ArgumentList	v_nodes		69042	1					
ANR	69055	Argument	v_nodes		69042	0					
ANR	69056	Identifier	v_nodes		69042	0					
ANR	69057	Argument	gn		69042	1					
ANR	69058	Identifier	gn		69042	0					
ANR	69059	IdentifierDeclStatement	"int p = 0 , v , is_first = true ;"	1108:1:28735:28764	69042	1	True				
ANR	69060	IdentifierDecl	p = 0		69042	0					
ANR	69061	IdentifierDeclType	int		69042	0					
ANR	69062	Identifier	p		69042	1					
ANR	69063	AssignmentExpression	p = 0		69042	2		=			
ANR	69064	Identifier	p		69042	0					
ANR	69065	PrimaryExpression	0		69042	1					
ANR	69066	IdentifierDecl	v		69042	1					
ANR	69067	IdentifierDeclType	int		69042	0					
ANR	69068	Identifier	v		69042	1					
ANR	69069	IdentifierDecl	is_first = true		69042	2					
ANR	69070	IdentifierDeclType	int		69042	0					
ANR	69071	Identifier	is_first		69042	1					
ANR	69072	AssignmentExpression	is_first = true		69042	2		=			
ANR	69073	Identifier	true		69042	0					
ANR	69074	Identifier	true		69042	1					
ANR	69075	IdentifierDeclStatement	const RGraphNode * gk ;	1109:1:28767:28787	69042	2	True				
ANR	69076	IdentifierDecl	* gk		69042	0					
ANR	69077	IdentifierDeclType	const RGraphNode *		69042	0					
ANR	69078	Identifier	gk		69042	1					
ANR	69079	IdentifierDeclStatement	const RListIter * itk ;	1110:1:28790:28810	69042	3	True				
ANR	69080	IdentifierDecl	* itk		69042	0					
ANR	69081	IdentifierDeclType	const RListIter *		69042	0					
ANR	69082	Identifier	itk		69042	1					
ANR	69083	IdentifierDeclStatement	const RANode * ak ;	1111:1:28813:28829	69042	4	True				
ANR	69084	IdentifierDecl	* ak		69042	0					
ANR	69085	IdentifierDeclType	const RANode *		69042	0					
ANR	69086	Identifier	ak		69042	1					
ANR	69087	Statement	graph_foreach_anode	1113:1:28833:28851	69042	5	True				
ANR	69088	Statement	(	1113:21:28853:28853	69042	6	True				
ANR	69089	Statement	lv	1113:22:28854:28855	69042	7	True				
ANR	69090	Statement	","	1113:24:28856:28856	69042	8	True				
ANR	69091	Statement	itk	1113:26:28858:28860	69042	9	True				
ANR	69092	Statement	","	1113:29:28861:28861	69042	10	True				
ANR	69093	Statement	gk	1113:31:28863:28864	69042	11	True				
ANR	69094	Statement	","	1113:33:28865:28865	69042	12	True				
ANR	69095	Statement	ak	1113:35:28867:28868	69042	13	True				
ANR	69096	Statement	)	1113:37:28869:28869	69042	14	True				
ANR	69097	CompoundStatement		10:2:220:244	69042	15					
ANR	69098	IdentifierDeclStatement	const RGraphNode * sibling ;	1114:2:28875:28900	69042	0	True				
ANR	69099	IdentifierDecl	* sibling		69042	0					
ANR	69100	IdentifierDeclType	const RGraphNode *		69042	0					
ANR	69101	Identifier	sibling		69042	1					
ANR	69102	IdentifierDeclStatement	const RANode * sibl_anode ;	1115:2:28904:28928	69042	1	True				
ANR	69103	IdentifierDecl	* sibl_anode		69042	0					
ANR	69104	IdentifierDeclType	const RANode *		69042	0					
ANR	69105	Identifier	sibl_anode		69042	1					
ANR	69106	ExpressionStatement	"sibling = get_sibling ( g , ak , is_left , false )"	1117:2:28933:28978	69042	2	True				
ANR	69107	AssignmentExpression	"sibling = get_sibling ( g , ak , is_left , false )"		69042	0		=			
ANR	69108	Identifier	sibling		69042	0					
ANR	69109	CallExpression	"get_sibling ( g , ak , is_left , false )"		69042	1					
ANR	69110	Callee	get_sibling		69042	0					
ANR	69111	Identifier	get_sibling		69042	0					
ANR	69112	ArgumentList	g		69042	1					
ANR	69113	Argument	g		69042	0					
ANR	69114	Identifier	g		69042	0					
ANR	69115	Argument	ak		69042	1					
ANR	69116	Identifier	ak		69042	0					
ANR	69117	Argument	is_left		69042	2					
ANR	69118	Identifier	is_left		69042	0					
ANR	69119	Argument	false		69042	3					
ANR	69120	Identifier	false		69042	0					
ANR	69121	IfStatement	if ( ! sibling )		69042	3					
ANR	69122	Condition	! sibling	1118:6:28986:28993	69042	0	True				
ANR	69123	UnaryOperationExpression	! sibling		69042	0					
ANR	69124	UnaryOperator	!		69042	0					
ANR	69125	Identifier	sibling		69042	1					
ANR	69126	CompoundStatement		13:16:312:312	69042	1					
ANR	69127	ContinueStatement	continue ;	1119:3:29001:29009	69042	0	True				
ANR	69128	ExpressionStatement	sibl_anode = get_anode ( sibling )	1121:2:29017:29049	69042	4	True				
ANR	69129	AssignmentExpression	sibl_anode = get_anode ( sibling )		69042	0		=			
ANR	69130	Identifier	sibl_anode		69042	0					
ANR	69131	CallExpression	get_anode ( sibling )		69042	1					
ANR	69132	Callee	get_anode		69042	0					
ANR	69133	Identifier	get_anode		69042	0					
ANR	69134	ArgumentList	sibling		69042	1					
ANR	69135	Argument	sibling		69042	0					
ANR	69136	Identifier	sibling		69042	0					
ANR	69137	IfStatement	if ( ak -> klass == sibl_anode -> klass )		69042	5					
ANR	69138	Condition	ak -> klass == sibl_anode -> klass	1122:6:29057:29086	69042	0	True				
ANR	69139	EqualityExpression	ak -> klass == sibl_anode -> klass		69042	0		==			
ANR	69140	PtrMemberAccess	ak -> klass		69042	0					
ANR	69141	Identifier	ak		69042	0					
ANR	69142	Identifier	klass		69042	1					
ANR	69143	PtrMemberAccess	sibl_anode -> klass		69042	1					
ANR	69144	Identifier	sibl_anode		69042	0					
ANR	69145	Identifier	klass		69042	1					
ANR	69146	CompoundStatement		17:38:405:405	69042	1					
ANR	69147	IfStatement	"if ( ! hash_get ( placed , sibling ) )"		69042	0					
ANR	69148	Condition	"! hash_get ( placed , sibling )"	1123:7:29098:29124	69042	0	True				
ANR	69149	UnaryOperationExpression	"! hash_get ( placed , sibling )"		69042	0					
ANR	69150	UnaryOperator	!		69042	0					
ANR	69151	CallExpression	"hash_get ( placed , sibling )"		69042	1					
ANR	69152	Callee	hash_get		69042	0					
ANR	69153	Identifier	hash_get		69042	0					
ANR	69154	ArgumentList	placed		69042	1					
ANR	69155	Argument	placed		69042	0					
ANR	69156	Identifier	placed		69042	0					
ANR	69157	Argument	sibling		69042	1					
ANR	69158	Identifier	sibling		69042	0					
ANR	69159	CompoundStatement		18:36:443:443	69042	1					
ANR	69160	ExpressionStatement	"place_nodes ( g , sibling , is_left , v_nodes , classes , res , placed )"	1124:4:29133:29197	69042	0	True				
ANR	69161	CallExpression	"place_nodes ( g , sibling , is_left , v_nodes , classes , res , placed )"		69042	0					
ANR	69162	Callee	place_nodes		69042	0					
ANR	69163	Identifier	place_nodes		69042	0					
ANR	69164	ArgumentList	g		69042	1					
ANR	69165	Argument	g		69042	0					
ANR	69166	Identifier	g		69042	0					
ANR	69167	Argument	sibling		69042	1					
ANR	69168	Identifier	sibling		69042	0					
ANR	69169	Argument	is_left		69042	2					
ANR	69170	Identifier	is_left		69042	0					
ANR	69171	Argument	v_nodes		69042	3					
ANR	69172	Identifier	v_nodes		69042	0					
ANR	69173	Argument	classes		69042	4					
ANR	69174	Identifier	classes		69042	0					
ANR	69175	Argument	res		69042	5					
ANR	69176	Identifier	res		69042	0					
ANR	69177	Argument	placed		69042	6					
ANR	69178	Identifier	placed		69042	0					
ANR	69179	ExpressionStatement	"v = place_nodes_val ( g , gk , sibling , res , is_left )"	1127:3:29208:29258	69042	1	True				
ANR	69180	AssignmentExpression	"v = place_nodes_val ( g , gk , sibling , res , is_left )"		69042	0		=			
ANR	69181	Identifier	v		69042	0					
ANR	69182	CallExpression	"place_nodes_val ( g , gk , sibling , res , is_left )"		69042	1					
ANR	69183	Callee	place_nodes_val		69042	0					
ANR	69184	Identifier	place_nodes_val		69042	0					
ANR	69185	ArgumentList	g		69042	1					
ANR	69186	Argument	g		69042	0					
ANR	69187	Identifier	g		69042	0					
ANR	69188	Argument	gk		69042	1					
ANR	69189	Identifier	gk		69042	0					
ANR	69190	Argument	sibling		69042	2					
ANR	69191	Identifier	sibling		69042	0					
ANR	69192	Argument	res		69042	3					
ANR	69193	Identifier	res		69042	0					
ANR	69194	Argument	is_left		69042	4					
ANR	69195	Identifier	is_left		69042	0					
ANR	69196	ExpressionStatement	"p = place_nodes_sel_p ( v , p , is_first , is_left )"	1128:3:29263:29310	69042	2	True				
ANR	69197	AssignmentExpression	"p = place_nodes_sel_p ( v , p , is_first , is_left )"		69042	0		=			
ANR	69198	Identifier	p		69042	0					
ANR	69199	CallExpression	"place_nodes_sel_p ( v , p , is_first , is_left )"		69042	1					
ANR	69200	Callee	place_nodes_sel_p		69042	0					
ANR	69201	Identifier	place_nodes_sel_p		69042	0					
ANR	69202	ArgumentList	v		69042	1					
ANR	69203	Argument	v		69042	0					
ANR	69204	Identifier	v		69042	0					
ANR	69205	Argument	p		69042	1					
ANR	69206	Identifier	p		69042	0					
ANR	69207	Argument	is_first		69042	2					
ANR	69208	Identifier	is_first		69042	0					
ANR	69209	Argument	is_left		69042	3					
ANR	69210	Identifier	is_left		69042	0					
ANR	69211	ExpressionStatement	is_first = false	1129:3:29315:29331	69042	3	True				
ANR	69212	AssignmentExpression	is_first = false		69042	0		=			
ANR	69213	Identifier	is_first		69042	0					
ANR	69214	Identifier	false		69042	1					
ANR	69215	IfStatement	if ( is_first )		69042	16					
ANR	69216	Condition	is_first	1133:5:29346:29353	69042	0	True				
ANR	69217	Identifier	is_first		69042	0					
ANR	69218	CompoundStatement		28:15:672:672	69042	1					
ANR	69219	ExpressionStatement	p = is_left ? 0 : 50	1134:2:29360:29378	69042	0	True				
ANR	69220	AssignmentExpression	p = is_left ? 0 : 50		69042	0		=			
ANR	69221	Identifier	p		69042	0					
ANR	69222	ConditionalExpression	is_left ? 0 : 50		69042	1					
ANR	69223	Condition	is_left		69042	0					
ANR	69224	Identifier	is_left		69042	0					
ANR	69225	PrimaryExpression	0		69042	1					
ANR	69226	PrimaryExpression	50		69042	2					
ANR	69227	Statement	graph_foreach_anode	1137:1:29385:29403	69042	17	True				
ANR	69228	Statement	(	1137:21:29405:29405	69042	18	True				
ANR	69229	Statement	lv	1137:22:29406:29407	69042	19	True				
ANR	69230	Statement	","	1137:24:29408:29408	69042	20	True				
ANR	69231	Statement	itk	1137:26:29410:29412	69042	21	True				
ANR	69232	Statement	","	1137:29:29413:29413	69042	22	True				
ANR	69233	Statement	gk	1137:31:29415:29416	69042	23	True				
ANR	69234	Statement	","	1137:33:29417:29417	69042	24	True				
ANR	69235	Statement	ak	1137:35:29419:29420	69042	25	True				
ANR	69236	Statement	)	1137:37:29421:29421	69042	26	True				
ANR	69237	CompoundStatement		32:39:739:739	69042	27					
ANR	69238	ExpressionStatement	"hash_set ( res , gk , p )"	1138:2:29427:29448	69042	0	True				
ANR	69239	CallExpression	"hash_set ( res , gk , p )"		69042	0					
ANR	69240	Callee	hash_set		69042	0					
ANR	69241	Identifier	hash_set		69042	0					
ANR	69242	ArgumentList	res		69042	1					
ANR	69243	Argument	res		69042	0					
ANR	69244	Identifier	res		69042	0					
ANR	69245	Argument	gk		69042	1					
ANR	69246	Identifier	gk		69042	0					
ANR	69247	Argument	p		69042	2					
ANR	69248	Identifier	p		69042	0					
ANR	69249	ExpressionStatement	"hash_set ( placed , gk , true )"	1139:2:29452:29479	69042	1	True				
ANR	69250	CallExpression	"hash_set ( placed , gk , true )"		69042	0					
ANR	69251	Callee	hash_set		69042	0					
ANR	69252	Identifier	hash_set		69042	0					
ANR	69253	ArgumentList	placed		69042	1					
ANR	69254	Argument	placed		69042	0					
ANR	69255	Identifier	placed		69042	0					
ANR	69256	Argument	gk		69042	1					
ANR	69257	Identifier	gk		69042	0					
ANR	69258	Argument	true		69042	2					
ANR	69259	Identifier	true		69042	0					
ANR	69260	ReturnType	static void		69042	1					
ANR	69261	Identifier	place_nodes		69042	2					
ANR	69262	ParameterList	"const RAGraph * g , const RGraphNode * gn , int is_left , Sdb * v_nodes , RList * * classes , Sdb * res , Sdb * placed"		69042	3					
ANR	69263	Parameter	const RAGraph * g	1106:24:28576:28591	69042	0	True				
ANR	69264	ParameterType	const RAGraph *		69042	0					
ANR	69265	Identifier	g		69042	1					
ANR	69266	Parameter	const RGraphNode * gn	1106:42:28594:28613	69042	1	True				
ANR	69267	ParameterType	const RGraphNode *		69042	0					
ANR	69268	Identifier	gn		69042	1					
ANR	69269	Parameter	int is_left	1106:64:28616:28626	69042	2	True				
ANR	69270	ParameterType	int		69042	0					
ANR	69271	Identifier	is_left		69042	1					
ANR	69272	Parameter	Sdb * v_nodes	1106:77:28629:28640	69042	3	True				
ANR	69273	ParameterType	Sdb *		69042	0					
ANR	69274	Identifier	v_nodes		69042	1					
ANR	69275	Parameter	RList * * classes	1106:91:28643:28657	69042	4	True				
ANR	69276	ParameterType	RList * *		69042	0					
ANR	69277	Identifier	classes		69042	1					
ANR	69278	Parameter	Sdb * res	1106:108:28660:28667	69042	5	True				
ANR	69279	ParameterType	Sdb *		69042	0					
ANR	69280	Identifier	res		69042	1					
ANR	69281	Parameter	Sdb * placed	1106:118:28670:28680	69042	6	True				
ANR	69282	ParameterType	Sdb *		69042	0					
ANR	69283	Identifier	placed		69042	1					
ANR	69284	CFGEntryNode	ENTRY		69042		True				
ANR	69285	CFGExitNode	EXIT		69042		True				
ANR	69286	CFGErrorNode	ERROR		69042		True				
ANR	69287	Symbol	placed		69042						
ANR	69288	Symbol	classes		69042						
ANR	69289	Symbol	hash_get_rlist		69042						
ANR	69290	Symbol	lv		69042						
ANR	69291	Symbol	sibl_anode		69042						
ANR	69292	Symbol	v_nodes		69042						
ANR	69293	Symbol	get_sibling		69042						
ANR	69294	Symbol	place_nodes_sel_p		69042						
ANR	69295	Symbol	res		69042						
ANR	69296	Symbol	itk		69042						
ANR	69297	Symbol	get_anode		69042						
ANR	69298	Symbol	is_left		69042						
ANR	69299	Symbol	gk		69042						
ANR	69300	Symbol	g		69042						
ANR	69301	Symbol	gn		69042						
ANR	69302	Symbol	is_first		69042						
ANR	69303	Symbol	false		69042						
ANR	69304	Symbol	ak		69042						
ANR	69305	Symbol	place_nodes_val		69042						
ANR	69306	Symbol	p		69042						
ANR	69307	Symbol	sibl_anode -> klass		69042						
ANR	69308	Symbol	sibling		69042						
ANR	69309	Symbol	* ak		69042						
ANR	69310	Symbol	v		69042						
ANR	69311	Symbol	ak -> klass		69042						
ANR	69312	Symbol	true		69042						
ANR	69313	Symbol	* sibl_anode		69042						
ANR	69314	Symbol	hash_get		69042						
ANR	69315	Function	compute_pos	1144:0:29550:30228							
ANR	69316	FunctionDef	"compute_pos (const RAGraph * g , int is_left , Sdb * v_nodes)"		69315	0					
ANR	69317	CompoundStatement		1144:69:29619:30228	69315	0					
ANR	69318	IdentifierDeclStatement	"int n_classes , i ;"	1145:1:29622:29638	69315	0	True				
ANR	69319	IdentifierDecl	n_classes		69315	0					
ANR	69320	IdentifierDeclType	int		69315	0					
ANR	69321	Identifier	n_classes		69315	1					
ANR	69322	IdentifierDecl	i		69315	1					
ANR	69323	IdentifierDeclType	int		69315	0					
ANR	69324	Identifier	i		69315	1					
ANR	69325	IdentifierDeclStatement	"RList * * classes = compute_classes ( g , v_nodes , is_left , & n_classes ) ;"	1147:1:29642:29709	69315	1	True				
ANR	69326	IdentifierDecl	"* * classes = compute_classes ( g , v_nodes , is_left , & n_classes )"		69315	0					
ANR	69327	IdentifierDeclType	RList * *		69315	0					
ANR	69328	Identifier	classes		69315	1					
ANR	69329	AssignmentExpression	"* * classes = compute_classes ( g , v_nodes , is_left , & n_classes )"		69315	2		=			
ANR	69330	Identifier	classes		69315	0					
ANR	69331	CallExpression	"compute_classes ( g , v_nodes , is_left , & n_classes )"		69315	1					
ANR	69332	Callee	compute_classes		69315	0					
ANR	69333	Identifier	compute_classes		69315	0					
ANR	69334	ArgumentList	g		69315	1					
ANR	69335	Argument	g		69315	0					
ANR	69336	Identifier	g		69315	0					
ANR	69337	Argument	v_nodes		69315	1					
ANR	69338	Identifier	v_nodes		69315	0					
ANR	69339	Argument	is_left		69315	2					
ANR	69340	Identifier	is_left		69315	0					
ANR	69341	Argument	& n_classes		69315	3					
ANR	69342	UnaryOperationExpression	& n_classes		69315	0					
ANR	69343	UnaryOperator	&		69315	0					
ANR	69344	Identifier	n_classes		69315	1					
ANR	69345	IfStatement	if ( ! classes )		69315	2					
ANR	69346	Condition	! classes	1148:5:29716:29723	69315	0	True				
ANR	69347	UnaryOperationExpression	! classes		69315	0					
ANR	69348	UnaryOperator	!		69315	0					
ANR	69349	Identifier	classes		69315	1					
ANR	69350	CompoundStatement		5:15:106:106	69315	1					
ANR	69351	ReturnStatement	return NULL ;	1149:2:29730:29741	69315	0	True				
ANR	69352	Identifier	NULL		69315	0					
ANR	69353	IdentifierDeclStatement	Sdb * res = sdb_new0 ( ) ;	1152:1:29748:29770	69315	3	True				
ANR	69354	IdentifierDecl	* res = sdb_new0 ( )		69315	0					
ANR	69355	IdentifierDeclType	Sdb *		69315	0					
ANR	69356	Identifier	res		69315	1					
ANR	69357	AssignmentExpression	* res = sdb_new0 ( )		69315	2		=			
ANR	69358	Identifier	res		69315	0					
ANR	69359	CallExpression	sdb_new0 ( )		69315	1					
ANR	69360	Callee	sdb_new0		69315	0					
ANR	69361	Identifier	sdb_new0		69315	0					
ANR	69362	ArgumentList			69315	1					
ANR	69363	IdentifierDeclStatement	Sdb * placed = sdb_new0 ( ) ;	1153:1:29773:29798	69315	4	True				
ANR	69364	IdentifierDecl	* placed = sdb_new0 ( )		69315	0					
ANR	69365	IdentifierDeclType	Sdb *		69315	0					
ANR	69366	Identifier	placed		69315	1					
ANR	69367	AssignmentExpression	* placed = sdb_new0 ( )		69315	2		=			
ANR	69368	Identifier	placed		69315	0					
ANR	69369	CallExpression	sdb_new0 ( )		69315	1					
ANR	69370	Callee	sdb_new0		69315	0					
ANR	69371	Identifier	sdb_new0		69315	0					
ANR	69372	ArgumentList			69315	1					
ANR	69373	ForStatement	for ( i = 0 ; i < n_classes ; ++ i )		69315	5					
ANR	69374	ForInit	i = 0 ;	1154:6:29806:29811	69315	0	True				
ANR	69375	AssignmentExpression	i = 0		69315	0		=			
ANR	69376	Identifier	i		69315	0					
ANR	69377	PrimaryExpression	0		69315	1					
ANR	69378	Condition	i < n_classes	1154:13:29813:29825	69315	1	True				
ANR	69379	RelationalExpression	i < n_classes		69315	0		<			
ANR	69380	Identifier	i		69315	0					
ANR	69381	Identifier	n_classes		69315	1					
ANR	69382	UnaryExpression	++ i	1154:28:29828:29830	69315	2	True				
ANR	69383	IncDec	++		69315	0					
ANR	69384	Identifier	i		69315	1					
ANR	69385	CompoundStatement		13:2:241:260	69315	3					
ANR	69386	IdentifierDeclStatement	const RGraphNode * gn ;	1155:2:29837:29857	69315	0	True				
ANR	69387	IdentifierDecl	* gn		69315	0					
ANR	69388	IdentifierDeclType	const RGraphNode *		69315	0					
ANR	69389	Identifier	gn		69315	1					
ANR	69390	IdentifierDeclStatement	const RListIter * it ;	1156:2:29861:29880	69315	1	True				
ANR	69391	IdentifierDecl	* it		69315	0					
ANR	69392	IdentifierDeclType	const RListIter *		69315	0					
ANR	69393	Identifier	it		69315	1					
ANR	69394	Statement	r_list_foreach	1158:2:29885:29898	69315	2	True				
ANR	69395	Statement	(	1158:17:29900:29900	69315	3	True				
ANR	69396	Statement	classes	1158:18:29901:29907	69315	4	True				
ANR	69397	Statement	[	1158:25:29908:29908	69315	5	True				
ANR	69398	Statement	i	1158:26:29909:29909	69315	6	True				
ANR	69399	Statement	]	1158:27:29910:29910	69315	7	True				
ANR	69400	Statement	","	1158:28:29911:29911	69315	8	True				
ANR	69401	Statement	it	1158:30:29913:29914	69315	9	True				
ANR	69402	Statement	","	1158:32:29915:29915	69315	10	True				
ANR	69403	Statement	gn	1158:34:29917:29918	69315	11	True				
ANR	69404	Statement	)	1158:36:29919:29919	69315	12	True				
ANR	69405	CompoundStatement		15:38:301:301	69315	13					
ANR	69406	IfStatement	"if ( ! hash_get_rnode ( placed , gn ) )"		69315	0					
ANR	69407	Condition	"! hash_get_rnode ( placed , gn )"	1159:7:29930:29957	69315	0	True				
ANR	69408	UnaryOperationExpression	"! hash_get_rnode ( placed , gn )"		69315	0					
ANR	69409	UnaryOperator	!		69315	0					
ANR	69410	CallExpression	"hash_get_rnode ( placed , gn )"		69315	1					
ANR	69411	Callee	hash_get_rnode		69315	0					
ANR	69412	Identifier	hash_get_rnode		69315	0					
ANR	69413	ArgumentList	placed		69315	1					
ANR	69414	Argument	placed		69315	0					
ANR	69415	Identifier	placed		69315	0					
ANR	69416	Argument	gn		69315	1					
ANR	69417	Identifier	gn		69315	0					
ANR	69418	CompoundStatement		16:37:340:340	69315	1					
ANR	69419	ExpressionStatement	"place_nodes ( g , gn , is_left , v_nodes , classes , res , placed )"	1160:4:29966:30025	69315	0	True				
ANR	69420	CallExpression	"place_nodes ( g , gn , is_left , v_nodes , classes , res , placed )"		69315	0					
ANR	69421	Callee	place_nodes		69315	0					
ANR	69422	Identifier	place_nodes		69315	0					
ANR	69423	ArgumentList	g		69315	1					
ANR	69424	Argument	g		69315	0					
ANR	69425	Identifier	g		69315	0					
ANR	69426	Argument	gn		69315	1					
ANR	69427	Identifier	gn		69315	0					
ANR	69428	Argument	is_left		69315	2					
ANR	69429	Identifier	is_left		69315	0					
ANR	69430	Argument	v_nodes		69315	3					
ANR	69431	Identifier	v_nodes		69315	0					
ANR	69432	Argument	classes		69315	4					
ANR	69433	Identifier	classes		69315	0					
ANR	69434	Argument	res		69315	5					
ANR	69435	Identifier	res		69315	0					
ANR	69436	Argument	placed		69315	6					
ANR	69437	Identifier	placed		69315	0					
ANR	69438	ExpressionStatement	"adjust_class ( g , is_left , classes , res , i )"	1164:2:30039:30081	69315	14	True				
ANR	69439	CallExpression	"adjust_class ( g , is_left , classes , res , i )"		69315	0					
ANR	69440	Callee	adjust_class		69315	0					
ANR	69441	Identifier	adjust_class		69315	0					
ANR	69442	ArgumentList	g		69315	1					
ANR	69443	Argument	g		69315	0					
ANR	69444	Identifier	g		69315	0					
ANR	69445	Argument	is_left		69315	1					
ANR	69446	Identifier	is_left		69315	0					
ANR	69447	Argument	classes		69315	2					
ANR	69448	Identifier	classes		69315	0					
ANR	69449	Argument	res		69315	3					
ANR	69450	Identifier	res		69315	0					
ANR	69451	Argument	i		69315	4					
ANR	69452	Identifier	i		69315	0					
ANR	69453	ExpressionStatement	sdb_free ( placed )	1167:1:30088:30105	69315	6	True				
ANR	69454	CallExpression	sdb_free ( placed )		69315	0					
ANR	69455	Callee	sdb_free		69315	0					
ANR	69456	Identifier	sdb_free		69315	0					
ANR	69457	ArgumentList	placed		69315	1					
ANR	69458	Argument	placed		69315	0					
ANR	69459	Identifier	placed		69315	0					
ANR	69460	ForStatement	for ( i = 0 ; i < n_classes ; ++ i )		69315	7					
ANR	69461	ForInit	i = 0 ;	1168:6:30113:30118	69315	0	True				
ANR	69462	AssignmentExpression	i = 0		69315	0		=			
ANR	69463	Identifier	i		69315	0					
ANR	69464	PrimaryExpression	0		69315	1					
ANR	69465	Condition	i < n_classes	1168:13:30120:30132	69315	1	True				
ANR	69466	RelationalExpression	i < n_classes		69315	0		<			
ANR	69467	Identifier	i		69315	0					
ANR	69468	Identifier	n_classes		69315	1					
ANR	69469	UnaryExpression	++ i	1168:28:30135:30137	69315	2	True				
ANR	69470	IncDec	++		69315	0					
ANR	69471	Identifier	i		69315	1					
ANR	69472	CompoundStatement		25:33:520:520	69315	3					
ANR	69473	IfStatement	if ( classes [ i ] )		69315	0					
ANR	69474	Condition	classes [ i ]	1169:6:30148:30157	69315	0	True				
ANR	69475	ArrayIndexing	classes [ i ]		69315	0					
ANR	69476	Identifier	classes		69315	0					
ANR	69477	Identifier	i		69315	1					
ANR	69478	CompoundStatement		26:18:540:540	69315	1					
ANR	69479	ExpressionStatement	r_list_free ( classes [ i ] )	1170:3:30165:30189	69315	0	True				
ANR	69480	CallExpression	r_list_free ( classes [ i ] )		69315	0					
ANR	69481	Callee	r_list_free		69315	0					
ANR	69482	Identifier	r_list_free		69315	0					
ANR	69483	ArgumentList	classes [ i ]		69315	1					
ANR	69484	Argument	classes [ i ]		69315	0					
ANR	69485	ArrayIndexing	classes [ i ]		69315	0					
ANR	69486	Identifier	classes		69315	0					
ANR	69487	Identifier	i		69315	1					
ANR	69488	ExpressionStatement	free ( classes )	1173:1:30199:30213	69315	8	True				
ANR	69489	CallExpression	free ( classes )		69315	0					
ANR	69490	Callee	free		69315	0					
ANR	69491	Identifier	free		69315	0					
ANR	69492	ArgumentList	classes		69315	1					
ANR	69493	Argument	classes		69315	0					
ANR	69494	Identifier	classes		69315	0					
ANR	69495	ReturnStatement	return res ;	1174:1:30216:30226	69315	9	True				
ANR	69496	Identifier	res		69315	0					
ANR	69497	ReturnType	static Sdb *		69315	1					
ANR	69498	Identifier	compute_pos		69315	2					
ANR	69499	ParameterList	"const RAGraph * g , int is_left , Sdb * v_nodes"		69315	3					
ANR	69500	Parameter	const RAGraph * g	1144:24:29574:29589	69315	0	True				
ANR	69501	ParameterType	const RAGraph *		69315	0					
ANR	69502	Identifier	g		69315	1					
ANR	69503	Parameter	int is_left	1144:42:29592:29602	69315	1	True				
ANR	69504	ParameterType	int		69315	0					
ANR	69505	Identifier	is_left		69315	1					
ANR	69506	Parameter	Sdb * v_nodes	1144:55:29605:29616	69315	2	True				
ANR	69507	ParameterType	Sdb *		69315	0					
ANR	69508	Identifier	v_nodes		69315	1					
ANR	69509	CFGEntryNode	ENTRY		69315		True				
ANR	69510	CFGExitNode	EXIT		69315		True				
ANR	69511	Symbol	res		69315						
ANR	69512	Symbol	sdb_new0		69315						
ANR	69513	Symbol	& n_classes		69315						
ANR	69514	Symbol	NULL		69315						
ANR	69515	Symbol	placed		69315						
ANR	69516	Symbol	is_left		69315						
ANR	69517	Symbol	hash_get_rnode		69315						
ANR	69518	Symbol	g		69315						
ANR	69519	Symbol	classes		69315						
ANR	69520	Symbol	gn		69315						
ANR	69521	Symbol	i		69315						
ANR	69522	Symbol	it		69315						
ANR	69523	Symbol	n_classes		69315						
ANR	69524	Symbol	* classes		69315						
ANR	69525	Symbol	* i		69315						
ANR	69526	Symbol	v_nodes		69315						
ANR	69527	Symbol	compute_classes		69315						
ANR	69528	Function	place_dummies	1185:0:30615:31336							
ANR	69529	FunctionDef	place_dummies (const RAGraph * g)		69528	0					
ANR	69530	CompoundStatement		1185:44:30659:31336	69528	0					
ANR	69531	IdentifierDeclStatement	const RList * nodes ;	1186:1:30662:30680	69528	0	True				
ANR	69532	IdentifierDecl	* nodes		69528	0					
ANR	69533	IdentifierDeclType	const RList *		69528	0					
ANR	69534	Identifier	nodes		69528	1					
ANR	69535	IdentifierDeclStatement	const RGraphNode * gn ;	1187:1:30683:30703	69528	1	True				
ANR	69536	IdentifierDecl	* gn		69528	0					
ANR	69537	IdentifierDeclType	const RGraphNode *		69528	0					
ANR	69538	Identifier	gn		69528	1					
ANR	69539	IdentifierDeclStatement	const RListIter * it ;	1188:1:30706:30725	69528	2	True				
ANR	69540	IdentifierDecl	* it		69528	0					
ANR	69541	IdentifierDeclType	const RListIter *		69528	0					
ANR	69542	Identifier	it		69528	1					
ANR	69543	IdentifierDeclStatement	RANode * n ;	1189:1:30728:30737	69528	3	True				
ANR	69544	IdentifierDecl	* n		69528	0					
ANR	69545	IdentifierDeclType	RANode *		69528	0					
ANR	69546	Identifier	n		69528	1					
ANR	69547	IdentifierDeclStatement	Sdb * vertical_nodes = compute_vertical_nodes ( g ) ;	1191:1:30741:30789	69528	4	True				
ANR	69548	IdentifierDecl	* vertical_nodes = compute_vertical_nodes ( g )		69528	0					
ANR	69549	IdentifierDeclType	Sdb *		69528	0					
ANR	69550	Identifier	vertical_nodes		69528	1					
ANR	69551	AssignmentExpression	* vertical_nodes = compute_vertical_nodes ( g )		69528	2		=			
ANR	69552	Identifier	vertical_nodes		69528	0					
ANR	69553	CallExpression	compute_vertical_nodes ( g )		69528	1					
ANR	69554	Callee	compute_vertical_nodes		69528	0					
ANR	69555	Identifier	compute_vertical_nodes		69528	0					
ANR	69556	ArgumentList	g		69528	1					
ANR	69557	Argument	g		69528	0					
ANR	69558	Identifier	g		69528	0					
ANR	69559	IfStatement	if ( ! vertical_nodes )		69528	5					
ANR	69560	Condition	! vertical_nodes	1192:5:30796:30810	69528	0	True				
ANR	69561	UnaryOperationExpression	! vertical_nodes		69528	0					
ANR	69562	UnaryOperator	!		69528	0					
ANR	69563	Identifier	vertical_nodes		69528	1					
ANR	69564	CompoundStatement		8:22:153:153	69528	1					
ANR	69565	ReturnStatement	return ;	1193:2:30817:30823	69528	0	True				
ANR	69566	IdentifierDeclStatement	"Sdb * xminus = compute_pos ( g , true , vertical_nodes ) ;"	1195:1:30829:30880	69528	6	True				
ANR	69567	IdentifierDecl	"* xminus = compute_pos ( g , true , vertical_nodes )"		69528	0					
ANR	69568	IdentifierDeclType	Sdb *		69528	0					
ANR	69569	Identifier	xminus		69528	1					
ANR	69570	AssignmentExpression	"* xminus = compute_pos ( g , true , vertical_nodes )"		69528	2		=			
ANR	69571	Identifier	xminus		69528	0					
ANR	69572	CallExpression	"compute_pos ( g , true , vertical_nodes )"		69528	1					
ANR	69573	Callee	compute_pos		69528	0					
ANR	69574	Identifier	compute_pos		69528	0					
ANR	69575	ArgumentList	g		69528	1					
ANR	69576	Argument	g		69528	0					
ANR	69577	Identifier	g		69528	0					
ANR	69578	Argument	true		69528	1					
ANR	69579	Identifier	true		69528	0					
ANR	69580	Argument	vertical_nodes		69528	2					
ANR	69581	Identifier	vertical_nodes		69528	0					
ANR	69582	IfStatement	if ( ! xminus )		69528	7					
ANR	69583	Condition	! xminus	1196:5:30887:30893	69528	0	True				
ANR	69584	UnaryOperationExpression	! xminus		69528	0					
ANR	69585	UnaryOperator	!		69528	0					
ANR	69586	Identifier	xminus		69528	1					
ANR	69587	CompoundStatement		12:14:236:236	69528	1					
ANR	69588	GotoStatement	goto xminus_err ;	1197:2:30900:30915	69528	0	True				
ANR	69589	Identifier	xminus_err		69528	0					
ANR	69590	IdentifierDeclStatement	"Sdb * xplus = compute_pos ( g , false , vertical_nodes ) ;"	1199:1:30921:30972	69528	8	True				
ANR	69591	IdentifierDecl	"* xplus = compute_pos ( g , false , vertical_nodes )"		69528	0					
ANR	69592	IdentifierDeclType	Sdb *		69528	0					
ANR	69593	Identifier	xplus		69528	1					
ANR	69594	AssignmentExpression	"* xplus = compute_pos ( g , false , vertical_nodes )"		69528	2		=			
ANR	69595	Identifier	xplus		69528	0					
ANR	69596	CallExpression	"compute_pos ( g , false , vertical_nodes )"		69528	1					
ANR	69597	Callee	compute_pos		69528	0					
ANR	69598	Identifier	compute_pos		69528	0					
ANR	69599	ArgumentList	g		69528	1					
ANR	69600	Argument	g		69528	0					
ANR	69601	Identifier	g		69528	0					
ANR	69602	Argument	false		69528	1					
ANR	69603	Identifier	false		69528	0					
ANR	69604	Argument	vertical_nodes		69528	2					
ANR	69605	Identifier	vertical_nodes		69528	0					
ANR	69606	IfStatement	if ( ! xplus )		69528	9					
ANR	69607	Condition	! xplus	1200:5:30979:30984	69528	0	True				
ANR	69608	UnaryOperationExpression	! xplus		69528	0					
ANR	69609	UnaryOperator	!		69528	0					
ANR	69610	Identifier	xplus		69528	1					
ANR	69611	CompoundStatement		16:13:327:327	69528	1					
ANR	69612	GotoStatement	goto xplus_err ;	1201:2:30991:31005	69528	0	True				
ANR	69613	Identifier	xplus_err		69528	0					
ANR	69614	ExpressionStatement	nodes = r_graph_get_nodes ( g -> graph )	1204:1:31012:31048	69528	10	True				
ANR	69615	AssignmentExpression	nodes = r_graph_get_nodes ( g -> graph )		69528	0		=			
ANR	69616	Identifier	nodes		69528	0					
ANR	69617	CallExpression	r_graph_get_nodes ( g -> graph )		69528	1					
ANR	69618	Callee	r_graph_get_nodes		69528	0					
ANR	69619	Identifier	r_graph_get_nodes		69528	0					
ANR	69620	ArgumentList	g -> graph		69528	1					
ANR	69621	Argument	g -> graph		69528	0					
ANR	69622	PtrMemberAccess	g -> graph		69528	0					
ANR	69623	Identifier	g		69528	0					
ANR	69624	Identifier	graph		69528	1					
ANR	69625	Statement	graph_foreach_anode	1205:1:31051:31069	69528	11	True				
ANR	69626	Statement	(	1205:21:31071:31071	69528	12	True				
ANR	69627	Statement	nodes	1205:22:31072:31076	69528	13	True				
ANR	69628	Statement	","	1205:27:31077:31077	69528	14	True				
ANR	69629	Statement	it	1205:29:31079:31080	69528	15	True				
ANR	69630	Statement	","	1205:31:31081:31081	69528	16	True				
ANR	69631	Statement	gn	1205:33:31083:31084	69528	17	True				
ANR	69632	Statement	","	1205:35:31085:31085	69528	18	True				
ANR	69633	Statement	n	1205:37:31087:31087	69528	19	True				
ANR	69634	Statement	)	1205:38:31088:31088	69528	20	True				
ANR	69635	CompoundStatement		21:40:430:430	69528	21					
ANR	69636	ExpressionStatement	"n -> x = ( hash_get_int ( xminus , gn ) + hash_get_int ( xplus , gn ) ) / 2"	1206:2:31094:31159	69528	0	True				
ANR	69637	AssignmentExpression	"n -> x = ( hash_get_int ( xminus , gn ) + hash_get_int ( xplus , gn ) ) / 2"		69528	0		=			
ANR	69638	PtrMemberAccess	n -> x		69528	0					
ANR	69639	Identifier	n		69528	0					
ANR	69640	Identifier	x		69528	1					
ANR	69641	MultiplicativeExpression	"( hash_get_int ( xminus , gn ) + hash_get_int ( xplus , gn ) ) / 2"		69528	1		/			
ANR	69642	AdditiveExpression	"hash_get_int ( xminus , gn ) + hash_get_int ( xplus , gn )"		69528	0		+			
ANR	69643	CallExpression	"hash_get_int ( xminus , gn )"		69528	0					
ANR	69644	Callee	hash_get_int		69528	0					
ANR	69645	Identifier	hash_get_int		69528	0					
ANR	69646	ArgumentList	xminus		69528	1					
ANR	69647	Argument	xminus		69528	0					
ANR	69648	Identifier	xminus		69528	0					
ANR	69649	Argument	gn		69528	1					
ANR	69650	Identifier	gn		69528	0					
ANR	69651	CallExpression	"hash_get_int ( xplus , gn )"		69528	1					
ANR	69652	Callee	hash_get_int		69528	0					
ANR	69653	Identifier	hash_get_int		69528	0					
ANR	69654	ArgumentList	xplus		69528	1					
ANR	69655	Argument	xplus		69528	0					
ANR	69656	Identifier	xplus		69528	0					
ANR	69657	Argument	gn		69528	1					
ANR	69658	Identifier	gn		69528	0					
ANR	69659	PrimaryExpression	2		69528	1					
ANR	69660	ExpressionStatement	sdb_free ( xplus )	1209:1:31166:31182	69528	22	True				
ANR	69661	CallExpression	sdb_free ( xplus )		69528	0					
ANR	69662	Callee	sdb_free		69528	0					
ANR	69663	Identifier	sdb_free		69528	0					
ANR	69664	ArgumentList	xplus		69528	1					
ANR	69665	Argument	xplus		69528	0					
ANR	69666	Identifier	xplus		69528	0					
ANR	69667	Label	xplus_err :	1210:0:31184:31193	69528	23	True				
ANR	69668	Identifier	xplus_err		69528	0					
ANR	69669	ExpressionStatement	sdb_free ( xminus )	1211:1:31196:31213	69528	24	True				
ANR	69670	CallExpression	sdb_free ( xminus )		69528	0					
ANR	69671	Callee	sdb_free		69528	0					
ANR	69672	Identifier	sdb_free		69528	0					
ANR	69673	ArgumentList	xminus		69528	1					
ANR	69674	Argument	xminus		69528	0					
ANR	69675	Identifier	xminus		69528	0					
ANR	69676	Label	xminus_err :	1212:0:31215:31225	69528	25	True				
ANR	69677	Identifier	xminus_err		69528	0					
ANR	69678	ExpressionStatement	"sdb_foreach ( vertical_nodes , ( SdbForeachCallback ) free_vertical_nodes_cb , NULL )"	1213:1:31228:31306	69528	26	True				
ANR	69679	CallExpression	"sdb_foreach ( vertical_nodes , ( SdbForeachCallback ) free_vertical_nodes_cb , NULL )"		69528	0					
ANR	69680	Callee	sdb_foreach		69528	0					
ANR	69681	Identifier	sdb_foreach		69528	0					
ANR	69682	ArgumentList	vertical_nodes		69528	1					
ANR	69683	Argument	vertical_nodes		69528	0					
ANR	69684	Identifier	vertical_nodes		69528	0					
ANR	69685	Argument	( SdbForeachCallback ) free_vertical_nodes_cb		69528	1					
ANR	69686	CastExpression	( SdbForeachCallback ) free_vertical_nodes_cb		69528	0					
ANR	69687	CastTarget	SdbForeachCallback		69528	0					
ANR	69688	Identifier	free_vertical_nodes_cb		69528	1					
ANR	69689	Argument	NULL		69528	2					
ANR	69690	Identifier	NULL		69528	0					
ANR	69691	ExpressionStatement	sdb_free ( vertical_nodes )	1214:1:31309:31334	69528	27	True				
ANR	69692	CallExpression	sdb_free ( vertical_nodes )		69528	0					
ANR	69693	Callee	sdb_free		69528	0					
ANR	69694	Identifier	sdb_free		69528	0					
ANR	69695	ArgumentList	vertical_nodes		69528	1					
ANR	69696	Argument	vertical_nodes		69528	0					
ANR	69697	Identifier	vertical_nodes		69528	0					
ANR	69698	ReturnType	static void		69528	1					
ANR	69699	Identifier	place_dummies		69528	2					
ANR	69700	ParameterList	const RAGraph * g		69528	3					
ANR	69701	Parameter	const RAGraph * g	1185:26:30641:30656	69528	0	True				
ANR	69702	ParameterType	const RAGraph *		69528	0					
ANR	69703	Identifier	g		69528	1					
ANR	69704	CFGEntryNode	ENTRY		69528		True				
ANR	69705	CFGExitNode	EXIT		69528		True				
ANR	69706	Symbol	r_graph_get_nodes		69528						
ANR	69707	Symbol	free_vertical_nodes_cb		69528						
ANR	69708	Symbol	NULL		69528						
ANR	69709	Symbol	g		69528						
ANR	69710	Symbol	gn		69528						
ANR	69711	Symbol	false		69528						
ANR	69712	Symbol	it		69528						
ANR	69713	Symbol	hash_get_int		69528						
ANR	69714	Symbol	n		69528						
ANR	69715	Symbol	xminus		69528						
ANR	69716	Symbol	* g		69528						
ANR	69717	Symbol	nodes		69528						
ANR	69718	Symbol	g -> graph		69528						
ANR	69719	Symbol	n -> x		69528						
ANR	69720	Symbol	vertical_nodes		69528						
ANR	69721	Symbol	true		69528						
ANR	69722	Symbol	* n		69528						
ANR	69723	Symbol	compute_vertical_nodes		69528						
ANR	69724	Symbol	compute_pos		69528						
ANR	69725	Symbol	xplus		69528						
ANR	69726	Function	get_right_dummy	1217:0:31339:31745							
ANR	69727	FunctionDef	"get_right_dummy (const RAGraph * g , const RGraphNode * n)"		69726	0					
ANR	69728	CompoundStatement		1217:74:31413:31745	69726	0					
ANR	69729	IdentifierDeclStatement	const RANode * an = get_anode ( n ) ;	1218:1:31416:31448	69726	0	True				
ANR	69730	IdentifierDecl	* an = get_anode ( n )		69726	0					
ANR	69731	IdentifierDeclType	const RANode *		69726	0					
ANR	69732	Identifier	an		69726	1					
ANR	69733	AssignmentExpression	* an = get_anode ( n )		69726	2		=			
ANR	69734	Identifier	an		69726	0					
ANR	69735	CallExpression	get_anode ( n )		69726	1					
ANR	69736	Callee	get_anode		69726	0					
ANR	69737	Identifier	get_anode		69726	0					
ANR	69738	ArgumentList	n		69726	1					
ANR	69739	Argument	n		69726	0					
ANR	69740	Identifier	n		69726	0					
ANR	69741	IfStatement	if ( ! an )		69726	1					
ANR	69742	Condition	! an	1219:5:31455:31457	69726	0	True				
ANR	69743	UnaryOperationExpression	! an		69726	0					
ANR	69744	UnaryOperator	!		69726	0					
ANR	69745	Identifier	an		69726	1					
ANR	69746	CompoundStatement		3:10:46:46	69726	1					
ANR	69747	ReturnStatement	return NULL ;	1220:2:31464:31475	69726	0	True				
ANR	69748	Identifier	NULL		69726	0					
ANR	69749	IdentifierDeclStatement	"int k , layer = an -> layer ;"	1222:1:31481:31505	69726	2	True				
ANR	69750	IdentifierDecl	k		69726	0					
ANR	69751	IdentifierDeclType	int		69726	0					
ANR	69752	Identifier	k		69726	1					
ANR	69753	IdentifierDecl	layer = an -> layer		69726	1					
ANR	69754	IdentifierDeclType	int		69726	0					
ANR	69755	Identifier	layer		69726	1					
ANR	69756	AssignmentExpression	layer = an -> layer		69726	2		=			
ANR	69757	Identifier	layer		69726	0					
ANR	69758	PtrMemberAccess	an -> layer		69726	1					
ANR	69759	Identifier	an		69726	0					
ANR	69760	Identifier	layer		69726	1					
ANR	69761	ForStatement	for ( k = an -> pos_in_layer + 1 ; k < g -> layers [ layer ] . n_nodes ; ++ k )		69726	3					
ANR	69762	ForInit	k = an -> pos_in_layer + 1 ;	1224:6:31514:31538	69726	0	True				
ANR	69763	AssignmentExpression	k = an -> pos_in_layer + 1		69726	0		=			
ANR	69764	Identifier	k		69726	0					
ANR	69765	AdditiveExpression	an -> pos_in_layer + 1		69726	1		+			
ANR	69766	PtrMemberAccess	an -> pos_in_layer		69726	0					
ANR	69767	Identifier	an		69726	0					
ANR	69768	Identifier	pos_in_layer		69726	1					
ANR	69769	PrimaryExpression	1		69726	1					
ANR	69770	Condition	k < g -> layers [ layer ] . n_nodes	1224:32:31540:31567	69726	1	True				
ANR	69771	RelationalExpression	k < g -> layers [ layer ] . n_nodes		69726	0		<			
ANR	69772	Identifier	k		69726	0					
ANR	69773	MemberAccess	g -> layers [ layer ] . n_nodes		69726	1					
ANR	69774	ArrayIndexing	g -> layers [ layer ]		69726	0					
ANR	69775	PtrMemberAccess	g -> layers		69726	0					
ANR	69776	Identifier	g		69726	0					
ANR	69777	Identifier	layers		69726	1					
ANR	69778	Identifier	layer		69726	1					
ANR	69779	Identifier	n_nodes		69726	1					
ANR	69780	UnaryExpression	++ k	1224:62:31570:31572	69726	2	True				
ANR	69781	IncDec	++		69726	0					
ANR	69782	Identifier	k		69726	1					
ANR	69783	CompoundStatement		10:2:211:244	69726	3					
ANR	69784	IdentifierDeclStatement	RGraphNode * gk = g -> layers [ layer ] . nodes [ k ] ;	1225:2:31579:31621	69726	0	True				
ANR	69785	IdentifierDecl	* gk = g -> layers [ layer ] . nodes [ k ]		69726	0					
ANR	69786	IdentifierDeclType	RGraphNode *		69726	0					
ANR	69787	Identifier	gk		69726	1					
ANR	69788	AssignmentExpression	* gk = g -> layers [ layer ] . nodes [ k ]		69726	2		=			
ANR	69789	Identifier	gk		69726	0					
ANR	69790	ArrayIndexing	g -> layers [ layer ] . nodes [ k ]		69726	1					
ANR	69791	MemberAccess	g -> layers [ layer ] . nodes		69726	0					
ANR	69792	ArrayIndexing	g -> layers [ layer ]		69726	0					
ANR	69793	PtrMemberAccess	g -> layers		69726	0					
ANR	69794	Identifier	g		69726	0					
ANR	69795	Identifier	layers		69726	1					
ANR	69796	Identifier	layer		69726	1					
ANR	69797	Identifier	nodes		69726	1					
ANR	69798	Identifier	k		69726	1					
ANR	69799	IdentifierDeclStatement	const RANode * ak = get_anode ( gk ) ;	1226:2:31625:31658	69726	1	True				
ANR	69800	IdentifierDecl	* ak = get_anode ( gk )		69726	0					
ANR	69801	IdentifierDeclType	const RANode *		69726	0					
ANR	69802	Identifier	ak		69726	1					
ANR	69803	AssignmentExpression	* ak = get_anode ( gk )		69726	2		=			
ANR	69804	Identifier	ak		69726	0					
ANR	69805	CallExpression	get_anode ( gk )		69726	1					
ANR	69806	Callee	get_anode		69726	0					
ANR	69807	Identifier	get_anode		69726	0					
ANR	69808	ArgumentList	gk		69726	1					
ANR	69809	Argument	gk		69726	0					
ANR	69810	Identifier	gk		69726	0					
ANR	69811	IfStatement	if ( ! ak )		69726	2					
ANR	69812	Condition	! ak	1227:6:31666:31668	69726	0	True				
ANR	69813	UnaryOperationExpression	! ak		69726	0					
ANR	69814	UnaryOperator	!		69726	0					
ANR	69815	Identifier	ak		69726	1					
ANR	69816	CompoundStatement		11:11:257:257	69726	1					
ANR	69817	BreakStatement	break ;	1228:3:31676:31681	69726	0	True				
ANR	69818	IfStatement	if ( ak -> is_dummy )		69726	3					
ANR	69819	Condition	ak -> is_dummy	1231:6:31694:31705	69726	0	True				
ANR	69820	PtrMemberAccess	ak -> is_dummy		69726	0					
ANR	69821	Identifier	ak		69726	0					
ANR	69822	Identifier	is_dummy		69726	1					
ANR	69823	CompoundStatement		15:20:294:294	69726	1					
ANR	69824	ReturnStatement	return gk ;	1232:3:31713:31722	69726	0	True				
ANR	69825	Identifier	gk		69726	0					
ANR	69826	ReturnStatement	return NULL ;	1235:1:31732:31743	69726	4	True				
ANR	69827	Identifier	NULL		69726	0					
ANR	69828	ReturnType	static RGraphNode *		69726	1					
ANR	69829	Identifier	get_right_dummy		69726	2					
ANR	69830	ParameterList	"const RAGraph * g , const RGraphNode * n"		69726	3					
ANR	69831	Parameter	const RAGraph * g	1217:35:31374:31389	69726	0	True				
ANR	69832	ParameterType	const RAGraph *		69726	0					
ANR	69833	Identifier	g		69726	1					
ANR	69834	Parameter	const RGraphNode * n	1217:53:31392:31410	69726	1	True				
ANR	69835	ParameterType	const RGraphNode *		69726	0					
ANR	69836	Identifier	n		69726	1					
ANR	69837	CFGEntryNode	ENTRY		69726		True				
ANR	69838	CFGExitNode	EXIT		69726		True				
ANR	69839	Symbol	ak -> is_dummy		69726						
ANR	69840	Symbol	* * layer		69726						
ANR	69841	Symbol	layer		69726						
ANR	69842	Symbol	* layer		69726						
ANR	69843	Symbol	g -> layers [ layer ] . n_nodes		69726						
ANR	69844	Symbol	get_anode		69726						
ANR	69845	Symbol	NULL		69726						
ANR	69846	Symbol	an -> layer		69726						
ANR	69847	Symbol	* * g		69726						
ANR	69848	Symbol	gk		69726						
ANR	69849	Symbol	g		69726						
ANR	69850	Symbol	g -> layers [ layer ] . nodes		69726						
ANR	69851	Symbol	ak		69726						
ANR	69852	Symbol	k		69726						
ANR	69853	Symbol	an		69726						
ANR	69854	Symbol	an -> pos_in_layer		69726						
ANR	69855	Symbol	n		69726						
ANR	69856	Symbol	* an		69726						
ANR	69857	Symbol	* g		69726						
ANR	69858	Symbol	* ak		69726						
ANR	69859	Symbol	* k		69726						
ANR	69860	Symbol	* g -> layers		69726						
ANR	69861	Symbol	* g -> layers [ layer ] . nodes		69726						
ANR	69862	Symbol	* * * g		69726						
ANR	69863	Symbol	g -> layers		69726						
ANR	69864	Symbol	* * g -> layers		69726						
ANR	69865	Function	adjust_directions	1238:0:31748:33067							
ANR	69866	FunctionDef	"adjust_directions (const RAGraph * g , int i , int from_up , Sdb * D , Sdb * P)"		69865	0					
ANR	69867	CompoundStatement		1238:84:31832:33067	69865	0					
ANR	69868	IdentifierDeclStatement	"const RGraphNode * vm = NULL , * wm = NULL ;"	1239:1:31835:31874	69865	0	True				
ANR	69869	IdentifierDecl	* vm = NULL		69865	0					
ANR	69870	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	69871	Identifier	vm		69865	1					
ANR	69872	AssignmentExpression	* vm = NULL		69865	2		=			
ANR	69873	Identifier	NULL		69865	0					
ANR	69874	Identifier	NULL		69865	1					
ANR	69875	IdentifierDecl	* wm = NULL		69865	1					
ANR	69876	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	69877	Identifier	wm		69865	1					
ANR	69878	AssignmentExpression	* wm = NULL		69865	2		=			
ANR	69879	Identifier	NULL		69865	0					
ANR	69880	Identifier	NULL		69865	1					
ANR	69881	IdentifierDeclStatement	"const RANode * vma = NULL , * wma = NULL ;"	1240:1:31877:31914	69865	1	True				
ANR	69882	IdentifierDecl	* vma = NULL		69865	0					
ANR	69883	IdentifierDeclType	const RANode *		69865	0					
ANR	69884	Identifier	vma		69865	1					
ANR	69885	AssignmentExpression	* vma = NULL		69865	2		=			
ANR	69886	Identifier	NULL		69865	0					
ANR	69887	Identifier	NULL		69865	1					
ANR	69888	IdentifierDecl	* wma = NULL		69865	1					
ANR	69889	IdentifierDeclType	const RANode *		69865	0					
ANR	69890	Identifier	wma		69865	1					
ANR	69891	AssignmentExpression	* wma = NULL		69865	2		=			
ANR	69892	Identifier	NULL		69865	0					
ANR	69893	Identifier	NULL		69865	1					
ANR	69894	IdentifierDeclStatement	"int j , d = from_up ? 1 : - 1 ;"	1241:1:31917:31942	69865	2	True				
ANR	69895	IdentifierDecl	j		69865	0					
ANR	69896	IdentifierDeclType	int		69865	0					
ANR	69897	Identifier	j		69865	1					
ANR	69898	IdentifierDecl	d = from_up ? 1 : - 1		69865	1					
ANR	69899	IdentifierDeclType	int		69865	0					
ANR	69900	Identifier	d		69865	1					
ANR	69901	AssignmentExpression	d = from_up ? 1 : - 1		69865	2		=			
ANR	69902	Identifier	d		69865	0					
ANR	69903	ConditionalExpression	from_up ? 1 : - 1		69865	1					
ANR	69904	Condition	from_up		69865	0					
ANR	69905	Identifier	from_up		69865	0					
ANR	69906	PrimaryExpression	1		69865	1					
ANR	69907	UnaryOperationExpression	- 1		69865	2					
ANR	69908	UnaryOperator	-		69865	0					
ANR	69909	PrimaryExpression	1		69865	1					
ANR	69910	IfStatement	if ( i + d < 0 || i + d >= g -> n_layers )		69865	3					
ANR	69911	Condition	i + d < 0 || i + d >= g -> n_layers	1243:5:31950:31982	69865	0	True				
ANR	69912	OrExpression	i + d < 0 || i + d >= g -> n_layers		69865	0		||			
ANR	69913	RelationalExpression	i + d < 0		69865	0		<			
ANR	69914	AdditiveExpression	i + d		69865	0		+			
ANR	69915	Identifier	i		69865	0					
ANR	69916	Identifier	d		69865	1					
ANR	69917	PrimaryExpression	0		69865	1					
ANR	69918	RelationalExpression	i + d >= g -> n_layers		69865	1		>=			
ANR	69919	AdditiveExpression	i + d		69865	0		+			
ANR	69920	Identifier	i		69865	0					
ANR	69921	Identifier	d		69865	1					
ANR	69922	PtrMemberAccess	g -> n_layers		69865	1					
ANR	69923	Identifier	g		69865	0					
ANR	69924	Identifier	n_layers		69865	1					
ANR	69925	CompoundStatement		6:40:152:152	69865	1					
ANR	69926	ReturnStatement	return ;	1244:2:31989:31995	69865	0	True				
ANR	69927	ForStatement	for ( j = 0 ; j < g -> layers [ i + d ] . n_nodes ; ++ j )		69865	4					
ANR	69928	ForInit	j = 0 ;	1246:6:32006:32011	69865	0	True				
ANR	69929	AssignmentExpression	j = 0		69865	0		=			
ANR	69930	Identifier	j		69865	0					
ANR	69931	PrimaryExpression	0		69865	1					
ANR	69932	Condition	j < g -> layers [ i + d ] . n_nodes	1246:13:32013:32040	69865	1	True				
ANR	69933	RelationalExpression	j < g -> layers [ i + d ] . n_nodes		69865	0		<			
ANR	69934	Identifier	j		69865	0					
ANR	69935	MemberAccess	g -> layers [ i + d ] . n_nodes		69865	1					
ANR	69936	ArrayIndexing	g -> layers [ i + d ]		69865	0					
ANR	69937	PtrMemberAccess	g -> layers		69865	0					
ANR	69938	Identifier	g		69865	0					
ANR	69939	Identifier	layers		69865	1					
ANR	69940	AdditiveExpression	i + d		69865	1		+			
ANR	69941	Identifier	i		69865	0					
ANR	69942	Identifier	d		69865	1					
ANR	69943	Identifier	n_nodes		69865	1					
ANR	69944	UnaryExpression	++ j	1246:43:32043:32045	69865	2	True				
ANR	69945	IncDec	++		69865	0					
ANR	69946	Identifier	j		69865	1					
ANR	69947	CompoundStatement		11:2:276:316	69865	3					
ANR	69948	IdentifierDeclStatement	"const RGraphNode * wp , * vp = g -> layers [ i + d ] . nodes [ j ] ;"	1247:2:32052:32105	69865	0	True				
ANR	69949	IdentifierDecl	* wp		69865	0					
ANR	69950	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	69951	Identifier	wp		69865	1					
ANR	69952	IdentifierDecl	* vp = g -> layers [ i + d ] . nodes [ j ]		69865	1					
ANR	69953	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	69954	Identifier	vp		69865	1					
ANR	69955	AssignmentExpression	* vp = g -> layers [ i + d ] . nodes [ j ]		69865	2		=			
ANR	69956	Identifier	vp		69865	0					
ANR	69957	ArrayIndexing	g -> layers [ i + d ] . nodes [ j ]		69865	1					
ANR	69958	MemberAccess	g -> layers [ i + d ] . nodes		69865	0					
ANR	69959	ArrayIndexing	g -> layers [ i + d ]		69865	0					
ANR	69960	PtrMemberAccess	g -> layers		69865	0					
ANR	69961	Identifier	g		69865	0					
ANR	69962	Identifier	layers		69865	1					
ANR	69963	AdditiveExpression	i + d		69865	1		+			
ANR	69964	Identifier	i		69865	0					
ANR	69965	Identifier	d		69865	1					
ANR	69966	Identifier	nodes		69865	1					
ANR	69967	Identifier	j		69865	1					
ANR	69968	IdentifierDeclStatement	"const RANode * wpa , * vpa = get_anode ( vp ) ;"	1248:2:32109:32149	69865	1	True				
ANR	69969	IdentifierDecl	* wpa		69865	0					
ANR	69970	IdentifierDeclType	const RANode *		69865	0					
ANR	69971	Identifier	wpa		69865	1					
ANR	69972	IdentifierDecl	* vpa = get_anode ( vp )		69865	1					
ANR	69973	IdentifierDeclType	const RANode *		69865	0					
ANR	69974	Identifier	vpa		69865	1					
ANR	69975	AssignmentExpression	* vpa = get_anode ( vp )		69865	2		=			
ANR	69976	Identifier	vpa		69865	0					
ANR	69977	CallExpression	get_anode ( vp )		69865	1					
ANR	69978	Callee	get_anode		69865	0					
ANR	69979	Identifier	get_anode		69865	0					
ANR	69980	ArgumentList	vp		69865	1					
ANR	69981	Argument	vp		69865	0					
ANR	69982	Identifier	vp		69865	0					
ANR	69983	IfStatement	if ( ! vpa || ! vpa -> is_dummy )		69865	2					
ANR	69984	Condition	! vpa || ! vpa -> is_dummy	1250:6:32158:32179	69865	0	True				
ANR	69985	OrExpression	! vpa || ! vpa -> is_dummy		69865	0		||			
ANR	69986	UnaryOperationExpression	! vpa		69865	0					
ANR	69987	UnaryOperator	!		69865	0					
ANR	69988	Identifier	vpa		69865	1					
ANR	69989	UnaryOperationExpression	! vpa -> is_dummy		69865	1					
ANR	69990	UnaryOperator	!		69865	0					
ANR	69991	PtrMemberAccess	vpa -> is_dummy		69865	1					
ANR	69992	Identifier	vpa		69865	0					
ANR	69993	Identifier	is_dummy		69865	1					
ANR	69994	CompoundStatement		13:30:349:349	69865	1					
ANR	69995	ContinueStatement	continue ;	1251:3:32187:32195	69865	0	True				
ANR	69996	IfStatement	if ( from_up )		69865	3					
ANR	69997	Condition	from_up	1253:6:32207:32213	69865	0	True				
ANR	69998	Identifier	from_up		69865	0					
ANR	69999	CompoundStatement		16:15:383:383	69865	1					
ANR	70000	ExpressionStatement	"wp = r_list_get_n ( r_graph_innodes ( g -> graph , vp ) , 0 )"	1254:3:32221:32274	69865	0	True				
ANR	70001	AssignmentExpression	"wp = r_list_get_n ( r_graph_innodes ( g -> graph , vp ) , 0 )"		69865	0		=			
ANR	70002	Identifier	wp		69865	0					
ANR	70003	CallExpression	"r_list_get_n ( r_graph_innodes ( g -> graph , vp ) , 0 )"		69865	1					
ANR	70004	Callee	r_list_get_n		69865	0					
ANR	70005	Identifier	r_list_get_n		69865	0					
ANR	70006	ArgumentList	"r_graph_innodes ( g -> graph , vp )"		69865	1					
ANR	70007	Argument	"r_graph_innodes ( g -> graph , vp )"		69865	0					
ANR	70008	CallExpression	"r_graph_innodes ( g -> graph , vp )"		69865	0					
ANR	70009	Callee	r_graph_innodes		69865	0					
ANR	70010	Identifier	r_graph_innodes		69865	0					
ANR	70011	ArgumentList	g -> graph		69865	1					
ANR	70012	Argument	g -> graph		69865	0					
ANR	70013	PtrMemberAccess	g -> graph		69865	0					
ANR	70014	Identifier	g		69865	0					
ANR	70015	Identifier	graph		69865	1					
ANR	70016	Argument	vp		69865	1					
ANR	70017	Identifier	vp		69865	0					
ANR	70018	Argument	0		69865	1					
ANR	70019	PrimaryExpression	0		69865	0					
ANR	70020	ElseStatement	else		69865	0					
ANR	70021	CompoundStatement		18:9:452:452	69865	0					
ANR	70022	ExpressionStatement	"wp = r_graph_nth_neighbour ( g -> graph , vp , 0 )"	1256:3:32290:32334	69865	0	True				
ANR	70023	AssignmentExpression	"wp = r_graph_nth_neighbour ( g -> graph , vp , 0 )"		69865	0		=			
ANR	70024	Identifier	wp		69865	0					
ANR	70025	CallExpression	"r_graph_nth_neighbour ( g -> graph , vp , 0 )"		69865	1					
ANR	70026	Callee	r_graph_nth_neighbour		69865	0					
ANR	70027	Identifier	r_graph_nth_neighbour		69865	0					
ANR	70028	ArgumentList	g -> graph		69865	1					
ANR	70029	Argument	g -> graph		69865	0					
ANR	70030	PtrMemberAccess	g -> graph		69865	0					
ANR	70031	Identifier	g		69865	0					
ANR	70032	Identifier	graph		69865	1					
ANR	70033	Argument	vp		69865	1					
ANR	70034	Identifier	vp		69865	0					
ANR	70035	Argument	0		69865	2					
ANR	70036	PrimaryExpression	0		69865	0					
ANR	70037	ExpressionStatement	wpa = get_anode ( wp )	1258:2:32342:32362	69865	4	True				
ANR	70038	AssignmentExpression	wpa = get_anode ( wp )		69865	0		=			
ANR	70039	Identifier	wpa		69865	0					
ANR	70040	CallExpression	get_anode ( wp )		69865	1					
ANR	70041	Callee	get_anode		69865	0					
ANR	70042	Identifier	get_anode		69865	0					
ANR	70043	ArgumentList	wp		69865	1					
ANR	70044	Argument	wp		69865	0					
ANR	70045	Identifier	wp		69865	0					
ANR	70046	IfStatement	if ( ! wpa || ! wpa -> is_dummy )		69865	5					
ANR	70047	Condition	! wpa || ! wpa -> is_dummy	1259:6:32370:32391	69865	0	True				
ANR	70048	OrExpression	! wpa || ! wpa -> is_dummy		69865	0		||			
ANR	70049	UnaryOperationExpression	! wpa		69865	0					
ANR	70050	UnaryOperator	!		69865	0					
ANR	70051	Identifier	wpa		69865	1					
ANR	70052	UnaryOperationExpression	! wpa -> is_dummy		69865	1					
ANR	70053	UnaryOperator	!		69865	0					
ANR	70054	PtrMemberAccess	wpa -> is_dummy		69865	1					
ANR	70055	Identifier	wpa		69865	0					
ANR	70056	Identifier	is_dummy		69865	1					
ANR	70057	CompoundStatement		22:30:561:561	69865	1					
ANR	70058	ContinueStatement	continue ;	1260:3:32399:32407	69865	0	True				
ANR	70059	IfStatement	if ( vm )		69865	6					
ANR	70060	Condition	vm	1262:6:32419:32420	69865	0	True				
ANR	70061	Identifier	vm		69865	0					
ANR	70062	CompoundStatement		27:3:628:633	69865	1					
ANR	70063	IdentifierDeclStatement	"int p = hash_get_int ( P , wm ) ;"	1263:3:32428:32456	69865	0	True				
ANR	70064	IdentifierDecl	"p = hash_get_int ( P , wm )"		69865	0					
ANR	70065	IdentifierDeclType	int		69865	0					
ANR	70066	Identifier	p		69865	1					
ANR	70067	AssignmentExpression	"p = hash_get_int ( P , wm )"		69865	2		=			
ANR	70068	Identifier	p		69865	0					
ANR	70069	CallExpression	"hash_get_int ( P , wm )"		69865	1					
ANR	70070	Callee	hash_get_int		69865	0					
ANR	70071	Identifier	hash_get_int		69865	0					
ANR	70072	ArgumentList	P		69865	1					
ANR	70073	Argument	P		69865	0					
ANR	70074	Identifier	P		69865	0					
ANR	70075	Argument	wm		69865	1					
ANR	70076	Identifier	wm		69865	0					
ANR	70077	IdentifierDeclStatement	int k ;	1264:3:32461:32466	69865	1	True				
ANR	70078	IdentifierDecl	k		69865	0					
ANR	70079	IdentifierDeclType	int		69865	0					
ANR	70080	Identifier	k		69865	1					
ANR	70081	ForStatement	for ( k = wma -> pos_in_layer + 1 ; k < wpa -> pos_in_layer ; ++ k )		69865	2					
ANR	70082	ForInit	k = wma -> pos_in_layer + 1 ;	1266:8:32477:32502	69865	0	True				
ANR	70083	AssignmentExpression	k = wma -> pos_in_layer + 1		69865	0		=			
ANR	70084	Identifier	k		69865	0					
ANR	70085	AdditiveExpression	wma -> pos_in_layer + 1		69865	1		+			
ANR	70086	PtrMemberAccess	wma -> pos_in_layer		69865	0					
ANR	70087	Identifier	wma		69865	0					
ANR	70088	Identifier	pos_in_layer		69865	1					
ANR	70089	PrimaryExpression	1		69865	1					
ANR	70090	Condition	k < wpa -> pos_in_layer	1266:35:32504:32524	69865	1	True				
ANR	70091	RelationalExpression	k < wpa -> pos_in_layer		69865	0		<			
ANR	70092	Identifier	k		69865	0					
ANR	70093	PtrMemberAccess	wpa -> pos_in_layer		69865	1					
ANR	70094	Identifier	wpa		69865	0					
ANR	70095	Identifier	pos_in_layer		69865	1					
ANR	70096	UnaryExpression	++ k	1266:58:32527:32529	69865	2	True				
ANR	70097	IncDec	++		69865	0					
ANR	70098	Identifier	k		69865	1					
ANR	70099	CompoundStatement		31:4:763:795	69865	3					
ANR	70100	IdentifierDeclStatement	const RGraphNode * w = g -> layers [ wma -> layer ] . nodes [ k ] ;	1267:4:32538:32590	69865	0	True				
ANR	70101	IdentifierDecl	* w = g -> layers [ wma -> layer ] . nodes [ k ]		69865	0					
ANR	70102	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	70103	Identifier	w		69865	1					
ANR	70104	AssignmentExpression	* w = g -> layers [ wma -> layer ] . nodes [ k ]		69865	2		=			
ANR	70105	Identifier	w		69865	0					
ANR	70106	ArrayIndexing	g -> layers [ wma -> layer ] . nodes [ k ]		69865	1					
ANR	70107	MemberAccess	g -> layers [ wma -> layer ] . nodes		69865	0					
ANR	70108	ArrayIndexing	g -> layers [ wma -> layer ]		69865	0					
ANR	70109	PtrMemberAccess	g -> layers		69865	0					
ANR	70110	Identifier	g		69865	0					
ANR	70111	Identifier	layers		69865	1					
ANR	70112	PtrMemberAccess	wma -> layer		69865	1					
ANR	70113	Identifier	wma		69865	0					
ANR	70114	Identifier	layer		69865	1					
ANR	70115	Identifier	nodes		69865	1					
ANR	70116	Identifier	k		69865	1					
ANR	70117	IdentifierDeclStatement	const RANode * aw = get_anode ( w ) ;	1268:4:32596:32628	69865	1	True				
ANR	70118	IdentifierDecl	* aw = get_anode ( w )		69865	0					
ANR	70119	IdentifierDeclType	const RANode *		69865	0					
ANR	70120	Identifier	aw		69865	1					
ANR	70121	AssignmentExpression	* aw = get_anode ( w )		69865	2		=			
ANR	70122	Identifier	aw		69865	0					
ANR	70123	CallExpression	get_anode ( w )		69865	1					
ANR	70124	Callee	get_anode		69865	0					
ANR	70125	Identifier	get_anode		69865	0					
ANR	70126	ArgumentList	w		69865	1					
ANR	70127	Argument	w		69865	0					
ANR	70128	Identifier	w		69865	0					
ANR	70129	IfStatement	if ( aw && aw -> is_dummy )		69865	2					
ANR	70130	Condition	aw && aw -> is_dummy	1269:8:32638:32655	69865	0	True				
ANR	70131	AndExpression	aw && aw -> is_dummy		69865	0		&&			
ANR	70132	Identifier	aw		69865	0					
ANR	70133	PtrMemberAccess	aw -> is_dummy		69865	1					
ANR	70134	Identifier	aw		69865	0					
ANR	70135	Identifier	is_dummy		69865	1					
ANR	70136	CompoundStatement		32:28:825:825	69865	1					
ANR	70137	ExpressionStatement	"p &= hash_get_int ( P , w )"	1270:5:32665:32689	69865	0	True				
ANR	70138	AssignmentExpression	"p &= hash_get_int ( P , w )"		69865	0		&=			
ANR	70139	Identifier	p		69865	0					
ANR	70140	CallExpression	"hash_get_int ( P , w )"		69865	1					
ANR	70141	Callee	hash_get_int		69865	0					
ANR	70142	Identifier	hash_get_int		69865	0					
ANR	70143	ArgumentList	P		69865	1					
ANR	70144	Argument	P		69865	0					
ANR	70145	Identifier	P		69865	0					
ANR	70146	Argument	w		69865	1					
ANR	70147	Identifier	w		69865	0					
ANR	70148	IfStatement	if ( p )		69865	3					
ANR	70149	Condition	p	1273:7:32709:32709	69865	0	True				
ANR	70150	Identifier	p		69865	0					
ANR	70151	CompoundStatement		36:10:879:879	69865	1					
ANR	70152	ExpressionStatement	"hash_set ( D , vm , from_up )"	1274:4:32718:32743	69865	0	True				
ANR	70153	CallExpression	"hash_set ( D , vm , from_up )"		69865	0					
ANR	70154	Callee	hash_set		69865	0					
ANR	70155	Identifier	hash_set		69865	0					
ANR	70156	ArgumentList	D		69865	1					
ANR	70157	Argument	D		69865	0					
ANR	70158	Identifier	D		69865	0					
ANR	70159	Argument	vm		69865	1					
ANR	70160	Identifier	vm		69865	0					
ANR	70161	Argument	from_up		69865	2					
ANR	70162	Identifier	from_up		69865	0					
ANR	70163	ForStatement	for ( k = vma -> pos_in_layer + 1 ; k < vpa -> pos_in_layer ; ++ k )		69865	1					
ANR	70164	ForInit	k = vma -> pos_in_layer + 1 ;	1275:9:32754:32779	69865	0	True				
ANR	70165	AssignmentExpression	k = vma -> pos_in_layer + 1		69865	0		=			
ANR	70166	Identifier	k		69865	0					
ANR	70167	AdditiveExpression	vma -> pos_in_layer + 1		69865	1		+			
ANR	70168	PtrMemberAccess	vma -> pos_in_layer		69865	0					
ANR	70169	Identifier	vma		69865	0					
ANR	70170	Identifier	pos_in_layer		69865	1					
ANR	70171	PrimaryExpression	1		69865	1					
ANR	70172	Condition	k < vpa -> pos_in_layer	1275:36:32781:32801	69865	1	True				
ANR	70173	RelationalExpression	k < vpa -> pos_in_layer		69865	0		<			
ANR	70174	Identifier	k		69865	0					
ANR	70175	PtrMemberAccess	vpa -> pos_in_layer		69865	1					
ANR	70176	Identifier	vpa		69865	0					
ANR	70177	Identifier	pos_in_layer		69865	1					
ANR	70178	UnaryExpression	++ k	1275:59:32804:32806	69865	2	True				
ANR	70179	IncDec	++		69865	0					
ANR	70180	Identifier	k		69865	1					
ANR	70181	CompoundStatement		40:5:1042:1074	69865	3					
ANR	70182	IdentifierDeclStatement	const RGraphNode * v = g -> layers [ vma -> layer ] . nodes [ k ] ;	1276:5:32816:32868	69865	0	True				
ANR	70183	IdentifierDecl	* v = g -> layers [ vma -> layer ] . nodes [ k ]		69865	0					
ANR	70184	IdentifierDeclType	const RGraphNode *		69865	0					
ANR	70185	Identifier	v		69865	1					
ANR	70186	AssignmentExpression	* v = g -> layers [ vma -> layer ] . nodes [ k ]		69865	2		=			
ANR	70187	Identifier	v		69865	0					
ANR	70188	ArrayIndexing	g -> layers [ vma -> layer ] . nodes [ k ]		69865	1					
ANR	70189	MemberAccess	g -> layers [ vma -> layer ] . nodes		69865	0					
ANR	70190	ArrayIndexing	g -> layers [ vma -> layer ]		69865	0					
ANR	70191	PtrMemberAccess	g -> layers		69865	0					
ANR	70192	Identifier	g		69865	0					
ANR	70193	Identifier	layers		69865	1					
ANR	70194	PtrMemberAccess	vma -> layer		69865	1					
ANR	70195	Identifier	vma		69865	0					
ANR	70196	Identifier	layer		69865	1					
ANR	70197	Identifier	nodes		69865	1					
ANR	70198	Identifier	k		69865	1					
ANR	70199	IdentifierDeclStatement	const RANode * av = get_anode ( v ) ;	1277:5:32875:32907	69865	1	True				
ANR	70200	IdentifierDecl	* av = get_anode ( v )		69865	0					
ANR	70201	IdentifierDeclType	const RANode *		69865	0					
ANR	70202	Identifier	av		69865	1					
ANR	70203	AssignmentExpression	* av = get_anode ( v )		69865	2		=			
ANR	70204	Identifier	av		69865	0					
ANR	70205	CallExpression	get_anode ( v )		69865	1					
ANR	70206	Callee	get_anode		69865	0					
ANR	70207	Identifier	get_anode		69865	0					
ANR	70208	ArgumentList	v		69865	1					
ANR	70209	Argument	v		69865	0					
ANR	70210	Identifier	v		69865	0					
ANR	70211	IfStatement	if ( av && av -> is_dummy )		69865	2					
ANR	70212	Condition	av && av -> is_dummy	1278:9:32918:32935	69865	0	True				
ANR	70213	AndExpression	av && av -> is_dummy		69865	0		&&			
ANR	70214	Identifier	av		69865	0					
ANR	70215	PtrMemberAccess	av -> is_dummy		69865	1					
ANR	70216	Identifier	av		69865	0					
ANR	70217	Identifier	is_dummy		69865	1					
ANR	70218	CompoundStatement		41:29:1105:1105	69865	1					
ANR	70219	ExpressionStatement	"hash_set ( D , v , from_up )"	1279:6:32946:32970	69865	0	True				
ANR	70220	CallExpression	"hash_set ( D , v , from_up )"		69865	0					
ANR	70221	Callee	hash_set		69865	0					
ANR	70222	Identifier	hash_set		69865	0					
ANR	70223	ArgumentList	D		69865	1					
ANR	70224	Argument	D		69865	0					
ANR	70225	Identifier	D		69865	0					
ANR	70226	Argument	v		69865	1					
ANR	70227	Identifier	v		69865	0					
ANR	70228	Argument	from_up		69865	2					
ANR	70229	Identifier	from_up		69865	0					
ANR	70230	ExpressionStatement	vm = vp	1284:2:32996:33003	69865	7	True				
ANR	70231	AssignmentExpression	vm = vp		69865	0		=			
ANR	70232	Identifier	vm		69865	0					
ANR	70233	Identifier	vp		69865	1					
ANR	70234	ExpressionStatement	wm = wp	1285:2:33007:33014	69865	8	True				
ANR	70235	AssignmentExpression	wm = wp		69865	0		=			
ANR	70236	Identifier	wm		69865	0					
ANR	70237	Identifier	wp		69865	1					
ANR	70238	ExpressionStatement	vma = get_anode ( vm )	1286:2:33018:33038	69865	9	True				
ANR	70239	AssignmentExpression	vma = get_anode ( vm )		69865	0		=			
ANR	70240	Identifier	vma		69865	0					
ANR	70241	CallExpression	get_anode ( vm )		69865	1					
ANR	70242	Callee	get_anode		69865	0					
ANR	70243	Identifier	get_anode		69865	0					
ANR	70244	ArgumentList	vm		69865	1					
ANR	70245	Argument	vm		69865	0					
ANR	70246	Identifier	vm		69865	0					
ANR	70247	ExpressionStatement	wma = get_anode ( wm )	1287:2:33042:33062	69865	10	True				
ANR	70248	AssignmentExpression	wma = get_anode ( wm )		69865	0		=			
ANR	70249	Identifier	wma		69865	0					
ANR	70250	CallExpression	get_anode ( wm )		69865	1					
ANR	70251	Callee	get_anode		69865	0					
ANR	70252	Identifier	get_anode		69865	0					
ANR	70253	ArgumentList	wm		69865	1					
ANR	70254	Argument	wm		69865	0					
ANR	70255	Identifier	wm		69865	0					
ANR	70256	ReturnType	static void		69865	1					
ANR	70257	Identifier	adjust_directions		69865	2					
ANR	70258	ParameterList	"const RAGraph * g , int i , int from_up , Sdb * D , Sdb * P"		69865	3					
ANR	70259	Parameter	const RAGraph * g	1238:30:31778:31793	69865	0	True				
ANR	70260	ParameterType	const RAGraph *		69865	0					
ANR	70261	Identifier	g		69865	1					
ANR	70262	Parameter	int i	1238:48:31796:31800	69865	1	True				
ANR	70263	ParameterType	int		69865	0					
ANR	70264	Identifier	i		69865	1					
ANR	70265	Parameter	int from_up	1238:55:31803:31813	69865	2	True				
ANR	70266	ParameterType	int		69865	0					
ANR	70267	Identifier	from_up		69865	1					
ANR	70268	Parameter	Sdb * D	1238:68:31816:31821	69865	3	True				
ANR	70269	ParameterType	Sdb *		69865	0					
ANR	70270	Identifier	D		69865	1					
ANR	70271	Parameter	Sdb * P	1238:76:31824:31829	69865	4	True				
ANR	70272	ParameterType	Sdb *		69865	0					
ANR	70273	Identifier	P		69865	1					
ANR	70274	CFGEntryNode	ENTRY		69865		True				
ANR	70275	CFGExitNode	EXIT		69865		True				
ANR	70276	Symbol	vpa -> is_dummy		69865						
ANR	70277	Symbol	* * * vma		69865						
ANR	70278	Symbol	vma -> pos_in_layer		69865						
ANR	70279	Symbol	g -> n_layers		69865						
ANR	70280	Symbol	* g -> layers [ wma -> layer ] . nodes		69865						
ANR	70281	Symbol	vma		69865						
ANR	70282	Symbol	* g -> layers [ i + d ] . nodes		69865						
ANR	70283	Symbol	* vpa		69865						
ANR	70284	Symbol	r_graph_nth_neighbour		69865						
ANR	70285	Symbol	* * wma		69865						
ANR	70286	Symbol	wma -> pos_in_layer		69865						
ANR	70287	Symbol	* * i		69865						
ANR	70288	Symbol	NULL		69865						
ANR	70289	Symbol	* * g		69865						
ANR	70290	Symbol	* wma -> layer		69865						
ANR	70291	Symbol	* * d		69865						
ANR	70292	Symbol	wpa		69865						
ANR	70293	Symbol	r_list_get_n		69865						
ANR	70294	Symbol	wma -> layer		69865						
ANR	70295	Symbol	* * vma -> layer		69865						
ANR	70296	Symbol	* wma		69865						
ANR	70297	Symbol	aw -> is_dummy		69865						
ANR	70298	Symbol	av		69865						
ANR	70299	Symbol	aw		69865						
ANR	70300	Symbol	vm		69865						
ANR	70301	Symbol	* g -> layers		69865						
ANR	70302	Symbol	vp		69865						
ANR	70303	Symbol	* * * g		69865						
ANR	70304	Symbol	av -> is_dummy		69865						
ANR	70305	Symbol	from_up		69865						
ANR	70306	Symbol	D		69865						
ANR	70307	Symbol	* * wma -> layer		69865						
ANR	70308	Symbol	* * * wma		69865						
ANR	70309	Symbol	wma		69865						
ANR	70310	Symbol	wpa -> pos_in_layer		69865						
ANR	70311	Symbol	vma -> layer		69865						
ANR	70312	Symbol	r_graph_innodes		69865						
ANR	70313	Symbol	g -> layers [ vma -> layer ] . nodes		69865						
ANR	70314	Symbol	P		69865						
ANR	70315	Symbol	* wpa		69865						
ANR	70316	Symbol	* vma -> layer		69865						
ANR	70317	Symbol	g -> graph		69865						
ANR	70318	Symbol	wm		69865						
ANR	70319	Symbol	wp		69865						
ANR	70320	Symbol	* * vma		69865						
ANR	70321	Symbol	g -> layers [ i + d ] . nodes		69865						
ANR	70322	Symbol	* g -> layers [ vma -> layer ] . nodes		69865						
ANR	70323	Symbol	get_anode		69865						
ANR	70324	Symbol	d		69865						
ANR	70325	Symbol	vpa		69865						
ANR	70326	Symbol	g		69865						
ANR	70327	Symbol	i		69865						
ANR	70328	Symbol	j		69865						
ANR	70329	Symbol	k		69865						
ANR	70330	Symbol	wpa -> is_dummy		69865						
ANR	70331	Symbol	hash_get_int		69865						
ANR	70332	Symbol	* d		69865						
ANR	70333	Symbol	p		69865						
ANR	70334	Symbol	vpa -> pos_in_layer		69865						
ANR	70335	Symbol	* g		69865						
ANR	70336	Symbol	* i		69865						
ANR	70337	Symbol	* j		69865						
ANR	70338	Symbol	g -> layers [ wma -> layer ] . nodes		69865						
ANR	70339	Symbol	* vma		69865						
ANR	70340	Symbol	* k		69865						
ANR	70341	Symbol	g -> layers [ i + d ] . n_nodes		69865						
ANR	70342	Symbol	v		69865						
ANR	70343	Symbol	w		69865						
ANR	70344	Symbol	* av		69865						
ANR	70345	Symbol	g -> layers		69865						
ANR	70346	Symbol	* * g -> layers		69865						
ANR	70347	Symbol	* aw		69865						
ANR	70348	Function	place_single	1292:0:33111:33975							
ANR	70349	FunctionDef	"place_single (const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int va)"		70348	0					
ANR	70350	CompoundStatement		1292:115:33226:33975	70348	0					
ANR	70351	IdentifierDeclStatement	"const RGraphNode * gk , * v = g -> layers [ l ] . nodes [ va ] ;"	1293:1:33229:33278	70348	0	True				
ANR	70352	IdentifierDecl	* gk		70348	0					
ANR	70353	IdentifierDeclType	const RGraphNode *		70348	0					
ANR	70354	Identifier	gk		70348	1					
ANR	70355	IdentifierDecl	* v = g -> layers [ l ] . nodes [ va ]		70348	1					
ANR	70356	IdentifierDeclType	const RGraphNode *		70348	0					
ANR	70357	Identifier	v		70348	1					
ANR	70358	AssignmentExpression	* v = g -> layers [ l ] . nodes [ va ]		70348	2		=			
ANR	70359	Identifier	v		70348	0					
ANR	70360	ArrayIndexing	g -> layers [ l ] . nodes [ va ]		70348	1					
ANR	70361	MemberAccess	g -> layers [ l ] . nodes		70348	0					
ANR	70362	ArrayIndexing	g -> layers [ l ]		70348	0					
ANR	70363	PtrMemberAccess	g -> layers		70348	0					
ANR	70364	Identifier	g		70348	0					
ANR	70365	Identifier	layers		70348	1					
ANR	70366	Identifier	l		70348	1					
ANR	70367	Identifier	nodes		70348	1					
ANR	70368	Identifier	va		70348	1					
ANR	70369	IdentifierDeclStatement	const RANode * ak ;	1294:1:33281:33297	70348	1	True				
ANR	70370	IdentifierDecl	* ak		70348	0					
ANR	70371	IdentifierDeclType	const RANode *		70348	0					
ANR	70372	Identifier	ak		70348	1					
ANR	70373	IdentifierDeclStatement	RANode * av = get_anode ( v ) ;	1295:1:33300:33326	70348	2	True				
ANR	70374	IdentifierDecl	* av = get_anode ( v )		70348	0					
ANR	70375	IdentifierDeclType	RANode *		70348	0					
ANR	70376	Identifier	av		70348	1					
ANR	70377	AssignmentExpression	* av = get_anode ( v )		70348	2		=			
ANR	70378	Identifier	av		70348	0					
ANR	70379	CallExpression	get_anode ( v )		70348	1					
ANR	70380	Callee	get_anode		70348	0					
ANR	70381	Identifier	get_anode		70348	0					
ANR	70382	ArgumentList	v		70348	1					
ANR	70383	Argument	v		70348	0					
ANR	70384	Identifier	v		70348	0					
ANR	70385	IfStatement	if ( ! av )		70348	3					
ANR	70386	Condition	! av	1296:5:33333:33335	70348	0	True				
ANR	70387	UnaryOperationExpression	! av		70348	0					
ANR	70388	UnaryOperator	!		70348	0					
ANR	70389	Identifier	av		70348	1					
ANR	70390	CompoundStatement		5:10:111:111	70348	1					
ANR	70391	ReturnStatement	return ;	1297:2:33342:33348	70348	0	True				
ANR	70392	IdentifierDeclStatement	const RListIter * itk ;	1299:1:33354:33374	70348	4	True				
ANR	70393	IdentifierDecl	* itk		70348	0					
ANR	70394	IdentifierDeclType	const RListIter *		70348	0					
ANR	70395	Identifier	itk		70348	1					
ANR	70396	IdentifierDeclStatement	"const RList * neigh = from_up ? r_graph_innodes ( g -> graph , v ) : r_graph_get_neighbours ( g -> graph , v ) ;"	1301:1:33378:33488	70348	5	True				
ANR	70397	IdentifierDecl	"* neigh = from_up ? r_graph_innodes ( g -> graph , v ) : r_graph_get_neighbours ( g -> graph , v )"		70348	0					
ANR	70398	IdentifierDeclType	const RList *		70348	0					
ANR	70399	Identifier	neigh		70348	1					
ANR	70400	AssignmentExpression	"* neigh = from_up ? r_graph_innodes ( g -> graph , v ) : r_graph_get_neighbours ( g -> graph , v )"		70348	2		=			
ANR	70401	Identifier	neigh		70348	0					
ANR	70402	ConditionalExpression	"from_up ? r_graph_innodes ( g -> graph , v ) : r_graph_get_neighbours ( g -> graph , v )"		70348	1					
ANR	70403	Condition	from_up		70348	0					
ANR	70404	Identifier	from_up		70348	0					
ANR	70405	CallExpression	"r_graph_innodes ( g -> graph , v )"		70348	1					
ANR	70406	Callee	r_graph_innodes		70348	0					
ANR	70407	Identifier	r_graph_innodes		70348	0					
ANR	70408	ArgumentList	g -> graph		70348	1					
ANR	70409	Argument	g -> graph		70348	0					
ANR	70410	PtrMemberAccess	g -> graph		70348	0					
ANR	70411	Identifier	g		70348	0					
ANR	70412	Identifier	graph		70348	1					
ANR	70413	Argument	v		70348	1					
ANR	70414	Identifier	v		70348	0					
ANR	70415	CallExpression	"r_graph_get_neighbours ( g -> graph , v )"		70348	2					
ANR	70416	Callee	r_graph_get_neighbours		70348	0					
ANR	70417	Identifier	r_graph_get_neighbours		70348	0					
ANR	70418	ArgumentList	g -> graph		70348	1					
ANR	70419	Argument	g -> graph		70348	0					
ANR	70420	PtrMemberAccess	g -> graph		70348	0					
ANR	70421	Identifier	g		70348	0					
ANR	70422	Identifier	graph		70348	1					
ANR	70423	Argument	v		70348	1					
ANR	70424	Identifier	v		70348	0					
ANR	70425	IdentifierDeclStatement	int len = r_list_length ( neigh ) ;	1305:1:33492:33523	70348	6	True				
ANR	70426	IdentifierDecl	len = r_list_length ( neigh )		70348	0					
ANR	70427	IdentifierDeclType	int		70348	0					
ANR	70428	Identifier	len		70348	1					
ANR	70429	AssignmentExpression	len = r_list_length ( neigh )		70348	2		=			
ANR	70430	Identifier	len		70348	0					
ANR	70431	CallExpression	r_list_length ( neigh )		70348	1					
ANR	70432	Callee	r_list_length		70348	0					
ANR	70433	Identifier	r_list_length		70348	0					
ANR	70434	ArgumentList	neigh		70348	1					
ANR	70435	Argument	neigh		70348	0					
ANR	70436	Identifier	neigh		70348	0					
ANR	70437	IfStatement	if ( len == 0 )		70348	7					
ANR	70438	Condition	len == 0	1306:5:33530:33537	70348	0	True				
ANR	70439	EqualityExpression	len == 0		70348	0		==			
ANR	70440	Identifier	len		70348	0					
ANR	70441	PrimaryExpression	0		70348	1					
ANR	70442	CompoundStatement		15:15:313:313	70348	1					
ANR	70443	ReturnStatement	return ;	1307:2:33544:33550	70348	0	True				
ANR	70444	IdentifierDeclStatement	int sum_x = 0 ;	1310:1:33557:33570	70348	8	True				
ANR	70445	IdentifierDecl	sum_x = 0		70348	0					
ANR	70446	IdentifierDeclType	int		70348	0					
ANR	70447	Identifier	sum_x		70348	1					
ANR	70448	AssignmentExpression	sum_x = 0		70348	2		=			
ANR	70449	Identifier	sum_x		70348	0					
ANR	70450	PrimaryExpression	0		70348	1					
ANR	70451	Statement	graph_foreach_anode	1311:1:33573:33591	70348	9	True				
ANR	70452	Statement	(	1311:21:33593:33593	70348	10	True				
ANR	70453	Statement	neigh	1311:22:33594:33598	70348	11	True				
ANR	70454	Statement	","	1311:27:33599:33599	70348	12	True				
ANR	70455	Statement	itk	1311:29:33601:33603	70348	13	True				
ANR	70456	Statement	","	1311:32:33604:33604	70348	14	True				
ANR	70457	Statement	gk	1311:34:33606:33607	70348	15	True				
ANR	70458	Statement	","	1311:36:33608:33608	70348	16	True				
ANR	70459	Statement	ak	1311:38:33610:33611	70348	17	True				
ANR	70460	Statement	)	1311:40:33612:33612	70348	18	True				
ANR	70461	CompoundStatement		20:42:387:387	70348	19					
ANR	70462	IfStatement	if ( ak -> is_reversed )		70348	0					
ANR	70463	Condition	ak -> is_reversed	1312:6:33622:33636	70348	0	True				
ANR	70464	PtrMemberAccess	ak -> is_reversed		70348	0					
ANR	70465	Identifier	ak		70348	0					
ANR	70466	Identifier	is_reversed		70348	1					
ANR	70467	CompoundStatement		21:23:412:412	70348	1					
ANR	70468	ExpressionStatement	len --	1313:3:33644:33649	70348	0	True				
ANR	70469	PostIncDecOperationExpression	len --		70348	0					
ANR	70470	Identifier	len		70348	0					
ANR	70471	IncDec	--		70348	1					
ANR	70472	ContinueStatement	continue ;	1314:3:33654:33662	70348	1	True				
ANR	70473	ExpressionStatement	sum_x += ak -> x	1316:2:33670:33684	70348	1	True				
ANR	70474	AssignmentExpression	sum_x += ak -> x		70348	0		+=			
ANR	70475	Identifier	sum_x		70348	0					
ANR	70476	PtrMemberAccess	ak -> x		70348	1					
ANR	70477	Identifier	ak		70348	0					
ANR	70478	Identifier	x		70348	1					
ANR	70479	IfStatement	if ( len == 0 )		70348	20					
ANR	70480	Condition	len == 0	1319:5:33695:33702	70348	0	True				
ANR	70481	EqualityExpression	len == 0		70348	0		==			
ANR	70482	Identifier	len		70348	0					
ANR	70483	PrimaryExpression	0		70348	1					
ANR	70484	CompoundStatement		28:15:478:478	70348	1					
ANR	70485	ReturnStatement	return ;	1320:2:33709:33715	70348	0	True				
ANR	70486	IfStatement	if ( av )		70348	21					
ANR	70487	Condition	av	1322:5:33725:33726	70348	0	True				
ANR	70488	Identifier	av		70348	0					
ANR	70489	CompoundStatement		31:9:502:502	70348	1					
ANR	70490	ExpressionStatement	av -> x = sum_x / len	1323:2:33733:33752	70348	0	True				
ANR	70491	AssignmentExpression	av -> x = sum_x / len		70348	0		=			
ANR	70492	PtrMemberAccess	av -> x		70348	0					
ANR	70493	Identifier	av		70348	0					
ANR	70494	Identifier	x		70348	1					
ANR	70495	MultiplicativeExpression	sum_x / len		70348	1		/			
ANR	70496	Identifier	sum_x		70348	0					
ANR	70497	Identifier	len		70348	1					
ANR	70498	IfStatement	if ( bm )		70348	22					
ANR	70499	Condition	bm	1325:5:33762:33763	70348	0	True				
ANR	70500	Identifier	bm		70348	0					
ANR	70501	CompoundStatement		35:2:543:577	70348	1					
ANR	70502	IdentifierDeclStatement	const RANode * bma = get_anode ( bm ) ;	1326:2:33770:33804	70348	0	True				
ANR	70503	IdentifierDecl	* bma = get_anode ( bm )		70348	0					
ANR	70504	IdentifierDeclType	const RANode *		70348	0					
ANR	70505	Identifier	bma		70348	1					
ANR	70506	AssignmentExpression	* bma = get_anode ( bm )		70348	2		=			
ANR	70507	Identifier	bma		70348	0					
ANR	70508	CallExpression	get_anode ( bm )		70348	1					
ANR	70509	Callee	get_anode		70348	0					
ANR	70510	Identifier	get_anode		70348	0					
ANR	70511	ArgumentList	bm		70348	1					
ANR	70512	Argument	bm		70348	0					
ANR	70513	Identifier	bm		70348	0					
ANR	70514	ExpressionStatement	"av -> x = R_MAX ( av -> x , bma -> x + dist_nodes ( g , bm , v ) )"	1327:2:33808:33861	70348	1	True				
ANR	70515	AssignmentExpression	"av -> x = R_MAX ( av -> x , bma -> x + dist_nodes ( g , bm , v ) )"		70348	0		=			
ANR	70516	PtrMemberAccess	av -> x		70348	0					
ANR	70517	Identifier	av		70348	0					
ANR	70518	Identifier	x		70348	1					
ANR	70519	CallExpression	"R_MAX ( av -> x , bma -> x + dist_nodes ( g , bm , v ) )"		70348	1					
ANR	70520	Callee	R_MAX		70348	0					
ANR	70521	Identifier	R_MAX		70348	0					
ANR	70522	ArgumentList	av -> x		70348	1					
ANR	70523	Argument	av -> x		70348	0					
ANR	70524	PtrMemberAccess	av -> x		70348	0					
ANR	70525	Identifier	av		70348	0					
ANR	70526	Identifier	x		70348	1					
ANR	70527	Argument	"bma -> x + dist_nodes ( g , bm , v )"		70348	1					
ANR	70528	AdditiveExpression	"bma -> x + dist_nodes ( g , bm , v )"		70348	0		+			
ANR	70529	PtrMemberAccess	bma -> x		70348	0					
ANR	70530	Identifier	bma		70348	0					
ANR	70531	Identifier	x		70348	1					
ANR	70532	CallExpression	"dist_nodes ( g , bm , v )"		70348	1					
ANR	70533	Callee	dist_nodes		70348	0					
ANR	70534	Identifier	dist_nodes		70348	0					
ANR	70535	ArgumentList	g		70348	1					
ANR	70536	Argument	g		70348	0					
ANR	70537	Identifier	g		70348	0					
ANR	70538	Argument	bm		70348	1					
ANR	70539	Identifier	bm		70348	0					
ANR	70540	Argument	v		70348	2					
ANR	70541	Identifier	v		70348	0					
ANR	70542	IfStatement	if ( bp )		70348	23					
ANR	70543	Condition	bp	1329:5:33871:33872	70348	0	True				
ANR	70544	Identifier	bp		70348	0					
ANR	70545	CompoundStatement		39:2:652:686	70348	1					
ANR	70546	IdentifierDeclStatement	const RANode * bpa = get_anode ( bp ) ;	1330:2:33879:33913	70348	0	True				
ANR	70547	IdentifierDecl	* bpa = get_anode ( bp )		70348	0					
ANR	70548	IdentifierDeclType	const RANode *		70348	0					
ANR	70549	Identifier	bpa		70348	1					
ANR	70550	AssignmentExpression	* bpa = get_anode ( bp )		70348	2		=			
ANR	70551	Identifier	bpa		70348	0					
ANR	70552	CallExpression	get_anode ( bp )		70348	1					
ANR	70553	Callee	get_anode		70348	0					
ANR	70554	Identifier	get_anode		70348	0					
ANR	70555	ArgumentList	bp		70348	1					
ANR	70556	Argument	bp		70348	0					
ANR	70557	Identifier	bp		70348	0					
ANR	70558	ExpressionStatement	"av -> x = R_MIN ( av -> x , bpa -> x - dist_nodes ( g , v , bp ) )"	1331:2:33917:33970	70348	1	True				
ANR	70559	AssignmentExpression	"av -> x = R_MIN ( av -> x , bpa -> x - dist_nodes ( g , v , bp ) )"		70348	0		=			
ANR	70560	PtrMemberAccess	av -> x		70348	0					
ANR	70561	Identifier	av		70348	0					
ANR	70562	Identifier	x		70348	1					
ANR	70563	CallExpression	"R_MIN ( av -> x , bpa -> x - dist_nodes ( g , v , bp ) )"		70348	1					
ANR	70564	Callee	R_MIN		70348	0					
ANR	70565	Identifier	R_MIN		70348	0					
ANR	70566	ArgumentList	av -> x		70348	1					
ANR	70567	Argument	av -> x		70348	0					
ANR	70568	PtrMemberAccess	av -> x		70348	0					
ANR	70569	Identifier	av		70348	0					
ANR	70570	Identifier	x		70348	1					
ANR	70571	Argument	"bpa -> x - dist_nodes ( g , v , bp )"		70348	1					
ANR	70572	AdditiveExpression	"bpa -> x - dist_nodes ( g , v , bp )"		70348	0		-			
ANR	70573	PtrMemberAccess	bpa -> x		70348	0					
ANR	70574	Identifier	bpa		70348	0					
ANR	70575	Identifier	x		70348	1					
ANR	70576	CallExpression	"dist_nodes ( g , v , bp )"		70348	1					
ANR	70577	Callee	dist_nodes		70348	0					
ANR	70578	Identifier	dist_nodes		70348	0					
ANR	70579	ArgumentList	g		70348	1					
ANR	70580	Argument	g		70348	0					
ANR	70581	Identifier	g		70348	0					
ANR	70582	Argument	v		70348	1					
ANR	70583	Identifier	v		70348	0					
ANR	70584	Argument	bp		70348	2					
ANR	70585	Identifier	bp		70348	0					
ANR	70586	ReturnType	static void		70348	1					
ANR	70587	Identifier	place_single		70348	2					
ANR	70588	ParameterList	"const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int va"		70348	3					
ANR	70589	Parameter	const RAGraph * g	1292:25:33136:33151	70348	0	True				
ANR	70590	ParameterType	const RAGraph *		70348	0					
ANR	70591	Identifier	g		70348	1					
ANR	70592	Parameter	int l	1292:43:33154:33158	70348	1	True				
ANR	70593	ParameterType	int		70348	0					
ANR	70594	Identifier	l		70348	1					
ANR	70595	Parameter	const RGraphNode * bm	1292:50:33161:33180	70348	2	True				
ANR	70596	ParameterType	const RGraphNode *		70348	0					
ANR	70597	Identifier	bm		70348	1					
ANR	70598	Parameter	const RGraphNode * bp	1292:72:33183:33202	70348	3	True				
ANR	70599	ParameterType	const RGraphNode *		70348	0					
ANR	70600	Identifier	bp		70348	1					
ANR	70601	Parameter	int from_up	1292:94:33205:33215	70348	4	True				
ANR	70602	ParameterType	int		70348	0					
ANR	70603	Identifier	from_up		70348	1					
ANR	70604	Parameter	int va	1292:107:33218:33223	70348	5	True				
ANR	70605	ParameterType	int		70348	0					
ANR	70606	Identifier	va		70348	1					
ANR	70607	CFGEntryNode	ENTRY		70348		True				
ANR	70608	CFGExitNode	EXIT		70348		True				
ANR	70609	CFGErrorNode	ERROR		70348		True				
ANR	70610	Symbol	dist_nodes		70348						
ANR	70611	Symbol	* bpa		70348						
ANR	70612	Symbol	from_up		70348						
ANR	70613	Symbol	r_graph_get_neighbours		70348						
ANR	70614	Symbol	* g -> layers [ l ] . nodes		70348						
ANR	70615	Symbol	bm		70348						
ANR	70616	Symbol	bp		70348						
ANR	70617	Symbol	neigh		70348						
ANR	70618	Symbol	r_graph_innodes		70348						
ANR	70619	Symbol	sum_x		70348						
ANR	70620	Symbol	bpa		70348						
ANR	70621	Symbol	len		70348						
ANR	70622	Symbol	ak -> x		70348						
ANR	70623	Symbol	g -> graph		70348						
ANR	70624	Symbol	* * l		70348						
ANR	70625	Symbol	* bma		70348						
ANR	70626	Symbol	itk		70348						
ANR	70627	Symbol	get_anode		70348						
ANR	70628	Symbol	gk		70348						
ANR	70629	Symbol	* * g		70348						
ANR	70630	Symbol	av -> x		70348						
ANR	70631	Symbol	ak -> is_reversed		70348						
ANR	70632	Symbol	g		70348						
ANR	70633	Symbol	ak		70348						
ANR	70634	Symbol	R_MIN		70348						
ANR	70635	Symbol	va		70348						
ANR	70636	Symbol	bma -> x		70348						
ANR	70637	Symbol	l		70348						
ANR	70638	Symbol	g -> layers [ l ] . nodes		70348						
ANR	70639	Symbol	* g		70348						
ANR	70640	Symbol	* va		70348						
ANR	70641	Symbol	* ak		70348						
ANR	70642	Symbol	av		70348						
ANR	70643	Symbol	* l		70348						
ANR	70644	Symbol	v		70348						
ANR	70645	Symbol	bma		70348						
ANR	70646	Symbol	* av		70348						
ANR	70647	Symbol	R_MAX		70348						
ANR	70648	Symbol	* * * g		70348						
ANR	70649	Symbol	* g -> layers		70348						
ANR	70650	Symbol	g -> layers		70348						
ANR	70651	Symbol	* * g -> layers		70348						
ANR	70652	Symbol	bpa -> x		70348						
ANR	70653	Symbol	r_list_length		70348						
ANR	70654	Function	RM_listcmp	1335:0:33978:34081							
ANR	70655	FunctionDef	"RM_listcmp (const struct len_pos_t * a , const struct len_pos_t * b)"		70654	0					
ANR	70656	CompoundStatement		1335:76:34054:34081	70654	0					
ANR	70657	ReturnStatement	return a -> pos < b -> pos ;	1336:1:34057:34079	70654	0	True				
ANR	70658	RelationalExpression	a -> pos < b -> pos		70654	0		<			
ANR	70659	PtrMemberAccess	a -> pos		70654	0					
ANR	70660	Identifier	a		70654	0					
ANR	70661	Identifier	pos		70654	1					
ANR	70662	PtrMemberAccess	b -> pos		70654	1					
ANR	70663	Identifier	b		70654	0					
ANR	70664	Identifier	pos		70654	1					
ANR	70665	ReturnType	static int		70654	1					
ANR	70666	Identifier	RM_listcmp		70654	2					
ANR	70667	ParameterList	"const struct len_pos_t * a , const struct len_pos_t * b"		70654	3					
ANR	70668	Parameter	const struct len_pos_t * a	1335:22:34000:34024	70654	0	True				
ANR	70669	ParameterType	const struct len_pos_t *		70654	0					
ANR	70670	Identifier	a		70654	1					
ANR	70671	Parameter	const struct len_pos_t * b	1335:49:34027:34051	70654	1	True				
ANR	70672	ParameterType	const struct len_pos_t *		70654	0					
ANR	70673	Identifier	b		70654	1					
ANR	70674	CFGEntryNode	ENTRY		70654		True				
ANR	70675	CFGExitNode	EXIT		70654		True				
ANR	70676	Symbol	a		70654						
ANR	70677	Symbol	b		70654						
ANR	70678	Symbol	a -> pos		70654						
ANR	70679	Symbol	* a		70654						
ANR	70680	Symbol	* b		70654						
ANR	70681	Symbol	b -> pos		70654						
ANR	70682	Function	RP_listcmp	1339:0:34084:34188							
ANR	70683	FunctionDef	"RP_listcmp (const struct len_pos_t * a , const struct len_pos_t * b)"		70682	0					
ANR	70684	CompoundStatement		1339:76:34160:34188	70682	0					
ANR	70685	ReturnStatement	return a -> pos >= b -> pos ;	1340:1:34163:34186	70682	0	True				
ANR	70686	RelationalExpression	a -> pos >= b -> pos		70682	0		>=			
ANR	70687	PtrMemberAccess	a -> pos		70682	0					
ANR	70688	Identifier	a		70682	0					
ANR	70689	Identifier	pos		70682	1					
ANR	70690	PtrMemberAccess	b -> pos		70682	1					
ANR	70691	Identifier	b		70682	0					
ANR	70692	Identifier	pos		70682	1					
ANR	70693	ReturnType	static int		70682	1					
ANR	70694	Identifier	RP_listcmp		70682	2					
ANR	70695	ParameterList	"const struct len_pos_t * a , const struct len_pos_t * b"		70682	3					
ANR	70696	Parameter	const struct len_pos_t * a	1339:22:34106:34130	70682	0	True				
ANR	70697	ParameterType	const struct len_pos_t *		70682	0					
ANR	70698	Identifier	a		70682	1					
ANR	70699	Parameter	const struct len_pos_t * b	1339:49:34133:34157	70682	1	True				
ANR	70700	ParameterType	const struct len_pos_t *		70682	0					
ANR	70701	Identifier	b		70682	1					
ANR	70702	CFGEntryNode	ENTRY		70682		True				
ANR	70703	CFGExitNode	EXIT		70682		True				
ANR	70704	Symbol	a		70682						
ANR	70705	Symbol	b		70682						
ANR	70706	Symbol	a -> pos		70682						
ANR	70707	Symbol	* a		70682						
ANR	70708	Symbol	* b		70682						
ANR	70709	Symbol	b -> pos		70682						
ANR	70710	Function	collect_changes	1343:0:34191:35854							
ANR	70711	FunctionDef	"collect_changes (const RAGraph * g , int l , const RGraphNode * b , int from_up , int s , int e , RList * list , int is_left)"		70710	0					
ANR	70712	CompoundStatement		1343:127:34318:35854	70710	0					
ANR	70713	IdentifierDeclStatement	const RGraphNode * vt = g -> layers [ l ] . nodes [ e - 1 ] ;	1344:1:34321:34369	70710	0	True				
ANR	70714	IdentifierDecl	* vt = g -> layers [ l ] . nodes [ e - 1 ]		70710	0					
ANR	70715	IdentifierDeclType	const RGraphNode *		70710	0					
ANR	70716	Identifier	vt		70710	1					
ANR	70717	AssignmentExpression	* vt = g -> layers [ l ] . nodes [ e - 1 ]		70710	2		=			
ANR	70718	Identifier	vt		70710	0					
ANR	70719	ArrayIndexing	g -> layers [ l ] . nodes [ e - 1 ]		70710	1					
ANR	70720	MemberAccess	g -> layers [ l ] . nodes		70710	0					
ANR	70721	ArrayIndexing	g -> layers [ l ]		70710	0					
ANR	70722	PtrMemberAccess	g -> layers		70710	0					
ANR	70723	Identifier	g		70710	0					
ANR	70724	Identifier	layers		70710	1					
ANR	70725	Identifier	l		70710	1					
ANR	70726	Identifier	nodes		70710	1					
ANR	70727	AdditiveExpression	e - 1		70710	1		-			
ANR	70728	Identifier	e		70710	0					
ANR	70729	PrimaryExpression	1		70710	1					
ANR	70730	IdentifierDeclStatement	const RGraphNode * vtp = g -> layers [ l ] . nodes [ s ] ;	1345:1:34372:34417	70710	1	True				
ANR	70731	IdentifierDecl	* vtp = g -> layers [ l ] . nodes [ s ]		70710	0					
ANR	70732	IdentifierDeclType	const RGraphNode *		70710	0					
ANR	70733	Identifier	vtp		70710	1					
ANR	70734	AssignmentExpression	* vtp = g -> layers [ l ] . nodes [ s ]		70710	2		=			
ANR	70735	Identifier	vtp		70710	0					
ANR	70736	ArrayIndexing	g -> layers [ l ] . nodes [ s ]		70710	1					
ANR	70737	MemberAccess	g -> layers [ l ] . nodes		70710	0					
ANR	70738	ArrayIndexing	g -> layers [ l ]		70710	0					
ANR	70739	PtrMemberAccess	g -> layers		70710	0					
ANR	70740	Identifier	g		70710	0					
ANR	70741	Identifier	layers		70710	1					
ANR	70742	Identifier	l		70710	1					
ANR	70743	Identifier	nodes		70710	1					
ANR	70744	Identifier	s		70710	1					
ANR	70745	IdentifierDeclStatement	struct len_pos_t * cx ;	1346:1:34420:34440	70710	2	True				
ANR	70746	IdentifierDecl	* cx		70710	0					
ANR	70747	IdentifierDeclType	struct len_pos_t *		70710	0					
ANR	70748	Identifier	cx		70710	1					
ANR	70749	IdentifierDeclStatement	int i ;	1347:1:34443:34448	70710	3	True				
ANR	70750	IdentifierDecl	i		70710	0					
ANR	70751	IdentifierDeclType	int		70710	0					
ANR	70752	Identifier	i		70710	1					
ANR	70753	IdentifierDeclStatement	RListComparator lcmp = is_left ? ( RListComparator ) RM_listcmp : ( RListComparator ) RP_listcmp ;	1349:1:34452:34542	70710	4	True				
ANR	70754	IdentifierDecl	lcmp = is_left ? ( RListComparator ) RM_listcmp : ( RListComparator ) RP_listcmp		70710	0					
ANR	70755	IdentifierDeclType	RListComparator		70710	0					
ANR	70756	Identifier	lcmp		70710	1					
ANR	70757	AssignmentExpression	lcmp = is_left ? ( RListComparator ) RM_listcmp : ( RListComparator ) RP_listcmp		70710	2		=			
ANR	70758	Identifier	lcmp		70710	0					
ANR	70759	ConditionalExpression	is_left ? ( RListComparator ) RM_listcmp : ( RListComparator ) RP_listcmp		70710	1					
ANR	70760	Condition	is_left		70710	0					
ANR	70761	Identifier	is_left		70710	0					
ANR	70762	CastExpression	( RListComparator ) RM_listcmp		70710	1					
ANR	70763	CastTarget	RListComparator		70710	0					
ANR	70764	Identifier	RM_listcmp		70710	1					
ANR	70765	CastExpression	( RListComparator ) RP_listcmp		70710	2					
ANR	70766	CastTarget	RListComparator		70710	0					
ANR	70767	Identifier	RP_listcmp		70710	1					
ANR	70768	ForStatement	for ( i = is_left ? s : e - 1 ; ( is_left && i < e ) || ( ! is_left && i >= s ) ; i = is_left ? i + 1 : i - 1 )		70710	5					
ANR	70769	ForInit	i = is_left ? s : e - 1 ;	1351:6:34551:34572	70710	0	True				
ANR	70770	AssignmentExpression	i = is_left ? s : e - 1		70710	0		=			
ANR	70771	Identifier	i		70710	0					
ANR	70772	ConditionalExpression	is_left ? s : e - 1		70710	1					
ANR	70773	Condition	is_left		70710	0					
ANR	70774	Identifier	is_left		70710	0					
ANR	70775	Identifier	s		70710	1					
ANR	70776	AdditiveExpression	e - 1		70710	2		-			
ANR	70777	Identifier	e		70710	0					
ANR	70778	PrimaryExpression	1		70710	1					
ANR	70779	Condition	( is_left && i < e ) || ( ! is_left && i >= s )	1351:29:34574:34615	70710	1	True				
ANR	70780	OrExpression	( is_left && i < e ) || ( ! is_left && i >= s )		70710	0		||			
ANR	70781	AndExpression	is_left && i < e		70710	0		&&			
ANR	70782	Identifier	is_left		70710	0					
ANR	70783	RelationalExpression	i < e		70710	1		<			
ANR	70784	Identifier	i		70710	0					
ANR	70785	Identifier	e		70710	1					
ANR	70786	AndExpression	! is_left && i >= s		70710	1		&&			
ANR	70787	UnaryOperationExpression	! is_left		70710	0					
ANR	70788	UnaryOperator	!		70710	0					
ANR	70789	Identifier	is_left		70710	1					
ANR	70790	RelationalExpression	i >= s		70710	1		>=			
ANR	70791	Identifier	i		70710	0					
ANR	70792	Identifier	s		70710	1					
ANR	70793	AssignmentExpression	i = is_left ? i + 1 : i - 1	1351:73:34618:34642	70710	2	True	=			
ANR	70794	Identifier	i		70710	0					
ANR	70795	ConditionalExpression	is_left ? i + 1 : i - 1		70710	1					
ANR	70796	Condition	is_left		70710	0					
ANR	70797	Identifier	is_left		70710	0					
ANR	70798	AdditiveExpression	i + 1		70710	1		+			
ANR	70799	Identifier	i		70710	0					
ANR	70800	PrimaryExpression	1		70710	1					
ANR	70801	AdditiveExpression	i - 1		70710	2		-			
ANR	70802	Identifier	i		70710	0					
ANR	70803	PrimaryExpression	1		70710	1					
ANR	70804	CompoundStatement		14:2:470:479	70710	3					
ANR	70805	IdentifierDeclStatement	"const RGraphNode * v , * vi = g -> layers [ l ] . nodes [ i ] ;"	1352:2:34649:34697	70710	0	True				
ANR	70806	IdentifierDecl	* v		70710	0					
ANR	70807	IdentifierDeclType	const RGraphNode *		70710	0					
ANR	70808	Identifier	v		70710	1					
ANR	70809	IdentifierDecl	* vi = g -> layers [ l ] . nodes [ i ]		70710	1					
ANR	70810	IdentifierDeclType	const RGraphNode *		70710	0					
ANR	70811	Identifier	vi		70710	1					
ANR	70812	AssignmentExpression	* vi = g -> layers [ l ] . nodes [ i ]		70710	2		=			
ANR	70813	Identifier	vi		70710	0					
ANR	70814	ArrayIndexing	g -> layers [ l ] . nodes [ i ]		70710	1					
ANR	70815	MemberAccess	g -> layers [ l ] . nodes		70710	0					
ANR	70816	ArrayIndexing	g -> layers [ l ]		70710	0					
ANR	70817	PtrMemberAccess	g -> layers		70710	0					
ANR	70818	Identifier	g		70710	0					
ANR	70819	Identifier	layers		70710	1					
ANR	70820	Identifier	l		70710	1					
ANR	70821	Identifier	nodes		70710	1					
ANR	70822	Identifier	i		70710	1					
ANR	70823	IdentifierDeclStatement	"const RANode * av , * avi = get_anode ( vi ) ;"	1353:2:34701:34740	70710	1	True				
ANR	70824	IdentifierDecl	* av		70710	0					
ANR	70825	IdentifierDeclType	const RANode *		70710	0					
ANR	70826	Identifier	av		70710	1					
ANR	70827	IdentifierDecl	* avi = get_anode ( vi )		70710	1					
ANR	70828	IdentifierDeclType	const RANode *		70710	0					
ANR	70829	Identifier	avi		70710	1					
ANR	70830	AssignmentExpression	* avi = get_anode ( vi )		70710	2		=			
ANR	70831	Identifier	avi		70710	0					
ANR	70832	CallExpression	get_anode ( vi )		70710	1					
ANR	70833	Callee	get_anode		70710	0					
ANR	70834	Identifier	get_anode		70710	0					
ANR	70835	ArgumentList	vi		70710	1					
ANR	70836	Argument	vi		70710	0					
ANR	70837	Identifier	vi		70710	0					
ANR	70838	IdentifierDeclStatement	const RList * neigh ;	1354:2:34744:34762	70710	2	True				
ANR	70839	IdentifierDecl	* neigh		70710	0					
ANR	70840	IdentifierDeclType	const RList *		70710	0					
ANR	70841	Identifier	neigh		70710	1					
ANR	70842	IdentifierDeclStatement	const RListIter * it ;	1355:2:34766:34785	70710	3	True				
ANR	70843	IdentifierDecl	* it		70710	0					
ANR	70844	IdentifierDeclType	const RListIter *		70710	0					
ANR	70845	Identifier	it		70710	1					
ANR	70846	IdentifierDeclStatement	int c = 0 ;	1356:2:34789:34798	70710	4	True				
ANR	70847	IdentifierDecl	c = 0		70710	0					
ANR	70848	IdentifierDeclType	int		70710	0					
ANR	70849	Identifier	c		70710	1					
ANR	70850	AssignmentExpression	c = 0		70710	2		=			
ANR	70851	Identifier	c		70710	0					
ANR	70852	PrimaryExpression	0		70710	1					
ANR	70853	IfStatement	if ( ! avi )		70710	5					
ANR	70854	Condition	! avi	1358:6:34807:34810	70710	0	True				
ANR	70855	UnaryOperationExpression	! avi		70710	0					
ANR	70856	UnaryOperator	!		70710	0					
ANR	70857	Identifier	avi		70710	1					
ANR	70858	CompoundStatement		16:12:494:494	70710	1					
ANR	70859	ContinueStatement	continue ;	1359:3:34818:34826	70710	0	True				
ANR	70860	ExpressionStatement	"neigh = from_up ? r_graph_innodes ( g -> graph , vi ) : r_graph_get_neighbours ( g -> graph , vi )"	1361:2:34834:34935	70710	6	True				
ANR	70861	AssignmentExpression	"neigh = from_up ? r_graph_innodes ( g -> graph , vi ) : r_graph_get_neighbours ( g -> graph , vi )"		70710	0		=			
ANR	70862	Identifier	neigh		70710	0					
ANR	70863	ConditionalExpression	"from_up ? r_graph_innodes ( g -> graph , vi ) : r_graph_get_neighbours ( g -> graph , vi )"		70710	1					
ANR	70864	Condition	from_up		70710	0					
ANR	70865	Identifier	from_up		70710	0					
ANR	70866	CallExpression	"r_graph_innodes ( g -> graph , vi )"		70710	1					
ANR	70867	Callee	r_graph_innodes		70710	0					
ANR	70868	Identifier	r_graph_innodes		70710	0					
ANR	70869	ArgumentList	g -> graph		70710	1					
ANR	70870	Argument	g -> graph		70710	0					
ANR	70871	PtrMemberAccess	g -> graph		70710	0					
ANR	70872	Identifier	g		70710	0					
ANR	70873	Identifier	graph		70710	1					
ANR	70874	Argument	vi		70710	1					
ANR	70875	Identifier	vi		70710	0					
ANR	70876	CallExpression	"r_graph_get_neighbours ( g -> graph , vi )"		70710	2					
ANR	70877	Callee	r_graph_get_neighbours		70710	0					
ANR	70878	Identifier	r_graph_get_neighbours		70710	0					
ANR	70879	ArgumentList	g -> graph		70710	1					
ANR	70880	Argument	g -> graph		70710	0					
ANR	70881	PtrMemberAccess	g -> graph		70710	0					
ANR	70882	Identifier	g		70710	0					
ANR	70883	Identifier	graph		70710	1					
ANR	70884	Argument	vi		70710	1					
ANR	70885	Identifier	vi		70710	0					
ANR	70886	Statement	graph_foreach_anode	1365:2:34940:34958	70710	7	True				
ANR	70887	Statement	(	1365:22:34960:34960	70710	8	True				
ANR	70888	Statement	neigh	1365:23:34961:34965	70710	9	True				
ANR	70889	Statement	","	1365:28:34966:34966	70710	10	True				
ANR	70890	Statement	it	1365:30:34968:34969	70710	11	True				
ANR	70891	Statement	","	1365:32:34970:34970	70710	12	True				
ANR	70892	Statement	v	1365:34:34972:34972	70710	13	True				
ANR	70893	Statement	","	1365:35:34973:34973	70710	14	True				
ANR	70894	Statement	av	1365:37:34975:34976	70710	15	True				
ANR	70895	Statement	)	1365:39:34977:34977	70710	16	True				
ANR	70896	CompoundStatement		23:41:660:660	70710	17					
ANR	70897	IfStatement	if ( ( is_left && av -> x >= avi -> x ) || ( ! is_left && av -> x <= avi -> x ) )		70710	0					
ANR	70898	Condition	( is_left && av -> x >= avi -> x ) || ( ! is_left && av -> x <= avi -> x )	1366:7:34988:35048	70710	0	True				
ANR	70899	OrExpression	( is_left && av -> x >= avi -> x ) || ( ! is_left && av -> x <= avi -> x )		70710	0		||			
ANR	70900	AndExpression	is_left && av -> x >= avi -> x		70710	0		&&			
ANR	70901	Identifier	is_left		70710	0					
ANR	70902	RelationalExpression	av -> x >= avi -> x		70710	1		>=			
ANR	70903	PtrMemberAccess	av -> x		70710	0					
ANR	70904	Identifier	av		70710	0					
ANR	70905	Identifier	x		70710	1					
ANR	70906	PtrMemberAccess	avi -> x		70710	1					
ANR	70907	Identifier	avi		70710	0					
ANR	70908	Identifier	x		70710	1					
ANR	70909	AndExpression	! is_left && av -> x <= avi -> x		70710	1		&&			
ANR	70910	UnaryOperationExpression	! is_left		70710	0					
ANR	70911	UnaryOperator	!		70710	0					
ANR	70912	Identifier	is_left		70710	1					
ANR	70913	RelationalExpression	av -> x <= avi -> x		70710	1		<=			
ANR	70914	PtrMemberAccess	av -> x		70710	0					
ANR	70915	Identifier	av		70710	0					
ANR	70916	Identifier	x		70710	1					
ANR	70917	PtrMemberAccess	avi -> x		70710	1					
ANR	70918	Identifier	avi		70710	0					
ANR	70919	Identifier	x		70710	1					
ANR	70920	CompoundStatement		24:70:732:732	70710	1					
ANR	70921	ExpressionStatement	c ++	1367:4:35057:35060	70710	0	True				
ANR	70922	PostIncDecOperationExpression	c ++		70710	0					
ANR	70923	Identifier	c		70710	0					
ANR	70924	IncDec	++		70710	1					
ANR	70925	ElseStatement	else		70710	0					
ANR	70926	CompoundStatement		26:10:753:753	70710	0					
ANR	70927	Statement	cx	1369:4:35078:35079	70710	0	True				
ANR	70928	Statement	=	1369:7:35081:35081	70710	1	True				
ANR	70929	Statement	R_NEW	1369:9:35083:35087	70710	2	True				
ANR	70930	Statement	(	1369:15:35089:35089	70710	3	True				
ANR	70931	Statement	struct	1369:16:35090:35095	70710	4	True				
ANR	70932	Statement	len_pos_t	1369:23:35097:35105	70710	5	True				
ANR	70933	Statement	)	1369:32:35106:35106	70710	6	True				
ANR	70934	ExpressionStatement		1369:33:35107:35107	70710	7	True				
ANR	70935	ExpressionStatement	c --	1370:4:35113:35116	70710	8	True				
ANR	70936	PostIncDecOperationExpression	c --		70710	0					
ANR	70937	Identifier	c		70710	0					
ANR	70938	IncDec	--		70710	1					
ANR	70939	ExpressionStatement	cx -> len = 2	1371:4:35122:35133	70710	9	True				
ANR	70940	AssignmentExpression	cx -> len = 2		70710	0		=			
ANR	70941	PtrMemberAccess	cx -> len		70710	0					
ANR	70942	Identifier	cx		70710	0					
ANR	70943	Identifier	len		70710	1					
ANR	70944	PrimaryExpression	2		70710	1					
ANR	70945	ExpressionStatement	cx -> pos = av -> x	1372:4:35139:35154	70710	10	True				
ANR	70946	AssignmentExpression	cx -> pos = av -> x		70710	0		=			
ANR	70947	PtrMemberAccess	cx -> pos		70710	0					
ANR	70948	Identifier	cx		70710	0					
ANR	70949	Identifier	pos		70710	1					
ANR	70950	PtrMemberAccess	av -> x		70710	1					
ANR	70951	Identifier	av		70710	0					
ANR	70952	Identifier	x		70710	1					
ANR	70953	IfStatement	if ( is_left )		70710	11					
ANR	70954	Condition	is_left	1373:8:35164:35170	70710	0	True				
ANR	70955	Identifier	is_left		70710	0					
ANR	70956	CompoundStatement		31:17:854:854	70710	1					
ANR	70957	ExpressionStatement	"cx -> pos += dist_nodes ( g , vi , vt )"	1374:5:35180:35213	70710	0	True				
ANR	70958	AssignmentExpression	"cx -> pos += dist_nodes ( g , vi , vt )"		70710	0		+=			
ANR	70959	PtrMemberAccess	cx -> pos		70710	0					
ANR	70960	Identifier	cx		70710	0					
ANR	70961	Identifier	pos		70710	1					
ANR	70962	CallExpression	"dist_nodes ( g , vi , vt )"		70710	1					
ANR	70963	Callee	dist_nodes		70710	0					
ANR	70964	Identifier	dist_nodes		70710	0					
ANR	70965	ArgumentList	g		70710	1					
ANR	70966	Argument	g		70710	0					
ANR	70967	Identifier	g		70710	0					
ANR	70968	Argument	vi		70710	1					
ANR	70969	Identifier	vi		70710	0					
ANR	70970	Argument	vt		70710	2					
ANR	70971	Identifier	vt		70710	0					
ANR	70972	ElseStatement	else		70710	0					
ANR	70973	CompoundStatement		33:11:907:907	70710	0					
ANR	70974	ExpressionStatement	"cx -> pos -= dist_nodes ( g , vtp , vi )"	1376:5:35233:35267	70710	0	True				
ANR	70975	AssignmentExpression	"cx -> pos -= dist_nodes ( g , vtp , vi )"		70710	0		-=			
ANR	70976	PtrMemberAccess	cx -> pos		70710	0					
ANR	70977	Identifier	cx		70710	0					
ANR	70978	Identifier	pos		70710	1					
ANR	70979	CallExpression	"dist_nodes ( g , vtp , vi )"		70710	1					
ANR	70980	Callee	dist_nodes		70710	0					
ANR	70981	Identifier	dist_nodes		70710	0					
ANR	70982	ArgumentList	g		70710	1					
ANR	70983	Argument	g		70710	0					
ANR	70984	Identifier	g		70710	0					
ANR	70985	Argument	vtp		70710	1					
ANR	70986	Identifier	vtp		70710	0					
ANR	70987	Argument	vi		70710	2					
ANR	70988	Identifier	vi		70710	0					
ANR	70989	ExpressionStatement	"r_list_add_sorted ( list , cx , lcmp )"	1378:4:35279:35313	70710	12	True				
ANR	70990	CallExpression	"r_list_add_sorted ( list , cx , lcmp )"		70710	0					
ANR	70991	Callee	r_list_add_sorted		70710	0					
ANR	70992	Identifier	r_list_add_sorted		70710	0					
ANR	70993	ArgumentList	list		70710	1					
ANR	70994	Argument	list		70710	0					
ANR	70995	Identifier	list		70710	0					
ANR	70996	Argument	cx		70710	1					
ANR	70997	Identifier	cx		70710	0					
ANR	70998	Argument	lcmp		70710	2					
ANR	70999	Identifier	lcmp		70710	0					
ANR	71000	Statement	cx	1382:2:35327:35328	70710	18	True				
ANR	71001	Statement	=	1382:5:35330:35330	70710	19	True				
ANR	71002	Statement	R_NEW0	1382:7:35332:35337	70710	20	True				
ANR	71003	Statement	(	1382:14:35339:35339	70710	21	True				
ANR	71004	Statement	struct	1382:15:35340:35345	70710	22	True				
ANR	71005	Statement	len_pos_t	1382:22:35347:35355	70710	23	True				
ANR	71006	Statement	)	1382:31:35356:35356	70710	24	True				
ANR	71007	ExpressionStatement		1382:32:35357:35357	70710	25	True				
ANR	71008	ExpressionStatement	cx -> len = c	1383:2:35361:35372	70710	26	True				
ANR	71009	AssignmentExpression	cx -> len = c		70710	0		=			
ANR	71010	PtrMemberAccess	cx -> len		70710	0					
ANR	71011	Identifier	cx		70710	0					
ANR	71012	Identifier	len		70710	1					
ANR	71013	Identifier	c		70710	1					
ANR	71014	ExpressionStatement	cx -> pos = avi -> x	1384:2:35376:35392	70710	27	True				
ANR	71015	AssignmentExpression	cx -> pos = avi -> x		70710	0		=			
ANR	71016	PtrMemberAccess	cx -> pos		70710	0					
ANR	71017	Identifier	cx		70710	0					
ANR	71018	Identifier	pos		70710	1					
ANR	71019	PtrMemberAccess	avi -> x		70710	1					
ANR	71020	Identifier	avi		70710	0					
ANR	71021	Identifier	x		70710	1					
ANR	71022	IfStatement	if ( is_left )		70710	28					
ANR	71023	Condition	is_left	1385:6:35400:35406	70710	0	True				
ANR	71024	Identifier	is_left		70710	0					
ANR	71025	CompoundStatement		43:15:1090:1090	70710	1					
ANR	71026	ExpressionStatement	"cx -> pos += dist_nodes ( g , vi , vt )"	1386:3:35414:35447	70710	0	True				
ANR	71027	AssignmentExpression	"cx -> pos += dist_nodes ( g , vi , vt )"		70710	0		+=			
ANR	71028	PtrMemberAccess	cx -> pos		70710	0					
ANR	71029	Identifier	cx		70710	0					
ANR	71030	Identifier	pos		70710	1					
ANR	71031	CallExpression	"dist_nodes ( g , vi , vt )"		70710	1					
ANR	71032	Callee	dist_nodes		70710	0					
ANR	71033	Identifier	dist_nodes		70710	0					
ANR	71034	ArgumentList	g		70710	1					
ANR	71035	Argument	g		70710	0					
ANR	71036	Identifier	g		70710	0					
ANR	71037	Argument	vi		70710	1					
ANR	71038	Identifier	vi		70710	0					
ANR	71039	Argument	vt		70710	2					
ANR	71040	Identifier	vt		70710	0					
ANR	71041	ElseStatement	else		70710	0					
ANR	71042	CompoundStatement		45:9:1139:1139	70710	0					
ANR	71043	ExpressionStatement	"cx -> pos -= dist_nodes ( g , vtp , vi )"	1388:3:35463:35497	70710	0	True				
ANR	71044	AssignmentExpression	"cx -> pos -= dist_nodes ( g , vtp , vi )"		70710	0		-=			
ANR	71045	PtrMemberAccess	cx -> pos		70710	0					
ANR	71046	Identifier	cx		70710	0					
ANR	71047	Identifier	pos		70710	1					
ANR	71048	CallExpression	"dist_nodes ( g , vtp , vi )"		70710	1					
ANR	71049	Callee	dist_nodes		70710	0					
ANR	71050	Identifier	dist_nodes		70710	0					
ANR	71051	ArgumentList	g		70710	1					
ANR	71052	Argument	g		70710	0					
ANR	71053	Identifier	g		70710	0					
ANR	71054	Argument	vtp		70710	1					
ANR	71055	Identifier	vtp		70710	0					
ANR	71056	Argument	vi		70710	2					
ANR	71057	Identifier	vi		70710	0					
ANR	71058	ExpressionStatement	"r_list_add_sorted ( list , cx , lcmp )"	1390:2:35505:35539	70710	29	True				
ANR	71059	CallExpression	"r_list_add_sorted ( list , cx , lcmp )"		70710	0					
ANR	71060	Callee	r_list_add_sorted		70710	0					
ANR	71061	Identifier	r_list_add_sorted		70710	0					
ANR	71062	ArgumentList	list		70710	1					
ANR	71063	Argument	list		70710	0					
ANR	71064	Identifier	list		70710	0					
ANR	71065	Argument	cx		70710	1					
ANR	71066	Identifier	cx		70710	0					
ANR	71067	Argument	lcmp		70710	2					
ANR	71068	Identifier	lcmp		70710	0					
ANR	71069	IfStatement	if ( b )		70710	6					
ANR	71070	Condition	b	1393:5:35550:35550	70710	0	True				
ANR	71071	Identifier	b		70710	0					
ANR	71072	CompoundStatement		52:2:1238:1270	70710	1					
ANR	71073	IdentifierDeclStatement	const RANode * ab = get_anode ( b ) ;	1394:2:35557:35589	70710	0	True				
ANR	71074	IdentifierDecl	* ab = get_anode ( b )		70710	0					
ANR	71075	IdentifierDeclType	const RANode *		70710	0					
ANR	71076	Identifier	ab		70710	1					
ANR	71077	AssignmentExpression	* ab = get_anode ( b )		70710	2		=			
ANR	71078	Identifier	ab		70710	0					
ANR	71079	CallExpression	get_anode ( b )		70710	1					
ANR	71080	Callee	get_anode		70710	0					
ANR	71081	Identifier	get_anode		70710	0					
ANR	71082	ArgumentList	b		70710	1					
ANR	71083	Argument	b		70710	0					
ANR	71084	Identifier	b		70710	0					
ANR	71085	Statement	cx	1395:2:35593:35594	70710	1	True				
ANR	71086	Statement	=	1395:5:35596:35596	70710	2	True				
ANR	71087	Statement	R_NEW	1395:7:35598:35602	70710	3	True				
ANR	71088	Statement	(	1395:13:35604:35604	70710	4	True				
ANR	71089	Statement	struct	1395:14:35605:35610	70710	5	True				
ANR	71090	Statement	len_pos_t	1395:21:35612:35620	70710	6	True				
ANR	71091	Statement	)	1395:30:35621:35621	70710	7	True				
ANR	71092	ExpressionStatement		1395:31:35622:35622	70710	8	True				
ANR	71093	IfStatement	if ( cx )		70710	9					
ANR	71094	Condition	cx	1396:6:35630:35631	70710	0	True				
ANR	71095	Identifier	cx		70710	0					
ANR	71096	CompoundStatement		54:10:1315:1315	70710	1					
ANR	71097	ExpressionStatement	cx -> len = is_left ? INT_MAX : INT_MIN	1397:3:35639:35674	70710	0	True				
ANR	71098	AssignmentExpression	cx -> len = is_left ? INT_MAX : INT_MIN		70710	0		=			
ANR	71099	PtrMemberAccess	cx -> len		70710	0					
ANR	71100	Identifier	cx		70710	0					
ANR	71101	Identifier	len		70710	1					
ANR	71102	ConditionalExpression	is_left ? INT_MAX : INT_MIN		70710	1					
ANR	71103	Condition	is_left		70710	0					
ANR	71104	Identifier	is_left		70710	0					
ANR	71105	Identifier	INT_MAX		70710	1					
ANR	71106	Identifier	INT_MIN		70710	2					
ANR	71107	ExpressionStatement	cx -> pos = ab -> x	1398:3:35679:35694	70710	1	True				
ANR	71108	AssignmentExpression	cx -> pos = ab -> x		70710	0		=			
ANR	71109	PtrMemberAccess	cx -> pos		70710	0					
ANR	71110	Identifier	cx		70710	0					
ANR	71111	Identifier	pos		70710	1					
ANR	71112	PtrMemberAccess	ab -> x		70710	1					
ANR	71113	Identifier	ab		70710	0					
ANR	71114	Identifier	x		70710	1					
ANR	71115	IfStatement	if ( is_left )		70710	2					
ANR	71116	Condition	is_left	1399:7:35703:35709	70710	0	True				
ANR	71117	Identifier	is_left		70710	0					
ANR	71118	CompoundStatement		57:16:1393:1393	70710	1					
ANR	71119	ExpressionStatement	"cx -> pos += dist_nodes ( g , b , vt )"	1400:4:35718:35750	70710	0	True				
ANR	71120	AssignmentExpression	"cx -> pos += dist_nodes ( g , b , vt )"		70710	0		+=			
ANR	71121	PtrMemberAccess	cx -> pos		70710	0					
ANR	71122	Identifier	cx		70710	0					
ANR	71123	Identifier	pos		70710	1					
ANR	71124	CallExpression	"dist_nodes ( g , b , vt )"		70710	1					
ANR	71125	Callee	dist_nodes		70710	0					
ANR	71126	Identifier	dist_nodes		70710	0					
ANR	71127	ArgumentList	g		70710	1					
ANR	71128	Argument	g		70710	0					
ANR	71129	Identifier	g		70710	0					
ANR	71130	Argument	b		70710	1					
ANR	71131	Identifier	b		70710	0					
ANR	71132	Argument	vt		70710	2					
ANR	71133	Identifier	vt		70710	0					
ANR	71134	ElseStatement	else		70710	0					
ANR	71135	CompoundStatement		59:10:1443:1443	70710	0					
ANR	71136	ExpressionStatement	"cx -> pos -= dist_nodes ( g , vtp , b )"	1402:4:35768:35801	70710	0	True				
ANR	71137	AssignmentExpression	"cx -> pos -= dist_nodes ( g , vtp , b )"		70710	0		-=			
ANR	71138	PtrMemberAccess	cx -> pos		70710	0					
ANR	71139	Identifier	cx		70710	0					
ANR	71140	Identifier	pos		70710	1					
ANR	71141	CallExpression	"dist_nodes ( g , vtp , b )"		70710	1					
ANR	71142	Callee	dist_nodes		70710	0					
ANR	71143	Identifier	dist_nodes		70710	0					
ANR	71144	ArgumentList	g		70710	1					
ANR	71145	Argument	g		70710	0					
ANR	71146	Identifier	g		70710	0					
ANR	71147	Argument	vtp		70710	1					
ANR	71148	Identifier	vtp		70710	0					
ANR	71149	Argument	b		70710	2					
ANR	71150	Identifier	b		70710	0					
ANR	71151	ExpressionStatement	"r_list_add_sorted ( list , cx , lcmp )"	1404:3:35811:35845	70710	3	True				
ANR	71152	CallExpression	"r_list_add_sorted ( list , cx , lcmp )"		70710	0					
ANR	71153	Callee	r_list_add_sorted		70710	0					
ANR	71154	Identifier	r_list_add_sorted		70710	0					
ANR	71155	ArgumentList	list		70710	1					
ANR	71156	Argument	list		70710	0					
ANR	71157	Identifier	list		70710	0					
ANR	71158	Argument	cx		70710	1					
ANR	71159	Identifier	cx		70710	0					
ANR	71160	Argument	lcmp		70710	2					
ANR	71161	Identifier	lcmp		70710	0					
ANR	71162	ReturnType	static void		70710	1					
ANR	71163	Identifier	collect_changes		70710	2					
ANR	71164	ParameterList	"const RAGraph * g , int l , const RGraphNode * b , int from_up , int s , int e , RList * list , int is_left"		70710	3					
ANR	71165	Parameter	const RAGraph * g	1343:28:34219:34234	70710	0	True				
ANR	71166	ParameterType	const RAGraph *		70710	0					
ANR	71167	Identifier	g		70710	1					
ANR	71168	Parameter	int l	1343:46:34237:34241	70710	1	True				
ANR	71169	ParameterType	int		70710	0					
ANR	71170	Identifier	l		70710	1					
ANR	71171	Parameter	const RGraphNode * b	1343:53:34244:34262	70710	2	True				
ANR	71172	ParameterType	const RGraphNode *		70710	0					
ANR	71173	Identifier	b		70710	1					
ANR	71174	Parameter	int from_up	1343:74:34265:34275	70710	3	True				
ANR	71175	ParameterType	int		70710	0					
ANR	71176	Identifier	from_up		70710	1					
ANR	71177	Parameter	int s	1343:87:34278:34282	70710	4	True				
ANR	71178	ParameterType	int		70710	0					
ANR	71179	Identifier	s		70710	1					
ANR	71180	Parameter	int e	1343:94:34285:34289	70710	5	True				
ANR	71181	ParameterType	int		70710	0					
ANR	71182	Identifier	e		70710	1					
ANR	71183	Parameter	RList * list	1343:101:34292:34302	70710	6	True				
ANR	71184	ParameterType	RList *		70710	0					
ANR	71185	Identifier	list		70710	1					
ANR	71186	Parameter	int is_left	1343:114:34305:34315	70710	7	True				
ANR	71187	ParameterType	int		70710	0					
ANR	71188	Identifier	is_left		70710	1					
ANR	71189	CFGEntryNode	ENTRY		70710		True				
ANR	71190	CFGExitNode	EXIT		70710		True				
ANR	71191	Symbol	* avi		70710						
ANR	71192	Symbol	* g -> layers [ l ] . nodes		70710						
ANR	71193	Symbol	ab		70710						
ANR	71194	Symbol	* * g		70710						
ANR	71195	Symbol	av -> x		70710						
ANR	71196	Symbol	ab -> x		70710						
ANR	71197	Symbol	it		70710						
ANR	71198	Symbol	list		70710						
ANR	71199	Symbol	vi		70710						
ANR	71200	Symbol	av		70710						
ANR	71201	Symbol	RP_listcmp		70710						
ANR	71202	Symbol	* cx		70710						
ANR	71203	Symbol	* g -> layers		70710						
ANR	71204	Symbol	* * * g		70710						
ANR	71205	Symbol	vt		70710						
ANR	71206	Symbol	cx -> len		70710						
ANR	71207	Symbol	dist_nodes		70710						
ANR	71208	Symbol	from_up		70710						
ANR	71209	Symbol	* ab		70710						
ANR	71210	Symbol	r_graph_get_neighbours		70710						
ANR	71211	Symbol	neigh		70710						
ANR	71212	Symbol	INT_MIN		70710						
ANR	71213	Symbol	r_graph_innodes		70710						
ANR	71214	Symbol	avi		70710						
ANR	71215	Symbol	g -> graph		70710						
ANR	71216	Symbol	INT_MAX		70710						
ANR	71217	Symbol	* * l		70710						
ANR	71218	Symbol	b		70710						
ANR	71219	Symbol	get_anode		70710						
ANR	71220	Symbol	c		70710						
ANR	71221	Symbol	avi -> x		70710						
ANR	71222	Symbol	is_left		70710						
ANR	71223	Symbol	e		70710						
ANR	71224	Symbol	g		70710						
ANR	71225	Symbol	RM_listcmp		70710						
ANR	71226	Symbol	lcmp		70710						
ANR	71227	Symbol	i		70710						
ANR	71228	Symbol	l		70710						
ANR	71229	Symbol	g -> layers [ l ] . nodes		70710						
ANR	71230	Symbol	* e		70710						
ANR	71231	Symbol	* g		70710						
ANR	71232	Symbol	s		70710						
ANR	71233	Symbol	vtp		70710						
ANR	71234	Symbol	* i		70710						
ANR	71235	Symbol	cx		70710						
ANR	71236	Symbol	* l		70710						
ANR	71237	Symbol	v		70710						
ANR	71238	Symbol	* av		70710						
ANR	71239	Symbol	g -> layers		70710						
ANR	71240	Symbol	* * g -> layers		70710						
ANR	71241	Symbol	* s		70710						
ANR	71242	Symbol	cx -> pos		70710						
ANR	71243	Function	combine_sequences	1409:0:35857:37538							
ANR	71244	FunctionDef	"combine_sequences (const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int a , int r)"		71243	0					
ANR	71245	CompoundStatement		1409:126:35983:37538	71243	0					
ANR	71246	IdentifierDeclStatement	"RList * Rm = r_list_new ( ) , * Rp = r_list_new ( ) ;"	1410:1:35986:36032	71243	0	True				
ANR	71247	IdentifierDecl	* Rm = r_list_new ( )		71243	0					
ANR	71248	IdentifierDeclType	RList *		71243	0					
ANR	71249	Identifier	Rm		71243	1					
ANR	71250	AssignmentExpression	* Rm = r_list_new ( )		71243	2		=			
ANR	71251	Identifier	Rm		71243	0					
ANR	71252	CallExpression	r_list_new ( )		71243	1					
ANR	71253	Callee	r_list_new		71243	0					
ANR	71254	Identifier	r_list_new		71243	0					
ANR	71255	ArgumentList			71243	1					
ANR	71256	IdentifierDecl	* Rp = r_list_new ( )		71243	1					
ANR	71257	IdentifierDeclType	RList *		71243	0					
ANR	71258	Identifier	Rp		71243	1					
ANR	71259	AssignmentExpression	* Rp = r_list_new ( )		71243	2		=			
ANR	71260	Identifier	Rp		71243	0					
ANR	71261	CallExpression	r_list_new ( )		71243	1					
ANR	71262	Callee	r_list_new		71243	0					
ANR	71263	Identifier	r_list_new		71243	0					
ANR	71264	ArgumentList			71243	1					
ANR	71265	IdentifierDeclStatement	"const RGraphNode * vt , * vtp ;"	1411:1:36035:36061	71243	1	True				
ANR	71266	IdentifierDecl	* vt		71243	0					
ANR	71267	IdentifierDeclType	const RGraphNode *		71243	0					
ANR	71268	Identifier	vt		71243	1					
ANR	71269	IdentifierDecl	* vtp		71243	1					
ANR	71270	IdentifierDeclType	const RGraphNode *		71243	0					
ANR	71271	Identifier	vtp		71243	1					
ANR	71272	IdentifierDeclStatement	"RANode * at , * atp ;"	1412:1:36064:36080	71243	2	True				
ANR	71273	IdentifierDecl	* at		71243	0					
ANR	71274	IdentifierDeclType	RANode *		71243	0					
ANR	71275	Identifier	at		71243	1					
ANR	71276	IdentifierDecl	* atp		71243	1					
ANR	71277	IdentifierDeclType	RANode *		71243	0					
ANR	71278	Identifier	atp		71243	1					
ANR	71279	IdentifierDeclStatement	"int rm , rp , t , m , i ;"	1413:1:36083:36102	71243	3	True				
ANR	71280	IdentifierDecl	rm		71243	0					
ANR	71281	IdentifierDeclType	int		71243	0					
ANR	71282	Identifier	rm		71243	1					
ANR	71283	IdentifierDecl	rp		71243	1					
ANR	71284	IdentifierDeclType	int		71243	0					
ANR	71285	Identifier	rp		71243	1					
ANR	71286	IdentifierDecl	t		71243	2					
ANR	71287	IdentifierDeclType	int		71243	0					
ANR	71288	Identifier	t		71243	1					
ANR	71289	IdentifierDecl	m		71243	3					
ANR	71290	IdentifierDeclType	int		71243	0					
ANR	71291	Identifier	m		71243	1					
ANR	71292	IdentifierDecl	i		71243	4					
ANR	71293	IdentifierDeclType	int		71243	0					
ANR	71294	Identifier	i		71243	1					
ANR	71295	ExpressionStatement	Rm -> free = ( RListFree ) free	1414:1:36105:36132	71243	4	True				
ANR	71296	AssignmentExpression	Rm -> free = ( RListFree ) free		71243	0		=			
ANR	71297	PtrMemberAccess	Rm -> free		71243	0					
ANR	71298	Identifier	Rm		71243	0					
ANR	71299	Identifier	free		71243	1					
ANR	71300	CastExpression	( RListFree ) free		71243	1					
ANR	71301	CastTarget	RListFree		71243	0					
ANR	71302	Identifier	free		71243	1					
ANR	71303	ExpressionStatement	Rp -> free = ( RListFree ) free	1415:1:36135:36162	71243	5	True				
ANR	71304	AssignmentExpression	Rp -> free = ( RListFree ) free		71243	0		=			
ANR	71305	PtrMemberAccess	Rp -> free		71243	0					
ANR	71306	Identifier	Rp		71243	0					
ANR	71307	Identifier	free		71243	1					
ANR	71308	CastExpression	( RListFree ) free		71243	1					
ANR	71309	CastTarget	RListFree		71243	0					
ANR	71310	Identifier	free		71243	1					
ANR	71311	ExpressionStatement	t = ( a + r ) / 2	1417:1:36166:36181	71243	6	True				
ANR	71312	AssignmentExpression	t = ( a + r ) / 2		71243	0		=			
ANR	71313	Identifier	t		71243	0					
ANR	71314	MultiplicativeExpression	( a + r ) / 2		71243	1		/			
ANR	71315	AdditiveExpression	a + r		71243	0		+			
ANR	71316	Identifier	a		71243	0					
ANR	71317	Identifier	r		71243	1					
ANR	71318	PrimaryExpression	2		71243	1					
ANR	71319	ExpressionStatement	vt = g -> layers [ l ] . nodes [ t - 1 ]	1418:1:36184:36214	71243	7	True				
ANR	71320	AssignmentExpression	vt = g -> layers [ l ] . nodes [ t - 1 ]		71243	0		=			
ANR	71321	Identifier	vt		71243	0					
ANR	71322	ArrayIndexing	g -> layers [ l ] . nodes [ t - 1 ]		71243	1					
ANR	71323	MemberAccess	g -> layers [ l ] . nodes		71243	0					
ANR	71324	ArrayIndexing	g -> layers [ l ]		71243	0					
ANR	71325	PtrMemberAccess	g -> layers		71243	0					
ANR	71326	Identifier	g		71243	0					
ANR	71327	Identifier	layers		71243	1					
ANR	71328	Identifier	l		71243	1					
ANR	71329	Identifier	nodes		71243	1					
ANR	71330	AdditiveExpression	t - 1		71243	1		-			
ANR	71331	Identifier	t		71243	0					
ANR	71332	PrimaryExpression	1		71243	1					
ANR	71333	ExpressionStatement	vtp = g -> layers [ l ] . nodes [ t ]	1419:1:36217:36244	71243	8	True				
ANR	71334	AssignmentExpression	vtp = g -> layers [ l ] . nodes [ t ]		71243	0		=			
ANR	71335	Identifier	vtp		71243	0					
ANR	71336	ArrayIndexing	g -> layers [ l ] . nodes [ t ]		71243	1					
ANR	71337	MemberAccess	g -> layers [ l ] . nodes		71243	0					
ANR	71338	ArrayIndexing	g -> layers [ l ]		71243	0					
ANR	71339	PtrMemberAccess	g -> layers		71243	0					
ANR	71340	Identifier	g		71243	0					
ANR	71341	Identifier	layers		71243	1					
ANR	71342	Identifier	l		71243	1					
ANR	71343	Identifier	nodes		71243	1					
ANR	71344	Identifier	t		71243	1					
ANR	71345	ExpressionStatement	at = get_anode ( vt )	1420:1:36247:36266	71243	9	True				
ANR	71346	AssignmentExpression	at = get_anode ( vt )		71243	0		=			
ANR	71347	Identifier	at		71243	0					
ANR	71348	CallExpression	get_anode ( vt )		71243	1					
ANR	71349	Callee	get_anode		71243	0					
ANR	71350	Identifier	get_anode		71243	0					
ANR	71351	ArgumentList	vt		71243	1					
ANR	71352	Argument	vt		71243	0					
ANR	71353	Identifier	vt		71243	0					
ANR	71354	ExpressionStatement	atp = get_anode ( vtp )	1421:1:36269:36290	71243	10	True				
ANR	71355	AssignmentExpression	atp = get_anode ( vtp )		71243	0		=			
ANR	71356	Identifier	atp		71243	0					
ANR	71357	CallExpression	get_anode ( vtp )		71243	1					
ANR	71358	Callee	get_anode		71243	0					
ANR	71359	Identifier	get_anode		71243	0					
ANR	71360	ArgumentList	vtp		71243	1					
ANR	71361	Argument	vtp		71243	0					
ANR	71362	Identifier	vtp		71243	0					
ANR	71363	ExpressionStatement	"collect_changes ( g , l , bm , from_up , a , t , Rm , true )"	1423:1:36294:36345	71243	11	True				
ANR	71364	CallExpression	"collect_changes ( g , l , bm , from_up , a , t , Rm , true )"		71243	0					
ANR	71365	Callee	collect_changes		71243	0					
ANR	71366	Identifier	collect_changes		71243	0					
ANR	71367	ArgumentList	g		71243	1					
ANR	71368	Argument	g		71243	0					
ANR	71369	Identifier	g		71243	0					
ANR	71370	Argument	l		71243	1					
ANR	71371	Identifier	l		71243	0					
ANR	71372	Argument	bm		71243	2					
ANR	71373	Identifier	bm		71243	0					
ANR	71374	Argument	from_up		71243	3					
ANR	71375	Identifier	from_up		71243	0					
ANR	71376	Argument	a		71243	4					
ANR	71377	Identifier	a		71243	0					
ANR	71378	Argument	t		71243	5					
ANR	71379	Identifier	t		71243	0					
ANR	71380	Argument	Rm		71243	6					
ANR	71381	Identifier	Rm		71243	0					
ANR	71382	Argument	true		71243	7					
ANR	71383	Identifier	true		71243	0					
ANR	71384	ExpressionStatement	"collect_changes ( g , l , bp , from_up , t , r , Rp , false )"	1424:1:36348:36400	71243	12	True				
ANR	71385	CallExpression	"collect_changes ( g , l , bp , from_up , t , r , Rp , false )"		71243	0					
ANR	71386	Callee	collect_changes		71243	0					
ANR	71387	Identifier	collect_changes		71243	0					
ANR	71388	ArgumentList	g		71243	1					
ANR	71389	Argument	g		71243	0					
ANR	71390	Identifier	g		71243	0					
ANR	71391	Argument	l		71243	1					
ANR	71392	Identifier	l		71243	0					
ANR	71393	Argument	bp		71243	2					
ANR	71394	Identifier	bp		71243	0					
ANR	71395	Argument	from_up		71243	3					
ANR	71396	Identifier	from_up		71243	0					
ANR	71397	Argument	t		71243	4					
ANR	71398	Identifier	t		71243	0					
ANR	71399	Argument	r		71243	5					
ANR	71400	Identifier	r		71243	0					
ANR	71401	Argument	Rp		71243	6					
ANR	71402	Identifier	Rp		71243	0					
ANR	71403	Argument	false		71243	7					
ANR	71404	Identifier	false		71243	0					
ANR	71405	ExpressionStatement	rm = rp = 0	1425:1:36403:36414	71243	13	True				
ANR	71406	AssignmentExpression	rm = rp = 0		71243	0		=			
ANR	71407	Identifier	rm		71243	0					
ANR	71408	AssignmentExpression	rp = 0		71243	1		=			
ANR	71409	Identifier	rp		71243	0					
ANR	71410	PrimaryExpression	0		71243	1					
ANR	71411	ExpressionStatement	"m = dist_nodes ( g , vt , vtp )"	1427:1:36418:36445	71243	14	True				
ANR	71412	AssignmentExpression	"m = dist_nodes ( g , vt , vtp )"		71243	0		=			
ANR	71413	Identifier	m		71243	0					
ANR	71414	CallExpression	"dist_nodes ( g , vt , vtp )"		71243	1					
ANR	71415	Callee	dist_nodes		71243	0					
ANR	71416	Identifier	dist_nodes		71243	0					
ANR	71417	ArgumentList	g		71243	1					
ANR	71418	Argument	g		71243	0					
ANR	71419	Identifier	g		71243	0					
ANR	71420	Argument	vt		71243	1					
ANR	71421	Identifier	vt		71243	0					
ANR	71422	Argument	vtp		71243	2					
ANR	71423	Identifier	vtp		71243	0					
ANR	71424	IfStatement	if ( at && atp )		71243	15					
ANR	71425	Condition	at && atp	1428:5:36452:36460	71243	0	True				
ANR	71426	AndExpression	at && atp		71243	0		&&			
ANR	71427	Identifier	at		71243	0					
ANR	71428	Identifier	atp		71243	1					
ANR	71429	CompoundStatement		20:16:479:479	71243	1					
ANR	71430	WhileStatement	while ( atp -> x - at -> x < m )		71243	0					
ANR	71431	Condition	atp -> x - at -> x < m	1429:9:36474:36491	71243	0	True				
ANR	71432	RelationalExpression	atp -> x - at -> x < m		71243	0		<			
ANR	71433	AdditiveExpression	atp -> x - at -> x		71243	0		-			
ANR	71434	PtrMemberAccess	atp -> x		71243	0					
ANR	71435	Identifier	atp		71243	0					
ANR	71436	Identifier	x		71243	1					
ANR	71437	PtrMemberAccess	at -> x		71243	1					
ANR	71438	Identifier	at		71243	0					
ANR	71439	Identifier	x		71243	1					
ANR	71440	Identifier	m		71243	1					
ANR	71441	CompoundStatement		21:29:510:510	71243	1					
ANR	71442	IfStatement	if ( atp -> x == at -> x )		71243	0					
ANR	71443	Condition	atp -> x == at -> x	1430:7:36503:36517	71243	0	True				
ANR	71444	EqualityExpression	atp -> x == at -> x		71243	0		==			
ANR	71445	PtrMemberAccess	atp -> x		71243	0					
ANR	71446	Identifier	atp		71243	0					
ANR	71447	Identifier	x		71243	1					
ANR	71448	PtrMemberAccess	at -> x		71243	1					
ANR	71449	Identifier	at		71243	0					
ANR	71450	Identifier	x		71243	1					
ANR	71451	CompoundStatement		23:4:542:558	71243	1					
ANR	71452	IdentifierDeclStatement	int step = m / 2 ;	1431:4:36526:36542	71243	0	True				
ANR	71453	IdentifierDecl	step = m / 2		71243	0					
ANR	71454	IdentifierDeclType	int		71243	0					
ANR	71455	Identifier	step		71243	1					
ANR	71456	AssignmentExpression	step = m / 2		71243	2		=			
ANR	71457	Identifier	step		71243	0					
ANR	71458	MultiplicativeExpression	m / 2		71243	1		/			
ANR	71459	Identifier	m		71243	0					
ANR	71460	PrimaryExpression	2		71243	1					
ANR	71461	ExpressionStatement	at -> x -= step	1432:4:36548:36561	71243	1	True				
ANR	71462	AssignmentExpression	at -> x -= step		71243	0		-=			
ANR	71463	PtrMemberAccess	at -> x		71243	0					
ANR	71464	Identifier	at		71243	0					
ANR	71465	Identifier	x		71243	1					
ANR	71466	Identifier	step		71243	1					
ANR	71467	ExpressionStatement	atp -> x += m - step	1433:4:36567:36585	71243	2	True				
ANR	71468	AssignmentExpression	atp -> x += m - step		71243	0		+=			
ANR	71469	PtrMemberAccess	atp -> x		71243	0					
ANR	71470	Identifier	atp		71243	0					
ANR	71471	Identifier	x		71243	1					
ANR	71472	AdditiveExpression	m - step		71243	1		-			
ANR	71473	Identifier	m		71243	0					
ANR	71474	Identifier	step		71243	1					
ANR	71475	ElseStatement	else		71243	0					
ANR	71476	CompoundStatement		26:10:613:613	71243	0					
ANR	71477	IfStatement	if ( rm < rp )		71243	0					
ANR	71478	Condition	rm < rp	1435:8:36607:36613	71243	0	True				
ANR	71479	RelationalExpression	rm < rp		71243	0		<			
ANR	71480	Identifier	rm		71243	0					
ANR	71481	Identifier	rp		71243	1					
ANR	71482	CompoundStatement		27:17:632:632	71243	1					
ANR	71483	IfStatement	if ( r_list_empty ( Rm ) )		71243	0					
ANR	71484	Condition	r_list_empty ( Rm )	1436:9:36627:36643	71243	0	True				
ANR	71485	CallExpression	r_list_empty ( Rm )		71243	0					
ANR	71486	Callee	r_list_empty		71243	0					
ANR	71487	Identifier	r_list_empty		71243	0					
ANR	71488	ArgumentList	Rm		71243	1					
ANR	71489	Argument	Rm		71243	0					
ANR	71490	Identifier	Rm		71243	0					
ANR	71491	CompoundStatement		28:28:662:662	71243	1					
ANR	71492	ExpressionStatement	at -> x = atp -> x - m	1437:6:36654:36672	71243	0	True				
ANR	71493	AssignmentExpression	at -> x = atp -> x - m		71243	0		=			
ANR	71494	PtrMemberAccess	at -> x		71243	0					
ANR	71495	Identifier	at		71243	0					
ANR	71496	Identifier	x		71243	1					
ANR	71497	AdditiveExpression	atp -> x - m		71243	1		-			
ANR	71498	PtrMemberAccess	atp -> x		71243	0					
ANR	71499	Identifier	atp		71243	0					
ANR	71500	Identifier	x		71243	1					
ANR	71501	Identifier	m		71243	1					
ANR	71502	ElseStatement	else		71243	0					
ANR	71503	CompoundStatement		31:6:710:769	71243	0					
ANR	71504	IdentifierDeclStatement	struct len_pos_t * cx = ( struct len_pos_t * ) r_list_pop ( Rm ) ;	1439:6:36694:36753	71243	0	True				
ANR	71505	IdentifierDecl	* cx = ( struct len_pos_t * ) r_list_pop ( Rm )		71243	0					
ANR	71506	IdentifierDeclType	struct len_pos_t *		71243	0					
ANR	71507	Identifier	cx		71243	1					
ANR	71508	AssignmentExpression	* cx = ( struct len_pos_t * ) r_list_pop ( Rm )		71243	2		=			
ANR	71509	Identifier	cx		71243	0					
ANR	71510	CastExpression	( struct len_pos_t * ) r_list_pop ( Rm )		71243	1					
ANR	71511	CastTarget	struct len_pos_t *		71243	0					
ANR	71512	CallExpression	r_list_pop ( Rm )		71243	1					
ANR	71513	Callee	r_list_pop		71243	0					
ANR	71514	Identifier	r_list_pop		71243	0					
ANR	71515	ArgumentList	Rm		71243	1					
ANR	71516	Argument	Rm		71243	0					
ANR	71517	Identifier	Rm		71243	0					
ANR	71518	ExpressionStatement	rm = rm + cx -> len	1440:6:36761:36778	71243	1	True				
ANR	71519	AssignmentExpression	rm = rm + cx -> len		71243	0		=			
ANR	71520	Identifier	rm		71243	0					
ANR	71521	AdditiveExpression	rm + cx -> len		71243	1		+			
ANR	71522	Identifier	rm		71243	0					
ANR	71523	PtrMemberAccess	cx -> len		71243	1					
ANR	71524	Identifier	cx		71243	0					
ANR	71525	Identifier	len		71243	1					
ANR	71526	ExpressionStatement	"at -> x = R_MAX ( cx -> pos , atp -> x - m )"	1441:6:36786:36821	71243	2	True				
ANR	71527	AssignmentExpression	"at -> x = R_MAX ( cx -> pos , atp -> x - m )"		71243	0		=			
ANR	71528	PtrMemberAccess	at -> x		71243	0					
ANR	71529	Identifier	at		71243	0					
ANR	71530	Identifier	x		71243	1					
ANR	71531	CallExpression	"R_MAX ( cx -> pos , atp -> x - m )"		71243	1					
ANR	71532	Callee	R_MAX		71243	0					
ANR	71533	Identifier	R_MAX		71243	0					
ANR	71534	ArgumentList	cx -> pos		71243	1					
ANR	71535	Argument	cx -> pos		71243	0					
ANR	71536	PtrMemberAccess	cx -> pos		71243	0					
ANR	71537	Identifier	cx		71243	0					
ANR	71538	Identifier	pos		71243	1					
ANR	71539	Argument	atp -> x - m		71243	1					
ANR	71540	AdditiveExpression	atp -> x - m		71243	0		-			
ANR	71541	PtrMemberAccess	atp -> x		71243	0					
ANR	71542	Identifier	atp		71243	0					
ANR	71543	Identifier	x		71243	1					
ANR	71544	Identifier	m		71243	1					
ANR	71545	ExpressionStatement	free ( cx )	1442:6:36829:36838	71243	3	True				
ANR	71546	CallExpression	free ( cx )		71243	0					
ANR	71547	Callee	free		71243	0					
ANR	71548	Identifier	free		71243	0					
ANR	71549	ArgumentList	cx		71243	1					
ANR	71550	Argument	cx		71243	0					
ANR	71551	Identifier	cx		71243	0					
ANR	71552	ElseStatement	else		71243	0					
ANR	71553	CompoundStatement		36:11:874:874	71243	0					
ANR	71554	IfStatement	if ( r_list_empty ( Rp ) )		71243	0					
ANR	71555	Condition	r_list_empty ( Rp )	1445:9:36869:36885	71243	0	True				
ANR	71556	CallExpression	r_list_empty ( Rp )		71243	0					
ANR	71557	Callee	r_list_empty		71243	0					
ANR	71558	Identifier	r_list_empty		71243	0					
ANR	71559	ArgumentList	Rp		71243	1					
ANR	71560	Argument	Rp		71243	0					
ANR	71561	Identifier	Rp		71243	0					
ANR	71562	CompoundStatement		37:28:904:904	71243	1					
ANR	71563	ExpressionStatement	atp -> x = at -> x + m	1446:6:36896:36914	71243	0	True				
ANR	71564	AssignmentExpression	atp -> x = at -> x + m		71243	0		=			
ANR	71565	PtrMemberAccess	atp -> x		71243	0					
ANR	71566	Identifier	atp		71243	0					
ANR	71567	Identifier	x		71243	1					
ANR	71568	AdditiveExpression	at -> x + m		71243	1		+			
ANR	71569	PtrMemberAccess	at -> x		71243	0					
ANR	71570	Identifier	at		71243	0					
ANR	71571	Identifier	x		71243	1					
ANR	71572	Identifier	m		71243	1					
ANR	71573	ElseStatement	else		71243	0					
ANR	71574	CompoundStatement		40:6:952:1011	71243	0					
ANR	71575	IdentifierDeclStatement	struct len_pos_t * cx = ( struct len_pos_t * ) r_list_pop ( Rp ) ;	1448:6:36936:36995	71243	0	True				
ANR	71576	IdentifierDecl	* cx = ( struct len_pos_t * ) r_list_pop ( Rp )		71243	0					
ANR	71577	IdentifierDeclType	struct len_pos_t *		71243	0					
ANR	71578	Identifier	cx		71243	1					
ANR	71579	AssignmentExpression	* cx = ( struct len_pos_t * ) r_list_pop ( Rp )		71243	2		=			
ANR	71580	Identifier	cx		71243	0					
ANR	71581	CastExpression	( struct len_pos_t * ) r_list_pop ( Rp )		71243	1					
ANR	71582	CastTarget	struct len_pos_t *		71243	0					
ANR	71583	CallExpression	r_list_pop ( Rp )		71243	1					
ANR	71584	Callee	r_list_pop		71243	0					
ANR	71585	Identifier	r_list_pop		71243	0					
ANR	71586	ArgumentList	Rp		71243	1					
ANR	71587	Argument	Rp		71243	0					
ANR	71588	Identifier	Rp		71243	0					
ANR	71589	ExpressionStatement	rp = rp + cx -> len	1449:6:37003:37020	71243	1	True				
ANR	71590	AssignmentExpression	rp = rp + cx -> len		71243	0		=			
ANR	71591	Identifier	rp		71243	0					
ANR	71592	AdditiveExpression	rp + cx -> len		71243	1		+			
ANR	71593	Identifier	rp		71243	0					
ANR	71594	PtrMemberAccess	cx -> len		71243	1					
ANR	71595	Identifier	cx		71243	0					
ANR	71596	Identifier	len		71243	1					
ANR	71597	ExpressionStatement	"atp -> x = R_MIN ( cx -> pos , at -> x + m )"	1450:6:37028:37063	71243	2	True				
ANR	71598	AssignmentExpression	"atp -> x = R_MIN ( cx -> pos , at -> x + m )"		71243	0		=			
ANR	71599	PtrMemberAccess	atp -> x		71243	0					
ANR	71600	Identifier	atp		71243	0					
ANR	71601	Identifier	x		71243	1					
ANR	71602	CallExpression	"R_MIN ( cx -> pos , at -> x + m )"		71243	1					
ANR	71603	Callee	R_MIN		71243	0					
ANR	71604	Identifier	R_MIN		71243	0					
ANR	71605	ArgumentList	cx -> pos		71243	1					
ANR	71606	Argument	cx -> pos		71243	0					
ANR	71607	PtrMemberAccess	cx -> pos		71243	0					
ANR	71608	Identifier	cx		71243	0					
ANR	71609	Identifier	pos		71243	1					
ANR	71610	Argument	at -> x + m		71243	1					
ANR	71611	AdditiveExpression	at -> x + m		71243	0		+			
ANR	71612	PtrMemberAccess	at -> x		71243	0					
ANR	71613	Identifier	at		71243	0					
ANR	71614	Identifier	x		71243	1					
ANR	71615	Identifier	m		71243	1					
ANR	71616	ExpressionStatement	free ( cx )	1451:6:37071:37080	71243	3	True				
ANR	71617	CallExpression	free ( cx )		71243	0					
ANR	71618	Callee	free		71243	0					
ANR	71619	Identifier	free		71243	0					
ANR	71620	ArgumentList	cx		71243	1					
ANR	71621	Argument	cx		71243	0					
ANR	71622	Identifier	cx		71243	0					
ANR	71623	ExpressionStatement	r_list_free ( Rm )	1458:1:37109:37125	71243	16	True				
ANR	71624	CallExpression	r_list_free ( Rm )		71243	0					
ANR	71625	Callee	r_list_free		71243	0					
ANR	71626	Identifier	r_list_free		71243	0					
ANR	71627	ArgumentList	Rm		71243	1					
ANR	71628	Argument	Rm		71243	0					
ANR	71629	Identifier	Rm		71243	0					
ANR	71630	ExpressionStatement	r_list_free ( Rp )	1459:1:37128:37144	71243	17	True				
ANR	71631	CallExpression	r_list_free ( Rp )		71243	0					
ANR	71632	Callee	r_list_free		71243	0					
ANR	71633	Identifier	r_list_free		71243	0					
ANR	71634	ArgumentList	Rp		71243	1					
ANR	71635	Argument	Rp		71243	0					
ANR	71636	Identifier	Rp		71243	0					
ANR	71637	ForStatement	for ( i = t - 2 ; i >= a ; -- i )		71243	18					
ANR	71638	ForInit	i = t - 2 ;	1461:6:37153:37162	71243	0	True				
ANR	71639	AssignmentExpression	i = t - 2		71243	0		=			
ANR	71640	Identifier	i		71243	0					
ANR	71641	AdditiveExpression	t - 2		71243	1		-			
ANR	71642	Identifier	t		71243	0					
ANR	71643	PrimaryExpression	2		71243	1					
ANR	71644	Condition	i >= a	1461:17:37164:37169	71243	1	True				
ANR	71645	RelationalExpression	i >= a		71243	0		>=			
ANR	71646	Identifier	i		71243	0					
ANR	71647	Identifier	a		71243	1					
ANR	71648	UnaryExpression	-- i	1461:25:37172:37174	71243	2	True				
ANR	71649	IncDec	--		71243	0					
ANR	71650	Identifier	i		71243	1					
ANR	71651	CompoundStatement		55:2:1245:1272	71243	3					
ANR	71652	IdentifierDeclStatement	const RGraphNode * gv = g -> layers [ l ] . nodes [ i ] ;	1462:2:37181:37225	71243	0	True				
ANR	71653	IdentifierDecl	* gv = g -> layers [ l ] . nodes [ i ]		71243	0					
ANR	71654	IdentifierDeclType	const RGraphNode *		71243	0					
ANR	71655	Identifier	gv		71243	1					
ANR	71656	AssignmentExpression	* gv = g -> layers [ l ] . nodes [ i ]		71243	2		=			
ANR	71657	Identifier	gv		71243	0					
ANR	71658	ArrayIndexing	g -> layers [ l ] . nodes [ i ]		71243	1					
ANR	71659	MemberAccess	g -> layers [ l ] . nodes		71243	0					
ANR	71660	ArrayIndexing	g -> layers [ l ]		71243	0					
ANR	71661	PtrMemberAccess	g -> layers		71243	0					
ANR	71662	Identifier	g		71243	0					
ANR	71663	Identifier	layers		71243	1					
ANR	71664	Identifier	l		71243	1					
ANR	71665	Identifier	nodes		71243	1					
ANR	71666	Identifier	i		71243	1					
ANR	71667	IdentifierDeclStatement	RANode * av = get_anode ( gv ) ;	1463:2:37229:37256	71243	1	True				
ANR	71668	IdentifierDecl	* av = get_anode ( gv )		71243	0					
ANR	71669	IdentifierDeclType	RANode *		71243	0					
ANR	71670	Identifier	av		71243	1					
ANR	71671	AssignmentExpression	* av = get_anode ( gv )		71243	2		=			
ANR	71672	Identifier	av		71243	0					
ANR	71673	CallExpression	get_anode ( gv )		71243	1					
ANR	71674	Callee	get_anode		71243	0					
ANR	71675	Identifier	get_anode		71243	0					
ANR	71676	ArgumentList	gv		71243	1					
ANR	71677	Argument	gv		71243	0					
ANR	71678	Identifier	gv		71243	0					
ANR	71679	IfStatement	if ( av && at )		71243	2					
ANR	71680	Condition	av && at	1464:6:37264:37271	71243	0	True				
ANR	71681	AndExpression	av && at		71243	0		&&			
ANR	71682	Identifier	av		71243	0					
ANR	71683	Identifier	at		71243	1					
ANR	71684	CompoundStatement		56:16:1290:1290	71243	1					
ANR	71685	ExpressionStatement	"av -> x = R_MIN ( av -> x , at -> x - dist_nodes ( g , gv , vt ) )"	1465:3:37279:37332	71243	0	True				
ANR	71686	AssignmentExpression	"av -> x = R_MIN ( av -> x , at -> x - dist_nodes ( g , gv , vt ) )"		71243	0		=			
ANR	71687	PtrMemberAccess	av -> x		71243	0					
ANR	71688	Identifier	av		71243	0					
ANR	71689	Identifier	x		71243	1					
ANR	71690	CallExpression	"R_MIN ( av -> x , at -> x - dist_nodes ( g , gv , vt ) )"		71243	1					
ANR	71691	Callee	R_MIN		71243	0					
ANR	71692	Identifier	R_MIN		71243	0					
ANR	71693	ArgumentList	av -> x		71243	1					
ANR	71694	Argument	av -> x		71243	0					
ANR	71695	PtrMemberAccess	av -> x		71243	0					
ANR	71696	Identifier	av		71243	0					
ANR	71697	Identifier	x		71243	1					
ANR	71698	Argument	"at -> x - dist_nodes ( g , gv , vt )"		71243	1					
ANR	71699	AdditiveExpression	"at -> x - dist_nodes ( g , gv , vt )"		71243	0		-			
ANR	71700	PtrMemberAccess	at -> x		71243	0					
ANR	71701	Identifier	at		71243	0					
ANR	71702	Identifier	x		71243	1					
ANR	71703	CallExpression	"dist_nodes ( g , gv , vt )"		71243	1					
ANR	71704	Callee	dist_nodes		71243	0					
ANR	71705	Identifier	dist_nodes		71243	0					
ANR	71706	ArgumentList	g		71243	1					
ANR	71707	Argument	g		71243	0					
ANR	71708	Identifier	g		71243	0					
ANR	71709	Argument	gv		71243	1					
ANR	71710	Identifier	gv		71243	0					
ANR	71711	Argument	vt		71243	2					
ANR	71712	Identifier	vt		71243	0					
ANR	71713	ForStatement	for ( i = t + 1 ; i < r ; ++ i )		71243	19					
ANR	71714	ForInit	i = t + 1 ;	1469:6:37348:37357	71243	0	True				
ANR	71715	AssignmentExpression	i = t + 1		71243	0		=			
ANR	71716	Identifier	i		71243	0					
ANR	71717	AdditiveExpression	t + 1		71243	1		+			
ANR	71718	Identifier	t		71243	0					
ANR	71719	PrimaryExpression	1		71243	1					
ANR	71720	Condition	i < r	1469:17:37359:37363	71243	1	True				
ANR	71721	RelationalExpression	i < r		71243	0		<			
ANR	71722	Identifier	i		71243	0					
ANR	71723	Identifier	r		71243	1					
ANR	71724	UnaryExpression	++ i	1469:24:37366:37368	71243	2	True				
ANR	71725	IncDec	++		71243	0					
ANR	71726	Identifier	i		71243	1					
ANR	71727	CompoundStatement		63:2:1439:1466	71243	3					
ANR	71728	IdentifierDeclStatement	const RGraphNode * gv = g -> layers [ l ] . nodes [ i ] ;	1470:2:37375:37419	71243	0	True				
ANR	71729	IdentifierDecl	* gv = g -> layers [ l ] . nodes [ i ]		71243	0					
ANR	71730	IdentifierDeclType	const RGraphNode *		71243	0					
ANR	71731	Identifier	gv		71243	1					
ANR	71732	AssignmentExpression	* gv = g -> layers [ l ] . nodes [ i ]		71243	2		=			
ANR	71733	Identifier	gv		71243	0					
ANR	71734	ArrayIndexing	g -> layers [ l ] . nodes [ i ]		71243	1					
ANR	71735	MemberAccess	g -> layers [ l ] . nodes		71243	0					
ANR	71736	ArrayIndexing	g -> layers [ l ]		71243	0					
ANR	71737	PtrMemberAccess	g -> layers		71243	0					
ANR	71738	Identifier	g		71243	0					
ANR	71739	Identifier	layers		71243	1					
ANR	71740	Identifier	l		71243	1					
ANR	71741	Identifier	nodes		71243	1					
ANR	71742	Identifier	i		71243	1					
ANR	71743	IdentifierDeclStatement	RANode * av = get_anode ( gv ) ;	1471:2:37423:37450	71243	1	True				
ANR	71744	IdentifierDecl	* av = get_anode ( gv )		71243	0					
ANR	71745	IdentifierDeclType	RANode *		71243	0					
ANR	71746	Identifier	av		71243	1					
ANR	71747	AssignmentExpression	* av = get_anode ( gv )		71243	2		=			
ANR	71748	Identifier	av		71243	0					
ANR	71749	CallExpression	get_anode ( gv )		71243	1					
ANR	71750	Callee	get_anode		71243	0					
ANR	71751	Identifier	get_anode		71243	0					
ANR	71752	ArgumentList	gv		71243	1					
ANR	71753	Argument	gv		71243	0					
ANR	71754	Identifier	gv		71243	0					
ANR	71755	IfStatement	if ( av && atp )		71243	2					
ANR	71756	Condition	av && atp	1472:6:37458:37466	71243	0	True				
ANR	71757	AndExpression	av && atp		71243	0		&&			
ANR	71758	Identifier	av		71243	0					
ANR	71759	Identifier	atp		71243	1					
ANR	71760	CompoundStatement		64:17:1485:1485	71243	1					
ANR	71761	ExpressionStatement	"av -> x = R_MAX ( av -> x , atp -> x + dist_nodes ( g , vtp , gv ) )"	1473:3:37474:37529	71243	0	True				
ANR	71762	AssignmentExpression	"av -> x = R_MAX ( av -> x , atp -> x + dist_nodes ( g , vtp , gv ) )"		71243	0		=			
ANR	71763	PtrMemberAccess	av -> x		71243	0					
ANR	71764	Identifier	av		71243	0					
ANR	71765	Identifier	x		71243	1					
ANR	71766	CallExpression	"R_MAX ( av -> x , atp -> x + dist_nodes ( g , vtp , gv ) )"		71243	1					
ANR	71767	Callee	R_MAX		71243	0					
ANR	71768	Identifier	R_MAX		71243	0					
ANR	71769	ArgumentList	av -> x		71243	1					
ANR	71770	Argument	av -> x		71243	0					
ANR	71771	PtrMemberAccess	av -> x		71243	0					
ANR	71772	Identifier	av		71243	0					
ANR	71773	Identifier	x		71243	1					
ANR	71774	Argument	"atp -> x + dist_nodes ( g , vtp , gv )"		71243	1					
ANR	71775	AdditiveExpression	"atp -> x + dist_nodes ( g , vtp , gv )"		71243	0		+			
ANR	71776	PtrMemberAccess	atp -> x		71243	0					
ANR	71777	Identifier	atp		71243	0					
ANR	71778	Identifier	x		71243	1					
ANR	71779	CallExpression	"dist_nodes ( g , vtp , gv )"		71243	1					
ANR	71780	Callee	dist_nodes		71243	0					
ANR	71781	Identifier	dist_nodes		71243	0					
ANR	71782	ArgumentList	g		71243	1					
ANR	71783	Argument	g		71243	0					
ANR	71784	Identifier	g		71243	0					
ANR	71785	Argument	vtp		71243	1					
ANR	71786	Identifier	vtp		71243	0					
ANR	71787	Argument	gv		71243	2					
ANR	71788	Identifier	gv		71243	0					
ANR	71789	ReturnType	static void		71243	1					
ANR	71790	Identifier	combine_sequences		71243	2					
ANR	71791	ParameterList	"const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int a , int r"		71243	3					
ANR	71792	Parameter	const RAGraph * g	1409:30:35887:35902	71243	0	True				
ANR	71793	ParameterType	const RAGraph *		71243	0					
ANR	71794	Identifier	g		71243	1					
ANR	71795	Parameter	int l	1409:48:35905:35909	71243	1	True				
ANR	71796	ParameterType	int		71243	0					
ANR	71797	Identifier	l		71243	1					
ANR	71798	Parameter	const RGraphNode * bm	1409:55:35912:35931	71243	2	True				
ANR	71799	ParameterType	const RGraphNode *		71243	0					
ANR	71800	Identifier	bm		71243	1					
ANR	71801	Parameter	const RGraphNode * bp	1409:77:35934:35953	71243	3	True				
ANR	71802	ParameterType	const RGraphNode *		71243	0					
ANR	71803	Identifier	bp		71243	1					
ANR	71804	Parameter	int from_up	1409:99:35956:35966	71243	4	True				
ANR	71805	ParameterType	int		71243	0					
ANR	71806	Identifier	from_up		71243	1					
ANR	71807	Parameter	int a	1409:112:35969:35973	71243	5	True				
ANR	71808	ParameterType	int		71243	0					
ANR	71809	Identifier	a		71243	1					
ANR	71810	Parameter	int r	1409:119:35976:35980	71243	6	True				
ANR	71811	ParameterType	int		71243	0					
ANR	71812	Identifier	r		71243	1					
ANR	71813	CFGEntryNode	ENTRY		71243		True				
ANR	71814	CFGExitNode	EXIT		71243		True				
ANR	71815	Symbol	* Rm		71243						
ANR	71816	Symbol	* Rp		71243						
ANR	71817	Symbol	* g -> layers [ l ] . nodes		71243						
ANR	71818	Symbol	r_list_pop		71243						
ANR	71819	Symbol	at -> x		71243						
ANR	71820	Symbol	atp		71243						
ANR	71821	Symbol	* * g		71243						
ANR	71822	Symbol	av -> x		71243						
ANR	71823	Symbol	Rm -> free		71243						
ANR	71824	Symbol	at		71243						
ANR	71825	Symbol	av		71243						
ANR	71826	Symbol	true		71243						
ANR	71827	Symbol	* cx		71243						
ANR	71828	Symbol	r_list_empty		71243						
ANR	71829	Symbol	* g -> layers		71243						
ANR	71830	Symbol	* * * g		71243						
ANR	71831	Symbol	rm		71243						
ANR	71832	Symbol	vt		71243						
ANR	71833	Symbol	rp		71243						
ANR	71834	Symbol	cx -> len		71243						
ANR	71835	Symbol	dist_nodes		71243						
ANR	71836	Symbol	from_up		71243						
ANR	71837	Symbol	bm		71243						
ANR	71838	Symbol	bp		71243						
ANR	71839	Symbol	Rm		71243						
ANR	71840	Symbol	free		71243						
ANR	71841	Symbol	Rp		71243						
ANR	71842	Symbol	* * l		71243						
ANR	71843	Symbol	a		71243						
ANR	71844	Symbol	get_anode		71243						
ANR	71845	Symbol	g		71243						
ANR	71846	Symbol	false		71243						
ANR	71847	Symbol	i		71243						
ANR	71848	Symbol	R_MIN		71243						
ANR	71849	Symbol	l		71243						
ANR	71850	Symbol	m		71243						
ANR	71851	Symbol	Rp -> free		71243						
ANR	71852	Symbol	g -> layers [ l ] . nodes		71243						
ANR	71853	Symbol	gv		71243						
ANR	71854	Symbol	* g		71243						
ANR	71855	Symbol	r		71243						
ANR	71856	Symbol	vtp		71243						
ANR	71857	Symbol	* i		71243						
ANR	71858	Symbol	t		71243						
ANR	71859	Symbol	cx		71243						
ANR	71860	Symbol	* l		71243						
ANR	71861	Symbol	atp -> x		71243						
ANR	71862	Symbol	* atp		71243						
ANR	71863	Symbol	R_MAX		71243						
ANR	71864	Symbol	* av		71243						
ANR	71865	Symbol	* at		71243						
ANR	71866	Symbol	step		71243						
ANR	71867	Symbol	g -> layers		71243						
ANR	71868	Symbol	* * g -> layers		71243						
ANR	71869	Symbol	* t		71243						
ANR	71870	Symbol	r_list_new		71243						
ANR	71871	Symbol	cx -> pos		71243						
ANR	71872	Function	place_sequence	1483:0:37843:38244							
ANR	71873	FunctionDef	"place_sequence (const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int va , int vr)"		71872	0					
ANR	71874	CompoundStatement		1483:125:37968:38244	71872	0					
ANR	71875	IfStatement	if ( vr == va + 1 )		71872	0					
ANR	71876	Condition	vr == va + 1	1484:5:37975:37986	71872	0	True				
ANR	71877	EqualityExpression	vr == va + 1		71872	0		==			
ANR	71878	Identifier	vr		71872	0					
ANR	71879	AdditiveExpression	va + 1		71872	1		+			
ANR	71880	Identifier	va		71872	0					
ANR	71881	PrimaryExpression	1		71872	1					
ANR	71882	CompoundStatement		2:19:20:20	71872	1					
ANR	71883	ExpressionStatement	"place_single ( g , l , bm , bp , from_up , va )"	1485:2:37993:38033	71872	0	True				
ANR	71884	CallExpression	"place_single ( g , l , bm , bp , from_up , va )"		71872	0					
ANR	71885	Callee	place_single		71872	0					
ANR	71886	Identifier	place_single		71872	0					
ANR	71887	ArgumentList	g		71872	1					
ANR	71888	Argument	g		71872	0					
ANR	71889	Identifier	g		71872	0					
ANR	71890	Argument	l		71872	1					
ANR	71891	Identifier	l		71872	0					
ANR	71892	Argument	bm		71872	2					
ANR	71893	Identifier	bm		71872	0					
ANR	71894	Argument	bp		71872	3					
ANR	71895	Identifier	bp		71872	0					
ANR	71896	Argument	from_up		71872	4					
ANR	71897	Identifier	from_up		71872	0					
ANR	71898	Argument	va		71872	5					
ANR	71899	Identifier	va		71872	0					
ANR	71900	ElseStatement	else		71872	0					
ANR	71901	IfStatement	if ( vr > va + 1 )		71872	0					
ANR	71902	Condition	vr > va + 1	1486:12:38047:38057	71872	0	True				
ANR	71903	RelationalExpression	vr > va + 1		71872	0		>			
ANR	71904	Identifier	vr		71872	0					
ANR	71905	AdditiveExpression	va + 1		71872	1		+			
ANR	71906	Identifier	va		71872	0					
ANR	71907	PrimaryExpression	1		71872	1					
ANR	71908	CompoundStatement		5:2:95:117	71872	1					
ANR	71909	IdentifierDeclStatement	int vt = ( vr + va ) / 2 ;	1487:2:38064:38086	71872	0	True				
ANR	71910	IdentifierDecl	vt = ( vr + va ) / 2		71872	0					
ANR	71911	IdentifierDeclType	int		71872	0					
ANR	71912	Identifier	vt		71872	1					
ANR	71913	AssignmentExpression	vt = ( vr + va ) / 2		71872	2		=			
ANR	71914	Identifier	vt		71872	0					
ANR	71915	MultiplicativeExpression	( vr + va ) / 2		71872	1		/			
ANR	71916	AdditiveExpression	vr + va		71872	0		+			
ANR	71917	Identifier	vr		71872	0					
ANR	71918	Identifier	va		71872	1					
ANR	71919	PrimaryExpression	2		71872	1					
ANR	71920	ExpressionStatement	"place_sequence ( g , l , bm , bp , from_up , va , vt )"	1488:2:38090:38136	71872	1	True				
ANR	71921	CallExpression	"place_sequence ( g , l , bm , bp , from_up , va , vt )"		71872	0					
ANR	71922	Callee	place_sequence		71872	0					
ANR	71923	Identifier	place_sequence		71872	0					
ANR	71924	ArgumentList	g		71872	1					
ANR	71925	Argument	g		71872	0					
ANR	71926	Identifier	g		71872	0					
ANR	71927	Argument	l		71872	1					
ANR	71928	Identifier	l		71872	0					
ANR	71929	Argument	bm		71872	2					
ANR	71930	Identifier	bm		71872	0					
ANR	71931	Argument	bp		71872	3					
ANR	71932	Identifier	bp		71872	0					
ANR	71933	Argument	from_up		71872	4					
ANR	71934	Identifier	from_up		71872	0					
ANR	71935	Argument	va		71872	5					
ANR	71936	Identifier	va		71872	0					
ANR	71937	Argument	vt		71872	6					
ANR	71938	Identifier	vt		71872	0					
ANR	71939	ExpressionStatement	"place_sequence ( g , l , bm , bp , from_up , vt , vr )"	1489:2:38140:38186	71872	2	True				
ANR	71940	CallExpression	"place_sequence ( g , l , bm , bp , from_up , vt , vr )"		71872	0					
ANR	71941	Callee	place_sequence		71872	0					
ANR	71942	Identifier	place_sequence		71872	0					
ANR	71943	ArgumentList	g		71872	1					
ANR	71944	Argument	g		71872	0					
ANR	71945	Identifier	g		71872	0					
ANR	71946	Argument	l		71872	1					
ANR	71947	Identifier	l		71872	0					
ANR	71948	Argument	bm		71872	2					
ANR	71949	Identifier	bm		71872	0					
ANR	71950	Argument	bp		71872	3					
ANR	71951	Identifier	bp		71872	0					
ANR	71952	Argument	from_up		71872	4					
ANR	71953	Identifier	from_up		71872	0					
ANR	71954	Argument	vt		71872	5					
ANR	71955	Identifier	vt		71872	0					
ANR	71956	Argument	vr		71872	6					
ANR	71957	Identifier	vr		71872	0					
ANR	71958	ExpressionStatement	"combine_sequences ( g , l , bm , bp , from_up , va , vr )"	1490:2:38190:38239	71872	3	True				
ANR	71959	CallExpression	"combine_sequences ( g , l , bm , bp , from_up , va , vr )"		71872	0					
ANR	71960	Callee	combine_sequences		71872	0					
ANR	71961	Identifier	combine_sequences		71872	0					
ANR	71962	ArgumentList	g		71872	1					
ANR	71963	Argument	g		71872	0					
ANR	71964	Identifier	g		71872	0					
ANR	71965	Argument	l		71872	1					
ANR	71966	Identifier	l		71872	0					
ANR	71967	Argument	bm		71872	2					
ANR	71968	Identifier	bm		71872	0					
ANR	71969	Argument	bp		71872	3					
ANR	71970	Identifier	bp		71872	0					
ANR	71971	Argument	from_up		71872	4					
ANR	71972	Identifier	from_up		71872	0					
ANR	71973	Argument	va		71872	5					
ANR	71974	Identifier	va		71872	0					
ANR	71975	Argument	vr		71872	6					
ANR	71976	Identifier	vr		71872	0					
ANR	71977	ReturnType	static void		71872	1					
ANR	71978	Identifier	place_sequence		71872	2					
ANR	71979	ParameterList	"const RAGraph * g , int l , const RGraphNode * bm , const RGraphNode * bp , int from_up , int va , int vr"		71872	3					
ANR	71980	Parameter	const RAGraph * g	1483:27:37870:37885	71872	0	True				
ANR	71981	ParameterType	const RAGraph *		71872	0					
ANR	71982	Identifier	g		71872	1					
ANR	71983	Parameter	int l	1483:45:37888:37892	71872	1	True				
ANR	71984	ParameterType	int		71872	0					
ANR	71985	Identifier	l		71872	1					
ANR	71986	Parameter	const RGraphNode * bm	1483:52:37895:37914	71872	2	True				
ANR	71987	ParameterType	const RGraphNode *		71872	0					
ANR	71988	Identifier	bm		71872	1					
ANR	71989	Parameter	const RGraphNode * bp	1483:74:37917:37936	71872	3	True				
ANR	71990	ParameterType	const RGraphNode *		71872	0					
ANR	71991	Identifier	bp		71872	1					
ANR	71992	Parameter	int from_up	1483:96:37939:37949	71872	4	True				
ANR	71993	ParameterType	int		71872	0					
ANR	71994	Identifier	from_up		71872	1					
ANR	71995	Parameter	int va	1483:109:37952:37957	71872	5	True				
ANR	71996	ParameterType	int		71872	0					
ANR	71997	Identifier	va		71872	1					
ANR	71998	Parameter	int vr	1483:117:37960:37965	71872	6	True				
ANR	71999	ParameterType	int		71872	0					
ANR	72000	Identifier	vr		71872	1					
ANR	72001	CFGEntryNode	ENTRY		71872		True				
ANR	72002	CFGExitNode	EXIT		71872		True				
ANR	72003	Symbol	from_up		71872						
ANR	72004	Symbol	g		71872						
ANR	72005	Symbol	bm		71872						
ANR	72006	Symbol	va		71872						
ANR	72007	Symbol	l		71872						
ANR	72008	Symbol	vr		71872						
ANR	72009	Symbol	bp		71872						
ANR	72010	Symbol	vt		71872						
ANR	72011	Function	original_traverse_l	1497:0:38412:39947							
ANR	72012	FunctionDef	"original_traverse_l (const RAGraph * g , Sdb * D , Sdb * P , int from_up)"		72011	0					
ANR	72013	CompoundStatement		1497:79:38491:39947	72011	0					
ANR	72014	IdentifierDeclStatement	"int i , k , va , vr ;"	1498:1:38494:38510	72011	0	True				
ANR	72015	IdentifierDecl	i		72011	0					
ANR	72016	IdentifierDeclType	int		72011	0					
ANR	72017	Identifier	i		72011	1					
ANR	72018	IdentifierDecl	k		72011	1					
ANR	72019	IdentifierDeclType	int		72011	0					
ANR	72020	Identifier	k		72011	1					
ANR	72021	IdentifierDecl	va		72011	2					
ANR	72022	IdentifierDeclType	int		72011	0					
ANR	72023	Identifier	va		72011	1					
ANR	72024	IdentifierDecl	vr		72011	3					
ANR	72025	IdentifierDeclType	int		72011	0					
ANR	72026	Identifier	vr		72011	1					
ANR	72027	ForStatement	for ( i = from_up ? 0 : g -> n_layers - 1 ; ( from_up && i < g -> n_layers ) || ( ! from_up && i >= 0 ) ; i = from_up ? i + 1 : i - 1 )		72011	1					
ANR	72028	ForInit	i = from_up ? 0 : g -> n_layers - 1 ;	1500:6:38519:38550	72011	0	True				
ANR	72029	AssignmentExpression	i = from_up ? 0 : g -> n_layers - 1		72011	0		=			
ANR	72030	Identifier	i		72011	0					
ANR	72031	ConditionalExpression	from_up ? 0 : g -> n_layers - 1		72011	1					
ANR	72032	Condition	from_up		72011	0					
ANR	72033	Identifier	from_up		72011	0					
ANR	72034	PrimaryExpression	0		72011	1					
ANR	72035	AdditiveExpression	g -> n_layers - 1		72011	2		-			
ANR	72036	PtrMemberAccess	g -> n_layers		72011	0					
ANR	72037	Identifier	g		72011	0					
ANR	72038	Identifier	n_layers		72011	1					
ANR	72039	PrimaryExpression	1		72011	1					
ANR	72040	Condition	( from_up && i < g -> n_layers ) || ( ! from_up && i >= 0 )	1501:3:38555:38606	72011	1	True				
ANR	72041	OrExpression	( from_up && i < g -> n_layers ) || ( ! from_up && i >= 0 )		72011	0		||			
ANR	72042	AndExpression	from_up && i < g -> n_layers		72011	0		&&			
ANR	72043	Identifier	from_up		72011	0					
ANR	72044	RelationalExpression	i < g -> n_layers		72011	1		<			
ANR	72045	Identifier	i		72011	0					
ANR	72046	PtrMemberAccess	g -> n_layers		72011	1					
ANR	72047	Identifier	g		72011	0					
ANR	72048	Identifier	n_layers		72011	1					
ANR	72049	AndExpression	! from_up && i >= 0		72011	1		&&			
ANR	72050	UnaryOperationExpression	! from_up		72011	0					
ANR	72051	UnaryOperator	!		72011	0					
ANR	72052	Identifier	from_up		72011	1					
ANR	72053	RelationalExpression	i >= 0		72011	1		>=			
ANR	72054	Identifier	i		72011	0					
ANR	72055	PrimaryExpression	0		72011	1					
ANR	72056	AssignmentExpression	i = from_up ? i + 1 : i - 1	1502:3:38612:38636	72011	2	True	=			
ANR	72057	Identifier	i		72011	0					
ANR	72058	ConditionalExpression	from_up ? i + 1 : i - 1		72011	1					
ANR	72059	Condition	from_up		72011	0					
ANR	72060	Identifier	from_up		72011	0					
ANR	72061	AdditiveExpression	i + 1		72011	1		+			
ANR	72062	Identifier	i		72011	0					
ANR	72063	PrimaryExpression	1		72011	1					
ANR	72064	AdditiveExpression	i - 1		72011	2		-			
ANR	72065	Identifier	i		72011	0					
ANR	72066	PrimaryExpression	1		72011	1					
ANR	72067	CompoundStatement		9:2:191:215	72011	3					
ANR	72068	IdentifierDeclStatement	int j ;	1503:2:38643:38648	72011	0	True				
ANR	72069	IdentifierDecl	j		72011	0					
ANR	72070	IdentifierDeclType	int		72011	0					
ANR	72071	Identifier	j		72011	1					
ANR	72072	IdentifierDeclStatement	const RGraphNode * bm = NULL ;	1504:2:38652:38679	72011	1	True				
ANR	72073	IdentifierDecl	* bm = NULL		72011	0					
ANR	72074	IdentifierDeclType	const RGraphNode *		72011	0					
ANR	72075	Identifier	bm		72011	1					
ANR	72076	AssignmentExpression	* bm = NULL		72011	2		=			
ANR	72077	Identifier	NULL		72011	0					
ANR	72078	Identifier	NULL		72011	1					
ANR	72079	IdentifierDeclStatement	const RANode * bma = NULL ;	1505:2:38683:38707	72011	2	True				
ANR	72080	IdentifierDecl	* bma = NULL		72011	0					
ANR	72081	IdentifierDeclType	const RANode *		72011	0					
ANR	72082	Identifier	bma		72011	1					
ANR	72083	AssignmentExpression	* bma = NULL		72011	2		=			
ANR	72084	Identifier	NULL		72011	0					
ANR	72085	Identifier	NULL		72011	1					
ANR	72086	ExpressionStatement	j = 0	1507:2:38712:38717	72011	3	True				
ANR	72087	AssignmentExpression	j = 0		72011	0		=			
ANR	72088	Identifier	j		72011	0					
ANR	72089	PrimaryExpression	0		72011	1					
ANR	72090	WhileStatement	while ( j < g -> layers [ i ] . n_nodes && ! bm )		72011	4					
ANR	72091	Condition	j < g -> layers [ i ] . n_nodes && ! bm	1508:9:38728:38758	72011	0	True				
ANR	72092	AndExpression	j < g -> layers [ i ] . n_nodes && ! bm		72011	0		&&			
ANR	72093	RelationalExpression	j < g -> layers [ i ] . n_nodes		72011	0		<			
ANR	72094	Identifier	j		72011	0					
ANR	72095	MemberAccess	g -> layers [ i ] . n_nodes		72011	1					
ANR	72096	ArrayIndexing	g -> layers [ i ]		72011	0					
ANR	72097	PtrMemberAccess	g -> layers		72011	0					
ANR	72098	Identifier	g		72011	0					
ANR	72099	Identifier	layers		72011	1					
ANR	72100	Identifier	i		72011	1					
ANR	72101	Identifier	n_nodes		72011	1					
ANR	72102	UnaryOperationExpression	! bm		72011	1					
ANR	72103	UnaryOperator	!		72011	0					
ANR	72104	Identifier	bm		72011	1					
ANR	72105	CompoundStatement		14:3:323:356	72011	1					
ANR	72106	IdentifierDeclStatement	const RGraphNode * gn = g -> layers [ i ] . nodes [ j ] ;	1509:3:38766:38810	72011	0	True				
ANR	72107	IdentifierDecl	* gn = g -> layers [ i ] . nodes [ j ]		72011	0					
ANR	72108	IdentifierDeclType	const RGraphNode *		72011	0					
ANR	72109	Identifier	gn		72011	1					
ANR	72110	AssignmentExpression	* gn = g -> layers [ i ] . nodes [ j ]		72011	2		=			
ANR	72111	Identifier	gn		72011	0					
ANR	72112	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		72011	1					
ANR	72113	MemberAccess	g -> layers [ i ] . nodes		72011	0					
ANR	72114	ArrayIndexing	g -> layers [ i ]		72011	0					
ANR	72115	PtrMemberAccess	g -> layers		72011	0					
ANR	72116	Identifier	g		72011	0					
ANR	72117	Identifier	layers		72011	1					
ANR	72118	Identifier	i		72011	1					
ANR	72119	Identifier	nodes		72011	1					
ANR	72120	Identifier	j		72011	1					
ANR	72121	IdentifierDeclStatement	const RANode * an = get_anode ( gn ) ;	1510:3:38815:38848	72011	1	True				
ANR	72122	IdentifierDecl	* an = get_anode ( gn )		72011	0					
ANR	72123	IdentifierDeclType	const RANode *		72011	0					
ANR	72124	Identifier	an		72011	1					
ANR	72125	AssignmentExpression	* an = get_anode ( gn )		72011	2		=			
ANR	72126	Identifier	an		72011	0					
ANR	72127	CallExpression	get_anode ( gn )		72011	1					
ANR	72128	Callee	get_anode		72011	0					
ANR	72129	Identifier	get_anode		72011	0					
ANR	72130	ArgumentList	gn		72011	1					
ANR	72131	Argument	gn		72011	0					
ANR	72132	Identifier	gn		72011	0					
ANR	72133	IfStatement	if ( an && an -> is_dummy )		72011	2					
ANR	72134	Condition	an && an -> is_dummy	1511:7:38857:38874	72011	0	True				
ANR	72135	AndExpression	an && an -> is_dummy		72011	0		&&			
ANR	72136	Identifier	an		72011	0					
ANR	72137	PtrMemberAccess	an -> is_dummy		72011	1					
ANR	72138	Identifier	an		72011	0					
ANR	72139	Identifier	is_dummy		72011	1					
ANR	72140	CompoundStatement		15:27:385:385	72011	1					
ANR	72141	ExpressionStatement	va = 0	1512:4:38883:38889	72011	0	True				
ANR	72142	AssignmentExpression	va = 0		72011	0		=			
ANR	72143	Identifier	va		72011	0					
ANR	72144	PrimaryExpression	0		72011	1					
ANR	72145	ExpressionStatement	vr = j	1513:4:38895:38901	72011	1	True				
ANR	72146	AssignmentExpression	vr = j		72011	0		=			
ANR	72147	Identifier	vr		72011	0					
ANR	72148	Identifier	j		72011	1					
ANR	72149	ExpressionStatement	bm = gn	1514:4:38907:38914	72011	2	True				
ANR	72150	AssignmentExpression	bm = gn		72011	0		=			
ANR	72151	Identifier	bm		72011	0					
ANR	72152	Identifier	gn		72011	1					
ANR	72153	ExpressionStatement	bma = an	1515:4:38920:38928	72011	3	True				
ANR	72154	AssignmentExpression	bma = an		72011	0		=			
ANR	72155	Identifier	bma		72011	0					
ANR	72156	Identifier	an		72011	1					
ANR	72157	ExpressionStatement	j ++	1517:3:38938:38941	72011	3	True				
ANR	72158	PostIncDecOperationExpression	j ++		72011	0					
ANR	72159	Identifier	j		72011	0					
ANR	72160	IncDec	++		72011	1					
ANR	72161	IfStatement	if ( ! bm )		72011	5					
ANR	72162	Condition	! bm	1519:6:38953:38955	72011	0	True				
ANR	72163	UnaryOperationExpression	! bm		72011	0					
ANR	72164	UnaryOperator	!		72011	0					
ANR	72165	Identifier	bm		72011	1					
ANR	72166	CompoundStatement		23:11:466:466	72011	1					
ANR	72167	ExpressionStatement	va = 0	1520:3:38963:38969	72011	0	True				
ANR	72168	AssignmentExpression	va = 0		72011	0		=			
ANR	72169	Identifier	va		72011	0					
ANR	72170	PrimaryExpression	0		72011	1					
ANR	72171	ExpressionStatement	vr = g -> layers [ i ] . n_nodes	1521:3:38974:38999	72011	1	True				
ANR	72172	AssignmentExpression	vr = g -> layers [ i ] . n_nodes		72011	0		=			
ANR	72173	Identifier	vr		72011	0					
ANR	72174	MemberAccess	g -> layers [ i ] . n_nodes		72011	1					
ANR	72175	ArrayIndexing	g -> layers [ i ]		72011	0					
ANR	72176	PtrMemberAccess	g -> layers		72011	0					
ANR	72177	Identifier	g		72011	0					
ANR	72178	Identifier	layers		72011	1					
ANR	72179	Identifier	i		72011	1					
ANR	72180	Identifier	n_nodes		72011	1					
ANR	72181	ExpressionStatement	"place_sequence ( g , i , NULL , bm , from_up , va , vr )"	1523:2:39007:39055	72011	6	True				
ANR	72182	CallExpression	"place_sequence ( g , i , NULL , bm , from_up , va , vr )"		72011	0					
ANR	72183	Callee	place_sequence		72011	0					
ANR	72184	Identifier	place_sequence		72011	0					
ANR	72185	ArgumentList	g		72011	1					
ANR	72186	Argument	g		72011	0					
ANR	72187	Identifier	g		72011	0					
ANR	72188	Argument	i		72011	1					
ANR	72189	Identifier	i		72011	0					
ANR	72190	Argument	NULL		72011	2					
ANR	72191	Identifier	NULL		72011	0					
ANR	72192	Argument	bm		72011	3					
ANR	72193	Identifier	bm		72011	0					
ANR	72194	Argument	from_up		72011	4					
ANR	72195	Identifier	from_up		72011	0					
ANR	72196	Argument	va		72011	5					
ANR	72197	Identifier	va		72011	0					
ANR	72198	Argument	vr		72011	6					
ANR	72199	Identifier	vr		72011	0					
ANR	72200	ForStatement	for ( k = va ; k < vr - 1 ; k ++ )		72011	7					
ANR	72201	ForInit	k = va ;	1524:7:39064:39070	72011	0	True				
ANR	72202	AssignmentExpression	k = va		72011	0		=			
ANR	72203	Identifier	k		72011	0					
ANR	72204	Identifier	va		72011	1					
ANR	72205	Condition	k < vr - 1	1524:15:39072:39081	72011	1	True				
ANR	72206	RelationalExpression	k < vr - 1		72011	0		<			
ANR	72207	Identifier	k		72011	0					
ANR	72208	AdditiveExpression	vr - 1		72011	1		-			
ANR	72209	Identifier	vr		72011	0					
ANR	72210	PrimaryExpression	1		72011	1					
ANR	72211	PostIncDecOperationExpression	k ++	1524:27:39084:39086	72011	2	True				
ANR	72212	Identifier	k		72011	0					
ANR	72213	IncDec	++		72011	1					
ANR	72214	CompoundStatement		28:32:597:597	72011	3					
ANR	72215	ExpressionStatement	"set_dist_nodes ( g , i , k , k + 1 )"	1525:3:39094:39125	72011	0	True				
ANR	72216	CallExpression	"set_dist_nodes ( g , i , k , k + 1 )"		72011	0					
ANR	72217	Callee	set_dist_nodes		72011	0					
ANR	72218	Identifier	set_dist_nodes		72011	0					
ANR	72219	ArgumentList	g		72011	1					
ANR	72220	Argument	g		72011	0					
ANR	72221	Identifier	g		72011	0					
ANR	72222	Argument	i		72011	1					
ANR	72223	Identifier	i		72011	0					
ANR	72224	Argument	k		72011	2					
ANR	72225	Identifier	k		72011	0					
ANR	72226	Argument	k + 1		72011	3					
ANR	72227	AdditiveExpression	k + 1		72011	0		+			
ANR	72228	Identifier	k		72011	0					
ANR	72229	PrimaryExpression	1		72011	1					
ANR	72230	IfStatement	"if ( is_valid_pos ( g , i , vr - 1 ) && bm )"		72011	8					
ANR	72231	Condition	"is_valid_pos ( g , i , vr - 1 ) && bm"	1527:6:39137:39169	72011	0	True				
ANR	72232	AndExpression	"is_valid_pos ( g , i , vr - 1 ) && bm"		72011	0		&&			
ANR	72233	CallExpression	"is_valid_pos ( g , i , vr - 1 )"		72011	0					
ANR	72234	Callee	is_valid_pos		72011	0					
ANR	72235	Identifier	is_valid_pos		72011	0					
ANR	72236	ArgumentList	g		72011	1					
ANR	72237	Argument	g		72011	0					
ANR	72238	Identifier	g		72011	0					
ANR	72239	Argument	i		72011	1					
ANR	72240	Identifier	i		72011	0					
ANR	72241	Argument	vr - 1		72011	2					
ANR	72242	AdditiveExpression	vr - 1		72011	0		-			
ANR	72243	Identifier	vr		72011	0					
ANR	72244	PrimaryExpression	1		72011	1					
ANR	72245	Identifier	bm		72011	1					
ANR	72246	CompoundStatement		31:41:680:680	72011	1					
ANR	72247	ExpressionStatement	"set_dist_nodes ( g , i , vr - 1 , bma -> pos_in_layer )"	1528:3:39177:39225	72011	0	True				
ANR	72248	CallExpression	"set_dist_nodes ( g , i , vr - 1 , bma -> pos_in_layer )"		72011	0					
ANR	72249	Callee	set_dist_nodes		72011	0					
ANR	72250	Identifier	set_dist_nodes		72011	0					
ANR	72251	ArgumentList	g		72011	1					
ANR	72252	Argument	g		72011	0					
ANR	72253	Identifier	g		72011	0					
ANR	72254	Argument	i		72011	1					
ANR	72255	Identifier	i		72011	0					
ANR	72256	Argument	vr - 1		72011	2					
ANR	72257	AdditiveExpression	vr - 1		72011	0		-			
ANR	72258	Identifier	vr		72011	0					
ANR	72259	PrimaryExpression	1		72011	1					
ANR	72260	Argument	bma -> pos_in_layer		72011	3					
ANR	72261	PtrMemberAccess	bma -> pos_in_layer		72011	0					
ANR	72262	Identifier	bma		72011	0					
ANR	72263	Identifier	pos_in_layer		72011	1					
ANR	72264	WhileStatement	while ( bm )		72011	9					
ANR	72265	Condition	bm	1530:9:39240:39241	72011	0	True				
ANR	72266	Identifier	bm		72011	0					
ANR	72267	CompoundStatement		36:3:808:832	72011	1					
ANR	72268	IdentifierDeclStatement	"const RGraphNode * bp = get_right_dummy ( g , bm ) ;"	1531:3:39249:39295	72011	0	True				
ANR	72269	IdentifierDecl	"* bp = get_right_dummy ( g , bm )"		72011	0					
ANR	72270	IdentifierDeclType	const RGraphNode *		72011	0					
ANR	72271	Identifier	bp		72011	1					
ANR	72272	AssignmentExpression	"* bp = get_right_dummy ( g , bm )"		72011	2		=			
ANR	72273	Identifier	bp		72011	0					
ANR	72274	CallExpression	"get_right_dummy ( g , bm )"		72011	1					
ANR	72275	Callee	get_right_dummy		72011	0					
ANR	72276	Identifier	get_right_dummy		72011	0					
ANR	72277	ArgumentList	g		72011	1					
ANR	72278	Argument	g		72011	0					
ANR	72279	Identifier	g		72011	0					
ANR	72280	Argument	bm		72011	1					
ANR	72281	Identifier	bm		72011	0					
ANR	72282	IdentifierDeclStatement	const RANode * bpa = NULL ;	1532:3:39300:39324	72011	1	True				
ANR	72283	IdentifierDecl	* bpa = NULL		72011	0					
ANR	72284	IdentifierDeclType	const RANode *		72011	0					
ANR	72285	Identifier	bpa		72011	1					
ANR	72286	AssignmentExpression	* bpa = NULL		72011	2		=			
ANR	72287	Identifier	NULL		72011	0					
ANR	72288	Identifier	NULL		72011	1					
ANR	72289	ExpressionStatement	bma = get_anode ( bm )	1533:3:39329:39349	72011	2	True				
ANR	72290	AssignmentExpression	bma = get_anode ( bm )		72011	0		=			
ANR	72291	Identifier	bma		72011	0					
ANR	72292	CallExpression	get_anode ( bm )		72011	1					
ANR	72293	Callee	get_anode		72011	0					
ANR	72294	Identifier	get_anode		72011	0					
ANR	72295	ArgumentList	bm		72011	1					
ANR	72296	Argument	bm		72011	0					
ANR	72297	Identifier	bm		72011	0					
ANR	72298	IfStatement	if ( ! bp )		72011	3					
ANR	72299	Condition	! bp	1535:7:39359:39361	72011	0	True				
ANR	72300	UnaryOperationExpression	! bp		72011	0					
ANR	72301	UnaryOperator	!		72011	0					
ANR	72302	Identifier	bp		72011	1					
ANR	72303	CompoundStatement		39:12:872:872	72011	1					
ANR	72304	ExpressionStatement	va = bma -> pos_in_layer + 1	1536:4:39370:39396	72011	0	True				
ANR	72305	AssignmentExpression	va = bma -> pos_in_layer + 1		72011	0		=			
ANR	72306	Identifier	va		72011	0					
ANR	72307	AdditiveExpression	bma -> pos_in_layer + 1		72011	1		+			
ANR	72308	PtrMemberAccess	bma -> pos_in_layer		72011	0					
ANR	72309	Identifier	bma		72011	0					
ANR	72310	Identifier	pos_in_layer		72011	1					
ANR	72311	PrimaryExpression	1		72011	1					
ANR	72312	ExpressionStatement	vr = g -> layers [ bma -> layer ] . n_nodes	1537:4:39402:39436	72011	1	True				
ANR	72313	AssignmentExpression	vr = g -> layers [ bma -> layer ] . n_nodes		72011	0		=			
ANR	72314	Identifier	vr		72011	0					
ANR	72315	MemberAccess	g -> layers [ bma -> layer ] . n_nodes		72011	1					
ANR	72316	ArrayIndexing	g -> layers [ bma -> layer ]		72011	0					
ANR	72317	PtrMemberAccess	g -> layers		72011	0					
ANR	72318	Identifier	g		72011	0					
ANR	72319	Identifier	layers		72011	1					
ANR	72320	PtrMemberAccess	bma -> layer		72011	1					
ANR	72321	Identifier	bma		72011	0					
ANR	72322	Identifier	layer		72011	1					
ANR	72323	Identifier	n_nodes		72011	1					
ANR	72324	ExpressionStatement	"place_sequence ( g , i , bm , NULL , from_up , va , vr )"	1538:4:39442:39490	72011	2	True				
ANR	72325	CallExpression	"place_sequence ( g , i , bm , NULL , from_up , va , vr )"		72011	0					
ANR	72326	Callee	place_sequence		72011	0					
ANR	72327	Identifier	place_sequence		72011	0					
ANR	72328	ArgumentList	g		72011	1					
ANR	72329	Argument	g		72011	0					
ANR	72330	Identifier	g		72011	0					
ANR	72331	Argument	i		72011	1					
ANR	72332	Identifier	i		72011	0					
ANR	72333	Argument	bm		72011	2					
ANR	72334	Identifier	bm		72011	0					
ANR	72335	Argument	NULL		72011	3					
ANR	72336	Identifier	NULL		72011	0					
ANR	72337	Argument	from_up		72011	4					
ANR	72338	Identifier	from_up		72011	0					
ANR	72339	Argument	va		72011	5					
ANR	72340	Identifier	va		72011	0					
ANR	72341	Argument	vr		72011	6					
ANR	72342	Identifier	vr		72011	0					
ANR	72343	ForStatement	for ( k = va ; k < vr - 1 ; ++ k )		72011	3					
ANR	72344	ForInit	k = va ;	1539:9:39501:39507	72011	0	True				
ANR	72345	AssignmentExpression	k = va		72011	0		=			
ANR	72346	Identifier	k		72011	0					
ANR	72347	Identifier	va		72011	1					
ANR	72348	Condition	k < vr - 1	1539:17:39509:39518	72011	1	True				
ANR	72349	RelationalExpression	k < vr - 1		72011	0		<			
ANR	72350	Identifier	k		72011	0					
ANR	72351	AdditiveExpression	vr - 1		72011	1		-			
ANR	72352	Identifier	vr		72011	0					
ANR	72353	PrimaryExpression	1		72011	1					
ANR	72354	UnaryExpression	++ k	1539:29:39521:39523	72011	2	True				
ANR	72355	IncDec	++		72011	0					
ANR	72356	Identifier	k		72011	1					
ANR	72357	CompoundStatement		43:34:1034:1034	72011	3					
ANR	72358	ExpressionStatement	"set_dist_nodes ( g , i , k , k + 1 )"	1540:5:39533:39564	72011	0	True				
ANR	72359	CallExpression	"set_dist_nodes ( g , i , k , k + 1 )"		72011	0					
ANR	72360	Callee	set_dist_nodes		72011	0					
ANR	72361	Identifier	set_dist_nodes		72011	0					
ANR	72362	ArgumentList	g		72011	1					
ANR	72363	Argument	g		72011	0					
ANR	72364	Identifier	g		72011	0					
ANR	72365	Argument	i		72011	1					
ANR	72366	Identifier	i		72011	0					
ANR	72367	Argument	k		72011	2					
ANR	72368	Identifier	k		72011	0					
ANR	72369	Argument	k + 1		72011	3					
ANR	72370	AdditiveExpression	k + 1		72011	0		+			
ANR	72371	Identifier	k		72011	0					
ANR	72372	PrimaryExpression	1		72011	1					
ANR	72373	IfStatement	"if ( is_valid_pos ( g , i , va ) )"		72011	4					
ANR	72374	Condition	"is_valid_pos ( g , i , va )"	1543:8:39581:39603	72011	0	True				
ANR	72375	CallExpression	"is_valid_pos ( g , i , va )"		72011	0					
ANR	72376	Callee	is_valid_pos		72011	0					
ANR	72377	Identifier	is_valid_pos		72011	0					
ANR	72378	ArgumentList	g		72011	1					
ANR	72379	Argument	g		72011	0					
ANR	72380	Identifier	g		72011	0					
ANR	72381	Argument	i		72011	1					
ANR	72382	Identifier	i		72011	0					
ANR	72383	Argument	va		72011	2					
ANR	72384	Identifier	va		72011	0					
ANR	72385	CompoundStatement		47:33:1114:1114	72011	1					
ANR	72386	ExpressionStatement	"set_dist_nodes ( g , i , bma -> pos_in_layer , va )"	1544:5:39613:39657	72011	0	True				
ANR	72387	CallExpression	"set_dist_nodes ( g , i , bma -> pos_in_layer , va )"		72011	0					
ANR	72388	Callee	set_dist_nodes		72011	0					
ANR	72389	Identifier	set_dist_nodes		72011	0					
ANR	72390	ArgumentList	g		72011	1					
ANR	72391	Argument	g		72011	0					
ANR	72392	Identifier	g		72011	0					
ANR	72393	Argument	i		72011	1					
ANR	72394	Identifier	i		72011	0					
ANR	72395	Argument	bma -> pos_in_layer		72011	2					
ANR	72396	PtrMemberAccess	bma -> pos_in_layer		72011	0					
ANR	72397	Identifier	bma		72011	0					
ANR	72398	Identifier	pos_in_layer		72011	1					
ANR	72399	Argument	va		72011	3					
ANR	72400	Identifier	va		72011	0					
ANR	72401	ElseStatement	else		72011	0					
ANR	72402	IfStatement	"if ( hash_get_int ( D , bm ) == from_up )"		72011	0					
ANR	72403	Condition	"hash_get_int ( D , bm ) == from_up"	1546:14:39679:39709	72011	0	True				
ANR	72404	EqualityExpression	"hash_get_int ( D , bm ) == from_up"		72011	0		==			
ANR	72405	CallExpression	"hash_get_int ( D , bm )"		72011	0					
ANR	72406	Callee	hash_get_int		72011	0					
ANR	72407	Identifier	hash_get_int		72011	0					
ANR	72408	ArgumentList	D		72011	1					
ANR	72409	Argument	D		72011	0					
ANR	72410	Identifier	D		72011	0					
ANR	72411	Argument	bm		72011	1					
ANR	72412	Identifier	bm		72011	0					
ANR	72413	Identifier	from_up		72011	1					
ANR	72414	CompoundStatement		50:47:1220:1220	72011	1					
ANR	72415	ExpressionStatement	bpa = get_anode ( bp )	1547:4:39718:39738	72011	0	True				
ANR	72416	AssignmentExpression	bpa = get_anode ( bp )		72011	0		=			
ANR	72417	Identifier	bpa		72011	0					
ANR	72418	CallExpression	get_anode ( bp )		72011	1					
ANR	72419	Callee	get_anode		72011	0					
ANR	72420	Identifier	get_anode		72011	0					
ANR	72421	ArgumentList	bp		72011	1					
ANR	72422	Argument	bp		72011	0					
ANR	72423	Identifier	bp		72011	0					
ANR	72424	ExpressionStatement	va = bma -> pos_in_layer + 1	1548:4:39744:39770	72011	1	True				
ANR	72425	AssignmentExpression	va = bma -> pos_in_layer + 1		72011	0		=			
ANR	72426	Identifier	va		72011	0					
ANR	72427	AdditiveExpression	bma -> pos_in_layer + 1		72011	1		+			
ANR	72428	PtrMemberAccess	bma -> pos_in_layer		72011	0					
ANR	72429	Identifier	bma		72011	0					
ANR	72430	Identifier	pos_in_layer		72011	1					
ANR	72431	PrimaryExpression	1		72011	1					
ANR	72432	ExpressionStatement	vr = bpa -> pos_in_layer	1549:4:39776:39798	72011	2	True				
ANR	72433	AssignmentExpression	vr = bpa -> pos_in_layer		72011	0		=			
ANR	72434	Identifier	vr		72011	0					
ANR	72435	PtrMemberAccess	bpa -> pos_in_layer		72011	1					
ANR	72436	Identifier	bpa		72011	0					
ANR	72437	Identifier	pos_in_layer		72011	1					
ANR	72438	ExpressionStatement	"place_sequence ( g , i , bm , bp , from_up , va , vr )"	1550:4:39804:39850	72011	3	True				
ANR	72439	CallExpression	"place_sequence ( g , i , bm , bp , from_up , va , vr )"		72011	0					
ANR	72440	Callee	place_sequence		72011	0					
ANR	72441	Identifier	place_sequence		72011	0					
ANR	72442	ArgumentList	g		72011	1					
ANR	72443	Argument	g		72011	0					
ANR	72444	Identifier	g		72011	0					
ANR	72445	Argument	i		72011	1					
ANR	72446	Identifier	i		72011	0					
ANR	72447	Argument	bm		72011	2					
ANR	72448	Identifier	bm		72011	0					
ANR	72449	Argument	bp		72011	3					
ANR	72450	Identifier	bp		72011	0					
ANR	72451	Argument	from_up		72011	4					
ANR	72452	Identifier	from_up		72011	0					
ANR	72453	Argument	va		72011	5					
ANR	72454	Identifier	va		72011	0					
ANR	72455	Argument	vr		72011	6					
ANR	72456	Identifier	vr		72011	0					
ANR	72457	ExpressionStatement	"hash_set ( P , bm , true )"	1551:4:39856:39878	72011	4	True				
ANR	72458	CallExpression	"hash_set ( P , bm , true )"		72011	0					
ANR	72459	Callee	hash_set		72011	0					
ANR	72460	Identifier	hash_set		72011	0					
ANR	72461	ArgumentList	P		72011	1					
ANR	72462	Argument	P		72011	0					
ANR	72463	Identifier	P		72011	0					
ANR	72464	Argument	bm		72011	1					
ANR	72465	Identifier	bm		72011	0					
ANR	72466	Argument	true		72011	2					
ANR	72467	Identifier	true		72011	0					
ANR	72468	ExpressionStatement	bm = bp	1553:3:39888:39895	72011	4	True				
ANR	72469	AssignmentExpression	bm = bp		72011	0		=			
ANR	72470	Identifier	bm		72011	0					
ANR	72471	Identifier	bp		72011	1					
ANR	72472	ExpressionStatement	"adjust_directions ( g , i , from_up , D , P )"	1555:2:39903:39942	72011	10	True				
ANR	72473	CallExpression	"adjust_directions ( g , i , from_up , D , P )"		72011	0					
ANR	72474	Callee	adjust_directions		72011	0					
ANR	72475	Identifier	adjust_directions		72011	0					
ANR	72476	ArgumentList	g		72011	1					
ANR	72477	Argument	g		72011	0					
ANR	72478	Identifier	g		72011	0					
ANR	72479	Argument	i		72011	1					
ANR	72480	Identifier	i		72011	0					
ANR	72481	Argument	from_up		72011	2					
ANR	72482	Identifier	from_up		72011	0					
ANR	72483	Argument	D		72011	3					
ANR	72484	Identifier	D		72011	0					
ANR	72485	Argument	P		72011	4					
ANR	72486	Identifier	P		72011	0					
ANR	72487	ReturnType	static void		72011	1					
ANR	72488	Identifier	original_traverse_l		72011	2					
ANR	72489	ParameterList	"const RAGraph * g , Sdb * D , Sdb * P , int from_up"		72011	3					
ANR	72490	Parameter	const RAGraph * g	1497:32:38444:38459	72011	0	True				
ANR	72491	ParameterType	const RAGraph *		72011	0					
ANR	72492	Identifier	g		72011	1					
ANR	72493	Parameter	Sdb * D	1497:50:38462:38467	72011	1	True				
ANR	72494	ParameterType	Sdb *		72011	0					
ANR	72495	Identifier	D		72011	1					
ANR	72496	Parameter	Sdb * P	1497:58:38470:38475	72011	2	True				
ANR	72497	ParameterType	Sdb *		72011	0					
ANR	72498	Identifier	P		72011	1					
ANR	72499	Parameter	int from_up	1497:66:38478:38488	72011	3	True				
ANR	72500	ParameterType	int		72011	0					
ANR	72501	Identifier	from_up		72011	1					
ANR	72502	CFGEntryNode	ENTRY		72011		True				
ANR	72503	CFGExitNode	EXIT		72011		True				
ANR	72504	Symbol	* bpa		72011						
ANR	72505	Symbol	from_up		72011						
ANR	72506	Symbol	D		72011						
ANR	72507	Symbol	bma -> pos_in_layer		72011						
ANR	72508	Symbol	g -> n_layers		72011						
ANR	72509	Symbol	* * bma		72011						
ANR	72510	Symbol	bm		72011						
ANR	72511	Symbol	bp		72011						
ANR	72512	Symbol	g -> layers [ bma -> layer ] . n_nodes		72011						
ANR	72513	Symbol	is_valid_pos		72011						
ANR	72514	Symbol	P		72011						
ANR	72515	Symbol	g -> layers [ i ] . nodes		72011						
ANR	72516	Symbol	bpa		72011						
ANR	72517	Symbol	bma -> layer		72011						
ANR	72518	Symbol	* bma -> layer		72011						
ANR	72519	Symbol	bpa -> pos_in_layer		72011						
ANR	72520	Symbol	* g -> layers [ i ] . nodes		72011						
ANR	72521	Symbol	an -> is_dummy		72011						
ANR	72522	Symbol	* bma		72011						
ANR	72523	Symbol	* * i		72011						
ANR	72524	Symbol	NULL		72011						
ANR	72525	Symbol	get_anode		72011						
ANR	72526	Symbol	* * g		72011						
ANR	72527	Symbol	g		72011						
ANR	72528	Symbol	gn		72011						
ANR	72529	Symbol	get_right_dummy		72011						
ANR	72530	Symbol	i		72011						
ANR	72531	Symbol	j		72011						
ANR	72532	Symbol	k		72011						
ANR	72533	Symbol	va		72011						
ANR	72534	Symbol	an		72011						
ANR	72535	Symbol	hash_get_int		72011						
ANR	72536	Symbol	* an		72011						
ANR	72537	Symbol	* g		72011						
ANR	72538	Symbol	* i		72011						
ANR	72539	Symbol	* j		72011						
ANR	72540	Symbol	bma		72011						
ANR	72541	Symbol	true		72011						
ANR	72542	Symbol	* g -> layers		72011						
ANR	72543	Symbol	* * * g		72011						
ANR	72544	Symbol	g -> layers [ i ] . n_nodes		72011						
ANR	72545	Symbol	vr		72011						
ANR	72546	Symbol	g -> layers		72011						
ANR	72547	Symbol	* * g -> layers		72011						
ANR	72548	Function	place_original	1562:0:40115:40977							
ANR	72549	FunctionDef	place_original (RAGraph * g)		72548	0					
ANR	72550	CompoundStatement		1562:39:40154:40977	72548	0					
ANR	72551	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	1563:1:40157:40206	72548	0	True				
ANR	72552	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		72548	0					
ANR	72553	IdentifierDeclType	const RList *		72548	0					
ANR	72554	Identifier	nodes		72548	1					
ANR	72555	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		72548	2		=			
ANR	72556	Identifier	nodes		72548	0					
ANR	72557	CallExpression	r_graph_get_nodes ( g -> graph )		72548	1					
ANR	72558	Callee	r_graph_get_nodes		72548	0					
ANR	72559	Identifier	r_graph_get_nodes		72548	0					
ANR	72560	ArgumentList	g -> graph		72548	1					
ANR	72561	Argument	g -> graph		72548	0					
ANR	72562	PtrMemberAccess	g -> graph		72548	0					
ANR	72563	Identifier	g		72548	0					
ANR	72564	Identifier	graph		72548	1					
ANR	72565	IdentifierDeclStatement	const RGraphNode * gn ;	1564:1:40209:40229	72548	1	True				
ANR	72566	IdentifierDecl	* gn		72548	0					
ANR	72567	IdentifierDeclType	const RGraphNode *		72548	0					
ANR	72568	Identifier	gn		72548	1					
ANR	72569	IdentifierDeclStatement	const RListIter * itn ;	1565:1:40232:40252	72548	2	True				
ANR	72570	IdentifierDecl	* itn		72548	0					
ANR	72571	IdentifierDeclType	const RListIter *		72548	0					
ANR	72572	Identifier	itn		72548	1					
ANR	72573	IdentifierDeclStatement	const RANode * an ;	1566:1:40255:40271	72548	3	True				
ANR	72574	IdentifierDecl	* an		72548	0					
ANR	72575	IdentifierDeclType	const RANode *		72548	0					
ANR	72576	Identifier	an		72548	1					
ANR	72577	IdentifierDeclStatement	Sdb * D = sdb_new0 ( ) ;	1568:1:40275:40295	72548	4	True				
ANR	72578	IdentifierDecl	* D = sdb_new0 ( )		72548	0					
ANR	72579	IdentifierDeclType	Sdb *		72548	0					
ANR	72580	Identifier	D		72548	1					
ANR	72581	AssignmentExpression	* D = sdb_new0 ( )		72548	2		=			
ANR	72582	Identifier	D		72548	0					
ANR	72583	CallExpression	sdb_new0 ( )		72548	1					
ANR	72584	Callee	sdb_new0		72548	0					
ANR	72585	Identifier	sdb_new0		72548	0					
ANR	72586	ArgumentList			72548	1					
ANR	72587	IfStatement	if ( ! D )		72548	5					
ANR	72588	Condition	! D	1569:5:40302:40303	72548	0	True				
ANR	72589	UnaryOperationExpression	! D		72548	0					
ANR	72590	UnaryOperator	!		72548	0					
ANR	72591	Identifier	D		72548	1					
ANR	72592	CompoundStatement		8:9:151:151	72548	1					
ANR	72593	ReturnStatement	return ;	1570:2:40310:40316	72548	0	True				
ANR	72594	IdentifierDeclStatement	Sdb * P = sdb_new0 ( ) ;	1572:1:40322:40342	72548	6	True				
ANR	72595	IdentifierDecl	* P = sdb_new0 ( )		72548	0					
ANR	72596	IdentifierDeclType	Sdb *		72548	0					
ANR	72597	Identifier	P		72548	1					
ANR	72598	AssignmentExpression	* P = sdb_new0 ( )		72548	2		=			
ANR	72599	Identifier	P		72548	0					
ANR	72600	CallExpression	sdb_new0 ( )		72548	1					
ANR	72601	Callee	sdb_new0		72548	0					
ANR	72602	Identifier	sdb_new0		72548	0					
ANR	72603	ArgumentList			72548	1					
ANR	72604	IfStatement	if ( ! P )		72548	7					
ANR	72605	Condition	! P	1573:5:40349:40350	72548	0	True				
ANR	72606	UnaryOperationExpression	! P		72548	0					
ANR	72607	UnaryOperator	!		72548	0					
ANR	72608	Identifier	P		72548	1					
ANR	72609	CompoundStatement		12:9:198:198	72548	1					
ANR	72610	ExpressionStatement	sdb_free ( D )	1574:2:40357:40369	72548	0	True				
ANR	72611	CallExpression	sdb_free ( D )		72548	0					
ANR	72612	Callee	sdb_free		72548	0					
ANR	72613	Identifier	sdb_free		72548	0					
ANR	72614	ArgumentList	D		72548	1					
ANR	72615	Argument	D		72548	0					
ANR	72616	Identifier	D		72548	0					
ANR	72617	ReturnStatement	return ;	1575:2:40373:40379	72548	1	True				
ANR	72618	ExpressionStatement	g -> dists = r_list_newf ( ( RListFree ) free )	1577:1:40385:40426	72548	8	True				
ANR	72619	AssignmentExpression	g -> dists = r_list_newf ( ( RListFree ) free )		72548	0		=			
ANR	72620	PtrMemberAccess	g -> dists		72548	0					
ANR	72621	Identifier	g		72548	0					
ANR	72622	Identifier	dists		72548	1					
ANR	72623	CallExpression	r_list_newf ( ( RListFree ) free )		72548	1					
ANR	72624	Callee	r_list_newf		72548	0					
ANR	72625	Identifier	r_list_newf		72548	0					
ANR	72626	ArgumentList	( RListFree ) free		72548	1					
ANR	72627	Argument	( RListFree ) free		72548	0					
ANR	72628	CastExpression	( RListFree ) free		72548	0					
ANR	72629	CastTarget	RListFree		72548	0					
ANR	72630	Identifier	free		72548	1					
ANR	72631	IfStatement	if ( ! g -> dists )		72548	9					
ANR	72632	Condition	! g -> dists	1578:5:40433:40441	72548	0	True				
ANR	72633	UnaryOperationExpression	! g -> dists		72548	0					
ANR	72634	UnaryOperator	!		72548	0					
ANR	72635	PtrMemberAccess	g -> dists		72548	1					
ANR	72636	Identifier	g		72548	0					
ANR	72637	Identifier	dists		72548	1					
ANR	72638	CompoundStatement		17:16:289:289	72548	1					
ANR	72639	ExpressionStatement	sdb_free ( D )	1579:2:40448:40460	72548	0	True				
ANR	72640	CallExpression	sdb_free ( D )		72548	0					
ANR	72641	Callee	sdb_free		72548	0					
ANR	72642	Identifier	sdb_free		72548	0					
ANR	72643	ArgumentList	D		72548	1					
ANR	72644	Argument	D		72548	0					
ANR	72645	Identifier	D		72548	0					
ANR	72646	ExpressionStatement	sdb_free ( P )	1580:2:40464:40476	72548	1	True				
ANR	72647	CallExpression	sdb_free ( P )		72548	0					
ANR	72648	Callee	sdb_free		72548	0					
ANR	72649	Identifier	sdb_free		72548	0					
ANR	72650	ArgumentList	P		72548	1					
ANR	72651	Argument	P		72548	0					
ANR	72652	Identifier	P		72548	0					
ANR	72653	ReturnStatement	return ;	1581:2:40480:40486	72548	2	True				
ANR	72654	Statement	graph_foreach_anode	1584:1:40493:40511	72548	10	True				
ANR	72655	Statement	(	1584:21:40513:40513	72548	11	True				
ANR	72656	Statement	nodes	1584:22:40514:40518	72548	12	True				
ANR	72657	Statement	","	1584:27:40519:40519	72548	13	True				
ANR	72658	Statement	itn	1584:29:40521:40523	72548	14	True				
ANR	72659	Statement	","	1584:32:40524:40524	72548	15	True				
ANR	72660	Statement	gn	1584:34:40526:40527	72548	16	True				
ANR	72661	Statement	","	1584:36:40528:40528	72548	17	True				
ANR	72662	Statement	an	1584:38:40530:40531	72548	18	True				
ANR	72663	Statement	)	1584:40:40532:40532	72548	19	True				
ANR	72664	CompoundStatement		28:2:478:519	72548	20					
ANR	72665	IfStatement	if ( ! an -> is_dummy )		72548	0					
ANR	72666	Condition	! an -> is_dummy	1585:6:40542:40554	72548	0	True				
ANR	72667	UnaryOperationExpression	! an -> is_dummy		72548	0					
ANR	72668	UnaryOperator	!		72548	0					
ANR	72669	PtrMemberAccess	an -> is_dummy		72548	1					
ANR	72670	Identifier	an		72548	0					
ANR	72671	Identifier	is_dummy		72548	1					
ANR	72672	CompoundStatement		24:21:402:402	72548	1					
ANR	72673	ContinueStatement	continue ;	1586:3:40562:40570	72548	0	True				
ANR	72674	IdentifierDeclStatement	"const RGraphNode * right_v = get_right_dummy ( g , gn ) ;"	1588:2:40578:40629	72548	1	True				
ANR	72675	IdentifierDecl	"* right_v = get_right_dummy ( g , gn )"		72548	0					
ANR	72676	IdentifierDeclType	const RGraphNode *		72548	0					
ANR	72677	Identifier	right_v		72548	1					
ANR	72678	AssignmentExpression	"* right_v = get_right_dummy ( g , gn )"		72548	2		=			
ANR	72679	Identifier	right_v		72548	0					
ANR	72680	CallExpression	"get_right_dummy ( g , gn )"		72548	1					
ANR	72681	Callee	get_right_dummy		72548	0					
ANR	72682	Identifier	get_right_dummy		72548	0					
ANR	72683	ArgumentList	g		72548	1					
ANR	72684	Argument	g		72548	0					
ANR	72685	Identifier	g		72548	0					
ANR	72686	Argument	gn		72548	1					
ANR	72687	Identifier	gn		72548	0					
ANR	72688	IdentifierDeclStatement	const RANode * right = get_anode ( right_v ) ;	1589:2:40633:40674	72548	2	True				
ANR	72689	IdentifierDecl	* right = get_anode ( right_v )		72548	0					
ANR	72690	IdentifierDeclType	const RANode *		72548	0					
ANR	72691	Identifier	right		72548	1					
ANR	72692	AssignmentExpression	* right = get_anode ( right_v )		72548	2		=			
ANR	72693	Identifier	right		72548	0					
ANR	72694	CallExpression	get_anode ( right_v )		72548	1					
ANR	72695	Callee	get_anode		72548	0					
ANR	72696	Identifier	get_anode		72548	0					
ANR	72697	ArgumentList	right_v		72548	1					
ANR	72698	Argument	right_v		72548	0					
ANR	72699	Identifier	right_v		72548	0					
ANR	72700	IfStatement	if ( right_v && right )		72548	3					
ANR	72701	Condition	right_v && right	1590:6:40682:40697	72548	0	True				
ANR	72702	AndExpression	right_v && right		72548	0		&&			
ANR	72703	Identifier	right_v		72548	0					
ANR	72704	Identifier	right		72548	1					
ANR	72705	CompoundStatement		31:3:574:633	72548	1					
ANR	72706	ExpressionStatement	"hash_set ( D , gn , 0 )"	1591:3:40705:40724	72548	0	True				
ANR	72707	CallExpression	"hash_set ( D , gn , 0 )"		72548	0					
ANR	72708	Callee	hash_set		72548	0					
ANR	72709	Identifier	hash_set		72548	0					
ANR	72710	ArgumentList	D		72548	1					
ANR	72711	Argument	D		72548	0					
ANR	72712	Identifier	D		72548	0					
ANR	72713	Argument	gn		72548	1					
ANR	72714	Identifier	gn		72548	0					
ANR	72715	Argument	0		72548	2					
ANR	72716	PrimaryExpression	0		72548	0					
ANR	72717	IdentifierDeclStatement	"int dt_eq = right -> x - an -> x == dist_nodes ( g , gn , right_v ) ;"	1592:3:40729:40788	72548	1	True				
ANR	72718	IdentifierDecl	"dt_eq = right -> x - an -> x == dist_nodes ( g , gn , right_v )"		72548	0					
ANR	72719	IdentifierDeclType	int		72548	0					
ANR	72720	Identifier	dt_eq		72548	1					
ANR	72721	AssignmentExpression	"dt_eq = right -> x - an -> x == dist_nodes ( g , gn , right_v )"		72548	2		=			
ANR	72722	Identifier	dt_eq		72548	0					
ANR	72723	EqualityExpression	"right -> x - an -> x == dist_nodes ( g , gn , right_v )"		72548	1		==			
ANR	72724	AdditiveExpression	right -> x - an -> x		72548	0		-			
ANR	72725	PtrMemberAccess	right -> x		72548	0					
ANR	72726	Identifier	right		72548	0					
ANR	72727	Identifier	x		72548	1					
ANR	72728	PtrMemberAccess	an -> x		72548	1					
ANR	72729	Identifier	an		72548	0					
ANR	72730	Identifier	x		72548	1					
ANR	72731	CallExpression	"dist_nodes ( g , gn , right_v )"		72548	1					
ANR	72732	Callee	dist_nodes		72548	0					
ANR	72733	Identifier	dist_nodes		72548	0					
ANR	72734	ArgumentList	g		72548	1					
ANR	72735	Argument	g		72548	0					
ANR	72736	Identifier	g		72548	0					
ANR	72737	Argument	gn		72548	1					
ANR	72738	Identifier	gn		72548	0					
ANR	72739	Argument	right_v		72548	2					
ANR	72740	Identifier	right_v		72548	0					
ANR	72741	ExpressionStatement	"hash_set ( P , gn , dt_eq )"	1593:3:40793:40816	72548	2	True				
ANR	72742	CallExpression	"hash_set ( P , gn , dt_eq )"		72548	0					
ANR	72743	Callee	hash_set		72548	0					
ANR	72744	Identifier	hash_set		72548	0					
ANR	72745	ArgumentList	P		72548	1					
ANR	72746	Argument	P		72548	0					
ANR	72747	Identifier	P		72548	0					
ANR	72748	Argument	gn		72548	1					
ANR	72749	Identifier	gn		72548	0					
ANR	72750	Argument	dt_eq		72548	2					
ANR	72751	Identifier	dt_eq		72548	0					
ANR	72752	ExpressionStatement	"original_traverse_l ( g , D , P , true )"	1597:1:40827:40862	72548	21	True				
ANR	72753	CallExpression	"original_traverse_l ( g , D , P , true )"		72548	0					
ANR	72754	Callee	original_traverse_l		72548	0					
ANR	72755	Identifier	original_traverse_l		72548	0					
ANR	72756	ArgumentList	g		72548	1					
ANR	72757	Argument	g		72548	0					
ANR	72758	Identifier	g		72548	0					
ANR	72759	Argument	D		72548	1					
ANR	72760	Identifier	D		72548	0					
ANR	72761	Argument	P		72548	2					
ANR	72762	Identifier	P		72548	0					
ANR	72763	Argument	true		72548	3					
ANR	72764	Identifier	true		72548	0					
ANR	72765	ExpressionStatement	"original_traverse_l ( g , D , P , false )"	1598:1:40865:40901	72548	22	True				
ANR	72766	CallExpression	"original_traverse_l ( g , D , P , false )"		72548	0					
ANR	72767	Callee	original_traverse_l		72548	0					
ANR	72768	Identifier	original_traverse_l		72548	0					
ANR	72769	ArgumentList	g		72548	1					
ANR	72770	Argument	g		72548	0					
ANR	72771	Identifier	g		72548	0					
ANR	72772	Argument	D		72548	1					
ANR	72773	Identifier	D		72548	0					
ANR	72774	Argument	P		72548	2					
ANR	72775	Identifier	P		72548	0					
ANR	72776	Argument	false		72548	3					
ANR	72777	Identifier	false		72548	0					
ANR	72778	ExpressionStatement	r_list_free ( g -> dists )	1600:1:40905:40927	72548	23	True				
ANR	72779	CallExpression	r_list_free ( g -> dists )		72548	0					
ANR	72780	Callee	r_list_free		72548	0					
ANR	72781	Identifier	r_list_free		72548	0					
ANR	72782	ArgumentList	g -> dists		72548	1					
ANR	72783	Argument	g -> dists		72548	0					
ANR	72784	PtrMemberAccess	g -> dists		72548	0					
ANR	72785	Identifier	g		72548	0					
ANR	72786	Identifier	dists		72548	1					
ANR	72787	ExpressionStatement	g -> dists = NULL	1601:1:40930:40945	72548	24	True				
ANR	72788	AssignmentExpression	g -> dists = NULL		72548	0		=			
ANR	72789	PtrMemberAccess	g -> dists		72548	0					
ANR	72790	Identifier	g		72548	0					
ANR	72791	Identifier	dists		72548	1					
ANR	72792	Identifier	NULL		72548	1					
ANR	72793	ExpressionStatement	sdb_free ( P )	1602:1:40948:40960	72548	25	True				
ANR	72794	CallExpression	sdb_free ( P )		72548	0					
ANR	72795	Callee	sdb_free		72548	0					
ANR	72796	Identifier	sdb_free		72548	0					
ANR	72797	ArgumentList	P		72548	1					
ANR	72798	Argument	P		72548	0					
ANR	72799	Identifier	P		72548	0					
ANR	72800	ExpressionStatement	sdb_free ( D )	1603:1:40963:40975	72548	26	True				
ANR	72801	CallExpression	sdb_free ( D )		72548	0					
ANR	72802	Callee	sdb_free		72548	0					
ANR	72803	Identifier	sdb_free		72548	0					
ANR	72804	ArgumentList	D		72548	1					
ANR	72805	Argument	D		72548	0					
ANR	72806	Identifier	D		72548	0					
ANR	72807	ReturnType	static void		72548	1					
ANR	72808	Identifier	place_original		72548	2					
ANR	72809	ParameterList	RAGraph * g		72548	3					
ANR	72810	Parameter	RAGraph * g	1562:27:40142:40151	72548	0	True				
ANR	72811	ParameterType	RAGraph *		72548	0					
ANR	72812	Identifier	g		72548	1					
ANR	72813	CFGEntryNode	ENTRY		72548		True				
ANR	72814	CFGExitNode	EXIT		72548		True				
ANR	72815	CFGErrorNode	ERROR		72548		True				
ANR	72816	Symbol	dist_nodes		72548						
ANR	72817	Symbol	D		72548						
ANR	72818	Symbol	g -> dists		72548						
ANR	72819	Symbol	dt_eq		72548						
ANR	72820	Symbol	P		72548						
ANR	72821	Symbol	g -> graph		72548						
ANR	72822	Symbol	an -> x		72548						
ANR	72823	Symbol	free		72548						
ANR	72824	Symbol	right_v		72548						
ANR	72825	Symbol	an -> is_dummy		72548						
ANR	72826	Symbol	sdb_new0		72548						
ANR	72827	Symbol	itn		72548						
ANR	72828	Symbol	r_graph_get_nodes		72548						
ANR	72829	Symbol	get_anode		72548						
ANR	72830	Symbol	NULL		72548						
ANR	72831	Symbol	r_list_newf		72548						
ANR	72832	Symbol	g		72548						
ANR	72833	Symbol	gn		72548						
ANR	72834	Symbol	get_right_dummy		72548						
ANR	72835	Symbol	false		72548						
ANR	72836	Symbol	right		72548						
ANR	72837	Symbol	an		72548						
ANR	72838	Symbol	* an		72548						
ANR	72839	Symbol	* g		72548						
ANR	72840	Symbol	nodes		72548						
ANR	72841	Symbol	true		72548						
ANR	72842	Symbol	right -> x		72548						
ANR	72843	Symbol	* right		72548						
ANR	72844	DeclStmt									
ANR	72845	Decl							void	void ( RANode * n )	free_anode
ANR	72846	Function	remove_dummy_nodes	1608:0:41021:41315							
ANR	72847	FunctionDef	remove_dummy_nodes (const RAGraph * g)		72846	0					
ANR	72848	CompoundStatement		1608:49:41070:41315	72846	0					
ANR	72849	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	1609:1:41073:41122	72846	0	True				
ANR	72850	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		72846	0					
ANR	72851	IdentifierDeclType	const RList *		72846	0					
ANR	72852	Identifier	nodes		72846	1					
ANR	72853	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		72846	2		=			
ANR	72854	Identifier	nodes		72846	0					
ANR	72855	CallExpression	r_graph_get_nodes ( g -> graph )		72846	1					
ANR	72856	Callee	r_graph_get_nodes		72846	0					
ANR	72857	Identifier	r_graph_get_nodes		72846	0					
ANR	72858	ArgumentList	g -> graph		72846	1					
ANR	72859	Argument	g -> graph		72846	0					
ANR	72860	PtrMemberAccess	g -> graph		72846	0					
ANR	72861	Identifier	g		72846	0					
ANR	72862	Identifier	graph		72846	1					
ANR	72863	IdentifierDeclStatement	RGraphNode * gn ;	1610:1:41125:41139	72846	1	True				
ANR	72864	IdentifierDecl	* gn		72846	0					
ANR	72865	IdentifierDeclType	RGraphNode *		72846	0					
ANR	72866	Identifier	gn		72846	1					
ANR	72867	IdentifierDeclStatement	RListIter * it ;	1611:1:41142:41155	72846	2	True				
ANR	72868	IdentifierDecl	* it		72846	0					
ANR	72869	IdentifierDeclType	RListIter *		72846	0					
ANR	72870	Identifier	it		72846	1					
ANR	72871	IdentifierDeclStatement	RANode * n ;	1612:1:41158:41167	72846	3	True				
ANR	72872	IdentifierDecl	* n		72846	0					
ANR	72873	IdentifierDeclType	RANode *		72846	0					
ANR	72874	Identifier	n		72846	1					
ANR	72875	Statement	graph_foreach_anode	1614:1:41171:41189	72846	4	True				
ANR	72876	Statement	(	1614:21:41191:41191	72846	5	True				
ANR	72877	Statement	nodes	1614:22:41192:41196	72846	6	True				
ANR	72878	Statement	","	1614:27:41197:41197	72846	7	True				
ANR	72879	Statement	it	1614:29:41199:41200	72846	8	True				
ANR	72880	Statement	","	1614:31:41201:41201	72846	9	True				
ANR	72881	Statement	gn	1614:33:41203:41204	72846	10	True				
ANR	72882	Statement	","	1614:35:41205:41205	72846	11	True				
ANR	72883	Statement	n	1614:37:41207:41207	72846	12	True				
ANR	72884	Statement	)	1614:38:41208:41208	72846	13	True				
ANR	72885	CompoundStatement		7:40:139:139	72846	14					
ANR	72886	IfStatement	if ( n -> is_dummy )		72846	0					
ANR	72887	Condition	n -> is_dummy	1615:6:41218:41228	72846	0	True				
ANR	72888	PtrMemberAccess	n -> is_dummy		72846	0					
ANR	72889	Identifier	n		72846	0					
ANR	72890	Identifier	is_dummy		72846	1					
ANR	72891	CompoundStatement		8:19:160:160	72846	1					
ANR	72892	ExpressionStatement	"r_graph_del_node ( g -> graph , gn )"	1616:3:41236:41267	72846	0	True				
ANR	72893	CallExpression	"r_graph_del_node ( g -> graph , gn )"		72846	0					
ANR	72894	Callee	r_graph_del_node		72846	0					
ANR	72895	Identifier	r_graph_del_node		72846	0					
ANR	72896	ArgumentList	g -> graph		72846	1					
ANR	72897	Argument	g -> graph		72846	0					
ANR	72898	PtrMemberAccess	g -> graph		72846	0					
ANR	72899	Identifier	g		72846	0					
ANR	72900	Identifier	graph		72846	1					
ANR	72901	Argument	gn		72846	1					
ANR	72902	Identifier	gn		72846	0					
ANR	72903	ExpressionStatement	n -> gnode = NULL	1617:3:41272:41287	72846	1	True				
ANR	72904	AssignmentExpression	n -> gnode = NULL		72846	0		=			
ANR	72905	PtrMemberAccess	n -> gnode		72846	0					
ANR	72906	Identifier	n		72846	0					
ANR	72907	Identifier	gnode		72846	1					
ANR	72908	Identifier	NULL		72846	1					
ANR	72909	ExpressionStatement	free_anode ( n )	1618:3:41292:41306	72846	2	True				
ANR	72910	CallExpression	free_anode ( n )		72846	0					
ANR	72911	Callee	free_anode		72846	0					
ANR	72912	Identifier	free_anode		72846	0					
ANR	72913	ArgumentList	n		72846	1					
ANR	72914	Argument	n		72846	0					
ANR	72915	Identifier	n		72846	0					
ANR	72916	ReturnType	static void		72846	1					
ANR	72917	Identifier	remove_dummy_nodes		72846	2					
ANR	72918	ParameterList	const RAGraph * g		72846	3					
ANR	72919	Parameter	const RAGraph * g	1608:31:41052:41067	72846	0	True				
ANR	72920	ParameterType	const RAGraph *		72846	0					
ANR	72921	Identifier	g		72846	1					
ANR	72922	CFGEntryNode	ENTRY		72846		True				
ANR	72923	CFGExitNode	EXIT		72846		True				
ANR	72924	Symbol	* g		72846						
ANR	72925	Symbol	n -> gnode		72846						
ANR	72926	Symbol	nodes		72846						
ANR	72927	Symbol	r_graph_get_nodes		72846						
ANR	72928	Symbol	NULL		72846						
ANR	72929	Symbol	g -> graph		72846						
ANR	72930	Symbol	g		72846						
ANR	72931	Symbol	gn		72846						
ANR	72932	Symbol	* n		72846						
ANR	72933	Symbol	n -> is_dummy		72846						
ANR	72934	Symbol	it		72846						
ANR	72935	Symbol	n		72846						
ANR	72936	Function	set_layer_gap	1624:0:41325:42547							
ANR	72937	FunctionDef	set_layer_gap (RAGraph * g)		72936	0					
ANR	72938	CompoundStatement		1624:39:41364:42547	72936	0					
ANR	72939	IdentifierDeclStatement	int gap = 0 ;	1625:1:41367:41378	72936	0	True				
ANR	72940	IdentifierDecl	gap = 0		72936	0					
ANR	72941	IdentifierDeclType	int		72936	0					
ANR	72942	Identifier	gap		72936	1					
ANR	72943	AssignmentExpression	gap = 0		72936	2		=			
ANR	72944	Identifier	gap		72936	0					
ANR	72945	PrimaryExpression	0		72936	1					
ANR	72946	IdentifierDeclStatement	"int i = 0 , j = 0 ;"	1626:1:41381:41397	72936	1	True				
ANR	72947	IdentifierDecl	i = 0		72936	0					
ANR	72948	IdentifierDeclType	int		72936	0					
ANR	72949	Identifier	i		72936	1					
ANR	72950	AssignmentExpression	i = 0		72936	2		=			
ANR	72951	Identifier	i		72936	0					
ANR	72952	PrimaryExpression	0		72936	1					
ANR	72953	IdentifierDecl	j = 0		72936	1					
ANR	72954	IdentifierDeclType	int		72936	0					
ANR	72955	Identifier	j		72936	1					
ANR	72956	AssignmentExpression	j = 0		72936	2		=			
ANR	72957	Identifier	j		72936	0					
ANR	72958	PrimaryExpression	0		72936	1					
ANR	72959	IdentifierDeclStatement	RListIter * itn ;	1627:1:41400:41414	72936	2	True				
ANR	72960	IdentifierDecl	* itn		72936	0					
ANR	72961	IdentifierDeclType	RListIter *		72936	0					
ANR	72962	Identifier	itn		72936	1					
ANR	72963	IdentifierDeclStatement	"RGraphNode * ga , * gb ;"	1628:1:41417:41436	72936	3	True				
ANR	72964	IdentifierDecl	* ga		72936	0					
ANR	72965	IdentifierDeclType	RGraphNode *		72936	0					
ANR	72966	Identifier	ga		72936	1					
ANR	72967	IdentifierDecl	* gb		72936	1					
ANR	72968	IdentifierDeclType	RGraphNode *		72936	0					
ANR	72969	Identifier	gb		72936	1					
ANR	72970	IdentifierDeclStatement	"RANode * a , * b ;"	1629:1:41439:41452	72936	4	True				
ANR	72971	IdentifierDecl	* a		72936	0					
ANR	72972	IdentifierDeclType	RANode *		72936	0					
ANR	72973	Identifier	a		72936	1					
ANR	72974	IdentifierDecl	* b		72936	1					
ANR	72975	IdentifierDeclType	RANode *		72936	0					
ANR	72976	Identifier	b		72936	1					
ANR	72977	IdentifierDeclStatement	const RList * outnodes ;	1630:1:41455:41476	72936	5	True				
ANR	72978	IdentifierDecl	* outnodes		72936	0					
ANR	72979	IdentifierDeclType	const RList *		72936	0					
ANR	72980	Identifier	outnodes		72936	1					
ANR	72981	ExpressionStatement	g -> layers [ 0 ] . gap = 0	1632:1:41480:41500	72936	6	True				
ANR	72982	AssignmentExpression	g -> layers [ 0 ] . gap = 0		72936	0		=			
ANR	72983	MemberAccess	g -> layers [ 0 ] . gap		72936	0					
ANR	72984	ArrayIndexing	g -> layers [ 0 ]		72936	0					
ANR	72985	PtrMemberAccess	g -> layers		72936	0					
ANR	72986	Identifier	g		72936	0					
ANR	72987	Identifier	layers		72936	1					
ANR	72988	PrimaryExpression	0		72936	1					
ANR	72989	Identifier	gap		72936	1					
ANR	72990	PrimaryExpression	0		72936	1					
ANR	72991	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		72936	7					
ANR	72992	ForInit	i = 0 ;	1633:6:41508:41513	72936	0	True				
ANR	72993	AssignmentExpression	i = 0		72936	0		=			
ANR	72994	Identifier	i		72936	0					
ANR	72995	PrimaryExpression	0		72936	1					
ANR	72996	Condition	i < g -> n_layers	1633:13:41515:41529	72936	1	True				
ANR	72997	RelationalExpression	i < g -> n_layers		72936	0		<			
ANR	72998	Identifier	i		72936	0					
ANR	72999	PtrMemberAccess	g -> n_layers		72936	1					
ANR	73000	Identifier	g		72936	0					
ANR	73001	Identifier	n_layers		72936	1					
ANR	73002	PostIncDecOperationExpression	i ++	1633:30:41532:41534	72936	2	True				
ANR	73003	Identifier	i		72936	0					
ANR	73004	IncDec	++		72936	1					
ANR	73005	CompoundStatement		10:35:172:172	72936	3					
ANR	73006	ExpressionStatement	gap = 0	1634:2:41541:41548	72936	0	True				
ANR	73007	AssignmentExpression	gap = 0		72936	0		=			
ANR	73008	Identifier	gap		72936	0					
ANR	73009	PrimaryExpression	0		72936	1					
ANR	73010	IfStatement	if ( i + 1 < g -> n_layers )		72936	1					
ANR	73011	Condition	i + 1 < g -> n_layers	1635:6:41556:41574	72936	0	True				
ANR	73012	RelationalExpression	i + 1 < g -> n_layers		72936	0		<			
ANR	73013	AdditiveExpression	i + 1		72936	0		+			
ANR	73014	Identifier	i		72936	0					
ANR	73015	PrimaryExpression	1		72936	1					
ANR	73016	PtrMemberAccess	g -> n_layers		72936	1					
ANR	73017	Identifier	g		72936	0					
ANR	73018	Identifier	n_layers		72936	1					
ANR	73019	CompoundStatement		12:27:212:212	72936	1					
ANR	73020	ExpressionStatement	g -> layers [ i + 1 ] . gap = gap	1636:3:41582:41606	72936	0	True				
ANR	73021	AssignmentExpression	g -> layers [ i + 1 ] . gap = gap		72936	0		=			
ANR	73022	MemberAccess	g -> layers [ i + 1 ] . gap		72936	0					
ANR	73023	ArrayIndexing	g -> layers [ i + 1 ]		72936	0					
ANR	73024	PtrMemberAccess	g -> layers		72936	0					
ANR	73025	Identifier	g		72936	0					
ANR	73026	Identifier	layers		72936	1					
ANR	73027	AdditiveExpression	i + 1		72936	1		+			
ANR	73028	Identifier	i		72936	0					
ANR	73029	PrimaryExpression	1		72936	1					
ANR	73030	Identifier	gap		72936	1					
ANR	73031	Identifier	gap		72936	1					
ANR	73032	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; j ++ )		72936	2					
ANR	73033	ForInit	j = 0 ;	1638:7:41619:41624	72936	0	True				
ANR	73034	AssignmentExpression	j = 0		72936	0		=			
ANR	73035	Identifier	j		72936	0					
ANR	73036	PrimaryExpression	0		72936	1					
ANR	73037	Condition	j < g -> layers [ i ] . n_nodes	1638:14:41626:41649	72936	1	True				
ANR	73038	RelationalExpression	j < g -> layers [ i ] . n_nodes		72936	0		<			
ANR	73039	Identifier	j		72936	0					
ANR	73040	MemberAccess	g -> layers [ i ] . n_nodes		72936	1					
ANR	73041	ArrayIndexing	g -> layers [ i ]		72936	0					
ANR	73042	PtrMemberAccess	g -> layers		72936	0					
ANR	73043	Identifier	g		72936	0					
ANR	73044	Identifier	layers		72936	1					
ANR	73045	Identifier	i		72936	1					
ANR	73046	Identifier	n_nodes		72936	1					
ANR	73047	PostIncDecOperationExpression	j ++	1638:40:41652:41654	72936	2	True				
ANR	73048	Identifier	j		72936	0					
ANR	73049	IncDec	++		72936	1					
ANR	73050	CompoundStatement		15:45:292:292	72936	3					
ANR	73051	ExpressionStatement	ga = g -> layers [ i ] . nodes [ j ]	1639:3:41662:41688	72936	0	True				
ANR	73052	AssignmentExpression	ga = g -> layers [ i ] . nodes [ j ]		72936	0		=			
ANR	73053	Identifier	ga		72936	0					
ANR	73054	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		72936	1					
ANR	73055	MemberAccess	g -> layers [ i ] . nodes		72936	0					
ANR	73056	ArrayIndexing	g -> layers [ i ]		72936	0					
ANR	73057	PtrMemberAccess	g -> layers		72936	0					
ANR	73058	Identifier	g		72936	0					
ANR	73059	Identifier	layers		72936	1					
ANR	73060	Identifier	i		72936	1					
ANR	73061	Identifier	nodes		72936	1					
ANR	73062	Identifier	j		72936	1					
ANR	73063	IfStatement	if ( ! ga )		72936	1					
ANR	73064	Condition	! ga	1640:7:41697:41699	72936	0	True				
ANR	73065	UnaryOperationExpression	! ga		72936	0					
ANR	73066	UnaryOperator	!		72936	0					
ANR	73067	Identifier	ga		72936	1					
ANR	73068	CompoundStatement		17:12:337:337	72936	1					
ANR	73069	ContinueStatement	continue ;	1641:4:41708:41716	72936	0	True				
ANR	73070	ExpressionStatement	a = ( RANode * ) ga -> data	1643:3:41726:41749	72936	2	True				
ANR	73071	AssignmentExpression	a = ( RANode * ) ga -> data		72936	0		=			
ANR	73072	Identifier	a		72936	0					
ANR	73073	CastExpression	( RANode * ) ga -> data		72936	1					
ANR	73074	CastTarget	RANode *		72936	0					
ANR	73075	PtrMemberAccess	ga -> data		72936	1					
ANR	73076	Identifier	ga		72936	0					
ANR	73077	Identifier	data		72936	1					
ANR	73078	ExpressionStatement	outnodes = ga -> out_nodes	1644:3:41754:41778	72936	3	True				
ANR	73079	AssignmentExpression	outnodes = ga -> out_nodes		72936	0		=			
ANR	73080	Identifier	outnodes		72936	0					
ANR	73081	PtrMemberAccess	ga -> out_nodes		72936	1					
ANR	73082	Identifier	ga		72936	0					
ANR	73083	Identifier	out_nodes		72936	1					
ANR	73084	IfStatement	if ( ! outnodes || ! a )		72936	4					
ANR	73085	Condition	! outnodes || ! a	1646:7:41788:41802	72936	0	True				
ANR	73086	OrExpression	! outnodes || ! a		72936	0		||			
ANR	73087	UnaryOperationExpression	! outnodes		72936	0					
ANR	73088	UnaryOperator	!		72936	0					
ANR	73089	Identifier	outnodes		72936	1					
ANR	73090	UnaryOperationExpression	! a		72936	1					
ANR	73091	UnaryOperator	!		72936	0					
ANR	73092	Identifier	a		72936	1					
ANR	73093	CompoundStatement		23:24:440:440	72936	1					
ANR	73094	ContinueStatement	continue ;	1647:4:41811:41819	72936	0	True				
ANR	73095	Statement	graph_foreach_anode	1649:3:41829:41847	72936	5	True				
ANR	73096	Statement	(	1649:23:41849:41849	72936	6	True				
ANR	73097	Statement	outnodes	1649:24:41850:41857	72936	7	True				
ANR	73098	Statement	","	1649:32:41858:41858	72936	8	True				
ANR	73099	Statement	itn	1649:34:41860:41862	72936	9	True				
ANR	73100	Statement	","	1649:37:41863:41863	72936	10	True				
ANR	73101	Statement	gb	1649:39:41865:41866	72936	11	True				
ANR	73102	Statement	","	1649:41:41867:41867	72936	12	True				
ANR	73103	Statement	b	1649:43:41869:41869	72936	13	True				
ANR	73104	Statement	)	1649:44:41870:41870	72936	14	True				
ANR	73105	CompoundStatement		26:46:507:507	72936	15					
ANR	73106	IfStatement	if ( g -> layout == 0 )		72936	0					
ANR	73107	Condition	g -> layout == 0	1650:8:41882:41895	72936	0	True				
ANR	73108	EqualityExpression	g -> layout == 0		72936	0		==			
ANR	73109	PtrMemberAccess	g -> layout		72936	0					
ANR	73110	Identifier	g		72936	0					
ANR	73111	Identifier	layout		72936	1					
ANR	73112	PrimaryExpression	0		72936	1					
ANR	73113	CompoundStatement		27:24:533:533	72936	1					
ANR	73114	IfStatement	if ( ( b -> x != a -> x ) || b -> layer <= a -> layer )		72936	0					
ANR	73115	Condition	( b -> x != a -> x ) || b -> layer <= a -> layer	1651:9:41928:41965	72936	0	True				
ANR	73116	OrExpression	( b -> x != a -> x ) || b -> layer <= a -> layer		72936	0		||			
ANR	73117	EqualityExpression	b -> x != a -> x		72936	0		!=			
ANR	73118	PtrMemberAccess	b -> x		72936	0					
ANR	73119	Identifier	b		72936	0					
ANR	73120	Identifier	x		72936	1					
ANR	73121	PtrMemberAccess	a -> x		72936	1					
ANR	73122	Identifier	a		72936	0					
ANR	73123	Identifier	x		72936	1					
ANR	73124	RelationalExpression	b -> layer <= a -> layer		72936	1		<=			
ANR	73125	PtrMemberAccess	b -> layer		72936	0					
ANR	73126	Identifier	b		72936	0					
ANR	73127	Identifier	layer		72936	1					
ANR	73128	PtrMemberAccess	a -> layer		72936	1					
ANR	73129	Identifier	a		72936	0					
ANR	73130	Identifier	layer		72936	1					
ANR	73131	CompoundStatement		28:49:603:603	72936	1					
ANR	73132	ExpressionStatement	gap += 1	1652:6:41976:41984	72936	0	True				
ANR	73133	AssignmentExpression	gap += 1		72936	0		+=			
ANR	73134	Identifier	gap		72936	0					
ANR	73135	PrimaryExpression	1		72936	1					
ANR	73136	IfStatement	if ( b -> layer <= a -> layer )		72936	1					
ANR	73137	Condition	b -> layer <= a -> layer	1653:10:41996:42015	72936	0	True				
ANR	73138	RelationalExpression	b -> layer <= a -> layer		72936	0		<=			
ANR	73139	PtrMemberAccess	b -> layer		72936	0					
ANR	73140	Identifier	b		72936	0					
ANR	73141	Identifier	layer		72936	1					
ANR	73142	PtrMemberAccess	a -> layer		72936	1					
ANR	73143	Identifier	a		72936	0					
ANR	73144	Identifier	layer		72936	1					
ANR	73145	CompoundStatement		30:32:653:653	72936	1					
ANR	73146	ExpressionStatement	g -> layers [ b -> layer ] . gap += 1	1654:7:42027:42055	72936	0	True				
ANR	73147	AssignmentExpression	g -> layers [ b -> layer ] . gap += 1		72936	0		+=			
ANR	73148	MemberAccess	g -> layers [ b -> layer ] . gap		72936	0					
ANR	73149	ArrayIndexing	g -> layers [ b -> layer ]		72936	0					
ANR	73150	PtrMemberAccess	g -> layers		72936	0					
ANR	73151	Identifier	g		72936	0					
ANR	73152	Identifier	layers		72936	1					
ANR	73153	PtrMemberAccess	b -> layer		72936	1					
ANR	73154	Identifier	b		72936	0					
ANR	73155	Identifier	layer		72936	1					
ANR	73156	Identifier	gap		72936	1					
ANR	73157	PrimaryExpression	1		72936	1					
ANR	73158	ElseStatement	else		72936	0					
ANR	73159	IfStatement	if ( ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy ) )		72936	0					
ANR	73160	Condition	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )	1656:16:42081:42142	72936	0	True				
ANR	73161	OrExpression	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		72936	0		||			
ANR	73162	AndExpression	! a -> is_dummy && b -> is_dummy		72936	0		&&			
ANR	73163	UnaryOperationExpression	! a -> is_dummy		72936	0					
ANR	73164	UnaryOperator	!		72936	0					
ANR	73165	PtrMemberAccess	a -> is_dummy		72936	1					
ANR	73166	Identifier	a		72936	0					
ANR	73167	Identifier	is_dummy		72936	1					
ANR	73168	PtrMemberAccess	b -> is_dummy		72936	1					
ANR	73169	Identifier	b		72936	0					
ANR	73170	Identifier	is_dummy		72936	1					
ANR	73171	AndExpression	a -> is_dummy && ! b -> is_dummy		72936	1		&&			
ANR	73172	PtrMemberAccess	a -> is_dummy		72936	0					
ANR	73173	Identifier	a		72936	0					
ANR	73174	Identifier	is_dummy		72936	1					
ANR	73175	UnaryOperationExpression	! b -> is_dummy		72936	1					
ANR	73176	UnaryOperator	!		72936	0					
ANR	73177	PtrMemberAccess	b -> is_dummy		72936	1					
ANR	73178	Identifier	b		72936	0					
ANR	73179	Identifier	is_dummy		72936	1					
ANR	73180	CompoundStatement		33:80:780:780	72936	1					
ANR	73181	ExpressionStatement	gap += 1	1657:6:42153:42161	72936	0	True				
ANR	73182	AssignmentExpression	gap += 1		72936	0		+=			
ANR	73183	Identifier	gap		72936	0					
ANR	73184	PrimaryExpression	1		72936	1					
ANR	73185	ElseStatement	else		72936	0					
ANR	73186	CompoundStatement		36:11:816:816	72936	0					
ANR	73187	IfStatement	if ( ( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer )		72936	0					
ANR	73188	Condition	( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer	1660:9:42192:42261	72936	0	True				
ANR	73189	OrExpression	( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer		72936	0		||			
ANR	73190	AndExpression	b -> y == a -> y && b -> h != a -> h		72936	0		&&			
ANR	73191	EqualityExpression	b -> y == a -> y		72936	0		==			
ANR	73192	PtrMemberAccess	b -> y		72936	0					
ANR	73193	Identifier	b		72936	0					
ANR	73194	Identifier	y		72936	1					
ANR	73195	PtrMemberAccess	a -> y		72936	1					
ANR	73196	Identifier	a		72936	0					
ANR	73197	Identifier	y		72936	1					
ANR	73198	EqualityExpression	b -> h != a -> h		72936	1		!=			
ANR	73199	PtrMemberAccess	b -> h		72936	0					
ANR	73200	Identifier	b		72936	0					
ANR	73201	Identifier	h		72936	1					
ANR	73202	PtrMemberAccess	a -> h		72936	1					
ANR	73203	Identifier	a		72936	0					
ANR	73204	Identifier	h		72936	1					
ANR	73205	OrExpression	b -> y != a -> y || b -> layer <= a -> layer		72936	1		||			
ANR	73206	EqualityExpression	b -> y != a -> y		72936	0		!=			
ANR	73207	PtrMemberAccess	b -> y		72936	0					
ANR	73208	Identifier	b		72936	0					
ANR	73209	Identifier	y		72936	1					
ANR	73210	PtrMemberAccess	a -> y		72936	1					
ANR	73211	Identifier	a		72936	0					
ANR	73212	Identifier	y		72936	1					
ANR	73213	RelationalExpression	b -> layer <= a -> layer		72936	1		<=			
ANR	73214	PtrMemberAccess	b -> layer		72936	0					
ANR	73215	Identifier	b		72936	0					
ANR	73216	Identifier	layer		72936	1					
ANR	73217	PtrMemberAccess	a -> layer		72936	1					
ANR	73218	Identifier	a		72936	0					
ANR	73219	Identifier	layer		72936	1					
ANR	73220	CompoundStatement		37:81:899:899	72936	1					
ANR	73221	ExpressionStatement	gap += 1	1661:6:42272:42280	72936	0	True				
ANR	73222	AssignmentExpression	gap += 1		72936	0		+=			
ANR	73223	Identifier	gap		72936	0					
ANR	73224	PrimaryExpression	1		72936	1					
ANR	73225	IfStatement	if ( b -> layer <= a -> layer )		72936	1					
ANR	73226	Condition	b -> layer <= a -> layer	1662:10:42292:42311	72936	0	True				
ANR	73227	RelationalExpression	b -> layer <= a -> layer		72936	0		<=			
ANR	73228	PtrMemberAccess	b -> layer		72936	0					
ANR	73229	Identifier	b		72936	0					
ANR	73230	Identifier	layer		72936	1					
ANR	73231	PtrMemberAccess	a -> layer		72936	1					
ANR	73232	Identifier	a		72936	0					
ANR	73233	Identifier	layer		72936	1					
ANR	73234	CompoundStatement		39:32:949:949	72936	1					
ANR	73235	ExpressionStatement	g -> layers [ b -> layer ] . gap += 1	1663:7:42323:42351	72936	0	True				
ANR	73236	AssignmentExpression	g -> layers [ b -> layer ] . gap += 1		72936	0		+=			
ANR	73237	MemberAccess	g -> layers [ b -> layer ] . gap		72936	0					
ANR	73238	ArrayIndexing	g -> layers [ b -> layer ]		72936	0					
ANR	73239	PtrMemberAccess	g -> layers		72936	0					
ANR	73240	Identifier	g		72936	0					
ANR	73241	Identifier	layers		72936	1					
ANR	73242	PtrMemberAccess	b -> layer		72936	1					
ANR	73243	Identifier	b		72936	0					
ANR	73244	Identifier	layer		72936	1					
ANR	73245	Identifier	gap		72936	1					
ANR	73246	PrimaryExpression	1		72936	1					
ANR	73247	ElseStatement	else		72936	0					
ANR	73248	IfStatement	if ( ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy ) )		72936	0					
ANR	73249	Condition	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )	1665:16:42377:42438	72936	0	True				
ANR	73250	OrExpression	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		72936	0		||			
ANR	73251	AndExpression	! a -> is_dummy && b -> is_dummy		72936	0		&&			
ANR	73252	UnaryOperationExpression	! a -> is_dummy		72936	0					
ANR	73253	UnaryOperator	!		72936	0					
ANR	73254	PtrMemberAccess	a -> is_dummy		72936	1					
ANR	73255	Identifier	a		72936	0					
ANR	73256	Identifier	is_dummy		72936	1					
ANR	73257	PtrMemberAccess	b -> is_dummy		72936	1					
ANR	73258	Identifier	b		72936	0					
ANR	73259	Identifier	is_dummy		72936	1					
ANR	73260	AndExpression	a -> is_dummy && ! b -> is_dummy		72936	1		&&			
ANR	73261	PtrMemberAccess	a -> is_dummy		72936	0					
ANR	73262	Identifier	a		72936	0					
ANR	73263	Identifier	is_dummy		72936	1					
ANR	73264	UnaryOperationExpression	! b -> is_dummy		72936	1					
ANR	73265	UnaryOperator	!		72936	0					
ANR	73266	PtrMemberAccess	b -> is_dummy		72936	1					
ANR	73267	Identifier	b		72936	0					
ANR	73268	Identifier	is_dummy		72936	1					
ANR	73269	CompoundStatement		42:80:1076:1076	72936	1					
ANR	73270	ExpressionStatement	gap += 1	1666:6:42449:42457	72936	0	True				
ANR	73271	AssignmentExpression	gap += 1		72936	0		+=			
ANR	73272	Identifier	gap		72936	0					
ANR	73273	PrimaryExpression	1		72936	1					
ANR	73274	IfStatement	if ( i + 1 < g -> n_layers )		72936	3					
ANR	73275	Condition	i + 1 < g -> n_layers	1671:6:42487:42505	72936	0	True				
ANR	73276	RelationalExpression	i + 1 < g -> n_layers		72936	0		<			
ANR	73277	AdditiveExpression	i + 1		72936	0		+			
ANR	73278	Identifier	i		72936	0					
ANR	73279	PrimaryExpression	1		72936	1					
ANR	73280	PtrMemberAccess	g -> n_layers		72936	1					
ANR	73281	Identifier	g		72936	0					
ANR	73282	Identifier	n_layers		72936	1					
ANR	73283	CompoundStatement		48:27:1143:1143	72936	1					
ANR	73284	ExpressionStatement	g -> layers [ i + 1 ] . gap += gap	1672:3:42513:42538	72936	0	True				
ANR	73285	AssignmentExpression	g -> layers [ i + 1 ] . gap += gap		72936	0		+=			
ANR	73286	MemberAccess	g -> layers [ i + 1 ] . gap		72936	0					
ANR	73287	ArrayIndexing	g -> layers [ i + 1 ]		72936	0					
ANR	73288	PtrMemberAccess	g -> layers		72936	0					
ANR	73289	Identifier	g		72936	0					
ANR	73290	Identifier	layers		72936	1					
ANR	73291	AdditiveExpression	i + 1		72936	1		+			
ANR	73292	Identifier	i		72936	0					
ANR	73293	PrimaryExpression	1		72936	1					
ANR	73294	Identifier	gap		72936	1					
ANR	73295	Identifier	gap		72936	1					
ANR	73296	ReturnType	static void		72936	1					
ANR	73297	Identifier	set_layer_gap		72936	2					
ANR	73298	ParameterList	RAGraph * g		72936	3					
ANR	73299	Parameter	RAGraph * g	1624:27:41352:41361	72936	0	True				
ANR	73300	ParameterType	RAGraph *		72936	0					
ANR	73301	Identifier	g		72936	1					
ANR	73302	CFGEntryNode	ENTRY		72936		True				
ANR	73303	CFGExitNode	EXIT		72936		True				
ANR	73304	Symbol	* ga		72936						
ANR	73305	Symbol	a -> h		72936						
ANR	73306	Symbol	g -> n_layers		72936						
ANR	73307	Symbol	g -> layers [ i ] . nodes		72936						
ANR	73308	Symbol	ga -> out_nodes		72936						
ANR	73309	Symbol	b -> x		72936						
ANR	73310	Symbol	gap		72936						
ANR	73311	Symbol	ga		72936						
ANR	73312	Symbol	gb		72936						
ANR	73313	Symbol	b -> y		72936						
ANR	73314	Symbol	* g -> layers [ i ] . nodes		72936						
ANR	73315	Symbol	b -> layer		72936						
ANR	73316	Symbol	b -> is_dummy		72936						
ANR	73317	Symbol	a		72936						
ANR	73318	Symbol	itn		72936						
ANR	73319	Symbol	b		72936						
ANR	73320	Symbol	* * i		72936						
ANR	73321	Symbol	a -> is_dummy		72936						
ANR	73322	Symbol	* * g		72936						
ANR	73323	Symbol	g -> layout		72936						
ANR	73324	Symbol	b -> h		72936						
ANR	73325	Symbol	ga -> data		72936						
ANR	73326	Symbol	g		72936						
ANR	73327	Symbol	i		72936						
ANR	73328	Symbol	* * b		72936						
ANR	73329	Symbol	j		72936						
ANR	73330	Symbol	* a		72936						
ANR	73331	Symbol	outnodes		72936						
ANR	73332	Symbol	* b		72936						
ANR	73333	Symbol	g -> layers [ b -> layer ] . gap		72936						
ANR	73334	Symbol	* b -> layer		72936						
ANR	73335	Symbol	g -> layers [ i + 1 ] . gap		72936						
ANR	73336	Symbol	* g		72936						
ANR	73337	Symbol	a -> layer		72936						
ANR	73338	Symbol	g -> layers [ 0 ] . gap		72936						
ANR	73339	Symbol	* i		72936						
ANR	73340	Symbol	* j		72936						
ANR	73341	Symbol	a -> x		72936						
ANR	73342	Symbol	a -> y		72936						
ANR	73343	Symbol	* g -> layers		72936						
ANR	73344	Symbol	* * * g		72936						
ANR	73345	Symbol	g -> layers [ i ] . n_nodes		72936						
ANR	73346	Symbol	g -> layers		72936						
ANR	73347	Symbol	* * g -> layers		72936						
ANR	73348	Function	fix_back_edge_dummy_nodes	1677:0:42550:43607							
ANR	73349	FunctionDef	"fix_back_edge_dummy_nodes (RAGraph * g , RANode * from , RANode * to)"		73348	0					
ANR	73350	CompoundStatement		1677:76:42626:43607	73348	0					
ANR	73351	IdentifierDeclStatement	"RANode * v , * tmp = NULL ;"	1678:1:42629:42651	73348	0	True				
ANR	73352	IdentifierDecl	* v		73348	0					
ANR	73353	IdentifierDeclType	RANode *		73348	0					
ANR	73354	Identifier	v		73348	1					
ANR	73355	IdentifierDecl	* tmp = NULL		73348	1					
ANR	73356	IdentifierDeclType	RANode *		73348	0					
ANR	73357	Identifier	tmp		73348	1					
ANR	73358	AssignmentExpression	* tmp = NULL		73348	2		=			
ANR	73359	Identifier	NULL		73348	0					
ANR	73360	Identifier	NULL		73348	1					
ANR	73361	IdentifierDeclStatement	RGraphNode * gv = NULL ;	1679:1:42654:42675	73348	1	True				
ANR	73362	IdentifierDecl	* gv = NULL		73348	0					
ANR	73363	IdentifierDeclType	RGraphNode *		73348	0					
ANR	73364	Identifier	gv		73348	1					
ANR	73365	AssignmentExpression	* gv = NULL		73348	2		=			
ANR	73366	Identifier	NULL		73348	0					
ANR	73367	Identifier	NULL		73348	1					
ANR	73368	IdentifierDeclStatement	RListIter * it ;	1680:1:42678:42691	73348	2	True				
ANR	73369	IdentifierDecl	* it		73348	0					
ANR	73370	IdentifierDeclType	RListIter *		73348	0					
ANR	73371	Identifier	it		73348	1					
ANR	73372	IdentifierDeclStatement	int i ;	1681:1:42694:42699	73348	3	True				
ANR	73373	IdentifierDecl	i		73348	0					
ANR	73374	IdentifierDeclType	int		73348	0					
ANR	73375	Identifier	i		73348	1					
ANR	73376	ExpressionStatement	r_return_if_fail ( g && from && to )	1682:1:42702:42736	73348	4	True				
ANR	73377	CallExpression	r_return_if_fail ( g && from && to )		73348	0					
ANR	73378	Callee	r_return_if_fail		73348	0					
ANR	73379	Identifier	r_return_if_fail		73348	0					
ANR	73380	ArgumentList	g && from && to		73348	1					
ANR	73381	Argument	g && from && to		73348	0					
ANR	73382	AndExpression	g && from && to		73348	0		&&			
ANR	73383	Identifier	g		73348	0					
ANR	73384	AndExpression	from && to		73348	1		&&			
ANR	73385	Identifier	from		73348	0					
ANR	73386	Identifier	to		73348	1					
ANR	73387	IdentifierDeclStatement	"const RList * neighbours = r_graph_get_neighbours ( g -> graph , to -> gnode ) ;"	1683:1:42739:42809	73348	5	True				
ANR	73388	IdentifierDecl	"* neighbours = r_graph_get_neighbours ( g -> graph , to -> gnode )"		73348	0					
ANR	73389	IdentifierDeclType	const RList *		73348	0					
ANR	73390	Identifier	neighbours		73348	1					
ANR	73391	AssignmentExpression	"* neighbours = r_graph_get_neighbours ( g -> graph , to -> gnode )"		73348	2		=			
ANR	73392	Identifier	neighbours		73348	0					
ANR	73393	CallExpression	"r_graph_get_neighbours ( g -> graph , to -> gnode )"		73348	1					
ANR	73394	Callee	r_graph_get_neighbours		73348	0					
ANR	73395	Identifier	r_graph_get_neighbours		73348	0					
ANR	73396	ArgumentList	g -> graph		73348	1					
ANR	73397	Argument	g -> graph		73348	0					
ANR	73398	PtrMemberAccess	g -> graph		73348	0					
ANR	73399	Identifier	g		73348	0					
ANR	73400	Identifier	graph		73348	1					
ANR	73401	Argument	to -> gnode		73348	1					
ANR	73402	PtrMemberAccess	to -> gnode		73348	0					
ANR	73403	Identifier	to		73348	0					
ANR	73404	Identifier	gnode		73348	1					
ANR	73405	Statement	graph_foreach_anode	1684:1:42812:42830	73348	6	True				
ANR	73406	Statement	(	1684:21:42832:42832	73348	7	True				
ANR	73407	Statement	neighbours	1684:22:42833:42842	73348	8	True				
ANR	73408	Statement	","	1684:32:42843:42843	73348	9	True				
ANR	73409	Statement	it	1684:34:42845:42846	73348	10	True				
ANR	73410	Statement	","	1684:36:42847:42847	73348	11	True				
ANR	73411	Statement	gv	1684:38:42849:42850	73348	12	True				
ANR	73412	Statement	","	1684:40:42851:42851	73348	13	True				
ANR	73413	Statement	v	1684:42:42853:42853	73348	14	True				
ANR	73414	Statement	)	1684:43:42854:42854	73348	15	True				
ANR	73415	CompoundStatement		8:45:229:229	73348	16					
ANR	73416	ExpressionStatement	tmp = v	1685:2:42860:42867	73348	0	True				
ANR	73417	AssignmentExpression	tmp = v		73348	0		=			
ANR	73418	Identifier	tmp		73348	0					
ANR	73419	Identifier	v		73348	1					
ANR	73420	WhileStatement	while ( tmp -> is_dummy )		73348	1					
ANR	73421	Condition	tmp -> is_dummy	1686:9:42878:42890	73348	0	True				
ANR	73422	PtrMemberAccess	tmp -> is_dummy		73348	0					
ANR	73423	Identifier	tmp		73348	0					
ANR	73424	Identifier	is_dummy		73348	1					
ANR	73425	CompoundStatement		10:24:266:266	73348	1					
ANR	73426	ExpressionStatement	tmp = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes ) ) -> data )	1687:3:42898:42975	73348	0	True				
ANR	73427	AssignmentExpression	tmp = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes ) ) -> data )		73348	0		=			
ANR	73428	Identifier	tmp		73348	0					
ANR	73429	CastExpression	( RANode * ) ( ( ( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes ) ) -> data )		73348	1					
ANR	73430	CastTarget	RANode *		73348	0					
ANR	73431	PtrMemberAccess	( ( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes ) ) -> data		73348	1					
ANR	73432	CastExpression	( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes )		73348	0					
ANR	73433	CastTarget	RGraphNode *		73348	0					
ANR	73434	CallExpression	r_list_first ( tmp -> gnode -> out_nodes )		73348	1					
ANR	73435	Callee	r_list_first		73348	0					
ANR	73436	Identifier	r_list_first		73348	0					
ANR	73437	ArgumentList	tmp -> gnode -> out_nodes		73348	1					
ANR	73438	Argument	tmp -> gnode -> out_nodes		73348	0					
ANR	73439	PtrMemberAccess	tmp -> gnode -> out_nodes		73348	0					
ANR	73440	PtrMemberAccess	tmp -> gnode		73348	0					
ANR	73441	Identifier	tmp		73348	0					
ANR	73442	Identifier	gnode		73348	1					
ANR	73443	Identifier	out_nodes		73348	1					
ANR	73444	Identifier	data		73348	1					
ANR	73445	IfStatement	if ( tmp -> gnode -> idx == from -> gnode -> idx )		73348	2					
ANR	73446	Condition	tmp -> gnode -> idx == from -> gnode -> idx	1689:6:42987:43021	73348	0	True				
ANR	73447	EqualityExpression	tmp -> gnode -> idx == from -> gnode -> idx		73348	0		==			
ANR	73448	PtrMemberAccess	tmp -> gnode -> idx		73348	0					
ANR	73449	PtrMemberAccess	tmp -> gnode		73348	0					
ANR	73450	Identifier	tmp		73348	0					
ANR	73451	Identifier	gnode		73348	1					
ANR	73452	Identifier	idx		73348	1					
ANR	73453	PtrMemberAccess	from -> gnode -> idx		73348	1					
ANR	73454	PtrMemberAccess	from -> gnode		73348	0					
ANR	73455	Identifier	from		73348	0					
ANR	73456	Identifier	gnode		73348	1					
ANR	73457	Identifier	idx		73348	1					
ANR	73458	CompoundStatement		13:43:397:397	73348	1					
ANR	73459	BreakStatement	break ;	1690:3:43029:43034	73348	0	True				
ANR	73460	ExpressionStatement	tmp = NULL	1692:2:43042:43052	73348	3	True				
ANR	73461	AssignmentExpression	tmp = NULL		73348	0		=			
ANR	73462	Identifier	tmp		73348	0					
ANR	73463	Identifier	NULL		73348	1					
ANR	73464	IfStatement	if ( tmp )		73348	17					
ANR	73465	Condition	tmp	1694:5:43062:43064	73348	0	True				
ANR	73466	Identifier	tmp		73348	0					
ANR	73467	CompoundStatement		18:10:440:440	73348	1					
ANR	73468	ExpressionStatement	tmp = v	1695:2:43071:43078	73348	0	True				
ANR	73469	AssignmentExpression	tmp = v		73348	0		=			
ANR	73470	Identifier	tmp		73348	0					
ANR	73471	Identifier	v		73348	1					
ANR	73472	ExpressionStatement	v = to	1696:2:43082:43088	73348	1	True				
ANR	73473	AssignmentExpression	v = to		73348	0		=			
ANR	73474	Identifier	v		73348	0					
ANR	73475	Identifier	to		73348	1					
ANR	73476	WhileStatement	while ( tmp -> gnode -> idx != from -> gnode -> idx )		73348	2					
ANR	73477	Condition	tmp -> gnode -> idx != from -> gnode -> idx	1697:9:43099:43133	73348	0	True				
ANR	73478	EqualityExpression	tmp -> gnode -> idx != from -> gnode -> idx		73348	0		!=			
ANR	73479	PtrMemberAccess	tmp -> gnode -> idx		73348	0					
ANR	73480	PtrMemberAccess	tmp -> gnode		73348	0					
ANR	73481	Identifier	tmp		73348	0					
ANR	73482	Identifier	gnode		73348	1					
ANR	73483	Identifier	idx		73348	1					
ANR	73484	PtrMemberAccess	from -> gnode -> idx		73348	1					
ANR	73485	PtrMemberAccess	from -> gnode		73348	0					
ANR	73486	Identifier	from		73348	0					
ANR	73487	Identifier	gnode		73348	1					
ANR	73488	Identifier	idx		73348	1					
ANR	73489	CompoundStatement		21:46:509:509	73348	1					
ANR	73490	ExpressionStatement	v = tmp	1698:3:43141:43148	73348	0	True				
ANR	73491	AssignmentExpression	v = tmp		73348	0		=			
ANR	73492	Identifier	v		73348	0					
ANR	73493	Identifier	tmp		73348	1					
ANR	73494	ExpressionStatement	tmp = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes ) ) -> data )	1699:3:43153:43228	73348	1	True				
ANR	73495	AssignmentExpression	tmp = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes ) ) -> data )		73348	0		=			
ANR	73496	Identifier	tmp		73348	0					
ANR	73497	CastExpression	( RANode * ) ( ( ( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes ) ) -> data )		73348	1					
ANR	73498	CastTarget	RANode *		73348	0					
ANR	73499	PtrMemberAccess	( ( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes ) ) -> data		73348	1					
ANR	73500	CastExpression	( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes )		73348	0					
ANR	73501	CastTarget	RGraphNode *		73348	0					
ANR	73502	CallExpression	r_list_first ( v -> gnode -> out_nodes )		73348	1					
ANR	73503	Callee	r_list_first		73348	0					
ANR	73504	Identifier	r_list_first		73348	0					
ANR	73505	ArgumentList	v -> gnode -> out_nodes		73348	1					
ANR	73506	Argument	v -> gnode -> out_nodes		73348	0					
ANR	73507	PtrMemberAccess	v -> gnode -> out_nodes		73348	0					
ANR	73508	PtrMemberAccess	v -> gnode		73348	0					
ANR	73509	Identifier	v		73348	0					
ANR	73510	Identifier	gnode		73348	1					
ANR	73511	Identifier	out_nodes		73348	1					
ANR	73512	Identifier	data		73348	1					
ANR	73513	ExpressionStatement	i = 0	1701:3:43234:43239	73348	2	True				
ANR	73514	AssignmentExpression	i = 0		73348	0		=			
ANR	73515	Identifier	i		73348	0					
ANR	73516	PrimaryExpression	0		73348	1					
ANR	73517	WhileStatement	while ( v -> gnode -> idx != g -> layers [ v -> layer ] . nodes [ i ] -> idx )		73348	3					
ANR	73518	Condition	v -> gnode -> idx != g -> layers [ v -> layer ] . nodes [ i ] -> idx	1702:10:43251:43300	73348	0	True				
ANR	73519	EqualityExpression	v -> gnode -> idx != g -> layers [ v -> layer ] . nodes [ i ] -> idx		73348	0		!=			
ANR	73520	PtrMemberAccess	v -> gnode -> idx		73348	0					
ANR	73521	PtrMemberAccess	v -> gnode		73348	0					
ANR	73522	Identifier	v		73348	0					
ANR	73523	Identifier	gnode		73348	1					
ANR	73524	Identifier	idx		73348	1					
ANR	73525	PtrMemberAccess	g -> layers [ v -> layer ] . nodes [ i ] -> idx		73348	1					
ANR	73526	ArrayIndexing	g -> layers [ v -> layer ] . nodes [ i ]		73348	0					
ANR	73527	MemberAccess	g -> layers [ v -> layer ] . nodes		73348	0					
ANR	73528	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73529	PtrMemberAccess	g -> layers		73348	0					
ANR	73530	Identifier	g		73348	0					
ANR	73531	Identifier	layers		73348	1					
ANR	73532	PtrMemberAccess	v -> layer		73348	1					
ANR	73533	Identifier	v		73348	0					
ANR	73534	Identifier	layer		73348	1					
ANR	73535	Identifier	nodes		73348	1					
ANR	73536	Identifier	i		73348	1					
ANR	73537	Identifier	idx		73348	1					
ANR	73538	CompoundStatement		26:62:676:676	73348	1					
ANR	73539	ExpressionStatement	i += 1	1703:4:43309:43315	73348	0	True				
ANR	73540	AssignmentExpression	i += 1		73348	0		+=			
ANR	73541	Identifier	i		73348	0					
ANR	73542	PrimaryExpression	1		73348	1					
ANR	73543	WhileStatement	while ( i + 1 < g -> layers [ v -> layer ] . n_nodes )		73348	4					
ANR	73544	Condition	i + 1 < g -> layers [ v -> layer ] . n_nodes	1706:10:43333:43367	73348	0	True				
ANR	73545	RelationalExpression	i + 1 < g -> layers [ v -> layer ] . n_nodes		73348	0		<			
ANR	73546	AdditiveExpression	i + 1		73348	0		+			
ANR	73547	Identifier	i		73348	0					
ANR	73548	PrimaryExpression	1		73348	1					
ANR	73549	MemberAccess	g -> layers [ v -> layer ] . n_nodes		73348	1					
ANR	73550	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73551	PtrMemberAccess	g -> layers		73348	0					
ANR	73552	Identifier	g		73348	0					
ANR	73553	Identifier	layers		73348	1					
ANR	73554	PtrMemberAccess	v -> layer		73348	1					
ANR	73555	Identifier	v		73348	0					
ANR	73556	Identifier	layer		73348	1					
ANR	73557	Identifier	n_nodes		73348	1					
ANR	73558	CompoundStatement		30:47:743:743	73348	1					
ANR	73559	ExpressionStatement	g -> layers [ v -> layer ] . nodes [ i ] = g -> layers [ v -> layer ] . nodes [ i + 1 ]	1707:4:43376:43437	73348	0	True				
ANR	73560	AssignmentExpression	g -> layers [ v -> layer ] . nodes [ i ] = g -> layers [ v -> layer ] . nodes [ i + 1 ]		73348	0		=			
ANR	73561	ArrayIndexing	g -> layers [ v -> layer ] . nodes [ i ]		73348	0					
ANR	73562	MemberAccess	g -> layers [ v -> layer ] . nodes		73348	0					
ANR	73563	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73564	PtrMemberAccess	g -> layers		73348	0					
ANR	73565	Identifier	g		73348	0					
ANR	73566	Identifier	layers		73348	1					
ANR	73567	PtrMemberAccess	v -> layer		73348	1					
ANR	73568	Identifier	v		73348	0					
ANR	73569	Identifier	layer		73348	1					
ANR	73570	Identifier	nodes		73348	1					
ANR	73571	Identifier	i		73348	1					
ANR	73572	ArrayIndexing	g -> layers [ v -> layer ] . nodes [ i + 1 ]		73348	1					
ANR	73573	MemberAccess	g -> layers [ v -> layer ] . nodes		73348	0					
ANR	73574	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73575	PtrMemberAccess	g -> layers		73348	0					
ANR	73576	Identifier	g		73348	0					
ANR	73577	Identifier	layers		73348	1					
ANR	73578	PtrMemberAccess	v -> layer		73348	1					
ANR	73579	Identifier	v		73348	0					
ANR	73580	Identifier	layer		73348	1					
ANR	73581	Identifier	nodes		73348	1					
ANR	73582	AdditiveExpression	i + 1		73348	1		+			
ANR	73583	Identifier	i		73348	0					
ANR	73584	PrimaryExpression	1		73348	1					
ANR	73585	ExpressionStatement	i ++	1708:4:43443:43446	73348	1	True				
ANR	73586	PostIncDecOperationExpression	i ++		73348	0					
ANR	73587	Identifier	i		73348	0					
ANR	73588	IncDec	++		73348	1					
ANR	73589	ExpressionStatement	g -> layers [ v -> layer ] . nodes [ g -> layers [ v -> layer ] . n_nodes - 1 ] = 0	1710:3:43456:43518	73348	5	True				
ANR	73590	AssignmentExpression	g -> layers [ v -> layer ] . nodes [ g -> layers [ v -> layer ] . n_nodes - 1 ] = 0		73348	0		=			
ANR	73591	ArrayIndexing	g -> layers [ v -> layer ] . nodes [ g -> layers [ v -> layer ] . n_nodes - 1 ]		73348	0					
ANR	73592	MemberAccess	g -> layers [ v -> layer ] . nodes		73348	0					
ANR	73593	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73594	PtrMemberAccess	g -> layers		73348	0					
ANR	73595	Identifier	g		73348	0					
ANR	73596	Identifier	layers		73348	1					
ANR	73597	PtrMemberAccess	v -> layer		73348	1					
ANR	73598	Identifier	v		73348	0					
ANR	73599	Identifier	layer		73348	1					
ANR	73600	Identifier	nodes		73348	1					
ANR	73601	AdditiveExpression	g -> layers [ v -> layer ] . n_nodes - 1		73348	1		-			
ANR	73602	MemberAccess	g -> layers [ v -> layer ] . n_nodes		73348	0					
ANR	73603	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73604	PtrMemberAccess	g -> layers		73348	0					
ANR	73605	Identifier	g		73348	0					
ANR	73606	Identifier	layers		73348	1					
ANR	73607	PtrMemberAccess	v -> layer		73348	1					
ANR	73608	Identifier	v		73348	0					
ANR	73609	Identifier	layer		73348	1					
ANR	73610	Identifier	n_nodes		73348	1					
ANR	73611	PrimaryExpression	1		73348	1					
ANR	73612	PrimaryExpression	0		73348	1					
ANR	73613	ExpressionStatement	g -> layers [ v -> layer ] . n_nodes -= 1	1711:3:43523:43555	73348	6	True				
ANR	73614	AssignmentExpression	g -> layers [ v -> layer ] . n_nodes -= 1		73348	0		-=			
ANR	73615	MemberAccess	g -> layers [ v -> layer ] . n_nodes		73348	0					
ANR	73616	ArrayIndexing	g -> layers [ v -> layer ]		73348	0					
ANR	73617	PtrMemberAccess	g -> layers		73348	0					
ANR	73618	Identifier	g		73348	0					
ANR	73619	Identifier	layers		73348	1					
ANR	73620	PtrMemberAccess	v -> layer		73348	1					
ANR	73621	Identifier	v		73348	0					
ANR	73622	Identifier	layer		73348	1					
ANR	73623	Identifier	n_nodes		73348	1					
ANR	73624	PrimaryExpression	1		73348	1					
ANR	73625	ExpressionStatement	"r_graph_del_node ( g -> graph , v -> gnode )"	1713:3:43561:43598	73348	7	True				
ANR	73626	CallExpression	"r_graph_del_node ( g -> graph , v -> gnode )"		73348	0					
ANR	73627	Callee	r_graph_del_node		73348	0					
ANR	73628	Identifier	r_graph_del_node		73348	0					
ANR	73629	ArgumentList	g -> graph		73348	1					
ANR	73630	Argument	g -> graph		73348	0					
ANR	73631	PtrMemberAccess	g -> graph		73348	0					
ANR	73632	Identifier	g		73348	0					
ANR	73633	Identifier	graph		73348	1					
ANR	73634	Argument	v -> gnode		73348	1					
ANR	73635	PtrMemberAccess	v -> gnode		73348	0					
ANR	73636	Identifier	v		73348	0					
ANR	73637	Identifier	gnode		73348	1					
ANR	73638	ReturnType	static void		73348	1					
ANR	73639	Identifier	fix_back_edge_dummy_nodes		73348	2					
ANR	73640	ParameterList	"RAGraph * g , RANode * from , RANode * to"		73348	3					
ANR	73641	Parameter	RAGraph * g	1677:38:42588:42597	73348	0	True				
ANR	73642	ParameterType	RAGraph *		73348	0					
ANR	73643	Identifier	g		73348	1					
ANR	73644	Parameter	RANode * from	1677:50:42600:42611	73348	1	True				
ANR	73645	ParameterType	RANode *		73348	0					
ANR	73646	Identifier	from		73348	1					
ANR	73647	Parameter	RANode * to	1677:64:42614:42623	73348	2	True				
ANR	73648	ParameterType	RANode *		73348	0					
ANR	73649	Identifier	to		73348	1					
ANR	73650	CFGEntryNode	ENTRY		73348		True				
ANR	73651	CFGExitNode	EXIT		73348		True				
ANR	73652	CFGErrorNode	ERROR		73348		True				
ANR	73653	Symbol	* v		73348						
ANR	73654	Symbol	* * * * v		73348						
ANR	73655	Symbol	* * v -> layer		73348						
ANR	73656	Symbol	* * g -> layers [ v -> layer ] . nodes		73348						
ANR	73657	Symbol	* g -> layers [ v -> layer ] . n_nodes		73348						
ANR	73658	Symbol	* * * * g		73348						
ANR	73659	Symbol	g -> layers [ v -> layer ] . nodes [ i ] -> idx		73348						
ANR	73660	Symbol	tmp		73348						
ANR	73661	Symbol	g -> layers [ v -> layer ] . nodes		73348						
ANR	73662	Symbol	from		73348						
ANR	73663	Symbol	v -> gnode		73348						
ANR	73664	Symbol	* to		73348						
ANR	73665	Symbol	* * i		73348						
ANR	73666	Symbol	NULL		73348						
ANR	73667	Symbol	* * g		73348						
ANR	73668	Symbol	g -> layers [ v -> layer ] . n_nodes		73348						
ANR	73669	Symbol	it		73348						
ANR	73670	Symbol	* * * v		73348						
ANR	73671	Symbol	* from -> gnode		73348						
ANR	73672	Symbol	* v -> gnode		73348						
ANR	73673	Symbol	v -> gnode -> idx		73348						
ANR	73674	Symbol	* g -> layers [ v -> layer ] . nodes		73348						
ANR	73675	Symbol	* g -> layers		73348						
ANR	73676	Symbol	* * * g		73348						
ANR	73677	Symbol	v -> gnode -> out_nodes		73348						
ANR	73678	Symbol	* tmp		73348						
ANR	73679	Symbol	* * from		73348						
ANR	73680	Symbol	* r_list_first		73348						
ANR	73681	Symbol	( ( RGraphNode * ) r_list_first ( v -> gnode -> out_nodes ) ) -> data		73348						
ANR	73682	Symbol	r_graph_get_neighbours		73348						
ANR	73683	Symbol	tmp -> is_dummy		73348						
ANR	73684	Symbol	r_list_first		73348						
ANR	73685	Symbol	tmp -> gnode -> idx		73348						
ANR	73686	Symbol	g -> graph		73348						
ANR	73687	Symbol	* * v		73348						
ANR	73688	Symbol	* * * g -> layers		73348						
ANR	73689	Symbol	tmp -> gnode -> out_nodes		73348						
ANR	73690	Symbol	g		73348						
ANR	73691	Symbol	to -> gnode		73348						
ANR	73692	Symbol	i		73348						
ANR	73693	Symbol	neighbours		73348						
ANR	73694	Symbol	* * tmp		73348						
ANR	73695	Symbol	from -> gnode		73348						
ANR	73696	Symbol	gv		73348						
ANR	73697	Symbol	* g		73348						
ANR	73698	Symbol	( ( RGraphNode * ) r_list_first ( tmp -> gnode -> out_nodes ) ) -> data		73348						
ANR	73699	Symbol	* i		73348						
ANR	73700	Symbol	v		73348						
ANR	73701	Symbol	from -> gnode -> idx		73348						
ANR	73702	Symbol	v -> layer		73348						
ANR	73703	Symbol	* v -> layer		73348						
ANR	73704	Symbol	* tmp -> gnode		73348						
ANR	73705	Symbol	to		73348						
ANR	73706	Symbol	* * * v -> layer		73348						
ANR	73707	Symbol	tmp -> gnode		73348						
ANR	73708	Symbol	g -> layers		73348						
ANR	73709	Symbol	* * g -> layers		73348						
ANR	73710	Symbol	* from		73348						
ANR	73711	Function	get_edge_number	1718:0:43610:44484							
ANR	73712	FunctionDef	"get_edge_number (const RAGraph * g , RANode * src , RANode * dst , bool outgoing)"		73711	0					
ANR	73713	CompoundStatement		1718:87:43697:44484	73711	0					
ANR	73714	IdentifierDeclStatement	RListIter * itn ;	1719:1:43700:43714	73711	0	True				
ANR	73715	IdentifierDecl	* itn		73711	0					
ANR	73716	IdentifierDeclType	RListIter *		73711	0					
ANR	73717	Identifier	itn		73711	1					
ANR	73718	IdentifierDeclStatement	RGraphNode * gv ;	1720:1:43717:43731	73711	1	True				
ANR	73719	IdentifierDecl	* gv		73711	0					
ANR	73720	IdentifierDeclType	RGraphNode *		73711	0					
ANR	73721	Identifier	gv		73711	1					
ANR	73722	IdentifierDeclStatement	int cur_nth = 0 ;	1721:1:43734:43749	73711	2	True				
ANR	73723	IdentifierDecl	cur_nth = 0		73711	0					
ANR	73724	IdentifierDeclType	int		73711	0					
ANR	73725	Identifier	cur_nth		73711	1					
ANR	73726	AssignmentExpression	cur_nth = 0		73711	2		=			
ANR	73727	Identifier	cur_nth		73711	0					
ANR	73728	PrimaryExpression	0		73711	1					
ANR	73729	IdentifierDeclStatement	int nth = 0 ;	1722:1:43752:43763	73711	3	True				
ANR	73730	IdentifierDecl	nth = 0		73711	0					
ANR	73731	IdentifierDeclType	int		73711	0					
ANR	73732	Identifier	nth		73711	1					
ANR	73733	AssignmentExpression	nth = 0		73711	2		=			
ANR	73734	Identifier	nth		73711	0					
ANR	73735	PrimaryExpression	0		73711	1					
ANR	73736	IdentifierDeclStatement	RANode * v ;	1723:1:43766:43775	73711	4	True				
ANR	73737	IdentifierDecl	* v		73711	0					
ANR	73738	IdentifierDeclType	RANode *		73711	0					
ANR	73739	Identifier	v		73711	1					
ANR	73740	IfStatement	if ( outgoing && src -> is_dummy )		73711	5					
ANR	73741	Condition	outgoing && src -> is_dummy	1725:5:43783:43807	73711	0	True				
ANR	73742	AndExpression	outgoing && src -> is_dummy		73711	0		&&			
ANR	73743	Identifier	outgoing		73711	0					
ANR	73744	PtrMemberAccess	src -> is_dummy		73711	1					
ANR	73745	Identifier	src		73711	0					
ANR	73746	Identifier	is_dummy		73711	1					
ANR	73747	CompoundStatement		9:2:116:201	73711	1					
ANR	73748	IdentifierDeclStatement	RANode * in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data ) ;	1726:2:43814:43899	73711	0	True				
ANR	73749	IdentifierDecl	* in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data )		73711	0					
ANR	73750	IdentifierDeclType	RANode *		73711	0					
ANR	73751	Identifier	in		73711	1					
ANR	73752	AssignmentExpression	* in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data )		73711	2		=			
ANR	73753	Identifier	in		73711	0					
ANR	73754	CastExpression	( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data )		73711	1					
ANR	73755	CastTarget	RANode *		73711	0					
ANR	73756	PtrMemberAccess	( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data		73711	1					
ANR	73757	CastExpression	( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes )		73711	0					
ANR	73758	CastTarget	RGraphNode *		73711	0					
ANR	73759	CallExpression	r_list_first ( ( src -> gnode ) -> in_nodes )		73711	1					
ANR	73760	Callee	r_list_first		73711	0					
ANR	73761	Identifier	r_list_first		73711	0					
ANR	73762	ArgumentList	( src -> gnode ) -> in_nodes		73711	1					
ANR	73763	Argument	( src -> gnode ) -> in_nodes		73711	0					
ANR	73764	PtrMemberAccess	( src -> gnode ) -> in_nodes		73711	0					
ANR	73765	PtrMemberAccess	src -> gnode		73711	0					
ANR	73766	Identifier	src		73711	0					
ANR	73767	Identifier	gnode		73711	1					
ANR	73768	Identifier	in_nodes		73711	1					
ANR	73769	Identifier	data		73711	1					
ANR	73770	ExpressionStatement	"cur_nth = get_edge_number ( g , in , src , outgoing )"	1727:2:43903:43951	73711	1	True				
ANR	73771	AssignmentExpression	"cur_nth = get_edge_number ( g , in , src , outgoing )"		73711	0		=			
ANR	73772	Identifier	cur_nth		73711	0					
ANR	73773	CallExpression	"get_edge_number ( g , in , src , outgoing )"		73711	1					
ANR	73774	Callee	get_edge_number		73711	0					
ANR	73775	Identifier	get_edge_number		73711	0					
ANR	73776	ArgumentList	g		73711	1					
ANR	73777	Argument	g		73711	0					
ANR	73778	Identifier	g		73711	0					
ANR	73779	Argument	in		73711	1					
ANR	73780	Identifier	in		73711	0					
ANR	73781	Argument	src		73711	2					
ANR	73782	Identifier	src		73711	0					
ANR	73783	Argument	outgoing		73711	3					
ANR	73784	Identifier	outgoing		73711	0					
ANR	73785	ElseStatement	else		73711	0					
ANR	73786	CompoundStatement		15:2:400:449	73711	0					
ANR	73787	IdentifierDeclStatement	"const RList * neighbours = outgoing ? r_graph_get_neighbours ( g -> graph , src -> gnode ) : r_graph_innodes ( g -> graph , dst -> gnode ) ;"	1729:2:43965:44094	73711	0	True				
ANR	73788	IdentifierDecl	"* neighbours = outgoing ? r_graph_get_neighbours ( g -> graph , src -> gnode ) : r_graph_innodes ( g -> graph , dst -> gnode )"		73711	0					
ANR	73789	IdentifierDeclType	const RList *		73711	0					
ANR	73790	Identifier	neighbours		73711	1					
ANR	73791	AssignmentExpression	"* neighbours = outgoing ? r_graph_get_neighbours ( g -> graph , src -> gnode ) : r_graph_innodes ( g -> graph , dst -> gnode )"		73711	2		=			
ANR	73792	Identifier	neighbours		73711	0					
ANR	73793	ConditionalExpression	"outgoing ? r_graph_get_neighbours ( g -> graph , src -> gnode ) : r_graph_innodes ( g -> graph , dst -> gnode )"		73711	1					
ANR	73794	Condition	outgoing		73711	0					
ANR	73795	Identifier	outgoing		73711	0					
ANR	73796	CallExpression	"r_graph_get_neighbours ( g -> graph , src -> gnode )"		73711	1					
ANR	73797	Callee	r_graph_get_neighbours		73711	0					
ANR	73798	Identifier	r_graph_get_neighbours		73711	0					
ANR	73799	ArgumentList	g -> graph		73711	1					
ANR	73800	Argument	g -> graph		73711	0					
ANR	73801	PtrMemberAccess	g -> graph		73711	0					
ANR	73802	Identifier	g		73711	0					
ANR	73803	Identifier	graph		73711	1					
ANR	73804	Argument	src -> gnode		73711	1					
ANR	73805	PtrMemberAccess	src -> gnode		73711	0					
ANR	73806	Identifier	src		73711	0					
ANR	73807	Identifier	gnode		73711	1					
ANR	73808	CallExpression	"r_graph_innodes ( g -> graph , dst -> gnode )"		73711	2					
ANR	73809	Callee	r_graph_innodes		73711	0					
ANR	73810	Identifier	r_graph_innodes		73711	0					
ANR	73811	ArgumentList	g -> graph		73711	1					
ANR	73812	Argument	g -> graph		73711	0					
ANR	73813	PtrMemberAccess	g -> graph		73711	0					
ANR	73814	Identifier	g		73711	0					
ANR	73815	Identifier	graph		73711	1					
ANR	73816	Argument	dst -> gnode		73711	1					
ANR	73817	PtrMemberAccess	dst -> gnode		73711	0					
ANR	73818	Identifier	dst		73711	0					
ANR	73819	Identifier	gnode		73711	1					
ANR	73820	IdentifierDeclStatement	const int exit_edges = r_list_length ( neighbours ) ;	1732:2:44098:44147	73711	1	True				
ANR	73821	IdentifierDecl	exit_edges = r_list_length ( neighbours )		73711	0					
ANR	73822	IdentifierDeclType	const int		73711	0					
ANR	73823	Identifier	exit_edges		73711	1					
ANR	73824	AssignmentExpression	exit_edges = r_list_length ( neighbours )		73711	2		=			
ANR	73825	Identifier	exit_edges		73711	0					
ANR	73826	CallExpression	r_list_length ( neighbours )		73711	1					
ANR	73827	Callee	r_list_length		73711	0					
ANR	73828	Identifier	r_list_length		73711	0					
ANR	73829	ArgumentList	neighbours		73711	1					
ANR	73830	Argument	neighbours		73711	0					
ANR	73831	Identifier	neighbours		73711	0					
ANR	73832	Statement	graph_foreach_anode	1733:2:44151:44169	73711	2	True				
ANR	73833	Statement	(	1733:22:44171:44171	73711	3	True				
ANR	73834	Statement	neighbours	1733:23:44172:44181	73711	4	True				
ANR	73835	Statement	","	1733:33:44182:44182	73711	5	True				
ANR	73836	Statement	itn	1733:35:44184:44186	73711	6	True				
ANR	73837	Statement	","	1733:38:44187:44187	73711	7	True				
ANR	73838	Statement	gv	1733:40:44189:44190	73711	8	True				
ANR	73839	Statement	","	1733:42:44191:44191	73711	9	True				
ANR	73840	Statement	v	1733:44:44193:44193	73711	10	True				
ANR	73841	Statement	)	1733:45:44194:44194	73711	11	True				
ANR	73842	CompoundStatement		16:47:498:498	73711	12					
ANR	73843	ExpressionStatement	cur_nth = nth	1734:3:44201:44214	73711	0	True				
ANR	73844	AssignmentExpression	cur_nth = nth		73711	0		=			
ANR	73845	Identifier	cur_nth		73711	0					
ANR	73846	Identifier	nth		73711	1					
ANR	73847	IfStatement	if ( g -> is_callgraph )		73711	1					
ANR	73848	Condition	g -> is_callgraph	1735:7:44223:44237	73711	0	True				
ANR	73849	PtrMemberAccess	g -> is_callgraph		73711	0					
ANR	73850	Identifier	g		73711	0					
ANR	73851	Identifier	is_callgraph		73711	1					
ANR	73852	CompoundStatement		18:24:542:542	73711	1					
ANR	73853	ExpressionStatement	cur_nth = 0	1736:4:44246:44257	73711	0	True				
ANR	73854	AssignmentExpression	cur_nth = 0		73711	0		=			
ANR	73855	Identifier	cur_nth		73711	0					
ANR	73856	PrimaryExpression	0		73711	1					
ANR	73857	ElseStatement	else		73711	0					
ANR	73858	IfStatement	if ( exit_edges == 1 )		73711	0					
ANR	73859	Condition	exit_edges == 1	1737:14:44273:44287	73711	0	True				
ANR	73860	EqualityExpression	exit_edges == 1		73711	0		==			
ANR	73861	Identifier	exit_edges		73711	0					
ANR	73862	PrimaryExpression	1		73711	1					
ANR	73863	CompoundStatement		20:31:592:592	73711	1					
ANR	73864	ExpressionStatement	cur_nth = - 1	1738:4:44296:44308	73711	0	True				
ANR	73865	AssignmentExpression	cur_nth = - 1		73711	0		=			
ANR	73866	Identifier	cur_nth		73711	0					
ANR	73867	UnaryOperationExpression	- 1		73711	1					
ANR	73868	UnaryOperator	-		73711	0					
ANR	73869	PrimaryExpression	1		73711	1					
ANR	73870	IfStatement	if ( outgoing && gv -> idx == ( dst -> gnode ) -> idx )		73711	2					
ANR	73871	Condition	outgoing && gv -> idx == ( dst -> gnode ) -> idx	1740:7:44322:44361	73711	0	True				
ANR	73872	AndExpression	outgoing && gv -> idx == ( dst -> gnode ) -> idx		73711	0		&&			
ANR	73873	Identifier	outgoing		73711	0					
ANR	73874	EqualityExpression	gv -> idx == ( dst -> gnode ) -> idx		73711	1		==			
ANR	73875	PtrMemberAccess	gv -> idx		73711	0					
ANR	73876	Identifier	gv		73711	0					
ANR	73877	Identifier	idx		73711	1					
ANR	73878	PtrMemberAccess	( dst -> gnode ) -> idx		73711	1					
ANR	73879	PtrMemberAccess	dst -> gnode		73711	0					
ANR	73880	Identifier	dst		73711	0					
ANR	73881	Identifier	gnode		73711	1					
ANR	73882	Identifier	idx		73711	1					
ANR	73883	CompoundStatement		23:49:666:666	73711	1					
ANR	73884	BreakStatement	break ;	1741:4:44370:44375	73711	0	True				
ANR	73885	IfStatement	if ( ! outgoing && gv -> idx == ( src -> gnode ) -> idx )		73711	3					
ANR	73886	Condition	! outgoing && gv -> idx == ( src -> gnode ) -> idx	1743:7:44389:44429	73711	0	True				
ANR	73887	AndExpression	! outgoing && gv -> idx == ( src -> gnode ) -> idx		73711	0		&&			
ANR	73888	UnaryOperationExpression	! outgoing		73711	0					
ANR	73889	UnaryOperator	!		73711	0					
ANR	73890	Identifier	outgoing		73711	1					
ANR	73891	EqualityExpression	gv -> idx == ( src -> gnode ) -> idx		73711	1		==			
ANR	73892	PtrMemberAccess	gv -> idx		73711	0					
ANR	73893	Identifier	gv		73711	0					
ANR	73894	Identifier	idx		73711	1					
ANR	73895	PtrMemberAccess	( src -> gnode ) -> idx		73711	1					
ANR	73896	PtrMemberAccess	src -> gnode		73711	0					
ANR	73897	Identifier	src		73711	0					
ANR	73898	Identifier	gnode		73711	1					
ANR	73899	Identifier	idx		73711	1					
ANR	73900	CompoundStatement		26:50:734:734	73711	1					
ANR	73901	BreakStatement	break ;	1744:4:44438:44443	73711	0	True				
ANR	73902	ExpressionStatement	nth ++	1746:3:44453:44458	73711	4	True				
ANR	73903	PostIncDecOperationExpression	nth ++		73711	0					
ANR	73904	Identifier	nth		73711	0					
ANR	73905	IncDec	++		73711	1					
ANR	73906	ReturnStatement	return cur_nth ;	1749:1:44468:44482	73711	6	True				
ANR	73907	Identifier	cur_nth		73711	0					
ANR	73908	ReturnType	static int		73711	1					
ANR	73909	Identifier	get_edge_number		73711	2					
ANR	73910	ParameterList	"const RAGraph * g , RANode * src , RANode * dst , bool outgoing"		73711	3					
ANR	73911	Parameter	const RAGraph * g	1718:28:43638:43653	73711	0	True				
ANR	73912	ParameterType	const RAGraph *		73711	0					
ANR	73913	Identifier	g		73711	1					
ANR	73914	Parameter	RANode * src	1718:46:43656:43666	73711	1	True				
ANR	73915	ParameterType	RANode *		73711	0					
ANR	73916	Identifier	src		73711	1					
ANR	73917	Parameter	RANode * dst	1718:59:43669:43679	73711	2	True				
ANR	73918	ParameterType	RANode *		73711	0					
ANR	73919	Identifier	dst		73711	1					
ANR	73920	Parameter	bool outgoing	1718:72:43682:43694	73711	3	True				
ANR	73921	ParameterType	bool		73711	0					
ANR	73922	Identifier	outgoing		73711	1					
ANR	73923	CFGEntryNode	ENTRY		73711		True				
ANR	73924	CFGExitNode	EXIT		73711		True				
ANR	73925	CFGErrorNode	ERROR		73711		True				
ANR	73926	Symbol	cur_nth		73711						
ANR	73927	Symbol	outgoing		73711						
ANR	73928	Symbol	gv -> idx		73711						
ANR	73929	Symbol	* r_list_first		73711						
ANR	73930	Symbol	* src -> gnode		73711						
ANR	73931	Symbol	dst		73711						
ANR	73932	Symbol	get_edge_number		73711						
ANR	73933	Symbol	r_graph_get_neighbours		73711						
ANR	73934	Symbol	* src		73711						
ANR	73935	Symbol	r_graph_innodes		73711						
ANR	73936	Symbol	r_list_first		73711						
ANR	73937	Symbol	* dst		73711						
ANR	73938	Symbol	( src -> gnode ) -> idx		73711						
ANR	73939	Symbol	g -> graph		73711						
ANR	73940	Symbol	( ( RGraphNode * ) r_list_first ( ( src -> gnode ) -> in_nodes ) ) -> data		73711						
ANR	73941	Symbol	* * dst		73711						
ANR	73942	Symbol	src -> gnode		73711						
ANR	73943	Symbol	g -> is_callgraph		73711						
ANR	73944	Symbol	* dst -> gnode		73711						
ANR	73945	Symbol	itn		73711						
ANR	73946	Symbol	nth		73711						
ANR	73947	Symbol	exit_edges		73711						
ANR	73948	Symbol	src		73711						
ANR	73949	Symbol	in		73711						
ANR	73950	Symbol	g		73711						
ANR	73951	Symbol	neighbours		73711						
ANR	73952	Symbol	gv		73711						
ANR	73953	Symbol	* g		73711						
ANR	73954	Symbol	dst -> gnode		73711						
ANR	73955	Symbol	( src -> gnode ) -> in_nodes		73711						
ANR	73956	Symbol	v		73711						
ANR	73957	Symbol	* gv		73711						
ANR	73958	Symbol	* * src		73711						
ANR	73959	Symbol	( dst -> gnode ) -> idx		73711						
ANR	73960	Symbol	src -> is_dummy		73711						
ANR	73961	Symbol	r_list_length		73711						
ANR	73962	Function	count_edges	1752:0:44487:44602							
ANR	73963	FunctionDef	"count_edges (const RAGraph * g , RANode * src , RANode * dst)"		73962	0					
ANR	73964	CompoundStatement		1752:68:44555:44602	73962	0					
ANR	73965	ReturnStatement	"return get_edge_number ( g , src , dst , true ) ;"	1753:1:44558:44600	73962	0	True				
ANR	73966	CallExpression	"get_edge_number ( g , src , dst , true )"		73962	0					
ANR	73967	Callee	get_edge_number		73962	0					
ANR	73968	Identifier	get_edge_number		73962	0					
ANR	73969	ArgumentList	g		73962	1					
ANR	73970	Argument	g		73962	0					
ANR	73971	Identifier	g		73962	0					
ANR	73972	Argument	src		73962	1					
ANR	73973	Identifier	src		73962	0					
ANR	73974	Argument	dst		73962	2					
ANR	73975	Identifier	dst		73962	0					
ANR	73976	Argument	true		73962	3					
ANR	73977	Identifier	true		73962	0					
ANR	73978	ReturnType	static int		73962	1					
ANR	73979	Identifier	count_edges		73962	2					
ANR	73980	ParameterList	"const RAGraph * g , RANode * src , RANode * dst"		73962	3					
ANR	73981	Parameter	const RAGraph * g	1752:24:44511:44526	73962	0	True				
ANR	73982	ParameterType	const RAGraph *		73962	0					
ANR	73983	Identifier	g		73962	1					
ANR	73984	Parameter	RANode * src	1752:42:44529:44539	73962	1	True				
ANR	73985	ParameterType	RANode *		73962	0					
ANR	73986	Identifier	src		73962	1					
ANR	73987	Parameter	RANode * dst	1752:55:44542:44552	73962	2	True				
ANR	73988	ParameterType	RANode *		73962	0					
ANR	73989	Identifier	dst		73962	1					
ANR	73990	CFGEntryNode	ENTRY		73962		True				
ANR	73991	CFGExitNode	EXIT		73962		True				
ANR	73992	Symbol	dst		73962						
ANR	73993	Symbol	get_edge_number		73962						
ANR	73994	Symbol	src		73962						
ANR	73995	Symbol	g		73962						
ANR	73996	Symbol	true		73962						
ANR	73997	Function	backedge_info	1756:0:44605:48285							
ANR	73998	FunctionDef	backedge_info (RAGraph * g)		73997	0					
ANR	73999	CompoundStatement		1756:39:44644:48285	73997	0					
ANR	74000	IdentifierDeclStatement	"int i , j , k ;"	1757:1:44647:44658	73997	0	True				
ANR	74001	IdentifierDecl	i		73997	0					
ANR	74002	IdentifierDeclType	int		73997	0					
ANR	74003	Identifier	i		73997	1					
ANR	74004	IdentifierDecl	j		73997	1					
ANR	74005	IdentifierDeclType	int		73997	0					
ANR	74006	Identifier	j		73997	1					
ANR	74007	IdentifierDecl	k		73997	2					
ANR	74008	IdentifierDeclType	int		73997	0					
ANR	74009	Identifier	k		73997	1					
ANR	74010	IdentifierDeclStatement	"int min , max ;"	1758:1:44661:44673	73997	1	True				
ANR	74011	IdentifierDecl	min		73997	0					
ANR	74012	IdentifierDeclType	int		73997	0					
ANR	74013	Identifier	min		73997	1					
ANR	74014	IdentifierDecl	max		73997	1					
ANR	74015	IdentifierDeclType	int		73997	0					
ANR	74016	Identifier	max		73997	1					
ANR	74017	IdentifierDeclStatement	int inedge = 0 ;	1759:1:44676:44690	73997	2	True				
ANR	74018	IdentifierDecl	inedge = 0		73997	0					
ANR	74019	IdentifierDeclType	int		73997	0					
ANR	74020	Identifier	inedge		73997	1					
ANR	74021	AssignmentExpression	inedge = 0		73997	2		=			
ANR	74022	Identifier	inedge		73997	0					
ANR	74023	PrimaryExpression	0		73997	1					
ANR	74024	IdentifierDeclStatement	int outedge = 0 ;	1760:1:44693:44708	73997	3	True				
ANR	74025	IdentifierDecl	outedge = 0		73997	0					
ANR	74026	IdentifierDeclType	int		73997	0					
ANR	74027	Identifier	outedge		73997	1					
ANR	74028	AssignmentExpression	outedge = 0		73997	2		=			
ANR	74029	Identifier	outedge		73997	0					
ANR	74030	PrimaryExpression	0		73997	1					
ANR	74031	Statement	int	1762:1:44712:44714	73997	4	True				
ANR	74032	Statement	*	1762:5:44716:44716	73997	5	True				
ANR	74033	Statement	*	1762:6:44717:44717	73997	6	True				
ANR	74034	Statement	arr	1762:7:44718:44720	73997	7	True				
ANR	74035	Statement	=	1762:11:44722:44722	73997	8	True				
ANR	74036	Statement	R_NEWS0	1762:13:44724:44730	73997	9	True				
ANR	74037	Statement	(	1762:21:44732:44732	73997	10	True				
ANR	74038	Statement	int	1762:22:44733:44735	73997	11	True				
ANR	74039	Statement	*	1762:26:44737:44737	73997	12	True				
ANR	74040	Statement	","	1762:27:44738:44738	73997	13	True				
ANR	74041	Statement	g	1762:29:44740:44740	73997	14	True				
ANR	74042	Statement	->	1762:30:44741:44742	73997	15	True				
ANR	74043	Statement	n_layers	1762:32:44743:44750	73997	16	True				
ANR	74044	Statement	)	1762:40:44751:44751	73997	17	True				
ANR	74045	ExpressionStatement		1762:41:44752:44752	73997	18	True				
ANR	74046	IfStatement	if ( ! arr )		73997	19					
ANR	74047	Condition	! arr	1763:5:44759:44762	73997	0	True				
ANR	74048	UnaryOperationExpression	! arr		73997	0					
ANR	74049	UnaryOperator	!		73997	0					
ANR	74050	Identifier	arr		73997	1					
ANR	74051	CompoundStatement		8:11:120:120	73997	1					
ANR	74052	ReturnStatement	return ;	1764:2:44769:44775	73997	0	True				
ANR	74053	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		73997	20					
ANR	74054	ForInit	i = 0 ;	1766:6:44786:44791	73997	0	True				
ANR	74055	AssignmentExpression	i = 0		73997	0		=			
ANR	74056	Identifier	i		73997	0					
ANR	74057	PrimaryExpression	0		73997	1					
ANR	74058	Condition	i < g -> n_layers	1766:13:44793:44807	73997	1	True				
ANR	74059	RelationalExpression	i < g -> n_layers		73997	0		<			
ANR	74060	Identifier	i		73997	0					
ANR	74061	PtrMemberAccess	g -> n_layers		73997	1					
ANR	74062	Identifier	g		73997	0					
ANR	74063	Identifier	n_layers		73997	1					
ANR	74064	PostIncDecOperationExpression	i ++	1766:30:44810:44812	73997	2	True				
ANR	74065	Identifier	i		73997	0					
ANR	74066	IncDec	++		73997	1					
ANR	74067	CompoundStatement		11:35:170:170	73997	3					
ANR	74068	ExpressionStatement	"arr [ i ] = R_NEWS0 ( int , 2 )"	1767:2:44819:44844	73997	0	True				
ANR	74069	AssignmentExpression	"arr [ i ] = R_NEWS0 ( int , 2 )"		73997	0		=			
ANR	74070	ArrayIndexing	arr [ i ]		73997	0					
ANR	74071	Identifier	arr		73997	0					
ANR	74072	Identifier	i		73997	1					
ANR	74073	CallExpression	"R_NEWS0 ( int , 2 )"		73997	1					
ANR	74074	Callee	R_NEWS0		73997	0					
ANR	74075	Identifier	R_NEWS0		73997	0					
ANR	74076	ArgumentList	int		73997	1					
ANR	74077	Argument	int		73997	0					
ANR	74078	Identifier	int		73997	0					
ANR	74079	Argument	2		73997	1					
ANR	74080	PrimaryExpression	2		73997	0					
ANR	74081	IfStatement	if ( ! arr [ i ] )		73997	1					
ANR	74082	Condition	! arr [ i ]	1768:6:44852:44858	73997	0	True				
ANR	74083	UnaryOperationExpression	! arr [ i ]		73997	0					
ANR	74084	UnaryOperator	!		73997	0					
ANR	74085	ArrayIndexing	arr [ i ]		73997	1					
ANR	74086	Identifier	arr		73997	0					
ANR	74087	Identifier	i		73997	1					
ANR	74088	CompoundStatement		13:15:216:216	73997	1					
ANR	74089	GotoStatement	goto err ;	1769:3:44866:44874	73997	0	True				
ANR	74090	Identifier	err		73997	0					
ANR	74091	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		73997	21					
ANR	74092	ForInit	i = 0 ;	1773:6:44890:44895	73997	0	True				
ANR	74093	AssignmentExpression	i = 0		73997	0		=			
ANR	74094	Identifier	i		73997	0					
ANR	74095	PrimaryExpression	0		73997	1					
ANR	74096	Condition	i < g -> n_layers	1773:13:44897:44911	73997	1	True				
ANR	74097	RelationalExpression	i < g -> n_layers		73997	0		<			
ANR	74098	Identifier	i		73997	0					
ANR	74099	PtrMemberAccess	g -> n_layers		73997	1					
ANR	74100	Identifier	g		73997	0					
ANR	74101	Identifier	n_layers		73997	1					
ANR	74102	PostIncDecOperationExpression	i ++	1773:30:44914:44916	73997	2	True				
ANR	74103	Identifier	i		73997	0					
ANR	74104	IncDec	++		73997	1					
ANR	74105	CompoundStatement		18:35:274:274	73997	3					
ANR	74106	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; j ++ )		73997	0					
ANR	74107	ForInit	j = 0 ;	1774:7:44928:44933	73997	0	True				
ANR	74108	AssignmentExpression	j = 0		73997	0		=			
ANR	74109	Identifier	j		73997	0					
ANR	74110	PrimaryExpression	0		73997	1					
ANR	74111	Condition	j < g -> layers [ i ] . n_nodes	1774:14:44935:44958	73997	1	True				
ANR	74112	RelationalExpression	j < g -> layers [ i ] . n_nodes		73997	0		<			
ANR	74113	Identifier	j		73997	0					
ANR	74114	MemberAccess	g -> layers [ i ] . n_nodes		73997	1					
ANR	74115	ArrayIndexing	g -> layers [ i ]		73997	0					
ANR	74116	PtrMemberAccess	g -> layers		73997	0					
ANR	74117	Identifier	g		73997	0					
ANR	74118	Identifier	layers		73997	1					
ANR	74119	Identifier	i		73997	1					
ANR	74120	Identifier	n_nodes		73997	1					
ANR	74121	PostIncDecOperationExpression	j ++	1774:40:44961:44963	73997	2	True				
ANR	74122	Identifier	j		73997	0					
ANR	74123	IncDec	++		73997	1					
ANR	74124	CompoundStatement		29:3:512:549	73997	3					
ANR	74125	IdentifierDeclStatement	RGraphNode * gt = g -> layers [ i ] . nodes [ j ] ;	1775:3:44971:45009	73997	0	True				
ANR	74126	IdentifierDecl	* gt = g -> layers [ i ] . nodes [ j ]		73997	0					
ANR	74127	IdentifierDeclType	RGraphNode *		73997	0					
ANR	74128	Identifier	gt		73997	1					
ANR	74129	AssignmentExpression	* gt = g -> layers [ i ] . nodes [ j ]		73997	2		=			
ANR	74130	Identifier	gt		73997	0					
ANR	74131	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		73997	1					
ANR	74132	MemberAccess	g -> layers [ i ] . nodes		73997	0					
ANR	74133	ArrayIndexing	g -> layers [ i ]		73997	0					
ANR	74134	PtrMemberAccess	g -> layers		73997	0					
ANR	74135	Identifier	g		73997	0					
ANR	74136	Identifier	layers		73997	1					
ANR	74137	Identifier	i		73997	1					
ANR	74138	Identifier	nodes		73997	1					
ANR	74139	Identifier	j		73997	1					
ANR	74140	IfStatement	if ( ! gt )		73997	1					
ANR	74141	Condition	! gt	1776:7:45018:45020	73997	0	True				
ANR	74142	UnaryOperationExpression	! gt		73997	0					
ANR	74143	UnaryOperator	!		73997	0					
ANR	74144	Identifier	gt		73997	1					
ANR	74145	CompoundStatement		21:12:378:378	73997	1					
ANR	74146	ContinueStatement	continue ;	1777:4:45029:45037	73997	0	True				
ANR	74147	IdentifierDeclStatement	RANode * t = ( RANode * ) gt -> data ;	1779:3:45047:45078	73997	2	True				
ANR	74148	IdentifierDecl	* t = ( RANode * ) gt -> data		73997	0					
ANR	74149	IdentifierDeclType	RANode *		73997	0					
ANR	74150	Identifier	t		73997	1					
ANR	74151	AssignmentExpression	* t = ( RANode * ) gt -> data		73997	2		=			
ANR	74152	Identifier	t		73997	0					
ANR	74153	CastExpression	( RANode * ) gt -> data		73997	1					
ANR	74154	CastTarget	RANode *		73997	0					
ANR	74155	PtrMemberAccess	gt -> data		73997	1					
ANR	74156	Identifier	gt		73997	0					
ANR	74157	Identifier	data		73997	1					
ANR	74158	IfStatement	if ( ! t )		73997	3					
ANR	74159	Condition	! t	1780:7:45087:45088	73997	0	True				
ANR	74160	UnaryOperationExpression	! t		73997	0					
ANR	74161	UnaryOperator	!		73997	0					
ANR	74162	Identifier	t		73997	1					
ANR	74163	CompoundStatement		25:11:446:446	73997	1					
ANR	74164	ContinueStatement	continue ;	1781:4:45097:45105	73997	0	True				
ANR	74165	IdentifierDeclStatement	int tc = g -> layout == 0 ? t -> x : t -> y ;	1783:3:45115:45152	73997	4	True				
ANR	74166	IdentifierDecl	tc = g -> layout == 0 ? t -> x : t -> y		73997	0					
ANR	74167	IdentifierDeclType	int		73997	0					
ANR	74168	Identifier	tc		73997	1					
ANR	74169	AssignmentExpression	tc = g -> layout == 0 ? t -> x : t -> y		73997	2		=			
ANR	74170	Identifier	tc		73997	0					
ANR	74171	ConditionalExpression	g -> layout == 0 ? t -> x : t -> y		73997	1					
ANR	74172	Condition	g -> layout == 0		73997	0					
ANR	74173	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74174	PtrMemberAccess	g -> layout		73997	0					
ANR	74175	Identifier	g		73997	0					
ANR	74176	Identifier	layout		73997	1					
ANR	74177	PrimaryExpression	0		73997	1					
ANR	74178	PtrMemberAccess	t -> x		73997	1					
ANR	74179	Identifier	t		73997	0					
ANR	74180	Identifier	x		73997	1					
ANR	74181	PtrMemberAccess	t -> y		73997	2					
ANR	74182	Identifier	t		73997	0					
ANR	74183	Identifier	y		73997	1					
ANR	74184	IdentifierDeclStatement	int tl = g -> layout == 0 ? t -> w : t -> h ;	1784:3:45157:45194	73997	5	True				
ANR	74185	IdentifierDecl	tl = g -> layout == 0 ? t -> w : t -> h		73997	0					
ANR	74186	IdentifierDeclType	int		73997	0					
ANR	74187	Identifier	tl		73997	1					
ANR	74188	AssignmentExpression	tl = g -> layout == 0 ? t -> w : t -> h		73997	2		=			
ANR	74189	Identifier	tl		73997	0					
ANR	74190	ConditionalExpression	g -> layout == 0 ? t -> w : t -> h		73997	1					
ANR	74191	Condition	g -> layout == 0		73997	0					
ANR	74192	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74193	PtrMemberAccess	g -> layout		73997	0					
ANR	74194	Identifier	g		73997	0					
ANR	74195	Identifier	layout		73997	1					
ANR	74196	PrimaryExpression	0		73997	1					
ANR	74197	PtrMemberAccess	t -> w		73997	1					
ANR	74198	Identifier	t		73997	0					
ANR	74199	Identifier	w		73997	1					
ANR	74200	PtrMemberAccess	t -> h		73997	2					
ANR	74201	Identifier	t		73997	0					
ANR	74202	Identifier	h		73997	1					
ANR	74203	IfStatement	if ( ! j )		73997	6					
ANR	74204	Condition	! j	1785:7:45203:45204	73997	0	True				
ANR	74205	UnaryOperationExpression	! j		73997	0					
ANR	74206	UnaryOperator	!		73997	0					
ANR	74207	Identifier	j		73997	1					
ANR	74208	CompoundStatement		30:11:562:562	73997	1					
ANR	74209	ExpressionStatement	arr [ i ] [ 0 ] = tc	1786:4:45213:45227	73997	0	True				
ANR	74210	AssignmentExpression	arr [ i ] [ 0 ] = tc		73997	0		=			
ANR	74211	ArrayIndexing	arr [ i ] [ 0 ]		73997	0					
ANR	74212	ArrayIndexing	arr [ i ]		73997	0					
ANR	74213	Identifier	arr		73997	0					
ANR	74214	Identifier	i		73997	1					
ANR	74215	PrimaryExpression	0		73997	1					
ANR	74216	Identifier	tc		73997	1					
ANR	74217	ExpressionStatement	arr [ i ] [ 1 ] = tc + tl	1787:4:45233:45252	73997	1	True				
ANR	74218	AssignmentExpression	arr [ i ] [ 1 ] = tc + tl		73997	0		=			
ANR	74219	ArrayIndexing	arr [ i ] [ 1 ]		73997	0					
ANR	74220	ArrayIndexing	arr [ i ]		73997	0					
ANR	74221	Identifier	arr		73997	0					
ANR	74222	Identifier	i		73997	1					
ANR	74223	PrimaryExpression	1		73997	1					
ANR	74224	AdditiveExpression	tc + tl		73997	1		+			
ANR	74225	Identifier	tc		73997	0					
ANR	74226	Identifier	tl		73997	1					
ANR	74227	IfStatement	if ( arr [ i ] [ 0 ] > tc )		73997	7					
ANR	74228	Condition	arr [ i ] [ 0 ] > tc	1790:7:45267:45280	73997	0	True				
ANR	74229	RelationalExpression	arr [ i ] [ 0 ] > tc		73997	0		>			
ANR	74230	ArrayIndexing	arr [ i ] [ 0 ]		73997	0					
ANR	74231	ArrayIndexing	arr [ i ]		73997	0					
ANR	74232	Identifier	arr		73997	0					
ANR	74233	Identifier	i		73997	1					
ANR	74234	PrimaryExpression	0		73997	1					
ANR	74235	Identifier	tc		73997	1					
ANR	74236	CompoundStatement		35:23:638:638	73997	1					
ANR	74237	ExpressionStatement	arr [ i ] [ 0 ] = tc	1791:4:45289:45303	73997	0	True				
ANR	74238	AssignmentExpression	arr [ i ] [ 0 ] = tc		73997	0		=			
ANR	74239	ArrayIndexing	arr [ i ] [ 0 ]		73997	0					
ANR	74240	ArrayIndexing	arr [ i ]		73997	0					
ANR	74241	Identifier	arr		73997	0					
ANR	74242	Identifier	i		73997	1					
ANR	74243	PrimaryExpression	0		73997	1					
ANR	74244	Identifier	tc		73997	1					
ANR	74245	IfStatement	if ( arr [ i ] [ 1 ] < tc + tl )		73997	8					
ANR	74246	Condition	arr [ i ] [ 1 ] < tc + tl	1794:7:45318:45336	73997	0	True				
ANR	74247	RelationalExpression	arr [ i ] [ 1 ] < tc + tl		73997	0		<			
ANR	74248	ArrayIndexing	arr [ i ] [ 1 ]		73997	0					
ANR	74249	ArrayIndexing	arr [ i ]		73997	0					
ANR	74250	Identifier	arr		73997	0					
ANR	74251	Identifier	i		73997	1					
ANR	74252	PrimaryExpression	1		73997	1					
ANR	74253	AdditiveExpression	tc + tl		73997	1		+			
ANR	74254	Identifier	tc		73997	0					
ANR	74255	Identifier	tl		73997	1					
ANR	74256	CompoundStatement		39:28:694:694	73997	1					
ANR	74257	ExpressionStatement	arr [ i ] [ 1 ] = tc + tl	1795:4:45345:45364	73997	0	True				
ANR	74258	AssignmentExpression	arr [ i ] [ 1 ] = tc + tl		73997	0		=			
ANR	74259	ArrayIndexing	arr [ i ] [ 1 ]		73997	0					
ANR	74260	ArrayIndexing	arr [ i ]		73997	0					
ANR	74261	Identifier	arr		73997	0					
ANR	74262	Identifier	i		73997	1					
ANR	74263	PrimaryExpression	1		73997	1					
ANR	74264	AdditiveExpression	tc + tl		73997	1		+			
ANR	74265	Identifier	tc		73997	0					
ANR	74266	Identifier	tl		73997	1					
ANR	74267	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; j ++ )		73997	1					
ANR	74268	ForInit	j = 0 ;	1799:7:45383:45388	73997	0	True				
ANR	74269	AssignmentExpression	j = 0		73997	0		=			
ANR	74270	Identifier	j		73997	0					
ANR	74271	PrimaryExpression	0		73997	1					
ANR	74272	Condition	j < g -> layers [ i ] . n_nodes	1799:14:45390:45413	73997	1	True				
ANR	74273	RelationalExpression	j < g -> layers [ i ] . n_nodes		73997	0		<			
ANR	74274	Identifier	j		73997	0					
ANR	74275	MemberAccess	g -> layers [ i ] . n_nodes		73997	1					
ANR	74276	ArrayIndexing	g -> layers [ i ]		73997	0					
ANR	74277	PtrMemberAccess	g -> layers		73997	0					
ANR	74278	Identifier	g		73997	0					
ANR	74279	Identifier	layers		73997	1					
ANR	74280	Identifier	i		73997	1					
ANR	74281	Identifier	n_nodes		73997	1					
ANR	74282	PostIncDecOperationExpression	j ++	1799:40:45416:45418	73997	2	True				
ANR	74283	Identifier	j		73997	0					
ANR	74284	IncDec	++		73997	1					
ANR	74285	CompoundStatement		53:3:986:1000	73997	3					
ANR	74286	IdentifierDeclStatement	RANode * a = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	1800:3:45426:45471	73997	0	True				
ANR	74287	IdentifierDecl	* a = get_anode ( g -> layers [ i ] . nodes [ j ] )		73997	0					
ANR	74288	IdentifierDeclType	RANode *		73997	0					
ANR	74289	Identifier	a		73997	1					
ANR	74290	AssignmentExpression	* a = get_anode ( g -> layers [ i ] . nodes [ j ] )		73997	2		=			
ANR	74291	Identifier	a		73997	0					
ANR	74292	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		73997	1					
ANR	74293	Callee	get_anode		73997	0					
ANR	74294	Identifier	get_anode		73997	0					
ANR	74295	ArgumentList	g -> layers [ i ] . nodes [ j ]		73997	1					
ANR	74296	Argument	g -> layers [ i ] . nodes [ j ]		73997	0					
ANR	74297	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		73997	0					
ANR	74298	MemberAccess	g -> layers [ i ] . nodes		73997	0					
ANR	74299	ArrayIndexing	g -> layers [ i ]		73997	0					
ANR	74300	PtrMemberAccess	g -> layers		73997	0					
ANR	74301	Identifier	g		73997	0					
ANR	74302	Identifier	layers		73997	1					
ANR	74303	Identifier	i		73997	1					
ANR	74304	Identifier	nodes		73997	1					
ANR	74305	Identifier	j		73997	1					
ANR	74306	IfStatement	if ( ! a || a -> is_dummy )		73997	1					
ANR	74307	Condition	! a || a -> is_dummy	1801:7:45480:45496	73997	0	True				
ANR	74308	OrExpression	! a || a -> is_dummy		73997	0		||			
ANR	74309	UnaryOperationExpression	! a		73997	0					
ANR	74310	UnaryOperator	!		73997	0					
ANR	74311	Identifier	a		73997	1					
ANR	74312	PtrMemberAccess	a -> is_dummy		73997	1					
ANR	74313	Identifier	a		73997	0					
ANR	74314	Identifier	is_dummy		73997	1					
ANR	74315	CompoundStatement		46:26:854:854	73997	1					
ANR	74316	ContinueStatement	continue ;	1802:4:45505:45513	73997	0	True				
ANR	74317	IdentifierDeclStatement	"const RList * neighbours = r_graph_get_neighbours ( g -> graph , a -> gnode ) ;"	1805:3:45524:45593	73997	2	True				
ANR	74318	IdentifierDecl	"* neighbours = r_graph_get_neighbours ( g -> graph , a -> gnode )"		73997	0					
ANR	74319	IdentifierDeclType	const RList *		73997	0					
ANR	74320	Identifier	neighbours		73997	1					
ANR	74321	AssignmentExpression	"* neighbours = r_graph_get_neighbours ( g -> graph , a -> gnode )"		73997	2		=			
ANR	74322	Identifier	neighbours		73997	0					
ANR	74323	CallExpression	"r_graph_get_neighbours ( g -> graph , a -> gnode )"		73997	1					
ANR	74324	Callee	r_graph_get_neighbours		73997	0					
ANR	74325	Identifier	r_graph_get_neighbours		73997	0					
ANR	74326	ArgumentList	g -> graph		73997	1					
ANR	74327	Argument	g -> graph		73997	0					
ANR	74328	PtrMemberAccess	g -> graph		73997	0					
ANR	74329	Identifier	g		73997	0					
ANR	74330	Identifier	graph		73997	1					
ANR	74331	Argument	a -> gnode		73997	1					
ANR	74332	PtrMemberAccess	a -> gnode		73997	0					
ANR	74333	Identifier	a		73997	0					
ANR	74334	Identifier	gnode		73997	1					
ANR	74335	IdentifierDeclStatement	RGraphNode * gb ;	1806:3:45598:45612	73997	3	True				
ANR	74336	IdentifierDecl	* gb		73997	0					
ANR	74337	IdentifierDeclType	RGraphNode *		73997	0					
ANR	74338	Identifier	gb		73997	1					
ANR	74339	IdentifierDeclStatement	RANode * b ;	1807:3:45617:45626	73997	4	True				
ANR	74340	IdentifierDecl	* b		73997	0					
ANR	74341	IdentifierDeclType	RANode *		73997	0					
ANR	74342	Identifier	b		73997	1					
ANR	74343	IdentifierDeclStatement	RListIter * itm ;	1808:3:45631:45645	73997	5	True				
ANR	74344	IdentifierDecl	* itm		73997	0					
ANR	74345	IdentifierDeclType	RListIter *		73997	0					
ANR	74346	Identifier	itm		73997	1					
ANR	74347	IfStatement	if ( i == 0 )		73997	6					
ANR	74348	Condition	i == 0	1810:7:45655:45660	73997	0	True				
ANR	74349	EqualityExpression	i == 0		73997	0		==			
ANR	74350	Identifier	i		73997	0					
ANR	74351	PrimaryExpression	0		73997	1					
ANR	74352	CompoundStatement		55:15:1018:1018	73997	1					
ANR	74353	ExpressionStatement	"inedge += r_list_length ( r_graph_innodes ( g -> graph , a -> gnode ) )"	1811:4:45669:45731	73997	0	True				
ANR	74354	AssignmentExpression	"inedge += r_list_length ( r_graph_innodes ( g -> graph , a -> gnode ) )"		73997	0		+=			
ANR	74355	Identifier	inedge		73997	0					
ANR	74356	CallExpression	"r_list_length ( r_graph_innodes ( g -> graph , a -> gnode ) )"		73997	1					
ANR	74357	Callee	r_list_length		73997	0					
ANR	74358	Identifier	r_list_length		73997	0					
ANR	74359	ArgumentList	"r_graph_innodes ( g -> graph , a -> gnode )"		73997	1					
ANR	74360	Argument	"r_graph_innodes ( g -> graph , a -> gnode )"		73997	0					
ANR	74361	CallExpression	"r_graph_innodes ( g -> graph , a -> gnode )"		73997	0					
ANR	74362	Callee	r_graph_innodes		73997	0					
ANR	74363	Identifier	r_graph_innodes		73997	0					
ANR	74364	ArgumentList	g -> graph		73997	1					
ANR	74365	Argument	g -> graph		73997	0					
ANR	74366	PtrMemberAccess	g -> graph		73997	0					
ANR	74367	Identifier	g		73997	0					
ANR	74368	Identifier	graph		73997	1					
ANR	74369	Argument	a -> gnode		73997	1					
ANR	74370	PtrMemberAccess	a -> gnode		73997	0					
ANR	74371	Identifier	a		73997	0					
ANR	74372	Identifier	gnode		73997	1					
ANR	74373	ElseStatement	else		73997	0					
ANR	74374	IfStatement	if ( i == g -> n_layers - 1 )		73997	0					
ANR	74375	Condition	i == g -> n_layers - 1	1812:14:45747:45766	73997	0	True				
ANR	74376	EqualityExpression	i == g -> n_layers - 1		73997	0		==			
ANR	74377	Identifier	i		73997	0					
ANR	74378	AdditiveExpression	g -> n_layers - 1		73997	1		-			
ANR	74379	PtrMemberAccess	g -> n_layers		73997	0					
ANR	74380	Identifier	g		73997	0					
ANR	74381	Identifier	n_layers		73997	1					
ANR	74382	PrimaryExpression	1		73997	1					
ANR	74383	CompoundStatement		57:36:1124:1124	73997	1					
ANR	74384	ExpressionStatement	outedge += r_list_length ( neighbours )	1813:4:45775:45812	73997	0	True				
ANR	74385	AssignmentExpression	outedge += r_list_length ( neighbours )		73997	0		+=			
ANR	74386	Identifier	outedge		73997	0					
ANR	74387	CallExpression	r_list_length ( neighbours )		73997	1					
ANR	74388	Callee	r_list_length		73997	0					
ANR	74389	Identifier	r_list_length		73997	0					
ANR	74390	ArgumentList	neighbours		73997	1					
ANR	74391	Argument	neighbours		73997	0					
ANR	74392	Identifier	neighbours		73997	0					
ANR	74393	Statement	graph_foreach_anode	1816:3:45823:45841	73997	7	True				
ANR	74394	Statement	(	1816:23:45843:45843	73997	8	True				
ANR	74395	Statement	neighbours	1816:24:45844:45853	73997	9	True				
ANR	74396	Statement	","	1816:34:45854:45854	73997	10	True				
ANR	74397	Statement	itm	1816:36:45856:45858	73997	11	True				
ANR	74398	Statement	","	1816:39:45859:45859	73997	12	True				
ANR	74399	Statement	gb	1816:41:45861:45862	73997	13	True				
ANR	74400	Statement	","	1816:43:45863:45863	73997	14	True				
ANR	74401	Statement	b	1816:45:45865:45865	73997	15	True				
ANR	74402	Statement	)	1816:46:45866:45866	73997	16	True				
ANR	74403	CompoundStatement		99:4:2020:2045	73997	17					
ANR	74404	IfStatement	if ( b -> layer > a -> layer )		73997	0					
ANR	74405	Condition	b -> layer > a -> layer	1817:8:45878:45896	73997	0	True				
ANR	74406	RelationalExpression	b -> layer > a -> layer		73997	0		>			
ANR	74407	PtrMemberAccess	b -> layer		73997	0					
ANR	74408	Identifier	b		73997	0					
ANR	74409	Identifier	layer		73997	1					
ANR	74410	PtrMemberAccess	a -> layer		73997	1					
ANR	74411	Identifier	a		73997	0					
ANR	74412	Identifier	layer		73997	1					
ANR	74413	CompoundStatement		62:29:1254:1254	73997	1					
ANR	74414	ContinueStatement	continue ;	1818:5:45906:45914	73997	0	True				
ANR	74415	IdentifierDeclStatement	"int nth = count_edges ( g , a , b ) ;"	1821:4:45927:45958	73997	1	True				
ANR	74416	IdentifierDecl	"nth = count_edges ( g , a , b )"		73997	0					
ANR	74417	IdentifierDeclType	int		73997	0					
ANR	74418	Identifier	nth		73997	1					
ANR	74419	AssignmentExpression	"nth = count_edges ( g , a , b )"		73997	2		=			
ANR	74420	Identifier	nth		73997	0					
ANR	74421	CallExpression	"count_edges ( g , a , b )"		73997	1					
ANR	74422	Callee	count_edges		73997	0					
ANR	74423	Identifier	count_edges		73997	0					
ANR	74424	ArgumentList	g		73997	1					
ANR	74425	Argument	g		73997	0					
ANR	74426	Identifier	g		73997	0					
ANR	74427	Argument	a		73997	1					
ANR	74428	Identifier	a		73997	0					
ANR	74429	Argument	b		73997	2					
ANR	74430	Identifier	b		73997	0					
ANR	74431	IdentifierDeclStatement	int xinc = R_EDGES_X_INC + 2 * ( nth + 1 ) ;	1822:4:45964:46004	73997	2	True				
ANR	74432	IdentifierDecl	xinc = R_EDGES_X_INC + 2 * ( nth + 1 )		73997	0					
ANR	74433	IdentifierDeclType	int		73997	0					
ANR	74434	Identifier	xinc		73997	1					
ANR	74435	AssignmentExpression	xinc = R_EDGES_X_INC + 2 * ( nth + 1 )		73997	2		=			
ANR	74436	Identifier	xinc		73997	0					
ANR	74437	AdditiveExpression	R_EDGES_X_INC + 2 * ( nth + 1 )		73997	1		+			
ANR	74438	Identifier	R_EDGES_X_INC		73997	0					
ANR	74439	MultiplicativeExpression	2 * ( nth + 1 )		73997	1		*			
ANR	74440	PrimaryExpression	2		73997	0					
ANR	74441	AdditiveExpression	nth + 1		73997	1		+			
ANR	74442	Identifier	nth		73997	0					
ANR	74443	PrimaryExpression	1		73997	1					
ANR	74444	IdentifierDeclStatement	int ax = g -> layout == 0 ? a -> x + xinc : a -> y + ( a -> h / 2 ) + nth ;	1824:4:46011:46074	73997	3	True				
ANR	74445	IdentifierDecl	ax = g -> layout == 0 ? a -> x + xinc : a -> y + ( a -> h / 2 ) + nth		73997	0					
ANR	74446	IdentifierDeclType	int		73997	0					
ANR	74447	Identifier	ax		73997	1					
ANR	74448	AssignmentExpression	ax = g -> layout == 0 ? a -> x + xinc : a -> y + ( a -> h / 2 ) + nth		73997	2		=			
ANR	74449	Identifier	ax		73997	0					
ANR	74450	ConditionalExpression	g -> layout == 0 ? a -> x + xinc : a -> y + ( a -> h / 2 ) + nth		73997	1					
ANR	74451	Condition	g -> layout == 0		73997	0					
ANR	74452	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74453	PtrMemberAccess	g -> layout		73997	0					
ANR	74454	Identifier	g		73997	0					
ANR	74455	Identifier	layout		73997	1					
ANR	74456	PrimaryExpression	0		73997	1					
ANR	74457	AdditiveExpression	a -> x + xinc		73997	1		+			
ANR	74458	PtrMemberAccess	a -> x		73997	0					
ANR	74459	Identifier	a		73997	0					
ANR	74460	Identifier	x		73997	1					
ANR	74461	Identifier	xinc		73997	1					
ANR	74462	AdditiveExpression	a -> y + ( a -> h / 2 ) + nth		73997	2		+			
ANR	74463	PtrMemberAccess	a -> y		73997	0					
ANR	74464	Identifier	a		73997	0					
ANR	74465	Identifier	y		73997	1					
ANR	74466	AdditiveExpression	( a -> h / 2 ) + nth		73997	1		+			
ANR	74467	MultiplicativeExpression	a -> h / 2		73997	0		/			
ANR	74468	PtrMemberAccess	a -> h		73997	0					
ANR	74469	Identifier	a		73997	0					
ANR	74470	Identifier	h		73997	1					
ANR	74471	PrimaryExpression	2		73997	1					
ANR	74472	Identifier	nth		73997	1					
ANR	74473	IdentifierDeclStatement	int bx = g -> layout == 0 ? b -> x + xinc : b -> y + ( b -> h / 2 ) + nth ;	1825:4:46080:46143	73997	4	True				
ANR	74474	IdentifierDecl	bx = g -> layout == 0 ? b -> x + xinc : b -> y + ( b -> h / 2 ) + nth		73997	0					
ANR	74475	IdentifierDeclType	int		73997	0					
ANR	74476	Identifier	bx		73997	1					
ANR	74477	AssignmentExpression	bx = g -> layout == 0 ? b -> x + xinc : b -> y + ( b -> h / 2 ) + nth		73997	2		=			
ANR	74478	Identifier	bx		73997	0					
ANR	74479	ConditionalExpression	g -> layout == 0 ? b -> x + xinc : b -> y + ( b -> h / 2 ) + nth		73997	1					
ANR	74480	Condition	g -> layout == 0		73997	0					
ANR	74481	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74482	PtrMemberAccess	g -> layout		73997	0					
ANR	74483	Identifier	g		73997	0					
ANR	74484	Identifier	layout		73997	1					
ANR	74485	PrimaryExpression	0		73997	1					
ANR	74486	AdditiveExpression	b -> x + xinc		73997	1		+			
ANR	74487	PtrMemberAccess	b -> x		73997	0					
ANR	74488	Identifier	b		73997	0					
ANR	74489	Identifier	x		73997	1					
ANR	74490	Identifier	xinc		73997	1					
ANR	74491	AdditiveExpression	b -> y + ( b -> h / 2 ) + nth		73997	2		+			
ANR	74492	PtrMemberAccess	b -> y		73997	0					
ANR	74493	Identifier	b		73997	0					
ANR	74494	Identifier	y		73997	1					
ANR	74495	AdditiveExpression	( b -> h / 2 ) + nth		73997	1		+			
ANR	74496	MultiplicativeExpression	b -> h / 2		73997	0		/			
ANR	74497	PtrMemberAccess	b -> h		73997	0					
ANR	74498	Identifier	b		73997	0					
ANR	74499	Identifier	h		73997	1					
ANR	74500	PrimaryExpression	2		73997	1					
ANR	74501	Identifier	nth		73997	1					
ANR	74502	IfStatement	if ( g -> layout == 0 && nth == 0 && bx > ax )		73997	5					
ANR	74503	Condition	g -> layout == 0 && nth == 0 && bx > ax	1827:8:46154:46190	73997	0	True				
ANR	74504	AndExpression	g -> layout == 0 && nth == 0 && bx > ax		73997	0		&&			
ANR	74505	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74506	PtrMemberAccess	g -> layout		73997	0					
ANR	74507	Identifier	g		73997	0					
ANR	74508	Identifier	layout		73997	1					
ANR	74509	PrimaryExpression	0		73997	1					
ANR	74510	AndExpression	nth == 0 && bx > ax		73997	1		&&			
ANR	74511	EqualityExpression	nth == 0		73997	0		==			
ANR	74512	Identifier	nth		73997	0					
ANR	74513	PrimaryExpression	0		73997	1					
ANR	74514	RelationalExpression	bx > ax		73997	1		>			
ANR	74515	Identifier	bx		73997	0					
ANR	74516	Identifier	ax		73997	1					
ANR	74517	CompoundStatement		72:47:1548:1548	73997	1					
ANR	74518	ExpressionStatement	ax += 4	1828:5:46200:46207	73997	0	True				
ANR	74519	AssignmentExpression	ax += 4		73997	0		+=			
ANR	74520	Identifier	ax		73997	0					
ANR	74521	PrimaryExpression	4		73997	1					
ANR	74522	ExpressionStatement	min = arr [ b -> layer ] [ 0 ]	1831:4:46220:46242	73997	6	True				
ANR	74523	AssignmentExpression	min = arr [ b -> layer ] [ 0 ]		73997	0		=			
ANR	74524	Identifier	min		73997	0					
ANR	74525	ArrayIndexing	arr [ b -> layer ] [ 0 ]		73997	1					
ANR	74526	ArrayIndexing	arr [ b -> layer ]		73997	0					
ANR	74527	Identifier	arr		73997	0					
ANR	74528	PtrMemberAccess	b -> layer		73997	1					
ANR	74529	Identifier	b		73997	0					
ANR	74530	Identifier	layer		73997	1					
ANR	74531	PrimaryExpression	0		73997	1					
ANR	74532	ExpressionStatement	max = arr [ b -> layer ] [ 1 ]	1832:4:46248:46270	73997	7	True				
ANR	74533	AssignmentExpression	max = arr [ b -> layer ] [ 1 ]		73997	0		=			
ANR	74534	Identifier	max		73997	0					
ANR	74535	ArrayIndexing	arr [ b -> layer ] [ 1 ]		73997	1					
ANR	74536	ArrayIndexing	arr [ b -> layer ]		73997	0					
ANR	74537	Identifier	arr		73997	0					
ANR	74538	PtrMemberAccess	b -> layer		73997	1					
ANR	74539	Identifier	b		73997	0					
ANR	74540	Identifier	layer		73997	1					
ANR	74541	PrimaryExpression	1		73997	1					
ANR	74542	ForStatement	for ( k = b -> layer ; k <= a -> layer ; k ++ )		73997	8					
ANR	74543	ForInit	k = b -> layer ;	1833:9:46281:46293	73997	0	True				
ANR	74544	AssignmentExpression	k = b -> layer		73997	0		=			
ANR	74545	Identifier	k		73997	0					
ANR	74546	PtrMemberAccess	b -> layer		73997	1					
ANR	74547	Identifier	b		73997	0					
ANR	74548	Identifier	layer		73997	1					
ANR	74549	Condition	k <= a -> layer	1833:23:46295:46307	73997	1	True				
ANR	74550	RelationalExpression	k <= a -> layer		73997	0		<=			
ANR	74551	Identifier	k		73997	0					
ANR	74552	PtrMemberAccess	a -> layer		73997	1					
ANR	74553	Identifier	a		73997	0					
ANR	74554	Identifier	layer		73997	1					
ANR	74555	PostIncDecOperationExpression	k ++	1833:38:46310:46312	73997	2	True				
ANR	74556	Identifier	k		73997	0					
ANR	74557	IncDec	++		73997	1					
ANR	74558	CompoundStatement		78:43:1670:1670	73997	3					
ANR	74559	IfStatement	if ( min > arr [ k ] [ 0 ] )		73997	0					
ANR	74560	Condition	min > arr [ k ] [ 0 ]	1834:9:46326:46340	73997	0	True				
ANR	74561	RelationalExpression	min > arr [ k ] [ 0 ]		73997	0		>			
ANR	74562	Identifier	min		73997	0					
ANR	74563	ArrayIndexing	arr [ k ] [ 0 ]		73997	1					
ANR	74564	ArrayIndexing	arr [ k ]		73997	0					
ANR	74565	Identifier	arr		73997	0					
ANR	74566	Identifier	k		73997	1					
ANR	74567	PrimaryExpression	0		73997	1					
ANR	74568	CompoundStatement		79:26:1698:1698	73997	1					
ANR	74569	ExpressionStatement	min = arr [ k ] [ 0 ]	1835:6:46351:46366	73997	0	True				
ANR	74570	AssignmentExpression	min = arr [ k ] [ 0 ]		73997	0		=			
ANR	74571	Identifier	min		73997	0					
ANR	74572	ArrayIndexing	arr [ k ] [ 0 ]		73997	1					
ANR	74573	ArrayIndexing	arr [ k ]		73997	0					
ANR	74574	Identifier	arr		73997	0					
ANR	74575	Identifier	k		73997	1					
ANR	74576	PrimaryExpression	0		73997	1					
ANR	74577	IfStatement	if ( max < arr [ k ] [ 1 ] )		73997	1					
ANR	74578	Condition	max < arr [ k ] [ 1 ]	1838:9:46385:46399	73997	0	True				
ANR	74579	RelationalExpression	max < arr [ k ] [ 1 ]		73997	0		<			
ANR	74580	Identifier	max		73997	0					
ANR	74581	ArrayIndexing	arr [ k ] [ 1 ]		73997	1					
ANR	74582	ArrayIndexing	arr [ k ]		73997	0					
ANR	74583	Identifier	arr		73997	0					
ANR	74584	Identifier	k		73997	1					
ANR	74585	PrimaryExpression	1		73997	1					
ANR	74586	CompoundStatement		83:26:1757:1757	73997	1					
ANR	74587	ExpressionStatement	max = arr [ k ] [ 1 ]	1839:6:46410:46425	73997	0	True				
ANR	74588	AssignmentExpression	max = arr [ k ] [ 1 ]		73997	0		=			
ANR	74589	Identifier	max		73997	0					
ANR	74590	ArrayIndexing	arr [ k ] [ 1 ]		73997	1					
ANR	74591	ArrayIndexing	arr [ k ]		73997	0					
ANR	74592	Identifier	arr		73997	0					
ANR	74593	Identifier	k		73997	1					
ANR	74594	PrimaryExpression	1		73997	1					
ANR	74595	IdentifierDeclStatement	int l = ( ax - min ) + ( bx - min ) ;	1843:4:46445:46476	73997	9	True				
ANR	74596	IdentifierDecl	l = ( ax - min ) + ( bx - min )		73997	0					
ANR	74597	IdentifierDeclType	int		73997	0					
ANR	74598	Identifier	l		73997	1					
ANR	74599	AssignmentExpression	l = ( ax - min ) + ( bx - min )		73997	2		=			
ANR	74600	Identifier	l		73997	0					
ANR	74601	AdditiveExpression	( ax - min ) + ( bx - min )		73997	1		+			
ANR	74602	AdditiveExpression	ax - min		73997	0		-			
ANR	74603	Identifier	ax		73997	0					
ANR	74604	Identifier	min		73997	1					
ANR	74605	AdditiveExpression	bx - min		73997	1		-			
ANR	74606	Identifier	bx		73997	0					
ANR	74607	Identifier	min		73997	1					
ANR	74608	IdentifierDeclStatement	int r = ( max - ax ) + ( max - bx ) ;	1844:4:46482:46513	73997	10	True				
ANR	74609	IdentifierDecl	r = ( max - ax ) + ( max - bx )		73997	0					
ANR	74610	IdentifierDeclType	int		73997	0					
ANR	74611	Identifier	r		73997	1					
ANR	74612	AssignmentExpression	r = ( max - ax ) + ( max - bx )		73997	2		=			
ANR	74613	Identifier	r		73997	0					
ANR	74614	AdditiveExpression	( max - ax ) + ( max - bx )		73997	1		+			
ANR	74615	AdditiveExpression	max - ax		73997	0		-			
ANR	74616	Identifier	max		73997	0					
ANR	74617	Identifier	ax		73997	1					
ANR	74618	AdditiveExpression	max - bx		73997	1		-			
ANR	74619	Identifier	max		73997	0					
ANR	74620	Identifier	bx		73997	1					
ANR	74621	ForStatement	for ( k = b -> layer ; k <= a -> layer ; k ++ )		73997	11					
ANR	74622	ForInit	k = b -> layer ;	1846:9:46525:46537	73997	0	True				
ANR	74623	AssignmentExpression	k = b -> layer		73997	0		=			
ANR	74624	Identifier	k		73997	0					
ANR	74625	PtrMemberAccess	b -> layer		73997	1					
ANR	74626	Identifier	b		73997	0					
ANR	74627	Identifier	layer		73997	1					
ANR	74628	Condition	k <= a -> layer	1846:23:46539:46551	73997	1	True				
ANR	74629	RelationalExpression	k <= a -> layer		73997	0		<=			
ANR	74630	Identifier	k		73997	0					
ANR	74631	PtrMemberAccess	a -> layer		73997	1					
ANR	74632	Identifier	a		73997	0					
ANR	74633	Identifier	layer		73997	1					
ANR	74634	PostIncDecOperationExpression	k ++	1846:38:46554:46556	73997	2	True				
ANR	74635	Identifier	k		73997	0					
ANR	74636	IncDec	++		73997	1					
ANR	74637	CompoundStatement		91:43:1914:1914	73997	3					
ANR	74638	IfStatement	if ( r < l )		73997	0					
ANR	74639	Condition	r < l	1847:9:46570:46574	73997	0	True				
ANR	74640	RelationalExpression	r < l		73997	0		<			
ANR	74641	Identifier	r		73997	0					
ANR	74642	Identifier	l		73997	1					
ANR	74643	CompoundStatement		92:16:1932:1932	73997	1					
ANR	74644	ExpressionStatement	arr [ k ] [ 1 ] = max + 1	1848:6:46585:46604	73997	0	True				
ANR	74645	AssignmentExpression	arr [ k ] [ 1 ] = max + 1		73997	0		=			
ANR	74646	ArrayIndexing	arr [ k ] [ 1 ]		73997	0					
ANR	74647	ArrayIndexing	arr [ k ]		73997	0					
ANR	74648	Identifier	arr		73997	0					
ANR	74649	Identifier	k		73997	1					
ANR	74650	PrimaryExpression	1		73997	1					
ANR	74651	AdditiveExpression	max + 1		73997	1		+			
ANR	74652	Identifier	max		73997	0					
ANR	74653	PrimaryExpression	1		73997	1					
ANR	74654	ElseStatement	else		73997	0					
ANR	74655	CompoundStatement		94:12:1973:1973	73997	0					
ANR	74656	ExpressionStatement	arr [ k ] [ 0 ] = min - 1	1850:6:46626:46645	73997	0	True				
ANR	74657	AssignmentExpression	arr [ k ] [ 0 ] = min - 1		73997	0		=			
ANR	74658	ArrayIndexing	arr [ k ] [ 0 ]		73997	0					
ANR	74659	ArrayIndexing	arr [ k ]		73997	0					
ANR	74660	Identifier	arr		73997	0					
ANR	74661	Identifier	k		73997	1					
ANR	74662	PrimaryExpression	0		73997	1					
ANR	74663	AdditiveExpression	min - 1		73997	1		-			
ANR	74664	Identifier	min		73997	0					
ANR	74665	PrimaryExpression	1		73997	1					
ANR	74666	IdentifierDeclStatement	AEdge * e = R_NEW0 ( AEdge ) ;	1854:4:46665:46690	73997	12	True				
ANR	74667	IdentifierDecl	* e = R_NEW0 ( AEdge )		73997	0					
ANR	74668	IdentifierDeclType	AEdge *		73997	0					
ANR	74669	Identifier	e		73997	1					
ANR	74670	AssignmentExpression	* e = R_NEW0 ( AEdge )		73997	2		=			
ANR	74671	Identifier	e		73997	0					
ANR	74672	CallExpression	R_NEW0 ( AEdge )		73997	1					
ANR	74673	Callee	R_NEW0		73997	0					
ANR	74674	Identifier	R_NEW0		73997	0					
ANR	74675	ArgumentList	AEdge		73997	1					
ANR	74676	Argument	AEdge		73997	0					
ANR	74677	Identifier	AEdge		73997	0					
ANR	74678	IfStatement	if ( ! e )		73997	13					
ANR	74679	Condition	! e	1855:8:46700:46701	73997	0	True				
ANR	74680	UnaryOperationExpression	! e		73997	0					
ANR	74681	UnaryOperator	!		73997	0					
ANR	74682	Identifier	e		73997	1					
ANR	74683	CompoundStatement		100:12:2059:2059	73997	1					
ANR	74684	ExpressionStatement	free ( arr )	1856:5:46711:46721	73997	0	True				
ANR	74685	CallExpression	free ( arr )		73997	0					
ANR	74686	Callee	free		73997	0					
ANR	74687	Identifier	free		73997	0					
ANR	74688	ArgumentList	arr		73997	1					
ANR	74689	Argument	arr		73997	0					
ANR	74690	Identifier	arr		73997	0					
ANR	74691	ReturnStatement	return ;	1857:5:46728:46734	73997	1	True				
ANR	74692	ExpressionStatement	e -> is_reversed = true	1860:4:46747:46768	73997	14	True				
ANR	74693	AssignmentExpression	e -> is_reversed = true		73997	0		=			
ANR	74694	PtrMemberAccess	e -> is_reversed		73997	0					
ANR	74695	Identifier	e		73997	0					
ANR	74696	Identifier	is_reversed		73997	1					
ANR	74697	Identifier	true		73997	1					
ANR	74698	ExpressionStatement	e -> from = a	1861:4:46774:46785	73997	15	True				
ANR	74699	AssignmentExpression	e -> from = a		73997	0		=			
ANR	74700	PtrMemberAccess	e -> from		73997	0					
ANR	74701	Identifier	e		73997	0					
ANR	74702	Identifier	from		73997	1					
ANR	74703	Identifier	a		73997	1					
ANR	74704	ExpressionStatement	e -> to = b	1862:4:46791:46800	73997	16	True				
ANR	74705	AssignmentExpression	e -> to = b		73997	0		=			
ANR	74706	PtrMemberAccess	e -> to		73997	0					
ANR	74707	Identifier	e		73997	0					
ANR	74708	Identifier	to		73997	1					
ANR	74709	Identifier	b		73997	1					
ANR	74710	ExpressionStatement	e -> x = r_list_new ( )	1863:4:46806:46826	73997	17	True				
ANR	74711	AssignmentExpression	e -> x = r_list_new ( )		73997	0		=			
ANR	74712	PtrMemberAccess	e -> x		73997	0					
ANR	74713	Identifier	e		73997	0					
ANR	74714	Identifier	x		73997	1					
ANR	74715	CallExpression	r_list_new ( )		73997	1					
ANR	74716	Callee	r_list_new		73997	0					
ANR	74717	Identifier	r_list_new		73997	0					
ANR	74718	ArgumentList			73997	1					
ANR	74719	ExpressionStatement	e -> y = r_list_new ( )	1864:4:46832:46852	73997	18	True				
ANR	74720	AssignmentExpression	e -> y = r_list_new ( )		73997	0		=			
ANR	74721	PtrMemberAccess	e -> y		73997	0					
ANR	74722	Identifier	e		73997	0					
ANR	74723	Identifier	y		73997	1					
ANR	74724	CallExpression	r_list_new ( )		73997	1					
ANR	74725	Callee	r_list_new		73997	0					
ANR	74726	Identifier	r_list_new		73997	0					
ANR	74727	ArgumentList			73997	1					
ANR	74728	IfStatement	if ( r < l )		73997	19					
ANR	74729	Condition	r < l	1866:8:46863:46867	73997	0	True				
ANR	74730	RelationalExpression	r < l		73997	0		<			
ANR	74731	Identifier	r		73997	0					
ANR	74732	Identifier	l		73997	1					
ANR	74733	CompoundStatement		111:15:2225:2225	73997	1					
ANR	74734	ExpressionStatement	"r_list_append ( ( g -> layout == 0 ? e -> x : e -> y ) , ( void * ) ( size_t ) ( max + 1 ) )"	1867:5:46877:46952	73997	0	True				
ANR	74735	CallExpression	"r_list_append ( ( g -> layout == 0 ? e -> x : e -> y ) , ( void * ) ( size_t ) ( max + 1 ) )"		73997	0					
ANR	74736	Callee	r_list_append		73997	0					
ANR	74737	Identifier	r_list_append		73997	0					
ANR	74738	ArgumentList	g -> layout == 0 ? e -> x : e -> y		73997	1					
ANR	74739	Argument	g -> layout == 0 ? e -> x : e -> y		73997	0					
ANR	74740	ConditionalExpression	g -> layout == 0 ? e -> x : e -> y		73997	0					
ANR	74741	Condition	g -> layout == 0		73997	0					
ANR	74742	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74743	PtrMemberAccess	g -> layout		73997	0					
ANR	74744	Identifier	g		73997	0					
ANR	74745	Identifier	layout		73997	1					
ANR	74746	PrimaryExpression	0		73997	1					
ANR	74747	PtrMemberAccess	e -> x		73997	1					
ANR	74748	Identifier	e		73997	0					
ANR	74749	Identifier	x		73997	1					
ANR	74750	PtrMemberAccess	e -> y		73997	2					
ANR	74751	Identifier	e		73997	0					
ANR	74752	Identifier	y		73997	1					
ANR	74753	Argument	( void * ) ( size_t ) ( max + 1 )		73997	1					
ANR	74754	CastExpression	( void * ) ( size_t ) ( max + 1 )		73997	0					
ANR	74755	CastTarget	void *		73997	0					
ANR	74756	CastExpression	( size_t ) ( max + 1 )		73997	1					
ANR	74757	CastTarget	size_t		73997	0					
ANR	74758	AdditiveExpression	max + 1		73997	1		+			
ANR	74759	Identifier	max		73997	0					
ANR	74760	PrimaryExpression	1		73997	1					
ANR	74761	ElseStatement	else		73997	0					
ANR	74762	CompoundStatement		113:11:2320:2320	73997	0					
ANR	74763	ExpressionStatement	"r_list_append ( ( g -> layout == 0 ? e -> x : e -> y ) , ( void * ) ( size_t ) ( min - 1 ) )"	1869:5:46972:47047	73997	0	True				
ANR	74764	CallExpression	"r_list_append ( ( g -> layout == 0 ? e -> x : e -> y ) , ( void * ) ( size_t ) ( min - 1 ) )"		73997	0					
ANR	74765	Callee	r_list_append		73997	0					
ANR	74766	Identifier	r_list_append		73997	0					
ANR	74767	ArgumentList	g -> layout == 0 ? e -> x : e -> y		73997	1					
ANR	74768	Argument	g -> layout == 0 ? e -> x : e -> y		73997	0					
ANR	74769	ConditionalExpression	g -> layout == 0 ? e -> x : e -> y		73997	0					
ANR	74770	Condition	g -> layout == 0		73997	0					
ANR	74771	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74772	PtrMemberAccess	g -> layout		73997	0					
ANR	74773	Identifier	g		73997	0					
ANR	74774	Identifier	layout		73997	1					
ANR	74775	PrimaryExpression	0		73997	1					
ANR	74776	PtrMemberAccess	e -> x		73997	1					
ANR	74777	Identifier	e		73997	0					
ANR	74778	Identifier	x		73997	1					
ANR	74779	PtrMemberAccess	e -> y		73997	2					
ANR	74780	Identifier	e		73997	0					
ANR	74781	Identifier	y		73997	1					
ANR	74782	Argument	( void * ) ( size_t ) ( min - 1 )		73997	1					
ANR	74783	CastExpression	( void * ) ( size_t ) ( min - 1 )		73997	0					
ANR	74784	CastTarget	void *		73997	0					
ANR	74785	CastExpression	( size_t ) ( min - 1 )		73997	1					
ANR	74786	CastTarget	size_t		73997	0					
ANR	74787	AdditiveExpression	min - 1		73997	1		-			
ANR	74788	Identifier	min		73997	0					
ANR	74789	PrimaryExpression	1		73997	1					
ANR	74790	ExpressionStatement	"r_list_append ( g -> edges , e )"	1872:4:47060:47086	73997	20	True				
ANR	74791	CallExpression	"r_list_append ( g -> edges , e )"		73997	0					
ANR	74792	Callee	r_list_append		73997	0					
ANR	74793	Identifier	r_list_append		73997	0					
ANR	74794	ArgumentList	g -> edges		73997	1					
ANR	74795	Argument	g -> edges		73997	0					
ANR	74796	PtrMemberAccess	g -> edges		73997	0					
ANR	74797	Identifier	g		73997	0					
ANR	74798	Identifier	edges		73997	1					
ANR	74799	Argument	e		73997	1					
ANR	74800	Identifier	e		73997	0					
ANR	74801	IfStatement	if ( inedge )		73997	22					
ANR	74802	Condition	inedge	1878:5:47226:47231	73997	0	True				
ANR	74803	Identifier	inedge		73997	0					
ANR	74804	CompoundStatement		125:2:2646:2671	73997	1					
ANR	74805	IdentifierDeclStatement	RANode * n = ( RANode * ) g -> layers [ 0 ] . nodes [ 0 ] -> data ;	1879:2:47238:47287	73997	0	True				
ANR	74806	IdentifierDecl	* n = ( RANode * ) g -> layers [ 0 ] . nodes [ 0 ] -> data		73997	0					
ANR	74807	IdentifierDeclType	RANode *		73997	0					
ANR	74808	Identifier	n		73997	1					
ANR	74809	AssignmentExpression	* n = ( RANode * ) g -> layers [ 0 ] . nodes [ 0 ] -> data		73997	2		=			
ANR	74810	Identifier	n		73997	0					
ANR	74811	CastExpression	( RANode * ) g -> layers [ 0 ] . nodes [ 0 ] -> data		73997	1					
ANR	74812	CastTarget	RANode *		73997	0					
ANR	74813	PtrMemberAccess	g -> layers [ 0 ] . nodes [ 0 ] -> data		73997	1					
ANR	74814	ArrayIndexing	g -> layers [ 0 ] . nodes [ 0 ]		73997	0					
ANR	74815	MemberAccess	g -> layers [ 0 ] . nodes		73997	0					
ANR	74816	ArrayIndexing	g -> layers [ 0 ]		73997	0					
ANR	74817	PtrMemberAccess	g -> layers		73997	0					
ANR	74818	Identifier	g		73997	0					
ANR	74819	Identifier	layers		73997	1					
ANR	74820	PrimaryExpression	0		73997	1					
ANR	74821	Identifier	nodes		73997	1					
ANR	74822	PrimaryExpression	0		73997	1					
ANR	74823	Identifier	data		73997	1					
ANR	74824	IdentifierDeclStatement	AEdge * e = R_NEW0 ( AEdge ) ;	1880:2:47291:47316	73997	1	True				
ANR	74825	IdentifierDecl	* e = R_NEW0 ( AEdge )		73997	0					
ANR	74826	IdentifierDeclType	AEdge *		73997	0					
ANR	74827	Identifier	e		73997	1					
ANR	74828	AssignmentExpression	* e = R_NEW0 ( AEdge )		73997	2		=			
ANR	74829	Identifier	e		73997	0					
ANR	74830	CallExpression	R_NEW0 ( AEdge )		73997	1					
ANR	74831	Callee	R_NEW0		73997	0					
ANR	74832	Identifier	R_NEW0		73997	0					
ANR	74833	ArgumentList	AEdge		73997	1					
ANR	74834	Argument	AEdge		73997	0					
ANR	74835	Identifier	AEdge		73997	0					
ANR	74836	IfStatement	if ( ! e )		73997	2					
ANR	74837	Condition	! e	1881:6:47324:47325	73997	0	True				
ANR	74838	UnaryOperationExpression	! e		73997	0					
ANR	74839	UnaryOperator	!		73997	0					
ANR	74840	Identifier	e		73997	1					
ANR	74841	CompoundStatement		126:10:2683:2683	73997	1					
ANR	74842	ExpressionStatement	free ( arr )	1882:3:47333:47343	73997	0	True				
ANR	74843	CallExpression	free ( arr )		73997	0					
ANR	74844	Callee	free		73997	0					
ANR	74845	Identifier	free		73997	0					
ANR	74846	ArgumentList	arr		73997	1					
ANR	74847	Argument	arr		73997	0					
ANR	74848	Identifier	arr		73997	0					
ANR	74849	ReturnStatement	return ;	1883:3:47348:47354	73997	1	True				
ANR	74850	ExpressionStatement	e -> is_reversed = true	1885:2:47362:47383	73997	3	True				
ANR	74851	AssignmentExpression	e -> is_reversed = true		73997	0		=			
ANR	74852	PtrMemberAccess	e -> is_reversed		73997	0					
ANR	74853	Identifier	e		73997	0					
ANR	74854	Identifier	is_reversed		73997	1					
ANR	74855	Identifier	true		73997	1					
ANR	74856	ExpressionStatement	e -> from = NULL	1886:2:47387:47401	73997	4	True				
ANR	74857	AssignmentExpression	e -> from = NULL		73997	0		=			
ANR	74858	PtrMemberAccess	e -> from		73997	0					
ANR	74859	Identifier	e		73997	0					
ANR	74860	Identifier	from		73997	1					
ANR	74861	Identifier	NULL		73997	1					
ANR	74862	ExpressionStatement	e -> to = NULL	1887:2:47405:47417	73997	5	True				
ANR	74863	AssignmentExpression	e -> to = NULL		73997	0		=			
ANR	74864	PtrMemberAccess	e -> to		73997	0					
ANR	74865	Identifier	e		73997	0					
ANR	74866	Identifier	to		73997	1					
ANR	74867	Identifier	NULL		73997	1					
ANR	74868	ExpressionStatement	e -> x = r_list_new ( )	1888:2:47421:47441	73997	6	True				
ANR	74869	AssignmentExpression	e -> x = r_list_new ( )		73997	0		=			
ANR	74870	PtrMemberAccess	e -> x		73997	0					
ANR	74871	Identifier	e		73997	0					
ANR	74872	Identifier	x		73997	1					
ANR	74873	CallExpression	r_list_new ( )		73997	1					
ANR	74874	Callee	r_list_new		73997	0					
ANR	74875	Identifier	r_list_new		73997	0					
ANR	74876	ArgumentList			73997	1					
ANR	74877	ExpressionStatement	e -> y = r_list_new ( )	1889:2:47445:47465	73997	7	True				
ANR	74878	AssignmentExpression	e -> y = r_list_new ( )		73997	0		=			
ANR	74879	PtrMemberAccess	e -> y		73997	0					
ANR	74880	Identifier	e		73997	0					
ANR	74881	Identifier	y		73997	1					
ANR	74882	CallExpression	r_list_new ( )		73997	1					
ANR	74883	Callee	r_list_new		73997	0					
ANR	74884	Identifier	r_list_new		73997	0					
ANR	74885	ArgumentList			73997	1					
ANR	74886	IfStatement	if ( g -> layout == 0 )		73997	8					
ANR	74887	Condition	g -> layout == 0	1890:6:47473:47486	73997	0	True				
ANR	74888	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	74889	PtrMemberAccess	g -> layout		73997	0					
ANR	74890	Identifier	g		73997	0					
ANR	74891	Identifier	layout		73997	1					
ANR	74892	PrimaryExpression	0		73997	1					
ANR	74893	CompoundStatement		135:22:2844:2844	73997	1					
ANR	74894	ExpressionStatement	"r_list_append ( e -> y , ( void * ) ( size_t ) ( n -> y - 1 - inedge ) )"	1891:3:47494:47553	73997	0	True				
ANR	74895	CallExpression	"r_list_append ( e -> y , ( void * ) ( size_t ) ( n -> y - 1 - inedge ) )"		73997	0					
ANR	74896	Callee	r_list_append		73997	0					
ANR	74897	Identifier	r_list_append		73997	0					
ANR	74898	ArgumentList	e -> y		73997	1					
ANR	74899	Argument	e -> y		73997	0					
ANR	74900	PtrMemberAccess	e -> y		73997	0					
ANR	74901	Identifier	e		73997	0					
ANR	74902	Identifier	y		73997	1					
ANR	74903	Argument	( void * ) ( size_t ) ( n -> y - 1 - inedge )		73997	1					
ANR	74904	CastExpression	( void * ) ( size_t ) ( n -> y - 1 - inedge )		73997	0					
ANR	74905	CastTarget	void *		73997	0					
ANR	74906	CastExpression	( size_t ) ( n -> y - 1 - inedge )		73997	1					
ANR	74907	CastTarget	size_t		73997	0					
ANR	74908	AdditiveExpression	n -> y - 1 - inedge		73997	1		-			
ANR	74909	PtrMemberAccess	n -> y		73997	0					
ANR	74910	Identifier	n		73997	0					
ANR	74911	Identifier	y		73997	1					
ANR	74912	AdditiveExpression	1 - inedge		73997	1		-			
ANR	74913	PrimaryExpression	1		73997	0					
ANR	74914	Identifier	inedge		73997	1					
ANR	74915	ElseStatement	else		73997	0					
ANR	74916	CompoundStatement		137:9:2919:2919	73997	0					
ANR	74917	ExpressionStatement	"r_list_append ( e -> x , ( void * ) ( size_t ) ( n -> x - 1 - inedge ) )"	1893:3:47569:47628	73997	0	True				
ANR	74918	CallExpression	"r_list_append ( e -> x , ( void * ) ( size_t ) ( n -> x - 1 - inedge ) )"		73997	0					
ANR	74919	Callee	r_list_append		73997	0					
ANR	74920	Identifier	r_list_append		73997	0					
ANR	74921	ArgumentList	e -> x		73997	1					
ANR	74922	Argument	e -> x		73997	0					
ANR	74923	PtrMemberAccess	e -> x		73997	0					
ANR	74924	Identifier	e		73997	0					
ANR	74925	Identifier	x		73997	1					
ANR	74926	Argument	( void * ) ( size_t ) ( n -> x - 1 - inedge )		73997	1					
ANR	74927	CastExpression	( void * ) ( size_t ) ( n -> x - 1 - inedge )		73997	0					
ANR	74928	CastTarget	void *		73997	0					
ANR	74929	CastExpression	( size_t ) ( n -> x - 1 - inedge )		73997	1					
ANR	74930	CastTarget	size_t		73997	0					
ANR	74931	AdditiveExpression	n -> x - 1 - inedge		73997	1		-			
ANR	74932	PtrMemberAccess	n -> x		73997	0					
ANR	74933	Identifier	n		73997	0					
ANR	74934	Identifier	x		73997	1					
ANR	74935	AdditiveExpression	1 - inedge		73997	1		-			
ANR	74936	PrimaryExpression	1		73997	0					
ANR	74937	Identifier	inedge		73997	1					
ANR	74938	ExpressionStatement	"r_list_append ( g -> edges , e )"	1895:2:47636:47663	73997	9	True				
ANR	74939	CallExpression	"r_list_append ( g -> edges , e )"		73997	0					
ANR	74940	Callee	r_list_append		73997	0					
ANR	74941	Identifier	r_list_append		73997	0					
ANR	74942	ArgumentList	g -> edges		73997	1					
ANR	74943	Argument	g -> edges		73997	0					
ANR	74944	PtrMemberAccess	g -> edges		73997	0					
ANR	74945	Identifier	g		73997	0					
ANR	74946	Identifier	edges		73997	1					
ANR	74947	Argument	e		73997	1					
ANR	74948	Identifier	e		73997	0					
ANR	74949	IfStatement	if ( outedge )		73997	23					
ANR	74950	Condition	outedge	1898:5:47674:47680	73997	0	True				
ANR	74951	Identifier	outedge		73997	0					
ANR	74952	CompoundStatement		145:2:3109:3134	73997	1					
ANR	74953	IdentifierDeclStatement	RANode * n = ( RANode * ) g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data ;	1899:2:47687:47750	73997	0	True				
ANR	74954	IdentifierDecl	* n = ( RANode * ) g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data		73997	0					
ANR	74955	IdentifierDeclType	RANode *		73997	0					
ANR	74956	Identifier	n		73997	1					
ANR	74957	AssignmentExpression	* n = ( RANode * ) g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data		73997	2		=			
ANR	74958	Identifier	n		73997	0					
ANR	74959	CastExpression	( RANode * ) g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data		73997	1					
ANR	74960	CastTarget	RANode *		73997	0					
ANR	74961	PtrMemberAccess	g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data		73997	1					
ANR	74962	ArrayIndexing	g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ]		73997	0					
ANR	74963	MemberAccess	g -> layers [ g -> n_layers - 1 ] . nodes		73997	0					
ANR	74964	ArrayIndexing	g -> layers [ g -> n_layers - 1 ]		73997	0					
ANR	74965	PtrMemberAccess	g -> layers		73997	0					
ANR	74966	Identifier	g		73997	0					
ANR	74967	Identifier	layers		73997	1					
ANR	74968	AdditiveExpression	g -> n_layers - 1		73997	1		-			
ANR	74969	PtrMemberAccess	g -> n_layers		73997	0					
ANR	74970	Identifier	g		73997	0					
ANR	74971	Identifier	n_layers		73997	1					
ANR	74972	PrimaryExpression	1		73997	1					
ANR	74973	Identifier	nodes		73997	1					
ANR	74974	PrimaryExpression	0		73997	1					
ANR	74975	Identifier	data		73997	1					
ANR	74976	IdentifierDeclStatement	AEdge * e = R_NEW0 ( AEdge ) ;	1900:2:47754:47779	73997	1	True				
ANR	74977	IdentifierDecl	* e = R_NEW0 ( AEdge )		73997	0					
ANR	74978	IdentifierDeclType	AEdge *		73997	0					
ANR	74979	Identifier	e		73997	1					
ANR	74980	AssignmentExpression	* e = R_NEW0 ( AEdge )		73997	2		=			
ANR	74981	Identifier	e		73997	0					
ANR	74982	CallExpression	R_NEW0 ( AEdge )		73997	1					
ANR	74983	Callee	R_NEW0		73997	0					
ANR	74984	Identifier	R_NEW0		73997	0					
ANR	74985	ArgumentList	AEdge		73997	1					
ANR	74986	Argument	AEdge		73997	0					
ANR	74987	Identifier	AEdge		73997	0					
ANR	74988	IfStatement	if ( ! e )		73997	2					
ANR	74989	Condition	! e	1901:6:47787:47788	73997	0	True				
ANR	74990	UnaryOperationExpression	! e		73997	0					
ANR	74991	UnaryOperator	!		73997	0					
ANR	74992	Identifier	e		73997	1					
ANR	74993	CompoundStatement		146:10:3146:3146	73997	1					
ANR	74994	ExpressionStatement	free ( arr )	1902:3:47796:47806	73997	0	True				
ANR	74995	CallExpression	free ( arr )		73997	0					
ANR	74996	Callee	free		73997	0					
ANR	74997	Identifier	free		73997	0					
ANR	74998	ArgumentList	arr		73997	1					
ANR	74999	Argument	arr		73997	0					
ANR	75000	Identifier	arr		73997	0					
ANR	75001	ReturnStatement	return ;	1903:3:47811:47817	73997	1	True				
ANR	75002	ExpressionStatement	e -> is_reversed = true	1906:2:47826:47847	73997	3	True				
ANR	75003	AssignmentExpression	e -> is_reversed = true		73997	0		=			
ANR	75004	PtrMemberAccess	e -> is_reversed		73997	0					
ANR	75005	Identifier	e		73997	0					
ANR	75006	Identifier	is_reversed		73997	1					
ANR	75007	Identifier	true		73997	1					
ANR	75008	ExpressionStatement	e -> from = NULL	1907:2:47851:47865	73997	4	True				
ANR	75009	AssignmentExpression	e -> from = NULL		73997	0		=			
ANR	75010	PtrMemberAccess	e -> from		73997	0					
ANR	75011	Identifier	e		73997	0					
ANR	75012	Identifier	from		73997	1					
ANR	75013	Identifier	NULL		73997	1					
ANR	75014	ExpressionStatement	e -> to = NULL	1908:2:47869:47881	73997	5	True				
ANR	75015	AssignmentExpression	e -> to = NULL		73997	0		=			
ANR	75016	PtrMemberAccess	e -> to		73997	0					
ANR	75017	Identifier	e		73997	0					
ANR	75018	Identifier	to		73997	1					
ANR	75019	Identifier	NULL		73997	1					
ANR	75020	ExpressionStatement	e -> x = r_list_new ( )	1909:2:47885:47905	73997	6	True				
ANR	75021	AssignmentExpression	e -> x = r_list_new ( )		73997	0		=			
ANR	75022	PtrMemberAccess	e -> x		73997	0					
ANR	75023	Identifier	e		73997	0					
ANR	75024	Identifier	x		73997	1					
ANR	75025	CallExpression	r_list_new ( )		73997	1					
ANR	75026	Callee	r_list_new		73997	0					
ANR	75027	Identifier	r_list_new		73997	0					
ANR	75028	ArgumentList			73997	1					
ANR	75029	ExpressionStatement	e -> y = r_list_new ( )	1910:2:47909:47929	73997	7	True				
ANR	75030	AssignmentExpression	e -> y = r_list_new ( )		73997	0		=			
ANR	75031	PtrMemberAccess	e -> y		73997	0					
ANR	75032	Identifier	e		73997	0					
ANR	75033	Identifier	y		73997	1					
ANR	75034	CallExpression	r_list_new ( )		73997	1					
ANR	75035	Callee	r_list_new		73997	0					
ANR	75036	Identifier	r_list_new		73997	0					
ANR	75037	ArgumentList			73997	1					
ANR	75038	IfStatement	if ( g -> layout == 0 )		73997	8					
ANR	75039	Condition	g -> layout == 0	1911:6:47937:47950	73997	0	True				
ANR	75040	EqualityExpression	g -> layout == 0		73997	0		==			
ANR	75041	PtrMemberAccess	g -> layout		73997	0					
ANR	75042	Identifier	g		73997	0					
ANR	75043	Identifier	layout		73997	1					
ANR	75044	PrimaryExpression	0		73997	1					
ANR	75045	CompoundStatement		156:22:3308:3308	73997	1					
ANR	75046	ExpressionStatement	"r_list_append ( e -> y , ( void * ) ( size_t ) ( n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge ) )"	1912:3:47958:48054	73997	0	True				
ANR	75047	CallExpression	"r_list_append ( e -> y , ( void * ) ( size_t ) ( n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge ) )"		73997	0					
ANR	75048	Callee	r_list_append		73997	0					
ANR	75049	Identifier	r_list_append		73997	0					
ANR	75050	ArgumentList	e -> y		73997	1					
ANR	75051	Argument	e -> y		73997	0					
ANR	75052	PtrMemberAccess	e -> y		73997	0					
ANR	75053	Identifier	e		73997	0					
ANR	75054	Identifier	y		73997	1					
ANR	75055	Argument	( void * ) ( size_t ) ( n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge )		73997	1					
ANR	75056	CastExpression	( void * ) ( size_t ) ( n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge )		73997	0					
ANR	75057	CastTarget	void *		73997	0					
ANR	75058	CastExpression	( size_t ) ( n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge )		73997	1					
ANR	75059	CastTarget	size_t		73997	0					
ANR	75060	AdditiveExpression	n -> y + g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge		73997	1		+			
ANR	75061	PtrMemberAccess	n -> y		73997	0					
ANR	75062	Identifier	n		73997	0					
ANR	75063	Identifier	y		73997	1					
ANR	75064	AdditiveExpression	g -> layers [ g -> n_layers - 1 ] . height + 2 + outedge		73997	1		+			
ANR	75065	MemberAccess	g -> layers [ g -> n_layers - 1 ] . height		73997	0					
ANR	75066	ArrayIndexing	g -> layers [ g -> n_layers - 1 ]		73997	0					
ANR	75067	PtrMemberAccess	g -> layers		73997	0					
ANR	75068	Identifier	g		73997	0					
ANR	75069	Identifier	layers		73997	1					
ANR	75070	AdditiveExpression	g -> n_layers - 1		73997	1		-			
ANR	75071	PtrMemberAccess	g -> n_layers		73997	0					
ANR	75072	Identifier	g		73997	0					
ANR	75073	Identifier	n_layers		73997	1					
ANR	75074	PrimaryExpression	1		73997	1					
ANR	75075	Identifier	height		73997	1					
ANR	75076	AdditiveExpression	2 + outedge		73997	1		+			
ANR	75077	PrimaryExpression	2		73997	0					
ANR	75078	Identifier	outedge		73997	1					
ANR	75079	ElseStatement	else		73997	0					
ANR	75080	CompoundStatement		158:9:3420:3420	73997	0					
ANR	75081	ExpressionStatement	"r_list_append ( e -> x , ( void * ) ( size_t ) ( n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge ) )"	1914:3:48070:48165	73997	0	True				
ANR	75082	CallExpression	"r_list_append ( e -> x , ( void * ) ( size_t ) ( n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge ) )"		73997	0					
ANR	75083	Callee	r_list_append		73997	0					
ANR	75084	Identifier	r_list_append		73997	0					
ANR	75085	ArgumentList	e -> x		73997	1					
ANR	75086	Argument	e -> x		73997	0					
ANR	75087	PtrMemberAccess	e -> x		73997	0					
ANR	75088	Identifier	e		73997	0					
ANR	75089	Identifier	x		73997	1					
ANR	75090	Argument	( void * ) ( size_t ) ( n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge )		73997	1					
ANR	75091	CastExpression	( void * ) ( size_t ) ( n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge )		73997	0					
ANR	75092	CastTarget	void *		73997	0					
ANR	75093	CastExpression	( size_t ) ( n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge )		73997	1					
ANR	75094	CastTarget	size_t		73997	0					
ANR	75095	AdditiveExpression	n -> x + g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge		73997	1		+			
ANR	75096	PtrMemberAccess	n -> x		73997	0					
ANR	75097	Identifier	n		73997	0					
ANR	75098	Identifier	x		73997	1					
ANR	75099	AdditiveExpression	g -> layers [ g -> n_layers - 1 ] . width + 2 + outedge		73997	1		+			
ANR	75100	MemberAccess	g -> layers [ g -> n_layers - 1 ] . width		73997	0					
ANR	75101	ArrayIndexing	g -> layers [ g -> n_layers - 1 ]		73997	0					
ANR	75102	PtrMemberAccess	g -> layers		73997	0					
ANR	75103	Identifier	g		73997	0					
ANR	75104	Identifier	layers		73997	1					
ANR	75105	AdditiveExpression	g -> n_layers - 1		73997	1		-			
ANR	75106	PtrMemberAccess	g -> n_layers		73997	0					
ANR	75107	Identifier	g		73997	0					
ANR	75108	Identifier	n_layers		73997	1					
ANR	75109	PrimaryExpression	1		73997	1					
ANR	75110	Identifier	width		73997	1					
ANR	75111	AdditiveExpression	2 + outedge		73997	1		+			
ANR	75112	PrimaryExpression	2		73997	0					
ANR	75113	Identifier	outedge		73997	1					
ANR	75114	ExpressionStatement	"r_list_append ( g -> edges , e )"	1916:2:48173:48200	73997	9	True				
ANR	75115	CallExpression	"r_list_append ( g -> edges , e )"		73997	0					
ANR	75116	Callee	r_list_append		73997	0					
ANR	75117	Identifier	r_list_append		73997	0					
ANR	75118	ArgumentList	g -> edges		73997	1					
ANR	75119	Argument	g -> edges		73997	0					
ANR	75120	PtrMemberAccess	g -> edges		73997	0					
ANR	75121	Identifier	g		73997	0					
ANR	75122	Identifier	edges		73997	1					
ANR	75123	Argument	e		73997	1					
ANR	75124	Identifier	e		73997	0					
ANR	75125	Label	err :	1918:1:48206:48209	73997	24	True				
ANR	75126	Identifier	err		73997	0					
ANR	75127	ForStatement	for ( i = i - 1 ; i >= 0 ; i -- )		73997	25					
ANR	75128	ForInit	i = i - 1 ;	1919:6:48217:48226	73997	0	True				
ANR	75129	AssignmentExpression	i = i - 1		73997	0		=			
ANR	75130	Identifier	i		73997	0					
ANR	75131	AdditiveExpression	i - 1		73997	1		-			
ANR	75132	Identifier	i		73997	0					
ANR	75133	PrimaryExpression	1		73997	1					
ANR	75134	Condition	i >= 0	1919:17:48228:48233	73997	1	True				
ANR	75135	RelationalExpression	i >= 0		73997	0		>=			
ANR	75136	Identifier	i		73997	0					
ANR	75137	PrimaryExpression	0		73997	1					
ANR	75138	PostIncDecOperationExpression	i --	1919:25:48236:48238	73997	2	True				
ANR	75139	Identifier	i		73997	0					
ANR	75140	IncDec	--		73997	1					
ANR	75141	CompoundStatement		164:30:3596:3596	73997	3					
ANR	75142	ExpressionStatement	free ( arr [ i ] )	1920:2:48245:48258	73997	0	True				
ANR	75143	CallExpression	free ( arr [ i ] )		73997	0					
ANR	75144	Callee	free		73997	0					
ANR	75145	Identifier	free		73997	0					
ANR	75146	ArgumentList	arr [ i ]		73997	1					
ANR	75147	Argument	arr [ i ]		73997	0					
ANR	75148	ArrayIndexing	arr [ i ]		73997	0					
ANR	75149	Identifier	arr		73997	0					
ANR	75150	Identifier	i		73997	1					
ANR	75151	ExpressionStatement	free ( arr )	1922:1:48264:48274	73997	26	True				
ANR	75152	CallExpression	free ( arr )		73997	0					
ANR	75153	Callee	free		73997	0					
ANR	75154	Identifier	free		73997	0					
ANR	75155	ArgumentList	arr		73997	1					
ANR	75156	Argument	arr		73997	0					
ANR	75157	Identifier	arr		73997	0					
ANR	75158	ReturnStatement	return ;	1923:1:48277:48283	73997	27	True				
ANR	75159	ReturnType	static void		73997	1					
ANR	75160	Identifier	backedge_info		73997	2					
ANR	75161	ParameterList	RAGraph * g		73997	3					
ANR	75162	Parameter	RAGraph * g	1756:27:44632:44641	73997	0	True				
ANR	75163	ParameterType	RAGraph *		73997	0					
ANR	75164	Identifier	g		73997	1					
ANR	75165	CFGEntryNode	ENTRY		73997		True				
ANR	75166	CFGExitNode	EXIT		73997		True				
ANR	75167	Symbol	outedge		73997						
ANR	75168	Symbol	inedge		73997						
ANR	75169	Symbol	g -> n_layers		73997						
ANR	75170	Symbol	g -> edges		73997						
ANR	75171	Symbol	g -> layers [ 0 ] . nodes [ 0 ] -> data		73997						
ANR	75172	Symbol	* * * g -> n_layers		73997						
ANR	75173	Symbol	* g -> n_layers		73997						
ANR	75174	Symbol	AEdge		73997						
ANR	75175	Symbol	t -> h		73997						
ANR	75176	Symbol	* * b -> layer		73997						
ANR	75177	Symbol	R_NEW0		73997						
ANR	75178	Symbol	e -> is_reversed		73997						
ANR	75179	Symbol	g -> layers [ g -> n_layers - 1 ] . width		73997						
ANR	75180	Symbol	* arr		73997						
ANR	75181	Symbol	* * arr		73997						
ANR	75182	Symbol	ax		73997						
ANR	75183	Symbol	* g -> layers		73997						
ANR	75184	Symbol	* * * g		73997						
ANR	75185	Symbol	t -> y		73997						
ANR	75186	Symbol	t -> w		73997						
ANR	75187	Symbol	t -> x		73997						
ANR	75188	Symbol	* * * b		73997						
ANR	75189	Symbol	r_graph_get_neighbours		73997						
ANR	75190	Symbol	a -> h		73997						
ANR	75191	Symbol	* * g -> n_layers		73997						
ANR	75192	Symbol	min		73997						
ANR	75193	Symbol	g -> graph		73997						
ANR	75194	Symbol	bx		73997						
ANR	75195	Symbol	count_edges		73997						
ANR	75196	Symbol	* * * g -> layers		73997						
ANR	75197	Symbol	xinc		73997						
ANR	75198	Symbol	arr		73997						
ANR	75199	Symbol	a		73997						
ANR	75200	Symbol	b		73997						
ANR	75201	Symbol	nth		73997						
ANR	75202	Symbol	* * g -> layers [ 0 ] . nodes		73997						
ANR	75203	Symbol	g -> layout		73997						
ANR	75204	Symbol	max		73997						
ANR	75205	Symbol	e		73997						
ANR	75206	Symbol	g		73997						
ANR	75207	Symbol	i		73997						
ANR	75208	Symbol	j		73997						
ANR	75209	Symbol	neighbours		73997						
ANR	75210	Symbol	k		73997						
ANR	75211	Symbol	l		73997						
ANR	75212	Symbol	gt -> data		73997						
ANR	75213	Symbol	n		73997						
ANR	75214	Symbol	tc		73997						
ANR	75215	Symbol	a -> layer		73997						
ANR	75216	Symbol	r		73997						
ANR	75217	Symbol	t		73997						
ANR	75218	Symbol	a -> x		73997						
ANR	75219	Symbol	a -> y		73997						
ANR	75220	Symbol	tl		73997						
ANR	75221	Symbol	g -> layers [ i ] . n_nodes		73997						
ANR	75222	Symbol	g -> layers		73997						
ANR	75223	Symbol	* * g -> layers		73997						
ANR	75224	Symbol	r_list_length		73997						
ANR	75225	Symbol	* * g -> layers [ g -> n_layers - 1 ] . nodes		73997						
ANR	75226	Symbol	* * * * g		73997						
ANR	75227	Symbol	e -> y		73997						
ANR	75228	Symbol	e -> x		73997						
ANR	75229	Symbol	* g -> layers [ i ] . nodes		73997						
ANR	75230	Symbol	b -> layer		73997						
ANR	75231	Symbol	g -> layers [ g -> n_layers - 1 ] . nodes [ 0 ] -> data		73997						
ANR	75232	Symbol	* * k		73997						
ANR	75233	Symbol	* g -> layers [ g -> n_layers - 1 ] . nodes		73997						
ANR	75234	Symbol	* * i		73997						
ANR	75235	Symbol	a -> is_dummy		73997						
ANR	75236	Symbol	itm		73997						
ANR	75237	Symbol	e -> from		73997						
ANR	75238	Symbol	NULL		73997						
ANR	75239	Symbol	* * g		73997						
ANR	75240	Symbol	b -> h		73997						
ANR	75241	Symbol	* * b		73997						
ANR	75242	Symbol	a -> gnode		73997						
ANR	75243	Symbol	* b -> layer		73997						
ANR	75244	Symbol	* gt		73997						
ANR	75245	Symbol	n -> y		73997						
ANR	75246	Symbol	n -> x		73997						
ANR	75247	Symbol	g -> layers [ g -> n_layers - 1 ] . height		73997						
ANR	75248	Symbol	true		73997						
ANR	75249	Symbol	* g -> layers [ 0 ] . nodes		73997						
ANR	75250	Symbol	g -> layers [ 0 ] . nodes		73997						
ANR	75251	Symbol	e -> to		73997						
ANR	75252	Symbol	g -> layers [ g -> n_layers - 1 ] . nodes		73997						
ANR	75253	Symbol	r_graph_innodes		73997						
ANR	75254	Symbol	g -> layers [ i ] . nodes		73997						
ANR	75255	Symbol	b -> x		73997						
ANR	75256	Symbol	R_NEWS0		73997						
ANR	75257	Symbol	gb		73997						
ANR	75258	Symbol	b -> y		73997						
ANR	75259	Symbol	R_EDGES_X_INC		73997						
ANR	75260	Symbol	get_anode		73997						
ANR	75261	Symbol	* a		73997						
ANR	75262	Symbol	* b		73997						
ANR	75263	Symbol	gt		73997						
ANR	75264	Symbol	int		73997						
ANR	75265	Symbol	* e		73997						
ANR	75266	Symbol	* g		73997						
ANR	75267	Symbol	* i		73997						
ANR	75268	Symbol	* j		73997						
ANR	75269	Symbol	* k		73997						
ANR	75270	Symbol	* n		73997						
ANR	75271	Symbol	* t		73997						
ANR	75272	Symbol	r_list_new		73997						
ANR	75273	Function	set_layout	1932:0:48595:52127							
ANR	75274	FunctionDef	set_layout (RAGraph * g)		75273	0					
ANR	75275	CompoundStatement		1932:35:48630:52127	75273	0					
ANR	75276	IdentifierDeclStatement	"int i , j , k ;"	1933:1:48633:48644	75273	0	True				
ANR	75277	IdentifierDecl	i		75273	0					
ANR	75278	IdentifierDeclType	int		75273	0					
ANR	75279	Identifier	i		75273	1					
ANR	75280	IdentifierDecl	j		75273	1					
ANR	75281	IdentifierDeclType	int		75273	0					
ANR	75282	Identifier	j		75273	1					
ANR	75283	IdentifierDecl	k		75273	2					
ANR	75284	IdentifierDeclType	int		75273	0					
ANR	75285	Identifier	k		75273	1					
ANR	75286	ExpressionStatement	r_list_free ( g -> edges )	1935:1:48648:48670	75273	1	True				
ANR	75287	CallExpression	r_list_free ( g -> edges )		75273	0					
ANR	75288	Callee	r_list_free		75273	0					
ANR	75289	Identifier	r_list_free		75273	0					
ANR	75290	ArgumentList	g -> edges		75273	1					
ANR	75291	Argument	g -> edges		75273	0					
ANR	75292	PtrMemberAccess	g -> edges		75273	0					
ANR	75293	Identifier	g		75273	0					
ANR	75294	Identifier	edges		75273	1					
ANR	75295	ExpressionStatement	g -> edges = r_list_new ( )	1936:1:48673:48697	75273	2	True				
ANR	75296	AssignmentExpression	g -> edges = r_list_new ( )		75273	0		=			
ANR	75297	PtrMemberAccess	g -> edges		75273	0					
ANR	75298	Identifier	g		75273	0					
ANR	75299	Identifier	edges		75273	1					
ANR	75300	CallExpression	r_list_new ( )		75273	1					
ANR	75301	Callee	r_list_new		75273	0					
ANR	75302	Identifier	r_list_new		75273	0					
ANR	75303	ArgumentList			75273	1					
ANR	75304	ExpressionStatement	remove_cycles ( g )	1938:1:48701:48718	75273	3	True				
ANR	75305	CallExpression	remove_cycles ( g )		75273	0					
ANR	75306	Callee	remove_cycles		75273	0					
ANR	75307	Identifier	remove_cycles		75273	0					
ANR	75308	ArgumentList	g		75273	1					
ANR	75309	Argument	g		75273	0					
ANR	75310	Identifier	g		75273	0					
ANR	75311	ExpressionStatement	assign_layers ( g )	1939:1:48721:48738	75273	4	True				
ANR	75312	CallExpression	assign_layers ( g )		75273	0					
ANR	75313	Callee	assign_layers		75273	0					
ANR	75314	Identifier	assign_layers		75273	0					
ANR	75315	ArgumentList	g		75273	1					
ANR	75316	Argument	g		75273	0					
ANR	75317	Identifier	g		75273	0					
ANR	75318	ExpressionStatement	create_dummy_nodes ( g )	1940:1:48741:48763	75273	5	True				
ANR	75319	CallExpression	create_dummy_nodes ( g )		75273	0					
ANR	75320	Callee	create_dummy_nodes		75273	0					
ANR	75321	Identifier	create_dummy_nodes		75273	0					
ANR	75322	ArgumentList	g		75273	1					
ANR	75323	Argument	g		75273	0					
ANR	75324	Identifier	g		75273	0					
ANR	75325	ExpressionStatement	create_layers ( g )	1941:1:48766:48783	75273	6	True				
ANR	75326	CallExpression	create_layers ( g )		75273	0					
ANR	75327	Callee	create_layers		75273	0					
ANR	75328	Identifier	create_layers		75273	0					
ANR	75329	ArgumentList	g		75273	1					
ANR	75330	Argument	g		75273	0					
ANR	75331	Identifier	g		75273	0					
ANR	75332	ExpressionStatement	minimize_crossings ( g )	1942:1:48786:48808	75273	7	True				
ANR	75333	CallExpression	minimize_crossings ( g )		75273	0					
ANR	75334	Callee	minimize_crossings		75273	0					
ANR	75335	Identifier	minimize_crossings		75273	0					
ANR	75336	ArgumentList	g		75273	1					
ANR	75337	Argument	g		75273	0					
ANR	75338	Identifier	g		75273	0					
ANR	75339	IfStatement	if ( r_cons_is_breaked ( ) )		75273	8					
ANR	75340	Condition	r_cons_is_breaked ( )	1944:5:48816:48835	75273	0	True				
ANR	75341	CallExpression	r_cons_is_breaked ( )		75273	0					
ANR	75342	Callee	r_cons_is_breaked		75273	0					
ANR	75343	Identifier	r_cons_is_breaked		75273	0					
ANR	75344	ArgumentList			75273	1					
ANR	75345	CompoundStatement		13:27:207:207	75273	1					
ANR	75346	ExpressionStatement	r_cons_break_end ( )	1945:2:48842:48861	75273	0	True				
ANR	75347	CallExpression	r_cons_break_end ( )		75273	0					
ANR	75348	Callee	r_cons_break_end		75273	0					
ANR	75349	Identifier	r_cons_break_end		75273	0					
ANR	75350	ArgumentList			75273	1					
ANR	75351	ReturnStatement	return ;	1946:2:48865:48871	75273	1	True				
ANR	75352	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		75273	9					
ANR	75353	ForInit	i = 0 ;	1949:6:48909:48914	75273	0	True				
ANR	75354	AssignmentExpression	i = 0		75273	0		=			
ANR	75355	Identifier	i		75273	0					
ANR	75356	PrimaryExpression	0		75273	1					
ANR	75357	Condition	i < g -> n_layers	1949:13:48916:48930	75273	1	True				
ANR	75358	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	75359	Identifier	i		75273	0					
ANR	75360	PtrMemberAccess	g -> n_layers		75273	1					
ANR	75361	Identifier	g		75273	0					
ANR	75362	Identifier	n_layers		75273	1					
ANR	75363	PostIncDecOperationExpression	i ++	1949:30:48933:48935	75273	2	True				
ANR	75364	Identifier	i		75273	0					
ANR	75365	IncDec	++		75273	1					
ANR	75366	CompoundStatement		20:2:325:335	75273	3					
ANR	75367	IdentifierDeclStatement	int rh = 0 ;	1950:2:48942:48952	75273	0	True				
ANR	75368	IdentifierDecl	rh = 0		75273	0					
ANR	75369	IdentifierDeclType	int		75273	0					
ANR	75370	Identifier	rh		75273	1					
ANR	75371	AssignmentExpression	rh = 0		75273	2		=			
ANR	75372	Identifier	rh		75273	0					
ANR	75373	PrimaryExpression	0		75273	1					
ANR	75374	IdentifierDeclStatement	int rw = 0 ;	1951:2:48956:48966	75273	1	True				
ANR	75375	IdentifierDecl	rw = 0		75273	0					
ANR	75376	IdentifierDeclType	int		75273	0					
ANR	75377	Identifier	rw		75273	1					
ANR	75378	AssignmentExpression	rw = 0		75273	2		=			
ANR	75379	Identifier	rw		75273	0					
ANR	75380	PrimaryExpression	0		75273	1					
ANR	75381	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; ++ j )		75273	2					
ANR	75382	ForInit	j = 0 ;	1952:7:48975:48980	75273	0	True				
ANR	75383	AssignmentExpression	j = 0		75273	0		=			
ANR	75384	Identifier	j		75273	0					
ANR	75385	PrimaryExpression	0		75273	1					
ANR	75386	Condition	j < g -> layers [ i ] . n_nodes	1952:14:48982:49005	75273	1	True				
ANR	75387	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	75388	Identifier	j		75273	0					
ANR	75389	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	75390	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75391	PtrMemberAccess	g -> layers		75273	0					
ANR	75392	Identifier	g		75273	0					
ANR	75393	Identifier	layers		75273	1					
ANR	75394	Identifier	i		75273	1					
ANR	75395	Identifier	n_nodes		75273	1					
ANR	75396	UnaryExpression	++ j	1952:40:49008:49010	75273	2	True				
ANR	75397	IncDec	++		75273	0					
ANR	75398	Identifier	j		75273	1					
ANR	75399	CompoundStatement		22:3:387:438	75273	3					
ANR	75400	IdentifierDeclStatement	const RANode * n = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	1953:3:49018:49069	75273	0	True				
ANR	75401	IdentifierDecl	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	0					
ANR	75402	IdentifierDeclType	const RANode *		75273	0					
ANR	75403	Identifier	n		75273	1					
ANR	75404	AssignmentExpression	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	2		=			
ANR	75405	Identifier	n		75273	0					
ANR	75406	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	1					
ANR	75407	Callee	get_anode		75273	0					
ANR	75408	Identifier	get_anode		75273	0					
ANR	75409	ArgumentList	g -> layers [ i ] . nodes [ j ]		75273	1					
ANR	75410	Argument	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75411	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75412	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	75413	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75414	PtrMemberAccess	g -> layers		75273	0					
ANR	75415	Identifier	g		75273	0					
ANR	75416	Identifier	layers		75273	1					
ANR	75417	Identifier	i		75273	1					
ANR	75418	Identifier	nodes		75273	1					
ANR	75419	Identifier	j		75273	1					
ANR	75420	IfStatement	if ( n -> h > rh )		75273	1					
ANR	75421	Condition	n -> h > rh	1954:7:49078:49086	75273	0	True				
ANR	75422	RelationalExpression	n -> h > rh		75273	0		>			
ANR	75423	PtrMemberAccess	n -> h		75273	0					
ANR	75424	Identifier	n		75273	0					
ANR	75425	Identifier	h		75273	1					
ANR	75426	Identifier	rh		75273	1					
ANR	75427	CompoundStatement		23:18:458:458	75273	1					
ANR	75428	ExpressionStatement	rh = n -> h	1955:4:49095:49104	75273	0	True				
ANR	75429	AssignmentExpression	rh = n -> h		75273	0		=			
ANR	75430	Identifier	rh		75273	0					
ANR	75431	PtrMemberAccess	n -> h		75273	1					
ANR	75432	Identifier	n		75273	0					
ANR	75433	Identifier	h		75273	1					
ANR	75434	IfStatement	if ( n -> w > rw )		75273	2					
ANR	75435	Condition	n -> w > rw	1957:7:49118:49126	75273	0	True				
ANR	75436	RelationalExpression	n -> w > rw		75273	0		>			
ANR	75437	PtrMemberAccess	n -> w		75273	0					
ANR	75438	Identifier	n		75273	0					
ANR	75439	Identifier	w		75273	1					
ANR	75440	Identifier	rw		75273	1					
ANR	75441	CompoundStatement		26:18:498:498	75273	1					
ANR	75442	ExpressionStatement	rw = n -> w	1958:4:49135:49144	75273	0	True				
ANR	75443	AssignmentExpression	rw = n -> w		75273	0		=			
ANR	75444	Identifier	rw		75273	0					
ANR	75445	PtrMemberAccess	n -> w		75273	1					
ANR	75446	Identifier	n		75273	0					
ANR	75447	Identifier	w		75273	1					
ANR	75448	ExpressionStatement	g -> layers [ i ] . height = rh	1961:2:49157:49181	75273	3	True				
ANR	75449	AssignmentExpression	g -> layers [ i ] . height = rh		75273	0		=			
ANR	75450	MemberAccess	g -> layers [ i ] . height		75273	0					
ANR	75451	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75452	PtrMemberAccess	g -> layers		75273	0					
ANR	75453	Identifier	g		75273	0					
ANR	75454	Identifier	layers		75273	1					
ANR	75455	Identifier	i		75273	1					
ANR	75456	Identifier	height		75273	1					
ANR	75457	Identifier	rh		75273	1					
ANR	75458	ExpressionStatement	g -> layers [ i ] . width = rw	1962:2:49185:49208	75273	4	True				
ANR	75459	AssignmentExpression	g -> layers [ i ] . width = rw		75273	0		=			
ANR	75460	MemberAccess	g -> layers [ i ] . width		75273	0					
ANR	75461	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75462	PtrMemberAccess	g -> layers		75273	0					
ANR	75463	Identifier	g		75273	0					
ANR	75464	Identifier	layers		75273	1					
ANR	75465	Identifier	i		75273	1					
ANR	75466	Identifier	width		75273	1					
ANR	75467	Identifier	rw		75273	1					
ANR	75468	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		75273	10					
ANR	75469	ForInit	i = 0 ;	1965:6:49220:49225	75273	0	True				
ANR	75470	AssignmentExpression	i = 0		75273	0		=			
ANR	75471	Identifier	i		75273	0					
ANR	75472	PrimaryExpression	0		75273	1					
ANR	75473	Condition	i < g -> n_layers	1965:13:49227:49241	75273	1	True				
ANR	75474	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	75475	Identifier	i		75273	0					
ANR	75476	PtrMemberAccess	g -> n_layers		75273	1					
ANR	75477	Identifier	g		75273	0					
ANR	75478	Identifier	n_layers		75273	1					
ANR	75479	PostIncDecOperationExpression	i ++	1965:30:49244:49246	75273	2	True				
ANR	75480	Identifier	i		75273	0					
ANR	75481	IncDec	++		75273	1					
ANR	75482	CompoundStatement		34:35:618:618	75273	3					
ANR	75483	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; ++ j )		75273	0					
ANR	75484	ForInit	j = 0 ;	1966:7:49258:49263	75273	0	True				
ANR	75485	AssignmentExpression	j = 0		75273	0		=			
ANR	75486	Identifier	j		75273	0					
ANR	75487	PrimaryExpression	0		75273	1					
ANR	75488	Condition	j < g -> layers [ i ] . n_nodes	1966:14:49265:49288	75273	1	True				
ANR	75489	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	75490	Identifier	j		75273	0					
ANR	75491	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	75492	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75493	PtrMemberAccess	g -> layers		75273	0					
ANR	75494	Identifier	g		75273	0					
ANR	75495	Identifier	layers		75273	1					
ANR	75496	Identifier	i		75273	1					
ANR	75497	Identifier	n_nodes		75273	1					
ANR	75498	UnaryExpression	++ j	1966:40:49291:49293	75273	2	True				
ANR	75499	IncDec	++		75273	0					
ANR	75500	Identifier	j		75273	1					
ANR	75501	CompoundStatement		36:3:670:720	75273	3					
ANR	75502	IdentifierDeclStatement	RANode * a = ( RANode * ) g -> layers [ i ] . nodes [ j ] -> data ;	1967:3:49301:49351	75273	0	True				
ANR	75503	IdentifierDecl	* a = ( RANode * ) g -> layers [ i ] . nodes [ j ] -> data		75273	0					
ANR	75504	IdentifierDeclType	RANode *		75273	0					
ANR	75505	Identifier	a		75273	1					
ANR	75506	AssignmentExpression	* a = ( RANode * ) g -> layers [ i ] . nodes [ j ] -> data		75273	2		=			
ANR	75507	Identifier	a		75273	0					
ANR	75508	CastExpression	( RANode * ) g -> layers [ i ] . nodes [ j ] -> data		75273	1					
ANR	75509	CastTarget	RANode *		75273	0					
ANR	75510	PtrMemberAccess	g -> layers [ i ] . nodes [ j ] -> data		75273	1					
ANR	75511	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75512	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	75513	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75514	PtrMemberAccess	g -> layers		75273	0					
ANR	75515	Identifier	g		75273	0					
ANR	75516	Identifier	layers		75273	1					
ANR	75517	Identifier	i		75273	1					
ANR	75518	Identifier	nodes		75273	1					
ANR	75519	Identifier	j		75273	1					
ANR	75520	Identifier	data		75273	1					
ANR	75521	IfStatement	if ( a -> is_dummy )		75273	1					
ANR	75522	Condition	a -> is_dummy	1968:7:49360:49370	75273	0	True				
ANR	75523	PtrMemberAccess	a -> is_dummy		75273	0					
ANR	75524	Identifier	a		75273	0					
ANR	75525	Identifier	is_dummy		75273	1					
ANR	75526	CompoundStatement		37:20:742:742	75273	1					
ANR	75527	IfStatement	if ( g -> layout == 0 )		75273	0					
ANR	75528	Condition	g -> layout == 0	1969:8:49383:49396	75273	0	True				
ANR	75529	EqualityExpression	g -> layout == 0		75273	0		==			
ANR	75530	PtrMemberAccess	g -> layout		75273	0					
ANR	75531	Identifier	g		75273	0					
ANR	75532	Identifier	layout		75273	1					
ANR	75533	PrimaryExpression	0		75273	1					
ANR	75534	CompoundStatement		38:24:768:768	75273	1					
ANR	75535	ExpressionStatement	a -> h = g -> layers [ i ] . height	1970:5:49406:49432	75273	0	True				
ANR	75536	AssignmentExpression	a -> h = g -> layers [ i ] . height		75273	0		=			
ANR	75537	PtrMemberAccess	a -> h		75273	0					
ANR	75538	Identifier	a		75273	0					
ANR	75539	Identifier	h		75273	1					
ANR	75540	MemberAccess	g -> layers [ i ] . height		75273	1					
ANR	75541	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75542	PtrMemberAccess	g -> layers		75273	0					
ANR	75543	Identifier	g		75273	0					
ANR	75544	Identifier	layers		75273	1					
ANR	75545	Identifier	i		75273	1					
ANR	75546	Identifier	height		75273	1					
ANR	75547	ElseStatement	else		75273	0					
ANR	75548	CompoundStatement		40:11:814:814	75273	0					
ANR	75549	ExpressionStatement	a -> w = g -> layers [ i ] . width	1972:5:49452:49477	75273	0	True				
ANR	75550	AssignmentExpression	a -> w = g -> layers [ i ] . width		75273	0		=			
ANR	75551	PtrMemberAccess	a -> w		75273	0					
ANR	75552	Identifier	a		75273	0					
ANR	75553	Identifier	w		75273	1					
ANR	75554	MemberAccess	g -> layers [ i ] . width		75273	1					
ANR	75555	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75556	PtrMemberAccess	g -> layers		75273	0					
ANR	75557	Identifier	g		75273	0					
ANR	75558	Identifier	layers		75273	1					
ANR	75559	Identifier	i		75273	1					
ANR	75560	Identifier	width		75273	1					
ANR	75561	ExpressionStatement	a -> layer_height = g -> layers [ i ] . height	1975:3:49493:49530	75273	2	True				
ANR	75562	AssignmentExpression	a -> layer_height = g -> layers [ i ] . height		75273	0		=			
ANR	75563	PtrMemberAccess	a -> layer_height		75273	0					
ANR	75564	Identifier	a		75273	0					
ANR	75565	Identifier	layer_height		75273	1					
ANR	75566	MemberAccess	g -> layers [ i ] . height		75273	1					
ANR	75567	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75568	PtrMemberAccess	g -> layers		75273	0					
ANR	75569	Identifier	g		75273	0					
ANR	75570	Identifier	layers		75273	1					
ANR	75571	Identifier	i		75273	1					
ANR	75572	Identifier	height		75273	1					
ANR	75573	ExpressionStatement	a -> layer_width = g -> layers [ i ] . width	1976:3:49535:49570	75273	3	True				
ANR	75574	AssignmentExpression	a -> layer_width = g -> layers [ i ] . width		75273	0		=			
ANR	75575	PtrMemberAccess	a -> layer_width		75273	0					
ANR	75576	Identifier	a		75273	0					
ANR	75577	Identifier	layer_width		75273	1					
ANR	75578	MemberAccess	g -> layers [ i ] . width		75273	1					
ANR	75579	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75580	PtrMemberAccess	g -> layers		75273	0					
ANR	75581	Identifier	g		75273	0					
ANR	75582	Identifier	layers		75273	1					
ANR	75583	Identifier	i		75273	1					
ANR	75584	Identifier	width		75273	1					
ANR	75585	ExpressionStatement	place_dummies ( g )	1983:1:49722:49739	75273	11	True				
ANR	75586	CallExpression	place_dummies ( g )		75273	0					
ANR	75587	Callee	place_dummies		75273	0					
ANR	75588	Identifier	place_dummies		75273	0					
ANR	75589	ArgumentList	g		75273	1					
ANR	75590	Argument	g		75273	0					
ANR	75591	Identifier	g		75273	0					
ANR	75592	ExpressionStatement	place_original ( g )	1984:1:49742:49760	75273	12	True				
ANR	75593	CallExpression	place_original ( g )		75273	0					
ANR	75594	Callee	place_original		75273	0					
ANR	75595	Identifier	place_original		75273	0					
ANR	75596	ArgumentList	g		75273	1					
ANR	75597	Argument	g		75273	0					
ANR	75598	Identifier	g		75273	0					
ANR	75599	IdentifierDeclStatement	const RListIter * it ;	1989:1:49977:49996	75273	13	True				
ANR	75600	IdentifierDecl	* it		75273	0					
ANR	75601	IdentifierDeclType	const RListIter *		75273	0					
ANR	75602	Identifier	it		75273	1					
ANR	75603	IdentifierDeclStatement	const RGraphEdge * e ;	1990:1:49999:50018	75273	14	True				
ANR	75604	IdentifierDecl	* e		75273	0					
ANR	75605	IdentifierDeclType	const RGraphEdge *		75273	0					
ANR	75606	Identifier	e		75273	1					
ANR	75607	Statement	r_list_foreach	1991:1:50021:50034	75273	15	True				
ANR	75608	Statement	(	1991:16:50036:50036	75273	16	True				
ANR	75609	Statement	g	1991:17:50037:50037	75273	17	True				
ANR	75610	Statement	->	1991:18:50038:50039	75273	18	True				
ANR	75611	Statement	back_edges	1991:20:50040:50049	75273	19	True				
ANR	75612	Statement	","	1991:30:50050:50050	75273	20	True				
ANR	75613	Statement	it	1991:32:50052:50053	75273	21	True				
ANR	75614	Statement	","	1991:34:50054:50054	75273	22	True				
ANR	75615	Statement	e	1991:36:50056:50056	75273	23	True				
ANR	75616	Statement	)	1991:37:50057:50057	75273	24	True				
ANR	75617	CompoundStatement		62:2:1485:1528	75273	25					
ANR	75618	IdentifierDeclStatement	RANode * from = e -> from ? get_anode ( e -> from ) : NULL ;	1992:2:50063:50112	75273	0	True				
ANR	75619	IdentifierDecl	* from = e -> from ? get_anode ( e -> from ) : NULL		75273	0					
ANR	75620	IdentifierDeclType	RANode *		75273	0					
ANR	75621	Identifier	from		75273	1					
ANR	75622	AssignmentExpression	* from = e -> from ? get_anode ( e -> from ) : NULL		75273	2		=			
ANR	75623	Identifier	from		75273	0					
ANR	75624	ConditionalExpression	e -> from ? get_anode ( e -> from ) : NULL		75273	1					
ANR	75625	Condition	e -> from		75273	0					
ANR	75626	PtrMemberAccess	e -> from		75273	0					
ANR	75627	Identifier	e		75273	0					
ANR	75628	Identifier	from		75273	1					
ANR	75629	CallExpression	get_anode ( e -> from )		75273	1					
ANR	75630	Callee	get_anode		75273	0					
ANR	75631	Identifier	get_anode		75273	0					
ANR	75632	ArgumentList	e -> from		75273	1					
ANR	75633	Argument	e -> from		75273	0					
ANR	75634	PtrMemberAccess	e -> from		75273	0					
ANR	75635	Identifier	e		75273	0					
ANR	75636	Identifier	from		75273	1					
ANR	75637	Identifier	NULL		75273	2					
ANR	75638	IdentifierDeclStatement	RANode * to = e -> to ? get_anode ( e -> to ) : NULL ;	1993:2:50116:50159	75273	1	True				
ANR	75639	IdentifierDecl	* to = e -> to ? get_anode ( e -> to ) : NULL		75273	0					
ANR	75640	IdentifierDeclType	RANode *		75273	0					
ANR	75641	Identifier	to		75273	1					
ANR	75642	AssignmentExpression	* to = e -> to ? get_anode ( e -> to ) : NULL		75273	2		=			
ANR	75643	Identifier	to		75273	0					
ANR	75644	ConditionalExpression	e -> to ? get_anode ( e -> to ) : NULL		75273	1					
ANR	75645	Condition	e -> to		75273	0					
ANR	75646	PtrMemberAccess	e -> to		75273	0					
ANR	75647	Identifier	e		75273	0					
ANR	75648	Identifier	to		75273	1					
ANR	75649	CallExpression	get_anode ( e -> to )		75273	1					
ANR	75650	Callee	get_anode		75273	0					
ANR	75651	Identifier	get_anode		75273	0					
ANR	75652	ArgumentList	e -> to		75273	1					
ANR	75653	Argument	e -> to		75273	0					
ANR	75654	PtrMemberAccess	e -> to		75273	0					
ANR	75655	Identifier	e		75273	0					
ANR	75656	Identifier	to		75273	1					
ANR	75657	Identifier	NULL		75273	2					
ANR	75658	ExpressionStatement	"fix_back_edge_dummy_nodes ( g , from , to )"	1994:2:50163:50202	75273	2	True				
ANR	75659	CallExpression	"fix_back_edge_dummy_nodes ( g , from , to )"		75273	0					
ANR	75660	Callee	fix_back_edge_dummy_nodes		75273	0					
ANR	75661	Identifier	fix_back_edge_dummy_nodes		75273	0					
ANR	75662	ArgumentList	g		75273	1					
ANR	75663	Argument	g		75273	0					
ANR	75664	Identifier	g		75273	0					
ANR	75665	Argument	from		75273	1					
ANR	75666	Identifier	from		75273	0					
ANR	75667	Argument	to		75273	2					
ANR	75668	Identifier	to		75273	0					
ANR	75669	ExpressionStatement	"r_agraph_del_edge ( g , to , from )"	1995:2:50206:50237	75273	3	True				
ANR	75670	CallExpression	"r_agraph_del_edge ( g , to , from )"		75273	0					
ANR	75671	Callee	r_agraph_del_edge		75273	0					
ANR	75672	Identifier	r_agraph_del_edge		75273	0					
ANR	75673	ArgumentList	g		75273	1					
ANR	75674	Argument	g		75273	0					
ANR	75675	Identifier	g		75273	0					
ANR	75676	Argument	to		75273	1					
ANR	75677	Identifier	to		75273	0					
ANR	75678	Argument	from		75273	2					
ANR	75679	Identifier	from		75273	0					
ANR	75680	ExpressionStatement	"r_agraph_add_edge_at ( g , from , to , e -> nth )"	1996:2:50241:50283	75273	4	True				
ANR	75681	CallExpression	"r_agraph_add_edge_at ( g , from , to , e -> nth )"		75273	0					
ANR	75682	Callee	r_agraph_add_edge_at		75273	0					
ANR	75683	Identifier	r_agraph_add_edge_at		75273	0					
ANR	75684	ArgumentList	g		75273	1					
ANR	75685	Argument	g		75273	0					
ANR	75686	Identifier	g		75273	0					
ANR	75687	Argument	from		75273	1					
ANR	75688	Identifier	from		75273	0					
ANR	75689	Argument	to		75273	2					
ANR	75690	Identifier	to		75273	0					
ANR	75691	Argument	e -> nth		75273	3					
ANR	75692	PtrMemberAccess	e -> nth		75273	0					
ANR	75693	Identifier	e		75273	0					
ANR	75694	Identifier	nth		75273	1					
ANR	75695	SwitchStatement	switch ( g -> layout )		75273	26					
ANR	75696	Condition	g -> layout	1999:9:50298:50306	75273	0	True				
ANR	75697	PtrMemberAccess	g -> layout		75273	0					
ANR	75698	Identifier	g		75273	0					
ANR	75699	Identifier	layout		75273	1					
ANR	75700	CompoundStatement		68:20:1678:1678	75273	1					
ANR	75701	Label	default :	2000:1:50312:50319	75273	0	True				
ANR	75702	Identifier	default		75273	0					
ANR	75703	Label	case 0 :	2001:1:50322:50328	75273	1	True				
ANR	75704	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		75273	2					
ANR	75705	ForInit	i = 0 ;	2003:7:50397:50402	75273	0	True				
ANR	75706	AssignmentExpression	i = 0		75273	0		=			
ANR	75707	Identifier	i		75273	0					
ANR	75708	PrimaryExpression	0		75273	1					
ANR	75709	Condition	i < g -> n_layers	2003:14:50404:50418	75273	1	True				
ANR	75710	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	75711	Identifier	i		75273	0					
ANR	75712	PtrMemberAccess	g -> n_layers		75273	1					
ANR	75713	Identifier	g		75273	0					
ANR	75714	Identifier	n_layers		75273	1					
ANR	75715	UnaryExpression	++ i	2003:31:50421:50423	75273	2	True				
ANR	75716	IncDec	++		75273	0					
ANR	75717	Identifier	i		75273	1					
ANR	75718	CompoundStatement		72:36:1795:1795	75273	3					
ANR	75719	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; ++ j )		75273	0					
ANR	75720	ForInit	j = 0 ;	2004:8:50436:50441	75273	0	True				
ANR	75721	AssignmentExpression	j = 0		75273	0		=			
ANR	75722	Identifier	j		75273	0					
ANR	75723	PrimaryExpression	0		75273	1					
ANR	75724	Condition	j < g -> layers [ i ] . n_nodes	2004:15:50443:50466	75273	1	True				
ANR	75725	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	75726	Identifier	j		75273	0					
ANR	75727	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	75728	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75729	PtrMemberAccess	g -> layers		75273	0					
ANR	75730	Identifier	g		75273	0					
ANR	75731	Identifier	layers		75273	1					
ANR	75732	Identifier	i		75273	1					
ANR	75733	Identifier	n_nodes		75273	1					
ANR	75734	UnaryExpression	++ j	2004:41:50469:50471	75273	2	True				
ANR	75735	IncDec	++		75273	0					
ANR	75736	Identifier	j		75273	1					
ANR	75737	CompoundStatement		74:4:1849:1894	75273	3					
ANR	75738	IdentifierDeclStatement	RANode * n = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	2005:4:50480:50525	75273	0	True				
ANR	75739	IdentifierDecl	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	0					
ANR	75740	IdentifierDeclType	RANode *		75273	0					
ANR	75741	Identifier	n		75273	1					
ANR	75742	AssignmentExpression	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	2		=			
ANR	75743	Identifier	n		75273	0					
ANR	75744	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	1					
ANR	75745	Callee	get_anode		75273	0					
ANR	75746	Identifier	get_anode		75273	0					
ANR	75747	ArgumentList	g -> layers [ i ] . nodes [ j ]		75273	1					
ANR	75748	Argument	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75749	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75750	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	75751	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75752	PtrMemberAccess	g -> layers		75273	0					
ANR	75753	Identifier	g		75273	0					
ANR	75754	Identifier	layers		75273	1					
ANR	75755	Identifier	i		75273	1					
ANR	75756	Identifier	nodes		75273	1					
ANR	75757	Identifier	j		75273	1					
ANR	75758	IfStatement	if ( n )		75273	1					
ANR	75759	Condition	n	2006:8:50535:50535	75273	0	True				
ANR	75760	Identifier	n		75273	0					
ANR	75761	CompoundStatement		75:11:1907:1907	75273	1					
ANR	75762	ExpressionStatement	n -> x -= n -> w / 2	2007:5:50545:50561	75273	0	True				
ANR	75763	AssignmentExpression	n -> x -= n -> w / 2		75273	0		-=			
ANR	75764	PtrMemberAccess	n -> x		75273	0					
ANR	75765	Identifier	n		75273	0					
ANR	75766	Identifier	x		75273	1					
ANR	75767	MultiplicativeExpression	n -> w / 2		75273	1		/			
ANR	75768	PtrMemberAccess	n -> w		75273	0					
ANR	75769	Identifier	n		75273	0					
ANR	75770	Identifier	w		75273	1					
ANR	75771	PrimaryExpression	2		75273	1					
ANR	75772	IfStatement	if ( g -> is_tiny )		75273	1					
ANR	75773	Condition	g -> is_tiny	2008:9:50572:50581	75273	0	True				
ANR	75774	PtrMemberAccess	g -> is_tiny		75273	0					
ANR	75775	Identifier	g		75273	0					
ANR	75776	Identifier	is_tiny		75273	1					
ANR	75777	CompoundStatement		77:21:1953:1953	75273	1					
ANR	75778	ExpressionStatement	n -> x /= 8	2009:6:50592:50601	75273	0	True				
ANR	75779	AssignmentExpression	n -> x /= 8		75273	0		/=			
ANR	75780	PtrMemberAccess	n -> x		75273	0					
ANR	75781	Identifier	n		75273	0					
ANR	75782	Identifier	x		75273	1					
ANR	75783	PrimaryExpression	8		75273	1					
ANR	75784	ExpressionStatement	set_layer_gap ( g )	2015:2:50628:50645	75273	3	True				
ANR	75785	CallExpression	set_layer_gap ( g )		75273	0					
ANR	75786	Callee	set_layer_gap		75273	0					
ANR	75787	Identifier	set_layer_gap		75273	0					
ANR	75788	ArgumentList	g		75273	1					
ANR	75789	Argument	g		75273	0					
ANR	75790	Identifier	g		75273	0					
ANR	75791	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		75273	4					
ANR	75792	ForInit	i = 0 ;	2018:7:50678:50683	75273	0	True				
ANR	75793	AssignmentExpression	i = 0		75273	0		=			
ANR	75794	Identifier	i		75273	0					
ANR	75795	PrimaryExpression	0		75273	1					
ANR	75796	Condition	i < g -> n_layers	2018:14:50685:50699	75273	1	True				
ANR	75797	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	75798	Identifier	i		75273	0					
ANR	75799	PtrMemberAccess	g -> n_layers		75273	1					
ANR	75800	Identifier	g		75273	0					
ANR	75801	Identifier	n_layers		75273	1					
ANR	75802	UnaryExpression	++ i	2018:31:50702:50704	75273	2	True				
ANR	75803	IncDec	++		75273	0					
ANR	75804	Identifier	i		75273	1					
ANR	75805	CompoundStatement		88:3:2081:2094	75273	3					
ANR	75806	IdentifierDeclStatement	int tmp_y = 0 ;	2019:3:50712:50725	75273	0	True				
ANR	75807	IdentifierDecl	tmp_y = 0		75273	0					
ANR	75808	IdentifierDeclType	int		75273	0					
ANR	75809	Identifier	tmp_y		75273	1					
ANR	75810	AssignmentExpression	tmp_y = 0		75273	2		=			
ANR	75811	Identifier	tmp_y		75273	0					
ANR	75812	PrimaryExpression	0		75273	1					
ANR	75813	ExpressionStatement	tmp_y = g -> layers [ 0 ] . gap	2020:3:50730:50754	75273	1	True				
ANR	75814	AssignmentExpression	tmp_y = g -> layers [ 0 ] . gap		75273	0		=			
ANR	75815	Identifier	tmp_y		75273	0					
ANR	75816	MemberAccess	g -> layers [ 0 ] . gap		75273	1					
ANR	75817	ArrayIndexing	g -> layers [ 0 ]		75273	0					
ANR	75818	PtrMemberAccess	g -> layers		75273	0					
ANR	75819	Identifier	g		75273	0					
ANR	75820	Identifier	layers		75273	1					
ANR	75821	PrimaryExpression	0		75273	1					
ANR	75822	Identifier	gap		75273	1					
ANR	75823	ForStatement	for ( k = 1 ; k <= i ; k ++ )		75273	2					
ANR	75824	ForInit	k = 1 ;	2021:8:50790:50795	75273	0	True				
ANR	75825	AssignmentExpression	k = 1		75273	0		=			
ANR	75826	Identifier	k		75273	0					
ANR	75827	PrimaryExpression	1		75273	1					
ANR	75828	Condition	k <= i	2021:15:50797:50802	75273	1	True				
ANR	75829	RelationalExpression	k <= i		75273	0		<=			
ANR	75830	Identifier	k		75273	0					
ANR	75831	Identifier	i		75273	1					
ANR	75832	PostIncDecOperationExpression	k ++	2021:23:50805:50807	75273	2	True				
ANR	75833	Identifier	k		75273	0					
ANR	75834	IncDec	++		75273	1					
ANR	75835	CompoundStatement		90:28:2179:2179	75273	3					
ANR	75836	ExpressionStatement	tmp_y += g -> layers [ k - 1 ] . height + g -> layers [ k ] . gap + 3	2022:4:50816:50869	75273	0	True				
ANR	75837	AssignmentExpression	tmp_y += g -> layers [ k - 1 ] . height + g -> layers [ k ] . gap + 3		75273	0		+=			
ANR	75838	Identifier	tmp_y		75273	0					
ANR	75839	AdditiveExpression	g -> layers [ k - 1 ] . height + g -> layers [ k ] . gap + 3		75273	1		+			
ANR	75840	MemberAccess	g -> layers [ k - 1 ] . height		75273	0					
ANR	75841	ArrayIndexing	g -> layers [ k - 1 ]		75273	0					
ANR	75842	PtrMemberAccess	g -> layers		75273	0					
ANR	75843	Identifier	g		75273	0					
ANR	75844	Identifier	layers		75273	1					
ANR	75845	AdditiveExpression	k - 1		75273	1		-			
ANR	75846	Identifier	k		75273	0					
ANR	75847	PrimaryExpression	1		75273	1					
ANR	75848	Identifier	height		75273	1					
ANR	75849	AdditiveExpression	g -> layers [ k ] . gap + 3		75273	1		+			
ANR	75850	MemberAccess	g -> layers [ k ] . gap		75273	0					
ANR	75851	ArrayIndexing	g -> layers [ k ]		75273	0					
ANR	75852	PtrMemberAccess	g -> layers		75273	0					
ANR	75853	Identifier	g		75273	0					
ANR	75854	Identifier	layers		75273	1					
ANR	75855	Identifier	k		75273	1					
ANR	75856	Identifier	gap		75273	1					
ANR	75857	PrimaryExpression	3		75273	1					
ANR	75858	IfStatement	if ( g -> is_tiny )		75273	3					
ANR	75859	Condition	g -> is_tiny	2024:7:50903:50912	75273	0	True				
ANR	75860	PtrMemberAccess	g -> is_tiny		75273	0					
ANR	75861	Identifier	g		75273	0					
ANR	75862	Identifier	is_tiny		75273	1					
ANR	75863	CompoundStatement		93:19:2284:2284	75273	1					
ANR	75864	ExpressionStatement	tmp_y = i	2025:4:50921:50930	75273	0	True				
ANR	75865	AssignmentExpression	tmp_y = i		75273	0		=			
ANR	75866	Identifier	tmp_y		75273	0					
ANR	75867	Identifier	i		75273	1					
ANR	75868	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; ++ j )		75273	4					
ANR	75869	ForInit	j = 0 ;	2027:8:50945:50950	75273	0	True				
ANR	75870	AssignmentExpression	j = 0		75273	0		=			
ANR	75871	Identifier	j		75273	0					
ANR	75872	PrimaryExpression	0		75273	1					
ANR	75873	Condition	j < g -> layers [ i ] . n_nodes	2027:15:50952:50975	75273	1	True				
ANR	75874	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	75875	Identifier	j		75273	0					
ANR	75876	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	75877	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75878	PtrMemberAccess	g -> layers		75273	0					
ANR	75879	Identifier	g		75273	0					
ANR	75880	Identifier	layers		75273	1					
ANR	75881	Identifier	i		75273	1					
ANR	75882	Identifier	n_nodes		75273	1					
ANR	75883	UnaryExpression	++ j	2027:41:50978:50980	75273	2	True				
ANR	75884	IncDec	++		75273	0					
ANR	75885	Identifier	j		75273	1					
ANR	75886	CompoundStatement		97:4:2358:2403	75273	3					
ANR	75887	IdentifierDeclStatement	RANode * n = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	2028:4:50989:51034	75273	0	True				
ANR	75888	IdentifierDecl	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	0					
ANR	75889	IdentifierDeclType	RANode *		75273	0					
ANR	75890	Identifier	n		75273	1					
ANR	75891	AssignmentExpression	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	2		=			
ANR	75892	Identifier	n		75273	0					
ANR	75893	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	1					
ANR	75894	Callee	get_anode		75273	0					
ANR	75895	Identifier	get_anode		75273	0					
ANR	75896	ArgumentList	g -> layers [ i ] . nodes [ j ]		75273	1					
ANR	75897	Argument	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75898	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75899	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	75900	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75901	PtrMemberAccess	g -> layers		75273	0					
ANR	75902	Identifier	g		75273	0					
ANR	75903	Identifier	layers		75273	1					
ANR	75904	Identifier	i		75273	1					
ANR	75905	Identifier	nodes		75273	1					
ANR	75906	Identifier	j		75273	1					
ANR	75907	IfStatement	if ( n )		75273	1					
ANR	75908	Condition	n	2029:8:51044:51044	75273	0	True				
ANR	75909	Identifier	n		75273	0					
ANR	75910	CompoundStatement		98:11:2416:2416	75273	1					
ANR	75911	ExpressionStatement	n -> y = tmp_y	2030:5:51054:51066	75273	0	True				
ANR	75912	AssignmentExpression	n -> y = tmp_y		75273	0		=			
ANR	75913	PtrMemberAccess	n -> y		75273	0					
ANR	75914	Identifier	n		75273	0					
ANR	75915	Identifier	y		75273	1					
ANR	75916	Identifier	tmp_y		75273	1					
ANR	75917	BreakStatement	break ;	2034:2:51085:51090	75273	5	True				
ANR	75918	Label	case 1 :	2036:1:51113:51119	75273	6	True				
ANR	75919	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		75273	7					
ANR	75920	ForInit	i = 0 ;	2038:7:51179:51184	75273	0	True				
ANR	75921	AssignmentExpression	i = 0		75273	0		=			
ANR	75922	Identifier	i		75273	0					
ANR	75923	PrimaryExpression	0		75273	1					
ANR	75924	Condition	i < g -> n_layers	2038:14:51186:51200	75273	1	True				
ANR	75925	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	75926	Identifier	i		75273	0					
ANR	75927	PtrMemberAccess	g -> n_layers		75273	1					
ANR	75928	Identifier	g		75273	0					
ANR	75929	Identifier	n_layers		75273	1					
ANR	75930	PostIncDecOperationExpression	i ++	2038:31:51203:51205	75273	2	True				
ANR	75931	Identifier	i		75273	0					
ANR	75932	IncDec	++		75273	1					
ANR	75933	CompoundStatement		107:36:2577:2577	75273	3					
ANR	75934	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; j ++ )		75273	0					
ANR	75935	ForInit	j = 0 ;	2039:8:51218:51223	75273	0	True				
ANR	75936	AssignmentExpression	j = 0		75273	0		=			
ANR	75937	Identifier	j		75273	0					
ANR	75938	PrimaryExpression	0		75273	1					
ANR	75939	Condition	j < g -> layers [ i ] . n_nodes	2039:15:51225:51248	75273	1	True				
ANR	75940	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	75941	Identifier	j		75273	0					
ANR	75942	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	75943	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75944	PtrMemberAccess	g -> layers		75273	0					
ANR	75945	Identifier	g		75273	0					
ANR	75946	Identifier	layers		75273	1					
ANR	75947	Identifier	i		75273	1					
ANR	75948	Identifier	n_nodes		75273	1					
ANR	75949	PostIncDecOperationExpression	j ++	2039:41:51251:51253	75273	2	True				
ANR	75950	Identifier	j		75273	0					
ANR	75951	IncDec	++		75273	1					
ANR	75952	CompoundStatement		109:4:2631:2676	75273	3					
ANR	75953	IdentifierDeclStatement	RANode * n = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	2040:4:51262:51307	75273	0	True				
ANR	75954	IdentifierDecl	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	0					
ANR	75955	IdentifierDeclType	RANode *		75273	0					
ANR	75956	Identifier	n		75273	1					
ANR	75957	AssignmentExpression	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	2		=			
ANR	75958	Identifier	n		75273	0					
ANR	75959	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	1					
ANR	75960	Callee	get_anode		75273	0					
ANR	75961	Identifier	get_anode		75273	0					
ANR	75962	ArgumentList	g -> layers [ i ] . nodes [ j ]		75273	1					
ANR	75963	Argument	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75964	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	75965	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	75966	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	75967	PtrMemberAccess	g -> layers		75273	0					
ANR	75968	Identifier	g		75273	0					
ANR	75969	Identifier	layers		75273	1					
ANR	75970	Identifier	i		75273	1					
ANR	75971	Identifier	nodes		75273	1					
ANR	75972	Identifier	j		75273	1					
ANR	75973	ExpressionStatement	n -> y = 1	2041:4:51313:51321	75273	1	True				
ANR	75974	AssignmentExpression	n -> y = 1		75273	0		=			
ANR	75975	PtrMemberAccess	n -> y		75273	0					
ANR	75976	Identifier	n		75273	0					
ANR	75977	Identifier	y		75273	1					
ANR	75978	PrimaryExpression	1		75273	1					
ANR	75979	ForStatement	for ( k = 0 ; k < j ; k ++ )		75273	2					
ANR	75980	ForInit	k = 0 ;	2042:9:51332:51337	75273	0	True				
ANR	75981	AssignmentExpression	k = 0		75273	0		=			
ANR	75982	Identifier	k		75273	0					
ANR	75983	PrimaryExpression	0		75273	1					
ANR	75984	Condition	k < j	2042:16:51339:51343	75273	1	True				
ANR	75985	RelationalExpression	k < j		75273	0		<			
ANR	75986	Identifier	k		75273	0					
ANR	75987	Identifier	j		75273	1					
ANR	75988	PostIncDecOperationExpression	k ++	2042:23:51346:51348	75273	2	True				
ANR	75989	Identifier	k		75273	0					
ANR	75990	IncDec	++		75273	1					
ANR	75991	CompoundStatement		112:5:2727:2772	75273	3					
ANR	75992	IdentifierDeclStatement	RANode * m = get_anode ( g -> layers [ i ] . nodes [ k ] ) ;	2043:5:51358:51403	75273	0	True				
ANR	75993	IdentifierDecl	* m = get_anode ( g -> layers [ i ] . nodes [ k ] )		75273	0					
ANR	75994	IdentifierDeclType	RANode *		75273	0					
ANR	75995	Identifier	m		75273	1					
ANR	75996	AssignmentExpression	* m = get_anode ( g -> layers [ i ] . nodes [ k ] )		75273	2		=			
ANR	75997	Identifier	m		75273	0					
ANR	75998	CallExpression	get_anode ( g -> layers [ i ] . nodes [ k ] )		75273	1					
ANR	75999	Callee	get_anode		75273	0					
ANR	76000	Identifier	get_anode		75273	0					
ANR	76001	ArgumentList	g -> layers [ i ] . nodes [ k ]		75273	1					
ANR	76002	Argument	g -> layers [ i ] . nodes [ k ]		75273	0					
ANR	76003	ArrayIndexing	g -> layers [ i ] . nodes [ k ]		75273	0					
ANR	76004	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	76005	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	76006	PtrMemberAccess	g -> layers		75273	0					
ANR	76007	Identifier	g		75273	0					
ANR	76008	Identifier	layers		75273	1					
ANR	76009	Identifier	i		75273	1					
ANR	76010	Identifier	nodes		75273	1					
ANR	76011	Identifier	k		75273	1					
ANR	76012	ExpressionStatement	n -> y -= ( m -> h + VERTICAL_NODE_SPACING )	2044:5:51410:51448	75273	1	True				
ANR	76013	AssignmentExpression	n -> y -= ( m -> h + VERTICAL_NODE_SPACING )		75273	0		-=			
ANR	76014	PtrMemberAccess	n -> y		75273	0					
ANR	76015	Identifier	n		75273	0					
ANR	76016	Identifier	y		75273	1					
ANR	76017	AdditiveExpression	m -> h + VERTICAL_NODE_SPACING		75273	1		+			
ANR	76018	PtrMemberAccess	m -> h		75273	0					
ANR	76019	Identifier	m		75273	0					
ANR	76020	Identifier	h		75273	1					
ANR	76021	Identifier	VERTICAL_NODE_SPACING		75273	1					
ANR	76022	ExpressionStatement	set_layer_gap ( g )	2049:2:51468:51485	75273	8	True				
ANR	76023	CallExpression	set_layer_gap ( g )		75273	0					
ANR	76024	Callee	set_layer_gap		75273	0					
ANR	76025	Identifier	set_layer_gap		75273	0					
ANR	76026	ArgumentList	g		75273	1					
ANR	76027	Argument	g		75273	0					
ANR	76028	Identifier	g		75273	0					
ANR	76029	ForStatement	for ( i = 0 ; i < g -> n_layers ; i ++ )		75273	9					
ANR	76030	ForInit	i = 0 ;	2052:7:51520:51525	75273	0	True				
ANR	76031	AssignmentExpression	i = 0		75273	0		=			
ANR	76032	Identifier	i		75273	0					
ANR	76033	PrimaryExpression	0		75273	1					
ANR	76034	Condition	i < g -> n_layers	2052:14:51527:51541	75273	1	True				
ANR	76035	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	76036	Identifier	i		75273	0					
ANR	76037	PtrMemberAccess	g -> n_layers		75273	1					
ANR	76038	Identifier	g		75273	0					
ANR	76039	Identifier	n_layers		75273	1					
ANR	76040	PostIncDecOperationExpression	i ++	2052:31:51544:51546	75273	2	True				
ANR	76041	Identifier	i		75273	0					
ANR	76042	IncDec	++		75273	1					
ANR	76043	CompoundStatement		122:3:2923:2958	75273	3					
ANR	76044	IdentifierDeclStatement	int xval = 1 + g -> layers [ 0 ] . gap + 1 ;	2053:3:51554:51589	75273	0	True				
ANR	76045	IdentifierDecl	xval = 1 + g -> layers [ 0 ] . gap + 1		75273	0					
ANR	76046	IdentifierDeclType	int		75273	0					
ANR	76047	Identifier	xval		75273	1					
ANR	76048	AssignmentExpression	xval = 1 + g -> layers [ 0 ] . gap + 1		75273	2		=			
ANR	76049	Identifier	xval		75273	0					
ANR	76050	AdditiveExpression	1 + g -> layers [ 0 ] . gap + 1		75273	1		+			
ANR	76051	PrimaryExpression	1		75273	0					
ANR	76052	AdditiveExpression	g -> layers [ 0 ] . gap + 1		75273	1		+			
ANR	76053	MemberAccess	g -> layers [ 0 ] . gap		75273	0					
ANR	76054	ArrayIndexing	g -> layers [ 0 ]		75273	0					
ANR	76055	PtrMemberAccess	g -> layers		75273	0					
ANR	76056	Identifier	g		75273	0					
ANR	76057	Identifier	layers		75273	1					
ANR	76058	PrimaryExpression	0		75273	1					
ANR	76059	Identifier	gap		75273	1					
ANR	76060	PrimaryExpression	1		75273	1					
ANR	76061	ForStatement	for ( k = 1 ; k <= i ; k ++ )		75273	1					
ANR	76062	ForInit	k = 1 ;	2054:8:51599:51604	75273	0	True				
ANR	76063	AssignmentExpression	k = 1		75273	0		=			
ANR	76064	Identifier	k		75273	0					
ANR	76065	PrimaryExpression	1		75273	1					
ANR	76066	Condition	k <= i	2054:15:51606:51611	75273	1	True				
ANR	76067	RelationalExpression	k <= i		75273	0		<=			
ANR	76068	Identifier	k		75273	0					
ANR	76069	Identifier	i		75273	1					
ANR	76070	PostIncDecOperationExpression	k ++	2054:23:51614:51616	75273	2	True				
ANR	76071	Identifier	k		75273	0					
ANR	76072	IncDec	++		75273	1					
ANR	76073	CompoundStatement		123:28:2988:2988	75273	3					
ANR	76074	ExpressionStatement	xval += g -> layers [ k - 1 ] . width + g -> layers [ k ] . gap + 3	2055:4:51625:51676	75273	0	True				
ANR	76075	AssignmentExpression	xval += g -> layers [ k - 1 ] . width + g -> layers [ k ] . gap + 3		75273	0		+=			
ANR	76076	Identifier	xval		75273	0					
ANR	76077	AdditiveExpression	g -> layers [ k - 1 ] . width + g -> layers [ k ] . gap + 3		75273	1		+			
ANR	76078	MemberAccess	g -> layers [ k - 1 ] . width		75273	0					
ANR	76079	ArrayIndexing	g -> layers [ k - 1 ]		75273	0					
ANR	76080	PtrMemberAccess	g -> layers		75273	0					
ANR	76081	Identifier	g		75273	0					
ANR	76082	Identifier	layers		75273	1					
ANR	76083	AdditiveExpression	k - 1		75273	1		-			
ANR	76084	Identifier	k		75273	0					
ANR	76085	PrimaryExpression	1		75273	1					
ANR	76086	Identifier	width		75273	1					
ANR	76087	AdditiveExpression	g -> layers [ k ] . gap + 3		75273	1		+			
ANR	76088	MemberAccess	g -> layers [ k ] . gap		75273	0					
ANR	76089	ArrayIndexing	g -> layers [ k ]		75273	0					
ANR	76090	PtrMemberAccess	g -> layers		75273	0					
ANR	76091	Identifier	g		75273	0					
ANR	76092	Identifier	layers		75273	1					
ANR	76093	Identifier	k		75273	1					
ANR	76094	Identifier	gap		75273	1					
ANR	76095	PrimaryExpression	3		75273	1					
ANR	76096	ForStatement	for ( j = 0 ; j < g -> layers [ i ] . n_nodes ; j ++ )		75273	2					
ANR	76097	ForInit	j = 0 ;	2057:8:51691:51696	75273	0	True				
ANR	76098	AssignmentExpression	j = 0		75273	0		=			
ANR	76099	Identifier	j		75273	0					
ANR	76100	PrimaryExpression	0		75273	1					
ANR	76101	Condition	j < g -> layers [ i ] . n_nodes	2057:15:51698:51721	75273	1	True				
ANR	76102	RelationalExpression	j < g -> layers [ i ] . n_nodes		75273	0		<			
ANR	76103	Identifier	j		75273	0					
ANR	76104	MemberAccess	g -> layers [ i ] . n_nodes		75273	1					
ANR	76105	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	76106	PtrMemberAccess	g -> layers		75273	0					
ANR	76107	Identifier	g		75273	0					
ANR	76108	Identifier	layers		75273	1					
ANR	76109	Identifier	i		75273	1					
ANR	76110	Identifier	n_nodes		75273	1					
ANR	76111	PostIncDecOperationExpression	j ++	2057:41:51724:51726	75273	2	True				
ANR	76112	Identifier	j		75273	0					
ANR	76113	IncDec	++		75273	1					
ANR	76114	CompoundStatement		127:4:3104:3149	75273	3					
ANR	76115	IdentifierDeclStatement	RANode * n = get_anode ( g -> layers [ i ] . nodes [ j ] ) ;	2058:4:51735:51780	75273	0	True				
ANR	76116	IdentifierDecl	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	0					
ANR	76117	IdentifierDeclType	RANode *		75273	0					
ANR	76118	Identifier	n		75273	1					
ANR	76119	AssignmentExpression	* n = get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	2		=			
ANR	76120	Identifier	n		75273	0					
ANR	76121	CallExpression	get_anode ( g -> layers [ i ] . nodes [ j ] )		75273	1					
ANR	76122	Callee	get_anode		75273	0					
ANR	76123	Identifier	get_anode		75273	0					
ANR	76124	ArgumentList	g -> layers [ i ] . nodes [ j ]		75273	1					
ANR	76125	Argument	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	76126	ArrayIndexing	g -> layers [ i ] . nodes [ j ]		75273	0					
ANR	76127	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	76128	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	76129	PtrMemberAccess	g -> layers		75273	0					
ANR	76130	Identifier	g		75273	0					
ANR	76131	Identifier	layers		75273	1					
ANR	76132	Identifier	i		75273	1					
ANR	76133	Identifier	nodes		75273	1					
ANR	76134	Identifier	j		75273	1					
ANR	76135	ExpressionStatement	n -> x = xval	2059:4:51786:51797	75273	1	True				
ANR	76136	AssignmentExpression	n -> x = xval		75273	0		=			
ANR	76137	PtrMemberAccess	n -> x		75273	0					
ANR	76138	Identifier	n		75273	0					
ANR	76139	Identifier	x		75273	1					
ANR	76140	Identifier	xval		75273	1					
ANR	76141	BreakStatement	break ;	2062:2:51810:51815	75273	10	True				
ANR	76142	ExpressionStatement	backedge_info ( g )	2065:1:51822:51839	75273	27	True				
ANR	76143	CallExpression	backedge_info ( g )		75273	0					
ANR	76144	Callee	backedge_info		75273	0					
ANR	76145	Identifier	backedge_info		75273	0					
ANR	76146	ArgumentList	g		75273	1					
ANR	76147	Argument	g		75273	0					
ANR	76148	Identifier	g		75273	0					
ANR	76149	ForStatement	for ( i = 0 ; i < g -> n_layers ; ++ i )		75273	28					
ANR	76150	ForInit	i = 0 ;	2071:6:51963:51968	75273	0	True				
ANR	76151	AssignmentExpression	i = 0		75273	0		=			
ANR	76152	Identifier	i		75273	0					
ANR	76153	PrimaryExpression	0		75273	1					
ANR	76154	Condition	i < g -> n_layers	2071:13:51970:51984	75273	1	True				
ANR	76155	RelationalExpression	i < g -> n_layers		75273	0		<			
ANR	76156	Identifier	i		75273	0					
ANR	76157	PtrMemberAccess	g -> n_layers		75273	1					
ANR	76158	Identifier	g		75273	0					
ANR	76159	Identifier	n_layers		75273	1					
ANR	76160	UnaryExpression	++ i	2071:30:51987:51989	75273	2	True				
ANR	76161	IncDec	++		75273	0					
ANR	76162	Identifier	i		75273	1					
ANR	76163	CompoundStatement		140:35:3361:3361	75273	3					
ANR	76164	ExpressionStatement	free ( g -> layers [ i ] . nodes )	2072:2:51996:52021	75273	0	True				
ANR	76165	CallExpression	free ( g -> layers [ i ] . nodes )		75273	0					
ANR	76166	Callee	free		75273	0					
ANR	76167	Identifier	free		75273	0					
ANR	76168	ArgumentList	g -> layers [ i ] . nodes		75273	1					
ANR	76169	Argument	g -> layers [ i ] . nodes		75273	0					
ANR	76170	MemberAccess	g -> layers [ i ] . nodes		75273	0					
ANR	76171	ArrayIndexing	g -> layers [ i ]		75273	0					
ANR	76172	PtrMemberAccess	g -> layers		75273	0					
ANR	76173	Identifier	g		75273	0					
ANR	76174	Identifier	layers		75273	1					
ANR	76175	Identifier	i		75273	1					
ANR	76176	Identifier	nodes		75273	1					
ANR	76177	ExpressionStatement	free ( g -> layers )	2074:1:52027:52043	75273	29	True				
ANR	76178	CallExpression	free ( g -> layers )		75273	0					
ANR	76179	Callee	free		75273	0					
ANR	76180	Identifier	free		75273	0					
ANR	76181	ArgumentList	g -> layers		75273	1					
ANR	76182	Argument	g -> layers		75273	0					
ANR	76183	PtrMemberAccess	g -> layers		75273	0					
ANR	76184	Identifier	g		75273	0					
ANR	76185	Identifier	layers		75273	1					
ANR	76186	ExpressionStatement	r_list_free ( g -> long_edges )	2075:1:52046:52073	75273	30	True				
ANR	76187	CallExpression	r_list_free ( g -> long_edges )		75273	0					
ANR	76188	Callee	r_list_free		75273	0					
ANR	76189	Identifier	r_list_free		75273	0					
ANR	76190	ArgumentList	g -> long_edges		75273	1					
ANR	76191	Argument	g -> long_edges		75273	0					
ANR	76192	PtrMemberAccess	g -> long_edges		75273	0					
ANR	76193	Identifier	g		75273	0					
ANR	76194	Identifier	long_edges		75273	1					
ANR	76195	ExpressionStatement	r_list_free ( g -> back_edges )	2076:1:52076:52103	75273	31	True				
ANR	76196	CallExpression	r_list_free ( g -> back_edges )		75273	0					
ANR	76197	Callee	r_list_free		75273	0					
ANR	76198	Identifier	r_list_free		75273	0					
ANR	76199	ArgumentList	g -> back_edges		75273	1					
ANR	76200	Argument	g -> back_edges		75273	0					
ANR	76201	PtrMemberAccess	g -> back_edges		75273	0					
ANR	76202	Identifier	g		75273	0					
ANR	76203	Identifier	back_edges		75273	1					
ANR	76204	ExpressionStatement	r_cons_break_pop ( )	2077:1:52106:52125	75273	32	True				
ANR	76205	CallExpression	r_cons_break_pop ( )		75273	0					
ANR	76206	Callee	r_cons_break_pop		75273	0					
ANR	76207	Identifier	r_cons_break_pop		75273	0					
ANR	76208	ArgumentList			75273	1					
ANR	76209	ReturnType	static void		75273	1					
ANR	76210	Identifier	set_layout		75273	2					
ANR	76211	ParameterList	RAGraph * g		75273	3					
ANR	76212	Parameter	RAGraph * g	1932:23:48618:48627	75273	0	True				
ANR	76213	ParameterType	RAGraph *		75273	0					
ANR	76214	Identifier	g		75273	1					
ANR	76215	CFGEntryNode	ENTRY		75273		True				
ANR	76216	CFGExitNode	EXIT		75273		True				
ANR	76217	Symbol	g -> edges		75273						
ANR	76218	Symbol	g -> n_layers		75273						
ANR	76219	Symbol	g -> back_edges		75273						
ANR	76220	Symbol	* * * * g		75273						
ANR	76221	Symbol	xval		75273						
ANR	76222	Symbol	g -> is_tiny		75273						
ANR	76223	Symbol	from		75273						
ANR	76224	Symbol	* g -> layers [ i ] . nodes		75273						
ANR	76225	Symbol	* * j		75273						
ANR	76226	Symbol	* * i		75273						
ANR	76227	Symbol	a -> is_dummy		75273						
ANR	76228	Symbol	g -> long_edges		75273						
ANR	76229	Symbol	e -> from		75273						
ANR	76230	Symbol	NULL		75273						
ANR	76231	Symbol	* * g		75273						
ANR	76232	Symbol	a -> layer_height		75273						
ANR	76233	Symbol	n -> h		75273						
ANR	76234	Symbol	g -> layers [ i ] . width		75273						
ANR	76235	Symbol	it		75273						
ANR	76236	Symbol	g -> layers [ k - 1 ] . width		75273						
ANR	76237	Symbol	n -> y		75273						
ANR	76238	Symbol	rh		75273						
ANR	76239	Symbol	n -> x		75273						
ANR	76240	Symbol	n -> w		75273						
ANR	76241	Symbol	* * * i		75273						
ANR	76242	Symbol	* g -> layers		75273						
ANR	76243	Symbol	* * * g		75273						
ANR	76244	Symbol	g -> layers [ k ] . gap		75273						
ANR	76245	Symbol	tmp_y		75273						
ANR	76246	Symbol	rw		75273						
ANR	76247	Symbol	a -> h		75273						
ANR	76248	Symbol	e -> to		75273						
ANR	76249	Symbol	g -> layers [ k - 1 ] . height		75273						
ANR	76250	Symbol	g -> layers [ i ] . nodes		75273						
ANR	76251	Symbol	* * g -> layers [ i ] . nodes		75273						
ANR	76252	Symbol	r_cons_is_breaked		75273						
ANR	76253	Symbol	m -> h		75273						
ANR	76254	Symbol	g -> layers [ i ] . nodes [ j ] -> data		75273						
ANR	76255	Symbol	* * * g -> layers		75273						
ANR	76256	Symbol	VERTICAL_NODE_SPACING		75273						
ANR	76257	Symbol	g -> layers [ i ] . height		75273						
ANR	76258	Symbol	a		75273						
ANR	76259	Symbol	get_anode		75273						
ANR	76260	Symbol	g -> layout		75273						
ANR	76261	Symbol	e		75273						
ANR	76262	Symbol	g		75273						
ANR	76263	Symbol	i		75273						
ANR	76264	Symbol	j		75273						
ANR	76265	Symbol	k		75273						
ANR	76266	Symbol	* a		75273						
ANR	76267	Symbol	e -> nth		75273						
ANR	76268	Symbol	m		75273						
ANR	76269	Symbol	n		75273						
ANR	76270	Symbol	* e		75273						
ANR	76271	Symbol	* g		75273						
ANR	76272	Symbol	* i		75273						
ANR	76273	Symbol	g -> layers [ 0 ] . gap		75273						
ANR	76274	Symbol	* j		75273						
ANR	76275	Symbol	* k		75273						
ANR	76276	Symbol	a -> layer_width		75273						
ANR	76277	Symbol	* m		75273						
ANR	76278	Symbol	* n		75273						
ANR	76279	Symbol	a -> w		75273						
ANR	76280	Symbol	g -> layers [ i ] . n_nodes		75273						
ANR	76281	Symbol	to		75273						
ANR	76282	Symbol	g -> layers		75273						
ANR	76283	Symbol	* * g -> layers		75273						
ANR	76284	Symbol	r_list_new		75273						
ANR	76285	Function	get_body	2080:0:52130:54478							
ANR	76286	FunctionDef	"get_body (RCore * core , ut64 addr , int size , int opts)"		76285	0					
ANR	76287	CompoundStatement		2080:66:52196:54478	76285	0					
ANR	76288	IdentifierDeclStatement	char * body ;	2081:1:52199:52209	76285	0	True				
ANR	76289	IdentifierDecl	* body		76285	0					
ANR	76290	IdentifierDeclType	char *		76285	0					
ANR	76291	Identifier	body		76285	1					
ANR	76292	IdentifierDeclStatement	RConfigHold * hc = r_config_hold_new ( core -> config ) ;	2082:1:52212:52262	76285	1	True				
ANR	76293	IdentifierDecl	* hc = r_config_hold_new ( core -> config )		76285	0					
ANR	76294	IdentifierDeclType	RConfigHold *		76285	0					
ANR	76295	Identifier	hc		76285	1					
ANR	76296	AssignmentExpression	* hc = r_config_hold_new ( core -> config )		76285	2		=			
ANR	76297	Identifier	hc		76285	0					
ANR	76298	CallExpression	r_config_hold_new ( core -> config )		76285	1					
ANR	76299	Callee	r_config_hold_new		76285	0					
ANR	76300	Identifier	r_config_hold_new		76285	0					
ANR	76301	ArgumentList	core -> config		76285	1					
ANR	76302	Argument	core -> config		76285	0					
ANR	76303	PtrMemberAccess	core -> config		76285	0					
ANR	76304	Identifier	core		76285	0					
ANR	76305	Identifier	config		76285	1					
ANR	76306	IfStatement	if ( ! hc )		76285	2					
ANR	76307	Condition	! hc	2083:5:52269:52271	76285	0	True				
ANR	76308	UnaryOperationExpression	! hc		76285	0					
ANR	76309	UnaryOperator	!		76285	0					
ANR	76310	Identifier	hc		76285	1					
ANR	76311	CompoundStatement		4:10:77:77	76285	1					
ANR	76312	ReturnStatement	return NULL ;	2084:2:52278:52289	76285	0	True				
ANR	76313	Identifier	NULL		76285	0					
ANR	76314	ExpressionStatement	"r_config_hold_i ( hc , ""asm.lines"" , ""asm.bytes"" , ""asm.cmt.col"" , ""asm.marks"" , ""asm.offset"" , ""asm.comments"" , ""asm.cmt.right"" , ""asm.bb.line"" , NULL )"	2086:1:52295:52441	76285	3	True				
ANR	76315	CallExpression	"r_config_hold_i ( hc , ""asm.lines"" , ""asm.bytes"" , ""asm.cmt.col"" , ""asm.marks"" , ""asm.offset"" , ""asm.comments"" , ""asm.cmt.right"" , ""asm.bb.line"" , NULL )"		76285	0					
ANR	76316	Callee	r_config_hold_i		76285	0					
ANR	76317	Identifier	r_config_hold_i		76285	0					
ANR	76318	ArgumentList	hc		76285	1					
ANR	76319	Argument	hc		76285	0					
ANR	76320	Identifier	hc		76285	0					
ANR	76321	Argument	"""asm.lines"""		76285	1					
ANR	76322	PrimaryExpression	"""asm.lines"""		76285	0					
ANR	76323	Argument	"""asm.bytes"""		76285	2					
ANR	76324	PrimaryExpression	"""asm.bytes"""		76285	0					
ANR	76325	Argument	"""asm.cmt.col"""		76285	3					
ANR	76326	PrimaryExpression	"""asm.cmt.col"""		76285	0					
ANR	76327	Argument	"""asm.marks"""		76285	4					
ANR	76328	PrimaryExpression	"""asm.marks"""		76285	0					
ANR	76329	Argument	"""asm.offset"""		76285	5					
ANR	76330	PrimaryExpression	"""asm.offset"""		76285	0					
ANR	76331	Argument	"""asm.comments"""		76285	6					
ANR	76332	PrimaryExpression	"""asm.comments"""		76285	0					
ANR	76333	Argument	"""asm.cmt.right"""		76285	7					
ANR	76334	PrimaryExpression	"""asm.cmt.right"""		76285	0					
ANR	76335	Argument	"""asm.bb.line"""		76285	8					
ANR	76336	PrimaryExpression	"""asm.bb.line"""		76285	0					
ANR	76337	Argument	NULL		76285	9					
ANR	76338	Identifier	NULL		76285	0					
ANR	76339	IdentifierDeclStatement	"const bool o_comments = r_config_get_i ( core -> config , ""graph.comments"" ) ;"	2089:1:52444:52515	76285	4	True				
ANR	76340	IdentifierDecl	"o_comments = r_config_get_i ( core -> config , ""graph.comments"" )"		76285	0					
ANR	76341	IdentifierDeclType	const bool		76285	0					
ANR	76342	Identifier	o_comments		76285	1					
ANR	76343	AssignmentExpression	"o_comments = r_config_get_i ( core -> config , ""graph.comments"" )"		76285	2		=			
ANR	76344	Identifier	o_comments		76285	0					
ANR	76345	CallExpression	"r_config_get_i ( core -> config , ""graph.comments"" )"		76285	1					
ANR	76346	Callee	r_config_get_i		76285	0					
ANR	76347	Identifier	r_config_get_i		76285	0					
ANR	76348	ArgumentList	core -> config		76285	1					
ANR	76349	Argument	core -> config		76285	0					
ANR	76350	PtrMemberAccess	core -> config		76285	0					
ANR	76351	Identifier	core		76285	0					
ANR	76352	Identifier	config		76285	1					
ANR	76353	Argument	"""graph.comments"""		76285	1					
ANR	76354	PrimaryExpression	"""graph.comments"""		76285	0					
ANR	76355	IdentifierDeclStatement	"const bool o_cmtright = r_config_get_i ( core -> config , ""graph.cmtright"" ) ;"	2090:1:52518:52589	76285	5	True				
ANR	76356	IdentifierDecl	"o_cmtright = r_config_get_i ( core -> config , ""graph.cmtright"" )"		76285	0					
ANR	76357	IdentifierDeclType	const bool		76285	0					
ANR	76358	Identifier	o_cmtright		76285	1					
ANR	76359	AssignmentExpression	"o_cmtright = r_config_get_i ( core -> config , ""graph.cmtright"" )"		76285	2		=			
ANR	76360	Identifier	o_cmtright		76285	0					
ANR	76361	CallExpression	"r_config_get_i ( core -> config , ""graph.cmtright"" )"		76285	1					
ANR	76362	Callee	r_config_get_i		76285	0					
ANR	76363	Identifier	r_config_get_i		76285	0					
ANR	76364	ArgumentList	core -> config		76285	1					
ANR	76365	Argument	core -> config		76285	0					
ANR	76366	PtrMemberAccess	core -> config		76285	0					
ANR	76367	Identifier	core		76285	0					
ANR	76368	Identifier	config		76285	1					
ANR	76369	Argument	"""graph.cmtright"""		76285	1					
ANR	76370	PrimaryExpression	"""graph.cmtright"""		76285	0					
ANR	76371	IdentifierDeclStatement	"const bool o_bytes = r_config_get_i ( core -> config , ""graph.bytes"" ) ;"	2091:1:52592:52657	76285	6	True				
ANR	76372	IdentifierDecl	"o_bytes = r_config_get_i ( core -> config , ""graph.bytes"" )"		76285	0					
ANR	76373	IdentifierDeclType	const bool		76285	0					
ANR	76374	Identifier	o_bytes		76285	1					
ANR	76375	AssignmentExpression	"o_bytes = r_config_get_i ( core -> config , ""graph.bytes"" )"		76285	2		=			
ANR	76376	Identifier	o_bytes		76285	0					
ANR	76377	CallExpression	"r_config_get_i ( core -> config , ""graph.bytes"" )"		76285	1					
ANR	76378	Callee	r_config_get_i		76285	0					
ANR	76379	Identifier	r_config_get_i		76285	0					
ANR	76380	ArgumentList	core -> config		76285	1					
ANR	76381	Argument	core -> config		76285	0					
ANR	76382	PtrMemberAccess	core -> config		76285	0					
ANR	76383	Identifier	core		76285	0					
ANR	76384	Identifier	config		76285	1					
ANR	76385	Argument	"""graph.bytes"""		76285	1					
ANR	76386	PrimaryExpression	"""graph.bytes"""		76285	0					
ANR	76387	IdentifierDeclStatement	"const bool o_flags_in_bytes = r_config_get_i ( core -> config , ""asm.flags.inbytes"" ) ;"	2092:1:52660:52740	76285	7	True				
ANR	76388	IdentifierDecl	"o_flags_in_bytes = r_config_get_i ( core -> config , ""asm.flags.inbytes"" )"		76285	0					
ANR	76389	IdentifierDeclType	const bool		76285	0					
ANR	76390	Identifier	o_flags_in_bytes		76285	1					
ANR	76391	AssignmentExpression	"o_flags_in_bytes = r_config_get_i ( core -> config , ""asm.flags.inbytes"" )"		76285	2		=			
ANR	76392	Identifier	o_flags_in_bytes		76285	0					
ANR	76393	CallExpression	"r_config_get_i ( core -> config , ""asm.flags.inbytes"" )"		76285	1					
ANR	76394	Callee	r_config_get_i		76285	0					
ANR	76395	Identifier	r_config_get_i		76285	0					
ANR	76396	ArgumentList	core -> config		76285	1					
ANR	76397	Argument	core -> config		76285	0					
ANR	76398	PtrMemberAccess	core -> config		76285	0					
ANR	76399	Identifier	core		76285	0					
ANR	76400	Identifier	config		76285	1					
ANR	76401	Argument	"""asm.flags.inbytes"""		76285	1					
ANR	76402	PrimaryExpression	"""asm.flags.inbytes"""		76285	0					
ANR	76403	IdentifierDeclStatement	"const bool o_graph_offset = r_config_get_i ( core -> config , ""graph.offset"" ) ;"	2093:1:52743:52816	76285	8	True				
ANR	76404	IdentifierDecl	"o_graph_offset = r_config_get_i ( core -> config , ""graph.offset"" )"		76285	0					
ANR	76405	IdentifierDeclType	const bool		76285	0					
ANR	76406	Identifier	o_graph_offset		76285	1					
ANR	76407	AssignmentExpression	"o_graph_offset = r_config_get_i ( core -> config , ""graph.offset"" )"		76285	2		=			
ANR	76408	Identifier	o_graph_offset		76285	0					
ANR	76409	CallExpression	"r_config_get_i ( core -> config , ""graph.offset"" )"		76285	1					
ANR	76410	Callee	r_config_get_i		76285	0					
ANR	76411	Identifier	r_config_get_i		76285	0					
ANR	76412	ArgumentList	core -> config		76285	1					
ANR	76413	Argument	core -> config		76285	0					
ANR	76414	PtrMemberAccess	core -> config		76285	0					
ANR	76415	Identifier	core		76285	0					
ANR	76416	Identifier	config		76285	1					
ANR	76417	Argument	"""graph.offset"""		76285	1					
ANR	76418	PrimaryExpression	"""graph.offset"""		76285	0					
ANR	76419	IdentifierDeclStatement	int o_cursor = core -> print -> cur_enabled ;	2094:1:52819:52858	76285	9	True				
ANR	76420	IdentifierDecl	o_cursor = core -> print -> cur_enabled		76285	0					
ANR	76421	IdentifierDeclType	int		76285	0					
ANR	76422	Identifier	o_cursor		76285	1					
ANR	76423	AssignmentExpression	o_cursor = core -> print -> cur_enabled		76285	2		=			
ANR	76424	Identifier	o_cursor		76285	0					
ANR	76425	PtrMemberAccess	core -> print -> cur_enabled		76285	1					
ANR	76426	PtrMemberAccess	core -> print		76285	0					
ANR	76427	Identifier	core		76285	0					
ANR	76428	Identifier	print		76285	1					
ANR	76429	Identifier	cur_enabled		76285	1					
ANR	76430	IfStatement	if ( opts & BODY_COMMENTS )		76285	10					
ANR	76431	Condition	opts & BODY_COMMENTS	2095:5:52865:52884	76285	0	True				
ANR	76432	BitAndExpression	opts & BODY_COMMENTS		76285	0		&			
ANR	76433	Identifier	opts		76285	0					
ANR	76434	Identifier	BODY_COMMENTS		76285	1					
ANR	76435	CompoundStatement		16:27:690:690	76285	1					
ANR	76436	ExpressionStatement	"r_core_visual_toggle_decompiler_disasm ( core , true , false )"	2096:2:52891:52949	76285	0	True				
ANR	76437	CallExpression	"r_core_visual_toggle_decompiler_disasm ( core , true , false )"		76285	0					
ANR	76438	Callee	r_core_visual_toggle_decompiler_disasm		76285	0					
ANR	76439	Identifier	r_core_visual_toggle_decompiler_disasm		76285	0					
ANR	76440	ArgumentList	core		76285	1					
ANR	76441	Argument	core		76285	0					
ANR	76442	Identifier	core		76285	0					
ANR	76443	Argument	true		76285	1					
ANR	76444	Identifier	true		76285	0					
ANR	76445	Argument	false		76285	2					
ANR	76446	Identifier	false		76285	0					
ANR	76447	Statement	char	2097:2:52953:52956	76285	1	True				
ANR	76448	Statement	*	2097:7:52958:52958	76285	2	True				
ANR	76449	Statement	res	2097:9:52960:52962	76285	3	True				
ANR	76450	Statement	=	2097:13:52964:52964	76285	4	True				
ANR	76451	Statement	r_core_cmd_strf	2097:15:52966:52980	76285	5	True				
ANR	76452	Statement	(	2097:31:52982:52982	76285	6	True				
ANR	76453	Statement	core	2097:32:52983:52986	76285	7	True				
ANR	76454	Statement	","	2097:36:52987:52987	76285	8	True				
ANR	76455	Statement	"""pD %d @ 0x%08"""	2097:38:52989:53003	76285	9	True				
ANR	76456	Statement	PFMT64x	2097:53:53004:53010	76285	10	True				
ANR	76457	Statement	","	2097:60:53011:53011	76285	11	True				
ANR	76458	Statement	size	2097:62:53013:53016	76285	12	True				
ANR	76459	Statement	","	2097:66:53017:53017	76285	13	True				
ANR	76460	Statement	addr	2097:68:53019:53022	76285	14	True				
ANR	76461	Statement	)	2097:72:53023:53023	76285	15	True				
ANR	76462	ExpressionStatement		2097:73:53024:53024	76285	16	True				
ANR	76463	ExpressionStatement	"res = r_str_replace ( res , ""; "" , """" , true )"	2098:2:53028:53069	76285	17	True				
ANR	76464	AssignmentExpression	"res = r_str_replace ( res , ""; "" , """" , true )"		76285	0		=			
ANR	76465	Identifier	res		76285	0					
ANR	76466	CallExpression	"r_str_replace ( res , ""; "" , """" , true )"		76285	1					
ANR	76467	Callee	r_str_replace		76285	0					
ANR	76468	Identifier	r_str_replace		76285	0					
ANR	76469	ArgumentList	res		76285	1					
ANR	76470	Argument	res		76285	0					
ANR	76471	Identifier	res		76285	0					
ANR	76472	Argument	"""; """		76285	1					
ANR	76473	PrimaryExpression	"""; """		76285	0					
ANR	76474	Argument	""""""		76285	2					
ANR	76475	PrimaryExpression	""""""		76285	0					
ANR	76476	Argument	true		76285	3					
ANR	76477	Identifier	true		76285	0					
ANR	76478	ExpressionStatement	r_str_trim ( res )	2100:2:53125:53141	76285	18	True				
ANR	76479	CallExpression	r_str_trim ( res )		76285	0					
ANR	76480	Callee	r_str_trim		76285	0					
ANR	76481	Identifier	r_str_trim		76285	0					
ANR	76482	ArgumentList	res		76285	1					
ANR	76483	Argument	res		76285	0					
ANR	76484	Identifier	res		76285	0					
ANR	76485	ExpressionStatement	res = r_str_trim_lines ( res )	2101:2:53145:53173	76285	19	True				
ANR	76486	AssignmentExpression	res = r_str_trim_lines ( res )		76285	0		=			
ANR	76487	Identifier	res		76285	0					
ANR	76488	CallExpression	r_str_trim_lines ( res )		76285	1					
ANR	76489	Callee	r_str_trim_lines		76285	0					
ANR	76490	Identifier	r_str_trim_lines		76285	0					
ANR	76491	ArgumentList	res		76285	1					
ANR	76492	Argument	res		76285	0					
ANR	76493	Identifier	res		76285	0					
ANR	76494	ExpressionStatement	"r_core_visual_toggle_decompiler_disasm ( core , true , false )"	2102:2:53177:53235	76285	20	True				
ANR	76495	CallExpression	"r_core_visual_toggle_decompiler_disasm ( core , true , false )"		76285	0					
ANR	76496	Callee	r_core_visual_toggle_decompiler_disasm		76285	0					
ANR	76497	Identifier	r_core_visual_toggle_decompiler_disasm		76285	0					
ANR	76498	ArgumentList	core		76285	1					
ANR	76499	Argument	core		76285	0					
ANR	76500	Identifier	core		76285	0					
ANR	76501	Argument	true		76285	1					
ANR	76502	Identifier	true		76285	0					
ANR	76503	Argument	false		76285	2					
ANR	76504	Identifier	false		76285	0					
ANR	76505	ReturnStatement	return res ;	2103:2:53239:53249	76285	21	True				
ANR	76506	Identifier	res		76285	0					
ANR	76507	IdentifierDeclStatement	"const char * cmd = ( opts & BODY_SUMMARY ) ? ""pds"" : ""pD"" ;"	2105:1:53255:53307	76285	11	True				
ANR	76508	IdentifierDecl	"* cmd = ( opts & BODY_SUMMARY ) ? ""pds"" : ""pD"""		76285	0					
ANR	76509	IdentifierDeclType	const char *		76285	0					
ANR	76510	Identifier	cmd		76285	1					
ANR	76511	AssignmentExpression	"* cmd = ( opts & BODY_SUMMARY ) ? ""pds"" : ""pD"""		76285	2		=			
ANR	76512	Identifier	cmd		76285	0					
ANR	76513	ConditionalExpression	"( opts & BODY_SUMMARY ) ? ""pds"" : ""pD"""		76285	1					
ANR	76514	Condition	opts & BODY_SUMMARY		76285	0					
ANR	76515	BitAndExpression	opts & BODY_SUMMARY		76285	0		&			
ANR	76516	Identifier	opts		76285	0					
ANR	76517	Identifier	BODY_SUMMARY		76285	1					
ANR	76518	PrimaryExpression	"""pds"""		76285	1					
ANR	76519	PrimaryExpression	"""pD"""		76285	2					
ANR	76520	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bb.line"" , false )"	2108:1:53333:53384	76285	12	True				
ANR	76521	CallExpression	"r_config_set_i ( core -> config , ""asm.bb.line"" , false )"		76285	0					
ANR	76522	Callee	r_config_set_i		76285	0					
ANR	76523	Identifier	r_config_set_i		76285	0					
ANR	76524	ArgumentList	core -> config		76285	1					
ANR	76525	Argument	core -> config		76285	0					
ANR	76526	PtrMemberAccess	core -> config		76285	0					
ANR	76527	Identifier	core		76285	0					
ANR	76528	Identifier	config		76285	1					
ANR	76529	Argument	"""asm.bb.line"""		76285	1					
ANR	76530	PrimaryExpression	"""asm.bb.line"""		76285	0					
ANR	76531	Argument	false		76285	2					
ANR	76532	Identifier	false		76285	0					
ANR	76533	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.lines"" , false )"	2109:1:53387:53436	76285	13	True				
ANR	76534	CallExpression	"r_config_set_i ( core -> config , ""asm.lines"" , false )"		76285	0					
ANR	76535	Callee	r_config_set_i		76285	0					
ANR	76536	Identifier	r_config_set_i		76285	0					
ANR	76537	ArgumentList	core -> config		76285	1					
ANR	76538	Argument	core -> config		76285	0					
ANR	76539	PtrMemberAccess	core -> config		76285	0					
ANR	76540	Identifier	core		76285	0					
ANR	76541	Identifier	config		76285	1					
ANR	76542	Argument	"""asm.lines"""		76285	1					
ANR	76543	PrimaryExpression	"""asm.lines"""		76285	0					
ANR	76544	Argument	false		76285	2					
ANR	76545	Identifier	false		76285	0					
ANR	76546	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.cmt.col"" , 0 )"	2110:1:53439:53486	76285	14	True				
ANR	76547	CallExpression	"r_config_set_i ( core -> config , ""asm.cmt.col"" , 0 )"		76285	0					
ANR	76548	Callee	r_config_set_i		76285	0					
ANR	76549	Identifier	r_config_set_i		76285	0					
ANR	76550	ArgumentList	core -> config		76285	1					
ANR	76551	Argument	core -> config		76285	0					
ANR	76552	PtrMemberAccess	core -> config		76285	0					
ANR	76553	Identifier	core		76285	0					
ANR	76554	Identifier	config		76285	1					
ANR	76555	Argument	"""asm.cmt.col"""		76285	1					
ANR	76556	PrimaryExpression	"""asm.cmt.col"""		76285	0					
ANR	76557	Argument	0		76285	2					
ANR	76558	PrimaryExpression	0		76285	0					
ANR	76559	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.marks"" , false )"	2111:1:53489:53538	76285	15	True				
ANR	76560	CallExpression	"r_config_set_i ( core -> config , ""asm.marks"" , false )"		76285	0					
ANR	76561	Callee	r_config_set_i		76285	0					
ANR	76562	Identifier	r_config_set_i		76285	0					
ANR	76563	ArgumentList	core -> config		76285	1					
ANR	76564	Argument	core -> config		76285	0					
ANR	76565	PtrMemberAccess	core -> config		76285	0					
ANR	76566	Identifier	core		76285	0					
ANR	76567	Identifier	config		76285	1					
ANR	76568	Argument	"""asm.marks"""		76285	1					
ANR	76569	PrimaryExpression	"""asm.marks"""		76285	0					
ANR	76570	Argument	false		76285	2					
ANR	76571	Identifier	false		76285	0					
ANR	76572	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.cmt.right"" , ( opts & BODY_SUMMARY ) || o_cmtright )"	2112:1:53541:53624	76285	16	True				
ANR	76573	CallExpression	"r_config_set_i ( core -> config , ""asm.cmt.right"" , ( opts & BODY_SUMMARY ) || o_cmtright )"		76285	0					
ANR	76574	Callee	r_config_set_i		76285	0					
ANR	76575	Identifier	r_config_set_i		76285	0					
ANR	76576	ArgumentList	core -> config		76285	1					
ANR	76577	Argument	core -> config		76285	0					
ANR	76578	PtrMemberAccess	core -> config		76285	0					
ANR	76579	Identifier	core		76285	0					
ANR	76580	Identifier	config		76285	1					
ANR	76581	Argument	"""asm.cmt.right"""		76285	1					
ANR	76582	PrimaryExpression	"""asm.cmt.right"""		76285	0					
ANR	76583	Argument	( opts & BODY_SUMMARY ) || o_cmtright		76285	2					
ANR	76584	OrExpression	( opts & BODY_SUMMARY ) || o_cmtright		76285	0		||			
ANR	76585	BitAndExpression	opts & BODY_SUMMARY		76285	0		&			
ANR	76586	Identifier	opts		76285	0					
ANR	76587	Identifier	BODY_SUMMARY		76285	1					
ANR	76588	Identifier	o_cmtright		76285	1					
ANR	76589	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.comments"" , ( opts & BODY_SUMMARY ) || o_comments )"	2113:1:53627:53709	76285	17	True				
ANR	76590	CallExpression	"r_config_set_i ( core -> config , ""asm.comments"" , ( opts & BODY_SUMMARY ) || o_comments )"		76285	0					
ANR	76591	Callee	r_config_set_i		76285	0					
ANR	76592	Identifier	r_config_set_i		76285	0					
ANR	76593	ArgumentList	core -> config		76285	1					
ANR	76594	Argument	core -> config		76285	0					
ANR	76595	PtrMemberAccess	core -> config		76285	0					
ANR	76596	Identifier	core		76285	0					
ANR	76597	Identifier	config		76285	1					
ANR	76598	Argument	"""asm.comments"""		76285	1					
ANR	76599	PrimaryExpression	"""asm.comments"""		76285	0					
ANR	76600	Argument	( opts & BODY_SUMMARY ) || o_comments		76285	2					
ANR	76601	OrExpression	( opts & BODY_SUMMARY ) || o_comments		76285	0		||			
ANR	76602	BitAndExpression	opts & BODY_SUMMARY		76285	0		&			
ANR	76603	Identifier	opts		76285	0					
ANR	76604	Identifier	BODY_SUMMARY		76285	1					
ANR	76605	Identifier	o_comments		76285	1					
ANR	76606	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bytes"" , ( opts & ( BODY_SUMMARY | BODY_OFFSETS ) ) || o_bytes || o_flags_in_bytes )"	2114:1:53712:53828	76285	18	True				
ANR	76607	CallExpression	"r_config_set_i ( core -> config , ""asm.bytes"" , ( opts & ( BODY_SUMMARY | BODY_OFFSETS ) ) || o_bytes || o_flags_in_bytes )"		76285	0					
ANR	76608	Callee	r_config_set_i		76285	0					
ANR	76609	Identifier	r_config_set_i		76285	0					
ANR	76610	ArgumentList	core -> config		76285	1					
ANR	76611	Argument	core -> config		76285	0					
ANR	76612	PtrMemberAccess	core -> config		76285	0					
ANR	76613	Identifier	core		76285	0					
ANR	76614	Identifier	config		76285	1					
ANR	76615	Argument	"""asm.bytes"""		76285	1					
ANR	76616	PrimaryExpression	"""asm.bytes"""		76285	0					
ANR	76617	Argument	( opts & ( BODY_SUMMARY | BODY_OFFSETS ) ) || o_bytes || o_flags_in_bytes		76285	2					
ANR	76618	OrExpression	( opts & ( BODY_SUMMARY | BODY_OFFSETS ) ) || o_bytes || o_flags_in_bytes		76285	0		||			
ANR	76619	BitAndExpression	opts & ( BODY_SUMMARY | BODY_OFFSETS )		76285	0		&			
ANR	76620	Identifier	opts		76285	0					
ANR	76621	InclusiveOrExpression	BODY_SUMMARY | BODY_OFFSETS		76285	1		|			
ANR	76622	Identifier	BODY_SUMMARY		76285	0					
ANR	76623	Identifier	BODY_OFFSETS		76285	1					
ANR	76624	OrExpression	o_bytes || o_flags_in_bytes		76285	1		||			
ANR	76625	Identifier	o_bytes		76285	0					
ANR	76626	Identifier	o_flags_in_bytes		76285	1					
ANR	76627	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bb.middle"" , false )"	2116:1:53831:53884	76285	19	True				
ANR	76628	CallExpression	"r_config_set_i ( core -> config , ""asm.bb.middle"" , false )"		76285	0					
ANR	76629	Callee	r_config_set_i		76285	0					
ANR	76630	Identifier	r_config_set_i		76285	0					
ANR	76631	ArgumentList	core -> config		76285	1					
ANR	76632	Argument	core -> config		76285	0					
ANR	76633	PtrMemberAccess	core -> config		76285	0					
ANR	76634	Identifier	core		76285	0					
ANR	76635	Identifier	config		76285	1					
ANR	76636	Argument	"""asm.bb.middle"""		76285	1					
ANR	76637	PrimaryExpression	"""asm.bb.middle"""		76285	0					
ANR	76638	Argument	false		76285	2					
ANR	76639	Identifier	false		76285	0					
ANR	76640	ExpressionStatement	core -> print -> cur_enabled = false	2117:1:53887:53919	76285	20	True				
ANR	76641	AssignmentExpression	core -> print -> cur_enabled = false		76285	0		=			
ANR	76642	PtrMemberAccess	core -> print -> cur_enabled		76285	0					
ANR	76643	PtrMemberAccess	core -> print		76285	0					
ANR	76644	Identifier	core		76285	0					
ANR	76645	Identifier	print		76285	1					
ANR	76646	Identifier	cur_enabled		76285	1					
ANR	76647	Identifier	false		76285	1					
ANR	76648	IfStatement	if ( opts & BODY_OFFSETS || opts & BODY_SUMMARY || o_graph_offset )		76285	21					
ANR	76649	Condition	opts & BODY_OFFSETS || opts & BODY_SUMMARY || o_graph_offset	2119:5:53927:53986	76285	0	True				
ANR	76650	OrExpression	opts & BODY_OFFSETS || opts & BODY_SUMMARY || o_graph_offset		76285	0		||			
ANR	76651	BitAndExpression	opts & BODY_OFFSETS		76285	0		&			
ANR	76652	Identifier	opts		76285	0					
ANR	76653	Identifier	BODY_OFFSETS		76285	1					
ANR	76654	OrExpression	opts & BODY_SUMMARY || o_graph_offset		76285	1		||			
ANR	76655	BitAndExpression	opts & BODY_SUMMARY		76285	0		&			
ANR	76656	Identifier	opts		76285	0					
ANR	76657	Identifier	BODY_SUMMARY		76285	1					
ANR	76658	Identifier	o_graph_offset		76285	1					
ANR	76659	CompoundStatement		40:67:1792:1792	76285	1					
ANR	76660	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.offset"" , true )"	2120:2:53993:54042	76285	0	True				
ANR	76661	CallExpression	"r_config_set_i ( core -> config , ""asm.offset"" , true )"		76285	0					
ANR	76662	Callee	r_config_set_i		76285	0					
ANR	76663	Identifier	r_config_set_i		76285	0					
ANR	76664	ArgumentList	core -> config		76285	1					
ANR	76665	Argument	core -> config		76285	0					
ANR	76666	PtrMemberAccess	core -> config		76285	0					
ANR	76667	Identifier	core		76285	0					
ANR	76668	Identifier	config		76285	1					
ANR	76669	Argument	"""asm.offset"""		76285	1					
ANR	76670	PrimaryExpression	"""asm.offset"""		76285	0					
ANR	76671	Argument	true		76285	2					
ANR	76672	Identifier	true		76285	0					
ANR	76673	ElseStatement	else		76285	0					
ANR	76674	CompoundStatement		42:8:1855:1855	76285	0					
ANR	76675	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.offset"" , false )"	2122:2:54056:54106	76285	0	True				
ANR	76676	CallExpression	"r_config_set_i ( core -> config , ""asm.offset"" , false )"		76285	0					
ANR	76677	Callee	r_config_set_i		76285	0					
ANR	76678	Identifier	r_config_set_i		76285	0					
ANR	76679	ArgumentList	core -> config		76285	1					
ANR	76680	Argument	core -> config		76285	0					
ANR	76681	PtrMemberAccess	core -> config		76285	0					
ANR	76682	Identifier	core		76285	0					
ANR	76683	Identifier	config		76285	1					
ANR	76684	Argument	"""asm.offset"""		76285	1					
ANR	76685	PrimaryExpression	"""asm.offset"""		76285	0					
ANR	76686	Argument	false		76285	2					
ANR	76687	Identifier	false		76285	0					
ANR	76688	IdentifierDeclStatement	"bool html = r_config_get_i ( core -> config , ""scr.html"" ) ;"	2125:1:54113:54166	76285	22	True				
ANR	76689	IdentifierDecl	"html = r_config_get_i ( core -> config , ""scr.html"" )"		76285	0					
ANR	76690	IdentifierDeclType	bool		76285	0					
ANR	76691	Identifier	html		76285	1					
ANR	76692	AssignmentExpression	"html = r_config_get_i ( core -> config , ""scr.html"" )"		76285	2		=			
ANR	76693	Identifier	html		76285	0					
ANR	76694	CallExpression	"r_config_get_i ( core -> config , ""scr.html"" )"		76285	1					
ANR	76695	Callee	r_config_get_i		76285	0					
ANR	76696	Identifier	r_config_get_i		76285	0					
ANR	76697	ArgumentList	core -> config		76285	1					
ANR	76698	Argument	core -> config		76285	0					
ANR	76699	PtrMemberAccess	core -> config		76285	0					
ANR	76700	Identifier	core		76285	0					
ANR	76701	Identifier	config		76285	1					
ANR	76702	Argument	"""scr.html"""		76285	1					
ANR	76703	PrimaryExpression	"""scr.html"""		76285	0					
ANR	76704	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.html"" , 0 )"	2126:1:54169:54213	76285	23	True				
ANR	76705	CallExpression	"r_config_set_i ( core -> config , ""scr.html"" , 0 )"		76285	0					
ANR	76706	Callee	r_config_set_i		76285	0					
ANR	76707	Identifier	r_config_set_i		76285	0					
ANR	76708	ArgumentList	core -> config		76285	1					
ANR	76709	Argument	core -> config		76285	0					
ANR	76710	PtrMemberAccess	core -> config		76285	0					
ANR	76711	Identifier	core		76285	0					
ANR	76712	Identifier	config		76285	1					
ANR	76713	Argument	"""scr.html"""		76285	1					
ANR	76714	PrimaryExpression	"""scr.html"""		76285	0					
ANR	76715	Argument	0		76285	2					
ANR	76716	PrimaryExpression	0		76285	0					
ANR	76717	Statement	body	2127:1:54216:54219	76285	24	True				
ANR	76718	Statement	=	2127:6:54221:54221	76285	25	True				
ANR	76719	Statement	r_core_cmd_strf	2127:8:54223:54237	76285	26	True				
ANR	76720	Statement	(	2127:24:54239:54239	76285	27	True				
ANR	76721	Statement	core	2127:25:54240:54243	76285	28	True				
ANR	76722	Statement	","	2127:29:54244:54244	76285	29	True				
ANR	76723	Statement	"""%s %d @ 0x%08"""	2128:3:54249:54263	76285	30	True				
ANR	76724	Statement	PFMT64x	2128:18:54264:54270	76285	31	True				
ANR	76725	Statement	","	2128:25:54271:54271	76285	32	True				
ANR	76726	Statement	cmd	2128:27:54273:54275	76285	33	True				
ANR	76727	Statement	","	2128:30:54276:54276	76285	34	True				
ANR	76728	Statement	size	2128:32:54278:54281	76285	35	True				
ANR	76729	Statement	","	2128:36:54282:54282	76285	36	True				
ANR	76730	Statement	addr	2128:38:54284:54287	76285	37	True				
ANR	76731	Statement	)	2128:42:54288:54288	76285	38	True				
ANR	76732	ExpressionStatement		2128:43:54289:54289	76285	39	True				
ANR	76733	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.html"" , html )"	2129:1:54292:54339	76285	40	True				
ANR	76734	CallExpression	"r_config_set_i ( core -> config , ""scr.html"" , html )"		76285	0					
ANR	76735	Callee	r_config_set_i		76285	0					
ANR	76736	Identifier	r_config_set_i		76285	0					
ANR	76737	ArgumentList	core -> config		76285	1					
ANR	76738	Argument	core -> config		76285	0					
ANR	76739	PtrMemberAccess	core -> config		76285	0					
ANR	76740	Identifier	core		76285	0					
ANR	76741	Identifier	config		76285	1					
ANR	76742	Argument	"""scr.html"""		76285	1					
ANR	76743	PrimaryExpression	"""scr.html"""		76285	0					
ANR	76744	Argument	html		76285	2					
ANR	76745	Identifier	html		76285	0					
ANR	76746	ExpressionStatement	core -> print -> cur_enabled = o_cursor	2132:1:54372:54407	76285	41	True				
ANR	76747	AssignmentExpression	core -> print -> cur_enabled = o_cursor		76285	0		=			
ANR	76748	PtrMemberAccess	core -> print -> cur_enabled		76285	0					
ANR	76749	PtrMemberAccess	core -> print		76285	0					
ANR	76750	Identifier	core		76285	0					
ANR	76751	Identifier	print		76285	1					
ANR	76752	Identifier	cur_enabled		76285	1					
ANR	76753	Identifier	o_cursor		76285	1					
ANR	76754	ExpressionStatement	r_config_hold_restore ( hc )	2133:1:54410:54436	76285	42	True				
ANR	76755	CallExpression	r_config_hold_restore ( hc )		76285	0					
ANR	76756	Callee	r_config_hold_restore		76285	0					
ANR	76757	Identifier	r_config_hold_restore		76285	0					
ANR	76758	ArgumentList	hc		76285	1					
ANR	76759	Argument	hc		76285	0					
ANR	76760	Identifier	hc		76285	0					
ANR	76761	ExpressionStatement	r_config_hold_free ( hc )	2134:1:54439:54462	76285	43	True				
ANR	76762	CallExpression	r_config_hold_free ( hc )		76285	0					
ANR	76763	Callee	r_config_hold_free		76285	0					
ANR	76764	Identifier	r_config_hold_free		76285	0					
ANR	76765	ArgumentList	hc		76285	1					
ANR	76766	Argument	hc		76285	0					
ANR	76767	Identifier	hc		76285	0					
ANR	76768	ReturnStatement	return body ;	2135:1:54465:54476	76285	44	True				
ANR	76769	Identifier	body		76285	0					
ANR	76770	ReturnType	static char *		76285	1					
ANR	76771	Identifier	get_body		76285	2					
ANR	76772	ParameterList	"RCore * core , ut64 addr , int size , int opts"		76285	3					
ANR	76773	Parameter	RCore * core	2080:22:52152:52162	76285	0	True				
ANR	76774	ParameterType	RCore *		76285	0					
ANR	76775	Identifier	core		76285	1					
ANR	76776	Parameter	ut64 addr	2080:35:52165:52173	76285	1	True				
ANR	76777	ParameterType	ut64		76285	0					
ANR	76778	Identifier	addr		76285	1					
ANR	76779	Parameter	int size	2080:46:52176:52183	76285	2	True				
ANR	76780	ParameterType	int		76285	0					
ANR	76781	Identifier	size		76285	1					
ANR	76782	Parameter	int opts	2080:56:52186:52193	76285	3	True				
ANR	76783	ParameterType	int		76285	0					
ANR	76784	Identifier	opts		76285	1					
ANR	76785	CFGEntryNode	ENTRY		76285		True				
ANR	76786	CFGExitNode	EXIT		76285		True				
ANR	76787	Symbol	* core		76285						
ANR	76788	Symbol	body		76285						
ANR	76789	Symbol	o_cursor		76285						
ANR	76790	Symbol	o_comments		76285						
ANR	76791	Symbol	o_flags_in_bytes		76285						
ANR	76792	Symbol	opts		76285						
ANR	76793	Symbol	r_config_hold_new		76285						
ANR	76794	Symbol	o_bytes		76285						
ANR	76795	Symbol	r_str_replace		76285						
ANR	76796	Symbol	html		76285						
ANR	76797	Symbol	addr		76285						
ANR	76798	Symbol	* * core		76285						
ANR	76799	Symbol	core -> config		76285						
ANR	76800	Symbol	o_cmtright		76285						
ANR	76801	Symbol	res		76285						
ANR	76802	Symbol	NULL		76285						
ANR	76803	Symbol	r_str_trim_lines		76285						
ANR	76804	Symbol	BODY_SUMMARY		76285						
ANR	76805	Symbol	false		76285						
ANR	76806	Symbol	core		76285						
ANR	76807	Symbol	* core -> print		76285						
ANR	76808	Symbol	size		76285						
ANR	76809	Symbol	o_graph_offset		76285						
ANR	76810	Symbol	BODY_COMMENTS		76285						
ANR	76811	Symbol	r_config_get_i		76285						
ANR	76812	Symbol	true		76285						
ANR	76813	Symbol	hc		76285						
ANR	76814	Symbol	cmd		76285						
ANR	76815	Symbol	core -> print		76285						
ANR	76816	Symbol	core -> print -> cur_enabled		76285						
ANR	76817	Symbol	BODY_OFFSETS		76285						
ANR	76818	Function	get_bb_body	2138:0:54481:55975							
ANR	76819	FunctionDef	"get_bb_body (RCore * core , RAnalBlock * b , int opts , RAnalFunction * fcn , bool emu , ut64 saved_gp , ut8 * saved_arena)"		76818	0					
ANR	76820	CompoundStatement		2138:126:54607:55975	76818	0					
ANR	76821	IfStatement	if ( emu )		76818	0					
ANR	76822	Condition	emu	2139:5:54614:54616	76818	0	True				
ANR	76823	Identifier	emu		76818	0					
ANR	76824	CompoundStatement		2:10:11:11	76818	1					
ANR	76825	ExpressionStatement	core -> anal -> gp = saved_gp	2140:2:54623:54648	76818	0	True				
ANR	76826	AssignmentExpression	core -> anal -> gp = saved_gp		76818	0		=			
ANR	76827	PtrMemberAccess	core -> anal -> gp		76818	0					
ANR	76828	PtrMemberAccess	core -> anal		76818	0					
ANR	76829	Identifier	core		76818	0					
ANR	76830	Identifier	anal		76818	1					
ANR	76831	Identifier	gp		76818	1					
ANR	76832	Identifier	saved_gp		76818	1					
ANR	76833	IfStatement	if ( b -> parent_reg_arena )		76818	1					
ANR	76834	Condition	b -> parent_reg_arena	2141:6:54656:54674	76818	0	True				
ANR	76835	PtrMemberAccess	b -> parent_reg_arena		76818	0					
ANR	76836	Identifier	b		76818	0					
ANR	76837	Identifier	parent_reg_arena		76818	1					
ANR	76838	CompoundStatement		7:3:167:211	76818	1					
ANR	76839	ExpressionStatement	"r_reg_arena_poke ( core -> anal -> reg , b -> parent_reg_arena )"	2142:3:54682:54737	76818	0	True				
ANR	76840	CallExpression	"r_reg_arena_poke ( core -> anal -> reg , b -> parent_reg_arena )"		76818	0					
ANR	76841	Callee	r_reg_arena_poke		76818	0					
ANR	76842	Identifier	r_reg_arena_poke		76818	0					
ANR	76843	ArgumentList	core -> anal -> reg		76818	1					
ANR	76844	Argument	core -> anal -> reg		76818	0					
ANR	76845	PtrMemberAccess	core -> anal -> reg		76818	0					
ANR	76846	PtrMemberAccess	core -> anal		76818	0					
ANR	76847	Identifier	core		76818	0					
ANR	76848	Identifier	anal		76818	1					
ANR	76849	Identifier	reg		76818	1					
ANR	76850	Argument	b -> parent_reg_arena		76818	1					
ANR	76851	PtrMemberAccess	b -> parent_reg_arena		76818	0					
ANR	76852	Identifier	b		76818	0					
ANR	76853	Identifier	parent_reg_arena		76818	1					
ANR	76854	ExpressionStatement	R_FREE ( b -> parent_reg_arena )	2143:3:54742:54770	76818	1	True				
ANR	76855	CallExpression	R_FREE ( b -> parent_reg_arena )		76818	0					
ANR	76856	Callee	R_FREE		76818	0					
ANR	76857	Identifier	R_FREE		76818	0					
ANR	76858	ArgumentList	b -> parent_reg_arena		76818	1					
ANR	76859	Argument	b -> parent_reg_arena		76818	0					
ANR	76860	PtrMemberAccess	b -> parent_reg_arena		76818	0					
ANR	76861	Identifier	b		76818	0					
ANR	76862	Identifier	parent_reg_arena		76818	1					
ANR	76863	IdentifierDeclStatement	"ut64 gp = r_reg_getv ( core -> anal -> reg , ""gp"" ) ;"	2144:3:54775:54819	76818	2	True				
ANR	76864	IdentifierDecl	"gp = r_reg_getv ( core -> anal -> reg , ""gp"" )"		76818	0					
ANR	76865	IdentifierDeclType	ut64		76818	0					
ANR	76866	Identifier	gp		76818	1					
ANR	76867	AssignmentExpression	"gp = r_reg_getv ( core -> anal -> reg , ""gp"" )"		76818	2		=			
ANR	76868	Identifier	gp		76818	0					
ANR	76869	CallExpression	"r_reg_getv ( core -> anal -> reg , ""gp"" )"		76818	1					
ANR	76870	Callee	r_reg_getv		76818	0					
ANR	76871	Identifier	r_reg_getv		76818	0					
ANR	76872	ArgumentList	core -> anal -> reg		76818	1					
ANR	76873	Argument	core -> anal -> reg		76818	0					
ANR	76874	PtrMemberAccess	core -> anal -> reg		76818	0					
ANR	76875	PtrMemberAccess	core -> anal		76818	0					
ANR	76876	Identifier	core		76818	0					
ANR	76877	Identifier	anal		76818	1					
ANR	76878	Identifier	reg		76818	1					
ANR	76879	Argument	"""gp"""		76818	1					
ANR	76880	PrimaryExpression	"""gp"""		76818	0					
ANR	76881	IfStatement	if ( gp )		76818	3					
ANR	76882	Condition	gp	2145:7:54828:54829	76818	0	True				
ANR	76883	Identifier	gp		76818	0					
ANR	76884	CompoundStatement		8:11:224:224	76818	1					
ANR	76885	ExpressionStatement	core -> anal -> gp = gp	2146:4:54838:54857	76818	0	True				
ANR	76886	AssignmentExpression	core -> anal -> gp = gp		76818	0		=			
ANR	76887	PtrMemberAccess	core -> anal -> gp		76818	0					
ANR	76888	PtrMemberAccess	core -> anal		76818	0					
ANR	76889	Identifier	core		76818	0					
ANR	76890	Identifier	anal		76818	1					
ANR	76891	Identifier	gp		76818	1					
ANR	76892	Identifier	gp		76818	1					
ANR	76893	ElseStatement	else		76818	0					
ANR	76894	CompoundStatement		11:9:265:265	76818	0					
ANR	76895	ExpressionStatement	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"	2149:3:54878:54925	76818	0	True				
ANR	76896	CallExpression	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"		76818	0					
ANR	76897	Callee	r_reg_arena_poke		76818	0					
ANR	76898	Identifier	r_reg_arena_poke		76818	0					
ANR	76899	ArgumentList	core -> anal -> reg		76818	1					
ANR	76900	Argument	core -> anal -> reg		76818	0					
ANR	76901	PtrMemberAccess	core -> anal -> reg		76818	0					
ANR	76902	PtrMemberAccess	core -> anal		76818	0					
ANR	76903	Identifier	core		76818	0					
ANR	76904	Identifier	anal		76818	1					
ANR	76905	Identifier	reg		76818	1					
ANR	76906	Argument	saved_arena		76818	1					
ANR	76907	Identifier	saved_arena		76818	0					
ANR	76908	IfStatement	if ( b -> parent_stackptr != INT_MAX )		76818	1					
ANR	76909	Condition	b -> parent_stackptr != INT_MAX	2152:5:54939:54967	76818	0	True				
ANR	76910	EqualityExpression	b -> parent_stackptr != INT_MAX		76818	0		!=			
ANR	76911	PtrMemberAccess	b -> parent_stackptr		76818	0					
ANR	76912	Identifier	b		76818	0					
ANR	76913	Identifier	parent_stackptr		76818	1					
ANR	76914	Identifier	INT_MAX		76818	1					
ANR	76915	CompoundStatement		15:36:362:362	76818	1					
ANR	76916	ExpressionStatement	core -> anal -> stackptr = b -> parent_stackptr	2153:2:54974:55015	76818	0	True				
ANR	76917	AssignmentExpression	core -> anal -> stackptr = b -> parent_stackptr		76818	0		=			
ANR	76918	PtrMemberAccess	core -> anal -> stackptr		76818	0					
ANR	76919	PtrMemberAccess	core -> anal		76818	0					
ANR	76920	Identifier	core		76818	0					
ANR	76921	Identifier	anal		76818	1					
ANR	76922	Identifier	stackptr		76818	1					
ANR	76923	PtrMemberAccess	b -> parent_stackptr		76818	1					
ANR	76924	Identifier	b		76818	0					
ANR	76925	Identifier	parent_stackptr		76818	1					
ANR	76926	IdentifierDeclStatement	"char * body = get_body ( core , b -> addr , b -> size , opts ) ;"	2155:1:55021:55073	76818	2	True				
ANR	76927	IdentifierDecl	"* body = get_body ( core , b -> addr , b -> size , opts )"		76818	0					
ANR	76928	IdentifierDeclType	char *		76818	0					
ANR	76929	Identifier	body		76818	1					
ANR	76930	AssignmentExpression	"* body = get_body ( core , b -> addr , b -> size , opts )"		76818	2		=			
ANR	76931	Identifier	body		76818	0					
ANR	76932	CallExpression	"get_body ( core , b -> addr , b -> size , opts )"		76818	1					
ANR	76933	Callee	get_body		76818	0					
ANR	76934	Identifier	get_body		76818	0					
ANR	76935	ArgumentList	core		76818	1					
ANR	76936	Argument	core		76818	0					
ANR	76937	Identifier	core		76818	0					
ANR	76938	Argument	b -> addr		76818	1					
ANR	76939	PtrMemberAccess	b -> addr		76818	0					
ANR	76940	Identifier	b		76818	0					
ANR	76941	Identifier	addr		76818	1					
ANR	76942	Argument	b -> size		76818	2					
ANR	76943	PtrMemberAccess	b -> size		76818	0					
ANR	76944	Identifier	b		76818	0					
ANR	76945	Identifier	size		76818	1					
ANR	76946	Argument	opts		76818	3					
ANR	76947	Identifier	opts		76818	0					
ANR	76948	IfStatement	if ( b -> jump != UT64_MAX )		76818	3					
ANR	76949	Condition	b -> jump != UT64_MAX	2156:5:55080:55098	76818	0	True				
ANR	76950	EqualityExpression	b -> jump != UT64_MAX		76818	0		!=			
ANR	76951	PtrMemberAccess	b -> jump		76818	0					
ANR	76952	Identifier	b		76818	0					
ANR	76953	Identifier	jump		76818	1					
ANR	76954	Identifier	UT64_MAX		76818	1					
ANR	76955	CompoundStatement		19:26:493:493	76818	1					
ANR	76956	IfStatement	if ( b -> jump > b -> addr )		76818	0					
ANR	76957	Condition	b -> jump > b -> addr	2157:6:55109:55125	76818	0	True				
ANR	76958	RelationalExpression	b -> jump > b -> addr		76818	0		>			
ANR	76959	PtrMemberAccess	b -> jump		76818	0					
ANR	76960	Identifier	b		76818	0					
ANR	76961	Identifier	jump		76818	1					
ANR	76962	PtrMemberAccess	b -> addr		76818	1					
ANR	76963	Identifier	b		76818	0					
ANR	76964	Identifier	addr		76818	1					
ANR	76965	CompoundStatement		21:3:525:575	76818	1					
ANR	76966	IdentifierDeclStatement	"RAnalBlock * jumpbb = r_anal_bb_get_jumpbb ( fcn , b ) ;"	2158:3:55133:55183	76818	0	True				
ANR	76967	IdentifierDecl	"* jumpbb = r_anal_bb_get_jumpbb ( fcn , b )"		76818	0					
ANR	76968	IdentifierDeclType	RAnalBlock *		76818	0					
ANR	76969	Identifier	jumpbb		76818	1					
ANR	76970	AssignmentExpression	"* jumpbb = r_anal_bb_get_jumpbb ( fcn , b )"		76818	2		=			
ANR	76971	Identifier	jumpbb		76818	0					
ANR	76972	CallExpression	"r_anal_bb_get_jumpbb ( fcn , b )"		76818	1					
ANR	76973	Callee	r_anal_bb_get_jumpbb		76818	0					
ANR	76974	Identifier	r_anal_bb_get_jumpbb		76818	0					
ANR	76975	ArgumentList	fcn		76818	1					
ANR	76976	Argument	fcn		76818	0					
ANR	76977	Identifier	fcn		76818	0					
ANR	76978	Argument	b		76818	1					
ANR	76979	Identifier	b		76818	0					
ANR	76980	IfStatement	if ( jumpbb )		76818	1					
ANR	76981	Condition	jumpbb	2159:7:55192:55197	76818	0	True				
ANR	76982	Identifier	jumpbb		76818	0					
ANR	76983	CompoundStatement		22:15:592:592	76818	1					
ANR	76984	IfStatement	if ( emu && core -> anal -> last_disasm_reg != NULL && ! jumpbb -> parent_reg_arena )		76818	0					
ANR	76985	Condition	emu && core -> anal -> last_disasm_reg != NULL && ! jumpbb -> parent_reg_arena	2160:8:55210:55280	76818	0	True				
ANR	76986	AndExpression	emu && core -> anal -> last_disasm_reg != NULL && ! jumpbb -> parent_reg_arena		76818	0		&&			
ANR	76987	Identifier	emu		76818	0					
ANR	76988	AndExpression	core -> anal -> last_disasm_reg != NULL && ! jumpbb -> parent_reg_arena		76818	1		&&			
ANR	76989	EqualityExpression	core -> anal -> last_disasm_reg != NULL		76818	0		!=			
ANR	76990	PtrMemberAccess	core -> anal -> last_disasm_reg		76818	0					
ANR	76991	PtrMemberAccess	core -> anal		76818	0					
ANR	76992	Identifier	core		76818	0					
ANR	76993	Identifier	anal		76818	1					
ANR	76994	Identifier	last_disasm_reg		76818	1					
ANR	76995	Identifier	NULL		76818	1					
ANR	76996	UnaryOperationExpression	! jumpbb -> parent_reg_arena		76818	1					
ANR	76997	UnaryOperator	!		76818	0					
ANR	76998	PtrMemberAccess	jumpbb -> parent_reg_arena		76818	1					
ANR	76999	Identifier	jumpbb		76818	0					
ANR	77000	Identifier	parent_reg_arena		76818	1					
ANR	77001	CompoundStatement		23:81:675:675	76818	1					
ANR	77002	ExpressionStatement	"jumpbb -> parent_reg_arena = r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"	2161:5:55290:55379	76818	0	True				
ANR	77003	AssignmentExpression	"jumpbb -> parent_reg_arena = r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"		76818	0		=			
ANR	77004	PtrMemberAccess	jumpbb -> parent_reg_arena		76818	0					
ANR	77005	Identifier	jumpbb		76818	0					
ANR	77006	Identifier	parent_reg_arena		76818	1					
ANR	77007	CallExpression	"r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"		76818	1					
ANR	77008	Callee	r_reg_arena_dup		76818	0					
ANR	77009	Identifier	r_reg_arena_dup		76818	0					
ANR	77010	ArgumentList	core -> anal -> reg		76818	1					
ANR	77011	Argument	core -> anal -> reg		76818	0					
ANR	77012	PtrMemberAccess	core -> anal -> reg		76818	0					
ANR	77013	PtrMemberAccess	core -> anal		76818	0					
ANR	77014	Identifier	core		76818	0					
ANR	77015	Identifier	anal		76818	1					
ANR	77016	Identifier	reg		76818	1					
ANR	77017	Argument	core -> anal -> last_disasm_reg		76818	1					
ANR	77018	PtrMemberAccess	core -> anal -> last_disasm_reg		76818	0					
ANR	77019	PtrMemberAccess	core -> anal		76818	0					
ANR	77020	Identifier	core		76818	0					
ANR	77021	Identifier	anal		76818	1					
ANR	77022	Identifier	last_disasm_reg		76818	1					
ANR	77023	IfStatement	if ( jumpbb -> parent_stackptr == INT_MAX )		76818	1					
ANR	77024	Condition	jumpbb -> parent_stackptr == INT_MAX	2163:8:55395:55428	76818	0	True				
ANR	77025	EqualityExpression	jumpbb -> parent_stackptr == INT_MAX		76818	0		==			
ANR	77026	PtrMemberAccess	jumpbb -> parent_stackptr		76818	0					
ANR	77027	Identifier	jumpbb		76818	0					
ANR	77028	Identifier	parent_stackptr		76818	1					
ANR	77029	Identifier	INT_MAX		76818	1					
ANR	77030	CompoundStatement		26:44:823:823	76818	1					
ANR	77031	ExpressionStatement	jumpbb -> parent_stackptr = core -> anal -> stackptr + b -> stackptr	2164:5:55438:55498	76818	0	True				
ANR	77032	AssignmentExpression	jumpbb -> parent_stackptr = core -> anal -> stackptr + b -> stackptr		76818	0		=			
ANR	77033	PtrMemberAccess	jumpbb -> parent_stackptr		76818	0					
ANR	77034	Identifier	jumpbb		76818	0					
ANR	77035	Identifier	parent_stackptr		76818	1					
ANR	77036	AdditiveExpression	core -> anal -> stackptr + b -> stackptr		76818	1		+			
ANR	77037	PtrMemberAccess	core -> anal -> stackptr		76818	0					
ANR	77038	PtrMemberAccess	core -> anal		76818	0					
ANR	77039	Identifier	core		76818	0					
ANR	77040	Identifier	anal		76818	1					
ANR	77041	Identifier	stackptr		76818	1					
ANR	77042	PtrMemberAccess	b -> stackptr		76818	1					
ANR	77043	Identifier	b		76818	0					
ANR	77044	Identifier	stackptr		76818	1					
ANR	77045	IfStatement	if ( b -> fail != UT64_MAX )		76818	4					
ANR	77046	Condition	b -> fail != UT64_MAX	2169:5:55523:55541	76818	0	True				
ANR	77047	EqualityExpression	b -> fail != UT64_MAX		76818	0		!=			
ANR	77048	PtrMemberAccess	b -> fail		76818	0					
ANR	77049	Identifier	b		76818	0					
ANR	77050	Identifier	fail		76818	1					
ANR	77051	Identifier	UT64_MAX		76818	1					
ANR	77052	CompoundStatement		32:26:936:936	76818	1					
ANR	77053	IfStatement	if ( b -> fail > b -> addr )		76818	0					
ANR	77054	Condition	b -> fail > b -> addr	2170:6:55552:55568	76818	0	True				
ANR	77055	RelationalExpression	b -> fail > b -> addr		76818	0		>			
ANR	77056	PtrMemberAccess	b -> fail		76818	0					
ANR	77057	Identifier	b		76818	0					
ANR	77058	Identifier	fail		76818	1					
ANR	77059	PtrMemberAccess	b -> addr		76818	1					
ANR	77060	Identifier	b		76818	0					
ANR	77061	Identifier	addr		76818	1					
ANR	77062	CompoundStatement		34:3:968:1018	76818	1					
ANR	77063	IdentifierDeclStatement	"RAnalBlock * failbb = r_anal_bb_get_failbb ( fcn , b ) ;"	2171:3:55576:55626	76818	0	True				
ANR	77064	IdentifierDecl	"* failbb = r_anal_bb_get_failbb ( fcn , b )"		76818	0					
ANR	77065	IdentifierDeclType	RAnalBlock *		76818	0					
ANR	77066	Identifier	failbb		76818	1					
ANR	77067	AssignmentExpression	"* failbb = r_anal_bb_get_failbb ( fcn , b )"		76818	2		=			
ANR	77068	Identifier	failbb		76818	0					
ANR	77069	CallExpression	"r_anal_bb_get_failbb ( fcn , b )"		76818	1					
ANR	77070	Callee	r_anal_bb_get_failbb		76818	0					
ANR	77071	Identifier	r_anal_bb_get_failbb		76818	0					
ANR	77072	ArgumentList	fcn		76818	1					
ANR	77073	Argument	fcn		76818	0					
ANR	77074	Identifier	fcn		76818	0					
ANR	77075	Argument	b		76818	1					
ANR	77076	Identifier	b		76818	0					
ANR	77077	IfStatement	if ( failbb )		76818	1					
ANR	77078	Condition	failbb	2172:7:55635:55640	76818	0	True				
ANR	77079	Identifier	failbb		76818	0					
ANR	77080	CompoundStatement		35:15:1035:1035	76818	1					
ANR	77081	IfStatement	if ( emu && core -> anal -> last_disasm_reg != NULL && ! failbb -> parent_reg_arena )		76818	0					
ANR	77082	Condition	emu && core -> anal -> last_disasm_reg != NULL && ! failbb -> parent_reg_arena	2173:8:55653:55723	76818	0	True				
ANR	77083	AndExpression	emu && core -> anal -> last_disasm_reg != NULL && ! failbb -> parent_reg_arena		76818	0		&&			
ANR	77084	Identifier	emu		76818	0					
ANR	77085	AndExpression	core -> anal -> last_disasm_reg != NULL && ! failbb -> parent_reg_arena		76818	1		&&			
ANR	77086	EqualityExpression	core -> anal -> last_disasm_reg != NULL		76818	0		!=			
ANR	77087	PtrMemberAccess	core -> anal -> last_disasm_reg		76818	0					
ANR	77088	PtrMemberAccess	core -> anal		76818	0					
ANR	77089	Identifier	core		76818	0					
ANR	77090	Identifier	anal		76818	1					
ANR	77091	Identifier	last_disasm_reg		76818	1					
ANR	77092	Identifier	NULL		76818	1					
ANR	77093	UnaryOperationExpression	! failbb -> parent_reg_arena		76818	1					
ANR	77094	UnaryOperator	!		76818	0					
ANR	77095	PtrMemberAccess	failbb -> parent_reg_arena		76818	1					
ANR	77096	Identifier	failbb		76818	0					
ANR	77097	Identifier	parent_reg_arena		76818	1					
ANR	77098	CompoundStatement		36:81:1118:1118	76818	1					
ANR	77099	ExpressionStatement	"failbb -> parent_reg_arena = r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"	2174:5:55733:55822	76818	0	True				
ANR	77100	AssignmentExpression	"failbb -> parent_reg_arena = r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"		76818	0		=			
ANR	77101	PtrMemberAccess	failbb -> parent_reg_arena		76818	0					
ANR	77102	Identifier	failbb		76818	0					
ANR	77103	Identifier	parent_reg_arena		76818	1					
ANR	77104	CallExpression	"r_reg_arena_dup ( core -> anal -> reg , core -> anal -> last_disasm_reg )"		76818	1					
ANR	77105	Callee	r_reg_arena_dup		76818	0					
ANR	77106	Identifier	r_reg_arena_dup		76818	0					
ANR	77107	ArgumentList	core -> anal -> reg		76818	1					
ANR	77108	Argument	core -> anal -> reg		76818	0					
ANR	77109	PtrMemberAccess	core -> anal -> reg		76818	0					
ANR	77110	PtrMemberAccess	core -> anal		76818	0					
ANR	77111	Identifier	core		76818	0					
ANR	77112	Identifier	anal		76818	1					
ANR	77113	Identifier	reg		76818	1					
ANR	77114	Argument	core -> anal -> last_disasm_reg		76818	1					
ANR	77115	PtrMemberAccess	core -> anal -> last_disasm_reg		76818	0					
ANR	77116	PtrMemberAccess	core -> anal		76818	0					
ANR	77117	Identifier	core		76818	0					
ANR	77118	Identifier	anal		76818	1					
ANR	77119	Identifier	last_disasm_reg		76818	1					
ANR	77120	IfStatement	if ( failbb -> parent_stackptr == INT_MAX )		76818	1					
ANR	77121	Condition	failbb -> parent_stackptr == INT_MAX	2176:8:55838:55871	76818	0	True				
ANR	77122	EqualityExpression	failbb -> parent_stackptr == INT_MAX		76818	0		==			
ANR	77123	PtrMemberAccess	failbb -> parent_stackptr		76818	0					
ANR	77124	Identifier	failbb		76818	0					
ANR	77125	Identifier	parent_stackptr		76818	1					
ANR	77126	Identifier	INT_MAX		76818	1					
ANR	77127	CompoundStatement		39:44:1266:1266	76818	1					
ANR	77128	ExpressionStatement	failbb -> parent_stackptr = core -> anal -> stackptr + b -> stackptr	2177:5:55881:55941	76818	0	True				
ANR	77129	AssignmentExpression	failbb -> parent_stackptr = core -> anal -> stackptr + b -> stackptr		76818	0		=			
ANR	77130	PtrMemberAccess	failbb -> parent_stackptr		76818	0					
ANR	77131	Identifier	failbb		76818	0					
ANR	77132	Identifier	parent_stackptr		76818	1					
ANR	77133	AdditiveExpression	core -> anal -> stackptr + b -> stackptr		76818	1		+			
ANR	77134	PtrMemberAccess	core -> anal -> stackptr		76818	0					
ANR	77135	PtrMemberAccess	core -> anal		76818	0					
ANR	77136	Identifier	core		76818	0					
ANR	77137	Identifier	anal		76818	1					
ANR	77138	Identifier	stackptr		76818	1					
ANR	77139	PtrMemberAccess	b -> stackptr		76818	1					
ANR	77140	Identifier	b		76818	0					
ANR	77141	Identifier	stackptr		76818	1					
ANR	77142	ReturnStatement	return body ;	2182:1:55962:55973	76818	5	True				
ANR	77143	Identifier	body		76818	0					
ANR	77144	ReturnType	static char *		76818	1					
ANR	77145	Identifier	get_bb_body		76818	2					
ANR	77146	ParameterList	"RCore * core , RAnalBlock * b , int opts , RAnalFunction * fcn , bool emu , ut64 saved_gp , ut8 * saved_arena"		76818	3					
ANR	77147	Parameter	RCore * core	2138:25:54506:54516	76818	0	True				
ANR	77148	ParameterType	RCore *		76818	0					
ANR	77149	Identifier	core		76818	1					
ANR	77150	Parameter	RAnalBlock * b	2138:38:54519:54531	76818	1	True				
ANR	77151	ParameterType	RAnalBlock *		76818	0					
ANR	77152	Identifier	b		76818	1					
ANR	77153	Parameter	int opts	2138:53:54534:54541	76818	2	True				
ANR	77154	ParameterType	int		76818	0					
ANR	77155	Identifier	opts		76818	1					
ANR	77156	Parameter	RAnalFunction * fcn	2138:63:54544:54561	76818	3	True				
ANR	77157	ParameterType	RAnalFunction *		76818	0					
ANR	77158	Identifier	fcn		76818	1					
ANR	77159	Parameter	bool emu	2138:83:54564:54571	76818	4	True				
ANR	77160	ParameterType	bool		76818	0					
ANR	77161	Identifier	emu		76818	1					
ANR	77162	Parameter	ut64 saved_gp	2138:93:54574:54586	76818	5	True				
ANR	77163	ParameterType	ut64		76818	0					
ANR	77164	Identifier	saved_gp		76818	1					
ANR	77165	Parameter	ut8 * saved_arena	2138:108:54589:54604	76818	6	True				
ANR	77166	ParameterType	ut8 *		76818	0					
ANR	77167	Identifier	saved_arena		76818	1					
ANR	77168	CFGEntryNode	ENTRY		76818		True				
ANR	77169	CFGExitNode	EXIT		76818		True				
ANR	77170	Symbol	core -> anal -> reg		76818						
ANR	77171	Symbol	jumpbb -> parent_reg_arena		76818						
ANR	77172	Symbol	saved_arena		76818						
ANR	77173	Symbol	b -> size		76818						
ANR	77174	Symbol	* core		76818						
ANR	77175	Symbol	failbb		76818						
ANR	77176	Symbol	emu		76818						
ANR	77177	Symbol	body		76818						
ANR	77178	Symbol	core -> anal		76818						
ANR	77179	Symbol	b -> addr		76818						
ANR	77180	Symbol	core -> anal -> last_disasm_reg		76818						
ANR	77181	Symbol	fcn		76818						
ANR	77182	Symbol	opts		76818						
ANR	77183	Symbol	failbb -> parent_stackptr		76818						
ANR	77184	Symbol	INT_MAX		76818						
ANR	77185	Symbol	r_anal_bb_get_jumpbb		76818						
ANR	77186	Symbol	* jumpbb		76818						
ANR	77187	Symbol	r_anal_bb_get_failbb		76818						
ANR	77188	Symbol	* failbb		76818						
ANR	77189	Symbol	saved_gp		76818						
ANR	77190	Symbol	UT64_MAX		76818						
ANR	77191	Symbol	* * core		76818						
ANR	77192	Symbol	b -> parent_reg_arena		76818						
ANR	77193	Symbol	b -> fail		76818						
ANR	77194	Symbol	b		76818						
ANR	77195	Symbol	get_body		76818						
ANR	77196	Symbol	NULL		76818						
ANR	77197	Symbol	jumpbb -> parent_stackptr		76818						
ANR	77198	Symbol	gp		76818						
ANR	77199	Symbol	core -> anal -> gp		76818						
ANR	77200	Symbol	jumpbb		76818						
ANR	77201	Symbol	* b		76818						
ANR	77202	Symbol	b -> jump		76818						
ANR	77203	Symbol	core		76818						
ANR	77204	Symbol	* core -> anal		76818						
ANR	77205	Symbol	r_reg_arena_dup		76818						
ANR	77206	Symbol	b -> parent_stackptr		76818						
ANR	77207	Symbol	failbb -> parent_reg_arena		76818						
ANR	77208	Symbol	core -> anal -> stackptr		76818						
ANR	77209	Symbol	b -> stackptr		76818						
ANR	77210	Symbol	r_reg_getv		76818						
ANR	77211	Function	bbcmp	2185:0:55978:56054							
ANR	77212	FunctionDef	"bbcmp (RAnalBlock * a , RAnalBlock * b)"		77211	0					
ANR	77213	CompoundStatement		2185:47:56025:56054	77211	0					
ANR	77214	ReturnStatement	return a -> addr - b -> addr ;	2186:1:56028:56052	77211	0	True				
ANR	77215	AdditiveExpression	a -> addr - b -> addr		77211	0		-			
ANR	77216	PtrMemberAccess	a -> addr		77211	0					
ANR	77217	Identifier	a		77211	0					
ANR	77218	Identifier	addr		77211	1					
ANR	77219	PtrMemberAccess	b -> addr		77211	1					
ANR	77220	Identifier	b		77211	0					
ANR	77221	Identifier	addr		77211	1					
ANR	77222	ReturnType	static int		77211	1					
ANR	77223	Identifier	bbcmp		77211	2					
ANR	77224	ParameterList	"RAnalBlock * a , RAnalBlock * b"		77211	3					
ANR	77225	Parameter	RAnalBlock * a	2185:17:55995:56007	77211	0	True				
ANR	77226	ParameterType	RAnalBlock *		77211	0					
ANR	77227	Identifier	a		77211	1					
ANR	77228	Parameter	RAnalBlock * b	2185:32:56010:56022	77211	1	True				
ANR	77229	ParameterType	RAnalBlock *		77211	0					
ANR	77230	Identifier	b		77211	1					
ANR	77231	CFGEntryNode	ENTRY		77211		True				
ANR	77232	CFGExitNode	EXIT		77211		True				
ANR	77233	Symbol	a		77211						
ANR	77234	Symbol	b		77211						
ANR	77235	Symbol	a -> addr		77211						
ANR	77236	Symbol	* a		77211						
ANR	77237	Symbol	* b		77211						
ANR	77238	Symbol	b -> addr		77211						
ANR	77239	Function	get_bbupdate	2189:0:56057:57405							
ANR	77240	FunctionDef	"get_bbupdate (RAGraph * g , RCore * core , RAnalFunction * fcn)"		77239	0					
ANR	77241	CompoundStatement		2189:70:56127:57405	77239	0					
ANR	77242	IdentifierDeclStatement	RAnalBlock * bb ;	2190:1:56130:56144	77239	0	True				
ANR	77243	IdentifierDecl	* bb		77239	0					
ANR	77244	IdentifierDeclType	RAnalBlock *		77239	0					
ANR	77245	Identifier	bb		77239	1					
ANR	77246	IdentifierDeclStatement	RListIter * iter ;	2191:1:56147:56162	77239	1	True				
ANR	77247	IdentifierDecl	* iter		77239	0					
ANR	77248	IdentifierDeclType	RListIter *		77239	0					
ANR	77249	Identifier	iter		77239	1					
ANR	77250	IdentifierDeclStatement	"bool emu = r_config_get_i ( core -> config , ""asm.emu"" ) ;"	2192:1:56165:56216	77239	2	True				
ANR	77251	IdentifierDecl	"emu = r_config_get_i ( core -> config , ""asm.emu"" )"		77239	0					
ANR	77252	IdentifierDeclType	bool		77239	0					
ANR	77253	Identifier	emu		77239	1					
ANR	77254	AssignmentExpression	"emu = r_config_get_i ( core -> config , ""asm.emu"" )"		77239	2		=			
ANR	77255	Identifier	emu		77239	0					
ANR	77256	CallExpression	"r_config_get_i ( core -> config , ""asm.emu"" )"		77239	1					
ANR	77257	Callee	r_config_get_i		77239	0					
ANR	77258	Identifier	r_config_get_i		77239	0					
ANR	77259	ArgumentList	core -> config		77239	1					
ANR	77260	Argument	core -> config		77239	0					
ANR	77261	PtrMemberAccess	core -> config		77239	0					
ANR	77262	Identifier	core		77239	0					
ANR	77263	Identifier	config		77239	1					
ANR	77264	Argument	"""asm.emu"""		77239	1					
ANR	77265	PrimaryExpression	"""asm.emu"""		77239	0					
ANR	77266	IdentifierDeclStatement	ut64 saved_gp = core -> anal -> gp ;	2193:1:56219:56249	77239	3	True				
ANR	77267	IdentifierDecl	saved_gp = core -> anal -> gp		77239	0					
ANR	77268	IdentifierDeclType	ut64		77239	0					
ANR	77269	Identifier	saved_gp		77239	1					
ANR	77270	AssignmentExpression	saved_gp = core -> anal -> gp		77239	2		=			
ANR	77271	Identifier	saved_gp		77239	0					
ANR	77272	PtrMemberAccess	core -> anal -> gp		77239	1					
ANR	77273	PtrMemberAccess	core -> anal		77239	0					
ANR	77274	Identifier	core		77239	0					
ANR	77275	Identifier	anal		77239	1					
ANR	77276	Identifier	gp		77239	1					
ANR	77277	IdentifierDeclStatement	ut8 * saved_arena = NULL ;	2194:1:56252:56275	77239	4	True				
ANR	77278	IdentifierDecl	* saved_arena = NULL		77239	0					
ANR	77279	IdentifierDeclType	ut8 *		77239	0					
ANR	77280	Identifier	saved_arena		77239	1					
ANR	77281	AssignmentExpression	* saved_arena = NULL		77239	2		=			
ANR	77282	Identifier	NULL		77239	0					
ANR	77283	Identifier	NULL		77239	1					
ANR	77284	IdentifierDeclStatement	int saved_stackptr = core -> anal -> stackptr ;	2195:1:56278:56319	77239	5	True				
ANR	77285	IdentifierDecl	saved_stackptr = core -> anal -> stackptr		77239	0					
ANR	77286	IdentifierDeclType	int		77239	0					
ANR	77287	Identifier	saved_stackptr		77239	1					
ANR	77288	AssignmentExpression	saved_stackptr = core -> anal -> stackptr		77239	2		=			
ANR	77289	Identifier	saved_stackptr		77239	0					
ANR	77290	PtrMemberAccess	core -> anal -> stackptr		77239	1					
ANR	77291	PtrMemberAccess	core -> anal		77239	0					
ANR	77292	Identifier	core		77239	0					
ANR	77293	Identifier	anal		77239	1					
ANR	77294	Identifier	stackptr		77239	1					
ANR	77295	IdentifierDeclStatement	char * shortcut = 0 ;	2196:1:56322:56340	77239	6	True				
ANR	77296	IdentifierDecl	* shortcut = 0		77239	0					
ANR	77297	IdentifierDeclType	char *		77239	0					
ANR	77298	Identifier	shortcut		77239	1					
ANR	77299	AssignmentExpression	* shortcut = 0		77239	2		=			
ANR	77300	Identifier	shortcut		77239	0					
ANR	77301	PrimaryExpression	0		77239	1					
ANR	77302	IdentifierDeclStatement	int shortcuts = 0 ;	2197:1:56343:56360	77239	7	True				
ANR	77303	IdentifierDecl	shortcuts = 0		77239	0					
ANR	77304	IdentifierDeclType	int		77239	0					
ANR	77305	Identifier	shortcuts		77239	1					
ANR	77306	AssignmentExpression	shortcuts = 0		77239	2		=			
ANR	77307	Identifier	shortcuts		77239	0					
ANR	77308	PrimaryExpression	0		77239	1					
ANR	77309	ExpressionStatement	core -> keep_asmqjmps = false	2198:1:56363:56390	77239	8	True				
ANR	77310	AssignmentExpression	core -> keep_asmqjmps = false		77239	0		=			
ANR	77311	PtrMemberAccess	core -> keep_asmqjmps		77239	0					
ANR	77312	Identifier	core		77239	0					
ANR	77313	Identifier	keep_asmqjmps		77239	1					
ANR	77314	Identifier	false		77239	1					
ANR	77315	IfStatement	if ( emu )		77239	9					
ANR	77316	Condition	emu	2200:5:56398:56400	77239	0	True				
ANR	77317	Identifier	emu		77239	0					
ANR	77318	CompoundStatement		12:10:275:275	77239	1					
ANR	77319	ExpressionStatement	saved_arena = r_reg_arena_peek ( core -> anal -> reg )	2201:2:56407:56455	77239	0	True				
ANR	77320	AssignmentExpression	saved_arena = r_reg_arena_peek ( core -> anal -> reg )		77239	0		=			
ANR	77321	Identifier	saved_arena		77239	0					
ANR	77322	CallExpression	r_reg_arena_peek ( core -> anal -> reg )		77239	1					
ANR	77323	Callee	r_reg_arena_peek		77239	0					
ANR	77324	Identifier	r_reg_arena_peek		77239	0					
ANR	77325	ArgumentList	core -> anal -> reg		77239	1					
ANR	77326	Argument	core -> anal -> reg		77239	0					
ANR	77327	PtrMemberAccess	core -> anal -> reg		77239	0					
ANR	77328	PtrMemberAccess	core -> anal		77239	0					
ANR	77329	Identifier	core		77239	0					
ANR	77330	Identifier	anal		77239	1					
ANR	77331	Identifier	reg		77239	1					
ANR	77332	IfStatement	if ( ! fcn )		77239	10					
ANR	77333	Condition	! fcn	2203:5:56465:56468	77239	0	True				
ANR	77334	UnaryOperationExpression	! fcn		77239	0					
ANR	77335	UnaryOperator	!		77239	0					
ANR	77336	Identifier	fcn		77239	1					
ANR	77337	CompoundStatement		15:11:343:343	77239	1					
ANR	77338	ExpressionStatement	R_FREE ( saved_arena )	2204:2:56475:56495	77239	0	True				
ANR	77339	CallExpression	R_FREE ( saved_arena )		77239	0					
ANR	77340	Callee	R_FREE		77239	0					
ANR	77341	Identifier	R_FREE		77239	0					
ANR	77342	ArgumentList	saved_arena		77239	1					
ANR	77343	Argument	saved_arena		77239	0					
ANR	77344	Identifier	saved_arena		77239	0					
ANR	77345	ReturnStatement	return ;	2205:2:56499:56505	77239	1	True				
ANR	77346	ExpressionStatement	"r_list_sort ( fcn -> bbs , ( RListComparator ) bbcmp )"	2207:1:56511:56558	77239	11	True				
ANR	77347	CallExpression	"r_list_sort ( fcn -> bbs , ( RListComparator ) bbcmp )"		77239	0					
ANR	77348	Callee	r_list_sort		77239	0					
ANR	77349	Identifier	r_list_sort		77239	0					
ANR	77350	ArgumentList	fcn -> bbs		77239	1					
ANR	77351	Argument	fcn -> bbs		77239	0					
ANR	77352	PtrMemberAccess	fcn -> bbs		77239	0					
ANR	77353	Identifier	fcn		77239	0					
ANR	77354	Identifier	bbs		77239	1					
ANR	77355	Argument	( RListComparator ) bbcmp		77239	1					
ANR	77356	CastExpression	( RListComparator ) bbcmp		77239	0					
ANR	77357	CastTarget	RListComparator		77239	0					
ANR	77358	Identifier	bbcmp		77239	1					
ANR	77359	ExpressionStatement	"shortcuts = r_config_get_i ( core -> config , ""graph.nodejmps"" )"	2209:1:56562:56621	77239	12	True				
ANR	77360	AssignmentExpression	"shortcuts = r_config_get_i ( core -> config , ""graph.nodejmps"" )"		77239	0		=			
ANR	77361	Identifier	shortcuts		77239	0					
ANR	77362	CallExpression	"r_config_get_i ( core -> config , ""graph.nodejmps"" )"		77239	1					
ANR	77363	Callee	r_config_get_i		77239	0					
ANR	77364	Identifier	r_config_get_i		77239	0					
ANR	77365	ArgumentList	core -> config		77239	1					
ANR	77366	Argument	core -> config		77239	0					
ANR	77367	PtrMemberAccess	core -> config		77239	0					
ANR	77368	Identifier	core		77239	0					
ANR	77369	Identifier	config		77239	1					
ANR	77370	Argument	"""graph.nodejmps"""		77239	1					
ANR	77371	PrimaryExpression	"""graph.nodejmps"""		77239	0					
ANR	77372	Statement	r_list_foreach	2210:1:56624:56637	77239	13	True				
ANR	77373	Statement	(	2210:16:56639:56639	77239	14	True				
ANR	77374	Statement	fcn	2210:17:56640:56642	77239	15	True				
ANR	77375	Statement	->	2210:20:56643:56644	77239	16	True				
ANR	77376	Statement	bbs	2210:22:56645:56647	77239	17	True				
ANR	77377	Statement	","	2210:25:56648:56648	77239	18	True				
ANR	77378	Statement	iter	2210:27:56650:56653	77239	19	True				
ANR	77379	Statement	","	2210:31:56654:56654	77239	20	True				
ANR	77380	Statement	bb	2210:33:56656:56657	77239	21	True				
ANR	77381	Statement	)	2210:35:56658:56658	77239	22	True				
ANR	77382	CompoundStatement		36:2:907:950	77239	23					
ANR	77383	IfStatement	if ( bb -> addr == UT64_MAX )		77239	0					
ANR	77384	Condition	bb -> addr == UT64_MAX	2211:6:56668:56687	77239	0	True				
ANR	77385	EqualityExpression	bb -> addr == UT64_MAX		77239	0		==			
ANR	77386	PtrMemberAccess	bb -> addr		77239	0					
ANR	77387	Identifier	bb		77239	0					
ANR	77388	Identifier	addr		77239	1					
ANR	77389	Identifier	UT64_MAX		77239	1					
ANR	77390	CompoundStatement		23:28:562:562	77239	1					
ANR	77391	ContinueStatement	continue ;	2212:3:56695:56703	77239	0	True				
ANR	77392	IdentifierDeclStatement	"char * body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena ) ;"	2214:2:56711:56794	77239	1	True				
ANR	77393	IdentifierDecl	"* body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		77239	0					
ANR	77394	IdentifierDeclType	char *		77239	0					
ANR	77395	Identifier	body		77239	1					
ANR	77396	AssignmentExpression	"* body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		77239	2		=			
ANR	77397	Identifier	body		77239	0					
ANR	77398	CallExpression	"get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		77239	1					
ANR	77399	Callee	get_bb_body		77239	0					
ANR	77400	Identifier	get_bb_body		77239	0					
ANR	77401	ArgumentList	core		77239	1					
ANR	77402	Argument	core		77239	0					
ANR	77403	Identifier	core		77239	0					
ANR	77404	Argument	bb		77239	1					
ANR	77405	Identifier	bb		77239	0					
ANR	77406	Argument	mode2opts ( g )		77239	2					
ANR	77407	CallExpression	mode2opts ( g )		77239	0					
ANR	77408	Callee	mode2opts		77239	0					
ANR	77409	Identifier	mode2opts		77239	0					
ANR	77410	ArgumentList	g		77239	1					
ANR	77411	Argument	g		77239	0					
ANR	77412	Identifier	g		77239	0					
ANR	77413	Argument	fcn		77239	3					
ANR	77414	Identifier	fcn		77239	0					
ANR	77415	Argument	emu		77239	4					
ANR	77416	Identifier	emu		77239	0					
ANR	77417	Argument	saved_gp		77239	5					
ANR	77418	Identifier	saved_gp		77239	0					
ANR	77419	Argument	saved_arena		77239	6					
ANR	77420	Identifier	saved_arena		77239	0					
ANR	77421	IdentifierDeclStatement	char * title = get_title ( bb -> addr ) ;	2215:2:56798:56832	77239	2	True				
ANR	77422	IdentifierDecl	* title = get_title ( bb -> addr )		77239	0					
ANR	77423	IdentifierDeclType	char *		77239	0					
ANR	77424	Identifier	title		77239	1					
ANR	77425	AssignmentExpression	* title = get_title ( bb -> addr )		77239	2		=			
ANR	77426	Identifier	title		77239	0					
ANR	77427	CallExpression	get_title ( bb -> addr )		77239	1					
ANR	77428	Callee	get_title		77239	0					
ANR	77429	Identifier	get_title		77239	0					
ANR	77430	ArgumentList	bb -> addr		77239	1					
ANR	77431	Argument	bb -> addr		77239	0					
ANR	77432	PtrMemberAccess	bb -> addr		77239	0					
ANR	77433	Identifier	bb		77239	0					
ANR	77434	Identifier	addr		77239	1					
ANR	77435	IfStatement	if ( shortcuts )		77239	3					
ANR	77436	Condition	shortcuts	2217:6:56841:56849	77239	0	True				
ANR	77437	Identifier	shortcuts		77239	0					
ANR	77438	CompoundStatement		29:17:724:724	77239	1					
ANR	77439	ExpressionStatement	"shortcut = r_core_add_asmqjmp ( core , bb -> addr )"	2218:3:56857:56903	77239	0	True				
ANR	77440	AssignmentExpression	"shortcut = r_core_add_asmqjmp ( core , bb -> addr )"		77239	0		=			
ANR	77441	Identifier	shortcut		77239	0					
ANR	77442	CallExpression	"r_core_add_asmqjmp ( core , bb -> addr )"		77239	1					
ANR	77443	Callee	r_core_add_asmqjmp		77239	0					
ANR	77444	Identifier	r_core_add_asmqjmp		77239	0					
ANR	77445	ArgumentList	core		77239	1					
ANR	77446	Argument	core		77239	0					
ANR	77447	Identifier	core		77239	0					
ANR	77448	Argument	bb -> addr		77239	1					
ANR	77449	PtrMemberAccess	bb -> addr		77239	0					
ANR	77450	Identifier	bb		77239	0					
ANR	77451	Identifier	addr		77239	1					
ANR	77452	IfStatement	if ( shortcut )		77239	1					
ANR	77453	Condition	shortcut	2219:7:56912:56919	77239	0	True				
ANR	77454	Identifier	shortcut		77239	0					
ANR	77455	CompoundStatement		31:17:794:794	77239	1					
ANR	77456	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title ) , shortcut , 0 )"	2220:4:56928:57001	77239	0	True				
ANR	77457	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title ) , shortcut , 0 )"		77239	0					
ANR	77458	Callee	sdb_set		77239	0					
ANR	77459	Identifier	sdb_set		77239	0					
ANR	77460	ArgumentList	g -> db		77239	1					
ANR	77461	Argument	g -> db		77239	0					
ANR	77462	PtrMemberAccess	g -> db		77239	0					
ANR	77463	Identifier	g		77239	0					
ANR	77464	Identifier	db		77239	1					
ANR	77465	Argument	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title )"		77239	1					
ANR	77466	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title )"		77239	0					
ANR	77467	Callee	sdb_fmt		77239	0					
ANR	77468	Identifier	sdb_fmt		77239	0					
ANR	77469	ArgumentList	"""agraph.nodes.%s.shortcut"""		77239	1					
ANR	77470	Argument	"""agraph.nodes.%s.shortcut"""		77239	0					
ANR	77471	PrimaryExpression	"""agraph.nodes.%s.shortcut"""		77239	0					
ANR	77472	Argument	title		77239	1					
ANR	77473	Identifier	title		77239	0					
ANR	77474	Argument	shortcut		77239	2					
ANR	77475	Identifier	shortcut		77239	0					
ANR	77476	Argument	0		77239	3					
ANR	77477	PrimaryExpression	0		77239	0					
ANR	77478	ExpressionStatement	free ( shortcut )	2221:4:57007:57022	77239	1	True				
ANR	77479	CallExpression	free ( shortcut )		77239	0					
ANR	77480	Callee	free		77239	0					
ANR	77481	Identifier	free		77239	0					
ANR	77482	ArgumentList	shortcut		77239	1					
ANR	77483	Argument	shortcut		77239	0					
ANR	77484	Identifier	shortcut		77239	0					
ANR	77485	IdentifierDeclStatement	"RANode * node = r_agraph_get_node ( g , title ) ;"	2224:2:57035:57078	77239	4	True				
ANR	77486	IdentifierDecl	"* node = r_agraph_get_node ( g , title )"		77239	0					
ANR	77487	IdentifierDeclType	RANode *		77239	0					
ANR	77488	Identifier	node		77239	1					
ANR	77489	AssignmentExpression	"* node = r_agraph_get_node ( g , title )"		77239	2		=			
ANR	77490	Identifier	node		77239	0					
ANR	77491	CallExpression	"r_agraph_get_node ( g , title )"		77239	1					
ANR	77492	Callee	r_agraph_get_node		77239	0					
ANR	77493	Identifier	r_agraph_get_node		77239	0					
ANR	77494	ArgumentList	g		77239	1					
ANR	77495	Argument	g		77239	0					
ANR	77496	Identifier	g		77239	0					
ANR	77497	Argument	title		77239	1					
ANR	77498	Identifier	title		77239	0					
ANR	77499	IfStatement	if ( node )		77239	5					
ANR	77500	Condition	node	2225:6:57086:57089	77239	0	True				
ANR	77501	Identifier	node		77239	0					
ANR	77502	CompoundStatement		37:12:964:964	77239	1					
ANR	77503	ExpressionStatement	free ( node -> body )	2226:3:57097:57114	77239	0	True				
ANR	77504	CallExpression	free ( node -> body )		77239	0					
ANR	77505	Callee	free		77239	0					
ANR	77506	Identifier	free		77239	0					
ANR	77507	ArgumentList	node -> body		77239	1					
ANR	77508	Argument	node -> body		77239	0					
ANR	77509	PtrMemberAccess	node -> body		77239	0					
ANR	77510	Identifier	node		77239	0					
ANR	77511	Identifier	body		77239	1					
ANR	77512	ExpressionStatement	node -> body = body	2227:3:57119:57136	77239	1	True				
ANR	77513	AssignmentExpression	node -> body = body		77239	0		=			
ANR	77514	PtrMemberAccess	node -> body		77239	0					
ANR	77515	Identifier	node		77239	0					
ANR	77516	Identifier	body		77239	1					
ANR	77517	Identifier	body		77239	1					
ANR	77518	ElseStatement	else		77239	0					
ANR	77519	CompoundStatement		40:9:1019:1019	77239	0					
ANR	77520	ExpressionStatement	free ( body )	2229:3:57152:57163	77239	0	True				
ANR	77521	CallExpression	free ( body )		77239	0					
ANR	77522	Callee	free		77239	0					
ANR	77523	Identifier	free		77239	0					
ANR	77524	ArgumentList	body		77239	1					
ANR	77525	Argument	body		77239	0					
ANR	77526	Identifier	body		77239	0					
ANR	77527	ExpressionStatement	free ( title )	2231:2:57171:57183	77239	6	True				
ANR	77528	CallExpression	free ( title )		77239	0					
ANR	77529	Callee	free		77239	0					
ANR	77530	Identifier	free		77239	0					
ANR	77531	ArgumentList	title		77239	1					
ANR	77532	Argument	title		77239	0					
ANR	77533	Identifier	title		77239	0					
ANR	77534	ExpressionStatement	core -> keep_asmqjmps = true	2232:2:57187:57213	77239	7	True				
ANR	77535	AssignmentExpression	core -> keep_asmqjmps = true		77239	0		=			
ANR	77536	PtrMemberAccess	core -> keep_asmqjmps		77239	0					
ANR	77537	Identifier	core		77239	0					
ANR	77538	Identifier	keep_asmqjmps		77239	1					
ANR	77539	Identifier	true		77239	1					
ANR	77540	IfStatement	if ( emu )		77239	24					
ANR	77541	Condition	emu	2235:5:57224:57226	77239	0	True				
ANR	77542	Identifier	emu		77239	0					
ANR	77543	CompoundStatement		47:10:1101:1101	77239	1					
ANR	77544	ExpressionStatement	core -> anal -> gp = saved_gp	2236:2:57233:57258	77239	0	True				
ANR	77545	AssignmentExpression	core -> anal -> gp = saved_gp		77239	0		=			
ANR	77546	PtrMemberAccess	core -> anal -> gp		77239	0					
ANR	77547	PtrMemberAccess	core -> anal		77239	0					
ANR	77548	Identifier	core		77239	0					
ANR	77549	Identifier	anal		77239	1					
ANR	77550	Identifier	gp		77239	1					
ANR	77551	Identifier	saved_gp		77239	1					
ANR	77552	IfStatement	if ( saved_arena )		77239	1					
ANR	77553	Condition	saved_arena	2237:6:57266:57276	77239	0	True				
ANR	77554	Identifier	saved_arena		77239	0					
ANR	77555	CompoundStatement		49:19:1151:1151	77239	1					
ANR	77556	ExpressionStatement	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"	2238:3:57284:57331	77239	0	True				
ANR	77557	CallExpression	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"		77239	0					
ANR	77558	Callee	r_reg_arena_poke		77239	0					
ANR	77559	Identifier	r_reg_arena_poke		77239	0					
ANR	77560	ArgumentList	core -> anal -> reg		77239	1					
ANR	77561	Argument	core -> anal -> reg		77239	0					
ANR	77562	PtrMemberAccess	core -> anal -> reg		77239	0					
ANR	77563	PtrMemberAccess	core -> anal		77239	0					
ANR	77564	Identifier	core		77239	0					
ANR	77565	Identifier	anal		77239	1					
ANR	77566	Identifier	reg		77239	1					
ANR	77567	Argument	saved_arena		77239	1					
ANR	77568	Identifier	saved_arena		77239	0					
ANR	77569	ExpressionStatement	R_FREE ( saved_arena )	2239:3:57336:57356	77239	1	True				
ANR	77570	CallExpression	R_FREE ( saved_arena )		77239	0					
ANR	77571	Callee	R_FREE		77239	0					
ANR	77572	Identifier	R_FREE		77239	0					
ANR	77573	ArgumentList	saved_arena		77239	1					
ANR	77574	Argument	saved_arena		77239	0					
ANR	77575	Identifier	saved_arena		77239	0					
ANR	77576	ExpressionStatement	core -> anal -> stackptr = saved_stackptr	2242:1:57366:57403	77239	25	True				
ANR	77577	AssignmentExpression	core -> anal -> stackptr = saved_stackptr		77239	0		=			
ANR	77578	PtrMemberAccess	core -> anal -> stackptr		77239	0					
ANR	77579	PtrMemberAccess	core -> anal		77239	0					
ANR	77580	Identifier	core		77239	0					
ANR	77581	Identifier	anal		77239	1					
ANR	77582	Identifier	stackptr		77239	1					
ANR	77583	Identifier	saved_stackptr		77239	1					
ANR	77584	ReturnType	static void		77239	1					
ANR	77585	Identifier	get_bbupdate		77239	2					
ANR	77586	ParameterList	"RAGraph * g , RCore * core , RAnalFunction * fcn"		77239	3					
ANR	77587	Parameter	RAGraph * g	2189:25:56082:56091	77239	0	True				
ANR	77588	ParameterType	RAGraph *		77239	0					
ANR	77589	Identifier	g		77239	1					
ANR	77590	Parameter	RCore * core	2189:37:56094:56104	77239	1	True				
ANR	77591	ParameterType	RCore *		77239	0					
ANR	77592	Identifier	core		77239	1					
ANR	77593	Parameter	RAnalFunction * fcn	2189:50:56107:56124	77239	2	True				
ANR	77594	ParameterType	RAnalFunction *		77239	0					
ANR	77595	Identifier	fcn		77239	1					
ANR	77596	CFGEntryNode	ENTRY		77239		True				
ANR	77597	CFGExitNode	EXIT		77239		True				
ANR	77598	CFGErrorNode	ERROR		77239		True				
ANR	77599	Symbol	bb		77239						
ANR	77600	Symbol	saved_stackptr		77239						
ANR	77601	Symbol	core -> anal -> reg		77239						
ANR	77602	Symbol	* fcn		77239						
ANR	77603	Symbol	saved_arena		77239						
ANR	77604	Symbol	g -> db		77239						
ANR	77605	Symbol	* core		77239						
ANR	77606	Symbol	shortcuts		77239						
ANR	77607	Symbol	core -> keep_asmqjmps		77239						
ANR	77608	Symbol	bb -> addr		77239						
ANR	77609	Symbol	emu		77239						
ANR	77610	Symbol	body		77239						
ANR	77611	Symbol	mode2opts		77239						
ANR	77612	Symbol	title		77239						
ANR	77613	Symbol	core -> anal		77239						
ANR	77614	Symbol	get_title		77239						
ANR	77615	Symbol	get_bb_body		77239						
ANR	77616	Symbol	fcn		77239						
ANR	77617	Symbol	shortcut		77239						
ANR	77618	Symbol	bbcmp		77239						
ANR	77619	Symbol	r_agraph_get_node		77239						
ANR	77620	Symbol	r_core_add_asmqjmp		77239						
ANR	77621	Symbol	node -> body		77239						
ANR	77622	Symbol	* node		77239						
ANR	77623	Symbol	saved_gp		77239						
ANR	77624	Symbol	UT64_MAX		77239						
ANR	77625	Symbol	sdb_fmt		77239						
ANR	77626	Symbol	* * core		77239						
ANR	77627	Symbol	core -> config		77239						
ANR	77628	Symbol	NULL		77239						
ANR	77629	Symbol	* bb		77239						
ANR	77630	Symbol	g		77239						
ANR	77631	Symbol	false		77239						
ANR	77632	Symbol	iter		77239						
ANR	77633	Symbol	core -> anal -> gp		77239						
ANR	77634	Symbol	core		77239						
ANR	77635	Symbol	* g		77239						
ANR	77636	Symbol	node		77239						
ANR	77637	Symbol	* core -> anal		77239						
ANR	77638	Symbol	fcn -> bbs		77239						
ANR	77639	Symbol	r_config_get_i		77239						
ANR	77640	Symbol	true		77239						
ANR	77641	Symbol	core -> anal -> stackptr		77239						
ANR	77642	Symbol	r_reg_arena_peek		77239						
ANR	77643	Function	fold_asm_trace	2245:0:57408:57953							
ANR	77644	FunctionDef	"fold_asm_trace (RCore * core , RAGraph * g)"		77643	0					
ANR	77645	CompoundStatement		2245:52:57460:57953	77643	0					
ANR	77646	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	2246:1:57463:57512	77643	0	True				
ANR	77647	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		77643	0					
ANR	77648	IdentifierDeclType	const RList *		77643	0					
ANR	77649	Identifier	nodes		77643	1					
ANR	77650	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		77643	2		=			
ANR	77651	Identifier	nodes		77643	0					
ANR	77652	CallExpression	r_graph_get_nodes ( g -> graph )		77643	1					
ANR	77653	Callee	r_graph_get_nodes		77643	0					
ANR	77654	Identifier	r_graph_get_nodes		77643	0					
ANR	77655	ArgumentList	g -> graph		77643	1					
ANR	77656	Argument	g -> graph		77643	0					
ANR	77657	PtrMemberAccess	g -> graph		77643	0					
ANR	77658	Identifier	g		77643	0					
ANR	77659	Identifier	graph		77643	1					
ANR	77660	IdentifierDeclStatement	RGraphNode * gn ;	2247:1:57515:57529	77643	1	True				
ANR	77661	IdentifierDecl	* gn		77643	0					
ANR	77662	IdentifierDeclType	RGraphNode *		77643	0					
ANR	77663	Identifier	gn		77643	1					
ANR	77664	IdentifierDeclStatement	RListIter * it ;	2248:1:57532:57545	77643	2	True				
ANR	77665	IdentifierDecl	* it		77643	0					
ANR	77666	IdentifierDeclType	RListIter *		77643	0					
ANR	77667	Identifier	it		77643	1					
ANR	77668	IdentifierDeclStatement	RANode * n ;	2249:1:57548:57557	77643	3	True				
ANR	77669	IdentifierDecl	* n		77643	0					
ANR	77670	IdentifierDeclType	RANode *		77643	0					
ANR	77671	Identifier	n		77643	1					
ANR	77672	IdentifierDeclStatement	RANode * curnode = get_anode ( g -> curnode ) ;	2251:1:57561:57601	77643	4	True				
ANR	77673	IdentifierDecl	* curnode = get_anode ( g -> curnode )		77643	0					
ANR	77674	IdentifierDeclType	RANode *		77643	0					
ANR	77675	Identifier	curnode		77643	1					
ANR	77676	AssignmentExpression	* curnode = get_anode ( g -> curnode )		77643	2		=			
ANR	77677	Identifier	curnode		77643	0					
ANR	77678	CallExpression	get_anode ( g -> curnode )		77643	1					
ANR	77679	Callee	get_anode		77643	0					
ANR	77680	Identifier	get_anode		77643	0					
ANR	77681	ArgumentList	g -> curnode		77643	1					
ANR	77682	Argument	g -> curnode		77643	0					
ANR	77683	PtrMemberAccess	g -> curnode		77643	0					
ANR	77684	Identifier	g		77643	0					
ANR	77685	Identifier	curnode		77643	1					
ANR	77686	Statement	graph_foreach_anode	2252:1:57604:57622	77643	5	True				
ANR	77687	Statement	(	2252:21:57624:57624	77643	6	True				
ANR	77688	Statement	nodes	2252:22:57625:57629	77643	7	True				
ANR	77689	Statement	","	2252:27:57630:57630	77643	8	True				
ANR	77690	Statement	it	2252:29:57632:57633	77643	9	True				
ANR	77691	Statement	","	2252:31:57634:57634	77643	10	True				
ANR	77692	Statement	gn	2252:33:57636:57637	77643	11	True				
ANR	77693	Statement	","	2252:35:57638:57638	77643	12	True				
ANR	77694	Statement	n	2252:37:57640:57640	77643	13	True				
ANR	77695	Statement	)	2252:38:57641:57641	77643	14	True				
ANR	77696	CompoundStatement		15:2:322:380	77643	15					
ANR	77697	IfStatement	if ( curnode == n )		77643	0					
ANR	77698	Condition	curnode == n	2253:6:57651:57662	77643	0	True				
ANR	77699	EqualityExpression	curnode == n		77643	0		==			
ANR	77700	Identifier	curnode		77643	0					
ANR	77701	Identifier	n		77643	1					
ANR	77702	CompoundStatement		9:20:204:204	77643	1					
ANR	77703	ExpressionStatement	n -> is_mini = false	2254:3:57670:57688	77643	0	True				
ANR	77704	AssignmentExpression	n -> is_mini = false		77643	0		=			
ANR	77705	PtrMemberAccess	n -> is_mini		77643	0					
ANR	77706	Identifier	n		77643	0					
ANR	77707	Identifier	is_mini		77643	1					
ANR	77708	Identifier	false		77643	1					
ANR	77709	ExpressionStatement	g -> need_reload_nodes = true	2255:3:57693:57720	77643	1	True				
ANR	77710	AssignmentExpression	g -> need_reload_nodes = true		77643	0		=			
ANR	77711	PtrMemberAccess	g -> need_reload_nodes		77643	0					
ANR	77712	Identifier	g		77643	0					
ANR	77713	Identifier	need_reload_nodes		77643	1					
ANR	77714	Identifier	true		77643	1					
ANR	77715	ContinueStatement	continue ;	2256:3:57725:57733	77643	2	True				
ANR	77716	IdentifierDeclStatement	"ut64 addr = r_num_get ( NULL , n -> title ) ;"	2258:2:57741:57779	77643	1	True				
ANR	77717	IdentifierDecl	"addr = r_num_get ( NULL , n -> title )"		77643	0					
ANR	77718	IdentifierDeclType	ut64		77643	0					
ANR	77719	Identifier	addr		77643	1					
ANR	77720	AssignmentExpression	"addr = r_num_get ( NULL , n -> title )"		77643	2		=			
ANR	77721	Identifier	addr		77643	0					
ANR	77722	CallExpression	"r_num_get ( NULL , n -> title )"		77643	1					
ANR	77723	Callee	r_num_get		77643	0					
ANR	77724	Identifier	r_num_get		77643	0					
ANR	77725	ArgumentList	NULL		77643	1					
ANR	77726	Argument	NULL		77643	0					
ANR	77727	Identifier	NULL		77643	0					
ANR	77728	Argument	n -> title		77643	1					
ANR	77729	PtrMemberAccess	n -> title		77643	0					
ANR	77730	Identifier	n		77643	0					
ANR	77731	Identifier	title		77643	1					
ANR	77732	IdentifierDeclStatement	"RDebugTracepoint * tp = r_debug_trace_get ( core -> dbg , addr ) ;"	2259:2:57783:57841	77643	2	True				
ANR	77733	IdentifierDecl	"* tp = r_debug_trace_get ( core -> dbg , addr )"		77643	0					
ANR	77734	IdentifierDeclType	RDebugTracepoint *		77643	0					
ANR	77735	Identifier	tp		77643	1					
ANR	77736	AssignmentExpression	"* tp = r_debug_trace_get ( core -> dbg , addr )"		77643	2		=			
ANR	77737	Identifier	tp		77643	0					
ANR	77738	CallExpression	"r_debug_trace_get ( core -> dbg , addr )"		77643	1					
ANR	77739	Callee	r_debug_trace_get		77643	0					
ANR	77740	Identifier	r_debug_trace_get		77643	0					
ANR	77741	ArgumentList	core -> dbg		77643	1					
ANR	77742	Argument	core -> dbg		77643	0					
ANR	77743	PtrMemberAccess	core -> dbg		77643	0					
ANR	77744	Identifier	core		77643	0					
ANR	77745	Identifier	dbg		77643	1					
ANR	77746	Argument	addr		77643	1					
ANR	77747	Identifier	addr		77643	0					
ANR	77748	ExpressionStatement	n -> is_mini = ( tp == NULL )	2260:2:57845:57870	77643	3	True				
ANR	77749	AssignmentExpression	n -> is_mini = ( tp == NULL )		77643	0		=			
ANR	77750	PtrMemberAccess	n -> is_mini		77643	0					
ANR	77751	Identifier	n		77643	0					
ANR	77752	Identifier	is_mini		77643	1					
ANR	77753	EqualityExpression	tp == NULL		77643	1		==			
ANR	77754	Identifier	tp		77643	0					
ANR	77755	Identifier	NULL		77643	1					
ANR	77756	ExpressionStatement	g -> need_update_dim = 1	2262:1:57876:57898	77643	16	True				
ANR	77757	AssignmentExpression	g -> need_update_dim = 1		77643	0		=			
ANR	77758	PtrMemberAccess	g -> need_update_dim		77643	0					
ANR	77759	Identifier	g		77643	0					
ANR	77760	Identifier	need_update_dim		77643	1					
ANR	77761	PrimaryExpression	1		77643	1					
ANR	77762	ReturnType	static void		77643	1					
ANR	77763	Identifier	fold_asm_trace		77643	2					
ANR	77764	ParameterList	"RCore * core , RAGraph * g"		77643	3					
ANR	77765	Parameter	RCore * core	2245:27:57435:57445	77643	0	True				
ANR	77766	ParameterType	RCore *		77643	0					
ANR	77767	Identifier	core		77643	1					
ANR	77768	Parameter	RAGraph * g	2245:40:57448:57457	77643	1	True				
ANR	77769	ParameterType	RAGraph *		77643	0					
ANR	77770	Identifier	g		77643	1					
ANR	77771	CFGEntryNode	ENTRY		77643		True				
ANR	77772	CFGExitNode	EXIT		77643		True				
ANR	77773	CFGErrorNode	ERROR		77643		True				
ANR	77774	Symbol	* core		77643						
ANR	77775	Symbol	g -> need_update_dim		77643						
ANR	77776	Symbol	g -> graph		77643						
ANR	77777	Symbol	r_num_get		77643						
ANR	77778	Symbol	addr		77643						
ANR	77779	Symbol	r_graph_get_nodes		77643						
ANR	77780	Symbol	get_anode		77643						
ANR	77781	Symbol	NULL		77643						
ANR	77782	Symbol	g -> need_reload_nodes		77643						
ANR	77783	Symbol	g		77643						
ANR	77784	Symbol	gn		77643						
ANR	77785	Symbol	curnode		77643						
ANR	77786	Symbol	false		77643						
ANR	77787	Symbol	n -> is_mini		77643						
ANR	77788	Symbol	r_debug_trace_get		77643						
ANR	77789	Symbol	it		77643						
ANR	77790	Symbol	n		77643						
ANR	77791	Symbol	core		77643						
ANR	77792	Symbol	* g		77643						
ANR	77793	Symbol	nodes		77643						
ANR	77794	Symbol	g -> curnode		77643						
ANR	77795	Symbol	* n		77643						
ANR	77796	Symbol	true		77643						
ANR	77797	Symbol	n -> title		77643						
ANR	77798	Symbol	tp		77643						
ANR	77799	Symbol	core -> dbg		77643						
ANR	77800	Function	delete_dup_edges	2266:0:57956:58517							
ANR	77801	FunctionDef	delete_dup_edges (RAGraph * g)		77800	0					
ANR	77802	CompoundStatement		2266:42:57998:58517	77800	0					
ANR	77803	IdentifierDeclStatement	"RListIter * it , * in_it , * in_it2 , * in_it2_tmp ;"	2267:1:58001:58044	77800	0	True				
ANR	77804	IdentifierDecl	* it		77800	0					
ANR	77805	IdentifierDeclType	RListIter *		77800	0					
ANR	77806	Identifier	it		77800	1					
ANR	77807	IdentifierDecl	* in_it		77800	1					
ANR	77808	IdentifierDeclType	RListIter *		77800	0					
ANR	77809	Identifier	in_it		77800	1					
ANR	77810	IdentifierDecl	* in_it2		77800	2					
ANR	77811	IdentifierDeclType	RListIter *		77800	0					
ANR	77812	Identifier	in_it2		77800	1					
ANR	77813	IdentifierDecl	* in_it2_tmp		77800	3					
ANR	77814	IdentifierDeclType	RListIter *		77800	0					
ANR	77815	Identifier	in_it2_tmp		77800	1					
ANR	77816	IdentifierDeclStatement	"RGraphNode * n , * a , * b ;"	2268:1:58047:58068	77800	1	True				
ANR	77817	IdentifierDecl	* n		77800	0					
ANR	77818	IdentifierDeclType	RGraphNode *		77800	0					
ANR	77819	Identifier	n		77800	1					
ANR	77820	IdentifierDecl	* a		77800	1					
ANR	77821	IdentifierDeclType	RGraphNode *		77800	0					
ANR	77822	Identifier	a		77800	1					
ANR	77823	IdentifierDecl	* b		77800	2					
ANR	77824	IdentifierDeclType	RGraphNode *		77800	0					
ANR	77825	Identifier	b		77800	1					
ANR	77826	Statement	r_list_foreach	2269:1:58071:58084	77800	2	True				
ANR	77827	Statement	(	2269:16:58086:58086	77800	3	True				
ANR	77828	Statement	g	2269:17:58087:58087	77800	4	True				
ANR	77829	Statement	->	2269:18:58088:58089	77800	5	True				
ANR	77830	Statement	graph	2269:20:58090:58094	77800	6	True				
ANR	77831	Statement	->	2269:25:58095:58096	77800	7	True				
ANR	77832	Statement	nodes	2269:27:58097:58101	77800	8	True				
ANR	77833	Statement	","	2269:32:58102:58102	77800	9	True				
ANR	77834	Statement	it	2269:34:58104:58105	77800	10	True				
ANR	77835	Statement	","	2269:36:58106:58106	77800	11	True				
ANR	77836	Statement	n	2269:38:58108:58108	77800	12	True				
ANR	77837	Statement	)	2269:39:58109:58109	77800	13	True				
ANR	77838	CompoundStatement		4:41:112:112	77800	14					
ANR	77839	Statement	r_list_foreach	2270:2:58115:58128	77800	0	True				
ANR	77840	Statement	(	2270:17:58130:58130	77800	1	True				
ANR	77841	Statement	n	2270:18:58131:58131	77800	2	True				
ANR	77842	Statement	->	2270:19:58132:58133	77800	3	True				
ANR	77843	Statement	out_nodes	2270:21:58134:58142	77800	4	True				
ANR	77844	Statement	","	2270:30:58143:58143	77800	5	True				
ANR	77845	Statement	in_it	2270:32:58145:58149	77800	6	True				
ANR	77846	Statement	","	2270:37:58150:58150	77800	7	True				
ANR	77847	Statement	a	2270:39:58152:58152	77800	8	True				
ANR	77848	Statement	)	2270:40:58153:58153	77800	9	True				
ANR	77849	CompoundStatement		5:42:156:156	77800	10					
ANR	77850	ForStatement	"for ( in_it2 = in_it -> n ; in_it2 && ( b = in_it2 -> data , in_it2_tmp = in_it2 -> n , 1 ) ; in_it2 = in_it2_tmp )"		77800	0					
ANR	77851	ForInit	in_it2 = in_it -> n ;	2271:8:58165:58182	77800	0	True				
ANR	77852	AssignmentExpression	in_it2 = in_it -> n		77800	0		=			
ANR	77853	Identifier	in_it2		77800	0					
ANR	77854	PtrMemberAccess	in_it -> n		77800	1					
ANR	77855	Identifier	in_it		77800	0					
ANR	77856	Identifier	n		77800	1					
ANR	77857	Condition	"in_it2 && ( b = in_it2 -> data , in_it2_tmp = in_it2 -> n , 1 )"	2271:27:58184:58238	77800	1	True				
ANR	77858	AndExpression	"in_it2 && ( b = in_it2 -> data , in_it2_tmp = in_it2 -> n , 1 )"		77800	0		&&			
ANR	77859	Identifier	in_it2		77800	0					
ANR	77860	Expression	"b = in_it2 -> data , in_it2_tmp = in_it2 -> n , 1"		77800	1					
ANR	77861	AssignmentExpression	b = in_it2 -> data		77800	0		=			
ANR	77862	Identifier	b		77800	0					
ANR	77863	PtrMemberAccess	in_it2 -> data		77800	1					
ANR	77864	Identifier	in_it2		77800	0					
ANR	77865	Identifier	data		77800	1					
ANR	77866	Expression	"in_it2_tmp = in_it2 -> n , 1"		77800	1					
ANR	77867	AssignmentExpression	in_it2_tmp = in_it2 -> n		77800	0		=			
ANR	77868	Identifier	in_it2_tmp		77800	0					
ANR	77869	PtrMemberAccess	in_it2 -> n		77800	1					
ANR	77870	Identifier	in_it2		77800	0					
ANR	77871	Identifier	n		77800	1					
ANR	77872	PrimaryExpression	1		77800	1					
ANR	77873	AssignmentExpression	in_it2 = in_it2_tmp	2271:84:58241:58259	77800	2	True	=			
ANR	77874	Identifier	in_it2		77800	0					
ANR	77875	Identifier	in_it2_tmp		77800	1					
ANR	77876	CompoundStatement		6:105:263:263	77800	3					
ANR	77877	IfStatement	if ( a -> idx == b -> idx )		77800	0					
ANR	77878	Condition	a -> idx == b -> idx	2272:8:58272:58287	77800	0	True				
ANR	77879	EqualityExpression	a -> idx == b -> idx		77800	0		==			
ANR	77880	PtrMemberAccess	a -> idx		77800	0					
ANR	77881	Identifier	a		77800	0					
ANR	77882	Identifier	idx		77800	1					
ANR	77883	PtrMemberAccess	b -> idx		77800	1					
ANR	77884	Identifier	b		77800	0					
ANR	77885	Identifier	idx		77800	1					
ANR	77886	CompoundStatement		7:26:291:291	77800	1					
ANR	77887	ExpressionStatement	"r_list_delete ( n -> out_nodes , in_it2 )"	2273:5:58297:58333	77800	0	True				
ANR	77888	CallExpression	"r_list_delete ( n -> out_nodes , in_it2 )"		77800	0					
ANR	77889	Callee	r_list_delete		77800	0					
ANR	77890	Identifier	r_list_delete		77800	0					
ANR	77891	ArgumentList	n -> out_nodes		77800	1					
ANR	77892	Argument	n -> out_nodes		77800	0					
ANR	77893	PtrMemberAccess	n -> out_nodes		77800	0					
ANR	77894	Identifier	n		77800	0					
ANR	77895	Identifier	out_nodes		77800	1					
ANR	77896	Argument	in_it2		77800	1					
ANR	77897	Identifier	in_it2		77800	0					
ANR	77898	ExpressionStatement	"r_list_delete_data ( n -> all_neighbours , b )"	2274:5:58340:58381	77800	1	True				
ANR	77899	CallExpression	"r_list_delete_data ( n -> all_neighbours , b )"		77800	0					
ANR	77900	Callee	r_list_delete_data		77800	0					
ANR	77901	Identifier	r_list_delete_data		77800	0					
ANR	77902	ArgumentList	n -> all_neighbours		77800	1					
ANR	77903	Argument	n -> all_neighbours		77800	0					
ANR	77904	PtrMemberAccess	n -> all_neighbours		77800	0					
ANR	77905	Identifier	n		77800	0					
ANR	77906	Identifier	all_neighbours		77800	1					
ANR	77907	Argument	b		77800	1					
ANR	77908	Identifier	b		77800	0					
ANR	77909	ExpressionStatement	"r_list_delete_data ( b -> in_nodes , n )"	2275:5:58388:58423	77800	2	True				
ANR	77910	CallExpression	"r_list_delete_data ( b -> in_nodes , n )"		77800	0					
ANR	77911	Callee	r_list_delete_data		77800	0					
ANR	77912	Identifier	r_list_delete_data		77800	0					
ANR	77913	ArgumentList	b -> in_nodes		77800	1					
ANR	77914	Argument	b -> in_nodes		77800	0					
ANR	77915	PtrMemberAccess	b -> in_nodes		77800	0					
ANR	77916	Identifier	b		77800	0					
ANR	77917	Identifier	in_nodes		77800	1					
ANR	77918	Argument	n		77800	1					
ANR	77919	Identifier	n		77800	0					
ANR	77920	ExpressionStatement	"r_list_delete_data ( b -> all_neighbours , n )"	2276:5:58430:58471	77800	3	True				
ANR	77921	CallExpression	"r_list_delete_data ( b -> all_neighbours , n )"		77800	0					
ANR	77922	Callee	r_list_delete_data		77800	0					
ANR	77923	Identifier	r_list_delete_data		77800	0					
ANR	77924	ArgumentList	b -> all_neighbours		77800	1					
ANR	77925	Argument	b -> all_neighbours		77800	0					
ANR	77926	PtrMemberAccess	b -> all_neighbours		77800	0					
ANR	77927	Identifier	b		77800	0					
ANR	77928	Identifier	all_neighbours		77800	1					
ANR	77929	Argument	n		77800	1					
ANR	77930	Identifier	n		77800	0					
ANR	77931	ExpressionStatement	g -> graph -> n_edges --	2277:5:58478:58497	77800	4	True				
ANR	77932	PostIncDecOperationExpression	g -> graph -> n_edges --		77800	0					
ANR	77933	PtrMemberAccess	g -> graph -> n_edges		77800	0					
ANR	77934	PtrMemberAccess	g -> graph		77800	0					
ANR	77935	Identifier	g		77800	0					
ANR	77936	Identifier	graph		77800	1					
ANR	77937	Identifier	n_edges		77800	1					
ANR	77938	IncDec	--		77800	1					
ANR	77939	ReturnType	static void		77800	1					
ANR	77940	Identifier	delete_dup_edges		77800	2					
ANR	77941	ParameterList	RAGraph * g		77800	3					
ANR	77942	Parameter	RAGraph * g	2266:30:57986:57995	77800	0	True				
ANR	77943	ParameterType	RAGraph *		77800	0					
ANR	77944	Identifier	g		77800	1					
ANR	77945	CFGEntryNode	ENTRY		77800		True				
ANR	77946	CFGExitNode	EXIT		77800		True				
ANR	77947	Symbol	in_it2_tmp		77800						
ANR	77948	Symbol	* g -> graph		77800						
ANR	77949	Symbol	g -> graph -> n_edges		77800						
ANR	77950	Symbol	* in_it		77800						
ANR	77951	Symbol	g -> graph		77800						
ANR	77952	Symbol	in_it2 -> data		77800						
ANR	77953	Symbol	a		77800						
ANR	77954	Symbol	b		77800						
ANR	77955	Symbol	* in_it2		77800						
ANR	77956	Symbol	* * g		77800						
ANR	77957	Symbol	g		77800						
ANR	77958	Symbol	b -> in_nodes		77800						
ANR	77959	Symbol	in_it2		77800						
ANR	77960	Symbol	b -> all_neighbours		77800						
ANR	77961	Symbol	it		77800						
ANR	77962	Symbol	in_it2 -> n		77800						
ANR	77963	Symbol	* a		77800						
ANR	77964	Symbol	* b		77800						
ANR	77965	Symbol	n		77800						
ANR	77966	Symbol	a -> idx		77800						
ANR	77967	Symbol	* g		77800						
ANR	77968	Symbol	b -> idx		77800						
ANR	77969	Symbol	in_it -> n		77800						
ANR	77970	Symbol	* n		77800						
ANR	77971	Symbol	n -> out_nodes		77800						
ANR	77972	Symbol	n -> all_neighbours		77800						
ANR	77973	Symbol	in_it		77800						
ANR	77974	Function	isbbfew	2284:0:58520:58889							
ANR	77975	FunctionDef	"isbbfew (RAnalBlock * curbb , RAnalBlock * bb)"		77974	0					
ANR	77976	CompoundStatement		2284:55:58575:58889	77974	0					
ANR	77977	IfStatement	if ( bb -> addr == curbb -> addr || bb -> addr == curbb -> jump || bb -> addr == curbb -> fail )		77974	0					
ANR	77978	Condition	bb -> addr == curbb -> addr || bb -> addr == curbb -> jump || bb -> addr == curbb -> fail	2285:5:58582:58658	77974	0	True				
ANR	77979	OrExpression	bb -> addr == curbb -> addr || bb -> addr == curbb -> jump || bb -> addr == curbb -> fail		77974	0		||			
ANR	77980	EqualityExpression	bb -> addr == curbb -> addr		77974	0		==			
ANR	77981	PtrMemberAccess	bb -> addr		77974	0					
ANR	77982	Identifier	bb		77974	0					
ANR	77983	Identifier	addr		77974	1					
ANR	77984	PtrMemberAccess	curbb -> addr		77974	1					
ANR	77985	Identifier	curbb		77974	0					
ANR	77986	Identifier	addr		77974	1					
ANR	77987	OrExpression	bb -> addr == curbb -> jump || bb -> addr == curbb -> fail		77974	1		||			
ANR	77988	EqualityExpression	bb -> addr == curbb -> jump		77974	0		==			
ANR	77989	PtrMemberAccess	bb -> addr		77974	0					
ANR	77990	Identifier	bb		77974	0					
ANR	77991	Identifier	addr		77974	1					
ANR	77992	PtrMemberAccess	curbb -> jump		77974	1					
ANR	77993	Identifier	curbb		77974	0					
ANR	77994	Identifier	jump		77974	1					
ANR	77995	EqualityExpression	bb -> addr == curbb -> fail		77974	1		==			
ANR	77996	PtrMemberAccess	bb -> addr		77974	0					
ANR	77997	Identifier	bb		77974	0					
ANR	77998	Identifier	addr		77974	1					
ANR	77999	PtrMemberAccess	curbb -> fail		77974	1					
ANR	78000	Identifier	curbb		77974	0					
ANR	78001	Identifier	fail		77974	1					
ANR	78002	CompoundStatement		2:84:85:85	77974	1					
ANR	78003	ReturnStatement	return true ;	2287:2:58681:58692	77974	0	True				
ANR	78004	Identifier	true		77974	0					
ANR	78005	IfStatement	if ( curbb -> switch_op )		77974	1					
ANR	78006	Condition	curbb -> switch_op	2289:5:58702:58717	77974	0	True				
ANR	78007	PtrMemberAccess	curbb -> switch_op		77974	0					
ANR	78008	Identifier	curbb		77974	0					
ANR	78009	Identifier	switch_op		77974	1					
ANR	78010	CompoundStatement		8:2:165:181	77974	1					
ANR	78011	IdentifierDeclStatement	RListIter * it ;	2290:2:58724:58737	77974	0	True				
ANR	78012	IdentifierDecl	* it		77974	0					
ANR	78013	IdentifierDeclType	RListIter *		77974	0					
ANR	78014	Identifier	it		77974	1					
ANR	78015	IdentifierDeclStatement	RAnalCaseOp * cop ;	2291:2:58741:58757	77974	1	True				
ANR	78016	IdentifierDecl	* cop		77974	0					
ANR	78017	IdentifierDeclType	RAnalCaseOp *		77974	0					
ANR	78018	Identifier	cop		77974	1					
ANR	78019	Statement	r_list_foreach	2292:2:58761:58774	77974	2	True				
ANR	78020	Statement	(	2292:17:58776:58776	77974	3	True				
ANR	78021	Statement	curbb	2292:18:58777:58781	77974	4	True				
ANR	78022	Statement	->	2292:23:58782:58783	77974	5	True				
ANR	78023	Statement	switch_op	2292:25:58784:58792	77974	6	True				
ANR	78024	Statement	->	2292:34:58793:58794	77974	7	True				
ANR	78025	Statement	cases	2292:36:58795:58799	77974	8	True				
ANR	78026	Statement	","	2292:41:58800:58800	77974	9	True				
ANR	78027	Statement	it	2292:43:58802:58803	77974	10	True				
ANR	78028	Statement	","	2292:45:58804:58804	77974	11	True				
ANR	78029	Statement	cop	2292:47:58806:58808	77974	12	True				
ANR	78030	Statement	)	2292:50:58809:58809	77974	13	True				
ANR	78031	CompoundStatement		9:52:235:235	77974	14					
ANR	78032	IfStatement	if ( cop -> addr == bb -> addr )		77974	0					
ANR	78033	Condition	cop -> addr == bb -> addr	2293:7:58820:58840	77974	0	True				
ANR	78034	EqualityExpression	cop -> addr == bb -> addr		77974	0		==			
ANR	78035	PtrMemberAccess	cop -> addr		77974	0					
ANR	78036	Identifier	cop		77974	0					
ANR	78037	Identifier	addr		77974	1					
ANR	78038	PtrMemberAccess	bb -> addr		77974	1					
ANR	78039	Identifier	bb		77974	0					
ANR	78040	Identifier	addr		77974	1					
ANR	78041	CompoundStatement		10:30:267:267	77974	1					
ANR	78042	ReturnStatement	return true ;	2294:4:58849:58860	77974	0	True				
ANR	78043	Identifier	true		77974	0					
ANR	78044	ReturnStatement	return false ;	2298:1:58875:58887	77974	2	True				
ANR	78045	Identifier	false		77974	0					
ANR	78046	ReturnType	static bool		77974	1					
ANR	78047	Identifier	isbbfew		77974	2					
ANR	78048	ParameterList	"RAnalBlock * curbb , RAnalBlock * bb"		77974	3					
ANR	78049	Parameter	RAnalBlock * curbb	2284:20:58540:58556	77974	0	True				
ANR	78050	ParameterType	RAnalBlock *		77974	0					
ANR	78051	Identifier	curbb		77974	1					
ANR	78052	Parameter	RAnalBlock * bb	2284:39:58559:58572	77974	1	True				
ANR	78053	ParameterType	RAnalBlock *		77974	0					
ANR	78054	Identifier	bb		77974	1					
ANR	78055	CFGEntryNode	ENTRY		77974		True				
ANR	78056	CFGExitNode	EXIT		77974		True				
ANR	78057	Symbol	bb		77974						
ANR	78058	Symbol	* curbb		77974						
ANR	78059	Symbol	* bb		77974						
ANR	78060	Symbol	cop		77974						
ANR	78061	Symbol	false		77974						
ANR	78062	Symbol	curbb		77974						
ANR	78063	Symbol	bb -> addr		77974						
ANR	78064	Symbol	it		77974						
ANR	78065	Symbol	curbb -> fail		77974						
ANR	78066	Symbol	cop -> addr		77974						
ANR	78067	Symbol	* cop		77974						
ANR	78068	Symbol	true		77974						
ANR	78069	Symbol	curbb -> switch_op		77974						
ANR	78070	Symbol	curbb -> addr		77974						
ANR	78071	Symbol	curbb -> jump		77974						
ANR	78072	Function	get_bbnodes	2302:0:58968:61531							
ANR	78073	FunctionDef	"get_bbnodes (RAGraph * g , RCore * core , RAnalFunction * fcn)"		78072	0					
ANR	78074	CompoundStatement		2302:68:59036:61531	78072	0					
ANR	78075	IdentifierDeclStatement	RAnalBlock * bb ;	2303:1:59039:59053	78072	0	True				
ANR	78076	IdentifierDecl	* bb		78072	0					
ANR	78077	IdentifierDeclType	RAnalBlock *		78072	0					
ANR	78078	Identifier	bb		78072	1					
ANR	78079	IdentifierDeclStatement	RListIter * iter ;	2304:1:59056:59071	78072	1	True				
ANR	78080	IdentifierDecl	* iter		78072	0					
ANR	78081	IdentifierDeclType	RListIter *		78072	0					
ANR	78082	Identifier	iter		78072	1					
ANR	78083	IdentifierDeclStatement	char * shortcut = NULL ;	2305:1:59074:59095	78072	2	True				
ANR	78084	IdentifierDecl	* shortcut = NULL		78072	0					
ANR	78085	IdentifierDeclType	char *		78072	0					
ANR	78086	Identifier	shortcut		78072	1					
ANR	78087	AssignmentExpression	* shortcut = NULL		78072	2		=			
ANR	78088	Identifier	NULL		78072	0					
ANR	78089	Identifier	NULL		78072	1					
ANR	78090	IdentifierDeclStatement	int shortcuts = 0 ;	2306:1:59098:59115	78072	3	True				
ANR	78091	IdentifierDecl	shortcuts = 0		78072	0					
ANR	78092	IdentifierDeclType	int		78072	0					
ANR	78093	Identifier	shortcuts		78072	1					
ANR	78094	AssignmentExpression	shortcuts = 0		78072	2		=			
ANR	78095	Identifier	shortcuts		78072	0					
ANR	78096	PrimaryExpression	0		78072	1					
ANR	78097	IdentifierDeclStatement	"bool emu = r_config_get_i ( core -> config , ""asm.emu"" ) ;"	2307:1:59118:59169	78072	4	True				
ANR	78098	IdentifierDecl	"emu = r_config_get_i ( core -> config , ""asm.emu"" )"		78072	0					
ANR	78099	IdentifierDeclType	bool		78072	0					
ANR	78100	Identifier	emu		78072	1					
ANR	78101	AssignmentExpression	"emu = r_config_get_i ( core -> config , ""asm.emu"" )"		78072	2		=			
ANR	78102	Identifier	emu		78072	0					
ANR	78103	CallExpression	"r_config_get_i ( core -> config , ""asm.emu"" )"		78072	1					
ANR	78104	Callee	r_config_get_i		78072	0					
ANR	78105	Identifier	r_config_get_i		78072	0					
ANR	78106	ArgumentList	core -> config		78072	1					
ANR	78107	Argument	core -> config		78072	0					
ANR	78108	PtrMemberAccess	core -> config		78072	0					
ANR	78109	Identifier	core		78072	0					
ANR	78110	Identifier	config		78072	1					
ANR	78111	Argument	"""asm.emu"""		78072	1					
ANR	78112	PrimaryExpression	"""asm.emu"""		78072	0					
ANR	78113	IdentifierDeclStatement	"bool few = r_config_get_i ( core -> config , ""graph.few"" ) ;"	2308:1:59172:59225	78072	5	True				
ANR	78114	IdentifierDecl	"few = r_config_get_i ( core -> config , ""graph.few"" )"		78072	0					
ANR	78115	IdentifierDeclType	bool		78072	0					
ANR	78116	Identifier	few		78072	1					
ANR	78117	AssignmentExpression	"few = r_config_get_i ( core -> config , ""graph.few"" )"		78072	2		=			
ANR	78118	Identifier	few		78072	0					
ANR	78119	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		78072	1					
ANR	78120	Callee	r_config_get_i		78072	0					
ANR	78121	Identifier	r_config_get_i		78072	0					
ANR	78122	ArgumentList	core -> config		78072	1					
ANR	78123	Argument	core -> config		78072	0					
ANR	78124	PtrMemberAccess	core -> config		78072	0					
ANR	78125	Identifier	core		78072	0					
ANR	78126	Identifier	config		78072	1					
ANR	78127	Argument	"""graph.few"""		78072	1					
ANR	78128	PrimaryExpression	"""graph.few"""		78072	0					
ANR	78129	IdentifierDeclStatement	int ret = false ;	2309:1:59228:59243	78072	6	True				
ANR	78130	IdentifierDecl	ret = false		78072	0					
ANR	78131	IdentifierDeclType	int		78072	0					
ANR	78132	Identifier	ret		78072	1					
ANR	78133	AssignmentExpression	ret = false		78072	2		=			
ANR	78134	Identifier	false		78072	0					
ANR	78135	Identifier	false		78072	1					
ANR	78136	IdentifierDeclStatement	ut64 saved_gp = core -> anal -> gp ;	2310:1:59246:59276	78072	7	True				
ANR	78137	IdentifierDecl	saved_gp = core -> anal -> gp		78072	0					
ANR	78138	IdentifierDeclType	ut64		78072	0					
ANR	78139	Identifier	saved_gp		78072	1					
ANR	78140	AssignmentExpression	saved_gp = core -> anal -> gp		78072	2		=			
ANR	78141	Identifier	saved_gp		78072	0					
ANR	78142	PtrMemberAccess	core -> anal -> gp		78072	1					
ANR	78143	PtrMemberAccess	core -> anal		78072	0					
ANR	78144	Identifier	core		78072	0					
ANR	78145	Identifier	anal		78072	1					
ANR	78146	Identifier	gp		78072	1					
ANR	78147	IdentifierDeclStatement	ut8 * saved_arena = NULL ;	2311:1:59279:59302	78072	8	True				
ANR	78148	IdentifierDecl	* saved_arena = NULL		78072	0					
ANR	78149	IdentifierDeclType	ut8 *		78072	0					
ANR	78150	Identifier	saved_arena		78072	1					
ANR	78151	AssignmentExpression	* saved_arena = NULL		78072	2		=			
ANR	78152	Identifier	NULL		78072	0					
ANR	78153	Identifier	NULL		78072	1					
ANR	78154	IdentifierDeclStatement	int saved_stackptr = core -> anal -> stackptr ;	2312:1:59305:59346	78072	9	True				
ANR	78155	IdentifierDecl	saved_stackptr = core -> anal -> stackptr		78072	0					
ANR	78156	IdentifierDeclType	int		78072	0					
ANR	78157	Identifier	saved_stackptr		78072	1					
ANR	78158	AssignmentExpression	saved_stackptr = core -> anal -> stackptr		78072	2		=			
ANR	78159	Identifier	saved_stackptr		78072	0					
ANR	78160	PtrMemberAccess	core -> anal -> stackptr		78072	1					
ANR	78161	PtrMemberAccess	core -> anal		78072	0					
ANR	78162	Identifier	core		78072	0					
ANR	78163	Identifier	anal		78072	1					
ANR	78164	Identifier	stackptr		78072	1					
ANR	78165	ExpressionStatement	core -> keep_asmqjmps = false	2313:1:59349:59376	78072	10	True				
ANR	78166	AssignmentExpression	core -> keep_asmqjmps = false		78072	0		=			
ANR	78167	PtrMemberAccess	core -> keep_asmqjmps		78072	0					
ANR	78168	Identifier	core		78072	0					
ANR	78169	Identifier	keep_asmqjmps		78072	1					
ANR	78170	Identifier	false		78072	1					
ANR	78171	IfStatement	if ( ! fcn )		78072	11					
ANR	78172	Condition	! fcn	2315:5:59384:59387	78072	0	True				
ANR	78173	UnaryOperationExpression	! fcn		78072	0					
ANR	78174	UnaryOperator	!		78072	0					
ANR	78175	Identifier	fcn		78072	1					
ANR	78176	CompoundStatement		14:11:353:353	78072	1					
ANR	78177	ReturnStatement	return false ;	2316:2:59394:59406	78072	0	True				
ANR	78178	Identifier	false		78072	0					
ANR	78179	IfStatement	if ( emu )		78072	12					
ANR	78180	Condition	emu	2318:5:59416:59418	78072	0	True				
ANR	78181	Identifier	emu		78072	0					
ANR	78182	CompoundStatement		17:10:384:384	78072	1					
ANR	78183	ExpressionStatement	saved_arena = r_reg_arena_peek ( core -> anal -> reg )	2319:2:59425:59473	78072	0	True				
ANR	78184	AssignmentExpression	saved_arena = r_reg_arena_peek ( core -> anal -> reg )		78072	0		=			
ANR	78185	Identifier	saved_arena		78072	0					
ANR	78186	CallExpression	r_reg_arena_peek ( core -> anal -> reg )		78072	1					
ANR	78187	Callee	r_reg_arena_peek		78072	0					
ANR	78188	Identifier	r_reg_arena_peek		78072	0					
ANR	78189	ArgumentList	core -> anal -> reg		78072	1					
ANR	78190	Argument	core -> anal -> reg		78072	0					
ANR	78191	PtrMemberAccess	core -> anal -> reg		78072	0					
ANR	78192	PtrMemberAccess	core -> anal		78072	0					
ANR	78193	Identifier	core		78072	0					
ANR	78194	Identifier	anal		78072	1					
ANR	78195	Identifier	reg		78072	1					
ANR	78196	ExpressionStatement	"r_list_sort ( fcn -> bbs , ( RListComparator ) bbcmp )"	2321:1:59479:59526	78072	13	True				
ANR	78197	CallExpression	"r_list_sort ( fcn -> bbs , ( RListComparator ) bbcmp )"		78072	0					
ANR	78198	Callee	r_list_sort		78072	0					
ANR	78199	Identifier	r_list_sort		78072	0					
ANR	78200	ArgumentList	fcn -> bbs		78072	1					
ANR	78201	Argument	fcn -> bbs		78072	0					
ANR	78202	PtrMemberAccess	fcn -> bbs		78072	0					
ANR	78203	Identifier	fcn		78072	0					
ANR	78204	Identifier	bbs		78072	1					
ANR	78205	Argument	( RListComparator ) bbcmp		78072	1					
ANR	78206	CastExpression	( RListComparator ) bbcmp		78072	0					
ANR	78207	CastTarget	RListComparator		78072	0					
ANR	78208	Identifier	bbcmp		78072	1					
ANR	78209	IdentifierDeclStatement	RAnalBlock * curbb = NULL ;	2322:1:59529:59553	78072	14	True				
ANR	78210	IdentifierDecl	* curbb = NULL		78072	0					
ANR	78211	IdentifierDeclType	RAnalBlock *		78072	0					
ANR	78212	Identifier	curbb		78072	1					
ANR	78213	AssignmentExpression	* curbb = NULL		78072	2		=			
ANR	78214	Identifier	NULL		78072	0					
ANR	78215	Identifier	NULL		78072	1					
ANR	78216	IfStatement	if ( few )		78072	15					
ANR	78217	Condition	few	2323:5:59560:59562	78072	0	True				
ANR	78218	Identifier	few		78072	0					
ANR	78219	CompoundStatement		22:10:528:528	78072	1					
ANR	78220	Statement	r_list_foreach	2324:2:59569:59582	78072	0	True				
ANR	78221	Statement	(	2324:17:59584:59584	78072	1	True				
ANR	78222	Statement	fcn	2324:18:59585:59587	78072	2	True				
ANR	78223	Statement	->	2324:21:59588:59589	78072	3	True				
ANR	78224	Statement	bbs	2324:23:59590:59592	78072	4	True				
ANR	78225	Statement	","	2324:26:59593:59593	78072	5	True				
ANR	78226	Statement	iter	2324:28:59595:59598	78072	6	True				
ANR	78227	Statement	","	2324:32:59599:59599	78072	7	True				
ANR	78228	Statement	bb	2324:34:59601:59602	78072	8	True				
ANR	78229	Statement	)	2324:36:59603:59603	78072	9	True				
ANR	78230	CompoundStatement		23:38:568:568	78072	10					
ANR	78231	IfStatement	if ( ! curbb )		78072	0					
ANR	78232	Condition	! curbb	2325:7:59614:59619	78072	0	True				
ANR	78233	UnaryOperationExpression	! curbb		78072	0					
ANR	78234	UnaryOperator	!		78072	0					
ANR	78235	Identifier	curbb		78072	1					
ANR	78236	CompoundStatement		24:15:585:585	78072	1					
ANR	78237	ExpressionStatement	curbb = bb	2326:4:59628:59638	78072	0	True				
ANR	78238	AssignmentExpression	curbb = bb		78072	0		=			
ANR	78239	Identifier	curbb		78072	0					
ANR	78240	Identifier	bb		78072	1					
ANR	78241	IfStatement	"if ( r_anal_bb_is_in_offset ( bb , core -> offset ) )"		78072	1					
ANR	78242	Condition	"r_anal_bb_is_in_offset ( bb , core -> offset )"	2328:7:59652:59692	78072	0	True				
ANR	78243	CallExpression	"r_anal_bb_is_in_offset ( bb , core -> offset )"		78072	0					
ANR	78244	Callee	r_anal_bb_is_in_offset		78072	0					
ANR	78245	Identifier	r_anal_bb_is_in_offset		78072	0					
ANR	78246	ArgumentList	bb		78072	1					
ANR	78247	Argument	bb		78072	0					
ANR	78248	Identifier	bb		78072	0					
ANR	78249	Argument	core -> offset		78072	1					
ANR	78250	PtrMemberAccess	core -> offset		78072	0					
ANR	78251	Identifier	core		78072	0					
ANR	78252	Identifier	offset		78072	1					
ANR	78253	CompoundStatement		27:50:658:658	78072	1					
ANR	78254	ExpressionStatement	curbb = bb	2329:4:59701:59711	78072	0	True				
ANR	78255	AssignmentExpression	curbb = bb		78072	0		=			
ANR	78256	Identifier	curbb		78072	0					
ANR	78257	Identifier	bb		78072	1					
ANR	78258	BreakStatement	break ;	2330:4:59717:59722	78072	1	True				
ANR	78259	ExpressionStatement	core -> keep_asmqjmps = false	2335:1:59738:59765	78072	16	True				
ANR	78260	AssignmentExpression	core -> keep_asmqjmps = false		78072	0		=			
ANR	78261	PtrMemberAccess	core -> keep_asmqjmps		78072	0					
ANR	78262	Identifier	core		78072	0					
ANR	78263	Identifier	keep_asmqjmps		78072	1					
ANR	78264	Identifier	false		78072	1					
ANR	78265	Statement	r_list_foreach	2336:1:59768:59781	78072	17	True				
ANR	78266	Statement	(	2336:16:59783:59783	78072	18	True				
ANR	78267	Statement	fcn	2336:17:59784:59786	78072	19	True				
ANR	78268	Statement	->	2336:20:59787:59788	78072	20	True				
ANR	78269	Statement	bbs	2336:22:59789:59791	78072	21	True				
ANR	78270	Statement	","	2336:25:59792:59792	78072	22	True				
ANR	78271	Statement	iter	2336:27:59794:59797	78072	23	True				
ANR	78272	Statement	","	2336:31:59798:59798	78072	24	True				
ANR	78273	Statement	bb	2336:33:59800:59801	78072	25	True				
ANR	78274	Statement	)	2336:35:59802:59802	78072	26	True				
ANR	78275	CompoundStatement		45:2:998:1047	78072	27					
ANR	78276	IfStatement	if ( bb -> addr == UT64_MAX )		78072	0					
ANR	78277	Condition	bb -> addr == UT64_MAX	2337:6:59812:59831	78072	0	True				
ANR	78278	EqualityExpression	bb -> addr == UT64_MAX		78072	0		==			
ANR	78279	PtrMemberAccess	bb -> addr		78072	0					
ANR	78280	Identifier	bb		78072	0					
ANR	78281	Identifier	addr		78072	1					
ANR	78282	Identifier	UT64_MAX		78072	1					
ANR	78283	CompoundStatement		36:28:797:797	78072	1					
ANR	78284	ContinueStatement	continue ;	2338:3:59839:59847	78072	0	True				
ANR	78285	IfStatement	"if ( few && ! isbbfew ( curbb , bb ) )"		78072	1					
ANR	78286	Condition	"few && ! isbbfew ( curbb , bb )"	2340:6:59859:59885	78072	0	True				
ANR	78287	AndExpression	"few && ! isbbfew ( curbb , bb )"		78072	0		&&			
ANR	78288	Identifier	few		78072	0					
ANR	78289	UnaryOperationExpression	"! isbbfew ( curbb , bb )"		78072	1					
ANR	78290	UnaryOperator	!		78072	0					
ANR	78291	CallExpression	"isbbfew ( curbb , bb )"		78072	1					
ANR	78292	Callee	isbbfew		78072	0					
ANR	78293	Identifier	isbbfew		78072	0					
ANR	78294	ArgumentList	curbb		78072	1					
ANR	78295	Argument	curbb		78072	0					
ANR	78296	Identifier	curbb		78072	0					
ANR	78297	Argument	bb		78072	1					
ANR	78298	Identifier	bb		78072	0					
ANR	78299	CompoundStatement		39:35:851:851	78072	1					
ANR	78300	ContinueStatement	continue ;	2341:3:59893:59901	78072	0	True				
ANR	78301	IdentifierDeclStatement	"char * body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena ) ;"	2343:2:59909:59992	78072	2	True				
ANR	78302	IdentifierDecl	"* body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		78072	0					
ANR	78303	IdentifierDeclType	char *		78072	0					
ANR	78304	Identifier	body		78072	1					
ANR	78305	AssignmentExpression	"* body = get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		78072	2		=			
ANR	78306	Identifier	body		78072	0					
ANR	78307	CallExpression	"get_bb_body ( core , bb , mode2opts ( g ) , fcn , emu , saved_gp , saved_arena )"		78072	1					
ANR	78308	Callee	get_bb_body		78072	0					
ANR	78309	Identifier	get_bb_body		78072	0					
ANR	78310	ArgumentList	core		78072	1					
ANR	78311	Argument	core		78072	0					
ANR	78312	Identifier	core		78072	0					
ANR	78313	Argument	bb		78072	1					
ANR	78314	Identifier	bb		78072	0					
ANR	78315	Argument	mode2opts ( g )		78072	2					
ANR	78316	CallExpression	mode2opts ( g )		78072	0					
ANR	78317	Callee	mode2opts		78072	0					
ANR	78318	Identifier	mode2opts		78072	0					
ANR	78319	ArgumentList	g		78072	1					
ANR	78320	Argument	g		78072	0					
ANR	78321	Identifier	g		78072	0					
ANR	78322	Argument	fcn		78072	3					
ANR	78323	Identifier	fcn		78072	0					
ANR	78324	Argument	emu		78072	4					
ANR	78325	Identifier	emu		78072	0					
ANR	78326	Argument	saved_gp		78072	5					
ANR	78327	Identifier	saved_gp		78072	0					
ANR	78328	Argument	saved_arena		78072	6					
ANR	78329	Identifier	saved_arena		78072	0					
ANR	78330	IdentifierDeclStatement	char * title = get_title ( bb -> addr ) ;	2344:2:59996:60030	78072	3	True				
ANR	78331	IdentifierDecl	* title = get_title ( bb -> addr )		78072	0					
ANR	78332	IdentifierDeclType	char *		78072	0					
ANR	78333	Identifier	title		78072	1					
ANR	78334	AssignmentExpression	* title = get_title ( bb -> addr )		78072	2		=			
ANR	78335	Identifier	title		78072	0					
ANR	78336	CallExpression	get_title ( bb -> addr )		78072	1					
ANR	78337	Callee	get_title		78072	0					
ANR	78338	Identifier	get_title		78072	0					
ANR	78339	ArgumentList	bb -> addr		78072	1					
ANR	78340	Argument	bb -> addr		78072	0					
ANR	78341	PtrMemberAccess	bb -> addr		78072	0					
ANR	78342	Identifier	bb		78072	0					
ANR	78343	Identifier	addr		78072	1					
ANR	78344	IdentifierDeclStatement	"RANode * node = r_agraph_add_node ( g , title , body ) ;"	2346:2:60035:60084	78072	4	True				
ANR	78345	IdentifierDecl	"* node = r_agraph_add_node ( g , title , body )"		78072	0					
ANR	78346	IdentifierDeclType	RANode *		78072	0					
ANR	78347	Identifier	node		78072	1					
ANR	78348	AssignmentExpression	"* node = r_agraph_add_node ( g , title , body )"		78072	2		=			
ANR	78349	Identifier	node		78072	0					
ANR	78350	CallExpression	"r_agraph_add_node ( g , title , body )"		78072	1					
ANR	78351	Callee	r_agraph_add_node		78072	0					
ANR	78352	Identifier	r_agraph_add_node		78072	0					
ANR	78353	ArgumentList	g		78072	1					
ANR	78354	Argument	g		78072	0					
ANR	78355	Identifier	g		78072	0					
ANR	78356	Argument	title		78072	1					
ANR	78357	Identifier	title		78072	0					
ANR	78358	Argument	body		78072	2					
ANR	78359	Identifier	body		78072	0					
ANR	78360	ExpressionStatement	"shortcuts = g -> is_interactive ? r_config_get_i ( core -> config , ""graph.nodejmps"" ) : false"	2347:2:60088:60175	78072	5	True				
ANR	78361	AssignmentExpression	"shortcuts = g -> is_interactive ? r_config_get_i ( core -> config , ""graph.nodejmps"" ) : false"		78072	0		=			
ANR	78362	Identifier	shortcuts		78072	0					
ANR	78363	ConditionalExpression	"g -> is_interactive ? r_config_get_i ( core -> config , ""graph.nodejmps"" ) : false"		78072	1					
ANR	78364	Condition	g -> is_interactive		78072	0					
ANR	78365	PtrMemberAccess	g -> is_interactive		78072	0					
ANR	78366	Identifier	g		78072	0					
ANR	78367	Identifier	is_interactive		78072	1					
ANR	78368	CallExpression	"r_config_get_i ( core -> config , ""graph.nodejmps"" )"		78072	1					
ANR	78369	Callee	r_config_get_i		78072	0					
ANR	78370	Identifier	r_config_get_i		78072	0					
ANR	78371	ArgumentList	core -> config		78072	1					
ANR	78372	Argument	core -> config		78072	0					
ANR	78373	PtrMemberAccess	core -> config		78072	0					
ANR	78374	Identifier	core		78072	0					
ANR	78375	Identifier	config		78072	1					
ANR	78376	Argument	"""graph.nodejmps"""		78072	1					
ANR	78377	PrimaryExpression	"""graph.nodejmps"""		78072	0					
ANR	78378	Identifier	false		78072	2					
ANR	78379	IfStatement	if ( shortcuts )		78072	6					
ANR	78380	Condition	shortcuts	2349:6:60184:60192	78072	0	True				
ANR	78381	Identifier	shortcuts		78072	0					
ANR	78382	CompoundStatement		48:17:1158:1158	78072	1					
ANR	78383	ExpressionStatement	"shortcut = r_core_add_asmqjmp ( core , bb -> addr )"	2350:3:60200:60246	78072	0	True				
ANR	78384	AssignmentExpression	"shortcut = r_core_add_asmqjmp ( core , bb -> addr )"		78072	0		=			
ANR	78385	Identifier	shortcut		78072	0					
ANR	78386	CallExpression	"r_core_add_asmqjmp ( core , bb -> addr )"		78072	1					
ANR	78387	Callee	r_core_add_asmqjmp		78072	0					
ANR	78388	Identifier	r_core_add_asmqjmp		78072	0					
ANR	78389	ArgumentList	core		78072	1					
ANR	78390	Argument	core		78072	0					
ANR	78391	Identifier	core		78072	0					
ANR	78392	Argument	bb -> addr		78072	1					
ANR	78393	PtrMemberAccess	bb -> addr		78072	0					
ANR	78394	Identifier	bb		78072	0					
ANR	78395	Identifier	addr		78072	1					
ANR	78396	IfStatement	if ( shortcut )		78072	1					
ANR	78397	Condition	shortcut	2351:7:60255:60262	78072	0	True				
ANR	78398	Identifier	shortcut		78072	0					
ANR	78399	CompoundStatement		50:17:1228:1228	78072	1					
ANR	78400	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title ) , shortcut , 0 )"	2352:4:60271:60344	78072	0	True				
ANR	78401	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title ) , shortcut , 0 )"		78072	0					
ANR	78402	Callee	sdb_set		78072	0					
ANR	78403	Identifier	sdb_set		78072	0					
ANR	78404	ArgumentList	g -> db		78072	1					
ANR	78405	Argument	g -> db		78072	0					
ANR	78406	PtrMemberAccess	g -> db		78072	0					
ANR	78407	Identifier	g		78072	0					
ANR	78408	Identifier	db		78072	1					
ANR	78409	Argument	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title )"		78072	1					
ANR	78410	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.shortcut"" , title )"		78072	0					
ANR	78411	Callee	sdb_fmt		78072	0					
ANR	78412	Identifier	sdb_fmt		78072	0					
ANR	78413	ArgumentList	"""agraph.nodes.%s.shortcut"""		78072	1					
ANR	78414	Argument	"""agraph.nodes.%s.shortcut"""		78072	0					
ANR	78415	PrimaryExpression	"""agraph.nodes.%s.shortcut"""		78072	0					
ANR	78416	Argument	title		78072	1					
ANR	78417	Identifier	title		78072	0					
ANR	78418	Argument	shortcut		78072	2					
ANR	78419	Identifier	shortcut		78072	0					
ANR	78420	Argument	0		78072	3					
ANR	78421	PrimaryExpression	0		78072	0					
ANR	78422	ExpressionStatement	free ( shortcut )	2353:4:60350:60365	78072	1	True				
ANR	78423	CallExpression	free ( shortcut )		78072	0					
ANR	78424	Callee	free		78072	0					
ANR	78425	Identifier	free		78072	0					
ANR	78426	ArgumentList	shortcut		78072	1					
ANR	78427	Argument	shortcut		78072	0					
ANR	78428	Identifier	shortcut		78072	0					
ANR	78429	ExpressionStatement	free ( body )	2356:2:60378:60389	78072	7	True				
ANR	78430	CallExpression	free ( body )		78072	0					
ANR	78431	Callee	free		78072	0					
ANR	78432	Identifier	free		78072	0					
ANR	78433	ArgumentList	body		78072	1					
ANR	78434	Argument	body		78072	0					
ANR	78435	Identifier	body		78072	0					
ANR	78436	ExpressionStatement	free ( title )	2357:2:60393:60405	78072	8	True				
ANR	78437	CallExpression	free ( title )		78072	0					
ANR	78438	Callee	free		78072	0					
ANR	78439	Identifier	free		78072	0					
ANR	78440	ArgumentList	title		78072	1					
ANR	78441	Argument	title		78072	0					
ANR	78442	Identifier	title		78072	0					
ANR	78443	IfStatement	if ( ! node )		78072	9					
ANR	78444	Condition	! node	2358:6:60413:60417	78072	0	True				
ANR	78445	UnaryOperationExpression	! node		78072	0					
ANR	78446	UnaryOperator	!		78072	0					
ANR	78447	Identifier	node		78072	1					
ANR	78448	CompoundStatement		57:13:1383:1383	78072	1					
ANR	78449	GotoStatement	goto cleanup ;	2359:3:60425:60437	78072	0	True				
ANR	78450	Identifier	cleanup		78072	0					
ANR	78451	ExpressionStatement	core -> keep_asmqjmps = true	2361:2:60445:60471	78072	10	True				
ANR	78452	AssignmentExpression	core -> keep_asmqjmps = true		78072	0		=			
ANR	78453	PtrMemberAccess	core -> keep_asmqjmps		78072	0					
ANR	78454	Identifier	core		78072	0					
ANR	78455	Identifier	keep_asmqjmps		78072	1					
ANR	78456	Identifier	true		78072	1					
ANR	78457	Statement	r_list_foreach	2364:1:60478:60491	78072	28	True				
ANR	78458	Statement	(	2364:16:60493:60493	78072	29	True				
ANR	78459	Statement	fcn	2364:17:60494:60496	78072	30	True				
ANR	78460	Statement	->	2364:20:60497:60498	78072	31	True				
ANR	78461	Statement	bbs	2364:22:60499:60501	78072	32	True				
ANR	78462	Statement	","	2364:25:60502:60502	78072	33	True				
ANR	78463	Statement	iter	2364:27:60504:60507	78072	34	True				
ANR	78464	Statement	","	2364:31:60508:60508	78072	35	True				
ANR	78465	Statement	bb	2364:33:60510:60511	78072	36	True				
ANR	78466	Statement	)	2364:35:60512:60512	78072	37	True				
ANR	78467	CompoundStatement		73:2:1665:1674	78072	38					
ANR	78468	IfStatement	if ( bb -> addr == UT64_MAX )		78072	0					
ANR	78469	Condition	bb -> addr == UT64_MAX	2365:6:60522:60541	78072	0	True				
ANR	78470	EqualityExpression	bb -> addr == UT64_MAX		78072	0		==			
ANR	78471	PtrMemberAccess	bb -> addr		78072	0					
ANR	78472	Identifier	bb		78072	0					
ANR	78473	Identifier	addr		78072	1					
ANR	78474	Identifier	UT64_MAX		78072	1					
ANR	78475	CompoundStatement		64:28:1507:1507	78072	1					
ANR	78476	ContinueStatement	continue ;	2366:3:60549:60557	78072	0	True				
ANR	78477	IfStatement	"if ( few && ! isbbfew ( curbb , bb ) )"		78072	1					
ANR	78478	Condition	"few && ! isbbfew ( curbb , bb )"	2368:6:60569:60595	78072	0	True				
ANR	78479	AndExpression	"few && ! isbbfew ( curbb , bb )"		78072	0		&&			
ANR	78480	Identifier	few		78072	0					
ANR	78481	UnaryOperationExpression	"! isbbfew ( curbb , bb )"		78072	1					
ANR	78482	UnaryOperator	!		78072	0					
ANR	78483	CallExpression	"isbbfew ( curbb , bb )"		78072	1					
ANR	78484	Callee	isbbfew		78072	0					
ANR	78485	Identifier	isbbfew		78072	0					
ANR	78486	ArgumentList	curbb		78072	1					
ANR	78487	Argument	curbb		78072	0					
ANR	78488	Identifier	curbb		78072	0					
ANR	78489	Argument	bb		78072	1					
ANR	78490	Identifier	bb		78072	0					
ANR	78491	CompoundStatement		67:35:1561:1561	78072	1					
ANR	78492	ContinueStatement	continue ;	2369:3:60603:60611	78072	0	True				
ANR	78493	IdentifierDeclStatement	char * title = get_title ( bb -> addr ) ;	2372:2:60620:60654	78072	2	True				
ANR	78494	IdentifierDecl	* title = get_title ( bb -> addr )		78072	0					
ANR	78495	IdentifierDeclType	char *		78072	0					
ANR	78496	Identifier	title		78072	1					
ANR	78497	AssignmentExpression	* title = get_title ( bb -> addr )		78072	2		=			
ANR	78498	Identifier	title		78072	0					
ANR	78499	CallExpression	get_title ( bb -> addr )		78072	1					
ANR	78500	Callee	get_title		78072	0					
ANR	78501	Identifier	get_title		78072	0					
ANR	78502	ArgumentList	bb -> addr		78072	1					
ANR	78503	Argument	bb -> addr		78072	0					
ANR	78504	PtrMemberAccess	bb -> addr		78072	0					
ANR	78505	Identifier	bb		78072	0					
ANR	78506	Identifier	addr		78072	1					
ANR	78507	IdentifierDeclStatement	"RANode * u = r_agraph_get_node ( g , title ) ;"	2373:2:60658:60698	78072	3	True				
ANR	78508	IdentifierDecl	"* u = r_agraph_get_node ( g , title )"		78072	0					
ANR	78509	IdentifierDeclType	RANode *		78072	0					
ANR	78510	Identifier	u		78072	1					
ANR	78511	AssignmentExpression	"* u = r_agraph_get_node ( g , title )"		78072	2		=			
ANR	78512	Identifier	u		78072	0					
ANR	78513	CallExpression	"r_agraph_get_node ( g , title )"		78072	1					
ANR	78514	Callee	r_agraph_get_node		78072	0					
ANR	78515	Identifier	r_agraph_get_node		78072	0					
ANR	78516	ArgumentList	g		78072	1					
ANR	78517	Argument	g		78072	0					
ANR	78518	Identifier	g		78072	0					
ANR	78519	Argument	title		78072	1					
ANR	78520	Identifier	title		78072	0					
ANR	78521	IdentifierDeclStatement	RANode * v ;	2374:2:60702:60711	78072	4	True				
ANR	78522	IdentifierDecl	* v		78072	0					
ANR	78523	IdentifierDeclType	RANode *		78072	0					
ANR	78524	Identifier	v		78072	1					
ANR	78525	ExpressionStatement	free ( title )	2375:2:60715:60727	78072	5	True				
ANR	78526	CallExpression	free ( title )		78072	0					
ANR	78527	Callee	free		78072	0					
ANR	78528	Identifier	free		78072	0					
ANR	78529	ArgumentList	title		78072	1					
ANR	78530	Argument	title		78072	0					
ANR	78531	Identifier	title		78072	0					
ANR	78532	IfStatement	if ( bb -> jump != UT64_MAX )		78072	6					
ANR	78533	Condition	bb -> jump != UT64_MAX	2376:6:60735:60754	78072	0	True				
ANR	78534	EqualityExpression	bb -> jump != UT64_MAX		78072	0		!=			
ANR	78535	PtrMemberAccess	bb -> jump		78072	0					
ANR	78536	Identifier	bb		78072	0					
ANR	78537	Identifier	jump		78072	1					
ANR	78538	Identifier	UT64_MAX		78072	1					
ANR	78539	CompoundStatement		75:28:1720:1720	78072	1					
ANR	78540	ExpressionStatement	title = get_title ( bb -> jump )	2377:3:60762:60790	78072	0	True				
ANR	78541	AssignmentExpression	title = get_title ( bb -> jump )		78072	0		=			
ANR	78542	Identifier	title		78072	0					
ANR	78543	CallExpression	get_title ( bb -> jump )		78072	1					
ANR	78544	Callee	get_title		78072	0					
ANR	78545	Identifier	get_title		78072	0					
ANR	78546	ArgumentList	bb -> jump		78072	1					
ANR	78547	Argument	bb -> jump		78072	0					
ANR	78548	PtrMemberAccess	bb -> jump		78072	0					
ANR	78549	Identifier	bb		78072	0					
ANR	78550	Identifier	jump		78072	1					
ANR	78551	ExpressionStatement	"v = r_agraph_get_node ( g , title )"	2378:3:60795:60827	78072	1	True				
ANR	78552	AssignmentExpression	"v = r_agraph_get_node ( g , title )"		78072	0		=			
ANR	78553	Identifier	v		78072	0					
ANR	78554	CallExpression	"r_agraph_get_node ( g , title )"		78072	1					
ANR	78555	Callee	r_agraph_get_node		78072	0					
ANR	78556	Identifier	r_agraph_get_node		78072	0					
ANR	78557	ArgumentList	g		78072	1					
ANR	78558	Argument	g		78072	0					
ANR	78559	Identifier	g		78072	0					
ANR	78560	Argument	title		78072	1					
ANR	78561	Identifier	title		78072	0					
ANR	78562	ExpressionStatement	free ( title )	2379:3:60832:60844	78072	2	True				
ANR	78563	CallExpression	free ( title )		78072	0					
ANR	78564	Callee	free		78072	0					
ANR	78565	Identifier	free		78072	0					
ANR	78566	ArgumentList	title		78072	1					
ANR	78567	Argument	title		78072	0					
ANR	78568	Identifier	title		78072	0					
ANR	78569	ExpressionStatement	"r_agraph_add_edge ( g , u , v )"	2380:3:60849:60876	78072	3	True				
ANR	78570	CallExpression	"r_agraph_add_edge ( g , u , v )"		78072	0					
ANR	78571	Callee	r_agraph_add_edge		78072	0					
ANR	78572	Identifier	r_agraph_add_edge		78072	0					
ANR	78573	ArgumentList	g		78072	1					
ANR	78574	Argument	g		78072	0					
ANR	78575	Identifier	g		78072	0					
ANR	78576	Argument	u		78072	1					
ANR	78577	Identifier	u		78072	0					
ANR	78578	Argument	v		78072	2					
ANR	78579	Identifier	v		78072	0					
ANR	78580	IfStatement	if ( bb -> fail != UT64_MAX )		78072	7					
ANR	78581	Condition	bb -> fail != UT64_MAX	2382:6:60888:60907	78072	0	True				
ANR	78582	EqualityExpression	bb -> fail != UT64_MAX		78072	0		!=			
ANR	78583	PtrMemberAccess	bb -> fail		78072	0					
ANR	78584	Identifier	bb		78072	0					
ANR	78585	Identifier	fail		78072	1					
ANR	78586	Identifier	UT64_MAX		78072	1					
ANR	78587	CompoundStatement		81:28:1873:1873	78072	1					
ANR	78588	ExpressionStatement	title = get_title ( bb -> fail )	2383:3:60915:60943	78072	0	True				
ANR	78589	AssignmentExpression	title = get_title ( bb -> fail )		78072	0		=			
ANR	78590	Identifier	title		78072	0					
ANR	78591	CallExpression	get_title ( bb -> fail )		78072	1					
ANR	78592	Callee	get_title		78072	0					
ANR	78593	Identifier	get_title		78072	0					
ANR	78594	ArgumentList	bb -> fail		78072	1					
ANR	78595	Argument	bb -> fail		78072	0					
ANR	78596	PtrMemberAccess	bb -> fail		78072	0					
ANR	78597	Identifier	bb		78072	0					
ANR	78598	Identifier	fail		78072	1					
ANR	78599	ExpressionStatement	"v = r_agraph_get_node ( g , title )"	2384:3:60948:60980	78072	1	True				
ANR	78600	AssignmentExpression	"v = r_agraph_get_node ( g , title )"		78072	0		=			
ANR	78601	Identifier	v		78072	0					
ANR	78602	CallExpression	"r_agraph_get_node ( g , title )"		78072	1					
ANR	78603	Callee	r_agraph_get_node		78072	0					
ANR	78604	Identifier	r_agraph_get_node		78072	0					
ANR	78605	ArgumentList	g		78072	1					
ANR	78606	Argument	g		78072	0					
ANR	78607	Identifier	g		78072	0					
ANR	78608	Argument	title		78072	1					
ANR	78609	Identifier	title		78072	0					
ANR	78610	ExpressionStatement	free ( title )	2385:3:60985:60997	78072	2	True				
ANR	78611	CallExpression	free ( title )		78072	0					
ANR	78612	Callee	free		78072	0					
ANR	78613	Identifier	free		78072	0					
ANR	78614	ArgumentList	title		78072	1					
ANR	78615	Argument	title		78072	0					
ANR	78616	Identifier	title		78072	0					
ANR	78617	ExpressionStatement	"r_agraph_add_edge ( g , u , v )"	2386:3:61002:61029	78072	3	True				
ANR	78618	CallExpression	"r_agraph_add_edge ( g , u , v )"		78072	0					
ANR	78619	Callee	r_agraph_add_edge		78072	0					
ANR	78620	Identifier	r_agraph_add_edge		78072	0					
ANR	78621	ArgumentList	g		78072	1					
ANR	78622	Argument	g		78072	0					
ANR	78623	Identifier	g		78072	0					
ANR	78624	Argument	u		78072	1					
ANR	78625	Identifier	u		78072	0					
ANR	78626	Argument	v		78072	2					
ANR	78627	Identifier	v		78072	0					
ANR	78628	IfStatement	if ( bb -> switch_op )		78072	8					
ANR	78629	Condition	bb -> switch_op	2388:6:61041:61053	78072	0	True				
ANR	78630	PtrMemberAccess	bb -> switch_op		78072	0					
ANR	78631	Identifier	bb		78072	0					
ANR	78632	Identifier	switch_op		78072	1					
ANR	78633	CompoundStatement		89:3:2042:2058	78072	1					
ANR	78634	IdentifierDeclStatement	RListIter * it ;	2389:3:61061:61074	78072	0	True				
ANR	78635	IdentifierDecl	* it		78072	0					
ANR	78636	IdentifierDeclType	RListIter *		78072	0					
ANR	78637	Identifier	it		78072	1					
ANR	78638	IdentifierDeclStatement	RAnalCaseOp * cop ;	2390:3:61079:61095	78072	1	True				
ANR	78639	IdentifierDecl	* cop		78072	0					
ANR	78640	IdentifierDeclType	RAnalCaseOp *		78072	0					
ANR	78641	Identifier	cop		78072	1					
ANR	78642	Statement	r_list_foreach	2391:3:61100:61113	78072	2	True				
ANR	78643	Statement	(	2391:18:61115:61115	78072	3	True				
ANR	78644	Statement	bb	2391:19:61116:61117	78072	4	True				
ANR	78645	Statement	->	2391:21:61118:61119	78072	5	True				
ANR	78646	Statement	switch_op	2391:23:61120:61128	78072	6	True				
ANR	78647	Statement	->	2391:32:61129:61130	78072	7	True				
ANR	78648	Statement	cases	2391:34:61131:61135	78072	8	True				
ANR	78649	Statement	","	2391:39:61136:61136	78072	9	True				
ANR	78650	Statement	it	2391:41:61138:61139	78072	10	True				
ANR	78651	Statement	","	2391:43:61140:61140	78072	11	True				
ANR	78652	Statement	cop	2391:45:61142:61144	78072	12	True				
ANR	78653	Statement	)	2391:48:61145:61145	78072	13	True				
ANR	78654	CompoundStatement		90:50:2110:2110	78072	14					
ANR	78655	ExpressionStatement	title = get_title ( cop -> addr )	2392:4:61153:61182	78072	0	True				
ANR	78656	AssignmentExpression	title = get_title ( cop -> addr )		78072	0		=			
ANR	78657	Identifier	title		78072	0					
ANR	78658	CallExpression	get_title ( cop -> addr )		78072	1					
ANR	78659	Callee	get_title		78072	0					
ANR	78660	Identifier	get_title		78072	0					
ANR	78661	ArgumentList	cop -> addr		78072	1					
ANR	78662	Argument	cop -> addr		78072	0					
ANR	78663	PtrMemberAccess	cop -> addr		78072	0					
ANR	78664	Identifier	cop		78072	0					
ANR	78665	Identifier	addr		78072	1					
ANR	78666	ExpressionStatement	"v = r_agraph_get_node ( g , title )"	2393:4:61188:61220	78072	1	True				
ANR	78667	AssignmentExpression	"v = r_agraph_get_node ( g , title )"		78072	0		=			
ANR	78668	Identifier	v		78072	0					
ANR	78669	CallExpression	"r_agraph_get_node ( g , title )"		78072	1					
ANR	78670	Callee	r_agraph_get_node		78072	0					
ANR	78671	Identifier	r_agraph_get_node		78072	0					
ANR	78672	ArgumentList	g		78072	1					
ANR	78673	Argument	g		78072	0					
ANR	78674	Identifier	g		78072	0					
ANR	78675	Argument	title		78072	1					
ANR	78676	Identifier	title		78072	0					
ANR	78677	ExpressionStatement	free ( title )	2394:4:61226:61238	78072	2	True				
ANR	78678	CallExpression	free ( title )		78072	0					
ANR	78679	Callee	free		78072	0					
ANR	78680	Identifier	free		78072	0					
ANR	78681	ArgumentList	title		78072	1					
ANR	78682	Argument	title		78072	0					
ANR	78683	Identifier	title		78072	0					
ANR	78684	ExpressionStatement	"r_agraph_add_edge ( g , u , v )"	2395:4:61244:61271	78072	3	True				
ANR	78685	CallExpression	"r_agraph_add_edge ( g , u , v )"		78072	0					
ANR	78686	Callee	r_agraph_add_edge		78072	0					
ANR	78687	Identifier	r_agraph_add_edge		78072	0					
ANR	78688	ArgumentList	g		78072	1					
ANR	78689	Argument	g		78072	0					
ANR	78690	Identifier	g		78072	0					
ANR	78691	Argument	u		78072	1					
ANR	78692	Identifier	u		78072	0					
ANR	78693	Argument	v		78072	2					
ANR	78694	Identifier	v		78072	0					
ANR	78695	ExpressionStatement	delete_dup_edges ( g )	2400:1:61287:61307	78072	39	True				
ANR	78696	CallExpression	delete_dup_edges ( g )		78072	0					
ANR	78697	Callee	delete_dup_edges		78072	0					
ANR	78698	Identifier	delete_dup_edges		78072	0					
ANR	78699	ArgumentList	g		78072	1					
ANR	78700	Argument	g		78072	0					
ANR	78701	Identifier	g		78072	0					
ANR	78702	ExpressionStatement	ret = true	2401:1:61310:61320	78072	40	True				
ANR	78703	AssignmentExpression	ret = true		78072	0		=			
ANR	78704	Identifier	ret		78072	0					
ANR	78705	Identifier	true		78072	1					
ANR	78706	Label	cleanup :	2403:0:61323:61330	78072	41	True				
ANR	78707	Identifier	cleanup		78072	0					
ANR	78708	IfStatement	if ( emu )		78072	42					
ANR	78709	Condition	emu	2404:5:61337:61339	78072	0	True				
ANR	78710	Identifier	emu		78072	0					
ANR	78711	CompoundStatement		103:10:2305:2305	78072	1					
ANR	78712	ExpressionStatement	core -> anal -> gp = saved_gp	2405:2:61346:61371	78072	0	True				
ANR	78713	AssignmentExpression	core -> anal -> gp = saved_gp		78072	0		=			
ANR	78714	PtrMemberAccess	core -> anal -> gp		78072	0					
ANR	78715	PtrMemberAccess	core -> anal		78072	0					
ANR	78716	Identifier	core		78072	0					
ANR	78717	Identifier	anal		78072	1					
ANR	78718	Identifier	gp		78072	1					
ANR	78719	Identifier	saved_gp		78072	1					
ANR	78720	IfStatement	if ( saved_arena )		78072	1					
ANR	78721	Condition	saved_arena	2406:6:61379:61389	78072	0	True				
ANR	78722	Identifier	saved_arena		78072	0					
ANR	78723	CompoundStatement		105:19:2355:2355	78072	1					
ANR	78724	ExpressionStatement	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"	2407:3:61397:61444	78072	0	True				
ANR	78725	CallExpression	"r_reg_arena_poke ( core -> anal -> reg , saved_arena )"		78072	0					
ANR	78726	Callee	r_reg_arena_poke		78072	0					
ANR	78727	Identifier	r_reg_arena_poke		78072	0					
ANR	78728	ArgumentList	core -> anal -> reg		78072	1					
ANR	78729	Argument	core -> anal -> reg		78072	0					
ANR	78730	PtrMemberAccess	core -> anal -> reg		78072	0					
ANR	78731	PtrMemberAccess	core -> anal		78072	0					
ANR	78732	Identifier	core		78072	0					
ANR	78733	Identifier	anal		78072	1					
ANR	78734	Identifier	reg		78072	1					
ANR	78735	Argument	saved_arena		78072	1					
ANR	78736	Identifier	saved_arena		78072	0					
ANR	78737	ExpressionStatement	R_FREE ( saved_arena )	2408:3:61449:61469	78072	1	True				
ANR	78738	CallExpression	R_FREE ( saved_arena )		78072	0					
ANR	78739	Callee	R_FREE		78072	0					
ANR	78740	Identifier	R_FREE		78072	0					
ANR	78741	ArgumentList	saved_arena		78072	1					
ANR	78742	Argument	saved_arena		78072	0					
ANR	78743	Identifier	saved_arena		78072	0					
ANR	78744	ExpressionStatement	core -> anal -> stackptr = saved_stackptr	2411:1:61479:61516	78072	43	True				
ANR	78745	AssignmentExpression	core -> anal -> stackptr = saved_stackptr		78072	0		=			
ANR	78746	PtrMemberAccess	core -> anal -> stackptr		78072	0					
ANR	78747	PtrMemberAccess	core -> anal		78072	0					
ANR	78748	Identifier	core		78072	0					
ANR	78749	Identifier	anal		78072	1					
ANR	78750	Identifier	stackptr		78072	1					
ANR	78751	Identifier	saved_stackptr		78072	1					
ANR	78752	ReturnStatement	return ret ;	2412:1:61519:61529	78072	44	True				
ANR	78753	Identifier	ret		78072	0					
ANR	78754	ReturnType	static int		78072	1					
ANR	78755	Identifier	get_bbnodes		78072	2					
ANR	78756	ParameterList	"RAGraph * g , RCore * core , RAnalFunction * fcn"		78072	3					
ANR	78757	Parameter	RAGraph * g	2302:23:58991:59000	78072	0	True				
ANR	78758	ParameterType	RAGraph *		78072	0					
ANR	78759	Identifier	g		78072	1					
ANR	78760	Parameter	RCore * core	2302:35:59003:59013	78072	1	True				
ANR	78761	ParameterType	RCore *		78072	0					
ANR	78762	Identifier	core		78072	1					
ANR	78763	Parameter	RAnalFunction * fcn	2302:48:59016:59033	78072	2	True				
ANR	78764	ParameterType	RAnalFunction *		78072	0					
ANR	78765	Identifier	fcn		78072	1					
ANR	78766	CFGEntryNode	ENTRY		78072		True				
ANR	78767	CFGExitNode	EXIT		78072		True				
ANR	78768	CFGErrorNode	ERROR		78072		True				
ANR	78769	Symbol	saved_stackptr		78072						
ANR	78770	Symbol	core -> anal -> reg		78072						
ANR	78771	Symbol	* fcn		78072						
ANR	78772	Symbol	cop		78072						
ANR	78773	Symbol	g -> db		78072						
ANR	78774	Symbol	core -> offset		78072						
ANR	78775	Symbol	bb -> addr		78072						
ANR	78776	Symbol	mode2opts		78072						
ANR	78777	Symbol	body		78072						
ANR	78778	Symbol	get_bb_body		78072						
ANR	78779	Symbol	bbcmp		78072						
ANR	78780	Symbol	r_agraph_get_node		78072						
ANR	78781	Symbol	few		78072						
ANR	78782	Symbol	ret		78072						
ANR	78783	Symbol	NULL		78072						
ANR	78784	Symbol	iter		78072						
ANR	78785	Symbol	curbb		78072						
ANR	78786	Symbol	it		78072						
ANR	78787	Symbol	core		78072						
ANR	78788	Symbol	node		78072						
ANR	78789	Symbol	g -> is_interactive		78072						
ANR	78790	Symbol	r_config_get_i		78072						
ANR	78791	Symbol	true		78072						
ANR	78792	Symbol	r_reg_arena_peek		78072						
ANR	78793	Symbol	bb		78072						
ANR	78794	Symbol	saved_arena		78072						
ANR	78795	Symbol	shortcuts		78072						
ANR	78796	Symbol	* core		78072						
ANR	78797	Symbol	core -> keep_asmqjmps		78072						
ANR	78798	Symbol	emu		78072						
ANR	78799	Symbol	title		78072						
ANR	78800	Symbol	core -> anal		78072						
ANR	78801	Symbol	get_title		78072						
ANR	78802	Symbol	fcn		78072						
ANR	78803	Symbol	isbbfew		78072						
ANR	78804	Symbol	* cop		78072						
ANR	78805	Symbol	shortcut		78072						
ANR	78806	Symbol	r_core_add_asmqjmp		78072						
ANR	78807	Symbol	saved_gp		78072						
ANR	78808	Symbol	UT64_MAX		78072						
ANR	78809	Symbol	sdb_fmt		78072						
ANR	78810	Symbol	* * core		78072						
ANR	78811	Symbol	core -> config		78072						
ANR	78812	Symbol	bb -> fail		78072						
ANR	78813	Symbol	* bb		78072						
ANR	78814	Symbol	g		78072						
ANR	78815	Symbol	false		78072						
ANR	78816	Symbol	core -> anal -> gp		78072						
ANR	78817	Symbol	r_agraph_add_node		78072						
ANR	78818	Symbol	cop -> addr		78072						
ANR	78819	Symbol	* g		78072						
ANR	78820	Symbol	bb -> jump		78072						
ANR	78821	Symbol	* core -> anal		78072						
ANR	78822	Symbol	fcn -> bbs		78072						
ANR	78823	Symbol	u		78072						
ANR	78824	Symbol	v		78072						
ANR	78825	Symbol	core -> anal -> stackptr		78072						
ANR	78826	Symbol	bb -> switch_op		78072						
ANR	78827	Symbol	r_anal_bb_is_in_offset		78072						
ANR	78828	Function	get_cgnodes	2417:0:61623:62806							
ANR	78829	FunctionDef	"get_cgnodes (RAGraph * g , RCore * core , RAnalFunction * fcn)"		78828	0					
ANR	78830	CompoundStatement		2417:68:61691:62806	78828	0					
ANR	78831	IdentifierDeclStatement	"RAnalFunction * f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 ) ;"	2419:1:61706:61772	78828	0	True				
ANR	78832	IdentifierDecl	"* f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		78828	0					
ANR	78833	IdentifierDeclType	RAnalFunction *		78828	0					
ANR	78834	Identifier	f		78828	1					
ANR	78835	AssignmentExpression	"* f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		78828	2		=			
ANR	78836	Identifier	f		78828	0					
ANR	78837	CallExpression	"r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		78828	1					
ANR	78838	Callee	r_anal_get_fcn_in		78828	0					
ANR	78839	Identifier	r_anal_get_fcn_in		78828	0					
ANR	78840	ArgumentList	core -> anal		78828	1					
ANR	78841	Argument	core -> anal		78828	0					
ANR	78842	PtrMemberAccess	core -> anal		78828	0					
ANR	78843	Identifier	core		78828	0					
ANR	78844	Identifier	anal		78828	1					
ANR	78845	Argument	core -> offset		78828	1					
ANR	78846	PtrMemberAccess	core -> offset		78828	0					
ANR	78847	Identifier	core		78828	0					
ANR	78848	Identifier	offset		78828	1					
ANR	78849	Argument	0		78828	2					
ANR	78850	PrimaryExpression	0		78828	0					
ANR	78851	IdentifierDeclStatement	"RANode * node , * fcn_anode ;"	2420:1:61775:61799	78828	1	True				
ANR	78852	IdentifierDecl	* node		78828	0					
ANR	78853	IdentifierDeclType	RANode *		78828	0					
ANR	78854	Identifier	node		78828	1					
ANR	78855	IdentifierDecl	* fcn_anode		78828	1					
ANR	78856	IdentifierDeclType	RANode *		78828	0					
ANR	78857	Identifier	fcn_anode		78828	1					
ANR	78858	IdentifierDeclStatement	RListIter * iter ;	2421:1:61802:61817	78828	2	True				
ANR	78859	IdentifierDecl	* iter		78828	0					
ANR	78860	IdentifierDeclType	RListIter *		78828	0					
ANR	78861	Identifier	iter		78828	1					
ANR	78862	IdentifierDeclStatement	RAnalRef * ref ;	2422:1:61820:61833	78828	3	True				
ANR	78863	IdentifierDecl	* ref		78828	0					
ANR	78864	IdentifierDeclType	RAnalRef *		78828	0					
ANR	78865	Identifier	ref		78828	1					
ANR	78866	IdentifierDeclStatement	RList * refs ;	2423:1:61836:61847	78828	4	True				
ANR	78867	IdentifierDecl	* refs		78828	0					
ANR	78868	IdentifierDeclType	RList *		78828	0					
ANR	78869	Identifier	refs		78828	1					
ANR	78870	IfStatement	if ( ! f )		78828	5					
ANR	78871	Condition	! f	2424:5:61854:61855	78828	0	True				
ANR	78872	UnaryOperationExpression	! f		78828	0					
ANR	78873	UnaryOperator	!		78828	0					
ANR	78874	Identifier	f		78828	1					
ANR	78875	CompoundStatement		8:9:166:166	78828	1					
ANR	78876	ReturnStatement	return false ;	2425:2:61862:61874	78828	0	True				
ANR	78877	Identifier	false		78828	0					
ANR	78878	IfStatement	if ( ! fcn )		78828	6					
ANR	78879	Condition	! fcn	2427:5:61884:61887	78828	0	True				
ANR	78880	UnaryOperationExpression	! fcn		78828	0					
ANR	78881	UnaryOperator	!		78828	0					
ANR	78882	Identifier	fcn		78828	1					
ANR	78883	CompoundStatement		11:11:198:198	78828	1					
ANR	78884	ExpressionStatement	fcn = f	2428:2:61894:61901	78828	0	True				
ANR	78885	AssignmentExpression	fcn = f		78828	0		=			
ANR	78886	Identifier	fcn		78828	0					
ANR	78887	Identifier	f		78828	1					
ANR	78888	ExpressionStatement	"r_core_seek ( core , f -> addr , 1 )"	2431:1:61908:61938	78828	7	True				
ANR	78889	CallExpression	"r_core_seek ( core , f -> addr , 1 )"		78828	0					
ANR	78890	Callee	r_core_seek		78828	0					
ANR	78891	Identifier	r_core_seek		78828	0					
ANR	78892	ArgumentList	core		78828	1					
ANR	78893	Argument	core		78828	0					
ANR	78894	Identifier	core		78828	0					
ANR	78895	Argument	f -> addr		78828	1					
ANR	78896	PtrMemberAccess	f -> addr		78828	0					
ANR	78897	Identifier	f		78828	0					
ANR	78898	Identifier	addr		78828	1					
ANR	78899	Argument	1		78828	2					
ANR	78900	PrimaryExpression	1		78828	0					
ANR	78901	IdentifierDeclStatement	char * title = get_title ( fcn -> addr ) ;	2433:1:61942:61977	78828	8	True				
ANR	78902	IdentifierDecl	* title = get_title ( fcn -> addr )		78828	0					
ANR	78903	IdentifierDeclType	char *		78828	0					
ANR	78904	Identifier	title		78828	1					
ANR	78905	AssignmentExpression	* title = get_title ( fcn -> addr )		78828	2		=			
ANR	78906	Identifier	title		78828	0					
ANR	78907	CallExpression	get_title ( fcn -> addr )		78828	1					
ANR	78908	Callee	get_title		78828	0					
ANR	78909	Identifier	get_title		78828	0					
ANR	78910	ArgumentList	fcn -> addr		78828	1					
ANR	78911	Argument	fcn -> addr		78828	0					
ANR	78912	PtrMemberAccess	fcn -> addr		78828	0					
ANR	78913	Identifier	fcn		78828	0					
ANR	78914	Identifier	addr		78828	1					
ANR	78915	ExpressionStatement	"fcn_anode = r_agraph_add_node ( g , title , """" )"	2434:1:61980:62024	78828	9	True				
ANR	78916	AssignmentExpression	"fcn_anode = r_agraph_add_node ( g , title , """" )"		78828	0		=			
ANR	78917	Identifier	fcn_anode		78828	0					
ANR	78918	CallExpression	"r_agraph_add_node ( g , title , """" )"		78828	1					
ANR	78919	Callee	r_agraph_add_node		78828	0					
ANR	78920	Identifier	r_agraph_add_node		78828	0					
ANR	78921	ArgumentList	g		78828	1					
ANR	78922	Argument	g		78828	0					
ANR	78923	Identifier	g		78828	0					
ANR	78924	Argument	title		78828	1					
ANR	78925	Identifier	title		78828	0					
ANR	78926	Argument	""""""		78828	2					
ANR	78927	PrimaryExpression	""""""		78828	0					
ANR	78928	ExpressionStatement	free ( title )	2436:1:62028:62040	78828	10	True				
ANR	78929	CallExpression	free ( title )		78828	0					
ANR	78930	Callee	free		78828	0					
ANR	78931	Identifier	free		78828	0					
ANR	78932	ArgumentList	title		78828	1					
ANR	78933	Argument	title		78828	0					
ANR	78934	Identifier	title		78828	0					
ANR	78935	IfStatement	if ( ! fcn_anode )		78828	11					
ANR	78936	Condition	! fcn_anode	2437:5:62047:62056	78828	0	True				
ANR	78937	UnaryOperationExpression	! fcn_anode		78828	0					
ANR	78938	UnaryOperator	!		78828	0					
ANR	78939	Identifier	fcn_anode		78828	1					
ANR	78940	CompoundStatement		21:17:367:367	78828	1					
ANR	78941	ReturnStatement	return false ;	2438:2:62063:62075	78828	0	True				
ANR	78942	Identifier	false		78828	0					
ANR	78943	ExpressionStatement	fcn_anode -> x = 10	2441:1:62082:62099	78828	12	True				
ANR	78944	AssignmentExpression	fcn_anode -> x = 10		78828	0		=			
ANR	78945	PtrMemberAccess	fcn_anode -> x		78828	0					
ANR	78946	Identifier	fcn_anode		78828	0					
ANR	78947	Identifier	x		78828	1					
ANR	78948	PrimaryExpression	10		78828	1					
ANR	78949	ExpressionStatement	fcn_anode -> y = 3	2442:1:62102:62118	78828	13	True				
ANR	78950	AssignmentExpression	fcn_anode -> y = 3		78828	0		=			
ANR	78951	PtrMemberAccess	fcn_anode -> y		78828	0					
ANR	78952	Identifier	fcn_anode		78828	0					
ANR	78953	Identifier	y		78828	1					
ANR	78954	PrimaryExpression	3		78828	1					
ANR	78955	ExpressionStatement	"refs = r_anal_fcn_get_refs ( core -> anal , fcn )"	2444:1:62122:62166	78828	14	True				
ANR	78956	AssignmentExpression	"refs = r_anal_fcn_get_refs ( core -> anal , fcn )"		78828	0		=			
ANR	78957	Identifier	refs		78828	0					
ANR	78958	CallExpression	"r_anal_fcn_get_refs ( core -> anal , fcn )"		78828	1					
ANR	78959	Callee	r_anal_fcn_get_refs		78828	0					
ANR	78960	Identifier	r_anal_fcn_get_refs		78828	0					
ANR	78961	ArgumentList	core -> anal		78828	1					
ANR	78962	Argument	core -> anal		78828	0					
ANR	78963	PtrMemberAccess	core -> anal		78828	0					
ANR	78964	Identifier	core		78828	0					
ANR	78965	Identifier	anal		78828	1					
ANR	78966	Argument	fcn		78828	1					
ANR	78967	Identifier	fcn		78828	0					
ANR	78968	Statement	r_list_foreach	2445:1:62169:62182	78828	15	True				
ANR	78969	Statement	(	2445:16:62184:62184	78828	16	True				
ANR	78970	Statement	refs	2445:17:62185:62188	78828	17	True				
ANR	78971	Statement	","	2445:21:62189:62189	78828	18	True				
ANR	78972	Statement	iter	2445:23:62191:62194	78828	19	True				
ANR	78973	Statement	","	2445:27:62195:62195	78828	20	True				
ANR	78974	Statement	ref	2445:29:62197:62199	78828	21	True				
ANR	78975	Statement	)	2445:32:62200:62200	78828	22	True				
ANR	78976	CompoundStatement		42:2:746:806	78828	23					
ANR	78977	ExpressionStatement	title = get_title ( ref -> addr )	2446:2:62206:62235	78828	0	True				
ANR	78978	AssignmentExpression	title = get_title ( ref -> addr )		78828	0		=			
ANR	78979	Identifier	title		78828	0					
ANR	78980	CallExpression	get_title ( ref -> addr )		78828	1					
ANR	78981	Callee	get_title		78828	0					
ANR	78982	Identifier	get_title		78828	0					
ANR	78983	ArgumentList	ref -> addr		78828	1					
ANR	78984	Argument	ref -> addr		78828	0					
ANR	78985	PtrMemberAccess	ref -> addr		78828	0					
ANR	78986	Identifier	ref		78828	0					
ANR	78987	Identifier	addr		78828	1					
ANR	78988	IfStatement	"if ( r_agraph_get_node ( g , title ) != NULL )"		78828	1					
ANR	78989	Condition	"r_agraph_get_node ( g , title ) != NULL"	2447:6:62243:62278	78828	0	True				
ANR	78990	EqualityExpression	"r_agraph_get_node ( g , title ) != NULL"		78828	0		!=			
ANR	78991	CallExpression	"r_agraph_get_node ( g , title )"		78828	0					
ANR	78992	Callee	r_agraph_get_node		78828	0					
ANR	78993	Identifier	r_agraph_get_node		78828	0					
ANR	78994	ArgumentList	g		78828	1					
ANR	78995	Argument	g		78828	0					
ANR	78996	Identifier	g		78828	0					
ANR	78997	Argument	title		78828	1					
ANR	78998	Identifier	title		78828	0					
ANR	78999	Identifier	NULL		78828	1					
ANR	79000	CompoundStatement		31:44:589:589	78828	1					
ANR	79001	ContinueStatement	continue ;	2448:3:62286:62294	78828	0	True				
ANR	79002	ExpressionStatement	free ( title )	2450:2:62302:62314	78828	2	True				
ANR	79003	CallExpression	free ( title )		78828	0					
ANR	79004	Callee	free		78828	0					
ANR	79005	Identifier	free		78828	0					
ANR	79006	ArgumentList	title		78828	1					
ANR	79007	Argument	title		78828	0					
ANR	79008	Identifier	title		78828	0					
ANR	79009	IdentifierDeclStatement	int size = 0 ;	2452:2:62319:62331	78828	3	True				
ANR	79010	IdentifierDecl	size = 0		78828	0					
ANR	79011	IdentifierDeclType	int		78828	0					
ANR	79012	Identifier	size		78828	1					
ANR	79013	AssignmentExpression	size = 0		78828	2		=			
ANR	79014	Identifier	size		78828	0					
ANR	79015	PrimaryExpression	0		78828	1					
ANR	79016	IdentifierDeclStatement	"RAnalBlock * bb = r_anal_bb_from_offset ( core -> anal , ref -> addr ) ;"	2453:2:62335:62397	78828	4	True				
ANR	79017	IdentifierDecl	"* bb = r_anal_bb_from_offset ( core -> anal , ref -> addr )"		78828	0					
ANR	79018	IdentifierDeclType	RAnalBlock *		78828	0					
ANR	79019	Identifier	bb		78828	1					
ANR	79020	AssignmentExpression	"* bb = r_anal_bb_from_offset ( core -> anal , ref -> addr )"		78828	2		=			
ANR	79021	Identifier	bb		78828	0					
ANR	79022	CallExpression	"r_anal_bb_from_offset ( core -> anal , ref -> addr )"		78828	1					
ANR	79023	Callee	r_anal_bb_from_offset		78828	0					
ANR	79024	Identifier	r_anal_bb_from_offset		78828	0					
ANR	79025	ArgumentList	core -> anal		78828	1					
ANR	79026	Argument	core -> anal		78828	0					
ANR	79027	PtrMemberAccess	core -> anal		78828	0					
ANR	79028	Identifier	core		78828	0					
ANR	79029	Identifier	anal		78828	1					
ANR	79030	Argument	ref -> addr		78828	1					
ANR	79031	PtrMemberAccess	ref -> addr		78828	0					
ANR	79032	Identifier	ref		78828	0					
ANR	79033	Identifier	addr		78828	1					
ANR	79034	IfStatement	if ( bb )		78828	5					
ANR	79035	Condition	bb	2454:6:62405:62406	78828	0	True				
ANR	79036	Identifier	bb		78828	0					
ANR	79037	CompoundStatement		38:10:717:717	78828	1					
ANR	79038	ExpressionStatement	size = bb -> size	2455:3:62414:62429	78828	0	True				
ANR	79039	AssignmentExpression	size = bb -> size		78828	0		=			
ANR	79040	Identifier	size		78828	0					
ANR	79041	PtrMemberAccess	bb -> size		78828	1					
ANR	79042	Identifier	bb		78828	0					
ANR	79043	Identifier	size		78828	1					
ANR	79044	IdentifierDeclStatement	"char * body = get_body ( core , ref -> addr , size , mode2opts ( g ) ) ;"	2458:2:62438:62498	78828	6	True				
ANR	79045	IdentifierDecl	"* body = get_body ( core , ref -> addr , size , mode2opts ( g ) )"		78828	0					
ANR	79046	IdentifierDeclType	char *		78828	0					
ANR	79047	Identifier	body		78828	1					
ANR	79048	AssignmentExpression	"* body = get_body ( core , ref -> addr , size , mode2opts ( g ) )"		78828	2		=			
ANR	79049	Identifier	body		78828	0					
ANR	79050	CallExpression	"get_body ( core , ref -> addr , size , mode2opts ( g ) )"		78828	1					
ANR	79051	Callee	get_body		78828	0					
ANR	79052	Identifier	get_body		78828	0					
ANR	79053	ArgumentList	core		78828	1					
ANR	79054	Argument	core		78828	0					
ANR	79055	Identifier	core		78828	0					
ANR	79056	Argument	ref -> addr		78828	1					
ANR	79057	PtrMemberAccess	ref -> addr		78828	0					
ANR	79058	Identifier	ref		78828	0					
ANR	79059	Identifier	addr		78828	1					
ANR	79060	Argument	size		78828	2					
ANR	79061	Identifier	size		78828	0					
ANR	79062	Argument	mode2opts ( g )		78828	3					
ANR	79063	CallExpression	mode2opts ( g )		78828	0					
ANR	79064	Callee	mode2opts		78828	0					
ANR	79065	Identifier	mode2opts		78828	0					
ANR	79066	ArgumentList	g		78828	1					
ANR	79067	Argument	g		78828	0					
ANR	79068	Identifier	g		78828	0					
ANR	79069	ExpressionStatement	title = get_title ( ref -> addr )	2459:2:62502:62531	78828	7	True				
ANR	79070	AssignmentExpression	title = get_title ( ref -> addr )		78828	0		=			
ANR	79071	Identifier	title		78828	0					
ANR	79072	CallExpression	get_title ( ref -> addr )		78828	1					
ANR	79073	Callee	get_title		78828	0					
ANR	79074	Identifier	get_title		78828	0					
ANR	79075	ArgumentList	ref -> addr		78828	1					
ANR	79076	Argument	ref -> addr		78828	0					
ANR	79077	PtrMemberAccess	ref -> addr		78828	0					
ANR	79078	Identifier	ref		78828	0					
ANR	79079	Identifier	addr		78828	1					
ANR	79080	ExpressionStatement	"node = r_agraph_add_node ( g , title , body )"	2461:2:62536:62577	78828	8	True				
ANR	79081	AssignmentExpression	"node = r_agraph_add_node ( g , title , body )"		78828	0		=			
ANR	79082	Identifier	node		78828	0					
ANR	79083	CallExpression	"r_agraph_add_node ( g , title , body )"		78828	1					
ANR	79084	Callee	r_agraph_add_node		78828	0					
ANR	79085	Identifier	r_agraph_add_node		78828	0					
ANR	79086	ArgumentList	g		78828	1					
ANR	79087	Argument	g		78828	0					
ANR	79088	Identifier	g		78828	0					
ANR	79089	Argument	title		78828	1					
ANR	79090	Identifier	title		78828	0					
ANR	79091	Argument	body		78828	2					
ANR	79092	Identifier	body		78828	0					
ANR	79093	IfStatement	if ( ! node )		78828	9					
ANR	79094	Condition	! node	2462:6:62585:62589	78828	0	True				
ANR	79095	UnaryOperationExpression	! node		78828	0					
ANR	79096	UnaryOperator	!		78828	0					
ANR	79097	Identifier	node		78828	1					
ANR	79098	CompoundStatement		46:13:900:900	78828	1					
ANR	79099	ReturnStatement	return false ;	2463:3:62597:62609	78828	0	True				
ANR	79100	Identifier	false		78828	0					
ANR	79101	ExpressionStatement	free ( title )	2466:2:62618:62630	78828	10	True				
ANR	79102	CallExpression	free ( title )		78828	0					
ANR	79103	Callee	free		78828	0					
ANR	79104	Identifier	free		78828	0					
ANR	79105	ArgumentList	title		78828	1					
ANR	79106	Argument	title		78828	0					
ANR	79107	Identifier	title		78828	0					
ANR	79108	ExpressionStatement	free ( body )	2467:2:62634:62645	78828	11	True				
ANR	79109	CallExpression	free ( body )		78828	0					
ANR	79110	Callee	free		78828	0					
ANR	79111	Identifier	free		78828	0					
ANR	79112	ArgumentList	body		78828	1					
ANR	79113	Argument	body		78828	0					
ANR	79114	Identifier	body		78828	0					
ANR	79115	ExpressionStatement	node -> x = 10	2469:2:62650:62662	78828	12	True				
ANR	79116	AssignmentExpression	node -> x = 10		78828	0		=			
ANR	79117	PtrMemberAccess	node -> x		78828	0					
ANR	79118	Identifier	node		78828	0					
ANR	79119	Identifier	x		78828	1					
ANR	79120	PrimaryExpression	10		78828	1					
ANR	79121	ExpressionStatement	node -> y = 10	2470:2:62666:62678	78828	13	True				
ANR	79122	AssignmentExpression	node -> y = 10		78828	0		=			
ANR	79123	PtrMemberAccess	node -> y		78828	0					
ANR	79124	Identifier	node		78828	0					
ANR	79125	Identifier	y		78828	1					
ANR	79126	PrimaryExpression	10		78828	1					
ANR	79127	ExpressionStatement	"r_agraph_add_edge ( g , fcn_anode , node )"	2472:2:62683:62721	78828	14	True				
ANR	79128	CallExpression	"r_agraph_add_edge ( g , fcn_anode , node )"		78828	0					
ANR	79129	Callee	r_agraph_add_edge		78828	0					
ANR	79130	Identifier	r_agraph_add_edge		78828	0					
ANR	79131	ArgumentList	g		78828	1					
ANR	79132	Argument	g		78828	0					
ANR	79133	Identifier	g		78828	0					
ANR	79134	Argument	fcn_anode		78828	1					
ANR	79135	Identifier	fcn_anode		78828	0					
ANR	79136	Argument	node		78828	2					
ANR	79137	Identifier	node		78828	0					
ANR	79138	ExpressionStatement	r_list_free ( refs )	2474:1:62727:62745	78828	24	True				
ANR	79139	CallExpression	r_list_free ( refs )		78828	0					
ANR	79140	Callee	r_list_free		78828	0					
ANR	79141	Identifier	r_list_free		78828	0					
ANR	79142	ArgumentList	refs		78828	1					
ANR	79143	Argument	refs		78828	0					
ANR	79144	Identifier	refs		78828	0					
ANR	79145	ReturnStatement	return true ;	2478:1:62793:62804	78828	25	True				
ANR	79146	Identifier	true		78828	0					
ANR	79147	ReturnType	static int		78828	1					
ANR	79148	Identifier	get_cgnodes		78828	2					
ANR	79149	ParameterList	"RAGraph * g , RCore * core , RAnalFunction * fcn"		78828	3					
ANR	79150	Parameter	RAGraph * g	2417:23:61646:61655	78828	0	True				
ANR	79151	ParameterType	RAGraph *		78828	0					
ANR	79152	Identifier	g		78828	1					
ANR	79153	Parameter	RCore * core	2417:35:61658:61668	78828	1	True				
ANR	79154	ParameterType	RCore *		78828	0					
ANR	79155	Identifier	core		78828	1					
ANR	79156	Parameter	RAnalFunction * fcn	2417:48:61671:61688	78828	2	True				
ANR	79157	ParameterType	RAnalFunction *		78828	0					
ANR	79158	Identifier	fcn		78828	1					
ANR	79159	CFGEntryNode	ENTRY		78828		True				
ANR	79160	CFGExitNode	EXIT		78828		True				
ANR	79161	CFGErrorNode	ERROR		78828		True				
ANR	79162	Symbol	bb		78828						
ANR	79163	Symbol	ref -> addr		78828						
ANR	79164	Symbol	r_anal_bb_from_offset		78828						
ANR	79165	Symbol	bb -> size		78828						
ANR	79166	Symbol	node -> y		78828						
ANR	79167	Symbol	* fcn		78828						
ANR	79168	Symbol	* core		78828						
ANR	79169	Symbol	core -> offset		78828						
ANR	79170	Symbol	title		78828						
ANR	79171	Symbol	mode2opts		78828						
ANR	79172	Symbol	body		78828						
ANR	79173	Symbol	node -> x		78828						
ANR	79174	Symbol	core -> anal		78828						
ANR	79175	Symbol	get_title		78828						
ANR	79176	Symbol	fcn		78828						
ANR	79177	Symbol	ref		78828						
ANR	79178	Symbol	r_agraph_get_node		78828						
ANR	79179	Symbol	fcn_anode		78828						
ANR	79180	Symbol	f -> addr		78828						
ANR	79181	Symbol	* node		78828						
ANR	79182	Symbol	* fcn_anode		78828						
ANR	79183	Symbol	get_body		78828						
ANR	79184	Symbol	NULL		78828						
ANR	79185	Symbol	* bb		78828						
ANR	79186	Symbol	f		78828						
ANR	79187	Symbol	g		78828						
ANR	79188	Symbol	false		78828						
ANR	79189	Symbol	fcn_anode -> x		78828						
ANR	79190	Symbol	iter		78828						
ANR	79191	Symbol	fcn_anode -> y		78828						
ANR	79192	Symbol	r_agraph_add_node		78828						
ANR	79193	Symbol	r_anal_fcn_get_refs		78828						
ANR	79194	Symbol	* f		78828						
ANR	79195	Symbol	core		78828						
ANR	79196	Symbol	node		78828						
ANR	79197	Symbol	r_anal_get_fcn_in		78828						
ANR	79198	Symbol	size		78828						
ANR	79199	Symbol	refs		78828						
ANR	79200	Symbol	true		78828						
ANR	79201	Symbol	fcn -> addr		78828						
ANR	79202	Symbol	* ref		78828						
ANR	79203	Function	reload_nodes	2481:0:62809:62979							
ANR	79204	FunctionDef	"reload_nodes (RAGraph * g , RCore * core , RAnalFunction * fcn)"		79203	0					
ANR	79205	CompoundStatement		2481:69:62878:62979	79203	0					
ANR	79206	IdentifierDeclStatement	int is_c = g -> is_callgraph ;	2482:1:62881:62907	79203	0	True				
ANR	79207	IdentifierDecl	is_c = g -> is_callgraph		79203	0					
ANR	79208	IdentifierDeclType	int		79203	0					
ANR	79209	Identifier	is_c		79203	1					
ANR	79210	AssignmentExpression	is_c = g -> is_callgraph		79203	2		=			
ANR	79211	Identifier	is_c		79203	0					
ANR	79212	PtrMemberAccess	g -> is_callgraph		79203	1					
ANR	79213	Identifier	g		79203	0					
ANR	79214	Identifier	is_callgraph		79203	1					
ANR	79215	ReturnStatement	"return is_c ? get_cgnodes ( g , core , fcn ) : get_bbnodes ( g , core , fcn ) ;"	2483:1:62910:62977	79203	1	True				
ANR	79216	ConditionalExpression	"is_c ? get_cgnodes ( g , core , fcn ) : get_bbnodes ( g , core , fcn )"		79203	0					
ANR	79217	Condition	is_c		79203	0					
ANR	79218	Identifier	is_c		79203	0					
ANR	79219	CallExpression	"get_cgnodes ( g , core , fcn )"		79203	1					
ANR	79220	Callee	get_cgnodes		79203	0					
ANR	79221	Identifier	get_cgnodes		79203	0					
ANR	79222	ArgumentList	g		79203	1					
ANR	79223	Argument	g		79203	0					
ANR	79224	Identifier	g		79203	0					
ANR	79225	Argument	core		79203	1					
ANR	79226	Identifier	core		79203	0					
ANR	79227	Argument	fcn		79203	2					
ANR	79228	Identifier	fcn		79203	0					
ANR	79229	CallExpression	"get_bbnodes ( g , core , fcn )"		79203	2					
ANR	79230	Callee	get_bbnodes		79203	0					
ANR	79231	Identifier	get_bbnodes		79203	0					
ANR	79232	ArgumentList	g		79203	1					
ANR	79233	Argument	g		79203	0					
ANR	79234	Identifier	g		79203	0					
ANR	79235	Argument	core		79203	1					
ANR	79236	Identifier	core		79203	0					
ANR	79237	Argument	fcn		79203	2					
ANR	79238	Identifier	fcn		79203	0					
ANR	79239	ReturnType	static int		79203	1					
ANR	79240	Identifier	reload_nodes		79203	2					
ANR	79241	ParameterList	"RAGraph * g , RCore * core , RAnalFunction * fcn"		79203	3					
ANR	79242	Parameter	RAGraph * g	2481:24:62833:62842	79203	0	True				
ANR	79243	ParameterType	RAGraph *		79203	0					
ANR	79244	Identifier	g		79203	1					
ANR	79245	Parameter	RCore * core	2481:36:62845:62855	79203	1	True				
ANR	79246	ParameterType	RCore *		79203	0					
ANR	79247	Identifier	core		79203	1					
ANR	79248	Parameter	RAnalFunction * fcn	2481:49:62858:62875	79203	2	True				
ANR	79249	ParameterType	RAnalFunction *		79203	0					
ANR	79250	Identifier	fcn		79203	1					
ANR	79251	CFGEntryNode	ENTRY		79203		True				
ANR	79252	CFGExitNode	EXIT		79203		True				
ANR	79253	Symbol	fcn		79203						
ANR	79254	Symbol	core		79203						
ANR	79255	Symbol	* g		79203						
ANR	79256	Symbol	g		79203						
ANR	79257	Symbol	get_bbnodes		79203						
ANR	79258	Symbol	get_cgnodes		79203						
ANR	79259	Symbol	g -> is_callgraph		79203						
ANR	79260	Symbol	is_c		79203						
ANR	79261	Function	update_seek	2486:0:62982:63509							
ANR	79262	FunctionDef	"update_seek (RConsCanvas * can , RANode * n , int force)"		79261	0					
ANR	79263	CompoundStatement		2486:64:63046:63509	79261	0					
ANR	79264	IdentifierDeclStatement	"int x , y , w , h ;"	2487:1:63049:63063	79261	0	True				
ANR	79265	IdentifierDecl	x		79261	0					
ANR	79266	IdentifierDeclType	int		79261	0					
ANR	79267	Identifier	x		79261	1					
ANR	79268	IdentifierDecl	y		79261	1					
ANR	79269	IdentifierDeclType	int		79261	0					
ANR	79270	Identifier	y		79261	1					
ANR	79271	IdentifierDecl	w		79261	2					
ANR	79272	IdentifierDeclType	int		79261	0					
ANR	79273	Identifier	w		79261	1					
ANR	79274	IdentifierDecl	h		79261	3					
ANR	79275	IdentifierDeclType	int		79261	0					
ANR	79276	Identifier	h		79261	1					
ANR	79277	IdentifierDeclStatement	int doscroll = false ;	2488:1:63066:63086	79261	1	True				
ANR	79278	IdentifierDecl	doscroll = false		79261	0					
ANR	79279	IdentifierDeclType	int		79261	0					
ANR	79280	Identifier	doscroll		79261	1					
ANR	79281	AssignmentExpression	doscroll = false		79261	2		=			
ANR	79282	Identifier	false		79261	0					
ANR	79283	Identifier	false		79261	1					
ANR	79284	IfStatement	if ( ! n )		79261	2					
ANR	79285	Condition	! n	2490:5:63094:63095	79261	0	True				
ANR	79286	UnaryOperationExpression	! n		79261	0					
ANR	79287	UnaryOperator	!		79261	0					
ANR	79288	Identifier	n		79261	1					
ANR	79289	CompoundStatement		5:9:51:51	79261	1					
ANR	79290	ReturnStatement	return ;	2491:2:63102:63108	79261	0	True				
ANR	79291	ExpressionStatement	x = n -> x + can -> sx	2493:1:63114:63132	79261	3	True				
ANR	79292	AssignmentExpression	x = n -> x + can -> sx		79261	0		=			
ANR	79293	Identifier	x		79261	0					
ANR	79294	AdditiveExpression	n -> x + can -> sx		79261	1		+			
ANR	79295	PtrMemberAccess	n -> x		79261	0					
ANR	79296	Identifier	n		79261	0					
ANR	79297	Identifier	x		79261	1					
ANR	79298	PtrMemberAccess	can -> sx		79261	1					
ANR	79299	Identifier	can		79261	0					
ANR	79300	Identifier	sx		79261	1					
ANR	79301	ExpressionStatement	y = n -> y + can -> sy	2494:1:63135:63153	79261	4	True				
ANR	79302	AssignmentExpression	y = n -> y + can -> sy		79261	0		=			
ANR	79303	Identifier	y		79261	0					
ANR	79304	AdditiveExpression	n -> y + can -> sy		79261	1		+			
ANR	79305	PtrMemberAccess	n -> y		79261	0					
ANR	79306	Identifier	n		79261	0					
ANR	79307	Identifier	y		79261	1					
ANR	79308	PtrMemberAccess	can -> sy		79261	1					
ANR	79309	Identifier	can		79261	0					
ANR	79310	Identifier	sy		79261	1					
ANR	79311	ExpressionStatement	w = can -> w	2495:1:63156:63166	79261	5	True				
ANR	79312	AssignmentExpression	w = can -> w		79261	0		=			
ANR	79313	Identifier	w		79261	0					
ANR	79314	PtrMemberAccess	can -> w		79261	1					
ANR	79315	Identifier	can		79261	0					
ANR	79316	Identifier	w		79261	1					
ANR	79317	ExpressionStatement	h = can -> h	2496:1:63169:63179	79261	6	True				
ANR	79318	AssignmentExpression	h = can -> h		79261	0		=			
ANR	79319	Identifier	h		79261	0					
ANR	79320	PtrMemberAccess	can -> h		79261	1					
ANR	79321	Identifier	can		79261	0					
ANR	79322	Identifier	h		79261	1					
ANR	79323	ExpressionStatement	doscroll = force || y < 0 || y + 5 > h || x + 5 > w || x + n -> w + 5 < 0	2498:1:63183:63254	79261	7	True				
ANR	79324	AssignmentExpression	doscroll = force || y < 0 || y + 5 > h || x + 5 > w || x + n -> w + 5 < 0		79261	0		=			
ANR	79325	Identifier	doscroll		79261	0					
ANR	79326	OrExpression	force || y < 0 || y + 5 > h || x + 5 > w || x + n -> w + 5 < 0		79261	1		||			
ANR	79327	Identifier	force		79261	0					
ANR	79328	OrExpression	y < 0 || y + 5 > h || x + 5 > w || x + n -> w + 5 < 0		79261	1		||			
ANR	79329	RelationalExpression	y < 0		79261	0		<			
ANR	79330	Identifier	y		79261	0					
ANR	79331	PrimaryExpression	0		79261	1					
ANR	79332	OrExpression	y + 5 > h || x + 5 > w || x + n -> w + 5 < 0		79261	1		||			
ANR	79333	RelationalExpression	y + 5 > h		79261	0		>			
ANR	79334	AdditiveExpression	y + 5		79261	0		+			
ANR	79335	Identifier	y		79261	0					
ANR	79336	PrimaryExpression	5		79261	1					
ANR	79337	Identifier	h		79261	1					
ANR	79338	OrExpression	x + 5 > w || x + n -> w + 5 < 0		79261	1		||			
ANR	79339	RelationalExpression	x + 5 > w		79261	0		>			
ANR	79340	AdditiveExpression	x + 5		79261	0		+			
ANR	79341	Identifier	x		79261	0					
ANR	79342	PrimaryExpression	5		79261	1					
ANR	79343	Identifier	w		79261	1					
ANR	79344	RelationalExpression	x + n -> w + 5 < 0		79261	1		<			
ANR	79345	AdditiveExpression	x + n -> w + 5		79261	0		+			
ANR	79346	Identifier	x		79261	0					
ANR	79347	AdditiveExpression	n -> w + 5		79261	1		+			
ANR	79348	PtrMemberAccess	n -> w		79261	0					
ANR	79349	Identifier	n		79261	0					
ANR	79350	Identifier	w		79261	1					
ANR	79351	PrimaryExpression	5		79261	1					
ANR	79352	PrimaryExpression	0		79261	1					
ANR	79353	IfStatement	if ( doscroll )		79261	8					
ANR	79354	Condition	doscroll	2500:5:63262:63269	79261	0	True				
ANR	79355	Identifier	doscroll		79261	0					
ANR	79356	CompoundStatement		15:15:225:225	79261	1					
ANR	79357	IfStatement	if ( n -> w > w )		79261	0					
ANR	79358	Condition	n -> w > w	2501:6:63280:63287	79261	0	True				
ANR	79359	RelationalExpression	n -> w > w		79261	0		>			
ANR	79360	PtrMemberAccess	n -> w		79261	0					
ANR	79361	Identifier	n		79261	0					
ANR	79362	Identifier	w		79261	1					
ANR	79363	Identifier	w		79261	1					
ANR	79364	CompoundStatement		16:16:243:243	79261	1					
ANR	79365	ExpressionStatement	can -> sx = - n -> x	2502:3:63319:63334	79261	0	True				
ANR	79366	AssignmentExpression	can -> sx = - n -> x		79261	0		=			
ANR	79367	PtrMemberAccess	can -> sx		79261	0					
ANR	79368	Identifier	can		79261	0					
ANR	79369	Identifier	sx		79261	1					
ANR	79370	UnaryOperationExpression	- n -> x		79261	1					
ANR	79371	UnaryOperator	-		79261	0					
ANR	79372	PtrMemberAccess	n -> x		79261	1					
ANR	79373	Identifier	n		79261	0					
ANR	79374	Identifier	x		79261	1					
ANR	79375	ElseStatement	else		79261	0					
ANR	79376	CompoundStatement		18:9:298:298	79261	0					
ANR	79377	ExpressionStatement	can -> sx = - n -> x - n -> w / 2 + w / 2	2504:3:63350:63384	79261	0	True				
ANR	79378	AssignmentExpression	can -> sx = - n -> x - n -> w / 2 + w / 2		79261	0		=			
ANR	79379	PtrMemberAccess	can -> sx		79261	0					
ANR	79380	Identifier	can		79261	0					
ANR	79381	Identifier	sx		79261	1					
ANR	79382	AdditiveExpression	- n -> x - n -> w / 2 + w / 2		79261	1		-			
ANR	79383	UnaryOperationExpression	- n -> x		79261	0					
ANR	79384	UnaryOperator	-		79261	0					
ANR	79385	PtrMemberAccess	n -> x		79261	1					
ANR	79386	Identifier	n		79261	0					
ANR	79387	Identifier	x		79261	1					
ANR	79388	AdditiveExpression	n -> w / 2 + w / 2		79261	1		+			
ANR	79389	MultiplicativeExpression	n -> w / 2		79261	0		/			
ANR	79390	PtrMemberAccess	n -> w		79261	0					
ANR	79391	Identifier	n		79261	0					
ANR	79392	Identifier	w		79261	1					
ANR	79393	PrimaryExpression	2		79261	1					
ANR	79394	MultiplicativeExpression	w / 2		79261	1		/			
ANR	79395	Identifier	w		79261	0					
ANR	79396	PrimaryExpression	2		79261	1					
ANR	79397	IfStatement	if ( n -> h > h )		79261	1					
ANR	79398	Condition	n -> h > h	2506:6:63396:63403	79261	0	True				
ANR	79399	RelationalExpression	n -> h > h		79261	0		>			
ANR	79400	PtrMemberAccess	n -> h		79261	0					
ANR	79401	Identifier	n		79261	0					
ANR	79402	Identifier	h		79261	1					
ANR	79403	Identifier	h		79261	1					
ANR	79404	CompoundStatement		21:16:359:359	79261	1					
ANR	79405	ExpressionStatement	can -> sy = - n -> y	2507:3:63435:63450	79261	0	True				
ANR	79406	AssignmentExpression	can -> sy = - n -> y		79261	0		=			
ANR	79407	PtrMemberAccess	can -> sy		79261	0					
ANR	79408	Identifier	can		79261	0					
ANR	79409	Identifier	sy		79261	1					
ANR	79410	UnaryOperationExpression	- n -> y		79261	1					
ANR	79411	UnaryOperator	-		79261	0					
ANR	79412	PtrMemberAccess	n -> y		79261	1					
ANR	79413	Identifier	n		79261	0					
ANR	79414	Identifier	y		79261	1					
ANR	79415	ElseStatement	else		79261	0					
ANR	79416	CompoundStatement		23:9:414:414	79261	0					
ANR	79417	ExpressionStatement	can -> sy = - n -> y - n -> h / 8 + h / 4	2509:3:63466:63500	79261	0	True				
ANR	79418	AssignmentExpression	can -> sy = - n -> y - n -> h / 8 + h / 4		79261	0		=			
ANR	79419	PtrMemberAccess	can -> sy		79261	0					
ANR	79420	Identifier	can		79261	0					
ANR	79421	Identifier	sy		79261	1					
ANR	79422	AdditiveExpression	- n -> y - n -> h / 8 + h / 4		79261	1		-			
ANR	79423	UnaryOperationExpression	- n -> y		79261	0					
ANR	79424	UnaryOperator	-		79261	0					
ANR	79425	PtrMemberAccess	n -> y		79261	1					
ANR	79426	Identifier	n		79261	0					
ANR	79427	Identifier	y		79261	1					
ANR	79428	AdditiveExpression	n -> h / 8 + h / 4		79261	1		+			
ANR	79429	MultiplicativeExpression	n -> h / 8		79261	0		/			
ANR	79430	PtrMemberAccess	n -> h		79261	0					
ANR	79431	Identifier	n		79261	0					
ANR	79432	Identifier	h		79261	1					
ANR	79433	PrimaryExpression	8		79261	1					
ANR	79434	MultiplicativeExpression	h / 4		79261	1		/			
ANR	79435	Identifier	h		79261	0					
ANR	79436	PrimaryExpression	4		79261	1					
ANR	79437	ReturnType	static void		79261	1					
ANR	79438	Identifier	update_seek		79261	2					
ANR	79439	ParameterList	"RConsCanvas * can , RANode * n , int force"		79261	3					
ANR	79440	Parameter	RConsCanvas * can	2486:24:63006:63021	79261	0	True				
ANR	79441	ParameterType	RConsCanvas *		79261	0					
ANR	79442	Identifier	can		79261	1					
ANR	79443	Parameter	RANode * n	2486:42:63024:63032	79261	1	True				
ANR	79444	ParameterType	RANode *		79261	0					
ANR	79445	Identifier	n		79261	1					
ANR	79446	Parameter	int force	2486:53:63035:63043	79261	2	True				
ANR	79447	ParameterType	int		79261	0					
ANR	79448	Identifier	force		79261	1					
ANR	79449	CFGEntryNode	ENTRY		79261		True				
ANR	79450	CFGExitNode	EXIT		79261		True				
ANR	79451	Symbol	* can		79261						
ANR	79452	Symbol	can -> w		79261						
ANR	79453	Symbol	n -> h		79261						
ANR	79454	Symbol	h		79261						
ANR	79455	Symbol	false		79261						
ANR	79456	Symbol	can -> sx		79261						
ANR	79457	Symbol	can -> sy		79261						
ANR	79458	Symbol	n		79261						
ANR	79459	Symbol	can		79261						
ANR	79460	Symbol	n -> y		79261						
ANR	79461	Symbol	n -> x		79261						
ANR	79462	Symbol	w		79261						
ANR	79463	Symbol	doscroll		79261						
ANR	79464	Symbol	can -> h		79261						
ANR	79465	Symbol	n -> w		79261						
ANR	79466	Symbol	x		79261						
ANR	79467	Symbol	* n		79261						
ANR	79468	Symbol	y		79261						
ANR	79469	Symbol	force		79261						
ANR	79470	Function	is_near	2514:0:63512:63687							
ANR	79471	FunctionDef	"is_near (const RANode * n , int x , int y , int is_next)"		79470	0					
ANR	79472	CompoundStatement		2514:63:63575:63687	79470	0					
ANR	79473	IfStatement	if ( is_next )		79470	0					
ANR	79474	Condition	is_next	2515:5:63582:63588	79470	0	True				
ANR	79475	Identifier	is_next		79470	0					
ANR	79476	CompoundStatement		2:14:15:15	79470	1					
ANR	79477	ReturnStatement	return ( n -> y == y && n -> x > x ) || n -> y > y ;	2516:2:63595:63637	79470	0	True				
ANR	79478	OrExpression	( n -> y == y && n -> x > x ) || n -> y > y		79470	0		||			
ANR	79479	AndExpression	n -> y == y && n -> x > x		79470	0		&&			
ANR	79480	EqualityExpression	n -> y == y		79470	0		==			
ANR	79481	PtrMemberAccess	n -> y		79470	0					
ANR	79482	Identifier	n		79470	0					
ANR	79483	Identifier	y		79470	1					
ANR	79484	Identifier	y		79470	1					
ANR	79485	RelationalExpression	n -> x > x		79470	1		>			
ANR	79486	PtrMemberAccess	n -> x		79470	0					
ANR	79487	Identifier	n		79470	0					
ANR	79488	Identifier	x		79470	1					
ANR	79489	Identifier	x		79470	1					
ANR	79490	RelationalExpression	n -> y > y		79470	1		>			
ANR	79491	PtrMemberAccess	n -> y		79470	0					
ANR	79492	Identifier	n		79470	0					
ANR	79493	Identifier	y		79470	1					
ANR	79494	Identifier	y		79470	1					
ANR	79495	ReturnStatement	return ( n -> y == y && n -> x < x ) || n -> y < y ;	2518:1:63643:63685	79470	1	True				
ANR	79496	OrExpression	( n -> y == y && n -> x < x ) || n -> y < y		79470	0		||			
ANR	79497	AndExpression	n -> y == y && n -> x < x		79470	0		&&			
ANR	79498	EqualityExpression	n -> y == y		79470	0		==			
ANR	79499	PtrMemberAccess	n -> y		79470	0					
ANR	79500	Identifier	n		79470	0					
ANR	79501	Identifier	y		79470	1					
ANR	79502	Identifier	y		79470	1					
ANR	79503	RelationalExpression	n -> x < x		79470	1		<			
ANR	79504	PtrMemberAccess	n -> x		79470	0					
ANR	79505	Identifier	n		79470	0					
ANR	79506	Identifier	x		79470	1					
ANR	79507	Identifier	x		79470	1					
ANR	79508	RelationalExpression	n -> y < y		79470	1		<			
ANR	79509	PtrMemberAccess	n -> y		79470	0					
ANR	79510	Identifier	n		79470	0					
ANR	79511	Identifier	y		79470	1					
ANR	79512	Identifier	y		79470	1					
ANR	79513	ReturnType	static int		79470	1					
ANR	79514	Identifier	is_near		79470	2					
ANR	79515	ParameterList	"const RANode * n , int x , int y , int is_next"		79470	3					
ANR	79516	Parameter	const RANode * n	2514:19:63531:63545	79470	0	True				
ANR	79517	ParameterType	const RANode *		79470	0					
ANR	79518	Identifier	n		79470	1					
ANR	79519	Parameter	int x	2514:36:63548:63552	79470	1	True				
ANR	79520	ParameterType	int		79470	0					
ANR	79521	Identifier	x		79470	1					
ANR	79522	Parameter	int y	2514:43:63555:63559	79470	2	True				
ANR	79523	ParameterType	int		79470	0					
ANR	79524	Identifier	y		79470	1					
ANR	79525	Parameter	int is_next	2514:50:63562:63572	79470	3	True				
ANR	79526	ParameterType	int		79470	0					
ANR	79527	Identifier	is_next		79470	1					
ANR	79528	CFGEntryNode	ENTRY		79470		True				
ANR	79529	CFGExitNode	EXIT		79470		True				
ANR	79530	Symbol	is_next		79470						
ANR	79531	Symbol	n -> y		79470						
ANR	79532	Symbol	n -> x		79470						
ANR	79533	Symbol	x		79470						
ANR	79534	Symbol	* n		79470						
ANR	79535	Symbol	y		79470						
ANR	79536	Symbol	n		79470						
ANR	79537	Function	is_near_h	2522:0:63707:63884							
ANR	79538	FunctionDef	"is_near_h (const RANode * n , int x , int y , int is_next)"		79537	0					
ANR	79539	CompoundStatement		2522:65:63772:63884	79537	0					
ANR	79540	IfStatement	if ( is_next )		79537	0					
ANR	79541	Condition	is_next	2523:5:63779:63785	79537	0	True				
ANR	79542	Identifier	is_next		79537	0					
ANR	79543	CompoundStatement		2:14:15:15	79537	1					
ANR	79544	ReturnStatement	return ( n -> x == x && n -> y > y ) || n -> x > x ;	2524:2:63792:63834	79537	0	True				
ANR	79545	OrExpression	( n -> x == x && n -> y > y ) || n -> x > x		79537	0		||			
ANR	79546	AndExpression	n -> x == x && n -> y > y		79537	0		&&			
ANR	79547	EqualityExpression	n -> x == x		79537	0		==			
ANR	79548	PtrMemberAccess	n -> x		79537	0					
ANR	79549	Identifier	n		79537	0					
ANR	79550	Identifier	x		79537	1					
ANR	79551	Identifier	x		79537	1					
ANR	79552	RelationalExpression	n -> y > y		79537	1		>			
ANR	79553	PtrMemberAccess	n -> y		79537	0					
ANR	79554	Identifier	n		79537	0					
ANR	79555	Identifier	y		79537	1					
ANR	79556	Identifier	y		79537	1					
ANR	79557	RelationalExpression	n -> x > x		79537	1		>			
ANR	79558	PtrMemberAccess	n -> x		79537	0					
ANR	79559	Identifier	n		79537	0					
ANR	79560	Identifier	x		79537	1					
ANR	79561	Identifier	x		79537	1					
ANR	79562	ReturnStatement	return ( n -> x == x && n -> y < y ) || n -> x < x ;	2526:1:63840:63882	79537	1	True				
ANR	79563	OrExpression	( n -> x == x && n -> y < y ) || n -> x < x		79537	0		||			
ANR	79564	AndExpression	n -> x == x && n -> y < y		79537	0		&&			
ANR	79565	EqualityExpression	n -> x == x		79537	0		==			
ANR	79566	PtrMemberAccess	n -> x		79537	0					
ANR	79567	Identifier	n		79537	0					
ANR	79568	Identifier	x		79537	1					
ANR	79569	Identifier	x		79537	1					
ANR	79570	RelationalExpression	n -> y < y		79537	1		<			
ANR	79571	PtrMemberAccess	n -> y		79537	0					
ANR	79572	Identifier	n		79537	0					
ANR	79573	Identifier	y		79537	1					
ANR	79574	Identifier	y		79537	1					
ANR	79575	RelationalExpression	n -> x < x		79537	1		<			
ANR	79576	PtrMemberAccess	n -> x		79537	0					
ANR	79577	Identifier	n		79537	0					
ANR	79578	Identifier	x		79537	1					
ANR	79579	Identifier	x		79537	1					
ANR	79580	ReturnType	static int		79537	1					
ANR	79581	Identifier	is_near_h		79537	2					
ANR	79582	ParameterList	"const RANode * n , int x , int y , int is_next"		79537	3					
ANR	79583	Parameter	const RANode * n	2522:21:63728:63742	79537	0	True				
ANR	79584	ParameterType	const RANode *		79537	0					
ANR	79585	Identifier	n		79537	1					
ANR	79586	Parameter	int x	2522:38:63745:63749	79537	1	True				
ANR	79587	ParameterType	int		79537	0					
ANR	79588	Identifier	x		79537	1					
ANR	79589	Parameter	int y	2522:45:63752:63756	79537	2	True				
ANR	79590	ParameterType	int		79537	0					
ANR	79591	Identifier	y		79537	1					
ANR	79592	Parameter	int is_next	2522:52:63759:63769	79537	3	True				
ANR	79593	ParameterType	int		79537	0					
ANR	79594	Identifier	is_next		79537	1					
ANR	79595	CFGEntryNode	ENTRY		79537		True				
ANR	79596	CFGExitNode	EXIT		79537		True				
ANR	79597	Symbol	is_next		79537						
ANR	79598	Symbol	n -> y		79537						
ANR	79599	Symbol	n -> x		79537						
ANR	79600	Symbol	x		79537						
ANR	79601	Symbol	* n		79537						
ANR	79602	Symbol	y		79537						
ANR	79603	Symbol	n		79537						
ANR	79604	Function	find_near_of	2529:0:63887:65035							
ANR	79605	FunctionDef	"find_near_of (const RAGraph * g , const RGraphNode * cur , int is_next)"		79604	0					
ANR	79606	CompoundStatement		2529:92:63979:65035	79604	0					
ANR	79607	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	2531:1:64004:64053	79604	0	True				
ANR	79608	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		79604	0					
ANR	79609	IdentifierDeclType	const RList *		79604	0					
ANR	79610	Identifier	nodes		79604	1					
ANR	79611	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		79604	2		=			
ANR	79612	Identifier	nodes		79604	0					
ANR	79613	CallExpression	r_graph_get_nodes ( g -> graph )		79604	1					
ANR	79614	Callee	r_graph_get_nodes		79604	0					
ANR	79615	Identifier	r_graph_get_nodes		79604	0					
ANR	79616	ArgumentList	g -> graph		79604	1					
ANR	79617	Argument	g -> graph		79604	0					
ANR	79618	PtrMemberAccess	g -> graph		79604	0					
ANR	79619	Identifier	g		79604	0					
ANR	79620	Identifier	graph		79604	1					
ANR	79621	IdentifierDeclStatement	const RListIter * it ;	2532:1:64056:64075	79604	1	True				
ANR	79622	IdentifierDecl	* it		79604	0					
ANR	79623	IdentifierDeclType	const RListIter *		79604	0					
ANR	79624	Identifier	it		79604	1					
ANR	79625	IdentifierDeclStatement	"const RGraphNode * gn , * resgn = NULL ;"	2533:1:64078:64113	79604	2	True				
ANR	79626	IdentifierDecl	* gn		79604	0					
ANR	79627	IdentifierDeclType	const RGraphNode *		79604	0					
ANR	79628	Identifier	gn		79604	1					
ANR	79629	IdentifierDecl	* resgn = NULL		79604	1					
ANR	79630	IdentifierDeclType	const RGraphNode *		79604	0					
ANR	79631	Identifier	resgn		79604	1					
ANR	79632	AssignmentExpression	* resgn = NULL		79604	2		=			
ANR	79633	Identifier	NULL		79604	0					
ANR	79634	Identifier	NULL		79604	1					
ANR	79635	IdentifierDeclStatement	"const RANode * n , * acur = cur ? get_anode ( cur ) : NULL ;"	2534:1:64116:64167	79604	3	True				
ANR	79636	IdentifierDecl	* n		79604	0					
ANR	79637	IdentifierDeclType	const RANode *		79604	0					
ANR	79638	Identifier	n		79604	1					
ANR	79639	IdentifierDecl	* acur = cur ? get_anode ( cur ) : NULL		79604	1					
ANR	79640	IdentifierDeclType	const RANode *		79604	0					
ANR	79641	Identifier	acur		79604	1					
ANR	79642	AssignmentExpression	* acur = cur ? get_anode ( cur ) : NULL		79604	2		=			
ANR	79643	Identifier	acur		79604	0					
ANR	79644	ConditionalExpression	cur ? get_anode ( cur ) : NULL		79604	1					
ANR	79645	Condition	cur		79604	0					
ANR	79646	Identifier	cur		79604	0					
ANR	79647	CallExpression	get_anode ( cur )		79604	1					
ANR	79648	Callee	get_anode		79604	0					
ANR	79649	Identifier	get_anode		79604	0					
ANR	79650	ArgumentList	cur		79604	1					
ANR	79651	Argument	cur		79604	0					
ANR	79652	Identifier	cur		79604	0					
ANR	79653	Identifier	NULL		79604	2					
ANR	79654	IdentifierDeclStatement	const int default_v = is_next ? INT_MIN : INT_MAX ;	2535:1:64170:64217	79604	4	True				
ANR	79655	IdentifierDecl	default_v = is_next ? INT_MIN : INT_MAX		79604	0					
ANR	79656	IdentifierDeclType	const int		79604	0					
ANR	79657	Identifier	default_v		79604	1					
ANR	79658	AssignmentExpression	default_v = is_next ? INT_MIN : INT_MAX		79604	2		=			
ANR	79659	Identifier	default_v		79604	0					
ANR	79660	ConditionalExpression	is_next ? INT_MIN : INT_MAX		79604	1					
ANR	79661	Condition	is_next		79604	0					
ANR	79662	Identifier	is_next		79604	0					
ANR	79663	Identifier	INT_MIN		79604	1					
ANR	79664	Identifier	INT_MAX		79604	2					
ANR	79665	IdentifierDeclStatement	const int start_y = acur ? acur -> y : default_v ;	2536:1:64220:64264	79604	5	True				
ANR	79666	IdentifierDecl	start_y = acur ? acur -> y : default_v		79604	0					
ANR	79667	IdentifierDeclType	const int		79604	0					
ANR	79668	Identifier	start_y		79604	1					
ANR	79669	AssignmentExpression	start_y = acur ? acur -> y : default_v		79604	2		=			
ANR	79670	Identifier	start_y		79604	0					
ANR	79671	ConditionalExpression	acur ? acur -> y : default_v		79604	1					
ANR	79672	Condition	acur		79604	0					
ANR	79673	Identifier	acur		79604	0					
ANR	79674	PtrMemberAccess	acur -> y		79604	1					
ANR	79675	Identifier	acur		79604	0					
ANR	79676	Identifier	y		79604	1					
ANR	79677	Identifier	default_v		79604	2					
ANR	79678	IdentifierDeclStatement	const int start_x = acur ? acur -> x : default_v ;	2537:1:64267:64311	79604	6	True				
ANR	79679	IdentifierDecl	start_x = acur ? acur -> x : default_v		79604	0					
ANR	79680	IdentifierDeclType	const int		79604	0					
ANR	79681	Identifier	start_x		79604	1					
ANR	79682	AssignmentExpression	start_x = acur ? acur -> x : default_v		79604	2		=			
ANR	79683	Identifier	start_x		79604	0					
ANR	79684	ConditionalExpression	acur ? acur -> x : default_v		79604	1					
ANR	79685	Condition	acur		79604	0					
ANR	79686	Identifier	acur		79604	0					
ANR	79687	PtrMemberAccess	acur -> x		79604	1					
ANR	79688	Identifier	acur		79604	0					
ANR	79689	Identifier	x		79604	1					
ANR	79690	Identifier	default_v		79604	2					
ANR	79691	Statement	graph_foreach_anode	2539:1:64315:64333	79604	7	True				
ANR	79692	Statement	(	2539:21:64335:64335	79604	8	True				
ANR	79693	Statement	nodes	2539:22:64336:64340	79604	9	True				
ANR	79694	Statement	","	2539:27:64341:64341	79604	10	True				
ANR	79695	Statement	it	2539:29:64343:64344	79604	11	True				
ANR	79696	Statement	","	2539:31:64345:64345	79604	12	True				
ANR	79697	Statement	gn	2539:33:64347:64348	79604	13	True				
ANR	79698	Statement	","	2539:35:64349:64349	79604	14	True				
ANR	79699	Statement	n	2539:37:64351:64351	79604	15	True				
ANR	79700	Statement	)	2539:38:64352:64352	79604	16	True				
ANR	79701	CompoundStatement		13:2:478:605	79604	17					
ANR	79702	IdentifierDeclStatement	"bool isNear = true ? is_near ( n , start_x , start_y , is_next ) : is_near_h ( n , start_x , start_y , is_next ) ;"	2541:2:64458:64585	79604	0	True				
ANR	79703	IdentifierDecl	"isNear = true ? is_near ( n , start_x , start_y , is_next ) : is_near_h ( n , start_x , start_y , is_next )"		79604	0					
ANR	79704	IdentifierDeclType	bool		79604	0					
ANR	79705	Identifier	isNear		79604	1					
ANR	79706	AssignmentExpression	"isNear = true ? is_near ( n , start_x , start_y , is_next ) : is_near_h ( n , start_x , start_y , is_next )"		79604	2		=			
ANR	79707	Identifier	isNear		79604	0					
ANR	79708	ConditionalExpression	"true ? is_near ( n , start_x , start_y , is_next ) : is_near_h ( n , start_x , start_y , is_next )"		79604	1					
ANR	79709	Condition	true		79604	0					
ANR	79710	Identifier	true		79604	0					
ANR	79711	CallExpression	"is_near ( n , start_x , start_y , is_next )"		79604	1					
ANR	79712	Callee	is_near		79604	0					
ANR	79713	Identifier	is_near		79604	0					
ANR	79714	ArgumentList	n		79604	1					
ANR	79715	Argument	n		79604	0					
ANR	79716	Identifier	n		79604	0					
ANR	79717	Argument	start_x		79604	1					
ANR	79718	Identifier	start_x		79604	0					
ANR	79719	Argument	start_y		79604	2					
ANR	79720	Identifier	start_y		79604	0					
ANR	79721	Argument	is_next		79604	3					
ANR	79722	Identifier	is_next		79604	0					
ANR	79723	CallExpression	"is_near_h ( n , start_x , start_y , is_next )"		79604	2					
ANR	79724	Callee	is_near_h		79604	0					
ANR	79725	Identifier	is_near_h		79604	0					
ANR	79726	ArgumentList	n		79604	1					
ANR	79727	Argument	n		79604	0					
ANR	79728	Identifier	n		79604	0					
ANR	79729	Argument	start_x		79604	1					
ANR	79730	Identifier	start_x		79604	0					
ANR	79731	Argument	start_y		79604	2					
ANR	79732	Identifier	start_y		79604	0					
ANR	79733	Argument	is_next		79604	3					
ANR	79734	Identifier	is_next		79604	0					
ANR	79735	IfStatement	if ( isNear )		79604	1					
ANR	79736	Condition	isNear	2544:6:64593:64598	79604	0	True				
ANR	79737	Identifier	isNear		79604	0					
ANR	79738	CompoundStatement		17:3:626:644	79604	1					
ANR	79739	IdentifierDeclStatement	const RANode * resn ;	2545:3:64606:64624	79604	0	True				
ANR	79740	IdentifierDecl	* resn		79604	0					
ANR	79741	IdentifierDeclType	const RANode *		79604	0					
ANR	79742	Identifier	resn		79604	1					
ANR	79743	IfStatement	if ( ! resgn )		79604	1					
ANR	79744	Condition	! resgn	2547:7:64634:64639	79604	0	True				
ANR	79745	UnaryOperationExpression	! resgn		79604	0					
ANR	79746	UnaryOperator	!		79604	0					
ANR	79747	Identifier	resgn		79604	1					
ANR	79748	CompoundStatement		19:15:662:662	79604	1					
ANR	79749	ExpressionStatement	resgn = gn	2548:4:64648:64658	79604	0	True				
ANR	79750	AssignmentExpression	resgn = gn		79604	0		=			
ANR	79751	Identifier	resgn		79604	0					
ANR	79752	Identifier	gn		79604	1					
ANR	79753	ContinueStatement	continue ;	2549:4:64664:64672	79604	1	True				
ANR	79754	ExpressionStatement	resn = get_anode ( resgn )	2552:3:64683:64707	79604	2	True				
ANR	79755	AssignmentExpression	resn = get_anode ( resgn )		79604	0		=			
ANR	79756	Identifier	resn		79604	0					
ANR	79757	CallExpression	get_anode ( resgn )		79604	1					
ANR	79758	Callee	get_anode		79604	0					
ANR	79759	Identifier	get_anode		79604	0					
ANR	79760	ArgumentList	resgn		79604	1					
ANR	79761	Argument	resgn		79604	0					
ANR	79762	Identifier	resgn		79604	0					
ANR	79763	IfStatement	if ( ( is_next && resn -> y > n -> y ) || ( ! is_next && resn -> y < n -> y ) )		79604	3					
ANR	79764	Condition	( is_next && resn -> y > n -> y ) || ( ! is_next && resn -> y < n -> y )	2553:7:64716:64774	79604	0	True				
ANR	79765	OrExpression	( is_next && resn -> y > n -> y ) || ( ! is_next && resn -> y < n -> y )		79604	0		||			
ANR	79766	AndExpression	is_next && resn -> y > n -> y		79604	0		&&			
ANR	79767	Identifier	is_next		79604	0					
ANR	79768	RelationalExpression	resn -> y > n -> y		79604	1		>			
ANR	79769	PtrMemberAccess	resn -> y		79604	0					
ANR	79770	Identifier	resn		79604	0					
ANR	79771	Identifier	y		79604	1					
ANR	79772	PtrMemberAccess	n -> y		79604	1					
ANR	79773	Identifier	n		79604	0					
ANR	79774	Identifier	y		79604	1					
ANR	79775	AndExpression	! is_next && resn -> y < n -> y		79604	1		&&			
ANR	79776	UnaryOperationExpression	! is_next		79604	0					
ANR	79777	UnaryOperator	!		79604	0					
ANR	79778	Identifier	is_next		79604	1					
ANR	79779	RelationalExpression	resn -> y < n -> y		79604	1		<			
ANR	79780	PtrMemberAccess	resn -> y		79604	0					
ANR	79781	Identifier	resn		79604	0					
ANR	79782	Identifier	y		79604	1					
ANR	79783	PtrMemberAccess	n -> y		79604	1					
ANR	79784	Identifier	n		79604	0					
ANR	79785	Identifier	y		79604	1					
ANR	79786	CompoundStatement		25:68:797:797	79604	1					
ANR	79787	ExpressionStatement	resgn = gn	2554:4:64783:64793	79604	0	True				
ANR	79788	AssignmentExpression	resgn = gn		79604	0		=			
ANR	79789	Identifier	resgn		79604	0					
ANR	79790	Identifier	gn		79604	1					
ANR	79791	ElseStatement	else		79604	0					
ANR	79792	IfStatement	if ( ( is_next && resn -> y == n -> y && resn -> x > n -> x ) || ( ! is_next && resn -> y == n -> y && resn -> x < n -> x ) )		79604	0					
ANR	79793	Condition	( is_next && resn -> y == n -> y && resn -> x > n -> x ) || ( ! is_next && resn -> y == n -> y && resn -> x < n -> x )	2555:14:64809:64919	79604	0	True				
ANR	79794	OrExpression	( is_next && resn -> y == n -> y && resn -> x > n -> x ) || ( ! is_next && resn -> y == n -> y && resn -> x < n -> x )		79604	0		||			
ANR	79795	AndExpression	is_next && resn -> y == n -> y && resn -> x > n -> x		79604	0		&&			
ANR	79796	Identifier	is_next		79604	0					
ANR	79797	AndExpression	resn -> y == n -> y && resn -> x > n -> x		79604	1		&&			
ANR	79798	EqualityExpression	resn -> y == n -> y		79604	0		==			
ANR	79799	PtrMemberAccess	resn -> y		79604	0					
ANR	79800	Identifier	resn		79604	0					
ANR	79801	Identifier	y		79604	1					
ANR	79802	PtrMemberAccess	n -> y		79604	1					
ANR	79803	Identifier	n		79604	0					
ANR	79804	Identifier	y		79604	1					
ANR	79805	RelationalExpression	resn -> x > n -> x		79604	1		>			
ANR	79806	PtrMemberAccess	resn -> x		79604	0					
ANR	79807	Identifier	resn		79604	0					
ANR	79808	Identifier	x		79604	1					
ANR	79809	PtrMemberAccess	n -> x		79604	1					
ANR	79810	Identifier	n		79604	0					
ANR	79811	Identifier	x		79604	1					
ANR	79812	AndExpression	! is_next && resn -> y == n -> y && resn -> x < n -> x		79604	1		&&			
ANR	79813	UnaryOperationExpression	! is_next		79604	0					
ANR	79814	UnaryOperator	!		79604	0					
ANR	79815	Identifier	is_next		79604	1					
ANR	79816	AndExpression	resn -> y == n -> y && resn -> x < n -> x		79604	1		&&			
ANR	79817	EqualityExpression	resn -> y == n -> y		79604	0		==			
ANR	79818	PtrMemberAccess	resn -> y		79604	0					
ANR	79819	Identifier	resn		79604	0					
ANR	79820	Identifier	y		79604	1					
ANR	79821	PtrMemberAccess	n -> y		79604	1					
ANR	79822	Identifier	n		79604	0					
ANR	79823	Identifier	y		79604	1					
ANR	79824	RelationalExpression	resn -> x < n -> x		79604	1		<			
ANR	79825	PtrMemberAccess	resn -> x		79604	0					
ANR	79826	Identifier	resn		79604	0					
ANR	79827	Identifier	x		79604	1					
ANR	79828	PtrMemberAccess	n -> x		79604	1					
ANR	79829	Identifier	n		79604	0					
ANR	79830	Identifier	x		79604	1					
ANR	79831	CompoundStatement		28:63:942:942	79604	1					
ANR	79832	ExpressionStatement	resgn = gn	2557:4:64928:64938	79604	0	True				
ANR	79833	AssignmentExpression	resgn = gn		79604	0		=			
ANR	79834	Identifier	resgn		79604	0					
ANR	79835	Identifier	gn		79604	1					
ANR	79836	IfStatement	if ( ! resgn && cur )		79604	18					
ANR	79837	Condition	! resgn && cur	2561:5:64957:64969	79604	0	True				
ANR	79838	AndExpression	! resgn && cur		79604	0		&&			
ANR	79839	UnaryOperationExpression	! resgn		79604	0					
ANR	79840	UnaryOperator	!		79604	0					
ANR	79841	Identifier	resgn		79604	1					
ANR	79842	Identifier	cur		79604	1					
ANR	79843	CompoundStatement		33:20:992:992	79604	1					
ANR	79844	ExpressionStatement	"resgn = find_near_of ( g , NULL , is_next )"	2562:2:64976:65015	79604	0	True				
ANR	79845	AssignmentExpression	"resgn = find_near_of ( g , NULL , is_next )"		79604	0		=			
ANR	79846	Identifier	resgn		79604	0					
ANR	79847	CallExpression	"find_near_of ( g , NULL , is_next )"		79604	1					
ANR	79848	Callee	find_near_of		79604	0					
ANR	79849	Identifier	find_near_of		79604	0					
ANR	79850	ArgumentList	g		79604	1					
ANR	79851	Argument	g		79604	0					
ANR	79852	Identifier	g		79604	0					
ANR	79853	Argument	NULL		79604	1					
ANR	79854	Identifier	NULL		79604	0					
ANR	79855	Argument	is_next		79604	2					
ANR	79856	Identifier	is_next		79604	0					
ANR	79857	ReturnStatement	return resgn ;	2564:1:65021:65033	79604	19	True				
ANR	79858	Identifier	resgn		79604	0					
ANR	79859	ReturnType	static const RGraphNode *		79604	1					
ANR	79860	Identifier	find_near_of		79604	2					
ANR	79861	ParameterList	"const RAGraph * g , const RGraphNode * cur , int is_next"		79604	3					
ANR	79862	Parameter	const RAGraph * g	2529:38:63925:63940	79604	0	True				
ANR	79863	ParameterType	const RAGraph *		79604	0					
ANR	79864	Identifier	g		79604	1					
ANR	79865	Parameter	const RGraphNode * cur	2529:56:63943:63963	79604	1	True				
ANR	79866	ParameterType	const RGraphNode *		79604	0					
ANR	79867	Identifier	cur		79604	1					
ANR	79868	Parameter	int is_next	2529:79:63966:63976	79604	2	True				
ANR	79869	ParameterType	int		79604	0					
ANR	79870	Identifier	is_next		79604	1					
ANR	79871	CFGEntryNode	ENTRY		79604		True				
ANR	79872	CFGExitNode	EXIT		79604		True				
ANR	79873	CFGErrorNode	ERROR		79604		True				
ANR	79874	Symbol	cur		79604						
ANR	79875	Symbol	is_near		79604						
ANR	79876	Symbol	find_near_of		79604						
ANR	79877	Symbol	INT_MIN		79604						
ANR	79878	Symbol	default_v		79604						
ANR	79879	Symbol	resn -> x		79604						
ANR	79880	Symbol	acur		79604						
ANR	79881	Symbol	isNear		79604						
ANR	79882	Symbol	g -> graph		79604						
ANR	79883	Symbol	acur -> x		79604						
ANR	79884	Symbol	resn -> y		79604						
ANR	79885	Symbol	acur -> y		79604						
ANR	79886	Symbol	INT_MAX		79604						
ANR	79887	Symbol	is_near_h		79604						
ANR	79888	Symbol	r_graph_get_nodes		79604						
ANR	79889	Symbol	NULL		79604						
ANR	79890	Symbol	get_anode		79604						
ANR	79891	Symbol	g		79604						
ANR	79892	Symbol	gn		79604						
ANR	79893	Symbol	* resn		79604						
ANR	79894	Symbol	* acur		79604						
ANR	79895	Symbol	it		79604						
ANR	79896	Symbol	n		79604						
ANR	79897	Symbol	start_x		79604						
ANR	79898	Symbol	is_next		79604						
ANR	79899	Symbol	* g		79604						
ANR	79900	Symbol	resgn		79604						
ANR	79901	Symbol	n -> y		79604						
ANR	79902	Symbol	nodes		79604						
ANR	79903	Symbol	n -> x		79604						
ANR	79904	Symbol	start_y		79604						
ANR	79905	Symbol	true		79604						
ANR	79906	Symbol	* n		79604						
ANR	79907	Symbol	resn		79604						
ANR	79908	Function	update_graph_sizes	2567:0:65038:67303							
ANR	79909	FunctionDef	update_graph_sizes (RAGraph * g)		79908	0					
ANR	79910	CompoundStatement		2567:43:65081:67303	79908	0					
ANR	79911	IdentifierDeclStatement	RListIter * it ;	2568:1:65084:65097	79908	0	True				
ANR	79912	IdentifierDecl	* it		79908	0					
ANR	79913	IdentifierDeclType	RListIter *		79908	0					
ANR	79914	Identifier	it		79908	1					
ANR	79915	IdentifierDeclStatement	RGraphNode * gk ;	2569:1:65100:65114	79908	1	True				
ANR	79916	IdentifierDecl	* gk		79908	0					
ANR	79917	IdentifierDeclType	RGraphNode *		79908	0					
ANR	79918	Identifier	gk		79908	1					
ANR	79919	IdentifierDeclStatement	"RANode * ak , * min_gn , * max_gn ;"	2570:1:65117:65145	79908	2	True				
ANR	79920	IdentifierDecl	* ak		79908	0					
ANR	79921	IdentifierDeclType	RANode *		79908	0					
ANR	79922	Identifier	ak		79908	1					
ANR	79923	IdentifierDecl	* min_gn		79908	1					
ANR	79924	IdentifierDeclType	RANode *		79908	0					
ANR	79925	Identifier	min_gn		79908	1					
ANR	79926	IdentifierDecl	* max_gn		79908	2					
ANR	79927	IdentifierDeclType	RANode *		79908	0					
ANR	79928	Identifier	max_gn		79908	1					
ANR	79929	IdentifierDeclStatement	"int max_x , max_y ;"	2571:1:65148:65164	79908	3	True				
ANR	79930	IdentifierDecl	max_x		79908	0					
ANR	79931	IdentifierDeclType	int		79908	0					
ANR	79932	Identifier	max_x		79908	1					
ANR	79933	IdentifierDecl	max_y		79908	1					
ANR	79934	IdentifierDeclType	int		79908	0					
ANR	79935	Identifier	max_y		79908	1					
ANR	79936	IdentifierDeclStatement	"int delta_x , delta_y ;"	2572:1:65167:65187	79908	4	True				
ANR	79937	IdentifierDecl	delta_x		79908	0					
ANR	79938	IdentifierDeclType	int		79908	0					
ANR	79939	Identifier	delta_x		79908	1					
ANR	79940	IdentifierDecl	delta_y		79908	1					
ANR	79941	IdentifierDeclType	int		79908	0					
ANR	79942	Identifier	delta_y		79908	1					
ANR	79943	IdentifierDeclStatement	AEdge * e ;	2573:1:65190:65198	79908	5	True				
ANR	79944	IdentifierDecl	* e		79908	0					
ANR	79945	IdentifierDeclType	AEdge *		79908	0					
ANR	79946	Identifier	e		79908	1					
ANR	79947	ExpressionStatement	g -> x = g -> y = INT_MAX	2575:1:65202:65223	79908	6	True				
ANR	79948	AssignmentExpression	g -> x = g -> y = INT_MAX		79908	0		=			
ANR	79949	PtrMemberAccess	g -> x		79908	0					
ANR	79950	Identifier	g		79908	0					
ANR	79951	Identifier	x		79908	1					
ANR	79952	AssignmentExpression	g -> y = INT_MAX		79908	1		=			
ANR	79953	PtrMemberAccess	g -> y		79908	0					
ANR	79954	Identifier	g		79908	0					
ANR	79955	Identifier	y		79908	1					
ANR	79956	Identifier	INT_MAX		79908	1					
ANR	79957	ExpressionStatement	max_x = max_y = INT_MIN	2576:1:65226:65249	79908	7	True				
ANR	79958	AssignmentExpression	max_x = max_y = INT_MIN		79908	0		=			
ANR	79959	Identifier	max_x		79908	0					
ANR	79960	AssignmentExpression	max_y = INT_MIN		79908	1		=			
ANR	79961	Identifier	max_y		79908	0					
ANR	79962	Identifier	INT_MIN		79908	1					
ANR	79963	ExpressionStatement	min_gn = max_gn = NULL	2577:1:65252:65274	79908	8	True				
ANR	79964	AssignmentExpression	min_gn = max_gn = NULL		79908	0		=			
ANR	79965	Identifier	min_gn		79908	0					
ANR	79966	AssignmentExpression	max_gn = NULL		79908	1		=			
ANR	79967	Identifier	max_gn		79908	0					
ANR	79968	Identifier	NULL		79908	1					
ANR	79969	Statement	graph_foreach_anode	2579:1:65278:65296	79908	9	True				
ANR	79970	Statement	(	2579:21:65298:65298	79908	10	True				
ANR	79971	Statement	r_graph_get_nodes	2579:22:65299:65315	79908	11	True				
ANR	79972	Statement	(	2579:40:65317:65317	79908	12	True				
ANR	79973	Statement	g	2579:41:65318:65318	79908	13	True				
ANR	79974	Statement	->	2579:42:65319:65320	79908	14	True				
ANR	79975	Statement	graph	2579:44:65321:65325	79908	15	True				
ANR	79976	Statement	)	2579:49:65326:65326	79908	16	True				
ANR	79977	Statement	","	2579:50:65327:65327	79908	17	True				
ANR	79978	Statement	it	2579:52:65329:65330	79908	18	True				
ANR	79979	Statement	","	2579:54:65331:65331	79908	19	True				
ANR	79980	Statement	gk	2579:56:65333:65334	79908	20	True				
ANR	79981	Statement	","	2579:58:65335:65335	79908	21	True				
ANR	79982	Statement	ak	2579:60:65337:65338	79908	22	True				
ANR	79983	Statement	)	2579:62:65339:65339	79908	23	True				
ANR	79984	CompoundStatement		15:2:289:296	79908	24					
ANR	79985	IdentifierDeclStatement	const RList * nd = NULL ;	2580:2:65345:65367	79908	0	True				
ANR	79986	IdentifierDecl	* nd = NULL		79908	0					
ANR	79987	IdentifierDeclType	const RList *		79908	0					
ANR	79988	Identifier	nd		79908	1					
ANR	79989	AssignmentExpression	* nd = NULL		79908	2		=			
ANR	79990	Identifier	NULL		79908	0					
ANR	79991	Identifier	NULL		79908	1					
ANR	79992	IdentifierDeclStatement	int len ;	2581:2:65371:65378	79908	1	True				
ANR	79993	IdentifierDecl	len		79908	0					
ANR	79994	IdentifierDeclType	int		79908	0					
ANR	79995	Identifier	len		79908	1					
ANR	79996	IfStatement	if ( ak -> x < g -> x )		79908	2					
ANR	79997	Condition	ak -> x < g -> x	2582:6:65386:65397	79908	0	True				
ANR	79998	RelationalExpression	ak -> x < g -> x		79908	0		<			
ANR	79999	PtrMemberAccess	ak -> x		79908	0					
ANR	80000	Identifier	ak		79908	0					
ANR	80001	Identifier	x		79908	1					
ANR	80002	PtrMemberAccess	g -> x		79908	1					
ANR	80003	Identifier	g		79908	0					
ANR	80004	Identifier	x		79908	1					
ANR	80005	CompoundStatement		16:20:318:318	79908	1					
ANR	80006	ExpressionStatement	g -> x = ak -> x	2583:3:65405:65417	79908	0	True				
ANR	80007	AssignmentExpression	g -> x = ak -> x		79908	0		=			
ANR	80008	PtrMemberAccess	g -> x		79908	0					
ANR	80009	Identifier	g		79908	0					
ANR	80010	Identifier	x		79908	1					
ANR	80011	PtrMemberAccess	ak -> x		79908	1					
ANR	80012	Identifier	ak		79908	0					
ANR	80013	Identifier	x		79908	1					
ANR	80014	ExpressionStatement	"nd = r_graph_innodes ( g -> graph , gk )"	2586:2:65426:65461	79908	3	True				
ANR	80015	AssignmentExpression	"nd = r_graph_innodes ( g -> graph , gk )"		79908	0		=			
ANR	80016	Identifier	nd		79908	0					
ANR	80017	CallExpression	"r_graph_innodes ( g -> graph , gk )"		79908	1					
ANR	80018	Callee	r_graph_innodes		79908	0					
ANR	80019	Identifier	r_graph_innodes		79908	0					
ANR	80020	ArgumentList	g -> graph		79908	1					
ANR	80021	Argument	g -> graph		79908	0					
ANR	80022	PtrMemberAccess	g -> graph		79908	0					
ANR	80023	Identifier	g		79908	0					
ANR	80024	Identifier	graph		79908	1					
ANR	80025	Argument	gk		79908	1					
ANR	80026	Identifier	gk		79908	0					
ANR	80027	ExpressionStatement	len = nd ? r_list_length ( nd ) + 1 : 0	2587:2:65465:65502	79908	4	True				
ANR	80028	AssignmentExpression	len = nd ? r_list_length ( nd ) + 1 : 0		79908	0		=			
ANR	80029	Identifier	len		79908	0					
ANR	80030	ConditionalExpression	nd ? r_list_length ( nd ) + 1 : 0		79908	1					
ANR	80031	Condition	nd		79908	0					
ANR	80032	Identifier	nd		79908	0					
ANR	80033	AdditiveExpression	r_list_length ( nd ) + 1		79908	1		+			
ANR	80034	CallExpression	r_list_length ( nd )		79908	0					
ANR	80035	Callee	r_list_length		79908	0					
ANR	80036	Identifier	r_list_length		79908	0					
ANR	80037	ArgumentList	nd		79908	1					
ANR	80038	Argument	nd		79908	0					
ANR	80039	Identifier	nd		79908	0					
ANR	80040	PrimaryExpression	1		79908	1					
ANR	80041	PrimaryExpression	0		79908	2					
ANR	80042	IfStatement	if ( ak -> y - len < g -> y )		79908	5					
ANR	80043	Condition	ak -> y - len < g -> y	2588:6:65510:65527	79908	0	True				
ANR	80044	RelationalExpression	ak -> y - len < g -> y		79908	0		<			
ANR	80045	AdditiveExpression	ak -> y - len		79908	0		-			
ANR	80046	PtrMemberAccess	ak -> y		79908	0					
ANR	80047	Identifier	ak		79908	0					
ANR	80048	Identifier	y		79908	1					
ANR	80049	Identifier	len		79908	1					
ANR	80050	PtrMemberAccess	g -> y		79908	1					
ANR	80051	Identifier	g		79908	0					
ANR	80052	Identifier	y		79908	1					
ANR	80053	CompoundStatement		22:26:448:448	79908	1					
ANR	80054	ExpressionStatement	g -> y = ak -> y - len	2589:3:65535:65553	79908	0	True				
ANR	80055	AssignmentExpression	g -> y = ak -> y - len		79908	0		=			
ANR	80056	PtrMemberAccess	g -> y		79908	0					
ANR	80057	Identifier	g		79908	0					
ANR	80058	Identifier	y		79908	1					
ANR	80059	AdditiveExpression	ak -> y - len		79908	1		-			
ANR	80060	PtrMemberAccess	ak -> y		79908	0					
ANR	80061	Identifier	ak		79908	0					
ANR	80062	Identifier	y		79908	1					
ANR	80063	Identifier	len		79908	1					
ANR	80064	ExpressionStatement	min_gn = ak	2590:3:65558:65569	79908	1	True				
ANR	80065	AssignmentExpression	min_gn = ak		79908	0		=			
ANR	80066	Identifier	min_gn		79908	0					
ANR	80067	Identifier	ak		79908	1					
ANR	80068	IfStatement	if ( ak -> x + ak -> w > max_x )		79908	6					
ANR	80069	Condition	ak -> x + ak -> w > max_x	2593:6:65582:65602	79908	0	True				
ANR	80070	RelationalExpression	ak -> x + ak -> w > max_x		79908	0		>			
ANR	80071	AdditiveExpression	ak -> x + ak -> w		79908	0		+			
ANR	80072	PtrMemberAccess	ak -> x		79908	0					
ANR	80073	Identifier	ak		79908	0					
ANR	80074	Identifier	x		79908	1					
ANR	80075	PtrMemberAccess	ak -> w		79908	1					
ANR	80076	Identifier	ak		79908	0					
ANR	80077	Identifier	w		79908	1					
ANR	80078	Identifier	max_x		79908	1					
ANR	80079	CompoundStatement		27:29:523:523	79908	1					
ANR	80080	ExpressionStatement	max_x = ak -> x + ak -> w	2594:3:65610:65631	79908	0	True				
ANR	80081	AssignmentExpression	max_x = ak -> x + ak -> w		79908	0		=			
ANR	80082	Identifier	max_x		79908	0					
ANR	80083	AdditiveExpression	ak -> x + ak -> w		79908	1		+			
ANR	80084	PtrMemberAccess	ak -> x		79908	0					
ANR	80085	Identifier	ak		79908	0					
ANR	80086	Identifier	x		79908	1					
ANR	80087	PtrMemberAccess	ak -> w		79908	1					
ANR	80088	Identifier	ak		79908	0					
ANR	80089	Identifier	w		79908	1					
ANR	80090	ExpressionStatement	nd = NULL	2597:2:65640:65649	79908	7	True				
ANR	80091	AssignmentExpression	nd = NULL		79908	0		=			
ANR	80092	Identifier	nd		79908	0					
ANR	80093	Identifier	NULL		79908	1					
ANR	80094	ExpressionStatement	"nd = r_graph_get_neighbours ( g -> graph , gk )"	2598:2:65653:65695	79908	8	True				
ANR	80095	AssignmentExpression	"nd = r_graph_get_neighbours ( g -> graph , gk )"		79908	0		=			
ANR	80096	Identifier	nd		79908	0					
ANR	80097	CallExpression	"r_graph_get_neighbours ( g -> graph , gk )"		79908	1					
ANR	80098	Callee	r_graph_get_neighbours		79908	0					
ANR	80099	Identifier	r_graph_get_neighbours		79908	0					
ANR	80100	ArgumentList	g -> graph		79908	1					
ANR	80101	Argument	g -> graph		79908	0					
ANR	80102	PtrMemberAccess	g -> graph		79908	0					
ANR	80103	Identifier	g		79908	0					
ANR	80104	Identifier	graph		79908	1					
ANR	80105	Argument	gk		79908	1					
ANR	80106	Identifier	gk		79908	0					
ANR	80107	ExpressionStatement	len = nd ? r_list_length ( nd ) + 2 : 0	2599:2:65699:65736	79908	9	True				
ANR	80108	AssignmentExpression	len = nd ? r_list_length ( nd ) + 2 : 0		79908	0		=			
ANR	80109	Identifier	len		79908	0					
ANR	80110	ConditionalExpression	nd ? r_list_length ( nd ) + 2 : 0		79908	1					
ANR	80111	Condition	nd		79908	0					
ANR	80112	Identifier	nd		79908	0					
ANR	80113	AdditiveExpression	r_list_length ( nd ) + 2		79908	1		+			
ANR	80114	CallExpression	r_list_length ( nd )		79908	0					
ANR	80115	Callee	r_list_length		79908	0					
ANR	80116	Identifier	r_list_length		79908	0					
ANR	80117	ArgumentList	nd		79908	1					
ANR	80118	Argument	nd		79908	0					
ANR	80119	Identifier	nd		79908	0					
ANR	80120	PrimaryExpression	2		79908	1					
ANR	80121	PrimaryExpression	0		79908	2					
ANR	80122	IfStatement	if ( ak -> y + ak -> h + len > max_y )		79908	10					
ANR	80123	Condition	ak -> y + ak -> h + len > max_y	2600:6:65744:65770	79908	0	True				
ANR	80124	RelationalExpression	ak -> y + ak -> h + len > max_y		79908	0		>			
ANR	80125	AdditiveExpression	ak -> y + ak -> h + len		79908	0		+			
ANR	80126	PtrMemberAccess	ak -> y		79908	0					
ANR	80127	Identifier	ak		79908	0					
ANR	80128	Identifier	y		79908	1					
ANR	80129	AdditiveExpression	ak -> h + len		79908	1		+			
ANR	80130	PtrMemberAccess	ak -> h		79908	0					
ANR	80131	Identifier	ak		79908	0					
ANR	80132	Identifier	h		79908	1					
ANR	80133	Identifier	len		79908	1					
ANR	80134	Identifier	max_y		79908	1					
ANR	80135	CompoundStatement		34:35:691:691	79908	1					
ANR	80136	ExpressionStatement	max_y = ak -> y + ak -> h + len	2601:3:65778:65805	79908	0	True				
ANR	80137	AssignmentExpression	max_y = ak -> y + ak -> h + len		79908	0		=			
ANR	80138	Identifier	max_y		79908	0					
ANR	80139	AdditiveExpression	ak -> y + ak -> h + len		79908	1		+			
ANR	80140	PtrMemberAccess	ak -> y		79908	0					
ANR	80141	Identifier	ak		79908	0					
ANR	80142	Identifier	y		79908	1					
ANR	80143	AdditiveExpression	ak -> h + len		79908	1		+			
ANR	80144	PtrMemberAccess	ak -> h		79908	0					
ANR	80145	Identifier	ak		79908	0					
ANR	80146	Identifier	h		79908	1					
ANR	80147	Identifier	len		79908	1					
ANR	80148	ExpressionStatement	max_gn = ak	2602:3:65810:65821	79908	1	True				
ANR	80149	AssignmentExpression	max_gn = ak		79908	0		=			
ANR	80150	Identifier	max_gn		79908	0					
ANR	80151	Identifier	ak		79908	1					
ANR	80152	Statement	r_list_foreach	2606:1:65901:65914	79908	25	True				
ANR	80153	Statement	(	2606:16:65916:65916	79908	26	True				
ANR	80154	Statement	g	2606:17:65917:65917	79908	27	True				
ANR	80155	Statement	->	2606:18:65918:65919	79908	28	True				
ANR	80156	Statement	edges	2606:20:65920:65924	79908	29	True				
ANR	80157	Statement	","	2606:25:65925:65925	79908	30	True				
ANR	80158	Statement	it	2606:27:65927:65928	79908	31	True				
ANR	80159	Statement	","	2606:29:65929:65929	79908	32	True				
ANR	80160	Statement	e	2606:31:65931:65931	79908	33	True				
ANR	80161	Statement	)	2606:32:65932:65932	79908	34	True				
ANR	80162	CompoundStatement		43:2:885:890	79908	35					
ANR	80163	IdentifierDeclStatement	RListIter * kt ;	2607:2:65938:65951	79908	0	True				
ANR	80164	IdentifierDecl	* kt		79908	0					
ANR	80165	IdentifierDeclType	RListIter *		79908	0					
ANR	80166	Identifier	kt		79908	1					
ANR	80167	IdentifierDeclStatement	void * vv ;	2608:2:65955:65963	79908	1	True				
ANR	80168	IdentifierDecl	* vv		79908	0					
ANR	80169	IdentifierDeclType	void *		79908	0					
ANR	80170	Identifier	vv		79908	1					
ANR	80171	IdentifierDeclStatement	int v ;	2609:2:65967:65972	79908	2	True				
ANR	80172	IdentifierDecl	v		79908	0					
ANR	80173	IdentifierDeclType	int		79908	0					
ANR	80174	Identifier	v		79908	1					
ANR	80175	IfStatement	if ( r_cons_is_breaked ( ) )		79908	3					
ANR	80176	Condition	r_cons_is_breaked ( )	2610:6:65980:65999	79908	0	True				
ANR	80177	CallExpression	r_cons_is_breaked ( )		79908	0					
ANR	80178	Callee	r_cons_is_breaked		79908	0					
ANR	80179	Identifier	r_cons_is_breaked		79908	0					
ANR	80180	ArgumentList			79908	1					
ANR	80181	CompoundStatement		44:28:920:920	79908	1					
ANR	80182	BreakStatement	break ;	2611:3:66007:66012	79908	0	True				
ANR	80183	Statement	r_list_foreach	2613:2:66020:66033	79908	4	True				
ANR	80184	Statement	(	2613:17:66035:66035	79908	5	True				
ANR	80185	Statement	e	2613:18:66036:66036	79908	6	True				
ANR	80186	Statement	->	2613:19:66037:66038	79908	7	True				
ANR	80187	Statement	x	2613:21:66039:66039	79908	8	True				
ANR	80188	Statement	","	2613:22:66040:66040	79908	9	True				
ANR	80189	Statement	kt	2613:24:66042:66043	79908	10	True				
ANR	80190	Statement	","	2613:26:66044:66044	79908	11	True				
ANR	80191	Statement	vv	2613:28:66046:66047	79908	12	True				
ANR	80192	Statement	)	2613:30:66048:66048	79908	13	True				
ANR	80193	CompoundStatement		47:32:968:968	79908	14					
ANR	80194	ExpressionStatement	v = ( int ) ( size_t ) vv	2614:3:66055:66076	79908	0	True				
ANR	80195	AssignmentExpression	v = ( int ) ( size_t ) vv		79908	0		=			
ANR	80196	Identifier	v		79908	0					
ANR	80197	CastExpression	( int ) ( size_t ) vv		79908	1					
ANR	80198	CastTarget	int		79908	0					
ANR	80199	CastExpression	( size_t ) vv		79908	1					
ANR	80200	CastTarget	size_t		79908	0					
ANR	80201	Identifier	vv		79908	1					
ANR	80202	IfStatement	if ( v < g -> x )		79908	1					
ANR	80203	Condition	v < g -> x	2615:7:66085:66092	79908	0	True				
ANR	80204	RelationalExpression	v < g -> x		79908	0		<			
ANR	80205	Identifier	v		79908	0					
ANR	80206	PtrMemberAccess	g -> x		79908	1					
ANR	80207	Identifier	g		79908	0					
ANR	80208	Identifier	x		79908	1					
ANR	80209	CompoundStatement		49:17:1013:1013	79908	1					
ANR	80210	ExpressionStatement	g -> x = v	2616:4:66101:66109	79908	0	True				
ANR	80211	AssignmentExpression	g -> x = v		79908	0		=			
ANR	80212	PtrMemberAccess	g -> x		79908	0					
ANR	80213	Identifier	g		79908	0					
ANR	80214	Identifier	x		79908	1					
ANR	80215	Identifier	v		79908	1					
ANR	80216	IfStatement	if ( v + 1 > max_x )		79908	2					
ANR	80217	Condition	v + 1 > max_x	2618:7:66123:66135	79908	0	True				
ANR	80218	RelationalExpression	v + 1 > max_x		79908	0		>			
ANR	80219	AdditiveExpression	v + 1		79908	0		+			
ANR	80220	Identifier	v		79908	0					
ANR	80221	PrimaryExpression	1		79908	1					
ANR	80222	Identifier	max_x		79908	1					
ANR	80223	CompoundStatement		52:22:1056:1056	79908	1					
ANR	80224	ExpressionStatement	max_x = v + 1	2619:4:66144:66157	79908	0	True				
ANR	80225	AssignmentExpression	max_x = v + 1		79908	0		=			
ANR	80226	Identifier	max_x		79908	0					
ANR	80227	AdditiveExpression	v + 1		79908	1		+			
ANR	80228	Identifier	v		79908	0					
ANR	80229	PrimaryExpression	1		79908	1					
ANR	80230	Statement	r_list_foreach	2622:2:66170:66183	79908	15	True				
ANR	80231	Statement	(	2622:17:66185:66185	79908	16	True				
ANR	80232	Statement	e	2622:18:66186:66186	79908	17	True				
ANR	80233	Statement	->	2622:19:66187:66188	79908	18	True				
ANR	80234	Statement	y	2622:21:66189:66189	79908	19	True				
ANR	80235	Statement	","	2622:22:66190:66190	79908	20	True				
ANR	80236	Statement	kt	2622:24:66192:66193	79908	21	True				
ANR	80237	Statement	","	2622:26:66194:66194	79908	22	True				
ANR	80238	Statement	vv	2622:28:66196:66197	79908	23	True				
ANR	80239	Statement	)	2622:30:66198:66198	79908	24	True				
ANR	80240	CompoundStatement		56:32:1118:1118	79908	25					
ANR	80241	ExpressionStatement	v = ( int ) ( size_t ) vv	2623:3:66205:66226	79908	0	True				
ANR	80242	AssignmentExpression	v = ( int ) ( size_t ) vv		79908	0		=			
ANR	80243	Identifier	v		79908	0					
ANR	80244	CastExpression	( int ) ( size_t ) vv		79908	1					
ANR	80245	CastTarget	int		79908	0					
ANR	80246	CastExpression	( size_t ) vv		79908	1					
ANR	80247	CastTarget	size_t		79908	0					
ANR	80248	Identifier	vv		79908	1					
ANR	80249	IfStatement	if ( v < g -> y )		79908	1					
ANR	80250	Condition	v < g -> y	2624:7:66235:66242	79908	0	True				
ANR	80251	RelationalExpression	v < g -> y		79908	0		<			
ANR	80252	Identifier	v		79908	0					
ANR	80253	PtrMemberAccess	g -> y		79908	1					
ANR	80254	Identifier	g		79908	0					
ANR	80255	Identifier	y		79908	1					
ANR	80256	CompoundStatement		58:17:1163:1163	79908	1					
ANR	80257	ExpressionStatement	g -> y = v	2625:4:66251:66259	79908	0	True				
ANR	80258	AssignmentExpression	g -> y = v		79908	0		=			
ANR	80259	PtrMemberAccess	g -> y		79908	0					
ANR	80260	Identifier	g		79908	0					
ANR	80261	Identifier	y		79908	1					
ANR	80262	Identifier	v		79908	1					
ANR	80263	IfStatement	if ( v + 1 > max_y )		79908	2					
ANR	80264	Condition	v + 1 > max_y	2627:7:66273:66285	79908	0	True				
ANR	80265	RelationalExpression	v + 1 > max_y		79908	0		>			
ANR	80266	AdditiveExpression	v + 1		79908	0		+			
ANR	80267	Identifier	v		79908	0					
ANR	80268	PrimaryExpression	1		79908	1					
ANR	80269	Identifier	max_y		79908	1					
ANR	80270	CompoundStatement		61:22:1206:1206	79908	1					
ANR	80271	ExpressionStatement	max_y = v + 1	2628:4:66294:66307	79908	0	True				
ANR	80272	AssignmentExpression	max_y = v + 1		79908	0		=			
ANR	80273	Identifier	max_y		79908	0					
ANR	80274	AdditiveExpression	v + 1		79908	1		+			
ANR	80275	Identifier	v		79908	0					
ANR	80276	PrimaryExpression	1		79908	1					
ANR	80277	ExpressionStatement	r_cons_break_pop ( )	2632:1:66322:66341	79908	36	True				
ANR	80278	CallExpression	r_cons_break_pop ( )		79908	0					
ANR	80279	Callee	r_cons_break_pop		79908	0					
ANR	80280	Identifier	r_cons_break_pop		79908	0					
ANR	80281	ArgumentList			79908	1					
ANR	80282	IfStatement	if ( min_gn )		79908	37					
ANR	80283	Condition	min_gn	2634:5:66349:66354	79908	0	True				
ANR	80284	Identifier	min_gn		79908	0					
ANR	80285	CompoundStatement		69:2:1279:1341	79908	1					
ANR	80286	IdentifierDeclStatement	"const RList * neigh = r_graph_innodes ( g -> graph , min_gn -> gnode ) ;"	2635:2:66361:66423	79908	0	True				
ANR	80287	IdentifierDecl	"* neigh = r_graph_innodes ( g -> graph , min_gn -> gnode )"		79908	0					
ANR	80288	IdentifierDeclType	const RList *		79908	0					
ANR	80289	Identifier	neigh		79908	1					
ANR	80290	AssignmentExpression	"* neigh = r_graph_innodes ( g -> graph , min_gn -> gnode )"		79908	2		=			
ANR	80291	Identifier	neigh		79908	0					
ANR	80292	CallExpression	"r_graph_innodes ( g -> graph , min_gn -> gnode )"		79908	1					
ANR	80293	Callee	r_graph_innodes		79908	0					
ANR	80294	Identifier	r_graph_innodes		79908	0					
ANR	80295	ArgumentList	g -> graph		79908	1					
ANR	80296	Argument	g -> graph		79908	0					
ANR	80297	PtrMemberAccess	g -> graph		79908	0					
ANR	80298	Identifier	g		79908	0					
ANR	80299	Identifier	graph		79908	1					
ANR	80300	Argument	min_gn -> gnode		79908	1					
ANR	80301	PtrMemberAccess	min_gn -> gnode		79908	0					
ANR	80302	Identifier	min_gn		79908	0					
ANR	80303	Identifier	gnode		79908	1					
ANR	80304	IfStatement	if ( r_list_length ( neigh ) > 0 )		79908	1					
ANR	80305	Condition	r_list_length ( neigh ) > 0	2636:6:66431:66455	79908	0	True				
ANR	80306	RelationalExpression	r_list_length ( neigh ) > 0		79908	0		>			
ANR	80307	CallExpression	r_list_length ( neigh )		79908	0					
ANR	80308	Callee	r_list_length		79908	0					
ANR	80309	Identifier	r_list_length		79908	0					
ANR	80310	ArgumentList	neigh		79908	1					
ANR	80311	Argument	neigh		79908	0					
ANR	80312	Identifier	neigh		79908	0					
ANR	80313	PrimaryExpression	0		79908	1					
ANR	80314	CompoundStatement		70:33:1376:1376	79908	1					
ANR	80315	ExpressionStatement	g -> y --	2637:3:66463:66469	79908	0	True				
ANR	80316	PostIncDecOperationExpression	g -> y --		79908	0					
ANR	80317	PtrMemberAccess	g -> y		79908	0					
ANR	80318	Identifier	g		79908	0					
ANR	80319	Identifier	y		79908	1					
ANR	80320	IncDec	--		79908	1					
ANR	80321	ExpressionStatement	max_y ++	2638:3:66474:66481	79908	1	True				
ANR	80322	PostIncDecOperationExpression	max_y ++		79908	0					
ANR	80323	Identifier	max_y		79908	0					
ANR	80324	IncDec	++		79908	1					
ANR	80325	IfStatement	if ( max_gn )		79908	2					
ANR	80326	Condition	max_gn	2640:6:66493:66498	79908	0	True				
ANR	80327	Identifier	max_gn		79908	0					
ANR	80328	CompoundStatement		75:3:1424:1493	79908	1					
ANR	80329	IdentifierDeclStatement	"const RList * neigh = r_graph_get_neighbours ( g -> graph , min_gn -> gnode ) ;"	2641:3:66506:66575	79908	0	True				
ANR	80330	IdentifierDecl	"* neigh = r_graph_get_neighbours ( g -> graph , min_gn -> gnode )"		79908	0					
ANR	80331	IdentifierDeclType	const RList *		79908	0					
ANR	80332	Identifier	neigh		79908	1					
ANR	80333	AssignmentExpression	"* neigh = r_graph_get_neighbours ( g -> graph , min_gn -> gnode )"		79908	2		=			
ANR	80334	Identifier	neigh		79908	0					
ANR	80335	CallExpression	"r_graph_get_neighbours ( g -> graph , min_gn -> gnode )"		79908	1					
ANR	80336	Callee	r_graph_get_neighbours		79908	0					
ANR	80337	Identifier	r_graph_get_neighbours		79908	0					
ANR	80338	ArgumentList	g -> graph		79908	1					
ANR	80339	Argument	g -> graph		79908	0					
ANR	80340	PtrMemberAccess	g -> graph		79908	0					
ANR	80341	Identifier	g		79908	0					
ANR	80342	Identifier	graph		79908	1					
ANR	80343	Argument	min_gn -> gnode		79908	1					
ANR	80344	PtrMemberAccess	min_gn -> gnode		79908	0					
ANR	80345	Identifier	min_gn		79908	0					
ANR	80346	Identifier	gnode		79908	1					
ANR	80347	IfStatement	if ( r_list_length ( neigh ) > 0 )		79908	1					
ANR	80348	Condition	r_list_length ( neigh ) > 0	2642:7:66584:66608	79908	0	True				
ANR	80349	RelationalExpression	r_list_length ( neigh ) > 0		79908	0		>			
ANR	80350	CallExpression	r_list_length ( neigh )		79908	0					
ANR	80351	Callee	r_list_length		79908	0					
ANR	80352	Identifier	r_list_length		79908	0					
ANR	80353	ArgumentList	neigh		79908	1					
ANR	80354	Argument	neigh		79908	0					
ANR	80355	Identifier	neigh		79908	0					
ANR	80356	PrimaryExpression	0		79908	1					
ANR	80357	CompoundStatement		76:34:1529:1529	79908	1					
ANR	80358	ExpressionStatement	max_y ++	2643:4:66617:66624	79908	0	True				
ANR	80359	PostIncDecOperationExpression	max_y ++		79908	0					
ANR	80360	Identifier	max_y		79908	0					
ANR	80361	IncDec	++		79908	1					
ANR	80362	IfStatement	if ( g -> x != INT_MAX && g -> y != INT_MAX )		79908	38					
ANR	80363	Condition	g -> x != INT_MAX && g -> y != INT_MAX	2648:5:66644:66677	79908	0	True				
ANR	80364	AndExpression	g -> x != INT_MAX && g -> y != INT_MAX		79908	0		&&			
ANR	80365	EqualityExpression	g -> x != INT_MAX		79908	0		!=			
ANR	80366	PtrMemberAccess	g -> x		79908	0					
ANR	80367	Identifier	g		79908	0					
ANR	80368	Identifier	x		79908	1					
ANR	80369	Identifier	INT_MAX		79908	1					
ANR	80370	EqualityExpression	g -> y != INT_MAX		79908	1		!=			
ANR	80371	PtrMemberAccess	g -> y		79908	0					
ANR	80372	Identifier	g		79908	0					
ANR	80373	Identifier	y		79908	1					
ANR	80374	Identifier	INT_MAX		79908	1					
ANR	80375	CompoundStatement		82:41:1598:1598	79908	1					
ANR	80376	ExpressionStatement	g -> w = max_x - g -> x	2649:2:66684:66703	79908	0	True				
ANR	80377	AssignmentExpression	g -> w = max_x - g -> x		79908	0		=			
ANR	80378	PtrMemberAccess	g -> w		79908	0					
ANR	80379	Identifier	g		79908	0					
ANR	80380	Identifier	w		79908	1					
ANR	80381	AdditiveExpression	max_x - g -> x		79908	1		-			
ANR	80382	Identifier	max_x		79908	0					
ANR	80383	PtrMemberAccess	g -> x		79908	1					
ANR	80384	Identifier	g		79908	0					
ANR	80385	Identifier	x		79908	1					
ANR	80386	IfStatement	if ( g -> title )		79908	1					
ANR	80387	Condition	g -> title	2650:6:66711:66718	79908	0	True				
ANR	80388	PtrMemberAccess	g -> title		79908	0					
ANR	80389	Identifier	g		79908	0					
ANR	80390	Identifier	title		79908	1					
ANR	80391	CompoundStatement		85:3:1644:1674	79908	1					
ANR	80392	IdentifierDeclStatement	size_t len = strlen ( g -> title ) ;	2651:3:66726:66756	79908	0	True				
ANR	80393	IdentifierDecl	len = strlen ( g -> title )		79908	0					
ANR	80394	IdentifierDeclType	size_t		79908	0					
ANR	80395	Identifier	len		79908	1					
ANR	80396	AssignmentExpression	len = strlen ( g -> title )		79908	2		=			
ANR	80397	Identifier	len		79908	0					
ANR	80398	CallExpression	strlen ( g -> title )		79908	1					
ANR	80399	Callee	strlen		79908	0					
ANR	80400	Identifier	strlen		79908	0					
ANR	80401	ArgumentList	g -> title		79908	1					
ANR	80402	Argument	g -> title		79908	0					
ANR	80403	PtrMemberAccess	g -> title		79908	0					
ANR	80404	Identifier	g		79908	0					
ANR	80405	Identifier	title		79908	1					
ANR	80406	IfStatement	if ( len > INT_MAX )		79908	1					
ANR	80407	Condition	len > INT_MAX	2652:7:66765:66777	79908	0	True				
ANR	80408	RelationalExpression	len > INT_MAX		79908	0		>			
ANR	80409	Identifier	len		79908	0					
ANR	80410	Identifier	INT_MAX		79908	1					
ANR	80411	CompoundStatement		86:22:1698:1698	79908	1					
ANR	80412	ExpressionStatement	g -> w = INT_MAX	2653:4:66786:66800	79908	0	True				
ANR	80413	AssignmentExpression	g -> w = INT_MAX		79908	0		=			
ANR	80414	PtrMemberAccess	g -> w		79908	0					
ANR	80415	Identifier	g		79908	0					
ANR	80416	Identifier	w		79908	1					
ANR	80417	Identifier	INT_MAX		79908	1					
ANR	80418	IfStatement	if ( ( int ) len > g -> w )		79908	2					
ANR	80419	Condition	( int ) len > g -> w	2655:7:66814:66829	79908	0	True				
ANR	80420	RelationalExpression	( int ) len > g -> w		79908	0		>			
ANR	80421	CastExpression	( int ) len		79908	0					
ANR	80422	CastTarget	int		79908	0					
ANR	80423	Identifier	len		79908	1					
ANR	80424	PtrMemberAccess	g -> w		79908	1					
ANR	80425	Identifier	g		79908	0					
ANR	80426	Identifier	w		79908	1					
ANR	80427	CompoundStatement		89:25:1750:1750	79908	1					
ANR	80428	ExpressionStatement	g -> w = len	2656:4:66838:66848	79908	0	True				
ANR	80429	AssignmentExpression	g -> w = len		79908	0		=			
ANR	80430	PtrMemberAccess	g -> w		79908	0					
ANR	80431	Identifier	g		79908	0					
ANR	80432	Identifier	w		79908	1					
ANR	80433	Identifier	len		79908	1					
ANR	80434	ExpressionStatement	g -> h = max_y - g -> y	2659:2:66861:66880	79908	2	True				
ANR	80435	AssignmentExpression	g -> h = max_y - g -> y		79908	0		=			
ANR	80436	PtrMemberAccess	g -> h		79908	0					
ANR	80437	Identifier	g		79908	0					
ANR	80438	Identifier	h		79908	1					
ANR	80439	AdditiveExpression	max_y - g -> y		79908	1		-			
ANR	80440	Identifier	max_y		79908	0					
ANR	80441	PtrMemberAccess	g -> y		79908	1					
ANR	80442	Identifier	g		79908	0					
ANR	80443	Identifier	y		79908	1					
ANR	80444	ElseStatement	else		79908	0					
ANR	80445	CompoundStatement		94:8:1808:1808	79908	0					
ANR	80446	ExpressionStatement	g -> x = g -> y = 0	2661:2:66894:66909	79908	0	True				
ANR	80447	AssignmentExpression	g -> x = g -> y = 0		79908	0		=			
ANR	80448	PtrMemberAccess	g -> x		79908	0					
ANR	80449	Identifier	g		79908	0					
ANR	80450	Identifier	x		79908	1					
ANR	80451	AssignmentExpression	g -> y = 0		79908	1		=			
ANR	80452	PtrMemberAccess	g -> y		79908	0					
ANR	80453	Identifier	g		79908	0					
ANR	80454	Identifier	y		79908	1					
ANR	80455	PrimaryExpression	0		79908	1					
ANR	80456	ExpressionStatement	g -> w = g -> h = 0	2662:2:66913:66928	79908	1	True				
ANR	80457	AssignmentExpression	g -> w = g -> h = 0		79908	0		=			
ANR	80458	PtrMemberAccess	g -> w		79908	0					
ANR	80459	Identifier	g		79908	0					
ANR	80460	Identifier	w		79908	1					
ANR	80461	AssignmentExpression	g -> h = 0		79908	1		=			
ANR	80462	PtrMemberAccess	g -> h		79908	0					
ANR	80463	Identifier	g		79908	0					
ANR	80464	Identifier	h		79908	1					
ANR	80465	PrimaryExpression	0		79908	1					
ANR	80466	ExpressionStatement	"sdb_num_set ( g -> db , ""agraph.w"" , g -> w , 0 )"	2665:1:66935:66975	79908	39	True				
ANR	80467	CallExpression	"sdb_num_set ( g -> db , ""agraph.w"" , g -> w , 0 )"		79908	0					
ANR	80468	Callee	sdb_num_set		79908	0					
ANR	80469	Identifier	sdb_num_set		79908	0					
ANR	80470	ArgumentList	g -> db		79908	1					
ANR	80471	Argument	g -> db		79908	0					
ANR	80472	PtrMemberAccess	g -> db		79908	0					
ANR	80473	Identifier	g		79908	0					
ANR	80474	Identifier	db		79908	1					
ANR	80475	Argument	"""agraph.w"""		79908	1					
ANR	80476	PrimaryExpression	"""agraph.w"""		79908	0					
ANR	80477	Argument	g -> w		79908	2					
ANR	80478	PtrMemberAccess	g -> w		79908	0					
ANR	80479	Identifier	g		79908	0					
ANR	80480	Identifier	w		79908	1					
ANR	80481	Argument	0		79908	3					
ANR	80482	PrimaryExpression	0		79908	0					
ANR	80483	ExpressionStatement	"sdb_num_set ( g -> db , ""agraph.h"" , g -> h , 0 )"	2666:1:66978:67018	79908	40	True				
ANR	80484	CallExpression	"sdb_num_set ( g -> db , ""agraph.h"" , g -> h , 0 )"		79908	0					
ANR	80485	Callee	sdb_num_set		79908	0					
ANR	80486	Identifier	sdb_num_set		79908	0					
ANR	80487	ArgumentList	g -> db		79908	1					
ANR	80488	Argument	g -> db		79908	0					
ANR	80489	PtrMemberAccess	g -> db		79908	0					
ANR	80490	Identifier	g		79908	0					
ANR	80491	Identifier	db		79908	1					
ANR	80492	Argument	"""agraph.h"""		79908	1					
ANR	80493	PrimaryExpression	"""agraph.h"""		79908	0					
ANR	80494	Argument	g -> h		79908	2					
ANR	80495	PtrMemberAccess	g -> h		79908	0					
ANR	80496	Identifier	g		79908	0					
ANR	80497	Identifier	h		79908	1					
ANR	80498	Argument	0		79908	3					
ANR	80499	PrimaryExpression	0		79908	0					
ANR	80500	ExpressionStatement	delta_x = g -> x < 0 ? - g -> x : 0	2669:1:67138:67166	79908	41	True				
ANR	80501	AssignmentExpression	delta_x = g -> x < 0 ? - g -> x : 0		79908	0		=			
ANR	80502	Identifier	delta_x		79908	0					
ANR	80503	ConditionalExpression	g -> x < 0 ? - g -> x : 0		79908	1					
ANR	80504	Condition	g -> x < 0		79908	0					
ANR	80505	RelationalExpression	g -> x < 0		79908	0		<			
ANR	80506	PtrMemberAccess	g -> x		79908	0					
ANR	80507	Identifier	g		79908	0					
ANR	80508	Identifier	x		79908	1					
ANR	80509	PrimaryExpression	0		79908	1					
ANR	80510	UnaryOperationExpression	- g -> x		79908	1					
ANR	80511	UnaryOperator	-		79908	0					
ANR	80512	PtrMemberAccess	g -> x		79908	1					
ANR	80513	Identifier	g		79908	0					
ANR	80514	Identifier	x		79908	1					
ANR	80515	PrimaryExpression	0		79908	2					
ANR	80516	ExpressionStatement	delta_y = g -> y < 0 ? - g -> y : 0	2670:1:67169:67197	79908	42	True				
ANR	80517	AssignmentExpression	delta_y = g -> y < 0 ? - g -> y : 0		79908	0		=			
ANR	80518	Identifier	delta_y		79908	0					
ANR	80519	ConditionalExpression	g -> y < 0 ? - g -> y : 0		79908	1					
ANR	80520	Condition	g -> y < 0		79908	0					
ANR	80521	RelationalExpression	g -> y < 0		79908	0		<			
ANR	80522	PtrMemberAccess	g -> y		79908	0					
ANR	80523	Identifier	g		79908	0					
ANR	80524	Identifier	y		79908	1					
ANR	80525	PrimaryExpression	0		79908	1					
ANR	80526	UnaryOperationExpression	- g -> y		79908	1					
ANR	80527	UnaryOperator	-		79908	0					
ANR	80528	PtrMemberAccess	g -> y		79908	1					
ANR	80529	Identifier	g		79908	0					
ANR	80530	Identifier	y		79908	1					
ANR	80531	PrimaryExpression	0		79908	2					
ANR	80532	ExpressionStatement	"sdb_num_set ( g -> db , ""agraph.delta_x"" , delta_x , 0 )"	2671:1:67200:67249	79908	43	True				
ANR	80533	CallExpression	"sdb_num_set ( g -> db , ""agraph.delta_x"" , delta_x , 0 )"		79908	0					
ANR	80534	Callee	sdb_num_set		79908	0					
ANR	80535	Identifier	sdb_num_set		79908	0					
ANR	80536	ArgumentList	g -> db		79908	1					
ANR	80537	Argument	g -> db		79908	0					
ANR	80538	PtrMemberAccess	g -> db		79908	0					
ANR	80539	Identifier	g		79908	0					
ANR	80540	Identifier	db		79908	1					
ANR	80541	Argument	"""agraph.delta_x"""		79908	1					
ANR	80542	PrimaryExpression	"""agraph.delta_x"""		79908	0					
ANR	80543	Argument	delta_x		79908	2					
ANR	80544	Identifier	delta_x		79908	0					
ANR	80545	Argument	0		79908	3					
ANR	80546	PrimaryExpression	0		79908	0					
ANR	80547	ExpressionStatement	"sdb_num_set ( g -> db , ""agraph.delta_y"" , delta_y , 0 )"	2672:1:67252:67301	79908	44	True				
ANR	80548	CallExpression	"sdb_num_set ( g -> db , ""agraph.delta_y"" , delta_y , 0 )"		79908	0					
ANR	80549	Callee	sdb_num_set		79908	0					
ANR	80550	Identifier	sdb_num_set		79908	0					
ANR	80551	ArgumentList	g -> db		79908	1					
ANR	80552	Argument	g -> db		79908	0					
ANR	80553	PtrMemberAccess	g -> db		79908	0					
ANR	80554	Identifier	g		79908	0					
ANR	80555	Identifier	db		79908	1					
ANR	80556	Argument	"""agraph.delta_y"""		79908	1					
ANR	80557	PrimaryExpression	"""agraph.delta_y"""		79908	0					
ANR	80558	Argument	delta_y		79908	2					
ANR	80559	Identifier	delta_y		79908	0					
ANR	80560	Argument	0		79908	3					
ANR	80561	PrimaryExpression	0		79908	0					
ANR	80562	ReturnType	static void		79908	1					
ANR	80563	Identifier	update_graph_sizes		79908	2					
ANR	80564	ParameterList	RAGraph * g		79908	3					
ANR	80565	Parameter	RAGraph * g	2567:31:65069:65078	79908	0	True				
ANR	80566	ParameterType	RAGraph *		79908	0					
ANR	80567	Identifier	g		79908	1					
ANR	80568	CFGEntryNode	ENTRY		79908		True				
ANR	80569	CFGExitNode	EXIT		79908		True				
ANR	80570	CFGErrorNode	ERROR		79908		True				
ANR	80571	Symbol	vv		79908						
ANR	80572	Symbol	delta_x		79908						
ANR	80573	Symbol	delta_y		79908						
ANR	80574	Symbol	ak -> h		79908						
ANR	80575	Symbol	r_graph_get_neighbours		79908						
ANR	80576	Symbol	g -> db		79908						
ANR	80577	Symbol	g -> h		79908						
ANR	80578	Symbol	INT_MIN		79908						
ANR	80579	Symbol	neigh		79908						
ANR	80580	Symbol	min_gn		79908						
ANR	80581	Symbol	r_graph_innodes		79908						
ANR	80582	Symbol	strlen		79908						
ANR	80583	Symbol	r_cons_is_breaked		79908						
ANR	80584	Symbol	len		79908						
ANR	80585	Symbol	ak -> x		79908						
ANR	80586	Symbol	g -> graph		79908						
ANR	80587	Symbol	ak -> w		79908						
ANR	80588	Symbol	INT_MAX		79908						
ANR	80589	Symbol	* min_gn		79908						
ANR	80590	Symbol	g -> title		79908						
ANR	80591	Symbol	NULL		79908						
ANR	80592	Symbol	gk		79908						
ANR	80593	Symbol	e		79908						
ANR	80594	Symbol	g		79908						
ANR	80595	Symbol	min_gn -> gnode		79908						
ANR	80596	Symbol	kt		79908						
ANR	80597	Symbol	ak		79908						
ANR	80598	Symbol	it		79908						
ANR	80599	Symbol	ak -> y		79908						
ANR	80600	Symbol	max_gn		79908						
ANR	80601	Symbol	max_x		79908						
ANR	80602	Symbol	* g		79908						
ANR	80603	Symbol	max_y		79908						
ANR	80604	Symbol	* ak		79908						
ANR	80605	Symbol	nd		79908						
ANR	80606	Symbol	v		79908						
ANR	80607	Symbol	g -> y		79908						
ANR	80608	Symbol	g -> x		79908						
ANR	80609	Symbol	g -> w		79908						
ANR	80610	Symbol	r_list_length		79908						
ANR	80611	Function	r_agraph_set_curnode	2675:0:67306:67571							
ANR	80612	FunctionDef	"r_agraph_set_curnode (RAGraph * g , RANode * a)"		80611	0					
ANR	80613	CompoundStatement		2675:55:67361:67571	80611	0					
ANR	80614	IfStatement	if ( ! a )		80611	0					
ANR	80615	Condition	! a	2676:5:67368:67369	80611	0	True				
ANR	80616	UnaryOperationExpression	! a		80611	0					
ANR	80617	UnaryOperator	!		80611	0					
ANR	80618	Identifier	a		80611	1					
ANR	80619	CompoundStatement		2:9:10:10	80611	1					
ANR	80620	ReturnStatement	return ;	2677:2:67376:67382	80611	0	True				
ANR	80621	ExpressionStatement	g -> curnode = a -> gnode	2679:1:67388:67409	80611	1	True				
ANR	80622	AssignmentExpression	g -> curnode = a -> gnode		80611	0		=			
ANR	80623	PtrMemberAccess	g -> curnode		80611	0					
ANR	80624	Identifier	g		80611	0					
ANR	80625	Identifier	curnode		80611	1					
ANR	80626	PtrMemberAccess	a -> gnode		80611	1					
ANR	80627	Identifier	a		80611	0					
ANR	80628	Identifier	gnode		80611	1					
ANR	80629	IfStatement	if ( a -> title )		80611	2					
ANR	80630	Condition	a -> title	2680:5:67416:67423	80611	0	True				
ANR	80631	PtrMemberAccess	a -> title		80611	0					
ANR	80632	Identifier	a		80611	0					
ANR	80633	Identifier	title		80611	1					
ANR	80634	CompoundStatement		6:15:64:64	80611	1					
ANR	80635	ExpressionStatement	"sdb_set ( g -> db , ""agraph.curnode"" , a -> title , 0 )"	2681:2:67430:67476	80611	0	True				
ANR	80636	CallExpression	"sdb_set ( g -> db , ""agraph.curnode"" , a -> title , 0 )"		80611	0					
ANR	80637	Callee	sdb_set		80611	0					
ANR	80638	Identifier	sdb_set		80611	0					
ANR	80639	ArgumentList	g -> db		80611	1					
ANR	80640	Argument	g -> db		80611	0					
ANR	80641	PtrMemberAccess	g -> db		80611	0					
ANR	80642	Identifier	g		80611	0					
ANR	80643	Identifier	db		80611	1					
ANR	80644	Argument	"""agraph.curnode"""		80611	1					
ANR	80645	PrimaryExpression	"""agraph.curnode"""		80611	0					
ANR	80646	Argument	a -> title		80611	2					
ANR	80647	PtrMemberAccess	a -> title		80611	0					
ANR	80648	Identifier	a		80611	0					
ANR	80649	Identifier	title		80611	1					
ANR	80650	Argument	0		80611	3					
ANR	80651	PrimaryExpression	0		80611	0					
ANR	80652	IfStatement	if ( g -> on_curnode_change )		80611	1					
ANR	80653	Condition	g -> on_curnode_change	2682:6:67484:67503	80611	0	True				
ANR	80654	PtrMemberAccess	g -> on_curnode_change		80611	0					
ANR	80655	Identifier	g		80611	0					
ANR	80656	Identifier	on_curnode_change		80611	1					
ANR	80657	CompoundStatement		8:28:144:144	80611	1					
ANR	80658	ExpressionStatement	"g -> on_curnode_change ( a , g -> on_curnode_change_data )"	2683:3:67511:67562	80611	0	True				
ANR	80659	CallExpression	"g -> on_curnode_change ( a , g -> on_curnode_change_data )"		80611	0					
ANR	80660	Callee	g -> on_curnode_change		80611	0					
ANR	80661	PtrMemberAccess	g -> on_curnode_change		80611	0					
ANR	80662	Identifier	g		80611	0					
ANR	80663	Identifier	on_curnode_change		80611	1					
ANR	80664	ArgumentList	a		80611	1					
ANR	80665	Argument	a		80611	0					
ANR	80666	Identifier	a		80611	0					
ANR	80667	Argument	g -> on_curnode_change_data		80611	1					
ANR	80668	PtrMemberAccess	g -> on_curnode_change_data		80611	0					
ANR	80669	Identifier	g		80611	0					
ANR	80670	Identifier	on_curnode_change_data		80611	1					
ANR	80671	ReturnType	R_API void		80611	1					
ANR	80672	Identifier	r_agraph_set_curnode		80611	2					
ANR	80673	ParameterList	"RAGraph * g , RANode * a"		80611	3					
ANR	80674	Parameter	RAGraph * g	2675:32:67338:67347	80611	0	True				
ANR	80675	ParameterType	RAGraph *		80611	0					
ANR	80676	Identifier	g		80611	1					
ANR	80677	Parameter	RANode * a	2675:44:67350:67358	80611	1	True				
ANR	80678	ParameterType	RANode *		80611	0					
ANR	80679	Identifier	a		80611	1					
ANR	80680	CFGEntryNode	ENTRY		80611		True				
ANR	80681	CFGExitNode	EXIT		80611		True				
ANR	80682	Symbol	a -> title		80611						
ANR	80683	Symbol	a		80611						
ANR	80684	Symbol	* g		80611						
ANR	80685	Symbol	g		80611						
ANR	80686	Symbol	g -> curnode		80611						
ANR	80687	Symbol	g -> db		80611						
ANR	80688	Symbol	a -> gnode		80611						
ANR	80689	Symbol	* a		80611						
ANR	80690	Symbol	g -> on_curnode_change_data		80611						
ANR	80691	Symbol	g -> on_curnode_change		80611						
ANR	80692	Function	rebase	2688:0:67574:67646							
ANR	80693	FunctionDef	"rebase (RAGraph * g , int v)"		80692	0					
ANR	80694	CompoundStatement		2688:38:67612:67646	80692	0					
ANR	80695	ReturnStatement	return g -> x < 0 ? - g -> x + v : v ;	2689:1:67615:67644	80692	0	True				
ANR	80696	ConditionalExpression	g -> x < 0 ? - g -> x + v : v		80692	0					
ANR	80697	Condition	g -> x < 0		80692	0					
ANR	80698	RelationalExpression	g -> x < 0		80692	0		<			
ANR	80699	PtrMemberAccess	g -> x		80692	0					
ANR	80700	Identifier	g		80692	0					
ANR	80701	Identifier	x		80692	1					
ANR	80702	PrimaryExpression	0		80692	1					
ANR	80703	AdditiveExpression	- g -> x + v		80692	1		+			
ANR	80704	UnaryOperationExpression	- g -> x		80692	0					
ANR	80705	UnaryOperator	-		80692	0					
ANR	80706	PtrMemberAccess	g -> x		80692	1					
ANR	80707	Identifier	g		80692	0					
ANR	80708	Identifier	x		80692	1					
ANR	80709	Identifier	v		80692	1					
ANR	80710	Identifier	v		80692	2					
ANR	80711	ReturnType	static ut64		80692	1					
ANR	80712	Identifier	rebase		80692	2					
ANR	80713	ParameterList	"RAGraph * g , int v"		80692	3					
ANR	80714	Parameter	RAGraph * g	2688:19:67593:67602	80692	0	True				
ANR	80715	ParameterType	RAGraph *		80692	0					
ANR	80716	Identifier	g		80692	1					
ANR	80717	Parameter	int v	2688:31:67605:67609	80692	1	True				
ANR	80718	ParameterType	int		80692	0					
ANR	80719	Identifier	v		80692	1					
ANR	80720	CFGEntryNode	ENTRY		80692		True				
ANR	80721	CFGExitNode	EXIT		80692		True				
ANR	80722	Symbol	* g		80692						
ANR	80723	Symbol	v		80692						
ANR	80724	Symbol	g		80692						
ANR	80725	Symbol	g -> x		80692						
ANR	80726	Function	agraph_set_layout	2692:0:67649:68255							
ANR	80727	FunctionDef	agraph_set_layout (RAGraph * g)		80726	0					
ANR	80728	CompoundStatement		2692:42:67691:68255	80726	0					
ANR	80729	IdentifierDeclStatement	RListIter * it ;	2693:1:67694:67707	80726	0	True				
ANR	80730	IdentifierDecl	* it		80726	0					
ANR	80731	IdentifierDeclType	RListIter *		80726	0					
ANR	80732	Identifier	it		80726	1					
ANR	80733	IdentifierDeclStatement	RGraphNode * n ;	2694:1:67710:67723	80726	1	True				
ANR	80734	IdentifierDecl	* n		80726	0					
ANR	80735	IdentifierDeclType	RGraphNode *		80726	0					
ANR	80736	Identifier	n		80726	1					
ANR	80737	IdentifierDeclStatement	RANode * a ;	2695:1:67726:67735	80726	2	True				
ANR	80738	IdentifierDecl	* a		80726	0					
ANR	80739	IdentifierDeclType	RANode *		80726	0					
ANR	80740	Identifier	a		80726	1					
ANR	80741	ExpressionStatement	set_layout ( g )	2697:1:67739:67753	80726	3	True				
ANR	80742	CallExpression	set_layout ( g )		80726	0					
ANR	80743	Callee	set_layout		80726	0					
ANR	80744	Identifier	set_layout		80726	0					
ANR	80745	ArgumentList	g		80726	1					
ANR	80746	Argument	g		80726	0					
ANR	80747	Identifier	g		80726	0					
ANR	80748	ExpressionStatement	update_graph_sizes ( g )	2699:1:67757:67779	80726	4	True				
ANR	80749	CallExpression	update_graph_sizes ( g )		80726	0					
ANR	80750	Callee	update_graph_sizes		80726	0					
ANR	80751	Identifier	update_graph_sizes		80726	0					
ANR	80752	ArgumentList	g		80726	1					
ANR	80753	Argument	g		80726	0					
ANR	80754	Identifier	g		80726	0					
ANR	80755	Statement	graph_foreach_anode	2700:1:67782:67800	80726	5	True				
ANR	80756	Statement	(	2700:21:67802:67802	80726	6	True				
ANR	80757	Statement	r_graph_get_nodes	2700:22:67803:67819	80726	7	True				
ANR	80758	Statement	(	2700:40:67821:67821	80726	8	True				
ANR	80759	Statement	g	2700:41:67822:67822	80726	9	True				
ANR	80760	Statement	->	2700:42:67823:67824	80726	10	True				
ANR	80761	Statement	graph	2700:44:67825:67829	80726	11	True				
ANR	80762	Statement	)	2700:49:67830:67830	80726	12	True				
ANR	80763	Statement	","	2700:50:67831:67831	80726	13	True				
ANR	80764	Statement	it	2700:52:67833:67834	80726	14	True				
ANR	80765	Statement	","	2700:54:67835:67835	80726	15	True				
ANR	80766	Statement	n	2700:56:67837:67837	80726	16	True				
ANR	80767	Statement	","	2700:57:67838:67838	80726	17	True				
ANR	80768	Statement	a	2700:59:67840:67840	80726	18	True				
ANR	80769	Statement	)	2700:60:67841:67841	80726	19	True				
ANR	80770	CompoundStatement		13:2:193:206	80726	20					
ANR	80771	IfStatement	if ( a -> is_dummy )		80726	0					
ANR	80772	Condition	a -> is_dummy	2701:6:67851:67861	80726	0	True				
ANR	80773	PtrMemberAccess	a -> is_dummy		80726	0					
ANR	80774	Identifier	a		80726	0					
ANR	80775	Identifier	is_dummy		80726	1					
ANR	80776	CompoundStatement		10:19:172:172	80726	1					
ANR	80777	ContinueStatement	continue ;	2702:3:67869:67877	80726	0	True				
ANR	80778	IdentifierDeclStatement	const char * k ;	2704:2:67885:67898	80726	1	True				
ANR	80779	IdentifierDecl	* k		80726	0					
ANR	80780	IdentifierDeclType	const char *		80726	0					
ANR	80781	Identifier	k		80726	1					
ANR	80782	ExpressionStatement	"k = sdb_fmt ( ""agraph.nodes.%s.x"" , a -> title )"	2705:2:67902:67945	80726	2	True				
ANR	80783	AssignmentExpression	"k = sdb_fmt ( ""agraph.nodes.%s.x"" , a -> title )"		80726	0		=			
ANR	80784	Identifier	k		80726	0					
ANR	80785	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.x"" , a -> title )"		80726	1					
ANR	80786	Callee	sdb_fmt		80726	0					
ANR	80787	Identifier	sdb_fmt		80726	0					
ANR	80788	ArgumentList	"""agraph.nodes.%s.x"""		80726	1					
ANR	80789	Argument	"""agraph.nodes.%s.x"""		80726	0					
ANR	80790	PrimaryExpression	"""agraph.nodes.%s.x"""		80726	0					
ANR	80791	Argument	a -> title		80726	1					
ANR	80792	PtrMemberAccess	a -> title		80726	0					
ANR	80793	Identifier	a		80726	0					
ANR	80794	Identifier	title		80726	1					
ANR	80795	ExpressionStatement	"sdb_num_set ( g -> db , k , rebase ( g , a -> x ) , 0 )"	2706:2:67949:67992	80726	3	True				
ANR	80796	CallExpression	"sdb_num_set ( g -> db , k , rebase ( g , a -> x ) , 0 )"		80726	0					
ANR	80797	Callee	sdb_num_set		80726	0					
ANR	80798	Identifier	sdb_num_set		80726	0					
ANR	80799	ArgumentList	g -> db		80726	1					
ANR	80800	Argument	g -> db		80726	0					
ANR	80801	PtrMemberAccess	g -> db		80726	0					
ANR	80802	Identifier	g		80726	0					
ANR	80803	Identifier	db		80726	1					
ANR	80804	Argument	k		80726	1					
ANR	80805	Identifier	k		80726	0					
ANR	80806	Argument	"rebase ( g , a -> x )"		80726	2					
ANR	80807	CallExpression	"rebase ( g , a -> x )"		80726	0					
ANR	80808	Callee	rebase		80726	0					
ANR	80809	Identifier	rebase		80726	0					
ANR	80810	ArgumentList	g		80726	1					
ANR	80811	Argument	g		80726	0					
ANR	80812	Identifier	g		80726	0					
ANR	80813	Argument	a -> x		80726	1					
ANR	80814	PtrMemberAccess	a -> x		80726	0					
ANR	80815	Identifier	a		80726	0					
ANR	80816	Identifier	x		80726	1					
ANR	80817	Argument	0		80726	3					
ANR	80818	PrimaryExpression	0		80726	0					
ANR	80819	ExpressionStatement	"k = sdb_fmt ( ""agraph.nodes.%s.y"" , a -> title )"	2707:2:67996:68039	80726	4	True				
ANR	80820	AssignmentExpression	"k = sdb_fmt ( ""agraph.nodes.%s.y"" , a -> title )"		80726	0		=			
ANR	80821	Identifier	k		80726	0					
ANR	80822	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.y"" , a -> title )"		80726	1					
ANR	80823	Callee	sdb_fmt		80726	0					
ANR	80824	Identifier	sdb_fmt		80726	0					
ANR	80825	ArgumentList	"""agraph.nodes.%s.y"""		80726	1					
ANR	80826	Argument	"""agraph.nodes.%s.y"""		80726	0					
ANR	80827	PrimaryExpression	"""agraph.nodes.%s.y"""		80726	0					
ANR	80828	Argument	a -> title		80726	1					
ANR	80829	PtrMemberAccess	a -> title		80726	0					
ANR	80830	Identifier	a		80726	0					
ANR	80831	Identifier	title		80726	1					
ANR	80832	ExpressionStatement	"sdb_num_set ( g -> db , k , rebase ( g , a -> y ) , 0 )"	2708:2:68043:68086	80726	5	True				
ANR	80833	CallExpression	"sdb_num_set ( g -> db , k , rebase ( g , a -> y ) , 0 )"		80726	0					
ANR	80834	Callee	sdb_num_set		80726	0					
ANR	80835	Identifier	sdb_num_set		80726	0					
ANR	80836	ArgumentList	g -> db		80726	1					
ANR	80837	Argument	g -> db		80726	0					
ANR	80838	PtrMemberAccess	g -> db		80726	0					
ANR	80839	Identifier	g		80726	0					
ANR	80840	Identifier	db		80726	1					
ANR	80841	Argument	k		80726	1					
ANR	80842	Identifier	k		80726	0					
ANR	80843	Argument	"rebase ( g , a -> y )"		80726	2					
ANR	80844	CallExpression	"rebase ( g , a -> y )"		80726	0					
ANR	80845	Callee	rebase		80726	0					
ANR	80846	Identifier	rebase		80726	0					
ANR	80847	ArgumentList	g		80726	1					
ANR	80848	Argument	g		80726	0					
ANR	80849	Identifier	g		80726	0					
ANR	80850	Argument	a -> y		80726	1					
ANR	80851	PtrMemberAccess	a -> y		80726	0					
ANR	80852	Identifier	a		80726	0					
ANR	80853	Identifier	y		80726	1					
ANR	80854	Argument	0		80726	3					
ANR	80855	PrimaryExpression	0		80726	0					
ANR	80856	ExpressionStatement	"k = sdb_fmt ( ""agraph.nodes.%s.w"" , a -> title )"	2709:2:68090:68133	80726	6	True				
ANR	80857	AssignmentExpression	"k = sdb_fmt ( ""agraph.nodes.%s.w"" , a -> title )"		80726	0		=			
ANR	80858	Identifier	k		80726	0					
ANR	80859	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.w"" , a -> title )"		80726	1					
ANR	80860	Callee	sdb_fmt		80726	0					
ANR	80861	Identifier	sdb_fmt		80726	0					
ANR	80862	ArgumentList	"""agraph.nodes.%s.w"""		80726	1					
ANR	80863	Argument	"""agraph.nodes.%s.w"""		80726	0					
ANR	80864	PrimaryExpression	"""agraph.nodes.%s.w"""		80726	0					
ANR	80865	Argument	a -> title		80726	1					
ANR	80866	PtrMemberAccess	a -> title		80726	0					
ANR	80867	Identifier	a		80726	0					
ANR	80868	Identifier	title		80726	1					
ANR	80869	ExpressionStatement	"sdb_num_set ( g -> db , k , a -> w , 0 )"	2710:2:68137:68168	80726	7	True				
ANR	80870	CallExpression	"sdb_num_set ( g -> db , k , a -> w , 0 )"		80726	0					
ANR	80871	Callee	sdb_num_set		80726	0					
ANR	80872	Identifier	sdb_num_set		80726	0					
ANR	80873	ArgumentList	g -> db		80726	1					
ANR	80874	Argument	g -> db		80726	0					
ANR	80875	PtrMemberAccess	g -> db		80726	0					
ANR	80876	Identifier	g		80726	0					
ANR	80877	Identifier	db		80726	1					
ANR	80878	Argument	k		80726	1					
ANR	80879	Identifier	k		80726	0					
ANR	80880	Argument	a -> w		80726	2					
ANR	80881	PtrMemberAccess	a -> w		80726	0					
ANR	80882	Identifier	a		80726	0					
ANR	80883	Identifier	w		80726	1					
ANR	80884	Argument	0		80726	3					
ANR	80885	PrimaryExpression	0		80726	0					
ANR	80886	ExpressionStatement	"k = sdb_fmt ( ""agraph.nodes.%s.h"" , a -> title )"	2711:2:68172:68215	80726	8	True				
ANR	80887	AssignmentExpression	"k = sdb_fmt ( ""agraph.nodes.%s.h"" , a -> title )"		80726	0		=			
ANR	80888	Identifier	k		80726	0					
ANR	80889	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.h"" , a -> title )"		80726	1					
ANR	80890	Callee	sdb_fmt		80726	0					
ANR	80891	Identifier	sdb_fmt		80726	0					
ANR	80892	ArgumentList	"""agraph.nodes.%s.h"""		80726	1					
ANR	80893	Argument	"""agraph.nodes.%s.h"""		80726	0					
ANR	80894	PrimaryExpression	"""agraph.nodes.%s.h"""		80726	0					
ANR	80895	Argument	a -> title		80726	1					
ANR	80896	PtrMemberAccess	a -> title		80726	0					
ANR	80897	Identifier	a		80726	0					
ANR	80898	Identifier	title		80726	1					
ANR	80899	ExpressionStatement	"sdb_num_set ( g -> db , k , a -> h , 0 )"	2712:2:68219:68250	80726	9	True				
ANR	80900	CallExpression	"sdb_num_set ( g -> db , k , a -> h , 0 )"		80726	0					
ANR	80901	Callee	sdb_num_set		80726	0					
ANR	80902	Identifier	sdb_num_set		80726	0					
ANR	80903	ArgumentList	g -> db		80726	1					
ANR	80904	Argument	g -> db		80726	0					
ANR	80905	PtrMemberAccess	g -> db		80726	0					
ANR	80906	Identifier	g		80726	0					
ANR	80907	Identifier	db		80726	1					
ANR	80908	Argument	k		80726	1					
ANR	80909	Identifier	k		80726	0					
ANR	80910	Argument	a -> h		80726	2					
ANR	80911	PtrMemberAccess	a -> h		80726	0					
ANR	80912	Identifier	a		80726	0					
ANR	80913	Identifier	h		80726	1					
ANR	80914	Argument	0		80726	3					
ANR	80915	PrimaryExpression	0		80726	0					
ANR	80916	ReturnType	static void		80726	1					
ANR	80917	Identifier	agraph_set_layout		80726	2					
ANR	80918	ParameterList	RAGraph * g		80726	3					
ANR	80919	Parameter	RAGraph * g	2692:30:67679:67688	80726	0	True				
ANR	80920	ParameterType	RAGraph *		80726	0					
ANR	80921	Identifier	g		80726	1					
ANR	80922	CFGEntryNode	ENTRY		80726		True				
ANR	80923	CFGExitNode	EXIT		80726		True				
ANR	80924	CFGErrorNode	ERROR		80726		True				
ANR	80925	Symbol	a -> title		80726						
ANR	80926	Symbol	a		80726						
ANR	80927	Symbol	rebase		80726						
ANR	80928	Symbol	a -> is_dummy		80726						
ANR	80929	Symbol	a -> h		80726						
ANR	80930	Symbol	g		80726						
ANR	80931	Symbol	g -> db		80726						
ANR	80932	Symbol	it		80726						
ANR	80933	Symbol	* a		80726						
ANR	80934	Symbol	k		80726						
ANR	80935	Symbol	n		80726						
ANR	80936	Symbol	* g		80726						
ANR	80937	Symbol	a -> x		80726						
ANR	80938	Symbol	a -> y		80726						
ANR	80939	Symbol	a -> w		80726						
ANR	80940	Symbol	sdb_fmt		80726						
ANR	80941	Function	agraph_update_seek	2717:0:68322:68444							
ANR	80942	FunctionDef	"agraph_update_seek (RAGraph * g , RANode * n , int force)"		80941	0					
ANR	80943	CompoundStatement		2717:65:68387:68444	80941	0					
ANR	80944	ExpressionStatement	g -> update_seek_on = n	2718:1:68390:68411	80941	0	True				
ANR	80945	AssignmentExpression	g -> update_seek_on = n		80941	0		=			
ANR	80946	PtrMemberAccess	g -> update_seek_on		80941	0					
ANR	80947	Identifier	g		80941	0					
ANR	80948	Identifier	update_seek_on		80941	1					
ANR	80949	Identifier	n		80941	1					
ANR	80950	ExpressionStatement	g -> force_update_seek = force	2719:1:68414:68442	80941	1	True				
ANR	80951	AssignmentExpression	g -> force_update_seek = force		80941	0		=			
ANR	80952	PtrMemberAccess	g -> force_update_seek		80941	0					
ANR	80953	Identifier	g		80941	0					
ANR	80954	Identifier	force_update_seek		80941	1					
ANR	80955	Identifier	force		80941	1					
ANR	80956	ReturnType	static void		80941	1					
ANR	80957	Identifier	agraph_update_seek		80941	2					
ANR	80958	ParameterList	"RAGraph * g , RANode * n , int force"		80941	3					
ANR	80959	Parameter	RAGraph * g	2717:31:68353:68362	80941	0	True				
ANR	80960	ParameterType	RAGraph *		80941	0					
ANR	80961	Identifier	g		80941	1					
ANR	80962	Parameter	RANode * n	2717:43:68365:68373	80941	1	True				
ANR	80963	ParameterType	RANode *		80941	0					
ANR	80964	Identifier	n		80941	1					
ANR	80965	Parameter	int force	2717:54:68376:68384	80941	2	True				
ANR	80966	ParameterType	int		80941	0					
ANR	80967	Identifier	force		80941	1					
ANR	80968	CFGEntryNode	ENTRY		80941		True				
ANR	80969	CFGExitNode	EXIT		80941		True				
ANR	80970	Symbol	* g		80941						
ANR	80971	Symbol	g -> force_update_seek		80941						
ANR	80972	Symbol	g		80941						
ANR	80973	Symbol	g -> update_seek_on		80941						
ANR	80974	Symbol	force		80941						
ANR	80975	Symbol	n		80941						
ANR	80976	Function	agraph_print_node	2722:0:68447:68812							
ANR	80977	FunctionDef	"agraph_print_node (const RAGraph * g , RANode * n)"		80976	0					
ANR	80978	CompoundStatement		2722:59:68506:68812	80976	0					
ANR	80979	IfStatement	if ( n -> is_dummy )		80976	0					
ANR	80980	Condition	n -> is_dummy	2723:5:68513:68523	80976	0	True				
ANR	80981	PtrMemberAccess	n -> is_dummy		80976	0					
ANR	80982	Identifier	n		80976	0					
ANR	80983	Identifier	is_dummy		80976	1					
ANR	80984	CompoundStatement		2:18:19:19	80976	1					
ANR	80985	ReturnStatement	return ;	2724:2:68530:68536	80976	0	True				
ANR	80986	IdentifierDeclStatement	const int cur = g -> curnode && get_anode ( g -> curnode ) == n ;	2726:1:68542:68599	80976	1	True				
ANR	80987	IdentifierDecl	cur = g -> curnode && get_anode ( g -> curnode ) == n		80976	0					
ANR	80988	IdentifierDeclType	const int		80976	0					
ANR	80989	Identifier	cur		80976	1					
ANR	80990	AssignmentExpression	cur = g -> curnode && get_anode ( g -> curnode ) == n		80976	2		=			
ANR	80991	Identifier	cur		80976	0					
ANR	80992	AndExpression	g -> curnode && get_anode ( g -> curnode ) == n		80976	1		&&			
ANR	80993	PtrMemberAccess	g -> curnode		80976	0					
ANR	80994	Identifier	g		80976	0					
ANR	80995	Identifier	curnode		80976	1					
ANR	80996	EqualityExpression	get_anode ( g -> curnode ) == n		80976	1		==			
ANR	80997	CallExpression	get_anode ( g -> curnode )		80976	0					
ANR	80998	Callee	get_anode		80976	0					
ANR	80999	Identifier	get_anode		80976	0					
ANR	81000	ArgumentList	g -> curnode		80976	1					
ANR	81001	Argument	g -> curnode		80976	0					
ANR	81002	PtrMemberAccess	g -> curnode		80976	0					
ANR	81003	Identifier	g		80976	0					
ANR	81004	Identifier	curnode		80976	1					
ANR	81005	Identifier	n		80976	1					
ANR	81006	IdentifierDeclStatement	const bool isMini = is_mini ( g ) ;	2727:1:68602:68633	80976	2	True				
ANR	81007	IdentifierDecl	isMini = is_mini ( g )		80976	0					
ANR	81008	IdentifierDeclType	const bool		80976	0					
ANR	81009	Identifier	isMini		80976	1					
ANR	81010	AssignmentExpression	isMini = is_mini ( g )		80976	2		=			
ANR	81011	Identifier	isMini		80976	0					
ANR	81012	CallExpression	is_mini ( g )		80976	1					
ANR	81013	Callee	is_mini		80976	0					
ANR	81014	Identifier	is_mini		80976	0					
ANR	81015	ArgumentList	g		80976	1					
ANR	81016	Argument	g		80976	0					
ANR	81017	Identifier	g		80976	0					
ANR	81018	IfStatement	if ( g -> is_tiny )		80976	3					
ANR	81019	Condition	g -> is_tiny	2728:5:68640:68649	80976	0	True				
ANR	81020	PtrMemberAccess	g -> is_tiny		80976	0					
ANR	81021	Identifier	g		80976	0					
ANR	81022	Identifier	is_tiny		80976	1					
ANR	81023	CompoundStatement		7:17:145:145	80976	1					
ANR	81024	ExpressionStatement	"tiny_RANode_print ( g , n , cur )"	2729:2:68656:68685	80976	0	True				
ANR	81025	CallExpression	"tiny_RANode_print ( g , n , cur )"		80976	0					
ANR	81026	Callee	tiny_RANode_print		80976	0					
ANR	81027	Identifier	tiny_RANode_print		80976	0					
ANR	81028	ArgumentList	g		80976	1					
ANR	81029	Argument	g		80976	0					
ANR	81030	Identifier	g		80976	0					
ANR	81031	Argument	n		80976	1					
ANR	81032	Identifier	n		80976	0					
ANR	81033	Argument	cur		80976	2					
ANR	81034	Identifier	cur		80976	0					
ANR	81035	ElseStatement	else		80976	0					
ANR	81036	IfStatement	if ( isMini || n -> is_mini )		80976	0					
ANR	81037	Condition	isMini || n -> is_mini	2730:12:68699:68718	80976	0	True				
ANR	81038	OrExpression	isMini || n -> is_mini		80976	0		||			
ANR	81039	Identifier	isMini		80976	0					
ANR	81040	PtrMemberAccess	n -> is_mini		80976	1					
ANR	81041	Identifier	n		80976	0					
ANR	81042	Identifier	is_mini		80976	1					
ANR	81043	CompoundStatement		9:34:214:214	80976	1					
ANR	81044	ExpressionStatement	"mini_RANode_print ( g , n , cur , isMini )"	2731:2:68725:68762	80976	0	True				
ANR	81045	CallExpression	"mini_RANode_print ( g , n , cur , isMini )"		80976	0					
ANR	81046	Callee	mini_RANode_print		80976	0					
ANR	81047	Identifier	mini_RANode_print		80976	0					
ANR	81048	ArgumentList	g		80976	1					
ANR	81049	Argument	g		80976	0					
ANR	81050	Identifier	g		80976	0					
ANR	81051	Argument	n		80976	1					
ANR	81052	Identifier	n		80976	0					
ANR	81053	Argument	cur		80976	2					
ANR	81054	Identifier	cur		80976	0					
ANR	81055	Argument	isMini		80976	3					
ANR	81056	Identifier	isMini		80976	0					
ANR	81057	ElseStatement	else		80976	0					
ANR	81058	CompoundStatement		11:8:265:265	80976	0					
ANR	81059	ExpressionStatement	"normal_RANode_print ( g , n , cur )"	2733:2:68776:68807	80976	0	True				
ANR	81060	CallExpression	"normal_RANode_print ( g , n , cur )"		80976	0					
ANR	81061	Callee	normal_RANode_print		80976	0					
ANR	81062	Identifier	normal_RANode_print		80976	0					
ANR	81063	ArgumentList	g		80976	1					
ANR	81064	Argument	g		80976	0					
ANR	81065	Identifier	g		80976	0					
ANR	81066	Argument	n		80976	1					
ANR	81067	Identifier	n		80976	0					
ANR	81068	Argument	cur		80976	2					
ANR	81069	Identifier	cur		80976	0					
ANR	81070	ReturnType	static void		80976	1					
ANR	81071	Identifier	agraph_print_node		80976	2					
ANR	81072	ParameterList	"const RAGraph * g , RANode * n"		80976	3					
ANR	81073	Parameter	const RAGraph * g	2722:30:68477:68492	80976	0	True				
ANR	81074	ParameterType	const RAGraph *		80976	0					
ANR	81075	Identifier	g		80976	1					
ANR	81076	Parameter	RANode * n	2722:48:68495:68503	80976	1	True				
ANR	81077	ParameterType	RANode *		80976	0					
ANR	81078	Identifier	n		80976	1					
ANR	81079	CFGEntryNode	ENTRY		80976		True				
ANR	81080	CFGExitNode	EXIT		80976		True				
ANR	81081	Symbol	* g		80976						
ANR	81082	Symbol	cur		80976						
ANR	81083	Symbol	g -> is_tiny		80976						
ANR	81084	Symbol	get_anode		80976						
ANR	81085	Symbol	is_mini		80976						
ANR	81086	Symbol	g		80976						
ANR	81087	Symbol	g -> curnode		80976						
ANR	81088	Symbol	isMini		80976						
ANR	81089	Symbol	n -> is_dummy		80976						
ANR	81090	Symbol	* n		80976						
ANR	81091	Symbol	n -> is_mini		80976						
ANR	81092	Symbol	n		80976						
ANR	81093	Function	agraph_print_nodes	2737:0:68815:69194							
ANR	81094	FunctionDef	agraph_print_nodes (const RAGraph * g)		81093	0					
ANR	81095	CompoundStatement		2737:49:68864:69194	81093	0					
ANR	81096	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	2738:1:68867:68916	81093	0	True				
ANR	81097	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		81093	0					
ANR	81098	IdentifierDeclType	const RList *		81093	0					
ANR	81099	Identifier	nodes		81093	1					
ANR	81100	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		81093	2		=			
ANR	81101	Identifier	nodes		81093	0					
ANR	81102	CallExpression	r_graph_get_nodes ( g -> graph )		81093	1					
ANR	81103	Callee	r_graph_get_nodes		81093	0					
ANR	81104	Identifier	r_graph_get_nodes		81093	0					
ANR	81105	ArgumentList	g -> graph		81093	1					
ANR	81106	Argument	g -> graph		81093	0					
ANR	81107	PtrMemberAccess	g -> graph		81093	0					
ANR	81108	Identifier	g		81093	0					
ANR	81109	Identifier	graph		81093	1					
ANR	81110	IdentifierDeclStatement	RGraphNode * gn ;	2739:1:68919:68933	81093	1	True				
ANR	81111	IdentifierDecl	* gn		81093	0					
ANR	81112	IdentifierDeclType	RGraphNode *		81093	0					
ANR	81113	Identifier	gn		81093	1					
ANR	81114	IdentifierDeclStatement	RListIter * it ;	2740:1:68936:68949	81093	2	True				
ANR	81115	IdentifierDecl	* it		81093	0					
ANR	81116	IdentifierDeclType	RListIter *		81093	0					
ANR	81117	Identifier	it		81093	1					
ANR	81118	IdentifierDeclStatement	RANode * n ;	2741:1:68952:68961	81093	3	True				
ANR	81119	IdentifierDecl	* n		81093	0					
ANR	81120	IdentifierDeclType	RANode *		81093	0					
ANR	81121	Identifier	n		81093	1					
ANR	81122	Statement	graph_foreach_anode	2743:1:68965:68983	81093	4	True				
ANR	81123	Statement	(	2743:21:68985:68985	81093	5	True				
ANR	81124	Statement	nodes	2743:22:68986:68990	81093	6	True				
ANR	81125	Statement	","	2743:27:68991:68991	81093	7	True				
ANR	81126	Statement	it	2743:29:68993:68994	81093	8	True				
ANR	81127	Statement	","	2743:31:68995:68995	81093	9	True				
ANR	81128	Statement	gn	2743:33:68997:68998	81093	10	True				
ANR	81129	Statement	","	2743:35:68999:68999	81093	11	True				
ANR	81130	Statement	n	2743:37:69001:69001	81093	12	True				
ANR	81131	Statement	)	2743:38:69002:69002	81093	13	True				
ANR	81132	CompoundStatement		7:40:139:139	81093	14					
ANR	81133	IfStatement	if ( gn != g -> curnode )		81093	0					
ANR	81134	Condition	gn != g -> curnode	2744:6:69012:69027	81093	0	True				
ANR	81135	EqualityExpression	gn != g -> curnode		81093	0		!=			
ANR	81136	Identifier	gn		81093	0					
ANR	81137	PtrMemberAccess	g -> curnode		81093	1					
ANR	81138	Identifier	g		81093	0					
ANR	81139	Identifier	curnode		81093	1					
ANR	81140	CompoundStatement		8:24:165:165	81093	1					
ANR	81141	ExpressionStatement	"agraph_print_node ( g , n )"	2745:3:69035:69059	81093	0	True				
ANR	81142	CallExpression	"agraph_print_node ( g , n )"		81093	0					
ANR	81143	Callee	agraph_print_node		81093	0					
ANR	81144	Identifier	agraph_print_node		81093	0					
ANR	81145	ArgumentList	g		81093	1					
ANR	81146	Argument	g		81093	0					
ANR	81147	Identifier	g		81093	0					
ANR	81148	Argument	n		81093	1					
ANR	81149	Identifier	n		81093	0					
ANR	81150	IfStatement	if ( g -> curnode )		81093	15					
ANR	81151	Condition	g -> curnode	2750:5:69128:69137	81093	0	True				
ANR	81152	PtrMemberAccess	g -> curnode		81093	0					
ANR	81153	Identifier	g		81093	0					
ANR	81154	Identifier	curnode		81093	1					
ANR	81155	CompoundStatement		14:17:275:275	81093	1					
ANR	81156	ExpressionStatement	"agraph_print_node ( g , get_anode ( g -> curnode ) )"	2751:2:69144:69189	81093	0	True				
ANR	81157	CallExpression	"agraph_print_node ( g , get_anode ( g -> curnode ) )"		81093	0					
ANR	81158	Callee	agraph_print_node		81093	0					
ANR	81159	Identifier	agraph_print_node		81093	0					
ANR	81160	ArgumentList	g		81093	1					
ANR	81161	Argument	g		81093	0					
ANR	81162	Identifier	g		81093	0					
ANR	81163	Argument	get_anode ( g -> curnode )		81093	1					
ANR	81164	CallExpression	get_anode ( g -> curnode )		81093	0					
ANR	81165	Callee	get_anode		81093	0					
ANR	81166	Identifier	get_anode		81093	0					
ANR	81167	ArgumentList	g -> curnode		81093	1					
ANR	81168	Argument	g -> curnode		81093	0					
ANR	81169	PtrMemberAccess	g -> curnode		81093	0					
ANR	81170	Identifier	g		81093	0					
ANR	81171	Identifier	curnode		81093	1					
ANR	81172	ReturnType	static void		81093	1					
ANR	81173	Identifier	agraph_print_nodes		81093	2					
ANR	81174	ParameterList	const RAGraph * g		81093	3					
ANR	81175	Parameter	const RAGraph * g	2737:31:68846:68861	81093	0	True				
ANR	81176	ParameterType	const RAGraph *		81093	0					
ANR	81177	Identifier	g		81093	1					
ANR	81178	CFGEntryNode	ENTRY		81093		True				
ANR	81179	CFGExitNode	EXIT		81093		True				
ANR	81180	Symbol	* g		81093						
ANR	81181	Symbol	r_graph_get_nodes		81093						
ANR	81182	Symbol	nodes		81093						
ANR	81183	Symbol	get_anode		81093						
ANR	81184	Symbol	g -> graph		81093						
ANR	81185	Symbol	g		81093						
ANR	81186	Symbol	gn		81093						
ANR	81187	Symbol	g -> curnode		81093						
ANR	81188	Symbol	it		81093						
ANR	81189	Symbol	n		81093						
ANR	81190	ClassDef	tmplayer	2755:0:69197:69280							
ANR	81191	DeclStmt									
ANR	81192	Decl							int	int	layer
ANR	81193	DeclStmt									
ANR	81194	Decl							int	int	edgectr
ANR	81195	DeclStmt									
ANR	81196	Decl							int	int	revedgectr
ANR	81197	DeclStmt									
ANR	81198	Decl							int	int	minx
ANR	81199	DeclStmt									
ANR	81200	Decl							int	int	maxx
ANR	81201	ClassDef	tmpbackedgeinfo	2762:0:69283:69413							
ANR	81202	DeclStmt									
ANR	81203	Decl							int	int	ax
ANR	81204	DeclStmt									
ANR	81205	Decl							int	int	ay
ANR	81206	DeclStmt									
ANR	81207	Decl							int	int	bx
ANR	81208	DeclStmt									
ANR	81209	Decl							int	int	by
ANR	81210	DeclStmt									
ANR	81211	Decl							int	int	edgectr
ANR	81212	DeclStmt									
ANR	81213	Decl							int	int	fromlayer
ANR	81214	DeclStmt									
ANR	81215	Decl							int	int	tolayer
ANR	81216	DeclStmt									
ANR	81217	Decl							RCanvasLineStyle	RCanvasLineStyle	style
ANR	81218	Function	tmplayercmp	2773:0:69417:69537							
ANR	81219	FunctionDef	"tmplayercmp (const void * a , const void * b)"		81218	0					
ANR	81220	CompoundStatement		2773:47:69464:69537	81218	0					
ANR	81221	ReturnStatement	return ( ( struct tmplayer * ) a ) -> layer > ( ( struct tmplayer * ) b ) -> layer ;	2774:1:69467:69535	81218	0	True				
ANR	81222	RelationalExpression	( ( struct tmplayer * ) a ) -> layer > ( ( struct tmplayer * ) b ) -> layer		81218	0		>			
ANR	81223	PtrMemberAccess	( ( struct tmplayer * ) a ) -> layer		81218	0					
ANR	81224	CastExpression	( struct tmplayer * ) a		81218	0					
ANR	81225	CastTarget	struct tmplayer *		81218	0					
ANR	81226	Identifier	a		81218	1					
ANR	81227	Identifier	layer		81218	1					
ANR	81228	PtrMemberAccess	( ( struct tmplayer * ) b ) -> layer		81218	1					
ANR	81229	CastExpression	( struct tmplayer * ) b		81218	0					
ANR	81230	CastTarget	struct tmplayer *		81218	0					
ANR	81231	Identifier	b		81218	1					
ANR	81232	Identifier	layer		81218	1					
ANR	81233	ReturnType	int		81218	1					
ANR	81234	Identifier	tmplayercmp		81218	2					
ANR	81235	ParameterList	"const void * a , const void * b"		81218	3					
ANR	81236	Parameter	const void * a	2773:17:69434:69446	81218	0	True				
ANR	81237	ParameterType	const void *		81218	0					
ANR	81238	Identifier	a		81218	1					
ANR	81239	Parameter	const void * b	2773:32:69449:69461	81218	1	True				
ANR	81240	ParameterType	const void *		81218	0					
ANR	81241	Identifier	b		81218	1					
ANR	81242	CFGEntryNode	ENTRY		81218		True				
ANR	81243	CFGExitNode	EXIT		81218		True				
ANR	81244	Symbol	a		81218						
ANR	81245	Symbol	b		81218						
ANR	81246	Symbol	( ( struct tmplayer * ) a ) -> layer		81218						
ANR	81247	Symbol	( ( struct tmplayer * ) b ) -> layer		81218						
ANR	81248	Symbol	* a		81218						
ANR	81249	Symbol	* b		81218						
ANR	81250	Function	agraph_print_edges_simple	2777:0:69540:70274							
ANR	81251	FunctionDef	agraph_print_edges_simple (RAGraph * g)		81250	0					
ANR	81252	CompoundStatement		2777:50:69590:70274	81250	0					
ANR	81253	IdentifierDeclStatement	RCanvasLineStyle style = { 0 } ;	2778:1:69593:69621	81250	0	True				
ANR	81254	IdentifierDecl	style = { 0 }		81250	0					
ANR	81255	IdentifierDeclType	RCanvasLineStyle		81250	0					
ANR	81256	Identifier	style		81250	1					
ANR	81257	AssignmentExpression	style = { 0 }		81250	2		=			
ANR	81258	Identifier	style		81250	0					
ANR	81259	InitializerList	0		81250	1					
ANR	81260	PrimaryExpression	0		81250	0					
ANR	81261	IdentifierDeclStatement	"RANode * n , * n2 ;"	2779:1:69624:69638	81250	1	True				
ANR	81262	IdentifierDecl	* n		81250	0					
ANR	81263	IdentifierDeclType	RANode *		81250	0					
ANR	81264	Identifier	n		81250	1					
ANR	81265	IdentifierDecl	* n2		81250	1					
ANR	81266	IdentifierDeclType	RANode *		81250	0					
ANR	81267	Identifier	n2		81250	1					
ANR	81268	IdentifierDeclStatement	"RGraphNode * gn , * gn2 ;"	2780:1:69641:69661	81250	2	True				
ANR	81269	IdentifierDecl	* gn		81250	0					
ANR	81270	IdentifierDeclType	RGraphNode *		81250	0					
ANR	81271	Identifier	gn		81250	1					
ANR	81272	IdentifierDecl	* gn2		81250	1					
ANR	81273	IdentifierDeclType	RGraphNode *		81250	0					
ANR	81274	Identifier	gn2		81250	1					
ANR	81275	IdentifierDeclStatement	"RListIter * iter , * iter2 ;"	2781:1:69664:69687	81250	3	True				
ANR	81276	IdentifierDecl	* iter		81250	0					
ANR	81277	IdentifierDeclType	RListIter *		81250	0					
ANR	81278	Identifier	iter		81250	1					
ANR	81279	IdentifierDecl	* iter2		81250	1					
ANR	81280	IdentifierDeclType	RListIter *		81250	0					
ANR	81281	Identifier	iter2		81250	1					
ANR	81282	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	2782:1:69690:69739	81250	4	True				
ANR	81283	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		81250	0					
ANR	81284	IdentifierDeclType	const RList *		81250	0					
ANR	81285	Identifier	nodes		81250	1					
ANR	81286	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		81250	2		=			
ANR	81287	Identifier	nodes		81250	0					
ANR	81288	CallExpression	r_graph_get_nodes ( g -> graph )		81250	1					
ANR	81289	Callee	r_graph_get_nodes		81250	0					
ANR	81290	Identifier	r_graph_get_nodes		81250	0					
ANR	81291	ArgumentList	g -> graph		81250	1					
ANR	81292	Argument	g -> graph		81250	0					
ANR	81293	PtrMemberAccess	g -> graph		81250	0					
ANR	81294	Identifier	g		81250	0					
ANR	81295	Identifier	graph		81250	1					
ANR	81296	Statement	graph_foreach_anode	2783:1:69742:69760	81250	5	True				
ANR	81297	Statement	(	2783:21:69762:69762	81250	6	True				
ANR	81298	Statement	nodes	2783:22:69763:69767	81250	7	True				
ANR	81299	Statement	","	2783:27:69768:69768	81250	8	True				
ANR	81300	Statement	iter	2783:29:69770:69773	81250	9	True				
ANR	81301	Statement	","	2783:33:69774:69774	81250	10	True				
ANR	81302	Statement	gn	2783:35:69776:69777	81250	11	True				
ANR	81303	Statement	","	2783:37:69778:69778	81250	12	True				
ANR	81304	Statement	n	2783:39:69780:69780	81250	13	True				
ANR	81305	Statement	)	2783:40:69781:69781	81250	14	True				
ANR	81306	CompoundStatement		8:2:196:239	81250	15					
ANR	81307	IdentifierDeclStatement	const RList * outnodes = n -> gnode -> out_nodes ;	2784:2:69787:69830	81250	0	True				
ANR	81308	IdentifierDecl	* outnodes = n -> gnode -> out_nodes		81250	0					
ANR	81309	IdentifierDeclType	const RList *		81250	0					
ANR	81310	Identifier	outnodes		81250	1					
ANR	81311	AssignmentExpression	* outnodes = n -> gnode -> out_nodes		81250	2		=			
ANR	81312	Identifier	outnodes		81250	0					
ANR	81313	PtrMemberAccess	n -> gnode -> out_nodes		81250	1					
ANR	81314	PtrMemberAccess	n -> gnode		81250	0					
ANR	81315	Identifier	n		81250	0					
ANR	81316	Identifier	gnode		81250	1					
ANR	81317	Identifier	out_nodes		81250	1					
ANR	81318	Statement	graph_foreach_anode	2785:2:69834:69852	81250	1	True				
ANR	81319	Statement	(	2785:22:69854:69854	81250	2	True				
ANR	81320	Statement	outnodes	2785:23:69855:69862	81250	3	True				
ANR	81321	Statement	","	2785:31:69863:69863	81250	4	True				
ANR	81322	Statement	iter2	2785:33:69865:69869	81250	5	True				
ANR	81323	Statement	","	2785:38:69870:69870	81250	6	True				
ANR	81324	Statement	gn2	2785:40:69872:69874	81250	7	True				
ANR	81325	Statement	","	2785:43:69875:69875	81250	8	True				
ANR	81326	Statement	n2	2785:45:69877:69878	81250	9	True				
ANR	81327	Statement	)	2785:47:69879:69879	81250	10	True				
ANR	81328	CompoundStatement		12:3:335:354	81250	11					
ANR	81329	IdentifierDeclStatement	int sx = n -> w / 2 ;	2786:3:69886:69903	81250	0	True				
ANR	81330	IdentifierDecl	sx = n -> w / 2		81250	0					
ANR	81331	IdentifierDeclType	int		81250	0					
ANR	81332	Identifier	sx		81250	1					
ANR	81333	AssignmentExpression	sx = n -> w / 2		81250	2		=			
ANR	81334	Identifier	sx		81250	0					
ANR	81335	MultiplicativeExpression	n -> w / 2		81250	1		/			
ANR	81336	PtrMemberAccess	n -> w		81250	0					
ANR	81337	Identifier	n		81250	0					
ANR	81338	Identifier	w		81250	1					
ANR	81339	PrimaryExpression	2		81250	1					
ANR	81340	IdentifierDeclStatement	int sy = n -> h ;	2787:3:69908:69921	81250	1	True				
ANR	81341	IdentifierDecl	sy = n -> h		81250	0					
ANR	81342	IdentifierDeclType	int		81250	0					
ANR	81343	Identifier	sy		81250	1					
ANR	81344	AssignmentExpression	sy = n -> h		81250	2		=			
ANR	81345	Identifier	sy		81250	0					
ANR	81346	PtrMemberAccess	n -> h		81250	1					
ANR	81347	Identifier	n		81250	0					
ANR	81348	Identifier	h		81250	1					
ANR	81349	IdentifierDeclStatement	int sx2 = n2 -> w / 2 ;	2788:3:69926:69945	81250	2	True				
ANR	81350	IdentifierDecl	sx2 = n2 -> w / 2		81250	0					
ANR	81351	IdentifierDeclType	int		81250	0					
ANR	81352	Identifier	sx2		81250	1					
ANR	81353	AssignmentExpression	sx2 = n2 -> w / 2		81250	2		=			
ANR	81354	Identifier	sx2		81250	0					
ANR	81355	MultiplicativeExpression	n2 -> w / 2		81250	1		/			
ANR	81356	PtrMemberAccess	n2 -> w		81250	0					
ANR	81357	Identifier	n2		81250	0					
ANR	81358	Identifier	w		81250	1					
ANR	81359	PrimaryExpression	2		81250	1					
ANR	81360	IfStatement	if ( g -> is_tiny )		81250	3					
ANR	81361	Condition	g -> is_tiny	2789:7:69954:69963	81250	0	True				
ANR	81362	PtrMemberAccess	g -> is_tiny		81250	0					
ANR	81363	Identifier	g		81250	0					
ANR	81364	Identifier	is_tiny		81250	1					
ANR	81365	CompoundStatement		13:19:375:375	81250	1					
ANR	81366	ExpressionStatement	sx = 0	2790:4:69972:69978	81250	0	True				
ANR	81367	AssignmentExpression	sx = 0		81250	0		=			
ANR	81368	Identifier	sx		81250	0					
ANR	81369	PrimaryExpression	0		81250	1					
ANR	81370	ExpressionStatement	sy = 0	2791:4:69984:69990	81250	1	True				
ANR	81371	AssignmentExpression	sy = 0		81250	0		=			
ANR	81372	Identifier	sy		81250	0					
ANR	81373	PrimaryExpression	0		81250	1					
ANR	81374	ExpressionStatement	sx2 = 0	2792:4:69996:70003	81250	2	True				
ANR	81375	AssignmentExpression	sx2 = 0		81250	0		=			
ANR	81376	Identifier	sx2		81250	0					
ANR	81377	PrimaryExpression	0		81250	1					
ANR	81378	ExpressionStatement	"r_cons_canvas_line ( g -> can , n -> x + sx , n -> y + sy , n2 -> x + sx2 , n2 -> y , & style )"	2795:3:70048:70133	81250	4	True				
ANR	81379	CallExpression	"r_cons_canvas_line ( g -> can , n -> x + sx , n -> y + sy , n2 -> x + sx2 , n2 -> y , & style )"		81250	0					
ANR	81380	Callee	r_cons_canvas_line		81250	0					
ANR	81381	Identifier	r_cons_canvas_line		81250	0					
ANR	81382	ArgumentList	g -> can		81250	1					
ANR	81383	Argument	g -> can		81250	0					
ANR	81384	PtrMemberAccess	g -> can		81250	0					
ANR	81385	Identifier	g		81250	0					
ANR	81386	Identifier	can		81250	1					
ANR	81387	Argument	n -> x + sx		81250	1					
ANR	81388	AdditiveExpression	n -> x + sx		81250	0		+			
ANR	81389	PtrMemberAccess	n -> x		81250	0					
ANR	81390	Identifier	n		81250	0					
ANR	81391	Identifier	x		81250	1					
ANR	81392	Identifier	sx		81250	1					
ANR	81393	Argument	n -> y + sy		81250	2					
ANR	81394	AdditiveExpression	n -> y + sy		81250	0		+			
ANR	81395	PtrMemberAccess	n -> y		81250	0					
ANR	81396	Identifier	n		81250	0					
ANR	81397	Identifier	y		81250	1					
ANR	81398	Identifier	sy		81250	1					
ANR	81399	Argument	n2 -> x + sx2		81250	3					
ANR	81400	AdditiveExpression	n2 -> x + sx2		81250	0		+			
ANR	81401	PtrMemberAccess	n2 -> x		81250	0					
ANR	81402	Identifier	n2		81250	0					
ANR	81403	Identifier	x		81250	1					
ANR	81404	Identifier	sx2		81250	1					
ANR	81405	Argument	n2 -> y		81250	4					
ANR	81406	PtrMemberAccess	n2 -> y		81250	0					
ANR	81407	Identifier	n2		81250	0					
ANR	81408	Identifier	y		81250	1					
ANR	81409	Argument	& style		81250	5					
ANR	81410	UnaryOperationExpression	& style		81250	0					
ANR	81411	UnaryOperator	&		81250	0					
ANR	81412	Identifier	style		81250	1					
ANR	81413	IfStatement	if ( n2 -> is_dummy )		81250	5					
ANR	81414	Condition	n2 -> is_dummy	2799:7:70143:70154	81250	0	True				
ANR	81415	PtrMemberAccess	n2 -> is_dummy		81250	0					
ANR	81416	Identifier	n2		81250	0					
ANR	81417	Identifier	is_dummy		81250	1					
ANR	81418	CompoundStatement		23:21:566:566	81250	1					
ANR	81419	ExpressionStatement	"r_cons_canvas_line ( g -> can , n2 -> x + sx2 , n2 -> y - 1 , n2 -> x + sx2 , n2 -> y + n2 -> h , & style )"	2800:4:70163:70260	81250	0	True				
ANR	81420	CallExpression	"r_cons_canvas_line ( g -> can , n2 -> x + sx2 , n2 -> y - 1 , n2 -> x + sx2 , n2 -> y + n2 -> h , & style )"		81250	0					
ANR	81421	Callee	r_cons_canvas_line		81250	0					
ANR	81422	Identifier	r_cons_canvas_line		81250	0					
ANR	81423	ArgumentList	g -> can		81250	1					
ANR	81424	Argument	g -> can		81250	0					
ANR	81425	PtrMemberAccess	g -> can		81250	0					
ANR	81426	Identifier	g		81250	0					
ANR	81427	Identifier	can		81250	1					
ANR	81428	Argument	n2 -> x + sx2		81250	1					
ANR	81429	AdditiveExpression	n2 -> x + sx2		81250	0		+			
ANR	81430	PtrMemberAccess	n2 -> x		81250	0					
ANR	81431	Identifier	n2		81250	0					
ANR	81432	Identifier	x		81250	1					
ANR	81433	Identifier	sx2		81250	1					
ANR	81434	Argument	n2 -> y - 1		81250	2					
ANR	81435	AdditiveExpression	n2 -> y - 1		81250	0		-			
ANR	81436	PtrMemberAccess	n2 -> y		81250	0					
ANR	81437	Identifier	n2		81250	0					
ANR	81438	Identifier	y		81250	1					
ANR	81439	PrimaryExpression	1		81250	1					
ANR	81440	Argument	n2 -> x + sx2		81250	3					
ANR	81441	AdditiveExpression	n2 -> x + sx2		81250	0		+			
ANR	81442	PtrMemberAccess	n2 -> x		81250	0					
ANR	81443	Identifier	n2		81250	0					
ANR	81444	Identifier	x		81250	1					
ANR	81445	Identifier	sx2		81250	1					
ANR	81446	Argument	n2 -> y + n2 -> h		81250	4					
ANR	81447	AdditiveExpression	n2 -> y + n2 -> h		81250	0		+			
ANR	81448	PtrMemberAccess	n2 -> y		81250	0					
ANR	81449	Identifier	n2		81250	0					
ANR	81450	Identifier	y		81250	1					
ANR	81451	PtrMemberAccess	n2 -> h		81250	1					
ANR	81452	Identifier	n2		81250	0					
ANR	81453	Identifier	h		81250	1					
ANR	81454	Argument	& style		81250	5					
ANR	81455	UnaryOperationExpression	& style		81250	0					
ANR	81456	UnaryOperator	&		81250	0					
ANR	81457	Identifier	style		81250	1					
ANR	81458	ReturnType	static void		81250	1					
ANR	81459	Identifier	agraph_print_edges_simple		81250	2					
ANR	81460	ParameterList	RAGraph * g		81250	3					
ANR	81461	Parameter	RAGraph * g	2777:38:69578:69587	81250	0	True				
ANR	81462	ParameterType	RAGraph *		81250	0					
ANR	81463	Identifier	g		81250	1					
ANR	81464	CFGEntryNode	ENTRY		81250		True				
ANR	81465	CFGExitNode	EXIT		81250		True				
ANR	81466	Symbol	n -> gnode		81250						
ANR	81467	Symbol	n2		81250						
ANR	81468	Symbol	n -> gnode -> out_nodes		81250						
ANR	81469	Symbol	* n -> gnode		81250						
ANR	81470	Symbol	n2 -> h		81250						
ANR	81471	Symbol	g -> is_tiny		81250						
ANR	81472	Symbol	g -> graph		81250						
ANR	81473	Symbol	* * n		81250						
ANR	81474	Symbol	g -> can		81250						
ANR	81475	Symbol	r_graph_get_nodes		81250						
ANR	81476	Symbol	sx		81250						
ANR	81477	Symbol	& style		81250						
ANR	81478	Symbol	n -> h		81250						
ANR	81479	Symbol	sy		81250						
ANR	81480	Symbol	g		81250						
ANR	81481	Symbol	gn		81250						
ANR	81482	Symbol	iter2		81250						
ANR	81483	Symbol	iter		81250						
ANR	81484	Symbol	* n2		81250						
ANR	81485	Symbol	gn2		81250						
ANR	81486	Symbol	outnodes		81250						
ANR	81487	Symbol	sx2		81250						
ANR	81488	Symbol	n		81250						
ANR	81489	Symbol	* g		81250						
ANR	81490	Symbol	n -> y		81250						
ANR	81491	Symbol	nodes		81250						
ANR	81492	Symbol	n -> x		81250						
ANR	81493	Symbol	n -> w		81250						
ANR	81494	Symbol	* n		81250						
ANR	81495	Symbol	n2 -> is_dummy		81250						
ANR	81496	Symbol	style		81250						
ANR	81497	Symbol	n2 -> w		81250						
ANR	81498	Symbol	n2 -> x		81250						
ANR	81499	Symbol	n2 -> y		81250						
ANR	81500	Function	first_x_cmp	2808:0:70277:70626							
ANR	81501	FunctionDef	"first_x_cmp (const void * _a , const void * _b)"		81500	0					
ANR	81502	CompoundStatement		2808:56:70333:70626	81500	0					
ANR	81503	IdentifierDeclStatement	RGraphNode * ga = ( RGraphNode * ) _a ;	2809:1:70336:70369	81500	0	True				
ANR	81504	IdentifierDecl	* ga = ( RGraphNode * ) _a		81500	0					
ANR	81505	IdentifierDeclType	RGraphNode *		81500	0					
ANR	81506	Identifier	ga		81500	1					
ANR	81507	AssignmentExpression	* ga = ( RGraphNode * ) _a		81500	2		=			
ANR	81508	Identifier	ga		81500	0					
ANR	81509	CastExpression	( RGraphNode * ) _a		81500	1					
ANR	81510	CastTarget	RGraphNode *		81500	0					
ANR	81511	Identifier	_a		81500	1					
ANR	81512	IdentifierDeclStatement	RGraphNode * gb = ( RGraphNode * ) _b ;	2810:1:70372:70405	81500	1	True				
ANR	81513	IdentifierDecl	* gb = ( RGraphNode * ) _b		81500	0					
ANR	81514	IdentifierDeclType	RGraphNode *		81500	0					
ANR	81515	Identifier	gb		81500	1					
ANR	81516	AssignmentExpression	* gb = ( RGraphNode * ) _b		81500	2		=			
ANR	81517	Identifier	gb		81500	0					
ANR	81518	CastExpression	( RGraphNode * ) _b		81500	1					
ANR	81519	CastTarget	RGraphNode *		81500	0					
ANR	81520	Identifier	_b		81500	1					
ANR	81521	IdentifierDeclStatement	RANode * a = ( RANode * ) ga -> data ;	2811:1:70408:70438	81500	2	True				
ANR	81522	IdentifierDecl	* a = ( RANode * ) ga -> data		81500	0					
ANR	81523	IdentifierDeclType	RANode *		81500	0					
ANR	81524	Identifier	a		81500	1					
ANR	81525	AssignmentExpression	* a = ( RANode * ) ga -> data		81500	2		=			
ANR	81526	Identifier	a		81500	0					
ANR	81527	CastExpression	( RANode * ) ga -> data		81500	1					
ANR	81528	CastTarget	RANode *		81500	0					
ANR	81529	PtrMemberAccess	ga -> data		81500	1					
ANR	81530	Identifier	ga		81500	0					
ANR	81531	Identifier	data		81500	1					
ANR	81532	IdentifierDeclStatement	RANode * b = ( RANode * ) gb -> data ;	2812:1:70441:70471	81500	3	True				
ANR	81533	IdentifierDecl	* b = ( RANode * ) gb -> data		81500	0					
ANR	81534	IdentifierDeclType	RANode *		81500	0					
ANR	81535	Identifier	b		81500	1					
ANR	81536	AssignmentExpression	* b = ( RANode * ) gb -> data		81500	2		=			
ANR	81537	Identifier	b		81500	0					
ANR	81538	CastExpression	( RANode * ) gb -> data		81500	1					
ANR	81539	CastTarget	RANode *		81500	0					
ANR	81540	PtrMemberAccess	gb -> data		81500	1					
ANR	81541	Identifier	gb		81500	0					
ANR	81542	Identifier	data		81500	1					
ANR	81543	IfStatement	if ( b -> y < a -> y )		81500	4					
ANR	81544	Condition	b -> y < a -> y	2813:5:70478:70488	81500	0	True				
ANR	81545	RelationalExpression	b -> y < a -> y		81500	0		<			
ANR	81546	PtrMemberAccess	b -> y		81500	0					
ANR	81547	Identifier	b		81500	0					
ANR	81548	Identifier	y		81500	1					
ANR	81549	PtrMemberAccess	a -> y		81500	1					
ANR	81550	Identifier	a		81500	0					
ANR	81551	Identifier	y		81500	1					
ANR	81552	CompoundStatement		6:18:157:157	81500	1					
ANR	81553	ReturnStatement	return - 1 ;	2814:2:70495:70504	81500	0	True				
ANR	81554	UnaryOperationExpression	- 1		81500	0					
ANR	81555	UnaryOperator	-		81500	0					
ANR	81556	PrimaryExpression	1		81500	1					
ANR	81557	IfStatement	if ( b -> y > a -> y )		81500	5					
ANR	81558	Condition	b -> y > a -> y	2816:5:70514:70524	81500	0	True				
ANR	81559	RelationalExpression	b -> y > a -> y		81500	0		>			
ANR	81560	PtrMemberAccess	b -> y		81500	0					
ANR	81561	Identifier	b		81500	0					
ANR	81562	Identifier	y		81500	1					
ANR	81563	PtrMemberAccess	a -> y		81500	1					
ANR	81564	Identifier	a		81500	0					
ANR	81565	Identifier	y		81500	1					
ANR	81566	CompoundStatement		9:18:193:193	81500	1					
ANR	81567	ReturnStatement	return 1 ;	2817:2:70531:70539	81500	0	True				
ANR	81568	PrimaryExpression	1		81500	0					
ANR	81569	IfStatement	if ( a -> x < b -> x )		81500	6					
ANR	81570	Condition	a -> x < b -> x	2819:5:70549:70559	81500	0	True				
ANR	81571	RelationalExpression	a -> x < b -> x		81500	0		<			
ANR	81572	PtrMemberAccess	a -> x		81500	0					
ANR	81573	Identifier	a		81500	0					
ANR	81574	Identifier	x		81500	1					
ANR	81575	PtrMemberAccess	b -> x		81500	1					
ANR	81576	Identifier	b		81500	0					
ANR	81577	Identifier	x		81500	1					
ANR	81578	CompoundStatement		12:18:228:228	81500	1					
ANR	81579	ReturnStatement	return 1 ;	2820:2:70566:70574	81500	0	True				
ANR	81580	PrimaryExpression	1		81500	0					
ANR	81581	IfStatement	if ( a -> x > b -> x )		81500	7					
ANR	81582	Condition	a -> x > b -> x	2822:5:70584:70594	81500	0	True				
ANR	81583	RelationalExpression	a -> x > b -> x		81500	0		>			
ANR	81584	PtrMemberAccess	a -> x		81500	0					
ANR	81585	Identifier	a		81500	0					
ANR	81586	Identifier	x		81500	1					
ANR	81587	PtrMemberAccess	b -> x		81500	1					
ANR	81588	Identifier	b		81500	0					
ANR	81589	Identifier	x		81500	1					
ANR	81590	CompoundStatement		15:18:263:263	81500	1					
ANR	81591	ReturnStatement	return - 1 ;	2823:2:70601:70610	81500	0	True				
ANR	81592	UnaryOperationExpression	- 1		81500	0					
ANR	81593	UnaryOperator	-		81500	0					
ANR	81594	PrimaryExpression	1		81500	1					
ANR	81595	ReturnStatement	return 0 ;	2825:1:70616:70624	81500	8	True				
ANR	81596	PrimaryExpression	0		81500	0					
ANR	81597	ReturnType	static int		81500	1					
ANR	81598	Identifier	first_x_cmp		81500	2					
ANR	81599	ParameterList	"const void * _a , const void * _b"		81500	3					
ANR	81600	Parameter	const void * _a	2808:24:70301:70314	81500	0	True				
ANR	81601	ParameterType	const void *		81500	0					
ANR	81602	Identifier	_a		81500	1					
ANR	81603	Parameter	const void * _b	2808:40:70317:70330	81500	1	True				
ANR	81604	ParameterType	const void *		81500	0					
ANR	81605	Identifier	_b		81500	1					
ANR	81606	CFGEntryNode	ENTRY		81500		True				
ANR	81607	CFGExitNode	EXIT		81500		True				
ANR	81608	Symbol	a		81500						
ANR	81609	Symbol	_a		81500						
ANR	81610	Symbol	* gb		81500						
ANR	81611	Symbol	b		81500						
ANR	81612	Symbol	_b		81500						
ANR	81613	Symbol	* ga		81500						
ANR	81614	Symbol	ga -> data		81500						
ANR	81615	Symbol	* a		81500						
ANR	81616	Symbol	* b		81500						
ANR	81617	Symbol	gb -> data		81500						
ANR	81618	Symbol	b -> x		81500						
ANR	81619	Symbol	a -> x		81500						
ANR	81620	Symbol	a -> y		81500						
ANR	81621	Symbol	ga		81500						
ANR	81622	Symbol	gb		81500						
ANR	81623	Symbol	b -> y		81500						
ANR	81624	Function	agraph_print_edges	2828:0:70629:78083							
ANR	81625	FunctionDef	agraph_print_edges (RAGraph * g)		81624	0					
ANR	81626	CompoundStatement		2828:43:70672:78083	81624	0					
ANR	81627	IfStatement	if ( ! g -> edgemode )		81624	0					
ANR	81628	Condition	! g -> edgemode	2829:5:70679:70690	81624	0	True				
ANR	81629	UnaryOperationExpression	! g -> edgemode		81624	0					
ANR	81630	UnaryOperator	!		81624	0					
ANR	81631	PtrMemberAccess	g -> edgemode		81624	1					
ANR	81632	Identifier	g		81624	0					
ANR	81633	Identifier	edgemode		81624	1					
ANR	81634	CompoundStatement		2:19:20:20	81624	1					
ANR	81635	ReturnStatement	return ;	2830:2:70697:70703	81624	0	True				
ANR	81636	IfStatement	if ( g -> edgemode == 1 )		81624	1					
ANR	81637	Condition	g -> edgemode == 1	2832:5:70713:70728	81624	0	True				
ANR	81638	EqualityExpression	g -> edgemode == 1		81624	0		==			
ANR	81639	PtrMemberAccess	g -> edgemode		81624	0					
ANR	81640	Identifier	g		81624	0					
ANR	81641	Identifier	edgemode		81624	1					
ANR	81642	PrimaryExpression	1		81624	1					
ANR	81643	CompoundStatement		5:23:58:58	81624	1					
ANR	81644	ExpressionStatement	agraph_print_edges_simple ( g )	2833:2:70735:70764	81624	0	True				
ANR	81645	CallExpression	agraph_print_edges_simple ( g )		81624	0					
ANR	81646	Callee	agraph_print_edges_simple		81624	0					
ANR	81647	Identifier	agraph_print_edges_simple		81624	0					
ANR	81648	ArgumentList	g		81624	1					
ANR	81649	Argument	g		81624	0					
ANR	81650	Identifier	g		81624	0					
ANR	81651	ReturnStatement	return ;	2834:2:70768:70774	81624	1	True				
ANR	81652	IdentifierDeclStatement	"int out_nth , in_nth , bendpoint ;"	2836:1:70780:70810	81624	2	True				
ANR	81653	IdentifierDecl	out_nth		81624	0					
ANR	81654	IdentifierDeclType	int		81624	0					
ANR	81655	Identifier	out_nth		81624	1					
ANR	81656	IdentifierDecl	in_nth		81624	1					
ANR	81657	IdentifierDeclType	int		81624	0					
ANR	81658	Identifier	in_nth		81624	1					
ANR	81659	IdentifierDecl	bendpoint		81624	2					
ANR	81660	IdentifierDeclType	int		81624	0					
ANR	81661	Identifier	bendpoint		81624	1					
ANR	81662	IdentifierDeclStatement	"RListIter * itn , * itm , * ito ;"	2837:1:70813:70839	81624	3	True				
ANR	81663	IdentifierDecl	* itn		81624	0					
ANR	81664	IdentifierDeclType	RListIter *		81624	0					
ANR	81665	Identifier	itn		81624	1					
ANR	81666	IdentifierDecl	* itm		81624	1					
ANR	81667	IdentifierDeclType	RListIter *		81624	0					
ANR	81668	Identifier	itm		81624	1					
ANR	81669	IdentifierDecl	* ito		81624	2					
ANR	81670	IdentifierDeclType	RListIter *		81624	0					
ANR	81671	Identifier	ito		81624	1					
ANR	81672	IdentifierDeclStatement	RCanvasLineStyle style = { 0 } ;	2838:1:70842:70870	81624	4	True				
ANR	81673	IdentifierDecl	style = { 0 }		81624	0					
ANR	81674	IdentifierDeclType	RCanvasLineStyle		81624	0					
ANR	81675	Identifier	style		81624	1					
ANR	81676	AssignmentExpression	style = { 0 }		81624	2		=			
ANR	81677	Identifier	style		81624	0					
ANR	81678	InitializerList	0		81624	1					
ANR	81679	PrimaryExpression	0		81624	0					
ANR	81680	IdentifierDeclStatement	const RList * nodes = r_graph_get_nodes ( g -> graph ) ;	2839:1:70873:70922	81624	5	True				
ANR	81681	IdentifierDecl	* nodes = r_graph_get_nodes ( g -> graph )		81624	0					
ANR	81682	IdentifierDeclType	const RList *		81624	0					
ANR	81683	Identifier	nodes		81624	1					
ANR	81684	AssignmentExpression	* nodes = r_graph_get_nodes ( g -> graph )		81624	2		=			
ANR	81685	Identifier	nodes		81624	0					
ANR	81686	CallExpression	r_graph_get_nodes ( g -> graph )		81624	1					
ANR	81687	Callee	r_graph_get_nodes		81624	0					
ANR	81688	Identifier	r_graph_get_nodes		81624	0					
ANR	81689	ArgumentList	g -> graph		81624	1					
ANR	81690	Argument	g -> graph		81624	0					
ANR	81691	PtrMemberAccess	g -> graph		81624	0					
ANR	81692	Identifier	g		81624	0					
ANR	81693	Identifier	graph		81624	1					
ANR	81694	IdentifierDeclStatement	RGraphNode * ga ;	2840:1:70925:70939	81624	6	True				
ANR	81695	IdentifierDecl	* ga		81624	0					
ANR	81696	IdentifierDeclType	RGraphNode *		81624	0					
ANR	81697	Identifier	ga		81624	1					
ANR	81698	IdentifierDeclStatement	RANode * a ;	2841:1:70942:70951	81624	7	True				
ANR	81699	IdentifierDecl	* a		81624	0					
ANR	81700	IdentifierDeclType	RANode *		81624	0					
ANR	81701	Identifier	a		81624	1					
ANR	81702	IdentifierDeclStatement	RList * lyr = r_list_new ( ) ;	2843:1:70955:70981	81624	8	True				
ANR	81703	IdentifierDecl	* lyr = r_list_new ( )		81624	0					
ANR	81704	IdentifierDeclType	RList *		81624	0					
ANR	81705	Identifier	lyr		81624	1					
ANR	81706	AssignmentExpression	* lyr = r_list_new ( )		81624	2		=			
ANR	81707	Identifier	lyr		81624	0					
ANR	81708	CallExpression	r_list_new ( )		81624	1					
ANR	81709	Callee	r_list_new		81624	0					
ANR	81710	Identifier	r_list_new		81624	0					
ANR	81711	ArgumentList			81624	1					
ANR	81712	IdentifierDeclStatement	RList * bckedges = r_list_new ( ) ;	2844:1:70984:71015	81624	9	True				
ANR	81713	IdentifierDecl	* bckedges = r_list_new ( )		81624	0					
ANR	81714	IdentifierDeclType	RList *		81624	0					
ANR	81715	Identifier	bckedges		81624	1					
ANR	81716	AssignmentExpression	* bckedges = r_list_new ( )		81624	2		=			
ANR	81717	Identifier	bckedges		81624	0					
ANR	81718	CallExpression	r_list_new ( )		81624	1					
ANR	81719	Callee	r_list_new		81624	0					
ANR	81720	Identifier	r_list_new		81624	0					
ANR	81721	ArgumentList			81624	1					
ANR	81722	IdentifierDeclStatement	"struct tmplayer * tl , * tm ;"	2845:1:71018:71042	81624	10	True				
ANR	81723	IdentifierDecl	* tl		81624	0					
ANR	81724	IdentifierDeclType	struct tmplayer *		81624	0					
ANR	81725	Identifier	tl		81624	1					
ANR	81726	IdentifierDecl	* tm		81624	1					
ANR	81727	IdentifierDeclType	struct tmplayer *		81624	0					
ANR	81728	Identifier	tm		81624	1					
ANR	81729	Statement	graph_foreach_anode	2847:1:71046:71064	81624	11	True				
ANR	81730	Statement	(	2847:21:71066:71066	81624	12	True				
ANR	81731	Statement	nodes	2847:22:71067:71071	81624	13	True				
ANR	81732	Statement	","	2847:27:71072:71072	81624	14	True				
ANR	81733	Statement	itm	2847:29:71074:71076	81624	15	True				
ANR	81734	Statement	","	2847:32:71077:71077	81624	16	True				
ANR	81735	Statement	ga	2847:34:71079:71080	81624	17	True				
ANR	81736	Statement	","	2847:36:71081:71081	81624	18	True				
ANR	81737	Statement	a	2847:38:71083:71083	81624	19	True				
ANR	81738	Statement	)	2847:39:71084:71084	81624	20	True				
ANR	81739	CompoundStatement		69:2:1402:1444	81624	21					
ANR	81740	IdentifierDeclStatement	const RGraphNode * gb ;	2848:2:71090:71110	81624	0	True				
ANR	81741	IdentifierDecl	* gb		81624	0					
ANR	81742	IdentifierDeclType	const RGraphNode *		81624	0					
ANR	81743	Identifier	gb		81624	1					
ANR	81744	IdentifierDeclStatement	RANode * b ;	2849:2:71114:71123	81624	1	True				
ANR	81745	IdentifierDecl	* b		81624	0					
ANR	81746	IdentifierDeclType	RANode *		81624	0					
ANR	81747	Identifier	b		81624	1					
ANR	81748	IdentifierDeclStatement	"RList * neighbours = ( RList * ) r_graph_get_neighbours ( g -> graph , ga ) ;"	2850:2:71127:71193	81624	2	True				
ANR	81749	IdentifierDecl	"* neighbours = ( RList * ) r_graph_get_neighbours ( g -> graph , ga )"		81624	0					
ANR	81750	IdentifierDeclType	RList *		81624	0					
ANR	81751	Identifier	neighbours		81624	1					
ANR	81752	AssignmentExpression	"* neighbours = ( RList * ) r_graph_get_neighbours ( g -> graph , ga )"		81624	2		=			
ANR	81753	Identifier	neighbours		81624	0					
ANR	81754	CastExpression	"( RList * ) r_graph_get_neighbours ( g -> graph , ga )"		81624	1					
ANR	81755	CastTarget	RList *		81624	0					
ANR	81756	CallExpression	"r_graph_get_neighbours ( g -> graph , ga )"		81624	1					
ANR	81757	Callee	r_graph_get_neighbours		81624	0					
ANR	81758	Identifier	r_graph_get_neighbours		81624	0					
ANR	81759	ArgumentList	g -> graph		81624	1					
ANR	81760	Argument	g -> graph		81624	0					
ANR	81761	PtrMemberAccess	g -> graph		81624	0					
ANR	81762	Identifier	g		81624	0					
ANR	81763	Identifier	graph		81624	1					
ANR	81764	Argument	ga		81624	1					
ANR	81765	Identifier	ga		81624	0					
ANR	81766	IdentifierDeclStatement	"int ax , ay , bx , by , a_x_inc , b_x_inc ;"	2851:2:71197:71233	81624	3	True				
ANR	81767	IdentifierDecl	ax		81624	0					
ANR	81768	IdentifierDeclType	int		81624	0					
ANR	81769	Identifier	ax		81624	1					
ANR	81770	IdentifierDecl	ay		81624	1					
ANR	81771	IdentifierDeclType	int		81624	0					
ANR	81772	Identifier	ay		81624	1					
ANR	81773	IdentifierDecl	bx		81624	2					
ANR	81774	IdentifierDeclType	int		81624	0					
ANR	81775	Identifier	bx		81624	1					
ANR	81776	IdentifierDecl	by		81624	3					
ANR	81777	IdentifierDeclType	int		81624	0					
ANR	81778	Identifier	by		81624	1					
ANR	81779	IdentifierDecl	a_x_inc		81624	4					
ANR	81780	IdentifierDeclType	int		81624	0					
ANR	81781	Identifier	a_x_inc		81624	1					
ANR	81782	IdentifierDecl	b_x_inc		81624	5					
ANR	81783	IdentifierDeclType	int		81624	0					
ANR	81784	Identifier	b_x_inc		81624	1					
ANR	81785	ExpressionStatement	tl = tm = NULL	2852:2:71237:71251	81624	4	True				
ANR	81786	AssignmentExpression	tl = tm = NULL		81624	0		=			
ANR	81787	Identifier	tl		81624	0					
ANR	81788	AssignmentExpression	tm = NULL		81624	1		=			
ANR	81789	Identifier	tm		81624	0					
ANR	81790	Identifier	NULL		81624	1					
ANR	81791	IfStatement	if ( r_cons_is_breaked ( ) )		81624	5					
ANR	81792	Condition	r_cons_is_breaked ( )	2853:6:71259:71278	81624	0	True				
ANR	81793	CallExpression	r_cons_is_breaked ( )		81624	0					
ANR	81794	Callee	r_cons_is_breaked		81624	0					
ANR	81795	Identifier	r_cons_is_breaked		81624	0					
ANR	81796	ArgumentList			81624	1					
ANR	81797	CompoundStatement		26:28:608:608	81624	1					
ANR	81798	BreakStatement	break ;	2854:3:71286:71291	81624	0	True				
ANR	81799	Statement	r_list_foreach	2857:2:71300:71313	81624	6	True				
ANR	81800	Statement	(	2857:17:71315:71315	81624	7	True				
ANR	81801	Statement	lyr	2857:18:71316:71318	81624	8	True				
ANR	81802	Statement	","	2857:21:71319:71319	81624	9	True				
ANR	81803	Statement	ito	2857:23:71321:71323	81624	10	True				
ANR	81804	Statement	","	2857:26:71324:71324	81624	11	True				
ANR	81805	Statement	tl	2857:28:71326:71327	81624	12	True				
ANR	81806	Statement	)	2857:30:71328:71328	81624	13	True				
ANR	81807	CompoundStatement		30:32:657:657	81624	14					
ANR	81808	IfStatement	if ( tl -> layer == a -> layer )		81624	0					
ANR	81809	Condition	tl -> layer == a -> layer	2858:7:71339:71359	81624	0	True				
ANR	81810	EqualityExpression	tl -> layer == a -> layer		81624	0		==			
ANR	81811	PtrMemberAccess	tl -> layer		81624	0					
ANR	81812	Identifier	tl		81624	0					
ANR	81813	Identifier	layer		81624	1					
ANR	81814	PtrMemberAccess	a -> layer		81624	1					
ANR	81815	Identifier	a		81624	0					
ANR	81816	Identifier	layer		81624	1					
ANR	81817	CompoundStatement		31:30:689:689	81624	1					
ANR	81818	ExpressionStatement	tm = tl	2859:4:71368:71375	81624	0	True				
ANR	81819	AssignmentExpression	tm = tl		81624	0		=			
ANR	81820	Identifier	tm		81624	0					
ANR	81821	Identifier	tl		81624	1					
ANR	81822	IfStatement	if ( g -> layout == 0 )		81624	1					
ANR	81823	Condition	g -> layout == 0	2860:8:71385:71398	81624	0	True				
ANR	81824	EqualityExpression	g -> layout == 0		81624	0		==			
ANR	81825	PtrMemberAccess	g -> layout		81624	0					
ANR	81826	Identifier	g		81624	0					
ANR	81827	Identifier	layout		81624	1					
ANR	81828	PrimaryExpression	0		81624	1					
ANR	81829	CompoundStatement		33:24:728:728	81624	1					
ANR	81830	IfStatement	if ( tm -> minx > a -> x )		81624	0					
ANR	81831	Condition	tm -> minx > a -> x	2861:9:71430:71444	81624	0	True				
ANR	81832	RelationalExpression	tm -> minx > a -> x		81624	0		>			
ANR	81833	PtrMemberAccess	tm -> minx		81624	0					
ANR	81834	Identifier	tm		81624	0					
ANR	81835	Identifier	minx		81624	1					
ANR	81836	PtrMemberAccess	a -> x		81624	1					
ANR	81837	Identifier	a		81624	0					
ANR	81838	Identifier	x		81624	1					
ANR	81839	CompoundStatement		34:26:774:774	81624	1					
ANR	81840	ExpressionStatement	tm -> minx = a -> x	2862:6:71455:71470	81624	0	True				
ANR	81841	AssignmentExpression	tm -> minx = a -> x		81624	0		=			
ANR	81842	PtrMemberAccess	tm -> minx		81624	0					
ANR	81843	Identifier	tm		81624	0					
ANR	81844	Identifier	minx		81624	1					
ANR	81845	PtrMemberAccess	a -> x		81624	1					
ANR	81846	Identifier	a		81624	0					
ANR	81847	Identifier	x		81624	1					
ANR	81848	IfStatement	if ( tm -> maxx < a -> x + a -> w )		81624	1					
ANR	81849	Condition	tm -> maxx < a -> x + a -> w	2864:9:71488:71509	81624	0	True				
ANR	81850	RelationalExpression	tm -> maxx < a -> x + a -> w		81624	0		<			
ANR	81851	PtrMemberAccess	tm -> maxx		81624	0					
ANR	81852	Identifier	tm		81624	0					
ANR	81853	Identifier	maxx		81624	1					
ANR	81854	AdditiveExpression	a -> x + a -> w		81624	1		+			
ANR	81855	PtrMemberAccess	a -> x		81624	0					
ANR	81856	Identifier	a		81624	0					
ANR	81857	Identifier	x		81624	1					
ANR	81858	PtrMemberAccess	a -> w		81624	1					
ANR	81859	Identifier	a		81624	0					
ANR	81860	Identifier	w		81624	1					
ANR	81861	CompoundStatement		37:33:839:839	81624	1					
ANR	81862	ExpressionStatement	tm -> maxx = a -> x + a -> w	2865:6:71520:71542	81624	0	True				
ANR	81863	AssignmentExpression	tm -> maxx = a -> x + a -> w		81624	0		=			
ANR	81864	PtrMemberAccess	tm -> maxx		81624	0					
ANR	81865	Identifier	tm		81624	0					
ANR	81866	Identifier	maxx		81624	1					
ANR	81867	AdditiveExpression	a -> x + a -> w		81624	1		+			
ANR	81868	PtrMemberAccess	a -> x		81624	0					
ANR	81869	Identifier	a		81624	0					
ANR	81870	Identifier	x		81624	1					
ANR	81871	PtrMemberAccess	a -> w		81624	1					
ANR	81872	Identifier	a		81624	0					
ANR	81873	Identifier	w		81624	1					
ANR	81874	ElseStatement	else		81624	0					
ANR	81875	CompoundStatement		40:11:889:889	81624	0					
ANR	81876	IfStatement	if ( tm -> minx > a -> y )		81624	0					
ANR	81877	Condition	tm -> minx > a -> y	2868:9:71573:71587	81624	0	True				
ANR	81878	RelationalExpression	tm -> minx > a -> y		81624	0		>			
ANR	81879	PtrMemberAccess	tm -> minx		81624	0					
ANR	81880	Identifier	tm		81624	0					
ANR	81881	Identifier	minx		81624	1					
ANR	81882	PtrMemberAccess	a -> y		81624	1					
ANR	81883	Identifier	a		81624	0					
ANR	81884	Identifier	y		81624	1					
ANR	81885	CompoundStatement		41:26:917:917	81624	1					
ANR	81886	ExpressionStatement	tm -> minx = a -> y	2869:6:71598:71613	81624	0	True				
ANR	81887	AssignmentExpression	tm -> minx = a -> y		81624	0		=			
ANR	81888	PtrMemberAccess	tm -> minx		81624	0					
ANR	81889	Identifier	tm		81624	0					
ANR	81890	Identifier	minx		81624	1					
ANR	81891	PtrMemberAccess	a -> y		81624	1					
ANR	81892	Identifier	a		81624	0					
ANR	81893	Identifier	y		81624	1					
ANR	81894	IfStatement	if ( tm -> maxx < a -> y + a -> h )		81624	1					
ANR	81895	Condition	tm -> maxx < a -> y + a -> h	2871:9:71631:71652	81624	0	True				
ANR	81896	RelationalExpression	tm -> maxx < a -> y + a -> h		81624	0		<			
ANR	81897	PtrMemberAccess	tm -> maxx		81624	0					
ANR	81898	Identifier	tm		81624	0					
ANR	81899	Identifier	maxx		81624	1					
ANR	81900	AdditiveExpression	a -> y + a -> h		81624	1		+			
ANR	81901	PtrMemberAccess	a -> y		81624	0					
ANR	81902	Identifier	a		81624	0					
ANR	81903	Identifier	y		81624	1					
ANR	81904	PtrMemberAccess	a -> h		81624	1					
ANR	81905	Identifier	a		81624	0					
ANR	81906	Identifier	h		81624	1					
ANR	81907	CompoundStatement		44:33:982:982	81624	1					
ANR	81908	ExpressionStatement	tm -> maxx = a -> y + a -> h	2872:6:71663:71685	81624	0	True				
ANR	81909	AssignmentExpression	tm -> maxx = a -> y + a -> h		81624	0		=			
ANR	81910	PtrMemberAccess	tm -> maxx		81624	0					
ANR	81911	Identifier	tm		81624	0					
ANR	81912	Identifier	maxx		81624	1					
ANR	81913	AdditiveExpression	a -> y + a -> h		81624	1		+			
ANR	81914	PtrMemberAccess	a -> y		81624	0					
ANR	81915	Identifier	a		81624	0					
ANR	81916	Identifier	y		81624	1					
ANR	81917	PtrMemberAccess	a -> h		81624	1					
ANR	81918	Identifier	a		81624	0					
ANR	81919	Identifier	h		81624	1					
ANR	81920	BreakStatement	break ;	2875:4:71704:71709	81624	2	True				
ANR	81921	IfStatement	if ( ! tm )		81624	15					
ANR	81922	Condition	! tm	2879:6:71727:71729	81624	0	True				
ANR	81923	UnaryOperationExpression	! tm		81624	0					
ANR	81924	UnaryOperator	!		81624	0					
ANR	81925	Identifier	tm		81624	1					
ANR	81926	CompoundStatement		52:11:1059:1059	81624	1					
ANR	81927	Statement	tm	2880:3:71737:71738	81624	0	True				
ANR	81928	Statement	=	2880:6:71740:71740	81624	1	True				
ANR	81929	Statement	R_NEW0	2880:8:71742:71747	81624	2	True				
ANR	81930	Statement	(	2880:15:71749:71749	81624	3	True				
ANR	81931	Statement	struct	2880:16:71750:71755	81624	4	True				
ANR	81932	Statement	tmplayer	2880:23:71757:71764	81624	5	True				
ANR	81933	Statement	)	2880:31:71765:71765	81624	6	True				
ANR	81934	ExpressionStatement		2880:32:71766:71766	81624	7	True				
ANR	81935	IfStatement	if ( tm )		81624	8					
ANR	81936	Condition	tm	2881:7:71775:71776	81624	0	True				
ANR	81937	Identifier	tm		81624	0					
ANR	81938	CompoundStatement		54:11:1106:1106	81624	1					
ANR	81939	ExpressionStatement	tm -> layer = a -> layer	2882:4:71785:71805	81624	0	True				
ANR	81940	AssignmentExpression	tm -> layer = a -> layer		81624	0		=			
ANR	81941	PtrMemberAccess	tm -> layer		81624	0					
ANR	81942	Identifier	tm		81624	0					
ANR	81943	Identifier	layer		81624	1					
ANR	81944	PtrMemberAccess	a -> layer		81624	1					
ANR	81945	Identifier	a		81624	0					
ANR	81946	Identifier	layer		81624	1					
ANR	81947	ExpressionStatement	tm -> edgectr = 0	2883:4:71811:71826	81624	1	True				
ANR	81948	AssignmentExpression	tm -> edgectr = 0		81624	0		=			
ANR	81949	PtrMemberAccess	tm -> edgectr		81624	0					
ANR	81950	Identifier	tm		81624	0					
ANR	81951	Identifier	edgectr		81624	1					
ANR	81952	PrimaryExpression	0		81624	1					
ANR	81953	ExpressionStatement	tm -> revedgectr = 0	2884:4:71832:71850	81624	2	True				
ANR	81954	AssignmentExpression	tm -> revedgectr = 0		81624	0		=			
ANR	81955	PtrMemberAccess	tm -> revedgectr		81624	0					
ANR	81956	Identifier	tm		81624	0					
ANR	81957	Identifier	revedgectr		81624	1					
ANR	81958	PrimaryExpression	0		81624	1					
ANR	81959	IfStatement	if ( g -> layout == 0 )		81624	3					
ANR	81960	Condition	g -> layout == 0	2885:8:71860:71873	81624	0	True				
ANR	81961	EqualityExpression	g -> layout == 0		81624	0		==			
ANR	81962	PtrMemberAccess	g -> layout		81624	0					
ANR	81963	Identifier	g		81624	0					
ANR	81964	Identifier	layout		81624	1					
ANR	81965	PrimaryExpression	0		81624	1					
ANR	81966	CompoundStatement		58:24:1203:1203	81624	1					
ANR	81967	ExpressionStatement	tm -> minx = a -> x	2886:5:71901:71916	81624	0	True				
ANR	81968	AssignmentExpression	tm -> minx = a -> x		81624	0		=			
ANR	81969	PtrMemberAccess	tm -> minx		81624	0					
ANR	81970	Identifier	tm		81624	0					
ANR	81971	Identifier	minx		81624	1					
ANR	81972	PtrMemberAccess	a -> x		81624	1					
ANR	81973	Identifier	a		81624	0					
ANR	81974	Identifier	x		81624	1					
ANR	81975	ExpressionStatement	tm -> maxx = a -> x + a -> w	2887:5:71923:71945	81624	1	True				
ANR	81976	AssignmentExpression	tm -> maxx = a -> x + a -> w		81624	0		=			
ANR	81977	PtrMemberAccess	tm -> maxx		81624	0					
ANR	81978	Identifier	tm		81624	0					
ANR	81979	Identifier	maxx		81624	1					
ANR	81980	AdditiveExpression	a -> x + a -> w		81624	1		+			
ANR	81981	PtrMemberAccess	a -> x		81624	0					
ANR	81982	Identifier	a		81624	0					
ANR	81983	Identifier	x		81624	1					
ANR	81984	PtrMemberAccess	a -> w		81624	1					
ANR	81985	Identifier	a		81624	0					
ANR	81986	Identifier	w		81624	1					
ANR	81987	ElseStatement	else		81624	0					
ANR	81988	CompoundStatement		61:11:1285:1285	81624	0					
ANR	81989	ExpressionStatement	tm -> minx = a -> y	2889:5:71965:71980	81624	0	True				
ANR	81990	AssignmentExpression	tm -> minx = a -> y		81624	0		=			
ANR	81991	PtrMemberAccess	tm -> minx		81624	0					
ANR	81992	Identifier	tm		81624	0					
ANR	81993	Identifier	minx		81624	1					
ANR	81994	PtrMemberAccess	a -> y		81624	1					
ANR	81995	Identifier	a		81624	0					
ANR	81996	Identifier	y		81624	1					
ANR	81997	ExpressionStatement	tm -> maxx = a -> y + a -> h	2890:5:71987:72009	81624	1	True				
ANR	81998	AssignmentExpression	tm -> maxx = a -> y + a -> h		81624	0		=			
ANR	81999	PtrMemberAccess	tm -> maxx		81624	0					
ANR	82000	Identifier	tm		81624	0					
ANR	82001	Identifier	maxx		81624	1					
ANR	82002	AdditiveExpression	a -> y + a -> h		81624	1		+			
ANR	82003	PtrMemberAccess	a -> y		81624	0					
ANR	82004	Identifier	a		81624	0					
ANR	82005	Identifier	y		81624	1					
ANR	82006	PtrMemberAccess	a -> h		81624	1					
ANR	82007	Identifier	a		81624	0					
ANR	82008	Identifier	h		81624	1					
ANR	82009	ExpressionStatement	"r_list_add_sorted ( lyr , tm , tmplayercmp )"	2892:4:72021:72061	81624	4	True				
ANR	82010	CallExpression	"r_list_add_sorted ( lyr , tm , tmplayercmp )"		81624	0					
ANR	82011	Callee	r_list_add_sorted		81624	0					
ANR	82012	Identifier	r_list_add_sorted		81624	0					
ANR	82013	ArgumentList	lyr		81624	1					
ANR	82014	Argument	lyr		81624	0					
ANR	82015	Identifier	lyr		81624	0					
ANR	82016	Argument	tm		81624	1					
ANR	82017	Identifier	tm		81624	0					
ANR	82018	Argument	tmplayercmp		81624	2					
ANR	82019	Identifier	tmplayercmp		81624	0					
ANR	82020	IdentifierDeclStatement	bool many = r_list_length ( neighbours ) > 2 ;	2896:2:72075:72117	81624	16	True				
ANR	82021	IdentifierDecl	many = r_list_length ( neighbours ) > 2		81624	0					
ANR	82022	IdentifierDeclType	bool		81624	0					
ANR	82023	Identifier	many		81624	1					
ANR	82024	AssignmentExpression	many = r_list_length ( neighbours ) > 2		81624	2		=			
ANR	82025	Identifier	many		81624	0					
ANR	82026	RelationalExpression	r_list_length ( neighbours ) > 2		81624	1		>			
ANR	82027	CallExpression	r_list_length ( neighbours )		81624	0					
ANR	82028	Callee	r_list_length		81624	0					
ANR	82029	Identifier	r_list_length		81624	0					
ANR	82030	ArgumentList	neighbours		81624	1					
ANR	82031	Argument	neighbours		81624	0					
ANR	82032	Identifier	neighbours		81624	0					
ANR	82033	PrimaryExpression	2		81624	1					
ANR	82034	IfStatement	if ( many && ! g -> is_callgraph )		81624	17					
ANR	82035	Condition	many && ! g -> is_callgraph	2898:6:72126:72149	81624	0	True				
ANR	82036	AndExpression	many && ! g -> is_callgraph		81624	0		&&			
ANR	82037	Identifier	many		81624	0					
ANR	82038	UnaryOperationExpression	! g -> is_callgraph		81624	1					
ANR	82039	UnaryOperator	!		81624	0					
ANR	82040	PtrMemberAccess	g -> is_callgraph		81624	1					
ANR	82041	Identifier	g		81624	0					
ANR	82042	Identifier	is_callgraph		81624	1					
ANR	82043	CompoundStatement		71:32:1479:1479	81624	1					
ANR	82044	ExpressionStatement	ga -> out_nodes -> sorted = false	2899:3:72157:72186	81624	0	True				
ANR	82045	AssignmentExpression	ga -> out_nodes -> sorted = false		81624	0		=			
ANR	82046	PtrMemberAccess	ga -> out_nodes -> sorted		81624	0					
ANR	82047	PtrMemberAccess	ga -> out_nodes		81624	0					
ANR	82048	Identifier	ga		81624	0					
ANR	82049	Identifier	out_nodes		81624	1					
ANR	82050	Identifier	sorted		81624	1					
ANR	82051	Identifier	false		81624	1					
ANR	82052	ExpressionStatement	"r_list_sort ( neighbours , first_x_cmp )"	2900:3:72191:72228	81624	1	True				
ANR	82053	CallExpression	"r_list_sort ( neighbours , first_x_cmp )"		81624	0					
ANR	82054	Callee	r_list_sort		81624	0					
ANR	82055	Identifier	r_list_sort		81624	0					
ANR	82056	ArgumentList	neighbours		81624	1					
ANR	82057	Argument	neighbours		81624	0					
ANR	82058	Identifier	neighbours		81624	0					
ANR	82059	Argument	first_x_cmp		81624	1					
ANR	82060	Identifier	first_x_cmp		81624	0					
ANR	82061	Statement	graph_foreach_anode	2903:2:72237:72255	81624	18	True				
ANR	82062	Statement	(	2903:22:72257:72257	81624	19	True				
ANR	82063	Statement	neighbours	2903:23:72258:72267	81624	20	True				
ANR	82064	Statement	","	2903:33:72268:72268	81624	21	True				
ANR	82065	Statement	itn	2903:35:72270:72272	81624	22	True				
ANR	82066	Statement	","	2903:38:72273:72273	81624	23	True				
ANR	82067	Statement	gb	2903:40:72275:72276	81624	24	True				
ANR	82068	Statement	","	2903:42:72277:72277	81624	25	True				
ANR	82069	Statement	b	2903:44:72279:72279	81624	26	True				
ANR	82070	Statement	)	2903:45:72280:72280	81624	27	True				
ANR	82071	CompoundStatement		80:3:1707:1731	81624	28					
ANR	82072	ExpressionStatement	"out_nth = get_edge_number ( g , a , b , true )"	2904:3:72287:72328	81624	0	True				
ANR	82073	AssignmentExpression	"out_nth = get_edge_number ( g , a , b , true )"		81624	0		=			
ANR	82074	Identifier	out_nth		81624	0					
ANR	82075	CallExpression	"get_edge_number ( g , a , b , true )"		81624	1					
ANR	82076	Callee	get_edge_number		81624	0					
ANR	82077	Identifier	get_edge_number		81624	0					
ANR	82078	ArgumentList	g		81624	1					
ANR	82079	Argument	g		81624	0					
ANR	82080	Identifier	g		81624	0					
ANR	82081	Argument	a		81624	1					
ANR	82082	Identifier	a		81624	0					
ANR	82083	Argument	b		81624	2					
ANR	82084	Identifier	b		81624	0					
ANR	82085	Argument	true		81624	3					
ANR	82086	Identifier	true		81624	0					
ANR	82087	ExpressionStatement	"in_nth = get_edge_number ( g , a , b , false )"	2905:3:72333:72374	81624	1	True				
ANR	82088	AssignmentExpression	"in_nth = get_edge_number ( g , a , b , false )"		81624	0		=			
ANR	82089	Identifier	in_nth		81624	0					
ANR	82090	CallExpression	"get_edge_number ( g , a , b , false )"		81624	1					
ANR	82091	Callee	get_edge_number		81624	0					
ANR	82092	Identifier	get_edge_number		81624	0					
ANR	82093	ArgumentList	g		81624	1					
ANR	82094	Argument	g		81624	0					
ANR	82095	Identifier	g		81624	0					
ANR	82096	Argument	a		81624	1					
ANR	82097	Identifier	a		81624	0					
ANR	82098	Argument	b		81624	2					
ANR	82099	Identifier	b		81624	0					
ANR	82100	Argument	false		81624	3					
ANR	82101	Identifier	false		81624	0					
ANR	82102	IdentifierDeclStatement	bool parent_many = false ;	2907:3:72380:72404	81624	2	True				
ANR	82103	IdentifierDecl	parent_many = false		81624	0					
ANR	82104	IdentifierDeclType	bool		81624	0					
ANR	82105	Identifier	parent_many		81624	1					
ANR	82106	AssignmentExpression	parent_many = false		81624	2		=			
ANR	82107	Identifier	false		81624	0					
ANR	82108	Identifier	false		81624	1					
ANR	82109	IfStatement	if ( a -> is_dummy )		81624	3					
ANR	82110	Condition	a -> is_dummy	2908:7:72413:72423	81624	0	True				
ANR	82111	PtrMemberAccess	a -> is_dummy		81624	0					
ANR	82112	Identifier	a		81624	0					
ANR	82113	Identifier	is_dummy		81624	1					
ANR	82114	CompoundStatement		82:4:1759:1834	81624	1					
ANR	82115	IdentifierDeclStatement	RANode * in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data ) ;	2909:4:72432:72507	81624	0	True				
ANR	82116	IdentifierDecl	* in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data )		81624	0					
ANR	82117	IdentifierDeclType	RANode *		81624	0					
ANR	82118	Identifier	in		81624	1					
ANR	82119	AssignmentExpression	* in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data )		81624	2		=			
ANR	82120	Identifier	in		81624	0					
ANR	82121	CastExpression	( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data )		81624	1					
ANR	82122	CastTarget	RANode *		81624	0					
ANR	82123	PtrMemberAccess	( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data		81624	1					
ANR	82124	CastExpression	( RGraphNode * ) r_list_first ( ga -> in_nodes )		81624	0					
ANR	82125	CastTarget	RGraphNode *		81624	0					
ANR	82126	CallExpression	r_list_first ( ga -> in_nodes )		81624	1					
ANR	82127	Callee	r_list_first		81624	0					
ANR	82128	Identifier	r_list_first		81624	0					
ANR	82129	ArgumentList	ga -> in_nodes		81624	1					
ANR	82130	Argument	ga -> in_nodes		81624	0					
ANR	82131	PtrMemberAccess	ga -> in_nodes		81624	0					
ANR	82132	Identifier	ga		81624	0					
ANR	82133	Identifier	in_nodes		81624	1					
ANR	82134	Identifier	data		81624	1					
ANR	82135	WhileStatement	while ( in && in -> is_dummy )		81624	1					
ANR	82136	Condition	in && in -> is_dummy	2910:11:72520:72537	81624	0	True				
ANR	82137	AndExpression	in && in -> is_dummy		81624	0		&&			
ANR	82138	Identifier	in		81624	0					
ANR	82139	PtrMemberAccess	in -> is_dummy		81624	1					
ANR	82140	Identifier	in		81624	0					
ANR	82141	Identifier	is_dummy		81624	1					
ANR	82142	CompoundStatement		83:31:1867:1867	81624	1					
ANR	82143	ExpressionStatement	in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes ) ) -> data )	2911:5:72547:72623	81624	0	True				
ANR	82144	AssignmentExpression	in = ( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes ) ) -> data )		81624	0		=			
ANR	82145	Identifier	in		81624	0					
ANR	82146	CastExpression	( RANode * ) ( ( ( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes ) ) -> data )		81624	1					
ANR	82147	CastTarget	RANode *		81624	0					
ANR	82148	PtrMemberAccess	( ( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes ) ) -> data		81624	1					
ANR	82149	CastExpression	( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes )		81624	0					
ANR	82150	CastTarget	RGraphNode *		81624	0					
ANR	82151	CallExpression	r_list_first ( ( in -> gnode ) -> in_nodes )		81624	1					
ANR	82152	Callee	r_list_first		81624	0					
ANR	82153	Identifier	r_list_first		81624	0					
ANR	82154	ArgumentList	( in -> gnode ) -> in_nodes		81624	1					
ANR	82155	Argument	( in -> gnode ) -> in_nodes		81624	0					
ANR	82156	PtrMemberAccess	( in -> gnode ) -> in_nodes		81624	0					
ANR	82157	PtrMemberAccess	in -> gnode		81624	0					
ANR	82158	Identifier	in		81624	0					
ANR	82159	Identifier	gnode		81624	1					
ANR	82160	Identifier	in_nodes		81624	1					
ANR	82161	Identifier	data		81624	1					
ANR	82162	IfStatement	if ( in && in -> gnode )		81624	2					
ANR	82163	Condition	in && in -> gnode	2913:8:72639:72653	81624	0	True				
ANR	82164	AndExpression	in && in -> gnode		81624	0		&&			
ANR	82165	Identifier	in		81624	0					
ANR	82166	PtrMemberAccess	in -> gnode		81624	1					
ANR	82167	Identifier	in		81624	0					
ANR	82168	Identifier	gnode		81624	1					
ANR	82169	CompoundStatement		86:25:1983:1983	81624	1					
ANR	82170	ExpressionStatement	parent_many = r_list_length ( in -> gnode -> out_nodes ) > 2	2914:5:72663:72717	81624	0	True				
ANR	82171	AssignmentExpression	parent_many = r_list_length ( in -> gnode -> out_nodes ) > 2		81624	0		=			
ANR	82172	Identifier	parent_many		81624	0					
ANR	82173	RelationalExpression	r_list_length ( in -> gnode -> out_nodes ) > 2		81624	1		>			
ANR	82174	CallExpression	r_list_length ( in -> gnode -> out_nodes )		81624	0					
ANR	82175	Callee	r_list_length		81624	0					
ANR	82176	Identifier	r_list_length		81624	0					
ANR	82177	ArgumentList	in -> gnode -> out_nodes		81624	1					
ANR	82178	Argument	in -> gnode -> out_nodes		81624	0					
ANR	82179	PtrMemberAccess	in -> gnode -> out_nodes		81624	0					
ANR	82180	PtrMemberAccess	in -> gnode		81624	0					
ANR	82181	Identifier	in		81624	0					
ANR	82182	Identifier	gnode		81624	1					
ANR	82183	Identifier	out_nodes		81624	1					
ANR	82184	PrimaryExpression	2		81624	1					
ANR	82185	ElseStatement	else		81624	0					
ANR	82186	CompoundStatement		88:11:2057:2057	81624	0					
ANR	82187	ExpressionStatement	parent_many = false	2916:5:72737:72756	81624	0	True				
ANR	82188	AssignmentExpression	parent_many = false		81624	0		=			
ANR	82189	Identifier	parent_many		81624	0					
ANR	82190	Identifier	false		81624	1					
ANR	82191	ExpressionStatement	style . dot_style = DOT_STYLE_NORMAL	2920:3:72773:72807	81624	4	True				
ANR	82192	AssignmentExpression	style . dot_style = DOT_STYLE_NORMAL		81624	0		=			
ANR	82193	MemberAccess	style . dot_style		81624	0					
ANR	82194	Identifier	style		81624	0					
ANR	82195	Identifier	dot_style		81624	1					
ANR	82196	Identifier	DOT_STYLE_NORMAL		81624	1					
ANR	82197	IfStatement	if ( many || parent_many )		81624	5					
ANR	82198	Condition	many || parent_many	2921:7:72816:72834	81624	0	True				
ANR	82199	OrExpression	many || parent_many		81624	0		||			
ANR	82200	Identifier	many		81624	0					
ANR	82201	Identifier	parent_many		81624	1					
ANR	82202	CompoundStatement		94:28:2164:2164	81624	1					
ANR	82203	ExpressionStatement	style . color = LINE_UNCJMP	2922:4:72843:72868	81624	0	True				
ANR	82204	AssignmentExpression	style . color = LINE_UNCJMP		81624	0		=			
ANR	82205	MemberAccess	style . color		81624	0					
ANR	82206	Identifier	style		81624	0					
ANR	82207	Identifier	color		81624	1					
ANR	82208	Identifier	LINE_UNCJMP		81624	1					
ANR	82209	ElseStatement	else		81624	0					
ANR	82210	CompoundStatement		96:10:2207:2207	81624	0					
ANR	82211	SwitchStatement	switch ( out_nth )		81624	0					
ANR	82212	Condition	out_nth	2924:12:72894:72900	81624	0	True				
ANR	82213	Identifier	out_nth		81624	0					
ANR	82214	CompoundStatement		97:21:2230:2230	81624	1					
ANR	82215	Label	case 0 :	2925:4:72909:72915	81624	0	True				
ANR	82216	ExpressionStatement	style . color = LINE_TRUE	2926:5:72922:72945	81624	1	True				
ANR	82217	AssignmentExpression	style . color = LINE_TRUE		81624	0		=			
ANR	82218	MemberAccess	style . color		81624	0					
ANR	82219	Identifier	style		81624	0					
ANR	82220	Identifier	color		81624	1					
ANR	82221	Identifier	LINE_TRUE		81624	1					
ANR	82222	ExpressionStatement	style . dot_style = DOT_STYLE_CONDITIONAL	2927:5:72952:72991	81624	2	True				
ANR	82223	AssignmentExpression	style . dot_style = DOT_STYLE_CONDITIONAL		81624	0		=			
ANR	82224	MemberAccess	style . dot_style		81624	0					
ANR	82225	Identifier	style		81624	0					
ANR	82226	Identifier	dot_style		81624	1					
ANR	82227	Identifier	DOT_STYLE_CONDITIONAL		81624	1					
ANR	82228	BreakStatement	break ;	2928:5:72998:73003	81624	3	True				
ANR	82229	Label	case 1 :	2929:4:73009:73015	81624	4	True				
ANR	82230	ExpressionStatement	style . color = LINE_FALSE	2930:5:73022:73046	81624	5	True				
ANR	82231	AssignmentExpression	style . color = LINE_FALSE		81624	0		=			
ANR	82232	MemberAccess	style . color		81624	0					
ANR	82233	Identifier	style		81624	0					
ANR	82234	Identifier	color		81624	1					
ANR	82235	Identifier	LINE_FALSE		81624	1					
ANR	82236	ExpressionStatement	style . dot_style = DOT_STYLE_CONDITIONAL	2931:5:73053:73092	81624	6	True				
ANR	82237	AssignmentExpression	style . dot_style = DOT_STYLE_CONDITIONAL		81624	0		=			
ANR	82238	MemberAccess	style . dot_style		81624	0					
ANR	82239	Identifier	style		81624	0					
ANR	82240	Identifier	dot_style		81624	1					
ANR	82241	Identifier	DOT_STYLE_CONDITIONAL		81624	1					
ANR	82242	BreakStatement	break ;	2932:5:73099:73104	81624	7	True				
ANR	82243	Statement	case	2933:4:73110:73113	81624	8	True				
ANR	82244	Statement	-	2933:9:73115:73115	81624	9	True				
ANR	82245	Label	1 :	2933:10:73116:73117	81624	10	True				
ANR	82246	ExpressionStatement	style . color = LINE_UNCJMP	2934:5:73124:73149	81624	11	True				
ANR	82247	AssignmentExpression	style . color = LINE_UNCJMP		81624	0		=			
ANR	82248	MemberAccess	style . color		81624	0					
ANR	82249	Identifier	style		81624	0					
ANR	82250	Identifier	color		81624	1					
ANR	82251	Identifier	LINE_UNCJMP		81624	1					
ANR	82252	BreakStatement	break ;	2935:5:73156:73161	81624	12	True				
ANR	82253	Label	default :	2936:4:73167:73174	81624	13	True				
ANR	82254	Identifier	default		81624	0					
ANR	82255	ExpressionStatement	style . color = LINE_NONE	2937:5:73181:73204	81624	14	True				
ANR	82256	AssignmentExpression	style . color = LINE_NONE		81624	0		=			
ANR	82257	MemberAccess	style . color		81624	0					
ANR	82258	Identifier	style		81624	0					
ANR	82259	Identifier	color		81624	1					
ANR	82260	Identifier	LINE_NONE		81624	1					
ANR	82261	BreakStatement	break ;	2938:5:73211:73216	81624	15	True				
ANR	82262	SwitchStatement	switch ( g -> layout )		81624	6					
ANR	82263	Condition	g -> layout	2942:11:73241:73249	81624	0	True				
ANR	82264	PtrMemberAccess	g -> layout		81624	0					
ANR	82265	Identifier	g		81624	0					
ANR	82266	Identifier	layout		81624	1					
ANR	82267	CompoundStatement		115:22:2579:2579	81624	1					
ANR	82268	Label	case 0 :	2943:3:73257:73263	81624	0	True				
ANR	82269	Label	default :	2944:3:73268:73275	81624	1	True				
ANR	82270	Identifier	default		81624	0					
ANR	82271	ExpressionStatement	style . symbol = ( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_VERT : style . color	2945:4:73281:73354	81624	2	True				
ANR	82272	AssignmentExpression	style . symbol = ( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_VERT : style . color		81624	0		=			
ANR	82273	MemberAccess	style . symbol		81624	0					
ANR	82274	Identifier	style		81624	0					
ANR	82275	Identifier	symbol		81624	1					
ANR	82276	ConditionalExpression	( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_VERT : style . color		81624	1					
ANR	82277	Condition	! g -> hints || a -> is_dummy		81624	0					
ANR	82278	OrExpression	! g -> hints || a -> is_dummy		81624	0		||			
ANR	82279	UnaryOperationExpression	! g -> hints		81624	0					
ANR	82280	UnaryOperator	!		81624	0					
ANR	82281	PtrMemberAccess	g -> hints		81624	1					
ANR	82282	Identifier	g		81624	0					
ANR	82283	Identifier	hints		81624	1					
ANR	82284	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	82285	Identifier	a		81624	0					
ANR	82286	Identifier	is_dummy		81624	1					
ANR	82287	Identifier	LINE_NOSYM_VERT		81624	1					
ANR	82288	MemberAccess	style . color		81624	2					
ANR	82289	Identifier	style		81624	0					
ANR	82290	Identifier	color		81624	1					
ANR	82291	IfStatement	if ( a -> y + a -> h > b -> y )		81624	3					
ANR	82292	Condition	a -> y + a -> h > b -> y	2946:8:73364:73381	81624	0	True				
ANR	82293	RelationalExpression	a -> y + a -> h > b -> y		81624	0		>			
ANR	82294	AdditiveExpression	a -> y + a -> h		81624	0		+			
ANR	82295	PtrMemberAccess	a -> y		81624	0					
ANR	82296	Identifier	a		81624	0					
ANR	82297	Identifier	y		81624	1					
ANR	82298	PtrMemberAccess	a -> h		81624	1					
ANR	82299	Identifier	a		81624	0					
ANR	82300	Identifier	h		81624	1					
ANR	82301	PtrMemberAccess	b -> y		81624	1					
ANR	82302	Identifier	b		81624	0					
ANR	82303	Identifier	y		81624	1					
ANR	82304	CompoundStatement		119:28:2711:2711	81624	1					
ANR	82305	ExpressionStatement	style . dot_style = DOT_STYLE_BACKEDGE	2947:5:73391:73427	81624	0	True				
ANR	82306	AssignmentExpression	style . dot_style = DOT_STYLE_BACKEDGE		81624	0		=			
ANR	82307	MemberAccess	style . dot_style		81624	0					
ANR	82308	Identifier	style		81624	0					
ANR	82309	Identifier	dot_style		81624	1					
ANR	82310	Identifier	DOT_STYLE_BACKEDGE		81624	1					
ANR	82311	ExpressionStatement	a_x_inc = R_EDGES_X_INC + 2 * ( out_nth + 1 )	2950:4:73440:73483	81624	4	True				
ANR	82312	AssignmentExpression	a_x_inc = R_EDGES_X_INC + 2 * ( out_nth + 1 )		81624	0		=			
ANR	82313	Identifier	a_x_inc		81624	0					
ANR	82314	AdditiveExpression	R_EDGES_X_INC + 2 * ( out_nth + 1 )		81624	1		+			
ANR	82315	Identifier	R_EDGES_X_INC		81624	0					
ANR	82316	MultiplicativeExpression	2 * ( out_nth + 1 )		81624	1		*			
ANR	82317	PrimaryExpression	2		81624	0					
ANR	82318	AdditiveExpression	out_nth + 1		81624	1		+			
ANR	82319	Identifier	out_nth		81624	0					
ANR	82320	PrimaryExpression	1		81624	1					
ANR	82321	ExpressionStatement	b_x_inc = R_EDGES_X_INC + 2 * ( in_nth + 1 )	2951:4:73489:73531	81624	5	True				
ANR	82322	AssignmentExpression	b_x_inc = R_EDGES_X_INC + 2 * ( in_nth + 1 )		81624	0		=			
ANR	82323	Identifier	b_x_inc		81624	0					
ANR	82324	AdditiveExpression	R_EDGES_X_INC + 2 * ( in_nth + 1 )		81624	1		+			
ANR	82325	Identifier	R_EDGES_X_INC		81624	0					
ANR	82326	MultiplicativeExpression	2 * ( in_nth + 1 )		81624	1		*			
ANR	82327	PrimaryExpression	2		81624	0					
ANR	82328	AdditiveExpression	in_nth + 1		81624	1		+			
ANR	82329	Identifier	in_nth		81624	0					
ANR	82330	PrimaryExpression	1		81624	1					
ANR	82331	ExpressionStatement	bx = b -> is_dummy ? b -> x : ( b -> x + b_x_inc )	2953:4:73538:73580	81624	6	True				
ANR	82332	AssignmentExpression	bx = b -> is_dummy ? b -> x : ( b -> x + b_x_inc )		81624	0		=			
ANR	82333	Identifier	bx		81624	0					
ANR	82334	ConditionalExpression	b -> is_dummy ? b -> x : ( b -> x + b_x_inc )		81624	1					
ANR	82335	Condition	b -> is_dummy		81624	0					
ANR	82336	PtrMemberAccess	b -> is_dummy		81624	0					
ANR	82337	Identifier	b		81624	0					
ANR	82338	Identifier	is_dummy		81624	1					
ANR	82339	PtrMemberAccess	b -> x		81624	1					
ANR	82340	Identifier	b		81624	0					
ANR	82341	Identifier	x		81624	1					
ANR	82342	AdditiveExpression	b -> x + b_x_inc		81624	2		+			
ANR	82343	PtrMemberAccess	b -> x		81624	0					
ANR	82344	Identifier	b		81624	0					
ANR	82345	Identifier	x		81624	1					
ANR	82346	Identifier	b_x_inc		81624	1					
ANR	82347	ExpressionStatement	ay = a -> y + a -> h	2954:4:73586:73602	81624	7	True				
ANR	82348	AssignmentExpression	ay = a -> y + a -> h		81624	0		=			
ANR	82349	Identifier	ay		81624	0					
ANR	82350	AdditiveExpression	a -> y + a -> h		81624	1		+			
ANR	82351	PtrMemberAccess	a -> y		81624	0					
ANR	82352	Identifier	a		81624	0					
ANR	82353	Identifier	y		81624	1					
ANR	82354	PtrMemberAccess	a -> h		81624	1					
ANR	82355	Identifier	a		81624	0					
ANR	82356	Identifier	h		81624	1					
ANR	82357	ExpressionStatement	by = b -> y - 1	2955:4:73608:73621	81624	8	True				
ANR	82358	AssignmentExpression	by = b -> y - 1		81624	0		=			
ANR	82359	Identifier	by		81624	0					
ANR	82360	AdditiveExpression	b -> y - 1		81624	1		-			
ANR	82361	PtrMemberAccess	b -> y		81624	0					
ANR	82362	Identifier	b		81624	0					
ANR	82363	Identifier	y		81624	1					
ANR	82364	PrimaryExpression	1		81624	1					
ANR	82365	IfStatement	if ( many && ! g -> is_callgraph )		81624	9					
ANR	82366	Condition	many && ! g -> is_callgraph	2957:8:73632:73655	81624	0	True				
ANR	82367	AndExpression	many && ! g -> is_callgraph		81624	0		&&			
ANR	82368	Identifier	many		81624	0					
ANR	82369	UnaryOperationExpression	! g -> is_callgraph		81624	1					
ANR	82370	UnaryOperator	!		81624	0					
ANR	82371	PtrMemberAccess	g -> is_callgraph		81624	1					
ANR	82372	Identifier	g		81624	0					
ANR	82373	Identifier	is_callgraph		81624	1					
ANR	82374	CompoundStatement		131:5:2992:3044	81624	1					
ANR	82375	IdentifierDeclStatement	int t = R_EDGES_X_INC + 2 * ( neighbours -> length + 1 ) ;	2958:5:73665:73717	81624	0	True				
ANR	82376	IdentifierDecl	t = R_EDGES_X_INC + 2 * ( neighbours -> length + 1 )		81624	0					
ANR	82377	IdentifierDeclType	int		81624	0					
ANR	82378	Identifier	t		81624	1					
ANR	82379	AssignmentExpression	t = R_EDGES_X_INC + 2 * ( neighbours -> length + 1 )		81624	2		=			
ANR	82380	Identifier	t		81624	0					
ANR	82381	AdditiveExpression	R_EDGES_X_INC + 2 * ( neighbours -> length + 1 )		81624	1		+			
ANR	82382	Identifier	R_EDGES_X_INC		81624	0					
ANR	82383	MultiplicativeExpression	2 * ( neighbours -> length + 1 )		81624	1		*			
ANR	82384	PrimaryExpression	2		81624	0					
ANR	82385	AdditiveExpression	neighbours -> length + 1		81624	1		+			
ANR	82386	PtrMemberAccess	neighbours -> length		81624	0					
ANR	82387	Identifier	neighbours		81624	0					
ANR	82388	Identifier	length		81624	1					
ANR	82389	PrimaryExpression	1		81624	1					
ANR	82390	ExpressionStatement	ax = a -> is_dummy ? a -> x : ( a -> x + a -> w / 2 + ( t / 2 - a_x_inc ) )	2959:5:73724:73783	81624	1	True				
ANR	82391	AssignmentExpression	ax = a -> is_dummy ? a -> x : ( a -> x + a -> w / 2 + ( t / 2 - a_x_inc ) )		81624	0		=			
ANR	82392	Identifier	ax		81624	0					
ANR	82393	ConditionalExpression	a -> is_dummy ? a -> x : ( a -> x + a -> w / 2 + ( t / 2 - a_x_inc ) )		81624	1					
ANR	82394	Condition	a -> is_dummy		81624	0					
ANR	82395	PtrMemberAccess	a -> is_dummy		81624	0					
ANR	82396	Identifier	a		81624	0					
ANR	82397	Identifier	is_dummy		81624	1					
ANR	82398	PtrMemberAccess	a -> x		81624	1					
ANR	82399	Identifier	a		81624	0					
ANR	82400	Identifier	x		81624	1					
ANR	82401	AdditiveExpression	a -> x + a -> w / 2 + ( t / 2 - a_x_inc )		81624	2		+			
ANR	82402	PtrMemberAccess	a -> x		81624	0					
ANR	82403	Identifier	a		81624	0					
ANR	82404	Identifier	x		81624	1					
ANR	82405	AdditiveExpression	a -> w / 2 + ( t / 2 - a_x_inc )		81624	1		+			
ANR	82406	MultiplicativeExpression	a -> w / 2		81624	0		/			
ANR	82407	PtrMemberAccess	a -> w		81624	0					
ANR	82408	Identifier	a		81624	0					
ANR	82409	Identifier	w		81624	1					
ANR	82410	PrimaryExpression	2		81624	1					
ANR	82411	AdditiveExpression	t / 2 - a_x_inc		81624	1		-			
ANR	82412	MultiplicativeExpression	t / 2		81624	0		/			
ANR	82413	Identifier	t		81624	0					
ANR	82414	PrimaryExpression	2		81624	1					
ANR	82415	Identifier	a_x_inc		81624	1					
ANR	82416	ExpressionStatement	bendpoint = bx < ax ? neighbours -> length - out_nth : out_nth	2960:5:73790:73851	81624	2	True				
ANR	82417	AssignmentExpression	bendpoint = bx < ax ? neighbours -> length - out_nth : out_nth		81624	0		=			
ANR	82418	Identifier	bendpoint		81624	0					
ANR	82419	ConditionalExpression	bx < ax ? neighbours -> length - out_nth : out_nth		81624	1					
ANR	82420	Condition	bx < ax		81624	0					
ANR	82421	RelationalExpression	bx < ax		81624	0		<			
ANR	82422	Identifier	bx		81624	0					
ANR	82423	Identifier	ax		81624	1					
ANR	82424	AdditiveExpression	neighbours -> length - out_nth		81624	1		-			
ANR	82425	PtrMemberAccess	neighbours -> length		81624	0					
ANR	82426	Identifier	neighbours		81624	0					
ANR	82427	Identifier	length		81624	1					
ANR	82428	Identifier	out_nth		81624	1					
ANR	82429	Identifier	out_nth		81624	2					
ANR	82430	ElseStatement	else		81624	0					
ANR	82431	CompoundStatement		134:11:3191:3191	81624	0					
ANR	82432	ExpressionStatement	ax = a -> is_dummy ? a -> x : ( a -> x + a_x_inc )	2962:5:73871:73913	81624	0	True				
ANR	82433	AssignmentExpression	ax = a -> is_dummy ? a -> x : ( a -> x + a_x_inc )		81624	0		=			
ANR	82434	Identifier	ax		81624	0					
ANR	82435	ConditionalExpression	a -> is_dummy ? a -> x : ( a -> x + a_x_inc )		81624	1					
ANR	82436	Condition	a -> is_dummy		81624	0					
ANR	82437	PtrMemberAccess	a -> is_dummy		81624	0					
ANR	82438	Identifier	a		81624	0					
ANR	82439	Identifier	is_dummy		81624	1					
ANR	82440	PtrMemberAccess	a -> x		81624	1					
ANR	82441	Identifier	a		81624	0					
ANR	82442	Identifier	x		81624	1					
ANR	82443	AdditiveExpression	a -> x + a_x_inc		81624	2		+			
ANR	82444	PtrMemberAccess	a -> x		81624	0					
ANR	82445	Identifier	a		81624	0					
ANR	82446	Identifier	x		81624	1					
ANR	82447	Identifier	a_x_inc		81624	1					
ANR	82448	ExpressionStatement	bendpoint = tm -> edgectr	2963:5:73920:73943	81624	1	True				
ANR	82449	AssignmentExpression	bendpoint = tm -> edgectr		81624	0		=			
ANR	82450	Identifier	bendpoint		81624	0					
ANR	82451	PtrMemberAccess	tm -> edgectr		81624	1					
ANR	82452	Identifier	tm		81624	0					
ANR	82453	Identifier	edgectr		81624	1					
ANR	82454	IfStatement	if ( ! a -> is_dummy && itn == neighbours -> head && out_nth == 0 && bx > ax )		81624	10					
ANR	82455	Condition	! a -> is_dummy && itn == neighbours -> head && out_nth == 0 && bx > ax	2966:8:73960:74025	81624	0	True				
ANR	82456	AndExpression	! a -> is_dummy && itn == neighbours -> head && out_nth == 0 && bx > ax		81624	0		&&			
ANR	82457	UnaryOperationExpression	! a -> is_dummy		81624	0					
ANR	82458	UnaryOperator	!		81624	0					
ANR	82459	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	82460	Identifier	a		81624	0					
ANR	82461	Identifier	is_dummy		81624	1					
ANR	82462	AndExpression	itn == neighbours -> head && out_nth == 0 && bx > ax		81624	1		&&			
ANR	82463	EqualityExpression	itn == neighbours -> head		81624	0		==			
ANR	82464	Identifier	itn		81624	0					
ANR	82465	PtrMemberAccess	neighbours -> head		81624	1					
ANR	82466	Identifier	neighbours		81624	0					
ANR	82467	Identifier	head		81624	1					
ANR	82468	AndExpression	out_nth == 0 && bx > ax		81624	1		&&			
ANR	82469	EqualityExpression	out_nth == 0		81624	0		==			
ANR	82470	Identifier	out_nth		81624	0					
ANR	82471	PrimaryExpression	0		81624	1					
ANR	82472	RelationalExpression	bx > ax		81624	1		>			
ANR	82473	Identifier	bx		81624	0					
ANR	82474	Identifier	ax		81624	1					
ANR	82475	CompoundStatement		139:76:3355:3355	81624	1					
ANR	82476	ExpressionStatement	ax += ( many && ! g -> is_callgraph ) ? 0 : 4	2967:5:74035:74075	81624	0	True				
ANR	82477	AssignmentExpression	ax += ( many && ! g -> is_callgraph ) ? 0 : 4		81624	0		+=			
ANR	82478	Identifier	ax		81624	0					
ANR	82479	ConditionalExpression	( many && ! g -> is_callgraph ) ? 0 : 4		81624	1					
ANR	82480	Condition	many && ! g -> is_callgraph		81624	0					
ANR	82481	AndExpression	many && ! g -> is_callgraph		81624	0		&&			
ANR	82482	Identifier	many		81624	0					
ANR	82483	UnaryOperationExpression	! g -> is_callgraph		81624	1					
ANR	82484	UnaryOperator	!		81624	0					
ANR	82485	PtrMemberAccess	g -> is_callgraph		81624	1					
ANR	82486	Identifier	g		81624	0					
ANR	82487	Identifier	is_callgraph		81624	1					
ANR	82488	PrimaryExpression	0		81624	1					
ANR	82489	PrimaryExpression	4		81624	2					
ANR	82490	IfStatement	if ( a -> h < a -> layer_height )		81624	11					
ANR	82491	Condition	a -> h < a -> layer_height	2969:8:74091:74112	81624	0	True				
ANR	82492	RelationalExpression	a -> h < a -> layer_height		81624	0		<			
ANR	82493	PtrMemberAccess	a -> h		81624	0					
ANR	82494	Identifier	a		81624	0					
ANR	82495	Identifier	h		81624	1					
ANR	82496	PtrMemberAccess	a -> layer_height		81624	1					
ANR	82497	Identifier	a		81624	0					
ANR	82498	Identifier	layer_height		81624	1					
ANR	82499	CompoundStatement		142:32:3442:3442	81624	1					
ANR	82500	ExpressionStatement	"r_cons_canvas_line ( g -> can , ax , ay , ax , ay + a -> layer_height - a -> h , & style )"	2970:5:74122:74198	81624	0	True				
ANR	82501	CallExpression	"r_cons_canvas_line ( g -> can , ax , ay , ax , ay + a -> layer_height - a -> h , & style )"		81624	0					
ANR	82502	Callee	r_cons_canvas_line		81624	0					
ANR	82503	Identifier	r_cons_canvas_line		81624	0					
ANR	82504	ArgumentList	g -> can		81624	1					
ANR	82505	Argument	g -> can		81624	0					
ANR	82506	PtrMemberAccess	g -> can		81624	0					
ANR	82507	Identifier	g		81624	0					
ANR	82508	Identifier	can		81624	1					
ANR	82509	Argument	ax		81624	1					
ANR	82510	Identifier	ax		81624	0					
ANR	82511	Argument	ay		81624	2					
ANR	82512	Identifier	ay		81624	0					
ANR	82513	Argument	ax		81624	3					
ANR	82514	Identifier	ax		81624	0					
ANR	82515	Argument	ay + a -> layer_height - a -> h		81624	4					
ANR	82516	AdditiveExpression	ay + a -> layer_height - a -> h		81624	0		+			
ANR	82517	Identifier	ay		81624	0					
ANR	82518	AdditiveExpression	a -> layer_height - a -> h		81624	1		-			
ANR	82519	PtrMemberAccess	a -> layer_height		81624	0					
ANR	82520	Identifier	a		81624	0					
ANR	82521	Identifier	layer_height		81624	1					
ANR	82522	PtrMemberAccess	a -> h		81624	1					
ANR	82523	Identifier	a		81624	0					
ANR	82524	Identifier	h		81624	1					
ANR	82525	Argument	& style		81624	5					
ANR	82526	UnaryOperationExpression	& style		81624	0					
ANR	82527	UnaryOperator	&		81624	0					
ANR	82528	Identifier	style		81624	1					
ANR	82529	ExpressionStatement	ay = a -> y + a -> layer_height	2971:5:74205:74232	81624	1	True				
ANR	82530	AssignmentExpression	ay = a -> y + a -> layer_height		81624	0		=			
ANR	82531	Identifier	ay		81624	0					
ANR	82532	AdditiveExpression	a -> y + a -> layer_height		81624	1		+			
ANR	82533	PtrMemberAccess	a -> y		81624	0					
ANR	82534	Identifier	a		81624	0					
ANR	82535	Identifier	y		81624	1					
ANR	82536	PtrMemberAccess	a -> layer_height		81624	1					
ANR	82537	Identifier	a		81624	0					
ANR	82538	Identifier	layer_height		81624	1					
ANR	82539	ExpressionStatement	style . symbol = LINE_NOSYM_VERT	2972:5:74239:74269	81624	2	True				
ANR	82540	AssignmentExpression	style . symbol = LINE_NOSYM_VERT		81624	0		=			
ANR	82541	MemberAccess	style . symbol		81624	0					
ANR	82542	Identifier	style		81624	0					
ANR	82543	Identifier	symbol		81624	1					
ANR	82544	Identifier	LINE_NOSYM_VERT		81624	1					
ANR	82545	IfStatement	if ( by >= ay )		81624	12					
ANR	82546	Condition	by >= ay	2974:8:74285:74292	81624	0	True				
ANR	82547	RelationalExpression	by >= ay		81624	0		>=			
ANR	82548	Identifier	by		81624	0					
ANR	82549	Identifier	ay		81624	1					
ANR	82550	CompoundStatement		147:18:3622:3622	81624	1					
ANR	82551	ExpressionStatement	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , bx , by , & style , bendpoint , true )"	2975:5:74302:74385	81624	0	True				
ANR	82552	CallExpression	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , bx , by , & style , bendpoint , true )"		81624	0					
ANR	82553	Callee	r_cons_canvas_line_square_defined		81624	0					
ANR	82554	Identifier	r_cons_canvas_line_square_defined		81624	0					
ANR	82555	ArgumentList	g -> can		81624	1					
ANR	82556	Argument	g -> can		81624	0					
ANR	82557	PtrMemberAccess	g -> can		81624	0					
ANR	82558	Identifier	g		81624	0					
ANR	82559	Identifier	can		81624	1					
ANR	82560	Argument	ax		81624	1					
ANR	82561	Identifier	ax		81624	0					
ANR	82562	Argument	ay		81624	2					
ANR	82563	Identifier	ay		81624	0					
ANR	82564	Argument	bx		81624	3					
ANR	82565	Identifier	bx		81624	0					
ANR	82566	Argument	by		81624	4					
ANR	82567	Identifier	by		81624	0					
ANR	82568	Argument	& style		81624	5					
ANR	82569	UnaryOperationExpression	& style		81624	0					
ANR	82570	UnaryOperator	&		81624	0					
ANR	82571	Identifier	style		81624	1					
ANR	82572	Argument	bendpoint		81624	6					
ANR	82573	Identifier	bendpoint		81624	0					
ANR	82574	Argument	true		81624	7					
ANR	82575	Identifier	true		81624	0					
ANR	82576	ElseStatement	else		81624	0					
ANR	82577	CompoundStatement		150:5:3732:3805	81624	0					
ANR	82578	IdentifierDeclStatement	"struct tmpbackedgeinfo * tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) ) ;"	2977:5:74405:74478	81624	0	True				
ANR	82579	IdentifierDecl	"* tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	0					
ANR	82580	IdentifierDeclType	struct tmpbackedgeinfo *		81624	0					
ANR	82581	Identifier	tmp		81624	1					
ANR	82582	AssignmentExpression	"* tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	2		=			
ANR	82583	Identifier	tmp		81624	0					
ANR	82584	CallExpression	"calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	1					
ANR	82585	Callee	calloc		81624	0					
ANR	82586	Identifier	calloc		81624	0					
ANR	82587	ArgumentList	1		81624	1					
ANR	82588	Argument	1		81624	0					
ANR	82589	PrimaryExpression	1		81624	0					
ANR	82590	Argument	sizeof ( struct tmpbackedgeinfo )		81624	1					
ANR	82591	SizeofExpression	sizeof ( struct tmpbackedgeinfo )		81624	0					
ANR	82592	Sizeof	sizeof		81624	0					
ANR	82593	SizeofOperand	struct tmpbackedgeinfo		81624	1					
ANR	82594	ExpressionStatement	tmp -> ax = ax	2978:5:74485:74497	81624	1	True				
ANR	82595	AssignmentExpression	tmp -> ax = ax		81624	0		=			
ANR	82596	PtrMemberAccess	tmp -> ax		81624	0					
ANR	82597	Identifier	tmp		81624	0					
ANR	82598	Identifier	ax		81624	1					
ANR	82599	Identifier	ax		81624	1					
ANR	82600	ExpressionStatement	tmp -> bx = bx	2979:5:74504:74516	81624	2	True				
ANR	82601	AssignmentExpression	tmp -> bx = bx		81624	0		=			
ANR	82602	PtrMemberAccess	tmp -> bx		81624	0					
ANR	82603	Identifier	tmp		81624	0					
ANR	82604	Identifier	bx		81624	1					
ANR	82605	Identifier	bx		81624	1					
ANR	82606	ExpressionStatement	tmp -> ay = ay	2980:5:74523:74535	81624	3	True				
ANR	82607	AssignmentExpression	tmp -> ay = ay		81624	0		=			
ANR	82608	PtrMemberAccess	tmp -> ay		81624	0					
ANR	82609	Identifier	tmp		81624	0					
ANR	82610	Identifier	ay		81624	1					
ANR	82611	Identifier	ay		81624	1					
ANR	82612	ExpressionStatement	tmp -> by = by	2981:5:74542:74554	81624	4	True				
ANR	82613	AssignmentExpression	tmp -> by = by		81624	0		=			
ANR	82614	PtrMemberAccess	tmp -> by		81624	0					
ANR	82615	Identifier	tmp		81624	0					
ANR	82616	Identifier	by		81624	1					
ANR	82617	Identifier	by		81624	1					
ANR	82618	ExpressionStatement	tmp -> edgectr = bendpoint	2982:5:74561:74585	81624	5	True				
ANR	82619	AssignmentExpression	tmp -> edgectr = bendpoint		81624	0		=			
ANR	82620	PtrMemberAccess	tmp -> edgectr		81624	0					
ANR	82621	Identifier	tmp		81624	0					
ANR	82622	Identifier	edgectr		81624	1					
ANR	82623	Identifier	bendpoint		81624	1					
ANR	82624	ExpressionStatement	tmp -> fromlayer = a -> layer	2983:5:74592:74617	81624	6	True				
ANR	82625	AssignmentExpression	tmp -> fromlayer = a -> layer		81624	0		=			
ANR	82626	PtrMemberAccess	tmp -> fromlayer		81624	0					
ANR	82627	Identifier	tmp		81624	0					
ANR	82628	Identifier	fromlayer		81624	1					
ANR	82629	PtrMemberAccess	a -> layer		81624	1					
ANR	82630	Identifier	a		81624	0					
ANR	82631	Identifier	layer		81624	1					
ANR	82632	ExpressionStatement	tmp -> tolayer = b -> layer	2984:5:74624:74647	81624	7	True				
ANR	82633	AssignmentExpression	tmp -> tolayer = b -> layer		81624	0		=			
ANR	82634	PtrMemberAccess	tmp -> tolayer		81624	0					
ANR	82635	Identifier	tmp		81624	0					
ANR	82636	Identifier	tolayer		81624	1					
ANR	82637	PtrMemberAccess	b -> layer		81624	1					
ANR	82638	Identifier	b		81624	0					
ANR	82639	Identifier	layer		81624	1					
ANR	82640	ExpressionStatement	tmp -> style = style	2985:5:74654:74672	81624	8	True				
ANR	82641	AssignmentExpression	tmp -> style = style		81624	0		=			
ANR	82642	PtrMemberAccess	tmp -> style		81624	0					
ANR	82643	Identifier	tmp		81624	0					
ANR	82644	Identifier	style		81624	1					
ANR	82645	Identifier	style		81624	1					
ANR	82646	ExpressionStatement	"r_list_append ( bckedges , tmp )"	2986:5:74679:74708	81624	9	True				
ANR	82647	CallExpression	"r_list_append ( bckedges , tmp )"		81624	0					
ANR	82648	Callee	r_list_append		81624	0					
ANR	82649	Identifier	r_list_append		81624	0					
ANR	82650	ArgumentList	bckedges		81624	1					
ANR	82651	Argument	bckedges		81624	0					
ANR	82652	Identifier	bckedges		81624	0					
ANR	82653	Argument	tmp		81624	1					
ANR	82654	Identifier	tmp		81624	0					
ANR	82655	IfStatement	if ( b -> is_dummy )		81624	13					
ANR	82656	Condition	b -> is_dummy	2988:8:74724:74734	81624	0	True				
ANR	82657	PtrMemberAccess	b -> is_dummy		81624	0					
ANR	82658	Identifier	b		81624	0					
ANR	82659	Identifier	is_dummy		81624	1					
ANR	82660	CompoundStatement		161:21:4064:4064	81624	1					
ANR	82661	ExpressionStatement	style . symbol = LINE_NOSYM_VERT	2989:5:74744:74774	81624	0	True				
ANR	82662	AssignmentExpression	style . symbol = LINE_NOSYM_VERT		81624	0		=			
ANR	82663	MemberAccess	style . symbol		81624	0					
ANR	82664	Identifier	style		81624	0					
ANR	82665	Identifier	symbol		81624	1					
ANR	82666	Identifier	LINE_NOSYM_VERT		81624	1					
ANR	82667	ExpressionStatement	"r_cons_canvas_line ( g -> can , bx , by , bx , b -> y + b -> h , & style )"	2990:5:74781:74841	81624	1	True				
ANR	82668	CallExpression	"r_cons_canvas_line ( g -> can , bx , by , bx , b -> y + b -> h , & style )"		81624	0					
ANR	82669	Callee	r_cons_canvas_line		81624	0					
ANR	82670	Identifier	r_cons_canvas_line		81624	0					
ANR	82671	ArgumentList	g -> can		81624	1					
ANR	82672	Argument	g -> can		81624	0					
ANR	82673	PtrMemberAccess	g -> can		81624	0					
ANR	82674	Identifier	g		81624	0					
ANR	82675	Identifier	can		81624	1					
ANR	82676	Argument	bx		81624	1					
ANR	82677	Identifier	bx		81624	0					
ANR	82678	Argument	by		81624	2					
ANR	82679	Identifier	by		81624	0					
ANR	82680	Argument	bx		81624	3					
ANR	82681	Identifier	bx		81624	0					
ANR	82682	Argument	b -> y + b -> h		81624	4					
ANR	82683	AdditiveExpression	b -> y + b -> h		81624	0		+			
ANR	82684	PtrMemberAccess	b -> y		81624	0					
ANR	82685	Identifier	b		81624	0					
ANR	82686	Identifier	y		81624	1					
ANR	82687	PtrMemberAccess	b -> h		81624	1					
ANR	82688	Identifier	b		81624	0					
ANR	82689	Identifier	h		81624	1					
ANR	82690	Argument	& style		81624	5					
ANR	82691	UnaryOperationExpression	& style		81624	0					
ANR	82692	UnaryOperator	&		81624	0					
ANR	82693	Identifier	style		81624	1					
ANR	82694	IfStatement	if ( b -> x != a -> x || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy ) )		81624	14					
ANR	82695	Condition	b -> x != a -> x || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )	2992:8:74857:74958	81624	0	True				
ANR	82696	OrExpression	b -> x != a -> x || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	0		||			
ANR	82697	EqualityExpression	b -> x != a -> x		81624	0		!=			
ANR	82698	PtrMemberAccess	b -> x		81624	0					
ANR	82699	Identifier	b		81624	0					
ANR	82700	Identifier	x		81624	1					
ANR	82701	PtrMemberAccess	a -> x		81624	1					
ANR	82702	Identifier	a		81624	0					
ANR	82703	Identifier	x		81624	1					
ANR	82704	OrExpression	b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	1		||			
ANR	82705	RelationalExpression	b -> layer <= a -> layer		81624	0		<=			
ANR	82706	PtrMemberAccess	b -> layer		81624	0					
ANR	82707	Identifier	b		81624	0					
ANR	82708	Identifier	layer		81624	1					
ANR	82709	PtrMemberAccess	a -> layer		81624	1					
ANR	82710	Identifier	a		81624	0					
ANR	82711	Identifier	layer		81624	1					
ANR	82712	OrExpression	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	1		||			
ANR	82713	AndExpression	! a -> is_dummy && b -> is_dummy		81624	0		&&			
ANR	82714	UnaryOperationExpression	! a -> is_dummy		81624	0					
ANR	82715	UnaryOperator	!		81624	0					
ANR	82716	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	82717	Identifier	a		81624	0					
ANR	82718	Identifier	is_dummy		81624	1					
ANR	82719	PtrMemberAccess	b -> is_dummy		81624	1					
ANR	82720	Identifier	b		81624	0					
ANR	82721	Identifier	is_dummy		81624	1					
ANR	82722	AndExpression	a -> is_dummy && ! b -> is_dummy		81624	1		&&			
ANR	82723	PtrMemberAccess	a -> is_dummy		81624	0					
ANR	82724	Identifier	a		81624	0					
ANR	82725	Identifier	is_dummy		81624	1					
ANR	82726	UnaryOperationExpression	! b -> is_dummy		81624	1					
ANR	82727	UnaryOperator	!		81624	0					
ANR	82728	PtrMemberAccess	b -> is_dummy		81624	1					
ANR	82729	Identifier	b		81624	0					
ANR	82730	Identifier	is_dummy		81624	1					
ANR	82731	CompoundStatement		165:112:4288:4288	81624	1					
ANR	82732	IfStatement	if ( tm )		81624	0					
ANR	82733	Condition	tm	2993:9:74972:74973	81624	0	True				
ANR	82734	Identifier	tm		81624	0					
ANR	82735	CompoundStatement		166:13:4303:4303	81624	1					
ANR	82736	ExpressionStatement	tm -> edgectr ++	2994:6:74984:74997	81624	0	True				
ANR	82737	PostIncDecOperationExpression	tm -> edgectr ++		81624	0					
ANR	82738	PtrMemberAccess	tm -> edgectr		81624	0					
ANR	82739	Identifier	tm		81624	0					
ANR	82740	Identifier	edgectr		81624	1					
ANR	82741	IncDec	++		81624	1					
ANR	82742	BreakStatement	break ;	2997:4:75016:75021	81624	15	True				
ANR	82743	Label	case 1 :	2998:3:75026:75032	81624	16	True				
ANR	82744	ExpressionStatement	style . symbol = ( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_HORIZ : style . color	2999:4:75038:75112	81624	17	True				
ANR	82745	AssignmentExpression	style . symbol = ( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_HORIZ : style . color		81624	0		=			
ANR	82746	MemberAccess	style . symbol		81624	0					
ANR	82747	Identifier	style		81624	0					
ANR	82748	Identifier	symbol		81624	1					
ANR	82749	ConditionalExpression	( ! g -> hints || a -> is_dummy ) ? LINE_NOSYM_HORIZ : style . color		81624	1					
ANR	82750	Condition	! g -> hints || a -> is_dummy		81624	0					
ANR	82751	OrExpression	! g -> hints || a -> is_dummy		81624	0		||			
ANR	82752	UnaryOperationExpression	! g -> hints		81624	0					
ANR	82753	UnaryOperator	!		81624	0					
ANR	82754	PtrMemberAccess	g -> hints		81624	1					
ANR	82755	Identifier	g		81624	0					
ANR	82756	Identifier	hints		81624	1					
ANR	82757	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	82758	Identifier	a		81624	0					
ANR	82759	Identifier	is_dummy		81624	1					
ANR	82760	Identifier	LINE_NOSYM_HORIZ		81624	1					
ANR	82761	MemberAccess	style . color		81624	2					
ANR	82762	Identifier	style		81624	0					
ANR	82763	Identifier	color		81624	1					
ANR	82764	IfStatement	if ( a -> x + a -> w > b -> x )		81624	18					
ANR	82765	Condition	a -> x + a -> w > b -> x	3000:8:75122:75139	81624	0	True				
ANR	82766	RelationalExpression	a -> x + a -> w > b -> x		81624	0		>			
ANR	82767	AdditiveExpression	a -> x + a -> w		81624	0		+			
ANR	82768	PtrMemberAccess	a -> x		81624	0					
ANR	82769	Identifier	a		81624	0					
ANR	82770	Identifier	x		81624	1					
ANR	82771	PtrMemberAccess	a -> w		81624	1					
ANR	82772	Identifier	a		81624	0					
ANR	82773	Identifier	w		81624	1					
ANR	82774	PtrMemberAccess	b -> x		81624	1					
ANR	82775	Identifier	b		81624	0					
ANR	82776	Identifier	x		81624	1					
ANR	82777	CompoundStatement		173:28:4469:4469	81624	1					
ANR	82778	ExpressionStatement	style . dot_style = DOT_STYLE_BACKEDGE	3001:5:75149:75185	81624	0	True				
ANR	82779	AssignmentExpression	style . dot_style = DOT_STYLE_BACKEDGE		81624	0		=			
ANR	82780	MemberAccess	style . dot_style		81624	0					
ANR	82781	Identifier	style		81624	0					
ANR	82782	Identifier	dot_style		81624	1					
ANR	82783	Identifier	DOT_STYLE_BACKEDGE		81624	1					
ANR	82784	ExpressionStatement	ax = a -> x	3004:4:75198:75207	81624	19	True				
ANR	82785	AssignmentExpression	ax = a -> x		81624	0		=			
ANR	82786	Identifier	ax		81624	0					
ANR	82787	PtrMemberAccess	a -> x		81624	1					
ANR	82788	Identifier	a		81624	0					
ANR	82789	Identifier	x		81624	1					
ANR	82790	IfStatement	if ( g -> zoom > 0 )		81624	20					
ANR	82791	Condition	g -> zoom > 0	3005:8:75217:75227	81624	0	True				
ANR	82792	RelationalExpression	g -> zoom > 0		81624	0		>			
ANR	82793	PtrMemberAccess	g -> zoom		81624	0					
ANR	82794	Identifier	g		81624	0					
ANR	82795	Identifier	zoom		81624	1					
ANR	82796	PrimaryExpression	0		81624	1					
ANR	82797	CompoundStatement		178:21:4557:4557	81624	1					
ANR	82798	ExpressionStatement	ax += a -> w	3006:5:75237:75247	81624	0	True				
ANR	82799	AssignmentExpression	ax += a -> w		81624	0		+=			
ANR	82800	Identifier	ax		81624	0					
ANR	82801	PtrMemberAccess	a -> w		81624	1					
ANR	82802	Identifier	a		81624	0					
ANR	82803	Identifier	w		81624	1					
ANR	82804	ElseStatement	else		81624	0					
ANR	82805	CompoundStatement		180:11:4587:4587	81624	0					
ANR	82806	ExpressionStatement	ax ++	3008:5:75267:75272	81624	0	True				
ANR	82807	PostIncDecOperationExpression	ax ++		81624	0					
ANR	82808	Identifier	ax		81624	0					
ANR	82809	IncDec	++		81624	1					
ANR	82810	ExpressionStatement	ay = a -> y	3010:4:75284:75293	81624	21	True				
ANR	82811	AssignmentExpression	ay = a -> y		81624	0		=			
ANR	82812	Identifier	ay		81624	0					
ANR	82813	PtrMemberAccess	a -> y		81624	1					
ANR	82814	Identifier	a		81624	0					
ANR	82815	Identifier	y		81624	1					
ANR	82816	IfStatement	if ( ! a -> is_dummy && g -> zoom > 0 )		81624	22					
ANR	82817	Condition	! a -> is_dummy && g -> zoom > 0	3011:8:75303:75329	81624	0	True				
ANR	82818	AndExpression	! a -> is_dummy && g -> zoom > 0		81624	0		&&			
ANR	82819	UnaryOperationExpression	! a -> is_dummy		81624	0					
ANR	82820	UnaryOperator	!		81624	0					
ANR	82821	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	82822	Identifier	a		81624	0					
ANR	82823	Identifier	is_dummy		81624	1					
ANR	82824	RelationalExpression	g -> zoom > 0		81624	1		>			
ANR	82825	PtrMemberAccess	g -> zoom		81624	0					
ANR	82826	Identifier	g		81624	0					
ANR	82827	Identifier	zoom		81624	1					
ANR	82828	PrimaryExpression	0		81624	1					
ANR	82829	CompoundStatement		184:37:4659:4659	81624	1					
ANR	82830	ExpressionStatement	ay += R_EDGES_X_INC + out_nth	3012:5:75339:75368	81624	0	True				
ANR	82831	AssignmentExpression	ay += R_EDGES_X_INC + out_nth		81624	0		+=			
ANR	82832	Identifier	ay		81624	0					
ANR	82833	AdditiveExpression	R_EDGES_X_INC + out_nth		81624	1		+			
ANR	82834	Identifier	R_EDGES_X_INC		81624	0					
ANR	82835	Identifier	out_nth		81624	1					
ANR	82836	ExpressionStatement	bx = b -> x - 1	3014:4:75380:75393	81624	23	True				
ANR	82837	AssignmentExpression	bx = b -> x - 1		81624	0		=			
ANR	82838	Identifier	bx		81624	0					
ANR	82839	AdditiveExpression	b -> x - 1		81624	1		-			
ANR	82840	PtrMemberAccess	b -> x		81624	0					
ANR	82841	Identifier	b		81624	0					
ANR	82842	Identifier	x		81624	1					
ANR	82843	PrimaryExpression	1		81624	1					
ANR	82844	ExpressionStatement	by = b -> y	3015:4:75399:75408	81624	24	True				
ANR	82845	AssignmentExpression	by = b -> y		81624	0		=			
ANR	82846	Identifier	by		81624	0					
ANR	82847	PtrMemberAccess	b -> y		81624	1					
ANR	82848	Identifier	b		81624	0					
ANR	82849	Identifier	y		81624	1					
ANR	82850	IfStatement	if ( ! b -> is_dummy && g -> zoom > 0 )		81624	25					
ANR	82851	Condition	! b -> is_dummy && g -> zoom > 0	3016:8:75418:75444	81624	0	True				
ANR	82852	AndExpression	! b -> is_dummy && g -> zoom > 0		81624	0		&&			
ANR	82853	UnaryOperationExpression	! b -> is_dummy		81624	0					
ANR	82854	UnaryOperator	!		81624	0					
ANR	82855	PtrMemberAccess	b -> is_dummy		81624	1					
ANR	82856	Identifier	b		81624	0					
ANR	82857	Identifier	is_dummy		81624	1					
ANR	82858	RelationalExpression	g -> zoom > 0		81624	1		>			
ANR	82859	PtrMemberAccess	g -> zoom		81624	0					
ANR	82860	Identifier	g		81624	0					
ANR	82861	Identifier	zoom		81624	1					
ANR	82862	PrimaryExpression	0		81624	1					
ANR	82863	CompoundStatement		189:37:4774:4774	81624	1					
ANR	82864	ExpressionStatement	by += R_EDGES_X_INC + out_nth	3017:5:75454:75483	81624	0	True				
ANR	82865	AssignmentExpression	by += R_EDGES_X_INC + out_nth		81624	0		+=			
ANR	82866	Identifier	by		81624	0					
ANR	82867	AdditiveExpression	R_EDGES_X_INC + out_nth		81624	1		+			
ANR	82868	Identifier	R_EDGES_X_INC		81624	0					
ANR	82869	Identifier	out_nth		81624	1					
ANR	82870	IfStatement	if ( a -> w < a -> layer_width )		81624	26					
ANR	82871	Condition	a -> w < a -> layer_width	3020:8:75500:75520	81624	0	True				
ANR	82872	RelationalExpression	a -> w < a -> layer_width		81624	0		<			
ANR	82873	PtrMemberAccess	a -> w		81624	0					
ANR	82874	Identifier	a		81624	0					
ANR	82875	Identifier	w		81624	1					
ANR	82876	PtrMemberAccess	a -> layer_width		81624	1					
ANR	82877	Identifier	a		81624	0					
ANR	82878	Identifier	layer_width		81624	1					
ANR	82879	CompoundStatement		193:31:4850:4850	81624	1					
ANR	82880	ExpressionStatement	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , a -> x + a -> layer_width , ay , & style , 0 , false )"	3021:5:75530:75625	81624	0	True				
ANR	82881	CallExpression	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , a -> x + a -> layer_width , ay , & style , 0 , false )"		81624	0					
ANR	82882	Callee	r_cons_canvas_line_square_defined		81624	0					
ANR	82883	Identifier	r_cons_canvas_line_square_defined		81624	0					
ANR	82884	ArgumentList	g -> can		81624	1					
ANR	82885	Argument	g -> can		81624	0					
ANR	82886	PtrMemberAccess	g -> can		81624	0					
ANR	82887	Identifier	g		81624	0					
ANR	82888	Identifier	can		81624	1					
ANR	82889	Argument	ax		81624	1					
ANR	82890	Identifier	ax		81624	0					
ANR	82891	Argument	ay		81624	2					
ANR	82892	Identifier	ay		81624	0					
ANR	82893	Argument	a -> x + a -> layer_width		81624	3					
ANR	82894	AdditiveExpression	a -> x + a -> layer_width		81624	0		+			
ANR	82895	PtrMemberAccess	a -> x		81624	0					
ANR	82896	Identifier	a		81624	0					
ANR	82897	Identifier	x		81624	1					
ANR	82898	PtrMemberAccess	a -> layer_width		81624	1					
ANR	82899	Identifier	a		81624	0					
ANR	82900	Identifier	layer_width		81624	1					
ANR	82901	Argument	ay		81624	4					
ANR	82902	Identifier	ay		81624	0					
ANR	82903	Argument	& style		81624	5					
ANR	82904	UnaryOperationExpression	& style		81624	0					
ANR	82905	UnaryOperator	&		81624	0					
ANR	82906	Identifier	style		81624	1					
ANR	82907	Argument	0		81624	6					
ANR	82908	PrimaryExpression	0		81624	0					
ANR	82909	Argument	false		81624	7					
ANR	82910	Identifier	false		81624	0					
ANR	82911	ExpressionStatement	ax = a -> x	3022:5:75632:75641	81624	1	True				
ANR	82912	AssignmentExpression	ax = a -> x		81624	0		=			
ANR	82913	Identifier	ax		81624	0					
ANR	82914	PtrMemberAccess	a -> x		81624	1					
ANR	82915	Identifier	a		81624	0					
ANR	82916	Identifier	x		81624	1					
ANR	82917	IfStatement	if ( g -> zoom > 1 )		81624	2					
ANR	82918	Condition	g -> zoom > 1	3023:9:75652:75662	81624	0	True				
ANR	82919	RelationalExpression	g -> zoom > 1		81624	0		>			
ANR	82920	PtrMemberAccess	g -> zoom		81624	0					
ANR	82921	Identifier	g		81624	0					
ANR	82922	Identifier	zoom		81624	1					
ANR	82923	PrimaryExpression	1		81624	1					
ANR	82924	CompoundStatement		196:22:4992:4992	81624	1					
ANR	82925	ExpressionStatement	ax += a -> layer_width	3024:6:75673:75693	81624	0	True				
ANR	82926	AssignmentExpression	ax += a -> layer_width		81624	0		+=			
ANR	82927	Identifier	ax		81624	0					
ANR	82928	PtrMemberAccess	a -> layer_width		81624	1					
ANR	82929	Identifier	a		81624	0					
ANR	82930	Identifier	layer_width		81624	1					
ANR	82931	ElseStatement	else		81624	0					
ANR	82932	CompoundStatement		198:12:5034:5034	81624	0					
ANR	82933	ExpressionStatement	ax += 1	3026:6:75715:75722	81624	0	True				
ANR	82934	AssignmentExpression	ax += 1		81624	0		+=			
ANR	82935	Identifier	ax		81624	0					
ANR	82936	PrimaryExpression	1		81624	1					
ANR	82937	ExpressionStatement	style . symbol = LINE_NOSYM_HORIZ	3028:5:75736:75767	81624	3	True				
ANR	82938	AssignmentExpression	style . symbol = LINE_NOSYM_HORIZ		81624	0		=			
ANR	82939	MemberAccess	style . symbol		81624	0					
ANR	82940	Identifier	style		81624	0					
ANR	82941	Identifier	symbol		81624	1					
ANR	82942	Identifier	LINE_NOSYM_HORIZ		81624	1					
ANR	82943	IfStatement	if ( bx >= ax )		81624	27					
ANR	82944	Condition	bx >= ax	3030:8:75783:75790	81624	0	True				
ANR	82945	RelationalExpression	bx >= ax		81624	0		>=			
ANR	82946	Identifier	bx		81624	0					
ANR	82947	Identifier	ax		81624	1					
ANR	82948	CompoundStatement		203:18:5120:5120	81624	1					
ANR	82949	ExpressionStatement	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , bx , by , & style , tm -> edgectr , false )"	3031:5:75800:75886	81624	0	True				
ANR	82950	CallExpression	"r_cons_canvas_line_square_defined ( g -> can , ax , ay , bx , by , & style , tm -> edgectr , false )"		81624	0					
ANR	82951	Callee	r_cons_canvas_line_square_defined		81624	0					
ANR	82952	Identifier	r_cons_canvas_line_square_defined		81624	0					
ANR	82953	ArgumentList	g -> can		81624	1					
ANR	82954	Argument	g -> can		81624	0					
ANR	82955	PtrMemberAccess	g -> can		81624	0					
ANR	82956	Identifier	g		81624	0					
ANR	82957	Identifier	can		81624	1					
ANR	82958	Argument	ax		81624	1					
ANR	82959	Identifier	ax		81624	0					
ANR	82960	Argument	ay		81624	2					
ANR	82961	Identifier	ay		81624	0					
ANR	82962	Argument	bx		81624	3					
ANR	82963	Identifier	bx		81624	0					
ANR	82964	Argument	by		81624	4					
ANR	82965	Identifier	by		81624	0					
ANR	82966	Argument	& style		81624	5					
ANR	82967	UnaryOperationExpression	& style		81624	0					
ANR	82968	UnaryOperator	&		81624	0					
ANR	82969	Identifier	style		81624	1					
ANR	82970	Argument	tm -> edgectr		81624	6					
ANR	82971	PtrMemberAccess	tm -> edgectr		81624	0					
ANR	82972	Identifier	tm		81624	0					
ANR	82973	Identifier	edgectr		81624	1					
ANR	82974	Argument	false		81624	7					
ANR	82975	Identifier	false		81624	0					
ANR	82976	ElseStatement	else		81624	0					
ANR	82977	CompoundStatement		206:5:5233:5306	81624	0					
ANR	82978	IdentifierDeclStatement	"struct tmpbackedgeinfo * tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) ) ;"	3033:5:75906:75979	81624	0	True				
ANR	82979	IdentifierDecl	"* tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	0					
ANR	82980	IdentifierDeclType	struct tmpbackedgeinfo *		81624	0					
ANR	82981	Identifier	tmp		81624	1					
ANR	82982	AssignmentExpression	"* tmp = calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	2		=			
ANR	82983	Identifier	tmp		81624	0					
ANR	82984	CallExpression	"calloc ( 1 , sizeof ( struct tmpbackedgeinfo ) )"		81624	1					
ANR	82985	Callee	calloc		81624	0					
ANR	82986	Identifier	calloc		81624	0					
ANR	82987	ArgumentList	1		81624	1					
ANR	82988	Argument	1		81624	0					
ANR	82989	PrimaryExpression	1		81624	0					
ANR	82990	Argument	sizeof ( struct tmpbackedgeinfo )		81624	1					
ANR	82991	SizeofExpression	sizeof ( struct tmpbackedgeinfo )		81624	0					
ANR	82992	Sizeof	sizeof		81624	0					
ANR	82993	SizeofOperand	struct tmpbackedgeinfo		81624	1					
ANR	82994	IfStatement	if ( tmp )		81624	1					
ANR	82995	Condition	tmp	3034:9:75990:75992	81624	0	True				
ANR	82996	Identifier	tmp		81624	0					
ANR	82997	CompoundStatement		207:14:5322:5322	81624	1					
ANR	82998	ExpressionStatement	tmp -> ax = ax	3035:6:76003:76015	81624	0	True				
ANR	82999	AssignmentExpression	tmp -> ax = ax		81624	0		=			
ANR	83000	PtrMemberAccess	tmp -> ax		81624	0					
ANR	83001	Identifier	tmp		81624	0					
ANR	83002	Identifier	ax		81624	1					
ANR	83003	Identifier	ax		81624	1					
ANR	83004	ExpressionStatement	tmp -> bx = bx	3036:6:76023:76035	81624	1	True				
ANR	83005	AssignmentExpression	tmp -> bx = bx		81624	0		=			
ANR	83006	PtrMemberAccess	tmp -> bx		81624	0					
ANR	83007	Identifier	tmp		81624	0					
ANR	83008	Identifier	bx		81624	1					
ANR	83009	Identifier	bx		81624	1					
ANR	83010	ExpressionStatement	tmp -> ay = ay	3037:6:76043:76055	81624	2	True				
ANR	83011	AssignmentExpression	tmp -> ay = ay		81624	0		=			
ANR	83012	PtrMemberAccess	tmp -> ay		81624	0					
ANR	83013	Identifier	tmp		81624	0					
ANR	83014	Identifier	ay		81624	1					
ANR	83015	Identifier	ay		81624	1					
ANR	83016	ExpressionStatement	tmp -> by = by	3038:6:76063:76075	81624	3	True				
ANR	83017	AssignmentExpression	tmp -> by = by		81624	0		=			
ANR	83018	PtrMemberAccess	tmp -> by		81624	0					
ANR	83019	Identifier	tmp		81624	0					
ANR	83020	Identifier	by		81624	1					
ANR	83021	Identifier	by		81624	1					
ANR	83022	ExpressionStatement	tmp -> edgectr = tm -> edgectr	3039:6:76083:76109	81624	4	True				
ANR	83023	AssignmentExpression	tmp -> edgectr = tm -> edgectr		81624	0		=			
ANR	83024	PtrMemberAccess	tmp -> edgectr		81624	0					
ANR	83025	Identifier	tmp		81624	0					
ANR	83026	Identifier	edgectr		81624	1					
ANR	83027	PtrMemberAccess	tm -> edgectr		81624	1					
ANR	83028	Identifier	tm		81624	0					
ANR	83029	Identifier	edgectr		81624	1					
ANR	83030	ExpressionStatement	tmp -> fromlayer = a -> layer	3040:6:76117:76142	81624	5	True				
ANR	83031	AssignmentExpression	tmp -> fromlayer = a -> layer		81624	0		=			
ANR	83032	PtrMemberAccess	tmp -> fromlayer		81624	0					
ANR	83033	Identifier	tmp		81624	0					
ANR	83034	Identifier	fromlayer		81624	1					
ANR	83035	PtrMemberAccess	a -> layer		81624	1					
ANR	83036	Identifier	a		81624	0					
ANR	83037	Identifier	layer		81624	1					
ANR	83038	ExpressionStatement	tmp -> tolayer = b -> layer	3041:6:76150:76173	81624	6	True				
ANR	83039	AssignmentExpression	tmp -> tolayer = b -> layer		81624	0		=			
ANR	83040	PtrMemberAccess	tmp -> tolayer		81624	0					
ANR	83041	Identifier	tmp		81624	0					
ANR	83042	Identifier	tolayer		81624	1					
ANR	83043	PtrMemberAccess	b -> layer		81624	1					
ANR	83044	Identifier	b		81624	0					
ANR	83045	Identifier	layer		81624	1					
ANR	83046	ExpressionStatement	tmp -> style = style	3042:6:76181:76199	81624	7	True				
ANR	83047	AssignmentExpression	tmp -> style = style		81624	0		=			
ANR	83048	PtrMemberAccess	tmp -> style		81624	0					
ANR	83049	Identifier	tmp		81624	0					
ANR	83050	Identifier	style		81624	1					
ANR	83051	Identifier	style		81624	1					
ANR	83052	ExpressionStatement	"r_list_append ( bckedges , tmp )"	3043:6:76207:76236	81624	8	True				
ANR	83053	CallExpression	"r_list_append ( bckedges , tmp )"		81624	0					
ANR	83054	Callee	r_list_append		81624	0					
ANR	83055	Identifier	r_list_append		81624	0					
ANR	83056	ArgumentList	bckedges		81624	1					
ANR	83057	Argument	bckedges		81624	0					
ANR	83058	Identifier	bckedges		81624	0					
ANR	83059	Argument	tmp		81624	1					
ANR	83060	Identifier	tmp		81624	0					
ANR	83061	IfStatement	if ( b -> is_dummy )		81624	28					
ANR	83062	Condition	b -> is_dummy	3046:8:76259:76269	81624	0	True				
ANR	83063	PtrMemberAccess	b -> is_dummy		81624	0					
ANR	83064	Identifier	b		81624	0					
ANR	83065	Identifier	is_dummy		81624	1					
ANR	83066	CompoundStatement		219:21:5599:5599	81624	1					
ANR	83067	ExpressionStatement	style . symbol = LINE_NOSYM_HORIZ	3047:5:76279:76310	81624	0	True				
ANR	83068	AssignmentExpression	style . symbol = LINE_NOSYM_HORIZ		81624	0		=			
ANR	83069	MemberAccess	style . symbol		81624	0					
ANR	83070	Identifier	style		81624	0					
ANR	83071	Identifier	symbol		81624	1					
ANR	83072	Identifier	LINE_NOSYM_HORIZ		81624	1					
ANR	83073	ExpressionStatement	"r_cons_canvas_line_square_defined ( g -> can , bx , by , bx + b -> layer_width , by , & style , 0 , false )"	3048:5:76317:76410	81624	1	True				
ANR	83074	CallExpression	"r_cons_canvas_line_square_defined ( g -> can , bx , by , bx + b -> layer_width , by , & style , 0 , false )"		81624	0					
ANR	83075	Callee	r_cons_canvas_line_square_defined		81624	0					
ANR	83076	Identifier	r_cons_canvas_line_square_defined		81624	0					
ANR	83077	ArgumentList	g -> can		81624	1					
ANR	83078	Argument	g -> can		81624	0					
ANR	83079	PtrMemberAccess	g -> can		81624	0					
ANR	83080	Identifier	g		81624	0					
ANR	83081	Identifier	can		81624	1					
ANR	83082	Argument	bx		81624	1					
ANR	83083	Identifier	bx		81624	0					
ANR	83084	Argument	by		81624	2					
ANR	83085	Identifier	by		81624	0					
ANR	83086	Argument	bx + b -> layer_width		81624	3					
ANR	83087	AdditiveExpression	bx + b -> layer_width		81624	0		+			
ANR	83088	Identifier	bx		81624	0					
ANR	83089	PtrMemberAccess	b -> layer_width		81624	1					
ANR	83090	Identifier	b		81624	0					
ANR	83091	Identifier	layer_width		81624	1					
ANR	83092	Argument	by		81624	4					
ANR	83093	Identifier	by		81624	0					
ANR	83094	Argument	& style		81624	5					
ANR	83095	UnaryOperationExpression	& style		81624	0					
ANR	83096	UnaryOperator	&		81624	0					
ANR	83097	Identifier	style		81624	1					
ANR	83098	Argument	0		81624	6					
ANR	83099	PrimaryExpression	0		81624	0					
ANR	83100	Argument	false		81624	7					
ANR	83101	Identifier	false		81624	0					
ANR	83102	IfStatement	if ( ( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy ) )		81624	29					
ANR	83103	Condition	( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )	3050:8:76426:76561	81624	0	True				
ANR	83104	OrExpression	( b -> y == a -> y && b -> h != a -> h ) || b -> y != a -> y || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	0		||			
ANR	83105	AndExpression	b -> y == a -> y && b -> h != a -> h		81624	0		&&			
ANR	83106	EqualityExpression	b -> y == a -> y		81624	0		==			
ANR	83107	PtrMemberAccess	b -> y		81624	0					
ANR	83108	Identifier	b		81624	0					
ANR	83109	Identifier	y		81624	1					
ANR	83110	PtrMemberAccess	a -> y		81624	1					
ANR	83111	Identifier	a		81624	0					
ANR	83112	Identifier	y		81624	1					
ANR	83113	EqualityExpression	b -> h != a -> h		81624	1		!=			
ANR	83114	PtrMemberAccess	b -> h		81624	0					
ANR	83115	Identifier	b		81624	0					
ANR	83116	Identifier	h		81624	1					
ANR	83117	PtrMemberAccess	a -> h		81624	1					
ANR	83118	Identifier	a		81624	0					
ANR	83119	Identifier	h		81624	1					
ANR	83120	OrExpression	b -> y != a -> y || b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	1		||			
ANR	83121	EqualityExpression	b -> y != a -> y		81624	0		!=			
ANR	83122	PtrMemberAccess	b -> y		81624	0					
ANR	83123	Identifier	b		81624	0					
ANR	83124	Identifier	y		81624	1					
ANR	83125	PtrMemberAccess	a -> y		81624	1					
ANR	83126	Identifier	a		81624	0					
ANR	83127	Identifier	y		81624	1					
ANR	83128	OrExpression	b -> layer <= a -> layer || ( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	1		||			
ANR	83129	RelationalExpression	b -> layer <= a -> layer		81624	0		<=			
ANR	83130	PtrMemberAccess	b -> layer		81624	0					
ANR	83131	Identifier	b		81624	0					
ANR	83132	Identifier	layer		81624	1					
ANR	83133	PtrMemberAccess	a -> layer		81624	1					
ANR	83134	Identifier	a		81624	0					
ANR	83135	Identifier	layer		81624	1					
ANR	83136	OrExpression	( ! a -> is_dummy && b -> is_dummy ) || ( a -> is_dummy && ! b -> is_dummy )		81624	1		||			
ANR	83137	AndExpression	! a -> is_dummy && b -> is_dummy		81624	0		&&			
ANR	83138	UnaryOperationExpression	! a -> is_dummy		81624	0					
ANR	83139	UnaryOperator	!		81624	0					
ANR	83140	PtrMemberAccess	a -> is_dummy		81624	1					
ANR	83141	Identifier	a		81624	0					
ANR	83142	Identifier	is_dummy		81624	1					
ANR	83143	PtrMemberAccess	b -> is_dummy		81624	1					
ANR	83144	Identifier	b		81624	0					
ANR	83145	Identifier	is_dummy		81624	1					
ANR	83146	AndExpression	a -> is_dummy && ! b -> is_dummy		81624	1		&&			
ANR	83147	PtrMemberAccess	a -> is_dummy		81624	0					
ANR	83148	Identifier	a		81624	0					
ANR	83149	Identifier	is_dummy		81624	1					
ANR	83150	UnaryOperationExpression	! b -> is_dummy		81624	1					
ANR	83151	UnaryOperator	!		81624	0					
ANR	83152	PtrMemberAccess	b -> is_dummy		81624	1					
ANR	83153	Identifier	b		81624	0					
ANR	83154	Identifier	is_dummy		81624	1					
ANR	83155	CompoundStatement		223:146:5891:5891	81624	1					
ANR	83156	ExpressionStatement	tm -> edgectr += 1	3051:5:76571:76587	81624	0	True				
ANR	83157	AssignmentExpression	tm -> edgectr += 1		81624	0		+=			
ANR	83158	PtrMemberAccess	tm -> edgectr		81624	0					
ANR	83159	Identifier	tm		81624	0					
ANR	83160	Identifier	edgectr		81624	1					
ANR	83161	PrimaryExpression	1		81624	1					
ANR	83162	BreakStatement	break ;	3053:4:76599:76604	81624	30	True				
ANR	83163	IdentifierDeclStatement	struct tmpbackedgeinfo * temp ;	3058:1:76620:76648	81624	22	True				
ANR	83164	IdentifierDecl	* temp		81624	0					
ANR	83165	IdentifierDeclType	struct tmpbackedgeinfo *		81624	0					
ANR	83166	Identifier	temp		81624	1					
ANR	83167	Statement	r_list_foreach	3059:1:76651:76664	81624	23	True				
ANR	83168	Statement	(	3059:16:76666:76666	81624	24	True				
ANR	83169	Statement	bckedges	3059:17:76667:76674	81624	25	True				
ANR	83170	Statement	","	3059:25:76675:76675	81624	26	True				
ANR	83171	Statement	itm	3059:27:76677:76679	81624	27	True				
ANR	83172	Statement	","	3059:30:76680:76680	81624	28	True				
ANR	83173	Statement	temp	3059:32:76682:76685	81624	29	True				
ANR	83174	Statement	)	3059:36:76686:76686	81624	30	True				
ANR	83175	CompoundStatement		235:2:6070:6096	81624	31					
ANR	83176	IdentifierDeclStatement	"int leftlen , rightlen ;"	3060:2:76692:76713	81624	0	True				
ANR	83177	IdentifierDecl	leftlen		81624	0					
ANR	83178	IdentifierDeclType	int		81624	0					
ANR	83179	Identifier	leftlen		81624	1					
ANR	83180	IdentifierDecl	rightlen		81624	1					
ANR	83181	IdentifierDeclType	int		81624	0					
ANR	83182	Identifier	rightlen		81624	1					
ANR	83183	IdentifierDeclStatement	"int minx = 0 , maxx = 0 ;"	3061:2:76717:76739	81624	1	True				
ANR	83184	IdentifierDecl	minx = 0		81624	0					
ANR	83185	IdentifierDeclType	int		81624	0					
ANR	83186	Identifier	minx		81624	1					
ANR	83187	AssignmentExpression	minx = 0		81624	2		=			
ANR	83188	Identifier	minx		81624	0					
ANR	83189	PrimaryExpression	0		81624	1					
ANR	83190	IdentifierDecl	maxx = 0		81624	1					
ANR	83191	IdentifierDeclType	int		81624	0					
ANR	83192	Identifier	maxx		81624	1					
ANR	83193	AssignmentExpression	maxx = 0		81624	2		=			
ANR	83194	Identifier	maxx		81624	0					
ANR	83195	PrimaryExpression	0		81624	1					
ANR	83196	IdentifierDeclStatement	struct tmplayer * tt = NULL ;	3062:2:76743:76769	81624	2	True				
ANR	83197	IdentifierDecl	* tt = NULL		81624	0					
ANR	83198	IdentifierDeclType	struct tmplayer *		81624	0					
ANR	83199	Identifier	tt		81624	1					
ANR	83200	AssignmentExpression	* tt = NULL		81624	2		=			
ANR	83201	Identifier	NULL		81624	0					
ANR	83202	Identifier	NULL		81624	1					
ANR	83203	ExpressionStatement	"tl = r_list_get_n ( lyr , temp -> fromlayer )"	3063:2:76773:76813	81624	3	True				
ANR	83204	AssignmentExpression	"tl = r_list_get_n ( lyr , temp -> fromlayer )"		81624	0		=			
ANR	83205	Identifier	tl		81624	0					
ANR	83206	CallExpression	"r_list_get_n ( lyr , temp -> fromlayer )"		81624	1					
ANR	83207	Callee	r_list_get_n		81624	0					
ANR	83208	Identifier	r_list_get_n		81624	0					
ANR	83209	ArgumentList	lyr		81624	1					
ANR	83210	Argument	lyr		81624	0					
ANR	83211	Identifier	lyr		81624	0					
ANR	83212	Argument	temp -> fromlayer		81624	1					
ANR	83213	PtrMemberAccess	temp -> fromlayer		81624	0					
ANR	83214	Identifier	temp		81624	0					
ANR	83215	Identifier	fromlayer		81624	1					
ANR	83216	IfStatement	if ( r_cons_is_breaked ( ) )		81624	4					
ANR	83217	Condition	r_cons_is_breaked ( )	3064:6:76821:76840	81624	0	True				
ANR	83218	CallExpression	r_cons_is_breaked ( )		81624	0					
ANR	83219	Callee	r_cons_is_breaked		81624	0					
ANR	83220	Identifier	r_cons_is_breaked		81624	0					
ANR	83221	ArgumentList			81624	1					
ANR	83222	CompoundStatement		237:28:6170:6170	81624	1					
ANR	83223	BreakStatement	break ;	3065:3:76848:76853	81624	0	True				
ANR	83224	Statement	r_list_foreach	3068:2:76862:76875	81624	5	True				
ANR	83225	Statement	(	3068:17:76877:76877	81624	6	True				
ANR	83226	Statement	lyr	3068:18:76878:76880	81624	7	True				
ANR	83227	Statement	","	3068:21:76881:76881	81624	8	True				
ANR	83228	Statement	ito	3068:23:76883:76885	81624	9	True				
ANR	83229	Statement	","	3068:26:76886:76886	81624	10	True				
ANR	83230	Statement	tl	3068:28:76888:76889	81624	11	True				
ANR	83231	Statement	)	3068:30:76890:76890	81624	12	True				
ANR	83232	CompoundStatement		241:32:6219:6219	81624	13					
ANR	83233	IfStatement	if ( tl -> layer <= temp -> tolayer )		81624	0					
ANR	83234	Condition	tl -> layer <= temp -> tolayer	3069:7:76901:76926	81624	0	True				
ANR	83235	RelationalExpression	tl -> layer <= temp -> tolayer		81624	0		<=			
ANR	83236	PtrMemberAccess	tl -> layer		81624	0					
ANR	83237	Identifier	tl		81624	0					
ANR	83238	Identifier	layer		81624	1					
ANR	83239	PtrMemberAccess	temp -> tolayer		81624	1					
ANR	83240	Identifier	temp		81624	0					
ANR	83241	Identifier	tolayer		81624	1					
ANR	83242	CompoundStatement		242:35:6256:6256	81624	1					
ANR	83243	ExpressionStatement	tt = tl	3070:4:76935:76942	81624	0	True				
ANR	83244	AssignmentExpression	tt = tl		81624	0		=			
ANR	83245	Identifier	tt		81624	0					
ANR	83246	Identifier	tl		81624	1					
ANR	83247	ExpressionStatement	minx = tl -> minx	3071:4:76948:76963	81624	1	True				
ANR	83248	AssignmentExpression	minx = tl -> minx		81624	0		=			
ANR	83249	Identifier	minx		81624	0					
ANR	83250	PtrMemberAccess	tl -> minx		81624	1					
ANR	83251	Identifier	tl		81624	0					
ANR	83252	Identifier	minx		81624	1					
ANR	83253	ExpressionStatement	maxx = tl -> maxx	3072:4:76969:76984	81624	2	True				
ANR	83254	AssignmentExpression	maxx = tl -> maxx		81624	0		=			
ANR	83255	Identifier	maxx		81624	0					
ANR	83256	PtrMemberAccess	tl -> maxx		81624	1					
ANR	83257	Identifier	tl		81624	0					
ANR	83258	Identifier	maxx		81624	1					
ANR	83259	ContinueStatement	continue ;	3073:4:76990:76998	81624	3	True				
ANR	83260	ExpressionStatement	minx = minx < tl -> minx ? minx : tl -> minx	3075:3:77008:77048	81624	1	True				
ANR	83261	AssignmentExpression	minx = minx < tl -> minx ? minx : tl -> minx		81624	0		=			
ANR	83262	Identifier	minx		81624	0					
ANR	83263	ConditionalExpression	minx < tl -> minx ? minx : tl -> minx		81624	1					
ANR	83264	Condition	minx < tl -> minx		81624	0					
ANR	83265	RelationalExpression	minx < tl -> minx		81624	0		<			
ANR	83266	Identifier	minx		81624	0					
ANR	83267	PtrMemberAccess	tl -> minx		81624	1					
ANR	83268	Identifier	tl		81624	0					
ANR	83269	Identifier	minx		81624	1					
ANR	83270	Identifier	minx		81624	1					
ANR	83271	PtrMemberAccess	tl -> minx		81624	2					
ANR	83272	Identifier	tl		81624	0					
ANR	83273	Identifier	minx		81624	1					
ANR	83274	ExpressionStatement	maxx = maxx > tl -> maxx ? maxx : tl -> maxx	3076:3:77053:77093	81624	2	True				
ANR	83275	AssignmentExpression	maxx = maxx > tl -> maxx ? maxx : tl -> maxx		81624	0		=			
ANR	83276	Identifier	maxx		81624	0					
ANR	83277	ConditionalExpression	maxx > tl -> maxx ? maxx : tl -> maxx		81624	1					
ANR	83278	Condition	maxx > tl -> maxx		81624	0					
ANR	83279	RelationalExpression	maxx > tl -> maxx		81624	0		>			
ANR	83280	Identifier	maxx		81624	0					
ANR	83281	PtrMemberAccess	tl -> maxx		81624	1					
ANR	83282	Identifier	tl		81624	0					
ANR	83283	Identifier	maxx		81624	1					
ANR	83284	Identifier	maxx		81624	1					
ANR	83285	PtrMemberAccess	tl -> maxx		81624	2					
ANR	83286	Identifier	tl		81624	0					
ANR	83287	Identifier	maxx		81624	1					
ANR	83288	IfStatement	if ( tl -> layer >= temp -> fromlayer )		81624	3					
ANR	83289	Condition	tl -> layer >= temp -> fromlayer	3077:7:77102:77129	81624	0	True				
ANR	83290	RelationalExpression	tl -> layer >= temp -> fromlayer		81624	0		>=			
ANR	83291	PtrMemberAccess	tl -> layer		81624	0					
ANR	83292	Identifier	tl		81624	0					
ANR	83293	Identifier	layer		81624	1					
ANR	83294	PtrMemberAccess	temp -> fromlayer		81624	1					
ANR	83295	Identifier	temp		81624	0					
ANR	83296	Identifier	fromlayer		81624	1					
ANR	83297	CompoundStatement		250:37:6459:6459	81624	1					
ANR	83298	BreakStatement	break ;	3078:4:77138:77143	81624	0	True				
ANR	83299	IfStatement	if ( tt )		81624	14					
ANR	83300	Condition	tt	3082:6:77161:77162	81624	0	True				
ANR	83301	Identifier	tt		81624	0					
ANR	83302	CompoundStatement		255:10:6492:6492	81624	1					
ANR	83303	ExpressionStatement	tt -> revedgectr += 1	3083:3:77170:77189	81624	0	True				
ANR	83304	AssignmentExpression	tt -> revedgectr += 1		81624	0		+=			
ANR	83305	PtrMemberAccess	tt -> revedgectr		81624	0					
ANR	83306	Identifier	tt		81624	0					
ANR	83307	Identifier	revedgectr		81624	1					
ANR	83308	PrimaryExpression	1		81624	1					
ANR	83309	IfStatement	if ( g -> layout == 0 )		81624	15					
ANR	83310	Condition	g -> layout == 0	3085:6:77201:77214	81624	0	True				
ANR	83311	EqualityExpression	g -> layout == 0		81624	0		==			
ANR	83312	PtrMemberAccess	g -> layout		81624	0					
ANR	83313	Identifier	g		81624	0					
ANR	83314	Identifier	layout		81624	1					
ANR	83315	PrimaryExpression	0		81624	1					
ANR	83316	CompoundStatement		258:22:6544:6544	81624	1					
ANR	83317	ExpressionStatement	leftlen = ( temp -> ax - minx ) + ( temp -> bx - minx )	3086:3:77222:77269	81624	0	True				
ANR	83318	AssignmentExpression	leftlen = ( temp -> ax - minx ) + ( temp -> bx - minx )		81624	0		=			
ANR	83319	Identifier	leftlen		81624	0					
ANR	83320	AdditiveExpression	( temp -> ax - minx ) + ( temp -> bx - minx )		81624	1		+			
ANR	83321	AdditiveExpression	temp -> ax - minx		81624	0		-			
ANR	83322	PtrMemberAccess	temp -> ax		81624	0					
ANR	83323	Identifier	temp		81624	0					
ANR	83324	Identifier	ax		81624	1					
ANR	83325	Identifier	minx		81624	1					
ANR	83326	AdditiveExpression	temp -> bx - minx		81624	1		-			
ANR	83327	PtrMemberAccess	temp -> bx		81624	0					
ANR	83328	Identifier	temp		81624	0					
ANR	83329	Identifier	bx		81624	1					
ANR	83330	Identifier	minx		81624	1					
ANR	83331	ExpressionStatement	rightlen = ( maxx - temp -> ax ) + ( maxx - temp -> bx )	3087:3:77274:77322	81624	1	True				
ANR	83332	AssignmentExpression	rightlen = ( maxx - temp -> ax ) + ( maxx - temp -> bx )		81624	0		=			
ANR	83333	Identifier	rightlen		81624	0					
ANR	83334	AdditiveExpression	( maxx - temp -> ax ) + ( maxx - temp -> bx )		81624	1		+			
ANR	83335	AdditiveExpression	maxx - temp -> ax		81624	0		-			
ANR	83336	Identifier	maxx		81624	0					
ANR	83337	PtrMemberAccess	temp -> ax		81624	1					
ANR	83338	Identifier	temp		81624	0					
ANR	83339	Identifier	ax		81624	1					
ANR	83340	AdditiveExpression	maxx - temp -> bx		81624	1		-			
ANR	83341	Identifier	maxx		81624	0					
ANR	83342	PtrMemberAccess	temp -> bx		81624	1					
ANR	83343	Identifier	temp		81624	0					
ANR	83344	Identifier	bx		81624	1					
ANR	83345	ElseStatement	else		81624	0					
ANR	83346	CompoundStatement		261:9:6660:6660	81624	0					
ANR	83347	ExpressionStatement	leftlen = ( temp -> ay - minx ) + ( temp -> by - minx )	3089:3:77338:77385	81624	0	True				
ANR	83348	AssignmentExpression	leftlen = ( temp -> ay - minx ) + ( temp -> by - minx )		81624	0		=			
ANR	83349	Identifier	leftlen		81624	0					
ANR	83350	AdditiveExpression	( temp -> ay - minx ) + ( temp -> by - minx )		81624	1		+			
ANR	83351	AdditiveExpression	temp -> ay - minx		81624	0		-			
ANR	83352	PtrMemberAccess	temp -> ay		81624	0					
ANR	83353	Identifier	temp		81624	0					
ANR	83354	Identifier	ay		81624	1					
ANR	83355	Identifier	minx		81624	1					
ANR	83356	AdditiveExpression	temp -> by - minx		81624	1		-			
ANR	83357	PtrMemberAccess	temp -> by		81624	0					
ANR	83358	Identifier	temp		81624	0					
ANR	83359	Identifier	by		81624	1					
ANR	83360	Identifier	minx		81624	1					
ANR	83361	ExpressionStatement	rightlen = ( maxx - temp -> ay ) + ( maxx - temp -> by )	3090:3:77390:77438	81624	1	True				
ANR	83362	AssignmentExpression	rightlen = ( maxx - temp -> ay ) + ( maxx - temp -> by )		81624	0		=			
ANR	83363	Identifier	rightlen		81624	0					
ANR	83364	AdditiveExpression	( maxx - temp -> ay ) + ( maxx - temp -> by )		81624	1		+			
ANR	83365	AdditiveExpression	maxx - temp -> ay		81624	0		-			
ANR	83366	Identifier	maxx		81624	0					
ANR	83367	PtrMemberAccess	temp -> ay		81624	1					
ANR	83368	Identifier	temp		81624	0					
ANR	83369	Identifier	ay		81624	1					
ANR	83370	AdditiveExpression	maxx - temp -> by		81624	1		-			
ANR	83371	Identifier	maxx		81624	0					
ANR	83372	PtrMemberAccess	temp -> by		81624	1					
ANR	83373	Identifier	temp		81624	0					
ANR	83374	Identifier	by		81624	1					
ANR	83375	IfStatement	if ( tt )		81624	16					
ANR	83376	Condition	tt	3093:6:77451:77452	81624	0	True				
ANR	83377	Identifier	tt		81624	0					
ANR	83378	CompoundStatement		267:3:6787:6837	81624	1					
ANR	83379	IdentifierDeclStatement	int arg = ( rightlen < leftlen ) ? maxx + 1 : minx - 1 ;	3094:3:77460:77510	81624	0	True				
ANR	83380	IdentifierDecl	arg = ( rightlen < leftlen ) ? maxx + 1 : minx - 1		81624	0					
ANR	83381	IdentifierDeclType	int		81624	0					
ANR	83382	Identifier	arg		81624	1					
ANR	83383	AssignmentExpression	arg = ( rightlen < leftlen ) ? maxx + 1 : minx - 1		81624	2		=			
ANR	83384	Identifier	arg		81624	0					
ANR	83385	ConditionalExpression	( rightlen < leftlen ) ? maxx + 1 : minx - 1		81624	1					
ANR	83386	Condition	rightlen < leftlen		81624	0					
ANR	83387	RelationalExpression	rightlen < leftlen		81624	0		<			
ANR	83388	Identifier	rightlen		81624	0					
ANR	83389	Identifier	leftlen		81624	1					
ANR	83390	AdditiveExpression	maxx + 1		81624	1		+			
ANR	83391	Identifier	maxx		81624	0					
ANR	83392	PrimaryExpression	1		81624	1					
ANR	83393	AdditiveExpression	minx - 1		81624	2		-			
ANR	83394	Identifier	minx		81624	0					
ANR	83395	PrimaryExpression	1		81624	1					
ANR	83396	ExpressionStatement	"r_cons_canvas_line_back_edge ( g -> can , temp -> ax , temp -> ay , temp -> bx , temp -> by , & ( temp -> style ) , temp -> edgectr , arg , tt -> revedgectr , ! g -> layout )"	3095:3:77515:77656	81624	1	True				
ANR	83397	CallExpression	"r_cons_canvas_line_back_edge ( g -> can , temp -> ax , temp -> ay , temp -> bx , temp -> by , & ( temp -> style ) , temp -> edgectr , arg , tt -> revedgectr , ! g -> layout )"		81624	0					
ANR	83398	Callee	r_cons_canvas_line_back_edge		81624	0					
ANR	83399	Identifier	r_cons_canvas_line_back_edge		81624	0					
ANR	83400	ArgumentList	g -> can		81624	1					
ANR	83401	Argument	g -> can		81624	0					
ANR	83402	PtrMemberAccess	g -> can		81624	0					
ANR	83403	Identifier	g		81624	0					
ANR	83404	Identifier	can		81624	1					
ANR	83405	Argument	temp -> ax		81624	1					
ANR	83406	PtrMemberAccess	temp -> ax		81624	0					
ANR	83407	Identifier	temp		81624	0					
ANR	83408	Identifier	ax		81624	1					
ANR	83409	Argument	temp -> ay		81624	2					
ANR	83410	PtrMemberAccess	temp -> ay		81624	0					
ANR	83411	Identifier	temp		81624	0					
ANR	83412	Identifier	ay		81624	1					
ANR	83413	Argument	temp -> bx		81624	3					
ANR	83414	PtrMemberAccess	temp -> bx		81624	0					
ANR	83415	Identifier	temp		81624	0					
ANR	83416	Identifier	bx		81624	1					
ANR	83417	Argument	temp -> by		81624	4					
ANR	83418	PtrMemberAccess	temp -> by		81624	0					
ANR	83419	Identifier	temp		81624	0					
ANR	83420	Identifier	by		81624	1					
ANR	83421	Argument	& ( temp -> style )		81624	5					
ANR	83422	UnaryOperationExpression	& ( temp -> style )		81624	0					
ANR	83423	UnaryOperator	&		81624	0					
ANR	83424	PtrMemberAccess	temp -> style		81624	1					
ANR	83425	Identifier	temp		81624	0					
ANR	83426	Identifier	style		81624	1					
ANR	83427	Argument	temp -> edgectr		81624	6					
ANR	83428	PtrMemberAccess	temp -> edgectr		81624	0					
ANR	83429	Identifier	temp		81624	0					
ANR	83430	Identifier	edgectr		81624	1					
ANR	83431	Argument	arg		81624	7					
ANR	83432	Identifier	arg		81624	0					
ANR	83433	Argument	tt -> revedgectr		81624	8					
ANR	83434	PtrMemberAccess	tt -> revedgectr		81624	0					
ANR	83435	Identifier	tt		81624	0					
ANR	83436	Identifier	revedgectr		81624	1					
ANR	83437	Argument	! g -> layout		81624	9					
ANR	83438	UnaryOperationExpression	! g -> layout		81624	0					
ANR	83439	UnaryOperator	!		81624	0					
ANR	83440	PtrMemberAccess	g -> layout		81624	1					
ANR	83441	Identifier	g		81624	0					
ANR	83442	Identifier	layout		81624	1					
ANR	83443	Statement	r_list_foreach	3098:2:77665:77678	81624	17	True				
ANR	83444	Statement	(	3098:17:77680:77680	81624	18	True				
ANR	83445	Statement	lyr	3098:18:77681:77683	81624	19	True				
ANR	83446	Statement	","	3098:21:77684:77684	81624	20	True				
ANR	83447	Statement	ito	3098:23:77686:77688	81624	21	True				
ANR	83448	Statement	","	3098:26:77689:77689	81624	22	True				
ANR	83449	Statement	tl	3098:28:77691:77692	81624	23	True				
ANR	83450	Statement	)	3098:30:77693:77693	81624	24	True				
ANR	83451	CompoundStatement		271:32:7022:7022	81624	25					
ANR	83452	IfStatement	if ( tl -> layer < temp -> tolayer )		81624	0					
ANR	83453	Condition	tl -> layer < temp -> tolayer	3099:7:77704:77728	81624	0	True				
ANR	83454	RelationalExpression	tl -> layer < temp -> tolayer		81624	0		<			
ANR	83455	PtrMemberAccess	tl -> layer		81624	0					
ANR	83456	Identifier	tl		81624	0					
ANR	83457	Identifier	layer		81624	1					
ANR	83458	PtrMemberAccess	temp -> tolayer		81624	1					
ANR	83459	Identifier	temp		81624	0					
ANR	83460	Identifier	tolayer		81624	1					
ANR	83461	CompoundStatement		272:34:7058:7058	81624	1					
ANR	83462	ContinueStatement	continue ;	3100:4:77737:77745	81624	0	True				
ANR	83463	IfStatement	if ( rightlen < leftlen )		81624	1					
ANR	83464	Condition	rightlen < leftlen	3102:7:77759:77776	81624	0	True				
ANR	83465	RelationalExpression	rightlen < leftlen		81624	0		<			
ANR	83466	Identifier	rightlen		81624	0					
ANR	83467	Identifier	leftlen		81624	1					
ANR	83468	CompoundStatement		275:27:7106:7106	81624	1					
ANR	83469	ExpressionStatement	tl -> maxx = maxx + 1	3103:4:77785:77804	81624	0	True				
ANR	83470	AssignmentExpression	tl -> maxx = maxx + 1		81624	0		=			
ANR	83471	PtrMemberAccess	tl -> maxx		81624	0					
ANR	83472	Identifier	tl		81624	0					
ANR	83473	Identifier	maxx		81624	1					
ANR	83474	AdditiveExpression	maxx + 1		81624	1		+			
ANR	83475	Identifier	maxx		81624	0					
ANR	83476	PrimaryExpression	1		81624	1					
ANR	83477	ElseStatement	else		81624	0					
ANR	83478	CompoundStatement		277:10:7143:7143	81624	0					
ANR	83479	ExpressionStatement	tl -> minx = minx - 1	3105:4:77822:77841	81624	0	True				
ANR	83480	AssignmentExpression	tl -> minx = minx - 1		81624	0		=			
ANR	83481	PtrMemberAccess	tl -> minx		81624	0					
ANR	83482	Identifier	tl		81624	0					
ANR	83483	Identifier	minx		81624	1					
ANR	83484	AdditiveExpression	minx - 1		81624	1		-			
ANR	83485	Identifier	minx		81624	0					
ANR	83486	PrimaryExpression	1		81624	1					
ANR	83487	IfStatement	if ( tl -> layer >= temp -> fromlayer )		81624	2					
ANR	83488	Condition	tl -> layer >= temp -> fromlayer	3107:7:77855:77882	81624	0	True				
ANR	83489	RelationalExpression	tl -> layer >= temp -> fromlayer		81624	0		>=			
ANR	83490	PtrMemberAccess	tl -> layer		81624	0					
ANR	83491	Identifier	tl		81624	0					
ANR	83492	Identifier	layer		81624	1					
ANR	83493	PtrMemberAccess	temp -> fromlayer		81624	1					
ANR	83494	Identifier	temp		81624	0					
ANR	83495	Identifier	fromlayer		81624	1					
ANR	83496	CompoundStatement		280:37:7212:7212	81624	1					
ANR	83497	BreakStatement	break ;	3108:4:77891:77896	81624	0	True				
ANR	83498	Statement	r_list_foreach	3113:1:77912:77925	81624	32	True				
ANR	83499	Statement	(	3113:16:77927:77927	81624	33	True				
ANR	83500	Statement	lyr	3113:17:77928:77930	81624	34	True				
ANR	83501	Statement	","	3113:20:77931:77931	81624	35	True				
ANR	83502	Statement	ito	3113:22:77933:77935	81624	36	True				
ANR	83503	Statement	","	3113:25:77936:77936	81624	37	True				
ANR	83504	Statement	tl	3113:27:77938:77939	81624	38	True				
ANR	83505	Statement	)	3113:29:77940:77940	81624	39	True				
ANR	83506	CompoundStatement		286:31:7269:7269	81624	40					
ANR	83507	ExpressionStatement	free ( tl )	3114:2:77946:77955	81624	0	True				
ANR	83508	CallExpression	free ( tl )		81624	0					
ANR	83509	Callee	free		81624	0					
ANR	83510	Identifier	free		81624	0					
ANR	83511	ArgumentList	tl		81624	1					
ANR	83512	Argument	tl		81624	0					
ANR	83513	Identifier	tl		81624	0					
ANR	83514	Statement	r_list_foreach	3117:1:77962:77975	81624	41	True				
ANR	83515	Statement	(	3117:16:77977:77977	81624	42	True				
ANR	83516	Statement	bckedges	3117:17:77978:77985	81624	43	True				
ANR	83517	Statement	","	3117:25:77986:77986	81624	44	True				
ANR	83518	Statement	ito	3117:27:77988:77990	81624	45	True				
ANR	83519	Statement	","	3117:30:77991:77991	81624	46	True				
ANR	83520	Statement	tl	3117:32:77993:77994	81624	47	True				
ANR	83521	Statement	)	3117:34:77995:77995	81624	48	True				
ANR	83522	CompoundStatement		290:36:7324:7324	81624	49					
ANR	83523	ExpressionStatement	free ( tl )	3118:2:78001:78010	81624	0	True				
ANR	83524	CallExpression	free ( tl )		81624	0					
ANR	83525	Callee	free		81624	0					
ANR	83526	Identifier	free		81624	0					
ANR	83527	ArgumentList	tl		81624	1					
ANR	83528	Argument	tl		81624	0					
ANR	83529	Identifier	tl		81624	0					
ANR	83530	ExpressionStatement	r_list_free ( lyr )	3121:1:78017:78034	81624	50	True				
ANR	83531	CallExpression	r_list_free ( lyr )		81624	0					
ANR	83532	Callee	r_list_free		81624	0					
ANR	83533	Identifier	r_list_free		81624	0					
ANR	83534	ArgumentList	lyr		81624	1					
ANR	83535	Argument	lyr		81624	0					
ANR	83536	Identifier	lyr		81624	0					
ANR	83537	ExpressionStatement	r_list_free ( bckedges )	3122:1:78037:78059	81624	51	True				
ANR	83538	CallExpression	r_list_free ( bckedges )		81624	0					
ANR	83539	Callee	r_list_free		81624	0					
ANR	83540	Identifier	r_list_free		81624	0					
ANR	83541	ArgumentList	bckedges		81624	1					
ANR	83542	Argument	bckedges		81624	0					
ANR	83543	Identifier	bckedges		81624	0					
ANR	83544	ExpressionStatement	r_cons_break_pop ( )	3123:1:78062:78081	81624	52	True				
ANR	83545	CallExpression	r_cons_break_pop ( )		81624	0					
ANR	83546	Callee	r_cons_break_pop		81624	0					
ANR	83547	Identifier	r_cons_break_pop		81624	0					
ANR	83548	ArgumentList			81624	1					
ANR	83549	ReturnType	static void		81624	1					
ANR	83550	Identifier	agraph_print_edges		81624	2					
ANR	83551	ParameterList	RAGraph * g		81624	3					
ANR	83552	Parameter	RAGraph * g	2828:31:70660:70669	81624	0	True				
ANR	83553	ParameterType	RAGraph *		81624	0					
ANR	83554	Identifier	g		81624	1					
ANR	83555	CFGEntryNode	ENTRY		81624		True				
ANR	83556	CFGExitNode	EXIT		81624		True				
ANR	83557	CFGErrorNode	ERROR		81624		True				
ANR	83558	Symbol	tm -> minx		81624						
ANR	83559	Symbol	style . symbol		81624						
ANR	83560	Symbol	bendpoint		81624						
ANR	83561	Symbol	tmp -> bx		81624						
ANR	83562	Symbol	tmp -> by		81624						
ANR	83563	Symbol	tmp		81624						
ANR	83564	Symbol	( ( RGraphNode * ) r_list_first ( ga -> in_nodes ) ) -> data		81624						
ANR	83565	Symbol	a_x_inc		81624						
ANR	83566	Symbol	g -> is_callgraph		81624						
ANR	83567	Symbol	g -> can		81624						
ANR	83568	Symbol	rightlen		81624						
ANR	83569	Symbol	tm -> revedgectr		81624						
ANR	83570	Symbol	in -> gnode -> out_nodes		81624						
ANR	83571	Symbol	neighbours -> length		81624						
ANR	83572	Symbol	in		81624						
ANR	83573	Symbol	* tt		81624						
ANR	83574	Symbol	ga -> in_nodes		81624						
ANR	83575	Symbol	in_nth		81624						
ANR	83576	Symbol	* in -> gnode		81624						
ANR	83577	Symbol	LINE_TRUE		81624						
ANR	83578	Symbol	tm -> maxx		81624						
ANR	83579	Symbol	ax		81624						
ANR	83580	Symbol	ay		81624						
ANR	83581	Symbol	style		81624						
ANR	83582	Symbol	* tm		81624						
ANR	83583	Symbol	* tl		81624						
ANR	83584	Symbol	tmplayercmp		81624						
ANR	83585	Symbol	* tmp		81624						
ANR	83586	Symbol	* * ga		81624						
ANR	83587	Symbol	r_graph_get_neighbours		81624						
ANR	83588	Symbol	a -> h		81624						
ANR	83589	Symbol	( ( RGraphNode * ) r_list_first ( ( in -> gnode ) -> in_nodes ) ) -> data		81624						
ANR	83590	Symbol	LINE_UNCJMP		81624						
ANR	83591	Symbol	tl -> minx		81624						
ANR	83592	Symbol	r_cons_is_breaked		81624						
ANR	83593	Symbol	tm -> edgectr		81624						
ANR	83594	Symbol	g -> graph		81624						
ANR	83595	Symbol	minx		81624						
ANR	83596	Symbol	bx		81624						
ANR	83597	Symbol	by		81624						
ANR	83598	Symbol	arg		81624						
ANR	83599	Symbol	temp -> edgectr		81624						
ANR	83600	Symbol	tmp -> style		81624						
ANR	83601	Symbol	LINE_NOSYM_HORIZ		81624						
ANR	83602	Symbol	a		81624						
ANR	83603	Symbol	b		81624						
ANR	83604	Symbol	DOT_STYLE_CONDITIONAL		81624						
ANR	83605	Symbol	r_graph_get_nodes		81624						
ANR	83606	Symbol	g -> layout		81624						
ANR	83607	Symbol	& style		81624						
ANR	83608	Symbol	g		81624						
ANR	83609	Symbol	LINE_NONE		81624						
ANR	83610	Symbol	neighbours		81624						
ANR	83611	Symbol	many		81624						
ANR	83612	Symbol	tm -> layer		81624						
ANR	83613	Symbol	tmp -> ay		81624						
ANR	83614	Symbol	a -> layer		81624						
ANR	83615	Symbol	tmp -> ax		81624						
ANR	83616	Symbol	t		81624						
ANR	83617	Symbol	a -> x		81624						
ANR	83618	Symbol	a -> layer_width		81624						
ANR	83619	Symbol	a -> y		81624						
ANR	83620	Symbol	tl		81624						
ANR	83621	Symbol	tm		81624						
ANR	83622	Symbol	a -> w		81624						
ANR	83623	Symbol	( in -> gnode ) -> in_nodes		81624						
ANR	83624	Symbol	b_x_inc		81624						
ANR	83625	Symbol	tl -> maxx		81624						
ANR	83626	Symbol	r_list_length		81624						
ANR	83627	Symbol	tt		81624						
ANR	83628	Symbol	* ga		81624						
ANR	83629	Symbol	lyr		81624						
ANR	83630	Symbol	get_edge_number		81624						
ANR	83631	Symbol	temp -> tolayer		81624						
ANR	83632	Symbol	ga -> out_nodes		81624						
ANR	83633	Symbol	* * in		81624						
ANR	83634	Symbol	tmp -> fromlayer		81624						
ANR	83635	Symbol	& temp -> style		81624						
ANR	83636	Symbol	b -> layer		81624						
ANR	83637	Symbol	b -> is_dummy		81624						
ANR	83638	Symbol	itn		81624						
ANR	83639	Symbol	a -> is_dummy		81624						
ANR	83640	Symbol	itm		81624						
ANR	83641	Symbol	NULL		81624						
ANR	83642	Symbol	DOT_STYLE_BACKEDGE		81624						
ANR	83643	Symbol	b -> h		81624						
ANR	83644	Symbol	ito		81624						
ANR	83645	Symbol	a -> layer_height		81624						
ANR	83646	Symbol	first_x_cmp		81624						
ANR	83647	Symbol	maxx		81624						
ANR	83648	Symbol	temp -> fromlayer		81624						
ANR	83649	Symbol	temp -> ax		81624						
ANR	83650	Symbol	r_list_get_n		81624						
ANR	83651	Symbol	temp -> ay		81624						
ANR	83652	Symbol	parent_many		81624						
ANR	83653	Symbol	neighbours -> head		81624						
ANR	83654	Symbol	* temp		81624						
ANR	83655	Symbol	ga -> out_nodes -> sorted		81624						
ANR	83656	Symbol	style . color		81624						
ANR	83657	Symbol	true		81624						
ANR	83658	Symbol	DOT_STYLE_NORMAL		81624						
ANR	83659	Symbol	* ga -> out_nodes		81624						
ANR	83660	Symbol	g -> hints		81624						
ANR	83661	Symbol	* r_list_first		81624						
ANR	83662	Symbol	g -> zoom		81624						
ANR	83663	Symbol	tt -> revedgectr		81624						
ANR	83664	Symbol	in -> is_dummy		81624						
ANR	83665	Symbol	* in		81624						
ANR	83666	Symbol	temp -> by		81624						
ANR	83667	Symbol	calloc		81624						
ANR	83668	Symbol	temp -> bx		81624						
ANR	83669	Symbol	r_list_first		81624						
ANR	83670	Symbol	b -> x		81624						
ANR	83671	Symbol	LINE_NOSYM_VERT		81624						
ANR	83672	Symbol	ga		81624						
ANR	83673	Symbol	gb		81624						
ANR	83674	Symbol	b -> y		81624						
ANR	83675	Symbol	bckedges		81624						
ANR	83676	Symbol	R_EDGES_X_INC		81624						
ANR	83677	Symbol	leftlen		81624						
ANR	83678	Symbol	temp		81624						
ANR	83679	Symbol	tmp -> tolayer		81624						
ANR	83680	Symbol	false		81624						
ANR	83681	Symbol	style . dot_style		81624						
ANR	83682	Symbol	LINE_FALSE		81624						
ANR	83683	Symbol	* a		81624						
ANR	83684	Symbol	* b		81624						
ANR	83685	Symbol	in -> gnode		81624						
ANR	83686	Symbol	tmp -> edgectr		81624						
ANR	83687	Symbol	* g		81624						
ANR	83688	Symbol	nodes		81624						
ANR	83689	Symbol	g -> edgemode		81624						
ANR	83690	Symbol	* neighbours		81624						
ANR	83691	Symbol	tl -> layer		81624						
ANR	83692	Symbol	b -> layer_width		81624						
ANR	83693	Symbol	out_nth		81624						
ANR	83694	Symbol	r_list_new		81624						
ANR	83695	Function	agraph_toggle_callgraph	3126:0:78086:78233							
ANR	83696	FunctionDef	agraph_toggle_callgraph (RAGraph * g)		83695	0					
ANR	83697	CompoundStatement		3126:48:78134:78233	83695	0					
ANR	83698	ExpressionStatement	g -> is_callgraph = ! g -> is_callgraph	3127:1:78137:78171	83695	0	True				
ANR	83699	AssignmentExpression	g -> is_callgraph = ! g -> is_callgraph		83695	0		=			
ANR	83700	PtrMemberAccess	g -> is_callgraph		83695	0					
ANR	83701	Identifier	g		83695	0					
ANR	83702	Identifier	is_callgraph		83695	1					
ANR	83703	UnaryOperationExpression	! g -> is_callgraph		83695	1					
ANR	83704	UnaryOperator	!		83695	0					
ANR	83705	PtrMemberAccess	g -> is_callgraph		83695	1					
ANR	83706	Identifier	g		83695	0					
ANR	83707	Identifier	is_callgraph		83695	1					
ANR	83708	ExpressionStatement	g -> need_reload_nodes = true	3128:1:78174:78201	83695	1	True				
ANR	83709	AssignmentExpression	g -> need_reload_nodes = true		83695	0		=			
ANR	83710	PtrMemberAccess	g -> need_reload_nodes		83695	0					
ANR	83711	Identifier	g		83695	0					
ANR	83712	Identifier	need_reload_nodes		83695	1					
ANR	83713	Identifier	true		83695	1					
ANR	83714	ExpressionStatement	g -> force_update_seek = true	3129:1:78204:78231	83695	2	True				
ANR	83715	AssignmentExpression	g -> force_update_seek = true		83695	0		=			
ANR	83716	PtrMemberAccess	g -> force_update_seek		83695	0					
ANR	83717	Identifier	g		83695	0					
ANR	83718	Identifier	force_update_seek		83695	1					
ANR	83719	Identifier	true		83695	1					
ANR	83720	ReturnType	static void		83695	1					
ANR	83721	Identifier	agraph_toggle_callgraph		83695	2					
ANR	83722	ParameterList	RAGraph * g		83695	3					
ANR	83723	Parameter	RAGraph * g	3126:36:78122:78131	83695	0	True				
ANR	83724	ParameterType	RAGraph *		83695	0					
ANR	83725	Identifier	g		83695	1					
ANR	83726	CFGEntryNode	ENTRY		83695		True				
ANR	83727	CFGExitNode	EXIT		83695		True				
ANR	83728	Symbol	* g		83695						
ANR	83729	Symbol	g -> force_update_seek		83695						
ANR	83730	Symbol	g -> need_reload_nodes		83695						
ANR	83731	Symbol	g		83695						
ANR	83732	Symbol	true		83695						
ANR	83733	Symbol	g -> is_callgraph		83695						
ANR	83734	Function	agraph_set_zoom	3132:0:78236:78717							
ANR	83735	FunctionDef	"agraph_set_zoom (RAGraph * g , int v)"		83734	0					
ANR	83736	CompoundStatement		3132:47:78283:78717	83734	0					
ANR	83737	IfStatement	if ( v >= - 10 )		83734	0					
ANR	83738	Condition	v >= - 10	3133:5:78290:78297	83734	0	True				
ANR	83739	RelationalExpression	v >= - 10		83734	0		>=			
ANR	83740	Identifier	v		83734	0					
ANR	83741	UnaryOperationExpression	- 10		83734	1					
ANR	83742	UnaryOperator	-		83734	0					
ANR	83743	PrimaryExpression	10		83734	1					
ANR	83744	CompoundStatement		12:2:218:235	83734	1					
ANR	83745	ExpressionStatement	g -> is_tiny = false	3134:2:78304:78322	83734	0	True				
ANR	83746	AssignmentExpression	g -> is_tiny = false		83734	0		=			
ANR	83747	PtrMemberAccess	g -> is_tiny		83734	0					
ANR	83748	Identifier	g		83734	0					
ANR	83749	Identifier	is_tiny		83734	1					
ANR	83750	Identifier	false		83734	1					
ANR	83751	IfStatement	if ( v == 0 )		83734	1					
ANR	83752	Condition	v == 0	3135:6:78330:78335	83734	0	True				
ANR	83753	EqualityExpression	v == 0		83734	0		==			
ANR	83754	Identifier	v		83734	0					
ANR	83755	PrimaryExpression	0		83734	1					
ANR	83756	CompoundStatement		4:14:54:54	83734	1					
ANR	83757	ExpressionStatement	g -> mode = R_AGRAPH_MODE_MINI	3136:3:78343:78371	83734	0	True				
ANR	83758	AssignmentExpression	g -> mode = R_AGRAPH_MODE_MINI		83734	0		=			
ANR	83759	PtrMemberAccess	g -> mode		83734	0					
ANR	83760	Identifier	g		83734	0					
ANR	83761	Identifier	mode		83734	1					
ANR	83762	Identifier	R_AGRAPH_MODE_MINI		83734	1					
ANR	83763	ElseStatement	else		83734	0					
ANR	83764	IfStatement	if ( v < 0 )		83734	0					
ANR	83765	Condition	v < 0	3137:13:78386:78390	83734	0	True				
ANR	83766	RelationalExpression	v < 0		83734	0		<			
ANR	83767	Identifier	v		83734	0					
ANR	83768	PrimaryExpression	0		83734	1					
ANR	83769	CompoundStatement		6:20:109:109	83734	1					
ANR	83770	ExpressionStatement	g -> mode = R_AGRAPH_MODE_TINY	3138:3:78398:78426	83734	0	True				
ANR	83771	AssignmentExpression	g -> mode = R_AGRAPH_MODE_TINY		83734	0		=			
ANR	83772	PtrMemberAccess	g -> mode		83734	0					
ANR	83773	Identifier	g		83734	0					
ANR	83774	Identifier	mode		83734	1					
ANR	83775	Identifier	R_AGRAPH_MODE_TINY		83734	1					
ANR	83776	ExpressionStatement	g -> is_tiny = true	3139:3:78431:78448	83734	1	True				
ANR	83777	AssignmentExpression	g -> is_tiny = true		83734	0		=			
ANR	83778	PtrMemberAccess	g -> is_tiny		83734	0					
ANR	83779	Identifier	g		83734	0					
ANR	83780	Identifier	is_tiny		83734	1					
ANR	83781	Identifier	true		83734	1					
ANR	83782	ElseStatement	else		83734	0					
ANR	83783	CompoundStatement		9:9:175:175	83734	0					
ANR	83784	ExpressionStatement	g -> mode = R_AGRAPH_MODE_NORMAL	3141:3:78464:78494	83734	0	True				
ANR	83785	AssignmentExpression	g -> mode = R_AGRAPH_MODE_NORMAL		83734	0		=			
ANR	83786	PtrMemberAccess	g -> mode		83734	0					
ANR	83787	Identifier	g		83734	0					
ANR	83788	Identifier	mode		83734	1					
ANR	83789	Identifier	R_AGRAPH_MODE_NORMAL		83734	1					
ANR	83790	IdentifierDeclStatement	const int K = 920 ;	3143:2:78502:78519	83734	2	True				
ANR	83791	IdentifierDecl	K = 920		83734	0					
ANR	83792	IdentifierDeclType	const int		83734	0					
ANR	83793	Identifier	K		83734	1					
ANR	83794	AssignmentExpression	K = 920		83734	2		=			
ANR	83795	Identifier	K		83734	0					
ANR	83796	PrimaryExpression	920		83734	1					
ANR	83797	IfStatement	if ( g -> zoom < v )		83734	3					
ANR	83798	Condition	g -> zoom < v	3144:6:78527:78537	83734	0	True				
ANR	83799	RelationalExpression	g -> zoom < v		83734	0		<			
ANR	83800	PtrMemberAccess	g -> zoom		83734	0					
ANR	83801	Identifier	g		83734	0					
ANR	83802	Identifier	zoom		83734	1					
ANR	83803	Identifier	v		83734	1					
ANR	83804	CompoundStatement		13:19:256:256	83734	1					
ANR	83805	ExpressionStatement	g -> can -> sy = ( g -> can -> sy * K ) / 1000	3145:3:78545:78581	83734	0	True				
ANR	83806	AssignmentExpression	g -> can -> sy = ( g -> can -> sy * K ) / 1000		83734	0		=			
ANR	83807	PtrMemberAccess	g -> can -> sy		83734	0					
ANR	83808	PtrMemberAccess	g -> can		83734	0					
ANR	83809	Identifier	g		83734	0					
ANR	83810	Identifier	can		83734	1					
ANR	83811	Identifier	sy		83734	1					
ANR	83812	MultiplicativeExpression	( g -> can -> sy * K ) / 1000		83734	1		/			
ANR	83813	MultiplicativeExpression	g -> can -> sy * K		83734	0		*			
ANR	83814	PtrMemberAccess	g -> can -> sy		83734	0					
ANR	83815	PtrMemberAccess	g -> can		83734	0					
ANR	83816	Identifier	g		83734	0					
ANR	83817	Identifier	can		83734	1					
ANR	83818	Identifier	sy		83734	1					
ANR	83819	Identifier	K		83734	1					
ANR	83820	PrimaryExpression	1000		83734	1					
ANR	83821	ElseStatement	else		83734	0					
ANR	83822	CompoundStatement		16:7:310:310	83734	0					
ANR	83823	ExpressionStatement	g -> can -> sy = ( g -> can -> sy * 1000 ) / K	3148:3:78599:78635	83734	0	True				
ANR	83824	AssignmentExpression	g -> can -> sy = ( g -> can -> sy * 1000 ) / K		83734	0		=			
ANR	83825	PtrMemberAccess	g -> can -> sy		83734	0					
ANR	83826	PtrMemberAccess	g -> can		83734	0					
ANR	83827	Identifier	g		83734	0					
ANR	83828	Identifier	can		83734	1					
ANR	83829	Identifier	sy		83734	1					
ANR	83830	MultiplicativeExpression	( g -> can -> sy * 1000 ) / K		83734	1		/			
ANR	83831	MultiplicativeExpression	g -> can -> sy * 1000		83734	0		*			
ANR	83832	PtrMemberAccess	g -> can -> sy		83734	0					
ANR	83833	PtrMemberAccess	g -> can		83734	0					
ANR	83834	Identifier	g		83734	0					
ANR	83835	Identifier	can		83734	1					
ANR	83836	Identifier	sy		83734	1					
ANR	83837	PrimaryExpression	1000		83734	1					
ANR	83838	Identifier	K		83734	1					
ANR	83839	ExpressionStatement	g -> zoom = v	3150:2:78643:78654	83734	4	True				
ANR	83840	AssignmentExpression	g -> zoom = v		83734	0		=			
ANR	83841	PtrMemberAccess	g -> zoom		83734	0					
ANR	83842	Identifier	g		83734	0					
ANR	83843	Identifier	zoom		83734	1					
ANR	83844	Identifier	v		83734	1					
ANR	83845	ExpressionStatement	g -> need_update_dim = true	3151:2:78658:78683	83734	5	True				
ANR	83846	AssignmentExpression	g -> need_update_dim = true		83734	0		=			
ANR	83847	PtrMemberAccess	g -> need_update_dim		83734	0					
ANR	83848	Identifier	g		83734	0					
ANR	83849	Identifier	need_update_dim		83734	1					
ANR	83850	Identifier	true		83734	1					
ANR	83851	ExpressionStatement	g -> need_set_layout = true	3152:2:78687:78712	83734	6	True				
ANR	83852	AssignmentExpression	g -> need_set_layout = true		83734	0		=			
ANR	83853	PtrMemberAccess	g -> need_set_layout		83734	0					
ANR	83854	Identifier	g		83734	0					
ANR	83855	Identifier	need_set_layout		83734	1					
ANR	83856	Identifier	true		83734	1					
ANR	83857	ReturnType	static void		83734	1					
ANR	83858	Identifier	agraph_set_zoom		83734	2					
ANR	83859	ParameterList	"RAGraph * g , int v"		83734	3					
ANR	83860	Parameter	RAGraph * g	3132:28:78264:78273	83734	0	True				
ANR	83861	ParameterType	RAGraph *		83734	0					
ANR	83862	Identifier	g		83734	1					
ANR	83863	Parameter	int v	3132:40:78276:78280	83734	1	True				
ANR	83864	ParameterType	int		83734	0					
ANR	83865	Identifier	v		83734	1					
ANR	83866	CFGEntryNode	ENTRY		83734		True				
ANR	83867	CFGExitNode	EXIT		83734		True				
ANR	83868	Symbol	g -> need_set_layout		83734						
ANR	83869	Symbol	* * g		83734						
ANR	83870	Symbol	R_AGRAPH_MODE_NORMAL		83734						
ANR	83871	Symbol	g -> zoom		83734						
ANR	83872	Symbol	g		83734						
ANR	83873	Symbol	false		83734						
ANR	83874	Symbol	R_AGRAPH_MODE_MINI		83734						
ANR	83875	Symbol	K		83734						
ANR	83876	Symbol	* g -> can		83734						
ANR	83877	Symbol	g -> need_update_dim		83734						
ANR	83878	Symbol	g -> mode		83734						
ANR	83879	Symbol	* g		83734						
ANR	83880	Symbol	g -> is_tiny		83734						
ANR	83881	Symbol	v		83734						
ANR	83882	Symbol	true		83734						
ANR	83883	Symbol	g -> can		83734						
ANR	83884	Symbol	R_AGRAPH_MODE_TINY		83734						
ANR	83885	Symbol	g -> can -> sy		83734						
ANR	83886	Function	agraph_reload_nodes	3159:0:78906:79043							
ANR	83887	FunctionDef	"agraph_reload_nodes (RAGraph * g , RCore * core , RAnalFunction * fcn)"		83886	0					
ANR	83888	CompoundStatement		3159:76:78982:79043	83886	0					
ANR	83889	ExpressionStatement	r_agraph_reset ( g )	3160:1:78985:79003	83886	0	True				
ANR	83890	CallExpression	r_agraph_reset ( g )		83886	0					
ANR	83891	Callee	r_agraph_reset		83886	0					
ANR	83892	Identifier	r_agraph_reset		83886	0					
ANR	83893	ArgumentList	g		83886	1					
ANR	83894	Argument	g		83886	0					
ANR	83895	Identifier	g		83886	0					
ANR	83896	ReturnStatement	"return reload_nodes ( g , core , fcn ) ;"	3162:1:79007:79041	83886	1	True				
ANR	83897	CallExpression	"reload_nodes ( g , core , fcn )"		83886	0					
ANR	83898	Callee	reload_nodes		83886	0					
ANR	83899	Identifier	reload_nodes		83886	0					
ANR	83900	ArgumentList	g		83886	1					
ANR	83901	Argument	g		83886	0					
ANR	83902	Identifier	g		83886	0					
ANR	83903	Argument	core		83886	1					
ANR	83904	Identifier	core		83886	0					
ANR	83905	Argument	fcn		83886	2					
ANR	83906	Identifier	fcn		83886	0					
ANR	83907	ReturnType	static int		83886	1					
ANR	83908	Identifier	agraph_reload_nodes		83886	2					
ANR	83909	ParameterList	"RAGraph * g , RCore * core , RAnalFunction * fcn"		83886	3					
ANR	83910	Parameter	RAGraph * g	3159:31:78937:78946	83886	0	True				
ANR	83911	ParameterType	RAGraph *		83886	0					
ANR	83912	Identifier	g		83886	1					
ANR	83913	Parameter	RCore * core	3159:43:78949:78959	83886	1	True				
ANR	83914	ParameterType	RCore *		83886	0					
ANR	83915	Identifier	core		83886	1					
ANR	83916	Parameter	RAnalFunction * fcn	3159:56:78962:78979	83886	2	True				
ANR	83917	ParameterType	RAnalFunction *		83886	0					
ANR	83918	Identifier	fcn		83886	1					
ANR	83919	CFGEntryNode	ENTRY		83886		True				
ANR	83920	CFGExitNode	EXIT		83886		True				
ANR	83921	Symbol	fcn		83886						
ANR	83922	Symbol	core		83886						
ANR	83923	Symbol	reload_nodes		83886						
ANR	83924	Symbol	g		83886						
ANR	83925	Function	follow_nth	3165:0:79046:79348							
ANR	83926	FunctionDef	"follow_nth (RAGraph * g , int nth)"		83925	0					
ANR	83927	CompoundStatement		3165:44:79090:79348	83925	0					
ANR	83928	IdentifierDeclStatement	"const RGraphNode * cn = r_graph_nth_neighbour ( g -> graph , g -> curnode , nth ) ;"	3166:1:79093:79165	83925	0	True				
ANR	83929	IdentifierDecl	"* cn = r_graph_nth_neighbour ( g -> graph , g -> curnode , nth )"		83925	0					
ANR	83930	IdentifierDeclType	const RGraphNode *		83925	0					
ANR	83931	Identifier	cn		83925	1					
ANR	83932	AssignmentExpression	"* cn = r_graph_nth_neighbour ( g -> graph , g -> curnode , nth )"		83925	2		=			
ANR	83933	Identifier	cn		83925	0					
ANR	83934	CallExpression	"r_graph_nth_neighbour ( g -> graph , g -> curnode , nth )"		83925	1					
ANR	83935	Callee	r_graph_nth_neighbour		83925	0					
ANR	83936	Identifier	r_graph_nth_neighbour		83925	0					
ANR	83937	ArgumentList	g -> graph		83925	1					
ANR	83938	Argument	g -> graph		83925	0					
ANR	83939	PtrMemberAccess	g -> graph		83925	0					
ANR	83940	Identifier	g		83925	0					
ANR	83941	Identifier	graph		83925	1					
ANR	83942	Argument	g -> curnode		83925	1					
ANR	83943	PtrMemberAccess	g -> curnode		83925	0					
ANR	83944	Identifier	g		83925	0					
ANR	83945	Identifier	curnode		83925	1					
ANR	83946	Argument	nth		83925	2					
ANR	83947	Identifier	nth		83925	0					
ANR	83948	IdentifierDeclStatement	RANode * a = get_anode ( cn ) ;	3167:1:79168:79194	83925	1	True				
ANR	83949	IdentifierDecl	* a = get_anode ( cn )		83925	0					
ANR	83950	IdentifierDeclType	RANode *		83925	0					
ANR	83951	Identifier	a		83925	1					
ANR	83952	AssignmentExpression	* a = get_anode ( cn )		83925	2		=			
ANR	83953	Identifier	a		83925	0					
ANR	83954	CallExpression	get_anode ( cn )		83925	1					
ANR	83955	Callee	get_anode		83925	0					
ANR	83956	Identifier	get_anode		83925	0					
ANR	83957	ArgumentList	cn		83925	1					
ANR	83958	Argument	cn		83925	0					
ANR	83959	Identifier	cn		83925	0					
ANR	83960	WhileStatement	while ( a && a -> is_dummy )		83925	2					
ANR	83961	Condition	a && a -> is_dummy	3169:8:79205:79220	83925	0	True				
ANR	83962	AndExpression	a && a -> is_dummy		83925	0		&&			
ANR	83963	Identifier	a		83925	0					
ANR	83964	PtrMemberAccess	a -> is_dummy		83925	1					
ANR	83965	Identifier	a		83925	0					
ANR	83966	Identifier	is_dummy		83925	1					
ANR	83967	CompoundStatement		5:26:132:132	83925	1					
ANR	83968	ExpressionStatement	"cn = r_graph_nth_neighbour ( g -> graph , a -> gnode , 0 )"	3170:2:79227:79277	83925	0	True				
ANR	83969	AssignmentExpression	"cn = r_graph_nth_neighbour ( g -> graph , a -> gnode , 0 )"		83925	0		=			
ANR	83970	Identifier	cn		83925	0					
ANR	83971	CallExpression	"r_graph_nth_neighbour ( g -> graph , a -> gnode , 0 )"		83925	1					
ANR	83972	Callee	r_graph_nth_neighbour		83925	0					
ANR	83973	Identifier	r_graph_nth_neighbour		83925	0					
ANR	83974	ArgumentList	g -> graph		83925	1					
ANR	83975	Argument	g -> graph		83925	0					
ANR	83976	PtrMemberAccess	g -> graph		83925	0					
ANR	83977	Identifier	g		83925	0					
ANR	83978	Identifier	graph		83925	1					
ANR	83979	Argument	a -> gnode		83925	1					
ANR	83980	PtrMemberAccess	a -> gnode		83925	0					
ANR	83981	Identifier	a		83925	0					
ANR	83982	Identifier	gnode		83925	1					
ANR	83983	Argument	0		83925	2					
ANR	83984	PrimaryExpression	0		83925	0					
ANR	83985	ExpressionStatement	a = get_anode ( cn )	3171:2:79281:79299	83925	1	True				
ANR	83986	AssignmentExpression	a = get_anode ( cn )		83925	0		=			
ANR	83987	Identifier	a		83925	0					
ANR	83988	CallExpression	get_anode ( cn )		83925	1					
ANR	83989	Callee	get_anode		83925	0					
ANR	83990	Identifier	get_anode		83925	0					
ANR	83991	ArgumentList	cn		83925	1					
ANR	83992	Argument	cn		83925	0					
ANR	83993	Identifier	cn		83925	0					
ANR	83994	IfStatement	if ( a )		83925	3					
ANR	83995	Condition	a	3173:5:79309:79309	83925	0	True				
ANR	83996	Identifier	a		83925	0					
ANR	83997	CompoundStatement		9:8:221:221	83925	1					
ANR	83998	ExpressionStatement	"r_agraph_set_curnode ( g , a )"	3174:2:79316:79343	83925	0	True				
ANR	83999	CallExpression	"r_agraph_set_curnode ( g , a )"		83925	0					
ANR	84000	Callee	r_agraph_set_curnode		83925	0					
ANR	84001	Identifier	r_agraph_set_curnode		83925	0					
ANR	84002	ArgumentList	g		83925	1					
ANR	84003	Argument	g		83925	0					
ANR	84004	Identifier	g		83925	0					
ANR	84005	Argument	a		83925	1					
ANR	84006	Identifier	a		83925	0					
ANR	84007	ReturnType	static void		83925	1					
ANR	84008	Identifier	follow_nth		83925	2					
ANR	84009	ParameterList	"RAGraph * g , int nth"		83925	3					
ANR	84010	Parameter	RAGraph * g	3165:23:79069:79078	83925	0	True				
ANR	84011	ParameterType	RAGraph *		83925	0					
ANR	84012	Identifier	g		83925	1					
ANR	84013	Parameter	int nth	3165:35:79081:79087	83925	1	True				
ANR	84014	ParameterType	int		83925	0					
ANR	84015	Identifier	nth		83925	1					
ANR	84016	CFGEntryNode	ENTRY		83925		True				
ANR	84017	CFGExitNode	EXIT		83925		True				
ANR	84018	Symbol	* g		83925						
ANR	84019	Symbol	a		83925						
ANR	84020	Symbol	a -> is_dummy		83925						
ANR	84021	Symbol	nth		83925						
ANR	84022	Symbol	get_anode		83925						
ANR	84023	Symbol	g -> graph		83925						
ANR	84024	Symbol	g		83925						
ANR	84025	Symbol	g -> curnode		83925						
ANR	84026	Symbol	a -> gnode		83925						
ANR	84027	Symbol	cn		83925						
ANR	84028	Symbol	* a		83925						
ANR	84029	Symbol	r_graph_nth_neighbour		83925						
ANR	84030	Function	move_current_node	3178:0:79351:79595							
ANR	84031	FunctionDef	"move_current_node (RAGraph * g , int xdiff , int ydiff)"		84030	0					
ANR	84032	CompoundStatement		3178:64:79415:79595	84030	0					
ANR	84033	IdentifierDeclStatement	RANode * n = get_anode ( g -> curnode ) ;	3179:1:79418:79452	84030	0	True				
ANR	84034	IdentifierDecl	* n = get_anode ( g -> curnode )		84030	0					
ANR	84035	IdentifierDeclType	RANode *		84030	0					
ANR	84036	Identifier	n		84030	1					
ANR	84037	AssignmentExpression	* n = get_anode ( g -> curnode )		84030	2		=			
ANR	84038	Identifier	n		84030	0					
ANR	84039	CallExpression	get_anode ( g -> curnode )		84030	1					
ANR	84040	Callee	get_anode		84030	0					
ANR	84041	Identifier	get_anode		84030	0					
ANR	84042	ArgumentList	g -> curnode		84030	1					
ANR	84043	Argument	g -> curnode		84030	0					
ANR	84044	PtrMemberAccess	g -> curnode		84030	0					
ANR	84045	Identifier	g		84030	0					
ANR	84046	Identifier	curnode		84030	1					
ANR	84047	IfStatement	if ( n )		84030	1					
ANR	84048	Condition	n	3180:5:79459:79459	84030	0	True				
ANR	84049	Identifier	n		84030	0					
ANR	84050	CompoundStatement		3:8:46:46	84030	1					
ANR	84051	IfStatement	if ( is_tiny ( g ) )		84030	0					
ANR	84052	Condition	is_tiny ( g )	3181:6:79470:79480	84030	0	True				
ANR	84053	CallExpression	is_tiny ( g )		84030	0					
ANR	84054	Callee	is_tiny		84030	0					
ANR	84055	Identifier	is_tiny		84030	0					
ANR	84056	ArgumentList	g		84030	1					
ANR	84057	Argument	g		84030	0					
ANR	84058	Identifier	g		84030	0					
ANR	84059	CompoundStatement		4:19:67:67	84030	1					
ANR	84060	ExpressionStatement	xdiff = NORMALIZE_MOV ( xdiff )	3182:3:79488:79517	84030	0	True				
ANR	84061	AssignmentExpression	xdiff = NORMALIZE_MOV ( xdiff )		84030	0		=			
ANR	84062	Identifier	xdiff		84030	0					
ANR	84063	CallExpression	NORMALIZE_MOV ( xdiff )		84030	1					
ANR	84064	Callee	NORMALIZE_MOV		84030	0					
ANR	84065	Identifier	NORMALIZE_MOV		84030	0					
ANR	84066	ArgumentList	xdiff		84030	1					
ANR	84067	Argument	xdiff		84030	0					
ANR	84068	Identifier	xdiff		84030	0					
ANR	84069	ExpressionStatement	ydiff = NORMALIZE_MOV ( ydiff )	3183:3:79522:79551	84030	1	True				
ANR	84070	AssignmentExpression	ydiff = NORMALIZE_MOV ( ydiff )		84030	0		=			
ANR	84071	Identifier	ydiff		84030	0					
ANR	84072	CallExpression	NORMALIZE_MOV ( ydiff )		84030	1					
ANR	84073	Callee	NORMALIZE_MOV		84030	0					
ANR	84074	Identifier	NORMALIZE_MOV		84030	0					
ANR	84075	ArgumentList	ydiff		84030	1					
ANR	84076	Argument	ydiff		84030	0					
ANR	84077	Identifier	ydiff		84030	0					
ANR	84078	ExpressionStatement	n -> x += xdiff	3186:2:79560:79573	84030	1	True				
ANR	84079	AssignmentExpression	n -> x += xdiff		84030	0		+=			
ANR	84080	PtrMemberAccess	n -> x		84030	0					
ANR	84081	Identifier	n		84030	0					
ANR	84082	Identifier	x		84030	1					
ANR	84083	Identifier	xdiff		84030	1					
ANR	84084	ExpressionStatement	n -> y += ydiff	3187:2:79577:79590	84030	2	True				
ANR	84085	AssignmentExpression	n -> y += ydiff		84030	0		+=			
ANR	84086	PtrMemberAccess	n -> y		84030	0					
ANR	84087	Identifier	n		84030	0					
ANR	84088	Identifier	y		84030	1					
ANR	84089	Identifier	ydiff		84030	1					
ANR	84090	ReturnType	static void		84030	1					
ANR	84091	Identifier	move_current_node		84030	2					
ANR	84092	ParameterList	"RAGraph * g , int xdiff , int ydiff"		84030	3					
ANR	84093	Parameter	RAGraph * g	3178:30:79381:79390	84030	0	True				
ANR	84094	ParameterType	RAGraph *		84030	0					
ANR	84095	Identifier	g		84030	1					
ANR	84096	Parameter	int xdiff	3178:42:79393:79401	84030	1	True				
ANR	84097	ParameterType	int		84030	0					
ANR	84098	Identifier	xdiff		84030	1					
ANR	84099	Parameter	int ydiff	3178:53:79404:79412	84030	2	True				
ANR	84100	ParameterType	int		84030	0					
ANR	84101	Identifier	ydiff		84030	1					
ANR	84102	CFGEntryNode	ENTRY		84030		True				
ANR	84103	CFGExitNode	EXIT		84030		True				
ANR	84104	Symbol	* g		84030						
ANR	84105	Symbol	NORMALIZE_MOV		84030						
ANR	84106	Symbol	n -> y		84030						
ANR	84107	Symbol	get_anode		84030						
ANR	84108	Symbol	ydiff		84030						
ANR	84109	Symbol	n -> x		84030						
ANR	84110	Symbol	g		84030						
ANR	84111	Symbol	xdiff		84030						
ANR	84112	Symbol	g -> curnode		84030						
ANR	84113	Symbol	* n		84030						
ANR	84114	Symbol	is_tiny		84030						
ANR	84115	Symbol	n		84030						
ANR	84116	Function	agraph_merge_child	3193:0:79697:80694							
ANR	84117	FunctionDef	"agraph_merge_child (RAGraph * g , int idx)"		84116	0					
ANR	84118	CompoundStatement		3193:52:79749:80694	84116	0					
ANR	84119	IdentifierDeclStatement	"const RGraphNode * nn = r_graph_nth_neighbour ( g -> graph , g -> curnode , idx ) ;"	3194:1:79752:79824	84116	0	True				
ANR	84120	IdentifierDecl	"* nn = r_graph_nth_neighbour ( g -> graph , g -> curnode , idx )"		84116	0					
ANR	84121	IdentifierDeclType	const RGraphNode *		84116	0					
ANR	84122	Identifier	nn		84116	1					
ANR	84123	AssignmentExpression	"* nn = r_graph_nth_neighbour ( g -> graph , g -> curnode , idx )"		84116	2		=			
ANR	84124	Identifier	nn		84116	0					
ANR	84125	CallExpression	"r_graph_nth_neighbour ( g -> graph , g -> curnode , idx )"		84116	1					
ANR	84126	Callee	r_graph_nth_neighbour		84116	0					
ANR	84127	Identifier	r_graph_nth_neighbour		84116	0					
ANR	84128	ArgumentList	g -> graph		84116	1					
ANR	84129	Argument	g -> graph		84116	0					
ANR	84130	PtrMemberAccess	g -> graph		84116	0					
ANR	84131	Identifier	g		84116	0					
ANR	84132	Identifier	graph		84116	1					
ANR	84133	Argument	g -> curnode		84116	1					
ANR	84134	PtrMemberAccess	g -> curnode		84116	0					
ANR	84135	Identifier	g		84116	0					
ANR	84136	Identifier	curnode		84116	1					
ANR	84137	Argument	idx		84116	2					
ANR	84138	Identifier	idx		84116	0					
ANR	84139	IdentifierDeclStatement	const RGraphNode * cn = g -> curnode ;	3195:1:79827:79860	84116	1	True				
ANR	84140	IdentifierDecl	* cn = g -> curnode		84116	0					
ANR	84141	IdentifierDeclType	const RGraphNode *		84116	0					
ANR	84142	Identifier	cn		84116	1					
ANR	84143	AssignmentExpression	* cn = g -> curnode		84116	2		=			
ANR	84144	Identifier	cn		84116	0					
ANR	84145	PtrMemberAccess	g -> curnode		84116	1					
ANR	84146	Identifier	g		84116	0					
ANR	84147	Identifier	curnode		84116	1					
ANR	84148	IfStatement	if ( cn && nn )		84116	2					
ANR	84149	Condition	cn && nn	3196:5:79867:79874	84116	0	True				
ANR	84150	AndExpression	cn && nn		84116	0		&&			
ANR	84151	Identifier	cn		84116	0					
ANR	84152	Identifier	nn		84116	1					
ANR	84153	CompoundStatement		19:2:664:715	84116	1					
ANR	84154	IdentifierDeclStatement	RANode * ann = get_anode ( nn ) ;	3197:2:79881:79909	84116	0	True				
ANR	84155	IdentifierDecl	* ann = get_anode ( nn )		84116	0					
ANR	84156	IdentifierDeclType	RANode *		84116	0					
ANR	84157	Identifier	ann		84116	1					
ANR	84158	AssignmentExpression	* ann = get_anode ( nn )		84116	2		=			
ANR	84159	Identifier	ann		84116	0					
ANR	84160	CallExpression	get_anode ( nn )		84116	1					
ANR	84161	Callee	get_anode		84116	0					
ANR	84162	Identifier	get_anode		84116	0					
ANR	84163	ArgumentList	nn		84116	1					
ANR	84164	Argument	nn		84116	0					
ANR	84165	Identifier	nn		84116	0					
ANR	84166	IdentifierDeclStatement	RANode * acn = get_anode ( cn ) ;	3198:2:79913:79941	84116	1	True				
ANR	84167	IdentifierDecl	* acn = get_anode ( cn )		84116	0					
ANR	84168	IdentifierDeclType	RANode *		84116	0					
ANR	84169	Identifier	acn		84116	1					
ANR	84170	AssignmentExpression	* acn = get_anode ( cn )		84116	2		=			
ANR	84171	Identifier	acn		84116	0					
ANR	84172	CallExpression	get_anode ( cn )		84116	1					
ANR	84173	Callee	get_anode		84116	0					
ANR	84174	Identifier	get_anode		84116	0					
ANR	84175	ArgumentList	cn		84116	1					
ANR	84176	Argument	cn		84116	0					
ANR	84177	Identifier	cn		84116	0					
ANR	84178	ExpressionStatement	"acn -> body = r_str_append ( acn -> body , ann -> title )"	3199:2:79945:79993	84116	2	True				
ANR	84179	AssignmentExpression	"acn -> body = r_str_append ( acn -> body , ann -> title )"		84116	0		=			
ANR	84180	PtrMemberAccess	acn -> body		84116	0					
ANR	84181	Identifier	acn		84116	0					
ANR	84182	Identifier	body		84116	1					
ANR	84183	CallExpression	"r_str_append ( acn -> body , ann -> title )"		84116	1					
ANR	84184	Callee	r_str_append		84116	0					
ANR	84185	Identifier	r_str_append		84116	0					
ANR	84186	ArgumentList	acn -> body		84116	1					
ANR	84187	Argument	acn -> body		84116	0					
ANR	84188	PtrMemberAccess	acn -> body		84116	0					
ANR	84189	Identifier	acn		84116	0					
ANR	84190	Identifier	body		84116	1					
ANR	84191	Argument	ann -> title		84116	1					
ANR	84192	PtrMemberAccess	ann -> title		84116	0					
ANR	84193	Identifier	ann		84116	0					
ANR	84194	Identifier	title		84116	1					
ANR	84195	ExpressionStatement	"acn -> body = r_str_append ( acn -> body , ""\\n"" )"	3200:2:79997:80039	84116	3	True				
ANR	84196	AssignmentExpression	"acn -> body = r_str_append ( acn -> body , ""\\n"" )"		84116	0		=			
ANR	84197	PtrMemberAccess	acn -> body		84116	0					
ANR	84198	Identifier	acn		84116	0					
ANR	84199	Identifier	body		84116	1					
ANR	84200	CallExpression	"r_str_append ( acn -> body , ""\\n"" )"		84116	1					
ANR	84201	Callee	r_str_append		84116	0					
ANR	84202	Identifier	r_str_append		84116	0					
ANR	84203	ArgumentList	acn -> body		84116	1					
ANR	84204	Argument	acn -> body		84116	0					
ANR	84205	PtrMemberAccess	acn -> body		84116	0					
ANR	84206	Identifier	acn		84116	0					
ANR	84207	Identifier	body		84116	1					
ANR	84208	Argument	"""\\n"""		84116	1					
ANR	84209	PrimaryExpression	"""\\n"""		84116	0					
ANR	84210	ExpressionStatement	"acn -> body = r_str_append ( acn -> body , ann -> body )"	3201:2:80043:80090	84116	4	True				
ANR	84211	AssignmentExpression	"acn -> body = r_str_append ( acn -> body , ann -> body )"		84116	0		=			
ANR	84212	PtrMemberAccess	acn -> body		84116	0					
ANR	84213	Identifier	acn		84116	0					
ANR	84214	Identifier	body		84116	1					
ANR	84215	CallExpression	"r_str_append ( acn -> body , ann -> body )"		84116	1					
ANR	84216	Callee	r_str_append		84116	0					
ANR	84217	Identifier	r_str_append		84116	0					
ANR	84218	ArgumentList	acn -> body		84116	1					
ANR	84219	Argument	acn -> body		84116	0					
ANR	84220	PtrMemberAccess	acn -> body		84116	0					
ANR	84221	Identifier	acn		84116	0					
ANR	84222	Identifier	body		84116	1					
ANR	84223	Argument	ann -> body		84116	1					
ANR	84224	PtrMemberAccess	ann -> body		84116	0					
ANR	84225	Identifier	ann		84116	0					
ANR	84226	Identifier	body		84116	1					
ANR	84227	ExpressionStatement	acn -> h += ann -> h - 3	3203:2:80129:80149	84116	5	True				
ANR	84228	AssignmentExpression	acn -> h += ann -> h - 3		84116	0		+=			
ANR	84229	PtrMemberAccess	acn -> h		84116	0					
ANR	84230	Identifier	acn		84116	0					
ANR	84231	Identifier	h		84116	1					
ANR	84232	AdditiveExpression	ann -> h - 3		84116	1		-			
ANR	84233	PtrMemberAccess	ann -> h		84116	0					
ANR	84234	Identifier	ann		84116	0					
ANR	84235	Identifier	h		84116	1					
ANR	84236	PrimaryExpression	3		84116	1					
ANR	84237	ExpressionStatement	free ( ann -> body )	3204:2:80153:80169	84116	6	True				
ANR	84238	CallExpression	free ( ann -> body )		84116	0					
ANR	84239	Callee	free		84116	0					
ANR	84240	Identifier	free		84116	0					
ANR	84241	ArgumentList	ann -> body		84116	1					
ANR	84242	Argument	ann -> body		84116	0					
ANR	84243	PtrMemberAccess	ann -> body		84116	0					
ANR	84244	Identifier	ann		84116	0					
ANR	84245	Identifier	body		84116	1					
ANR	84246	IdentifierDeclStatement	"char * neis = sdb_get ( g -> db , K_NEIGHBOURS ( ann ) , 0 ) ;"	3211:2:80414:80465	84116	7	True				
ANR	84247	IdentifierDecl	"* neis = sdb_get ( g -> db , K_NEIGHBOURS ( ann ) , 0 )"		84116	0					
ANR	84248	IdentifierDeclType	char *		84116	0					
ANR	84249	Identifier	neis		84116	1					
ANR	84250	AssignmentExpression	"* neis = sdb_get ( g -> db , K_NEIGHBOURS ( ann ) , 0 )"		84116	2		=			
ANR	84251	Identifier	neis		84116	0					
ANR	84252	CallExpression	"sdb_get ( g -> db , K_NEIGHBOURS ( ann ) , 0 )"		84116	1					
ANR	84253	Callee	sdb_get		84116	0					
ANR	84254	Identifier	sdb_get		84116	0					
ANR	84255	ArgumentList	g -> db		84116	1					
ANR	84256	Argument	g -> db		84116	0					
ANR	84257	PtrMemberAccess	g -> db		84116	0					
ANR	84258	Identifier	g		84116	0					
ANR	84259	Identifier	db		84116	1					
ANR	84260	Argument	K_NEIGHBOURS ( ann )		84116	1					
ANR	84261	CallExpression	K_NEIGHBOURS ( ann )		84116	0					
ANR	84262	Callee	K_NEIGHBOURS		84116	0					
ANR	84263	Identifier	K_NEIGHBOURS		84116	0					
ANR	84264	ArgumentList	ann		84116	1					
ANR	84265	Argument	ann		84116	0					
ANR	84266	Identifier	ann		84116	0					
ANR	84267	Argument	0		84116	2					
ANR	84268	PrimaryExpression	0		84116	0					
ANR	84269	IfStatement	if ( neis )		84116	8					
ANR	84270	Condition	neis	3212:6:80473:80476	84116	0	True				
ANR	84271	Identifier	neis		84116	0					
ANR	84272	CompoundStatement		20:12:729:729	84116	1					
ANR	84273	ExpressionStatement	"sdb_set_owned ( g -> db , K_NEIGHBOURS ( ann ) , neis , 0 )"	3213:3:80484:80534	84116	0	True				
ANR	84274	CallExpression	"sdb_set_owned ( g -> db , K_NEIGHBOURS ( ann ) , neis , 0 )"		84116	0					
ANR	84275	Callee	sdb_set_owned		84116	0					
ANR	84276	Identifier	sdb_set_owned		84116	0					
ANR	84277	ArgumentList	g -> db		84116	1					
ANR	84278	Argument	g -> db		84116	0					
ANR	84279	PtrMemberAccess	g -> db		84116	0					
ANR	84280	Identifier	g		84116	0					
ANR	84281	Identifier	db		84116	1					
ANR	84282	Argument	K_NEIGHBOURS ( ann )		84116	1					
ANR	84283	CallExpression	K_NEIGHBOURS ( ann )		84116	0					
ANR	84284	Callee	K_NEIGHBOURS		84116	0					
ANR	84285	Identifier	K_NEIGHBOURS		84116	0					
ANR	84286	ArgumentList	ann		84116	1					
ANR	84287	Argument	ann		84116	0					
ANR	84288	Identifier	ann		84116	0					
ANR	84289	Argument	neis		84116	2					
ANR	84290	Identifier	neis		84116	0					
ANR	84291	Argument	0		84116	3					
ANR	84292	PrimaryExpression	0		84116	0					
ANR	84293	ExpressionStatement	"r_agraph_del_node ( g , ann -> title )"	3214:3:80539:80572	84116	1	True				
ANR	84294	CallExpression	"r_agraph_del_node ( g , ann -> title )"		84116	0					
ANR	84295	Callee	r_agraph_del_node		84116	0					
ANR	84296	Identifier	r_agraph_del_node		84116	0					
ANR	84297	ArgumentList	g		84116	1					
ANR	84298	Argument	g		84116	0					
ANR	84299	Identifier	g		84116	0					
ANR	84300	Argument	ann -> title		84116	1					
ANR	84301	PtrMemberAccess	ann -> title		84116	0					
ANR	84302	Identifier	ann		84116	0					
ANR	84303	Identifier	title		84116	1					
ANR	84304	ExpressionStatement	agraph_print_nodes ( g )	3215:3:80577:80599	84116	2	True				
ANR	84305	CallExpression	agraph_print_nodes ( g )		84116	0					
ANR	84306	Callee	agraph_print_nodes		84116	0					
ANR	84307	Identifier	agraph_print_nodes		84116	0					
ANR	84308	ArgumentList	g		84116	1					
ANR	84309	Argument	g		84116	0					
ANR	84310	Identifier	g		84116	0					
ANR	84311	ExpressionStatement	agraph_print_edges ( g )	3216:3:80604:80626	84116	3	True				
ANR	84312	CallExpression	agraph_print_edges ( g )		84116	0					
ANR	84313	Callee	agraph_print_edges		84116	0					
ANR	84314	Identifier	agraph_print_edges		84116	0					
ANR	84315	ArgumentList	g		84116	1					
ANR	84316	Argument	g		84116	0					
ANR	84317	Identifier	g		84116	0					
ANR	84318	ReturnType	static void		84116	1					
ANR	84319	Identifier	agraph_merge_child		84116	2					
ANR	84320	ParameterList	"RAGraph * g , int idx"		84116	3					
ANR	84321	Parameter	RAGraph * g	3193:31:79728:79737	84116	0	True				
ANR	84322	ParameterType	RAGraph *		84116	0					
ANR	84323	Identifier	g		84116	1					
ANR	84324	Parameter	int idx	3193:43:79740:79746	84116	1	True				
ANR	84325	ParameterType	int		84116	0					
ANR	84326	Identifier	idx		84116	1					
ANR	84327	CFGEntryNode	ENTRY		84116		True				
ANR	84328	CFGExitNode	EXIT		84116		True				
ANR	84329	Symbol	nn		84116						
ANR	84330	Symbol	ann		84116						
ANR	84331	Symbol	r_str_append		84116						
ANR	84332	Symbol	get_anode		84116						
ANR	84333	Symbol	acn -> h		84116						
ANR	84334	Symbol	g		84116						
ANR	84335	Symbol	g -> db		84116						
ANR	84336	Symbol	* acn		84116						
ANR	84337	Symbol	sdb_get		84116						
ANR	84338	Symbol	cn		84116						
ANR	84339	Symbol	ann -> body		84116						
ANR	84340	Symbol	acn -> body		84116						
ANR	84341	Symbol	acn		84116						
ANR	84342	Symbol	* g		84116						
ANR	84343	Symbol	neis		84116						
ANR	84344	Symbol	* ann		84116						
ANR	84345	Symbol	ann -> h		84116						
ANR	84346	Symbol	g -> graph		84116						
ANR	84347	Symbol	g -> curnode		84116						
ANR	84348	Symbol	K_NEIGHBOURS		84116						
ANR	84349	Symbol	idx		84116						
ANR	84350	Symbol	r_graph_nth_neighbour		84116						
ANR	84351	Symbol	ann -> title		84116						
ANR	84352	Function	agraph_toggle_tiny	3223:0:80704:80916							
ANR	84353	FunctionDef	agraph_toggle_tiny (RAGraph * g)		84352	0					
ANR	84354	CompoundStatement		3223:44:80748:80916	84352	0					
ANR	84355	ExpressionStatement	g -> is_tiny = ! g -> is_tiny	3224:1:80751:80775	84352	0	True				
ANR	84356	AssignmentExpression	g -> is_tiny = ! g -> is_tiny		84352	0		=			
ANR	84357	PtrMemberAccess	g -> is_tiny		84352	0					
ANR	84358	Identifier	g		84352	0					
ANR	84359	Identifier	is_tiny		84352	1					
ANR	84360	UnaryOperationExpression	! g -> is_tiny		84352	1					
ANR	84361	UnaryOperator	!		84352	0					
ANR	84362	PtrMemberAccess	g -> is_tiny		84352	1					
ANR	84363	Identifier	g		84352	0					
ANR	84364	Identifier	is_tiny		84352	1					
ANR	84365	ExpressionStatement	g -> need_update_dim = 1	3225:1:80778:80800	84352	1	True				
ANR	84366	AssignmentExpression	g -> need_update_dim = 1		84352	0		=			
ANR	84367	PtrMemberAccess	g -> need_update_dim		84352	0					
ANR	84368	Identifier	g		84352	0					
ANR	84369	Identifier	need_update_dim		84352	1					
ANR	84370	PrimaryExpression	1		84352	1					
ANR	84371	ExpressionStatement	agraph_refresh ( r_cons_singleton ( ) -> event_data )	3226:1:80803:80851	84352	2	True				
ANR	84372	CallExpression	agraph_refresh ( r_cons_singleton ( ) -> event_data )		84352	0					
ANR	84373	Callee	agraph_refresh		84352	0					
ANR	84374	Identifier	agraph_refresh		84352	0					
ANR	84375	ArgumentList	r_cons_singleton ( ) -> event_data		84352	1					
ANR	84376	Argument	r_cons_singleton ( ) -> event_data		84352	0					
ANR	84377	PtrMemberAccess	r_cons_singleton ( ) -> event_data		84352	0					
ANR	84378	CallExpression	r_cons_singleton ( )		84352	0					
ANR	84379	Callee	r_cons_singleton		84352	0					
ANR	84380	Identifier	r_cons_singleton		84352	0					
ANR	84381	ArgumentList			84352	1					
ANR	84382	Identifier	event_data		84352	1					
ANR	84383	ExpressionStatement	agraph_set_layout ( ( RAGraph * ) g )	3227:1:80854:80887	84352	3	True				
ANR	84384	CallExpression	agraph_set_layout ( ( RAGraph * ) g )		84352	0					
ANR	84385	Callee	agraph_set_layout		84352	0					
ANR	84386	Identifier	agraph_set_layout		84352	0					
ANR	84387	ArgumentList	( RAGraph * ) g		84352	1					
ANR	84388	Argument	( RAGraph * ) g		84352	0					
ANR	84389	CastExpression	( RAGraph * ) g		84352	0					
ANR	84390	CastTarget	RAGraph *		84352	0					
ANR	84391	Identifier	g		84352	1					
ANR	84392	ReturnType	static void		84352	1					
ANR	84393	Identifier	agraph_toggle_tiny		84352	2					
ANR	84394	ParameterList	RAGraph * g		84352	3					
ANR	84395	Parameter	RAGraph * g	3223:32:80736:80745	84352	0	True				
ANR	84396	ParameterType	RAGraph *		84352	0					
ANR	84397	Identifier	g		84352	1					
ANR	84398	CFGEntryNode	ENTRY		84352		True				
ANR	84399	CFGExitNode	EXIT		84352		True				
ANR	84400	Symbol	* g		84352						
ANR	84401	Symbol	g -> is_tiny		84352						
ANR	84402	Symbol	r_cons_singleton ( ) -> event_data		84352						
ANR	84403	Symbol	g		84352						
ANR	84404	Symbol	r_cons_singleton		84352						
ANR	84405	Symbol	g -> need_update_dim		84352						
ANR	84406	Symbol	* r_cons_singleton		84352						
ANR	84407	Function	agraph_toggle_mini	3231:0:80919:81154							
ANR	84408	FunctionDef	agraph_toggle_mini (RAGraph * g)		84407	0					
ANR	84409	CompoundStatement		3231:43:80962:81154	84407	0					
ANR	84410	IdentifierDeclStatement	RANode * n = get_anode ( g -> curnode ) ;	3232:1:80965:80999	84407	0	True				
ANR	84411	IdentifierDecl	* n = get_anode ( g -> curnode )		84407	0					
ANR	84412	IdentifierDeclType	RANode *		84407	0					
ANR	84413	Identifier	n		84407	1					
ANR	84414	AssignmentExpression	* n = get_anode ( g -> curnode )		84407	2		=			
ANR	84415	Identifier	n		84407	0					
ANR	84416	CallExpression	get_anode ( g -> curnode )		84407	1					
ANR	84417	Callee	get_anode		84407	0					
ANR	84418	Identifier	get_anode		84407	0					
ANR	84419	ArgumentList	g -> curnode		84407	1					
ANR	84420	Argument	g -> curnode		84407	0					
ANR	84421	PtrMemberAccess	g -> curnode		84407	0					
ANR	84422	Identifier	g		84407	0					
ANR	84423	Identifier	curnode		84407	1					
ANR	84424	IfStatement	if ( n )		84407	1					
ANR	84425	Condition	n	3233:5:81006:81006	84407	0	True				
ANR	84426	Identifier	n		84407	0					
ANR	84427	CompoundStatement		3:8:46:46	84407	1					
ANR	84428	ExpressionStatement	n -> is_mini = ! n -> is_mini	3234:2:81013:81037	84407	0	True				
ANR	84429	AssignmentExpression	n -> is_mini = ! n -> is_mini		84407	0		=			
ANR	84430	PtrMemberAccess	n -> is_mini		84407	0					
ANR	84431	Identifier	n		84407	0					
ANR	84432	Identifier	is_mini		84407	1					
ANR	84433	UnaryOperationExpression	! n -> is_mini		84407	1					
ANR	84434	UnaryOperator	!		84407	0					
ANR	84435	PtrMemberAccess	n -> is_mini		84407	1					
ANR	84436	Identifier	n		84407	0					
ANR	84437	Identifier	is_mini		84407	1					
ANR	84438	ExpressionStatement	g -> need_update_dim = 1	3236:1:81043:81065	84407	2	True				
ANR	84439	AssignmentExpression	g -> need_update_dim = 1		84407	0		=			
ANR	84440	PtrMemberAccess	g -> need_update_dim		84407	0					
ANR	84441	Identifier	g		84407	0					
ANR	84442	Identifier	need_update_dim		84407	1					
ANR	84443	PrimaryExpression	1		84407	1					
ANR	84444	ExpressionStatement	agraph_refresh ( r_cons_singleton ( ) -> event_data )	3237:1:81068:81116	84407	3	True				
ANR	84445	CallExpression	agraph_refresh ( r_cons_singleton ( ) -> event_data )		84407	0					
ANR	84446	Callee	agraph_refresh		84407	0					
ANR	84447	Identifier	agraph_refresh		84407	0					
ANR	84448	ArgumentList	r_cons_singleton ( ) -> event_data		84407	1					
ANR	84449	Argument	r_cons_singleton ( ) -> event_data		84407	0					
ANR	84450	PtrMemberAccess	r_cons_singleton ( ) -> event_data		84407	0					
ANR	84451	CallExpression	r_cons_singleton ( )		84407	0					
ANR	84452	Callee	r_cons_singleton		84407	0					
ANR	84453	Identifier	r_cons_singleton		84407	0					
ANR	84454	ArgumentList			84407	1					
ANR	84455	Identifier	event_data		84407	1					
ANR	84456	ExpressionStatement	agraph_set_layout ( ( RAGraph * ) g )	3238:1:81119:81152	84407	4	True				
ANR	84457	CallExpression	agraph_set_layout ( ( RAGraph * ) g )		84407	0					
ANR	84458	Callee	agraph_set_layout		84407	0					
ANR	84459	Identifier	agraph_set_layout		84407	0					
ANR	84460	ArgumentList	( RAGraph * ) g		84407	1					
ANR	84461	Argument	( RAGraph * ) g		84407	0					
ANR	84462	CastExpression	( RAGraph * ) g		84407	0					
ANR	84463	CastTarget	RAGraph *		84407	0					
ANR	84464	Identifier	g		84407	1					
ANR	84465	ReturnType	static void		84407	1					
ANR	84466	Identifier	agraph_toggle_mini		84407	2					
ANR	84467	ParameterList	RAGraph * g		84407	3					
ANR	84468	Parameter	RAGraph * g	3231:31:80950:80959	84407	0	True				
ANR	84469	ParameterType	RAGraph *		84407	0					
ANR	84470	Identifier	g		84407	1					
ANR	84471	CFGEntryNode	ENTRY		84407		True				
ANR	84472	CFGExitNode	EXIT		84407		True				
ANR	84473	Symbol	* g		84407						
ANR	84474	Symbol	r_cons_singleton ( ) -> event_data		84407						
ANR	84475	Symbol	get_anode		84407						
ANR	84476	Symbol	g		84407						
ANR	84477	Symbol	g -> curnode		84407						
ANR	84478	Symbol	* n		84407						
ANR	84479	Symbol	n -> is_mini		84407						
ANR	84480	Symbol	r_cons_singleton		84407						
ANR	84481	Symbol	n		84407						
ANR	84482	Symbol	g -> need_update_dim		84407						
ANR	84483	Symbol	* r_cons_singleton		84407						
ANR	84484	Function	agraph_follow_innodes	3241:0:81157:82682							
ANR	84485	FunctionDef	"agraph_follow_innodes (RAGraph * g , bool in)"		84484	0					
ANR	84486	CompoundStatement		3241:56:81213:82682	84484	0					
ANR	84487	IdentifierDeclStatement	int count = 0 ;	3242:1:81216:81229	84484	0	True				
ANR	84488	IdentifierDecl	count = 0		84484	0					
ANR	84489	IdentifierDeclType	int		84484	0					
ANR	84490	Identifier	count		84484	1					
ANR	84491	AssignmentExpression	count = 0		84484	2		=			
ANR	84492	Identifier	count		84484	0					
ANR	84493	PrimaryExpression	0		84484	1					
ANR	84494	IdentifierDeclStatement	RListIter * iter ;	3243:1:81232:81247	84484	1	True				
ANR	84495	IdentifierDecl	* iter		84484	0					
ANR	84496	IdentifierDeclType	RListIter *		84484	0					
ANR	84497	Identifier	iter		84484	1					
ANR	84498	IdentifierDeclStatement	RANode * an = get_anode ( g -> curnode ) ;	3244:1:81250:81285	84484	2	True				
ANR	84499	IdentifierDecl	* an = get_anode ( g -> curnode )		84484	0					
ANR	84500	IdentifierDeclType	RANode *		84484	0					
ANR	84501	Identifier	an		84484	1					
ANR	84502	AssignmentExpression	* an = get_anode ( g -> curnode )		84484	2		=			
ANR	84503	Identifier	an		84484	0					
ANR	84504	CallExpression	get_anode ( g -> curnode )		84484	1					
ANR	84505	Callee	get_anode		84484	0					
ANR	84506	Identifier	get_anode		84484	0					
ANR	84507	ArgumentList	g -> curnode		84484	1					
ANR	84508	Argument	g -> curnode		84484	0					
ANR	84509	PtrMemberAccess	g -> curnode		84484	0					
ANR	84510	Identifier	g		84484	0					
ANR	84511	Identifier	curnode		84484	1					
ANR	84512	IdentifierDeclStatement	RGraphNode * gn = an -> gnode ;	3245:1:81288:81314	84484	3	True				
ANR	84513	IdentifierDecl	* gn = an -> gnode		84484	0					
ANR	84514	IdentifierDeclType	RGraphNode *		84484	0					
ANR	84515	Identifier	gn		84484	1					
ANR	84516	AssignmentExpression	* gn = an -> gnode		84484	2		=			
ANR	84517	Identifier	gn		84484	0					
ANR	84518	PtrMemberAccess	an -> gnode		84484	1					
ANR	84519	Identifier	an		84484	0					
ANR	84520	Identifier	gnode		84484	1					
ANR	84521	IdentifierDeclStatement	const RList * list = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes ;	3246:1:81317:81382	84484	4	True				
ANR	84522	IdentifierDecl	* list = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	0					
ANR	84523	IdentifierDeclType	const RList *		84484	0					
ANR	84524	Identifier	list		84484	1					
ANR	84525	AssignmentExpression	* list = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	2		=			
ANR	84526	Identifier	list		84484	0					
ANR	84527	ConditionalExpression	in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	1					
ANR	84528	Condition	in		84484	0					
ANR	84529	Identifier	in		84484	0					
ANR	84530	PtrMemberAccess	an -> gnode -> in_nodes		84484	1					
ANR	84531	PtrMemberAccess	an -> gnode		84484	0					
ANR	84532	Identifier	an		84484	0					
ANR	84533	Identifier	gnode		84484	1					
ANR	84534	Identifier	in_nodes		84484	1					
ANR	84535	PtrMemberAccess	an -> gnode -> out_nodes		84484	2					
ANR	84536	PtrMemberAccess	an -> gnode		84484	0					
ANR	84537	Identifier	an		84484	0					
ANR	84538	Identifier	gnode		84484	1					
ANR	84539	Identifier	out_nodes		84484	1					
ANR	84540	IdentifierDeclStatement	int nth = - 1 ;	3247:1:81385:81397	84484	5	True				
ANR	84541	IdentifierDecl	nth = - 1		84484	0					
ANR	84542	IdentifierDeclType	int		84484	0					
ANR	84543	Identifier	nth		84484	1					
ANR	84544	AssignmentExpression	nth = - 1		84484	2		=			
ANR	84545	Identifier	nth		84484	0					
ANR	84546	UnaryOperationExpression	- 1		84484	1					
ANR	84547	UnaryOperator	-		84484	0					
ANR	84548	PrimaryExpression	1		84484	1					
ANR	84549	IfStatement	if ( r_list_length ( list ) == 0 )		84484	6					
ANR	84550	Condition	r_list_length ( list ) == 0	3248:5:81404:81428	84484	0	True				
ANR	84551	EqualityExpression	r_list_length ( list ) == 0		84484	0		==			
ANR	84552	CallExpression	r_list_length ( list )		84484	0					
ANR	84553	Callee	r_list_length		84484	0					
ANR	84554	Identifier	r_list_length		84484	0					
ANR	84555	ArgumentList	list		84484	1					
ANR	84556	Argument	list		84484	0					
ANR	84557	Identifier	list		84484	0					
ANR	84558	PrimaryExpression	0		84484	1					
ANR	84559	CompoundStatement		8:32:217:217	84484	1					
ANR	84560	ReturnStatement	return ;	3249:2:81435:81441	84484	0	True				
ANR	84561	ExpressionStatement	"r_cons_gotoxy ( 0 , 2 )"	3251:1:81447:81467	84484	7	True				
ANR	84562	CallExpression	"r_cons_gotoxy ( 0 , 2 )"		84484	0					
ANR	84563	Callee	r_cons_gotoxy		84484	0					
ANR	84564	Identifier	r_cons_gotoxy		84484	0					
ANR	84565	ArgumentList	0		84484	1					
ANR	84566	Argument	0		84484	0					
ANR	84567	PrimaryExpression	0		84484	0					
ANR	84568	Argument	2		84484	1					
ANR	84569	PrimaryExpression	2		84484	0					
ANR	84570	ExpressionStatement	"r_cons_printf ( in ? ""Input nodes:\\n"" : ""Output nodes:\\n"" )"	3252:1:81470:81525	84484	8	True				
ANR	84571	CallExpression	"r_cons_printf ( in ? ""Input nodes:\\n"" : ""Output nodes:\\n"" )"		84484	0					
ANR	84572	Callee	r_cons_printf		84484	0					
ANR	84573	Identifier	r_cons_printf		84484	0					
ANR	84574	ArgumentList	"in ? ""Input nodes:\\n"" : ""Output nodes:\\n"""		84484	1					
ANR	84575	Argument	"in ? ""Input nodes:\\n"" : ""Output nodes:\\n"""		84484	0					
ANR	84576	ConditionalExpression	"in ? ""Input nodes:\\n"" : ""Output nodes:\\n"""		84484	0					
ANR	84577	Condition	in		84484	0					
ANR	84578	Identifier	in		84484	0					
ANR	84579	PrimaryExpression	"""Input nodes:\\n"""		84484	1					
ANR	84580	PrimaryExpression	"""Output nodes:\\n"""		84484	2					
ANR	84581	IdentifierDeclStatement	RList * options = r_list_newf ( NULL ) ;	3253:1:81528:81563	84484	9	True				
ANR	84582	IdentifierDecl	* options = r_list_newf ( NULL )		84484	0					
ANR	84583	IdentifierDeclType	RList *		84484	0					
ANR	84584	Identifier	options		84484	1					
ANR	84585	AssignmentExpression	* options = r_list_newf ( NULL )		84484	2		=			
ANR	84586	Identifier	options		84484	0					
ANR	84587	CallExpression	r_list_newf ( NULL )		84484	1					
ANR	84588	Callee	r_list_newf		84484	0					
ANR	84589	Identifier	r_list_newf		84484	0					
ANR	84590	ArgumentList	NULL		84484	1					
ANR	84591	Argument	NULL		84484	0					
ANR	84592	Identifier	NULL		84484	0					
ANR	84593	IdentifierDeclStatement	RList * gnodes = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes ;	3254:1:81566:81627	84484	10	True				
ANR	84594	IdentifierDecl	* gnodes = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	0					
ANR	84595	IdentifierDeclType	RList *		84484	0					
ANR	84596	Identifier	gnodes		84484	1					
ANR	84597	AssignmentExpression	* gnodes = in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	2		=			
ANR	84598	Identifier	gnodes		84484	0					
ANR	84599	ConditionalExpression	in ? an -> gnode -> in_nodes : an -> gnode -> out_nodes		84484	1					
ANR	84600	Condition	in		84484	0					
ANR	84601	Identifier	in		84484	0					
ANR	84602	PtrMemberAccess	an -> gnode -> in_nodes		84484	1					
ANR	84603	PtrMemberAccess	an -> gnode		84484	0					
ANR	84604	Identifier	an		84484	0					
ANR	84605	Identifier	gnode		84484	1					
ANR	84606	Identifier	in_nodes		84484	1					
ANR	84607	PtrMemberAccess	an -> gnode -> out_nodes		84484	2					
ANR	84608	PtrMemberAccess	an -> gnode		84484	0					
ANR	84609	Identifier	an		84484	0					
ANR	84610	Identifier	gnode		84484	1					
ANR	84611	Identifier	out_nodes		84484	1					
ANR	84612	Statement	r_list_foreach	3255:1:81630:81643	84484	11	True				
ANR	84613	Statement	(	3255:16:81645:81645	84484	12	True				
ANR	84614	Statement	gnodes	3255:17:81646:81651	84484	13	True				
ANR	84615	Statement	","	3255:23:81652:81652	84484	14	True				
ANR	84616	Statement	iter	3255:25:81654:81657	84484	15	True				
ANR	84617	Statement	","	3255:29:81658:81658	84484	16	True				
ANR	84618	Statement	gn	3255:31:81660:81661	84484	17	True				
ANR	84619	Statement	)	3255:33:81662:81662	84484	18	True				
ANR	84620	CompoundStatement		17:2:485:531	84484	19					
ANR	84621	IdentifierDeclStatement	RANode * an = get_anode ( gn ) ;	3256:2:81668:81695	84484	0	True				
ANR	84622	IdentifierDecl	* an = get_anode ( gn )		84484	0					
ANR	84623	IdentifierDeclType	RANode *		84484	0					
ANR	84624	Identifier	an		84484	1					
ANR	84625	AssignmentExpression	* an = get_anode ( gn )		84484	2		=			
ANR	84626	Identifier	an		84484	0					
ANR	84627	CallExpression	get_anode ( gn )		84484	1					
ANR	84628	Callee	get_anode		84484	0					
ANR	84629	Identifier	get_anode		84484	0					
ANR	84630	ArgumentList	gn		84484	1					
ANR	84631	Argument	gn		84484	0					
ANR	84632	Identifier	gn		84484	0					
ANR	84633	IdentifierDeclStatement	"RGraphNode * gnn = agraph_get_title ( g , an , in ) ;"	3257:2:81699:81745	84484	1	True				
ANR	84634	IdentifierDecl	"* gnn = agraph_get_title ( g , an , in )"		84484	0					
ANR	84635	IdentifierDeclType	RGraphNode *		84484	0					
ANR	84636	Identifier	gnn		84484	1					
ANR	84637	AssignmentExpression	"* gnn = agraph_get_title ( g , an , in )"		84484	2		=			
ANR	84638	Identifier	gnn		84484	0					
ANR	84639	CallExpression	"agraph_get_title ( g , an , in )"		84484	1					
ANR	84640	Callee	agraph_get_title		84484	0					
ANR	84641	Identifier	agraph_get_title		84484	0					
ANR	84642	ArgumentList	g		84484	1					
ANR	84643	Argument	g		84484	0					
ANR	84644	Identifier	g		84484	0					
ANR	84645	Argument	an		84484	1					
ANR	84646	Identifier	an		84484	0					
ANR	84647	Argument	in		84484	2					
ANR	84648	Identifier	in		84484	0					
ANR	84649	IfStatement	if ( gnn )		84484	2					
ANR	84650	Condition	gnn	3258:6:81753:81755	84484	0	True				
ANR	84651	Identifier	gnn		84484	0					
ANR	84652	CompoundStatement		21:3:591:607	84484	1					
ANR	84653	IdentifierDeclStatement	RANode * nnn = gnn -> data ;	3259:3:81763:81786	84484	0	True				
ANR	84654	IdentifierDecl	* nnn = gnn -> data		84484	0					
ANR	84655	IdentifierDeclType	RANode *		84484	0					
ANR	84656	Identifier	nnn		84484	1					
ANR	84657	AssignmentExpression	* nnn = gnn -> data		84484	2		=			
ANR	84658	Identifier	nnn		84484	0					
ANR	84659	PtrMemberAccess	gnn -> data		84484	1					
ANR	84660	Identifier	gnn		84484	0					
ANR	84661	Identifier	data		84484	1					
ANR	84662	IdentifierDeclStatement	RANode * o ;	3260:3:81791:81800	84484	1	True				
ANR	84663	IdentifierDecl	* o		84484	0					
ANR	84664	IdentifierDeclType	RANode *		84484	0					
ANR	84665	Identifier	o		84484	1					
ANR	84666	IdentifierDeclStatement	RListIter * iter2 ;	3261:3:81805:81821	84484	2	True				
ANR	84667	IdentifierDecl	* iter2		84484	0					
ANR	84668	IdentifierDeclType	RListIter *		84484	0					
ANR	84669	Identifier	iter2		84484	1					
ANR	84670	Statement	r_list_foreach	3263:3:81844:81857	84484	3	True				
ANR	84671	Statement	(	3263:18:81859:81859	84484	4	True				
ANR	84672	Statement	options	3263:19:81860:81866	84484	5	True				
ANR	84673	Statement	","	3263:26:81867:81867	84484	6	True				
ANR	84674	Statement	iter2	3263:28:81869:81873	84484	7	True				
ANR	84675	Statement	","	3263:33:81874:81874	84484	8	True				
ANR	84676	Statement	o	3263:35:81876:81876	84484	9	True				
ANR	84677	Statement	)	3263:36:81877:81877	84484	10	True				
ANR	84678	CompoundStatement		23:38:665:665	84484	11					
ANR	84679	IfStatement	"if ( ! strcmp ( o -> title , nnn -> title ) )"		84484	0					
ANR	84680	Condition	"! strcmp ( o -> title , nnn -> title )"	3264:8:81889:81918	84484	0	True				
ANR	84681	UnaryOperationExpression	"! strcmp ( o -> title , nnn -> title )"		84484	0					
ANR	84682	UnaryOperator	!		84484	0					
ANR	84683	CallExpression	"strcmp ( o -> title , nnn -> title )"		84484	1					
ANR	84684	Callee	strcmp		84484	0					
ANR	84685	Identifier	strcmp		84484	0					
ANR	84686	ArgumentList	o -> title		84484	1					
ANR	84687	Argument	o -> title		84484	0					
ANR	84688	PtrMemberAccess	o -> title		84484	0					
ANR	84689	Identifier	o		84484	0					
ANR	84690	Identifier	title		84484	1					
ANR	84691	Argument	nnn -> title		84484	1					
ANR	84692	PtrMemberAccess	nnn -> title		84484	0					
ANR	84693	Identifier	nnn		84484	0					
ANR	84694	Identifier	title		84484	1					
ANR	84695	CompoundStatement		24:40:707:707	84484	1					
ANR	84696	ContinueStatement	continue ;	3265:5:81928:81936	84484	0	True				
ANR	84697	ExpressionStatement	"r_cons_printf ( ""%d %s\\n"" , count , nnn -> title )"	3268:3:81952:81996	84484	12	True				
ANR	84698	CallExpression	"r_cons_printf ( ""%d %s\\n"" , count , nnn -> title )"		84484	0					
ANR	84699	Callee	r_cons_printf		84484	0					
ANR	84700	Identifier	r_cons_printf		84484	0					
ANR	84701	ArgumentList	"""%d %s\\n"""		84484	1					
ANR	84702	Argument	"""%d %s\\n"""		84484	0					
ANR	84703	PrimaryExpression	"""%d %s\\n"""		84484	0					
ANR	84704	Argument	count		84484	1					
ANR	84705	Identifier	count		84484	0					
ANR	84706	Argument	nnn -> title		84484	2					
ANR	84707	PtrMemberAccess	nnn -> title		84484	0					
ANR	84708	Identifier	nnn		84484	0					
ANR	84709	Identifier	title		84484	1					
ANR	84710	ExpressionStatement	"r_list_append ( options , nnn )"	3269:3:82001:82029	84484	13	True				
ANR	84711	CallExpression	"r_list_append ( options , nnn )"		84484	0					
ANR	84712	Callee	r_list_append		84484	0					
ANR	84713	Identifier	r_list_append		84484	0					
ANR	84714	ArgumentList	options		84484	1					
ANR	84715	Argument	options		84484	0					
ANR	84716	Identifier	options		84484	0					
ANR	84717	Argument	nnn		84484	1					
ANR	84718	Identifier	nnn		84484	0					
ANR	84719	ExpressionStatement	count ++	3270:3:82034:82041	84484	14	True				
ANR	84720	PostIncDecOperationExpression	count ++		84484	0					
ANR	84721	Identifier	count		84484	0					
ANR	84722	IncDec	++		84484	1					
ANR	84723	ExpressionStatement	r_cons_flush ( )	3273:1:82051:82066	84484	20	True				
ANR	84724	CallExpression	r_cons_flush ( )		84484	0					
ANR	84725	Callee	r_cons_flush		84484	0					
ANR	84726	Identifier	r_cons_flush		84484	0					
ANR	84727	ArgumentList			84484	1					
ANR	84728	IfStatement	if ( r_list_length ( list ) == 1 )		84484	21					
ANR	84729	Condition	r_list_length ( list ) == 1	3274:5:82073:82097	84484	0	True				
ANR	84730	EqualityExpression	r_list_length ( list ) == 1		84484	0		==			
ANR	84731	CallExpression	r_list_length ( list )		84484	0					
ANR	84732	Callee	r_list_length		84484	0					
ANR	84733	Identifier	r_list_length		84484	0					
ANR	84734	ArgumentList	list		84484	1					
ANR	84735	Argument	list		84484	0					
ANR	84736	Identifier	list		84484	0					
ANR	84737	PrimaryExpression	1		84484	1					
ANR	84738	CompoundStatement		34:32:886:886	84484	1					
ANR	84739	ExpressionStatement	nth = 0	3275:2:82104:82111	84484	0	True				
ANR	84740	AssignmentExpression	nth = 0		84484	0		=			
ANR	84741	Identifier	nth		84484	0					
ANR	84742	PrimaryExpression	0		84484	1					
ANR	84743	ElseStatement	else		84484	0					
ANR	84744	IfStatement	if ( r_list_length ( list ) < 10 )		84484	0					
ANR	84745	Condition	r_list_length ( list ) < 10	3276:12:82125:82149	84484	0	True				
ANR	84746	RelationalExpression	r_list_length ( list ) < 10		84484	0		<			
ANR	84747	CallExpression	r_list_length ( list )		84484	0					
ANR	84748	Callee	r_list_length		84484	0					
ANR	84749	Identifier	r_list_length		84484	0					
ANR	84750	ArgumentList	list		84484	1					
ANR	84751	Argument	list		84484	0					
ANR	84752	Identifier	list		84484	0					
ANR	84753	PrimaryExpression	10		84484	1					
ANR	84754	CompoundStatement		38:2:958:986	84484	1					
ANR	84755	IdentifierDeclStatement	char ch = r_cons_readchar ( ) ;	3278:2:82172:82200	84484	0	True				
ANR	84756	IdentifierDecl	ch = r_cons_readchar ( )		84484	0					
ANR	84757	IdentifierDeclType	char		84484	0					
ANR	84758	Identifier	ch		84484	1					
ANR	84759	AssignmentExpression	ch = r_cons_readchar ( )		84484	2		=			
ANR	84760	Identifier	ch		84484	0					
ANR	84761	CallExpression	r_cons_readchar ( )		84484	1					
ANR	84762	Callee	r_cons_readchar		84484	0					
ANR	84763	Identifier	r_cons_readchar		84484	0					
ANR	84764	ArgumentList			84484	1					
ANR	84765	IfStatement	if ( ch >= '0' && ch <= '9' )		84484	1					
ANR	84766	Condition	ch >= '0' && ch <= '9'	3279:6:82208:82229	84484	0	True				
ANR	84767	AndExpression	ch >= '0' && ch <= '9'		84484	0		&&			
ANR	84768	RelationalExpression	ch >= '0'		84484	0		>=			
ANR	84769	Identifier	ch		84484	0					
ANR	84770	PrimaryExpression	'0'		84484	1					
ANR	84771	RelationalExpression	ch <= '9'		84484	1		<=			
ANR	84772	Identifier	ch		84484	0					
ANR	84773	PrimaryExpression	'9'		84484	1					
ANR	84774	CompoundStatement		39:30:1018:1018	84484	1					
ANR	84775	ExpressionStatement	nth = ch - '0'	3280:3:82237:82252	84484	0	True				
ANR	84776	AssignmentExpression	nth = ch - '0'		84484	0		=			
ANR	84777	Identifier	nth		84484	0					
ANR	84778	AdditiveExpression	ch - '0'		84484	1		-			
ANR	84779	Identifier	ch		84484	0					
ANR	84780	PrimaryExpression	'0'		84484	1					
ANR	84781	ElseStatement	else		84484	0					
ANR	84782	CompoundStatement		45:2:1116:1159	84484	0					
ANR	84783	ExpressionStatement	r_cons_show_cursor ( true )	3283:2:82270:82295	84484	0	True				
ANR	84784	CallExpression	r_cons_show_cursor ( true )		84484	0					
ANR	84785	Callee	r_cons_show_cursor		84484	0					
ANR	84786	Identifier	r_cons_show_cursor		84484	0					
ANR	84787	ArgumentList	true		84484	1					
ANR	84788	Argument	true		84484	0					
ANR	84789	Identifier	true		84484	0					
ANR	84790	ExpressionStatement	r_cons_enable_mouse ( false )	3284:2:82299:82326	84484	1	True				
ANR	84791	CallExpression	r_cons_enable_mouse ( false )		84484	0					
ANR	84792	Callee	r_cons_enable_mouse		84484	0					
ANR	84793	Identifier	r_cons_enable_mouse		84484	0					
ANR	84794	ArgumentList	false		84484	1					
ANR	84795	Argument	false		84484	0					
ANR	84796	Identifier	false		84484	0					
ANR	84797	IdentifierDeclStatement	"char * nth_string = r_cons_input ( ""index> "" ) ;"	3285:2:82330:82373	84484	2	True				
ANR	84798	IdentifierDecl	"* nth_string = r_cons_input ( ""index> "" )"		84484	0					
ANR	84799	IdentifierDeclType	char *		84484	0					
ANR	84800	Identifier	nth_string		84484	1					
ANR	84801	AssignmentExpression	"* nth_string = r_cons_input ( ""index> "" )"		84484	2		=			
ANR	84802	Identifier	nth_string		84484	0					
ANR	84803	CallExpression	"r_cons_input ( ""index> "" )"		84484	1					
ANR	84804	Callee	r_cons_input		84484	0					
ANR	84805	Identifier	r_cons_input		84484	0					
ANR	84806	ArgumentList	"""index> """		84484	1					
ANR	84807	Argument	"""index> """		84484	0					
ANR	84808	PrimaryExpression	"""index> """		84484	0					
ANR	84809	ExpressionStatement	nth = atoi ( nth_string )	3286:2:82377:82400	84484	3	True				
ANR	84810	AssignmentExpression	nth = atoi ( nth_string )		84484	0		=			
ANR	84811	Identifier	nth		84484	0					
ANR	84812	CallExpression	atoi ( nth_string )		84484	1					
ANR	84813	Callee	atoi		84484	0					
ANR	84814	Identifier	atoi		84484	0					
ANR	84815	ArgumentList	nth_string		84484	1					
ANR	84816	Argument	nth_string		84484	0					
ANR	84817	Identifier	nth_string		84484	0					
ANR	84818	IfStatement	if ( nth == 0 && * nth_string != '0' )		84484	4					
ANR	84819	Condition	nth == 0 && * nth_string != '0'	3287:6:82408:82437	84484	0	True				
ANR	84820	AndExpression	nth == 0 && * nth_string != '0'		84484	0		&&			
ANR	84821	EqualityExpression	nth == 0		84484	0		==			
ANR	84822	Identifier	nth		84484	0					
ANR	84823	PrimaryExpression	0		84484	1					
ANR	84824	EqualityExpression	* nth_string != '0'		84484	1		!=			
ANR	84825	UnaryOperationExpression	* nth_string		84484	0					
ANR	84826	UnaryOperator	*		84484	0					
ANR	84827	Identifier	nth_string		84484	1					
ANR	84828	PrimaryExpression	'0'		84484	1					
ANR	84829	CompoundStatement		47:38:1226:1226	84484	1					
ANR	84830	ExpressionStatement	nth = - 1	3288:3:82445:82453	84484	0	True				
ANR	84831	AssignmentExpression	nth = - 1		84484	0		=			
ANR	84832	Identifier	nth		84484	0					
ANR	84833	UnaryOperationExpression	- 1		84484	1					
ANR	84834	UnaryOperator	-		84484	0					
ANR	84835	PrimaryExpression	1		84484	1					
ANR	84836	ExpressionStatement	free ( nth_string )	3290:2:82461:82478	84484	5	True				
ANR	84837	CallExpression	free ( nth_string )		84484	0					
ANR	84838	Callee	free		84484	0					
ANR	84839	Identifier	free		84484	0					
ANR	84840	ArgumentList	nth_string		84484	1					
ANR	84841	Argument	nth_string		84484	0					
ANR	84842	Identifier	nth_string		84484	0					
ANR	84843	IfStatement	if ( nth != - 1 )		84484	22					
ANR	84844	Condition	nth != - 1	3292:5:82488:82496	84484	0	True				
ANR	84845	EqualityExpression	nth != - 1		84484	0		!=			
ANR	84846	Identifier	nth		84484	0					
ANR	84847	UnaryOperationExpression	- 1		84484	1					
ANR	84848	UnaryOperator	-		84484	0					
ANR	84849	PrimaryExpression	1		84484	1					
ANR	84850	CompoundStatement		53:2:1289:1340	84484	1					
ANR	84851	IdentifierDeclStatement	"RANode * selected_node = r_list_get_n ( options , nth ) ;"	3293:2:82503:82554	84484	0	True				
ANR	84852	IdentifierDecl	"* selected_node = r_list_get_n ( options , nth )"		84484	0					
ANR	84853	IdentifierDeclType	RANode *		84484	0					
ANR	84854	Identifier	selected_node		84484	1					
ANR	84855	AssignmentExpression	"* selected_node = r_list_get_n ( options , nth )"		84484	2		=			
ANR	84856	Identifier	selected_node		84484	0					
ANR	84857	CallExpression	"r_list_get_n ( options , nth )"		84484	1					
ANR	84858	Callee	r_list_get_n		84484	0					
ANR	84859	Identifier	r_list_get_n		84484	0					
ANR	84860	ArgumentList	options		84484	1					
ANR	84861	Argument	options		84484	0					
ANR	84862	Identifier	options		84484	0					
ANR	84863	Argument	nth		84484	1					
ANR	84864	Identifier	nth		84484	0					
ANR	84865	ExpressionStatement	"r_agraph_set_curnode ( g , selected_node )"	3294:2:82558:82597	84484	1	True				
ANR	84866	CallExpression	"r_agraph_set_curnode ( g , selected_node )"		84484	0					
ANR	84867	Callee	r_agraph_set_curnode		84484	0					
ANR	84868	Identifier	r_agraph_set_curnode		84484	0					
ANR	84869	ArgumentList	g		84484	1					
ANR	84870	Argument	g		84484	0					
ANR	84871	Identifier	g		84484	0					
ANR	84872	Argument	selected_node		84484	1					
ANR	84873	Identifier	selected_node		84484	0					
ANR	84874	ExpressionStatement	r_list_free ( options )	3296:1:82603:82624	84484	23	True				
ANR	84875	CallExpression	r_list_free ( options )		84484	0					
ANR	84876	Callee	r_list_free		84484	0					
ANR	84877	Identifier	r_list_free		84484	0					
ANR	84878	ArgumentList	options		84484	1					
ANR	84879	Argument	options		84484	0					
ANR	84880	Identifier	options		84484	0					
ANR	84881	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"	3297:1:82627:82680	84484	24	True				
ANR	84882	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"		84484	0					
ANR	84883	Callee	agraph_update_seek		84484	0					
ANR	84884	Identifier	agraph_update_seek		84484	0					
ANR	84885	ArgumentList	g		84484	1					
ANR	84886	Argument	g		84484	0					
ANR	84887	Identifier	g		84484	0					
ANR	84888	Argument	get_anode ( g -> curnode )		84484	1					
ANR	84889	CallExpression	get_anode ( g -> curnode )		84484	0					
ANR	84890	Callee	get_anode		84484	0					
ANR	84891	Identifier	get_anode		84484	0					
ANR	84892	ArgumentList	g -> curnode		84484	1					
ANR	84893	Argument	g -> curnode		84484	0					
ANR	84894	PtrMemberAccess	g -> curnode		84484	0					
ANR	84895	Identifier	g		84484	0					
ANR	84896	Identifier	curnode		84484	1					
ANR	84897	Argument	false		84484	2					
ANR	84898	Identifier	false		84484	0					
ANR	84899	ReturnType	static void		84484	1					
ANR	84900	Identifier	agraph_follow_innodes		84484	2					
ANR	84901	ParameterList	"RAGraph * g , bool in"		84484	3					
ANR	84902	Parameter	RAGraph * g	3241:35:81192:81201	84484	0	True				
ANR	84903	ParameterType	RAGraph *		84484	0					
ANR	84904	Identifier	g		84484	1					
ANR	84905	Parameter	bool in	3241:47:81204:81210	84484	1	True				
ANR	84906	ParameterType	bool		84484	0					
ANR	84907	Identifier	in		84484	1					
ANR	84908	CFGEntryNode	ENTRY		84484		True				
ANR	84909	CFGExitNode	EXIT		84484		True				
ANR	84910	CFGErrorNode	ERROR		84484		True				
ANR	84911	Symbol	r_cons_readchar		84484						
ANR	84912	Symbol	agraph_get_title		84484						
ANR	84913	Symbol	* nth_string		84484						
ANR	84914	Symbol	an -> gnode -> out_nodes		84484						
ANR	84915	Symbol	gnn -> data		84484						
ANR	84916	Symbol	o -> title		84484						
ANR	84917	Symbol	an -> gnode		84484						
ANR	84918	Symbol	options		84484						
ANR	84919	Symbol	* nnn		84484						
ANR	84920	Symbol	* * an		84484						
ANR	84921	Symbol	* an -> gnode		84484						
ANR	84922	Symbol	nth_string		84484						
ANR	84923	Symbol	strcmp		84484						
ANR	84924	Symbol	atoi		84484						
ANR	84925	Symbol	get_anode		84484						
ANR	84926	Symbol	nth		84484						
ANR	84927	Symbol	NULL		84484						
ANR	84928	Symbol	in		84484						
ANR	84929	Symbol	an -> gnode -> in_nodes		84484						
ANR	84930	Symbol	r_list_newf		84484						
ANR	84931	Symbol	ch		84484						
ANR	84932	Symbol	gnn		84484						
ANR	84933	Symbol	g		84484						
ANR	84934	Symbol	gn		84484						
ANR	84935	Symbol	iter2		84484						
ANR	84936	Symbol	nnn -> title		84484						
ANR	84937	Symbol	count		84484						
ANR	84938	Symbol	false		84484						
ANR	84939	Symbol	selected_node		84484						
ANR	84940	Symbol	iter		84484						
ANR	84941	Symbol	r_list_get_n		84484						
ANR	84942	Symbol	list		84484						
ANR	84943	Symbol	an		84484						
ANR	84944	Symbol	* gnn		84484						
ANR	84945	Symbol	gnodes		84484						
ANR	84946	Symbol	nnn		84484						
ANR	84947	Symbol	o		84484						
ANR	84948	Symbol	* an		84484						
ANR	84949	Symbol	* g		84484						
ANR	84950	Symbol	g -> curnode		84484						
ANR	84951	Symbol	true		84484						
ANR	84952	Symbol	* o		84484						
ANR	84953	Symbol	r_cons_input		84484						
ANR	84954	Symbol	r_list_length		84484						
ANR	84955	Function	agraph_follow_true	3300:0:82685:82806							
ANR	84956	FunctionDef	agraph_follow_true (RAGraph * g)		84955	0					
ANR	84957	CompoundStatement		3300:43:82728:82806	84955	0					
ANR	84958	ExpressionStatement	"follow_nth ( g , 0 )"	3301:1:82731:82748	84955	0	True				
ANR	84959	CallExpression	"follow_nth ( g , 0 )"		84955	0					
ANR	84960	Callee	follow_nth		84955	0					
ANR	84961	Identifier	follow_nth		84955	0					
ANR	84962	ArgumentList	g		84955	1					
ANR	84963	Argument	g		84955	0					
ANR	84964	Identifier	g		84955	0					
ANR	84965	Argument	0		84955	1					
ANR	84966	PrimaryExpression	0		84955	0					
ANR	84967	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"	3302:1:82751:82804	84955	1	True				
ANR	84968	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"		84955	0					
ANR	84969	Callee	agraph_update_seek		84955	0					
ANR	84970	Identifier	agraph_update_seek		84955	0					
ANR	84971	ArgumentList	g		84955	1					
ANR	84972	Argument	g		84955	0					
ANR	84973	Identifier	g		84955	0					
ANR	84974	Argument	get_anode ( g -> curnode )		84955	1					
ANR	84975	CallExpression	get_anode ( g -> curnode )		84955	0					
ANR	84976	Callee	get_anode		84955	0					
ANR	84977	Identifier	get_anode		84955	0					
ANR	84978	ArgumentList	g -> curnode		84955	1					
ANR	84979	Argument	g -> curnode		84955	0					
ANR	84980	PtrMemberAccess	g -> curnode		84955	0					
ANR	84981	Identifier	g		84955	0					
ANR	84982	Identifier	curnode		84955	1					
ANR	84983	Argument	false		84955	2					
ANR	84984	Identifier	false		84955	0					
ANR	84985	ReturnType	static void		84955	1					
ANR	84986	Identifier	agraph_follow_true		84955	2					
ANR	84987	ParameterList	RAGraph * g		84955	3					
ANR	84988	Parameter	RAGraph * g	3300:31:82716:82725	84955	0	True				
ANR	84989	ParameterType	RAGraph *		84955	0					
ANR	84990	Identifier	g		84955	1					
ANR	84991	CFGEntryNode	ENTRY		84955		True				
ANR	84992	CFGExitNode	EXIT		84955		True				
ANR	84993	Symbol	* g		84955						
ANR	84994	Symbol	get_anode		84955						
ANR	84995	Symbol	g		84955						
ANR	84996	Symbol	g -> curnode		84955						
ANR	84997	Symbol	false		84955						
ANR	84998	Function	agraph_follow_false	3305:0:82809:82931							
ANR	84999	FunctionDef	agraph_follow_false (RAGraph * g)		84998	0					
ANR	85000	CompoundStatement		3305:44:82853:82931	84998	0					
ANR	85001	ExpressionStatement	"follow_nth ( g , 1 )"	3306:1:82856:82873	84998	0	True				
ANR	85002	CallExpression	"follow_nth ( g , 1 )"		84998	0					
ANR	85003	Callee	follow_nth		84998	0					
ANR	85004	Identifier	follow_nth		84998	0					
ANR	85005	ArgumentList	g		84998	1					
ANR	85006	Argument	g		84998	0					
ANR	85007	Identifier	g		84998	0					
ANR	85008	Argument	1		84998	1					
ANR	85009	PrimaryExpression	1		84998	0					
ANR	85010	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"	3307:1:82876:82929	84998	1	True				
ANR	85011	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"		84998	0					
ANR	85012	Callee	agraph_update_seek		84998	0					
ANR	85013	Identifier	agraph_update_seek		84998	0					
ANR	85014	ArgumentList	g		84998	1					
ANR	85015	Argument	g		84998	0					
ANR	85016	Identifier	g		84998	0					
ANR	85017	Argument	get_anode ( g -> curnode )		84998	1					
ANR	85018	CallExpression	get_anode ( g -> curnode )		84998	0					
ANR	85019	Callee	get_anode		84998	0					
ANR	85020	Identifier	get_anode		84998	0					
ANR	85021	ArgumentList	g -> curnode		84998	1					
ANR	85022	Argument	g -> curnode		84998	0					
ANR	85023	PtrMemberAccess	g -> curnode		84998	0					
ANR	85024	Identifier	g		84998	0					
ANR	85025	Identifier	curnode		84998	1					
ANR	85026	Argument	false		84998	2					
ANR	85027	Identifier	false		84998	0					
ANR	85028	ReturnType	static void		84998	1					
ANR	85029	Identifier	agraph_follow_false		84998	2					
ANR	85030	ParameterList	RAGraph * g		84998	3					
ANR	85031	Parameter	RAGraph * g	3305:32:82841:82850	84998	0	True				
ANR	85032	ParameterType	RAGraph *		84998	0					
ANR	85033	Identifier	g		84998	1					
ANR	85034	CFGEntryNode	ENTRY		84998		True				
ANR	85035	CFGExitNode	EXIT		84998		True				
ANR	85036	Symbol	* g		84998						
ANR	85037	Symbol	get_anode		84998						
ANR	85038	Symbol	g		84998						
ANR	85039	Symbol	g -> curnode		84998						
ANR	85040	Symbol	false		84998						
ANR	85041	Function	agraph_next_node	3311:0:82975:83248							
ANR	85042	FunctionDef	agraph_next_node (RAGraph * g)		85041	0					
ANR	85043	CompoundStatement		3311:41:83016:83248	85041	0					
ANR	85044	IdentifierDeclStatement	"RANode * a = get_anode ( find_near_of ( g , g -> curnode , true ) ) ;"	3312:1:83019:83077	85041	0	True				
ANR	85045	IdentifierDecl	"* a = get_anode ( find_near_of ( g , g -> curnode , true ) )"		85041	0					
ANR	85046	IdentifierDeclType	RANode *		85041	0					
ANR	85047	Identifier	a		85041	1					
ANR	85048	AssignmentExpression	"* a = get_anode ( find_near_of ( g , g -> curnode , true ) )"		85041	2		=			
ANR	85049	Identifier	a		85041	0					
ANR	85050	CallExpression	"get_anode ( find_near_of ( g , g -> curnode , true ) )"		85041	1					
ANR	85051	Callee	get_anode		85041	0					
ANR	85052	Identifier	get_anode		85041	0					
ANR	85053	ArgumentList	"find_near_of ( g , g -> curnode , true )"		85041	1					
ANR	85054	Argument	"find_near_of ( g , g -> curnode , true )"		85041	0					
ANR	85055	CallExpression	"find_near_of ( g , g -> curnode , true )"		85041	0					
ANR	85056	Callee	find_near_of		85041	0					
ANR	85057	Identifier	find_near_of		85041	0					
ANR	85058	ArgumentList	g		85041	1					
ANR	85059	Argument	g		85041	0					
ANR	85060	Identifier	g		85041	0					
ANR	85061	Argument	g -> curnode		85041	1					
ANR	85062	PtrMemberAccess	g -> curnode		85041	0					
ANR	85063	Identifier	g		85041	0					
ANR	85064	Identifier	curnode		85041	1					
ANR	85065	Argument	true		85041	2					
ANR	85066	Identifier	true		85041	0					
ANR	85067	WhileStatement	while ( a && a -> is_dummy )		85041	1					
ANR	85068	Condition	a && a -> is_dummy	3313:8:83087:83102	85041	0	True				
ANR	85069	AndExpression	a && a -> is_dummy		85041	0		&&			
ANR	85070	Identifier	a		85041	0					
ANR	85071	PtrMemberAccess	a -> is_dummy		85041	1					
ANR	85072	Identifier	a		85041	0					
ANR	85073	Identifier	is_dummy		85041	1					
ANR	85074	CompoundStatement		3:26:88:88	85041	1					
ANR	85075	ExpressionStatement	"a = get_anode ( find_near_of ( g , a -> gnode , true ) )"	3314:2:83109:83157	85041	0	True				
ANR	85076	AssignmentExpression	"a = get_anode ( find_near_of ( g , a -> gnode , true ) )"		85041	0		=			
ANR	85077	Identifier	a		85041	0					
ANR	85078	CallExpression	"get_anode ( find_near_of ( g , a -> gnode , true ) )"		85041	1					
ANR	85079	Callee	get_anode		85041	0					
ANR	85080	Identifier	get_anode		85041	0					
ANR	85081	ArgumentList	"find_near_of ( g , a -> gnode , true )"		85041	1					
ANR	85082	Argument	"find_near_of ( g , a -> gnode , true )"		85041	0					
ANR	85083	CallExpression	"find_near_of ( g , a -> gnode , true )"		85041	0					
ANR	85084	Callee	find_near_of		85041	0					
ANR	85085	Identifier	find_near_of		85041	0					
ANR	85086	ArgumentList	g		85041	1					
ANR	85087	Argument	g		85041	0					
ANR	85088	Identifier	g		85041	0					
ANR	85089	Argument	a -> gnode		85041	1					
ANR	85090	PtrMemberAccess	a -> gnode		85041	0					
ANR	85091	Identifier	a		85041	0					
ANR	85092	Identifier	gnode		85041	1					
ANR	85093	Argument	true		85041	2					
ANR	85094	Identifier	true		85041	0					
ANR	85095	ExpressionStatement	"r_agraph_set_curnode ( g , a )"	3316:1:83163:83190	85041	2	True				
ANR	85096	CallExpression	"r_agraph_set_curnode ( g , a )"		85041	0					
ANR	85097	Callee	r_agraph_set_curnode		85041	0					
ANR	85098	Identifier	r_agraph_set_curnode		85041	0					
ANR	85099	ArgumentList	g		85041	1					
ANR	85100	Argument	g		85041	0					
ANR	85101	Identifier	g		85041	0					
ANR	85102	Argument	a		85041	1					
ANR	85103	Identifier	a		85041	0					
ANR	85104	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"	3317:1:83193:83246	85041	3	True				
ANR	85105	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"		85041	0					
ANR	85106	Callee	agraph_update_seek		85041	0					
ANR	85107	Identifier	agraph_update_seek		85041	0					
ANR	85108	ArgumentList	g		85041	1					
ANR	85109	Argument	g		85041	0					
ANR	85110	Identifier	g		85041	0					
ANR	85111	Argument	get_anode ( g -> curnode )		85041	1					
ANR	85112	CallExpression	get_anode ( g -> curnode )		85041	0					
ANR	85113	Callee	get_anode		85041	0					
ANR	85114	Identifier	get_anode		85041	0					
ANR	85115	ArgumentList	g -> curnode		85041	1					
ANR	85116	Argument	g -> curnode		85041	0					
ANR	85117	PtrMemberAccess	g -> curnode		85041	0					
ANR	85118	Identifier	g		85041	0					
ANR	85119	Identifier	curnode		85041	1					
ANR	85120	Argument	false		85041	2					
ANR	85121	Identifier	false		85041	0					
ANR	85122	ReturnType	static void		85041	1					
ANR	85123	Identifier	agraph_next_node		85041	2					
ANR	85124	ParameterList	RAGraph * g		85041	3					
ANR	85125	Parameter	RAGraph * g	3311:29:83004:83013	85041	0	True				
ANR	85126	ParameterType	RAGraph *		85041	0					
ANR	85127	Identifier	g		85041	1					
ANR	85128	CFGEntryNode	ENTRY		85041		True				
ANR	85129	CFGExitNode	EXIT		85041		True				
ANR	85130	Symbol	a		85041						
ANR	85131	Symbol	* g		85041						
ANR	85132	Symbol	a -> is_dummy		85041						
ANR	85133	Symbol	get_anode		85041						
ANR	85134	Symbol	g		85041						
ANR	85135	Symbol	g -> curnode		85041						
ANR	85136	Symbol	true		85041						
ANR	85137	Symbol	false		85041						
ANR	85138	Symbol	find_near_of		85041						
ANR	85139	Symbol	a -> gnode		85041						
ANR	85140	Symbol	* a		85041						
ANR	85141	Function	agraph_prev_node	3321:0:83296:83571							
ANR	85142	FunctionDef	agraph_prev_node (RAGraph * g)		85141	0					
ANR	85143	CompoundStatement		3321:41:83337:83571	85141	0					
ANR	85144	IdentifierDeclStatement	"RANode * a = get_anode ( find_near_of ( g , g -> curnode , false ) ) ;"	3322:1:83340:83399	85141	0	True				
ANR	85145	IdentifierDecl	"* a = get_anode ( find_near_of ( g , g -> curnode , false ) )"		85141	0					
ANR	85146	IdentifierDeclType	RANode *		85141	0					
ANR	85147	Identifier	a		85141	1					
ANR	85148	AssignmentExpression	"* a = get_anode ( find_near_of ( g , g -> curnode , false ) )"		85141	2		=			
ANR	85149	Identifier	a		85141	0					
ANR	85150	CallExpression	"get_anode ( find_near_of ( g , g -> curnode , false ) )"		85141	1					
ANR	85151	Callee	get_anode		85141	0					
ANR	85152	Identifier	get_anode		85141	0					
ANR	85153	ArgumentList	"find_near_of ( g , g -> curnode , false )"		85141	1					
ANR	85154	Argument	"find_near_of ( g , g -> curnode , false )"		85141	0					
ANR	85155	CallExpression	"find_near_of ( g , g -> curnode , false )"		85141	0					
ANR	85156	Callee	find_near_of		85141	0					
ANR	85157	Identifier	find_near_of		85141	0					
ANR	85158	ArgumentList	g		85141	1					
ANR	85159	Argument	g		85141	0					
ANR	85160	Identifier	g		85141	0					
ANR	85161	Argument	g -> curnode		85141	1					
ANR	85162	PtrMemberAccess	g -> curnode		85141	0					
ANR	85163	Identifier	g		85141	0					
ANR	85164	Identifier	curnode		85141	1					
ANR	85165	Argument	false		85141	2					
ANR	85166	Identifier	false		85141	0					
ANR	85167	WhileStatement	while ( a && a -> is_dummy )		85141	1					
ANR	85168	Condition	a && a -> is_dummy	3323:8:83409:83424	85141	0	True				
ANR	85169	AndExpression	a && a -> is_dummy		85141	0		&&			
ANR	85170	Identifier	a		85141	0					
ANR	85171	PtrMemberAccess	a -> is_dummy		85141	1					
ANR	85172	Identifier	a		85141	0					
ANR	85173	Identifier	is_dummy		85141	1					
ANR	85174	CompoundStatement		3:26:89:89	85141	1					
ANR	85175	ExpressionStatement	"a = get_anode ( find_near_of ( g , a -> gnode , false ) )"	3324:2:83431:83480	85141	0	True				
ANR	85176	AssignmentExpression	"a = get_anode ( find_near_of ( g , a -> gnode , false ) )"		85141	0		=			
ANR	85177	Identifier	a		85141	0					
ANR	85178	CallExpression	"get_anode ( find_near_of ( g , a -> gnode , false ) )"		85141	1					
ANR	85179	Callee	get_anode		85141	0					
ANR	85180	Identifier	get_anode		85141	0					
ANR	85181	ArgumentList	"find_near_of ( g , a -> gnode , false )"		85141	1					
ANR	85182	Argument	"find_near_of ( g , a -> gnode , false )"		85141	0					
ANR	85183	CallExpression	"find_near_of ( g , a -> gnode , false )"		85141	0					
ANR	85184	Callee	find_near_of		85141	0					
ANR	85185	Identifier	find_near_of		85141	0					
ANR	85186	ArgumentList	g		85141	1					
ANR	85187	Argument	g		85141	0					
ANR	85188	Identifier	g		85141	0					
ANR	85189	Argument	a -> gnode		85141	1					
ANR	85190	PtrMemberAccess	a -> gnode		85141	0					
ANR	85191	Identifier	a		85141	0					
ANR	85192	Identifier	gnode		85141	1					
ANR	85193	Argument	false		85141	2					
ANR	85194	Identifier	false		85141	0					
ANR	85195	ExpressionStatement	"r_agraph_set_curnode ( g , a )"	3326:1:83486:83513	85141	2	True				
ANR	85196	CallExpression	"r_agraph_set_curnode ( g , a )"		85141	0					
ANR	85197	Callee	r_agraph_set_curnode		85141	0					
ANR	85198	Identifier	r_agraph_set_curnode		85141	0					
ANR	85199	ArgumentList	g		85141	1					
ANR	85200	Argument	g		85141	0					
ANR	85201	Identifier	g		85141	0					
ANR	85202	Argument	a		85141	1					
ANR	85203	Identifier	a		85141	0					
ANR	85204	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"	3327:1:83516:83569	85141	3	True				
ANR	85205	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , false )"		85141	0					
ANR	85206	Callee	agraph_update_seek		85141	0					
ANR	85207	Identifier	agraph_update_seek		85141	0					
ANR	85208	ArgumentList	g		85141	1					
ANR	85209	Argument	g		85141	0					
ANR	85210	Identifier	g		85141	0					
ANR	85211	Argument	get_anode ( g -> curnode )		85141	1					
ANR	85212	CallExpression	get_anode ( g -> curnode )		85141	0					
ANR	85213	Callee	get_anode		85141	0					
ANR	85214	Identifier	get_anode		85141	0					
ANR	85215	ArgumentList	g -> curnode		85141	1					
ANR	85216	Argument	g -> curnode		85141	0					
ANR	85217	PtrMemberAccess	g -> curnode		85141	0					
ANR	85218	Identifier	g		85141	0					
ANR	85219	Identifier	curnode		85141	1					
ANR	85220	Argument	false		85141	2					
ANR	85221	Identifier	false		85141	0					
ANR	85222	ReturnType	static void		85141	1					
ANR	85223	Identifier	agraph_prev_node		85141	2					
ANR	85224	ParameterList	RAGraph * g		85141	3					
ANR	85225	Parameter	RAGraph * g	3321:29:83325:83334	85141	0	True				
ANR	85226	ParameterType	RAGraph *		85141	0					
ANR	85227	Identifier	g		85141	1					
ANR	85228	CFGEntryNode	ENTRY		85141		True				
ANR	85229	CFGExitNode	EXIT		85141		True				
ANR	85230	Symbol	* g		85141						
ANR	85231	Symbol	a		85141						
ANR	85232	Symbol	a -> is_dummy		85141						
ANR	85233	Symbol	get_anode		85141						
ANR	85234	Symbol	g		85141						
ANR	85235	Symbol	g -> curnode		85141						
ANR	85236	Symbol	false		85141						
ANR	85237	Symbol	find_near_of		85141						
ANR	85238	Symbol	a -> gnode		85141						
ANR	85239	Symbol	* a		85141						
ANR	85240	Function	agraph_update_title	3330:0:83574:83923							
ANR	85241	FunctionDef	"agraph_update_title (RCore * core , RAGraph * g , RAnalFunction * fcn)"		85240	0					
ANR	85242	CompoundStatement		3330:77:83651:83923	85240	0					
ANR	85243	IdentifierDeclStatement	RANode * a = get_anode ( g -> curnode ) ;	3331:1:83654:83688	85240	0	True				
ANR	85244	IdentifierDecl	* a = get_anode ( g -> curnode )		85240	0					
ANR	85245	IdentifierDeclType	RANode *		85240	0					
ANR	85246	Identifier	a		85240	1					
ANR	85247	AssignmentExpression	* a = get_anode ( g -> curnode )		85240	2		=			
ANR	85248	Identifier	a		85240	0					
ANR	85249	CallExpression	get_anode ( g -> curnode )		85240	1					
ANR	85250	Callee	get_anode		85240	0					
ANR	85251	Identifier	get_anode		85240	0					
ANR	85252	ArgumentList	g -> curnode		85240	1					
ANR	85253	Argument	g -> curnode		85240	0					
ANR	85254	PtrMemberAccess	g -> curnode		85240	0					
ANR	85255	Identifier	g		85240	0					
ANR	85256	Identifier	curnode		85240	1					
ANR	85257	IdentifierDeclStatement	"char * sig = r_core_cmd_str ( core , ""afcf"" ) ;"	3332:1:83691:83732	85240	1	True				
ANR	85258	IdentifierDecl	"* sig = r_core_cmd_str ( core , ""afcf"" )"		85240	0					
ANR	85259	IdentifierDeclType	char *		85240	0					
ANR	85260	Identifier	sig		85240	1					
ANR	85261	AssignmentExpression	"* sig = r_core_cmd_str ( core , ""afcf"" )"		85240	2		=			
ANR	85262	Identifier	sig		85240	0					
ANR	85263	CallExpression	"r_core_cmd_str ( core , ""afcf"" )"		85240	1					
ANR	85264	Callee	r_core_cmd_str		85240	0					
ANR	85265	Identifier	r_core_cmd_str		85240	0					
ANR	85266	ArgumentList	core		85240	1					
ANR	85267	Argument	core		85240	0					
ANR	85268	Identifier	core		85240	0					
ANR	85269	Argument	"""afcf"""		85240	1					
ANR	85270	PrimaryExpression	"""afcf"""		85240	0					
ANR	85271	Statement	char	3333:1:83735:83738	85240	2	True				
ANR	85272	Statement	*	3333:6:83740:83740	85240	3	True				
ANR	85273	Statement	new_title	3333:7:83741:83749	85240	4	True				
ANR	85274	Statement	=	3333:17:83751:83751	85240	5	True				
ANR	85275	Statement	r_str_newf	3333:19:83753:83762	85240	6	True				
ANR	85276	Statement	(	3333:30:83764:83764	85240	7	True				
ANR	85277	Statement	"""%s[0x%08"""	3334:2:83768:83777	85240	8	True				
ANR	85278	Statement	PFMT64x	3334:12:83778:83784	85240	9	True				
ANR	85279	Statement	"""]> %s # %s """	3334:20:83786:83798	85240	10	True				
ANR	85280	Statement	","	3334:33:83799:83799	85240	11	True				
ANR	85281	Statement	graphCursor	3335:2:83803:83813	85240	12	True				
ANR	85282	Statement	?	3335:13:83814:83814	85240	13	True				
ANR	85283	Statement	"""(cursor)"""	3335:15:83816:83825	85240	14	True				
ANR	85284	Statement	:	3335:25:83826:83826	85240	15	True				
ANR	85285	Statement	""""""	3335:27:83828:83829	85240	16	True				
ANR	85286	Statement	","	3335:29:83830:83830	85240	17	True				
ANR	85287	Statement	fcn	3336:2:83834:83836	85240	18	True				
ANR	85288	Statement	->	3336:5:83837:83838	85240	19	True				
ANR	85289	Statement	addr	3336:7:83839:83842	85240	20	True				
ANR	85290	Statement	","	3336:11:83843:83843	85240	21	True				
ANR	85291	Statement	a	3336:13:83845:83845	85240	22	True				
ANR	85292	Statement	?	3336:14:83846:83846	85240	23	True				
ANR	85293	Statement	a	3336:16:83848:83848	85240	24	True				
ANR	85294	Statement	->	3336:17:83849:83850	85240	25	True				
ANR	85295	Label	title :	3336:19:83851:83856	85240	26	True				
ANR	85296	Identifier	title		85240	0					
ANR	85297	Statement	""""""	3336:26:83858:83859	85240	27	True				
ANR	85298	Statement	","	3336:28:83860:83860	85240	28	True				
ANR	85299	Statement	sig	3336:30:83862:83864	85240	29	True				
ANR	85300	Statement	)	3336:33:83865:83865	85240	30	True				
ANR	85301	ExpressionStatement		3336:34:83866:83866	85240	31	True				
ANR	85302	ExpressionStatement	"r_agraph_set_title ( g , new_title )"	3337:1:83869:83902	85240	32	True				
ANR	85303	CallExpression	"r_agraph_set_title ( g , new_title )"		85240	0					
ANR	85304	Callee	r_agraph_set_title		85240	0					
ANR	85305	Identifier	r_agraph_set_title		85240	0					
ANR	85306	ArgumentList	g		85240	1					
ANR	85307	Argument	g		85240	0					
ANR	85308	Identifier	g		85240	0					
ANR	85309	Argument	new_title		85240	1					
ANR	85310	Identifier	new_title		85240	0					
ANR	85311	ExpressionStatement	free ( new_title )	3338:1:83905:83921	85240	33	True				
ANR	85312	CallExpression	free ( new_title )		85240	0					
ANR	85313	Callee	free		85240	0					
ANR	85314	Identifier	free		85240	0					
ANR	85315	ArgumentList	new_title		85240	1					
ANR	85316	Argument	new_title		85240	0					
ANR	85317	Identifier	new_title		85240	0					
ANR	85318	ReturnType	static void		85240	1					
ANR	85319	Identifier	agraph_update_title		85240	2					
ANR	85320	ParameterList	"RCore * core , RAGraph * g , RAnalFunction * fcn"		85240	3					
ANR	85321	Parameter	RCore * core	3330:32:83606:83616	85240	0	True				
ANR	85322	ParameterType	RCore *		85240	0					
ANR	85323	Identifier	core		85240	1					
ANR	85324	Parameter	RAGraph * g	3330:45:83619:83628	85240	1	True				
ANR	85325	ParameterType	RAGraph *		85240	0					
ANR	85326	Identifier	g		85240	1					
ANR	85327	Parameter	RAnalFunction * fcn	3330:57:83631:83648	85240	2	True				
ANR	85328	ParameterType	RAnalFunction *		85240	0					
ANR	85329	Identifier	fcn		85240	1					
ANR	85330	CFGEntryNode	ENTRY		85240		True				
ANR	85331	CFGExitNode	EXIT		85240		True				
ANR	85332	Symbol	fcn		85240						
ANR	85333	Symbol	sig		85240						
ANR	85334	Symbol	core		85240						
ANR	85335	Symbol	* g		85240						
ANR	85336	Symbol	a		85240						
ANR	85337	Symbol	get_anode		85240						
ANR	85338	Symbol	r_core_cmd_str		85240						
ANR	85339	Symbol	g		85240						
ANR	85340	Symbol	g -> curnode		85240						
ANR	85341	Symbol	new_title		85240						
ANR	85342	Function	check_changes	3343:0:84009:85864							
ANR	85343	FunctionDef	"check_changes (RAGraph * g , int is_interactive , RCore * core , RAnalFunction * fcn)"		85342	0					
ANR	85344	CompoundStatement		3343:90:84099:85864	85342	0					
ANR	85345	IdentifierDeclStatement	"int oldpos [ 2 ] = { 0 , 0 } ;"	3344:1:84102:84129	85342	0	True				
ANR	85346	IdentifierDecl	"oldpos [ 2 ] = { 0 , 0 }"		85342	0					
ANR	85347	IdentifierDeclType	int [ 2 ]		85342	0					
ANR	85348	Identifier	oldpos		85342	1					
ANR	85349	PrimaryExpression	2		85342	2					
ANR	85350	AssignmentExpression	"oldpos [ 2 ] = { 0 , 0 }"		85342	3		=			
ANR	85351	Identifier	oldpos		85342	0					
ANR	85352	InitializerList	0		85342	1					
ANR	85353	PrimaryExpression	0		85342	0					
ANR	85354	PrimaryExpression	0		85342	1					
ANR	85355	IfStatement	if ( g -> need_reload_nodes && core )		85342	1					
ANR	85356	Condition	g -> need_reload_nodes && core	3347:5:84136:84163	85342	0	True				
ANR	85357	AndExpression	g -> need_reload_nodes && core		85342	0		&&			
ANR	85358	PtrMemberAccess	g -> need_reload_nodes		85342	0					
ANR	85359	Identifier	g		85342	0					
ANR	85360	Identifier	need_reload_nodes		85342	1					
ANR	85361	Identifier	core		85342	1					
ANR	85362	CompoundStatement		5:35:66:66	85342	1					
ANR	85363	IfStatement	if ( ! g -> update_seek_on && ! g -> force_update_seek )		85342	0					
ANR	85364	Condition	! g -> update_seek_on && ! g -> force_update_seek	3348:6:84174:84216	85342	0	True				
ANR	85365	AndExpression	! g -> update_seek_on && ! g -> force_update_seek		85342	0		&&			
ANR	85366	UnaryOperationExpression	! g -> update_seek_on		85342	0					
ANR	85367	UnaryOperator	!		85342	0					
ANR	85368	PtrMemberAccess	g -> update_seek_on		85342	1					
ANR	85369	Identifier	g		85342	0					
ANR	85370	Identifier	update_seek_on		85342	1					
ANR	85371	UnaryOperationExpression	! g -> force_update_seek		85342	1					
ANR	85372	UnaryOperator	!		85342	0					
ANR	85373	PtrMemberAccess	g -> force_update_seek		85342	1					
ANR	85374	Identifier	g		85342	0					
ANR	85375	Identifier	force_update_seek		85342	1					
ANR	85376	CompoundStatement		6:51:119:119	85342	1					
ANR	85377	ExpressionStatement	oldpos [ 0 ] = g -> can -> sx	3350:3:84247:84269	85342	0	True				
ANR	85378	AssignmentExpression	oldpos [ 0 ] = g -> can -> sx		85342	0		=			
ANR	85379	ArrayIndexing	oldpos [ 0 ]		85342	0					
ANR	85380	Identifier	oldpos		85342	0					
ANR	85381	PrimaryExpression	0		85342	1					
ANR	85382	PtrMemberAccess	g -> can -> sx		85342	1					
ANR	85383	PtrMemberAccess	g -> can		85342	0					
ANR	85384	Identifier	g		85342	0					
ANR	85385	Identifier	can		85342	1					
ANR	85386	Identifier	sx		85342	1					
ANR	85387	ExpressionStatement	oldpos [ 1 ] = g -> can -> sy	3351:3:84274:84296	85342	1	True				
ANR	85388	AssignmentExpression	oldpos [ 1 ] = g -> can -> sy		85342	0		=			
ANR	85389	ArrayIndexing	oldpos [ 1 ]		85342	0					
ANR	85390	Identifier	oldpos		85342	0					
ANR	85391	PrimaryExpression	1		85342	1					
ANR	85392	PtrMemberAccess	g -> can -> sy		85342	1					
ANR	85393	PtrMemberAccess	g -> can		85342	0					
ANR	85394	Identifier	g		85342	0					
ANR	85395	Identifier	can		85342	1					
ANR	85396	Identifier	sy		85342	1					
ANR	85397	IfStatement	"if ( ! agraph_reload_nodes ( g , core , fcn ) )"		85342	1					
ANR	85398	Condition	"! agraph_reload_nodes ( g , core , fcn )"	3353:6:84308:84342	85342	0	True				
ANR	85399	UnaryOperationExpression	"! agraph_reload_nodes ( g , core , fcn )"		85342	0					
ANR	85400	UnaryOperator	!		85342	0					
ANR	85401	CallExpression	"agraph_reload_nodes ( g , core , fcn )"		85342	1					
ANR	85402	Callee	agraph_reload_nodes		85342	0					
ANR	85403	Identifier	agraph_reload_nodes		85342	0					
ANR	85404	ArgumentList	g		85342	1					
ANR	85405	Argument	g		85342	0					
ANR	85406	Identifier	g		85342	0					
ANR	85407	Argument	core		85342	1					
ANR	85408	Identifier	core		85342	0					
ANR	85409	Argument	fcn		85342	2					
ANR	85410	Identifier	fcn		85342	0					
ANR	85411	CompoundStatement		11:43:245:245	85342	1					
ANR	85412	ReturnStatement	return false ;	3354:3:84350:84362	85342	0	True				
ANR	85413	Identifier	false		85342	0					
ANR	85414	IfStatement	if ( fcn )		85342	2					
ANR	85415	Condition	fcn	3357:5:84376:84378	85342	0	True				
ANR	85416	Identifier	fcn		85342	0					
ANR	85417	CompoundStatement		15:10:281:281	85342	1					
ANR	85418	ExpressionStatement	"agraph_update_title ( core , g , fcn )"	3358:2:84385:84419	85342	0	True				
ANR	85419	CallExpression	"agraph_update_title ( core , g , fcn )"		85342	0					
ANR	85420	Callee	agraph_update_title		85342	0					
ANR	85421	Identifier	agraph_update_title		85342	0					
ANR	85422	ArgumentList	core		85342	1					
ANR	85423	Argument	core		85342	0					
ANR	85424	Identifier	core		85342	0					
ANR	85425	Argument	g		85342	1					
ANR	85426	Identifier	g		85342	0					
ANR	85427	Argument	fcn		85342	2					
ANR	85428	Identifier	fcn		85342	0					
ANR	85429	IfStatement	if ( core && core -> config )		85342	3					
ANR	85430	Condition	core && core -> config	3360:5:84429:84448	85342	0	True				
ANR	85431	AndExpression	core && core -> config		85342	0		&&			
ANR	85432	Identifier	core		85342	0					
ANR	85433	PtrMemberAccess	core -> config		85342	1					
ANR	85434	Identifier	core		85342	0					
ANR	85435	Identifier	config		85342	1					
ANR	85436	CompoundStatement		18:27:351:351	85342	1					
ANR	85437	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.trace"" ) )"		85342	0					
ANR	85438	Condition	"r_config_get_i ( core -> config , ""graph.trace"" )"	3361:6:84459:84502	85342	0	True				
ANR	85439	CallExpression	"r_config_get_i ( core -> config , ""graph.trace"" )"		85342	0					
ANR	85440	Callee	r_config_get_i		85342	0					
ANR	85441	Identifier	r_config_get_i		85342	0					
ANR	85442	ArgumentList	core -> config		85342	1					
ANR	85443	Argument	core -> config		85342	0					
ANR	85444	PtrMemberAccess	core -> config		85342	0					
ANR	85445	Identifier	core		85342	0					
ANR	85446	Identifier	config		85342	1					
ANR	85447	Argument	"""graph.trace"""		85342	1					
ANR	85448	PrimaryExpression	"""graph.trace"""		85342	0					
ANR	85449	CompoundStatement		19:52:405:405	85342	1					
ANR	85450	ExpressionStatement	"fold_asm_trace ( core , g )"	3363:3:84540:84564	85342	0	True				
ANR	85451	CallExpression	"fold_asm_trace ( core , g )"		85342	0					
ANR	85452	Callee	fold_asm_trace		85342	0					
ANR	85453	Identifier	fold_asm_trace		85342	0					
ANR	85454	ArgumentList	core		85342	1					
ANR	85455	Argument	core		85342	0					
ANR	85456	Identifier	core		85342	0					
ANR	85457	Argument	g		85342	1					
ANR	85458	Identifier	g		85342	0					
ANR	85459	IfStatement	if ( g -> need_update_dim || g -> need_reload_nodes || ! is_interactive )		85342	4					
ANR	85460	Condition	g -> need_update_dim || g -> need_reload_nodes || ! is_interactive	3366:5:84578:84638	85342	0	True				
ANR	85461	OrExpression	g -> need_update_dim || g -> need_reload_nodes || ! is_interactive		85342	0		||			
ANR	85462	PtrMemberAccess	g -> need_update_dim		85342	0					
ANR	85463	Identifier	g		85342	0					
ANR	85464	Identifier	need_update_dim		85342	1					
ANR	85465	OrExpression	g -> need_reload_nodes || ! is_interactive		85342	1		||			
ANR	85466	PtrMemberAccess	g -> need_reload_nodes		85342	0					
ANR	85467	Identifier	g		85342	0					
ANR	85468	Identifier	need_reload_nodes		85342	1					
ANR	85469	UnaryOperationExpression	! is_interactive		85342	1					
ANR	85470	UnaryOperator	!		85342	0					
ANR	85471	Identifier	is_interactive		85342	1					
ANR	85472	CompoundStatement		24:68:541:541	85342	1					
ANR	85473	ExpressionStatement	"update_node_dimension ( g -> graph , is_mini ( g ) , g -> zoom , g -> edgemode , g -> is_callgraph , g -> layout )"	3367:2:84645:84740	85342	0	True				
ANR	85474	CallExpression	"update_node_dimension ( g -> graph , is_mini ( g ) , g -> zoom , g -> edgemode , g -> is_callgraph , g -> layout )"		85342	0					
ANR	85475	Callee	update_node_dimension		85342	0					
ANR	85476	Identifier	update_node_dimension		85342	0					
ANR	85477	ArgumentList	g -> graph		85342	1					
ANR	85478	Argument	g -> graph		85342	0					
ANR	85479	PtrMemberAccess	g -> graph		85342	0					
ANR	85480	Identifier	g		85342	0					
ANR	85481	Identifier	graph		85342	1					
ANR	85482	Argument	is_mini ( g )		85342	1					
ANR	85483	CallExpression	is_mini ( g )		85342	0					
ANR	85484	Callee	is_mini		85342	0					
ANR	85485	Identifier	is_mini		85342	0					
ANR	85486	ArgumentList	g		85342	1					
ANR	85487	Argument	g		85342	0					
ANR	85488	Identifier	g		85342	0					
ANR	85489	Argument	g -> zoom		85342	2					
ANR	85490	PtrMemberAccess	g -> zoom		85342	0					
ANR	85491	Identifier	g		85342	0					
ANR	85492	Identifier	zoom		85342	1					
ANR	85493	Argument	g -> edgemode		85342	3					
ANR	85494	PtrMemberAccess	g -> edgemode		85342	0					
ANR	85495	Identifier	g		85342	0					
ANR	85496	Identifier	edgemode		85342	1					
ANR	85497	Argument	g -> is_callgraph		85342	4					
ANR	85498	PtrMemberAccess	g -> is_callgraph		85342	0					
ANR	85499	Identifier	g		85342	0					
ANR	85500	Identifier	is_callgraph		85342	1					
ANR	85501	Argument	g -> layout		85342	5					
ANR	85502	PtrMemberAccess	g -> layout		85342	0					
ANR	85503	Identifier	g		85342	0					
ANR	85504	Identifier	layout		85342	1					
ANR	85505	IfStatement	if ( g -> need_set_layout || g -> need_reload_nodes || ! is_interactive )		85342	5					
ANR	85506	Condition	g -> need_set_layout || g -> need_reload_nodes || ! is_interactive	3369:5:84750:84810	85342	0	True				
ANR	85507	OrExpression	g -> need_set_layout || g -> need_reload_nodes || ! is_interactive		85342	0		||			
ANR	85508	PtrMemberAccess	g -> need_set_layout		85342	0					
ANR	85509	Identifier	g		85342	0					
ANR	85510	Identifier	need_set_layout		85342	1					
ANR	85511	OrExpression	g -> need_reload_nodes || ! is_interactive		85342	1		||			
ANR	85512	PtrMemberAccess	g -> need_reload_nodes		85342	0					
ANR	85513	Identifier	g		85342	0					
ANR	85514	Identifier	need_reload_nodes		85342	1					
ANR	85515	UnaryOperationExpression	! is_interactive		85342	1					
ANR	85516	UnaryOperator	!		85342	0					
ANR	85517	Identifier	is_interactive		85342	1					
ANR	85518	CompoundStatement		27:68:713:713	85342	1					
ANR	85519	ExpressionStatement	agraph_set_layout ( g )	3370:2:84817:84838	85342	0	True				
ANR	85520	CallExpression	agraph_set_layout ( g )		85342	0					
ANR	85521	Callee	agraph_set_layout		85342	0					
ANR	85522	Identifier	agraph_set_layout		85342	0					
ANR	85523	ArgumentList	g		85342	1					
ANR	85524	Argument	g		85342	0					
ANR	85525	Identifier	g		85342	0					
ANR	85526	IfStatement	if ( core )		85342	6					
ANR	85527	Condition	core	3372:5:84848:84851	85342	0	True				
ANR	85528	Identifier	core		85342	0					
ANR	85529	CompoundStatement		33:2:849:891	85342	1					
ANR	85530	IdentifierDeclStatement	"ut64 off = r_core_anal_get_bbaddr ( core , core -> offset ) ;"	3373:2:84858:84912	85342	0	True				
ANR	85531	IdentifierDecl	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		85342	0					
ANR	85532	IdentifierDeclType	ut64		85342	0					
ANR	85533	Identifier	off		85342	1					
ANR	85534	AssignmentExpression	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		85342	2		=			
ANR	85535	Identifier	off		85342	0					
ANR	85536	CallExpression	"r_core_anal_get_bbaddr ( core , core -> offset )"		85342	1					
ANR	85537	Callee	r_core_anal_get_bbaddr		85342	0					
ANR	85538	Identifier	r_core_anal_get_bbaddr		85342	0					
ANR	85539	ArgumentList	core		85342	1					
ANR	85540	Argument	core		85342	0					
ANR	85541	Identifier	core		85342	0					
ANR	85542	Argument	core -> offset		85342	1					
ANR	85543	PtrMemberAccess	core -> offset		85342	0					
ANR	85544	Identifier	core		85342	0					
ANR	85545	Identifier	offset		85342	1					
ANR	85546	IdentifierDeclStatement	char * title = get_title ( off ) ;	3374:2:84916:84945	85342	1	True				
ANR	85547	IdentifierDecl	* title = get_title ( off )		85342	0					
ANR	85548	IdentifierDeclType	char *		85342	0					
ANR	85549	Identifier	title		85342	1					
ANR	85550	AssignmentExpression	* title = get_title ( off )		85342	2		=			
ANR	85551	Identifier	title		85342	0					
ANR	85552	CallExpression	get_title ( off )		85342	1					
ANR	85553	Callee	get_title		85342	0					
ANR	85554	Identifier	get_title		85342	0					
ANR	85555	ArgumentList	off		85342	1					
ANR	85556	Argument	off		85342	0					
ANR	85557	Identifier	off		85342	0					
ANR	85558	IdentifierDeclStatement	RANode * cur_anode = get_anode ( g -> curnode ) ;	3375:2:84949:84991	85342	2	True				
ANR	85559	IdentifierDecl	* cur_anode = get_anode ( g -> curnode )		85342	0					
ANR	85560	IdentifierDeclType	RANode *		85342	0					
ANR	85561	Identifier	cur_anode		85342	1					
ANR	85562	AssignmentExpression	* cur_anode = get_anode ( g -> curnode )		85342	2		=			
ANR	85563	Identifier	cur_anode		85342	0					
ANR	85564	CallExpression	get_anode ( g -> curnode )		85342	1					
ANR	85565	Callee	get_anode		85342	0					
ANR	85566	Identifier	get_anode		85342	0					
ANR	85567	ArgumentList	g -> curnode		85342	1					
ANR	85568	Argument	g -> curnode		85342	0					
ANR	85569	PtrMemberAccess	g -> curnode		85342	0					
ANR	85570	Identifier	g		85342	0					
ANR	85571	Identifier	curnode		85342	1					
ANR	85572	IfStatement	"if ( fcn && ( ( is_interactive && ! cur_anode ) || ( cur_anode && strcmp ( cur_anode -> title , title ) ) ) )"		85342	3					
ANR	85573	Condition	"fcn && ( ( is_interactive && ! cur_anode ) || ( cur_anode && strcmp ( cur_anode -> title , title ) ) )"	3376:6:84999:85088	85342	0	True				
ANR	85574	AndExpression	"fcn && ( ( is_interactive && ! cur_anode ) || ( cur_anode && strcmp ( cur_anode -> title , title ) ) )"		85342	0		&&			
ANR	85575	Identifier	fcn		85342	0					
ANR	85576	OrExpression	"( is_interactive && ! cur_anode ) || ( cur_anode && strcmp ( cur_anode -> title , title ) )"		85342	1		||			
ANR	85577	AndExpression	is_interactive && ! cur_anode		85342	0		&&			
ANR	85578	Identifier	is_interactive		85342	0					
ANR	85579	UnaryOperationExpression	! cur_anode		85342	1					
ANR	85580	UnaryOperator	!		85342	0					
ANR	85581	Identifier	cur_anode		85342	1					
ANR	85582	AndExpression	"cur_anode && strcmp ( cur_anode -> title , title )"		85342	1		&&			
ANR	85583	Identifier	cur_anode		85342	0					
ANR	85584	CallExpression	"strcmp ( cur_anode -> title , title )"		85342	1					
ANR	85585	Callee	strcmp		85342	0					
ANR	85586	Identifier	strcmp		85342	0					
ANR	85587	ArgumentList	cur_anode -> title		85342	1					
ANR	85588	Argument	cur_anode -> title		85342	0					
ANR	85589	PtrMemberAccess	cur_anode -> title		85342	0					
ANR	85590	Identifier	cur_anode		85342	0					
ANR	85591	Identifier	title		85342	1					
ANR	85592	Argument	title		85342	1					
ANR	85593	Identifier	title		85342	0					
ANR	85594	CompoundStatement		34:98:991:991	85342	1					
ANR	85595	ExpressionStatement	"g -> update_seek_on = r_agraph_get_node ( g , title )"	3377:3:85096:85144	85342	0	True				
ANR	85596	AssignmentExpression	"g -> update_seek_on = r_agraph_get_node ( g , title )"		85342	0		=			
ANR	85597	PtrMemberAccess	g -> update_seek_on		85342	0					
ANR	85598	Identifier	g		85342	0					
ANR	85599	Identifier	update_seek_on		85342	1					
ANR	85600	CallExpression	"r_agraph_get_node ( g , title )"		85342	1					
ANR	85601	Callee	r_agraph_get_node		85342	0					
ANR	85602	Identifier	r_agraph_get_node		85342	0					
ANR	85603	ArgumentList	g		85342	1					
ANR	85604	Argument	g		85342	0					
ANR	85605	Identifier	g		85342	0					
ANR	85606	Argument	title		85342	1					
ANR	85607	Identifier	title		85342	0					
ANR	85608	IfStatement	if ( g -> update_seek_on )		85342	1					
ANR	85609	Condition	g -> update_seek_on	3378:7:85153:85169	85342	0	True				
ANR	85610	PtrMemberAccess	g -> update_seek_on		85342	0					
ANR	85611	Identifier	g		85342	0					
ANR	85612	Identifier	update_seek_on		85342	1					
ANR	85613	CompoundStatement		36:26:1072:1072	85342	1					
ANR	85614	ExpressionStatement	"r_agraph_set_curnode ( g , g -> update_seek_on )"	3379:4:85178:85221	85342	0	True				
ANR	85615	CallExpression	"r_agraph_set_curnode ( g , g -> update_seek_on )"		85342	0					
ANR	85616	Callee	r_agraph_set_curnode		85342	0					
ANR	85617	Identifier	r_agraph_set_curnode		85342	0					
ANR	85618	ArgumentList	g		85342	1					
ANR	85619	Argument	g		85342	0					
ANR	85620	Identifier	g		85342	0					
ANR	85621	Argument	g -> update_seek_on		85342	1					
ANR	85622	PtrMemberAccess	g -> update_seek_on		85342	0					
ANR	85623	Identifier	g		85342	0					
ANR	85624	Identifier	update_seek_on		85342	1					
ANR	85625	ExpressionStatement	g -> force_update_seek = true	3380:4:85227:85254	85342	1	True				
ANR	85626	AssignmentExpression	g -> force_update_seek = true		85342	0		=			
ANR	85627	PtrMemberAccess	g -> force_update_seek		85342	0					
ANR	85628	Identifier	g		85342	0					
ANR	85629	Identifier	force_update_seek		85342	1					
ANR	85630	Identifier	true		85342	1					
ANR	85631	ExpressionStatement	free ( title )	3383:2:85267:85279	85342	4	True				
ANR	85632	CallExpression	free ( title )		85342	0					
ANR	85633	Callee	free		85342	0					
ANR	85634	Identifier	free		85342	0					
ANR	85635	ArgumentList	title		85342	1					
ANR	85636	Argument	title		85342	0					
ANR	85637	Identifier	title		85342	0					
ANR	85638	ExpressionStatement	"g -> can -> color = r_config_get_i ( core -> config , ""scr.color"" )"	3384:2:85283:85341	85342	5	True				
ANR	85639	AssignmentExpression	"g -> can -> color = r_config_get_i ( core -> config , ""scr.color"" )"		85342	0		=			
ANR	85640	PtrMemberAccess	g -> can -> color		85342	0					
ANR	85641	PtrMemberAccess	g -> can		85342	0					
ANR	85642	Identifier	g		85342	0					
ANR	85643	Identifier	can		85342	1					
ANR	85644	Identifier	color		85342	1					
ANR	85645	CallExpression	"r_config_get_i ( core -> config , ""scr.color"" )"		85342	1					
ANR	85646	Callee	r_config_get_i		85342	0					
ANR	85647	Identifier	r_config_get_i		85342	0					
ANR	85648	ArgumentList	core -> config		85342	1					
ANR	85649	Argument	core -> config		85342	0					
ANR	85650	PtrMemberAccess	core -> config		85342	0					
ANR	85651	Identifier	core		85342	0					
ANR	85652	Identifier	config		85342	1					
ANR	85653	Argument	"""scr.color"""		85342	1					
ANR	85654	PrimaryExpression	"""scr.color"""		85342	0					
ANR	85655	ExpressionStatement	"g -> hints = r_config_get_i ( core -> config , ""graph.hints"" )"	3385:2:85345:85400	85342	6	True				
ANR	85656	AssignmentExpression	"g -> hints = r_config_get_i ( core -> config , ""graph.hints"" )"		85342	0		=			
ANR	85657	PtrMemberAccess	g -> hints		85342	0					
ANR	85658	Identifier	g		85342	0					
ANR	85659	Identifier	hints		85342	1					
ANR	85660	CallExpression	"r_config_get_i ( core -> config , ""graph.hints"" )"		85342	1					
ANR	85661	Callee	r_config_get_i		85342	0					
ANR	85662	Identifier	r_config_get_i		85342	0					
ANR	85663	ArgumentList	core -> config		85342	1					
ANR	85664	Argument	core -> config		85342	0					
ANR	85665	PtrMemberAccess	core -> config		85342	0					
ANR	85666	Identifier	core		85342	0					
ANR	85667	Identifier	config		85342	1					
ANR	85668	Argument	"""graph.hints"""		85342	1					
ANR	85669	PrimaryExpression	"""graph.hints"""		85342	0					
ANR	85670	IfStatement	if ( g -> update_seek_on || g -> force_update_seek )		85342	7					
ANR	85671	Condition	g -> update_seek_on || g -> force_update_seek	3387:5:85410:85450	85342	0	True				
ANR	85672	OrExpression	g -> update_seek_on || g -> force_update_seek		85342	0		||			
ANR	85673	PtrMemberAccess	g -> update_seek_on		85342	0					
ANR	85674	Identifier	g		85342	0					
ANR	85675	Identifier	update_seek_on		85342	1					
ANR	85676	PtrMemberAccess	g -> force_update_seek		85342	1					
ANR	85677	Identifier	g		85342	0					
ANR	85678	Identifier	force_update_seek		85342	1					
ANR	85679	CompoundStatement		46:2:1357:1386	85342	1					
ANR	85680	IdentifierDeclStatement	RANode * n = g -> update_seek_on ;	3388:2:85457:85486	85342	0	True				
ANR	85681	IdentifierDecl	* n = g -> update_seek_on		85342	0					
ANR	85682	IdentifierDeclType	RANode *		85342	0					
ANR	85683	Identifier	n		85342	1					
ANR	85684	AssignmentExpression	* n = g -> update_seek_on		85342	2		=			
ANR	85685	Identifier	n		85342	0					
ANR	85686	PtrMemberAccess	g -> update_seek_on		85342	1					
ANR	85687	Identifier	g		85342	0					
ANR	85688	Identifier	update_seek_on		85342	1					
ANR	85689	IfStatement	if ( ! n && g -> curnode )		85342	1					
ANR	85690	Condition	! n && g -> curnode	3389:6:85494:85509	85342	0	True				
ANR	85691	AndExpression	! n && g -> curnode		85342	0		&&			
ANR	85692	UnaryOperationExpression	! n		85342	0					
ANR	85693	UnaryOperator	!		85342	0					
ANR	85694	Identifier	n		85342	1					
ANR	85695	PtrMemberAccess	g -> curnode		85342	1					
ANR	85696	Identifier	g		85342	0					
ANR	85697	Identifier	curnode		85342	1					
ANR	85698	CompoundStatement		47:24:1412:1412	85342	1					
ANR	85699	ExpressionStatement	n = get_anode ( g -> curnode )	3390:3:85517:85543	85342	0	True				
ANR	85700	AssignmentExpression	n = get_anode ( g -> curnode )		85342	0		=			
ANR	85701	Identifier	n		85342	0					
ANR	85702	CallExpression	get_anode ( g -> curnode )		85342	1					
ANR	85703	Callee	get_anode		85342	0					
ANR	85704	Identifier	get_anode		85342	0					
ANR	85705	ArgumentList	g -> curnode		85342	1					
ANR	85706	Argument	g -> curnode		85342	0					
ANR	85707	PtrMemberAccess	g -> curnode		85342	0					
ANR	85708	Identifier	g		85342	0					
ANR	85709	Identifier	curnode		85342	1					
ANR	85710	IfStatement	if ( n )		85342	2					
ANR	85711	Condition	n	3392:6:85555:85555	85342	0	True				
ANR	85712	Identifier	n		85342	0					
ANR	85713	CompoundStatement		50:9:1458:1458	85342	1					
ANR	85714	ExpressionStatement	"update_seek ( g -> can , n , g -> force_update_seek )"	3393:3:85563:85608	85342	0	True				
ANR	85715	CallExpression	"update_seek ( g -> can , n , g -> force_update_seek )"		85342	0					
ANR	85716	Callee	update_seek		85342	0					
ANR	85717	Identifier	update_seek		85342	0					
ANR	85718	ArgumentList	g -> can		85342	1					
ANR	85719	Argument	g -> can		85342	0					
ANR	85720	PtrMemberAccess	g -> can		85342	0					
ANR	85721	Identifier	g		85342	0					
ANR	85722	Identifier	can		85342	1					
ANR	85723	Argument	n		85342	1					
ANR	85724	Identifier	n		85342	0					
ANR	85725	Argument	g -> force_update_seek		85342	2					
ANR	85726	PtrMemberAccess	g -> force_update_seek		85342	0					
ANR	85727	Identifier	g		85342	0					
ANR	85728	Identifier	force_update_seek		85342	1					
ANR	85729	IfStatement	if ( oldpos [ 0 ] || oldpos [ 1 ] )		85342	8					
ANR	85730	Condition	oldpos [ 0 ] || oldpos [ 1 ]	3396:5:85622:85643	85342	0	True				
ANR	85731	OrExpression	oldpos [ 0 ] || oldpos [ 1 ]		85342	0		||			
ANR	85732	ArrayIndexing	oldpos [ 0 ]		85342	0					
ANR	85733	Identifier	oldpos		85342	0					
ANR	85734	PrimaryExpression	0		85342	1					
ANR	85735	ArrayIndexing	oldpos [ 1 ]		85342	1					
ANR	85736	Identifier	oldpos		85342	0					
ANR	85737	PrimaryExpression	1		85342	1					
ANR	85738	CompoundStatement		54:29:1546:1546	85342	1					
ANR	85739	ExpressionStatement	g -> can -> sx = oldpos [ 0 ]	3397:2:85650:85672	85342	0	True				
ANR	85740	AssignmentExpression	g -> can -> sx = oldpos [ 0 ]		85342	0		=			
ANR	85741	PtrMemberAccess	g -> can -> sx		85342	0					
ANR	85742	PtrMemberAccess	g -> can		85342	0					
ANR	85743	Identifier	g		85342	0					
ANR	85744	Identifier	can		85342	1					
ANR	85745	Identifier	sx		85342	1					
ANR	85746	ArrayIndexing	oldpos [ 0 ]		85342	1					
ANR	85747	Identifier	oldpos		85342	0					
ANR	85748	PrimaryExpression	0		85342	1					
ANR	85749	ExpressionStatement	g -> can -> sy = oldpos [ 1 ]	3398:2:85676:85698	85342	1	True				
ANR	85750	AssignmentExpression	g -> can -> sy = oldpos [ 1 ]		85342	0		=			
ANR	85751	PtrMemberAccess	g -> can -> sy		85342	0					
ANR	85752	PtrMemberAccess	g -> can		85342	0					
ANR	85753	Identifier	g		85342	0					
ANR	85754	Identifier	can		85342	1					
ANR	85755	Identifier	sy		85342	1					
ANR	85756	ArrayIndexing	oldpos [ 1 ]		85342	1					
ANR	85757	Identifier	oldpos		85342	0					
ANR	85758	PrimaryExpression	1		85342	1					
ANR	85759	ExpressionStatement	g -> need_reload_nodes = false	3400:1:85704:85732	85342	9	True				
ANR	85760	AssignmentExpression	g -> need_reload_nodes = false		85342	0		=			
ANR	85761	PtrMemberAccess	g -> need_reload_nodes		85342	0					
ANR	85762	Identifier	g		85342	0					
ANR	85763	Identifier	need_reload_nodes		85342	1					
ANR	85764	Identifier	false		85342	1					
ANR	85765	ExpressionStatement	g -> need_update_dim = false	3401:1:85735:85761	85342	10	True				
ANR	85766	AssignmentExpression	g -> need_update_dim = false		85342	0		=			
ANR	85767	PtrMemberAccess	g -> need_update_dim		85342	0					
ANR	85768	Identifier	g		85342	0					
ANR	85769	Identifier	need_update_dim		85342	1					
ANR	85770	Identifier	false		85342	1					
ANR	85771	ExpressionStatement	g -> need_set_layout = false	3402:1:85764:85790	85342	11	True				
ANR	85772	AssignmentExpression	g -> need_set_layout = false		85342	0		=			
ANR	85773	PtrMemberAccess	g -> need_set_layout		85342	0					
ANR	85774	Identifier	g		85342	0					
ANR	85775	Identifier	need_set_layout		85342	1					
ANR	85776	Identifier	false		85342	1					
ANR	85777	ExpressionStatement	g -> update_seek_on = NULL	3403:1:85793:85817	85342	12	True				
ANR	85778	AssignmentExpression	g -> update_seek_on = NULL		85342	0		=			
ANR	85779	PtrMemberAccess	g -> update_seek_on		85342	0					
ANR	85780	Identifier	g		85342	0					
ANR	85781	Identifier	update_seek_on		85342	1					
ANR	85782	Identifier	NULL		85342	1					
ANR	85783	ExpressionStatement	g -> force_update_seek = false	3404:1:85820:85848	85342	13	True				
ANR	85784	AssignmentExpression	g -> force_update_seek = false		85342	0		=			
ANR	85785	PtrMemberAccess	g -> force_update_seek		85342	0					
ANR	85786	Identifier	g		85342	0					
ANR	85787	Identifier	force_update_seek		85342	1					
ANR	85788	Identifier	false		85342	1					
ANR	85789	ReturnStatement	return true ;	3405:1:85851:85862	85342	14	True				
ANR	85790	Identifier	true		85342	0					
ANR	85791	ReturnType	static int		85342	1					
ANR	85792	Identifier	check_changes		85342	2					
ANR	85793	ParameterList	"RAGraph * g , int is_interactive , RCore * core , RAnalFunction * fcn"		85342	3					
ANR	85794	Parameter	RAGraph * g	3343:25:84034:84043	85342	0	True				
ANR	85795	ParameterType	RAGraph *		85342	0					
ANR	85796	Identifier	g		85342	1					
ANR	85797	Parameter	int is_interactive	3343:37:84046:84063	85342	1	True				
ANR	85798	ParameterType	int		85342	0					
ANR	85799	Identifier	is_interactive		85342	1					
ANR	85800	Parameter	RCore * core	3343:57:84066:84076	85342	2	True				
ANR	85801	ParameterType	RCore *		85342	0					
ANR	85802	Identifier	core		85342	1					
ANR	85803	Parameter	RAnalFunction * fcn	3343:70:84079:84096	85342	3	True				
ANR	85804	ParameterType	RAnalFunction *		85342	0					
ANR	85805	Identifier	fcn		85342	1					
ANR	85806	CFGEntryNode	ENTRY		85342		True				
ANR	85807	CFGExitNode	EXIT		85342		True				
ANR	85808	Symbol	* oldpos		85342						
ANR	85809	Symbol	g -> hints		85342						
ANR	85810	Symbol	g -> zoom		85342						
ANR	85811	Symbol	oldpos		85342						
ANR	85812	Symbol	* core		85342						
ANR	85813	Symbol	core -> offset		85342						
ANR	85814	Symbol	cur_anode -> title		85342						
ANR	85815	Symbol	title		85342						
ANR	85816	Symbol	get_title		85342						
ANR	85817	Symbol	* g -> can		85342						
ANR	85818	Symbol	g -> need_update_dim		85342						
ANR	85819	Symbol	fcn		85342						
ANR	85820	Symbol	r_core_anal_get_bbaddr		85342						
ANR	85821	Symbol	g -> can -> color		85342						
ANR	85822	Symbol	is_mini		85342						
ANR	85823	Symbol	g -> graph		85342						
ANR	85824	Symbol	r_agraph_get_node		85342						
ANR	85825	Symbol	g -> is_callgraph		85342						
ANR	85826	Symbol	g -> can -> sx		85342						
ANR	85827	Symbol	g -> can		85342						
ANR	85828	Symbol	g -> can -> sy		85342						
ANR	85829	Symbol	core -> config		85342						
ANR	85830	Symbol	strcmp		85342						
ANR	85831	Symbol	g -> need_set_layout		85342						
ANR	85832	Symbol	get_anode		85342						
ANR	85833	Symbol	NULL		85342						
ANR	85834	Symbol	g -> need_reload_nodes		85342						
ANR	85835	Symbol	* * g		85342						
ANR	85836	Symbol	g -> layout		85342						
ANR	85837	Symbol	g		85342						
ANR	85838	Symbol	is_interactive		85342						
ANR	85839	Symbol	g -> update_seek_on		85342						
ANR	85840	Symbol	false		85342						
ANR	85841	Symbol	cur_anode		85342						
ANR	85842	Symbol	off		85342						
ANR	85843	Symbol	n		85342						
ANR	85844	Symbol	* cur_anode		85342						
ANR	85845	Symbol	core		85342						
ANR	85846	Symbol	* g		85342						
ANR	85847	Symbol	g -> force_update_seek		85342						
ANR	85848	Symbol	g -> edgemode		85342						
ANR	85849	Symbol	r_config_get_i		85342						
ANR	85850	Symbol	g -> curnode		85342						
ANR	85851	Symbol	true		85342						
ANR	85852	Symbol	agraph_reload_nodes		85342						
ANR	85853	Function	agraph_print	3408:0:85867:88064							
ANR	85854	FunctionDef	"agraph_print (RAGraph * g , int is_interactive , RCore * core , RAnalFunction * fcn)"		85853	0					
ANR	85855	CompoundStatement		3408:89:85956:88064	85853	0					
ANR	85856	IdentifierDeclStatement	"int h , w = r_cons_get_size ( & h ) ;"	3409:1:85959:85990	85853	0	True				
ANR	85857	IdentifierDecl	h		85853	0					
ANR	85858	IdentifierDeclType	int		85853	0					
ANR	85859	Identifier	h		85853	1					
ANR	85860	IdentifierDecl	w = r_cons_get_size ( & h )		85853	1					
ANR	85861	IdentifierDeclType	int		85853	0					
ANR	85862	Identifier	w		85853	1					
ANR	85863	AssignmentExpression	w = r_cons_get_size ( & h )		85853	2		=			
ANR	85864	Identifier	w		85853	0					
ANR	85865	CallExpression	r_cons_get_size ( & h )		85853	1					
ANR	85866	Callee	r_cons_get_size		85853	0					
ANR	85867	Identifier	r_cons_get_size		85853	0					
ANR	85868	ArgumentList	& h		85853	1					
ANR	85869	Argument	& h		85853	0					
ANR	85870	UnaryOperationExpression	& h		85853	0					
ANR	85871	UnaryOperator	&		85853	0					
ANR	85872	Identifier	h		85853	1					
ANR	85873	IdentifierDeclStatement	"int ret = check_changes ( g , is_interactive , core , fcn ) ;"	3410:1:85993:86047	85853	1	True				
ANR	85874	IdentifierDecl	"ret = check_changes ( g , is_interactive , core , fcn )"		85853	0					
ANR	85875	IdentifierDeclType	int		85853	0					
ANR	85876	Identifier	ret		85853	1					
ANR	85877	AssignmentExpression	"ret = check_changes ( g , is_interactive , core , fcn )"		85853	2		=			
ANR	85878	Identifier	ret		85853	0					
ANR	85879	CallExpression	"check_changes ( g , is_interactive , core , fcn )"		85853	1					
ANR	85880	Callee	check_changes		85853	0					
ANR	85881	Identifier	check_changes		85853	0					
ANR	85882	ArgumentList	g		85853	1					
ANR	85883	Argument	g		85853	0					
ANR	85884	Identifier	g		85853	0					
ANR	85885	Argument	is_interactive		85853	1					
ANR	85886	Identifier	is_interactive		85853	0					
ANR	85887	Argument	core		85853	2					
ANR	85888	Identifier	core		85853	0					
ANR	85889	Argument	fcn		85853	3					
ANR	85890	Identifier	fcn		85853	0					
ANR	85891	IfStatement	if ( ! ret )		85853	2					
ANR	85892	Condition	! ret	3411:5:86054:86057	85853	0	True				
ANR	85893	UnaryOperationExpression	! ret		85853	0					
ANR	85894	UnaryOperator	!		85853	0					
ANR	85895	Identifier	ret		85853	1					
ANR	85896	CompoundStatement		4:11:103:103	85853	1					
ANR	85897	ReturnStatement	return false ;	3412:2:86064:86076	85853	0	True				
ANR	85898	Identifier	false		85853	0					
ANR	85899	IfStatement	if ( is_interactive )		85853	3					
ANR	85900	Condition	is_interactive	3415:5:86087:86100	85853	0	True				
ANR	85901	Identifier	is_interactive		85853	0					
ANR	85902	CompoundStatement		8:21:146:146	85853	1					
ANR	85903	ExpressionStatement	r_cons_clear00 ( )	3416:2:86107:86124	85853	0	True				
ANR	85904	CallExpression	r_cons_clear00 ( )		85853	0					
ANR	85905	Callee	r_cons_clear00		85853	0					
ANR	85906	Identifier	r_cons_clear00		85853	0					
ANR	85907	ArgumentList			85853	1					
ANR	85908	ElseStatement	else		85853	0					
ANR	85909	CompoundStatement		10:8:177:177	85853	0					
ANR	85910	ExpressionStatement	update_graph_sizes ( g )	3419:2:86215:86237	85853	0	True				
ANR	85911	CallExpression	update_graph_sizes ( g )		85853	0					
ANR	85912	Callee	update_graph_sizes		85853	0					
ANR	85913	Identifier	update_graph_sizes		85853	0					
ANR	85914	ArgumentList	g		85853	1					
ANR	85915	Argument	g		85853	0					
ANR	85916	Identifier	g		85853	0					
ANR	85917	ExpressionStatement	h = is_interactive ? h : g -> h + 1	3422:1:86244:86275	85853	4	True				
ANR	85918	AssignmentExpression	h = is_interactive ? h : g -> h + 1		85853	0		=			
ANR	85919	Identifier	h		85853	0					
ANR	85920	ConditionalExpression	is_interactive ? h : g -> h + 1		85853	1					
ANR	85921	Condition	is_interactive		85853	0					
ANR	85922	Identifier	is_interactive		85853	0					
ANR	85923	Identifier	h		85853	1					
ANR	85924	AdditiveExpression	g -> h + 1		85853	2		+			
ANR	85925	PtrMemberAccess	g -> h		85853	0					
ANR	85926	Identifier	g		85853	0					
ANR	85927	Identifier	h		85853	1					
ANR	85928	PrimaryExpression	1		85853	1					
ANR	85929	ExpressionStatement	w = is_interactive ? w : g -> w + 2	3423:1:86278:86309	85853	5	True				
ANR	85930	AssignmentExpression	w = is_interactive ? w : g -> w + 2		85853	0		=			
ANR	85931	Identifier	w		85853	0					
ANR	85932	ConditionalExpression	is_interactive ? w : g -> w + 2		85853	1					
ANR	85933	Condition	is_interactive		85853	0					
ANR	85934	Identifier	is_interactive		85853	0					
ANR	85935	Identifier	w		85853	1					
ANR	85936	AdditiveExpression	g -> w + 2		85853	2		+			
ANR	85937	PtrMemberAccess	g -> w		85853	0					
ANR	85938	Identifier	g		85853	0					
ANR	85939	Identifier	w		85853	1					
ANR	85940	PrimaryExpression	2		85853	1					
ANR	85941	IfStatement	"if ( ! r_cons_canvas_resize ( g -> can , w , h ) )"		85853	6					
ANR	85942	Condition	"! r_cons_canvas_resize ( g -> can , w , h )"	3424:5:86316:86351	85853	0	True				
ANR	85943	UnaryOperationExpression	"! r_cons_canvas_resize ( g -> can , w , h )"		85853	0					
ANR	85944	UnaryOperator	!		85853	0					
ANR	85945	CallExpression	"r_cons_canvas_resize ( g -> can , w , h )"		85853	1					
ANR	85946	Callee	r_cons_canvas_resize		85853	0					
ANR	85947	Identifier	r_cons_canvas_resize		85853	0					
ANR	85948	ArgumentList	g -> can		85853	1					
ANR	85949	Argument	g -> can		85853	0					
ANR	85950	PtrMemberAccess	g -> can		85853	0					
ANR	85951	Identifier	g		85853	0					
ANR	85952	Identifier	can		85853	1					
ANR	85953	Argument	w		85853	1					
ANR	85954	Identifier	w		85853	0					
ANR	85955	Argument	h		85853	2					
ANR	85956	Identifier	h		85853	0					
ANR	85957	CompoundStatement		17:43:397:397	85853	1					
ANR	85958	ReturnStatement	return false ;	3425:2:86358:86370	85853	0	True				
ANR	85959	Identifier	false		85853	0					
ANR	85960	IfStatement	if ( ! is_interactive )		85853	7					
ANR	85961	Condition	! is_interactive	3428:5:86414:86428	85853	0	True				
ANR	85962	UnaryOperationExpression	! is_interactive		85853	0					
ANR	85963	UnaryOperator	!		85853	0					
ANR	85964	Identifier	is_interactive		85853	1					
ANR	85965	CompoundStatement		21:22:474:474	85853	1					
ANR	85966	ExpressionStatement	g -> can -> sx = - g -> x	3429:2:86435:86453	85853	0	True				
ANR	85967	AssignmentExpression	g -> can -> sx = - g -> x		85853	0		=			
ANR	85968	PtrMemberAccess	g -> can -> sx		85853	0					
ANR	85969	PtrMemberAccess	g -> can		85853	0					
ANR	85970	Identifier	g		85853	0					
ANR	85971	Identifier	can		85853	1					
ANR	85972	Identifier	sx		85853	1					
ANR	85973	UnaryOperationExpression	- g -> x		85853	1					
ANR	85974	UnaryOperator	-		85853	0					
ANR	85975	PtrMemberAccess	g -> x		85853	1					
ANR	85976	Identifier	g		85853	0					
ANR	85977	Identifier	x		85853	1					
ANR	85978	ExpressionStatement	g -> can -> sy = - g -> y - 1	3430:2:86457:86479	85853	1	True				
ANR	85979	AssignmentExpression	g -> can -> sy = - g -> y - 1		85853	0		=			
ANR	85980	PtrMemberAccess	g -> can -> sy		85853	0					
ANR	85981	PtrMemberAccess	g -> can		85853	0					
ANR	85982	Identifier	g		85853	0					
ANR	85983	Identifier	can		85853	1					
ANR	85984	Identifier	sy		85853	1					
ANR	85985	AdditiveExpression	- g -> y - 1		85853	1		-			
ANR	85986	UnaryOperationExpression	- g -> y		85853	0					
ANR	85987	UnaryOperator	-		85853	0					
ANR	85988	PtrMemberAccess	g -> y		85853	1					
ANR	85989	Identifier	g		85853	0					
ANR	85990	Identifier	y		85853	1					
ANR	85991	PrimaryExpression	1		85853	1					
ANR	85992	IfStatement	if ( g -> is_dis )		85853	8					
ANR	85993	Condition	g -> is_dis	3432:5:86489:86497	85853	0	True				
ANR	85994	PtrMemberAccess	g -> is_dis		85853	0					
ANR	85995	Identifier	g		85853	0					
ANR	85996	Identifier	is_dis		85853	1					
ANR	85997	CompoundStatement		33:2:936:978	85853	1					
ANR	85998	ExpressionStatement	"( void ) G ( - g -> can -> sx + 1 , - g -> can -> sy + 2 )"	3433:2:86504:86547	85853	0	True				
ANR	85999	CastExpression	"( void ) G ( - g -> can -> sx + 1 , - g -> can -> sy + 2 )"		85853	0					
ANR	86000	CastTarget	void		85853	0					
ANR	86001	CallExpression	"G ( - g -> can -> sx + 1 , - g -> can -> sy + 2 )"		85853	1					
ANR	86002	Callee	G		85853	0					
ANR	86003	Identifier	G		85853	0					
ANR	86004	ArgumentList	- g -> can -> sx + 1		85853	1					
ANR	86005	Argument	- g -> can -> sx + 1		85853	0					
ANR	86006	AdditiveExpression	- g -> can -> sx + 1		85853	0		+			
ANR	86007	UnaryOperationExpression	- g -> can -> sx		85853	0					
ANR	86008	UnaryOperator	-		85853	0					
ANR	86009	PtrMemberAccess	g -> can -> sx		85853	1					
ANR	86010	PtrMemberAccess	g -> can		85853	0					
ANR	86011	Identifier	g		85853	0					
ANR	86012	Identifier	can		85853	1					
ANR	86013	Identifier	sx		85853	1					
ANR	86014	PrimaryExpression	1		85853	1					
ANR	86015	Argument	- g -> can -> sy + 2		85853	1					
ANR	86016	AdditiveExpression	- g -> can -> sy + 2		85853	0		+			
ANR	86017	UnaryOperationExpression	- g -> can -> sy		85853	0					
ANR	86018	UnaryOperator	-		85853	0					
ANR	86019	PtrMemberAccess	g -> can -> sy		85853	1					
ANR	86020	PtrMemberAccess	g -> can		85853	0					
ANR	86021	Identifier	g		85853	0					
ANR	86022	Identifier	can		85853	1					
ANR	86023	Identifier	sy		85853	1					
ANR	86024	PrimaryExpression	2		85853	1					
ANR	86025	IdentifierDeclStatement	"int scr_utf8 = r_config_get_i ( core -> config , ""scr.utf8"" ) ;"	3434:2:86551:86607	85853	1	True				
ANR	86026	IdentifierDecl	"scr_utf8 = r_config_get_i ( core -> config , ""scr.utf8"" )"		85853	0					
ANR	86027	IdentifierDeclType	int		85853	0					
ANR	86028	Identifier	scr_utf8		85853	1					
ANR	86029	AssignmentExpression	"scr_utf8 = r_config_get_i ( core -> config , ""scr.utf8"" )"		85853	2		=			
ANR	86030	Identifier	scr_utf8		85853	0					
ANR	86031	CallExpression	"r_config_get_i ( core -> config , ""scr.utf8"" )"		85853	1					
ANR	86032	Callee	r_config_get_i		85853	0					
ANR	86033	Identifier	r_config_get_i		85853	0					
ANR	86034	ArgumentList	core -> config		85853	1					
ANR	86035	Argument	core -> config		85853	0					
ANR	86036	PtrMemberAccess	core -> config		85853	0					
ANR	86037	Identifier	core		85853	0					
ANR	86038	Identifier	config		85853	1					
ANR	86039	Argument	"""scr.utf8"""		85853	1					
ANR	86040	PrimaryExpression	"""scr.utf8"""		85853	0					
ANR	86041	IdentifierDeclStatement	"int asm_bytes = r_config_get_i ( core -> config , ""asm.bytes"" ) ;"	3435:2:86611:86669	85853	2	True				
ANR	86042	IdentifierDecl	"asm_bytes = r_config_get_i ( core -> config , ""asm.bytes"" )"		85853	0					
ANR	86043	IdentifierDeclType	int		85853	0					
ANR	86044	Identifier	asm_bytes		85853	1					
ANR	86045	AssignmentExpression	"asm_bytes = r_config_get_i ( core -> config , ""asm.bytes"" )"		85853	2		=			
ANR	86046	Identifier	asm_bytes		85853	0					
ANR	86047	CallExpression	"r_config_get_i ( core -> config , ""asm.bytes"" )"		85853	1					
ANR	86048	Callee	r_config_get_i		85853	0					
ANR	86049	Identifier	r_config_get_i		85853	0					
ANR	86050	ArgumentList	core -> config		85853	1					
ANR	86051	Argument	core -> config		85853	0					
ANR	86052	PtrMemberAccess	core -> config		85853	0					
ANR	86053	Identifier	core		85853	0					
ANR	86054	Identifier	config		85853	1					
ANR	86055	Argument	"""asm.bytes"""		85853	1					
ANR	86056	PrimaryExpression	"""asm.bytes"""		85853	0					
ANR	86057	IdentifierDeclStatement	"int asm_cmt_right = r_config_get_i ( core -> config , ""asm.cmt.right"" ) ;"	3436:2:86673:86739	85853	3	True				
ANR	86058	IdentifierDecl	"asm_cmt_right = r_config_get_i ( core -> config , ""asm.cmt.right"" )"		85853	0					
ANR	86059	IdentifierDeclType	int		85853	0					
ANR	86060	Identifier	asm_cmt_right		85853	1					
ANR	86061	AssignmentExpression	"asm_cmt_right = r_config_get_i ( core -> config , ""asm.cmt.right"" )"		85853	2		=			
ANR	86062	Identifier	asm_cmt_right		85853	0					
ANR	86063	CallExpression	"r_config_get_i ( core -> config , ""asm.cmt.right"" )"		85853	1					
ANR	86064	Callee	r_config_get_i		85853	0					
ANR	86065	Identifier	r_config_get_i		85853	0					
ANR	86066	ArgumentList	core -> config		85853	1					
ANR	86067	Argument	core -> config		85853	0					
ANR	86068	PtrMemberAccess	core -> config		85853	0					
ANR	86069	Identifier	core		85853	0					
ANR	86070	Identifier	config		85853	1					
ANR	86071	Argument	"""asm.cmt.right"""		85853	1					
ANR	86072	PrimaryExpression	"""asm.cmt.right"""		85853	0					
ANR	86073	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.utf8"" , 0 )"	3437:2:86743:86787	85853	4	True				
ANR	86074	CallExpression	"r_config_set_i ( core -> config , ""scr.utf8"" , 0 )"		85853	0					
ANR	86075	Callee	r_config_set_i		85853	0					
ANR	86076	Identifier	r_config_set_i		85853	0					
ANR	86077	ArgumentList	core -> config		85853	1					
ANR	86078	Argument	core -> config		85853	0					
ANR	86079	PtrMemberAccess	core -> config		85853	0					
ANR	86080	Identifier	core		85853	0					
ANR	86081	Identifier	config		85853	1					
ANR	86082	Argument	"""scr.utf8"""		85853	1					
ANR	86083	PrimaryExpression	"""scr.utf8"""		85853	0					
ANR	86084	Argument	0		85853	2					
ANR	86085	PrimaryExpression	0		85853	0					
ANR	86086	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bytes"" , 0 )"	3438:2:86791:86836	85853	5	True				
ANR	86087	CallExpression	"r_config_set_i ( core -> config , ""asm.bytes"" , 0 )"		85853	0					
ANR	86088	Callee	r_config_set_i		85853	0					
ANR	86089	Identifier	r_config_set_i		85853	0					
ANR	86090	ArgumentList	core -> config		85853	1					
ANR	86091	Argument	core -> config		85853	0					
ANR	86092	PtrMemberAccess	core -> config		85853	0					
ANR	86093	Identifier	core		85853	0					
ANR	86094	Identifier	config		85853	1					
ANR	86095	Argument	"""asm.bytes"""		85853	1					
ANR	86096	PrimaryExpression	"""asm.bytes"""		85853	0					
ANR	86097	Argument	0		85853	2					
ANR	86098	PrimaryExpression	0		85853	0					
ANR	86099	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.cmt.right"" , 0 )"	3439:2:86840:86889	85853	6	True				
ANR	86100	CallExpression	"r_config_set_i ( core -> config , ""asm.cmt.right"" , 0 )"		85853	0					
ANR	86101	Callee	r_config_set_i		85853	0					
ANR	86102	Identifier	r_config_set_i		85853	0					
ANR	86103	ArgumentList	core -> config		85853	1					
ANR	86104	Argument	core -> config		85853	0					
ANR	86105	PtrMemberAccess	core -> config		85853	0					
ANR	86106	Identifier	core		85853	0					
ANR	86107	Identifier	config		85853	1					
ANR	86108	Argument	"""asm.cmt.right"""		85853	1					
ANR	86109	PrimaryExpression	"""asm.cmt.right"""		85853	0					
ANR	86110	Argument	0		85853	2					
ANR	86111	PrimaryExpression	0		85853	0					
ANR	86112	IdentifierDeclStatement	"char * str = r_core_cmd_str ( core , ""pd $r"" ) ;"	3440:2:86893:86935	85853	7	True				
ANR	86113	IdentifierDecl	"* str = r_core_cmd_str ( core , ""pd $r"" )"		85853	0					
ANR	86114	IdentifierDeclType	char *		85853	0					
ANR	86115	Identifier	str		85853	1					
ANR	86116	AssignmentExpression	"* str = r_core_cmd_str ( core , ""pd $r"" )"		85853	2		=			
ANR	86117	Identifier	str		85853	0					
ANR	86118	CallExpression	"r_core_cmd_str ( core , ""pd $r"" )"		85853	1					
ANR	86119	Callee	r_core_cmd_str		85853	0					
ANR	86120	Identifier	r_core_cmd_str		85853	0					
ANR	86121	ArgumentList	core		85853	1					
ANR	86122	Argument	core		85853	0					
ANR	86123	Identifier	core		85853	0					
ANR	86124	Argument	"""pd $r"""		85853	1					
ANR	86125	PrimaryExpression	"""pd $r"""		85853	0					
ANR	86126	IfStatement	if ( str )		85853	8					
ANR	86127	Condition	str	3441:6:86943:86945	85853	0	True				
ANR	86128	Identifier	str		85853	0					
ANR	86129	CompoundStatement		34:11:991:991	85853	1					
ANR	86130	ExpressionStatement	W ( str )	3442:3:86953:86960	85853	0	True				
ANR	86131	CallExpression	W ( str )		85853	0					
ANR	86132	Callee	W		85853	0					
ANR	86133	Identifier	W		85853	0					
ANR	86134	ArgumentList	str		85853	1					
ANR	86135	Argument	str		85853	0					
ANR	86136	Identifier	str		85853	0					
ANR	86137	ExpressionStatement	free ( str )	3443:3:86965:86975	85853	1	True				
ANR	86138	CallExpression	free ( str )		85853	0					
ANR	86139	Callee	free		85853	0					
ANR	86140	Identifier	free		85853	0					
ANR	86141	ArgumentList	str		85853	1					
ANR	86142	Argument	str		85853	0					
ANR	86143	Identifier	str		85853	0					
ANR	86144	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.utf8"" , scr_utf8 )"	3445:2:86983:87034	85853	9	True				
ANR	86145	CallExpression	"r_config_set_i ( core -> config , ""scr.utf8"" , scr_utf8 )"		85853	0					
ANR	86146	Callee	r_config_set_i		85853	0					
ANR	86147	Identifier	r_config_set_i		85853	0					
ANR	86148	ArgumentList	core -> config		85853	1					
ANR	86149	Argument	core -> config		85853	0					
ANR	86150	PtrMemberAccess	core -> config		85853	0					
ANR	86151	Identifier	core		85853	0					
ANR	86152	Identifier	config		85853	1					
ANR	86153	Argument	"""scr.utf8"""		85853	1					
ANR	86154	PrimaryExpression	"""scr.utf8"""		85853	0					
ANR	86155	Argument	scr_utf8		85853	2					
ANR	86156	Identifier	scr_utf8		85853	0					
ANR	86157	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.bytes"" , asm_bytes )"	3446:2:87038:87091	85853	10	True				
ANR	86158	CallExpression	"r_config_set_i ( core -> config , ""asm.bytes"" , asm_bytes )"		85853	0					
ANR	86159	Callee	r_config_set_i		85853	0					
ANR	86160	Identifier	r_config_set_i		85853	0					
ANR	86161	ArgumentList	core -> config		85853	1					
ANR	86162	Argument	core -> config		85853	0					
ANR	86163	PtrMemberAccess	core -> config		85853	0					
ANR	86164	Identifier	core		85853	0					
ANR	86165	Identifier	config		85853	1					
ANR	86166	Argument	"""asm.bytes"""		85853	1					
ANR	86167	PrimaryExpression	"""asm.bytes"""		85853	0					
ANR	86168	Argument	asm_bytes		85853	2					
ANR	86169	Identifier	asm_bytes		85853	0					
ANR	86170	ExpressionStatement	"r_config_set_i ( core -> config , ""asm.cmt.right"" , asm_cmt_right )"	3447:2:87095:87156	85853	11	True				
ANR	86171	CallExpression	"r_config_set_i ( core -> config , ""asm.cmt.right"" , asm_cmt_right )"		85853	0					
ANR	86172	Callee	r_config_set_i		85853	0					
ANR	86173	Identifier	r_config_set_i		85853	0					
ANR	86174	ArgumentList	core -> config		85853	1					
ANR	86175	Argument	core -> config		85853	0					
ANR	86176	PtrMemberAccess	core -> config		85853	0					
ANR	86177	Identifier	core		85853	0					
ANR	86178	Identifier	config		85853	1					
ANR	86179	Argument	"""asm.cmt.right"""		85853	1					
ANR	86180	PrimaryExpression	"""asm.cmt.right"""		85853	0					
ANR	86181	Argument	asm_cmt_right		85853	2					
ANR	86182	Identifier	asm_cmt_right		85853	0					
ANR	86183	IfStatement	if ( g -> title && * g -> title )		85853	9					
ANR	86184	Condition	g -> title && * g -> title	3449:5:87166:87186	85853	0	True				
ANR	86185	AndExpression	g -> title && * g -> title		85853	0		&&			
ANR	86186	PtrMemberAccess	g -> title		85853	0					
ANR	86187	Identifier	g		85853	0					
ANR	86188	Identifier	title		85853	1					
ANR	86189	UnaryOperationExpression	* g -> title		85853	1					
ANR	86190	UnaryOperator	*		85853	0					
ANR	86191	PtrMemberAccess	g -> title		85853	1					
ANR	86192	Identifier	g		85853	0					
ANR	86193	Identifier	title		85853	1					
ANR	86194	CompoundStatement		42:28:1232:1232	85853	1					
ANR	86195	ExpressionStatement	g -> can -> sy ++	3450:2:87193:87206	85853	0	True				
ANR	86196	PostIncDecOperationExpression	g -> can -> sy ++		85853	0					
ANR	86197	PtrMemberAccess	g -> can -> sy		85853	0					
ANR	86198	PtrMemberAccess	g -> can		85853	0					
ANR	86199	Identifier	g		85853	0					
ANR	86200	Identifier	can		85853	1					
ANR	86201	Identifier	sy		85853	1					
ANR	86202	IncDec	++		85853	1					
ANR	86203	ExpressionStatement	agraph_print_edges ( g )	3452:1:87212:87234	85853	10	True				
ANR	86204	CallExpression	agraph_print_edges ( g )		85853	0					
ANR	86205	Callee	agraph_print_edges		85853	0					
ANR	86206	Identifier	agraph_print_edges		85853	0					
ANR	86207	ArgumentList	g		85853	1					
ANR	86208	Argument	g		85853	0					
ANR	86209	Identifier	g		85853	0					
ANR	86210	ExpressionStatement	agraph_print_nodes ( g )	3453:1:87237:87259	85853	11	True				
ANR	86211	CallExpression	agraph_print_nodes ( g )		85853	0					
ANR	86212	Callee	agraph_print_nodes		85853	0					
ANR	86213	Identifier	agraph_print_nodes		85853	0					
ANR	86214	ArgumentList	g		85853	1					
ANR	86215	Argument	g		85853	0					
ANR	86216	Identifier	g		85853	0					
ANR	86217	IfStatement	if ( g -> title && * g -> title )		85853	12					
ANR	86218	Condition	g -> title && * g -> title	3454:5:87266:87286	85853	0	True				
ANR	86219	AndExpression	g -> title && * g -> title		85853	0		&&			
ANR	86220	PtrMemberAccess	g -> title		85853	0					
ANR	86221	Identifier	g		85853	0					
ANR	86222	Identifier	title		85853	1					
ANR	86223	UnaryOperationExpression	* g -> title		85853	1					
ANR	86224	UnaryOperator	*		85853	0					
ANR	86225	PtrMemberAccess	g -> title		85853	1					
ANR	86226	Identifier	g		85853	0					
ANR	86227	Identifier	title		85853	1					
ANR	86228	CompoundStatement		47:28:1332:1332	85853	1					
ANR	86229	ExpressionStatement	g -> can -> sy --	3455:2:87293:87306	85853	0	True				
ANR	86230	PostIncDecOperationExpression	g -> can -> sy --		85853	0					
ANR	86231	PtrMemberAccess	g -> can -> sy		85853	0					
ANR	86232	PtrMemberAccess	g -> can		85853	0					
ANR	86233	Identifier	g		85853	0					
ANR	86234	Identifier	can		85853	1					
ANR	86235	Identifier	sy		85853	1					
ANR	86236	IncDec	--		85853	1					
ANR	86237	ExpressionStatement	"( void ) G ( - g -> can -> sx , - g -> can -> sy )"	3458:1:87341:87376	85853	13	True				
ANR	86238	CastExpression	"( void ) G ( - g -> can -> sx , - g -> can -> sy )"		85853	0					
ANR	86239	CastTarget	void		85853	0					
ANR	86240	CallExpression	"G ( - g -> can -> sx , - g -> can -> sy )"		85853	1					
ANR	86241	Callee	G		85853	0					
ANR	86242	Identifier	G		85853	0					
ANR	86243	ArgumentList	- g -> can -> sx		85853	1					
ANR	86244	Argument	- g -> can -> sx		85853	0					
ANR	86245	UnaryOperationExpression	- g -> can -> sx		85853	0					
ANR	86246	UnaryOperator	-		85853	0					
ANR	86247	PtrMemberAccess	g -> can -> sx		85853	1					
ANR	86248	PtrMemberAccess	g -> can		85853	0					
ANR	86249	Identifier	g		85853	0					
ANR	86250	Identifier	can		85853	1					
ANR	86251	Identifier	sx		85853	1					
ANR	86252	Argument	- g -> can -> sy		85853	1					
ANR	86253	UnaryOperationExpression	- g -> can -> sy		85853	0					
ANR	86254	UnaryOperator	-		85853	0					
ANR	86255	PtrMemberAccess	g -> can -> sy		85853	1					
ANR	86256	PtrMemberAccess	g -> can		85853	0					
ANR	86257	Identifier	g		85853	0					
ANR	86258	Identifier	can		85853	1					
ANR	86259	Identifier	sy		85853	1					
ANR	86260	IfStatement	if ( ! g -> is_tiny )		85853	14					
ANR	86261	Condition	! g -> is_tiny	3459:5:87383:87393	85853	0	True				
ANR	86262	UnaryOperationExpression	! g -> is_tiny		85853	0					
ANR	86263	UnaryOperator	!		85853	0					
ANR	86264	PtrMemberAccess	g -> is_tiny		85853	1					
ANR	86265	Identifier	g		85853	0					
ANR	86266	Identifier	is_tiny		85853	1					
ANR	86267	CompoundStatement		52:18:1439:1439	85853	1					
ANR	86268	ExpressionStatement	W ( g -> title )	3460:16:87414:87426	85853	0	True				
ANR	86269	CallExpression	W ( g -> title )		85853	0					
ANR	86270	Callee	W		85853	0					
ANR	86271	Identifier	W		85853	0					
ANR	86272	ArgumentList	g -> title		85853	1					
ANR	86273	Argument	g -> title		85853	0					
ANR	86274	PtrMemberAccess	g -> title		85853	0					
ANR	86275	Identifier	g		85853	0					
ANR	86276	Identifier	title		85853	1					
ANR	86277	IfStatement	if ( is_interactive && g -> title )		85853	15					
ANR	86278	Condition	is_interactive && g -> title	3462:5:87436:87461	85853	0	True				
ANR	86279	AndExpression	is_interactive && g -> title		85853	0		&&			
ANR	86280	Identifier	is_interactive		85853	0					
ANR	86281	PtrMemberAccess	g -> title		85853	1					
ANR	86282	Identifier	g		85853	0					
ANR	86283	Identifier	title		85853	1					
ANR	86284	CompoundStatement		56:2:1511:1544	85853	1					
ANR	86285	IdentifierDeclStatement	int title_len = strlen ( g -> title ) ;	3463:2:87468:87501	85853	0	True				
ANR	86286	IdentifierDecl	title_len = strlen ( g -> title )		85853	0					
ANR	86287	IdentifierDeclType	int		85853	0					
ANR	86288	Identifier	title_len		85853	1					
ANR	86289	AssignmentExpression	title_len = strlen ( g -> title )		85853	2		=			
ANR	86290	Identifier	title_len		85853	0					
ANR	86291	CallExpression	strlen ( g -> title )		85853	1					
ANR	86292	Callee	strlen		85853	0					
ANR	86293	Identifier	strlen		85853	0					
ANR	86294	ArgumentList	g -> title		85853	1					
ANR	86295	Argument	g -> title		85853	0					
ANR	86296	PtrMemberAccess	g -> title		85853	0					
ANR	86297	Identifier	g		85853	0					
ANR	86298	Identifier	title		85853	1					
ANR	86299	ExpressionStatement	"r_cons_canvas_fill ( g -> can , - g -> can -> sx + title_len , - g -> can -> sy , w - title_len , 1 , ' ' )"	3464:2:87505:87596	85853	1	True				
ANR	86300	CallExpression	"r_cons_canvas_fill ( g -> can , - g -> can -> sx + title_len , - g -> can -> sy , w - title_len , 1 , ' ' )"		85853	0					
ANR	86301	Callee	r_cons_canvas_fill		85853	0					
ANR	86302	Identifier	r_cons_canvas_fill		85853	0					
ANR	86303	ArgumentList	g -> can		85853	1					
ANR	86304	Argument	g -> can		85853	0					
ANR	86305	PtrMemberAccess	g -> can		85853	0					
ANR	86306	Identifier	g		85853	0					
ANR	86307	Identifier	can		85853	1					
ANR	86308	Argument	- g -> can -> sx + title_len		85853	1					
ANR	86309	AdditiveExpression	- g -> can -> sx + title_len		85853	0		+			
ANR	86310	UnaryOperationExpression	- g -> can -> sx		85853	0					
ANR	86311	UnaryOperator	-		85853	0					
ANR	86312	PtrMemberAccess	g -> can -> sx		85853	1					
ANR	86313	PtrMemberAccess	g -> can		85853	0					
ANR	86314	Identifier	g		85853	0					
ANR	86315	Identifier	can		85853	1					
ANR	86316	Identifier	sx		85853	1					
ANR	86317	Identifier	title_len		85853	1					
ANR	86318	Argument	- g -> can -> sy		85853	2					
ANR	86319	UnaryOperationExpression	- g -> can -> sy		85853	0					
ANR	86320	UnaryOperator	-		85853	0					
ANR	86321	PtrMemberAccess	g -> can -> sy		85853	1					
ANR	86322	PtrMemberAccess	g -> can		85853	0					
ANR	86323	Identifier	g		85853	0					
ANR	86324	Identifier	can		85853	1					
ANR	86325	Identifier	sy		85853	1					
ANR	86326	Argument	w - title_len		85853	3					
ANR	86327	AdditiveExpression	w - title_len		85853	0		-			
ANR	86328	Identifier	w		85853	0					
ANR	86329	Identifier	title_len		85853	1					
ANR	86330	Argument	1		85853	4					
ANR	86331	PrimaryExpression	1		85853	0					
ANR	86332	Argument	' '		85853	5					
ANR	86333	PrimaryExpression	' '		85853	0					
ANR	86334	ExpressionStatement	r_cons_canvas_print_region ( g -> can )	3468:1:87603:87638	85853	16	True				
ANR	86335	CallExpression	r_cons_canvas_print_region ( g -> can )		85853	0					
ANR	86336	Callee	r_cons_canvas_print_region		85853	0					
ANR	86337	Identifier	r_cons_canvas_print_region		85853	0					
ANR	86338	ArgumentList	g -> can		85853	1					
ANR	86339	Argument	g -> can		85853	0					
ANR	86340	PtrMemberAccess	g -> can		85853	0					
ANR	86341	Identifier	g		85853	0					
ANR	86342	Identifier	can		85853	1					
ANR	86343	IfStatement	if ( is_interactive )		85853	17					
ANR	86344	Condition	is_interactive	3470:5:87646:87659	85853	0	True				
ANR	86345	Identifier	is_interactive		85853	0					
ANR	86346	CompoundStatement		66:2:1795:1817	85853	1					
ANR	86347	ExpressionStatement	r_cons_newline ( )	3471:2:87666:87683	85853	0	True				
ANR	86348	CallExpression	r_cons_newline ( )		85853	0					
ANR	86349	Callee	r_cons_newline		85853	0					
ANR	86350	Identifier	r_cons_newline		85853	0					
ANR	86351	ArgumentList			85853	1					
ANR	86352	IdentifierDeclStatement	"const char * cmdv = r_config_get ( core -> config , ""cmd.gprompt"" ) ;"	3472:2:87687:87748	85853	1	True				
ANR	86353	IdentifierDecl	"* cmdv = r_config_get ( core -> config , ""cmd.gprompt"" )"		85853	0					
ANR	86354	IdentifierDeclType	const char *		85853	0					
ANR	86355	Identifier	cmdv		85853	1					
ANR	86356	AssignmentExpression	"* cmdv = r_config_get ( core -> config , ""cmd.gprompt"" )"		85853	2		=			
ANR	86357	Identifier	cmdv		85853	0					
ANR	86358	CallExpression	"r_config_get ( core -> config , ""cmd.gprompt"" )"		85853	1					
ANR	86359	Callee	r_config_get		85853	0					
ANR	86360	Identifier	r_config_get		85853	0					
ANR	86361	ArgumentList	core -> config		85853	1					
ANR	86362	Argument	core -> config		85853	0					
ANR	86363	PtrMemberAccess	core -> config		85853	0					
ANR	86364	Identifier	core		85853	0					
ANR	86365	Identifier	config		85853	1					
ANR	86366	Argument	"""cmd.gprompt"""		85853	1					
ANR	86367	PrimaryExpression	"""cmd.gprompt"""		85853	0					
ANR	86368	IdentifierDeclStatement	bool mustFlush = false ;	3473:2:87752:87774	85853	2	True				
ANR	86369	IdentifierDecl	mustFlush = false		85853	0					
ANR	86370	IdentifierDeclType	bool		85853	0					
ANR	86371	Identifier	mustFlush		85853	1					
ANR	86372	AssignmentExpression	mustFlush = false		85853	2		=			
ANR	86373	Identifier	false		85853	0					
ANR	86374	Identifier	false		85853	1					
ANR	86375	ExpressionStatement	r_cons_visual_flush ( )	3474:2:87778:87800	85853	3	True				
ANR	86376	CallExpression	r_cons_visual_flush ( )		85853	0					
ANR	86377	Callee	r_cons_visual_flush		85853	0					
ANR	86378	Identifier	r_cons_visual_flush		85853	0					
ANR	86379	ArgumentList			85853	1					
ANR	86380	IfStatement	if ( cmdv && * cmdv )		85853	4					
ANR	86381	Condition	cmdv && * cmdv	3475:6:87808:87820	85853	0	True				
ANR	86382	AndExpression	cmdv && * cmdv		85853	0		&&			
ANR	86383	Identifier	cmdv		85853	0					
ANR	86384	UnaryOperationExpression	* cmdv		85853	1					
ANR	86385	UnaryOperator	*		85853	0					
ANR	86386	Identifier	cmdv		85853	1					
ANR	86387	CompoundStatement		68:21:1866:1866	85853	1					
ANR	86388	ExpressionStatement	"r_cons_gotoxy ( 0 , 2 )"	3476:3:87828:87848	85853	0	True				
ANR	86389	CallExpression	"r_cons_gotoxy ( 0 , 2 )"		85853	0					
ANR	86390	Callee	r_cons_gotoxy		85853	0					
ANR	86391	Identifier	r_cons_gotoxy		85853	0					
ANR	86392	ArgumentList	0		85853	1					
ANR	86393	Argument	0		85853	0					
ANR	86394	PrimaryExpression	0		85853	0					
ANR	86395	Argument	2		85853	1					
ANR	86396	PrimaryExpression	2		85853	0					
ANR	86397	ExpressionStatement	r_cons_strcat ( Color_RESET )	3477:3:87853:87880	85853	1	True				
ANR	86398	CallExpression	r_cons_strcat ( Color_RESET )		85853	0					
ANR	86399	Callee	r_cons_strcat		85853	0					
ANR	86400	Identifier	r_cons_strcat		85853	0					
ANR	86401	ArgumentList	Color_RESET		85853	1					
ANR	86402	Argument	Color_RESET		85853	0					
ANR	86403	Identifier	Color_RESET		85853	0					
ANR	86404	ExpressionStatement	"r_core_cmd0 ( core , cmdv )"	3478:3:87885:87909	85853	2	True				
ANR	86405	CallExpression	"r_core_cmd0 ( core , cmdv )"		85853	0					
ANR	86406	Callee	r_core_cmd0		85853	0					
ANR	86407	Identifier	r_core_cmd0		85853	0					
ANR	86408	ArgumentList	core		85853	1					
ANR	86409	Argument	core		85853	0					
ANR	86410	Identifier	core		85853	0					
ANR	86411	Argument	cmdv		85853	1					
ANR	86412	Identifier	cmdv		85853	0					
ANR	86413	ExpressionStatement	mustFlush = true	3479:3:87914:87930	85853	3	True				
ANR	86414	AssignmentExpression	mustFlush = true		85853	0		=			
ANR	86415	Identifier	mustFlush		85853	0					
ANR	86416	Identifier	true		85853	1					
ANR	86417	IfStatement	if ( core && core -> scr_gadgets )		85853	5					
ANR	86418	Condition	core && core -> scr_gadgets	3481:6:87942:87966	85853	0	True				
ANR	86419	AndExpression	core && core -> scr_gadgets		85853	0		&&			
ANR	86420	Identifier	core		85853	0					
ANR	86421	PtrMemberAccess	core -> scr_gadgets		85853	1					
ANR	86422	Identifier	core		85853	0					
ANR	86423	Identifier	scr_gadgets		85853	1					
ANR	86424	CompoundStatement		74:33:2012:2012	85853	1					
ANR	86425	ExpressionStatement	"r_core_cmd0 ( core , ""pg"" )"	3482:3:87974:87998	85853	0	True				
ANR	86426	CallExpression	"r_core_cmd0 ( core , ""pg"" )"		85853	0					
ANR	86427	Callee	r_core_cmd0		85853	0					
ANR	86428	Identifier	r_core_cmd0		85853	0					
ANR	86429	ArgumentList	core		85853	1					
ANR	86430	Argument	core		85853	0					
ANR	86431	Identifier	core		85853	0					
ANR	86432	Argument	"""pg"""		85853	1					
ANR	86433	PrimaryExpression	"""pg"""		85853	0					
ANR	86434	IfStatement	if ( mustFlush )		85853	6					
ANR	86435	Condition	mustFlush	3484:6:88010:88018	85853	0	True				
ANR	86436	Identifier	mustFlush		85853	0					
ANR	86437	CompoundStatement		77:17:2064:2064	85853	1					
ANR	86438	ExpressionStatement	r_cons_flush ( )	3485:3:88026:88041	85853	0	True				
ANR	86439	CallExpression	r_cons_flush ( )		85853	0					
ANR	86440	Callee	r_cons_flush		85853	0					
ANR	86441	Identifier	r_cons_flush		85853	0					
ANR	86442	ArgumentList			85853	1					
ANR	86443	ReturnStatement	return true ;	3488:1:88051:88062	85853	18	True				
ANR	86444	Identifier	true		85853	0					
ANR	86445	ReturnType	static int		85853	1					
ANR	86446	Identifier	agraph_print		85853	2					
ANR	86447	ParameterList	"RAGraph * g , int is_interactive , RCore * core , RAnalFunction * fcn"		85853	3					
ANR	86448	Parameter	RAGraph * g	3408:24:85891:85900	85853	0	True				
ANR	86449	ParameterType	RAGraph *		85853	0					
ANR	86450	Identifier	g		85853	1					
ANR	86451	Parameter	int is_interactive	3408:36:85903:85920	85853	1	True				
ANR	86452	ParameterType	int		85853	0					
ANR	86453	Identifier	is_interactive		85853	1					
ANR	86454	Parameter	RCore * core	3408:56:85923:85933	85853	2	True				
ANR	86455	ParameterType	RCore *		85853	0					
ANR	86456	Identifier	core		85853	1					
ANR	86457	Parameter	RAnalFunction * fcn	3408:69:85936:85953	85853	3	True				
ANR	86458	ParameterType	RAnalFunction *		85853	0					
ANR	86459	Identifier	fcn		85853	1					
ANR	86460	CFGEntryNode	ENTRY		85853		True				
ANR	86461	CFGExitNode	EXIT		85853		True				
ANR	86462	Symbol	r_core_cmd_str		85853						
ANR	86463	Symbol	mustFlush		85853						
ANR	86464	Symbol	scr_utf8		85853						
ANR	86465	Symbol	* core		85853						
ANR	86466	Symbol	r_config_get		85853						
ANR	86467	Symbol	Color_RESET		85853						
ANR	86468	Symbol	g -> h		85853						
ANR	86469	Symbol	core -> scr_gadgets		85853						
ANR	86470	Symbol	r_cons_canvas_resize		85853						
ANR	86471	Symbol	* g -> can		85853						
ANR	86472	Symbol	fcn		85853						
ANR	86473	Symbol	strlen		85853						
ANR	86474	Symbol	g -> is_tiny		85853						
ANR	86475	Symbol	cmdv		85853						
ANR	86476	Symbol	title_len		85853						
ANR	86477	Symbol	g -> can		85853						
ANR	86478	Symbol	g -> can -> sx		85853						
ANR	86479	Symbol	g -> can -> sy		85853						
ANR	86480	Symbol	ret		85853						
ANR	86481	Symbol	core -> config		85853						
ANR	86482	Symbol	check_changes		85853						
ANR	86483	Symbol	g -> title		85853						
ANR	86484	Symbol	* * g		85853						
ANR	86485	Symbol	* g -> title		85853						
ANR	86486	Symbol	r_cons_get_size		85853						
ANR	86487	Symbol	g		85853						
ANR	86488	Symbol	is_interactive		85853						
ANR	86489	Symbol	h		85853						
ANR	86490	Symbol	false		85853						
ANR	86491	Symbol	& h		85853						
ANR	86492	Symbol	* cmdv		85853						
ANR	86493	Symbol	str		85853						
ANR	86494	Symbol	core		85853						
ANR	86495	Symbol	* g		85853						
ANR	86496	Symbol	asm_bytes		85853						
ANR	86497	Symbol	asm_cmt_right		85853						
ANR	86498	Symbol	w		85853						
ANR	86499	Symbol	r_config_get_i		85853						
ANR	86500	Symbol	g -> y		85853						
ANR	86501	Symbol	g -> is_dis		85853						
ANR	86502	Symbol	true		85853						
ANR	86503	Symbol	g -> x		85853						
ANR	86504	Symbol	g -> w		85853						
ANR	86505	Function	agraph_refresh	3491:0:88067:89807							
ANR	86506	FunctionDef	agraph_refresh (struct agraph_refresh_data * grd)		86505	0					
ANR	86507	CompoundStatement		3491:59:88126:89807	86505	0					
ANR	86508	IfStatement	if ( ! grd )		86505	0					
ANR	86509	Condition	! grd	3492:5:88133:88136	86505	0	True				
ANR	86510	UnaryOperationExpression	! grd		86505	0					
ANR	86511	UnaryOperator	!		86505	0					
ANR	86512	Identifier	grd		86505	1					
ANR	86513	CompoundStatement		2:11:12:12	86505	1					
ANR	86514	ReturnStatement	return 0 ;	3493:2:88143:88151	86505	0	True				
ANR	86515	PrimaryExpression	0		86505	0					
ANR	86516	ExpressionStatement	r_cons_singleton ( ) -> event_data = grd	3495:1:88157:88194	86505	1	True				
ANR	86517	AssignmentExpression	r_cons_singleton ( ) -> event_data = grd		86505	0		=			
ANR	86518	PtrMemberAccess	r_cons_singleton ( ) -> event_data		86505	0					
ANR	86519	CallExpression	r_cons_singleton ( )		86505	0					
ANR	86520	Callee	r_cons_singleton		86505	0					
ANR	86521	Identifier	r_cons_singleton		86505	0					
ANR	86522	ArgumentList			86505	1					
ANR	86523	Identifier	event_data		86505	1					
ANR	86524	Identifier	grd		86505	1					
ANR	86525	IdentifierDeclStatement	RCore * core = grd -> core ;	3496:1:88197:88220	86505	2	True				
ANR	86526	IdentifierDecl	* core = grd -> core		86505	0					
ANR	86527	IdentifierDeclType	RCore *		86505	0					
ANR	86528	Identifier	core		86505	1					
ANR	86529	AssignmentExpression	* core = grd -> core		86505	2		=			
ANR	86530	Identifier	core		86505	0					
ANR	86531	PtrMemberAccess	grd -> core		86505	1					
ANR	86532	Identifier	grd		86505	0					
ANR	86533	Identifier	core		86505	1					
ANR	86534	IdentifierDeclStatement	RAGraph * g = grd -> g ;	3497:1:88223:88242	86505	3	True				
ANR	86535	IdentifierDecl	* g = grd -> g		86505	0					
ANR	86536	IdentifierDeclType	RAGraph *		86505	0					
ANR	86537	Identifier	g		86505	1					
ANR	86538	AssignmentExpression	* g = grd -> g		86505	2		=			
ANR	86539	Identifier	g		86505	0					
ANR	86540	PtrMemberAccess	grd -> g		86505	1					
ANR	86541	Identifier	grd		86505	0					
ANR	86542	Identifier	g		86505	1					
ANR	86543	IdentifierDeclStatement	RAnalFunction * f = NULL ;	3498:1:88245:88268	86505	4	True				
ANR	86544	IdentifierDecl	* f = NULL		86505	0					
ANR	86545	IdentifierDeclType	RAnalFunction *		86505	0					
ANR	86546	Identifier	f		86505	1					
ANR	86547	AssignmentExpression	* f = NULL		86505	2		=			
ANR	86548	Identifier	NULL		86505	0					
ANR	86549	Identifier	NULL		86505	1					
ANR	86550	IdentifierDeclStatement	RAnalFunction * * fcn = grd -> fcn ;	3499:1:88271:88301	86505	5	True				
ANR	86551	IdentifierDecl	* * fcn = grd -> fcn		86505	0					
ANR	86552	IdentifierDeclType	RAnalFunction * *		86505	0					
ANR	86553	Identifier	fcn		86505	1					
ANR	86554	AssignmentExpression	* * fcn = grd -> fcn		86505	2		=			
ANR	86555	Identifier	fcn		86505	0					
ANR	86556	PtrMemberAccess	grd -> fcn		86505	1					
ANR	86557	Identifier	grd		86505	0					
ANR	86558	Identifier	fcn		86505	1					
ANR	86559	IfStatement	if ( ! fcn )		86505	6					
ANR	86560	Condition	! fcn	3501:5:88309:88312	86505	0	True				
ANR	86561	UnaryOperationExpression	! fcn		86505	0					
ANR	86562	UnaryOperator	!		86505	0					
ANR	86563	Identifier	fcn		86505	1					
ANR	86564	CompoundStatement		11:11:188:188	86505	1					
ANR	86565	ReturnStatement	"return agraph_print ( g , grd -> fs , core , NULL ) ;"	3502:2:88319:88363	86505	0	True				
ANR	86566	CallExpression	"agraph_print ( g , grd -> fs , core , NULL )"		86505	0					
ANR	86567	Callee	agraph_print		86505	0					
ANR	86568	Identifier	agraph_print		86505	0					
ANR	86569	ArgumentList	g		86505	1					
ANR	86570	Argument	g		86505	0					
ANR	86571	Identifier	g		86505	0					
ANR	86572	Argument	grd -> fs		86505	1					
ANR	86573	PtrMemberAccess	grd -> fs		86505	0					
ANR	86574	Identifier	grd		86505	0					
ANR	86575	Identifier	fs		86505	1					
ANR	86576	Argument	core		86505	2					
ANR	86577	Identifier	core		86505	0					
ANR	86578	Argument	NULL		86505	3					
ANR	86579	Identifier	NULL		86505	0					
ANR	86580	IfStatement	if ( g -> is_instep && core -> io -> debug )		86505	7					
ANR	86581	Condition	g -> is_instep && core -> io -> debug	3506:5:88432:88462	86505	0	True				
ANR	86582	AndExpression	g -> is_instep && core -> io -> debug		86505	0		&&			
ANR	86583	PtrMemberAccess	g -> is_instep		86505	0					
ANR	86584	Identifier	g		86505	0					
ANR	86585	Identifier	is_instep		86505	1					
ANR	86586	PtrMemberAccess	core -> io -> debug		86505	1					
ANR	86587	PtrMemberAccess	core -> io		86505	0					
ANR	86588	Identifier	core		86505	0					
ANR	86589	Identifier	io		86505	1					
ANR	86590	Identifier	debug		86505	1					
ANR	86591	CompoundStatement		24:2:643:673	86505	1					
ANR	86592	IdentifierDeclStatement	"const char * pc = r_reg_get_name ( core -> dbg -> reg , R_REG_NAME_PC ) ;"	3508:2:88512:88575	86505	0	True				
ANR	86593	IdentifierDecl	"* pc = r_reg_get_name ( core -> dbg -> reg , R_REG_NAME_PC )"		86505	0					
ANR	86594	IdentifierDeclType	const char *		86505	0					
ANR	86595	Identifier	pc		86505	1					
ANR	86596	AssignmentExpression	"* pc = r_reg_get_name ( core -> dbg -> reg , R_REG_NAME_PC )"		86505	2		=			
ANR	86597	Identifier	pc		86505	0					
ANR	86598	CallExpression	"r_reg_get_name ( core -> dbg -> reg , R_REG_NAME_PC )"		86505	1					
ANR	86599	Callee	r_reg_get_name		86505	0					
ANR	86600	Identifier	r_reg_get_name		86505	0					
ANR	86601	ArgumentList	core -> dbg -> reg		86505	1					
ANR	86602	Argument	core -> dbg -> reg		86505	0					
ANR	86603	PtrMemberAccess	core -> dbg -> reg		86505	0					
ANR	86604	PtrMemberAccess	core -> dbg		86505	0					
ANR	86605	Identifier	core		86505	0					
ANR	86606	Identifier	dbg		86505	1					
ANR	86607	Identifier	reg		86505	1					
ANR	86608	Argument	R_REG_NAME_PC		86505	1					
ANR	86609	Identifier	R_REG_NAME_PC		86505	0					
ANR	86610	IdentifierDeclStatement	"RRegItem * r = r_reg_get ( core -> dbg -> reg , pc , - 1 ) ;"	3509:2:88579:88627	86505	1	True				
ANR	86611	IdentifierDecl	"* r = r_reg_get ( core -> dbg -> reg , pc , - 1 )"		86505	0					
ANR	86612	IdentifierDeclType	RRegItem *		86505	0					
ANR	86613	Identifier	r		86505	1					
ANR	86614	AssignmentExpression	"* r = r_reg_get ( core -> dbg -> reg , pc , - 1 )"		86505	2		=			
ANR	86615	Identifier	r		86505	0					
ANR	86616	CallExpression	"r_reg_get ( core -> dbg -> reg , pc , - 1 )"		86505	1					
ANR	86617	Callee	r_reg_get		86505	0					
ANR	86618	Identifier	r_reg_get		86505	0					
ANR	86619	ArgumentList	core -> dbg -> reg		86505	1					
ANR	86620	Argument	core -> dbg -> reg		86505	0					
ANR	86621	PtrMemberAccess	core -> dbg -> reg		86505	0					
ANR	86622	PtrMemberAccess	core -> dbg		86505	0					
ANR	86623	Identifier	core		86505	0					
ANR	86624	Identifier	dbg		86505	1					
ANR	86625	Identifier	reg		86505	1					
ANR	86626	Argument	pc		86505	1					
ANR	86627	Identifier	pc		86505	0					
ANR	86628	Argument	- 1		86505	2					
ANR	86629	UnaryOperationExpression	- 1		86505	0					
ANR	86630	UnaryOperator	-		86505	0					
ANR	86631	PrimaryExpression	1		86505	1					
ANR	86632	IdentifierDeclStatement	"ut64 addr = r_reg_get_value ( core -> dbg -> reg , r ) ;"	3510:2:88631:88678	86505	2	True				
ANR	86633	IdentifierDecl	"addr = r_reg_get_value ( core -> dbg -> reg , r )"		86505	0					
ANR	86634	IdentifierDeclType	ut64		86505	0					
ANR	86635	Identifier	addr		86505	1					
ANR	86636	AssignmentExpression	"addr = r_reg_get_value ( core -> dbg -> reg , r )"		86505	2		=			
ANR	86637	Identifier	addr		86505	0					
ANR	86638	CallExpression	"r_reg_get_value ( core -> dbg -> reg , r )"		86505	1					
ANR	86639	Callee	r_reg_get_value		86505	0					
ANR	86640	Identifier	r_reg_get_value		86505	0					
ANR	86641	ArgumentList	core -> dbg -> reg		86505	1					
ANR	86642	Argument	core -> dbg -> reg		86505	0					
ANR	86643	PtrMemberAccess	core -> dbg -> reg		86505	0					
ANR	86644	PtrMemberAccess	core -> dbg		86505	0					
ANR	86645	Identifier	core		86505	0					
ANR	86646	Identifier	dbg		86505	1					
ANR	86647	Identifier	reg		86505	1					
ANR	86648	Argument	r		86505	1					
ANR	86649	Identifier	r		86505	0					
ANR	86650	IdentifierDeclStatement	RANode * acur = get_anode ( g -> curnode ) ;	3511:2:88682:88719	86505	3	True				
ANR	86651	IdentifierDecl	* acur = get_anode ( g -> curnode )		86505	0					
ANR	86652	IdentifierDeclType	RANode *		86505	0					
ANR	86653	Identifier	acur		86505	1					
ANR	86654	AssignmentExpression	* acur = get_anode ( g -> curnode )		86505	2		=			
ANR	86655	Identifier	acur		86505	0					
ANR	86656	CallExpression	get_anode ( g -> curnode )		86505	1					
ANR	86657	Callee	get_anode		86505	0					
ANR	86658	Identifier	get_anode		86505	0					
ANR	86659	ArgumentList	g -> curnode		86505	1					
ANR	86660	Argument	g -> curnode		86505	0					
ANR	86661	PtrMemberAccess	g -> curnode		86505	0					
ANR	86662	Identifier	g		86505	0					
ANR	86663	Identifier	curnode		86505	1					
ANR	86664	ExpressionStatement	"addr = r_core_anal_get_bbaddr ( core , addr )"	3513:2:88724:88766	86505	4	True				
ANR	86665	AssignmentExpression	"addr = r_core_anal_get_bbaddr ( core , addr )"		86505	0		=			
ANR	86666	Identifier	addr		86505	0					
ANR	86667	CallExpression	"r_core_anal_get_bbaddr ( core , addr )"		86505	1					
ANR	86668	Callee	r_core_anal_get_bbaddr		86505	0					
ANR	86669	Identifier	r_core_anal_get_bbaddr		86505	0					
ANR	86670	ArgumentList	core		86505	1					
ANR	86671	Argument	core		86505	0					
ANR	86672	Identifier	core		86505	0					
ANR	86673	Argument	addr		86505	1					
ANR	86674	Identifier	addr		86505	0					
ANR	86675	IdentifierDeclStatement	char * title = get_title ( addr ) ;	3514:2:88770:88800	86505	5	True				
ANR	86676	IdentifierDecl	* title = get_title ( addr )		86505	0					
ANR	86677	IdentifierDeclType	char *		86505	0					
ANR	86678	Identifier	title		86505	1					
ANR	86679	AssignmentExpression	* title = get_title ( addr )		86505	2		=			
ANR	86680	Identifier	title		86505	0					
ANR	86681	CallExpression	get_title ( addr )		86505	1					
ANR	86682	Callee	get_title		86505	0					
ANR	86683	Identifier	get_title		86505	0					
ANR	86684	ArgumentList	addr		86505	1					
ANR	86685	Argument	addr		86505	0					
ANR	86686	Identifier	addr		86505	0					
ANR	86687	IfStatement	"if ( ! acur || strcmp ( acur -> title , title ) )"		86505	6					
ANR	86688	Condition	"! acur || strcmp ( acur -> title , title )"	3515:6:88808:88843	86505	0	True				
ANR	86689	OrExpression	"! acur || strcmp ( acur -> title , title )"		86505	0		||			
ANR	86690	UnaryOperationExpression	! acur		86505	0					
ANR	86691	UnaryOperator	!		86505	0					
ANR	86692	Identifier	acur		86505	1					
ANR	86693	CallExpression	"strcmp ( acur -> title , title )"		86505	1					
ANR	86694	Callee	strcmp		86505	0					
ANR	86695	Identifier	strcmp		86505	0					
ANR	86696	ArgumentList	acur -> title		86505	1					
ANR	86697	Argument	acur -> title		86505	0					
ANR	86698	PtrMemberAccess	acur -> title		86505	0					
ANR	86699	Identifier	acur		86505	0					
ANR	86700	Identifier	title		86505	1					
ANR	86701	Argument	title		86505	1					
ANR	86702	Identifier	title		86505	0					
ANR	86703	CompoundStatement		25:44:719:719	86505	1					
ANR	86704	ExpressionStatement	"r_core_cmd0 ( core , ""sr PC"" )"	3516:3:88851:88878	86505	0	True				
ANR	86705	CallExpression	"r_core_cmd0 ( core , ""sr PC"" )"		86505	0					
ANR	86706	Callee	r_core_cmd0		86505	0					
ANR	86707	Identifier	r_core_cmd0		86505	0					
ANR	86708	ArgumentList	core		86505	1					
ANR	86709	Argument	core		86505	0					
ANR	86710	Identifier	core		86505	0					
ANR	86711	Argument	"""sr PC"""		86505	1					
ANR	86712	PrimaryExpression	"""sr PC"""		86505	0					
ANR	86713	ExpressionStatement	free ( title )	3518:2:88886:88898	86505	7	True				
ANR	86714	CallExpression	free ( title )		86505	0					
ANR	86715	Callee	free		86505	0					
ANR	86716	Identifier	free		86505	0					
ANR	86717	ArgumentList	title		86505	1					
ANR	86718	Argument	title		86505	0					
ANR	86719	Identifier	title		86505	0					
ANR	86720	ExpressionStatement	g -> is_instep = false	3519:2:88902:88922	86505	8	True				
ANR	86721	AssignmentExpression	g -> is_instep = false		86505	0		=			
ANR	86722	PtrMemberAccess	g -> is_instep		86505	0					
ANR	86723	Identifier	g		86505	0					
ANR	86724	Identifier	is_instep		86505	1					
ANR	86725	Identifier	false		86505	1					
ANR	86726	IfStatement	if ( grd -> follow_offset )		86505	8					
ANR	86727	Condition	grd -> follow_offset	3522:5:88933:88950	86505	0	True				
ANR	86728	PtrMemberAccess	grd -> follow_offset		86505	0					
ANR	86729	Identifier	grd		86505	0					
ANR	86730	Identifier	follow_offset		86505	1					
ANR	86731	CompoundStatement		32:25:826:826	86505	1					
ANR	86732	IfStatement	"if ( r_io_is_valid_offset ( core -> io , core -> offset , 0 ) )"		86505	0					
ANR	86733	Condition	"r_io_is_valid_offset ( core -> io , core -> offset , 0 )"	3523:6:88961:89008	86505	0	True				
ANR	86734	CallExpression	"r_io_is_valid_offset ( core -> io , core -> offset , 0 )"		86505	0					
ANR	86735	Callee	r_io_is_valid_offset		86505	0					
ANR	86736	Identifier	r_io_is_valid_offset		86505	0					
ANR	86737	ArgumentList	core -> io		86505	1					
ANR	86738	Argument	core -> io		86505	0					
ANR	86739	PtrMemberAccess	core -> io		86505	0					
ANR	86740	Identifier	core		86505	0					
ANR	86741	Identifier	io		86505	1					
ANR	86742	Argument	core -> offset		86505	1					
ANR	86743	PtrMemberAccess	core -> offset		86505	0					
ANR	86744	Identifier	core		86505	0					
ANR	86745	Identifier	offset		86505	1					
ANR	86746	Argument	0		86505	2					
ANR	86747	PrimaryExpression	0		86505	0					
ANR	86748	CompoundStatement		33:56:884:884	86505	1					
ANR	86749	ExpressionStatement	"f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"	3524:3:89016:89067	86505	0	True				
ANR	86750	AssignmentExpression	"f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		86505	0		=			
ANR	86751	Identifier	f		86505	0					
ANR	86752	CallExpression	"r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		86505	1					
ANR	86753	Callee	r_anal_get_fcn_in		86505	0					
ANR	86754	Identifier	r_anal_get_fcn_in		86505	0					
ANR	86755	ArgumentList	core -> anal		86505	1					
ANR	86756	Argument	core -> anal		86505	0					
ANR	86757	PtrMemberAccess	core -> anal		86505	0					
ANR	86758	Identifier	core		86505	0					
ANR	86759	Identifier	anal		86505	1					
ANR	86760	Argument	core -> offset		86505	1					
ANR	86761	PtrMemberAccess	core -> offset		86505	0					
ANR	86762	Identifier	core		86505	0					
ANR	86763	Identifier	offset		86505	1					
ANR	86764	Argument	0		86505	2					
ANR	86765	PrimaryExpression	0		86505	0					
ANR	86766	IfStatement	if ( ! f )		86505	1					
ANR	86767	Condition	! f	3525:7:89076:89077	86505	0	True				
ANR	86768	UnaryOperationExpression	! f		86505	0					
ANR	86769	UnaryOperator	!		86505	0					
ANR	86770	Identifier	f		86505	1					
ANR	86771	CompoundStatement		35:11:953:953	86505	1					
ANR	86772	IfStatement	if ( ! g -> is_dis )		86505	0					
ANR	86773	Condition	! g -> is_dis	3526:8:89090:89099	86505	0	True				
ANR	86774	UnaryOperationExpression	! g -> is_dis		86505	0					
ANR	86775	UnaryOperator	!		86505	0					
ANR	86776	PtrMemberAccess	g -> is_dis		86505	1					
ANR	86777	Identifier	g		86505	0					
ANR	86778	Identifier	is_dis		86505	1					
ANR	86779	CompoundStatement		36:20:975:975	86505	1					
ANR	86780	Statement	if	3527:5:89109:89110	86505	0	True				
ANR	86781	Statement	(	3527:8:89112:89112	86505	1	True				
ANR	86782	Statement	!	3527:9:89113:89113	86505	2	True				
ANR	86783	Statement	r_cons_yesno	3527:10:89114:89125	86505	3	True				
ANR	86784	Statement	(	3527:23:89127:89127	86505	4	True				
ANR	86785	Statement	'y'	3527:24:89128:89130	86505	5	True				
ANR	86786	Statement	","	3527:27:89131:89131	86505	6	True				
ANR	86787	Statement	"""\\rNo function at 0x%08"""	3527:29:89133:89156	86505	7	True				
ANR	86788	Statement	PFMT64x	3527:53:89157:89163	86505	8	True				
ANR	86789	Statement	""". Define it here (Y/n)? """	3527:60:89164:89189	86505	9	True				
ANR	86790	Statement	","	3527:86:89190:89190	86505	10	True				
ANR	86791	Statement	core	3527:88:89192:89195	86505	11	True				
ANR	86792	Statement	->	3527:92:89196:89197	86505	12	True				
ANR	86793	Statement	offset	3527:94:89198:89203	86505	13	True				
ANR	86794	Statement	)	3527:100:89204:89204	86505	14	True				
ANR	86795	Statement	)	3527:101:89205:89205	86505	15	True				
ANR	86796	CompoundStatement		37:103:1080:1080	86505	16					
ANR	86797	ReturnStatement	return 0 ;	3528:6:89215:89223	86505	0	True				
ANR	86798	PrimaryExpression	0		86505	0					
ANR	86799	ExpressionStatement	"r_core_cmd0 ( core , ""af"" )"	3530:5:89237:89261	86505	17	True				
ANR	86800	CallExpression	"r_core_cmd0 ( core , ""af"" )"		86505	0					
ANR	86801	Callee	r_core_cmd0		86505	0					
ANR	86802	Identifier	r_core_cmd0		86505	0					
ANR	86803	ArgumentList	core		86505	1					
ANR	86804	Argument	core		86505	0					
ANR	86805	Identifier	core		86505	0					
ANR	86806	Argument	"""af"""		86505	1					
ANR	86807	PrimaryExpression	"""af"""		86505	0					
ANR	86808	ExpressionStatement	"f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"	3532:4:89273:89324	86505	1	True				
ANR	86809	AssignmentExpression	"f = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		86505	0		=			
ANR	86810	Identifier	f		86505	0					
ANR	86811	CallExpression	"r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		86505	1					
ANR	86812	Callee	r_anal_get_fcn_in		86505	0					
ANR	86813	Identifier	r_anal_get_fcn_in		86505	0					
ANR	86814	ArgumentList	core -> anal		86505	1					
ANR	86815	Argument	core -> anal		86505	0					
ANR	86816	PtrMemberAccess	core -> anal		86505	0					
ANR	86817	Identifier	core		86505	0					
ANR	86818	Identifier	anal		86505	1					
ANR	86819	Argument	core -> offset		86505	1					
ANR	86820	PtrMemberAccess	core -> offset		86505	0					
ANR	86821	Identifier	core		86505	0					
ANR	86822	Identifier	offset		86505	1					
ANR	86823	Argument	0		86505	2					
ANR	86824	PrimaryExpression	0		86505	0					
ANR	86825	ExpressionStatement	g -> need_reload_nodes = true	3533:4:89330:89357	86505	2	True				
ANR	86826	AssignmentExpression	g -> need_reload_nodes = true		86505	0		=			
ANR	86827	PtrMemberAccess	g -> need_reload_nodes		86505	0					
ANR	86828	Identifier	g		86505	0					
ANR	86829	Identifier	need_reload_nodes		86505	1					
ANR	86830	Identifier	true		86505	1					
ANR	86831	IfStatement	if ( f && fcn && f != * fcn )		86505	2					
ANR	86832	Condition	f && fcn && f != * fcn	3535:7:89371:89391	86505	0	True				
ANR	86833	AndExpression	f && fcn && f != * fcn		86505	0		&&			
ANR	86834	Identifier	f		86505	0					
ANR	86835	AndExpression	fcn && f != * fcn		86505	1		&&			
ANR	86836	Identifier	fcn		86505	0					
ANR	86837	EqualityExpression	f != * fcn		86505	1		!=			
ANR	86838	Identifier	f		86505	0					
ANR	86839	UnaryOperationExpression	* fcn		86505	1					
ANR	86840	UnaryOperator	*		86505	0					
ANR	86841	Identifier	fcn		86505	1					
ANR	86842	CompoundStatement		45:30:1267:1267	86505	1					
ANR	86843	ExpressionStatement	* fcn = f	3536:4:89400:89408	86505	0	True				
ANR	86844	AssignmentExpression	* fcn = f		86505	0		=			
ANR	86845	UnaryOperationExpression	* fcn		86505	0					
ANR	86846	UnaryOperator	*		86505	0					
ANR	86847	Identifier	fcn		86505	1					
ANR	86848	Identifier	f		86505	1					
ANR	86849	ExpressionStatement	g -> need_reload_nodes = true	3537:4:89414:89441	86505	1	True				
ANR	86850	AssignmentExpression	g -> need_reload_nodes = true		86505	0		=			
ANR	86851	PtrMemberAccess	g -> need_reload_nodes		86505	0					
ANR	86852	Identifier	g		86505	0					
ANR	86853	Identifier	need_reload_nodes		86505	1					
ANR	86854	Identifier	true		86505	1					
ANR	86855	ExpressionStatement	g -> force_update_seek = true	3538:4:89447:89474	86505	2	True				
ANR	86856	AssignmentExpression	g -> force_update_seek = true		86505	0		=			
ANR	86857	PtrMemberAccess	g -> force_update_seek		86505	0					
ANR	86858	Identifier	g		86505	0					
ANR	86859	Identifier	force_update_seek		86505	1					
ANR	86860	Identifier	true		86505	1					
ANR	86861	ElseStatement	else		86505	0					
ANR	86862	CompoundStatement		50:9:1363:1363	86505	0					
ANR	86863	ExpressionStatement	"r_cons_message ( ""This is not a valid offset\\n"" )"	3542:3:89573:89620	86505	0	True				
ANR	86864	CallExpression	"r_cons_message ( ""This is not a valid offset\\n"" )"		86505	0					
ANR	86865	Callee	r_cons_message		86505	0					
ANR	86866	Identifier	r_cons_message		86505	0					
ANR	86867	ArgumentList	"""This is not a valid offset\\n"""		86505	1					
ANR	86868	Argument	"""This is not a valid offset\\n"""		86505	0					
ANR	86869	PrimaryExpression	"""This is not a valid offset\\n"""		86505	0					
ANR	86870	ExpressionStatement	r_cons_flush ( )	3543:3:89625:89640	86505	1	True				
ANR	86871	CallExpression	r_cons_flush ( )		86505	0					
ANR	86872	Callee	r_cons_flush		86505	0					
ANR	86873	Identifier	r_cons_flush		86505	0					
ANR	86874	ArgumentList			86505	1					
ANR	86875	IdentifierDeclStatement	"int res = agraph_print ( g , grd -> fs , core , * fcn ) ;"	3547:1:89651:89698	86505	9	True				
ANR	86876	IdentifierDecl	"res = agraph_print ( g , grd -> fs , core , * fcn )"		86505	0					
ANR	86877	IdentifierDeclType	int		86505	0					
ANR	86878	Identifier	res		86505	1					
ANR	86879	AssignmentExpression	"res = agraph_print ( g , grd -> fs , core , * fcn )"		86505	2		=			
ANR	86880	Identifier	res		86505	0					
ANR	86881	CallExpression	"agraph_print ( g , grd -> fs , core , * fcn )"		86505	1					
ANR	86882	Callee	agraph_print		86505	0					
ANR	86883	Identifier	agraph_print		86505	0					
ANR	86884	ArgumentList	g		86505	1					
ANR	86885	Argument	g		86505	0					
ANR	86886	Identifier	g		86505	0					
ANR	86887	Argument	grd -> fs		86505	1					
ANR	86888	PtrMemberAccess	grd -> fs		86505	0					
ANR	86889	Identifier	grd		86505	0					
ANR	86890	Identifier	fs		86505	1					
ANR	86891	Argument	core		86505	2					
ANR	86892	Identifier	core		86505	0					
ANR	86893	Argument	* fcn		86505	3					
ANR	86894	UnaryOperationExpression	* fcn		86505	0					
ANR	86895	UnaryOperator	*		86505	0					
ANR	86896	Identifier	fcn		86505	1					
ANR	86897	IfStatement	"if ( r_config_get_i ( core -> config , ""scr.scrollbar"" ) )"		86505	10					
ANR	86898	Condition	"r_config_get_i ( core -> config , ""scr.scrollbar"" )"	3549:5:89706:89751	86505	0	True				
ANR	86899	CallExpression	"r_config_get_i ( core -> config , ""scr.scrollbar"" )"		86505	0					
ANR	86900	Callee	r_config_get_i		86505	0					
ANR	86901	Identifier	r_config_get_i		86505	0					
ANR	86902	ArgumentList	core -> config		86505	1					
ANR	86903	Argument	core -> config		86505	0					
ANR	86904	PtrMemberAccess	core -> config		86505	0					
ANR	86905	Identifier	core		86505	0					
ANR	86906	Identifier	config		86505	1					
ANR	86907	Argument	"""scr.scrollbar"""		86505	1					
ANR	86908	PrimaryExpression	"""scr.scrollbar"""		86505	0					
ANR	86909	CompoundStatement		59:53:1627:1627	86505	1					
ANR	86910	ExpressionStatement	r_core_print_scrollbar ( core )	3550:2:89758:89787	86505	0	True				
ANR	86911	CallExpression	r_core_print_scrollbar ( core )		86505	0					
ANR	86912	Callee	r_core_print_scrollbar		86505	0					
ANR	86913	Identifier	r_core_print_scrollbar		86505	0					
ANR	86914	ArgumentList	core		86505	1					
ANR	86915	Argument	core		86505	0					
ANR	86916	Identifier	core		86505	0					
ANR	86917	ReturnStatement	return res ;	3553:1:89795:89805	86505	11	True				
ANR	86918	Identifier	res		86505	0					
ANR	86919	ReturnType	static int		86505	1					
ANR	86920	Identifier	agraph_refresh		86505	2					
ANR	86921	ParameterList	struct agraph_refresh_data * grd		86505	3					
ANR	86922	Parameter	struct agraph_refresh_data * grd	3491:26:88093:88123	86505	0	True				
ANR	86923	ParameterType	struct agraph_refresh_data *		86505	0					
ANR	86924	Identifier	grd		86505	1					
ANR	86925	CFGEntryNode	ENTRY		86505		True				
ANR	86926	CFGExitNode	EXIT		86505		True				
ANR	86927	Symbol	grd -> g		86505						
ANR	86928	Symbol	* fcn		86505						
ANR	86929	Symbol	R_REG_NAME_PC		86505						
ANR	86930	Symbol	agraph_print		86505						
ANR	86931	Symbol	core -> offset		86505						
ANR	86932	Symbol	grd -> fcn		86505						
ANR	86933	Symbol	g -> is_instep		86505						
ANR	86934	Symbol	acur		86505						
ANR	86935	Symbol	core -> io -> debug		86505						
ANR	86936	Symbol	r_reg_get		86505						
ANR	86937	Symbol	strcmp		86505						
ANR	86938	Symbol	res		86505						
ANR	86939	Symbol	r_io_is_valid_offset		86505						
ANR	86940	Symbol	NULL		86505						
ANR	86941	Symbol	g -> need_reload_nodes		86505						
ANR	86942	Symbol	grd -> core		86505						
ANR	86943	Symbol	core		86505						
ANR	86944	Symbol	r_reg_get_name		86505						
ANR	86945	Symbol	r_config_get_i		86505						
ANR	86946	Symbol	true		86505						
ANR	86947	Symbol	* grd		86505						
ANR	86948	Symbol	* core -> dbg		86505						
ANR	86949	Symbol	* core		86505						
ANR	86950	Symbol	title		86505						
ANR	86951	Symbol	acur -> title		86505						
ANR	86952	Symbol	get_title		86505						
ANR	86953	Symbol	core -> anal		86505						
ANR	86954	Symbol	fcn		86505						
ANR	86955	Symbol	core -> io		86505						
ANR	86956	Symbol	r_core_anal_get_bbaddr		86505						
ANR	86957	Symbol	grd		86505						
ANR	86958	Symbol	r_cons_singleton		86505						
ANR	86959	Symbol	addr		86505						
ANR	86960	Symbol	* * core		86505						
ANR	86961	Symbol	core -> config		86505						
ANR	86962	Symbol	r_reg_get_value		86505						
ANR	86963	Symbol	get_anode		86505						
ANR	86964	Symbol	f		86505						
ANR	86965	Symbol	g		86505						
ANR	86966	Symbol	false		86505						
ANR	86967	Symbol	* acur		86505						
ANR	86968	Symbol	* g		86505						
ANR	86969	Symbol	* core -> io		86505						
ANR	86970	Symbol	r_cons_singleton ( ) -> event_data		86505						
ANR	86971	Symbol	r		86505						
ANR	86972	Symbol	g -> force_update_seek		86505						
ANR	86973	Symbol	pc		86505						
ANR	86974	Symbol	r_anal_get_fcn_in		86505						
ANR	86975	Symbol	core -> dbg -> reg		86505						
ANR	86976	Symbol	g -> curnode		86505						
ANR	86977	Symbol	g -> is_dis		86505						
ANR	86978	Symbol	grd -> fs		86505						
ANR	86979	Symbol	* r_cons_singleton		86505						
ANR	86980	Symbol	grd -> follow_offset		86505						
ANR	86981	Symbol	core -> dbg		86505						
ANR	86982	Function	agraph_refresh_oneshot	3556:0:89810:89962							
ANR	86983	FunctionDef	agraph_refresh_oneshot (struct agraph_refresh_data * grd)		86982	0					
ANR	86984	CompoundStatement		3556:68:89878:89962	86982	0					
ANR	86985	ExpressionStatement	"r_core_task_enqueue_oneshot ( grd -> core , ( RCoreTaskOneShot ) agraph_refresh , grd )"	3557:1:89881:89960	86982	0	True				
ANR	86986	CallExpression	"r_core_task_enqueue_oneshot ( grd -> core , ( RCoreTaskOneShot ) agraph_refresh , grd )"		86982	0					
ANR	86987	Callee	r_core_task_enqueue_oneshot		86982	0					
ANR	86988	Identifier	r_core_task_enqueue_oneshot		86982	0					
ANR	86989	ArgumentList	grd -> core		86982	1					
ANR	86990	Argument	grd -> core		86982	0					
ANR	86991	PtrMemberAccess	grd -> core		86982	0					
ANR	86992	Identifier	grd		86982	0					
ANR	86993	Identifier	core		86982	1					
ANR	86994	Argument	( RCoreTaskOneShot ) agraph_refresh		86982	1					
ANR	86995	CastExpression	( RCoreTaskOneShot ) agraph_refresh		86982	0					
ANR	86996	CastTarget	RCoreTaskOneShot		86982	0					
ANR	86997	Identifier	agraph_refresh		86982	1					
ANR	86998	Argument	grd		86982	2					
ANR	86999	Identifier	grd		86982	0					
ANR	87000	ReturnType	static void		86982	1					
ANR	87001	Identifier	agraph_refresh_oneshot		86982	2					
ANR	87002	ParameterList	struct agraph_refresh_data * grd		86982	3					
ANR	87003	Parameter	struct agraph_refresh_data * grd	3556:35:89845:89875	86982	0	True				
ANR	87004	ParameterType	struct agraph_refresh_data *		86982	0					
ANR	87005	Identifier	grd		86982	1					
ANR	87006	CFGEntryNode	ENTRY		86982		True				
ANR	87007	CFGExitNode	EXIT		86982		True				
ANR	87008	Symbol	grd		86982						
ANR	87009	Symbol	grd -> core		86982						
ANR	87010	Symbol	agraph_refresh		86982						
ANR	87011	Symbol	* grd		86982						
ANR	87012	Function	agraph_toggle_speed	3560:0:89965:90153							
ANR	87013	FunctionDef	"agraph_toggle_speed (RAGraph * g , RCore * core)"		87012	0					
ANR	87014	CompoundStatement		3560:57:90022:90153	87012	0					
ANR	87015	IdentifierDeclStatement	"const int alt = r_config_get_i ( core -> config , ""graph.scroll"" ) ;"	3561:1:90025:90086	87012	0	True				
ANR	87016	IdentifierDecl	"alt = r_config_get_i ( core -> config , ""graph.scroll"" )"		87012	0					
ANR	87017	IdentifierDeclType	const int		87012	0					
ANR	87018	Identifier	alt		87012	1					
ANR	87019	AssignmentExpression	"alt = r_config_get_i ( core -> config , ""graph.scroll"" )"		87012	2		=			
ANR	87020	Identifier	alt		87012	0					
ANR	87021	CallExpression	"r_config_get_i ( core -> config , ""graph.scroll"" )"		87012	1					
ANR	87022	Callee	r_config_get_i		87012	0					
ANR	87023	Identifier	r_config_get_i		87012	0					
ANR	87024	ArgumentList	core -> config		87012	1					
ANR	87025	Argument	core -> config		87012	0					
ANR	87026	PtrMemberAccess	core -> config		87012	0					
ANR	87027	Identifier	core		87012	0					
ANR	87028	Identifier	config		87012	1					
ANR	87029	Argument	"""graph.scroll"""		87012	1					
ANR	87030	PrimaryExpression	"""graph.scroll"""		87012	0					
ANR	87031	ExpressionStatement	g -> movspeed = g -> movspeed == DEFAULT_SPEED ? alt : DEFAULT_SPEED	3562:1:90089:90151	87012	1	True				
ANR	87032	AssignmentExpression	g -> movspeed = g -> movspeed == DEFAULT_SPEED ? alt : DEFAULT_SPEED		87012	0		=			
ANR	87033	PtrMemberAccess	g -> movspeed		87012	0					
ANR	87034	Identifier	g		87012	0					
ANR	87035	Identifier	movspeed		87012	1					
ANR	87036	ConditionalExpression	g -> movspeed == DEFAULT_SPEED ? alt : DEFAULT_SPEED		87012	1					
ANR	87037	Condition	g -> movspeed == DEFAULT_SPEED		87012	0					
ANR	87038	EqualityExpression	g -> movspeed == DEFAULT_SPEED		87012	0		==			
ANR	87039	PtrMemberAccess	g -> movspeed		87012	0					
ANR	87040	Identifier	g		87012	0					
ANR	87041	Identifier	movspeed		87012	1					
ANR	87042	Identifier	DEFAULT_SPEED		87012	1					
ANR	87043	Identifier	alt		87012	1					
ANR	87044	Identifier	DEFAULT_SPEED		87012	2					
ANR	87045	ReturnType	static void		87012	1					
ANR	87046	Identifier	agraph_toggle_speed		87012	2					
ANR	87047	ParameterList	"RAGraph * g , RCore * core"		87012	3					
ANR	87048	Parameter	RAGraph * g	3560:32:89997:90006	87012	0	True				
ANR	87049	ParameterType	RAGraph *		87012	0					
ANR	87050	Identifier	g		87012	1					
ANR	87051	Parameter	RCore * core	3560:44:90009:90019	87012	1	True				
ANR	87052	ParameterType	RCore *		87012	0					
ANR	87053	Identifier	core		87012	1					
ANR	87054	CFGEntryNode	ENTRY		87012		True				
ANR	87055	CFGExitNode	EXIT		87012		True				
ANR	87056	Symbol	core -> config		87012						
ANR	87057	Symbol	core		87012						
ANR	87058	Symbol	* g		87012						
ANR	87059	Symbol	g -> movspeed		87012						
ANR	87060	Symbol	g		87012						
ANR	87061	Symbol	r_config_get_i		87012						
ANR	87062	Symbol	DEFAULT_SPEED		87012						
ANR	87063	Symbol	* core		87012						
ANR	87064	Symbol	alt		87012						
ANR	87065	Function	agraph_init	3565:0:90156:90522							
ANR	87066	FunctionDef	agraph_init (RAGraph * g)		87065	0					
ANR	87067	CompoundStatement		3565:36:90192:90522	87065	0					
ANR	87068	ExpressionStatement	g -> is_callgraph = false	3566:1:90195:90218	87065	0	True				
ANR	87069	AssignmentExpression	g -> is_callgraph = false		87065	0		=			
ANR	87070	PtrMemberAccess	g -> is_callgraph		87065	0					
ANR	87071	Identifier	g		87065	0					
ANR	87072	Identifier	is_callgraph		87065	1					
ANR	87073	Identifier	false		87065	1					
ANR	87074	ExpressionStatement	g -> is_instep = false	3567:1:90221:90241	87065	1	True				
ANR	87075	AssignmentExpression	g -> is_instep = false		87065	0		=			
ANR	87076	PtrMemberAccess	g -> is_instep		87065	0					
ANR	87077	Identifier	g		87065	0					
ANR	87078	Identifier	is_instep		87065	1					
ANR	87079	Identifier	false		87065	1					
ANR	87080	ExpressionStatement	g -> need_reload_nodes = true	3568:1:90244:90271	87065	2	True				
ANR	87081	AssignmentExpression	g -> need_reload_nodes = true		87065	0		=			
ANR	87082	PtrMemberAccess	g -> need_reload_nodes		87065	0					
ANR	87083	Identifier	g		87065	0					
ANR	87084	Identifier	need_reload_nodes		87065	1					
ANR	87085	Identifier	true		87065	1					
ANR	87086	ExpressionStatement	g -> show_node_titles = true	3569:1:90274:90300	87065	3	True				
ANR	87087	AssignmentExpression	g -> show_node_titles = true		87065	0		=			
ANR	87088	PtrMemberAccess	g -> show_node_titles		87065	0					
ANR	87089	Identifier	g		87065	0					
ANR	87090	Identifier	show_node_titles		87065	1					
ANR	87091	Identifier	true		87065	1					
ANR	87092	ExpressionStatement	g -> show_node_body = true	3570:1:90303:90327	87065	4	True				
ANR	87093	AssignmentExpression	g -> show_node_body = true		87065	0		=			
ANR	87094	PtrMemberAccess	g -> show_node_body		87065	0					
ANR	87095	Identifier	g		87065	0					
ANR	87096	Identifier	show_node_body		87065	1					
ANR	87097	Identifier	true		87065	1					
ANR	87098	ExpressionStatement	g -> force_update_seek = true	3571:1:90330:90357	87065	5	True				
ANR	87099	AssignmentExpression	g -> force_update_seek = true		87065	0		=			
ANR	87100	PtrMemberAccess	g -> force_update_seek		87065	0					
ANR	87101	Identifier	g		87065	0					
ANR	87102	Identifier	force_update_seek		87065	1					
ANR	87103	Identifier	true		87065	1					
ANR	87104	ExpressionStatement	g -> graph = r_graph_new ( )	3572:1:90360:90385	87065	6	True				
ANR	87105	AssignmentExpression	g -> graph = r_graph_new ( )		87065	0		=			
ANR	87106	PtrMemberAccess	g -> graph		87065	0					
ANR	87107	Identifier	g		87065	0					
ANR	87108	Identifier	graph		87065	1					
ANR	87109	CallExpression	r_graph_new ( )		87065	1					
ANR	87110	Callee	r_graph_new		87065	0					
ANR	87111	Identifier	r_graph_new		87065	0					
ANR	87112	ArgumentList			87065	1					
ANR	87113	ExpressionStatement	g -> nodes = sdb_new0 ( )	3573:1:90388:90410	87065	7	True				
ANR	87114	AssignmentExpression	g -> nodes = sdb_new0 ( )		87065	0		=			
ANR	87115	PtrMemberAccess	g -> nodes		87065	0					
ANR	87116	Identifier	g		87065	0					
ANR	87117	Identifier	nodes		87065	1					
ANR	87118	CallExpression	sdb_new0 ( )		87065	1					
ANR	87119	Callee	sdb_new0		87065	0					
ANR	87120	Identifier	sdb_new0		87065	0					
ANR	87121	ArgumentList			87065	1					
ANR	87122	ExpressionStatement	g -> edgemode = 2	3574:1:90413:90428	87065	8	True				
ANR	87123	AssignmentExpression	g -> edgemode = 2		87065	0		=			
ANR	87124	PtrMemberAccess	g -> edgemode		87065	0					
ANR	87125	Identifier	g		87065	0					
ANR	87126	Identifier	edgemode		87065	1					
ANR	87127	PrimaryExpression	2		87065	1					
ANR	87128	ExpressionStatement	g -> zoom = ZOOM_DEFAULT	3575:1:90431:90453	87065	9	True				
ANR	87129	AssignmentExpression	g -> zoom = ZOOM_DEFAULT		87065	0		=			
ANR	87130	PtrMemberAccess	g -> zoom		87065	0					
ANR	87131	Identifier	g		87065	0					
ANR	87132	Identifier	zoom		87065	1					
ANR	87133	Identifier	ZOOM_DEFAULT		87065	1					
ANR	87134	ExpressionStatement	g -> hints = 1	3576:1:90456:90468	87065	10	True				
ANR	87135	AssignmentExpression	g -> hints = 1		87065	0		=			
ANR	87136	PtrMemberAccess	g -> hints		87065	0					
ANR	87137	Identifier	g		87065	0					
ANR	87138	Identifier	hints		87065	1					
ANR	87139	PrimaryExpression	1		87065	1					
ANR	87140	ExpressionStatement	g -> movspeed = DEFAULT_SPEED	3577:1:90471:90498	87065	11	True				
ANR	87141	AssignmentExpression	g -> movspeed = DEFAULT_SPEED		87065	0		=			
ANR	87142	PtrMemberAccess	g -> movspeed		87065	0					
ANR	87143	Identifier	g		87065	0					
ANR	87144	Identifier	movspeed		87065	1					
ANR	87145	Identifier	DEFAULT_SPEED		87065	1					
ANR	87146	ExpressionStatement	g -> db = sdb_new0 ( )	3578:1:90501:90520	87065	12	True				
ANR	87147	AssignmentExpression	g -> db = sdb_new0 ( )		87065	0		=			
ANR	87148	PtrMemberAccess	g -> db		87065	0					
ANR	87149	Identifier	g		87065	0					
ANR	87150	Identifier	db		87065	1					
ANR	87151	CallExpression	sdb_new0 ( )		87065	1					
ANR	87152	Callee	sdb_new0		87065	0					
ANR	87153	Identifier	sdb_new0		87065	0					
ANR	87154	ArgumentList			87065	1					
ANR	87155	ReturnType	static void		87065	1					
ANR	87156	Identifier	agraph_init		87065	2					
ANR	87157	ParameterList	RAGraph * g		87065	3					
ANR	87158	Parameter	RAGraph * g	3565:24:90180:90189	87065	0	True				
ANR	87159	ParameterType	RAGraph *		87065	0					
ANR	87160	Identifier	g		87065	1					
ANR	87161	CFGEntryNode	ENTRY		87065		True				
ANR	87162	CFGExitNode	EXIT		87065		True				
ANR	87163	Symbol	ZOOM_DEFAULT		87065						
ANR	87164	Symbol	sdb_new0		87065						
ANR	87165	Symbol	g -> hints		87065						
ANR	87166	Symbol	g -> need_reload_nodes		87065						
ANR	87167	Symbol	g -> show_node_body		87065						
ANR	87168	Symbol	g -> zoom		87065						
ANR	87169	Symbol	g -> movspeed		87065						
ANR	87170	Symbol	g		87065						
ANR	87171	Symbol	DEFAULT_SPEED		87065						
ANR	87172	Symbol	g -> db		87065						
ANR	87173	Symbol	false		87065						
ANR	87174	Symbol	r_graph_new		87065						
ANR	87175	Symbol	g -> show_node_titles		87065						
ANR	87176	Symbol	* g		87065						
ANR	87177	Symbol	g -> is_instep		87065						
ANR	87178	Symbol	g -> force_update_seek		87065						
ANR	87179	Symbol	g -> edgemode		87065						
ANR	87180	Symbol	g -> graph		87065						
ANR	87181	Symbol	g -> nodes		87065						
ANR	87182	Symbol	true		87065						
ANR	87183	Symbol	g -> is_callgraph		87065						
ANR	87184	Function	free_anode	3581:0:90525:90607							
ANR	87185	FunctionDef	free_anode (RANode * n)		87184	0					
ANR	87186	CompoundStatement		3581:34:90559:90607	87184	0					
ANR	87187	ExpressionStatement	free ( n -> title )	3582:1:90562:90577	87184	0	True				
ANR	87188	CallExpression	free ( n -> title )		87184	0					
ANR	87189	Callee	free		87184	0					
ANR	87190	Identifier	free		87184	0					
ANR	87191	ArgumentList	n -> title		87184	1					
ANR	87192	Argument	n -> title		87184	0					
ANR	87193	PtrMemberAccess	n -> title		87184	0					
ANR	87194	Identifier	n		87184	0					
ANR	87195	Identifier	title		87184	1					
ANR	87196	ExpressionStatement	free ( n -> body )	3583:1:90580:90594	87184	1	True				
ANR	87197	CallExpression	free ( n -> body )		87184	0					
ANR	87198	Callee	free		87184	0					
ANR	87199	Identifier	free		87184	0					
ANR	87200	ArgumentList	n -> body		87184	1					
ANR	87201	Argument	n -> body		87184	0					
ANR	87202	PtrMemberAccess	n -> body		87184	0					
ANR	87203	Identifier	n		87184	0					
ANR	87204	Identifier	body		87184	1					
ANR	87205	ExpressionStatement	free ( n )	3584:1:90597:90605	87184	2	True				
ANR	87206	CallExpression	free ( n )		87184	0					
ANR	87207	Callee	free		87184	0					
ANR	87208	Identifier	free		87184	0					
ANR	87209	ArgumentList	n		87184	1					
ANR	87210	Argument	n		87184	0					
ANR	87211	Identifier	n		87184	0					
ANR	87212	ReturnType	static void		87184	1					
ANR	87213	Identifier	free_anode		87184	2					
ANR	87214	ParameterList	RANode * n		87184	3					
ANR	87215	Parameter	RANode * n	3581:23:90548:90556	87184	0	True				
ANR	87216	ParameterType	RANode *		87184	0					
ANR	87217	Identifier	n		87184	1					
ANR	87218	CFGEntryNode	ENTRY		87184		True				
ANR	87219	CFGExitNode	EXIT		87184		True				
ANR	87220	Symbol	* n		87184						
ANR	87221	Symbol	n -> title		87184						
ANR	87222	Symbol	n -> body		87184						
ANR	87223	Symbol	n		87184						
ANR	87224	Function	graphNodeMove	3587:0:90610:91163							
ANR	87225	FunctionDef	"graphNodeMove (RAGraph * g , int dir , int speed)"		87224	0					
ANR	87226	CompoundStatement		3587:58:90668:91163	87224	0					
ANR	87227	IdentifierDeclStatement	int delta = ( dir == 'k' ) ? - 1 : 1 ;	3588:1:90671:90702	87224	0	True				
ANR	87228	IdentifierDecl	delta = ( dir == 'k' ) ? - 1 : 1		87224	0					
ANR	87229	IdentifierDeclType	int		87224	0					
ANR	87230	Identifier	delta		87224	1					
ANR	87231	AssignmentExpression	delta = ( dir == 'k' ) ? - 1 : 1		87224	2		=			
ANR	87232	Identifier	delta		87224	0					
ANR	87233	ConditionalExpression	( dir == 'k' ) ? - 1 : 1		87224	1					
ANR	87234	Condition	dir == 'k'		87224	0					
ANR	87235	EqualityExpression	dir == 'k'		87224	0		==			
ANR	87236	Identifier	dir		87224	0					
ANR	87237	PrimaryExpression	'k'		87224	1					
ANR	87238	UnaryOperationExpression	- 1		87224	1					
ANR	87239	UnaryOperator	-		87224	0					
ANR	87240	PrimaryExpression	1		87224	1					
ANR	87241	PrimaryExpression	1		87224	2					
ANR	87242	IfStatement	if ( dir == 'H' )		87224	1					
ANR	87243	Condition	dir == 'H'	3589:5:90709:90718	87224	0	True				
ANR	87244	EqualityExpression	dir == 'H'		87224	0		==			
ANR	87245	Identifier	dir		87224	0					
ANR	87246	PrimaryExpression	'H'		87224	1					
ANR	87247	CompoundStatement		3:17:52:52	87224	1					
ANR	87248	ReturnStatement	return ;	3590:2:90725:90731	87224	0	True				
ANR	87249	IfStatement	if ( dir == 'h' || dir == 'l' )		87224	2					
ANR	87250	Condition	dir == 'h' || dir == 'l'	3592:5:90741:90764	87224	0	True				
ANR	87251	OrExpression	dir == 'h' || dir == 'l'		87224	0		||			
ANR	87252	EqualityExpression	dir == 'h'		87224	0		==			
ANR	87253	Identifier	dir		87224	0					
ANR	87254	PrimaryExpression	'h'		87224	1					
ANR	87255	EqualityExpression	dir == 'l'		87224	1		==			
ANR	87256	Identifier	dir		87224	0					
ANR	87257	PrimaryExpression	'l'		87224	1					
ANR	87258	CompoundStatement		6:31:98:98	87224	1					
ANR	87259	IfStatement	if ( is_mini ( g ) )		87224	0					
ANR	87260	Condition	is_mini ( g )	3594:6:90798:90808	87224	0	True				
ANR	87261	CallExpression	is_mini ( g )		87224	0					
ANR	87262	Callee	is_mini		87224	0					
ANR	87263	Identifier	is_mini		87224	0					
ANR	87264	ArgumentList	g		87224	1					
ANR	87265	Argument	g		87224	0					
ANR	87266	Identifier	g		87224	0					
ANR	87267	CompoundStatement		8:19:142:142	87224	1					
ANR	87268	ExpressionStatement	discroll = 0	3595:3:90816:90828	87224	0	True				
ANR	87269	AssignmentExpression	discroll = 0		87224	0		=			
ANR	87270	Identifier	discroll		87224	0					
ANR	87271	PrimaryExpression	0		87224	1					
ANR	87272	ElseStatement	else		87224	0					
ANR	87273	CompoundStatement		11:3:175:206	87224	0					
ANR	87274	IdentifierDeclStatement	int delta = ( dir == 'l' ) ? 1 : - 1 ;	3597:3:90844:90875	87224	0	True				
ANR	87275	IdentifierDecl	delta = ( dir == 'l' ) ? 1 : - 1		87224	0					
ANR	87276	IdentifierDeclType	int		87224	0					
ANR	87277	Identifier	delta		87224	1					
ANR	87278	AssignmentExpression	delta = ( dir == 'l' ) ? 1 : - 1		87224	2		=			
ANR	87279	Identifier	delta		87224	0					
ANR	87280	ConditionalExpression	( dir == 'l' ) ? 1 : - 1		87224	1					
ANR	87281	Condition	dir == 'l'		87224	0					
ANR	87282	EqualityExpression	dir == 'l'		87224	0		==			
ANR	87283	Identifier	dir		87224	0					
ANR	87284	PrimaryExpression	'l'		87224	1					
ANR	87285	PrimaryExpression	1		87224	1					
ANR	87286	UnaryOperationExpression	- 1		87224	2					
ANR	87287	UnaryOperator	-		87224	0					
ANR	87288	PrimaryExpression	1		87224	1					
ANR	87289	ExpressionStatement	"move_current_node ( g , speed * delta , 0 )"	3598:3:90880:90919	87224	1	True				
ANR	87290	CallExpression	"move_current_node ( g , speed * delta , 0 )"		87224	0					
ANR	87291	Callee	move_current_node		87224	0					
ANR	87292	Identifier	move_current_node		87224	0					
ANR	87293	ArgumentList	g		87224	1					
ANR	87294	Argument	g		87224	0					
ANR	87295	Identifier	g		87224	0					
ANR	87296	Argument	speed * delta		87224	1					
ANR	87297	MultiplicativeExpression	speed * delta		87224	0		*			
ANR	87298	Identifier	speed		87224	0					
ANR	87299	Identifier	delta		87224	1					
ANR	87300	Argument	0		87224	2					
ANR	87301	PrimaryExpression	0		87224	0					
ANR	87302	ReturnStatement	return ;	3600:2:90927:90933	87224	1	True				
ANR	87303	IdentifierDeclStatement	RCore * core = NULL ;	3602:1:90939:90957	87224	3	True				
ANR	87304	IdentifierDecl	* core = NULL		87224	0					
ANR	87305	IdentifierDeclType	RCore *		87224	0					
ANR	87306	Identifier	core		87224	1					
ANR	87307	AssignmentExpression	* core = NULL		87224	2		=			
ANR	87308	Identifier	NULL		87224	0					
ANR	87309	Identifier	NULL		87224	1					
ANR	87310	IfStatement	if ( is_mini ( g ) )		87224	4					
ANR	87311	Condition	is_mini ( g )	3604:5:90984:90994	87224	0	True				
ANR	87312	CallExpression	is_mini ( g )		87224	0					
ANR	87313	Callee	is_mini		87224	0					
ANR	87314	Identifier	is_mini		87224	0					
ANR	87315	ArgumentList	g		87224	1					
ANR	87316	Argument	g		87224	0					
ANR	87317	Identifier	g		87224	0					
ANR	87318	CompoundStatement		18:18:328:328	87224	1					
ANR	87319	ExpressionStatement	discroll += ( delta * speed )	3605:2:91001:91028	87224	0	True				
ANR	87320	AssignmentExpression	discroll += ( delta * speed )		87224	0		+=			
ANR	87321	Identifier	discroll		87224	0					
ANR	87322	MultiplicativeExpression	delta * speed		87224	1		*			
ANR	87323	Identifier	delta		87224	0					
ANR	87324	Identifier	speed		87224	1					
ANR	87325	ElseStatement	else		87224	0					
ANR	87326	IfStatement	if ( g -> is_dis )		87224	0					
ANR	87327	Condition	g -> is_dis	3606:12:91042:91050	87224	0	True				
ANR	87328	PtrMemberAccess	g -> is_dis		87224	0					
ANR	87329	Identifier	g		87224	0					
ANR	87330	Identifier	is_dis		87224	1					
ANR	87331	CompoundStatement		20:23:384:384	87224	1					
ANR	87332	ExpressionStatement	"r_core_cmdf ( core , ""so %d"" , ( delta * 4 ) * speed )"	3607:2:91057:91105	87224	0	True				
ANR	87333	CallExpression	"r_core_cmdf ( core , ""so %d"" , ( delta * 4 ) * speed )"		87224	0					
ANR	87334	Callee	r_core_cmdf		87224	0					
ANR	87335	Identifier	r_core_cmdf		87224	0					
ANR	87336	ArgumentList	core		87224	1					
ANR	87337	Argument	core		87224	0					
ANR	87338	Identifier	core		87224	0					
ANR	87339	Argument	"""so %d"""		87224	1					
ANR	87340	PrimaryExpression	"""so %d"""		87224	0					
ANR	87341	Argument	( delta * 4 ) * speed		87224	2					
ANR	87342	MultiplicativeExpression	( delta * 4 ) * speed		87224	0		*			
ANR	87343	MultiplicativeExpression	delta * 4		87224	0		*			
ANR	87344	Identifier	delta		87224	0					
ANR	87345	PrimaryExpression	4		87224	1					
ANR	87346	Identifier	speed		87224	1					
ANR	87347	ElseStatement	else		87224	0					
ANR	87348	CompoundStatement		22:8:446:446	87224	0					
ANR	87349	ExpressionStatement	"move_current_node ( g , 0 , delta * speed )"	3609:2:91119:91158	87224	0	True				
ANR	87350	CallExpression	"move_current_node ( g , 0 , delta * speed )"		87224	0					
ANR	87351	Callee	move_current_node		87224	0					
ANR	87352	Identifier	move_current_node		87224	0					
ANR	87353	ArgumentList	g		87224	1					
ANR	87354	Argument	g		87224	0					
ANR	87355	Identifier	g		87224	0					
ANR	87356	Argument	0		87224	1					
ANR	87357	PrimaryExpression	0		87224	0					
ANR	87358	Argument	delta * speed		87224	2					
ANR	87359	MultiplicativeExpression	delta * speed		87224	0		*			
ANR	87360	Identifier	delta		87224	0					
ANR	87361	Identifier	speed		87224	1					
ANR	87362	ReturnType	static void		87224	1					
ANR	87363	Identifier	graphNodeMove		87224	2					
ANR	87364	ParameterList	"RAGraph * g , int dir , int speed"		87224	3					
ANR	87365	Parameter	RAGraph * g	3587:26:90636:90645	87224	0	True				
ANR	87366	ParameterType	RAGraph *		87224	0					
ANR	87367	Identifier	g		87224	1					
ANR	87368	Parameter	int dir	3587:38:90648:90654	87224	1	True				
ANR	87369	ParameterType	int		87224	0					
ANR	87370	Identifier	dir		87224	1					
ANR	87371	Parameter	int speed	3587:47:90657:90665	87224	2	True				
ANR	87372	ParameterType	int		87224	0					
ANR	87373	Identifier	speed		87224	1					
ANR	87374	CFGEntryNode	ENTRY		87224		True				
ANR	87375	CFGExitNode	EXIT		87224		True				
ANR	87376	Symbol	core		87224						
ANR	87377	Symbol	* g		87224						
ANR	87378	Symbol	NULL		87224						
ANR	87379	Symbol	is_mini		87224						
ANR	87380	Symbol	g		87224						
ANR	87381	Symbol	delta		87224						
ANR	87382	Symbol	g -> is_dis		87224						
ANR	87383	Symbol	discroll		87224						
ANR	87384	Symbol	dir		87224						
ANR	87385	Symbol	speed		87224						
ANR	87386	Function	agraph_free_nodes	3613:0:91166:91369							
ANR	87387	FunctionDef	agraph_free_nodes (const RAGraph * g)		87386	0					
ANR	87388	CompoundStatement		3613:48:91214:91369	87386	0					
ANR	87389	IdentifierDeclStatement	RListIter * it ;	3614:1:91217:91230	87386	0	True				
ANR	87390	IdentifierDecl	* it		87386	0					
ANR	87391	IdentifierDeclType	RListIter *		87386	0					
ANR	87392	Identifier	it		87386	1					
ANR	87393	IdentifierDeclStatement	RGraphNode * n ;	3615:1:91233:91246	87386	1	True				
ANR	87394	IdentifierDecl	* n		87386	0					
ANR	87395	IdentifierDeclType	RGraphNode *		87386	0					
ANR	87396	Identifier	n		87386	1					
ANR	87397	IdentifierDeclStatement	RANode * a ;	3616:1:91249:91258	87386	2	True				
ANR	87398	IdentifierDecl	* a		87386	0					
ANR	87399	IdentifierDeclType	RANode *		87386	0					
ANR	87400	Identifier	a		87386	1					
ANR	87401	Statement	graph_foreach_anode	3618:1:91262:91280	87386	3	True				
ANR	87402	Statement	(	3618:21:91282:91282	87386	4	True				
ANR	87403	Statement	r_graph_get_nodes	3618:22:91283:91299	87386	5	True				
ANR	87404	Statement	(	3618:40:91301:91301	87386	6	True				
ANR	87405	Statement	g	3618:41:91302:91302	87386	7	True				
ANR	87406	Statement	->	3618:42:91303:91304	87386	8	True				
ANR	87407	Statement	graph	3618:44:91305:91309	87386	9	True				
ANR	87408	Statement	)	3618:49:91310:91310	87386	10	True				
ANR	87409	Statement	","	3618:50:91311:91311	87386	11	True				
ANR	87410	Statement	it	3618:52:91313:91314	87386	12	True				
ANR	87411	Statement	","	3618:54:91315:91315	87386	13	True				
ANR	87412	Statement	n	3618:56:91317:91317	87386	14	True				
ANR	87413	Statement	","	3618:57:91318:91318	87386	15	True				
ANR	87414	Statement	a	3618:59:91320:91320	87386	16	True				
ANR	87415	Statement	)	3618:60:91321:91321	87386	17	True				
ANR	87416	CompoundStatement		6:62:108:108	87386	18					
ANR	87417	ExpressionStatement	free_anode ( a )	3619:2:91327:91341	87386	0	True				
ANR	87418	CallExpression	free_anode ( a )		87386	0					
ANR	87419	Callee	free_anode		87386	0					
ANR	87420	Identifier	free_anode		87386	0					
ANR	87421	ArgumentList	a		87386	1					
ANR	87422	Argument	a		87386	0					
ANR	87423	Identifier	a		87386	0					
ANR	87424	ExpressionStatement	sdb_free ( g -> nodes )	3622:1:91348:91367	87386	19	True				
ANR	87425	CallExpression	sdb_free ( g -> nodes )		87386	0					
ANR	87426	Callee	sdb_free		87386	0					
ANR	87427	Identifier	sdb_free		87386	0					
ANR	87428	ArgumentList	g -> nodes		87386	1					
ANR	87429	Argument	g -> nodes		87386	0					
ANR	87430	PtrMemberAccess	g -> nodes		87386	0					
ANR	87431	Identifier	g		87386	0					
ANR	87432	Identifier	nodes		87386	1					
ANR	87433	ReturnType	static void		87386	1					
ANR	87434	Identifier	agraph_free_nodes		87386	2					
ANR	87435	ParameterList	const RAGraph * g		87386	3					
ANR	87436	Parameter	const RAGraph * g	3613:30:91196:91211	87386	0	True				
ANR	87437	ParameterType	const RAGraph *		87386	0					
ANR	87438	Identifier	g		87386	1					
ANR	87439	CFGEntryNode	ENTRY		87386		True				
ANR	87440	CFGExitNode	EXIT		87386		True				
ANR	87441	Symbol	a		87386						
ANR	87442	Symbol	* g		87386						
ANR	87443	Symbol	g -> nodes		87386						
ANR	87444	Symbol	g		87386						
ANR	87445	Symbol	it		87386						
ANR	87446	Symbol	n		87386						
ANR	87447	Function	sdb_set_enc	3625:0:91372:91543							
ANR	87448	FunctionDef	"sdb_set_enc (Sdb * db , const char * key , const char * v , ut32 cas)"		87447	0					
ANR	87449	CompoundStatement		3625:75:91447:91543	87447	0					
ANR	87450	IdentifierDeclStatement	"char * estr = sdb_encode ( ( const void * ) v , - 1 ) ;"	3626:1:91450:91496	87447	0	True				
ANR	87451	IdentifierDecl	"* estr = sdb_encode ( ( const void * ) v , - 1 )"		87447	0					
ANR	87452	IdentifierDeclType	char *		87447	0					
ANR	87453	Identifier	estr		87447	1					
ANR	87454	AssignmentExpression	"* estr = sdb_encode ( ( const void * ) v , - 1 )"		87447	2		=			
ANR	87455	Identifier	estr		87447	0					
ANR	87456	CallExpression	"sdb_encode ( ( const void * ) v , - 1 )"		87447	1					
ANR	87457	Callee	sdb_encode		87447	0					
ANR	87458	Identifier	sdb_encode		87447	0					
ANR	87459	ArgumentList	( const void * ) v		87447	1					
ANR	87460	Argument	( const void * ) v		87447	0					
ANR	87461	CastExpression	( const void * ) v		87447	0					
ANR	87462	CastTarget	const void *		87447	0					
ANR	87463	Identifier	v		87447	1					
ANR	87464	Argument	- 1		87447	1					
ANR	87465	UnaryOperationExpression	- 1		87447	0					
ANR	87466	UnaryOperator	-		87447	0					
ANR	87467	PrimaryExpression	1		87447	1					
ANR	87468	ExpressionStatement	"sdb_set ( db , key , estr , cas )"	3627:1:91499:91527	87447	1	True				
ANR	87469	CallExpression	"sdb_set ( db , key , estr , cas )"		87447	0					
ANR	87470	Callee	sdb_set		87447	0					
ANR	87471	Identifier	sdb_set		87447	0					
ANR	87472	ArgumentList	db		87447	1					
ANR	87473	Argument	db		87447	0					
ANR	87474	Identifier	db		87447	0					
ANR	87475	Argument	key		87447	1					
ANR	87476	Identifier	key		87447	0					
ANR	87477	Argument	estr		87447	2					
ANR	87478	Identifier	estr		87447	0					
ANR	87479	Argument	cas		87447	3					
ANR	87480	Identifier	cas		87447	0					
ANR	87481	ExpressionStatement	free ( estr )	3628:1:91530:91541	87447	2	True				
ANR	87482	CallExpression	free ( estr )		87447	0					
ANR	87483	Callee	free		87447	0					
ANR	87484	Identifier	free		87447	0					
ANR	87485	ArgumentList	estr		87447	1					
ANR	87486	Argument	estr		87447	0					
ANR	87487	Identifier	estr		87447	0					
ANR	87488	ReturnType	static void		87447	1					
ANR	87489	Identifier	sdb_set_enc		87447	2					
ANR	87490	ParameterList	"Sdb * db , const char * key , const char * v , ut32 cas"		87447	3					
ANR	87491	Parameter	Sdb * db	3625:24:91396:91402	87447	0	True				
ANR	87492	ParameterType	Sdb *		87447	0					
ANR	87493	Identifier	db		87447	1					
ANR	87494	Parameter	const char * key	3625:33:91405:91419	87447	1	True				
ANR	87495	ParameterType	const char *		87447	0					
ANR	87496	Identifier	key		87447	1					
ANR	87497	Parameter	const char * v	3625:50:91422:91434	87447	2	True				
ANR	87498	ParameterType	const char *		87447	0					
ANR	87499	Identifier	v		87447	1					
ANR	87500	Parameter	ut32 cas	3625:65:91437:91444	87447	3	True				
ANR	87501	ParameterType	ut32		87447	0					
ANR	87502	Identifier	cas		87447	1					
ANR	87503	CFGEntryNode	ENTRY		87447		True				
ANR	87504	CFGExitNode	EXIT		87447		True				
ANR	87505	Symbol	estr		87447						
ANR	87506	Symbol	cas		87447						
ANR	87507	Symbol	v		87447						
ANR	87508	Symbol	sdb_encode		87447						
ANR	87509	Symbol	db		87447						
ANR	87510	Symbol	key		87447						
ANR	87511	Function	agraph_sdb_init	3631:0:91546:92081							
ANR	87512	FunctionDef	agraph_sdb_init (const RAGraph * g)		87511	0					
ANR	87513	CompoundStatement		3631:46:91592:92081	87511	0					
ANR	87514	ExpressionStatement	"sdb_bool_set ( g -> db , ""agraph.is_callgraph"" , g -> is_callgraph , 0 )"	3632:1:91595:91658	87511	0	True				
ANR	87515	CallExpression	"sdb_bool_set ( g -> db , ""agraph.is_callgraph"" , g -> is_callgraph , 0 )"		87511	0					
ANR	87516	Callee	sdb_bool_set		87511	0					
ANR	87517	Identifier	sdb_bool_set		87511	0					
ANR	87518	ArgumentList	g -> db		87511	1					
ANR	87519	Argument	g -> db		87511	0					
ANR	87520	PtrMemberAccess	g -> db		87511	0					
ANR	87521	Identifier	g		87511	0					
ANR	87522	Identifier	db		87511	1					
ANR	87523	Argument	"""agraph.is_callgraph"""		87511	1					
ANR	87524	PrimaryExpression	"""agraph.is_callgraph"""		87511	0					
ANR	87525	Argument	g -> is_callgraph		87511	2					
ANR	87526	PtrMemberAccess	g -> is_callgraph		87511	0					
ANR	87527	Identifier	g		87511	0					
ANR	87528	Identifier	is_callgraph		87511	1					
ANR	87529	Argument	0		87511	3					
ANR	87530	PrimaryExpression	0		87511	0					
ANR	87531	IdentifierDeclStatement	RCons * cons = r_cons_singleton ( ) ;	3633:1:91661:91694	87511	1	True				
ANR	87532	IdentifierDecl	* cons = r_cons_singleton ( )		87511	0					
ANR	87533	IdentifierDeclType	RCons *		87511	0					
ANR	87534	Identifier	cons		87511	1					
ANR	87535	AssignmentExpression	* cons = r_cons_singleton ( )		87511	2		=			
ANR	87536	Identifier	cons		87511	0					
ANR	87537	CallExpression	r_cons_singleton ( )		87511	1					
ANR	87538	Callee	r_cons_singleton		87511	0					
ANR	87539	Identifier	r_cons_singleton		87511	0					
ANR	87540	ArgumentList			87511	1					
ANR	87541	ExpressionStatement	"sdb_set_enc ( g -> db , ""agraph.color_box"" , cons -> context -> pal . graph_box , 0 )"	3634:1:91697:91769	87511	2	True				
ANR	87542	CallExpression	"sdb_set_enc ( g -> db , ""agraph.color_box"" , cons -> context -> pal . graph_box , 0 )"		87511	0					
ANR	87543	Callee	sdb_set_enc		87511	0					
ANR	87544	Identifier	sdb_set_enc		87511	0					
ANR	87545	ArgumentList	g -> db		87511	1					
ANR	87546	Argument	g -> db		87511	0					
ANR	87547	PtrMemberAccess	g -> db		87511	0					
ANR	87548	Identifier	g		87511	0					
ANR	87549	Identifier	db		87511	1					
ANR	87550	Argument	"""agraph.color_box"""		87511	1					
ANR	87551	PrimaryExpression	"""agraph.color_box"""		87511	0					
ANR	87552	Argument	cons -> context -> pal . graph_box		87511	2					
ANR	87553	MemberAccess	cons -> context -> pal . graph_box		87511	0					
ANR	87554	PtrMemberAccess	cons -> context -> pal		87511	0					
ANR	87555	PtrMemberAccess	cons -> context		87511	0					
ANR	87556	Identifier	cons		87511	0					
ANR	87557	Identifier	context		87511	1					
ANR	87558	Identifier	pal		87511	1					
ANR	87559	Identifier	graph_box		87511	1					
ANR	87560	Argument	0		87511	3					
ANR	87561	PrimaryExpression	0		87511	0					
ANR	87562	ExpressionStatement	"sdb_set_enc ( g -> db , ""agraph.color_box2"" , cons -> context -> pal . graph_box2 , 0 )"	3635:1:91772:91846	87511	3	True				
ANR	87563	CallExpression	"sdb_set_enc ( g -> db , ""agraph.color_box2"" , cons -> context -> pal . graph_box2 , 0 )"		87511	0					
ANR	87564	Callee	sdb_set_enc		87511	0					
ANR	87565	Identifier	sdb_set_enc		87511	0					
ANR	87566	ArgumentList	g -> db		87511	1					
ANR	87567	Argument	g -> db		87511	0					
ANR	87568	PtrMemberAccess	g -> db		87511	0					
ANR	87569	Identifier	g		87511	0					
ANR	87570	Identifier	db		87511	1					
ANR	87571	Argument	"""agraph.color_box2"""		87511	1					
ANR	87572	PrimaryExpression	"""agraph.color_box2"""		87511	0					
ANR	87573	Argument	cons -> context -> pal . graph_box2		87511	2					
ANR	87574	MemberAccess	cons -> context -> pal . graph_box2		87511	0					
ANR	87575	PtrMemberAccess	cons -> context -> pal		87511	0					
ANR	87576	PtrMemberAccess	cons -> context		87511	0					
ANR	87577	Identifier	cons		87511	0					
ANR	87578	Identifier	context		87511	1					
ANR	87579	Identifier	pal		87511	1					
ANR	87580	Identifier	graph_box2		87511	1					
ANR	87581	Argument	0		87511	3					
ANR	87582	PrimaryExpression	0		87511	0					
ANR	87583	ExpressionStatement	"sdb_set_enc ( g -> db , ""agraph.color_box3"" , cons -> context -> pal . graph_box3 , 0 )"	3636:1:91849:91923	87511	4	True				
ANR	87584	CallExpression	"sdb_set_enc ( g -> db , ""agraph.color_box3"" , cons -> context -> pal . graph_box3 , 0 )"		87511	0					
ANR	87585	Callee	sdb_set_enc		87511	0					
ANR	87586	Identifier	sdb_set_enc		87511	0					
ANR	87587	ArgumentList	g -> db		87511	1					
ANR	87588	Argument	g -> db		87511	0					
ANR	87589	PtrMemberAccess	g -> db		87511	0					
ANR	87590	Identifier	g		87511	0					
ANR	87591	Identifier	db		87511	1					
ANR	87592	Argument	"""agraph.color_box3"""		87511	1					
ANR	87593	PrimaryExpression	"""agraph.color_box3"""		87511	0					
ANR	87594	Argument	cons -> context -> pal . graph_box3		87511	2					
ANR	87595	MemberAccess	cons -> context -> pal . graph_box3		87511	0					
ANR	87596	PtrMemberAccess	cons -> context -> pal		87511	0					
ANR	87597	PtrMemberAccess	cons -> context		87511	0					
ANR	87598	Identifier	cons		87511	0					
ANR	87599	Identifier	context		87511	1					
ANR	87600	Identifier	pal		87511	1					
ANR	87601	Identifier	graph_box3		87511	1					
ANR	87602	Argument	0		87511	3					
ANR	87603	PrimaryExpression	0		87511	0					
ANR	87604	ExpressionStatement	"sdb_set_enc ( g -> db , ""agraph.color_true"" , cons -> context -> pal . graph_true , 0 )"	3637:1:91926:92000	87511	5	True				
ANR	87605	CallExpression	"sdb_set_enc ( g -> db , ""agraph.color_true"" , cons -> context -> pal . graph_true , 0 )"		87511	0					
ANR	87606	Callee	sdb_set_enc		87511	0					
ANR	87607	Identifier	sdb_set_enc		87511	0					
ANR	87608	ArgumentList	g -> db		87511	1					
ANR	87609	Argument	g -> db		87511	0					
ANR	87610	PtrMemberAccess	g -> db		87511	0					
ANR	87611	Identifier	g		87511	0					
ANR	87612	Identifier	db		87511	1					
ANR	87613	Argument	"""agraph.color_true"""		87511	1					
ANR	87614	PrimaryExpression	"""agraph.color_true"""		87511	0					
ANR	87615	Argument	cons -> context -> pal . graph_true		87511	2					
ANR	87616	MemberAccess	cons -> context -> pal . graph_true		87511	0					
ANR	87617	PtrMemberAccess	cons -> context -> pal		87511	0					
ANR	87618	PtrMemberAccess	cons -> context		87511	0					
ANR	87619	Identifier	cons		87511	0					
ANR	87620	Identifier	context		87511	1					
ANR	87621	Identifier	pal		87511	1					
ANR	87622	Identifier	graph_true		87511	1					
ANR	87623	Argument	0		87511	3					
ANR	87624	PrimaryExpression	0		87511	0					
ANR	87625	ExpressionStatement	"sdb_set_enc ( g -> db , ""agraph.color_false"" , cons -> context -> pal . graph_false , 0 )"	3638:1:92003:92079	87511	6	True				
ANR	87626	CallExpression	"sdb_set_enc ( g -> db , ""agraph.color_false"" , cons -> context -> pal . graph_false , 0 )"		87511	0					
ANR	87627	Callee	sdb_set_enc		87511	0					
ANR	87628	Identifier	sdb_set_enc		87511	0					
ANR	87629	ArgumentList	g -> db		87511	1					
ANR	87630	Argument	g -> db		87511	0					
ANR	87631	PtrMemberAccess	g -> db		87511	0					
ANR	87632	Identifier	g		87511	0					
ANR	87633	Identifier	db		87511	1					
ANR	87634	Argument	"""agraph.color_false"""		87511	1					
ANR	87635	PrimaryExpression	"""agraph.color_false"""		87511	0					
ANR	87636	Argument	cons -> context -> pal . graph_false		87511	2					
ANR	87637	MemberAccess	cons -> context -> pal . graph_false		87511	0					
ANR	87638	PtrMemberAccess	cons -> context -> pal		87511	0					
ANR	87639	PtrMemberAccess	cons -> context		87511	0					
ANR	87640	Identifier	cons		87511	0					
ANR	87641	Identifier	context		87511	1					
ANR	87642	Identifier	pal		87511	1					
ANR	87643	Identifier	graph_false		87511	1					
ANR	87644	Argument	0		87511	3					
ANR	87645	PrimaryExpression	0		87511	0					
ANR	87646	ReturnType	static void		87511	1					
ANR	87647	Identifier	agraph_sdb_init		87511	2					
ANR	87648	ParameterList	const RAGraph * g		87511	3					
ANR	87649	Parameter	const RAGraph * g	3631:28:91574:91589	87511	0	True				
ANR	87650	ParameterType	const RAGraph *		87511	0					
ANR	87651	Identifier	g		87511	1					
ANR	87652	CFGEntryNode	ENTRY		87511		True				
ANR	87653	CFGExitNode	EXIT		87511		True				
ANR	87654	Symbol	cons -> context		87511						
ANR	87655	Symbol	g		87511						
ANR	87656	Symbol	g -> db		87511						
ANR	87657	Symbol	* * cons		87511						
ANR	87658	Symbol	* g		87511						
ANR	87659	Symbol	cons -> context -> pal . graph_box2		87511						
ANR	87660	Symbol	cons -> context -> pal . graph_true		87511						
ANR	87661	Symbol	cons -> context -> pal . graph_box3		87511						
ANR	87662	Symbol	r_cons_singleton		87511						
ANR	87663	Symbol	* cons		87511						
ANR	87664	Symbol	g -> is_callgraph		87511						
ANR	87665	Symbol	cons -> context -> pal . graph_box		87511						
ANR	87666	Symbol	cons -> context -> pal . graph_false		87511						
ANR	87667	Symbol	cons -> context -> pal		87511						
ANR	87668	Symbol	* cons -> context		87511						
ANR	87669	Symbol	cons		87511						
ANR	87670	Function	r_agraph_get_sdb	3641:0:92084:92263							
ANR	87671	FunctionDef	r_agraph_get_sdb (RAGraph * g)		87670	0					
ANR	87672	CompoundStatement		3641:40:92124:92263	87670	0					
ANR	87673	ExpressionStatement	g -> need_update_dim = true	3642:1:92127:92152	87670	0	True				
ANR	87674	AssignmentExpression	g -> need_update_dim = true		87670	0		=			
ANR	87675	PtrMemberAccess	g -> need_update_dim		87670	0					
ANR	87676	Identifier	g		87670	0					
ANR	87677	Identifier	need_update_dim		87670	1					
ANR	87678	Identifier	true		87670	1					
ANR	87679	ExpressionStatement	g -> need_set_layout = true	3643:1:92155:92180	87670	1	True				
ANR	87680	AssignmentExpression	g -> need_set_layout = true		87670	0		=			
ANR	87681	PtrMemberAccess	g -> need_set_layout		87670	0					
ANR	87682	Identifier	g		87670	0					
ANR	87683	Identifier	need_set_layout		87670	1					
ANR	87684	Identifier	true		87670	1					
ANR	87685	ExpressionStatement	"check_changes ( g , false , NULL , NULL )"	3644:1:92183:92219	87670	2	True				
ANR	87686	CallExpression	"check_changes ( g , false , NULL , NULL )"		87670	0					
ANR	87687	Callee	check_changes		87670	0					
ANR	87688	Identifier	check_changes		87670	0					
ANR	87689	ArgumentList	g		87670	1					
ANR	87690	Argument	g		87670	0					
ANR	87691	Identifier	g		87670	0					
ANR	87692	Argument	false		87670	1					
ANR	87693	Identifier	false		87670	0					
ANR	87694	Argument	NULL		87670	2					
ANR	87695	Identifier	NULL		87670	0					
ANR	87696	Argument	NULL		87670	3					
ANR	87697	Identifier	NULL		87670	0					
ANR	87698	ReturnStatement	return g -> db ;	3646:1:92249:92261	87670	3	True				
ANR	87699	PtrMemberAccess	g -> db		87670	0					
ANR	87700	Identifier	g		87670	0					
ANR	87701	Identifier	db		87670	1					
ANR	87702	ReturnType	R_API Sdb *		87670	1					
ANR	87703	Identifier	r_agraph_get_sdb		87670	2					
ANR	87704	ParameterList	RAGraph * g		87670	3					
ANR	87705	Parameter	RAGraph * g	3641:28:92112:92121	87670	0	True				
ANR	87706	ParameterType	RAGraph *		87670	0					
ANR	87707	Identifier	g		87670	1					
ANR	87708	CFGEntryNode	ENTRY		87670		True				
ANR	87709	CFGExitNode	EXIT		87670		True				
ANR	87710	Symbol	* g		87670						
ANR	87711	Symbol	g -> need_set_layout		87670						
ANR	87712	Symbol	NULL		87670						
ANR	87713	Symbol	g		87670						
ANR	87714	Symbol	g -> db		87670						
ANR	87715	Symbol	true		87670						
ANR	87716	Symbol	false		87670						
ANR	87717	Symbol	g -> need_update_dim		87670						
ANR	87718	Function	r_agraph_print	3649:0:92266:92398							
ANR	87719	FunctionDef	r_agraph_print (RAGraph * g)		87718	0					
ANR	87720	CompoundStatement		3649:38:92304:92398	87718	0					
ANR	87721	ExpressionStatement	"agraph_print ( g , false , NULL , NULL )"	3650:1:92307:92342	87718	0	True				
ANR	87722	CallExpression	"agraph_print ( g , false , NULL , NULL )"		87718	0					
ANR	87723	Callee	agraph_print		87718	0					
ANR	87724	Identifier	agraph_print		87718	0					
ANR	87725	ArgumentList	g		87718	1					
ANR	87726	Argument	g		87718	0					
ANR	87727	Identifier	g		87718	0					
ANR	87728	Argument	false		87718	1					
ANR	87729	Identifier	false		87718	0					
ANR	87730	Argument	NULL		87718	2					
ANR	87731	Identifier	NULL		87718	0					
ANR	87732	Argument	NULL		87718	3					
ANR	87733	Identifier	NULL		87718	0					
ANR	87734	IfStatement	if ( g -> graph -> n_nodes > 0 )		87718	1					
ANR	87735	Condition	g -> graph -> n_nodes > 0	3651:5:92349:92369	87718	0	True				
ANR	87736	RelationalExpression	g -> graph -> n_nodes > 0		87718	0		>			
ANR	87737	PtrMemberAccess	g -> graph -> n_nodes		87718	0					
ANR	87738	PtrMemberAccess	g -> graph		87718	0					
ANR	87739	Identifier	g		87718	0					
ANR	87740	Identifier	graph		87718	1					
ANR	87741	Identifier	n_nodes		87718	1					
ANR	87742	PrimaryExpression	0		87718	1					
ANR	87743	CompoundStatement		3:28:67:67	87718	1					
ANR	87744	ExpressionStatement	r_cons_newline ( )	3652:2:92376:92393	87718	0	True				
ANR	87745	CallExpression	r_cons_newline ( )		87718	0					
ANR	87746	Callee	r_cons_newline		87718	0					
ANR	87747	Identifier	r_cons_newline		87718	0					
ANR	87748	ArgumentList			87718	1					
ANR	87749	ReturnType	R_API void		87718	1					
ANR	87750	Identifier	r_agraph_print		87718	2					
ANR	87751	ParameterList	RAGraph * g		87718	3					
ANR	87752	Parameter	RAGraph * g	3649:26:92292:92301	87718	0	True				
ANR	87753	ParameterType	RAGraph *		87718	0					
ANR	87754	Identifier	g		87718	1					
ANR	87755	CFGEntryNode	ENTRY		87718		True				
ANR	87756	CFGExitNode	EXIT		87718		True				
ANR	87757	Symbol	g -> graph -> n_nodes		87718						
ANR	87758	Symbol	* g		87718						
ANR	87759	Symbol	NULL		87718						
ANR	87760	Symbol	* * g		87718						
ANR	87761	Symbol	g -> graph		87718						
ANR	87762	Symbol	* g -> graph		87718						
ANR	87763	Symbol	g		87718						
ANR	87764	Symbol	false		87718						
ANR	87765	Function	r_agraph_print_json	3656:0:92401:93042							
ANR	87766	FunctionDef	"r_agraph_print_json (RAGraph * g , PJ * pj)"		87765	0					
ANR	87767	CompoundStatement		3656:51:92452:93042	87765	0					
ANR	87768	IdentifierDeclStatement	"RList * nodes = g -> graph -> nodes , * neighbours = NULL ;"	3657:1:92455:92505	87765	0	True				
ANR	87769	IdentifierDecl	* nodes = g -> graph -> nodes		87765	0					
ANR	87770	IdentifierDeclType	RList *		87765	0					
ANR	87771	Identifier	nodes		87765	1					
ANR	87772	AssignmentExpression	* nodes = g -> graph -> nodes		87765	2		=			
ANR	87773	Identifier	nodes		87765	0					
ANR	87774	PtrMemberAccess	g -> graph -> nodes		87765	1					
ANR	87775	PtrMemberAccess	g -> graph		87765	0					
ANR	87776	Identifier	g		87765	0					
ANR	87777	Identifier	graph		87765	1					
ANR	87778	Identifier	nodes		87765	1					
ANR	87779	IdentifierDecl	* neighbours = NULL		87765	1					
ANR	87780	IdentifierDeclType	RList *		87765	0					
ANR	87781	Identifier	neighbours		87765	1					
ANR	87782	AssignmentExpression	* neighbours = NULL		87765	2		=			
ANR	87783	Identifier	NULL		87765	0					
ANR	87784	Identifier	NULL		87765	1					
ANR	87785	IdentifierDeclStatement	"RListIter * it , * itt ;"	3658:1:92508:92527	87765	1	True				
ANR	87786	IdentifierDecl	* it		87765	0					
ANR	87787	IdentifierDeclType	RListIter *		87765	0					
ANR	87788	Identifier	it		87765	1					
ANR	87789	IdentifierDecl	* itt		87765	1					
ANR	87790	IdentifierDeclType	RListIter *		87765	0					
ANR	87791	Identifier	itt		87765	1					
ANR	87792	IdentifierDeclStatement	"RGraphNode * node = NULL , * neighbour = NULL ;"	3659:1:92530:92572	87765	2	True				
ANR	87793	IdentifierDecl	* node = NULL		87765	0					
ANR	87794	IdentifierDeclType	RGraphNode *		87765	0					
ANR	87795	Identifier	node		87765	1					
ANR	87796	AssignmentExpression	* node = NULL		87765	2		=			
ANR	87797	Identifier	NULL		87765	0					
ANR	87798	Identifier	NULL		87765	1					
ANR	87799	IdentifierDecl	* neighbour = NULL		87765	1					
ANR	87800	IdentifierDeclType	RGraphNode *		87765	0					
ANR	87801	Identifier	neighbour		87765	1					
ANR	87802	AssignmentExpression	* neighbour = NULL		87765	2		=			
ANR	87803	Identifier	NULL		87765	0					
ANR	87804	Identifier	NULL		87765	1					
ANR	87805	IfStatement	if ( ! pj )		87765	3					
ANR	87806	Condition	! pj	3660:5:92579:92581	87765	0	True				
ANR	87807	UnaryOperationExpression	! pj		87765	0					
ANR	87808	UnaryOperator	!		87765	0					
ANR	87809	Identifier	pj		87765	1					
ANR	87810	CompoundStatement		5:10:131:131	87765	1					
ANR	87811	ReturnStatement	return ;	3661:2:92588:92594	87765	0	True				
ANR	87812	Statement	r_list_foreach	3663:1:92600:92613	87765	4	True				
ANR	87813	Statement	(	3663:16:92615:92615	87765	5	True				
ANR	87814	Statement	nodes	3663:17:92616:92620	87765	6	True				
ANR	87815	Statement	","	3663:22:92621:92621	87765	7	True				
ANR	87816	Statement	it	3663:24:92623:92624	87765	8	True				
ANR	87817	Statement	","	3663:26:92625:92625	87765	9	True				
ANR	87818	Statement	node	3663:28:92627:92630	87765	10	True				
ANR	87819	Statement	)	3663:32:92631:92631	87765	11	True				
ANR	87820	CompoundStatement		10:2:225:259	87765	12					
ANR	87821	IdentifierDeclStatement	RANode * anode = ( RANode * ) node -> data ;	3664:2:92637:92674	87765	0	True				
ANR	87822	IdentifierDecl	* anode = ( RANode * ) node -> data		87765	0					
ANR	87823	IdentifierDeclType	RANode *		87765	0					
ANR	87824	Identifier	anode		87765	1					
ANR	87825	AssignmentExpression	* anode = ( RANode * ) node -> data		87765	2		=			
ANR	87826	Identifier	anode		87765	0					
ANR	87827	CastExpression	( RANode * ) node -> data		87765	1					
ANR	87828	CastTarget	RANode *		87765	0					
ANR	87829	PtrMemberAccess	node -> data		87765	1					
ANR	87830	Identifier	node		87765	0					
ANR	87831	Identifier	data		87765	1					
ANR	87832	IdentifierDeclStatement	char * label = strdup ( anode -> body ) ;	3665:2:92678:92712	87765	1	True				
ANR	87833	IdentifierDecl	* label = strdup ( anode -> body )		87765	0					
ANR	87834	IdentifierDeclType	char *		87765	0					
ANR	87835	Identifier	label		87765	1					
ANR	87836	AssignmentExpression	* label = strdup ( anode -> body )		87765	2		=			
ANR	87837	Identifier	label		87765	0					
ANR	87838	CallExpression	strdup ( anode -> body )		87765	1					
ANR	87839	Callee	strdup		87765	0					
ANR	87840	Identifier	strdup		87765	0					
ANR	87841	ArgumentList	anode -> body		87765	1					
ANR	87842	Argument	anode -> body		87765	0					
ANR	87843	PtrMemberAccess	anode -> body		87765	0					
ANR	87844	Identifier	anode		87765	0					
ANR	87845	Identifier	body		87765	1					
ANR	87846	ExpressionStatement	pj_o ( pj )	3666:2:92716:92725	87765	2	True				
ANR	87847	CallExpression	pj_o ( pj )		87765	0					
ANR	87848	Callee	pj_o		87765	0					
ANR	87849	Identifier	pj_o		87765	0					
ANR	87850	ArgumentList	pj		87765	1					
ANR	87851	Argument	pj		87765	0					
ANR	87852	Identifier	pj		87765	0					
ANR	87853	ExpressionStatement	"pj_ki ( pj , ""id"" , anode -> gnode -> idx )"	3667:2:92729:92764	87765	3	True				
ANR	87854	CallExpression	"pj_ki ( pj , ""id"" , anode -> gnode -> idx )"		87765	0					
ANR	87855	Callee	pj_ki		87765	0					
ANR	87856	Identifier	pj_ki		87765	0					
ANR	87857	ArgumentList	pj		87765	1					
ANR	87858	Argument	pj		87765	0					
ANR	87859	Identifier	pj		87765	0					
ANR	87860	Argument	"""id"""		87765	1					
ANR	87861	PrimaryExpression	"""id"""		87765	0					
ANR	87862	Argument	anode -> gnode -> idx		87765	2					
ANR	87863	PtrMemberAccess	anode -> gnode -> idx		87765	0					
ANR	87864	PtrMemberAccess	anode -> gnode		87765	0					
ANR	87865	Identifier	anode		87765	0					
ANR	87866	Identifier	gnode		87765	1					
ANR	87867	Identifier	idx		87765	1					
ANR	87868	ExpressionStatement	"pj_ks ( pj , ""title"" , anode -> title )"	3668:2:92768:92801	87765	4	True				
ANR	87869	CallExpression	"pj_ks ( pj , ""title"" , anode -> title )"		87765	0					
ANR	87870	Callee	pj_ks		87765	0					
ANR	87871	Identifier	pj_ks		87765	0					
ANR	87872	ArgumentList	pj		87765	1					
ANR	87873	Argument	pj		87765	0					
ANR	87874	Identifier	pj		87765	0					
ANR	87875	Argument	"""title"""		87765	1					
ANR	87876	PrimaryExpression	"""title"""		87765	0					
ANR	87877	Argument	anode -> title		87765	2					
ANR	87878	PtrMemberAccess	anode -> title		87765	0					
ANR	87879	Identifier	anode		87765	0					
ANR	87880	Identifier	title		87765	1					
ANR	87881	ExpressionStatement	"pj_ks ( pj , ""body"" , label )"	3669:2:92805:92830	87765	5	True				
ANR	87882	CallExpression	"pj_ks ( pj , ""body"" , label )"		87765	0					
ANR	87883	Callee	pj_ks		87765	0					
ANR	87884	Identifier	pj_ks		87765	0					
ANR	87885	ArgumentList	pj		87765	1					
ANR	87886	Argument	pj		87765	0					
ANR	87887	Identifier	pj		87765	0					
ANR	87888	Argument	"""body"""		87765	1					
ANR	87889	PrimaryExpression	"""body"""		87765	0					
ANR	87890	Argument	label		87765	2					
ANR	87891	Identifier	label		87765	0					
ANR	87892	ExpressionStatement	"pj_k ( pj , ""out_nodes"" )"	3670:2:92834:92856	87765	6	True				
ANR	87893	CallExpression	"pj_k ( pj , ""out_nodes"" )"		87765	0					
ANR	87894	Callee	pj_k		87765	0					
ANR	87895	Identifier	pj_k		87765	0					
ANR	87896	ArgumentList	pj		87765	1					
ANR	87897	Argument	pj		87765	0					
ANR	87898	Identifier	pj		87765	0					
ANR	87899	Argument	"""out_nodes"""		87765	1					
ANR	87900	PrimaryExpression	"""out_nodes"""		87765	0					
ANR	87901	ExpressionStatement	pj_a ( pj )	3671:2:92860:92869	87765	7	True				
ANR	87902	CallExpression	pj_a ( pj )		87765	0					
ANR	87903	Callee	pj_a		87765	0					
ANR	87904	Identifier	pj_a		87765	0					
ANR	87905	ArgumentList	pj		87765	1					
ANR	87906	Argument	pj		87765	0					
ANR	87907	Identifier	pj		87765	0					
ANR	87908	ExpressionStatement	neighbours = anode -> gnode -> out_nodes	3672:2:92873:92909	87765	8	True				
ANR	87909	AssignmentExpression	neighbours = anode -> gnode -> out_nodes		87765	0		=			
ANR	87910	Identifier	neighbours		87765	0					
ANR	87911	PtrMemberAccess	anode -> gnode -> out_nodes		87765	1					
ANR	87912	PtrMemberAccess	anode -> gnode		87765	0					
ANR	87913	Identifier	anode		87765	0					
ANR	87914	Identifier	gnode		87765	1					
ANR	87915	Identifier	out_nodes		87765	1					
ANR	87916	Statement	r_list_foreach	3673:2:92913:92926	87765	9	True				
ANR	87917	Statement	(	3673:17:92928:92928	87765	10	True				
ANR	87918	Statement	neighbours	3673:18:92929:92938	87765	11	True				
ANR	87919	Statement	","	3673:28:92939:92939	87765	12	True				
ANR	87920	Statement	itt	3673:30:92941:92943	87765	13	True				
ANR	87921	Statement	","	3673:33:92944:92944	87765	14	True				
ANR	87922	Statement	neighbour	3673:35:92946:92954	87765	15	True				
ANR	87923	Statement	)	3673:44:92955:92955	87765	16	True				
ANR	87924	CompoundStatement		18:46:504:504	87765	17					
ANR	87925	ExpressionStatement	"pj_i ( pj , neighbour -> idx )"	3674:3:92962:92987	87765	0	True				
ANR	87926	CallExpression	"pj_i ( pj , neighbour -> idx )"		87765	0					
ANR	87927	Callee	pj_i		87765	0					
ANR	87928	Identifier	pj_i		87765	0					
ANR	87929	ArgumentList	pj		87765	1					
ANR	87930	Argument	pj		87765	0					
ANR	87931	Identifier	pj		87765	0					
ANR	87932	Argument	neighbour -> idx		87765	1					
ANR	87933	PtrMemberAccess	neighbour -> idx		87765	0					
ANR	87934	Identifier	neighbour		87765	0					
ANR	87935	Identifier	idx		87765	1					
ANR	87936	ExpressionStatement	pj_end ( pj )	3676:2:92995:93006	87765	18	True				
ANR	87937	CallExpression	pj_end ( pj )		87765	0					
ANR	87938	Callee	pj_end		87765	0					
ANR	87939	Identifier	pj_end		87765	0					
ANR	87940	ArgumentList	pj		87765	1					
ANR	87941	Argument	pj		87765	0					
ANR	87942	Identifier	pj		87765	0					
ANR	87943	ExpressionStatement	pj_end ( pj )	3677:2:93010:93021	87765	19	True				
ANR	87944	CallExpression	pj_end ( pj )		87765	0					
ANR	87945	Callee	pj_end		87765	0					
ANR	87946	Identifier	pj_end		87765	0					
ANR	87947	ArgumentList	pj		87765	1					
ANR	87948	Argument	pj		87765	0					
ANR	87949	Identifier	pj		87765	0					
ANR	87950	ExpressionStatement	free ( label )	3678:2:93025:93037	87765	20	True				
ANR	87951	CallExpression	free ( label )		87765	0					
ANR	87952	Callee	free		87765	0					
ANR	87953	Identifier	free		87765	0					
ANR	87954	ArgumentList	label		87765	1					
ANR	87955	Argument	label		87765	0					
ANR	87956	Identifier	label		87765	0					
ANR	87957	ReturnType	R_API void		87765	1					
ANR	87958	Identifier	r_agraph_print_json		87765	2					
ANR	87959	ParameterList	"RAGraph * g , PJ * pj"		87765	3					
ANR	87960	Parameter	RAGraph * g	3656:31:92432:92441	87765	0	True				
ANR	87961	ParameterType	RAGraph *		87765	0					
ANR	87962	Identifier	g		87765	1					
ANR	87963	Parameter	PJ * pj	3656:43:92444:92449	87765	1	True				
ANR	87964	ParameterType	PJ *		87765	0					
ANR	87965	Identifier	pj		87765	1					
ANR	87966	CFGEntryNode	ENTRY		87765		True				
ANR	87967	CFGExitNode	EXIT		87765		True				
ANR	87968	Symbol	* g -> graph		87765						
ANR	87969	Symbol	* anode		87765						
ANR	87970	Symbol	anode -> title		87765						
ANR	87971	Symbol	neighbour		87765						
ANR	87972	Symbol	anode -> gnode -> idx		87765						
ANR	87973	Symbol	node -> data		87765						
ANR	87974	Symbol	anode -> gnode -> out_nodes		87765						
ANR	87975	Symbol	g -> graph		87765						
ANR	87976	Symbol	* node		87765						
ANR	87977	Symbol	g -> graph -> nodes		87765						
ANR	87978	Symbol	anode -> body		87765						
ANR	87979	Symbol	anode -> gnode		87765						
ANR	87980	Symbol	NULL		87765						
ANR	87981	Symbol	* * g		87765						
ANR	87982	Symbol	neighbour -> idx		87765						
ANR	87983	Symbol	g		87765						
ANR	87984	Symbol	itt		87765						
ANR	87985	Symbol	anode		87765						
ANR	87986	Symbol	neighbours		87765						
ANR	87987	Symbol	* anode -> gnode		87765						
ANR	87988	Symbol	it		87765						
ANR	87989	Symbol	label		87765						
ANR	87990	Symbol	* neighbour		87765						
ANR	87991	Symbol	* g		87765						
ANR	87992	Symbol	node		87765						
ANR	87993	Symbol	nodes		87765						
ANR	87994	Symbol	pj		87765						
ANR	87995	Symbol	strdup		87765						
ANR	87996	Symbol	* * anode		87765						
ANR	87997	Function	r_agraph_set_title	3682:0:93045:93214							
ANR	87998	FunctionDef	"r_agraph_set_title (RAGraph * g , const char * title)"		87997	0					
ANR	87999	CompoundStatement		3682:61:93106:93214	87997	0					
ANR	88000	ExpressionStatement	free ( g -> title )	3683:1:93109:93124	87997	0	True				
ANR	88001	CallExpression	free ( g -> title )		87997	0					
ANR	88002	Callee	free		87997	0					
ANR	88003	Identifier	free		87997	0					
ANR	88004	ArgumentList	g -> title		87997	1					
ANR	88005	Argument	g -> title		87997	0					
ANR	88006	PtrMemberAccess	g -> title		87997	0					
ANR	88007	Identifier	g		87997	0					
ANR	88008	Identifier	title		87997	1					
ANR	88009	ExpressionStatement	g -> title = title ? strdup ( title ) : NULL	3684:1:93127:93165	87997	1	True				
ANR	88010	AssignmentExpression	g -> title = title ? strdup ( title ) : NULL		87997	0		=			
ANR	88011	PtrMemberAccess	g -> title		87997	0					
ANR	88012	Identifier	g		87997	0					
ANR	88013	Identifier	title		87997	1					
ANR	88014	ConditionalExpression	title ? strdup ( title ) : NULL		87997	1					
ANR	88015	Condition	title		87997	0					
ANR	88016	Identifier	title		87997	0					
ANR	88017	CallExpression	strdup ( title )		87997	1					
ANR	88018	Callee	strdup		87997	0					
ANR	88019	Identifier	strdup		87997	0					
ANR	88020	ArgumentList	title		87997	1					
ANR	88021	Argument	title		87997	0					
ANR	88022	Identifier	title		87997	0					
ANR	88023	Identifier	NULL		87997	2					
ANR	88024	ExpressionStatement	"sdb_set ( g -> db , ""agraph.title"" , g -> title , 0 )"	3685:1:93168:93212	87997	2	True				
ANR	88025	CallExpression	"sdb_set ( g -> db , ""agraph.title"" , g -> title , 0 )"		87997	0					
ANR	88026	Callee	sdb_set		87997	0					
ANR	88027	Identifier	sdb_set		87997	0					
ANR	88028	ArgumentList	g -> db		87997	1					
ANR	88029	Argument	g -> db		87997	0					
ANR	88030	PtrMemberAccess	g -> db		87997	0					
ANR	88031	Identifier	g		87997	0					
ANR	88032	Identifier	db		87997	1					
ANR	88033	Argument	"""agraph.title"""		87997	1					
ANR	88034	PrimaryExpression	"""agraph.title"""		87997	0					
ANR	88035	Argument	g -> title		87997	2					
ANR	88036	PtrMemberAccess	g -> title		87997	0					
ANR	88037	Identifier	g		87997	0					
ANR	88038	Identifier	title		87997	1					
ANR	88039	Argument	0		87997	3					
ANR	88040	PrimaryExpression	0		87997	0					
ANR	88041	ReturnType	R_API void		87997	1					
ANR	88042	Identifier	r_agraph_set_title		87997	2					
ANR	88043	ParameterList	"RAGraph * g , const char * title"		87997	3					
ANR	88044	Parameter	RAGraph * g	3682:30:93075:93084	87997	0	True				
ANR	88045	ParameterType	RAGraph *		87997	0					
ANR	88046	Identifier	g		87997	1					
ANR	88047	Parameter	const char * title	3682:42:93087:93103	87997	1	True				
ANR	88048	ParameterType	const char *		87997	0					
ANR	88049	Identifier	title		87997	1					
ANR	88050	CFGEntryNode	ENTRY		87997		True				
ANR	88051	CFGExitNode	EXIT		87997		True				
ANR	88052	Symbol	* g		87997						
ANR	88053	Symbol	g -> title		87997						
ANR	88054	Symbol	NULL		87997						
ANR	88055	Symbol	g		87997						
ANR	88056	Symbol	g -> db		87997						
ANR	88057	Symbol	strdup		87997						
ANR	88058	Symbol	title		87997						
ANR	88059	Function	r_agraph_add_node_with_color	3688:0:93217:94639							
ANR	88060	FunctionDef	"r_agraph_add_node_with_color (const RAGraph * g , const char * title , const char * body , int color)"		88059	0					
ANR	88061	CompoundStatement		3688:109:93326:94639	88059	0					
ANR	88062	IdentifierDeclStatement	"RANode * res = r_agraph_get_node ( g , title ) ;"	3689:8:93336:93378	88059	0	True				
ANR	88063	IdentifierDecl	"* res = r_agraph_get_node ( g , title )"		88059	0					
ANR	88064	IdentifierDeclType	RANode *		88059	0					
ANR	88065	Identifier	res		88059	1					
ANR	88066	AssignmentExpression	"* res = r_agraph_get_node ( g , title )"		88059	2		=			
ANR	88067	Identifier	res		88059	0					
ANR	88068	CallExpression	"r_agraph_get_node ( g , title )"		88059	1					
ANR	88069	Callee	r_agraph_get_node		88059	0					
ANR	88070	Identifier	r_agraph_get_node		88059	0					
ANR	88071	ArgumentList	g		88059	1					
ANR	88072	Argument	g		88059	0					
ANR	88073	Identifier	g		88059	0					
ANR	88074	Argument	title		88059	1					
ANR	88075	Identifier	title		88059	0					
ANR	88076	IfStatement	if ( res )		88059	1					
ANR	88077	Condition	res	3690:12:93392:93394	88059	0	True				
ANR	88078	Identifier	res		88059	0					
ANR	88079	CompoundStatement		3:17:70:70	88059	1					
ANR	88080	ReturnStatement	return res ;	3691:16:93415:93425	88059	0	True				
ANR	88081	Identifier	res		88059	0					
ANR	88082	ExpressionStatement	res = R_NEW0 ( RANode )	3693:8:93445:93466	88059	2	True				
ANR	88083	AssignmentExpression	res = R_NEW0 ( RANode )		88059	0		=			
ANR	88084	Identifier	res		88059	0					
ANR	88085	CallExpression	R_NEW0 ( RANode )		88059	1					
ANR	88086	Callee	R_NEW0		88059	0					
ANR	88087	Identifier	R_NEW0		88059	0					
ANR	88088	ArgumentList	RANode		88059	1					
ANR	88089	Argument	RANode		88059	0					
ANR	88090	Identifier	RANode		88059	0					
ANR	88091	IfStatement	if ( ! res )		88059	3					
ANR	88092	Condition	! res	3694:12:93480:93483	88059	0	True				
ANR	88093	UnaryOperationExpression	! res		88059	0					
ANR	88094	UnaryOperator	!		88059	0					
ANR	88095	Identifier	res		88059	1					
ANR	88096	CompoundStatement		7:18:159:159	88059	1					
ANR	88097	ReturnStatement	return NULL ;	3695:16:93504:93515	88059	0	True				
ANR	88098	Identifier	NULL		88059	0					
ANR	88099	ExpressionStatement	"res -> title = title ? r_str_trunc_ellipsis ( title , 255 ) : strdup ( """" )"	3698:8:93536:93603	88059	4	True				
ANR	88100	AssignmentExpression	"res -> title = title ? r_str_trunc_ellipsis ( title , 255 ) : strdup ( """" )"		88059	0		=			
ANR	88101	PtrMemberAccess	res -> title		88059	0					
ANR	88102	Identifier	res		88059	0					
ANR	88103	Identifier	title		88059	1					
ANR	88104	ConditionalExpression	"title ? r_str_trunc_ellipsis ( title , 255 ) : strdup ( """" )"		88059	1					
ANR	88105	Condition	title		88059	0					
ANR	88106	Identifier	title		88059	0					
ANR	88107	CallExpression	"r_str_trunc_ellipsis ( title , 255 )"		88059	1					
ANR	88108	Callee	r_str_trunc_ellipsis		88059	0					
ANR	88109	Identifier	r_str_trunc_ellipsis		88059	0					
ANR	88110	ArgumentList	title		88059	1					
ANR	88111	Argument	title		88059	0					
ANR	88112	Identifier	title		88059	0					
ANR	88113	Argument	255		88059	1					
ANR	88114	PrimaryExpression	255		88059	0					
ANR	88115	CallExpression	"strdup ( """" )"		88059	2					
ANR	88116	Callee	strdup		88059	0					
ANR	88117	Identifier	strdup		88059	0					
ANR	88118	ArgumentList	""""""		88059	1					
ANR	88119	Argument	""""""		88059	0					
ANR	88120	PrimaryExpression	""""""		88059	0					
ANR	88121	ExpressionStatement	"res -> body = body ? strdup ( body ) : strdup ( """" )"	3699:8:93613:93657	88059	5	True				
ANR	88122	AssignmentExpression	"res -> body = body ? strdup ( body ) : strdup ( """" )"		88059	0		=			
ANR	88123	PtrMemberAccess	res -> body		88059	0					
ANR	88124	Identifier	res		88059	0					
ANR	88125	Identifier	body		88059	1					
ANR	88126	ConditionalExpression	"body ? strdup ( body ) : strdup ( """" )"		88059	1					
ANR	88127	Condition	body		88059	0					
ANR	88128	Identifier	body		88059	0					
ANR	88129	CallExpression	strdup ( body )		88059	1					
ANR	88130	Callee	strdup		88059	0					
ANR	88131	Identifier	strdup		88059	0					
ANR	88132	ArgumentList	body		88059	1					
ANR	88133	Argument	body		88059	0					
ANR	88134	Identifier	body		88059	0					
ANR	88135	CallExpression	"strdup ( """" )"		88059	2					
ANR	88136	Callee	strdup		88059	0					
ANR	88137	Identifier	strdup		88059	0					
ANR	88138	ArgumentList	""""""		88059	1					
ANR	88139	Argument	""""""		88059	0					
ANR	88140	PrimaryExpression	""""""		88059	0					
ANR	88141	ExpressionStatement	res -> layer = - 1	3700:8:93667:93682	88059	6	True				
ANR	88142	AssignmentExpression	res -> layer = - 1		88059	0		=			
ANR	88143	PtrMemberAccess	res -> layer		88059	0					
ANR	88144	Identifier	res		88059	0					
ANR	88145	Identifier	layer		88059	1					
ANR	88146	UnaryOperationExpression	- 1		88059	1					
ANR	88147	UnaryOperator	-		88059	0					
ANR	88148	PrimaryExpression	1		88059	1					
ANR	88149	ExpressionStatement	res -> pos_in_layer = - 1	3701:8:93692:93714	88059	7	True				
ANR	88150	AssignmentExpression	res -> pos_in_layer = - 1		88059	0		=			
ANR	88151	PtrMemberAccess	res -> pos_in_layer		88059	0					
ANR	88152	Identifier	res		88059	0					
ANR	88153	Identifier	pos_in_layer		88059	1					
ANR	88154	UnaryOperationExpression	- 1		88059	1					
ANR	88155	UnaryOperator	-		88059	0					
ANR	88156	PrimaryExpression	1		88059	1					
ANR	88157	ExpressionStatement	res -> is_dummy = false	3702:8:93724:93745	88059	8	True				
ANR	88158	AssignmentExpression	res -> is_dummy = false		88059	0		=			
ANR	88159	PtrMemberAccess	res -> is_dummy		88059	0					
ANR	88160	Identifier	res		88059	0					
ANR	88161	Identifier	is_dummy		88059	1					
ANR	88162	Identifier	false		88059	1					
ANR	88163	ExpressionStatement	res -> is_reversed = false	3703:8:93755:93779	88059	9	True				
ANR	88164	AssignmentExpression	res -> is_reversed = false		88059	0		=			
ANR	88165	PtrMemberAccess	res -> is_reversed		88059	0					
ANR	88166	Identifier	res		88059	0					
ANR	88167	Identifier	is_reversed		88059	1					
ANR	88168	Identifier	false		88059	1					
ANR	88169	ExpressionStatement	res -> klass = - 1	3704:8:93789:93804	88059	10	True				
ANR	88170	AssignmentExpression	res -> klass = - 1		88059	0		=			
ANR	88171	PtrMemberAccess	res -> klass		88059	0					
ANR	88172	Identifier	res		88059	0					
ANR	88173	Identifier	klass		88059	1					
ANR	88174	UnaryOperationExpression	- 1		88059	1					
ANR	88175	UnaryOperator	-		88059	0					
ANR	88176	PrimaryExpression	1		88059	1					
ANR	88177	ExpressionStatement	res -> difftype = color	3705:8:93814:93835	88059	11	True				
ANR	88178	AssignmentExpression	res -> difftype = color		88059	0		=			
ANR	88179	PtrMemberAccess	res -> difftype		88059	0					
ANR	88180	Identifier	res		88059	0					
ANR	88181	Identifier	difftype		88059	1					
ANR	88182	Identifier	color		88059	1					
ANR	88183	ExpressionStatement	"res -> gnode = r_graph_add_node ( g -> graph , res )"	3706:8:93845:93890	88059	12	True				
ANR	88184	AssignmentExpression	"res -> gnode = r_graph_add_node ( g -> graph , res )"		88059	0		=			
ANR	88185	PtrMemberAccess	res -> gnode		88059	0					
ANR	88186	Identifier	res		88059	0					
ANR	88187	Identifier	gnode		88059	1					
ANR	88188	CallExpression	"r_graph_add_node ( g -> graph , res )"		88059	1					
ANR	88189	Callee	r_graph_add_node		88059	0					
ANR	88190	Identifier	r_graph_add_node		88059	0					
ANR	88191	ArgumentList	g -> graph		88059	1					
ANR	88192	Argument	g -> graph		88059	0					
ANR	88193	PtrMemberAccess	g -> graph		88059	0					
ANR	88194	Identifier	g		88059	0					
ANR	88195	Identifier	graph		88059	1					
ANR	88196	Argument	res		88059	1					
ANR	88197	Identifier	res		88059	0					
ANR	88198	ExpressionStatement	"sdb_num_set ( g -> nodes , res -> title , ( ut64 ) ( size_t ) res , 0 )"	3707:8:93900:93958	88059	13	True				
ANR	88199	CallExpression	"sdb_num_set ( g -> nodes , res -> title , ( ut64 ) ( size_t ) res , 0 )"		88059	0					
ANR	88200	Callee	sdb_num_set		88059	0					
ANR	88201	Identifier	sdb_num_set		88059	0					
ANR	88202	ArgumentList	g -> nodes		88059	1					
ANR	88203	Argument	g -> nodes		88059	0					
ANR	88204	PtrMemberAccess	g -> nodes		88059	0					
ANR	88205	Identifier	g		88059	0					
ANR	88206	Identifier	nodes		88059	1					
ANR	88207	Argument	res -> title		88059	1					
ANR	88208	PtrMemberAccess	res -> title		88059	0					
ANR	88209	Identifier	res		88059	0					
ANR	88210	Identifier	title		88059	1					
ANR	88211	Argument	( ut64 ) ( size_t ) res		88059	2					
ANR	88212	CastExpression	( ut64 ) ( size_t ) res		88059	0					
ANR	88213	CastTarget	ut64		88059	0					
ANR	88214	CastExpression	( size_t ) res		88059	1					
ANR	88215	CastTarget	size_t		88059	0					
ANR	88216	Identifier	res		88059	1					
ANR	88217	Argument	0		88059	3					
ANR	88218	PrimaryExpression	0		88059	0					
ANR	88219	IfStatement	if ( res -> title )		88059	14					
ANR	88220	Condition	res -> title	3708:12:93972:93981	88059	0	True				
ANR	88221	PtrMemberAccess	res -> title		88059	0					
ANR	88222	Identifier	res		88059	0					
ANR	88223	Identifier	title		88059	1					
ANR	88224	CompoundStatement		23:16:711:721	88059	1					
ANR	88225	IdentifierDeclStatement	"char * s , * estr , * b ;"	3709:16:94002:94020	88059	0	True				
ANR	88226	IdentifierDecl	* s		88059	0					
ANR	88227	IdentifierDeclType	char *		88059	0					
ANR	88228	Identifier	s		88059	1					
ANR	88229	IdentifierDecl	* estr		88059	1					
ANR	88230	IdentifierDeclType	char *		88059	0					
ANR	88231	Identifier	estr		88059	1					
ANR	88232	IdentifierDecl	* b		88059	2					
ANR	88233	IdentifierDeclType	char *		88059	0					
ANR	88234	Identifier	b		88059	1					
ANR	88235	IdentifierDeclStatement	size_t len ;	3710:16:94038:94048	88059	1	True				
ANR	88236	IdentifierDecl	len		88059	0					
ANR	88237	IdentifierDeclType	size_t		88059	0					
ANR	88238	Identifier	len		88059	1					
ANR	88239	ExpressionStatement	"sdb_array_add ( g -> db , ""agraph.nodes"" , res -> title , 0 )"	3711:16:94066:94118	88059	2	True				
ANR	88240	CallExpression	"sdb_array_add ( g -> db , ""agraph.nodes"" , res -> title , 0 )"		88059	0					
ANR	88241	Callee	sdb_array_add		88059	0					
ANR	88242	Identifier	sdb_array_add		88059	0					
ANR	88243	ArgumentList	g -> db		88059	1					
ANR	88244	Argument	g -> db		88059	0					
ANR	88245	PtrMemberAccess	g -> db		88059	0					
ANR	88246	Identifier	g		88059	0					
ANR	88247	Identifier	db		88059	1					
ANR	88248	Argument	"""agraph.nodes"""		88059	1					
ANR	88249	PrimaryExpression	"""agraph.nodes"""		88059	0					
ANR	88250	Argument	res -> title		88059	2					
ANR	88251	PtrMemberAccess	res -> title		88059	0					
ANR	88252	Identifier	res		88059	0					
ANR	88253	Identifier	title		88059	1					
ANR	88254	Argument	0		88059	3					
ANR	88255	PrimaryExpression	0		88059	0					
ANR	88256	ExpressionStatement	b = strdup ( res -> body )	3712:16:94136:94158	88059	3	True				
ANR	88257	AssignmentExpression	b = strdup ( res -> body )		88059	0		=			
ANR	88258	Identifier	b		88059	0					
ANR	88259	CallExpression	strdup ( res -> body )		88059	1					
ANR	88260	Callee	strdup		88059	0					
ANR	88261	Identifier	strdup		88059	0					
ANR	88262	ArgumentList	res -> body		88059	1					
ANR	88263	Argument	res -> body		88059	0					
ANR	88264	PtrMemberAccess	res -> body		88059	0					
ANR	88265	Identifier	res		88059	0					
ANR	88266	Identifier	body		88059	1					
ANR	88267	ExpressionStatement	len = strlen ( b )	3713:16:94176:94192	88059	4	True				
ANR	88268	AssignmentExpression	len = strlen ( b )		88059	0		=			
ANR	88269	Identifier	len		88059	0					
ANR	88270	CallExpression	strlen ( b )		88059	1					
ANR	88271	Callee	strlen		88059	0					
ANR	88272	Identifier	strlen		88059	0					
ANR	88273	ArgumentList	b		88059	1					
ANR	88274	Argument	b		88059	0					
ANR	88275	Identifier	b		88059	0					
ANR	88276	IfStatement	if ( len > 0 && b [ len - 1 ] == '\\n' )		88059	5					
ANR	88277	Condition	len > 0 && b [ len - 1 ] == '\\n'	3714:20:94214:94242	88059	0	True				
ANR	88278	AndExpression	len > 0 && b [ len - 1 ] == '\\n'		88059	0		&&			
ANR	88279	RelationalExpression	len > 0		88059	0		>			
ANR	88280	Identifier	len		88059	0					
ANR	88281	PrimaryExpression	0		88059	1					
ANR	88282	EqualityExpression	b [ len - 1 ] == '\\n'		88059	1		==			
ANR	88283	ArrayIndexing	b [ len - 1 ]		88059	0					
ANR	88284	Identifier	b		88059	0					
ANR	88285	AdditiveExpression	len - 1		88059	1		-			
ANR	88286	Identifier	len		88059	0					
ANR	88287	PrimaryExpression	1		88059	1					
ANR	88288	PrimaryExpression	'\\n'		88059	1					
ANR	88289	CompoundStatement		27:51:918:918	88059	1					
ANR	88290	ExpressionStatement	b [ len - 1 ] = '\\0'	3715:24:94271:94288	88059	0	True				
ANR	88291	AssignmentExpression	b [ len - 1 ] = '\\0'		88059	0		=			
ANR	88292	ArrayIndexing	b [ len - 1 ]		88059	0					
ANR	88293	Identifier	b		88059	0					
ANR	88294	AdditiveExpression	len - 1		88059	1		-			
ANR	88295	Identifier	len		88059	0					
ANR	88296	PrimaryExpression	1		88059	1					
ANR	88297	PrimaryExpression	'\\0'		88059	1					
ANR	88298	ExpressionStatement	"estr = sdb_encode ( ( const void * ) b , - 1 )"	3717:16:94324:94364	88059	6	True				
ANR	88299	AssignmentExpression	"estr = sdb_encode ( ( const void * ) b , - 1 )"		88059	0		=			
ANR	88300	Identifier	estr		88059	0					
ANR	88301	CallExpression	"sdb_encode ( ( const void * ) b , - 1 )"		88059	1					
ANR	88302	Callee	sdb_encode		88059	0					
ANR	88303	Identifier	sdb_encode		88059	0					
ANR	88304	ArgumentList	( const void * ) b		88059	1					
ANR	88305	Argument	( const void * ) b		88059	0					
ANR	88306	CastExpression	( const void * ) b		88059	0					
ANR	88307	CastTarget	const void *		88059	0					
ANR	88308	Identifier	b		88059	1					
ANR	88309	Argument	- 1		88059	1					
ANR	88310	UnaryOperationExpression	- 1		88059	0					
ANR	88311	UnaryOperator	-		88059	0					
ANR	88312	PrimaryExpression	1		88059	1					
ANR	88313	ExpressionStatement	"s = r_str_newf ( ""base64:%s"" , estr )"	3719:16:94433:94467	88059	7	True				
ANR	88314	AssignmentExpression	"s = r_str_newf ( ""base64:%s"" , estr )"		88059	0		=			
ANR	88315	Identifier	s		88059	0					
ANR	88316	CallExpression	"r_str_newf ( ""base64:%s"" , estr )"		88059	1					
ANR	88317	Callee	r_str_newf		88059	0					
ANR	88318	Identifier	r_str_newf		88059	0					
ANR	88319	ArgumentList	"""base64:%s"""		88059	1					
ANR	88320	Argument	"""base64:%s"""		88059	0					
ANR	88321	PrimaryExpression	"""base64:%s"""		88059	0					
ANR	88322	Argument	estr		88059	1					
ANR	88323	Identifier	estr		88059	0					
ANR	88324	ExpressionStatement	free ( estr )	3720:16:94485:94496	88059	8	True				
ANR	88325	CallExpression	free ( estr )		88059	0					
ANR	88326	Callee	free		88059	0					
ANR	88327	Identifier	free		88059	0					
ANR	88328	ArgumentList	estr		88059	1					
ANR	88329	Argument	estr		88059	0					
ANR	88330	Identifier	estr		88059	0					
ANR	88331	ExpressionStatement	free ( b )	3721:16:94514:94522	88059	9	True				
ANR	88332	CallExpression	free ( b )		88059	0					
ANR	88333	Callee	free		88059	0					
ANR	88334	Identifier	free		88059	0					
ANR	88335	ArgumentList	b		88059	1					
ANR	88336	Argument	b		88059	0					
ANR	88337	Identifier	b		88059	0					
ANR	88338	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title ) , s , 0 )"	3722:16:94540:94607	88059	10	True				
ANR	88339	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title ) , s , 0 )"		88059	0					
ANR	88340	Callee	sdb_set		88059	0					
ANR	88341	Identifier	sdb_set		88059	0					
ANR	88342	ArgumentList	g -> db		88059	1					
ANR	88343	Argument	g -> db		88059	0					
ANR	88344	PtrMemberAccess	g -> db		88059	0					
ANR	88345	Identifier	g		88059	0					
ANR	88346	Identifier	db		88059	1					
ANR	88347	Argument	"sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title )"		88059	1					
ANR	88348	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title )"		88059	0					
ANR	88349	Callee	sdb_fmt		88059	0					
ANR	88350	Identifier	sdb_fmt		88059	0					
ANR	88351	ArgumentList	"""agraph.nodes.%s.body"""		88059	1					
ANR	88352	Argument	"""agraph.nodes.%s.body"""		88059	0					
ANR	88353	PrimaryExpression	"""agraph.nodes.%s.body"""		88059	0					
ANR	88354	Argument	res -> title		88059	1					
ANR	88355	PtrMemberAccess	res -> title		88059	0					
ANR	88356	Identifier	res		88059	0					
ANR	88357	Identifier	title		88059	1					
ANR	88358	Argument	s		88059	2					
ANR	88359	Identifier	s		88059	0					
ANR	88360	Argument	0		88059	3					
ANR	88361	PrimaryExpression	0		88059	0					
ANR	88362	ReturnStatement	return res ;	3724:8:94627:94637	88059	15	True				
ANR	88363	Identifier	res		88059	0					
ANR	88364	ReturnType	R_API RANode *		88059	1					
ANR	88365	Identifier	r_agraph_add_node_with_color		88059	2					
ANR	88366	ParameterList	"const RAGraph * g , const char * title , const char * body , int color"		88059	3					
ANR	88367	Parameter	const RAGraph * g	3688:43:93260:93275	88059	0	True				
ANR	88368	ParameterType	const RAGraph *		88059	0					
ANR	88369	Identifier	g		88059	1					
ANR	88370	Parameter	const char * title	3688:61:93278:93294	88059	1	True				
ANR	88371	ParameterType	const char *		88059	0					
ANR	88372	Identifier	title		88059	1					
ANR	88373	Parameter	const char * body	3688:80:93297:93312	88059	2	True				
ANR	88374	ParameterType	const char *		88059	0					
ANR	88375	Identifier	body		88059	1					
ANR	88376	Parameter	int color	3688:98:93315:93323	88059	3	True				
ANR	88377	ParameterType	int		88059	0					
ANR	88378	Identifier	color		88059	1					
ANR	88379	CFGEntryNode	ENTRY		88059		True				
ANR	88380	CFGExitNode	EXIT		88059		True				
ANR	88381	Symbol	res -> is_reversed		88059						
ANR	88382	Symbol	res -> title		88059						
ANR	88383	Symbol	estr		88059						
ANR	88384	Symbol	color		88059						
ANR	88385	Symbol	g -> db		88059						
ANR	88386	Symbol	res -> gnode		88059						
ANR	88387	Symbol	* res		88059						
ANR	88388	Symbol	r_str_newf		88059						
ANR	88389	Symbol	title		88059						
ANR	88390	Symbol	body		88059						
ANR	88391	Symbol	res -> is_dummy		88059						
ANR	88392	Symbol	strlen		88059						
ANR	88393	Symbol	len		88059						
ANR	88394	Symbol	g -> graph		88059						
ANR	88395	Symbol	g -> nodes		88059						
ANR	88396	Symbol	r_agraph_get_node		88059						
ANR	88397	Symbol	res -> layer		88059						
ANR	88398	Symbol	sdb_encode		88059						
ANR	88399	Symbol	res -> difftype		88059						
ANR	88400	Symbol	res -> body		88059						
ANR	88401	Symbol	sdb_fmt		88059						
ANR	88402	Symbol	res		88059						
ANR	88403	Symbol	b		88059						
ANR	88404	Symbol	NULL		88059						
ANR	88405	Symbol	g		88059						
ANR	88406	Symbol	false		88059						
ANR	88407	Symbol	* b		88059						
ANR	88408	Symbol	R_NEW0		88059						
ANR	88409	Symbol	* g		88059						
ANR	88410	Symbol	s		88059						
ANR	88411	Symbol	RANode		88059						
ANR	88412	Symbol	r_str_trunc_ellipsis		88059						
ANR	88413	Symbol	res -> pos_in_layer		88059						
ANR	88414	Symbol	strdup		88059						
ANR	88415	Symbol	res -> klass		88059						
ANR	88416	Symbol	r_graph_add_node		88059						
ANR	88417	Symbol	* len		88059						
ANR	88418	Function	r_agraph_add_node	3727:0:94642:94796							
ANR	88419	FunctionDef	"r_agraph_add_node (const RAGraph * g , const char * title , const char * body)"		88418	0					
ANR	88420	CompoundStatement		3727:87:94729:94796	88418	0					
ANR	88421	ReturnStatement	"return r_agraph_add_node_with_color ( g , title , body , - 1 ) ;"	3728:8:94739:94794	88418	0	True				
ANR	88422	CallExpression	"r_agraph_add_node_with_color ( g , title , body , - 1 )"		88418	0					
ANR	88423	Callee	r_agraph_add_node_with_color		88418	0					
ANR	88424	Identifier	r_agraph_add_node_with_color		88418	0					
ANR	88425	ArgumentList	g		88418	1					
ANR	88426	Argument	g		88418	0					
ANR	88427	Identifier	g		88418	0					
ANR	88428	Argument	title		88418	1					
ANR	88429	Identifier	title		88418	0					
ANR	88430	Argument	body		88418	2					
ANR	88431	Identifier	body		88418	0					
ANR	88432	Argument	- 1		88418	3					
ANR	88433	UnaryOperationExpression	- 1		88418	0					
ANR	88434	UnaryOperator	-		88418	0					
ANR	88435	PrimaryExpression	1		88418	1					
ANR	88436	ReturnType	R_API RANode *		88418	1					
ANR	88437	Identifier	r_agraph_add_node		88418	2					
ANR	88438	ParameterList	"const RAGraph * g , const char * title , const char * body"		88418	3					
ANR	88439	Parameter	const RAGraph * g	3727:32:94674:94689	88418	0	True				
ANR	88440	ParameterType	const RAGraph *		88418	0					
ANR	88441	Identifier	g		88418	1					
ANR	88442	Parameter	const char * title	3727:50:94692:94708	88418	1	True				
ANR	88443	ParameterType	const char *		88418	0					
ANR	88444	Identifier	title		88418	1					
ANR	88445	Parameter	const char * body	3727:69:94711:94726	88418	2	True				
ANR	88446	ParameterType	const char *		88418	0					
ANR	88447	Identifier	body		88418	1					
ANR	88448	CFGEntryNode	ENTRY		88418		True				
ANR	88449	CFGExitNode	EXIT		88418		True				
ANR	88450	Symbol	g		88418						
ANR	88451	Symbol	title		88418						
ANR	88452	Symbol	body		88418						
ANR	88453	Symbol	r_agraph_add_node_with_color		88418						
ANR	88454	Function	r_agraph_del_node	3731:0:94799:95992							
ANR	88455	FunctionDef	"r_agraph_del_node (const RAGraph * g , const char * title)"		88454	0					
ANR	88456	CompoundStatement		3731:66:94865:95992	88454	0					
ANR	88457	IdentifierDeclStatement	"char * title_trunc = r_str_trunc_ellipsis ( title , 255 ) ;"	3732:1:94868:94921	88454	0	True				
ANR	88458	IdentifierDecl	"* title_trunc = r_str_trunc_ellipsis ( title , 255 )"		88454	0					
ANR	88459	IdentifierDeclType	char *		88454	0					
ANR	88460	Identifier	title_trunc		88454	1					
ANR	88461	AssignmentExpression	"* title_trunc = r_str_trunc_ellipsis ( title , 255 )"		88454	2		=			
ANR	88462	Identifier	title_trunc		88454	0					
ANR	88463	CallExpression	"r_str_trunc_ellipsis ( title , 255 )"		88454	1					
ANR	88464	Callee	r_str_trunc_ellipsis		88454	0					
ANR	88465	Identifier	r_str_trunc_ellipsis		88454	0					
ANR	88466	ArgumentList	title		88454	1					
ANR	88467	Argument	title		88454	0					
ANR	88468	Identifier	title		88454	0					
ANR	88469	Argument	255		88454	1					
ANR	88470	PrimaryExpression	255		88454	0					
ANR	88471	IdentifierDeclStatement	"RANode * an , * res = r_agraph_get_node ( g , title_trunc ) ;"	3733:1:94924:94977	88454	1	True				
ANR	88472	IdentifierDecl	* an		88454	0					
ANR	88473	IdentifierDeclType	RANode *		88454	0					
ANR	88474	Identifier	an		88454	1					
ANR	88475	IdentifierDecl	"* res = r_agraph_get_node ( g , title_trunc )"		88454	1					
ANR	88476	IdentifierDeclType	RANode *		88454	0					
ANR	88477	Identifier	res		88454	1					
ANR	88478	AssignmentExpression	"* res = r_agraph_get_node ( g , title_trunc )"		88454	2		=			
ANR	88479	Identifier	res		88454	0					
ANR	88480	CallExpression	"r_agraph_get_node ( g , title_trunc )"		88454	1					
ANR	88481	Callee	r_agraph_get_node		88454	0					
ANR	88482	Identifier	r_agraph_get_node		88454	0					
ANR	88483	ArgumentList	g		88454	1					
ANR	88484	Argument	g		88454	0					
ANR	88485	Identifier	g		88454	0					
ANR	88486	Argument	title_trunc		88454	1					
ANR	88487	Identifier	title_trunc		88454	0					
ANR	88488	ExpressionStatement	free ( title_trunc )	3734:1:94980:94998	88454	2	True				
ANR	88489	CallExpression	free ( title_trunc )		88454	0					
ANR	88490	Callee	free		88454	0					
ANR	88491	Identifier	free		88454	0					
ANR	88492	ArgumentList	title_trunc		88454	1					
ANR	88493	Argument	title_trunc		88454	0					
ANR	88494	Identifier	title_trunc		88454	0					
ANR	88495	IdentifierDeclStatement	RGraphNode * gn ;	3735:1:95001:95015	88454	3	True				
ANR	88496	IdentifierDecl	* gn		88454	0					
ANR	88497	IdentifierDeclType	RGraphNode *		88454	0					
ANR	88498	Identifier	gn		88454	1					
ANR	88499	IdentifierDeclStatement	RListIter * it ;	3736:1:95018:95031	88454	4	True				
ANR	88500	IdentifierDecl	* it		88454	0					
ANR	88501	IdentifierDeclType	RListIter *		88454	0					
ANR	88502	Identifier	it		88454	1					
ANR	88503	IfStatement	if ( ! res )		88454	5					
ANR	88504	Condition	! res	3738:5:95039:95042	88454	0	True				
ANR	88505	UnaryOperationExpression	! res		88454	0					
ANR	88506	UnaryOperator	!		88454	0					
ANR	88507	Identifier	res		88454	1					
ANR	88508	CompoundStatement		8:11:179:179	88454	1					
ANR	88509	ReturnStatement	return false ;	3739:2:95049:95061	88454	0	True				
ANR	88510	Identifier	false		88454	0					
ANR	88511	ExpressionStatement	"sdb_set ( g -> nodes , res -> title , NULL , 0 )"	3741:1:95067:95106	88454	6	True				
ANR	88512	CallExpression	"sdb_set ( g -> nodes , res -> title , NULL , 0 )"		88454	0					
ANR	88513	Callee	sdb_set		88454	0					
ANR	88514	Identifier	sdb_set		88454	0					
ANR	88515	ArgumentList	g -> nodes		88454	1					
ANR	88516	Argument	g -> nodes		88454	0					
ANR	88517	PtrMemberAccess	g -> nodes		88454	0					
ANR	88518	Identifier	g		88454	0					
ANR	88519	Identifier	nodes		88454	1					
ANR	88520	Argument	res -> title		88454	1					
ANR	88521	PtrMemberAccess	res -> title		88454	0					
ANR	88522	Identifier	res		88454	0					
ANR	88523	Identifier	title		88454	1					
ANR	88524	Argument	NULL		88454	2					
ANR	88525	Identifier	NULL		88454	0					
ANR	88526	Argument	0		88454	3					
ANR	88527	PrimaryExpression	0		88454	0					
ANR	88528	ExpressionStatement	"sdb_array_remove ( g -> db , ""agraph.nodes"" , res -> title , 0 )"	3742:1:95109:95164	88454	7	True				
ANR	88529	CallExpression	"sdb_array_remove ( g -> db , ""agraph.nodes"" , res -> title , 0 )"		88454	0					
ANR	88530	Callee	sdb_array_remove		88454	0					
ANR	88531	Identifier	sdb_array_remove		88454	0					
ANR	88532	ArgumentList	g -> db		88454	1					
ANR	88533	Argument	g -> db		88454	0					
ANR	88534	PtrMemberAccess	g -> db		88454	0					
ANR	88535	Identifier	g		88454	0					
ANR	88536	Identifier	db		88454	1					
ANR	88537	Argument	"""agraph.nodes"""		88454	1					
ANR	88538	PrimaryExpression	"""agraph.nodes"""		88454	0					
ANR	88539	Argument	res -> title		88454	2					
ANR	88540	PtrMemberAccess	res -> title		88454	0					
ANR	88541	Identifier	res		88454	0					
ANR	88542	Identifier	title		88454	1					
ANR	88543	Argument	0		88454	3					
ANR	88544	PrimaryExpression	0		88454	0					
ANR	88545	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s"" , res -> title ) , NULL , 0 )"	3743:1:95167:95232	88454	8	True				
ANR	88546	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88547	Callee	sdb_set		88454	0					
ANR	88548	Identifier	sdb_set		88454	0					
ANR	88549	ArgumentList	g -> db		88454	1					
ANR	88550	Argument	g -> db		88454	0					
ANR	88551	PtrMemberAccess	g -> db		88454	0					
ANR	88552	Identifier	g		88454	0					
ANR	88553	Identifier	db		88454	1					
ANR	88554	Argument	"sdb_fmt ( ""agraph.nodes.%s"" , res -> title )"		88454	1					
ANR	88555	CallExpression	"sdb_fmt ( ""agraph.nodes.%s"" , res -> title )"		88454	0					
ANR	88556	Callee	sdb_fmt		88454	0					
ANR	88557	Identifier	sdb_fmt		88454	0					
ANR	88558	ArgumentList	"""agraph.nodes.%s"""		88454	1					
ANR	88559	Argument	"""agraph.nodes.%s"""		88454	0					
ANR	88560	PrimaryExpression	"""agraph.nodes.%s"""		88454	0					
ANR	88561	Argument	res -> title		88454	1					
ANR	88562	PtrMemberAccess	res -> title		88454	0					
ANR	88563	Identifier	res		88454	0					
ANR	88564	Identifier	title		88454	1					
ANR	88565	Argument	NULL		88454	2					
ANR	88566	Identifier	NULL		88454	0					
ANR	88567	Argument	0		88454	3					
ANR	88568	PrimaryExpression	0		88454	0					
ANR	88569	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title ) , 0 , 0 )"	3744:1:95235:95302	88454	9	True				
ANR	88570	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title ) , 0 , 0 )"		88454	0					
ANR	88571	Callee	sdb_set		88454	0					
ANR	88572	Identifier	sdb_set		88454	0					
ANR	88573	ArgumentList	g -> db		88454	1					
ANR	88574	Argument	g -> db		88454	0					
ANR	88575	PtrMemberAccess	g -> db		88454	0					
ANR	88576	Identifier	g		88454	0					
ANR	88577	Identifier	db		88454	1					
ANR	88578	Argument	"sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title )"		88454	1					
ANR	88579	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.body"" , res -> title )"		88454	0					
ANR	88580	Callee	sdb_fmt		88454	0					
ANR	88581	Identifier	sdb_fmt		88454	0					
ANR	88582	ArgumentList	"""agraph.nodes.%s.body"""		88454	1					
ANR	88583	Argument	"""agraph.nodes.%s.body"""		88454	0					
ANR	88584	PrimaryExpression	"""agraph.nodes.%s.body"""		88454	0					
ANR	88585	Argument	res -> title		88454	1					
ANR	88586	PtrMemberAccess	res -> title		88454	0					
ANR	88587	Identifier	res		88454	0					
ANR	88588	Identifier	title		88454	1					
ANR	88589	Argument	0		88454	2					
ANR	88590	PrimaryExpression	0		88454	0					
ANR	88591	Argument	0		88454	3					
ANR	88592	PrimaryExpression	0		88454	0					
ANR	88593	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.x"" , res -> title ) , NULL , 0 )"	3745:1:95305:95372	88454	10	True				
ANR	88594	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.x"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88595	Callee	sdb_set		88454	0					
ANR	88596	Identifier	sdb_set		88454	0					
ANR	88597	ArgumentList	g -> db		88454	1					
ANR	88598	Argument	g -> db		88454	0					
ANR	88599	PtrMemberAccess	g -> db		88454	0					
ANR	88600	Identifier	g		88454	0					
ANR	88601	Identifier	db		88454	1					
ANR	88602	Argument	"sdb_fmt ( ""agraph.nodes.%s.x"" , res -> title )"		88454	1					
ANR	88603	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.x"" , res -> title )"		88454	0					
ANR	88604	Callee	sdb_fmt		88454	0					
ANR	88605	Identifier	sdb_fmt		88454	0					
ANR	88606	ArgumentList	"""agraph.nodes.%s.x"""		88454	1					
ANR	88607	Argument	"""agraph.nodes.%s.x"""		88454	0					
ANR	88608	PrimaryExpression	"""agraph.nodes.%s.x"""		88454	0					
ANR	88609	Argument	res -> title		88454	1					
ANR	88610	PtrMemberAccess	res -> title		88454	0					
ANR	88611	Identifier	res		88454	0					
ANR	88612	Identifier	title		88454	1					
ANR	88613	Argument	NULL		88454	2					
ANR	88614	Identifier	NULL		88454	0					
ANR	88615	Argument	0		88454	3					
ANR	88616	PrimaryExpression	0		88454	0					
ANR	88617	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.y"" , res -> title ) , NULL , 0 )"	3746:1:95375:95442	88454	11	True				
ANR	88618	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.y"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88619	Callee	sdb_set		88454	0					
ANR	88620	Identifier	sdb_set		88454	0					
ANR	88621	ArgumentList	g -> db		88454	1					
ANR	88622	Argument	g -> db		88454	0					
ANR	88623	PtrMemberAccess	g -> db		88454	0					
ANR	88624	Identifier	g		88454	0					
ANR	88625	Identifier	db		88454	1					
ANR	88626	Argument	"sdb_fmt ( ""agraph.nodes.%s.y"" , res -> title )"		88454	1					
ANR	88627	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.y"" , res -> title )"		88454	0					
ANR	88628	Callee	sdb_fmt		88454	0					
ANR	88629	Identifier	sdb_fmt		88454	0					
ANR	88630	ArgumentList	"""agraph.nodes.%s.y"""		88454	1					
ANR	88631	Argument	"""agraph.nodes.%s.y"""		88454	0					
ANR	88632	PrimaryExpression	"""agraph.nodes.%s.y"""		88454	0					
ANR	88633	Argument	res -> title		88454	1					
ANR	88634	PtrMemberAccess	res -> title		88454	0					
ANR	88635	Identifier	res		88454	0					
ANR	88636	Identifier	title		88454	1					
ANR	88637	Argument	NULL		88454	2					
ANR	88638	Identifier	NULL		88454	0					
ANR	88639	Argument	0		88454	3					
ANR	88640	PrimaryExpression	0		88454	0					
ANR	88641	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.w"" , res -> title ) , NULL , 0 )"	3747:1:95445:95512	88454	12	True				
ANR	88642	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.w"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88643	Callee	sdb_set		88454	0					
ANR	88644	Identifier	sdb_set		88454	0					
ANR	88645	ArgumentList	g -> db		88454	1					
ANR	88646	Argument	g -> db		88454	0					
ANR	88647	PtrMemberAccess	g -> db		88454	0					
ANR	88648	Identifier	g		88454	0					
ANR	88649	Identifier	db		88454	1					
ANR	88650	Argument	"sdb_fmt ( ""agraph.nodes.%s.w"" , res -> title )"		88454	1					
ANR	88651	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.w"" , res -> title )"		88454	0					
ANR	88652	Callee	sdb_fmt		88454	0					
ANR	88653	Identifier	sdb_fmt		88454	0					
ANR	88654	ArgumentList	"""agraph.nodes.%s.w"""		88454	1					
ANR	88655	Argument	"""agraph.nodes.%s.w"""		88454	0					
ANR	88656	PrimaryExpression	"""agraph.nodes.%s.w"""		88454	0					
ANR	88657	Argument	res -> title		88454	1					
ANR	88658	PtrMemberAccess	res -> title		88454	0					
ANR	88659	Identifier	res		88454	0					
ANR	88660	Identifier	title		88454	1					
ANR	88661	Argument	NULL		88454	2					
ANR	88662	Identifier	NULL		88454	0					
ANR	88663	Argument	0		88454	3					
ANR	88664	PrimaryExpression	0		88454	0					
ANR	88665	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.h"" , res -> title ) , NULL , 0 )"	3748:1:95515:95582	88454	13	True				
ANR	88666	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.h"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88667	Callee	sdb_set		88454	0					
ANR	88668	Identifier	sdb_set		88454	0					
ANR	88669	ArgumentList	g -> db		88454	1					
ANR	88670	Argument	g -> db		88454	0					
ANR	88671	PtrMemberAccess	g -> db		88454	0					
ANR	88672	Identifier	g		88454	0					
ANR	88673	Identifier	db		88454	1					
ANR	88674	Argument	"sdb_fmt ( ""agraph.nodes.%s.h"" , res -> title )"		88454	1					
ANR	88675	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.h"" , res -> title )"		88454	0					
ANR	88676	Callee	sdb_fmt		88454	0					
ANR	88677	Identifier	sdb_fmt		88454	0					
ANR	88678	ArgumentList	"""agraph.nodes.%s.h"""		88454	1					
ANR	88679	Argument	"""agraph.nodes.%s.h"""		88454	0					
ANR	88680	PrimaryExpression	"""agraph.nodes.%s.h"""		88454	0					
ANR	88681	Argument	res -> title		88454	1					
ANR	88682	PtrMemberAccess	res -> title		88454	0					
ANR	88683	Identifier	res		88454	0					
ANR	88684	Identifier	title		88454	1					
ANR	88685	Argument	NULL		88454	2					
ANR	88686	Identifier	NULL		88454	0					
ANR	88687	Argument	0		88454	3					
ANR	88688	PrimaryExpression	0		88454	0					
ANR	88689	ExpressionStatement	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.neighbours"" , res -> title ) , NULL , 0 )"	3749:1:95585:95661	88454	14	True				
ANR	88690	CallExpression	"sdb_set ( g -> db , sdb_fmt ( ""agraph.nodes.%s.neighbours"" , res -> title ) , NULL , 0 )"		88454	0					
ANR	88691	Callee	sdb_set		88454	0					
ANR	88692	Identifier	sdb_set		88454	0					
ANR	88693	ArgumentList	g -> db		88454	1					
ANR	88694	Argument	g -> db		88454	0					
ANR	88695	PtrMemberAccess	g -> db		88454	0					
ANR	88696	Identifier	g		88454	0					
ANR	88697	Identifier	db		88454	1					
ANR	88698	Argument	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , res -> title )"		88454	1					
ANR	88699	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , res -> title )"		88454	0					
ANR	88700	Callee	sdb_fmt		88454	0					
ANR	88701	Identifier	sdb_fmt		88454	0					
ANR	88702	ArgumentList	"""agraph.nodes.%s.neighbours"""		88454	1					
ANR	88703	Argument	"""agraph.nodes.%s.neighbours"""		88454	0					
ANR	88704	PrimaryExpression	"""agraph.nodes.%s.neighbours"""		88454	0					
ANR	88705	Argument	res -> title		88454	1					
ANR	88706	PtrMemberAccess	res -> title		88454	0					
ANR	88707	Identifier	res		88454	0					
ANR	88708	Identifier	title		88454	1					
ANR	88709	Argument	NULL		88454	2					
ANR	88710	Identifier	NULL		88454	0					
ANR	88711	Argument	0		88454	3					
ANR	88712	PrimaryExpression	0		88454	0					
ANR	88713	IdentifierDeclStatement	"const RList * innodes = r_graph_innodes ( g -> graph , res -> gnode ) ;"	3751:1:95665:95726	88454	15	True				
ANR	88714	IdentifierDecl	"* innodes = r_graph_innodes ( g -> graph , res -> gnode )"		88454	0					
ANR	88715	IdentifierDeclType	const RList *		88454	0					
ANR	88716	Identifier	innodes		88454	1					
ANR	88717	AssignmentExpression	"* innodes = r_graph_innodes ( g -> graph , res -> gnode )"		88454	2		=			
ANR	88718	Identifier	innodes		88454	0					
ANR	88719	CallExpression	"r_graph_innodes ( g -> graph , res -> gnode )"		88454	1					
ANR	88720	Callee	r_graph_innodes		88454	0					
ANR	88721	Identifier	r_graph_innodes		88454	0					
ANR	88722	ArgumentList	g -> graph		88454	1					
ANR	88723	Argument	g -> graph		88454	0					
ANR	88724	PtrMemberAccess	g -> graph		88454	0					
ANR	88725	Identifier	g		88454	0					
ANR	88726	Identifier	graph		88454	1					
ANR	88727	Argument	res -> gnode		88454	1					
ANR	88728	PtrMemberAccess	res -> gnode		88454	0					
ANR	88729	Identifier	res		88454	0					
ANR	88730	Identifier	gnode		88454	1					
ANR	88731	Statement	graph_foreach_anode	3752:1:95729:95747	88454	16	True				
ANR	88732	Statement	(	3752:21:95749:95749	88454	17	True				
ANR	88733	Statement	innodes	3752:22:95750:95756	88454	18	True				
ANR	88734	Statement	","	3752:29:95757:95757	88454	19	True				
ANR	88735	Statement	it	3752:31:95759:95760	88454	20	True				
ANR	88736	Statement	","	3752:33:95761:95761	88454	21	True				
ANR	88737	Statement	gn	3752:35:95763:95764	88454	22	True				
ANR	88738	Statement	","	3752:37:95765:95765	88454	23	True				
ANR	88739	Statement	an	3752:39:95767:95768	88454	24	True				
ANR	88740	Statement	)	3752:41:95769:95769	88454	25	True				
ANR	88741	CompoundStatement		23:2:909:976	88454	26					
ANR	88742	IdentifierDeclStatement	"const char * key = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , an -> title ) ;"	3753:2:95775:95842	88454	0	True				
ANR	88743	IdentifierDecl	"* key = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , an -> title )"		88454	0					
ANR	88744	IdentifierDeclType	const char *		88454	0					
ANR	88745	Identifier	key		88454	1					
ANR	88746	AssignmentExpression	"* key = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , an -> title )"		88454	2		=			
ANR	88747	Identifier	key		88454	0					
ANR	88748	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , an -> title )"		88454	1					
ANR	88749	Callee	sdb_fmt		88454	0					
ANR	88750	Identifier	sdb_fmt		88454	0					
ANR	88751	ArgumentList	"""agraph.nodes.%s.neighbours"""		88454	1					
ANR	88752	Argument	"""agraph.nodes.%s.neighbours"""		88454	0					
ANR	88753	PrimaryExpression	"""agraph.nodes.%s.neighbours"""		88454	0					
ANR	88754	Argument	an -> title		88454	1					
ANR	88755	PtrMemberAccess	an -> title		88454	0					
ANR	88756	Identifier	an		88454	0					
ANR	88757	Identifier	title		88454	1					
ANR	88758	ExpressionStatement	"sdb_array_remove ( g -> db , key , res -> title , 0 )"	3754:2:95846:95890	88454	1	True				
ANR	88759	CallExpression	"sdb_array_remove ( g -> db , key , res -> title , 0 )"		88454	0					
ANR	88760	Callee	sdb_array_remove		88454	0					
ANR	88761	Identifier	sdb_array_remove		88454	0					
ANR	88762	ArgumentList	g -> db		88454	1					
ANR	88763	Argument	g -> db		88454	0					
ANR	88764	PtrMemberAccess	g -> db		88454	0					
ANR	88765	Identifier	g		88454	0					
ANR	88766	Identifier	db		88454	1					
ANR	88767	Argument	key		88454	1					
ANR	88768	Identifier	key		88454	0					
ANR	88769	Argument	res -> title		88454	2					
ANR	88770	PtrMemberAccess	res -> title		88454	0					
ANR	88771	Identifier	res		88454	0					
ANR	88772	Identifier	title		88454	1					
ANR	88773	Argument	0		88454	3					
ANR	88774	PrimaryExpression	0		88454	0					
ANR	88775	ExpressionStatement	"r_graph_del_node ( g -> graph , res -> gnode )"	3757:1:95897:95936	88454	27	True				
ANR	88776	CallExpression	"r_graph_del_node ( g -> graph , res -> gnode )"		88454	0					
ANR	88777	Callee	r_graph_del_node		88454	0					
ANR	88778	Identifier	r_graph_del_node		88454	0					
ANR	88779	ArgumentList	g -> graph		88454	1					
ANR	88780	Argument	g -> graph		88454	0					
ANR	88781	PtrMemberAccess	g -> graph		88454	0					
ANR	88782	Identifier	g		88454	0					
ANR	88783	Identifier	graph		88454	1					
ANR	88784	Argument	res -> gnode		88454	1					
ANR	88785	PtrMemberAccess	res -> gnode		88454	0					
ANR	88786	Identifier	res		88454	0					
ANR	88787	Identifier	gnode		88454	1					
ANR	88788	ExpressionStatement	res -> gnode = NULL	3758:1:95939:95956	88454	28	True				
ANR	88789	AssignmentExpression	res -> gnode = NULL		88454	0		=			
ANR	88790	PtrMemberAccess	res -> gnode		88454	0					
ANR	88791	Identifier	res		88454	0					
ANR	88792	Identifier	gnode		88454	1					
ANR	88793	Identifier	NULL		88454	1					
ANR	88794	ExpressionStatement	free_anode ( res )	3760:1:95960:95976	88454	29	True				
ANR	88795	CallExpression	free_anode ( res )		88454	0					
ANR	88796	Callee	free_anode		88454	0					
ANR	88797	Identifier	free_anode		88454	0					
ANR	88798	ArgumentList	res		88454	1					
ANR	88799	Argument	res		88454	0					
ANR	88800	Identifier	res		88454	0					
ANR	88801	ReturnStatement	return true ;	3761:1:95979:95990	88454	30	True				
ANR	88802	Identifier	true		88454	0					
ANR	88803	ReturnType	R_API bool		88454	1					
ANR	88804	Identifier	r_agraph_del_node		88454	2					
ANR	88805	ParameterList	"const RAGraph * g , const char * title"		88454	3					
ANR	88806	Parameter	const RAGraph * g	3731:29:94828:94843	88454	0	True				
ANR	88807	ParameterType	const RAGraph *		88454	0					
ANR	88808	Identifier	g		88454	1					
ANR	88809	Parameter	const char * title	3731:47:94846:94862	88454	1	True				
ANR	88810	ParameterType	const char *		88454	0					
ANR	88811	Identifier	title		88454	1					
ANR	88812	CFGEntryNode	ENTRY		88454		True				
ANR	88813	CFGExitNode	EXIT		88454		True				
ANR	88814	Symbol	res -> title		88454						
ANR	88815	Symbol	g -> db		88454						
ANR	88816	Symbol	innodes		88454						
ANR	88817	Symbol	res -> gnode		88454						
ANR	88818	Symbol	* res		88454						
ANR	88819	Symbol	title		88454						
ANR	88820	Symbol	title_trunc		88454						
ANR	88821	Symbol	r_graph_innodes		88454						
ANR	88822	Symbol	g -> nodes		88454						
ANR	88823	Symbol	g -> graph		88454						
ANR	88824	Symbol	r_agraph_get_node		88454						
ANR	88825	Symbol	sdb_fmt		88454						
ANR	88826	Symbol	key		88454						
ANR	88827	Symbol	res		88454						
ANR	88828	Symbol	NULL		88454						
ANR	88829	Symbol	g		88454						
ANR	88830	Symbol	gn		88454						
ANR	88831	Symbol	false		88454						
ANR	88832	Symbol	it		88454						
ANR	88833	Symbol	an		88454						
ANR	88834	Symbol	* an		88454						
ANR	88835	Symbol	* g		88454						
ANR	88836	Symbol	an -> title		88454						
ANR	88837	Symbol	r_str_trunc_ellipsis		88454						
ANR	88838	Symbol	true		88454						
ANR	88839	DeclStmt									
ANR	88840	Decl							RANodeCallback	RANodeCallback	cb
ANR	88841	DeclStmt									
ANR	88842	Decl							void	void *	user_data
ANR	88843	DeclStmt									
ANR	88844	Decl							RANode	RANode *	n
ANR	88845	DeclStmt									
ANR	88846	Decl							RAEdgeCallback	RAEdgeCallback	cb
ANR	88847	DeclStmt									
ANR	88848	Decl							RAGraph	RAGraph *	g
ANR	88849	DeclStmt									
ANR	88850	Decl							void	void *	user_data
ANR	88851	DeclStmt									
ANR	88852	Decl							RANode	RANode *	an
ANR	88853	Decl							RANode	RANode *	n
ANR	88854	DeclStmt									
ANR	88855	Decl							const RList	const RList *	neigh
ANR	88856	DeclStmt									
ANR	88857	Decl							RListIter	RListIter *	it
ANR	88858	DeclStmt									
ANR	88859	Decl							RGraphNode	RGraphNode *	gn
ANR	88860	Function	r_agraph_foreach	3792:0:96679:96871							
ANR	88861	FunctionDef	"r_agraph_foreach (RAGraph * g , RANodeCallback cb , void * user)"		88860	0					
ANR	88862	CompoundStatement		3792:71:96750:96871	88860	0					
ANR	88863	Statement	struct	3793:1:96753:96758	88860	0	True				
ANR	88864	Statement	g_cb	3793:8:96760:96763	88860	1	True				
ANR	88865	Statement	u	3793:13:96765:96765	88860	2	True				
ANR	88866	Statement	=	3793:15:96767:96767	88860	3	True				
ANR	88867	CompoundStatement		2:17:18:18	88860	4					
ANR	88868	Statement	.	3794:2:96773:96773	88860	0	True				
ANR	88869	Statement	node_cb	3794:3:96774:96780	88860	1	True				
ANR	88870	Statement	=	3794:11:96782:96782	88860	2	True				
ANR	88871	Statement	cb	3794:13:96784:96785	88860	3	True				
ANR	88872	Statement	","	3794:15:96786:96786	88860	4	True				
ANR	88873	Statement	.	3795:2:96790:96790	88860	5	True				
ANR	88874	Statement	data	3795:3:96791:96794	88860	6	True				
ANR	88875	Statement	=	3795:8:96796:96796	88860	7	True				
ANR	88876	Statement	user	3795:10:96798:96801	88860	8	True				
ANR	88877	ExpressionStatement		3796:2:96805:96805	88860	5	True				
ANR	88878	ExpressionStatement	"sdb_foreach ( g -> nodes , ( SdbForeachCallback ) user_node_cb , & u )"	3797:1:96808:96869	88860	6	True				
ANR	88879	CallExpression	"sdb_foreach ( g -> nodes , ( SdbForeachCallback ) user_node_cb , & u )"		88860	0					
ANR	88880	Callee	sdb_foreach		88860	0					
ANR	88881	Identifier	sdb_foreach		88860	0					
ANR	88882	ArgumentList	g -> nodes		88860	1					
ANR	88883	Argument	g -> nodes		88860	0					
ANR	88884	PtrMemberAccess	g -> nodes		88860	0					
ANR	88885	Identifier	g		88860	0					
ANR	88886	Identifier	nodes		88860	1					
ANR	88887	Argument	( SdbForeachCallback ) user_node_cb		88860	1					
ANR	88888	CastExpression	( SdbForeachCallback ) user_node_cb		88860	0					
ANR	88889	CastTarget	SdbForeachCallback		88860	0					
ANR	88890	Identifier	user_node_cb		88860	1					
ANR	88891	Argument	& u		88860	2					
ANR	88892	UnaryOperationExpression	& u		88860	0					
ANR	88893	UnaryOperator	&		88860	0					
ANR	88894	Identifier	u		88860	1					
ANR	88895	ReturnType	R_API void		88860	1					
ANR	88896	Identifier	r_agraph_foreach		88860	2					
ANR	88897	ParameterList	"RAGraph * g , RANodeCallback cb , void * user"		88860	3					
ANR	88898	Parameter	RAGraph * g	3792:28:96707:96716	88860	0	True				
ANR	88899	ParameterType	RAGraph *		88860	0					
ANR	88900	Identifier	g		88860	1					
ANR	88901	Parameter	RANodeCallback cb	3792:40:96719:96735	88860	1	True				
ANR	88902	ParameterType	RANodeCallback		88860	0					
ANR	88903	Identifier	cb		88860	1					
ANR	88904	Parameter	void * user	3792:59:96738:96747	88860	2	True				
ANR	88905	ParameterType	void *		88860	0					
ANR	88906	Identifier	user		88860	1					
ANR	88907	CFGEntryNode	ENTRY		88860		True				
ANR	88908	CFGExitNode	EXIT		88860		True				
ANR	88909	Symbol	* g		88860						
ANR	88910	Symbol	g -> nodes		88860						
ANR	88911	Symbol	g		88860						
ANR	88912	Symbol	& u		88860						
ANR	88913	Symbol	user		88860						
ANR	88914	Symbol	cb		88860						
ANR	88915	Symbol	user_node_cb		88860						
ANR	88916	Function	r_agraph_foreach_edge	3800:0:96874:97085							
ANR	88917	FunctionDef	"r_agraph_foreach_edge (RAGraph * g , RAEdgeCallback cb , void * user)"		88916	0					
ANR	88918	CompoundStatement		3800:76:96950:97085	88916	0					
ANR	88919	Statement	struct	3801:1:96953:96958	88916	0	True				
ANR	88920	Statement	g_cb	3801:8:96960:96963	88916	1	True				
ANR	88921	Statement	u	3801:13:96965:96965	88916	2	True				
ANR	88922	Statement	=	3801:15:96967:96967	88916	3	True				
ANR	88923	CompoundStatement		2:17:18:18	88916	4					
ANR	88924	Statement	.	3802:2:96973:96973	88916	0	True				
ANR	88925	Statement	graph	3802:3:96974:96978	88916	1	True				
ANR	88926	Statement	=	3802:9:96980:96980	88916	2	True				
ANR	88927	Statement	g	3802:11:96982:96982	88916	3	True				
ANR	88928	Statement	","	3802:12:96983:96983	88916	4	True				
ANR	88929	Statement	.	3803:2:96987:96987	88916	5	True				
ANR	88930	Statement	edge_cb	3803:3:96988:96994	88916	6	True				
ANR	88931	Statement	=	3803:11:96996:96996	88916	7	True				
ANR	88932	Statement	cb	3803:13:96998:96999	88916	8	True				
ANR	88933	Statement	","	3803:15:97000:97000	88916	9	True				
ANR	88934	Statement	.	3804:2:97004:97004	88916	10	True				
ANR	88935	Statement	data	3804:3:97005:97008	88916	11	True				
ANR	88936	Statement	=	3804:8:97010:97010	88916	12	True				
ANR	88937	Statement	user	3804:10:97012:97015	88916	13	True				
ANR	88938	ExpressionStatement		3805:2:97019:97019	88916	5	True				
ANR	88939	ExpressionStatement	"sdb_foreach ( g -> nodes , ( SdbForeachCallback ) user_edge_cb , & u )"	3806:1:97022:97083	88916	6	True				
ANR	88940	CallExpression	"sdb_foreach ( g -> nodes , ( SdbForeachCallback ) user_edge_cb , & u )"		88916	0					
ANR	88941	Callee	sdb_foreach		88916	0					
ANR	88942	Identifier	sdb_foreach		88916	0					
ANR	88943	ArgumentList	g -> nodes		88916	1					
ANR	88944	Argument	g -> nodes		88916	0					
ANR	88945	PtrMemberAccess	g -> nodes		88916	0					
ANR	88946	Identifier	g		88916	0					
ANR	88947	Identifier	nodes		88916	1					
ANR	88948	Argument	( SdbForeachCallback ) user_edge_cb		88916	1					
ANR	88949	CastExpression	( SdbForeachCallback ) user_edge_cb		88916	0					
ANR	88950	CastTarget	SdbForeachCallback		88916	0					
ANR	88951	Identifier	user_edge_cb		88916	1					
ANR	88952	Argument	& u		88916	2					
ANR	88953	UnaryOperationExpression	& u		88916	0					
ANR	88954	UnaryOperator	&		88916	0					
ANR	88955	Identifier	u		88916	1					
ANR	88956	ReturnType	R_API void		88916	1					
ANR	88957	Identifier	r_agraph_foreach_edge		88916	2					
ANR	88958	ParameterList	"RAGraph * g , RAEdgeCallback cb , void * user"		88916	3					
ANR	88959	Parameter	RAGraph * g	3800:33:96907:96916	88916	0	True				
ANR	88960	ParameterType	RAGraph *		88916	0					
ANR	88961	Identifier	g		88916	1					
ANR	88962	Parameter	RAEdgeCallback cb	3800:45:96919:96935	88916	1	True				
ANR	88963	ParameterType	RAEdgeCallback		88916	0					
ANR	88964	Identifier	cb		88916	1					
ANR	88965	Parameter	void * user	3800:64:96938:96947	88916	2	True				
ANR	88966	ParameterType	void *		88916	0					
ANR	88967	Identifier	user		88916	1					
ANR	88968	CFGEntryNode	ENTRY		88916		True				
ANR	88969	CFGExitNode	EXIT		88916		True				
ANR	88970	Symbol	* g		88916						
ANR	88971	Symbol	g -> nodes		88916						
ANR	88972	Symbol	g		88916						
ANR	88973	Symbol	user_edge_cb		88916						
ANR	88974	Symbol	& u		88916						
ANR	88975	Symbol	user		88916						
ANR	88976	Symbol	cb		88916						
ANR	88977	Function	r_agraph_get_first_node	3809:0:97088:97256							
ANR	88978	FunctionDef	r_agraph_get_first_node (const RAGraph * g)		88977	0					
ANR	88979	CompoundStatement		3809:56:97144:97256	88977	0					
ANR	88980	IdentifierDeclStatement	const RList * l = r_graph_get_nodes ( g -> graph ) ;	3810:1:97147:97192	88977	0	True				
ANR	88981	IdentifierDecl	* l = r_graph_get_nodes ( g -> graph )		88977	0					
ANR	88982	IdentifierDeclType	const RList *		88977	0					
ANR	88983	Identifier	l		88977	1					
ANR	88984	AssignmentExpression	* l = r_graph_get_nodes ( g -> graph )		88977	2		=			
ANR	88985	Identifier	l		88977	0					
ANR	88986	CallExpression	r_graph_get_nodes ( g -> graph )		88977	1					
ANR	88987	Callee	r_graph_get_nodes		88977	0					
ANR	88988	Identifier	r_graph_get_nodes		88977	0					
ANR	88989	ArgumentList	g -> graph		88977	1					
ANR	88990	Argument	g -> graph		88977	0					
ANR	88991	PtrMemberAccess	g -> graph		88977	0					
ANR	88992	Identifier	g		88977	0					
ANR	88993	Identifier	graph		88977	1					
ANR	88994	IdentifierDeclStatement	RGraphNode * rgn = r_list_first ( l ) ;	3811:1:97195:97229	88977	1	True				
ANR	88995	IdentifierDecl	* rgn = r_list_first ( l )		88977	0					
ANR	88996	IdentifierDeclType	RGraphNode *		88977	0					
ANR	88997	Identifier	rgn		88977	1					
ANR	88998	AssignmentExpression	* rgn = r_list_first ( l )		88977	2		=			
ANR	88999	Identifier	rgn		88977	0					
ANR	89000	CallExpression	r_list_first ( l )		88977	1					
ANR	89001	Callee	r_list_first		88977	0					
ANR	89002	Identifier	r_list_first		88977	0					
ANR	89003	ArgumentList	l		88977	1					
ANR	89004	Argument	l		88977	0					
ANR	89005	Identifier	l		88977	0					
ANR	89006	ReturnStatement	return get_anode ( rgn ) ;	3812:1:97232:97254	88977	2	True				
ANR	89007	CallExpression	get_anode ( rgn )		88977	0					
ANR	89008	Callee	get_anode		88977	0					
ANR	89009	Identifier	get_anode		88977	0					
ANR	89010	ArgumentList	rgn		88977	1					
ANR	89011	Argument	rgn		88977	0					
ANR	89012	Identifier	rgn		88977	0					
ANR	89013	ReturnType	R_API RANode *		88977	1					
ANR	89014	Identifier	r_agraph_get_first_node		88977	2					
ANR	89015	ParameterList	const RAGraph * g		88977	3					
ANR	89016	Parameter	const RAGraph * g	3809:38:97126:97141	88977	0	True				
ANR	89017	ParameterType	const RAGraph *		88977	0					
ANR	89018	Identifier	g		88977	1					
ANR	89019	CFGEntryNode	ENTRY		88977		True				
ANR	89020	CFGExitNode	EXIT		88977		True				
ANR	89021	Symbol	r_list_first		88977						
ANR	89022	Symbol	* g		88977						
ANR	89023	Symbol	r_graph_get_nodes		88977						
ANR	89024	Symbol	get_anode		88977						
ANR	89025	Symbol	g -> graph		88977						
ANR	89026	Symbol	g		88977						
ANR	89027	Symbol	rgn		88977						
ANR	89028	Symbol	l		88977						
ANR	89029	Function	r_agraph_get_node	3815:0:97259:97515							
ANR	89030	FunctionDef	"r_agraph_get_node (const RAGraph * g , const char * title)"		89029	0					
ANR	89031	CompoundStatement		3815:69:97328:97515	89029	0					
ANR	89032	IdentifierDeclStatement	"char * title_trunc = title ? r_str_trunc_ellipsis ( title , 255 ) : NULL ;"	3816:1:97331:97399	89029	0	True				
ANR	89033	IdentifierDecl	"* title_trunc = title ? r_str_trunc_ellipsis ( title , 255 ) : NULL"		89029	0					
ANR	89034	IdentifierDeclType	char *		89029	0					
ANR	89035	Identifier	title_trunc		89029	1					
ANR	89036	AssignmentExpression	"* title_trunc = title ? r_str_trunc_ellipsis ( title , 255 ) : NULL"		89029	2		=			
ANR	89037	Identifier	title_trunc		89029	0					
ANR	89038	ConditionalExpression	"title ? r_str_trunc_ellipsis ( title , 255 ) : NULL"		89029	1					
ANR	89039	Condition	title		89029	0					
ANR	89040	Identifier	title		89029	0					
ANR	89041	CallExpression	"r_str_trunc_ellipsis ( title , 255 )"		89029	1					
ANR	89042	Callee	r_str_trunc_ellipsis		89029	0					
ANR	89043	Identifier	r_str_trunc_ellipsis		89029	0					
ANR	89044	ArgumentList	title		89029	1					
ANR	89045	Argument	title		89029	0					
ANR	89046	Identifier	title		89029	0					
ANR	89047	Argument	255		89029	1					
ANR	89048	PrimaryExpression	255		89029	0					
ANR	89049	Identifier	NULL		89029	2					
ANR	89050	IdentifierDeclStatement	"RANode * node = ( RANode * ) ( size_t ) sdb_num_get ( g -> nodes , title_trunc , NULL ) ;"	3817:1:97402:97478	89029	1	True				
ANR	89051	IdentifierDecl	"* node = ( RANode * ) ( size_t ) sdb_num_get ( g -> nodes , title_trunc , NULL )"		89029	0					
ANR	89052	IdentifierDeclType	RANode *		89029	0					
ANR	89053	Identifier	node		89029	1					
ANR	89054	AssignmentExpression	"* node = ( RANode * ) ( size_t ) sdb_num_get ( g -> nodes , title_trunc , NULL )"		89029	2		=			
ANR	89055	Identifier	node		89029	0					
ANR	89056	CastExpression	"( RANode * ) ( size_t ) sdb_num_get ( g -> nodes , title_trunc , NULL )"		89029	1					
ANR	89057	CastTarget	RANode *		89029	0					
ANR	89058	CastExpression	"( size_t ) sdb_num_get ( g -> nodes , title_trunc , NULL )"		89029	1					
ANR	89059	CastTarget	size_t		89029	0					
ANR	89060	CallExpression	"sdb_num_get ( g -> nodes , title_trunc , NULL )"		89029	1					
ANR	89061	Callee	sdb_num_get		89029	0					
ANR	89062	Identifier	sdb_num_get		89029	0					
ANR	89063	ArgumentList	g -> nodes		89029	1					
ANR	89064	Argument	g -> nodes		89029	0					
ANR	89065	PtrMemberAccess	g -> nodes		89029	0					
ANR	89066	Identifier	g		89029	0					
ANR	89067	Identifier	nodes		89029	1					
ANR	89068	Argument	title_trunc		89029	1					
ANR	89069	Identifier	title_trunc		89029	0					
ANR	89070	Argument	NULL		89029	2					
ANR	89071	Identifier	NULL		89029	0					
ANR	89072	ExpressionStatement	free ( title_trunc )	3818:1:97481:97499	89029	2	True				
ANR	89073	CallExpression	free ( title_trunc )		89029	0					
ANR	89074	Callee	free		89029	0					
ANR	89075	Identifier	free		89029	0					
ANR	89076	ArgumentList	title_trunc		89029	1					
ANR	89077	Argument	title_trunc		89029	0					
ANR	89078	Identifier	title_trunc		89029	0					
ANR	89079	ReturnStatement	return node ;	3819:1:97502:97513	89029	3	True				
ANR	89080	Identifier	node		89029	0					
ANR	89081	ReturnType	R_API RANode *		89029	1					
ANR	89082	Identifier	r_agraph_get_node		89029	2					
ANR	89083	ParameterList	"const RAGraph * g , const char * title"		89029	3					
ANR	89084	Parameter	const RAGraph * g	3815:32:97291:97306	89029	0	True				
ANR	89085	ParameterType	const RAGraph *		89029	0					
ANR	89086	Identifier	g		89029	1					
ANR	89087	Parameter	const char * title	3815:50:97309:97325	89029	1	True				
ANR	89088	ParameterType	const char *		89029	0					
ANR	89089	Identifier	title		89029	1					
ANR	89090	CFGEntryNode	ENTRY		89029		True				
ANR	89091	CFGExitNode	EXIT		89029		True				
ANR	89092	Symbol	sdb_num_get		89029						
ANR	89093	Symbol	* g		89029						
ANR	89094	Symbol	node		89029						
ANR	89095	Symbol	NULL		89029						
ANR	89096	Symbol	g -> nodes		89029						
ANR	89097	Symbol	g		89029						
ANR	89098	Symbol	r_str_trunc_ellipsis		89029						
ANR	89099	Symbol	title		89029						
ANR	89100	Symbol	title_trunc		89029						
ANR	89101	Function	r_agraph_add_edge	3822:0:97518:97807							
ANR	89102	FunctionDef	"r_agraph_add_edge (const RAGraph * g , RANode * a , RANode * b)"		89101	0					
ANR	89103	CompoundStatement		3822:69:97587:97807	89101	0					
ANR	89104	ExpressionStatement	r_return_if_fail ( g && a && b )	3823:1:97590:97620	89101	0	True				
ANR	89105	CallExpression	r_return_if_fail ( g && a && b )		89101	0					
ANR	89106	Callee	r_return_if_fail		89101	0					
ANR	89107	Identifier	r_return_if_fail		89101	0					
ANR	89108	ArgumentList	g && a && b		89101	1					
ANR	89109	Argument	g && a && b		89101	0					
ANR	89110	AndExpression	g && a && b		89101	0		&&			
ANR	89111	Identifier	g		89101	0					
ANR	89112	AndExpression	a && b		89101	1		&&			
ANR	89113	Identifier	a		89101	0					
ANR	89114	Identifier	b		89101	1					
ANR	89115	ExpressionStatement	"r_graph_add_edge ( g -> graph , a -> gnode , b -> gnode )"	3824:1:97623:97670	89101	1	True				
ANR	89116	CallExpression	"r_graph_add_edge ( g -> graph , a -> gnode , b -> gnode )"		89101	0					
ANR	89117	Callee	r_graph_add_edge		89101	0					
ANR	89118	Identifier	r_graph_add_edge		89101	0					
ANR	89119	ArgumentList	g -> graph		89101	1					
ANR	89120	Argument	g -> graph		89101	0					
ANR	89121	PtrMemberAccess	g -> graph		89101	0					
ANR	89122	Identifier	g		89101	0					
ANR	89123	Identifier	graph		89101	1					
ANR	89124	Argument	a -> gnode		89101	1					
ANR	89125	PtrMemberAccess	a -> gnode		89101	0					
ANR	89126	Identifier	a		89101	0					
ANR	89127	Identifier	gnode		89101	1					
ANR	89128	Argument	b -> gnode		89101	2					
ANR	89129	PtrMemberAccess	b -> gnode		89101	0					
ANR	89130	Identifier	b		89101	0					
ANR	89131	Identifier	gnode		89101	1					
ANR	89132	IfStatement	if ( a -> title && b -> title )		89101	2					
ANR	89133	Condition	a -> title && b -> title	3825:5:97677:97696	89101	0	True				
ANR	89134	AndExpression	a -> title && b -> title		89101	0		&&			
ANR	89135	PtrMemberAccess	a -> title		89101	0					
ANR	89136	Identifier	a		89101	0					
ANR	89137	Identifier	title		89101	1					
ANR	89138	PtrMemberAccess	b -> title		89101	1					
ANR	89139	Identifier	b		89101	0					
ANR	89140	Identifier	title		89101	1					
ANR	89141	CompoundStatement		5:2:115:173	89101	1					
ANR	89142	IdentifierDeclStatement	"char * k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title ) ;"	3826:2:97703:97761	89101	0	True				
ANR	89143	IdentifierDecl	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89101	0					
ANR	89144	IdentifierDeclType	char *		89101	0					
ANR	89145	Identifier	k		89101	1					
ANR	89146	AssignmentExpression	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89101	2		=			
ANR	89147	Identifier	k		89101	0					
ANR	89148	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89101	1					
ANR	89149	Callee	sdb_fmt		89101	0					
ANR	89150	Identifier	sdb_fmt		89101	0					
ANR	89151	ArgumentList	"""agraph.nodes.%s.neighbours"""		89101	1					
ANR	89152	Argument	"""agraph.nodes.%s.neighbours"""		89101	0					
ANR	89153	PrimaryExpression	"""agraph.nodes.%s.neighbours"""		89101	0					
ANR	89154	Argument	a -> title		89101	1					
ANR	89155	PtrMemberAccess	a -> title		89101	0					
ANR	89156	Identifier	a		89101	0					
ANR	89157	Identifier	title		89101	1					
ANR	89158	ExpressionStatement	"sdb_array_add ( g -> db , k , b -> title , 0 )"	3827:2:97765:97802	89101	1	True				
ANR	89159	CallExpression	"sdb_array_add ( g -> db , k , b -> title , 0 )"		89101	0					
ANR	89160	Callee	sdb_array_add		89101	0					
ANR	89161	Identifier	sdb_array_add		89101	0					
ANR	89162	ArgumentList	g -> db		89101	1					
ANR	89163	Argument	g -> db		89101	0					
ANR	89164	PtrMemberAccess	g -> db		89101	0					
ANR	89165	Identifier	g		89101	0					
ANR	89166	Identifier	db		89101	1					
ANR	89167	Argument	k		89101	1					
ANR	89168	Identifier	k		89101	0					
ANR	89169	Argument	b -> title		89101	2					
ANR	89170	PtrMemberAccess	b -> title		89101	0					
ANR	89171	Identifier	b		89101	0					
ANR	89172	Identifier	title		89101	1					
ANR	89173	Argument	0		89101	3					
ANR	89174	PrimaryExpression	0		89101	0					
ANR	89175	ReturnType	R_API void		89101	1					
ANR	89176	Identifier	r_agraph_add_edge		89101	2					
ANR	89177	ParameterList	"const RAGraph * g , RANode * a , RANode * b"		89101	3					
ANR	89178	Parameter	const RAGraph * g	3822:29:97547:97562	89101	0	True				
ANR	89179	ParameterType	const RAGraph *		89101	0					
ANR	89180	Identifier	g		89101	1					
ANR	89181	Parameter	RANode * a	3822:47:97565:97573	89101	1	True				
ANR	89182	ParameterType	RANode *		89101	0					
ANR	89183	Identifier	a		89101	1					
ANR	89184	Parameter	RANode * b	3822:58:97576:97584	89101	2	True				
ANR	89185	ParameterType	RANode *		89101	0					
ANR	89186	Identifier	b		89101	1					
ANR	89187	CFGEntryNode	ENTRY		89101		True				
ANR	89188	CFGExitNode	EXIT		89101		True				
ANR	89189	Symbol	a -> title		89101						
ANR	89190	Symbol	a		89101						
ANR	89191	Symbol	b		89101						
ANR	89192	Symbol	b -> gnode		89101						
ANR	89193	Symbol	g		89101						
ANR	89194	Symbol	g -> db		89101						
ANR	89195	Symbol	a -> gnode		89101						
ANR	89196	Symbol	* a		89101						
ANR	89197	Symbol	k		89101						
ANR	89198	Symbol	* b		89101						
ANR	89199	Symbol	* g		89101						
ANR	89200	Symbol	g -> graph		89101						
ANR	89201	Symbol	b -> title		89101						
ANR	89202	Symbol	sdb_fmt		89101						
ANR	89203	Function	r_agraph_add_edge_at	3831:0:97810:98127							
ANR	89204	FunctionDef	"r_agraph_add_edge_at (const RAGraph * g , RANode * a , RANode * b , int nth)"		89203	0					
ANR	89205	CompoundStatement		3831:81:97891:98127	89203	0					
ANR	89206	ExpressionStatement	r_return_if_fail ( g && a && b )	3832:1:97894:97924	89203	0	True				
ANR	89207	CallExpression	r_return_if_fail ( g && a && b )		89203	0					
ANR	89208	Callee	r_return_if_fail		89203	0					
ANR	89209	Identifier	r_return_if_fail		89203	0					
ANR	89210	ArgumentList	g && a && b		89203	1					
ANR	89211	Argument	g && a && b		89203	0					
ANR	89212	AndExpression	g && a && b		89203	0		&&			
ANR	89213	Identifier	g		89203	0					
ANR	89214	AndExpression	a && b		89203	1		&&			
ANR	89215	Identifier	a		89203	0					
ANR	89216	Identifier	b		89203	1					
ANR	89217	IfStatement	if ( a -> title && b -> title )		89203	1					
ANR	89218	Condition	a -> title && b -> title	3833:5:97931:97950	89203	0	True				
ANR	89219	AndExpression	a -> title && b -> title		89203	0		&&			
ANR	89220	PtrMemberAccess	a -> title		89203	0					
ANR	89221	Identifier	a		89203	0					
ANR	89222	Identifier	title		89203	1					
ANR	89223	PtrMemberAccess	b -> title		89203	1					
ANR	89224	Identifier	b		89203	0					
ANR	89225	Identifier	title		89203	1					
ANR	89226	CompoundStatement		4:2:65:123	89203	1					
ANR	89227	IdentifierDeclStatement	"char * k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title ) ;"	3834:2:97957:98015	89203	0	True				
ANR	89228	IdentifierDecl	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89203	0					
ANR	89229	IdentifierDeclType	char *		89203	0					
ANR	89230	Identifier	k		89203	1					
ANR	89231	AssignmentExpression	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89203	2		=			
ANR	89232	Identifier	k		89203	0					
ANR	89233	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89203	1					
ANR	89234	Callee	sdb_fmt		89203	0					
ANR	89235	Identifier	sdb_fmt		89203	0					
ANR	89236	ArgumentList	"""agraph.nodes.%s.neighbours"""		89203	1					
ANR	89237	Argument	"""agraph.nodes.%s.neighbours"""		89203	0					
ANR	89238	PrimaryExpression	"""agraph.nodes.%s.neighbours"""		89203	0					
ANR	89239	Argument	a -> title		89203	1					
ANR	89240	PtrMemberAccess	a -> title		89203	0					
ANR	89241	Identifier	a		89203	0					
ANR	89242	Identifier	title		89203	1					
ANR	89243	ExpressionStatement	"sdb_array_insert ( g -> db , k , nth , b -> title , 0 )"	3835:2:98019:98064	89203	1	True				
ANR	89244	CallExpression	"sdb_array_insert ( g -> db , k , nth , b -> title , 0 )"		89203	0					
ANR	89245	Callee	sdb_array_insert		89203	0					
ANR	89246	Identifier	sdb_array_insert		89203	0					
ANR	89247	ArgumentList	g -> db		89203	1					
ANR	89248	Argument	g -> db		89203	0					
ANR	89249	PtrMemberAccess	g -> db		89203	0					
ANR	89250	Identifier	g		89203	0					
ANR	89251	Identifier	db		89203	1					
ANR	89252	Argument	k		89203	1					
ANR	89253	Identifier	k		89203	0					
ANR	89254	Argument	nth		89203	2					
ANR	89255	Identifier	nth		89203	0					
ANR	89256	Argument	b -> title		89203	3					
ANR	89257	PtrMemberAccess	b -> title		89203	0					
ANR	89258	Identifier	b		89203	0					
ANR	89259	Identifier	title		89203	1					
ANR	89260	Argument	0		89203	4					
ANR	89261	PrimaryExpression	0		89203	0					
ANR	89262	ExpressionStatement	"r_graph_add_edge_at ( g -> graph , a -> gnode , b -> gnode , nth )"	3837:1:98070:98125	89203	2	True				
ANR	89263	CallExpression	"r_graph_add_edge_at ( g -> graph , a -> gnode , b -> gnode , nth )"		89203	0					
ANR	89264	Callee	r_graph_add_edge_at		89203	0					
ANR	89265	Identifier	r_graph_add_edge_at		89203	0					
ANR	89266	ArgumentList	g -> graph		89203	1					
ANR	89267	Argument	g -> graph		89203	0					
ANR	89268	PtrMemberAccess	g -> graph		89203	0					
ANR	89269	Identifier	g		89203	0					
ANR	89270	Identifier	graph		89203	1					
ANR	89271	Argument	a -> gnode		89203	1					
ANR	89272	PtrMemberAccess	a -> gnode		89203	0					
ANR	89273	Identifier	a		89203	0					
ANR	89274	Identifier	gnode		89203	1					
ANR	89275	Argument	b -> gnode		89203	2					
ANR	89276	PtrMemberAccess	b -> gnode		89203	0					
ANR	89277	Identifier	b		89203	0					
ANR	89278	Identifier	gnode		89203	1					
ANR	89279	Argument	nth		89203	3					
ANR	89280	Identifier	nth		89203	0					
ANR	89281	ReturnType	R_API void		89203	1					
ANR	89282	Identifier	r_agraph_add_edge_at		89203	2					
ANR	89283	ParameterList	"const RAGraph * g , RANode * a , RANode * b , int nth"		89203	3					
ANR	89284	Parameter	const RAGraph * g	3831:32:97842:97857	89203	0	True				
ANR	89285	ParameterType	const RAGraph *		89203	0					
ANR	89286	Identifier	g		89203	1					
ANR	89287	Parameter	RANode * a	3831:50:97860:97868	89203	1	True				
ANR	89288	ParameterType	RANode *		89203	0					
ANR	89289	Identifier	a		89203	1					
ANR	89290	Parameter	RANode * b	3831:61:97871:97879	89203	2	True				
ANR	89291	ParameterType	RANode *		89203	0					
ANR	89292	Identifier	b		89203	1					
ANR	89293	Parameter	int nth	3831:72:97882:97888	89203	3	True				
ANR	89294	ParameterType	int		89203	0					
ANR	89295	Identifier	nth		89203	1					
ANR	89296	CFGEntryNode	ENTRY		89203		True				
ANR	89297	CFGExitNode	EXIT		89203		True				
ANR	89298	Symbol	a -> title		89203						
ANR	89299	Symbol	a		89203						
ANR	89300	Symbol	b		89203						
ANR	89301	Symbol	nth		89203						
ANR	89302	Symbol	b -> gnode		89203						
ANR	89303	Symbol	g		89203						
ANR	89304	Symbol	g -> db		89203						
ANR	89305	Symbol	a -> gnode		89203						
ANR	89306	Symbol	* a		89203						
ANR	89307	Symbol	k		89203						
ANR	89308	Symbol	* b		89203						
ANR	89309	Symbol	* g		89203						
ANR	89310	Symbol	g -> graph		89203						
ANR	89311	Symbol	b -> title		89203						
ANR	89312	Symbol	sdb_fmt		89203						
ANR	89313	Function	r_agraph_del_edge	3840:0:98130:98428							
ANR	89314	FunctionDef	"r_agraph_del_edge (const RAGraph * g , RANode * a , RANode * b)"		89313	0					
ANR	89315	CompoundStatement		3840:69:98199:98428	89313	0					
ANR	89316	ExpressionStatement	r_return_if_fail ( g && a && b )	3841:1:98202:98232	89313	0	True				
ANR	89317	CallExpression	r_return_if_fail ( g && a && b )		89313	0					
ANR	89318	Callee	r_return_if_fail		89313	0					
ANR	89319	Identifier	r_return_if_fail		89313	0					
ANR	89320	ArgumentList	g && a && b		89313	1					
ANR	89321	Argument	g && a && b		89313	0					
ANR	89322	AndExpression	g && a && b		89313	0		&&			
ANR	89323	Identifier	g		89313	0					
ANR	89324	AndExpression	a && b		89313	1		&&			
ANR	89325	Identifier	a		89313	0					
ANR	89326	Identifier	b		89313	1					
ANR	89327	IfStatement	if ( a -> title && b -> title )		89313	1					
ANR	89328	Condition	a -> title && b -> title	3842:5:98239:98258	89313	0	True				
ANR	89329	AndExpression	a -> title && b -> title		89313	0		&&			
ANR	89330	PtrMemberAccess	a -> title		89313	0					
ANR	89331	Identifier	a		89313	0					
ANR	89332	Identifier	title		89313	1					
ANR	89333	PtrMemberAccess	b -> title		89313	1					
ANR	89334	Identifier	b		89313	0					
ANR	89335	Identifier	title		89313	1					
ANR	89336	CompoundStatement		4:2:65:129	89313	1					
ANR	89337	IdentifierDeclStatement	"const char * k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title ) ;"	3843:2:98265:98329	89313	0	True				
ANR	89338	IdentifierDecl	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89313	0					
ANR	89339	IdentifierDeclType	const char *		89313	0					
ANR	89340	Identifier	k		89313	1					
ANR	89341	AssignmentExpression	"* k = sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89313	2		=			
ANR	89342	Identifier	k		89313	0					
ANR	89343	CallExpression	"sdb_fmt ( ""agraph.nodes.%s.neighbours"" , a -> title )"		89313	1					
ANR	89344	Callee	sdb_fmt		89313	0					
ANR	89345	Identifier	sdb_fmt		89313	0					
ANR	89346	ArgumentList	"""agraph.nodes.%s.neighbours"""		89313	1					
ANR	89347	Argument	"""agraph.nodes.%s.neighbours"""		89313	0					
ANR	89348	PrimaryExpression	"""agraph.nodes.%s.neighbours"""		89313	0					
ANR	89349	Argument	a -> title		89313	1					
ANR	89350	PtrMemberAccess	a -> title		89313	0					
ANR	89351	Identifier	a		89313	0					
ANR	89352	Identifier	title		89313	1					
ANR	89353	ExpressionStatement	"sdb_array_remove ( g -> db , k , b -> title , 0 )"	3844:2:98333:98373	89313	1	True				
ANR	89354	CallExpression	"sdb_array_remove ( g -> db , k , b -> title , 0 )"		89313	0					
ANR	89355	Callee	sdb_array_remove		89313	0					
ANR	89356	Identifier	sdb_array_remove		89313	0					
ANR	89357	ArgumentList	g -> db		89313	1					
ANR	89358	Argument	g -> db		89313	0					
ANR	89359	PtrMemberAccess	g -> db		89313	0					
ANR	89360	Identifier	g		89313	0					
ANR	89361	Identifier	db		89313	1					
ANR	89362	Argument	k		89313	1					
ANR	89363	Identifier	k		89313	0					
ANR	89364	Argument	b -> title		89313	2					
ANR	89365	PtrMemberAccess	b -> title		89313	0					
ANR	89366	Identifier	b		89313	0					
ANR	89367	Identifier	title		89313	1					
ANR	89368	Argument	0		89313	3					
ANR	89369	PrimaryExpression	0		89313	0					
ANR	89370	ExpressionStatement	"r_graph_del_edge ( g -> graph , a -> gnode , b -> gnode )"	3846:1:98379:98426	89313	2	True				
ANR	89371	CallExpression	"r_graph_del_edge ( g -> graph , a -> gnode , b -> gnode )"		89313	0					
ANR	89372	Callee	r_graph_del_edge		89313	0					
ANR	89373	Identifier	r_graph_del_edge		89313	0					
ANR	89374	ArgumentList	g -> graph		89313	1					
ANR	89375	Argument	g -> graph		89313	0					
ANR	89376	PtrMemberAccess	g -> graph		89313	0					
ANR	89377	Identifier	g		89313	0					
ANR	89378	Identifier	graph		89313	1					
ANR	89379	Argument	a -> gnode		89313	1					
ANR	89380	PtrMemberAccess	a -> gnode		89313	0					
ANR	89381	Identifier	a		89313	0					
ANR	89382	Identifier	gnode		89313	1					
ANR	89383	Argument	b -> gnode		89313	2					
ANR	89384	PtrMemberAccess	b -> gnode		89313	0					
ANR	89385	Identifier	b		89313	0					
ANR	89386	Identifier	gnode		89313	1					
ANR	89387	ReturnType	R_API void		89313	1					
ANR	89388	Identifier	r_agraph_del_edge		89313	2					
ANR	89389	ParameterList	"const RAGraph * g , RANode * a , RANode * b"		89313	3					
ANR	89390	Parameter	const RAGraph * g	3840:29:98159:98174	89313	0	True				
ANR	89391	ParameterType	const RAGraph *		89313	0					
ANR	89392	Identifier	g		89313	1					
ANR	89393	Parameter	RANode * a	3840:47:98177:98185	89313	1	True				
ANR	89394	ParameterType	RANode *		89313	0					
ANR	89395	Identifier	a		89313	1					
ANR	89396	Parameter	RANode * b	3840:58:98188:98196	89313	2	True				
ANR	89397	ParameterType	RANode *		89313	0					
ANR	89398	Identifier	b		89313	1					
ANR	89399	CFGEntryNode	ENTRY		89313		True				
ANR	89400	CFGExitNode	EXIT		89313		True				
ANR	89401	Symbol	a -> title		89313						
ANR	89402	Symbol	a		89313						
ANR	89403	Symbol	b		89313						
ANR	89404	Symbol	b -> gnode		89313						
ANR	89405	Symbol	g		89313						
ANR	89406	Symbol	g -> db		89313						
ANR	89407	Symbol	a -> gnode		89313						
ANR	89408	Symbol	* a		89313						
ANR	89409	Symbol	k		89313						
ANR	89410	Symbol	* b		89313						
ANR	89411	Symbol	* g		89313						
ANR	89412	Symbol	g -> graph		89313						
ANR	89413	Symbol	b -> title		89313						
ANR	89414	Symbol	sdb_fmt		89313						
ANR	89415	Function	r_agraph_reset	3849:0:98431:98833							
ANR	89416	FunctionDef	r_agraph_reset (RAGraph * g)		89415	0					
ANR	89417	CompoundStatement		3849:38:98469:98833	89415	0					
ANR	89418	ExpressionStatement	agraph_free_nodes ( g )	3850:1:98472:98493	89415	0	True				
ANR	89419	CallExpression	agraph_free_nodes ( g )		89415	0					
ANR	89420	Callee	agraph_free_nodes		89415	0					
ANR	89421	Identifier	agraph_free_nodes		89415	0					
ANR	89422	ArgumentList	g		89415	1					
ANR	89423	Argument	g		89415	0					
ANR	89424	Identifier	g		89415	0					
ANR	89425	ExpressionStatement	r_graph_reset ( g -> graph )	3851:1:98496:98520	89415	1	True				
ANR	89426	CallExpression	r_graph_reset ( g -> graph )		89415	0					
ANR	89427	Callee	r_graph_reset		89415	0					
ANR	89428	Identifier	r_graph_reset		89415	0					
ANR	89429	ArgumentList	g -> graph		89415	1					
ANR	89430	Argument	g -> graph		89415	0					
ANR	89431	PtrMemberAccess	g -> graph		89415	0					
ANR	89432	Identifier	g		89415	0					
ANR	89433	Identifier	graph		89415	1					
ANR	89434	ExpressionStatement	"r_agraph_set_title ( g , NULL )"	3852:1:98523:98551	89415	2	True				
ANR	89435	CallExpression	"r_agraph_set_title ( g , NULL )"		89415	0					
ANR	89436	Callee	r_agraph_set_title		89415	0					
ANR	89437	Identifier	r_agraph_set_title		89415	0					
ANR	89438	ArgumentList	g		89415	1					
ANR	89439	Argument	g		89415	0					
ANR	89440	Identifier	g		89415	0					
ANR	89441	Argument	NULL		89415	1					
ANR	89442	Identifier	NULL		89415	0					
ANR	89443	ExpressionStatement	sdb_reset ( g -> db )	3853:1:98554:98571	89415	3	True				
ANR	89444	CallExpression	sdb_reset ( g -> db )		89415	0					
ANR	89445	Callee	sdb_reset		89415	0					
ANR	89446	Identifier	sdb_reset		89415	0					
ANR	89447	ArgumentList	g -> db		89415	1					
ANR	89448	Argument	g -> db		89415	0					
ANR	89449	PtrMemberAccess	g -> db		89415	0					
ANR	89450	Identifier	g		89415	0					
ANR	89451	Identifier	db		89415	1					
ANR	89452	IfStatement	if ( g -> edges )		89415	4					
ANR	89453	Condition	g -> edges	3854:5:98578:98585	89415	0	True				
ANR	89454	PtrMemberAccess	g -> edges		89415	0					
ANR	89455	Identifier	g		89415	0					
ANR	89456	Identifier	edges		89415	1					
ANR	89457	CompoundStatement		6:15:118:118	89415	1					
ANR	89458	ExpressionStatement	r_list_purge ( g -> edges )	3855:2:98592:98615	89415	0	True				
ANR	89459	CallExpression	r_list_purge ( g -> edges )		89415	0					
ANR	89460	Callee	r_list_purge		89415	0					
ANR	89461	Identifier	r_list_purge		89415	0					
ANR	89462	ArgumentList	g -> edges		89415	1					
ANR	89463	Argument	g -> edges		89415	0					
ANR	89464	PtrMemberAccess	g -> edges		89415	0					
ANR	89465	Identifier	g		89415	0					
ANR	89466	Identifier	edges		89415	1					
ANR	89467	ExpressionStatement	g -> nodes = sdb_new0 ( )	3857:1:98621:98643	89415	5	True				
ANR	89468	AssignmentExpression	g -> nodes = sdb_new0 ( )		89415	0		=			
ANR	89469	PtrMemberAccess	g -> nodes		89415	0					
ANR	89470	Identifier	g		89415	0					
ANR	89471	Identifier	nodes		89415	1					
ANR	89472	CallExpression	sdb_new0 ( )		89415	1					
ANR	89473	Callee	sdb_new0		89415	0					
ANR	89474	Identifier	sdb_new0		89415	0					
ANR	89475	ArgumentList			89415	1					
ANR	89476	ExpressionStatement	g -> update_seek_on = NULL	3858:1:98646:98670	89415	6	True				
ANR	89477	AssignmentExpression	g -> update_seek_on = NULL		89415	0		=			
ANR	89478	PtrMemberAccess	g -> update_seek_on		89415	0					
ANR	89479	Identifier	g		89415	0					
ANR	89480	Identifier	update_seek_on		89415	1					
ANR	89481	Identifier	NULL		89415	1					
ANR	89482	ExpressionStatement	g -> need_reload_nodes = false	3859:1:98673:98701	89415	7	True				
ANR	89483	AssignmentExpression	g -> need_reload_nodes = false		89415	0		=			
ANR	89484	PtrMemberAccess	g -> need_reload_nodes		89415	0					
ANR	89485	Identifier	g		89415	0					
ANR	89486	Identifier	need_reload_nodes		89415	1					
ANR	89487	Identifier	false		89415	1					
ANR	89488	ExpressionStatement	g -> need_set_layout = true	3860:1:98704:98729	89415	8	True				
ANR	89489	AssignmentExpression	g -> need_set_layout = true		89415	0		=			
ANR	89490	PtrMemberAccess	g -> need_set_layout		89415	0					
ANR	89491	Identifier	g		89415	0					
ANR	89492	Identifier	need_set_layout		89415	1					
ANR	89493	Identifier	true		89415	1					
ANR	89494	ExpressionStatement	g -> need_update_dim = true	3861:1:98732:98757	89415	9	True				
ANR	89495	AssignmentExpression	g -> need_update_dim = true		89415	0		=			
ANR	89496	PtrMemberAccess	g -> need_update_dim		89415	0					
ANR	89497	Identifier	g		89415	0					
ANR	89498	Identifier	need_update_dim		89415	1					
ANR	89499	Identifier	true		89415	1					
ANR	89500	ExpressionStatement	g -> x = g -> y = g -> w = g -> h = 0	3862:1:98760:98789	89415	10	True				
ANR	89501	AssignmentExpression	g -> x = g -> y = g -> w = g -> h = 0		89415	0		=			
ANR	89502	PtrMemberAccess	g -> x		89415	0					
ANR	89503	Identifier	g		89415	0					
ANR	89504	Identifier	x		89415	1					
ANR	89505	AssignmentExpression	g -> y = g -> w = g -> h = 0		89415	1		=			
ANR	89506	PtrMemberAccess	g -> y		89415	0					
ANR	89507	Identifier	g		89415	0					
ANR	89508	Identifier	y		89415	1					
ANR	89509	AssignmentExpression	g -> w = g -> h = 0		89415	1		=			
ANR	89510	PtrMemberAccess	g -> w		89415	0					
ANR	89511	Identifier	g		89415	0					
ANR	89512	Identifier	w		89415	1					
ANR	89513	AssignmentExpression	g -> h = 0		89415	1		=			
ANR	89514	PtrMemberAccess	g -> h		89415	0					
ANR	89515	Identifier	g		89415	0					
ANR	89516	Identifier	h		89415	1					
ANR	89517	PrimaryExpression	0		89415	1					
ANR	89518	ExpressionStatement	agraph_sdb_init ( g )	3863:1:98792:98811	89415	11	True				
ANR	89519	CallExpression	agraph_sdb_init ( g )		89415	0					
ANR	89520	Callee	agraph_sdb_init		89415	0					
ANR	89521	Identifier	agraph_sdb_init		89415	0					
ANR	89522	ArgumentList	g		89415	1					
ANR	89523	Argument	g		89415	0					
ANR	89524	Identifier	g		89415	0					
ANR	89525	ExpressionStatement	g -> curnode = NULL	3864:1:98814:98831	89415	12	True				
ANR	89526	AssignmentExpression	g -> curnode = NULL		89415	0		=			
ANR	89527	PtrMemberAccess	g -> curnode		89415	0					
ANR	89528	Identifier	g		89415	0					
ANR	89529	Identifier	curnode		89415	1					
ANR	89530	Identifier	NULL		89415	1					
ANR	89531	ReturnType	R_API void		89415	1					
ANR	89532	Identifier	r_agraph_reset		89415	2					
ANR	89533	ParameterList	RAGraph * g		89415	3					
ANR	89534	Parameter	RAGraph * g	3849:26:98457:98466	89415	0	True				
ANR	89535	ParameterType	RAGraph *		89415	0					
ANR	89536	Identifier	g		89415	1					
ANR	89537	CFGEntryNode	ENTRY		89415		True				
ANR	89538	CFGExitNode	EXIT		89415		True				
ANR	89539	Symbol	sdb_new0		89415						
ANR	89540	Symbol	g -> need_set_layout		89415						
ANR	89541	Symbol	NULL		89415						
ANR	89542	Symbol	g -> need_reload_nodes		89415						
ANR	89543	Symbol	g		89415						
ANR	89544	Symbol	g -> db		89415						
ANR	89545	Symbol	g -> update_seek_on		89415						
ANR	89546	Symbol	false		89415						
ANR	89547	Symbol	g -> h		89415						
ANR	89548	Symbol	g -> edges		89415						
ANR	89549	Symbol	g -> need_update_dim		89415						
ANR	89550	Symbol	* g		89415						
ANR	89551	Symbol	g -> graph		89415						
ANR	89552	Symbol	g -> nodes		89415						
ANR	89553	Symbol	g -> curnode		89415						
ANR	89554	Symbol	true		89415						
ANR	89555	Symbol	g -> y		89415						
ANR	89556	Symbol	g -> x		89415						
ANR	89557	Symbol	g -> w		89415						
ANR	89558	Function	r_agraph_free	3867:0:98836:99061							
ANR	89559	FunctionDef	r_agraph_free (RAGraph * g)		89558	0					
ANR	89560	CompoundStatement		3867:37:98873:99061	89558	0					
ANR	89561	IfStatement	if ( g )		89558	0					
ANR	89562	Condition	g	3868:5:98880:98880	89558	0	True				
ANR	89563	Identifier	g		89558	0					
ANR	89564	CompoundStatement		2:8:9:9	89558	1					
ANR	89565	ExpressionStatement	agraph_free_nodes ( g )	3869:2:98887:98908	89558	0	True				
ANR	89566	CallExpression	agraph_free_nodes ( g )		89558	0					
ANR	89567	Callee	agraph_free_nodes		89558	0					
ANR	89568	Identifier	agraph_free_nodes		89558	0					
ANR	89569	ArgumentList	g		89558	1					
ANR	89570	Argument	g		89558	0					
ANR	89571	Identifier	g		89558	0					
ANR	89572	ExpressionStatement	r_graph_free ( g -> graph )	3870:2:98912:98935	89558	1	True				
ANR	89573	CallExpression	r_graph_free ( g -> graph )		89558	0					
ANR	89574	Callee	r_graph_free		89558	0					
ANR	89575	Identifier	r_graph_free		89558	0					
ANR	89576	ArgumentList	g -> graph		89558	1					
ANR	89577	Argument	g -> graph		89558	0					
ANR	89578	PtrMemberAccess	g -> graph		89558	0					
ANR	89579	Identifier	g		89558	0					
ANR	89580	Identifier	graph		89558	1					
ANR	89581	ExpressionStatement	r_list_free ( g -> edges )	3871:2:98939:98961	89558	2	True				
ANR	89582	CallExpression	r_list_free ( g -> edges )		89558	0					
ANR	89583	Callee	r_list_free		89558	0					
ANR	89584	Identifier	r_list_free		89558	0					
ANR	89585	ArgumentList	g -> edges		89558	1					
ANR	89586	Argument	g -> edges		89558	0					
ANR	89587	PtrMemberAccess	g -> edges		89558	0					
ANR	89588	Identifier	g		89558	0					
ANR	89589	Identifier	edges		89558	1					
ANR	89590	ExpressionStatement	"r_agraph_set_title ( g , NULL )"	3872:2:98965:98993	89558	3	True				
ANR	89591	CallExpression	"r_agraph_set_title ( g , NULL )"		89558	0					
ANR	89592	Callee	r_agraph_set_title		89558	0					
ANR	89593	Identifier	r_agraph_set_title		89558	0					
ANR	89594	ArgumentList	g		89558	1					
ANR	89595	Argument	g		89558	0					
ANR	89596	Identifier	g		89558	0					
ANR	89597	Argument	NULL		89558	1					
ANR	89598	Identifier	NULL		89558	0					
ANR	89599	ExpressionStatement	sdb_free ( g -> db )	3873:2:98997:99013	89558	4	True				
ANR	89600	CallExpression	sdb_free ( g -> db )		89558	0					
ANR	89601	Callee	sdb_free		89558	0					
ANR	89602	Identifier	sdb_free		89558	0					
ANR	89603	ArgumentList	g -> db		89558	1					
ANR	89604	Argument	g -> db		89558	0					
ANR	89605	PtrMemberAccess	g -> db		89558	0					
ANR	89606	Identifier	g		89558	0					
ANR	89607	Identifier	db		89558	1					
ANR	89608	ExpressionStatement	r_cons_canvas_free ( g -> can )	3874:2:99017:99044	89558	5	True				
ANR	89609	CallExpression	r_cons_canvas_free ( g -> can )		89558	0					
ANR	89610	Callee	r_cons_canvas_free		89558	0					
ANR	89611	Identifier	r_cons_canvas_free		89558	0					
ANR	89612	ArgumentList	g -> can		89558	1					
ANR	89613	Argument	g -> can		89558	0					
ANR	89614	PtrMemberAccess	g -> can		89558	0					
ANR	89615	Identifier	g		89558	0					
ANR	89616	Identifier	can		89558	1					
ANR	89617	ExpressionStatement	free ( g )	3875:2:99048:99056	89558	6	True				
ANR	89618	CallExpression	free ( g )		89558	0					
ANR	89619	Callee	free		89558	0					
ANR	89620	Identifier	free		89558	0					
ANR	89621	ArgumentList	g		89558	1					
ANR	89622	Argument	g		89558	0					
ANR	89623	Identifier	g		89558	0					
ANR	89624	ReturnType	R_API void		89558	1					
ANR	89625	Identifier	r_agraph_free		89558	2					
ANR	89626	ParameterList	RAGraph * g		89558	3					
ANR	89627	Parameter	RAGraph * g	3867:25:98861:98870	89558	0	True				
ANR	89628	ParameterType	RAGraph *		89558	0					
ANR	89629	Identifier	g		89558	1					
ANR	89630	CFGEntryNode	ENTRY		89558		True				
ANR	89631	CFGExitNode	EXIT		89558		True				
ANR	89632	Symbol	* g		89558						
ANR	89633	Symbol	NULL		89558						
ANR	89634	Symbol	g -> graph		89558						
ANR	89635	Symbol	g		89558						
ANR	89636	Symbol	g -> db		89558						
ANR	89637	Symbol	g -> edges		89558						
ANR	89638	Symbol	g -> can		89558						
ANR	89639	Function	r_agraph_new	3879:0:99064:99257							
ANR	89640	FunctionDef	r_agraph_new (RConsCanvas * can)		89639	0					
ANR	89641	CompoundStatement		3879:46:99110:99257	89639	0					
ANR	89642	IdentifierDeclStatement	RAGraph * g = R_NEW0 ( RAGraph ) ;	3880:1:99113:99142	89639	0	True				
ANR	89643	IdentifierDecl	* g = R_NEW0 ( RAGraph )		89639	0					
ANR	89644	IdentifierDeclType	RAGraph *		89639	0					
ANR	89645	Identifier	g		89639	1					
ANR	89646	AssignmentExpression	* g = R_NEW0 ( RAGraph )		89639	2		=			
ANR	89647	Identifier	g		89639	0					
ANR	89648	CallExpression	R_NEW0 ( RAGraph )		89639	1					
ANR	89649	Callee	R_NEW0		89639	0					
ANR	89650	Identifier	R_NEW0		89639	0					
ANR	89651	ArgumentList	RAGraph		89639	1					
ANR	89652	Argument	RAGraph		89639	0					
ANR	89653	Identifier	RAGraph		89639	0					
ANR	89654	IfStatement	if ( ! g )		89639	1					
ANR	89655	Condition	! g	3881:5:99149:99150	89639	0	True				
ANR	89656	UnaryOperationExpression	! g		89639	0					
ANR	89657	UnaryOperator	!		89639	0					
ANR	89658	Identifier	g		89639	1					
ANR	89659	CompoundStatement		3:9:42:42	89639	1					
ANR	89660	ReturnStatement	return NULL ;	3882:2:99157:99168	89639	0	True				
ANR	89661	Identifier	NULL		89639	0					
ANR	89662	ExpressionStatement	g -> can = can	3884:1:99174:99186	89639	2	True				
ANR	89663	AssignmentExpression	g -> can = can		89639	0		=			
ANR	89664	PtrMemberAccess	g -> can		89639	0					
ANR	89665	Identifier	g		89639	0					
ANR	89666	Identifier	can		89639	1					
ANR	89667	Identifier	can		89639	1					
ANR	89668	ExpressionStatement	g -> dummy = true	3885:1:99189:99204	89639	3	True				
ANR	89669	AssignmentExpression	g -> dummy = true		89639	0		=			
ANR	89670	PtrMemberAccess	g -> dummy		89639	0					
ANR	89671	Identifier	g		89639	0					
ANR	89672	Identifier	dummy		89639	1					
ANR	89673	Identifier	true		89639	1					
ANR	89674	ExpressionStatement	agraph_init ( g )	3886:1:99207:99222	89639	4	True				
ANR	89675	CallExpression	agraph_init ( g )		89639	0					
ANR	89676	Callee	agraph_init		89639	0					
ANR	89677	Identifier	agraph_init		89639	0					
ANR	89678	ArgumentList	g		89639	1					
ANR	89679	Argument	g		89639	0					
ANR	89680	Identifier	g		89639	0					
ANR	89681	ExpressionStatement	agraph_sdb_init ( g )	3887:1:99225:99244	89639	5	True				
ANR	89682	CallExpression	agraph_sdb_init ( g )		89639	0					
ANR	89683	Callee	agraph_sdb_init		89639	0					
ANR	89684	Identifier	agraph_sdb_init		89639	0					
ANR	89685	ArgumentList	g		89639	1					
ANR	89686	Argument	g		89639	0					
ANR	89687	Identifier	g		89639	0					
ANR	89688	ReturnStatement	return g ;	3888:1:99247:99255	89639	6	True				
ANR	89689	Identifier	g		89639	0					
ANR	89690	ReturnType	R_API RAGraph *		89639	1					
ANR	89691	Identifier	r_agraph_new		89639	2					
ANR	89692	ParameterList	RConsCanvas * can		89639	3					
ANR	89693	Parameter	RConsCanvas * can	3879:28:99092:99107	89639	0	True				
ANR	89694	ParameterType	RConsCanvas *		89639	0					
ANR	89695	Identifier	can		89639	1					
ANR	89696	CFGEntryNode	ENTRY		89639		True				
ANR	89697	CFGExitNode	EXIT		89639		True				
ANR	89698	Symbol	can		89639						
ANR	89699	Symbol	R_NEW0		89639						
ANR	89700	Symbol	* g		89639						
ANR	89701	Symbol	NULL		89639						
ANR	89702	Symbol	g -> dummy		89639						
ANR	89703	Symbol	g		89639						
ANR	89704	Symbol	RAGraph		89639						
ANR	89705	Symbol	true		89639						
ANR	89706	Symbol	g -> can		89639						
ANR	89707	Function	visual_offset	3891:0:99260:99900							
ANR	89708	FunctionDef	"visual_offset (RAGraph * g , RCore * core)"		89707	0					
ANR	89709	CompoundStatement		3891:51:99311:99900	89707	0					
ANR	89710	IdentifierDeclStatement	char buf [ 256 ] ;	3892:1:99314:99327	89707	0	True				
ANR	89711	IdentifierDecl	buf [ 256 ]		89707	0					
ANR	89712	IdentifierDeclType	char [ 256 ]		89707	0					
ANR	89713	Identifier	buf		89707	1					
ANR	89714	PrimaryExpression	256		89707	2					
ANR	89715	IdentifierDeclStatement	int rows ;	3893:1:99330:99338	89707	1	True				
ANR	89716	IdentifierDecl	rows		89707	0					
ANR	89717	IdentifierDeclType	int		89707	0					
ANR	89718	Identifier	rows		89707	1					
ANR	89719	ExpressionStatement	r_cons_get_size ( & rows )	3894:1:99341:99364	89707	2	True				
ANR	89720	CallExpression	r_cons_get_size ( & rows )		89707	0					
ANR	89721	Callee	r_cons_get_size		89707	0					
ANR	89722	Identifier	r_cons_get_size		89707	0					
ANR	89723	ArgumentList	& rows		89707	1					
ANR	89724	Argument	& rows		89707	0					
ANR	89725	UnaryOperationExpression	& rows		89707	0					
ANR	89726	UnaryOperator	&		89707	0					
ANR	89727	Identifier	rows		89707	1					
ANR	89728	ExpressionStatement	"r_cons_gotoxy ( 0 , rows )"	3895:1:99367:99390	89707	3	True				
ANR	89729	CallExpression	"r_cons_gotoxy ( 0 , rows )"		89707	0					
ANR	89730	Callee	r_cons_gotoxy		89707	0					
ANR	89731	Identifier	r_cons_gotoxy		89707	0					
ANR	89732	ArgumentList	0		89707	1					
ANR	89733	Argument	0		89707	0					
ANR	89734	PrimaryExpression	0		89707	0					
ANR	89735	Argument	rows		89707	1					
ANR	89736	Identifier	rows		89707	0					
ANR	89737	ExpressionStatement	r_cons_flush ( )	3896:1:99393:99408	89707	4	True				
ANR	89738	CallExpression	r_cons_flush ( )		89707	0					
ANR	89739	Callee	r_cons_flush		89707	0					
ANR	89740	Identifier	r_cons_flush		89707	0					
ANR	89741	ArgumentList			89707	1					
ANR	89742	ExpressionStatement	core -> cons -> line -> prompt_type = R_LINE_PROMPT_OFFSET	3897:1:99411:99463	89707	5	True				
ANR	89743	AssignmentExpression	core -> cons -> line -> prompt_type = R_LINE_PROMPT_OFFSET		89707	0		=			
ANR	89744	PtrMemberAccess	core -> cons -> line -> prompt_type		89707	0					
ANR	89745	PtrMemberAccess	core -> cons -> line		89707	0					
ANR	89746	PtrMemberAccess	core -> cons		89707	0					
ANR	89747	Identifier	core		89707	0					
ANR	89748	Identifier	cons		89707	1					
ANR	89749	Identifier	line		89707	1					
ANR	89750	Identifier	prompt_type		89707	1					
ANR	89751	Identifier	R_LINE_PROMPT_OFFSET		89707	1					
ANR	89752	ExpressionStatement	"r_line_set_hist_callback ( core -> cons -> line , & r_line_hist_offset_up , & r_line_hist_offset_down )"	3898:1:99466:99559	89707	6	True				
ANR	89753	CallExpression	"r_line_set_hist_callback ( core -> cons -> line , & r_line_hist_offset_up , & r_line_hist_offset_down )"		89707	0					
ANR	89754	Callee	r_line_set_hist_callback		89707	0					
ANR	89755	Identifier	r_line_set_hist_callback		89707	0					
ANR	89756	ArgumentList	core -> cons -> line		89707	1					
ANR	89757	Argument	core -> cons -> line		89707	0					
ANR	89758	PtrMemberAccess	core -> cons -> line		89707	0					
ANR	89759	PtrMemberAccess	core -> cons		89707	0					
ANR	89760	Identifier	core		89707	0					
ANR	89761	Identifier	cons		89707	1					
ANR	89762	Identifier	line		89707	1					
ANR	89763	Argument	& r_line_hist_offset_up		89707	1					
ANR	89764	UnaryOperationExpression	& r_line_hist_offset_up		89707	0					
ANR	89765	UnaryOperator	&		89707	0					
ANR	89766	Identifier	r_line_hist_offset_up		89707	1					
ANR	89767	Argument	& r_line_hist_offset_down		89707	2					
ANR	89768	UnaryOperationExpression	& r_line_hist_offset_down		89707	0					
ANR	89769	UnaryOperator	&		89707	0					
ANR	89770	Identifier	r_line_hist_offset_down		89707	1					
ANR	89771	ExpressionStatement	"r_line_set_prompt ( ""[offset]> "" )"	3899:1:99562:99594	89707	7	True				
ANR	89772	CallExpression	"r_line_set_prompt ( ""[offset]> "" )"		89707	0					
ANR	89773	Callee	r_line_set_prompt		89707	0					
ANR	89774	Identifier	r_line_set_prompt		89707	0					
ANR	89775	ArgumentList	"""[offset]> """		89707	1					
ANR	89776	Argument	"""[offset]> """		89707	0					
ANR	89777	PrimaryExpression	"""[offset]> """		89707	0					
ANR	89778	ExpressionStatement	"strcpy ( buf , ""s "" )"	3900:1:99597:99615	89707	8	True				
ANR	89779	CallExpression	"strcpy ( buf , ""s "" )"		89707	0					
ANR	89780	Callee	strcpy		89707	0					
ANR	89781	Identifier	strcpy		89707	0					
ANR	89782	ArgumentList	buf		89707	1					
ANR	89783	Argument	buf		89707	0					
ANR	89784	Identifier	buf		89707	0					
ANR	89785	Argument	"""s """		89707	1					
ANR	89786	PrimaryExpression	"""s """		89707	0					
ANR	89787	IfStatement	"if ( r_cons_fgets ( buf + 2 , sizeof ( buf ) - 3 , 0 , NULL ) > 0 )"		89707	9					
ANR	89788	Condition	"r_cons_fgets ( buf + 2 , sizeof ( buf ) - 3 , 0 , NULL ) > 0"	3901:5:99622:99674	89707	0	True				
ANR	89789	RelationalExpression	"r_cons_fgets ( buf + 2 , sizeof ( buf ) - 3 , 0 , NULL ) > 0"		89707	0		>			
ANR	89790	CallExpression	"r_cons_fgets ( buf + 2 , sizeof ( buf ) - 3 , 0 , NULL )"		89707	0					
ANR	89791	Callee	r_cons_fgets		89707	0					
ANR	89792	Identifier	r_cons_fgets		89707	0					
ANR	89793	ArgumentList	buf + 2		89707	1					
ANR	89794	Argument	buf + 2		89707	0					
ANR	89795	AdditiveExpression	buf + 2		89707	0		+			
ANR	89796	Identifier	buf		89707	0					
ANR	89797	PrimaryExpression	2		89707	1					
ANR	89798	Argument	sizeof ( buf ) - 3		89707	1					
ANR	89799	AdditiveExpression	sizeof ( buf ) - 3		89707	0		-			
ANR	89800	SizeofExpression	sizeof ( buf )		89707	0					
ANR	89801	Sizeof	sizeof		89707	0					
ANR	89802	SizeofOperand	buf		89707	1					
ANR	89803	PrimaryExpression	3		89707	1					
ANR	89804	Argument	0		89707	2					
ANR	89805	PrimaryExpression	0		89707	0					
ANR	89806	Argument	NULL		89707	3					
ANR	89807	Identifier	NULL		89707	0					
ANR	89808	PrimaryExpression	0		89707	1					
ANR	89809	CompoundStatement		11:60:365:365	89707	1					
ANR	89810	IfStatement	if ( buf [ 2 ] == '.' )		89707	0					
ANR	89811	Condition	buf [ 2 ] == '.'	3902:6:99685:99697	89707	0	True				
ANR	89812	EqualityExpression	buf [ 2 ] == '.'		89707	0		==			
ANR	89813	ArrayIndexing	buf [ 2 ]		89707	0					
ANR	89814	Identifier	buf		89707	0					
ANR	89815	PrimaryExpression	2		89707	1					
ANR	89816	PrimaryExpression	'.'		89707	1					
ANR	89817	CompoundStatement		12:21:388:388	89707	1					
ANR	89818	ExpressionStatement	buf [ 1 ] = '.'	3903:3:99705:99717	89707	0	True				
ANR	89819	AssignmentExpression	buf [ 1 ] = '.'		89707	0		=			
ANR	89820	ArrayIndexing	buf [ 1 ]		89707	0					
ANR	89821	Identifier	buf		89707	0					
ANR	89822	PrimaryExpression	1		89707	1					
ANR	89823	PrimaryExpression	'.'		89707	1					
ANR	89824	ExpressionStatement	"r_core_cmd0 ( core , buf )"	3905:2:99725:99748	89707	1	True				
ANR	89825	CallExpression	"r_core_cmd0 ( core , buf )"		89707	0					
ANR	89826	Callee	r_core_cmd0		89707	0					
ANR	89827	Identifier	r_core_cmd0		89707	0					
ANR	89828	ArgumentList	core		89707	1					
ANR	89829	Argument	core		89707	0					
ANR	89830	Identifier	core		89707	0					
ANR	89831	Argument	buf		89707	1					
ANR	89832	Identifier	buf		89707	0					
ANR	89833	ExpressionStatement	"r_line_set_hist_callback ( core -> cons -> line , & r_line_hist_cmd_up , & r_line_hist_cmd_down )"	3906:2:99752:99839	89707	2	True				
ANR	89834	CallExpression	"r_line_set_hist_callback ( core -> cons -> line , & r_line_hist_cmd_up , & r_line_hist_cmd_down )"		89707	0					
ANR	89835	Callee	r_line_set_hist_callback		89707	0					
ANR	89836	Identifier	r_line_set_hist_callback		89707	0					
ANR	89837	ArgumentList	core -> cons -> line		89707	1					
ANR	89838	Argument	core -> cons -> line		89707	0					
ANR	89839	PtrMemberAccess	core -> cons -> line		89707	0					
ANR	89840	PtrMemberAccess	core -> cons		89707	0					
ANR	89841	Identifier	core		89707	0					
ANR	89842	Identifier	cons		89707	1					
ANR	89843	Identifier	line		89707	1					
ANR	89844	Argument	& r_line_hist_cmd_up		89707	1					
ANR	89845	UnaryOperationExpression	& r_line_hist_cmd_up		89707	0					
ANR	89846	UnaryOperator	&		89707	0					
ANR	89847	Identifier	r_line_hist_cmd_up		89707	1					
ANR	89848	Argument	& r_line_hist_cmd_down		89707	2					
ANR	89849	UnaryOperationExpression	& r_line_hist_cmd_down		89707	0					
ANR	89850	UnaryOperator	&		89707	0					
ANR	89851	Identifier	r_line_hist_cmd_down		89707	1					
ANR	89852	ExpressionStatement	core -> cons -> line -> prompt_type = R_LINE_PROMPT_DEFAULT	3908:1:99845:99898	89707	10	True				
ANR	89853	AssignmentExpression	core -> cons -> line -> prompt_type = R_LINE_PROMPT_DEFAULT		89707	0		=			
ANR	89854	PtrMemberAccess	core -> cons -> line -> prompt_type		89707	0					
ANR	89855	PtrMemberAccess	core -> cons -> line		89707	0					
ANR	89856	PtrMemberAccess	core -> cons		89707	0					
ANR	89857	Identifier	core		89707	0					
ANR	89858	Identifier	cons		89707	1					
ANR	89859	Identifier	line		89707	1					
ANR	89860	Identifier	prompt_type		89707	1					
ANR	89861	Identifier	R_LINE_PROMPT_DEFAULT		89707	1					
ANR	89862	ReturnType	static void		89707	1					
ANR	89863	Identifier	visual_offset		89707	2					
ANR	89864	ParameterList	"RAGraph * g , RCore * core"		89707	3					
ANR	89865	Parameter	RAGraph * g	3891:26:99286:99295	89707	0	True				
ANR	89866	ParameterType	RAGraph *		89707	0					
ANR	89867	Identifier	g		89707	1					
ANR	89868	Parameter	RCore * core	3891:38:99298:99308	89707	1	True				
ANR	89869	ParameterType	RCore *		89707	0					
ANR	89870	Identifier	core		89707	1					
ANR	89871	CFGEntryNode	ENTRY		89707		True				
ANR	89872	CFGExitNode	EXIT		89707		True				
ANR	89873	Symbol	* buf		89707						
ANR	89874	Symbol	& rows		89707						
ANR	89875	Symbol	NULL		89707						
ANR	89876	Symbol	* core -> cons		89707						
ANR	89877	Symbol	R_LINE_PROMPT_OFFSET		89707						
ANR	89878	Symbol	r_cons_fgets		89707						
ANR	89879	Symbol	g		89707						
ANR	89880	Symbol	* * core -> cons		89707						
ANR	89881	Symbol	* core		89707						
ANR	89882	Symbol	rows		89707						
ANR	89883	Symbol	core -> cons -> line -> prompt_type		89707						
ANR	89884	Symbol	R_LINE_PROMPT_DEFAULT		89707						
ANR	89885	Symbol	core		89707						
ANR	89886	Symbol	* * * core		89707						
ANR	89887	Symbol	& r_line_hist_cmd_down		89707						
ANR	89888	Symbol	buf		89707						
ANR	89889	Symbol	core -> cons		89707						
ANR	89890	Symbol	& r_line_hist_offset_down		89707						
ANR	89891	Symbol	* core -> cons -> line		89707						
ANR	89892	Symbol	& r_line_hist_offset_up		89707						
ANR	89893	Symbol	& r_line_hist_cmd_up		89707						
ANR	89894	Symbol	core -> cons -> line		89707						
ANR	89895	Symbol	* * core		89707						
ANR	89896	Function	goto_asmqjmps	3911:0:99903:100851							
ANR	89897	FunctionDef	"goto_asmqjmps (RAGraph * g , RCore * core)"		89896	0					
ANR	89898	CompoundStatement		3911:51:99954:100851	89896	0					
ANR	89899	IdentifierDeclStatement	"const char * h = ""[Fast goto call/jmp]> "" ;"	3912:1:99957:99997	89896	0	True				
ANR	89900	IdentifierDecl	"* h = ""[Fast goto call/jmp]> """		89896	0					
ANR	89901	IdentifierDeclType	const char *		89896	0					
ANR	89902	Identifier	h		89896	1					
ANR	89903	AssignmentExpression	"* h = ""[Fast goto call/jmp]> """		89896	2		=			
ANR	89904	Identifier	h		89896	0					
ANR	89905	PrimaryExpression	"""[Fast goto call/jmp]> """		89896	1					
ANR	89906	IdentifierDeclStatement	char obuf [ R_CORE_ASMQJMPS_LEN_LETTERS + 1 ] ;	3913:1:100000:100042	89896	1	True				
ANR	89907	IdentifierDecl	obuf [ R_CORE_ASMQJMPS_LEN_LETTERS + 1 ]		89896	0					
ANR	89908	IdentifierDeclType	char [ R_CORE_ASMQJMPS_LEN_LETTERS + 1 ]		89896	0					
ANR	89909	Identifier	obuf		89896	1					
ANR	89910	AdditiveExpression	R_CORE_ASMQJMPS_LEN_LETTERS + 1		89896	2		+			
ANR	89911	Identifier	R_CORE_ASMQJMPS_LEN_LETTERS		89896	0					
ANR	89912	PrimaryExpression	1		89896	1					
ANR	89913	IdentifierDeclStatement	"int rows , i = 0 ;"	3914:1:100045:100060	89896	2	True				
ANR	89914	IdentifierDecl	rows		89896	0					
ANR	89915	IdentifierDeclType	int		89896	0					
ANR	89916	Identifier	rows		89896	1					
ANR	89917	IdentifierDecl	i = 0		89896	1					
ANR	89918	IdentifierDeclType	int		89896	0					
ANR	89919	Identifier	i		89896	1					
ANR	89920	AssignmentExpression	i = 0		89896	2		=			
ANR	89921	Identifier	i		89896	0					
ANR	89922	PrimaryExpression	0		89896	1					
ANR	89923	IdentifierDeclStatement	bool cont ;	3915:1:100063:100072	89896	3	True				
ANR	89924	IdentifierDecl	cont		89896	0					
ANR	89925	IdentifierDeclType	bool		89896	0					
ANR	89926	Identifier	cont		89896	1					
ANR	89927	ExpressionStatement	r_cons_get_size ( & rows )	3917:1:100076:100099	89896	4	True				
ANR	89928	CallExpression	r_cons_get_size ( & rows )		89896	0					
ANR	89929	Callee	r_cons_get_size		89896	0					
ANR	89930	Identifier	r_cons_get_size		89896	0					
ANR	89931	ArgumentList	& rows		89896	1					
ANR	89932	Argument	& rows		89896	0					
ANR	89933	UnaryOperationExpression	& rows		89896	0					
ANR	89934	UnaryOperator	&		89896	0					
ANR	89935	Identifier	rows		89896	1					
ANR	89936	ExpressionStatement	"r_cons_gotoxy ( 0 , rows )"	3918:1:100102:100125	89896	5	True				
ANR	89937	CallExpression	"r_cons_gotoxy ( 0 , rows )"		89896	0					
ANR	89938	Callee	r_cons_gotoxy		89896	0					
ANR	89939	Identifier	r_cons_gotoxy		89896	0					
ANR	89940	ArgumentList	0		89896	1					
ANR	89941	Argument	0		89896	0					
ANR	89942	PrimaryExpression	0		89896	0					
ANR	89943	Argument	rows		89896	1					
ANR	89944	Identifier	rows		89896	0					
ANR	89945	ExpressionStatement	r_cons_clear_line ( 0 )	3919:1:100128:100149	89896	6	True				
ANR	89946	CallExpression	r_cons_clear_line ( 0 )		89896	0					
ANR	89947	Callee	r_cons_clear_line		89896	0					
ANR	89948	Identifier	r_cons_clear_line		89896	0					
ANR	89949	ArgumentList	0		89896	1					
ANR	89950	Argument	0		89896	0					
ANR	89951	PrimaryExpression	0		89896	0					
ANR	89952	ExpressionStatement	r_cons_printf ( Color_RESET )	3920:1:100152:100179	89896	7	True				
ANR	89953	CallExpression	r_cons_printf ( Color_RESET )		89896	0					
ANR	89954	Callee	r_cons_printf		89896	0					
ANR	89955	Identifier	r_cons_printf		89896	0					
ANR	89956	ArgumentList	Color_RESET		89896	1					
ANR	89957	Argument	Color_RESET		89896	0					
ANR	89958	Identifier	Color_RESET		89896	0					
ANR	89959	ExpressionStatement	r_cons_printf ( h )	3921:1:100182:100199	89896	8	True				
ANR	89960	CallExpression	r_cons_printf ( h )		89896	0					
ANR	89961	Callee	r_cons_printf		89896	0					
ANR	89962	Identifier	r_cons_printf		89896	0					
ANR	89963	ArgumentList	h		89896	1					
ANR	89964	Argument	h		89896	0					
ANR	89965	Identifier	h		89896	0					
ANR	89966	ExpressionStatement	r_cons_flush ( )	3922:1:100202:100217	89896	9	True				
ANR	89967	CallExpression	r_cons_flush ( )		89896	0					
ANR	89968	Callee	r_cons_flush		89896	0					
ANR	89969	Identifier	r_cons_flush		89896	0					
ANR	89970	ArgumentList			89896	1					
ANR	89971	DoStatement	do		89896	10					
ANR	89972	CompoundStatement		15:2:273:301	89896	0					
ANR	89973	IdentifierDeclStatement	char ch = r_cons_readchar ( ) ;	3925:2:100228:100256	89896	0	True				
ANR	89974	IdentifierDecl	ch = r_cons_readchar ( )		89896	0					
ANR	89975	IdentifierDeclType	char		89896	0					
ANR	89976	Identifier	ch		89896	1					
ANR	89977	AssignmentExpression	ch = r_cons_readchar ( )		89896	2		=			
ANR	89978	Identifier	ch		89896	0					
ANR	89979	CallExpression	r_cons_readchar ( )		89896	1					
ANR	89980	Callee	r_cons_readchar		89896	0					
ANR	89981	Identifier	r_cons_readchar		89896	0					
ANR	89982	ArgumentList			89896	1					
ANR	89983	ExpressionStatement	obuf [ i ++ ] = ch	3926:2:100260:100274	89896	1	True				
ANR	89984	AssignmentExpression	obuf [ i ++ ] = ch		89896	0		=			
ANR	89985	ArrayIndexing	obuf [ i ++ ]		89896	0					
ANR	89986	Identifier	obuf		89896	0					
ANR	89987	PostIncDecOperationExpression	i ++		89896	1					
ANR	89988	Identifier	i		89896	0					
ANR	89989	IncDec	++		89896	1					
ANR	89990	Identifier	ch		89896	1					
ANR	89991	ExpressionStatement	"r_cons_printf ( ""%c"" , ch )"	3927:2:100278:100302	89896	2	True				
ANR	89992	CallExpression	"r_cons_printf ( ""%c"" , ch )"		89896	0					
ANR	89993	Callee	r_cons_printf		89896	0					
ANR	89994	Identifier	r_cons_printf		89896	0					
ANR	89995	ArgumentList	"""%c"""		89896	1					
ANR	89996	Argument	"""%c"""		89896	0					
ANR	89997	PrimaryExpression	"""%c"""		89896	0					
ANR	89998	Argument	ch		89896	1					
ANR	89999	Identifier	ch		89896	0					
ANR	90000	ExpressionStatement	cont = isalpha ( ( ut8 ) ch ) && ! islower ( ( ut8 ) ch )	3928:2:100306:100354	89896	3	True				
ANR	90001	AssignmentExpression	cont = isalpha ( ( ut8 ) ch ) && ! islower ( ( ut8 ) ch )		89896	0		=			
ANR	90002	Identifier	cont		89896	0					
ANR	90003	AndExpression	isalpha ( ( ut8 ) ch ) && ! islower ( ( ut8 ) ch )		89896	1		&&			
ANR	90004	CallExpression	isalpha ( ( ut8 ) ch )		89896	0					
ANR	90005	Callee	isalpha		89896	0					
ANR	90006	Identifier	isalpha		89896	0					
ANR	90007	ArgumentList	( ut8 ) ch		89896	1					
ANR	90008	Argument	( ut8 ) ch		89896	0					
ANR	90009	CastExpression	( ut8 ) ch		89896	0					
ANR	90010	CastTarget	ut8		89896	0					
ANR	90011	Identifier	ch		89896	1					
ANR	90012	UnaryOperationExpression	! islower ( ( ut8 ) ch )		89896	1					
ANR	90013	UnaryOperator	!		89896	0					
ANR	90014	CallExpression	islower ( ( ut8 ) ch )		89896	1					
ANR	90015	Callee	islower		89896	0					
ANR	90016	Identifier	islower		89896	0					
ANR	90017	ArgumentList	( ut8 ) ch		89896	1					
ANR	90018	Argument	( ut8 ) ch		89896	0					
ANR	90019	CastExpression	( ut8 ) ch		89896	0					
ANR	90020	CastTarget	ut8		89896	0					
ANR	90021	Identifier	ch		89896	1					
ANR	90022	Condition	i < R_CORE_ASMQJMPS_LEN_LETTERS && cont	3929:10:100366:100404	89896	1	True				
ANR	90023	AndExpression	i < R_CORE_ASMQJMPS_LEN_LETTERS && cont		89896	0		&&			
ANR	90024	RelationalExpression	i < R_CORE_ASMQJMPS_LEN_LETTERS		89896	0		<			
ANR	90025	Identifier	i		89896	0					
ANR	90026	Identifier	R_CORE_ASMQJMPS_LEN_LETTERS		89896	1					
ANR	90027	Identifier	cont		89896	1					
ANR	90028	ExpressionStatement	r_cons_flush ( )	3930:1:100409:100424	89896	11	True				
ANR	90029	CallExpression	r_cons_flush ( )		89896	0					
ANR	90030	Callee	r_cons_flush		89896	0					
ANR	90031	Identifier	r_cons_flush		89896	0					
ANR	90032	ArgumentList			89896	1					
ANR	90033	ExpressionStatement	obuf [ i ] = '\\0'	3932:1:100428:100442	89896	12	True				
ANR	90034	AssignmentExpression	obuf [ i ] = '\\0'		89896	0		=			
ANR	90035	ArrayIndexing	obuf [ i ]		89896	0					
ANR	90036	Identifier	obuf		89896	0					
ANR	90037	Identifier	i		89896	1					
ANR	90038	PrimaryExpression	'\\0'		89896	1					
ANR	90039	IdentifierDeclStatement	"ut64 addr = r_core_get_asmqjmps ( core , obuf ) ;"	3933:1:100445:100489	89896	13	True				
ANR	90040	IdentifierDecl	"addr = r_core_get_asmqjmps ( core , obuf )"		89896	0					
ANR	90041	IdentifierDeclType	ut64		89896	0					
ANR	90042	Identifier	addr		89896	1					
ANR	90043	AssignmentExpression	"addr = r_core_get_asmqjmps ( core , obuf )"		89896	2		=			
ANR	90044	Identifier	addr		89896	0					
ANR	90045	CallExpression	"r_core_get_asmqjmps ( core , obuf )"		89896	1					
ANR	90046	Callee	r_core_get_asmqjmps		89896	0					
ANR	90047	Identifier	r_core_get_asmqjmps		89896	0					
ANR	90048	ArgumentList	core		89896	1					
ANR	90049	Argument	core		89896	0					
ANR	90050	Identifier	core		89896	0					
ANR	90051	Argument	obuf		89896	1					
ANR	90052	Identifier	obuf		89896	0					
ANR	90053	IfStatement	if ( addr != UT64_MAX )		89896	14					
ANR	90054	Condition	addr != UT64_MAX	3934:5:100496:100511	89896	0	True				
ANR	90055	EqualityExpression	addr != UT64_MAX		89896	0		!=			
ANR	90056	Identifier	addr		89896	0					
ANR	90057	Identifier	UT64_MAX		89896	1					
ANR	90058	CompoundStatement		26:2:597:645	89896	1					
ANR	90059	IdentifierDeclStatement	char * title = get_title ( addr ) ;	3935:2:100518:100548	89896	0	True				
ANR	90060	IdentifierDecl	* title = get_title ( addr )		89896	0					
ANR	90061	IdentifierDeclType	char *		89896	0					
ANR	90062	Identifier	title		89896	1					
ANR	90063	AssignmentExpression	* title = get_title ( addr )		89896	2		=			
ANR	90064	Identifier	title		89896	0					
ANR	90065	CallExpression	get_title ( addr )		89896	1					
ANR	90066	Callee	get_title		89896	0					
ANR	90067	Identifier	get_title		89896	0					
ANR	90068	ArgumentList	addr		89896	1					
ANR	90069	Argument	addr		89896	0					
ANR	90070	Identifier	addr		89896	0					
ANR	90071	IdentifierDeclStatement	"RANode * addr_node = r_agraph_get_node ( g , title ) ;"	3936:2:100552:100600	89896	1	True				
ANR	90072	IdentifierDecl	"* addr_node = r_agraph_get_node ( g , title )"		89896	0					
ANR	90073	IdentifierDeclType	RANode *		89896	0					
ANR	90074	Identifier	addr_node		89896	1					
ANR	90075	AssignmentExpression	"* addr_node = r_agraph_get_node ( g , title )"		89896	2		=			
ANR	90076	Identifier	addr_node		89896	0					
ANR	90077	CallExpression	"r_agraph_get_node ( g , title )"		89896	1					
ANR	90078	Callee	r_agraph_get_node		89896	0					
ANR	90079	Identifier	r_agraph_get_node		89896	0					
ANR	90080	ArgumentList	g		89896	1					
ANR	90081	Argument	g		89896	0					
ANR	90082	Identifier	g		89896	0					
ANR	90083	Argument	title		89896	1					
ANR	90084	Identifier	title		89896	0					
ANR	90085	IfStatement	if ( addr_node )		89896	2					
ANR	90086	Condition	addr_node	3937:6:100608:100616	89896	0	True				
ANR	90087	Identifier	addr_node		89896	0					
ANR	90088	CompoundStatement		27:17:664:664	89896	1					
ANR	90089	ExpressionStatement	"r_agraph_set_curnode ( g , addr_node )"	3938:3:100624:100659	89896	0	True				
ANR	90090	CallExpression	"r_agraph_set_curnode ( g , addr_node )"		89896	0					
ANR	90091	Callee	r_agraph_set_curnode		89896	0					
ANR	90092	Identifier	r_agraph_set_curnode		89896	0					
ANR	90093	ArgumentList	g		89896	1					
ANR	90094	Argument	g		89896	0					
ANR	90095	Identifier	g		89896	0					
ANR	90096	Argument	addr_node		89896	1					
ANR	90097	Identifier	addr_node		89896	0					
ANR	90098	ExpressionStatement	"r_core_seek ( core , addr , 0 )"	3939:3:100664:100691	89896	1	True				
ANR	90099	CallExpression	"r_core_seek ( core , addr , 0 )"		89896	0					
ANR	90100	Callee	r_core_seek		89896	0					
ANR	90101	Identifier	r_core_seek		89896	0					
ANR	90102	ArgumentList	core		89896	1					
ANR	90103	Argument	core		89896	0					
ANR	90104	Identifier	core		89896	0					
ANR	90105	Argument	addr		89896	1					
ANR	90106	Identifier	addr		89896	0					
ANR	90107	Argument	0		89896	2					
ANR	90108	PrimaryExpression	0		89896	0					
ANR	90109	ExpressionStatement	"agraph_update_seek ( g , addr_node , true )"	3940:3:100696:100735	89896	2	True				
ANR	90110	CallExpression	"agraph_update_seek ( g , addr_node , true )"		89896	0					
ANR	90111	Callee	agraph_update_seek		89896	0					
ANR	90112	Identifier	agraph_update_seek		89896	0					
ANR	90113	ArgumentList	g		89896	1					
ANR	90114	Argument	g		89896	0					
ANR	90115	Identifier	g		89896	0					
ANR	90116	Argument	addr_node		89896	1					
ANR	90117	Identifier	addr_node		89896	0					
ANR	90118	Argument	true		89896	2					
ANR	90119	Identifier	true		89896	0					
ANR	90120	ElseStatement	else		89896	0					
ANR	90121	CompoundStatement		31:9:791:791	89896	0					
ANR	90122	ExpressionStatement	"r_io_sundo_push ( core -> io , core -> offset , 0 )"	3942:3:100751:100794	89896	0	True				
ANR	90123	CallExpression	"r_io_sundo_push ( core -> io , core -> offset , 0 )"		89896	0					
ANR	90124	Callee	r_io_sundo_push		89896	0					
ANR	90125	Identifier	r_io_sundo_push		89896	0					
ANR	90126	ArgumentList	core -> io		89896	1					
ANR	90127	Argument	core -> io		89896	0					
ANR	90128	PtrMemberAccess	core -> io		89896	0					
ANR	90129	Identifier	core		89896	0					
ANR	90130	Identifier	io		89896	1					
ANR	90131	Argument	core -> offset		89896	1					
ANR	90132	PtrMemberAccess	core -> offset		89896	0					
ANR	90133	Identifier	core		89896	0					
ANR	90134	Identifier	offset		89896	1					
ANR	90135	Argument	0		89896	2					
ANR	90136	PrimaryExpression	0		89896	0					
ANR	90137	ExpressionStatement	"r_core_seek ( core , addr , 0 )"	3943:3:100799:100826	89896	1	True				
ANR	90138	CallExpression	"r_core_seek ( core , addr , 0 )"		89896	0					
ANR	90139	Callee	r_core_seek		89896	0					
ANR	90140	Identifier	r_core_seek		89896	0					
ANR	90141	ArgumentList	core		89896	1					
ANR	90142	Argument	core		89896	0					
ANR	90143	Identifier	core		89896	0					
ANR	90144	Argument	addr		89896	1					
ANR	90145	Identifier	addr		89896	0					
ANR	90146	Argument	0		89896	2					
ANR	90147	PrimaryExpression	0		89896	0					
ANR	90148	ExpressionStatement	free ( title )	3945:2:100834:100846	89896	3	True				
ANR	90149	CallExpression	free ( title )		89896	0					
ANR	90150	Callee	free		89896	0					
ANR	90151	Identifier	free		89896	0					
ANR	90152	ArgumentList	title		89896	1					
ANR	90153	Argument	title		89896	0					
ANR	90154	Identifier	title		89896	0					
ANR	90155	ReturnType	static void		89896	1					
ANR	90156	Identifier	goto_asmqjmps		89896	2					
ANR	90157	ParameterList	"RAGraph * g , RCore * core"		89896	3					
ANR	90158	Parameter	RAGraph * g	3911:26:99929:99938	89896	0	True				
ANR	90159	ParameterType	RAGraph *		89896	0					
ANR	90160	Identifier	g		89896	1					
ANR	90161	Parameter	RCore * core	3911:38:99941:99951	89896	1	True				
ANR	90162	ParameterType	RCore *		89896	0					
ANR	90163	Identifier	core		89896	1					
ANR	90164	CFGEntryNode	ENTRY		89896		True				
ANR	90165	CFGExitNode	EXIT		89896		True				
ANR	90166	Symbol	isalpha		89896						
ANR	90167	Symbol	& rows		89896						
ANR	90168	Symbol	r_cons_readchar		89896						
ANR	90169	Symbol	islower		89896						
ANR	90170	Symbol	Color_RESET		89896						
ANR	90171	Symbol	R_CORE_ASMQJMPS_LEN_LETTERS		89896						
ANR	90172	Symbol	* core		89896						
ANR	90173	Symbol	core -> offset		89896						
ANR	90174	Symbol	title		89896						
ANR	90175	Symbol	get_title		89896						
ANR	90176	Symbol	core -> io		89896						
ANR	90177	Symbol	r_agraph_get_node		89896						
ANR	90178	Symbol	obuf		89896						
ANR	90179	Symbol	addr_node		89896						
ANR	90180	Symbol	cont		89896						
ANR	90181	Symbol	addr		89896						
ANR	90182	Symbol	UT64_MAX		89896						
ANR	90183	Symbol	ch		89896						
ANR	90184	Symbol	g		89896						
ANR	90185	Symbol	h		89896						
ANR	90186	Symbol	i		89896						
ANR	90187	Symbol	r_core_get_asmqjmps		89896						
ANR	90188	Symbol	rows		89896						
ANR	90189	Symbol	core		89896						
ANR	90190	Symbol	* i		89896						
ANR	90191	Symbol	* obuf		89896						
ANR	90192	Symbol	true		89896						
ANR	90193	Function	seek_to_node	3949:0:100854:101181							
ANR	90194	FunctionDef	"seek_to_node (RANode * n , RCore * core)"		90193	0					
ANR	90195	CompoundStatement		3949:49:100903:101181	90193	0					
ANR	90196	IdentifierDeclStatement	"ut64 off = r_core_anal_get_bbaddr ( core , core -> offset ) ;"	3950:1:100906:100960	90193	0	True				
ANR	90197	IdentifierDecl	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		90193	0					
ANR	90198	IdentifierDeclType	ut64		90193	0					
ANR	90199	Identifier	off		90193	1					
ANR	90200	AssignmentExpression	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		90193	2		=			
ANR	90201	Identifier	off		90193	0					
ANR	90202	CallExpression	"r_core_anal_get_bbaddr ( core , core -> offset )"		90193	1					
ANR	90203	Callee	r_core_anal_get_bbaddr		90193	0					
ANR	90204	Identifier	r_core_anal_get_bbaddr		90193	0					
ANR	90205	ArgumentList	core		90193	1					
ANR	90206	Argument	core		90193	0					
ANR	90207	Identifier	core		90193	0					
ANR	90208	Argument	core -> offset		90193	1					
ANR	90209	PtrMemberAccess	core -> offset		90193	0					
ANR	90210	Identifier	core		90193	0					
ANR	90211	Identifier	offset		90193	1					
ANR	90212	IdentifierDeclStatement	char * title = get_title ( off ) ;	3951:1:100963:100992	90193	1	True				
ANR	90213	IdentifierDecl	* title = get_title ( off )		90193	0					
ANR	90214	IdentifierDeclType	char *		90193	0					
ANR	90215	Identifier	title		90193	1					
ANR	90216	AssignmentExpression	* title = get_title ( off )		90193	2		=			
ANR	90217	Identifier	title		90193	0					
ANR	90218	CallExpression	get_title ( off )		90193	1					
ANR	90219	Callee	get_title		90193	0					
ANR	90220	Identifier	get_title		90193	0					
ANR	90221	ArgumentList	off		90193	1					
ANR	90222	Argument	off		90193	0					
ANR	90223	Identifier	off		90193	0					
ANR	90224	IfStatement	"if ( title && strcmp ( title , n -> title ) )"		90193	2					
ANR	90225	Condition	"title && strcmp ( title , n -> title )"	3953:5:101000:101032	90193	0	True				
ANR	90226	AndExpression	"title && strcmp ( title , n -> title )"		90193	0		&&			
ANR	90227	Identifier	title		90193	0					
ANR	90228	CallExpression	"strcmp ( title , n -> title )"		90193	1					
ANR	90229	Callee	strcmp		90193	0					
ANR	90230	Identifier	strcmp		90193	0					
ANR	90231	ArgumentList	title		90193	1					
ANR	90232	Argument	title		90193	0					
ANR	90233	Identifier	title		90193	0					
ANR	90234	Argument	n -> title		90193	1					
ANR	90235	PtrMemberAccess	n -> title		90193	0					
ANR	90236	Identifier	n		90193	0					
ANR	90237	Identifier	title		90193	1					
ANR	90238	CompoundStatement		6:2:135:176	90193	1					
ANR	90239	IdentifierDeclStatement	"char * cmd = r_str_newf ( ""s %s"" , n -> title ) ;"	3954:2:101039:101080	90193	0	True				
ANR	90240	IdentifierDecl	"* cmd = r_str_newf ( ""s %s"" , n -> title )"		90193	0					
ANR	90241	IdentifierDeclType	char *		90193	0					
ANR	90242	Identifier	cmd		90193	1					
ANR	90243	AssignmentExpression	"* cmd = r_str_newf ( ""s %s"" , n -> title )"		90193	2		=			
ANR	90244	Identifier	cmd		90193	0					
ANR	90245	CallExpression	"r_str_newf ( ""s %s"" , n -> title )"		90193	1					
ANR	90246	Callee	r_str_newf		90193	0					
ANR	90247	Identifier	r_str_newf		90193	0					
ANR	90248	ArgumentList	"""s %s"""		90193	1					
ANR	90249	Argument	"""s %s"""		90193	0					
ANR	90250	PrimaryExpression	"""s %s"""		90193	0					
ANR	90251	Argument	n -> title		90193	1					
ANR	90252	PtrMemberAccess	n -> title		90193	0					
ANR	90253	Identifier	n		90193	0					
ANR	90254	Identifier	title		90193	1					
ANR	90255	IfStatement	if ( cmd )		90193	1					
ANR	90256	Condition	cmd	3955:6:101088:101090	90193	0	True				
ANR	90257	Identifier	cmd		90193	0					
ANR	90258	CompoundStatement		7:11:189:189	90193	1					
ANR	90259	IfStatement	if ( * cmd )		90193	0					
ANR	90260	Condition	* cmd	3956:7:101102:101105	90193	0	True				
ANR	90261	UnaryOperationExpression	* cmd		90193	0					
ANR	90262	UnaryOperator	*		90193	0					
ANR	90263	Identifier	cmd		90193	1					
ANR	90264	CompoundStatement		8:13:204:204	90193	1					
ANR	90265	ExpressionStatement	"r_core_cmd0 ( core , cmd )"	3957:4:101114:101137	90193	0	True				
ANR	90266	CallExpression	"r_core_cmd0 ( core , cmd )"		90193	0					
ANR	90267	Callee	r_core_cmd0		90193	0					
ANR	90268	Identifier	r_core_cmd0		90193	0					
ANR	90269	ArgumentList	core		90193	1					
ANR	90270	Argument	core		90193	0					
ANR	90271	Identifier	core		90193	0					
ANR	90272	Argument	cmd		90193	1					
ANR	90273	Identifier	cmd		90193	0					
ANR	90274	ExpressionStatement	free ( cmd )	3959:3:101147:101157	90193	1	True				
ANR	90275	CallExpression	free ( cmd )		90193	0					
ANR	90276	Callee	free		90193	0					
ANR	90277	Identifier	free		90193	0					
ANR	90278	ArgumentList	cmd		90193	1					
ANR	90279	Argument	cmd		90193	0					
ANR	90280	Identifier	cmd		90193	0					
ANR	90281	ExpressionStatement	free ( title )	3962:1:101167:101179	90193	3	True				
ANR	90282	CallExpression	free ( title )		90193	0					
ANR	90283	Callee	free		90193	0					
ANR	90284	Identifier	free		90193	0					
ANR	90285	ArgumentList	title		90193	1					
ANR	90286	Argument	title		90193	0					
ANR	90287	Identifier	title		90193	0					
ANR	90288	ReturnType	static void		90193	1					
ANR	90289	Identifier	seek_to_node		90193	2					
ANR	90290	ParameterList	"RANode * n , RCore * core"		90193	3					
ANR	90291	Parameter	RANode * n	3949:25:100879:100887	90193	0	True				
ANR	90292	ParameterType	RANode *		90193	0					
ANR	90293	Identifier	n		90193	1					
ANR	90294	Parameter	RCore * core	3949:36:100890:100900	90193	1	True				
ANR	90295	ParameterType	RCore *		90193	0					
ANR	90296	Identifier	core		90193	1					
ANR	90297	CFGEntryNode	ENTRY		90193		True				
ANR	90298	CFGExitNode	EXIT		90193		True				
ANR	90299	Symbol	strcmp		90193						
ANR	90300	Symbol	* core		90193						
ANR	90301	Symbol	core -> offset		90193						
ANR	90302	Symbol	r_str_newf		90193						
ANR	90303	Symbol	title		90193						
ANR	90304	Symbol	get_title		90193						
ANR	90305	Symbol	n		90193						
ANR	90306	Symbol	off		90193						
ANR	90307	Symbol	core		90193						
ANR	90308	Symbol	r_core_anal_get_bbaddr		90193						
ANR	90309	Symbol	* n		90193						
ANR	90310	Symbol	n -> title		90193						
ANR	90311	Symbol	cmd		90193						
ANR	90312	Symbol	* cmd		90193						
ANR	90313	Function	graph_single_step_in	3965:0:101184:101662							
ANR	90314	FunctionDef	"graph_single_step_in (RCore * core , RAGraph * g)"		90313	0					
ANR	90315	CompoundStatement		3965:58:101242:101662	90313	0					
ANR	90316	IfStatement	"if ( r_config_get_i ( core -> config , ""cfg.debug"" ) )"		90313	0					
ANR	90317	Condition	"r_config_get_i ( core -> config , ""cfg.debug"" )"	3966:5:101249:101290	90313	0	True				
ANR	90318	CallExpression	"r_config_get_i ( core -> config , ""cfg.debug"" )"		90313	0					
ANR	90319	Callee	r_config_get_i		90313	0					
ANR	90320	Identifier	r_config_get_i		90313	0					
ANR	90321	ArgumentList	core -> config		90313	1					
ANR	90322	Argument	core -> config		90313	0					
ANR	90323	PtrMemberAccess	core -> config		90313	0					
ANR	90324	Identifier	core		90313	0					
ANR	90325	Identifier	config		90313	1					
ANR	90326	Argument	"""cfg.debug"""		90313	1					
ANR	90327	PrimaryExpression	"""cfg.debug"""		90313	0					
ANR	90328	CompoundStatement		2:49:50:50	90313	1					
ANR	90329	IfStatement	if ( core -> print -> cur_enabled )		90313	0					
ANR	90330	Condition	core -> print -> cur_enabled	3967:6:101301:101324	90313	0	True				
ANR	90331	PtrMemberAccess	core -> print -> cur_enabled		90313	0					
ANR	90332	PtrMemberAccess	core -> print		90313	0					
ANR	90333	Identifier	core		90313	0					
ANR	90334	Identifier	print		90313	1					
ANR	90335	Identifier	cur_enabled		90313	1					
ANR	90336	CompoundStatement		3:32:84:84	90313	1					
ANR	90337	Statement	r_core_cmdf	3969:3:101349:101359	90313	0	True				
ANR	90338	Statement	(	3969:15:101361:101361	90313	1	True				
ANR	90339	Statement	core	3969:16:101362:101365	90313	2	True				
ANR	90340	Statement	","	3969:20:101366:101366	90313	3	True				
ANR	90341	Statement	"""dcu 0x%08"""	3969:22:101368:101378	90313	4	True				
ANR	90342	Statement	PFMT64x	3969:33:101379:101385	90313	5	True				
ANR	90343	Statement	","	3969:40:101386:101386	90313	6	True				
ANR	90344	Statement	core	3969:42:101388:101391	90313	7	True				
ANR	90345	Statement	->	3969:46:101392:101393	90313	8	True				
ANR	90346	Statement	offset	3969:48:101394:101399	90313	9	True				
ANR	90347	Statement	+	3969:55:101401:101401	90313	10	True				
ANR	90348	Statement	core	3969:57:101403:101406	90313	11	True				
ANR	90349	Statement	->	3969:61:101407:101408	90313	12	True				
ANR	90350	Statement	print	3969:63:101409:101413	90313	13	True				
ANR	90351	Statement	->	3969:68:101414:101415	90313	14	True				
ANR	90352	Statement	cur	3969:70:101416:101418	90313	15	True				
ANR	90353	Statement	)	3969:73:101419:101419	90313	16	True				
ANR	90354	ExpressionStatement		3969:74:101420:101420	90313	17	True				
ANR	90355	ExpressionStatement	core -> print -> cur_enabled = 0	3970:3:101425:101453	90313	18	True				
ANR	90356	AssignmentExpression	core -> print -> cur_enabled = 0		90313	0		=			
ANR	90357	PtrMemberAccess	core -> print -> cur_enabled		90313	0					
ANR	90358	PtrMemberAccess	core -> print		90313	0					
ANR	90359	Identifier	core		90313	0					
ANR	90360	Identifier	print		90313	1					
ANR	90361	Identifier	cur_enabled		90313	1					
ANR	90362	PrimaryExpression	0		90313	1					
ANR	90363	ElseStatement	else		90313	0					
ANR	90364	CompoundStatement		7:9:221:221	90313	0					
ANR	90365	ExpressionStatement	"r_core_cmd ( core , ""ds"" , 0 )"	3972:3:101469:101495	90313	0	True				
ANR	90366	CallExpression	"r_core_cmd ( core , ""ds"" , 0 )"		90313	0					
ANR	90367	Callee	r_core_cmd		90313	0					
ANR	90368	Identifier	r_core_cmd		90313	0					
ANR	90369	ArgumentList	core		90313	1					
ANR	90370	Argument	core		90313	0					
ANR	90371	Identifier	core		90313	0					
ANR	90372	Argument	"""ds"""		90313	1					
ANR	90373	PrimaryExpression	"""ds"""		90313	0					
ANR	90374	Argument	0		90313	2					
ANR	90375	PrimaryExpression	0		90313	0					
ANR	90376	ExpressionStatement	"r_core_cmd ( core , "".dr*"" , 0 )"	3973:3:101500:101528	90313	1	True				
ANR	90377	CallExpression	"r_core_cmd ( core , "".dr*"" , 0 )"		90313	0					
ANR	90378	Callee	r_core_cmd		90313	0					
ANR	90379	Identifier	r_core_cmd		90313	0					
ANR	90380	ArgumentList	core		90313	1					
ANR	90381	Argument	core		90313	0					
ANR	90382	Identifier	core		90313	0					
ANR	90383	Argument	""".dr*"""		90313	1					
ANR	90384	PrimaryExpression	""".dr*"""		90313	0					
ANR	90385	Argument	0		90313	2					
ANR	90386	PrimaryExpression	0		90313	0					
ANR	90387	ElseStatement	else		90313	0					
ANR	90388	CompoundStatement		11:8:299:299	90313	0					
ANR	90389	ExpressionStatement	"r_core_cmd ( core , ""aes"" , 0 )"	3976:2:101546:101573	90313	0	True				
ANR	90390	CallExpression	"r_core_cmd ( core , ""aes"" , 0 )"		90313	0					
ANR	90391	Callee	r_core_cmd		90313	0					
ANR	90392	Identifier	r_core_cmd		90313	0					
ANR	90393	ArgumentList	core		90313	1					
ANR	90394	Argument	core		90313	0					
ANR	90395	Identifier	core		90313	0					
ANR	90396	Argument	"""aes"""		90313	1					
ANR	90397	PrimaryExpression	"""aes"""		90313	0					
ANR	90398	Argument	0		90313	2					
ANR	90399	PrimaryExpression	0		90313	0					
ANR	90400	ExpressionStatement	"r_core_cmd ( core , "".ar*"" , 0 )"	3977:2:101577:101605	90313	1	True				
ANR	90401	CallExpression	"r_core_cmd ( core , "".ar*"" , 0 )"		90313	0					
ANR	90402	Callee	r_core_cmd		90313	0					
ANR	90403	Identifier	r_core_cmd		90313	0					
ANR	90404	ArgumentList	core		90313	1					
ANR	90405	Argument	core		90313	0					
ANR	90406	Identifier	core		90313	0					
ANR	90407	Argument	""".ar*"""		90313	1					
ANR	90408	PrimaryExpression	""".ar*"""		90313	0					
ANR	90409	Argument	0		90313	2					
ANR	90410	PrimaryExpression	0		90313	0					
ANR	90411	ExpressionStatement	g -> is_instep = true	3979:1:101611:101630	90313	1	True				
ANR	90412	AssignmentExpression	g -> is_instep = true		90313	0		=			
ANR	90413	PtrMemberAccess	g -> is_instep		90313	0					
ANR	90414	Identifier	g		90313	0					
ANR	90415	Identifier	is_instep		90313	1					
ANR	90416	Identifier	true		90313	1					
ANR	90417	ExpressionStatement	g -> need_reload_nodes = true	3980:1:101633:101660	90313	2	True				
ANR	90418	AssignmentExpression	g -> need_reload_nodes = true		90313	0		=			
ANR	90419	PtrMemberAccess	g -> need_reload_nodes		90313	0					
ANR	90420	Identifier	g		90313	0					
ANR	90421	Identifier	need_reload_nodes		90313	1					
ANR	90422	Identifier	true		90313	1					
ANR	90423	ReturnType	static void		90313	1					
ANR	90424	Identifier	graph_single_step_in		90313	2					
ANR	90425	ParameterList	"RCore * core , RAGraph * g"		90313	3					
ANR	90426	Parameter	RCore * core	3965:33:101217:101227	90313	0	True				
ANR	90427	ParameterType	RCore *		90313	0					
ANR	90428	Identifier	core		90313	1					
ANR	90429	Parameter	RAGraph * g	3965:46:101230:101239	90313	1	True				
ANR	90430	ParameterType	RAGraph *		90313	0					
ANR	90431	Identifier	g		90313	1					
ANR	90432	CFGEntryNode	ENTRY		90313		True				
ANR	90433	CFGExitNode	EXIT		90313		True				
ANR	90434	Symbol	core -> config		90313						
ANR	90435	Symbol	g -> need_reload_nodes		90313						
ANR	90436	Symbol	g		90313						
ANR	90437	Symbol	* core		90313						
ANR	90438	Symbol	core		90313						
ANR	90439	Symbol	* g		90313						
ANR	90440	Symbol	* core -> print		90313						
ANR	90441	Symbol	g -> is_instep		90313						
ANR	90442	Symbol	r_config_get_i		90313						
ANR	90443	Symbol	true		90313						
ANR	90444	Symbol	core -> print		90313						
ANR	90445	Symbol	core -> print -> cur_enabled		90313						
ANR	90446	Symbol	* * core		90313						
ANR	90447	Function	graph_single_step_over	3983:0:101665:102086							
ANR	90448	FunctionDef	"graph_single_step_over (RCore * core , RAGraph * g)"		90447	0					
ANR	90449	CompoundStatement		3983:60:101725:102086	90447	0					
ANR	90450	IfStatement	"if ( r_config_get_i ( core -> config , ""cfg.debug"" ) )"		90447	0					
ANR	90451	Condition	"r_config_get_i ( core -> config , ""cfg.debug"" )"	3984:5:101732:101773	90447	0	True				
ANR	90452	CallExpression	"r_config_get_i ( core -> config , ""cfg.debug"" )"		90447	0					
ANR	90453	Callee	r_config_get_i		90447	0					
ANR	90454	Identifier	r_config_get_i		90447	0					
ANR	90455	ArgumentList	core -> config		90447	1					
ANR	90456	Argument	core -> config		90447	0					
ANR	90457	PtrMemberAccess	core -> config		90447	0					
ANR	90458	Identifier	core		90447	0					
ANR	90459	Identifier	config		90447	1					
ANR	90460	Argument	"""cfg.debug"""		90447	1					
ANR	90461	PrimaryExpression	"""cfg.debug"""		90447	0					
ANR	90462	CompoundStatement		2:49:50:50	90447	1					
ANR	90463	IfStatement	if ( core -> print -> cur_enabled )		90447	0					
ANR	90464	Condition	core -> print -> cur_enabled	3985:6:101784:101807	90447	0	True				
ANR	90465	PtrMemberAccess	core -> print -> cur_enabled		90447	0					
ANR	90466	PtrMemberAccess	core -> print		90447	0					
ANR	90467	Identifier	core		90447	0					
ANR	90468	Identifier	print		90447	1					
ANR	90469	Identifier	cur_enabled		90447	1					
ANR	90470	CompoundStatement		3:32:84:84	90447	1					
ANR	90471	ExpressionStatement	"r_core_cmd ( core , ""dcr"" , 0 )"	3986:3:101815:101842	90447	0	True				
ANR	90472	CallExpression	"r_core_cmd ( core , ""dcr"" , 0 )"		90447	0					
ANR	90473	Callee	r_core_cmd		90447	0					
ANR	90474	Identifier	r_core_cmd		90447	0					
ANR	90475	ArgumentList	core		90447	1					
ANR	90476	Argument	core		90447	0					
ANR	90477	Identifier	core		90447	0					
ANR	90478	Argument	"""dcr"""		90447	1					
ANR	90479	PrimaryExpression	"""dcr"""		90447	0					
ANR	90480	Argument	0		90447	2					
ANR	90481	PrimaryExpression	0		90447	0					
ANR	90482	ExpressionStatement	core -> print -> cur_enabled = 0	3987:3:101847:101875	90447	1	True				
ANR	90483	AssignmentExpression	core -> print -> cur_enabled = 0		90447	0		=			
ANR	90484	PtrMemberAccess	core -> print -> cur_enabled		90447	0					
ANR	90485	PtrMemberAccess	core -> print		90447	0					
ANR	90486	Identifier	core		90447	0					
ANR	90487	Identifier	print		90447	1					
ANR	90488	Identifier	cur_enabled		90447	1					
ANR	90489	PrimaryExpression	0		90447	1					
ANR	90490	ElseStatement	else		90447	0					
ANR	90491	CompoundStatement		6:9:160:160	90447	0					
ANR	90492	ExpressionStatement	"r_core_cmd ( core , ""dso"" , 0 )"	3989:3:101891:101918	90447	0	True				
ANR	90493	CallExpression	"r_core_cmd ( core , ""dso"" , 0 )"		90447	0					
ANR	90494	Callee	r_core_cmd		90447	0					
ANR	90495	Identifier	r_core_cmd		90447	0					
ANR	90496	ArgumentList	core		90447	1					
ANR	90497	Argument	core		90447	0					
ANR	90498	Identifier	core		90447	0					
ANR	90499	Argument	"""dso"""		90447	1					
ANR	90500	PrimaryExpression	"""dso"""		90447	0					
ANR	90501	Argument	0		90447	2					
ANR	90502	PrimaryExpression	0		90447	0					
ANR	90503	ExpressionStatement	"r_core_cmd ( core , "".dr*"" , 0 )"	3990:3:101923:101951	90447	1	True				
ANR	90504	CallExpression	"r_core_cmd ( core , "".dr*"" , 0 )"		90447	0					
ANR	90505	Callee	r_core_cmd		90447	0					
ANR	90506	Identifier	r_core_cmd		90447	0					
ANR	90507	ArgumentList	core		90447	1					
ANR	90508	Argument	core		90447	0					
ANR	90509	Identifier	core		90447	0					
ANR	90510	Argument	""".dr*"""		90447	1					
ANR	90511	PrimaryExpression	""".dr*"""		90447	0					
ANR	90512	Argument	0		90447	2					
ANR	90513	PrimaryExpression	0		90447	0					
ANR	90514	ElseStatement	else		90447	0					
ANR	90515	CompoundStatement		10:8:239:239	90447	0					
ANR	90516	ExpressionStatement	"r_core_cmd ( core , ""aeso"" , 0 )"	3993:2:101969:101997	90447	0	True				
ANR	90517	CallExpression	"r_core_cmd ( core , ""aeso"" , 0 )"		90447	0					
ANR	90518	Callee	r_core_cmd		90447	0					
ANR	90519	Identifier	r_core_cmd		90447	0					
ANR	90520	ArgumentList	core		90447	1					
ANR	90521	Argument	core		90447	0					
ANR	90522	Identifier	core		90447	0					
ANR	90523	Argument	"""aeso"""		90447	1					
ANR	90524	PrimaryExpression	"""aeso"""		90447	0					
ANR	90525	Argument	0		90447	2					
ANR	90526	PrimaryExpression	0		90447	0					
ANR	90527	ExpressionStatement	"r_core_cmd ( core , "".ar*"" , 0 )"	3994:2:102001:102029	90447	1	True				
ANR	90528	CallExpression	"r_core_cmd ( core , "".ar*"" , 0 )"		90447	0					
ANR	90529	Callee	r_core_cmd		90447	0					
ANR	90530	Identifier	r_core_cmd		90447	0					
ANR	90531	ArgumentList	core		90447	1					
ANR	90532	Argument	core		90447	0					
ANR	90533	Identifier	core		90447	0					
ANR	90534	Argument	""".ar*"""		90447	1					
ANR	90535	PrimaryExpression	""".ar*"""		90447	0					
ANR	90536	Argument	0		90447	2					
ANR	90537	PrimaryExpression	0		90447	0					
ANR	90538	ExpressionStatement	g -> is_instep = true	3996:1:102035:102054	90447	1	True				
ANR	90539	AssignmentExpression	g -> is_instep = true		90447	0		=			
ANR	90540	PtrMemberAccess	g -> is_instep		90447	0					
ANR	90541	Identifier	g		90447	0					
ANR	90542	Identifier	is_instep		90447	1					
ANR	90543	Identifier	true		90447	1					
ANR	90544	ExpressionStatement	g -> need_reload_nodes = true	3997:1:102057:102084	90447	2	True				
ANR	90545	AssignmentExpression	g -> need_reload_nodes = true		90447	0		=			
ANR	90546	PtrMemberAccess	g -> need_reload_nodes		90447	0					
ANR	90547	Identifier	g		90447	0					
ANR	90548	Identifier	need_reload_nodes		90447	1					
ANR	90549	Identifier	true		90447	1					
ANR	90550	ReturnType	static void		90447	1					
ANR	90551	Identifier	graph_single_step_over		90447	2					
ANR	90552	ParameterList	"RCore * core , RAGraph * g"		90447	3					
ANR	90553	Parameter	RCore * core	3983:35:101700:101710	90447	0	True				
ANR	90554	ParameterType	RCore *		90447	0					
ANR	90555	Identifier	core		90447	1					
ANR	90556	Parameter	RAGraph * g	3983:48:101713:101722	90447	1	True				
ANR	90557	ParameterType	RAGraph *		90447	0					
ANR	90558	Identifier	g		90447	1					
ANR	90559	CFGEntryNode	ENTRY		90447		True				
ANR	90560	CFGExitNode	EXIT		90447		True				
ANR	90561	Symbol	core -> config		90447						
ANR	90562	Symbol	g -> need_reload_nodes		90447						
ANR	90563	Symbol	g		90447						
ANR	90564	Symbol	* core		90447						
ANR	90565	Symbol	core		90447						
ANR	90566	Symbol	* g		90447						
ANR	90567	Symbol	* core -> print		90447						
ANR	90568	Symbol	g -> is_instep		90447						
ANR	90569	Symbol	r_config_get_i		90447						
ANR	90570	Symbol	true		90447						
ANR	90571	Symbol	core -> print		90447						
ANR	90572	Symbol	core -> print -> cur_enabled		90447						
ANR	90573	Symbol	* * core		90447						
ANR	90574	Function	graph_breakpoint	4000:0:102089:102166							
ANR	90575	FunctionDef	graph_breakpoint (RCore * core)		90574	0					
ANR	90576	CompoundStatement		4000:42:102131:102166	90574	0					
ANR	90577	ExpressionStatement	"r_core_cmd ( core , ""dbs $$"" , 0 )"	4001:1:102134:102164	90574	0	True				
ANR	90578	CallExpression	"r_core_cmd ( core , ""dbs $$"" , 0 )"		90574	0					
ANR	90579	Callee	r_core_cmd		90574	0					
ANR	90580	Identifier	r_core_cmd		90574	0					
ANR	90581	ArgumentList	core		90574	1					
ANR	90582	Argument	core		90574	0					
ANR	90583	Identifier	core		90574	0					
ANR	90584	Argument	"""dbs $$"""		90574	1					
ANR	90585	PrimaryExpression	"""dbs $$"""		90574	0					
ANR	90586	Argument	0		90574	2					
ANR	90587	PrimaryExpression	0		90574	0					
ANR	90588	ReturnType	static void		90574	1					
ANR	90589	Identifier	graph_breakpoint		90574	2					
ANR	90590	ParameterList	RCore * core		90574	3					
ANR	90591	Parameter	RCore * core	4000:29:102118:102128	90574	0	True				
ANR	90592	ParameterType	RCore *		90574	0					
ANR	90593	Identifier	core		90574	1					
ANR	90594	CFGEntryNode	ENTRY		90574		True				
ANR	90595	CFGExitNode	EXIT		90574		True				
ANR	90596	Symbol	core		90574						
ANR	90597	Function	graph_continue	4004:0:102169:102240							
ANR	90598	FunctionDef	graph_continue (RCore * core)		90597	0					
ANR	90599	CompoundStatement		4004:40:102209:102240	90597	0					
ANR	90600	ExpressionStatement	"r_core_cmd ( core , ""dc"" , 0 )"	4005:1:102212:102238	90597	0	True				
ANR	90601	CallExpression	"r_core_cmd ( core , ""dc"" , 0 )"		90597	0					
ANR	90602	Callee	r_core_cmd		90597	0					
ANR	90603	Identifier	r_core_cmd		90597	0					
ANR	90604	ArgumentList	core		90597	1					
ANR	90605	Argument	core		90597	0					
ANR	90606	Identifier	core		90597	0					
ANR	90607	Argument	"""dc"""		90597	1					
ANR	90608	PrimaryExpression	"""dc"""		90597	0					
ANR	90609	Argument	0		90597	2					
ANR	90610	PrimaryExpression	0		90597	0					
ANR	90611	ReturnType	static void		90597	1					
ANR	90612	Identifier	graph_continue		90597	2					
ANR	90613	ParameterList	RCore * core		90597	3					
ANR	90614	Parameter	RCore * core	4004:27:102196:102206	90597	0	True				
ANR	90615	ParameterType	RCore *		90597	0					
ANR	90616	Identifier	core		90597	1					
ANR	90617	CFGEntryNode	ENTRY		90597		True				
ANR	90618	CFGExitNode	EXIT		90597		True				
ANR	90619	Symbol	core		90597						
ANR	90620	Function	applyDisMode	4007:0:102242:102675							
ANR	90621	FunctionDef	applyDisMode (RCore * core)		90620	0					
ANR	90622	CompoundStatement		4007:38:102280:102675	90620	0					
ANR	90623	SwitchStatement	switch ( disMode )		90620	0					
ANR	90624	Condition	disMode	4008:9:102291:102297	90620	0	True				
ANR	90625	Identifier	disMode		90620	0					
ANR	90626	CompoundStatement		2:18:19:19	90620	1					
ANR	90627	Label	case 0 :	4009:1:102303:102309	90620	0	True				
ANR	90628	ExpressionStatement	"r_config_set ( core -> config , ""asm.pseudo"" , ""false"" )"	4010:2:102313:102363	90620	1	True				
ANR	90629	CallExpression	"r_config_set ( core -> config , ""asm.pseudo"" , ""false"" )"		90620	0					
ANR	90630	Callee	r_config_set		90620	0					
ANR	90631	Identifier	r_config_set		90620	0					
ANR	90632	ArgumentList	core -> config		90620	1					
ANR	90633	Argument	core -> config		90620	0					
ANR	90634	PtrMemberAccess	core -> config		90620	0					
ANR	90635	Identifier	core		90620	0					
ANR	90636	Identifier	config		90620	1					
ANR	90637	Argument	"""asm.pseudo"""		90620	1					
ANR	90638	PrimaryExpression	"""asm.pseudo"""		90620	0					
ANR	90639	Argument	"""false"""		90620	2					
ANR	90640	PrimaryExpression	"""false"""		90620	0					
ANR	90641	ExpressionStatement	"r_config_set ( core -> config , ""asm.esil"" , ""false"" )"	4011:2:102367:102415	90620	2	True				
ANR	90642	CallExpression	"r_config_set ( core -> config , ""asm.esil"" , ""false"" )"		90620	0					
ANR	90643	Callee	r_config_set		90620	0					
ANR	90644	Identifier	r_config_set		90620	0					
ANR	90645	ArgumentList	core -> config		90620	1					
ANR	90646	Argument	core -> config		90620	0					
ANR	90647	PtrMemberAccess	core -> config		90620	0					
ANR	90648	Identifier	core		90620	0					
ANR	90649	Identifier	config		90620	1					
ANR	90650	Argument	"""asm.esil"""		90620	1					
ANR	90651	PrimaryExpression	"""asm.esil"""		90620	0					
ANR	90652	Argument	"""false"""		90620	2					
ANR	90653	PrimaryExpression	"""false"""		90620	0					
ANR	90654	BreakStatement	break ;	4012:2:102419:102424	90620	3	True				
ANR	90655	Label	case 1 :	4013:1:102427:102433	90620	4	True				
ANR	90656	ExpressionStatement	"r_config_set ( core -> config , ""asm.pseudo"" , ""true"" )"	4014:2:102437:102486	90620	5	True				
ANR	90657	CallExpression	"r_config_set ( core -> config , ""asm.pseudo"" , ""true"" )"		90620	0					
ANR	90658	Callee	r_config_set		90620	0					
ANR	90659	Identifier	r_config_set		90620	0					
ANR	90660	ArgumentList	core -> config		90620	1					
ANR	90661	Argument	core -> config		90620	0					
ANR	90662	PtrMemberAccess	core -> config		90620	0					
ANR	90663	Identifier	core		90620	0					
ANR	90664	Identifier	config		90620	1					
ANR	90665	Argument	"""asm.pseudo"""		90620	1					
ANR	90666	PrimaryExpression	"""asm.pseudo"""		90620	0					
ANR	90667	Argument	"""true"""		90620	2					
ANR	90668	PrimaryExpression	"""true"""		90620	0					
ANR	90669	ExpressionStatement	"r_config_set ( core -> config , ""asm.esil"" , ""false"" )"	4015:2:102490:102538	90620	6	True				
ANR	90670	CallExpression	"r_config_set ( core -> config , ""asm.esil"" , ""false"" )"		90620	0					
ANR	90671	Callee	r_config_set		90620	0					
ANR	90672	Identifier	r_config_set		90620	0					
ANR	90673	ArgumentList	core -> config		90620	1					
ANR	90674	Argument	core -> config		90620	0					
ANR	90675	PtrMemberAccess	core -> config		90620	0					
ANR	90676	Identifier	core		90620	0					
ANR	90677	Identifier	config		90620	1					
ANR	90678	Argument	"""asm.esil"""		90620	1					
ANR	90679	PrimaryExpression	"""asm.esil"""		90620	0					
ANR	90680	Argument	"""false"""		90620	2					
ANR	90681	PrimaryExpression	"""false"""		90620	0					
ANR	90682	BreakStatement	break ;	4016:2:102542:102547	90620	7	True				
ANR	90683	Label	case 2 :	4017:1:102550:102556	90620	8	True				
ANR	90684	ExpressionStatement	"r_config_set ( core -> config , ""asm.pseudo"" , ""false"" )"	4018:2:102560:102610	90620	9	True				
ANR	90685	CallExpression	"r_config_set ( core -> config , ""asm.pseudo"" , ""false"" )"		90620	0					
ANR	90686	Callee	r_config_set		90620	0					
ANR	90687	Identifier	r_config_set		90620	0					
ANR	90688	ArgumentList	core -> config		90620	1					
ANR	90689	Argument	core -> config		90620	0					
ANR	90690	PtrMemberAccess	core -> config		90620	0					
ANR	90691	Identifier	core		90620	0					
ANR	90692	Identifier	config		90620	1					
ANR	90693	Argument	"""asm.pseudo"""		90620	1					
ANR	90694	PrimaryExpression	"""asm.pseudo"""		90620	0					
ANR	90695	Argument	"""false"""		90620	2					
ANR	90696	PrimaryExpression	"""false"""		90620	0					
ANR	90697	ExpressionStatement	"r_config_set ( core -> config , ""asm.esil"" , ""true"" )"	4019:2:102614:102661	90620	10	True				
ANR	90698	CallExpression	"r_config_set ( core -> config , ""asm.esil"" , ""true"" )"		90620	0					
ANR	90699	Callee	r_config_set		90620	0					
ANR	90700	Identifier	r_config_set		90620	0					
ANR	90701	ArgumentList	core -> config		90620	1					
ANR	90702	Argument	core -> config		90620	0					
ANR	90703	PtrMemberAccess	core -> config		90620	0					
ANR	90704	Identifier	core		90620	0					
ANR	90705	Identifier	config		90620	1					
ANR	90706	Argument	"""asm.esil"""		90620	1					
ANR	90707	PrimaryExpression	"""asm.esil"""		90620	0					
ANR	90708	Argument	"""true"""		90620	2					
ANR	90709	PrimaryExpression	"""true"""		90620	0					
ANR	90710	BreakStatement	break ;	4020:2:102665:102670	90620	11	True				
ANR	90711	ReturnType	static void		90620	1					
ANR	90712	Identifier	applyDisMode		90620	2					
ANR	90713	ParameterList	RCore * core		90620	3					
ANR	90714	Parameter	RCore * core	4007:25:102267:102277	90620	0	True				
ANR	90715	ParameterType	RCore *		90620	0					
ANR	90716	Identifier	core		90620	1					
ANR	90717	CFGEntryNode	ENTRY		90620		True				
ANR	90718	CFGExitNode	EXIT		90620		True				
ANR	90719	Symbol	core -> config		90620						
ANR	90720	Symbol	core		90620						
ANR	90721	Symbol	disMode		90620						
ANR	90722	Symbol	* core		90620						
ANR	90723	Function	rotateColor	4024:0:102678:102862							
ANR	90724	FunctionDef	rotateColor (RCore * core)		90723	0					
ANR	90725	CompoundStatement		4024:37:102715:102862	90723	0					
ANR	90726	IdentifierDeclStatement	"int color = r_config_get_i ( core -> config , ""scr.color"" ) ;"	4025:1:102718:102772	90723	0	True				
ANR	90727	IdentifierDecl	"color = r_config_get_i ( core -> config , ""scr.color"" )"		90723	0					
ANR	90728	IdentifierDeclType	int		90723	0					
ANR	90729	Identifier	color		90723	1					
ANR	90730	AssignmentExpression	"color = r_config_get_i ( core -> config , ""scr.color"" )"		90723	2		=			
ANR	90731	Identifier	color		90723	0					
ANR	90732	CallExpression	"r_config_get_i ( core -> config , ""scr.color"" )"		90723	1					
ANR	90733	Callee	r_config_get_i		90723	0					
ANR	90734	Identifier	r_config_get_i		90723	0					
ANR	90735	ArgumentList	core -> config		90723	1					
ANR	90736	Argument	core -> config		90723	0					
ANR	90737	PtrMemberAccess	core -> config		90723	0					
ANR	90738	Identifier	core		90723	0					
ANR	90739	Identifier	config		90723	1					
ANR	90740	Argument	"""scr.color"""		90723	1					
ANR	90741	PrimaryExpression	"""scr.color"""		90723	0					
ANR	90742	IfStatement	if ( ++ color > 2 )		90723	1					
ANR	90743	Condition	++ color > 2	4026:5:102779:102789	90723	0	True				
ANR	90744	RelationalExpression	++ color > 2		90723	0		>			
ANR	90745	UnaryExpression	++ color		90723	0					
ANR	90746	IncDec	++		90723	0					
ANR	90747	Identifier	color		90723	1					
ANR	90748	PrimaryExpression	2		90723	1					
ANR	90749	CompoundStatement		3:18:76:76	90723	1					
ANR	90750	ExpressionStatement	color = 0	4027:2:102796:102805	90723	0	True				
ANR	90751	AssignmentExpression	color = 0		90723	0		=			
ANR	90752	Identifier	color		90723	0					
ANR	90753	PrimaryExpression	0		90723	1					
ANR	90754	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.color"" , color )"	4029:1:102811:102860	90723	2	True				
ANR	90755	CallExpression	"r_config_set_i ( core -> config , ""scr.color"" , color )"		90723	0					
ANR	90756	Callee	r_config_set_i		90723	0					
ANR	90757	Identifier	r_config_set_i		90723	0					
ANR	90758	ArgumentList	core -> config		90723	1					
ANR	90759	Argument	core -> config		90723	0					
ANR	90760	PtrMemberAccess	core -> config		90723	0					
ANR	90761	Identifier	core		90723	0					
ANR	90762	Identifier	config		90723	1					
ANR	90763	Argument	"""scr.color"""		90723	1					
ANR	90764	PrimaryExpression	"""scr.color"""		90723	0					
ANR	90765	Argument	color		90723	2					
ANR	90766	Identifier	color		90723	0					
ANR	90767	ReturnType	static void		90723	1					
ANR	90768	Identifier	rotateColor		90723	2					
ANR	90769	ParameterList	RCore * core		90723	3					
ANR	90770	Parameter	RCore * core	4024:24:102702:102712	90723	0	True				
ANR	90771	ParameterType	RCore *		90723	0					
ANR	90772	Identifier	core		90723	1					
ANR	90773	CFGEntryNode	ENTRY		90723		True				
ANR	90774	CFGExitNode	EXIT		90723		True				
ANR	90775	Symbol	core -> config		90723						
ANR	90776	Symbol	core		90723						
ANR	90777	Symbol	color		90723						
ANR	90778	Symbol	r_config_get_i		90723						
ANR	90779	Symbol	* core		90723						
ANR	90780	Function	toggle_bb	4033:0:102885:103205							
ANR	90781	FunctionDef	"toggle_bb (RCore * core , ut64 addr)"		90780	0					
ANR	90782	CompoundStatement		4033:46:102931:103205	90780	0					
ANR	90783	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , addr , R_ANAL_FCN_TYPE_NULL ) ;"	4034:1:102934:103013	90780	0	True				
ANR	90784	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , addr , R_ANAL_FCN_TYPE_NULL )"		90780	0					
ANR	90785	IdentifierDeclType	RAnalFunction *		90780	0					
ANR	90786	Identifier	fcn		90780	1					
ANR	90787	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , addr , R_ANAL_FCN_TYPE_NULL )"		90780	2		=			
ANR	90788	Identifier	fcn		90780	0					
ANR	90789	CallExpression	"r_anal_get_fcn_in ( core -> anal , addr , R_ANAL_FCN_TYPE_NULL )"		90780	1					
ANR	90790	Callee	r_anal_get_fcn_in		90780	0					
ANR	90791	Identifier	r_anal_get_fcn_in		90780	0					
ANR	90792	ArgumentList	core -> anal		90780	1					
ANR	90793	Argument	core -> anal		90780	0					
ANR	90794	PtrMemberAccess	core -> anal		90780	0					
ANR	90795	Identifier	core		90780	0					
ANR	90796	Identifier	anal		90780	1					
ANR	90797	Argument	addr		90780	1					
ANR	90798	Identifier	addr		90780	0					
ANR	90799	Argument	R_ANAL_FCN_TYPE_NULL		90780	2					
ANR	90800	Identifier	R_ANAL_FCN_TYPE_NULL		90780	0					
ANR	90801	IfStatement	if ( fcn )		90780	1					
ANR	90802	Condition	fcn	4035:5:103020:103022	90780	0	True				
ANR	90803	Identifier	fcn		90780	0					
ANR	90804	CompoundStatement		4:2:97:157	90780	1					
ANR	90805	IdentifierDeclStatement	"RAnalBlock * bb = r_anal_fcn_bbget_in ( core -> anal , fcn , addr ) ;"	4036:2:103029:103089	90780	0	True				
ANR	90806	IdentifierDecl	"* bb = r_anal_fcn_bbget_in ( core -> anal , fcn , addr )"		90780	0					
ANR	90807	IdentifierDeclType	RAnalBlock *		90780	0					
ANR	90808	Identifier	bb		90780	1					
ANR	90809	AssignmentExpression	"* bb = r_anal_fcn_bbget_in ( core -> anal , fcn , addr )"		90780	2		=			
ANR	90810	Identifier	bb		90780	0					
ANR	90811	CallExpression	"r_anal_fcn_bbget_in ( core -> anal , fcn , addr )"		90780	1					
ANR	90812	Callee	r_anal_fcn_bbget_in		90780	0					
ANR	90813	Identifier	r_anal_fcn_bbget_in		90780	0					
ANR	90814	ArgumentList	core -> anal		90780	1					
ANR	90815	Argument	core -> anal		90780	0					
ANR	90816	PtrMemberAccess	core -> anal		90780	0					
ANR	90817	Identifier	core		90780	0					
ANR	90818	Identifier	anal		90780	1					
ANR	90819	Argument	fcn		90780	1					
ANR	90820	Identifier	fcn		90780	0					
ANR	90821	Argument	addr		90780	2					
ANR	90822	Identifier	addr		90780	0					
ANR	90823	IfStatement	if ( bb )		90780	1					
ANR	90824	Condition	bb	4037:6:103097:103098	90780	0	True				
ANR	90825	Identifier	bb		90780	0					
ANR	90826	CompoundStatement		5:10:169:169	90780	1					
ANR	90827	ExpressionStatement	bb -> folded = ! bb -> folded	4038:3:103106:103130	90780	0	True				
ANR	90828	AssignmentExpression	bb -> folded = ! bb -> folded		90780	0		=			
ANR	90829	PtrMemberAccess	bb -> folded		90780	0					
ANR	90830	Identifier	bb		90780	0					
ANR	90831	Identifier	folded		90780	1					
ANR	90832	UnaryOperationExpression	! bb -> folded		90780	1					
ANR	90833	UnaryOperator	!		90780	0					
ANR	90834	PtrMemberAccess	bb -> folded		90780	1					
ANR	90835	Identifier	bb		90780	0					
ANR	90836	Identifier	folded		90780	1					
ANR	90837	ElseStatement	else		90780	0					
ANR	90838	CompoundStatement		7:9:209:209	90780	0					
ANR	90839	ExpressionStatement	r_warn_if_reached ( )	4040:3:103146:103166	90780	0	True				
ANR	90840	CallExpression	r_warn_if_reached ( )		90780	0					
ANR	90841	Callee	r_warn_if_reached		90780	0					
ANR	90842	Identifier	r_warn_if_reached		90780	0					
ANR	90843	ArgumentList			90780	1					
ANR	90844	ReturnStatement	return true ;	4042:2:103174:103185	90780	2	True				
ANR	90845	Identifier	true		90780	0					
ANR	90846	ReturnStatement	return false ;	4044:1:103191:103203	90780	2	True				
ANR	90847	Identifier	false		90780	0					
ANR	90848	ReturnType	static bool		90780	1					
ANR	90849	Identifier	toggle_bb		90780	2					
ANR	90850	ParameterList	"RCore * core , ut64 addr"		90780	3					
ANR	90851	Parameter	RCore * core	4033:22:102907:102917	90780	0	True				
ANR	90852	ParameterType	RCore *		90780	0					
ANR	90853	Identifier	core		90780	1					
ANR	90854	Parameter	ut64 addr	4033:35:102920:102928	90780	1	True				
ANR	90855	ParameterType	ut64		90780	0					
ANR	90856	Identifier	addr		90780	1					
ANR	90857	CFGEntryNode	ENTRY		90780		True				
ANR	90858	CFGExitNode	EXIT		90780		True				
ANR	90859	Symbol	bb		90780						
ANR	90860	Symbol	R_ANAL_FCN_TYPE_NULL		90780						
ANR	90861	Symbol	* bb		90780						
ANR	90862	Symbol	* core		90780						
ANR	90863	Symbol	false		90780						
ANR	90864	Symbol	core -> anal		90780						
ANR	90865	Symbol	fcn		90780						
ANR	90866	Symbol	core		90780						
ANR	90867	Symbol	r_anal_get_fcn_in		90780						
ANR	90868	Symbol	true		90780						
ANR	90869	Symbol	addr		90780						
ANR	90870	Symbol	r_anal_fcn_bbget_in		90780						
ANR	90871	Symbol	bb -> folded		90780						
ANR	90872	Function	r_core_visual_graph	4047:0:103208:124552							
ANR	90873	FunctionDef	"r_core_visual_graph (RCore * core , RAGraph * g , RAnalFunction * _fcn , int is_interactive)"		90872	0					
ANR	90874	CompoundStatement		4047:96:103304:124552	90872	0					
ANR	90875	IdentifierDeclStatement	int o_asmqjmps_letter = core -> is_asmqjmps_letter ;	4048:1:103307:103355	90872	0	True				
ANR	90876	IdentifierDecl	o_asmqjmps_letter = core -> is_asmqjmps_letter		90872	0					
ANR	90877	IdentifierDeclType	int		90872	0					
ANR	90878	Identifier	o_asmqjmps_letter		90872	1					
ANR	90879	AssignmentExpression	o_asmqjmps_letter = core -> is_asmqjmps_letter		90872	2		=			
ANR	90880	Identifier	o_asmqjmps_letter		90872	0					
ANR	90881	PtrMemberAccess	core -> is_asmqjmps_letter		90872	1					
ANR	90882	Identifier	core		90872	0					
ANR	90883	Identifier	is_asmqjmps_letter		90872	1					
ANR	90884	IdentifierDeclStatement	int o_scrinteractive = r_cons_is_interactive ( ) ;	4049:1:103358:103405	90872	1	True				
ANR	90885	IdentifierDecl	o_scrinteractive = r_cons_is_interactive ( )		90872	0					
ANR	90886	IdentifierDeclType	int		90872	0					
ANR	90887	Identifier	o_scrinteractive		90872	1					
ANR	90888	AssignmentExpression	o_scrinteractive = r_cons_is_interactive ( )		90872	2		=			
ANR	90889	Identifier	o_scrinteractive		90872	0					
ANR	90890	CallExpression	r_cons_is_interactive ( )		90872	1					
ANR	90891	Callee	r_cons_is_interactive		90872	0					
ANR	90892	Identifier	r_cons_is_interactive		90872	0					
ANR	90893	ArgumentList			90872	1					
ANR	90894	IdentifierDeclStatement	int o_vmode = core -> vmode ;	4050:1:103408:103433	90872	2	True				
ANR	90895	IdentifierDecl	o_vmode = core -> vmode		90872	0					
ANR	90896	IdentifierDeclType	int		90872	0					
ANR	90897	Identifier	o_vmode		90872	1					
ANR	90898	AssignmentExpression	o_vmode = core -> vmode		90872	2		=			
ANR	90899	Identifier	o_vmode		90872	0					
ANR	90900	PtrMemberAccess	core -> vmode		90872	1					
ANR	90901	Identifier	core		90872	0					
ANR	90902	Identifier	vmode		90872	1					
ANR	90903	IdentifierDeclStatement	"int exit_graph = false , is_error = false ;"	4051:1:103436:103476	90872	3	True				
ANR	90904	IdentifierDecl	exit_graph = false		90872	0					
ANR	90905	IdentifierDeclType	int		90872	0					
ANR	90906	Identifier	exit_graph		90872	1					
ANR	90907	AssignmentExpression	exit_graph = false		90872	2		=			
ANR	90908	Identifier	false		90872	0					
ANR	90909	Identifier	false		90872	1					
ANR	90910	IdentifierDecl	is_error = false		90872	1					
ANR	90911	IdentifierDeclType	int		90872	0					
ANR	90912	Identifier	is_error		90872	1					
ANR	90913	AssignmentExpression	is_error = false		90872	2		=			
ANR	90914	Identifier	false		90872	0					
ANR	90915	Identifier	false		90872	1					
ANR	90916	IdentifierDeclStatement	int update_seek = false ;	4052:1:103479:103502	90872	4	True				
ANR	90917	IdentifierDecl	update_seek = false		90872	0					
ANR	90918	IdentifierDeclType	int		90872	0					
ANR	90919	Identifier	update_seek		90872	1					
ANR	90920	AssignmentExpression	update_seek = false		90872	2		=			
ANR	90921	Identifier	false		90872	0					
ANR	90922	Identifier	false		90872	1					
ANR	90923	IdentifierDeclStatement	struct agraph_refresh_data * grd ;	4053:1:103505:103536	90872	5	True				
ANR	90924	IdentifierDecl	* grd		90872	0					
ANR	90925	IdentifierDeclType	struct agraph_refresh_data *		90872	0					
ANR	90926	Identifier	grd		90872	1					
ANR	90927	IdentifierDeclStatement	"int okey , key ;"	4054:1:103539:103552	90872	6	True				
ANR	90928	IdentifierDecl	okey		90872	0					
ANR	90929	IdentifierDeclType	int		90872	0					
ANR	90930	Identifier	okey		90872	1					
ANR	90931	IdentifierDecl	key		90872	1					
ANR	90932	IdentifierDeclType	int		90872	0					
ANR	90933	Identifier	key		90872	1					
ANR	90934	IdentifierDeclStatement	RAnalFunction * fcn = NULL ;	4055:1:103555:103580	90872	7	True				
ANR	90935	IdentifierDecl	* fcn = NULL		90872	0					
ANR	90936	IdentifierDeclType	RAnalFunction *		90872	0					
ANR	90937	Identifier	fcn		90872	1					
ANR	90938	AssignmentExpression	* fcn = NULL		90872	2		=			
ANR	90939	Identifier	NULL		90872	0					
ANR	90940	Identifier	NULL		90872	1					
ANR	90941	IdentifierDeclStatement	const char * key_s ;	4056:1:103583:103600	90872	8	True				
ANR	90942	IdentifierDecl	* key_s		90872	0					
ANR	90943	IdentifierDeclType	const char *		90872	0					
ANR	90944	Identifier	key_s		90872	1					
ANR	90945	IdentifierDeclStatement	"RConsCanvas * can , * o_can = NULL ;"	4057:1:103603:103634	90872	9	True				
ANR	90946	IdentifierDecl	* can		90872	0					
ANR	90947	IdentifierDeclType	RConsCanvas *		90872	0					
ANR	90948	Identifier	can		90872	1					
ANR	90949	IdentifierDecl	* o_can = NULL		90872	1					
ANR	90950	IdentifierDeclType	RConsCanvas *		90872	0					
ANR	90951	Identifier	o_can		90872	1					
ANR	90952	AssignmentExpression	* o_can = NULL		90872	2		=			
ANR	90953	Identifier	NULL		90872	0					
ANR	90954	Identifier	NULL		90872	1					
ANR	90955	IdentifierDeclStatement	bool graph_allocated = false ;	4058:1:103637:103665	90872	10	True				
ANR	90956	IdentifierDecl	graph_allocated = false		90872	0					
ANR	90957	IdentifierDeclType	bool		90872	0					
ANR	90958	Identifier	graph_allocated		90872	1					
ANR	90959	AssignmentExpression	graph_allocated = false		90872	2		=			
ANR	90960	Identifier	false		90872	0					
ANR	90961	Identifier	false		90872	1					
ANR	90962	IdentifierDeclStatement	int movspeed ;	4059:1:103668:103680	90872	11	True				
ANR	90963	IdentifierDecl	movspeed		90872	0					
ANR	90964	IdentifierDeclType	int		90872	0					
ANR	90965	Identifier	movspeed		90872	1					
ANR	90966	IdentifierDeclStatement	"int ret , invscroll ;"	4060:1:103683:103701	90872	12	True				
ANR	90967	IdentifierDecl	ret		90872	0					
ANR	90968	IdentifierDeclType	int		90872	0					
ANR	90969	Identifier	ret		90872	1					
ANR	90970	IdentifierDecl	invscroll		90872	1					
ANR	90971	IdentifierDeclType	int		90872	0					
ANR	90972	Identifier	invscroll		90872	1					
ANR	90973	IdentifierDeclStatement	RConfigHold * hc = r_config_hold_new ( core -> config ) ;	4061:1:103704:103754	90872	13	True				
ANR	90974	IdentifierDecl	* hc = r_config_hold_new ( core -> config )		90872	0					
ANR	90975	IdentifierDeclType	RConfigHold *		90872	0					
ANR	90976	Identifier	hc		90872	1					
ANR	90977	AssignmentExpression	* hc = r_config_hold_new ( core -> config )		90872	2		=			
ANR	90978	Identifier	hc		90872	0					
ANR	90979	CallExpression	r_config_hold_new ( core -> config )		90872	1					
ANR	90980	Callee	r_config_hold_new		90872	0					
ANR	90981	Identifier	r_config_hold_new		90872	0					
ANR	90982	ArgumentList	core -> config		90872	1					
ANR	90983	Argument	core -> config		90872	0					
ANR	90984	PtrMemberAccess	core -> config		90872	0					
ANR	90985	Identifier	core		90872	0					
ANR	90986	Identifier	config		90872	1					
ANR	90987	IfStatement	if ( ! hc )		90872	14					
ANR	90988	Condition	! hc	4062:5:103761:103763	90872	0	True				
ANR	90989	UnaryOperationExpression	! hc		90872	0					
ANR	90990	UnaryOperator	!		90872	0					
ANR	90991	Identifier	hc		90872	1					
ANR	90992	CompoundStatement		16:10:461:461	90872	1					
ANR	90993	ReturnStatement	return false ;	4063:2:103770:103782	90872	0	True				
ANR	90994	Identifier	false		90872	0					
ANR	90995	ExpressionStatement	"r_config_hold_i ( hc , ""asm.pseudo"" , ""asm.esil"" , ""asm.cmt.right"" , NULL )"	4065:1:103788:103857	90872	15	True				
ANR	90996	CallExpression	"r_config_hold_i ( hc , ""asm.pseudo"" , ""asm.esil"" , ""asm.cmt.right"" , NULL )"		90872	0					
ANR	90997	Callee	r_config_hold_i		90872	0					
ANR	90998	Identifier	r_config_hold_i		90872	0					
ANR	90999	ArgumentList	hc		90872	1					
ANR	91000	Argument	hc		90872	0					
ANR	91001	Identifier	hc		90872	0					
ANR	91002	Argument	"""asm.pseudo"""		90872	1					
ANR	91003	PrimaryExpression	"""asm.pseudo"""		90872	0					
ANR	91004	Argument	"""asm.esil"""		90872	2					
ANR	91005	PrimaryExpression	"""asm.esil"""		90872	0					
ANR	91006	Argument	"""asm.cmt.right"""		90872	3					
ANR	91007	PrimaryExpression	"""asm.cmt.right"""		90872	0					
ANR	91008	Argument	NULL		90872	4					
ANR	91009	Identifier	NULL		90872	0					
ANR	91010	IdentifierDeclStatement	"int h , w = r_cons_get_size ( & h ) ;"	4067:1:103861:103892	90872	16	True				
ANR	91011	IdentifierDecl	h		90872	0					
ANR	91012	IdentifierDeclType	int		90872	0					
ANR	91013	Identifier	h		90872	1					
ANR	91014	IdentifierDecl	w = r_cons_get_size ( & h )		90872	1					
ANR	91015	IdentifierDeclType	int		90872	0					
ANR	91016	Identifier	w		90872	1					
ANR	91017	AssignmentExpression	w = r_cons_get_size ( & h )		90872	2		=			
ANR	91018	Identifier	w		90872	0					
ANR	91019	CallExpression	r_cons_get_size ( & h )		90872	1					
ANR	91020	Callee	r_cons_get_size		90872	0					
ANR	91021	Identifier	r_cons_get_size		90872	0					
ANR	91022	ArgumentList	& h		90872	1					
ANR	91023	Argument	& h		90872	0					
ANR	91024	UnaryOperationExpression	& h		90872	0					
ANR	91025	UnaryOperator	&		90872	0					
ANR	91026	Identifier	h		90872	1					
ANR	91027	ExpressionStatement	"can = r_cons_canvas_new ( w , h )"	4068:1:103895:103925	90872	17	True				
ANR	91028	AssignmentExpression	"can = r_cons_canvas_new ( w , h )"		90872	0		=			
ANR	91029	Identifier	can		90872	0					
ANR	91030	CallExpression	"r_cons_canvas_new ( w , h )"		90872	1					
ANR	91031	Callee	r_cons_canvas_new		90872	0					
ANR	91032	Identifier	r_cons_canvas_new		90872	0					
ANR	91033	ArgumentList	w		90872	1					
ANR	91034	Argument	w		90872	0					
ANR	91035	Identifier	w		90872	0					
ANR	91036	Argument	h		90872	1					
ANR	91037	Identifier	h		90872	0					
ANR	91038	IfStatement	if ( ! can )		90872	18					
ANR	91039	Condition	! can	4069:5:103932:103935	90872	0	True				
ANR	91040	UnaryOperationExpression	! can		90872	0					
ANR	91041	UnaryOperator	!		90872	0					
ANR	91042	Identifier	can		90872	1					
ANR	91043	CompoundStatement		23:11:633:633	90872	1					
ANR	91044	ExpressionStatement	w = 80	4070:2:103942:103948	90872	0	True				
ANR	91045	AssignmentExpression	w = 80		90872	0		=			
ANR	91046	Identifier	w		90872	0					
ANR	91047	PrimaryExpression	80		90872	1					
ANR	91048	ExpressionStatement	h = 25	4071:2:103952:103958	90872	1	True				
ANR	91049	AssignmentExpression	h = 25		90872	0		=			
ANR	91050	Identifier	h		90872	0					
ANR	91051	PrimaryExpression	25		90872	1					
ANR	91052	ExpressionStatement	"can = r_cons_canvas_new ( w , h )"	4072:2:103962:103992	90872	2	True				
ANR	91053	AssignmentExpression	"can = r_cons_canvas_new ( w , h )"		90872	0		=			
ANR	91054	Identifier	can		90872	0					
ANR	91055	CallExpression	"r_cons_canvas_new ( w , h )"		90872	1					
ANR	91056	Callee	r_cons_canvas_new		90872	0					
ANR	91057	Identifier	r_cons_canvas_new		90872	0					
ANR	91058	ArgumentList	w		90872	1					
ANR	91059	Argument	w		90872	0					
ANR	91060	Identifier	w		90872	0					
ANR	91061	Argument	h		90872	1					
ANR	91062	Identifier	h		90872	0					
ANR	91063	IfStatement	if ( ! can )		90872	3					
ANR	91064	Condition	! can	4073:6:104000:104003	90872	0	True				
ANR	91065	UnaryOperationExpression	! can		90872	0					
ANR	91066	UnaryOperator	!		90872	0					
ANR	91067	Identifier	can		90872	1					
ANR	91068	CompoundStatement		27:12:701:701	90872	1					
ANR	91069	Statement	eprintf	4074:3:104011:104017	90872	0	True				
ANR	91070	Statement	(	4074:11:104019:104019	90872	1	True				
ANR	91071	Statement	"""Cannot create RCons.canvas context. Invalid screen """	4074:12:104020:104072	90872	2	True				
ANR	91072	Statement	"""size? See scr.columns + scr.rows\\n"""	4075:5:104079:104114	90872	3	True				
ANR	91073	Statement	)	4075:41:104115:104115	90872	4	True				
ANR	91074	ExpressionStatement		4075:42:104116:104116	90872	5	True				
ANR	91075	ExpressionStatement	r_config_hold_free ( hc )	4076:3:104121:104144	90872	6	True				
ANR	91076	CallExpression	r_config_hold_free ( hc )		90872	0					
ANR	91077	Callee	r_config_hold_free		90872	0					
ANR	91078	Identifier	r_config_hold_free		90872	0					
ANR	91079	ArgumentList	hc		90872	1					
ANR	91080	Argument	hc		90872	0					
ANR	91081	Identifier	hc		90872	0					
ANR	91082	ReturnStatement	return false ;	4077:3:104149:104161	90872	7	True				
ANR	91083	Identifier	false		90872	0					
ANR	91084	ExpressionStatement	"can -> linemode = r_config_get_i ( core -> config , ""graph.linemode"" )"	4080:1:104171:104234	90872	19	True				
ANR	91085	AssignmentExpression	"can -> linemode = r_config_get_i ( core -> config , ""graph.linemode"" )"		90872	0		=			
ANR	91086	PtrMemberAccess	can -> linemode		90872	0					
ANR	91087	Identifier	can		90872	0					
ANR	91088	Identifier	linemode		90872	1					
ANR	91089	CallExpression	"r_config_get_i ( core -> config , ""graph.linemode"" )"		90872	1					
ANR	91090	Callee	r_config_get_i		90872	0					
ANR	91091	Identifier	r_config_get_i		90872	0					
ANR	91092	ArgumentList	core -> config		90872	1					
ANR	91093	Argument	core -> config		90872	0					
ANR	91094	PtrMemberAccess	core -> config		90872	0					
ANR	91095	Identifier	core		90872	0					
ANR	91096	Identifier	config		90872	1					
ANR	91097	Argument	"""graph.linemode"""		90872	1					
ANR	91098	PrimaryExpression	"""graph.linemode"""		90872	0					
ANR	91099	ExpressionStatement	"can -> color = r_config_get_i ( core -> config , ""scr.color"" )"	4081:1:104237:104292	90872	20	True				
ANR	91100	AssignmentExpression	"can -> color = r_config_get_i ( core -> config , ""scr.color"" )"		90872	0		=			
ANR	91101	PtrMemberAccess	can -> color		90872	0					
ANR	91102	Identifier	can		90872	0					
ANR	91103	Identifier	color		90872	1					
ANR	91104	CallExpression	"r_config_get_i ( core -> config , ""scr.color"" )"		90872	1					
ANR	91105	Callee	r_config_get_i		90872	0					
ANR	91106	Identifier	r_config_get_i		90872	0					
ANR	91107	ArgumentList	core -> config		90872	1					
ANR	91108	Argument	core -> config		90872	0					
ANR	91109	PtrMemberAccess	core -> config		90872	0					
ANR	91110	Identifier	core		90872	0					
ANR	91111	Identifier	config		90872	1					
ANR	91112	Argument	"""scr.color"""		90872	1					
ANR	91113	PrimaryExpression	"""scr.color"""		90872	0					
ANR	91114	IfStatement	if ( ! g )		90872	21					
ANR	91115	Condition	! g	4083:5:104300:104301	90872	0	True				
ANR	91116	UnaryOperationExpression	! g		90872	0					
ANR	91117	UnaryOperator	!		90872	0					
ANR	91118	Identifier	g		90872	1					
ANR	91119	CompoundStatement		37:9:999:999	90872	1					
ANR	91120	ExpressionStatement	graph_allocated = true	4084:2:104308:104330	90872	0	True				
ANR	91121	AssignmentExpression	graph_allocated = true		90872	0		=			
ANR	91122	Identifier	graph_allocated		90872	0					
ANR	91123	Identifier	true		90872	1					
ANR	91124	ExpressionStatement	"fcn = _fcn ? _fcn : r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"	4085:2:104334:104399	90872	1	True				
ANR	91125	AssignmentExpression	"fcn = _fcn ? _fcn : r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	0		=			
ANR	91126	Identifier	fcn		90872	0					
ANR	91127	ConditionalExpression	"_fcn ? _fcn : r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	1					
ANR	91128	Condition	_fcn		90872	0					
ANR	91129	Identifier	_fcn		90872	0					
ANR	91130	Identifier	_fcn		90872	1					
ANR	91131	CallExpression	"r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	2					
ANR	91132	Callee	r_anal_get_fcn_in		90872	0					
ANR	91133	Identifier	r_anal_get_fcn_in		90872	0					
ANR	91134	ArgumentList	core -> anal		90872	1					
ANR	91135	Argument	core -> anal		90872	0					
ANR	91136	PtrMemberAccess	core -> anal		90872	0					
ANR	91137	Identifier	core		90872	0					
ANR	91138	Identifier	anal		90872	1					
ANR	91139	Argument	core -> offset		90872	1					
ANR	91140	PtrMemberAccess	core -> offset		90872	0					
ANR	91141	Identifier	core		90872	0					
ANR	91142	Identifier	offset		90872	1					
ANR	91143	Argument	0		90872	2					
ANR	91144	PrimaryExpression	0		90872	0					
ANR	91145	IfStatement	if ( ! fcn )		90872	2					
ANR	91146	Condition	! fcn	4086:6:104407:104410	90872	0	True				
ANR	91147	UnaryOperationExpression	! fcn		90872	0					
ANR	91148	UnaryOperator	!		90872	0					
ANR	91149	Identifier	fcn		90872	1					
ANR	91150	CompoundStatement		40:12:1108:1108	90872	1					
ANR	91151	ExpressionStatement	r_config_hold_restore ( hc )	4087:3:104418:104444	90872	0	True				
ANR	91152	CallExpression	r_config_hold_restore ( hc )		90872	0					
ANR	91153	Callee	r_config_hold_restore		90872	0					
ANR	91154	Identifier	r_config_hold_restore		90872	0					
ANR	91155	ArgumentList	hc		90872	1					
ANR	91156	Argument	hc		90872	0					
ANR	91157	Identifier	hc		90872	0					
ANR	91158	ExpressionStatement	r_config_hold_free ( hc )	4088:3:104449:104472	90872	1	True				
ANR	91159	CallExpression	r_config_hold_free ( hc )		90872	0					
ANR	91160	Callee	r_config_hold_free		90872	0					
ANR	91161	Identifier	r_config_hold_free		90872	0					
ANR	91162	ArgumentList	hc		90872	1					
ANR	91163	Argument	hc		90872	0					
ANR	91164	Identifier	hc		90872	0					
ANR	91165	ExpressionStatement	r_cons_canvas_free ( can )	4089:3:104477:104501	90872	2	True				
ANR	91166	CallExpression	r_cons_canvas_free ( can )		90872	0					
ANR	91167	Callee	r_cons_canvas_free		90872	0					
ANR	91168	Identifier	r_cons_canvas_free		90872	0					
ANR	91169	ArgumentList	can		90872	1					
ANR	91170	Argument	can		90872	0					
ANR	91171	Identifier	can		90872	0					
ANR	91172	ReturnStatement	return false ;	4090:3:104506:104518	90872	3	True				
ANR	91173	Identifier	false		90872	0					
ANR	91174	ExpressionStatement	g = r_agraph_new ( can )	4092:2:104526:104548	90872	3	True				
ANR	91175	AssignmentExpression	g = r_agraph_new ( can )		90872	0		=			
ANR	91176	Identifier	g		90872	0					
ANR	91177	CallExpression	r_agraph_new ( can )		90872	1					
ANR	91178	Callee	r_agraph_new		90872	0					
ANR	91179	Identifier	r_agraph_new		90872	0					
ANR	91180	ArgumentList	can		90872	1					
ANR	91181	Argument	can		90872	0					
ANR	91182	Identifier	can		90872	0					
ANR	91183	IfStatement	if ( ! g )		90872	4					
ANR	91184	Condition	! g	4093:6:104556:104557	90872	0	True				
ANR	91185	UnaryOperationExpression	! g		90872	0					
ANR	91186	UnaryOperator	!		90872	0					
ANR	91187	Identifier	g		90872	1					
ANR	91188	CompoundStatement		47:10:1255:1255	90872	1					
ANR	91189	ExpressionStatement	r_cons_canvas_free ( can )	4094:3:104565:104589	90872	0	True				
ANR	91190	CallExpression	r_cons_canvas_free ( can )		90872	0					
ANR	91191	Callee	r_cons_canvas_free		90872	0					
ANR	91192	Identifier	r_cons_canvas_free		90872	0					
ANR	91193	ArgumentList	can		90872	1					
ANR	91194	Argument	can		90872	0					
ANR	91195	Identifier	can		90872	0					
ANR	91196	ExpressionStatement	r_config_hold_restore ( hc )	4095:3:104594:104620	90872	1	True				
ANR	91197	CallExpression	r_config_hold_restore ( hc )		90872	0					
ANR	91198	Callee	r_config_hold_restore		90872	0					
ANR	91199	Identifier	r_config_hold_restore		90872	0					
ANR	91200	ArgumentList	hc		90872	1					
ANR	91201	Argument	hc		90872	0					
ANR	91202	Identifier	hc		90872	0					
ANR	91203	ExpressionStatement	r_config_hold_free ( hc )	4096:3:104625:104648	90872	2	True				
ANR	91204	CallExpression	r_config_hold_free ( hc )		90872	0					
ANR	91205	Callee	r_config_hold_free		90872	0					
ANR	91206	Identifier	r_config_hold_free		90872	0					
ANR	91207	ArgumentList	hc		90872	1					
ANR	91208	Argument	hc		90872	0					
ANR	91209	Identifier	hc		90872	0					
ANR	91210	ReturnStatement	return false ;	4097:3:104653:104665	90872	3	True				
ANR	91211	Identifier	false		90872	0					
ANR	91212	ExpressionStatement	g -> is_tiny = is_interactive == 2	4099:2:104673:104705	90872	5	True				
ANR	91213	AssignmentExpression	g -> is_tiny = is_interactive == 2		90872	0		=			
ANR	91214	PtrMemberAccess	g -> is_tiny		90872	0					
ANR	91215	Identifier	g		90872	0					
ANR	91216	Identifier	is_tiny		90872	1					
ANR	91217	EqualityExpression	is_interactive == 2		90872	1		==			
ANR	91218	Identifier	is_interactive		90872	0					
ANR	91219	PrimaryExpression	2		90872	1					
ANR	91220	ExpressionStatement	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"	4100:2:104709:104766	90872	6	True				
ANR	91221	AssignmentExpression	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"		90872	0		=			
ANR	91222	PtrMemberAccess	g -> layout		90872	0					
ANR	91223	Identifier	g		90872	0					
ANR	91224	Identifier	layout		90872	1					
ANR	91225	CallExpression	"r_config_get_i ( core -> config , ""graph.layout"" )"		90872	1					
ANR	91226	Callee	r_config_get_i		90872	0					
ANR	91227	Identifier	r_config_get_i		90872	0					
ANR	91228	ArgumentList	core -> config		90872	1					
ANR	91229	Argument	core -> config		90872	0					
ANR	91230	PtrMemberAccess	core -> config		90872	0					
ANR	91231	Identifier	core		90872	0					
ANR	91232	Identifier	config		90872	1					
ANR	91233	Argument	"""graph.layout"""		90872	1					
ANR	91234	PrimaryExpression	"""graph.layout"""		90872	0					
ANR	91235	ExpressionStatement	"g -> dummy = r_config_get_i ( core -> config , ""graph.dummy"" )"	4101:2:104770:104825	90872	7	True				
ANR	91236	AssignmentExpression	"g -> dummy = r_config_get_i ( core -> config , ""graph.dummy"" )"		90872	0		=			
ANR	91237	PtrMemberAccess	g -> dummy		90872	0					
ANR	91238	Identifier	g		90872	0					
ANR	91239	Identifier	dummy		90872	1					
ANR	91240	CallExpression	"r_config_get_i ( core -> config , ""graph.dummy"" )"		90872	1					
ANR	91241	Callee	r_config_get_i		90872	0					
ANR	91242	Identifier	r_config_get_i		90872	0					
ANR	91243	ArgumentList	core -> config		90872	1					
ANR	91244	Argument	core -> config		90872	0					
ANR	91245	PtrMemberAccess	core -> config		90872	0					
ANR	91246	Identifier	core		90872	0					
ANR	91247	Identifier	config		90872	1					
ANR	91248	Argument	"""graph.dummy"""		90872	1					
ANR	91249	PrimaryExpression	"""graph.dummy"""		90872	0					
ANR	91250	ExpressionStatement	"g -> show_node_titles = r_config_get_i ( core -> config , ""graph.ntitles"" )"	4102:2:104829:104897	90872	8	True				
ANR	91251	AssignmentExpression	"g -> show_node_titles = r_config_get_i ( core -> config , ""graph.ntitles"" )"		90872	0		=			
ANR	91252	PtrMemberAccess	g -> show_node_titles		90872	0					
ANR	91253	Identifier	g		90872	0					
ANR	91254	Identifier	show_node_titles		90872	1					
ANR	91255	CallExpression	"r_config_get_i ( core -> config , ""graph.ntitles"" )"		90872	1					
ANR	91256	Callee	r_config_get_i		90872	0					
ANR	91257	Identifier	r_config_get_i		90872	0					
ANR	91258	ArgumentList	core -> config		90872	1					
ANR	91259	Argument	core -> config		90872	0					
ANR	91260	PtrMemberAccess	core -> config		90872	0					
ANR	91261	Identifier	core		90872	0					
ANR	91262	Identifier	config		90872	1					
ANR	91263	Argument	"""graph.ntitles"""		90872	1					
ANR	91264	PrimaryExpression	"""graph.ntitles"""		90872	0					
ANR	91265	ElseStatement	else		90872	0					
ANR	91266	CompoundStatement		57:8:1602:1602	90872	0					
ANR	91267	ExpressionStatement	o_can = g -> can	4104:2:104911:104925	90872	0	True				
ANR	91268	AssignmentExpression	o_can = g -> can		90872	0		=			
ANR	91269	Identifier	o_can		90872	0					
ANR	91270	PtrMemberAccess	g -> can		90872	1					
ANR	91271	Identifier	g		90872	0					
ANR	91272	Identifier	can		90872	1					
ANR	91273	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.interactive"" , false )"	4106:1:104931:104986	90872	22	True				
ANR	91274	CallExpression	"r_config_set_i ( core -> config , ""scr.interactive"" , false )"		90872	0					
ANR	91275	Callee	r_config_set_i		90872	0					
ANR	91276	Identifier	r_config_set_i		90872	0					
ANR	91277	ArgumentList	core -> config		90872	1					
ANR	91278	Argument	core -> config		90872	0					
ANR	91279	PtrMemberAccess	core -> config		90872	0					
ANR	91280	Identifier	core		90872	0					
ANR	91281	Identifier	config		90872	1					
ANR	91282	Argument	"""scr.interactive"""		90872	1					
ANR	91283	PrimaryExpression	"""scr.interactive"""		90872	0					
ANR	91284	Argument	false		90872	2					
ANR	91285	Identifier	false		90872	0					
ANR	91286	ExpressionStatement	g -> can = can	4107:1:104989:105001	90872	23	True				
ANR	91287	AssignmentExpression	g -> can = can		90872	0		=			
ANR	91288	PtrMemberAccess	g -> can		90872	0					
ANR	91289	Identifier	g		90872	0					
ANR	91290	Identifier	can		90872	1					
ANR	91291	Identifier	can		90872	1					
ANR	91292	ExpressionStatement	"g -> movspeed = r_config_get_i ( core -> config , ""graph.scroll"" )"	4108:1:105004:105063	90872	24	True				
ANR	91293	AssignmentExpression	"g -> movspeed = r_config_get_i ( core -> config , ""graph.scroll"" )"		90872	0		=			
ANR	91294	PtrMemberAccess	g -> movspeed		90872	0					
ANR	91295	Identifier	g		90872	0					
ANR	91296	Identifier	movspeed		90872	1					
ANR	91297	CallExpression	"r_config_get_i ( core -> config , ""graph.scroll"" )"		90872	1					
ANR	91298	Callee	r_config_get_i		90872	0					
ANR	91299	Identifier	r_config_get_i		90872	0					
ANR	91300	ArgumentList	core -> config		90872	1					
ANR	91301	Argument	core -> config		90872	0					
ANR	91302	PtrMemberAccess	core -> config		90872	0					
ANR	91303	Identifier	core		90872	0					
ANR	91304	Identifier	config		90872	1					
ANR	91305	Argument	"""graph.scroll"""		90872	1					
ANR	91306	PrimaryExpression	"""graph.scroll"""		90872	0					
ANR	91307	ExpressionStatement	"g -> show_node_titles = r_config_get_i ( core -> config , ""graph.ntitles"" )"	4109:1:105066:105134	90872	25	True				
ANR	91308	AssignmentExpression	"g -> show_node_titles = r_config_get_i ( core -> config , ""graph.ntitles"" )"		90872	0		=			
ANR	91309	PtrMemberAccess	g -> show_node_titles		90872	0					
ANR	91310	Identifier	g		90872	0					
ANR	91311	Identifier	show_node_titles		90872	1					
ANR	91312	CallExpression	"r_config_get_i ( core -> config , ""graph.ntitles"" )"		90872	1					
ANR	91313	Callee	r_config_get_i		90872	0					
ANR	91314	Identifier	r_config_get_i		90872	0					
ANR	91315	ArgumentList	core -> config		90872	1					
ANR	91316	Argument	core -> config		90872	0					
ANR	91317	PtrMemberAccess	core -> config		90872	0					
ANR	91318	Identifier	core		90872	0					
ANR	91319	Identifier	config		90872	1					
ANR	91320	Argument	"""graph.ntitles"""		90872	1					
ANR	91321	PrimaryExpression	"""graph.ntitles"""		90872	0					
ANR	91322	ExpressionStatement	"g -> show_node_body = r_config_get_i ( core -> config , ""graph.body"" )"	4110:1:105137:105200	90872	26	True				
ANR	91323	AssignmentExpression	"g -> show_node_body = r_config_get_i ( core -> config , ""graph.body"" )"		90872	0		=			
ANR	91324	PtrMemberAccess	g -> show_node_body		90872	0					
ANR	91325	Identifier	g		90872	0					
ANR	91326	Identifier	show_node_body		90872	1					
ANR	91327	CallExpression	"r_config_get_i ( core -> config , ""graph.body"" )"		90872	1					
ANR	91328	Callee	r_config_get_i		90872	0					
ANR	91329	Identifier	r_config_get_i		90872	0					
ANR	91330	ArgumentList	core -> config		90872	1					
ANR	91331	Argument	core -> config		90872	0					
ANR	91332	PtrMemberAccess	core -> config		90872	0					
ANR	91333	Identifier	core		90872	0					
ANR	91334	Identifier	config		90872	1					
ANR	91335	Argument	"""graph.body"""		90872	1					
ANR	91336	PrimaryExpression	"""graph.body"""		90872	0					
ANR	91337	ExpressionStatement	"g -> show_node_bubble = r_config_get_i ( core -> config , ""graph.bubble"" )"	4111:1:105203:105270	90872	27	True				
ANR	91338	AssignmentExpression	"g -> show_node_bubble = r_config_get_i ( core -> config , ""graph.bubble"" )"		90872	0		=			
ANR	91339	PtrMemberAccess	g -> show_node_bubble		90872	0					
ANR	91340	Identifier	g		90872	0					
ANR	91341	Identifier	show_node_bubble		90872	1					
ANR	91342	CallExpression	"r_config_get_i ( core -> config , ""graph.bubble"" )"		90872	1					
ANR	91343	Callee	r_config_get_i		90872	0					
ANR	91344	Identifier	r_config_get_i		90872	0					
ANR	91345	ArgumentList	core -> config		90872	1					
ANR	91346	Argument	core -> config		90872	0					
ANR	91347	PtrMemberAccess	core -> config		90872	0					
ANR	91348	Identifier	core		90872	0					
ANR	91349	Identifier	config		90872	1					
ANR	91350	Argument	"""graph.bubble"""		90872	1					
ANR	91351	PrimaryExpression	"""graph.bubble"""		90872	0					
ANR	91352	ExpressionStatement	g -> on_curnode_change = ( RANodeCallback ) seek_to_node	4112:1:105273:105325	90872	28	True				
ANR	91353	AssignmentExpression	g -> on_curnode_change = ( RANodeCallback ) seek_to_node		90872	0		=			
ANR	91354	PtrMemberAccess	g -> on_curnode_change		90872	0					
ANR	91355	Identifier	g		90872	0					
ANR	91356	Identifier	on_curnode_change		90872	1					
ANR	91357	CastExpression	( RANodeCallback ) seek_to_node		90872	1					
ANR	91358	CastTarget	RANodeCallback		90872	0					
ANR	91359	Identifier	seek_to_node		90872	1					
ANR	91360	ExpressionStatement	g -> on_curnode_change_data = core	4113:1:105328:105360	90872	29	True				
ANR	91361	AssignmentExpression	g -> on_curnode_change_data = core		90872	0		=			
ANR	91362	PtrMemberAccess	g -> on_curnode_change_data		90872	0					
ANR	91363	Identifier	g		90872	0					
ANR	91364	Identifier	on_curnode_change_data		90872	1					
ANR	91365	Identifier	core		90872	1					
ANR	91366	ExpressionStatement	"g -> edgemode = r_config_get_i ( core -> config , ""graph.edges"" )"	4114:1:105363:105421	90872	30	True				
ANR	91367	AssignmentExpression	"g -> edgemode = r_config_get_i ( core -> config , ""graph.edges"" )"		90872	0		=			
ANR	91368	PtrMemberAccess	g -> edgemode		90872	0					
ANR	91369	Identifier	g		90872	0					
ANR	91370	Identifier	edgemode		90872	1					
ANR	91371	CallExpression	"r_config_get_i ( core -> config , ""graph.edges"" )"		90872	1					
ANR	91372	Callee	r_config_get_i		90872	0					
ANR	91373	Identifier	r_config_get_i		90872	0					
ANR	91374	ArgumentList	core -> config		90872	1					
ANR	91375	Argument	core -> config		90872	0					
ANR	91376	PtrMemberAccess	core -> config		90872	0					
ANR	91377	Identifier	core		90872	0					
ANR	91378	Identifier	config		90872	1					
ANR	91379	Argument	"""graph.edges"""		90872	1					
ANR	91380	PrimaryExpression	"""graph.edges"""		90872	0					
ANR	91381	ExpressionStatement	"g -> hints = r_config_get_i ( core -> config , ""graph.hints"" )"	4115:1:105424:105479	90872	31	True				
ANR	91382	AssignmentExpression	"g -> hints = r_config_get_i ( core -> config , ""graph.hints"" )"		90872	0		=			
ANR	91383	PtrMemberAccess	g -> hints		90872	0					
ANR	91384	Identifier	g		90872	0					
ANR	91385	Identifier	hints		90872	1					
ANR	91386	CallExpression	"r_config_get_i ( core -> config , ""graph.hints"" )"		90872	1					
ANR	91387	Callee	r_config_get_i		90872	0					
ANR	91388	Identifier	r_config_get_i		90872	0					
ANR	91389	ArgumentList	core -> config		90872	1					
ANR	91390	Argument	core -> config		90872	0					
ANR	91391	PtrMemberAccess	core -> config		90872	0					
ANR	91392	Identifier	core		90872	0					
ANR	91393	Identifier	config		90872	1					
ANR	91394	Argument	"""graph.hints"""		90872	1					
ANR	91395	PrimaryExpression	"""graph.hints"""		90872	0					
ANR	91396	ExpressionStatement	g -> is_interactive = is_interactive	4116:1:105482:105516	90872	32	True				
ANR	91397	AssignmentExpression	g -> is_interactive = is_interactive		90872	0		=			
ANR	91398	PtrMemberAccess	g -> is_interactive		90872	0					
ANR	91399	Identifier	g		90872	0					
ANR	91400	Identifier	is_interactive		90872	1					
ANR	91401	Identifier	is_interactive		90872	1					
ANR	91402	IdentifierDeclStatement	"bool asm_comments = r_config_get_i ( core -> config , ""asm.comments"" ) ;"	4117:1:105519:105584	90872	33	True				
ANR	91403	IdentifierDecl	"asm_comments = r_config_get_i ( core -> config , ""asm.comments"" )"		90872	0					
ANR	91404	IdentifierDeclType	bool		90872	0					
ANR	91405	Identifier	asm_comments		90872	1					
ANR	91406	AssignmentExpression	"asm_comments = r_config_get_i ( core -> config , ""asm.comments"" )"		90872	2		=			
ANR	91407	Identifier	asm_comments		90872	0					
ANR	91408	CallExpression	"r_config_get_i ( core -> config , ""asm.comments"" )"		90872	1					
ANR	91409	Callee	r_config_get_i		90872	0					
ANR	91410	Identifier	r_config_get_i		90872	0					
ANR	91411	ArgumentList	core -> config		90872	1					
ANR	91412	Argument	core -> config		90872	0					
ANR	91413	PtrMemberAccess	core -> config		90872	0					
ANR	91414	Identifier	core		90872	0					
ANR	91415	Identifier	config		90872	1					
ANR	91416	Argument	"""asm.comments"""		90872	1					
ANR	91417	PrimaryExpression	"""asm.comments"""		90872	0					
ANR	91418	ExpressionStatement	"r_config_set ( core -> config , ""asm.comments"" , r_str_bool ( r_config_get_i ( core -> config , ""graph.comments"" ) ) )"	4118:1:105587:105694	90872	34	True				
ANR	91419	CallExpression	"r_config_set ( core -> config , ""asm.comments"" , r_str_bool ( r_config_get_i ( core -> config , ""graph.comments"" ) ) )"		90872	0					
ANR	91420	Callee	r_config_set		90872	0					
ANR	91421	Identifier	r_config_set		90872	0					
ANR	91422	ArgumentList	core -> config		90872	1					
ANR	91423	Argument	core -> config		90872	0					
ANR	91424	PtrMemberAccess	core -> config		90872	0					
ANR	91425	Identifier	core		90872	0					
ANR	91426	Identifier	config		90872	1					
ANR	91427	Argument	"""asm.comments"""		90872	1					
ANR	91428	PrimaryExpression	"""asm.comments"""		90872	0					
ANR	91429	Argument	"r_str_bool ( r_config_get_i ( core -> config , ""graph.comments"" ) )"		90872	2					
ANR	91430	CallExpression	"r_str_bool ( r_config_get_i ( core -> config , ""graph.comments"" ) )"		90872	0					
ANR	91431	Callee	r_str_bool		90872	0					
ANR	91432	Identifier	r_str_bool		90872	0					
ANR	91433	ArgumentList	"r_config_get_i ( core -> config , ""graph.comments"" )"		90872	1					
ANR	91434	Argument	"r_config_get_i ( core -> config , ""graph.comments"" )"		90872	0					
ANR	91435	CallExpression	"r_config_get_i ( core -> config , ""graph.comments"" )"		90872	0					
ANR	91436	Callee	r_config_get_i		90872	0					
ANR	91437	Identifier	r_config_get_i		90872	0					
ANR	91438	ArgumentList	core -> config		90872	1					
ANR	91439	Argument	core -> config		90872	0					
ANR	91440	PtrMemberAccess	core -> config		90872	0					
ANR	91441	Identifier	core		90872	0					
ANR	91442	Identifier	config		90872	1					
ANR	91443	Argument	"""graph.comments"""		90872	1					
ANR	91444	PrimaryExpression	"""graph.comments"""		90872	0					
ANR	91445	ExpressionStatement	core -> is_asmqjmps_letter = true	4122:1:105748:105779	90872	35	True				
ANR	91446	AssignmentExpression	core -> is_asmqjmps_letter = true		90872	0		=			
ANR	91447	PtrMemberAccess	core -> is_asmqjmps_letter		90872	0					
ANR	91448	Identifier	core		90872	0					
ANR	91449	Identifier	is_asmqjmps_letter		90872	1					
ANR	91450	Identifier	true		90872	1					
ANR	91451	ExpressionStatement	core -> vmode = true	4123:1:105782:105800	90872	36	True				
ANR	91452	AssignmentExpression	core -> vmode = true		90872	0		=			
ANR	91453	PtrMemberAccess	core -> vmode		90872	0					
ANR	91454	Identifier	core		90872	0					
ANR	91455	Identifier	vmode		90872	1					
ANR	91456	Identifier	true		90872	1					
ANR	91457	Statement	grd	4125:1:105804:105806	90872	37	True				
ANR	91458	Statement	=	4125:5:105808:105808	90872	38	True				
ANR	91459	Statement	R_NEW0	4125:7:105810:105815	90872	39	True				
ANR	91460	Statement	(	4125:14:105817:105817	90872	40	True				
ANR	91461	Statement	struct	4125:15:105818:105823	90872	41	True				
ANR	91462	Statement	agraph_refresh_data	4125:22:105825:105843	90872	42	True				
ANR	91463	Statement	)	4125:41:105844:105844	90872	43	True				
ANR	91464	ExpressionStatement		4125:42:105845:105845	90872	44	True				
ANR	91465	IfStatement	if ( ! grd )		90872	45					
ANR	91466	Condition	! grd	4126:5:105852:105855	90872	0	True				
ANR	91467	UnaryOperationExpression	! grd		90872	0					
ANR	91468	UnaryOperator	!		90872	0					
ANR	91469	Identifier	grd		90872	1					
ANR	91470	CompoundStatement		80:11:2553:2553	90872	1					
ANR	91471	ExpressionStatement	r_cons_canvas_free ( can )	4127:2:105862:105886	90872	0	True				
ANR	91472	CallExpression	r_cons_canvas_free ( can )		90872	0					
ANR	91473	Callee	r_cons_canvas_free		90872	0					
ANR	91474	Identifier	r_cons_canvas_free		90872	0					
ANR	91475	ArgumentList	can		90872	1					
ANR	91476	Argument	can		90872	0					
ANR	91477	Identifier	can		90872	0					
ANR	91478	ExpressionStatement	r_config_hold_restore ( hc )	4128:2:105890:105916	90872	1	True				
ANR	91479	CallExpression	r_config_hold_restore ( hc )		90872	0					
ANR	91480	Callee	r_config_hold_restore		90872	0					
ANR	91481	Identifier	r_config_hold_restore		90872	0					
ANR	91482	ArgumentList	hc		90872	1					
ANR	91483	Argument	hc		90872	0					
ANR	91484	Identifier	hc		90872	0					
ANR	91485	ExpressionStatement	r_config_hold_free ( hc )	4129:2:105920:105943	90872	2	True				
ANR	91486	CallExpression	r_config_hold_free ( hc )		90872	0					
ANR	91487	Callee	r_config_hold_free		90872	0					
ANR	91488	Identifier	r_config_hold_free		90872	0					
ANR	91489	ArgumentList	hc		90872	1					
ANR	91490	Argument	hc		90872	0					
ANR	91491	Identifier	hc		90872	0					
ANR	91492	ExpressionStatement	r_agraph_free ( g )	4130:2:105947:105964	90872	3	True				
ANR	91493	CallExpression	r_agraph_free ( g )		90872	0					
ANR	91494	Callee	r_agraph_free		90872	0					
ANR	91495	Identifier	r_agraph_free		90872	0					
ANR	91496	ArgumentList	g		90872	1					
ANR	91497	Argument	g		90872	0					
ANR	91498	Identifier	g		90872	0					
ANR	91499	ReturnStatement	return false ;	4131:2:105968:105980	90872	4	True				
ANR	91500	Identifier	false		90872	0					
ANR	91501	ExpressionStatement	grd -> g = g	4133:1:105986:105996	90872	46	True				
ANR	91502	AssignmentExpression	grd -> g = g		90872	0		=			
ANR	91503	PtrMemberAccess	grd -> g		90872	0					
ANR	91504	Identifier	grd		90872	0					
ANR	91505	Identifier	g		90872	1					
ANR	91506	Identifier	g		90872	1					
ANR	91507	ExpressionStatement	grd -> fs = is_interactive == 1	4134:1:105999:106028	90872	47	True				
ANR	91508	AssignmentExpression	grd -> fs = is_interactive == 1		90872	0		=			
ANR	91509	PtrMemberAccess	grd -> fs		90872	0					
ANR	91510	Identifier	grd		90872	0					
ANR	91511	Identifier	fs		90872	1					
ANR	91512	EqualityExpression	is_interactive == 1		90872	1		==			
ANR	91513	Identifier	is_interactive		90872	0					
ANR	91514	PrimaryExpression	1		90872	1					
ANR	91515	ExpressionStatement	grd -> core = core	4135:1:106031:106047	90872	48	True				
ANR	91516	AssignmentExpression	grd -> core = core		90872	0		=			
ANR	91517	PtrMemberAccess	grd -> core		90872	0					
ANR	91518	Identifier	grd		90872	0					
ANR	91519	Identifier	core		90872	1					
ANR	91520	Identifier	core		90872	1					
ANR	91521	ExpressionStatement	grd -> follow_offset = _fcn ? false : true	4136:1:106050:106090	90872	49	True				
ANR	91522	AssignmentExpression	grd -> follow_offset = _fcn ? false : true		90872	0		=			
ANR	91523	PtrMemberAccess	grd -> follow_offset		90872	0					
ANR	91524	Identifier	grd		90872	0					
ANR	91525	Identifier	follow_offset		90872	1					
ANR	91526	ConditionalExpression	_fcn ? false : true		90872	1					
ANR	91527	Condition	_fcn		90872	0					
ANR	91528	Identifier	_fcn		90872	0					
ANR	91529	Identifier	false		90872	1					
ANR	91530	Identifier	true		90872	2					
ANR	91531	ExpressionStatement	grd -> fcn = fcn != NULL ? & fcn : NULL	4137:1:106093:106127	90872	50	True				
ANR	91532	AssignmentExpression	grd -> fcn = fcn != NULL ? & fcn : NULL		90872	0		=			
ANR	91533	PtrMemberAccess	grd -> fcn		90872	0					
ANR	91534	Identifier	grd		90872	0					
ANR	91535	Identifier	fcn		90872	1					
ANR	91536	ConditionalExpression	fcn != NULL ? & fcn : NULL		90872	1					
ANR	91537	Condition	fcn != NULL		90872	0					
ANR	91538	EqualityExpression	fcn != NULL		90872	0		!=			
ANR	91539	Identifier	fcn		90872	0					
ANR	91540	Identifier	NULL		90872	1					
ANR	91541	UnaryOperationExpression	& fcn		90872	1					
ANR	91542	UnaryOperator	&		90872	0					
ANR	91543	Identifier	fcn		90872	1					
ANR	91544	Identifier	NULL		90872	2					
ANR	91545	ExpressionStatement	ret = agraph_refresh ( grd )	4138:1:106130:106156	90872	51	True				
ANR	91546	AssignmentExpression	ret = agraph_refresh ( grd )		90872	0		=			
ANR	91547	Identifier	ret		90872	0					
ANR	91548	CallExpression	agraph_refresh ( grd )		90872	1					
ANR	91549	Callee	agraph_refresh		90872	0					
ANR	91550	Identifier	agraph_refresh		90872	0					
ANR	91551	ArgumentList	grd		90872	1					
ANR	91552	Argument	grd		90872	0					
ANR	91553	Identifier	grd		90872	0					
ANR	91554	IfStatement	if ( ! ret || is_interactive != 1 )		90872	52					
ANR	91555	Condition	! ret || is_interactive != 1	4139:5:106163:106189	90872	0	True				
ANR	91556	OrExpression	! ret || is_interactive != 1		90872	0		||			
ANR	91557	UnaryOperationExpression	! ret		90872	0					
ANR	91558	UnaryOperator	!		90872	0					
ANR	91559	Identifier	ret		90872	1					
ANR	91560	EqualityExpression	is_interactive != 1		90872	1		!=			
ANR	91561	Identifier	is_interactive		90872	0					
ANR	91562	PrimaryExpression	1		90872	1					
ANR	91563	CompoundStatement		93:34:2887:2887	90872	1					
ANR	91564	ExpressionStatement	r_cons_newline ( )	4140:2:106196:106213	90872	0	True				
ANR	91565	CallExpression	r_cons_newline ( )		90872	0					
ANR	91566	Callee	r_cons_newline		90872	0					
ANR	91567	Identifier	r_cons_newline		90872	0					
ANR	91568	ArgumentList			90872	1					
ANR	91569	ExpressionStatement	exit_graph = true	4141:2:106217:106234	90872	1	True				
ANR	91570	AssignmentExpression	exit_graph = true		90872	0		=			
ANR	91571	Identifier	exit_graph		90872	0					
ANR	91572	Identifier	true		90872	1					
ANR	91573	ExpressionStatement	is_error = ! ret	4142:2:106238:106253	90872	2	True				
ANR	91574	AssignmentExpression	is_error = ! ret		90872	0		=			
ANR	91575	Identifier	is_error		90872	0					
ANR	91576	UnaryOperationExpression	! ret		90872	1					
ANR	91577	UnaryOperator	!		90872	0					
ANR	91578	Identifier	ret		90872	1					
ANR	91579	ExpressionStatement	core -> cons -> event_resize = NULL	4145:1:106260:106291	90872	53	True				
ANR	91580	AssignmentExpression	core -> cons -> event_resize = NULL		90872	0		=			
ANR	91581	PtrMemberAccess	core -> cons -> event_resize		90872	0					
ANR	91582	PtrMemberAccess	core -> cons		90872	0					
ANR	91583	Identifier	core		90872	0					
ANR	91584	Identifier	cons		90872	1					
ANR	91585	Identifier	event_resize		90872	1					
ANR	91586	Identifier	NULL		90872	1					
ANR	91587	ExpressionStatement	core -> cons -> event_data = grd	4146:1:106335:106363	90872	54	True				
ANR	91588	AssignmentExpression	core -> cons -> event_data = grd		90872	0		=			
ANR	91589	PtrMemberAccess	core -> cons -> event_data		90872	0					
ANR	91590	PtrMemberAccess	core -> cons		90872	0					
ANR	91591	Identifier	core		90872	0					
ANR	91592	Identifier	cons		90872	1					
ANR	91593	Identifier	event_data		90872	1					
ANR	91594	Identifier	grd		90872	1					
ANR	91595	ExpressionStatement	core -> cons -> event_resize = ( RConsEvent ) agraph_refresh_oneshot	4147:1:106366:106428	90872	55	True				
ANR	91596	AssignmentExpression	core -> cons -> event_resize = ( RConsEvent ) agraph_refresh_oneshot		90872	0		=			
ANR	91597	PtrMemberAccess	core -> cons -> event_resize		90872	0					
ANR	91598	PtrMemberAccess	core -> cons		90872	0					
ANR	91599	Identifier	core		90872	0					
ANR	91600	Identifier	cons		90872	1					
ANR	91601	Identifier	event_resize		90872	1					
ANR	91602	CastExpression	( RConsEvent ) agraph_refresh_oneshot		90872	1					
ANR	91603	CastTarget	RConsEvent		90872	0					
ANR	91604	Identifier	agraph_refresh_oneshot		90872	1					
ANR	91605	ExpressionStatement	"r_cons_break_push ( NULL , NULL )"	4149:1:106432:106462	90872	56	True				
ANR	91606	CallExpression	"r_cons_break_push ( NULL , NULL )"		90872	0					
ANR	91607	Callee	r_cons_break_push		90872	0					
ANR	91608	Identifier	r_cons_break_push		90872	0					
ANR	91609	ArgumentList	NULL		90872	1					
ANR	91610	Argument	NULL		90872	0					
ANR	91611	Identifier	NULL		90872	0					
ANR	91612	Argument	NULL		90872	1					
ANR	91613	Identifier	NULL		90872	0					
ANR	91614	WhileStatement	while ( ! exit_graph && ! is_error && ! r_cons_is_breaked ( ) )		90872	57					
ANR	91615	Condition	! exit_graph && ! is_error && ! r_cons_is_breaked ( )	4151:8:106473:106521	90872	0	True				
ANR	91616	AndExpression	! exit_graph && ! is_error && ! r_cons_is_breaked ( )		90872	0		&&			
ANR	91617	UnaryOperationExpression	! exit_graph		90872	0					
ANR	91618	UnaryOperator	!		90872	0					
ANR	91619	Identifier	exit_graph		90872	1					
ANR	91620	AndExpression	! is_error && ! r_cons_is_breaked ( )		90872	1		&&			
ANR	91621	UnaryOperationExpression	! is_error		90872	0					
ANR	91622	UnaryOperator	!		90872	0					
ANR	91623	Identifier	is_error		90872	1					
ANR	91624	UnaryOperationExpression	! r_cons_is_breaked ( )		90872	1					
ANR	91625	UnaryOperator	!		90872	0					
ANR	91626	CallExpression	r_cons_is_breaked ( )		90872	1					
ANR	91627	Callee	r_cons_is_breaked		90872	0					
ANR	91628	Identifier	r_cons_is_breaked		90872	0					
ANR	91629	ArgumentList			90872	1					
ANR	91630	CompoundStatement		136:2:3912:3927	90872	1					
ANR	91631	ExpressionStatement	w = r_cons_get_size ( & h )	4152:2:106528:106552	90872	0	True				
ANR	91632	AssignmentExpression	w = r_cons_get_size ( & h )		90872	0		=			
ANR	91633	Identifier	w		90872	0					
ANR	91634	CallExpression	r_cons_get_size ( & h )		90872	1					
ANR	91635	Callee	r_cons_get_size		90872	0					
ANR	91636	Identifier	r_cons_get_size		90872	0					
ANR	91637	ArgumentList	& h		90872	1					
ANR	91638	Argument	& h		90872	0					
ANR	91639	UnaryOperationExpression	& h		90872	0					
ANR	91640	UnaryOperator	&		90872	0					
ANR	91641	Identifier	h		90872	1					
ANR	91642	ExpressionStatement	"invscroll = r_config_get_i ( core -> config , ""graph.invscroll"" )"	4153:2:106556:106616	90872	1	True				
ANR	91643	AssignmentExpression	"invscroll = r_config_get_i ( core -> config , ""graph.invscroll"" )"		90872	0		=			
ANR	91644	Identifier	invscroll		90872	0					
ANR	91645	CallExpression	"r_config_get_i ( core -> config , ""graph.invscroll"" )"		90872	1					
ANR	91646	Callee	r_config_get_i		90872	0					
ANR	91647	Identifier	r_config_get_i		90872	0					
ANR	91648	ArgumentList	core -> config		90872	1					
ANR	91649	Argument	core -> config		90872	0					
ANR	91650	PtrMemberAccess	core -> config		90872	0					
ANR	91651	Identifier	core		90872	0					
ANR	91652	Identifier	config		90872	1					
ANR	91653	Argument	"""graph.invscroll"""		90872	1					
ANR	91654	PrimaryExpression	"""graph.invscroll"""		90872	0					
ANR	91655	ExpressionStatement	ret = agraph_refresh ( grd )	4154:2:106620:106646	90872	2	True				
ANR	91656	AssignmentExpression	ret = agraph_refresh ( grd )		90872	0		=			
ANR	91657	Identifier	ret		90872	0					
ANR	91658	CallExpression	agraph_refresh ( grd )		90872	1					
ANR	91659	Callee	agraph_refresh		90872	0					
ANR	91660	Identifier	agraph_refresh		90872	0					
ANR	91661	ArgumentList	grd		90872	1					
ANR	91662	Argument	grd		90872	0					
ANR	91663	Identifier	grd		90872	0					
ANR	91664	IfStatement	if ( ! ret )		90872	3					
ANR	91665	Condition	! ret	4156:6:106655:106658	90872	0	True				
ANR	91666	UnaryOperationExpression	! ret		90872	0					
ANR	91667	UnaryOperator	!		90872	0					
ANR	91668	Identifier	ret		90872	1					
ANR	91669	CompoundStatement		110:12:3356:3356	90872	1					
ANR	91670	ExpressionStatement	is_error = true	4157:3:106666:106681	90872	0	True				
ANR	91671	AssignmentExpression	is_error = true		90872	0		=			
ANR	91672	Identifier	is_error		90872	0					
ANR	91673	Identifier	true		90872	1					
ANR	91674	BreakStatement	break ;	4158:3:106686:106691	90872	1	True				
ANR	91675	ExpressionStatement	"showcursor ( core , false )"	4160:2:106699:106723	90872	4	True				
ANR	91676	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	91677	Callee	showcursor		90872	0					
ANR	91678	Identifier	showcursor		90872	0					
ANR	91679	ArgumentList	core		90872	1					
ANR	91680	Argument	core		90872	0					
ANR	91681	Identifier	core		90872	0					
ANR	91682	Argument	false		90872	1					
ANR	91683	Identifier	false		90872	0					
ANR	91684	ExpressionStatement	okey = r_cons_readchar ( )	4163:2:106760:106785	90872	5	True				
ANR	91685	AssignmentExpression	okey = r_cons_readchar ( )		90872	0		=			
ANR	91686	Identifier	okey		90872	0					
ANR	91687	CallExpression	r_cons_readchar ( )		90872	1					
ANR	91688	Callee	r_cons_readchar		90872	0					
ANR	91689	Identifier	r_cons_readchar		90872	0					
ANR	91690	ArgumentList			90872	1					
ANR	91691	ExpressionStatement	key = r_cons_arrow_to_hjkl ( okey )	4164:2:106789:106822	90872	6	True				
ANR	91692	AssignmentExpression	key = r_cons_arrow_to_hjkl ( okey )		90872	0		=			
ANR	91693	Identifier	key		90872	0					
ANR	91694	CallExpression	r_cons_arrow_to_hjkl ( okey )		90872	1					
ANR	91695	Callee	r_cons_arrow_to_hjkl		90872	0					
ANR	91696	Identifier	r_cons_arrow_to_hjkl		90872	0					
ANR	91697	ArgumentList	okey		90872	1					
ANR	91698	Argument	okey		90872	0					
ANR	91699	Identifier	okey		90872	0					
ANR	91700	IfStatement	if ( core -> cons -> mouse_event )		90872	7					
ANR	91701	Condition	core -> cons -> mouse_event	4166:6:106831:106853	90872	0	True				
ANR	91702	PtrMemberAccess	core -> cons -> mouse_event		90872	0					
ANR	91703	PtrMemberAccess	core -> cons		90872	0					
ANR	91704	Identifier	core		90872	0					
ANR	91705	Identifier	cons		90872	1					
ANR	91706	Identifier	mouse_event		90872	1					
ANR	91707	CompoundStatement		120:31:3551:3551	90872	1					
ANR	91708	ExpressionStatement	"movspeed = r_config_get_i ( core -> config , ""scr.wheel.speed"" )"	4167:3:106861:106920	90872	0	True				
ANR	91709	AssignmentExpression	"movspeed = r_config_get_i ( core -> config , ""scr.wheel.speed"" )"		90872	0		=			
ANR	91710	Identifier	movspeed		90872	0					
ANR	91711	CallExpression	"r_config_get_i ( core -> config , ""scr.wheel.speed"" )"		90872	1					
ANR	91712	Callee	r_config_get_i		90872	0					
ANR	91713	Identifier	r_config_get_i		90872	0					
ANR	91714	ArgumentList	core -> config		90872	1					
ANR	91715	Argument	core -> config		90872	0					
ANR	91716	PtrMemberAccess	core -> config		90872	0					
ANR	91717	Identifier	core		90872	0					
ANR	91718	Identifier	config		90872	1					
ANR	91719	Argument	"""scr.wheel.speed"""		90872	1					
ANR	91720	PrimaryExpression	"""scr.wheel.speed"""		90872	0					
ANR	91721	SwitchStatement	switch ( key )		90872	1					
ANR	91722	Condition	key	4168:11:106933:106935	90872	0	True				
ANR	91723	Identifier	key		90872	0					
ANR	91724	CompoundStatement		122:16:3633:3633	90872	1					
ANR	91725	Label	case 'j' :	4169:3:106943:106951	90872	0	True				
ANR	91726	Label	case 'k' :	4170:3:106956:106964	90872	1	True				
ANR	91727	SwitchStatement	switch ( mousemode )		90872	2					
ANR	91728	Condition	mousemode	4171:12:106978:106986	90872	0	True				
ANR	91729	Identifier	mousemode		90872	0					
ANR	91730	CompoundStatement		125:23:3684:3684	90872	1					
ANR	91731	Label	case 0 :	4172:4:106995:107001	90872	0	True				
ANR	91732	BreakStatement	break ;	4172:12:107003:107008	90872	1	True				
ANR	91733	Label	case 1 :	4173:4:107014:107020	90872	2	True				
ANR	91734	ExpressionStatement	key = key == 'k' ? 'h' : 'l'	4173:12:107022:107048	90872	3	True				
ANR	91735	AssignmentExpression	key = key == 'k' ? 'h' : 'l'		90872	0		=			
ANR	91736	Identifier	key		90872	0					
ANR	91737	ConditionalExpression	key == 'k' ? 'h' : 'l'		90872	1					
ANR	91738	Condition	key == 'k'		90872	0					
ANR	91739	EqualityExpression	key == 'k'		90872	0		==			
ANR	91740	Identifier	key		90872	0					
ANR	91741	PrimaryExpression	'k'		90872	1					
ANR	91742	PrimaryExpression	'h'		90872	1					
ANR	91743	PrimaryExpression	'l'		90872	2					
ANR	91744	BreakStatement	break ;	4173:40:107050:107055	90872	4	True				
ANR	91745	Label	case 2 :	4174:4:107061:107067	90872	5	True				
ANR	91746	ExpressionStatement	key = key == 'k' ? 'J' : 'K'	4174:12:107069:107095	90872	6	True				
ANR	91747	AssignmentExpression	key = key == 'k' ? 'J' : 'K'		90872	0		=			
ANR	91748	Identifier	key		90872	0					
ANR	91749	ConditionalExpression	key == 'k' ? 'J' : 'K'		90872	1					
ANR	91750	Condition	key == 'k'		90872	0					
ANR	91751	EqualityExpression	key == 'k'		90872	0		==			
ANR	91752	Identifier	key		90872	0					
ANR	91753	PrimaryExpression	'k'		90872	1					
ANR	91754	PrimaryExpression	'J'		90872	1					
ANR	91755	PrimaryExpression	'K'		90872	2					
ANR	91756	BreakStatement	break ;	4174:40:107097:107102	90872	7	True				
ANR	91757	Label	case 3 :	4175:4:107108:107114	90872	8	True				
ANR	91758	ExpressionStatement	key = key == 'k' ? 'L' : 'H'	4175:12:107116:107142	90872	9	True				
ANR	91759	AssignmentExpression	key = key == 'k' ? 'L' : 'H'		90872	0		=			
ANR	91760	Identifier	key		90872	0					
ANR	91761	ConditionalExpression	key == 'k' ? 'L' : 'H'		90872	1					
ANR	91762	Condition	key == 'k'		90872	0					
ANR	91763	EqualityExpression	key == 'k'		90872	0		==			
ANR	91764	Identifier	key		90872	0					
ANR	91765	PrimaryExpression	'k'		90872	1					
ANR	91766	PrimaryExpression	'L'		90872	1					
ANR	91767	PrimaryExpression	'H'		90872	2					
ANR	91768	BreakStatement	break ;	4175:40:107144:107149	90872	10	True				
ANR	91769	BreakStatement	break ;	4177:4:107161:107166	90872	3	True				
ANR	91770	ElseStatement	else		90872	0					
ANR	91771	CompoundStatement		133:9:3877:3877	90872	0					
ANR	91772	ExpressionStatement	movspeed = g -> movspeed	4180:3:107187:107209	90872	0	True				
ANR	91773	AssignmentExpression	movspeed = g -> movspeed		90872	0		=			
ANR	91774	Identifier	movspeed		90872	0					
ANR	91775	PtrMemberAccess	g -> movspeed		90872	1					
ANR	91776	Identifier	g		90872	0					
ANR	91777	Identifier	movspeed		90872	1					
ANR	91778	IdentifierDeclStatement	const char * cmd ;	4182:2:107217:107232	90872	8	True				
ANR	91779	IdentifierDecl	* cmd		90872	0					
ANR	91780	IdentifierDeclType	const char *		90872	0					
ANR	91781	Identifier	cmd		90872	1					
ANR	91782	SwitchStatement	switch ( key )		90872	9					
ANR	91783	Condition	key	4183:10:107244:107246	90872	0	True				
ANR	91784	Identifier	key		90872	0					
ANR	91785	CompoundStatement		137:15:3944:3944	90872	1					
ANR	91786	Label	case '-' :	4184:2:107253:107261	90872	0	True				
ANR	91787	ExpressionStatement	"agraph_set_zoom ( g , g -> zoom - ZOOM_STEP )"	4185:3:107266:107306	90872	1	True				
ANR	91788	CallExpression	"agraph_set_zoom ( g , g -> zoom - ZOOM_STEP )"		90872	0					
ANR	91789	Callee	agraph_set_zoom		90872	0					
ANR	91790	Identifier	agraph_set_zoom		90872	0					
ANR	91791	ArgumentList	g		90872	1					
ANR	91792	Argument	g		90872	0					
ANR	91793	Identifier	g		90872	0					
ANR	91794	Argument	g -> zoom - ZOOM_STEP		90872	1					
ANR	91795	AdditiveExpression	g -> zoom - ZOOM_STEP		90872	0		-			
ANR	91796	PtrMemberAccess	g -> zoom		90872	0					
ANR	91797	Identifier	g		90872	0					
ANR	91798	Identifier	zoom		90872	1					
ANR	91799	Identifier	ZOOM_STEP		90872	1					
ANR	91800	ExpressionStatement	g -> force_update_seek = true	4186:3:107311:107338	90872	2	True				
ANR	91801	AssignmentExpression	g -> force_update_seek = true		90872	0		=			
ANR	91802	PtrMemberAccess	g -> force_update_seek		90872	0					
ANR	91803	Identifier	g		90872	0					
ANR	91804	Identifier	force_update_seek		90872	1					
ANR	91805	Identifier	true		90872	1					
ANR	91806	BreakStatement	break ;	4187:3:107343:107348	90872	3	True				
ANR	91807	Label	case '+' :	4188:2:107352:107360	90872	4	True				
ANR	91808	ExpressionStatement	"agraph_set_zoom ( g , g -> zoom + ZOOM_STEP )"	4189:3:107365:107405	90872	5	True				
ANR	91809	CallExpression	"agraph_set_zoom ( g , g -> zoom + ZOOM_STEP )"		90872	0					
ANR	91810	Callee	agraph_set_zoom		90872	0					
ANR	91811	Identifier	agraph_set_zoom		90872	0					
ANR	91812	ArgumentList	g		90872	1					
ANR	91813	Argument	g		90872	0					
ANR	91814	Identifier	g		90872	0					
ANR	91815	Argument	g -> zoom + ZOOM_STEP		90872	1					
ANR	91816	AdditiveExpression	g -> zoom + ZOOM_STEP		90872	0		+			
ANR	91817	PtrMemberAccess	g -> zoom		90872	0					
ANR	91818	Identifier	g		90872	0					
ANR	91819	Identifier	zoom		90872	1					
ANR	91820	Identifier	ZOOM_STEP		90872	1					
ANR	91821	ExpressionStatement	g -> force_update_seek = true	4190:3:107410:107437	90872	6	True				
ANR	91822	AssignmentExpression	g -> force_update_seek = true		90872	0		=			
ANR	91823	PtrMemberAccess	g -> force_update_seek		90872	0					
ANR	91824	Identifier	g		90872	0					
ANR	91825	Identifier	force_update_seek		90872	1					
ANR	91826	Identifier	true		90872	1					
ANR	91827	BreakStatement	break ;	4191:3:107442:107447	90872	7	True				
ANR	91828	Label	case '0' :	4192:2:107451:107459	90872	8	True				
ANR	91829	ExpressionStatement	"agraph_set_zoom ( g , ZOOM_DEFAULT )"	4193:3:107464:107497	90872	9	True				
ANR	91830	CallExpression	"agraph_set_zoom ( g , ZOOM_DEFAULT )"		90872	0					
ANR	91831	Callee	agraph_set_zoom		90872	0					
ANR	91832	Identifier	agraph_set_zoom		90872	0					
ANR	91833	ArgumentList	g		90872	1					
ANR	91834	Argument	g		90872	0					
ANR	91835	Identifier	g		90872	0					
ANR	91836	Argument	ZOOM_DEFAULT		90872	1					
ANR	91837	Identifier	ZOOM_DEFAULT		90872	0					
ANR	91838	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4194:3:107502:107554	90872	10	True				
ANR	91839	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	91840	Callee	agraph_update_seek		90872	0					
ANR	91841	Identifier	agraph_update_seek		90872	0					
ANR	91842	ArgumentList	g		90872	1					
ANR	91843	Argument	g		90872	0					
ANR	91844	Identifier	g		90872	0					
ANR	91845	Argument	get_anode ( g -> curnode )		90872	1					
ANR	91846	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	91847	Callee	get_anode		90872	0					
ANR	91848	Identifier	get_anode		90872	0					
ANR	91849	ArgumentList	g -> curnode		90872	1					
ANR	91850	Argument	g -> curnode		90872	0					
ANR	91851	PtrMemberAccess	g -> curnode		90872	0					
ANR	91852	Identifier	g		90872	0					
ANR	91853	Identifier	curnode		90872	1					
ANR	91854	Argument	true		90872	2					
ANR	91855	Identifier	true		90872	0					
ANR	91856	BreakStatement	break ;	4196:3:107598:107603	90872	11	True				
ANR	91857	Label	case '=' :	4197:2:107607:107615	90872	12	True				
ANR	91858	CompoundStatement		155:3:4396:4456	90872	13					
ANR	91859	ExpressionStatement	"showcursor ( core , true )"	4199:3:107646:107669	90872	0	True				
ANR	91860	CallExpression	"showcursor ( core , true )"		90872	0					
ANR	91861	Callee	showcursor		90872	0					
ANR	91862	Identifier	showcursor		90872	0					
ANR	91863	ArgumentList	core		90872	1					
ANR	91864	Argument	core		90872	0					
ANR	91865	Identifier	core		90872	0					
ANR	91866	Argument	true		90872	1					
ANR	91867	Identifier	true		90872	0					
ANR	91868	IdentifierDeclStatement	const char * buf = NULL ;	4200:3:107674:107696	90872	1	True				
ANR	91869	IdentifierDecl	* buf = NULL		90872	0					
ANR	91870	IdentifierDeclType	const char *		90872	0					
ANR	91871	Identifier	buf		90872	1					
ANR	91872	AssignmentExpression	* buf = NULL		90872	2		=			
ANR	91873	Identifier	NULL		90872	0					
ANR	91874	Identifier	NULL		90872	1					
ANR	91875	IdentifierDeclStatement	"const char * cmd = r_config_get ( core -> config , ""cmd.gprompt"" ) ;"	4201:3:107701:107761	90872	2	True				
ANR	91876	IdentifierDecl	"* cmd = r_config_get ( core -> config , ""cmd.gprompt"" )"		90872	0					
ANR	91877	IdentifierDeclType	const char *		90872	0					
ANR	91878	Identifier	cmd		90872	1					
ANR	91879	AssignmentExpression	"* cmd = r_config_get ( core -> config , ""cmd.gprompt"" )"		90872	2		=			
ANR	91880	Identifier	cmd		90872	0					
ANR	91881	CallExpression	"r_config_get ( core -> config , ""cmd.gprompt"" )"		90872	1					
ANR	91882	Callee	r_config_get		90872	0					
ANR	91883	Identifier	r_config_get		90872	0					
ANR	91884	ArgumentList	core -> config		90872	1					
ANR	91885	Argument	core -> config		90872	0					
ANR	91886	PtrMemberAccess	core -> config		90872	0					
ANR	91887	Identifier	core		90872	0					
ANR	91888	Identifier	config		90872	1					
ANR	91889	Argument	"""cmd.gprompt"""		90872	1					
ANR	91890	PrimaryExpression	"""cmd.gprompt"""		90872	0					
ANR	91891	ExpressionStatement	"r_line_set_prompt ( ""cmd.gprompt> "" )"	4202:3:107766:107801	90872	3	True				
ANR	91892	CallExpression	"r_line_set_prompt ( ""cmd.gprompt> "" )"		90872	0					
ANR	91893	Callee	r_line_set_prompt		90872	0					
ANR	91894	Identifier	r_line_set_prompt		90872	0					
ANR	91895	ArgumentList	"""cmd.gprompt> """		90872	1					
ANR	91896	Argument	"""cmd.gprompt> """		90872	0					
ANR	91897	PrimaryExpression	"""cmd.gprompt> """		90872	0					
ANR	91898	ExpressionStatement	core -> cons -> line -> contents = strdup ( cmd )	4203:3:107806:107847	90872	4	True				
ANR	91899	AssignmentExpression	core -> cons -> line -> contents = strdup ( cmd )		90872	0		=			
ANR	91900	PtrMemberAccess	core -> cons -> line -> contents		90872	0					
ANR	91901	PtrMemberAccess	core -> cons -> line		90872	0					
ANR	91902	PtrMemberAccess	core -> cons		90872	0					
ANR	91903	Identifier	core		90872	0					
ANR	91904	Identifier	cons		90872	1					
ANR	91905	Identifier	line		90872	1					
ANR	91906	Identifier	contents		90872	1					
ANR	91907	CallExpression	strdup ( cmd )		90872	1					
ANR	91908	Callee	strdup		90872	0					
ANR	91909	Identifier	strdup		90872	0					
ANR	91910	ArgumentList	cmd		90872	1					
ANR	91911	Argument	cmd		90872	0					
ANR	91912	Identifier	cmd		90872	0					
ANR	91913	ExpressionStatement	buf = r_line_readline ( )	4204:3:107852:107876	90872	5	True				
ANR	91914	AssignmentExpression	buf = r_line_readline ( )		90872	0		=			
ANR	91915	Identifier	buf		90872	0					
ANR	91916	CallExpression	r_line_readline ( )		90872	1					
ANR	91917	Callee	r_line_readline		90872	0					
ANR	91918	Identifier	r_line_readline		90872	0					
ANR	91919	ArgumentList			90872	1					
ANR	91920	ExpressionStatement	core -> cons -> line -> contents = NULL	4205:3:107881:107914	90872	6	True				
ANR	91921	AssignmentExpression	core -> cons -> line -> contents = NULL		90872	0		=			
ANR	91922	PtrMemberAccess	core -> cons -> line -> contents		90872	0					
ANR	91923	PtrMemberAccess	core -> cons -> line		90872	0					
ANR	91924	PtrMemberAccess	core -> cons		90872	0					
ANR	91925	Identifier	core		90872	0					
ANR	91926	Identifier	cons		90872	1					
ANR	91927	Identifier	line		90872	1					
ANR	91928	Identifier	contents		90872	1					
ANR	91929	Identifier	NULL		90872	1					
ANR	91930	ExpressionStatement	"r_config_set ( core -> config , ""cmd.gprompt"" , buf )"	4206:3:107919:107966	90872	7	True				
ANR	91931	CallExpression	"r_config_set ( core -> config , ""cmd.gprompt"" , buf )"		90872	0					
ANR	91932	Callee	r_config_set		90872	0					
ANR	91933	Identifier	r_config_set		90872	0					
ANR	91934	ArgumentList	core -> config		90872	1					
ANR	91935	Argument	core -> config		90872	0					
ANR	91936	PtrMemberAccess	core -> config		90872	0					
ANR	91937	Identifier	core		90872	0					
ANR	91938	Identifier	config		90872	1					
ANR	91939	Argument	"""cmd.gprompt"""		90872	1					
ANR	91940	PrimaryExpression	"""cmd.gprompt"""		90872	0					
ANR	91941	Argument	buf		90872	2					
ANR	91942	Identifier	buf		90872	0					
ANR	91943	ExpressionStatement	"showcursor ( core , false )"	4207:3:107971:107995	90872	8	True				
ANR	91944	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	91945	Callee	showcursor		90872	0					
ANR	91946	Identifier	showcursor		90872	0					
ANR	91947	ArgumentList	core		90872	1					
ANR	91948	Argument	core		90872	0					
ANR	91949	Identifier	core		90872	0					
ANR	91950	Argument	false		90872	1					
ANR	91951	Identifier	false		90872	0					
ANR	91952	BreakStatement	break ;	4209:2:108003:108008	90872	14	True				
ANR	91953	Label	case '|' :	4210:2:108012:108020	90872	15	True				
ANR	91954	CompoundStatement		166:4:4726:4779	90872	16					
ANR	91955	IdentifierDeclStatement	"int e = r_config_get_i ( core -> config , ""graph.layout"" ) ;"	4212:4:108031:108084	90872	0	True				
ANR	91956	IdentifierDecl	"e = r_config_get_i ( core -> config , ""graph.layout"" )"		90872	0					
ANR	91957	IdentifierDeclType	int		90872	0					
ANR	91958	Identifier	e		90872	1					
ANR	91959	AssignmentExpression	"e = r_config_get_i ( core -> config , ""graph.layout"" )"		90872	2		=			
ANR	91960	Identifier	e		90872	0					
ANR	91961	CallExpression	"r_config_get_i ( core -> config , ""graph.layout"" )"		90872	1					
ANR	91962	Callee	r_config_get_i		90872	0					
ANR	91963	Identifier	r_config_get_i		90872	0					
ANR	91964	ArgumentList	core -> config		90872	1					
ANR	91965	Argument	core -> config		90872	0					
ANR	91966	PtrMemberAccess	core -> config		90872	0					
ANR	91967	Identifier	core		90872	0					
ANR	91968	Identifier	config		90872	1					
ANR	91969	Argument	"""graph.layout"""		90872	1					
ANR	91970	PrimaryExpression	"""graph.layout"""		90872	0					
ANR	91971	IfStatement	if ( ++ e > 1 )		90872	1					
ANR	91972	Condition	++ e > 1	4213:8:108094:108100	90872	0	True				
ANR	91973	RelationalExpression	++ e > 1		90872	0		>			
ANR	91974	UnaryExpression	++ e		90872	0					
ANR	91975	IncDec	++		90872	0					
ANR	91976	Identifier	e		90872	1					
ANR	91977	PrimaryExpression	1		90872	1					
ANR	91978	CompoundStatement		167:17:4798:4798	90872	1					
ANR	91979	ExpressionStatement	e = 0	4214:5:108110:108115	90872	0	True				
ANR	91980	AssignmentExpression	e = 0		90872	0		=			
ANR	91981	Identifier	e		90872	0					
ANR	91982	PrimaryExpression	0		90872	1					
ANR	91983	ExpressionStatement	"r_config_set_i ( core -> config , ""graph.layout"" , e )"	4216:4:108127:108175	90872	2	True				
ANR	91984	CallExpression	"r_config_set_i ( core -> config , ""graph.layout"" , e )"		90872	0					
ANR	91985	Callee	r_config_set_i		90872	0					
ANR	91986	Identifier	r_config_set_i		90872	0					
ANR	91987	ArgumentList	core -> config		90872	1					
ANR	91988	Argument	core -> config		90872	0					
ANR	91989	PtrMemberAccess	core -> config		90872	0					
ANR	91990	Identifier	core		90872	0					
ANR	91991	Identifier	config		90872	1					
ANR	91992	Argument	"""graph.layout"""		90872	1					
ANR	91993	PrimaryExpression	"""graph.layout"""		90872	0					
ANR	91994	Argument	e		90872	2					
ANR	91995	Identifier	e		90872	0					
ANR	91996	ExpressionStatement	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"	4217:4:108181:108238	90872	3	True				
ANR	91997	AssignmentExpression	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"		90872	0		=			
ANR	91998	PtrMemberAccess	g -> layout		90872	0					
ANR	91999	Identifier	g		90872	0					
ANR	92000	Identifier	layout		90872	1					
ANR	92001	CallExpression	"r_config_get_i ( core -> config , ""graph.layout"" )"		90872	1					
ANR	92002	Callee	r_config_get_i		90872	0					
ANR	92003	Identifier	r_config_get_i		90872	0					
ANR	92004	ArgumentList	core -> config		90872	1					
ANR	92005	Argument	core -> config		90872	0					
ANR	92006	PtrMemberAccess	core -> config		90872	0					
ANR	92007	Identifier	core		90872	0					
ANR	92008	Identifier	config		90872	1					
ANR	92009	Argument	"""graph.layout"""		90872	1					
ANR	92010	PrimaryExpression	"""graph.layout"""		90872	0					
ANR	92011	ExpressionStatement	g -> need_update_dim = true	4218:4:108244:108269	90872	4	True				
ANR	92012	AssignmentExpression	g -> need_update_dim = true		90872	0		=			
ANR	92013	PtrMemberAccess	g -> need_update_dim		90872	0					
ANR	92014	Identifier	g		90872	0					
ANR	92015	Identifier	need_update_dim		90872	1					
ANR	92016	Identifier	true		90872	1					
ANR	92017	ExpressionStatement	g -> need_set_layout = true	4219:4:108275:108300	90872	5	True				
ANR	92018	AssignmentExpression	g -> need_set_layout = true		90872	0		=			
ANR	92019	PtrMemberAccess	g -> need_set_layout		90872	0					
ANR	92020	Identifier	g		90872	0					
ANR	92021	Identifier	need_set_layout		90872	1					
ANR	92022	Identifier	true		90872	1					
ANR	92023	ExpressionStatement	discroll = 0	4221:3:108310:108322	90872	17	True				
ANR	92024	AssignmentExpression	discroll = 0		90872	0		=			
ANR	92025	Identifier	discroll		90872	0					
ANR	92026	PrimaryExpression	0		90872	1					
ANR	92027	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4222:3:108327:108379	90872	18	True				
ANR	92028	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92029	Callee	agraph_update_seek		90872	0					
ANR	92030	Identifier	agraph_update_seek		90872	0					
ANR	92031	ArgumentList	g		90872	1					
ANR	92032	Argument	g		90872	0					
ANR	92033	Identifier	g		90872	0					
ANR	92034	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92035	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92036	Callee	get_anode		90872	0					
ANR	92037	Identifier	get_anode		90872	0					
ANR	92038	ArgumentList	g -> curnode		90872	1					
ANR	92039	Argument	g -> curnode		90872	0					
ANR	92040	PtrMemberAccess	g -> curnode		90872	0					
ANR	92041	Identifier	g		90872	0					
ANR	92042	Identifier	curnode		90872	1					
ANR	92043	Argument	true		90872	2					
ANR	92044	Identifier	true		90872	0					
ANR	92045	BreakStatement	break ;	4223:3:108384:108389	90872	19	True				
ANR	92046	Label	case 'e' :	4224:2:108393:108401	90872	20	True				
ANR	92047	CompoundStatement		180:4:5107:5159	90872	21					
ANR	92048	IdentifierDeclStatement	"int e = r_config_get_i ( core -> config , ""graph.edges"" ) ;"	4226:4:108412:108464	90872	0	True				
ANR	92049	IdentifierDecl	"e = r_config_get_i ( core -> config , ""graph.edges"" )"		90872	0					
ANR	92050	IdentifierDeclType	int		90872	0					
ANR	92051	Identifier	e		90872	1					
ANR	92052	AssignmentExpression	"e = r_config_get_i ( core -> config , ""graph.edges"" )"		90872	2		=			
ANR	92053	Identifier	e		90872	0					
ANR	92054	CallExpression	"r_config_get_i ( core -> config , ""graph.edges"" )"		90872	1					
ANR	92055	Callee	r_config_get_i		90872	0					
ANR	92056	Identifier	r_config_get_i		90872	0					
ANR	92057	ArgumentList	core -> config		90872	1					
ANR	92058	Argument	core -> config		90872	0					
ANR	92059	PtrMemberAccess	core -> config		90872	0					
ANR	92060	Identifier	core		90872	0					
ANR	92061	Identifier	config		90872	1					
ANR	92062	Argument	"""graph.edges"""		90872	1					
ANR	92063	PrimaryExpression	"""graph.edges"""		90872	0					
ANR	92064	ExpressionStatement	e ++	4227:4:108470:108473	90872	1	True				
ANR	92065	PostIncDecOperationExpression	e ++		90872	0					
ANR	92066	Identifier	e		90872	0					
ANR	92067	IncDec	++		90872	1					
ANR	92068	IfStatement	if ( e > 2 )		90872	2					
ANR	92069	Condition	e > 2	4228:8:108483:108487	90872	0	True				
ANR	92070	RelationalExpression	e > 2		90872	0		>			
ANR	92071	Identifier	e		90872	0					
ANR	92072	PrimaryExpression	2		90872	1					
ANR	92073	CompoundStatement		182:15:5185:5185	90872	1					
ANR	92074	ExpressionStatement	e = 0	4229:5:108497:108502	90872	0	True				
ANR	92075	AssignmentExpression	e = 0		90872	0		=			
ANR	92076	Identifier	e		90872	0					
ANR	92077	PrimaryExpression	0		90872	1					
ANR	92078	ExpressionStatement	"r_config_set_i ( core -> config , ""graph.edges"" , e )"	4231:4:108514:108561	90872	3	True				
ANR	92079	CallExpression	"r_config_set_i ( core -> config , ""graph.edges"" , e )"		90872	0					
ANR	92080	Callee	r_config_set_i		90872	0					
ANR	92081	Identifier	r_config_set_i		90872	0					
ANR	92082	ArgumentList	core -> config		90872	1					
ANR	92083	Argument	core -> config		90872	0					
ANR	92084	PtrMemberAccess	core -> config		90872	0					
ANR	92085	Identifier	core		90872	0					
ANR	92086	Identifier	config		90872	1					
ANR	92087	Argument	"""graph.edges"""		90872	1					
ANR	92088	PrimaryExpression	"""graph.edges"""		90872	0					
ANR	92089	Argument	e		90872	2					
ANR	92090	Identifier	e		90872	0					
ANR	92091	ExpressionStatement	g -> edgemode = e	4232:4:108567:108582	90872	4	True				
ANR	92092	AssignmentExpression	g -> edgemode = e		90872	0		=			
ANR	92093	PtrMemberAccess	g -> edgemode		90872	0					
ANR	92094	Identifier	g		90872	0					
ANR	92095	Identifier	edgemode		90872	1					
ANR	92096	Identifier	e		90872	1					
ANR	92097	ExpressionStatement	g -> need_update_dim = true	4233:4:108588:108613	90872	5	True				
ANR	92098	AssignmentExpression	g -> need_update_dim = true		90872	0		=			
ANR	92099	PtrMemberAccess	g -> need_update_dim		90872	0					
ANR	92100	Identifier	g		90872	0					
ANR	92101	Identifier	need_update_dim		90872	1					
ANR	92102	Identifier	true		90872	1					
ANR	92103	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4234:4:108619:108646	90872	6	True				
ANR	92104	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	92105	Callee	get_bbupdate		90872	0					
ANR	92106	Identifier	get_bbupdate		90872	0					
ANR	92107	ArgumentList	g		90872	1					
ANR	92108	Argument	g		90872	0					
ANR	92109	Identifier	g		90872	0					
ANR	92110	Argument	core		90872	1					
ANR	92111	Identifier	core		90872	0					
ANR	92112	Argument	fcn		90872	2					
ANR	92113	Identifier	fcn		90872	0					
ANR	92114	BreakStatement	break ;	4236:3:108656:108661	90872	22	True				
ANR	92115	Label	case 'b' :	4237:2:108665:108673	90872	23	True				
ANR	92116	ExpressionStatement	"r_core_visual_browse ( core , """" )"	4238:3:108678:108709	90872	24	True				
ANR	92117	CallExpression	"r_core_visual_browse ( core , """" )"		90872	0					
ANR	92118	Callee	r_core_visual_browse		90872	0					
ANR	92119	Identifier	r_core_visual_browse		90872	0					
ANR	92120	ArgumentList	core		90872	1					
ANR	92121	Argument	core		90872	0					
ANR	92122	Identifier	core		90872	0					
ANR	92123	Argument	""""""		90872	1					
ANR	92124	PrimaryExpression	""""""		90872	0					
ANR	92125	BreakStatement	break ;	4239:3:108714:108719	90872	25	True				
ANR	92126	Label	case 'E' :	4240:2:108723:108731	90872	26	True				
ANR	92127	CompoundStatement		196:4:5437:5492	90872	27					
ANR	92128	IdentifierDeclStatement	"int e = r_config_get_i ( core -> config , ""graph.linemode"" ) ;"	4242:4:108742:108797	90872	0	True				
ANR	92129	IdentifierDecl	"e = r_config_get_i ( core -> config , ""graph.linemode"" )"		90872	0					
ANR	92130	IdentifierDeclType	int		90872	0					
ANR	92131	Identifier	e		90872	1					
ANR	92132	AssignmentExpression	"e = r_config_get_i ( core -> config , ""graph.linemode"" )"		90872	2		=			
ANR	92133	Identifier	e		90872	0					
ANR	92134	CallExpression	"r_config_get_i ( core -> config , ""graph.linemode"" )"		90872	1					
ANR	92135	Callee	r_config_get_i		90872	0					
ANR	92136	Identifier	r_config_get_i		90872	0					
ANR	92137	ArgumentList	core -> config		90872	1					
ANR	92138	Argument	core -> config		90872	0					
ANR	92139	PtrMemberAccess	core -> config		90872	0					
ANR	92140	Identifier	core		90872	0					
ANR	92141	Identifier	config		90872	1					
ANR	92142	Argument	"""graph.linemode"""		90872	1					
ANR	92143	PrimaryExpression	"""graph.linemode"""		90872	0					
ANR	92144	ExpressionStatement	e --	4243:4:108803:108806	90872	1	True				
ANR	92145	PostIncDecOperationExpression	e --		90872	0					
ANR	92146	Identifier	e		90872	0					
ANR	92147	IncDec	--		90872	1					
ANR	92148	IfStatement	if ( e < 0 )		90872	2					
ANR	92149	Condition	e < 0	4244:8:108816:108820	90872	0	True				
ANR	92150	RelationalExpression	e < 0		90872	0		<			
ANR	92151	Identifier	e		90872	0					
ANR	92152	PrimaryExpression	0		90872	1					
ANR	92153	CompoundStatement		198:15:5518:5518	90872	1					
ANR	92154	ExpressionStatement	e = 1	4245:5:108830:108835	90872	0	True				
ANR	92155	AssignmentExpression	e = 1		90872	0		=			
ANR	92156	Identifier	e		90872	0					
ANR	92157	PrimaryExpression	1		90872	1					
ANR	92158	ExpressionStatement	"r_config_set_i ( core -> config , ""graph.linemode"" , e )"	4247:4:108847:108897	90872	3	True				
ANR	92159	CallExpression	"r_config_set_i ( core -> config , ""graph.linemode"" , e )"		90872	0					
ANR	92160	Callee	r_config_set_i		90872	0					
ANR	92161	Identifier	r_config_set_i		90872	0					
ANR	92162	ArgumentList	core -> config		90872	1					
ANR	92163	Argument	core -> config		90872	0					
ANR	92164	PtrMemberAccess	core -> config		90872	0					
ANR	92165	Identifier	core		90872	0					
ANR	92166	Identifier	config		90872	1					
ANR	92167	Argument	"""graph.linemode"""		90872	1					
ANR	92168	PrimaryExpression	"""graph.linemode"""		90872	0					
ANR	92169	Argument	e		90872	2					
ANR	92170	Identifier	e		90872	0					
ANR	92171	ExpressionStatement	g -> can -> linemode = e	4248:4:108903:108923	90872	4	True				
ANR	92172	AssignmentExpression	g -> can -> linemode = e		90872	0		=			
ANR	92173	PtrMemberAccess	g -> can -> linemode		90872	0					
ANR	92174	PtrMemberAccess	g -> can		90872	0					
ANR	92175	Identifier	g		90872	0					
ANR	92176	Identifier	can		90872	1					
ANR	92177	Identifier	linemode		90872	1					
ANR	92178	Identifier	e		90872	1					
ANR	92179	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4249:4:108929:108956	90872	5	True				
ANR	92180	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	92181	Callee	get_bbupdate		90872	0					
ANR	92182	Identifier	get_bbupdate		90872	0					
ANR	92183	ArgumentList	g		90872	1					
ANR	92184	Argument	g		90872	0					
ANR	92185	Identifier	g		90872	0					
ANR	92186	Argument	core		90872	1					
ANR	92187	Identifier	core		90872	0					
ANR	92188	Argument	fcn		90872	2					
ANR	92189	Identifier	fcn		90872	0					
ANR	92190	BreakStatement	break ;	4251:3:108966:108971	90872	28	True				
ANR	92191	Label	case 13 :	4252:2:108975:108982	90872	29	True				
ANR	92192	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4253:3:108987:109039	90872	30	True				
ANR	92193	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92194	Callee	agraph_update_seek		90872	0					
ANR	92195	Identifier	agraph_update_seek		90872	0					
ANR	92196	ArgumentList	g		90872	1					
ANR	92197	Argument	g		90872	0					
ANR	92198	Identifier	g		90872	0					
ANR	92199	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92200	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92201	Callee	get_anode		90872	0					
ANR	92202	Identifier	get_anode		90872	0					
ANR	92203	ArgumentList	g -> curnode		90872	1					
ANR	92204	Argument	g -> curnode		90872	0					
ANR	92205	PtrMemberAccess	g -> curnode		90872	0					
ANR	92206	Identifier	g		90872	0					
ANR	92207	Identifier	curnode		90872	1					
ANR	92208	Argument	true		90872	2					
ANR	92209	Identifier	true		90872	0					
ANR	92210	ExpressionStatement	update_seek = true	4254:3:109044:109062	90872	31	True				
ANR	92211	AssignmentExpression	update_seek = true		90872	0		=			
ANR	92212	Identifier	update_seek		90872	0					
ANR	92213	Identifier	true		90872	1					
ANR	92214	ExpressionStatement	exit_graph = true	4255:3:109067:109084	90872	32	True				
ANR	92215	AssignmentExpression	exit_graph = true		90872	0		=			
ANR	92216	Identifier	exit_graph		90872	0					
ANR	92217	Identifier	true		90872	1					
ANR	92218	BreakStatement	break ;	4256:3:109089:109094	90872	33	True				
ANR	92219	Label	case '>' :	4257:2:109098:109106	90872	34	True				
ANR	92220	IfStatement	"if ( fcn && r_cons_yesno ( 'y' , ""Compute function callgraph? (Y/n)"" ) )"		90872	35					
ANR	92221	Condition	"fcn && r_cons_yesno ( 'y' , ""Compute function callgraph? (Y/n)"" )"	4258:7:109115:109176	90872	0	True				
ANR	92222	AndExpression	"fcn && r_cons_yesno ( 'y' , ""Compute function callgraph? (Y/n)"" )"		90872	0		&&			
ANR	92223	Identifier	fcn		90872	0					
ANR	92224	CallExpression	"r_cons_yesno ( 'y' , ""Compute function callgraph? (Y/n)"" )"		90872	1					
ANR	92225	Callee	r_cons_yesno		90872	0					
ANR	92226	Identifier	r_cons_yesno		90872	0					
ANR	92227	ArgumentList	'y'		90872	1					
ANR	92228	Argument	'y'		90872	0					
ANR	92229	PrimaryExpression	'y'		90872	0					
ANR	92230	Argument	"""Compute function callgraph? (Y/n)"""		90872	1					
ANR	92231	PrimaryExpression	"""Compute function callgraph? (Y/n)"""		90872	0					
ANR	92232	CompoundStatement		212:71:5874:5874	90872	1					
ANR	92233	ExpressionStatement	"r_core_cmd0 ( core , ""ag-;.agc* @$FB;.axfg @$FB;aggi"" )"	4259:4:109185:109237	90872	0	True				
ANR	92234	CallExpression	"r_core_cmd0 ( core , ""ag-;.agc* @$FB;.axfg @$FB;aggi"" )"		90872	0					
ANR	92235	Callee	r_core_cmd0		90872	0					
ANR	92236	Identifier	r_core_cmd0		90872	0					
ANR	92237	ArgumentList	core		90872	1					
ANR	92238	Argument	core		90872	0					
ANR	92239	Identifier	core		90872	0					
ANR	92240	Argument	"""ag-;.agc* @$FB;.axfg @$FB;aggi"""		90872	1					
ANR	92241	PrimaryExpression	"""ag-;.agc* @$FB;.axfg @$FB;aggi"""		90872	0					
ANR	92242	BreakStatement	break ;	4261:3:109247:109252	90872	36	True				
ANR	92243	Label	case '<' :	4262:2:109256:109264	90872	37	True				
ANR	92244	IfStatement	if ( fcn )		90872	38					
ANR	92245	Condition	fcn	4264:7:109319:109321	90872	0	True				
ANR	92246	Identifier	fcn		90872	0					
ANR	92247	CompoundStatement		218:12:6019:6019	90872	1					
ANR	92248	ExpressionStatement	"r_core_cmd0 ( core , ""ag-;.axtg $FB;aggi"" )"	4265:4:109330:109370	90872	0	True				
ANR	92249	CallExpression	"r_core_cmd0 ( core , ""ag-;.axtg $FB;aggi"" )"		90872	0					
ANR	92250	Callee	r_core_cmd0		90872	0					
ANR	92251	Identifier	r_core_cmd0		90872	0					
ANR	92252	ArgumentList	core		90872	1					
ANR	92253	Argument	core		90872	0					
ANR	92254	Identifier	core		90872	0					
ANR	92255	Argument	"""ag-;.axtg $FB;aggi"""		90872	1					
ANR	92256	PrimaryExpression	"""ag-;.axtg $FB;aggi"""		90872	0					
ANR	92257	BreakStatement	break ;	4267:3:109380:109385	90872	39	True				
ANR	92258	Label	case 'G' :	4268:2:109389:109397	90872	40	True				
ANR	92259	ExpressionStatement	"r_core_cmd0 ( core , ""ag-;.dtg*;aggi"" )"	4269:3:109402:109438	90872	41	True				
ANR	92260	CallExpression	"r_core_cmd0 ( core , ""ag-;.dtg*;aggi"" )"		90872	0					
ANR	92261	Callee	r_core_cmd0		90872	0					
ANR	92262	Identifier	r_core_cmd0		90872	0					
ANR	92263	ArgumentList	core		90872	1					
ANR	92264	Argument	core		90872	0					
ANR	92265	Identifier	core		90872	0					
ANR	92266	Argument	"""ag-;.dtg*;aggi"""		90872	1					
ANR	92267	PrimaryExpression	"""ag-;.dtg*;aggi"""		90872	0					
ANR	92268	BreakStatement	break ;	4270:3:109443:109448	90872	42	True				
ANR	92269	Label	case 'V' :	4271:2:109452:109460	90872	43	True				
ANR	92270	IfStatement	if ( fcn )		90872	44					
ANR	92271	Condition	fcn	4272:7:109469:109471	90872	0	True				
ANR	92272	Identifier	fcn		90872	0					
ANR	92273	CompoundStatement		226:12:6169:6169	90872	1					
ANR	92274	ExpressionStatement	agraph_toggle_callgraph ( g )	4273:4:109480:109507	90872	0	True				
ANR	92275	CallExpression	agraph_toggle_callgraph ( g )		90872	0					
ANR	92276	Callee	agraph_toggle_callgraph		90872	0					
ANR	92277	Identifier	agraph_toggle_callgraph		90872	0					
ANR	92278	ArgumentList	g		90872	1					
ANR	92279	Argument	g		90872	0					
ANR	92280	Identifier	g		90872	0					
ANR	92281	BreakStatement	break ;	4275:3:109517:109522	90872	45	True				
ANR	92282	Label	case 'Z' :	4276:2:109526:109534	90872	46	True				
ANR	92283	IfStatement	if ( okey == 27 )		90872	47					
ANR	92284	Condition	okey == 27	4277:7:109543:109552	90872	0	True				
ANR	92285	EqualityExpression	okey == 27		90872	0		==			
ANR	92286	Identifier	okey		90872	0					
ANR	92287	PrimaryExpression	27		90872	1					
ANR	92288	CompoundStatement		231:19:6250:6250	90872	1					
ANR	92289	ExpressionStatement	agraph_prev_node ( g )	4278:4:109574:109594	90872	0	True				
ANR	92290	CallExpression	agraph_prev_node ( g )		90872	0					
ANR	92291	Callee	agraph_prev_node		90872	0					
ANR	92292	Identifier	agraph_prev_node		90872	0					
ANR	92293	ArgumentList	g		90872	1					
ANR	92294	Argument	g		90872	0					
ANR	92295	Identifier	g		90872	0					
ANR	92296	ElseStatement	else		90872	0					
ANR	92297	CompoundStatement		234:4:6307:6341	90872	0					
ANR	92298	IdentifierDeclStatement	RANode * n = get_anode ( g -> curnode ) ;	4280:4:109612:109646	90872	0	True				
ANR	92299	IdentifierDecl	* n = get_anode ( g -> curnode )		90872	0					
ANR	92300	IdentifierDeclType	RANode *		90872	0					
ANR	92301	Identifier	n		90872	1					
ANR	92302	AssignmentExpression	* n = get_anode ( g -> curnode )		90872	2		=			
ANR	92303	Identifier	n		90872	0					
ANR	92304	CallExpression	get_anode ( g -> curnode )		90872	1					
ANR	92305	Callee	get_anode		90872	0					
ANR	92306	Identifier	get_anode		90872	0					
ANR	92307	ArgumentList	g -> curnode		90872	1					
ANR	92308	Argument	g -> curnode		90872	0					
ANR	92309	PtrMemberAccess	g -> curnode		90872	0					
ANR	92310	Identifier	g		90872	0					
ANR	92311	Identifier	curnode		90872	1					
ANR	92312	IfStatement	if ( n )		90872	1					
ANR	92313	Condition	n	4281:8:109656:109656	90872	0	True				
ANR	92314	Identifier	n		90872	0					
ANR	92315	CompoundStatement		236:5:6361:6399	90872	1					
ANR	92316	IdentifierDeclStatement	"ut64 addr = r_num_get ( NULL , n -> title ) ;"	4282:5:109666:109704	90872	0	True				
ANR	92317	IdentifierDecl	"addr = r_num_get ( NULL , n -> title )"		90872	0					
ANR	92318	IdentifierDeclType	ut64		90872	0					
ANR	92319	Identifier	addr		90872	1					
ANR	92320	AssignmentExpression	"addr = r_num_get ( NULL , n -> title )"		90872	2		=			
ANR	92321	Identifier	addr		90872	0					
ANR	92322	CallExpression	"r_num_get ( NULL , n -> title )"		90872	1					
ANR	92323	Callee	r_num_get		90872	0					
ANR	92324	Identifier	r_num_get		90872	0					
ANR	92325	ArgumentList	NULL		90872	1					
ANR	92326	Argument	NULL		90872	0					
ANR	92327	Identifier	NULL		90872	0					
ANR	92328	Argument	n -> title		90872	1					
ANR	92329	PtrMemberAccess	n -> title		90872	0					
ANR	92330	Identifier	n		90872	0					
ANR	92331	Identifier	title		90872	1					
ANR	92332	ExpressionStatement	"toggle_bb ( core , addr )"	4283:5:109711:109733	90872	1	True				
ANR	92333	CallExpression	"toggle_bb ( core , addr )"		90872	0					
ANR	92334	Callee	toggle_bb		90872	0					
ANR	92335	Identifier	toggle_bb		90872	0					
ANR	92336	ArgumentList	core		90872	1					
ANR	92337	Argument	core		90872	0					
ANR	92338	Identifier	core		90872	0					
ANR	92339	Argument	addr		90872	1					
ANR	92340	Identifier	addr		90872	0					
ANR	92341	ExpressionStatement	g -> need_reload_nodes = true	4284:5:109740:109767	90872	2	True				
ANR	92342	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92343	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92344	Identifier	g		90872	0					
ANR	92345	Identifier	need_reload_nodes		90872	1					
ANR	92346	Identifier	true		90872	1					
ANR	92347	BreakStatement	break ;	4287:3:109783:109788	90872	48	True				
ANR	92348	Label	case 's' :	4288:2:109792:109800	90872	49	True				
ANR	92349	IfStatement	if ( ! fcn )		90872	50					
ANR	92350	Condition	! fcn	4289:7:109809:109812	90872	0	True				
ANR	92351	UnaryOperationExpression	! fcn		90872	0					
ANR	92352	UnaryOperator	!		90872	0					
ANR	92353	Identifier	fcn		90872	1					
ANR	92354	CompoundStatement		243:13:6510:6510	90872	1					
ANR	92355	BreakStatement	break ;	4290:4:109821:109826	90872	0	True				
ANR	92356	ExpressionStatement	"key_s = r_config_get ( core -> config , ""key.s"" )"	4292:3:109836:109880	90872	51	True				
ANR	92357	AssignmentExpression	"key_s = r_config_get ( core -> config , ""key.s"" )"		90872	0		=			
ANR	92358	Identifier	key_s		90872	0					
ANR	92359	CallExpression	"r_config_get ( core -> config , ""key.s"" )"		90872	1					
ANR	92360	Callee	r_config_get		90872	0					
ANR	92361	Identifier	r_config_get		90872	0					
ANR	92362	ArgumentList	core -> config		90872	1					
ANR	92363	Argument	core -> config		90872	0					
ANR	92364	PtrMemberAccess	core -> config		90872	0					
ANR	92365	Identifier	core		90872	0					
ANR	92366	Identifier	config		90872	1					
ANR	92367	Argument	"""key.s"""		90872	1					
ANR	92368	PrimaryExpression	"""key.s"""		90872	0					
ANR	92369	IfStatement	if ( key_s && * key_s )		90872	52					
ANR	92370	Condition	key_s && * key_s	4293:7:109889:109903	90872	0	True				
ANR	92371	AndExpression	key_s && * key_s		90872	0		&&			
ANR	92372	Identifier	key_s		90872	0					
ANR	92373	UnaryOperationExpression	* key_s		90872	1					
ANR	92374	UnaryOperator	*		90872	0					
ANR	92375	Identifier	key_s		90872	1					
ANR	92376	CompoundStatement		247:24:6601:6601	90872	1					
ANR	92377	ExpressionStatement	"r_core_cmd0 ( core , key_s )"	4294:4:109912:109937	90872	0	True				
ANR	92378	CallExpression	"r_core_cmd0 ( core , key_s )"		90872	0					
ANR	92379	Callee	r_core_cmd0		90872	0					
ANR	92380	Identifier	r_core_cmd0		90872	0					
ANR	92381	ArgumentList	core		90872	1					
ANR	92382	Argument	core		90872	0					
ANR	92383	Identifier	core		90872	0					
ANR	92384	Argument	key_s		90872	1					
ANR	92385	Identifier	key_s		90872	0					
ANR	92386	ElseStatement	else		90872	0					
ANR	92387	CompoundStatement		249:10:6644:6644	90872	0					
ANR	92388	ExpressionStatement	"graph_single_step_in ( core , g )"	4296:4:109955:109985	90872	0	True				
ANR	92389	CallExpression	"graph_single_step_in ( core , g )"		90872	0					
ANR	92390	Callee	graph_single_step_in		90872	0					
ANR	92391	Identifier	graph_single_step_in		90872	0					
ANR	92392	ArgumentList	core		90872	1					
ANR	92393	Argument	core		90872	0					
ANR	92394	Identifier	core		90872	0					
ANR	92395	Argument	g		90872	1					
ANR	92396	Identifier	g		90872	0					
ANR	92397	ExpressionStatement	discroll = 0	4298:3:109995:110007	90872	53	True				
ANR	92398	AssignmentExpression	discroll = 0		90872	0		=			
ANR	92399	Identifier	discroll		90872	0					
ANR	92400	PrimaryExpression	0		90872	1					
ANR	92401	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4299:3:110012:110064	90872	54	True				
ANR	92402	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92403	Callee	agraph_update_seek		90872	0					
ANR	92404	Identifier	agraph_update_seek		90872	0					
ANR	92405	ArgumentList	g		90872	1					
ANR	92406	Argument	g		90872	0					
ANR	92407	Identifier	g		90872	0					
ANR	92408	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92409	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92410	Callee	get_anode		90872	0					
ANR	92411	Identifier	get_anode		90872	0					
ANR	92412	ArgumentList	g -> curnode		90872	1					
ANR	92413	Argument	g -> curnode		90872	0					
ANR	92414	PtrMemberAccess	g -> curnode		90872	0					
ANR	92415	Identifier	g		90872	0					
ANR	92416	Identifier	curnode		90872	1					
ANR	92417	Argument	true		90872	2					
ANR	92418	Identifier	true		90872	0					
ANR	92419	BreakStatement	break ;	4300:3:110069:110074	90872	55	True				
ANR	92420	Label	case 'S' :	4301:2:110078:110086	90872	56	True				
ANR	92421	IfStatement	if ( fcn )		90872	57					
ANR	92422	Condition	fcn	4302:7:110095:110097	90872	0	True				
ANR	92423	Identifier	fcn		90872	0					
ANR	92424	CompoundStatement		256:12:6795:6795	90872	1					
ANR	92425	ExpressionStatement	"graph_single_step_over ( core , g )"	4303:4:110106:110138	90872	0	True				
ANR	92426	CallExpression	"graph_single_step_over ( core , g )"		90872	0					
ANR	92427	Callee	graph_single_step_over		90872	0					
ANR	92428	Identifier	graph_single_step_over		90872	0					
ANR	92429	ArgumentList	core		90872	1					
ANR	92430	Argument	core		90872	0					
ANR	92431	Identifier	core		90872	0					
ANR	92432	Argument	g		90872	1					
ANR	92433	Identifier	g		90872	0					
ANR	92434	BreakStatement	break ;	4305:3:110148:110153	90872	58	True				
ANR	92435	Label	case 'x' :	4306:2:110157:110165	90872	59	True				
ANR	92436	Label	case 'X' :	4307:2:110169:110177	90872	60	True				
ANR	92437	CompoundStatement		267:3:6944:6998	90872	61					
ANR	92438	IfStatement	if ( ! fcn )		90872	0					
ANR	92439	Condition	! fcn	4309:7:110190:110193	90872	0	True				
ANR	92440	UnaryOperationExpression	! fcn		90872	0					
ANR	92441	UnaryOperator	!		90872	0					
ANR	92442	Identifier	fcn		90872	1					
ANR	92443	CompoundStatement		263:13:6891:6891	90872	1					
ANR	92444	BreakStatement	break ;	4310:4:110202:110207	90872	0	True				
ANR	92445	IdentifierDeclStatement	ut64 old_off = core -> offset ;	4312:3:110217:110244	90872	1	True				
ANR	92446	IdentifierDecl	old_off = core -> offset		90872	0					
ANR	92447	IdentifierDeclType	ut64		90872	0					
ANR	92448	Identifier	old_off		90872	1					
ANR	92449	AssignmentExpression	old_off = core -> offset		90872	2		=			
ANR	92450	Identifier	old_off		90872	0					
ANR	92451	PtrMemberAccess	core -> offset		90872	1					
ANR	92452	Identifier	core		90872	0					
ANR	92453	Identifier	offset		90872	1					
ANR	92454	IdentifierDeclStatement	"ut64 off = r_core_anal_get_bbaddr ( core , core -> offset ) ;"	4313:3:110249:110303	90872	2	True				
ANR	92455	IdentifierDecl	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		90872	0					
ANR	92456	IdentifierDeclType	ut64		90872	0					
ANR	92457	Identifier	off		90872	1					
ANR	92458	AssignmentExpression	"off = r_core_anal_get_bbaddr ( core , core -> offset )"		90872	2		=			
ANR	92459	Identifier	off		90872	0					
ANR	92460	CallExpression	"r_core_anal_get_bbaddr ( core , core -> offset )"		90872	1					
ANR	92461	Callee	r_core_anal_get_bbaddr		90872	0					
ANR	92462	Identifier	r_core_anal_get_bbaddr		90872	0					
ANR	92463	ArgumentList	core		90872	1					
ANR	92464	Argument	core		90872	0					
ANR	92465	Identifier	core		90872	0					
ANR	92466	Argument	core -> offset		90872	1					
ANR	92467	PtrMemberAccess	core -> offset		90872	0					
ANR	92468	Identifier	core		90872	0					
ANR	92469	Identifier	offset		90872	1					
ANR	92470	ExpressionStatement	"r_core_seek ( core , off , 0 )"	4314:3:110308:110334	90872	3	True				
ANR	92471	CallExpression	"r_core_seek ( core , off , 0 )"		90872	0					
ANR	92472	Callee	r_core_seek		90872	0					
ANR	92473	Identifier	r_core_seek		90872	0					
ANR	92474	ArgumentList	core		90872	1					
ANR	92475	Argument	core		90872	0					
ANR	92476	Identifier	core		90872	0					
ANR	92477	Argument	off		90872	1					
ANR	92478	Identifier	off		90872	0					
ANR	92479	Argument	0		90872	2					
ANR	92480	PrimaryExpression	0		90872	0					
ANR	92481	IfStatement	"if ( ( key == 'x' && ! r_core_visual_refs ( core , true , true ) ) || ( key == 'X' && ! r_core_visual_refs ( core , false , true ) ) )"		90872	4					
ANR	92482	Condition	"( key == 'x' && ! r_core_visual_refs ( core , true , true ) ) || ( key == 'X' && ! r_core_visual_refs ( core , false , true ) )"	4315:7:110343:110462	90872	0	True				
ANR	92483	OrExpression	"( key == 'x' && ! r_core_visual_refs ( core , true , true ) ) || ( key == 'X' && ! r_core_visual_refs ( core , false , true ) )"		90872	0		||			
ANR	92484	AndExpression	"key == 'x' && ! r_core_visual_refs ( core , true , true )"		90872	0		&&			
ANR	92485	EqualityExpression	key == 'x'		90872	0		==			
ANR	92486	Identifier	key		90872	0					
ANR	92487	PrimaryExpression	'x'		90872	1					
ANR	92488	UnaryOperationExpression	"! r_core_visual_refs ( core , true , true )"		90872	1					
ANR	92489	UnaryOperator	!		90872	0					
ANR	92490	CallExpression	"r_core_visual_refs ( core , true , true )"		90872	1					
ANR	92491	Callee	r_core_visual_refs		90872	0					
ANR	92492	Identifier	r_core_visual_refs		90872	0					
ANR	92493	ArgumentList	core		90872	1					
ANR	92494	Argument	core		90872	0					
ANR	92495	Identifier	core		90872	0					
ANR	92496	Argument	true		90872	1					
ANR	92497	Identifier	true		90872	0					
ANR	92498	Argument	true		90872	2					
ANR	92499	Identifier	true		90872	0					
ANR	92500	AndExpression	"key == 'X' && ! r_core_visual_refs ( core , false , true )"		90872	1		&&			
ANR	92501	EqualityExpression	key == 'X'		90872	0		==			
ANR	92502	Identifier	key		90872	0					
ANR	92503	PrimaryExpression	'X'		90872	1					
ANR	92504	UnaryOperationExpression	"! r_core_visual_refs ( core , false , true )"		90872	1					
ANR	92505	UnaryOperator	!		90872	0					
ANR	92506	CallExpression	"r_core_visual_refs ( core , false , true )"		90872	1					
ANR	92507	Callee	r_core_visual_refs		90872	0					
ANR	92508	Identifier	r_core_visual_refs		90872	0					
ANR	92509	ArgumentList	core		90872	1					
ANR	92510	Argument	core		90872	0					
ANR	92511	Identifier	core		90872	0					
ANR	92512	Argument	false		90872	1					
ANR	92513	Identifier	false		90872	0					
ANR	92514	Argument	true		90872	2					
ANR	92515	Identifier	true		90872	0					
ANR	92516	CompoundStatement		270:64:7160:7160	90872	1					
ANR	92517	ExpressionStatement	"r_core_seek ( core , old_off , 0 )"	4317:4:110471:110501	90872	0	True				
ANR	92518	CallExpression	"r_core_seek ( core , old_off , 0 )"		90872	0					
ANR	92519	Callee	r_core_seek		90872	0					
ANR	92520	Identifier	r_core_seek		90872	0					
ANR	92521	ArgumentList	core		90872	1					
ANR	92522	Argument	core		90872	0					
ANR	92523	Identifier	core		90872	0					
ANR	92524	Argument	old_off		90872	1					
ANR	92525	Identifier	old_off		90872	0					
ANR	92526	Argument	0		90872	2					
ANR	92527	PrimaryExpression	0		90872	0					
ANR	92528	BreakStatement	break ;	4319:3:110511:110516	90872	5	True				
ANR	92529	Label	case 9 :	4321:2:110524:110530	90872	62	True				
ANR	92530	ExpressionStatement	agraph_next_node ( g )	4322:3:110542:110562	90872	63	True				
ANR	92531	CallExpression	agraph_next_node ( g )		90872	0					
ANR	92532	Callee	agraph_next_node		90872	0					
ANR	92533	Identifier	agraph_next_node		90872	0					
ANR	92534	ArgumentList	g		90872	1					
ANR	92535	Argument	g		90872	0					
ANR	92536	Identifier	g		90872	0					
ANR	92537	ExpressionStatement	discroll = 0	4323:3:110567:110579	90872	64	True				
ANR	92538	AssignmentExpression	discroll = 0		90872	0		=			
ANR	92539	Identifier	discroll		90872	0					
ANR	92540	PrimaryExpression	0		90872	1					
ANR	92541	BreakStatement	break ;	4324:3:110584:110589	90872	65	True				
ANR	92542	Label	case '?' :	4325:2:110593:110601	90872	66	True				
ANR	92543	ExpressionStatement	r_cons_clear00 ( )	4326:3:110606:110623	90872	67	True				
ANR	92544	CallExpression	r_cons_clear00 ( )		90872	0					
ANR	92545	Callee	r_cons_clear00		90872	0					
ANR	92546	Identifier	r_cons_clear00		90872	0					
ANR	92547	ArgumentList			90872	1					
ANR	92548	Statement	r_cons_printf	4327:3:110628:110640	90872	68	True				
ANR	92549	Statement	(	4327:17:110642:110642	90872	69	True				
ANR	92550	Statement	"""Visual Ascii Art graph keybindings:\\n"""	4327:18:110643:110681	90872	70	True				
ANR	92551	Statement	""" :e cmd.gprompt = agft   - show tinygraph in one side\\n"""	4328:4:110687:110743	90872	71	True				
ANR	92552	Statement	""" +/-/0        - zoom in/out/default\\n"""	4329:4:110749:110787	90872	72	True				
ANR	92553	Statement	""" ;            - add comment in current basic block\\n"""	4330:4:110793:110846	90872	73	True				
ANR	92554	Statement	""" . (dot)      - center graph to the current node\\n"""	4331:4:110852:110903	90872	74	True				
ANR	92555	Statement	""" , (comma)    - toggle graph.few\\n"""	4332:4:110909:110944	90872	75	True				
ANR	92556	Statement	""" ^            - seek to the first bb of the function\\n"""	4333:4:110950:111005	90872	76	True				
ANR	92557	Statement	""" =            - toggle graph.layout\\n"""	4334:4:111011:111049	90872	77	True				
ANR	92558	Statement	""" :cmd         - run radare command\\n"""	4335:4:111055:111092	90872	78	True				
ANR	92559	Statement	""" '            - toggle graph.comments\\n"""	4336:4:111098:111138	90872	79	True				
ANR	92560	Statement	""" \\""            - toggle graph.refs\\n"""	4337:4:111144:111181	90872	80	True				
ANR	92561	Statement	""" #            - toggle graph.hints\\n"""	4338:4:111187:111224	90872	81	True				
ANR	92562	Statement	""" /            - highlight text\\n"""	4339:4:111230:111263	90872	82	True				
ANR	92563	Statement	""" |            - set cmd.gprompt\\n"""	4340:4:111269:111303	90872	83	True				
ANR	92564	Statement	""" _            - enter hud selector\\n"""	4341:4:111309:111346	90872	84	True				
ANR	92565	Statement	""" >            - show function callgraph (see graph.refs)\\n"""	4342:4:111352:111411	90872	85	True				
ANR	92566	Statement	""" <            - show program callgraph (see graph.refs)\\n"""	4343:4:111417:111475	90872	86	True				
ANR	92567	Statement	""" (            - reverse conditional branch of last instruction in bb\\n"""	4344:4:111481:111552	90872	87	True				
ANR	92568	Statement	""" )            - rotate asm.emu and emu.str\\n"""	4345:4:111558:111603	90872	88	True				
ANR	92569	Statement	""" Home/End     - go to the top/bottom of the canvas\\n"""	4346:4:111609:111662	90872	89	True				
ANR	92570	Statement	""" Page-UP/DOWN - scroll canvas up/down\\n"""	4347:4:111668:111708	90872	90	True				
ANR	92571	Statement	""" b            - visual browse things\\n"""	4348:4:111714:111753	90872	91	True				
ANR	92572	Statement	""" c            - toggle graph cursor mode\\n"""	4349:4:111759:111802	90872	92	True				
ANR	92573	Statement	""" C            - toggle scr.colors\\n"""	4350:4:111808:111844	90872	93	True				
ANR	92574	Statement	""" d            - rename function\\n"""	4351:4:111850:111884	90872	94	True				
ANR	92575	Statement	""" D            - toggle the mixed graph+disasm mode\\n"""	4352:4:111890:111943	90872	95	True				
ANR	92576	Statement	""" e            - rotate graph.edges (show/hide edges)\\n"""	4353:4:111949:112004	90872	96	True				
ANR	92577	Statement	""" E            - rotate graph.linemode (square/diagonal lines)\\n"""	4354:4:112010:112074	90872	97	True				
ANR	92578	Statement	""" F            - enter flag selector\\n"""	4355:4:112080:112118	90872	98	True				
ANR	92579	Statement	""" g            - go/seek to given offset\\n"""	4356:4:112124:112166	90872	99	True				
ANR	92580	Statement	""" G            - debug trace callgraph (generated with dtc)\\n"""	4357:4:112172:112233	90872	100	True				
ANR	92581	Statement	""" hjkl/HJKL    - scroll canvas or node depending on graph cursor (uppercase for faster)\\n"""	4358:4:112239:112328	90872	101	True				
ANR	92582	Statement	""" i            - select input nodes by index\\n"""	4359:4:112334:112380	90872	102	True				
ANR	92583	Statement	""" I            - select output node by index\\n"""	4360:4:112386:112432	90872	103	True				
ANR	92584	Statement	""" m/M          - change mouse modes\\n"""	4361:4:112438:112475	90872	104	True				
ANR	92585	Statement	""" n/N          - next/previous scr.nkey (function/flag..)\\n"""	4362:4:112481:112540	90872	105	True				
ANR	92586	Statement	""" o([A-Za-z]*) - follow jmp/call identified by shortcut (like ;[oa])\\n"""	4363:4:112546:112616	90872	106	True				
ANR	92587	Statement	""" O            - toggle asm.pseudo and asm.esil\\n"""	4364:4:112622:112671	90872	107	True				
ANR	92588	Statement	""" p/P          - rotate graph modes (normal, display offsets, minigraph, summary)\\n"""	4365:4:112677:112760	90872	108	True				
ANR	92589	Statement	""" q            - back to Visual mode\\n"""	4366:4:112766:112804	90872	109	True				
ANR	92590	Statement	""" r            - toggle jmphints/leahints\\n"""	4367:4:112810:112853	90872	110	True				
ANR	92591	Statement	""" R            - randomize colors\\n"""	4368:4:112859:112894	90872	111	True				
ANR	92592	Statement	""" s/S          - step / step over\\n"""	4369:4:112900:112935	90872	112	True				
ANR	92593	Statement	""" tab          - select next node\\n"""	4370:4:112941:112976	90872	113	True				
ANR	92594	Statement	""" TAB          - select previous node\\n"""	4371:4:112982:113021	90872	114	True				
ANR	92595	Statement	""" t/f          - follow true/false edges\\n"""	4372:4:113027:113069	90872	115	True				
ANR	92596	Statement	""" u/U          - undo/redo seek\\n"""	4373:4:113075:113108	90872	116	True				
ANR	92597	Statement	""" V            - toggle basicblock / call graphs\\n"""	4374:4:113114:113164	90872	117	True				
ANR	92598	Statement	""" w            - toggle between movements speed 1 and graph.scroll\\n"""	4375:4:113170:113238	90872	118	True				
ANR	92599	Statement	""" x/X          - jump to xref/ref\\n"""	4376:4:113244:113279	90872	119	True				
ANR	92600	Statement	""" Y            - toggle tiny graph\\n"""	4377:4:113285:113321	90872	120	True				
ANR	92601	Statement	""" z            - toggle node folding\\n"""	4378:4:113327:113365	90872	121	True				
ANR	92602	Statement	""" Z            - toggle basic block folding"""	4379:4:113371:113414	90872	122	True				
ANR	92603	Statement	)	4379:48:113415:113415	90872	123	True				
ANR	92604	ExpressionStatement		4379:49:113416:113416	90872	124	True				
ANR	92605	ExpressionStatement	r_cons_less ( )	4380:3:113421:113435	90872	125	True				
ANR	92606	CallExpression	r_cons_less ( )		90872	0					
ANR	92607	Callee	r_cons_less		90872	0					
ANR	92608	Identifier	r_cons_less		90872	0					
ANR	92609	ArgumentList			90872	1					
ANR	92610	ExpressionStatement	r_cons_any_key ( NULL )	4381:3:113440:113461	90872	126	True				
ANR	92611	CallExpression	r_cons_any_key ( NULL )		90872	0					
ANR	92612	Callee	r_cons_any_key		90872	0					
ANR	92613	Identifier	r_cons_any_key		90872	0					
ANR	92614	ArgumentList	NULL		90872	1					
ANR	92615	Argument	NULL		90872	0					
ANR	92616	Identifier	NULL		90872	0					
ANR	92617	BreakStatement	break ;	4382:3:113466:113471	90872	127	True				
ANR	92618	Label	"case '""' :"	4383:2:113475:113483	90872	128	True				
ANR	92619	ExpressionStatement	"r_config_toggle ( core -> config , ""graph.refs"" )"	4384:3:113488:113532	90872	129	True				
ANR	92620	CallExpression	"r_config_toggle ( core -> config , ""graph.refs"" )"		90872	0					
ANR	92621	Callee	r_config_toggle		90872	0					
ANR	92622	Identifier	r_config_toggle		90872	0					
ANR	92623	ArgumentList	core -> config		90872	1					
ANR	92624	Argument	core -> config		90872	0					
ANR	92625	PtrMemberAccess	core -> config		90872	0					
ANR	92626	Identifier	core		90872	0					
ANR	92627	Identifier	config		90872	1					
ANR	92628	Argument	"""graph.refs"""		90872	1					
ANR	92629	PrimaryExpression	"""graph.refs"""		90872	0					
ANR	92630	BreakStatement	break ;	4385:3:113537:113542	90872	130	True				
ANR	92631	Label	case '#' :	4386:2:113546:113554	90872	131	True				
ANR	92632	IfStatement	if ( g -> mode == R_AGRAPH_MODE_COMMENTS )		90872	132					
ANR	92633	Condition	g -> mode == R_AGRAPH_MODE_COMMENTS	4387:7:113563:113595	90872	0	True				
ANR	92634	EqualityExpression	g -> mode == R_AGRAPH_MODE_COMMENTS		90872	0		==			
ANR	92635	PtrMemberAccess	g -> mode		90872	0					
ANR	92636	Identifier	g		90872	0					
ANR	92637	Identifier	mode		90872	1					
ANR	92638	Identifier	R_AGRAPH_MODE_COMMENTS		90872	1					
ANR	92639	CompoundStatement		341:42:10293:10293	90872	1					
ANR	92640	ExpressionStatement	g -> mode = R_AGRAPH_MODE_NORMAL	4388:4:113604:113634	90872	0	True				
ANR	92641	AssignmentExpression	g -> mode = R_AGRAPH_MODE_NORMAL		90872	0		=			
ANR	92642	PtrMemberAccess	g -> mode		90872	0					
ANR	92643	Identifier	g		90872	0					
ANR	92644	Identifier	mode		90872	1					
ANR	92645	Identifier	R_AGRAPH_MODE_NORMAL		90872	1					
ANR	92646	ElseStatement	else		90872	0					
ANR	92647	CompoundStatement		343:10:10341:10341	90872	0					
ANR	92648	ExpressionStatement	g -> mode = R_AGRAPH_MODE_COMMENTS	4390:4:113652:113684	90872	0	True				
ANR	92649	AssignmentExpression	g -> mode = R_AGRAPH_MODE_COMMENTS		90872	0		=			
ANR	92650	PtrMemberAccess	g -> mode		90872	0					
ANR	92651	Identifier	g		90872	0					
ANR	92652	Identifier	mode		90872	1					
ANR	92653	Identifier	R_AGRAPH_MODE_COMMENTS		90872	1					
ANR	92654	ExpressionStatement	g -> need_reload_nodes = true	4392:3:113694:113721	90872	133	True				
ANR	92655	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92656	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92657	Identifier	g		90872	0					
ANR	92658	Identifier	need_reload_nodes		90872	1					
ANR	92659	Identifier	true		90872	1					
ANR	92660	ExpressionStatement	discroll = 0	4393:3:113726:113738	90872	134	True				
ANR	92661	AssignmentExpression	discroll = 0		90872	0		=			
ANR	92662	Identifier	discroll		90872	0					
ANR	92663	PrimaryExpression	0		90872	1					
ANR	92664	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4394:3:113743:113795	90872	135	True				
ANR	92665	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92666	Callee	agraph_update_seek		90872	0					
ANR	92667	Identifier	agraph_update_seek		90872	0					
ANR	92668	ArgumentList	g		90872	1					
ANR	92669	Argument	g		90872	0					
ANR	92670	Identifier	g		90872	0					
ANR	92671	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92672	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92673	Callee	get_anode		90872	0					
ANR	92674	Identifier	get_anode		90872	0					
ANR	92675	ArgumentList	g -> curnode		90872	1					
ANR	92676	Argument	g -> curnode		90872	0					
ANR	92677	PtrMemberAccess	g -> curnode		90872	0					
ANR	92678	Identifier	g		90872	0					
ANR	92679	Identifier	curnode		90872	1					
ANR	92680	Argument	true		90872	2					
ANR	92681	Identifier	true		90872	0					
ANR	92682	BreakStatement	break ;	4396:3:113853:113858	90872	136	True				
ANR	92683	Label	case 'p' :	4397:2:113862:113870	90872	137	True				
ANR	92684	ExpressionStatement	g -> mode = next_mode ( g -> mode )	4398:3:113875:113904	90872	138	True				
ANR	92685	AssignmentExpression	g -> mode = next_mode ( g -> mode )		90872	0		=			
ANR	92686	PtrMemberAccess	g -> mode		90872	0					
ANR	92687	Identifier	g		90872	0					
ANR	92688	Identifier	mode		90872	1					
ANR	92689	CallExpression	next_mode ( g -> mode )		90872	1					
ANR	92690	Callee	next_mode		90872	0					
ANR	92691	Identifier	next_mode		90872	0					
ANR	92692	ArgumentList	g -> mode		90872	1					
ANR	92693	Argument	g -> mode		90872	0					
ANR	92694	PtrMemberAccess	g -> mode		90872	0					
ANR	92695	Identifier	g		90872	0					
ANR	92696	Identifier	mode		90872	1					
ANR	92697	ExpressionStatement	g -> need_reload_nodes = true	4399:3:113909:113936	90872	139	True				
ANR	92698	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92699	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92700	Identifier	g		90872	0					
ANR	92701	Identifier	need_reload_nodes		90872	1					
ANR	92702	Identifier	true		90872	1					
ANR	92703	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4400:3:113941:113993	90872	140	True				
ANR	92704	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92705	Callee	agraph_update_seek		90872	0					
ANR	92706	Identifier	agraph_update_seek		90872	0					
ANR	92707	ArgumentList	g		90872	1					
ANR	92708	Argument	g		90872	0					
ANR	92709	Identifier	g		90872	0					
ANR	92710	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92711	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92712	Callee	get_anode		90872	0					
ANR	92713	Identifier	get_anode		90872	0					
ANR	92714	ArgumentList	g -> curnode		90872	1					
ANR	92715	Argument	g -> curnode		90872	0					
ANR	92716	PtrMemberAccess	g -> curnode		90872	0					
ANR	92717	Identifier	g		90872	0					
ANR	92718	Identifier	curnode		90872	1					
ANR	92719	Argument	true		90872	2					
ANR	92720	Identifier	true		90872	0					
ANR	92721	BreakStatement	break ;	4401:3:113998:114003	90872	141	True				
ANR	92722	Label	case 'P' :	4402:2:114007:114015	90872	142	True				
ANR	92723	IfStatement	if ( ! fcn )		90872	143					
ANR	92724	Condition	! fcn	4403:7:114024:114027	90872	0	True				
ANR	92725	UnaryOperationExpression	! fcn		90872	0					
ANR	92726	UnaryOperator	!		90872	0					
ANR	92727	Identifier	fcn		90872	1					
ANR	92728	CompoundStatement		357:13:10725:10725	90872	1					
ANR	92729	BreakStatement	break ;	4404:4:114036:114041	90872	0	True				
ANR	92730	ExpressionStatement	g -> mode = prev_mode ( g -> mode )	4406:3:114051:114080	90872	144	True				
ANR	92731	AssignmentExpression	g -> mode = prev_mode ( g -> mode )		90872	0		=			
ANR	92732	PtrMemberAccess	g -> mode		90872	0					
ANR	92733	Identifier	g		90872	0					
ANR	92734	Identifier	mode		90872	1					
ANR	92735	CallExpression	prev_mode ( g -> mode )		90872	1					
ANR	92736	Callee	prev_mode		90872	0					
ANR	92737	Identifier	prev_mode		90872	0					
ANR	92738	ArgumentList	g -> mode		90872	1					
ANR	92739	Argument	g -> mode		90872	0					
ANR	92740	PtrMemberAccess	g -> mode		90872	0					
ANR	92741	Identifier	g		90872	0					
ANR	92742	Identifier	mode		90872	1					
ANR	92743	ExpressionStatement	g -> need_reload_nodes = true	4407:3:114085:114112	90872	145	True				
ANR	92744	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92745	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92746	Identifier	g		90872	0					
ANR	92747	Identifier	need_reload_nodes		90872	1					
ANR	92748	Identifier	true		90872	1					
ANR	92749	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4408:3:114117:114169	90872	146	True				
ANR	92750	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	92751	Callee	agraph_update_seek		90872	0					
ANR	92752	Identifier	agraph_update_seek		90872	0					
ANR	92753	ArgumentList	g		90872	1					
ANR	92754	Argument	g		90872	0					
ANR	92755	Identifier	g		90872	0					
ANR	92756	Argument	get_anode ( g -> curnode )		90872	1					
ANR	92757	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	92758	Callee	get_anode		90872	0					
ANR	92759	Identifier	get_anode		90872	0					
ANR	92760	ArgumentList	g -> curnode		90872	1					
ANR	92761	Argument	g -> curnode		90872	0					
ANR	92762	PtrMemberAccess	g -> curnode		90872	0					
ANR	92763	Identifier	g		90872	0					
ANR	92764	Identifier	curnode		90872	1					
ANR	92765	Argument	true		90872	2					
ANR	92766	Identifier	true		90872	0					
ANR	92767	BreakStatement	break ;	4409:3:114174:114179	90872	147	True				
ANR	92768	Label	case 'o' :	4410:2:114183:114191	90872	148	True				
ANR	92769	ExpressionStatement	"goto_asmqjmps ( g , core )"	4411:3:114196:114219	90872	149	True				
ANR	92770	CallExpression	"goto_asmqjmps ( g , core )"		90872	0					
ANR	92771	Callee	goto_asmqjmps		90872	0					
ANR	92772	Identifier	goto_asmqjmps		90872	0					
ANR	92773	ArgumentList	g		90872	1					
ANR	92774	Argument	g		90872	0					
ANR	92775	Identifier	g		90872	0					
ANR	92776	Argument	core		90872	1					
ANR	92777	Identifier	core		90872	0					
ANR	92778	BreakStatement	break ;	4412:3:114224:114229	90872	150	True				
ANR	92779	Label	case 'g' :	4413:2:114233:114241	90872	151	True				
ANR	92780	ExpressionStatement	"showcursor ( core , true )"	4414:3:114246:114269	90872	152	True				
ANR	92781	CallExpression	"showcursor ( core , true )"		90872	0					
ANR	92782	Callee	showcursor		90872	0					
ANR	92783	Identifier	showcursor		90872	0					
ANR	92784	ArgumentList	core		90872	1					
ANR	92785	Argument	core		90872	0					
ANR	92786	Identifier	core		90872	0					
ANR	92787	Argument	true		90872	1					
ANR	92788	Identifier	true		90872	0					
ANR	92789	ExpressionStatement	"visual_offset ( g , core )"	4415:3:114274:114297	90872	153	True				
ANR	92790	CallExpression	"visual_offset ( g , core )"		90872	0					
ANR	92791	Callee	visual_offset		90872	0					
ANR	92792	Identifier	visual_offset		90872	0					
ANR	92793	ArgumentList	g		90872	1					
ANR	92794	Argument	g		90872	0					
ANR	92795	Identifier	g		90872	0					
ANR	92796	Argument	core		90872	1					
ANR	92797	Identifier	core		90872	0					
ANR	92798	ExpressionStatement	"showcursor ( core , false )"	4416:3:114302:114326	90872	154	True				
ANR	92799	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	92800	Callee	showcursor		90872	0					
ANR	92801	Identifier	showcursor		90872	0					
ANR	92802	ArgumentList	core		90872	1					
ANR	92803	Argument	core		90872	0					
ANR	92804	Identifier	core		90872	0					
ANR	92805	Argument	false		90872	1					
ANR	92806	Identifier	false		90872	0					
ANR	92807	BreakStatement	break ;	4417:3:114331:114336	90872	155	True				
ANR	92808	Label	case 'O' :	4418:2:114340:114348	90872	156	True				
ANR	92809	IfStatement	if ( ! fcn )		90872	157					
ANR	92810	Condition	! fcn	4419:7:114357:114360	90872	0	True				
ANR	92811	UnaryOperationExpression	! fcn		90872	0					
ANR	92812	UnaryOperator	!		90872	0					
ANR	92813	Identifier	fcn		90872	1					
ANR	92814	CompoundStatement		373:13:11058:11058	90872	1					
ANR	92815	BreakStatement	break ;	4420:4:114369:114374	90872	0	True				
ANR	92816	ExpressionStatement	disMode = ( disMode + 1 ) % 3	4422:3:114384:114411	90872	158	True				
ANR	92817	AssignmentExpression	disMode = ( disMode + 1 ) % 3		90872	0		=			
ANR	92818	Identifier	disMode		90872	0					
ANR	92819	MultiplicativeExpression	( disMode + 1 ) % 3		90872	1		%			
ANR	92820	AdditiveExpression	disMode + 1		90872	0		+			
ANR	92821	Identifier	disMode		90872	0					
ANR	92822	PrimaryExpression	1		90872	1					
ANR	92823	PrimaryExpression	3		90872	1					
ANR	92824	ExpressionStatement	applyDisMode ( core )	4423:3:114416:114435	90872	159	True				
ANR	92825	CallExpression	applyDisMode ( core )		90872	0					
ANR	92826	Callee	applyDisMode		90872	0					
ANR	92827	Identifier	applyDisMode		90872	0					
ANR	92828	ArgumentList	core		90872	1					
ANR	92829	Argument	core		90872	0					
ANR	92830	Identifier	core		90872	0					
ANR	92831	ExpressionStatement	g -> need_reload_nodes = true	4424:3:114440:114467	90872	160	True				
ANR	92832	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92833	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92834	Identifier	g		90872	0					
ANR	92835	Identifier	need_reload_nodes		90872	1					
ANR	92836	Identifier	true		90872	1					
ANR	92837	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4425:3:114472:114499	90872	161	True				
ANR	92838	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	92839	Callee	get_bbupdate		90872	0					
ANR	92840	Identifier	get_bbupdate		90872	0					
ANR	92841	ArgumentList	g		90872	1					
ANR	92842	Argument	g		90872	0					
ANR	92843	Identifier	g		90872	0					
ANR	92844	Argument	core		90872	1					
ANR	92845	Identifier	core		90872	0					
ANR	92846	Argument	fcn		90872	2					
ANR	92847	Identifier	fcn		90872	0					
ANR	92848	BreakStatement	break ;	4426:3:114504:114509	90872	162	True				
ANR	92849	Label	case 'u' :	4427:2:114514:114522	90872	163	True				
ANR	92850	CompoundStatement		386:3:11257:11309	90872	164					
ANR	92851	IfStatement	if ( ! fcn )		90872	0					
ANR	92852	Condition	! fcn	4429:7:114535:114538	90872	0	True				
ANR	92853	UnaryOperationExpression	! fcn		90872	0					
ANR	92854	UnaryOperator	!		90872	0					
ANR	92855	Identifier	fcn		90872	1					
ANR	92856	CompoundStatement		383:13:11236:11236	90872	1					
ANR	92857	BreakStatement	break ;	4430:4:114547:114552	90872	0	True				
ANR	92858	IdentifierDeclStatement	"RIOUndos * undo = r_io_sundo ( core -> io , core -> offset ) ;"	4432:3:114562:114614	90872	1	True				
ANR	92859	IdentifierDecl	"* undo = r_io_sundo ( core -> io , core -> offset )"		90872	0					
ANR	92860	IdentifierDeclType	RIOUndos *		90872	0					
ANR	92861	Identifier	undo		90872	1					
ANR	92862	AssignmentExpression	"* undo = r_io_sundo ( core -> io , core -> offset )"		90872	2		=			
ANR	92863	Identifier	undo		90872	0					
ANR	92864	CallExpression	"r_io_sundo ( core -> io , core -> offset )"		90872	1					
ANR	92865	Callee	r_io_sundo		90872	0					
ANR	92866	Identifier	r_io_sundo		90872	0					
ANR	92867	ArgumentList	core -> io		90872	1					
ANR	92868	Argument	core -> io		90872	0					
ANR	92869	PtrMemberAccess	core -> io		90872	0					
ANR	92870	Identifier	core		90872	0					
ANR	92871	Identifier	io		90872	1					
ANR	92872	Argument	core -> offset		90872	1					
ANR	92873	PtrMemberAccess	core -> offset		90872	0					
ANR	92874	Identifier	core		90872	0					
ANR	92875	Identifier	offset		90872	1					
ANR	92876	IfStatement	if ( undo )		90872	2					
ANR	92877	Condition	undo	4433:7:114623:114626	90872	0	True				
ANR	92878	Identifier	undo		90872	0					
ANR	92879	CompoundStatement		387:13:11324:11324	90872	1					
ANR	92880	ExpressionStatement	"r_core_seek ( core , undo -> off , 0 )"	4434:4:114635:114667	90872	0	True				
ANR	92881	CallExpression	"r_core_seek ( core , undo -> off , 0 )"		90872	0					
ANR	92882	Callee	r_core_seek		90872	0					
ANR	92883	Identifier	r_core_seek		90872	0					
ANR	92884	ArgumentList	core		90872	1					
ANR	92885	Argument	core		90872	0					
ANR	92886	Identifier	core		90872	0					
ANR	92887	Argument	undo -> off		90872	1					
ANR	92888	PtrMemberAccess	undo -> off		90872	0					
ANR	92889	Identifier	undo		90872	0					
ANR	92890	Identifier	off		90872	1					
ANR	92891	Argument	0		90872	2					
ANR	92892	PrimaryExpression	0		90872	0					
ANR	92893	ElseStatement	else		90872	0					
ANR	92894	CompoundStatement		389:10:11374:11374	90872	0					
ANR	92895	ExpressionStatement	"eprintf ( ""Cannot undo\\n"" )"	4436:4:114685:114710	90872	0	True				
ANR	92896	CallExpression	"eprintf ( ""Cannot undo\\n"" )"		90872	0					
ANR	92897	Callee	eprintf		90872	0					
ANR	92898	Identifier	eprintf		90872	0					
ANR	92899	ArgumentList	"""Cannot undo\\n"""		90872	1					
ANR	92900	Argument	"""Cannot undo\\n"""		90872	0					
ANR	92901	PrimaryExpression	"""Cannot undo\\n"""		90872	0					
ANR	92902	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.few"" ) )"		90872	3					
ANR	92903	Condition	"r_config_get_i ( core -> config , ""graph.few"" )"	4438:7:114724:114765	90872	0	True				
ANR	92904	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		90872	0					
ANR	92905	Callee	r_config_get_i		90872	0					
ANR	92906	Identifier	r_config_get_i		90872	0					
ANR	92907	ArgumentList	core -> config		90872	1					
ANR	92908	Argument	core -> config		90872	0					
ANR	92909	PtrMemberAccess	core -> config		90872	0					
ANR	92910	Identifier	core		90872	0					
ANR	92911	Identifier	config		90872	1					
ANR	92912	Argument	"""graph.few"""		90872	1					
ANR	92913	PrimaryExpression	"""graph.few"""		90872	0					
ANR	92914	CompoundStatement		392:51:11463:11463	90872	1					
ANR	92915	ExpressionStatement	g -> need_reload_nodes = true	4439:4:114774:114801	90872	0	True				
ANR	92916	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92917	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92918	Identifier	g		90872	0					
ANR	92919	Identifier	need_reload_nodes		90872	1					
ANR	92920	Identifier	true		90872	1					
ANR	92921	BreakStatement	break ;	4441:3:114811:114816	90872	4	True				
ANR	92922	Label	case 'U' :	4443:2:114824:114832	90872	165	True				
ANR	92923	CompoundStatement		402:3:11567:11610	90872	166					
ANR	92924	IfStatement	if ( ! fcn )		90872	0					
ANR	92925	Condition	! fcn	4445:7:114845:114848	90872	0	True				
ANR	92926	UnaryOperationExpression	! fcn		90872	0					
ANR	92927	UnaryOperator	!		90872	0					
ANR	92928	Identifier	fcn		90872	1					
ANR	92929	CompoundStatement		399:13:11546:11546	90872	1					
ANR	92930	BreakStatement	break ;	4446:4:114857:114862	90872	0	True				
ANR	92931	IdentifierDeclStatement	RIOUndos * undo = r_io_sundo_redo ( core -> io ) ;	4448:3:114872:114915	90872	1	True				
ANR	92932	IdentifierDecl	* undo = r_io_sundo_redo ( core -> io )		90872	0					
ANR	92933	IdentifierDeclType	RIOUndos *		90872	0					
ANR	92934	Identifier	undo		90872	1					
ANR	92935	AssignmentExpression	* undo = r_io_sundo_redo ( core -> io )		90872	2		=			
ANR	92936	Identifier	undo		90872	0					
ANR	92937	CallExpression	r_io_sundo_redo ( core -> io )		90872	1					
ANR	92938	Callee	r_io_sundo_redo		90872	0					
ANR	92939	Identifier	r_io_sundo_redo		90872	0					
ANR	92940	ArgumentList	core -> io		90872	1					
ANR	92941	Argument	core -> io		90872	0					
ANR	92942	PtrMemberAccess	core -> io		90872	0					
ANR	92943	Identifier	core		90872	0					
ANR	92944	Identifier	io		90872	1					
ANR	92945	IfStatement	if ( undo )		90872	2					
ANR	92946	Condition	undo	4449:7:114924:114927	90872	0	True				
ANR	92947	Identifier	undo		90872	0					
ANR	92948	CompoundStatement		403:13:11625:11625	90872	1					
ANR	92949	ExpressionStatement	"r_core_seek ( core , undo -> off , 0 )"	4450:4:114936:114968	90872	0	True				
ANR	92950	CallExpression	"r_core_seek ( core , undo -> off , 0 )"		90872	0					
ANR	92951	Callee	r_core_seek		90872	0					
ANR	92952	Identifier	r_core_seek		90872	0					
ANR	92953	ArgumentList	core		90872	1					
ANR	92954	Argument	core		90872	0					
ANR	92955	Identifier	core		90872	0					
ANR	92956	Argument	undo -> off		90872	1					
ANR	92957	PtrMemberAccess	undo -> off		90872	0					
ANR	92958	Identifier	undo		90872	0					
ANR	92959	Identifier	off		90872	1					
ANR	92960	Argument	0		90872	2					
ANR	92961	PrimaryExpression	0		90872	0					
ANR	92962	ElseStatement	else		90872	0					
ANR	92963	CompoundStatement		405:10:11675:11675	90872	0					
ANR	92964	ExpressionStatement	"eprintf ( ""Cannot redo\\n"" )"	4452:4:114986:115011	90872	0	True				
ANR	92965	CallExpression	"eprintf ( ""Cannot redo\\n"" )"		90872	0					
ANR	92966	Callee	eprintf		90872	0					
ANR	92967	Identifier	eprintf		90872	0					
ANR	92968	ArgumentList	"""Cannot redo\\n"""		90872	1					
ANR	92969	Argument	"""Cannot redo\\n"""		90872	0					
ANR	92970	PrimaryExpression	"""Cannot redo\\n"""		90872	0					
ANR	92971	BreakStatement	break ;	4454:3:115021:115026	90872	3	True				
ANR	92972	Label	case 'r' :	4456:2:115034:115042	90872	167	True				
ANR	92973	IfStatement	if ( fcn )		90872	168					
ANR	92974	Condition	fcn	4457:7:115051:115053	90872	0	True				
ANR	92975	Identifier	fcn		90872	0					
ANR	92976	CompoundStatement		411:12:11751:11751	90872	1					
ANR	92977	ExpressionStatement	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"	4458:4:115062:115119	90872	0	True				
ANR	92978	AssignmentExpression	"g -> layout = r_config_get_i ( core -> config , ""graph.layout"" )"		90872	0		=			
ANR	92979	PtrMemberAccess	g -> layout		90872	0					
ANR	92980	Identifier	g		90872	0					
ANR	92981	Identifier	layout		90872	1					
ANR	92982	CallExpression	"r_config_get_i ( core -> config , ""graph.layout"" )"		90872	1					
ANR	92983	Callee	r_config_get_i		90872	0					
ANR	92984	Identifier	r_config_get_i		90872	0					
ANR	92985	ArgumentList	core -> config		90872	1					
ANR	92986	Argument	core -> config		90872	0					
ANR	92987	PtrMemberAccess	core -> config		90872	0					
ANR	92988	Identifier	core		90872	0					
ANR	92989	Identifier	config		90872	1					
ANR	92990	Argument	"""graph.layout"""		90872	1					
ANR	92991	PrimaryExpression	"""graph.layout"""		90872	0					
ANR	92992	ExpressionStatement	g -> need_reload_nodes = true	4459:4:115125:115152	90872	1	True				
ANR	92993	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	92994	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	92995	Identifier	g		90872	0					
ANR	92996	Identifier	need_reload_nodes		90872	1					
ANR	92997	Identifier	true		90872	1					
ANR	92998	IfStatement	"if ( r_config_get_i ( core -> config , ""asm.hint.call"" ) )"		90872	169					
ANR	92999	Condition	"r_config_get_i ( core -> config , ""asm.hint.call"" )"	4462:7:115202:115247	90872	0	True				
ANR	93000	CallExpression	"r_config_get_i ( core -> config , ""asm.hint.call"" )"		90872	0					
ANR	93001	Callee	r_config_get_i		90872	0					
ANR	93002	Identifier	r_config_get_i		90872	0					
ANR	93003	ArgumentList	core -> config		90872	1					
ANR	93004	Argument	core -> config		90872	0					
ANR	93005	PtrMemberAccess	core -> config		90872	0					
ANR	93006	Identifier	core		90872	0					
ANR	93007	Identifier	config		90872	1					
ANR	93008	Argument	"""asm.hint.call"""		90872	1					
ANR	93009	PrimaryExpression	"""asm.hint.call"""		90872	0					
ANR	93010	CompoundStatement		416:55:11945:11945	90872	1					
ANR	93011	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.call"" )"	4463:4:115256:115293	90872	0	True				
ANR	93012	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.call"" )"		90872	0					
ANR	93013	Callee	r_core_cmd0		90872	0					
ANR	93014	Identifier	r_core_cmd0		90872	0					
ANR	93015	ArgumentList	core		90872	1					
ANR	93016	Argument	core		90872	0					
ANR	93017	Identifier	core		90872	0					
ANR	93018	Argument	"""e!asm.hint.call"""		90872	1					
ANR	93019	PrimaryExpression	"""e!asm.hint.call"""		90872	0					
ANR	93020	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.jmp"" )"	4464:4:115299:115335	90872	1	True				
ANR	93021	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.jmp"" )"		90872	0					
ANR	93022	Callee	r_core_cmd0		90872	0					
ANR	93023	Identifier	r_core_cmd0		90872	0					
ANR	93024	ArgumentList	core		90872	1					
ANR	93025	Argument	core		90872	0					
ANR	93026	Identifier	core		90872	0					
ANR	93027	Argument	"""e!asm.hint.jmp"""		90872	1					
ANR	93028	PrimaryExpression	"""e!asm.hint.jmp"""		90872	0					
ANR	93029	ElseStatement	else		90872	0					
ANR	93030	IfStatement	"if ( r_config_get_i ( core -> config , ""asm.hint.jmp"" ) )"		90872	0					
ANR	93031	Condition	"r_config_get_i ( core -> config , ""asm.hint.jmp"" )"	4465:14:115351:115395	90872	0	True				
ANR	93032	CallExpression	"r_config_get_i ( core -> config , ""asm.hint.jmp"" )"		90872	0					
ANR	93033	Callee	r_config_get_i		90872	0					
ANR	93034	Identifier	r_config_get_i		90872	0					
ANR	93035	ArgumentList	core -> config		90872	1					
ANR	93036	Argument	core -> config		90872	0					
ANR	93037	PtrMemberAccess	core -> config		90872	0					
ANR	93038	Identifier	core		90872	0					
ANR	93039	Identifier	config		90872	1					
ANR	93040	Argument	"""asm.hint.jmp"""		90872	1					
ANR	93041	PrimaryExpression	"""asm.hint.jmp"""		90872	0					
ANR	93042	CompoundStatement		419:61:12093:12093	90872	1					
ANR	93043	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.jmp"" )"	4466:4:115404:115440	90872	0	True				
ANR	93044	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.jmp"" )"		90872	0					
ANR	93045	Callee	r_core_cmd0		90872	0					
ANR	93046	Identifier	r_core_cmd0		90872	0					
ANR	93047	ArgumentList	core		90872	1					
ANR	93048	Argument	core		90872	0					
ANR	93049	Identifier	core		90872	0					
ANR	93050	Argument	"""e!asm.hint.jmp"""		90872	1					
ANR	93051	PrimaryExpression	"""e!asm.hint.jmp"""		90872	0					
ANR	93052	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.lea"" )"	4467:4:115446:115482	90872	1	True				
ANR	93053	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.lea"" )"		90872	0					
ANR	93054	Callee	r_core_cmd0		90872	0					
ANR	93055	Identifier	r_core_cmd0		90872	0					
ANR	93056	ArgumentList	core		90872	1					
ANR	93057	Argument	core		90872	0					
ANR	93058	Identifier	core		90872	0					
ANR	93059	Argument	"""e!asm.hint.lea"""		90872	1					
ANR	93060	PrimaryExpression	"""e!asm.hint.lea"""		90872	0					
ANR	93061	ElseStatement	else		90872	0					
ANR	93062	IfStatement	"if ( r_config_get_i ( core -> config , ""asm.hint.lea"" ) )"		90872	0					
ANR	93063	Condition	"r_config_get_i ( core -> config , ""asm.hint.lea"" )"	4468:14:115498:115542	90872	0	True				
ANR	93064	CallExpression	"r_config_get_i ( core -> config , ""asm.hint.lea"" )"		90872	0					
ANR	93065	Callee	r_config_get_i		90872	0					
ANR	93066	Identifier	r_config_get_i		90872	0					
ANR	93067	ArgumentList	core -> config		90872	1					
ANR	93068	Argument	core -> config		90872	0					
ANR	93069	PtrMemberAccess	core -> config		90872	0					
ANR	93070	Identifier	core		90872	0					
ANR	93071	Identifier	config		90872	1					
ANR	93072	Argument	"""asm.hint.lea"""		90872	1					
ANR	93073	PrimaryExpression	"""asm.hint.lea"""		90872	0					
ANR	93074	CompoundStatement		422:61:12240:12240	90872	1					
ANR	93075	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.lea"" )"	4469:4:115551:115587	90872	0	True				
ANR	93076	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.lea"" )"		90872	0					
ANR	93077	Callee	r_core_cmd0		90872	0					
ANR	93078	Identifier	r_core_cmd0		90872	0					
ANR	93079	ArgumentList	core		90872	1					
ANR	93080	Argument	core		90872	0					
ANR	93081	Identifier	core		90872	0					
ANR	93082	Argument	"""e!asm.hint.lea"""		90872	1					
ANR	93083	PrimaryExpression	"""e!asm.hint.lea"""		90872	0					
ANR	93084	ExpressionStatement	"r_core_cmd0 ( core , ""e!asm.hint.call"" )"	4470:4:115593:115630	90872	1	True				
ANR	93085	CallExpression	"r_core_cmd0 ( core , ""e!asm.hint.call"" )"		90872	0					
ANR	93086	Callee	r_core_cmd0		90872	0					
ANR	93087	Identifier	r_core_cmd0		90872	0					
ANR	93088	ArgumentList	core		90872	1					
ANR	93089	Argument	core		90872	0					
ANR	93090	Identifier	core		90872	0					
ANR	93091	Argument	"""e!asm.hint.call"""		90872	1					
ANR	93092	PrimaryExpression	"""e!asm.hint.call"""		90872	0					
ANR	93093	BreakStatement	break ;	4472:3:115640:115645	90872	170	True				
ANR	93094	Label	case '$' :	4473:2:115649:115657	90872	171	True				
ANR	93095	ExpressionStatement	"r_core_cmd ( core , ""dr PC=$$"" , 0 )"	4474:3:115662:115694	90872	172	True				
ANR	93096	CallExpression	"r_core_cmd ( core , ""dr PC=$$"" , 0 )"		90872	0					
ANR	93097	Callee	r_core_cmd		90872	0					
ANR	93098	Identifier	r_core_cmd		90872	0					
ANR	93099	ArgumentList	core		90872	1					
ANR	93100	Argument	core		90872	0					
ANR	93101	Identifier	core		90872	0					
ANR	93102	Argument	"""dr PC=$$"""		90872	1					
ANR	93103	PrimaryExpression	"""dr PC=$$"""		90872	0					
ANR	93104	Argument	0		90872	2					
ANR	93105	PrimaryExpression	0		90872	0					
ANR	93106	ExpressionStatement	"r_core_cmd ( core , ""sr PC"" , 0 )"	4475:3:115699:115728	90872	173	True				
ANR	93107	CallExpression	"r_core_cmd ( core , ""sr PC"" , 0 )"		90872	0					
ANR	93108	Callee	r_core_cmd		90872	0					
ANR	93109	Identifier	r_core_cmd		90872	0					
ANR	93110	ArgumentList	core		90872	1					
ANR	93111	Argument	core		90872	0					
ANR	93112	Identifier	core		90872	0					
ANR	93113	Argument	"""sr PC"""		90872	1					
ANR	93114	PrimaryExpression	"""sr PC"""		90872	0					
ANR	93115	Argument	0		90872	2					
ANR	93116	PrimaryExpression	0		90872	0					
ANR	93117	ExpressionStatement	g -> need_reload_nodes = true	4476:3:115733:115760	90872	174	True				
ANR	93118	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	93119	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	93120	Identifier	g		90872	0					
ANR	93121	Identifier	need_reload_nodes		90872	1					
ANR	93122	Identifier	true		90872	1					
ANR	93123	BreakStatement	break ;	4477:3:115765:115770	90872	175	True				
ANR	93124	Label	case 'R' :	4478:2:115774:115782	90872	176	True				
ANR	93125	IfStatement	"if ( r_config_get_i ( core -> config , ""scr.randpal"" ) )"		90872	177					
ANR	93126	Condition	"r_config_get_i ( core -> config , ""scr.randpal"" )"	4479:7:115791:115834	90872	0	True				
ANR	93127	CallExpression	"r_config_get_i ( core -> config , ""scr.randpal"" )"		90872	0					
ANR	93128	Callee	r_config_get_i		90872	0					
ANR	93129	Identifier	r_config_get_i		90872	0					
ANR	93130	ArgumentList	core -> config		90872	1					
ANR	93131	Argument	core -> config		90872	0					
ANR	93132	PtrMemberAccess	core -> config		90872	0					
ANR	93133	Identifier	core		90872	0					
ANR	93134	Identifier	config		90872	1					
ANR	93135	Argument	"""scr.randpal"""		90872	1					
ANR	93136	PrimaryExpression	"""scr.randpal"""		90872	0					
ANR	93137	CompoundStatement		433:53:12532:12532	90872	1					
ANR	93138	ExpressionStatement	"r_core_cmd0 ( core , ""ecr"" )"	4480:4:115843:115868	90872	0	True				
ANR	93139	CallExpression	"r_core_cmd0 ( core , ""ecr"" )"		90872	0					
ANR	93140	Callee	r_core_cmd0		90872	0					
ANR	93141	Identifier	r_core_cmd0		90872	0					
ANR	93142	ArgumentList	core		90872	1					
ANR	93143	Argument	core		90872	0					
ANR	93144	Identifier	core		90872	0					
ANR	93145	Argument	"""ecr"""		90872	1					
ANR	93146	PrimaryExpression	"""ecr"""		90872	0					
ANR	93147	ElseStatement	else		90872	0					
ANR	93148	CompoundStatement		435:10:12575:12575	90872	0					
ANR	93149	ExpressionStatement	"r_core_cmd0 ( core , ""ecn"" )"	4482:4:115886:115911	90872	0	True				
ANR	93150	CallExpression	"r_core_cmd0 ( core , ""ecn"" )"		90872	0					
ANR	93151	Callee	r_core_cmd0		90872	0					
ANR	93152	Identifier	r_core_cmd0		90872	0					
ANR	93153	ArgumentList	core		90872	1					
ANR	93154	Argument	core		90872	0					
ANR	93155	Identifier	core		90872	0					
ANR	93156	Argument	"""ecn"""		90872	1					
ANR	93157	PrimaryExpression	"""ecn"""		90872	0					
ANR	93158	IfStatement	if ( ! fcn )		90872	178					
ANR	93159	Condition	! fcn	4484:7:115925:115928	90872	0	True				
ANR	93160	UnaryOperationExpression	! fcn		90872	0					
ANR	93161	UnaryOperator	!		90872	0					
ANR	93162	Identifier	fcn		90872	1					
ANR	93163	CompoundStatement		438:13:12626:12626	90872	1					
ANR	93164	BreakStatement	break ;	4485:4:115937:115942	90872	0	True				
ANR	93165	ExpressionStatement	"g -> edgemode = r_config_get_i ( core -> config , ""graph.edges"" )"	4487:3:115952:116010	90872	179	True				
ANR	93166	AssignmentExpression	"g -> edgemode = r_config_get_i ( core -> config , ""graph.edges"" )"		90872	0		=			
ANR	93167	PtrMemberAccess	g -> edgemode		90872	0					
ANR	93168	Identifier	g		90872	0					
ANR	93169	Identifier	edgemode		90872	1					
ANR	93170	CallExpression	"r_config_get_i ( core -> config , ""graph.edges"" )"		90872	1					
ANR	93171	Callee	r_config_get_i		90872	0					
ANR	93172	Identifier	r_config_get_i		90872	0					
ANR	93173	ArgumentList	core -> config		90872	1					
ANR	93174	Argument	core -> config		90872	0					
ANR	93175	PtrMemberAccess	core -> config		90872	0					
ANR	93176	Identifier	core		90872	0					
ANR	93177	Identifier	config		90872	1					
ANR	93178	Argument	"""graph.edges"""		90872	1					
ANR	93179	PrimaryExpression	"""graph.edges"""		90872	0					
ANR	93180	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4488:3:116015:116042	90872	180	True				
ANR	93181	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	93182	Callee	get_bbupdate		90872	0					
ANR	93183	Identifier	get_bbupdate		90872	0					
ANR	93184	ArgumentList	g		90872	1					
ANR	93185	Argument	g		90872	0					
ANR	93186	Identifier	g		90872	0					
ANR	93187	Argument	core		90872	1					
ANR	93188	Identifier	core		90872	0					
ANR	93189	Argument	fcn		90872	2					
ANR	93190	Identifier	fcn		90872	0					
ANR	93191	BreakStatement	break ;	4489:3:116047:116052	90872	181	True				
ANR	93192	Label	case '!' :	4490:2:116056:116064	90872	182	True				
ANR	93193	ExpressionStatement	"r_core_visual_panels_root ( core , core -> panels_root )"	4491:3:116069:116120	90872	183	True				
ANR	93194	CallExpression	"r_core_visual_panels_root ( core , core -> panels_root )"		90872	0					
ANR	93195	Callee	r_core_visual_panels_root		90872	0					
ANR	93196	Identifier	r_core_visual_panels_root		90872	0					
ANR	93197	ArgumentList	core		90872	1					
ANR	93198	Argument	core		90872	0					
ANR	93199	Identifier	core		90872	0					
ANR	93200	Argument	core -> panels_root		90872	1					
ANR	93201	PtrMemberAccess	core -> panels_root		90872	0					
ANR	93202	Identifier	core		90872	0					
ANR	93203	Identifier	panels_root		90872	1					
ANR	93204	BreakStatement	break ;	4492:3:116125:116130	90872	184	True				
ANR	93205	Label	case '\\'' :	4493:2:116134:116143	90872	185	True				
ANR	93206	IfStatement	if ( fcn )		90872	186					
ANR	93207	Condition	fcn	4494:7:116152:116154	90872	0	True				
ANR	93208	Identifier	fcn		90872	0					
ANR	93209	CompoundStatement		448:12:12852:12852	90872	1					
ANR	93210	ExpressionStatement	"r_config_toggle ( core -> config , ""graph.comments"" )"	4495:4:116163:116211	90872	0	True				
ANR	93211	CallExpression	"r_config_toggle ( core -> config , ""graph.comments"" )"		90872	0					
ANR	93212	Callee	r_config_toggle		90872	0					
ANR	93213	Identifier	r_config_toggle		90872	0					
ANR	93214	ArgumentList	core -> config		90872	1					
ANR	93215	Argument	core -> config		90872	0					
ANR	93216	PtrMemberAccess	core -> config		90872	0					
ANR	93217	Identifier	core		90872	0					
ANR	93218	Identifier	config		90872	1					
ANR	93219	Argument	"""graph.comments"""		90872	1					
ANR	93220	PrimaryExpression	"""graph.comments"""		90872	0					
ANR	93221	ExpressionStatement	g -> need_reload_nodes = true	4496:4:116217:116244	90872	1	True				
ANR	93222	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	93223	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	93224	Identifier	g		90872	0					
ANR	93225	Identifier	need_reload_nodes		90872	1					
ANR	93226	Identifier	true		90872	1					
ANR	93227	BreakStatement	break ;	4498:3:116254:116259	90872	187	True				
ANR	93228	Label	case ';' :	4499:2:116263:116271	90872	188	True				
ANR	93229	IfStatement	if ( fcn )		90872	189					
ANR	93230	Condition	fcn	4500:7:116280:116282	90872	0	True				
ANR	93231	Identifier	fcn		90872	0					
ANR	93232	CompoundStatement		456:4:13015:13028	90872	1					
ANR	93233	ExpressionStatement	"showcursor ( core , true )"	4501:4:116291:116314	90872	0	True				
ANR	93234	CallExpression	"showcursor ( core , true )"		90872	0					
ANR	93235	Callee	showcursor		90872	0					
ANR	93236	Identifier	showcursor		90872	0					
ANR	93237	ArgumentList	core		90872	1					
ANR	93238	Argument	core		90872	0					
ANR	93239	Identifier	core		90872	0					
ANR	93240	Argument	true		90872	1					
ANR	93241	Identifier	true		90872	0					
ANR	93242	IdentifierDeclStatement	char buf [ 256 ] ;	4502:4:116320:116333	90872	1	True				
ANR	93243	IdentifierDecl	buf [ 256 ]		90872	0					
ANR	93244	IdentifierDeclType	char [ 256 ]		90872	0					
ANR	93245	Identifier	buf		90872	1					
ANR	93246	PrimaryExpression	256		90872	2					
ANR	93247	ExpressionStatement	"r_line_set_prompt ( ""[comment]> "" )"	4503:4:116339:116372	90872	2	True				
ANR	93248	CallExpression	"r_line_set_prompt ( ""[comment]> "" )"		90872	0					
ANR	93249	Callee	r_line_set_prompt		90872	0					
ANR	93250	Identifier	r_line_set_prompt		90872	0					
ANR	93251	ArgumentList	"""[comment]> """		90872	1					
ANR	93252	Argument	"""[comment]> """		90872	0					
ANR	93253	PrimaryExpression	"""[comment]> """		90872	0					
ANR	93254	IfStatement	"if ( r_cons_fgets ( buf , sizeof ( buf ) - 1 , 0 , NULL ) > 0 )"		90872	3					
ANR	93255	Condition	"r_cons_fgets ( buf , sizeof ( buf ) - 1 , 0 , NULL ) > 0"	4504:8:116382:116430	90872	0	True				
ANR	93256	RelationalExpression	"r_cons_fgets ( buf , sizeof ( buf ) - 1 , 0 , NULL ) > 0"		90872	0		>			
ANR	93257	CallExpression	"r_cons_fgets ( buf , sizeof ( buf ) - 1 , 0 , NULL )"		90872	0					
ANR	93258	Callee	r_cons_fgets		90872	0					
ANR	93259	Identifier	r_cons_fgets		90872	0					
ANR	93260	ArgumentList	buf		90872	1					
ANR	93261	Argument	buf		90872	0					
ANR	93262	Identifier	buf		90872	0					
ANR	93263	Argument	sizeof ( buf ) - 1		90872	1					
ANR	93264	AdditiveExpression	sizeof ( buf ) - 1		90872	0		-			
ANR	93265	SizeofExpression	sizeof ( buf )		90872	0					
ANR	93266	Sizeof	sizeof		90872	0					
ANR	93267	SizeofOperand	buf		90872	1					
ANR	93268	PrimaryExpression	1		90872	1					
ANR	93269	Argument	0		90872	2					
ANR	93270	PrimaryExpression	0		90872	0					
ANR	93271	Argument	NULL		90872	3					
ANR	93272	Identifier	NULL		90872	0					
ANR	93273	PrimaryExpression	0		90872	1					
ANR	93274	CompoundStatement		458:59:13128:13128	90872	1					
ANR	93275	ExpressionStatement	"r_core_cmdf ( core , ""\\""CC %s\\"""" , buf )"	4505:5:116440:116476	90872	0	True				
ANR	93276	CallExpression	"r_core_cmdf ( core , ""\\""CC %s\\"""" , buf )"		90872	0					
ANR	93277	Callee	r_core_cmdf		90872	0					
ANR	93278	Identifier	r_core_cmdf		90872	0					
ANR	93279	ArgumentList	core		90872	1					
ANR	93280	Argument	core		90872	0					
ANR	93281	Identifier	core		90872	0					
ANR	93282	Argument	"""\\""CC %s\\"""""		90872	1					
ANR	93283	PrimaryExpression	"""\\""CC %s\\"""""		90872	0					
ANR	93284	Argument	buf		90872	2					
ANR	93285	Identifier	buf		90872	0					
ANR	93286	ExpressionStatement	g -> need_reload_nodes = true	4507:4:116488:116515	90872	4	True				
ANR	93287	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	93288	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	93289	Identifier	g		90872	0					
ANR	93290	Identifier	need_reload_nodes		90872	1					
ANR	93291	Identifier	true		90872	1					
ANR	93292	ExpressionStatement	"showcursor ( core , false )"	4508:4:116521:116545	90872	5	True				
ANR	93293	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	93294	Callee	showcursor		90872	0					
ANR	93295	Identifier	showcursor		90872	0					
ANR	93296	ArgumentList	core		90872	1					
ANR	93297	Argument	core		90872	0					
ANR	93298	Identifier	core		90872	0					
ANR	93299	Argument	false		90872	1					
ANR	93300	Identifier	false		90872	0					
ANR	93301	BreakStatement	break ;	4510:3:116555:116560	90872	190	True				
ANR	93302	Label	case 'C' :	4511:2:116564:116572	90872	191	True				
ANR	93303	ExpressionStatement	rotateColor ( core )	4512:3:116577:116595	90872	192	True				
ANR	93304	CallExpression	rotateColor ( core )		90872	0					
ANR	93305	Callee	rotateColor		90872	0					
ANR	93306	Identifier	rotateColor		90872	0					
ANR	93307	ArgumentList	core		90872	1					
ANR	93308	Argument	core		90872	0					
ANR	93309	Identifier	core		90872	0					
ANR	93310	BreakStatement	break ;	4513:3:116600:116605	90872	193	True				
ANR	93311	Label	case 'm' :	4514:2:116609:116617	90872	194	True				
ANR	93312	ExpressionStatement	mousemode ++	4515:3:116622:116633	90872	195	True				
ANR	93313	PostIncDecOperationExpression	mousemode ++		90872	0					
ANR	93314	Identifier	mousemode		90872	0					
ANR	93315	IncDec	++		90872	1					
ANR	93316	IfStatement	if ( ! mousemodes [ mousemode ] )		90872	196					
ANR	93317	Condition	! mousemodes [ mousemode ]	4516:7:116642:116663	90872	0	True				
ANR	93318	UnaryOperationExpression	! mousemodes [ mousemode ]		90872	0					
ANR	93319	UnaryOperator	!		90872	0					
ANR	93320	ArrayIndexing	mousemodes [ mousemode ]		90872	1					
ANR	93321	Identifier	mousemodes		90872	0					
ANR	93322	Identifier	mousemode		90872	1					
ANR	93323	CompoundStatement		470:31:13361:13361	90872	1					
ANR	93324	ExpressionStatement	mousemode = 0	4517:4:116672:116685	90872	0	True				
ANR	93325	AssignmentExpression	mousemode = 0		90872	0		=			
ANR	93326	Identifier	mousemode		90872	0					
ANR	93327	PrimaryExpression	0		90872	1					
ANR	93328	BreakStatement	break ;	4519:3:116695:116700	90872	197	True				
ANR	93329	Label	case 'M' :	4520:2:116704:116712	90872	198	True				
ANR	93330	ExpressionStatement	mousemode --	4521:3:116717:116728	90872	199	True				
ANR	93331	PostIncDecOperationExpression	mousemode --		90872	0					
ANR	93332	Identifier	mousemode		90872	0					
ANR	93333	IncDec	--		90872	1					
ANR	93334	IfStatement	if ( mousemode < 0 )		90872	200					
ANR	93335	Condition	mousemode < 0	4522:7:116737:116749	90872	0	True				
ANR	93336	RelationalExpression	mousemode < 0		90872	0		<			
ANR	93337	Identifier	mousemode		90872	0					
ANR	93338	PrimaryExpression	0		90872	1					
ANR	93339	CompoundStatement		476:22:13447:13447	90872	1					
ANR	93340	ExpressionStatement	mousemode = 3	4523:4:116758:116771	90872	0	True				
ANR	93341	AssignmentExpression	mousemode = 3		90872	0		=			
ANR	93342	Identifier	mousemode		90872	0					
ANR	93343	PrimaryExpression	3		90872	1					
ANR	93344	BreakStatement	break ;	4525:3:116781:116786	90872	201	True				
ANR	93345	Label	case '(' :	4526:2:116790:116798	90872	202	True				
ANR	93346	IfStatement	if ( fcn )		90872	203					
ANR	93347	Condition	fcn	4527:7:116807:116809	90872	0	True				
ANR	93348	Identifier	fcn		90872	0					
ANR	93349	CompoundStatement		481:12:13507:13507	90872	1					
ANR	93350	ExpressionStatement	"r_core_cmd0 ( core , ""wao recj@B:-1"" )"	4528:4:116818:116853	90872	0	True				
ANR	93351	CallExpression	"r_core_cmd0 ( core , ""wao recj@B:-1"" )"		90872	0					
ANR	93352	Callee	r_core_cmd0		90872	0					
ANR	93353	Identifier	r_core_cmd0		90872	0					
ANR	93354	ArgumentList	core		90872	1					
ANR	93355	Argument	core		90872	0					
ANR	93356	Identifier	core		90872	0					
ANR	93357	Argument	"""wao recj@B:-1"""		90872	1					
ANR	93358	PrimaryExpression	"""wao recj@B:-1"""		90872	0					
ANR	93359	ExpressionStatement	g -> need_reload_nodes = true	4529:4:116859:116886	90872	1	True				
ANR	93360	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	93361	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	93362	Identifier	g		90872	0					
ANR	93363	Identifier	need_reload_nodes		90872	1					
ANR	93364	Identifier	true		90872	1					
ANR	93365	BreakStatement	break ;	4531:3:116896:116901	90872	204	True				
ANR	93366	Label	case ')' :	4532:2:116905:116913	90872	205	True				
ANR	93367	IfStatement	if ( fcn )		90872	206					
ANR	93368	Condition	fcn	4533:7:116922:116924	90872	0	True				
ANR	93369	Identifier	fcn		90872	0					
ANR	93370	CompoundStatement		487:12:13622:13622	90872	1					
ANR	93371	ExpressionStatement	rotateAsmemu ( core )	4534:4:116933:116952	90872	0	True				
ANR	93372	CallExpression	rotateAsmemu ( core )		90872	0					
ANR	93373	Callee	rotateAsmemu		90872	0					
ANR	93374	Identifier	rotateAsmemu		90872	0					
ANR	93375	ArgumentList	core		90872	1					
ANR	93376	Argument	core		90872	0					
ANR	93377	Identifier	core		90872	0					
ANR	93378	ExpressionStatement	g -> need_reload_nodes = true	4535:4:116958:116985	90872	1	True				
ANR	93379	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	93380	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	93381	Identifier	g		90872	0					
ANR	93382	Identifier	need_reload_nodes		90872	1					
ANR	93383	Identifier	true		90872	1					
ANR	93384	BreakStatement	break ;	4537:3:116995:117000	90872	207	True				
ANR	93385	Label	case 'd' :	4538:2:117004:117012	90872	208	True				
ANR	93386	CompoundStatement		493:3:13712:13712	90872	209					
ANR	93387	ExpressionStatement	"showcursor ( core , true )"	4540:4:117023:117046	90872	0	True				
ANR	93388	CallExpression	"showcursor ( core , true )"		90872	0					
ANR	93389	Callee	showcursor		90872	0					
ANR	93390	Identifier	showcursor		90872	0					
ANR	93391	ArgumentList	core		90872	1					
ANR	93392	Argument	core		90872	0					
ANR	93393	Identifier	core		90872	0					
ANR	93394	Argument	true		90872	1					
ANR	93395	Identifier	true		90872	0					
ANR	93396	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.interactive"" , true )"	4542:4:117064:117118	90872	1	True				
ANR	93397	CallExpression	"r_config_set_i ( core -> config , ""scr.interactive"" , true )"		90872	0					
ANR	93398	Callee	r_config_set_i		90872	0					
ANR	93399	Identifier	r_config_set_i		90872	0					
ANR	93400	ArgumentList	core -> config		90872	1					
ANR	93401	Argument	core -> config		90872	0					
ANR	93402	PtrMemberAccess	core -> config		90872	0					
ANR	93403	Identifier	core		90872	0					
ANR	93404	Identifier	config		90872	1					
ANR	93405	Argument	"""scr.interactive"""		90872	1					
ANR	93406	PrimaryExpression	"""scr.interactive"""		90872	0					
ANR	93407	Argument	true		90872	2					
ANR	93408	Identifier	true		90872	0					
ANR	93409	ExpressionStatement	"r_core_visual_define ( core , """" , 0 )"	4543:4:117124:117158	90872	2	True				
ANR	93410	CallExpression	"r_core_visual_define ( core , """" , 0 )"		90872	0					
ANR	93411	Callee	r_core_visual_define		90872	0					
ANR	93412	Identifier	r_core_visual_define		90872	0					
ANR	93413	ArgumentList	core		90872	1					
ANR	93414	Argument	core		90872	0					
ANR	93415	Identifier	core		90872	0					
ANR	93416	Argument	""""""		90872	1					
ANR	93417	PrimaryExpression	""""""		90872	0					
ANR	93418	Argument	0		90872	2					
ANR	93419	PrimaryExpression	0		90872	0					
ANR	93420	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4544:4:117164:117191	90872	3	True				
ANR	93421	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	93422	Callee	get_bbupdate		90872	0					
ANR	93423	Identifier	get_bbupdate		90872	0					
ANR	93424	ArgumentList	g		90872	1					
ANR	93425	Argument	g		90872	0					
ANR	93426	Identifier	g		90872	0					
ANR	93427	Argument	core		90872	1					
ANR	93428	Identifier	core		90872	0					
ANR	93429	Argument	fcn		90872	2					
ANR	93430	Identifier	fcn		90872	0					
ANR	93431	ExpressionStatement	"showcursor ( core , false )"	4545:4:117197:117221	90872	4	True				
ANR	93432	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	93433	Callee	showcursor		90872	0					
ANR	93434	Identifier	showcursor		90872	0					
ANR	93435	ArgumentList	core		90872	1					
ANR	93436	Argument	core		90872	0					
ANR	93437	Identifier	core		90872	0					
ANR	93438	Argument	false		90872	1					
ANR	93439	Identifier	false		90872	0					
ANR	93440	BreakStatement	break ;	4547:3:117231:117236	90872	210	True				
ANR	93441	Label	case 'D' :	4548:2:117240:117248	90872	211	True				
ANR	93442	ExpressionStatement	g -> is_dis = ! g -> is_dis	4549:3:117253:117275	90872	212	True				
ANR	93443	AssignmentExpression	g -> is_dis = ! g -> is_dis		90872	0		=			
ANR	93444	PtrMemberAccess	g -> is_dis		90872	0					
ANR	93445	Identifier	g		90872	0					
ANR	93446	Identifier	is_dis		90872	1					
ANR	93447	UnaryOperationExpression	! g -> is_dis		90872	1					
ANR	93448	UnaryOperator	!		90872	0					
ANR	93449	PtrMemberAccess	g -> is_dis		90872	1					
ANR	93450	Identifier	g		90872	0					
ANR	93451	Identifier	is_dis		90872	1					
ANR	93452	BreakStatement	break ;	4550:3:117280:117285	90872	213	True				
ANR	93453	Label	case 'n' :	4551:2:117289:117297	90872	214	True				
ANR	93454	ExpressionStatement	"r_core_seek_next ( core , r_config_get ( core -> config , ""scr.nkey"" ) )"	4552:3:117302:117366	90872	215	True				
ANR	93455	CallExpression	"r_core_seek_next ( core , r_config_get ( core -> config , ""scr.nkey"" ) )"		90872	0					
ANR	93456	Callee	r_core_seek_next		90872	0					
ANR	93457	Identifier	r_core_seek_next		90872	0					
ANR	93458	ArgumentList	core		90872	1					
ANR	93459	Argument	core		90872	0					
ANR	93460	Identifier	core		90872	0					
ANR	93461	Argument	"r_config_get ( core -> config , ""scr.nkey"" )"		90872	1					
ANR	93462	CallExpression	"r_config_get ( core -> config , ""scr.nkey"" )"		90872	0					
ANR	93463	Callee	r_config_get		90872	0					
ANR	93464	Identifier	r_config_get		90872	0					
ANR	93465	ArgumentList	core -> config		90872	1					
ANR	93466	Argument	core -> config		90872	0					
ANR	93467	PtrMemberAccess	core -> config		90872	0					
ANR	93468	Identifier	core		90872	0					
ANR	93469	Identifier	config		90872	1					
ANR	93470	Argument	"""scr.nkey"""		90872	1					
ANR	93471	PrimaryExpression	"""scr.nkey"""		90872	0					
ANR	93472	BreakStatement	break ;	4553:3:117371:117376	90872	216	True				
ANR	93473	Label	case 'N' :	4554:2:117380:117388	90872	217	True				
ANR	93474	ExpressionStatement	"r_core_seek_previous ( core , r_config_get ( core -> config , ""scr.nkey"" ) )"	4555:3:117393:117461	90872	218	True				
ANR	93475	CallExpression	"r_core_seek_previous ( core , r_config_get ( core -> config , ""scr.nkey"" ) )"		90872	0					
ANR	93476	Callee	r_core_seek_previous		90872	0					
ANR	93477	Identifier	r_core_seek_previous		90872	0					
ANR	93478	ArgumentList	core		90872	1					
ANR	93479	Argument	core		90872	0					
ANR	93480	Identifier	core		90872	0					
ANR	93481	Argument	"r_config_get ( core -> config , ""scr.nkey"" )"		90872	1					
ANR	93482	CallExpression	"r_config_get ( core -> config , ""scr.nkey"" )"		90872	0					
ANR	93483	Callee	r_config_get		90872	0					
ANR	93484	Identifier	r_config_get		90872	0					
ANR	93485	ArgumentList	core -> config		90872	1					
ANR	93486	Argument	core -> config		90872	0					
ANR	93487	PtrMemberAccess	core -> config		90872	0					
ANR	93488	Identifier	core		90872	0					
ANR	93489	Identifier	config		90872	1					
ANR	93490	Argument	"""scr.nkey"""		90872	1					
ANR	93491	PrimaryExpression	"""scr.nkey"""		90872	0					
ANR	93492	BreakStatement	break ;	4556:3:117466:117471	90872	219	True				
ANR	93493	Label	case 'Y' :	4557:2:117475:117483	90872	220	True				
ANR	93494	ExpressionStatement	agraph_toggle_tiny ( g )	4558:3:117488:117510	90872	221	True				
ANR	93495	CallExpression	agraph_toggle_tiny ( g )		90872	0					
ANR	93496	Callee	agraph_toggle_tiny		90872	0					
ANR	93497	Identifier	agraph_toggle_tiny		90872	0					
ANR	93498	ArgumentList	g		90872	1					
ANR	93499	Argument	g		90872	0					
ANR	93500	Identifier	g		90872	0					
ANR	93501	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4559:3:117515:117567	90872	222	True				
ANR	93502	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	93503	Callee	agraph_update_seek		90872	0					
ANR	93504	Identifier	agraph_update_seek		90872	0					
ANR	93505	ArgumentList	g		90872	1					
ANR	93506	Argument	g		90872	0					
ANR	93507	Identifier	g		90872	0					
ANR	93508	Argument	get_anode ( g -> curnode )		90872	1					
ANR	93509	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	93510	Callee	get_anode		90872	0					
ANR	93511	Identifier	get_anode		90872	0					
ANR	93512	ArgumentList	g -> curnode		90872	1					
ANR	93513	Argument	g -> curnode		90872	0					
ANR	93514	PtrMemberAccess	g -> curnode		90872	0					
ANR	93515	Identifier	g		90872	0					
ANR	93516	Identifier	curnode		90872	1					
ANR	93517	Argument	true		90872	2					
ANR	93518	Identifier	true		90872	0					
ANR	93519	BreakStatement	break ;	4560:3:117572:117577	90872	223	True				
ANR	93520	Label	case 'z' :	4561:2:117581:117589	90872	224	True				
ANR	93521	ExpressionStatement	agraph_toggle_mini ( g )	4562:3:117594:117616	90872	225	True				
ANR	93522	CallExpression	agraph_toggle_mini ( g )		90872	0					
ANR	93523	Callee	agraph_toggle_mini		90872	0					
ANR	93524	Identifier	agraph_toggle_mini		90872	0					
ANR	93525	ArgumentList	g		90872	1					
ANR	93526	Argument	g		90872	0					
ANR	93527	Identifier	g		90872	0					
ANR	93528	ExpressionStatement	discroll = 0	4563:3:117621:117633	90872	226	True				
ANR	93529	AssignmentExpression	discroll = 0		90872	0		=			
ANR	93530	Identifier	discroll		90872	0					
ANR	93531	PrimaryExpression	0		90872	1					
ANR	93532	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4564:3:117638:117690	90872	227	True				
ANR	93533	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	93534	Callee	agraph_update_seek		90872	0					
ANR	93535	Identifier	agraph_update_seek		90872	0					
ANR	93536	ArgumentList	g		90872	1					
ANR	93537	Argument	g		90872	0					
ANR	93538	Identifier	g		90872	0					
ANR	93539	Argument	get_anode ( g -> curnode )		90872	1					
ANR	93540	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	93541	Callee	get_anode		90872	0					
ANR	93542	Identifier	get_anode		90872	0					
ANR	93543	ArgumentList	g -> curnode		90872	1					
ANR	93544	Argument	g -> curnode		90872	0					
ANR	93545	PtrMemberAccess	g -> curnode		90872	0					
ANR	93546	Identifier	g		90872	0					
ANR	93547	Identifier	curnode		90872	1					
ANR	93548	Argument	true		90872	2					
ANR	93549	Identifier	true		90872	0					
ANR	93550	BreakStatement	break ;	4565:3:117695:117700	90872	228	True				
ANR	93551	Label	case 'v' :	4566:2:117704:117712	90872	229	True				
ANR	93552	ExpressionStatement	"r_core_visual_anal ( core , NULL )"	4567:3:117717:117748	90872	230	True				
ANR	93553	CallExpression	"r_core_visual_anal ( core , NULL )"		90872	0					
ANR	93554	Callee	r_core_visual_anal		90872	0					
ANR	93555	Identifier	r_core_visual_anal		90872	0					
ANR	93556	ArgumentList	core		90872	1					
ANR	93557	Argument	core		90872	0					
ANR	93558	Identifier	core		90872	0					
ANR	93559	Argument	NULL		90872	1					
ANR	93560	Identifier	NULL		90872	0					
ANR	93561	BreakStatement	break ;	4568:3:117753:117758	90872	231	True				
ANR	93562	Label	case 'J' :	4569:2:117762:117770	90872	232	True				
ANR	93563	IfStatement	if ( graphCursor )		90872	233					
ANR	93564	Condition	graphCursor	4571:7:117804:117814	90872	0	True				
ANR	93565	Identifier	graphCursor		90872	0					
ANR	93566	CompoundStatement		526:4:14518:14567	90872	1					
ANR	93567	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4572:4:117823:117872	90872	0	True				
ANR	93568	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93569	IdentifierDeclType	int		90872	0					
ANR	93570	Identifier	speed		90872	1					
ANR	93571	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93572	Identifier	speed		90872	0					
ANR	93573	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93574	Condition	okey == 27		90872	0					
ANR	93575	EqualityExpression	okey == 27		90872	0		==			
ANR	93576	Identifier	okey		90872	0					
ANR	93577	PrimaryExpression	27		90872	1					
ANR	93578	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93579	Identifier	movspeed		90872	2					
ANR	93580	ExpressionStatement	"graphNodeMove ( g , 'j' , speed * 2 )"	4573:4:117878:117911	90872	1	True				
ANR	93581	CallExpression	"graphNodeMove ( g , 'j' , speed * 2 )"		90872	0					
ANR	93582	Callee	graphNodeMove		90872	0					
ANR	93583	Identifier	graphNodeMove		90872	0					
ANR	93584	ArgumentList	g		90872	1					
ANR	93585	Argument	g		90872	0					
ANR	93586	Identifier	g		90872	0					
ANR	93587	Argument	'j'		90872	1					
ANR	93588	PrimaryExpression	'j'		90872	0					
ANR	93589	Argument	speed * 2		90872	2					
ANR	93590	MultiplicativeExpression	speed * 2		90872	0		*			
ANR	93591	Identifier	speed		90872	0					
ANR	93592	PrimaryExpression	2		90872	1					
ANR	93593	ElseStatement	else		90872	0					
ANR	93594	CompoundStatement		528:10:14618:14618	90872	0					
ANR	93595	ExpressionStatement	can -> sy -= ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )	4575:4:117929:117973	90872	0	True				
ANR	93596	AssignmentExpression	can -> sy -= ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	0		-=			
ANR	93597	PtrMemberAccess	can -> sy		90872	0					
ANR	93598	Identifier	can		90872	0					
ANR	93599	Identifier	sy		90872	1					
ANR	93600	MultiplicativeExpression	( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93601	MultiplicativeExpression	5 * movspeed		90872	0		*			
ANR	93602	PrimaryExpression	5		90872	0					
ANR	93603	Identifier	movspeed		90872	1					
ANR	93604	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93605	Condition	invscroll		90872	0					
ANR	93606	Identifier	invscroll		90872	0					
ANR	93607	UnaryOperationExpression	- 1		90872	1					
ANR	93608	UnaryOperator	-		90872	0					
ANR	93609	PrimaryExpression	1		90872	1					
ANR	93610	PrimaryExpression	1		90872	2					
ANR	93611	BreakStatement	break ;	4577:3:117983:117988	90872	234	True				
ANR	93612	Label	case 'K' :	4578:2:117992:118000	90872	235	True				
ANR	93613	IfStatement	if ( graphCursor )		90872	236					
ANR	93614	Condition	graphCursor	4579:7:118009:118019	90872	0	True				
ANR	93615	Identifier	graphCursor		90872	0					
ANR	93616	CompoundStatement		534:4:14723:14772	90872	1					
ANR	93617	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4580:4:118028:118077	90872	0	True				
ANR	93618	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93619	IdentifierDeclType	int		90872	0					
ANR	93620	Identifier	speed		90872	1					
ANR	93621	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93622	Identifier	speed		90872	0					
ANR	93623	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93624	Condition	okey == 27		90872	0					
ANR	93625	EqualityExpression	okey == 27		90872	0		==			
ANR	93626	Identifier	okey		90872	0					
ANR	93627	PrimaryExpression	27		90872	1					
ANR	93628	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93629	Identifier	movspeed		90872	2					
ANR	93630	ExpressionStatement	"graphNodeMove ( g , 'k' , speed * 2 )"	4581:4:118083:118116	90872	1	True				
ANR	93631	CallExpression	"graphNodeMove ( g , 'k' , speed * 2 )"		90872	0					
ANR	93632	Callee	graphNodeMove		90872	0					
ANR	93633	Identifier	graphNodeMove		90872	0					
ANR	93634	ArgumentList	g		90872	1					
ANR	93635	Argument	g		90872	0					
ANR	93636	Identifier	g		90872	0					
ANR	93637	Argument	'k'		90872	1					
ANR	93638	PrimaryExpression	'k'		90872	0					
ANR	93639	Argument	speed * 2		90872	2					
ANR	93640	MultiplicativeExpression	speed * 2		90872	0		*			
ANR	93641	Identifier	speed		90872	0					
ANR	93642	PrimaryExpression	2		90872	1					
ANR	93643	ElseStatement	else		90872	0					
ANR	93644	CompoundStatement		536:10:14823:14823	90872	0					
ANR	93645	ExpressionStatement	can -> sy += ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )	4583:4:118134:118178	90872	0	True				
ANR	93646	AssignmentExpression	can -> sy += ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	0		+=			
ANR	93647	PtrMemberAccess	can -> sy		90872	0					
ANR	93648	Identifier	can		90872	0					
ANR	93649	Identifier	sy		90872	1					
ANR	93650	MultiplicativeExpression	( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93651	MultiplicativeExpression	5 * movspeed		90872	0		*			
ANR	93652	PrimaryExpression	5		90872	0					
ANR	93653	Identifier	movspeed		90872	1					
ANR	93654	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93655	Condition	invscroll		90872	0					
ANR	93656	Identifier	invscroll		90872	0					
ANR	93657	UnaryOperationExpression	- 1		90872	1					
ANR	93658	UnaryOperator	-		90872	0					
ANR	93659	PrimaryExpression	1		90872	1					
ANR	93660	PrimaryExpression	1		90872	2					
ANR	93661	BreakStatement	break ;	4585:3:118188:118193	90872	237	True				
ANR	93662	Label	case 'H' :	4586:2:118197:118205	90872	238	True				
ANR	93663	IfStatement	if ( graphCursor )		90872	239					
ANR	93664	Condition	graphCursor	4587:7:118214:118224	90872	0	True				
ANR	93665	Identifier	graphCursor		90872	0					
ANR	93666	CompoundStatement		541:20:14922:14922	90872	1					
ANR	93667	ExpressionStatement	"graphNodeMove ( g , 'h' , movspeed * 2 )"	4589:4:118264:118300	90872	0	True				
ANR	93668	CallExpression	"graphNodeMove ( g , 'h' , movspeed * 2 )"		90872	0					
ANR	93669	Callee	graphNodeMove		90872	0					
ANR	93670	Identifier	graphNodeMove		90872	0					
ANR	93671	ArgumentList	g		90872	1					
ANR	93672	Argument	g		90872	0					
ANR	93673	Identifier	g		90872	0					
ANR	93674	Argument	'h'		90872	1					
ANR	93675	PrimaryExpression	'h'		90872	0					
ANR	93676	Argument	movspeed * 2		90872	2					
ANR	93677	MultiplicativeExpression	movspeed * 2		90872	0		*			
ANR	93678	Identifier	movspeed		90872	0					
ANR	93679	PrimaryExpression	2		90872	1					
ANR	93680	ElseStatement	else		90872	0					
ANR	93681	CompoundStatement		544:10:15007:15007	90872	0					
ANR	93682	IfStatement	if ( okey == 27 )		90872	0					
ANR	93683	Condition	okey == 27	4592:8:118350:118359	90872	0	True				
ANR	93684	EqualityExpression	okey == 27		90872	0		==			
ANR	93685	Identifier	okey		90872	0					
ANR	93686	PrimaryExpression	27		90872	1					
ANR	93687	CompoundStatement		548:5:15088:15139	90872	1					
ANR	93688	IdentifierDeclStatement	"const RGraphNode * gn = find_near_of ( g , NULL , true ) ;"	4594:5:118393:118444	90872	0	True				
ANR	93689	IdentifierDecl	"* gn = find_near_of ( g , NULL , true )"		90872	0					
ANR	93690	IdentifierDeclType	const RGraphNode *		90872	0					
ANR	93691	Identifier	gn		90872	1					
ANR	93692	AssignmentExpression	"* gn = find_near_of ( g , NULL , true )"		90872	2		=			
ANR	93693	Identifier	gn		90872	0					
ANR	93694	CallExpression	"find_near_of ( g , NULL , true )"		90872	1					
ANR	93695	Callee	find_near_of		90872	0					
ANR	93696	Identifier	find_near_of		90872	0					
ANR	93697	ArgumentList	g		90872	1					
ANR	93698	Argument	g		90872	0					
ANR	93699	Identifier	g		90872	0					
ANR	93700	Argument	NULL		90872	1					
ANR	93701	Identifier	NULL		90872	0					
ANR	93702	Argument	true		90872	2					
ANR	93703	Identifier	true		90872	0					
ANR	93704	ExpressionStatement	g -> update_seek_on = get_anode ( gn )	4595:5:118451:118485	90872	1	True				
ANR	93705	AssignmentExpression	g -> update_seek_on = get_anode ( gn )		90872	0		=			
ANR	93706	PtrMemberAccess	g -> update_seek_on		90872	0					
ANR	93707	Identifier	g		90872	0					
ANR	93708	Identifier	update_seek_on		90872	1					
ANR	93709	CallExpression	get_anode ( gn )		90872	1					
ANR	93710	Callee	get_anode		90872	0					
ANR	93711	Identifier	get_anode		90872	0					
ANR	93712	ArgumentList	gn		90872	1					
ANR	93713	Argument	gn		90872	0					
ANR	93714	Identifier	gn		90872	0					
ANR	93715	ElseStatement	else		90872	0					
ANR	93716	CompoundStatement		550:11:15193:15193	90872	0					
ANR	93717	ExpressionStatement	can -> sx += ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )	4597:5:118505:118551	90872	0	True				
ANR	93718	AssignmentExpression	can -> sx += ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	0		+=			
ANR	93719	PtrMemberAccess	can -> sx		90872	0					
ANR	93720	Identifier	can		90872	0					
ANR	93721	Identifier	sx		90872	1					
ANR	93722	MultiplicativeExpression	( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93723	MultiplicativeExpression	5 * movspeed		90872	0		*			
ANR	93724	PrimaryExpression	5		90872	0					
ANR	93725	Identifier	movspeed		90872	1					
ANR	93726	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93727	Condition	invscroll		90872	0					
ANR	93728	Identifier	invscroll		90872	0					
ANR	93729	UnaryOperationExpression	- 1		90872	1					
ANR	93730	UnaryOperator	-		90872	0					
ANR	93731	PrimaryExpression	1		90872	1					
ANR	93732	PrimaryExpression	1		90872	2					
ANR	93733	BreakStatement	break ;	4600:3:118567:118572	90872	240	True				
ANR	93734	Label	case 'L' :	4601:2:118576:118584	90872	241	True				
ANR	93735	IfStatement	if ( graphCursor )		90872	242					
ANR	93736	Condition	graphCursor	4602:7:118593:118603	90872	0	True				
ANR	93737	Identifier	graphCursor		90872	0					
ANR	93738	CompoundStatement		556:20:15301:15301	90872	1					
ANR	93739	ExpressionStatement	"graphNodeMove ( g , 'l' , movspeed * 2 )"	4603:4:118612:118648	90872	0	True				
ANR	93740	CallExpression	"graphNodeMove ( g , 'l' , movspeed * 2 )"		90872	0					
ANR	93741	Callee	graphNodeMove		90872	0					
ANR	93742	Identifier	graphNodeMove		90872	0					
ANR	93743	ArgumentList	g		90872	1					
ANR	93744	Argument	g		90872	0					
ANR	93745	Identifier	g		90872	0					
ANR	93746	Argument	'l'		90872	1					
ANR	93747	PrimaryExpression	'l'		90872	0					
ANR	93748	Argument	movspeed * 2		90872	2					
ANR	93749	MultiplicativeExpression	movspeed * 2		90872	0		*			
ANR	93750	Identifier	movspeed		90872	0					
ANR	93751	PrimaryExpression	2		90872	1					
ANR	93752	ElseStatement	else		90872	0					
ANR	93753	CompoundStatement		558:10:15355:15355	90872	0					
ANR	93754	IfStatement	if ( is_mini ( g ) )		90872	0					
ANR	93755	Condition	is_mini ( g )	4605:8:118670:118680	90872	0	True				
ANR	93756	CallExpression	is_mini ( g )		90872	0					
ANR	93757	Callee	is_mini		90872	0					
ANR	93758	Identifier	is_mini		90872	0					
ANR	93759	ArgumentList	g		90872	1					
ANR	93760	Argument	g		90872	0					
ANR	93761	Identifier	g		90872	0					
ANR	93762	CompoundStatement		559:21:15378:15378	90872	1					
ANR	93763	ExpressionStatement	discroll = 0	4606:5:118690:118702	90872	0	True				
ANR	93764	AssignmentExpression	discroll = 0		90872	0		=			
ANR	93765	Identifier	discroll		90872	0					
ANR	93766	PrimaryExpression	0		90872	1					
ANR	93767	ElseStatement	else		90872	0					
ANR	93768	CompoundStatement		561:11:15410:15410	90872	0					
ANR	93769	ExpressionStatement	can -> sx -= ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )	4608:5:118722:118768	90872	0	True				
ANR	93770	AssignmentExpression	can -> sx -= ( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	0		-=			
ANR	93771	PtrMemberAccess	can -> sx		90872	0					
ANR	93772	Identifier	can		90872	0					
ANR	93773	Identifier	sx		90872	1					
ANR	93774	MultiplicativeExpression	( 5 * movspeed ) * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93775	MultiplicativeExpression	5 * movspeed		90872	0		*			
ANR	93776	PrimaryExpression	5		90872	0					
ANR	93777	Identifier	movspeed		90872	1					
ANR	93778	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93779	Condition	invscroll		90872	0					
ANR	93780	Identifier	invscroll		90872	0					
ANR	93781	UnaryOperationExpression	- 1		90872	1					
ANR	93782	UnaryOperator	-		90872	0					
ANR	93783	PrimaryExpression	1		90872	1					
ANR	93784	PrimaryExpression	1		90872	2					
ANR	93785	BreakStatement	break ;	4611:3:118784:118789	90872	243	True				
ANR	93786	Label	case 'c' :	4612:2:118793:118801	90872	244	True				
ANR	93787	ExpressionStatement	graphCursor = ! graphCursor	4613:3:118806:118832	90872	245	True				
ANR	93788	AssignmentExpression	graphCursor = ! graphCursor		90872	0		=			
ANR	93789	Identifier	graphCursor		90872	0					
ANR	93790	UnaryOperationExpression	! graphCursor		90872	1					
ANR	93791	UnaryOperator	!		90872	0					
ANR	93792	Identifier	graphCursor		90872	1					
ANR	93793	BreakStatement	break ;	4614:3:118837:118842	90872	246	True				
ANR	93794	Label	case 'j' :	4615:2:118846:118854	90872	247	True				
ANR	93795	IfStatement	if ( g -> is_dis )		90872	248					
ANR	93796	Condition	g -> is_dis	4616:7:118863:118871	90872	0	True				
ANR	93797	PtrMemberAccess	g -> is_dis		90872	0					
ANR	93798	Identifier	g		90872	0					
ANR	93799	Identifier	is_dis		90872	1					
ANR	93800	CompoundStatement		570:18:15569:15569	90872	1					
ANR	93801	ExpressionStatement	"r_core_cmd0 ( core , ""so 1"" )"	4617:4:118880:118906	90872	0	True				
ANR	93802	CallExpression	"r_core_cmd0 ( core , ""so 1"" )"		90872	0					
ANR	93803	Callee	r_core_cmd0		90872	0					
ANR	93804	Identifier	r_core_cmd0		90872	0					
ANR	93805	ArgumentList	core		90872	1					
ANR	93806	Argument	core		90872	0					
ANR	93807	Identifier	core		90872	0					
ANR	93808	Argument	"""so 1"""		90872	1					
ANR	93809	PrimaryExpression	"""so 1"""		90872	0					
ANR	93810	ElseStatement	else		90872	0					
ANR	93811	CompoundStatement		572:10:15613:15613	90872	0					
ANR	93812	IfStatement	if ( graphCursor )		90872	0					
ANR	93813	Condition	graphCursor	4619:8:118928:118938	90872	0	True				
ANR	93814	Identifier	graphCursor		90872	0					
ANR	93815	CompoundStatement		574:5:15643:15692	90872	1					
ANR	93816	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4620:5:118948:118997	90872	0	True				
ANR	93817	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93818	IdentifierDeclType	int		90872	0					
ANR	93819	Identifier	speed		90872	1					
ANR	93820	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93821	Identifier	speed		90872	0					
ANR	93822	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93823	Condition	okey == 27		90872	0					
ANR	93824	EqualityExpression	okey == 27		90872	0		==			
ANR	93825	Identifier	okey		90872	0					
ANR	93826	PrimaryExpression	27		90872	1					
ANR	93827	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93828	Identifier	movspeed		90872	2					
ANR	93829	ExpressionStatement	"graphNodeMove ( g , 'j' , speed )"	4621:5:119004:119033	90872	1	True				
ANR	93830	CallExpression	"graphNodeMove ( g , 'j' , speed )"		90872	0					
ANR	93831	Callee	graphNodeMove		90872	0					
ANR	93832	Identifier	graphNodeMove		90872	0					
ANR	93833	ArgumentList	g		90872	1					
ANR	93834	Argument	g		90872	0					
ANR	93835	Identifier	g		90872	0					
ANR	93836	Argument	'j'		90872	1					
ANR	93837	PrimaryExpression	'j'		90872	0					
ANR	93838	Argument	speed		90872	2					
ANR	93839	Identifier	speed		90872	0					
ANR	93840	ElseStatement	else		90872	0					
ANR	93841	CompoundStatement		576:11:15741:15741	90872	0					
ANR	93842	ExpressionStatement	can -> sy -= movspeed * ( invscroll ? - 1 : 1 )	4624:5:119075:119115	90872	0	True				
ANR	93843	AssignmentExpression	can -> sy -= movspeed * ( invscroll ? - 1 : 1 )		90872	0		-=			
ANR	93844	PtrMemberAccess	can -> sy		90872	0					
ANR	93845	Identifier	can		90872	0					
ANR	93846	Identifier	sy		90872	1					
ANR	93847	MultiplicativeExpression	movspeed * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93848	Identifier	movspeed		90872	0					
ANR	93849	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93850	Condition	invscroll		90872	0					
ANR	93851	Identifier	invscroll		90872	0					
ANR	93852	UnaryOperationExpression	- 1		90872	1					
ANR	93853	UnaryOperator	-		90872	0					
ANR	93854	PrimaryExpression	1		90872	1					
ANR	93855	PrimaryExpression	1		90872	2					
ANR	93856	BreakStatement	break ;	4627:3:119131:119136	90872	249	True				
ANR	93857	Label	case 'k' :	4628:2:119140:119148	90872	250	True				
ANR	93858	IfStatement	if ( g -> is_dis )		90872	251					
ANR	93859	Condition	g -> is_dis	4629:7:119157:119165	90872	0	True				
ANR	93860	PtrMemberAccess	g -> is_dis		90872	0					
ANR	93861	Identifier	g		90872	0					
ANR	93862	Identifier	is_dis		90872	1					
ANR	93863	CompoundStatement		583:18:15863:15863	90872	1					
ANR	93864	ExpressionStatement	"r_core_cmd0 ( core , ""so -1"" )"	4630:4:119174:119201	90872	0	True				
ANR	93865	CallExpression	"r_core_cmd0 ( core , ""so -1"" )"		90872	0					
ANR	93866	Callee	r_core_cmd0		90872	0					
ANR	93867	Identifier	r_core_cmd0		90872	0					
ANR	93868	ArgumentList	core		90872	1					
ANR	93869	Argument	core		90872	0					
ANR	93870	Identifier	core		90872	0					
ANR	93871	Argument	"""so -1"""		90872	1					
ANR	93872	PrimaryExpression	"""so -1"""		90872	0					
ANR	93873	ElseStatement	else		90872	0					
ANR	93874	CompoundStatement		585:10:15908:15908	90872	0					
ANR	93875	IfStatement	if ( graphCursor )		90872	0					
ANR	93876	Condition	graphCursor	4632:8:119223:119233	90872	0	True				
ANR	93877	Identifier	graphCursor		90872	0					
ANR	93878	CompoundStatement		587:5:15938:15987	90872	1					
ANR	93879	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4633:5:119243:119292	90872	0	True				
ANR	93880	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93881	IdentifierDeclType	int		90872	0					
ANR	93882	Identifier	speed		90872	1					
ANR	93883	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93884	Identifier	speed		90872	0					
ANR	93885	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93886	Condition	okey == 27		90872	0					
ANR	93887	EqualityExpression	okey == 27		90872	0		==			
ANR	93888	Identifier	okey		90872	0					
ANR	93889	PrimaryExpression	27		90872	1					
ANR	93890	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93891	Identifier	movspeed		90872	2					
ANR	93892	ExpressionStatement	"graphNodeMove ( g , 'k' , speed )"	4634:5:119299:119328	90872	1	True				
ANR	93893	CallExpression	"graphNodeMove ( g , 'k' , speed )"		90872	0					
ANR	93894	Callee	graphNodeMove		90872	0					
ANR	93895	Identifier	graphNodeMove		90872	0					
ANR	93896	ArgumentList	g		90872	1					
ANR	93897	Argument	g		90872	0					
ANR	93898	Identifier	g		90872	0					
ANR	93899	Argument	'k'		90872	1					
ANR	93900	PrimaryExpression	'k'		90872	0					
ANR	93901	Argument	speed		90872	2					
ANR	93902	Identifier	speed		90872	0					
ANR	93903	ElseStatement	else		90872	0					
ANR	93904	CompoundStatement		589:11:16036:16036	90872	0					
ANR	93905	ExpressionStatement	can -> sy += movspeed * ( invscroll ? - 1 : 1 )	4637:5:119370:119410	90872	0	True				
ANR	93906	AssignmentExpression	can -> sy += movspeed * ( invscroll ? - 1 : 1 )		90872	0		+=			
ANR	93907	PtrMemberAccess	can -> sy		90872	0					
ANR	93908	Identifier	can		90872	0					
ANR	93909	Identifier	sy		90872	1					
ANR	93910	MultiplicativeExpression	movspeed * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93911	Identifier	movspeed		90872	0					
ANR	93912	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93913	Condition	invscroll		90872	0					
ANR	93914	Identifier	invscroll		90872	0					
ANR	93915	UnaryOperationExpression	- 1		90872	1					
ANR	93916	UnaryOperator	-		90872	0					
ANR	93917	PrimaryExpression	1		90872	1					
ANR	93918	PrimaryExpression	1		90872	2					
ANR	93919	BreakStatement	break ;	4640:3:119426:119431	90872	252	True				
ANR	93920	Label	case 'l' :	4641:2:119435:119443	90872	253	True				
ANR	93921	IfStatement	if ( graphCursor )		90872	254					
ANR	93922	Condition	graphCursor	4642:7:119452:119462	90872	0	True				
ANR	93923	Identifier	graphCursor		90872	0					
ANR	93924	CompoundStatement		597:4:16166:16215	90872	1					
ANR	93925	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4643:4:119471:119520	90872	0	True				
ANR	93926	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93927	IdentifierDeclType	int		90872	0					
ANR	93928	Identifier	speed		90872	1					
ANR	93929	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93930	Identifier	speed		90872	0					
ANR	93931	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93932	Condition	okey == 27		90872	0					
ANR	93933	EqualityExpression	okey == 27		90872	0		==			
ANR	93934	Identifier	okey		90872	0					
ANR	93935	PrimaryExpression	27		90872	1					
ANR	93936	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93937	Identifier	movspeed		90872	2					
ANR	93938	ExpressionStatement	"graphNodeMove ( g , 'l' , speed )"	4644:4:119526:119555	90872	1	True				
ANR	93939	CallExpression	"graphNodeMove ( g , 'l' , speed )"		90872	0					
ANR	93940	Callee	graphNodeMove		90872	0					
ANR	93941	Identifier	graphNodeMove		90872	0					
ANR	93942	ArgumentList	g		90872	1					
ANR	93943	Argument	g		90872	0					
ANR	93944	Identifier	g		90872	0					
ANR	93945	Argument	'l'		90872	1					
ANR	93946	PrimaryExpression	'l'		90872	0					
ANR	93947	Argument	speed		90872	2					
ANR	93948	Identifier	speed		90872	0					
ANR	93949	ElseStatement	else		90872	0					
ANR	93950	CompoundStatement		599:10:16262:16262	90872	0					
ANR	93951	ExpressionStatement	can -> sx -= movspeed * ( invscroll ? - 1 : 1 )	4646:4:119573:119613	90872	0	True				
ANR	93952	AssignmentExpression	can -> sx -= movspeed * ( invscroll ? - 1 : 1 )		90872	0		-=			
ANR	93953	PtrMemberAccess	can -> sx		90872	0					
ANR	93954	Identifier	can		90872	0					
ANR	93955	Identifier	sx		90872	1					
ANR	93956	MultiplicativeExpression	movspeed * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	93957	Identifier	movspeed		90872	0					
ANR	93958	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	93959	Condition	invscroll		90872	0					
ANR	93960	Identifier	invscroll		90872	0					
ANR	93961	UnaryOperationExpression	- 1		90872	1					
ANR	93962	UnaryOperator	-		90872	0					
ANR	93963	PrimaryExpression	1		90872	1					
ANR	93964	PrimaryExpression	1		90872	2					
ANR	93965	BreakStatement	break ;	4648:3:119623:119628	90872	255	True				
ANR	93966	Label	case 'h' :	4649:2:119632:119640	90872	256	True				
ANR	93967	IfStatement	if ( graphCursor )		90872	257					
ANR	93968	Condition	graphCursor	4650:7:119649:119659	90872	0	True				
ANR	93969	Identifier	graphCursor		90872	0					
ANR	93970	CompoundStatement		605:4:16363:16412	90872	1					
ANR	93971	IdentifierDeclStatement	int speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed ;	4651:4:119668:119717	90872	0	True				
ANR	93972	IdentifierDecl	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	0					
ANR	93973	IdentifierDeclType	int		90872	0					
ANR	93974	Identifier	speed		90872	1					
ANR	93975	AssignmentExpression	speed = ( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	2		=			
ANR	93976	Identifier	speed		90872	0					
ANR	93977	ConditionalExpression	( okey == 27 ) ? PAGEKEY_SPEED : movspeed		90872	1					
ANR	93978	Condition	okey == 27		90872	0					
ANR	93979	EqualityExpression	okey == 27		90872	0		==			
ANR	93980	Identifier	okey		90872	0					
ANR	93981	PrimaryExpression	27		90872	1					
ANR	93982	Identifier	PAGEKEY_SPEED		90872	1					
ANR	93983	Identifier	movspeed		90872	2					
ANR	93984	ExpressionStatement	"graphNodeMove ( g , 'h' , speed )"	4652:4:119723:119752	90872	1	True				
ANR	93985	CallExpression	"graphNodeMove ( g , 'h' , speed )"		90872	0					
ANR	93986	Callee	graphNodeMove		90872	0					
ANR	93987	Identifier	graphNodeMove		90872	0					
ANR	93988	ArgumentList	g		90872	1					
ANR	93989	Argument	g		90872	0					
ANR	93990	Identifier	g		90872	0					
ANR	93991	Argument	'h'		90872	1					
ANR	93992	PrimaryExpression	'h'		90872	0					
ANR	93993	Argument	speed		90872	2					
ANR	93994	Identifier	speed		90872	0					
ANR	93995	ElseStatement	else		90872	0					
ANR	93996	CompoundStatement		607:10:16459:16459	90872	0					
ANR	93997	ExpressionStatement	can -> sx += movspeed * ( invscroll ? - 1 : 1 )	4654:4:119770:119810	90872	0	True				
ANR	93998	AssignmentExpression	can -> sx += movspeed * ( invscroll ? - 1 : 1 )		90872	0		+=			
ANR	93999	PtrMemberAccess	can -> sx		90872	0					
ANR	94000	Identifier	can		90872	0					
ANR	94001	Identifier	sx		90872	1					
ANR	94002	MultiplicativeExpression	movspeed * ( invscroll ? - 1 : 1 )		90872	1		*			
ANR	94003	Identifier	movspeed		90872	0					
ANR	94004	ConditionalExpression	invscroll ? - 1 : 1		90872	1					
ANR	94005	Condition	invscroll		90872	0					
ANR	94006	Identifier	invscroll		90872	0					
ANR	94007	UnaryOperationExpression	- 1		90872	1					
ANR	94008	UnaryOperator	-		90872	0					
ANR	94009	PrimaryExpression	1		90872	1					
ANR	94010	PrimaryExpression	1		90872	2					
ANR	94011	BreakStatement	break ;	4656:3:119820:119825	90872	258	True				
ANR	94012	Label	case '^' :	4657:2:119829:119837	90872	259	True				
ANR	94013	CompoundStatement		613:6:16547:16615	90872	260					
ANR	94014	IdentifierDeclStatement	"RAnalFunction * fcn = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 ) ;"	4659:6:119852:119920	90872	0	True				
ANR	94015	IdentifierDecl	"* fcn = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	0					
ANR	94016	IdentifierDeclType	RAnalFunction *		90872	0					
ANR	94017	Identifier	fcn		90872	1					
ANR	94018	AssignmentExpression	"* fcn = r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	2		=			
ANR	94019	Identifier	fcn		90872	0					
ANR	94020	CallExpression	"r_anal_get_fcn_in ( core -> anal , core -> offset , 0 )"		90872	1					
ANR	94021	Callee	r_anal_get_fcn_in		90872	0					
ANR	94022	Identifier	r_anal_get_fcn_in		90872	0					
ANR	94023	ArgumentList	core -> anal		90872	1					
ANR	94024	Argument	core -> anal		90872	0					
ANR	94025	PtrMemberAccess	core -> anal		90872	0					
ANR	94026	Identifier	core		90872	0					
ANR	94027	Identifier	anal		90872	1					
ANR	94028	Argument	core -> offset		90872	1					
ANR	94029	PtrMemberAccess	core -> offset		90872	0					
ANR	94030	Identifier	core		90872	0					
ANR	94031	Identifier	offset		90872	1					
ANR	94032	Argument	0		90872	2					
ANR	94033	PrimaryExpression	0		90872	0					
ANR	94034	IfStatement	if ( fcn )		90872	1					
ANR	94035	Condition	fcn	4660:10:119932:119934	90872	0	True				
ANR	94036	Identifier	fcn		90872	0					
ANR	94037	CompoundStatement		614:15:16632:16632	90872	1					
ANR	94038	ExpressionStatement	"r_core_seek ( core , fcn -> addr , 0 )"	4661:7:119946:119978	90872	0	True				
ANR	94039	CallExpression	"r_core_seek ( core , fcn -> addr , 0 )"		90872	0					
ANR	94040	Callee	r_core_seek		90872	0					
ANR	94041	Identifier	r_core_seek		90872	0					
ANR	94042	ArgumentList	core		90872	1					
ANR	94043	Argument	core		90872	0					
ANR	94044	Identifier	core		90872	0					
ANR	94045	Argument	fcn -> addr		90872	1					
ANR	94046	PtrMemberAccess	fcn -> addr		90872	0					
ANR	94047	Identifier	fcn		90872	0					
ANR	94048	Identifier	addr		90872	1					
ANR	94049	Argument	0		90872	2					
ANR	94050	PrimaryExpression	0		90872	0					
ANR	94051	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4664:5:120000:120052	90872	261	True				
ANR	94052	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	94053	Callee	agraph_update_seek		90872	0					
ANR	94054	Identifier	agraph_update_seek		90872	0					
ANR	94055	ArgumentList	g		90872	1					
ANR	94056	Argument	g		90872	0					
ANR	94057	Identifier	g		90872	0					
ANR	94058	Argument	get_anode ( g -> curnode )		90872	1					
ANR	94059	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	94060	Callee	get_anode		90872	0					
ANR	94061	Identifier	get_anode		90872	0					
ANR	94062	ArgumentList	g -> curnode		90872	1					
ANR	94063	Argument	g -> curnode		90872	0					
ANR	94064	PtrMemberAccess	g -> curnode		90872	0					
ANR	94065	Identifier	g		90872	0					
ANR	94066	Identifier	curnode		90872	1					
ANR	94067	Argument	true		90872	2					
ANR	94068	Identifier	true		90872	0					
ANR	94069	BreakStatement	break ;	4665:5:120059:120064	90872	262	True				
ANR	94070	Label	"case ',' :"	4666:2:120068:120076	90872	263	True				
ANR	94071	ExpressionStatement	"r_config_toggle ( core -> config , ""graph.few"" )"	4667:3:120081:120124	90872	264	True				
ANR	94072	CallExpression	"r_config_toggle ( core -> config , ""graph.few"" )"		90872	0					
ANR	94073	Callee	r_config_toggle		90872	0					
ANR	94074	Identifier	r_config_toggle		90872	0					
ANR	94075	ArgumentList	core -> config		90872	1					
ANR	94076	Argument	core -> config		90872	0					
ANR	94077	PtrMemberAccess	core -> config		90872	0					
ANR	94078	Identifier	core		90872	0					
ANR	94079	Identifier	config		90872	1					
ANR	94080	Argument	"""graph.few"""		90872	1					
ANR	94081	PrimaryExpression	"""graph.few"""		90872	0					
ANR	94082	ExpressionStatement	g -> need_reload_nodes = true	4668:3:120129:120156	90872	265	True				
ANR	94083	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94084	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94085	Identifier	g		90872	0					
ANR	94086	Identifier	need_reload_nodes		90872	1					
ANR	94087	Identifier	true		90872	1					
ANR	94088	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4669:3:120161:120213	90872	266	True				
ANR	94089	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	94090	Callee	agraph_update_seek		90872	0					
ANR	94091	Identifier	agraph_update_seek		90872	0					
ANR	94092	ArgumentList	g		90872	1					
ANR	94093	Argument	g		90872	0					
ANR	94094	Identifier	g		90872	0					
ANR	94095	Argument	get_anode ( g -> curnode )		90872	1					
ANR	94096	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	94097	Callee	get_anode		90872	0					
ANR	94098	Identifier	get_anode		90872	0					
ANR	94099	ArgumentList	g -> curnode		90872	1					
ANR	94100	Argument	g -> curnode		90872	0					
ANR	94101	PtrMemberAccess	g -> curnode		90872	0					
ANR	94102	Identifier	g		90872	0					
ANR	94103	Identifier	curnode		90872	1					
ANR	94104	Argument	true		90872	2					
ANR	94105	Identifier	true		90872	0					
ANR	94106	BreakStatement	break ;	4670:3:120218:120223	90872	267	True				
ANR	94107	Label	case '.' :	4671:2:120227:120235	90872	268	True				
ANR	94108	ExpressionStatement	discroll = 0	4672:3:120240:120252	90872	269	True				
ANR	94109	AssignmentExpression	discroll = 0		90872	0		=			
ANR	94110	Identifier	discroll		90872	0					
ANR	94111	PrimaryExpression	0		90872	1					
ANR	94112	ExpressionStatement	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"	4673:3:120257:120309	90872	270	True				
ANR	94113	CallExpression	"agraph_update_seek ( g , get_anode ( g -> curnode ) , true )"		90872	0					
ANR	94114	Callee	agraph_update_seek		90872	0					
ANR	94115	Identifier	agraph_update_seek		90872	0					
ANR	94116	ArgumentList	g		90872	1					
ANR	94117	Argument	g		90872	0					
ANR	94118	Identifier	g		90872	0					
ANR	94119	Argument	get_anode ( g -> curnode )		90872	1					
ANR	94120	CallExpression	get_anode ( g -> curnode )		90872	0					
ANR	94121	Callee	get_anode		90872	0					
ANR	94122	Identifier	get_anode		90872	0					
ANR	94123	ArgumentList	g -> curnode		90872	1					
ANR	94124	Argument	g -> curnode		90872	0					
ANR	94125	PtrMemberAccess	g -> curnode		90872	0					
ANR	94126	Identifier	g		90872	0					
ANR	94127	Identifier	curnode		90872	1					
ANR	94128	Argument	true		90872	2					
ANR	94129	Identifier	true		90872	0					
ANR	94130	BreakStatement	break ;	4674:3:120314:120319	90872	271	True				
ANR	94131	Label	case 'i' :	4675:2:120323:120331	90872	272	True				
ANR	94132	ExpressionStatement	"agraph_follow_innodes ( g , true )"	4676:3:120336:120367	90872	273	True				
ANR	94133	CallExpression	"agraph_follow_innodes ( g , true )"		90872	0					
ANR	94134	Callee	agraph_follow_innodes		90872	0					
ANR	94135	Identifier	agraph_follow_innodes		90872	0					
ANR	94136	ArgumentList	g		90872	1					
ANR	94137	Argument	g		90872	0					
ANR	94138	Identifier	g		90872	0					
ANR	94139	Argument	true		90872	1					
ANR	94140	Identifier	true		90872	0					
ANR	94141	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.few"" ) )"		90872	274					
ANR	94142	Condition	"r_config_get_i ( core -> config , ""graph.few"" )"	4677:7:120376:120417	90872	0	True				
ANR	94143	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		90872	0					
ANR	94144	Callee	r_config_get_i		90872	0					
ANR	94145	Identifier	r_config_get_i		90872	0					
ANR	94146	ArgumentList	core -> config		90872	1					
ANR	94147	Argument	core -> config		90872	0					
ANR	94148	PtrMemberAccess	core -> config		90872	0					
ANR	94149	Identifier	core		90872	0					
ANR	94150	Identifier	config		90872	1					
ANR	94151	Argument	"""graph.few"""		90872	1					
ANR	94152	PrimaryExpression	"""graph.few"""		90872	0					
ANR	94153	CompoundStatement		631:51:17115:17115	90872	1					
ANR	94154	ExpressionStatement	g -> need_reload_nodes = true	4678:4:120426:120453	90872	0	True				
ANR	94155	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94156	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94157	Identifier	g		90872	0					
ANR	94158	Identifier	need_reload_nodes		90872	1					
ANR	94159	Identifier	true		90872	1					
ANR	94160	BreakStatement	break ;	4680:3:120463:120468	90872	275	True				
ANR	94161	Label	case 'I' :	4681:2:120472:120480	90872	276	True				
ANR	94162	ExpressionStatement	"agraph_follow_innodes ( g , false )"	4682:3:120485:120517	90872	277	True				
ANR	94163	CallExpression	"agraph_follow_innodes ( g , false )"		90872	0					
ANR	94164	Callee	agraph_follow_innodes		90872	0					
ANR	94165	Identifier	agraph_follow_innodes		90872	0					
ANR	94166	ArgumentList	g		90872	1					
ANR	94167	Argument	g		90872	0					
ANR	94168	Identifier	g		90872	0					
ANR	94169	Argument	false		90872	1					
ANR	94170	Identifier	false		90872	0					
ANR	94171	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.few"" ) )"		90872	278					
ANR	94172	Condition	"r_config_get_i ( core -> config , ""graph.few"" )"	4683:7:120526:120567	90872	0	True				
ANR	94173	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		90872	0					
ANR	94174	Callee	r_config_get_i		90872	0					
ANR	94175	Identifier	r_config_get_i		90872	0					
ANR	94176	ArgumentList	core -> config		90872	1					
ANR	94177	Argument	core -> config		90872	0					
ANR	94178	PtrMemberAccess	core -> config		90872	0					
ANR	94179	Identifier	core		90872	0					
ANR	94180	Identifier	config		90872	1					
ANR	94181	Argument	"""graph.few"""		90872	1					
ANR	94182	PrimaryExpression	"""graph.few"""		90872	0					
ANR	94183	CompoundStatement		637:51:17265:17265	90872	1					
ANR	94184	ExpressionStatement	g -> need_reload_nodes = true	4684:4:120576:120603	90872	0	True				
ANR	94185	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94186	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94187	Identifier	g		90872	0					
ANR	94188	Identifier	need_reload_nodes		90872	1					
ANR	94189	Identifier	true		90872	1					
ANR	94190	BreakStatement	break ;	4686:3:120613:120618	90872	279	True				
ANR	94191	Label	case 't' :	4687:2:120622:120630	90872	280	True				
ANR	94192	ExpressionStatement	agraph_follow_true ( g )	4688:3:120635:120657	90872	281	True				
ANR	94193	CallExpression	agraph_follow_true ( g )		90872	0					
ANR	94194	Callee	agraph_follow_true		90872	0					
ANR	94195	Identifier	agraph_follow_true		90872	0					
ANR	94196	ArgumentList	g		90872	1					
ANR	94197	Argument	g		90872	0					
ANR	94198	Identifier	g		90872	0					
ANR	94199	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.few"" ) )"		90872	282					
ANR	94200	Condition	"r_config_get_i ( core -> config , ""graph.few"" )"	4689:7:120666:120707	90872	0	True				
ANR	94201	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		90872	0					
ANR	94202	Callee	r_config_get_i		90872	0					
ANR	94203	Identifier	r_config_get_i		90872	0					
ANR	94204	ArgumentList	core -> config		90872	1					
ANR	94205	Argument	core -> config		90872	0					
ANR	94206	PtrMemberAccess	core -> config		90872	0					
ANR	94207	Identifier	core		90872	0					
ANR	94208	Identifier	config		90872	1					
ANR	94209	Argument	"""graph.few"""		90872	1					
ANR	94210	PrimaryExpression	"""graph.few"""		90872	0					
ANR	94211	CompoundStatement		643:51:17405:17405	90872	1					
ANR	94212	ExpressionStatement	g -> need_reload_nodes = true	4690:4:120716:120743	90872	0	True				
ANR	94213	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94214	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94215	Identifier	g		90872	0					
ANR	94216	Identifier	need_reload_nodes		90872	1					
ANR	94217	Identifier	true		90872	1					
ANR	94218	BreakStatement	break ;	4692:3:120753:120758	90872	283	True				
ANR	94219	Label	case 'T' :	4693:2:120762:120770	90872	284	True				
ANR	94220	BreakStatement	break ;	4695:3:120816:120821	90872	285	True				
ANR	94221	Label	case 'f' :	4696:2:120825:120833	90872	286	True				
ANR	94222	ExpressionStatement	agraph_follow_false ( g )	4697:3:120838:120861	90872	287	True				
ANR	94223	CallExpression	agraph_follow_false ( g )		90872	0					
ANR	94224	Callee	agraph_follow_false		90872	0					
ANR	94225	Identifier	agraph_follow_false		90872	0					
ANR	94226	ArgumentList	g		90872	1					
ANR	94227	Argument	g		90872	0					
ANR	94228	Identifier	g		90872	0					
ANR	94229	IfStatement	"if ( r_config_get_i ( core -> config , ""graph.few"" ) )"		90872	288					
ANR	94230	Condition	"r_config_get_i ( core -> config , ""graph.few"" )"	4698:7:120870:120911	90872	0	True				
ANR	94231	CallExpression	"r_config_get_i ( core -> config , ""graph.few"" )"		90872	0					
ANR	94232	Callee	r_config_get_i		90872	0					
ANR	94233	Identifier	r_config_get_i		90872	0					
ANR	94234	ArgumentList	core -> config		90872	1					
ANR	94235	Argument	core -> config		90872	0					
ANR	94236	PtrMemberAccess	core -> config		90872	0					
ANR	94237	Identifier	core		90872	0					
ANR	94238	Identifier	config		90872	1					
ANR	94239	Argument	"""graph.few"""		90872	1					
ANR	94240	PrimaryExpression	"""graph.few"""		90872	0					
ANR	94241	CompoundStatement		652:51:17609:17609	90872	1					
ANR	94242	ExpressionStatement	g -> need_reload_nodes = true	4699:4:120920:120947	90872	0	True				
ANR	94243	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94244	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94245	Identifier	g		90872	0					
ANR	94246	Identifier	need_reload_nodes		90872	1					
ANR	94247	Identifier	true		90872	1					
ANR	94248	BreakStatement	break ;	4701:3:120957:120962	90872	289	True				
ANR	94249	Label	case 'F' :	4702:2:120966:120974	90872	290	True				
ANR	94250	IfStatement	if ( okey == 27 )		90872	291					
ANR	94251	Condition	okey == 27	4703:7:120983:120992	90872	0	True				
ANR	94252	EqualityExpression	okey == 27		90872	0		==			
ANR	94253	Identifier	okey		90872	0					
ANR	94254	PrimaryExpression	27		90872	1					
ANR	94255	CompoundStatement		659:4:17718:17770	90872	1					
ANR	94256	IdentifierDeclStatement	"const RGraphNode * gn = find_near_of ( g , NULL , false ) ;"	4705:4:121023:121075	90872	0	True				
ANR	94257	IdentifierDecl	"* gn = find_near_of ( g , NULL , false )"		90872	0					
ANR	94258	IdentifierDeclType	const RGraphNode *		90872	0					
ANR	94259	Identifier	gn		90872	1					
ANR	94260	AssignmentExpression	"* gn = find_near_of ( g , NULL , false )"		90872	2		=			
ANR	94261	Identifier	gn		90872	0					
ANR	94262	CallExpression	"find_near_of ( g , NULL , false )"		90872	1					
ANR	94263	Callee	find_near_of		90872	0					
ANR	94264	Identifier	find_near_of		90872	0					
ANR	94265	ArgumentList	g		90872	1					
ANR	94266	Argument	g		90872	0					
ANR	94267	Identifier	g		90872	0					
ANR	94268	Argument	NULL		90872	1					
ANR	94269	Identifier	NULL		90872	0					
ANR	94270	Argument	false		90872	2					
ANR	94271	Identifier	false		90872	0					
ANR	94272	ExpressionStatement	g -> update_seek_on = get_anode ( gn )	4706:4:121081:121115	90872	1	True				
ANR	94273	AssignmentExpression	g -> update_seek_on = get_anode ( gn )		90872	0		=			
ANR	94274	PtrMemberAccess	g -> update_seek_on		90872	0					
ANR	94275	Identifier	g		90872	0					
ANR	94276	Identifier	update_seek_on		90872	1					
ANR	94277	CallExpression	get_anode ( gn )		90872	1					
ANR	94278	Callee	get_anode		90872	0					
ANR	94279	Identifier	get_anode		90872	0					
ANR	94280	ArgumentList	gn		90872	1					
ANR	94281	Argument	gn		90872	0					
ANR	94282	Identifier	gn		90872	0					
ANR	94283	ElseStatement	else		90872	0					
ANR	94284	CompoundStatement		661:10:17822:17822	90872	0					
ANR	94285	ExpressionStatement	r_core_visual_trackflags ( core )	4709:4:121167:121198	90872	0	True				
ANR	94286	CallExpression	r_core_visual_trackflags ( core )		90872	0					
ANR	94287	Callee	r_core_visual_trackflags		90872	0					
ANR	94288	Identifier	r_core_visual_trackflags		90872	0					
ANR	94289	ArgumentList	core		90872	1					
ANR	94290	Argument	core		90872	0					
ANR	94291	Identifier	core		90872	0					
ANR	94292	BreakStatement	break ;	4711:3:121208:121213	90872	292	True				
ANR	94293	Label	case '/' :	4712:2:121217:121225	90872	293	True				
ANR	94294	ExpressionStatement	"showcursor ( core , true )"	4713:3:121230:121253	90872	294	True				
ANR	94295	CallExpression	"showcursor ( core , true )"		90872	0					
ANR	94296	Callee	showcursor		90872	0					
ANR	94297	Identifier	showcursor		90872	0					
ANR	94298	ArgumentList	core		90872	1					
ANR	94299	Argument	core		90872	0					
ANR	94300	Identifier	core		90872	0					
ANR	94301	Argument	true		90872	1					
ANR	94302	Identifier	true		90872	0					
ANR	94303	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.interactive"" , true )"	4714:3:121258:121312	90872	295	True				
ANR	94304	CallExpression	"r_config_set_i ( core -> config , ""scr.interactive"" , true )"		90872	0					
ANR	94305	Callee	r_config_set_i		90872	0					
ANR	94306	Identifier	r_config_set_i		90872	0					
ANR	94307	ArgumentList	core -> config		90872	1					
ANR	94308	Argument	core -> config		90872	0					
ANR	94309	PtrMemberAccess	core -> config		90872	0					
ANR	94310	Identifier	core		90872	0					
ANR	94311	Identifier	config		90872	1					
ANR	94312	Argument	"""scr.interactive"""		90872	1					
ANR	94313	PrimaryExpression	"""scr.interactive"""		90872	0					
ANR	94314	Argument	true		90872	2					
ANR	94315	Identifier	true		90872	0					
ANR	94316	ExpressionStatement	"r_core_cmd0 ( core , ""?i highlight;e scr.highlight=`yp`"" )"	4715:3:121317:121372	90872	296	True				
ANR	94317	CallExpression	"r_core_cmd0 ( core , ""?i highlight;e scr.highlight=`yp`"" )"		90872	0					
ANR	94318	Callee	r_core_cmd0		90872	0					
ANR	94319	Identifier	r_core_cmd0		90872	0					
ANR	94320	ArgumentList	core		90872	1					
ANR	94321	Argument	core		90872	0					
ANR	94322	Identifier	core		90872	0					
ANR	94323	Argument	"""?i highlight;e scr.highlight=`yp`"""		90872	1					
ANR	94324	PrimaryExpression	"""?i highlight;e scr.highlight=`yp`"""		90872	0					
ANR	94325	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.interactive"" , false )"	4716:3:121377:121432	90872	297	True				
ANR	94326	CallExpression	"r_config_set_i ( core -> config , ""scr.interactive"" , false )"		90872	0					
ANR	94327	Callee	r_config_set_i		90872	0					
ANR	94328	Identifier	r_config_set_i		90872	0					
ANR	94329	ArgumentList	core -> config		90872	1					
ANR	94330	Argument	core -> config		90872	0					
ANR	94331	PtrMemberAccess	core -> config		90872	0					
ANR	94332	Identifier	core		90872	0					
ANR	94333	Identifier	config		90872	1					
ANR	94334	Argument	"""scr.interactive"""		90872	1					
ANR	94335	PrimaryExpression	"""scr.interactive"""		90872	0					
ANR	94336	Argument	false		90872	2					
ANR	94337	Identifier	false		90872	0					
ANR	94338	ExpressionStatement	"showcursor ( core , false )"	4717:3:121437:121461	90872	298	True				
ANR	94339	CallExpression	"showcursor ( core , false )"		90872	0					
ANR	94340	Callee	showcursor		90872	0					
ANR	94341	Identifier	showcursor		90872	0					
ANR	94342	ArgumentList	core		90872	1					
ANR	94343	Argument	core		90872	0					
ANR	94344	Identifier	core		90872	0					
ANR	94345	Argument	false		90872	1					
ANR	94346	Identifier	false		90872	0					
ANR	94347	BreakStatement	break ;	4718:3:121466:121471	90872	299	True				
ANR	94348	Label	case ':' :	4719:2:121475:121483	90872	300	True				
ANR	94349	ExpressionStatement	r_core_visual_prompt_input ( core )	4720:3:121488:121521	90872	301	True				
ANR	94350	CallExpression	r_core_visual_prompt_input ( core )		90872	0					
ANR	94351	Callee	r_core_visual_prompt_input		90872	0					
ANR	94352	Identifier	r_core_visual_prompt_input		90872	0					
ANR	94353	ArgumentList	core		90872	1					
ANR	94354	Argument	core		90872	0					
ANR	94355	Identifier	core		90872	0					
ANR	94356	IfStatement	if ( ! g )		90872	302					
ANR	94357	Condition	! g	4721:7:121530:121531	90872	0	True				
ANR	94358	UnaryOperationExpression	! g		90872	0					
ANR	94359	UnaryOperator	!		90872	0					
ANR	94360	Identifier	g		90872	1					
ANR	94361	CompoundStatement		675:11:18229:18229	90872	1					
ANR	94362	ExpressionStatement	g -> need_reload_nodes = true	4722:4:121540:121567	90872	0	True				
ANR	94363	AssignmentExpression	g -> need_reload_nodes = true		90872	0		=			
ANR	94364	PtrMemberAccess	g -> need_reload_nodes		90872	0					
ANR	94365	Identifier	g		90872	0					
ANR	94366	Identifier	need_reload_nodes		90872	1					
ANR	94367	Identifier	true		90872	1					
ANR	94368	ExpressionStatement	"get_bbupdate ( g , core , fcn )"	4723:4:121644:121671	90872	1	True				
ANR	94369	CallExpression	"get_bbupdate ( g , core , fcn )"		90872	0					
ANR	94370	Callee	get_bbupdate		90872	0					
ANR	94371	Identifier	get_bbupdate		90872	0					
ANR	94372	ArgumentList	g		90872	1					
ANR	94373	Argument	g		90872	0					
ANR	94374	Identifier	g		90872	0					
ANR	94375	Argument	core		90872	1					
ANR	94376	Identifier	core		90872	0					
ANR	94377	Argument	fcn		90872	2					
ANR	94378	Identifier	fcn		90872	0					
ANR	94379	BreakStatement	break ;	4725:3:121681:121686	90872	303	True				
ANR	94380	Label	case 'w' :	4726:2:121690:121698	90872	304	True				
ANR	94381	ExpressionStatement	"agraph_toggle_speed ( g , core )"	4727:3:121703:121732	90872	305	True				
ANR	94382	CallExpression	"agraph_toggle_speed ( g , core )"		90872	0					
ANR	94383	Callee	agraph_toggle_speed		90872	0					
ANR	94384	Identifier	agraph_toggle_speed		90872	0					
ANR	94385	ArgumentList	g		90872	1					
ANR	94386	Argument	g		90872	0					
ANR	94387	Identifier	g		90872	0					
ANR	94388	Argument	core		90872	1					
ANR	94389	Identifier	core		90872	0					
ANR	94390	BreakStatement	break ;	4728:3:121737:121742	90872	306	True				
ANR	94391	Label	case '_' :	4729:2:121746:121754	90872	307	True				
ANR	94392	ExpressionStatement	r_core_visual_hudstuff ( core )	4730:3:121759:121788	90872	308	True				
ANR	94393	CallExpression	r_core_visual_hudstuff ( core )		90872	0					
ANR	94394	Callee	r_core_visual_hudstuff		90872	0					
ANR	94395	Identifier	r_core_visual_hudstuff		90872	0					
ANR	94396	ArgumentList	core		90872	1					
ANR	94397	Argument	core		90872	0					
ANR	94398	Identifier	core		90872	0					
ANR	94399	BreakStatement	break ;	4731:3:121793:121798	90872	309	True				
ANR	94400	Label	case R_CONS_KEY_F1 :	4732:2:121802:121820	90872	310	True				
ANR	94401	Identifier	R_CONS_KEY_F1		90872	0					
ANR	94402	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f1"" )"	4733:3:121825:121868	90872	311	True				
ANR	94403	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f1"" )"		90872	0		=			
ANR	94404	Identifier	cmd		90872	0					
ANR	94405	CallExpression	"r_config_get ( core -> config , ""key.f1"" )"		90872	1					
ANR	94406	Callee	r_config_get		90872	0					
ANR	94407	Identifier	r_config_get		90872	0					
ANR	94408	ArgumentList	core -> config		90872	1					
ANR	94409	Argument	core -> config		90872	0					
ANR	94410	PtrMemberAccess	core -> config		90872	0					
ANR	94411	Identifier	core		90872	0					
ANR	94412	Identifier	config		90872	1					
ANR	94413	Argument	"""key.f1"""		90872	1					
ANR	94414	PrimaryExpression	"""key.f1"""		90872	0					
ANR	94415	IfStatement	if ( cmd && * cmd )		90872	312					
ANR	94416	Condition	cmd && * cmd	4734:7:121877:121887	90872	0	True				
ANR	94417	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94418	Identifier	cmd		90872	0					
ANR	94419	UnaryOperationExpression	* cmd		90872	1					
ANR	94420	UnaryOperator	*		90872	0					
ANR	94421	Identifier	cmd		90872	1					
ANR	94422	CompoundStatement		688:20:18585:18585	90872	1					
ANR	94423	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4735:4:121896:121926	90872	0	True				
ANR	94424	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94425	CastTarget	void		90872	0					
ANR	94426	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94427	Callee	r_core_cmd0		90872	0					
ANR	94428	Identifier	r_core_cmd0		90872	0					
ANR	94429	ArgumentList	core		90872	1					
ANR	94430	Argument	core		90872	0					
ANR	94431	Identifier	core		90872	0					
ANR	94432	Argument	cmd		90872	1					
ANR	94433	Identifier	cmd		90872	0					
ANR	94434	BreakStatement	break ;	4737:3:121936:121941	90872	313	True				
ANR	94435	Label	case R_CONS_KEY_F2 :	4738:2:121945:121963	90872	314	True				
ANR	94436	Identifier	R_CONS_KEY_F2		90872	0					
ANR	94437	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f2"" )"	4739:3:121968:122011	90872	315	True				
ANR	94438	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f2"" )"		90872	0		=			
ANR	94439	Identifier	cmd		90872	0					
ANR	94440	CallExpression	"r_config_get ( core -> config , ""key.f2"" )"		90872	1					
ANR	94441	Callee	r_config_get		90872	0					
ANR	94442	Identifier	r_config_get		90872	0					
ANR	94443	ArgumentList	core -> config		90872	1					
ANR	94444	Argument	core -> config		90872	0					
ANR	94445	PtrMemberAccess	core -> config		90872	0					
ANR	94446	Identifier	core		90872	0					
ANR	94447	Identifier	config		90872	1					
ANR	94448	Argument	"""key.f2"""		90872	1					
ANR	94449	PrimaryExpression	"""key.f2"""		90872	0					
ANR	94450	IfStatement	if ( cmd && * cmd )		90872	316					
ANR	94451	Condition	cmd && * cmd	4740:7:122020:122030	90872	0	True				
ANR	94452	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94453	Identifier	cmd		90872	0					
ANR	94454	UnaryOperationExpression	* cmd		90872	1					
ANR	94455	UnaryOperator	*		90872	0					
ANR	94456	Identifier	cmd		90872	1					
ANR	94457	CompoundStatement		694:20:18728:18728	90872	1					
ANR	94458	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4741:4:122039:122069	90872	0	True				
ANR	94459	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94460	CastTarget	void		90872	0					
ANR	94461	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94462	Callee	r_core_cmd0		90872	0					
ANR	94463	Identifier	r_core_cmd0		90872	0					
ANR	94464	ArgumentList	core		90872	1					
ANR	94465	Argument	core		90872	0					
ANR	94466	Identifier	core		90872	0					
ANR	94467	Argument	cmd		90872	1					
ANR	94468	Identifier	cmd		90872	0					
ANR	94469	ElseStatement	else		90872	0					
ANR	94470	CompoundStatement		696:10:18776:18776	90872	0					
ANR	94471	ExpressionStatement	graph_breakpoint ( core )	4743:4:122087:122110	90872	0	True				
ANR	94472	CallExpression	graph_breakpoint ( core )		90872	0					
ANR	94473	Callee	graph_breakpoint		90872	0					
ANR	94474	Identifier	graph_breakpoint		90872	0					
ANR	94475	ArgumentList	core		90872	1					
ANR	94476	Argument	core		90872	0					
ANR	94477	Identifier	core		90872	0					
ANR	94478	BreakStatement	break ;	4745:3:122120:122125	90872	317	True				
ANR	94479	Label	case R_CONS_KEY_F3 :	4746:2:122129:122147	90872	318	True				
ANR	94480	Identifier	R_CONS_KEY_F3		90872	0					
ANR	94481	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f3"" )"	4747:3:122152:122195	90872	319	True				
ANR	94482	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f3"" )"		90872	0		=			
ANR	94483	Identifier	cmd		90872	0					
ANR	94484	CallExpression	"r_config_get ( core -> config , ""key.f3"" )"		90872	1					
ANR	94485	Callee	r_config_get		90872	0					
ANR	94486	Identifier	r_config_get		90872	0					
ANR	94487	ArgumentList	core -> config		90872	1					
ANR	94488	Argument	core -> config		90872	0					
ANR	94489	PtrMemberAccess	core -> config		90872	0					
ANR	94490	Identifier	core		90872	0					
ANR	94491	Identifier	config		90872	1					
ANR	94492	Argument	"""key.f3"""		90872	1					
ANR	94493	PrimaryExpression	"""key.f3"""		90872	0					
ANR	94494	IfStatement	if ( cmd && * cmd )		90872	320					
ANR	94495	Condition	cmd && * cmd	4748:7:122204:122214	90872	0	True				
ANR	94496	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94497	Identifier	cmd		90872	0					
ANR	94498	UnaryOperationExpression	* cmd		90872	1					
ANR	94499	UnaryOperator	*		90872	0					
ANR	94500	Identifier	cmd		90872	1					
ANR	94501	CompoundStatement		702:20:18912:18912	90872	1					
ANR	94502	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4749:4:122223:122253	90872	0	True				
ANR	94503	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94504	CastTarget	void		90872	0					
ANR	94505	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94506	Callee	r_core_cmd0		90872	0					
ANR	94507	Identifier	r_core_cmd0		90872	0					
ANR	94508	ArgumentList	core		90872	1					
ANR	94509	Argument	core		90872	0					
ANR	94510	Identifier	core		90872	0					
ANR	94511	Argument	cmd		90872	1					
ANR	94512	Identifier	cmd		90872	0					
ANR	94513	BreakStatement	break ;	4751:3:122263:122268	90872	321	True				
ANR	94514	Label	case R_CONS_KEY_F4 :	4752:2:122272:122290	90872	322	True				
ANR	94515	Identifier	R_CONS_KEY_F4		90872	0					
ANR	94516	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f4"" )"	4753:3:122295:122338	90872	323	True				
ANR	94517	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f4"" )"		90872	0		=			
ANR	94518	Identifier	cmd		90872	0					
ANR	94519	CallExpression	"r_config_get ( core -> config , ""key.f4"" )"		90872	1					
ANR	94520	Callee	r_config_get		90872	0					
ANR	94521	Identifier	r_config_get		90872	0					
ANR	94522	ArgumentList	core -> config		90872	1					
ANR	94523	Argument	core -> config		90872	0					
ANR	94524	PtrMemberAccess	core -> config		90872	0					
ANR	94525	Identifier	core		90872	0					
ANR	94526	Identifier	config		90872	1					
ANR	94527	Argument	"""key.f4"""		90872	1					
ANR	94528	PrimaryExpression	"""key.f4"""		90872	0					
ANR	94529	IfStatement	if ( cmd && * cmd )		90872	324					
ANR	94530	Condition	cmd && * cmd	4754:7:122347:122357	90872	0	True				
ANR	94531	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94532	Identifier	cmd		90872	0					
ANR	94533	UnaryOperationExpression	* cmd		90872	1					
ANR	94534	UnaryOperator	*		90872	0					
ANR	94535	Identifier	cmd		90872	1					
ANR	94536	CompoundStatement		708:20:19055:19055	90872	1					
ANR	94537	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4755:4:122366:122396	90872	0	True				
ANR	94538	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94539	CastTarget	void		90872	0					
ANR	94540	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94541	Callee	r_core_cmd0		90872	0					
ANR	94542	Identifier	r_core_cmd0		90872	0					
ANR	94543	ArgumentList	core		90872	1					
ANR	94544	Argument	core		90872	0					
ANR	94545	Identifier	core		90872	0					
ANR	94546	Argument	cmd		90872	1					
ANR	94547	Identifier	cmd		90872	0					
ANR	94548	BreakStatement	break ;	4757:3:122406:122411	90872	325	True				
ANR	94549	Label	case R_CONS_KEY_F5 :	4758:2:122415:122433	90872	326	True				
ANR	94550	Identifier	R_CONS_KEY_F5		90872	0					
ANR	94551	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f5"" )"	4759:3:122438:122481	90872	327	True				
ANR	94552	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f5"" )"		90872	0		=			
ANR	94553	Identifier	cmd		90872	0					
ANR	94554	CallExpression	"r_config_get ( core -> config , ""key.f5"" )"		90872	1					
ANR	94555	Callee	r_config_get		90872	0					
ANR	94556	Identifier	r_config_get		90872	0					
ANR	94557	ArgumentList	core -> config		90872	1					
ANR	94558	Argument	core -> config		90872	0					
ANR	94559	PtrMemberAccess	core -> config		90872	0					
ANR	94560	Identifier	core		90872	0					
ANR	94561	Identifier	config		90872	1					
ANR	94562	Argument	"""key.f5"""		90872	1					
ANR	94563	PrimaryExpression	"""key.f5"""		90872	0					
ANR	94564	IfStatement	if ( cmd && * cmd )		90872	328					
ANR	94565	Condition	cmd && * cmd	4760:7:122490:122500	90872	0	True				
ANR	94566	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94567	Identifier	cmd		90872	0					
ANR	94568	UnaryOperationExpression	* cmd		90872	1					
ANR	94569	UnaryOperator	*		90872	0					
ANR	94570	Identifier	cmd		90872	1					
ANR	94571	CompoundStatement		714:20:19198:19198	90872	1					
ANR	94572	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4761:4:122509:122538	90872	0	True				
ANR	94573	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94574	CastTarget	void		90872	0					
ANR	94575	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94576	Callee	r_core_cmd0		90872	0					
ANR	94577	Identifier	r_core_cmd0		90872	0					
ANR	94578	ArgumentList	core		90872	1					
ANR	94579	Argument	core		90872	0					
ANR	94580	Identifier	core		90872	0					
ANR	94581	Argument	cmd		90872	1					
ANR	94582	Identifier	cmd		90872	0					
ANR	94583	BreakStatement	break ;	4763:3:122548:122553	90872	329	True				
ANR	94584	Label	case R_CONS_KEY_F6 :	4764:2:122557:122575	90872	330	True				
ANR	94585	Identifier	R_CONS_KEY_F6		90872	0					
ANR	94586	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f6"" )"	4765:3:122580:122623	90872	331	True				
ANR	94587	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f6"" )"		90872	0		=			
ANR	94588	Identifier	cmd		90872	0					
ANR	94589	CallExpression	"r_config_get ( core -> config , ""key.f6"" )"		90872	1					
ANR	94590	Callee	r_config_get		90872	0					
ANR	94591	Identifier	r_config_get		90872	0					
ANR	94592	ArgumentList	core -> config		90872	1					
ANR	94593	Argument	core -> config		90872	0					
ANR	94594	PtrMemberAccess	core -> config		90872	0					
ANR	94595	Identifier	core		90872	0					
ANR	94596	Identifier	config		90872	1					
ANR	94597	Argument	"""key.f6"""		90872	1					
ANR	94598	PrimaryExpression	"""key.f6"""		90872	0					
ANR	94599	IfStatement	if ( cmd && * cmd )		90872	332					
ANR	94600	Condition	cmd && * cmd	4766:7:122632:122642	90872	0	True				
ANR	94601	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94602	Identifier	cmd		90872	0					
ANR	94603	UnaryOperationExpression	* cmd		90872	1					
ANR	94604	UnaryOperator	*		90872	0					
ANR	94605	Identifier	cmd		90872	1					
ANR	94606	CompoundStatement		720:20:19340:19340	90872	1					
ANR	94607	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4767:4:122651:122680	90872	0	True				
ANR	94608	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94609	CastTarget	void		90872	0					
ANR	94610	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94611	Callee	r_core_cmd0		90872	0					
ANR	94612	Identifier	r_core_cmd0		90872	0					
ANR	94613	ArgumentList	core		90872	1					
ANR	94614	Argument	core		90872	0					
ANR	94615	Identifier	core		90872	0					
ANR	94616	Argument	cmd		90872	1					
ANR	94617	Identifier	cmd		90872	0					
ANR	94618	BreakStatement	break ;	4769:3:122690:122695	90872	333	True				
ANR	94619	Label	case R_CONS_KEY_F7 :	4770:2:122699:122717	90872	334	True				
ANR	94620	Identifier	R_CONS_KEY_F7		90872	0					
ANR	94621	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f7"" )"	4771:3:122722:122765	90872	335	True				
ANR	94622	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f7"" )"		90872	0		=			
ANR	94623	Identifier	cmd		90872	0					
ANR	94624	CallExpression	"r_config_get ( core -> config , ""key.f7"" )"		90872	1					
ANR	94625	Callee	r_config_get		90872	0					
ANR	94626	Identifier	r_config_get		90872	0					
ANR	94627	ArgumentList	core -> config		90872	1					
ANR	94628	Argument	core -> config		90872	0					
ANR	94629	PtrMemberAccess	core -> config		90872	0					
ANR	94630	Identifier	core		90872	0					
ANR	94631	Identifier	config		90872	1					
ANR	94632	Argument	"""key.f7"""		90872	1					
ANR	94633	PrimaryExpression	"""key.f7"""		90872	0					
ANR	94634	IfStatement	if ( cmd && * cmd )		90872	336					
ANR	94635	Condition	cmd && * cmd	4772:7:122774:122784	90872	0	True				
ANR	94636	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94637	Identifier	cmd		90872	0					
ANR	94638	UnaryOperationExpression	* cmd		90872	1					
ANR	94639	UnaryOperator	*		90872	0					
ANR	94640	Identifier	cmd		90872	1					
ANR	94641	CompoundStatement		726:20:19482:19482	90872	1					
ANR	94642	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4773:4:122793:122822	90872	0	True				
ANR	94643	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94644	CastTarget	void		90872	0					
ANR	94645	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94646	Callee	r_core_cmd0		90872	0					
ANR	94647	Identifier	r_core_cmd0		90872	0					
ANR	94648	ArgumentList	core		90872	1					
ANR	94649	Argument	core		90872	0					
ANR	94650	Identifier	core		90872	0					
ANR	94651	Argument	cmd		90872	1					
ANR	94652	Identifier	cmd		90872	0					
ANR	94653	ElseStatement	else		90872	0					
ANR	94654	CompoundStatement		728:10:19529:19529	90872	0					
ANR	94655	ExpressionStatement	"graph_single_step_in ( core , g )"	4775:4:122840:122870	90872	0	True				
ANR	94656	CallExpression	"graph_single_step_in ( core , g )"		90872	0					
ANR	94657	Callee	graph_single_step_in		90872	0					
ANR	94658	Identifier	graph_single_step_in		90872	0					
ANR	94659	ArgumentList	core		90872	1					
ANR	94660	Argument	core		90872	0					
ANR	94661	Identifier	core		90872	0					
ANR	94662	Argument	g		90872	1					
ANR	94663	Identifier	g		90872	0					
ANR	94664	BreakStatement	break ;	4777:3:122880:122885	90872	337	True				
ANR	94665	Label	case R_CONS_KEY_F8 :	4778:2:122889:122907	90872	338	True				
ANR	94666	Identifier	R_CONS_KEY_F8		90872	0					
ANR	94667	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f8"" )"	4779:3:122912:122955	90872	339	True				
ANR	94668	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f8"" )"		90872	0		=			
ANR	94669	Identifier	cmd		90872	0					
ANR	94670	CallExpression	"r_config_get ( core -> config , ""key.f8"" )"		90872	1					
ANR	94671	Callee	r_config_get		90872	0					
ANR	94672	Identifier	r_config_get		90872	0					
ANR	94673	ArgumentList	core -> config		90872	1					
ANR	94674	Argument	core -> config		90872	0					
ANR	94675	PtrMemberAccess	core -> config		90872	0					
ANR	94676	Identifier	core		90872	0					
ANR	94677	Identifier	config		90872	1					
ANR	94678	Argument	"""key.f8"""		90872	1					
ANR	94679	PrimaryExpression	"""key.f8"""		90872	0					
ANR	94680	IfStatement	if ( cmd && * cmd )		90872	340					
ANR	94681	Condition	cmd && * cmd	4780:7:122964:122974	90872	0	True				
ANR	94682	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94683	Identifier	cmd		90872	0					
ANR	94684	UnaryOperationExpression	* cmd		90872	1					
ANR	94685	UnaryOperator	*		90872	0					
ANR	94686	Identifier	cmd		90872	1					
ANR	94687	CompoundStatement		734:20:19672:19672	90872	1					
ANR	94688	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4781:4:122983:123012	90872	0	True				
ANR	94689	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94690	CastTarget	void		90872	0					
ANR	94691	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94692	Callee	r_core_cmd0		90872	0					
ANR	94693	Identifier	r_core_cmd0		90872	0					
ANR	94694	ArgumentList	core		90872	1					
ANR	94695	Argument	core		90872	0					
ANR	94696	Identifier	core		90872	0					
ANR	94697	Argument	cmd		90872	1					
ANR	94698	Identifier	cmd		90872	0					
ANR	94699	ElseStatement	else		90872	0					
ANR	94700	CompoundStatement		736:10:19719:19719	90872	0					
ANR	94701	ExpressionStatement	"graph_single_step_over ( core , g )"	4783:4:123030:123062	90872	0	True				
ANR	94702	CallExpression	"graph_single_step_over ( core , g )"		90872	0					
ANR	94703	Callee	graph_single_step_over		90872	0					
ANR	94704	Identifier	graph_single_step_over		90872	0					
ANR	94705	ArgumentList	core		90872	1					
ANR	94706	Argument	core		90872	0					
ANR	94707	Identifier	core		90872	0					
ANR	94708	Argument	g		90872	1					
ANR	94709	Identifier	g		90872	0					
ANR	94710	BreakStatement	break ;	4785:3:123072:123077	90872	341	True				
ANR	94711	Label	case R_CONS_KEY_F9 :	4786:2:123081:123099	90872	342	True				
ANR	94712	Identifier	R_CONS_KEY_F9		90872	0					
ANR	94713	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f9"" )"	4787:3:123104:123147	90872	343	True				
ANR	94714	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f9"" )"		90872	0		=			
ANR	94715	Identifier	cmd		90872	0					
ANR	94716	CallExpression	"r_config_get ( core -> config , ""key.f9"" )"		90872	1					
ANR	94717	Callee	r_config_get		90872	0					
ANR	94718	Identifier	r_config_get		90872	0					
ANR	94719	ArgumentList	core -> config		90872	1					
ANR	94720	Argument	core -> config		90872	0					
ANR	94721	PtrMemberAccess	core -> config		90872	0					
ANR	94722	Identifier	core		90872	0					
ANR	94723	Identifier	config		90872	1					
ANR	94724	Argument	"""key.f9"""		90872	1					
ANR	94725	PrimaryExpression	"""key.f9"""		90872	0					
ANR	94726	IfStatement	if ( cmd && * cmd )		90872	344					
ANR	94727	Condition	cmd && * cmd	4788:7:123156:123166	90872	0	True				
ANR	94728	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94729	Identifier	cmd		90872	0					
ANR	94730	UnaryOperationExpression	* cmd		90872	1					
ANR	94731	UnaryOperator	*		90872	0					
ANR	94732	Identifier	cmd		90872	1					
ANR	94733	CompoundStatement		742:20:19864:19864	90872	1					
ANR	94734	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4789:4:123175:123204	90872	0	True				
ANR	94735	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94736	CastTarget	void		90872	0					
ANR	94737	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94738	Callee	r_core_cmd0		90872	0					
ANR	94739	Identifier	r_core_cmd0		90872	0					
ANR	94740	ArgumentList	core		90872	1					
ANR	94741	Argument	core		90872	0					
ANR	94742	Identifier	core		90872	0					
ANR	94743	Argument	cmd		90872	1					
ANR	94744	Identifier	cmd		90872	0					
ANR	94745	ElseStatement	else		90872	0					
ANR	94746	CompoundStatement		744:10:19911:19911	90872	0					
ANR	94747	ExpressionStatement	graph_continue ( core )	4791:4:123222:123243	90872	0	True				
ANR	94748	CallExpression	graph_continue ( core )		90872	0					
ANR	94749	Callee	graph_continue		90872	0					
ANR	94750	Identifier	graph_continue		90872	0					
ANR	94751	ArgumentList	core		90872	1					
ANR	94752	Argument	core		90872	0					
ANR	94753	Identifier	core		90872	0					
ANR	94754	BreakStatement	break ;	4793:3:123253:123258	90872	345	True				
ANR	94755	Label	case R_CONS_KEY_F10 :	4794:2:123262:123281	90872	346	True				
ANR	94756	Identifier	R_CONS_KEY_F10		90872	0					
ANR	94757	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f10"" )"	4795:3:123286:123330	90872	347	True				
ANR	94758	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f10"" )"		90872	0		=			
ANR	94759	Identifier	cmd		90872	0					
ANR	94760	CallExpression	"r_config_get ( core -> config , ""key.f10"" )"		90872	1					
ANR	94761	Callee	r_config_get		90872	0					
ANR	94762	Identifier	r_config_get		90872	0					
ANR	94763	ArgumentList	core -> config		90872	1					
ANR	94764	Argument	core -> config		90872	0					
ANR	94765	PtrMemberAccess	core -> config		90872	0					
ANR	94766	Identifier	core		90872	0					
ANR	94767	Identifier	config		90872	1					
ANR	94768	Argument	"""key.f10"""		90872	1					
ANR	94769	PrimaryExpression	"""key.f10"""		90872	0					
ANR	94770	IfStatement	if ( cmd && * cmd )		90872	348					
ANR	94771	Condition	cmd && * cmd	4796:7:123339:123349	90872	0	True				
ANR	94772	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94773	Identifier	cmd		90872	0					
ANR	94774	UnaryOperationExpression	* cmd		90872	1					
ANR	94775	UnaryOperator	*		90872	0					
ANR	94776	Identifier	cmd		90872	1					
ANR	94777	CompoundStatement		750:20:20047:20047	90872	1					
ANR	94778	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4797:4:123358:123387	90872	0	True				
ANR	94779	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94780	CastTarget	void		90872	0					
ANR	94781	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94782	Callee	r_core_cmd0		90872	0					
ANR	94783	Identifier	r_core_cmd0		90872	0					
ANR	94784	ArgumentList	core		90872	1					
ANR	94785	Argument	core		90872	0					
ANR	94786	Identifier	core		90872	0					
ANR	94787	Argument	cmd		90872	1					
ANR	94788	Identifier	cmd		90872	0					
ANR	94789	BreakStatement	break ;	4799:3:123397:123402	90872	349	True				
ANR	94790	Label	case R_CONS_KEY_F11 :	4800:2:123406:123425	90872	350	True				
ANR	94791	Identifier	R_CONS_KEY_F11		90872	0					
ANR	94792	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f11"" )"	4801:3:123430:123474	90872	351	True				
ANR	94793	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f11"" )"		90872	0		=			
ANR	94794	Identifier	cmd		90872	0					
ANR	94795	CallExpression	"r_config_get ( core -> config , ""key.f11"" )"		90872	1					
ANR	94796	Callee	r_config_get		90872	0					
ANR	94797	Identifier	r_config_get		90872	0					
ANR	94798	ArgumentList	core -> config		90872	1					
ANR	94799	Argument	core -> config		90872	0					
ANR	94800	PtrMemberAccess	core -> config		90872	0					
ANR	94801	Identifier	core		90872	0					
ANR	94802	Identifier	config		90872	1					
ANR	94803	Argument	"""key.f11"""		90872	1					
ANR	94804	PrimaryExpression	"""key.f11"""		90872	0					
ANR	94805	IfStatement	if ( cmd && * cmd )		90872	352					
ANR	94806	Condition	cmd && * cmd	4802:7:123483:123493	90872	0	True				
ANR	94807	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94808	Identifier	cmd		90872	0					
ANR	94809	UnaryOperationExpression	* cmd		90872	1					
ANR	94810	UnaryOperator	*		90872	0					
ANR	94811	Identifier	cmd		90872	1					
ANR	94812	CompoundStatement		756:20:20191:20191	90872	1					
ANR	94813	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4803:4:123502:123531	90872	0	True				
ANR	94814	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94815	CastTarget	void		90872	0					
ANR	94816	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94817	Callee	r_core_cmd0		90872	0					
ANR	94818	Identifier	r_core_cmd0		90872	0					
ANR	94819	ArgumentList	core		90872	1					
ANR	94820	Argument	core		90872	0					
ANR	94821	Identifier	core		90872	0					
ANR	94822	Argument	cmd		90872	1					
ANR	94823	Identifier	cmd		90872	0					
ANR	94824	BreakStatement	break ;	4805:3:123541:123546	90872	353	True				
ANR	94825	Label	case R_CONS_KEY_F12 :	4806:2:123550:123569	90872	354	True				
ANR	94826	Identifier	R_CONS_KEY_F12		90872	0					
ANR	94827	ExpressionStatement	"cmd = r_config_get ( core -> config , ""key.f12"" )"	4807:3:123574:123618	90872	355	True				
ANR	94828	AssignmentExpression	"cmd = r_config_get ( core -> config , ""key.f12"" )"		90872	0		=			
ANR	94829	Identifier	cmd		90872	0					
ANR	94830	CallExpression	"r_config_get ( core -> config , ""key.f12"" )"		90872	1					
ANR	94831	Callee	r_config_get		90872	0					
ANR	94832	Identifier	r_config_get		90872	0					
ANR	94833	ArgumentList	core -> config		90872	1					
ANR	94834	Argument	core -> config		90872	0					
ANR	94835	PtrMemberAccess	core -> config		90872	0					
ANR	94836	Identifier	core		90872	0					
ANR	94837	Identifier	config		90872	1					
ANR	94838	Argument	"""key.f12"""		90872	1					
ANR	94839	PrimaryExpression	"""key.f12"""		90872	0					
ANR	94840	IfStatement	if ( cmd && * cmd )		90872	356					
ANR	94841	Condition	cmd && * cmd	4808:7:123627:123637	90872	0	True				
ANR	94842	AndExpression	cmd && * cmd		90872	0		&&			
ANR	94843	Identifier	cmd		90872	0					
ANR	94844	UnaryOperationExpression	* cmd		90872	1					
ANR	94845	UnaryOperator	*		90872	0					
ANR	94846	Identifier	cmd		90872	1					
ANR	94847	CompoundStatement		762:20:20335:20335	90872	1					
ANR	94848	ExpressionStatement	"( void ) r_core_cmd0 ( core , cmd )"	4809:4:123646:123675	90872	0	True				
ANR	94849	CastExpression	"( void ) r_core_cmd0 ( core , cmd )"		90872	0					
ANR	94850	CastTarget	void		90872	0					
ANR	94851	CallExpression	"r_core_cmd0 ( core , cmd )"		90872	1					
ANR	94852	Callee	r_core_cmd0		90872	0					
ANR	94853	Identifier	r_core_cmd0		90872	0					
ANR	94854	ArgumentList	core		90872	1					
ANR	94855	Argument	core		90872	0					
ANR	94856	Identifier	core		90872	0					
ANR	94857	Argument	cmd		90872	1					
ANR	94858	Identifier	cmd		90872	0					
ANR	94859	BreakStatement	break ;	4811:3:123685:123690	90872	357	True				
ANR	94860	Statement	case	4812:2:123694:123697	90872	358	True				
ANR	94861	Statement	-	4812:7:123699:123699	90872	359	True				
ANR	94862	Label	1 :	4812:8:123700:123701	90872	360	True				
ANR	94863	Label	case ' ' :	4813:2:123712:123720	90872	361	True				
ANR	94864	Label	case 'Q' :	4814:2:123724:123732	90872	362	True				
ANR	94865	Label	case 'q' :	4815:2:123736:123744	90872	363	True				
ANR	94866	IfStatement	if ( g -> is_callgraph )		90872	364					
ANR	94867	Condition	g -> is_callgraph	4816:7:123753:123767	90872	0	True				
ANR	94868	PtrMemberAccess	g -> is_callgraph		90872	0					
ANR	94869	Identifier	g		90872	0					
ANR	94870	Identifier	is_callgraph		90872	1					
ANR	94871	CompoundStatement		770:24:20465:20465	90872	1					
ANR	94872	ExpressionStatement	agraph_toggle_callgraph ( g )	4817:4:123776:123803	90872	0	True				
ANR	94873	CallExpression	agraph_toggle_callgraph ( g )		90872	0					
ANR	94874	Callee	agraph_toggle_callgraph		90872	0					
ANR	94875	Identifier	agraph_toggle_callgraph		90872	0					
ANR	94876	ArgumentList	g		90872	1					
ANR	94877	Argument	g		90872	0					
ANR	94878	Identifier	g		90872	0					
ANR	94879	ElseStatement	else		90872	0					
ANR	94880	CompoundStatement		772:10:20510:20510	90872	0					
ANR	94881	ExpressionStatement	exit_graph = true	4819:4:123821:123838	90872	0	True				
ANR	94882	AssignmentExpression	exit_graph = true		90872	0		=			
ANR	94883	Identifier	exit_graph		90872	0					
ANR	94884	Identifier	true		90872	1					
ANR	94885	BreakStatement	break ;	4821:3:123848:123853	90872	365	True				
ANR	94886	Label	case 27 :	4822:2:123857:123864	90872	366	True				
ANR	94887	IfStatement	if ( r_cons_readchar ( ) == 91 )		90872	367					
ANR	94888	Condition	r_cons_readchar ( ) == 91	4823:7:123880:123903	90872	0	True				
ANR	94889	EqualityExpression	r_cons_readchar ( ) == 91		90872	0		==			
ANR	94890	CallExpression	r_cons_readchar ( )		90872	0					
ANR	94891	Callee	r_cons_readchar		90872	0					
ANR	94892	Identifier	r_cons_readchar		90872	0					
ANR	94893	ArgumentList			90872	1					
ANR	94894	PrimaryExpression	91		90872	1					
ANR	94895	CompoundStatement		777:33:20601:20601	90872	1					
ANR	94896	IfStatement	if ( r_cons_readchar ( ) == 90 )		90872	0					
ANR	94897	Condition	r_cons_readchar ( ) == 90	4824:8:123916:123939	90872	0	True				
ANR	94898	EqualityExpression	r_cons_readchar ( ) == 90		90872	0		==			
ANR	94899	CallExpression	r_cons_readchar ( )		90872	0					
ANR	94900	Callee	r_cons_readchar		90872	0					
ANR	94901	Identifier	r_cons_readchar		90872	0					
ANR	94902	ArgumentList			90872	1					
ANR	94903	PrimaryExpression	90		90872	1					
ANR	94904	CompoundStatement		778:34:20637:20637	90872	1					
ANR	94905	ExpressionStatement	agraph_prev_node ( g )	4825:5:123949:123969	90872	0	True				
ANR	94906	CallExpression	agraph_prev_node ( g )		90872	0					
ANR	94907	Callee	agraph_prev_node		90872	0					
ANR	94908	Identifier	agraph_prev_node		90872	0					
ANR	94909	ArgumentList	g		90872	1					
ANR	94910	Argument	g		90872	0					
ANR	94911	Identifier	g		90872	0					
ANR	94912	BreakStatement	break ;	4828:3:123985:123990	90872	368	True				
ANR	94913	Label	default :	4829:2:123994:124001	90872	369	True				
ANR	94914	Identifier	default		90872	0					
ANR	94915	BreakStatement	break ;	4830:3:124006:124011	90872	370	True				
ANR	94916	ExpressionStatement	r_cons_break_pop ( )	4833:1:124021:124040	90872	58	True				
ANR	94917	CallExpression	r_cons_break_pop ( )		90872	0					
ANR	94918	Callee	r_cons_break_pop		90872	0					
ANR	94919	Identifier	r_cons_break_pop		90872	0					
ANR	94920	ArgumentList			90872	1					
ANR	94921	ExpressionStatement	"r_config_set ( core -> config , ""asm.comments"" , r_str_bool ( asm_comments ) )"	4834:1:124043:124113	90872	59	True				
ANR	94922	CallExpression	"r_config_set ( core -> config , ""asm.comments"" , r_str_bool ( asm_comments ) )"		90872	0					
ANR	94923	Callee	r_config_set		90872	0					
ANR	94924	Identifier	r_config_set		90872	0					
ANR	94925	ArgumentList	core -> config		90872	1					
ANR	94926	Argument	core -> config		90872	0					
ANR	94927	PtrMemberAccess	core -> config		90872	0					
ANR	94928	Identifier	core		90872	0					
ANR	94929	Identifier	config		90872	1					
ANR	94930	Argument	"""asm.comments"""		90872	1					
ANR	94931	PrimaryExpression	"""asm.comments"""		90872	0					
ANR	94932	Argument	r_str_bool ( asm_comments )		90872	2					
ANR	94933	CallExpression	r_str_bool ( asm_comments )		90872	0					
ANR	94934	Callee	r_str_bool		90872	0					
ANR	94935	Identifier	r_str_bool		90872	0					
ANR	94936	ArgumentList	asm_comments		90872	1					
ANR	94937	Argument	asm_comments		90872	0					
ANR	94938	Identifier	asm_comments		90872	0					
ANR	94939	ExpressionStatement	core -> cons -> event_resize = NULL	4835:1:124116:124147	90872	60	True				
ANR	94940	AssignmentExpression	core -> cons -> event_resize = NULL		90872	0		=			
ANR	94941	PtrMemberAccess	core -> cons -> event_resize		90872	0					
ANR	94942	PtrMemberAccess	core -> cons		90872	0					
ANR	94943	Identifier	core		90872	0					
ANR	94944	Identifier	cons		90872	1					
ANR	94945	Identifier	event_resize		90872	1					
ANR	94946	Identifier	NULL		90872	1					
ANR	94947	ExpressionStatement	core -> cons -> event_data = NULL	4836:1:124150:124179	90872	61	True				
ANR	94948	AssignmentExpression	core -> cons -> event_data = NULL		90872	0		=			
ANR	94949	PtrMemberAccess	core -> cons -> event_data		90872	0					
ANR	94950	PtrMemberAccess	core -> cons		90872	0					
ANR	94951	Identifier	core		90872	0					
ANR	94952	Identifier	cons		90872	1					
ANR	94953	Identifier	event_data		90872	1					
ANR	94954	Identifier	NULL		90872	1					
ANR	94955	ExpressionStatement	core -> vmode = o_vmode	4837:1:124182:124203	90872	62	True				
ANR	94956	AssignmentExpression	core -> vmode = o_vmode		90872	0		=			
ANR	94957	PtrMemberAccess	core -> vmode		90872	0					
ANR	94958	Identifier	core		90872	0					
ANR	94959	Identifier	vmode		90872	1					
ANR	94960	Identifier	o_vmode		90872	1					
ANR	94961	ExpressionStatement	core -> is_asmqjmps_letter = o_asmqjmps_letter	4838:1:124206:124250	90872	63	True				
ANR	94962	AssignmentExpression	core -> is_asmqjmps_letter = o_asmqjmps_letter		90872	0		=			
ANR	94963	PtrMemberAccess	core -> is_asmqjmps_letter		90872	0					
ANR	94964	Identifier	core		90872	0					
ANR	94965	Identifier	is_asmqjmps_letter		90872	1					
ANR	94966	Identifier	o_asmqjmps_letter		90872	1					
ANR	94967	ExpressionStatement	core -> keep_asmqjmps = false	4839:1:124253:124280	90872	64	True				
ANR	94968	AssignmentExpression	core -> keep_asmqjmps = false		90872	0		=			
ANR	94969	PtrMemberAccess	core -> keep_asmqjmps		90872	0					
ANR	94970	Identifier	core		90872	0					
ANR	94971	Identifier	keep_asmqjmps		90872	1					
ANR	94972	Identifier	false		90872	1					
ANR	94973	ExpressionStatement	free ( grd )	4841:1:124284:124294	90872	65	True				
ANR	94974	CallExpression	free ( grd )		90872	0					
ANR	94975	Callee	free		90872	0					
ANR	94976	Identifier	free		90872	0					
ANR	94977	ArgumentList	grd		90872	1					
ANR	94978	Argument	grd		90872	0					
ANR	94979	Identifier	grd		90872	0					
ANR	94980	IfStatement	if ( graph_allocated )		90872	66					
ANR	94981	Condition	graph_allocated	4842:5:124301:124315	90872	0	True				
ANR	94982	Identifier	graph_allocated		90872	0					
ANR	94983	CompoundStatement		796:22:21013:21013	90872	1					
ANR	94984	ExpressionStatement	r_agraph_free ( g )	4843:2:124322:124339	90872	0	True				
ANR	94985	CallExpression	r_agraph_free ( g )		90872	0					
ANR	94986	Callee	r_agraph_free		90872	0					
ANR	94987	Identifier	r_agraph_free		90872	0					
ANR	94988	ArgumentList	g		90872	1					
ANR	94989	Argument	g		90872	0					
ANR	94990	Identifier	g		90872	0					
ANR	94991	ExpressionStatement	"r_config_set_i ( core -> config , ""scr.interactive"" , o_scrinteractive )"	4844:2:124343:124409	90872	1	True				
ANR	94992	CallExpression	"r_config_set_i ( core -> config , ""scr.interactive"" , o_scrinteractive )"		90872	0					
ANR	94993	Callee	r_config_set_i		90872	0					
ANR	94994	Identifier	r_config_set_i		90872	0					
ANR	94995	ArgumentList	core -> config		90872	1					
ANR	94996	Argument	core -> config		90872	0					
ANR	94997	PtrMemberAccess	core -> config		90872	0					
ANR	94998	Identifier	core		90872	0					
ANR	94999	Identifier	config		90872	1					
ANR	95000	Argument	"""scr.interactive"""		90872	1					
ANR	95001	PrimaryExpression	"""scr.interactive"""		90872	0					
ANR	95002	Argument	o_scrinteractive		90872	2					
ANR	95003	Identifier	o_scrinteractive		90872	0					
ANR	95004	ElseStatement	else		90872	0					
ANR	95005	CompoundStatement		799:8:21114:21114	90872	0					
ANR	95006	ExpressionStatement	g -> can = o_can	4846:2:124423:124437	90872	0	True				
ANR	95007	AssignmentExpression	g -> can = o_can		90872	0		=			
ANR	95008	PtrMemberAccess	g -> can		90872	0					
ANR	95009	Identifier	g		90872	0					
ANR	95010	Identifier	can		90872	1					
ANR	95011	Identifier	o_can		90872	1					
ANR	95012	ExpressionStatement	r_config_hold_restore ( hc )	4848:1:124443:124469	90872	67	True				
ANR	95013	CallExpression	r_config_hold_restore ( hc )		90872	0					
ANR	95014	Callee	r_config_hold_restore		90872	0					
ANR	95015	Identifier	r_config_hold_restore		90872	0					
ANR	95016	ArgumentList	hc		90872	1					
ANR	95017	Argument	hc		90872	0					
ANR	95018	Identifier	hc		90872	0					
ANR	95019	ExpressionStatement	r_config_hold_free ( hc )	4849:1:124472:124495	90872	68	True				
ANR	95020	CallExpression	r_config_hold_free ( hc )		90872	0					
ANR	95021	Callee	r_config_hold_free		90872	0					
ANR	95022	Identifier	r_config_hold_free		90872	0					
ANR	95023	ArgumentList	hc		90872	1					
ANR	95024	Argument	hc		90872	0					
ANR	95025	Identifier	hc		90872	0					
ANR	95026	IfStatement	if ( update_seek )		90872	69					
ANR	95027	Condition	update_seek	4850:5:124502:124512	90872	0	True				
ANR	95028	Identifier	update_seek		90872	0					
ANR	95029	CompoundStatement		804:18:21210:21210	90872	1					
ANR	95030	ReturnStatement	return - 1 ;	4851:2:124519:124528	90872	0	True				
ANR	95031	UnaryOperationExpression	- 1		90872	0					
ANR	95032	UnaryOperator	-		90872	0					
ANR	95033	PrimaryExpression	1		90872	1					
ANR	95034	ReturnStatement	return ! is_error ;	4853:1:124534:124550	90872	70	True				
ANR	95035	UnaryOperationExpression	! is_error		90872	0					
ANR	95036	UnaryOperator	!		90872	0					
ANR	95037	Identifier	is_error		90872	1					
ANR	95038	ReturnType	R_API int		90872	1					
ANR	95039	Identifier	r_core_visual_graph		90872	2					
ANR	95040	ParameterList	"RCore * core , RAGraph * g , RAnalFunction * _fcn , int is_interactive"		90872	3					
ANR	95041	Parameter	RCore * core	4047:30:103238:103248	90872	0	True				
ANR	95042	ParameterType	RCore *		90872	0					
ANR	95043	Identifier	core		90872	1					
ANR	95044	Parameter	RAGraph * g	4047:43:103251:103260	90872	1	True				
ANR	95045	ParameterType	RAGraph *		90872	0					
ANR	95046	Identifier	g		90872	1					
ANR	95047	Parameter	RAnalFunction * _fcn	4047:55:103263:103281	90872	2	True				
ANR	95048	ParameterType	RAnalFunction *		90872	0					
ANR	95049	Identifier	_fcn		90872	1					
ANR	95050	Parameter	int is_interactive	4047:76:103284:103301	90872	3	True				
ANR	95051	ParameterType	int		90872	0					
ANR	95052	Identifier	is_interactive		90872	1					
ANR	95053	CFGEntryNode	ENTRY		90872		True				
ANR	95054	CFGExitNode	EXIT		90872		True				
ANR	95055	Symbol	ZOOM_DEFAULT		90872						
ANR	95056	Symbol	can -> linemode		90872						
ANR	95057	Symbol	core -> cons -> mouse_event		90872						
ANR	95058	Symbol	grd -> g		90872						
ANR	95059	Symbol	* fcn		90872						
ANR	95060	Symbol	r_agraph_new		90872						
ANR	95061	Symbol	g -> movspeed		90872						
ANR	95062	Symbol	core -> offset		90872						
ANR	95063	Symbol	g -> show_node_titles		90872						
ANR	95064	Symbol	can -> sx		90872						
ANR	95065	Symbol	can -> sy		90872						
ANR	95066	Symbol	g -> mode		90872						
ANR	95067	Symbol	g -> is_tiny		90872						
ANR	95068	Symbol	is_error		90872						
ANR	95069	Symbol	* cmd		90872						
ANR	95070	Symbol	g -> is_callgraph		90872						
ANR	95071	Symbol	g -> can		90872						
ANR	95072	Symbol	r_cons_is_interactive		90872						
ANR	95073	Symbol	g -> need_reload_nodes		90872						
ANR	95074	Symbol	invscroll		90872						
ANR	95075	Symbol	seek_to_node		90872						
ANR	95076	Symbol	movspeed		90872						
ANR	95077	Symbol	* * * core		90872						
ANR	95078	Symbol	g -> is_interactive		90872						
ANR	95079	Symbol	mousemode		90872						
ANR	95080	Symbol	* core -> cons -> line		90872						
ANR	95081	Symbol	r_config_get_i		90872						
ANR	95082	Symbol	n -> title		90872						
ANR	95083	Symbol	r_cons_canvas_new		90872						
ANR	95084	Symbol	cmd		90872						
ANR	95085	Symbol	undo -> off		90872						
ANR	95086	Symbol	* core -> cons		90872						
ANR	95087	Symbol	g -> show_node_body		90872						
ANR	95088	Symbol	R_AGRAPH_MODE_NORMAL		90872						
ANR	95089	Symbol	o_asmqjmps_letter		90872						
ANR	95090	Symbol	* core		90872						
ANR	95091	Symbol	o_can		90872						
ANR	95092	Symbol	r_config_get		90872						
ANR	95093	Symbol	core -> anal		90872						
ANR	95094	Symbol	g -> on_curnode_change		90872						
ANR	95095	Symbol	fcn		90872						
ANR	95096	Symbol	r_cons_is_breaked		90872						
ANR	95097	Symbol	core -> cons		90872						
ANR	95098	Symbol	exit_graph		90872						
ANR	95099	Symbol	r_core_anal_get_bbaddr		90872						
ANR	95100	Symbol	core -> io		90872						
ANR	95101	Symbol	r_config_hold_new		90872						
ANR	95102	Symbol	is_mini		90872						
ANR	95103	Symbol	r_io_sundo		90872						
ANR	95104	Symbol	key		90872						
ANR	95105	Symbol	g -> layout		90872						
ANR	95106	Symbol	e		90872						
ANR	95107	Symbol	r_io_sundo_redo		90872						
ANR	95108	Symbol	g		90872						
ANR	95109	Symbol	h		90872						
ANR	95110	Symbol	r_cons_yesno		90872						
ANR	95111	Symbol	* key_s		90872						
ANR	95112	Symbol	n		90872						
ANR	95113	Symbol	off		90872						
ANR	95114	Symbol	& fcn		90872						
ANR	95115	Symbol	buf		90872						
ANR	95116	Symbol	w		90872						
ANR	95117	Symbol	r_line_readline		90872						
ANR	95118	Symbol	fcn -> addr		90872						
ANR	95119	Symbol	grd -> fs		90872						
ANR	95120	Symbol	r_core_visual_refs		90872						
ANR	95121	Symbol	core -> panels_root		90872						
ANR	95122	Symbol	agraph_refresh_oneshot		90872						
ANR	95123	Symbol	core -> cons -> line		90872						
ANR	95124	Symbol	grd -> follow_offset		90872						
ANR	95125	Symbol	mousemodes		90872						
ANR	95126	Symbol	key_s		90872						
ANR	95127	Symbol	g -> can -> linemode		90872						
ANR	95128	Symbol	r_cons_readchar		90872						
ANR	95129	Symbol	* can		90872						
ANR	95130	Symbol	r_cons_fgets		90872						
ANR	95131	Symbol	find_near_of		90872						
ANR	95132	Symbol	grd -> fcn		90872						
ANR	95133	Symbol	can -> color		90872						
ANR	95134	Symbol	g -> show_node_bubble		90872						
ANR	95135	Symbol	core -> cons -> event_resize		90872						
ANR	95136	Symbol	PAGEKEY_SPEED		90872						
ANR	95137	Symbol	r_num_get		90872						
ANR	95138	Symbol	old_off		90872						
ANR	95139	Symbol	agraph_refresh		90872						
ANR	95140	Symbol	ret		90872						
ANR	95141	Symbol	g -> need_set_layout		90872						
ANR	95142	Symbol	core -> cons -> line -> contents		90872						
ANR	95143	Symbol	NULL		90872						
ANR	95144	Symbol	okey		90872						
ANR	95145	Symbol	* * g		90872						
ANR	95146	Symbol	r_cons_get_size		90872						
ANR	95147	Symbol	* * core -> cons		90872						
ANR	95148	Symbol	grd -> core		90872						
ANR	95149	Symbol	o_scrinteractive		90872						
ANR	95150	Symbol	core		90872						
ANR	95151	Symbol	r_cons_arrow_to_hjkl		90872						
ANR	95152	Symbol	true		90872						
ANR	95153	Symbol	* grd		90872						
ANR	95154	Symbol	graph_allocated		90872						
ANR	95155	Symbol	_fcn		90872						
ANR	95156	Symbol	* undo		90872						
ANR	95157	Symbol	g -> hints		90872						
ANR	95158	Symbol	core -> is_asmqjmps_letter		90872						
ANR	95159	Symbol	disMode		90872						
ANR	95160	Symbol	g -> zoom		90872						
ANR	95161	Symbol	core -> keep_asmqjmps		90872						
ANR	95162	Symbol	g -> need_update_dim		90872						
ANR	95163	Symbol	* g -> can		90872						
ANR	95164	Symbol	speed		90872						
ANR	95165	Symbol	can		90872						
ANR	95166	Symbol	undo		90872						
ANR	95167	Symbol	g -> dummy		90872						
ANR	95168	Symbol	grd		90872						
ANR	95169	Symbol	discroll		90872						
ANR	95170	Symbol	addr		90872						
ANR	95171	Symbol	* * core		90872						
ANR	95172	Symbol	core -> config		90872						
ANR	95173	Symbol	* mousemode		90872						
ANR	95174	Symbol	r_str_bool		90872						
ANR	95175	Symbol	get_anode		90872						
ANR	95176	Symbol	R_AGRAPH_MODE_COMMENTS		90872						
ANR	95177	Symbol	next_mode		90872						
ANR	95178	Symbol	is_interactive		90872						
ANR	95179	Symbol	ZOOM_STEP		90872						
ANR	95180	Symbol	gn		90872						
ANR	95181	Symbol	g -> update_seek_on		90872						
ANR	95182	Symbol	false		90872						
ANR	95183	Symbol	graphCursor		90872						
ANR	95184	Symbol	o_vmode		90872						
ANR	95185	Symbol	g -> on_curnode_change_data		90872						
ANR	95186	Symbol	& h		90872						
ANR	95187	Symbol	* g		90872						
ANR	95188	Symbol	* mousemodes		90872						
ANR	95189	Symbol	g -> force_update_seek		90872						
ANR	95190	Symbol	r_anal_get_fcn_in		90872						
ANR	95191	Symbol	g -> edgemode		90872						
ANR	95192	Symbol	asm_comments		90872						
ANR	95193	Symbol	core -> cons -> event_data		90872						
ANR	95194	Symbol	g -> curnode		90872						
ANR	95195	Symbol	* n		90872						
ANR	95196	Symbol	g -> is_dis		90872						
ANR	95197	Symbol	prev_mode		90872						
ANR	95198	Symbol	hc		90872						
ANR	95199	Symbol	strdup		90872						
ANR	95200	Symbol	core -> vmode		90872						
ANR	95201	Symbol	update_seek		90872						
