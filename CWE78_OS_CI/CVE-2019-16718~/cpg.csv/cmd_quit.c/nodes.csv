command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1004457	File	data/converged/CVE-2019-16718~_radare2/cmd_quit.c								
ANR	1004458	DeclStmt									
ANR	1004459	Decl							const char	const char * [ ]	help_msg_q
ANR	1004460	Function	cmd_quit_init	18:0:492:567							
ANR	1004461	FunctionDef	cmd_quit_init (RCore * core)		1004460	0					
ANR	1004462	CompoundStatement		18:39:531:567	1004460	0					
ANR	1004463	ExpressionStatement	"DEFINE_CMD_DESCRIPTOR ( core , q )"	19:1:534:565	1004460	0	True				
ANR	1004464	CallExpression	"DEFINE_CMD_DESCRIPTOR ( core , q )"		1004460	0					
ANR	1004465	Callee	DEFINE_CMD_DESCRIPTOR		1004460	0					
ANR	1004466	Identifier	DEFINE_CMD_DESCRIPTOR		1004460	0					
ANR	1004467	ArgumentList	core		1004460	1					
ANR	1004468	Argument	core		1004460	0					
ANR	1004469	Identifier	core		1004460	0					
ANR	1004470	Argument	q		1004460	1					
ANR	1004471	Identifier	q		1004460	0					
ANR	1004472	ReturnType	static void		1004460	1					
ANR	1004473	Identifier	cmd_quit_init		1004460	2					
ANR	1004474	ParameterList	RCore * core		1004460	3					
ANR	1004475	Parameter	RCore * core	18:26:518:528	1004460	0	True				
ANR	1004476	ParameterType	RCore *		1004460	0					
ANR	1004477	Identifier	core		1004460	1					
ANR	1004478	CFGEntryNode	ENTRY		1004460		True				
ANR	1004479	CFGExitNode	EXIT		1004460		True				
ANR	1004480	Symbol	core		1004460						
ANR	1004481	Symbol	q		1004460						
ANR	1004482	Function	cmd_Quit	22:0:570:983							
ANR	1004483	FunctionDef	"cmd_Quit (void * data , const char * input)"		1004482	0					
ANR	1004484	CompoundStatement		22:51:621:983	1004482	0					
ANR	1004485	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	23:1:624:651	1004482	0	True				
ANR	1004486	IdentifierDecl	* core = ( RCore * ) data		1004482	0					
ANR	1004487	IdentifierDeclType	RCore *		1004482	0					
ANR	1004488	Identifier	core		1004482	1					
ANR	1004489	AssignmentExpression	* core = ( RCore * ) data		1004482	2		=			
ANR	1004490	Identifier	core		1004482	0					
ANR	1004491	CastExpression	( RCore * ) data		1004482	1					
ANR	1004492	CastTarget	RCore *		1004482	0					
ANR	1004493	Identifier	data		1004482	1					
ANR	1004494	IfStatement	if ( input [ 0 ] == '!' )		1004482	1					
ANR	1004495	Condition	input [ 0 ] == '!'	24:5:658:672	1004482	0	True				
ANR	1004496	EqualityExpression	input [ 0 ] == '!'		1004482	0		==			
ANR	1004497	ArrayIndexing	input [ 0 ]		1004482	0					
ANR	1004498	Identifier	input		1004482	0					
ANR	1004499	PrimaryExpression	0		1004482	1					
ANR	1004500	PrimaryExpression	'!'		1004482	1					
ANR	1004501	CompoundStatement		3:22:53:53	1004482	1					
ANR	1004502	IfStatement	if ( input [ 1 ] == '!' )		1004482	0					
ANR	1004503	Condition	input [ 1 ] == '!'	25:6:683:697	1004482	0	True				
ANR	1004504	EqualityExpression	input [ 1 ] == '!'		1004482	0		==			
ANR	1004505	ArrayIndexing	input [ 1 ]		1004482	0					
ANR	1004506	Identifier	input		1004482	0					
ANR	1004507	PrimaryExpression	1		1004482	1					
ANR	1004508	PrimaryExpression	'!'		1004482	1					
ANR	1004509	CompoundStatement		4:23:78:78	1004482	1					
ANR	1004510	IfStatement	if ( ! r_sandbox_enable ( false ) )		1004482	0					
ANR	1004511	Condition	! r_sandbox_enable ( false )	26:7:709:733	1004482	0	True				
ANR	1004512	UnaryOperationExpression	! r_sandbox_enable ( false )		1004482	0					
ANR	1004513	UnaryOperator	!		1004482	0					
ANR	1004514	CallExpression	r_sandbox_enable ( false )		1004482	1					
ANR	1004515	Callee	r_sandbox_enable		1004482	0					
ANR	1004516	Identifier	r_sandbox_enable		1004482	0					
ANR	1004517	ArgumentList	false		1004482	1					
ANR	1004518	Argument	false		1004482	0					
ANR	1004519	Identifier	false		1004482	0					
ANR	1004520	CompoundStatement		5:34:114:114	1004482	1					
ANR	1004521	ExpressionStatement	exit ( 0 )	27:4:742:750	1004482	0	True				
ANR	1004522	CallExpression	exit ( 0 )		1004482	0					
ANR	1004523	Callee	exit		1004482	0					
ANR	1004524	Identifier	exit		1004482	0					
ANR	1004525	ArgumentList	0		1004482	1					
ANR	1004526	Argument	0		1004482	0					
ANR	1004527	PrimaryExpression	0		1004482	0					
ANR	1004528	ReturnStatement	return - 2 ;	29:3:760:769	1004482	1	True				
ANR	1004529	UnaryOperationExpression	- 2		1004482	0					
ANR	1004530	UnaryOperator	-		1004482	0					
ANR	1004531	PrimaryExpression	2		1004482	1					
ANR	1004532	ExpressionStatement	"r_config_set ( core -> config , ""scr.histsave"" , ""false"" )"	31:2:777:829	1004482	1	True				
ANR	1004533	CallExpression	"r_config_set ( core -> config , ""scr.histsave"" , ""false"" )"		1004482	0					
ANR	1004534	Callee	r_config_set		1004482	0					
ANR	1004535	Identifier	r_config_set		1004482	0					
ANR	1004536	ArgumentList	core -> config		1004482	1					
ANR	1004537	Argument	core -> config		1004482	0					
ANR	1004538	PtrMemberAccess	core -> config		1004482	0					
ANR	1004539	Identifier	core		1004482	0					
ANR	1004540	Identifier	config		1004482	1					
ANR	1004541	Argument	"""scr.histsave"""		1004482	1					
ANR	1004542	PrimaryExpression	"""scr.histsave"""		1004482	0					
ANR	1004543	Argument	"""false"""		1004482	2					
ANR	1004544	PrimaryExpression	"""false"""		1004482	0					
ANR	1004545	IfStatement	if ( IS_DIGIT ( input [ 0 ] ) || input [ 0 ] == ' ' )		1004482	2					
ANR	1004546	Condition	IS_DIGIT ( input [ 0 ] ) || input [ 0 ] == ' '	33:5:839:876	1004482	0	True				
ANR	1004547	OrExpression	IS_DIGIT ( input [ 0 ] ) || input [ 0 ] == ' '		1004482	0		||			
ANR	1004548	CallExpression	IS_DIGIT ( input [ 0 ] )		1004482	0					
ANR	1004549	Callee	IS_DIGIT		1004482	0					
ANR	1004550	Identifier	IS_DIGIT		1004482	0					
ANR	1004551	ArgumentList	input [ 0 ]		1004482	1					
ANR	1004552	Argument	input [ 0 ]		1004482	0					
ANR	1004553	ArrayIndexing	input [ 0 ]		1004482	0					
ANR	1004554	Identifier	input		1004482	0					
ANR	1004555	PrimaryExpression	0		1004482	1					
ANR	1004556	EqualityExpression	input [ 0 ] == ' '		1004482	1		==			
ANR	1004557	ArrayIndexing	input [ 0 ]		1004482	0					
ANR	1004558	Identifier	input		1004482	0					
ANR	1004559	PrimaryExpression	0		1004482	1					
ANR	1004560	PrimaryExpression	' '		1004482	1					
ANR	1004561	CompoundStatement		12:45:257:257	1004482	1					
ANR	1004562	ExpressionStatement	"core -> num -> value = r_num_math ( core -> num , input )"	34:2:883:931	1004482	0	True				
ANR	1004563	AssignmentExpression	"core -> num -> value = r_num_math ( core -> num , input )"		1004482	0		=			
ANR	1004564	PtrMemberAccess	core -> num -> value		1004482	0					
ANR	1004565	PtrMemberAccess	core -> num		1004482	0					
ANR	1004566	Identifier	core		1004482	0					
ANR	1004567	Identifier	num		1004482	1					
ANR	1004568	Identifier	value		1004482	1					
ANR	1004569	CallExpression	"r_num_math ( core -> num , input )"		1004482	1					
ANR	1004570	Callee	r_num_math		1004482	0					
ANR	1004571	Identifier	r_num_math		1004482	0					
ANR	1004572	ArgumentList	core -> num		1004482	1					
ANR	1004573	Argument	core -> num		1004482	0					
ANR	1004574	PtrMemberAccess	core -> num		1004482	0					
ANR	1004575	Identifier	core		1004482	0					
ANR	1004576	Identifier	num		1004482	1					
ANR	1004577	Argument	input		1004482	1					
ANR	1004578	Identifier	input		1004482	0					
ANR	1004579	ElseStatement	else		1004482	0					
ANR	1004580	CompoundStatement		14:8:319:319	1004482	0					
ANR	1004581	ExpressionStatement	core -> num -> value = - 1	36:2:945:966	1004482	0	True				
ANR	1004582	AssignmentExpression	core -> num -> value = - 1		1004482	0		=			
ANR	1004583	PtrMemberAccess	core -> num -> value		1004482	0					
ANR	1004584	PtrMemberAccess	core -> num		1004482	0					
ANR	1004585	Identifier	core		1004482	0					
ANR	1004586	Identifier	num		1004482	1					
ANR	1004587	Identifier	value		1004482	1					
ANR	1004588	UnaryOperationExpression	- 1		1004482	1					
ANR	1004589	UnaryOperator	-		1004482	0					
ANR	1004590	PrimaryExpression	1		1004482	1					
ANR	1004591	ReturnStatement	return - 2 ;	38:1:972:981	1004482	3	True				
ANR	1004592	UnaryOperationExpression	- 2		1004482	0					
ANR	1004593	UnaryOperator	-		1004482	0					
ANR	1004594	PrimaryExpression	2		1004482	1					
ANR	1004595	ReturnType	static int		1004482	1					
ANR	1004596	Identifier	cmd_Quit		1004482	2					
ANR	1004597	ParameterList	"void * data , const char * input"		1004482	3					
ANR	1004598	Parameter	void * data	22:20:590:599	1004482	0	True				
ANR	1004599	ParameterType	void *		1004482	0					
ANR	1004600	Identifier	data		1004482	1					
ANR	1004601	Parameter	const char * input	22:32:602:618	1004482	1	True				
ANR	1004602	ParameterType	const char *		1004482	0					
ANR	1004603	Identifier	input		1004482	1					
ANR	1004604	CFGEntryNode	ENTRY		1004482		True				
ANR	1004605	CFGExitNode	EXIT		1004482		True				
ANR	1004606	Symbol	core -> config		1004482						
ANR	1004607	Symbol	data		1004482						
ANR	1004608	Symbol	r_sandbox_enable		1004482						
ANR	1004609	Symbol	* input		1004482						
ANR	1004610	Symbol	false		1004482						
ANR	1004611	Symbol	* core		1004482						
ANR	1004612	Symbol	core -> num -> value		1004482						
ANR	1004613	Symbol	IS_DIGIT		1004482						
ANR	1004614	Symbol	r_num_math		1004482						
ANR	1004615	Symbol	input		1004482						
ANR	1004616	Symbol	core		1004482						
ANR	1004617	Symbol	* core -> num		1004482						
ANR	1004618	Symbol	core -> num		1004482						
ANR	1004619	Symbol	* * core		1004482						
ANR	1004620	Function	cmd_quit	41:0:986:1779							
ANR	1004621	FunctionDef	"cmd_quit (void * data , const char * input)"		1004620	0					
ANR	1004622	CompoundStatement		41:51:1037:1779	1004620	0					
ANR	1004623	IdentifierDeclStatement	RCore * core = ( RCore * ) data ;	42:1:1040:1067	1004620	0	True				
ANR	1004624	IdentifierDecl	* core = ( RCore * ) data		1004620	0					
ANR	1004625	IdentifierDeclType	RCore *		1004620	0					
ANR	1004626	Identifier	core		1004620	1					
ANR	1004627	AssignmentExpression	* core = ( RCore * ) data		1004620	2		=			
ANR	1004628	Identifier	core		1004620	0					
ANR	1004629	CastExpression	( RCore * ) data		1004620	1					
ANR	1004630	CastTarget	RCore *		1004620	0					
ANR	1004631	Identifier	data		1004620	1					
ANR	1004632	IfStatement	if ( input )		1004620	1					
ANR	1004633	Condition	input	43:5:1074:1078	1004620	0	True				
ANR	1004634	Identifier	input		1004620	0					
ANR	1004635	SwitchStatement	switch ( * input )		1004620	1					
ANR	1004636	Condition	* input	44:9:1090:1095	1004620	0	True				
ANR	1004637	UnaryOperationExpression	* input		1004620	0					
ANR	1004638	UnaryOperator	*		1004620	0					
ANR	1004639	Identifier	input		1004620	1					
ANR	1004640	CompoundStatement		4:17:60:60	1004620	1					
ANR	1004641	Label	case '?' :	45:1:1101:1109	1004620	0	True				
ANR	1004642	ExpressionStatement	"r_core_cmd_help ( core , help_msg_q )"	46:2:1113:1147	1004620	1	True				
ANR	1004643	CallExpression	"r_core_cmd_help ( core , help_msg_q )"		1004620	0					
ANR	1004644	Callee	r_core_cmd_help		1004620	0					
ANR	1004645	Identifier	r_core_cmd_help		1004620	0					
ANR	1004646	ArgumentList	core		1004620	1					
ANR	1004647	Argument	core		1004620	0					
ANR	1004648	Identifier	core		1004620	0					
ANR	1004649	Argument	help_msg_q		1004620	1					
ANR	1004650	Identifier	help_msg_q		1004620	0					
ANR	1004651	BreakStatement	break ;	47:2:1151:1156	1004620	2	True				
ANR	1004652	Label	case '!' :	48:1:1159:1167	1004620	3	True				
ANR	1004653	ReturnStatement	"return cmd_Quit ( core , input ) ;"	49:2:1171:1200	1004620	4	True				
ANR	1004654	CallExpression	"cmd_Quit ( core , input )"		1004620	0					
ANR	1004655	Callee	cmd_Quit		1004620	0					
ANR	1004656	Identifier	cmd_Quit		1004620	0					
ANR	1004657	ArgumentList	core		1004620	1					
ANR	1004658	Argument	core		1004620	0					
ANR	1004659	Identifier	core		1004620	0					
ANR	1004660	Argument	input		1004620	1					
ANR	1004661	Identifier	input		1004620	0					
ANR	1004662	Label	case '\\0' :	50:1:1203:1212	1004620	5	True				
ANR	1004663	Statement	core	51:2:1216:1219	1004620	6	True				
ANR	1004664	Statement	->	51:6:1220:1221	1004620	7	True				
ANR	1004665	Statement	num	51:8:1222:1224	1004620	8	True				
ANR	1004666	Statement	->	51:11:1225:1226	1004620	9	True				
ANR	1004667	Statement	value	51:13:1227:1231	1004620	10	True				
ANR	1004668	Statement	=	51:19:1233:1233	1004620	11	True				
ANR	1004669	Statement	0L	51:21:1235:1236	1004620	12	True				
ANR	1004670	ExpressionStatement	L	51:23:1237:1238	1004620	13	True				
ANR	1004671	Identifier	L		1004620	0					
ANR	1004672	ReturnStatement	return - 2 ;	52:2:1242:1251	1004620	14	True				
ANR	1004673	UnaryOperationExpression	- 2		1004620	0					
ANR	1004674	UnaryOperator	-		1004620	0					
ANR	1004675	PrimaryExpression	2		1004620	1					
ANR	1004676	Label	default :	53:1:1254:1261	1004620	15	True				
ANR	1004677	Identifier	default		1004620	0					
ANR	1004678	WhileStatement	while ( * input == ' ' )		1004620	16					
ANR	1004679	Condition	* input == ' '	54:9:1272:1284	1004620	0	True				
ANR	1004680	EqualityExpression	* input == ' '		1004620	0		==			
ANR	1004681	UnaryOperationExpression	* input		1004620	0					
ANR	1004682	UnaryOperator	*		1004620	0					
ANR	1004683	Identifier	input		1004620	1					
ANR	1004684	PrimaryExpression	' '		1004620	1					
ANR	1004685	CompoundStatement		14:24:249:249	1004620	1					
ANR	1004686	ExpressionStatement	input ++	55:3:1292:1299	1004620	0	True				
ANR	1004687	PostIncDecOperationExpression	input ++		1004620	0					
ANR	1004688	Identifier	input		1004620	0					
ANR	1004689	IncDec	++		1004620	1					
ANR	1004690	IfStatement	if ( * input )		1004620	17					
ANR	1004691	Condition	* input	57:6:1311:1316	1004620	0	True				
ANR	1004692	UnaryOperationExpression	* input		1004620	0					
ANR	1004693	UnaryOperator	*		1004620	0					
ANR	1004694	Identifier	input		1004620	1					
ANR	1004695	CompoundStatement		17:14:281:281	1004620	1					
ANR	1004696	ExpressionStatement	"r_num_math ( core -> num , input )"	58:3:1324:1353	1004620	0	True				
ANR	1004697	CallExpression	"r_num_math ( core -> num , input )"		1004620	0					
ANR	1004698	Callee	r_num_math		1004620	0					
ANR	1004699	Identifier	r_num_math		1004620	0					
ANR	1004700	ArgumentList	core -> num		1004620	1					
ANR	1004701	Argument	core -> num		1004620	0					
ANR	1004702	PtrMemberAccess	core -> num		1004620	0					
ANR	1004703	Identifier	core		1004620	0					
ANR	1004704	Identifier	num		1004620	1					
ANR	1004705	Argument	input		1004620	1					
ANR	1004706	Identifier	input		1004620	0					
ANR	1004707	ElseStatement	else		1004620	0					
ANR	1004708	CompoundStatement		19:9:326:326	1004620	0					
ANR	1004709	Statement	core	60:3:1369:1372	1004620	0	True				
ANR	1004710	Statement	->	60:7:1373:1374	1004620	1	True				
ANR	1004711	Statement	num	60:9:1375:1377	1004620	2	True				
ANR	1004712	Statement	->	60:12:1378:1379	1004620	3	True				
ANR	1004713	Statement	value	60:14:1380:1384	1004620	4	True				
ANR	1004714	Statement	=	60:20:1386:1386	1004620	5	True				
ANR	1004715	Statement	0L	60:22:1388:1389	1004620	6	True				
ANR	1004716	ExpressionStatement	L	60:24:1390:1391	1004620	7	True				
ANR	1004717	Identifier	L		1004620	0					
ANR	1004718	IfStatement	if ( * input == 'y' )		1004620	18					
ANR	1004719	Condition	* input == 'y'	63:6:1404:1416	1004620	0	True				
ANR	1004720	EqualityExpression	* input == 'y'		1004620	0		==			
ANR	1004721	UnaryOperationExpression	* input		1004620	0					
ANR	1004722	UnaryOperator	*		1004620	0					
ANR	1004723	Identifier	input		1004620	1					
ANR	1004724	PrimaryExpression	'y'		1004620	1					
ANR	1004725	CompoundStatement		23:21:381:381	1004620	1					
ANR	1004726	ExpressionStatement	core -> num -> value = 5	64:3:1424:1444	1004620	0	True				
ANR	1004727	AssignmentExpression	core -> num -> value = 5		1004620	0		=			
ANR	1004728	PtrMemberAccess	core -> num -> value		1004620	0					
ANR	1004729	PtrMemberAccess	core -> num		1004620	0					
ANR	1004730	Identifier	core		1004620	0					
ANR	1004731	Identifier	num		1004620	1					
ANR	1004732	Identifier	value		1004620	1					
ANR	1004733	PrimaryExpression	5		1004620	1					
ANR	1004734	ElseStatement	else		1004620	0					
ANR	1004735	IfStatement	if ( * input == 'n' )		1004620	0					
ANR	1004736	Condition	* input == 'n'	65:13:1459:1471	1004620	0	True				
ANR	1004737	EqualityExpression	* input == 'n'		1004620	0		==			
ANR	1004738	UnaryOperationExpression	* input		1004620	0					
ANR	1004739	UnaryOperator	*		1004620	0					
ANR	1004740	Identifier	input		1004620	1					
ANR	1004741	PrimaryExpression	'n'		1004620	1					
ANR	1004742	CompoundStatement		25:28:436:436	1004620	1					
ANR	1004743	ExpressionStatement	core -> num -> value = 1	66:3:1479:1499	1004620	0	True				
ANR	1004744	AssignmentExpression	core -> num -> value = 1		1004620	0		=			
ANR	1004745	PtrMemberAccess	core -> num -> value		1004620	0					
ANR	1004746	PtrMemberAccess	core -> num		1004620	0					
ANR	1004747	Identifier	core		1004620	0					
ANR	1004748	Identifier	num		1004620	1					
ANR	1004749	Identifier	value		1004620	1					
ANR	1004750	PrimaryExpression	1		1004620	1					
ANR	1004751	IfStatement	if ( input [ 1 ] == 'y' )		1004620	19					
ANR	1004752	Condition	input [ 1 ] == 'y'	69:6:1512:1526	1004620	0	True				
ANR	1004753	EqualityExpression	input [ 1 ] == 'y'		1004620	0		==			
ANR	1004754	ArrayIndexing	input [ 1 ]		1004620	0					
ANR	1004755	Identifier	input		1004620	0					
ANR	1004756	PrimaryExpression	1		1004620	1					
ANR	1004757	PrimaryExpression	'y'		1004620	1					
ANR	1004758	CompoundStatement		29:23:491:491	1004620	1					
ANR	1004759	ExpressionStatement	core -> num -> value += 10	70:3:1534:1556	1004620	0	True				
ANR	1004760	AssignmentExpression	core -> num -> value += 10		1004620	0		+=			
ANR	1004761	PtrMemberAccess	core -> num -> value		1004620	0					
ANR	1004762	PtrMemberAccess	core -> num		1004620	0					
ANR	1004763	Identifier	core		1004620	0					
ANR	1004764	Identifier	num		1004620	1					
ANR	1004765	Identifier	value		1004620	1					
ANR	1004766	PrimaryExpression	10		1004620	1					
ANR	1004767	ElseStatement	else		1004620	0					
ANR	1004768	IfStatement	if ( input [ 1 ] == 'n' )		1004620	0					
ANR	1004769	Condition	input [ 1 ] == 'n'	71:13:1572:1586	1004620	0	True				
ANR	1004770	EqualityExpression	input [ 1 ] == 'n'		1004620	0		==			
ANR	1004771	ArrayIndexing	input [ 1 ]		1004620	0					
ANR	1004772	Identifier	input		1004620	0					
ANR	1004773	PrimaryExpression	1		1004620	1					
ANR	1004774	PrimaryExpression	'n'		1004620	1					
ANR	1004775	CompoundStatement		31:30:551:551	1004620	1					
ANR	1004776	ExpressionStatement	core -> num -> value += 2	72:3:1594:1615	1004620	0	True				
ANR	1004777	AssignmentExpression	core -> num -> value += 2		1004620	0		+=			
ANR	1004778	PtrMemberAccess	core -> num -> value		1004620	0					
ANR	1004779	PtrMemberAccess	core -> num		1004620	0					
ANR	1004780	Identifier	core		1004620	0					
ANR	1004781	Identifier	num		1004620	1					
ANR	1004782	Identifier	value		1004620	1					
ANR	1004783	PrimaryExpression	2		1004620	1					
ANR	1004784	ReturnStatement	return - 2 ;	76:2:1750:1759	1004620	20	True				
ANR	1004785	UnaryOperationExpression	- 2		1004620	0					
ANR	1004786	UnaryOperator	-		1004620	0					
ANR	1004787	PrimaryExpression	2		1004620	1					
ANR	1004788	ReturnStatement	return false ;	78:1:1765:1777	1004620	2	True				
ANR	1004789	Identifier	false		1004620	0					
ANR	1004790	ReturnType	static int		1004620	1					
ANR	1004791	Identifier	cmd_quit		1004620	2					
ANR	1004792	ParameterList	"void * data , const char * input"		1004620	3					
ANR	1004793	Parameter	void * data	41:20:1006:1015	1004620	0	True				
ANR	1004794	ParameterType	void *		1004620	0					
ANR	1004795	Identifier	data		1004620	1					
ANR	1004796	Parameter	const char * input	41:32:1018:1034	1004620	1	True				
ANR	1004797	ParameterType	const char *		1004620	0					
ANR	1004798	Identifier	input		1004620	1					
ANR	1004799	CFGEntryNode	ENTRY		1004620		True				
ANR	1004800	CFGExitNode	EXIT		1004620		True				
ANR	1004801	Symbol	input		1004620						
ANR	1004802	Symbol	core		1004620						
ANR	1004803	Symbol	data		1004620						
ANR	1004804	Symbol	help_msg_q		1004620						
ANR	1004805	Symbol	cmd_Quit		1004620						
ANR	1004806	Symbol	* input		1004620						
ANR	1004807	Symbol	* core		1004620						
ANR	1004808	Symbol	false		1004620						
ANR	1004809	Symbol	core -> num -> value		1004620						
ANR	1004810	Symbol	* core -> num		1004620						
ANR	1004811	Symbol	core -> num		1004620						
ANR	1004812	Symbol	* * core		1004620						
