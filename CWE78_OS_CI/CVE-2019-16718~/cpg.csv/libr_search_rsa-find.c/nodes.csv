command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5055706	File	data/converged/CVE-2019-16718~_radare2/libr_search_rsa-find.c								
ANR	5055707	Function	parse_next_rsa_field	17:0:594:915							
ANR	5055708	FunctionDef	"parse_next_rsa_field (const ut8 * start , ut32 * len)"		5055707	0					
ANR	5055709	CompoundStatement		17:68:662:915	5055707	0					
ANR	5055710	ExpressionStatement	* len = 0	18:1:665:673	5055707	0	True				
ANR	5055711	AssignmentExpression	* len = 0		5055707	0		=			
ANR	5055712	UnaryOperationExpression	* len		5055707	0					
ANR	5055713	UnaryOperator	*		5055707	0					
ANR	5055714	Identifier	len		5055707	1					
ANR	5055715	PrimaryExpression	0		5055707	1					
ANR	5055716	IfStatement	if ( ! ( start [ 1 ] & 128 ) )		5055707	1					
ANR	5055717	Condition	! ( start [ 1 ] & 128 )	19:5:680:696	5055707	0	True				
ANR	5055718	UnaryOperationExpression	! ( start [ 1 ] & 128 )		5055707	0					
ANR	5055719	UnaryOperator	!		5055707	0					
ANR	5055720	BitAndExpression	start [ 1 ] & 128		5055707	1		&			
ANR	5055721	ArrayIndexing	start [ 1 ]		5055707	0					
ANR	5055722	Identifier	start		5055707	0					
ANR	5055723	PrimaryExpression	1		5055707	1					
ANR	5055724	PrimaryExpression	128		5055707	1					
ANR	5055725	CompoundStatement		3:24:36:36	5055707	1					
ANR	5055726	ExpressionStatement	len = ( ut32 * ) ( start + 1 )	20:2:703:727	5055707	0	True				
ANR	5055727	AssignmentExpression	len = ( ut32 * ) ( start + 1 )		5055707	0		=			
ANR	5055728	Identifier	len		5055707	0					
ANR	5055729	CastExpression	( ut32 * ) ( start + 1 )		5055707	1					
ANR	5055730	CastTarget	ut32 *		5055707	0					
ANR	5055731	AdditiveExpression	start + 1		5055707	1		+			
ANR	5055732	Identifier	start		5055707	0					
ANR	5055733	PrimaryExpression	1		5055707	1					
ANR	5055734	ReturnStatement	return start + 2 ;	21:2:731:747	5055707	1	True				
ANR	5055735	AdditiveExpression	start + 2		5055707	0		+			
ANR	5055736	Identifier	start		5055707	0					
ANR	5055737	PrimaryExpression	2		5055707	1					
ANR	5055738	ElseStatement	else		5055707	0					
ANR	5055739	CompoundStatement		8:2:107:141	5055707	0					
ANR	5055740	IdentifierDeclStatement	int i ;	23:2:761:766	5055707	0	True				
ANR	5055741	IdentifierDecl	i		5055707	0					
ANR	5055742	IdentifierDeclType	int		5055707	0					
ANR	5055743	Identifier	i		5055707	1					
ANR	5055744	IdentifierDeclStatement	const int lensize = start [ 1 ] & 127 ;	24:2:770:804	5055707	1	True				
ANR	5055745	IdentifierDecl	lensize = start [ 1 ] & 127		5055707	0					
ANR	5055746	IdentifierDeclType	const int		5055707	0					
ANR	5055747	Identifier	lensize		5055707	1					
ANR	5055748	AssignmentExpression	lensize = start [ 1 ] & 127		5055707	2		=			
ANR	5055749	Identifier	lensize		5055707	0					
ANR	5055750	BitAndExpression	start [ 1 ] & 127		5055707	1		&			
ANR	5055751	ArrayIndexing	start [ 1 ]		5055707	0					
ANR	5055752	Identifier	start		5055707	0					
ANR	5055753	PrimaryExpression	1		5055707	1					
ANR	5055754	PrimaryExpression	127		5055707	1					
ANR	5055755	ForStatement	for ( i = 0 ; i < lensize ; i ++ )		5055707	2					
ANR	5055756	ForInit	i = 0 ;	25:7:813:818	5055707	0	True				
ANR	5055757	AssignmentExpression	i = 0		5055707	0		=			
ANR	5055758	Identifier	i		5055707	0					
ANR	5055759	PrimaryExpression	0		5055707	1					
ANR	5055760	Condition	i < lensize	25:14:820:830	5055707	1	True				
ANR	5055761	RelationalExpression	i < lensize		5055707	0		<			
ANR	5055762	Identifier	i		5055707	0					
ANR	5055763	Identifier	lensize		5055707	1					
ANR	5055764	PostIncDecOperationExpression	i ++	25:27:833:835	5055707	2	True				
ANR	5055765	Identifier	i		5055707	0					
ANR	5055766	IncDec	++		5055707	1					
ANR	5055767	CompoundStatement		9:32:175:175	5055707	3					
ANR	5055768	ExpressionStatement	* len = ( * len << 8 ) | start [ 2 + i ]	26:3:843:876	5055707	0	True				
ANR	5055769	AssignmentExpression	* len = ( * len << 8 ) | start [ 2 + i ]		5055707	0		=			
ANR	5055770	UnaryOperationExpression	* len		5055707	0					
ANR	5055771	UnaryOperator	*		5055707	0					
ANR	5055772	Identifier	len		5055707	1					
ANR	5055773	InclusiveOrExpression	( * len << 8 ) | start [ 2 + i ]		5055707	1		|			
ANR	5055774	ShiftExpression	* len << 8		5055707	0		<<			
ANR	5055775	UnaryOperationExpression	* len		5055707	0					
ANR	5055776	UnaryOperator	*		5055707	0					
ANR	5055777	Identifier	len		5055707	1					
ANR	5055778	PrimaryExpression	8		5055707	1					
ANR	5055779	ArrayIndexing	start [ 2 + i ]		5055707	1					
ANR	5055780	Identifier	start		5055707	0					
ANR	5055781	AdditiveExpression	2 + i		5055707	1		+			
ANR	5055782	PrimaryExpression	2		5055707	0					
ANR	5055783	Identifier	i		5055707	1					
ANR	5055784	ReturnStatement	return start + 2 + lensize ;	28:2:884:910	5055707	3	True				
ANR	5055785	AdditiveExpression	start + 2 + lensize		5055707	0		+			
ANR	5055786	Identifier	start		5055707	0					
ANR	5055787	AdditiveExpression	2 + lensize		5055707	1		+			
ANR	5055788	PrimaryExpression	2		5055707	0					
ANR	5055789	Identifier	lensize		5055707	1					
ANR	5055790	ReturnType	static const ut8 *		5055707	1					
ANR	5055791	Identifier	parse_next_rsa_field		5055707	2					
ANR	5055792	ParameterList	"const ut8 * start , ut32 * len"		5055707	3					
ANR	5055793	Parameter	const ut8 * start	17:39:633:648	5055707	0	True				
ANR	5055794	ParameterType	const ut8 *		5055707	0					
ANR	5055795	Identifier	start		5055707	1					
ANR	5055796	Parameter	ut32 * len	17:57:651:659	5055707	1	True				
ANR	5055797	ParameterType	ut32 *		5055707	0					
ANR	5055798	Identifier	len		5055707	1					
ANR	5055799	CFGEntryNode	ENTRY		5055707		True				
ANR	5055800	CFGExitNode	EXIT		5055707		True				
ANR	5055801	Symbol	* i		5055707						
ANR	5055802	Symbol	len		5055707						
ANR	5055803	Symbol	* start		5055707						
ANR	5055804	Symbol	start		5055707						
ANR	5055805	Symbol	lensize		5055707						
ANR	5055806	Symbol	i		5055707						
ANR	5055807	Symbol	* len		5055707						
ANR	5055808	Function	check_rsa_fields	33:0:974:1325							
ANR	5055809	FunctionDef	check_rsa_fields (const ut8 * start)		5055808	0					
ANR	5055810	CompoundStatement		33:46:1020:1325	5055808	0					
ANR	5055811	Statement	define	34:1:1023:1028	5055808	0	True				
ANR	5055812	Statement	NB_PRIV_FIELDS	34:8:1030:1043	5055808	1	True				
ANR	5055813	Statement	10	34:23:1045:1046	5055808	2	True				
ANR	5055814	IdentifierDeclStatement	ut32 len = 0 ;	35:1:1049:1061	5055808	3	True				
ANR	5055815	IdentifierDecl	len = 0		5055808	0					
ANR	5055816	IdentifierDeclType	ut32		5055808	0					
ANR	5055817	Identifier	len		5055808	1					
ANR	5055818	AssignmentExpression	len = 0		5055808	2		=			
ANR	5055819	Identifier	len		5055808	0					
ANR	5055820	PrimaryExpression	0		5055808	1					
ANR	5055821	IdentifierDeclStatement	int i ;	36:1:1064:1069	5055808	4	True				
ANR	5055822	IdentifierDecl	i		5055808	0					
ANR	5055823	IdentifierDeclType	int		5055808	0					
ANR	5055824	Identifier	i		5055808	1					
ANR	5055825	IdentifierDeclStatement	"ut8 const * ptr = parse_next_rsa_field ( start , & len ) ;"	38:1:1096:1147	5055808	5	True				
ANR	5055826	IdentifierDecl	"* ptr = parse_next_rsa_field ( start , & len )"		5055808	0					
ANR	5055827	IdentifierDeclType	ut8 const *		5055808	0					
ANR	5055828	Identifier	ptr		5055808	1					
ANR	5055829	AssignmentExpression	"* ptr = parse_next_rsa_field ( start , & len )"		5055808	2		=			
ANR	5055830	Identifier	ptr		5055808	0					
ANR	5055831	CallExpression	"parse_next_rsa_field ( start , & len )"		5055808	1					
ANR	5055832	Callee	parse_next_rsa_field		5055808	0					
ANR	5055833	Identifier	parse_next_rsa_field		5055808	0					
ANR	5055834	ArgumentList	start		5055808	1					
ANR	5055835	Argument	start		5055808	0					
ANR	5055836	Identifier	start		5055808	0					
ANR	5055837	Argument	& len		5055808	1					
ANR	5055838	UnaryOperationExpression	& len		5055808	0					
ANR	5055839	UnaryOperator	&		5055808	0					
ANR	5055840	Identifier	len		5055808	1					
ANR	5055841	IfStatement	if ( ! len || len > 1024 )		5055808	6					
ANR	5055842	Condition	! len || len > 1024	40:5:1155:1172	5055808	0	True				
ANR	5055843	OrExpression	! len || len > 1024		5055808	0		||			
ANR	5055844	UnaryOperationExpression	! len		5055808	0					
ANR	5055845	UnaryOperator	!		5055808	0					
ANR	5055846	Identifier	len		5055808	1					
ANR	5055847	RelationalExpression	len > 1024		5055808	1		>			
ANR	5055848	Identifier	len		5055808	0					
ANR	5055849	PrimaryExpression	1024		5055808	1					
ANR	5055850	CompoundStatement		8:25:154:154	5055808	1					
ANR	5055851	ReturnStatement	return false ;	41:2:1179:1191	5055808	0	True				
ANR	5055852	Identifier	false		5055808	0					
ANR	5055853	ForStatement	for ( i = 0 ; i < NB_PRIV_FIELDS ; i ++ )		5055808	7					
ANR	5055854	ForInit	i = 0 ;	43:6:1202:1207	5055808	0	True				
ANR	5055855	AssignmentExpression	i = 0		5055808	0		=			
ANR	5055856	Identifier	i		5055808	0					
ANR	5055857	PrimaryExpression	0		5055808	1					
ANR	5055858	Condition	i < NB_PRIV_FIELDS	43:13:1209:1226	5055808	1	True				
ANR	5055859	RelationalExpression	i < NB_PRIV_FIELDS		5055808	0		<			
ANR	5055860	Identifier	i		5055808	0					
ANR	5055861	Identifier	NB_PRIV_FIELDS		5055808	1					
ANR	5055862	PostIncDecOperationExpression	i ++	43:33:1229:1231	5055808	2	True				
ANR	5055863	Identifier	i		5055808	0					
ANR	5055864	IncDec	++		5055808	1					
ANR	5055865	CompoundStatement		11:38:213:213	5055808	3					
ANR	5055866	IfStatement	"if ( ! ( ptr = parse_next_rsa_field ( ptr , & len ) ) )"		5055808	0					
ANR	5055867	Condition	"! ( ptr = parse_next_rsa_field ( ptr , & len ) )"	44:6:1242:1282	5055808	0	True				
ANR	5055868	UnaryOperationExpression	"! ( ptr = parse_next_rsa_field ( ptr , & len ) )"		5055808	0					
ANR	5055869	UnaryOperator	!		5055808	0					
ANR	5055870	AssignmentExpression	"ptr = parse_next_rsa_field ( ptr , & len )"		5055808	1		=			
ANR	5055871	Identifier	ptr		5055808	0					
ANR	5055872	CallExpression	"parse_next_rsa_field ( ptr , & len )"		5055808	1					
ANR	5055873	Callee	parse_next_rsa_field		5055808	0					
ANR	5055874	Identifier	parse_next_rsa_field		5055808	0					
ANR	5055875	ArgumentList	ptr		5055808	1					
ANR	5055876	Argument	ptr		5055808	0					
ANR	5055877	Identifier	ptr		5055808	0					
ANR	5055878	Argument	& len		5055808	1					
ANR	5055879	UnaryOperationExpression	& len		5055808	0					
ANR	5055880	UnaryOperator	&		5055808	0					
ANR	5055881	Identifier	len		5055808	1					
ANR	5055882	CompoundStatement		12:49:264:264	5055808	1					
ANR	5055883	ReturnStatement	return false ;	45:3:1290:1302	5055808	0	True				
ANR	5055884	Identifier	false		5055808	0					
ANR	5055885	ReturnStatement	return true ;	48:1:1312:1323	5055808	8	True				
ANR	5055886	Identifier	true		5055808	0					
ANR	5055887	ReturnType	static int		5055808	1					
ANR	5055888	Identifier	check_rsa_fields		5055808	2					
ANR	5055889	ParameterList	const ut8 * start		5055808	3					
ANR	5055890	Parameter	const ut8 * start	33:28:1002:1017	5055808	0	True				
ANR	5055891	ParameterType	const ut8 *		5055808	0					
ANR	5055892	Identifier	start		5055808	1					
ANR	5055893	CFGEntryNode	ENTRY		5055808		True				
ANR	5055894	CFGExitNode	EXIT		5055808		True				
ANR	5055895	Symbol	parse_next_rsa_field		5055808						
ANR	5055896	Symbol	len		5055808						
ANR	5055897	Symbol	start		5055808						
ANR	5055898	Symbol	false		5055808						
ANR	5055899	Symbol	NB_PRIV_FIELDS		5055808						
ANR	5055900	Symbol	true		5055808						
ANR	5055901	Symbol	i		5055808						
ANR	5055902	Symbol	& len		5055808						
ANR	5055903	Symbol	ptr		5055808						
ANR	5055904	Function	r_search_rsa_update	52:0:1373:1981							
ANR	5055905	FunctionDef	"r_search_rsa_update (RSearch * s , ut64 from , const ut8 * buf , int len)"		5055904	0					
ANR	5055906	CompoundStatement		52:78:1451:1981	5055904	0					
ANR	5055907	IdentifierDeclStatement	"unsigned int i , k , index ;"	53:1:1454:1478	5055904	0	True				
ANR	5055908	IdentifierDecl	i		5055904	0					
ANR	5055909	IdentifierDeclType	unsigned int		5055904	0					
ANR	5055910	Identifier	i		5055904	1					
ANR	5055911	IdentifierDecl	k		5055904	1					
ANR	5055912	IdentifierDeclType	unsigned int		5055904	0					
ANR	5055913	Identifier	k		5055904	1					
ANR	5055914	IdentifierDecl	index		5055904	2					
ANR	5055915	IdentifierDeclType	unsigned int		5055904	0					
ANR	5055916	Identifier	index		5055904	1					
ANR	5055917	IdentifierDeclStatement	"const ut8 versionmarker [ ] = { 0x02 , 0x01 , 0x00 , 0x02 } ;"	54:1:1481:1533	5055904	1	True				
ANR	5055918	IdentifierDecl	"versionmarker [ ] = { 0x02 , 0x01 , 0x00 , 0x02 }"		5055904	0					
ANR	5055919	IdentifierDeclType	const ut8 [ ]		5055904	0					
ANR	5055920	Identifier	versionmarker		5055904	1					
ANR	5055921	AssignmentExpression	"versionmarker [ ] = { 0x02 , 0x01 , 0x00 , 0x02 }"		5055904	2		=			
ANR	5055922	Identifier	versionmarker		5055904	0					
ANR	5055923	InitializerList	0x02		5055904	1					
ANR	5055924	PrimaryExpression	0x02		5055904	0					
ANR	5055925	PrimaryExpression	0x01		5055904	1					
ANR	5055926	PrimaryExpression	0x00		5055904	2					
ANR	5055927	PrimaryExpression	0x02		5055904	3					
ANR	5055928	IfStatement	if ( len < sizeof ( versionmarker ) )		5055904	2					
ANR	5055929	Condition	len < sizeof ( versionmarker )	56:5:1541:1568	5055904	0	True				
ANR	5055930	RelationalExpression	len < sizeof ( versionmarker )		5055904	0		<			
ANR	5055931	Identifier	len		5055904	0					
ANR	5055932	SizeofExpression	sizeof ( versionmarker )		5055904	1					
ANR	5055933	Sizeof	sizeof		5055904	0					
ANR	5055934	SizeofOperand	versionmarker		5055904	1					
ANR	5055935	CompoundStatement		5:35:119:119	5055904	1					
ANR	5055936	ReturnStatement	return - 1 ;	57:2:1575:1584	5055904	0	True				
ANR	5055937	UnaryOperationExpression	- 1		5055904	0					
ANR	5055938	UnaryOperator	-		5055904	0					
ANR	5055939	PrimaryExpression	1		5055904	1					
ANR	5055940	ForStatement	for ( i = 0 ; i < len - sizeof ( versionmarker ) ; i ++ )		5055904	3					
ANR	5055941	ForInit	i = 0 ;	60:6:1596:1601	5055904	0	True				
ANR	5055942	AssignmentExpression	i = 0		5055904	0		=			
ANR	5055943	Identifier	i		5055904	0					
ANR	5055944	PrimaryExpression	0		5055904	1					
ANR	5055945	Condition	i < len - sizeof ( versionmarker )	60:13:1603:1634	5055904	1	True				
ANR	5055946	RelationalExpression	i < len - sizeof ( versionmarker )		5055904	0		<			
ANR	5055947	Identifier	i		5055904	0					
ANR	5055948	AdditiveExpression	len - sizeof ( versionmarker )		5055904	1		-			
ANR	5055949	Identifier	len		5055904	0					
ANR	5055950	SizeofExpression	sizeof ( versionmarker )		5055904	1					
ANR	5055951	Sizeof	sizeof		5055904	0					
ANR	5055952	SizeofOperand	versionmarker		5055904	1					
ANR	5055953	PostIncDecOperationExpression	i ++	60:47:1637:1639	5055904	2	True				
ANR	5055954	Identifier	i		5055904	0					
ANR	5055955	IncDec	++		5055904	1					
ANR	5055956	CompoundStatement		9:52:190:190	5055904	3					
ANR	5055957	IfStatement	"if ( memcmp ( & buf [ i ] , versionmarker , sizeof ( versionmarker ) ) )"		5055904	0					
ANR	5055958	Condition	"memcmp ( & buf [ i ] , versionmarker , sizeof ( versionmarker ) )"	61:6:1650:1704	5055904	0	True				
ANR	5055959	CallExpression	"memcmp ( & buf [ i ] , versionmarker , sizeof ( versionmarker ) )"		5055904	0					
ANR	5055960	Callee	memcmp		5055904	0					
ANR	5055961	Identifier	memcmp		5055904	0					
ANR	5055962	ArgumentList	& buf [ i ]		5055904	1					
ANR	5055963	Argument	& buf [ i ]		5055904	0					
ANR	5055964	UnaryOperationExpression	& buf [ i ]		5055904	0					
ANR	5055965	UnaryOperator	&		5055904	0					
ANR	5055966	ArrayIndexing	buf [ i ]		5055904	1					
ANR	5055967	Identifier	buf		5055904	0					
ANR	5055968	Identifier	i		5055904	1					
ANR	5055969	Argument	versionmarker		5055904	1					
ANR	5055970	Identifier	versionmarker		5055904	0					
ANR	5055971	Argument	sizeof ( versionmarker )		5055904	2					
ANR	5055972	SizeofExpression	sizeof ( versionmarker )		5055904	0					
ANR	5055973	Sizeof	sizeof		5055904	0					
ANR	5055974	SizeofOperand	versionmarker		5055904	1					
ANR	5055975	CompoundStatement		10:63:255:255	5055904	1					
ANR	5055976	ContinueStatement	continue ;	62:3:1712:1720	5055904	0	True				
ANR	5055977	ExpressionStatement	index = 0	65:2:1729:1738	5055904	1	True				
ANR	5055978	AssignmentExpression	index = 0		5055904	0		=			
ANR	5055979	Identifier	index		5055904	0					
ANR	5055980	PrimaryExpression	0		5055904	1					
ANR	5055981	ForStatement	for ( k = i ; k != 0 && k > i - 20 ; k -- )		5055904	2					
ANR	5055982	ForInit	k = i ;	66:7:1747:1750	5055904	0	True				
ANR	5055983	AssignmentExpression	k = i		5055904	0		=			
ANR	5055984	Identifier	k		5055904	0					
ANR	5055985	Identifier	i		5055904	1					
ANR	5055986	Condition	k != 0 && k > i - 20	66:12:1752:1771	5055904	1	True				
ANR	5055987	AndExpression	k != 0 && k > i - 20		5055904	0		&&			
ANR	5055988	EqualityExpression	k != 0		5055904	0		!=			
ANR	5055989	Identifier	k		5055904	0					
ANR	5055990	PrimaryExpression	0		5055904	1					
ANR	5055991	RelationalExpression	k > i - 20		5055904	1		>			
ANR	5055992	Identifier	k		5055904	0					
ANR	5055993	AdditiveExpression	i - 20		5055904	1		-			
ANR	5055994	Identifier	i		5055904	0					
ANR	5055995	PrimaryExpression	20		5055904	1					
ANR	5055996	PostIncDecOperationExpression	k --	66:34:1774:1776	5055904	2	True				
ANR	5055997	Identifier	k		5055904	0					
ANR	5055998	IncDec	--		5055904	1					
ANR	5055999	CompoundStatement		15:39:327:327	5055904	3					
ANR	5056000	IfStatement	if ( buf [ k ] == '0' )		5055904	0					
ANR	5056001	Condition	buf [ k ] == '0'	67:7:1788:1800	5055904	0	True				
ANR	5056002	EqualityExpression	buf [ k ] == '0'		5055904	0		==			
ANR	5056003	ArrayIndexing	buf [ k ]		5055904	0					
ANR	5056004	Identifier	buf		5055904	0					
ANR	5056005	Identifier	k		5055904	1					
ANR	5056006	PrimaryExpression	'0'		5055904	1					
ANR	5056007	CompoundStatement		16:22:351:351	5055904	1					
ANR	5056008	ExpressionStatement	index = k	68:4:1843:1852	5055904	0	True				
ANR	5056009	AssignmentExpression	index = k		5055904	0		=			
ANR	5056010	Identifier	index		5055904	0					
ANR	5056011	Identifier	k		5055904	1					
ANR	5056012	BreakStatement	break ;	69:4:1858:1863	5055904	1	True				
ANR	5056013	IfStatement	if ( ! index )		5055904	3					
ANR	5056014	Condition	! index	73:6:1881:1886	5055904	0	True				
ANR	5056015	UnaryOperationExpression	! index		5055904	0					
ANR	5056016	UnaryOperator	!		5055904	0					
ANR	5056017	Identifier	index		5055904	1					
ANR	5056018	CompoundStatement		22:14:437:437	5055904	1					
ANR	5056019	ContinueStatement	continue ;	74:3:1894:1902	5055904	0	True				
ANR	5056020	IfStatement	if ( check_rsa_fields ( buf + index ) )		5055904	4					
ANR	5056021	Condition	check_rsa_fields ( buf + index )	77:6:1915:1944	5055904	0	True				
ANR	5056022	CallExpression	check_rsa_fields ( buf + index )		5055904	0					
ANR	5056023	Callee	check_rsa_fields		5055904	0					
ANR	5056024	Identifier	check_rsa_fields		5055904	0					
ANR	5056025	ArgumentList	buf + index		5055904	1					
ANR	5056026	Argument	buf + index		5055904	0					
ANR	5056027	AdditiveExpression	buf + index		5055904	0		+			
ANR	5056028	Identifier	buf		5055904	0					
ANR	5056029	Identifier	index		5055904	1					
ANR	5056030	CompoundStatement		26:38:495:495	5055904	1					
ANR	5056031	ReturnStatement	return i ;	78:3:1952:1960	5055904	0	True				
ANR	5056032	Identifier	i		5055904	0					
ANR	5056033	ReturnStatement	return - 1 ;	81:1:1970:1979	5055904	4	True				
ANR	5056034	UnaryOperationExpression	- 1		5055904	0					
ANR	5056035	UnaryOperator	-		5055904	0					
ANR	5056036	PrimaryExpression	1		5055904	1					
ANR	5056037	ReturnType	R_API int		5055904	1					
ANR	5056038	Identifier	r_search_rsa_update		5055904	2					
ANR	5056039	ParameterList	"RSearch * s , ut64 from , const ut8 * buf , int len"		5055904	3					
ANR	5056040	Parameter	RSearch * s	52:30:1403:1412	5055904	0	True				
ANR	5056041	ParameterType	RSearch *		5055904	0					
ANR	5056042	Identifier	s		5055904	1					
ANR	5056043	Parameter	ut64 from	52:42:1415:1423	5055904	1	True				
ANR	5056044	ParameterType	ut64		5055904	0					
ANR	5056045	Identifier	from		5055904	1					
ANR	5056046	Parameter	const ut8 * buf	52:53:1426:1439	5055904	2	True				
ANR	5056047	ParameterType	const ut8 *		5055904	0					
ANR	5056048	Identifier	buf		5055904	1					
ANR	5056049	Parameter	int len	52:69:1442:1448	5055904	3	True				
ANR	5056050	ParameterType	int		5055904	0					
ANR	5056051	Identifier	len		5055904	1					
ANR	5056052	CFGEntryNode	ENTRY		5055904		True				
ANR	5056053	CFGExitNode	EXIT		5055904		True				
ANR	5056054	Symbol	buf		5055904						
ANR	5056055	Symbol	* buf		5055904						
ANR	5056056	Symbol	s		5055904						
ANR	5056057	Symbol	memcmp		5055904						
ANR	5056058	Symbol	len		5055904						
ANR	5056059	Symbol	* k		5055904						
ANR	5056060	Symbol	index		5055904						
ANR	5056061	Symbol	i		5055904						
ANR	5056062	Symbol	from		5055904						
ANR	5056063	Symbol	k		5055904						
ANR	5056064	Symbol	versionmarker		5055904						
ANR	5056065	Symbol	check_rsa_fields		5055904						
