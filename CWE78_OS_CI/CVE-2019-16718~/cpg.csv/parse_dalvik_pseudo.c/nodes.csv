command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5541159	File	data/converged/CVE-2019-16718~_radare2/parse_dalvik_pseudo.c								
ANR	5541160	Function	replace	13:0:214:7364							
ANR	5541161	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5541160	0					
ANR	5541162	CompoundStatement		13:63:277:7364	5541160	0					
ANR	5541163	IdentifierDeclStatement	"int i , j , k ;"	14:1:280:289	5541160	0	True				
ANR	5541164	IdentifierDecl	i		5541160	0					
ANR	5541165	IdentifierDeclType	int		5541160	0					
ANR	5541166	Identifier	i		5541160	1					
ANR	5541167	IdentifierDecl	j		5541160	1					
ANR	5541168	IdentifierDeclType	int		5541160	0					
ANR	5541169	Identifier	j		5541160	1					
ANR	5541170	IdentifierDecl	k		5541160	2					
ANR	5541171	IdentifierDeclType	int		5541160	0					
ANR	5541172	Identifier	k		5541160	1					
ANR	5541173	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""rsub-int"" , ""1 = 2 - 3"" } , { ""float-to-double"" , ""1 = (double)(float) 2"" } , { ""float-to-long"" , ""1 = (long)(float) 2"" } , { ""float-to-int"" , ""1 = (int)(float) 2"" } , { ""long-to-float"" , ""1 = (float)(long) 2"" } , { ""long-to-int"" , ""1 = (int)(long) 2"" } , { ""long-to-double"" , ""1 = (double) 2"" } , { ""double-to-long"" , ""1 = (long) 2"" } , { ""double-to-int"" , ""1 = (int) 2"" } , { ""int-to-double"" , ""1 = (double) 2"" } , { ""int-to-long"" , ""1 = (long) 2"" } , { ""int-to-byte"" , ""1 = (byte) 2"" } , { ""aget-byte"" , ""1 = (byte) 2[3]"" } , { ""aget-short"" , ""1 = (short) 2[3]"" } , { ""aget-object"" , ""1 = (object) 2[3]"" } , { ""sput-wide"" , ""1 = 2"" } , { ""sput-object"" , ""1 = 2"" } , { ""add-long"" , ""1 = 2 + 3"" } , { ""add-double"" , ""1 = 2 + 3"" } , { ""mul-long"" , ""1 = 2 * 3"" } , { ""const-string/jumbo"" , ""1 = (jumbo-string) 2"" } , { ""const-string"" , ""1 = (string) 2"" } , { ""const-wide"" , ""1 = (wide) 2"" } , { ""const/4"" , ""1 = (wide) 2"" } , { ""cmp-int"" , ""1 = (2 == 3)"" } , { ""cmp-long"" , ""1 = (2 == 3)"" } , { ""cmpl-double"" , ""1 = (double)(2 == 3)"" } , { ""cmpl-float"" , ""1 = (float)(2 == 3)"" } , { ""cmpl-int"" , ""1 = (int)(2 == 3)"" } , { ""cmpg-double"" , ""1 = (2 == 3)"" } , { ""cmpg-float"" , ""1 = (2 == 3)"" } , { ""or-int/2addr"" , ""1 |= 2"" } , { ""or-long"" , ""1 |= 2"" } , { ""and-long/2addr"" , ""1 &= (long) 2"" } , { ""and-int"" , ""1 &= (int) 2"" } , { ""and-byte"" , ""1 &= (byte) 2"" } , { ""sub-float/2addr"" , ""1 -= 2"" } , { ""sub-float"" , ""1 = 2 - 3"" } , { ""sub-int"" , ""1 = (int) 2 - 3"" } , { ""sub-long"" , ""1 = (long) 2 - 3"" } , { ""sub-long/2addr"" , ""1 -= (long) 2"" } , { ""sub-int/2addr"" , ""1 -= 2"" } , { ""move"" , ""1 = 2"" } , { ""move/16"" , ""1 = 2"" } , { ""move-object"" , ""1 = (object) 2"" } , { ""move-object/16"" , ""1 = (object) 2"" } , { ""move-object/from16"" , ""1 = (object) 2"" } , { ""move-wide/from16"" , ""1 = (wide) 2"" } , { ""array-length"" , ""1 = Array.length (2)"" } , { ""new-array"" , ""1 = new array (2, 3)"" } , { ""new-instance"" , ""1 = new 2"" } , { ""shr-long/2addr"" , ""1 >>= 2"" } , { ""shr-long"" , ""1 = (long) 2 >> 3"" } , { ""shr-int"" , ""1 = (int) 2 >> 3"" } , { ""ushr-int"" , ""1 = (int) 2 >>> 3"" } , { ""ushr-int/2addr"" , ""1 >>>= 2"" } , { ""ushr-long"" , ""1 = (long) 2 >>> 3"" } , { ""ushl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int"" , ""1 = (int) 2 << 3"" } , { ""shl-long"" , ""1 = (long) 2 << 3"" } , { ""move/from16"" , ""1 = 2"" } , { ""move-exception"" , ""1 = exception"" } , { ""move-result"" , ""1 = result"" } , { ""move-result-wide"" , ""1 = (wide) result"" } , { ""move-result-object"" , ""1 = (object) result"" } , { ""const-wide/high16"" , ""1 = 2"" } , { ""const/16"" , ""1 = 2"" } , { ""const-wide/16"" , ""1 = 2"" } , { ""const-wide/32"" , ""1 = 2"" } , { ""const-class"" , ""1 = (class) 2"" } , { ""const/high16"" , ""1 = 2"" } , { ""const"" , ""1 = 2"" } , { ""rem-long"" , ""1 = (long) 2 % 3"" } , { ""rem-double"" , ""1 = (double) 2 % 3"" } , { ""rem-float"" , ""1 = (float) 2 % 3"" } , { ""rem-long/2addr"" , ""1 %= 2"" } , { ""rem-float/2addr"" , ""1 %= (float) 2"" } , { ""rem-double/2addr"" , ""1 %= (double) 2"" } , { ""instance-of"" , ""1 = insteanceof (2) == 3"" } , { ""aput"" , ""2[3] = 1"" } , { ""aput-byte"" , ""2[3] = (byte) 1"" } , { ""aput-short"" , ""2[3] = (short) 1"" } , { ""aput-object"" , ""2[3] = (object) 1"" } , { ""aput-wide"" , ""2[3] = (wide) 1"" } , { ""aput-char"" , ""2[3] = (char) 1"" } , { ""aput-boolean"" , ""2[3] = (bool) 1"" } , { ""aget"" , ""1 = 2[3]"" } , { ""aget-wide"" , ""1 = (wide) 2[3]"" } , { ""aget-char"" , ""1 = (char) 2[3]"" } , { ""aget-boolean"" , ""1 = (boolean) 2[3]"" } , { ""sget"" , ""1 = 2"" } , { ""sget-char"" , ""1 = (char) 2"" } , { ""sget-short"" , ""1 = (short) 2"" } , { ""sget-boolean"" , ""1 = (bool) 2"" } , { ""sget-object"" , ""1 = (object) 2"" } , { ""iput"" , ""2[3] = 1"" } , { ""iput-object"" , ""2[3] = (object) 1"" } , { ""iput-byte"" , ""2[3] = (byte) 1"" } , { ""iput-char"" , ""2[3] = (char) 1"" } , { ""iput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-char"" , ""2[3] = (char) 1"" } , { ""iput-int"" , ""2[3] = (int) 1"" } , { ""iget"" , ""1 = 2[3]"" } , { ""sget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-char"" , ""1 = (char) 2 [3]"" } , { ""iget-short"" , ""1 = (short) 2 [3]"" } , { ""iget-wide"" , ""1 = (wide) 2 [3]"" } , { ""iget-object"" , ""1 = (2) 3"" } , { ""iget-boolean"" , ""1 = (bool) 2 [3]"" } , { ""+iget-wide-volatile"" , ""1 = (wide-volatile) 2 [3]"" } , { ""if-eq"" , ""if (1 == 2) goto 3"" } , { ""if-lt"" , ""if (1 < 2) goto 3"" } , { ""if-ne"" , ""if (1 != 2) goto 3"" } , { ""if-eqz"" , ""if (!1) goto 2"" } , { ""if-ge"" , ""if (1 > zero) goto 2"" } , { ""if-le"" , ""if (1 <= 2) goto 3"" } , { ""if-gtz"" , ""if (1 > 0) goto 2"" } , { ""filled-new-array"" , ""1 = new Array(2)"" } , { ""neg-long"" , ""1 = -2"" } , { ""neg-double"" , ""1 = -2"" } , { ""neg-float"" , ""1 = -2"" } , { ""not-int"" , ""1 = !2"" } , { ""packed-switch"" , ""switch 2"" } , { ""sparse-switch"" , ""switch 2"" } , { ""invoke-direct"" , ""call 2 1"" } , { ""invoke-direct/range"" , ""call 2 1"" } , { ""invoke-interface"" , ""call 2 1"" } , { ""invoke-static"" , ""call 2 1"" } , { ""invoke-super"" , ""call super 2 1"" } , { ""invoke-super/range"" , ""call super 2 1"" } , { ""invoke-polymorphic"" , ""call polymorphic 2 1"" } , { ""invoke-virtual/range"" , ""call 2 1"" } , { ""invoke-virtual"" , ""call 2 1"" } , { ""+invoke-virtual-quick"" , ""call 2 1"" } , { ""+invoke-interface/range"" , ""call 2 1"" } , { ""invoke-interface/range"" , ""call 2 1"" } , { ""div-float/2addr"" , ""1 /= (float) 2"" } , { ""div-double/2addr"" , ""1 /= (double) 2"" } , { ""div-double"" , ""1 = (double) 2 / 3"" } , { ""div-float"" , ""1 = 2 / 3"" } , { ""div-int/lit8"" , ""1 = 2 / 3"" } , { ""div-int/lit16"" , ""1 = 2 / 3"" } , { ""div-int/2addr"" , ""1 /= 2"" } , { ""div-int"" , ""1 = (int)(2 / 3)"" } , { ""goto/16"" , ""goto 1"" } , { ""goto/32"" , ""goto 1"" } , { ""or-int"" , ""1 = (int)(2 | 3)"" } , { ""xor-int"" , ""1 = (int)(2 ^ 3)"" } , { ""xor-int/2addr"" , ""1 ^= 2"" } , { ""xor-byte"" , ""1 = (byte)(2 ^ 3)"" } , { ""xor-short"" , ""1 = (short)(2 ^ 3)"" } , { ""sub-int"" , ""1 = (int)(2 - 3)"" } , { ""if-nez"" , ""if (1) goto 2"" } , { ""if-ltz"" , ""if (1 <=) goto 2"" } , { ""mul-int"" , ""1 = (int)(2 * 3)"" } , { ""mul-int/lit8"" , ""1 = (2 * 3)"" } , { ""check-cast"" , ""if (1 instanceof 2)"" } , { ""add-int"" , ""1 = (int)(2 + 3)"" } , { ""add-int/lit8"" , ""1 = 2 + 3"" } , { ""add-int/lit16"" , ""1 = 2 + 3"" } , { ""add-int/2addr"" , ""1 += 2"" } , { ""add-double"" , ""1 = (double)(2 + 3)"" } , { ""add-double/2addr"" , ""1 += (double)2"" } , { ""mul-float/2addr"" , ""1 *= 2"" } , { ""mul-float"" , ""1 = 2 * 3"" } , { ""xor-long"" , ""1 = (long)(2 ^ 3)"" } , { ""mul-double"" , ""1 = 2 * 3"" } , { ""move-wide"" , ""1 = 2"" } , { ""move-wide/16"" , ""1 = 2"" } , { ""return-wide"" , ""return (wide) 1"" } , { ""return-object"" , ""return (object) 1"" } , { NULL } } ;"	15:1:292:6716	5541160	1	True				
ANR	5541174	IdentifierDecl	"ops [ ] = { { ""rsub-int"" , ""1 = 2 - 3"" } , { ""float-to-double"" , ""1 = (double)(float) 2"" } , { ""float-to-long"" , ""1 = (long)(float) 2"" } , { ""float-to-int"" , ""1 = (int)(float) 2"" } , { ""long-to-float"" , ""1 = (float)(long) 2"" } , { ""long-to-int"" , ""1 = (int)(long) 2"" } , { ""long-to-double"" , ""1 = (double) 2"" } , { ""double-to-long"" , ""1 = (long) 2"" } , { ""double-to-int"" , ""1 = (int) 2"" } , { ""int-to-double"" , ""1 = (double) 2"" } , { ""int-to-long"" , ""1 = (long) 2"" } , { ""int-to-byte"" , ""1 = (byte) 2"" } , { ""aget-byte"" , ""1 = (byte) 2[3]"" } , { ""aget-short"" , ""1 = (short) 2[3]"" } , { ""aget-object"" , ""1 = (object) 2[3]"" } , { ""sput-wide"" , ""1 = 2"" } , { ""sput-object"" , ""1 = 2"" } , { ""add-long"" , ""1 = 2 + 3"" } , { ""add-double"" , ""1 = 2 + 3"" } , { ""mul-long"" , ""1 = 2 * 3"" } , { ""const-string/jumbo"" , ""1 = (jumbo-string) 2"" } , { ""const-string"" , ""1 = (string) 2"" } , { ""const-wide"" , ""1 = (wide) 2"" } , { ""const/4"" , ""1 = (wide) 2"" } , { ""cmp-int"" , ""1 = (2 == 3)"" } , { ""cmp-long"" , ""1 = (2 == 3)"" } , { ""cmpl-double"" , ""1 = (double)(2 == 3)"" } , { ""cmpl-float"" , ""1 = (float)(2 == 3)"" } , { ""cmpl-int"" , ""1 = (int)(2 == 3)"" } , { ""cmpg-double"" , ""1 = (2 == 3)"" } , { ""cmpg-float"" , ""1 = (2 == 3)"" } , { ""or-int/2addr"" , ""1 |= 2"" } , { ""or-long"" , ""1 |= 2"" } , { ""and-long/2addr"" , ""1 &= (long) 2"" } , { ""and-int"" , ""1 &= (int) 2"" } , { ""and-byte"" , ""1 &= (byte) 2"" } , { ""sub-float/2addr"" , ""1 -= 2"" } , { ""sub-float"" , ""1 = 2 - 3"" } , { ""sub-int"" , ""1 = (int) 2 - 3"" } , { ""sub-long"" , ""1 = (long) 2 - 3"" } , { ""sub-long/2addr"" , ""1 -= (long) 2"" } , { ""sub-int/2addr"" , ""1 -= 2"" } , { ""move"" , ""1 = 2"" } , { ""move/16"" , ""1 = 2"" } , { ""move-object"" , ""1 = (object) 2"" } , { ""move-object/16"" , ""1 = (object) 2"" } , { ""move-object/from16"" , ""1 = (object) 2"" } , { ""move-wide/from16"" , ""1 = (wide) 2"" } , { ""array-length"" , ""1 = Array.length (2)"" } , { ""new-array"" , ""1 = new array (2, 3)"" } , { ""new-instance"" , ""1 = new 2"" } , { ""shr-long/2addr"" , ""1 >>= 2"" } , { ""shr-long"" , ""1 = (long) 2 >> 3"" } , { ""shr-int"" , ""1 = (int) 2 >> 3"" } , { ""ushr-int"" , ""1 = (int) 2 >>> 3"" } , { ""ushr-int/2addr"" , ""1 >>>= 2"" } , { ""ushr-long"" , ""1 = (long) 2 >>> 3"" } , { ""ushl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int"" , ""1 = (int) 2 << 3"" } , { ""shl-long"" , ""1 = (long) 2 << 3"" } , { ""move/from16"" , ""1 = 2"" } , { ""move-exception"" , ""1 = exception"" } , { ""move-result"" , ""1 = result"" } , { ""move-result-wide"" , ""1 = (wide) result"" } , { ""move-result-object"" , ""1 = (object) result"" } , { ""const-wide/high16"" , ""1 = 2"" } , { ""const/16"" , ""1 = 2"" } , { ""const-wide/16"" , ""1 = 2"" } , { ""const-wide/32"" , ""1 = 2"" } , { ""const-class"" , ""1 = (class) 2"" } , { ""const/high16"" , ""1 = 2"" } , { ""const"" , ""1 = 2"" } , { ""rem-long"" , ""1 = (long) 2 % 3"" } , { ""rem-double"" , ""1 = (double) 2 % 3"" } , { ""rem-float"" , ""1 = (float) 2 % 3"" } , { ""rem-long/2addr"" , ""1 %= 2"" } , { ""rem-float/2addr"" , ""1 %= (float) 2"" } , { ""rem-double/2addr"" , ""1 %= (double) 2"" } , { ""instance-of"" , ""1 = insteanceof (2) == 3"" } , { ""aput"" , ""2[3] = 1"" } , { ""aput-byte"" , ""2[3] = (byte) 1"" } , { ""aput-short"" , ""2[3] = (short) 1"" } , { ""aput-object"" , ""2[3] = (object) 1"" } , { ""aput-wide"" , ""2[3] = (wide) 1"" } , { ""aput-char"" , ""2[3] = (char) 1"" } , { ""aput-boolean"" , ""2[3] = (bool) 1"" } , { ""aget"" , ""1 = 2[3]"" } , { ""aget-wide"" , ""1 = (wide) 2[3]"" } , { ""aget-char"" , ""1 = (char) 2[3]"" } , { ""aget-boolean"" , ""1 = (boolean) 2[3]"" } , { ""sget"" , ""1 = 2"" } , { ""sget-char"" , ""1 = (char) 2"" } , { ""sget-short"" , ""1 = (short) 2"" } , { ""sget-boolean"" , ""1 = (bool) 2"" } , { ""sget-object"" , ""1 = (object) 2"" } , { ""iput"" , ""2[3] = 1"" } , { ""iput-object"" , ""2[3] = (object) 1"" } , { ""iput-byte"" , ""2[3] = (byte) 1"" } , { ""iput-char"" , ""2[3] = (char) 1"" } , { ""iput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-char"" , ""2[3] = (char) 1"" } , { ""iput-int"" , ""2[3] = (int) 1"" } , { ""iget"" , ""1 = 2[3]"" } , { ""sget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-char"" , ""1 = (char) 2 [3]"" } , { ""iget-short"" , ""1 = (short) 2 [3]"" } , { ""iget-wide"" , ""1 = (wide) 2 [3]"" } , { ""iget-object"" , ""1 = (2) 3"" } , { ""iget-boolean"" , ""1 = (bool) 2 [3]"" } , { ""+iget-wide-volatile"" , ""1 = (wide-volatile) 2 [3]"" } , { ""if-eq"" , ""if (1 == 2) goto 3"" } , { ""if-lt"" , ""if (1 < 2) goto 3"" } , { ""if-ne"" , ""if (1 != 2) goto 3"" } , { ""if-eqz"" , ""if (!1) goto 2"" } , { ""if-ge"" , ""if (1 > zero) goto 2"" } , { ""if-le"" , ""if (1 <= 2) goto 3"" } , { ""if-gtz"" , ""if (1 > 0) goto 2"" } , { ""filled-new-array"" , ""1 = new Array(2)"" } , { ""neg-long"" , ""1 = -2"" } , { ""neg-double"" , ""1 = -2"" } , { ""neg-float"" , ""1 = -2"" } , { ""not-int"" , ""1 = !2"" } , { ""packed-switch"" , ""switch 2"" } , { ""sparse-switch"" , ""switch 2"" } , { ""invoke-direct"" , ""call 2 1"" } , { ""invoke-direct/range"" , ""call 2 1"" } , { ""invoke-interface"" , ""call 2 1"" } , { ""invoke-static"" , ""call 2 1"" } , { ""invoke-super"" , ""call super 2 1"" } , { ""invoke-super/range"" , ""call super 2 1"" } , { ""invoke-polymorphic"" , ""call polymorphic 2 1"" } , { ""invoke-virtual/range"" , ""call 2 1"" } , { ""invoke-virtual"" , ""call 2 1"" } , { ""+invoke-virtual-quick"" , ""call 2 1"" } , { ""+invoke-interface/range"" , ""call 2 1"" } , { ""invoke-interface/range"" , ""call 2 1"" } , { ""div-float/2addr"" , ""1 /= (float) 2"" } , { ""div-double/2addr"" , ""1 /= (double) 2"" } , { ""div-double"" , ""1 = (double) 2 / 3"" } , { ""div-float"" , ""1 = 2 / 3"" } , { ""div-int/lit8"" , ""1 = 2 / 3"" } , { ""div-int/lit16"" , ""1 = 2 / 3"" } , { ""div-int/2addr"" , ""1 /= 2"" } , { ""div-int"" , ""1 = (int)(2 / 3)"" } , { ""goto/16"" , ""goto 1"" } , { ""goto/32"" , ""goto 1"" } , { ""or-int"" , ""1 = (int)(2 | 3)"" } , { ""xor-int"" , ""1 = (int)(2 ^ 3)"" } , { ""xor-int/2addr"" , ""1 ^= 2"" } , { ""xor-byte"" , ""1 = (byte)(2 ^ 3)"" } , { ""xor-short"" , ""1 = (short)(2 ^ 3)"" } , { ""sub-int"" , ""1 = (int)(2 - 3)"" } , { ""if-nez"" , ""if (1) goto 2"" } , { ""if-ltz"" , ""if (1 <=) goto 2"" } , { ""mul-int"" , ""1 = (int)(2 * 3)"" } , { ""mul-int/lit8"" , ""1 = (2 * 3)"" } , { ""check-cast"" , ""if (1 instanceof 2)"" } , { ""add-int"" , ""1 = (int)(2 + 3)"" } , { ""add-int/lit8"" , ""1 = 2 + 3"" } , { ""add-int/lit16"" , ""1 = 2 + 3"" } , { ""add-int/2addr"" , ""1 += 2"" } , { ""add-double"" , ""1 = (double)(2 + 3)"" } , { ""add-double/2addr"" , ""1 += (double)2"" } , { ""mul-float/2addr"" , ""1 *= 2"" } , { ""mul-float"" , ""1 = 2 * 3"" } , { ""xor-long"" , ""1 = (long)(2 ^ 3)"" } , { ""mul-double"" , ""1 = 2 * 3"" } , { ""move-wide"" , ""1 = 2"" } , { ""move-wide/16"" , ""1 = 2"" } , { ""return-wide"" , ""return (wide) 1"" } , { ""return-object"" , ""return (object) 1"" } , { NULL } }"		5541160	0					
ANR	5541175	IdentifierDeclType	 [ ]		5541160	0					
ANR	5541176	Identifier	ops		5541160	1					
ANR	5541177	AssignmentExpression	"ops [ ] = { { ""rsub-int"" , ""1 = 2 - 3"" } , { ""float-to-double"" , ""1 = (double)(float) 2"" } , { ""float-to-long"" , ""1 = (long)(float) 2"" } , { ""float-to-int"" , ""1 = (int)(float) 2"" } , { ""long-to-float"" , ""1 = (float)(long) 2"" } , { ""long-to-int"" , ""1 = (int)(long) 2"" } , { ""long-to-double"" , ""1 = (double) 2"" } , { ""double-to-long"" , ""1 = (long) 2"" } , { ""double-to-int"" , ""1 = (int) 2"" } , { ""int-to-double"" , ""1 = (double) 2"" } , { ""int-to-long"" , ""1 = (long) 2"" } , { ""int-to-byte"" , ""1 = (byte) 2"" } , { ""aget-byte"" , ""1 = (byte) 2[3]"" } , { ""aget-short"" , ""1 = (short) 2[3]"" } , { ""aget-object"" , ""1 = (object) 2[3]"" } , { ""sput-wide"" , ""1 = 2"" } , { ""sput-object"" , ""1 = 2"" } , { ""add-long"" , ""1 = 2 + 3"" } , { ""add-double"" , ""1 = 2 + 3"" } , { ""mul-long"" , ""1 = 2 * 3"" } , { ""const-string/jumbo"" , ""1 = (jumbo-string) 2"" } , { ""const-string"" , ""1 = (string) 2"" } , { ""const-wide"" , ""1 = (wide) 2"" } , { ""const/4"" , ""1 = (wide) 2"" } , { ""cmp-int"" , ""1 = (2 == 3)"" } , { ""cmp-long"" , ""1 = (2 == 3)"" } , { ""cmpl-double"" , ""1 = (double)(2 == 3)"" } , { ""cmpl-float"" , ""1 = (float)(2 == 3)"" } , { ""cmpl-int"" , ""1 = (int)(2 == 3)"" } , { ""cmpg-double"" , ""1 = (2 == 3)"" } , { ""cmpg-float"" , ""1 = (2 == 3)"" } , { ""or-int/2addr"" , ""1 |= 2"" } , { ""or-long"" , ""1 |= 2"" } , { ""and-long/2addr"" , ""1 &= (long) 2"" } , { ""and-int"" , ""1 &= (int) 2"" } , { ""and-byte"" , ""1 &= (byte) 2"" } , { ""sub-float/2addr"" , ""1 -= 2"" } , { ""sub-float"" , ""1 = 2 - 3"" } , { ""sub-int"" , ""1 = (int) 2 - 3"" } , { ""sub-long"" , ""1 = (long) 2 - 3"" } , { ""sub-long/2addr"" , ""1 -= (long) 2"" } , { ""sub-int/2addr"" , ""1 -= 2"" } , { ""move"" , ""1 = 2"" } , { ""move/16"" , ""1 = 2"" } , { ""move-object"" , ""1 = (object) 2"" } , { ""move-object/16"" , ""1 = (object) 2"" } , { ""move-object/from16"" , ""1 = (object) 2"" } , { ""move-wide/from16"" , ""1 = (wide) 2"" } , { ""array-length"" , ""1 = Array.length (2)"" } , { ""new-array"" , ""1 = new array (2, 3)"" } , { ""new-instance"" , ""1 = new 2"" } , { ""shr-long/2addr"" , ""1 >>= 2"" } , { ""shr-long"" , ""1 = (long) 2 >> 3"" } , { ""shr-int"" , ""1 = (int) 2 >> 3"" } , { ""ushr-int"" , ""1 = (int) 2 >>> 3"" } , { ""ushr-int/2addr"" , ""1 >>>= 2"" } , { ""ushr-long"" , ""1 = (long) 2 >>> 3"" } , { ""ushl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int/2addr"" , ""1 <<<= 2"" } , { ""shl-int"" , ""1 = (int) 2 << 3"" } , { ""shl-long"" , ""1 = (long) 2 << 3"" } , { ""move/from16"" , ""1 = 2"" } , { ""move-exception"" , ""1 = exception"" } , { ""move-result"" , ""1 = result"" } , { ""move-result-wide"" , ""1 = (wide) result"" } , { ""move-result-object"" , ""1 = (object) result"" } , { ""const-wide/high16"" , ""1 = 2"" } , { ""const/16"" , ""1 = 2"" } , { ""const-wide/16"" , ""1 = 2"" } , { ""const-wide/32"" , ""1 = 2"" } , { ""const-class"" , ""1 = (class) 2"" } , { ""const/high16"" , ""1 = 2"" } , { ""const"" , ""1 = 2"" } , { ""rem-long"" , ""1 = (long) 2 % 3"" } , { ""rem-double"" , ""1 = (double) 2 % 3"" } , { ""rem-float"" , ""1 = (float) 2 % 3"" } , { ""rem-long/2addr"" , ""1 %= 2"" } , { ""rem-float/2addr"" , ""1 %= (float) 2"" } , { ""rem-double/2addr"" , ""1 %= (double) 2"" } , { ""instance-of"" , ""1 = insteanceof (2) == 3"" } , { ""aput"" , ""2[3] = 1"" } , { ""aput-byte"" , ""2[3] = (byte) 1"" } , { ""aput-short"" , ""2[3] = (short) 1"" } , { ""aput-object"" , ""2[3] = (object) 1"" } , { ""aput-wide"" , ""2[3] = (wide) 1"" } , { ""aput-char"" , ""2[3] = (char) 1"" } , { ""aput-boolean"" , ""2[3] = (bool) 1"" } , { ""aget"" , ""1 = 2[3]"" } , { ""aget-wide"" , ""1 = (wide) 2[3]"" } , { ""aget-char"" , ""1 = (char) 2[3]"" } , { ""aget-boolean"" , ""1 = (boolean) 2[3]"" } , { ""sget"" , ""1 = 2"" } , { ""sget-char"" , ""1 = (char) 2"" } , { ""sget-short"" , ""1 = (short) 2"" } , { ""sget-boolean"" , ""1 = (bool) 2"" } , { ""sget-object"" , ""1 = (object) 2"" } , { ""iput"" , ""2[3] = 1"" } , { ""iput-object"" , ""2[3] = (object) 1"" } , { ""iput-byte"" , ""2[3] = (byte) 1"" } , { ""iput-char"" , ""2[3] = (char) 1"" } , { ""iput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-boolean"" , ""2[3] = (bool) 1"" } , { ""sput-char"" , ""2[3] = (char) 1"" } , { ""iput-int"" , ""2[3] = (int) 1"" } , { ""iget"" , ""1 = 2[3]"" } , { ""sget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-byte"" , ""1 = (byte) 2 [3]"" } , { ""iget-char"" , ""1 = (char) 2 [3]"" } , { ""iget-short"" , ""1 = (short) 2 [3]"" } , { ""iget-wide"" , ""1 = (wide) 2 [3]"" } , { ""iget-object"" , ""1 = (2) 3"" } , { ""iget-boolean"" , ""1 = (bool) 2 [3]"" } , { ""+iget-wide-volatile"" , ""1 = (wide-volatile) 2 [3]"" } , { ""if-eq"" , ""if (1 == 2) goto 3"" } , { ""if-lt"" , ""if (1 < 2) goto 3"" } , { ""if-ne"" , ""if (1 != 2) goto 3"" } , { ""if-eqz"" , ""if (!1) goto 2"" } , { ""if-ge"" , ""if (1 > zero) goto 2"" } , { ""if-le"" , ""if (1 <= 2) goto 3"" } , { ""if-gtz"" , ""if (1 > 0) goto 2"" } , { ""filled-new-array"" , ""1 = new Array(2)"" } , { ""neg-long"" , ""1 = -2"" } , { ""neg-double"" , ""1 = -2"" } , { ""neg-float"" , ""1 = -2"" } , { ""not-int"" , ""1 = !2"" } , { ""packed-switch"" , ""switch 2"" } , { ""sparse-switch"" , ""switch 2"" } , { ""invoke-direct"" , ""call 2 1"" } , { ""invoke-direct/range"" , ""call 2 1"" } , { ""invoke-interface"" , ""call 2 1"" } , { ""invoke-static"" , ""call 2 1"" } , { ""invoke-super"" , ""call super 2 1"" } , { ""invoke-super/range"" , ""call super 2 1"" } , { ""invoke-polymorphic"" , ""call polymorphic 2 1"" } , { ""invoke-virtual/range"" , ""call 2 1"" } , { ""invoke-virtual"" , ""call 2 1"" } , { ""+invoke-virtual-quick"" , ""call 2 1"" } , { ""+invoke-interface/range"" , ""call 2 1"" } , { ""invoke-interface/range"" , ""call 2 1"" } , { ""div-float/2addr"" , ""1 /= (float) 2"" } , { ""div-double/2addr"" , ""1 /= (double) 2"" } , { ""div-double"" , ""1 = (double) 2 / 3"" } , { ""div-float"" , ""1 = 2 / 3"" } , { ""div-int/lit8"" , ""1 = 2 / 3"" } , { ""div-int/lit16"" , ""1 = 2 / 3"" } , { ""div-int/2addr"" , ""1 /= 2"" } , { ""div-int"" , ""1 = (int)(2 / 3)"" } , { ""goto/16"" , ""goto 1"" } , { ""goto/32"" , ""goto 1"" } , { ""or-int"" , ""1 = (int)(2 | 3)"" } , { ""xor-int"" , ""1 = (int)(2 ^ 3)"" } , { ""xor-int/2addr"" , ""1 ^= 2"" } , { ""xor-byte"" , ""1 = (byte)(2 ^ 3)"" } , { ""xor-short"" , ""1 = (short)(2 ^ 3)"" } , { ""sub-int"" , ""1 = (int)(2 - 3)"" } , { ""if-nez"" , ""if (1) goto 2"" } , { ""if-ltz"" , ""if (1 <=) goto 2"" } , { ""mul-int"" , ""1 = (int)(2 * 3)"" } , { ""mul-int/lit8"" , ""1 = (2 * 3)"" } , { ""check-cast"" , ""if (1 instanceof 2)"" } , { ""add-int"" , ""1 = (int)(2 + 3)"" } , { ""add-int/lit8"" , ""1 = 2 + 3"" } , { ""add-int/lit16"" , ""1 = 2 + 3"" } , { ""add-int/2addr"" , ""1 += 2"" } , { ""add-double"" , ""1 = (double)(2 + 3)"" } , { ""add-double/2addr"" , ""1 += (double)2"" } , { ""mul-float/2addr"" , ""1 *= 2"" } , { ""mul-float"" , ""1 = 2 * 3"" } , { ""xor-long"" , ""1 = (long)(2 ^ 3)"" } , { ""mul-double"" , ""1 = 2 * 3"" } , { ""move-wide"" , ""1 = 2"" } , { ""move-wide/16"" , ""1 = 2"" } , { ""return-wide"" , ""return (wide) 1"" } , { ""return-object"" , ""return (object) 1"" } , { NULL } }"		5541160	2		=			
ANR	5541178	Identifier	ops		5541160	0					
ANR	5541179	InitializerList	"""rsub-int"""		5541160	1					
ANR	5541180	InitializerList	"""rsub-int"""		5541160	0					
ANR	5541181	PrimaryExpression	"""rsub-int"""		5541160	0					
ANR	5541182	PrimaryExpression	"""1 = 2 - 3"""		5541160	1					
ANR	5541183	InitializerList	"""float-to-double"""		5541160	1					
ANR	5541184	PrimaryExpression	"""float-to-double"""		5541160	0					
ANR	5541185	PrimaryExpression	"""1 = (double)(float) 2"""		5541160	1					
ANR	5541186	InitializerList	"""float-to-long"""		5541160	2					
ANR	5541187	PrimaryExpression	"""float-to-long"""		5541160	0					
ANR	5541188	PrimaryExpression	"""1 = (long)(float) 2"""		5541160	1					
ANR	5541189	InitializerList	"""float-to-int"""		5541160	3					
ANR	5541190	PrimaryExpression	"""float-to-int"""		5541160	0					
ANR	5541191	PrimaryExpression	"""1 = (int)(float) 2"""		5541160	1					
ANR	5541192	InitializerList	"""long-to-float"""		5541160	4					
ANR	5541193	PrimaryExpression	"""long-to-float"""		5541160	0					
ANR	5541194	PrimaryExpression	"""1 = (float)(long) 2"""		5541160	1					
ANR	5541195	InitializerList	"""long-to-int"""		5541160	5					
ANR	5541196	PrimaryExpression	"""long-to-int"""		5541160	0					
ANR	5541197	PrimaryExpression	"""1 = (int)(long) 2"""		5541160	1					
ANR	5541198	InitializerList	"""long-to-double"""		5541160	6					
ANR	5541199	PrimaryExpression	"""long-to-double"""		5541160	0					
ANR	5541200	PrimaryExpression	"""1 = (double) 2"""		5541160	1					
ANR	5541201	InitializerList	"""double-to-long"""		5541160	7					
ANR	5541202	PrimaryExpression	"""double-to-long"""		5541160	0					
ANR	5541203	PrimaryExpression	"""1 = (long) 2"""		5541160	1					
ANR	5541204	InitializerList	"""double-to-int"""		5541160	8					
ANR	5541205	PrimaryExpression	"""double-to-int"""		5541160	0					
ANR	5541206	PrimaryExpression	"""1 = (int) 2"""		5541160	1					
ANR	5541207	InitializerList	"""int-to-double"""		5541160	9					
ANR	5541208	PrimaryExpression	"""int-to-double"""		5541160	0					
ANR	5541209	PrimaryExpression	"""1 = (double) 2"""		5541160	1					
ANR	5541210	InitializerList	"""int-to-long"""		5541160	10					
ANR	5541211	PrimaryExpression	"""int-to-long"""		5541160	0					
ANR	5541212	PrimaryExpression	"""1 = (long) 2"""		5541160	1					
ANR	5541213	InitializerList	"""int-to-byte"""		5541160	11					
ANR	5541214	PrimaryExpression	"""int-to-byte"""		5541160	0					
ANR	5541215	PrimaryExpression	"""1 = (byte) 2"""		5541160	1					
ANR	5541216	InitializerList	"""aget-byte"""		5541160	12					
ANR	5541217	PrimaryExpression	"""aget-byte"""		5541160	0					
ANR	5541218	PrimaryExpression	"""1 = (byte) 2[3]"""		5541160	1					
ANR	5541219	InitializerList	"""aget-short"""		5541160	13					
ANR	5541220	PrimaryExpression	"""aget-short"""		5541160	0					
ANR	5541221	PrimaryExpression	"""1 = (short) 2[3]"""		5541160	1					
ANR	5541222	InitializerList	"""aget-object"""		5541160	14					
ANR	5541223	PrimaryExpression	"""aget-object"""		5541160	0					
ANR	5541224	PrimaryExpression	"""1 = (object) 2[3]"""		5541160	1					
ANR	5541225	InitializerList	"""sput-wide"""		5541160	15					
ANR	5541226	PrimaryExpression	"""sput-wide"""		5541160	0					
ANR	5541227	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541228	InitializerList	"""sput-object"""		5541160	16					
ANR	5541229	PrimaryExpression	"""sput-object"""		5541160	0					
ANR	5541230	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541231	InitializerList	"""add-long"""		5541160	17					
ANR	5541232	PrimaryExpression	"""add-long"""		5541160	0					
ANR	5541233	PrimaryExpression	"""1 = 2 + 3"""		5541160	1					
ANR	5541234	InitializerList	"""add-double"""		5541160	18					
ANR	5541235	PrimaryExpression	"""add-double"""		5541160	0					
ANR	5541236	PrimaryExpression	"""1 = 2 + 3"""		5541160	1					
ANR	5541237	InitializerList	"""mul-long"""		5541160	19					
ANR	5541238	PrimaryExpression	"""mul-long"""		5541160	0					
ANR	5541239	PrimaryExpression	"""1 = 2 * 3"""		5541160	1					
ANR	5541240	InitializerList	"""const-string/jumbo"""		5541160	20					
ANR	5541241	PrimaryExpression	"""const-string/jumbo"""		5541160	0					
ANR	5541242	PrimaryExpression	"""1 = (jumbo-string) 2"""		5541160	1					
ANR	5541243	InitializerList	"""const-string"""		5541160	21					
ANR	5541244	PrimaryExpression	"""const-string"""		5541160	0					
ANR	5541245	PrimaryExpression	"""1 = (string) 2"""		5541160	1					
ANR	5541246	InitializerList	"""const-wide"""		5541160	22					
ANR	5541247	PrimaryExpression	"""const-wide"""		5541160	0					
ANR	5541248	PrimaryExpression	"""1 = (wide) 2"""		5541160	1					
ANR	5541249	InitializerList	"""const/4"""		5541160	23					
ANR	5541250	PrimaryExpression	"""const/4"""		5541160	0					
ANR	5541251	PrimaryExpression	"""1 = (wide) 2"""		5541160	1					
ANR	5541252	InitializerList	"""cmp-int"""		5541160	24					
ANR	5541253	PrimaryExpression	"""cmp-int"""		5541160	0					
ANR	5541254	PrimaryExpression	"""1 = (2 == 3)"""		5541160	1					
ANR	5541255	InitializerList	"""cmp-long"""		5541160	25					
ANR	5541256	PrimaryExpression	"""cmp-long"""		5541160	0					
ANR	5541257	PrimaryExpression	"""1 = (2 == 3)"""		5541160	1					
ANR	5541258	InitializerList	"""cmpl-double"""		5541160	26					
ANR	5541259	PrimaryExpression	"""cmpl-double"""		5541160	0					
ANR	5541260	PrimaryExpression	"""1 = (double)(2 == 3)"""		5541160	1					
ANR	5541261	InitializerList	"""cmpl-float"""		5541160	27					
ANR	5541262	PrimaryExpression	"""cmpl-float"""		5541160	0					
ANR	5541263	PrimaryExpression	"""1 = (float)(2 == 3)"""		5541160	1					
ANR	5541264	InitializerList	"""cmpl-int"""		5541160	28					
ANR	5541265	PrimaryExpression	"""cmpl-int"""		5541160	0					
ANR	5541266	PrimaryExpression	"""1 = (int)(2 == 3)"""		5541160	1					
ANR	5541267	InitializerList	"""cmpg-double"""		5541160	29					
ANR	5541268	PrimaryExpression	"""cmpg-double"""		5541160	0					
ANR	5541269	PrimaryExpression	"""1 = (2 == 3)"""		5541160	1					
ANR	5541270	InitializerList	"""cmpg-float"""		5541160	30					
ANR	5541271	PrimaryExpression	"""cmpg-float"""		5541160	0					
ANR	5541272	PrimaryExpression	"""1 = (2 == 3)"""		5541160	1					
ANR	5541273	InitializerList	"""or-int/2addr"""		5541160	31					
ANR	5541274	PrimaryExpression	"""or-int/2addr"""		5541160	0					
ANR	5541275	PrimaryExpression	"""1 |= 2"""		5541160	1					
ANR	5541276	InitializerList	"""or-long"""		5541160	32					
ANR	5541277	PrimaryExpression	"""or-long"""		5541160	0					
ANR	5541278	PrimaryExpression	"""1 |= 2"""		5541160	1					
ANR	5541279	InitializerList	"""and-long/2addr"""		5541160	33					
ANR	5541280	PrimaryExpression	"""and-long/2addr"""		5541160	0					
ANR	5541281	PrimaryExpression	"""1 &= (long) 2"""		5541160	1					
ANR	5541282	InitializerList	"""and-int"""		5541160	34					
ANR	5541283	PrimaryExpression	"""and-int"""		5541160	0					
ANR	5541284	PrimaryExpression	"""1 &= (int) 2"""		5541160	1					
ANR	5541285	InitializerList	"""and-byte"""		5541160	35					
ANR	5541286	PrimaryExpression	"""and-byte"""		5541160	0					
ANR	5541287	PrimaryExpression	"""1 &= (byte) 2"""		5541160	1					
ANR	5541288	InitializerList	"""sub-float/2addr"""		5541160	36					
ANR	5541289	PrimaryExpression	"""sub-float/2addr"""		5541160	0					
ANR	5541290	PrimaryExpression	"""1 -= 2"""		5541160	1					
ANR	5541291	InitializerList	"""sub-float"""		5541160	37					
ANR	5541292	PrimaryExpression	"""sub-float"""		5541160	0					
ANR	5541293	PrimaryExpression	"""1 = 2 - 3"""		5541160	1					
ANR	5541294	InitializerList	"""sub-int"""		5541160	38					
ANR	5541295	PrimaryExpression	"""sub-int"""		5541160	0					
ANR	5541296	PrimaryExpression	"""1 = (int) 2 - 3"""		5541160	1					
ANR	5541297	InitializerList	"""sub-long"""		5541160	39					
ANR	5541298	PrimaryExpression	"""sub-long"""		5541160	0					
ANR	5541299	PrimaryExpression	"""1 = (long) 2 - 3"""		5541160	1					
ANR	5541300	InitializerList	"""sub-long/2addr"""		5541160	40					
ANR	5541301	PrimaryExpression	"""sub-long/2addr"""		5541160	0					
ANR	5541302	PrimaryExpression	"""1 -= (long) 2"""		5541160	1					
ANR	5541303	InitializerList	"""sub-int/2addr"""		5541160	41					
ANR	5541304	PrimaryExpression	"""sub-int/2addr"""		5541160	0					
ANR	5541305	PrimaryExpression	"""1 -= 2"""		5541160	1					
ANR	5541306	InitializerList	"""move"""		5541160	42					
ANR	5541307	PrimaryExpression	"""move"""		5541160	0					
ANR	5541308	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541309	InitializerList	"""move/16"""		5541160	43					
ANR	5541310	PrimaryExpression	"""move/16"""		5541160	0					
ANR	5541311	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541312	InitializerList	"""move-object"""		5541160	44					
ANR	5541313	PrimaryExpression	"""move-object"""		5541160	0					
ANR	5541314	PrimaryExpression	"""1 = (object) 2"""		5541160	1					
ANR	5541315	InitializerList	"""move-object/16"""		5541160	45					
ANR	5541316	PrimaryExpression	"""move-object/16"""		5541160	0					
ANR	5541317	PrimaryExpression	"""1 = (object) 2"""		5541160	1					
ANR	5541318	InitializerList	"""move-object/from16"""		5541160	46					
ANR	5541319	PrimaryExpression	"""move-object/from16"""		5541160	0					
ANR	5541320	PrimaryExpression	"""1 = (object) 2"""		5541160	1					
ANR	5541321	InitializerList	"""move-wide/from16"""		5541160	47					
ANR	5541322	PrimaryExpression	"""move-wide/from16"""		5541160	0					
ANR	5541323	PrimaryExpression	"""1 = (wide) 2"""		5541160	1					
ANR	5541324	InitializerList	"""array-length"""		5541160	48					
ANR	5541325	PrimaryExpression	"""array-length"""		5541160	0					
ANR	5541326	PrimaryExpression	"""1 = Array.length (2)"""		5541160	1					
ANR	5541327	InitializerList	"""new-array"""		5541160	49					
ANR	5541328	PrimaryExpression	"""new-array"""		5541160	0					
ANR	5541329	PrimaryExpression	"""1 = new array (2, 3)"""		5541160	1					
ANR	5541330	InitializerList	"""new-instance"""		5541160	50					
ANR	5541331	PrimaryExpression	"""new-instance"""		5541160	0					
ANR	5541332	PrimaryExpression	"""1 = new 2"""		5541160	1					
ANR	5541333	InitializerList	"""shr-long/2addr"""		5541160	51					
ANR	5541334	PrimaryExpression	"""shr-long/2addr"""		5541160	0					
ANR	5541335	PrimaryExpression	"""1 >>= 2"""		5541160	1					
ANR	5541336	InitializerList	"""shr-long"""		5541160	52					
ANR	5541337	PrimaryExpression	"""shr-long"""		5541160	0					
ANR	5541338	PrimaryExpression	"""1 = (long) 2 >> 3"""		5541160	1					
ANR	5541339	InitializerList	"""shr-int"""		5541160	53					
ANR	5541340	PrimaryExpression	"""shr-int"""		5541160	0					
ANR	5541341	PrimaryExpression	"""1 = (int) 2 >> 3"""		5541160	1					
ANR	5541342	InitializerList	"""ushr-int"""		5541160	54					
ANR	5541343	PrimaryExpression	"""ushr-int"""		5541160	0					
ANR	5541344	PrimaryExpression	"""1 = (int) 2 >>> 3"""		5541160	1					
ANR	5541345	InitializerList	"""ushr-int/2addr"""		5541160	55					
ANR	5541346	PrimaryExpression	"""ushr-int/2addr"""		5541160	0					
ANR	5541347	PrimaryExpression	"""1 >>>= 2"""		5541160	1					
ANR	5541348	InitializerList	"""ushr-long"""		5541160	56					
ANR	5541349	PrimaryExpression	"""ushr-long"""		5541160	0					
ANR	5541350	PrimaryExpression	"""1 = (long) 2 >>> 3"""		5541160	1					
ANR	5541351	InitializerList	"""ushl-int/2addr"""		5541160	57					
ANR	5541352	PrimaryExpression	"""ushl-int/2addr"""		5541160	0					
ANR	5541353	PrimaryExpression	"""1 <<<= 2"""		5541160	1					
ANR	5541354	InitializerList	"""shl-int/2addr"""		5541160	58					
ANR	5541355	PrimaryExpression	"""shl-int/2addr"""		5541160	0					
ANR	5541356	PrimaryExpression	"""1 <<<= 2"""		5541160	1					
ANR	5541357	InitializerList	"""shl-int"""		5541160	59					
ANR	5541358	PrimaryExpression	"""shl-int"""		5541160	0					
ANR	5541359	PrimaryExpression	"""1 = (int) 2 << 3"""		5541160	1					
ANR	5541360	InitializerList	"""shl-long"""		5541160	60					
ANR	5541361	PrimaryExpression	"""shl-long"""		5541160	0					
ANR	5541362	PrimaryExpression	"""1 = (long) 2 << 3"""		5541160	1					
ANR	5541363	InitializerList	"""move/from16"""		5541160	61					
ANR	5541364	PrimaryExpression	"""move/from16"""		5541160	0					
ANR	5541365	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541366	InitializerList	"""move-exception"""		5541160	62					
ANR	5541367	PrimaryExpression	"""move-exception"""		5541160	0					
ANR	5541368	PrimaryExpression	"""1 = exception"""		5541160	1					
ANR	5541369	InitializerList	"""move-result"""		5541160	63					
ANR	5541370	PrimaryExpression	"""move-result"""		5541160	0					
ANR	5541371	PrimaryExpression	"""1 = result"""		5541160	1					
ANR	5541372	InitializerList	"""move-result-wide"""		5541160	64					
ANR	5541373	PrimaryExpression	"""move-result-wide"""		5541160	0					
ANR	5541374	PrimaryExpression	"""1 = (wide) result"""		5541160	1					
ANR	5541375	InitializerList	"""move-result-object"""		5541160	65					
ANR	5541376	PrimaryExpression	"""move-result-object"""		5541160	0					
ANR	5541377	PrimaryExpression	"""1 = (object) result"""		5541160	1					
ANR	5541378	InitializerList	"""const-wide/high16"""		5541160	66					
ANR	5541379	PrimaryExpression	"""const-wide/high16"""		5541160	0					
ANR	5541380	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541381	InitializerList	"""const/16"""		5541160	67					
ANR	5541382	PrimaryExpression	"""const/16"""		5541160	0					
ANR	5541383	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541384	InitializerList	"""const-wide/16"""		5541160	68					
ANR	5541385	PrimaryExpression	"""const-wide/16"""		5541160	0					
ANR	5541386	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541387	InitializerList	"""const-wide/32"""		5541160	69					
ANR	5541388	PrimaryExpression	"""const-wide/32"""		5541160	0					
ANR	5541389	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541390	InitializerList	"""const-class"""		5541160	70					
ANR	5541391	PrimaryExpression	"""const-class"""		5541160	0					
ANR	5541392	PrimaryExpression	"""1 = (class) 2"""		5541160	1					
ANR	5541393	InitializerList	"""const/high16"""		5541160	71					
ANR	5541394	PrimaryExpression	"""const/high16"""		5541160	0					
ANR	5541395	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541396	InitializerList	"""const"""		5541160	72					
ANR	5541397	PrimaryExpression	"""const"""		5541160	0					
ANR	5541398	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541399	InitializerList	"""rem-long"""		5541160	73					
ANR	5541400	PrimaryExpression	"""rem-long"""		5541160	0					
ANR	5541401	PrimaryExpression	"""1 = (long) 2 % 3"""		5541160	1					
ANR	5541402	InitializerList	"""rem-double"""		5541160	74					
ANR	5541403	PrimaryExpression	"""rem-double"""		5541160	0					
ANR	5541404	PrimaryExpression	"""1 = (double) 2 % 3"""		5541160	1					
ANR	5541405	InitializerList	"""rem-float"""		5541160	75					
ANR	5541406	PrimaryExpression	"""rem-float"""		5541160	0					
ANR	5541407	PrimaryExpression	"""1 = (float) 2 % 3"""		5541160	1					
ANR	5541408	InitializerList	"""rem-long/2addr"""		5541160	76					
ANR	5541409	PrimaryExpression	"""rem-long/2addr"""		5541160	0					
ANR	5541410	PrimaryExpression	"""1 %= 2"""		5541160	1					
ANR	5541411	InitializerList	"""rem-float/2addr"""		5541160	77					
ANR	5541412	PrimaryExpression	"""rem-float/2addr"""		5541160	0					
ANR	5541413	PrimaryExpression	"""1 %= (float) 2"""		5541160	1					
ANR	5541414	InitializerList	"""rem-double/2addr"""		5541160	78					
ANR	5541415	PrimaryExpression	"""rem-double/2addr"""		5541160	0					
ANR	5541416	PrimaryExpression	"""1 %= (double) 2"""		5541160	1					
ANR	5541417	InitializerList	"""instance-of"""		5541160	79					
ANR	5541418	PrimaryExpression	"""instance-of"""		5541160	0					
ANR	5541419	PrimaryExpression	"""1 = insteanceof (2) == 3"""		5541160	1					
ANR	5541420	InitializerList	"""aput"""		5541160	80					
ANR	5541421	PrimaryExpression	"""aput"""		5541160	0					
ANR	5541422	PrimaryExpression	"""2[3] = 1"""		5541160	1					
ANR	5541423	InitializerList	"""aput-byte"""		5541160	81					
ANR	5541424	PrimaryExpression	"""aput-byte"""		5541160	0					
ANR	5541425	PrimaryExpression	"""2[3] = (byte) 1"""		5541160	1					
ANR	5541426	InitializerList	"""aput-short"""		5541160	82					
ANR	5541427	PrimaryExpression	"""aput-short"""		5541160	0					
ANR	5541428	PrimaryExpression	"""2[3] = (short) 1"""		5541160	1					
ANR	5541429	InitializerList	"""aput-object"""		5541160	83					
ANR	5541430	PrimaryExpression	"""aput-object"""		5541160	0					
ANR	5541431	PrimaryExpression	"""2[3] = (object) 1"""		5541160	1					
ANR	5541432	InitializerList	"""aput-wide"""		5541160	84					
ANR	5541433	PrimaryExpression	"""aput-wide"""		5541160	0					
ANR	5541434	PrimaryExpression	"""2[3] = (wide) 1"""		5541160	1					
ANR	5541435	InitializerList	"""aput-char"""		5541160	85					
ANR	5541436	PrimaryExpression	"""aput-char"""		5541160	0					
ANR	5541437	PrimaryExpression	"""2[3] = (char) 1"""		5541160	1					
ANR	5541438	InitializerList	"""aput-boolean"""		5541160	86					
ANR	5541439	PrimaryExpression	"""aput-boolean"""		5541160	0					
ANR	5541440	PrimaryExpression	"""2[3] = (bool) 1"""		5541160	1					
ANR	5541441	InitializerList	"""aget"""		5541160	87					
ANR	5541442	PrimaryExpression	"""aget"""		5541160	0					
ANR	5541443	PrimaryExpression	"""1 = 2[3]"""		5541160	1					
ANR	5541444	InitializerList	"""aget-wide"""		5541160	88					
ANR	5541445	PrimaryExpression	"""aget-wide"""		5541160	0					
ANR	5541446	PrimaryExpression	"""1 = (wide) 2[3]"""		5541160	1					
ANR	5541447	InitializerList	"""aget-char"""		5541160	89					
ANR	5541448	PrimaryExpression	"""aget-char"""		5541160	0					
ANR	5541449	PrimaryExpression	"""1 = (char) 2[3]"""		5541160	1					
ANR	5541450	InitializerList	"""aget-boolean"""		5541160	90					
ANR	5541451	PrimaryExpression	"""aget-boolean"""		5541160	0					
ANR	5541452	PrimaryExpression	"""1 = (boolean) 2[3]"""		5541160	1					
ANR	5541453	InitializerList	"""sget"""		5541160	91					
ANR	5541454	PrimaryExpression	"""sget"""		5541160	0					
ANR	5541455	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541456	InitializerList	"""sget-char"""		5541160	92					
ANR	5541457	PrimaryExpression	"""sget-char"""		5541160	0					
ANR	5541458	PrimaryExpression	"""1 = (char) 2"""		5541160	1					
ANR	5541459	InitializerList	"""sget-short"""		5541160	93					
ANR	5541460	PrimaryExpression	"""sget-short"""		5541160	0					
ANR	5541461	PrimaryExpression	"""1 = (short) 2"""		5541160	1					
ANR	5541462	InitializerList	"""sget-boolean"""		5541160	94					
ANR	5541463	PrimaryExpression	"""sget-boolean"""		5541160	0					
ANR	5541464	PrimaryExpression	"""1 = (bool) 2"""		5541160	1					
ANR	5541465	InitializerList	"""sget-object"""		5541160	95					
ANR	5541466	PrimaryExpression	"""sget-object"""		5541160	0					
ANR	5541467	PrimaryExpression	"""1 = (object) 2"""		5541160	1					
ANR	5541468	InitializerList	"""iput"""		5541160	96					
ANR	5541469	PrimaryExpression	"""iput"""		5541160	0					
ANR	5541470	PrimaryExpression	"""2[3] = 1"""		5541160	1					
ANR	5541471	InitializerList	"""iput-object"""		5541160	97					
ANR	5541472	PrimaryExpression	"""iput-object"""		5541160	0					
ANR	5541473	PrimaryExpression	"""2[3] = (object) 1"""		5541160	1					
ANR	5541474	InitializerList	"""iput-byte"""		5541160	98					
ANR	5541475	PrimaryExpression	"""iput-byte"""		5541160	0					
ANR	5541476	PrimaryExpression	"""2[3] = (byte) 1"""		5541160	1					
ANR	5541477	InitializerList	"""iput-char"""		5541160	99					
ANR	5541478	PrimaryExpression	"""iput-char"""		5541160	0					
ANR	5541479	PrimaryExpression	"""2[3] = (char) 1"""		5541160	1					
ANR	5541480	InitializerList	"""iput-boolean"""		5541160	100					
ANR	5541481	PrimaryExpression	"""iput-boolean"""		5541160	0					
ANR	5541482	PrimaryExpression	"""2[3] = (bool) 1"""		5541160	1					
ANR	5541483	InitializerList	"""sput-boolean"""		5541160	101					
ANR	5541484	PrimaryExpression	"""sput-boolean"""		5541160	0					
ANR	5541485	PrimaryExpression	"""2[3] = (bool) 1"""		5541160	1					
ANR	5541486	InitializerList	"""sput-char"""		5541160	102					
ANR	5541487	PrimaryExpression	"""sput-char"""		5541160	0					
ANR	5541488	PrimaryExpression	"""2[3] = (char) 1"""		5541160	1					
ANR	5541489	InitializerList	"""iput-int"""		5541160	103					
ANR	5541490	PrimaryExpression	"""iput-int"""		5541160	0					
ANR	5541491	PrimaryExpression	"""2[3] = (int) 1"""		5541160	1					
ANR	5541492	InitializerList	"""iget"""		5541160	104					
ANR	5541493	PrimaryExpression	"""iget"""		5541160	0					
ANR	5541494	PrimaryExpression	"""1 = 2[3]"""		5541160	1					
ANR	5541495	InitializerList	"""sget-byte"""		5541160	105					
ANR	5541496	PrimaryExpression	"""sget-byte"""		5541160	0					
ANR	5541497	PrimaryExpression	"""1 = (byte) 2 [3]"""		5541160	1					
ANR	5541498	InitializerList	"""iget-byte"""		5541160	106					
ANR	5541499	PrimaryExpression	"""iget-byte"""		5541160	0					
ANR	5541500	PrimaryExpression	"""1 = (byte) 2 [3]"""		5541160	1					
ANR	5541501	InitializerList	"""iget-char"""		5541160	107					
ANR	5541502	PrimaryExpression	"""iget-char"""		5541160	0					
ANR	5541503	PrimaryExpression	"""1 = (char) 2 [3]"""		5541160	1					
ANR	5541504	InitializerList	"""iget-short"""		5541160	108					
ANR	5541505	PrimaryExpression	"""iget-short"""		5541160	0					
ANR	5541506	PrimaryExpression	"""1 = (short) 2 [3]"""		5541160	1					
ANR	5541507	InitializerList	"""iget-wide"""		5541160	109					
ANR	5541508	PrimaryExpression	"""iget-wide"""		5541160	0					
ANR	5541509	PrimaryExpression	"""1 = (wide) 2 [3]"""		5541160	1					
ANR	5541510	InitializerList	"""iget-object"""		5541160	110					
ANR	5541511	PrimaryExpression	"""iget-object"""		5541160	0					
ANR	5541512	PrimaryExpression	"""1 = (2) 3"""		5541160	1					
ANR	5541513	InitializerList	"""iget-boolean"""		5541160	111					
ANR	5541514	PrimaryExpression	"""iget-boolean"""		5541160	0					
ANR	5541515	PrimaryExpression	"""1 = (bool) 2 [3]"""		5541160	1					
ANR	5541516	InitializerList	"""+iget-wide-volatile"""		5541160	112					
ANR	5541517	PrimaryExpression	"""+iget-wide-volatile"""		5541160	0					
ANR	5541518	PrimaryExpression	"""1 = (wide-volatile) 2 [3]"""		5541160	1					
ANR	5541519	InitializerList	"""if-eq"""		5541160	113					
ANR	5541520	PrimaryExpression	"""if-eq"""		5541160	0					
ANR	5541521	PrimaryExpression	"""if (1 == 2) goto 3"""		5541160	1					
ANR	5541522	InitializerList	"""if-lt"""		5541160	114					
ANR	5541523	PrimaryExpression	"""if-lt"""		5541160	0					
ANR	5541524	PrimaryExpression	"""if (1 < 2) goto 3"""		5541160	1					
ANR	5541525	InitializerList	"""if-ne"""		5541160	115					
ANR	5541526	PrimaryExpression	"""if-ne"""		5541160	0					
ANR	5541527	PrimaryExpression	"""if (1 != 2) goto 3"""		5541160	1					
ANR	5541528	InitializerList	"""if-eqz"""		5541160	116					
ANR	5541529	PrimaryExpression	"""if-eqz"""		5541160	0					
ANR	5541530	PrimaryExpression	"""if (!1) goto 2"""		5541160	1					
ANR	5541531	InitializerList	"""if-ge"""		5541160	117					
ANR	5541532	PrimaryExpression	"""if-ge"""		5541160	0					
ANR	5541533	PrimaryExpression	"""if (1 > zero) goto 2"""		5541160	1					
ANR	5541534	InitializerList	"""if-le"""		5541160	118					
ANR	5541535	PrimaryExpression	"""if-le"""		5541160	0					
ANR	5541536	PrimaryExpression	"""if (1 <= 2) goto 3"""		5541160	1					
ANR	5541537	InitializerList	"""if-gtz"""		5541160	119					
ANR	5541538	PrimaryExpression	"""if-gtz"""		5541160	0					
ANR	5541539	PrimaryExpression	"""if (1 > 0) goto 2"""		5541160	1					
ANR	5541540	InitializerList	"""filled-new-array"""		5541160	120					
ANR	5541541	PrimaryExpression	"""filled-new-array"""		5541160	0					
ANR	5541542	PrimaryExpression	"""1 = new Array(2)"""		5541160	1					
ANR	5541543	InitializerList	"""neg-long"""		5541160	121					
ANR	5541544	PrimaryExpression	"""neg-long"""		5541160	0					
ANR	5541545	PrimaryExpression	"""1 = -2"""		5541160	1					
ANR	5541546	InitializerList	"""neg-double"""		5541160	122					
ANR	5541547	PrimaryExpression	"""neg-double"""		5541160	0					
ANR	5541548	PrimaryExpression	"""1 = -2"""		5541160	1					
ANR	5541549	InitializerList	"""neg-float"""		5541160	123					
ANR	5541550	PrimaryExpression	"""neg-float"""		5541160	0					
ANR	5541551	PrimaryExpression	"""1 = -2"""		5541160	1					
ANR	5541552	InitializerList	"""not-int"""		5541160	124					
ANR	5541553	PrimaryExpression	"""not-int"""		5541160	0					
ANR	5541554	PrimaryExpression	"""1 = !2"""		5541160	1					
ANR	5541555	InitializerList	"""packed-switch"""		5541160	125					
ANR	5541556	PrimaryExpression	"""packed-switch"""		5541160	0					
ANR	5541557	PrimaryExpression	"""switch 2"""		5541160	1					
ANR	5541558	InitializerList	"""sparse-switch"""		5541160	126					
ANR	5541559	PrimaryExpression	"""sparse-switch"""		5541160	0					
ANR	5541560	PrimaryExpression	"""switch 2"""		5541160	1					
ANR	5541561	InitializerList	"""invoke-direct"""		5541160	127					
ANR	5541562	PrimaryExpression	"""invoke-direct"""		5541160	0					
ANR	5541563	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541564	InitializerList	"""invoke-direct/range"""		5541160	128					
ANR	5541565	PrimaryExpression	"""invoke-direct/range"""		5541160	0					
ANR	5541566	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541567	InitializerList	"""invoke-interface"""		5541160	129					
ANR	5541568	PrimaryExpression	"""invoke-interface"""		5541160	0					
ANR	5541569	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541570	InitializerList	"""invoke-static"""		5541160	130					
ANR	5541571	PrimaryExpression	"""invoke-static"""		5541160	0					
ANR	5541572	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541573	InitializerList	"""invoke-super"""		5541160	131					
ANR	5541574	PrimaryExpression	"""invoke-super"""		5541160	0					
ANR	5541575	PrimaryExpression	"""call super 2 1"""		5541160	1					
ANR	5541576	InitializerList	"""invoke-super/range"""		5541160	132					
ANR	5541577	PrimaryExpression	"""invoke-super/range"""		5541160	0					
ANR	5541578	PrimaryExpression	"""call super 2 1"""		5541160	1					
ANR	5541579	InitializerList	"""invoke-polymorphic"""		5541160	133					
ANR	5541580	PrimaryExpression	"""invoke-polymorphic"""		5541160	0					
ANR	5541581	PrimaryExpression	"""call polymorphic 2 1"""		5541160	1					
ANR	5541582	InitializerList	"""invoke-virtual/range"""		5541160	134					
ANR	5541583	PrimaryExpression	"""invoke-virtual/range"""		5541160	0					
ANR	5541584	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541585	InitializerList	"""invoke-virtual"""		5541160	135					
ANR	5541586	PrimaryExpression	"""invoke-virtual"""		5541160	0					
ANR	5541587	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541588	InitializerList	"""+invoke-virtual-quick"""		5541160	136					
ANR	5541589	PrimaryExpression	"""+invoke-virtual-quick"""		5541160	0					
ANR	5541590	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541591	InitializerList	"""+invoke-interface/range"""		5541160	137					
ANR	5541592	PrimaryExpression	"""+invoke-interface/range"""		5541160	0					
ANR	5541593	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541594	InitializerList	"""invoke-interface/range"""		5541160	138					
ANR	5541595	PrimaryExpression	"""invoke-interface/range"""		5541160	0					
ANR	5541596	PrimaryExpression	"""call 2 1"""		5541160	1					
ANR	5541597	InitializerList	"""div-float/2addr"""		5541160	139					
ANR	5541598	PrimaryExpression	"""div-float/2addr"""		5541160	0					
ANR	5541599	PrimaryExpression	"""1 /= (float) 2"""		5541160	1					
ANR	5541600	InitializerList	"""div-double/2addr"""		5541160	140					
ANR	5541601	PrimaryExpression	"""div-double/2addr"""		5541160	0					
ANR	5541602	PrimaryExpression	"""1 /= (double) 2"""		5541160	1					
ANR	5541603	InitializerList	"""div-double"""		5541160	141					
ANR	5541604	PrimaryExpression	"""div-double"""		5541160	0					
ANR	5541605	PrimaryExpression	"""1 = (double) 2 / 3"""		5541160	1					
ANR	5541606	InitializerList	"""div-float"""		5541160	142					
ANR	5541607	PrimaryExpression	"""div-float"""		5541160	0					
ANR	5541608	PrimaryExpression	"""1 = 2 / 3"""		5541160	1					
ANR	5541609	InitializerList	"""div-int/lit8"""		5541160	143					
ANR	5541610	PrimaryExpression	"""div-int/lit8"""		5541160	0					
ANR	5541611	PrimaryExpression	"""1 = 2 / 3"""		5541160	1					
ANR	5541612	InitializerList	"""div-int/lit16"""		5541160	144					
ANR	5541613	PrimaryExpression	"""div-int/lit16"""		5541160	0					
ANR	5541614	PrimaryExpression	"""1 = 2 / 3"""		5541160	1					
ANR	5541615	InitializerList	"""div-int/2addr"""		5541160	145					
ANR	5541616	PrimaryExpression	"""div-int/2addr"""		5541160	0					
ANR	5541617	PrimaryExpression	"""1 /= 2"""		5541160	1					
ANR	5541618	InitializerList	"""div-int"""		5541160	146					
ANR	5541619	PrimaryExpression	"""div-int"""		5541160	0					
ANR	5541620	PrimaryExpression	"""1 = (int)(2 / 3)"""		5541160	1					
ANR	5541621	InitializerList	"""goto/16"""		5541160	147					
ANR	5541622	PrimaryExpression	"""goto/16"""		5541160	0					
ANR	5541623	PrimaryExpression	"""goto 1"""		5541160	1					
ANR	5541624	InitializerList	"""goto/32"""		5541160	148					
ANR	5541625	PrimaryExpression	"""goto/32"""		5541160	0					
ANR	5541626	PrimaryExpression	"""goto 1"""		5541160	1					
ANR	5541627	InitializerList	"""or-int"""		5541160	149					
ANR	5541628	PrimaryExpression	"""or-int"""		5541160	0					
ANR	5541629	PrimaryExpression	"""1 = (int)(2 | 3)"""		5541160	1					
ANR	5541630	InitializerList	"""xor-int"""		5541160	150					
ANR	5541631	PrimaryExpression	"""xor-int"""		5541160	0					
ANR	5541632	PrimaryExpression	"""1 = (int)(2 ^ 3)"""		5541160	1					
ANR	5541633	InitializerList	"""xor-int/2addr"""		5541160	151					
ANR	5541634	PrimaryExpression	"""xor-int/2addr"""		5541160	0					
ANR	5541635	PrimaryExpression	"""1 ^= 2"""		5541160	1					
ANR	5541636	InitializerList	"""xor-byte"""		5541160	152					
ANR	5541637	PrimaryExpression	"""xor-byte"""		5541160	0					
ANR	5541638	PrimaryExpression	"""1 = (byte)(2 ^ 3)"""		5541160	1					
ANR	5541639	InitializerList	"""xor-short"""		5541160	153					
ANR	5541640	PrimaryExpression	"""xor-short"""		5541160	0					
ANR	5541641	PrimaryExpression	"""1 = (short)(2 ^ 3)"""		5541160	1					
ANR	5541642	InitializerList	"""sub-int"""		5541160	154					
ANR	5541643	PrimaryExpression	"""sub-int"""		5541160	0					
ANR	5541644	PrimaryExpression	"""1 = (int)(2 - 3)"""		5541160	1					
ANR	5541645	InitializerList	"""if-nez"""		5541160	155					
ANR	5541646	PrimaryExpression	"""if-nez"""		5541160	0					
ANR	5541647	PrimaryExpression	"""if (1) goto 2"""		5541160	1					
ANR	5541648	InitializerList	"""if-ltz"""		5541160	156					
ANR	5541649	PrimaryExpression	"""if-ltz"""		5541160	0					
ANR	5541650	PrimaryExpression	"""if (1 <=) goto 2"""		5541160	1					
ANR	5541651	InitializerList	"""mul-int"""		5541160	157					
ANR	5541652	PrimaryExpression	"""mul-int"""		5541160	0					
ANR	5541653	PrimaryExpression	"""1 = (int)(2 * 3)"""		5541160	1					
ANR	5541654	InitializerList	"""mul-int/lit8"""		5541160	158					
ANR	5541655	PrimaryExpression	"""mul-int/lit8"""		5541160	0					
ANR	5541656	PrimaryExpression	"""1 = (2 * 3)"""		5541160	1					
ANR	5541657	InitializerList	"""check-cast"""		5541160	159					
ANR	5541658	PrimaryExpression	"""check-cast"""		5541160	0					
ANR	5541659	PrimaryExpression	"""if (1 instanceof 2)"""		5541160	1					
ANR	5541660	InitializerList	"""add-int"""		5541160	160					
ANR	5541661	PrimaryExpression	"""add-int"""		5541160	0					
ANR	5541662	PrimaryExpression	"""1 = (int)(2 + 3)"""		5541160	1					
ANR	5541663	InitializerList	"""add-int/lit8"""		5541160	161					
ANR	5541664	PrimaryExpression	"""add-int/lit8"""		5541160	0					
ANR	5541665	PrimaryExpression	"""1 = 2 + 3"""		5541160	1					
ANR	5541666	InitializerList	"""add-int/lit16"""		5541160	162					
ANR	5541667	PrimaryExpression	"""add-int/lit16"""		5541160	0					
ANR	5541668	PrimaryExpression	"""1 = 2 + 3"""		5541160	1					
ANR	5541669	InitializerList	"""add-int/2addr"""		5541160	163					
ANR	5541670	PrimaryExpression	"""add-int/2addr"""		5541160	0					
ANR	5541671	PrimaryExpression	"""1 += 2"""		5541160	1					
ANR	5541672	InitializerList	"""add-double"""		5541160	164					
ANR	5541673	PrimaryExpression	"""add-double"""		5541160	0					
ANR	5541674	PrimaryExpression	"""1 = (double)(2 + 3)"""		5541160	1					
ANR	5541675	InitializerList	"""add-double/2addr"""		5541160	165					
ANR	5541676	PrimaryExpression	"""add-double/2addr"""		5541160	0					
ANR	5541677	PrimaryExpression	"""1 += (double)2"""		5541160	1					
ANR	5541678	InitializerList	"""mul-float/2addr"""		5541160	166					
ANR	5541679	PrimaryExpression	"""mul-float/2addr"""		5541160	0					
ANR	5541680	PrimaryExpression	"""1 *= 2"""		5541160	1					
ANR	5541681	InitializerList	"""mul-float"""		5541160	167					
ANR	5541682	PrimaryExpression	"""mul-float"""		5541160	0					
ANR	5541683	PrimaryExpression	"""1 = 2 * 3"""		5541160	1					
ANR	5541684	InitializerList	"""xor-long"""		5541160	168					
ANR	5541685	PrimaryExpression	"""xor-long"""		5541160	0					
ANR	5541686	PrimaryExpression	"""1 = (long)(2 ^ 3)"""		5541160	1					
ANR	5541687	InitializerList	"""mul-double"""		5541160	169					
ANR	5541688	PrimaryExpression	"""mul-double"""		5541160	0					
ANR	5541689	PrimaryExpression	"""1 = 2 * 3"""		5541160	1					
ANR	5541690	InitializerList	"""move-wide"""		5541160	170					
ANR	5541691	PrimaryExpression	"""move-wide"""		5541160	0					
ANR	5541692	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541693	InitializerList	"""move-wide/16"""		5541160	171					
ANR	5541694	PrimaryExpression	"""move-wide/16"""		5541160	0					
ANR	5541695	PrimaryExpression	"""1 = 2"""		5541160	1					
ANR	5541696	InitializerList	"""return-wide"""		5541160	172					
ANR	5541697	PrimaryExpression	"""return-wide"""		5541160	0					
ANR	5541698	PrimaryExpression	"""return (wide) 1"""		5541160	1					
ANR	5541699	InitializerList	"""return-object"""		5541160	173					
ANR	5541700	PrimaryExpression	"""return-object"""		5541160	0					
ANR	5541701	PrimaryExpression	"""return (object) 1"""		5541160	1					
ANR	5541702	InitializerList	NULL		5541160	174					
ANR	5541703	Identifier	NULL		5541160	0					
ANR	5541704	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5541160	2					
ANR	5541705	ForInit	i = 0 ;	197:6:6725:6728	5541160	0	True				
ANR	5541706	AssignmentExpression	i = 0		5541160	0		=			
ANR	5541707	Identifier	i		5541160	0					
ANR	5541708	PrimaryExpression	0		5541160	1					
ANR	5541709	Condition	ops [ i ] . op != NULL	197:11:6730:6746	5541160	1	True				
ANR	5541710	EqualityExpression	ops [ i ] . op != NULL		5541160	0		!=			
ANR	5541711	MemberAccess	ops [ i ] . op		5541160	0					
ANR	5541712	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541713	Identifier	ops		5541160	0					
ANR	5541714	Identifier	i		5541160	1					
ANR	5541715	Identifier	op		5541160	1					
ANR	5541716	Identifier	NULL		5541160	1					
ANR	5541717	PostIncDecOperationExpression	i ++	197:30:6749:6751	5541160	2	True				
ANR	5541718	Identifier	i		5541160	0					
ANR	5541719	IncDec	++		5541160	1					
ANR	5541720	CompoundStatement		185:35:6476:6476	5541160	3					
ANR	5541721	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5541160	0					
ANR	5541722	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	198:6:6762:6789	5541160	0	True				
ANR	5541723	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5541160	0					
ANR	5541724	UnaryOperator	!		5541160	0					
ANR	5541725	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5541160	1					
ANR	5541726	Callee	strcmp		5541160	0					
ANR	5541727	Identifier	strcmp		5541160	0					
ANR	5541728	ArgumentList	ops [ i ] . op		5541160	1					
ANR	5541729	Argument	ops [ i ] . op		5541160	0					
ANR	5541730	MemberAccess	ops [ i ] . op		5541160	0					
ANR	5541731	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541732	Identifier	ops		5541160	0					
ANR	5541733	Identifier	i		5541160	1					
ANR	5541734	Identifier	op		5541160	1					
ANR	5541735	Argument	argv [ 0 ]		5541160	1					
ANR	5541736	ArrayIndexing	argv [ 0 ]		5541160	0					
ANR	5541737	Identifier	argv		5541160	0					
ANR	5541738	PrimaryExpression	0		5541160	1					
ANR	5541739	CompoundStatement		186:36:6514:6514	5541160	1					
ANR	5541740	IfStatement	if ( newstr != NULL )		5541160	0					
ANR	5541741	Condition	newstr != NULL	199:7:6801:6814	5541160	0	True				
ANR	5541742	EqualityExpression	newstr != NULL		5541160	0		!=			
ANR	5541743	Identifier	newstr		5541160	0					
ANR	5541744	Identifier	NULL		5541160	1					
ANR	5541745	CompoundStatement		187:23:6539:6539	5541160	1					
ANR	5541746	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5541160	0					
ANR	5541747	ForInit	j = k = 0 ;	200:9:6828:6833	5541160	0	True				
ANR	5541748	AssignmentExpression	j = k = 0		5541160	0		=			
ANR	5541749	Identifier	j		5541160	0					
ANR	5541750	AssignmentExpression	k = 0		5541160	1		=			
ANR	5541751	Identifier	k		5541160	0					
ANR	5541752	PrimaryExpression	0		5541160	1					
ANR	5541753	Condition	ops [ i ] . str [ j ] != '\\0'	200:15:6834:6852	5541160	1	True				
ANR	5541754	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5541160	0		!=			
ANR	5541755	ArrayIndexing	ops [ i ] . str [ j ]		5541160	0					
ANR	5541756	MemberAccess	ops [ i ] . str		5541160	0					
ANR	5541757	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541758	Identifier	ops		5541160	0					
ANR	5541759	Identifier	i		5541160	1					
ANR	5541760	Identifier	str		5541160	1					
ANR	5541761	Identifier	j		5541160	1					
ANR	5541762	PrimaryExpression	'\\0'		5541160	1					
ANR	5541763	Expression	"j ++ , k ++"	200:35:6854:6860	5541160	2	True				
ANR	5541764	PostIncDecOperationExpression	j ++		5541160	0					
ANR	5541765	Identifier	j		5541160	0					
ANR	5541766	IncDec	++		5541160	1					
ANR	5541767	PostIncDecOperationExpression	k ++		5541160	1					
ANR	5541768	Identifier	k		5541160	0					
ANR	5541769	IncDec	++		5541160	1					
ANR	5541770	CompoundStatement		188:44:6585:6585	5541160	3					
ANR	5541771	IfStatement	if ( ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9' )		5541160	0					
ANR	5541772	Condition	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'	201:9:6874:6913	5541160	0	True				
ANR	5541773	AndExpression	ops [ i ] . str [ j ] >= '1' && ops [ i ] . str [ j ] <= '9'		5541160	0		&&			
ANR	5541774	RelationalExpression	ops [ i ] . str [ j ] >= '1'		5541160	0		>=			
ANR	5541775	ArrayIndexing	ops [ i ] . str [ j ]		5541160	0					
ANR	5541776	MemberAccess	ops [ i ] . str		5541160	0					
ANR	5541777	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541778	Identifier	ops		5541160	0					
ANR	5541779	Identifier	i		5541160	1					
ANR	5541780	Identifier	str		5541160	1					
ANR	5541781	Identifier	j		5541160	1					
ANR	5541782	PrimaryExpression	'1'		5541160	1					
ANR	5541783	RelationalExpression	ops [ i ] . str [ j ] <= '9'		5541160	1		<=			
ANR	5541784	ArrayIndexing	ops [ i ] . str [ j ]		5541160	0					
ANR	5541785	MemberAccess	ops [ i ] . str		5541160	0					
ANR	5541786	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541787	Identifier	ops		5541160	0					
ANR	5541788	Identifier	i		5541160	1					
ANR	5541789	Identifier	str		5541160	1					
ANR	5541790	Identifier	j		5541160	1					
ANR	5541791	PrimaryExpression	'9'		5541160	1					
ANR	5541792	CompoundStatement		190:6:6646:6687	5541160	1					
ANR	5541793	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	202:6:6924:6965	5541160	0	True				
ANR	5541794	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5541160	0					
ANR	5541795	IdentifierDeclType	const char *		5541160	0					
ANR	5541796	Identifier	w		5541160	1					
ANR	5541797	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5541160	2		=			
ANR	5541798	Identifier	w		5541160	0					
ANR	5541799	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5541160	1					
ANR	5541800	Identifier	argv		5541160	0					
ANR	5541801	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5541160	1		-			
ANR	5541802	ArrayIndexing	ops [ i ] . str [ j ]		5541160	0					
ANR	5541803	MemberAccess	ops [ i ] . str		5541160	0					
ANR	5541804	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541805	Identifier	ops		5541160	0					
ANR	5541806	Identifier	i		5541160	1					
ANR	5541807	Identifier	str		5541160	1					
ANR	5541808	Identifier	j		5541160	1					
ANR	5541809	PrimaryExpression	'0'		5541160	1					
ANR	5541810	IfStatement	if ( w != NULL )		5541160	1					
ANR	5541811	Condition	w != NULL	203:10:6977:6985	5541160	0	True				
ANR	5541812	EqualityExpression	w != NULL		5541160	0		!=			
ANR	5541813	Identifier	w		5541160	0					
ANR	5541814	Identifier	NULL		5541160	1					
ANR	5541815	CompoundStatement		191:21:6710:6710	5541160	1					
ANR	5541816	ExpressionStatement	"strcpy ( newstr + k , w )"	204:7:6997:7017	5541160	0	True				
ANR	5541817	CallExpression	"strcpy ( newstr + k , w )"		5541160	0					
ANR	5541818	Callee	strcpy		5541160	0					
ANR	5541819	Identifier	strcpy		5541160	0					
ANR	5541820	ArgumentList	newstr + k		5541160	1					
ANR	5541821	Argument	newstr + k		5541160	0					
ANR	5541822	AdditiveExpression	newstr + k		5541160	0		+			
ANR	5541823	Identifier	newstr		5541160	0					
ANR	5541824	Identifier	k		5541160	1					
ANR	5541825	Argument	w		5541160	1					
ANR	5541826	Identifier	w		5541160	0					
ANR	5541827	ExpressionStatement	k += strlen ( w ) - 1	205:7:7026:7042	5541160	1	True				
ANR	5541828	AssignmentExpression	k += strlen ( w ) - 1		5541160	0		+=			
ANR	5541829	Identifier	k		5541160	0					
ANR	5541830	AdditiveExpression	strlen ( w ) - 1		5541160	1		-			
ANR	5541831	CallExpression	strlen ( w )		5541160	0					
ANR	5541832	Callee	strlen		5541160	0					
ANR	5541833	Identifier	strlen		5541160	0					
ANR	5541834	ArgumentList	w		5541160	1					
ANR	5541835	Argument	w		5541160	0					
ANR	5541836	Identifier	w		5541160	0					
ANR	5541837	PrimaryExpression	1		5541160	1					
ANR	5541838	ElseStatement	else		5541160	0					
ANR	5541839	CompoundStatement		195:12:6786:6786	5541160	0					
ANR	5541840	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	208:6:7072:7097	5541160	0	True				
ANR	5541841	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5541160	0		=			
ANR	5541842	ArrayIndexing	newstr [ k ]		5541160	0					
ANR	5541843	Identifier	newstr		5541160	0					
ANR	5541844	Identifier	k		5541160	1					
ANR	5541845	ArrayIndexing	ops [ i ] . str [ j ]		5541160	1					
ANR	5541846	MemberAccess	ops [ i ] . str		5541160	0					
ANR	5541847	ArrayIndexing	ops [ i ]		5541160	0					
ANR	5541848	Identifier	ops		5541160	0					
ANR	5541849	Identifier	i		5541160	1					
ANR	5541850	Identifier	str		5541160	1					
ANR	5541851	Identifier	j		5541160	1					
ANR	5541852	ExpressionStatement	newstr [ k ] = '\\0'	211:4:7116:7130	5541160	1	True				
ANR	5541853	AssignmentExpression	newstr [ k ] = '\\0'		5541160	0		=			
ANR	5541854	ArrayIndexing	newstr [ k ]		5541160	0					
ANR	5541855	Identifier	newstr		5541160	0					
ANR	5541856	Identifier	k		5541160	1					
ANR	5541857	PrimaryExpression	'\\0'		5541160	1					
ANR	5541858	ReturnStatement	return true ;	213:3:7140:7151	5541160	1	True				
ANR	5541859	Identifier	true		5541160	0					
ANR	5541860	IfStatement	if ( newstr != NULL )		5541160	3					
ANR	5541861	Condition	newstr != NULL	218:5:7192:7205	5541160	0	True				
ANR	5541862	EqualityExpression	newstr != NULL		5541160	0		!=			
ANR	5541863	Identifier	newstr		5541160	0					
ANR	5541864	Identifier	NULL		5541160	1					
ANR	5541865	CompoundStatement		206:21:6930:6930	5541160	1					
ANR	5541866	ExpressionStatement	newstr [ 0 ] = '\\0'	219:2:7212:7228	5541160	0	True				
ANR	5541867	AssignmentExpression	newstr [ 0 ] = '\\0'		5541160	0		=			
ANR	5541868	ArrayIndexing	newstr [ 0 ]		5541160	0					
ANR	5541869	Identifier	newstr		5541160	0					
ANR	5541870	PrimaryExpression	0		5541160	1					
ANR	5541871	PrimaryExpression	'\\0'		5541160	1					
ANR	5541872	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5541160	1					
ANR	5541873	ForInit	i = 0 ;	220:7:7237:7240	5541160	0	True				
ANR	5541874	AssignmentExpression	i = 0		5541160	0		=			
ANR	5541875	Identifier	i		5541160	0					
ANR	5541876	PrimaryExpression	0		5541160	1					
ANR	5541877	Condition	i < argc	220:12:7242:7247	5541160	1	True				
ANR	5541878	RelationalExpression	i < argc		5541160	0		<			
ANR	5541879	Identifier	i		5541160	0					
ANR	5541880	Identifier	argc		5541160	1					
ANR	5541881	PostIncDecOperationExpression	i ++	220:20:7250:7252	5541160	2	True				
ANR	5541882	Identifier	i		5541160	0					
ANR	5541883	IncDec	++		5541160	1					
ANR	5541884	CompoundStatement		208:25:6977:6977	5541160	3					
ANR	5541885	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	221:3:7260:7284	5541160	0	True				
ANR	5541886	CallExpression	"strcat ( newstr , argv [ i ] )"		5541160	0					
ANR	5541887	Callee	strcat		5541160	0					
ANR	5541888	Identifier	strcat		5541160	0					
ANR	5541889	ArgumentList	newstr		5541160	1					
ANR	5541890	Argument	newstr		5541160	0					
ANR	5541891	Identifier	newstr		5541160	0					
ANR	5541892	Argument	argv [ i ]		5541160	1					
ANR	5541893	ArrayIndexing	argv [ i ]		5541160	0					
ANR	5541894	Identifier	argv		5541160	0					
ANR	5541895	Identifier	i		5541160	1					
ANR	5541896	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	222:3:7289:7339	5541160	1	True				
ANR	5541897	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5541160	0					
ANR	5541898	Callee	strcat		5541160	0					
ANR	5541899	Identifier	strcat		5541160	0					
ANR	5541900	ArgumentList	newstr		5541160	1					
ANR	5541901	Argument	newstr		5541160	0					
ANR	5541902	Identifier	newstr		5541160	0					
ANR	5541903	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5541160	1					
ANR	5541904	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5541160	0					
ANR	5541905	Condition	i == 0 || i == argc - 1		5541160	0					
ANR	5541906	OrExpression	i == 0 || i == argc - 1		5541160	0		||			
ANR	5541907	EqualityExpression	i == 0		5541160	0		==			
ANR	5541908	Identifier	i		5541160	0					
ANR	5541909	PrimaryExpression	0		5541160	1					
ANR	5541910	EqualityExpression	i == argc - 1		5541160	1		==			
ANR	5541911	Identifier	i		5541160	0					
ANR	5541912	AdditiveExpression	argc - 1		5541160	1		-			
ANR	5541913	Identifier	argc		5541160	0					
ANR	5541914	PrimaryExpression	1		5541160	1					
ANR	5541915	PrimaryExpression	""" """		5541160	1					
ANR	5541916	PrimaryExpression	""", """		5541160	2					
ANR	5541917	ReturnStatement	return false ;	226:1:7350:7362	5541160	4	True				
ANR	5541918	Identifier	false		5541160	0					
ANR	5541919	ReturnType	static int		5541160	1					
ANR	5541920	Identifier	replace		5541160	2					
ANR	5541921	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5541160	3					
ANR	5541922	Parameter	int argc	13:19:233:240	5541160	0	True				
ANR	5541923	ParameterType	int		5541160	0					
ANR	5541924	Identifier	argc		5541160	1					
ANR	5541925	Parameter	const char * argv [ ]	13:29:243:260	5541160	1	True				
ANR	5541926	ParameterType	const char * [ ]		5541160	0					
ANR	5541927	Identifier	argv		5541160	1					
ANR	5541928	Parameter	char * newstr	13:49:263:274	5541160	2	True				
ANR	5541929	ParameterType	char *		5541160	0					
ANR	5541930	Identifier	newstr		5541160	1					
ANR	5541931	CFGEntryNode	ENTRY		5541160		True				
ANR	5541932	CFGExitNode	EXIT		5541160		True				
ANR	5541933	Symbol	* ops [ i ] . str		5541160						
ANR	5541934	Symbol	* * ops		5541160						
ANR	5541935	Symbol	* argv		5541160						
ANR	5541936	Symbol	argv		5541160						
ANR	5541937	Symbol	ops [ i ] . str		5541160						
ANR	5541938	Symbol	strlen		5541160						
ANR	5541939	Symbol	ops [ i ] . op		5541160						
ANR	5541940	Symbol	* ops		5541160						
ANR	5541941	Symbol	argc		5541160						
ANR	5541942	Symbol	strcmp		5541160						
ANR	5541943	Symbol	* * j		5541160						
ANR	5541944	Symbol	* * i		5541160						
ANR	5541945	Symbol	NULL		5541160						
ANR	5541946	Symbol	* * ops [ i ] . str		5541160						
ANR	5541947	Symbol	false		5541160						
ANR	5541948	Symbol	i		5541160						
ANR	5541949	Symbol	j		5541160						
ANR	5541950	Symbol	k		5541160						
ANR	5541951	Symbol	newstr		5541160						
ANR	5541952	Symbol	* * * ops		5541160						
ANR	5541953	Symbol	ops		5541160						
ANR	5541954	Symbol	* i		5541160						
ANR	5541955	Symbol	* newstr		5541160						
ANR	5541956	Symbol	* j		5541160						
ANR	5541957	Symbol	* k		5541160						
ANR	5541958	Symbol	w		5541160						
ANR	5541959	Symbol	* * * i		5541160						
ANR	5541960	Symbol	true		5541160						
ANR	5541961	Function	parse	229:0:7367:10074							
ANR	5541962	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5541961	0					
ANR	5541963	CompoundStatement		229:57:7424:10074	5541961	0					
ANR	5541964	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	230:1:7427:7453	5541961	0	True				
ANR	5541965	IdentifierDecl	i		5541961	0					
ANR	5541966	IdentifierDeclType	int		5541961	0					
ANR	5541967	Identifier	i		5541961	1					
ANR	5541968	IdentifierDecl	len = strlen ( data )		5541961	1					
ANR	5541969	IdentifierDeclType	int		5541961	0					
ANR	5541970	Identifier	len		5541961	1					
ANR	5541971	AssignmentExpression	len = strlen ( data )		5541961	2		=			
ANR	5541972	Identifier	len		5541961	0					
ANR	5541973	CallExpression	strlen ( data )		5541961	1					
ANR	5541974	Callee	strlen		5541961	0					
ANR	5541975	Identifier	strlen		5541961	0					
ANR	5541976	ArgumentList	data		5541961	1					
ANR	5541977	Argument	data		5541961	0					
ANR	5541978	Identifier	data		5541961	0					
ANR	5541979	IdentifierDeclStatement	"char * buf , * ptr , * optr , * ptr2 ;"	231:1:7456:7485	5541961	1	True				
ANR	5541980	IdentifierDecl	* buf		5541961	0					
ANR	5541981	IdentifierDeclType	char *		5541961	0					
ANR	5541982	Identifier	buf		5541961	1					
ANR	5541983	IdentifierDecl	* ptr		5541961	1					
ANR	5541984	IdentifierDeclType	char *		5541961	0					
ANR	5541985	Identifier	ptr		5541961	1					
ANR	5541986	IdentifierDecl	* optr		5541961	2					
ANR	5541987	IdentifierDeclType	char *		5541961	0					
ANR	5541988	Identifier	optr		5541961	1					
ANR	5541989	IdentifierDecl	* ptr2		5541961	3					
ANR	5541990	IdentifierDeclType	char *		5541961	0					
ANR	5541991	Identifier	ptr2		5541961	1					
ANR	5541992	IdentifierDeclStatement	char w0 [ 64 ] ;	232:1:7488:7499	5541961	2	True				
ANR	5541993	IdentifierDecl	w0 [ 64 ]		5541961	0					
ANR	5541994	IdentifierDeclType	char [ 64 ]		5541961	0					
ANR	5541995	Identifier	w0		5541961	1					
ANR	5541996	PrimaryExpression	64		5541961	2					
ANR	5541997	IdentifierDeclStatement	char w1 [ 64 ] ;	233:1:7502:7513	5541961	3	True				
ANR	5541998	IdentifierDecl	w1 [ 64 ]		5541961	0					
ANR	5541999	IdentifierDeclType	char [ 64 ]		5541961	0					
ANR	5542000	Identifier	w1		5541961	1					
ANR	5542001	PrimaryExpression	64		5541961	2					
ANR	5542002	IdentifierDeclStatement	char w2 [ 64 ] ;	234:1:7516:7527	5541961	4	True				
ANR	5542003	IdentifierDecl	w2 [ 64 ]		5541961	0					
ANR	5542004	IdentifierDeclType	char [ 64 ]		5541961	0					
ANR	5542005	Identifier	w2		5541961	1					
ANR	5542006	PrimaryExpression	64		5541961	2					
ANR	5542007	IdentifierDeclStatement	char w3 [ 64 ] ;	235:1:7530:7541	5541961	5	True				
ANR	5542008	IdentifierDecl	w3 [ 64 ]		5541961	0					
ANR	5542009	IdentifierDeclType	char [ 64 ]		5541961	0					
ANR	5542010	Identifier	w3		5541961	1					
ANR	5542011	PrimaryExpression	64		5541961	2					
ANR	5542012	IdentifierDeclStatement	char w4 [ 64 ] ;	236:1:7544:7555	5541961	6	True				
ANR	5542013	IdentifierDecl	w4 [ 64 ]		5541961	0					
ANR	5542014	IdentifierDeclType	char [ 64 ]		5541961	0					
ANR	5542015	Identifier	w4		5541961	1					
ANR	5542016	PrimaryExpression	64		5541961	2					
ANR	5542017	IfStatement	"if ( ! strcmp ( data , ""invalid"" ) || ! strcmp ( data , ""nop"" ) || ! strcmp ( data , ""DEPRECATED"" ) )"		5541961	7					
ANR	5542018	Condition	"! strcmp ( data , ""invalid"" ) || ! strcmp ( data , ""nop"" ) || ! strcmp ( data , ""DEPRECATED"" )"	238:5:7563:7648	5541961	0	True				
ANR	5542019	OrExpression	"! strcmp ( data , ""invalid"" ) || ! strcmp ( data , ""nop"" ) || ! strcmp ( data , ""DEPRECATED"" )"		5541961	0		||			
ANR	5542020	UnaryOperationExpression	"! strcmp ( data , ""invalid"" )"		5541961	0					
ANR	5542021	UnaryOperator	!		5541961	0					
ANR	5542022	CallExpression	"strcmp ( data , ""invalid"" )"		5541961	1					
ANR	5542023	Callee	strcmp		5541961	0					
ANR	5542024	Identifier	strcmp		5541961	0					
ANR	5542025	ArgumentList	data		5541961	1					
ANR	5542026	Argument	data		5541961	0					
ANR	5542027	Identifier	data		5541961	0					
ANR	5542028	Argument	"""invalid"""		5541961	1					
ANR	5542029	PrimaryExpression	"""invalid"""		5541961	0					
ANR	5542030	OrExpression	"! strcmp ( data , ""nop"" ) || ! strcmp ( data , ""DEPRECATED"" )"		5541961	1		||			
ANR	5542031	UnaryOperationExpression	"! strcmp ( data , ""nop"" )"		5541961	0					
ANR	5542032	UnaryOperator	!		5541961	0					
ANR	5542033	CallExpression	"strcmp ( data , ""nop"" )"		5541961	1					
ANR	5542034	Callee	strcmp		5541961	0					
ANR	5542035	Identifier	strcmp		5541961	0					
ANR	5542036	ArgumentList	data		5541961	1					
ANR	5542037	Argument	data		5541961	0					
ANR	5542038	Identifier	data		5541961	0					
ANR	5542039	Argument	"""nop"""		5541961	1					
ANR	5542040	PrimaryExpression	"""nop"""		5541961	0					
ANR	5542041	UnaryOperationExpression	"! strcmp ( data , ""DEPRECATED"" )"		5541961	1					
ANR	5542042	UnaryOperator	!		5541961	0					
ANR	5542043	CallExpression	"strcmp ( data , ""DEPRECATED"" )"		5541961	1					
ANR	5542044	Callee	strcmp		5541961	0					
ANR	5542045	Identifier	strcmp		5541961	0					
ANR	5542046	ArgumentList	data		5541961	1					
ANR	5542047	Argument	data		5541961	0					
ANR	5542048	Identifier	data		5541961	0					
ANR	5542049	Argument	"""DEPRECATED"""		5541961	1					
ANR	5542050	PrimaryExpression	"""DEPRECATED"""		5541961	0					
ANR	5542051	CompoundStatement		12:35:226:226	5541961	1					
ANR	5542052	ExpressionStatement	str [ 0 ] = 0	241:2:7655:7665	5541961	0	True				
ANR	5542053	AssignmentExpression	str [ 0 ] = 0		5541961	0		=			
ANR	5542054	ArrayIndexing	str [ 0 ]		5541961	0					
ANR	5542055	Identifier	str		5541961	0					
ANR	5542056	PrimaryExpression	0		5541961	1					
ANR	5542057	PrimaryExpression	0		5541961	1					
ANR	5542058	ReturnStatement	return true ;	242:2:7669:7680	5541961	1	True				
ANR	5542059	Identifier	true		5541961	0					
ANR	5542060	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5541961	8					
ANR	5542061	Condition	! ( buf = malloc ( len + 1 ) )	246:5:7722:7746	5541961	0	True				
ANR	5542062	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5541961	0					
ANR	5542063	UnaryOperator	!		5541961	0					
ANR	5542064	AssignmentExpression	buf = malloc ( len + 1 )		5541961	1		=			
ANR	5542065	Identifier	buf		5541961	0					
ANR	5542066	CallExpression	malloc ( len + 1 )		5541961	1					
ANR	5542067	Callee	malloc		5541961	0					
ANR	5542068	Identifier	malloc		5541961	0					
ANR	5542069	ArgumentList	len + 1		5541961	1					
ANR	5542070	Argument	len + 1		5541961	0					
ANR	5542071	AdditiveExpression	len + 1		5541961	0		+			
ANR	5542072	Identifier	len		5541961	0					
ANR	5542073	PrimaryExpression	1		5541961	1					
ANR	5542074	CompoundStatement		18:32:324:324	5541961	1					
ANR	5542075	ReturnStatement	return false ;	247:2:7753:7765	5541961	0	True				
ANR	5542076	Identifier	false		5541961	0					
ANR	5542077	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	249:1:7771:7798	5541961	9	True				
ANR	5542078	CallExpression	"memcpy ( buf , data , len + 1 )"		5541961	0					
ANR	5542079	Callee	memcpy		5541961	0					
ANR	5542080	Identifier	memcpy		5541961	0					
ANR	5542081	ArgumentList	buf		5541961	1					
ANR	5542082	Argument	buf		5541961	0					
ANR	5542083	Identifier	buf		5541961	0					
ANR	5542084	Argument	data		5541961	1					
ANR	5542085	Identifier	data		5541961	0					
ANR	5542086	Argument	len + 1		5541961	2					
ANR	5542087	AdditiveExpression	len + 1		5541961	0		+			
ANR	5542088	Identifier	len		5541961	0					
ANR	5542089	PrimaryExpression	1		5541961	1					
ANR	5542090	ExpressionStatement	r_str_trim ( buf )	251:1:7802:7818	5541961	10	True				
ANR	5542091	CallExpression	r_str_trim ( buf )		5541961	0					
ANR	5542092	Callee	r_str_trim		5541961	0					
ANR	5542093	Identifier	r_str_trim		5541961	0					
ANR	5542094	ArgumentList	buf		5541961	1					
ANR	5542095	Argument	buf		5541961	0					
ANR	5542096	Identifier	buf		5541961	0					
ANR	5542097	IfStatement	if ( * buf )		5541961	11					
ANR	5542098	Condition	* buf	253:5:7826:7829	5541961	0	True				
ANR	5542099	UnaryOperationExpression	* buf		5541961	0					
ANR	5542100	UnaryOperator	*		5541961	0					
ANR	5542101	Identifier	buf		5541961	1					
ANR	5542102	CompoundStatement		25:11:407:407	5541961	1					
ANR	5542103	ExpressionStatement	w0 [ 0 ] = '\\0'	254:2:7836:7846	5541961	0	True				
ANR	5542104	AssignmentExpression	w0 [ 0 ] = '\\0'		5541961	0		=			
ANR	5542105	ArrayIndexing	w0 [ 0 ]		5541961	0					
ANR	5542106	Identifier	w0		5541961	0					
ANR	5542107	PrimaryExpression	0		5541961	1					
ANR	5542108	PrimaryExpression	'\\0'		5541961	1					
ANR	5542109	ExpressionStatement	w1 [ 0 ] = '\\0'	255:2:7850:7860	5541961	1	True				
ANR	5542110	AssignmentExpression	w1 [ 0 ] = '\\0'		5541961	0		=			
ANR	5542111	ArrayIndexing	w1 [ 0 ]		5541961	0					
ANR	5542112	Identifier	w1		5541961	0					
ANR	5542113	PrimaryExpression	0		5541961	1					
ANR	5542114	PrimaryExpression	'\\0'		5541961	1					
ANR	5542115	ExpressionStatement	w2 [ 0 ] = '\\0'	256:2:7864:7874	5541961	2	True				
ANR	5542116	AssignmentExpression	w2 [ 0 ] = '\\0'		5541961	0		=			
ANR	5542117	ArrayIndexing	w2 [ 0 ]		5541961	0					
ANR	5542118	Identifier	w2		5541961	0					
ANR	5542119	PrimaryExpression	0		5541961	1					
ANR	5542120	PrimaryExpression	'\\0'		5541961	1					
ANR	5542121	ExpressionStatement	w3 [ 0 ] = '\\0'	257:2:7878:7888	5541961	3	True				
ANR	5542122	AssignmentExpression	w3 [ 0 ] = '\\0'		5541961	0		=			
ANR	5542123	ArrayIndexing	w3 [ 0 ]		5541961	0					
ANR	5542124	Identifier	w3		5541961	0					
ANR	5542125	PrimaryExpression	0		5541961	1					
ANR	5542126	PrimaryExpression	'\\0'		5541961	1					
ANR	5542127	ExpressionStatement	w4 [ 0 ] = '\\0'	258:2:7892:7902	5541961	4	True				
ANR	5542128	AssignmentExpression	w4 [ 0 ] = '\\0'		5541961	0		=			
ANR	5542129	ArrayIndexing	w4 [ 0 ]		5541961	0					
ANR	5542130	Identifier	w4		5541961	0					
ANR	5542131	PrimaryExpression	0		5541961	1					
ANR	5542132	PrimaryExpression	'\\0'		5541961	1					
ANR	5542133	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	259:2:7906:7929	5541961	5	True				
ANR	5542134	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5541961	0		=			
ANR	5542135	Identifier	ptr		5541961	0					
ANR	5542136	CallExpression	"strchr ( buf , ' ' )"		5541961	1					
ANR	5542137	Callee	strchr		5541961	0					
ANR	5542138	Identifier	strchr		5541961	0					
ANR	5542139	ArgumentList	buf		5541961	1					
ANR	5542140	Argument	buf		5541961	0					
ANR	5542141	Identifier	buf		5541961	0					
ANR	5542142	Argument	' '		5541961	1					
ANR	5542143	PrimaryExpression	' '		5541961	0					
ANR	5542144	IfStatement	if ( ! ptr )		5541961	6					
ANR	5542145	Condition	! ptr	260:6:7937:7940	5541961	0	True				
ANR	5542146	UnaryOperationExpression	! ptr		5541961	0					
ANR	5542147	UnaryOperator	!		5541961	0					
ANR	5542148	Identifier	ptr		5541961	1					
ANR	5542149	CompoundStatement		32:12:518:518	5541961	1					
ANR	5542150	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	261:3:7948:7972	5541961	0	True				
ANR	5542151	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5541961	0		=			
ANR	5542152	Identifier	ptr		5541961	0					
ANR	5542153	CallExpression	"strchr ( buf , '\\t' )"		5541961	1					
ANR	5542154	Callee	strchr		5541961	0					
ANR	5542155	Identifier	strchr		5541961	0					
ANR	5542156	ArgumentList	buf		5541961	1					
ANR	5542157	Argument	buf		5541961	0					
ANR	5542158	Identifier	buf		5541961	0					
ANR	5542159	Argument	'\\t'		5541961	1					
ANR	5542160	PrimaryExpression	'\\t'		5541961	0					
ANR	5542161	IfStatement	if ( ptr )		5541961	7					
ANR	5542162	Condition	ptr	263:6:7984:7986	5541961	0	True				
ANR	5542163	Identifier	ptr		5541961	0					
ANR	5542164	CompoundStatement		35:11:564:564	5541961	1					
ANR	5542165	ExpressionStatement	* ptr = '\\0'	264:3:7994:8005	5541961	0	True				
ANR	5542166	AssignmentExpression	* ptr = '\\0'		5541961	0		=			
ANR	5542167	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542168	UnaryOperator	*		5541961	0					
ANR	5542169	Identifier	ptr		5541961	1					
ANR	5542170	PrimaryExpression	'\\0'		5541961	1					
ANR	5542171	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5541961	1					
ANR	5542172	ForInit	++ ptr ;	265:8:8015:8020	5541961	0	True				
ANR	5542173	UnaryExpression	++ ptr		5541961	0					
ANR	5542174	IncDec	++		5541961	0					
ANR	5542175	Identifier	ptr		5541961	1					
ANR	5542176	Condition	* ptr == ' '	265:15:8022:8032	5541961	1	True				
ANR	5542177	EqualityExpression	* ptr == ' '		5541961	0		==			
ANR	5542178	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542179	UnaryOperator	*		5541961	0					
ANR	5542180	Identifier	ptr		5541961	1					
ANR	5542181	PrimaryExpression	' '		5541961	1					
ANR	5542182	PostIncDecOperationExpression	ptr ++	265:28:8035:8039	5541961	2	True				
ANR	5542183	Identifier	ptr		5541961	0					
ANR	5542184	IncDec	++		5541961	1					
ANR	5542185	CompoundStatement		37:35:617:617	5541961	3					
ANR	5542186	ExpressionStatement		266:4:8048:8048	5541961	0	True				
ANR	5542187	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	268:3:8058:8092	5541961	2	True				
ANR	5542188	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5541961	0					
ANR	5542189	Callee	strncpy		5541961	0					
ANR	5542190	Identifier	strncpy		5541961	0					
ANR	5542191	ArgumentList	w0		5541961	1					
ANR	5542192	Argument	w0		5541961	0					
ANR	5542193	Identifier	w0		5541961	0					
ANR	5542194	Argument	buf		5541961	1					
ANR	5542195	Identifier	buf		5541961	0					
ANR	5542196	Argument	sizeof ( w0 ) - 1		5541961	2					
ANR	5542197	AdditiveExpression	sizeof ( w0 ) - 1		5541961	0		-			
ANR	5542198	SizeofExpression	sizeof ( w0 )		5541961	0					
ANR	5542199	Sizeof	sizeof		5541961	0					
ANR	5542200	SizeofOperand	w0		5541961	1					
ANR	5542201	PrimaryExpression	1		5541961	1					
ANR	5542202	ExpressionStatement	w0 [ sizeof ( w0 ) - 1 ] = '\\0'	269:3:8097:8120	5541961	3	True				
ANR	5542203	AssignmentExpression	w0 [ sizeof ( w0 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542204	ArrayIndexing	w0 [ sizeof ( w0 ) - 1 ]		5541961	0					
ANR	5542205	Identifier	w0		5541961	0					
ANR	5542206	AdditiveExpression	sizeof ( w0 ) - 1		5541961	1		-			
ANR	5542207	SizeofExpression	sizeof ( w0 )		5541961	0					
ANR	5542208	Sizeof	sizeof		5541961	0					
ANR	5542209	SizeofOperand	w0		5541961	1					
ANR	5542210	PrimaryExpression	1		5541961	1					
ANR	5542211	PrimaryExpression	'\\0'		5541961	1					
ANR	5542212	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	270:3:8125:8159	5541961	4	True				
ANR	5542213	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5541961	0					
ANR	5542214	Callee	strncpy		5541961	0					
ANR	5542215	Identifier	strncpy		5541961	0					
ANR	5542216	ArgumentList	w1		5541961	1					
ANR	5542217	Argument	w1		5541961	0					
ANR	5542218	Identifier	w1		5541961	0					
ANR	5542219	Argument	ptr		5541961	1					
ANR	5542220	Identifier	ptr		5541961	0					
ANR	5542221	Argument	sizeof ( w1 ) - 1		5541961	2					
ANR	5542222	AdditiveExpression	sizeof ( w1 ) - 1		5541961	0		-			
ANR	5542223	SizeofExpression	sizeof ( w1 )		5541961	0					
ANR	5542224	Sizeof	sizeof		5541961	0					
ANR	5542225	SizeofOperand	w1		5541961	1					
ANR	5542226	PrimaryExpression	1		5541961	1					
ANR	5542227	ExpressionStatement	w1 [ sizeof ( w1 ) - 1 ] = '\\0'	271:3:8164:8187	5541961	5	True				
ANR	5542228	AssignmentExpression	w1 [ sizeof ( w1 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542229	ArrayIndexing	w1 [ sizeof ( w1 ) - 1 ]		5541961	0					
ANR	5542230	Identifier	w1		5541961	0					
ANR	5542231	AdditiveExpression	sizeof ( w1 ) - 1		5541961	1		-			
ANR	5542232	SizeofExpression	sizeof ( w1 )		5541961	0					
ANR	5542233	Sizeof	sizeof		5541961	0					
ANR	5542234	SizeofOperand	w1		5541961	1					
ANR	5542235	PrimaryExpression	1		5541961	1					
ANR	5542236	PrimaryExpression	'\\0'		5541961	1					
ANR	5542237	ExpressionStatement	optr = ptr	273:3:8193:8201	5541961	6	True				
ANR	5542238	AssignmentExpression	optr = ptr		5541961	0		=			
ANR	5542239	Identifier	optr		5541961	0					
ANR	5542240	Identifier	ptr		5541961	1					
ANR	5542241	ExpressionStatement	"ptr2 = strchr ( ptr , '}' )"	274:3:8206:8230	5541961	7	True				
ANR	5542242	AssignmentExpression	"ptr2 = strchr ( ptr , '}' )"		5541961	0		=			
ANR	5542243	Identifier	ptr2		5541961	0					
ANR	5542244	CallExpression	"strchr ( ptr , '}' )"		5541961	1					
ANR	5542245	Callee	strchr		5541961	0					
ANR	5542246	Identifier	strchr		5541961	0					
ANR	5542247	ArgumentList	ptr		5541961	1					
ANR	5542248	Argument	ptr		5541961	0					
ANR	5542249	Identifier	ptr		5541961	0					
ANR	5542250	Argument	'}'		5541961	1					
ANR	5542251	PrimaryExpression	'}'		5541961	0					
ANR	5542252	IfStatement	if ( ptr2 )		5541961	8					
ANR	5542253	Condition	ptr2	275:7:8239:8242	5541961	0	True				
ANR	5542254	Identifier	ptr2		5541961	0					
ANR	5542255	CompoundStatement		47:13:820:820	5541961	1					
ANR	5542256	ExpressionStatement	ptr = ptr2 + 1	276:4:8251:8265	5541961	0	True				
ANR	5542257	AssignmentExpression	ptr = ptr2 + 1		5541961	0		=			
ANR	5542258	Identifier	ptr		5541961	0					
ANR	5542259	AdditiveExpression	ptr2 + 1		5541961	1		+			
ANR	5542260	Identifier	ptr2		5541961	0					
ANR	5542261	PrimaryExpression	1		5541961	1					
ANR	5542262	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	278:3:8275:8298	5541961	9	True				
ANR	5542263	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5541961	0		=			
ANR	5542264	Identifier	ptr		5541961	0					
ANR	5542265	CallExpression	"strchr ( ptr , ',' )"		5541961	1					
ANR	5542266	Callee	strchr		5541961	0					
ANR	5542267	Identifier	strchr		5541961	0					
ANR	5542268	ArgumentList	ptr		5541961	1					
ANR	5542269	Argument	ptr		5541961	0					
ANR	5542270	Identifier	ptr		5541961	0					
ANR	5542271	Argument	"','"		5541961	1					
ANR	5542272	PrimaryExpression	"','"		5541961	0					
ANR	5542273	IfStatement	if ( ptr )		5541961	10					
ANR	5542274	Condition	ptr	279:7:8307:8309	5541961	0	True				
ANR	5542275	Identifier	ptr		5541961	0					
ANR	5542276	CompoundStatement		51:12:887:887	5541961	1					
ANR	5542277	ExpressionStatement	* ptr = '\\0'	280:4:8318:8329	5541961	0	True				
ANR	5542278	AssignmentExpression	* ptr = '\\0'		5541961	0		=			
ANR	5542279	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542280	UnaryOperator	*		5541961	0					
ANR	5542281	Identifier	ptr		5541961	1					
ANR	5542282	PrimaryExpression	'\\0'		5541961	1					
ANR	5542283	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5541961	1					
ANR	5542284	ForInit	++ ptr ;	281:9:8340:8345	5541961	0	True				
ANR	5542285	UnaryExpression	++ ptr		5541961	0					
ANR	5542286	IncDec	++		5541961	0					
ANR	5542287	Identifier	ptr		5541961	1					
ANR	5542288	Condition	* ptr == ' '	281:16:8347:8357	5541961	1	True				
ANR	5542289	EqualityExpression	* ptr == ' '		5541961	0		==			
ANR	5542290	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542291	UnaryOperator	*		5541961	0					
ANR	5542292	Identifier	ptr		5541961	1					
ANR	5542293	PrimaryExpression	' '		5541961	1					
ANR	5542294	PostIncDecOperationExpression	ptr ++	281:29:8360:8364	5541961	2	True				
ANR	5542295	Identifier	ptr		5541961	0					
ANR	5542296	IncDec	++		5541961	1					
ANR	5542297	CompoundStatement		53:36:942:942	5541961	3					
ANR	5542298	ExpressionStatement		282:5:8374:8374	5541961	0	True				
ANR	5542299	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	284:4:8386:8421	5541961	2	True				
ANR	5542300	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5541961	0					
ANR	5542301	Callee	strncpy		5541961	0					
ANR	5542302	Identifier	strncpy		5541961	0					
ANR	5542303	ArgumentList	w1		5541961	1					
ANR	5542304	Argument	w1		5541961	0					
ANR	5542305	Identifier	w1		5541961	0					
ANR	5542306	Argument	optr		5541961	1					
ANR	5542307	Identifier	optr		5541961	0					
ANR	5542308	Argument	sizeof ( w1 ) - 1		5541961	2					
ANR	5542309	AdditiveExpression	sizeof ( w1 ) - 1		5541961	0		-			
ANR	5542310	SizeofExpression	sizeof ( w1 )		5541961	0					
ANR	5542311	Sizeof	sizeof		5541961	0					
ANR	5542312	SizeofOperand	w1		5541961	1					
ANR	5542313	PrimaryExpression	1		5541961	1					
ANR	5542314	ExpressionStatement	w1 [ sizeof ( w1 ) - 1 ] = '\\0'	285:4:8427:8450	5541961	3	True				
ANR	5542315	AssignmentExpression	w1 [ sizeof ( w1 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542316	ArrayIndexing	w1 [ sizeof ( w1 ) - 1 ]		5541961	0					
ANR	5542317	Identifier	w1		5541961	0					
ANR	5542318	AdditiveExpression	sizeof ( w1 ) - 1		5541961	1		-			
ANR	5542319	SizeofExpression	sizeof ( w1 )		5541961	0					
ANR	5542320	Sizeof	sizeof		5541961	0					
ANR	5542321	SizeofOperand	w1		5541961	1					
ANR	5542322	PrimaryExpression	1		5541961	1					
ANR	5542323	PrimaryExpression	'\\0'		5541961	1					
ANR	5542324	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	286:4:8456:8490	5541961	4	True				
ANR	5542325	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5541961	0					
ANR	5542326	Callee	strncpy		5541961	0					
ANR	5542327	Identifier	strncpy		5541961	0					
ANR	5542328	ArgumentList	w2		5541961	1					
ANR	5542329	Argument	w2		5541961	0					
ANR	5542330	Identifier	w2		5541961	0					
ANR	5542331	Argument	ptr		5541961	1					
ANR	5542332	Identifier	ptr		5541961	0					
ANR	5542333	Argument	sizeof ( w2 ) - 1		5541961	2					
ANR	5542334	AdditiveExpression	sizeof ( w2 ) - 1		5541961	0		-			
ANR	5542335	SizeofExpression	sizeof ( w2 )		5541961	0					
ANR	5542336	Sizeof	sizeof		5541961	0					
ANR	5542337	SizeofOperand	w2		5541961	1					
ANR	5542338	PrimaryExpression	1		5541961	1					
ANR	5542339	ExpressionStatement	w2 [ sizeof ( w2 ) - 1 ] = '\\0'	287:4:8496:8519	5541961	5	True				
ANR	5542340	AssignmentExpression	w2 [ sizeof ( w2 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542341	ArrayIndexing	w2 [ sizeof ( w2 ) - 1 ]		5541961	0					
ANR	5542342	Identifier	w2		5541961	0					
ANR	5542343	AdditiveExpression	sizeof ( w2 ) - 1		5541961	1		-			
ANR	5542344	SizeofExpression	sizeof ( w2 )		5541961	0					
ANR	5542345	Sizeof	sizeof		5541961	0					
ANR	5542346	SizeofOperand	w2		5541961	1					
ANR	5542347	PrimaryExpression	1		5541961	1					
ANR	5542348	PrimaryExpression	'\\0'		5541961	1					
ANR	5542349	ExpressionStatement	optr = ptr	288:4:8525:8533	5541961	6	True				
ANR	5542350	AssignmentExpression	optr = ptr		5541961	0		=			
ANR	5542351	Identifier	optr		5541961	0					
ANR	5542352	Identifier	ptr		5541961	1					
ANR	5542353	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	289:4:8539:8562	5541961	7	True				
ANR	5542354	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5541961	0		=			
ANR	5542355	Identifier	ptr		5541961	0					
ANR	5542356	CallExpression	"strchr ( ptr , ',' )"		5541961	1					
ANR	5542357	Callee	strchr		5541961	0					
ANR	5542358	Identifier	strchr		5541961	0					
ANR	5542359	ArgumentList	ptr		5541961	1					
ANR	5542360	Argument	ptr		5541961	0					
ANR	5542361	Identifier	ptr		5541961	0					
ANR	5542362	Argument	"','"		5541961	1					
ANR	5542363	PrimaryExpression	"','"		5541961	0					
ANR	5542364	IfStatement	if ( ptr )		5541961	8					
ANR	5542365	Condition	ptr	290:8:8572:8574	5541961	0	True				
ANR	5542366	Identifier	ptr		5541961	0					
ANR	5542367	CompoundStatement		62:13:1152:1152	5541961	1					
ANR	5542368	ExpressionStatement	* ptr = '\\0'	291:5:8584:8595	5541961	0	True				
ANR	5542369	AssignmentExpression	* ptr = '\\0'		5541961	0		=			
ANR	5542370	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542371	UnaryOperator	*		5541961	0					
ANR	5542372	Identifier	ptr		5541961	1					
ANR	5542373	PrimaryExpression	'\\0'		5541961	1					
ANR	5542374	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5541961	1					
ANR	5542375	ForInit	++ ptr ;	292:10:8607:8612	5541961	0	True				
ANR	5542376	UnaryExpression	++ ptr		5541961	0					
ANR	5542377	IncDec	++		5541961	0					
ANR	5542378	Identifier	ptr		5541961	1					
ANR	5542379	Condition	* ptr == ' '	292:17:8614:8624	5541961	1	True				
ANR	5542380	EqualityExpression	* ptr == ' '		5541961	0		==			
ANR	5542381	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542382	UnaryOperator	*		5541961	0					
ANR	5542383	Identifier	ptr		5541961	1					
ANR	5542384	PrimaryExpression	' '		5541961	1					
ANR	5542385	PostIncDecOperationExpression	ptr ++	292:30:8627:8631	5541961	2	True				
ANR	5542386	Identifier	ptr		5541961	0					
ANR	5542387	IncDec	++		5541961	1					
ANR	5542388	CompoundStatement		64:37:1209:1209	5541961	3					
ANR	5542389	ExpressionStatement		293:6:8642:8642	5541961	0	True				
ANR	5542390	ExpressionStatement	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"	295:5:8656:8691	5541961	2	True				
ANR	5542391	CallExpression	"strncpy ( w2 , optr , sizeof ( w2 ) - 1 )"		5541961	0					
ANR	5542392	Callee	strncpy		5541961	0					
ANR	5542393	Identifier	strncpy		5541961	0					
ANR	5542394	ArgumentList	w2		5541961	1					
ANR	5542395	Argument	w2		5541961	0					
ANR	5542396	Identifier	w2		5541961	0					
ANR	5542397	Argument	optr		5541961	1					
ANR	5542398	Identifier	optr		5541961	0					
ANR	5542399	Argument	sizeof ( w2 ) - 1		5541961	2					
ANR	5542400	AdditiveExpression	sizeof ( w2 ) - 1		5541961	0		-			
ANR	5542401	SizeofExpression	sizeof ( w2 )		5541961	0					
ANR	5542402	Sizeof	sizeof		5541961	0					
ANR	5542403	SizeofOperand	w2		5541961	1					
ANR	5542404	PrimaryExpression	1		5541961	1					
ANR	5542405	ExpressionStatement	w2 [ sizeof ( w2 ) - 1 ] = '\\0'	296:5:8698:8721	5541961	3	True				
ANR	5542406	AssignmentExpression	w2 [ sizeof ( w2 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542407	ArrayIndexing	w2 [ sizeof ( w2 ) - 1 ]		5541961	0					
ANR	5542408	Identifier	w2		5541961	0					
ANR	5542409	AdditiveExpression	sizeof ( w2 ) - 1		5541961	1		-			
ANR	5542410	SizeofExpression	sizeof ( w2 )		5541961	0					
ANR	5542411	Sizeof	sizeof		5541961	0					
ANR	5542412	SizeofOperand	w2		5541961	1					
ANR	5542413	PrimaryExpression	1		5541961	1					
ANR	5542414	PrimaryExpression	'\\0'		5541961	1					
ANR	5542415	ExpressionStatement	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"	297:5:8728:8762	5541961	4	True				
ANR	5542416	CallExpression	"strncpy ( w3 , ptr , sizeof ( w3 ) - 1 )"		5541961	0					
ANR	5542417	Callee	strncpy		5541961	0					
ANR	5542418	Identifier	strncpy		5541961	0					
ANR	5542419	ArgumentList	w3		5541961	1					
ANR	5542420	Argument	w3		5541961	0					
ANR	5542421	Identifier	w3		5541961	0					
ANR	5542422	Argument	ptr		5541961	1					
ANR	5542423	Identifier	ptr		5541961	0					
ANR	5542424	Argument	sizeof ( w3 ) - 1		5541961	2					
ANR	5542425	AdditiveExpression	sizeof ( w3 ) - 1		5541961	0		-			
ANR	5542426	SizeofExpression	sizeof ( w3 )		5541961	0					
ANR	5542427	Sizeof	sizeof		5541961	0					
ANR	5542428	SizeofOperand	w3		5541961	1					
ANR	5542429	PrimaryExpression	1		5541961	1					
ANR	5542430	ExpressionStatement	w3 [ sizeof ( w3 ) - 1 ] = '\\0'	298:5:8769:8792	5541961	5	True				
ANR	5542431	AssignmentExpression	w3 [ sizeof ( w3 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542432	ArrayIndexing	w3 [ sizeof ( w3 ) - 1 ]		5541961	0					
ANR	5542433	Identifier	w3		5541961	0					
ANR	5542434	AdditiveExpression	sizeof ( w3 ) - 1		5541961	1		-			
ANR	5542435	SizeofExpression	sizeof ( w3 )		5541961	0					
ANR	5542436	Sizeof	sizeof		5541961	0					
ANR	5542437	SizeofOperand	w3		5541961	1					
ANR	5542438	PrimaryExpression	1		5541961	1					
ANR	5542439	PrimaryExpression	'\\0'		5541961	1					
ANR	5542440	ExpressionStatement	optr = ptr	299:5:8799:8807	5541961	6	True				
ANR	5542441	AssignmentExpression	optr = ptr		5541961	0		=			
ANR	5542442	Identifier	optr		5541961	0					
ANR	5542443	Identifier	ptr		5541961	1					
ANR	5542444	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	301:5:8823:8846	5541961	7	True				
ANR	5542445	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5541961	0		=			
ANR	5542446	Identifier	ptr		5541961	0					
ANR	5542447	CallExpression	"strchr ( ptr , ',' )"		5541961	1					
ANR	5542448	Callee	strchr		5541961	0					
ANR	5542449	Identifier	strchr		5541961	0					
ANR	5542450	ArgumentList	ptr		5541961	1					
ANR	5542451	Argument	ptr		5541961	0					
ANR	5542452	Identifier	ptr		5541961	0					
ANR	5542453	Argument	"','"		5541961	1					
ANR	5542454	PrimaryExpression	"','"		5541961	0					
ANR	5542455	IfStatement	if ( ptr )		5541961	8					
ANR	5542456	Condition	ptr	302:9:8857:8859	5541961	0	True				
ANR	5542457	Identifier	ptr		5541961	0					
ANR	5542458	CompoundStatement		74:14:1437:1437	5541961	1					
ANR	5542459	ExpressionStatement	* ptr = '\\0'	303:6:8870:8881	5541961	0	True				
ANR	5542460	AssignmentExpression	* ptr = '\\0'		5541961	0		=			
ANR	5542461	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542462	UnaryOperator	*		5541961	0					
ANR	5542463	Identifier	ptr		5541961	1					
ANR	5542464	PrimaryExpression	'\\0'		5541961	1					
ANR	5542465	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5541961	1					
ANR	5542466	ForInit	++ ptr ;	304:11:8894:8899	5541961	0	True				
ANR	5542467	UnaryExpression	++ ptr		5541961	0					
ANR	5542468	IncDec	++		5541961	0					
ANR	5542469	Identifier	ptr		5541961	1					
ANR	5542470	Condition	* ptr == ' '	304:18:8901:8911	5541961	1	True				
ANR	5542471	EqualityExpression	* ptr == ' '		5541961	0		==			
ANR	5542472	UnaryOperationExpression	* ptr		5541961	0					
ANR	5542473	UnaryOperator	*		5541961	0					
ANR	5542474	Identifier	ptr		5541961	1					
ANR	5542475	PrimaryExpression	' '		5541961	1					
ANR	5542476	PostIncDecOperationExpression	ptr ++	304:31:8914:8918	5541961	2	True				
ANR	5542477	Identifier	ptr		5541961	0					
ANR	5542478	IncDec	++		5541961	1					
ANR	5542479	CompoundStatement		76:38:1496:1496	5541961	3					
ANR	5542480	ExpressionStatement		305:7:8930:8930	5541961	0	True				
ANR	5542481	ExpressionStatement	"strncpy ( w3 , optr , sizeof ( w3 ) - 1 )"	307:6:8946:8981	5541961	2	True				
ANR	5542482	CallExpression	"strncpy ( w3 , optr , sizeof ( w3 ) - 1 )"		5541961	0					
ANR	5542483	Callee	strncpy		5541961	0					
ANR	5542484	Identifier	strncpy		5541961	0					
ANR	5542485	ArgumentList	w3		5541961	1					
ANR	5542486	Argument	w3		5541961	0					
ANR	5542487	Identifier	w3		5541961	0					
ANR	5542488	Argument	optr		5541961	1					
ANR	5542489	Identifier	optr		5541961	0					
ANR	5542490	Argument	sizeof ( w3 ) - 1		5541961	2					
ANR	5542491	AdditiveExpression	sizeof ( w3 ) - 1		5541961	0		-			
ANR	5542492	SizeofExpression	sizeof ( w3 )		5541961	0					
ANR	5542493	Sizeof	sizeof		5541961	0					
ANR	5542494	SizeofOperand	w3		5541961	1					
ANR	5542495	PrimaryExpression	1		5541961	1					
ANR	5542496	ExpressionStatement	w3 [ sizeof ( w3 ) - 1 ] = '\\0'	308:6:8989:9012	5541961	3	True				
ANR	5542497	AssignmentExpression	w3 [ sizeof ( w3 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542498	ArrayIndexing	w3 [ sizeof ( w3 ) - 1 ]		5541961	0					
ANR	5542499	Identifier	w3		5541961	0					
ANR	5542500	AdditiveExpression	sizeof ( w3 ) - 1		5541961	1		-			
ANR	5542501	SizeofExpression	sizeof ( w3 )		5541961	0					
ANR	5542502	Sizeof	sizeof		5541961	0					
ANR	5542503	SizeofOperand	w3		5541961	1					
ANR	5542504	PrimaryExpression	1		5541961	1					
ANR	5542505	PrimaryExpression	'\\0'		5541961	1					
ANR	5542506	ExpressionStatement	"strncpy ( w4 , ptr , sizeof ( w4 ) - 1 )"	309:6:9020:9054	5541961	4	True				
ANR	5542507	CallExpression	"strncpy ( w4 , ptr , sizeof ( w4 ) - 1 )"		5541961	0					
ANR	5542508	Callee	strncpy		5541961	0					
ANR	5542509	Identifier	strncpy		5541961	0					
ANR	5542510	ArgumentList	w4		5541961	1					
ANR	5542511	Argument	w4		5541961	0					
ANR	5542512	Identifier	w4		5541961	0					
ANR	5542513	Argument	ptr		5541961	1					
ANR	5542514	Identifier	ptr		5541961	0					
ANR	5542515	Argument	sizeof ( w4 ) - 1		5541961	2					
ANR	5542516	AdditiveExpression	sizeof ( w4 ) - 1		5541961	0		-			
ANR	5542517	SizeofExpression	sizeof ( w4 )		5541961	0					
ANR	5542518	Sizeof	sizeof		5541961	0					
ANR	5542519	SizeofOperand	w4		5541961	1					
ANR	5542520	PrimaryExpression	1		5541961	1					
ANR	5542521	ExpressionStatement	w4 [ sizeof ( w4 ) - 1 ] = '\\0'	310:6:9062:9085	5541961	5	True				
ANR	5542522	AssignmentExpression	w4 [ sizeof ( w4 ) - 1 ] = '\\0'		5541961	0		=			
ANR	5542523	ArrayIndexing	w4 [ sizeof ( w4 ) - 1 ]		5541961	0					
ANR	5542524	Identifier	w4		5541961	0					
ANR	5542525	AdditiveExpression	sizeof ( w4 ) - 1		5541961	1		-			
ANR	5542526	SizeofExpression	sizeof ( w4 )		5541961	0					
ANR	5542527	Sizeof	sizeof		5541961	0					
ANR	5542528	SizeofOperand	w4		5541961	1					
ANR	5542529	PrimaryExpression	1		5541961	1					
ANR	5542530	PrimaryExpression	'\\0'		5541961	1					
ANR	5542531	CompoundStatement		89:3:1737:1747	5541961	8					
ANR	5542532	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	316:3:9116:9157	5541961	0	True				
ANR	5542533	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5541961	0					
ANR	5542534	IdentifierDeclType	const char * [ ]		5541961	0					
ANR	5542535	Identifier	wa		5541961	1					
ANR	5542536	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5541961	2		=			
ANR	5542537	Identifier	wa		5541961	0					
ANR	5542538	InitializerList	w0		5541961	1					
ANR	5542539	Identifier	w0		5541961	0					
ANR	5542540	Identifier	w1		5541961	1					
ANR	5542541	Identifier	w2		5541961	2					
ANR	5542542	Identifier	w3		5541961	3					
ANR	5542543	Identifier	w4		5541961	4					
ANR	5542544	IdentifierDeclStatement	int nw = 0 ;	317:3:9162:9172	5541961	1	True				
ANR	5542545	IdentifierDecl	nw = 0		5541961	0					
ANR	5542546	IdentifierDeclType	int		5541961	0					
ANR	5542547	Identifier	nw		5541961	1					
ANR	5542548	AssignmentExpression	nw = 0		5541961	2		=			
ANR	5542549	Identifier	nw		5541961	0					
ANR	5542550	PrimaryExpression	0		5541961	1					
ANR	5542551	ForStatement	for ( i = 0 ; i < 4 ; i ++ )		5541961	2					
ANR	5542552	ForInit	i = 0 ;	318:8:9182:9185	5541961	0	True				
ANR	5542553	AssignmentExpression	i = 0		5541961	0		=			
ANR	5542554	Identifier	i		5541961	0					
ANR	5542555	PrimaryExpression	0		5541961	1					
ANR	5542556	Condition	i < 4	318:13:9187:9189	5541961	1	True				
ANR	5542557	RelationalExpression	i < 4		5541961	0		<			
ANR	5542558	Identifier	i		5541961	0					
ANR	5542559	PrimaryExpression	4		5541961	1					
ANR	5542560	PostIncDecOperationExpression	i ++	318:18:9192:9194	5541961	2	True				
ANR	5542561	Identifier	i		5541961	0					
ANR	5542562	IncDec	++		5541961	1					
ANR	5542563	CompoundStatement		90:23:1772:1772	5541961	3					
ANR	5542564	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5541961	0					
ANR	5542565	Condition	wa [ i ] [ 0 ] != '\\0'	319:8:9207:9222	5541961	0	True				
ANR	5542566	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5541961	0		!=			
ANR	5542567	ArrayIndexing	wa [ i ] [ 0 ]		5541961	0					
ANR	5542568	ArrayIndexing	wa [ i ]		5541961	0					
ANR	5542569	Identifier	wa		5541961	0					
ANR	5542570	Identifier	i		5541961	1					
ANR	5542571	PrimaryExpression	0		5541961	1					
ANR	5542572	PrimaryExpression	'\\0'		5541961	1					
ANR	5542573	CompoundStatement		91:26:1800:1800	5541961	1					
ANR	5542574	ExpressionStatement	nw ++	320:5:9232:9236	5541961	0	True				
ANR	5542575	PostIncDecOperationExpression	nw ++		5541961	0					
ANR	5542576	Identifier	nw		5541961	0					
ANR	5542577	IncDec	++		5541961	1					
ANR	5542578	ExpressionStatement	"replace ( nw , wa , str )"	323:3:9252:9273	5541961	3	True				
ANR	5542579	CallExpression	"replace ( nw , wa , str )"		5541961	0					
ANR	5542580	Callee	replace		5541961	0					
ANR	5542581	Identifier	replace		5541961	0					
ANR	5542582	ArgumentList	nw		5541961	1					
ANR	5542583	Argument	nw		5541961	0					
ANR	5542584	Identifier	nw		5541961	0					
ANR	5542585	Argument	wa		5541961	1					
ANR	5542586	Identifier	wa		5541961	0					
ANR	5542587	Argument	str		5541961	2					
ANR	5542588	Identifier	str		5541961	0					
ANR	5542589	CompoundStatement		97:1:1853:1875	5541961	4					
ANR	5542590	IdentifierDeclStatement	char * p = strdup ( str ) ;	325:1:9278:9300	5541961	0	True				
ANR	5542591	IdentifierDecl	* p = strdup ( str )		5541961	0					
ANR	5542592	IdentifierDeclType	char *		5541961	0					
ANR	5542593	Identifier	p		5541961	1					
ANR	5542594	AssignmentExpression	* p = strdup ( str )		5541961	2		=			
ANR	5542595	Identifier	p		5541961	0					
ANR	5542596	CallExpression	strdup ( str )		5541961	1					
ANR	5542597	Callee	strdup		5541961	0					
ANR	5542598	Identifier	strdup		5541961	0					
ANR	5542599	ArgumentList	str		5541961	1					
ANR	5542600	Argument	str		5541961	0					
ANR	5542601	Identifier	str		5541961	0					
ANR	5542602	ExpressionStatement	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"	326:1:9303:9340	5541961	1	True				
ANR	5542603	AssignmentExpression	"p = r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5541961	0		=			
ANR	5542604	Identifier	p		5541961	0					
ANR	5542605	CallExpression	"r_str_replace ( p , ""+ -"" , ""- "" , 0 )"		5541961	1					
ANR	5542606	Callee	r_str_replace		5541961	0					
ANR	5542607	Identifier	r_str_replace		5541961	0					
ANR	5542608	ArgumentList	p		5541961	1					
ANR	5542609	Argument	p		5541961	0					
ANR	5542610	Identifier	p		5541961	0					
ANR	5542611	Argument	"""+ -"""		5541961	1					
ANR	5542612	PrimaryExpression	"""+ -"""		5541961	0					
ANR	5542613	Argument	"""- """		5541961	2					
ANR	5542614	PrimaryExpression	"""- """		5541961	0					
ANR	5542615	Argument	0		5541961	3					
ANR	5542616	PrimaryExpression	0		5541961	0					
ANR	5542617	ExpressionStatement	"p = r_str_replace ( p , ""zero"" , ""0"" , 0 )"	328:1:9365:9402	5541961	2	True				
ANR	5542618	AssignmentExpression	"p = r_str_replace ( p , ""zero"" , ""0"" , 0 )"		5541961	0		=			
ANR	5542619	Identifier	p		5541961	0					
ANR	5542620	CallExpression	"r_str_replace ( p , ""zero"" , ""0"" , 0 )"		5541961	1					
ANR	5542621	Callee	r_str_replace		5541961	0					
ANR	5542622	Identifier	r_str_replace		5541961	0					
ANR	5542623	ArgumentList	p		5541961	1					
ANR	5542624	Argument	p		5541961	0					
ANR	5542625	Identifier	p		5541961	0					
ANR	5542626	Argument	"""zero"""		5541961	1					
ANR	5542627	PrimaryExpression	"""zero"""		5541961	0					
ANR	5542628	Argument	"""0"""		5541961	2					
ANR	5542629	PrimaryExpression	"""0"""		5541961	0					
ANR	5542630	Argument	0		5541961	3					
ANR	5542631	PrimaryExpression	0		5541961	0					
ANR	5542632	IfStatement	"if ( ! memcmp ( p , ""0 = "" , 4 ) )"		5541961	3					
ANR	5542633	Condition	"! memcmp ( p , ""0 = "" , 4 )"	329:5:9409:9430	5541961	0	True				
ANR	5542634	UnaryOperationExpression	"! memcmp ( p , ""0 = "" , 4 )"		5541961	0					
ANR	5542635	UnaryOperator	!		5541961	0					
ANR	5542636	CallExpression	"memcmp ( p , ""0 = "" , 4 )"		5541961	1					
ANR	5542637	Callee	memcmp		5541961	0					
ANR	5542638	Identifier	memcmp		5541961	0					
ANR	5542639	ArgumentList	p		5541961	1					
ANR	5542640	Argument	p		5541961	0					
ANR	5542641	Identifier	p		5541961	0					
ANR	5542642	Argument	"""0 = """		5541961	1					
ANR	5542643	PrimaryExpression	"""0 = """		5541961	0					
ANR	5542644	Argument	4		5541961	2					
ANR	5542645	PrimaryExpression	4		5541961	0					
ANR	5542646	ExpressionStatement	* p = 0	329:29:9433:9439	5541961	1	True				
ANR	5542647	AssignmentExpression	* p = 0		5541961	0		=			
ANR	5542648	UnaryOperationExpression	* p		5541961	0					
ANR	5542649	UnaryOperator	*		5541961	0					
ANR	5542650	Identifier	p		5541961	1					
ANR	5542651	PrimaryExpression	0		5541961	1					
ANR	5542652	IfStatement	"if ( ! strcmp ( w1 , w2 ) )"		5541961	4					
ANR	5542653	Condition	"! strcmp ( w1 , w2 )"	331:5:9460:9475	5541961	0	True				
ANR	5542654	UnaryOperationExpression	"! strcmp ( w1 , w2 )"		5541961	0					
ANR	5542655	UnaryOperator	!		5541961	0					
ANR	5542656	CallExpression	"strcmp ( w1 , w2 )"		5541961	1					
ANR	5542657	Callee	strcmp		5541961	0					
ANR	5542658	Identifier	strcmp		5541961	0					
ANR	5542659	ArgumentList	w1		5541961	1					
ANR	5542660	Argument	w1		5541961	0					
ANR	5542661	Identifier	w1		5541961	0					
ANR	5542662	Argument	w2		5541961	1					
ANR	5542663	Identifier	w2		5541961	0					
ANR	5542664	CompoundStatement		104:2:2057:2074	5541961	1					
ANR	5542665	IdentifierDeclStatement	"char a [ 32 ] , b [ 32 ] ;"	332:2:9482:9499	5541961	0	True				
ANR	5542666	IdentifierDecl	a [ 32 ]		5541961	0					
ANR	5542667	IdentifierDeclType	char [ 32 ]		5541961	0					
ANR	5542668	Identifier	a		5541961	1					
ANR	5542669	PrimaryExpression	32		5541961	2					
ANR	5542670	IdentifierDecl	b [ 32 ]		5541961	1					
ANR	5542671	IdentifierDeclType	char [ 32 ]		5541961	0					
ANR	5542672	Identifier	b		5541961	1					
ANR	5542673	PrimaryExpression	32		5541961	2					
ANR	5542674	Statement	define	333:1:9502:9507	5541961	1	True				
ANR	5542675	Statement	REPLACE	333:8:9509:9515	5541961	2	True				
ANR	5542676	Statement	(	333:15:9516:9516	5541961	3	True				
ANR	5542677	Statement	x	333:16:9517:9517	5541961	4	True				
ANR	5542678	Statement	","	333:17:9518:9518	5541961	5	True				
ANR	5542679	Statement	y	333:18:9519:9519	5541961	6	True				
ANR	5542680	Statement	)	333:19:9520:9520	5541961	7	True				
ANR	5542681	DoStatement	do		5541961	8					
ANR	5542682	CompoundStatement		107:2:2160:2204	5541961	0					
ANR	5542683	IdentifierDeclStatement	"int snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 ) ;"	334:2:9531:9579	5541961	0	True				
ANR	5542684	IdentifierDecl	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5541961	0					
ANR	5542685	IdentifierDeclType	int		5541961	0					
ANR	5542686	Identifier	snprintf_len1_		5541961	1					
ANR	5542687	AssignmentExpression	"snprintf_len1_ = snprintf ( a , 32 , x , w1 , w1 )"		5541961	2		=			
ANR	5542688	Identifier	snprintf_len1_		5541961	0					
ANR	5542689	CallExpression	"snprintf ( a , 32 , x , w1 , w1 )"		5541961	1					
ANR	5542690	Callee	snprintf		5541961	0					
ANR	5542691	Identifier	snprintf		5541961	0					
ANR	5542692	ArgumentList	a		5541961	1					
ANR	5542693	Argument	a		5541961	0					
ANR	5542694	Identifier	a		5541961	0					
ANR	5542695	Argument	32		5541961	1					
ANR	5542696	PrimaryExpression	32		5541961	0					
ANR	5542697	Argument	x		5541961	2					
ANR	5542698	Identifier	x		5541961	0					
ANR	5542699	Argument	w1		5541961	3					
ANR	5542700	Identifier	w1		5541961	0					
ANR	5542701	Argument	w1		5541961	4					
ANR	5542702	Identifier	w1		5541961	0					
ANR	5542703	IdentifierDeclStatement	"int snprintf_len2_ = snprintf ( b , 32 , y , w1 ) ;"	335:2:9585:9629	5541961	1	True				
ANR	5542704	IdentifierDecl	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5541961	0					
ANR	5542705	IdentifierDeclType	int		5541961	0					
ANR	5542706	Identifier	snprintf_len2_		5541961	1					
ANR	5542707	AssignmentExpression	"snprintf_len2_ = snprintf ( b , 32 , y , w1 )"		5541961	2		=			
ANR	5542708	Identifier	snprintf_len2_		5541961	0					
ANR	5542709	CallExpression	"snprintf ( b , 32 , y , w1 )"		5541961	1					
ANR	5542710	Callee	snprintf		5541961	0					
ANR	5542711	Identifier	snprintf		5541961	0					
ANR	5542712	ArgumentList	b		5541961	1					
ANR	5542713	Argument	b		5541961	0					
ANR	5542714	Identifier	b		5541961	0					
ANR	5542715	Argument	32		5541961	1					
ANR	5542716	PrimaryExpression	32		5541961	0					
ANR	5542717	Argument	y		5541961	2					
ANR	5542718	Identifier	y		5541961	0					
ANR	5542719	Argument	w1		5541961	3					
ANR	5542720	Identifier	w1		5541961	0					
ANR	5542721	IfStatement	if ( snprintf_len1_ < 32 && snprintf_len2_ < 32 )		5541961	2					
ANR	5542722	Condition	snprintf_len1_ < 32 && snprintf_len2_ < 32	336:6:9639:9680	5541961	0	True				
ANR	5542723	AndExpression	snprintf_len1_ < 32 && snprintf_len2_ < 32		5541961	0		&&			
ANR	5542724	RelationalExpression	snprintf_len1_ < 32		5541961	0		<			
ANR	5542725	Identifier	snprintf_len1_		5541961	0					
ANR	5542726	PrimaryExpression	32		5541961	1					
ANR	5542727	RelationalExpression	snprintf_len2_ < 32		5541961	1		<			
ANR	5542728	Identifier	snprintf_len2_		5541961	0					
ANR	5542729	PrimaryExpression	32		5541961	1					
ANR	5542730	CompoundStatement		108:50:2258:2258	5541961	1					
ANR	5542731	ExpressionStatement	"p = r_str_replace ( p , a , b , 0 )"	337:3:9690:9720	5541961	0	True				
ANR	5542732	AssignmentExpression	"p = r_str_replace ( p , a , b , 0 )"		5541961	0		=			
ANR	5542733	Identifier	p		5541961	0					
ANR	5542734	CallExpression	"r_str_replace ( p , a , b , 0 )"		5541961	1					
ANR	5542735	Callee	r_str_replace		5541961	0					
ANR	5542736	Identifier	r_str_replace		5541961	0					
ANR	5542737	ArgumentList	p		5541961	1					
ANR	5542738	Argument	p		5541961	0					
ANR	5542739	Identifier	p		5541961	0					
ANR	5542740	Argument	a		5541961	1					
ANR	5542741	Identifier	a		5541961	0					
ANR	5542742	Argument	b		5541961	2					
ANR	5542743	Identifier	b		5541961	0					
ANR	5542744	Argument	0		5541961	3					
ANR	5542745	PrimaryExpression	0		5541961	0					
ANR	5542746	Condition	0	339:10:9740:9740	5541961	1	True				
ANR	5542747	PrimaryExpression	0		5541961	0					
ANR	5542748	ExpressionStatement	"REPLACE ( ""%s = %s -"" , ""%s -="" )"	343:2:9800:9830	5541961	9	True				
ANR	5542749	CallExpression	"REPLACE ( ""%s = %s -"" , ""%s -="" )"		5541961	0					
ANR	5542750	Callee	REPLACE		5541961	0					
ANR	5542751	Identifier	REPLACE		5541961	0					
ANR	5542752	ArgumentList	"""%s = %s -"""		5541961	1					
ANR	5542753	Argument	"""%s = %s -"""		5541961	0					
ANR	5542754	PrimaryExpression	"""%s = %s -"""		5541961	0					
ANR	5542755	Argument	"""%s -="""		5541961	1					
ANR	5542756	PrimaryExpression	"""%s -="""		5541961	0					
ANR	5542757	ExpressionStatement	"REPLACE ( ""%s = %s &"" , ""%s &="" )"	344:2:9834:9864	5541961	10	True				
ANR	5542758	CallExpression	"REPLACE ( ""%s = %s &"" , ""%s &="" )"		5541961	0					
ANR	5542759	Callee	REPLACE		5541961	0					
ANR	5542760	Identifier	REPLACE		5541961	0					
ANR	5542761	ArgumentList	"""%s = %s &"""		5541961	1					
ANR	5542762	Argument	"""%s = %s &"""		5541961	0					
ANR	5542763	PrimaryExpression	"""%s = %s &"""		5541961	0					
ANR	5542764	Argument	"""%s &="""		5541961	1					
ANR	5542765	PrimaryExpression	"""%s &="""		5541961	0					
ANR	5542766	ExpressionStatement	"REPLACE ( ""%s = %s |"" , ""%s |="" )"	345:2:9868:9898	5541961	11	True				
ANR	5542767	CallExpression	"REPLACE ( ""%s = %s |"" , ""%s |="" )"		5541961	0					
ANR	5542768	Callee	REPLACE		5541961	0					
ANR	5542769	Identifier	REPLACE		5541961	0					
ANR	5542770	ArgumentList	"""%s = %s |"""		5541961	1					
ANR	5542771	Argument	"""%s = %s |"""		5541961	0					
ANR	5542772	PrimaryExpression	"""%s = %s |"""		5541961	0					
ANR	5542773	Argument	"""%s |="""		5541961	1					
ANR	5542774	PrimaryExpression	"""%s |="""		5541961	0					
ANR	5542775	ExpressionStatement	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"	346:2:9902:9932	5541961	12	True				
ANR	5542776	CallExpression	"REPLACE ( ""%s = %s ^"" , ""%s ^="" )"		5541961	0					
ANR	5542777	Callee	REPLACE		5541961	0					
ANR	5542778	Identifier	REPLACE		5541961	0					
ANR	5542779	ArgumentList	"""%s = %s ^"""		5541961	1					
ANR	5542780	Argument	"""%s = %s ^"""		5541961	0					
ANR	5542781	PrimaryExpression	"""%s = %s ^"""		5541961	0					
ANR	5542782	Argument	"""%s ^="""		5541961	1					
ANR	5542783	PrimaryExpression	"""%s ^="""		5541961	0					
ANR	5542784	ExpressionStatement	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"	347:2:9936:9968	5541961	13	True				
ANR	5542785	CallExpression	"REPLACE ( ""%s = %s >>"" , ""%s >>="" )"		5541961	0					
ANR	5542786	Callee	REPLACE		5541961	0					
ANR	5542787	Identifier	REPLACE		5541961	0					
ANR	5542788	ArgumentList	"""%s = %s >>"""		5541961	1					
ANR	5542789	Argument	"""%s = %s >>"""		5541961	0					
ANR	5542790	PrimaryExpression	"""%s = %s >>"""		5541961	0					
ANR	5542791	Argument	"""%s >>="""		5541961	1					
ANR	5542792	PrimaryExpression	"""%s >>="""		5541961	0					
ANR	5542793	ExpressionStatement	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"	348:2:9972:10004	5541961	14	True				
ANR	5542794	CallExpression	"REPLACE ( ""%s = %s <<"" , ""%s <<="" )"		5541961	0					
ANR	5542795	Callee	REPLACE		5541961	0					
ANR	5542796	Identifier	REPLACE		5541961	0					
ANR	5542797	ArgumentList	"""%s = %s <<"""		5541961	1					
ANR	5542798	Argument	"""%s = %s <<"""		5541961	0					
ANR	5542799	PrimaryExpression	"""%s = %s <<"""		5541961	0					
ANR	5542800	Argument	"""%s <<="""		5541961	1					
ANR	5542801	PrimaryExpression	"""%s <<="""		5541961	0					
ANR	5542802	ExpressionStatement	"strcpy ( str , p )"	350:1:10010:10025	5541961	5	True				
ANR	5542803	CallExpression	"strcpy ( str , p )"		5541961	0					
ANR	5542804	Callee	strcpy		5541961	0					
ANR	5542805	Identifier	strcpy		5541961	0					
ANR	5542806	ArgumentList	str		5541961	1					
ANR	5542807	Argument	str		5541961	0					
ANR	5542808	Identifier	str		5541961	0					
ANR	5542809	Argument	p		5541961	1					
ANR	5542810	Identifier	p		5541961	0					
ANR	5542811	ExpressionStatement	free ( p )	351:1:10028:10036	5541961	6	True				
ANR	5542812	CallExpression	free ( p )		5541961	0					
ANR	5542813	Callee	free		5541961	0					
ANR	5542814	Identifier	free		5541961	0					
ANR	5542815	ArgumentList	p		5541961	1					
ANR	5542816	Argument	p		5541961	0					
ANR	5542817	Identifier	p		5541961	0					
ANR	5542818	ExpressionStatement	free ( buf )	355:1:10048:10058	5541961	12	True				
ANR	5542819	CallExpression	free ( buf )		5541961	0					
ANR	5542820	Callee	free		5541961	0					
ANR	5542821	Identifier	free		5541961	0					
ANR	5542822	ArgumentList	buf		5541961	1					
ANR	5542823	Argument	buf		5541961	0					
ANR	5542824	Identifier	buf		5541961	0					
ANR	5542825	ReturnStatement	return true ;	356:1:10061:10072	5541961	13	True				
ANR	5542826	Identifier	true		5541961	0					
ANR	5542827	ReturnType	static int		5541961	1					
ANR	5542828	Identifier	parse		5541961	2					
ANR	5542829	ParameterList	"RParse * p , const char * data , char * str"		5541961	3					
ANR	5542830	Parameter	RParse * p	229:17:7384:7392	5541961	0	True				
ANR	5542831	ParameterType	RParse *		5541961	0					
ANR	5542832	Identifier	p		5541961	1					
ANR	5542833	Parameter	const char * data	229:28:7395:7410	5541961	1	True				
ANR	5542834	ParameterType	const char *		5541961	0					
ANR	5542835	Identifier	data		5541961	1					
ANR	5542836	Parameter	char * str	229:46:7413:7421	5541961	2	True				
ANR	5542837	ParameterType	char *		5541961	0					
ANR	5542838	Identifier	str		5541961	1					
ANR	5542839	CFGEntryNode	ENTRY		5541961		True				
ANR	5542840	CFGExitNode	EXIT		5541961		True				
ANR	5542841	Symbol	* w4		5541961						
ANR	5542842	Symbol	* w3		5541961						
ANR	5542843	Symbol	* w2		5541961						
ANR	5542844	Symbol	* w1		5541961						
ANR	5542845	Symbol	data		5541961						
ANR	5542846	Symbol	strchr		5541961						
ANR	5542847	Symbol	nw		5541961						
ANR	5542848	Symbol	wa		5541961						
ANR	5542849	Symbol	strlen		5541961						
ANR	5542850	Symbol	* wa		5541961						
ANR	5542851	Symbol	memcmp		5541961						
ANR	5542852	Symbol	len		5541961						
ANR	5542853	Symbol	r_str_replace		5541961						
ANR	5542854	Symbol	* ptr		5541961						
ANR	5542855	Symbol	w0		5541961						
ANR	5542856	Symbol	w1		5541961						
ANR	5542857	Symbol	w2		5541961						
ANR	5542858	Symbol	* str		5541961						
ANR	5542859	Symbol	w3		5541961						
ANR	5542860	Symbol	* w0		5541961						
ANR	5542861	Symbol	w4		5541961						
ANR	5542862	Symbol	snprintf_len1_		5541961						
ANR	5542863	Symbol	snprintf		5541961						
ANR	5542864	Symbol	strcmp		5541961						
ANR	5542865	Symbol	malloc		5541961						
ANR	5542866	Symbol	a		5541961						
ANR	5542867	Symbol	* buf		5541961						
ANR	5542868	Symbol	* * i		5541961						
ANR	5542869	Symbol	b		5541961						
ANR	5542870	Symbol	false		5541961						
ANR	5542871	Symbol	i		5541961						
ANR	5542872	Symbol	optr		5541961						
ANR	5542873	Symbol	ptr		5541961						
ANR	5542874	Symbol	p		5541961						
ANR	5542875	Symbol	str		5541961						
ANR	5542876	Symbol	ptr2		5541961						
ANR	5542877	Symbol	snprintf_len2_		5541961						
ANR	5542878	Symbol	buf		5541961						
ANR	5542879	Symbol	* i		5541961						
ANR	5542880	Symbol	* * wa		5541961						
ANR	5542881	Symbol	true		5541961						
ANR	5542882	Symbol	x		5541961						
ANR	5542883	Symbol	y		5541961						
ANR	5542884	Symbol	* p		5541961						
ANR	5542885	Symbol	strdup		5541961						
ANR	5542886	DeclStmt									
ANR	5542887	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_dalvik_pseudo
ANR	5542888	DeclStmt									
ANR	5542889	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
