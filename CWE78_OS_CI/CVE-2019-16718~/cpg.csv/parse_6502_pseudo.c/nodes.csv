command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5534088	File	data/converged/CVE-2019-16718~_radare2/parse_6502_pseudo.c								
ANR	5534089	ClassDef	<unnamed>	13:8:223:280							
ANR	5534090	DeclStmt									
ANR	5534091	Decl									ADDR_TYPE
ANR	5534092	Function	replace	19:0:283:2418							
ANR	5534093	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr , ADDR_TYPE type)"		5534092	0					
ANR	5534094	CompoundStatement		19:79:362:2418	5534092	0					
ANR	5534095	IdentifierDeclStatement	"int i , j , k ;"	20:1:365:376	5534092	0	True				
ANR	5534096	IdentifierDecl	i		5534092	0					
ANR	5534097	IdentifierDeclType	int		5534092	0					
ANR	5534098	Identifier	i		5534092	1					
ANR	5534099	IdentifierDecl	j		5534092	1					
ANR	5534100	IdentifierDeclType	int		5534092	0					
ANR	5534101	Identifier	j		5534092	1					
ANR	5534102	IdentifierDecl	k		5534092	2					
ANR	5534103	IdentifierDeclType	int		5534092	0					
ANR	5534104	Identifier	k		5534092	1					
ANR	5534105	ClassDefStatement	"struct { int narg ; char * op ; char * str ; } ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } } ;"	21:1:379:1611	5534092	1	True				
ANR	5534106	IdentifierDecl	"ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } }"		5534092	0					
ANR	5534107	IdentifierDeclType	 [ ]		5534092	0					
ANR	5534108	Identifier	ops		5534092	1					
ANR	5534109	AssignmentExpression	"ops [ ] = { { 1 , ""lda"" , ""a = 1"" } , { 2 , ""lda"" , ""a = (1+2)"" } , { 1 , ""ldx"" , ""x = 1"" } , { 2 , ""ldx"" , ""x = (1+2)"" } , { 1 , ""ldy"" , ""y = 1"" } , { 2 , ""ldy"" , ""y = (1+2)"" } , { 1 , ""sta"" , ""[1] = a"" } , { 2 , ""sta"" , ""[1+2 ] = a"" } , { 1 , ""stx"" , ""[1] = x"" } , { 2 , ""stx"" , ""[1+2] = x"" } , { 1 , ""sty"" , ""[1] = y"" } , { 2 , ""sty"" , ""[1+2] = y"" } , { 1 , ""dec"" , ""1--"" } , { 2 , ""dec"" , ""(1+2)--"" } , { 0 , ""dcx"" , ""x--"" } , { 0 , ""dcy"" , ""y--"" } , { 1 , ""inc"" , ""1++"" } , { 2 , ""inc"" , ""(1+2)++"" } , { 0 , ""inx"" , ""x++"" } , { 0 , ""iny"" , ""y++"" } , { 1 , ""adc"" , ""a += 1"" } , { 2 , ""adc"" , ""a += (1+2)"" } , { 1 , ""sbc"" , ""a -= 1"" } , { 2 , ""sbc"" , ""a -= (1+2)"" } , { 0 , ""pha"" , ""push a"" } , { 1 , ""and"" , ""a &= 1"" } , { 2 , ""and"" , ""a &= (1+2)"" } , { 1 , ""eor"" , ""a ^= 1"" } , { 2 , ""eor"" , ""a ^= (1+2)"" } , { 1 , ""ora"" , ""a |= 1"" } , { 2 , ""ora"" , ""a |= (1+2)"" } , { 0 , ""tax"" , ""x = a"" } , { 0 , ""tay"" , ""y = a"" } , { 0 , ""txa"" , ""a = x"" } , { 0 , ""tya"" , ""a = y"" } , { 0 , ""tsx"" , ""x = s"" } , { 0 , ""txs"" , ""s = x"" } , { 0 , ""brk"" , ""break"" } , { 0 , ""clc"" , ""clear_carry"" } , { 0 , ""cld"" , ""clear_decimal"" } , { 0 , ""cli"" , ""clear_interrupt"" } , { 0 , ""clv"" , ""clear_overflow"" } , { 0 , ""sec"" , ""set_carry"" } , { 0 , ""sed"" , ""set_decimal"" } , { 0 , ""sei"" , ""set_interrupt"" } , { 1 , ""jsr"" , ""1()"" } , { 0 , NULL } }"		5534092	2		=			
ANR	5534110	Identifier	ops		5534092	0					
ANR	5534111	InitializerList	1		5534092	1					
ANR	5534112	InitializerList	1		5534092	0					
ANR	5534113	PrimaryExpression	1		5534092	0					
ANR	5534114	PrimaryExpression	"""lda"""		5534092	1					
ANR	5534115	PrimaryExpression	"""a = 1"""		5534092	2					
ANR	5534116	InitializerList	2		5534092	1					
ANR	5534117	PrimaryExpression	2		5534092	0					
ANR	5534118	PrimaryExpression	"""lda"""		5534092	1					
ANR	5534119	PrimaryExpression	"""a = (1+2)"""		5534092	2					
ANR	5534120	InitializerList	1		5534092	2					
ANR	5534121	PrimaryExpression	1		5534092	0					
ANR	5534122	PrimaryExpression	"""ldx"""		5534092	1					
ANR	5534123	PrimaryExpression	"""x = 1"""		5534092	2					
ANR	5534124	InitializerList	2		5534092	3					
ANR	5534125	PrimaryExpression	2		5534092	0					
ANR	5534126	PrimaryExpression	"""ldx"""		5534092	1					
ANR	5534127	PrimaryExpression	"""x = (1+2)"""		5534092	2					
ANR	5534128	InitializerList	1		5534092	4					
ANR	5534129	PrimaryExpression	1		5534092	0					
ANR	5534130	PrimaryExpression	"""ldy"""		5534092	1					
ANR	5534131	PrimaryExpression	"""y = 1"""		5534092	2					
ANR	5534132	InitializerList	2		5534092	5					
ANR	5534133	PrimaryExpression	2		5534092	0					
ANR	5534134	PrimaryExpression	"""ldy"""		5534092	1					
ANR	5534135	PrimaryExpression	"""y = (1+2)"""		5534092	2					
ANR	5534136	InitializerList	1		5534092	6					
ANR	5534137	PrimaryExpression	1		5534092	0					
ANR	5534138	PrimaryExpression	"""sta"""		5534092	1					
ANR	5534139	PrimaryExpression	"""[1] = a"""		5534092	2					
ANR	5534140	InitializerList	2		5534092	7					
ANR	5534141	PrimaryExpression	2		5534092	0					
ANR	5534142	PrimaryExpression	"""sta"""		5534092	1					
ANR	5534143	PrimaryExpression	"""[1+2 ] = a"""		5534092	2					
ANR	5534144	InitializerList	1		5534092	8					
ANR	5534145	PrimaryExpression	1		5534092	0					
ANR	5534146	PrimaryExpression	"""stx"""		5534092	1					
ANR	5534147	PrimaryExpression	"""[1] = x"""		5534092	2					
ANR	5534148	InitializerList	2		5534092	9					
ANR	5534149	PrimaryExpression	2		5534092	0					
ANR	5534150	PrimaryExpression	"""stx"""		5534092	1					
ANR	5534151	PrimaryExpression	"""[1+2] = x"""		5534092	2					
ANR	5534152	InitializerList	1		5534092	10					
ANR	5534153	PrimaryExpression	1		5534092	0					
ANR	5534154	PrimaryExpression	"""sty"""		5534092	1					
ANR	5534155	PrimaryExpression	"""[1] = y"""		5534092	2					
ANR	5534156	InitializerList	2		5534092	11					
ANR	5534157	PrimaryExpression	2		5534092	0					
ANR	5534158	PrimaryExpression	"""sty"""		5534092	1					
ANR	5534159	PrimaryExpression	"""[1+2] = y"""		5534092	2					
ANR	5534160	InitializerList	1		5534092	12					
ANR	5534161	PrimaryExpression	1		5534092	0					
ANR	5534162	PrimaryExpression	"""dec"""		5534092	1					
ANR	5534163	PrimaryExpression	"""1--"""		5534092	2					
ANR	5534164	InitializerList	2		5534092	13					
ANR	5534165	PrimaryExpression	2		5534092	0					
ANR	5534166	PrimaryExpression	"""dec"""		5534092	1					
ANR	5534167	PrimaryExpression	"""(1+2)--"""		5534092	2					
ANR	5534168	InitializerList	0		5534092	14					
ANR	5534169	PrimaryExpression	0		5534092	0					
ANR	5534170	PrimaryExpression	"""dcx"""		5534092	1					
ANR	5534171	PrimaryExpression	"""x--"""		5534092	2					
ANR	5534172	InitializerList	0		5534092	15					
ANR	5534173	PrimaryExpression	0		5534092	0					
ANR	5534174	PrimaryExpression	"""dcy"""		5534092	1					
ANR	5534175	PrimaryExpression	"""y--"""		5534092	2					
ANR	5534176	InitializerList	1		5534092	16					
ANR	5534177	PrimaryExpression	1		5534092	0					
ANR	5534178	PrimaryExpression	"""inc"""		5534092	1					
ANR	5534179	PrimaryExpression	"""1++"""		5534092	2					
ANR	5534180	InitializerList	2		5534092	17					
ANR	5534181	PrimaryExpression	2		5534092	0					
ANR	5534182	PrimaryExpression	"""inc"""		5534092	1					
ANR	5534183	PrimaryExpression	"""(1+2)++"""		5534092	2					
ANR	5534184	InitializerList	0		5534092	18					
ANR	5534185	PrimaryExpression	0		5534092	0					
ANR	5534186	PrimaryExpression	"""inx"""		5534092	1					
ANR	5534187	PrimaryExpression	"""x++"""		5534092	2					
ANR	5534188	InitializerList	0		5534092	19					
ANR	5534189	PrimaryExpression	0		5534092	0					
ANR	5534190	PrimaryExpression	"""iny"""		5534092	1					
ANR	5534191	PrimaryExpression	"""y++"""		5534092	2					
ANR	5534192	InitializerList	1		5534092	20					
ANR	5534193	PrimaryExpression	1		5534092	0					
ANR	5534194	PrimaryExpression	"""adc"""		5534092	1					
ANR	5534195	PrimaryExpression	"""a += 1"""		5534092	2					
ANR	5534196	InitializerList	2		5534092	21					
ANR	5534197	PrimaryExpression	2		5534092	0					
ANR	5534198	PrimaryExpression	"""adc"""		5534092	1					
ANR	5534199	PrimaryExpression	"""a += (1+2)"""		5534092	2					
ANR	5534200	InitializerList	1		5534092	22					
ANR	5534201	PrimaryExpression	1		5534092	0					
ANR	5534202	PrimaryExpression	"""sbc"""		5534092	1					
ANR	5534203	PrimaryExpression	"""a -= 1"""		5534092	2					
ANR	5534204	InitializerList	2		5534092	23					
ANR	5534205	PrimaryExpression	2		5534092	0					
ANR	5534206	PrimaryExpression	"""sbc"""		5534092	1					
ANR	5534207	PrimaryExpression	"""a -= (1+2)"""		5534092	2					
ANR	5534208	InitializerList	0		5534092	24					
ANR	5534209	PrimaryExpression	0		5534092	0					
ANR	5534210	PrimaryExpression	"""pha"""		5534092	1					
ANR	5534211	PrimaryExpression	"""push a"""		5534092	2					
ANR	5534212	InitializerList	1		5534092	25					
ANR	5534213	PrimaryExpression	1		5534092	0					
ANR	5534214	PrimaryExpression	"""and"""		5534092	1					
ANR	5534215	PrimaryExpression	"""a &= 1"""		5534092	2					
ANR	5534216	InitializerList	2		5534092	26					
ANR	5534217	PrimaryExpression	2		5534092	0					
ANR	5534218	PrimaryExpression	"""and"""		5534092	1					
ANR	5534219	PrimaryExpression	"""a &= (1+2)"""		5534092	2					
ANR	5534220	InitializerList	1		5534092	27					
ANR	5534221	PrimaryExpression	1		5534092	0					
ANR	5534222	PrimaryExpression	"""eor"""		5534092	1					
ANR	5534223	PrimaryExpression	"""a ^= 1"""		5534092	2					
ANR	5534224	InitializerList	2		5534092	28					
ANR	5534225	PrimaryExpression	2		5534092	0					
ANR	5534226	PrimaryExpression	"""eor"""		5534092	1					
ANR	5534227	PrimaryExpression	"""a ^= (1+2)"""		5534092	2					
ANR	5534228	InitializerList	1		5534092	29					
ANR	5534229	PrimaryExpression	1		5534092	0					
ANR	5534230	PrimaryExpression	"""ora"""		5534092	1					
ANR	5534231	PrimaryExpression	"""a |= 1"""		5534092	2					
ANR	5534232	InitializerList	2		5534092	30					
ANR	5534233	PrimaryExpression	2		5534092	0					
ANR	5534234	PrimaryExpression	"""ora"""		5534092	1					
ANR	5534235	PrimaryExpression	"""a |= (1+2)"""		5534092	2					
ANR	5534236	InitializerList	0		5534092	31					
ANR	5534237	PrimaryExpression	0		5534092	0					
ANR	5534238	PrimaryExpression	"""tax"""		5534092	1					
ANR	5534239	PrimaryExpression	"""x = a"""		5534092	2					
ANR	5534240	InitializerList	0		5534092	32					
ANR	5534241	PrimaryExpression	0		5534092	0					
ANR	5534242	PrimaryExpression	"""tay"""		5534092	1					
ANR	5534243	PrimaryExpression	"""y = a"""		5534092	2					
ANR	5534244	InitializerList	0		5534092	33					
ANR	5534245	PrimaryExpression	0		5534092	0					
ANR	5534246	PrimaryExpression	"""txa"""		5534092	1					
ANR	5534247	PrimaryExpression	"""a = x"""		5534092	2					
ANR	5534248	InitializerList	0		5534092	34					
ANR	5534249	PrimaryExpression	0		5534092	0					
ANR	5534250	PrimaryExpression	"""tya"""		5534092	1					
ANR	5534251	PrimaryExpression	"""a = y"""		5534092	2					
ANR	5534252	InitializerList	0		5534092	35					
ANR	5534253	PrimaryExpression	0		5534092	0					
ANR	5534254	PrimaryExpression	"""tsx"""		5534092	1					
ANR	5534255	PrimaryExpression	"""x = s"""		5534092	2					
ANR	5534256	InitializerList	0		5534092	36					
ANR	5534257	PrimaryExpression	0		5534092	0					
ANR	5534258	PrimaryExpression	"""txs"""		5534092	1					
ANR	5534259	PrimaryExpression	"""s = x"""		5534092	2					
ANR	5534260	InitializerList	0		5534092	37					
ANR	5534261	PrimaryExpression	0		5534092	0					
ANR	5534262	PrimaryExpression	"""brk"""		5534092	1					
ANR	5534263	PrimaryExpression	"""break"""		5534092	2					
ANR	5534264	InitializerList	0		5534092	38					
ANR	5534265	PrimaryExpression	0		5534092	0					
ANR	5534266	PrimaryExpression	"""clc"""		5534092	1					
ANR	5534267	PrimaryExpression	"""clear_carry"""		5534092	2					
ANR	5534268	InitializerList	0		5534092	39					
ANR	5534269	PrimaryExpression	0		5534092	0					
ANR	5534270	PrimaryExpression	"""cld"""		5534092	1					
ANR	5534271	PrimaryExpression	"""clear_decimal"""		5534092	2					
ANR	5534272	InitializerList	0		5534092	40					
ANR	5534273	PrimaryExpression	0		5534092	0					
ANR	5534274	PrimaryExpression	"""cli"""		5534092	1					
ANR	5534275	PrimaryExpression	"""clear_interrupt"""		5534092	2					
ANR	5534276	InitializerList	0		5534092	41					
ANR	5534277	PrimaryExpression	0		5534092	0					
ANR	5534278	PrimaryExpression	"""clv"""		5534092	1					
ANR	5534279	PrimaryExpression	"""clear_overflow"""		5534092	2					
ANR	5534280	InitializerList	0		5534092	42					
ANR	5534281	PrimaryExpression	0		5534092	0					
ANR	5534282	PrimaryExpression	"""sec"""		5534092	1					
ANR	5534283	PrimaryExpression	"""set_carry"""		5534092	2					
ANR	5534284	InitializerList	0		5534092	43					
ANR	5534285	PrimaryExpression	0		5534092	0					
ANR	5534286	PrimaryExpression	"""sed"""		5534092	1					
ANR	5534287	PrimaryExpression	"""set_decimal"""		5534092	2					
ANR	5534288	InitializerList	0		5534092	44					
ANR	5534289	PrimaryExpression	0		5534092	0					
ANR	5534290	PrimaryExpression	"""sei"""		5534092	1					
ANR	5534291	PrimaryExpression	"""set_interrupt"""		5534092	2					
ANR	5534292	InitializerList	1		5534092	45					
ANR	5534293	PrimaryExpression	1		5534092	0					
ANR	5534294	PrimaryExpression	"""jsr"""		5534092	1					
ANR	5534295	PrimaryExpression	"""1()"""		5534092	2					
ANR	5534296	InitializerList	0		5534092	46					
ANR	5534297	PrimaryExpression	0		5534092	0					
ANR	5534298	Identifier	NULL		5534092	1					
ANR	5534299	IfStatement	if ( ! newstr )		5534092	2					
ANR	5534300	Condition	! newstr	73:5:1618:1624	5534092	0	True				
ANR	5534301	UnaryOperationExpression	! newstr		5534092	0					
ANR	5534302	UnaryOperator	!		5534092	0					
ANR	5534303	Identifier	newstr		5534092	1					
ANR	5534304	CompoundStatement		55:14:1264:1264	5534092	1					
ANR	5534305	ReturnStatement	return false ;	74:2:1631:1643	5534092	0	True				
ANR	5534306	Identifier	false		5534092	0					
ANR	5534307	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5534092	3					
ANR	5534308	ForInit	i = 0 ;	77:6:1655:1660	5534092	0	True				
ANR	5534309	AssignmentExpression	i = 0		5534092	0		=			
ANR	5534310	Identifier	i		5534092	0					
ANR	5534311	PrimaryExpression	0		5534092	1					
ANR	5534312	Condition	ops [ i ] . op != NULL	77:13:1662:1678	5534092	1	True				
ANR	5534313	EqualityExpression	ops [ i ] . op != NULL		5534092	0		!=			
ANR	5534314	MemberAccess	ops [ i ] . op		5534092	0					
ANR	5534315	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534316	Identifier	ops		5534092	0					
ANR	5534317	Identifier	i		5534092	1					
ANR	5534318	Identifier	op		5534092	1					
ANR	5534319	Identifier	NULL		5534092	1					
ANR	5534320	PostIncDecOperationExpression	i ++	77:32:1681:1683	5534092	2	True				
ANR	5534321	Identifier	i		5534092	0					
ANR	5534322	IncDec	++		5534092	1					
ANR	5534323	CompoundStatement		59:37:1323:1323	5534092	3					
ANR	5534324	IfStatement	if ( ops [ i ] . narg )		5534092	0					
ANR	5534325	Condition	ops [ i ] . narg	78:6:1694:1704	5534092	0	True				
ANR	5534326	MemberAccess	ops [ i ] . narg		5534092	0					
ANR	5534327	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534328	Identifier	ops		5534092	0					
ANR	5534329	Identifier	i		5534092	1					
ANR	5534330	Identifier	narg		5534092	1					
ANR	5534331	CompoundStatement		60:19:1344:1344	5534092	1					
ANR	5534332	IfStatement	if ( argc - 1 != ops [ i ] . narg )		5534092	0					
ANR	5534333	Condition	argc - 1 != ops [ i ] . narg	79:7:1716:1738	5534092	0	True				
ANR	5534334	EqualityExpression	argc - 1 != ops [ i ] . narg		5534092	0		!=			
ANR	5534335	AdditiveExpression	argc - 1		5534092	0		-			
ANR	5534336	Identifier	argc		5534092	0					
ANR	5534337	PrimaryExpression	1		5534092	1					
ANR	5534338	MemberAccess	ops [ i ] . narg		5534092	1					
ANR	5534339	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534340	Identifier	ops		5534092	0					
ANR	5534341	Identifier	i		5534092	1					
ANR	5534342	Identifier	narg		5534092	1					
ANR	5534343	CompoundStatement		61:32:1378:1378	5534092	1					
ANR	5534344	ContinueStatement	continue ;	80:4:1747:1755	5534092	0	True				
ANR	5534345	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5534092	1					
ANR	5534346	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	83:6:1772:1798	5534092	0	True				
ANR	5534347	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5534092	0					
ANR	5534348	UnaryOperator	!		5534092	0					
ANR	5534349	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5534092	1					
ANR	5534350	Callee	strcmp		5534092	0					
ANR	5534351	Identifier	strcmp		5534092	0					
ANR	5534352	ArgumentList	ops [ i ] . op		5534092	1					
ANR	5534353	Argument	ops [ i ] . op		5534092	0					
ANR	5534354	MemberAccess	ops [ i ] . op		5534092	0					
ANR	5534355	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534356	Identifier	ops		5534092	0					
ANR	5534357	Identifier	i		5534092	1					
ANR	5534358	Identifier	op		5534092	1					
ANR	5534359	Argument	argv [ 0 ]		5534092	1					
ANR	5534360	ArrayIndexing	argv [ 0 ]		5534092	0					
ANR	5534361	Identifier	argv		5534092	0					
ANR	5534362	PrimaryExpression	0		5534092	1					
ANR	5534363	CompoundStatement		65:35:1438:1438	5534092	1					
ANR	5534364	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5534092	0					
ANR	5534365	ForInit	j = k = 0 ;	84:8:1811:1820	5534092	0	True				
ANR	5534366	AssignmentExpression	j = k = 0		5534092	0		=			
ANR	5534367	Identifier	j		5534092	0					
ANR	5534368	AssignmentExpression	k = 0		5534092	1		=			
ANR	5534369	Identifier	k		5534092	0					
ANR	5534370	PrimaryExpression	0		5534092	1					
ANR	5534371	Condition	ops [ i ] . str [ j ] != '\\0'	84:19:1822:1842	5534092	1	True				
ANR	5534372	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5534092	0		!=			
ANR	5534373	ArrayIndexing	ops [ i ] . str [ j ]		5534092	0					
ANR	5534374	MemberAccess	ops [ i ] . str		5534092	0					
ANR	5534375	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534376	Identifier	ops		5534092	0					
ANR	5534377	Identifier	i		5534092	1					
ANR	5534378	Identifier	str		5534092	1					
ANR	5534379	Identifier	j		5534092	1					
ANR	5534380	PrimaryExpression	'\\0'		5534092	1					
ANR	5534381	Expression	"j ++ , k ++"	84:42:1845:1852	5534092	2	True				
ANR	5534382	PostIncDecOperationExpression	j ++		5534092	0					
ANR	5534383	Identifier	j		5534092	0					
ANR	5534384	IncDec	++		5534092	1					
ANR	5534385	PostIncDecOperationExpression	k ++		5534092	1					
ANR	5534386	Identifier	k		5534092	0					
ANR	5534387	IncDec	++		5534092	1					
ANR	5534388	CompoundStatement		66:52:1492:1492	5534092	3					
ANR	5534389	IfStatement	if ( IS_DIGIT ( ops [ i ] . str [ j ] ) )		5534092	0					
ANR	5534390	Condition	IS_DIGIT ( ops [ i ] . str [ j ] )	85:8:1865:1887	5534092	0	True				
ANR	5534391	CallExpression	IS_DIGIT ( ops [ i ] . str [ j ] )		5534092	0					
ANR	5534392	Callee	IS_DIGIT		5534092	0					
ANR	5534393	Identifier	IS_DIGIT		5534092	0					
ANR	5534394	ArgumentList	ops [ i ] . str [ j ]		5534092	1					
ANR	5534395	Argument	ops [ i ] . str [ j ]		5534092	0					
ANR	5534396	ArrayIndexing	ops [ i ] . str [ j ]		5534092	0					
ANR	5534397	MemberAccess	ops [ i ] . str		5534092	0					
ANR	5534398	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534399	Identifier	ops		5534092	0					
ANR	5534400	Identifier	i		5534092	1					
ANR	5534401	Identifier	str		5534092	1					
ANR	5534402	Identifier	j		5534092	1					
ANR	5534403	CompoundStatement		68:5:1534:1575	5534092	1					
ANR	5534404	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '0' ] ;	86:5:1897:1938	5534092	0	True				
ANR	5534405	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5534092	0					
ANR	5534406	IdentifierDeclType	const char *		5534092	0					
ANR	5534407	Identifier	w		5534092	1					
ANR	5534408	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '0' ]		5534092	2		=			
ANR	5534409	Identifier	w		5534092	0					
ANR	5534410	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '0' ]		5534092	1					
ANR	5534411	Identifier	argv		5534092	0					
ANR	5534412	AdditiveExpression	ops [ i ] . str [ j ] - '0'		5534092	1		-			
ANR	5534413	ArrayIndexing	ops [ i ] . str [ j ]		5534092	0					
ANR	5534414	MemberAccess	ops [ i ] . str		5534092	0					
ANR	5534415	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534416	Identifier	ops		5534092	0					
ANR	5534417	Identifier	i		5534092	1					
ANR	5534418	Identifier	str		5534092	1					
ANR	5534419	Identifier	j		5534092	1					
ANR	5534420	PrimaryExpression	'0'		5534092	1					
ANR	5534421	IfStatement	if ( w != NULL )		5534092	1					
ANR	5534422	Condition	w != NULL	87:9:1949:1957	5534092	0	True				
ANR	5534423	EqualityExpression	w != NULL		5534092	0		!=			
ANR	5534424	Identifier	w		5534092	0					
ANR	5534425	Identifier	NULL		5534092	1					
ANR	5534426	CompoundStatement		69:20:1597:1597	5534092	1					
ANR	5534427	ExpressionStatement	"strcpy ( newstr + k , w )"	88:6:1968:1989	5534092	0	True				
ANR	5534428	CallExpression	"strcpy ( newstr + k , w )"		5534092	0					
ANR	5534429	Callee	strcpy		5534092	0					
ANR	5534430	Identifier	strcpy		5534092	0					
ANR	5534431	ArgumentList	newstr + k		5534092	1					
ANR	5534432	Argument	newstr + k		5534092	0					
ANR	5534433	AdditiveExpression	newstr + k		5534092	0		+			
ANR	5534434	Identifier	newstr		5534092	0					
ANR	5534435	Identifier	k		5534092	1					
ANR	5534436	Argument	w		5534092	1					
ANR	5534437	Identifier	w		5534092	0					
ANR	5534438	ExpressionStatement	k += strlen ( w ) - 1	89:6:1997:2015	5534092	1	True				
ANR	5534439	AssignmentExpression	k += strlen ( w ) - 1		5534092	0		+=			
ANR	5534440	Identifier	k		5534092	0					
ANR	5534441	AdditiveExpression	strlen ( w ) - 1		5534092	1		-			
ANR	5534442	CallExpression	strlen ( w )		5534092	0					
ANR	5534443	Callee	strlen		5534092	0					
ANR	5534444	Identifier	strlen		5534092	0					
ANR	5534445	ArgumentList	w		5534092	1					
ANR	5534446	Argument	w		5534092	0					
ANR	5534447	Identifier	w		5534092	0					
ANR	5534448	PrimaryExpression	1		5534092	1					
ANR	5534449	ElseStatement	else		5534092	0					
ANR	5534450	CompoundStatement		73:11:1672:1672	5534092	0					
ANR	5534451	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	92:5:2042:2067	5534092	0	True				
ANR	5534452	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5534092	0		=			
ANR	5534453	ArrayIndexing	newstr [ k ]		5534092	0					
ANR	5534454	Identifier	newstr		5534092	0					
ANR	5534455	Identifier	k		5534092	1					
ANR	5534456	ArrayIndexing	ops [ i ] . str [ j ]		5534092	1					
ANR	5534457	MemberAccess	ops [ i ] . str		5534092	0					
ANR	5534458	ArrayIndexing	ops [ i ]		5534092	0					
ANR	5534459	Identifier	ops		5534092	0					
ANR	5534460	Identifier	i		5534092	1					
ANR	5534461	Identifier	str		5534092	1					
ANR	5534462	Identifier	j		5534092	1					
ANR	5534463	ExpressionStatement	newstr [ k ] = '\\0'	95:3:2083:2099	5534092	1	True				
ANR	5534464	AssignmentExpression	newstr [ k ] = '\\0'		5534092	0		=			
ANR	5534465	ArrayIndexing	newstr [ k ]		5534092	0					
ANR	5534466	Identifier	newstr		5534092	0					
ANR	5534467	Identifier	k		5534092	1					
ANR	5534468	PrimaryExpression	'\\0'		5534092	1					
ANR	5534469	IfStatement	if ( argc == 4 && argv [ 2 ] [ 0 ] == '[' )		5534092	2					
ANR	5534470	Condition	argc == 4 && argv [ 2 ] [ 0 ] == '['	96:7:2108:2137	5534092	0	True				
ANR	5534471	AndExpression	argc == 4 && argv [ 2 ] [ 0 ] == '['		5534092	0		&&			
ANR	5534472	EqualityExpression	argc == 4		5534092	0		==			
ANR	5534473	Identifier	argc		5534092	0					
ANR	5534474	PrimaryExpression	4		5534092	1					
ANR	5534475	EqualityExpression	argv [ 2 ] [ 0 ] == '['		5534092	1		==			
ANR	5534476	ArrayIndexing	argv [ 2 ] [ 0 ]		5534092	0					
ANR	5534477	ArrayIndexing	argv [ 2 ]		5534092	0					
ANR	5534478	Identifier	argv		5534092	0					
ANR	5534479	PrimaryExpression	2		5534092	1					
ANR	5534480	PrimaryExpression	0		5534092	1					
ANR	5534481	PrimaryExpression	'['		5534092	1					
ANR	5534482	CompoundStatement		78:39:1777:1777	5534092	1					
ANR	5534483	ExpressionStatement	"strcat ( newstr + k , ""+"" )"	97:4:2146:2170	5534092	0	True				
ANR	5534484	CallExpression	"strcat ( newstr + k , ""+"" )"		5534092	0					
ANR	5534485	Callee	strcat		5534092	0					
ANR	5534486	Identifier	strcat		5534092	0					
ANR	5534487	ArgumentList	newstr + k		5534092	1					
ANR	5534488	Argument	newstr + k		5534092	0					
ANR	5534489	AdditiveExpression	newstr + k		5534092	0		+			
ANR	5534490	Identifier	newstr		5534092	0					
ANR	5534491	Identifier	k		5534092	1					
ANR	5534492	Argument	"""+"""		5534092	1					
ANR	5534493	PrimaryExpression	"""+"""		5534092	0					
ANR	5534494	ExpressionStatement	"strcat ( newstr + k + 3 , argv [ 2 ] )"	98:4:2176:2208	5534092	1	True				
ANR	5534495	CallExpression	"strcat ( newstr + k + 3 , argv [ 2 ] )"		5534092	0					
ANR	5534496	Callee	strcat		5534092	0					
ANR	5534497	Identifier	strcat		5534092	0					
ANR	5534498	ArgumentList	newstr + k + 3		5534092	1					
ANR	5534499	Argument	newstr + k + 3		5534092	0					
ANR	5534500	AdditiveExpression	newstr + k + 3		5534092	0		+			
ANR	5534501	Identifier	newstr		5534092	0					
ANR	5534502	AdditiveExpression	k + 3		5534092	1		+			
ANR	5534503	Identifier	k		5534092	0					
ANR	5534504	PrimaryExpression	3		5534092	1					
ANR	5534505	Argument	argv [ 2 ]		5534092	1					
ANR	5534506	ArrayIndexing	argv [ 2 ]		5534092	0					
ANR	5534507	Identifier	argv		5534092	0					
ANR	5534508	PrimaryExpression	2		5534092	1					
ANR	5534509	ReturnStatement	return true ;	100:3:2218:2229	5534092	3	True				
ANR	5534510	Identifier	true		5534092	0					
ANR	5534511	ExpressionStatement	newstr [ 0 ] = '\\0'	105:1:2266:2282	5534092	4	True				
ANR	5534512	AssignmentExpression	newstr [ 0 ] = '\\0'		5534092	0		=			
ANR	5534513	ArrayIndexing	newstr [ 0 ]		5534092	0					
ANR	5534514	Identifier	newstr		5534092	0					
ANR	5534515	PrimaryExpression	0		5534092	1					
ANR	5534516	PrimaryExpression	'\\0'		5534092	1					
ANR	5534517	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5534092	5					
ANR	5534518	ForInit	i = 0 ;	106:6:2290:2295	5534092	0	True				
ANR	5534519	AssignmentExpression	i = 0		5534092	0		=			
ANR	5534520	Identifier	i		5534092	0					
ANR	5534521	PrimaryExpression	0		5534092	1					
ANR	5534522	Condition	i < argc	106:13:2297:2304	5534092	1	True				
ANR	5534523	RelationalExpression	i < argc		5534092	0		<			
ANR	5534524	Identifier	i		5534092	0					
ANR	5534525	Identifier	argc		5534092	1					
ANR	5534526	PostIncDecOperationExpression	i ++	106:23:2307:2309	5534092	2	True				
ANR	5534527	Identifier	i		5534092	0					
ANR	5534528	IncDec	++		5534092	1					
ANR	5534529	CompoundStatement		88:28:1949:1949	5534092	3					
ANR	5534530	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	107:2:2316:2340	5534092	0	True				
ANR	5534531	CallExpression	"strcat ( newstr , argv [ i ] )"		5534092	0					
ANR	5534532	Callee	strcat		5534092	0					
ANR	5534533	Identifier	strcat		5534092	0					
ANR	5534534	ArgumentList	newstr		5534092	1					
ANR	5534535	Argument	newstr		5534092	0					
ANR	5534536	Identifier	newstr		5534092	0					
ANR	5534537	Argument	argv [ i ]		5534092	1					
ANR	5534538	ArrayIndexing	argv [ i ]		5534092	0					
ANR	5534539	Identifier	argv		5534092	0					
ANR	5534540	Identifier	i		5534092	1					
ANR	5534541	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"	108:2:2344:2398	5534092	1	True				
ANR	5534542	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "","" )"		5534092	0					
ANR	5534543	Callee	strcat		5534092	0					
ANR	5534544	Identifier	strcat		5534092	0					
ANR	5534545	ArgumentList	newstr		5534092	1					
ANR	5534546	Argument	newstr		5534092	0					
ANR	5534547	Identifier	newstr		5534092	0					
ANR	5534548	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5534092	1					
ANR	5534549	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "","""		5534092	0					
ANR	5534550	Condition	i == 0 || i == argc - 1		5534092	0					
ANR	5534551	OrExpression	i == 0 || i == argc - 1		5534092	0		||			
ANR	5534552	EqualityExpression	i == 0		5534092	0		==			
ANR	5534553	Identifier	i		5534092	0					
ANR	5534554	PrimaryExpression	0		5534092	1					
ANR	5534555	EqualityExpression	i == argc - 1		5534092	1		==			
ANR	5534556	Identifier	i		5534092	0					
ANR	5534557	AdditiveExpression	argc - 1		5534092	1		-			
ANR	5534558	Identifier	argc		5534092	0					
ANR	5534559	PrimaryExpression	1		5534092	1					
ANR	5534560	PrimaryExpression	""" """		5534092	1					
ANR	5534561	PrimaryExpression	""","""		5534092	2					
ANR	5534562	ReturnStatement	return false ;	110:1:2404:2416	5534092	6	True				
ANR	5534563	Identifier	false		5534092	0					
ANR	5534564	ReturnType	static int		5534092	1					
ANR	5534565	Identifier	replace		5534092	2					
ANR	5534566	ParameterList	"int argc , const char * argv [ ] , char * newstr , ADDR_TYPE type"		5534092	3					
ANR	5534567	Parameter	int argc	19:19:302:309	5534092	0	True				
ANR	5534568	ParameterType	int		5534092	0					
ANR	5534569	Identifier	argc		5534092	1					
ANR	5534570	Parameter	const char * argv [ ]	19:29:312:329	5534092	1	True				
ANR	5534571	ParameterType	const char * [ ]		5534092	0					
ANR	5534572	Identifier	argv		5534092	1					
ANR	5534573	Parameter	char * newstr	19:49:332:343	5534092	2	True				
ANR	5534574	ParameterType	char *		5534092	0					
ANR	5534575	Identifier	newstr		5534092	1					
ANR	5534576	Parameter	ADDR_TYPE type	19:63:346:359	5534092	3	True				
ANR	5534577	ParameterType	ADDR_TYPE		5534092	0					
ANR	5534578	Identifier	type		5534092	1					
ANR	5534579	CFGEntryNode	ENTRY		5534092		True				
ANR	5534580	CFGExitNode	EXIT		5534092		True				
ANR	5534581	Symbol	* ops [ i ] . str		5534092						
ANR	5534582	Symbol	* * ops		5534092						
ANR	5534583	Symbol	* argv		5534092						
ANR	5534584	Symbol	type		5534092						
ANR	5534585	Symbol	argv		5534092						
ANR	5534586	Symbol	ops [ i ] . str		5534092						
ANR	5534587	Symbol	strlen		5534092						
ANR	5534588	Symbol	ops [ i ] . narg		5534092						
ANR	5534589	Symbol	ops [ i ] . op		5534092						
ANR	5534590	Symbol	* * argv		5534092						
ANR	5534591	Symbol	* ops		5534092						
ANR	5534592	Symbol	argc		5534092						
ANR	5534593	Symbol	strcmp		5534092						
ANR	5534594	Symbol	* * j		5534092						
ANR	5534595	Symbol	* * i		5534092						
ANR	5534596	Symbol	NULL		5534092						
ANR	5534597	Symbol	false		5534092						
ANR	5534598	Symbol	* * ops [ i ] . str		5534092						
ANR	5534599	Symbol	i		5534092						
ANR	5534600	Symbol	j		5534092						
ANR	5534601	Symbol	k		5534092						
ANR	5534602	Symbol	newstr		5534092						
ANR	5534603	Symbol	IS_DIGIT		5534092						
ANR	5534604	Symbol	* * * ops		5534092						
ANR	5534605	Symbol	ops		5534092						
ANR	5534606	Symbol	* i		5534092						
ANR	5534607	Symbol	* newstr		5534092						
ANR	5534608	Symbol	* j		5534092						
ANR	5534609	Symbol	* k		5534092						
ANR	5534610	Symbol	w		5534092						
ANR	5534611	Symbol	* * * i		5534092						
ANR	5534612	Symbol	true		5534092						
ANR	5534613	Function	addr_type	113:0:2421:2635							
ANR	5534614	FunctionDef	addr_type (const char * str)		5534613	0					
ANR	5534615	CompoundStatement		113:44:2465:2635	5534613	0					
ANR	5534616	IfStatement	"if ( strchr ( str , '(' ) )"		5534613	0					
ANR	5534617	Condition	"strchr ( str , '(' )"	114:5:2472:2487	5534613	0	True				
ANR	5534618	CallExpression	"strchr ( str , '(' )"		5534613	0					
ANR	5534619	Callee	strchr		5534613	0					
ANR	5534620	Identifier	strchr		5534613	0					
ANR	5534621	ArgumentList	str		5534613	1					
ANR	5534622	Argument	str		5534613	0					
ANR	5534623	Identifier	str		5534613	0					
ANR	5534624	Argument	'('		5534613	1					
ANR	5534625	PrimaryExpression	'('		5534613	0					
ANR	5534626	CompoundStatement		7:2:91:116	5534613	1					
ANR	5534627	IdentifierDeclStatement	"char * e = strchr ( str , ')' ) ;"	115:2:2494:2521	5534613	0	True				
ANR	5534628	IdentifierDecl	"* e = strchr ( str , ')' )"		5534613	0					
ANR	5534629	IdentifierDeclType	char *		5534613	0					
ANR	5534630	Identifier	e		5534613	1					
ANR	5534631	AssignmentExpression	"* e = strchr ( str , ')' )"		5534613	2		=			
ANR	5534632	Identifier	e		5534613	0					
ANR	5534633	CallExpression	"strchr ( str , ')' )"		5534613	1					
ANR	5534634	Callee	strchr		5534613	0					
ANR	5534635	Identifier	strchr		5534613	0					
ANR	5534636	ArgumentList	str		5534613	1					
ANR	5534637	Argument	str		5534613	0					
ANR	5534638	Identifier	str		5534613	0					
ANR	5534639	Argument	')'		5534613	1					
ANR	5534640	PrimaryExpression	')'		5534613	0					
ANR	5534641	IfStatement	if ( ! e )		5534613	1					
ANR	5534642	Condition	! e	116:6:2529:2530	5534613	0	True				
ANR	5534643	UnaryOperationExpression	! e		5534613	0					
ANR	5534644	UnaryOperator	!		5534613	0					
ANR	5534645	Identifier	e		5534613	1					
ANR	5534646	CompoundStatement		4:10:67:67	5534613	1					
ANR	5534647	ReturnStatement	return NORM ;	117:3:2538:2549	5534613	0	True				
ANR	5534648	Identifier	NORM		5534613	0					
ANR	5534649	IdentifierDeclStatement	"char * o = strchr ( e , ',' ) ;"	119:2:2557:2582	5534613	2	True				
ANR	5534650	IdentifierDecl	"* o = strchr ( e , ',' )"		5534613	0					
ANR	5534651	IdentifierDeclType	char *		5534613	0					
ANR	5534652	Identifier	o		5534613	1					
ANR	5534653	AssignmentExpression	"* o = strchr ( e , ',' )"		5534613	2		=			
ANR	5534654	Identifier	o		5534613	0					
ANR	5534655	CallExpression	"strchr ( e , ',' )"		5534613	1					
ANR	5534656	Callee	strchr		5534613	0					
ANR	5534657	Identifier	strchr		5534613	0					
ANR	5534658	ArgumentList	e		5534613	1					
ANR	5534659	Argument	e		5534613	0					
ANR	5534660	Identifier	e		5534613	0					
ANR	5534661	Argument	"','"		5534613	1					
ANR	5534662	PrimaryExpression	"','"		5534613	0					
ANR	5534663	ReturnStatement	return ( o ) ? IND_IDX : IDX_IND ;	120:2:2586:2616	5534613	3	True				
ANR	5534664	ConditionalExpression	( o ) ? IND_IDX : IDX_IND		5534613	0					
ANR	5534665	Condition	o		5534613	0					
ANR	5534666	Identifier	o		5534613	0					
ANR	5534667	Identifier	IND_IDX		5534613	1					
ANR	5534668	Identifier	IDX_IND		5534613	2					
ANR	5534669	ReturnStatement	return NORM ;	122:1:2622:2633	5534613	1	True				
ANR	5534670	Identifier	NORM		5534613	0					
ANR	5534671	ReturnType	static ADDR_TYPE		5534613	1					
ANR	5534672	Identifier	addr_type		5534613	2					
ANR	5534673	ParameterList	const char * str		5534613	3					
ANR	5534674	Parameter	const char * str	113:27:2448:2462	5534613	0	True				
ANR	5534675	ParameterType	const char *		5534613	0					
ANR	5534676	Identifier	str		5534613	1					
ANR	5534677	CFGEntryNode	ENTRY		5534613		True				
ANR	5534678	CFGExitNode	EXIT		5534613		True				
ANR	5534679	Symbol	str		5534613						
ANR	5534680	Symbol	e		5534613						
ANR	5534681	Symbol	IND_IDX		5534613						
ANR	5534682	Symbol	NORM		5534613						
ANR	5534683	Symbol	strchr		5534613						
ANR	5534684	Symbol	IDX_IND		5534613						
ANR	5534685	Symbol	o		5534613						
ANR	5534686	Function	parse	125:0:2638:3775							
ANR	5534687	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5534686	0					
ANR	5534688	CompoundStatement		125:57:2695:3775	5534686	0					
ANR	5534689	IdentifierDeclStatement	"char w0 [ 256 ] , w1 [ 256 ] , w2 [ 256 ] ;"	126:1:2698:2728	5534686	0	True				
ANR	5534690	IdentifierDecl	w0 [ 256 ]		5534686	0					
ANR	5534691	IdentifierDeclType	char [ 256 ]		5534686	0					
ANR	5534692	Identifier	w0		5534686	1					
ANR	5534693	PrimaryExpression	256		5534686	2					
ANR	5534694	IdentifierDecl	w1 [ 256 ]		5534686	1					
ANR	5534695	IdentifierDeclType	char [ 256 ]		5534686	0					
ANR	5534696	Identifier	w1		5534686	1					
ANR	5534697	PrimaryExpression	256		5534686	2					
ANR	5534698	IdentifierDecl	w2 [ 256 ]		5534686	2					
ANR	5534699	IdentifierDeclType	char [ 256 ]		5534686	0					
ANR	5534700	Identifier	w2		5534686	1					
ANR	5534701	PrimaryExpression	256		5534686	2					
ANR	5534702	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	127:1:2731:2757	5534686	1	True				
ANR	5534703	IdentifierDecl	i		5534686	0					
ANR	5534704	IdentifierDeclType	int		5534686	0					
ANR	5534705	Identifier	i		5534686	1					
ANR	5534706	IdentifierDecl	len = strlen ( data )		5534686	1					
ANR	5534707	IdentifierDeclType	int		5534686	0					
ANR	5534708	Identifier	len		5534686	1					
ANR	5534709	AssignmentExpression	len = strlen ( data )		5534686	2		=			
ANR	5534710	Identifier	len		5534686	0					
ANR	5534711	CallExpression	strlen ( data )		5534686	1					
ANR	5534712	Callee	strlen		5534686	0					
ANR	5534713	Identifier	strlen		5534686	0					
ANR	5534714	ArgumentList	data		5534686	1					
ANR	5534715	Argument	data		5534686	0					
ANR	5534716	Identifier	data		5534686	0					
ANR	5534717	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	128:1:2760:2782	5534686	2	True				
ANR	5534718	IdentifierDecl	* buf		5534686	0					
ANR	5534719	IdentifierDeclType	char *		5534686	0					
ANR	5534720	Identifier	buf		5534686	1					
ANR	5534721	IdentifierDecl	* ptr		5534686	1					
ANR	5534722	IdentifierDeclType	char *		5534686	0					
ANR	5534723	Identifier	ptr		5534686	1					
ANR	5534724	IdentifierDecl	* optr		5534686	2					
ANR	5534725	IdentifierDeclType	char *		5534686	0					
ANR	5534726	Identifier	optr		5534686	1					
ANR	5534727	IdentifierDeclStatement	ADDR_TYPE atype ;	129:1:2785:2800	5534686	3	True				
ANR	5534728	IdentifierDecl	atype		5534686	0					
ANR	5534729	IdentifierDeclType	ADDR_TYPE		5534686	0					
ANR	5534730	Identifier	atype		5534686	1					
ANR	5534731	IfStatement	if ( len >= sizeof ( w0 ) )		5534686	4					
ANR	5534732	Condition	len >= sizeof ( w0 )	131:5:2808:2825	5534686	0	True				
ANR	5534733	RelationalExpression	len >= sizeof ( w0 )		5534686	0		>=			
ANR	5534734	Identifier	len		5534686	0					
ANR	5534735	SizeofExpression	sizeof ( w0 )		5534686	1					
ANR	5534736	Sizeof	sizeof		5534686	0					
ANR	5534737	SizeofOperand	w0		5534686	1					
ANR	5534738	CompoundStatement		7:25:132:132	5534686	1					
ANR	5534739	ReturnStatement	return false ;	132:2:2832:2844	5534686	0	True				
ANR	5534740	Identifier	false		5534686	0					
ANR	5534741	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5534686	5					
ANR	5534742	Condition	! ( buf = malloc ( len + 1 ) )	135:5:2885:2909	5534686	0	True				
ANR	5534743	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5534686	0					
ANR	5534744	UnaryOperator	!		5534686	0					
ANR	5534745	AssignmentExpression	buf = malloc ( len + 1 )		5534686	1		=			
ANR	5534746	Identifier	buf		5534686	0					
ANR	5534747	CallExpression	malloc ( len + 1 )		5534686	1					
ANR	5534748	Callee	malloc		5534686	0					
ANR	5534749	Identifier	malloc		5534686	0					
ANR	5534750	ArgumentList	len + 1		5534686	1					
ANR	5534751	Argument	len + 1		5534686	0					
ANR	5534752	AdditiveExpression	len + 1		5534686	0		+			
ANR	5534753	Identifier	len		5534686	0					
ANR	5534754	PrimaryExpression	1		5534686	1					
ANR	5534755	CompoundStatement		11:32:216:216	5534686	1					
ANR	5534756	ReturnStatement	return false ;	136:2:2916:2928	5534686	0	True				
ANR	5534757	Identifier	false		5534686	0					
ANR	5534758	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	138:1:2934:2961	5534686	6	True				
ANR	5534759	CallExpression	"memcpy ( buf , data , len + 1 )"		5534686	0					
ANR	5534760	Callee	memcpy		5534686	0					
ANR	5534761	Identifier	memcpy		5534686	0					
ANR	5534762	ArgumentList	buf		5534686	1					
ANR	5534763	Argument	buf		5534686	0					
ANR	5534764	Identifier	buf		5534686	0					
ANR	5534765	Argument	data		5534686	1					
ANR	5534766	Identifier	data		5534686	0					
ANR	5534767	Argument	len + 1		5534686	2					
ANR	5534768	AdditiveExpression	len + 1		5534686	0		+			
ANR	5534769	Identifier	len		5534686	0					
ANR	5534770	PrimaryExpression	1		5534686	1					
ANR	5534771	IfStatement	if ( * buf )		5534686	7					
ANR	5534772	Condition	* buf	140:5:2969:2972	5534686	0	True				
ANR	5534773	UnaryOperationExpression	* buf		5534686	0					
ANR	5534774	UnaryOperator	*		5534686	0					
ANR	5534775	Identifier	buf		5534686	1					
ANR	5534776	CompoundStatement		47:2:937:947	5534686	1					
ANR	5534777	ExpressionStatement	atype = addr_type ( buf )	141:2:2979:3002	5534686	0	True				
ANR	5534778	AssignmentExpression	atype = addr_type ( buf )		5534686	0		=			
ANR	5534779	Identifier	atype		5534686	0					
ANR	5534780	CallExpression	addr_type ( buf )		5534686	1					
ANR	5534781	Callee	addr_type		5534686	0					
ANR	5534782	Identifier	addr_type		5534686	0					
ANR	5534783	ArgumentList	buf		5534686	1					
ANR	5534784	Argument	buf		5534686	0					
ANR	5534785	Identifier	buf		5534686	0					
ANR	5534786	ExpressionStatement	"r_str_replace_char ( buf , '(' , ' ' )"	142:2:3006:3040	5534686	1	True				
ANR	5534787	CallExpression	"r_str_replace_char ( buf , '(' , ' ' )"		5534686	0					
ANR	5534788	Callee	r_str_replace_char		5534686	0					
ANR	5534789	Identifier	r_str_replace_char		5534686	0					
ANR	5534790	ArgumentList	buf		5534686	1					
ANR	5534791	Argument	buf		5534686	0					
ANR	5534792	Identifier	buf		5534686	0					
ANR	5534793	Argument	'('		5534686	1					
ANR	5534794	PrimaryExpression	'('		5534686	0					
ANR	5534795	Argument	' '		5534686	2					
ANR	5534796	PrimaryExpression	' '		5534686	0					
ANR	5534797	ExpressionStatement	"r_str_replace_char ( buf , ')' , ' ' )"	143:2:3044:3078	5534686	2	True				
ANR	5534798	CallExpression	"r_str_replace_char ( buf , ')' , ' ' )"		5534686	0					
ANR	5534799	Callee	r_str_replace_char		5534686	0					
ANR	5534800	Identifier	r_str_replace_char		5534686	0					
ANR	5534801	ArgumentList	buf		5534686	1					
ANR	5534802	Argument	buf		5534686	0					
ANR	5534803	Identifier	buf		5534686	0					
ANR	5534804	Argument	')'		5534686	1					
ANR	5534805	PrimaryExpression	')'		5534686	0					
ANR	5534806	Argument	' '		5534686	2					
ANR	5534807	PrimaryExpression	' '		5534686	0					
ANR	5534808	ExpressionStatement	* w0 = * w1 = * w2 = '\\0'	144:2:3082:3104	5534686	3	True				
ANR	5534809	AssignmentExpression	* w0 = * w1 = * w2 = '\\0'		5534686	0		=			
ANR	5534810	UnaryOperationExpression	* w0		5534686	0					
ANR	5534811	UnaryOperator	*		5534686	0					
ANR	5534812	Identifier	w0		5534686	1					
ANR	5534813	AssignmentExpression	* w1 = * w2 = '\\0'		5534686	1		=			
ANR	5534814	UnaryOperationExpression	* w1		5534686	0					
ANR	5534815	UnaryOperator	*		5534686	0					
ANR	5534816	Identifier	w1		5534686	1					
ANR	5534817	AssignmentExpression	* w2 = '\\0'		5534686	1		=			
ANR	5534818	UnaryOperationExpression	* w2		5534686	0					
ANR	5534819	UnaryOperator	*		5534686	0					
ANR	5534820	Identifier	w2		5534686	1					
ANR	5534821	PrimaryExpression	'\\0'		5534686	1					
ANR	5534822	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	145:2:3108:3131	5534686	4	True				
ANR	5534823	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5534686	0		=			
ANR	5534824	Identifier	ptr		5534686	0					
ANR	5534825	CallExpression	"strchr ( buf , ' ' )"		5534686	1					
ANR	5534826	Callee	strchr		5534686	0					
ANR	5534827	Identifier	strchr		5534686	0					
ANR	5534828	ArgumentList	buf		5534686	1					
ANR	5534829	Argument	buf		5534686	0					
ANR	5534830	Identifier	buf		5534686	0					
ANR	5534831	Argument	' '		5534686	1					
ANR	5534832	PrimaryExpression	' '		5534686	0					
ANR	5534833	IfStatement	if ( ! ptr )		5534686	5					
ANR	5534834	Condition	! ptr	146:6:3139:3142	5534686	0	True				
ANR	5534835	UnaryOperationExpression	! ptr		5534686	0					
ANR	5534836	UnaryOperator	!		5534686	0					
ANR	5534837	Identifier	ptr		5534686	1					
ANR	5534838	CompoundStatement		22:12:449:449	5534686	1					
ANR	5534839	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	147:3:3150:3174	5534686	0	True				
ANR	5534840	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5534686	0		=			
ANR	5534841	Identifier	ptr		5534686	0					
ANR	5534842	CallExpression	"strchr ( buf , '\\t' )"		5534686	1					
ANR	5534843	Callee	strchr		5534686	0					
ANR	5534844	Identifier	strchr		5534686	0					
ANR	5534845	ArgumentList	buf		5534686	1					
ANR	5534846	Argument	buf		5534686	0					
ANR	5534847	Identifier	buf		5534686	0					
ANR	5534848	Argument	'\\t'		5534686	1					
ANR	5534849	PrimaryExpression	'\\t'		5534686	0					
ANR	5534850	IfStatement	if ( ptr )		5534686	6					
ANR	5534851	Condition	ptr	149:6:3186:3188	5534686	0	True				
ANR	5534852	Identifier	ptr		5534686	0					
ANR	5534853	CompoundStatement		25:11:495:495	5534686	1					
ANR	5534854	ExpressionStatement	* ptr = '\\0'	150:3:3196:3207	5534686	0	True				
ANR	5534855	AssignmentExpression	* ptr = '\\0'		5534686	0		=			
ANR	5534856	UnaryOperationExpression	* ptr		5534686	0					
ANR	5534857	UnaryOperator	*		5534686	0					
ANR	5534858	Identifier	ptr		5534686	1					
ANR	5534859	PrimaryExpression	'\\0'		5534686	1					
ANR	5534860	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5534686	1					
ANR	5534861	ForInit	++ ptr ;	151:8:3217:3222	5534686	0	True				
ANR	5534862	UnaryExpression	++ ptr		5534686	0					
ANR	5534863	IncDec	++		5534686	0					
ANR	5534864	Identifier	ptr		5534686	1					
ANR	5534865	Condition	* ptr == ' '	151:15:3224:3234	5534686	1	True				
ANR	5534866	EqualityExpression	* ptr == ' '		5534686	0		==			
ANR	5534867	UnaryOperationExpression	* ptr		5534686	0					
ANR	5534868	UnaryOperator	*		5534686	0					
ANR	5534869	Identifier	ptr		5534686	1					
ANR	5534870	PrimaryExpression	' '		5534686	1					
ANR	5534871	PostIncDecOperationExpression	ptr ++	151:28:3237:3241	5534686	2	True				
ANR	5534872	Identifier	ptr		5534686	0					
ANR	5534873	IncDec	++		5534686	1					
ANR	5534874	CompoundStatement		27:35:548:548	5534686	3					
ANR	5534875	ExpressionStatement		152:4:3250:3250	5534686	0	True				
ANR	5534876	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	154:3:3260:3293	5534686	2	True				
ANR	5534877	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5534686	0					
ANR	5534878	Callee	strncpy		5534686	0					
ANR	5534879	Identifier	strncpy		5534686	0					
ANR	5534880	ArgumentList	w0		5534686	1					
ANR	5534881	Argument	w0		5534686	0					
ANR	5534882	Identifier	w0		5534686	0					
ANR	5534883	Argument	buf		5534686	1					
ANR	5534884	Identifier	buf		5534686	0					
ANR	5534885	Argument	sizeof ( w0 ) - 1		5534686	2					
ANR	5534886	AdditiveExpression	sizeof ( w0 ) - 1		5534686	0		-			
ANR	5534887	SizeofExpression	sizeof ( w0 )		5534686	0					
ANR	5534888	Sizeof	sizeof		5534686	0					
ANR	5534889	SizeofOperand	w0		5534686	1					
ANR	5534890	PrimaryExpression	1		5534686	1					
ANR	5534891	ExpressionStatement	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"	155:3:3298:3331	5534686	3	True				
ANR	5534892	CallExpression	"strncpy ( w1 , ptr , sizeof ( w1 ) - 1 )"		5534686	0					
ANR	5534893	Callee	strncpy		5534686	0					
ANR	5534894	Identifier	strncpy		5534686	0					
ANR	5534895	ArgumentList	w1		5534686	1					
ANR	5534896	Argument	w1		5534686	0					
ANR	5534897	Identifier	w1		5534686	0					
ANR	5534898	Argument	ptr		5534686	1					
ANR	5534899	Identifier	ptr		5534686	0					
ANR	5534900	Argument	sizeof ( w1 ) - 1		5534686	2					
ANR	5534901	AdditiveExpression	sizeof ( w1 ) - 1		5534686	0		-			
ANR	5534902	SizeofExpression	sizeof ( w1 )		5534686	0					
ANR	5534903	Sizeof	sizeof		5534686	0					
ANR	5534904	SizeofOperand	w1		5534686	1					
ANR	5534905	PrimaryExpression	1		5534686	1					
ANR	5534906	ExpressionStatement	optr = ptr	156:3:3336:3346	5534686	4	True				
ANR	5534907	AssignmentExpression	optr = ptr		5534686	0		=			
ANR	5534908	Identifier	optr		5534686	0					
ANR	5534909	Identifier	ptr		5534686	1					
ANR	5534910	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	157:3:3351:3374	5534686	5	True				
ANR	5534911	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5534686	0		=			
ANR	5534912	Identifier	ptr		5534686	0					
ANR	5534913	CallExpression	"strchr ( ptr , ',' )"		5534686	1					
ANR	5534914	Callee	strchr		5534686	0					
ANR	5534915	Identifier	strchr		5534686	0					
ANR	5534916	ArgumentList	ptr		5534686	1					
ANR	5534917	Argument	ptr		5534686	0					
ANR	5534918	Identifier	ptr		5534686	0					
ANR	5534919	Argument	"','"		5534686	1					
ANR	5534920	PrimaryExpression	"','"		5534686	0					
ANR	5534921	IfStatement	if ( ptr )		5534686	6					
ANR	5534922	Condition	ptr	158:7:3383:3385	5534686	0	True				
ANR	5534923	Identifier	ptr		5534686	0					
ANR	5534924	CompoundStatement		34:12:692:692	5534686	1					
ANR	5534925	ExpressionStatement	* ptr = '\\0'	159:4:3394:3405	5534686	0	True				
ANR	5534926	AssignmentExpression	* ptr = '\\0'		5534686	0		=			
ANR	5534927	UnaryOperationExpression	* ptr		5534686	0					
ANR	5534928	UnaryOperator	*		5534686	0					
ANR	5534929	Identifier	ptr		5534686	1					
ANR	5534930	PrimaryExpression	'\\0'		5534686	1					
ANR	5534931	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5534686	1					
ANR	5534932	ForInit	++ ptr ;	160:9:3416:3421	5534686	0	True				
ANR	5534933	UnaryExpression	++ ptr		5534686	0					
ANR	5534934	IncDec	++		5534686	0					
ANR	5534935	Identifier	ptr		5534686	1					
ANR	5534936	Condition	* ptr == ' '	160:16:3423:3433	5534686	1	True				
ANR	5534937	EqualityExpression	* ptr == ' '		5534686	0		==			
ANR	5534938	UnaryOperationExpression	* ptr		5534686	0					
ANR	5534939	UnaryOperator	*		5534686	0					
ANR	5534940	Identifier	ptr		5534686	1					
ANR	5534941	PrimaryExpression	' '		5534686	1					
ANR	5534942	PostIncDecOperationExpression	ptr ++	160:29:3436:3440	5534686	2	True				
ANR	5534943	Identifier	ptr		5534686	0					
ANR	5534944	IncDec	++		5534686	1					
ANR	5534945	CompoundStatement		36:36:747:747	5534686	3					
ANR	5534946	ExpressionStatement		161:5:3450:3450	5534686	0	True				
ANR	5534947	ExpressionStatement	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"	163:4:3462:3496	5534686	2	True				
ANR	5534948	CallExpression	"strncpy ( w1 , optr , sizeof ( w1 ) - 1 )"		5534686	0					
ANR	5534949	Callee	strncpy		5534686	0					
ANR	5534950	Identifier	strncpy		5534686	0					
ANR	5534951	ArgumentList	w1		5534686	1					
ANR	5534952	Argument	w1		5534686	0					
ANR	5534953	Identifier	w1		5534686	0					
ANR	5534954	Argument	optr		5534686	1					
ANR	5534955	Identifier	optr		5534686	0					
ANR	5534956	Argument	sizeof ( w1 ) - 1		5534686	2					
ANR	5534957	AdditiveExpression	sizeof ( w1 ) - 1		5534686	0		-			
ANR	5534958	SizeofExpression	sizeof ( w1 )		5534686	0					
ANR	5534959	Sizeof	sizeof		5534686	0					
ANR	5534960	SizeofOperand	w1		5534686	1					
ANR	5534961	PrimaryExpression	1		5534686	1					
ANR	5534962	ExpressionStatement	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"	164:4:3502:3535	5534686	3	True				
ANR	5534963	CallExpression	"strncpy ( w2 , ptr , sizeof ( w2 ) - 1 )"		5534686	0					
ANR	5534964	Callee	strncpy		5534686	0					
ANR	5534965	Identifier	strncpy		5534686	0					
ANR	5534966	ArgumentList	w2		5534686	1					
ANR	5534967	Argument	w2		5534686	0					
ANR	5534968	Identifier	w2		5534686	0					
ANR	5534969	Argument	ptr		5534686	1					
ANR	5534970	Identifier	ptr		5534686	0					
ANR	5534971	Argument	sizeof ( w2 ) - 1		5534686	2					
ANR	5534972	AdditiveExpression	sizeof ( w2 ) - 1		5534686	0		-			
ANR	5534973	SizeofExpression	sizeof ( w2 )		5534686	0					
ANR	5534974	Sizeof	sizeof		5534686	0					
ANR	5534975	SizeofOperand	w2		5534686	1					
ANR	5534976	PrimaryExpression	1		5534686	1					
ANR	5534977	ElseStatement	else		5534686	0					
ANR	5534978	CompoundStatement		42:9:855:855	5534686	0					
ANR	5534979	ExpressionStatement	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"	167:3:3556:3589	5534686	0	True				
ANR	5534980	CallExpression	"strncpy ( w0 , buf , sizeof ( w0 ) - 1 )"		5534686	0					
ANR	5534981	Callee	strncpy		5534686	0					
ANR	5534982	Identifier	strncpy		5534686	0					
ANR	5534983	ArgumentList	w0		5534686	1					
ANR	5534984	Argument	w0		5534686	0					
ANR	5534985	Identifier	w0		5534686	0					
ANR	5534986	Argument	buf		5534686	1					
ANR	5534987	Identifier	buf		5534686	0					
ANR	5534988	Argument	sizeof ( w0 ) - 1		5534686	2					
ANR	5534989	AdditiveExpression	sizeof ( w0 ) - 1		5534686	0		-			
ANR	5534990	SizeofExpression	sizeof ( w0 )		5534686	0					
ANR	5534991	Sizeof	sizeof		5534686	0					
ANR	5534992	SizeofOperand	w0		5534686	1					
ANR	5534993	PrimaryExpression	1		5534686	1					
ANR	5534994	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 } ;"	170:2:3598:3629	5534686	7	True				
ANR	5534995	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 }"		5534686	0					
ANR	5534996	IdentifierDeclType	const char * [ ]		5534686	0					
ANR	5534997	Identifier	wa		5534686	1					
ANR	5534998	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 }"		5534686	2		=			
ANR	5534999	Identifier	wa		5534686	0					
ANR	5535000	InitializerList	w0		5534686	1					
ANR	5535001	Identifier	w0		5534686	0					
ANR	5535002	Identifier	w1		5534686	1					
ANR	5535003	Identifier	w2		5534686	2					
ANR	5535004	IdentifierDeclStatement	int nw = 0 ;	171:2:3633:3643	5534686	8	True				
ANR	5535005	IdentifierDecl	nw = 0		5534686	0					
ANR	5535006	IdentifierDeclType	int		5534686	0					
ANR	5535007	Identifier	nw		5534686	1					
ANR	5535008	AssignmentExpression	nw = 0		5534686	2		=			
ANR	5535009	Identifier	nw		5534686	0					
ANR	5535010	PrimaryExpression	0		5534686	1					
ANR	5535011	ForStatement	for ( i = 0 ; i < 3 ; i ++ )		5534686	9					
ANR	5535012	ForInit	i = 0 ;	172:7:3652:3657	5534686	0	True				
ANR	5535013	AssignmentExpression	i = 0		5534686	0		=			
ANR	5535014	Identifier	i		5534686	0					
ANR	5535015	PrimaryExpression	0		5534686	1					
ANR	5535016	Condition	i < 3	172:14:3659:3663	5534686	1	True				
ANR	5535017	RelationalExpression	i < 3		5534686	0		<			
ANR	5535018	Identifier	i		5534686	0					
ANR	5535019	PrimaryExpression	3		5534686	1					
ANR	5535020	PostIncDecOperationExpression	i ++	172:21:3666:3668	5534686	2	True				
ANR	5535021	Identifier	i		5534686	0					
ANR	5535022	IncDec	++		5534686	1					
ANR	5535023	CompoundStatement		48:26:975:975	5534686	3					
ANR	5535024	IfStatement	if ( wa [ i ] [ 0 ] )		5534686	0					
ANR	5535025	Condition	wa [ i ] [ 0 ]	173:7:3680:3687	5534686	0	True				
ANR	5535026	ArrayIndexing	wa [ i ] [ 0 ]		5534686	0					
ANR	5535027	ArrayIndexing	wa [ i ]		5534686	0					
ANR	5535028	Identifier	wa		5534686	0					
ANR	5535029	Identifier	i		5534686	1					
ANR	5535030	PrimaryExpression	0		5534686	1					
ANR	5535031	CompoundStatement		49:17:994:994	5534686	1					
ANR	5535032	ExpressionStatement	nw ++	174:4:3696:3700	5534686	0	True				
ANR	5535033	PostIncDecOperationExpression	nw ++		5534686	0					
ANR	5535034	Identifier	nw		5534686	0					
ANR	5535035	IncDec	++		5534686	1					
ANR	5535036	ExpressionStatement	"replace ( nw , wa , str , atype )"	177:2:3713:3741	5534686	10	True				
ANR	5535037	CallExpression	"replace ( nw , wa , str , atype )"		5534686	0					
ANR	5535038	Callee	replace		5534686	0					
ANR	5535039	Identifier	replace		5534686	0					
ANR	5535040	ArgumentList	nw		5534686	1					
ANR	5535041	Argument	nw		5534686	0					
ANR	5535042	Identifier	nw		5534686	0					
ANR	5535043	Argument	wa		5534686	1					
ANR	5535044	Identifier	wa		5534686	0					
ANR	5535045	Argument	str		5534686	2					
ANR	5535046	Identifier	str		5534686	0					
ANR	5535047	Argument	atype		5534686	3					
ANR	5535048	Identifier	atype		5534686	0					
ANR	5535049	ExpressionStatement	free ( buf )	180:1:3748:3758	5534686	8	True				
ANR	5535050	CallExpression	free ( buf )		5534686	0					
ANR	5535051	Callee	free		5534686	0					
ANR	5535052	Identifier	free		5534686	0					
ANR	5535053	ArgumentList	buf		5534686	1					
ANR	5535054	Argument	buf		5534686	0					
ANR	5535055	Identifier	buf		5534686	0					
ANR	5535056	ReturnStatement	return true ;	182:1:3762:3773	5534686	9	True				
ANR	5535057	Identifier	true		5534686	0					
ANR	5535058	ReturnType	static int		5534686	1					
ANR	5535059	Identifier	parse		5534686	2					
ANR	5535060	ParameterList	"RParse * p , const char * data , char * str"		5534686	3					
ANR	5535061	Parameter	RParse * p	125:17:2655:2663	5534686	0	True				
ANR	5535062	ParameterType	RParse *		5534686	0					
ANR	5535063	Identifier	p		5534686	1					
ANR	5535064	Parameter	const char * data	125:28:2666:2681	5534686	1	True				
ANR	5535065	ParameterType	const char *		5534686	0					
ANR	5535066	Identifier	data		5534686	1					
ANR	5535067	Parameter	char * str	125:46:2684:2692	5534686	2	True				
ANR	5535068	ParameterType	char *		5534686	0					
ANR	5535069	Identifier	str		5534686	1					
ANR	5535070	CFGEntryNode	ENTRY		5534686		True				
ANR	5535071	CFGExitNode	EXIT		5534686		True				
ANR	5535072	Symbol	* w2		5534686						
ANR	5535073	Symbol	* w1		5534686						
ANR	5535074	Symbol	data		5534686						
ANR	5535075	Symbol	addr_type		5534686						
ANR	5535076	Symbol	strchr		5534686						
ANR	5535077	Symbol	nw		5534686						
ANR	5535078	Symbol	wa		5534686						
ANR	5535079	Symbol	strlen		5534686						
ANR	5535080	Symbol	* wa		5534686						
ANR	5535081	Symbol	len		5534686						
ANR	5535082	Symbol	atype		5534686						
ANR	5535083	Symbol	* ptr		5534686						
ANR	5535084	Symbol	w0		5534686						
ANR	5535085	Symbol	w1		5534686						
ANR	5535086	Symbol	w2		5534686						
ANR	5535087	Symbol	* w0		5534686						
ANR	5535088	Symbol	malloc		5534686						
ANR	5535089	Symbol	* buf		5534686						
ANR	5535090	Symbol	* * i		5534686						
ANR	5535091	Symbol	false		5534686						
ANR	5535092	Symbol	i		5534686						
ANR	5535093	Symbol	optr		5534686						
ANR	5535094	Symbol	ptr		5534686						
ANR	5535095	Symbol	p		5534686						
ANR	5535096	Symbol	str		5534686						
ANR	5535097	Symbol	buf		5534686						
ANR	5535098	Symbol	* i		5534686						
ANR	5535099	Symbol	* * wa		5534686						
ANR	5535100	Symbol	true		5534686						
ANR	5535101	DeclStmt									
ANR	5535102	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_6502_pseudo
ANR	5535103	DeclStmt									
ANR	5535104	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
