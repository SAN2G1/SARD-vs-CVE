command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5738044	File	data/converged/CVE-2019-16718~_radare2/rlcc.c								
ANR	5738045	Function	isComment	6:0:101:276							
ANR	5738046	FunctionDef	isComment (mpc_ast_t * node)		5738045	0					
ANR	5738047	CompoundStatement		6:38:139:276	5738045	0					
ANR	5738048	IfStatement	"if ( ! strcmp ( node -> tag , ""comment|regex"" ) )"		5738045	0					
ANR	5738049	Condition	"! strcmp ( node -> tag , ""comment|regex"" )"	7:5:146:181	5738045	0	True				
ANR	5738050	UnaryOperationExpression	"! strcmp ( node -> tag , ""comment|regex"" )"		5738045	0					
ANR	5738051	UnaryOperator	!		5738045	0					
ANR	5738052	CallExpression	"strcmp ( node -> tag , ""comment|regex"" )"		5738045	1					
ANR	5738053	Callee	strcmp		5738045	0					
ANR	5738054	Identifier	strcmp		5738045	0					
ANR	5738055	ArgumentList	node -> tag		5738045	1					
ANR	5738056	Argument	node -> tag		5738045	0					
ANR	5738057	PtrMemberAccess	node -> tag		5738045	0					
ANR	5738058	Identifier	node		5738045	0					
ANR	5738059	Identifier	tag		5738045	1					
ANR	5738060	Argument	"""comment|regex"""		5738045	1					
ANR	5738061	PrimaryExpression	"""comment|regex"""		5738045	0					
ANR	5738062	CompoundStatement		2:43:44:44	5738045	1					
ANR	5738063	ReturnStatement	return 1 ;	8:2:188:196	5738045	0	True				
ANR	5738064	PrimaryExpression	1		5738045	0					
ANR	5738065	IfStatement	"if ( ! strcmp ( node -> tag , ""linecomment|regex"" ) )"		5738045	1					
ANR	5738066	Condition	"! strcmp ( node -> tag , ""linecomment|regex"" )"	10:5:206:245	5738045	0	True				
ANR	5738067	UnaryOperationExpression	"! strcmp ( node -> tag , ""linecomment|regex"" )"		5738045	0					
ANR	5738068	UnaryOperator	!		5738045	0					
ANR	5738069	CallExpression	"strcmp ( node -> tag , ""linecomment|regex"" )"		5738045	1					
ANR	5738070	Callee	strcmp		5738045	0					
ANR	5738071	Identifier	strcmp		5738045	0					
ANR	5738072	ArgumentList	node -> tag		5738045	1					
ANR	5738073	Argument	node -> tag		5738045	0					
ANR	5738074	PtrMemberAccess	node -> tag		5738045	0					
ANR	5738075	Identifier	node		5738045	0					
ANR	5738076	Identifier	tag		5738045	1					
ANR	5738077	Argument	"""linecomment|regex"""		5738045	1					
ANR	5738078	PrimaryExpression	"""linecomment|regex"""		5738045	0					
ANR	5738079	CompoundStatement		5:47:108:108	5738045	1					
ANR	5738080	ReturnStatement	return 1 ;	11:2:252:260	5738045	0	True				
ANR	5738081	PrimaryExpression	1		5738045	0					
ANR	5738082	ReturnStatement	return 0 ;	13:1:266:274	5738045	2	True				
ANR	5738083	PrimaryExpression	0		5738045	0					
ANR	5738084	ReturnType	static int		5738045	1					
ANR	5738085	Identifier	isComment		5738045	2					
ANR	5738086	ParameterList	mpc_ast_t * node		5738045	3					
ANR	5738087	Parameter	mpc_ast_t * node	6:21:122:136	5738045	0	True				
ANR	5738088	ParameterType	mpc_ast_t *		5738045	0					
ANR	5738089	Identifier	node		5738045	1					
ANR	5738090	CFGEntryNode	ENTRY		5738045		True				
ANR	5738091	CFGExitNode	EXIT		5738045		True				
ANR	5738092	Symbol	strcmp		5738045						
ANR	5738093	Symbol	node		5738045						
ANR	5738094	Symbol	node -> tag		5738045						
ANR	5738095	Symbol	* node		5738045						
ANR	5738096	Function	isInlineAssembly	16:0:279:393							
ANR	5738097	FunctionDef	isInlineAssembly (mpc_ast_t * node)		5738096	0					
ANR	5738098	CompoundStatement		16:45:324:393	5738096	0					
ANR	5738099	IfStatement	"if ( ! strcmp ( node -> tag , ""asm|regex"" ) )"		5738096	0					
ANR	5738100	Condition	"! strcmp ( node -> tag , ""asm|regex"" )"	17:5:331:362	5738096	0	True				
ANR	5738101	UnaryOperationExpression	"! strcmp ( node -> tag , ""asm|regex"" )"		5738096	0					
ANR	5738102	UnaryOperator	!		5738096	0					
ANR	5738103	CallExpression	"strcmp ( node -> tag , ""asm|regex"" )"		5738096	1					
ANR	5738104	Callee	strcmp		5738096	0					
ANR	5738105	Identifier	strcmp		5738096	0					
ANR	5738106	ArgumentList	node -> tag		5738096	1					
ANR	5738107	Argument	node -> tag		5738096	0					
ANR	5738108	PtrMemberAccess	node -> tag		5738096	0					
ANR	5738109	Identifier	node		5738096	0					
ANR	5738110	Identifier	tag		5738096	1					
ANR	5738111	Argument	"""asm|regex"""		5738096	1					
ANR	5738112	PrimaryExpression	"""asm|regex"""		5738096	0					
ANR	5738113	CompoundStatement		2:39:40:40	5738096	1					
ANR	5738114	ReturnStatement	return 1 ;	18:2:369:377	5738096	0	True				
ANR	5738115	PrimaryExpression	1		5738096	0					
ANR	5738116	ReturnStatement	return 0 ;	20:1:383:391	5738096	1	True				
ANR	5738117	PrimaryExpression	0		5738096	0					
ANR	5738118	ReturnType	static int		5738096	1					
ANR	5738119	Identifier	isInlineAssembly		5738096	2					
ANR	5738120	ParameterList	mpc_ast_t * node		5738096	3					
ANR	5738121	Parameter	mpc_ast_t * node	16:28:307:321	5738096	0	True				
ANR	5738122	ParameterType	mpc_ast_t *		5738096	0					
ANR	5738123	Identifier	node		5738096	1					
ANR	5738124	CFGEntryNode	ENTRY		5738096		True				
ANR	5738125	CFGExitNode	EXIT		5738096		True				
ANR	5738126	Symbol	strcmp		5738096						
ANR	5738127	Symbol	node		5738096						
ANR	5738128	Symbol	node -> tag		5738096						
ANR	5738129	Symbol	* node		5738096						
ANR	5738130	Function	isStatement	23:0:396:502							
ANR	5738131	FunctionDef	isStatement (mpc_ast_t * node)		5738130	0					
ANR	5738132	CompoundStatement		23:40:436:502	5738130	0					
ANR	5738133	IfStatement	"if ( ! strcmp ( node -> tag , ""stmt|>"" ) )"		5738130	0					
ANR	5738134	Condition	"! strcmp ( node -> tag , ""stmt|>"" )"	24:5:443:471	5738130	0	True				
ANR	5738135	UnaryOperationExpression	"! strcmp ( node -> tag , ""stmt|>"" )"		5738130	0					
ANR	5738136	UnaryOperator	!		5738130	0					
ANR	5738137	CallExpression	"strcmp ( node -> tag , ""stmt|>"" )"		5738130	1					
ANR	5738138	Callee	strcmp		5738130	0					
ANR	5738139	Identifier	strcmp		5738130	0					
ANR	5738140	ArgumentList	node -> tag		5738130	1					
ANR	5738141	Argument	node -> tag		5738130	0					
ANR	5738142	PtrMemberAccess	node -> tag		5738130	0					
ANR	5738143	Identifier	node		5738130	0					
ANR	5738144	Identifier	tag		5738130	1					
ANR	5738145	Argument	"""stmt|>"""		5738130	1					
ANR	5738146	PrimaryExpression	"""stmt|>"""		5738130	0					
ANR	5738147	CompoundStatement		2:36:37:37	5738130	1					
ANR	5738148	ReturnStatement	return 1 ;	25:2:478:486	5738130	0	True				
ANR	5738149	PrimaryExpression	1		5738130	0					
ANR	5738150	ReturnStatement	return 0 ;	27:1:492:500	5738130	1	True				
ANR	5738151	PrimaryExpression	0		5738130	0					
ANR	5738152	ReturnType	static int		5738130	1					
ANR	5738153	Identifier	isStatement		5738130	2					
ANR	5738154	ParameterList	mpc_ast_t * node		5738130	3					
ANR	5738155	Parameter	mpc_ast_t * node	23:23:419:433	5738130	0	True				
ANR	5738156	ParameterType	mpc_ast_t *		5738130	0					
ANR	5738157	Identifier	node		5738130	1					
ANR	5738158	CFGEntryNode	ENTRY		5738130		True				
ANR	5738159	CFGExitNode	EXIT		5738130		True				
ANR	5738160	Symbol	strcmp		5738130						
ANR	5738161	Symbol	node		5738130						
ANR	5738162	Symbol	node -> tag		5738130						
ANR	5738163	Symbol	* node		5738130						
ANR	5738164	Function	isSigdef	30:0:505:610							
ANR	5738165	FunctionDef	isSigdef (mpc_ast_t * node)		5738164	0					
ANR	5738166	CompoundStatement		30:37:542:610	5738164	0					
ANR	5738167	IfStatement	"if ( ! strcmp ( node -> tag , ""sigdef|>"" ) )"		5738164	0					
ANR	5738168	Condition	"! strcmp ( node -> tag , ""sigdef|>"" )"	31:5:549:579	5738164	0	True				
ANR	5738169	UnaryOperationExpression	"! strcmp ( node -> tag , ""sigdef|>"" )"		5738164	0					
ANR	5738170	UnaryOperator	!		5738164	0					
ANR	5738171	CallExpression	"strcmp ( node -> tag , ""sigdef|>"" )"		5738164	1					
ANR	5738172	Callee	strcmp		5738164	0					
ANR	5738173	Identifier	strcmp		5738164	0					
ANR	5738174	ArgumentList	node -> tag		5738164	1					
ANR	5738175	Argument	node -> tag		5738164	0					
ANR	5738176	PtrMemberAccess	node -> tag		5738164	0					
ANR	5738177	Identifier	node		5738164	0					
ANR	5738178	Identifier	tag		5738164	1					
ANR	5738179	Argument	"""sigdef|>"""		5738164	1					
ANR	5738180	PrimaryExpression	"""sigdef|>"""		5738164	0					
ANR	5738181	CompoundStatement		2:38:39:39	5738164	1					
ANR	5738182	ReturnStatement	return 1 ;	32:2:586:594	5738164	0	True				
ANR	5738183	PrimaryExpression	1		5738164	0					
ANR	5738184	ReturnStatement	return 0 ;	34:1:600:608	5738164	1	True				
ANR	5738185	PrimaryExpression	0		5738164	0					
ANR	5738186	ReturnType	static int		5738164	1					
ANR	5738187	Identifier	isSigdef		5738164	2					
ANR	5738188	ParameterList	mpc_ast_t * node		5738164	3					
ANR	5738189	Parameter	mpc_ast_t * node	30:20:525:539	5738164	0	True				
ANR	5738190	ParameterType	mpc_ast_t *		5738164	0					
ANR	5738191	Identifier	node		5738164	1					
ANR	5738192	CFGEntryNode	ENTRY		5738164		True				
ANR	5738193	CFGExitNode	EXIT		5738164		True				
ANR	5738194	Symbol	strcmp		5738164						
ANR	5738195	Symbol	node		5738164						
ANR	5738196	Symbol	node -> tag		5738164						
ANR	5738197	Symbol	* node		5738164						
ANR	5738198	Function	isProcedure	37:0:613:724							
ANR	5738199	FunctionDef	isProcedure (mpc_ast_t * node)		5738198	0					
ANR	5738200	CompoundStatement		37:40:653:724	5738198	0					
ANR	5738201	IfStatement	"if ( ! strcmp ( node -> tag , ""procedure|>"" ) )"		5738198	0					
ANR	5738202	Condition	"! strcmp ( node -> tag , ""procedure|>"" )"	38:5:660:693	5738198	0	True				
ANR	5738203	UnaryOperationExpression	"! strcmp ( node -> tag , ""procedure|>"" )"		5738198	0					
ANR	5738204	UnaryOperator	!		5738198	0					
ANR	5738205	CallExpression	"strcmp ( node -> tag , ""procedure|>"" )"		5738198	1					
ANR	5738206	Callee	strcmp		5738198	0					
ANR	5738207	Identifier	strcmp		5738198	0					
ANR	5738208	ArgumentList	node -> tag		5738198	1					
ANR	5738209	Argument	node -> tag		5738198	0					
ANR	5738210	PtrMemberAccess	node -> tag		5738198	0					
ANR	5738211	Identifier	node		5738198	0					
ANR	5738212	Identifier	tag		5738198	1					
ANR	5738213	Argument	"""procedure|>"""		5738198	1					
ANR	5738214	PrimaryExpression	"""procedure|>"""		5738198	0					
ANR	5738215	CompoundStatement		2:41:42:42	5738198	1					
ANR	5738216	ReturnStatement	return 1 ;	39:2:700:708	5738198	0	True				
ANR	5738217	PrimaryExpression	1		5738198	0					
ANR	5738218	ReturnStatement	return 0 ;	41:1:714:722	5738198	1	True				
ANR	5738219	PrimaryExpression	0		5738198	0					
ANR	5738220	ReturnType	static int		5738198	1					
ANR	5738221	Identifier	isProcedure		5738198	2					
ANR	5738222	ParameterList	mpc_ast_t * node		5738198	3					
ANR	5738223	Parameter	mpc_ast_t * node	37:23:636:650	5738198	0	True				
ANR	5738224	ParameterType	mpc_ast_t *		5738198	0					
ANR	5738225	Identifier	node		5738198	1					
ANR	5738226	CFGEntryNode	ENTRY		5738198		True				
ANR	5738227	CFGExitNode	EXIT		5738198		True				
ANR	5738228	Symbol	strcmp		5738198						
ANR	5738229	Symbol	node		5738198						
ANR	5738230	Symbol	node -> tag		5738198						
ANR	5738231	Symbol	* node		5738198						
ANR	5738232	Function	processNode	44:0:727:2654							
ANR	5738233	FunctionDef	processNode (mpc_ast_t * node)		5738232	0					
ANR	5738234	CompoundStatement		44:42:769:2654	5738232	0					
ANR	5738235	IfStatement	if ( isStatement ( node ) )		5738232	0					
ANR	5738236	Condition	isStatement ( node )	45:5:776:792	5738232	0	True				
ANR	5738237	CallExpression	isStatement ( node )		5738232	0					
ANR	5738238	Callee	isStatement		5738232	0					
ANR	5738239	Identifier	isStatement		5738232	0					
ANR	5738240	ArgumentList	node		5738232	1					
ANR	5738241	Argument	node		5738232	0					
ANR	5738242	Identifier	node		5738232	0					
ANR	5738243	CompoundStatement		4:2:48:68	5738232	1					
ANR	5738244	IdentifierDeclStatement	"int i , narg = 0 ;"	46:2:799:814	5738232	0	True				
ANR	5738245	IdentifierDecl	i		5738232	0					
ANR	5738246	IdentifierDeclType	int		5738232	0					
ANR	5738247	Identifier	i		5738232	1					
ANR	5738248	IdentifierDecl	narg = 0		5738232	1					
ANR	5738249	IdentifierDeclType	int		5738232	0					
ANR	5738250	Identifier	narg		5738232	1					
ANR	5738251	AssignmentExpression	narg = 0		5738232	2		=			
ANR	5738252	Identifier	narg		5738232	0					
ANR	5738253	PrimaryExpression	0		5738232	1					
ANR	5738254	IdentifierDeclStatement	const char * args [ 32 ] ;	47:2:818:838	5738232	1	True				
ANR	5738255	IdentifierDecl	* args [ 32 ]		5738232	0					
ANR	5738256	IdentifierDeclType	const char * [ 32 ]		5738232	0					
ANR	5738257	Identifier	args		5738232	1					
ANR	5738258	PrimaryExpression	32		5738232	2					
ANR	5738259	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		5738232	2					
ANR	5738260	ForInit	i = 0 ;	48:7:847:851	5738232	0	True				
ANR	5738261	AssignmentExpression	i = 0		5738232	0		=			
ANR	5738262	Identifier	i		5738232	0					
ANR	5738263	PrimaryExpression	0		5738232	1					
ANR	5738264	Condition	i < node -> children_num	48:13:853:872	5738232	1	True				
ANR	5738265	RelationalExpression	i < node -> children_num		5738232	0		<			
ANR	5738266	Identifier	i		5738232	0					
ANR	5738267	PtrMemberAccess	node -> children_num		5738232	1					
ANR	5738268	Identifier	node		5738232	0					
ANR	5738269	Identifier	children_num		5738232	1					
ANR	5738270	PostIncDecOperationExpression	i ++	48:35:875:877	5738232	2	True				
ANR	5738271	Identifier	i		5738232	0					
ANR	5738272	IncDec	++		5738232	1					
ANR	5738273	CompoundStatement		7:3:160:205	5738232	3					
ANR	5738274	IdentifierDeclStatement	const char * tag = node -> children [ i ] -> tag ;	49:3:885:925	5738232	0	True				
ANR	5738275	IdentifierDecl	* tag = node -> children [ i ] -> tag		5738232	0					
ANR	5738276	IdentifierDeclType	const char *		5738232	0					
ANR	5738277	Identifier	tag		5738232	1					
ANR	5738278	AssignmentExpression	* tag = node -> children [ i ] -> tag		5738232	2		=			
ANR	5738279	Identifier	tag		5738232	0					
ANR	5738280	PtrMemberAccess	node -> children [ i ] -> tag		5738232	1					
ANR	5738281	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738282	PtrMemberAccess	node -> children		5738232	0					
ANR	5738283	Identifier	node		5738232	0					
ANR	5738284	Identifier	children		5738232	1					
ANR	5738285	Identifier	i		5738232	1					
ANR	5738286	Identifier	tag		5738232	1					
ANR	5738287	IdentifierDeclStatement	const char * val = node -> children [ i ] -> contents ;	50:3:930:975	5738232	1	True				
ANR	5738288	IdentifierDecl	* val = node -> children [ i ] -> contents		5738232	0					
ANR	5738289	IdentifierDeclType	const char *		5738232	0					
ANR	5738290	Identifier	val		5738232	1					
ANR	5738291	AssignmentExpression	* val = node -> children [ i ] -> contents		5738232	2		=			
ANR	5738292	Identifier	val		5738232	0					
ANR	5738293	PtrMemberAccess	node -> children [ i ] -> contents		5738232	1					
ANR	5738294	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738295	PtrMemberAccess	node -> children		5738232	0					
ANR	5738296	Identifier	node		5738232	0					
ANR	5738297	Identifier	children		5738232	1					
ANR	5738298	Identifier	i		5738232	1					
ANR	5738299	Identifier	contents		5738232	1					
ANR	5738300	IfStatement	"if ( strcmp ( tag , ""char"" ) )"		5738232	2					
ANR	5738301	Condition	"strcmp ( tag , ""char"" )"	51:7:984:1003	5738232	0	True				
ANR	5738302	CallExpression	"strcmp ( tag , ""char"" )"		5738232	0					
ANR	5738303	Callee	strcmp		5738232	0					
ANR	5738304	Identifier	strcmp		5738232	0					
ANR	5738305	ArgumentList	tag		5738232	1					
ANR	5738306	Argument	tag		5738232	0					
ANR	5738307	Identifier	tag		5738232	0					
ANR	5738308	Argument	"""char"""		5738232	1					
ANR	5738309	PrimaryExpression	"""char"""		5738232	0					
ANR	5738310	CompoundStatement		8:29:236:236	5738232	1					
ANR	5738311	ExpressionStatement	"printf ( ""TAG (%s) = (%s)\\n"" , tag , val )"	52:4:1012:1050	5738232	0	True				
ANR	5738312	CallExpression	"printf ( ""TAG (%s) = (%s)\\n"" , tag , val )"		5738232	0					
ANR	5738313	Callee	printf		5738232	0					
ANR	5738314	Identifier	printf		5738232	0					
ANR	5738315	ArgumentList	"""TAG (%s) = (%s)\\n"""		5738232	1					
ANR	5738316	Argument	"""TAG (%s) = (%s)\\n"""		5738232	0					
ANR	5738317	PrimaryExpression	"""TAG (%s) = (%s)\\n"""		5738232	0					
ANR	5738318	Argument	tag		5738232	1					
ANR	5738319	Identifier	tag		5738232	0					
ANR	5738320	Argument	val		5738232	2					
ANR	5738321	Identifier	val		5738232	0					
ANR	5738322	ExpressionStatement	args [ narg ++ ] = val	53:4:1056:1074	5738232	1	True				
ANR	5738323	AssignmentExpression	args [ narg ++ ] = val		5738232	0		=			
ANR	5738324	ArrayIndexing	args [ narg ++ ]		5738232	0					
ANR	5738325	Identifier	args		5738232	0					
ANR	5738326	PostIncDecOperationExpression	narg ++		5738232	1					
ANR	5738327	Identifier	narg		5738232	0					
ANR	5738328	IncDec	++		5738232	1					
ANR	5738329	Identifier	val		5738232	1					
ANR	5738330	ExpressionStatement	"printf ( ""; CALL WITH %d ARGS\\n"" , narg )"	56:2:1087:1125	5738232	3	True				
ANR	5738331	CallExpression	"printf ( ""; CALL WITH %d ARGS\\n"" , narg )"		5738232	0					
ANR	5738332	Callee	printf		5738232	0					
ANR	5738333	Identifier	printf		5738232	0					
ANR	5738334	ArgumentList	"""; CALL WITH %d ARGS\\n"""		5738232	1					
ANR	5738335	Argument	"""; CALL WITH %d ARGS\\n"""		5738232	0					
ANR	5738336	PrimaryExpression	"""; CALL WITH %d ARGS\\n"""		5738232	0					
ANR	5738337	Argument	narg		5738232	1					
ANR	5738338	Identifier	narg		5738232	0					
ANR	5738339	ElseStatement	else		5738232	0					
ANR	5738340	IfStatement	if ( isProcedure ( node ) )		5738232	0					
ANR	5738341	Condition	isProcedure ( node )	57:12:1139:1156	5738232	0	True				
ANR	5738342	CallExpression	isProcedure ( node )		5738232	0					
ANR	5738343	Callee	isProcedure		5738232	0					
ANR	5738344	Identifier	isProcedure		5738232	0					
ANR	5738345	ArgumentList	node		5738232	1					
ANR	5738346	Argument	node		5738232	0					
ANR	5738347	Identifier	node		5738232	0					
ANR	5738348	CompoundStatement		16:2:405:451	5738232	1					
ANR	5738349	IdentifierDeclStatement	"int i , j ;"	58:2:1163:1171	5738232	0	True				
ANR	5738350	IdentifierDecl	i		5738232	0					
ANR	5738351	IdentifierDeclType	int		5738232	0					
ANR	5738352	Identifier	i		5738232	1					
ANR	5738353	IdentifierDecl	j		5738232	1					
ANR	5738354	IdentifierDeclType	int		5738232	0					
ANR	5738355	Identifier	j		5738232	1					
ANR	5738356	IdentifierDeclStatement	const char * name = node -> children [ 0 ] -> contents ;	59:2:1175:1221	5738232	1	True				
ANR	5738357	IdentifierDecl	* name = node -> children [ 0 ] -> contents		5738232	0					
ANR	5738358	IdentifierDeclType	const char *		5738232	0					
ANR	5738359	Identifier	name		5738232	1					
ANR	5738360	AssignmentExpression	* name = node -> children [ 0 ] -> contents		5738232	2		=			
ANR	5738361	Identifier	name		5738232	0					
ANR	5738362	PtrMemberAccess	node -> children [ 0 ] -> contents		5738232	1					
ANR	5738363	ArrayIndexing	node -> children [ 0 ]		5738232	0					
ANR	5738364	PtrMemberAccess	node -> children		5738232	0					
ANR	5738365	Identifier	node		5738232	0					
ANR	5738366	Identifier	children		5738232	1					
ANR	5738367	PrimaryExpression	0		5738232	1					
ANR	5738368	Identifier	contents		5738232	1					
ANR	5738369	ExpressionStatement	"printf ( ""%s:\\n"" , name )"	60:2:1225:1247	5738232	2	True				
ANR	5738370	CallExpression	"printf ( ""%s:\\n"" , name )"		5738232	0					
ANR	5738371	Callee	printf		5738232	0					
ANR	5738372	Identifier	printf		5738232	0					
ANR	5738373	ArgumentList	"""%s:\\n"""		5738232	1					
ANR	5738374	Argument	"""%s:\\n"""		5738232	0					
ANR	5738375	PrimaryExpression	"""%s:\\n"""		5738232	0					
ANR	5738376	Argument	name		5738232	1					
ANR	5738377	Identifier	name		5738232	0					
ANR	5738378	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		5738232	3					
ANR	5738379	ForInit	i = 0 ;	61:7:1256:1260	5738232	0	True				
ANR	5738380	AssignmentExpression	i = 0		5738232	0		=			
ANR	5738381	Identifier	i		5738232	0					
ANR	5738382	PrimaryExpression	0		5738232	1					
ANR	5738383	Condition	i < node -> children_num	61:13:1262:1281	5738232	1	True				
ANR	5738384	RelationalExpression	i < node -> children_num		5738232	0		<			
ANR	5738385	Identifier	i		5738232	0					
ANR	5738386	PtrMemberAccess	node -> children_num		5738232	1					
ANR	5738387	Identifier	node		5738232	0					
ANR	5738388	Identifier	children_num		5738232	1					
ANR	5738389	PostIncDecOperationExpression	i ++	61:35:1284:1286	5738232	2	True				
ANR	5738390	Identifier	i		5738232	0					
ANR	5738391	IncDec	++		5738232	1					
ANR	5738392	CompoundStatement		18:40:519:519	5738232	3					
ANR	5738393	IfStatement	"if ( ! strcmp ( node -> children [ i ] -> tag , ""body|>"" ) )"		5738232	0					
ANR	5738394	Condition	"! strcmp ( node -> children [ i ] -> tag , ""body|>"" )"	62:7:1298:1339	5738232	0	True				
ANR	5738395	UnaryOperationExpression	"! strcmp ( node -> children [ i ] -> tag , ""body|>"" )"		5738232	0					
ANR	5738396	UnaryOperator	!		5738232	0					
ANR	5738397	CallExpression	"strcmp ( node -> children [ i ] -> tag , ""body|>"" )"		5738232	1					
ANR	5738398	Callee	strcmp		5738232	0					
ANR	5738399	Identifier	strcmp		5738232	0					
ANR	5738400	ArgumentList	node -> children [ i ] -> tag		5738232	1					
ANR	5738401	Argument	node -> children [ i ] -> tag		5738232	0					
ANR	5738402	PtrMemberAccess	node -> children [ i ] -> tag		5738232	0					
ANR	5738403	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738404	PtrMemberAccess	node -> children		5738232	0					
ANR	5738405	Identifier	node		5738232	0					
ANR	5738406	Identifier	children		5738232	1					
ANR	5738407	Identifier	i		5738232	1					
ANR	5738408	Identifier	tag		5738232	1					
ANR	5738409	Argument	"""body|>"""		5738232	1					
ANR	5738410	PrimaryExpression	"""body|>"""		5738232	0					
ANR	5738411	CompoundStatement		19:51:572:572	5738232	1					
ANR	5738412	ExpressionStatement	node = node -> children [ i ]	63:4:1348:1372	5738232	0	True				
ANR	5738413	AssignmentExpression	node = node -> children [ i ]		5738232	0		=			
ANR	5738414	Identifier	node		5738232	0					
ANR	5738415	ArrayIndexing	node -> children [ i ]		5738232	1					
ANR	5738416	PtrMemberAccess	node -> children		5738232	0					
ANR	5738417	Identifier	node		5738232	0					
ANR	5738418	Identifier	children		5738232	1					
ANR	5738419	Identifier	i		5738232	1					
ANR	5738420	ForStatement	for ( i = 0 ; i < node -> children_num ; i ++ )		5738232	1					
ANR	5738421	ForInit	i = 0 ;	64:9:1383:1387	5738232	0	True				
ANR	5738422	AssignmentExpression	i = 0		5738232	0		=			
ANR	5738423	Identifier	i		5738232	0					
ANR	5738424	PrimaryExpression	0		5738232	1					
ANR	5738425	Condition	i < node -> children_num	64:15:1389:1408	5738232	1	True				
ANR	5738426	RelationalExpression	i < node -> children_num		5738232	0		<			
ANR	5738427	Identifier	i		5738232	0					
ANR	5738428	PtrMemberAccess	node -> children_num		5738232	1					
ANR	5738429	Identifier	node		5738232	0					
ANR	5738430	Identifier	children_num		5738232	1					
ANR	5738431	PostIncDecOperationExpression	i ++	64:37:1411:1413	5738232	2	True				
ANR	5738432	Identifier	i		5738232	0					
ANR	5738433	IncDec	++		5738232	1					
ANR	5738434	CompoundStatement		21:42:646:646	5738232	3					
ANR	5738435	IfStatement	"if ( ! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" ) )"		5738232	0					
ANR	5738436	Condition	"! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"	65:9:1427:1468	5738232	0	True				
ANR	5738437	UnaryOperationExpression	"! strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"		5738232	0					
ANR	5738438	UnaryOperator	!		5738232	0					
ANR	5738439	CallExpression	"strcmp ( node -> children [ i ] -> tag , ""stmt|>"" )"		5738232	1					
ANR	5738440	Callee	strcmp		5738232	0					
ANR	5738441	Identifier	strcmp		5738232	0					
ANR	5738442	ArgumentList	node -> children [ i ] -> tag		5738232	1					
ANR	5738443	Argument	node -> children [ i ] -> tag		5738232	0					
ANR	5738444	PtrMemberAccess	node -> children [ i ] -> tag		5738232	0					
ANR	5738445	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738446	PtrMemberAccess	node -> children		5738232	0					
ANR	5738447	Identifier	node		5738232	0					
ANR	5738448	Identifier	children		5738232	1					
ANR	5738449	Identifier	i		5738232	1					
ANR	5738450	Identifier	tag		5738232	1					
ANR	5738451	Argument	"""stmt|>"""		5738232	1					
ANR	5738452	PrimaryExpression	"""stmt|>"""		5738232	0					
ANR	5738453	CompoundStatement		22:53:701:701	5738232	1					
ANR	5738454	ExpressionStatement	processNode ( node -> children [ i ] )	66:6:1479:1510	5738232	0	True				
ANR	5738455	CallExpression	processNode ( node -> children [ i ] )		5738232	0					
ANR	5738456	Callee	processNode		5738232	0					
ANR	5738457	Identifier	processNode		5738232	0					
ANR	5738458	ArgumentList	node -> children [ i ]		5738232	1					
ANR	5738459	Argument	node -> children [ i ]		5738232	0					
ANR	5738460	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738461	PtrMemberAccess	node -> children		5738232	0					
ANR	5738462	Identifier	node		5738232	0					
ANR	5738463	Identifier	children		5738232	1					
ANR	5738464	Identifier	i		5738232	1					
ANR	5738465	ElseStatement	else		5738232	0					
ANR	5738466	CompoundStatement		24:12:754:754	5738232	0					
ANR	5738467	ExpressionStatement	"eprintf ( ""UNK %s\\n"" , node -> children [ i ] -> tag )"	68:6:1532:1576	5738232	0	True				
ANR	5738468	CallExpression	"eprintf ( ""UNK %s\\n"" , node -> children [ i ] -> tag )"		5738232	0					
ANR	5738469	Callee	eprintf		5738232	0					
ANR	5738470	Identifier	eprintf		5738232	0					
ANR	5738471	ArgumentList	"""UNK %s\\n"""		5738232	1					
ANR	5738472	Argument	"""UNK %s\\n"""		5738232	0					
ANR	5738473	PrimaryExpression	"""UNK %s\\n"""		5738232	0					
ANR	5738474	Argument	node -> children [ i ] -> tag		5738232	1					
ANR	5738475	PtrMemberAccess	node -> children [ i ] -> tag		5738232	0					
ANR	5738476	ArrayIndexing	node -> children [ i ]		5738232	0					
ANR	5738477	PtrMemberAccess	node -> children		5738232	0					
ANR	5738478	Identifier	node		5738232	0					
ANR	5738479	Identifier	children		5738232	1					
ANR	5738480	Identifier	i		5738232	1					
ANR	5738481	Identifier	tag		5738232	1					
ANR	5738482	BreakStatement	break ;	71:4:1595:1600	5738232	2	True				
ANR	5738483	ElseStatement	else		5738232	0					
ANR	5738484	IfStatement	if ( isSigdef ( node ) )		5738232	0					
ANR	5738485	Condition	isSigdef ( node )	74:12:1623:1637	5738232	0	True				
ANR	5738486	CallExpression	isSigdef ( node )		5738232	0					
ANR	5738487	Callee	isSigdef		5738232	0					
ANR	5738488	Identifier	isSigdef		5738232	0					
ANR	5738489	ArgumentList	node		5738232	1					
ANR	5738490	Argument	node		5738232	0					
ANR	5738491	Identifier	node		5738232	0					
ANR	5738492	CompoundStatement		31:29:870:870	5738232	1					
ANR	5738493	IfStatement	if ( node -> children_num > 4 )		5738232	0					
ANR	5738494	Condition	node -> children_num > 4	75:6:1648:1667	5738232	0	True				
ANR	5738495	RelationalExpression	node -> children_num > 4		5738232	0		>			
ANR	5738496	PtrMemberAccess	node -> children_num		5738232	0					
ANR	5738497	Identifier	node		5738232	0					
ANR	5738498	Identifier	children_num		5738232	1					
ANR	5738499	PrimaryExpression	4		5738232	1					
ANR	5738500	CompoundStatement		35:3:1007:1053	5738232	1					
ANR	5738501	IdentifierDeclStatement	const char * name = node -> children [ 0 ] -> contents ;	76:3:1675:1721	5738232	0	True				
ANR	5738502	IdentifierDecl	* name = node -> children [ 0 ] -> contents		5738232	0					
ANR	5738503	IdentifierDeclType	const char *		5738232	0					
ANR	5738504	Identifier	name		5738232	1					
ANR	5738505	AssignmentExpression	* name = node -> children [ 0 ] -> contents		5738232	2		=			
ANR	5738506	Identifier	name		5738232	0					
ANR	5738507	PtrMemberAccess	node -> children [ 0 ] -> contents		5738232	1					
ANR	5738508	ArrayIndexing	node -> children [ 0 ]		5738232	0					
ANR	5738509	PtrMemberAccess	node -> children		5738232	0					
ANR	5738510	Identifier	node		5738232	0					
ANR	5738511	Identifier	children		5738232	1					
ANR	5738512	PrimaryExpression	0		5738232	1					
ANR	5738513	Identifier	contents		5738232	1					
ANR	5738514	IdentifierDeclStatement	const char * type = node -> children [ 2 ] -> contents ;	77:3:1726:1772	5738232	1	True				
ANR	5738515	IdentifierDecl	* type = node -> children [ 2 ] -> contents		5738232	0					
ANR	5738516	IdentifierDeclType	const char *		5738232	0					
ANR	5738517	Identifier	type		5738232	1					
ANR	5738518	AssignmentExpression	* type = node -> children [ 2 ] -> contents		5738232	2		=			
ANR	5738519	Identifier	type		5738232	0					
ANR	5738520	PtrMemberAccess	node -> children [ 2 ] -> contents		5738232	1					
ANR	5738521	ArrayIndexing	node -> children [ 2 ]		5738232	0					
ANR	5738522	PtrMemberAccess	node -> children		5738232	0					
ANR	5738523	Identifier	node		5738232	0					
ANR	5738524	Identifier	children		5738232	1					
ANR	5738525	PrimaryExpression	2		5738232	1					
ANR	5738526	Identifier	contents		5738232	1					
ANR	5738527	IdentifierDeclStatement	const char * size = node -> children [ 4 ] -> contents ;	78:3:1777:1823	5738232	2	True				
ANR	5738528	IdentifierDecl	* size = node -> children [ 4 ] -> contents		5738232	0					
ANR	5738529	IdentifierDeclType	const char *		5738232	0					
ANR	5738530	Identifier	size		5738232	1					
ANR	5738531	AssignmentExpression	* size = node -> children [ 4 ] -> contents		5738232	2		=			
ANR	5738532	Identifier	size		5738232	0					
ANR	5738533	PtrMemberAccess	node -> children [ 4 ] -> contents		5738232	1					
ANR	5738534	ArrayIndexing	node -> children [ 4 ]		5738232	0					
ANR	5738535	PtrMemberAccess	node -> children		5738232	0					
ANR	5738536	Identifier	node		5738232	0					
ANR	5738537	Identifier	children		5738232	1					
ANR	5738538	PrimaryExpression	4		5738232	1					
ANR	5738539	Identifier	contents		5738232	1					
ANR	5738540	IfStatement	"if ( ! strcmp ( type , ""alias"" ) )"		5738232	3					
ANR	5738541	Condition	"! strcmp ( type , ""alias"" )"	79:7:1832:1854	5738232	0	True				
ANR	5738542	UnaryOperationExpression	"! strcmp ( type , ""alias"" )"		5738232	0					
ANR	5738543	UnaryOperator	!		5738232	0					
ANR	5738544	CallExpression	"strcmp ( type , ""alias"" )"		5738232	1					
ANR	5738545	Callee	strcmp		5738232	0					
ANR	5738546	Identifier	strcmp		5738232	0					
ANR	5738547	ArgumentList	type		5738232	1					
ANR	5738548	Argument	type		5738232	0					
ANR	5738549	Identifier	type		5738232	0					
ANR	5738550	Argument	"""alias"""		5738232	1					
ANR	5738551	PrimaryExpression	"""alias"""		5738232	0					
ANR	5738552	CompoundStatement		36:32:1087:1087	5738232	1					
ANR	5738553	ExpressionStatement	"printf ( "".equ %s,%s\\n"" , name , size )"	80:4:1863:1898	5738232	0	True				
ANR	5738554	CallExpression	"printf ( "".equ %s,%s\\n"" , name , size )"		5738232	0					
ANR	5738555	Callee	printf		5738232	0					
ANR	5738556	Identifier	printf		5738232	0					
ANR	5738557	ArgumentList	""".equ %s,%s\\n"""		5738232	1					
ANR	5738558	Argument	""".equ %s,%s\\n"""		5738232	0					
ANR	5738559	PrimaryExpression	""".equ %s,%s\\n"""		5738232	0					
ANR	5738560	Argument	name		5738232	1					
ANR	5738561	Identifier	name		5738232	0					
ANR	5738562	Argument	size		5738232	2					
ANR	5738563	Identifier	size		5738232	0					
ANR	5738564	ElseStatement	else		5738232	0					
ANR	5738565	IfStatement	"if ( ! strcmp ( type , ""syscall"" ) )"		5738232	0					
ANR	5738566	Condition	"! strcmp ( type , ""syscall"" )"	81:14:1914:1938	5738232	0	True				
ANR	5738567	UnaryOperationExpression	"! strcmp ( type , ""syscall"" )"		5738232	0					
ANR	5738568	UnaryOperator	!		5738232	0					
ANR	5738569	CallExpression	"strcmp ( type , ""syscall"" )"		5738232	1					
ANR	5738570	Callee	strcmp		5738232	0					
ANR	5738571	Identifier	strcmp		5738232	0					
ANR	5738572	ArgumentList	type		5738232	1					
ANR	5738573	Argument	type		5738232	0					
ANR	5738574	Identifier	type		5738232	0					
ANR	5738575	Argument	"""syscall"""		5738232	1					
ANR	5738576	PrimaryExpression	"""syscall"""		5738232	0					
ANR	5738577	CompoundStatement		38:41:1171:1171	5738232	1					
ANR	5738578	ExpressionStatement	"printf ( ""; TODO: register syscall %s number %s\\n"" , name , size )"	82:4:1947:2009	5738232	0	True				
ANR	5738579	CallExpression	"printf ( ""; TODO: register syscall %s number %s\\n"" , name , size )"		5738232	0					
ANR	5738580	Callee	printf		5738232	0					
ANR	5738581	Identifier	printf		5738232	0					
ANR	5738582	ArgumentList	"""; TODO: register syscall %s number %s\\n"""		5738232	1					
ANR	5738583	Argument	"""; TODO: register syscall %s number %s\\n"""		5738232	0					
ANR	5738584	PrimaryExpression	"""; TODO: register syscall %s number %s\\n"""		5738232	0					
ANR	5738585	Argument	name		5738232	1					
ANR	5738586	Identifier	name		5738232	0					
ANR	5738587	Argument	size		5738232	2					
ANR	5738588	Identifier	size		5738232	0					
ANR	5738589	ElseStatement	else		5738232	0					
ANR	5738590	IfStatement	"if ( ! strcmp ( type , ""global"" ) )"		5738232	0					
ANR	5738591	Condition	"! strcmp ( type , ""global"" )"	83:14:2025:2048	5738232	0	True				
ANR	5738592	UnaryOperationExpression	"! strcmp ( type , ""global"" )"		5738232	0					
ANR	5738593	UnaryOperator	!		5738232	0					
ANR	5738594	CallExpression	"strcmp ( type , ""global"" )"		5738232	1					
ANR	5738595	Callee	strcmp		5738232	0					
ANR	5738596	Identifier	strcmp		5738232	0					
ANR	5738597	ArgumentList	type		5738232	1					
ANR	5738598	Argument	type		5738232	0					
ANR	5738599	Identifier	type		5738232	0					
ANR	5738600	Argument	"""global"""		5738232	1					
ANR	5738601	PrimaryExpression	"""global"""		5738232	0					
ANR	5738602	CompoundStatement		40:40:1281:1281	5738232	1					
ANR	5738603	ExpressionStatement	"printf ( ""; TODO: global \\n"" )"	84:4:2057:2085	5738232	0	True				
ANR	5738604	CallExpression	"printf ( ""; TODO: global \\n"" )"		5738232	0					
ANR	5738605	Callee	printf		5738232	0					
ANR	5738606	Identifier	printf		5738232	0					
ANR	5738607	ArgumentList	"""; TODO: global \\n"""		5738232	1					
ANR	5738608	Argument	"""; TODO: global \\n"""		5738232	0					
ANR	5738609	PrimaryExpression	"""; TODO: global \\n"""		5738232	0					
ANR	5738610	ElseStatement	else		5738232	0					
ANR	5738611	CompoundStatement		42:10:1327:1327	5738232	0					
ANR	5738612	ExpressionStatement	"printf ( ""; UNKNOWN EXPRESISON: NAME = '%s' "" , name )"	86:4:2103:2154	5738232	0	True				
ANR	5738613	CallExpression	"printf ( ""; UNKNOWN EXPRESISON: NAME = '%s' "" , name )"		5738232	0					
ANR	5738614	Callee	printf		5738232	0					
ANR	5738615	Identifier	printf		5738232	0					
ANR	5738616	ArgumentList	"""; UNKNOWN EXPRESISON: NAME = '%s' """		5738232	1					
ANR	5738617	Argument	"""; UNKNOWN EXPRESISON: NAME = '%s' """		5738232	0					
ANR	5738618	PrimaryExpression	"""; UNKNOWN EXPRESISON: NAME = '%s' """		5738232	0					
ANR	5738619	Argument	name		5738232	1					
ANR	5738620	Identifier	name		5738232	0					
ANR	5738621	ExpressionStatement	"printf ( ""TYPE = '%s' "" , type )"	87:4:2160:2189	5738232	1	True				
ANR	5738622	CallExpression	"printf ( ""TYPE = '%s' "" , type )"		5738232	0					
ANR	5738623	Callee	printf		5738232	0					
ANR	5738624	Identifier	printf		5738232	0					
ANR	5738625	ArgumentList	"""TYPE = '%s' """		5738232	1					
ANR	5738626	Argument	"""TYPE = '%s' """		5738232	0					
ANR	5738627	PrimaryExpression	"""TYPE = '%s' """		5738232	0					
ANR	5738628	Argument	type		5738232	1					
ANR	5738629	Identifier	type		5738232	0					
ANR	5738630	ExpressionStatement	"printf ( ""SIZE = '%s'\\n"" , size )"	88:4:2195:2225	5738232	2	True				
ANR	5738631	CallExpression	"printf ( ""SIZE = '%s'\\n"" , size )"		5738232	0					
ANR	5738632	Callee	printf		5738232	0					
ANR	5738633	Identifier	printf		5738232	0					
ANR	5738634	ArgumentList	"""SIZE = '%s'\\n"""		5738232	1					
ANR	5738635	Argument	"""SIZE = '%s'\\n"""		5738232	0					
ANR	5738636	PrimaryExpression	"""SIZE = '%s'\\n"""		5738232	0					
ANR	5738637	Argument	size		5738232	1					
ANR	5738638	Identifier	size		5738232	0					
ANR	5738639	ElseStatement	else		5738232	0					
ANR	5738640	IfStatement	if ( isComment ( node ) )		5738232	0					
ANR	5738641	Condition	isComment ( node )	91:12:2248:2263	5738232	0	True				
ANR	5738642	CallExpression	isComment ( node )		5738232	0					
ANR	5738643	Callee	isComment		5738232	0					
ANR	5738644	Identifier	isComment		5738232	0					
ANR	5738645	ArgumentList	node		5738232	1					
ANR	5738646	Argument	node		5738232	0					
ANR	5738647	Identifier	node		5738232	0					
ANR	5738648	CompoundStatement		50:2:1541:1561	5738232	1					
ANR	5738649	IdentifierDeclStatement	char * s = strdup ( node -> contents + 2 ) ;	92:2:2270:2307	5738232	0	True				
ANR	5738650	IdentifierDecl	* s = strdup ( node -> contents + 2 )		5738232	0					
ANR	5738651	IdentifierDeclType	char *		5738232	0					
ANR	5738652	Identifier	s		5738232	1					
ANR	5738653	AssignmentExpression	* s = strdup ( node -> contents + 2 )		5738232	2		=			
ANR	5738654	Identifier	s		5738232	0					
ANR	5738655	CallExpression	strdup ( node -> contents + 2 )		5738232	1					
ANR	5738656	Callee	strdup		5738232	0					
ANR	5738657	Identifier	strdup		5738232	0					
ANR	5738658	ArgumentList	node -> contents + 2		5738232	1					
ANR	5738659	Argument	node -> contents + 2		5738232	0					
ANR	5738660	AdditiveExpression	node -> contents + 2		5738232	0		+			
ANR	5738661	PtrMemberAccess	node -> contents		5738232	0					
ANR	5738662	Identifier	node		5738232	0					
ANR	5738663	Identifier	contents		5738232	1					
ANR	5738664	PrimaryExpression	2		5738232	1					
ANR	5738665	IdentifierDeclStatement	int len = strlen ( s ) ;	93:2:2311:2331	5738232	1	True				
ANR	5738666	IdentifierDecl	len = strlen ( s )		5738232	0					
ANR	5738667	IdentifierDeclType	int		5738232	0					
ANR	5738668	Identifier	len		5738232	1					
ANR	5738669	AssignmentExpression	len = strlen ( s )		5738232	2		=			
ANR	5738670	Identifier	len		5738232	0					
ANR	5738671	CallExpression	strlen ( s )		5738232	1					
ANR	5738672	Callee	strlen		5738232	0					
ANR	5738673	Identifier	strlen		5738232	0					
ANR	5738674	ArgumentList	s		5738232	1					
ANR	5738675	Argument	s		5738232	0					
ANR	5738676	Identifier	s		5738232	0					
ANR	5738677	IfStatement	if ( node -> contents [ 1 ] == '*' )		5738232	2					
ANR	5738678	Condition	node -> contents [ 1 ] == '*'	94:6:2339:2362	5738232	0	True				
ANR	5738679	EqualityExpression	node -> contents [ 1 ] == '*'		5738232	0		==			
ANR	5738680	ArrayIndexing	node -> contents [ 1 ]		5738232	0					
ANR	5738681	PtrMemberAccess	node -> contents		5738232	0					
ANR	5738682	Identifier	node		5738232	0					
ANR	5738683	Identifier	contents		5738232	1					
ANR	5738684	PrimaryExpression	1		5738232	1					
ANR	5738685	PrimaryExpression	'*'		5738232	1					
ANR	5738686	CompoundStatement		51:32:1595:1595	5738232	1					
ANR	5738687	ExpressionStatement	s [ len - 2 ] = 0	95:3:2370:2382	5738232	0	True				
ANR	5738688	AssignmentExpression	s [ len - 2 ] = 0		5738232	0		=			
ANR	5738689	ArrayIndexing	s [ len - 2 ]		5738232	0					
ANR	5738690	Identifier	s		5738232	0					
ANR	5738691	AdditiveExpression	len - 2		5738232	1		-			
ANR	5738692	Identifier	len		5738232	0					
ANR	5738693	PrimaryExpression	2		5738232	1					
ANR	5738694	PrimaryExpression	0		5738232	1					
ANR	5738695	WhileStatement	while ( s )		5738232	3					
ANR	5738696	Condition	s	97:9:2397:2397	5738232	0	True				
ANR	5738697	Identifier	s		5738232	0					
ANR	5738698	CompoundStatement		55:3:1635:1662	5738232	1					
ANR	5738699	IdentifierDeclStatement	"char * nl = strchr ( s , '\\n' ) ;"	98:3:2405:2432	5738232	0	True				
ANR	5738700	IdentifierDecl	"* nl = strchr ( s , '\\n' )"		5738232	0					
ANR	5738701	IdentifierDeclType	char *		5738232	0					
ANR	5738702	Identifier	nl		5738232	1					
ANR	5738703	AssignmentExpression	"* nl = strchr ( s , '\\n' )"		5738232	2		=			
ANR	5738704	Identifier	nl		5738232	0					
ANR	5738705	CallExpression	"strchr ( s , '\\n' )"		5738232	1					
ANR	5738706	Callee	strchr		5738232	0					
ANR	5738707	Identifier	strchr		5738232	0					
ANR	5738708	ArgumentList	s		5738232	1					
ANR	5738709	Argument	s		5738232	0					
ANR	5738710	Identifier	s		5738232	0					
ANR	5738711	Argument	'\\n'		5738232	1					
ANR	5738712	PrimaryExpression	'\\n'		5738232	0					
ANR	5738713	IfStatement	if ( nl )		5738232	1					
ANR	5738714	Condition	nl	99:7:2441:2442	5738232	0	True				
ANR	5738715	Identifier	nl		5738232	0					
ANR	5738716	CompoundStatement		56:11:1675:1675	5738232	1					
ANR	5738717	ExpressionStatement	* nl = 0	100:4:2451:2458	5738232	0	True				
ANR	5738718	AssignmentExpression	* nl = 0		5738232	0		=			
ANR	5738719	UnaryOperationExpression	* nl		5738232	0					
ANR	5738720	UnaryOperator	*		5738232	0					
ANR	5738721	Identifier	nl		5738232	1					
ANR	5738722	PrimaryExpression	0		5738232	1					
ANR	5738723	ExpressionStatement	"printf ( ""; %s\\n"" , s )"	101:4:2464:2484	5738232	1	True				
ANR	5738724	CallExpression	"printf ( ""; %s\\n"" , s )"		5738232	0					
ANR	5738725	Callee	printf		5738232	0					
ANR	5738726	Identifier	printf		5738232	0					
ANR	5738727	ArgumentList	"""; %s\\n"""		5738232	1					
ANR	5738728	Argument	"""; %s\\n"""		5738232	0					
ANR	5738729	PrimaryExpression	"""; %s\\n"""		5738232	0					
ANR	5738730	Argument	s		5738232	1					
ANR	5738731	Identifier	s		5738232	0					
ANR	5738732	ExpressionStatement	s = nl + 1	102:4:2490:2500	5738232	2	True				
ANR	5738733	AssignmentExpression	s = nl + 1		5738232	0		=			
ANR	5738734	Identifier	s		5738232	0					
ANR	5738735	AdditiveExpression	nl + 1		5738232	1		+			
ANR	5738736	Identifier	nl		5738232	0					
ANR	5738737	PrimaryExpression	1		5738232	1					
ANR	5738738	ElseStatement	else		5738232	0					
ANR	5738739	CompoundStatement		60:10:1742:1742	5738232	0					
ANR	5738740	ExpressionStatement	"printf ( ""; %s\\n"" , s )"	104:4:2518:2538	5738232	0	True				
ANR	5738741	CallExpression	"printf ( ""; %s\\n"" , s )"		5738232	0					
ANR	5738742	Callee	printf		5738232	0					
ANR	5738743	Identifier	printf		5738232	0					
ANR	5738744	ArgumentList	"""; %s\\n"""		5738232	1					
ANR	5738745	Argument	"""; %s\\n"""		5738232	0					
ANR	5738746	PrimaryExpression	"""; %s\\n"""		5738232	0					
ANR	5738747	Argument	s		5738232	1					
ANR	5738748	Identifier	s		5738232	0					
ANR	5738749	ExpressionStatement	s = NULL	105:4:2544:2552	5738232	1	True				
ANR	5738750	AssignmentExpression	s = NULL		5738232	0		=			
ANR	5738751	Identifier	s		5738232	0					
ANR	5738752	Identifier	NULL		5738232	1					
ANR	5738753	ExpressionStatement	free ( s )	108:2:2565:2573	5738232	4	True				
ANR	5738754	CallExpression	free ( s )		5738232	0					
ANR	5738755	Callee	free		5738232	0					
ANR	5738756	Identifier	free		5738232	0					
ANR	5738757	ArgumentList	s		5738232	1					
ANR	5738758	Argument	s		5738232	0					
ANR	5738759	Identifier	s		5738232	0					
ANR	5738760	ElseStatement	else		5738232	0					
ANR	5738761	IfStatement	if ( isInlineAssembly ( node ) )		5738232	0					
ANR	5738762	Condition	isInlineAssembly ( node )	109:12:2587:2609	5738232	0	True				
ANR	5738763	CallExpression	isInlineAssembly ( node )		5738232	0					
ANR	5738764	Callee	isInlineAssembly		5738232	0					
ANR	5738765	Identifier	isInlineAssembly		5738232	0					
ANR	5738766	ArgumentList	node		5738232	1					
ANR	5738767	Argument	node		5738232	0					
ANR	5738768	Identifier	node		5738232	0					
ANR	5738769	CompoundStatement		66:37:1842:1842	5738232	1					
ANR	5738770	ExpressionStatement	"printf ( ""%s\\n"" , node -> contents + 1 )"	110:2:2616:2649	5738232	0	True				
ANR	5738771	CallExpression	"printf ( ""%s\\n"" , node -> contents + 1 )"		5738232	0					
ANR	5738772	Callee	printf		5738232	0					
ANR	5738773	Identifier	printf		5738232	0					
ANR	5738774	ArgumentList	"""%s\\n"""		5738232	1					
ANR	5738775	Argument	"""%s\\n"""		5738232	0					
ANR	5738776	PrimaryExpression	"""%s\\n"""		5738232	0					
ANR	5738777	Argument	node -> contents + 1		5738232	1					
ANR	5738778	AdditiveExpression	node -> contents + 1		5738232	0		+			
ANR	5738779	PtrMemberAccess	node -> contents		5738232	0					
ANR	5738780	Identifier	node		5738232	0					
ANR	5738781	Identifier	contents		5738232	1					
ANR	5738782	PrimaryExpression	1		5738232	1					
ANR	5738783	ReturnType	static void		5738232	1					
ANR	5738784	Identifier	processNode		5738232	2					
ANR	5738785	ParameterList	mpc_ast_t * node		5738232	3					
ANR	5738786	Parameter	mpc_ast_t * node	44:25:752:766	5738232	0	True				
ANR	5738787	ParameterType	mpc_ast_t *		5738232	0					
ANR	5738788	Identifier	node		5738232	1					
ANR	5738789	CFGEntryNode	ENTRY		5738232		True				
ANR	5738790	CFGExitNode	EXIT		5738232		True				
ANR	5738791	Symbol	isComment		5738232						
ANR	5738792	Symbol	strchr		5738232						
ANR	5738793	Symbol	type		5738232						
ANR	5738794	Symbol	node -> children_num		5738232						
ANR	5738795	Symbol	* * node -> children		5738232						
ANR	5738796	Symbol	* args		5738232						
ANR	5738797	Symbol	isStatement		5738232						
ANR	5738798	Symbol	* * * node		5738232						
ANR	5738799	Symbol	node -> children [ 4 ] -> contents		5738232						
ANR	5738800	Symbol	strlen		5738232						
ANR	5738801	Symbol	len		5738232						
ANR	5738802	Symbol	node -> contents		5738232						
ANR	5738803	Symbol	* node		5738232						
ANR	5738804	Symbol	narg		5738232						
ANR	5738805	Symbol	tag		5738232						
ANR	5738806	Symbol	node -> children [ 2 ] -> contents		5738232						
ANR	5738807	Symbol	* node -> children		5738232						
ANR	5738808	Symbol	val		5738232						
ANR	5738809	Symbol	strcmp		5738232						
ANR	5738810	Symbol	* * i		5738232						
ANR	5738811	Symbol	NULL		5738232						
ANR	5738812	Symbol	node -> children [ 0 ] -> contents		5738232						
ANR	5738813	Symbol	* nl		5738232						
ANR	5738814	Symbol	i		5738232						
ANR	5738815	Symbol	j		5738232						
ANR	5738816	Symbol	args		5738232						
ANR	5738817	Symbol	node		5738232						
ANR	5738818	Symbol	* i		5738232						
ANR	5738819	Symbol	s		5738232						
ANR	5738820	Symbol	* * node		5738232						
ANR	5738821	Symbol	size		5738232						
ANR	5738822	Symbol	node -> children [ i ] -> tag		5738232						
ANR	5738823	Symbol	name		5738232						
ANR	5738824	Symbol	node -> children [ i ] -> contents		5738232						
ANR	5738825	Symbol	strdup		5738232						
ANR	5738826	Symbol	isProcedure		5738232						
ANR	5738827	Symbol	isSigdef		5738232						
ANR	5738828	Symbol	* s		5738232						
ANR	5738829	Symbol	node -> children		5738232						
ANR	5738830	Symbol	nl		5738232						
ANR	5738831	Symbol	* node -> contents		5738232						
ANR	5738832	Symbol	* len		5738232						
ANR	5738833	Symbol	isInlineAssembly		5738232						
ANR	5738834	Function	main	114:0:2657:8276							
ANR	5738835	FunctionDef	"main (int argc , char * * argv)"		5738834	0					
ANR	5738836	CompoundStatement		114:32:2689:8276	5738834	0					
ANR	5738837	IdentifierDeclStatement	"mpc_parser_t * Ident = mpc_new ( ""ident"" ) ;"	115:1:2692:2734	5738834	0	True				
ANR	5738838	IdentifierDecl	"* Ident = mpc_new ( ""ident"" )"		5738834	0					
ANR	5738839	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738840	Identifier	Ident		5738834	1					
ANR	5738841	AssignmentExpression	"* Ident = mpc_new ( ""ident"" )"		5738834	2		=			
ANR	5738842	Identifier	Ident		5738834	0					
ANR	5738843	CallExpression	"mpc_new ( ""ident"" )"		5738834	1					
ANR	5738844	Callee	mpc_new		5738834	0					
ANR	5738845	Identifier	mpc_new		5738834	0					
ANR	5738846	ArgumentList	"""ident"""		5738834	1					
ANR	5738847	Argument	"""ident"""		5738834	0					
ANR	5738848	PrimaryExpression	"""ident"""		5738834	0					
ANR	5738849	IdentifierDeclStatement	"mpc_parser_t * Number = mpc_new ( ""number"" ) ;"	116:1:2737:2780	5738834	1	True				
ANR	5738850	IdentifierDecl	"* Number = mpc_new ( ""number"" )"		5738834	0					
ANR	5738851	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738852	Identifier	Number		5738834	1					
ANR	5738853	AssignmentExpression	"* Number = mpc_new ( ""number"" )"		5738834	2		=			
ANR	5738854	Identifier	Number		5738834	0					
ANR	5738855	CallExpression	"mpc_new ( ""number"" )"		5738834	1					
ANR	5738856	Callee	mpc_new		5738834	0					
ANR	5738857	Identifier	mpc_new		5738834	0					
ANR	5738858	ArgumentList	"""number"""		5738834	1					
ANR	5738859	Argument	"""number"""		5738834	0					
ANR	5738860	PrimaryExpression	"""number"""		5738834	0					
ANR	5738861	IdentifierDeclStatement	"mpc_parser_t * Character = mpc_new ( ""character"" ) ;"	117:1:2783:2829	5738834	2	True				
ANR	5738862	IdentifierDecl	"* Character = mpc_new ( ""character"" )"		5738834	0					
ANR	5738863	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738864	Identifier	Character		5738834	1					
ANR	5738865	AssignmentExpression	"* Character = mpc_new ( ""character"" )"		5738834	2		=			
ANR	5738866	Identifier	Character		5738834	0					
ANR	5738867	CallExpression	"mpc_new ( ""character"" )"		5738834	1					
ANR	5738868	Callee	mpc_new		5738834	0					
ANR	5738869	Identifier	mpc_new		5738834	0					
ANR	5738870	ArgumentList	"""character"""		5738834	1					
ANR	5738871	Argument	"""character"""		5738834	0					
ANR	5738872	PrimaryExpression	"""character"""		5738834	0					
ANR	5738873	IdentifierDeclStatement	"mpc_parser_t * String = mpc_new ( ""string"" ) ;"	118:1:2832:2875	5738834	3	True				
ANR	5738874	IdentifierDecl	"* String = mpc_new ( ""string"" )"		5738834	0					
ANR	5738875	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738876	Identifier	String		5738834	1					
ANR	5738877	AssignmentExpression	"* String = mpc_new ( ""string"" )"		5738834	2		=			
ANR	5738878	Identifier	String		5738834	0					
ANR	5738879	CallExpression	"mpc_new ( ""string"" )"		5738834	1					
ANR	5738880	Callee	mpc_new		5738834	0					
ANR	5738881	Identifier	mpc_new		5738834	0					
ANR	5738882	ArgumentList	"""string"""		5738834	1					
ANR	5738883	Argument	"""string"""		5738834	0					
ANR	5738884	PrimaryExpression	"""string"""		5738834	0					
ANR	5738885	IdentifierDeclStatement	"mpc_parser_t * Factor = mpc_new ( ""factor"" ) ;"	119:1:2878:2921	5738834	4	True				
ANR	5738886	IdentifierDecl	"* Factor = mpc_new ( ""factor"" )"		5738834	0					
ANR	5738887	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738888	Identifier	Factor		5738834	1					
ANR	5738889	AssignmentExpression	"* Factor = mpc_new ( ""factor"" )"		5738834	2		=			
ANR	5738890	Identifier	Factor		5738834	0					
ANR	5738891	CallExpression	"mpc_new ( ""factor"" )"		5738834	1					
ANR	5738892	Callee	mpc_new		5738834	0					
ANR	5738893	Identifier	mpc_new		5738834	0					
ANR	5738894	ArgumentList	"""factor"""		5738834	1					
ANR	5738895	Argument	"""factor"""		5738834	0					
ANR	5738896	PrimaryExpression	"""factor"""		5738834	0					
ANR	5738897	IdentifierDeclStatement	"mpc_parser_t * Term = mpc_new ( ""term"" ) ;"	120:1:2924:2965	5738834	5	True				
ANR	5738898	IdentifierDecl	"* Term = mpc_new ( ""term"" )"		5738834	0					
ANR	5738899	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738900	Identifier	Term		5738834	1					
ANR	5738901	AssignmentExpression	"* Term = mpc_new ( ""term"" )"		5738834	2		=			
ANR	5738902	Identifier	Term		5738834	0					
ANR	5738903	CallExpression	"mpc_new ( ""term"" )"		5738834	1					
ANR	5738904	Callee	mpc_new		5738834	0					
ANR	5738905	Identifier	mpc_new		5738834	0					
ANR	5738906	ArgumentList	"""term"""		5738834	1					
ANR	5738907	Argument	"""term"""		5738834	0					
ANR	5738908	PrimaryExpression	"""term"""		5738834	0					
ANR	5738909	IdentifierDeclStatement	"mpc_parser_t * Lexp = mpc_new ( ""lexp"" ) ;"	121:1:2968:3009	5738834	6	True				
ANR	5738910	IdentifierDecl	"* Lexp = mpc_new ( ""lexp"" )"		5738834	0					
ANR	5738911	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738912	Identifier	Lexp		5738834	1					
ANR	5738913	AssignmentExpression	"* Lexp = mpc_new ( ""lexp"" )"		5738834	2		=			
ANR	5738914	Identifier	Lexp		5738834	0					
ANR	5738915	CallExpression	"mpc_new ( ""lexp"" )"		5738834	1					
ANR	5738916	Callee	mpc_new		5738834	0					
ANR	5738917	Identifier	mpc_new		5738834	0					
ANR	5738918	ArgumentList	"""lexp"""		5738834	1					
ANR	5738919	Argument	"""lexp"""		5738834	0					
ANR	5738920	PrimaryExpression	"""lexp"""		5738834	0					
ANR	5738921	IdentifierDeclStatement	"mpc_parser_t * Stmt = mpc_new ( ""stmt"" ) ;"	122:1:3012:3053	5738834	7	True				
ANR	5738922	IdentifierDecl	"* Stmt = mpc_new ( ""stmt"" )"		5738834	0					
ANR	5738923	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738924	Identifier	Stmt		5738834	1					
ANR	5738925	AssignmentExpression	"* Stmt = mpc_new ( ""stmt"" )"		5738834	2		=			
ANR	5738926	Identifier	Stmt		5738834	0					
ANR	5738927	CallExpression	"mpc_new ( ""stmt"" )"		5738834	1					
ANR	5738928	Callee	mpc_new		5738834	0					
ANR	5738929	Identifier	mpc_new		5738834	0					
ANR	5738930	ArgumentList	"""stmt"""		5738834	1					
ANR	5738931	Argument	"""stmt"""		5738834	0					
ANR	5738932	PrimaryExpression	"""stmt"""		5738834	0					
ANR	5738933	IdentifierDeclStatement	"mpc_parser_t * Exp = mpc_new ( ""exp"" ) ;"	123:1:3056:3096	5738834	8	True				
ANR	5738934	IdentifierDecl	"* Exp = mpc_new ( ""exp"" )"		5738834	0					
ANR	5738935	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738936	Identifier	Exp		5738834	1					
ANR	5738937	AssignmentExpression	"* Exp = mpc_new ( ""exp"" )"		5738834	2		=			
ANR	5738938	Identifier	Exp		5738834	0					
ANR	5738939	CallExpression	"mpc_new ( ""exp"" )"		5738834	1					
ANR	5738940	Callee	mpc_new		5738834	0					
ANR	5738941	Identifier	mpc_new		5738834	0					
ANR	5738942	ArgumentList	"""exp"""		5738834	1					
ANR	5738943	Argument	"""exp"""		5738834	0					
ANR	5738944	PrimaryExpression	"""exp"""		5738834	0					
ANR	5738945	IdentifierDeclStatement	"mpc_parser_t * Vartype = mpc_new ( ""vartype"" ) ;"	124:1:3099:3143	5738834	9	True				
ANR	5738946	IdentifierDecl	"* Vartype = mpc_new ( ""vartype"" )"		5738834	0					
ANR	5738947	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738948	Identifier	Vartype		5738834	1					
ANR	5738949	AssignmentExpression	"* Vartype = mpc_new ( ""vartype"" )"		5738834	2		=			
ANR	5738950	Identifier	Vartype		5738834	0					
ANR	5738951	CallExpression	"mpc_new ( ""vartype"" )"		5738834	1					
ANR	5738952	Callee	mpc_new		5738834	0					
ANR	5738953	Identifier	mpc_new		5738834	0					
ANR	5738954	ArgumentList	"""vartype"""		5738834	1					
ANR	5738955	Argument	"""vartype"""		5738834	0					
ANR	5738956	PrimaryExpression	"""vartype"""		5738834	0					
ANR	5738957	IdentifierDeclStatement	"mpc_parser_t * Typeident = mpc_new ( ""typeident"" ) ;"	125:1:3146:3192	5738834	10	True				
ANR	5738958	IdentifierDecl	"* Typeident = mpc_new ( ""typeident"" )"		5738834	0					
ANR	5738959	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738960	Identifier	Typeident		5738834	1					
ANR	5738961	AssignmentExpression	"* Typeident = mpc_new ( ""typeident"" )"		5738834	2		=			
ANR	5738962	Identifier	Typeident		5738834	0					
ANR	5738963	CallExpression	"mpc_new ( ""typeident"" )"		5738834	1					
ANR	5738964	Callee	mpc_new		5738834	0					
ANR	5738965	Identifier	mpc_new		5738834	0					
ANR	5738966	ArgumentList	"""typeident"""		5738834	1					
ANR	5738967	Argument	"""typeident"""		5738834	0					
ANR	5738968	PrimaryExpression	"""typeident"""		5738834	0					
ANR	5738969	IdentifierDeclStatement	"mpc_parser_t * Decls = mpc_new ( ""decls"" ) ;"	126:1:3195:3237	5738834	11	True				
ANR	5738970	IdentifierDecl	"* Decls = mpc_new ( ""decls"" )"		5738834	0					
ANR	5738971	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738972	Identifier	Decls		5738834	1					
ANR	5738973	AssignmentExpression	"* Decls = mpc_new ( ""decls"" )"		5738834	2		=			
ANR	5738974	Identifier	Decls		5738834	0					
ANR	5738975	CallExpression	"mpc_new ( ""decls"" )"		5738834	1					
ANR	5738976	Callee	mpc_new		5738834	0					
ANR	5738977	Identifier	mpc_new		5738834	0					
ANR	5738978	ArgumentList	"""decls"""		5738834	1					
ANR	5738979	Argument	"""decls"""		5738834	0					
ANR	5738980	PrimaryExpression	"""decls"""		5738834	0					
ANR	5738981	IdentifierDeclStatement	"mpc_parser_t * Args = mpc_new ( ""args"" ) ;"	127:1:3240:3281	5738834	12	True				
ANR	5738982	IdentifierDecl	"* Args = mpc_new ( ""args"" )"		5738834	0					
ANR	5738983	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738984	Identifier	Args		5738834	1					
ANR	5738985	AssignmentExpression	"* Args = mpc_new ( ""args"" )"		5738834	2		=			
ANR	5738986	Identifier	Args		5738834	0					
ANR	5738987	CallExpression	"mpc_new ( ""args"" )"		5738834	1					
ANR	5738988	Callee	mpc_new		5738834	0					
ANR	5738989	Identifier	mpc_new		5738834	0					
ANR	5738990	ArgumentList	"""args"""		5738834	1					
ANR	5738991	Argument	"""args"""		5738834	0					
ANR	5738992	PrimaryExpression	"""args"""		5738834	0					
ANR	5738993	IdentifierDeclStatement	"mpc_parser_t * Body = mpc_new ( ""body"" ) ;"	128:1:3284:3325	5738834	13	True				
ANR	5738994	IdentifierDecl	"* Body = mpc_new ( ""body"" )"		5738834	0					
ANR	5738995	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5738996	Identifier	Body		5738834	1					
ANR	5738997	AssignmentExpression	"* Body = mpc_new ( ""body"" )"		5738834	2		=			
ANR	5738998	Identifier	Body		5738834	0					
ANR	5738999	CallExpression	"mpc_new ( ""body"" )"		5738834	1					
ANR	5739000	Callee	mpc_new		5738834	0					
ANR	5739001	Identifier	mpc_new		5738834	0					
ANR	5739002	ArgumentList	"""body"""		5738834	1					
ANR	5739003	Argument	"""body"""		5738834	0					
ANR	5739004	PrimaryExpression	"""body"""		5738834	0					
ANR	5739005	IdentifierDeclStatement	"mpc_parser_t * Comment = mpc_new ( ""comment"" ) ;"	129:1:3328:3372	5738834	14	True				
ANR	5739006	IdentifierDecl	"* Comment = mpc_new ( ""comment"" )"		5738834	0					
ANR	5739007	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739008	Identifier	Comment		5738834	1					
ANR	5739009	AssignmentExpression	"* Comment = mpc_new ( ""comment"" )"		5738834	2		=			
ANR	5739010	Identifier	Comment		5738834	0					
ANR	5739011	CallExpression	"mpc_new ( ""comment"" )"		5738834	1					
ANR	5739012	Callee	mpc_new		5738834	0					
ANR	5739013	Identifier	mpc_new		5738834	0					
ANR	5739014	ArgumentList	"""comment"""		5738834	1					
ANR	5739015	Argument	"""comment"""		5738834	0					
ANR	5739016	PrimaryExpression	"""comment"""		5738834	0					
ANR	5739017	IdentifierDeclStatement	"mpc_parser_t * Linecomment = mpc_new ( ""linecomment"" ) ;"	130:1:3375:3427	5738834	15	True				
ANR	5739018	IdentifierDecl	"* Linecomment = mpc_new ( ""linecomment"" )"		5738834	0					
ANR	5739019	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739020	Identifier	Linecomment		5738834	1					
ANR	5739021	AssignmentExpression	"* Linecomment = mpc_new ( ""linecomment"" )"		5738834	2		=			
ANR	5739022	Identifier	Linecomment		5738834	0					
ANR	5739023	CallExpression	"mpc_new ( ""linecomment"" )"		5738834	1					
ANR	5739024	Callee	mpc_new		5738834	0					
ANR	5739025	Identifier	mpc_new		5738834	0					
ANR	5739026	ArgumentList	"""linecomment"""		5738834	1					
ANR	5739027	Argument	"""linecomment"""		5738834	0					
ANR	5739028	PrimaryExpression	"""linecomment"""		5738834	0					
ANR	5739029	IdentifierDeclStatement	"mpc_parser_t * Asm = mpc_new ( ""asm"" ) ;"	131:1:3430:3464	5738834	16	True				
ANR	5739030	IdentifierDecl	"* Asm = mpc_new ( ""asm"" )"		5738834	0					
ANR	5739031	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739032	Identifier	Asm		5738834	1					
ANR	5739033	AssignmentExpression	"* Asm = mpc_new ( ""asm"" )"		5738834	2		=			
ANR	5739034	Identifier	Asm		5738834	0					
ANR	5739035	CallExpression	"mpc_new ( ""asm"" )"		5738834	1					
ANR	5739036	Callee	mpc_new		5738834	0					
ANR	5739037	Identifier	mpc_new		5738834	0					
ANR	5739038	ArgumentList	"""asm"""		5738834	1					
ANR	5739039	Argument	"""asm"""		5738834	0					
ANR	5739040	PrimaryExpression	"""asm"""		5738834	0					
ANR	5739041	IdentifierDeclStatement	"mpc_parser_t * Procedure = mpc_new ( ""procedure"" ) ;"	132:1:3467:3513	5738834	17	True				
ANR	5739042	IdentifierDecl	"* Procedure = mpc_new ( ""procedure"" )"		5738834	0					
ANR	5739043	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739044	Identifier	Procedure		5738834	1					
ANR	5739045	AssignmentExpression	"* Procedure = mpc_new ( ""procedure"" )"		5738834	2		=			
ANR	5739046	Identifier	Procedure		5738834	0					
ANR	5739047	CallExpression	"mpc_new ( ""procedure"" )"		5738834	1					
ANR	5739048	Callee	mpc_new		5738834	0					
ANR	5739049	Identifier	mpc_new		5738834	0					
ANR	5739050	ArgumentList	"""procedure"""		5738834	1					
ANR	5739051	Argument	"""procedure"""		5738834	0					
ANR	5739052	PrimaryExpression	"""procedure"""		5738834	0					
ANR	5739053	IdentifierDeclStatement	"mpc_parser_t * CProcedure = mpc_new ( ""cprocedure"" ) ;"	133:1:3516:3564	5738834	18	True				
ANR	5739054	IdentifierDecl	"* CProcedure = mpc_new ( ""cprocedure"" )"		5738834	0					
ANR	5739055	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739056	Identifier	CProcedure		5738834	1					
ANR	5739057	AssignmentExpression	"* CProcedure = mpc_new ( ""cprocedure"" )"		5738834	2		=			
ANR	5739058	Identifier	CProcedure		5738834	0					
ANR	5739059	CallExpression	"mpc_new ( ""cprocedure"" )"		5738834	1					
ANR	5739060	Callee	mpc_new		5738834	0					
ANR	5739061	Identifier	mpc_new		5738834	0					
ANR	5739062	ArgumentList	"""cprocedure"""		5738834	1					
ANR	5739063	Argument	"""cprocedure"""		5738834	0					
ANR	5739064	PrimaryExpression	"""cprocedure"""		5738834	0					
ANR	5739065	IdentifierDeclStatement	"mpc_parser_t * Sigdef = mpc_new ( ""sigdef"" ) ;"	134:1:3567:3610	5738834	19	True				
ANR	5739066	IdentifierDecl	"* Sigdef = mpc_new ( ""sigdef"" )"		5738834	0					
ANR	5739067	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739068	Identifier	Sigdef		5738834	1					
ANR	5739069	AssignmentExpression	"* Sigdef = mpc_new ( ""sigdef"" )"		5738834	2		=			
ANR	5739070	Identifier	Sigdef		5738834	0					
ANR	5739071	CallExpression	"mpc_new ( ""sigdef"" )"		5738834	1					
ANR	5739072	Callee	mpc_new		5738834	0					
ANR	5739073	Identifier	mpc_new		5738834	0					
ANR	5739074	ArgumentList	"""sigdef"""		5738834	1					
ANR	5739075	Argument	"""sigdef"""		5738834	0					
ANR	5739076	PrimaryExpression	"""sigdef"""		5738834	0					
ANR	5739077	IdentifierDeclStatement	"mpc_parser_t * Sigbody = mpc_new ( ""sigbody"" ) ;"	135:1:3613:3657	5738834	20	True				
ANR	5739078	IdentifierDecl	"* Sigbody = mpc_new ( ""sigbody"" )"		5738834	0					
ANR	5739079	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739080	Identifier	Sigbody		5738834	1					
ANR	5739081	AssignmentExpression	"* Sigbody = mpc_new ( ""sigbody"" )"		5738834	2		=			
ANR	5739082	Identifier	Sigbody		5738834	0					
ANR	5739083	CallExpression	"mpc_new ( ""sigbody"" )"		5738834	1					
ANR	5739084	Callee	mpc_new		5738834	0					
ANR	5739085	Identifier	mpc_new		5738834	0					
ANR	5739086	ArgumentList	"""sigbody"""		5738834	1					
ANR	5739087	Argument	"""sigbody"""		5738834	0					
ANR	5739088	PrimaryExpression	"""sigbody"""		5738834	0					
ANR	5739089	IdentifierDeclStatement	"mpc_parser_t * Includes = mpc_new ( ""includes"" ) ;"	136:1:3660:3705	5738834	21	True				
ANR	5739090	IdentifierDecl	"* Includes = mpc_new ( ""includes"" )"		5738834	0					
ANR	5739091	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739092	Identifier	Includes		5738834	1					
ANR	5739093	AssignmentExpression	"* Includes = mpc_new ( ""includes"" )"		5738834	2		=			
ANR	5739094	Identifier	Includes		5738834	0					
ANR	5739095	CallExpression	"mpc_new ( ""includes"" )"		5738834	1					
ANR	5739096	Callee	mpc_new		5738834	0					
ANR	5739097	Identifier	mpc_new		5738834	0					
ANR	5739098	ArgumentList	"""includes"""		5738834	1					
ANR	5739099	Argument	"""includes"""		5738834	0					
ANR	5739100	PrimaryExpression	"""includes"""		5738834	0					
ANR	5739101	IdentifierDeclStatement	"mpc_parser_t * Smallc = mpc_new ( ""smallc"" ) ;"	137:1:3708:3751	5738834	22	True				
ANR	5739102	IdentifierDecl	"* Smallc = mpc_new ( ""smallc"" )"		5738834	0					
ANR	5739103	IdentifierDeclType	mpc_parser_t *		5738834	0					
ANR	5739104	Identifier	Smallc		5738834	1					
ANR	5739105	AssignmentExpression	"* Smallc = mpc_new ( ""smallc"" )"		5738834	2		=			
ANR	5739106	Identifier	Smallc		5738834	0					
ANR	5739107	CallExpression	"mpc_new ( ""smallc"" )"		5738834	1					
ANR	5739108	Callee	mpc_new		5738834	0					
ANR	5739109	Identifier	mpc_new		5738834	0					
ANR	5739110	ArgumentList	"""smallc"""		5738834	1					
ANR	5739111	Argument	"""smallc"""		5738834	0					
ANR	5739112	PrimaryExpression	"""smallc"""		5738834	0					
ANR	5739113	Statement	mpc_err_t	139:1:3755:3763	5738834	23	True				
ANR	5739114	Statement	*	139:10:3764:3764	5738834	24	True				
ANR	5739115	Statement	err	139:12:3766:3768	5738834	25	True				
ANR	5739116	Statement	=	139:16:3770:3770	5738834	26	True				
ANR	5739117	Statement	mpca_lang	139:18:3772:3780	5738834	27	True				
ANR	5739118	Statement	(	139:27:3781:3781	5738834	28	True				
ANR	5739119	Statement	MPCA_LANG_DEFAULT	139:28:3782:3798	5738834	29	True				
ANR	5739120	Statement	","	139:45:3799:3799	5738834	30	True				
ANR	5739121	Statement	""" ident     : /[a-zA-Z_][a-zA-Z0-9_]*/ ;                           \\n"""	140:3:3804:3873	5738834	31	True				
ANR	5739122	Statement	""" number    : /[0-9]+/ ;                                           \\n"""	141:3:3878:3947	5738834	32	True				
ANR	5739123	Statement	""" character : /'.'/ ;                                              \\n"""	142:3:3952:4021	5738834	33	True				
ANR	5739124	Statement	""" string    : /\\""(\\\\\\\\.|[^\\""])*\\""/ ;                               \\n"""	143:3:4026:4095	5738834	34	True				
ANR	5739125	Statement	"""                                                                  \\n"""	144:3:4100:4169	5738834	35	True				
ANR	5739126	Statement	""" factor    : '(' <lexp> ')'                                       \\n"""	145:3:4174:4243	5738834	36	True				
ANR	5739127	Statement	"""           | <number>                                             \\n"""	146:3:4248:4317	5738834	37	True				
ANR	5739128	Statement	"""           | <character>                                          \\n"""	147:3:4322:4391	5738834	38	True				
ANR	5739129	Statement	"""           | <string>                                             \\n"""	148:3:4396:4465	5738834	39	True				
ANR	5739130	Statement	"""           | <ident> '(' <lexp>? (',' <lexp>)* ')'                \\n"""	149:3:4470:4539	5738834	40	True				
ANR	5739131	Statement	"""           | <ident> ;                                            \\n"""	150:3:4544:4613	5738834	41	True				
ANR	5739132	Statement	"""                                                                  \\n"""	151:3:4618:4687	5738834	42	True				
ANR	5739133	Statement	""" term      : <factor> (('*' | '/' | '%') <factor>)* ;             \\n"""	152:3:4692:4761	5738834	43	True				
ANR	5739134	Statement	""" lexp      : <term> (('+' | '-') <term>)* ;                       \\n"""	153:3:4766:4835	5738834	44	True				
ANR	5739135	Statement	"""                                                                  \\n"""	154:3:4840:4909	5738834	45	True				
ANR	5739136	Statement	""" stmt      : '{' <stmt>* '}'                                      \\n"""	155:3:4914:4983	5738834	46	True				
ANR	5739137	Statement	"""           | \\""while\\"" '(' <exp> ')' <stmt>                       \\n"""	156:3:4988:5057	5738834	47	True				
ANR	5739138	Statement	"""           | \\""if\\""    '(' <exp> ')' <stmt>                       \\n"""	157:3:5062:5131	5738834	48	True				
ANR	5739139	Statement	"""           | <ident> '=' <lexp> ';'                               \\n"""	158:3:5136:5205	5738834	49	True				
ANR	5739140	Statement	"""           | \\""print\\"" '(' <lexp>? ')' ';'                        \\n"""	159:3:5210:5279	5738834	50	True				
ANR	5739141	Statement	"""           | \\""return\\"" <lexp>? ';'                               \\n"""	160:3:5284:5353	5738834	51	True				
ANR	5739142	Statement	"""           | <ident> '(' (<number>|<ident>|<string>)? (',' (<string>|<number>|<ident>))* ')' ';' ;        \\n"""	161:3:5358:5467	5738834	52	True				
ANR	5739143	Statement	"""                                                                  \\n"""	162:3:5472:5541	5738834	53	True				
ANR	5739144	Statement	""" exp       : <lexp> '>' <lexp>                                    \\n"""	163:3:5546:5615	5738834	54	True				
ANR	5739145	Statement	"""           | <lexp> '<' <lexp>                                    \\n"""	164:3:5620:5689	5738834	55	True				
ANR	5739146	Statement	"""           | <lexp> \\"">=\\"" <lexp>                                 \\n"""	165:3:5694:5763	5738834	56	True				
ANR	5739147	Statement	"""           | <lexp> \\""<=\\"" <lexp>                                 \\n"""	166:3:5768:5837	5738834	57	True				
ANR	5739148	Statement	"""           | <lexp> \\""!=\\"" <lexp>                                 \\n"""	167:3:5842:5911	5738834	58	True				
ANR	5739149	Statement	"""           | <lexp> \\""==\\"" <lexp> ;                               \\n"""	168:3:5916:5985	5738834	59	True				
ANR	5739150	Statement	"""                                                                  \\n"""	169:3:5990:6059	5738834	60	True				
ANR	5739151	Statement	""" vartype   : (\\""int\\"" | \\""char\\"") ;                               \\n"""	170:3:6064:6133	5738834	61	True				
ANR	5739152	Statement	""" typeident : <vartype> <ident> ;                                  \\n"""	171:3:6138:6207	5738834	62	True				
ANR	5739153	Statement	""" decls     : (<typeident> ';')* ;                                 \\n"""	172:3:6212:6281	5738834	63	True				
ANR	5739154	Statement	""" args      : <typeident>? (',' <typeident>)* ;                    \\n"""	173:3:6286:6355	5738834	64	True				
ANR	5739155	Statement	""" body      : '{' <decls> <stmt>* '}' ;                            \\n"""	174:3:6360:6429	5738834	65	True				
ANR	5739156	Statement	""" comment   : /\\\\/\\\\*([^\\\\*])*\\\\*\\\\// ;                            \\n"""	175:3:6434:6503	5738834	66	True				
ANR	5739157	Statement	""" linecomment : /\\\\/\\\\/([^\\\\n])*/ ;                                \\n"""	176:3:6508:6577	5738834	67	True				
ANR	5739158	Statement	""" asm       : /\\\\:([^\\\\n])*/ ;                                \\n"""	177:3:6582:6646	5738834	68	True				
ANR	5739159	Statement	""" procedure : <ident> '@' \\""global\\"" '(' <number>? ')' <body> ; \\n"""	178:3:6651:6717	5738834	69	True				
ANR	5739160	Statement	""" cprocedure : <vartype> <ident> '(' <args> ')' <body> ; \\n"""	179:3:6722:6781	5738834	70	True				
ANR	5739161	Statement	""" sigdef    : <ident> '@' <ident> '(' <number> ')' ';' ; \\n"""	180:3:6786:6845	5738834	71	True				
ANR	5739162	Statement	""" sigbody   : '@' <ident> '(' <number> ')' ';' ; \\n"""	181:3:6850:6901	5738834	72	True				
ANR	5739163	Statement	""" includes  : (\\""#include\\"" <string>)* ;                           \\n"""	182:3:6906:6975	5738834	73	True				
ANR	5739164	Statement	""" smallc    : /^/ (<comment>|<asm>|<linecomment>|<sigdef>|<sigbody>|<procedure>|<cprocedure>)* <includes> <decls> /$/ ; \\n"""	183:3:6980:7102	5738834	74	True				
ANR	5739165	Statement	","	183:126:7103:7103	5738834	75	True				
ANR	5739166	Statement	Ident	184:2:7107:7111	5738834	76	True				
ANR	5739167	Statement	","	184:7:7112:7112	5738834	77	True				
ANR	5739168	Statement	Number	184:9:7114:7119	5738834	78	True				
ANR	5739169	Statement	","	184:15:7120:7120	5738834	79	True				
ANR	5739170	Statement	Character	184:17:7122:7130	5738834	80	True				
ANR	5739171	Statement	","	184:26:7131:7131	5738834	81	True				
ANR	5739172	Statement	String	184:28:7133:7138	5738834	82	True				
ANR	5739173	Statement	","	184:34:7139:7139	5738834	83	True				
ANR	5739174	Statement	Factor	184:36:7141:7146	5738834	84	True				
ANR	5739175	Statement	","	184:42:7147:7147	5738834	85	True				
ANR	5739176	Statement	Term	184:44:7149:7152	5738834	86	True				
ANR	5739177	Statement	","	184:48:7153:7153	5738834	87	True				
ANR	5739178	Statement	Lexp	184:50:7155:7158	5738834	88	True				
ANR	5739179	Statement	","	184:54:7159:7159	5738834	89	True				
ANR	5739180	Statement	Stmt	184:56:7161:7164	5738834	90	True				
ANR	5739181	Statement	","	184:60:7165:7165	5738834	91	True				
ANR	5739182	Statement	Exp	184:62:7167:7169	5738834	92	True				
ANR	5739183	Statement	","	184:65:7170:7170	5738834	93	True				
ANR	5739184	Statement	Vartype	185:2:7174:7180	5738834	94	True				
ANR	5739185	Statement	","	185:9:7181:7181	5738834	95	True				
ANR	5739186	Statement	Typeident	185:11:7183:7191	5738834	96	True				
ANR	5739187	Statement	","	185:20:7192:7192	5738834	97	True				
ANR	5739188	Statement	Decls	185:22:7194:7198	5738834	98	True				
ANR	5739189	Statement	","	185:27:7199:7199	5738834	99	True				
ANR	5739190	Statement	Args	185:29:7201:7204	5738834	100	True				
ANR	5739191	Statement	","	185:33:7205:7205	5738834	101	True				
ANR	5739192	Statement	Body	185:35:7207:7210	5738834	102	True				
ANR	5739193	Statement	","	185:39:7211:7211	5738834	103	True				
ANR	5739194	Statement	Comment	185:41:7213:7219	5738834	104	True				
ANR	5739195	Statement	","	185:48:7220:7220	5738834	105	True				
ANR	5739196	Statement	Linecomment	185:50:7222:7232	5738834	106	True				
ANR	5739197	Statement	","	185:61:7233:7233	5738834	107	True				
ANR	5739198	Statement	Asm	185:63:7235:7237	5738834	108	True				
ANR	5739199	Statement	","	185:66:7238:7238	5738834	109	True				
ANR	5739200	Statement	Procedure	185:68:7240:7248	5738834	110	True				
ANR	5739201	Statement	","	185:77:7249:7249	5738834	111	True				
ANR	5739202	Statement	CProcedure	185:79:7251:7260	5738834	112	True				
ANR	5739203	Statement	","	185:89:7261:7261	5738834	113	True				
ANR	5739204	Statement	Sigdef	186:2:7265:7270	5738834	114	True				
ANR	5739205	Statement	","	186:8:7271:7271	5738834	115	True				
ANR	5739206	Statement	Sigbody	186:10:7273:7279	5738834	116	True				
ANR	5739207	Statement	","	186:17:7280:7280	5738834	117	True				
ANR	5739208	Statement	Includes	186:19:7282:7289	5738834	118	True				
ANR	5739209	Statement	","	186:27:7290:7290	5738834	119	True				
ANR	5739210	Statement	Smallc	186:29:7292:7297	5738834	120	True				
ANR	5739211	Statement	","	186:35:7298:7298	5738834	121	True				
ANR	5739212	Statement	NULL	186:37:7300:7303	5738834	122	True				
ANR	5739213	Statement	)	186:41:7304:7304	5738834	123	True				
ANR	5739214	ExpressionStatement		186:42:7305:7305	5738834	124	True				
ANR	5739215	IfStatement	if ( err != NULL )		5738834	125					
ANR	5739216	Condition	err != NULL	188:5:7313:7323	5738834	0	True				
ANR	5739217	EqualityExpression	err != NULL		5738834	0		!=			
ANR	5739218	Identifier	err		5738834	0					
ANR	5739219	Identifier	NULL		5738834	1					
ANR	5739220	CompoundStatement		75:18:4636:4636	5738834	1					
ANR	5739221	ExpressionStatement	mpc_err_print ( err )	189:2:7330:7349	5738834	0	True				
ANR	5739222	CallExpression	mpc_err_print ( err )		5738834	0					
ANR	5739223	Callee	mpc_err_print		5738834	0					
ANR	5739224	Identifier	mpc_err_print		5738834	0					
ANR	5739225	ArgumentList	err		5738834	1					
ANR	5739226	Argument	err		5738834	0					
ANR	5739227	Identifier	err		5738834	0					
ANR	5739228	ExpressionStatement	mpc_err_delete ( err )	190:2:7353:7373	5738834	1	True				
ANR	5739229	CallExpression	mpc_err_delete ( err )		5738834	0					
ANR	5739230	Callee	mpc_err_delete		5738834	0					
ANR	5739231	Identifier	mpc_err_delete		5738834	0					
ANR	5739232	ArgumentList	err		5738834	1					
ANR	5739233	Argument	err		5738834	0					
ANR	5739234	Identifier	err		5738834	0					
ANR	5739235	ExpressionStatement	exit ( 1 )	191:2:7377:7384	5738834	2	True				
ANR	5739236	CallExpression	exit ( 1 )		5738834	0					
ANR	5739237	Callee	exit		5738834	0					
ANR	5739238	Identifier	exit		5738834	0					
ANR	5739239	ArgumentList	1		5738834	1					
ANR	5739240	Argument	1		5738834	0					
ANR	5739241	PrimaryExpression	1		5738834	0					
ANR	5739242	IfStatement	if ( argc > 1 )		5738834	126					
ANR	5739243	Condition	argc > 1	195:5:7401:7408	5738834	0	True				
ANR	5739244	RelationalExpression	argc > 1		5738834	0		>			
ANR	5739245	Identifier	argc		5738834	0					
ANR	5739246	PrimaryExpression	1		5738834	1					
ANR	5739247	CompoundStatement		84:2:4726:4740	5738834	1					
ANR	5739248	IdentifierDeclStatement	mpc_result_t r ;	197:2:7416:7430	5738834	0	True				
ANR	5739249	IdentifierDecl	r		5738834	0					
ANR	5739250	IdentifierDeclType	mpc_result_t		5738834	0					
ANR	5739251	Identifier	r		5738834	1					
ANR	5739252	IfStatement	"if ( mpc_parse_contents ( argv [ 1 ] , Smallc , & r ) )"		5738834	1					
ANR	5739253	Condition	"mpc_parse_contents ( argv [ 1 ] , Smallc , & r )"	198:6:7438:7476	5738834	0	True				
ANR	5739254	CallExpression	"mpc_parse_contents ( argv [ 1 ] , Smallc , & r )"		5738834	0					
ANR	5739255	Callee	mpc_parse_contents		5738834	0					
ANR	5739256	Identifier	mpc_parse_contents		5738834	0					
ANR	5739257	ArgumentList	argv [ 1 ]		5738834	1					
ANR	5739258	Argument	argv [ 1 ]		5738834	0					
ANR	5739259	ArrayIndexing	argv [ 1 ]		5738834	0					
ANR	5739260	Identifier	argv		5738834	0					
ANR	5739261	PrimaryExpression	1		5738834	1					
ANR	5739262	Argument	Smallc		5738834	1					
ANR	5739263	Identifier	Smallc		5738834	0					
ANR	5739264	Argument	& r		5738834	2					
ANR	5739265	UnaryOperationExpression	& r		5738834	0					
ANR	5739266	UnaryOperator	&		5738834	0					
ANR	5739267	Identifier	r		5738834	1					
ANR	5739268	CompoundStatement		85:47:4789:4789	5738834	1					
ANR	5739269	ExpressionStatement	"mpc_ast_print_to ( r . output , stderr )"	199:3:7484:7518	5738834	0	True				
ANR	5739270	CallExpression	"mpc_ast_print_to ( r . output , stderr )"		5738834	0					
ANR	5739271	Callee	mpc_ast_print_to		5738834	0					
ANR	5739272	Identifier	mpc_ast_print_to		5738834	0					
ANR	5739273	ArgumentList	r . output		5738834	1					
ANR	5739274	Argument	r . output		5738834	0					
ANR	5739275	MemberAccess	r . output		5738834	0					
ANR	5739276	Identifier	r		5738834	0					
ANR	5739277	Identifier	output		5738834	1					
ANR	5739278	Argument	stderr		5738834	1					
ANR	5739279	Identifier	stderr		5738834	0					
ANR	5739280	CompoundStatement		89:4:4850:4876	5738834	1					
ANR	5739281	IdentifierDeclStatement	int i ;	201:4:7529:7534	5738834	0	True				
ANR	5739282	IdentifierDecl	i		5738834	0					
ANR	5739283	IdentifierDeclType	int		5738834	0					
ANR	5739284	Identifier	i		5738834	1					
ANR	5739285	IdentifierDeclStatement	mpc_ast_t * root = r . output ;	202:4:7540:7566	5738834	1	True				
ANR	5739286	IdentifierDecl	* root = r . output		5738834	0					
ANR	5739287	IdentifierDeclType	mpc_ast_t *		5738834	0					
ANR	5739288	Identifier	root		5738834	1					
ANR	5739289	AssignmentExpression	* root = r . output		5738834	2		=			
ANR	5739290	Identifier	root		5738834	0					
ANR	5739291	MemberAccess	r . output		5738834	1					
ANR	5739292	Identifier	r		5738834	0					
ANR	5739293	Identifier	output		5738834	1					
ANR	5739294	ForStatement	for ( i = 0 ; i < root -> children_num ; i ++ )		5738834	2					
ANR	5739295	ForInit	i = 0 ;	203:9:7577:7580	5738834	0	True				
ANR	5739296	AssignmentExpression	i = 0		5738834	0		=			
ANR	5739297	Identifier	i		5738834	0					
ANR	5739298	PrimaryExpression	0		5738834	1					
ANR	5739299	Condition	i < root -> children_num	203:14:7582:7602	5738834	1	True				
ANR	5739300	RelationalExpression	i < root -> children_num		5738834	0		<			
ANR	5739301	Identifier	i		5738834	0					
ANR	5739302	PtrMemberAccess	root -> children_num		5738834	1					
ANR	5739303	Identifier	root		5738834	0					
ANR	5739304	Identifier	children_num		5738834	1					
ANR	5739305	PostIncDecOperationExpression	i ++	203:37:7605:7607	5738834	2	True				
ANR	5739306	Identifier	i		5738834	0					
ANR	5739307	IncDec	++		5738834	1					
ANR	5739308	CompoundStatement		91:5:4927:4962	5738834	3					
ANR	5739309	IdentifierDeclStatement	mpc_ast_t * node = root -> children [ i ] ;	204:5:7617:7652	5738834	0	True				
ANR	5739310	IdentifierDecl	* node = root -> children [ i ]		5738834	0					
ANR	5739311	IdentifierDeclType	mpc_ast_t *		5738834	0					
ANR	5739312	Identifier	node		5738834	1					
ANR	5739313	AssignmentExpression	* node = root -> children [ i ]		5738834	2		=			
ANR	5739314	Identifier	node		5738834	0					
ANR	5739315	ArrayIndexing	root -> children [ i ]		5738834	1					
ANR	5739316	PtrMemberAccess	root -> children		5738834	0					
ANR	5739317	Identifier	root		5738834	0					
ANR	5739318	Identifier	children		5738834	1					
ANR	5739319	Identifier	i		5738834	1					
ANR	5739320	ExpressionStatement	"eprintf ( ""; TAG = %s    (%s)\\n"" , node -> tag , node -> contents )"	205:5:7659:7718	5738834	1	True				
ANR	5739321	CallExpression	"eprintf ( ""; TAG = %s    (%s)\\n"" , node -> tag , node -> contents )"		5738834	0					
ANR	5739322	Callee	eprintf		5738834	0					
ANR	5739323	Identifier	eprintf		5738834	0					
ANR	5739324	ArgumentList	"""; TAG = %s    (%s)\\n"""		5738834	1					
ANR	5739325	Argument	"""; TAG = %s    (%s)\\n"""		5738834	0					
ANR	5739326	PrimaryExpression	"""; TAG = %s    (%s)\\n"""		5738834	0					
ANR	5739327	Argument	node -> tag		5738834	1					
ANR	5739328	PtrMemberAccess	node -> tag		5738834	0					
ANR	5739329	Identifier	node		5738834	0					
ANR	5739330	Identifier	tag		5738834	1					
ANR	5739331	Argument	node -> contents		5738834	2					
ANR	5739332	PtrMemberAccess	node -> contents		5738834	0					
ANR	5739333	Identifier	node		5738834	0					
ANR	5739334	Identifier	contents		5738834	1					
ANR	5739335	ExpressionStatement	processNode ( node )	206:5:7725:7743	5738834	2	True				
ANR	5739336	CallExpression	processNode ( node )		5738834	0					
ANR	5739337	Callee	processNode		5738834	0					
ANR	5739338	Identifier	processNode		5738834	0					
ANR	5739339	ArgumentList	node		5738834	1					
ANR	5739340	Argument	node		5738834	0					
ANR	5739341	Identifier	node		5738834	0					
ANR	5739342	ExpressionStatement	mpc_ast_delete ( r . output )	209:3:7759:7783	5738834	2	True				
ANR	5739343	CallExpression	mpc_ast_delete ( r . output )		5738834	0					
ANR	5739344	Callee	mpc_ast_delete		5738834	0					
ANR	5739345	Identifier	mpc_ast_delete		5738834	0					
ANR	5739346	ArgumentList	r . output		5738834	1					
ANR	5739347	Argument	r . output		5738834	0					
ANR	5739348	MemberAccess	r . output		5738834	0					
ANR	5739349	Identifier	r		5738834	0					
ANR	5739350	Identifier	output		5738834	1					
ANR	5739351	ElseStatement	else		5738834	0					
ANR	5739352	CompoundStatement		97:9:5104:5104	5738834	0					
ANR	5739353	ExpressionStatement	mpc_err_print ( r . error )	211:3:7799:7821	5738834	0	True				
ANR	5739354	CallExpression	mpc_err_print ( r . error )		5738834	0					
ANR	5739355	Callee	mpc_err_print		5738834	0					
ANR	5739356	Identifier	mpc_err_print		5738834	0					
ANR	5739357	ArgumentList	r . error		5738834	1					
ANR	5739358	Argument	r . error		5738834	0					
ANR	5739359	MemberAccess	r . error		5738834	0					
ANR	5739360	Identifier	r		5738834	0					
ANR	5739361	Identifier	error		5738834	1					
ANR	5739362	ExpressionStatement	mpc_err_delete ( r . error )	212:3:7826:7849	5738834	1	True				
ANR	5739363	CallExpression	mpc_err_delete ( r . error )		5738834	0					
ANR	5739364	Callee	mpc_err_delete		5738834	0					
ANR	5739365	Identifier	mpc_err_delete		5738834	0					
ANR	5739366	ArgumentList	r . error		5738834	1					
ANR	5739367	Argument	r . error		5738834	0					
ANR	5739368	MemberAccess	r . error		5738834	0					
ANR	5739369	Identifier	r		5738834	0					
ANR	5739370	Identifier	error		5738834	1					
ANR	5739371	ElseStatement	else		5738834	0					
ANR	5739372	CompoundStatement		104:2:5179:5193	5738834	0					
ANR	5739373	IdentifierDeclStatement	mpc_result_t r ;	217:2:7869:7883	5738834	0	True				
ANR	5739374	IdentifierDecl	r		5738834	0					
ANR	5739375	IdentifierDeclType	mpc_result_t		5738834	0					
ANR	5739376	Identifier	r		5738834	1					
ANR	5739377	IfStatement	"if ( mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r ) )"		5738834	1					
ANR	5739378	Condition	"mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r )"	218:6:7891:7934	5738834	0	True				
ANR	5739379	CallExpression	"mpc_parse_pipe ( ""<stdin>"" , stdin , Smallc , & r )"		5738834	0					
ANR	5739380	Callee	mpc_parse_pipe		5738834	0					
ANR	5739381	Identifier	mpc_parse_pipe		5738834	0					
ANR	5739382	ArgumentList	"""<stdin>"""		5738834	1					
ANR	5739383	Argument	"""<stdin>"""		5738834	0					
ANR	5739384	PrimaryExpression	"""<stdin>"""		5738834	0					
ANR	5739385	Argument	stdin		5738834	1					
ANR	5739386	Identifier	stdin		5738834	0					
ANR	5739387	Argument	Smallc		5738834	2					
ANR	5739388	Identifier	Smallc		5738834	0					
ANR	5739389	Argument	& r		5738834	3					
ANR	5739390	UnaryOperationExpression	& r		5738834	0					
ANR	5739391	UnaryOperator	&		5738834	0					
ANR	5739392	Identifier	r		5738834	1					
ANR	5739393	CompoundStatement		105:52:5247:5247	5738834	1					
ANR	5739394	ExpressionStatement	mpc_ast_print ( r . output )	219:3:7942:7965	5738834	0	True				
ANR	5739395	CallExpression	mpc_ast_print ( r . output )		5738834	0					
ANR	5739396	Callee	mpc_ast_print		5738834	0					
ANR	5739397	Identifier	mpc_ast_print		5738834	0					
ANR	5739398	ArgumentList	r . output		5738834	1					
ANR	5739399	Argument	r . output		5738834	0					
ANR	5739400	MemberAccess	r . output		5738834	0					
ANR	5739401	Identifier	r		5738834	0					
ANR	5739402	Identifier	output		5738834	1					
ANR	5739403	ExpressionStatement	mpc_ast_delete ( r . output )	220:3:7970:7994	5738834	1	True				
ANR	5739404	CallExpression	mpc_ast_delete ( r . output )		5738834	0					
ANR	5739405	Callee	mpc_ast_delete		5738834	0					
ANR	5739406	Identifier	mpc_ast_delete		5738834	0					
ANR	5739407	ArgumentList	r . output		5738834	1					
ANR	5739408	Argument	r . output		5738834	0					
ANR	5739409	MemberAccess	r . output		5738834	0					
ANR	5739410	Identifier	r		5738834	0					
ANR	5739411	Identifier	output		5738834	1					
ANR	5739412	ElseStatement	else		5738834	0					
ANR	5739413	CompoundStatement		108:9:5315:5315	5738834	0					
ANR	5739414	ExpressionStatement	mpc_err_print ( r . error )	222:3:8010:8032	5738834	0	True				
ANR	5739415	CallExpression	mpc_err_print ( r . error )		5738834	0					
ANR	5739416	Callee	mpc_err_print		5738834	0					
ANR	5739417	Identifier	mpc_err_print		5738834	0					
ANR	5739418	ArgumentList	r . error		5738834	1					
ANR	5739419	Argument	r . error		5738834	0					
ANR	5739420	MemberAccess	r . error		5738834	0					
ANR	5739421	Identifier	r		5738834	0					
ANR	5739422	Identifier	error		5738834	1					
ANR	5739423	ExpressionStatement	mpc_err_delete ( r . error )	223:3:8037:8060	5738834	1	True				
ANR	5739424	CallExpression	mpc_err_delete ( r . error )		5738834	0					
ANR	5739425	Callee	mpc_err_delete		5738834	0					
ANR	5739426	Identifier	mpc_err_delete		5738834	0					
ANR	5739427	ArgumentList	r . error		5738834	1					
ANR	5739428	Argument	r . error		5738834	0					
ANR	5739429	MemberAccess	r . error		5738834	0					
ANR	5739430	Identifier	r		5738834	0					
ANR	5739431	Identifier	error		5738834	1					
ANR	5739432	ExpressionStatement	"mpc_cleanup ( 17 , Ident , Number , Character , String , Factor , Term , Lexp , Stmt , Exp , Vartype , Typeident , Decls , Args , Body , Comment , Procedure , CProcedure , Sigdef , Includes , Smallc )"	228:1:8078:8261	5738834	127	True				
ANR	5739433	CallExpression	"mpc_cleanup ( 17 , Ident , Number , Character , String , Factor , Term , Lexp , Stmt , Exp , Vartype , Typeident , Decls , Args , Body , Comment , Procedure , CProcedure , Sigdef , Includes , Smallc )"		5738834	0					
ANR	5739434	Callee	mpc_cleanup		5738834	0					
ANR	5739435	Identifier	mpc_cleanup		5738834	0					
ANR	5739436	ArgumentList	17		5738834	1					
ANR	5739437	Argument	17		5738834	0					
ANR	5739438	PrimaryExpression	17		5738834	0					
ANR	5739439	Argument	Ident		5738834	1					
ANR	5739440	Identifier	Ident		5738834	0					
ANR	5739441	Argument	Number		5738834	2					
ANR	5739442	Identifier	Number		5738834	0					
ANR	5739443	Argument	Character		5738834	3					
ANR	5739444	Identifier	Character		5738834	0					
ANR	5739445	Argument	String		5738834	4					
ANR	5739446	Identifier	String		5738834	0					
ANR	5739447	Argument	Factor		5738834	5					
ANR	5739448	Identifier	Factor		5738834	0					
ANR	5739449	Argument	Term		5738834	6					
ANR	5739450	Identifier	Term		5738834	0					
ANR	5739451	Argument	Lexp		5738834	7					
ANR	5739452	Identifier	Lexp		5738834	0					
ANR	5739453	Argument	Stmt		5738834	8					
ANR	5739454	Identifier	Stmt		5738834	0					
ANR	5739455	Argument	Exp		5738834	9					
ANR	5739456	Identifier	Exp		5738834	0					
ANR	5739457	Argument	Vartype		5738834	10					
ANR	5739458	Identifier	Vartype		5738834	0					
ANR	5739459	Argument	Typeident		5738834	11					
ANR	5739460	Identifier	Typeident		5738834	0					
ANR	5739461	Argument	Decls		5738834	12					
ANR	5739462	Identifier	Decls		5738834	0					
ANR	5739463	Argument	Args		5738834	13					
ANR	5739464	Identifier	Args		5738834	0					
ANR	5739465	Argument	Body		5738834	14					
ANR	5739466	Identifier	Body		5738834	0					
ANR	5739467	Argument	Comment		5738834	15					
ANR	5739468	Identifier	Comment		5738834	0					
ANR	5739469	Argument	Procedure		5738834	16					
ANR	5739470	Identifier	Procedure		5738834	0					
ANR	5739471	Argument	CProcedure		5738834	17					
ANR	5739472	Identifier	CProcedure		5738834	0					
ANR	5739473	Argument	Sigdef		5738834	18					
ANR	5739474	Identifier	Sigdef		5738834	0					
ANR	5739475	Argument	Includes		5738834	19					
ANR	5739476	Identifier	Includes		5738834	0					
ANR	5739477	Argument	Smallc		5738834	20					
ANR	5739478	Identifier	Smallc		5738834	0					
ANR	5739479	ReturnStatement	return 0 ;	232:1:8265:8273	5738834	128	True				
ANR	5739480	PrimaryExpression	0		5738834	0					
ANR	5739481	ReturnType	int		5738834	1					
ANR	5739482	Identifier	main		5738834	2					
ANR	5739483	ParameterList	"int argc , char * * argv"		5738834	3					
ANR	5739484	Parameter	int argc	114:9:2666:2673	5738834	0	True				
ANR	5739485	ParameterType	int		5738834	0					
ANR	5739486	Identifier	argc		5738834	1					
ANR	5739487	Parameter	char * * argv	114:19:2676:2686	5738834	1	True				
ANR	5739488	ParameterType	char * *		5738834	0					
ANR	5739489	Identifier	argv		5738834	1					
ANR	5739490	CFGEntryNode	ENTRY		5738834		True				
ANR	5739491	CFGExitNode	EXIT		5738834		True				
ANR	5739492	Symbol	stdin		5738834						
ANR	5739493	Symbol	Decls		5738834						
ANR	5739494	Symbol	* argv		5738834						
ANR	5739495	Symbol	String		5738834						
ANR	5739496	Symbol	* * root		5738834						
ANR	5739497	Symbol	Smallc		5738834						
ANR	5739498	Symbol	Factor		5738834						
ANR	5739499	Symbol	node -> contents		5738834						
ANR	5739500	Symbol	Procedure		5738834						
ANR	5739501	Symbol	Vartype		5738834						
ANR	5739502	Symbol	root -> children		5738834						
ANR	5739503	Symbol	* node		5738834						
ANR	5739504	Symbol	Linecomment		5738834						
ANR	5739505	Symbol	NULL		5738834						
ANR	5739506	Symbol	Character		5738834						
ANR	5739507	Symbol	Term		5738834						
ANR	5739508	Symbol	stderr		5738834						
ANR	5739509	Symbol	root -> children_num		5738834						
ANR	5739510	Symbol	Sigdef		5738834						
ANR	5739511	Symbol	r . output		5738834						
ANR	5739512	Symbol	node		5738834						
ANR	5739513	Symbol	CProcedure		5738834						
ANR	5739514	Symbol	node -> tag		5738834						
ANR	5739515	Symbol	r . error		5738834						
ANR	5739516	Symbol	Typeident		5738834						
ANR	5739517	Symbol	* root		5738834						
ANR	5739518	Symbol	mpc_new		5738834						
ANR	5739519	Symbol	argv		5738834						
ANR	5739520	Symbol	Stmt		5738834						
ANR	5739521	Symbol	Includes		5738834						
ANR	5739522	Symbol	Number		5738834						
ANR	5739523	Symbol	root		5738834						
ANR	5739524	Symbol	Asm		5738834						
ANR	5739525	Symbol	Body		5738834						
ANR	5739526	Symbol	argc		5738834						
ANR	5739527	Symbol	Comment		5738834						
ANR	5739528	Symbol	Args		5738834						
ANR	5739529	Symbol	Ident		5738834						
ANR	5739530	Symbol	err		5738834						
ANR	5739531	Symbol	mpc_parse_pipe		5738834						
ANR	5739532	Symbol	i		5738834						
ANR	5739533	Symbol	r		5738834						
ANR	5739534	Symbol	mpc_parse_contents		5738834						
ANR	5739535	Symbol	* root -> children		5738834						
ANR	5739536	Symbol	* i		5738834						
ANR	5739537	Symbol	Lexp		5738834						
ANR	5739538	Symbol	Sigbody		5738834						
ANR	5739539	Symbol	& r		5738834						
ANR	5739540	Symbol	Exp		5738834						
