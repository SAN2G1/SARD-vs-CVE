command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5046586	File	data/converged/CVE-2019-16718~_radare2/libr_reg_reg.c								
ANR	5046587	DeclStmt									
ANR	5046588	Decl							include < r_util . h >	include < r_util . h > ( r_reg )	R_LIB_VERSION
ANR	5046589	DeclStmt									
ANR	5046590	Decl							const char	const char * [ R_REG_TYPE_LAST + 1 ]	types
ANR	5046591	Function	r_reg_32_to_64	14:6:363:920							
ANR	5046592	FunctionDef	"r_reg_32_to_64 (RReg * reg , const char * rreg32)"		5046591	0					
ANR	5046593	CompoundStatement		14:64:421:920	5046591	0					
ANR	5046594	IdentifierDeclStatement	"int i , j = - 1 ;"	16:1:448:461	5046591	0	True				
ANR	5046595	IdentifierDecl	i		5046591	0					
ANR	5046596	IdentifierDeclType	int		5046591	0					
ANR	5046597	Identifier	i		5046591	1					
ANR	5046598	IdentifierDecl	j = - 1		5046591	1					
ANR	5046599	IdentifierDeclType	int		5046591	0					
ANR	5046600	Identifier	j		5046591	1					
ANR	5046601	AssignmentExpression	j = - 1		5046591	2		=			
ANR	5046602	Identifier	j		5046591	0					
ANR	5046603	UnaryOperationExpression	- 1		5046591	1					
ANR	5046604	UnaryOperator	-		5046591	0					
ANR	5046605	PrimaryExpression	1		5046591	1					
ANR	5046606	IdentifierDeclStatement	RListIter * iter ;	17:1:464:479	5046591	1	True				
ANR	5046607	IdentifierDecl	* iter		5046591	0					
ANR	5046608	IdentifierDeclType	RListIter *		5046591	0					
ANR	5046609	Identifier	iter		5046591	1					
ANR	5046610	IdentifierDeclStatement	RRegItem * item ;	18:1:482:496	5046591	2	True				
ANR	5046611	IdentifierDecl	* item		5046591	0					
ANR	5046612	IdentifierDeclType	RRegItem *		5046591	0					
ANR	5046613	Identifier	item		5046591	1					
ANR	5046614	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; ++ i )		5046591	3					
ANR	5046615	ForInit	i = 0 ;	19:6:504:509	5046591	0	True				
ANR	5046616	AssignmentExpression	i = 0		5046591	0		=			
ANR	5046617	Identifier	i		5046591	0					
ANR	5046618	PrimaryExpression	0		5046591	1					
ANR	5046619	Condition	i < R_REG_TYPE_LAST	19:13:511:529	5046591	1	True				
ANR	5046620	RelationalExpression	i < R_REG_TYPE_LAST		5046591	0		<			
ANR	5046621	Identifier	i		5046591	0					
ANR	5046622	Identifier	R_REG_TYPE_LAST		5046591	1					
ANR	5046623	UnaryExpression	++ i	19:34:532:534	5046591	2	True				
ANR	5046624	IncDec	++		5046591	0					
ANR	5046625	Identifier	i		5046591	1					
ANR	5046626	CompoundStatement		6:39:115:115	5046591	3					
ANR	5046627	Statement	r_list_foreach	20:2:541:554	5046591	0	True				
ANR	5046628	Statement	(	20:17:556:556	5046591	1	True				
ANR	5046629	Statement	reg	20:18:557:559	5046591	2	True				
ANR	5046630	Statement	->	20:21:560:561	5046591	3	True				
ANR	5046631	Statement	regset	20:23:562:567	5046591	4	True				
ANR	5046632	Statement	[	20:29:568:568	5046591	5	True				
ANR	5046633	Statement	i	20:30:569:569	5046591	6	True				
ANR	5046634	Statement	]	20:31:570:570	5046591	7	True				
ANR	5046635	Statement	.	20:32:571:571	5046591	8	True				
ANR	5046636	Statement	regs	20:33:572:575	5046591	9	True				
ANR	5046637	Statement	","	20:37:576:576	5046591	10	True				
ANR	5046638	Statement	iter	20:39:578:581	5046591	11	True				
ANR	5046639	Statement	","	20:43:582:582	5046591	12	True				
ANR	5046640	Statement	item	20:45:584:587	5046591	13	True				
ANR	5046641	Statement	)	20:49:588:588	5046591	14	True				
ANR	5046642	CompoundStatement		7:51:168:168	5046591	15					
ANR	5046643	IfStatement	"if ( item -> size == 32 && ! r_str_casecmp ( rreg32 , item -> name ) )"		5046591	0					
ANR	5046644	Condition	"item -> size == 32 && ! r_str_casecmp ( rreg32 , item -> name )"	21:7:599:653	5046591	0	True				
ANR	5046645	AndExpression	"item -> size == 32 && ! r_str_casecmp ( rreg32 , item -> name )"		5046591	0		&&			
ANR	5046646	EqualityExpression	item -> size == 32		5046591	0		==			
ANR	5046647	PtrMemberAccess	item -> size		5046591	0					
ANR	5046648	Identifier	item		5046591	0					
ANR	5046649	Identifier	size		5046591	1					
ANR	5046650	PrimaryExpression	32		5046591	1					
ANR	5046651	UnaryOperationExpression	"! r_str_casecmp ( rreg32 , item -> name )"		5046591	1					
ANR	5046652	UnaryOperator	!		5046591	0					
ANR	5046653	CallExpression	"r_str_casecmp ( rreg32 , item -> name )"		5046591	1					
ANR	5046654	Callee	r_str_casecmp		5046591	0					
ANR	5046655	Identifier	r_str_casecmp		5046591	0					
ANR	5046656	ArgumentList	rreg32		5046591	1					
ANR	5046657	Argument	rreg32		5046591	0					
ANR	5046658	Identifier	rreg32		5046591	0					
ANR	5046659	Argument	item -> name		5046591	1					
ANR	5046660	PtrMemberAccess	item -> name		5046591	0					
ANR	5046661	Identifier	item		5046591	0					
ANR	5046662	Identifier	name		5046591	1					
ANR	5046663	CompoundStatement		8:64:234:234	5046591	1					
ANR	5046664	ExpressionStatement	j = item -> offset	22:4:662:678	5046591	0	True				
ANR	5046665	AssignmentExpression	j = item -> offset		5046591	0		=			
ANR	5046666	Identifier	j		5046591	0					
ANR	5046667	PtrMemberAccess	item -> offset		5046591	1					
ANR	5046668	Identifier	item		5046591	0					
ANR	5046669	Identifier	offset		5046591	1					
ANR	5046670	BreakStatement	break ;	23:4:684:689	5046591	1	True				
ANR	5046671	IfStatement	if ( j != - 1 )		5046591	4					
ANR	5046672	Condition	j != - 1	27:5:708:714	5046591	0	True				
ANR	5046673	EqualityExpression	j != - 1		5046591	0		!=			
ANR	5046674	Identifier	j		5046591	0					
ANR	5046675	UnaryOperationExpression	- 1		5046591	1					
ANR	5046676	UnaryOperator	-		5046591	0					
ANR	5046677	PrimaryExpression	1		5046591	1					
ANR	5046678	CompoundStatement		14:14:295:295	5046591	1					
ANR	5046679	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; ++ i )		5046591	0					
ANR	5046680	ForInit	i = 0 ;	28:7:726:731	5046591	0	True				
ANR	5046681	AssignmentExpression	i = 0		5046591	0		=			
ANR	5046682	Identifier	i		5046591	0					
ANR	5046683	PrimaryExpression	0		5046591	1					
ANR	5046684	Condition	i < R_REG_TYPE_LAST	28:14:733:751	5046591	1	True				
ANR	5046685	RelationalExpression	i < R_REG_TYPE_LAST		5046591	0		<			
ANR	5046686	Identifier	i		5046591	0					
ANR	5046687	Identifier	R_REG_TYPE_LAST		5046591	1					
ANR	5046688	UnaryExpression	++ i	28:35:754:756	5046591	2	True				
ANR	5046689	IncDec	++		5046591	0					
ANR	5046690	Identifier	i		5046591	1					
ANR	5046691	CompoundStatement		15:40:337:337	5046591	3					
ANR	5046692	Statement	r_list_foreach	29:3:764:777	5046591	0	True				
ANR	5046693	Statement	(	29:18:779:779	5046591	1	True				
ANR	5046694	Statement	reg	29:19:780:782	5046591	2	True				
ANR	5046695	Statement	->	29:22:783:784	5046591	3	True				
ANR	5046696	Statement	regset	29:24:785:790	5046591	4	True				
ANR	5046697	Statement	[	29:30:791:791	5046591	5	True				
ANR	5046698	Statement	i	29:31:792:792	5046591	6	True				
ANR	5046699	Statement	]	29:32:793:793	5046591	7	True				
ANR	5046700	Statement	.	29:33:794:794	5046591	8	True				
ANR	5046701	Statement	regs	29:34:795:798	5046591	9	True				
ANR	5046702	Statement	","	29:38:799:799	5046591	10	True				
ANR	5046703	Statement	iter	29:40:801:804	5046591	11	True				
ANR	5046704	Statement	","	29:44:805:805	5046591	12	True				
ANR	5046705	Statement	item	29:46:807:810	5046591	13	True				
ANR	5046706	Statement	)	29:50:811:811	5046591	14	True				
ANR	5046707	CompoundStatement		16:52:391:391	5046591	15					
ANR	5046708	IfStatement	if ( item -> offset == j && item -> size == 64 )		5046591	0					
ANR	5046709	Condition	item -> offset == j && item -> size == 64	30:8:823:859	5046591	0	True				
ANR	5046710	AndExpression	item -> offset == j && item -> size == 64		5046591	0		&&			
ANR	5046711	EqualityExpression	item -> offset == j		5046591	0		==			
ANR	5046712	PtrMemberAccess	item -> offset		5046591	0					
ANR	5046713	Identifier	item		5046591	0					
ANR	5046714	Identifier	offset		5046591	1					
ANR	5046715	Identifier	j		5046591	1					
ANR	5046716	EqualityExpression	item -> size == 64		5046591	1		==			
ANR	5046717	PtrMemberAccess	item -> size		5046591	0					
ANR	5046718	Identifier	item		5046591	0					
ANR	5046719	Identifier	size		5046591	1					
ANR	5046720	PrimaryExpression	64		5046591	1					
ANR	5046721	CompoundStatement		17:47:440:440	5046591	1					
ANR	5046722	ReturnStatement	return item -> name ;	31:5:869:886	5046591	0	True				
ANR	5046723	PtrMemberAccess	item -> name		5046591	0					
ANR	5046724	Identifier	item		5046591	0					
ANR	5046725	Identifier	name		5046591	1					
ANR	5046726	ReturnStatement	return NULL ;	36:1:907:918	5046591	5	True				
ANR	5046727	Identifier	NULL		5046591	0					
ANR	5046728	ReturnType	const char *		5046591	1					
ANR	5046729	Identifier	r_reg_32_to_64		5046591	2					
ANR	5046730	ParameterList	"RReg * reg , const char * rreg32"		5046591	3					
ANR	5046731	Parameter	RReg * reg	14:33:390:398	5046591	0	True				
ANR	5046732	ParameterType	RReg *		5046591	0					
ANR	5046733	Identifier	reg		5046591	1					
ANR	5046734	Parameter	const char * rreg32	14:44:401:418	5046591	1	True				
ANR	5046735	ParameterType	const char *		5046591	0					
ANR	5046736	Identifier	rreg32		5046591	1					
ANR	5046737	CFGEntryNode	ENTRY		5046591		True				
ANR	5046738	CFGExitNode	EXIT		5046591		True				
ANR	5046739	Symbol	item		5046591						
ANR	5046740	Symbol	NULL		5046591						
ANR	5046741	Symbol	i		5046591						
ANR	5046742	Symbol	iter		5046591						
ANR	5046743	Symbol	R_REG_TYPE_LAST		5046591						
ANR	5046744	Symbol	j		5046591						
ANR	5046745	Symbol	reg		5046591						
ANR	5046746	Symbol	* item		5046591						
ANR	5046747	Symbol	item -> name		5046591						
ANR	5046748	Symbol	item -> size		5046591						
ANR	5046749	Symbol	rreg32		5046591						
ANR	5046750	Symbol	r_str_casecmp		5046591						
ANR	5046751	Symbol	item -> offset		5046591						
ANR	5046752	Function	r_reg_64_to_32	41:6:1061:1594							
ANR	5046753	FunctionDef	"r_reg_64_to_32 (RReg * reg , const char * rreg64)"		5046752	0					
ANR	5046754	CompoundStatement		41:64:1119:1594	5046752	0					
ANR	5046755	IdentifierDeclStatement	"int i , j = - 1 ;"	42:1:1122:1135	5046752	0	True				
ANR	5046756	IdentifierDecl	i		5046752	0					
ANR	5046757	IdentifierDeclType	int		5046752	0					
ANR	5046758	Identifier	i		5046752	1					
ANR	5046759	IdentifierDecl	j = - 1		5046752	1					
ANR	5046760	IdentifierDeclType	int		5046752	0					
ANR	5046761	Identifier	j		5046752	1					
ANR	5046762	AssignmentExpression	j = - 1		5046752	2		=			
ANR	5046763	Identifier	j		5046752	0					
ANR	5046764	UnaryOperationExpression	- 1		5046752	1					
ANR	5046765	UnaryOperator	-		5046752	0					
ANR	5046766	PrimaryExpression	1		5046752	1					
ANR	5046767	IdentifierDeclStatement	RListIter * iter ;	43:1:1138:1153	5046752	1	True				
ANR	5046768	IdentifierDecl	* iter		5046752	0					
ANR	5046769	IdentifierDeclType	RListIter *		5046752	0					
ANR	5046770	Identifier	iter		5046752	1					
ANR	5046771	IdentifierDeclStatement	RRegItem * item ;	44:1:1156:1170	5046752	2	True				
ANR	5046772	IdentifierDecl	* item		5046752	0					
ANR	5046773	IdentifierDeclType	RRegItem *		5046752	0					
ANR	5046774	Identifier	item		5046752	1					
ANR	5046775	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; ++ i )		5046752	3					
ANR	5046776	ForInit	i = 0 ;	45:6:1178:1183	5046752	0	True				
ANR	5046777	AssignmentExpression	i = 0		5046752	0		=			
ANR	5046778	Identifier	i		5046752	0					
ANR	5046779	PrimaryExpression	0		5046752	1					
ANR	5046780	Condition	i < R_REG_TYPE_LAST	45:13:1185:1203	5046752	1	True				
ANR	5046781	RelationalExpression	i < R_REG_TYPE_LAST		5046752	0		<			
ANR	5046782	Identifier	i		5046752	0					
ANR	5046783	Identifier	R_REG_TYPE_LAST		5046752	1					
ANR	5046784	UnaryExpression	++ i	45:34:1206:1208	5046752	2	True				
ANR	5046785	IncDec	++		5046752	0					
ANR	5046786	Identifier	i		5046752	1					
ANR	5046787	CompoundStatement		5:39:91:91	5046752	3					
ANR	5046788	Statement	r_list_foreach	46:2:1215:1228	5046752	0	True				
ANR	5046789	Statement	(	46:17:1230:1230	5046752	1	True				
ANR	5046790	Statement	reg	46:18:1231:1233	5046752	2	True				
ANR	5046791	Statement	->	46:21:1234:1235	5046752	3	True				
ANR	5046792	Statement	regset	46:23:1236:1241	5046752	4	True				
ANR	5046793	Statement	[	46:29:1242:1242	5046752	5	True				
ANR	5046794	Statement	i	46:30:1243:1243	5046752	6	True				
ANR	5046795	Statement	]	46:31:1244:1244	5046752	7	True				
ANR	5046796	Statement	.	46:32:1245:1245	5046752	8	True				
ANR	5046797	Statement	regs	46:33:1246:1249	5046752	9	True				
ANR	5046798	Statement	","	46:37:1250:1250	5046752	10	True				
ANR	5046799	Statement	iter	46:39:1252:1255	5046752	11	True				
ANR	5046800	Statement	","	46:43:1256:1256	5046752	12	True				
ANR	5046801	Statement	item	46:45:1258:1261	5046752	13	True				
ANR	5046802	Statement	)	46:49:1262:1262	5046752	14	True				
ANR	5046803	CompoundStatement		6:51:144:144	5046752	15					
ANR	5046804	IfStatement	"if ( item -> size == 64 && ! r_str_casecmp ( rreg64 , item -> name ) )"		5046752	0					
ANR	5046805	Condition	"item -> size == 64 && ! r_str_casecmp ( rreg64 , item -> name )"	47:7:1273:1327	5046752	0	True				
ANR	5046806	AndExpression	"item -> size == 64 && ! r_str_casecmp ( rreg64 , item -> name )"		5046752	0		&&			
ANR	5046807	EqualityExpression	item -> size == 64		5046752	0		==			
ANR	5046808	PtrMemberAccess	item -> size		5046752	0					
ANR	5046809	Identifier	item		5046752	0					
ANR	5046810	Identifier	size		5046752	1					
ANR	5046811	PrimaryExpression	64		5046752	1					
ANR	5046812	UnaryOperationExpression	"! r_str_casecmp ( rreg64 , item -> name )"		5046752	1					
ANR	5046813	UnaryOperator	!		5046752	0					
ANR	5046814	CallExpression	"r_str_casecmp ( rreg64 , item -> name )"		5046752	1					
ANR	5046815	Callee	r_str_casecmp		5046752	0					
ANR	5046816	Identifier	r_str_casecmp		5046752	0					
ANR	5046817	ArgumentList	rreg64		5046752	1					
ANR	5046818	Argument	rreg64		5046752	0					
ANR	5046819	Identifier	rreg64		5046752	0					
ANR	5046820	Argument	item -> name		5046752	1					
ANR	5046821	PtrMemberAccess	item -> name		5046752	0					
ANR	5046822	Identifier	item		5046752	0					
ANR	5046823	Identifier	name		5046752	1					
ANR	5046824	CompoundStatement		7:64:210:210	5046752	1					
ANR	5046825	ExpressionStatement	j = item -> offset	48:4:1336:1352	5046752	0	True				
ANR	5046826	AssignmentExpression	j = item -> offset		5046752	0		=			
ANR	5046827	Identifier	j		5046752	0					
ANR	5046828	PtrMemberAccess	item -> offset		5046752	1					
ANR	5046829	Identifier	item		5046752	0					
ANR	5046830	Identifier	offset		5046752	1					
ANR	5046831	BreakStatement	break ;	49:4:1358:1363	5046752	1	True				
ANR	5046832	IfStatement	if ( j != - 1 )		5046752	4					
ANR	5046833	Condition	j != - 1	53:5:1382:1388	5046752	0	True				
ANR	5046834	EqualityExpression	j != - 1		5046752	0		!=			
ANR	5046835	Identifier	j		5046752	0					
ANR	5046836	UnaryOperationExpression	- 1		5046752	1					
ANR	5046837	UnaryOperator	-		5046752	0					
ANR	5046838	PrimaryExpression	1		5046752	1					
ANR	5046839	CompoundStatement		13:14:271:271	5046752	1					
ANR	5046840	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; ++ i )		5046752	0					
ANR	5046841	ForInit	i = 0 ;	54:7:1400:1405	5046752	0	True				
ANR	5046842	AssignmentExpression	i = 0		5046752	0		=			
ANR	5046843	Identifier	i		5046752	0					
ANR	5046844	PrimaryExpression	0		5046752	1					
ANR	5046845	Condition	i < R_REG_TYPE_LAST	54:14:1407:1425	5046752	1	True				
ANR	5046846	RelationalExpression	i < R_REG_TYPE_LAST		5046752	0		<			
ANR	5046847	Identifier	i		5046752	0					
ANR	5046848	Identifier	R_REG_TYPE_LAST		5046752	1					
ANR	5046849	UnaryExpression	++ i	54:35:1428:1430	5046752	2	True				
ANR	5046850	IncDec	++		5046752	0					
ANR	5046851	Identifier	i		5046752	1					
ANR	5046852	CompoundStatement		14:40:313:313	5046752	3					
ANR	5046853	Statement	r_list_foreach	55:3:1438:1451	5046752	0	True				
ANR	5046854	Statement	(	55:18:1453:1453	5046752	1	True				
ANR	5046855	Statement	reg	55:19:1454:1456	5046752	2	True				
ANR	5046856	Statement	->	55:22:1457:1458	5046752	3	True				
ANR	5046857	Statement	regset	55:24:1459:1464	5046752	4	True				
ANR	5046858	Statement	[	55:30:1465:1465	5046752	5	True				
ANR	5046859	Statement	i	55:31:1466:1466	5046752	6	True				
ANR	5046860	Statement	]	55:32:1467:1467	5046752	7	True				
ANR	5046861	Statement	.	55:33:1468:1468	5046752	8	True				
ANR	5046862	Statement	regs	55:34:1469:1472	5046752	9	True				
ANR	5046863	Statement	","	55:38:1473:1473	5046752	10	True				
ANR	5046864	Statement	iter	55:40:1475:1478	5046752	11	True				
ANR	5046865	Statement	","	55:44:1479:1479	5046752	12	True				
ANR	5046866	Statement	item	55:46:1481:1484	5046752	13	True				
ANR	5046867	Statement	)	55:50:1485:1485	5046752	14	True				
ANR	5046868	CompoundStatement		15:52:367:367	5046752	15					
ANR	5046869	IfStatement	if ( item -> offset == j && item -> size == 32 )		5046752	0					
ANR	5046870	Condition	item -> offset == j && item -> size == 32	56:8:1497:1533	5046752	0	True				
ANR	5046871	AndExpression	item -> offset == j && item -> size == 32		5046752	0		&&			
ANR	5046872	EqualityExpression	item -> offset == j		5046752	0		==			
ANR	5046873	PtrMemberAccess	item -> offset		5046752	0					
ANR	5046874	Identifier	item		5046752	0					
ANR	5046875	Identifier	offset		5046752	1					
ANR	5046876	Identifier	j		5046752	1					
ANR	5046877	EqualityExpression	item -> size == 32		5046752	1		==			
ANR	5046878	PtrMemberAccess	item -> size		5046752	0					
ANR	5046879	Identifier	item		5046752	0					
ANR	5046880	Identifier	size		5046752	1					
ANR	5046881	PrimaryExpression	32		5046752	1					
ANR	5046882	CompoundStatement		16:47:416:416	5046752	1					
ANR	5046883	ReturnStatement	return item -> name ;	57:5:1543:1560	5046752	0	True				
ANR	5046884	PtrMemberAccess	item -> name		5046752	0					
ANR	5046885	Identifier	item		5046752	0					
ANR	5046886	Identifier	name		5046752	1					
ANR	5046887	ReturnStatement	return NULL ;	62:1:1581:1592	5046752	5	True				
ANR	5046888	Identifier	NULL		5046752	0					
ANR	5046889	ReturnType	const char *		5046752	1					
ANR	5046890	Identifier	r_reg_64_to_32		5046752	2					
ANR	5046891	ParameterList	"RReg * reg , const char * rreg64"		5046752	3					
ANR	5046892	Parameter	RReg * reg	41:33:1088:1096	5046752	0	True				
ANR	5046893	ParameterType	RReg *		5046752	0					
ANR	5046894	Identifier	reg		5046752	1					
ANR	5046895	Parameter	const char * rreg64	41:44:1099:1116	5046752	1	True				
ANR	5046896	ParameterType	const char *		5046752	0					
ANR	5046897	Identifier	rreg64		5046752	1					
ANR	5046898	CFGEntryNode	ENTRY		5046752		True				
ANR	5046899	CFGExitNode	EXIT		5046752		True				
ANR	5046900	Symbol	item		5046752						
ANR	5046901	Symbol	NULL		5046752						
ANR	5046902	Symbol	i		5046752						
ANR	5046903	Symbol	iter		5046752						
ANR	5046904	Symbol	R_REG_TYPE_LAST		5046752						
ANR	5046905	Symbol	j		5046752						
ANR	5046906	Symbol	reg		5046752						
ANR	5046907	Symbol	item -> name		5046752						
ANR	5046908	Symbol	* item		5046752						
ANR	5046909	Symbol	item -> size		5046752						
ANR	5046910	Symbol	rreg64		5046752						
ANR	5046911	Symbol	r_str_casecmp		5046752						
ANR	5046912	Symbol	item -> offset		5046752						
ANR	5046913	Function	r_reg_get_type	65:6:1603:1706							
ANR	5046914	FunctionDef	r_reg_get_type (int idx)		5046913	0					
ANR	5046915	CompoundStatement		65:42:1639:1706	5046913	0					
ANR	5046916	ReturnStatement	return ( idx >= 0 && idx < R_REG_TYPE_LAST ) ? types [ idx ] : NULL ;	66:1:1642:1704	5046913	0	True				
ANR	5046917	ConditionalExpression	( idx >= 0 && idx < R_REG_TYPE_LAST ) ? types [ idx ] : NULL		5046913	0					
ANR	5046918	Condition	idx >= 0 && idx < R_REG_TYPE_LAST		5046913	0					
ANR	5046919	AndExpression	idx >= 0 && idx < R_REG_TYPE_LAST		5046913	0		&&			
ANR	5046920	RelationalExpression	idx >= 0		5046913	0		>=			
ANR	5046921	Identifier	idx		5046913	0					
ANR	5046922	PrimaryExpression	0		5046913	1					
ANR	5046923	RelationalExpression	idx < R_REG_TYPE_LAST		5046913	1		<			
ANR	5046924	Identifier	idx		5046913	0					
ANR	5046925	Identifier	R_REG_TYPE_LAST		5046913	1					
ANR	5046926	ArrayIndexing	types [ idx ]		5046913	1					
ANR	5046927	Identifier	types		5046913	0					
ANR	5046928	Identifier	idx		5046913	1					
ANR	5046929	Identifier	NULL		5046913	2					
ANR	5046930	ReturnType	const char *		5046913	1					
ANR	5046931	Identifier	r_reg_get_type		5046913	2					
ANR	5046932	ParameterList	int idx		5046913	3					
ANR	5046933	Parameter	int idx	65:33:1630:1636	5046913	0	True				
ANR	5046934	ParameterType	int		5046913	0					
ANR	5046935	Identifier	idx		5046913	1					
ANR	5046936	CFGEntryNode	ENTRY		5046913		True				
ANR	5046937	CFGExitNode	EXIT		5046913		True				
ANR	5046938	Symbol	types		5046913						
ANR	5046939	Symbol	NULL		5046913						
ANR	5046940	Symbol	* idx		5046913						
ANR	5046941	Symbol	R_REG_TYPE_LAST		5046913						
ANR	5046942	Symbol	idx		5046913						
ANR	5046943	Symbol	* types		5046913						
ANR	5046944	Function	r_reg_type_by_name	69:0:1709:1940							
ANR	5046945	FunctionDef	r_reg_type_by_name (const char * str)		5046944	0					
ANR	5046946	CompoundStatement		69:46:1755:1940	5046944	0					
ANR	5046947	IdentifierDeclStatement	int i ;	70:1:1758:1763	5046944	0	True				
ANR	5046948	IdentifierDecl	i		5046944	0					
ANR	5046949	IdentifierDeclType	int		5046944	0					
ANR	5046950	Identifier	i		5046944	1					
ANR	5046951	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST && types [ i ] ; i ++ )		5046944	1					
ANR	5046952	ForInit	i = 0 ;	71:6:1771:1776	5046944	0	True				
ANR	5046953	AssignmentExpression	i = 0		5046944	0		=			
ANR	5046954	Identifier	i		5046944	0					
ANR	5046955	PrimaryExpression	0		5046944	1					
ANR	5046956	Condition	i < R_REG_TYPE_LAST && types [ i ]	71:13:1778:1808	5046944	1	True				
ANR	5046957	AndExpression	i < R_REG_TYPE_LAST && types [ i ]		5046944	0		&&			
ANR	5046958	RelationalExpression	i < R_REG_TYPE_LAST		5046944	0		<			
ANR	5046959	Identifier	i		5046944	0					
ANR	5046960	Identifier	R_REG_TYPE_LAST		5046944	1					
ANR	5046961	ArrayIndexing	types [ i ]		5046944	1					
ANR	5046962	Identifier	types		5046944	0					
ANR	5046963	Identifier	i		5046944	1					
ANR	5046964	PostIncDecOperationExpression	i ++	71:46:1811:1813	5046944	2	True				
ANR	5046965	Identifier	i		5046944	0					
ANR	5046966	IncDec	++		5046944	1					
ANR	5046967	CompoundStatement		3:51:60:60	5046944	3					
ANR	5046968	IfStatement	"if ( ! strcmp ( types [ i ] , str ) )"		5046944	0					
ANR	5046969	Condition	"! strcmp ( types [ i ] , str )"	72:6:1824:1846	5046944	0	True				
ANR	5046970	UnaryOperationExpression	"! strcmp ( types [ i ] , str )"		5046944	0					
ANR	5046971	UnaryOperator	!		5046944	0					
ANR	5046972	CallExpression	"strcmp ( types [ i ] , str )"		5046944	1					
ANR	5046973	Callee	strcmp		5046944	0					
ANR	5046974	Identifier	strcmp		5046944	0					
ANR	5046975	ArgumentList	types [ i ]		5046944	1					
ANR	5046976	Argument	types [ i ]		5046944	0					
ANR	5046977	ArrayIndexing	types [ i ]		5046944	0					
ANR	5046978	Identifier	types		5046944	0					
ANR	5046979	Identifier	i		5046944	1					
ANR	5046980	Argument	str		5046944	1					
ANR	5046981	Identifier	str		5046944	0					
ANR	5046982	CompoundStatement		4:31:93:93	5046944	1					
ANR	5046983	ReturnStatement	return i ;	73:3:1854:1862	5046944	0	True				
ANR	5046984	Identifier	i		5046944	0					
ANR	5046985	IfStatement	"if ( ! strcmp ( str , ""all"" ) )"		5046944	2					
ANR	5046986	Condition	"! strcmp ( str , ""all"" )"	76:5:1876:1895	5046944	0	True				
ANR	5046987	UnaryOperationExpression	"! strcmp ( str , ""all"" )"		5046944	0					
ANR	5046988	UnaryOperator	!		5046944	0					
ANR	5046989	CallExpression	"strcmp ( str , ""all"" )"		5046944	1					
ANR	5046990	Callee	strcmp		5046944	0					
ANR	5046991	Identifier	strcmp		5046944	0					
ANR	5046992	ArgumentList	str		5046944	1					
ANR	5046993	Argument	str		5046944	0					
ANR	5046994	Identifier	str		5046944	0					
ANR	5046995	Argument	"""all"""		5046944	1					
ANR	5046996	PrimaryExpression	"""all"""		5046944	0					
ANR	5046997	CompoundStatement		8:27:142:142	5046944	1					
ANR	5046998	ReturnStatement	return R_REG_TYPE_ALL ;	77:2:1902:1923	5046944	0	True				
ANR	5046999	Identifier	R_REG_TYPE_ALL		5046944	0					
ANR	5047000	ReturnStatement	return - 1 ;	79:1:1929:1938	5046944	3	True				
ANR	5047001	UnaryOperationExpression	- 1		5046944	0					
ANR	5047002	UnaryOperator	-		5046944	0					
ANR	5047003	PrimaryExpression	1		5046944	1					
ANR	5047004	ReturnType	R_API int		5046944	1					
ANR	5047005	Identifier	r_reg_type_by_name		5046944	2					
ANR	5047006	ParameterList	const char * str		5046944	3					
ANR	5047007	Parameter	const char * str	69:29:1738:1752	5046944	0	True				
ANR	5047008	ParameterType	const char *		5046944	0					
ANR	5047009	Identifier	str		5046944	1					
ANR	5047010	CFGEntryNode	ENTRY		5046944		True				
ANR	5047011	CFGExitNode	EXIT		5046944		True				
ANR	5047012	Symbol	str		5046944						
ANR	5047013	Symbol	strcmp		5046944						
ANR	5047014	Symbol	types		5046944						
ANR	5047015	Symbol	* i		5046944						
ANR	5047016	Symbol	R_REG_TYPE_ALL		5046944						
ANR	5047017	Symbol	i		5046944						
ANR	5047018	Symbol	R_REG_TYPE_LAST		5046944						
ANR	5047019	Symbol	* types		5046944						
ANR	5047020	Function	r_reg_item_free	82:0:1943:2043							
ANR	5047021	FunctionDef	r_reg_item_free (RRegItem * item)		5047020	0					
ANR	5047022	CompoundStatement		82:43:1986:2043	5047020	0					
ANR	5047023	ExpressionStatement	free ( item -> name )	83:1:1989:2006	5047020	0	True				
ANR	5047024	CallExpression	free ( item -> name )		5047020	0					
ANR	5047025	Callee	free		5047020	0					
ANR	5047026	Identifier	free		5047020	0					
ANR	5047027	ArgumentList	item -> name		5047020	1					
ANR	5047028	Argument	item -> name		5047020	0					
ANR	5047029	PtrMemberAccess	item -> name		5047020	0					
ANR	5047030	Identifier	item		5047020	0					
ANR	5047031	Identifier	name		5047020	1					
ANR	5047032	ExpressionStatement	free ( item -> flags )	84:1:2009:2027	5047020	1	True				
ANR	5047033	CallExpression	free ( item -> flags )		5047020	0					
ANR	5047034	Callee	free		5047020	0					
ANR	5047035	Identifier	free		5047020	0					
ANR	5047036	ArgumentList	item -> flags		5047020	1					
ANR	5047037	Argument	item -> flags		5047020	0					
ANR	5047038	PtrMemberAccess	item -> flags		5047020	0					
ANR	5047039	Identifier	item		5047020	0					
ANR	5047040	Identifier	flags		5047020	1					
ANR	5047041	ExpressionStatement	free ( item )	85:1:2030:2041	5047020	2	True				
ANR	5047042	CallExpression	free ( item )		5047020	0					
ANR	5047043	Callee	free		5047020	0					
ANR	5047044	Identifier	free		5047020	0					
ANR	5047045	ArgumentList	item		5047020	1					
ANR	5047046	Argument	item		5047020	0					
ANR	5047047	Identifier	item		5047020	0					
ANR	5047048	ReturnType	R_API void		5047020	1					
ANR	5047049	Identifier	r_reg_item_free		5047020	2					
ANR	5047050	ParameterList	RRegItem * item		5047020	3					
ANR	5047051	Parameter	RRegItem * item	82:27:1970:1983	5047020	0	True				
ANR	5047052	ParameterType	RRegItem *		5047020	0					
ANR	5047053	Identifier	item		5047020	1					
ANR	5047054	CFGEntryNode	ENTRY		5047020		True				
ANR	5047055	CFGExitNode	EXIT		5047020		True				
ANR	5047056	Symbol	item		5047020						
ANR	5047057	Symbol	* item		5047020						
ANR	5047058	Symbol	item -> name		5047020						
ANR	5047059	Symbol	item -> flags		5047020						
ANR	5047060	Function	r_reg_get_name_idx	88:0:2046:3346							
ANR	5047061	FunctionDef	r_reg_get_name_idx (const char * type)		5047060	0					
ANR	5047062	CompoundStatement		88:47:2093:3346	5047060	0					
ANR	5047063	IfStatement	if ( ! type || ! * type )		5047060	0					
ANR	5047064	Condition	! type || ! * type	89:5:2100:2114	5047060	0	True				
ANR	5047065	OrExpression	! type || ! * type		5047060	0		||			
ANR	5047066	UnaryOperationExpression	! type		5047060	0					
ANR	5047067	UnaryOperator	!		5047060	0					
ANR	5047068	Identifier	type		5047060	1					
ANR	5047069	UnaryOperationExpression	! * type		5047060	1					
ANR	5047070	UnaryOperator	!		5047060	0					
ANR	5047071	UnaryOperationExpression	* type		5047060	1					
ANR	5047072	UnaryOperator	*		5047060	0					
ANR	5047073	Identifier	type		5047060	1					
ANR	5047074	CompoundStatement		2:22:23:23	5047060	1					
ANR	5047075	ReturnStatement	return - 1 ;	90:2:2121:2130	5047060	0	True				
ANR	5047076	UnaryOperationExpression	- 1		5047060	0					
ANR	5047077	UnaryOperator	-		5047060	0					
ANR	5047078	PrimaryExpression	1		5047060	1					
ANR	5047079	SwitchStatement	switch ( * type | ( type [ 1 ] << 8 ) )		5047060	1					
ANR	5047080	Condition	* type | ( type [ 1 ] << 8 )	92:9:2144:2165	5047060	0	True				
ANR	5047081	InclusiveOrExpression	* type | ( type [ 1 ] << 8 )		5047060	0		|			
ANR	5047082	UnaryOperationExpression	* type		5047060	0					
ANR	5047083	UnaryOperator	*		5047060	0					
ANR	5047084	Identifier	type		5047060	1					
ANR	5047085	ShiftExpression	type [ 1 ] << 8		5047060	1		<<			
ANR	5047086	ArrayIndexing	type [ 1 ]		5047060	0					
ANR	5047087	Identifier	type		5047060	0					
ANR	5047088	PrimaryExpression	1		5047060	1					
ANR	5047089	PrimaryExpression	8		5047060	1					
ANR	5047090	CompoundStatement		5:33:74:74	5047060	1					
ANR	5047091	Statement	case	94:1:2184:2187	5047060	0	True				
ANR	5047092	Statement	'Z'	94:6:2189:2191	5047060	1	True				
ANR	5047093	Statement	+	94:10:2193:2193	5047060	2	True				
ANR	5047094	Statement	(	94:12:2195:2195	5047060	3	True				
ANR	5047095	Statement	'F'	94:13:2196:2198	5047060	4	True				
ANR	5047096	Statement	<<	94:17:2200:2201	5047060	5	True				
ANR	5047097	Statement	8	94:20:2203:2203	5047060	6	True				
ANR	5047098	Statement	)	94:21:2204:2204	5047060	7	True				
ANR	5047099	Statement	:	94:22:2205:2205	5047060	8	True				
ANR	5047100	ReturnStatement	return R_REG_NAME_ZF ;	94:24:2207:2227	5047060	9	True				
ANR	5047101	Identifier	R_REG_NAME_ZF		5047060	0					
ANR	5047102	Statement	case	95:1:2230:2233	5047060	10	True				
ANR	5047103	Statement	'S'	95:6:2235:2237	5047060	11	True				
ANR	5047104	Statement	+	95:10:2239:2239	5047060	12	True				
ANR	5047105	Statement	(	95:12:2241:2241	5047060	13	True				
ANR	5047106	Statement	'F'	95:13:2242:2244	5047060	14	True				
ANR	5047107	Statement	<<	95:17:2246:2247	5047060	15	True				
ANR	5047108	Statement	8	95:20:2249:2249	5047060	16	True				
ANR	5047109	Statement	)	95:21:2250:2250	5047060	17	True				
ANR	5047110	Statement	:	95:22:2251:2251	5047060	18	True				
ANR	5047111	ReturnStatement	return R_REG_NAME_SF ;	95:24:2253:2273	5047060	19	True				
ANR	5047112	Identifier	R_REG_NAME_SF		5047060	0					
ANR	5047113	Statement	case	96:1:2276:2279	5047060	20	True				
ANR	5047114	Statement	'C'	96:6:2281:2283	5047060	21	True				
ANR	5047115	Statement	+	96:10:2285:2285	5047060	22	True				
ANR	5047116	Statement	(	96:12:2287:2287	5047060	23	True				
ANR	5047117	Statement	'F'	96:13:2288:2290	5047060	24	True				
ANR	5047118	Statement	<<	96:17:2292:2293	5047060	25	True				
ANR	5047119	Statement	8	96:20:2295:2295	5047060	26	True				
ANR	5047120	Statement	)	96:21:2296:2296	5047060	27	True				
ANR	5047121	Statement	:	96:22:2297:2297	5047060	28	True				
ANR	5047122	ReturnStatement	return R_REG_NAME_CF ;	96:24:2299:2319	5047060	29	True				
ANR	5047123	Identifier	R_REG_NAME_CF		5047060	0					
ANR	5047124	Statement	case	97:1:2322:2325	5047060	30	True				
ANR	5047125	Statement	'O'	97:6:2327:2329	5047060	31	True				
ANR	5047126	Statement	+	97:10:2331:2331	5047060	32	True				
ANR	5047127	Statement	(	97:12:2333:2333	5047060	33	True				
ANR	5047128	Statement	'F'	97:13:2334:2336	5047060	34	True				
ANR	5047129	Statement	<<	97:17:2338:2339	5047060	35	True				
ANR	5047130	Statement	8	97:20:2341:2341	5047060	36	True				
ANR	5047131	Statement	)	97:21:2342:2342	5047060	37	True				
ANR	5047132	Statement	:	97:22:2343:2343	5047060	38	True				
ANR	5047133	ReturnStatement	return R_REG_NAME_OF ;	97:24:2345:2365	5047060	39	True				
ANR	5047134	Identifier	R_REG_NAME_OF		5047060	0					
ANR	5047135	Statement	case	99:1:2379:2382	5047060	40	True				
ANR	5047136	Statement	'P'	99:6:2384:2386	5047060	41	True				
ANR	5047137	Statement	+	99:10:2388:2388	5047060	42	True				
ANR	5047138	Statement	(	99:12:2390:2390	5047060	43	True				
ANR	5047139	Statement	'C'	99:13:2391:2393	5047060	44	True				
ANR	5047140	Statement	<<	99:17:2395:2396	5047060	45	True				
ANR	5047141	Statement	8	99:20:2398:2398	5047060	46	True				
ANR	5047142	Statement	)	99:21:2399:2399	5047060	47	True				
ANR	5047143	Statement	:	99:22:2400:2400	5047060	48	True				
ANR	5047144	ReturnStatement	return R_REG_NAME_PC ;	99:24:2402:2422	5047060	49	True				
ANR	5047145	Identifier	R_REG_NAME_PC		5047060	0					
ANR	5047146	Statement	case	100:1:2425:2428	5047060	50	True				
ANR	5047147	Statement	'S'	100:6:2430:2432	5047060	51	True				
ANR	5047148	Statement	+	100:10:2434:2434	5047060	52	True				
ANR	5047149	Statement	(	100:12:2436:2436	5047060	53	True				
ANR	5047150	Statement	'R'	100:13:2437:2439	5047060	54	True				
ANR	5047151	Statement	<<	100:17:2441:2442	5047060	55	True				
ANR	5047152	Statement	8	100:20:2444:2444	5047060	56	True				
ANR	5047153	Statement	)	100:21:2445:2445	5047060	57	True				
ANR	5047154	Statement	:	100:22:2446:2446	5047060	58	True				
ANR	5047155	ReturnStatement	return R_REG_NAME_SR ;	100:24:2448:2468	5047060	59	True				
ANR	5047156	Identifier	R_REG_NAME_SR		5047060	0					
ANR	5047157	Statement	case	101:1:2471:2474	5047060	60	True				
ANR	5047158	Statement	'L'	101:6:2476:2478	5047060	61	True				
ANR	5047159	Statement	+	101:10:2480:2480	5047060	62	True				
ANR	5047160	Statement	(	101:12:2482:2482	5047060	63	True				
ANR	5047161	Statement	'R'	101:13:2483:2485	5047060	64	True				
ANR	5047162	Statement	<<	101:17:2487:2488	5047060	65	True				
ANR	5047163	Statement	8	101:20:2490:2490	5047060	66	True				
ANR	5047164	Statement	)	101:21:2491:2491	5047060	67	True				
ANR	5047165	Statement	:	101:22:2492:2492	5047060	68	True				
ANR	5047166	ReturnStatement	return R_REG_NAME_LR ;	101:24:2494:2514	5047060	69	True				
ANR	5047167	Identifier	R_REG_NAME_LR		5047060	0					
ANR	5047168	Statement	case	102:1:2517:2520	5047060	70	True				
ANR	5047169	Statement	'S'	102:6:2522:2524	5047060	71	True				
ANR	5047170	Statement	+	102:10:2526:2526	5047060	72	True				
ANR	5047171	Statement	(	102:12:2528:2528	5047060	73	True				
ANR	5047172	Statement	'P'	102:13:2529:2531	5047060	74	True				
ANR	5047173	Statement	<<	102:17:2533:2534	5047060	75	True				
ANR	5047174	Statement	8	102:20:2536:2536	5047060	76	True				
ANR	5047175	Statement	)	102:21:2537:2537	5047060	77	True				
ANR	5047176	Statement	:	102:22:2538:2538	5047060	78	True				
ANR	5047177	ReturnStatement	return R_REG_NAME_SP ;	102:24:2540:2560	5047060	79	True				
ANR	5047178	Identifier	R_REG_NAME_SP		5047060	0					
ANR	5047179	Statement	case	103:1:2563:2566	5047060	80	True				
ANR	5047180	Statement	'B'	103:6:2568:2570	5047060	81	True				
ANR	5047181	Statement	+	103:10:2572:2572	5047060	82	True				
ANR	5047182	Statement	(	103:12:2574:2574	5047060	83	True				
ANR	5047183	Statement	'P'	103:13:2575:2577	5047060	84	True				
ANR	5047184	Statement	<<	103:17:2579:2580	5047060	85	True				
ANR	5047185	Statement	8	103:20:2582:2582	5047060	86	True				
ANR	5047186	Statement	)	103:21:2583:2583	5047060	87	True				
ANR	5047187	Statement	:	103:22:2584:2584	5047060	88	True				
ANR	5047188	ReturnStatement	return R_REG_NAME_BP ;	103:24:2586:2606	5047060	89	True				
ANR	5047189	Identifier	R_REG_NAME_BP		5047060	0					
ANR	5047190	Statement	case	104:1:2609:2612	5047060	90	True				
ANR	5047191	Statement	'S'	104:6:2614:2616	5047060	91	True				
ANR	5047192	Statement	+	104:10:2618:2618	5047060	92	True				
ANR	5047193	Statement	(	104:12:2620:2620	5047060	93	True				
ANR	5047194	Statement	'N'	104:13:2621:2623	5047060	94	True				
ANR	5047195	Statement	<<	104:17:2625:2626	5047060	95	True				
ANR	5047196	Statement	8	104:20:2628:2628	5047060	96	True				
ANR	5047197	Statement	)	104:21:2629:2629	5047060	97	True				
ANR	5047198	Statement	:	104:22:2630:2630	5047060	98	True				
ANR	5047199	ReturnStatement	return R_REG_NAME_SN ;	104:24:2632:2652	5047060	99	True				
ANR	5047200	Identifier	R_REG_NAME_SN		5047060	0					
ANR	5047201	Statement	case	106:1:2667:2670	5047060	100	True				
ANR	5047202	Statement	'A'	106:6:2672:2674	5047060	101	True				
ANR	5047203	Statement	+	106:10:2676:2676	5047060	102	True				
ANR	5047204	Statement	(	106:12:2678:2678	5047060	103	True				
ANR	5047205	Statement	'0'	106:13:2679:2681	5047060	104	True				
ANR	5047206	Statement	<<	106:17:2683:2684	5047060	105	True				
ANR	5047207	Statement	8	106:20:2686:2686	5047060	106	True				
ANR	5047208	Statement	)	106:21:2687:2687	5047060	107	True				
ANR	5047209	Statement	:	106:22:2688:2688	5047060	108	True				
ANR	5047210	ReturnStatement	return R_REG_NAME_A0 ;	106:24:2690:2710	5047060	109	True				
ANR	5047211	Identifier	R_REG_NAME_A0		5047060	0					
ANR	5047212	Statement	case	107:1:2713:2716	5047060	110	True				
ANR	5047213	Statement	'A'	107:6:2718:2720	5047060	111	True				
ANR	5047214	Statement	+	107:10:2722:2722	5047060	112	True				
ANR	5047215	Statement	(	107:12:2724:2724	5047060	113	True				
ANR	5047216	Statement	'1'	107:13:2725:2727	5047060	114	True				
ANR	5047217	Statement	<<	107:17:2729:2730	5047060	115	True				
ANR	5047218	Statement	8	107:20:2732:2732	5047060	116	True				
ANR	5047219	Statement	)	107:21:2733:2733	5047060	117	True				
ANR	5047220	Statement	:	107:22:2734:2734	5047060	118	True				
ANR	5047221	ReturnStatement	return R_REG_NAME_A1 ;	107:24:2736:2756	5047060	119	True				
ANR	5047222	Identifier	R_REG_NAME_A1		5047060	0					
ANR	5047223	Statement	case	108:1:2759:2762	5047060	120	True				
ANR	5047224	Statement	'A'	108:6:2764:2766	5047060	121	True				
ANR	5047225	Statement	+	108:10:2768:2768	5047060	122	True				
ANR	5047226	Statement	(	108:12:2770:2770	5047060	123	True				
ANR	5047227	Statement	'2'	108:13:2771:2773	5047060	124	True				
ANR	5047228	Statement	<<	108:17:2775:2776	5047060	125	True				
ANR	5047229	Statement	8	108:20:2778:2778	5047060	126	True				
ANR	5047230	Statement	)	108:21:2779:2779	5047060	127	True				
ANR	5047231	Statement	:	108:22:2780:2780	5047060	128	True				
ANR	5047232	ReturnStatement	return R_REG_NAME_A2 ;	108:24:2782:2802	5047060	129	True				
ANR	5047233	Identifier	R_REG_NAME_A2		5047060	0					
ANR	5047234	Statement	case	109:1:2805:2808	5047060	130	True				
ANR	5047235	Statement	'A'	109:6:2810:2812	5047060	131	True				
ANR	5047236	Statement	+	109:10:2814:2814	5047060	132	True				
ANR	5047237	Statement	(	109:12:2816:2816	5047060	133	True				
ANR	5047238	Statement	'3'	109:13:2817:2819	5047060	134	True				
ANR	5047239	Statement	<<	109:17:2821:2822	5047060	135	True				
ANR	5047240	Statement	8	109:20:2824:2824	5047060	136	True				
ANR	5047241	Statement	)	109:21:2825:2825	5047060	137	True				
ANR	5047242	Statement	:	109:22:2826:2826	5047060	138	True				
ANR	5047243	ReturnStatement	return R_REG_NAME_A3 ;	109:24:2828:2848	5047060	139	True				
ANR	5047244	Identifier	R_REG_NAME_A3		5047060	0					
ANR	5047245	Statement	case	110:1:2851:2854	5047060	140	True				
ANR	5047246	Statement	'A'	110:6:2856:2858	5047060	141	True				
ANR	5047247	Statement	+	110:10:2860:2860	5047060	142	True				
ANR	5047248	Statement	(	110:12:2862:2862	5047060	143	True				
ANR	5047249	Statement	'4'	110:13:2863:2865	5047060	144	True				
ANR	5047250	Statement	<<	110:17:2867:2868	5047060	145	True				
ANR	5047251	Statement	8	110:20:2870:2870	5047060	146	True				
ANR	5047252	Statement	)	110:21:2871:2871	5047060	147	True				
ANR	5047253	Statement	:	110:22:2872:2872	5047060	148	True				
ANR	5047254	ReturnStatement	return R_REG_NAME_A4 ;	110:24:2874:2894	5047060	149	True				
ANR	5047255	Identifier	R_REG_NAME_A4		5047060	0					
ANR	5047256	Statement	case	111:1:2897:2900	5047060	150	True				
ANR	5047257	Statement	'A'	111:6:2902:2904	5047060	151	True				
ANR	5047258	Statement	+	111:10:2906:2906	5047060	152	True				
ANR	5047259	Statement	(	111:12:2908:2908	5047060	153	True				
ANR	5047260	Statement	'5'	111:13:2909:2911	5047060	154	True				
ANR	5047261	Statement	<<	111:17:2913:2914	5047060	155	True				
ANR	5047262	Statement	8	111:20:2916:2916	5047060	156	True				
ANR	5047263	Statement	)	111:21:2917:2917	5047060	157	True				
ANR	5047264	Statement	:	111:22:2918:2918	5047060	158	True				
ANR	5047265	ReturnStatement	return R_REG_NAME_A5 ;	111:24:2920:2940	5047060	159	True				
ANR	5047266	Identifier	R_REG_NAME_A5		5047060	0					
ANR	5047267	Statement	case	112:1:2943:2946	5047060	160	True				
ANR	5047268	Statement	'A'	112:6:2948:2950	5047060	161	True				
ANR	5047269	Statement	+	112:10:2952:2952	5047060	162	True				
ANR	5047270	Statement	(	112:12:2954:2954	5047060	163	True				
ANR	5047271	Statement	'6'	112:13:2955:2957	5047060	164	True				
ANR	5047272	Statement	<<	112:17:2959:2960	5047060	165	True				
ANR	5047273	Statement	8	112:20:2962:2962	5047060	166	True				
ANR	5047274	Statement	)	112:21:2963:2963	5047060	167	True				
ANR	5047275	Statement	:	112:22:2964:2964	5047060	168	True				
ANR	5047276	ReturnStatement	return R_REG_NAME_A6 ;	112:24:2966:2986	5047060	169	True				
ANR	5047277	Identifier	R_REG_NAME_A6		5047060	0					
ANR	5047278	Statement	case	113:1:2989:2992	5047060	170	True				
ANR	5047279	Statement	'A'	113:6:2994:2996	5047060	171	True				
ANR	5047280	Statement	+	113:10:2998:2998	5047060	172	True				
ANR	5047281	Statement	(	113:12:3000:3000	5047060	173	True				
ANR	5047282	Statement	'7'	113:13:3001:3003	5047060	174	True				
ANR	5047283	Statement	<<	113:17:3005:3006	5047060	175	True				
ANR	5047284	Statement	8	113:20:3008:3008	5047060	176	True				
ANR	5047285	Statement	)	113:21:3009:3009	5047060	177	True				
ANR	5047286	Statement	:	113:22:3010:3010	5047060	178	True				
ANR	5047287	ReturnStatement	return R_REG_NAME_A7 ;	113:24:3012:3032	5047060	179	True				
ANR	5047288	Identifier	R_REG_NAME_A7		5047060	0					
ANR	5047289	Statement	case	114:1:3035:3038	5047060	180	True				
ANR	5047290	Statement	'A'	114:6:3040:3042	5047060	181	True				
ANR	5047291	Statement	+	114:10:3044:3044	5047060	182	True				
ANR	5047292	Statement	(	114:12:3046:3046	5047060	183	True				
ANR	5047293	Statement	'8'	114:13:3047:3049	5047060	184	True				
ANR	5047294	Statement	<<	114:17:3051:3052	5047060	185	True				
ANR	5047295	Statement	8	114:20:3054:3054	5047060	186	True				
ANR	5047296	Statement	)	114:21:3055:3055	5047060	187	True				
ANR	5047297	Statement	:	114:22:3056:3056	5047060	188	True				
ANR	5047298	ReturnStatement	return R_REG_NAME_A8 ;	114:24:3058:3078	5047060	189	True				
ANR	5047299	Identifier	R_REG_NAME_A8		5047060	0					
ANR	5047300	Statement	case	115:1:3081:3084	5047060	190	True				
ANR	5047301	Statement	'A'	115:6:3086:3088	5047060	191	True				
ANR	5047302	Statement	+	115:10:3090:3090	5047060	192	True				
ANR	5047303	Statement	(	115:12:3092:3092	5047060	193	True				
ANR	5047304	Statement	'9'	115:13:3093:3095	5047060	194	True				
ANR	5047305	Statement	<<	115:17:3097:3098	5047060	195	True				
ANR	5047306	Statement	8	115:20:3100:3100	5047060	196	True				
ANR	5047307	Statement	)	115:21:3101:3101	5047060	197	True				
ANR	5047308	Statement	:	115:22:3102:3102	5047060	198	True				
ANR	5047309	ReturnStatement	return R_REG_NAME_A9 ;	115:24:3104:3124	5047060	199	True				
ANR	5047310	Identifier	R_REG_NAME_A9		5047060	0					
ANR	5047311	Statement	case	117:1:3148:3151	5047060	200	True				
ANR	5047312	Statement	'R'	117:6:3153:3155	5047060	201	True				
ANR	5047313	Statement	+	117:10:3157:3157	5047060	202	True				
ANR	5047314	Statement	(	117:12:3159:3159	5047060	203	True				
ANR	5047315	Statement	'0'	117:13:3160:3162	5047060	204	True				
ANR	5047316	Statement	<<	117:17:3164:3165	5047060	205	True				
ANR	5047317	Statement	8	117:20:3167:3167	5047060	206	True				
ANR	5047318	Statement	)	117:21:3168:3168	5047060	207	True				
ANR	5047319	Statement	:	117:22:3169:3169	5047060	208	True				
ANR	5047320	ReturnStatement	return R_REG_NAME_R0 ;	117:24:3171:3191	5047060	209	True				
ANR	5047321	Identifier	R_REG_NAME_R0		5047060	0					
ANR	5047322	Statement	case	118:1:3194:3197	5047060	210	True				
ANR	5047323	Statement	'R'	118:6:3199:3201	5047060	211	True				
ANR	5047324	Statement	+	118:10:3203:3203	5047060	212	True				
ANR	5047325	Statement	(	118:12:3205:3205	5047060	213	True				
ANR	5047326	Statement	'1'	118:13:3206:3208	5047060	214	True				
ANR	5047327	Statement	<<	118:17:3210:3211	5047060	215	True				
ANR	5047328	Statement	8	118:20:3213:3213	5047060	216	True				
ANR	5047329	Statement	)	118:21:3214:3214	5047060	217	True				
ANR	5047330	Statement	:	118:22:3215:3215	5047060	218	True				
ANR	5047331	ReturnStatement	return R_REG_NAME_R1 ;	118:24:3217:3237	5047060	219	True				
ANR	5047332	Identifier	R_REG_NAME_R1		5047060	0					
ANR	5047333	Statement	case	119:1:3240:3243	5047060	220	True				
ANR	5047334	Statement	'R'	119:6:3245:3247	5047060	221	True				
ANR	5047335	Statement	+	119:10:3249:3249	5047060	222	True				
ANR	5047336	Statement	(	119:12:3251:3251	5047060	223	True				
ANR	5047337	Statement	'2'	119:13:3252:3254	5047060	224	True				
ANR	5047338	Statement	<<	119:17:3256:3257	5047060	225	True				
ANR	5047339	Statement	8	119:20:3259:3259	5047060	226	True				
ANR	5047340	Statement	)	119:21:3260:3260	5047060	227	True				
ANR	5047341	Statement	:	119:22:3261:3261	5047060	228	True				
ANR	5047342	ReturnStatement	return R_REG_NAME_R2 ;	119:24:3263:3283	5047060	229	True				
ANR	5047343	Identifier	R_REG_NAME_R2		5047060	0					
ANR	5047344	Statement	case	120:1:3286:3289	5047060	230	True				
ANR	5047345	Statement	'R'	120:6:3291:3293	5047060	231	True				
ANR	5047346	Statement	+	120:10:3295:3295	5047060	232	True				
ANR	5047347	Statement	(	120:12:3297:3297	5047060	233	True				
ANR	5047348	Statement	'3'	120:13:3298:3300	5047060	234	True				
ANR	5047349	Statement	<<	120:17:3302:3303	5047060	235	True				
ANR	5047350	Statement	8	120:20:3305:3305	5047060	236	True				
ANR	5047351	Statement	)	120:21:3306:3306	5047060	237	True				
ANR	5047352	Statement	:	120:22:3307:3307	5047060	238	True				
ANR	5047353	ReturnStatement	return R_REG_NAME_R3 ;	120:24:3309:3329	5047060	239	True				
ANR	5047354	Identifier	R_REG_NAME_R3		5047060	0					
ANR	5047355	ReturnStatement	return - 1 ;	122:1:3335:3344	5047060	2	True				
ANR	5047356	UnaryOperationExpression	- 1		5047060	0					
ANR	5047357	UnaryOperator	-		5047060	0					
ANR	5047358	PrimaryExpression	1		5047060	1					
ANR	5047359	ReturnType	R_API int		5047060	1					
ANR	5047360	Identifier	r_reg_get_name_idx		5047060	2					
ANR	5047361	ParameterList	const char * type		5047060	3					
ANR	5047362	Parameter	const char * type	88:29:2075:2090	5047060	0	True				
ANR	5047363	ParameterType	const char *		5047060	0					
ANR	5047364	Identifier	type		5047060	1					
ANR	5047365	CFGEntryNode	ENTRY		5047060		True				
ANR	5047366	CFGExitNode	EXIT		5047060		True				
ANR	5047367	Symbol	R_REG_NAME_ZF		5047060						
ANR	5047368	Symbol	R_REG_NAME_PC		5047060						
ANR	5047369	Symbol	type		5047060						
ANR	5047370	Symbol	* type		5047060						
ANR	5047371	Symbol	R_REG_NAME_BP		5047060						
ANR	5047372	Symbol	R_REG_NAME_A0		5047060						
ANR	5047373	Symbol	R_REG_NAME_A3		5047060						
ANR	5047374	Symbol	R_REG_NAME_SF		5047060						
ANR	5047375	Symbol	R_REG_NAME_A4		5047060						
ANR	5047376	Symbol	R_REG_NAME_A1		5047060						
ANR	5047377	Symbol	R_REG_NAME_A2		5047060						
ANR	5047378	Symbol	R_REG_NAME_LR		5047060						
ANR	5047379	Symbol	R_REG_NAME_R0		5047060						
ANR	5047380	Symbol	R_REG_NAME_SR		5047060						
ANR	5047381	Symbol	R_REG_NAME_R1		5047060						
ANR	5047382	Symbol	R_REG_NAME_SP		5047060						
ANR	5047383	Symbol	R_REG_NAME_CF		5047060						
ANR	5047384	Symbol	R_REG_NAME_R2		5047060						
ANR	5047385	Symbol	R_REG_NAME_R3		5047060						
ANR	5047386	Symbol	R_REG_NAME_A7		5047060						
ANR	5047387	Symbol	R_REG_NAME_OF		5047060						
ANR	5047388	Symbol	R_REG_NAME_A8		5047060						
ANR	5047389	Symbol	R_REG_NAME_A5		5047060						
ANR	5047390	Symbol	R_REG_NAME_A6		5047060						
ANR	5047391	Symbol	R_REG_NAME_SN		5047060						
ANR	5047392	Symbol	R_REG_NAME_A9		5047060						
ANR	5047393	Function	r_reg_set_name	125:0:3349:3548							
ANR	5047394	FunctionDef	"r_reg_set_name (RReg * reg , int role , const char * name)"		5047393	0					
ANR	5047395	CompoundStatement		125:65:3414:3548	5047393	0					
ANR	5047396	IfStatement	if ( role >= 0 && role < R_REG_NAME_LAST )		5047393	0					
ANR	5047397	Condition	role >= 0 && role < R_REG_NAME_LAST	126:5:3421:3455	5047393	0	True				
ANR	5047398	AndExpression	role >= 0 && role < R_REG_NAME_LAST		5047393	0		&&			
ANR	5047399	RelationalExpression	role >= 0		5047393	0		>=			
ANR	5047400	Identifier	role		5047393	0					
ANR	5047401	PrimaryExpression	0		5047393	1					
ANR	5047402	RelationalExpression	role < R_REG_NAME_LAST		5047393	1		<			
ANR	5047403	Identifier	role		5047393	0					
ANR	5047404	Identifier	R_REG_NAME_LAST		5047393	1					
ANR	5047405	CompoundStatement		2:42:43:43	5047393	1					
ANR	5047406	ExpressionStatement	"reg -> name [ role ] = r_str_dup ( reg -> name [ role ] , name )"	127:2:3462:3513	5047393	0	True				
ANR	5047407	AssignmentExpression	"reg -> name [ role ] = r_str_dup ( reg -> name [ role ] , name )"		5047393	0		=			
ANR	5047408	ArrayIndexing	reg -> name [ role ]		5047393	0					
ANR	5047409	PtrMemberAccess	reg -> name		5047393	0					
ANR	5047410	Identifier	reg		5047393	0					
ANR	5047411	Identifier	name		5047393	1					
ANR	5047412	Identifier	role		5047393	1					
ANR	5047413	CallExpression	"r_str_dup ( reg -> name [ role ] , name )"		5047393	1					
ANR	5047414	Callee	r_str_dup		5047393	0					
ANR	5047415	Identifier	r_str_dup		5047393	0					
ANR	5047416	ArgumentList	reg -> name [ role ]		5047393	1					
ANR	5047417	Argument	reg -> name [ role ]		5047393	0					
ANR	5047418	ArrayIndexing	reg -> name [ role ]		5047393	0					
ANR	5047419	PtrMemberAccess	reg -> name		5047393	0					
ANR	5047420	Identifier	reg		5047393	0					
ANR	5047421	Identifier	name		5047393	1					
ANR	5047422	Identifier	role		5047393	1					
ANR	5047423	Argument	name		5047393	1					
ANR	5047424	Identifier	name		5047393	0					
ANR	5047425	ReturnStatement	return true ;	128:2:3517:3528	5047393	1	True				
ANR	5047426	Identifier	true		5047393	0					
ANR	5047427	ReturnStatement	return false ;	130:1:3534:3546	5047393	1	True				
ANR	5047428	Identifier	false		5047393	0					
ANR	5047429	ReturnType	R_API bool		5047393	1					
ANR	5047430	Identifier	r_reg_set_name		5047393	2					
ANR	5047431	ParameterList	"RReg * reg , int role , const char * name"		5047393	3					
ANR	5047432	Parameter	RReg * reg	125:26:3375:3383	5047393	0	True				
ANR	5047433	ParameterType	RReg *		5047393	0					
ANR	5047434	Identifier	reg		5047393	1					
ANR	5047435	Parameter	int role	125:37:3386:3393	5047393	1	True				
ANR	5047436	ParameterType	int		5047393	0					
ANR	5047437	Identifier	role		5047393	1					
ANR	5047438	Parameter	const char * name	125:47:3396:3411	5047393	2	True				
ANR	5047439	ParameterType	const char *		5047393	0					
ANR	5047440	Identifier	name		5047393	1					
ANR	5047441	CFGEntryNode	ENTRY		5047393		True				
ANR	5047442	CFGExitNode	EXIT		5047393		True				
ANR	5047443	Symbol	R_REG_NAME_LAST		5047393						
ANR	5047444	Symbol	role		5047393						
ANR	5047445	Symbol	reg -> name		5047393						
ANR	5047446	Symbol	reg		5047393						
ANR	5047447	Symbol	* reg -> name		5047393						
ANR	5047448	Symbol	name		5047393						
ANR	5047449	Symbol	* * reg		5047393						
ANR	5047450	Symbol	true		5047393						
ANR	5047451	Symbol	false		5047393						
ANR	5047452	Symbol	* reg		5047393						
ANR	5047453	Symbol	* role		5047393						
ANR	5047454	Symbol	r_str_dup		5047393						
ANR	5047455	Function	r_reg_get_name	133:6:3557:3701							
ANR	5047456	FunctionDef	"r_reg_get_name (RReg * reg , int role)"		5047455	0					
ANR	5047457	CompoundStatement		133:54:3605:3701	5047455	0					
ANR	5047458	IfStatement	if ( reg && role >= 0 && role < R_REG_NAME_LAST )		5047455	0					
ANR	5047459	Condition	reg && role >= 0 && role < R_REG_NAME_LAST	134:5:3612:3653	5047455	0	True				
ANR	5047460	AndExpression	reg && role >= 0 && role < R_REG_NAME_LAST		5047455	0		&&			
ANR	5047461	Identifier	reg		5047455	0					
ANR	5047462	AndExpression	role >= 0 && role < R_REG_NAME_LAST		5047455	1		&&			
ANR	5047463	RelationalExpression	role >= 0		5047455	0		>=			
ANR	5047464	Identifier	role		5047455	0					
ANR	5047465	PrimaryExpression	0		5047455	1					
ANR	5047466	RelationalExpression	role < R_REG_NAME_LAST		5047455	1		<			
ANR	5047467	Identifier	role		5047455	0					
ANR	5047468	Identifier	R_REG_NAME_LAST		5047455	1					
ANR	5047469	CompoundStatement		2:49:50:50	5047455	1					
ANR	5047470	ReturnStatement	return reg -> name [ role ] ;	135:2:3660:3682	5047455	0	True				
ANR	5047471	ArrayIndexing	reg -> name [ role ]		5047455	0					
ANR	5047472	PtrMemberAccess	reg -> name		5047455	0					
ANR	5047473	Identifier	reg		5047455	0					
ANR	5047474	Identifier	name		5047455	1					
ANR	5047475	Identifier	role		5047455	1					
ANR	5047476	ReturnStatement	return NULL ;	137:1:3688:3699	5047455	1	True				
ANR	5047477	Identifier	NULL		5047455	0					
ANR	5047478	ReturnType	const char *		5047455	1					
ANR	5047479	Identifier	r_reg_get_name		5047455	2					
ANR	5047480	ParameterList	"RReg * reg , int role"		5047455	3					
ANR	5047481	Parameter	RReg * reg	133:33:3584:3592	5047455	0	True				
ANR	5047482	ParameterType	RReg *		5047455	0					
ANR	5047483	Identifier	reg		5047455	1					
ANR	5047484	Parameter	int role	133:44:3595:3602	5047455	1	True				
ANR	5047485	ParameterType	int		5047455	0					
ANR	5047486	Identifier	role		5047455	1					
ANR	5047487	CFGEntryNode	ENTRY		5047455		True				
ANR	5047488	CFGExitNode	EXIT		5047455		True				
ANR	5047489	Symbol	R_REG_NAME_LAST		5047455						
ANR	5047490	Symbol	role		5047455						
ANR	5047491	Symbol	NULL		5047455						
ANR	5047492	Symbol	reg -> name		5047455						
ANR	5047493	Symbol	reg		5047455						
ANR	5047494	Symbol	* reg -> name		5047455						
ANR	5047495	Symbol	* * reg		5047455						
ANR	5047496	Symbol	* reg		5047455						
ANR	5047497	Symbol	* role		5047455						
ANR	5047498	DeclStmt									
ANR	5047499	Decl							const char	const char * [ R_REG_NAME_LAST + 1 ]	roles
ANR	5047500	Function	r_reg_get_role	149:6:3919:4041							
ANR	5047501	FunctionDef	r_reg_get_role (int role)		5047500	0					
ANR	5047502	CompoundStatement		149:43:3956:4041	5047500	0					
ANR	5047503	IfStatement	if ( role >= 0 && role < R_REG_NAME_LAST )		5047500	0					
ANR	5047504	Condition	role >= 0 && role < R_REG_NAME_LAST	150:5:3963:3997	5047500	0	True				
ANR	5047505	AndExpression	role >= 0 && role < R_REG_NAME_LAST		5047500	0		&&			
ANR	5047506	RelationalExpression	role >= 0		5047500	0		>=			
ANR	5047507	Identifier	role		5047500	0					
ANR	5047508	PrimaryExpression	0		5047500	1					
ANR	5047509	RelationalExpression	role < R_REG_NAME_LAST		5047500	1		<			
ANR	5047510	Identifier	role		5047500	0					
ANR	5047511	Identifier	R_REG_NAME_LAST		5047500	1					
ANR	5047512	CompoundStatement		2:42:43:43	5047500	1					
ANR	5047513	ReturnStatement	return roles [ role ] ;	151:2:4004:4022	5047500	0	True				
ANR	5047514	ArrayIndexing	roles [ role ]		5047500	0					
ANR	5047515	Identifier	roles		5047500	0					
ANR	5047516	Identifier	role		5047500	1					
ANR	5047517	ReturnStatement	return NULL ;	153:1:4028:4039	5047500	1	True				
ANR	5047518	Identifier	NULL		5047500	0					
ANR	5047519	ReturnType	const char *		5047500	1					
ANR	5047520	Identifier	r_reg_get_role		5047500	2					
ANR	5047521	ParameterList	int role		5047500	3					
ANR	5047522	Parameter	int role	149:33:3946:3953	5047500	0	True				
ANR	5047523	ParameterType	int		5047500	0					
ANR	5047524	Identifier	role		5047500	1					
ANR	5047525	CFGEntryNode	ENTRY		5047500		True				
ANR	5047526	CFGExitNode	EXIT		5047500		True				
ANR	5047527	Symbol	R_REG_NAME_LAST		5047500						
ANR	5047528	Symbol	role		5047500						
ANR	5047529	Symbol	NULL		5047500						
ANR	5047530	Symbol	roles		5047500						
ANR	5047531	Symbol	* roles		5047500						
ANR	5047532	Symbol	* role		5047500						
ANR	5047533	Function	r_reg_free_internal	156:0:4044:5055							
ANR	5047534	FunctionDef	"r_reg_free_internal (RReg * reg , bool init)"		5047533	0					
ANR	5047535	CompoundStatement		156:53:4097:5055	5047533	0					
ANR	5047536	IdentifierDeclStatement	ut32 i ;	157:1:4100:4106	5047533	0	True				
ANR	5047537	IdentifierDecl	i		5047533	0					
ANR	5047538	IdentifierDeclType	ut32		5047533	0					
ANR	5047539	Identifier	i		5047533	1					
ANR	5047540	ExpressionStatement	r_list_free ( reg -> roregs )	159:1:4110:4135	5047533	1	True				
ANR	5047541	CallExpression	r_list_free ( reg -> roregs )		5047533	0					
ANR	5047542	Callee	r_list_free		5047533	0					
ANR	5047543	Identifier	r_list_free		5047533	0					
ANR	5047544	ArgumentList	reg -> roregs		5047533	1					
ANR	5047545	Argument	reg -> roregs		5047533	0					
ANR	5047546	PtrMemberAccess	reg -> roregs		5047533	0					
ANR	5047547	Identifier	reg		5047533	0					
ANR	5047548	Identifier	roregs		5047533	1					
ANR	5047549	ExpressionStatement	reg -> roregs = NULL	160:1:4138:4156	5047533	2	True				
ANR	5047550	AssignmentExpression	reg -> roregs = NULL		5047533	0		=			
ANR	5047551	PtrMemberAccess	reg -> roregs		5047533	0					
ANR	5047552	Identifier	reg		5047533	0					
ANR	5047553	Identifier	roregs		5047533	1					
ANR	5047554	Identifier	NULL		5047533	1					
ANR	5047555	ExpressionStatement	R_FREE ( reg -> reg_profile_str )	161:1:4159:4188	5047533	3	True				
ANR	5047556	CallExpression	R_FREE ( reg -> reg_profile_str )		5047533	0					
ANR	5047557	Callee	R_FREE		5047533	0					
ANR	5047558	Identifier	R_FREE		5047533	0					
ANR	5047559	ArgumentList	reg -> reg_profile_str		5047533	1					
ANR	5047560	Argument	reg -> reg_profile_str		5047533	0					
ANR	5047561	PtrMemberAccess	reg -> reg_profile_str		5047533	0					
ANR	5047562	Identifier	reg		5047533	0					
ANR	5047563	Identifier	reg_profile_str		5047533	1					
ANR	5047564	ExpressionStatement	R_FREE ( reg -> reg_profile_cmt )	162:1:4191:4220	5047533	4	True				
ANR	5047565	CallExpression	R_FREE ( reg -> reg_profile_cmt )		5047533	0					
ANR	5047566	Callee	R_FREE		5047533	0					
ANR	5047567	Identifier	R_FREE		5047533	0					
ANR	5047568	ArgumentList	reg -> reg_profile_cmt		5047533	1					
ANR	5047569	Argument	reg -> reg_profile_cmt		5047533	0					
ANR	5047570	PtrMemberAccess	reg -> reg_profile_cmt		5047533	0					
ANR	5047571	Identifier	reg		5047533	0					
ANR	5047572	Identifier	reg_profile_cmt		5047533	1					
ANR	5047573	ForStatement	for ( i = 0 ; i < R_REG_NAME_LAST ; i ++ )		5047533	5					
ANR	5047574	ForInit	i = 0 ;	164:6:4229:4234	5047533	0	True				
ANR	5047575	AssignmentExpression	i = 0		5047533	0		=			
ANR	5047576	Identifier	i		5047533	0					
ANR	5047577	PrimaryExpression	0		5047533	1					
ANR	5047578	Condition	i < R_REG_NAME_LAST	164:13:4236:4254	5047533	1	True				
ANR	5047579	RelationalExpression	i < R_REG_NAME_LAST		5047533	0		<			
ANR	5047580	Identifier	i		5047533	0					
ANR	5047581	Identifier	R_REG_NAME_LAST		5047533	1					
ANR	5047582	PostIncDecOperationExpression	i ++	164:34:4257:4259	5047533	2	True				
ANR	5047583	Identifier	i		5047533	0					
ANR	5047584	IncDec	++		5047533	1					
ANR	5047585	CompoundStatement		9:39:164:164	5047533	3					
ANR	5047586	IfStatement	if ( reg -> name [ i ] )		5047533	0					
ANR	5047587	Condition	reg -> name [ i ]	165:6:4270:4281	5047533	0	True				
ANR	5047588	ArrayIndexing	reg -> name [ i ]		5047533	0					
ANR	5047589	PtrMemberAccess	reg -> name		5047533	0					
ANR	5047590	Identifier	reg		5047533	0					
ANR	5047591	Identifier	name		5047533	1					
ANR	5047592	Identifier	i		5047533	1					
ANR	5047593	CompoundStatement		10:20:186:186	5047533	1					
ANR	5047594	ExpressionStatement	R_FREE ( reg -> name [ i ] )	166:3:4289:4310	5047533	0	True				
ANR	5047595	CallExpression	R_FREE ( reg -> name [ i ] )		5047533	0					
ANR	5047596	Callee	R_FREE		5047533	0					
ANR	5047597	Identifier	R_FREE		5047533	0					
ANR	5047598	ArgumentList	reg -> name [ i ]		5047533	1					
ANR	5047599	Argument	reg -> name [ i ]		5047533	0					
ANR	5047600	ArrayIndexing	reg -> name [ i ]		5047533	0					
ANR	5047601	PtrMemberAccess	reg -> name		5047533	0					
ANR	5047602	Identifier	reg		5047533	0					
ANR	5047603	Identifier	name		5047533	1					
ANR	5047604	Identifier	i		5047533	1					
ANR	5047605	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5047533	6					
ANR	5047606	ForInit	i = 0 ;	169:6:4325:4330	5047533	0	True				
ANR	5047607	AssignmentExpression	i = 0		5047533	0		=			
ANR	5047608	Identifier	i		5047533	0					
ANR	5047609	PrimaryExpression	0		5047533	1					
ANR	5047610	Condition	i < R_REG_TYPE_LAST	169:13:4332:4350	5047533	1	True				
ANR	5047611	RelationalExpression	i < R_REG_TYPE_LAST		5047533	0		<			
ANR	5047612	Identifier	i		5047533	0					
ANR	5047613	Identifier	R_REG_TYPE_LAST		5047533	1					
ANR	5047614	PostIncDecOperationExpression	i ++	169:34:4353:4355	5047533	2	True				
ANR	5047615	Identifier	i		5047533	0					
ANR	5047616	IncDec	++		5047533	1					
ANR	5047617	CompoundStatement		14:39:260:260	5047533	3					
ANR	5047618	ExpressionStatement	ht_pp_free ( reg -> regset [ i ] . ht_regs )	170:2:4362:4397	5047533	0	True				
ANR	5047619	CallExpression	ht_pp_free ( reg -> regset [ i ] . ht_regs )		5047533	0					
ANR	5047620	Callee	ht_pp_free		5047533	0					
ANR	5047621	Identifier	ht_pp_free		5047533	0					
ANR	5047622	ArgumentList	reg -> regset [ i ] . ht_regs		5047533	1					
ANR	5047623	Argument	reg -> regset [ i ] . ht_regs		5047533	0					
ANR	5047624	MemberAccess	reg -> regset [ i ] . ht_regs		5047533	0					
ANR	5047625	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047626	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047627	Identifier	reg		5047533	0					
ANR	5047628	Identifier	regset		5047533	1					
ANR	5047629	Identifier	i		5047533	1					
ANR	5047630	Identifier	ht_regs		5047533	1					
ANR	5047631	ExpressionStatement	reg -> regset [ i ] . ht_regs = NULL	171:2:4401:4430	5047533	1	True				
ANR	5047632	AssignmentExpression	reg -> regset [ i ] . ht_regs = NULL		5047533	0		=			
ANR	5047633	MemberAccess	reg -> regset [ i ] . ht_regs		5047533	0					
ANR	5047634	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047635	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047636	Identifier	reg		5047533	0					
ANR	5047637	Identifier	regset		5047533	1					
ANR	5047638	Identifier	i		5047533	1					
ANR	5047639	Identifier	ht_regs		5047533	1					
ANR	5047640	Identifier	NULL		5047533	1					
ANR	5047641	IfStatement	if ( ! reg -> regset [ i ] . pool )		5047533	2					
ANR	5047642	Condition	! reg -> regset [ i ] . pool	172:6:4438:4457	5047533	0	True				
ANR	5047643	UnaryOperationExpression	! reg -> regset [ i ] . pool		5047533	0					
ANR	5047644	UnaryOperator	!		5047533	0					
ANR	5047645	MemberAccess	reg -> regset [ i ] . pool		5047533	1					
ANR	5047646	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047647	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047648	Identifier	reg		5047533	0					
ANR	5047649	Identifier	regset		5047533	1					
ANR	5047650	Identifier	i		5047533	1					
ANR	5047651	Identifier	pool		5047533	1					
ANR	5047652	CompoundStatement		17:28:362:362	5047533	1					
ANR	5047653	ContinueStatement	continue ;	173:3:4465:4473	5047533	0	True				
ANR	5047654	IfStatement	if ( init )		5047533	3					
ANR	5047655	Condition	init	175:6:4485:4488	5047533	0	True				
ANR	5047656	Identifier	init		5047533	0					
ANR	5047657	CompoundStatement		20:12:393:393	5047533	1					
ANR	5047658	ExpressionStatement	r_list_free ( reg -> regset [ i ] . regs )	176:3:4496:4529	5047533	0	True				
ANR	5047659	CallExpression	r_list_free ( reg -> regset [ i ] . regs )		5047533	0					
ANR	5047660	Callee	r_list_free		5047533	0					
ANR	5047661	Identifier	r_list_free		5047533	0					
ANR	5047662	ArgumentList	reg -> regset [ i ] . regs		5047533	1					
ANR	5047663	Argument	reg -> regset [ i ] . regs		5047533	0					
ANR	5047664	MemberAccess	reg -> regset [ i ] . regs		5047533	0					
ANR	5047665	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047666	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047667	Identifier	reg		5047533	0					
ANR	5047668	Identifier	regset		5047533	1					
ANR	5047669	Identifier	i		5047533	1					
ANR	5047670	Identifier	regs		5047533	1					
ANR	5047671	ExpressionStatement	reg -> regset [ i ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )	177:3:4534:4596	5047533	1	True				
ANR	5047672	AssignmentExpression	reg -> regset [ i ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )		5047533	0		=			
ANR	5047673	MemberAccess	reg -> regset [ i ] . regs		5047533	0					
ANR	5047674	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047675	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047676	Identifier	reg		5047533	0					
ANR	5047677	Identifier	regset		5047533	1					
ANR	5047678	Identifier	i		5047533	1					
ANR	5047679	Identifier	regs		5047533	1					
ANR	5047680	CallExpression	r_list_newf ( ( RListFree ) r_reg_item_free )		5047533	1					
ANR	5047681	Callee	r_list_newf		5047533	0					
ANR	5047682	Identifier	r_list_newf		5047533	0					
ANR	5047683	ArgumentList	( RListFree ) r_reg_item_free		5047533	1					
ANR	5047684	Argument	( RListFree ) r_reg_item_free		5047533	0					
ANR	5047685	CastExpression	( RListFree ) r_reg_item_free		5047533	0					
ANR	5047686	CastTarget	RListFree		5047533	0					
ANR	5047687	Identifier	r_reg_item_free		5047533	1					
ANR	5047688	ElseStatement	else		5047533	0					
ANR	5047689	CompoundStatement		23:9:509:509	5047533	0					
ANR	5047690	ExpressionStatement	r_list_free ( reg -> regset [ i ] . regs )	179:3:4612:4645	5047533	0	True				
ANR	5047691	CallExpression	r_list_free ( reg -> regset [ i ] . regs )		5047533	0					
ANR	5047692	Callee	r_list_free		5047533	0					
ANR	5047693	Identifier	r_list_free		5047533	0					
ANR	5047694	ArgumentList	reg -> regset [ i ] . regs		5047533	1					
ANR	5047695	Argument	reg -> regset [ i ] . regs		5047533	0					
ANR	5047696	MemberAccess	reg -> regset [ i ] . regs		5047533	0					
ANR	5047697	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047698	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047699	Identifier	reg		5047533	0					
ANR	5047700	Identifier	regset		5047533	1					
ANR	5047701	Identifier	i		5047533	1					
ANR	5047702	Identifier	regs		5047533	1					
ANR	5047703	ExpressionStatement	reg -> regset [ i ] . regs = NULL	180:3:4650:4676	5047533	1	True				
ANR	5047704	AssignmentExpression	reg -> regset [ i ] . regs = NULL		5047533	0		=			
ANR	5047705	MemberAccess	reg -> regset [ i ] . regs		5047533	0					
ANR	5047706	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047707	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047708	Identifier	reg		5047533	0					
ANR	5047709	Identifier	regset		5047533	1					
ANR	5047710	Identifier	i		5047533	1					
ANR	5047711	Identifier	regs		5047533	1					
ANR	5047712	Identifier	NULL		5047533	1					
ANR	5047713	IfStatement	"if ( ! r_list_delete_data ( reg -> regset [ i ] . pool , reg -> regset [ i ] . arena ) )"		5047533	2					
ANR	5047714	Condition	"! r_list_delete_data ( reg -> regset [ i ] . pool , reg -> regset [ i ] . arena )"	182:7:4744:4806	5047533	0	True				
ANR	5047715	UnaryOperationExpression	"! r_list_delete_data ( reg -> regset [ i ] . pool , reg -> regset [ i ] . arena )"		5047533	0					
ANR	5047716	UnaryOperator	!		5047533	0					
ANR	5047717	CallExpression	"r_list_delete_data ( reg -> regset [ i ] . pool , reg -> regset [ i ] . arena )"		5047533	1					
ANR	5047718	Callee	r_list_delete_data		5047533	0					
ANR	5047719	Identifier	r_list_delete_data		5047533	0					
ANR	5047720	ArgumentList	reg -> regset [ i ] . pool		5047533	1					
ANR	5047721	Argument	reg -> regset [ i ] . pool		5047533	0					
ANR	5047722	MemberAccess	reg -> regset [ i ] . pool		5047533	0					
ANR	5047723	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047724	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047725	Identifier	reg		5047533	0					
ANR	5047726	Identifier	regset		5047533	1					
ANR	5047727	Identifier	i		5047533	1					
ANR	5047728	Identifier	pool		5047533	1					
ANR	5047729	Argument	reg -> regset [ i ] . arena		5047533	1					
ANR	5047730	MemberAccess	reg -> regset [ i ] . arena		5047533	0					
ANR	5047731	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047732	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047733	Identifier	reg		5047533	0					
ANR	5047734	Identifier	regset		5047533	1					
ANR	5047735	Identifier	i		5047533	1					
ANR	5047736	Identifier	arena		5047533	1					
ANR	5047737	CompoundStatement		27:72:711:711	5047533	1					
ANR	5047738	ExpressionStatement	r_reg_arena_free ( reg -> regset [ i ] . arena )	183:4:4815:4854	5047533	0	True				
ANR	5047739	CallExpression	r_reg_arena_free ( reg -> regset [ i ] . arena )		5047533	0					
ANR	5047740	Callee	r_reg_arena_free		5047533	0					
ANR	5047741	Identifier	r_reg_arena_free		5047533	0					
ANR	5047742	ArgumentList	reg -> regset [ i ] . arena		5047533	1					
ANR	5047743	Argument	reg -> regset [ i ] . arena		5047533	0					
ANR	5047744	MemberAccess	reg -> regset [ i ] . arena		5047533	0					
ANR	5047745	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047746	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047747	Identifier	reg		5047533	0					
ANR	5047748	Identifier	regset		5047533	1					
ANR	5047749	Identifier	i		5047533	1					
ANR	5047750	Identifier	arena		5047533	1					
ANR	5047751	ExpressionStatement	reg -> regset [ i ] . arena = NULL	185:3:4864:4891	5047533	3	True				
ANR	5047752	AssignmentExpression	reg -> regset [ i ] . arena = NULL		5047533	0		=			
ANR	5047753	MemberAccess	reg -> regset [ i ] . arena		5047533	0					
ANR	5047754	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047755	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047756	Identifier	reg		5047533	0					
ANR	5047757	Identifier	regset		5047533	1					
ANR	5047758	Identifier	i		5047533	1					
ANR	5047759	Identifier	arena		5047533	1					
ANR	5047760	Identifier	NULL		5047533	1					
ANR	5047761	ExpressionStatement	r_list_free ( reg -> regset [ i ] . pool )	186:3:4896:4929	5047533	4	True				
ANR	5047762	CallExpression	r_list_free ( reg -> regset [ i ] . pool )		5047533	0					
ANR	5047763	Callee	r_list_free		5047533	0					
ANR	5047764	Identifier	r_list_free		5047533	0					
ANR	5047765	ArgumentList	reg -> regset [ i ] . pool		5047533	1					
ANR	5047766	Argument	reg -> regset [ i ] . pool		5047533	0					
ANR	5047767	MemberAccess	reg -> regset [ i ] . pool		5047533	0					
ANR	5047768	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047769	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047770	Identifier	reg		5047533	0					
ANR	5047771	Identifier	regset		5047533	1					
ANR	5047772	Identifier	i		5047533	1					
ANR	5047773	Identifier	pool		5047533	1					
ANR	5047774	ExpressionStatement	reg -> regset [ i ] . pool = NULL	187:3:4934:4960	5047533	5	True				
ANR	5047775	AssignmentExpression	reg -> regset [ i ] . pool = NULL		5047533	0		=			
ANR	5047776	MemberAccess	reg -> regset [ i ] . pool		5047533	0					
ANR	5047777	ArrayIndexing	reg -> regset [ i ]		5047533	0					
ANR	5047778	PtrMemberAccess	reg -> regset		5047533	0					
ANR	5047779	Identifier	reg		5047533	0					
ANR	5047780	Identifier	regset		5047533	1					
ANR	5047781	Identifier	i		5047533	1					
ANR	5047782	Identifier	pool		5047533	1					
ANR	5047783	Identifier	NULL		5047533	1					
ANR	5047784	IfStatement	if ( ! init )		5047533	7					
ANR	5047785	Condition	! init	190:5:4974:4978	5047533	0	True				
ANR	5047786	UnaryOperationExpression	! init		5047533	0					
ANR	5047787	UnaryOperator	!		5047533	0					
ANR	5047788	Identifier	init		5047533	1					
ANR	5047789	CompoundStatement		35:12:883:883	5047533	1					
ANR	5047790	ExpressionStatement	r_list_free ( reg -> allregs )	191:2:4985:5011	5047533	0	True				
ANR	5047791	CallExpression	r_list_free ( reg -> allregs )		5047533	0					
ANR	5047792	Callee	r_list_free		5047533	0					
ANR	5047793	Identifier	r_list_free		5047533	0					
ANR	5047794	ArgumentList	reg -> allregs		5047533	1					
ANR	5047795	Argument	reg -> allregs		5047533	0					
ANR	5047796	PtrMemberAccess	reg -> allregs		5047533	0					
ANR	5047797	Identifier	reg		5047533	0					
ANR	5047798	Identifier	allregs		5047533	1					
ANR	5047799	ExpressionStatement	reg -> allregs = NULL	192:2:5015:5034	5047533	1	True				
ANR	5047800	AssignmentExpression	reg -> allregs = NULL		5047533	0		=			
ANR	5047801	PtrMemberAccess	reg -> allregs		5047533	0					
ANR	5047802	Identifier	reg		5047533	0					
ANR	5047803	Identifier	allregs		5047533	1					
ANR	5047804	Identifier	NULL		5047533	1					
ANR	5047805	ExpressionStatement	reg -> size = 0	194:1:5040:5053	5047533	8	True				
ANR	5047806	AssignmentExpression	reg -> size = 0		5047533	0		=			
ANR	5047807	PtrMemberAccess	reg -> size		5047533	0					
ANR	5047808	Identifier	reg		5047533	0					
ANR	5047809	Identifier	size		5047533	1					
ANR	5047810	PrimaryExpression	0		5047533	1					
ANR	5047811	ReturnType	R_API void		5047533	1					
ANR	5047812	Identifier	r_reg_free_internal		5047533	2					
ANR	5047813	ParameterList	"RReg * reg , bool init"		5047533	3					
ANR	5047814	Parameter	RReg * reg	156:31:4075:4083	5047533	0	True				
ANR	5047815	ParameterType	RReg *		5047533	0					
ANR	5047816	Identifier	reg		5047533	1					
ANR	5047817	Parameter	bool init	156:42:4086:4094	5047533	1	True				
ANR	5047818	ParameterType	bool		5047533	0					
ANR	5047819	Identifier	init		5047533	1					
ANR	5047820	CFGEntryNode	ENTRY		5047533		True				
ANR	5047821	CFGExitNode	EXIT		5047533		True				
ANR	5047822	Symbol	reg -> reg_profile_str		5047533						
ANR	5047823	Symbol	reg -> allregs		5047533						
ANR	5047824	Symbol	reg -> regset [ i ] . ht_regs		5047533						
ANR	5047825	Symbol	reg -> roregs		5047533						
ANR	5047826	Symbol	reg -> regset		5047533						
ANR	5047827	Symbol	R_REG_NAME_LAST		5047533						
ANR	5047828	Symbol	reg		5047533						
ANR	5047829	Symbol	r_list_delete_data		5047533						
ANR	5047830	Symbol	init		5047533						
ANR	5047831	Symbol	* reg -> regset		5047533						
ANR	5047832	Symbol	NULL		5047533						
ANR	5047833	Symbol	r_list_newf		5047533						
ANR	5047834	Symbol	* * reg		5047533						
ANR	5047835	Symbol	i		5047533						
ANR	5047836	Symbol	R_REG_TYPE_LAST		5047533						
ANR	5047837	Symbol	reg -> reg_profile_cmt		5047533						
ANR	5047838	Symbol	r_reg_item_free		5047533						
ANR	5047839	Symbol	* i		5047533						
ANR	5047840	Symbol	reg -> name		5047533						
ANR	5047841	Symbol	* reg -> name		5047533						
ANR	5047842	Symbol	reg -> size		5047533						
ANR	5047843	Symbol	reg -> regset [ i ] . regs		5047533						
ANR	5047844	Symbol	* reg		5047533						
ANR	5047845	Symbol	reg -> regset [ i ] . arena		5047533						
ANR	5047846	Symbol	reg -> regset [ i ] . pool		5047533						
ANR	5047847	Function	regcmp	197:0:5058:5205							
ANR	5047848	FunctionDef	"regcmp (RRegItem * a , RRegItem * b)"		5047847	0					
ANR	5047849	CompoundStatement		197:44:5102:5205	5047847	0					
ANR	5047850	IdentifierDeclStatement	int offa = ( a -> offset * 16 ) + a -> size ;	198:1:5105:5142	5047847	0	True				
ANR	5047851	IdentifierDecl	offa = ( a -> offset * 16 ) + a -> size		5047847	0					
ANR	5047852	IdentifierDeclType	int		5047847	0					
ANR	5047853	Identifier	offa		5047847	1					
ANR	5047854	AssignmentExpression	offa = ( a -> offset * 16 ) + a -> size		5047847	2		=			
ANR	5047855	Identifier	offa		5047847	0					
ANR	5047856	AdditiveExpression	( a -> offset * 16 ) + a -> size		5047847	1		+			
ANR	5047857	MultiplicativeExpression	a -> offset * 16		5047847	0		*			
ANR	5047858	PtrMemberAccess	a -> offset		5047847	0					
ANR	5047859	Identifier	a		5047847	0					
ANR	5047860	Identifier	offset		5047847	1					
ANR	5047861	PrimaryExpression	16		5047847	1					
ANR	5047862	PtrMemberAccess	a -> size		5047847	1					
ANR	5047863	Identifier	a		5047847	0					
ANR	5047864	Identifier	size		5047847	1					
ANR	5047865	IdentifierDeclStatement	int offb = ( b -> offset * 16 ) + b -> size ;	199:1:5145:5182	5047847	1	True				
ANR	5047866	IdentifierDecl	offb = ( b -> offset * 16 ) + b -> size		5047847	0					
ANR	5047867	IdentifierDeclType	int		5047847	0					
ANR	5047868	Identifier	offb		5047847	1					
ANR	5047869	AssignmentExpression	offb = ( b -> offset * 16 ) + b -> size		5047847	2		=			
ANR	5047870	Identifier	offb		5047847	0					
ANR	5047871	AdditiveExpression	( b -> offset * 16 ) + b -> size		5047847	1		+			
ANR	5047872	MultiplicativeExpression	b -> offset * 16		5047847	0		*			
ANR	5047873	PtrMemberAccess	b -> offset		5047847	0					
ANR	5047874	Identifier	b		5047847	0					
ANR	5047875	Identifier	offset		5047847	1					
ANR	5047876	PrimaryExpression	16		5047847	1					
ANR	5047877	PtrMemberAccess	b -> size		5047847	1					
ANR	5047878	Identifier	b		5047847	0					
ANR	5047879	Identifier	size		5047847	1					
ANR	5047880	ReturnStatement	return offa > offb ;	200:1:5185:5203	5047847	2	True				
ANR	5047881	RelationalExpression	offa > offb		5047847	0		>			
ANR	5047882	Identifier	offa		5047847	0					
ANR	5047883	Identifier	offb		5047847	1					
ANR	5047884	ReturnType	static int		5047847	1					
ANR	5047885	Identifier	regcmp		5047847	2					
ANR	5047886	ParameterList	"RRegItem * a , RRegItem * b"		5047847	3					
ANR	5047887	Parameter	RRegItem * a	197:18:5076:5086	5047847	0	True				
ANR	5047888	ParameterType	RRegItem *		5047847	0					
ANR	5047889	Identifier	a		5047847	1					
ANR	5047890	Parameter	RRegItem * b	197:31:5089:5099	5047847	1	True				
ANR	5047891	ParameterType	RRegItem *		5047847	0					
ANR	5047892	Identifier	b		5047847	1					
ANR	5047893	CFGEntryNode	ENTRY		5047847		True				
ANR	5047894	CFGExitNode	EXIT		5047847		True				
ANR	5047895	Symbol	a -> size		5047847						
ANR	5047896	Symbol	a		5047847						
ANR	5047897	Symbol	b		5047847						
ANR	5047898	Symbol	a -> offset		5047847						
ANR	5047899	Symbol	offa		5047847						
ANR	5047900	Symbol	b -> size		5047847						
ANR	5047901	Symbol	offb		5047847						
ANR	5047902	Symbol	* a		5047847						
ANR	5047903	Symbol	* b		5047847						
ANR	5047904	Symbol	b -> offset		5047847						
ANR	5047905	Function	r_reg_reindex	203:0:5208:5617							
ANR	5047906	FunctionDef	r_reg_reindex (RReg * reg)		5047905	0					
ANR	5047907	CompoundStatement		203:36:5244:5617	5047905	0					
ANR	5047908	IdentifierDeclStatement	"int i , index ;"	204:1:5247:5259	5047905	0	True				
ANR	5047909	IdentifierDecl	i		5047905	0					
ANR	5047910	IdentifierDeclType	int		5047905	0					
ANR	5047911	Identifier	i		5047905	1					
ANR	5047912	IdentifierDecl	index		5047905	1					
ANR	5047913	IdentifierDeclType	int		5047905	0					
ANR	5047914	Identifier	index		5047905	1					
ANR	5047915	IdentifierDeclStatement	RListIter * iter ;	205:1:5262:5277	5047905	1	True				
ANR	5047916	IdentifierDecl	* iter		5047905	0					
ANR	5047917	IdentifierDeclType	RListIter *		5047905	0					
ANR	5047918	Identifier	iter		5047905	1					
ANR	5047919	IdentifierDeclStatement	RRegItem * r ;	206:1:5280:5291	5047905	2	True				
ANR	5047920	IdentifierDecl	* r		5047905	0					
ANR	5047921	IdentifierDeclType	RRegItem *		5047905	0					
ANR	5047922	Identifier	r		5047905	1					
ANR	5047923	IdentifierDeclStatement	RList * all = r_list_newf ( NULL ) ;	207:1:5294:5325	5047905	3	True				
ANR	5047924	IdentifierDecl	* all = r_list_newf ( NULL )		5047905	0					
ANR	5047925	IdentifierDeclType	RList *		5047905	0					
ANR	5047926	Identifier	all		5047905	1					
ANR	5047927	AssignmentExpression	* all = r_list_newf ( NULL )		5047905	2		=			
ANR	5047928	Identifier	all		5047905	0					
ANR	5047929	CallExpression	r_list_newf ( NULL )		5047905	1					
ANR	5047930	Callee	r_list_newf		5047905	0					
ANR	5047931	Identifier	r_list_newf		5047905	0					
ANR	5047932	ArgumentList	NULL		5047905	1					
ANR	5047933	Argument	NULL		5047905	0					
ANR	5047934	Identifier	NULL		5047905	0					
ANR	5047935	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5047905	4					
ANR	5047936	ForInit	i = 0 ;	208:6:5333:5338	5047905	0	True				
ANR	5047937	AssignmentExpression	i = 0		5047905	0		=			
ANR	5047938	Identifier	i		5047905	0					
ANR	5047939	PrimaryExpression	0		5047905	1					
ANR	5047940	Condition	i < R_REG_TYPE_LAST	208:13:5340:5358	5047905	1	True				
ANR	5047941	RelationalExpression	i < R_REG_TYPE_LAST		5047905	0		<			
ANR	5047942	Identifier	i		5047905	0					
ANR	5047943	Identifier	R_REG_TYPE_LAST		5047905	1					
ANR	5047944	PostIncDecOperationExpression	i ++	208:34:5361:5363	5047905	2	True				
ANR	5047945	Identifier	i		5047905	0					
ANR	5047946	IncDec	++		5047905	1					
ANR	5047947	CompoundStatement		6:39:121:121	5047905	3					
ANR	5047948	Statement	r_list_foreach	209:2:5370:5383	5047905	0	True				
ANR	5047949	Statement	(	209:17:5385:5385	5047905	1	True				
ANR	5047950	Statement	reg	209:18:5386:5388	5047905	2	True				
ANR	5047951	Statement	->	209:21:5389:5390	5047905	3	True				
ANR	5047952	Statement	regset	209:23:5391:5396	5047905	4	True				
ANR	5047953	Statement	[	209:29:5397:5397	5047905	5	True				
ANR	5047954	Statement	i	209:30:5398:5398	5047905	6	True				
ANR	5047955	Statement	]	209:31:5399:5399	5047905	7	True				
ANR	5047956	Statement	.	209:32:5400:5400	5047905	8	True				
ANR	5047957	Statement	regs	209:33:5401:5404	5047905	9	True				
ANR	5047958	Statement	","	209:37:5405:5405	5047905	10	True				
ANR	5047959	Statement	iter	209:39:5407:5410	5047905	11	True				
ANR	5047960	Statement	","	209:43:5411:5411	5047905	12	True				
ANR	5047961	Statement	r	209:45:5413:5413	5047905	13	True				
ANR	5047962	Statement	)	209:46:5414:5414	5047905	14	True				
ANR	5047963	CompoundStatement		7:48:171:171	5047905	15					
ANR	5047964	ExpressionStatement	"r_list_append ( all , r )"	210:3:5421:5443	5047905	0	True				
ANR	5047965	CallExpression	"r_list_append ( all , r )"		5047905	0					
ANR	5047966	Callee	r_list_append		5047905	0					
ANR	5047967	Identifier	r_list_append		5047905	0					
ANR	5047968	ArgumentList	all		5047905	1					
ANR	5047969	Argument	all		5047905	0					
ANR	5047970	Identifier	all		5047905	0					
ANR	5047971	Argument	r		5047905	1					
ANR	5047972	Identifier	r		5047905	0					
ANR	5047973	ExpressionStatement	"r_list_sort ( all , ( RListComparator ) regcmp )"	213:1:5453:5495	5047905	5	True				
ANR	5047974	CallExpression	"r_list_sort ( all , ( RListComparator ) regcmp )"		5047905	0					
ANR	5047975	Callee	r_list_sort		5047905	0					
ANR	5047976	Identifier	r_list_sort		5047905	0					
ANR	5047977	ArgumentList	all		5047905	1					
ANR	5047978	Argument	all		5047905	0					
ANR	5047979	Identifier	all		5047905	0					
ANR	5047980	Argument	( RListComparator ) regcmp		5047905	1					
ANR	5047981	CastExpression	( RListComparator ) regcmp		5047905	0					
ANR	5047982	CastTarget	RListComparator		5047905	0					
ANR	5047983	Identifier	regcmp		5047905	1					
ANR	5047984	ExpressionStatement	index = 0	214:1:5498:5507	5047905	6	True				
ANR	5047985	AssignmentExpression	index = 0		5047905	0		=			
ANR	5047986	Identifier	index		5047905	0					
ANR	5047987	PrimaryExpression	0		5047905	1					
ANR	5047988	Statement	r_list_foreach	215:1:5510:5523	5047905	7	True				
ANR	5047989	Statement	(	215:16:5525:5525	5047905	8	True				
ANR	5047990	Statement	all	215:17:5526:5528	5047905	9	True				
ANR	5047991	Statement	","	215:20:5529:5529	5047905	10	True				
ANR	5047992	Statement	iter	215:22:5531:5534	5047905	11	True				
ANR	5047993	Statement	","	215:26:5535:5535	5047905	12	True				
ANR	5047994	Statement	r	215:28:5537:5537	5047905	13	True				
ANR	5047995	Statement	)	215:29:5538:5538	5047905	14	True				
ANR	5047996	CompoundStatement		13:31:295:295	5047905	15					
ANR	5047997	ExpressionStatement	r -> index = index ++	216:2:5544:5562	5047905	0	True				
ANR	5047998	AssignmentExpression	r -> index = index ++		5047905	0		=			
ANR	5047999	PtrMemberAccess	r -> index		5047905	0					
ANR	5048000	Identifier	r		5047905	0					
ANR	5048001	Identifier	index		5047905	1					
ANR	5048002	PostIncDecOperationExpression	index ++		5047905	1					
ANR	5048003	Identifier	index		5047905	0					
ANR	5048004	IncDec	++		5047905	1					
ANR	5048005	ExpressionStatement	r_list_free ( reg -> allregs )	218:1:5568:5594	5047905	16	True				
ANR	5048006	CallExpression	r_list_free ( reg -> allregs )		5047905	0					
ANR	5048007	Callee	r_list_free		5047905	0					
ANR	5048008	Identifier	r_list_free		5047905	0					
ANR	5048009	ArgumentList	reg -> allregs		5047905	1					
ANR	5048010	Argument	reg -> allregs		5047905	0					
ANR	5048011	PtrMemberAccess	reg -> allregs		5047905	0					
ANR	5048012	Identifier	reg		5047905	0					
ANR	5048013	Identifier	allregs		5047905	1					
ANR	5048014	ExpressionStatement	reg -> allregs = all	219:1:5597:5615	5047905	17	True				
ANR	5048015	AssignmentExpression	reg -> allregs = all		5047905	0		=			
ANR	5048016	PtrMemberAccess	reg -> allregs		5047905	0					
ANR	5048017	Identifier	reg		5047905	0					
ANR	5048018	Identifier	allregs		5047905	1					
ANR	5048019	Identifier	all		5047905	1					
ANR	5048020	ReturnType	R_API void		5047905	1					
ANR	5048021	Identifier	r_reg_reindex		5047905	2					
ANR	5048022	ParameterList	RReg * reg		5047905	3					
ANR	5048023	Parameter	RReg * reg	203:25:5233:5241	5047905	0	True				
ANR	5048024	ParameterType	RReg *		5047905	0					
ANR	5048025	Identifier	reg		5047905	1					
ANR	5048026	CFGEntryNode	ENTRY		5047905		True				
ANR	5048027	CFGExitNode	EXIT		5047905		True				
ANR	5048028	Symbol	all		5047905						
ANR	5048029	Symbol	NULL		5047905						
ANR	5048030	Symbol	r_list_newf		5047905						
ANR	5048031	Symbol	reg -> allregs		5047905						
ANR	5048032	Symbol	index		5047905						
ANR	5048033	Symbol	i		5047905						
ANR	5048034	Symbol	iter		5047905						
ANR	5048035	Symbol	R_REG_TYPE_LAST		5047905						
ANR	5048036	Symbol	r		5047905						
ANR	5048037	Symbol	reg		5047905						
ANR	5048038	Symbol	regcmp		5047905						
ANR	5048039	Symbol	* r		5047905						
ANR	5048040	Symbol	r -> index		5047905						
ANR	5048041	Symbol	* reg		5047905						
ANR	5048042	Function	r_reg_index_get	222:0:5620:5889							
ANR	5048043	FunctionDef	"r_reg_index_get (RReg * reg , int idx)"		5048042	0					
ANR	5048044	CompoundStatement		222:52:5672:5889	5048042	0					
ANR	5048045	IdentifierDeclStatement	RRegItem * r ;	223:1:5675:5686	5048042	0	True				
ANR	5048046	IdentifierDecl	* r		5048042	0					
ANR	5048047	IdentifierDeclType	RRegItem *		5048042	0					
ANR	5048048	Identifier	r		5048042	1					
ANR	5048049	IdentifierDeclStatement	RListIter * iter ;	224:1:5689:5704	5048042	1	True				
ANR	5048050	IdentifierDecl	* iter		5048042	0					
ANR	5048051	IdentifierDeclType	RListIter *		5048042	0					
ANR	5048052	Identifier	iter		5048042	1					
ANR	5048053	IfStatement	if ( idx < 0 )		5048042	2					
ANR	5048054	Condition	idx < 0	225:5:5711:5717	5048042	0	True				
ANR	5048055	RelationalExpression	idx < 0		5048042	0		<			
ANR	5048056	Identifier	idx		5048042	0					
ANR	5048057	PrimaryExpression	0		5048042	1					
ANR	5048058	CompoundStatement		4:14:47:47	5048042	1					
ANR	5048059	ReturnStatement	return NULL ;	226:2:5724:5735	5048042	0	True				
ANR	5048060	Identifier	NULL		5048042	0					
ANR	5048061	IfStatement	if ( ! reg -> allregs )		5048042	3					
ANR	5048062	Condition	! reg -> allregs	228:5:5745:5757	5048042	0	True				
ANR	5048063	UnaryOperationExpression	! reg -> allregs		5048042	0					
ANR	5048064	UnaryOperator	!		5048042	0					
ANR	5048065	PtrMemberAccess	reg -> allregs		5048042	1					
ANR	5048066	Identifier	reg		5048042	0					
ANR	5048067	Identifier	allregs		5048042	1					
ANR	5048068	CompoundStatement		7:20:87:87	5048042	1					
ANR	5048069	ExpressionStatement	r_reg_reindex ( reg )	229:2:5764:5783	5048042	0	True				
ANR	5048070	CallExpression	r_reg_reindex ( reg )		5048042	0					
ANR	5048071	Callee	r_reg_reindex		5048042	0					
ANR	5048072	Identifier	r_reg_reindex		5048042	0					
ANR	5048073	ArgumentList	reg		5048042	1					
ANR	5048074	Argument	reg		5048042	0					
ANR	5048075	Identifier	reg		5048042	0					
ANR	5048076	Statement	r_list_foreach	231:1:5789:5802	5048042	4	True				
ANR	5048077	Statement	(	231:16:5804:5804	5048042	5	True				
ANR	5048078	Statement	reg	231:17:5805:5807	5048042	6	True				
ANR	5048079	Statement	->	231:20:5808:5809	5048042	7	True				
ANR	5048080	Statement	allregs	231:22:5810:5816	5048042	8	True				
ANR	5048081	Statement	","	231:29:5817:5817	5048042	9	True				
ANR	5048082	Statement	iter	231:31:5819:5822	5048042	10	True				
ANR	5048083	Statement	","	231:35:5823:5823	5048042	11	True				
ANR	5048084	Statement	r	231:37:5825:5825	5048042	12	True				
ANR	5048085	Statement	)	231:38:5826:5826	5048042	13	True				
ANR	5048086	CompoundStatement		10:40:155:155	5048042	14					
ANR	5048087	IfStatement	if ( r -> index == idx )		5048042	0					
ANR	5048088	Condition	r -> index == idx	232:6:5836:5850	5048042	0	True				
ANR	5048089	EqualityExpression	r -> index == idx		5048042	0		==			
ANR	5048090	PtrMemberAccess	r -> index		5048042	0					
ANR	5048091	Identifier	r		5048042	0					
ANR	5048092	Identifier	index		5048042	1					
ANR	5048093	Identifier	idx		5048042	1					
ANR	5048094	CompoundStatement		11:23:180:180	5048042	1					
ANR	5048095	ReturnStatement	return r ;	233:3:5858:5866	5048042	0	True				
ANR	5048096	Identifier	r		5048042	0					
ANR	5048097	ReturnStatement	return NULL ;	236:1:5876:5887	5048042	15	True				
ANR	5048098	Identifier	NULL		5048042	0					
ANR	5048099	ReturnType	R_API RRegItem *		5048042	1					
ANR	5048100	Identifier	r_reg_index_get		5048042	2					
ANR	5048101	ParameterList	"RReg * reg , int idx"		5048042	3					
ANR	5048102	Parameter	RReg * reg	222:32:5652:5660	5048042	0	True				
ANR	5048103	ParameterType	RReg *		5048042	0					
ANR	5048104	Identifier	reg		5048042	1					
ANR	5048105	Parameter	int idx	222:43:5663:5669	5048042	1	True				
ANR	5048106	ParameterType	int		5048042	0					
ANR	5048107	Identifier	idx		5048042	1					
ANR	5048108	CFGEntryNode	ENTRY		5048042		True				
ANR	5048109	CFGExitNode	EXIT		5048042		True				
ANR	5048110	Symbol	r		5048042						
ANR	5048111	Symbol	NULL		5048042						
ANR	5048112	Symbol	reg		5048042						
ANR	5048113	Symbol	reg -> allregs		5048042						
ANR	5048114	Symbol	iter		5048042						
ANR	5048115	Symbol	idx		5048042						
ANR	5048116	Symbol	* r		5048042						
ANR	5048117	Symbol	* reg		5048042						
ANR	5048118	Symbol	r -> index		5048042						
ANR	5048119	Function	r_reg_free	239:0:5892:5992							
ANR	5048120	FunctionDef	r_reg_free (RReg * reg)		5048119	0					
ANR	5048121	CompoundStatement		239:33:5925:5992	5048119	0					
ANR	5048122	IfStatement	if ( reg )		5048119	0					
ANR	5048123	Condition	reg	240:5:5932:5934	5048119	0	True				
ANR	5048124	Identifier	reg		5048119	0					
ANR	5048125	CompoundStatement		2:10:11:11	5048119	1					
ANR	5048126	ExpressionStatement	"r_reg_free_internal ( reg , false )"	241:2:5941:5973	5048119	0	True				
ANR	5048127	CallExpression	"r_reg_free_internal ( reg , false )"		5048119	0					
ANR	5048128	Callee	r_reg_free_internal		5048119	0					
ANR	5048129	Identifier	r_reg_free_internal		5048119	0					
ANR	5048130	ArgumentList	reg		5048119	1					
ANR	5048131	Argument	reg		5048119	0					
ANR	5048132	Identifier	reg		5048119	0					
ANR	5048133	Argument	false		5048119	1					
ANR	5048134	Identifier	false		5048119	0					
ANR	5048135	ExpressionStatement	free ( reg )	242:2:5977:5987	5048119	1	True				
ANR	5048136	CallExpression	free ( reg )		5048119	0					
ANR	5048137	Callee	free		5048119	0					
ANR	5048138	Identifier	free		5048119	0					
ANR	5048139	ArgumentList	reg		5048119	1					
ANR	5048140	Argument	reg		5048119	0					
ANR	5048141	Identifier	reg		5048119	0					
ANR	5048142	ReturnType	R_API void		5048119	1					
ANR	5048143	Identifier	r_reg_free		5048119	2					
ANR	5048144	ParameterList	RReg * reg		5048119	3					
ANR	5048145	Parameter	RReg * reg	239:22:5914:5922	5048119	0	True				
ANR	5048146	ParameterType	RReg *		5048119	0					
ANR	5048147	Identifier	reg		5048119	1					
ANR	5048148	CFGEntryNode	ENTRY		5048119		True				
ANR	5048149	CFGExitNode	EXIT		5048119		True				
ANR	5048150	Symbol	reg		5048119						
ANR	5048151	Symbol	false		5048119						
ANR	5048152	Function	r_reg_new	246:0:5995:6582							
ANR	5048153	FunctionDef	r_reg_new ()		5048152	0					
ANR	5048154	CompoundStatement		246:24:6019:6582	5048152	0					
ANR	5048155	IdentifierDeclStatement	RRegArena * arena ;	247:1:6022:6038	5048152	0	True				
ANR	5048156	IdentifierDecl	* arena		5048152	0					
ANR	5048157	IdentifierDeclType	RRegArena *		5048152	0					
ANR	5048158	Identifier	arena		5048152	1					
ANR	5048159	IdentifierDeclStatement	RReg * reg = R_NEW0 ( RReg ) ;	248:1:6041:6066	5048152	1	True				
ANR	5048160	IdentifierDecl	* reg = R_NEW0 ( RReg )		5048152	0					
ANR	5048161	IdentifierDeclType	RReg *		5048152	0					
ANR	5048162	Identifier	reg		5048152	1					
ANR	5048163	AssignmentExpression	* reg = R_NEW0 ( RReg )		5048152	2		=			
ANR	5048164	Identifier	reg		5048152	0					
ANR	5048165	CallExpression	R_NEW0 ( RReg )		5048152	1					
ANR	5048166	Callee	R_NEW0		5048152	0					
ANR	5048167	Identifier	R_NEW0		5048152	0					
ANR	5048168	ArgumentList	RReg		5048152	1					
ANR	5048169	Argument	RReg		5048152	0					
ANR	5048170	Identifier	RReg		5048152	0					
ANR	5048171	IdentifierDeclStatement	int i ;	249:1:6069:6074	5048152	2	True				
ANR	5048172	IdentifierDecl	i		5048152	0					
ANR	5048173	IdentifierDeclType	int		5048152	0					
ANR	5048174	Identifier	i		5048152	1					
ANR	5048175	IfStatement	if ( ! reg )		5048152	3					
ANR	5048176	Condition	! reg	250:5:6081:6084	5048152	0	True				
ANR	5048177	UnaryOperationExpression	! reg		5048152	0					
ANR	5048178	UnaryOperator	!		5048152	0					
ANR	5048179	Identifier	reg		5048152	1					
ANR	5048180	CompoundStatement		5:11:67:67	5048152	1					
ANR	5048181	ReturnStatement	return NULL ;	251:2:6091:6102	5048152	0	True				
ANR	5048182	Identifier	NULL		5048152	0					
ANR	5048183	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5048152	4					
ANR	5048184	ForInit	i = 0 ;	253:6:6113:6118	5048152	0	True				
ANR	5048185	AssignmentExpression	i = 0		5048152	0		=			
ANR	5048186	Identifier	i		5048152	0					
ANR	5048187	PrimaryExpression	0		5048152	1					
ANR	5048188	Condition	i < R_REG_TYPE_LAST	253:13:6120:6138	5048152	1	True				
ANR	5048189	RelationalExpression	i < R_REG_TYPE_LAST		5048152	0		<			
ANR	5048190	Identifier	i		5048152	0					
ANR	5048191	Identifier	R_REG_TYPE_LAST		5048152	1					
ANR	5048192	PostIncDecOperationExpression	i ++	253:34:6141:6143	5048152	2	True				
ANR	5048193	Identifier	i		5048152	0					
ANR	5048194	IncDec	++		5048152	1					
ANR	5048195	CompoundStatement		8:39:126:126	5048152	3					
ANR	5048196	ExpressionStatement	arena = r_reg_arena_new ( 0 )	254:2:6150:6177	5048152	0	True				
ANR	5048197	AssignmentExpression	arena = r_reg_arena_new ( 0 )		5048152	0		=			
ANR	5048198	Identifier	arena		5048152	0					
ANR	5048199	CallExpression	r_reg_arena_new ( 0 )		5048152	1					
ANR	5048200	Callee	r_reg_arena_new		5048152	0					
ANR	5048201	Identifier	r_reg_arena_new		5048152	0					
ANR	5048202	ArgumentList	0		5048152	1					
ANR	5048203	Argument	0		5048152	0					
ANR	5048204	PrimaryExpression	0		5048152	0					
ANR	5048205	IfStatement	if ( ! arena )		5048152	1					
ANR	5048206	Condition	! arena	255:6:6185:6190	5048152	0	True				
ANR	5048207	UnaryOperationExpression	! arena		5048152	0					
ANR	5048208	UnaryOperator	!		5048152	0					
ANR	5048209	Identifier	arena		5048152	1					
ANR	5048210	CompoundStatement		10:14:173:173	5048152	1					
ANR	5048211	ExpressionStatement	free ( reg )	256:3:6198:6208	5048152	0	True				
ANR	5048212	CallExpression	free ( reg )		5048152	0					
ANR	5048213	Callee	free		5048152	0					
ANR	5048214	Identifier	free		5048152	0					
ANR	5048215	ArgumentList	reg		5048152	1					
ANR	5048216	Argument	reg		5048152	0					
ANR	5048217	Identifier	reg		5048152	0					
ANR	5048218	ReturnStatement	return NULL ;	257:3:6213:6224	5048152	1	True				
ANR	5048219	Identifier	NULL		5048152	0					
ANR	5048220	ExpressionStatement	reg -> regset [ i ] . pool = r_list_newf ( ( RListFree ) r_reg_arena_free )	259:2:6232:6295	5048152	2	True				
ANR	5048221	AssignmentExpression	reg -> regset [ i ] . pool = r_list_newf ( ( RListFree ) r_reg_arena_free )		5048152	0		=			
ANR	5048222	MemberAccess	reg -> regset [ i ] . pool		5048152	0					
ANR	5048223	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048224	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048225	Identifier	reg		5048152	0					
ANR	5048226	Identifier	regset		5048152	1					
ANR	5048227	Identifier	i		5048152	1					
ANR	5048228	Identifier	pool		5048152	1					
ANR	5048229	CallExpression	r_list_newf ( ( RListFree ) r_reg_arena_free )		5048152	1					
ANR	5048230	Callee	r_list_newf		5048152	0					
ANR	5048231	Identifier	r_list_newf		5048152	0					
ANR	5048232	ArgumentList	( RListFree ) r_reg_arena_free		5048152	1					
ANR	5048233	Argument	( RListFree ) r_reg_arena_free		5048152	0					
ANR	5048234	CastExpression	( RListFree ) r_reg_arena_free		5048152	0					
ANR	5048235	CastTarget	RListFree		5048152	0					
ANR	5048236	Identifier	r_reg_arena_free		5048152	1					
ANR	5048237	ExpressionStatement	reg -> regset [ i ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )	260:2:6299:6361	5048152	3	True				
ANR	5048238	AssignmentExpression	reg -> regset [ i ] . regs = r_list_newf ( ( RListFree ) r_reg_item_free )		5048152	0		=			
ANR	5048239	MemberAccess	reg -> regset [ i ] . regs		5048152	0					
ANR	5048240	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048241	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048242	Identifier	reg		5048152	0					
ANR	5048243	Identifier	regset		5048152	1					
ANR	5048244	Identifier	i		5048152	1					
ANR	5048245	Identifier	regs		5048152	1					
ANR	5048246	CallExpression	r_list_newf ( ( RListFree ) r_reg_item_free )		5048152	1					
ANR	5048247	Callee	r_list_newf		5048152	0					
ANR	5048248	Identifier	r_list_newf		5048152	0					
ANR	5048249	ArgumentList	( RListFree ) r_reg_item_free		5048152	1					
ANR	5048250	Argument	( RListFree ) r_reg_item_free		5048152	0					
ANR	5048251	CastExpression	( RListFree ) r_reg_item_free		5048152	0					
ANR	5048252	CastTarget	RListFree		5048152	0					
ANR	5048253	Identifier	r_reg_item_free		5048152	1					
ANR	5048254	ExpressionStatement	"r_list_push ( reg -> regset [ i ] . pool , arena )"	261:2:6365:6405	5048152	4	True				
ANR	5048255	CallExpression	"r_list_push ( reg -> regset [ i ] . pool , arena )"		5048152	0					
ANR	5048256	Callee	r_list_push		5048152	0					
ANR	5048257	Identifier	r_list_push		5048152	0					
ANR	5048258	ArgumentList	reg -> regset [ i ] . pool		5048152	1					
ANR	5048259	Argument	reg -> regset [ i ] . pool		5048152	0					
ANR	5048260	MemberAccess	reg -> regset [ i ] . pool		5048152	0					
ANR	5048261	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048262	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048263	Identifier	reg		5048152	0					
ANR	5048264	Identifier	regset		5048152	1					
ANR	5048265	Identifier	i		5048152	1					
ANR	5048266	Identifier	pool		5048152	1					
ANR	5048267	Argument	arena		5048152	1					
ANR	5048268	Identifier	arena		5048152	0					
ANR	5048269	ExpressionStatement	reg -> regset [ i ] . arena = arena	262:2:6409:6437	5048152	5	True				
ANR	5048270	AssignmentExpression	reg -> regset [ i ] . arena = arena		5048152	0		=			
ANR	5048271	MemberAccess	reg -> regset [ i ] . arena		5048152	0					
ANR	5048272	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048273	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048274	Identifier	reg		5048152	0					
ANR	5048275	Identifier	regset		5048152	1					
ANR	5048276	Identifier	i		5048152	1					
ANR	5048277	Identifier	arena		5048152	1					
ANR	5048278	Identifier	arena		5048152	1					
ANR	5048279	ExpressionStatement	r_reg_arena_push ( reg )	264:1:6443:6465	5048152	5	True				
ANR	5048280	CallExpression	r_reg_arena_push ( reg )		5048152	0					
ANR	5048281	Callee	r_reg_arena_push		5048152	0					
ANR	5048282	Identifier	r_reg_arena_push		5048152	0					
ANR	5048283	ArgumentList	reg		5048152	1					
ANR	5048284	Argument	reg		5048152	0					
ANR	5048285	Identifier	reg		5048152	0					
ANR	5048286	ForStatement	for ( i = 0 ; i < R_REG_TYPE_LAST ; i ++ )		5048152	6					
ANR	5048287	ForInit	i = 0 ;	265:6:6473:6478	5048152	0	True				
ANR	5048288	AssignmentExpression	i = 0		5048152	0		=			
ANR	5048289	Identifier	i		5048152	0					
ANR	5048290	PrimaryExpression	0		5048152	1					
ANR	5048291	Condition	i < R_REG_TYPE_LAST	265:13:6480:6498	5048152	1	True				
ANR	5048292	RelationalExpression	i < R_REG_TYPE_LAST		5048152	0		<			
ANR	5048293	Identifier	i		5048152	0					
ANR	5048294	Identifier	R_REG_TYPE_LAST		5048152	1					
ANR	5048295	PostIncDecOperationExpression	i ++	265:34:6501:6503	5048152	2	True				
ANR	5048296	Identifier	i		5048152	0					
ANR	5048297	IncDec	++		5048152	1					
ANR	5048298	CompoundStatement		20:39:486:486	5048152	3					
ANR	5048299	ExpressionStatement	reg -> regset [ i ] . cur = r_list_tail ( reg -> regset [ i ] . pool )	266:2:6510:6564	5048152	0	True				
ANR	5048300	AssignmentExpression	reg -> regset [ i ] . cur = r_list_tail ( reg -> regset [ i ] . pool )		5048152	0		=			
ANR	5048301	MemberAccess	reg -> regset [ i ] . cur		5048152	0					
ANR	5048302	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048303	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048304	Identifier	reg		5048152	0					
ANR	5048305	Identifier	regset		5048152	1					
ANR	5048306	Identifier	i		5048152	1					
ANR	5048307	Identifier	cur		5048152	1					
ANR	5048308	CallExpression	r_list_tail ( reg -> regset [ i ] . pool )		5048152	1					
ANR	5048309	Callee	r_list_tail		5048152	0					
ANR	5048310	Identifier	r_list_tail		5048152	0					
ANR	5048311	ArgumentList	reg -> regset [ i ] . pool		5048152	1					
ANR	5048312	Argument	reg -> regset [ i ] . pool		5048152	0					
ANR	5048313	MemberAccess	reg -> regset [ i ] . pool		5048152	0					
ANR	5048314	ArrayIndexing	reg -> regset [ i ]		5048152	0					
ANR	5048315	PtrMemberAccess	reg -> regset		5048152	0					
ANR	5048316	Identifier	reg		5048152	0					
ANR	5048317	Identifier	regset		5048152	1					
ANR	5048318	Identifier	i		5048152	1					
ANR	5048319	Identifier	pool		5048152	1					
ANR	5048320	ReturnStatement	return reg ;	268:1:6570:6580	5048152	7	True				
ANR	5048321	Identifier	reg		5048152	0					
ANR	5048322	ReturnType	R_API RReg *		5048152	1					
ANR	5048323	Identifier	r_reg_new		5048152	2					
ANR	5048324	ParameterList			5048152	3					
ANR	5048325	CFGEntryNode	ENTRY		5048152		True				
ANR	5048326	CFGExitNode	EXIT		5048152		True				
ANR	5048327	Symbol	* reg -> regset		5048152						
ANR	5048328	Symbol	NULL		5048152						
ANR	5048329	Symbol	RReg		5048152						
ANR	5048330	Symbol	r_list_newf		5048152						
ANR	5048331	Symbol	reg -> regset [ i ] . cur		5048152						
ANR	5048332	Symbol	r_list_tail		5048152						
ANR	5048333	Symbol	* * reg		5048152						
ANR	5048334	Symbol	i		5048152						
ANR	5048335	Symbol	R_REG_TYPE_LAST		5048152						
ANR	5048336	Symbol	r_reg_arena_new		5048152						
ANR	5048337	Symbol	arena		5048152						
ANR	5048338	Symbol	r_reg_arena_free		5048152						
ANR	5048339	Symbol	reg -> regset		5048152						
ANR	5048340	Symbol	R_NEW0		5048152						
ANR	5048341	Symbol	r_reg_item_free		5048152						
ANR	5048342	Symbol	* i		5048152						
ANR	5048343	Symbol	reg		5048152						
ANR	5048344	Symbol	reg -> regset [ i ] . regs		5048152						
ANR	5048345	Symbol	* reg		5048152						
ANR	5048346	Symbol	reg -> regset [ i ] . arena		5048152						
ANR	5048347	Symbol	reg -> regset [ i ] . pool		5048152						
ANR	5048348	Function	r_reg_is_readonly	271:0:6585:6851							
ANR	5048349	FunctionDef	"r_reg_is_readonly (RReg * reg , RRegItem * item)"		5048348	0					
ANR	5048350	CompoundStatement		271:56:6641:6851	5048348	0					
ANR	5048351	IdentifierDeclStatement	const char * name ;	272:1:6644:6660	5048348	0	True				
ANR	5048352	IdentifierDecl	* name		5048348	0					
ANR	5048353	IdentifierDeclType	const char *		5048348	0					
ANR	5048354	Identifier	name		5048348	1					
ANR	5048355	IdentifierDeclStatement	RListIter * iter ;	273:1:6663:6678	5048348	1	True				
ANR	5048356	IdentifierDecl	* iter		5048348	0					
ANR	5048357	IdentifierDeclType	RListIter *		5048348	0					
ANR	5048358	Identifier	iter		5048348	1					
ANR	5048359	IfStatement	if ( ! reg -> roregs )		5048348	2					
ANR	5048360	Condition	! reg -> roregs	274:5:6685:6696	5048348	0	True				
ANR	5048361	UnaryOperationExpression	! reg -> roregs		5048348	0					
ANR	5048362	UnaryOperator	!		5048348	0					
ANR	5048363	PtrMemberAccess	reg -> roregs		5048348	1					
ANR	5048364	Identifier	reg		5048348	0					
ANR	5048365	Identifier	roregs		5048348	1					
ANR	5048366	CompoundStatement		4:19:57:57	5048348	1					
ANR	5048367	ReturnStatement	return false ;	275:2:6703:6715	5048348	0	True				
ANR	5048368	Identifier	false		5048348	0					
ANR	5048369	Statement	r_list_foreach	278:1:6734:6747	5048348	3	True				
ANR	5048370	Statement	(	278:16:6749:6749	5048348	4	True				
ANR	5048371	Statement	reg	278:17:6750:6752	5048348	5	True				
ANR	5048372	Statement	->	278:20:6753:6754	5048348	6	True				
ANR	5048373	Statement	roregs	278:22:6755:6760	5048348	7	True				
ANR	5048374	Statement	","	278:28:6761:6761	5048348	8	True				
ANR	5048375	Statement	iter	278:30:6763:6766	5048348	9	True				
ANR	5048376	Statement	","	278:34:6767:6767	5048348	10	True				
ANR	5048377	Statement	name	278:36:6769:6772	5048348	11	True				
ANR	5048378	Statement	)	278:40:6773:6773	5048348	12	True				
ANR	5048379	CompoundStatement		8:42:133:133	5048348	13					
ANR	5048380	IfStatement	"if ( ! strcmp ( item -> name , name ) )"		5048348	0					
ANR	5048381	Condition	"! strcmp ( item -> name , name )"	279:6:6783:6808	5048348	0	True				
ANR	5048382	UnaryOperationExpression	"! strcmp ( item -> name , name )"		5048348	0					
ANR	5048383	UnaryOperator	!		5048348	0					
ANR	5048384	CallExpression	"strcmp ( item -> name , name )"		5048348	1					
ANR	5048385	Callee	strcmp		5048348	0					
ANR	5048386	Identifier	strcmp		5048348	0					
ANR	5048387	ArgumentList	item -> name		5048348	1					
ANR	5048388	Argument	item -> name		5048348	0					
ANR	5048389	PtrMemberAccess	item -> name		5048348	0					
ANR	5048390	Identifier	item		5048348	0					
ANR	5048391	Identifier	name		5048348	1					
ANR	5048392	Argument	name		5048348	1					
ANR	5048393	Identifier	name		5048348	0					
ANR	5048394	CompoundStatement		9:34:169:169	5048348	1					
ANR	5048395	ReturnStatement	return true ;	280:3:6816:6827	5048348	0	True				
ANR	5048396	Identifier	true		5048348	0					
ANR	5048397	ReturnStatement	return false ;	283:1:6837:6849	5048348	14	True				
ANR	5048398	Identifier	false		5048348	0					
ANR	5048399	ReturnType	R_API bool		5048348	1					
ANR	5048400	Identifier	r_reg_is_readonly		5048348	2					
ANR	5048401	ParameterList	"RReg * reg , RRegItem * item"		5048348	3					
ANR	5048402	Parameter	RReg * reg	271:29:6614:6622	5048348	0	True				
ANR	5048403	ParameterType	RReg *		5048348	0					
ANR	5048404	Identifier	reg		5048348	1					
ANR	5048405	Parameter	RRegItem * item	271:40:6625:6638	5048348	1	True				
ANR	5048406	ParameterType	RRegItem *		5048348	0					
ANR	5048407	Identifier	item		5048348	1					
ANR	5048408	CFGEntryNode	ENTRY		5048348		True				
ANR	5048409	CFGExitNode	EXIT		5048348		True				
ANR	5048410	Symbol	strcmp		5048348						
ANR	5048411	Symbol	item		5048348						
ANR	5048412	Symbol	reg		5048348						
ANR	5048413	Symbol	* item		5048348						
ANR	5048414	Symbol	item -> name		5048348						
ANR	5048415	Symbol	name		5048348						
ANR	5048416	Symbol	false		5048348						
ANR	5048417	Symbol	true		5048348						
ANR	5048418	Symbol	iter		5048348						
ANR	5048419	Symbol	reg -> roregs		5048348						
ANR	5048420	Symbol	* reg		5048348						
ANR	5048421	Function	r_reg_setv	286:0:6854:6980							
ANR	5048422	FunctionDef	"r_reg_setv (RReg * reg , const char * name , ut64 val)"		5048421	0					
ANR	5048423	CompoundStatement		286:61:6915:6980	5048421	0					
ANR	5048424	ReturnStatement	"return r_reg_set_value ( reg , r_reg_get ( reg , name , - 1 ) , val ) ;"	287:1:6918:6978	5048421	0	True				
ANR	5048425	CallExpression	"r_reg_set_value ( reg , r_reg_get ( reg , name , - 1 ) , val )"		5048421	0					
ANR	5048426	Callee	r_reg_set_value		5048421	0					
ANR	5048427	Identifier	r_reg_set_value		5048421	0					
ANR	5048428	ArgumentList	reg		5048421	1					
ANR	5048429	Argument	reg		5048421	0					
ANR	5048430	Identifier	reg		5048421	0					
ANR	5048431	Argument	"r_reg_get ( reg , name , - 1 )"		5048421	1					
ANR	5048432	CallExpression	"r_reg_get ( reg , name , - 1 )"		5048421	0					
ANR	5048433	Callee	r_reg_get		5048421	0					
ANR	5048434	Identifier	r_reg_get		5048421	0					
ANR	5048435	ArgumentList	reg		5048421	1					
ANR	5048436	Argument	reg		5048421	0					
ANR	5048437	Identifier	reg		5048421	0					
ANR	5048438	Argument	name		5048421	1					
ANR	5048439	Identifier	name		5048421	0					
ANR	5048440	Argument	- 1		5048421	2					
ANR	5048441	UnaryOperationExpression	- 1		5048421	0					
ANR	5048442	UnaryOperator	-		5048421	0					
ANR	5048443	PrimaryExpression	1		5048421	1					
ANR	5048444	Argument	val		5048421	2					
ANR	5048445	Identifier	val		5048421	0					
ANR	5048446	ReturnType	R_API ut64		5048421	1					
ANR	5048447	Identifier	r_reg_setv		5048421	2					
ANR	5048448	ParameterList	"RReg * reg , const char * name , ut64 val"		5048421	3					
ANR	5048449	Parameter	RReg * reg	286:22:6876:6884	5048421	0	True				
ANR	5048450	ParameterType	RReg *		5048421	0					
ANR	5048451	Identifier	reg		5048421	1					
ANR	5048452	Parameter	const char * name	286:33:6887:6902	5048421	1	True				
ANR	5048453	ParameterType	const char *		5048421	0					
ANR	5048454	Identifier	name		5048421	1					
ANR	5048455	Parameter	ut64 val	286:51:6905:6912	5048421	2	True				
ANR	5048456	ParameterType	ut64		5048421	0					
ANR	5048457	Identifier	val		5048421	1					
ANR	5048458	CFGEntryNode	ENTRY		5048421		True				
ANR	5048459	CFGExitNode	EXIT		5048421		True				
ANR	5048460	Symbol	val		5048421						
ANR	5048461	Symbol	reg		5048421						
ANR	5048462	Symbol	name		5048421						
ANR	5048463	Symbol	r_reg_set_value		5048421						
ANR	5048464	Symbol	r_reg_get		5048421						
ANR	5048465	Function	r_reg_getv	290:0:6983:7094							
ANR	5048466	FunctionDef	"r_reg_getv (RReg * reg , const char * name)"		5048465	0					
ANR	5048467	CompoundStatement		290:51:7034:7094	5048465	0					
ANR	5048468	ReturnStatement	"return r_reg_get_value ( reg , r_reg_get ( reg , name , - 1 ) ) ;"	291:1:7037:7092	5048465	0	True				
ANR	5048469	CallExpression	"r_reg_get_value ( reg , r_reg_get ( reg , name , - 1 ) )"		5048465	0					
ANR	5048470	Callee	r_reg_get_value		5048465	0					
ANR	5048471	Identifier	r_reg_get_value		5048465	0					
ANR	5048472	ArgumentList	reg		5048465	1					
ANR	5048473	Argument	reg		5048465	0					
ANR	5048474	Identifier	reg		5048465	0					
ANR	5048475	Argument	"r_reg_get ( reg , name , - 1 )"		5048465	1					
ANR	5048476	CallExpression	"r_reg_get ( reg , name , - 1 )"		5048465	0					
ANR	5048477	Callee	r_reg_get		5048465	0					
ANR	5048478	Identifier	r_reg_get		5048465	0					
ANR	5048479	ArgumentList	reg		5048465	1					
ANR	5048480	Argument	reg		5048465	0					
ANR	5048481	Identifier	reg		5048465	0					
ANR	5048482	Argument	name		5048465	1					
ANR	5048483	Identifier	name		5048465	0					
ANR	5048484	Argument	- 1		5048465	2					
ANR	5048485	UnaryOperationExpression	- 1		5048465	0					
ANR	5048486	UnaryOperator	-		5048465	0					
ANR	5048487	PrimaryExpression	1		5048465	1					
ANR	5048488	ReturnType	R_API ut64		5048465	1					
ANR	5048489	Identifier	r_reg_getv		5048465	2					
ANR	5048490	ParameterList	"RReg * reg , const char * name"		5048465	3					
ANR	5048491	Parameter	RReg * reg	290:22:7005:7013	5048465	0	True				
ANR	5048492	ParameterType	RReg *		5048465	0					
ANR	5048493	Identifier	reg		5048465	1					
ANR	5048494	Parameter	const char * name	290:33:7016:7031	5048465	1	True				
ANR	5048495	ParameterType	const char *		5048465	0					
ANR	5048496	Identifier	name		5048465	1					
ANR	5048497	CFGEntryNode	ENTRY		5048465		True				
ANR	5048498	CFGExitNode	EXIT		5048465		True				
ANR	5048499	Symbol	r_reg_get_value		5048465						
ANR	5048500	Symbol	reg		5048465						
ANR	5048501	Symbol	name		5048465						
ANR	5048502	Symbol	r_reg_get		5048465						
ANR	5048503	Function	r_reg_get	294:0:7097:7730							
ANR	5048504	FunctionDef	"r_reg_get (RReg * reg , const char * name , int type)"		5048503	0					
ANR	5048505	CompoundStatement		294:65:7162:7730	5048503	0					
ANR	5048506	IdentifierDeclStatement	"int i , e ;"	295:1:7165:7173	5048503	0	True				
ANR	5048507	IdentifierDecl	i		5048503	0					
ANR	5048508	IdentifierDeclType	int		5048503	0					
ANR	5048509	Identifier	i		5048503	1					
ANR	5048510	IdentifierDecl	e		5048503	1					
ANR	5048511	IdentifierDeclType	int		5048503	0					
ANR	5048512	Identifier	e		5048503	1					
ANR	5048513	ExpressionStatement	"r_return_val_if_fail ( reg && name , NULL )"	296:1:7176:7216	5048503	1	True				
ANR	5048514	CallExpression	"r_return_val_if_fail ( reg && name , NULL )"		5048503	0					
ANR	5048515	Callee	r_return_val_if_fail		5048503	0					
ANR	5048516	Identifier	r_return_val_if_fail		5048503	0					
ANR	5048517	ArgumentList	reg && name		5048503	1					
ANR	5048518	Argument	reg && name		5048503	0					
ANR	5048519	AndExpression	reg && name		5048503	0		&&			
ANR	5048520	Identifier	reg		5048503	0					
ANR	5048521	Identifier	name		5048503	1					
ANR	5048522	Argument	NULL		5048503	1					
ANR	5048523	Identifier	NULL		5048503	0					
ANR	5048524	IfStatement	if ( type == R_REG_TYPE_FLG )		5048503	2					
ANR	5048525	Condition	type == R_REG_TYPE_FLG	297:5:7223:7244	5048503	0	True				
ANR	5048526	EqualityExpression	type == R_REG_TYPE_FLG		5048503	0		==			
ANR	5048527	Identifier	type		5048503	0					
ANR	5048528	Identifier	R_REG_TYPE_FLG		5048503	1					
ANR	5048529	CompoundStatement		4:29:84:84	5048503	1					
ANR	5048530	ExpressionStatement	type = R_REG_TYPE_GPR	298:2:7251:7272	5048503	0	True				
ANR	5048531	AssignmentExpression	type = R_REG_TYPE_GPR		5048503	0		=			
ANR	5048532	Identifier	type		5048503	0					
ANR	5048533	Identifier	R_REG_TYPE_GPR		5048503	1					
ANR	5048534	IfStatement	if ( type == - 1 )		5048503	3					
ANR	5048535	Condition	type == - 1	300:5:7282:7291	5048503	0	True				
ANR	5048536	EqualityExpression	type == - 1		5048503	0		==			
ANR	5048537	Identifier	type		5048503	0					
ANR	5048538	UnaryOperationExpression	- 1		5048503	1					
ANR	5048539	UnaryOperator	-		5048503	0					
ANR	5048540	PrimaryExpression	1		5048503	1					
ANR	5048541	CompoundStatement		10:2:167:204	5048503	1					
ANR	5048542	ExpressionStatement	i = 0	301:2:7298:7303	5048503	0	True				
ANR	5048543	AssignmentExpression	i = 0		5048503	0		=			
ANR	5048544	Identifier	i		5048503	0					
ANR	5048545	PrimaryExpression	0		5048503	1					
ANR	5048546	ExpressionStatement	e = R_REG_TYPE_LAST	302:2:7307:7326	5048503	1	True				
ANR	5048547	AssignmentExpression	e = R_REG_TYPE_LAST		5048503	0		=			
ANR	5048548	Identifier	e		5048503	0					
ANR	5048549	Identifier	R_REG_TYPE_LAST		5048503	1					
ANR	5048550	IdentifierDeclStatement	int alias = r_reg_get_name_idx ( name ) ;	303:2:7330:7367	5048503	2	True				
ANR	5048551	IdentifierDecl	alias = r_reg_get_name_idx ( name )		5048503	0					
ANR	5048552	IdentifierDeclType	int		5048503	0					
ANR	5048553	Identifier	alias		5048503	1					
ANR	5048554	AssignmentExpression	alias = r_reg_get_name_idx ( name )		5048503	2		=			
ANR	5048555	Identifier	alias		5048503	0					
ANR	5048556	CallExpression	r_reg_get_name_idx ( name )		5048503	1					
ANR	5048557	Callee	r_reg_get_name_idx		5048503	0					
ANR	5048558	Identifier	r_reg_get_name_idx		5048503	0					
ANR	5048559	ArgumentList	name		5048503	1					
ANR	5048560	Argument	name		5048503	0					
ANR	5048561	Identifier	name		5048503	0					
ANR	5048562	IfStatement	if ( alias != - 1 )		5048503	3					
ANR	5048563	Condition	alias != - 1	304:6:7375:7385	5048503	0	True				
ANR	5048564	EqualityExpression	alias != - 1		5048503	0		!=			
ANR	5048565	Identifier	alias		5048503	0					
ANR	5048566	UnaryOperationExpression	- 1		5048503	1					
ANR	5048567	UnaryOperator	-		5048503	0					
ANR	5048568	PrimaryExpression	1		5048503	1					
ANR	5048569	CompoundStatement		12:3:230:277	5048503	1					
ANR	5048570	IdentifierDeclStatement	"const char * nname = r_reg_get_name ( reg , alias ) ;"	305:3:7393:7440	5048503	0	True				
ANR	5048571	IdentifierDecl	"* nname = r_reg_get_name ( reg , alias )"		5048503	0					
ANR	5048572	IdentifierDeclType	const char *		5048503	0					
ANR	5048573	Identifier	nname		5048503	1					
ANR	5048574	AssignmentExpression	"* nname = r_reg_get_name ( reg , alias )"		5048503	2		=			
ANR	5048575	Identifier	nname		5048503	0					
ANR	5048576	CallExpression	"r_reg_get_name ( reg , alias )"		5048503	1					
ANR	5048577	Callee	r_reg_get_name		5048503	0					
ANR	5048578	Identifier	r_reg_get_name		5048503	0					
ANR	5048579	ArgumentList	reg		5048503	1					
ANR	5048580	Argument	reg		5048503	0					
ANR	5048581	Identifier	reg		5048503	0					
ANR	5048582	Argument	alias		5048503	1					
ANR	5048583	Identifier	alias		5048503	0					
ANR	5048584	IfStatement	if ( nname )		5048503	1					
ANR	5048585	Condition	nname	306:7:7449:7453	5048503	0	True				
ANR	5048586	Identifier	nname		5048503	0					
ANR	5048587	CompoundStatement		13:14:293:293	5048503	1					
ANR	5048588	ExpressionStatement	name = nname	307:4:7462:7474	5048503	0	True				
ANR	5048589	AssignmentExpression	name = nname		5048503	0		=			
ANR	5048590	Identifier	name		5048503	0					
ANR	5048591	Identifier	nname		5048503	1					
ANR	5048592	ElseStatement	else		5048503	0					
ANR	5048593	CompoundStatement		17:8:330:330	5048503	0					
ANR	5048594	ExpressionStatement	i = type	311:2:7497:7505	5048503	0	True				
ANR	5048595	AssignmentExpression	i = type		5048503	0		=			
ANR	5048596	Identifier	i		5048503	0					
ANR	5048597	Identifier	type		5048503	1					
ANR	5048598	ExpressionStatement	e = type + 1	312:2:7509:7521	5048503	1	True				
ANR	5048599	AssignmentExpression	e = type + 1		5048503	0		=			
ANR	5048600	Identifier	e		5048503	0					
ANR	5048601	AdditiveExpression	type + 1		5048503	1		+			
ANR	5048602	Identifier	type		5048503	0					
ANR	5048603	PrimaryExpression	1		5048503	1					
ANR	5048604	ForStatement	for ( ; i < e ; i ++ )		5048503	4					
ANR	5048605	Condition	i < e	314:8:7534:7538	5048503	0	True				
ANR	5048606	RelationalExpression	i < e		5048503	0		<			
ANR	5048607	Identifier	i		5048503	0					
ANR	5048608	Identifier	e		5048503	1					
ANR	5048609	PostIncDecOperationExpression	i ++	314:15:7541:7543	5048503	1	True				
ANR	5048610	Identifier	i		5048503	0					
ANR	5048611	IncDec	++		5048503	1					
ANR	5048612	CompoundStatement		22:2:387:420	5048503	2					
ANR	5048613	IdentifierDeclStatement	HtPP * pp = reg -> regset [ i ] . ht_regs ;	315:2:7550:7583	5048503	0	True				
ANR	5048614	IdentifierDecl	* pp = reg -> regset [ i ] . ht_regs		5048503	0					
ANR	5048615	IdentifierDeclType	HtPP *		5048503	0					
ANR	5048616	Identifier	pp		5048503	1					
ANR	5048617	AssignmentExpression	* pp = reg -> regset [ i ] . ht_regs		5048503	2		=			
ANR	5048618	Identifier	pp		5048503	0					
ANR	5048619	MemberAccess	reg -> regset [ i ] . ht_regs		5048503	1					
ANR	5048620	ArrayIndexing	reg -> regset [ i ]		5048503	0					
ANR	5048621	PtrMemberAccess	reg -> regset		5048503	0					
ANR	5048622	Identifier	reg		5048503	0					
ANR	5048623	Identifier	regset		5048503	1					
ANR	5048624	Identifier	i		5048503	1					
ANR	5048625	Identifier	ht_regs		5048503	1					
ANR	5048626	IfStatement	if ( pp )		5048503	1					
ANR	5048627	Condition	pp	316:6:7591:7592	5048503	0	True				
ANR	5048628	Identifier	pp		5048503	0					
ANR	5048629	CompoundStatement		25:3:460:506	5048503	1					
ANR	5048630	IdentifierDeclStatement	bool found = false ;	317:3:7600:7618	5048503	0	True				
ANR	5048631	IdentifierDecl	found = false		5048503	0					
ANR	5048632	IdentifierDeclType	bool		5048503	0					
ANR	5048633	Identifier	found		5048503	1					
ANR	5048634	AssignmentExpression	found = false		5048503	2		=			
ANR	5048635	Identifier	false		5048503	0					
ANR	5048636	Identifier	false		5048503	1					
ANR	5048637	IdentifierDeclStatement	"RRegItem * item = ht_pp_find ( pp , name , & found ) ;"	318:3:7623:7669	5048503	1	True				
ANR	5048638	IdentifierDecl	"* item = ht_pp_find ( pp , name , & found )"		5048503	0					
ANR	5048639	IdentifierDeclType	RRegItem *		5048503	0					
ANR	5048640	Identifier	item		5048503	1					
ANR	5048641	AssignmentExpression	"* item = ht_pp_find ( pp , name , & found )"		5048503	2		=			
ANR	5048642	Identifier	item		5048503	0					
ANR	5048643	CallExpression	"ht_pp_find ( pp , name , & found )"		5048503	1					
ANR	5048644	Callee	ht_pp_find		5048503	0					
ANR	5048645	Identifier	ht_pp_find		5048503	0					
ANR	5048646	ArgumentList	pp		5048503	1					
ANR	5048647	Argument	pp		5048503	0					
ANR	5048648	Identifier	pp		5048503	0					
ANR	5048649	Argument	name		5048503	1					
ANR	5048650	Identifier	name		5048503	0					
ANR	5048651	Argument	& found		5048503	2					
ANR	5048652	UnaryOperationExpression	& found		5048503	0					
ANR	5048653	UnaryOperator	&		5048503	0					
ANR	5048654	Identifier	found		5048503	1					
ANR	5048655	IfStatement	if ( found )		5048503	2					
ANR	5048656	Condition	found	319:7:7678:7682	5048503	0	True				
ANR	5048657	Identifier	found		5048503	0					
ANR	5048658	CompoundStatement		26:14:522:522	5048503	1					
ANR	5048659	ReturnStatement	return item ;	320:4:7691:7702	5048503	0	True				
ANR	5048660	Identifier	item		5048503	0					
ANR	5048661	ReturnStatement	return NULL ;	324:1:7717:7728	5048503	5	True				
ANR	5048662	Identifier	NULL		5048503	0					
ANR	5048663	ReturnType	R_API RRegItem *		5048503	1					
ANR	5048664	Identifier	r_reg_get		5048503	2					
ANR	5048665	ParameterList	"RReg * reg , const char * name , int type"		5048503	3					
ANR	5048666	Parameter	RReg * reg	294:26:7123:7131	5048503	0	True				
ANR	5048667	ParameterType	RReg *		5048503	0					
ANR	5048668	Identifier	reg		5048503	1					
ANR	5048669	Parameter	const char * name	294:37:7134:7149	5048503	1	True				
ANR	5048670	ParameterType	const char *		5048503	0					
ANR	5048671	Identifier	name		5048503	1					
ANR	5048672	Parameter	int type	294:55:7152:7159	5048503	2	True				
ANR	5048673	ParameterType	int		5048503	0					
ANR	5048674	Identifier	type		5048503	1					
ANR	5048675	CFGEntryNode	ENTRY		5048503		True				
ANR	5048676	CFGExitNode	EXIT		5048503		True				
ANR	5048677	Symbol	pp		5048503						
ANR	5048678	Symbol	type		5048503						
ANR	5048679	Symbol	reg -> regset [ i ] . ht_regs		5048503						
ANR	5048680	Symbol	ht_pp_find		5048503						
ANR	5048681	Symbol	reg -> regset		5048503						
ANR	5048682	Symbol	& found		5048503						
ANR	5048683	Symbol	found		5048503						
ANR	5048684	Symbol	reg		5048503						
ANR	5048685	Symbol	R_REG_TYPE_FLG		5048503						
ANR	5048686	Symbol	alias		5048503						
ANR	5048687	Symbol	R_REG_TYPE_GPR		5048503						
ANR	5048688	Symbol	* reg -> regset		5048503						
ANR	5048689	Symbol	item		5048503						
ANR	5048690	Symbol	NULL		5048503						
ANR	5048691	Symbol	e		5048503						
ANR	5048692	Symbol	* * reg		5048503						
ANR	5048693	Symbol	false		5048503						
ANR	5048694	Symbol	i		5048503						
ANR	5048695	Symbol	R_REG_TYPE_LAST		5048503						
ANR	5048696	Symbol	r_reg_get_name_idx		5048503						
ANR	5048697	Symbol	* i		5048503						
ANR	5048698	Symbol	r_reg_get_name		5048503						
ANR	5048699	Symbol	name		5048503						
ANR	5048700	Symbol	nname		5048503						
ANR	5048701	Symbol	* reg		5048503						
ANR	5048702	Function	r_reg_get_list	327:0:7733:7883							
ANR	5048703	FunctionDef	"r_reg_get_list (RReg * reg , int type)"		5048702	0					
ANR	5048704	CompoundStatement		327:49:7782:7883	5048702	0					
ANR	5048705	IfStatement	if ( type < 0 || type > ( R_REG_TYPE_LAST - 1 ) )		5048702	0					
ANR	5048706	Condition	type < 0 || type > ( R_REG_TYPE_LAST - 1 )	328:5:7789:7828	5048702	0	True				
ANR	5048707	OrExpression	type < 0 || type > ( R_REG_TYPE_LAST - 1 )		5048702	0		||			
ANR	5048708	RelationalExpression	type < 0		5048702	0		<			
ANR	5048709	Identifier	type		5048702	0					
ANR	5048710	PrimaryExpression	0		5048702	1					
ANR	5048711	RelationalExpression	type > ( R_REG_TYPE_LAST - 1 )		5048702	1		>			
ANR	5048712	Identifier	type		5048702	0					
ANR	5048713	AdditiveExpression	R_REG_TYPE_LAST - 1		5048702	1		-			
ANR	5048714	Identifier	R_REG_TYPE_LAST		5048702	0					
ANR	5048715	PrimaryExpression	1		5048702	1					
ANR	5048716	CompoundStatement		2:47:48:48	5048702	1					
ANR	5048717	ReturnStatement	return NULL ;	329:2:7835:7846	5048702	0	True				
ANR	5048718	Identifier	NULL		5048702	0					
ANR	5048719	ReturnStatement	return reg -> regset [ type ] . regs ;	331:1:7852:7881	5048702	1	True				
ANR	5048720	MemberAccess	reg -> regset [ type ] . regs		5048702	0					
ANR	5048721	ArrayIndexing	reg -> regset [ type ]		5048702	0					
ANR	5048722	PtrMemberAccess	reg -> regset		5048702	0					
ANR	5048723	Identifier	reg		5048702	0					
ANR	5048724	Identifier	regset		5048702	1					
ANR	5048725	Identifier	type		5048702	1					
ANR	5048726	Identifier	regs		5048702	1					
ANR	5048727	ReturnType	R_API RList *		5048702	1					
ANR	5048728	Identifier	r_reg_get_list		5048702	2					
ANR	5048729	ParameterList	"RReg * reg , int type"		5048702	3					
ANR	5048730	Parameter	RReg * reg	327:28:7761:7769	5048702	0	True				
ANR	5048731	ParameterType	RReg *		5048702	0					
ANR	5048732	Identifier	reg		5048702	1					
ANR	5048733	Parameter	int type	327:39:7772:7779	5048702	1	True				
ANR	5048734	ParameterType	int		5048702	0					
ANR	5048735	Identifier	type		5048702	1					
ANR	5048736	CFGEntryNode	ENTRY		5048702		True				
ANR	5048737	CFGExitNode	EXIT		5048702		True				
ANR	5048738	Symbol	reg -> regset		5048702						
ANR	5048739	Symbol	reg -> regset [ type ] . regs		5048702						
ANR	5048740	Symbol	* reg -> regset		5048702						
ANR	5048741	Symbol	NULL		5048702						
ANR	5048742	Symbol	reg		5048702						
ANR	5048743	Symbol	* type		5048702						
ANR	5048744	Symbol	* * reg		5048702						
ANR	5048745	Symbol	R_REG_TYPE_LAST		5048702						
ANR	5048746	Symbol	type		5048702						
ANR	5048747	Symbol	* reg		5048702						
ANR	5048748	Function	r_reg_get_at	335:0:7964:8264							
ANR	5048749	FunctionDef	"r_reg_get_at (RReg * reg , int type , int regsize , int delta)"		5048748	0					
ANR	5048750	CompoundStatement		335:74:8038:8264	5048748	0					
ANR	5048751	IdentifierDeclStatement	"RList * list = r_reg_get_list ( reg , type ) ;"	336:1:8041:8081	5048748	0	True				
ANR	5048752	IdentifierDecl	"* list = r_reg_get_list ( reg , type )"		5048748	0					
ANR	5048753	IdentifierDeclType	RList *		5048748	0					
ANR	5048754	Identifier	list		5048748	1					
ANR	5048755	AssignmentExpression	"* list = r_reg_get_list ( reg , type )"		5048748	2		=			
ANR	5048756	Identifier	list		5048748	0					
ANR	5048757	CallExpression	"r_reg_get_list ( reg , type )"		5048748	1					
ANR	5048758	Callee	r_reg_get_list		5048748	0					
ANR	5048759	Identifier	r_reg_get_list		5048748	0					
ANR	5048760	ArgumentList	reg		5048748	1					
ANR	5048761	Argument	reg		5048748	0					
ANR	5048762	Identifier	reg		5048748	0					
ANR	5048763	Argument	type		5048748	1					
ANR	5048764	Identifier	type		5048748	0					
ANR	5048765	IdentifierDeclStatement	RRegItem * ri ;	337:1:8084:8096	5048748	1	True				
ANR	5048766	IdentifierDecl	* ri		5048748	0					
ANR	5048767	IdentifierDeclType	RRegItem *		5048748	0					
ANR	5048768	Identifier	ri		5048748	1					
ANR	5048769	IdentifierDeclStatement	RListIter * iter ;	338:1:8099:8114	5048748	2	True				
ANR	5048770	IdentifierDecl	* iter		5048748	0					
ANR	5048771	IdentifierDeclType	RListIter *		5048748	0					
ANR	5048772	Identifier	iter		5048748	1					
ANR	5048773	Statement	r_list_foreach	339:1:8117:8130	5048748	3	True				
ANR	5048774	Statement	(	339:16:8132:8132	5048748	4	True				
ANR	5048775	Statement	list	339:17:8133:8136	5048748	5	True				
ANR	5048776	Statement	","	339:21:8137:8137	5048748	6	True				
ANR	5048777	Statement	iter	339:23:8139:8142	5048748	7	True				
ANR	5048778	Statement	","	339:27:8143:8143	5048748	8	True				
ANR	5048779	Statement	ri	339:29:8145:8146	5048748	9	True				
ANR	5048780	Statement	)	339:31:8147:8147	5048748	10	True				
ANR	5048781	CompoundStatement		5:33:110:110	5048748	11					
ANR	5048782	IfStatement	if ( ri -> size == regsize )		5048748	0					
ANR	5048783	Condition	ri -> size == regsize	340:6:8157:8175	5048748	0	True				
ANR	5048784	EqualityExpression	ri -> size == regsize		5048748	0		==			
ANR	5048785	PtrMemberAccess	ri -> size		5048748	0					
ANR	5048786	Identifier	ri		5048748	0					
ANR	5048787	Identifier	size		5048748	1					
ANR	5048788	Identifier	regsize		5048748	1					
ANR	5048789	CompoundStatement		6:27:139:139	5048748	1					
ANR	5048790	IfStatement	if ( BITS2BYTES ( ri -> offset ) == delta )		5048748	0					
ANR	5048791	Condition	BITS2BYTES ( ri -> offset ) == delta	341:7:8187:8218	5048748	0	True				
ANR	5048792	EqualityExpression	BITS2BYTES ( ri -> offset ) == delta		5048748	0		==			
ANR	5048793	CallExpression	BITS2BYTES ( ri -> offset )		5048748	0					
ANR	5048794	Callee	BITS2BYTES		5048748	0					
ANR	5048795	Identifier	BITS2BYTES		5048748	0					
ANR	5048796	ArgumentList	ri -> offset		5048748	1					
ANR	5048797	Argument	ri -> offset		5048748	0					
ANR	5048798	PtrMemberAccess	ri -> offset		5048748	0					
ANR	5048799	Identifier	ri		5048748	0					
ANR	5048800	Identifier	offset		5048748	1					
ANR	5048801	Identifier	delta		5048748	1					
ANR	5048802	CompoundStatement		7:41:182:182	5048748	1					
ANR	5048803	ReturnStatement	return ri ;	342:4:8227:8236	5048748	0	True				
ANR	5048804	Identifier	ri		5048748	0					
ANR	5048805	ReturnStatement	return NULL ;	346:1:8251:8262	5048748	12	True				
ANR	5048806	Identifier	NULL		5048748	0					
ANR	5048807	ReturnType	R_API RRegItem *		5048748	1					
ANR	5048808	Identifier	r_reg_get_at		5048748	2					
ANR	5048809	ParameterList	"RReg * reg , int type , int regsize , int delta"		5048748	3					
ANR	5048810	Parameter	RReg * reg	335:29:7993:8001	5048748	0	True				
ANR	5048811	ParameterType	RReg *		5048748	0					
ANR	5048812	Identifier	reg		5048748	1					
ANR	5048813	Parameter	int type	335:40:8004:8011	5048748	1	True				
ANR	5048814	ParameterType	int		5048748	0					
ANR	5048815	Identifier	type		5048748	1					
ANR	5048816	Parameter	int regsize	335:50:8014:8024	5048748	2	True				
ANR	5048817	ParameterType	int		5048748	0					
ANR	5048818	Identifier	regsize		5048748	1					
ANR	5048819	Parameter	int delta	335:63:8027:8035	5048748	3	True				
ANR	5048820	ParameterType	int		5048748	0					
ANR	5048821	Identifier	delta		5048748	1					
ANR	5048822	CFGEntryNode	ENTRY		5048748		True				
ANR	5048823	CFGExitNode	EXIT		5048748		True				
ANR	5048824	Symbol	NULL		5048748						
ANR	5048825	Symbol	r_reg_get_list		5048748						
ANR	5048826	Symbol	BITS2BYTES		5048748						
ANR	5048827	Symbol	delta		5048748						
ANR	5048828	Symbol	iter		5048748						
ANR	5048829	Symbol	type		5048748						
ANR	5048830	Symbol	list		5048748						
ANR	5048831	Symbol	ri -> size		5048748						
ANR	5048832	Symbol	regsize		5048748						
ANR	5048833	Symbol	reg		5048748						
ANR	5048834	Symbol	ri		5048748						
ANR	5048835	Symbol	* ri		5048748						
ANR	5048836	Symbol	ri -> offset		5048748						
ANR	5048837	Function	r_reg_next_diff	350:0:8338:8967							
ANR	5048838	FunctionDef	"r_reg_next_diff (RReg * reg , int type , const ut8 * buf , int buflen , RRegItem * prev_ri , int regsize)"		5048837	0					
ANR	5048839	CompoundStatement		350:113:8451:8967	5048837	0					
ANR	5048840	IdentifierDeclStatement	const int bregsize = BITS2BYTES ( regsize ) ;	351:1:8454:8495	5048837	0	True				
ANR	5048841	IdentifierDecl	bregsize = BITS2BYTES ( regsize )		5048837	0					
ANR	5048842	IdentifierDeclType	const int		5048837	0					
ANR	5048843	Identifier	bregsize		5048837	1					
ANR	5048844	AssignmentExpression	bregsize = BITS2BYTES ( regsize )		5048837	2		=			
ANR	5048845	Identifier	bregsize		5048837	0					
ANR	5048846	CallExpression	BITS2BYTES ( regsize )		5048837	1					
ANR	5048847	Callee	BITS2BYTES		5048837	0					
ANR	5048848	Identifier	BITS2BYTES		5048837	0					
ANR	5048849	ArgumentList	regsize		5048837	1					
ANR	5048850	Argument	regsize		5048837	0					
ANR	5048851	Identifier	regsize		5048837	0					
ANR	5048852	IfStatement	if ( type < 0 || type > ( R_REG_TYPE_LAST - 1 ) )		5048837	1					
ANR	5048853	Condition	type < 0 || type > ( R_REG_TYPE_LAST - 1 )	352:5:8502:8541	5048837	0	True				
ANR	5048854	OrExpression	type < 0 || type > ( R_REG_TYPE_LAST - 1 )		5048837	0		||			
ANR	5048855	RelationalExpression	type < 0		5048837	0		<			
ANR	5048856	Identifier	type		5048837	0					
ANR	5048857	PrimaryExpression	0		5048837	1					
ANR	5048858	RelationalExpression	type > ( R_REG_TYPE_LAST - 1 )		5048837	1		>			
ANR	5048859	Identifier	type		5048837	0					
ANR	5048860	AdditiveExpression	R_REG_TYPE_LAST - 1		5048837	1		-			
ANR	5048861	Identifier	R_REG_TYPE_LAST		5048837	0					
ANR	5048862	PrimaryExpression	1		5048837	1					
ANR	5048863	CompoundStatement		3:47:92:92	5048837	1					
ANR	5048864	ReturnStatement	return NULL ;	353:2:8548:8559	5048837	0	True				
ANR	5048865	Identifier	NULL		5048837	0					
ANR	5048866	IdentifierDeclStatement	RRegArena * arena = reg -> regset [ type ] . arena ;	355:1:8565:8607	5048837	2	True				
ANR	5048867	IdentifierDecl	* arena = reg -> regset [ type ] . arena		5048837	0					
ANR	5048868	IdentifierDeclType	RRegArena *		5048837	0					
ANR	5048869	Identifier	arena		5048837	1					
ANR	5048870	AssignmentExpression	* arena = reg -> regset [ type ] . arena		5048837	2		=			
ANR	5048871	Identifier	arena		5048837	0					
ANR	5048872	MemberAccess	reg -> regset [ type ] . arena		5048837	1					
ANR	5048873	ArrayIndexing	reg -> regset [ type ]		5048837	0					
ANR	5048874	PtrMemberAccess	reg -> regset		5048837	0					
ANR	5048875	Identifier	reg		5048837	0					
ANR	5048876	Identifier	regset		5048837	1					
ANR	5048877	Identifier	type		5048837	1					
ANR	5048878	Identifier	arena		5048837	1					
ANR	5048879	IdentifierDeclStatement	int delta = prev_ri ? prev_ri -> offset + prev_ri -> size : 0 ;	356:1:8610:8667	5048837	3	True				
ANR	5048880	IdentifierDecl	delta = prev_ri ? prev_ri -> offset + prev_ri -> size : 0		5048837	0					
ANR	5048881	IdentifierDeclType	int		5048837	0					
ANR	5048882	Identifier	delta		5048837	1					
ANR	5048883	AssignmentExpression	delta = prev_ri ? prev_ri -> offset + prev_ri -> size : 0		5048837	2		=			
ANR	5048884	Identifier	delta		5048837	0					
ANR	5048885	ConditionalExpression	prev_ri ? prev_ri -> offset + prev_ri -> size : 0		5048837	1					
ANR	5048886	Condition	prev_ri		5048837	0					
ANR	5048887	Identifier	prev_ri		5048837	0					
ANR	5048888	AdditiveExpression	prev_ri -> offset + prev_ri -> size		5048837	1		+			
ANR	5048889	PtrMemberAccess	prev_ri -> offset		5048837	0					
ANR	5048890	Identifier	prev_ri		5048837	0					
ANR	5048891	Identifier	offset		5048837	1					
ANR	5048892	PtrMemberAccess	prev_ri -> size		5048837	1					
ANR	5048893	Identifier	prev_ri		5048837	0					
ANR	5048894	Identifier	size		5048837	1					
ANR	5048895	PrimaryExpression	0		5048837	2					
ANR	5048896	ForStatement	for ( ; ; )		5048837	4					
ANR	5048897	CompoundStatement		8:10:227:227	5048837	0					
ANR	5048898	IfStatement	if ( ( delta + bregsize >= arena -> size ) || ( delta + bregsize >= buflen ) )		5048837	0					
ANR	5048899	Condition	( delta + bregsize >= arena -> size ) || ( delta + bregsize >= buflen )	358:6:8687:8751	5048837	0	True				
ANR	5048900	OrExpression	( delta + bregsize >= arena -> size ) || ( delta + bregsize >= buflen )		5048837	0		||			
ANR	5048901	RelationalExpression	delta + bregsize >= arena -> size		5048837	0		>=			
ANR	5048902	AdditiveExpression	delta + bregsize		5048837	0		+			
ANR	5048903	Identifier	delta		5048837	0					
ANR	5048904	Identifier	bregsize		5048837	1					
ANR	5048905	PtrMemberAccess	arena -> size		5048837	1					
ANR	5048906	Identifier	arena		5048837	0					
ANR	5048907	Identifier	size		5048837	1					
ANR	5048908	RelationalExpression	delta + bregsize >= buflen		5048837	1		>=			
ANR	5048909	AdditiveExpression	delta + bregsize		5048837	0		+			
ANR	5048910	Identifier	delta		5048837	0					
ANR	5048911	Identifier	bregsize		5048837	1					
ANR	5048912	Identifier	buflen		5048837	1					
ANR	5048913	CompoundStatement		9:73:302:302	5048837	1					
ANR	5048914	BreakStatement	break ;	359:3:8759:8764	5048837	0	True				
ANR	5048915	IfStatement	"if ( memcmp ( arena -> bytes + delta , buf + delta , bregsize ) )"		5048837	1					
ANR	5048916	Condition	"memcmp ( arena -> bytes + delta , buf + delta , bregsize )"	361:6:8776:8827	5048837	0	True				
ANR	5048917	CallExpression	"memcmp ( arena -> bytes + delta , buf + delta , bregsize )"		5048837	0					
ANR	5048918	Callee	memcmp		5048837	0					
ANR	5048919	Identifier	memcmp		5048837	0					
ANR	5048920	ArgumentList	arena -> bytes + delta		5048837	1					
ANR	5048921	Argument	arena -> bytes + delta		5048837	0					
ANR	5048922	AdditiveExpression	arena -> bytes + delta		5048837	0		+			
ANR	5048923	PtrMemberAccess	arena -> bytes		5048837	0					
ANR	5048924	Identifier	arena		5048837	0					
ANR	5048925	Identifier	bytes		5048837	1					
ANR	5048926	Identifier	delta		5048837	1					
ANR	5048927	Argument	buf + delta		5048837	1					
ANR	5048928	AdditiveExpression	buf + delta		5048837	0		+			
ANR	5048929	Identifier	buf		5048837	0					
ANR	5048930	Identifier	delta		5048837	1					
ANR	5048931	Argument	bregsize		5048837	2					
ANR	5048932	Identifier	bregsize		5048837	0					
ANR	5048933	CompoundStatement		13:3:383:438	5048837	1					
ANR	5048934	IdentifierDeclStatement	"RRegItem * ri = r_reg_get_at ( reg , type , regsize , delta ) ;"	362:3:8835:8890	5048837	0	True				
ANR	5048935	IdentifierDecl	"* ri = r_reg_get_at ( reg , type , regsize , delta )"		5048837	0					
ANR	5048936	IdentifierDeclType	RRegItem *		5048837	0					
ANR	5048937	Identifier	ri		5048837	1					
ANR	5048938	AssignmentExpression	"* ri = r_reg_get_at ( reg , type , regsize , delta )"		5048837	2		=			
ANR	5048939	Identifier	ri		5048837	0					
ANR	5048940	CallExpression	"r_reg_get_at ( reg , type , regsize , delta )"		5048837	1					
ANR	5048941	Callee	r_reg_get_at		5048837	0					
ANR	5048942	Identifier	r_reg_get_at		5048837	0					
ANR	5048943	ArgumentList	reg		5048837	1					
ANR	5048944	Argument	reg		5048837	0					
ANR	5048945	Identifier	reg		5048837	0					
ANR	5048946	Argument	type		5048837	1					
ANR	5048947	Identifier	type		5048837	0					
ANR	5048948	Argument	regsize		5048837	2					
ANR	5048949	Identifier	regsize		5048837	0					
ANR	5048950	Argument	delta		5048837	3					
ANR	5048951	Identifier	delta		5048837	0					
ANR	5048952	IfStatement	if ( ri )		5048837	1					
ANR	5048953	Condition	ri	363:7:8899:8900	5048837	0	True				
ANR	5048954	Identifier	ri		5048837	0					
ANR	5048955	CompoundStatement		14:11:451:451	5048837	1					
ANR	5048956	ReturnStatement	return ri ;	364:4:8909:8918	5048837	0	True				
ANR	5048957	Identifier	ri		5048837	0					
ANR	5048958	ExpressionStatement	delta += bregsize	367:2:8931:8948	5048837	2	True				
ANR	5048959	AssignmentExpression	delta += bregsize		5048837	0		+=			
ANR	5048960	Identifier	delta		5048837	0					
ANR	5048961	Identifier	bregsize		5048837	1					
ANR	5048962	ReturnStatement	return NULL ;	369:1:8954:8965	5048837	5	True				
ANR	5048963	Identifier	NULL		5048837	0					
ANR	5048964	ReturnType	R_API RRegItem *		5048837	1					
ANR	5048965	Identifier	r_reg_next_diff		5048837	2					
ANR	5048966	ParameterList	"RReg * reg , int type , const ut8 * buf , int buflen , RRegItem * prev_ri , int regsize"		5048837	3					
ANR	5048967	Parameter	RReg * reg	350:32:8370:8378	5048837	0	True				
ANR	5048968	ParameterType	RReg *		5048837	0					
ANR	5048969	Identifier	reg		5048837	1					
ANR	5048970	Parameter	int type	350:43:8381:8388	5048837	1	True				
ANR	5048971	ParameterType	int		5048837	0					
ANR	5048972	Identifier	type		5048837	1					
ANR	5048973	Parameter	const ut8 * buf	350:53:8391:8404	5048837	2	True				
ANR	5048974	ParameterType	const ut8 *		5048837	0					
ANR	5048975	Identifier	buf		5048837	1					
ANR	5048976	Parameter	int buflen	350:69:8407:8416	5048837	3	True				
ANR	5048977	ParameterType	int		5048837	0					
ANR	5048978	Identifier	buflen		5048837	1					
ANR	5048979	Parameter	RRegItem * prev_ri	350:81:8419:8435	5048837	4	True				
ANR	5048980	ParameterType	RRegItem *		5048837	0					
ANR	5048981	Identifier	prev_ri		5048837	1					
ANR	5048982	Parameter	int regsize	350:100:8438:8448	5048837	5	True				
ANR	5048983	ParameterType	int		5048837	0					
ANR	5048984	Identifier	regsize		5048837	1					
ANR	5048985	CFGEntryNode	ENTRY		5048837		True				
ANR	5048986	CFGExitNode	EXIT		5048837		True				
ANR	5048987	InfiniteForNode	true		5048837		True				
ANR	5048988	Symbol	reg -> regset [ type ] . arena		5048837						
ANR	5048989	Symbol	bregsize		5048837						
ANR	5048990	Symbol	BITS2BYTES		5048837						
ANR	5048991	Symbol	delta		5048837						
ANR	5048992	Symbol	prev_ri		5048837						
ANR	5048993	Symbol	arena		5048837						
ANR	5048994	Symbol	r_reg_get_at		5048837						
ANR	5048995	Symbol	type		5048837						
ANR	5048996	Symbol	reg -> regset		5048837						
ANR	5048997	Symbol	prev_ri -> offset		5048837						
ANR	5048998	Symbol	memcmp		5048837						
ANR	5048999	Symbol	regsize		5048837						
ANR	5049000	Symbol	reg		5048837						
ANR	5049001	Symbol	* type		5048837						
ANR	5049002	Symbol	buflen		5048837						
ANR	5049003	Symbol	arena -> bytes		5048837						
ANR	5049004	Symbol	* reg -> regset		5048837						
ANR	5049005	Symbol	NULL		5048837						
ANR	5049006	Symbol	* prev_ri		5048837						
ANR	5049007	Symbol	* * reg		5048837						
ANR	5049008	Symbol	R_REG_TYPE_LAST		5048837						
ANR	5049009	Symbol	arena -> size		5048837						
ANR	5049010	Symbol	prev_ri -> size		5048837						
ANR	5049011	Symbol	buf		5048837						
ANR	5049012	Symbol	ri		5048837						
ANR	5049013	Symbol	* arena		5048837						
ANR	5049014	Symbol	* reg		5048837						
ANR	5049015	Function	r_reg_regset_get	372:0:8970:9149							
ANR	5049016	FunctionDef	"r_reg_regset_get (RReg * r , int type)"		5049015	0					
ANR	5049017	CompoundStatement		372:51:9021:9149	5049015	0					
ANR	5049018	IfStatement	if ( type < 0 || type >= R_REG_TYPE_LAST )		5049015	0					
ANR	5049019	Condition	type < 0 || type >= R_REG_TYPE_LAST	373:5:9028:9062	5049015	0	True				
ANR	5049020	OrExpression	type < 0 || type >= R_REG_TYPE_LAST		5049015	0		||			
ANR	5049021	RelationalExpression	type < 0		5049015	0		<			
ANR	5049022	Identifier	type		5049015	0					
ANR	5049023	PrimaryExpression	0		5049015	1					
ANR	5049024	RelationalExpression	type >= R_REG_TYPE_LAST		5049015	1		>=			
ANR	5049025	Identifier	type		5049015	0					
ANR	5049026	Identifier	R_REG_TYPE_LAST		5049015	1					
ANR	5049027	CompoundStatement		2:42:43:43	5049015	1					
ANR	5049028	ReturnStatement	return NULL ;	374:2:9069:9080	5049015	0	True				
ANR	5049029	Identifier	NULL		5049015	0					
ANR	5049030	IdentifierDeclStatement	RRegSet * rs = & r -> regset [ type ] ;	376:1:9086:9116	5049015	1	True				
ANR	5049031	IdentifierDecl	* rs = & r -> regset [ type ]		5049015	0					
ANR	5049032	IdentifierDeclType	RRegSet *		5049015	0					
ANR	5049033	Identifier	rs		5049015	1					
ANR	5049034	AssignmentExpression	* rs = & r -> regset [ type ]		5049015	2		=			
ANR	5049035	Identifier	rs		5049015	0					
ANR	5049036	UnaryOperationExpression	& r -> regset [ type ]		5049015	1					
ANR	5049037	UnaryOperator	&		5049015	0					
ANR	5049038	ArrayIndexing	r -> regset [ type ]		5049015	1					
ANR	5049039	PtrMemberAccess	r -> regset		5049015	0					
ANR	5049040	Identifier	r		5049015	0					
ANR	5049041	Identifier	regset		5049015	1					
ANR	5049042	Identifier	type		5049015	1					
ANR	5049043	ReturnStatement	return rs -> arena ? rs : NULL ;	377:1:9119:9147	5049015	2	True				
ANR	5049044	ConditionalExpression	rs -> arena ? rs : NULL		5049015	0					
ANR	5049045	Condition	rs -> arena		5049015	0					
ANR	5049046	PtrMemberAccess	rs -> arena		5049015	0					
ANR	5049047	Identifier	rs		5049015	0					
ANR	5049048	Identifier	arena		5049015	1					
ANR	5049049	Identifier	rs		5049015	1					
ANR	5049050	Identifier	NULL		5049015	2					
ANR	5049051	ReturnType	R_API RRegSet *		5049015	1					
ANR	5049052	Identifier	r_reg_regset_get		5049015	2					
ANR	5049053	ParameterList	"RReg * r , int type"		5049015	3					
ANR	5049054	Parameter	RReg * r	372:32:9002:9008	5049015	0	True				
ANR	5049055	ParameterType	RReg *		5049015	0					
ANR	5049056	Identifier	r		5049015	1					
ANR	5049057	Parameter	int type	372:41:9011:9018	5049015	1	True				
ANR	5049058	ParameterType	int		5049015	0					
ANR	5049059	Identifier	type		5049015	1					
ANR	5049060	CFGEntryNode	ENTRY		5049015		True				
ANR	5049061	CFGExitNode	EXIT		5049015		True				
ANR	5049062	Symbol	rs		5049015						
ANR	5049063	Symbol	r		5049015						
ANR	5049064	Symbol	NULL		5049015						
ANR	5049065	Symbol	* rs		5049015						
ANR	5049066	Symbol	rs -> arena		5049015						
ANR	5049067	Symbol	R_REG_TYPE_LAST		5049015						
ANR	5049068	Symbol	r -> regset		5049015						
ANR	5049069	Symbol	type		5049015						
ANR	5049070	Symbol	* r		5049015						
