command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6509976	File	data/converged/CVE-2019-16718~_radare2/windows_maps.c								
ANR	6509977	ClassDef	<unnamed>	4:8:73:162							
ANR	6509978	DeclStmt									
ANR	6509979	Decl							RDebugMap	RDebugMap *	map
ANR	6509980	DeclStmt									
ANR	6509981	Decl							IMAGE_SECTION_HEADER	IMAGE_SECTION_HEADER *	sect_hdr
ANR	6509982	DeclStmt									
ANR	6509983	Decl							int	int	sect_count
ANR	6509984	DeclStmt									
ANR	6509985	Decl									RWinModInfo
ANR	6509986	Function	get_map_type	10:0:165:444							
ANR	6509987	FunctionDef	get_map_type (MEMORY_BASIC_INFORMATION * mbi)		6509986	0					
ANR	6509988	CompoundStatement		10:57:222:444	6509986	0					
ANR	6509989	IdentifierDeclStatement	char * type ;	11:1:225:235	6509986	0	True				
ANR	6509990	IdentifierDecl	* type		6509986	0					
ANR	6509991	IdentifierDeclType	char *		6509986	0					
ANR	6509992	Identifier	type		6509986	1					
ANR	6509993	SwitchStatement	switch ( mbi -> Type )		6509986	1					
ANR	6509994	Condition	mbi -> Type	12:9:246:254	6509986	0	True				
ANR	6509995	PtrMemberAccess	mbi -> Type		6509986	0					
ANR	6509996	Identifier	mbi		6509986	0					
ANR	6509997	Identifier	Type		6509986	1					
ANR	6509998	CompoundStatement		3:20:34:34	6509986	1					
ANR	6509999	Label	case MEM_IMAGE :	13:1:260:274	6509986	0	True				
ANR	6510000	Identifier	MEM_IMAGE		6509986	0					
ANR	6510001	ExpressionStatement	"type = ""IMAGE"""	14:2:278:292	6509986	1	True				
ANR	6510002	AssignmentExpression	"type = ""IMAGE"""		6509986	0		=			
ANR	6510003	Identifier	type		6509986	0					
ANR	6510004	PrimaryExpression	"""IMAGE"""		6509986	1					
ANR	6510005	BreakStatement	break ;	15:2:296:301	6509986	2	True				
ANR	6510006	Label	case MEM_MAPPED :	16:1:304:319	6509986	3	True				
ANR	6510007	Identifier	MEM_MAPPED		6509986	0					
ANR	6510008	ExpressionStatement	"type = ""MAPPED"""	17:2:323:338	6509986	4	True				
ANR	6510009	AssignmentExpression	"type = ""MAPPED"""		6509986	0		=			
ANR	6510010	Identifier	type		6509986	0					
ANR	6510011	PrimaryExpression	"""MAPPED"""		6509986	1					
ANR	6510012	BreakStatement	break ;	18:2:342:347	6509986	5	True				
ANR	6510013	Label	case MEM_PRIVATE :	19:1:350:366	6509986	6	True				
ANR	6510014	Identifier	MEM_PRIVATE		6509986	0					
ANR	6510015	ExpressionStatement	"type = ""PRIVATE"""	20:2:370:386	6509986	7	True				
ANR	6510016	AssignmentExpression	"type = ""PRIVATE"""		6509986	0		=			
ANR	6510017	Identifier	type		6509986	0					
ANR	6510018	PrimaryExpression	"""PRIVATE"""		6509986	1					
ANR	6510019	BreakStatement	break ;	21:2:390:395	6509986	8	True				
ANR	6510020	Label	default :	22:1:398:405	6509986	9	True				
ANR	6510021	Identifier	default		6509986	0					
ANR	6510022	ExpressionStatement	"type = ""UNKNOWN"""	23:2:409:425	6509986	10	True				
ANR	6510023	AssignmentExpression	"type = ""UNKNOWN"""		6509986	0		=			
ANR	6510024	Identifier	type		6509986	0					
ANR	6510025	PrimaryExpression	"""UNKNOWN"""		6509986	1					
ANR	6510026	ReturnStatement	return type ;	25:1:431:442	6509986	2	True				
ANR	6510027	Identifier	type		6509986	0					
ANR	6510028	ReturnType	static char *		6509986	1					
ANR	6510029	Identifier	get_map_type		6509986	2					
ANR	6510030	ParameterList	MEMORY_BASIC_INFORMATION * mbi		6509986	3					
ANR	6510031	Parameter	MEMORY_BASIC_INFORMATION * mbi	10:26:191:219	6509986	0	True				
ANR	6510032	ParameterType	MEMORY_BASIC_INFORMATION *		6509986	0					
ANR	6510033	Identifier	mbi		6509986	1					
ANR	6510034	CFGEntryNode	ENTRY		6509986		True				
ANR	6510035	CFGExitNode	EXIT		6509986		True				
ANR	6510036	Symbol	mbi		6509986						
ANR	6510037	Symbol	mbi -> Type		6509986						
ANR	6510038	Symbol	type		6509986						
ANR	6510039	Symbol	* mbi		6509986						
ANR	6510040	Function	add_map	28:0:447:1289							
ANR	6510041	FunctionDef	"add_map (RList * list , const char * name , ut64 addr , ut64 len , MEMORY_BASIC_INFORMATION * mbi)"		6510040	0					
ANR	6510042	CompoundStatement		28:109:556:1289	6510040	0					
ANR	6510043	IdentifierDeclStatement	int perm ;	29:1:559:567	6510040	0	True				
ANR	6510044	IdentifierDecl	perm		6510040	0					
ANR	6510045	IdentifierDeclType	int		6510040	0					
ANR	6510046	Identifier	perm		6510040	1					
ANR	6510047	IdentifierDeclStatement	char * map_type = get_map_type ( mbi ) ;	30:1:570:605	6510040	1	True				
ANR	6510048	IdentifierDecl	* map_type = get_map_type ( mbi )		6510040	0					
ANR	6510049	IdentifierDeclType	char *		6510040	0					
ANR	6510050	Identifier	map_type		6510040	1					
ANR	6510051	AssignmentExpression	* map_type = get_map_type ( mbi )		6510040	2		=			
ANR	6510052	Identifier	map_type		6510040	0					
ANR	6510053	CallExpression	get_map_type ( mbi )		6510040	1					
ANR	6510054	Callee	get_map_type		6510040	0					
ANR	6510055	Identifier	get_map_type		6510040	0					
ANR	6510056	ArgumentList	mbi		6510040	1					
ANR	6510057	Argument	mbi		6510040	0					
ANR	6510058	Identifier	mbi		6510040	0					
ANR	6510059	SwitchStatement	switch ( mbi -> Protect )		6510040	2					
ANR	6510060	Condition	mbi -> Protect	32:9:617:628	6510040	0	True				
ANR	6510061	PtrMemberAccess	mbi -> Protect		6510040	0					
ANR	6510062	Identifier	mbi		6510040	0					
ANR	6510063	Identifier	Protect		6510040	1					
ANR	6510064	CompoundStatement		5:23:74:74	6510040	1					
ANR	6510065	Label	case PAGE_EXECUTE :	33:1:634:651	6510040	0	True				
ANR	6510066	Identifier	PAGE_EXECUTE		6510040	0					
ANR	6510067	ExpressionStatement	perm = R_PERM_X	34:2:655:670	6510040	1	True				
ANR	6510068	AssignmentExpression	perm = R_PERM_X		6510040	0		=			
ANR	6510069	Identifier	perm		6510040	0					
ANR	6510070	Identifier	R_PERM_X		6510040	1					
ANR	6510071	BreakStatement	break ;	35:2:674:679	6510040	2	True				
ANR	6510072	Label	case PAGE_EXECUTE_READ :	36:1:682:704	6510040	3	True				
ANR	6510073	Identifier	PAGE_EXECUTE_READ		6510040	0					
ANR	6510074	ExpressionStatement	perm = R_PERM_RX	37:2:708:724	6510040	4	True				
ANR	6510075	AssignmentExpression	perm = R_PERM_RX		6510040	0		=			
ANR	6510076	Identifier	perm		6510040	0					
ANR	6510077	Identifier	R_PERM_RX		6510040	1					
ANR	6510078	BreakStatement	break ;	38:2:728:733	6510040	5	True				
ANR	6510079	Label	case PAGE_EXECUTE_READWRITE :	39:1:736:763	6510040	6	True				
ANR	6510080	Identifier	PAGE_EXECUTE_READWRITE		6510040	0					
ANR	6510081	ExpressionStatement	perm = R_PERM_RWX	40:2:767:784	6510040	7	True				
ANR	6510082	AssignmentExpression	perm = R_PERM_RWX		6510040	0		=			
ANR	6510083	Identifier	perm		6510040	0					
ANR	6510084	Identifier	R_PERM_RWX		6510040	1					
ANR	6510085	BreakStatement	break ;	41:2:788:793	6510040	8	True				
ANR	6510086	Label	case PAGE_READONLY :	42:1:796:814	6510040	9	True				
ANR	6510087	Identifier	PAGE_READONLY		6510040	0					
ANR	6510088	ExpressionStatement	perm = R_PERM_R	43:2:818:833	6510040	10	True				
ANR	6510089	AssignmentExpression	perm = R_PERM_R		6510040	0		=			
ANR	6510090	Identifier	perm		6510040	0					
ANR	6510091	Identifier	R_PERM_R		6510040	1					
ANR	6510092	BreakStatement	break ;	44:2:837:842	6510040	11	True				
ANR	6510093	Label	case PAGE_READWRITE :	45:1:845:864	6510040	12	True				
ANR	6510094	Identifier	PAGE_READWRITE		6510040	0					
ANR	6510095	ExpressionStatement	perm = R_PERM_RW	46:2:868:884	6510040	13	True				
ANR	6510096	AssignmentExpression	perm = R_PERM_RW		6510040	0		=			
ANR	6510097	Identifier	perm		6510040	0					
ANR	6510098	Identifier	R_PERM_RW		6510040	1					
ANR	6510099	BreakStatement	break ;	47:2:888:893	6510040	14	True				
ANR	6510100	Label	case PAGE_WRITECOPY :	48:1:896:915	6510040	15	True				
ANR	6510101	Identifier	PAGE_WRITECOPY		6510040	0					
ANR	6510102	ExpressionStatement	perm = R_PERM_W	49:2:919:934	6510040	16	True				
ANR	6510103	AssignmentExpression	perm = R_PERM_W		6510040	0		=			
ANR	6510104	Identifier	perm		6510040	0					
ANR	6510105	Identifier	R_PERM_W		6510040	1					
ANR	6510106	BreakStatement	break ;	50:2:938:943	6510040	17	True				
ANR	6510107	Label	case PAGE_EXECUTE_WRITECOPY :	51:1:946:973	6510040	18	True				
ANR	6510108	Identifier	PAGE_EXECUTE_WRITECOPY		6510040	0					
ANR	6510109	ExpressionStatement	perm = R_PERM_X	52:2:977:992	6510040	19	True				
ANR	6510110	AssignmentExpression	perm = R_PERM_X		6510040	0		=			
ANR	6510111	Identifier	perm		6510040	0					
ANR	6510112	Identifier	R_PERM_X		6510040	1					
ANR	6510113	BreakStatement	break ;	53:2:996:1001	6510040	20	True				
ANR	6510114	Label	default :	54:1:1004:1011	6510040	21	True				
ANR	6510115	Identifier	default		6510040	0					
ANR	6510116	ExpressionStatement	perm = 0	55:2:1015:1023	6510040	22	True				
ANR	6510117	AssignmentExpression	perm = 0		6510040	0		=			
ANR	6510118	Identifier	perm		6510040	0					
ANR	6510119	PrimaryExpression	0		6510040	1					
ANR	6510120	IdentifierDeclStatement	"char * map_name = r_str_newf ( ""%-8s %s"" , map_type , name ) ;"	57:1:1029:1084	6510040	3	True				
ANR	6510121	IdentifierDecl	"* map_name = r_str_newf ( ""%-8s %s"" , map_type , name )"		6510040	0					
ANR	6510122	IdentifierDeclType	char *		6510040	0					
ANR	6510123	Identifier	map_name		6510040	1					
ANR	6510124	AssignmentExpression	"* map_name = r_str_newf ( ""%-8s %s"" , map_type , name )"		6510040	2		=			
ANR	6510125	Identifier	map_name		6510040	0					
ANR	6510126	CallExpression	"r_str_newf ( ""%-8s %s"" , map_type , name )"		6510040	1					
ANR	6510127	Callee	r_str_newf		6510040	0					
ANR	6510128	Identifier	r_str_newf		6510040	0					
ANR	6510129	ArgumentList	"""%-8s %s"""		6510040	1					
ANR	6510130	Argument	"""%-8s %s"""		6510040	0					
ANR	6510131	PrimaryExpression	"""%-8s %s"""		6510040	0					
ANR	6510132	Argument	map_type		6510040	1					
ANR	6510133	Identifier	map_type		6510040	0					
ANR	6510134	Argument	name		6510040	2					
ANR	6510135	Identifier	name		6510040	0					
ANR	6510136	IfStatement	if ( ! map_name )		6510040	4					
ANR	6510137	Condition	! map_name	58:5:1091:1099	6510040	0	True				
ANR	6510138	UnaryOperationExpression	! map_name		6510040	0					
ANR	6510139	UnaryOperator	!		6510040	0					
ANR	6510140	Identifier	map_name		6510040	1					
ANR	6510141	CompoundStatement		31:16:545:545	6510040	1					
ANR	6510142	ReturnStatement	return NULL ;	59:2:1106:1117	6510040	0	True				
ANR	6510143	Identifier	NULL		6510040	0					
ANR	6510144	IdentifierDeclStatement	"RDebugMap * mr = r_debug_map_new ( map_name , addr , addr + len , perm , mbi -> Type == MEM_PRIVATE ) ;"	61:1:1123:1215	6510040	5	True				
ANR	6510145	IdentifierDecl	"* mr = r_debug_map_new ( map_name , addr , addr + len , perm , mbi -> Type == MEM_PRIVATE )"		6510040	0					
ANR	6510146	IdentifierDeclType	RDebugMap *		6510040	0					
ANR	6510147	Identifier	mr		6510040	1					
ANR	6510148	AssignmentExpression	"* mr = r_debug_map_new ( map_name , addr , addr + len , perm , mbi -> Type == MEM_PRIVATE )"		6510040	2		=			
ANR	6510149	Identifier	mr		6510040	0					
ANR	6510150	CallExpression	"r_debug_map_new ( map_name , addr , addr + len , perm , mbi -> Type == MEM_PRIVATE )"		6510040	1					
ANR	6510151	Callee	r_debug_map_new		6510040	0					
ANR	6510152	Identifier	r_debug_map_new		6510040	0					
ANR	6510153	ArgumentList	map_name		6510040	1					
ANR	6510154	Argument	map_name		6510040	0					
ANR	6510155	Identifier	map_name		6510040	0					
ANR	6510156	Argument	addr		6510040	1					
ANR	6510157	Identifier	addr		6510040	0					
ANR	6510158	Argument	addr + len		6510040	2					
ANR	6510159	AdditiveExpression	addr + len		6510040	0		+			
ANR	6510160	Identifier	addr		6510040	0					
ANR	6510161	Identifier	len		6510040	1					
ANR	6510162	Argument	perm		6510040	3					
ANR	6510163	Identifier	perm		6510040	0					
ANR	6510164	Argument	mbi -> Type == MEM_PRIVATE		6510040	4					
ANR	6510165	EqualityExpression	mbi -> Type == MEM_PRIVATE		6510040	0		==			
ANR	6510166	PtrMemberAccess	mbi -> Type		6510040	0					
ANR	6510167	Identifier	mbi		6510040	0					
ANR	6510168	Identifier	Type		6510040	1					
ANR	6510169	Identifier	MEM_PRIVATE		6510040	1					
ANR	6510170	ExpressionStatement	free ( map_name )	62:1:1218:1233	6510040	6	True				
ANR	6510171	CallExpression	free ( map_name )		6510040	0					
ANR	6510172	Callee	free		6510040	0					
ANR	6510173	Identifier	free		6510040	0					
ANR	6510174	ArgumentList	map_name		6510040	1					
ANR	6510175	Argument	map_name		6510040	0					
ANR	6510176	Identifier	map_name		6510040	0					
ANR	6510177	IfStatement	if ( mr )		6510040	7					
ANR	6510178	Condition	mr	63:5:1240:1241	6510040	0	True				
ANR	6510179	Identifier	mr		6510040	0					
ANR	6510180	CompoundStatement		36:9:687:687	6510040	1					
ANR	6510181	ExpressionStatement	"r_list_append ( list , mr )"	64:2:1248:1272	6510040	0	True				
ANR	6510182	CallExpression	"r_list_append ( list , mr )"		6510040	0					
ANR	6510183	Callee	r_list_append		6510040	0					
ANR	6510184	Identifier	r_list_append		6510040	0					
ANR	6510185	ArgumentList	list		6510040	1					
ANR	6510186	Argument	list		6510040	0					
ANR	6510187	Identifier	list		6510040	0					
ANR	6510188	Argument	mr		6510040	1					
ANR	6510189	Identifier	mr		6510040	0					
ANR	6510190	ReturnStatement	return mr ;	66:1:1278:1287	6510040	8	True				
ANR	6510191	Identifier	mr		6510040	0					
ANR	6510192	ReturnType	static RDebugMap *		6510040	1					
ANR	6510193	Identifier	add_map		6510040	2					
ANR	6510194	ParameterList	"RList * list , const char * name , ut64 addr , ut64 len , MEMORY_BASIC_INFORMATION * mbi"		6510040	3					
ANR	6510195	Parameter	RList * list	28:26:473:483	6510040	0	True				
ANR	6510196	ParameterType	RList *		6510040	0					
ANR	6510197	Identifier	list		6510040	1					
ANR	6510198	Parameter	const char * name	28:39:486:501	6510040	1	True				
ANR	6510199	ParameterType	const char *		6510040	0					
ANR	6510200	Identifier	name		6510040	1					
ANR	6510201	Parameter	ut64 addr	28:57:504:512	6510040	2	True				
ANR	6510202	ParameterType	ut64		6510040	0					
ANR	6510203	Identifier	addr		6510040	1					
ANR	6510204	Parameter	ut64 len	28:68:515:522	6510040	3	True				
ANR	6510205	ParameterType	ut64		6510040	0					
ANR	6510206	Identifier	len		6510040	1					
ANR	6510207	Parameter	MEMORY_BASIC_INFORMATION * mbi	28:78:525:553	6510040	4	True				
ANR	6510208	ParameterType	MEMORY_BASIC_INFORMATION *		6510040	0					
ANR	6510209	Identifier	mbi		6510040	1					
ANR	6510210	CFGEntryNode	ENTRY		6510040		True				
ANR	6510211	CFGExitNode	EXIT		6510040		True				
ANR	6510212	Symbol	NULL		6510040						
ANR	6510213	Symbol	perm		6510040						
ANR	6510214	Symbol	r_debug_map_new		6510040						
ANR	6510215	Symbol	mr		6510040						
ANR	6510216	Symbol	map_name		6510040						
ANR	6510217	Symbol	get_map_type		6510040						
ANR	6510218	Symbol	r_str_newf		6510040						
ANR	6510219	Symbol	list		6510040						
ANR	6510220	Symbol	R_PERM_X		6510040						
ANR	6510221	Symbol	map_type		6510040						
ANR	6510222	Symbol	R_PERM_RW		6510040						
ANR	6510223	Symbol	R_PERM_W		6510040						
ANR	6510224	Symbol	len		6510040						
ANR	6510225	Symbol	mbi		6510040						
ANR	6510226	Symbol	mbi -> Protect		6510040						
ANR	6510227	Symbol	R_PERM_R		6510040						
ANR	6510228	Symbol	name		6510040						
ANR	6510229	Symbol	mbi -> Type		6510040						
ANR	6510230	Symbol	addr		6510040						
ANR	6510231	Symbol	R_PERM_RX		6510040						
ANR	6510232	Symbol	* mbi		6510040						
ANR	6510233	Symbol	R_PERM_RWX		6510040						
ANR	6510234	Symbol	MEM_PRIVATE		6510040						
ANR	6510235	Function	add_map_reg	69:0:1292:1483							
ANR	6510236	FunctionDef	"add_map_reg (RList * list , const char * name , MEMORY_BASIC_INFORMATION * mbi)"		6510235	0					
ANR	6510237	CompoundStatement		69:99:1391:1483	6510235	0					
ANR	6510238	ReturnStatement	"return add_map ( list , name , ( ut64 ) ( size_t ) mbi -> BaseAddress , ( ut64 ) mbi -> RegionSize , mbi ) ;"	70:1:1394:1481	6510235	0	True				
ANR	6510239	CallExpression	"add_map ( list , name , ( ut64 ) ( size_t ) mbi -> BaseAddress , ( ut64 ) mbi -> RegionSize , mbi )"		6510235	0					
ANR	6510240	Callee	add_map		6510235	0					
ANR	6510241	Identifier	add_map		6510235	0					
ANR	6510242	ArgumentList	list		6510235	1					
ANR	6510243	Argument	list		6510235	0					
ANR	6510244	Identifier	list		6510235	0					
ANR	6510245	Argument	name		6510235	1					
ANR	6510246	Identifier	name		6510235	0					
ANR	6510247	Argument	( ut64 ) ( size_t ) mbi -> BaseAddress		6510235	2					
ANR	6510248	CastExpression	( ut64 ) ( size_t ) mbi -> BaseAddress		6510235	0					
ANR	6510249	CastTarget	ut64		6510235	0					
ANR	6510250	CastExpression	( size_t ) mbi -> BaseAddress		6510235	1					
ANR	6510251	CastTarget	size_t		6510235	0					
ANR	6510252	PtrMemberAccess	mbi -> BaseAddress		6510235	1					
ANR	6510253	Identifier	mbi		6510235	0					
ANR	6510254	Identifier	BaseAddress		6510235	1					
ANR	6510255	Argument	( ut64 ) mbi -> RegionSize		6510235	3					
ANR	6510256	CastExpression	( ut64 ) mbi -> RegionSize		6510235	0					
ANR	6510257	CastTarget	ut64		6510235	0					
ANR	6510258	PtrMemberAccess	mbi -> RegionSize		6510235	1					
ANR	6510259	Identifier	mbi		6510235	0					
ANR	6510260	Identifier	RegionSize		6510235	1					
ANR	6510261	Argument	mbi		6510235	4					
ANR	6510262	Identifier	mbi		6510235	0					
ANR	6510263	ReturnType	static inline RDebugMap *		6510235	1					
ANR	6510264	Identifier	add_map_reg		6510235	2					
ANR	6510265	ParameterList	"RList * list , const char * name , MEMORY_BASIC_INFORMATION * mbi"		6510235	3					
ANR	6510266	Parameter	RList * list	69:37:1329:1339	6510235	0	True				
ANR	6510267	ParameterType	RList *		6510235	0					
ANR	6510268	Identifier	list		6510235	1					
ANR	6510269	Parameter	const char * name	69:50:1342:1357	6510235	1	True				
ANR	6510270	ParameterType	const char *		6510235	0					
ANR	6510271	Identifier	name		6510235	1					
ANR	6510272	Parameter	MEMORY_BASIC_INFORMATION * mbi	69:68:1360:1388	6510235	2	True				
ANR	6510273	ParameterType	MEMORY_BASIC_INFORMATION *		6510235	0					
ANR	6510274	Identifier	mbi		6510235	1					
ANR	6510275	CFGEntryNode	ENTRY		6510235		True				
ANR	6510276	CFGExitNode	EXIT		6510235		True				
ANR	6510277	Symbol	mbi -> BaseAddress		6510235						
ANR	6510278	Symbol	add_map		6510235						
ANR	6510279	Symbol	mbi		6510235						
ANR	6510280	Symbol	name		6510235						
ANR	6510281	Symbol	mbi -> RegionSize		6510235						
ANR	6510282	Symbol	list		6510235						
ANR	6510283	Symbol	* mbi		6510235						
ANR	6510284	Function	r_w32_dbg_modules	73:0:1486:2537							
ANR	6510285	FunctionDef	r_w32_dbg_modules (RDebug * dbg)		6510284	0					
ANR	6510286	CompoundStatement		73:44:1530:2537	6510284	0					
ANR	6510287	IfStatement	if ( dbg -> main_pid == - 1 )		6510284	0					
ANR	6510288	Condition	dbg -> main_pid == - 1	74:5:1537:1555	6510284	0	True				
ANR	6510289	EqualityExpression	dbg -> main_pid == - 1		6510284	0		==			
ANR	6510290	PtrMemberAccess	dbg -> main_pid		6510284	0					
ANR	6510291	Identifier	dbg		6510284	0					
ANR	6510292	Identifier	main_pid		6510284	1					
ANR	6510293	UnaryOperationExpression	- 1		6510284	1					
ANR	6510294	UnaryOperator	-		6510284	0					
ANR	6510295	PrimaryExpression	1		6510284	1					
ANR	6510296	CompoundStatement		2:26:27:27	6510284	1					
ANR	6510297	ReturnStatement	return NULL ;	75:2:1562:1573	6510284	0	True				
ANR	6510298	Identifier	NULL		6510284	0					
ANR	6510299	IdentifierDeclStatement	MODULEENTRY32 me ;	77:1:1579:1595	6510284	1	True				
ANR	6510300	IdentifierDecl	me		6510284	0					
ANR	6510301	IdentifierDeclType	MODULEENTRY32		6510284	0					
ANR	6510302	Identifier	me		6510284	1					
ANR	6510303	IdentifierDeclStatement	RList * list = r_list_newf ( free ) ;	78:1:1598:1630	6510284	2	True				
ANR	6510304	IdentifierDecl	* list = r_list_newf ( free )		6510284	0					
ANR	6510305	IdentifierDeclType	RList *		6510284	0					
ANR	6510306	Identifier	list		6510284	1					
ANR	6510307	AssignmentExpression	* list = r_list_newf ( free )		6510284	2		=			
ANR	6510308	Identifier	list		6510284	0					
ANR	6510309	CallExpression	r_list_newf ( free )		6510284	1					
ANR	6510310	Callee	r_list_newf		6510284	0					
ANR	6510311	Identifier	r_list_newf		6510284	0					
ANR	6510312	ArgumentList	free		6510284	1					
ANR	6510313	Argument	free		6510284	0					
ANR	6510314	Identifier	free		6510284	0					
ANR	6510315	IdentifierDeclStatement	DWORD flags = TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32 ;	79:1:1633:1686	6510284	3	True				
ANR	6510316	IdentifierDecl	flags = TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32		6510284	0					
ANR	6510317	IdentifierDeclType	DWORD		6510284	0					
ANR	6510318	Identifier	flags		6510284	1					
ANR	6510319	AssignmentExpression	flags = TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32		6510284	2		=			
ANR	6510320	Identifier	flags		6510284	0					
ANR	6510321	InclusiveOrExpression	TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32		6510284	1		|			
ANR	6510322	Identifier	TH32CS_SNAPMODULE		6510284	0					
ANR	6510323	Identifier	TH32CS_SNAPMODULE32		6510284	1					
ANR	6510324	IdentifierDeclStatement	"HANDLE h_mod_snap = w32_CreateToolhelp32Snapshot ( flags , dbg -> pid ) ;"	80:1:1689:1755	6510284	4	True				
ANR	6510325	IdentifierDecl	"h_mod_snap = w32_CreateToolhelp32Snapshot ( flags , dbg -> pid )"		6510284	0					
ANR	6510326	IdentifierDeclType	HANDLE		6510284	0					
ANR	6510327	Identifier	h_mod_snap		6510284	1					
ANR	6510328	AssignmentExpression	"h_mod_snap = w32_CreateToolhelp32Snapshot ( flags , dbg -> pid )"		6510284	2		=			
ANR	6510329	Identifier	h_mod_snap		6510284	0					
ANR	6510330	CallExpression	"w32_CreateToolhelp32Snapshot ( flags , dbg -> pid )"		6510284	1					
ANR	6510331	Callee	w32_CreateToolhelp32Snapshot		6510284	0					
ANR	6510332	Identifier	w32_CreateToolhelp32Snapshot		6510284	0					
ANR	6510333	ArgumentList	flags		6510284	1					
ANR	6510334	Argument	flags		6510284	0					
ANR	6510335	Identifier	flags		6510284	0					
ANR	6510336	Argument	dbg -> pid		6510284	1					
ANR	6510337	PtrMemberAccess	dbg -> pid		6510284	0					
ANR	6510338	Identifier	dbg		6510284	0					
ANR	6510339	Identifier	pid		6510284	1					
ANR	6510340	IfStatement	if ( h_mod_snap == INVALID_HANDLE_VALUE )		6510284	5					
ANR	6510341	Condition	h_mod_snap == INVALID_HANDLE_VALUE	82:5:1763:1796	6510284	0	True				
ANR	6510342	EqualityExpression	h_mod_snap == INVALID_HANDLE_VALUE		6510284	0		==			
ANR	6510343	Identifier	h_mod_snap		6510284	0					
ANR	6510344	Identifier	INVALID_HANDLE_VALUE		6510284	1					
ANR	6510345	CompoundStatement		10:41:268:268	6510284	1					
ANR	6510346	ExpressionStatement	"r_sys_perror ( ""r_w32_dbg_modules/CreateToolhelp32Snapshot"" )"	83:2:1803:1862	6510284	0	True				
ANR	6510347	CallExpression	"r_sys_perror ( ""r_w32_dbg_modules/CreateToolhelp32Snapshot"" )"		6510284	0					
ANR	6510348	Callee	r_sys_perror		6510284	0					
ANR	6510349	Identifier	r_sys_perror		6510284	0					
ANR	6510350	ArgumentList	"""r_w32_dbg_modules/CreateToolhelp32Snapshot"""		6510284	1					
ANR	6510351	Argument	"""r_w32_dbg_modules/CreateToolhelp32Snapshot"""		6510284	0					
ANR	6510352	PrimaryExpression	"""r_w32_dbg_modules/CreateToolhelp32Snapshot"""		6510284	0					
ANR	6510353	GotoStatement	goto err_w32_dbg_modules ;	84:2:1866:1890	6510284	1	True				
ANR	6510354	Identifier	err_w32_dbg_modules		6510284	0					
ANR	6510355	ExpressionStatement	me . dwSize = sizeof ( MODULEENTRY32 )	86:1:1896:1930	6510284	6	True				
ANR	6510356	AssignmentExpression	me . dwSize = sizeof ( MODULEENTRY32 )		6510284	0		=			
ANR	6510357	MemberAccess	me . dwSize		6510284	0					
ANR	6510358	Identifier	me		6510284	0					
ANR	6510359	Identifier	dwSize		6510284	1					
ANR	6510360	SizeofExpression	sizeof ( MODULEENTRY32 )		6510284	1					
ANR	6510361	Sizeof	sizeof		6510284	0					
ANR	6510362	SizeofOperand	MODULEENTRY32		6510284	1					
ANR	6510363	IfStatement	"if ( ! Module32First ( h_mod_snap , & me ) )"		6510284	7					
ANR	6510364	Condition	"! Module32First ( h_mod_snap , & me )"	87:5:1937:1968	6510284	0	True				
ANR	6510365	UnaryOperationExpression	"! Module32First ( h_mod_snap , & me )"		6510284	0					
ANR	6510366	UnaryOperator	!		6510284	0					
ANR	6510367	CallExpression	"Module32First ( h_mod_snap , & me )"		6510284	1					
ANR	6510368	Callee	Module32First		6510284	0					
ANR	6510369	Identifier	Module32First		6510284	0					
ANR	6510370	ArgumentList	h_mod_snap		6510284	1					
ANR	6510371	Argument	h_mod_snap		6510284	0					
ANR	6510372	Identifier	h_mod_snap		6510284	0					
ANR	6510373	Argument	& me		6510284	1					
ANR	6510374	UnaryOperationExpression	& me		6510284	0					
ANR	6510375	UnaryOperator	&		6510284	0					
ANR	6510376	Identifier	me		6510284	1					
ANR	6510377	CompoundStatement		15:39:440:440	6510284	1					
ANR	6510378	ExpressionStatement	"r_sys_perror ( ""r_w32_dbg_modules/Module32First"" )"	88:2:1975:2023	6510284	0	True				
ANR	6510379	CallExpression	"r_sys_perror ( ""r_w32_dbg_modules/Module32First"" )"		6510284	0					
ANR	6510380	Callee	r_sys_perror		6510284	0					
ANR	6510381	Identifier	r_sys_perror		6510284	0					
ANR	6510382	ArgumentList	"""r_w32_dbg_modules/Module32First"""		6510284	1					
ANR	6510383	Argument	"""r_w32_dbg_modules/Module32First"""		6510284	0					
ANR	6510384	PrimaryExpression	"""r_w32_dbg_modules/Module32First"""		6510284	0					
ANR	6510385	GotoStatement	goto err_w32_dbg_modules ;	89:2:2027:2051	6510284	1	True				
ANR	6510386	Identifier	err_w32_dbg_modules		6510284	0					
ANR	6510387	DoStatement	do		6510284	8					
ANR	6510388	CompoundStatement		22:2:635:718	6510284	0					
ANR	6510389	IdentifierDeclStatement	ut64 baddr = ( ut64 ) ( size_t ) me . modBaseAddr ;	92:2:2064:2105	6510284	0	True				
ANR	6510390	IdentifierDecl	baddr = ( ut64 ) ( size_t ) me . modBaseAddr		6510284	0					
ANR	6510391	IdentifierDeclType	ut64		6510284	0					
ANR	6510392	Identifier	baddr		6510284	1					
ANR	6510393	AssignmentExpression	baddr = ( ut64 ) ( size_t ) me . modBaseAddr		6510284	2		=			
ANR	6510394	Identifier	baddr		6510284	0					
ANR	6510395	CastExpression	( ut64 ) ( size_t ) me . modBaseAddr		6510284	1					
ANR	6510396	CastTarget	ut64		6510284	0					
ANR	6510397	CastExpression	( size_t ) me . modBaseAddr		6510284	1					
ANR	6510398	CastTarget	size_t		6510284	0					
ANR	6510399	MemberAccess	me . modBaseAddr		6510284	1					
ANR	6510400	Identifier	me		6510284	0					
ANR	6510401	Identifier	modBaseAddr		6510284	1					
ANR	6510402	IdentifierDeclStatement	char * mod_name = r_sys_conv_win_to_utf8 ( me . szModule ) ;	93:2:2109:2162	6510284	1	True				
ANR	6510403	IdentifierDecl	* mod_name = r_sys_conv_win_to_utf8 ( me . szModule )		6510284	0					
ANR	6510404	IdentifierDeclType	char *		6510284	0					
ANR	6510405	Identifier	mod_name		6510284	1					
ANR	6510406	AssignmentExpression	* mod_name = r_sys_conv_win_to_utf8 ( me . szModule )		6510284	2		=			
ANR	6510407	Identifier	mod_name		6510284	0					
ANR	6510408	CallExpression	r_sys_conv_win_to_utf8 ( me . szModule )		6510284	1					
ANR	6510409	Callee	r_sys_conv_win_to_utf8		6510284	0					
ANR	6510410	Identifier	r_sys_conv_win_to_utf8		6510284	0					
ANR	6510411	ArgumentList	me . szModule		6510284	1					
ANR	6510412	Argument	me . szModule		6510284	0					
ANR	6510413	MemberAccess	me . szModule		6510284	0					
ANR	6510414	Identifier	me		6510284	0					
ANR	6510415	Identifier	szModule		6510284	1					
ANR	6510416	IdentifierDeclStatement	"RDebugMap * dbgmap = r_debug_map_new ( mod_name , baddr , baddr + me . modBaseSize , 0 , 0 ) ;"	94:2:2166:2249	6510284	2	True				
ANR	6510417	IdentifierDecl	"* dbgmap = r_debug_map_new ( mod_name , baddr , baddr + me . modBaseSize , 0 , 0 )"		6510284	0					
ANR	6510418	IdentifierDeclType	RDebugMap *		6510284	0					
ANR	6510419	Identifier	dbgmap		6510284	1					
ANR	6510420	AssignmentExpression	"* dbgmap = r_debug_map_new ( mod_name , baddr , baddr + me . modBaseSize , 0 , 0 )"		6510284	2		=			
ANR	6510421	Identifier	dbgmap		6510284	0					
ANR	6510422	CallExpression	"r_debug_map_new ( mod_name , baddr , baddr + me . modBaseSize , 0 , 0 )"		6510284	1					
ANR	6510423	Callee	r_debug_map_new		6510284	0					
ANR	6510424	Identifier	r_debug_map_new		6510284	0					
ANR	6510425	ArgumentList	mod_name		6510284	1					
ANR	6510426	Argument	mod_name		6510284	0					
ANR	6510427	Identifier	mod_name		6510284	0					
ANR	6510428	Argument	baddr		6510284	1					
ANR	6510429	Identifier	baddr		6510284	0					
ANR	6510430	Argument	baddr + me . modBaseSize		6510284	2					
ANR	6510431	AdditiveExpression	baddr + me . modBaseSize		6510284	0		+			
ANR	6510432	Identifier	baddr		6510284	0					
ANR	6510433	MemberAccess	me . modBaseSize		6510284	1					
ANR	6510434	Identifier	me		6510284	0					
ANR	6510435	Identifier	modBaseSize		6510284	1					
ANR	6510436	Argument	0		6510284	3					
ANR	6510437	PrimaryExpression	0		6510284	0					
ANR	6510438	Argument	0		6510284	4					
ANR	6510439	PrimaryExpression	0		6510284	0					
ANR	6510440	ExpressionStatement	free ( mod_name )	95:2:2253:2268	6510284	3	True				
ANR	6510441	CallExpression	free ( mod_name )		6510284	0					
ANR	6510442	Callee	free		6510284	0					
ANR	6510443	Identifier	free		6510284	0					
ANR	6510444	ArgumentList	mod_name		6510284	1					
ANR	6510445	Argument	mod_name		6510284	0					
ANR	6510446	Identifier	mod_name		6510284	0					
ANR	6510447	IfStatement	if ( dbgmap )		6510284	4					
ANR	6510448	Condition	dbgmap	96:6:2276:2281	6510284	0	True				
ANR	6510449	Identifier	dbgmap		6510284	0					
ANR	6510450	CompoundStatement		24:14:753:753	6510284	1					
ANR	6510451	ExpressionStatement	dbgmap -> file = r_sys_conv_win_to_utf8 ( me . szExePath )	97:3:2289:2341	6510284	0	True				
ANR	6510452	AssignmentExpression	dbgmap -> file = r_sys_conv_win_to_utf8 ( me . szExePath )		6510284	0		=			
ANR	6510453	PtrMemberAccess	dbgmap -> file		6510284	0					
ANR	6510454	Identifier	dbgmap		6510284	0					
ANR	6510455	Identifier	file		6510284	1					
ANR	6510456	CallExpression	r_sys_conv_win_to_utf8 ( me . szExePath )		6510284	1					
ANR	6510457	Callee	r_sys_conv_win_to_utf8		6510284	0					
ANR	6510458	Identifier	r_sys_conv_win_to_utf8		6510284	0					
ANR	6510459	ArgumentList	me . szExePath		6510284	1					
ANR	6510460	Argument	me . szExePath		6510284	0					
ANR	6510461	MemberAccess	me . szExePath		6510284	0					
ANR	6510462	Identifier	me		6510284	0					
ANR	6510463	Identifier	szExePath		6510284	1					
ANR	6510464	IfStatement	if ( dbgmap -> file )		6510284	1					
ANR	6510465	Condition	dbgmap -> file	98:7:2350:2361	6510284	0	True				
ANR	6510466	PtrMemberAccess	dbgmap -> file		6510284	0					
ANR	6510467	Identifier	dbgmap		6510284	0					
ANR	6510468	Identifier	file		6510284	1					
ANR	6510469	CompoundStatement		26:21:833:833	6510284	1					
ANR	6510470	ExpressionStatement	"r_list_append ( list , dbgmap )"	99:4:2370:2398	6510284	0	True				
ANR	6510471	CallExpression	"r_list_append ( list , dbgmap )"		6510284	0					
ANR	6510472	Callee	r_list_append		6510284	0					
ANR	6510473	Identifier	r_list_append		6510284	0					
ANR	6510474	ArgumentList	list		6510284	1					
ANR	6510475	Argument	list		6510284	0					
ANR	6510476	Identifier	list		6510284	0					
ANR	6510477	Argument	dbgmap		6510284	1					
ANR	6510478	Identifier	dbgmap		6510284	0					
ANR	6510479	Condition	"Module32Next ( h_mod_snap , & me )"	102:10:2419:2448	6510284	1	True				
ANR	6510480	CallExpression	"Module32Next ( h_mod_snap , & me )"		6510284	0					
ANR	6510481	Callee	Module32Next		6510284	0					
ANR	6510482	Identifier	Module32Next		6510284	0					
ANR	6510483	ArgumentList	h_mod_snap		6510284	1					
ANR	6510484	Argument	h_mod_snap		6510284	0					
ANR	6510485	Identifier	h_mod_snap		6510284	0					
ANR	6510486	Argument	& me		6510284	1					
ANR	6510487	UnaryOperationExpression	& me		6510284	0					
ANR	6510488	UnaryOperator	&		6510284	0					
ANR	6510489	Identifier	me		6510284	1					
ANR	6510490	Label	err_w32_dbg_modules :	103:0:2452:2471	6510284	9	True				
ANR	6510491	Identifier	err_w32_dbg_modules		6510284	0					
ANR	6510492	IfStatement	if ( h_mod_snap )		6510284	10					
ANR	6510493	Condition	h_mod_snap	104:5:2478:2487	6510284	0	True				
ANR	6510494	Identifier	h_mod_snap		6510284	0					
ANR	6510495	CompoundStatement		32:17:959:959	6510284	1					
ANR	6510496	ExpressionStatement	CloseHandle ( h_mod_snap )	105:2:2494:2518	6510284	0	True				
ANR	6510497	CallExpression	CloseHandle ( h_mod_snap )		6510284	0					
ANR	6510498	Callee	CloseHandle		6510284	0					
ANR	6510499	Identifier	CloseHandle		6510284	0					
ANR	6510500	ArgumentList	h_mod_snap		6510284	1					
ANR	6510501	Argument	h_mod_snap		6510284	0					
ANR	6510502	Identifier	h_mod_snap		6510284	0					
ANR	6510503	ReturnStatement	return list ;	107:1:2524:2535	6510284	11	True				
ANR	6510504	Identifier	list		6510284	0					
ANR	6510505	ReturnType	R_API RList *		6510284	1					
ANR	6510506	Identifier	r_w32_dbg_modules		6510284	2					
ANR	6510507	ParameterList	RDebug * dbg		6510284	3					
ANR	6510508	Parameter	RDebug * dbg	73:31:1517:1527	6510284	0	True				
ANR	6510509	ParameterType	RDebug *		6510284	0					
ANR	6510510	Identifier	dbg		6510284	1					
ANR	6510511	CFGEntryNode	ENTRY		6510284		True				
ANR	6510512	CFGExitNode	EXIT		6510284		True				
ANR	6510513	Symbol	TH32CS_SNAPMODULE		6510284						
ANR	6510514	Symbol	baddr		6510284						
ANR	6510515	Symbol	Module32First		6510284						
ANR	6510516	Symbol	& me		6510284						
ANR	6510517	Symbol	me . modBaseAddr		6510284						
ANR	6510518	Symbol	dbg -> main_pid		6510284						
ANR	6510519	Symbol	me . szExePath		6510284						
ANR	6510520	Symbol	flags		6510284						
ANR	6510521	Symbol	w32_CreateToolhelp32Snapshot		6510284						
ANR	6510522	Symbol	me . modBaseSize		6510284						
ANR	6510523	Symbol	me . dwSize		6510284						
ANR	6510524	Symbol	me		6510284						
ANR	6510525	Symbol	h_mod_snap		6510284						
ANR	6510526	Symbol	free		6510284						
ANR	6510527	Symbol	NULL		6510284						
ANR	6510528	Symbol	r_list_newf		6510284						
ANR	6510529	Symbol	r_debug_map_new		6510284						
ANR	6510530	Symbol	dbg		6510284						
ANR	6510531	Symbol	dbgmap		6510284						
ANR	6510532	Symbol	me . szModule		6510284						
ANR	6510533	Symbol	* dbg		6510284						
ANR	6510534	Symbol	list		6510284						
ANR	6510535	Symbol	INVALID_HANDLE_VALUE		6510284						
ANR	6510536	Symbol	Module32Next		6510284						
ANR	6510537	Symbol	mod_name		6510284						
ANR	6510538	Symbol	dbg -> pid		6510284						
ANR	6510539	Symbol	dbgmap -> file		6510284						
ANR	6510540	Symbol	TH32CS_SNAPMODULE32		6510284						
ANR	6510541	Symbol	* dbgmap		6510284						
ANR	6510542	Symbol	r_sys_conv_win_to_utf8		6510284						
ANR	6510543	Function	is_pe_hdr	110:0:2540:2957							
ANR	6510544	FunctionDef	is_pe_hdr (unsigned char * pe_hdr)		6510543	0					
ANR	6510545	CompoundStatement		110:45:2585:2957	6510543	0					
ANR	6510546	IdentifierDeclStatement	IMAGE_DOS_HEADER * dos_header = ( IMAGE_DOS_HEADER * ) pe_hdr ;	111:1:2588:2645	6510543	0	True				
ANR	6510547	IdentifierDecl	* dos_header = ( IMAGE_DOS_HEADER * ) pe_hdr		6510543	0					
ANR	6510548	IdentifierDeclType	IMAGE_DOS_HEADER *		6510543	0					
ANR	6510549	Identifier	dos_header		6510543	1					
ANR	6510550	AssignmentExpression	* dos_header = ( IMAGE_DOS_HEADER * ) pe_hdr		6510543	2		=			
ANR	6510551	Identifier	dos_header		6510543	0					
ANR	6510552	CastExpression	( IMAGE_DOS_HEADER * ) pe_hdr		6510543	1					
ANR	6510553	CastTarget	IMAGE_DOS_HEADER *		6510543	0					
ANR	6510554	Identifier	pe_hdr		6510543	1					
ANR	6510555	IdentifierDeclStatement	IMAGE_NT_HEADERS * nt_headers ;	112:1:2648:2676	6510543	1	True				
ANR	6510556	IdentifierDecl	* nt_headers		6510543	0					
ANR	6510557	IdentifierDeclType	IMAGE_NT_HEADERS *		6510543	0					
ANR	6510558	Identifier	nt_headers		6510543	1					
ANR	6510559	IfStatement	if ( dos_header -> e_magic == IMAGE_DOS_SIGNATURE )		6510543	2					
ANR	6510560	Condition	dos_header -> e_magic == IMAGE_DOS_SIGNATURE	114:5:2684:2725	6510543	0	True				
ANR	6510561	EqualityExpression	dos_header -> e_magic == IMAGE_DOS_SIGNATURE		6510543	0		==			
ANR	6510562	PtrMemberAccess	dos_header -> e_magic		6510543	0					
ANR	6510563	Identifier	dos_header		6510543	0					
ANR	6510564	Identifier	e_magic		6510543	1					
ANR	6510565	Identifier	IMAGE_DOS_SIGNATURE		6510543	1					
ANR	6510566	CompoundStatement		5:49:142:142	6510543	1					
ANR	6510567	ExpressionStatement	nt_headers = ( IMAGE_NT_HEADERS * ) ( ( char * ) dos_header + dos_header -> e_lfanew )	115:2:2732:2812	6510543	0	True				
ANR	6510568	AssignmentExpression	nt_headers = ( IMAGE_NT_HEADERS * ) ( ( char * ) dos_header + dos_header -> e_lfanew )		6510543	0		=			
ANR	6510569	Identifier	nt_headers		6510543	0					
ANR	6510570	CastExpression	( IMAGE_NT_HEADERS * ) ( ( char * ) dos_header + dos_header -> e_lfanew )		6510543	1					
ANR	6510571	CastTarget	IMAGE_NT_HEADERS *		6510543	0					
ANR	6510572	AdditiveExpression	( char * ) dos_header + dos_header -> e_lfanew		6510543	1		+			
ANR	6510573	CastExpression	( char * ) dos_header		6510543	0					
ANR	6510574	CastTarget	char *		6510543	0					
ANR	6510575	Identifier	dos_header		6510543	1					
ANR	6510576	PtrMemberAccess	dos_header -> e_lfanew		6510543	1					
ANR	6510577	Identifier	dos_header		6510543	0					
ANR	6510578	Identifier	e_lfanew		6510543	1					
ANR	6510579	IfStatement	if ( nt_headers -> Signature == IMAGE_NT_SIGNATURE )		6510543	1					
ANR	6510580	Condition	nt_headers -> Signature == IMAGE_NT_SIGNATURE	118:6:2878:2920	6510543	0	True				
ANR	6510581	EqualityExpression	nt_headers -> Signature == IMAGE_NT_SIGNATURE		6510543	0		==			
ANR	6510582	PtrMemberAccess	nt_headers -> Signature		6510543	0					
ANR	6510583	Identifier	nt_headers		6510543	0					
ANR	6510584	Identifier	Signature		6510543	1					
ANR	6510585	Identifier	IMAGE_NT_SIGNATURE		6510543	1					
ANR	6510586	ReturnStatement	return true ;	119:3:2926:2937	6510543	1	True				
ANR	6510587	Identifier	true		6510543	0					
ANR	6510588	ReturnStatement	return false ;	121:1:2943:2955	6510543	3	True				
ANR	6510589	Identifier	false		6510543	0					
ANR	6510590	ReturnType	static bool		6510543	1					
ANR	6510591	Identifier	is_pe_hdr		6510543	2					
ANR	6510592	ParameterList	unsigned char * pe_hdr		6510543	3					
ANR	6510593	Parameter	unsigned char * pe_hdr	110:22:2562:2582	6510543	0	True				
ANR	6510594	ParameterType	unsigned char *		6510543	0					
ANR	6510595	Identifier	pe_hdr		6510543	1					
ANR	6510596	CFGEntryNode	ENTRY		6510543		True				
ANR	6510597	CFGExitNode	EXIT		6510543		True				
ANR	6510598	Symbol	* nt_headers		6510543						
ANR	6510599	Symbol	dos_header -> e_magic		6510543						
ANR	6510600	Symbol	dos_header -> e_lfanew		6510543						
ANR	6510601	Symbol	pe_hdr		6510543						
ANR	6510602	Symbol	IMAGE_DOS_SIGNATURE		6510543						
ANR	6510603	Symbol	nt_headers -> Signature		6510543						
ANR	6510604	Symbol	true		6510543						
ANR	6510605	Symbol	false		6510543						
ANR	6510606	Symbol	* dos_header		6510543						
ANR	6510607	Symbol	nt_headers		6510543						
ANR	6510608	Symbol	dos_header		6510543						
ANR	6510609	Symbol	IMAGE_NT_SIGNATURE		6510543						
ANR	6510610	Function	set_mod_inf	124:0:2960:4486							
ANR	6510611	FunctionDef	"set_mod_inf (HANDLE h_proc , RDebugMap * map , RWinModInfo * mod)"		6510610	0					
ANR	6510612	CompoundStatement		124:72:3032:4486	6510610	0					
ANR	6510613	IdentifierDeclStatement	IMAGE_DOS_HEADER * dos_hdr ;	125:1:3035:3060	6510610	0	True				
ANR	6510614	IdentifierDecl	* dos_hdr		6510610	0					
ANR	6510615	IdentifierDeclType	IMAGE_DOS_HEADER *		6510610	0					
ANR	6510616	Identifier	dos_hdr		6510610	1					
ANR	6510617	IdentifierDeclStatement	IMAGE_NT_HEADERS * nt_hdrs ;	126:1:3063:3088	6510610	1	True				
ANR	6510618	IdentifierDecl	* nt_hdrs		6510610	0					
ANR	6510619	IdentifierDeclType	IMAGE_NT_HEADERS *		6510610	0					
ANR	6510620	Identifier	nt_hdrs		6510610	1					
ANR	6510621	IdentifierDeclStatement	IMAGE_NT_HEADERS32 * nt_hdrs32 ;	127:1:3091:3120	6510610	2	True				
ANR	6510622	IdentifierDecl	* nt_hdrs32		6510610	0					
ANR	6510623	IdentifierDeclType	IMAGE_NT_HEADERS32 *		6510610	0					
ANR	6510624	Identifier	nt_hdrs32		6510610	1					
ANR	6510625	IdentifierDeclStatement	IMAGE_SECTION_HEADER * sect_hdr ;	128:1:3123:3153	6510610	3	True				
ANR	6510626	IdentifierDecl	* sect_hdr		6510610	0					
ANR	6510627	IdentifierDeclType	IMAGE_SECTION_HEADER *		6510610	0					
ANR	6510628	Identifier	sect_hdr		6510610	1					
ANR	6510629	IdentifierDeclStatement	ut8 pe_hdr [ 0x1000 ] ;	129:1:3156:3174	6510610	4	True				
ANR	6510630	IdentifierDecl	pe_hdr [ 0x1000 ]		6510610	0					
ANR	6510631	IdentifierDeclType	ut8 [ 0x1000 ]		6510610	0					
ANR	6510632	Identifier	pe_hdr		6510610	1					
ANR	6510633	PrimaryExpression	0x1000		6510610	2					
ANR	6510634	IdentifierDeclStatement	SIZE_T len ;	130:1:3177:3187	6510610	5	True				
ANR	6510635	IdentifierDecl	len		6510610	0					
ANR	6510636	IdentifierDeclType	SIZE_T		6510610	0					
ANR	6510637	Identifier	len		6510610	1					
ANR	6510638	IdentifierDeclStatement	int mod_inf_fill ;	131:1:3190:3206	6510610	6	True				
ANR	6510639	IdentifierDecl	mod_inf_fill		6510610	0					
ANR	6510640	IdentifierDeclType	int		6510610	0					
ANR	6510641	Identifier	mod_inf_fill		6510610	1					
ANR	6510642	ExpressionStatement	len = 0	133:1:3210:3217	6510610	7	True				
ANR	6510643	AssignmentExpression	len = 0		6510610	0		=			
ANR	6510644	Identifier	len		6510610	0					
ANR	6510645	PrimaryExpression	0		6510610	1					
ANR	6510646	ExpressionStatement	sect_hdr = NULL	134:1:3220:3235	6510610	8	True				
ANR	6510647	AssignmentExpression	sect_hdr = NULL		6510610	0		=			
ANR	6510648	Identifier	sect_hdr		6510610	0					
ANR	6510649	Identifier	NULL		6510610	1					
ANR	6510650	ExpressionStatement	mod_inf_fill = - 1	135:1:3238:3255	6510610	9	True				
ANR	6510651	AssignmentExpression	mod_inf_fill = - 1		6510610	0		=			
ANR	6510652	Identifier	mod_inf_fill		6510610	0					
ANR	6510653	UnaryOperationExpression	- 1		6510610	1					
ANR	6510654	UnaryOperator	-		6510610	0					
ANR	6510655	PrimaryExpression	1		6510610	1					
ANR	6510656	ExpressionStatement	"ReadProcessMemory ( h_proc , ( LPCVOID ) ( size_t ) map -> addr , ( LPVOID ) pe_hdr , sizeof ( pe_hdr ) , & len )"	136:1:3258:3351	6510610	10	True				
ANR	6510657	CallExpression	"ReadProcessMemory ( h_proc , ( LPCVOID ) ( size_t ) map -> addr , ( LPVOID ) pe_hdr , sizeof ( pe_hdr ) , & len )"		6510610	0					
ANR	6510658	Callee	ReadProcessMemory		6510610	0					
ANR	6510659	Identifier	ReadProcessMemory		6510610	0					
ANR	6510660	ArgumentList	h_proc		6510610	1					
ANR	6510661	Argument	h_proc		6510610	0					
ANR	6510662	Identifier	h_proc		6510610	0					
ANR	6510663	Argument	( LPCVOID ) ( size_t ) map -> addr		6510610	1					
ANR	6510664	CastExpression	( LPCVOID ) ( size_t ) map -> addr		6510610	0					
ANR	6510665	CastTarget	LPCVOID		6510610	0					
ANR	6510666	CastExpression	( size_t ) map -> addr		6510610	1					
ANR	6510667	CastTarget	size_t		6510610	0					
ANR	6510668	PtrMemberAccess	map -> addr		6510610	1					
ANR	6510669	Identifier	map		6510610	0					
ANR	6510670	Identifier	addr		6510610	1					
ANR	6510671	Argument	( LPVOID ) pe_hdr		6510610	2					
ANR	6510672	CastExpression	( LPVOID ) pe_hdr		6510610	0					
ANR	6510673	CastTarget	LPVOID		6510610	0					
ANR	6510674	Identifier	pe_hdr		6510610	1					
ANR	6510675	Argument	sizeof ( pe_hdr )		6510610	3					
ANR	6510676	SizeofExpression	sizeof ( pe_hdr )		6510610	0					
ANR	6510677	Sizeof	sizeof		6510610	0					
ANR	6510678	SizeofOperand	pe_hdr		6510610	1					
ANR	6510679	Argument	& len		6510610	4					
ANR	6510680	UnaryOperationExpression	& len		6510610	0					
ANR	6510681	UnaryOperator	&		6510610	0					
ANR	6510682	Identifier	len		6510610	1					
ANR	6510683	IfStatement	if ( len == ( SIZE_T ) sizeof ( pe_hdr ) && is_pe_hdr ( pe_hdr ) )		6510610	11					
ANR	6510684	Condition	len == ( SIZE_T ) sizeof ( pe_hdr ) && is_pe_hdr ( pe_hdr )	137:5:3358:3409	6510610	0	True				
ANR	6510685	AndExpression	len == ( SIZE_T ) sizeof ( pe_hdr ) && is_pe_hdr ( pe_hdr )		6510610	0		&&			
ANR	6510686	EqualityExpression	len == ( SIZE_T ) sizeof ( pe_hdr )		6510610	0		==			
ANR	6510687	Identifier	len		6510610	0					
ANR	6510688	CastExpression	( SIZE_T ) sizeof ( pe_hdr )		6510610	1					
ANR	6510689	CastTarget	SIZE_T		6510610	0					
ANR	6510690	SizeofExpression	sizeof ( pe_hdr )		6510610	1					
ANR	6510691	Sizeof	sizeof		6510610	0					
ANR	6510692	SizeofOperand	pe_hdr		6510610	1					
ANR	6510693	CallExpression	is_pe_hdr ( pe_hdr )		6510610	1					
ANR	6510694	Callee	is_pe_hdr		6510610	0					
ANR	6510695	Identifier	is_pe_hdr		6510610	0					
ANR	6510696	ArgumentList	pe_hdr		6510610	1					
ANR	6510697	Argument	pe_hdr		6510610	0					
ANR	6510698	Identifier	pe_hdr		6510610	0					
ANR	6510699	CompoundStatement		14:59:379:379	6510610	1					
ANR	6510700	ExpressionStatement	dos_hdr = ( IMAGE_DOS_HEADER * ) pe_hdr	138:2:3416:3452	6510610	0	True				
ANR	6510701	AssignmentExpression	dos_hdr = ( IMAGE_DOS_HEADER * ) pe_hdr		6510610	0		=			
ANR	6510702	Identifier	dos_hdr		6510610	0					
ANR	6510703	CastExpression	( IMAGE_DOS_HEADER * ) pe_hdr		6510610	1					
ANR	6510704	CastTarget	IMAGE_DOS_HEADER *		6510610	0					
ANR	6510705	Identifier	pe_hdr		6510610	1					
ANR	6510706	ExpressionStatement	nt_hdrs = ( IMAGE_NT_HEADERS * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )	139:2:3456:3523	6510610	1	True				
ANR	6510707	AssignmentExpression	nt_hdrs = ( IMAGE_NT_HEADERS * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )		6510610	0		=			
ANR	6510708	Identifier	nt_hdrs		6510610	0					
ANR	6510709	CastExpression	( IMAGE_NT_HEADERS * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )		6510610	1					
ANR	6510710	CastTarget	IMAGE_NT_HEADERS *		6510610	0					
ANR	6510711	AdditiveExpression	( char * ) dos_hdr + dos_hdr -> e_lfanew		6510610	1		+			
ANR	6510712	CastExpression	( char * ) dos_hdr		6510610	0					
ANR	6510713	CastTarget	char *		6510610	0					
ANR	6510714	Identifier	dos_hdr		6510610	1					
ANR	6510715	PtrMemberAccess	dos_hdr -> e_lfanew		6510610	1					
ANR	6510716	Identifier	dos_hdr		6510610	0					
ANR	6510717	Identifier	e_lfanew		6510610	1					
ANR	6510718	IfStatement	if ( nt_hdrs -> FileHeader . Machine == IMAGE_FILE_MACHINE_I386 )		6510610	2					
ANR	6510719	Condition	nt_hdrs -> FileHeader . Machine == IMAGE_FILE_MACHINE_I386	140:6:3531:3584	6510610	0	True				
ANR	6510720	EqualityExpression	nt_hdrs -> FileHeader . Machine == IMAGE_FILE_MACHINE_I386		6510610	0		==			
ANR	6510721	MemberAccess	nt_hdrs -> FileHeader . Machine		6510610	0					
ANR	6510722	PtrMemberAccess	nt_hdrs -> FileHeader		6510610	0					
ANR	6510723	Identifier	nt_hdrs		6510610	0					
ANR	6510724	Identifier	FileHeader		6510610	1					
ANR	6510725	Identifier	Machine		6510610	1					
ANR	6510726	Identifier	IMAGE_FILE_MACHINE_I386		6510610	1					
ANR	6510727	CompoundStatement		17:62:554:554	6510610	1					
ANR	6510728	ExpressionStatement	nt_hdrs32 = ( IMAGE_NT_HEADERS32 * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )	141:3:3616:3687	6510610	0	True				
ANR	6510729	AssignmentExpression	nt_hdrs32 = ( IMAGE_NT_HEADERS32 * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )		6510610	0		=			
ANR	6510730	Identifier	nt_hdrs32		6510610	0					
ANR	6510731	CastExpression	( IMAGE_NT_HEADERS32 * ) ( ( char * ) dos_hdr + dos_hdr -> e_lfanew )		6510610	1					
ANR	6510732	CastTarget	IMAGE_NT_HEADERS32 *		6510610	0					
ANR	6510733	AdditiveExpression	( char * ) dos_hdr + dos_hdr -> e_lfanew		6510610	1		+			
ANR	6510734	CastExpression	( char * ) dos_hdr		6510610	0					
ANR	6510735	CastTarget	char *		6510610	0					
ANR	6510736	Identifier	dos_hdr		6510610	1					
ANR	6510737	PtrMemberAccess	dos_hdr -> e_lfanew		6510610	1					
ANR	6510738	Identifier	dos_hdr		6510610	0					
ANR	6510739	Identifier	e_lfanew		6510610	1					
ANR	6510740	ExpressionStatement	mod -> sect_count = nt_hdrs32 -> FileHeader . NumberOfSections	142:3:3692:3748	6510610	1	True				
ANR	6510741	AssignmentExpression	mod -> sect_count = nt_hdrs32 -> FileHeader . NumberOfSections		6510610	0		=			
ANR	6510742	PtrMemberAccess	mod -> sect_count		6510610	0					
ANR	6510743	Identifier	mod		6510610	0					
ANR	6510744	Identifier	sect_count		6510610	1					
ANR	6510745	MemberAccess	nt_hdrs32 -> FileHeader . NumberOfSections		6510610	1					
ANR	6510746	PtrMemberAccess	nt_hdrs32 -> FileHeader		6510610	0					
ANR	6510747	Identifier	nt_hdrs32		6510610	0					
ANR	6510748	Identifier	FileHeader		6510610	1					
ANR	6510749	Identifier	NumberOfSections		6510610	1					
ANR	6510750	ExpressionStatement	sect_hdr = ( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs32 + sizeof ( IMAGE_NT_HEADERS32 ) )	143:3:3753:3837	6510610	2	True				
ANR	6510751	AssignmentExpression	sect_hdr = ( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs32 + sizeof ( IMAGE_NT_HEADERS32 ) )		6510610	0		=			
ANR	6510752	Identifier	sect_hdr		6510610	0					
ANR	6510753	CastExpression	( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs32 + sizeof ( IMAGE_NT_HEADERS32 ) )		6510610	1					
ANR	6510754	CastTarget	IMAGE_SECTION_HEADER *		6510610	0					
ANR	6510755	AdditiveExpression	( char * ) nt_hdrs32 + sizeof ( IMAGE_NT_HEADERS32 )		6510610	1		+			
ANR	6510756	CastExpression	( char * ) nt_hdrs32		6510610	0					
ANR	6510757	CastTarget	char *		6510610	0					
ANR	6510758	Identifier	nt_hdrs32		6510610	1					
ANR	6510759	SizeofExpression	sizeof ( IMAGE_NT_HEADERS32 )		6510610	1					
ANR	6510760	Sizeof	sizeof		6510610	0					
ANR	6510761	SizeofOperand	IMAGE_NT_HEADERS32		6510610	1					
ANR	6510762	ElseStatement	else		6510610	0					
ANR	6510763	CompoundStatement		21:9:815:815	6510610	0					
ANR	6510764	ExpressionStatement	mod -> sect_count = nt_hdrs -> FileHeader . NumberOfSections	145:3:3853:3907	6510610	0	True				
ANR	6510765	AssignmentExpression	mod -> sect_count = nt_hdrs -> FileHeader . NumberOfSections		6510610	0		=			
ANR	6510766	PtrMemberAccess	mod -> sect_count		6510610	0					
ANR	6510767	Identifier	mod		6510610	0					
ANR	6510768	Identifier	sect_count		6510610	1					
ANR	6510769	MemberAccess	nt_hdrs -> FileHeader . NumberOfSections		6510610	1					
ANR	6510770	PtrMemberAccess	nt_hdrs -> FileHeader		6510610	0					
ANR	6510771	Identifier	nt_hdrs		6510610	0					
ANR	6510772	Identifier	FileHeader		6510610	1					
ANR	6510773	Identifier	NumberOfSections		6510610	1					
ANR	6510774	ExpressionStatement	sect_hdr = ( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs + sizeof ( IMAGE_NT_HEADERS ) )	146:3:3912:3992	6510610	1	True				
ANR	6510775	AssignmentExpression	sect_hdr = ( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs + sizeof ( IMAGE_NT_HEADERS ) )		6510610	0		=			
ANR	6510776	Identifier	sect_hdr		6510610	0					
ANR	6510777	CastExpression	( IMAGE_SECTION_HEADER * ) ( ( char * ) nt_hdrs + sizeof ( IMAGE_NT_HEADERS ) )		6510610	1					
ANR	6510778	CastTarget	IMAGE_SECTION_HEADER *		6510610	0					
ANR	6510779	AdditiveExpression	( char * ) nt_hdrs + sizeof ( IMAGE_NT_HEADERS )		6510610	1		+			
ANR	6510780	CastExpression	( char * ) nt_hdrs		6510610	0					
ANR	6510781	CastTarget	char *		6510610	0					
ANR	6510782	Identifier	nt_hdrs		6510610	1					
ANR	6510783	SizeofExpression	sizeof ( IMAGE_NT_HEADERS )		6510610	1					
ANR	6510784	Sizeof	sizeof		6510610	0					
ANR	6510785	SizeofOperand	IMAGE_NT_HEADERS		6510610	1					
ANR	6510786	IfStatement	if ( ( char * ) sect_hdr + ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count ) < ( ( char * ) pe_hdr + sizeof ( pe_hdr ) ) )		6510610	3					
ANR	6510787	Condition	( char * ) sect_hdr + ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count ) < ( ( char * ) pe_hdr + sizeof ( pe_hdr ) )	148:6:4004:4108	6510610	0	True				
ANR	6510788	RelationalExpression	( char * ) sect_hdr + ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count ) < ( ( char * ) pe_hdr + sizeof ( pe_hdr ) )		6510610	0		<			
ANR	6510789	AdditiveExpression	( char * ) sect_hdr + ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )		6510610	0		+			
ANR	6510790	CastExpression	( char * ) sect_hdr		6510610	0					
ANR	6510791	CastTarget	char *		6510610	0					
ANR	6510792	Identifier	sect_hdr		6510610	1					
ANR	6510793	MultiplicativeExpression	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	1		*			
ANR	6510794	SizeofExpression	sizeof ( IMAGE_SECTION_HEADER )		6510610	0					
ANR	6510795	Sizeof	sizeof		6510610	0					
ANR	6510796	SizeofOperand	IMAGE_SECTION_HEADER		6510610	1					
ANR	6510797	PtrMemberAccess	mod -> sect_count		6510610	1					
ANR	6510798	Identifier	mod		6510610	0					
ANR	6510799	Identifier	sect_count		6510610	1					
ANR	6510800	AdditiveExpression	( char * ) pe_hdr + sizeof ( pe_hdr )		6510610	1		+			
ANR	6510801	CastExpression	( char * ) pe_hdr		6510610	0					
ANR	6510802	CastTarget	char *		6510610	0					
ANR	6510803	Identifier	pe_hdr		6510610	1					
ANR	6510804	SizeofExpression	sizeof ( pe_hdr )		6510610	1					
ANR	6510805	Sizeof	sizeof		6510610	0					
ANR	6510806	SizeofOperand	pe_hdr		6510610	1					
ANR	6510807	CompoundStatement		25:113:1078:1078	6510610	1					
ANR	6510808	ExpressionStatement	mod -> sect_hdr = ( IMAGE_SECTION_HEADER * ) malloc ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )	149:3:4116:4212	6510610	0	True				
ANR	6510809	AssignmentExpression	mod -> sect_hdr = ( IMAGE_SECTION_HEADER * ) malloc ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )		6510610	0		=			
ANR	6510810	PtrMemberAccess	mod -> sect_hdr		6510610	0					
ANR	6510811	Identifier	mod		6510610	0					
ANR	6510812	Identifier	sect_hdr		6510610	1					
ANR	6510813	CastExpression	( IMAGE_SECTION_HEADER * ) malloc ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )		6510610	1					
ANR	6510814	CastTarget	IMAGE_SECTION_HEADER *		6510610	0					
ANR	6510815	CallExpression	malloc ( sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )		6510610	1					
ANR	6510816	Callee	malloc		6510610	0					
ANR	6510817	Identifier	malloc		6510610	0					
ANR	6510818	ArgumentList	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	1					
ANR	6510819	Argument	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	0					
ANR	6510820	MultiplicativeExpression	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	0		*			
ANR	6510821	SizeofExpression	sizeof ( IMAGE_SECTION_HEADER )		6510610	0					
ANR	6510822	Sizeof	sizeof		6510610	0					
ANR	6510823	SizeofOperand	IMAGE_SECTION_HEADER		6510610	1					
ANR	6510824	PtrMemberAccess	mod -> sect_count		6510610	1					
ANR	6510825	Identifier	mod		6510610	0					
ANR	6510826	Identifier	sect_count		6510610	1					
ANR	6510827	IfStatement	if ( mod -> sect_hdr )		6510610	1					
ANR	6510828	Condition	mod -> sect_hdr	150:7:4221:4233	6510610	0	True				
ANR	6510829	PtrMemberAccess	mod -> sect_hdr		6510610	0					
ANR	6510830	Identifier	mod		6510610	0					
ANR	6510831	Identifier	sect_hdr		6510610	1					
ANR	6510832	CompoundStatement		27:22:1203:1203	6510610	1					
ANR	6510833	ExpressionStatement	"memcpy ( mod -> sect_hdr , sect_hdr , sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )"	151:4:4242:4323	6510610	0	True				
ANR	6510834	CallExpression	"memcpy ( mod -> sect_hdr , sect_hdr , sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count )"		6510610	0					
ANR	6510835	Callee	memcpy		6510610	0					
ANR	6510836	Identifier	memcpy		6510610	0					
ANR	6510837	ArgumentList	mod -> sect_hdr		6510610	1					
ANR	6510838	Argument	mod -> sect_hdr		6510610	0					
ANR	6510839	PtrMemberAccess	mod -> sect_hdr		6510610	0					
ANR	6510840	Identifier	mod		6510610	0					
ANR	6510841	Identifier	sect_hdr		6510610	1					
ANR	6510842	Argument	sect_hdr		6510610	1					
ANR	6510843	Identifier	sect_hdr		6510610	0					
ANR	6510844	Argument	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	2					
ANR	6510845	MultiplicativeExpression	sizeof ( IMAGE_SECTION_HEADER ) * mod -> sect_count		6510610	0		*			
ANR	6510846	SizeofExpression	sizeof ( IMAGE_SECTION_HEADER )		6510610	0					
ANR	6510847	Sizeof	sizeof		6510610	0					
ANR	6510848	SizeofOperand	IMAGE_SECTION_HEADER		6510610	1					
ANR	6510849	PtrMemberAccess	mod -> sect_count		6510610	1					
ANR	6510850	Identifier	mod		6510610	0					
ANR	6510851	Identifier	sect_count		6510610	1					
ANR	6510852	ExpressionStatement	mod_inf_fill = 0	152:4:4329:4345	6510610	1	True				
ANR	6510853	AssignmentExpression	mod_inf_fill = 0		6510610	0		=			
ANR	6510854	Identifier	mod_inf_fill		6510610	0					
ANR	6510855	PrimaryExpression	0		6510610	1					
ANR	6510856	ElseStatement	else		6510610	0					
ANR	6510857	CompoundStatement		30:10:1324:1324	6510610	0					
ANR	6510858	ExpressionStatement	"perror ( ""malloc set_mod_inf()"" )"	154:4:4363:4394	6510610	0	True				
ANR	6510859	CallExpression	"perror ( ""malloc set_mod_inf()"" )"		6510610	0					
ANR	6510860	Callee	perror		6510610	0					
ANR	6510861	Identifier	perror		6510610	0					
ANR	6510862	ArgumentList	"""malloc set_mod_inf()"""		6510610	1					
ANR	6510863	Argument	"""malloc set_mod_inf()"""		6510610	0					
ANR	6510864	PrimaryExpression	"""malloc set_mod_inf()"""		6510610	0					
ANR	6510865	IfStatement	if ( mod_inf_fill == - 1 )		6510610	12					
ANR	6510866	Condition	mod_inf_fill == - 1	158:5:4413:4430	6510610	0	True				
ANR	6510867	EqualityExpression	mod_inf_fill == - 1		6510610	0		==			
ANR	6510868	Identifier	mod_inf_fill		6510610	0					
ANR	6510869	UnaryOperationExpression	- 1		6510610	1					
ANR	6510870	UnaryOperator	-		6510610	0					
ANR	6510871	PrimaryExpression	1		6510610	1					
ANR	6510872	CompoundStatement		35:25:1400:1400	6510610	1					
ANR	6510873	ExpressionStatement	R_FREE ( mod -> sect_hdr )	159:2:4437:4459	6510610	0	True				
ANR	6510874	CallExpression	R_FREE ( mod -> sect_hdr )		6510610	0					
ANR	6510875	Callee	R_FREE		6510610	0					
ANR	6510876	Identifier	R_FREE		6510610	0					
ANR	6510877	ArgumentList	mod -> sect_hdr		6510610	1					
ANR	6510878	Argument	mod -> sect_hdr		6510610	0					
ANR	6510879	PtrMemberAccess	mod -> sect_hdr		6510610	0					
ANR	6510880	Identifier	mod		6510610	0					
ANR	6510881	Identifier	sect_hdr		6510610	1					
ANR	6510882	ReturnStatement	return mod_inf_fill ;	161:1:4465:4484	6510610	13	True				
ANR	6510883	Identifier	mod_inf_fill		6510610	0					
ANR	6510884	ReturnType	static int		6510610	1					
ANR	6510885	Identifier	set_mod_inf		6510610	2					
ANR	6510886	ParameterList	"HANDLE h_proc , RDebugMap * map , RWinModInfo * mod"		6510610	3					
ANR	6510887	Parameter	HANDLE h_proc	124:23:2983:2995	6510610	0	True				
ANR	6510888	ParameterType	HANDLE		6510610	0					
ANR	6510889	Identifier	h_proc		6510610	1					
ANR	6510890	Parameter	RDebugMap * map	124:38:2998:3011	6510610	1	True				
ANR	6510891	ParameterType	RDebugMap *		6510610	0					
ANR	6510892	Identifier	map		6510610	1					
ANR	6510893	Parameter	RWinModInfo * mod	124:54:3014:3029	6510610	2	True				
ANR	6510894	ParameterType	RWinModInfo *		6510610	0					
ANR	6510895	Identifier	mod		6510610	1					
ANR	6510896	CFGEntryNode	ENTRY		6510610		True				
ANR	6510897	CFGExitNode	EXIT		6510610		True				
ANR	6510898	Symbol	sect_hdr		6510610						
ANR	6510899	Symbol	mod		6510610						
ANR	6510900	Symbol	map -> addr		6510610						
ANR	6510901	Symbol	* map		6510610						
ANR	6510902	Symbol	nt_hdrs32 -> FileHeader . NumberOfSections		6510610						
ANR	6510903	Symbol	* nt_hdrs		6510610						
ANR	6510904	Symbol	mod -> sect_count		6510610						
ANR	6510905	Symbol	nt_hdrs -> FileHeader . NumberOfSections		6510610						
ANR	6510906	Symbol	nt_hdrs -> FileHeader		6510610						
ANR	6510907	Symbol	len		6510610						
ANR	6510908	Symbol	IMAGE_FILE_MACHINE_I386		6510610						
ANR	6510909	Symbol	mod_inf_fill		6510610						
ANR	6510910	Symbol	dos_hdr -> e_lfanew		6510610						
ANR	6510911	Symbol	map		6510610						
ANR	6510912	Symbol	nt_hdrs		6510610						
ANR	6510913	Symbol	malloc		6510610						
ANR	6510914	Symbol	is_pe_hdr		6510610						
ANR	6510915	Symbol	NULL		6510610						
ANR	6510916	Symbol	dos_hdr		6510610						
ANR	6510917	Symbol	h_proc		6510610						
ANR	6510918	Symbol	mod -> sect_hdr		6510610						
ANR	6510919	Symbol	* mod		6510610						
ANR	6510920	Symbol	* dos_hdr		6510610						
ANR	6510921	Symbol	pe_hdr		6510610						
ANR	6510922	Symbol	nt_hdrs32 -> FileHeader		6510610						
ANR	6510923	Symbol	nt_hdrs32		6510610						
ANR	6510924	Symbol	& len		6510610						
ANR	6510925	Symbol	* nt_hdrs32		6510610						
ANR	6510926	Symbol	nt_hdrs -> FileHeader . Machine		6510610						
ANR	6510927	Function	proc_mem_img	164:0:4489:6310							
ANR	6510928	FunctionDef	"proc_mem_img (HANDLE h_proc , RList * map_list , RList * mod_list , RWinModInfo * mod , SYSTEM_INFO * si , MEMORY_BASIC_INFORMATION * mbi)"		6510927	0					
ANR	6510929	CompoundStatement		164:140:4629:6310	6510927	0					
ANR	6510930	IdentifierDeclStatement	ut64 addr = ( ut64 ) ( size_t ) mbi -> BaseAddress ;	165:1:4632:4674	6510927	0	True				
ANR	6510931	IdentifierDecl	addr = ( ut64 ) ( size_t ) mbi -> BaseAddress		6510927	0					
ANR	6510932	IdentifierDeclType	ut64		6510927	0					
ANR	6510933	Identifier	addr		6510927	1					
ANR	6510934	AssignmentExpression	addr = ( ut64 ) ( size_t ) mbi -> BaseAddress		6510927	2		=			
ANR	6510935	Identifier	addr		6510927	0					
ANR	6510936	CastExpression	( ut64 ) ( size_t ) mbi -> BaseAddress		6510927	1					
ANR	6510937	CastTarget	ut64		6510927	0					
ANR	6510938	CastExpression	( size_t ) mbi -> BaseAddress		6510927	1					
ANR	6510939	CastTarget	size_t		6510927	0					
ANR	6510940	PtrMemberAccess	mbi -> BaseAddress		6510927	1					
ANR	6510941	Identifier	mbi		6510927	0					
ANR	6510942	Identifier	BaseAddress		6510927	1					
ANR	6510943	IdentifierDeclStatement	ut64 len = ( ut64 ) mbi -> RegionSize ;	166:1:4677:4709	6510927	1	True				
ANR	6510944	IdentifierDecl	len = ( ut64 ) mbi -> RegionSize		6510927	0					
ANR	6510945	IdentifierDeclType	ut64		6510927	0					
ANR	6510946	Identifier	len		6510927	1					
ANR	6510947	AssignmentExpression	len = ( ut64 ) mbi -> RegionSize		6510927	2		=			
ANR	6510948	Identifier	len		6510927	0					
ANR	6510949	CastExpression	( ut64 ) mbi -> RegionSize		6510927	1					
ANR	6510950	CastTarget	ut64		6510927	0					
ANR	6510951	PtrMemberAccess	mbi -> RegionSize		6510927	1					
ANR	6510952	Identifier	mbi		6510927	0					
ANR	6510953	Identifier	RegionSize		6510927	1					
ANR	6510954	IfStatement	if ( ! mod -> map || addr < mod -> map -> addr || ( addr + len ) > mod -> map -> addr_end )		6510927	2					
ANR	6510955	Condition	! mod -> map || addr < mod -> map -> addr || ( addr + len ) > mod -> map -> addr_end	167:5:4716:4786	6510927	0	True				
ANR	6510956	OrExpression	! mod -> map || addr < mod -> map -> addr || ( addr + len ) > mod -> map -> addr_end		6510927	0		||			
ANR	6510957	UnaryOperationExpression	! mod -> map		6510927	0					
ANR	6510958	UnaryOperator	!		6510927	0					
ANR	6510959	PtrMemberAccess	mod -> map		6510927	1					
ANR	6510960	Identifier	mod		6510927	0					
ANR	6510961	Identifier	map		6510927	1					
ANR	6510962	OrExpression	addr < mod -> map -> addr || ( addr + len ) > mod -> map -> addr_end		6510927	1		||			
ANR	6510963	RelationalExpression	addr < mod -> map -> addr		6510927	0		<			
ANR	6510964	Identifier	addr		6510927	0					
ANR	6510965	PtrMemberAccess	mod -> map -> addr		6510927	1					
ANR	6510966	PtrMemberAccess	mod -> map		6510927	0					
ANR	6510967	Identifier	mod		6510927	0					
ANR	6510968	Identifier	map		6510927	1					
ANR	6510969	Identifier	addr		6510927	1					
ANR	6510970	RelationalExpression	( addr + len ) > mod -> map -> addr_end		6510927	1		>			
ANR	6510971	AdditiveExpression	addr + len		6510927	0		+			
ANR	6510972	Identifier	addr		6510927	0					
ANR	6510973	Identifier	len		6510927	1					
ANR	6510974	PtrMemberAccess	mod -> map -> addr_end		6510927	1					
ANR	6510975	PtrMemberAccess	mod -> map		6510927	0					
ANR	6510976	Identifier	mod		6510927	0					
ANR	6510977	Identifier	map		6510927	1					
ANR	6510978	Identifier	addr_end		6510927	1					
ANR	6510979	CompoundStatement		6:2:182:196	6510927	1					
ANR	6510980	IdentifierDeclStatement	RListIter * iter ;	168:2:4793:4808	6510927	0	True				
ANR	6510981	IdentifierDecl	* iter		6510927	0					
ANR	6510982	IdentifierDeclType	RListIter *		6510927	0					
ANR	6510983	Identifier	iter		6510927	1					
ANR	6510984	IdentifierDeclStatement	RDebugMap * map ;	169:2:4812:4826	6510927	1	True				
ANR	6510985	IdentifierDecl	* map		6510927	0					
ANR	6510986	IdentifierDeclType	RDebugMap *		6510927	0					
ANR	6510987	Identifier	map		6510927	1					
ANR	6510988	ExpressionStatement	free ( mod -> sect_hdr )	171:2:4831:4851	6510927	2	True				
ANR	6510989	CallExpression	free ( mod -> sect_hdr )		6510927	0					
ANR	6510990	Callee	free		6510927	0					
ANR	6510991	Identifier	free		6510927	0					
ANR	6510992	ArgumentList	mod -> sect_hdr		6510927	1					
ANR	6510993	Argument	mod -> sect_hdr		6510927	0					
ANR	6510994	PtrMemberAccess	mod -> sect_hdr		6510927	0					
ANR	6510995	Identifier	mod		6510927	0					
ANR	6510996	Identifier	sect_hdr		6510927	1					
ANR	6510997	ExpressionStatement	"memset ( mod , 0 , sizeof ( RWinModInfo ) )"	172:2:4855:4892	6510927	3	True				
ANR	6510998	CallExpression	"memset ( mod , 0 , sizeof ( RWinModInfo ) )"		6510927	0					
ANR	6510999	Callee	memset		6510927	0					
ANR	6511000	Identifier	memset		6510927	0					
ANR	6511001	ArgumentList	mod		6510927	1					
ANR	6511002	Argument	mod		6510927	0					
ANR	6511003	Identifier	mod		6510927	0					
ANR	6511004	Argument	0		6510927	1					
ANR	6511005	PrimaryExpression	0		6510927	0					
ANR	6511006	Argument	sizeof ( RWinModInfo )		6510927	2					
ANR	6511007	SizeofExpression	sizeof ( RWinModInfo )		6510927	0					
ANR	6511008	Sizeof	sizeof		6510927	0					
ANR	6511009	SizeofOperand	RWinModInfo		6510927	1					
ANR	6511010	Statement	r_list_foreach	173:2:4896:4909	6510927	4	True				
ANR	6511011	Statement	(	173:17:4911:4911	6510927	5	True				
ANR	6511012	Statement	mod_list	173:18:4912:4919	6510927	6	True				
ANR	6511013	Statement	","	173:26:4920:4920	6510927	7	True				
ANR	6511014	Statement	iter	173:28:4922:4925	6510927	8	True				
ANR	6511015	Statement	","	173:32:4926:4926	6510927	9	True				
ANR	6511016	Statement	map	173:34:4928:4930	6510927	10	True				
ANR	6511017	Statement	)	173:37:4931:4931	6510927	11	True				
ANR	6511018	CompoundStatement		10:39:303:303	6510927	12					
ANR	6511019	IfStatement	if ( addr >= map -> addr && addr <= map -> addr_end )		6510927	0					
ANR	6511020	Condition	addr >= map -> addr && addr <= map -> addr_end	174:7:4942:4983	6510927	0	True				
ANR	6511021	AndExpression	addr >= map -> addr && addr <= map -> addr_end		6510927	0		&&			
ANR	6511022	RelationalExpression	addr >= map -> addr		6510927	0		>=			
ANR	6511023	Identifier	addr		6510927	0					
ANR	6511024	PtrMemberAccess	map -> addr		6510927	1					
ANR	6511025	Identifier	map		6510927	0					
ANR	6511026	Identifier	addr		6510927	1					
ANR	6511027	RelationalExpression	addr <= map -> addr_end		6510927	1		<=			
ANR	6511028	Identifier	addr		6510927	0					
ANR	6511029	PtrMemberAccess	map -> addr_end		6510927	1					
ANR	6511030	Identifier	map		6510927	0					
ANR	6511031	Identifier	addr_end		6510927	1					
ANR	6511032	CompoundStatement		11:51:356:356	6510927	1					
ANR	6511033	ExpressionStatement	mod -> map = map	175:4:4992:5006	6510927	0	True				
ANR	6511034	AssignmentExpression	mod -> map = map		6510927	0		=			
ANR	6511035	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511036	Identifier	mod		6510927	0					
ANR	6511037	Identifier	map		6510927	1					
ANR	6511038	Identifier	map		6510927	1					
ANR	6511039	ExpressionStatement	"set_mod_inf ( h_proc , map , mod )"	176:4:5012:5042	6510927	1	True				
ANR	6511040	CallExpression	"set_mod_inf ( h_proc , map , mod )"		6510927	0					
ANR	6511041	Callee	set_mod_inf		6510927	0					
ANR	6511042	Identifier	set_mod_inf		6510927	0					
ANR	6511043	ArgumentList	h_proc		6510927	1					
ANR	6511044	Argument	h_proc		6510927	0					
ANR	6511045	Identifier	h_proc		6510927	0					
ANR	6511046	Argument	map		6510927	1					
ANR	6511047	Identifier	map		6510927	0					
ANR	6511048	Argument	mod		6510927	2					
ANR	6511049	Identifier	mod		6510927	0					
ANR	6511050	BreakStatement	break ;	177:4:5048:5053	6510927	2	True				
ANR	6511051	IfStatement	if ( mod -> map && mod -> sect_hdr && mod -> sect_count > 0 )		6510927	3					
ANR	6511052	Condition	mod -> map && mod -> sect_hdr && mod -> sect_count > 0	181:5:5072:5119	6510927	0	True				
ANR	6511053	AndExpression	mod -> map && mod -> sect_hdr && mod -> sect_count > 0		6510927	0		&&			
ANR	6511054	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511055	Identifier	mod		6510927	0					
ANR	6511056	Identifier	map		6510927	1					
ANR	6511057	AndExpression	mod -> sect_hdr && mod -> sect_count > 0		6510927	1		&&			
ANR	6511058	PtrMemberAccess	mod -> sect_hdr		6510927	0					
ANR	6511059	Identifier	mod		6510927	0					
ANR	6511060	Identifier	sect_hdr		6510927	1					
ANR	6511061	RelationalExpression	mod -> sect_count > 0		6510927	1		>			
ANR	6511062	PtrMemberAccess	mod -> sect_count		6510927	0					
ANR	6511063	Identifier	mod		6510927	0					
ANR	6511064	Identifier	sect_count		6510927	1					
ANR	6511065	PrimaryExpression	0		6510927	1					
ANR	6511066	CompoundStatement		20:2:514:527	6510927	1					
ANR	6511067	IdentifierDeclStatement	int sect_count ;	182:2:5126:5140	6510927	0	True				
ANR	6511068	IdentifierDecl	sect_count		6510927	0					
ANR	6511069	IdentifierDeclType	int		6510927	0					
ANR	6511070	Identifier	sect_count		6510927	1					
ANR	6511071	IdentifierDeclStatement	"int i , p_mask ;"	183:2:5144:5157	6510927	1	True				
ANR	6511072	IdentifierDecl	i		6510927	0					
ANR	6511073	IdentifierDeclType	int		6510927	0					
ANR	6511074	Identifier	i		6510927	1					
ANR	6511075	IdentifierDecl	p_mask		6510927	1					
ANR	6511076	IdentifierDeclType	int		6510927	0					
ANR	6511077	Identifier	p_mask		6510927	1					
ANR	6511078	ExpressionStatement	sect_count = 0	185:2:5162:5176	6510927	2	True				
ANR	6511079	AssignmentExpression	sect_count = 0		6510927	0		=			
ANR	6511080	Identifier	sect_count		6510927	0					
ANR	6511081	PrimaryExpression	0		6510927	1					
ANR	6511082	ExpressionStatement	p_mask = si -> dwPageSize - 1	186:2:5180:5207	6510927	3	True				
ANR	6511083	AssignmentExpression	p_mask = si -> dwPageSize - 1		6510927	0		=			
ANR	6511084	Identifier	p_mask		6510927	0					
ANR	6511085	AdditiveExpression	si -> dwPageSize - 1		6510927	1		-			
ANR	6511086	PtrMemberAccess	si -> dwPageSize		6510927	0					
ANR	6511087	Identifier	si		6510927	0					
ANR	6511088	Identifier	dwPageSize		6510927	1					
ANR	6511089	PrimaryExpression	1		6510927	1					
ANR	6511090	ForStatement	for ( i = 0 ; i < mod -> sect_count ; i ++ )		6510927	4					
ANR	6511091	ForInit	i = 0 ;	187:7:5216:5221	6510927	0	True				
ANR	6511092	AssignmentExpression	i = 0		6510927	0		=			
ANR	6511093	Identifier	i		6510927	0					
ANR	6511094	PrimaryExpression	0		6510927	1					
ANR	6511095	Condition	i < mod -> sect_count	187:14:5223:5241	6510927	1	True				
ANR	6511096	RelationalExpression	i < mod -> sect_count		6510927	0		<			
ANR	6511097	Identifier	i		6510927	0					
ANR	6511098	PtrMemberAccess	mod -> sect_count		6510927	1					
ANR	6511099	Identifier	mod		6510927	0					
ANR	6511100	Identifier	sect_count		6510927	1					
ANR	6511101	PostIncDecOperationExpression	i ++	187:35:5244:5246	6510927	2	True				
ANR	6511102	Identifier	i		6510927	0					
ANR	6511103	IncDec	++		6510927	1					
ANR	6511104	CompoundStatement		28:3:824:842	6510927	3					
ANR	6511105	IdentifierDeclStatement	IMAGE_SECTION_HEADER * sect_hdr = & mod -> sect_hdr [ i ] ;	188:3:5254:5304	6510927	0	True				
ANR	6511106	IdentifierDecl	* sect_hdr = & mod -> sect_hdr [ i ]		6510927	0					
ANR	6511107	IdentifierDeclType	IMAGE_SECTION_HEADER *		6510927	0					
ANR	6511108	Identifier	sect_hdr		6510927	1					
ANR	6511109	AssignmentExpression	* sect_hdr = & mod -> sect_hdr [ i ]		6510927	2		=			
ANR	6511110	Identifier	sect_hdr		6510927	0					
ANR	6511111	UnaryOperationExpression	& mod -> sect_hdr [ i ]		6510927	1					
ANR	6511112	UnaryOperator	&		6510927	0					
ANR	6511113	ArrayIndexing	mod -> sect_hdr [ i ]		6510927	1					
ANR	6511114	PtrMemberAccess	mod -> sect_hdr		6510927	0					
ANR	6511115	Identifier	mod		6510927	0					
ANR	6511116	Identifier	sect_hdr		6510927	1					
ANR	6511117	Identifier	i		6510927	1					
ANR	6511118	IdentifierDeclStatement	ut64 sect_addr = mod -> map -> addr + ( ut64 ) sect_hdr -> VirtualAddress ;	189:3:5309:5373	6510927	1	True				
ANR	6511119	IdentifierDecl	sect_addr = mod -> map -> addr + ( ut64 ) sect_hdr -> VirtualAddress		6510927	0					
ANR	6511120	IdentifierDeclType	ut64		6510927	0					
ANR	6511121	Identifier	sect_addr		6510927	1					
ANR	6511122	AssignmentExpression	sect_addr = mod -> map -> addr + ( ut64 ) sect_hdr -> VirtualAddress		6510927	2		=			
ANR	6511123	Identifier	sect_addr		6510927	0					
ANR	6511124	AdditiveExpression	mod -> map -> addr + ( ut64 ) sect_hdr -> VirtualAddress		6510927	1		+			
ANR	6511125	PtrMemberAccess	mod -> map -> addr		6510927	0					
ANR	6511126	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511127	Identifier	mod		6510927	0					
ANR	6511128	Identifier	map		6510927	1					
ANR	6511129	Identifier	addr		6510927	1					
ANR	6511130	CastExpression	( ut64 ) sect_hdr -> VirtualAddress		6510927	1					
ANR	6511131	CastTarget	ut64		6510927	0					
ANR	6511132	PtrMemberAccess	sect_hdr -> VirtualAddress		6510927	1					
ANR	6511133	Identifier	sect_hdr		6510927	0					
ANR	6511134	Identifier	VirtualAddress		6510927	1					
ANR	6511135	IdentifierDeclStatement	ut64 sect_len = ( ( ( ut64 ) sect_hdr -> Misc . VirtualSize ) + p_mask ) & ~p_mask ;	190:3:5378:5449	6510927	2	True				
ANR	6511136	IdentifierDecl	sect_len = ( ( ( ut64 ) sect_hdr -> Misc . VirtualSize ) + p_mask ) & ~p_mask		6510927	0					
ANR	6511137	IdentifierDeclType	ut64		6510927	0					
ANR	6511138	Identifier	sect_len		6510927	1					
ANR	6511139	AssignmentExpression	sect_len = ( ( ( ut64 ) sect_hdr -> Misc . VirtualSize ) + p_mask ) & ~p_mask		6510927	2		=			
ANR	6511140	Identifier	sect_len		6510927	0					
ANR	6511141	BitAndExpression	( ( ( ut64 ) sect_hdr -> Misc . VirtualSize ) + p_mask ) & ~p_mask		6510927	1		&			
ANR	6511142	AdditiveExpression	( ( ut64 ) sect_hdr -> Misc . VirtualSize ) + p_mask		6510927	0		+			
ANR	6511143	CastExpression	( ut64 ) sect_hdr -> Misc . VirtualSize		6510927	0					
ANR	6511144	CastTarget	ut64		6510927	0					
ANR	6511145	MemberAccess	sect_hdr -> Misc . VirtualSize		6510927	1					
ANR	6511146	PtrMemberAccess	sect_hdr -> Misc		6510927	0					
ANR	6511147	Identifier	sect_hdr		6510927	0					
ANR	6511148	Identifier	Misc		6510927	1					
ANR	6511149	Identifier	VirtualSize		6510927	1					
ANR	6511150	Identifier	p_mask		6510927	1					
ANR	6511151	Identifier	~p_mask		6510927	1					
ANR	6511152	IdentifierDeclStatement	int sect_found = 0 ;	191:3:5454:5472	6510927	3	True				
ANR	6511153	IdentifierDecl	sect_found = 0		6510927	0					
ANR	6511154	IdentifierDeclType	int		6510927	0					
ANR	6511155	Identifier	sect_found		6510927	1					
ANR	6511156	AssignmentExpression	sect_found = 0		6510927	2		=			
ANR	6511157	Identifier	sect_found		6510927	0					
ANR	6511158	PrimaryExpression	0		6510927	1					
ANR	6511159	IfStatement	if ( sect_addr >= addr && ( sect_addr + sect_len ) <= ( addr + len ) )		6510927	4					
ANR	6511160	Condition	sect_addr >= addr && ( sect_addr + sect_len ) <= ( addr + len )	194:7:5517:5575	6510927	0	True				
ANR	6511161	AndExpression	sect_addr >= addr && ( sect_addr + sect_len ) <= ( addr + len )		6510927	0		&&			
ANR	6511162	RelationalExpression	sect_addr >= addr		6510927	0		>=			
ANR	6511163	Identifier	sect_addr		6510927	0					
ANR	6511164	Identifier	addr		6510927	1					
ANR	6511165	RelationalExpression	( sect_addr + sect_len ) <= ( addr + len )		6510927	1		<=			
ANR	6511166	AdditiveExpression	sect_addr + sect_len		6510927	0		+			
ANR	6511167	Identifier	sect_addr		6510927	0					
ANR	6511168	Identifier	sect_len		6510927	1					
ANR	6511169	AdditiveExpression	addr + len		6510927	1		+			
ANR	6511170	Identifier	addr		6510927	0					
ANR	6511171	Identifier	len		6510927	1					
ANR	6511172	CompoundStatement		31:68:948:948	6510927	1					
ANR	6511173	ExpressionStatement	sect_found = 1	195:4:5584:5598	6510927	0	True				
ANR	6511174	AssignmentExpression	sect_found = 1		6510927	0		=			
ANR	6511175	Identifier	sect_found		6510927	0					
ANR	6511176	PrimaryExpression	1		6510927	1					
ANR	6511177	ElseStatement	else		6510927	0					
ANR	6511178	IfStatement	if ( addr >= sect_addr && ( addr + len ) <= ( sect_addr + sect_len ) )		6510927	0					
ANR	6511179	Condition	addr >= sect_addr && ( addr + len ) <= ( sect_addr + sect_len )	197:14:5649:5707	6510927	0	True				
ANR	6511180	AndExpression	addr >= sect_addr && ( addr + len ) <= ( sect_addr + sect_len )		6510927	0		&&			
ANR	6511181	RelationalExpression	addr >= sect_addr		6510927	0		>=			
ANR	6511182	Identifier	addr		6510927	0					
ANR	6511183	Identifier	sect_addr		6510927	1					
ANR	6511184	RelationalExpression	( addr + len ) <= ( sect_addr + sect_len )		6510927	1		<=			
ANR	6511185	AdditiveExpression	addr + len		6510927	0		+			
ANR	6511186	Identifier	addr		6510927	0					
ANR	6511187	Identifier	len		6510927	1					
ANR	6511188	AdditiveExpression	sect_addr + sect_len		6510927	1		+			
ANR	6511189	Identifier	sect_addr		6510927	0					
ANR	6511190	Identifier	sect_len		6510927	1					
ANR	6511191	CompoundStatement		34:75:1080:1080	6510927	1					
ANR	6511192	ExpressionStatement	sect_found = 2	198:4:5716:5730	6510927	0	True				
ANR	6511193	AssignmentExpression	sect_found = 2		6510927	0		=			
ANR	6511194	Identifier	sect_found		6510927	0					
ANR	6511195	PrimaryExpression	2		6510927	1					
ANR	6511196	IfStatement	if ( sect_found )		6510927	5					
ANR	6511197	Condition	sect_found	200:7:5744:5753	6510927	0	True				
ANR	6511198	Identifier	sect_found		6510927	0					
ANR	6511199	CompoundStatement		38:4:1132:1203	6510927	1					
ANR	6511200	IdentifierDeclStatement	"char * map_name = r_str_newf ( ""%s | %s"" , mod -> map -> name , sect_hdr -> Name ) ;"	201:4:5762:5833	6510927	0	True				
ANR	6511201	IdentifierDecl	"* map_name = r_str_newf ( ""%s | %s"" , mod -> map -> name , sect_hdr -> Name )"		6510927	0					
ANR	6511202	IdentifierDeclType	char *		6510927	0					
ANR	6511203	Identifier	map_name		6510927	1					
ANR	6511204	AssignmentExpression	"* map_name = r_str_newf ( ""%s | %s"" , mod -> map -> name , sect_hdr -> Name )"		6510927	2		=			
ANR	6511205	Identifier	map_name		6510927	0					
ANR	6511206	CallExpression	"r_str_newf ( ""%s | %s"" , mod -> map -> name , sect_hdr -> Name )"		6510927	1					
ANR	6511207	Callee	r_str_newf		6510927	0					
ANR	6511208	Identifier	r_str_newf		6510927	0					
ANR	6511209	ArgumentList	"""%s | %s"""		6510927	1					
ANR	6511210	Argument	"""%s | %s"""		6510927	0					
ANR	6511211	PrimaryExpression	"""%s | %s"""		6510927	0					
ANR	6511212	Argument	mod -> map -> name		6510927	1					
ANR	6511213	PtrMemberAccess	mod -> map -> name		6510927	0					
ANR	6511214	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511215	Identifier	mod		6510927	0					
ANR	6511216	Identifier	map		6510927	1					
ANR	6511217	Identifier	name		6510927	1					
ANR	6511218	Argument	sect_hdr -> Name		6510927	2					
ANR	6511219	PtrMemberAccess	sect_hdr -> Name		6510927	0					
ANR	6511220	Identifier	sect_hdr		6510927	0					
ANR	6511221	Identifier	Name		6510927	1					
ANR	6511222	IfStatement	if ( ! map_name )		6510927	1					
ANR	6511223	Condition	! map_name	202:8:5843:5851	6510927	0	True				
ANR	6511224	UnaryOperationExpression	! map_name		6510927	0					
ANR	6511225	UnaryOperator	!		6510927	0					
ANR	6511226	Identifier	map_name		6510927	1					
ANR	6511227	CompoundStatement		39:19:1224:1224	6510927	1					
ANR	6511228	ExpressionStatement	"perror ( ""r_str_newf"" )"	203:5:5861:5882	6510927	0	True				
ANR	6511229	CallExpression	"perror ( ""r_str_newf"" )"		6510927	0					
ANR	6511230	Callee	perror		6510927	0					
ANR	6511231	Identifier	perror		6510927	0					
ANR	6511232	ArgumentList	"""r_str_newf"""		6510927	1					
ANR	6511233	Argument	"""r_str_newf"""		6510927	0					
ANR	6511234	PrimaryExpression	"""r_str_newf"""		6510927	0					
ANR	6511235	ReturnStatement	return ;	204:5:5889:5895	6510927	1	True				
ANR	6511236	IfStatement	if ( sect_found == 1 )		6510927	2					
ANR	6511237	Condition	sect_found == 1	206:8:5911:5925	6510927	0	True				
ANR	6511238	EqualityExpression	sect_found == 1		6510927	0		==			
ANR	6511239	Identifier	sect_found		6510927	0					
ANR	6511240	PrimaryExpression	1		6510927	1					
ANR	6511241	CompoundStatement		43:25:1298:1298	6510927	1					
ANR	6511242	ExpressionStatement	"add_map ( map_list , map_name , sect_addr , sect_len , mbi )"	207:5:5935:5989	6510927	0	True				
ANR	6511243	CallExpression	"add_map ( map_list , map_name , sect_addr , sect_len , mbi )"		6510927	0					
ANR	6511244	Callee	add_map		6510927	0					
ANR	6511245	Identifier	add_map		6510927	0					
ANR	6511246	ArgumentList	map_list		6510927	1					
ANR	6511247	Argument	map_list		6510927	0					
ANR	6511248	Identifier	map_list		6510927	0					
ANR	6511249	Argument	map_name		6510927	1					
ANR	6511250	Identifier	map_name		6510927	0					
ANR	6511251	Argument	sect_addr		6510927	2					
ANR	6511252	Identifier	sect_addr		6510927	0					
ANR	6511253	Argument	sect_len		6510927	3					
ANR	6511254	Identifier	sect_len		6510927	0					
ANR	6511255	Argument	mbi		6510927	4					
ANR	6511256	Identifier	mbi		6510927	0					
ANR	6511257	ElseStatement	else		6510927	0					
ANR	6511258	CompoundStatement		45:11:1372:1372	6510927	0					
ANR	6511259	ExpressionStatement	"add_map_reg ( map_list , map_name , mbi )"	209:5:6009:6046	6510927	0	True				
ANR	6511260	CallExpression	"add_map_reg ( map_list , map_name , mbi )"		6510927	0					
ANR	6511261	Callee	add_map_reg		6510927	0					
ANR	6511262	Identifier	add_map_reg		6510927	0					
ANR	6511263	ArgumentList	map_list		6510927	1					
ANR	6511264	Argument	map_list		6510927	0					
ANR	6511265	Identifier	map_list		6510927	0					
ANR	6511266	Argument	map_name		6510927	1					
ANR	6511267	Identifier	map_name		6510927	0					
ANR	6511268	Argument	mbi		6510927	2					
ANR	6511269	Identifier	mbi		6510927	0					
ANR	6511270	ExpressionStatement	free ( map_name )	211:4:6058:6073	6510927	3	True				
ANR	6511271	CallExpression	free ( map_name )		6510927	0					
ANR	6511272	Callee	free		6510927	0					
ANR	6511273	Identifier	free		6510927	0					
ANR	6511274	ArgumentList	map_name		6510927	1					
ANR	6511275	Argument	map_name		6510927	0					
ANR	6511276	Identifier	map_name		6510927	0					
ANR	6511277	ExpressionStatement	sect_count ++	212:4:6079:6091	6510927	4	True				
ANR	6511278	PostIncDecOperationExpression	sect_count ++		6510927	0					
ANR	6511279	Identifier	sect_count		6510927	0					
ANR	6511280	IncDec	++		6510927	1					
ANR	6511281	IfStatement	if ( sect_count == 0 )		6510927	5					
ANR	6511282	Condition	sect_count == 0	215:6:6108:6122	6510927	0	True				
ANR	6511283	EqualityExpression	sect_count == 0		6510927	0		==			
ANR	6511284	Identifier	sect_count		6510927	0					
ANR	6511285	PrimaryExpression	0		6510927	1					
ANR	6511286	CompoundStatement		52:23:1495:1495	6510927	1					
ANR	6511287	ExpressionStatement	"add_map_reg ( map_list , mod -> map -> name , mbi )"	216:3:6130:6173	6510927	0	True				
ANR	6511288	CallExpression	"add_map_reg ( map_list , mod -> map -> name , mbi )"		6510927	0					
ANR	6511289	Callee	add_map_reg		6510927	0					
ANR	6511290	Identifier	add_map_reg		6510927	0					
ANR	6511291	ArgumentList	map_list		6510927	1					
ANR	6511292	Argument	map_list		6510927	0					
ANR	6511293	Identifier	map_list		6510927	0					
ANR	6511294	Argument	mod -> map -> name		6510927	1					
ANR	6511295	PtrMemberAccess	mod -> map -> name		6510927	0					
ANR	6511296	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511297	Identifier	mod		6510927	0					
ANR	6511298	Identifier	map		6510927	1					
ANR	6511299	Identifier	name		6510927	1					
ANR	6511300	Argument	mbi		6510927	2					
ANR	6511301	Identifier	mbi		6510927	0					
ANR	6511302	ElseStatement	else		6510927	0					
ANR	6511303	CompoundStatement		55:8:1557:1557	6510927	0					
ANR	6511304	IfStatement	if ( ! mod -> map )		6510927	0					
ANR	6511305	Condition	! mod -> map	219:6:6195:6203	6510927	0	True				
ANR	6511306	UnaryOperationExpression	! mod -> map		6510927	0					
ANR	6511307	UnaryOperator	!		6510927	0					
ANR	6511308	PtrMemberAccess	mod -> map		6510927	1					
ANR	6511309	Identifier	mod		6510927	0					
ANR	6511310	Identifier	map		6510927	1					
ANR	6511311	CompoundStatement		56:17:1576:1576	6510927	1					
ANR	6511312	ExpressionStatement	"add_map_reg ( map_list , """" , mbi )"	220:3:6211:6242	6510927	0	True				
ANR	6511313	CallExpression	"add_map_reg ( map_list , """" , mbi )"		6510927	0					
ANR	6511314	Callee	add_map_reg		6510927	0					
ANR	6511315	Identifier	add_map_reg		6510927	0					
ANR	6511316	ArgumentList	map_list		6510927	1					
ANR	6511317	Argument	map_list		6510927	0					
ANR	6511318	Identifier	map_list		6510927	0					
ANR	6511319	Argument	""""""		6510927	1					
ANR	6511320	PrimaryExpression	""""""		6510927	0					
ANR	6511321	Argument	mbi		6510927	2					
ANR	6511322	Identifier	mbi		6510927	0					
ANR	6511323	ElseStatement	else		6510927	0					
ANR	6511324	CompoundStatement		58:9:1623:1623	6510927	0					
ANR	6511325	ExpressionStatement	"add_map_reg ( map_list , mod -> map -> name , mbi )"	222:3:6258:6301	6510927	0	True				
ANR	6511326	CallExpression	"add_map_reg ( map_list , mod -> map -> name , mbi )"		6510927	0					
ANR	6511327	Callee	add_map_reg		6510927	0					
ANR	6511328	Identifier	add_map_reg		6510927	0					
ANR	6511329	ArgumentList	map_list		6510927	1					
ANR	6511330	Argument	map_list		6510927	0					
ANR	6511331	Identifier	map_list		6510927	0					
ANR	6511332	Argument	mod -> map -> name		6510927	1					
ANR	6511333	PtrMemberAccess	mod -> map -> name		6510927	0					
ANR	6511334	PtrMemberAccess	mod -> map		6510927	0					
ANR	6511335	Identifier	mod		6510927	0					
ANR	6511336	Identifier	map		6510927	1					
ANR	6511337	Identifier	name		6510927	1					
ANR	6511338	Argument	mbi		6510927	2					
ANR	6511339	Identifier	mbi		6510927	0					
ANR	6511340	ReturnType	static void		6510927	1					
ANR	6511341	Identifier	proc_mem_img		6510927	2					
ANR	6511342	ParameterList	"HANDLE h_proc , RList * map_list , RList * mod_list , RWinModInfo * mod , SYSTEM_INFO * si , MEMORY_BASIC_INFORMATION * mbi"		6510927	3					
ANR	6511343	Parameter	HANDLE h_proc	164:25:4514:4526	6510927	0	True				
ANR	6511344	ParameterType	HANDLE		6510927	0					
ANR	6511345	Identifier	h_proc		6510927	1					
ANR	6511346	Parameter	RList * map_list	164:40:4529:4543	6510927	1	True				
ANR	6511347	ParameterType	RList *		6510927	0					
ANR	6511348	Identifier	map_list		6510927	1					
ANR	6511349	Parameter	RList * mod_list	164:57:4546:4560	6510927	2	True				
ANR	6511350	ParameterType	RList *		6510927	0					
ANR	6511351	Identifier	mod_list		6510927	1					
ANR	6511352	Parameter	RWinModInfo * mod	164:74:4563:4578	6510927	3	True				
ANR	6511353	ParameterType	RWinModInfo *		6510927	0					
ANR	6511354	Identifier	mod		6510927	1					
ANR	6511355	Parameter	SYSTEM_INFO * si	164:92:4581:4595	6510927	4	True				
ANR	6511356	ParameterType	SYSTEM_INFO *		6510927	0					
ANR	6511357	Identifier	si		6510927	1					
ANR	6511358	Parameter	MEMORY_BASIC_INFORMATION * mbi	164:109:4598:4626	6510927	5	True				
ANR	6511359	ParameterType	MEMORY_BASIC_INFORMATION *		6510927	0					
ANR	6511360	Identifier	mbi		6510927	1					
ANR	6511361	CFGEntryNode	ENTRY		6510927		True				
ANR	6511362	CFGExitNode	EXIT		6510927		True				
ANR	6511363	CFGErrorNode	ERROR		6510927		True				
ANR	6511364	Symbol	mbi -> BaseAddress		6510927						
ANR	6511365	Symbol	sect_hdr		6510927						
ANR	6511366	Symbol	mod		6510927						
ANR	6511367	Symbol	map -> addr		6510927						
ANR	6511368	Symbol	~p_mask		6510927						
ANR	6511369	Symbol	sect_hdr -> Misc . VirtualSize		6510927						
ANR	6511370	Symbol	* map		6510927						
ANR	6511371	Symbol	map_list		6510927						
ANR	6511372	Symbol	mod -> sect_count		6510927						
ANR	6511373	Symbol	r_str_newf		6510927						
ANR	6511374	Symbol	len		6510927						
ANR	6511375	Symbol	sect_found		6510927						
ANR	6511376	Symbol	si		6510927						
ANR	6511377	Symbol	* * mod		6510927						
ANR	6511378	Symbol	p_mask		6510927						
ANR	6511379	Symbol	sect_hdr -> Name		6510927						
ANR	6511380	Symbol	sect_addr		6510927						
ANR	6511381	Symbol	mod -> map -> name		6510927						
ANR	6511382	Symbol	addr		6510927						
ANR	6511383	Symbol	map		6510927						
ANR	6511384	Symbol	* mbi		6510927						
ANR	6511385	Symbol	* si		6510927						
ANR	6511386	Symbol	si -> dwPageSize		6510927						
ANR	6511387	Symbol	sect_len		6510927						
ANR	6511388	Symbol	* sect_hdr		6510927						
ANR	6511389	Symbol	map_name		6510927						
ANR	6511390	Symbol	iter		6510927						
ANR	6511391	Symbol	i		6510927						
ANR	6511392	Symbol	h_proc		6510927						
ANR	6511393	Symbol	mbi -> RegionSize		6510927						
ANR	6511394	Symbol	mod -> sect_hdr		6510927						
ANR	6511395	Symbol	* mod		6510927						
ANR	6511396	Symbol	mod -> map -> addr_end		6510927						
ANR	6511397	Symbol	* mod -> map		6510927						
ANR	6511398	Symbol	sect_hdr -> VirtualAddress		6510927						
ANR	6511399	Symbol	mod -> map -> addr		6510927						
ANR	6511400	Symbol	mbi		6510927						
ANR	6511401	Symbol	map -> addr_end		6510927						
ANR	6511402	Symbol	mod -> map		6510927						
ANR	6511403	Symbol	sect_hdr -> Misc		6510927						
ANR	6511404	Symbol	sect_count		6510927						
ANR	6511405	Symbol	mod_list		6510927						
ANR	6511406	Function	proc_mem_map	227:0:6313:6683							
ANR	6511407	FunctionDef	"proc_mem_map (HANDLE h_proc , RList * map_list , MEMORY_BASIC_INFORMATION * mbi)"		6511406	0					
ANR	6511408	CompoundStatement		227:88:6401:6683	6511406	0					
ANR	6511409	IdentifierDeclStatement	TCHAR f_name [ MAX_PATH + 1 ] ;	228:1:6404:6430	6511406	0	True				
ANR	6511410	IdentifierDecl	f_name [ MAX_PATH + 1 ]		6511406	0					
ANR	6511411	IdentifierDeclType	TCHAR [ MAX_PATH + 1 ]		6511406	0					
ANR	6511412	Identifier	f_name		6511406	1					
ANR	6511413	AdditiveExpression	MAX_PATH + 1		6511406	2		+			
ANR	6511414	Identifier	MAX_PATH		6511406	0					
ANR	6511415	PrimaryExpression	1		6511406	1					
ANR	6511416	IdentifierDeclStatement	"DWORD len = GetMappedFileName ( h_proc , mbi -> BaseAddress , f_name , MAX_PATH ) ;"	230:1:6434:6508	6511406	1	True				
ANR	6511417	IdentifierDecl	"len = GetMappedFileName ( h_proc , mbi -> BaseAddress , f_name , MAX_PATH )"		6511406	0					
ANR	6511418	IdentifierDeclType	DWORD		6511406	0					
ANR	6511419	Identifier	len		6511406	1					
ANR	6511420	AssignmentExpression	"len = GetMappedFileName ( h_proc , mbi -> BaseAddress , f_name , MAX_PATH )"		6511406	2		=			
ANR	6511421	Identifier	len		6511406	0					
ANR	6511422	CallExpression	"GetMappedFileName ( h_proc , mbi -> BaseAddress , f_name , MAX_PATH )"		6511406	1					
ANR	6511423	Callee	GetMappedFileName		6511406	0					
ANR	6511424	Identifier	GetMappedFileName		6511406	0					
ANR	6511425	ArgumentList	h_proc		6511406	1					
ANR	6511426	Argument	h_proc		6511406	0					
ANR	6511427	Identifier	h_proc		6511406	0					
ANR	6511428	Argument	mbi -> BaseAddress		6511406	1					
ANR	6511429	PtrMemberAccess	mbi -> BaseAddress		6511406	0					
ANR	6511430	Identifier	mbi		6511406	0					
ANR	6511431	Identifier	BaseAddress		6511406	1					
ANR	6511432	Argument	f_name		6511406	2					
ANR	6511433	Identifier	f_name		6511406	0					
ANR	6511434	Argument	MAX_PATH		6511406	3					
ANR	6511435	Identifier	MAX_PATH		6511406	0					
ANR	6511436	IfStatement	if ( len > 0 )		6511406	2					
ANR	6511437	Condition	len > 0	231:5:6515:6521	6511406	0	True				
ANR	6511438	RelationalExpression	len > 0		6511406	0		>			
ANR	6511439	Identifier	len		6511406	0					
ANR	6511440	PrimaryExpression	0		6511406	1					
ANR	6511441	CompoundStatement		6:2:126:173	6511406	1					
ANR	6511442	IdentifierDeclStatement	char * f_name_ = r_sys_conv_win_to_utf8 ( f_name ) ;	232:2:6528:6575	6511406	0	True				
ANR	6511443	IdentifierDecl	* f_name_ = r_sys_conv_win_to_utf8 ( f_name )		6511406	0					
ANR	6511444	IdentifierDeclType	char *		6511406	0					
ANR	6511445	Identifier	f_name_		6511406	1					
ANR	6511446	AssignmentExpression	* f_name_ = r_sys_conv_win_to_utf8 ( f_name )		6511406	2		=			
ANR	6511447	Identifier	f_name_		6511406	0					
ANR	6511448	CallExpression	r_sys_conv_win_to_utf8 ( f_name )		6511406	1					
ANR	6511449	Callee	r_sys_conv_win_to_utf8		6511406	0					
ANR	6511450	Identifier	r_sys_conv_win_to_utf8		6511406	0					
ANR	6511451	ArgumentList	f_name		6511406	1					
ANR	6511452	Argument	f_name		6511406	0					
ANR	6511453	Identifier	f_name		6511406	0					
ANR	6511454	ExpressionStatement	"add_map_reg ( map_list , f_name_ , mbi )"	233:2:6579:6615	6511406	1	True				
ANR	6511455	CallExpression	"add_map_reg ( map_list , f_name_ , mbi )"		6511406	0					
ANR	6511456	Callee	add_map_reg		6511406	0					
ANR	6511457	Identifier	add_map_reg		6511406	0					
ANR	6511458	ArgumentList	map_list		6511406	1					
ANR	6511459	Argument	map_list		6511406	0					
ANR	6511460	Identifier	map_list		6511406	0					
ANR	6511461	Argument	f_name_		6511406	1					
ANR	6511462	Identifier	f_name_		6511406	0					
ANR	6511463	Argument	mbi		6511406	2					
ANR	6511464	Identifier	mbi		6511406	0					
ANR	6511465	ExpressionStatement	free ( f_name_ )	234:2:6619:6633	6511406	2	True				
ANR	6511466	CallExpression	free ( f_name_ )		6511406	0					
ANR	6511467	Callee	free		6511406	0					
ANR	6511468	Identifier	free		6511406	0					
ANR	6511469	ArgumentList	f_name_		6511406	1					
ANR	6511470	Argument	f_name_		6511406	0					
ANR	6511471	Identifier	f_name_		6511406	0					
ANR	6511472	ElseStatement	else		6511406	0					
ANR	6511473	CompoundStatement		9:8:241:241	6511406	0					
ANR	6511474	ExpressionStatement	"add_map_reg ( map_list , """" , mbi )"	236:2:6647:6678	6511406	0	True				
ANR	6511475	CallExpression	"add_map_reg ( map_list , """" , mbi )"		6511406	0					
ANR	6511476	Callee	add_map_reg		6511406	0					
ANR	6511477	Identifier	add_map_reg		6511406	0					
ANR	6511478	ArgumentList	map_list		6511406	1					
ANR	6511479	Argument	map_list		6511406	0					
ANR	6511480	Identifier	map_list		6511406	0					
ANR	6511481	Argument	""""""		6511406	1					
ANR	6511482	PrimaryExpression	""""""		6511406	0					
ANR	6511483	Argument	mbi		6511406	2					
ANR	6511484	Identifier	mbi		6511406	0					
ANR	6511485	ReturnType	static void		6511406	1					
ANR	6511486	Identifier	proc_mem_map		6511406	2					
ANR	6511487	ParameterList	"HANDLE h_proc , RList * map_list , MEMORY_BASIC_INFORMATION * mbi"		6511406	3					
ANR	6511488	Parameter	HANDLE h_proc	227:25:6338:6350	6511406	0	True				
ANR	6511489	ParameterType	HANDLE		6511406	0					
ANR	6511490	Identifier	h_proc		6511406	1					
ANR	6511491	Parameter	RList * map_list	227:40:6353:6367	6511406	1	True				
ANR	6511492	ParameterType	RList *		6511406	0					
ANR	6511493	Identifier	map_list		6511406	1					
ANR	6511494	Parameter	MEMORY_BASIC_INFORMATION * mbi	227:57:6370:6398	6511406	2	True				
ANR	6511495	ParameterType	MEMORY_BASIC_INFORMATION *		6511406	0					
ANR	6511496	Identifier	mbi		6511406	1					
ANR	6511497	CFGEntryNode	ENTRY		6511406		True				
ANR	6511498	CFGExitNode	EXIT		6511406		True				
ANR	6511499	Symbol	mbi -> BaseAddress		6511406						
ANR	6511500	Symbol	len		6511406						
ANR	6511501	Symbol	mbi		6511406						
ANR	6511502	Symbol	f_name		6511406						
ANR	6511503	Symbol	f_name_		6511406						
ANR	6511504	Symbol	map_list		6511406						
ANR	6511505	Symbol	h_proc		6511406						
ANR	6511506	Symbol	MAX_PATH		6511406						
ANR	6511507	Symbol	GetMappedFileName		6511406						
ANR	6511508	Symbol	r_sys_conv_win_to_utf8		6511406						
ANR	6511509	Symbol	* mbi		6511406						
ANR	6511510	Function	r_w32_dbg_maps	240:0:6686:7695							
ANR	6511511	FunctionDef	r_w32_dbg_maps (RDebug * dbg)		6511510	0					
ANR	6511512	CompoundStatement		240:41:6727:7695	6511510	0					
ANR	6511513	IfStatement	if ( dbg -> pid == - 1 )		6511510	0					
ANR	6511514	Condition	dbg -> pid == - 1	241:5:6734:6747	6511510	0	True				
ANR	6511515	EqualityExpression	dbg -> pid == - 1		6511510	0		==			
ANR	6511516	PtrMemberAccess	dbg -> pid		6511510	0					
ANR	6511517	Identifier	dbg		6511510	0					
ANR	6511518	Identifier	pid		6511510	1					
ANR	6511519	UnaryOperationExpression	- 1		6511510	1					
ANR	6511520	UnaryOperator	-		6511510	0					
ANR	6511521	PrimaryExpression	1		6511510	1					
ANR	6511522	CompoundStatement		2:21:22:22	6511510	1					
ANR	6511523	ReturnStatement	return NULL ;	242:2:6754:6765	6511510	0	True				
ANR	6511524	Identifier	NULL		6511510	0					
ANR	6511525	IdentifierDeclStatement	SYSTEM_INFO si = { 0 } ;	244:1:6771:6791	6511510	1	True				
ANR	6511526	IdentifierDecl	si = { 0 }		6511510	0					
ANR	6511527	IdentifierDeclType	SYSTEM_INFO		6511510	0					
ANR	6511528	Identifier	si		6511510	1					
ANR	6511529	AssignmentExpression	si = { 0 }		6511510	2		=			
ANR	6511530	Identifier	si		6511510	0					
ANR	6511531	InitializerList	0		6511510	1					
ANR	6511532	PrimaryExpression	0		6511510	0					
ANR	6511533	IdentifierDeclStatement	LPVOID cur_addr ;	245:1:6794:6809	6511510	2	True				
ANR	6511534	IdentifierDecl	cur_addr		6511510	0					
ANR	6511535	IdentifierDeclType	LPVOID		6511510	0					
ANR	6511536	Identifier	cur_addr		6511510	1					
ANR	6511537	IdentifierDeclStatement	MEMORY_BASIC_INFORMATION mbi ;	246:1:6812:6840	6511510	3	True				
ANR	6511538	IdentifierDecl	mbi		6511510	0					
ANR	6511539	IdentifierDeclType	MEMORY_BASIC_INFORMATION		6511510	0					
ANR	6511540	Identifier	mbi		6511510	1					
ANR	6511541	IdentifierDeclStatement	RWinModInfo mod_inf = { 0 } ;	247:1:6843:6868	6511510	4	True				
ANR	6511542	IdentifierDecl	mod_inf = { 0 }		6511510	0					
ANR	6511543	IdentifierDeclType	RWinModInfo		6511510	0					
ANR	6511544	Identifier	mod_inf		6511510	1					
ANR	6511545	AssignmentExpression	mod_inf = { 0 }		6511510	2		=			
ANR	6511546	Identifier	mod_inf		6511510	0					
ANR	6511547	InitializerList	0		6511510	1					
ANR	6511548	PrimaryExpression	0		6511510	0					
ANR	6511549	IdentifierDeclStatement	"RList * map_list = r_list_new ( ) , * mod_list = NULL ;"	248:1:6871:6919	6511510	5	True				
ANR	6511550	IdentifierDecl	* map_list = r_list_new ( )		6511510	0					
ANR	6511551	IdentifierDeclType	RList *		6511510	0					
ANR	6511552	Identifier	map_list		6511510	1					
ANR	6511553	AssignmentExpression	* map_list = r_list_new ( )		6511510	2		=			
ANR	6511554	Identifier	map_list		6511510	0					
ANR	6511555	CallExpression	r_list_new ( )		6511510	1					
ANR	6511556	Callee	r_list_new		6511510	0					
ANR	6511557	Identifier	r_list_new		6511510	0					
ANR	6511558	ArgumentList			6511510	1					
ANR	6511559	IdentifierDecl	* mod_list = NULL		6511510	1					
ANR	6511560	IdentifierDeclType	RList *		6511510	0					
ANR	6511561	Identifier	mod_list		6511510	1					
ANR	6511562	AssignmentExpression	* mod_list = NULL		6511510	2		=			
ANR	6511563	Identifier	NULL		6511510	0					
ANR	6511564	Identifier	NULL		6511510	1					
ANR	6511565	IdentifierDeclStatement	RIOW32Dbg * rio = dbg -> user ;	249:1:6922:6948	6511510	6	True				
ANR	6511566	IdentifierDecl	* rio = dbg -> user		6511510	0					
ANR	6511567	IdentifierDeclType	RIOW32Dbg *		6511510	0					
ANR	6511568	Identifier	rio		6511510	1					
ANR	6511569	AssignmentExpression	* rio = dbg -> user		6511510	2		=			
ANR	6511570	Identifier	rio		6511510	0					
ANR	6511571	PtrMemberAccess	dbg -> user		6511510	1					
ANR	6511572	Identifier	dbg		6511510	0					
ANR	6511573	Identifier	user		6511510	1					
ANR	6511574	ExpressionStatement	GetSystemInfo ( & si )	251:1:6952:6971	6511510	7	True				
ANR	6511575	CallExpression	GetSystemInfo ( & si )		6511510	0					
ANR	6511576	Callee	GetSystemInfo		6511510	0					
ANR	6511577	Identifier	GetSystemInfo		6511510	0					
ANR	6511578	ArgumentList	& si		6511510	1					
ANR	6511579	Argument	& si		6511510	0					
ANR	6511580	UnaryOperationExpression	& si		6511510	0					
ANR	6511581	UnaryOperator	&		6511510	0					
ANR	6511582	Identifier	si		6511510	1					
ANR	6511583	ExpressionStatement	cur_addr = si . lpMinimumApplicationAddress	252:1:6974:7015	6511510	8	True				
ANR	6511584	AssignmentExpression	cur_addr = si . lpMinimumApplicationAddress		6511510	0		=			
ANR	6511585	Identifier	cur_addr		6511510	0					
ANR	6511586	MemberAccess	si . lpMinimumApplicationAddress		6511510	1					
ANR	6511587	Identifier	si		6511510	0					
ANR	6511588	Identifier	lpMinimumApplicationAddress		6511510	1					
ANR	6511589	ExpressionStatement	mod_list = r_w32_dbg_modules ( dbg )	254:1:7050:7084	6511510	9	True				
ANR	6511590	AssignmentExpression	mod_list = r_w32_dbg_modules ( dbg )		6511510	0		=			
ANR	6511591	Identifier	mod_list		6511510	0					
ANR	6511592	CallExpression	r_w32_dbg_modules ( dbg )		6511510	1					
ANR	6511593	Callee	r_w32_dbg_modules		6511510	0					
ANR	6511594	Identifier	r_w32_dbg_modules		6511510	0					
ANR	6511595	ArgumentList	dbg		6511510	1					
ANR	6511596	Argument	dbg		6511510	0					
ANR	6511597	Identifier	dbg		6511510	0					
ANR	6511598	WhileStatement	"while ( cur_addr < si . lpMaximumApplicationAddress && VirtualQueryEx ( rio -> pi . hProcess , cur_addr , & mbi , sizeof ( mbi ) ) != 0 )"		6511510	10					
ANR	6511599	Condition	"cur_addr < si . lpMaximumApplicationAddress && VirtualQueryEx ( rio -> pi . hProcess , cur_addr , & mbi , sizeof ( mbi ) ) != 0"	256:8:7120:7234	6511510	0	True				
ANR	6511600	AndExpression	"cur_addr < si . lpMaximumApplicationAddress && VirtualQueryEx ( rio -> pi . hProcess , cur_addr , & mbi , sizeof ( mbi ) ) != 0"		6511510	0		&&			
ANR	6511601	RelationalExpression	cur_addr < si . lpMaximumApplicationAddress		6511510	0		<			
ANR	6511602	Identifier	cur_addr		6511510	0					
ANR	6511603	MemberAccess	si . lpMaximumApplicationAddress		6511510	1					
ANR	6511604	Identifier	si		6511510	0					
ANR	6511605	Identifier	lpMaximumApplicationAddress		6511510	1					
ANR	6511606	EqualityExpression	"VirtualQueryEx ( rio -> pi . hProcess , cur_addr , & mbi , sizeof ( mbi ) ) != 0"		6511510	1		!=			
ANR	6511607	CallExpression	"VirtualQueryEx ( rio -> pi . hProcess , cur_addr , & mbi , sizeof ( mbi ) )"		6511510	0					
ANR	6511608	Callee	VirtualQueryEx		6511510	0					
ANR	6511609	Identifier	VirtualQueryEx		6511510	0					
ANR	6511610	ArgumentList	rio -> pi . hProcess		6511510	1					
ANR	6511611	Argument	rio -> pi . hProcess		6511510	0					
ANR	6511612	MemberAccess	rio -> pi . hProcess		6511510	0					
ANR	6511613	PtrMemberAccess	rio -> pi		6511510	0					
ANR	6511614	Identifier	rio		6511510	0					
ANR	6511615	Identifier	pi		6511510	1					
ANR	6511616	Identifier	hProcess		6511510	1					
ANR	6511617	Argument	cur_addr		6511510	1					
ANR	6511618	Identifier	cur_addr		6511510	0					
ANR	6511619	Argument	& mbi		6511510	2					
ANR	6511620	UnaryOperationExpression	& mbi		6511510	0					
ANR	6511621	UnaryOperator	&		6511510	0					
ANR	6511622	Identifier	mbi		6511510	1					
ANR	6511623	Argument	sizeof ( mbi )		6511510	3					
ANR	6511624	SizeofExpression	sizeof ( mbi )		6511510	0					
ANR	6511625	Sizeof	sizeof		6511510	0					
ANR	6511626	SizeofOperand	mbi		6511510	1					
ANR	6511627	PrimaryExpression	0		6511510	1					
ANR	6511628	CompoundStatement		18:72:509:509	6511510	1					
ANR	6511629	IfStatement	if ( mbi . State != MEM_FREE )		6511510	0					
ANR	6511630	Condition	mbi . State != MEM_FREE	258:6:7245:7265	6511510	0	True				
ANR	6511631	EqualityExpression	mbi . State != MEM_FREE		6511510	0		!=			
ANR	6511632	MemberAccess	mbi . State		6511510	0					
ANR	6511633	Identifier	mbi		6511510	0					
ANR	6511634	Identifier	State		6511510	1					
ANR	6511635	Identifier	MEM_FREE		6511510	1					
ANR	6511636	CompoundStatement		19:29:540:540	6511510	1					
ANR	6511637	SwitchStatement	switch ( mbi . Type )		6511510	0					
ANR	6511638	Condition	mbi . Type	259:11:7281:7288	6511510	0	True				
ANR	6511639	MemberAccess	mbi . Type		6511510	0					
ANR	6511640	Identifier	mbi		6511510	0					
ANR	6511641	Identifier	Type		6511510	1					
ANR	6511642	CompoundStatement		20:21:563:563	6511510	1					
ANR	6511643	Label	case MEM_IMAGE :	260:3:7296:7310	6511510	0	True				
ANR	6511644	Identifier	MEM_IMAGE		6511510	0					
ANR	6511645	ExpressionStatement	"proc_mem_img ( rio -> pi . hProcess , map_list , mod_list , & mod_inf , & si , & mbi )"	261:4:7316:7388	6511510	1	True				
ANR	6511646	CallExpression	"proc_mem_img ( rio -> pi . hProcess , map_list , mod_list , & mod_inf , & si , & mbi )"		6511510	0					
ANR	6511647	Callee	proc_mem_img		6511510	0					
ANR	6511648	Identifier	proc_mem_img		6511510	0					
ANR	6511649	ArgumentList	rio -> pi . hProcess		6511510	1					
ANR	6511650	Argument	rio -> pi . hProcess		6511510	0					
ANR	6511651	MemberAccess	rio -> pi . hProcess		6511510	0					
ANR	6511652	PtrMemberAccess	rio -> pi		6511510	0					
ANR	6511653	Identifier	rio		6511510	0					
ANR	6511654	Identifier	pi		6511510	1					
ANR	6511655	Identifier	hProcess		6511510	1					
ANR	6511656	Argument	map_list		6511510	1					
ANR	6511657	Identifier	map_list		6511510	0					
ANR	6511658	Argument	mod_list		6511510	2					
ANR	6511659	Identifier	mod_list		6511510	0					
ANR	6511660	Argument	& mod_inf		6511510	3					
ANR	6511661	UnaryOperationExpression	& mod_inf		6511510	0					
ANR	6511662	UnaryOperator	&		6511510	0					
ANR	6511663	Identifier	mod_inf		6511510	1					
ANR	6511664	Argument	& si		6511510	4					
ANR	6511665	UnaryOperationExpression	& si		6511510	0					
ANR	6511666	UnaryOperator	&		6511510	0					
ANR	6511667	Identifier	si		6511510	1					
ANR	6511668	Argument	& mbi		6511510	5					
ANR	6511669	UnaryOperationExpression	& mbi		6511510	0					
ANR	6511670	UnaryOperator	&		6511510	0					
ANR	6511671	Identifier	mbi		6511510	1					
ANR	6511672	BreakStatement	break ;	262:4:7394:7399	6511510	2	True				
ANR	6511673	Label	case MEM_MAPPED :	263:3:7404:7419	6511510	3	True				
ANR	6511674	Identifier	MEM_MAPPED		6511510	0					
ANR	6511675	ExpressionStatement	"proc_mem_map ( rio -> pi . hProcess , map_list , & mbi )"	264:4:7425:7472	6511510	4	True				
ANR	6511676	CallExpression	"proc_mem_map ( rio -> pi . hProcess , map_list , & mbi )"		6511510	0					
ANR	6511677	Callee	proc_mem_map		6511510	0					
ANR	6511678	Identifier	proc_mem_map		6511510	0					
ANR	6511679	ArgumentList	rio -> pi . hProcess		6511510	1					
ANR	6511680	Argument	rio -> pi . hProcess		6511510	0					
ANR	6511681	MemberAccess	rio -> pi . hProcess		6511510	0					
ANR	6511682	PtrMemberAccess	rio -> pi		6511510	0					
ANR	6511683	Identifier	rio		6511510	0					
ANR	6511684	Identifier	pi		6511510	1					
ANR	6511685	Identifier	hProcess		6511510	1					
ANR	6511686	Argument	map_list		6511510	1					
ANR	6511687	Identifier	map_list		6511510	0					
ANR	6511688	Argument	& mbi		6511510	2					
ANR	6511689	UnaryOperationExpression	& mbi		6511510	0					
ANR	6511690	UnaryOperator	&		6511510	0					
ANR	6511691	Identifier	mbi		6511510	1					
ANR	6511692	BreakStatement	break ;	265:4:7478:7483	6511510	5	True				
ANR	6511693	Label	default :	266:3:7488:7495	6511510	6	True				
ANR	6511694	Identifier	default		6511510	0					
ANR	6511695	ExpressionStatement	"add_map_reg ( map_list , """" , & mbi )"	267:4:7501:7533	6511510	7	True				
ANR	6511696	CallExpression	"add_map_reg ( map_list , """" , & mbi )"		6511510	0					
ANR	6511697	Callee	add_map_reg		6511510	0					
ANR	6511698	Identifier	add_map_reg		6511510	0					
ANR	6511699	ArgumentList	map_list		6511510	1					
ANR	6511700	Argument	map_list		6511510	0					
ANR	6511701	Identifier	map_list		6511510	0					
ANR	6511702	Argument	""""""		6511510	1					
ANR	6511703	PrimaryExpression	""""""		6511510	0					
ANR	6511704	Argument	& mbi		6511510	2					
ANR	6511705	UnaryOperationExpression	& mbi		6511510	0					
ANR	6511706	UnaryOperator	&		6511510	0					
ANR	6511707	Identifier	mbi		6511510	1					
ANR	6511708	ExpressionStatement	cur_addr = ( LPVOID ) ( size_t ) ( ( ut64 ) ( size_t ) mbi . BaseAddress + mbi . RegionSize )	270:2:7546:7621	6511510	1	True				
ANR	6511709	AssignmentExpression	cur_addr = ( LPVOID ) ( size_t ) ( ( ut64 ) ( size_t ) mbi . BaseAddress + mbi . RegionSize )		6511510	0		=			
ANR	6511710	Identifier	cur_addr		6511510	0					
ANR	6511711	CastExpression	( LPVOID ) ( size_t ) ( ( ut64 ) ( size_t ) mbi . BaseAddress + mbi . RegionSize )		6511510	1					
ANR	6511712	CastTarget	LPVOID		6511510	0					
ANR	6511713	CastExpression	( size_t ) ( ( ut64 ) ( size_t ) mbi . BaseAddress + mbi . RegionSize )		6511510	1					
ANR	6511714	CastTarget	size_t		6511510	0					
ANR	6511715	AdditiveExpression	( ut64 ) ( size_t ) mbi . BaseAddress + mbi . RegionSize		6511510	1		+			
ANR	6511716	CastExpression	( ut64 ) ( size_t ) mbi . BaseAddress		6511510	0					
ANR	6511717	CastTarget	ut64		6511510	0					
ANR	6511718	CastExpression	( size_t ) mbi . BaseAddress		6511510	1					
ANR	6511719	CastTarget	size_t		6511510	0					
ANR	6511720	MemberAccess	mbi . BaseAddress		6511510	1					
ANR	6511721	Identifier	mbi		6511510	0					
ANR	6511722	Identifier	BaseAddress		6511510	1					
ANR	6511723	MemberAccess	mbi . RegionSize		6511510	1					
ANR	6511724	Identifier	mbi		6511510	0					
ANR	6511725	Identifier	RegionSize		6511510	1					
ANR	6511726	ExpressionStatement	free ( mod_inf . sect_hdr )	272:1:7627:7650	6511510	11	True				
ANR	6511727	CallExpression	free ( mod_inf . sect_hdr )		6511510	0					
ANR	6511728	Callee	free		6511510	0					
ANR	6511729	Identifier	free		6511510	0					
ANR	6511730	ArgumentList	mod_inf . sect_hdr		6511510	1					
ANR	6511731	Argument	mod_inf . sect_hdr		6511510	0					
ANR	6511732	MemberAccess	mod_inf . sect_hdr		6511510	0					
ANR	6511733	Identifier	mod_inf		6511510	0					
ANR	6511734	Identifier	sect_hdr		6511510	1					
ANR	6511735	ExpressionStatement	r_list_free ( mod_list )	273:1:7653:7675	6511510	12	True				
ANR	6511736	CallExpression	r_list_free ( mod_list )		6511510	0					
ANR	6511737	Callee	r_list_free		6511510	0					
ANR	6511738	Identifier	r_list_free		6511510	0					
ANR	6511739	ArgumentList	mod_list		6511510	1					
ANR	6511740	Argument	mod_list		6511510	0					
ANR	6511741	Identifier	mod_list		6511510	0					
ANR	6511742	ReturnStatement	return map_list ;	274:1:7678:7693	6511510	13	True				
ANR	6511743	Identifier	map_list		6511510	0					
ANR	6511744	ReturnType	R_API RList *		6511510	1					
ANR	6511745	Identifier	r_w32_dbg_maps		6511510	2					
ANR	6511746	ParameterList	RDebug * dbg		6511510	3					
ANR	6511747	Parameter	RDebug * dbg	240:28:6714:6724	6511510	0	True				
ANR	6511748	ParameterType	RDebug *		6511510	0					
ANR	6511749	Identifier	dbg		6511510	1					
ANR	6511750	CFGEntryNode	ENTRY		6511510		True				
ANR	6511751	CFGExitNode	EXIT		6511510		True				
ANR	6511752	Symbol	& si		6511510						
ANR	6511753	Symbol	* rio		6511510						
ANR	6511754	Symbol	dbg -> user		6511510						
ANR	6511755	Symbol	& mod_inf		6511510						
ANR	6511756	Symbol	map_list		6511510						
ANR	6511757	Symbol	VirtualQueryEx		6511510						
ANR	6511758	Symbol	rio -> pi . hProcess		6511510						
ANR	6511759	Symbol	r_w32_dbg_modules		6511510						
ANR	6511760	Symbol	si		6511510						
ANR	6511761	Symbol	rio		6511510						
ANR	6511762	Symbol	rio -> pi		6511510						
ANR	6511763	Symbol	& mbi		6511510						
ANR	6511764	Symbol	mod_inf . sect_hdr		6511510						
ANR	6511765	Symbol	NULL		6511510						
ANR	6511766	Symbol	mbi . State		6511510						
ANR	6511767	Symbol	dbg		6511510						
ANR	6511768	Symbol	* dbg		6511510						
ANR	6511769	Symbol	si . lpMaximumApplicationAddress		6511510						
ANR	6511770	Symbol	cur_addr		6511510						
ANR	6511771	Symbol	mbi . RegionSize		6511510						
ANR	6511772	Symbol	dbg -> pid		6511510						
ANR	6511773	Symbol	mbi		6511510						
ANR	6511774	Symbol	mbi . BaseAddress		6511510						
ANR	6511775	Symbol	si . lpMinimumApplicationAddress		6511510						
ANR	6511776	Symbol	mod_inf		6511510						
ANR	6511777	Symbol	mbi . Type		6511510						
ANR	6511778	Symbol	mod_list		6511510						
ANR	6511779	Symbol	r_list_new		6511510						
ANR	6511780	Symbol	MEM_FREE		6511510						
