command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5003555	File	data/converged/CVE-2019-16718~_radare2/libr_main_rax2.c								
ANR	5003556	DeclStmt									
ANR	5003557	Decl							RNum	RNum *	num
ANR	5003558	DeclStmt									
ANR	5003559	Decl							int	int ( )	help
ANR	5003560	DeclStmt									
ANR	5003561	Decl							ut64	ut64	flags
ANR	5003562	DeclStmt									
ANR	5003563	Decl							int	int ( )	use_stdin
ANR	5003564	DeclStmt									
ANR	5003565	Decl							int	int	force_mode
ANR	5003566	DeclStmt									
ANR	5003567	Decl							int	"int ( char * str , int len , int last )"	rax
ANR	5003568	DeclStmt									
ANR	5003569	Decl							const char	const char *	nl
ANR	5003570	Function	format_output	18:0:375:1431							
ANR	5003571	FunctionDef	"format_output (char mode , const char * s)"		5003570	0					
ANR	5003572	CompoundStatement		18:51:426:1431	5003570	0					
ANR	5003573	IdentifierDeclStatement	"ut64 n = r_num_math ( num , s ) ;"	19:1:429:457	5003570	0	True				
ANR	5003574	IdentifierDecl	"n = r_num_math ( num , s )"		5003570	0					
ANR	5003575	IdentifierDeclType	ut64		5003570	0					
ANR	5003576	Identifier	n		5003570	1					
ANR	5003577	AssignmentExpression	"n = r_num_math ( num , s )"		5003570	2		=			
ANR	5003578	Identifier	n		5003570	0					
ANR	5003579	CallExpression	"r_num_math ( num , s )"		5003570	1					
ANR	5003580	Callee	r_num_math		5003570	0					
ANR	5003581	Identifier	r_num_math		5003570	0					
ANR	5003582	ArgumentList	num		5003570	1					
ANR	5003583	Argument	num		5003570	0					
ANR	5003584	Identifier	num		5003570	0					
ANR	5003585	Argument	s		5003570	1					
ANR	5003586	Identifier	s		5003570	0					
ANR	5003587	IdentifierDeclStatement	char strbits [ 65 ] ;	20:1:460:476	5003570	1	True				
ANR	5003588	IdentifierDecl	strbits [ 65 ]		5003570	0					
ANR	5003589	IdentifierDeclType	char [ 65 ]		5003570	0					
ANR	5003590	Identifier	strbits		5003570	1					
ANR	5003591	PrimaryExpression	65		5003570	2					
ANR	5003592	IfStatement	if ( force_mode )		5003570	2					
ANR	5003593	Condition	force_mode	21:5:483:492	5003570	0	True				
ANR	5003594	Identifier	force_mode		5003570	0					
ANR	5003595	CompoundStatement		4:17:68:68	5003570	1					
ANR	5003596	ExpressionStatement	mode = force_mode	22:2:499:516	5003570	0	True				
ANR	5003597	AssignmentExpression	mode = force_mode		5003570	0		=			
ANR	5003598	Identifier	mode		5003570	0					
ANR	5003599	Identifier	force_mode		5003570	1					
ANR	5003600	IfStatement	if ( flags & 2 )		5003570	3					
ANR	5003601	Condition	flags & 2	24:5:526:534	5003570	0	True				
ANR	5003602	BitAndExpression	flags & 2		5003570	0		&			
ANR	5003603	Identifier	flags		5003570	0					
ANR	5003604	PrimaryExpression	2		5003570	1					
ANR	5003605	CompoundStatement		8:2:114:125	5003570	1					
ANR	5003606	IdentifierDeclStatement	ut64 n2 = n ;	25:2:541:552	5003570	0	True				
ANR	5003607	IdentifierDecl	n2 = n		5003570	0					
ANR	5003608	IdentifierDeclType	ut64		5003570	0					
ANR	5003609	Identifier	n2		5003570	1					
ANR	5003610	AssignmentExpression	n2 = n		5003570	2		=			
ANR	5003611	Identifier	n		5003570	0					
ANR	5003612	Identifier	n		5003570	1					
ANR	5003613	ExpressionStatement	"r_mem_swapendian ( ( ut8 * ) & n , ( ut8 * ) & n2 , ( n >> 32 ) ? 8 : 4 )"	26:2:556:615	5003570	1	True				
ANR	5003614	CallExpression	"r_mem_swapendian ( ( ut8 * ) & n , ( ut8 * ) & n2 , ( n >> 32 ) ? 8 : 4 )"		5003570	0					
ANR	5003615	Callee	r_mem_swapendian		5003570	0					
ANR	5003616	Identifier	r_mem_swapendian		5003570	0					
ANR	5003617	ArgumentList	( ut8 * ) & n		5003570	1					
ANR	5003618	Argument	( ut8 * ) & n		5003570	0					
ANR	5003619	CastExpression	( ut8 * ) & n		5003570	0					
ANR	5003620	CastTarget	ut8 *		5003570	0					
ANR	5003621	UnaryOperationExpression	& n		5003570	1					
ANR	5003622	UnaryOperator	&		5003570	0					
ANR	5003623	Identifier	n		5003570	1					
ANR	5003624	Argument	( ut8 * ) & n2		5003570	1					
ANR	5003625	CastExpression	( ut8 * ) & n2		5003570	0					
ANR	5003626	CastTarget	ut8 *		5003570	0					
ANR	5003627	UnaryOperationExpression	& n2		5003570	1					
ANR	5003628	UnaryOperator	&		5003570	0					
ANR	5003629	Identifier	n2		5003570	1					
ANR	5003630	Argument	( n >> 32 ) ? 8 : 4		5003570	2					
ANR	5003631	ConditionalExpression	( n >> 32 ) ? 8 : 4		5003570	0					
ANR	5003632	Condition	n >> 32		5003570	0					
ANR	5003633	ShiftExpression	n >> 32		5003570	0		>>			
ANR	5003634	Identifier	n		5003570	0					
ANR	5003635	PrimaryExpression	32		5003570	1					
ANR	5003636	PrimaryExpression	8		5003570	1					
ANR	5003637	PrimaryExpression	4		5003570	2					
ANR	5003638	SwitchStatement	switch ( mode )		5003570	4					
ANR	5003639	Condition	mode	28:9:629:632	5003570	0	True				
ANR	5003640	Identifier	mode		5003570	0					
ANR	5003641	CompoundStatement		26:2:529:548	5003570	1					
ANR	5003642	Label	case 'I' :	29:1:638:646	5003570	0	True				
ANR	5003643	Statement	printf	30:2:650:655	5003570	1	True				
ANR	5003644	Statement	(	30:9:657:657	5003570	2	True				
ANR	5003645	Statement	"""%"""	30:10:658:660	5003570	3	True				
ANR	5003646	Statement	PFMT64d	30:14:662:668	5003570	4	True				
ANR	5003647	Statement	"""\\n"""	30:22:670:673	5003570	5	True				
ANR	5003648	Statement	","	30:26:674:674	5003570	6	True				
ANR	5003649	Statement	n	30:28:676:676	5003570	7	True				
ANR	5003650	Statement	)	30:29:677:677	5003570	8	True				
ANR	5003651	ExpressionStatement		30:30:678:678	5003570	9	True				
ANR	5003652	BreakStatement	break ;	31:2:682:687	5003570	10	True				
ANR	5003653	Label	case '0' :	32:1:690:698	5003570	11	True				
ANR	5003654	Statement	printf	33:2:702:707	5003570	12	True				
ANR	5003655	Statement	(	33:9:709:709	5003570	13	True				
ANR	5003656	Statement	"""0x%"""	33:10:710:714	5003570	14	True				
ANR	5003657	Statement	PFMT64x	33:16:716:722	5003570	15	True				
ANR	5003658	Statement	"""\\n"""	33:24:724:727	5003570	16	True				
ANR	5003659	Statement	","	33:28:728:728	5003570	17	True				
ANR	5003660	Statement	n	33:30:730:730	5003570	18	True				
ANR	5003661	Statement	)	33:31:731:731	5003570	19	True				
ANR	5003662	ExpressionStatement		33:32:732:732	5003570	20	True				
ANR	5003663	BreakStatement	break ;	34:2:736:741	5003570	21	True				
ANR	5003664	Label	case 'F' :	35:1:744:752	5003570	22	True				
ANR	5003665	CompoundStatement		19:2:331:354	5003570	23					
ANR	5003666	IdentifierDeclStatement	float * f = ( float * ) & n ;	36:2:758:781	5003570	0	True				
ANR	5003667	IdentifierDecl	* f = ( float * ) & n		5003570	0					
ANR	5003668	IdentifierDeclType	float *		5003570	0					
ANR	5003669	Identifier	f		5003570	1					
ANR	5003670	AssignmentExpression	* f = ( float * ) & n		5003570	2		=			
ANR	5003671	Identifier	f		5003570	0					
ANR	5003672	CastExpression	( float * ) & n		5003570	1					
ANR	5003673	CastTarget	float *		5003570	0					
ANR	5003674	UnaryOperationExpression	& n		5003570	1					
ANR	5003675	UnaryOperator	&		5003570	0					
ANR	5003676	Identifier	n		5003570	1					
ANR	5003677	ExpressionStatement	"printf ( ""%ff\\n"" , * f )"	37:2:785:805	5003570	1	True				
ANR	5003678	CallExpression	"printf ( ""%ff\\n"" , * f )"		5003570	0					
ANR	5003679	Callee	printf		5003570	0					
ANR	5003680	Identifier	printf		5003570	0					
ANR	5003681	ArgumentList	"""%ff\\n"""		5003570	1					
ANR	5003682	Argument	"""%ff\\n"""		5003570	0					
ANR	5003683	PrimaryExpression	"""%ff\\n"""		5003570	0					
ANR	5003684	Argument	* f		5003570	1					
ANR	5003685	UnaryOperationExpression	* f		5003570	0					
ANR	5003686	UnaryOperator	*		5003570	0					
ANR	5003687	Identifier	f		5003570	1					
ANR	5003688	BreakStatement	break ;	38:3:810:815	5003570	24	True				
ANR	5003689	Label	case 'f' :	39:1:818:826	5003570	25	True				
ANR	5003690	ExpressionStatement	"printf ( ""%.01lf\\n"" , num -> fvalue )"	39:11:828:860	5003570	26	True				
ANR	5003691	CallExpression	"printf ( ""%.01lf\\n"" , num -> fvalue )"		5003570	0					
ANR	5003692	Callee	printf		5003570	0					
ANR	5003693	Identifier	printf		5003570	0					
ANR	5003694	ArgumentList	"""%.01lf\\n"""		5003570	1					
ANR	5003695	Argument	"""%.01lf\\n"""		5003570	0					
ANR	5003696	PrimaryExpression	"""%.01lf\\n"""		5003570	0					
ANR	5003697	Argument	num -> fvalue		5003570	1					
ANR	5003698	PtrMemberAccess	num -> fvalue		5003570	0					
ANR	5003699	Identifier	num		5003570	0					
ANR	5003700	Identifier	fvalue		5003570	1					
ANR	5003701	BreakStatement	break ;	39:45:862:867	5003570	27	True				
ANR	5003702	Label	case 'l' :	40:1:870:878	5003570	28	True				
ANR	5003703	ExpressionStatement	R_STATIC_ASSERT ( sizeof ( float ) == 4 )	41:2:882:919	5003570	29	True				
ANR	5003704	CallExpression	R_STATIC_ASSERT ( sizeof ( float ) == 4 )		5003570	0					
ANR	5003705	Callee	R_STATIC_ASSERT		5003570	0					
ANR	5003706	Identifier	R_STATIC_ASSERT		5003570	0					
ANR	5003707	ArgumentList	sizeof ( float ) == 4		5003570	1					
ANR	5003708	Argument	sizeof ( float ) == 4		5003570	0					
ANR	5003709	EqualityExpression	sizeof ( float ) == 4		5003570	0		==			
ANR	5003710	SizeofExpression	sizeof ( float )		5003570	0					
ANR	5003711	Sizeof	sizeof		5003570	0					
ANR	5003712	SizeofOperand	float		5003570	1					
ANR	5003713	PrimaryExpression	4		5003570	1					
ANR	5003714	IdentifierDeclStatement	float f = ( float ) num -> fvalue ;	42:2:923:952	5003570	30	True				
ANR	5003715	IdentifierDecl	f = ( float ) num -> fvalue		5003570	0					
ANR	5003716	IdentifierDeclType	float		5003570	0					
ANR	5003717	Identifier	f		5003570	1					
ANR	5003718	AssignmentExpression	f = ( float ) num -> fvalue		5003570	2		=			
ANR	5003719	Identifier	f		5003570	0					
ANR	5003720	CastExpression	( float ) num -> fvalue		5003570	1					
ANR	5003721	CastTarget	float		5003570	0					
ANR	5003722	PtrMemberAccess	num -> fvalue		5003570	1					
ANR	5003723	Identifier	num		5003570	0					
ANR	5003724	Identifier	fvalue		5003570	1					
ANR	5003725	IdentifierDeclStatement	ut8 * p = ( ut8 * ) & f ;	43:2:956:975	5003570	31	True				
ANR	5003726	IdentifierDecl	* p = ( ut8 * ) & f		5003570	0					
ANR	5003727	IdentifierDeclType	ut8 *		5003570	0					
ANR	5003728	Identifier	p		5003570	1					
ANR	5003729	AssignmentExpression	* p = ( ut8 * ) & f		5003570	2		=			
ANR	5003730	Identifier	p		5003570	0					
ANR	5003731	CastExpression	( ut8 * ) & f		5003570	1					
ANR	5003732	CastTarget	ut8 *		5003570	0					
ANR	5003733	UnaryOperationExpression	& f		5003570	1					
ANR	5003734	UnaryOperator	&		5003570	0					
ANR	5003735	Identifier	f		5003570	1					
ANR	5003736	ExpressionStatement	"printf ( ""Fx%02x%02x%02x%02x\\n"" , p [ 3 ] , p [ 2 ] , p [ 1 ] , p [ 0 ] )"	44:2:979:1034	5003570	32	True				
ANR	5003737	CallExpression	"printf ( ""Fx%02x%02x%02x%02x\\n"" , p [ 3 ] , p [ 2 ] , p [ 1 ] , p [ 0 ] )"		5003570	0					
ANR	5003738	Callee	printf		5003570	0					
ANR	5003739	Identifier	printf		5003570	0					
ANR	5003740	ArgumentList	"""Fx%02x%02x%02x%02x\\n"""		5003570	1					
ANR	5003741	Argument	"""Fx%02x%02x%02x%02x\\n"""		5003570	0					
ANR	5003742	PrimaryExpression	"""Fx%02x%02x%02x%02x\\n"""		5003570	0					
ANR	5003743	Argument	p [ 3 ]		5003570	1					
ANR	5003744	ArrayIndexing	p [ 3 ]		5003570	0					
ANR	5003745	Identifier	p		5003570	0					
ANR	5003746	PrimaryExpression	3		5003570	1					
ANR	5003747	Argument	p [ 2 ]		5003570	2					
ANR	5003748	ArrayIndexing	p [ 2 ]		5003570	0					
ANR	5003749	Identifier	p		5003570	0					
ANR	5003750	PrimaryExpression	2		5003570	1					
ANR	5003751	Argument	p [ 1 ]		5003570	3					
ANR	5003752	ArrayIndexing	p [ 1 ]		5003570	0					
ANR	5003753	Identifier	p		5003570	0					
ANR	5003754	PrimaryExpression	1		5003570	1					
ANR	5003755	Argument	p [ 0 ]		5003570	4					
ANR	5003756	ArrayIndexing	p [ 0 ]		5003570	0					
ANR	5003757	Identifier	p		5003570	0					
ANR	5003758	PrimaryExpression	0		5003570	1					
ANR	5003759	BreakStatement	break ;	45:2:1038:1043	5003570	33	True				
ANR	5003760	Label	case 'O' :	46:1:1046:1054	5003570	34	True				
ANR	5003761	Statement	printf	46:11:1056:1061	5003570	35	True				
ANR	5003762	Statement	(	46:18:1063:1063	5003570	36	True				
ANR	5003763	Statement	"""0%"""	46:19:1064:1067	5003570	37	True				
ANR	5003764	Statement	PFMT64o	46:24:1069:1075	5003570	38	True				
ANR	5003765	Statement	"""\\n"""	46:32:1077:1080	5003570	39	True				
ANR	5003766	Statement	","	46:36:1081:1081	5003570	40	True				
ANR	5003767	Statement	n	46:38:1083:1083	5003570	41	True				
ANR	5003768	Statement	)	46:39:1084:1084	5003570	42	True				
ANR	5003769	ExpressionStatement		46:40:1085:1085	5003570	43	True				
ANR	5003770	BreakStatement	break ;	46:42:1087:1092	5003570	44	True				
ANR	5003771	Label	case 'B' :	47:1:1095:1103	5003570	45	True				
ANR	5003772	IfStatement	if ( n )		5003570	46					
ANR	5003773	Condition	n	48:6:1111:1111	5003570	0	True				
ANR	5003774	Identifier	n		5003570	0					
ANR	5003775	CompoundStatement		31:9:687:687	5003570	1					
ANR	5003776	ExpressionStatement	"r_num_to_bits ( strbits , n )"	49:3:1119:1145	5003570	0	True				
ANR	5003777	CallExpression	"r_num_to_bits ( strbits , n )"		5003570	0					
ANR	5003778	Callee	r_num_to_bits		5003570	0					
ANR	5003779	Identifier	r_num_to_bits		5003570	0					
ANR	5003780	ArgumentList	strbits		5003570	1					
ANR	5003781	Argument	strbits		5003570	0					
ANR	5003782	Identifier	strbits		5003570	0					
ANR	5003783	Argument	n		5003570	1					
ANR	5003784	Identifier	n		5003570	0					
ANR	5003785	ExpressionStatement	"printf ( ""%sb\\n"" , strbits )"	50:3:1150:1175	5003570	1	True				
ANR	5003786	CallExpression	"printf ( ""%sb\\n"" , strbits )"		5003570	0					
ANR	5003787	Callee	printf		5003570	0					
ANR	5003788	Identifier	printf		5003570	0					
ANR	5003789	ArgumentList	"""%sb\\n"""		5003570	1					
ANR	5003790	Argument	"""%sb\\n"""		5003570	0					
ANR	5003791	PrimaryExpression	"""%sb\\n"""		5003570	0					
ANR	5003792	Argument	strbits		5003570	1					
ANR	5003793	Identifier	strbits		5003570	0					
ANR	5003794	ElseStatement	else		5003570	0					
ANR	5003795	CompoundStatement		34:9:759:759	5003570	0					
ANR	5003796	ExpressionStatement	"printf ( ""0b\\n"" )"	52:3:1191:1206	5003570	0	True				
ANR	5003797	CallExpression	"printf ( ""0b\\n"" )"		5003570	0					
ANR	5003798	Callee	printf		5003570	0					
ANR	5003799	Identifier	printf		5003570	0					
ANR	5003800	ArgumentList	"""0b\\n"""		5003570	1					
ANR	5003801	Argument	"""0b\\n"""		5003570	0					
ANR	5003802	PrimaryExpression	"""0b\\n"""		5003570	0					
ANR	5003803	BreakStatement	break ;	54:2:1214:1219	5003570	47	True				
ANR	5003804	Label	case 'T' :	55:1:1222:1230	5003570	48	True				
ANR	5003805	IfStatement	if ( n )		5003570	49					
ANR	5003806	Condition	n	56:6:1238:1238	5003570	0	True				
ANR	5003807	Identifier	n		5003570	0					
ANR	5003808	CompoundStatement		39:9:814:814	5003570	1					
ANR	5003809	ExpressionStatement	"r_num_to_trits ( strbits , n )"	57:3:1246:1273	5003570	0	True				
ANR	5003810	CallExpression	"r_num_to_trits ( strbits , n )"		5003570	0					
ANR	5003811	Callee	r_num_to_trits		5003570	0					
ANR	5003812	Identifier	r_num_to_trits		5003570	0					
ANR	5003813	ArgumentList	strbits		5003570	1					
ANR	5003814	Argument	strbits		5003570	0					
ANR	5003815	Identifier	strbits		5003570	0					
ANR	5003816	Argument	n		5003570	1					
ANR	5003817	Identifier	n		5003570	0					
ANR	5003818	ExpressionStatement	"printf ( ""%st\\n"" , strbits )"	58:3:1278:1303	5003570	1	True				
ANR	5003819	CallExpression	"printf ( ""%st\\n"" , strbits )"		5003570	0					
ANR	5003820	Callee	printf		5003570	0					
ANR	5003821	Identifier	printf		5003570	0					
ANR	5003822	ArgumentList	"""%st\\n"""		5003570	1					
ANR	5003823	Argument	"""%st\\n"""		5003570	0					
ANR	5003824	PrimaryExpression	"""%st\\n"""		5003570	0					
ANR	5003825	Argument	strbits		5003570	1					
ANR	5003826	Identifier	strbits		5003570	0					
ANR	5003827	ElseStatement	else		5003570	0					
ANR	5003828	CompoundStatement		42:9:887:887	5003570	0					
ANR	5003829	ExpressionStatement	"printf ( ""0t\\n"" )"	60:3:1319:1334	5003570	0	True				
ANR	5003830	CallExpression	"printf ( ""0t\\n"" )"		5003570	0					
ANR	5003831	Callee	printf		5003570	0					
ANR	5003832	Identifier	printf		5003570	0					
ANR	5003833	ArgumentList	"""0t\\n"""		5003570	1					
ANR	5003834	Argument	"""0t\\n"""		5003570	0					
ANR	5003835	PrimaryExpression	"""0t\\n"""		5003570	0					
ANR	5003836	BreakStatement	break ;	62:2:1342:1347	5003570	50	True				
ANR	5003837	Label	default :	63:1:1350:1357	5003570	51	True				
ANR	5003838	Identifier	default		5003570	0					
ANR	5003839	ExpressionStatement	"eprintf ( ""Unknown output mode %d\\n"" , mode )"	64:2:1361:1403	5003570	52	True				
ANR	5003840	CallExpression	"eprintf ( ""Unknown output mode %d\\n"" , mode )"		5003570	0					
ANR	5003841	Callee	eprintf		5003570	0					
ANR	5003842	Identifier	eprintf		5003570	0					
ANR	5003843	ArgumentList	"""Unknown output mode %d\\n"""		5003570	1					
ANR	5003844	Argument	"""Unknown output mode %d\\n"""		5003570	0					
ANR	5003845	PrimaryExpression	"""Unknown output mode %d\\n"""		5003570	0					
ANR	5003846	Argument	mode		5003570	1					
ANR	5003847	Identifier	mode		5003570	0					
ANR	5003848	BreakStatement	break ;	65:2:1407:1412	5003570	53	True				
ANR	5003849	ReturnStatement	return true ;	67:1:1418:1429	5003570	5	True				
ANR	5003850	Identifier	true		5003570	0					
ANR	5003851	ReturnType	static int		5003570	1					
ANR	5003852	Identifier	format_output		5003570	2					
ANR	5003853	ParameterList	"char mode , const char * s"		5003570	3					
ANR	5003854	Parameter	char mode	18:25:400:408	5003570	0	True				
ANR	5003855	ParameterType	char		5003570	0					
ANR	5003856	Identifier	mode		5003570	1					
ANR	5003857	Parameter	const char * s	18:36:411:423	5003570	1	True				
ANR	5003858	ParameterType	const char *		5003570	0					
ANR	5003859	Identifier	s		5003570	1					
ANR	5003860	CFGEntryNode	ENTRY		5003570		True				
ANR	5003861	CFGExitNode	EXIT		5003570		True				
ANR	5003862	Symbol	strbits		5003570						
ANR	5003863	Symbol	n2		5003570						
ANR	5003864	Symbol	f		5003570						
ANR	5003865	Symbol	num		5003570						
ANR	5003866	Symbol	flags		5003570						
ANR	5003867	Symbol	& f		5003570						
ANR	5003868	Symbol	n		5003570						
ANR	5003869	Symbol	r_num_math		5003570						
ANR	5003870	Symbol	& n2		5003570						
ANR	5003871	Symbol	mode		5003570						
ANR	5003872	Symbol	* f		5003570						
ANR	5003873	Symbol	* num		5003570						
ANR	5003874	Symbol	p		5003570						
ANR	5003875	Symbol	force_mode		5003570						
ANR	5003876	Symbol	s		5003570						
ANR	5003877	Symbol	& n		5003570						
ANR	5003878	Symbol	true		5003570						
ANR	5003879	Symbol	* p		5003570						
ANR	5003880	Symbol	num -> fvalue		5003570						
ANR	5003881	Function	print_ascii_table	70:0:1434:1502							
ANR	5003882	FunctionDef	print_ascii_table ()		5003881	0					
ANR	5003883	CompoundStatement		70:32:1466:1502	5003881	0					
ANR	5003884	ExpressionStatement	"printf ( ""%s"" , ret_ascii_table ( ) )"	71:1:1469:1500	5003881	0	True				
ANR	5003885	CallExpression	"printf ( ""%s"" , ret_ascii_table ( ) )"		5003881	0					
ANR	5003886	Callee	printf		5003881	0					
ANR	5003887	Identifier	printf		5003881	0					
ANR	5003888	ArgumentList	"""%s"""		5003881	1					
ANR	5003889	Argument	"""%s"""		5003881	0					
ANR	5003890	PrimaryExpression	"""%s"""		5003881	0					
ANR	5003891	Argument	ret_ascii_table ( )		5003881	1					
ANR	5003892	CallExpression	ret_ascii_table ( )		5003881	0					
ANR	5003893	Callee	ret_ascii_table		5003881	0					
ANR	5003894	Identifier	ret_ascii_table		5003881	0					
ANR	5003895	ArgumentList			5003881	1					
ANR	5003896	ReturnType	static void		5003881	1					
ANR	5003897	Identifier	print_ascii_table		5003881	2					
ANR	5003898	ParameterList			5003881	3					
ANR	5003899	CFGEntryNode	ENTRY		5003881		True				
ANR	5003900	CFGExitNode	EXIT		5003881		True				
ANR	5003901	Symbol	ret_ascii_table		5003881						
ANR	5003902	Function	help	74:0:1505:4116							
ANR	5003903	FunctionDef	help ()		5003902	0					
ANR	5003904	CompoundStatement		74:18:1523:4116	5003902	0					
ANR	5003905	Statement	printf	75:1:1526:1531	5003902	0	True				
ANR	5003906	Statement	(	75:8:1533:1533	5003902	1	True				
ANR	5003907	Statement	"""  =[base]                      ;  rax2 =10 0x46 -> output in base 10\\n"""	76:2:1537:1608	5003902	2	True				
ANR	5003908	Statement	"""  int     ->  hex              ;  rax2 10\\n"""	77:2:1612:1656	5003902	3	True				
ANR	5003909	Statement	"""  hex     ->  int              ;  rax2 0xa\\n"""	78:2:1660:1705	5003902	4	True				
ANR	5003910	Statement	"""  -int    ->  hex              ;  rax2 -77\\n"""	79:2:1709:1754	5003902	5	True				
ANR	5003911	Statement	"""  -hex    ->  int              ;  rax2 0xffffffb3\\n"""	80:2:1758:1810	5003902	6	True				
ANR	5003912	Statement	"""  int     ->  bin              ;  rax2 b30\\n"""	81:2:1814:1859	5003902	7	True				
ANR	5003913	Statement	"""  int     ->  ternary          ;  rax2 t42\\n"""	82:2:1863:1908	5003902	8	True				
ANR	5003914	Statement	"""  bin     ->  int              ;  rax2 1010d\\n"""	83:2:1912:1959	5003902	9	True				
ANR	5003915	Statement	"""  ternary ->  int              ;  rax2 1010dt\\n"""	84:2:1963:2011	5003902	10	True				
ANR	5003916	Statement	"""  float   ->  hex              ;  rax2 3.33f\\n"""	85:2:2015:2062	5003902	11	True				
ANR	5003917	Statement	"""  hex     ->  float            ;  rax2 Fx40551ed8\\n"""	86:2:2066:2118	5003902	12	True				
ANR	5003918	Statement	"""  oct     ->  hex              ;  rax2 35o\\n"""	87:2:2122:2167	5003902	13	True				
ANR	5003919	Statement	"""  hex     ->  oct              ;  rax2 Ox12 (O is a letter)\\n"""	88:2:2171:2233	5003902	14	True				
ANR	5003920	Statement	"""  bin     ->  hex              ;  rax2 1100011b\\n"""	89:2:2237:2287	5003902	15	True				
ANR	5003921	Statement	"""  hex     ->  bin              ;  rax2 Bx63\\n"""	90:2:2291:2337	5003902	16	True				
ANR	5003922	Statement	"""  ternary ->  hex              ;  rax2 212t\\n"""	91:2:2341:2387	5003902	17	True				
ANR	5003923	Statement	"""  hex     ->  ternary          ;  rax2 Tx23\\n"""	92:2:2391:2437	5003902	18	True				
ANR	5003924	Statement	"""  raw     ->  hex              ;  rax2 -S < /binfile\\n"""	93:2:2441:2496	5003902	19	True				
ANR	5003925	Statement	"""  hex     ->  raw              ;  rax2 -s 414141\\n"""	94:2:2500:2551	5003902	20	True				
ANR	5003926	Statement	"""  -l                           ;  append newline to output (for -E/-D/-r/..\\n"""	95:2:2555:2633	5003902	21	True				
ANR	5003927	Statement	"""  -a      show ascii table     ;  rax2 -a\\n"""	96:2:2637:2681	5003902	22	True				
ANR	5003928	Statement	"""  -b      bin -> str           ;  rax2 -b 01000101 01110110\\n"""	97:2:2685:2747	5003902	23	True				
ANR	5003929	Statement	"""  -B      str -> bin           ;  rax2 -B hello\\n"""	98:2:2751:2801	5003902	24	True				
ANR	5003930	Statement	"""  -d      force integer        ;  rax2 -d 3 -> 3 instead of 0x3\\n"""	99:2:2805:2871	5003902	25	True				
ANR	5003931	Statement	"""  -e      swap endianness      ;  rax2 -e 0x33\\n"""	100:2:2875:2924	5003902	26	True				
ANR	5003932	Statement	"""  -D      base64 decode        ;\\n"""	101:2:2928:2963	5003902	27	True				
ANR	5003933	Statement	"""  -E      base64 encode        ;\\n"""	102:2:2967:3002	5003902	28	True				
ANR	5003934	Statement	"""  -f      floating point       ;  rax2 -f 6.3+2.1\\n"""	103:2:3006:3058	5003902	29	True				
ANR	5003935	Statement	"""  -F      stdin slurp code hex ;  rax2 -F < shellcode.[c/py/js]\\n"""	104:2:3062:3128	5003902	30	True				
ANR	5003936	Statement	"""  -h      help                 ;  rax2 -h\\n"""	105:2:3132:3176	5003902	31	True				
ANR	5003937	Statement	"""  -i      dump as C byte array ;  rax2 -i < bytes\\n"""	106:2:3180:3232	5003902	32	True				
ANR	5003938	Statement	"""  -k      keep base            ;  rax2 -k 33+3 -> 36\\n"""	107:2:3236:3291	5003902	33	True				
ANR	5003939	Statement	"""  -K      randomart            ;  rax2 -K 0x34 1020304050\\n"""	108:2:3295:3355	5003902	34	True				
ANR	5003940	Statement	"""  -L      bin -> hex(bignum)   ;  rax2 -L 111111111 # 0x1ff\\n"""	109:2:3359:3421	5003902	35	True				
ANR	5003941	Statement	"""  -n      binary number        ;  rax2 -n 0x1234 # 34120000\\n"""	110:2:3425:3487	5003902	36	True				
ANR	5003942	Statement	"""  -o      octalstr -> raw      ;  rax2 -o \\\\162 \\\\62 # r2\\n"""	111:2:3491:3551	5003902	37	True				
ANR	5003943	Statement	"""  -N      binary number        ;  rax2 -N 0x1234 # \\\\x34\\\\x12\\\\x00\\\\x00\\n"""	112:2:3555:3629	5003902	38	True				
ANR	5003944	Statement	"""  -r      r2 style output      ;  rax2 -r 0x1234\\n"""	113:2:3633:3684	5003902	39	True				
ANR	5003945	Statement	"""  -s      hexstr -> raw        ;  rax2 -s 43 4a 50\\n"""	114:2:3688:3741	5003902	40	True				
ANR	5003946	Statement	"""  -S      raw -> hexstr        ;  rax2 -S < /bin/ls > ls.hex\\n"""	115:2:3745:3808	5003902	41	True				
ANR	5003947	Statement	"""  -t      tstamp -> str        ;  rax2 -t 1234567890\\n"""	116:2:3812:3867	5003902	42	True				
ANR	5003948	Statement	"""  -x      hash string          ;  rax2 -x linux osx\\n"""	117:2:3871:3925	5003902	43	True				
ANR	5003949	Statement	"""  -u      units                ;  rax2 -u 389289238 # 317.0M\\n"""	118:2:3929:3992	5003902	44	True				
ANR	5003950	Statement	"""  -w      signed word          ;  rax2 -w 16 0xffff\\n"""	119:2:3996:4050	5003902	45	True				
ANR	5003951	Statement	"""  -v      version              ;  rax2 -v\\n"""	120:2:4054:4098	5003902	46	True				
ANR	5003952	Statement	)	120:47:4099:4099	5003902	47	True				
ANR	5003953	ExpressionStatement		120:48:4100:4100	5003902	48	True				
ANR	5003954	ReturnStatement	return true ;	121:1:4103:4114	5003902	49	True				
ANR	5003955	Identifier	true		5003902	0					
ANR	5003956	ReturnType	static int		5003902	1					
ANR	5003957	Identifier	help		5003902	2					
ANR	5003958	ParameterList			5003902	3					
ANR	5003959	CFGEntryNode	ENTRY		5003902		True				
ANR	5003960	CFGExitNode	EXIT		5003902		True				
ANR	5003961	Symbol	true		5003902						
ANR	5003962	Function	rax	124:0:4119:14861							
ANR	5003963	FunctionDef	"rax (char * str , int len , int last)"		5003962	0					
ANR	5003964	CompoundStatement		124:45:4164:14861	5003962	0					
ANR	5003965	IdentifierDeclStatement	ut8 * buf ;	125:1:4167:4175	5003962	0	True				
ANR	5003966	IdentifierDecl	* buf		5003962	0					
ANR	5003967	IdentifierDeclType	ut8 *		5003962	0					
ANR	5003968	Identifier	buf		5003962	1					
ANR	5003969	IdentifierDeclStatement	"char * p , out_mode = ( flags & 128 ) ? 'I' : '0' ;"	126:1:4178:4221	5003962	1	True				
ANR	5003970	IdentifierDecl	* p		5003962	0					
ANR	5003971	IdentifierDeclType	char *		5003962	0					
ANR	5003972	Identifier	p		5003962	1					
ANR	5003973	IdentifierDecl	out_mode = ( flags & 128 ) ? 'I' : '0'		5003962	1					
ANR	5003974	IdentifierDeclType	char		5003962	0					
ANR	5003975	Identifier	out_mode		5003962	1					
ANR	5003976	AssignmentExpression	out_mode = ( flags & 128 ) ? 'I' : '0'		5003962	2		=			
ANR	5003977	Identifier	out_mode		5003962	0					
ANR	5003978	ConditionalExpression	( flags & 128 ) ? 'I' : '0'		5003962	1					
ANR	5003979	Condition	flags & 128		5003962	0					
ANR	5003980	BitAndExpression	flags & 128		5003962	0		&			
ANR	5003981	Identifier	flags		5003962	0					
ANR	5003982	PrimaryExpression	128		5003962	1					
ANR	5003983	PrimaryExpression	'I'		5003962	1					
ANR	5003984	PrimaryExpression	'0'		5003962	2					
ANR	5003985	IdentifierDeclStatement	int i ;	127:1:4224:4229	5003962	2	True				
ANR	5003986	IdentifierDecl	i		5003962	0					
ANR	5003987	IdentifierDeclType	int		5003962	0					
ANR	5003988	Identifier	i		5003962	1					
ANR	5003989	IfStatement	if ( ! ( flags & 4 ) || ! len )		5003962	3					
ANR	5003990	Condition	! ( flags & 4 ) || ! len	128:5:4236:4255	5003962	0	True				
ANR	5003991	OrExpression	! ( flags & 4 ) || ! len		5003962	0		||			
ANR	5003992	UnaryOperationExpression	! ( flags & 4 )		5003962	0					
ANR	5003993	UnaryOperator	!		5003962	0					
ANR	5003994	BitAndExpression	flags & 4		5003962	1		&			
ANR	5003995	Identifier	flags		5003962	0					
ANR	5003996	PrimaryExpression	4		5003962	1					
ANR	5003997	UnaryOperationExpression	! len		5003962	1					
ANR	5003998	UnaryOperator	!		5003962	0					
ANR	5003999	Identifier	len		5003962	1					
ANR	5004000	CompoundStatement		5:27:93:93	5003962	1					
ANR	5004001	ExpressionStatement	len = strlen ( str )	129:2:4262:4280	5003962	0	True				
ANR	5004002	AssignmentExpression	len = strlen ( str )		5003962	0		=			
ANR	5004003	Identifier	len		5003962	0					
ANR	5004004	CallExpression	strlen ( str )		5003962	1					
ANR	5004005	Callee	strlen		5003962	0					
ANR	5004006	Identifier	strlen		5003962	0					
ANR	5004007	ArgumentList	str		5003962	1					
ANR	5004008	Argument	str		5003962	0					
ANR	5004009	Identifier	str		5003962	0					
ANR	5004010	IfStatement	if ( ( flags & 4 ) )		5003962	4					
ANR	5004011	Condition	flags & 4	131:5:4290:4300	5003962	0	True				
ANR	5004012	BitAndExpression	flags & 4		5003962	0		&			
ANR	5004013	Identifier	flags		5003962	0					
ANR	5004014	PrimaryExpression	4		5003962	1					
ANR	5004015	CompoundStatement		8:18:138:138	5003962	1					
ANR	5004016	GotoStatement	goto dotherax ;	132:2:4307:4320	5003962	0	True				
ANR	5004017	Identifier	dotherax		5003962	0					
ANR	5004018	IfStatement	if ( * str == '=' )		5003962	5					
ANR	5004019	Condition	* str == '='	134:5:4330:4340	5003962	0	True				
ANR	5004020	EqualityExpression	* str == '='		5003962	0		==			
ANR	5004021	UnaryOperationExpression	* str		5003962	0					
ANR	5004022	UnaryOperator	*		5003962	0					
ANR	5004023	Identifier	str		5003962	1					
ANR	5004024	PrimaryExpression	'='		5003962	1					
ANR	5004025	CompoundStatement		11:18:178:178	5003962	1					
ANR	5004026	SwitchStatement	switch ( atoi ( str + 1 ) )		5003962	0					
ANR	5004027	Condition	atoi ( str + 1 )	135:10:4355:4368	5003962	0	True				
ANR	5004028	CallExpression	atoi ( str + 1 )		5003962	0					
ANR	5004029	Callee	atoi		5003962	0					
ANR	5004030	Identifier	atoi		5003962	0					
ANR	5004031	ArgumentList	str + 1		5003962	1					
ANR	5004032	Argument	str + 1		5003962	0					
ANR	5004033	AdditiveExpression	str + 1		5003962	0		+			
ANR	5004034	Identifier	str		5003962	0					
ANR	5004035	PrimaryExpression	1		5003962	1					
ANR	5004036	CompoundStatement		12:26:206:206	5003962	1					
ANR	5004037	Label	case 2 :	136:2:4375:4381	5003962	0	True				
ANR	5004038	ExpressionStatement	force_mode = 'B'	136:10:4383:4399	5003962	1	True				
ANR	5004039	AssignmentExpression	force_mode = 'B'		5003962	0		=			
ANR	5004040	Identifier	force_mode		5003962	0					
ANR	5004041	PrimaryExpression	'B'		5003962	1					
ANR	5004042	BreakStatement	break ;	136:28:4401:4406	5003962	2	True				
ANR	5004043	Label	case 3 :	137:2:4410:4416	5003962	3	True				
ANR	5004044	ExpressionStatement	force_mode = 'T'	137:10:4418:4434	5003962	4	True				
ANR	5004045	AssignmentExpression	force_mode = 'T'		5003962	0		=			
ANR	5004046	Identifier	force_mode		5003962	0					
ANR	5004047	PrimaryExpression	'T'		5003962	1					
ANR	5004048	BreakStatement	break ;	137:28:4436:4441	5003962	5	True				
ANR	5004049	Label	case 8 :	138:2:4445:4451	5003962	6	True				
ANR	5004050	ExpressionStatement	force_mode = 'O'	138:10:4453:4469	5003962	7	True				
ANR	5004051	AssignmentExpression	force_mode = 'O'		5003962	0		=			
ANR	5004052	Identifier	force_mode		5003962	0					
ANR	5004053	PrimaryExpression	'O'		5003962	1					
ANR	5004054	BreakStatement	break ;	138:28:4471:4476	5003962	8	True				
ANR	5004055	Label	case 10 :	139:2:4480:4487	5003962	9	True				
ANR	5004056	ExpressionStatement	force_mode = 'I'	139:11:4489:4505	5003962	10	True				
ANR	5004057	AssignmentExpression	force_mode = 'I'		5003962	0		=			
ANR	5004058	Identifier	force_mode		5003962	0					
ANR	5004059	PrimaryExpression	'I'		5003962	1					
ANR	5004060	BreakStatement	break ;	139:29:4507:4512	5003962	11	True				
ANR	5004061	Label	case 16 :	140:2:4516:4523	5003962	12	True				
ANR	5004062	ExpressionStatement	force_mode = '0'	140:11:4525:4541	5003962	13	True				
ANR	5004063	AssignmentExpression	force_mode = '0'		5003962	0		=			
ANR	5004064	Identifier	force_mode		5003962	0					
ANR	5004065	PrimaryExpression	'0'		5003962	1					
ANR	5004066	BreakStatement	break ;	140:29:4543:4548	5003962	14	True				
ANR	5004067	Label	case 0 :	141:2:4552:4558	5003962	15	True				
ANR	5004068	ExpressionStatement	force_mode = str [ 1 ]	141:10:4560:4579	5003962	16	True				
ANR	5004069	AssignmentExpression	force_mode = str [ 1 ]		5003962	0		=			
ANR	5004070	Identifier	force_mode		5003962	0					
ANR	5004071	ArrayIndexing	str [ 1 ]		5003962	1					
ANR	5004072	Identifier	str		5003962	0					
ANR	5004073	PrimaryExpression	1		5003962	1					
ANR	5004074	BreakStatement	break ;	141:31:4581:4586	5003962	17	True				
ANR	5004075	ReturnStatement	return true ;	143:2:4594:4605	5003962	1	True				
ANR	5004076	Identifier	true		5003962	0					
ANR	5004077	IfStatement	if ( * str == '-' )		5003962	6					
ANR	5004078	Condition	* str == '-'	145:5:4615:4625	5003962	0	True				
ANR	5004079	EqualityExpression	* str == '-'		5003962	0		==			
ANR	5004080	UnaryOperationExpression	* str		5003962	0					
ANR	5004081	UnaryOperator	*		5003962	0					
ANR	5004082	Identifier	str		5003962	1					
ANR	5004083	PrimaryExpression	'-'		5003962	1					
ANR	5004084	CompoundStatement		22:18:463:463	5003962	1					
ANR	5004085	WhileStatement	while ( str [ 1 ] && str [ 1 ] != ' ' )		5003962	0					
ANR	5004086	Condition	str [ 1 ] && str [ 1 ] != ' '	146:9:4639:4661	5003962	0	True				
ANR	5004087	AndExpression	str [ 1 ] && str [ 1 ] != ' '		5003962	0		&&			
ANR	5004088	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5004089	Identifier	str		5003962	0					
ANR	5004090	PrimaryExpression	1		5003962	1					
ANR	5004091	EqualityExpression	str [ 1 ] != ' '		5003962	1		!=			
ANR	5004092	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5004093	Identifier	str		5003962	0					
ANR	5004094	PrimaryExpression	1		5003962	1					
ANR	5004095	PrimaryExpression	' '		5003962	1					
ANR	5004096	CompoundStatement		23:34:499:499	5003962	1					
ANR	5004097	SwitchStatement	switch ( str [ 1 ] )		5003962	0					
ANR	5004098	Condition	str [ 1 ]	147:11:4677:4682	5003962	0	True				
ANR	5004099	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5004100	Identifier	str		5003962	0					
ANR	5004101	PrimaryExpression	1		5003962	1					
ANR	5004102	CompoundStatement		24:19:520:520	5003962	1					
ANR	5004103	Label	case 'l' :	148:3:4690:4698	5003962	0	True				
ANR	5004104	ExpressionStatement	"nl = ""\\n"""	148:13:4700:4709	5003962	1	True				
ANR	5004105	AssignmentExpression	"nl = ""\\n"""		5003962	0		=			
ANR	5004106	Identifier	nl		5003962	0					
ANR	5004107	PrimaryExpression	"""\\n"""		5003962	1					
ANR	5004108	BreakStatement	break ;	148:24:4711:4716	5003962	2	True				
ANR	5004109	Label	case 'a' :	149:3:4721:4729	5003962	3	True				
ANR	5004110	ExpressionStatement	print_ascii_table ( )	149:13:4731:4751	5003962	4	True				
ANR	5004111	CallExpression	print_ascii_table ( )		5003962	0					
ANR	5004112	Callee	print_ascii_table		5003962	0					
ANR	5004113	Identifier	print_ascii_table		5003962	0					
ANR	5004114	ArgumentList			5003962	1					
ANR	5004115	ReturnStatement	return 0 ;	149:35:4753:4761	5003962	5	True				
ANR	5004116	PrimaryExpression	0		5003962	0					
ANR	5004117	Label	case 's' :	150:3:4766:4774	5003962	6	True				
ANR	5004118	ExpressionStatement	flags ^= 1	150:13:4776:4786	5003962	7	True				
ANR	5004119	AssignmentExpression	flags ^= 1		5003962	0		^=			
ANR	5004120	Identifier	flags		5003962	0					
ANR	5004121	PrimaryExpression	1		5003962	1					
ANR	5004122	BreakStatement	break ;	150:25:4788:4793	5003962	8	True				
ANR	5004123	Label	case 'e' :	151:3:4798:4806	5003962	9	True				
ANR	5004124	ExpressionStatement	flags ^= 1 << 1	151:13:4808:4823	5003962	10	True				
ANR	5004125	AssignmentExpression	flags ^= 1 << 1		5003962	0		^=			
ANR	5004126	Identifier	flags		5003962	0					
ANR	5004127	ShiftExpression	1 << 1		5003962	1		<<			
ANR	5004128	PrimaryExpression	1		5003962	0					
ANR	5004129	PrimaryExpression	1		5003962	1					
ANR	5004130	BreakStatement	break ;	151:30:4825:4830	5003962	11	True				
ANR	5004131	Label	case 'S' :	152:3:4835:4843	5003962	12	True				
ANR	5004132	ExpressionStatement	flags ^= 1 << 2	152:13:4845:4860	5003962	13	True				
ANR	5004133	AssignmentExpression	flags ^= 1 << 2		5003962	0		^=			
ANR	5004134	Identifier	flags		5003962	0					
ANR	5004135	ShiftExpression	1 << 2		5003962	1		<<			
ANR	5004136	PrimaryExpression	1		5003962	0					
ANR	5004137	PrimaryExpression	2		5003962	1					
ANR	5004138	BreakStatement	break ;	152:30:4862:4867	5003962	14	True				
ANR	5004139	Label	case 'b' :	153:3:4872:4880	5003962	15	True				
ANR	5004140	ExpressionStatement	flags ^= 1 << 3	153:13:4882:4897	5003962	16	True				
ANR	5004141	AssignmentExpression	flags ^= 1 << 3		5003962	0		^=			
ANR	5004142	Identifier	flags		5003962	0					
ANR	5004143	ShiftExpression	1 << 3		5003962	1		<<			
ANR	5004144	PrimaryExpression	1		5003962	0					
ANR	5004145	PrimaryExpression	3		5003962	1					
ANR	5004146	BreakStatement	break ;	153:30:4899:4904	5003962	17	True				
ANR	5004147	Label	case 'B' :	154:3:4909:4917	5003962	18	True				
ANR	5004148	ExpressionStatement	flags ^= 1 << 17	154:13:4919:4935	5003962	19	True				
ANR	5004149	AssignmentExpression	flags ^= 1 << 17		5003962	0		^=			
ANR	5004150	Identifier	flags		5003962	0					
ANR	5004151	ShiftExpression	1 << 17		5003962	1		<<			
ANR	5004152	PrimaryExpression	1		5003962	0					
ANR	5004153	PrimaryExpression	17		5003962	1					
ANR	5004154	BreakStatement	break ;	154:31:4937:4942	5003962	20	True				
ANR	5004155	Label	case 'x' :	155:3:4947:4955	5003962	21	True				
ANR	5004156	ExpressionStatement	flags ^= 1 << 4	155:13:4957:4972	5003962	22	True				
ANR	5004157	AssignmentExpression	flags ^= 1 << 4		5003962	0		^=			
ANR	5004158	Identifier	flags		5003962	0					
ANR	5004159	ShiftExpression	1 << 4		5003962	1		<<			
ANR	5004160	PrimaryExpression	1		5003962	0					
ANR	5004161	PrimaryExpression	4		5003962	1					
ANR	5004162	BreakStatement	break ;	155:30:4974:4979	5003962	23	True				
ANR	5004163	Label	case 'k' :	156:3:4984:4992	5003962	24	True				
ANR	5004164	ExpressionStatement	flags ^= 1 << 5	156:13:4994:5009	5003962	25	True				
ANR	5004165	AssignmentExpression	flags ^= 1 << 5		5003962	0		^=			
ANR	5004166	Identifier	flags		5003962	0					
ANR	5004167	ShiftExpression	1 << 5		5003962	1		<<			
ANR	5004168	PrimaryExpression	1		5003962	0					
ANR	5004169	PrimaryExpression	5		5003962	1					
ANR	5004170	BreakStatement	break ;	156:30:5011:5016	5003962	26	True				
ANR	5004171	Label	case 'f' :	157:3:5021:5029	5003962	27	True				
ANR	5004172	ExpressionStatement	flags ^= 1 << 6	157:13:5031:5046	5003962	28	True				
ANR	5004173	AssignmentExpression	flags ^= 1 << 6		5003962	0		^=			
ANR	5004174	Identifier	flags		5003962	0					
ANR	5004175	ShiftExpression	1 << 6		5003962	1		<<			
ANR	5004176	PrimaryExpression	1		5003962	0					
ANR	5004177	PrimaryExpression	6		5003962	1					
ANR	5004178	BreakStatement	break ;	157:30:5048:5053	5003962	29	True				
ANR	5004179	Label	case 'd' :	158:3:5058:5066	5003962	30	True				
ANR	5004180	ExpressionStatement	flags ^= 1 << 7	158:13:5068:5083	5003962	31	True				
ANR	5004181	AssignmentExpression	flags ^= 1 << 7		5003962	0		^=			
ANR	5004182	Identifier	flags		5003962	0					
ANR	5004183	ShiftExpression	1 << 7		5003962	1		<<			
ANR	5004184	PrimaryExpression	1		5003962	0					
ANR	5004185	PrimaryExpression	7		5003962	1					
ANR	5004186	BreakStatement	break ;	158:30:5085:5090	5003962	32	True				
ANR	5004187	Label	case 'K' :	159:3:5095:5103	5003962	33	True				
ANR	5004188	ExpressionStatement	flags ^= 1 << 8	159:13:5105:5120	5003962	34	True				
ANR	5004189	AssignmentExpression	flags ^= 1 << 8		5003962	0		^=			
ANR	5004190	Identifier	flags		5003962	0					
ANR	5004191	ShiftExpression	1 << 8		5003962	1		<<			
ANR	5004192	PrimaryExpression	1		5003962	0					
ANR	5004193	PrimaryExpression	8		5003962	1					
ANR	5004194	BreakStatement	break ;	159:30:5122:5127	5003962	35	True				
ANR	5004195	Label	case 'n' :	160:3:5132:5140	5003962	36	True				
ANR	5004196	ExpressionStatement	flags ^= 1 << 9	160:13:5142:5157	5003962	37	True				
ANR	5004197	AssignmentExpression	flags ^= 1 << 9		5003962	0		^=			
ANR	5004198	Identifier	flags		5003962	0					
ANR	5004199	ShiftExpression	1 << 9		5003962	1		<<			
ANR	5004200	PrimaryExpression	1		5003962	0					
ANR	5004201	PrimaryExpression	9		5003962	1					
ANR	5004202	BreakStatement	break ;	160:30:5159:5164	5003962	38	True				
ANR	5004203	Label	case 'u' :	161:3:5169:5177	5003962	39	True				
ANR	5004204	ExpressionStatement	flags ^= 1 << 10	161:13:5179:5195	5003962	40	True				
ANR	5004205	AssignmentExpression	flags ^= 1 << 10		5003962	0		^=			
ANR	5004206	Identifier	flags		5003962	0					
ANR	5004207	ShiftExpression	1 << 10		5003962	1		<<			
ANR	5004208	PrimaryExpression	1		5003962	0					
ANR	5004209	PrimaryExpression	10		5003962	1					
ANR	5004210	BreakStatement	break ;	161:31:5197:5202	5003962	41	True				
ANR	5004211	Label	case 't' :	162:3:5207:5215	5003962	42	True				
ANR	5004212	ExpressionStatement	flags ^= 1 << 11	162:13:5217:5233	5003962	43	True				
ANR	5004213	AssignmentExpression	flags ^= 1 << 11		5003962	0		^=			
ANR	5004214	Identifier	flags		5003962	0					
ANR	5004215	ShiftExpression	1 << 11		5003962	1		<<			
ANR	5004216	PrimaryExpression	1		5003962	0					
ANR	5004217	PrimaryExpression	11		5003962	1					
ANR	5004218	BreakStatement	break ;	162:31:5235:5240	5003962	44	True				
ANR	5004219	Label	case 'E' :	163:3:5245:5253	5003962	45	True				
ANR	5004220	ExpressionStatement	flags ^= 1 << 12	163:13:5255:5271	5003962	46	True				
ANR	5004221	AssignmentExpression	flags ^= 1 << 12		5003962	0		^=			
ANR	5004222	Identifier	flags		5003962	0					
ANR	5004223	ShiftExpression	1 << 12		5003962	1		<<			
ANR	5004224	PrimaryExpression	1		5003962	0					
ANR	5004225	PrimaryExpression	12		5003962	1					
ANR	5004226	BreakStatement	break ;	163:31:5273:5278	5003962	47	True				
ANR	5004227	Label	case 'D' :	164:3:5283:5291	5003962	48	True				
ANR	5004228	ExpressionStatement	flags ^= 1 << 13	164:13:5293:5309	5003962	49	True				
ANR	5004229	AssignmentExpression	flags ^= 1 << 13		5003962	0		^=			
ANR	5004230	Identifier	flags		5003962	0					
ANR	5004231	ShiftExpression	1 << 13		5003962	1		<<			
ANR	5004232	PrimaryExpression	1		5003962	0					
ANR	5004233	PrimaryExpression	13		5003962	1					
ANR	5004234	BreakStatement	break ;	164:31:5311:5316	5003962	50	True				
ANR	5004235	Label	case 'F' :	165:3:5321:5329	5003962	51	True				
ANR	5004236	ExpressionStatement	flags ^= 1 << 14	165:13:5331:5347	5003962	52	True				
ANR	5004237	AssignmentExpression	flags ^= 1 << 14		5003962	0		^=			
ANR	5004238	Identifier	flags		5003962	0					
ANR	5004239	ShiftExpression	1 << 14		5003962	1		<<			
ANR	5004240	PrimaryExpression	1		5003962	0					
ANR	5004241	PrimaryExpression	14		5003962	1					
ANR	5004242	BreakStatement	break ;	165:31:5349:5354	5003962	53	True				
ANR	5004243	Label	case 'N' :	166:3:5359:5367	5003962	54	True				
ANR	5004244	ExpressionStatement	flags ^= 1 << 15	166:13:5369:5385	5003962	55	True				
ANR	5004245	AssignmentExpression	flags ^= 1 << 15		5003962	0		^=			
ANR	5004246	Identifier	flags		5003962	0					
ANR	5004247	ShiftExpression	1 << 15		5003962	1		<<			
ANR	5004248	PrimaryExpression	1		5003962	0					
ANR	5004249	PrimaryExpression	15		5003962	1					
ANR	5004250	BreakStatement	break ;	166:31:5387:5392	5003962	56	True				
ANR	5004251	Label	case 'w' :	167:3:5397:5405	5003962	57	True				
ANR	5004252	ExpressionStatement	flags ^= 1 << 16	167:13:5407:5423	5003962	58	True				
ANR	5004253	AssignmentExpression	flags ^= 1 << 16		5003962	0		^=			
ANR	5004254	Identifier	flags		5003962	0					
ANR	5004255	ShiftExpression	1 << 16		5003962	1		<<			
ANR	5004256	PrimaryExpression	1		5003962	0					
ANR	5004257	PrimaryExpression	16		5003962	1					
ANR	5004258	BreakStatement	break ;	167:31:5425:5430	5003962	59	True				
ANR	5004259	Label	case 'r' :	168:3:5435:5443	5003962	60	True				
ANR	5004260	ExpressionStatement	flags ^= 1 << 18	168:13:5445:5461	5003962	61	True				
ANR	5004261	AssignmentExpression	flags ^= 1 << 18		5003962	0		^=			
ANR	5004262	Identifier	flags		5003962	0					
ANR	5004263	ShiftExpression	1 << 18		5003962	1		<<			
ANR	5004264	PrimaryExpression	1		5003962	0					
ANR	5004265	PrimaryExpression	18		5003962	1					
ANR	5004266	BreakStatement	break ;	168:31:5463:5468	5003962	62	True				
ANR	5004267	Label	case 'L' :	169:3:5473:5481	5003962	63	True				
ANR	5004268	ExpressionStatement	flags ^= 1 << 19	169:13:5483:5499	5003962	64	True				
ANR	5004269	AssignmentExpression	flags ^= 1 << 19		5003962	0		^=			
ANR	5004270	Identifier	flags		5003962	0					
ANR	5004271	ShiftExpression	1 << 19		5003962	1		<<			
ANR	5004272	PrimaryExpression	1		5003962	0					
ANR	5004273	PrimaryExpression	19		5003962	1					
ANR	5004274	BreakStatement	break ;	169:31:5501:5506	5003962	65	True				
ANR	5004275	Label	case 'i' :	170:3:5511:5519	5003962	66	True				
ANR	5004276	ExpressionStatement	flags ^= 1 << 21	170:13:5521:5537	5003962	67	True				
ANR	5004277	AssignmentExpression	flags ^= 1 << 21		5003962	0		^=			
ANR	5004278	Identifier	flags		5003962	0					
ANR	5004279	ShiftExpression	1 << 21		5003962	1		<<			
ANR	5004280	PrimaryExpression	1		5003962	0					
ANR	5004281	PrimaryExpression	21		5003962	1					
ANR	5004282	BreakStatement	break ;	170:31:5539:5544	5003962	68	True				
ANR	5004283	Label	case 'o' :	171:3:5549:5557	5003962	69	True				
ANR	5004284	ExpressionStatement	flags ^= 1 << 22	171:13:5559:5575	5003962	70	True				
ANR	5004285	AssignmentExpression	flags ^= 1 << 22		5003962	0		^=			
ANR	5004286	Identifier	flags		5003962	0					
ANR	5004287	ShiftExpression	1 << 22		5003962	1		<<			
ANR	5004288	PrimaryExpression	1		5003962	0					
ANR	5004289	PrimaryExpression	22		5003962	1					
ANR	5004290	BreakStatement	break ;	171:31:5577:5582	5003962	71	True				
ANR	5004291	Label	case 'v' :	172:3:5587:5595	5003962	72	True				
ANR	5004292	ReturnStatement	"return r_main_version_print ( ""rax2"" ) ;"	172:13:5597:5633	5003962	73	True				
ANR	5004293	CallExpression	"r_main_version_print ( ""rax2"" )"		5003962	0					
ANR	5004294	Callee	r_main_version_print		5003962	0					
ANR	5004295	Identifier	r_main_version_print		5003962	0					
ANR	5004296	ArgumentList	"""rax2"""		5003962	1					
ANR	5004297	Argument	"""rax2"""		5003962	0					
ANR	5004298	PrimaryExpression	"""rax2"""		5003962	0					
ANR	5004299	Label	case '\\0' :	173:3:5638:5647	5003962	74	True				
ANR	5004300	ReturnStatement	return ! use_stdin ( ) ;	173:14:5649:5669	5003962	75	True				
ANR	5004301	UnaryOperationExpression	! use_stdin ( )		5003962	0					
ANR	5004302	UnaryOperator	!		5003962	0					
ANR	5004303	CallExpression	use_stdin ( )		5003962	1					
ANR	5004304	Callee	use_stdin		5003962	0					
ANR	5004305	Identifier	use_stdin		5003962	0					
ANR	5004306	ArgumentList			5003962	1					
ANR	5004307	Label	default :	174:3:5674:5681	5003962	76	True				
ANR	5004308	Identifier	default		5003962	0					
ANR	5004309	ExpressionStatement	out_mode = ( flags ^ 32 ) ? '0' : 'I'	176:4:5737:5770	5003962	77	True				
ANR	5004310	AssignmentExpression	out_mode = ( flags ^ 32 ) ? '0' : 'I'		5003962	0		=			
ANR	5004311	Identifier	out_mode		5003962	0					
ANR	5004312	ConditionalExpression	( flags ^ 32 ) ? '0' : 'I'		5003962	1					
ANR	5004313	Condition	flags ^ 32		5003962	0					
ANR	5004314	ExclusiveOrExpression	flags ^ 32		5003962	0		^			
ANR	5004315	Identifier	flags		5003962	0					
ANR	5004316	PrimaryExpression	32		5003962	1					
ANR	5004317	PrimaryExpression	'0'		5003962	1					
ANR	5004318	PrimaryExpression	'I'		5003962	2					
ANR	5004319	IfStatement	if ( str [ 1 ] >= '0' && str [ 1 ] <= '9' )		5003962	78					
ANR	5004320	Condition	str [ 1 ] >= '0' && str [ 1 ] <= '9'	177:8:5780:5809	5003962	0	True				
ANR	5004321	AndExpression	str [ 1 ] >= '0' && str [ 1 ] <= '9'		5003962	0		&&			
ANR	5004322	RelationalExpression	str [ 1 ] >= '0'		5003962	0		>=			
ANR	5004323	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5004324	Identifier	str		5003962	0					
ANR	5004325	PrimaryExpression	1		5003962	1					
ANR	5004326	PrimaryExpression	'0'		5003962	1					
ANR	5004327	RelationalExpression	str [ 1 ] <= '9'		5003962	1		<=			
ANR	5004328	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5004329	Identifier	str		5003962	0					
ANR	5004330	PrimaryExpression	1		5003962	1					
ANR	5004331	PrimaryExpression	'9'		5003962	1					
ANR	5004332	CompoundStatement		54:40:1647:1647	5003962	1					
ANR	5004333	IfStatement	if ( str [ 2 ] == 'x' )		5003962	0					
ANR	5004334	Condition	str [ 2 ] == 'x'	178:9:5823:5835	5003962	0	True				
ANR	5004335	EqualityExpression	str [ 2 ] == 'x'		5003962	0		==			
ANR	5004336	ArrayIndexing	str [ 2 ]		5003962	0					
ANR	5004337	Identifier	str		5003962	0					
ANR	5004338	PrimaryExpression	2		5003962	1					
ANR	5004339	PrimaryExpression	'x'		5003962	1					
ANR	5004340	CompoundStatement		55:24:1673:1673	5003962	1					
ANR	5004341	ExpressionStatement	out_mode = 'I'	179:6:5846:5860	5003962	0	True				
ANR	5004342	AssignmentExpression	out_mode = 'I'		5003962	0		=			
ANR	5004343	Identifier	out_mode		5003962	0					
ANR	5004344	PrimaryExpression	'I'		5003962	1					
ANR	5004345	ElseStatement	else		5003962	0					
ANR	5004346	IfStatement	"if ( r_str_endswith ( str , ""f"" ) )"		5003962	0					
ANR	5004347	Condition	"r_str_endswith ( str , ""f"" )"	180:16:5878:5902	5003962	0	True				
ANR	5004348	CallExpression	"r_str_endswith ( str , ""f"" )"		5003962	0					
ANR	5004349	Callee	r_str_endswith		5003962	0					
ANR	5004350	Identifier	r_str_endswith		5003962	0					
ANR	5004351	ArgumentList	str		5003962	1					
ANR	5004352	Argument	str		5003962	0					
ANR	5004353	Identifier	str		5003962	0					
ANR	5004354	Argument	"""f"""		5003962	1					
ANR	5004355	PrimaryExpression	"""f"""		5003962	0					
ANR	5004356	CompoundStatement		57:43:1740:1740	5003962	1					
ANR	5004357	ExpressionStatement	out_mode = 'l'	181:6:5913:5927	5003962	0	True				
ANR	5004358	AssignmentExpression	out_mode = 'l'		5003962	0		=			
ANR	5004359	Identifier	out_mode		5003962	0					
ANR	5004360	PrimaryExpression	'l'		5003962	1					
ANR	5004361	ReturnStatement	"return format_output ( out_mode , str ) ;"	183:5:5941:5977	5003962	1	True				
ANR	5004362	CallExpression	"format_output ( out_mode , str )"		5003962	0					
ANR	5004363	Callee	format_output		5003962	0					
ANR	5004364	Identifier	format_output		5003962	0					
ANR	5004365	ArgumentList	out_mode		5003962	1					
ANR	5004366	Argument	out_mode		5003962	0					
ANR	5004367	Identifier	out_mode		5003962	0					
ANR	5004368	Argument	str		5003962	1					
ANR	5004369	Identifier	str		5003962	0					
ANR	5004370	ExpressionStatement	"printf ( ""Usage: rax2 [options] [expr ...]\\n"" )"	185:4:5989:6034	5003962	79	True				
ANR	5004371	CallExpression	"printf ( ""Usage: rax2 [options] [expr ...]\\n"" )"		5003962	0					
ANR	5004372	Callee	printf		5003962	0					
ANR	5004373	Identifier	printf		5003962	0					
ANR	5004374	ArgumentList	"""Usage: rax2 [options] [expr ...]\\n"""		5003962	1					
ANR	5004375	Argument	"""Usage: rax2 [options] [expr ...]\\n"""		5003962	0					
ANR	5004376	PrimaryExpression	"""Usage: rax2 [options] [expr ...]\\n"""		5003962	0					
ANR	5004377	ReturnStatement	return help ( ) ;	186:4:6040:6054	5003962	80	True				
ANR	5004378	CallExpression	help ( )		5003962	0					
ANR	5004379	Callee	help		5003962	0					
ANR	5004380	Identifier	help		5003962	0					
ANR	5004381	ArgumentList			5003962	1					
ANR	5004382	ExpressionStatement	str ++	188:3:6064:6069	5003962	1	True				
ANR	5004383	PostIncDecOperationExpression	str ++		5003962	0					
ANR	5004384	Identifier	str		5003962	0					
ANR	5004385	IncDec	++		5003962	1					
ANR	5004386	IfStatement	if ( last )		5003962	1					
ANR	5004387	Condition	last	190:6:6081:6084	5003962	0	True				
ANR	5004388	Identifier	last		5003962	0					
ANR	5004389	CompoundStatement		67:12:1922:1922	5003962	1					
ANR	5004390	ReturnStatement	return ! use_stdin ( ) ;	191:3:6092:6112	5003962	0	True				
ANR	5004391	UnaryOperationExpression	! use_stdin ( )		5003962	0					
ANR	5004392	UnaryOperator	!		5003962	0					
ANR	5004393	CallExpression	use_stdin ( )		5003962	1					
ANR	5004394	Callee	use_stdin		5003962	0					
ANR	5004395	Identifier	use_stdin		5003962	0					
ANR	5004396	ArgumentList			5003962	1					
ANR	5004397	ReturnStatement	return true ;	193:2:6120:6131	5003962	2	True				
ANR	5004398	Identifier	true		5003962	0					
ANR	5004399	IfStatement	"if ( ! flags && r_str_nlen ( str , 2 ) == 1 )"		5003962	7					
ANR	5004400	Condition	"! flags && r_str_nlen ( str , 2 ) == 1"	195:5:6141:6174	5003962	0	True				
ANR	5004401	AndExpression	"! flags && r_str_nlen ( str , 2 ) == 1"		5003962	0		&&			
ANR	5004402	UnaryOperationExpression	! flags		5003962	0					
ANR	5004403	UnaryOperator	!		5003962	0					
ANR	5004404	Identifier	flags		5003962	1					
ANR	5004405	EqualityExpression	"r_str_nlen ( str , 2 ) == 1"		5003962	1		==			
ANR	5004406	CallExpression	"r_str_nlen ( str , 2 )"		5003962	0					
ANR	5004407	Callee	r_str_nlen		5003962	0					
ANR	5004408	Identifier	r_str_nlen		5003962	0					
ANR	5004409	ArgumentList	str		5003962	1					
ANR	5004410	Argument	str		5003962	0					
ANR	5004411	Identifier	str		5003962	0					
ANR	5004412	Argument	2		5003962	1					
ANR	5004413	PrimaryExpression	2		5003962	0					
ANR	5004414	PrimaryExpression	1		5003962	1					
ANR	5004415	CompoundStatement		72:41:2012:2012	5003962	1					
ANR	5004416	IfStatement	if ( * str == 'q' )		5003962	0					
ANR	5004417	Condition	* str == 'q'	196:6:6185:6195	5003962	0	True				
ANR	5004418	EqualityExpression	* str == 'q'		5003962	0		==			
ANR	5004419	UnaryOperationExpression	* str		5003962	0					
ANR	5004420	UnaryOperator	*		5003962	0					
ANR	5004421	Identifier	str		5003962	1					
ANR	5004422	PrimaryExpression	'q'		5003962	1					
ANR	5004423	CompoundStatement		73:19:2033:2033	5003962	1					
ANR	5004424	ReturnStatement	return false ;	197:3:6203:6215	5003962	0	True				
ANR	5004425	Identifier	false		5003962	0					
ANR	5004426	IfStatement	if ( * str == 'h' || * str == '?' )		5003962	1					
ANR	5004427	Condition	* str == 'h' || * str == '?'	199:6:6227:6252	5003962	0	True				
ANR	5004428	OrExpression	* str == 'h' || * str == '?'		5003962	0		||			
ANR	5004429	EqualityExpression	* str == 'h'		5003962	0		==			
ANR	5004430	UnaryOperationExpression	* str		5003962	0					
ANR	5004431	UnaryOperator	*		5003962	0					
ANR	5004432	Identifier	str		5003962	1					
ANR	5004433	PrimaryExpression	'h'		5003962	1					
ANR	5004434	EqualityExpression	* str == '?'		5003962	1		==			
ANR	5004435	UnaryOperationExpression	* str		5003962	0					
ANR	5004436	UnaryOperator	*		5003962	0					
ANR	5004437	Identifier	str		5003962	1					
ANR	5004438	PrimaryExpression	'?'		5003962	1					
ANR	5004439	CompoundStatement		76:34:2090:2090	5003962	1					
ANR	5004440	ExpressionStatement	help ( )	200:3:6260:6267	5003962	0	True				
ANR	5004441	CallExpression	help ( )		5003962	0					
ANR	5004442	Callee	help		5003962	0					
ANR	5004443	Identifier	help		5003962	0					
ANR	5004444	ArgumentList			5003962	1					
ANR	5004445	ReturnStatement	return false ;	201:3:6272:6284	5003962	1	True				
ANR	5004446	Identifier	false		5003962	0					
ANR	5004447	Label	dotherax :	204:0:6293:6301	5003962	8	True				
ANR	5004448	Identifier	dotherax		5003962	0					
ANR	5004449	IfStatement	if ( flags & 1 )		5003962	9					
ANR	5004450	Condition	flags & 1	205:5:6308:6316	5003962	0	True				
ANR	5004451	BitAndExpression	flags & 1		5003962	0		&			
ANR	5004452	Identifier	flags		5003962	0					
ANR	5004453	PrimaryExpression	1		5003962	1					
ANR	5004454	CompoundStatement		83:2:2164:2197	5003962	1					
ANR	5004455	IdentifierDeclStatement	int n = ( ( strlen ( str ) ) >> 1 ) + 1 ;	206:2:6329:6362	5003962	0	True				
ANR	5004456	IdentifierDecl	n = ( ( strlen ( str ) ) >> 1 ) + 1		5003962	0					
ANR	5004457	IdentifierDeclType	int		5003962	0					
ANR	5004458	Identifier	n		5003962	1					
ANR	5004459	AssignmentExpression	n = ( ( strlen ( str ) ) >> 1 ) + 1		5003962	2		=			
ANR	5004460	Identifier	n		5003962	0					
ANR	5004461	AdditiveExpression	( ( strlen ( str ) ) >> 1 ) + 1		5003962	1		+			
ANR	5004462	ShiftExpression	( strlen ( str ) ) >> 1		5003962	0		>>			
ANR	5004463	CallExpression	strlen ( str )		5003962	0					
ANR	5004464	Callee	strlen		5003962	0					
ANR	5004465	Identifier	strlen		5003962	0					
ANR	5004466	ArgumentList	str		5003962	1					
ANR	5004467	Argument	str		5003962	0					
ANR	5004468	Identifier	str		5003962	0					
ANR	5004469	PrimaryExpression	1		5003962	1					
ANR	5004470	PrimaryExpression	1		5003962	1					
ANR	5004471	ExpressionStatement	buf = malloc ( n )	207:2:6366:6382	5003962	1	True				
ANR	5004472	AssignmentExpression	buf = malloc ( n )		5003962	0		=			
ANR	5004473	Identifier	buf		5003962	0					
ANR	5004474	CallExpression	malloc ( n )		5003962	1					
ANR	5004475	Callee	malloc		5003962	0					
ANR	5004476	Identifier	malloc		5003962	0					
ANR	5004477	ArgumentList	n		5003962	1					
ANR	5004478	Argument	n		5003962	0					
ANR	5004479	Identifier	n		5003962	0					
ANR	5004480	IfStatement	if ( buf )		5003962	2					
ANR	5004481	Condition	buf	208:6:6390:6392	5003962	0	True				
ANR	5004482	Identifier	buf		5003962	0					
ANR	5004483	CompoundStatement		85:11:2230:2230	5003962	1					
ANR	5004484	ExpressionStatement	"memset ( buf , '\\0' , n )"	209:3:6400:6421	5003962	0	True				
ANR	5004485	CallExpression	"memset ( buf , '\\0' , n )"		5003962	0					
ANR	5004486	Callee	memset		5003962	0					
ANR	5004487	Identifier	memset		5003962	0					
ANR	5004488	ArgumentList	buf		5003962	1					
ANR	5004489	Argument	buf		5003962	0					
ANR	5004490	Identifier	buf		5003962	0					
ANR	5004491	Argument	'\\0'		5003962	1					
ANR	5004492	PrimaryExpression	'\\0'		5003962	0					
ANR	5004493	Argument	n		5003962	2					
ANR	5004494	Identifier	n		5003962	0					
ANR	5004495	ExpressionStatement	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"	210:3:6426:6462	5003962	1	True				
ANR	5004496	AssignmentExpression	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"		5003962	0		=			
ANR	5004497	Identifier	n		5003962	0					
ANR	5004498	CallExpression	"r_hex_str2bin ( str , ( ut8 * ) buf )"		5003962	1					
ANR	5004499	Callee	r_hex_str2bin		5003962	0					
ANR	5004500	Identifier	r_hex_str2bin		5003962	0					
ANR	5004501	ArgumentList	str		5003962	1					
ANR	5004502	Argument	str		5003962	0					
ANR	5004503	Identifier	str		5003962	0					
ANR	5004504	Argument	( ut8 * ) buf		5003962	1					
ANR	5004505	CastExpression	( ut8 * ) buf		5003962	0					
ANR	5004506	CastTarget	ut8 *		5003962	0					
ANR	5004507	Identifier	buf		5003962	1					
ANR	5004508	IfStatement	if ( n > 0 )		5003962	2					
ANR	5004509	Condition	n > 0	211:7:6471:6475	5003962	0	True				
ANR	5004510	RelationalExpression	n > 0		5003962	0		>			
ANR	5004511	Identifier	n		5003962	0					
ANR	5004512	PrimaryExpression	0		5003962	1					
ANR	5004513	CompoundStatement		88:14:2313:2313	5003962	1					
ANR	5004514	ExpressionStatement	"fwrite ( buf , n , 1 , stdout )"	212:4:6484:6510	5003962	0	True				
ANR	5004515	CallExpression	"fwrite ( buf , n , 1 , stdout )"		5003962	0					
ANR	5004516	Callee	fwrite		5003962	0					
ANR	5004517	Identifier	fwrite		5003962	0					
ANR	5004518	ArgumentList	buf		5003962	1					
ANR	5004519	Argument	buf		5003962	0					
ANR	5004520	Identifier	buf		5003962	0					
ANR	5004521	Argument	n		5003962	1					
ANR	5004522	Identifier	n		5003962	0					
ANR	5004523	Argument	1		5003962	2					
ANR	5004524	PrimaryExpression	1		5003962	0					
ANR	5004525	Argument	stdout		5003962	3					
ANR	5004526	Identifier	stdout		5003962	0					
ANR	5004527	ExpressionStatement	"puts ( """" )"	215:3:6539:6548	5003962	3	True				
ANR	5004528	CallExpression	"puts ( """" )"		5003962	0					
ANR	5004529	Callee	puts		5003962	0					
ANR	5004530	Identifier	puts		5003962	0					
ANR	5004531	ArgumentList	""""""		5003962	1					
ANR	5004532	Argument	""""""		5003962	0					
ANR	5004533	PrimaryExpression	""""""		5003962	0					
ANR	5004534	ExpressionStatement	fflush ( stdout )	221:3:6606:6621	5003962	4	True				
ANR	5004535	CallExpression	fflush ( stdout )		5003962	0					
ANR	5004536	Callee	fflush		5003962	0					
ANR	5004537	Identifier	fflush		5003962	0					
ANR	5004538	ArgumentList	stdout		5003962	1					
ANR	5004539	Argument	stdout		5003962	0					
ANR	5004540	Identifier	stdout		5003962	0					
ANR	5004541	ExpressionStatement	free ( buf )	222:3:6626:6636	5003962	5	True				
ANR	5004542	CallExpression	free ( buf )		5003962	0					
ANR	5004543	Callee	free		5003962	0					
ANR	5004544	Identifier	free		5003962	0					
ANR	5004545	ArgumentList	buf		5003962	1					
ANR	5004546	Argument	buf		5003962	0					
ANR	5004547	Identifier	buf		5003962	0					
ANR	5004548	ReturnStatement	return true ;	224:2:6644:6655	5003962	3	True				
ANR	5004549	Identifier	true		5003962	0					
ANR	5004550	IfStatement	if ( flags & ( 1 << 2 ) )		5003962	10					
ANR	5004551	Condition	flags & ( 1 << 2 )	226:5:6665:6680	5003962	0	True				
ANR	5004552	BitAndExpression	flags & ( 1 << 2 )		5003962	0		&			
ANR	5004553	Identifier	flags		5003962	0					
ANR	5004554	ShiftExpression	1 << 2		5003962	1		<<			
ANR	5004555	PrimaryExpression	1		5003962	0					
ANR	5004556	PrimaryExpression	2		5003962	1					
ANR	5004557	CompoundStatement		103:23:2518:2518	5003962	1					
ANR	5004558	ForStatement	for ( i = 0 ; i < len ; i ++ )		5003962	0					
ANR	5004559	ForInit	i = 0 ;	227:7:6698:6703	5003962	0	True				
ANR	5004560	AssignmentExpression	i = 0		5003962	0		=			
ANR	5004561	Identifier	i		5003962	0					
ANR	5004562	PrimaryExpression	0		5003962	1					
ANR	5004563	Condition	i < len	227:14:6705:6711	5003962	1	True				
ANR	5004564	RelationalExpression	i < len		5003962	0		<			
ANR	5004565	Identifier	i		5003962	0					
ANR	5004566	Identifier	len		5003962	1					
ANR	5004567	PostIncDecOperationExpression	i ++	227:23:6714:6716	5003962	2	True				
ANR	5004568	Identifier	i		5003962	0					
ANR	5004569	IncDec	++		5003962	1					
ANR	5004570	CompoundStatement		104:28:2554:2554	5003962	3					
ANR	5004571	ExpressionStatement	"printf ( ""%02x"" , ( ut8 ) str [ i ] )"	228:3:6724:6753	5003962	0	True				
ANR	5004572	CallExpression	"printf ( ""%02x"" , ( ut8 ) str [ i ] )"		5003962	0					
ANR	5004573	Callee	printf		5003962	0					
ANR	5004574	Identifier	printf		5003962	0					
ANR	5004575	ArgumentList	"""%02x"""		5003962	1					
ANR	5004576	Argument	"""%02x"""		5003962	0					
ANR	5004577	PrimaryExpression	"""%02x"""		5003962	0					
ANR	5004578	Argument	( ut8 ) str [ i ]		5003962	1					
ANR	5004579	CastExpression	( ut8 ) str [ i ]		5003962	0					
ANR	5004580	CastTarget	ut8		5003962	0					
ANR	5004581	ArrayIndexing	str [ i ]		5003962	1					
ANR	5004582	Identifier	str		5003962	0					
ANR	5004583	Identifier	i		5003962	1					
ANR	5004584	ExpressionStatement	"printf ( ""\\n"" )"	230:2:6761:6774	5003962	1	True				
ANR	5004585	CallExpression	"printf ( ""\\n"" )"		5003962	0					
ANR	5004586	Callee	printf		5003962	0					
ANR	5004587	Identifier	printf		5003962	0					
ANR	5004588	ArgumentList	"""\\n"""		5003962	1					
ANR	5004589	Argument	"""\\n"""		5003962	0					
ANR	5004590	PrimaryExpression	"""\\n"""		5003962	0					
ANR	5004591	ReturnStatement	return true ;	231:2:6778:6789	5003962	2	True				
ANR	5004592	Identifier	true		5003962	0					
ANR	5004593	ElseStatement	else		5003962	0					
ANR	5004594	IfStatement	if ( flags & ( 1 << 3 ) )		5003962	0					
ANR	5004595	Condition	flags & ( 1 << 3 )	232:12:6803:6818	5003962	0	True				
ANR	5004596	BitAndExpression	flags & ( 1 << 3 )		5003962	0		&			
ANR	5004597	Identifier	flags		5003962	0					
ANR	5004598	ShiftExpression	1 << 3		5003962	1		<<			
ANR	5004599	PrimaryExpression	1		5003962	0					
ANR	5004600	PrimaryExpression	3		5003962	1					
ANR	5004601	CompoundStatement		111:2:2680:2693	5003962	1					
ANR	5004602	IdentifierDeclStatement	"int i , len ;"	233:2:6831:6841	5003962	0	True				
ANR	5004603	IdentifierDecl	i		5003962	0					
ANR	5004604	IdentifierDeclType	int		5003962	0					
ANR	5004605	Identifier	i		5003962	1					
ANR	5004606	IdentifierDecl	len		5003962	1					
ANR	5004607	IdentifierDeclType	int		5003962	0					
ANR	5004608	Identifier	len		5003962	1					
ANR	5004609	IdentifierDeclStatement	ut8 buf [ 4096 ] ;	234:2:6845:6858	5003962	1	True				
ANR	5004610	IdentifierDecl	buf [ 4096 ]		5003962	0					
ANR	5004611	IdentifierDeclType	ut8 [ 4096 ]		5003962	0					
ANR	5004612	Identifier	buf		5003962	1					
ANR	5004613	PrimaryExpression	4096		5003962	2					
ANR	5004614	ExpressionStatement	"len = r_str_binstr2bin ( str , buf , sizeof ( buf ) )"	235:2:6862:6909	5003962	2	True				
ANR	5004615	AssignmentExpression	"len = r_str_binstr2bin ( str , buf , sizeof ( buf ) )"		5003962	0		=			
ANR	5004616	Identifier	len		5003962	0					
ANR	5004617	CallExpression	"r_str_binstr2bin ( str , buf , sizeof ( buf ) )"		5003962	1					
ANR	5004618	Callee	r_str_binstr2bin		5003962	0					
ANR	5004619	Identifier	r_str_binstr2bin		5003962	0					
ANR	5004620	ArgumentList	str		5003962	1					
ANR	5004621	Argument	str		5003962	0					
ANR	5004622	Identifier	str		5003962	0					
ANR	5004623	Argument	buf		5003962	1					
ANR	5004624	Identifier	buf		5003962	0					
ANR	5004625	Argument	sizeof ( buf )		5003962	2					
ANR	5004626	SizeofExpression	sizeof ( buf )		5003962	0					
ANR	5004627	Sizeof	sizeof		5003962	0					
ANR	5004628	SizeofOperand	buf		5003962	1					
ANR	5004629	ForStatement	for ( i = 0 ; i < len ; i ++ )		5003962	3					
ANR	5004630	ForInit	i = 0 ;	236:7:6918:6923	5003962	0	True				
ANR	5004631	AssignmentExpression	i = 0		5003962	0		=			
ANR	5004632	Identifier	i		5003962	0					
ANR	5004633	PrimaryExpression	0		5003962	1					
ANR	5004634	Condition	i < len	236:14:6925:6931	5003962	1	True				
ANR	5004635	RelationalExpression	i < len		5003962	0		<			
ANR	5004636	Identifier	i		5003962	0					
ANR	5004637	Identifier	len		5003962	1					
ANR	5004638	PostIncDecOperationExpression	i ++	236:23:6934:6936	5003962	2	True				
ANR	5004639	Identifier	i		5003962	0					
ANR	5004640	IncDec	++		5003962	1					
ANR	5004641	CompoundStatement		113:28:2774:2774	5003962	3					
ANR	5004642	ExpressionStatement	"printf ( ""%c"" , buf [ i ] )"	237:3:6944:6965	5003962	0	True				
ANR	5004643	CallExpression	"printf ( ""%c"" , buf [ i ] )"		5003962	0					
ANR	5004644	Callee	printf		5003962	0					
ANR	5004645	Identifier	printf		5003962	0					
ANR	5004646	ArgumentList	"""%c"""		5003962	1					
ANR	5004647	Argument	"""%c"""		5003962	0					
ANR	5004648	PrimaryExpression	"""%c"""		5003962	0					
ANR	5004649	Argument	buf [ i ]		5003962	1					
ANR	5004650	ArrayIndexing	buf [ i ]		5003962	0					
ANR	5004651	Identifier	buf		5003962	0					
ANR	5004652	Identifier	i		5003962	1					
ANR	5004653	ReturnStatement	return true ;	239:2:6973:6984	5003962	4	True				
ANR	5004654	Identifier	true		5003962	0					
ANR	5004655	ElseStatement	else		5003962	0					
ANR	5004656	IfStatement	if ( flags & ( 1 << 4 ) )		5003962	0					
ANR	5004657	Condition	flags & ( 1 << 4 )	240:12:6998:7013	5003962	0	True				
ANR	5004658	BitAndExpression	flags & ( 1 << 4 )		5003962	0		&			
ANR	5004659	Identifier	flags		5003962	0					
ANR	5004660	ShiftExpression	1 << 4		5003962	1		<<			
ANR	5004661	PrimaryExpression	1		5003962	0					
ANR	5004662	PrimaryExpression	4		5003962	1					
ANR	5004663	CompoundStatement		118:2:2861:2885	5003962	1					
ANR	5004664	IdentifierDeclStatement	int h = r_str_hash ( str ) ;	241:2:7026:7050	5003962	0	True				
ANR	5004665	IdentifierDecl	h = r_str_hash ( str )		5003962	0					
ANR	5004666	IdentifierDeclType	int		5003962	0					
ANR	5004667	Identifier	h		5003962	1					
ANR	5004668	AssignmentExpression	h = r_str_hash ( str )		5003962	2		=			
ANR	5004669	Identifier	h		5003962	0					
ANR	5004670	CallExpression	r_str_hash ( str )		5003962	1					
ANR	5004671	Callee	r_str_hash		5003962	0					
ANR	5004672	Identifier	r_str_hash		5003962	0					
ANR	5004673	ArgumentList	str		5003962	1					
ANR	5004674	Argument	str		5003962	0					
ANR	5004675	Identifier	str		5003962	0					
ANR	5004676	ExpressionStatement	"printf ( ""0x%x\\n"" , h )"	242:2:7054:7074	5003962	1	True				
ANR	5004677	CallExpression	"printf ( ""0x%x\\n"" , h )"		5003962	0					
ANR	5004678	Callee	printf		5003962	0					
ANR	5004679	Identifier	printf		5003962	0					
ANR	5004680	ArgumentList	"""0x%x\\n"""		5003962	1					
ANR	5004681	Argument	"""0x%x\\n"""		5003962	0					
ANR	5004682	PrimaryExpression	"""0x%x\\n"""		5003962	0					
ANR	5004683	Argument	h		5003962	1					
ANR	5004684	Identifier	h		5003962	0					
ANR	5004685	ReturnStatement	return true ;	243:2:7078:7089	5003962	2	True				
ANR	5004686	Identifier	true		5003962	0					
ANR	5004687	ElseStatement	else		5003962	0					
ANR	5004688	IfStatement	if ( flags & ( 1 << 5 ) )		5003962	0					
ANR	5004689	Condition	flags & ( 1 << 5 )	244:12:7103:7118	5003962	0	True				
ANR	5004690	BitAndExpression	flags & ( 1 << 5 )		5003962	0		&			
ANR	5004691	Identifier	flags		5003962	0					
ANR	5004692	ShiftExpression	1 << 5		5003962	1		<<			
ANR	5004693	PrimaryExpression	1		5003962	0					
ANR	5004694	PrimaryExpression	5		5003962	1					
ANR	5004695	CompoundStatement		121:30:2956:2956	5003962	1					
ANR	5004696	ExpressionStatement	out_mode = 'I'	245:2:7131:7145	5003962	0	True				
ANR	5004697	AssignmentExpression	out_mode = 'I'		5003962	0		=			
ANR	5004698	Identifier	out_mode		5003962	0					
ANR	5004699	PrimaryExpression	'I'		5003962	1					
ANR	5004700	ElseStatement	else		5003962	0					
ANR	5004701	IfStatement	if ( flags & ( 1 << 6 ) )		5003962	0					
ANR	5004702	Condition	flags & ( 1 << 6 )	246:12:7159:7174	5003962	0	True				
ANR	5004703	BitAndExpression	flags & ( 1 << 6 )		5003962	0		&			
ANR	5004704	Identifier	flags		5003962	0					
ANR	5004705	ShiftExpression	1 << 6		5003962	1		<<			
ANR	5004706	PrimaryExpression	1		5003962	0					
ANR	5004707	PrimaryExpression	6		5003962	1					
ANR	5004708	CompoundStatement		123:30:3012:3012	5003962	1					
ANR	5004709	ExpressionStatement	out_mode = 'f'	247:2:7187:7201	5003962	0	True				
ANR	5004710	AssignmentExpression	out_mode = 'f'		5003962	0		=			
ANR	5004711	Identifier	out_mode		5003962	0					
ANR	5004712	PrimaryExpression	'f'		5003962	1					
ANR	5004713	ElseStatement	else		5003962	0					
ANR	5004714	IfStatement	if ( flags & ( 1 << 8 ) )		5003962	0					
ANR	5004715	Condition	flags & ( 1 << 8 )	248:12:7215:7230	5003962	0	True				
ANR	5004716	BitAndExpression	flags & ( 1 << 8 )		5003962	0		&			
ANR	5004717	Identifier	flags		5003962	0					
ANR	5004718	ShiftExpression	1 << 8		5003962	1		<<			
ANR	5004719	PrimaryExpression	1		5003962	0					
ANR	5004720	PrimaryExpression	8		5003962	1					
ANR	5004721	CompoundStatement		132:2:3196:3218	5003962	1					
ANR	5004722	IdentifierDeclStatement	int n = ( ( strlen ( str ) ) >> 1 ) + 1 ;	249:2:7243:7276	5003962	0	True				
ANR	5004723	IdentifierDecl	n = ( ( strlen ( str ) ) >> 1 ) + 1		5003962	0					
ANR	5004724	IdentifierDeclType	int		5003962	0					
ANR	5004725	Identifier	n		5003962	1					
ANR	5004726	AssignmentExpression	n = ( ( strlen ( str ) ) >> 1 ) + 1		5003962	2		=			
ANR	5004727	Identifier	n		5003962	0					
ANR	5004728	AdditiveExpression	( ( strlen ( str ) ) >> 1 ) + 1		5003962	1		+			
ANR	5004729	ShiftExpression	( strlen ( str ) ) >> 1		5003962	0		>>			
ANR	5004730	CallExpression	strlen ( str )		5003962	0					
ANR	5004731	Callee	strlen		5003962	0					
ANR	5004732	Identifier	strlen		5003962	0					
ANR	5004733	ArgumentList	str		5003962	1					
ANR	5004734	Argument	str		5003962	0					
ANR	5004735	Identifier	str		5003962	0					
ANR	5004736	PrimaryExpression	1		5003962	1					
ANR	5004737	PrimaryExpression	1		5003962	1					
ANR	5004738	IdentifierDeclStatement	char * s = NULL ;	250:2:7280:7294	5003962	1	True				
ANR	5004739	IdentifierDecl	* s = NULL		5003962	0					
ANR	5004740	IdentifierDeclType	char *		5003962	0					
ANR	5004741	Identifier	s		5003962	1					
ANR	5004742	AssignmentExpression	* s = NULL		5003962	2		=			
ANR	5004743	Identifier	NULL		5003962	0					
ANR	5004744	Identifier	NULL		5003962	1					
ANR	5004745	ExpressionStatement	buf = ( ut8 * ) malloc ( n )	251:2:7298:7322	5003962	2	True				
ANR	5004746	AssignmentExpression	buf = ( ut8 * ) malloc ( n )		5003962	0		=			
ANR	5004747	Identifier	buf		5003962	0					
ANR	5004748	CastExpression	( ut8 * ) malloc ( n )		5003962	1					
ANR	5004749	CastTarget	ut8 *		5003962	0					
ANR	5004750	CallExpression	malloc ( n )		5003962	1					
ANR	5004751	Callee	malloc		5003962	0					
ANR	5004752	Identifier	malloc		5003962	0					
ANR	5004753	ArgumentList	n		5003962	1					
ANR	5004754	Argument	n		5003962	0					
ANR	5004755	Identifier	n		5003962	0					
ANR	5004756	IfStatement	if ( ! buf )		5003962	3					
ANR	5004757	Condition	! buf	252:6:7330:7333	5003962	0	True				
ANR	5004758	UnaryOperationExpression	! buf		5003962	0					
ANR	5004759	UnaryOperator	!		5003962	0					
ANR	5004760	Identifier	buf		5003962	1					
ANR	5004761	CompoundStatement		129:12:3171:3171	5003962	1					
ANR	5004762	ReturnStatement	return false ;	253:3:7341:7353	5003962	0	True				
ANR	5004763	Identifier	false		5003962	0					
ANR	5004764	IdentifierDeclStatement	ut32 * m = ( ut32 * ) buf ;	255:2:7361:7383	5003962	4	True				
ANR	5004765	IdentifierDecl	* m = ( ut32 * ) buf		5003962	0					
ANR	5004766	IdentifierDeclType	ut32 *		5003962	0					
ANR	5004767	Identifier	m		5003962	1					
ANR	5004768	AssignmentExpression	* m = ( ut32 * ) buf		5003962	2		=			
ANR	5004769	Identifier	m		5003962	0					
ANR	5004770	CastExpression	( ut32 * ) buf		5003962	1					
ANR	5004771	CastTarget	ut32 *		5003962	0					
ANR	5004772	Identifier	buf		5003962	1					
ANR	5004773	ExpressionStatement	"memset ( buf , '\\0' , n )"	256:2:7387:7408	5003962	5	True				
ANR	5004774	CallExpression	"memset ( buf , '\\0' , n )"		5003962	0					
ANR	5004775	Callee	memset		5003962	0					
ANR	5004776	Identifier	memset		5003962	0					
ANR	5004777	ArgumentList	buf		5003962	1					
ANR	5004778	Argument	buf		5003962	0					
ANR	5004779	Identifier	buf		5003962	0					
ANR	5004780	Argument	'\\0'		5003962	1					
ANR	5004781	PrimaryExpression	'\\0'		5003962	0					
ANR	5004782	Argument	n		5003962	2					
ANR	5004783	Identifier	n		5003962	0					
ANR	5004784	ExpressionStatement	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"	257:2:7412:7448	5003962	6	True				
ANR	5004785	AssignmentExpression	"n = r_hex_str2bin ( str , ( ut8 * ) buf )"		5003962	0		=			
ANR	5004786	Identifier	n		5003962	0					
ANR	5004787	CallExpression	"r_hex_str2bin ( str , ( ut8 * ) buf )"		5003962	1					
ANR	5004788	Callee	r_hex_str2bin		5003962	0					
ANR	5004789	Identifier	r_hex_str2bin		5003962	0					
ANR	5004790	ArgumentList	str		5003962	1					
ANR	5004791	Argument	str		5003962	0					
ANR	5004792	Identifier	str		5003962	0					
ANR	5004793	Argument	( ut8 * ) buf		5003962	1					
ANR	5004794	CastExpression	( ut8 * ) buf		5003962	0					
ANR	5004795	CastTarget	ut8 *		5003962	0					
ANR	5004796	Identifier	buf		5003962	1					
ANR	5004797	IfStatement	"if ( n < 1 || ! memcmp ( str , ""0x"" , 2 ) )"		5003962	7					
ANR	5004798	Condition	"n < 1 || ! memcmp ( str , ""0x"" , 2 )"	258:6:7456:7486	5003962	0	True				
ANR	5004799	OrExpression	"n < 1 || ! memcmp ( str , ""0x"" , 2 )"		5003962	0		||			
ANR	5004800	RelationalExpression	n < 1		5003962	0		<			
ANR	5004801	Identifier	n		5003962	0					
ANR	5004802	PrimaryExpression	1		5003962	1					
ANR	5004803	UnaryOperationExpression	"! memcmp ( str , ""0x"" , 2 )"		5003962	1					
ANR	5004804	UnaryOperator	!		5003962	0					
ANR	5004805	CallExpression	"memcmp ( str , ""0x"" , 2 )"		5003962	1					
ANR	5004806	Callee	memcmp		5003962	0					
ANR	5004807	Identifier	memcmp		5003962	0					
ANR	5004808	ArgumentList	str		5003962	1					
ANR	5004809	Argument	str		5003962	0					
ANR	5004810	Identifier	str		5003962	0					
ANR	5004811	Argument	"""0x"""		5003962	1					
ANR	5004812	PrimaryExpression	"""0x"""		5003962	0					
ANR	5004813	Argument	2		5003962	2					
ANR	5004814	PrimaryExpression	2		5003962	0					
ANR	5004815	CompoundStatement		136:3:3329:3359	5003962	1					
ANR	5004816	IdentifierDeclStatement	"ut64 q = r_num_math ( num , str ) ;"	259:3:7494:7524	5003962	0	True				
ANR	5004817	IdentifierDecl	"q = r_num_math ( num , str )"		5003962	0					
ANR	5004818	IdentifierDeclType	ut64		5003962	0					
ANR	5004819	Identifier	q		5003962	1					
ANR	5004820	AssignmentExpression	"q = r_num_math ( num , str )"		5003962	2		=			
ANR	5004821	Identifier	q		5003962	0					
ANR	5004822	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5004823	Callee	r_num_math		5003962	0					
ANR	5004824	Identifier	r_num_math		5003962	0					
ANR	5004825	ArgumentList	num		5003962	1					
ANR	5004826	Argument	num		5003962	0					
ANR	5004827	Identifier	num		5003962	0					
ANR	5004828	Argument	str		5003962	1					
ANR	5004829	Identifier	str		5003962	0					
ANR	5004830	ExpressionStatement	"s = r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"	260:3:7529:7578	5003962	1	True				
ANR	5004831	AssignmentExpression	"s = r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"		5003962	0		=			
ANR	5004832	Identifier	s		5003962	0					
ANR	5004833	CallExpression	"r_print_randomart ( ( ut8 * ) & q , sizeof ( q ) , q )"		5003962	1					
ANR	5004834	Callee	r_print_randomart		5003962	0					
ANR	5004835	Identifier	r_print_randomart		5003962	0					
ANR	5004836	ArgumentList	( ut8 * ) & q		5003962	1					
ANR	5004837	Argument	( ut8 * ) & q		5003962	0					
ANR	5004838	CastExpression	( ut8 * ) & q		5003962	0					
ANR	5004839	CastTarget	ut8 *		5003962	0					
ANR	5004840	UnaryOperationExpression	& q		5003962	1					
ANR	5004841	UnaryOperator	&		5003962	0					
ANR	5004842	Identifier	q		5003962	1					
ANR	5004843	Argument	sizeof ( q )		5003962	1					
ANR	5004844	SizeofExpression	sizeof ( q )		5003962	0					
ANR	5004845	Sizeof	sizeof		5003962	0					
ANR	5004846	SizeofOperand	q		5003962	1					
ANR	5004847	Argument	q		5003962	2					
ANR	5004848	Identifier	q		5003962	0					
ANR	5004849	ExpressionStatement	"printf ( ""%s\\n"" , s )"	261:3:7583:7601	5003962	2	True				
ANR	5004850	CallExpression	"printf ( ""%s\\n"" , s )"		5003962	0					
ANR	5004851	Callee	printf		5003962	0					
ANR	5004852	Identifier	printf		5003962	0					
ANR	5004853	ArgumentList	"""%s\\n"""		5003962	1					
ANR	5004854	Argument	"""%s\\n"""		5003962	0					
ANR	5004855	PrimaryExpression	"""%s\\n"""		5003962	0					
ANR	5004856	Argument	s		5003962	1					
ANR	5004857	Identifier	s		5003962	0					
ANR	5004858	ExpressionStatement	free ( s )	262:3:7606:7614	5003962	3	True				
ANR	5004859	CallExpression	free ( s )		5003962	0					
ANR	5004860	Callee	free		5003962	0					
ANR	5004861	Identifier	free		5003962	0					
ANR	5004862	ArgumentList	s		5003962	1					
ANR	5004863	Argument	s		5003962	0					
ANR	5004864	Identifier	s		5003962	0					
ANR	5004865	ElseStatement	else		5003962	0					
ANR	5004866	CompoundStatement		140:9:3460:3460	5003962	0					
ANR	5004867	ExpressionStatement	"s = r_print_randomart ( ( ut8 * ) buf , n , * m )"	264:3:7630:7672	5003962	0	True				
ANR	5004868	AssignmentExpression	"s = r_print_randomart ( ( ut8 * ) buf , n , * m )"		5003962	0		=			
ANR	5004869	Identifier	s		5003962	0					
ANR	5004870	CallExpression	"r_print_randomart ( ( ut8 * ) buf , n , * m )"		5003962	1					
ANR	5004871	Callee	r_print_randomart		5003962	0					
ANR	5004872	Identifier	r_print_randomart		5003962	0					
ANR	5004873	ArgumentList	( ut8 * ) buf		5003962	1					
ANR	5004874	Argument	( ut8 * ) buf		5003962	0					
ANR	5004875	CastExpression	( ut8 * ) buf		5003962	0					
ANR	5004876	CastTarget	ut8 *		5003962	0					
ANR	5004877	Identifier	buf		5003962	1					
ANR	5004878	Argument	n		5003962	1					
ANR	5004879	Identifier	n		5003962	0					
ANR	5004880	Argument	* m		5003962	2					
ANR	5004881	UnaryOperationExpression	* m		5003962	0					
ANR	5004882	UnaryOperator	*		5003962	0					
ANR	5004883	Identifier	m		5003962	1					
ANR	5004884	ExpressionStatement	"printf ( ""%s\\n"" , s )"	265:3:7677:7695	5003962	1	True				
ANR	5004885	CallExpression	"printf ( ""%s\\n"" , s )"		5003962	0					
ANR	5004886	Callee	printf		5003962	0					
ANR	5004887	Identifier	printf		5003962	0					
ANR	5004888	ArgumentList	"""%s\\n"""		5003962	1					
ANR	5004889	Argument	"""%s\\n"""		5003962	0					
ANR	5004890	PrimaryExpression	"""%s\\n"""		5003962	0					
ANR	5004891	Argument	s		5003962	1					
ANR	5004892	Identifier	s		5003962	0					
ANR	5004893	ExpressionStatement	free ( s )	266:3:7700:7708	5003962	2	True				
ANR	5004894	CallExpression	free ( s )		5003962	0					
ANR	5004895	Callee	free		5003962	0					
ANR	5004896	Identifier	free		5003962	0					
ANR	5004897	ArgumentList	s		5003962	1					
ANR	5004898	Argument	s		5003962	0					
ANR	5004899	Identifier	s		5003962	0					
ANR	5004900	ExpressionStatement	free ( m )	268:2:7716:7724	5003962	8	True				
ANR	5004901	CallExpression	free ( m )		5003962	0					
ANR	5004902	Callee	free		5003962	0					
ANR	5004903	Identifier	free		5003962	0					
ANR	5004904	ArgumentList	m		5003962	1					
ANR	5004905	Argument	m		5003962	0					
ANR	5004906	Identifier	m		5003962	0					
ANR	5004907	ReturnStatement	return true ;	269:2:7728:7739	5003962	9	True				
ANR	5004908	Identifier	true		5003962	0					
ANR	5004909	ElseStatement	else		5003962	0					
ANR	5004910	IfStatement	if ( flags & ( 1 << 9 ) )		5003962	0					
ANR	5004911	Condition	flags & ( 1 << 9 )	270:12:7753:7768	5003962	0	True				
ANR	5004912	BitAndExpression	flags & ( 1 << 9 )		5003962	0		&			
ANR	5004913	Identifier	flags		5003962	0					
ANR	5004914	ShiftExpression	1 << 9		5003962	1		<<			
ANR	5004915	PrimaryExpression	1		5003962	0					
ANR	5004916	PrimaryExpression	9		5003962	1					
ANR	5004917	CompoundStatement		148:2:3616:3646	5003962	1					
ANR	5004918	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	271:2:7781:7811	5003962	0	True				
ANR	5004919	IdentifierDecl	"n = r_num_math ( num , str )"		5003962	0					
ANR	5004920	IdentifierDeclType	ut64		5003962	0					
ANR	5004921	Identifier	n		5003962	1					
ANR	5004922	AssignmentExpression	"n = r_num_math ( num , str )"		5003962	2		=			
ANR	5004923	Identifier	n		5003962	0					
ANR	5004924	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5004925	Callee	r_num_math		5003962	0					
ANR	5004926	Identifier	r_num_math		5003962	0					
ANR	5004927	ArgumentList	num		5003962	1					
ANR	5004928	Argument	num		5003962	0					
ANR	5004929	Identifier	num		5003962	0					
ANR	5004930	Argument	str		5003962	1					
ANR	5004931	Identifier	str		5003962	0					
ANR	5004932	IfStatement	if ( n >> 32 )		5003962	1					
ANR	5004933	Condition	n >> 32	272:6:7819:7825	5003962	0	True				
ANR	5004934	ShiftExpression	n >> 32		5003962	0		>>			
ANR	5004935	Identifier	n		5003962	0					
ANR	5004936	PrimaryExpression	32		5003962	1					
ANR	5004937	CompoundStatement		151:3:3693:3713	5003962	1					
ANR	5004938	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n ;	274:3:7858:7878	5003962	0	True				
ANR	5004939	IdentifierDecl	* np = ( ut8 * ) & n		5003962	0					
ANR	5004940	IdentifierDeclType	ut8 *		5003962	0					
ANR	5004941	Identifier	np		5003962	1					
ANR	5004942	AssignmentExpression	* np = ( ut8 * ) & n		5003962	2		=			
ANR	5004943	Identifier	np		5003962	0					
ANR	5004944	CastExpression	( ut8 * ) & n		5003962	1					
ANR	5004945	CastTarget	ut8 *		5003962	0					
ANR	5004946	UnaryOperationExpression	& n		5003962	1					
ANR	5004947	UnaryOperator	&		5003962	0					
ANR	5004948	Identifier	n		5003962	1					
ANR	5004949	IfStatement	if ( flags & 1 )		5003962	1					
ANR	5004950	Condition	flags & 1	275:7:7887:7895	5003962	0	True				
ANR	5004951	BitAndExpression	flags & 1		5003962	0		&			
ANR	5004952	Identifier	flags		5003962	0					
ANR	5004953	PrimaryExpression	1		5003962	1					
ANR	5004954	CompoundStatement		152:18:3733:3733	5003962	1					
ANR	5004955	ExpressionStatement	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"	276:4:7904:7938	5003962	0	True				
ANR	5004956	CallExpression	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"		5003962	0					
ANR	5004957	Callee	fwrite		5003962	0					
ANR	5004958	Identifier	fwrite		5003962	0					
ANR	5004959	ArgumentList	& n		5003962	1					
ANR	5004960	Argument	& n		5003962	0					
ANR	5004961	UnaryOperationExpression	& n		5003962	0					
ANR	5004962	UnaryOperator	&		5003962	0					
ANR	5004963	Identifier	n		5003962	1					
ANR	5004964	Argument	sizeof ( n )		5003962	1					
ANR	5004965	SizeofExpression	sizeof ( n )		5003962	0					
ANR	5004966	Sizeof	sizeof		5003962	0					
ANR	5004967	SizeofOperand	n		5003962	1					
ANR	5004968	Argument	1		5003962	2					
ANR	5004969	PrimaryExpression	1		5003962	0					
ANR	5004970	Argument	stdout		5003962	3					
ANR	5004971	Identifier	stdout		5003962	0					
ANR	5004972	ElseStatement	else		5003962	0					
ANR	5004973	CompoundStatement		154:10:3785:3785	5003962	0					
ANR	5004974	Statement	printf	278:4:7956:7961	5003962	0	True				
ANR	5004975	Statement	(	278:11:7963:7963	5003962	1	True				
ANR	5004976	Statement	"""%02x%02x%02x%02x"""	278:12:7964:7981	5003962	2	True				
ANR	5004977	Statement	"""%02x%02x%02x%02x\\n"""	279:5:7988:8007	5003962	3	True				
ANR	5004978	Statement	","	279:25:8008:8008	5003962	4	True				
ANR	5004979	Statement	np	280:5:8015:8016	5003962	5	True				
ANR	5004980	Statement	[	280:7:8017:8017	5003962	6	True				
ANR	5004981	Statement	0	280:8:8018:8018	5003962	7	True				
ANR	5004982	Statement	]	280:9:8019:8019	5003962	8	True				
ANR	5004983	Statement	","	280:10:8020:8020	5003962	9	True				
ANR	5004984	Statement	np	280:12:8022:8023	5003962	10	True				
ANR	5004985	Statement	[	280:14:8024:8024	5003962	11	True				
ANR	5004986	Statement	1	280:15:8025:8025	5003962	12	True				
ANR	5004987	Statement	]	280:16:8026:8026	5003962	13	True				
ANR	5004988	Statement	","	280:17:8027:8027	5003962	14	True				
ANR	5004989	Statement	np	280:19:8029:8030	5003962	15	True				
ANR	5004990	Statement	[	280:21:8031:8031	5003962	16	True				
ANR	5004991	Statement	2	280:22:8032:8032	5003962	17	True				
ANR	5004992	Statement	]	280:23:8033:8033	5003962	18	True				
ANR	5004993	Statement	","	280:24:8034:8034	5003962	19	True				
ANR	5004994	Statement	np	280:26:8036:8037	5003962	20	True				
ANR	5004995	Statement	[	280:28:8038:8038	5003962	21	True				
ANR	5004996	Statement	3	280:29:8039:8039	5003962	22	True				
ANR	5004997	Statement	]	280:30:8040:8040	5003962	23	True				
ANR	5004998	Statement	","	280:31:8041:8041	5003962	24	True				
ANR	5004999	Statement	np	281:5:8048:8049	5003962	25	True				
ANR	5005000	Statement	[	281:7:8050:8050	5003962	26	True				
ANR	5005001	Statement	4	281:8:8051:8051	5003962	27	True				
ANR	5005002	Statement	]	281:9:8052:8052	5003962	28	True				
ANR	5005003	Statement	","	281:10:8053:8053	5003962	29	True				
ANR	5005004	Statement	np	281:12:8055:8056	5003962	30	True				
ANR	5005005	Statement	[	281:14:8057:8057	5003962	31	True				
ANR	5005006	Statement	5	281:15:8058:8058	5003962	32	True				
ANR	5005007	Statement	]	281:16:8059:8059	5003962	33	True				
ANR	5005008	Statement	","	281:17:8060:8060	5003962	34	True				
ANR	5005009	Statement	np	281:19:8062:8063	5003962	35	True				
ANR	5005010	Statement	[	281:21:8064:8064	5003962	36	True				
ANR	5005011	Statement	6	281:22:8065:8065	5003962	37	True				
ANR	5005012	Statement	]	281:23:8066:8066	5003962	38	True				
ANR	5005013	Statement	","	281:24:8067:8067	5003962	39	True				
ANR	5005014	Statement	np	281:26:8069:8070	5003962	40	True				
ANR	5005015	Statement	[	281:28:8071:8071	5003962	41	True				
ANR	5005016	Statement	7	281:29:8072:8072	5003962	42	True				
ANR	5005017	Statement	]	281:30:8073:8073	5003962	43	True				
ANR	5005018	Statement	)	281:31:8074:8074	5003962	44	True				
ANR	5005019	ExpressionStatement		281:32:8075:8075	5003962	45	True				
ANR	5005020	ElseStatement	else		5003962	0					
ANR	5005021	CompoundStatement		163:3:3993:4015	5003962	0					
ANR	5005022	IdentifierDeclStatement	ut32 n32 = ( ut32 ) ( n & UT32_MAX ) ;	285:3:8121:8153	5003962	0	True				
ANR	5005023	IdentifierDecl	n32 = ( ut32 ) ( n & UT32_MAX )		5003962	0					
ANR	5005024	IdentifierDeclType	ut32		5003962	0					
ANR	5005025	Identifier	n32		5003962	1					
ANR	5005026	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5003962	2		=			
ANR	5005027	Identifier	n32		5003962	0					
ANR	5005028	CastExpression	( ut32 ) ( n & UT32_MAX )		5003962	1					
ANR	5005029	CastTarget	ut32		5003962	0					
ANR	5005030	BitAndExpression	n & UT32_MAX		5003962	1		&			
ANR	5005031	Identifier	n		5003962	0					
ANR	5005032	Identifier	UT32_MAX		5003962	1					
ANR	5005033	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n32 ;	286:3:8158:8180	5003962	1	True				
ANR	5005034	IdentifierDecl	* np = ( ut8 * ) & n32		5003962	0					
ANR	5005035	IdentifierDeclType	ut8 *		5003962	0					
ANR	5005036	Identifier	np		5003962	1					
ANR	5005037	AssignmentExpression	* np = ( ut8 * ) & n32		5003962	2		=			
ANR	5005038	Identifier	np		5003962	0					
ANR	5005039	CastExpression	( ut8 * ) & n32		5003962	1					
ANR	5005040	CastTarget	ut8 *		5003962	0					
ANR	5005041	UnaryOperationExpression	& n32		5003962	1					
ANR	5005042	UnaryOperator	&		5003962	0					
ANR	5005043	Identifier	n32		5003962	1					
ANR	5005044	IfStatement	if ( flags & 1 )		5003962	2					
ANR	5005045	Condition	flags & 1	287:7:8189:8197	5003962	0	True				
ANR	5005046	BitAndExpression	flags & 1		5003962	0		&			
ANR	5005047	Identifier	flags		5003962	0					
ANR	5005048	PrimaryExpression	1		5003962	1					
ANR	5005049	CompoundStatement		164:18:4035:4035	5003962	1					
ANR	5005050	ExpressionStatement	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"	288:4:8206:8244	5003962	0	True				
ANR	5005051	CallExpression	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"		5003962	0					
ANR	5005052	Callee	fwrite		5003962	0					
ANR	5005053	Identifier	fwrite		5003962	0					
ANR	5005054	ArgumentList	& n32		5003962	1					
ANR	5005055	Argument	& n32		5003962	0					
ANR	5005056	UnaryOperationExpression	& n32		5003962	0					
ANR	5005057	UnaryOperator	&		5003962	0					
ANR	5005058	Identifier	n32		5003962	1					
ANR	5005059	Argument	sizeof ( n32 )		5003962	1					
ANR	5005060	SizeofExpression	sizeof ( n32 )		5003962	0					
ANR	5005061	Sizeof	sizeof		5003962	0					
ANR	5005062	SizeofOperand	n32		5003962	1					
ANR	5005063	Argument	1		5003962	2					
ANR	5005064	PrimaryExpression	1		5003962	0					
ANR	5005065	Argument	stdout		5003962	3					
ANR	5005066	Identifier	stdout		5003962	0					
ANR	5005067	ElseStatement	else		5003962	0					
ANR	5005068	CompoundStatement		166:10:4091:4091	5003962	0					
ANR	5005069	ExpressionStatement	"printf ( ""%02x%02x%02x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"	290:4:8262:8324	5003962	0	True				
ANR	5005070	CallExpression	"printf ( ""%02x%02x%02x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"		5003962	0					
ANR	5005071	Callee	printf		5003962	0					
ANR	5005072	Identifier	printf		5003962	0					
ANR	5005073	ArgumentList	"""%02x%02x%02x%02x\\n"""		5003962	1					
ANR	5005074	Argument	"""%02x%02x%02x%02x\\n"""		5003962	0					
ANR	5005075	PrimaryExpression	"""%02x%02x%02x%02x\\n"""		5003962	0					
ANR	5005076	Argument	np [ 0 ]		5003962	1					
ANR	5005077	ArrayIndexing	np [ 0 ]		5003962	0					
ANR	5005078	Identifier	np		5003962	0					
ANR	5005079	PrimaryExpression	0		5003962	1					
ANR	5005080	Argument	np [ 1 ]		5003962	2					
ANR	5005081	ArrayIndexing	np [ 1 ]		5003962	0					
ANR	5005082	Identifier	np		5003962	0					
ANR	5005083	PrimaryExpression	1		5003962	1					
ANR	5005084	Argument	np [ 2 ]		5003962	3					
ANR	5005085	ArrayIndexing	np [ 2 ]		5003962	0					
ANR	5005086	Identifier	np		5003962	0					
ANR	5005087	PrimaryExpression	2		5003962	1					
ANR	5005088	Argument	np [ 3 ]		5003962	4					
ANR	5005089	ArrayIndexing	np [ 3 ]		5003962	0					
ANR	5005090	Identifier	np		5003962	0					
ANR	5005091	PrimaryExpression	3		5003962	1					
ANR	5005092	ExpressionStatement	fflush ( stdout )	294:2:8337:8352	5003962	2	True				
ANR	5005093	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005094	Callee	fflush		5003962	0					
ANR	5005095	Identifier	fflush		5003962	0					
ANR	5005096	ArgumentList	stdout		5003962	1					
ANR	5005097	Argument	stdout		5003962	0					
ANR	5005098	Identifier	stdout		5003962	0					
ANR	5005099	ReturnStatement	return true ;	295:2:8356:8367	5003962	3	True				
ANR	5005100	Identifier	true		5003962	0					
ANR	5005101	ElseStatement	else		5003962	0					
ANR	5005102	IfStatement	if ( flags & ( 1 << 17 ) )		5003962	0					
ANR	5005103	Condition	flags & ( 1 << 17 )	296:12:8381:8397	5003962	0	True				
ANR	5005104	BitAndExpression	flags & ( 1 << 17 )		5003962	0		&			
ANR	5005105	Identifier	flags		5003962	0					
ANR	5005106	ShiftExpression	1 << 17		5003962	1		<<			
ANR	5005107	PrimaryExpression	1		5003962	0					
ANR	5005108	PrimaryExpression	17		5003962	1					
ANR	5005109	CompoundStatement		174:2:4258:4267	5003962	1					
ANR	5005110	IdentifierDeclStatement	int i = 0 ;	297:2:8423:8432	5003962	0	True				
ANR	5005111	IdentifierDecl	i = 0		5003962	0					
ANR	5005112	IdentifierDeclType	int		5003962	0					
ANR	5005113	Identifier	i		5003962	1					
ANR	5005114	AssignmentExpression	i = 0		5003962	2		=			
ANR	5005115	Identifier	i		5003962	0					
ANR	5005116	PrimaryExpression	0		5003962	1					
ANR	5005117	ForStatement	for ( i = 0 ; i < strlen ( str ) ; i ++ )		5003962	1					
ANR	5005118	ForInit	i = 0 ;	299:7:8467:8472	5003962	0	True				
ANR	5005119	AssignmentExpression	i = 0		5003962	0		=			
ANR	5005120	Identifier	i		5003962	0					
ANR	5005121	PrimaryExpression	0		5003962	1					
ANR	5005122	Condition	i < strlen ( str )	299:14:8474:8489	5003962	1	True				
ANR	5005123	RelationalExpression	i < strlen ( str )		5003962	0		<			
ANR	5005124	Identifier	i		5003962	0					
ANR	5005125	CallExpression	strlen ( str )		5003962	1					
ANR	5005126	Callee	strlen		5003962	0					
ANR	5005127	Identifier	strlen		5003962	0					
ANR	5005128	ArgumentList	str		5003962	1					
ANR	5005129	Argument	str		5003962	0					
ANR	5005130	Identifier	str		5003962	0					
ANR	5005131	PostIncDecOperationExpression	i ++	299:32:8492:8494	5003962	2	True				
ANR	5005132	Identifier	i		5003962	0					
ANR	5005133	IncDec	++		5003962	1					
ANR	5005134	CompoundStatement		177:3:4337:4352	5003962	3					
ANR	5005135	IdentifierDeclStatement	ut8 ch = str [ i ] ;	300:3:8502:8517	5003962	0	True				
ANR	5005136	IdentifierDecl	ch = str [ i ]		5003962	0					
ANR	5005137	IdentifierDeclType	ut8		5003962	0					
ANR	5005138	Identifier	ch		5003962	1					
ANR	5005139	AssignmentExpression	ch = str [ i ]		5003962	2		=			
ANR	5005140	Identifier	ch		5003962	0					
ANR	5005141	ArrayIndexing	str [ i ]		5003962	1					
ANR	5005142	Identifier	str		5003962	0					
ANR	5005143	Identifier	i		5003962	1					
ANR	5005144	Statement	printf	301:3:8522:8527	5003962	1	True				
ANR	5005145	Statement	(	301:10:8529:8529	5003962	2	True				
ANR	5005146	Statement	"""%d%d%d%d"""	301:11:8530:8539	5003962	3	True				
ANR	5005147	Statement	"""%d%d%d%d"""	302:4:8545:8554	5003962	4	True				
ANR	5005148	Statement	","	302:14:8555:8555	5003962	5	True				
ANR	5005149	Statement	ch	303:4:8561:8562	5003962	6	True				
ANR	5005150	Statement	&	303:7:8564:8564	5003962	7	True				
ANR	5005151	Statement	128	303:9:8566:8568	5003962	8	True				
ANR	5005152	Statement	?	303:12:8569:8569	5003962	9	True				
ANR	5005153	Label	1 :	303:14:8571:8572	5003962	10	True				
ANR	5005154	Statement	0	303:17:8574:8574	5003962	11	True				
ANR	5005155	Statement	","	303:18:8575:8575	5003962	12	True				
ANR	5005156	Statement	ch	304:4:8581:8582	5003962	13	True				
ANR	5005157	Statement	&	304:7:8584:8584	5003962	14	True				
ANR	5005158	Statement	64	304:9:8586:8587	5003962	15	True				
ANR	5005159	Statement	?	304:11:8588:8588	5003962	16	True				
ANR	5005160	Label	1 :	304:13:8590:8591	5003962	17	True				
ANR	5005161	Statement	0	304:16:8593:8593	5003962	18	True				
ANR	5005162	Statement	","	304:17:8594:8594	5003962	19	True				
ANR	5005163	Statement	ch	305:4:8600:8601	5003962	20	True				
ANR	5005164	Statement	&	305:7:8603:8603	5003962	21	True				
ANR	5005165	Statement	32	305:9:8605:8606	5003962	22	True				
ANR	5005166	Statement	?	305:11:8607:8607	5003962	23	True				
ANR	5005167	Label	1 :	305:13:8609:8610	5003962	24	True				
ANR	5005168	Statement	0	305:16:8612:8612	5003962	25	True				
ANR	5005169	Statement	","	305:17:8613:8613	5003962	26	True				
ANR	5005170	Statement	ch	306:4:8619:8620	5003962	27	True				
ANR	5005171	Statement	&	306:7:8622:8622	5003962	28	True				
ANR	5005172	Statement	16	306:9:8624:8625	5003962	29	True				
ANR	5005173	Statement	?	306:11:8626:8626	5003962	30	True				
ANR	5005174	Label	1 :	306:13:8628:8629	5003962	31	True				
ANR	5005175	Statement	0	306:16:8631:8631	5003962	32	True				
ANR	5005176	Statement	","	306:17:8632:8632	5003962	33	True				
ANR	5005177	Statement	ch	307:4:8638:8639	5003962	34	True				
ANR	5005178	Statement	&	307:7:8641:8641	5003962	35	True				
ANR	5005179	Statement	8	307:9:8643:8643	5003962	36	True				
ANR	5005180	Statement	?	307:10:8644:8644	5003962	37	True				
ANR	5005181	Label	1 :	307:12:8646:8647	5003962	38	True				
ANR	5005182	Statement	0	307:15:8649:8649	5003962	39	True				
ANR	5005183	Statement	","	307:16:8650:8650	5003962	40	True				
ANR	5005184	Statement	ch	308:4:8656:8657	5003962	41	True				
ANR	5005185	Statement	&	308:7:8659:8659	5003962	42	True				
ANR	5005186	Statement	4	308:9:8661:8661	5003962	43	True				
ANR	5005187	Statement	?	308:10:8662:8662	5003962	44	True				
ANR	5005188	Label	1 :	308:12:8664:8665	5003962	45	True				
ANR	5005189	Statement	0	308:15:8667:8667	5003962	46	True				
ANR	5005190	Statement	","	308:16:8668:8668	5003962	47	True				
ANR	5005191	Statement	ch	309:4:8674:8675	5003962	48	True				
ANR	5005192	Statement	&	309:7:8677:8677	5003962	49	True				
ANR	5005193	Statement	2	309:9:8679:8679	5003962	50	True				
ANR	5005194	Statement	?	309:10:8680:8680	5003962	51	True				
ANR	5005195	Label	1 :	309:12:8682:8683	5003962	52	True				
ANR	5005196	Statement	0	309:15:8685:8685	5003962	53	True				
ANR	5005197	Statement	","	309:16:8686:8686	5003962	54	True				
ANR	5005198	Statement	ch	310:4:8692:8693	5003962	55	True				
ANR	5005199	Statement	&	310:7:8695:8695	5003962	56	True				
ANR	5005200	Statement	1	310:9:8697:8697	5003962	57	True				
ANR	5005201	Statement	?	310:10:8698:8698	5003962	58	True				
ANR	5005202	Label	1 :	310:12:8700:8701	5003962	59	True				
ANR	5005203	Statement	0	310:15:8703:8703	5003962	60	True				
ANR	5005204	Statement	)	310:16:8704:8704	5003962	61	True				
ANR	5005205	ExpressionStatement		310:17:8705:8705	5003962	62	True				
ANR	5005206	ReturnStatement	return true ;	312:2:8713:8724	5003962	2	True				
ANR	5005207	Identifier	true		5003962	0					
ANR	5005208	ElseStatement	else		5003962	0					
ANR	5005209	IfStatement	if ( flags & ( 1 << 16 ) )		5003962	0					
ANR	5005210	Condition	flags & ( 1 << 16 )	313:12:8738:8754	5003962	0	True				
ANR	5005211	BitAndExpression	flags & ( 1 << 16 )		5003962	0		&			
ANR	5005212	Identifier	flags		5003962	0					
ANR	5005213	ShiftExpression	1 << 16		5003962	1		<<			
ANR	5005214	PrimaryExpression	1		5003962	0					
ANR	5005215	PrimaryExpression	16		5003962	1					
ANR	5005216	CompoundStatement		191:2:4602:4632	5003962	1					
ANR	5005217	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	314:2:8767:8797	5003962	0	True				
ANR	5005218	IdentifierDecl	"n = r_num_math ( num , str )"		5003962	0					
ANR	5005219	IdentifierDeclType	ut64		5003962	0					
ANR	5005220	Identifier	n		5003962	1					
ANR	5005221	AssignmentExpression	"n = r_num_math ( num , str )"		5003962	2		=			
ANR	5005222	Identifier	n		5003962	0					
ANR	5005223	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5005224	Callee	r_num_math		5003962	0					
ANR	5005225	Identifier	r_num_math		5003962	0					
ANR	5005226	ArgumentList	num		5003962	1					
ANR	5005227	Argument	num		5003962	0					
ANR	5005228	Identifier	num		5003962	0					
ANR	5005229	Argument	str		5003962	1					
ANR	5005230	Identifier	str		5003962	0					
ANR	5005231	IfStatement	if ( n >> 31 )		5003962	1					
ANR	5005232	Condition	n >> 31	315:6:8805:8811	5003962	0	True				
ANR	5005233	ShiftExpression	n >> 31		5003962	0		>>			
ANR	5005234	Identifier	n		5003962	0					
ANR	5005235	PrimaryExpression	31		5003962	1					
ANR	5005236	CompoundStatement		192:15:4649:4649	5003962	1					
ANR	5005237	ExpressionStatement	n = ( st64 ) ( st32 ) n	317:3:8835:8854	5003962	0	True				
ANR	5005238	AssignmentExpression	n = ( st64 ) ( st32 ) n		5003962	0		=			
ANR	5005239	Identifier	n		5003962	0					
ANR	5005240	CastExpression	( st64 ) ( st32 ) n		5003962	1					
ANR	5005241	CastTarget	st64		5003962	0					
ANR	5005242	CastExpression	( st32 ) n		5003962	1					
ANR	5005243	CastTarget	st32		5003962	0					
ANR	5005244	Identifier	n		5003962	1					
ANR	5005245	ElseStatement	else		5003962	0					
ANR	5005246	IfStatement	if ( n >> 14 )		5003962	0					
ANR	5005247	Condition	n >> 14	318:13:8869:8875	5003962	0	True				
ANR	5005248	ShiftExpression	n >> 14		5003962	0		>>			
ANR	5005249	Identifier	n		5003962	0					
ANR	5005250	PrimaryExpression	14		5003962	1					
ANR	5005251	CompoundStatement		195:22:4713:4713	5003962	1					
ANR	5005252	ExpressionStatement	n = ( st64 ) ( st16 ) n	319:3:8883:8902	5003962	0	True				
ANR	5005253	AssignmentExpression	n = ( st64 ) ( st16 ) n		5003962	0		=			
ANR	5005254	Identifier	n		5003962	0					
ANR	5005255	CastExpression	( st64 ) ( st16 ) n		5003962	1					
ANR	5005256	CastTarget	st64		5003962	0					
ANR	5005257	CastExpression	( st16 ) n		5003962	1					
ANR	5005258	CastTarget	st16		5003962	0					
ANR	5005259	Identifier	n		5003962	1					
ANR	5005260	ElseStatement	else		5003962	0					
ANR	5005261	IfStatement	if ( n >> 7 )		5003962	0					
ANR	5005262	Condition	n >> 7	320:13:8917:8922	5003962	0	True				
ANR	5005263	ShiftExpression	n >> 7		5003962	0		>>			
ANR	5005264	Identifier	n		5003962	0					
ANR	5005265	PrimaryExpression	7		5003962	1					
ANR	5005266	CompoundStatement		197:21:4760:4760	5003962	1					
ANR	5005267	ExpressionStatement	n = ( st64 ) ( st8 ) n	321:3:8930:8948	5003962	0	True				
ANR	5005268	AssignmentExpression	n = ( st64 ) ( st8 ) n		5003962	0		=			
ANR	5005269	Identifier	n		5003962	0					
ANR	5005270	CastExpression	( st64 ) ( st8 ) n		5003962	1					
ANR	5005271	CastTarget	st64		5003962	0					
ANR	5005272	CastExpression	( st8 ) n		5003962	1					
ANR	5005273	CastTarget	st8		5003962	0					
ANR	5005274	Identifier	n		5003962	1					
ANR	5005275	Statement	printf	323:2:8956:8961	5003962	2	True				
ANR	5005276	Statement	(	323:9:8963:8963	5003962	3	True				
ANR	5005277	Statement	"""%"""	323:10:8964:8966	5003962	4	True				
ANR	5005278	Statement	PFMT64d	323:14:8968:8974	5003962	5	True				
ANR	5005279	Statement	"""\\n"""	323:22:8976:8979	5003962	6	True				
ANR	5005280	Statement	","	323:26:8980:8980	5003962	7	True				
ANR	5005281	Statement	n	323:28:8982:8982	5003962	8	True				
ANR	5005282	Statement	)	323:29:8983:8983	5003962	9	True				
ANR	5005283	ExpressionStatement		323:30:8984:8984	5003962	10	True				
ANR	5005284	ExpressionStatement	fflush ( stdout )	324:2:8988:9003	5003962	11	True				
ANR	5005285	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005286	Callee	fflush		5003962	0					
ANR	5005287	Identifier	fflush		5003962	0					
ANR	5005288	ArgumentList	stdout		5003962	1					
ANR	5005289	Argument	stdout		5003962	0					
ANR	5005290	Identifier	stdout		5003962	0					
ANR	5005291	ReturnStatement	return true ;	325:2:9007:9018	5003962	12	True				
ANR	5005292	Identifier	true		5003962	0					
ANR	5005293	ElseStatement	else		5003962	0					
ANR	5005294	IfStatement	if ( flags & ( 1 << 15 ) )		5003962	0					
ANR	5005295	Condition	flags & ( 1 << 15 )	326:12:9032:9048	5003962	0	True				
ANR	5005296	BitAndExpression	flags & ( 1 << 15 )		5003962	0		&			
ANR	5005297	Identifier	flags		5003962	0					
ANR	5005298	ShiftExpression	1 << 15		5003962	1		<<			
ANR	5005299	PrimaryExpression	1		5003962	0					
ANR	5005300	PrimaryExpression	15		5003962	1					
ANR	5005301	CompoundStatement		204:2:4896:4926	5003962	1					
ANR	5005302	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	327:2:9061:9091	5003962	0	True				
ANR	5005303	IdentifierDecl	"n = r_num_math ( num , str )"		5003962	0					
ANR	5005304	IdentifierDeclType	ut64		5003962	0					
ANR	5005305	Identifier	n		5003962	1					
ANR	5005306	AssignmentExpression	"n = r_num_math ( num , str )"		5003962	2		=			
ANR	5005307	Identifier	n		5003962	0					
ANR	5005308	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5005309	Callee	r_num_math		5003962	0					
ANR	5005310	Identifier	r_num_math		5003962	0					
ANR	5005311	ArgumentList	num		5003962	1					
ANR	5005312	Argument	num		5003962	0					
ANR	5005313	Identifier	num		5003962	0					
ANR	5005314	Argument	str		5003962	1					
ANR	5005315	Identifier	str		5003962	0					
ANR	5005316	IfStatement	if ( n >> 32 )		5003962	1					
ANR	5005317	Condition	n >> 32	328:6:9099:9105	5003962	0	True				
ANR	5005318	ShiftExpression	n >> 32		5003962	0		>>			
ANR	5005319	Identifier	n		5003962	0					
ANR	5005320	PrimaryExpression	32		5003962	1					
ANR	5005321	CompoundStatement		207:3:4973:4993	5003962	1					
ANR	5005322	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n ;	330:3:9138:9158	5003962	0	True				
ANR	5005323	IdentifierDecl	* np = ( ut8 * ) & n		5003962	0					
ANR	5005324	IdentifierDeclType	ut8 *		5003962	0					
ANR	5005325	Identifier	np		5003962	1					
ANR	5005326	AssignmentExpression	* np = ( ut8 * ) & n		5003962	2		=			
ANR	5005327	Identifier	np		5003962	0					
ANR	5005328	CastExpression	( ut8 * ) & n		5003962	1					
ANR	5005329	CastTarget	ut8 *		5003962	0					
ANR	5005330	UnaryOperationExpression	& n		5003962	1					
ANR	5005331	UnaryOperator	&		5003962	0					
ANR	5005332	Identifier	n		5003962	1					
ANR	5005333	IfStatement	if ( flags & 1 )		5003962	1					
ANR	5005334	Condition	flags & 1	331:7:9167:9175	5003962	0	True				
ANR	5005335	BitAndExpression	flags & 1		5003962	0		&			
ANR	5005336	Identifier	flags		5003962	0					
ANR	5005337	PrimaryExpression	1		5003962	1					
ANR	5005338	CompoundStatement		208:18:5013:5013	5003962	1					
ANR	5005339	ExpressionStatement	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"	332:4:9184:9218	5003962	0	True				
ANR	5005340	CallExpression	"fwrite ( & n , sizeof ( n ) , 1 , stdout )"		5003962	0					
ANR	5005341	Callee	fwrite		5003962	0					
ANR	5005342	Identifier	fwrite		5003962	0					
ANR	5005343	ArgumentList	& n		5003962	1					
ANR	5005344	Argument	& n		5003962	0					
ANR	5005345	UnaryOperationExpression	& n		5003962	0					
ANR	5005346	UnaryOperator	&		5003962	0					
ANR	5005347	Identifier	n		5003962	1					
ANR	5005348	Argument	sizeof ( n )		5003962	1					
ANR	5005349	SizeofExpression	sizeof ( n )		5003962	0					
ANR	5005350	Sizeof	sizeof		5003962	0					
ANR	5005351	SizeofOperand	n		5003962	1					
ANR	5005352	Argument	1		5003962	2					
ANR	5005353	PrimaryExpression	1		5003962	0					
ANR	5005354	Argument	stdout		5003962	3					
ANR	5005355	Identifier	stdout		5003962	0					
ANR	5005356	ElseStatement	else		5003962	0					
ANR	5005357	CompoundStatement		210:10:5065:5065	5003962	0					
ANR	5005358	Statement	printf	334:4:9236:9241	5003962	0	True				
ANR	5005359	Statement	(	334:11:9243:9243	5003962	1	True				
ANR	5005360	Statement	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x"""	334:12:9244:9273	5003962	2	True				
ANR	5005361	Statement	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""	335:5:9280:9311	5003962	3	True				
ANR	5005362	Statement	","	335:37:9312:9312	5003962	4	True				
ANR	5005363	Statement	np	336:5:9319:9320	5003962	5	True				
ANR	5005364	Statement	[	336:7:9321:9321	5003962	6	True				
ANR	5005365	Statement	0	336:8:9322:9322	5003962	7	True				
ANR	5005366	Statement	]	336:9:9323:9323	5003962	8	True				
ANR	5005367	Statement	","	336:10:9324:9324	5003962	9	True				
ANR	5005368	Statement	np	336:12:9326:9327	5003962	10	True				
ANR	5005369	Statement	[	336:14:9328:9328	5003962	11	True				
ANR	5005370	Statement	1	336:15:9329:9329	5003962	12	True				
ANR	5005371	Statement	]	336:16:9330:9330	5003962	13	True				
ANR	5005372	Statement	","	336:17:9331:9331	5003962	14	True				
ANR	5005373	Statement	np	336:19:9333:9334	5003962	15	True				
ANR	5005374	Statement	[	336:21:9335:9335	5003962	16	True				
ANR	5005375	Statement	2	336:22:9336:9336	5003962	17	True				
ANR	5005376	Statement	]	336:23:9337:9337	5003962	18	True				
ANR	5005377	Statement	","	336:24:9338:9338	5003962	19	True				
ANR	5005378	Statement	np	336:26:9340:9341	5003962	20	True				
ANR	5005379	Statement	[	336:28:9342:9342	5003962	21	True				
ANR	5005380	Statement	3	336:29:9343:9343	5003962	22	True				
ANR	5005381	Statement	]	336:30:9344:9344	5003962	23	True				
ANR	5005382	Statement	","	336:31:9345:9345	5003962	24	True				
ANR	5005383	Statement	np	337:5:9352:9353	5003962	25	True				
ANR	5005384	Statement	[	337:7:9354:9354	5003962	26	True				
ANR	5005385	Statement	4	337:8:9355:9355	5003962	27	True				
ANR	5005386	Statement	]	337:9:9356:9356	5003962	28	True				
ANR	5005387	Statement	","	337:10:9357:9357	5003962	29	True				
ANR	5005388	Statement	np	337:12:9359:9360	5003962	30	True				
ANR	5005389	Statement	[	337:14:9361:9361	5003962	31	True				
ANR	5005390	Statement	5	337:15:9362:9362	5003962	32	True				
ANR	5005391	Statement	]	337:16:9363:9363	5003962	33	True				
ANR	5005392	Statement	","	337:17:9364:9364	5003962	34	True				
ANR	5005393	Statement	np	337:19:9366:9367	5003962	35	True				
ANR	5005394	Statement	[	337:21:9368:9368	5003962	36	True				
ANR	5005395	Statement	6	337:22:9369:9369	5003962	37	True				
ANR	5005396	Statement	]	337:23:9370:9370	5003962	38	True				
ANR	5005397	Statement	","	337:24:9371:9371	5003962	39	True				
ANR	5005398	Statement	np	337:26:9373:9374	5003962	40	True				
ANR	5005399	Statement	[	337:28:9375:9375	5003962	41	True				
ANR	5005400	Statement	7	337:29:9376:9376	5003962	42	True				
ANR	5005401	Statement	]	337:30:9377:9377	5003962	43	True				
ANR	5005402	Statement	)	337:31:9378:9378	5003962	44	True				
ANR	5005403	ExpressionStatement		337:32:9379:9379	5003962	45	True				
ANR	5005404	ElseStatement	else		5003962	0					
ANR	5005405	CompoundStatement		219:3:5297:5319	5003962	0					
ANR	5005406	IdentifierDeclStatement	ut32 n32 = ( ut32 ) ( n & UT32_MAX ) ;	341:3:9425:9457	5003962	0	True				
ANR	5005407	IdentifierDecl	n32 = ( ut32 ) ( n & UT32_MAX )		5003962	0					
ANR	5005408	IdentifierDeclType	ut32		5003962	0					
ANR	5005409	Identifier	n32		5003962	1					
ANR	5005410	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5003962	2		=			
ANR	5005411	Identifier	n32		5003962	0					
ANR	5005412	CastExpression	( ut32 ) ( n & UT32_MAX )		5003962	1					
ANR	5005413	CastTarget	ut32		5003962	0					
ANR	5005414	BitAndExpression	n & UT32_MAX		5003962	1		&			
ANR	5005415	Identifier	n		5003962	0					
ANR	5005416	Identifier	UT32_MAX		5003962	1					
ANR	5005417	IdentifierDeclStatement	ut8 * np = ( ut8 * ) & n32 ;	342:3:9462:9484	5003962	1	True				
ANR	5005418	IdentifierDecl	* np = ( ut8 * ) & n32		5003962	0					
ANR	5005419	IdentifierDeclType	ut8 *		5003962	0					
ANR	5005420	Identifier	np		5003962	1					
ANR	5005421	AssignmentExpression	* np = ( ut8 * ) & n32		5003962	2		=			
ANR	5005422	Identifier	np		5003962	0					
ANR	5005423	CastExpression	( ut8 * ) & n32		5003962	1					
ANR	5005424	CastTarget	ut8 *		5003962	0					
ANR	5005425	UnaryOperationExpression	& n32		5003962	1					
ANR	5005426	UnaryOperator	&		5003962	0					
ANR	5005427	Identifier	n32		5003962	1					
ANR	5005428	IfStatement	if ( flags & 1 )		5003962	2					
ANR	5005429	Condition	flags & 1	343:7:9493:9501	5003962	0	True				
ANR	5005430	BitAndExpression	flags & 1		5003962	0		&			
ANR	5005431	Identifier	flags		5003962	0					
ANR	5005432	PrimaryExpression	1		5003962	1					
ANR	5005433	CompoundStatement		220:18:5339:5339	5003962	1					
ANR	5005434	ExpressionStatement	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"	344:4:9510:9548	5003962	0	True				
ANR	5005435	CallExpression	"fwrite ( & n32 , sizeof ( n32 ) , 1 , stdout )"		5003962	0					
ANR	5005436	Callee	fwrite		5003962	0					
ANR	5005437	Identifier	fwrite		5003962	0					
ANR	5005438	ArgumentList	& n32		5003962	1					
ANR	5005439	Argument	& n32		5003962	0					
ANR	5005440	UnaryOperationExpression	& n32		5003962	0					
ANR	5005441	UnaryOperator	&		5003962	0					
ANR	5005442	Identifier	n32		5003962	1					
ANR	5005443	Argument	sizeof ( n32 )		5003962	1					
ANR	5005444	SizeofExpression	sizeof ( n32 )		5003962	0					
ANR	5005445	Sizeof	sizeof		5003962	0					
ANR	5005446	SizeofOperand	n32		5003962	1					
ANR	5005447	Argument	1		5003962	2					
ANR	5005448	PrimaryExpression	1		5003962	0					
ANR	5005449	Argument	stdout		5003962	3					
ANR	5005450	Identifier	stdout		5003962	0					
ANR	5005451	ElseStatement	else		5003962	0					
ANR	5005452	CompoundStatement		222:10:5395:5395	5003962	0					
ANR	5005453	ExpressionStatement	"printf ( ""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"	346:4:9566:9640	5003962	0	True				
ANR	5005454	CallExpression	"printf ( ""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"" , np [ 0 ] , np [ 1 ] , np [ 2 ] , np [ 3 ] )"		5003962	0					
ANR	5005455	Callee	printf		5003962	0					
ANR	5005456	Identifier	printf		5003962	0					
ANR	5005457	ArgumentList	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5003962	1					
ANR	5005458	Argument	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5003962	0					
ANR	5005459	PrimaryExpression	"""\\\\x%02x\\\\x%02x\\\\x%02x\\\\x%02x\\n"""		5003962	0					
ANR	5005460	Argument	np [ 0 ]		5003962	1					
ANR	5005461	ArrayIndexing	np [ 0 ]		5003962	0					
ANR	5005462	Identifier	np		5003962	0					
ANR	5005463	PrimaryExpression	0		5003962	1					
ANR	5005464	Argument	np [ 1 ]		5003962	2					
ANR	5005465	ArrayIndexing	np [ 1 ]		5003962	0					
ANR	5005466	Identifier	np		5003962	0					
ANR	5005467	PrimaryExpression	1		5003962	1					
ANR	5005468	Argument	np [ 2 ]		5003962	3					
ANR	5005469	ArrayIndexing	np [ 2 ]		5003962	0					
ANR	5005470	Identifier	np		5003962	0					
ANR	5005471	PrimaryExpression	2		5003962	1					
ANR	5005472	Argument	np [ 3 ]		5003962	4					
ANR	5005473	ArrayIndexing	np [ 3 ]		5003962	0					
ANR	5005474	Identifier	np		5003962	0					
ANR	5005475	PrimaryExpression	3		5003962	1					
ANR	5005476	ExpressionStatement	fflush ( stdout )	350:2:9653:9668	5003962	2	True				
ANR	5005477	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005478	Callee	fflush		5003962	0					
ANR	5005479	Identifier	fflush		5003962	0					
ANR	5005480	ArgumentList	stdout		5003962	1					
ANR	5005481	Argument	stdout		5003962	0					
ANR	5005482	Identifier	stdout		5003962	0					
ANR	5005483	ReturnStatement	return true ;	351:2:9672:9683	5003962	3	True				
ANR	5005484	Identifier	true		5003962	0					
ANR	5005485	ElseStatement	else		5003962	0					
ANR	5005486	IfStatement	if ( flags & ( 1 << 10 ) )		5003962	0					
ANR	5005487	Condition	flags & ( 1 << 10 )	352:12:9697:9713	5003962	0	True				
ANR	5005488	BitAndExpression	flags & ( 1 << 10 )		5003962	0		&			
ANR	5005489	Identifier	flags		5003962	0					
ANR	5005490	ShiftExpression	1 << 10		5003962	1		<<			
ANR	5005491	PrimaryExpression	1		5003962	0					
ANR	5005492	PrimaryExpression	10		5003962	1					
ANR	5005493	CompoundStatement		230:2:5561:5572	5003962	1					
ANR	5005494	IdentifierDeclStatement	char buf [ 8 ] ;	353:2:9726:9737	5003962	0	True				
ANR	5005495	IdentifierDecl	buf [ 8 ]		5003962	0					
ANR	5005496	IdentifierDeclType	char [ 8 ]		5003962	0					
ANR	5005497	Identifier	buf		5003962	1					
ANR	5005498	PrimaryExpression	8		5003962	2					
ANR	5005499	ExpressionStatement	"r_num_units ( buf , sizeof ( buf ) , r_num_math ( NULL , str ) )"	354:2:9741:9796	5003962	1	True				
ANR	5005500	CallExpression	"r_num_units ( buf , sizeof ( buf ) , r_num_math ( NULL , str ) )"		5003962	0					
ANR	5005501	Callee	r_num_units		5003962	0					
ANR	5005502	Identifier	r_num_units		5003962	0					
ANR	5005503	ArgumentList	buf		5003962	1					
ANR	5005504	Argument	buf		5003962	0					
ANR	5005505	Identifier	buf		5003962	0					
ANR	5005506	Argument	sizeof ( buf )		5003962	1					
ANR	5005507	SizeofExpression	sizeof ( buf )		5003962	0					
ANR	5005508	Sizeof	sizeof		5003962	0					
ANR	5005509	SizeofOperand	buf		5003962	1					
ANR	5005510	Argument	"r_num_math ( NULL , str )"		5003962	2					
ANR	5005511	CallExpression	"r_num_math ( NULL , str )"		5003962	0					
ANR	5005512	Callee	r_num_math		5003962	0					
ANR	5005513	Identifier	r_num_math		5003962	0					
ANR	5005514	ArgumentList	NULL		5003962	1					
ANR	5005515	Argument	NULL		5003962	0					
ANR	5005516	Identifier	NULL		5003962	0					
ANR	5005517	Argument	str		5003962	1					
ANR	5005518	Identifier	str		5003962	0					
ANR	5005519	ExpressionStatement	"printf ( ""%s\\n"" , buf )"	355:2:9800:9820	5003962	2	True				
ANR	5005520	CallExpression	"printf ( ""%s\\n"" , buf )"		5003962	0					
ANR	5005521	Callee	printf		5003962	0					
ANR	5005522	Identifier	printf		5003962	0					
ANR	5005523	ArgumentList	"""%s\\n"""		5003962	1					
ANR	5005524	Argument	"""%s\\n"""		5003962	0					
ANR	5005525	PrimaryExpression	"""%s\\n"""		5003962	0					
ANR	5005526	Argument	buf		5003962	1					
ANR	5005527	Identifier	buf		5003962	0					
ANR	5005528	ReturnStatement	return true ;	356:2:9824:9835	5003962	3	True				
ANR	5005529	Identifier	true		5003962	0					
ANR	5005530	ElseStatement	else		5003962	0					
ANR	5005531	IfStatement	if ( flags & ( 1 << 11 ) )		5003962	0					
ANR	5005532	Condition	flags & ( 1 << 11 )	357:12:9849:9865	5003962	0	True				
ANR	5005533	BitAndExpression	flags & ( 1 << 11 )		5003962	0		&			
ANR	5005534	Identifier	flags		5003962	0					
ANR	5005535	ShiftExpression	1 << 11		5003962	1		<<			
ANR	5005536	PrimaryExpression	1		5003962	0					
ANR	5005537	PrimaryExpression	11		5003962	1					
ANR	5005538	CompoundStatement		236:2:5747:5773	5003962	1					
ANR	5005539	IdentifierDeclStatement	"ut32 n = r_num_math ( num , str ) ;"	358:2:9878:9908	5003962	0	True				
ANR	5005540	IdentifierDecl	"n = r_num_math ( num , str )"		5003962	0					
ANR	5005541	IdentifierDeclType	ut32		5003962	0					
ANR	5005542	Identifier	n		5003962	1					
ANR	5005543	AssignmentExpression	"n = r_num_math ( num , str )"		5003962	2		=			
ANR	5005544	Identifier	n		5003962	0					
ANR	5005545	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5005546	Callee	r_num_math		5003962	0					
ANR	5005547	Identifier	r_num_math		5003962	0					
ANR	5005548	ArgumentList	num		5003962	1					
ANR	5005549	Argument	num		5003962	0					
ANR	5005550	Identifier	num		5003962	0					
ANR	5005551	Argument	str		5003962	1					
ANR	5005552	Identifier	str		5003962	0					
ANR	5005553	IdentifierDeclStatement	RPrint * p = r_print_new ( ) ;	359:2:9912:9938	5003962	1	True				
ANR	5005554	IdentifierDecl	* p = r_print_new ( )		5003962	0					
ANR	5005555	IdentifierDeclType	RPrint *		5003962	0					
ANR	5005556	Identifier	p		5003962	1					
ANR	5005557	AssignmentExpression	* p = r_print_new ( )		5003962	2		=			
ANR	5005558	Identifier	p		5003962	0					
ANR	5005559	CallExpression	r_print_new ( )		5003962	1					
ANR	5005560	Callee	r_print_new		5003962	0					
ANR	5005561	Identifier	r_print_new		5003962	0					
ANR	5005562	ArgumentList			5003962	1					
ANR	5005563	ExpressionStatement	"r_print_date_unix ( p , ( const ut8 * ) & n , sizeof ( ut32 ) )"	360:2:9942:9996	5003962	2	True				
ANR	5005564	CallExpression	"r_print_date_unix ( p , ( const ut8 * ) & n , sizeof ( ut32 ) )"		5003962	0					
ANR	5005565	Callee	r_print_date_unix		5003962	0					
ANR	5005566	Identifier	r_print_date_unix		5003962	0					
ANR	5005567	ArgumentList	p		5003962	1					
ANR	5005568	Argument	p		5003962	0					
ANR	5005569	Identifier	p		5003962	0					
ANR	5005570	Argument	( const ut8 * ) & n		5003962	1					
ANR	5005571	CastExpression	( const ut8 * ) & n		5003962	0					
ANR	5005572	CastTarget	const ut8 *		5003962	0					
ANR	5005573	UnaryOperationExpression	& n		5003962	1					
ANR	5005574	UnaryOperator	&		5003962	0					
ANR	5005575	Identifier	n		5003962	1					
ANR	5005576	Argument	sizeof ( ut32 )		5003962	2					
ANR	5005577	SizeofExpression	sizeof ( ut32 )		5003962	0					
ANR	5005578	Sizeof	sizeof		5003962	0					
ANR	5005579	SizeofOperand	ut32		5003962	1					
ANR	5005580	ExpressionStatement	r_print_free ( p )	361:2:10000:10016	5003962	3	True				
ANR	5005581	CallExpression	r_print_free ( p )		5003962	0					
ANR	5005582	Callee	r_print_free		5003962	0					
ANR	5005583	Identifier	r_print_free		5003962	0					
ANR	5005584	ArgumentList	p		5003962	1					
ANR	5005585	Argument	p		5003962	0					
ANR	5005586	Identifier	p		5003962	0					
ANR	5005587	ReturnStatement	return true ;	362:2:10020:10031	5003962	4	True				
ANR	5005588	Identifier	true		5003962	0					
ANR	5005589	ElseStatement	else		5003962	0					
ANR	5005590	IfStatement	if ( flags & ( 1 << 12 ) )		5003962	0					
ANR	5005591	Condition	flags & ( 1 << 12 )	363:12:10045:10061	5003962	0	True				
ANR	5005592	BitAndExpression	flags & ( 1 << 12 )		5003962	0		&			
ANR	5005593	Identifier	flags		5003962	0					
ANR	5005594	ShiftExpression	1 << 12		5003962	1		<<			
ANR	5005595	PrimaryExpression	1		5003962	0					
ANR	5005596	PrimaryExpression	12		5003962	1					
ANR	5005597	CompoundStatement		243:2:6050:6107	5003962	1					
ANR	5005598	IdentifierDeclStatement	const int len = strlen ( str ) ;	364:2:10074:10102	5003962	0	True				
ANR	5005599	IdentifierDecl	len = strlen ( str )		5003962	0					
ANR	5005600	IdentifierDeclType	const int		5003962	0					
ANR	5005601	Identifier	len		5003962	1					
ANR	5005602	AssignmentExpression	len = strlen ( str )		5003962	2		=			
ANR	5005603	Identifier	len		5003962	0					
ANR	5005604	CallExpression	strlen ( str )		5003962	1					
ANR	5005605	Callee	strlen		5003962	0					
ANR	5005606	Identifier	strlen		5003962	0					
ANR	5005607	ArgumentList	str		5003962	1					
ANR	5005608	Argument	str		5003962	0					
ANR	5005609	Identifier	str		5003962	0					
ANR	5005610	IdentifierDeclStatement	"char * out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 ) ;"	366:2:10215:10272	5003962	1	True				
ANR	5005611	IdentifierDecl	"* out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5003962	0					
ANR	5005612	IdentifierDeclType	char *		5003962	0					
ANR	5005613	Identifier	out		5003962	1					
ANR	5005614	AssignmentExpression	"* out = calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5003962	2		=			
ANR	5005615	Identifier	out		5003962	0					
ANR	5005616	CallExpression	"calloc ( sizeof ( char ) , ( len + 2 ) / 3 * 4 + 1 )"		5003962	1					
ANR	5005617	Callee	calloc		5003962	0					
ANR	5005618	Identifier	calloc		5003962	0					
ANR	5005619	ArgumentList	sizeof ( char )		5003962	1					
ANR	5005620	Argument	sizeof ( char )		5003962	0					
ANR	5005621	SizeofExpression	sizeof ( char )		5003962	0					
ANR	5005622	Sizeof	sizeof		5003962	0					
ANR	5005623	SizeofOperand	char		5003962	1					
ANR	5005624	Argument	( len + 2 ) / 3 * 4 + 1		5003962	1					
ANR	5005625	AdditiveExpression	( len + 2 ) / 3 * 4 + 1		5003962	0		+			
ANR	5005626	MultiplicativeExpression	( len + 2 ) / 3 * 4		5003962	0		/			
ANR	5005627	AdditiveExpression	len + 2		5003962	0		+			
ANR	5005628	Identifier	len		5003962	0					
ANR	5005629	PrimaryExpression	2		5003962	1					
ANR	5005630	MultiplicativeExpression	3 * 4		5003962	1		*			
ANR	5005631	PrimaryExpression	3		5003962	0					
ANR	5005632	PrimaryExpression	4		5003962	1					
ANR	5005633	PrimaryExpression	1		5003962	1					
ANR	5005634	IfStatement	if ( out )		5003962	2					
ANR	5005635	Condition	out	367:6:10312:10314	5003962	0	True				
ANR	5005636	Identifier	out		5003962	0					
ANR	5005637	CompoundStatement		244:11:6152:6152	5003962	1					
ANR	5005638	ExpressionStatement	"r_base64_encode ( out , ( const ut8 * ) str , len )"	368:3:10322:10367	5003962	0	True				
ANR	5005639	CallExpression	"r_base64_encode ( out , ( const ut8 * ) str , len )"		5003962	0					
ANR	5005640	Callee	r_base64_encode		5003962	0					
ANR	5005641	Identifier	r_base64_encode		5003962	0					
ANR	5005642	ArgumentList	out		5003962	1					
ANR	5005643	Argument	out		5003962	0					
ANR	5005644	Identifier	out		5003962	0					
ANR	5005645	Argument	( const ut8 * ) str		5003962	1					
ANR	5005646	CastExpression	( const ut8 * ) str		5003962	0					
ANR	5005647	CastTarget	const ut8 *		5003962	0					
ANR	5005648	Identifier	str		5003962	1					
ANR	5005649	Argument	len		5003962	2					
ANR	5005650	Identifier	len		5003962	0					
ANR	5005651	ExpressionStatement	"printf ( ""%s%s"" , out , nl )"	369:3:10372:10396	5003962	1	True				
ANR	5005652	CallExpression	"printf ( ""%s%s"" , out , nl )"		5003962	0					
ANR	5005653	Callee	printf		5003962	0					
ANR	5005654	Identifier	printf		5003962	0					
ANR	5005655	ArgumentList	"""%s%s"""		5003962	1					
ANR	5005656	Argument	"""%s%s"""		5003962	0					
ANR	5005657	PrimaryExpression	"""%s%s"""		5003962	0					
ANR	5005658	Argument	out		5003962	1					
ANR	5005659	Identifier	out		5003962	0					
ANR	5005660	Argument	nl		5003962	2					
ANR	5005661	Identifier	nl		5003962	0					
ANR	5005662	ExpressionStatement	fflush ( stdout )	370:3:10401:10416	5003962	2	True				
ANR	5005663	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005664	Callee	fflush		5003962	0					
ANR	5005665	Identifier	fflush		5003962	0					
ANR	5005666	ArgumentList	stdout		5003962	1					
ANR	5005667	Argument	stdout		5003962	0					
ANR	5005668	Identifier	stdout		5003962	0					
ANR	5005669	ExpressionStatement	free ( out )	371:3:10421:10431	5003962	3	True				
ANR	5005670	CallExpression	free ( out )		5003962	0					
ANR	5005671	Callee	free		5003962	0					
ANR	5005672	Identifier	free		5003962	0					
ANR	5005673	ArgumentList	out		5003962	1					
ANR	5005674	Argument	out		5003962	0					
ANR	5005675	Identifier	out		5003962	0					
ANR	5005676	ReturnStatement	return true ;	373:2:10439:10450	5003962	3	True				
ANR	5005677	Identifier	true		5003962	0					
ANR	5005678	ElseStatement	else		5003962	0					
ANR	5005679	IfStatement	if ( flags & ( 1 << 13 ) )		5003962	0					
ANR	5005680	Condition	flags & ( 1 << 13 )	374:12:10464:10480	5003962	0	True				
ANR	5005681	BitAndExpression	flags & ( 1 << 13 )		5003962	0		&			
ANR	5005682	Identifier	flags		5003962	0					
ANR	5005683	ShiftExpression	1 << 13		5003962	1		<<			
ANR	5005684	PrimaryExpression	1		5003962	0					
ANR	5005685	PrimaryExpression	13		5003962	1					
ANR	5005686	CompoundStatement		253:2:6360:6409	5003962	1					
ANR	5005687	IdentifierDeclStatement	const int len = strlen ( str ) ;	375:2:10493:10521	5003962	0	True				
ANR	5005688	IdentifierDecl	len = strlen ( str )		5003962	0					
ANR	5005689	IdentifierDeclType	const int		5003962	0					
ANR	5005690	Identifier	len		5003962	1					
ANR	5005691	AssignmentExpression	len = strlen ( str )		5003962	2		=			
ANR	5005692	Identifier	len		5003962	0					
ANR	5005693	CallExpression	strlen ( str )		5003962	1					
ANR	5005694	Callee	strlen		5003962	0					
ANR	5005695	Identifier	strlen		5003962	0					
ANR	5005696	ArgumentList	str		5003962	1					
ANR	5005697	Argument	str		5003962	0					
ANR	5005698	Identifier	str		5003962	0					
ANR	5005699	IdentifierDeclStatement	"ut8 * out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 ) ;"	376:2:10525:10574	5003962	1	True				
ANR	5005700	IdentifierDecl	"* out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5003962	0					
ANR	5005701	IdentifierDeclType	ut8 *		5003962	0					
ANR	5005702	Identifier	out		5003962	1					
ANR	5005703	AssignmentExpression	"* out = calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5003962	2		=			
ANR	5005704	Identifier	out		5003962	0					
ANR	5005705	CallExpression	"calloc ( sizeof ( ut8 ) , len / 4 * 3 + 1 )"		5003962	1					
ANR	5005706	Callee	calloc		5003962	0					
ANR	5005707	Identifier	calloc		5003962	0					
ANR	5005708	ArgumentList	sizeof ( ut8 )		5003962	1					
ANR	5005709	Argument	sizeof ( ut8 )		5003962	0					
ANR	5005710	SizeofExpression	sizeof ( ut8 )		5003962	0					
ANR	5005711	Sizeof	sizeof		5003962	0					
ANR	5005712	SizeofOperand	ut8		5003962	1					
ANR	5005713	Argument	len / 4 * 3 + 1		5003962	1					
ANR	5005714	AdditiveExpression	len / 4 * 3 + 1		5003962	0		+			
ANR	5005715	MultiplicativeExpression	len / 4 * 3		5003962	0		/			
ANR	5005716	Identifier	len		5003962	0					
ANR	5005717	MultiplicativeExpression	4 * 3		5003962	1		*			
ANR	5005718	PrimaryExpression	4		5003962	0					
ANR	5005719	PrimaryExpression	3		5003962	1					
ANR	5005720	PrimaryExpression	1		5003962	1					
ANR	5005721	IfStatement	if ( out )		5003962	2					
ANR	5005722	Condition	out	377:6:10582:10584	5003962	0	True				
ANR	5005723	Identifier	out		5003962	0					
ANR	5005724	CompoundStatement		254:11:6422:6422	5003962	1					
ANR	5005725	ExpressionStatement	"r_base64_decode ( out , str , len )"	378:3:10592:10623	5003962	0	True				
ANR	5005726	CallExpression	"r_base64_decode ( out , str , len )"		5003962	0					
ANR	5005727	Callee	r_base64_decode		5003962	0					
ANR	5005728	Identifier	r_base64_decode		5003962	0					
ANR	5005729	ArgumentList	out		5003962	1					
ANR	5005730	Argument	out		5003962	0					
ANR	5005731	Identifier	out		5003962	0					
ANR	5005732	Argument	str		5003962	1					
ANR	5005733	Identifier	str		5003962	0					
ANR	5005734	Argument	len		5003962	2					
ANR	5005735	Identifier	len		5003962	0					
ANR	5005736	ExpressionStatement	"printf ( ""%s%s"" , out , nl )"	379:3:10628:10652	5003962	1	True				
ANR	5005737	CallExpression	"printf ( ""%s%s"" , out , nl )"		5003962	0					
ANR	5005738	Callee	printf		5003962	0					
ANR	5005739	Identifier	printf		5003962	0					
ANR	5005740	ArgumentList	"""%s%s"""		5003962	1					
ANR	5005741	Argument	"""%s%s"""		5003962	0					
ANR	5005742	PrimaryExpression	"""%s%s"""		5003962	0					
ANR	5005743	Argument	out		5003962	1					
ANR	5005744	Identifier	out		5003962	0					
ANR	5005745	Argument	nl		5003962	2					
ANR	5005746	Identifier	nl		5003962	0					
ANR	5005747	ExpressionStatement	fflush ( stdout )	380:3:10657:10672	5003962	2	True				
ANR	5005748	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005749	Callee	fflush		5003962	0					
ANR	5005750	Identifier	fflush		5003962	0					
ANR	5005751	ArgumentList	stdout		5003962	1					
ANR	5005752	Argument	stdout		5003962	0					
ANR	5005753	Identifier	stdout		5003962	0					
ANR	5005754	ExpressionStatement	free ( out )	381:3:10677:10687	5003962	3	True				
ANR	5005755	CallExpression	free ( out )		5003962	0					
ANR	5005756	Callee	free		5003962	0					
ANR	5005757	Identifier	free		5003962	0					
ANR	5005758	ArgumentList	out		5003962	1					
ANR	5005759	Argument	out		5003962	0					
ANR	5005760	Identifier	out		5003962	0					
ANR	5005761	ReturnStatement	return true ;	383:2:10695:10706	5003962	3	True				
ANR	5005762	Identifier	true		5003962	0					
ANR	5005763	ElseStatement	else		5003962	0					
ANR	5005764	IfStatement	if ( flags & 1 << 14 )		5003962	0					
ANR	5005765	Condition	flags & 1 << 14	384:12:10720:10734	5003962	0	True				
ANR	5005766	BitAndExpression	flags & 1 << 14		5003962	0		&			
ANR	5005767	Identifier	flags		5003962	0					
ANR	5005768	ShiftExpression	1 << 14		5003962	1		<<			
ANR	5005769	PrimaryExpression	1		5003962	0					
ANR	5005770	PrimaryExpression	14		5003962	1					
ANR	5005771	CompoundStatement		262:2:6582:6614	5003962	1					
ANR	5005772	IdentifierDeclStatement	char * str = r_stdin_slurp ( NULL ) ;	385:2:10747:10779	5003962	0	True				
ANR	5005773	IdentifierDecl	* str = r_stdin_slurp ( NULL )		5003962	0					
ANR	5005774	IdentifierDeclType	char *		5003962	0					
ANR	5005775	Identifier	str		5003962	1					
ANR	5005776	AssignmentExpression	* str = r_stdin_slurp ( NULL )		5003962	2		=			
ANR	5005777	Identifier	str		5003962	0					
ANR	5005778	CallExpression	r_stdin_slurp ( NULL )		5003962	1					
ANR	5005779	Callee	r_stdin_slurp		5003962	0					
ANR	5005780	Identifier	r_stdin_slurp		5003962	0					
ANR	5005781	ArgumentList	NULL		5003962	1					
ANR	5005782	Argument	NULL		5003962	0					
ANR	5005783	Identifier	NULL		5003962	0					
ANR	5005784	IfStatement	if ( str )		5003962	1					
ANR	5005785	Condition	str	386:6:10787:10789	5003962	0	True				
ANR	5005786	Identifier	str		5003962	0					
ANR	5005787	CompoundStatement		264:3:6632:6665	5003962	1					
ANR	5005788	IdentifierDeclStatement	char * res = r_hex_from_code ( str ) ;	387:3:10797:10830	5003962	0	True				
ANR	5005789	IdentifierDecl	* res = r_hex_from_code ( str )		5003962	0					
ANR	5005790	IdentifierDeclType	char *		5003962	0					
ANR	5005791	Identifier	res		5003962	1					
ANR	5005792	AssignmentExpression	* res = r_hex_from_code ( str )		5003962	2		=			
ANR	5005793	Identifier	res		5003962	0					
ANR	5005794	CallExpression	r_hex_from_code ( str )		5003962	1					
ANR	5005795	Callee	r_hex_from_code		5003962	0					
ANR	5005796	Identifier	r_hex_from_code		5003962	0					
ANR	5005797	ArgumentList	str		5003962	1					
ANR	5005798	Argument	str		5003962	0					
ANR	5005799	Identifier	str		5003962	0					
ANR	5005800	IfStatement	if ( res )		5003962	1					
ANR	5005801	Condition	res	388:7:10839:10841	5003962	0	True				
ANR	5005802	Identifier	res		5003962	0					
ANR	5005803	CompoundStatement		265:12:6679:6679	5003962	1					
ANR	5005804	ExpressionStatement	"printf ( ""%s\\n"" , res )"	389:4:10850:10870	5003962	0	True				
ANR	5005805	CallExpression	"printf ( ""%s\\n"" , res )"		5003962	0					
ANR	5005806	Callee	printf		5003962	0					
ANR	5005807	Identifier	printf		5003962	0					
ANR	5005808	ArgumentList	"""%s\\n"""		5003962	1					
ANR	5005809	Argument	"""%s\\n"""		5003962	0					
ANR	5005810	PrimaryExpression	"""%s\\n"""		5003962	0					
ANR	5005811	Argument	res		5003962	1					
ANR	5005812	Identifier	res		5003962	0					
ANR	5005813	ExpressionStatement	fflush ( stdout )	390:4:10876:10891	5003962	1	True				
ANR	5005814	CallExpression	fflush ( stdout )		5003962	0					
ANR	5005815	Callee	fflush		5003962	0					
ANR	5005816	Identifier	fflush		5003962	0					
ANR	5005817	ArgumentList	stdout		5003962	1					
ANR	5005818	Argument	stdout		5003962	0					
ANR	5005819	Identifier	stdout		5003962	0					
ANR	5005820	ExpressionStatement	free ( res )	391:4:10897:10907	5003962	2	True				
ANR	5005821	CallExpression	free ( res )		5003962	0					
ANR	5005822	Callee	free		5003962	0					
ANR	5005823	Identifier	free		5003962	0					
ANR	5005824	ArgumentList	res		5003962	1					
ANR	5005825	Argument	res		5003962	0					
ANR	5005826	Identifier	res		5003962	0					
ANR	5005827	ElseStatement	else		5003962	0					
ANR	5005828	CompoundStatement		269:10:6754:6754	5003962	0					
ANR	5005829	ExpressionStatement	"eprintf ( ""Invalid input.\\n"" )"	393:4:10925:10953	5003962	0	True				
ANR	5005830	CallExpression	"eprintf ( ""Invalid input.\\n"" )"		5003962	0					
ANR	5005831	Callee	eprintf		5003962	0					
ANR	5005832	Identifier	eprintf		5003962	0					
ANR	5005833	ArgumentList	"""Invalid input.\\n"""		5003962	1					
ANR	5005834	Argument	"""Invalid input.\\n"""		5003962	0					
ANR	5005835	PrimaryExpression	"""Invalid input.\\n"""		5003962	0					
ANR	5005836	ExpressionStatement	free ( str )	395:3:10963:10973	5003962	2	True				
ANR	5005837	CallExpression	free ( str )		5003962	0					
ANR	5005838	Callee	free		5003962	0					
ANR	5005839	Identifier	free		5003962	0					
ANR	5005840	ArgumentList	str		5003962	1					
ANR	5005841	Argument	str		5003962	0					
ANR	5005842	Identifier	str		5003962	0					
ANR	5005843	ReturnStatement	return false ;	397:2:10981:10993	5003962	2	True				
ANR	5005844	Identifier	false		5003962	0					
ANR	5005845	ElseStatement	else		5003962	0					
ANR	5005846	IfStatement	if ( flags & ( 1 << 18 ) )		5003962	0					
ANR	5005847	Condition	flags & ( 1 << 18 )	398:12:11007:11023	5003962	0	True				
ANR	5005848	BitAndExpression	flags & ( 1 << 18 )		5003962	0		&			
ANR	5005849	Identifier	flags		5003962	0					
ANR	5005850	ShiftExpression	1 << 18		5003962	1		<<			
ANR	5005851	PrimaryExpression	1		5003962	0					
ANR	5005852	PrimaryExpression	18		5003962	1					
ANR	5005853	CompoundStatement		281:2:6953:6983	5003962	1					
ANR	5005854	IdentifierDeclStatement	"char * asnum , unit [ 8 ] ;"	399:2:11036:11056	5003962	0	True				
ANR	5005855	IdentifierDecl	* asnum		5003962	0					
ANR	5005856	IdentifierDeclType	char *		5003962	0					
ANR	5005857	Identifier	asnum		5003962	1					
ANR	5005858	IdentifierDecl	unit [ 8 ]		5003962	1					
ANR	5005859	IdentifierDeclType	char [ 8 ]		5003962	0					
ANR	5005860	Identifier	unit		5003962	1					
ANR	5005861	PrimaryExpression	8		5003962	2					
ANR	5005862	IdentifierDeclStatement	char out [ 128 ] ;	400:2:11060:11073	5003962	1	True				
ANR	5005863	IdentifierDecl	out [ 128 ]		5003962	0					
ANR	5005864	IdentifierDeclType	char [ 128 ]		5003962	0					
ANR	5005865	Identifier	out		5003962	1					
ANR	5005866	PrimaryExpression	128		5003962	2					
ANR	5005867	IdentifierDeclStatement	"ut32 n32 , s , a ;"	401:2:11077:11091	5003962	2	True				
ANR	5005868	IdentifierDecl	n32		5003962	0					
ANR	5005869	IdentifierDeclType	ut32		5003962	0					
ANR	5005870	Identifier	n32		5003962	1					
ANR	5005871	IdentifierDecl	s		5003962	1					
ANR	5005872	IdentifierDeclType	ut32		5003962	0					
ANR	5005873	Identifier	s		5003962	1					
ANR	5005874	IdentifierDecl	a		5003962	2					
ANR	5005875	IdentifierDeclType	ut32		5003962	0					
ANR	5005876	Identifier	a		5003962	1					
ANR	5005877	IdentifierDeclStatement	double d ;	402:2:11095:11103	5003962	3	True				
ANR	5005878	IdentifierDecl	d		5003962	0					
ANR	5005879	IdentifierDeclType	double		5003962	0					
ANR	5005880	Identifier	d		5003962	1					
ANR	5005881	IdentifierDeclStatement	float f ;	403:2:11107:11114	5003962	4	True				
ANR	5005882	IdentifierDecl	f		5003962	0					
ANR	5005883	IdentifierDeclType	float		5003962	0					
ANR	5005884	Identifier	f		5003962	1					
ANR	5005885	IdentifierDeclStatement	"ut64 n = r_num_math ( num , str ) ;"	404:2:11118:11148	5003962	5	True				
ANR	5005886	IdentifierDecl	"n = r_num_math ( num , str )"		5003962	0					
ANR	5005887	IdentifierDeclType	ut64		5003962	0					
ANR	5005888	Identifier	n		5003962	1					
ANR	5005889	AssignmentExpression	"n = r_num_math ( num , str )"		5003962	2		=			
ANR	5005890	Identifier	n		5003962	0					
ANR	5005891	CallExpression	"r_num_math ( num , str )"		5003962	1					
ANR	5005892	Callee	r_num_math		5003962	0					
ANR	5005893	Identifier	r_num_math		5003962	0					
ANR	5005894	ArgumentList	num		5003962	1					
ANR	5005895	Argument	num		5003962	0					
ANR	5005896	Identifier	num		5003962	0					
ANR	5005897	Argument	str		5003962	1					
ANR	5005898	Identifier	str		5003962	0					
ANR	5005899	IfStatement	if ( num -> dbz )		5003962	6					
ANR	5005900	Condition	num -> dbz	406:6:11157:11164	5003962	0	True				
ANR	5005901	PtrMemberAccess	num -> dbz		5003962	0					
ANR	5005902	Identifier	num		5003962	0					
ANR	5005903	Identifier	dbz		5003962	1					
ANR	5005904	CompoundStatement		283:16:7002:7002	5003962	1					
ANR	5005905	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	407:3:11172:11214	5003962	0	True				
ANR	5005906	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		5003962	0					
ANR	5005907	Callee	eprintf		5003962	0					
ANR	5005908	Identifier	eprintf		5003962	0					
ANR	5005909	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		5003962	1					
ANR	5005910	Argument	"""RNum ERROR: Division by Zero\\n"""		5003962	0					
ANR	5005911	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		5003962	0					
ANR	5005912	ReturnStatement	return false ;	408:3:11219:11231	5003962	1	True				
ANR	5005913	Identifier	false		5003962	0					
ANR	5005914	ExpressionStatement	n32 = ( ut32 ) ( n & UT32_MAX )	410:2:11239:11266	5003962	7	True				
ANR	5005915	AssignmentExpression	n32 = ( ut32 ) ( n & UT32_MAX )		5003962	0		=			
ANR	5005916	Identifier	n32		5003962	0					
ANR	5005917	CastExpression	( ut32 ) ( n & UT32_MAX )		5003962	1					
ANR	5005918	CastTarget	ut32		5003962	0					
ANR	5005919	BitAndExpression	n & UT32_MAX		5003962	1		&			
ANR	5005920	Identifier	n		5003962	0					
ANR	5005921	Identifier	UT32_MAX		5003962	1					
ANR	5005922	ExpressionStatement	"asnum = r_num_as_string ( NULL , n , false )"	411:2:11270:11310	5003962	8	True				
ANR	5005923	AssignmentExpression	"asnum = r_num_as_string ( NULL , n , false )"		5003962	0		=			
ANR	5005924	Identifier	asnum		5003962	0					
ANR	5005925	CallExpression	"r_num_as_string ( NULL , n , false )"		5003962	1					
ANR	5005926	Callee	r_num_as_string		5003962	0					
ANR	5005927	Identifier	r_num_as_string		5003962	0					
ANR	5005928	ArgumentList	NULL		5003962	1					
ANR	5005929	Argument	NULL		5003962	0					
ANR	5005930	Identifier	NULL		5003962	0					
ANR	5005931	Argument	n		5003962	1					
ANR	5005932	Identifier	n		5003962	0					
ANR	5005933	Argument	false		5003962	2					
ANR	5005934	Identifier	false		5003962	0					
ANR	5005935	ExpressionStatement	"memcpy ( & f , & n32 , sizeof ( f ) )"	412:2:11314:11343	5003962	9	True				
ANR	5005936	CallExpression	"memcpy ( & f , & n32 , sizeof ( f ) )"		5003962	0					
ANR	5005937	Callee	memcpy		5003962	0					
ANR	5005938	Identifier	memcpy		5003962	0					
ANR	5005939	ArgumentList	& f		5003962	1					
ANR	5005940	Argument	& f		5003962	0					
ANR	5005941	UnaryOperationExpression	& f		5003962	0					
ANR	5005942	UnaryOperator	&		5003962	0					
ANR	5005943	Identifier	f		5003962	1					
ANR	5005944	Argument	& n32		5003962	1					
ANR	5005945	UnaryOperationExpression	& n32		5003962	0					
ANR	5005946	UnaryOperator	&		5003962	0					
ANR	5005947	Identifier	n32		5003962	1					
ANR	5005948	Argument	sizeof ( f )		5003962	2					
ANR	5005949	SizeofExpression	sizeof ( f )		5003962	0					
ANR	5005950	Sizeof	sizeof		5003962	0					
ANR	5005951	SizeofOperand	f		5003962	1					
ANR	5005952	ExpressionStatement	"memcpy ( & d , & n , sizeof ( d ) )"	413:2:11347:11374	5003962	10	True				
ANR	5005953	CallExpression	"memcpy ( & d , & n , sizeof ( d ) )"		5003962	0					
ANR	5005954	Callee	memcpy		5003962	0					
ANR	5005955	Identifier	memcpy		5003962	0					
ANR	5005956	ArgumentList	& d		5003962	1					
ANR	5005957	Argument	& d		5003962	0					
ANR	5005958	UnaryOperationExpression	& d		5003962	0					
ANR	5005959	UnaryOperator	&		5003962	0					
ANR	5005960	Identifier	d		5003962	1					
ANR	5005961	Argument	& n		5003962	1					
ANR	5005962	UnaryOperationExpression	& n		5003962	0					
ANR	5005963	UnaryOperator	&		5003962	0					
ANR	5005964	Identifier	n		5003962	1					
ANR	5005965	Argument	sizeof ( d )		5003962	2					
ANR	5005966	SizeofExpression	sizeof ( d )		5003962	0					
ANR	5005967	Sizeof	sizeof		5003962	0					
ANR	5005968	SizeofOperand	d		5003962	1					
ANR	5005969	ExpressionStatement	s = n >> 16 << 12	416:2:11408:11425	5003962	11	True				
ANR	5005970	AssignmentExpression	s = n >> 16 << 12		5003962	0		=			
ANR	5005971	Identifier	s		5003962	0					
ANR	5005972	ShiftExpression	n >> 16 << 12		5003962	1		>>			
ANR	5005973	Identifier	n		5003962	0					
ANR	5005974	ShiftExpression	16 << 12		5003962	1		<<			
ANR	5005975	PrimaryExpression	16		5003962	0					
ANR	5005976	PrimaryExpression	12		5003962	1					
ANR	5005977	ExpressionStatement	a = n & 0x0fff	417:2:11429:11443	5003962	12	True				
ANR	5005978	AssignmentExpression	a = n & 0x0fff		5003962	0		=			
ANR	5005979	Identifier	a		5003962	0					
ANR	5005980	BitAndExpression	n & 0x0fff		5003962	1		&			
ANR	5005981	Identifier	n		5003962	0					
ANR	5005982	PrimaryExpression	0x0fff		5003962	1					
ANR	5005983	ExpressionStatement	"r_num_units ( unit , sizeof ( unit ) , n )"	418:2:11447:11483	5003962	13	True				
ANR	5005984	CallExpression	"r_num_units ( unit , sizeof ( unit ) , n )"		5003962	0					
ANR	5005985	Callee	r_num_units		5003962	0					
ANR	5005986	Identifier	r_num_units		5003962	0					
ANR	5005987	ArgumentList	unit		5003962	1					
ANR	5005988	Argument	unit		5003962	0					
ANR	5005989	Identifier	unit		5003962	0					
ANR	5005990	Argument	sizeof ( unit )		5003962	1					
ANR	5005991	SizeofExpression	sizeof ( unit )		5003962	0					
ANR	5005992	Sizeof	sizeof		5003962	0					
ANR	5005993	SizeofOperand	unit		5003962	1					
ANR	5005994	Argument	n		5003962	2					
ANR	5005995	Identifier	n		5003962	0					
ANR	5005996	Statement	eprintf	420:2:11493:11499	5003962	14	True				
ANR	5005997	Statement	(	420:10:11501:11501	5003962	15	True				
ANR	5005998	Statement	"""%"""	420:11:11502:11504	5003962	16	True				
ANR	5005999	Statement	PFMT64d	420:15:11506:11512	5003962	17	True				
ANR	5006000	Statement	""" 0x%"""	420:23:11514:11519	5003962	18	True				
ANR	5006001	Statement	PFMT64x	420:30:11521:11527	5003962	19	True				
ANR	5006002	Statement	""" 0%"""	420:38:11529:11533	5003962	20	True				
ANR	5006003	Statement	PFMT64o	420:44:11535:11541	5003962	21	True				
ANR	5006004	Statement	""" %s %04x:%04x """	421:3:11546:11561	5003962	22	True				
ANR	5006005	Statement	","	421:19:11562:11562	5003962	23	True				
ANR	5006006	Statement	n	422:3:11567:11567	5003962	24	True				
ANR	5006007	Statement	","	422:4:11568:11568	5003962	25	True				
ANR	5006008	Statement	n	422:6:11570:11570	5003962	26	True				
ANR	5006009	Statement	","	422:7:11571:11571	5003962	27	True				
ANR	5006010	Statement	n	422:9:11573:11573	5003962	28	True				
ANR	5006011	Statement	","	422:10:11574:11574	5003962	29	True				
ANR	5006012	Statement	unit	422:12:11576:11579	5003962	30	True				
ANR	5006013	Statement	","	422:16:11580:11580	5003962	31	True				
ANR	5006014	Statement	s	422:18:11582:11582	5003962	32	True				
ANR	5006015	Statement	","	422:19:11583:11583	5003962	33	True				
ANR	5006016	Statement	a	422:21:11585:11585	5003962	34	True				
ANR	5006017	Statement	)	422:22:11586:11586	5003962	35	True				
ANR	5006018	ExpressionStatement		422:23:11587:11587	5003962	36	True				
ANR	5006019	IfStatement	if ( n >> 32 )		5003962	37					
ANR	5006020	Condition	n >> 32	424:6:11596:11602	5003962	0	True				
ANR	5006021	ShiftExpression	n >> 32		5003962	0		>>			
ANR	5006022	Identifier	n		5003962	0					
ANR	5006023	PrimaryExpression	32		5003962	1					
ANR	5006024	CompoundStatement		301:15:7440:7440	5003962	1					
ANR	5006025	Statement	eprintf	425:3:11610:11616	5003962	0	True				
ANR	5006026	Statement	(	425:11:11618:11618	5003962	1	True				
ANR	5006027	Statement	"""%"""	425:12:11619:11621	5003962	2	True				
ANR	5006028	Statement	PFMT64d	425:16:11623:11629	5003962	3	True				
ANR	5006029	Statement	""" """	425:24:11631:11633	5003962	4	True				
ANR	5006030	Statement	","	425:27:11634:11634	5003962	5	True				
ANR	5006031	Statement	(	425:29:11636:11636	5003962	6	True				
ANR	5006032	Statement	st64	425:30:11637:11640	5003962	7	True				
ANR	5006033	Statement	)	425:34:11641:11641	5003962	8	True				
ANR	5006034	Statement	n	425:36:11643:11643	5003962	9	True				
ANR	5006035	Statement	)	425:37:11644:11644	5003962	10	True				
ANR	5006036	ExpressionStatement		425:38:11645:11645	5003962	11	True				
ANR	5006037	ElseStatement	else		5003962	0					
ANR	5006038	CompoundStatement		303:9:7491:7491	5003962	0					
ANR	5006039	ExpressionStatement	"eprintf ( ""%d "" , ( st32 ) n )"	427:3:11661:11686	5003962	0	True				
ANR	5006040	CallExpression	"eprintf ( ""%d "" , ( st32 ) n )"		5003962	0					
ANR	5006041	Callee	eprintf		5003962	0					
ANR	5006042	Identifier	eprintf		5003962	0					
ANR	5006043	ArgumentList	"""%d """		5003962	1					
ANR	5006044	Argument	"""%d """		5003962	0					
ANR	5006045	PrimaryExpression	"""%d """		5003962	0					
ANR	5006046	Argument	( st32 ) n		5003962	1					
ANR	5006047	CastExpression	( st32 ) n		5003962	0					
ANR	5006048	CastTarget	st32		5003962	0					
ANR	5006049	Identifier	n		5003962	1					
ANR	5006050	IfStatement	if ( asnum )		5003962	38					
ANR	5006051	Condition	asnum	429:6:11698:11702	5003962	0	True				
ANR	5006052	Identifier	asnum		5003962	0					
ANR	5006053	CompoundStatement		306:13:7540:7540	5003962	1					
ANR	5006054	ExpressionStatement	"eprintf ( ""\\""%s\\"" "" , asnum )"	430:3:11710:11736	5003962	0	True				
ANR	5006055	CallExpression	"eprintf ( ""\\""%s\\"" "" , asnum )"		5003962	0					
ANR	5006056	Callee	eprintf		5003962	0					
ANR	5006057	Identifier	eprintf		5003962	0					
ANR	5006058	ArgumentList	"""\\""%s\\"" """		5003962	1					
ANR	5006059	Argument	"""\\""%s\\"" """		5003962	0					
ANR	5006060	PrimaryExpression	"""\\""%s\\"" """		5003962	0					
ANR	5006061	Argument	asnum		5003962	1					
ANR	5006062	Identifier	asnum		5003962	0					
ANR	5006063	ExpressionStatement	free ( asnum )	431:3:11741:11753	5003962	1	True				
ANR	5006064	CallExpression	free ( asnum )		5003962	0					
ANR	5006065	Callee	free		5003962	0					
ANR	5006066	Identifier	free		5003962	0					
ANR	5006067	ArgumentList	asnum		5003962	1					
ANR	5006068	Argument	asnum		5003962	0					
ANR	5006069	Identifier	asnum		5003962	0					
ANR	5006070	ExpressionStatement	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) , NULL )"	434:2:11795:11847	5003962	39	True				
ANR	5006071	CallExpression	"r_str_bits ( out , ( const ut8 * ) & n , sizeof ( n ) , NULL )"		5003962	0					
ANR	5006072	Callee	r_str_bits		5003962	0					
ANR	5006073	Identifier	r_str_bits		5003962	0					
ANR	5006074	ArgumentList	out		5003962	1					
ANR	5006075	Argument	out		5003962	0					
ANR	5006076	Identifier	out		5003962	0					
ANR	5006077	Argument	( const ut8 * ) & n		5003962	1					
ANR	5006078	CastExpression	( const ut8 * ) & n		5003962	0					
ANR	5006079	CastTarget	const ut8 *		5003962	0					
ANR	5006080	UnaryOperationExpression	& n		5003962	1					
ANR	5006081	UnaryOperator	&		5003962	0					
ANR	5006082	Identifier	n		5003962	1					
ANR	5006083	Argument	sizeof ( n )		5003962	2					
ANR	5006084	SizeofExpression	sizeof ( n )		5003962	0					
ANR	5006085	Sizeof	sizeof		5003962	0					
ANR	5006086	SizeofOperand	n		5003962	1					
ANR	5006087	Argument	NULL		5003962	3					
ANR	5006088	Identifier	NULL		5003962	0					
ANR	5006089	ExpressionStatement	"eprintf ( ""%s %.01lf %ff %lf\\n"" , out , num -> fvalue , f , d )"	435:2:11851:11909	5003962	40	True				
ANR	5006090	CallExpression	"eprintf ( ""%s %.01lf %ff %lf\\n"" , out , num -> fvalue , f , d )"		5003962	0					
ANR	5006091	Callee	eprintf		5003962	0					
ANR	5006092	Identifier	eprintf		5003962	0					
ANR	5006093	ArgumentList	"""%s %.01lf %ff %lf\\n"""		5003962	1					
ANR	5006094	Argument	"""%s %.01lf %ff %lf\\n"""		5003962	0					
ANR	5006095	PrimaryExpression	"""%s %.01lf %ff %lf\\n"""		5003962	0					
ANR	5006096	Argument	out		5003962	1					
ANR	5006097	Identifier	out		5003962	0					
ANR	5006098	Argument	num -> fvalue		5003962	2					
ANR	5006099	PtrMemberAccess	num -> fvalue		5003962	0					
ANR	5006100	Identifier	num		5003962	0					
ANR	5006101	Identifier	fvalue		5003962	1					
ANR	5006102	Argument	f		5003962	3					
ANR	5006103	Identifier	f		5003962	0					
ANR	5006104	Argument	d		5003962	4					
ANR	5006105	Identifier	d		5003962	0					
ANR	5006106	Statement	printf	438:4:11922:11927	5003962	41	True				
ANR	5006107	Statement	(	438:11:11929:11929	5003962	42	True				
ANR	5006108	Statement	"""hex     0x%"""	438:12:11930:11942	5003962	43	True				
ANR	5006109	Statement	PFMT64x	438:25:11943:11949	5003962	44	True				
ANR	5006110	Statement	"""\\n"""	438:32:11950:11953	5003962	45	True				
ANR	5006111	Statement	","	438:36:11954:11954	5003962	46	True				
ANR	5006112	Statement	n	438:38:11956:11956	5003962	47	True				
ANR	5006113	Statement	)	438:39:11957:11957	5003962	48	True				
ANR	5006114	ExpressionStatement		438:40:11958:11958	5003962	49	True				
ANR	5006115	Statement	printf	439:4:11964:11969	5003962	50	True				
ANR	5006116	Statement	(	439:11:11971:11971	5003962	51	True				
ANR	5006117	Statement	"""octal   0%"""	439:12:11972:11983	5003962	52	True				
ANR	5006118	Statement	PFMT64o	439:24:11984:11990	5003962	53	True				
ANR	5006119	Statement	"""\\n"""	439:31:11991:11994	5003962	54	True				
ANR	5006120	Statement	","	439:35:11995:11995	5003962	55	True				
ANR	5006121	Statement	n	439:37:11997:11997	5003962	56	True				
ANR	5006122	Statement	)	439:38:11998:11998	5003962	57	True				
ANR	5006123	ExpressionStatement		439:39:11999:11999	5003962	58	True				
ANR	5006124	ExpressionStatement	"printf ( ""unit    %s\\n"" , unit )"	440:4:12005:12034	5003962	59	True				
ANR	5006125	CallExpression	"printf ( ""unit    %s\\n"" , unit )"		5003962	0					
ANR	5006126	Callee	printf		5003962	0					
ANR	5006127	Identifier	printf		5003962	0					
ANR	5006128	ArgumentList	"""unit    %s\\n"""		5003962	1					
ANR	5006129	Argument	"""unit    %s\\n"""		5003962	0					
ANR	5006130	PrimaryExpression	"""unit    %s\\n"""		5003962	0					
ANR	5006131	Argument	unit		5003962	1					
ANR	5006132	Identifier	unit		5003962	0					
ANR	5006133	ExpressionStatement	"printf ( ""segment %04x:%04x\\n"" , s , a )"	441:4:12040:12076	5003962	60	True				
ANR	5006134	CallExpression	"printf ( ""segment %04x:%04x\\n"" , s , a )"		5003962	0					
ANR	5006135	Callee	printf		5003962	0					
ANR	5006136	Identifier	printf		5003962	0					
ANR	5006137	ArgumentList	"""segment %04x:%04x\\n"""		5003962	1					
ANR	5006138	Argument	"""segment %04x:%04x\\n"""		5003962	0					
ANR	5006139	PrimaryExpression	"""segment %04x:%04x\\n"""		5003962	0					
ANR	5006140	Argument	s		5003962	1					
ANR	5006141	Identifier	s		5003962	0					
ANR	5006142	Argument	a		5003962	2					
ANR	5006143	Identifier	a		5003962	0					
ANR	5006144	IfStatement	if ( n >> 32 )		5003962	61					
ANR	5006145	Condition	n >> 32	442:8:12086:12092	5003962	0	True				
ANR	5006146	ShiftExpression	n >> 32		5003962	0		>>			
ANR	5006147	Identifier	n		5003962	0					
ANR	5006148	PrimaryExpression	32		5003962	1					
ANR	5006149	CompoundStatement		319:17:7930:7930	5003962	1					
ANR	5006150	Statement	printf	443:5:12102:12107	5003962	0	True				
ANR	5006151	Statement	(	443:12:12109:12109	5003962	1	True				
ANR	5006152	Statement	"""int64   %"""	443:13:12110:12120	5003962	2	True				
ANR	5006153	Statement	PFMT64d	443:24:12121:12127	5003962	3	True				
ANR	5006154	Statement	"""\\n"""	443:31:12128:12131	5003962	4	True				
ANR	5006155	Statement	","	443:35:12132:12132	5003962	5	True				
ANR	5006156	Statement	(	443:37:12134:12134	5003962	6	True				
ANR	5006157	Statement	st64	443:38:12135:12138	5003962	7	True				
ANR	5006158	Statement	)	443:42:12139:12139	5003962	8	True				
ANR	5006159	Statement	n	443:43:12140:12140	5003962	9	True				
ANR	5006160	Statement	)	443:44:12141:12141	5003962	10	True				
ANR	5006161	ExpressionStatement		443:45:12142:12142	5003962	11	True				
ANR	5006162	ElseStatement	else		5003962	0					
ANR	5006163	CompoundStatement		321:11:7990:7990	5003962	0					
ANR	5006164	ExpressionStatement	"printf ( ""int32   %d\\n"" , ( st32 ) n )"	445:5:12162:12194	5003962	0	True				
ANR	5006165	CallExpression	"printf ( ""int32   %d\\n"" , ( st32 ) n )"		5003962	0					
ANR	5006166	Callee	printf		5003962	0					
ANR	5006167	Identifier	printf		5003962	0					
ANR	5006168	ArgumentList	"""int32   %d\\n"""		5003962	1					
ANR	5006169	Argument	"""int32   %d\\n"""		5003962	0					
ANR	5006170	PrimaryExpression	"""int32   %d\\n"""		5003962	0					
ANR	5006171	Argument	( st32 ) n		5003962	1					
ANR	5006172	CastExpression	( st32 ) n		5003962	0					
ANR	5006173	CastTarget	st32		5003962	0					
ANR	5006174	Identifier	n		5003962	1					
ANR	5006175	IfStatement	if ( asnum )		5003962	62					
ANR	5006176	Condition	asnum	447:8:12210:12214	5003962	0	True				
ANR	5006177	Identifier	asnum		5003962	0					
ANR	5006178	CompoundStatement		324:15:8052:8052	5003962	1					
ANR	5006179	ExpressionStatement	"printf ( ""string  \\""%s\\""\\n"" , asnum )"	448:5:12224:12258	5003962	0	True				
ANR	5006180	CallExpression	"printf ( ""string  \\""%s\\""\\n"" , asnum )"		5003962	0					
ANR	5006181	Callee	printf		5003962	0					
ANR	5006182	Identifier	printf		5003962	0					
ANR	5006183	ArgumentList	"""string  \\""%s\\""\\n"""		5003962	1					
ANR	5006184	Argument	"""string  \\""%s\\""\\n"""		5003962	0					
ANR	5006185	PrimaryExpression	"""string  \\""%s\\""\\n"""		5003962	0					
ANR	5006186	Argument	asnum		5003962	1					
ANR	5006187	Identifier	asnum		5003962	0					
ANR	5006188	ExpressionStatement	free ( asnum )	449:5:12265:12277	5003962	1	True				
ANR	5006189	CallExpression	free ( asnum )		5003962	0					
ANR	5006190	Callee	free		5003962	0					
ANR	5006191	Identifier	free		5003962	0					
ANR	5006192	ArgumentList	asnum		5003962	1					
ANR	5006193	Argument	asnum		5003962	0					
ANR	5006194	Identifier	asnum		5003962	0					
ANR	5006195	ExpressionStatement	"r_str_bits64 ( out , n )"	452:4:12325:12346	5003962	63	True				
ANR	5006196	CallExpression	"r_str_bits64 ( out , n )"		5003962	0					
ANR	5006197	Callee	r_str_bits64		5003962	0					
ANR	5006198	Identifier	r_str_bits64		5003962	0					
ANR	5006199	ArgumentList	out		5003962	1					
ANR	5006200	Argument	out		5003962	0					
ANR	5006201	Identifier	out		5003962	0					
ANR	5006202	Argument	n		5003962	1					
ANR	5006203	Identifier	n		5003962	0					
ANR	5006204	ExpressionStatement	"memcpy ( & f , & n , sizeof ( f ) )"	453:4:12352:12379	5003962	64	True				
ANR	5006205	CallExpression	"memcpy ( & f , & n , sizeof ( f ) )"		5003962	0					
ANR	5006206	Callee	memcpy		5003962	0					
ANR	5006207	Identifier	memcpy		5003962	0					
ANR	5006208	ArgumentList	& f		5003962	1					
ANR	5006209	Argument	& f		5003962	0					
ANR	5006210	UnaryOperationExpression	& f		5003962	0					
ANR	5006211	UnaryOperator	&		5003962	0					
ANR	5006212	Identifier	f		5003962	1					
ANR	5006213	Argument	& n		5003962	1					
ANR	5006214	UnaryOperationExpression	& n		5003962	0					
ANR	5006215	UnaryOperator	&		5003962	0					
ANR	5006216	Identifier	n		5003962	1					
ANR	5006217	Argument	sizeof ( f )		5003962	2					
ANR	5006218	SizeofExpression	sizeof ( f )		5003962	0					
ANR	5006219	Sizeof	sizeof		5003962	0					
ANR	5006220	SizeofOperand	f		5003962	1					
ANR	5006221	ExpressionStatement	"memcpy ( & d , & n , sizeof ( d ) )"	454:4:12385:12412	5003962	65	True				
ANR	5006222	CallExpression	"memcpy ( & d , & n , sizeof ( d ) )"		5003962	0					
ANR	5006223	Callee	memcpy		5003962	0					
ANR	5006224	Identifier	memcpy		5003962	0					
ANR	5006225	ArgumentList	& d		5003962	1					
ANR	5006226	Argument	& d		5003962	0					
ANR	5006227	UnaryOperationExpression	& d		5003962	0					
ANR	5006228	UnaryOperator	&		5003962	0					
ANR	5006229	Identifier	d		5003962	1					
ANR	5006230	Argument	& n		5003962	1					
ANR	5006231	UnaryOperationExpression	& n		5003962	0					
ANR	5006232	UnaryOperator	&		5003962	0					
ANR	5006233	Identifier	n		5003962	1					
ANR	5006234	Argument	sizeof ( d )		5003962	2					
ANR	5006235	SizeofExpression	sizeof ( d )		5003962	0					
ANR	5006236	Sizeof	sizeof		5003962	0					
ANR	5006237	SizeofOperand	d		5003962	1					
ANR	5006238	ExpressionStatement	"printf ( ""binary  0b%s\\n"" , out )"	455:4:12418:12448	5003962	66	True				
ANR	5006239	CallExpression	"printf ( ""binary  0b%s\\n"" , out )"		5003962	0					
ANR	5006240	Callee	printf		5003962	0					
ANR	5006241	Identifier	printf		5003962	0					
ANR	5006242	ArgumentList	"""binary  0b%s\\n"""		5003962	1					
ANR	5006243	Argument	"""binary  0b%s\\n"""		5003962	0					
ANR	5006244	PrimaryExpression	"""binary  0b%s\\n"""		5003962	0					
ANR	5006245	Argument	out		5003962	1					
ANR	5006246	Identifier	out		5003962	0					
ANR	5006247	ExpressionStatement	"printf ( ""float:  %ff\\n"" , f )"	456:4:12454:12481	5003962	67	True				
ANR	5006248	CallExpression	"printf ( ""float:  %ff\\n"" , f )"		5003962	0					
ANR	5006249	Callee	printf		5003962	0					
ANR	5006250	Identifier	printf		5003962	0					
ANR	5006251	ArgumentList	"""float:  %ff\\n"""		5003962	1					
ANR	5006252	Argument	"""float:  %ff\\n"""		5003962	0					
ANR	5006253	PrimaryExpression	"""float:  %ff\\n"""		5003962	0					
ANR	5006254	Argument	f		5003962	1					
ANR	5006255	Identifier	f		5003962	0					
ANR	5006256	ExpressionStatement	"printf ( ""double: %lf\\n"" , d )"	457:4:12487:12514	5003962	68	True				
ANR	5006257	CallExpression	"printf ( ""double: %lf\\n"" , d )"		5003962	0					
ANR	5006258	Callee	printf		5003962	0					
ANR	5006259	Identifier	printf		5003962	0					
ANR	5006260	ArgumentList	"""double: %lf\\n"""		5003962	1					
ANR	5006261	Argument	"""double: %lf\\n"""		5003962	0					
ANR	5006262	PrimaryExpression	"""double: %lf\\n"""		5003962	0					
ANR	5006263	Argument	d		5003962	1					
ANR	5006264	Identifier	d		5003962	0					
ANR	5006265	ExpressionStatement	"r_num_to_trits ( out , n )"	460:4:12539:12562	5003962	69	True				
ANR	5006266	CallExpression	"r_num_to_trits ( out , n )"		5003962	0					
ANR	5006267	Callee	r_num_to_trits		5003962	0					
ANR	5006268	Identifier	r_num_to_trits		5003962	0					
ANR	5006269	ArgumentList	out		5003962	1					
ANR	5006270	Argument	out		5003962	0					
ANR	5006271	Identifier	out		5003962	0					
ANR	5006272	Argument	n		5003962	1					
ANR	5006273	Identifier	n		5003962	0					
ANR	5006274	ExpressionStatement	"printf ( ""trits   0t%s\\n"" , out )"	461:4:12568:12598	5003962	70	True				
ANR	5006275	CallExpression	"printf ( ""trits   0t%s\\n"" , out )"		5003962	0					
ANR	5006276	Callee	printf		5003962	0					
ANR	5006277	Identifier	printf		5003962	0					
ANR	5006278	ArgumentList	"""trits   0t%s\\n"""		5003962	1					
ANR	5006279	Argument	"""trits   0t%s\\n"""		5003962	0					
ANR	5006280	PrimaryExpression	"""trits   0t%s\\n"""		5003962	0					
ANR	5006281	Argument	out		5003962	1					
ANR	5006282	Identifier	out		5003962	0					
ANR	5006283	ReturnStatement	return true ;	463:2:12603:12614	5003962	71	True				
ANR	5006284	Identifier	true		5003962	0					
ANR	5006285	ElseStatement	else		5003962	0					
ANR	5006286	IfStatement	if ( flags & ( 1 << 19 ) )		5003962	0					
ANR	5006287	Condition	flags & ( 1 << 19 )	464:12:12628:12644	5003962	0	True				
ANR	5006288	BitAndExpression	flags & ( 1 << 19 )		5003962	0		&			
ANR	5006289	Identifier	flags		5003962	0					
ANR	5006290	ShiftExpression	1 << 19		5003962	1		<<			
ANR	5006291	PrimaryExpression	1		5003962	0					
ANR	5006292	PrimaryExpression	19		5003962	1					
ANR	5006293	CompoundStatement		341:31:8482:8482	5003962	1					
ANR	5006294	ExpressionStatement	"r_print_hex_from_bin ( NULL , str )"	465:2:12657:12689	5003962	0	True				
ANR	5006295	CallExpression	"r_print_hex_from_bin ( NULL , str )"		5003962	0					
ANR	5006296	Callee	r_print_hex_from_bin		5003962	0					
ANR	5006297	Identifier	r_print_hex_from_bin		5003962	0					
ANR	5006298	ArgumentList	NULL		5003962	1					
ANR	5006299	Argument	NULL		5003962	0					
ANR	5006300	Identifier	NULL		5003962	0					
ANR	5006301	Argument	str		5003962	1					
ANR	5006302	Identifier	str		5003962	0					
ANR	5006303	ReturnStatement	return true ;	466:2:12693:12704	5003962	1	True				
ANR	5006304	Identifier	true		5003962	0					
ANR	5006305	ElseStatement	else		5003962	0					
ANR	5006306	IfStatement	if ( flags & ( 1 << 21 ) )		5003962	0					
ANR	5006307	Condition	flags & ( 1 << 21 )	467:12:12718:12734	5003962	0	True				
ANR	5006308	BitAndExpression	flags & ( 1 << 21 )		5003962	0		&			
ANR	5006309	Identifier	flags		5003962	0					
ANR	5006310	ShiftExpression	1 << 21		5003962	1		<<			
ANR	5006311	PrimaryExpression	1		5003962	0					
ANR	5006312	PrimaryExpression	21		5003962	1					
ANR	5006313	CompoundStatement		348:2:8701:8728	5003962	1					
ANR	5006314	Statement	static	468:2:12747:12752	5003962	0	True				
ANR	5006315	IdentifierDeclStatement	"const char start [ ] = ""unsigned char buf[] = {"" ;"	468:9:12754:12800	5003962	1	True				
ANR	5006316	IdentifierDecl	"start [ ] = ""unsigned char buf[] = {"""		5003962	0					
ANR	5006317	IdentifierDeclType	const char [ ]		5003962	0					
ANR	5006318	Identifier	start		5003962	1					
ANR	5006319	AssignmentExpression	"start [ ] = ""unsigned char buf[] = {"""		5003962	2		=			
ANR	5006320	Identifier	start		5003962	0					
ANR	5006321	PrimaryExpression	"""unsigned char buf[] = {"""		5003962	1					
ANR	5006322	ExpressionStatement	printf ( start )	469:2:12804:12818	5003962	2	True				
ANR	5006323	CallExpression	printf ( start )		5003962	0					
ANR	5006324	Callee	printf		5003962	0					
ANR	5006325	Identifier	printf		5003962	0					
ANR	5006326	ArgumentList	start		5003962	1					
ANR	5006327	Argument	start		5003962	0					
ANR	5006328	Identifier	start		5003962	0					
ANR	5006329	IdentifierDeclStatement	const int byte_per_col = 12 ;	471:2:12866:12893	5003962	3	True				
ANR	5006330	IdentifierDecl	byte_per_col = 12		5003962	0					
ANR	5006331	IdentifierDeclType	const int		5003962	0					
ANR	5006332	Identifier	byte_per_col		5003962	1					
ANR	5006333	AssignmentExpression	byte_per_col = 12		5003962	2		=			
ANR	5006334	Identifier	byte_per_col		5003962	0					
ANR	5006335	PrimaryExpression	12		5003962	1					
ANR	5006336	ForStatement	for ( i = 0 ; i < len - 1 ; i ++ )		5003962	4					
ANR	5006337	ForInit	i = 0 ;	472:7:12902:12907	5003962	0	True				
ANR	5006338	AssignmentExpression	i = 0		5003962	0		=			
ANR	5006339	Identifier	i		5003962	0					
ANR	5006340	PrimaryExpression	0		5003962	1					
ANR	5006341	Condition	i < len - 1	472:14:12909:12917	5003962	1	True				
ANR	5006342	RelationalExpression	i < len - 1		5003962	0		<			
ANR	5006343	Identifier	i		5003962	0					
ANR	5006344	AdditiveExpression	len - 1		5003962	1		-			
ANR	5006345	Identifier	len		5003962	0					
ANR	5006346	PrimaryExpression	1		5003962	1					
ANR	5006347	PostIncDecOperationExpression	i ++	472:25:12920:12922	5003962	2	True				
ANR	5006348	Identifier	i		5003962	0					
ANR	5006349	IncDec	++		5003962	1					
ANR	5006350	CompoundStatement		349:30:8760:8760	5003962	3					
ANR	5006351	IfStatement	if ( i % byte_per_col == 0 )		5003962	0					
ANR	5006352	Condition	i % byte_per_col == 0	474:7:12966:12986	5003962	0	True				
ANR	5006353	EqualityExpression	i % byte_per_col == 0		5003962	0		==			
ANR	5006354	MultiplicativeExpression	i % byte_per_col		5003962	0		%			
ANR	5006355	Identifier	i		5003962	0					
ANR	5006356	Identifier	byte_per_col		5003962	1					
ANR	5006357	PrimaryExpression	0		5003962	1					
ANR	5006358	CompoundStatement		351:30:8824:8824	5003962	1					
ANR	5006359	ExpressionStatement	"printf ( ""\\n  "" )"	475:4:12995:13010	5003962	0	True				
ANR	5006360	CallExpression	"printf ( ""\\n  "" )"		5003962	0					
ANR	5006361	Callee	printf		5003962	0					
ANR	5006362	Identifier	printf		5003962	0					
ANR	5006363	ArgumentList	"""\\n  """		5003962	1					
ANR	5006364	Argument	"""\\n  """		5003962	0					
ANR	5006365	PrimaryExpression	"""\\n  """		5003962	0					
ANR	5006366	ExpressionStatement	"printf ( ""0x%02x, "" , ( ut8 ) str [ i ] )"	477:3:13020:13053	5003962	1	True				
ANR	5006367	CallExpression	"printf ( ""0x%02x, "" , ( ut8 ) str [ i ] )"		5003962	0					
ANR	5006368	Callee	printf		5003962	0					
ANR	5006369	Identifier	printf		5003962	0					
ANR	5006370	ArgumentList	"""0x%02x, """		5003962	1					
ANR	5006371	Argument	"""0x%02x, """		5003962	0					
ANR	5006372	PrimaryExpression	"""0x%02x, """		5003962	0					
ANR	5006373	Argument	( ut8 ) str [ i ]		5003962	1					
ANR	5006374	CastExpression	( ut8 ) str [ i ]		5003962	0					
ANR	5006375	CastTarget	ut8		5003962	0					
ANR	5006376	ArrayIndexing	str [ i ]		5003962	1					
ANR	5006377	Identifier	str		5003962	0					
ANR	5006378	Identifier	i		5003962	1					
ANR	5006379	IfStatement	if ( i % byte_per_col == 0 )		5003962	5					
ANR	5006380	Condition	i % byte_per_col == 0	480:6:13104:13124	5003962	0	True				
ANR	5006381	EqualityExpression	i % byte_per_col == 0		5003962	0		==			
ANR	5006382	MultiplicativeExpression	i % byte_per_col		5003962	0		%			
ANR	5006383	Identifier	i		5003962	0					
ANR	5006384	Identifier	byte_per_col		5003962	1					
ANR	5006385	PrimaryExpression	0		5003962	1					
ANR	5006386	CompoundStatement		357:29:8962:8962	5003962	1					
ANR	5006387	ExpressionStatement	"printf ( ""\\n  "" )"	481:3:13132:13146	5003962	0	True				
ANR	5006388	CallExpression	"printf ( ""\\n  "" )"		5003962	0					
ANR	5006389	Callee	printf		5003962	0					
ANR	5006390	Identifier	printf		5003962	0					
ANR	5006391	ArgumentList	"""\\n  """		5003962	1					
ANR	5006392	Argument	"""\\n  """		5003962	0					
ANR	5006393	PrimaryExpression	"""\\n  """		5003962	0					
ANR	5006394	ExpressionStatement	"printf ( ""0x%02x\\n"" , ( ut8 ) str [ len - 1 ] )"	483:2:13154:13191	5003962	6	True				
ANR	5006395	CallExpression	"printf ( ""0x%02x\\n"" , ( ut8 ) str [ len - 1 ] )"		5003962	0					
ANR	5006396	Callee	printf		5003962	0					
ANR	5006397	Identifier	printf		5003962	0					
ANR	5006398	ArgumentList	"""0x%02x\\n"""		5003962	1					
ANR	5006399	Argument	"""0x%02x\\n"""		5003962	0					
ANR	5006400	PrimaryExpression	"""0x%02x\\n"""		5003962	0					
ANR	5006401	Argument	( ut8 ) str [ len - 1 ]		5003962	1					
ANR	5006402	CastExpression	( ut8 ) str [ len - 1 ]		5003962	0					
ANR	5006403	CastTarget	ut8		5003962	0					
ANR	5006404	ArrayIndexing	str [ len - 1 ]		5003962	1					
ANR	5006405	Identifier	str		5003962	0					
ANR	5006406	AdditiveExpression	len - 1		5003962	1		-			
ANR	5006407	Identifier	len		5003962	0					
ANR	5006408	PrimaryExpression	1		5003962	1					
ANR	5006409	ExpressionStatement	"printf ( ""};\\n"" )"	484:2:13195:13210	5003962	7	True				
ANR	5006410	CallExpression	"printf ( ""};\\n"" )"		5003962	0					
ANR	5006411	Callee	printf		5003962	0					
ANR	5006412	Identifier	printf		5003962	0					
ANR	5006413	ArgumentList	"""};\\n"""		5003962	1					
ANR	5006414	Argument	"""};\\n"""		5003962	0					
ANR	5006415	PrimaryExpression	"""};\\n"""		5003962	0					
ANR	5006416	ExpressionStatement	"printf ( ""unsigned int buf_len = %d;\\n"" , len )"	485:2:13214:13258	5003962	8	True				
ANR	5006417	CallExpression	"printf ( ""unsigned int buf_len = %d;\\n"" , len )"		5003962	0					
ANR	5006418	Callee	printf		5003962	0					
ANR	5006419	Identifier	printf		5003962	0					
ANR	5006420	ArgumentList	"""unsigned int buf_len = %d;\\n"""		5003962	1					
ANR	5006421	Argument	"""unsigned int buf_len = %d;\\n"""		5003962	0					
ANR	5006422	PrimaryExpression	"""unsigned int buf_len = %d;\\n"""		5003962	0					
ANR	5006423	Argument	len		5003962	1					
ANR	5006424	Identifier	len		5003962	0					
ANR	5006425	ReturnStatement	return true ;	486:2:13262:13273	5003962	9	True				
ANR	5006426	Identifier	true		5003962	0					
ANR	5006427	ElseStatement	else		5003962	0					
ANR	5006428	IfStatement	if ( flags & ( 1 << 22 ) )		5003962	0					
ANR	5006429	Condition	flags & ( 1 << 22 )	487:12:13287:13303	5003962	0	True				
ANR	5006430	BitAndExpression	flags & ( 1 << 22 )		5003962	0		&			
ANR	5006431	Identifier	flags		5003962	0					
ANR	5006432	ShiftExpression	1 << 22		5003962	1		<<			
ANR	5006433	PrimaryExpression	1		5003962	0					
ANR	5006434	PrimaryExpression	22		5003962	1					
ANR	5006435	CompoundStatement		376:2:9369:9408	5003962	1					
ANR	5006436	IdentifierDeclStatement	"char * asnum , * modified_str ;"	490:2:13353:13379	5003962	0	True				
ANR	5006437	IdentifierDecl	* asnum		5003962	0					
ANR	5006438	IdentifierDeclType	char *		5003962	0					
ANR	5006439	Identifier	asnum		5003962	1					
ANR	5006440	IdentifierDecl	* modified_str		5003962	1					
ANR	5006441	IdentifierDeclType	char *		5003962	0					
ANR	5006442	Identifier	modified_str		5003962	1					
ANR	5006443	IfStatement	if ( * str != '0' )		5003962	1					
ANR	5006444	Condition	* str != '0'	493:6:13422:13432	5003962	0	True				
ANR	5006445	EqualityExpression	* str != '0'		5003962	0		!=			
ANR	5006446	UnaryOperationExpression	* str		5003962	0					
ANR	5006447	UnaryOperator	*		5003962	0					
ANR	5006448	Identifier	str		5003962	1					
ANR	5006449	PrimaryExpression	'0'		5003962	1					
ANR	5006450	CompoundStatement		370:19:9270:9270	5003962	1					
ANR	5006451	ExpressionStatement	"modified_str = r_str_newf ( ""0%s"" , str )"	494:3:13440:13478	5003962	0	True				
ANR	5006452	AssignmentExpression	"modified_str = r_str_newf ( ""0%s"" , str )"		5003962	0		=			
ANR	5006453	Identifier	modified_str		5003962	0					
ANR	5006454	CallExpression	"r_str_newf ( ""0%s"" , str )"		5003962	1					
ANR	5006455	Callee	r_str_newf		5003962	0					
ANR	5006456	Identifier	r_str_newf		5003962	0					
ANR	5006457	ArgumentList	"""0%s"""		5003962	1					
ANR	5006458	Argument	"""0%s"""		5003962	0					
ANR	5006459	PrimaryExpression	"""0%s"""		5003962	0					
ANR	5006460	Argument	str		5003962	1					
ANR	5006461	Identifier	str		5003962	0					
ANR	5006462	ElseStatement	else		5003962	0					
ANR	5006463	CompoundStatement		372:9:9324:9324	5003962	0					
ANR	5006464	ExpressionStatement	modified_str = r_str_newf ( str )	496:3:13494:13525	5003962	0	True				
ANR	5006465	AssignmentExpression	modified_str = r_str_newf ( str )		5003962	0		=			
ANR	5006466	Identifier	modified_str		5003962	0					
ANR	5006467	CallExpression	r_str_newf ( str )		5003962	1					
ANR	5006468	Callee	r_str_newf		5003962	0					
ANR	5006469	Identifier	r_str_newf		5003962	0					
ANR	5006470	ArgumentList	str		5003962	1					
ANR	5006471	Argument	str		5003962	0					
ANR	5006472	Identifier	str		5003962	0					
ANR	5006473	IdentifierDeclStatement	"ut64 n = r_num_math ( num , modified_str ) ;"	499:2:13534:13573	5003962	2	True				
ANR	5006474	IdentifierDecl	"n = r_num_math ( num , modified_str )"		5003962	0					
ANR	5006475	IdentifierDeclType	ut64		5003962	0					
ANR	5006476	Identifier	n		5003962	1					
ANR	5006477	AssignmentExpression	"n = r_num_math ( num , modified_str )"		5003962	2		=			
ANR	5006478	Identifier	n		5003962	0					
ANR	5006479	CallExpression	"r_num_math ( num , modified_str )"		5003962	1					
ANR	5006480	Callee	r_num_math		5003962	0					
ANR	5006481	Identifier	r_num_math		5003962	0					
ANR	5006482	ArgumentList	num		5003962	1					
ANR	5006483	Argument	num		5003962	0					
ANR	5006484	Identifier	num		5003962	0					
ANR	5006485	Argument	modified_str		5003962	1					
ANR	5006486	Identifier	modified_str		5003962	0					
ANR	5006487	ExpressionStatement	free ( modified_str )	500:2:13577:13596	5003962	3	True				
ANR	5006488	CallExpression	free ( modified_str )		5003962	0					
ANR	5006489	Callee	free		5003962	0					
ANR	5006490	Identifier	free		5003962	0					
ANR	5006491	ArgumentList	modified_str		5003962	1					
ANR	5006492	Argument	modified_str		5003962	0					
ANR	5006493	Identifier	modified_str		5003962	0					
ANR	5006494	IfStatement	if ( num -> dbz )		5003962	4					
ANR	5006495	Condition	num -> dbz	501:6:13604:13611	5003962	0	True				
ANR	5006496	PtrMemberAccess	num -> dbz		5003962	0					
ANR	5006497	Identifier	num		5003962	0					
ANR	5006498	Identifier	dbz		5003962	1					
ANR	5006499	CompoundStatement		378:16:9449:9449	5003962	1					
ANR	5006500	ExpressionStatement	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"	502:3:13619:13661	5003962	0	True				
ANR	5006501	CallExpression	"eprintf ( ""RNum ERROR: Division by Zero\\n"" )"		5003962	0					
ANR	5006502	Callee	eprintf		5003962	0					
ANR	5006503	Identifier	eprintf		5003962	0					
ANR	5006504	ArgumentList	"""RNum ERROR: Division by Zero\\n"""		5003962	1					
ANR	5006505	Argument	"""RNum ERROR: Division by Zero\\n"""		5003962	0					
ANR	5006506	PrimaryExpression	"""RNum ERROR: Division by Zero\\n"""		5003962	0					
ANR	5006507	ReturnStatement	return false ;	503:3:13666:13678	5003962	1	True				
ANR	5006508	Identifier	false		5003962	0					
ANR	5006509	ExpressionStatement	"asnum = r_num_as_string ( NULL , n , false )"	506:2:13687:13727	5003962	5	True				
ANR	5006510	AssignmentExpression	"asnum = r_num_as_string ( NULL , n , false )"		5003962	0		=			
ANR	5006511	Identifier	asnum		5003962	0					
ANR	5006512	CallExpression	"r_num_as_string ( NULL , n , false )"		5003962	1					
ANR	5006513	Callee	r_num_as_string		5003962	0					
ANR	5006514	Identifier	r_num_as_string		5003962	0					
ANR	5006515	ArgumentList	NULL		5003962	1					
ANR	5006516	Argument	NULL		5003962	0					
ANR	5006517	Identifier	NULL		5003962	0					
ANR	5006518	Argument	n		5003962	1					
ANR	5006519	Identifier	n		5003962	0					
ANR	5006520	Argument	false		5003962	2					
ANR	5006521	Identifier	false		5003962	0					
ANR	5006522	IfStatement	if ( asnum )		5003962	6					
ANR	5006523	Condition	asnum	507:6:13735:13739	5003962	0	True				
ANR	5006524	Identifier	asnum		5003962	0					
ANR	5006525	CompoundStatement		384:13:9577:9577	5003962	1					
ANR	5006526	ExpressionStatement	"printf ( ""%s"" , asnum )"	508:3:13747:13767	5003962	0	True				
ANR	5006527	CallExpression	"printf ( ""%s"" , asnum )"		5003962	0					
ANR	5006528	Callee	printf		5003962	0					
ANR	5006529	Identifier	printf		5003962	0					
ANR	5006530	ArgumentList	"""%s"""		5003962	1					
ANR	5006531	Argument	"""%s"""		5003962	0					
ANR	5006532	PrimaryExpression	"""%s"""		5003962	0					
ANR	5006533	Argument	asnum		5003962	1					
ANR	5006534	Identifier	asnum		5003962	0					
ANR	5006535	ExpressionStatement	free ( asnum )	509:3:13772:13784	5003962	1	True				
ANR	5006536	CallExpression	free ( asnum )		5003962	0					
ANR	5006537	Callee	free		5003962	0					
ANR	5006538	Identifier	free		5003962	0					
ANR	5006539	ArgumentList	asnum		5003962	1					
ANR	5006540	Argument	asnum		5003962	0					
ANR	5006541	Identifier	asnum		5003962	0					
ANR	5006542	ElseStatement	else		5003962	0					
ANR	5006543	CompoundStatement		387:9:9630:9630	5003962	0					
ANR	5006544	ExpressionStatement	"printf ( ""No String Possible"" )"	511:3:13800:13828	5003962	0	True				
ANR	5006545	CallExpression	"printf ( ""No String Possible"" )"		5003962	0					
ANR	5006546	Callee	printf		5003962	0					
ANR	5006547	Identifier	printf		5003962	0					
ANR	5006548	ArgumentList	"""No String Possible"""		5003962	1					
ANR	5006549	Argument	"""No String Possible"""		5003962	0					
ANR	5006550	PrimaryExpression	"""No String Possible"""		5003962	0					
ANR	5006551	ReturnStatement	return true ;	513:2:13836:13847	5003962	7	True				
ANR	5006552	Identifier	true		5003962	0					
ANR	5006553	IfStatement	if ( str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' ) )		5003962	11					
ANR	5006554	Condition	str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' )	516:6:13859:13900	5003962	0	True				
ANR	5006555	AndExpression	str [ 0 ] == '0' && ( tolower ( str [ 1 ] ) == 'x' )		5003962	0		&&			
ANR	5006556	EqualityExpression	str [ 0 ] == '0'		5003962	0		==			
ANR	5006557	ArrayIndexing	str [ 0 ]		5003962	0					
ANR	5006558	Identifier	str		5003962	0					
ANR	5006559	PrimaryExpression	0		5003962	1					
ANR	5006560	PrimaryExpression	'0'		5003962	1					
ANR	5006561	EqualityExpression	tolower ( str [ 1 ] ) == 'x'		5003962	1		==			
ANR	5006562	CallExpression	tolower ( str [ 1 ] )		5003962	0					
ANR	5006563	Callee	tolower		5003962	0					
ANR	5006564	Identifier	tolower		5003962	0					
ANR	5006565	ArgumentList	str [ 1 ]		5003962	1					
ANR	5006566	Argument	str [ 1 ]		5003962	0					
ANR	5006567	ArrayIndexing	str [ 1 ]		5003962	0					
ANR	5006568	Identifier	str		5003962	0					
ANR	5006569	PrimaryExpression	1		5003962	1					
ANR	5006570	PrimaryExpression	'x'		5003962	1					
ANR	5006571	CompoundStatement		393:50:9738:9738	5003962	1					
ANR	5006572	ExpressionStatement	out_mode = ( flags & 32 ) ? '0' : 'I'	517:2:13907:13940	5003962	0	True				
ANR	5006573	AssignmentExpression	out_mode = ( flags & 32 ) ? '0' : 'I'		5003962	0		=			
ANR	5006574	Identifier	out_mode		5003962	0					
ANR	5006575	ConditionalExpression	( flags & 32 ) ? '0' : 'I'		5003962	1					
ANR	5006576	Condition	flags & 32		5003962	0					
ANR	5006577	BitAndExpression	flags & 32		5003962	0		&			
ANR	5006578	Identifier	flags		5003962	0					
ANR	5006579	PrimaryExpression	32		5003962	1					
ANR	5006580	PrimaryExpression	'0'		5003962	1					
ANR	5006581	PrimaryExpression	'I'		5003962	2					
ANR	5006582	ElseStatement	else		5003962	0					
ANR	5006583	IfStatement	"if ( r_str_startswith ( str , ""b"" ) )"		5003962	0					
ANR	5006584	Condition	"r_str_startswith ( str , ""b"" )"	518:12:13954:13980	5003962	0	True				
ANR	5006585	CallExpression	"r_str_startswith ( str , ""b"" )"		5003962	0					
ANR	5006586	Callee	r_str_startswith		5003962	0					
ANR	5006587	Identifier	r_str_startswith		5003962	0					
ANR	5006588	ArgumentList	str		5003962	1					
ANR	5006589	Argument	str		5003962	0					
ANR	5006590	Identifier	str		5003962	0					
ANR	5006591	Argument	"""b"""		5003962	1					
ANR	5006592	PrimaryExpression	"""b"""		5003962	0					
ANR	5006593	CompoundStatement		395:41:9818:9818	5003962	1					
ANR	5006594	ExpressionStatement	out_mode = 'B'	519:2:13987:14001	5003962	0	True				
ANR	5006595	AssignmentExpression	out_mode = 'B'		5003962	0		=			
ANR	5006596	Identifier	out_mode		5003962	0					
ANR	5006597	PrimaryExpression	'B'		5003962	1					
ANR	5006598	ExpressionStatement	str ++	520:2:14005:14010	5003962	1	True				
ANR	5006599	PostIncDecOperationExpression	str ++		5003962	0					
ANR	5006600	Identifier	str		5003962	0					
ANR	5006601	IncDec	++		5003962	1					
ANR	5006602	ElseStatement	else		5003962	0					
ANR	5006603	IfStatement	"if ( r_str_startswith ( str , ""t"" ) )"		5003962	0					
ANR	5006604	Condition	"r_str_startswith ( str , ""t"" )"	521:12:14024:14050	5003962	0	True				
ANR	5006605	CallExpression	"r_str_startswith ( str , ""t"" )"		5003962	0					
ANR	5006606	Callee	r_str_startswith		5003962	0					
ANR	5006607	Identifier	r_str_startswith		5003962	0					
ANR	5006608	ArgumentList	str		5003962	1					
ANR	5006609	Argument	str		5003962	0					
ANR	5006610	Identifier	str		5003962	0					
ANR	5006611	Argument	"""t"""		5003962	1					
ANR	5006612	PrimaryExpression	"""t"""		5003962	0					
ANR	5006613	CompoundStatement		398:41:9888:9888	5003962	1					
ANR	5006614	ExpressionStatement	out_mode = 'T'	522:2:14057:14071	5003962	0	True				
ANR	5006615	AssignmentExpression	out_mode = 'T'		5003962	0		=			
ANR	5006616	Identifier	out_mode		5003962	0					
ANR	5006617	PrimaryExpression	'T'		5003962	1					
ANR	5006618	ExpressionStatement	str ++	523:2:14075:14080	5003962	1	True				
ANR	5006619	PostIncDecOperationExpression	str ++		5003962	0					
ANR	5006620	Identifier	str		5003962	0					
ANR	5006621	IncDec	++		5003962	1					
ANR	5006622	ElseStatement	else		5003962	0					
ANR	5006623	IfStatement	"if ( r_str_startswith ( str , ""Fx"" ) )"		5003962	0					
ANR	5006624	Condition	"r_str_startswith ( str , ""Fx"" )"	524:12:14094:14121	5003962	0	True				
ANR	5006625	CallExpression	"r_str_startswith ( str , ""Fx"" )"		5003962	0					
ANR	5006626	Callee	r_str_startswith		5003962	0					
ANR	5006627	Identifier	r_str_startswith		5003962	0					
ANR	5006628	ArgumentList	str		5003962	1					
ANR	5006629	Argument	str		5003962	0					
ANR	5006630	Identifier	str		5003962	0					
ANR	5006631	Argument	"""Fx"""		5003962	1					
ANR	5006632	PrimaryExpression	"""Fx"""		5003962	0					
ANR	5006633	CompoundStatement		401:42:9959:9959	5003962	1					
ANR	5006634	ExpressionStatement	out_mode = 'F'	525:2:14128:14142	5003962	0	True				
ANR	5006635	AssignmentExpression	out_mode = 'F'		5003962	0		=			
ANR	5006636	Identifier	out_mode		5003962	0					
ANR	5006637	PrimaryExpression	'F'		5003962	1					
ANR	5006638	ExpressionStatement	* str = '0'	526:2:14146:14156	5003962	1	True				
ANR	5006639	AssignmentExpression	* str = '0'		5003962	0		=			
ANR	5006640	UnaryOperationExpression	* str		5003962	0					
ANR	5006641	UnaryOperator	*		5003962	0					
ANR	5006642	Identifier	str		5003962	1					
ANR	5006643	PrimaryExpression	'0'		5003962	1					
ANR	5006644	ElseStatement	else		5003962	0					
ANR	5006645	IfStatement	"if ( r_str_startswith ( str , ""Bx"" ) )"		5003962	0					
ANR	5006646	Condition	"r_str_startswith ( str , ""Bx"" )"	527:12:14170:14197	5003962	0	True				
ANR	5006647	CallExpression	"r_str_startswith ( str , ""Bx"" )"		5003962	0					
ANR	5006648	Callee	r_str_startswith		5003962	0					
ANR	5006649	Identifier	r_str_startswith		5003962	0					
ANR	5006650	ArgumentList	str		5003962	1					
ANR	5006651	Argument	str		5003962	0					
ANR	5006652	Identifier	str		5003962	0					
ANR	5006653	Argument	"""Bx"""		5003962	1					
ANR	5006654	PrimaryExpression	"""Bx"""		5003962	0					
ANR	5006655	CompoundStatement		404:42:10035:10035	5003962	1					
ANR	5006656	ExpressionStatement	out_mode = 'B'	528:2:14204:14218	5003962	0	True				
ANR	5006657	AssignmentExpression	out_mode = 'B'		5003962	0		=			
ANR	5006658	Identifier	out_mode		5003962	0					
ANR	5006659	PrimaryExpression	'B'		5003962	1					
ANR	5006660	ExpressionStatement	* str = '0'	529:2:14222:14232	5003962	1	True				
ANR	5006661	AssignmentExpression	* str = '0'		5003962	0		=			
ANR	5006662	UnaryOperationExpression	* str		5003962	0					
ANR	5006663	UnaryOperator	*		5003962	0					
ANR	5006664	Identifier	str		5003962	1					
ANR	5006665	PrimaryExpression	'0'		5003962	1					
ANR	5006666	ElseStatement	else		5003962	0					
ANR	5006667	IfStatement	"if ( r_str_startswith ( str , ""Tx"" ) )"		5003962	0					
ANR	5006668	Condition	"r_str_startswith ( str , ""Tx"" )"	530:12:14246:14273	5003962	0	True				
ANR	5006669	CallExpression	"r_str_startswith ( str , ""Tx"" )"		5003962	0					
ANR	5006670	Callee	r_str_startswith		5003962	0					
ANR	5006671	Identifier	r_str_startswith		5003962	0					
ANR	5006672	ArgumentList	str		5003962	1					
ANR	5006673	Argument	str		5003962	0					
ANR	5006674	Identifier	str		5003962	0					
ANR	5006675	Argument	"""Tx"""		5003962	1					
ANR	5006676	PrimaryExpression	"""Tx"""		5003962	0					
ANR	5006677	CompoundStatement		407:42:10111:10111	5003962	1					
ANR	5006678	ExpressionStatement	out_mode = 'T'	531:2:14280:14294	5003962	0	True				
ANR	5006679	AssignmentExpression	out_mode = 'T'		5003962	0		=			
ANR	5006680	Identifier	out_mode		5003962	0					
ANR	5006681	PrimaryExpression	'T'		5003962	1					
ANR	5006682	ExpressionStatement	* str = '0'	532:2:14298:14308	5003962	1	True				
ANR	5006683	AssignmentExpression	* str = '0'		5003962	0		=			
ANR	5006684	UnaryOperationExpression	* str		5003962	0					
ANR	5006685	UnaryOperator	*		5003962	0					
ANR	5006686	Identifier	str		5003962	1					
ANR	5006687	PrimaryExpression	'0'		5003962	1					
ANR	5006688	ElseStatement	else		5003962	0					
ANR	5006689	IfStatement	"if ( r_str_startswith ( str , ""Ox"" ) )"		5003962	0					
ANR	5006690	Condition	"r_str_startswith ( str , ""Ox"" )"	533:12:14322:14349	5003962	0	True				
ANR	5006691	CallExpression	"r_str_startswith ( str , ""Ox"" )"		5003962	0					
ANR	5006692	Callee	r_str_startswith		5003962	0					
ANR	5006693	Identifier	r_str_startswith		5003962	0					
ANR	5006694	ArgumentList	str		5003962	1					
ANR	5006695	Argument	str		5003962	0					
ANR	5006696	Identifier	str		5003962	0					
ANR	5006697	Argument	"""Ox"""		5003962	1					
ANR	5006698	PrimaryExpression	"""Ox"""		5003962	0					
ANR	5006699	CompoundStatement		410:42:10187:10187	5003962	1					
ANR	5006700	ExpressionStatement	out_mode = 'O'	534:2:14356:14370	5003962	0	True				
ANR	5006701	AssignmentExpression	out_mode = 'O'		5003962	0		=			
ANR	5006702	Identifier	out_mode		5003962	0					
ANR	5006703	PrimaryExpression	'O'		5003962	1					
ANR	5006704	ExpressionStatement	* str = '0'	535:2:14374:14384	5003962	1	True				
ANR	5006705	AssignmentExpression	* str = '0'		5003962	0		=			
ANR	5006706	UnaryOperationExpression	* str		5003962	0					
ANR	5006707	UnaryOperator	*		5003962	0					
ANR	5006708	Identifier	str		5003962	1					
ANR	5006709	PrimaryExpression	'0'		5003962	1					
ANR	5006710	ElseStatement	else		5003962	0					
ANR	5006711	IfStatement	"if ( r_str_endswith ( str , ""d"" ) )"		5003962	0					
ANR	5006712	Condition	"r_str_endswith ( str , ""d"" )"	536:12:14398:14422	5003962	0	True				
ANR	5006713	CallExpression	"r_str_endswith ( str , ""d"" )"		5003962	0					
ANR	5006714	Callee	r_str_endswith		5003962	0					
ANR	5006715	Identifier	r_str_endswith		5003962	0					
ANR	5006716	ArgumentList	str		5003962	1					
ANR	5006717	Argument	str		5003962	0					
ANR	5006718	Identifier	str		5003962	0					
ANR	5006719	Argument	"""d"""		5003962	1					
ANR	5006720	PrimaryExpression	"""d"""		5003962	0					
ANR	5006721	CompoundStatement		413:39:10260:10260	5003962	1					
ANR	5006722	ExpressionStatement	out_mode = 'I'	537:2:14429:14443	5003962	0	True				
ANR	5006723	AssignmentExpression	out_mode = 'I'		5003962	0		=			
ANR	5006724	Identifier	out_mode		5003962	0					
ANR	5006725	PrimaryExpression	'I'		5003962	1					
ANR	5006726	ExpressionStatement	str [ strlen ( str ) - 1 ] = 'b'	538:2:14447:14474	5003962	1	True				
ANR	5006727	AssignmentExpression	str [ strlen ( str ) - 1 ] = 'b'		5003962	0		=			
ANR	5006728	ArrayIndexing	str [ strlen ( str ) - 1 ]		5003962	0					
ANR	5006729	Identifier	str		5003962	0					
ANR	5006730	AdditiveExpression	strlen ( str ) - 1		5003962	1		-			
ANR	5006731	CallExpression	strlen ( str )		5003962	0					
ANR	5006732	Callee	strlen		5003962	0					
ANR	5006733	Identifier	strlen		5003962	0					
ANR	5006734	ArgumentList	str		5003962	1					
ANR	5006735	Argument	str		5003962	0					
ANR	5006736	Identifier	str		5003962	0					
ANR	5006737	PrimaryExpression	1		5003962	1					
ANR	5006738	PrimaryExpression	'b'		5003962	1					
ANR	5006739	ElseStatement	else		5003962	0					
ANR	5006740	IfStatement	"if ( r_str_endswith ( str , ""f"" ) )"		5003962	0					
ANR	5006741	Condition	"r_str_endswith ( str , ""f"" )"	540:12:14529:14553	5003962	0	True				
ANR	5006742	CallExpression	"r_str_endswith ( str , ""f"" )"		5003962	0					
ANR	5006743	Callee	r_str_endswith		5003962	0					
ANR	5006744	Identifier	r_str_endswith		5003962	0					
ANR	5006745	ArgumentList	str		5003962	1					
ANR	5006746	Argument	str		5003962	0					
ANR	5006747	Identifier	str		5003962	0					
ANR	5006748	Argument	"""f"""		5003962	1					
ANR	5006749	PrimaryExpression	"""f"""		5003962	0					
ANR	5006750	CompoundStatement		417:39:10391:10391	5003962	1					
ANR	5006751	ExpressionStatement	out_mode = 'l'	541:2:14560:14574	5003962	0	True				
ANR	5006752	AssignmentExpression	out_mode = 'l'		5003962	0		=			
ANR	5006753	Identifier	out_mode		5003962	0					
ANR	5006754	PrimaryExpression	'l'		5003962	1					
ANR	5006755	ElseStatement	else		5003962	0					
ANR	5006756	IfStatement	"if ( r_str_endswith ( str , ""dt"" ) )"		5003962	0					
ANR	5006757	Condition	"r_str_endswith ( str , ""dt"" )"	542:12:14588:14613	5003962	0	True				
ANR	5006758	CallExpression	"r_str_endswith ( str , ""dt"" )"		5003962	0					
ANR	5006759	Callee	r_str_endswith		5003962	0					
ANR	5006760	Identifier	r_str_endswith		5003962	0					
ANR	5006761	ArgumentList	str		5003962	1					
ANR	5006762	Argument	str		5003962	0					
ANR	5006763	Identifier	str		5003962	0					
ANR	5006764	Argument	"""dt"""		5003962	1					
ANR	5006765	PrimaryExpression	"""dt"""		5003962	0					
ANR	5006766	CompoundStatement		419:40:10451:10451	5003962	1					
ANR	5006767	ExpressionStatement	out_mode = 'I'	543:2:14620:14634	5003962	0	True				
ANR	5006768	AssignmentExpression	out_mode = 'I'		5003962	0		=			
ANR	5006769	Identifier	out_mode		5003962	0					
ANR	5006770	PrimaryExpression	'I'		5003962	1					
ANR	5006771	ExpressionStatement	str [ strlen ( str ) - 2 ] = 't'	544:2:14638:14665	5003962	1	True				
ANR	5006772	AssignmentExpression	str [ strlen ( str ) - 2 ] = 't'		5003962	0		=			
ANR	5006773	ArrayIndexing	str [ strlen ( str ) - 2 ]		5003962	0					
ANR	5006774	Identifier	str		5003962	0					
ANR	5006775	AdditiveExpression	strlen ( str ) - 2		5003962	1		-			
ANR	5006776	CallExpression	strlen ( str )		5003962	0					
ANR	5006777	Callee	strlen		5003962	0					
ANR	5006778	Identifier	strlen		5003962	0					
ANR	5006779	ArgumentList	str		5003962	1					
ANR	5006780	Argument	str		5003962	0					
ANR	5006781	Identifier	str		5003962	0					
ANR	5006782	PrimaryExpression	2		5003962	1					
ANR	5006783	PrimaryExpression	't'		5003962	1					
ANR	5006784	ExpressionStatement	str [ strlen ( str ) - 1 ] = '\\0'	545:2:14669:14697	5003962	2	True				
ANR	5006785	AssignmentExpression	str [ strlen ( str ) - 1 ] = '\\0'		5003962	0		=			
ANR	5006786	ArrayIndexing	str [ strlen ( str ) - 1 ]		5003962	0					
ANR	5006787	Identifier	str		5003962	0					
ANR	5006788	AdditiveExpression	strlen ( str ) - 1		5003962	1		-			
ANR	5006789	CallExpression	strlen ( str )		5003962	0					
ANR	5006790	Callee	strlen		5003962	0					
ANR	5006791	Identifier	strlen		5003962	0					
ANR	5006792	ArgumentList	str		5003962	1					
ANR	5006793	Argument	str		5003962	0					
ANR	5006794	Identifier	str		5003962	0					
ANR	5006795	PrimaryExpression	1		5003962	1					
ANR	5006796	PrimaryExpression	'\\0'		5003962	1					
ANR	5006797	WhileStatement	"while ( ( p = strchr ( str , ' ' ) ) )"		5003962	12					
ANR	5006798	Condition	"p = strchr ( str , ' ' )"	547:8:14710:14732	5003962	0	True				
ANR	5006799	AssignmentExpression	"p = strchr ( str , ' ' )"		5003962	0		=			
ANR	5006800	Identifier	p		5003962	0					
ANR	5006801	CallExpression	"strchr ( str , ' ' )"		5003962	1					
ANR	5006802	Callee	strchr		5003962	0					
ANR	5006803	Identifier	strchr		5003962	0					
ANR	5006804	ArgumentList	str		5003962	1					
ANR	5006805	Argument	str		5003962	0					
ANR	5006806	Identifier	str		5003962	0					
ANR	5006807	Argument	' '		5003962	1					
ANR	5006808	PrimaryExpression	' '		5003962	0					
ANR	5006809	CompoundStatement		424:33:10570:10570	5003962	1					
ANR	5006810	ExpressionStatement	* p = 0	548:2:14739:14745	5003962	0	True				
ANR	5006811	AssignmentExpression	* p = 0		5003962	0		=			
ANR	5006812	UnaryOperationExpression	* p		5003962	0					
ANR	5006813	UnaryOperator	*		5003962	0					
ANR	5006814	Identifier	p		5003962	1					
ANR	5006815	PrimaryExpression	0		5003962	1					
ANR	5006816	ExpressionStatement	"format_output ( out_mode , str )"	549:2:14749:14778	5003962	1	True				
ANR	5006817	CallExpression	"format_output ( out_mode , str )"		5003962	0					
ANR	5006818	Callee	format_output		5003962	0					
ANR	5006819	Identifier	format_output		5003962	0					
ANR	5006820	ArgumentList	out_mode		5003962	1					
ANR	5006821	Argument	out_mode		5003962	0					
ANR	5006822	Identifier	out_mode		5003962	0					
ANR	5006823	Argument	str		5003962	1					
ANR	5006824	Identifier	str		5003962	0					
ANR	5006825	ExpressionStatement	str = p + 1	550:2:14782:14793	5003962	2	True				
ANR	5006826	AssignmentExpression	str = p + 1		5003962	0		=			
ANR	5006827	Identifier	str		5003962	0					
ANR	5006828	AdditiveExpression	p + 1		5003962	1		+			
ANR	5006829	Identifier	p		5003962	0					
ANR	5006830	PrimaryExpression	1		5003962	1					
ANR	5006831	IfStatement	if ( * str )		5003962	13					
ANR	5006832	Condition	* str	552:5:14803:14806	5003962	0	True				
ANR	5006833	UnaryOperationExpression	* str		5003962	0					
ANR	5006834	UnaryOperator	*		5003962	0					
ANR	5006835	Identifier	str		5003962	1					
ANR	5006836	CompoundStatement		429:11:10644:10644	5003962	1					
ANR	5006837	ExpressionStatement	"format_output ( out_mode , str )"	553:2:14813:14842	5003962	0	True				
ANR	5006838	CallExpression	"format_output ( out_mode , str )"		5003962	0					
ANR	5006839	Callee	format_output		5003962	0					
ANR	5006840	Identifier	format_output		5003962	0					
ANR	5006841	ArgumentList	out_mode		5003962	1					
ANR	5006842	Argument	out_mode		5003962	0					
ANR	5006843	Identifier	out_mode		5003962	0					
ANR	5006844	Argument	str		5003962	1					
ANR	5006845	Identifier	str		5003962	0					
ANR	5006846	ReturnStatement	return true ;	555:1:14848:14859	5003962	14	True				
ANR	5006847	Identifier	true		5003962	0					
ANR	5006848	ReturnType	static int		5003962	1					
ANR	5006849	Identifier	rax		5003962	2					
ANR	5006850	ParameterList	"char * str , int len , int last"		5003962	3					
ANR	5006851	Parameter	char * str	124:15:4134:4142	5003962	0	True				
ANR	5006852	ParameterType	char *		5003962	0					
ANR	5006853	Identifier	str		5003962	1					
ANR	5006854	Parameter	int len	124:26:4145:4151	5003962	1	True				
ANR	5006855	ParameterType	int		5003962	0					
ANR	5006856	Identifier	len		5003962	1					
ANR	5006857	Parameter	int last	124:35:4154:4161	5003962	2	True				
ANR	5006858	ParameterType	int		5003962	0					
ANR	5006859	Identifier	last		5003962	1					
ANR	5006860	CFGEntryNode	ENTRY		5003962		True				
ANR	5006861	CFGExitNode	EXIT		5003962		True				
ANR	5006862	Symbol	UT32_MAX		5003962						
ANR	5006863	Symbol	r_print_new		5003962						
ANR	5006864	Symbol	stdout		5003962						
ANR	5006865	Symbol	tolower		5003962						
ANR	5006866	Symbol	format_output		5003962						
ANR	5006867	Symbol	num		5003962						
ANR	5006868	Symbol	modified_str		5003962						
ANR	5006869	Symbol	strchr		5003962						
ANR	5006870	Symbol	r_str_hash		5003962						
ANR	5006871	Symbol	strlen		5003962						
ANR	5006872	Symbol	r_str_binstr2bin		5003962						
ANR	5006873	Symbol	memcmp		5003962						
ANR	5006874	Symbol	len		5003962						
ANR	5006875	Symbol	asnum		5003962						
ANR	5006876	Symbol	num -> fvalue		5003962						
ANR	5006877	Symbol	r_hex_from_code		5003962						
ANR	5006878	Symbol	res		5003962						
ANR	5006879	Symbol	* buf		5003962						
ANR	5006880	Symbol	NULL		5003962						
ANR	5006881	Symbol	last		5003962						
ANR	5006882	Symbol	str		5003962						
ANR	5006883	Symbol	unit		5003962						
ANR	5006884	Symbol	true		5003962						
ANR	5006885	Symbol	use_stdin		5003962						
ANR	5006886	Symbol	nl		5003962						
ANR	5006887	Symbol	np		5003962						
ANR	5006888	Symbol	r_num_as_string		5003962						
ANR	5006889	Symbol	r_stdin_slurp		5003962						
ANR	5006890	Symbol	flags		5003962						
ANR	5006891	Symbol	r_print_randomart		5003962						
ANR	5006892	Symbol	calloc		5003962						
ANR	5006893	Symbol	r_str_newf		5003962						
ANR	5006894	Symbol	n32		5003962						
ANR	5006895	Symbol	out_mode		5003962						
ANR	5006896	Symbol	r_num_math		5003962						
ANR	5006897	Symbol	out		5003962						
ANR	5006898	Symbol	byte_per_col		5003962						
ANR	5006899	Symbol	r_str_endswith		5003962						
ANR	5006900	Symbol	* str		5003962						
ANR	5006901	Symbol	r_hex_str2bin		5003962						
ANR	5006902	Symbol	atoi		5003962						
ANR	5006903	Symbol	r_str_startswith		5003962						
ANR	5006904	Symbol	malloc		5003962						
ANR	5006905	Symbol	a		5003962						
ANR	5006906	Symbol	d		5003962						
ANR	5006907	Symbol	ch		5003962						
ANR	5006908	Symbol	f		5003962						
ANR	5006909	Symbol	num -> dbz		5003962						
ANR	5006910	Symbol	r_str_nlen		5003962						
ANR	5006911	Symbol	false		5003962						
ANR	5006912	Symbol	h		5003962						
ANR	5006913	Symbol	start		5003962						
ANR	5006914	Symbol	i		5003962						
ANR	5006915	Symbol	& d		5003962						
ANR	5006916	Symbol	* np		5003962						
ANR	5006917	Symbol	& f		5003962						
ANR	5006918	Symbol	m		5003962						
ANR	5006919	Symbol	n		5003962						
ANR	5006920	Symbol	p		5003962						
ANR	5006921	Symbol	r_main_version_print		5003962						
ANR	5006922	Symbol	* num		5003962						
ANR	5006923	Symbol	help		5003962						
ANR	5006924	Symbol	q		5003962						
ANR	5006925	Symbol	buf		5003962						
ANR	5006926	Symbol	force_mode		5003962						
ANR	5006927	Symbol	* i		5003962						
ANR	5006928	Symbol	s		5003962						
ANR	5006929	Symbol	& n		5003962						
ANR	5006930	Symbol	& n32		5003962						
ANR	5006931	Symbol	* strlen		5003962						
ANR	5006932	Symbol	& q		5003962						
ANR	5006933	Symbol	* m		5003962						
ANR	5006934	Symbol	* p		5003962						
ANR	5006935	Symbol	* len		5003962						
ANR	5006936	Function	use_stdin	558:0:14864:15526							
ANR	5006937	FunctionDef	use_stdin ()		5006936	0					
ANR	5006938	CompoundStatement		558:23:14887:15526	5006936	0					
ANR	5006939	IdentifierDeclStatement	"char * buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 ) ;"	559:1:14890:14935	5006936	0	True				
ANR	5006940	IdentifierDecl	"* buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5006936	0					
ANR	5006941	IdentifierDeclType	char *		5006936	0					
ANR	5006942	Identifier	buf		5006936	1					
ANR	5006943	AssignmentExpression	"* buf = calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5006936	2		=			
ANR	5006944	Identifier	buf		5006936	0					
ANR	5006945	CallExpression	"calloc ( 1 , STDIN_BUFFER_SIZE + 1 )"		5006936	1					
ANR	5006946	Callee	calloc		5006936	0					
ANR	5006947	Identifier	calloc		5006936	0					
ANR	5006948	ArgumentList	1		5006936	1					
ANR	5006949	Argument	1		5006936	0					
ANR	5006950	PrimaryExpression	1		5006936	0					
ANR	5006951	Argument	STDIN_BUFFER_SIZE + 1		5006936	1					
ANR	5006952	AdditiveExpression	STDIN_BUFFER_SIZE + 1		5006936	0		+			
ANR	5006953	Identifier	STDIN_BUFFER_SIZE		5006936	0					
ANR	5006954	PrimaryExpression	1		5006936	1					
ANR	5006955	IdentifierDeclStatement	int l ;	560:1:14938:14943	5006936	1	True				
ANR	5006956	IdentifierDecl	l		5006936	0					
ANR	5006957	IdentifierDeclType	int		5006936	0					
ANR	5006958	Identifier	l		5006936	1					
ANR	5006959	IfStatement	if ( ! buf )		5006936	2					
ANR	5006960	Condition	! buf	561:5:14976:14979	5006936	0	True				
ANR	5006961	UnaryOperationExpression	! buf		5006936	0					
ANR	5006962	UnaryOperator	!		5006936	0					
ANR	5006963	Identifier	buf		5006936	1					
ANR	5006964	CompoundStatement		4:11:94:94	5006936	1					
ANR	5006965	ReturnStatement	return 0 ;	562:2:14986:14994	5006936	0	True				
ANR	5006966	PrimaryExpression	0		5006936	0					
ANR	5006967	IfStatement	if ( ! ( flags & ( 1 << 14 ) ) )		5006936	3					
ANR	5006968	Condition	! ( flags & ( 1 << 14 ) )	564:5:15004:15021	5006936	0	True				
ANR	5006969	UnaryOperationExpression	! ( flags & ( 1 << 14 ) )		5006936	0					
ANR	5006970	UnaryOperator	!		5006936	0					
ANR	5006971	BitAndExpression	flags & ( 1 << 14 )		5006936	1		&			
ANR	5006972	Identifier	flags		5006936	0					
ANR	5006973	ShiftExpression	1 << 14		5006936	1		<<			
ANR	5006974	PrimaryExpression	1		5006936	0					
ANR	5006975	PrimaryExpression	14		5006936	1					
ANR	5006976	CompoundStatement		7:25:136:136	5006936	1					
ANR	5006977	ForStatement	for ( l = 0 ; l >= 0 && l < STDIN_BUFFER_SIZE ; l ++ )		5006936	0					
ANR	5006978	ForInit	l = 0 ;	565:7:15033:15038	5006936	0	True				
ANR	5006979	AssignmentExpression	l = 0		5006936	0		=			
ANR	5006980	Identifier	l		5006936	0					
ANR	5006981	PrimaryExpression	0		5006936	1					
ANR	5006982	Condition	l >= 0 && l < STDIN_BUFFER_SIZE	565:14:15040:15070	5006936	1	True				
ANR	5006983	AndExpression	l >= 0 && l < STDIN_BUFFER_SIZE		5006936	0		&&			
ANR	5006984	RelationalExpression	l >= 0		5006936	0		>=			
ANR	5006985	Identifier	l		5006936	0					
ANR	5006986	PrimaryExpression	0		5006936	1					
ANR	5006987	RelationalExpression	l < STDIN_BUFFER_SIZE		5006936	1		<			
ANR	5006988	Identifier	l		5006936	0					
ANR	5006989	Identifier	STDIN_BUFFER_SIZE		5006936	1					
ANR	5006990	PostIncDecOperationExpression	l ++	565:47:15073:15075	5006936	2	True				
ANR	5006991	Identifier	l		5006936	0					
ANR	5006992	IncDec	++		5006936	1					
ANR	5006993	CompoundStatement		10:3:243:291	5006936	3					
ANR	5006994	IdentifierDeclStatement	"int n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l ) ;"	567:3:15131:15179	5006936	0	True				
ANR	5006995	IdentifierDecl	"n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5006936	0					
ANR	5006996	IdentifierDeclType	int		5006936	0					
ANR	5006997	Identifier	n		5006936	1					
ANR	5006998	AssignmentExpression	"n = read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5006936	2		=			
ANR	5006999	Identifier	n		5006936	0					
ANR	5007000	CallExpression	"read ( 0 , buf + l , STDIN_BUFFER_SIZE - l )"		5006936	1					
ANR	5007001	Callee	read		5006936	0					
ANR	5007002	Identifier	read		5006936	0					
ANR	5007003	ArgumentList	0		5006936	1					
ANR	5007004	Argument	0		5006936	0					
ANR	5007005	PrimaryExpression	0		5006936	0					
ANR	5007006	Argument	buf + l		5006936	1					
ANR	5007007	AdditiveExpression	buf + l		5006936	0		+			
ANR	5007008	Identifier	buf		5006936	0					
ANR	5007009	Identifier	l		5006936	1					
ANR	5007010	Argument	STDIN_BUFFER_SIZE - l		5006936	2					
ANR	5007011	AdditiveExpression	STDIN_BUFFER_SIZE - l		5006936	0		-			
ANR	5007012	Identifier	STDIN_BUFFER_SIZE		5006936	0					
ANR	5007013	Identifier	l		5006936	1					
ANR	5007014	IfStatement	if ( n < 1 )		5006936	1					
ANR	5007015	Condition	n < 1	568:7:15188:15192	5006936	0	True				
ANR	5007016	RelationalExpression	n < 1		5006936	0		<			
ANR	5007017	Identifier	n		5006936	0					
ANR	5007018	PrimaryExpression	1		5006936	1					
ANR	5007019	CompoundStatement		11:14:307:307	5006936	1					
ANR	5007020	BreakStatement	break ;	569:4:15201:15206	5006936	0	True				
ANR	5007021	ExpressionStatement	l += n	571:3:15216:15222	5006936	2	True				
ANR	5007022	AssignmentExpression	l += n		5006936	0		+=			
ANR	5007023	Identifier	l		5006936	0					
ANR	5007024	Identifier	n		5006936	1					
ANR	5007025	IfStatement	if ( buf [ l - 1 ] == 0 )		5006936	3					
ANR	5007026	Condition	buf [ l - 1 ] == 0	572:7:15231:15245	5006936	0	True				
ANR	5007027	EqualityExpression	buf [ l - 1 ] == 0		5006936	0		==			
ANR	5007028	ArrayIndexing	buf [ l - 1 ]		5006936	0					
ANR	5007029	Identifier	buf		5006936	0					
ANR	5007030	AdditiveExpression	l - 1		5006936	1		-			
ANR	5007031	Identifier	l		5006936	0					
ANR	5007032	PrimaryExpression	1		5006936	1					
ANR	5007033	PrimaryExpression	0		5006936	1					
ANR	5007034	CompoundStatement		15:24:360:360	5006936	1					
ANR	5007035	ExpressionStatement	l --	573:4:15254:15257	5006936	0	True				
ANR	5007036	PostIncDecOperationExpression	l --		5006936	0					
ANR	5007037	Identifier	l		5006936	0					
ANR	5007038	IncDec	--		5006936	1					
ANR	5007039	ContinueStatement	continue ;	574:4:15263:15271	5006936	1	True				
ANR	5007040	ExpressionStatement	buf [ n ] = 0	576:3:15281:15291	5006936	4	True				
ANR	5007041	AssignmentExpression	buf [ n ] = 0		5006936	0		=			
ANR	5007042	ArrayIndexing	buf [ n ]		5006936	0					
ANR	5007043	Identifier	buf		5006936	0					
ANR	5007044	Identifier	n		5006936	1					
ANR	5007045	PrimaryExpression	0		5006936	1					
ANR	5007046	ExpressionStatement	buf [ STDIN_BUFFER_SIZE ] = '\\0'	578:3:15355:15384	5006936	5	True				
ANR	5007047	AssignmentExpression	buf [ STDIN_BUFFER_SIZE ] = '\\0'		5006936	0		=			
ANR	5007048	ArrayIndexing	buf [ STDIN_BUFFER_SIZE ]		5006936	0					
ANR	5007049	Identifier	buf		5006936	0					
ANR	5007050	Identifier	STDIN_BUFFER_SIZE		5006936	1					
ANR	5007051	PrimaryExpression	'\\0'		5006936	1					
ANR	5007052	IfStatement	"if ( ! rax ( buf , l , 0 ) )"		5006936	6					
ANR	5007053	Condition	"! rax ( buf , l , 0 )"	579:7:15393:15408	5006936	0	True				
ANR	5007054	UnaryOperationExpression	"! rax ( buf , l , 0 )"		5006936	0					
ANR	5007055	UnaryOperator	!		5006936	0					
ANR	5007056	CallExpression	"rax ( buf , l , 0 )"		5006936	1					
ANR	5007057	Callee	rax		5006936	0					
ANR	5007058	Identifier	rax		5006936	0					
ANR	5007059	ArgumentList	buf		5006936	1					
ANR	5007060	Argument	buf		5006936	0					
ANR	5007061	Identifier	buf		5006936	0					
ANR	5007062	Argument	l		5006936	1					
ANR	5007063	Identifier	l		5006936	0					
ANR	5007064	Argument	0		5006936	2					
ANR	5007065	PrimaryExpression	0		5006936	0					
ANR	5007066	CompoundStatement		22:25:523:523	5006936	1					
ANR	5007067	BreakStatement	break ;	580:4:15417:15422	5006936	0	True				
ANR	5007068	ExpressionStatement	l = - 1	582:3:15432:15438	5006936	7	True				
ANR	5007069	AssignmentExpression	l = - 1		5006936	0		=			
ANR	5007070	Identifier	l		5006936	0					
ANR	5007071	UnaryOperationExpression	- 1		5006936	1					
ANR	5007072	UnaryOperator	-		5006936	0					
ANR	5007073	PrimaryExpression	1		5006936	1					
ANR	5007074	ElseStatement	else		5006936	0					
ANR	5007075	CompoundStatement		27:8:564:564	5006936	0					
ANR	5007076	ExpressionStatement	l = 1	585:2:15456:15461	5006936	0	True				
ANR	5007077	AssignmentExpression	l = 1		5006936	0		=			
ANR	5007078	Identifier	l		5006936	0					
ANR	5007079	PrimaryExpression	1		5006936	1					
ANR	5007080	IfStatement	if ( l > 0 )		5006936	4					
ANR	5007081	Condition	l > 0	587:5:15471:15475	5006936	0	True				
ANR	5007082	RelationalExpression	l > 0		5006936	0		>			
ANR	5007083	Identifier	l		5006936	0					
ANR	5007084	PrimaryExpression	0		5006936	1					
ANR	5007085	CompoundStatement		30:12:590:590	5006936	1					
ANR	5007086	ExpressionStatement	"rax ( buf , l , 0 )"	588:2:15482:15497	5006936	0	True				
ANR	5007087	CallExpression	"rax ( buf , l , 0 )"		5006936	0					
ANR	5007088	Callee	rax		5006936	0					
ANR	5007089	Identifier	rax		5006936	0					
ANR	5007090	ArgumentList	buf		5006936	1					
ANR	5007091	Argument	buf		5006936	0					
ANR	5007092	Identifier	buf		5006936	0					
ANR	5007093	Argument	l		5006936	1					
ANR	5007094	Identifier	l		5006936	0					
ANR	5007095	Argument	0		5006936	2					
ANR	5007096	PrimaryExpression	0		5006936	0					
ANR	5007097	ExpressionStatement	free ( buf )	590:1:15503:15513	5006936	5	True				
ANR	5007098	CallExpression	free ( buf )		5006936	0					
ANR	5007099	Callee	free		5006936	0					
ANR	5007100	Identifier	free		5006936	0					
ANR	5007101	ArgumentList	buf		5006936	1					
ANR	5007102	Argument	buf		5006936	0					
ANR	5007103	Identifier	buf		5006936	0					
ANR	5007104	ReturnStatement	return 0 ;	591:1:15516:15524	5006936	6	True				
ANR	5007105	PrimaryExpression	0		5006936	0					
ANR	5007106	ReturnType	static int		5006936	1					
ANR	5007107	Identifier	use_stdin		5006936	2					
ANR	5007108	ParameterList			5006936	3					
ANR	5007109	CFGEntryNode	ENTRY		5006936		True				
ANR	5007110	CFGExitNode	EXIT		5006936		True				
ANR	5007111	Symbol	buf		5006936						
ANR	5007112	Symbol	* buf		5006936						
ANR	5007113	Symbol	read		5006936						
ANR	5007114	Symbol	STDIN_BUFFER_SIZE		5006936						
ANR	5007115	Symbol	* l		5006936						
ANR	5007116	Symbol	flags		5006936						
ANR	5007117	Symbol	* n		5006936						
ANR	5007118	Symbol	rax		5006936						
ANR	5007119	Symbol	calloc		5006936						
ANR	5007120	Symbol	l		5006936						
ANR	5007121	Symbol	n		5006936						
ANR	5007122	Symbol	* STDIN_BUFFER_SIZE		5006936						
ANR	5007123	Function	r_main_rax2	594:0:15529:15811							
ANR	5007124	FunctionDef	"r_main_rax2 (int argc , char * * argv)"		5007123	0					
ANR	5007125	CompoundStatement		594:45:15574:15811	5007123	0					
ANR	5007126	IdentifierDeclStatement	int i ;	595:1:15577:15582	5007123	0	True				
ANR	5007127	IdentifierDecl	i		5007123	0					
ANR	5007128	IdentifierDeclType	int		5007123	0					
ANR	5007129	Identifier	i		5007123	1					
ANR	5007130	ExpressionStatement	"num = r_num_new ( NULL , NULL , NULL )"	596:1:15585:15619	5007123	1	True				
ANR	5007131	AssignmentExpression	"num = r_num_new ( NULL , NULL , NULL )"		5007123	0		=			
ANR	5007132	Identifier	num		5007123	0					
ANR	5007133	CallExpression	"r_num_new ( NULL , NULL , NULL )"		5007123	1					
ANR	5007134	Callee	r_num_new		5007123	0					
ANR	5007135	Identifier	r_num_new		5007123	0					
ANR	5007136	ArgumentList	NULL		5007123	1					
ANR	5007137	Argument	NULL		5007123	0					
ANR	5007138	Identifier	NULL		5007123	0					
ANR	5007139	Argument	NULL		5007123	1					
ANR	5007140	Identifier	NULL		5007123	0					
ANR	5007141	Argument	NULL		5007123	2					
ANR	5007142	Identifier	NULL		5007123	0					
ANR	5007143	IfStatement	if ( argc == 1 )		5007123	2					
ANR	5007144	Condition	argc == 1	597:5:15626:15634	5007123	0	True				
ANR	5007145	EqualityExpression	argc == 1		5007123	0		==			
ANR	5007146	Identifier	argc		5007123	0					
ANR	5007147	PrimaryExpression	1		5007123	1					
ANR	5007148	CompoundStatement		4:16:62:62	5007123	1					
ANR	5007149	ExpressionStatement	use_stdin ( )	598:2:15641:15653	5007123	0	True				
ANR	5007150	CallExpression	use_stdin ( )		5007123	0					
ANR	5007151	Callee	use_stdin		5007123	0					
ANR	5007152	Identifier	use_stdin		5007123	0					
ANR	5007153	ArgumentList			5007123	1					
ANR	5007154	ElseStatement	else		5007123	0					
ANR	5007155	CompoundStatement		6:8:88:88	5007123	0					
ANR	5007156	ForStatement	for ( i = 1 ; i < argc ; i ++ )		5007123	0					
ANR	5007157	ForInit	i = 1 ;	600:7:15672:15677	5007123	0	True				
ANR	5007158	AssignmentExpression	i = 1		5007123	0		=			
ANR	5007159	Identifier	i		5007123	0					
ANR	5007160	PrimaryExpression	1		5007123	1					
ANR	5007161	Condition	i < argc	600:14:15679:15686	5007123	1	True				
ANR	5007162	RelationalExpression	i < argc		5007123	0		<			
ANR	5007163	Identifier	i		5007123	0					
ANR	5007164	Identifier	argc		5007123	1					
ANR	5007165	PostIncDecOperationExpression	i ++	600:24:15689:15691	5007123	2	True				
ANR	5007166	Identifier	i		5007123	0					
ANR	5007167	IncDec	++		5007123	1					
ANR	5007168	CompoundStatement		7:29:119:119	5007123	3					
ANR	5007169	ExpressionStatement	r_str_unescape ( argv [ i ] )	601:3:15699:15723	5007123	0	True				
ANR	5007170	CallExpression	r_str_unescape ( argv [ i ] )		5007123	0					
ANR	5007171	Callee	r_str_unescape		5007123	0					
ANR	5007172	Identifier	r_str_unescape		5007123	0					
ANR	5007173	ArgumentList	argv [ i ]		5007123	1					
ANR	5007174	Argument	argv [ i ]		5007123	0					
ANR	5007175	ArrayIndexing	argv [ i ]		5007123	0					
ANR	5007176	Identifier	argv		5007123	0					
ANR	5007177	Identifier	i		5007123	1					
ANR	5007178	ExpressionStatement	"rax ( argv [ i ] , 0 , i == argc - 1 )"	602:3:15728:15759	5007123	1	True				
ANR	5007179	CallExpression	"rax ( argv [ i ] , 0 , i == argc - 1 )"		5007123	0					
ANR	5007180	Callee	rax		5007123	0					
ANR	5007181	Identifier	rax		5007123	0					
ANR	5007182	ArgumentList	argv [ i ]		5007123	1					
ANR	5007183	Argument	argv [ i ]		5007123	0					
ANR	5007184	ArrayIndexing	argv [ i ]		5007123	0					
ANR	5007185	Identifier	argv		5007123	0					
ANR	5007186	Identifier	i		5007123	1					
ANR	5007187	Argument	0		5007123	1					
ANR	5007188	PrimaryExpression	0		5007123	0					
ANR	5007189	Argument	i == argc - 1		5007123	2					
ANR	5007190	EqualityExpression	i == argc - 1		5007123	0		==			
ANR	5007191	Identifier	i		5007123	0					
ANR	5007192	AdditiveExpression	argc - 1		5007123	1		-			
ANR	5007193	Identifier	argc		5007123	0					
ANR	5007194	PrimaryExpression	1		5007123	1					
ANR	5007195	ExpressionStatement	r_num_free ( num )	605:1:15769:15785	5007123	3	True				
ANR	5007196	CallExpression	r_num_free ( num )		5007123	0					
ANR	5007197	Callee	r_num_free		5007123	0					
ANR	5007198	Identifier	r_num_free		5007123	0					
ANR	5007199	ArgumentList	num		5007123	1					
ANR	5007200	Argument	num		5007123	0					
ANR	5007201	Identifier	num		5007123	0					
ANR	5007202	ExpressionStatement	num = NULL	606:1:15788:15798	5007123	4	True				
ANR	5007203	AssignmentExpression	num = NULL		5007123	0		=			
ANR	5007204	Identifier	num		5007123	0					
ANR	5007205	Identifier	NULL		5007123	1					
ANR	5007206	ReturnStatement	return 0 ;	607:1:15801:15809	5007123	5	True				
ANR	5007207	PrimaryExpression	0		5007123	0					
ANR	5007208	ReturnType	R_API int		5007123	1					
ANR	5007209	Identifier	r_main_rax2		5007123	2					
ANR	5007210	ParameterList	"int argc , char * * argv"		5007123	3					
ANR	5007211	Parameter	int argc	594:22:15551:15558	5007123	0	True				
ANR	5007212	ParameterType	int		5007123	0					
ANR	5007213	Identifier	argc		5007123	1					
ANR	5007214	Parameter	char * * argv	594:32:15561:15571	5007123	1	True				
ANR	5007215	ParameterType	char * *		5007123	0					
ANR	5007216	Identifier	argv		5007123	1					
ANR	5007217	CFGEntryNode	ENTRY		5007123		True				
ANR	5007218	CFGExitNode	EXIT		5007123		True				
ANR	5007219	Symbol	argc		5007123						
ANR	5007220	Symbol	r_num_new		5007123						
ANR	5007221	Symbol	NULL		5007123						
ANR	5007222	Symbol	* i		5007123						
ANR	5007223	Symbol	num		5007123						
ANR	5007224	Symbol	i		5007123						
ANR	5007225	Symbol	* argv		5007123						
ANR	5007226	Symbol	argv		5007123						
