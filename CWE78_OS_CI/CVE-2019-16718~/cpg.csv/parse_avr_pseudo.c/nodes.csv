command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5539138	File	data/converged/CVE-2019-16718~_radare2/parse_avr_pseudo.c								
ANR	5539139	Function	replace	13:0:213:3395							
ANR	5539140	FunctionDef	"replace (int argc , const char * argv [ ] , char * newstr)"		5539139	0					
ANR	5539141	CompoundStatement		13:64:277:3395	5539139	0					
ANR	5539142	IdentifierDeclStatement	"int i , j , k ;"	14:1:280:289	5539139	0	True				
ANR	5539143	IdentifierDecl	i		5539139	0					
ANR	5539144	IdentifierDeclType	int		5539139	0					
ANR	5539145	Identifier	i		5539139	1					
ANR	5539146	IdentifierDecl	j		5539139	1					
ANR	5539147	IdentifierDeclType	int		5539139	0					
ANR	5539148	Identifier	j		5539139	1					
ANR	5539149	IdentifierDecl	k		5539139	2					
ANR	5539150	IdentifierDeclType	int		5539139	0					
ANR	5539151	Identifier	k		5539139	1					
ANR	5539152	ClassDefStatement	"struct { char * op ; char * str ; } ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } } ;"	15:1:292:2719	5539139	1	True				
ANR	5539153	IdentifierDecl	"ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } }"		5539139	0					
ANR	5539154	IdentifierDeclType	 [ ]		5539139	0					
ANR	5539155	Identifier	ops		5539139	1					
ANR	5539156	AssignmentExpression	"ops [ ] = { { ""add"" , ""A += B"" } , { ""adc"" , ""A += B + carry"" } , { ""adiw"" , ""A+1:A += B"" } , { ""sub"" , ""A -= B"" } , { ""subi"" , ""A -= B"" } , { ""sbc"" , ""A -= (B + carry)"" } , { ""sbci"" , ""A -= (B + carry)"" } , { ""sbiw"" , ""A+1:A -= B"" } , { ""and"" , ""A &= B"" } , { ""andi"" , ""A &= B"" } , { ""or"" , ""A |= B"" } , { ""ori"" , ""A |= B"" } , { ""eor"" , ""A ^= B"" } , { ""com"" , ""A = 0xff - A"" } , { ""neg"" , ""A = -A"" } , { ""sbr"" , ""A |= B"" } , { ""cbr"" , ""A &= (0xff - B)"" } , { ""inc"" , ""A++"" } , { ""dec"" , ""A--"" } , { ""tst"" , ""A &= A"" } , { ""clr"" , ""A ^= A"" } , { ""ser"" , ""A = 0xff"" } , { ""mul"" , ""r1:r0 = A * B"" } , { ""rjmp"" , ""goto A"" } , { ""ijmp"" , ""goto z"" } , { ""jmp"" , ""goto A"" } , { ""rcall"" , ""goto A"" } , { ""icall"" , ""goto z"" } , { ""call"" , ""goto A"" } , { ""ret"" , ""return"" } , { ""iret"" , ""return_interrupt()"" } , { ""cp"" , ""var = A - B"" } , { ""cpc"" , ""var = A - B - carry"" } , { ""cpi"" , ""var = A - B"" } , { ""breq"" , ""if(!var) goto A"" } , { ""brne"" , ""if(var) goto A"" } , { ""brsh"" , ""if(var >= 0) goto A"" } , { ""brlo"" , ""if(var < 0) goto A"" } , { ""brmi"" , ""if(var < 0) goto A"" } , { ""brpl"" , ""if(var > 0) goto A"" } , { ""brge"" , ""if(var >= 0) goto A"" } , { ""brlt"" , ""if(var < 0) goto A"" } , { ""mov"" , ""A = B"" } , { ""movw"" , ""A+1:A = B+1:B"" } , { ""ldi"" , ""A = B"" } , { ""lds"" , ""A = *(B)"" } , { ""ld"" , ""A = *(B)"" } , { ""ldd"" , ""A = *(B)"" } , { ""lpm"" , ""r0 = z"" } , { ""in"" , ""A = B"" } , { ""out"" , ""A = B"" } , { ""push"" , ""push(A)"" } , { ""pop"" , ""A = pop()"" } , { ""lsl"" , ""A <<= 1"" } , { ""lsr"" , ""A >>= 1"" } , { ""rol"" , ""A = (A << 1) | (A >> 7)"" } , { ""ror"" , ""A = (A << 7) | (A >> 1)"" } , { ""asr"" , ""A >>= 1"" } , { ""swap"" , ""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"" } , { ""sec"" , ""c = 1"" } , { ""clc"" , ""c = 0"" } , { ""sen"" , ""n = 1"" } , { ""cln"" , ""n = 0"" } , { ""sez"" , ""z = 1"" } , { ""clz"" , ""z = 0"" } , { ""sei"" , ""i = 1"" } , { ""cli"" , ""i = 0"" } , { ""ses"" , ""s = 1"" } , { ""cls"" , ""s = 0"" } , { ""sev"" , ""v = 1"" } , { ""clv"" , ""v = 0"" } , { ""set"" , ""t = 1"" } , { ""clt"" , ""t = 0"" } , { ""seh"" , ""h = 1"" } , { ""clh"" , ""h = 0"" } , { ""nop"" , """" } , { ""halt"" , ""_halt()"" } , { ""wdr"" , ""_watchdog_reset()"" } , { ""std"" , ""*(A) = B"" } , { ""st"" , ""*(A) = B"" } , { ""sts"" , ""*(A) = B"" } , { NULL } }"		5539139	2		=			
ANR	5539157	Identifier	ops		5539139	0					
ANR	5539158	InitializerList	"""add"""		5539139	1					
ANR	5539159	InitializerList	"""add"""		5539139	0					
ANR	5539160	PrimaryExpression	"""add"""		5539139	0					
ANR	5539161	PrimaryExpression	"""A += B"""		5539139	1					
ANR	5539162	InitializerList	"""adc"""		5539139	1					
ANR	5539163	PrimaryExpression	"""adc"""		5539139	0					
ANR	5539164	PrimaryExpression	"""A += B + carry"""		5539139	1					
ANR	5539165	InitializerList	"""adiw"""		5539139	2					
ANR	5539166	PrimaryExpression	"""adiw"""		5539139	0					
ANR	5539167	PrimaryExpression	"""A+1:A += B"""		5539139	1					
ANR	5539168	InitializerList	"""sub"""		5539139	3					
ANR	5539169	PrimaryExpression	"""sub"""		5539139	0					
ANR	5539170	PrimaryExpression	"""A -= B"""		5539139	1					
ANR	5539171	InitializerList	"""subi"""		5539139	4					
ANR	5539172	PrimaryExpression	"""subi"""		5539139	0					
ANR	5539173	PrimaryExpression	"""A -= B"""		5539139	1					
ANR	5539174	InitializerList	"""sbc"""		5539139	5					
ANR	5539175	PrimaryExpression	"""sbc"""		5539139	0					
ANR	5539176	PrimaryExpression	"""A -= (B + carry)"""		5539139	1					
ANR	5539177	InitializerList	"""sbci"""		5539139	6					
ANR	5539178	PrimaryExpression	"""sbci"""		5539139	0					
ANR	5539179	PrimaryExpression	"""A -= (B + carry)"""		5539139	1					
ANR	5539180	InitializerList	"""sbiw"""		5539139	7					
ANR	5539181	PrimaryExpression	"""sbiw"""		5539139	0					
ANR	5539182	PrimaryExpression	"""A+1:A -= B"""		5539139	1					
ANR	5539183	InitializerList	"""and"""		5539139	8					
ANR	5539184	PrimaryExpression	"""and"""		5539139	0					
ANR	5539185	PrimaryExpression	"""A &= B"""		5539139	1					
ANR	5539186	InitializerList	"""andi"""		5539139	9					
ANR	5539187	PrimaryExpression	"""andi"""		5539139	0					
ANR	5539188	PrimaryExpression	"""A &= B"""		5539139	1					
ANR	5539189	InitializerList	"""or"""		5539139	10					
ANR	5539190	PrimaryExpression	"""or"""		5539139	0					
ANR	5539191	PrimaryExpression	"""A |= B"""		5539139	1					
ANR	5539192	InitializerList	"""ori"""		5539139	11					
ANR	5539193	PrimaryExpression	"""ori"""		5539139	0					
ANR	5539194	PrimaryExpression	"""A |= B"""		5539139	1					
ANR	5539195	InitializerList	"""eor"""		5539139	12					
ANR	5539196	PrimaryExpression	"""eor"""		5539139	0					
ANR	5539197	PrimaryExpression	"""A ^= B"""		5539139	1					
ANR	5539198	InitializerList	"""com"""		5539139	13					
ANR	5539199	PrimaryExpression	"""com"""		5539139	0					
ANR	5539200	PrimaryExpression	"""A = 0xff - A"""		5539139	1					
ANR	5539201	InitializerList	"""neg"""		5539139	14					
ANR	5539202	PrimaryExpression	"""neg"""		5539139	0					
ANR	5539203	PrimaryExpression	"""A = -A"""		5539139	1					
ANR	5539204	InitializerList	"""sbr"""		5539139	15					
ANR	5539205	PrimaryExpression	"""sbr"""		5539139	0					
ANR	5539206	PrimaryExpression	"""A |= B"""		5539139	1					
ANR	5539207	InitializerList	"""cbr"""		5539139	16					
ANR	5539208	PrimaryExpression	"""cbr"""		5539139	0					
ANR	5539209	PrimaryExpression	"""A &= (0xff - B)"""		5539139	1					
ANR	5539210	InitializerList	"""inc"""		5539139	17					
ANR	5539211	PrimaryExpression	"""inc"""		5539139	0					
ANR	5539212	PrimaryExpression	"""A++"""		5539139	1					
ANR	5539213	InitializerList	"""dec"""		5539139	18					
ANR	5539214	PrimaryExpression	"""dec"""		5539139	0					
ANR	5539215	PrimaryExpression	"""A--"""		5539139	1					
ANR	5539216	InitializerList	"""tst"""		5539139	19					
ANR	5539217	PrimaryExpression	"""tst"""		5539139	0					
ANR	5539218	PrimaryExpression	"""A &= A"""		5539139	1					
ANR	5539219	InitializerList	"""clr"""		5539139	20					
ANR	5539220	PrimaryExpression	"""clr"""		5539139	0					
ANR	5539221	PrimaryExpression	"""A ^= A"""		5539139	1					
ANR	5539222	InitializerList	"""ser"""		5539139	21					
ANR	5539223	PrimaryExpression	"""ser"""		5539139	0					
ANR	5539224	PrimaryExpression	"""A = 0xff"""		5539139	1					
ANR	5539225	InitializerList	"""mul"""		5539139	22					
ANR	5539226	PrimaryExpression	"""mul"""		5539139	0					
ANR	5539227	PrimaryExpression	"""r1:r0 = A * B"""		5539139	1					
ANR	5539228	InitializerList	"""rjmp"""		5539139	23					
ANR	5539229	PrimaryExpression	"""rjmp"""		5539139	0					
ANR	5539230	PrimaryExpression	"""goto A"""		5539139	1					
ANR	5539231	InitializerList	"""ijmp"""		5539139	24					
ANR	5539232	PrimaryExpression	"""ijmp"""		5539139	0					
ANR	5539233	PrimaryExpression	"""goto z"""		5539139	1					
ANR	5539234	InitializerList	"""jmp"""		5539139	25					
ANR	5539235	PrimaryExpression	"""jmp"""		5539139	0					
ANR	5539236	PrimaryExpression	"""goto A"""		5539139	1					
ANR	5539237	InitializerList	"""rcall"""		5539139	26					
ANR	5539238	PrimaryExpression	"""rcall"""		5539139	0					
ANR	5539239	PrimaryExpression	"""goto A"""		5539139	1					
ANR	5539240	InitializerList	"""icall"""		5539139	27					
ANR	5539241	PrimaryExpression	"""icall"""		5539139	0					
ANR	5539242	PrimaryExpression	"""goto z"""		5539139	1					
ANR	5539243	InitializerList	"""call"""		5539139	28					
ANR	5539244	PrimaryExpression	"""call"""		5539139	0					
ANR	5539245	PrimaryExpression	"""goto A"""		5539139	1					
ANR	5539246	InitializerList	"""ret"""		5539139	29					
ANR	5539247	PrimaryExpression	"""ret"""		5539139	0					
ANR	5539248	PrimaryExpression	"""return"""		5539139	1					
ANR	5539249	InitializerList	"""iret"""		5539139	30					
ANR	5539250	PrimaryExpression	"""iret"""		5539139	0					
ANR	5539251	PrimaryExpression	"""return_interrupt()"""		5539139	1					
ANR	5539252	InitializerList	"""cp"""		5539139	31					
ANR	5539253	PrimaryExpression	"""cp"""		5539139	0					
ANR	5539254	PrimaryExpression	"""var = A - B"""		5539139	1					
ANR	5539255	InitializerList	"""cpc"""		5539139	32					
ANR	5539256	PrimaryExpression	"""cpc"""		5539139	0					
ANR	5539257	PrimaryExpression	"""var = A - B - carry"""		5539139	1					
ANR	5539258	InitializerList	"""cpi"""		5539139	33					
ANR	5539259	PrimaryExpression	"""cpi"""		5539139	0					
ANR	5539260	PrimaryExpression	"""var = A - B"""		5539139	1					
ANR	5539261	InitializerList	"""breq"""		5539139	34					
ANR	5539262	PrimaryExpression	"""breq"""		5539139	0					
ANR	5539263	PrimaryExpression	"""if(!var) goto A"""		5539139	1					
ANR	5539264	InitializerList	"""brne"""		5539139	35					
ANR	5539265	PrimaryExpression	"""brne"""		5539139	0					
ANR	5539266	PrimaryExpression	"""if(var) goto A"""		5539139	1					
ANR	5539267	InitializerList	"""brsh"""		5539139	36					
ANR	5539268	PrimaryExpression	"""brsh"""		5539139	0					
ANR	5539269	PrimaryExpression	"""if(var >= 0) goto A"""		5539139	1					
ANR	5539270	InitializerList	"""brlo"""		5539139	37					
ANR	5539271	PrimaryExpression	"""brlo"""		5539139	0					
ANR	5539272	PrimaryExpression	"""if(var < 0) goto A"""		5539139	1					
ANR	5539273	InitializerList	"""brmi"""		5539139	38					
ANR	5539274	PrimaryExpression	"""brmi"""		5539139	0					
ANR	5539275	PrimaryExpression	"""if(var < 0) goto A"""		5539139	1					
ANR	5539276	InitializerList	"""brpl"""		5539139	39					
ANR	5539277	PrimaryExpression	"""brpl"""		5539139	0					
ANR	5539278	PrimaryExpression	"""if(var > 0) goto A"""		5539139	1					
ANR	5539279	InitializerList	"""brge"""		5539139	40					
ANR	5539280	PrimaryExpression	"""brge"""		5539139	0					
ANR	5539281	PrimaryExpression	"""if(var >= 0) goto A"""		5539139	1					
ANR	5539282	InitializerList	"""brlt"""		5539139	41					
ANR	5539283	PrimaryExpression	"""brlt"""		5539139	0					
ANR	5539284	PrimaryExpression	"""if(var < 0) goto A"""		5539139	1					
ANR	5539285	InitializerList	"""mov"""		5539139	42					
ANR	5539286	PrimaryExpression	"""mov"""		5539139	0					
ANR	5539287	PrimaryExpression	"""A = B"""		5539139	1					
ANR	5539288	InitializerList	"""movw"""		5539139	43					
ANR	5539289	PrimaryExpression	"""movw"""		5539139	0					
ANR	5539290	PrimaryExpression	"""A+1:A = B+1:B"""		5539139	1					
ANR	5539291	InitializerList	"""ldi"""		5539139	44					
ANR	5539292	PrimaryExpression	"""ldi"""		5539139	0					
ANR	5539293	PrimaryExpression	"""A = B"""		5539139	1					
ANR	5539294	InitializerList	"""lds"""		5539139	45					
ANR	5539295	PrimaryExpression	"""lds"""		5539139	0					
ANR	5539296	PrimaryExpression	"""A = *(B)"""		5539139	1					
ANR	5539297	InitializerList	"""ld"""		5539139	46					
ANR	5539298	PrimaryExpression	"""ld"""		5539139	0					
ANR	5539299	PrimaryExpression	"""A = *(B)"""		5539139	1					
ANR	5539300	InitializerList	"""ldd"""		5539139	47					
ANR	5539301	PrimaryExpression	"""ldd"""		5539139	0					
ANR	5539302	PrimaryExpression	"""A = *(B)"""		5539139	1					
ANR	5539303	InitializerList	"""lpm"""		5539139	48					
ANR	5539304	PrimaryExpression	"""lpm"""		5539139	0					
ANR	5539305	PrimaryExpression	"""r0 = z"""		5539139	1					
ANR	5539306	InitializerList	"""in"""		5539139	49					
ANR	5539307	PrimaryExpression	"""in"""		5539139	0					
ANR	5539308	PrimaryExpression	"""A = B"""		5539139	1					
ANR	5539309	InitializerList	"""out"""		5539139	50					
ANR	5539310	PrimaryExpression	"""out"""		5539139	0					
ANR	5539311	PrimaryExpression	"""A = B"""		5539139	1					
ANR	5539312	InitializerList	"""push"""		5539139	51					
ANR	5539313	PrimaryExpression	"""push"""		5539139	0					
ANR	5539314	PrimaryExpression	"""push(A)"""		5539139	1					
ANR	5539315	InitializerList	"""pop"""		5539139	52					
ANR	5539316	PrimaryExpression	"""pop"""		5539139	0					
ANR	5539317	PrimaryExpression	"""A = pop()"""		5539139	1					
ANR	5539318	InitializerList	"""lsl"""		5539139	53					
ANR	5539319	PrimaryExpression	"""lsl"""		5539139	0					
ANR	5539320	PrimaryExpression	"""A <<= 1"""		5539139	1					
ANR	5539321	InitializerList	"""lsr"""		5539139	54					
ANR	5539322	PrimaryExpression	"""lsr"""		5539139	0					
ANR	5539323	PrimaryExpression	"""A >>= 1"""		5539139	1					
ANR	5539324	InitializerList	"""rol"""		5539139	55					
ANR	5539325	PrimaryExpression	"""rol"""		5539139	0					
ANR	5539326	PrimaryExpression	"""A = (A << 1) | (A >> 7)"""		5539139	1					
ANR	5539327	InitializerList	"""ror"""		5539139	56					
ANR	5539328	PrimaryExpression	"""ror"""		5539139	0					
ANR	5539329	PrimaryExpression	"""A = (A << 7) | (A >> 1)"""		5539139	1					
ANR	5539330	InitializerList	"""asr"""		5539139	57					
ANR	5539331	PrimaryExpression	"""asr"""		5539139	0					
ANR	5539332	PrimaryExpression	"""A >>= 1"""		5539139	1					
ANR	5539333	InitializerList	"""swap"""		5539139	58					
ANR	5539334	PrimaryExpression	"""swap"""		5539139	0					
ANR	5539335	PrimaryExpression	"""A = ((A & 0xf0) >> 4) | ((A & 0x0f) << 4)"""		5539139	1					
ANR	5539336	InitializerList	"""sec"""		5539139	59					
ANR	5539337	PrimaryExpression	"""sec"""		5539139	0					
ANR	5539338	PrimaryExpression	"""c = 1"""		5539139	1					
ANR	5539339	InitializerList	"""clc"""		5539139	60					
ANR	5539340	PrimaryExpression	"""clc"""		5539139	0					
ANR	5539341	PrimaryExpression	"""c = 0"""		5539139	1					
ANR	5539342	InitializerList	"""sen"""		5539139	61					
ANR	5539343	PrimaryExpression	"""sen"""		5539139	0					
ANR	5539344	PrimaryExpression	"""n = 1"""		5539139	1					
ANR	5539345	InitializerList	"""cln"""		5539139	62					
ANR	5539346	PrimaryExpression	"""cln"""		5539139	0					
ANR	5539347	PrimaryExpression	"""n = 0"""		5539139	1					
ANR	5539348	InitializerList	"""sez"""		5539139	63					
ANR	5539349	PrimaryExpression	"""sez"""		5539139	0					
ANR	5539350	PrimaryExpression	"""z = 1"""		5539139	1					
ANR	5539351	InitializerList	"""clz"""		5539139	64					
ANR	5539352	PrimaryExpression	"""clz"""		5539139	0					
ANR	5539353	PrimaryExpression	"""z = 0"""		5539139	1					
ANR	5539354	InitializerList	"""sei"""		5539139	65					
ANR	5539355	PrimaryExpression	"""sei"""		5539139	0					
ANR	5539356	PrimaryExpression	"""i = 1"""		5539139	1					
ANR	5539357	InitializerList	"""cli"""		5539139	66					
ANR	5539358	PrimaryExpression	"""cli"""		5539139	0					
ANR	5539359	PrimaryExpression	"""i = 0"""		5539139	1					
ANR	5539360	InitializerList	"""ses"""		5539139	67					
ANR	5539361	PrimaryExpression	"""ses"""		5539139	0					
ANR	5539362	PrimaryExpression	"""s = 1"""		5539139	1					
ANR	5539363	InitializerList	"""cls"""		5539139	68					
ANR	5539364	PrimaryExpression	"""cls"""		5539139	0					
ANR	5539365	PrimaryExpression	"""s = 0"""		5539139	1					
ANR	5539366	InitializerList	"""sev"""		5539139	69					
ANR	5539367	PrimaryExpression	"""sev"""		5539139	0					
ANR	5539368	PrimaryExpression	"""v = 1"""		5539139	1					
ANR	5539369	InitializerList	"""clv"""		5539139	70					
ANR	5539370	PrimaryExpression	"""clv"""		5539139	0					
ANR	5539371	PrimaryExpression	"""v = 0"""		5539139	1					
ANR	5539372	InitializerList	"""set"""		5539139	71					
ANR	5539373	PrimaryExpression	"""set"""		5539139	0					
ANR	5539374	PrimaryExpression	"""t = 1"""		5539139	1					
ANR	5539375	InitializerList	"""clt"""		5539139	72					
ANR	5539376	PrimaryExpression	"""clt"""		5539139	0					
ANR	5539377	PrimaryExpression	"""t = 0"""		5539139	1					
ANR	5539378	InitializerList	"""seh"""		5539139	73					
ANR	5539379	PrimaryExpression	"""seh"""		5539139	0					
ANR	5539380	PrimaryExpression	"""h = 1"""		5539139	1					
ANR	5539381	InitializerList	"""clh"""		5539139	74					
ANR	5539382	PrimaryExpression	"""clh"""		5539139	0					
ANR	5539383	PrimaryExpression	"""h = 0"""		5539139	1					
ANR	5539384	InitializerList	"""nop"""		5539139	75					
ANR	5539385	PrimaryExpression	"""nop"""		5539139	0					
ANR	5539386	PrimaryExpression	""""""		5539139	1					
ANR	5539387	InitializerList	"""halt"""		5539139	76					
ANR	5539388	PrimaryExpression	"""halt"""		5539139	0					
ANR	5539389	PrimaryExpression	"""_halt()"""		5539139	1					
ANR	5539390	InitializerList	"""wdr"""		5539139	77					
ANR	5539391	PrimaryExpression	"""wdr"""		5539139	0					
ANR	5539392	PrimaryExpression	"""_watchdog_reset()"""		5539139	1					
ANR	5539393	InitializerList	"""std"""		5539139	78					
ANR	5539394	PrimaryExpression	"""std"""		5539139	0					
ANR	5539395	PrimaryExpression	"""*(A) = B"""		5539139	1					
ANR	5539396	InitializerList	"""st"""		5539139	79					
ANR	5539397	PrimaryExpression	"""st"""		5539139	0					
ANR	5539398	PrimaryExpression	"""*(A) = B"""		5539139	1					
ANR	5539399	InitializerList	"""sts"""		5539139	80					
ANR	5539400	PrimaryExpression	"""sts"""		5539139	0					
ANR	5539401	PrimaryExpression	"""*(A) = B"""		5539139	1					
ANR	5539402	InitializerList	NULL		5539139	81					
ANR	5539403	Identifier	NULL		5539139	0					
ANR	5539404	ForStatement	for ( i = 0 ; ops [ i ] . op != NULL ; i ++ )		5539139	2					
ANR	5539405	ForInit	i = 0 ;	103:6:2728:2733	5539139	0	True				
ANR	5539406	AssignmentExpression	i = 0		5539139	0		=			
ANR	5539407	Identifier	i		5539139	0					
ANR	5539408	PrimaryExpression	0		5539139	1					
ANR	5539409	Condition	ops [ i ] . op != NULL	103:13:2735:2751	5539139	1	True				
ANR	5539410	EqualityExpression	ops [ i ] . op != NULL		5539139	0		!=			
ANR	5539411	MemberAccess	ops [ i ] . op		5539139	0					
ANR	5539412	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539413	Identifier	ops		5539139	0					
ANR	5539414	Identifier	i		5539139	1					
ANR	5539415	Identifier	op		5539139	1					
ANR	5539416	Identifier	NULL		5539139	1					
ANR	5539417	PostIncDecOperationExpression	i ++	103:32:2754:2756	5539139	2	True				
ANR	5539418	Identifier	i		5539139	0					
ANR	5539419	IncDec	++		5539139	1					
ANR	5539420	CompoundStatement		91:37:2481:2481	5539139	3					
ANR	5539421	IfStatement	"if ( ! strcmp ( ops [ i ] . op , argv [ 0 ] ) )"		5539139	0					
ANR	5539422	Condition	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"	104:6:2767:2794	5539139	0	True				
ANR	5539423	UnaryOperationExpression	"! strcmp ( ops [ i ] . op , argv [ 0 ] )"		5539139	0					
ANR	5539424	UnaryOperator	!		5539139	0					
ANR	5539425	CallExpression	"strcmp ( ops [ i ] . op , argv [ 0 ] )"		5539139	1					
ANR	5539426	Callee	strcmp		5539139	0					
ANR	5539427	Identifier	strcmp		5539139	0					
ANR	5539428	ArgumentList	ops [ i ] . op		5539139	1					
ANR	5539429	Argument	ops [ i ] . op		5539139	0					
ANR	5539430	MemberAccess	ops [ i ] . op		5539139	0					
ANR	5539431	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539432	Identifier	ops		5539139	0					
ANR	5539433	Identifier	i		5539139	1					
ANR	5539434	Identifier	op		5539139	1					
ANR	5539435	Argument	argv [ 0 ]		5539139	1					
ANR	5539436	ArrayIndexing	argv [ 0 ]		5539139	0					
ANR	5539437	Identifier	argv		5539139	0					
ANR	5539438	PrimaryExpression	0		5539139	1					
ANR	5539439	CompoundStatement		92:36:2519:2519	5539139	1					
ANR	5539440	IfStatement	if ( newstr != NULL )		5539139	0					
ANR	5539441	Condition	newstr != NULL	105:7:2806:2819	5539139	0	True				
ANR	5539442	EqualityExpression	newstr != NULL		5539139	0		!=			
ANR	5539443	Identifier	newstr		5539139	0					
ANR	5539444	Identifier	NULL		5539139	1					
ANR	5539445	CompoundStatement		93:23:2544:2544	5539139	1					
ANR	5539446	ForStatement	"for ( j = k = 0 ; ops [ i ] . str [ j ] != '\\0' ; j ++ , k ++ )"		5539139	0					
ANR	5539447	ForInit	j = k = 0 ;	106:9:2833:2842	5539139	0	True				
ANR	5539448	AssignmentExpression	j = k = 0		5539139	0		=			
ANR	5539449	Identifier	j		5539139	0					
ANR	5539450	AssignmentExpression	k = 0		5539139	1		=			
ANR	5539451	Identifier	k		5539139	0					
ANR	5539452	PrimaryExpression	0		5539139	1					
ANR	5539453	Condition	ops [ i ] . str [ j ] != '\\0'	106:20:2844:2864	5539139	1	True				
ANR	5539454	EqualityExpression	ops [ i ] . str [ j ] != '\\0'		5539139	0		!=			
ANR	5539455	ArrayIndexing	ops [ i ] . str [ j ]		5539139	0					
ANR	5539456	MemberAccess	ops [ i ] . str		5539139	0					
ANR	5539457	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539458	Identifier	ops		5539139	0					
ANR	5539459	Identifier	i		5539139	1					
ANR	5539460	Identifier	str		5539139	1					
ANR	5539461	Identifier	j		5539139	1					
ANR	5539462	PrimaryExpression	'\\0'		5539139	1					
ANR	5539463	Expression	"j ++ , k ++"	106:43:2867:2874	5539139	2	True				
ANR	5539464	PostIncDecOperationExpression	j ++		5539139	0					
ANR	5539465	Identifier	j		5539139	0					
ANR	5539466	IncDec	++		5539139	1					
ANR	5539467	PostIncDecOperationExpression	k ++		5539139	1					
ANR	5539468	Identifier	k		5539139	0					
ANR	5539469	IncDec	++		5539139	1					
ANR	5539470	CompoundStatement		94:53:2599:2599	5539139	3					
ANR	5539471	IfStatement	if ( ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J' )		5539139	0					
ANR	5539472	Condition	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'	107:9:2888:2931	5539139	0	True				
ANR	5539473	AndExpression	ops [ i ] . str [ j ] >= 'A' && ops [ i ] . str [ j ] <= 'J'		5539139	0		&&			
ANR	5539474	RelationalExpression	ops [ i ] . str [ j ] >= 'A'		5539139	0		>=			
ANR	5539475	ArrayIndexing	ops [ i ] . str [ j ]		5539139	0					
ANR	5539476	MemberAccess	ops [ i ] . str		5539139	0					
ANR	5539477	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539478	Identifier	ops		5539139	0					
ANR	5539479	Identifier	i		5539139	1					
ANR	5539480	Identifier	str		5539139	1					
ANR	5539481	Identifier	j		5539139	1					
ANR	5539482	PrimaryExpression	'A'		5539139	1					
ANR	5539483	RelationalExpression	ops [ i ] . str [ j ] <= 'J'		5539139	1		<=			
ANR	5539484	ArrayIndexing	ops [ i ] . str [ j ]		5539139	0					
ANR	5539485	MemberAccess	ops [ i ] . str		5539139	0					
ANR	5539486	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539487	Identifier	ops		5539139	0					
ANR	5539488	Identifier	i		5539139	1					
ANR	5539489	Identifier	str		5539139	1					
ANR	5539490	Identifier	j		5539139	1					
ANR	5539491	PrimaryExpression	'J'		5539139	1					
ANR	5539492	CompoundStatement		96:6:2664:2705	5539139	1					
ANR	5539493	IdentifierDeclStatement	const char * w = argv [ ops [ i ] . str [ j ] - '@' ] ;	108:6:2942:2983	5539139	0	True				
ANR	5539494	IdentifierDecl	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5539139	0					
ANR	5539495	IdentifierDeclType	const char *		5539139	0					
ANR	5539496	Identifier	w		5539139	1					
ANR	5539497	AssignmentExpression	* w = argv [ ops [ i ] . str [ j ] - '@' ]		5539139	2		=			
ANR	5539498	Identifier	w		5539139	0					
ANR	5539499	ArrayIndexing	argv [ ops [ i ] . str [ j ] - '@' ]		5539139	1					
ANR	5539500	Identifier	argv		5539139	0					
ANR	5539501	AdditiveExpression	ops [ i ] . str [ j ] - '@'		5539139	1		-			
ANR	5539502	ArrayIndexing	ops [ i ] . str [ j ]		5539139	0					
ANR	5539503	MemberAccess	ops [ i ] . str		5539139	0					
ANR	5539504	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539505	Identifier	ops		5539139	0					
ANR	5539506	Identifier	i		5539139	1					
ANR	5539507	Identifier	str		5539139	1					
ANR	5539508	Identifier	j		5539139	1					
ANR	5539509	PrimaryExpression	'@'		5539139	1					
ANR	5539510	IfStatement	if ( w != NULL )		5539139	1					
ANR	5539511	Condition	w != NULL	109:10:2995:3003	5539139	0	True				
ANR	5539512	EqualityExpression	w != NULL		5539139	0		!=			
ANR	5539513	Identifier	w		5539139	0					
ANR	5539514	Identifier	NULL		5539139	1					
ANR	5539515	CompoundStatement		97:21:2728:2728	5539139	1					
ANR	5539516	ExpressionStatement	"strcpy ( newstr + k , w )"	110:7:3015:3037	5539139	0	True				
ANR	5539517	CallExpression	"strcpy ( newstr + k , w )"		5539139	0					
ANR	5539518	Callee	strcpy		5539139	0					
ANR	5539519	Identifier	strcpy		5539139	0					
ANR	5539520	ArgumentList	newstr + k		5539139	1					
ANR	5539521	Argument	newstr + k		5539139	0					
ANR	5539522	AdditiveExpression	newstr + k		5539139	0		+			
ANR	5539523	Identifier	newstr		5539139	0					
ANR	5539524	Identifier	k		5539139	1					
ANR	5539525	Argument	w		5539139	1					
ANR	5539526	Identifier	w		5539139	0					
ANR	5539527	ExpressionStatement	k += strlen ( w ) - 1	111:7:3046:3064	5539139	1	True				
ANR	5539528	AssignmentExpression	k += strlen ( w ) - 1		5539139	0		+=			
ANR	5539529	Identifier	k		5539139	0					
ANR	5539530	AdditiveExpression	strlen ( w ) - 1		5539139	1		-			
ANR	5539531	CallExpression	strlen ( w )		5539139	0					
ANR	5539532	Callee	strlen		5539139	0					
ANR	5539533	Identifier	strlen		5539139	0					
ANR	5539534	ArgumentList	w		5539139	1					
ANR	5539535	Argument	w		5539139	0					
ANR	5539536	Identifier	w		5539139	0					
ANR	5539537	PrimaryExpression	1		5539139	1					
ANR	5539538	ElseStatement	else		5539139	0					
ANR	5539539	CompoundStatement		101:12:2808:2808	5539139	0					
ANR	5539540	ExpressionStatement	newstr [ k ] = ops [ i ] . str [ j ]	114:6:3094:3119	5539139	0	True				
ANR	5539541	AssignmentExpression	newstr [ k ] = ops [ i ] . str [ j ]		5539139	0		=			
ANR	5539542	ArrayIndexing	newstr [ k ]		5539139	0					
ANR	5539543	Identifier	newstr		5539139	0					
ANR	5539544	Identifier	k		5539139	1					
ANR	5539545	ArrayIndexing	ops [ i ] . str [ j ]		5539139	1					
ANR	5539546	MemberAccess	ops [ i ] . str		5539139	0					
ANR	5539547	ArrayIndexing	ops [ i ]		5539139	0					
ANR	5539548	Identifier	ops		5539139	0					
ANR	5539549	Identifier	i		5539139	1					
ANR	5539550	Identifier	str		5539139	1					
ANR	5539551	Identifier	j		5539139	1					
ANR	5539552	ExpressionStatement	newstr [ k ] = '\\0'	117:4:3138:3154	5539139	1	True				
ANR	5539553	AssignmentExpression	newstr [ k ] = '\\0'		5539139	0		=			
ANR	5539554	ArrayIndexing	newstr [ k ]		5539139	0					
ANR	5539555	Identifier	newstr		5539139	0					
ANR	5539556	Identifier	k		5539139	1					
ANR	5539557	PrimaryExpression	'\\0'		5539139	1					
ANR	5539558	ReturnStatement	return true ;	119:3:3164:3175	5539139	1	True				
ANR	5539559	Identifier	true		5539139	0					
ANR	5539560	IfStatement	if ( newstr != NULL )		5539139	3					
ANR	5539561	Condition	newstr != NULL	124:5:3216:3229	5539139	0	True				
ANR	5539562	EqualityExpression	newstr != NULL		5539139	0		!=			
ANR	5539563	Identifier	newstr		5539139	0					
ANR	5539564	Identifier	NULL		5539139	1					
ANR	5539565	CompoundStatement		112:21:2954:2954	5539139	1					
ANR	5539566	ExpressionStatement	newstr [ 0 ] = '\\0'	125:2:3236:3252	5539139	0	True				
ANR	5539567	AssignmentExpression	newstr [ 0 ] = '\\0'		5539139	0		=			
ANR	5539568	ArrayIndexing	newstr [ 0 ]		5539139	0					
ANR	5539569	Identifier	newstr		5539139	0					
ANR	5539570	PrimaryExpression	0		5539139	1					
ANR	5539571	PrimaryExpression	'\\0'		5539139	1					
ANR	5539572	ForStatement	for ( i = 0 ; i < argc ; i ++ )		5539139	1					
ANR	5539573	ForInit	i = 0 ;	126:7:3261:3266	5539139	0	True				
ANR	5539574	AssignmentExpression	i = 0		5539139	0		=			
ANR	5539575	Identifier	i		5539139	0					
ANR	5539576	PrimaryExpression	0		5539139	1					
ANR	5539577	Condition	i < argc	126:14:3268:3275	5539139	1	True				
ANR	5539578	RelationalExpression	i < argc		5539139	0		<			
ANR	5539579	Identifier	i		5539139	0					
ANR	5539580	Identifier	argc		5539139	1					
ANR	5539581	PostIncDecOperationExpression	i ++	126:24:3278:3280	5539139	2	True				
ANR	5539582	Identifier	i		5539139	0					
ANR	5539583	IncDec	++		5539139	1					
ANR	5539584	CompoundStatement		114:29:3005:3005	5539139	3					
ANR	5539585	ExpressionStatement	"strcat ( newstr , argv [ i ] )"	127:3:3288:3312	5539139	0	True				
ANR	5539586	CallExpression	"strcat ( newstr , argv [ i ] )"		5539139	0					
ANR	5539587	Callee	strcat		5539139	0					
ANR	5539588	Identifier	strcat		5539139	0					
ANR	5539589	ArgumentList	newstr		5539139	1					
ANR	5539590	Argument	newstr		5539139	0					
ANR	5539591	Identifier	newstr		5539139	0					
ANR	5539592	Argument	argv [ i ]		5539139	1					
ANR	5539593	ArrayIndexing	argv [ i ]		5539139	0					
ANR	5539594	Identifier	argv		5539139	0					
ANR	5539595	Identifier	i		5539139	1					
ANR	5539596	ExpressionStatement	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"	128:3:3317:3370	5539139	1	True				
ANR	5539597	CallExpression	"strcat ( newstr , ( i == 0 || i == argc - 1 ) ? "" "" : "", "" )"		5539139	0					
ANR	5539598	Callee	strcat		5539139	0					
ANR	5539599	Identifier	strcat		5539139	0					
ANR	5539600	ArgumentList	newstr		5539139	1					
ANR	5539601	Argument	newstr		5539139	0					
ANR	5539602	Identifier	newstr		5539139	0					
ANR	5539603	Argument	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5539139	1					
ANR	5539604	ConditionalExpression	"( i == 0 || i == argc - 1 ) ? "" "" : "", """		5539139	0					
ANR	5539605	Condition	i == 0 || i == argc - 1		5539139	0					
ANR	5539606	OrExpression	i == 0 || i == argc - 1		5539139	0		||			
ANR	5539607	EqualityExpression	i == 0		5539139	0		==			
ANR	5539608	Identifier	i		5539139	0					
ANR	5539609	PrimaryExpression	0		5539139	1					
ANR	5539610	EqualityExpression	i == argc - 1		5539139	1		==			
ANR	5539611	Identifier	i		5539139	0					
ANR	5539612	AdditiveExpression	argc - 1		5539139	1		-			
ANR	5539613	Identifier	argc		5539139	0					
ANR	5539614	PrimaryExpression	1		5539139	1					
ANR	5539615	PrimaryExpression	""" """		5539139	1					
ANR	5539616	PrimaryExpression	""", """		5539139	2					
ANR	5539617	ReturnStatement	return false ;	132:1:3381:3393	5539139	4	True				
ANR	5539618	Identifier	false		5539139	0					
ANR	5539619	ReturnType	static bool		5539139	1					
ANR	5539620	Identifier	replace		5539139	2					
ANR	5539621	ParameterList	"int argc , const char * argv [ ] , char * newstr"		5539139	3					
ANR	5539622	Parameter	int argc	13:20:233:240	5539139	0	True				
ANR	5539623	ParameterType	int		5539139	0					
ANR	5539624	Identifier	argc		5539139	1					
ANR	5539625	Parameter	const char * argv [ ]	13:30:243:260	5539139	1	True				
ANR	5539626	ParameterType	const char * [ ]		5539139	0					
ANR	5539627	Identifier	argv		5539139	1					
ANR	5539628	Parameter	char * newstr	13:50:263:274	5539139	2	True				
ANR	5539629	ParameterType	char *		5539139	0					
ANR	5539630	Identifier	newstr		5539139	1					
ANR	5539631	CFGEntryNode	ENTRY		5539139		True				
ANR	5539632	CFGExitNode	EXIT		5539139		True				
ANR	5539633	Symbol	* ops [ i ] . str		5539139						
ANR	5539634	Symbol	* * ops		5539139						
ANR	5539635	Symbol	* argv		5539139						
ANR	5539636	Symbol	argv		5539139						
ANR	5539637	Symbol	ops [ i ] . str		5539139						
ANR	5539638	Symbol	strlen		5539139						
ANR	5539639	Symbol	ops [ i ] . op		5539139						
ANR	5539640	Symbol	* ops		5539139						
ANR	5539641	Symbol	argc		5539139						
ANR	5539642	Symbol	strcmp		5539139						
ANR	5539643	Symbol	* * j		5539139						
ANR	5539644	Symbol	* * i		5539139						
ANR	5539645	Symbol	NULL		5539139						
ANR	5539646	Symbol	* * ops [ i ] . str		5539139						
ANR	5539647	Symbol	false		5539139						
ANR	5539648	Symbol	i		5539139						
ANR	5539649	Symbol	j		5539139						
ANR	5539650	Symbol	k		5539139						
ANR	5539651	Symbol	newstr		5539139						
ANR	5539652	Symbol	* * * ops		5539139						
ANR	5539653	Symbol	ops		5539139						
ANR	5539654	Symbol	* i		5539139						
ANR	5539655	Symbol	* newstr		5539139						
ANR	5539656	Symbol	* j		5539139						
ANR	5539657	Symbol	* k		5539139						
ANR	5539658	Symbol	w		5539139						
ANR	5539659	Symbol	* * * i		5539139						
ANR	5539660	Symbol	true		5539139						
ANR	5539661	Function	parse	136:0:3414:5009							
ANR	5539662	FunctionDef	"parse (RParse * p , const char * data , char * str)"		5539661	0					
ANR	5539663	CompoundStatement		136:57:3471:5009	5539661	0					
ANR	5539664	IdentifierDeclStatement	"int i , len = strlen ( data ) ;"	137:1:3474:3500	5539661	0	True				
ANR	5539665	IdentifierDecl	i		5539661	0					
ANR	5539666	IdentifierDeclType	int		5539661	0					
ANR	5539667	Identifier	i		5539661	1					
ANR	5539668	IdentifierDecl	len = strlen ( data )		5539661	1					
ANR	5539669	IdentifierDeclType	int		5539661	0					
ANR	5539670	Identifier	len		5539661	1					
ANR	5539671	AssignmentExpression	len = strlen ( data )		5539661	2		=			
ANR	5539672	Identifier	len		5539661	0					
ANR	5539673	CallExpression	strlen ( data )		5539661	1					
ANR	5539674	Callee	strlen		5539661	0					
ANR	5539675	Identifier	strlen		5539661	0					
ANR	5539676	ArgumentList	data		5539661	1					
ANR	5539677	Argument	data		5539661	0					
ANR	5539678	Identifier	data		5539661	0					
ANR	5539679	IdentifierDeclStatement	char w0 [ WSZ ] ;	138:1:3503:3515	5539661	1	True				
ANR	5539680	IdentifierDecl	w0 [ WSZ ]		5539661	0					
ANR	5539681	IdentifierDeclType	char [ WSZ ]		5539661	0					
ANR	5539682	Identifier	w0		5539661	1					
ANR	5539683	Identifier	WSZ		5539661	2					
ANR	5539684	IdentifierDeclStatement	char w1 [ WSZ ] ;	139:1:3518:3530	5539661	2	True				
ANR	5539685	IdentifierDecl	w1 [ WSZ ]		5539661	0					
ANR	5539686	IdentifierDeclType	char [ WSZ ]		5539661	0					
ANR	5539687	Identifier	w1		5539661	1					
ANR	5539688	Identifier	WSZ		5539661	2					
ANR	5539689	IdentifierDeclStatement	char w2 [ WSZ ] ;	140:1:3533:3545	5539661	3	True				
ANR	5539690	IdentifierDecl	w2 [ WSZ ]		5539661	0					
ANR	5539691	IdentifierDeclType	char [ WSZ ]		5539661	0					
ANR	5539692	Identifier	w2		5539661	1					
ANR	5539693	Identifier	WSZ		5539661	2					
ANR	5539694	IdentifierDeclStatement	char w3 [ WSZ ] ;	141:1:3548:3560	5539661	4	True				
ANR	5539695	IdentifierDecl	w3 [ WSZ ]		5539661	0					
ANR	5539696	IdentifierDeclType	char [ WSZ ]		5539661	0					
ANR	5539697	Identifier	w3		5539661	1					
ANR	5539698	Identifier	WSZ		5539661	2					
ANR	5539699	IdentifierDeclStatement	char w4 [ WSZ ] ;	142:1:3563:3575	5539661	5	True				
ANR	5539700	IdentifierDecl	w4 [ WSZ ]		5539661	0					
ANR	5539701	IdentifierDeclType	char [ WSZ ]		5539661	0					
ANR	5539702	Identifier	w4		5539661	1					
ANR	5539703	Identifier	WSZ		5539661	2					
ANR	5539704	IdentifierDeclStatement	"char * buf , * ptr , * optr ;"	143:1:3578:3600	5539661	6	True				
ANR	5539705	IdentifierDecl	* buf		5539661	0					
ANR	5539706	IdentifierDeclType	char *		5539661	0					
ANR	5539707	Identifier	buf		5539661	1					
ANR	5539708	IdentifierDecl	* ptr		5539661	1					
ANR	5539709	IdentifierDeclType	char *		5539661	0					
ANR	5539710	Identifier	ptr		5539661	1					
ANR	5539711	IdentifierDecl	* optr		5539661	2					
ANR	5539712	IdentifierDeclType	char *		5539661	0					
ANR	5539713	Identifier	optr		5539661	1					
ANR	5539714	IfStatement	if ( ! ( buf = malloc ( len + 1 ) ) )		5539661	7					
ANR	5539715	Condition	! ( buf = malloc ( len + 1 ) )	146:5:3639:3663	5539661	0	True				
ANR	5539716	UnaryOperationExpression	! ( buf = malloc ( len + 1 ) )		5539661	0					
ANR	5539717	UnaryOperator	!		5539661	0					
ANR	5539718	AssignmentExpression	buf = malloc ( len + 1 )		5539661	1		=			
ANR	5539719	Identifier	buf		5539661	0					
ANR	5539720	CallExpression	malloc ( len + 1 )		5539661	1					
ANR	5539721	Callee	malloc		5539661	0					
ANR	5539722	Identifier	malloc		5539661	0					
ANR	5539723	ArgumentList	len + 1		5539661	1					
ANR	5539724	Argument	len + 1		5539661	0					
ANR	5539725	AdditiveExpression	len + 1		5539661	0		+			
ANR	5539726	Identifier	len		5539661	0					
ANR	5539727	PrimaryExpression	1		5539661	1					
ANR	5539728	CompoundStatement		11:32:194:194	5539661	1					
ANR	5539729	ReturnStatement	return false ;	147:2:3670:3682	5539661	0	True				
ANR	5539730	Identifier	false		5539661	0					
ANR	5539731	ExpressionStatement	"memcpy ( buf , data , len + 1 )"	149:1:3688:3715	5539661	8	True				
ANR	5539732	CallExpression	"memcpy ( buf , data , len + 1 )"		5539661	0					
ANR	5539733	Callee	memcpy		5539661	0					
ANR	5539734	Identifier	memcpy		5539661	0					
ANR	5539735	ArgumentList	buf		5539661	1					
ANR	5539736	Argument	buf		5539661	0					
ANR	5539737	Identifier	buf		5539661	0					
ANR	5539738	Argument	data		5539661	1					
ANR	5539739	Identifier	data		5539661	0					
ANR	5539740	Argument	len + 1		5539661	2					
ANR	5539741	AdditiveExpression	len + 1		5539661	0		+			
ANR	5539742	Identifier	len		5539661	0					
ANR	5539743	PrimaryExpression	1		5539661	1					
ANR	5539744	ExpressionStatement	r_str_trim ( buf )	151:1:3719:3735	5539661	9	True				
ANR	5539745	CallExpression	r_str_trim ( buf )		5539661	0					
ANR	5539746	Callee	r_str_trim		5539661	0					
ANR	5539747	Identifier	r_str_trim		5539661	0					
ANR	5539748	ArgumentList	buf		5539661	1					
ANR	5539749	Argument	buf		5539661	0					
ANR	5539750	Identifier	buf		5539661	0					
ANR	5539751	IfStatement	if ( * buf )		5539661	10					
ANR	5539752	Condition	* buf	152:5:3742:3745	5539661	0	True				
ANR	5539753	UnaryOperationExpression	* buf		5539661	0					
ANR	5539754	UnaryOperator	*		5539661	0					
ANR	5539755	Identifier	buf		5539661	1					
ANR	5539756	CompoundStatement		17:11:276:276	5539661	1					
ANR	5539757	ExpressionStatement	w0 [ 0 ] = '\\0'	153:2:3752:3764	5539661	0	True				
ANR	5539758	AssignmentExpression	w0 [ 0 ] = '\\0'		5539661	0		=			
ANR	5539759	ArrayIndexing	w0 [ 0 ]		5539661	0					
ANR	5539760	Identifier	w0		5539661	0					
ANR	5539761	PrimaryExpression	0		5539661	1					
ANR	5539762	PrimaryExpression	'\\0'		5539661	1					
ANR	5539763	ExpressionStatement	w1 [ 0 ] = '\\0'	154:2:3768:3780	5539661	1	True				
ANR	5539764	AssignmentExpression	w1 [ 0 ] = '\\0'		5539661	0		=			
ANR	5539765	ArrayIndexing	w1 [ 0 ]		5539661	0					
ANR	5539766	Identifier	w1		5539661	0					
ANR	5539767	PrimaryExpression	0		5539661	1					
ANR	5539768	PrimaryExpression	'\\0'		5539661	1					
ANR	5539769	ExpressionStatement	w2 [ 0 ] = '\\0'	155:2:3784:3796	5539661	2	True				
ANR	5539770	AssignmentExpression	w2 [ 0 ] = '\\0'		5539661	0		=			
ANR	5539771	ArrayIndexing	w2 [ 0 ]		5539661	0					
ANR	5539772	Identifier	w2		5539661	0					
ANR	5539773	PrimaryExpression	0		5539661	1					
ANR	5539774	PrimaryExpression	'\\0'		5539661	1					
ANR	5539775	ExpressionStatement	w3 [ 0 ] = '\\0'	156:2:3800:3812	5539661	3	True				
ANR	5539776	AssignmentExpression	w3 [ 0 ] = '\\0'		5539661	0		=			
ANR	5539777	ArrayIndexing	w3 [ 0 ]		5539661	0					
ANR	5539778	Identifier	w3		5539661	0					
ANR	5539779	PrimaryExpression	0		5539661	1					
ANR	5539780	PrimaryExpression	'\\0'		5539661	1					
ANR	5539781	ExpressionStatement	w4 [ 0 ] = '\\0'	157:2:3816:3828	5539661	4	True				
ANR	5539782	AssignmentExpression	w4 [ 0 ] = '\\0'		5539661	0		=			
ANR	5539783	ArrayIndexing	w4 [ 0 ]		5539661	0					
ANR	5539784	Identifier	w4		5539661	0					
ANR	5539785	PrimaryExpression	0		5539661	1					
ANR	5539786	PrimaryExpression	'\\0'		5539661	1					
ANR	5539787	ExpressionStatement	"ptr = strchr ( buf , ' ' )"	158:2:3832:3855	5539661	5	True				
ANR	5539788	AssignmentExpression	"ptr = strchr ( buf , ' ' )"		5539661	0		=			
ANR	5539789	Identifier	ptr		5539661	0					
ANR	5539790	CallExpression	"strchr ( buf , ' ' )"		5539661	1					
ANR	5539791	Callee	strchr		5539661	0					
ANR	5539792	Identifier	strchr		5539661	0					
ANR	5539793	ArgumentList	buf		5539661	1					
ANR	5539794	Argument	buf		5539661	0					
ANR	5539795	Identifier	buf		5539661	0					
ANR	5539796	Argument	' '		5539661	1					
ANR	5539797	PrimaryExpression	' '		5539661	0					
ANR	5539798	IfStatement	if ( ! ptr )		5539661	6					
ANR	5539799	Condition	! ptr	159:6:3863:3866	5539661	0	True				
ANR	5539800	UnaryOperationExpression	! ptr		5539661	0					
ANR	5539801	UnaryOperator	!		5539661	0					
ANR	5539802	Identifier	ptr		5539661	1					
ANR	5539803	CompoundStatement		24:12:397:397	5539661	1					
ANR	5539804	ExpressionStatement	"ptr = strchr ( buf , '\\t' )"	160:3:3874:3898	5539661	0	True				
ANR	5539805	AssignmentExpression	"ptr = strchr ( buf , '\\t' )"		5539661	0		=			
ANR	5539806	Identifier	ptr		5539661	0					
ANR	5539807	CallExpression	"strchr ( buf , '\\t' )"		5539661	1					
ANR	5539808	Callee	strchr		5539661	0					
ANR	5539809	Identifier	strchr		5539661	0					
ANR	5539810	ArgumentList	buf		5539661	1					
ANR	5539811	Argument	buf		5539661	0					
ANR	5539812	Identifier	buf		5539661	0					
ANR	5539813	Argument	'\\t'		5539661	1					
ANR	5539814	PrimaryExpression	'\\t'		5539661	0					
ANR	5539815	IfStatement	if ( ptr )		5539661	7					
ANR	5539816	Condition	ptr	162:6:3910:3912	5539661	0	True				
ANR	5539817	Identifier	ptr		5539661	0					
ANR	5539818	CompoundStatement		27:11:443:443	5539661	1					
ANR	5539819	ExpressionStatement	* ptr = '\\0'	163:3:3920:3931	5539661	0	True				
ANR	5539820	AssignmentExpression	* ptr = '\\0'		5539661	0		=			
ANR	5539821	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539822	UnaryOperator	*		5539661	0					
ANR	5539823	Identifier	ptr		5539661	1					
ANR	5539824	PrimaryExpression	'\\0'		5539661	1					
ANR	5539825	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5539661	1					
ANR	5539826	ForInit	++ ptr ;	164:8:3941:3946	5539661	0	True				
ANR	5539827	UnaryExpression	++ ptr		5539661	0					
ANR	5539828	IncDec	++		5539661	0					
ANR	5539829	Identifier	ptr		5539661	1					
ANR	5539830	Condition	* ptr == ' '	164:15:3948:3958	5539661	1	True				
ANR	5539831	EqualityExpression	* ptr == ' '		5539661	0		==			
ANR	5539832	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539833	UnaryOperator	*		5539661	0					
ANR	5539834	Identifier	ptr		5539661	1					
ANR	5539835	PrimaryExpression	' '		5539661	1					
ANR	5539836	PostIncDecOperationExpression	ptr ++	164:28:3961:3965	5539661	2	True				
ANR	5539837	Identifier	ptr		5539661	0					
ANR	5539838	IncDec	++		5539661	1					
ANR	5539839	CompoundStatement		29:35:496:496	5539661	3					
ANR	5539840	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	167:3:4004:4030	5539661	2	True				
ANR	5539841	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5539661	0					
ANR	5539842	Callee	strncpy		5539661	0					
ANR	5539843	Identifier	strncpy		5539661	0					
ANR	5539844	ArgumentList	w0		5539661	1					
ANR	5539845	Argument	w0		5539661	0					
ANR	5539846	Identifier	w0		5539661	0					
ANR	5539847	Argument	buf		5539661	1					
ANR	5539848	Identifier	buf		5539661	0					
ANR	5539849	Argument	WSZ - 1		5539661	2					
ANR	5539850	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539851	Identifier	WSZ		5539661	0					
ANR	5539852	PrimaryExpression	1		5539661	1					
ANR	5539853	ExpressionStatement	"strncpy ( w1 , ptr , WSZ - 1 )"	168:3:4035:4061	5539661	3	True				
ANR	5539854	CallExpression	"strncpy ( w1 , ptr , WSZ - 1 )"		5539661	0					
ANR	5539855	Callee	strncpy		5539661	0					
ANR	5539856	Identifier	strncpy		5539661	0					
ANR	5539857	ArgumentList	w1		5539661	1					
ANR	5539858	Argument	w1		5539661	0					
ANR	5539859	Identifier	w1		5539661	0					
ANR	5539860	Argument	ptr		5539661	1					
ANR	5539861	Identifier	ptr		5539661	0					
ANR	5539862	Argument	WSZ - 1		5539661	2					
ANR	5539863	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539864	Identifier	WSZ		5539661	0					
ANR	5539865	PrimaryExpression	1		5539661	1					
ANR	5539866	ExpressionStatement	optr = ptr	170:3:4067:4077	5539661	4	True				
ANR	5539867	AssignmentExpression	optr = ptr		5539661	0		=			
ANR	5539868	Identifier	optr		5539661	0					
ANR	5539869	Identifier	ptr		5539661	1					
ANR	5539870	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	171:3:4082:4105	5539661	5	True				
ANR	5539871	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5539661	0		=			
ANR	5539872	Identifier	ptr		5539661	0					
ANR	5539873	CallExpression	"strchr ( ptr , ',' )"		5539661	1					
ANR	5539874	Callee	strchr		5539661	0					
ANR	5539875	Identifier	strchr		5539661	0					
ANR	5539876	ArgumentList	ptr		5539661	1					
ANR	5539877	Argument	ptr		5539661	0					
ANR	5539878	Identifier	ptr		5539661	0					
ANR	5539879	Argument	"','"		5539661	1					
ANR	5539880	PrimaryExpression	"','"		5539661	0					
ANR	5539881	IfStatement	if ( ptr )		5539661	6					
ANR	5539882	Condition	ptr	172:7:4114:4116	5539661	0	True				
ANR	5539883	Identifier	ptr		5539661	0					
ANR	5539884	CompoundStatement		37:12:647:647	5539661	1					
ANR	5539885	ExpressionStatement	* ptr = '\\0'	173:4:4125:4136	5539661	0	True				
ANR	5539886	AssignmentExpression	* ptr = '\\0'		5539661	0		=			
ANR	5539887	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539888	UnaryOperator	*		5539661	0					
ANR	5539889	Identifier	ptr		5539661	1					
ANR	5539890	PrimaryExpression	'\\0'		5539661	1					
ANR	5539891	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5539661	1					
ANR	5539892	ForInit	++ ptr ;	174:9:4147:4152	5539661	0	True				
ANR	5539893	UnaryExpression	++ ptr		5539661	0					
ANR	5539894	IncDec	++		5539661	0					
ANR	5539895	Identifier	ptr		5539661	1					
ANR	5539896	Condition	* ptr == ' '	174:16:4154:4164	5539661	1	True				
ANR	5539897	EqualityExpression	* ptr == ' '		5539661	0		==			
ANR	5539898	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539899	UnaryOperator	*		5539661	0					
ANR	5539900	Identifier	ptr		5539661	1					
ANR	5539901	PrimaryExpression	' '		5539661	1					
ANR	5539902	PostIncDecOperationExpression	ptr ++	174:29:4167:4171	5539661	2	True				
ANR	5539903	Identifier	ptr		5539661	0					
ANR	5539904	IncDec	++		5539661	1					
ANR	5539905	CompoundStatement		39:36:702:702	5539661	3					
ANR	5539906	ExpressionStatement	"strncpy ( w1 , optr , WSZ - 1 )"	177:4:4213:4240	5539661	2	True				
ANR	5539907	CallExpression	"strncpy ( w1 , optr , WSZ - 1 )"		5539661	0					
ANR	5539908	Callee	strncpy		5539661	0					
ANR	5539909	Identifier	strncpy		5539661	0					
ANR	5539910	ArgumentList	w1		5539661	1					
ANR	5539911	Argument	w1		5539661	0					
ANR	5539912	Identifier	w1		5539661	0					
ANR	5539913	Argument	optr		5539661	1					
ANR	5539914	Identifier	optr		5539661	0					
ANR	5539915	Argument	WSZ - 1		5539661	2					
ANR	5539916	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539917	Identifier	WSZ		5539661	0					
ANR	5539918	PrimaryExpression	1		5539661	1					
ANR	5539919	ExpressionStatement	"strncpy ( w2 , ptr , WSZ - 1 )"	178:4:4246:4272	5539661	3	True				
ANR	5539920	CallExpression	"strncpy ( w2 , ptr , WSZ - 1 )"		5539661	0					
ANR	5539921	Callee	strncpy		5539661	0					
ANR	5539922	Identifier	strncpy		5539661	0					
ANR	5539923	ArgumentList	w2		5539661	1					
ANR	5539924	Argument	w2		5539661	0					
ANR	5539925	Identifier	w2		5539661	0					
ANR	5539926	Argument	ptr		5539661	1					
ANR	5539927	Identifier	ptr		5539661	0					
ANR	5539928	Argument	WSZ - 1		5539661	2					
ANR	5539929	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539930	Identifier	WSZ		5539661	0					
ANR	5539931	PrimaryExpression	1		5539661	1					
ANR	5539932	ExpressionStatement	optr = ptr	179:4:4278:4288	5539661	4	True				
ANR	5539933	AssignmentExpression	optr = ptr		5539661	0		=			
ANR	5539934	Identifier	optr		5539661	0					
ANR	5539935	Identifier	ptr		5539661	1					
ANR	5539936	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	180:4:4294:4317	5539661	5	True				
ANR	5539937	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5539661	0		=			
ANR	5539938	Identifier	ptr		5539661	0					
ANR	5539939	CallExpression	"strchr ( ptr , ',' )"		5539661	1					
ANR	5539940	Callee	strchr		5539661	0					
ANR	5539941	Identifier	strchr		5539661	0					
ANR	5539942	ArgumentList	ptr		5539661	1					
ANR	5539943	Argument	ptr		5539661	0					
ANR	5539944	Identifier	ptr		5539661	0					
ANR	5539945	Argument	"','"		5539661	1					
ANR	5539946	PrimaryExpression	"','"		5539661	0					
ANR	5539947	IfStatement	if ( ptr )		5539661	6					
ANR	5539948	Condition	ptr	181:8:4327:4329	5539661	0	True				
ANR	5539949	Identifier	ptr		5539661	0					
ANR	5539950	CompoundStatement		46:13:860:860	5539661	1					
ANR	5539951	ExpressionStatement	* ptr = '\\0'	182:5:4339:4350	5539661	0	True				
ANR	5539952	AssignmentExpression	* ptr = '\\0'		5539661	0		=			
ANR	5539953	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539954	UnaryOperator	*		5539661	0					
ANR	5539955	Identifier	ptr		5539661	1					
ANR	5539956	PrimaryExpression	'\\0'		5539661	1					
ANR	5539957	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5539661	1					
ANR	5539958	ForInit	++ ptr ;	183:10:4362:4367	5539661	0	True				
ANR	5539959	UnaryExpression	++ ptr		5539661	0					
ANR	5539960	IncDec	++		5539661	0					
ANR	5539961	Identifier	ptr		5539661	1					
ANR	5539962	Condition	* ptr == ' '	183:17:4369:4379	5539661	1	True				
ANR	5539963	EqualityExpression	* ptr == ' '		5539661	0		==			
ANR	5539964	UnaryOperationExpression	* ptr		5539661	0					
ANR	5539965	UnaryOperator	*		5539661	0					
ANR	5539966	Identifier	ptr		5539661	1					
ANR	5539967	PrimaryExpression	' '		5539661	1					
ANR	5539968	PostIncDecOperationExpression	ptr ++	183:30:4382:4386	5539661	2	True				
ANR	5539969	Identifier	ptr		5539661	0					
ANR	5539970	IncDec	++		5539661	1					
ANR	5539971	CompoundStatement		48:37:917:917	5539661	3					
ANR	5539972	ExpressionStatement	"strncpy ( w2 , optr , WSZ - 1 )"	186:5:4431:4458	5539661	2	True				
ANR	5539973	CallExpression	"strncpy ( w2 , optr , WSZ - 1 )"		5539661	0					
ANR	5539974	Callee	strncpy		5539661	0					
ANR	5539975	Identifier	strncpy		5539661	0					
ANR	5539976	ArgumentList	w2		5539661	1					
ANR	5539977	Argument	w2		5539661	0					
ANR	5539978	Identifier	w2		5539661	0					
ANR	5539979	Argument	optr		5539661	1					
ANR	5539980	Identifier	optr		5539661	0					
ANR	5539981	Argument	WSZ - 1		5539661	2					
ANR	5539982	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539983	Identifier	WSZ		5539661	0					
ANR	5539984	PrimaryExpression	1		5539661	1					
ANR	5539985	ExpressionStatement	"strncpy ( w3 , ptr , WSZ - 1 )"	187:5:4465:4491	5539661	3	True				
ANR	5539986	CallExpression	"strncpy ( w3 , ptr , WSZ - 1 )"		5539661	0					
ANR	5539987	Callee	strncpy		5539661	0					
ANR	5539988	Identifier	strncpy		5539661	0					
ANR	5539989	ArgumentList	w3		5539661	1					
ANR	5539990	Argument	w3		5539661	0					
ANR	5539991	Identifier	w3		5539661	0					
ANR	5539992	Argument	ptr		5539661	1					
ANR	5539993	Identifier	ptr		5539661	0					
ANR	5539994	Argument	WSZ - 1		5539661	2					
ANR	5539995	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5539996	Identifier	WSZ		5539661	0					
ANR	5539997	PrimaryExpression	1		5539661	1					
ANR	5539998	ExpressionStatement	optr = ptr	188:5:4498:4508	5539661	4	True				
ANR	5539999	AssignmentExpression	optr = ptr		5539661	0		=			
ANR	5540000	Identifier	optr		5539661	0					
ANR	5540001	Identifier	ptr		5539661	1					
ANR	5540002	ExpressionStatement	"ptr = strchr ( ptr , ',' )"	190:5:4529:4552	5539661	5	True				
ANR	5540003	AssignmentExpression	"ptr = strchr ( ptr , ',' )"		5539661	0		=			
ANR	5540004	Identifier	ptr		5539661	0					
ANR	5540005	CallExpression	"strchr ( ptr , ',' )"		5539661	1					
ANR	5540006	Callee	strchr		5539661	0					
ANR	5540007	Identifier	strchr		5539661	0					
ANR	5540008	ArgumentList	ptr		5539661	1					
ANR	5540009	Argument	ptr		5539661	0					
ANR	5540010	Identifier	ptr		5539661	0					
ANR	5540011	Argument	"','"		5539661	1					
ANR	5540012	PrimaryExpression	"','"		5539661	0					
ANR	5540013	IfStatement	if ( ptr )		5539661	6					
ANR	5540014	Condition	ptr	191:9:4563:4565	5539661	0	True				
ANR	5540015	Identifier	ptr		5539661	0					
ANR	5540016	CompoundStatement		56:14:1096:1096	5539661	1					
ANR	5540017	ExpressionStatement	* ptr = '\\0'	192:6:4576:4587	5539661	0	True				
ANR	5540018	AssignmentExpression	* ptr = '\\0'		5539661	0		=			
ANR	5540019	UnaryOperationExpression	* ptr		5539661	0					
ANR	5540020	UnaryOperator	*		5539661	0					
ANR	5540021	Identifier	ptr		5539661	1					
ANR	5540022	PrimaryExpression	'\\0'		5539661	1					
ANR	5540023	ForStatement	for ( ++ ptr ; * ptr == ' ' ; ptr ++ )		5539661	1					
ANR	5540024	ForInit	++ ptr ;	193:11:4600:4605	5539661	0	True				
ANR	5540025	UnaryExpression	++ ptr		5539661	0					
ANR	5540026	IncDec	++		5539661	0					
ANR	5540027	Identifier	ptr		5539661	1					
ANR	5540028	Condition	* ptr == ' '	193:18:4607:4617	5539661	1	True				
ANR	5540029	EqualityExpression	* ptr == ' '		5539661	0		==			
ANR	5540030	UnaryOperationExpression	* ptr		5539661	0					
ANR	5540031	UnaryOperator	*		5539661	0					
ANR	5540032	Identifier	ptr		5539661	1					
ANR	5540033	PrimaryExpression	' '		5539661	1					
ANR	5540034	PostIncDecOperationExpression	ptr ++	193:31:4620:4624	5539661	2	True				
ANR	5540035	Identifier	ptr		5539661	0					
ANR	5540036	IncDec	++		5539661	1					
ANR	5540037	CompoundStatement		58:38:1155:1155	5539661	3					
ANR	5540038	ExpressionStatement	"strncpy ( w3 , optr , WSZ - 1 )"	196:6:4672:4699	5539661	2	True				
ANR	5540039	CallExpression	"strncpy ( w3 , optr , WSZ - 1 )"		5539661	0					
ANR	5540040	Callee	strncpy		5539661	0					
ANR	5540041	Identifier	strncpy		5539661	0					
ANR	5540042	ArgumentList	w3		5539661	1					
ANR	5540043	Argument	w3		5539661	0					
ANR	5540044	Identifier	w3		5539661	0					
ANR	5540045	Argument	optr		5539661	1					
ANR	5540046	Identifier	optr		5539661	0					
ANR	5540047	Argument	WSZ - 1		5539661	2					
ANR	5540048	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5540049	Identifier	WSZ		5539661	0					
ANR	5540050	PrimaryExpression	1		5539661	1					
ANR	5540051	ExpressionStatement	"strncpy ( w4 , ptr , WSZ - 1 )"	197:6:4707:4733	5539661	3	True				
ANR	5540052	CallExpression	"strncpy ( w4 , ptr , WSZ - 1 )"		5539661	0					
ANR	5540053	Callee	strncpy		5539661	0					
ANR	5540054	Identifier	strncpy		5539661	0					
ANR	5540055	ArgumentList	w4		5539661	1					
ANR	5540056	Argument	w4		5539661	0					
ANR	5540057	Identifier	w4		5539661	0					
ANR	5540058	Argument	ptr		5539661	1					
ANR	5540059	Identifier	ptr		5539661	0					
ANR	5540060	Argument	WSZ - 1		5539661	2					
ANR	5540061	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5540062	Identifier	WSZ		5539661	0					
ANR	5540063	PrimaryExpression	1		5539661	1					
ANR	5540064	ElseStatement	else		5539661	0					
ANR	5540065	CompoundStatement		66:9:1290:1290	5539661	0					
ANR	5540066	ExpressionStatement	"strncpy ( w0 , buf , WSZ - 1 )"	202:3:4767:4793	5539661	0	True				
ANR	5540067	CallExpression	"strncpy ( w0 , buf , WSZ - 1 )"		5539661	0					
ANR	5540068	Callee	strncpy		5539661	0					
ANR	5540069	Identifier	strncpy		5539661	0					
ANR	5540070	ArgumentList	w0		5539661	1					
ANR	5540071	Argument	w0		5539661	0					
ANR	5540072	Identifier	w0		5539661	0					
ANR	5540073	Argument	buf		5539661	1					
ANR	5540074	Identifier	buf		5539661	0					
ANR	5540075	Argument	WSZ - 1		5539661	2					
ANR	5540076	AdditiveExpression	WSZ - 1		5539661	0		-			
ANR	5540077	Identifier	WSZ		5539661	0					
ANR	5540078	PrimaryExpression	1		5539661	1					
ANR	5540079	CompoundStatement		71:3:1380:1390	5539661	8					
ANR	5540080	IdentifierDeclStatement	"const char * wa [ ] = { w0 , w1 , w2 , w3 , w4 } ;"	205:3:4806:4847	5539661	0	True				
ANR	5540081	IdentifierDecl	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5539661	0					
ANR	5540082	IdentifierDeclType	const char * [ ]		5539661	0					
ANR	5540083	Identifier	wa		5539661	1					
ANR	5540084	AssignmentExpression	"* wa [ ] = { w0 , w1 , w2 , w3 , w4 }"		5539661	2		=			
ANR	5540085	Identifier	wa		5539661	0					
ANR	5540086	InitializerList	w0		5539661	1					
ANR	5540087	Identifier	w0		5539661	0					
ANR	5540088	Identifier	w1		5539661	1					
ANR	5540089	Identifier	w2		5539661	2					
ANR	5540090	Identifier	w3		5539661	3					
ANR	5540091	Identifier	w4		5539661	4					
ANR	5540092	IdentifierDeclStatement	int nw = 0 ;	206:3:4852:4862	5539661	1	True				
ANR	5540093	IdentifierDecl	nw = 0		5539661	0					
ANR	5540094	IdentifierDeclType	int		5539661	0					
ANR	5540095	Identifier	nw		5539661	1					
ANR	5540096	AssignmentExpression	nw = 0		5539661	2		=			
ANR	5540097	Identifier	nw		5539661	0					
ANR	5540098	PrimaryExpression	0		5539661	1					
ANR	5540099	ForStatement	for ( i = 0 ; i < 5 ; i ++ )		5539661	2					
ANR	5540100	ForInit	i = 0 ;	207:8:4872:4877	5539661	0	True				
ANR	5540101	AssignmentExpression	i = 0		5539661	0		=			
ANR	5540102	Identifier	i		5539661	0					
ANR	5540103	PrimaryExpression	0		5539661	1					
ANR	5540104	Condition	i < 5	207:15:4879:4883	5539661	1	True				
ANR	5540105	RelationalExpression	i < 5		5539661	0		<			
ANR	5540106	Identifier	i		5539661	0					
ANR	5540107	PrimaryExpression	5		5539661	1					
ANR	5540108	PostIncDecOperationExpression	i ++	207:22:4886:4888	5539661	2	True				
ANR	5540109	Identifier	i		5539661	0					
ANR	5540110	IncDec	++		5539661	1					
ANR	5540111	CompoundStatement		72:27:1419:1419	5539661	3					
ANR	5540112	IfStatement	if ( wa [ i ] [ 0 ] != '\\0' )		5539661	0					
ANR	5540113	Condition	wa [ i ] [ 0 ] != '\\0'	208:8:4901:4916	5539661	0	True				
ANR	5540114	EqualityExpression	wa [ i ] [ 0 ] != '\\0'		5539661	0		!=			
ANR	5540115	ArrayIndexing	wa [ i ] [ 0 ]		5539661	0					
ANR	5540116	ArrayIndexing	wa [ i ]		5539661	0					
ANR	5540117	Identifier	wa		5539661	0					
ANR	5540118	Identifier	i		5539661	1					
ANR	5540119	PrimaryExpression	0		5539661	1					
ANR	5540120	PrimaryExpression	'\\0'		5539661	1					
ANR	5540121	CompoundStatement		73:26:1447:1447	5539661	1					
ANR	5540122	ExpressionStatement	nw ++	209:5:4926:4930	5539661	0	True				
ANR	5540123	PostIncDecOperationExpression	nw ++		5539661	0					
ANR	5540124	Identifier	nw		5539661	0					
ANR	5540125	IncDec	++		5539661	1					
ANR	5540126	ExpressionStatement	"( void ) replace ( nw , wa , str )"	212:3:4946:4973	5539661	3	True				
ANR	5540127	CastExpression	"( void ) replace ( nw , wa , str )"		5539661	0					
ANR	5540128	CastTarget	void		5539661	0					
ANR	5540129	CallExpression	"replace ( nw , wa , str )"		5539661	1					
ANR	5540130	Callee	replace		5539661	0					
ANR	5540131	Identifier	replace		5539661	0					
ANR	5540132	ArgumentList	nw		5539661	1					
ANR	5540133	Argument	nw		5539661	0					
ANR	5540134	Identifier	nw		5539661	0					
ANR	5540135	Argument	wa		5539661	1					
ANR	5540136	Identifier	wa		5539661	0					
ANR	5540137	Argument	str		5539661	2					
ANR	5540138	Identifier	str		5539661	0					
ANR	5540139	ExpressionStatement	free ( buf )	215:1:4983:4993	5539661	11	True				
ANR	5540140	CallExpression	free ( buf )		5539661	0					
ANR	5540141	Callee	free		5539661	0					
ANR	5540142	Identifier	free		5539661	0					
ANR	5540143	ArgumentList	buf		5539661	1					
ANR	5540144	Argument	buf		5539661	0					
ANR	5540145	Identifier	buf		5539661	0					
ANR	5540146	ReturnStatement	return true ;	216:1:4996:5007	5539661	12	True				
ANR	5540147	Identifier	true		5539661	0					
ANR	5540148	ReturnType	static int		5539661	1					
ANR	5540149	Identifier	parse		5539661	2					
ANR	5540150	ParameterList	"RParse * p , const char * data , char * str"		5539661	3					
ANR	5540151	Parameter	RParse * p	136:17:3431:3439	5539661	0	True				
ANR	5540152	ParameterType	RParse *		5539661	0					
ANR	5540153	Identifier	p		5539661	1					
ANR	5540154	Parameter	const char * data	136:28:3442:3457	5539661	1	True				
ANR	5540155	ParameterType	const char *		5539661	0					
ANR	5540156	Identifier	data		5539661	1					
ANR	5540157	Parameter	char * str	136:46:3460:3468	5539661	2	True				
ANR	5540158	ParameterType	char *		5539661	0					
ANR	5540159	Identifier	str		5539661	1					
ANR	5540160	CFGEntryNode	ENTRY		5539661		True				
ANR	5540161	CFGExitNode	EXIT		5539661		True				
ANR	5540162	Symbol	* w4		5539661						
ANR	5540163	Symbol	* w3		5539661						
ANR	5540164	Symbol	* w2		5539661						
ANR	5540165	Symbol	* w1		5539661						
ANR	5540166	Symbol	data		5539661						
ANR	5540167	Symbol	strchr		5539661						
ANR	5540168	Symbol	nw		5539661						
ANR	5540169	Symbol	wa		5539661						
ANR	5540170	Symbol	strlen		5539661						
ANR	5540171	Symbol	* wa		5539661						
ANR	5540172	Symbol	len		5539661						
ANR	5540173	Symbol	* ptr		5539661						
ANR	5540174	Symbol	w0		5539661						
ANR	5540175	Symbol	w1		5539661						
ANR	5540176	Symbol	w2		5539661						
ANR	5540177	Symbol	w3		5539661						
ANR	5540178	Symbol	* w0		5539661						
ANR	5540179	Symbol	w4		5539661						
ANR	5540180	Symbol	malloc		5539661						
ANR	5540181	Symbol	* buf		5539661						
ANR	5540182	Symbol	* * i		5539661						
ANR	5540183	Symbol	false		5539661						
ANR	5540184	Symbol	i		5539661						
ANR	5540185	Symbol	optr		5539661						
ANR	5540186	Symbol	ptr		5539661						
ANR	5540187	Symbol	p		5539661						
ANR	5540188	Symbol	str		5539661						
ANR	5540189	Symbol	buf		5539661						
ANR	5540190	Symbol	* i		5539661						
ANR	5540191	Symbol	* * wa		5539661						
ANR	5540192	Symbol	true		5539661						
ANR	5540193	Symbol	WSZ		5539661						
ANR	5540194	DeclStmt									
ANR	5540195	Decl							RParsePlugin	RParsePlugin	r_parse_plugin_avr_pseudo
ANR	5540196	DeclStmt									
ANR	5540197	Decl							R_API RLibStruct	R_API RLibStruct	radare_plugin
