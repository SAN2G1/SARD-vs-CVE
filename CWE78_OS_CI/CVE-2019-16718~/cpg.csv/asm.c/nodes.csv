command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	385736	File	data/converged/CVE-2019-16718~_radare2/asm.c								
ANR	385737	Function	get_register_id	38:0:1432:1577							
ANR	385738	FunctionDef	get_register_id (char reg)		385737	0					
ANR	385739	CompoundStatement		38:37:1469:1577	385737	0					
ANR	385740	IdentifierDeclStatement	"const char * regs = ""ABCXYZIJ"" ;"	39:1:1472:1501	385737	0	True				
ANR	385741	IdentifierDecl	"* regs = ""ABCXYZIJ"""		385737	0					
ANR	385742	IdentifierDeclType	const char *		385737	0					
ANR	385743	Identifier	regs		385737	1					
ANR	385744	AssignmentExpression	"* regs = ""ABCXYZIJ"""		385737	2		=			
ANR	385745	Identifier	regs		385737	0					
ANR	385746	PrimaryExpression	"""ABCXYZIJ"""		385737	1					
ANR	385747	IdentifierDeclStatement	"const char * p = strchr ( regs , reg ) ;"	40:1:1504:1538	385737	1	True				
ANR	385748	IdentifierDecl	"* p = strchr ( regs , reg )"		385737	0					
ANR	385749	IdentifierDeclType	const char *		385737	0					
ANR	385750	Identifier	p		385737	1					
ANR	385751	AssignmentExpression	"* p = strchr ( regs , reg )"		385737	2		=			
ANR	385752	Identifier	p		385737	0					
ANR	385753	CallExpression	"strchr ( regs , reg )"		385737	1					
ANR	385754	Callee	strchr		385737	0					
ANR	385755	Identifier	strchr		385737	0					
ANR	385756	ArgumentList	regs		385737	1					
ANR	385757	Argument	regs		385737	0					
ANR	385758	Identifier	regs		385737	0					
ANR	385759	Argument	reg		385737	1					
ANR	385760	Identifier	reg		385737	0					
ANR	385761	ReturnStatement	return p ? ( int ) ( size_t ) ( p - regs ) : 0 ;	41:1:1541:1575	385737	2	True				
ANR	385762	ConditionalExpression	p ? ( int ) ( size_t ) ( p - regs ) : 0		385737	0					
ANR	385763	Condition	p		385737	0					
ANR	385764	Identifier	p		385737	0					
ANR	385765	CastExpression	( int ) ( size_t ) ( p - regs )		385737	1					
ANR	385766	CastTarget	int		385737	0					
ANR	385767	CastExpression	( size_t ) ( p - regs )		385737	1					
ANR	385768	CastTarget	size_t		385737	0					
ANR	385769	AdditiveExpression	p - regs		385737	1		-			
ANR	385770	Identifier	p		385737	0					
ANR	385771	Identifier	regs		385737	1					
ANR	385772	PrimaryExpression	0		385737	2					
ANR	385773	ReturnType	static ut8		385737	1					
ANR	385774	Identifier	get_register_id		385737	2					
ANR	385775	ParameterList	char reg		385737	3					
ANR	385776	Parameter	char reg	38:27:1459:1466	385737	0	True				
ANR	385777	ParameterType	char		385737	0					
ANR	385778	Identifier	reg		385737	1					
ANR	385779	CFGEntryNode	ENTRY		385737		True				
ANR	385780	CFGExitNode	EXIT		385737		True				
ANR	385781	Symbol	p		385737						
ANR	385782	Symbol	reg		385737						
ANR	385783	Symbol	strchr		385737						
ANR	385784	Symbol	regs		385737						
ANR	385785	Function	clean_line	44:0:1580:2044							
ANR	385786	FunctionDef	"clean_line (char * oline , const char * line)"		385785	0					
ANR	385787	CompoundStatement		44:54:1634:2044	385785	0					
ANR	385788	IdentifierDeclStatement	"int cn = 0 , n = 0 ;"	45:1:1637:1654	385785	0	True				
ANR	385789	IdentifierDecl	cn = 0		385785	0					
ANR	385790	IdentifierDeclType	int		385785	0					
ANR	385791	Identifier	cn		385785	1					
ANR	385792	AssignmentExpression	cn = 0		385785	2		=			
ANR	385793	Identifier	cn		385785	0					
ANR	385794	PrimaryExpression	0		385785	1					
ANR	385795	IdentifierDecl	n = 0		385785	1					
ANR	385796	IdentifierDeclType	int		385785	0					
ANR	385797	Identifier	n		385785	1					
ANR	385798	AssignmentExpression	n = 0		385785	2		=			
ANR	385799	Identifier	n		385785	0					
ANR	385800	PrimaryExpression	0		385785	1					
ANR	385801	WhileStatement	while ( line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';' )		385785	1					
ANR	385802	Condition	line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';'	47:8:1665:1716	385785	0	True				
ANR	385803	AndExpression	line [ cn ] != 0 && line [ cn ] != '\\n' && line [ cn ] != ';'		385785	0		&&			
ANR	385804	EqualityExpression	line [ cn ] != 0		385785	0		!=			
ANR	385805	ArrayIndexing	line [ cn ]		385785	0					
ANR	385806	Identifier	line		385785	0					
ANR	385807	Identifier	cn		385785	1					
ANR	385808	PrimaryExpression	0		385785	1					
ANR	385809	AndExpression	line [ cn ] != '\\n' && line [ cn ] != ';'		385785	1		&&			
ANR	385810	EqualityExpression	line [ cn ] != '\\n'		385785	0		!=			
ANR	385811	ArrayIndexing	line [ cn ]		385785	0					
ANR	385812	Identifier	line		385785	0					
ANR	385813	Identifier	cn		385785	1					
ANR	385814	PrimaryExpression	'\\n'		385785	1					
ANR	385815	EqualityExpression	line [ cn ] != ';'		385785	1		!=			
ANR	385816	ArrayIndexing	line [ cn ]		385785	0					
ANR	385817	Identifier	line		385785	0					
ANR	385818	Identifier	cn		385785	1					
ANR	385819	PrimaryExpression	';'		385785	1					
ANR	385820	CompoundStatement		4:62:84:84	385785	1					
ANR	385821	IfStatement	if ( line [ cn ] >= '!' && line [ cn ] <= '~' )		385785	0					
ANR	385822	Condition	line [ cn ] >= '!' && line [ cn ] <= '~'	48:6:1727:1760	385785	0	True				
ANR	385823	AndExpression	line [ cn ] >= '!' && line [ cn ] <= '~'		385785	0		&&			
ANR	385824	RelationalExpression	line [ cn ] >= '!'		385785	0		>=			
ANR	385825	ArrayIndexing	line [ cn ]		385785	0					
ANR	385826	Identifier	line		385785	0					
ANR	385827	Identifier	cn		385785	1					
ANR	385828	PrimaryExpression	'!'		385785	1					
ANR	385829	RelationalExpression	line [ cn ] <= '~'		385785	1		<=			
ANR	385830	ArrayIndexing	line [ cn ]		385785	0					
ANR	385831	Identifier	line		385785	0					
ANR	385832	Identifier	cn		385785	1					
ANR	385833	PrimaryExpression	'~'		385785	1					
ANR	385834	CompoundStatement		6:3:133:161	385785	1					
ANR	385835	IdentifierDeclStatement	char current_char = line [ cn ] ;	49:3:1768:1796	385785	0	True				
ANR	385836	IdentifierDecl	current_char = line [ cn ]		385785	0					
ANR	385837	IdentifierDeclType	char		385785	0					
ANR	385838	Identifier	current_char		385785	1					
ANR	385839	AssignmentExpression	current_char = line [ cn ]		385785	2		=			
ANR	385840	Identifier	current_char		385785	0					
ANR	385841	ArrayIndexing	line [ cn ]		385785	1					
ANR	385842	Identifier	line		385785	0					
ANR	385843	Identifier	cn		385785	1					
ANR	385844	IfStatement	if ( current_char >= 'a' && current_char <= 'z' )		385785	1					
ANR	385845	Condition	current_char >= 'a' && current_char <= 'z'	52:7:1840:1881	385785	0	True				
ANR	385846	AndExpression	current_char >= 'a' && current_char <= 'z'		385785	0		&&			
ANR	385847	RelationalExpression	current_char >= 'a'		385785	0		>=			
ANR	385848	Identifier	current_char		385785	0					
ANR	385849	PrimaryExpression	'a'		385785	1					
ANR	385850	RelationalExpression	current_char <= 'z'		385785	1		<=			
ANR	385851	Identifier	current_char		385785	0					
ANR	385852	PrimaryExpression	'z'		385785	1					
ANR	385853	ExpressionStatement	current_char = toupper ( ( unsigned char ) current_char )	53:4:1888:1940	385785	1	True				
ANR	385854	AssignmentExpression	current_char = toupper ( ( unsigned char ) current_char )		385785	0		=			
ANR	385855	Identifier	current_char		385785	0					
ANR	385856	CallExpression	toupper ( ( unsigned char ) current_char )		385785	1					
ANR	385857	Callee	toupper		385785	0					
ANR	385858	Identifier	toupper		385785	0					
ANR	385859	ArgumentList	( unsigned char ) current_char		385785	1					
ANR	385860	Argument	( unsigned char ) current_char		385785	0					
ANR	385861	CastExpression	( unsigned char ) current_char		385785	0					
ANR	385862	CastTarget	unsigned char		385785	0					
ANR	385863	Identifier	current_char		385785	1					
ANR	385864	ExpressionStatement	oline [ n ] = current_char	56:3:1981:2004	385785	2	True				
ANR	385865	AssignmentExpression	oline [ n ] = current_char		385785	0		=			
ANR	385866	ArrayIndexing	oline [ n ]		385785	0					
ANR	385867	Identifier	oline		385785	0					
ANR	385868	Identifier	n		385785	1					
ANR	385869	Identifier	current_char		385785	1					
ANR	385870	ExpressionStatement	n ++	57:3:2009:2012	385785	3	True				
ANR	385871	PostIncDecOperationExpression	n ++		385785	0					
ANR	385872	Identifier	n		385785	0					
ANR	385873	IncDec	++		385785	1					
ANR	385874	ExpressionStatement	cn ++	59:2:2020:2024	385785	1	True				
ANR	385875	PostIncDecOperationExpression	cn ++		385785	0					
ANR	385876	Identifier	cn		385785	0					
ANR	385877	IncDec	++		385785	1					
ANR	385878	ExpressionStatement	oline [ n ] = 0	61:1:2030:2042	385785	2	True				
ANR	385879	AssignmentExpression	oline [ n ] = 0		385785	0		=			
ANR	385880	ArrayIndexing	oline [ n ]		385785	0					
ANR	385881	Identifier	oline		385785	0					
ANR	385882	Identifier	n		385785	1					
ANR	385883	PrimaryExpression	0		385785	1					
ANR	385884	ReturnType	static void		385785	1					
ANR	385885	Identifier	clean_line		385785	2					
ANR	385886	ParameterList	"char * oline , const char * line"		385785	3					
ANR	385887	Parameter	char * oline	44:23:1603:1613	385785	0	True				
ANR	385888	ParameterType	char *		385785	0					
ANR	385889	Identifier	oline		385785	1					
ANR	385890	Parameter	const char * line	44:36:1616:1631	385785	1	True				
ANR	385891	ParameterType	const char *		385785	0					
ANR	385892	Identifier	line		385785	1					
ANR	385893	CFGEntryNode	ENTRY		385785		True				
ANR	385894	CFGExitNode	EXIT		385785		True				
ANR	385895	Symbol	* cn		385785						
ANR	385896	Symbol	* oline		385785						
ANR	385897	Symbol	toupper		385785						
ANR	385898	Symbol	line		385785						
ANR	385899	Symbol	* n		385785						
ANR	385900	Symbol	current_char		385785						
ANR	385901	Symbol	cn		385785						
ANR	385902	Symbol	* line		385785						
ANR	385903	Symbol	oline		385785						
ANR	385904	Symbol	n		385785						
ANR	385905	Function	decode_parameter	67:0:2134:5711							
ANR	385906	FunctionDef	"decode_parameter (char * param , int * extra_word_needed , ut16 * extra_word_value)"		385905	0					
ANR	385907	CompoundStatement		67:89:2223:5711	385905	0					
ANR	385908	IdentifierDeclStatement	int square_brackets = 0 ;	69:1:2259:2282	385905	0	True				
ANR	385909	IdentifierDecl	square_brackets = 0		385905	0					
ANR	385910	IdentifierDeclType	int		385905	0					
ANR	385911	Identifier	square_brackets		385905	1					
ANR	385912	AssignmentExpression	square_brackets = 0		385905	2		=			
ANR	385913	Identifier	square_brackets		385905	0					
ANR	385914	PrimaryExpression	0		385905	1					
ANR	385915	IdentifierDeclStatement	"int first_sqbracket = 0 , last_sqbracket = 0 ;"	70:1:2285:2328	385905	1	True				
ANR	385916	IdentifierDecl	first_sqbracket = 0		385905	0					
ANR	385917	IdentifierDeclType	int		385905	0					
ANR	385918	Identifier	first_sqbracket		385905	1					
ANR	385919	AssignmentExpression	first_sqbracket = 0		385905	2		=			
ANR	385920	Identifier	first_sqbracket		385905	0					
ANR	385921	PrimaryExpression	0		385905	1					
ANR	385922	IdentifierDecl	last_sqbracket = 0		385905	1					
ANR	385923	IdentifierDeclType	int		385905	0					
ANR	385924	Identifier	last_sqbracket		385905	1					
ANR	385925	AssignmentExpression	last_sqbracket = 0		385905	2		=			
ANR	385926	Identifier	last_sqbracket		385905	0					
ANR	385927	PrimaryExpression	0		385905	1					
ANR	385928	IfStatement	if ( param [ 0 ] == '[' )		385905	2					
ANR	385929	Condition	param [ 0 ] == '['	71:5:2335:2349	385905	0	True				
ANR	385930	EqualityExpression	param [ 0 ] == '['		385905	0		==			
ANR	385931	ArrayIndexing	param [ 0 ]		385905	0					
ANR	385932	Identifier	param		385905	0					
ANR	385933	PrimaryExpression	0		385905	1					
ANR	385934	PrimaryExpression	'['		385905	1					
ANR	385935	CompoundStatement		5:22:128:128	385905	1					
ANR	385936	ExpressionStatement	first_sqbracket = 1	72:2:2356:2375	385905	0	True				
ANR	385937	AssignmentExpression	first_sqbracket = 1		385905	0		=			
ANR	385938	Identifier	first_sqbracket		385905	0					
ANR	385939	PrimaryExpression	1		385905	1					
ANR	385940	ExpressionStatement	param ++	73:2:2379:2386	385905	1	True				
ANR	385941	PostIncDecOperationExpression	param ++		385905	0					
ANR	385942	Identifier	param		385905	0					
ANR	385943	IncDec	++		385905	1					
ANR	385944	IfStatement	if ( param [ strlen ( param ) - 1 ] == ']' )		385905	3					
ANR	385945	Condition	param [ strlen ( param ) - 1 ] == ']'	75:5:2396:2426	385905	0	True				
ANR	385946	EqualityExpression	param [ strlen ( param ) - 1 ] == ']'		385905	0		==			
ANR	385947	ArrayIndexing	param [ strlen ( param ) - 1 ]		385905	0					
ANR	385948	Identifier	param		385905	0					
ANR	385949	AdditiveExpression	strlen ( param ) - 1		385905	1		-			
ANR	385950	CallExpression	strlen ( param )		385905	0					
ANR	385951	Callee	strlen		385905	0					
ANR	385952	Identifier	strlen		385905	0					
ANR	385953	ArgumentList	param		385905	1					
ANR	385954	Argument	param		385905	0					
ANR	385955	Identifier	param		385905	0					
ANR	385956	PrimaryExpression	1		385905	1					
ANR	385957	PrimaryExpression	']'		385905	1					
ANR	385958	CompoundStatement		9:39:206:206	385905	1					
ANR	385959	ExpressionStatement	last_sqbracket = 1	76:2:2434:2452	385905	0	True				
ANR	385960	AssignmentExpression	last_sqbracket = 1		385905	0		=			
ANR	385961	Identifier	last_sqbracket		385905	0					
ANR	385962	PrimaryExpression	1		385905	1					
ANR	385963	ExpressionStatement	param [ strlen ( param ) - 1 ] = 0	77:2:2456:2484	385905	1	True				
ANR	385964	AssignmentExpression	param [ strlen ( param ) - 1 ] = 0		385905	0		=			
ANR	385965	ArrayIndexing	param [ strlen ( param ) - 1 ]		385905	0					
ANR	385966	Identifier	param		385905	0					
ANR	385967	AdditiveExpression	strlen ( param ) - 1		385905	1		-			
ANR	385968	CallExpression	strlen ( param )		385905	0					
ANR	385969	Callee	strlen		385905	0					
ANR	385970	Identifier	strlen		385905	0					
ANR	385971	ArgumentList	param		385905	1					
ANR	385972	Argument	param		385905	0					
ANR	385973	Identifier	param		385905	0					
ANR	385974	PrimaryExpression	1		385905	1					
ANR	385975	PrimaryExpression	0		385905	1					
ANR	385976	IfStatement	if ( first_sqbracket == 1 )		385905	4					
ANR	385977	Condition	first_sqbracket == 1	81:5:2520:2539	385905	0	True				
ANR	385978	EqualityExpression	first_sqbracket == 1		385905	0		==			
ANR	385979	Identifier	first_sqbracket		385905	0					
ANR	385980	PrimaryExpression	1		385905	1					
ANR	385981	CompoundStatement		15:27:318:318	385905	1					
ANR	385982	ExpressionStatement	square_brackets = 1	82:2:2546:2565	385905	0	True				
ANR	385983	AssignmentExpression	square_brackets = 1		385905	0		=			
ANR	385984	Identifier	square_brackets		385905	0					
ANR	385985	PrimaryExpression	1		385905	1					
ANR	385986	IfStatement	if ( last_sqbracket != 1 )		385905	1					
ANR	385987	Condition	last_sqbracket != 1	83:6:2573:2591	385905	0	True				
ANR	385988	EqualityExpression	last_sqbracket != 1		385905	0		!=			
ANR	385989	Identifier	last_sqbracket		385905	0					
ANR	385990	PrimaryExpression	1		385905	1					
ANR	385991	CompoundStatement		17:27:370:370	385905	1					
ANR	385992	ExpressionStatement	"fprintf ( stderr , ""Missing last square bracket\\n"" )"	84:3:2599:2648	385905	0	True				
ANR	385993	CallExpression	"fprintf ( stderr , ""Missing last square bracket\\n"" )"		385905	0					
ANR	385994	Callee	fprintf		385905	0					
ANR	385995	Identifier	fprintf		385905	0					
ANR	385996	ArgumentList	stderr		385905	1					
ANR	385997	Argument	stderr		385905	0					
ANR	385998	Identifier	stderr		385905	0					
ANR	385999	Argument	"""Missing last square bracket\\n"""		385905	1					
ANR	386000	PrimaryExpression	"""Missing last square bracket\\n"""		385905	0					
ANR	386001	ReturnStatement	return 0 ;	85:3:2653:2661	385905	1	True				
ANR	386002	PrimaryExpression	0		385905	0					
ANR	386003	ElseStatement	else		385905	0					
ANR	386004	CompoundStatement		21:8:451:451	385905	0					
ANR	386005	IfStatement	if ( last_sqbracket == 1 )		385905	0					
ANR	386006	Condition	last_sqbracket == 1	88:6:2683:2701	385905	0	True				
ANR	386007	EqualityExpression	last_sqbracket == 1		385905	0		==			
ANR	386008	Identifier	last_sqbracket		385905	0					
ANR	386009	PrimaryExpression	1		385905	1					
ANR	386010	CompoundStatement		22:27:480:480	385905	1					
ANR	386011	ExpressionStatement	"fprintf ( stderr , ""Missing first square bracket\\n"" )"	89:3:2709:2759	385905	0	True				
ANR	386012	CallExpression	"fprintf ( stderr , ""Missing first square bracket\\n"" )"		385905	0					
ANR	386013	Callee	fprintf		385905	0					
ANR	386014	Identifier	fprintf		385905	0					
ANR	386015	ArgumentList	stderr		385905	1					
ANR	386016	Argument	stderr		385905	0					
ANR	386017	Identifier	stderr		385905	0					
ANR	386018	Argument	"""Missing first square bracket\\n"""		385905	1					
ANR	386019	PrimaryExpression	"""Missing first square bracket\\n"""		385905	0					
ANR	386020	ReturnStatement	return 0 ;	90:3:2764:2772	385905	1	True				
ANR	386021	PrimaryExpression	0		385905	0					
ANR	386022	IfStatement	if ( param [ 0 ] == '0' && param [ 1 ] == 'X' )		385905	5					
ANR	386023	Condition	param [ 0 ] == '0' && param [ 1 ] == 'X'	95:5:2826:2859	385905	0	True				
ANR	386024	AndExpression	param [ 0 ] == '0' && param [ 1 ] == 'X'		385905	0		&&			
ANR	386025	EqualityExpression	param [ 0 ] == '0'		385905	0		==			
ANR	386026	ArrayIndexing	param [ 0 ]		385905	0					
ANR	386027	Identifier	param		385905	0					
ANR	386028	PrimaryExpression	0		385905	1					
ANR	386029	PrimaryExpression	'0'		385905	1					
ANR	386030	EqualityExpression	param [ 1 ] == 'X'		385905	1		==			
ANR	386031	ArrayIndexing	param [ 1 ]		385905	0					
ANR	386032	Identifier	param		385905	0					
ANR	386033	PrimaryExpression	1		385905	1					
ANR	386034	PrimaryExpression	'X'		385905	1					
ANR	386035	CompoundStatement		35:2:772:784	385905	1					
ANR	386036	IdentifierDeclStatement	ut16 value = 0 ;	97:2:2885:2899	385905	0	True				
ANR	386037	IdentifierDecl	value = 0		385905	0					
ANR	386038	IdentifierDeclType	ut16		385905	0					
ANR	386039	Identifier	value		385905	1					
ANR	386040	AssignmentExpression	value = 0		385905	2		=			
ANR	386041	Identifier	value		385905	0					
ANR	386042	PrimaryExpression	0		385905	1					
ANR	386043	ExpressionStatement	param = param + 2	98:2:2903:2920	385905	1	True				
ANR	386044	AssignmentExpression	param = param + 2		385905	0		=			
ANR	386045	Identifier	param		385905	0					
ANR	386046	AdditiveExpression	param + 2		385905	1		+			
ANR	386047	Identifier	param		385905	0					
ANR	386048	PrimaryExpression	2		385905	1					
ANR	386049	IdentifierDeclStatement	int digit_count = strlen ( param ) ;	99:2:2940:2971	385905	2	True				
ANR	386050	IdentifierDecl	digit_count = strlen ( param )		385905	0					
ANR	386051	IdentifierDeclType	int		385905	0					
ANR	386052	Identifier	digit_count		385905	1					
ANR	386053	AssignmentExpression	digit_count = strlen ( param )		385905	2		=			
ANR	386054	Identifier	digit_count		385905	0					
ANR	386055	CallExpression	strlen ( param )		385905	1					
ANR	386056	Callee	strlen		385905	0					
ANR	386057	Identifier	strlen		385905	0					
ANR	386058	ArgumentList	param		385905	1					
ANR	386059	Argument	param		385905	0					
ANR	386060	Identifier	param		385905	0					
ANR	386061	IdentifierDeclStatement	int digit_num = 0 ;	100:2:2975:2992	385905	3	True				
ANR	386062	IdentifierDecl	digit_num = 0		385905	0					
ANR	386063	IdentifierDeclType	int		385905	0					
ANR	386064	Identifier	digit_num		385905	1					
ANR	386065	AssignmentExpression	digit_num = 0		385905	2		=			
ANR	386066	Identifier	digit_num		385905	0					
ANR	386067	PrimaryExpression	0		385905	1					
ANR	386068	IdentifierDeclStatement	int reg = - 1 ;	101:2:2996:3008	385905	4	True				
ANR	386069	IdentifierDecl	reg = - 1		385905	0					
ANR	386070	IdentifierDeclType	int		385905	0					
ANR	386071	Identifier	reg		385905	1					
ANR	386072	AssignmentExpression	reg = - 1		385905	2		=			
ANR	386073	Identifier	reg		385905	0					
ANR	386074	UnaryOperationExpression	- 1		385905	1					
ANR	386075	UnaryOperator	-		385905	0					
ANR	386076	PrimaryExpression	1		385905	1					
ANR	386077	ForStatement	for ( digit_num = 0 ; digit_num < digit_count ; digit_num ++ )		385905	5					
ANR	386078	ForInit	digit_num = 0 ;	102:7:3017:3030	385905	0	True				
ANR	386079	AssignmentExpression	digit_num = 0		385905	0		=			
ANR	386080	Identifier	digit_num		385905	0					
ANR	386081	PrimaryExpression	0		385905	1					
ANR	386082	Condition	digit_num < digit_count	102:22:3032:3054	385905	1	True				
ANR	386083	RelationalExpression	digit_num < digit_count		385905	0		<			
ANR	386084	Identifier	digit_num		385905	0					
ANR	386085	Identifier	digit_count		385905	1					
ANR	386086	PostIncDecOperationExpression	digit_num ++	102:47:3057:3067	385905	2	True				
ANR	386087	Identifier	digit_num		385905	0					
ANR	386088	IncDec	++		385905	1					
ANR	386089	CompoundStatement		39:3:899:936	385905	3					
ANR	386090	IdentifierDeclStatement	int digit_val = - 1 ;	104:3:3100:3118	385905	0	True				
ANR	386091	IdentifierDecl	digit_val = - 1		385905	0					
ANR	386092	IdentifierDeclType	int		385905	0					
ANR	386093	Identifier	digit_val		385905	1					
ANR	386094	AssignmentExpression	digit_val = - 1		385905	2		=			
ANR	386095	Identifier	digit_val		385905	0					
ANR	386096	UnaryOperationExpression	- 1		385905	1					
ANR	386097	UnaryOperator	-		385905	0					
ANR	386098	PrimaryExpression	1		385905	1					
ANR	386099	IdentifierDeclStatement	char current_digit = param [ digit_num ] ;	105:3:3123:3160	385905	1	True				
ANR	386100	IdentifierDecl	current_digit = param [ digit_num ]		385905	0					
ANR	386101	IdentifierDeclType	char		385905	0					
ANR	386102	Identifier	current_digit		385905	1					
ANR	386103	AssignmentExpression	current_digit = param [ digit_num ]		385905	2		=			
ANR	386104	Identifier	current_digit		385905	0					
ANR	386105	ArrayIndexing	param [ digit_num ]		385905	1					
ANR	386106	Identifier	param		385905	0					
ANR	386107	Identifier	digit_num		385905	1					
ANR	386108	IfStatement	if ( current_digit >= '0' && current_digit <= '9' )		385905	2					
ANR	386109	Condition	current_digit >= '0' && current_digit <= '9'	106:7:3169:3212	385905	0	True				
ANR	386110	AndExpression	current_digit >= '0' && current_digit <= '9'		385905	0		&&			
ANR	386111	RelationalExpression	current_digit >= '0'		385905	0		>=			
ANR	386112	Identifier	current_digit		385905	0					
ANR	386113	PrimaryExpression	'0'		385905	1					
ANR	386114	RelationalExpression	current_digit <= '9'		385905	1		<=			
ANR	386115	Identifier	current_digit		385905	0					
ANR	386116	PrimaryExpression	'9'		385905	1					
ANR	386117	ExpressionStatement	digit_val = current_digit - '0'	107:4:3219:3250	385905	1	True				
ANR	386118	AssignmentExpression	digit_val = current_digit - '0'		385905	0		=			
ANR	386119	Identifier	digit_val		385905	0					
ANR	386120	AdditiveExpression	current_digit - '0'		385905	1		-			
ANR	386121	Identifier	current_digit		385905	0					
ANR	386122	PrimaryExpression	'0'		385905	1					
ANR	386123	IfStatement	if ( current_digit >= 'A' && current_digit <= 'F' )		385905	3					
ANR	386124	Condition	current_digit >= 'A' && current_digit <= 'F'	108:7:3259:3302	385905	0	True				
ANR	386125	AndExpression	current_digit >= 'A' && current_digit <= 'F'		385905	0		&&			
ANR	386126	RelationalExpression	current_digit >= 'A'		385905	0		>=			
ANR	386127	Identifier	current_digit		385905	0					
ANR	386128	PrimaryExpression	'A'		385905	1					
ANR	386129	RelationalExpression	current_digit <= 'F'		385905	1		<=			
ANR	386130	Identifier	current_digit		385905	0					
ANR	386131	PrimaryExpression	'F'		385905	1					
ANR	386132	ExpressionStatement	digit_val = current_digit - 'A' + 10	109:4:3309:3345	385905	1	True				
ANR	386133	AssignmentExpression	digit_val = current_digit - 'A' + 10		385905	0		=			
ANR	386134	Identifier	digit_val		385905	0					
ANR	386135	AdditiveExpression	current_digit - 'A' + 10		385905	1		-			
ANR	386136	Identifier	current_digit		385905	0					
ANR	386137	AdditiveExpression	'A' + 10		385905	1		+			
ANR	386138	PrimaryExpression	'A'		385905	0					
ANR	386139	PrimaryExpression	10		385905	1					
ANR	386140	IfStatement	if ( current_digit == '+' && square_brackets == 1 )		385905	4					
ANR	386141	Condition	current_digit == '+' && square_brackets == 1	111:7:3359:3402	385905	0	True				
ANR	386142	AndExpression	current_digit == '+' && square_brackets == 1		385905	0		&&			
ANR	386143	EqualityExpression	current_digit == '+'		385905	0		==			
ANR	386144	Identifier	current_digit		385905	0					
ANR	386145	PrimaryExpression	'+'		385905	1					
ANR	386146	EqualityExpression	square_brackets == 1		385905	1		==			
ANR	386147	Identifier	square_brackets		385905	0					
ANR	386148	PrimaryExpression	1		385905	1					
ANR	386149	CompoundStatement		45:53:1181:1181	385905	1					
ANR	386150	ExpressionStatement	reg = get_register_id ( param [ digit_num + 1 ] )	112:4:3411:3454	385905	0	True				
ANR	386151	AssignmentExpression	reg = get_register_id ( param [ digit_num + 1 ] )		385905	0		=			
ANR	386152	Identifier	reg		385905	0					
ANR	386153	CallExpression	get_register_id ( param [ digit_num + 1 ] )		385905	1					
ANR	386154	Callee	get_register_id		385905	0					
ANR	386155	Identifier	get_register_id		385905	0					
ANR	386156	ArgumentList	param [ digit_num + 1 ]		385905	1					
ANR	386157	Argument	param [ digit_num + 1 ]		385905	0					
ANR	386158	ArrayIndexing	param [ digit_num + 1 ]		385905	0					
ANR	386159	Identifier	param		385905	0					
ANR	386160	AdditiveExpression	digit_num + 1		385905	1		+			
ANR	386161	Identifier	digit_num		385905	0					
ANR	386162	PrimaryExpression	1		385905	1					
ANR	386163	ExpressionStatement	digit_num ++	113:4:3460:3471	385905	1	True				
ANR	386164	PostIncDecOperationExpression	digit_num ++		385905	0					
ANR	386165	Identifier	digit_num		385905	0					
ANR	386166	IncDec	++		385905	1					
ANR	386167	ElseStatement	else		385905	0					
ANR	386168	CompoundStatement		48:10:1259:1259	385905	0					
ANR	386169	IfStatement	if ( digit_val == - 1 )		385905	0					
ANR	386170	Condition	digit_val == - 1	116:8:3520:3534	385905	0	True				
ANR	386171	EqualityExpression	digit_val == - 1		385905	0		==			
ANR	386172	Identifier	digit_val		385905	0					
ANR	386173	UnaryOperationExpression	- 1		385905	1					
ANR	386174	UnaryOperator	-		385905	0					
ANR	386175	PrimaryExpression	1		385905	1					
ANR	386176	CompoundStatement		50:25:1313:1313	385905	1					
ANR	386177	ExpressionStatement	"fprintf ( stderr , ""invalid literal\\n"" )"	117:5:3544:3581	385905	0	True				
ANR	386178	CallExpression	"fprintf ( stderr , ""invalid literal\\n"" )"		385905	0					
ANR	386179	Callee	fprintf		385905	0					
ANR	386180	Identifier	fprintf		385905	0					
ANR	386181	ArgumentList	stderr		385905	1					
ANR	386182	Argument	stderr		385905	0					
ANR	386183	Identifier	stderr		385905	0					
ANR	386184	Argument	"""invalid literal\\n"""		385905	1					
ANR	386185	PrimaryExpression	"""invalid literal\\n"""		385905	0					
ANR	386186	ReturnStatement	return 0 ;	118:5:3588:3596	385905	1	True				
ANR	386187	PrimaryExpression	0		385905	0					
ANR	386188	ExpressionStatement	value = ( value << 4 ) + digit_val	122:4:3647:3679	385905	1	True				
ANR	386189	AssignmentExpression	value = ( value << 4 ) + digit_val		385905	0		=			
ANR	386190	Identifier	value		385905	0					
ANR	386191	AdditiveExpression	( value << 4 ) + digit_val		385905	1		+			
ANR	386192	ShiftExpression	value << 4		385905	0		<<			
ANR	386193	Identifier	value		385905	0					
ANR	386194	PrimaryExpression	4		385905	1					
ANR	386195	Identifier	digit_val		385905	1					
ANR	386196	IfStatement	if ( value <= 0x1f && square_brackets == 0 )		385905	6					
ANR	386197	Condition	value <= 0x1f && square_brackets == 0	126:6:3699:3735	385905	0	True				
ANR	386198	AndExpression	value <= 0x1f && square_brackets == 0		385905	0		&&			
ANR	386199	RelationalExpression	value <= 0x1f		385905	0		<=			
ANR	386200	Identifier	value		385905	0					
ANR	386201	PrimaryExpression	0x1f		385905	1					
ANR	386202	EqualityExpression	square_brackets == 0		385905	1		==			
ANR	386203	Identifier	square_brackets		385905	0					
ANR	386204	PrimaryExpression	0		385905	1					
ANR	386205	ReturnStatement	return value + 0x20 ;	127:3:3741:3760	385905	1	True				
ANR	386206	AdditiveExpression	value + 0x20		385905	0		+			
ANR	386207	Identifier	value		385905	0					
ANR	386208	PrimaryExpression	0x20		385905	1					
ANR	386209	ExpressionStatement	* extra_word_needed = 1	129:2:3768:3790	385905	7	True				
ANR	386210	AssignmentExpression	* extra_word_needed = 1		385905	0		=			
ANR	386211	UnaryOperationExpression	* extra_word_needed		385905	0					
ANR	386212	UnaryOperator	*		385905	0					
ANR	386213	Identifier	extra_word_needed		385905	1					
ANR	386214	PrimaryExpression	1		385905	1					
ANR	386215	ExpressionStatement	* extra_word_value = value	130:2:3794:3819	385905	8	True				
ANR	386216	AssignmentExpression	* extra_word_value = value		385905	0		=			
ANR	386217	UnaryOperationExpression	* extra_word_value		385905	0					
ANR	386218	UnaryOperator	*		385905	0					
ANR	386219	Identifier	extra_word_value		385905	1					
ANR	386220	Identifier	value		385905	1					
ANR	386221	IfStatement	if ( square_brackets == 1 )		385905	9					
ANR	386222	Condition	square_brackets == 1	132:6:3830:3849	385905	0	True				
ANR	386223	EqualityExpression	square_brackets == 1		385905	0		==			
ANR	386224	Identifier	square_brackets		385905	0					
ANR	386225	PrimaryExpression	1		385905	1					
ANR	386226	CompoundStatement		66:28:1628:1628	385905	1					
ANR	386227	IfStatement	if ( reg != - 1 )		385905	0					
ANR	386228	Condition	reg != - 1	133:7:3861:3869	385905	0	True				
ANR	386229	EqualityExpression	reg != - 1		385905	0		!=			
ANR	386230	Identifier	reg		385905	0					
ANR	386231	UnaryOperationExpression	- 1		385905	1					
ANR	386232	UnaryOperator	-		385905	0					
ANR	386233	PrimaryExpression	1		385905	1					
ANR	386234	ReturnStatement	return 0x10 + reg ;	134:4:3876:3893	385905	1	True				
ANR	386235	AdditiveExpression	0x10 + reg		385905	0		+			
ANR	386236	PrimaryExpression	0x10		385905	0					
ANR	386237	Identifier	reg		385905	1					
ANR	386238	ReturnStatement	return 0x1e ;	135:3:3898:3909	385905	1	True				
ANR	386239	PrimaryExpression	0x1e		385905	0					
ANR	386240	ReturnStatement	return 0x1f ;	137:2:3917:3928	385905	10	True				
ANR	386241	PrimaryExpression	0x1f		385905	0					
ANR	386242	IfStatement	if ( param [ 0 ] >= '0' && param [ 0 ] <= '9' )		385905	6					
ANR	386243	Condition	param [ 0 ] >= '0' && param [ 0 ] <= '9'	141:5:3982:4015	385905	0	True				
ANR	386244	AndExpression	param [ 0 ] >= '0' && param [ 0 ] <= '9'		385905	0		&&			
ANR	386245	RelationalExpression	param [ 0 ] >= '0'		385905	0		>=			
ANR	386246	ArrayIndexing	param [ 0 ]		385905	0					
ANR	386247	Identifier	param		385905	0					
ANR	386248	PrimaryExpression	0		385905	1					
ANR	386249	PrimaryExpression	'0'		385905	1					
ANR	386250	RelationalExpression	param [ 0 ] <= '9'		385905	1		<=			
ANR	386251	ArrayIndexing	param [ 0 ]		385905	0					
ANR	386252	Identifier	param		385905	0					
ANR	386253	PrimaryExpression	0		385905	1					
ANR	386254	PrimaryExpression	'9'		385905	1					
ANR	386255	CompoundStatement		80:2:1895:1907	385905	1					
ANR	386256	IdentifierDeclStatement	ut16 value = 0 ;	143:2:4045:4059	385905	0	True				
ANR	386257	IdentifierDecl	value = 0		385905	0					
ANR	386258	IdentifierDeclType	ut16		385905	0					
ANR	386259	Identifier	value		385905	1					
ANR	386260	AssignmentExpression	value = 0		385905	2		=			
ANR	386261	Identifier	value		385905	0					
ANR	386262	PrimaryExpression	0		385905	1					
ANR	386263	IdentifierDeclStatement	int digit_count = strlen ( param ) ;	144:2:4063:4094	385905	1	True				
ANR	386264	IdentifierDecl	digit_count = strlen ( param )		385905	0					
ANR	386265	IdentifierDeclType	int		385905	0					
ANR	386266	Identifier	digit_count		385905	1					
ANR	386267	AssignmentExpression	digit_count = strlen ( param )		385905	2		=			
ANR	386268	Identifier	digit_count		385905	0					
ANR	386269	CallExpression	strlen ( param )		385905	1					
ANR	386270	Callee	strlen		385905	0					
ANR	386271	Identifier	strlen		385905	0					
ANR	386272	ArgumentList	param		385905	1					
ANR	386273	Argument	param		385905	0					
ANR	386274	Identifier	param		385905	0					
ANR	386275	IdentifierDeclStatement	int digit_num = 0 ;	145:2:4098:4115	385905	2	True				
ANR	386276	IdentifierDecl	digit_num = 0		385905	0					
ANR	386277	IdentifierDeclType	int		385905	0					
ANR	386278	Identifier	digit_num		385905	1					
ANR	386279	AssignmentExpression	digit_num = 0		385905	2		=			
ANR	386280	Identifier	digit_num		385905	0					
ANR	386281	PrimaryExpression	0		385905	1					
ANR	386282	IdentifierDeclStatement	int reg = - 1 ;	146:2:4119:4131	385905	3	True				
ANR	386283	IdentifierDecl	reg = - 1		385905	0					
ANR	386284	IdentifierDeclType	int		385905	0					
ANR	386285	Identifier	reg		385905	1					
ANR	386286	AssignmentExpression	reg = - 1		385905	2		=			
ANR	386287	Identifier	reg		385905	0					
ANR	386288	UnaryOperationExpression	- 1		385905	1					
ANR	386289	UnaryOperator	-		385905	0					
ANR	386290	PrimaryExpression	1		385905	1					
ANR	386291	ForStatement	for ( digit_num = 0 ; digit_num < digit_count ; digit_num ++ )		385905	4					
ANR	386292	ForInit	digit_num = 0 ;	147:7:4140:4153	385905	0	True				
ANR	386293	AssignmentExpression	digit_num = 0		385905	0		=			
ANR	386294	Identifier	digit_num		385905	0					
ANR	386295	PrimaryExpression	0		385905	1					
ANR	386296	Condition	digit_num < digit_count	147:22:4155:4177	385905	1	True				
ANR	386297	RelationalExpression	digit_num < digit_count		385905	0		<			
ANR	386298	Identifier	digit_num		385905	0					
ANR	386299	Identifier	digit_count		385905	1					
ANR	386300	PostIncDecOperationExpression	digit_num ++	147:47:4180:4190	385905	2	True				
ANR	386301	Identifier	digit_num		385905	0					
ANR	386302	IncDec	++		385905	1					
ANR	386303	CompoundStatement		84:3:2022:2059	385905	3					
ANR	386304	IdentifierDeclStatement	int digit_val = - 1 ;	149:3:4223:4241	385905	0	True				
ANR	386305	IdentifierDecl	digit_val = - 1		385905	0					
ANR	386306	IdentifierDeclType	int		385905	0					
ANR	386307	Identifier	digit_val		385905	1					
ANR	386308	AssignmentExpression	digit_val = - 1		385905	2		=			
ANR	386309	Identifier	digit_val		385905	0					
ANR	386310	UnaryOperationExpression	- 1		385905	1					
ANR	386311	UnaryOperator	-		385905	0					
ANR	386312	PrimaryExpression	1		385905	1					
ANR	386313	IdentifierDeclStatement	char current_digit = param [ digit_num ] ;	150:3:4246:4283	385905	1	True				
ANR	386314	IdentifierDecl	current_digit = param [ digit_num ]		385905	0					
ANR	386315	IdentifierDeclType	char		385905	0					
ANR	386316	Identifier	current_digit		385905	1					
ANR	386317	AssignmentExpression	current_digit = param [ digit_num ]		385905	2		=			
ANR	386318	Identifier	current_digit		385905	0					
ANR	386319	ArrayIndexing	param [ digit_num ]		385905	1					
ANR	386320	Identifier	param		385905	0					
ANR	386321	Identifier	digit_num		385905	1					
ANR	386322	IfStatement	if ( current_digit >= '0' && current_digit <= '9' )		385905	2					
ANR	386323	Condition	current_digit >= '0' && current_digit <= '9'	151:7:4292:4335	385905	0	True				
ANR	386324	AndExpression	current_digit >= '0' && current_digit <= '9'		385905	0		&&			
ANR	386325	RelationalExpression	current_digit >= '0'		385905	0		>=			
ANR	386326	Identifier	current_digit		385905	0					
ANR	386327	PrimaryExpression	'0'		385905	1					
ANR	386328	RelationalExpression	current_digit <= '9'		385905	1		<=			
ANR	386329	Identifier	current_digit		385905	0					
ANR	386330	PrimaryExpression	'9'		385905	1					
ANR	386331	ExpressionStatement	digit_val = current_digit - '0'	152:4:4342:4373	385905	1	True				
ANR	386332	AssignmentExpression	digit_val = current_digit - '0'		385905	0		=			
ANR	386333	Identifier	digit_val		385905	0					
ANR	386334	AdditiveExpression	current_digit - '0'		385905	1		-			
ANR	386335	Identifier	current_digit		385905	0					
ANR	386336	PrimaryExpression	'0'		385905	1					
ANR	386337	IfStatement	if ( current_digit == '+' && square_brackets == 1 )		385905	3					
ANR	386338	Condition	current_digit == '+' && square_brackets == 1	154:7:4387:4430	385905	0	True				
ANR	386339	AndExpression	current_digit == '+' && square_brackets == 1		385905	0		&&			
ANR	386340	EqualityExpression	current_digit == '+'		385905	0		==			
ANR	386341	Identifier	current_digit		385905	0					
ANR	386342	PrimaryExpression	'+'		385905	1					
ANR	386343	EqualityExpression	square_brackets == 1		385905	1		==			
ANR	386344	Identifier	square_brackets		385905	0					
ANR	386345	PrimaryExpression	1		385905	1					
ANR	386346	CompoundStatement		88:53:2209:2209	385905	1					
ANR	386347	ExpressionStatement	reg = get_register_id ( param [ digit_num + 1 ] )	155:4:4439:4482	385905	0	True				
ANR	386348	AssignmentExpression	reg = get_register_id ( param [ digit_num + 1 ] )		385905	0		=			
ANR	386349	Identifier	reg		385905	0					
ANR	386350	CallExpression	get_register_id ( param [ digit_num + 1 ] )		385905	1					
ANR	386351	Callee	get_register_id		385905	0					
ANR	386352	Identifier	get_register_id		385905	0					
ANR	386353	ArgumentList	param [ digit_num + 1 ]		385905	1					
ANR	386354	Argument	param [ digit_num + 1 ]		385905	0					
ANR	386355	ArrayIndexing	param [ digit_num + 1 ]		385905	0					
ANR	386356	Identifier	param		385905	0					
ANR	386357	AdditiveExpression	digit_num + 1		385905	1		+			
ANR	386358	Identifier	digit_num		385905	0					
ANR	386359	PrimaryExpression	1		385905	1					
ANR	386360	ExpressionStatement	digit_num ++	156:4:4488:4499	385905	1	True				
ANR	386361	PostIncDecOperationExpression	digit_num ++		385905	0					
ANR	386362	Identifier	digit_num		385905	0					
ANR	386363	IncDec	++		385905	1					
ANR	386364	ElseStatement	else		385905	0					
ANR	386365	CompoundStatement		91:10:2287:2287	385905	0					
ANR	386366	IfStatement	if ( digit_val == - 1 )		385905	0					
ANR	386367	Condition	digit_val == - 1	159:8:4548:4562	385905	0	True				
ANR	386368	EqualityExpression	digit_val == - 1		385905	0		==			
ANR	386369	Identifier	digit_val		385905	0					
ANR	386370	UnaryOperationExpression	- 1		385905	1					
ANR	386371	UnaryOperator	-		385905	0					
ANR	386372	PrimaryExpression	1		385905	1					
ANR	386373	CompoundStatement		93:25:2341:2341	385905	1					
ANR	386374	ExpressionStatement	"fprintf ( stderr , ""invalid literal\\n"" )"	160:5:4572:4609	385905	0	True				
ANR	386375	CallExpression	"fprintf ( stderr , ""invalid literal\\n"" )"		385905	0					
ANR	386376	Callee	fprintf		385905	0					
ANR	386377	Identifier	fprintf		385905	0					
ANR	386378	ArgumentList	stderr		385905	1					
ANR	386379	Argument	stderr		385905	0					
ANR	386380	Identifier	stderr		385905	0					
ANR	386381	Argument	"""invalid literal\\n"""		385905	1					
ANR	386382	PrimaryExpression	"""invalid literal\\n"""		385905	0					
ANR	386383	ReturnStatement	return 0 ;	161:5:4616:4624	385905	1	True				
ANR	386384	PrimaryExpression	0		385905	0					
ANR	386385	ExpressionStatement	value = ( value * 10 ) + digit_val	165:4:4675:4707	385905	1	True				
ANR	386386	AssignmentExpression	value = ( value * 10 ) + digit_val		385905	0		=			
ANR	386387	Identifier	value		385905	0					
ANR	386388	AdditiveExpression	( value * 10 ) + digit_val		385905	1		+			
ANR	386389	MultiplicativeExpression	value * 10		385905	0		*			
ANR	386390	Identifier	value		385905	0					
ANR	386391	PrimaryExpression	10		385905	1					
ANR	386392	Identifier	digit_val		385905	1					
ANR	386393	IfStatement	if ( value <= 0x1f && square_brackets == 0 )		385905	5					
ANR	386394	Condition	value <= 0x1f && square_brackets == 0	168:6:4724:4760	385905	0	True				
ANR	386395	AndExpression	value <= 0x1f && square_brackets == 0		385905	0		&&			
ANR	386396	RelationalExpression	value <= 0x1f		385905	0		<=			
ANR	386397	Identifier	value		385905	0					
ANR	386398	PrimaryExpression	0x1f		385905	1					
ANR	386399	EqualityExpression	square_brackets == 0		385905	1		==			
ANR	386400	Identifier	square_brackets		385905	0					
ANR	386401	PrimaryExpression	0		385905	1					
ANR	386402	ReturnStatement	return value + 0x20 ;	169:3:4766:4785	385905	1	True				
ANR	386403	AdditiveExpression	value + 0x20		385905	0		+			
ANR	386404	Identifier	value		385905	0					
ANR	386405	PrimaryExpression	0x20		385905	1					
ANR	386406	ExpressionStatement	* extra_word_needed = 1	171:2:4793:4815	385905	6	True				
ANR	386407	AssignmentExpression	* extra_word_needed = 1		385905	0		=			
ANR	386408	UnaryOperationExpression	* extra_word_needed		385905	0					
ANR	386409	UnaryOperator	*		385905	0					
ANR	386410	Identifier	extra_word_needed		385905	1					
ANR	386411	PrimaryExpression	1		385905	1					
ANR	386412	ExpressionStatement	* extra_word_value = value	172:2:4819:4844	385905	7	True				
ANR	386413	AssignmentExpression	* extra_word_value = value		385905	0		=			
ANR	386414	UnaryOperationExpression	* extra_word_value		385905	0					
ANR	386415	UnaryOperator	*		385905	0					
ANR	386416	Identifier	extra_word_value		385905	1					
ANR	386417	Identifier	value		385905	1					
ANR	386418	IfStatement	if ( square_brackets == 1 )		385905	8					
ANR	386419	Condition	square_brackets == 1	174:6:4855:4874	385905	0	True				
ANR	386420	EqualityExpression	square_brackets == 1		385905	0		==			
ANR	386421	Identifier	square_brackets		385905	0					
ANR	386422	PrimaryExpression	1		385905	1					
ANR	386423	CompoundStatement		108:28:2653:2653	385905	1					
ANR	386424	IfStatement	if ( reg != - 1 )		385905	0					
ANR	386425	Condition	reg != - 1	175:7:4886:4894	385905	0	True				
ANR	386426	EqualityExpression	reg != - 1		385905	0		!=			
ANR	386427	Identifier	reg		385905	0					
ANR	386428	UnaryOperationExpression	- 1		385905	1					
ANR	386429	UnaryOperator	-		385905	0					
ANR	386430	PrimaryExpression	1		385905	1					
ANR	386431	ReturnStatement	return 0x10 + reg ;	176:4:4901:4918	385905	1	True				
ANR	386432	AdditiveExpression	0x10 + reg		385905	0		+			
ANR	386433	PrimaryExpression	0x10		385905	0					
ANR	386434	Identifier	reg		385905	1					
ANR	386435	ReturnStatement	return 0x1e ;	177:3:4923:4934	385905	1	True				
ANR	386436	PrimaryExpression	0x1e		385905	0					
ANR	386437	ReturnStatement	return 0x1f ;	179:2:4942:4953	385905	9	True				
ANR	386438	PrimaryExpression	0x1f		385905	0					
ANR	386439	IfStatement	if ( param [ 1 ] == 0 )		385905	7					
ANR	386440	Condition	param [ 1 ] == 0	183:5:5000:5012	385905	0	True				
ANR	386441	EqualityExpression	param [ 1 ] == 0		385905	0		==			
ANR	386442	ArrayIndexing	param [ 1 ]		385905	0					
ANR	386443	Identifier	param		385905	0					
ANR	386444	PrimaryExpression	1		385905	1					
ANR	386445	PrimaryExpression	0		385905	1					
ANR	386446	CompoundStatement		118:2:2860:2896	385905	1					
ANR	386447	IdentifierDeclStatement	ut8 reg = get_register_id ( param [ 0 ] ) ;	184:2:5084:5120	385905	0	True				
ANR	386448	IdentifierDecl	reg = get_register_id ( param [ 0 ] )		385905	0					
ANR	386449	IdentifierDeclType	ut8		385905	0					
ANR	386450	Identifier	reg		385905	1					
ANR	386451	AssignmentExpression	reg = get_register_id ( param [ 0 ] )		385905	2		=			
ANR	386452	Identifier	reg		385905	0					
ANR	386453	CallExpression	get_register_id ( param [ 0 ] )		385905	1					
ANR	386454	Callee	get_register_id		385905	0					
ANR	386455	Identifier	get_register_id		385905	0					
ANR	386456	ArgumentList	param [ 0 ]		385905	1					
ANR	386457	Argument	param [ 0 ]		385905	0					
ANR	386458	ArrayIndexing	param [ 0 ]		385905	0					
ANR	386459	Identifier	param		385905	0					
ANR	386460	PrimaryExpression	0		385905	1					
ANR	386461	IfStatement	if ( square_brackets == 1 )		385905	1					
ANR	386462	Condition	square_brackets == 1	185:6:5128:5147	385905	0	True				
ANR	386463	EqualityExpression	square_brackets == 1		385905	0		==			
ANR	386464	Identifier	square_brackets		385905	0					
ANR	386465	PrimaryExpression	1		385905	1					
ANR	386466	ExpressionStatement	reg += 0x08	186:3:5153:5164	385905	1	True				
ANR	386467	AssignmentExpression	reg += 0x08		385905	0		+=			
ANR	386468	Identifier	reg		385905	0					
ANR	386469	PrimaryExpression	0x08		385905	1					
ANR	386470	ReturnStatement	return reg ;	187:2:5168:5178	385905	2	True				
ANR	386471	Identifier	reg		385905	0					
ANR	386472	IfStatement	"if ( ! strncmp ( ""POP"" , param , 3 ) )"		385905	8					
ANR	386473	Condition	"! strncmp ( ""POP"" , param , 3 )"	191:5:5221:5246	385905	0	True				
ANR	386474	UnaryOperationExpression	"! strncmp ( ""POP"" , param , 3 )"		385905	0					
ANR	386475	UnaryOperator	!		385905	0					
ANR	386476	CallExpression	"strncmp ( ""POP"" , param , 3 )"		385905	1					
ANR	386477	Callee	strncmp		385905	0					
ANR	386478	Identifier	strncmp		385905	0					
ANR	386479	ArgumentList	"""POP"""		385905	1					
ANR	386480	Argument	"""POP"""		385905	0					
ANR	386481	PrimaryExpression	"""POP"""		385905	0					
ANR	386482	Argument	param		385905	1					
ANR	386483	Identifier	param		385905	0					
ANR	386484	Argument	3		385905	2					
ANR	386485	PrimaryExpression	3		385905	0					
ANR	386486	ReturnStatement	return 0x18 ;	191:33:5249:5260	385905	1	True				
ANR	386487	PrimaryExpression	0x18		385905	0					
ANR	386488	IfStatement	"if ( ! strncmp ( ""PEEK"" , param , 4 ) )"		385905	9					
ANR	386489	Condition	"! strncmp ( ""PEEK"" , param , 4 )"	192:5:5267:5293	385905	0	True				
ANR	386490	UnaryOperationExpression	"! strncmp ( ""PEEK"" , param , 4 )"		385905	0					
ANR	386491	UnaryOperator	!		385905	0					
ANR	386492	CallExpression	"strncmp ( ""PEEK"" , param , 4 )"		385905	1					
ANR	386493	Callee	strncmp		385905	0					
ANR	386494	Identifier	strncmp		385905	0					
ANR	386495	ArgumentList	"""PEEK"""		385905	1					
ANR	386496	Argument	"""PEEK"""		385905	0					
ANR	386497	PrimaryExpression	"""PEEK"""		385905	0					
ANR	386498	Argument	param		385905	1					
ANR	386499	Identifier	param		385905	0					
ANR	386500	Argument	4		385905	2					
ANR	386501	PrimaryExpression	4		385905	0					
ANR	386502	ReturnStatement	return 0x19 ;	192:34:5296:5307	385905	1	True				
ANR	386503	PrimaryExpression	0x19		385905	0					
ANR	386504	IfStatement	"if ( ! strncmp ( ""PUSH"" , param , 4 ) )"		385905	10					
ANR	386505	Condition	"! strncmp ( ""PUSH"" , param , 4 )"	193:5:5314:5340	385905	0	True				
ANR	386506	UnaryOperationExpression	"! strncmp ( ""PUSH"" , param , 4 )"		385905	0					
ANR	386507	UnaryOperator	!		385905	0					
ANR	386508	CallExpression	"strncmp ( ""PUSH"" , param , 4 )"		385905	1					
ANR	386509	Callee	strncmp		385905	0					
ANR	386510	Identifier	strncmp		385905	0					
ANR	386511	ArgumentList	"""PUSH"""		385905	1					
ANR	386512	Argument	"""PUSH"""		385905	0					
ANR	386513	PrimaryExpression	"""PUSH"""		385905	0					
ANR	386514	Argument	param		385905	1					
ANR	386515	Identifier	param		385905	0					
ANR	386516	Argument	4		385905	2					
ANR	386517	PrimaryExpression	4		385905	0					
ANR	386518	ReturnStatement	return 0x1a ;	193:34:5343:5354	385905	1	True				
ANR	386519	PrimaryExpression	0x1a		385905	0					
ANR	386520	IfStatement	"if ( ! strncmp ( ""SP"" , param , 2 ) )"		385905	11					
ANR	386521	Condition	"! strncmp ( ""SP"" , param , 2 )"	194:5:5361:5385	385905	0	True				
ANR	386522	UnaryOperationExpression	"! strncmp ( ""SP"" , param , 2 )"		385905	0					
ANR	386523	UnaryOperator	!		385905	0					
ANR	386524	CallExpression	"strncmp ( ""SP"" , param , 2 )"		385905	1					
ANR	386525	Callee	strncmp		385905	0					
ANR	386526	Identifier	strncmp		385905	0					
ANR	386527	ArgumentList	"""SP"""		385905	1					
ANR	386528	Argument	"""SP"""		385905	0					
ANR	386529	PrimaryExpression	"""SP"""		385905	0					
ANR	386530	Argument	param		385905	1					
ANR	386531	Identifier	param		385905	0					
ANR	386532	Argument	2		385905	2					
ANR	386533	PrimaryExpression	2		385905	0					
ANR	386534	ReturnStatement	return 0x1b ;	194:32:5388:5399	385905	1	True				
ANR	386535	PrimaryExpression	0x1b		385905	0					
ANR	386536	IfStatement	"if ( ! strncmp ( ""PC"" , param , 2 ) )"		385905	12					
ANR	386537	Condition	"! strncmp ( ""PC"" , param , 2 )"	195:5:5406:5430	385905	0	True				
ANR	386538	UnaryOperationExpression	"! strncmp ( ""PC"" , param , 2 )"		385905	0					
ANR	386539	UnaryOperator	!		385905	0					
ANR	386540	CallExpression	"strncmp ( ""PC"" , param , 2 )"		385905	1					
ANR	386541	Callee	strncmp		385905	0					
ANR	386542	Identifier	strncmp		385905	0					
ANR	386543	ArgumentList	"""PC"""		385905	1					
ANR	386544	Argument	"""PC"""		385905	0					
ANR	386545	PrimaryExpression	"""PC"""		385905	0					
ANR	386546	Argument	param		385905	1					
ANR	386547	Identifier	param		385905	0					
ANR	386548	Argument	2		385905	2					
ANR	386549	PrimaryExpression	2		385905	0					
ANR	386550	ReturnStatement	return 0x1c ;	195:32:5433:5444	385905	1	True				
ANR	386551	PrimaryExpression	0x1c		385905	0					
ANR	386552	IfStatement	"if ( ! strncmp ( ""O"" , param , 1 ) )"		385905	13					
ANR	386553	Condition	"! strncmp ( ""O"" , param , 1 )"	196:5:5451:5474	385905	0	True				
ANR	386554	UnaryOperationExpression	"! strncmp ( ""O"" , param , 1 )"		385905	0					
ANR	386555	UnaryOperator	!		385905	0					
ANR	386556	CallExpression	"strncmp ( ""O"" , param , 1 )"		385905	1					
ANR	386557	Callee	strncmp		385905	0					
ANR	386558	Identifier	strncmp		385905	0					
ANR	386559	ArgumentList	"""O"""		385905	1					
ANR	386560	Argument	"""O"""		385905	0					
ANR	386561	PrimaryExpression	"""O"""		385905	0					
ANR	386562	Argument	param		385905	1					
ANR	386563	Identifier	param		385905	0					
ANR	386564	Argument	1		385905	2					
ANR	386565	PrimaryExpression	1		385905	0					
ANR	386566	ReturnStatement	return 0x1d ;	196:31:5477:5488	385905	1	True				
ANR	386567	PrimaryExpression	0x1d		385905	0					
ANR	386568	ExpressionStatement	* extra_word_needed = 1	199:1:5534:5556	385905	14	True				
ANR	386569	AssignmentExpression	* extra_word_needed = 1		385905	0		=			
ANR	386570	UnaryOperationExpression	* extra_word_needed		385905	0					
ANR	386571	UnaryOperator	*		385905	0					
ANR	386572	Identifier	extra_word_needed		385905	1					
ANR	386573	PrimaryExpression	1		385905	1					
ANR	386574	ExpressionStatement	* extra_word_value = 0	202:1:5673:5694	385905	15	True				
ANR	386575	AssignmentExpression	* extra_word_value = 0		385905	0		=			
ANR	386576	UnaryOperationExpression	* extra_word_value		385905	0					
ANR	386577	UnaryOperator	*		385905	0					
ANR	386578	Identifier	extra_word_value		385905	1					
ANR	386579	PrimaryExpression	0		385905	1					
ANR	386580	ReturnStatement	return 0x1f ;	203:1:5698:5709	385905	16	True				
ANR	386581	PrimaryExpression	0x1f		385905	0					
ANR	386582	ReturnType	static ut8		385905	1					
ANR	386583	Identifier	decode_parameter		385905	2					
ANR	386584	ParameterList	"char * param , int * extra_word_needed , ut16 * extra_word_value"		385905	3					
ANR	386585	Parameter	char * param	67:28:2162:2172	385905	0	True				
ANR	386586	ParameterType	char *		385905	0					
ANR	386587	Identifier	param		385905	1					
ANR	386588	Parameter	int * extra_word_needed	67:41:2175:2196	385905	1	True				
ANR	386589	ParameterType	int *		385905	0					
ANR	386590	Identifier	extra_word_needed		385905	1					
ANR	386591	Parameter	ut16 * extra_word_value	67:65:2199:2220	385905	2	True				
ANR	386592	ParameterType	ut16 *		385905	0					
ANR	386593	Identifier	extra_word_value		385905	1					
ANR	386594	CFGEntryNode	ENTRY		385905		True				
ANR	386595	CFGExitNode	EXIT		385905		True				
ANR	386596	Symbol	digit_num		385905						
ANR	386597	Symbol	get_register_id		385905						
ANR	386598	Symbol	first_sqbracket		385905						
ANR	386599	Symbol	* extra_word_value		385905						
ANR	386600	Symbol	stderr		385905						
ANR	386601	Symbol	current_digit		385905						
ANR	386602	Symbol	square_brackets		385905						
ANR	386603	Symbol	* param		385905						
ANR	386604	Symbol	extra_word_value		385905						
ANR	386605	Symbol	strlen		385905						
ANR	386606	Symbol	strncmp		385905						
ANR	386607	Symbol	digit_count		385905						
ANR	386608	Symbol	* strlen		385905						
ANR	386609	Symbol	param		385905						
ANR	386610	Symbol	reg		385905						
ANR	386611	Symbol	* extra_word_needed		385905						
ANR	386612	Symbol	* digit_num		385905						
ANR	386613	Symbol	last_sqbracket		385905						
ANR	386614	Symbol	digit_val		385905						
ANR	386615	Symbol	extra_word_needed		385905						
ANR	386616	Symbol	value		385905						
ANR	386617	Function	dcpu16_assemble	206:0:5714:9233							
ANR	386618	FunctionDef	"dcpu16_assemble (ut8 * out , const char * unoline)"		386617	0					
ANR	386619	CompoundStatement		206:52:5766:9233	386617	0					
ANR	386620	IdentifierDeclStatement	"ut16 wordA = 0 , wordB = 0 ;"	207:1:5769:5794	386617	0	True				
ANR	386621	IdentifierDecl	wordA = 0		386617	0					
ANR	386622	IdentifierDeclType	ut16		386617	0					
ANR	386623	Identifier	wordA		386617	1					
ANR	386624	AssignmentExpression	wordA = 0		386617	2		=			
ANR	386625	Identifier	wordA		386617	0					
ANR	386626	PrimaryExpression	0		386617	1					
ANR	386627	IdentifierDecl	wordB = 0		386617	1					
ANR	386628	IdentifierDeclType	ut16		386617	0					
ANR	386629	Identifier	wordB		386617	1					
ANR	386630	AssignmentExpression	wordB = 0		386617	2		=			
ANR	386631	Identifier	wordB		386617	0					
ANR	386632	PrimaryExpression	0		386617	1					
ANR	386633	IdentifierDeclStatement	int basic_opcode = 0 ;	208:1:5797:5817	386617	1	True				
ANR	386634	IdentifierDecl	basic_opcode = 0		386617	0					
ANR	386635	IdentifierDeclType	int		386617	0					
ANR	386636	Identifier	basic_opcode		386617	1					
ANR	386637	AssignmentExpression	basic_opcode = 0		386617	2		=			
ANR	386638	Identifier	basic_opcode		386617	0					
ANR	386639	PrimaryExpression	0		386617	1					
ANR	386640	IdentifierDeclStatement	int non_basic_opcode = 0 ;	209:1:5820:5844	386617	2	True				
ANR	386641	IdentifierDecl	non_basic_opcode = 0		386617	0					
ANR	386642	IdentifierDeclType	int		386617	0					
ANR	386643	Identifier	non_basic_opcode		386617	1					
ANR	386644	AssignmentExpression	non_basic_opcode = 0		386617	2		=			
ANR	386645	Identifier	non_basic_opcode		386617	0					
ANR	386646	PrimaryExpression	0		386617	1					
ANR	386647	IdentifierDeclStatement	"char line [ 256 ] = { 0 } , * param ;"	210:1:5847:5875	386617	3	True				
ANR	386648	IdentifierDecl	line [ 256 ] = { 0 }		386617	0					
ANR	386649	IdentifierDeclType	char [ 256 ]		386617	0					
ANR	386650	Identifier	line		386617	1					
ANR	386651	PrimaryExpression	256		386617	2					
ANR	386652	AssignmentExpression	line [ 256 ] = { 0 }		386617	3		=			
ANR	386653	Identifier	line		386617	0					
ANR	386654	InitializerList	0		386617	1					
ANR	386655	PrimaryExpression	0		386617	0					
ANR	386656	IdentifierDecl	* param		386617	1					
ANR	386657	IdentifierDeclType	char *		386617	0					
ANR	386658	Identifier	param		386617	1					
ANR	386659	IdentifierDeclStatement	int off = 0 ;	211:1:5878:5889	386617	4	True				
ANR	386660	IdentifierDecl	off = 0		386617	0					
ANR	386661	IdentifierDeclType	int		386617	0					
ANR	386662	Identifier	off		386617	1					
ANR	386663	AssignmentExpression	off = 0		386617	2		=			
ANR	386664	Identifier	off		386617	0					
ANR	386665	PrimaryExpression	0		386617	1					
ANR	386666	ExpressionStatement	"clean_line ( line , unoline )"	213:1:5906:5932	386617	5	True				
ANR	386667	CallExpression	"clean_line ( line , unoline )"		386617	0					
ANR	386668	Callee	clean_line		386617	0					
ANR	386669	Identifier	clean_line		386617	0					
ANR	386670	ArgumentList	line		386617	1					
ANR	386671	Argument	line		386617	0					
ANR	386672	Identifier	line		386617	0					
ANR	386673	Argument	unoline		386617	1					
ANR	386674	Identifier	unoline		386617	0					
ANR	386675	IfStatement	if ( ! ( * line ) )		386617	6					
ANR	386676	Condition	! ( * line )	215:5:5941:5948	386617	0	True				
ANR	386677	UnaryOperationExpression	! ( * line )		386617	0					
ANR	386678	UnaryOperator	!		386617	0					
ANR	386679	UnaryOperationExpression	* line		386617	1					
ANR	386680	UnaryOperator	*		386617	0					
ANR	386681	Identifier	line		386617	1					
ANR	386682	ReturnStatement	return 0 ;	215:15:5951:5959	386617	1	True				
ANR	386683	PrimaryExpression	0		386617	0					
ANR	386684	IfStatement	if ( strlen ( line ) < 4 )		386617	7					
ANR	386685	Condition	strlen ( line ) < 4	216:5:5966:5980	386617	0	True				
ANR	386686	RelationalExpression	strlen ( line ) < 4		386617	0		<			
ANR	386687	CallExpression	strlen ( line )		386617	0					
ANR	386688	Callee	strlen		386617	0					
ANR	386689	Identifier	strlen		386617	0					
ANR	386690	ArgumentList	line		386617	1					
ANR	386691	Argument	line		386617	0					
ANR	386692	Identifier	line		386617	0					
ANR	386693	PrimaryExpression	4		386617	1					
ANR	386694	ReturnStatement	return 0 ;	216:22:5983:5991	386617	1	True				
ANR	386695	PrimaryExpression	0		386617	0					
ANR	386696	ExpressionStatement	param = line + 3	217:1:5994:6010	386617	8	True				
ANR	386697	AssignmentExpression	param = line + 3		386617	0		=			
ANR	386698	Identifier	param		386617	0					
ANR	386699	AdditiveExpression	line + 3		386617	1		+			
ANR	386700	Identifier	line		386617	0					
ANR	386701	PrimaryExpression	3		386617	1					
ANR	386702	IfStatement	"if ( ! strncmp ( ""SET"" , line , 3 ) )"		386617	9					
ANR	386703	Condition	"! strncmp ( ""SET"" , line , 3 )"	221:5:6101:6125	386617	0	True				
ANR	386704	UnaryOperationExpression	"! strncmp ( ""SET"" , line , 3 )"		386617	0					
ANR	386705	UnaryOperator	!		386617	0					
ANR	386706	CallExpression	"strncmp ( ""SET"" , line , 3 )"		386617	1					
ANR	386707	Callee	strncmp		386617	0					
ANR	386708	Identifier	strncmp		386617	0					
ANR	386709	ArgumentList	"""SET"""		386617	1					
ANR	386710	Argument	"""SET"""		386617	0					
ANR	386711	PrimaryExpression	"""SET"""		386617	0					
ANR	386712	Argument	line		386617	1					
ANR	386713	Identifier	line		386617	0					
ANR	386714	Argument	3		386617	2					
ANR	386715	PrimaryExpression	3		386617	0					
ANR	386716	ExpressionStatement	basic_opcode = 0x1	221:32:6128:6146	386617	1	True				
ANR	386717	AssignmentExpression	basic_opcode = 0x1		386617	0		=			
ANR	386718	Identifier	basic_opcode		386617	0					
ANR	386719	PrimaryExpression	0x1		386617	1					
ANR	386720	ElseStatement	else		386617	0					
ANR	386721	IfStatement	"if ( ! strncmp ( ""ADD"" , line , 3 ) )"		386617	0					
ANR	386722	Condition	"! strncmp ( ""ADD"" , line , 3 )"	222:10:6158:6182	386617	0	True				
ANR	386723	UnaryOperationExpression	"! strncmp ( ""ADD"" , line , 3 )"		386617	0					
ANR	386724	UnaryOperator	!		386617	0					
ANR	386725	CallExpression	"strncmp ( ""ADD"" , line , 3 )"		386617	1					
ANR	386726	Callee	strncmp		386617	0					
ANR	386727	Identifier	strncmp		386617	0					
ANR	386728	ArgumentList	"""ADD"""		386617	1					
ANR	386729	Argument	"""ADD"""		386617	0					
ANR	386730	PrimaryExpression	"""ADD"""		386617	0					
ANR	386731	Argument	line		386617	1					
ANR	386732	Identifier	line		386617	0					
ANR	386733	Argument	3		386617	2					
ANR	386734	PrimaryExpression	3		386617	0					
ANR	386735	ExpressionStatement	basic_opcode = 0x2	222:37:6185:6203	386617	1	True				
ANR	386736	AssignmentExpression	basic_opcode = 0x2		386617	0		=			
ANR	386737	Identifier	basic_opcode		386617	0					
ANR	386738	PrimaryExpression	0x2		386617	1					
ANR	386739	ElseStatement	else		386617	0					
ANR	386740	IfStatement	"if ( ! strncmp ( ""SUB"" , line , 3 ) )"		386617	0					
ANR	386741	Condition	"! strncmp ( ""SUB"" , line , 3 )"	223:10:6215:6239	386617	0	True				
ANR	386742	UnaryOperationExpression	"! strncmp ( ""SUB"" , line , 3 )"		386617	0					
ANR	386743	UnaryOperator	!		386617	0					
ANR	386744	CallExpression	"strncmp ( ""SUB"" , line , 3 )"		386617	1					
ANR	386745	Callee	strncmp		386617	0					
ANR	386746	Identifier	strncmp		386617	0					
ANR	386747	ArgumentList	"""SUB"""		386617	1					
ANR	386748	Argument	"""SUB"""		386617	0					
ANR	386749	PrimaryExpression	"""SUB"""		386617	0					
ANR	386750	Argument	line		386617	1					
ANR	386751	Identifier	line		386617	0					
ANR	386752	Argument	3		386617	2					
ANR	386753	PrimaryExpression	3		386617	0					
ANR	386754	ExpressionStatement	basic_opcode = 0x3	223:37:6242:6260	386617	1	True				
ANR	386755	AssignmentExpression	basic_opcode = 0x3		386617	0		=			
ANR	386756	Identifier	basic_opcode		386617	0					
ANR	386757	PrimaryExpression	0x3		386617	1					
ANR	386758	ElseStatement	else		386617	0					
ANR	386759	IfStatement	"if ( ! strncmp ( ""MUL"" , line , 3 ) )"		386617	0					
ANR	386760	Condition	"! strncmp ( ""MUL"" , line , 3 )"	224:10:6272:6296	386617	0	True				
ANR	386761	UnaryOperationExpression	"! strncmp ( ""MUL"" , line , 3 )"		386617	0					
ANR	386762	UnaryOperator	!		386617	0					
ANR	386763	CallExpression	"strncmp ( ""MUL"" , line , 3 )"		386617	1					
ANR	386764	Callee	strncmp		386617	0					
ANR	386765	Identifier	strncmp		386617	0					
ANR	386766	ArgumentList	"""MUL"""		386617	1					
ANR	386767	Argument	"""MUL"""		386617	0					
ANR	386768	PrimaryExpression	"""MUL"""		386617	0					
ANR	386769	Argument	line		386617	1					
ANR	386770	Identifier	line		386617	0					
ANR	386771	Argument	3		386617	2					
ANR	386772	PrimaryExpression	3		386617	0					
ANR	386773	ExpressionStatement	basic_opcode = 0x4	224:37:6299:6317	386617	1	True				
ANR	386774	AssignmentExpression	basic_opcode = 0x4		386617	0		=			
ANR	386775	Identifier	basic_opcode		386617	0					
ANR	386776	PrimaryExpression	0x4		386617	1					
ANR	386777	ElseStatement	else		386617	0					
ANR	386778	IfStatement	"if ( ! strncmp ( ""DIV"" , line , 3 ) )"		386617	0					
ANR	386779	Condition	"! strncmp ( ""DIV"" , line , 3 )"	225:10:6329:6353	386617	0	True				
ANR	386780	UnaryOperationExpression	"! strncmp ( ""DIV"" , line , 3 )"		386617	0					
ANR	386781	UnaryOperator	!		386617	0					
ANR	386782	CallExpression	"strncmp ( ""DIV"" , line , 3 )"		386617	1					
ANR	386783	Callee	strncmp		386617	0					
ANR	386784	Identifier	strncmp		386617	0					
ANR	386785	ArgumentList	"""DIV"""		386617	1					
ANR	386786	Argument	"""DIV"""		386617	0					
ANR	386787	PrimaryExpression	"""DIV"""		386617	0					
ANR	386788	Argument	line		386617	1					
ANR	386789	Identifier	line		386617	0					
ANR	386790	Argument	3		386617	2					
ANR	386791	PrimaryExpression	3		386617	0					
ANR	386792	ExpressionStatement	basic_opcode = 0x5	225:37:6356:6374	386617	1	True				
ANR	386793	AssignmentExpression	basic_opcode = 0x5		386617	0		=			
ANR	386794	Identifier	basic_opcode		386617	0					
ANR	386795	PrimaryExpression	0x5		386617	1					
ANR	386796	ElseStatement	else		386617	0					
ANR	386797	IfStatement	"if ( ! strncmp ( ""MOD"" , line , 3 ) )"		386617	0					
ANR	386798	Condition	"! strncmp ( ""MOD"" , line , 3 )"	226:10:6386:6410	386617	0	True				
ANR	386799	UnaryOperationExpression	"! strncmp ( ""MOD"" , line , 3 )"		386617	0					
ANR	386800	UnaryOperator	!		386617	0					
ANR	386801	CallExpression	"strncmp ( ""MOD"" , line , 3 )"		386617	1					
ANR	386802	Callee	strncmp		386617	0					
ANR	386803	Identifier	strncmp		386617	0					
ANR	386804	ArgumentList	"""MOD"""		386617	1					
ANR	386805	Argument	"""MOD"""		386617	0					
ANR	386806	PrimaryExpression	"""MOD"""		386617	0					
ANR	386807	Argument	line		386617	1					
ANR	386808	Identifier	line		386617	0					
ANR	386809	Argument	3		386617	2					
ANR	386810	PrimaryExpression	3		386617	0					
ANR	386811	ExpressionStatement	basic_opcode = 0x6	226:37:6413:6431	386617	1	True				
ANR	386812	AssignmentExpression	basic_opcode = 0x6		386617	0		=			
ANR	386813	Identifier	basic_opcode		386617	0					
ANR	386814	PrimaryExpression	0x6		386617	1					
ANR	386815	ElseStatement	else		386617	0					
ANR	386816	IfStatement	"if ( ! strncmp ( ""SHL"" , line , 3 ) )"		386617	0					
ANR	386817	Condition	"! strncmp ( ""SHL"" , line , 3 )"	227:10:6443:6467	386617	0	True				
ANR	386818	UnaryOperationExpression	"! strncmp ( ""SHL"" , line , 3 )"		386617	0					
ANR	386819	UnaryOperator	!		386617	0					
ANR	386820	CallExpression	"strncmp ( ""SHL"" , line , 3 )"		386617	1					
ANR	386821	Callee	strncmp		386617	0					
ANR	386822	Identifier	strncmp		386617	0					
ANR	386823	ArgumentList	"""SHL"""		386617	1					
ANR	386824	Argument	"""SHL"""		386617	0					
ANR	386825	PrimaryExpression	"""SHL"""		386617	0					
ANR	386826	Argument	line		386617	1					
ANR	386827	Identifier	line		386617	0					
ANR	386828	Argument	3		386617	2					
ANR	386829	PrimaryExpression	3		386617	0					
ANR	386830	ExpressionStatement	basic_opcode = 0x7	227:37:6470:6488	386617	1	True				
ANR	386831	AssignmentExpression	basic_opcode = 0x7		386617	0		=			
ANR	386832	Identifier	basic_opcode		386617	0					
ANR	386833	PrimaryExpression	0x7		386617	1					
ANR	386834	ElseStatement	else		386617	0					
ANR	386835	IfStatement	"if ( ! strncmp ( ""SHR"" , line , 3 ) )"		386617	0					
ANR	386836	Condition	"! strncmp ( ""SHR"" , line , 3 )"	228:10:6500:6524	386617	0	True				
ANR	386837	UnaryOperationExpression	"! strncmp ( ""SHR"" , line , 3 )"		386617	0					
ANR	386838	UnaryOperator	!		386617	0					
ANR	386839	CallExpression	"strncmp ( ""SHR"" , line , 3 )"		386617	1					
ANR	386840	Callee	strncmp		386617	0					
ANR	386841	Identifier	strncmp		386617	0					
ANR	386842	ArgumentList	"""SHR"""		386617	1					
ANR	386843	Argument	"""SHR"""		386617	0					
ANR	386844	PrimaryExpression	"""SHR"""		386617	0					
ANR	386845	Argument	line		386617	1					
ANR	386846	Identifier	line		386617	0					
ANR	386847	Argument	3		386617	2					
ANR	386848	PrimaryExpression	3		386617	0					
ANR	386849	ExpressionStatement	basic_opcode = 0x8	228:37:6527:6545	386617	1	True				
ANR	386850	AssignmentExpression	basic_opcode = 0x8		386617	0		=			
ANR	386851	Identifier	basic_opcode		386617	0					
ANR	386852	PrimaryExpression	0x8		386617	1					
ANR	386853	ElseStatement	else		386617	0					
ANR	386854	IfStatement	"if ( ! strncmp ( ""AND"" , line , 3 ) )"		386617	0					
ANR	386855	Condition	"! strncmp ( ""AND"" , line , 3 )"	229:10:6557:6581	386617	0	True				
ANR	386856	UnaryOperationExpression	"! strncmp ( ""AND"" , line , 3 )"		386617	0					
ANR	386857	UnaryOperator	!		386617	0					
ANR	386858	CallExpression	"strncmp ( ""AND"" , line , 3 )"		386617	1					
ANR	386859	Callee	strncmp		386617	0					
ANR	386860	Identifier	strncmp		386617	0					
ANR	386861	ArgumentList	"""AND"""		386617	1					
ANR	386862	Argument	"""AND"""		386617	0					
ANR	386863	PrimaryExpression	"""AND"""		386617	0					
ANR	386864	Argument	line		386617	1					
ANR	386865	Identifier	line		386617	0					
ANR	386866	Argument	3		386617	2					
ANR	386867	PrimaryExpression	3		386617	0					
ANR	386868	ExpressionStatement	basic_opcode = 0x9	229:37:6584:6602	386617	1	True				
ANR	386869	AssignmentExpression	basic_opcode = 0x9		386617	0		=			
ANR	386870	Identifier	basic_opcode		386617	0					
ANR	386871	PrimaryExpression	0x9		386617	1					
ANR	386872	ElseStatement	else		386617	0					
ANR	386873	IfStatement	"if ( ! strncmp ( ""BOR"" , line , 3 ) )"		386617	0					
ANR	386874	Condition	"! strncmp ( ""BOR"" , line , 3 )"	230:10:6614:6638	386617	0	True				
ANR	386875	UnaryOperationExpression	"! strncmp ( ""BOR"" , line , 3 )"		386617	0					
ANR	386876	UnaryOperator	!		386617	0					
ANR	386877	CallExpression	"strncmp ( ""BOR"" , line , 3 )"		386617	1					
ANR	386878	Callee	strncmp		386617	0					
ANR	386879	Identifier	strncmp		386617	0					
ANR	386880	ArgumentList	"""BOR"""		386617	1					
ANR	386881	Argument	"""BOR"""		386617	0					
ANR	386882	PrimaryExpression	"""BOR"""		386617	0					
ANR	386883	Argument	line		386617	1					
ANR	386884	Identifier	line		386617	0					
ANR	386885	Argument	3		386617	2					
ANR	386886	PrimaryExpression	3		386617	0					
ANR	386887	ExpressionStatement	basic_opcode = 0xA	230:37:6641:6659	386617	1	True				
ANR	386888	AssignmentExpression	basic_opcode = 0xA		386617	0		=			
ANR	386889	Identifier	basic_opcode		386617	0					
ANR	386890	PrimaryExpression	0xA		386617	1					
ANR	386891	ElseStatement	else		386617	0					
ANR	386892	IfStatement	"if ( ! strncmp ( ""XOR"" , line , 3 ) )"		386617	0					
ANR	386893	Condition	"! strncmp ( ""XOR"" , line , 3 )"	231:10:6671:6695	386617	0	True				
ANR	386894	UnaryOperationExpression	"! strncmp ( ""XOR"" , line , 3 )"		386617	0					
ANR	386895	UnaryOperator	!		386617	0					
ANR	386896	CallExpression	"strncmp ( ""XOR"" , line , 3 )"		386617	1					
ANR	386897	Callee	strncmp		386617	0					
ANR	386898	Identifier	strncmp		386617	0					
ANR	386899	ArgumentList	"""XOR"""		386617	1					
ANR	386900	Argument	"""XOR"""		386617	0					
ANR	386901	PrimaryExpression	"""XOR"""		386617	0					
ANR	386902	Argument	line		386617	1					
ANR	386903	Identifier	line		386617	0					
ANR	386904	Argument	3		386617	2					
ANR	386905	PrimaryExpression	3		386617	0					
ANR	386906	ExpressionStatement	basic_opcode = 0xB	231:37:6698:6716	386617	1	True				
ANR	386907	AssignmentExpression	basic_opcode = 0xB		386617	0		=			
ANR	386908	Identifier	basic_opcode		386617	0					
ANR	386909	PrimaryExpression	0xB		386617	1					
ANR	386910	ElseStatement	else		386617	0					
ANR	386911	IfStatement	"if ( ! strncmp ( ""IFE"" , line , 3 ) )"		386617	0					
ANR	386912	Condition	"! strncmp ( ""IFE"" , line , 3 )"	232:10:6728:6752	386617	0	True				
ANR	386913	UnaryOperationExpression	"! strncmp ( ""IFE"" , line , 3 )"		386617	0					
ANR	386914	UnaryOperator	!		386617	0					
ANR	386915	CallExpression	"strncmp ( ""IFE"" , line , 3 )"		386617	1					
ANR	386916	Callee	strncmp		386617	0					
ANR	386917	Identifier	strncmp		386617	0					
ANR	386918	ArgumentList	"""IFE"""		386617	1					
ANR	386919	Argument	"""IFE"""		386617	0					
ANR	386920	PrimaryExpression	"""IFE"""		386617	0					
ANR	386921	Argument	line		386617	1					
ANR	386922	Identifier	line		386617	0					
ANR	386923	Argument	3		386617	2					
ANR	386924	PrimaryExpression	3		386617	0					
ANR	386925	ExpressionStatement	basic_opcode = 0xC	232:37:6755:6773	386617	1	True				
ANR	386926	AssignmentExpression	basic_opcode = 0xC		386617	0		=			
ANR	386927	Identifier	basic_opcode		386617	0					
ANR	386928	PrimaryExpression	0xC		386617	1					
ANR	386929	ElseStatement	else		386617	0					
ANR	386930	IfStatement	"if ( ! strncmp ( ""IFN"" , line , 3 ) )"		386617	0					
ANR	386931	Condition	"! strncmp ( ""IFN"" , line , 3 )"	233:10:6785:6809	386617	0	True				
ANR	386932	UnaryOperationExpression	"! strncmp ( ""IFN"" , line , 3 )"		386617	0					
ANR	386933	UnaryOperator	!		386617	0					
ANR	386934	CallExpression	"strncmp ( ""IFN"" , line , 3 )"		386617	1					
ANR	386935	Callee	strncmp		386617	0					
ANR	386936	Identifier	strncmp		386617	0					
ANR	386937	ArgumentList	"""IFN"""		386617	1					
ANR	386938	Argument	"""IFN"""		386617	0					
ANR	386939	PrimaryExpression	"""IFN"""		386617	0					
ANR	386940	Argument	line		386617	1					
ANR	386941	Identifier	line		386617	0					
ANR	386942	Argument	3		386617	2					
ANR	386943	PrimaryExpression	3		386617	0					
ANR	386944	ExpressionStatement	basic_opcode = 0xD	233:37:6812:6830	386617	1	True				
ANR	386945	AssignmentExpression	basic_opcode = 0xD		386617	0		=			
ANR	386946	Identifier	basic_opcode		386617	0					
ANR	386947	PrimaryExpression	0xD		386617	1					
ANR	386948	ElseStatement	else		386617	0					
ANR	386949	IfStatement	"if ( ! strncmp ( ""IFG"" , line , 3 ) )"		386617	0					
ANR	386950	Condition	"! strncmp ( ""IFG"" , line , 3 )"	234:10:6842:6866	386617	0	True				
ANR	386951	UnaryOperationExpression	"! strncmp ( ""IFG"" , line , 3 )"		386617	0					
ANR	386952	UnaryOperator	!		386617	0					
ANR	386953	CallExpression	"strncmp ( ""IFG"" , line , 3 )"		386617	1					
ANR	386954	Callee	strncmp		386617	0					
ANR	386955	Identifier	strncmp		386617	0					
ANR	386956	ArgumentList	"""IFG"""		386617	1					
ANR	386957	Argument	"""IFG"""		386617	0					
ANR	386958	PrimaryExpression	"""IFG"""		386617	0					
ANR	386959	Argument	line		386617	1					
ANR	386960	Identifier	line		386617	0					
ANR	386961	Argument	3		386617	2					
ANR	386962	PrimaryExpression	3		386617	0					
ANR	386963	ExpressionStatement	basic_opcode = 0xE	234:37:6869:6887	386617	1	True				
ANR	386964	AssignmentExpression	basic_opcode = 0xE		386617	0		=			
ANR	386965	Identifier	basic_opcode		386617	0					
ANR	386966	PrimaryExpression	0xE		386617	1					
ANR	386967	ElseStatement	else		386617	0					
ANR	386968	IfStatement	"if ( ! strncmp ( ""IFB"" , line , 3 ) )"		386617	0					
ANR	386969	Condition	"! strncmp ( ""IFB"" , line , 3 )"	235:10:6899:6923	386617	0	True				
ANR	386970	UnaryOperationExpression	"! strncmp ( ""IFB"" , line , 3 )"		386617	0					
ANR	386971	UnaryOperator	!		386617	0					
ANR	386972	CallExpression	"strncmp ( ""IFB"" , line , 3 )"		386617	1					
ANR	386973	Callee	strncmp		386617	0					
ANR	386974	Identifier	strncmp		386617	0					
ANR	386975	ArgumentList	"""IFB"""		386617	1					
ANR	386976	Argument	"""IFB"""		386617	0					
ANR	386977	PrimaryExpression	"""IFB"""		386617	0					
ANR	386978	Argument	line		386617	1					
ANR	386979	Identifier	line		386617	0					
ANR	386980	Argument	3		386617	2					
ANR	386981	PrimaryExpression	3		386617	0					
ANR	386982	ExpressionStatement	basic_opcode = 0xF	235:37:6926:6944	386617	1	True				
ANR	386983	AssignmentExpression	basic_opcode = 0xF		386617	0		=			
ANR	386984	Identifier	basic_opcode		386617	0					
ANR	386985	PrimaryExpression	0xF		386617	1					
ANR	386986	IfStatement	if ( basic_opcode == 0 )		386617	10					
ANR	386987	Condition	basic_opcode == 0	238:5:6983:6999	386617	0	True				
ANR	386988	EqualityExpression	basic_opcode == 0		386617	0		==			
ANR	386989	Identifier	basic_opcode		386617	0					
ANR	386990	PrimaryExpression	0		386617	1					
ANR	386991	CompoundStatement		33:24:1235:1235	386617	1					
ANR	386992	IfStatement	"if ( ! strncmp ( ""JSR"" , line , 3 ) )"		386617	0					
ANR	386993	Condition	"! strncmp ( ""JSR"" , line , 3 )"	239:6:7010:7034	386617	0	True				
ANR	386994	UnaryOperationExpression	"! strncmp ( ""JSR"" , line , 3 )"		386617	0					
ANR	386995	UnaryOperator	!		386617	0					
ANR	386996	CallExpression	"strncmp ( ""JSR"" , line , 3 )"		386617	1					
ANR	386997	Callee	strncmp		386617	0					
ANR	386998	Identifier	strncmp		386617	0					
ANR	386999	ArgumentList	"""JSR"""		386617	1					
ANR	387000	Argument	"""JSR"""		386617	0					
ANR	387001	PrimaryExpression	"""JSR"""		386617	0					
ANR	387002	Argument	line		386617	1					
ANR	387003	Identifier	line		386617	0					
ANR	387004	Argument	3		386617	2					
ANR	387005	PrimaryExpression	3		386617	0					
ANR	387006	CompoundStatement		34:33:1270:1270	386617	1					
ANR	387007	ExpressionStatement	non_basic_opcode = 0x1	240:3:7042:7064	386617	0	True				
ANR	387008	AssignmentExpression	non_basic_opcode = 0x1		386617	0		=			
ANR	387009	Identifier	non_basic_opcode		386617	0					
ANR	387010	PrimaryExpression	0x1		386617	1					
ANR	387011	ElseStatement	else		386617	0					
ANR	387012	CompoundStatement		36:9:1308:1308	386617	0					
ANR	387013	ExpressionStatement	"fprintf ( stderr , ""Unknown instruction\\n"" )"	242:3:7080:7121	386617	0	True				
ANR	387014	CallExpression	"fprintf ( stderr , ""Unknown instruction\\n"" )"		386617	0					
ANR	387015	Callee	fprintf		386617	0					
ANR	387016	Identifier	fprintf		386617	0					
ANR	387017	ArgumentList	stderr		386617	1					
ANR	387018	Argument	stderr		386617	0					
ANR	387019	Identifier	stderr		386617	0					
ANR	387020	Argument	"""Unknown instruction\\n"""		386617	1					
ANR	387021	PrimaryExpression	"""Unknown instruction\\n"""		386617	0					
ANR	387022	ReturnStatement	return - 1 ;	243:3:7126:7135	386617	1	True				
ANR	387023	UnaryOperationExpression	- 1		386617	0					
ANR	387024	UnaryOperator	-		386617	0					
ANR	387025	PrimaryExpression	1		386617	1					
ANR	387026	IfStatement	if ( basic_opcode != 0 )		386617	11					
ANR	387027	Condition	basic_opcode != 0	248:5:7184:7200	386617	0	True				
ANR	387028	EqualityExpression	basic_opcode != 0		386617	0		!=			
ANR	387029	Identifier	basic_opcode		386617	0					
ANR	387030	PrimaryExpression	0		386617	1					
ANR	387031	CompoundStatement		47:2:1492:1502	386617	1					
ANR	387032	IdentifierDeclStatement	"ut8 paramA = 0 , paramB = 0 ;"	249:2:7207:7233	386617	0	True				
ANR	387033	IdentifierDecl	paramA = 0		386617	0					
ANR	387034	IdentifierDeclType	ut8		386617	0					
ANR	387035	Identifier	paramA		386617	1					
ANR	387036	AssignmentExpression	paramA = 0		386617	2		=			
ANR	387037	Identifier	paramA		386617	0					
ANR	387038	PrimaryExpression	0		386617	1					
ANR	387039	IdentifierDecl	paramB = 0		386617	1					
ANR	387040	IdentifierDeclType	ut8		386617	0					
ANR	387041	Identifier	paramB		386617	1					
ANR	387042	AssignmentExpression	paramB = 0		386617	2		=			
ANR	387043	Identifier	paramB		386617	0					
ANR	387044	PrimaryExpression	0		386617	1					
ANR	387045	IdentifierDeclStatement	int cn = 0 ;	252:2:7259:7269	386617	1	True				
ANR	387046	IdentifierDecl	cn = 0		386617	0					
ANR	387047	IdentifierDeclType	int		386617	0					
ANR	387048	Identifier	cn		386617	1					
ANR	387049	AssignmentExpression	cn = 0		386617	2		=			
ANR	387050	Identifier	cn		386617	0					
ANR	387051	PrimaryExpression	0		386617	1					
ANR	387052	WhileStatement	"while ( cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0 )"		386617	2					
ANR	387053	Condition	"cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"	253:9:7280:7376	386617	0	True				
ANR	387054	AndExpression	"cn < 256 && param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"		386617	0		&&			
ANR	387055	RelationalExpression	cn < 256		386617	0		<			
ANR	387056	Identifier	cn		386617	0					
ANR	387057	PrimaryExpression	256		386617	1					
ANR	387058	AndExpression	"param [ cn ] != ',' && param [ cn ] != '\\n' && param [ cn ] != 0"		386617	1		&&			
ANR	387059	EqualityExpression	"param [ cn ] != ','"		386617	0		!=			
ANR	387060	ArrayIndexing	param [ cn ]		386617	0					
ANR	387061	Identifier	param		386617	0					
ANR	387062	Identifier	cn		386617	1					
ANR	387063	PrimaryExpression	"','"		386617	1					
ANR	387064	AndExpression	param [ cn ] != '\\n' && param [ cn ] != 0		386617	1		&&			
ANR	387065	EqualityExpression	param [ cn ] != '\\n'		386617	0		!=			
ANR	387066	ArrayIndexing	param [ cn ]		386617	0					
ANR	387067	Identifier	param		386617	0					
ANR	387068	Identifier	cn		386617	1					
ANR	387069	PrimaryExpression	'\\n'		386617	1					
ANR	387070	EqualityExpression	param [ cn ] != 0		386617	1		!=			
ANR	387071	ArrayIndexing	param [ cn ]		386617	0					
ANR	387072	Identifier	param		386617	0					
ANR	387073	Identifier	cn		386617	1					
ANR	387074	PrimaryExpression	0		386617	1					
ANR	387075	ExpressionStatement	cn ++	257:3:7382:7386	386617	1	True				
ANR	387076	PostIncDecOperationExpression	cn ++		386617	0					
ANR	387077	Identifier	cn		386617	0					
ANR	387078	IncDec	++		386617	1					
ANR	387079	IfStatement	"if ( param [ cn ] == ',' )"		386617	3					
ANR	387080	Condition	"param [ cn ] == ','"	259:6:7398:7413	386617	0	True				
ANR	387081	EqualityExpression	"param [ cn ] == ','"		386617	0		==			
ANR	387082	ArrayIndexing	param [ cn ]		386617	0					
ANR	387083	Identifier	param		386617	0					
ANR	387084	Identifier	cn		386617	1					
ANR	387085	PrimaryExpression	"','"		386617	1					
ANR	387086	CompoundStatement		58:3:1712:1725	386617	1					
ANR	387087	IdentifierDeclStatement	ut16 first_word ;	260:3:7421:7436	386617	0	True				
ANR	387088	IdentifierDecl	first_word		386617	0					
ANR	387089	IdentifierDeclType	ut16		386617	0					
ANR	387090	Identifier	first_word		386617	1					
ANR	387091	IdentifierDeclStatement	int extraA = 0 ;	261:3:7441:7455	386617	1	True				
ANR	387092	IdentifierDecl	extraA = 0		386617	0					
ANR	387093	IdentifierDeclType	int		386617	0					
ANR	387094	Identifier	extraA		386617	1					
ANR	387095	AssignmentExpression	extraA = 0		386617	2		=			
ANR	387096	Identifier	extraA		386617	0					
ANR	387097	PrimaryExpression	0		386617	1					
ANR	387098	IdentifierDeclStatement	int extraB = 0 ;	262:3:7460:7474	386617	2	True				
ANR	387099	IdentifierDecl	extraB = 0		386617	0					
ANR	387100	IdentifierDeclType	int		386617	0					
ANR	387101	Identifier	extraB		386617	1					
ANR	387102	AssignmentExpression	extraB = 0		386617	2		=			
ANR	387103	Identifier	extraB		386617	0					
ANR	387104	PrimaryExpression	0		386617	1					
ANR	387105	IdentifierDeclStatement	"char * pa , * pb ;"	263:3:7479:7492	386617	3	True				
ANR	387106	IdentifierDecl	* pa		386617	0					
ANR	387107	IdentifierDeclType	char *		386617	0					
ANR	387108	Identifier	pa		386617	1					
ANR	387109	IdentifierDecl	* pb		386617	1					
ANR	387110	IdentifierDeclType	char *		386617	0					
ANR	387111	Identifier	pb		386617	1					
ANR	387112	ExpressionStatement	param [ cn ] = 0	265:3:7540:7553	386617	4	True				
ANR	387113	AssignmentExpression	param [ cn ] = 0		386617	0		=			
ANR	387114	ArrayIndexing	param [ cn ]		386617	0					
ANR	387115	Identifier	param		386617	0					
ANR	387116	Identifier	cn		386617	1					
ANR	387117	PrimaryExpression	0		386617	1					
ANR	387118	ExpressionStatement	pa = param	266:3:7558:7568	386617	5	True				
ANR	387119	AssignmentExpression	pa = param		386617	0		=			
ANR	387120	Identifier	pa		386617	0					
ANR	387121	Identifier	param		386617	1					
ANR	387122	ExpressionStatement	pb = param + cn + 1	267:3:7573:7592	386617	6	True				
ANR	387123	AssignmentExpression	pb = param + cn + 1		386617	0		=			
ANR	387124	Identifier	pb		386617	0					
ANR	387125	AdditiveExpression	param + cn + 1		386617	1		+			
ANR	387126	Identifier	param		386617	0					
ANR	387127	AdditiveExpression	cn + 1		386617	1		+			
ANR	387128	Identifier	cn		386617	0					
ANR	387129	PrimaryExpression	1		386617	1					
ANR	387130	ExpressionStatement	"paramA = decode_parameter ( pa , & extraA , & wordA )"	273:3:7696:7743	386617	7	True				
ANR	387131	AssignmentExpression	"paramA = decode_parameter ( pa , & extraA , & wordA )"		386617	0		=			
ANR	387132	Identifier	paramA		386617	0					
ANR	387133	CallExpression	"decode_parameter ( pa , & extraA , & wordA )"		386617	1					
ANR	387134	Callee	decode_parameter		386617	0					
ANR	387135	Identifier	decode_parameter		386617	0					
ANR	387136	ArgumentList	pa		386617	1					
ANR	387137	Argument	pa		386617	0					
ANR	387138	Identifier	pa		386617	0					
ANR	387139	Argument	& extraA		386617	1					
ANR	387140	UnaryOperationExpression	& extraA		386617	0					
ANR	387141	UnaryOperator	&		386617	0					
ANR	387142	Identifier	extraA		386617	1					
ANR	387143	Argument	& wordA		386617	2					
ANR	387144	UnaryOperationExpression	& wordA		386617	0					
ANR	387145	UnaryOperator	&		386617	0					
ANR	387146	Identifier	wordA		386617	1					
ANR	387147	ExpressionStatement	"paramB = decode_parameter ( pb , & extraB , & wordB )"	277:3:7815:7861	386617	8	True				
ANR	387148	AssignmentExpression	"paramB = decode_parameter ( pb , & extraB , & wordB )"		386617	0		=			
ANR	387149	Identifier	paramB		386617	0					
ANR	387150	CallExpression	"decode_parameter ( pb , & extraB , & wordB )"		386617	1					
ANR	387151	Callee	decode_parameter		386617	0					
ANR	387152	Identifier	decode_parameter		386617	0					
ANR	387153	ArgumentList	pb		386617	1					
ANR	387154	Argument	pb		386617	0					
ANR	387155	Identifier	pb		386617	0					
ANR	387156	Argument	& extraB		386617	1					
ANR	387157	UnaryOperationExpression	& extraB		386617	0					
ANR	387158	UnaryOperator	&		386617	0					
ANR	387159	Identifier	extraB		386617	1					
ANR	387160	Argument	& wordB		386617	2					
ANR	387161	UnaryOperationExpression	& wordB		386617	0					
ANR	387162	UnaryOperator	&		386617	0					
ANR	387163	Identifier	wordB		386617	1					
ANR	387164	ExpressionStatement	first_word = ( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )	281:3:7945:8029	386617	9	True				
ANR	387165	AssignmentExpression	first_word = ( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	0		=			
ANR	387166	Identifier	first_word		386617	0					
ANR	387167	InclusiveOrExpression	( ( paramB & 0x3F ) << 10 ) | ( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	1		|			
ANR	387168	ShiftExpression	( paramB & 0x3F ) << 10		386617	0		<<			
ANR	387169	BitAndExpression	paramB & 0x3F		386617	0		&			
ANR	387170	Identifier	paramB		386617	0					
ANR	387171	PrimaryExpression	0x3F		386617	1					
ANR	387172	PrimaryExpression	10		386617	1					
ANR	387173	InclusiveOrExpression	( ( paramA & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	1		|			
ANR	387174	ShiftExpression	( paramA & 0x3F ) << 4		386617	0		<<			
ANR	387175	BitAndExpression	paramA & 0x3F		386617	0		&			
ANR	387176	Identifier	paramA		386617	0					
ANR	387177	PrimaryExpression	0x3F		386617	1					
ANR	387178	PrimaryExpression	4		386617	1					
ANR	387179	BitAndExpression	basic_opcode & 0xF		386617	1		&			
ANR	387180	Identifier	basic_opcode		386617	0					
ANR	387181	PrimaryExpression	0xF		386617	1					
ANR	387182	ExpressionStatement	"memcpy ( out , & first_word , 2 )"	285:3:8068:8096	386617	10	True				
ANR	387183	CallExpression	"memcpy ( out , & first_word , 2 )"		386617	0					
ANR	387184	Callee	memcpy		386617	0					
ANR	387185	Identifier	memcpy		386617	0					
ANR	387186	ArgumentList	out		386617	1					
ANR	387187	Argument	out		386617	0					
ANR	387188	Identifier	out		386617	0					
ANR	387189	Argument	& first_word		386617	1					
ANR	387190	UnaryOperationExpression	& first_word		386617	0					
ANR	387191	UnaryOperator	&		386617	0					
ANR	387192	Identifier	first_word		386617	1					
ANR	387193	Argument	2		386617	2					
ANR	387194	PrimaryExpression	2		386617	0					
ANR	387195	IfStatement	if ( extraA == 1 )		386617	11					
ANR	387196	Condition	extraA == 1	286:7:8105:8115	386617	0	True				
ANR	387197	EqualityExpression	extraA == 1		386617	0		==			
ANR	387198	Identifier	extraA		386617	0					
ANR	387199	PrimaryExpression	1		386617	1					
ANR	387200	CompoundStatement		81:20:2351:2351	386617	1					
ANR	387201	ExpressionStatement	"memcpy ( out + 2 , & wordA , 2 )"	287:4:8124:8149	386617	0	True				
ANR	387202	CallExpression	"memcpy ( out + 2 , & wordA , 2 )"		386617	0					
ANR	387203	Callee	memcpy		386617	0					
ANR	387204	Identifier	memcpy		386617	0					
ANR	387205	ArgumentList	out + 2		386617	1					
ANR	387206	Argument	out + 2		386617	0					
ANR	387207	AdditiveExpression	out + 2		386617	0		+			
ANR	387208	Identifier	out		386617	0					
ANR	387209	PrimaryExpression	2		386617	1					
ANR	387210	Argument	& wordA		386617	1					
ANR	387211	UnaryOperationExpression	& wordA		386617	0					
ANR	387212	UnaryOperator	&		386617	0					
ANR	387213	Identifier	wordA		386617	1					
ANR	387214	Argument	2		386617	2					
ANR	387215	PrimaryExpression	2		386617	0					
ANR	387216	ExpressionStatement	off = 4	288:4:8155:8162	386617	1	True				
ANR	387217	AssignmentExpression	off = 4		386617	0		=			
ANR	387218	Identifier	off		386617	0					
ANR	387219	PrimaryExpression	4		386617	1					
ANR	387220	ElseStatement	else		386617	0					
ANR	387221	ExpressionStatement	off = 2	289:10:8174:8181	386617	0	True				
ANR	387222	AssignmentExpression	off = 2		386617	0		=			
ANR	387223	Identifier	off		386617	0					
ANR	387224	PrimaryExpression	2		386617	1					
ANR	387225	IfStatement	if ( extraB == 1 )		386617	12					
ANR	387226	Condition	extraB == 1	290:7:8190:8200	386617	0	True				
ANR	387227	EqualityExpression	extraB == 1		386617	0		==			
ANR	387228	Identifier	extraB		386617	0					
ANR	387229	PrimaryExpression	1		386617	1					
ANR	387230	CompoundStatement		85:20:2436:2436	386617	1					
ANR	387231	ExpressionStatement	"memcpy ( out + off , & wordB , 2 )"	291:4:8209:8236	386617	0	True				
ANR	387232	CallExpression	"memcpy ( out + off , & wordB , 2 )"		386617	0					
ANR	387233	Callee	memcpy		386617	0					
ANR	387234	Identifier	memcpy		386617	0					
ANR	387235	ArgumentList	out + off		386617	1					
ANR	387236	Argument	out + off		386617	0					
ANR	387237	AdditiveExpression	out + off		386617	0		+			
ANR	387238	Identifier	out		386617	0					
ANR	387239	Identifier	off		386617	1					
ANR	387240	Argument	& wordB		386617	1					
ANR	387241	UnaryOperationExpression	& wordB		386617	0					
ANR	387242	UnaryOperator	&		386617	0					
ANR	387243	Identifier	wordB		386617	1					
ANR	387244	Argument	2		386617	2					
ANR	387245	PrimaryExpression	2		386617	0					
ANR	387246	ExpressionStatement	off += 2	292:4:8242:8250	386617	1	True				
ANR	387247	AssignmentExpression	off += 2		386617	0		+=			
ANR	387248	Identifier	off		386617	0					
ANR	387249	PrimaryExpression	2		386617	1					
ANR	387250	ElseStatement	else		386617	0					
ANR	387251	CompoundStatement		103:9:2798:2798	386617	0					
ANR	387252	ExpressionStatement	"fprintf ( stderr , ""Missing comma\\n"" )"	309:3:8570:8605	386617	0	True				
ANR	387253	CallExpression	"fprintf ( stderr , ""Missing comma\\n"" )"		386617	0					
ANR	387254	Callee	fprintf		386617	0					
ANR	387255	Identifier	fprintf		386617	0					
ANR	387256	ArgumentList	stderr		386617	1					
ANR	387257	Argument	stderr		386617	0					
ANR	387258	Identifier	stderr		386617	0					
ANR	387259	Argument	"""Missing comma\\n"""		386617	1					
ANR	387260	PrimaryExpression	"""Missing comma\\n"""		386617	0					
ANR	387261	ReturnStatement	return - 1 ;	310:3:8610:8619	386617	1	True				
ANR	387262	UnaryOperationExpression	- 1		386617	0					
ANR	387263	UnaryOperator	-		386617	0					
ANR	387264	PrimaryExpression	1		386617	1					
ANR	387265	IfStatement	if ( non_basic_opcode == 0x1 )		386617	12					
ANR	387266	Condition	non_basic_opcode == 0x1	315:5:8665:8687	386617	0	True				
ANR	387267	EqualityExpression	non_basic_opcode == 0x1		386617	0		==			
ANR	387268	Identifier	non_basic_opcode		386617	0					
ANR	387269	PrimaryExpression	0x1		386617	1					
ANR	387270	CompoundStatement		113:2:2985:3034	386617	1					
ANR	387271	IdentifierDeclStatement	int extraX = 0 ;	316:2:8704:8718	386617	0	True				
ANR	387272	IdentifierDecl	extraX = 0		386617	0					
ANR	387273	IdentifierDeclType	int		386617	0					
ANR	387274	Identifier	extraX		386617	1					
ANR	387275	AssignmentExpression	extraX = 0		386617	2		=			
ANR	387276	Identifier	extraX		386617	0					
ANR	387277	PrimaryExpression	0		386617	1					
ANR	387278	IdentifierDeclStatement	"ut16 first_word , wordX = 0 ;"	317:2:8722:8748	386617	1	True				
ANR	387279	IdentifierDecl	first_word		386617	0					
ANR	387280	IdentifierDeclType	ut16		386617	0					
ANR	387281	Identifier	first_word		386617	1					
ANR	387282	IdentifierDecl	wordX = 0		386617	1					
ANR	387283	IdentifierDeclType	ut16		386617	0					
ANR	387284	Identifier	wordX		386617	1					
ANR	387285	AssignmentExpression	wordX = 0		386617	2		=			
ANR	387286	Identifier	wordX		386617	0					
ANR	387287	PrimaryExpression	0		386617	1					
ANR	387288	IdentifierDeclStatement	"ut8 p = decode_parameter ( param , & extraX , & wordX ) ;"	318:2:8752:8801	386617	2	True				
ANR	387289	IdentifierDecl	"p = decode_parameter ( param , & extraX , & wordX )"		386617	0					
ANR	387290	IdentifierDeclType	ut8		386617	0					
ANR	387291	Identifier	p		386617	1					
ANR	387292	AssignmentExpression	"p = decode_parameter ( param , & extraX , & wordX )"		386617	2		=			
ANR	387293	Identifier	p		386617	0					
ANR	387294	CallExpression	"decode_parameter ( param , & extraX , & wordX )"		386617	1					
ANR	387295	Callee	decode_parameter		386617	0					
ANR	387296	Identifier	decode_parameter		386617	0					
ANR	387297	ArgumentList	param		386617	1					
ANR	387298	Argument	param		386617	0					
ANR	387299	Identifier	param		386617	0					
ANR	387300	Argument	& extraX		386617	1					
ANR	387301	UnaryOperationExpression	& extraX		386617	0					
ANR	387302	UnaryOperator	&		386617	0					
ANR	387303	Identifier	extraX		386617	1					
ANR	387304	Argument	& wordX		386617	2					
ANR	387305	UnaryOperationExpression	& wordX		386617	0					
ANR	387306	UnaryOperator	&		386617	0					
ANR	387307	Identifier	wordX		386617	1					
ANR	387308	ExpressionStatement	first_word = ( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )	320:2:8806:8905	386617	3	True				
ANR	387309	AssignmentExpression	first_word = ( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	0		=			
ANR	387310	Identifier	first_word		386617	0					
ANR	387311	InclusiveOrExpression	( ( p & 0x3F ) << 10 ) | ( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	1		|			
ANR	387312	ShiftExpression	( p & 0x3F ) << 10		386617	0		<<			
ANR	387313	BitAndExpression	p & 0x3F		386617	0		&			
ANR	387314	Identifier	p		386617	0					
ANR	387315	PrimaryExpression	0x3F		386617	1					
ANR	387316	PrimaryExpression	10		386617	1					
ANR	387317	InclusiveOrExpression	( ( non_basic_opcode & 0x3F ) << 4 ) | ( basic_opcode & 0xF )		386617	1		|			
ANR	387318	ShiftExpression	( non_basic_opcode & 0x3F ) << 4		386617	0		<<			
ANR	387319	BitAndExpression	non_basic_opcode & 0x3F		386617	0		&			
ANR	387320	Identifier	non_basic_opcode		386617	0					
ANR	387321	PrimaryExpression	0x3F		386617	1					
ANR	387322	PrimaryExpression	4		386617	1					
ANR	387323	BitAndExpression	basic_opcode & 0xF		386617	1		&			
ANR	387324	Identifier	basic_opcode		386617	0					
ANR	387325	PrimaryExpression	0xF		386617	1					
ANR	387326	ExpressionStatement	"memcpy ( out , & first_word , 2 )"	324:2:8920:8948	386617	4	True				
ANR	387327	CallExpression	"memcpy ( out , & first_word , 2 )"		386617	0					
ANR	387328	Callee	memcpy		386617	0					
ANR	387329	Identifier	memcpy		386617	0					
ANR	387330	ArgumentList	out		386617	1					
ANR	387331	Argument	out		386617	0					
ANR	387332	Identifier	out		386617	0					
ANR	387333	Argument	& first_word		386617	1					
ANR	387334	UnaryOperationExpression	& first_word		386617	0					
ANR	387335	UnaryOperator	&		386617	0					
ANR	387336	Identifier	first_word		386617	1					
ANR	387337	Argument	2		386617	2					
ANR	387338	PrimaryExpression	2		386617	0					
ANR	387339	IfStatement	if ( extraX == 1 )		386617	5					
ANR	387340	Condition	extraX == 1	325:6:8956:8966	386617	0	True				
ANR	387341	EqualityExpression	extraX == 1		386617	0		==			
ANR	387342	Identifier	extraX		386617	0					
ANR	387343	PrimaryExpression	1		386617	1					
ANR	387344	CompoundStatement		120:19:3202:3202	386617	1					
ANR	387345	ExpressionStatement	"memcpy ( out + 2 , & wordX , 2 )"	326:3:8974:8999	386617	0	True				
ANR	387346	CallExpression	"memcpy ( out + 2 , & wordX , 2 )"		386617	0					
ANR	387347	Callee	memcpy		386617	0					
ANR	387348	Identifier	memcpy		386617	0					
ANR	387349	ArgumentList	out + 2		386617	1					
ANR	387350	Argument	out + 2		386617	0					
ANR	387351	AdditiveExpression	out + 2		386617	0		+			
ANR	387352	Identifier	out		386617	0					
ANR	387353	PrimaryExpression	2		386617	1					
ANR	387354	Argument	& wordX		386617	1					
ANR	387355	UnaryOperationExpression	& wordX		386617	0					
ANR	387356	UnaryOperator	&		386617	0					
ANR	387357	Identifier	wordX		386617	1					
ANR	387358	Argument	2		386617	2					
ANR	387359	PrimaryExpression	2		386617	0					
ANR	387360	ExpressionStatement	off = 4	327:3:9004:9011	386617	1	True				
ANR	387361	AssignmentExpression	off = 4		386617	0		=			
ANR	387362	Identifier	off		386617	0					
ANR	387363	PrimaryExpression	4		386617	1					
ANR	387364	ElseStatement	else		386617	0					
ANR	387365	ExpressionStatement	off = 2	328:9:9022:9029	386617	0	True				
ANR	387366	AssignmentExpression	off = 2		386617	0		=			
ANR	387367	Identifier	off		386617	0					
ANR	387368	PrimaryExpression	2		386617	1					
ANR	387369	ReturnStatement	return off ;	339:1:9221:9231	386617	13	True				
ANR	387370	Identifier	off		386617	0					
ANR	387371	ReturnType	int		386617	1					
ANR	387372	Identifier	dcpu16_assemble		386617	2					
ANR	387373	ParameterList	"ut8 * out , const char * unoline"		386617	3					
ANR	387374	Parameter	ut8 * out	206:21:5735:5742	386617	0	True				
ANR	387375	ParameterType	ut8 *		386617	0					
ANR	387376	Identifier	out		386617	1					
ANR	387377	Parameter	const char * unoline	206:31:5745:5763	386617	1	True				
ANR	387378	ParameterType	const char *		386617	0					
ANR	387379	Identifier	unoline		386617	1					
ANR	387380	CFGEntryNode	ENTRY		386617		True				
ANR	387381	CFGExitNode	EXIT		386617		True				
ANR	387382	Symbol	basic_opcode		386617						
ANR	387383	Symbol	line		386617						
ANR	387384	Symbol	* line		386617						
ANR	387385	Symbol	non_basic_opcode		386617						
ANR	387386	Symbol	out		386617						
ANR	387387	Symbol	wordX		386617						
ANR	387388	Symbol	strlen		386617						
ANR	387389	Symbol	strncmp		386617						
ANR	387390	Symbol	first_word		386617						
ANR	387391	Symbol	& first_word		386617						
ANR	387392	Symbol	param		386617						
ANR	387393	Symbol	unoline		386617						
ANR	387394	Symbol	extraB		386617						
ANR	387395	Symbol	extraA		386617						
ANR	387396	Symbol	& extraX		386617						
ANR	387397	Symbol	& wordX		386617						
ANR	387398	Symbol	extraX		386617						
ANR	387399	Symbol	decode_parameter		386617						
ANR	387400	Symbol	cn		386617						
ANR	387401	Symbol	stderr		386617						
ANR	387402	Symbol	off		386617						
ANR	387403	Symbol	* param		386617						
ANR	387404	Symbol	p		386617						
ANR	387405	Symbol	pa		386617						
ANR	387406	Symbol	* cn		386617						
ANR	387407	Symbol	pb		386617						
ANR	387408	Symbol	& extraB		386617						
ANR	387409	Symbol	& wordA		386617						
ANR	387410	Symbol	& extraA		386617						
ANR	387411	Symbol	wordA		386617						
ANR	387412	Symbol	& wordB		386617						
ANR	387413	Symbol	wordB		386617						
ANR	387414	Symbol	paramA		386617						
ANR	387415	Symbol	paramB		386617						
