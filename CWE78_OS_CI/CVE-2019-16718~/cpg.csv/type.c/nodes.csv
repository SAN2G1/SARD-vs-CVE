command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6366877	File	data/converged/CVE-2019-16718~_radare2/type.c								
ANR	6366878	Function	is_type	7:0:135:453							
ANR	6366879	FunctionDef	is_type (char * type)		6366878	0					
ANR	6366880	CompoundStatement		7:33:168:453	6366878	0					
ANR	6366881	IdentifierDeclStatement	char * name = NULL ;	8:1:171:188	6366878	0	True				
ANR	6366882	IdentifierDecl	* name = NULL		6366878	0					
ANR	6366883	IdentifierDeclType	char *		6366878	0					
ANR	6366884	Identifier	name		6366878	1					
ANR	6366885	AssignmentExpression	* name = NULL		6366878	2		=			
ANR	6366886	Identifier	NULL		6366878	0					
ANR	6366887	Identifier	NULL		6366878	1					
ANR	6366888	IfStatement	"if ( ( name = strstr ( type , ""=type"" ) ) || ( name = strstr ( type , ""=struct"" ) ) || ( name = strstr ( type , ""=union"" ) ) || ( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) ) )"		6366878	1					
ANR	6366889	Condition	"( name = strstr ( type , ""=type"" ) ) || ( name = strstr ( type , ""=struct"" ) ) || ( name = strstr ( type , ""=union"" ) ) || ( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"	9:5:195:416	6366878	0	True				
ANR	6366890	OrExpression	"( name = strstr ( type , ""=type"" ) ) || ( name = strstr ( type , ""=struct"" ) ) || ( name = strstr ( type , ""=union"" ) ) || ( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"		6366878	0		||			
ANR	6366891	AssignmentExpression	"name = strstr ( type , ""=type"" )"		6366878	0		=			
ANR	6366892	Identifier	name		6366878	0					
ANR	6366893	CallExpression	"strstr ( type , ""=type"" )"		6366878	1					
ANR	6366894	Callee	strstr		6366878	0					
ANR	6366895	Identifier	strstr		6366878	0					
ANR	6366896	ArgumentList	type		6366878	1					
ANR	6366897	Argument	type		6366878	0					
ANR	6366898	Identifier	type		6366878	0					
ANR	6366899	Argument	"""=type"""		6366878	1					
ANR	6366900	PrimaryExpression	"""=type"""		6366878	0					
ANR	6366901	OrExpression	"( name = strstr ( type , ""=struct"" ) ) || ( name = strstr ( type , ""=union"" ) ) || ( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"		6366878	1		||			
ANR	6366902	AssignmentExpression	"name = strstr ( type , ""=struct"" )"		6366878	0		=			
ANR	6366903	Identifier	name		6366878	0					
ANR	6366904	CallExpression	"strstr ( type , ""=struct"" )"		6366878	1					
ANR	6366905	Callee	strstr		6366878	0					
ANR	6366906	Identifier	strstr		6366878	0					
ANR	6366907	ArgumentList	type		6366878	1					
ANR	6366908	Argument	type		6366878	0					
ANR	6366909	Identifier	type		6366878	0					
ANR	6366910	Argument	"""=struct"""		6366878	1					
ANR	6366911	PrimaryExpression	"""=struct"""		6366878	0					
ANR	6366912	OrExpression	"( name = strstr ( type , ""=union"" ) ) || ( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"		6366878	1		||			
ANR	6366913	AssignmentExpression	"name = strstr ( type , ""=union"" )"		6366878	0		=			
ANR	6366914	Identifier	name		6366878	0					
ANR	6366915	CallExpression	"strstr ( type , ""=union"" )"		6366878	1					
ANR	6366916	Callee	strstr		6366878	0					
ANR	6366917	Identifier	strstr		6366878	0					
ANR	6366918	ArgumentList	type		6366878	1					
ANR	6366919	Argument	type		6366878	0					
ANR	6366920	Identifier	type		6366878	0					
ANR	6366921	Argument	"""=union"""		6366878	1					
ANR	6366922	PrimaryExpression	"""=union"""		6366878	0					
ANR	6366923	OrExpression	"( name = strstr ( type , ""=enum"" ) ) || ( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"		6366878	1		||			
ANR	6366924	AssignmentExpression	"name = strstr ( type , ""=enum"" )"		6366878	0		=			
ANR	6366925	Identifier	name		6366878	0					
ANR	6366926	CallExpression	"strstr ( type , ""=enum"" )"		6366878	1					
ANR	6366927	Callee	strstr		6366878	0					
ANR	6366928	Identifier	strstr		6366878	0					
ANR	6366929	ArgumentList	type		6366878	1					
ANR	6366930	Argument	type		6366878	0					
ANR	6366931	Identifier	type		6366878	0					
ANR	6366932	Argument	"""=enum"""		6366878	1					
ANR	6366933	PrimaryExpression	"""=enum"""		6366878	0					
ANR	6366934	OrExpression	"( name = strstr ( type , ""=typedef"" ) ) || ( name = strstr ( type , ""=func"" ) )"		6366878	1		||			
ANR	6366935	AssignmentExpression	"name = strstr ( type , ""=typedef"" )"		6366878	0		=			
ANR	6366936	Identifier	name		6366878	0					
ANR	6366937	CallExpression	"strstr ( type , ""=typedef"" )"		6366878	1					
ANR	6366938	Callee	strstr		6366878	0					
ANR	6366939	Identifier	strstr		6366878	0					
ANR	6366940	ArgumentList	type		6366878	1					
ANR	6366941	Argument	type		6366878	0					
ANR	6366942	Identifier	type		6366878	0					
ANR	6366943	Argument	"""=typedef"""		6366878	1					
ANR	6366944	PrimaryExpression	"""=typedef"""		6366878	0					
ANR	6366945	AssignmentExpression	"name = strstr ( type , ""=func"" )"		6366878	1		=			
ANR	6366946	Identifier	name		6366878	0					
ANR	6366947	CallExpression	"strstr ( type , ""=func"" )"		6366878	1					
ANR	6366948	Callee	strstr		6366878	0					
ANR	6366949	Identifier	strstr		6366878	0					
ANR	6366950	ArgumentList	type		6366878	1					
ANR	6366951	Argument	type		6366878	0					
ANR	6366952	Identifier	type		6366878	0					
ANR	6366953	Argument	"""=func"""		6366878	1					
ANR	6366954	PrimaryExpression	"""=func"""		6366878	0					
ANR	6366955	CompoundStatement		8:35:250:250	6366878	1					
ANR	6366956	ReturnStatement	return name ;	15:2:423:434	6366878	0	True				
ANR	6366957	Identifier	name		6366878	0					
ANR	6366958	ReturnStatement	return NULL ;	17:1:440:451	6366878	2	True				
ANR	6366959	Identifier	NULL		6366878	0					
ANR	6366960	ReturnType	static char *		6366878	1					
ANR	6366961	Identifier	is_type		6366878	2					
ANR	6366962	ParameterList	char * type		6366878	3					
ANR	6366963	Parameter	char * type	7:21:156:165	6366878	0	True				
ANR	6366964	ParameterType	char *		6366878	0					
ANR	6366965	Identifier	type		6366878	1					
ANR	6366966	CFGEntryNode	ENTRY		6366878		True				
ANR	6366967	CFGExitNode	EXIT		6366878		True				
ANR	6366968	Symbol	NULL		6366878						
ANR	6366969	Symbol	strstr		6366878						
ANR	6366970	Symbol	name		6366878						
ANR	6366971	Symbol	type		6366878						
ANR	6366972	Function	save_type_size	25:0:621:1087							
ANR	6366973	FunctionDef	"save_type_size (Sdb * sdb_types , char * name)"		6366972	0					
ANR	6366974	CompoundStatement		25:55:676:1087	6366972	0					
ANR	6366975	IdentifierDeclStatement	char * type = NULL ;	26:1:679:696	6366972	0	True				
ANR	6366976	IdentifierDecl	* type = NULL		6366972	0					
ANR	6366977	IdentifierDeclType	char *		6366972	0					
ANR	6366978	Identifier	type		6366972	1					
ANR	6366979	AssignmentExpression	* type = NULL		6366972	2		=			
ANR	6366980	Identifier	NULL		6366972	0					
ANR	6366981	Identifier	NULL		6366972	1					
ANR	6366982	ExpressionStatement	r_return_if_fail ( sdb_types && name )	27:1:699:735	6366972	1	True				
ANR	6366983	CallExpression	r_return_if_fail ( sdb_types && name )		6366972	0					
ANR	6366984	Callee	r_return_if_fail		6366972	0					
ANR	6366985	Identifier	r_return_if_fail		6366972	0					
ANR	6366986	ArgumentList	sdb_types && name		6366972	1					
ANR	6366987	Argument	sdb_types && name		6366972	0					
ANR	6366988	AndExpression	sdb_types && name		6366972	0		&&			
ANR	6366989	Identifier	sdb_types		6366972	0					
ANR	6366990	Identifier	name		6366972	1					
ANR	6366991	IfStatement	"if ( ! sdb_exists ( sdb_types , name ) || ! ( type = sdb_get ( sdb_types , name , 0 ) ) )"		6366972	2					
ANR	6366992	Condition	"! sdb_exists ( sdb_types , name ) || ! ( type = sdb_get ( sdb_types , name , 0 ) )"	28:5:742:812	6366972	0	True				
ANR	6366993	OrExpression	"! sdb_exists ( sdb_types , name ) || ! ( type = sdb_get ( sdb_types , name , 0 ) )"		6366972	0		||			
ANR	6366994	UnaryOperationExpression	"! sdb_exists ( sdb_types , name )"		6366972	0					
ANR	6366995	UnaryOperator	!		6366972	0					
ANR	6366996	CallExpression	"sdb_exists ( sdb_types , name )"		6366972	1					
ANR	6366997	Callee	sdb_exists		6366972	0					
ANR	6366998	Identifier	sdb_exists		6366972	0					
ANR	6366999	ArgumentList	sdb_types		6366972	1					
ANR	6367000	Argument	sdb_types		6366972	0					
ANR	6367001	Identifier	sdb_types		6366972	0					
ANR	6367002	Argument	name		6366972	1					
ANR	6367003	Identifier	name		6366972	0					
ANR	6367004	UnaryOperationExpression	"! ( type = sdb_get ( sdb_types , name , 0 ) )"		6366972	1					
ANR	6367005	UnaryOperator	!		6366972	0					
ANR	6367006	AssignmentExpression	"type = sdb_get ( sdb_types , name , 0 )"		6366972	1		=			
ANR	6367007	Identifier	type		6366972	0					
ANR	6367008	CallExpression	"sdb_get ( sdb_types , name , 0 )"		6366972	1					
ANR	6367009	Callee	sdb_get		6366972	0					
ANR	6367010	Identifier	sdb_get		6366972	0					
ANR	6367011	ArgumentList	sdb_types		6366972	1					
ANR	6367012	Argument	sdb_types		6366972	0					
ANR	6367013	Identifier	sdb_types		6366972	0					
ANR	6367014	Argument	name		6366972	1					
ANR	6367015	Identifier	name		6366972	0					
ANR	6367016	Argument	0		6366972	2					
ANR	6367017	PrimaryExpression	0		6366972	0					
ANR	6367018	CompoundStatement		4:78:138:138	6366972	1					
ANR	6367019	ReturnStatement	return ;	29:2:819:825	6366972	0	True				
ANR	6367020	IdentifierDeclStatement	"char * type_name_size = r_str_newf ( ""%s.%s.%s"" , type , name , ""!size"" ) ;"	31:1:831:898	6366972	3	True				
ANR	6367021	IdentifierDecl	"* type_name_size = r_str_newf ( ""%s.%s.%s"" , type , name , ""!size"" )"		6366972	0					
ANR	6367022	IdentifierDeclType	char *		6366972	0					
ANR	6367023	Identifier	type_name_size		6366972	1					
ANR	6367024	AssignmentExpression	"* type_name_size = r_str_newf ( ""%s.%s.%s"" , type , name , ""!size"" )"		6366972	2		=			
ANR	6367025	Identifier	type_name_size		6366972	0					
ANR	6367026	CallExpression	"r_str_newf ( ""%s.%s.%s"" , type , name , ""!size"" )"		6366972	1					
ANR	6367027	Callee	r_str_newf		6366972	0					
ANR	6367028	Identifier	r_str_newf		6366972	0					
ANR	6367029	ArgumentList	"""%s.%s.%s"""		6366972	1					
ANR	6367030	Argument	"""%s.%s.%s"""		6366972	0					
ANR	6367031	PrimaryExpression	"""%s.%s.%s"""		6366972	0					
ANR	6367032	Argument	type		6366972	1					
ANR	6367033	Identifier	type		6366972	0					
ANR	6367034	Argument	name		6366972	2					
ANR	6367035	Identifier	name		6366972	0					
ANR	6367036	Argument	"""!size"""		6366972	3					
ANR	6367037	PrimaryExpression	"""!size"""		6366972	0					
ANR	6367038	ExpressionStatement	r_return_if_fail ( type_name_size )	32:1:901:934	6366972	4	True				
ANR	6367039	CallExpression	r_return_if_fail ( type_name_size )		6366972	0					
ANR	6367040	Callee	r_return_if_fail		6366972	0					
ANR	6367041	Identifier	r_return_if_fail		6366972	0					
ANR	6367042	ArgumentList	type_name_size		6366972	1					
ANR	6367043	Argument	type_name_size		6366972	0					
ANR	6367044	Identifier	type_name_size		6366972	0					
ANR	6367045	IdentifierDeclStatement	"int size = r_type_get_bitsize ( sdb_types , name ) ;"	33:1:937:984	6366972	5	True				
ANR	6367046	IdentifierDecl	"size = r_type_get_bitsize ( sdb_types , name )"		6366972	0					
ANR	6367047	IdentifierDeclType	int		6366972	0					
ANR	6367048	Identifier	size		6366972	1					
ANR	6367049	AssignmentExpression	"size = r_type_get_bitsize ( sdb_types , name )"		6366972	2		=			
ANR	6367050	Identifier	size		6366972	0					
ANR	6367051	CallExpression	"r_type_get_bitsize ( sdb_types , name )"		6366972	1					
ANR	6367052	Callee	r_type_get_bitsize		6366972	0					
ANR	6367053	Identifier	r_type_get_bitsize		6366972	0					
ANR	6367054	ArgumentList	sdb_types		6366972	1					
ANR	6367055	Argument	sdb_types		6366972	0					
ANR	6367056	Identifier	sdb_types		6366972	0					
ANR	6367057	Argument	name		6366972	1					
ANR	6367058	Identifier	name		6366972	0					
ANR	6367059	ExpressionStatement	"sdb_set ( sdb_types , type_name_size , sdb_fmt ( ""%d"" , size ) , 0 )"	34:1:987:1047	6366972	6	True				
ANR	6367060	CallExpression	"sdb_set ( sdb_types , type_name_size , sdb_fmt ( ""%d"" , size ) , 0 )"		6366972	0					
ANR	6367061	Callee	sdb_set		6366972	0					
ANR	6367062	Identifier	sdb_set		6366972	0					
ANR	6367063	ArgumentList	sdb_types		6366972	1					
ANR	6367064	Argument	sdb_types		6366972	0					
ANR	6367065	Identifier	sdb_types		6366972	0					
ANR	6367066	Argument	type_name_size		6366972	1					
ANR	6367067	Identifier	type_name_size		6366972	0					
ANR	6367068	Argument	"sdb_fmt ( ""%d"" , size )"		6366972	2					
ANR	6367069	CallExpression	"sdb_fmt ( ""%d"" , size )"		6366972	0					
ANR	6367070	Callee	sdb_fmt		6366972	0					
ANR	6367071	Identifier	sdb_fmt		6366972	0					
ANR	6367072	ArgumentList	"""%d"""		6366972	1					
ANR	6367073	Argument	"""%d"""		6366972	0					
ANR	6367074	PrimaryExpression	"""%d"""		6366972	0					
ANR	6367075	Argument	size		6366972	1					
ANR	6367076	Identifier	size		6366972	0					
ANR	6367077	Argument	0		6366972	3					
ANR	6367078	PrimaryExpression	0		6366972	0					
ANR	6367079	ExpressionStatement	free ( type )	35:1:1050:1061	6366972	7	True				
ANR	6367080	CallExpression	free ( type )		6366972	0					
ANR	6367081	Callee	free		6366972	0					
ANR	6367082	Identifier	free		6366972	0					
ANR	6367083	ArgumentList	type		6366972	1					
ANR	6367084	Argument	type		6366972	0					
ANR	6367085	Identifier	type		6366972	0					
ANR	6367086	ExpressionStatement	free ( type_name_size )	36:1:1064:1085	6366972	8	True				
ANR	6367087	CallExpression	free ( type_name_size )		6366972	0					
ANR	6367088	Callee	free		6366972	0					
ANR	6367089	Identifier	free		6366972	0					
ANR	6367090	ArgumentList	type_name_size		6366972	1					
ANR	6367091	Argument	type_name_size		6366972	0					
ANR	6367092	Identifier	type_name_size		6366972	0					
ANR	6367093	ReturnType	static void		6366972	1					
ANR	6367094	Identifier	save_type_size		6366972	2					
ANR	6367095	ParameterList	"Sdb * sdb_types , char * name"		6366972	3					
ANR	6367096	Parameter	Sdb * sdb_types	25:27:648:661	6366972	0	True				
ANR	6367097	ParameterType	Sdb *		6366972	0					
ANR	6367098	Identifier	sdb_types		6366972	1					
ANR	6367099	Parameter	char * name	25:43:664:673	6366972	1	True				
ANR	6367100	ParameterType	char *		6366972	0					
ANR	6367101	Identifier	name		6366972	1					
ANR	6367102	CFGEntryNode	ENTRY		6366972		True				
ANR	6367103	CFGExitNode	EXIT		6366972		True				
ANR	6367104	Symbol	NULL		6366972						
ANR	6367105	Symbol	size		6366972						
ANR	6367106	Symbol	sdb_types		6366972						
ANR	6367107	Symbol	r_type_get_bitsize		6366972						
ANR	6367108	Symbol	name		6366972						
ANR	6367109	Symbol	sdb_exists		6366972						
ANR	6367110	Symbol	sdb_get		6366972						
ANR	6367111	Symbol	r_str_newf		6366972						
ANR	6367112	Symbol	type		6366972						
ANR	6367113	Symbol	type_name_size		6366972						
ANR	6367114	Symbol	sdb_fmt		6366972						
ANR	6367115	Function	__save_parsed_type_size	44:0:1253:1833							
ANR	6367116	FunctionDef	"__save_parsed_type_size (RAnal * anal , const char * parsed)"		6367115	0					
ANR	6367117	CompoundStatement		44:69:1322:1833	6367115	0					
ANR	6367118	ExpressionStatement	r_return_if_fail ( anal && parsed )	45:1:1325:1358	6367115	0	True				
ANR	6367119	CallExpression	r_return_if_fail ( anal && parsed )		6367115	0					
ANR	6367120	Callee	r_return_if_fail		6367115	0					
ANR	6367121	Identifier	r_return_if_fail		6367115	0					
ANR	6367122	ArgumentList	anal && parsed		6367115	1					
ANR	6367123	Argument	anal && parsed		6367115	0					
ANR	6367124	AndExpression	anal && parsed		6367115	0		&&			
ANR	6367125	Identifier	anal		6367115	0					
ANR	6367126	Identifier	parsed		6367115	1					
ANR	6367127	IdentifierDeclStatement	char * str = strdup ( parsed ) ;	46:1:1361:1388	6367115	1	True				
ANR	6367128	IdentifierDecl	* str = strdup ( parsed )		6367115	0					
ANR	6367129	IdentifierDeclType	char *		6367115	0					
ANR	6367130	Identifier	str		6367115	1					
ANR	6367131	AssignmentExpression	* str = strdup ( parsed )		6367115	2		=			
ANR	6367132	Identifier	str		6367115	0					
ANR	6367133	CallExpression	strdup ( parsed )		6367115	1					
ANR	6367134	Callee	strdup		6367115	0					
ANR	6367135	Identifier	strdup		6367115	0					
ANR	6367136	ArgumentList	parsed		6367115	1					
ANR	6367137	Argument	parsed		6367115	0					
ANR	6367138	Identifier	parsed		6367115	0					
ANR	6367139	IfStatement	if ( str )		6367115	2					
ANR	6367140	Condition	str	47:5:1395:1397	6367115	0	True				
ANR	6367141	Identifier	str		6367115	0					
ANR	6367142	CompoundStatement		6:2:101:115	6367115	1					
ANR	6367143	IdentifierDeclStatement	char * ptr = NULL ;	48:2:1404:1420	6367115	0	True				
ANR	6367144	IdentifierDecl	* ptr = NULL		6367115	0					
ANR	6367145	IdentifierDeclType	char *		6367115	0					
ANR	6367146	Identifier	ptr		6367115	1					
ANR	6367147	AssignmentExpression	* ptr = NULL		6367115	2		=			
ANR	6367148	Identifier	NULL		6367115	0					
ANR	6367149	Identifier	NULL		6367115	1					
ANR	6367150	IdentifierDeclStatement	int offset = 0 ;	49:2:1424:1438	6367115	1	True				
ANR	6367151	IdentifierDecl	offset = 0		6367115	0					
ANR	6367152	IdentifierDeclType	int		6367115	0					
ANR	6367153	Identifier	offset		6367115	1					
ANR	6367154	AssignmentExpression	offset = 0		6367115	2		=			
ANR	6367155	Identifier	offset		6367115	0					
ANR	6367156	PrimaryExpression	0		6367115	1					
ANR	6367157	WhileStatement	"while ( ( ptr = strstr ( str + offset , ""=struct\\n"" ) ) || ( ptr = strstr ( str + offset , ""=union\\n"" ) ) )"		6367115	2					
ANR	6367158	Condition	"( ptr = strstr ( str + offset , ""=struct\\n"" ) ) || ( ptr = strstr ( str + offset , ""=union\\n"" ) )"	50:9:1449:1539	6367115	0	True				
ANR	6367159	OrExpression	"( ptr = strstr ( str + offset , ""=struct\\n"" ) ) || ( ptr = strstr ( str + offset , ""=union\\n"" ) )"		6367115	0		||			
ANR	6367160	AssignmentExpression	"ptr = strstr ( str + offset , ""=struct\\n"" )"		6367115	0		=			
ANR	6367161	Identifier	ptr		6367115	0					
ANR	6367162	CallExpression	"strstr ( str + offset , ""=struct\\n"" )"		6367115	1					
ANR	6367163	Callee	strstr		6367115	0					
ANR	6367164	Identifier	strstr		6367115	0					
ANR	6367165	ArgumentList	str + offset		6367115	1					
ANR	6367166	Argument	str + offset		6367115	0					
ANR	6367167	AdditiveExpression	str + offset		6367115	0		+			
ANR	6367168	Identifier	str		6367115	0					
ANR	6367169	Identifier	offset		6367115	1					
ANR	6367170	Argument	"""=struct\\n"""		6367115	1					
ANR	6367171	PrimaryExpression	"""=struct\\n"""		6367115	0					
ANR	6367172	AssignmentExpression	"ptr = strstr ( str + offset , ""=union\\n"" )"		6367115	1		=			
ANR	6367173	Identifier	ptr		6367115	0					
ANR	6367174	CallExpression	"strstr ( str + offset , ""=union\\n"" )"		6367115	1					
ANR	6367175	Callee	strstr		6367115	0					
ANR	6367176	Identifier	strstr		6367115	0					
ANR	6367177	ArgumentList	str + offset		6367115	1					
ANR	6367178	Argument	str + offset		6367115	0					
ANR	6367179	AdditiveExpression	str + offset		6367115	0		+			
ANR	6367180	Identifier	str		6367115	0					
ANR	6367181	Identifier	offset		6367115	1					
ANR	6367182	Argument	"""=union\\n"""		6367115	1					
ANR	6367183	PrimaryExpression	"""=union\\n"""		6367115	0					
ANR	6367184	CompoundStatement		13:3:283:303	6367115	1					
ANR	6367185	ExpressionStatement	* ptr = 0	52:3:1547:1555	6367115	0	True				
ANR	6367186	AssignmentExpression	* ptr = 0		6367115	0		=			
ANR	6367187	UnaryOperationExpression	* ptr		6367115	0					
ANR	6367188	UnaryOperator	*		6367115	0					
ANR	6367189	Identifier	ptr		6367115	1					
ANR	6367190	PrimaryExpression	0		6367115	1					
ANR	6367191	IfStatement	if ( str + offset == ptr )		6367115	1					
ANR	6367192	Condition	str + offset == ptr	53:7:1564:1582	6367115	0	True				
ANR	6367193	EqualityExpression	str + offset == ptr		6367115	0		==			
ANR	6367194	AdditiveExpression	str + offset		6367115	0		+			
ANR	6367195	Identifier	str		6367115	0					
ANR	6367196	Identifier	offset		6367115	1					
ANR	6367197	Identifier	ptr		6367115	1					
ANR	6367198	CompoundStatement		10:28:262:262	6367115	1					
ANR	6367199	BreakStatement	break ;	54:4:1591:1596	6367115	0	True				
ANR	6367200	IdentifierDeclStatement	char * name = ptr - 1 ;	56:3:1606:1626	6367115	2	True				
ANR	6367201	IdentifierDecl	* name = ptr - 1		6367115	0					
ANR	6367202	IdentifierDeclType	char *		6367115	0					
ANR	6367203	Identifier	name		6367115	1					
ANR	6367204	AssignmentExpression	* name = ptr - 1		6367115	2		=			
ANR	6367205	Identifier	name		6367115	0					
ANR	6367206	AdditiveExpression	ptr - 1		6367115	1		-			
ANR	6367207	Identifier	ptr		6367115	0					
ANR	6367208	PrimaryExpression	1		6367115	1					
ANR	6367209	WhileStatement	while ( name > str && * name != '\\n' )		6367115	3					
ANR	6367210	Condition	name > str && * name != '\\n'	57:10:1638:1664	6367115	0	True				
ANR	6367211	AndExpression	name > str && * name != '\\n'		6367115	0		&&			
ANR	6367212	RelationalExpression	name > str		6367115	0		>			
ANR	6367213	Identifier	name		6367115	0					
ANR	6367214	Identifier	str		6367115	1					
ANR	6367215	EqualityExpression	* name != '\\n'		6367115	1		!=			
ANR	6367216	UnaryOperationExpression	* name		6367115	0					
ANR	6367217	UnaryOperator	*		6367115	0					
ANR	6367218	Identifier	name		6367115	1					
ANR	6367219	PrimaryExpression	'\\n'		6367115	1					
ANR	6367220	CompoundStatement		14:39:344:344	6367115	1					
ANR	6367221	ExpressionStatement	name --	58:4:1673:1679	6367115	0	True				
ANR	6367222	PostIncDecOperationExpression	name --		6367115	0					
ANR	6367223	Identifier	name		6367115	0					
ANR	6367224	IncDec	--		6367115	1					
ANR	6367225	IfStatement	if ( * name == '\\n' )		6367115	4					
ANR	6367226	Condition	* name == '\\n'	60:7:1693:1705	6367115	0	True				
ANR	6367227	EqualityExpression	* name == '\\n'		6367115	0		==			
ANR	6367228	UnaryOperationExpression	* name		6367115	0					
ANR	6367229	UnaryOperator	*		6367115	0					
ANR	6367230	Identifier	name		6367115	1					
ANR	6367231	PrimaryExpression	'\\n'		6367115	1					
ANR	6367232	CompoundStatement		17:22:385:385	6367115	1					
ANR	6367233	ExpressionStatement	name ++	61:4:1714:1720	6367115	0	True				
ANR	6367234	PostIncDecOperationExpression	name ++		6367115	0					
ANR	6367235	Identifier	name		6367115	0					
ANR	6367236	IncDec	++		6367115	1					
ANR	6367237	ExpressionStatement	"save_type_size ( anal -> sdb_types , name )"	63:3:1730:1768	6367115	5	True				
ANR	6367238	CallExpression	"save_type_size ( anal -> sdb_types , name )"		6367115	0					
ANR	6367239	Callee	save_type_size		6367115	0					
ANR	6367240	Identifier	save_type_size		6367115	0					
ANR	6367241	ArgumentList	anal -> sdb_types		6367115	1					
ANR	6367242	Argument	anal -> sdb_types		6367115	0					
ANR	6367243	PtrMemberAccess	anal -> sdb_types		6367115	0					
ANR	6367244	Identifier	anal		6367115	0					
ANR	6367245	Identifier	sdb_types		6367115	1					
ANR	6367246	Argument	name		6367115	1					
ANR	6367247	Identifier	name		6367115	0					
ANR	6367248	ExpressionStatement	* ptr = '='	64:3:1773:1783	6367115	6	True				
ANR	6367249	AssignmentExpression	* ptr = '='		6367115	0		=			
ANR	6367250	UnaryOperationExpression	* ptr		6367115	0					
ANR	6367251	UnaryOperator	*		6367115	0					
ANR	6367252	Identifier	ptr		6367115	1					
ANR	6367253	PrimaryExpression	'='		6367115	1					
ANR	6367254	ExpressionStatement	offset = ptr + 1 - str	65:3:1788:1810	6367115	7	True				
ANR	6367255	AssignmentExpression	offset = ptr + 1 - str		6367115	0		=			
ANR	6367256	Identifier	offset		6367115	0					
ANR	6367257	AdditiveExpression	ptr + 1 - str		6367115	1		+			
ANR	6367258	Identifier	ptr		6367115	0					
ANR	6367259	AdditiveExpression	1 - str		6367115	1		-			
ANR	6367260	PrimaryExpression	1		6367115	0					
ANR	6367261	Identifier	str		6367115	1					
ANR	6367262	ExpressionStatement	free ( str )	67:2:1818:1828	6367115	3	True				
ANR	6367263	CallExpression	free ( str )		6367115	0					
ANR	6367264	Callee	free		6367115	0					
ANR	6367265	Identifier	free		6367115	0					
ANR	6367266	ArgumentList	str		6367115	1					
ANR	6367267	Argument	str		6367115	0					
ANR	6367268	Identifier	str		6367115	0					
ANR	6367269	ReturnType	static void		6367115	1					
ANR	6367270	Identifier	__save_parsed_type_size		6367115	2					
ANR	6367271	ParameterList	"RAnal * anal , const char * parsed"		6367115	3					
ANR	6367272	Parameter	RAnal * anal	44:36:1289:1299	6367115	0	True				
ANR	6367273	ParameterType	RAnal *		6367115	0					
ANR	6367274	Identifier	anal		6367115	1					
ANR	6367275	Parameter	const char * parsed	44:49:1302:1319	6367115	1	True				
ANR	6367276	ParameterType	const char *		6367115	0					
ANR	6367277	Identifier	parsed		6367115	1					
ANR	6367278	CFGEntryNode	ENTRY		6367115		True				
ANR	6367279	CFGExitNode	EXIT		6367115		True				
ANR	6367280	Symbol	* name		6367115						
ANR	6367281	Symbol	NULL		6367115						
ANR	6367282	Symbol	offset		6367115						
ANR	6367283	Symbol	ptr		6367115						
ANR	6367284	Symbol	str		6367115						
ANR	6367285	Symbol	* anal		6367115						
ANR	6367286	Symbol	anal		6367115						
ANR	6367287	Symbol	strstr		6367115						
ANR	6367288	Symbol	* ptr		6367115						
ANR	6367289	Symbol	name		6367115						
ANR	6367290	Symbol	parsed		6367115						
ANR	6367291	Symbol	strdup		6367115						
ANR	6367292	Symbol	anal -> sdb_types		6367115						
ANR	6367293	Function	r_anal_remove_parsed_type	71:0:1836:2452							
ANR	6367294	FunctionDef	"r_anal_remove_parsed_type (RAnal * anal , const char * name)"		6367293	0					
ANR	6367295	CompoundStatement		71:68:1904:2452	6367293	0					
ANR	6367296	ExpressionStatement	r_return_if_fail ( anal && name )	72:1:1907:1938	6367293	0	True				
ANR	6367297	CallExpression	r_return_if_fail ( anal && name )		6367293	0					
ANR	6367298	Callee	r_return_if_fail		6367293	0					
ANR	6367299	Identifier	r_return_if_fail		6367293	0					
ANR	6367300	ArgumentList	anal && name		6367293	1					
ANR	6367301	Argument	anal && name		6367293	0					
ANR	6367302	AndExpression	anal && name		6367293	0		&&			
ANR	6367303	Identifier	anal		6367293	0					
ANR	6367304	Identifier	name		6367293	1					
ANR	6367305	IdentifierDeclStatement	Sdb * TDB = anal -> sdb_types ;	73:1:1941:1967	6367293	1	True				
ANR	6367306	IdentifierDecl	* TDB = anal -> sdb_types		6367293	0					
ANR	6367307	IdentifierDeclType	Sdb *		6367293	0					
ANR	6367308	Identifier	TDB		6367293	1					
ANR	6367309	AssignmentExpression	* TDB = anal -> sdb_types		6367293	2		=			
ANR	6367310	Identifier	TDB		6367293	0					
ANR	6367311	PtrMemberAccess	anal -> sdb_types		6367293	1					
ANR	6367312	Identifier	anal		6367293	0					
ANR	6367313	Identifier	sdb_types		6367293	1					
ANR	6367314	IdentifierDeclStatement	SdbKv * kv ;	74:1:1970:1979	6367293	2	True				
ANR	6367315	IdentifierDecl	* kv		6367293	0					
ANR	6367316	IdentifierDeclType	SdbKv *		6367293	0					
ANR	6367317	Identifier	kv		6367293	1					
ANR	6367318	IdentifierDeclStatement	SdbListIter * iter ;	75:1:1982:1999	6367293	3	True				
ANR	6367319	IdentifierDecl	* iter		6367293	0					
ANR	6367320	IdentifierDeclType	SdbListIter *		6367293	0					
ANR	6367321	Identifier	iter		6367293	1					
ANR	6367322	IdentifierDeclStatement	"const char * type = sdb_const_get ( TDB , name , 0 ) ;"	76:1:2002:2049	6367293	4	True				
ANR	6367323	IdentifierDecl	"* type = sdb_const_get ( TDB , name , 0 )"		6367293	0					
ANR	6367324	IdentifierDeclType	const char *		6367293	0					
ANR	6367325	Identifier	type		6367293	1					
ANR	6367326	AssignmentExpression	"* type = sdb_const_get ( TDB , name , 0 )"		6367293	2		=			
ANR	6367327	Identifier	type		6367293	0					
ANR	6367328	CallExpression	"sdb_const_get ( TDB , name , 0 )"		6367293	1					
ANR	6367329	Callee	sdb_const_get		6367293	0					
ANR	6367330	Identifier	sdb_const_get		6367293	0					
ANR	6367331	ArgumentList	TDB		6367293	1					
ANR	6367332	Argument	TDB		6367293	0					
ANR	6367333	Identifier	TDB		6367293	0					
ANR	6367334	Argument	name		6367293	1					
ANR	6367335	Identifier	name		6367293	0					
ANR	6367336	Argument	0		6367293	2					
ANR	6367337	PrimaryExpression	0		6367293	0					
ANR	6367338	IfStatement	if ( ! type )		6367293	5					
ANR	6367339	Condition	! type	77:5:2056:2060	6367293	0	True				
ANR	6367340	UnaryOperationExpression	! type		6367293	0					
ANR	6367341	UnaryOperator	!		6367293	0					
ANR	6367342	Identifier	type		6367293	1					
ANR	6367343	CompoundStatement		7:12:158:158	6367293	1					
ANR	6367344	ReturnStatement	return ;	78:2:2067:2073	6367293	0	True				
ANR	6367345	IdentifierDeclStatement	int tmp_len = strlen ( name ) + strlen ( type ) ;	80:1:2079:2122	6367293	6	True				
ANR	6367346	IdentifierDecl	tmp_len = strlen ( name ) + strlen ( type )		6367293	0					
ANR	6367347	IdentifierDeclType	int		6367293	0					
ANR	6367348	Identifier	tmp_len		6367293	1					
ANR	6367349	AssignmentExpression	tmp_len = strlen ( name ) + strlen ( type )		6367293	2		=			
ANR	6367350	Identifier	tmp_len		6367293	0					
ANR	6367351	AdditiveExpression	strlen ( name ) + strlen ( type )		6367293	1		+			
ANR	6367352	CallExpression	strlen ( name )		6367293	0					
ANR	6367353	Callee	strlen		6367293	0					
ANR	6367354	Identifier	strlen		6367293	0					
ANR	6367355	ArgumentList	name		6367293	1					
ANR	6367356	Argument	name		6367293	0					
ANR	6367357	Identifier	name		6367293	0					
ANR	6367358	CallExpression	strlen ( type )		6367293	1					
ANR	6367359	Callee	strlen		6367293	0					
ANR	6367360	Identifier	strlen		6367293	0					
ANR	6367361	ArgumentList	type		6367293	1					
ANR	6367362	Argument	type		6367293	0					
ANR	6367363	Identifier	type		6367293	0					
ANR	6367364	IdentifierDeclStatement	char * tmp = malloc ( tmp_len + 1 ) ;	81:1:2125:2157	6367293	7	True				
ANR	6367365	IdentifierDecl	* tmp = malloc ( tmp_len + 1 )		6367293	0					
ANR	6367366	IdentifierDeclType	char *		6367293	0					
ANR	6367367	Identifier	tmp		6367293	1					
ANR	6367368	AssignmentExpression	* tmp = malloc ( tmp_len + 1 )		6367293	2		=			
ANR	6367369	Identifier	tmp		6367293	0					
ANR	6367370	CallExpression	malloc ( tmp_len + 1 )		6367293	1					
ANR	6367371	Callee	malloc		6367293	0					
ANR	6367372	Identifier	malloc		6367293	0					
ANR	6367373	ArgumentList	tmp_len + 1		6367293	1					
ANR	6367374	Argument	tmp_len + 1		6367293	0					
ANR	6367375	AdditiveExpression	tmp_len + 1		6367293	0		+			
ANR	6367376	Identifier	tmp_len		6367293	0					
ANR	6367377	PrimaryExpression	1		6367293	1					
ANR	6367378	ExpressionStatement	"r_type_del ( TDB , name )"	82:1:2160:2182	6367293	8	True				
ANR	6367379	CallExpression	"r_type_del ( TDB , name )"		6367293	0					
ANR	6367380	Callee	r_type_del		6367293	0					
ANR	6367381	Identifier	r_type_del		6367293	0					
ANR	6367382	ArgumentList	TDB		6367293	1					
ANR	6367383	Argument	TDB		6367293	0					
ANR	6367384	Identifier	TDB		6367293	0					
ANR	6367385	Argument	name		6367293	1					
ANR	6367386	Identifier	name		6367293	0					
ANR	6367387	IfStatement	if ( tmp )		6367293	9					
ANR	6367388	Condition	tmp	83:5:2189:2191	6367293	0	True				
ANR	6367389	Identifier	tmp		6367293	0					
ANR	6367390	CompoundStatement		15:2:346:387	6367293	1					
ANR	6367391	ExpressionStatement	"snprintf ( tmp , tmp_len + 1 , ""%s.%s."" , type , name )"	84:2:2198:2247	6367293	0	True				
ANR	6367392	CallExpression	"snprintf ( tmp , tmp_len + 1 , ""%s.%s."" , type , name )"		6367293	0					
ANR	6367393	Callee	snprintf		6367293	0					
ANR	6367394	Identifier	snprintf		6367293	0					
ANR	6367395	ArgumentList	tmp		6367293	1					
ANR	6367396	Argument	tmp		6367293	0					
ANR	6367397	Identifier	tmp		6367293	0					
ANR	6367398	Argument	tmp_len + 1		6367293	1					
ANR	6367399	AdditiveExpression	tmp_len + 1		6367293	0		+			
ANR	6367400	Identifier	tmp_len		6367293	0					
ANR	6367401	PrimaryExpression	1		6367293	1					
ANR	6367402	Argument	"""%s.%s."""		6367293	2					
ANR	6367403	PrimaryExpression	"""%s.%s."""		6367293	0					
ANR	6367404	Argument	type		6367293	3					
ANR	6367405	Identifier	type		6367293	0					
ANR	6367406	Argument	name		6367293	4					
ANR	6367407	Identifier	name		6367293	0					
ANR	6367408	IdentifierDeclStatement	"SdbList * l = sdb_foreach_list ( TDB , true ) ;"	85:2:2251:2292	6367293	1	True				
ANR	6367409	IdentifierDecl	"* l = sdb_foreach_list ( TDB , true )"		6367293	0					
ANR	6367410	IdentifierDeclType	SdbList *		6367293	0					
ANR	6367411	Identifier	l		6367293	1					
ANR	6367412	AssignmentExpression	"* l = sdb_foreach_list ( TDB , true )"		6367293	2		=			
ANR	6367413	Identifier	l		6367293	0					
ANR	6367414	CallExpression	"sdb_foreach_list ( TDB , true )"		6367293	1					
ANR	6367415	Callee	sdb_foreach_list		6367293	0					
ANR	6367416	Identifier	sdb_foreach_list		6367293	0					
ANR	6367417	ArgumentList	TDB		6367293	1					
ANR	6367418	Argument	TDB		6367293	0					
ANR	6367419	Identifier	TDB		6367293	0					
ANR	6367420	Argument	true		6367293	1					
ANR	6367421	Identifier	true		6367293	0					
ANR	6367422	Statement	ls_foreach	86:2:2296:2305	6367293	2	True				
ANR	6367423	Statement	(	86:13:2307:2307	6367293	3	True				
ANR	6367424	Statement	l	86:14:2308:2308	6367293	4	True				
ANR	6367425	Statement	","	86:15:2309:2309	6367293	5	True				
ANR	6367426	Statement	iter	86:17:2311:2314	6367293	6	True				
ANR	6367427	Statement	","	86:21:2315:2315	6367293	7	True				
ANR	6367428	Statement	kv	86:23:2317:2318	6367293	8	True				
ANR	6367429	Statement	)	86:25:2319:2319	6367293	9	True				
ANR	6367430	CompoundStatement		16:27:416:416	6367293	10					
ANR	6367431	IfStatement	"if ( ! strncmp ( sdbkv_key ( kv ) , tmp , tmp_len ) )"		6367293	0					
ANR	6367432	Condition	"! strncmp ( sdbkv_key ( kv ) , tmp , tmp_len )"	87:7:2330:2368	6367293	0	True				
ANR	6367433	UnaryOperationExpression	"! strncmp ( sdbkv_key ( kv ) , tmp , tmp_len )"		6367293	0					
ANR	6367434	UnaryOperator	!		6367293	0					
ANR	6367435	CallExpression	"strncmp ( sdbkv_key ( kv ) , tmp , tmp_len )"		6367293	1					
ANR	6367436	Callee	strncmp		6367293	0					
ANR	6367437	Identifier	strncmp		6367293	0					
ANR	6367438	ArgumentList	sdbkv_key ( kv )		6367293	1					
ANR	6367439	Argument	sdbkv_key ( kv )		6367293	0					
ANR	6367440	CallExpression	sdbkv_key ( kv )		6367293	0					
ANR	6367441	Callee	sdbkv_key		6367293	0					
ANR	6367442	Identifier	sdbkv_key		6367293	0					
ANR	6367443	ArgumentList	kv		6367293	1					
ANR	6367444	Argument	kv		6367293	0					
ANR	6367445	Identifier	kv		6367293	0					
ANR	6367446	Argument	tmp		6367293	1					
ANR	6367447	Identifier	tmp		6367293	0					
ANR	6367448	Argument	tmp_len		6367293	2					
ANR	6367449	Identifier	tmp_len		6367293	0					
ANR	6367450	CompoundStatement		17:48:466:466	6367293	1					
ANR	6367451	ExpressionStatement	"r_type_del ( TDB , sdbkv_key ( kv ) )"	88:4:2377:2409	6367293	0	True				
ANR	6367452	CallExpression	"r_type_del ( TDB , sdbkv_key ( kv ) )"		6367293	0					
ANR	6367453	Callee	r_type_del		6367293	0					
ANR	6367454	Identifier	r_type_del		6367293	0					
ANR	6367455	ArgumentList	TDB		6367293	1					
ANR	6367456	Argument	TDB		6367293	0					
ANR	6367457	Identifier	TDB		6367293	0					
ANR	6367458	Argument	sdbkv_key ( kv )		6367293	1					
ANR	6367459	CallExpression	sdbkv_key ( kv )		6367293	0					
ANR	6367460	Callee	sdbkv_key		6367293	0					
ANR	6367461	Identifier	sdbkv_key		6367293	0					
ANR	6367462	ArgumentList	kv		6367293	1					
ANR	6367463	Argument	kv		6367293	0					
ANR	6367464	Identifier	kv		6367293	0					
ANR	6367465	ExpressionStatement	ls_free ( l )	91:2:2422:2433	6367293	11	True				
ANR	6367466	CallExpression	ls_free ( l )		6367293	0					
ANR	6367467	Callee	ls_free		6367293	0					
ANR	6367468	Identifier	ls_free		6367293	0					
ANR	6367469	ArgumentList	l		6367293	1					
ANR	6367470	Argument	l		6367293	0					
ANR	6367471	Identifier	l		6367293	0					
ANR	6367472	ExpressionStatement	free ( tmp )	92:2:2437:2447	6367293	12	True				
ANR	6367473	CallExpression	free ( tmp )		6367293	0					
ANR	6367474	Callee	free		6367293	0					
ANR	6367475	Identifier	free		6367293	0					
ANR	6367476	ArgumentList	tmp		6367293	1					
ANR	6367477	Argument	tmp		6367293	0					
ANR	6367478	Identifier	tmp		6367293	0					
ANR	6367479	ReturnType	R_API void		6367293	1					
ANR	6367480	Identifier	r_anal_remove_parsed_type		6367293	2					
ANR	6367481	ParameterList	"RAnal * anal , const char * name"		6367293	3					
ANR	6367482	Parameter	RAnal * anal	71:37:1873:1883	6367293	0	True				
ANR	6367483	ParameterType	RAnal *		6367293	0					
ANR	6367484	Identifier	anal		6367293	1					
ANR	6367485	Parameter	const char * name	71:50:1886:1901	6367293	1	True				
ANR	6367486	ParameterType	const char *		6367293	0					
ANR	6367487	Identifier	name		6367293	1					
ANR	6367488	CFGEntryNode	ENTRY		6367293		True				
ANR	6367489	CFGExitNode	EXIT		6367293		True				
ANR	6367490	Symbol	malloc		6367293						
ANR	6367491	Symbol	sdbkv_key		6367293						
ANR	6367492	Symbol	tmp_len		6367293						
ANR	6367493	Symbol	iter		6367293						
ANR	6367494	Symbol	sdb_foreach_list		6367293						
ANR	6367495	Symbol	kv		6367293						
ANR	6367496	Symbol	type		6367293						
ANR	6367497	Symbol	l		6367293						
ANR	6367498	Symbol	sdb_const_get		6367293						
ANR	6367499	Symbol	strlen		6367293						
ANR	6367500	Symbol	strncmp		6367293						
ANR	6367501	Symbol	* anal		6367293						
ANR	6367502	Symbol	TDB		6367293						
ANR	6367503	Symbol	anal		6367293						
ANR	6367504	Symbol	tmp		6367293						
ANR	6367505	Symbol	name		6367293						
ANR	6367506	Symbol	true		6367293						
ANR	6367507	Symbol	anal -> sdb_types		6367293						
ANR	6367508	Function	r_anal_save_parsed_type	96:0:2455:3034							
ANR	6367509	FunctionDef	"r_anal_save_parsed_type (RAnal * anal , const char * parsed)"		6367508	0					
ANR	6367510	CompoundStatement		96:68:2523:3034	6367508	0					
ANR	6367511	ExpressionStatement	r_return_if_fail ( anal && parsed )	97:1:2526:2559	6367508	0	True				
ANR	6367512	CallExpression	r_return_if_fail ( anal && parsed )		6367508	0					
ANR	6367513	Callee	r_return_if_fail		6367508	0					
ANR	6367514	Identifier	r_return_if_fail		6367508	0					
ANR	6367515	ArgumentList	anal && parsed		6367508	1					
ANR	6367516	Argument	anal && parsed		6367508	0					
ANR	6367517	AndExpression	anal && parsed		6367508	0		&&			
ANR	6367518	Identifier	anal		6367508	0					
ANR	6367519	Identifier	parsed		6367508	1					
ANR	6367520	IdentifierDeclStatement	char * type = strdup ( parsed ) ;	100:1:2620:2648	6367508	1	True				
ANR	6367521	IdentifierDecl	* type = strdup ( parsed )		6367508	0					
ANR	6367522	IdentifierDeclType	char *		6367508	0					
ANR	6367523	Identifier	type		6367508	1					
ANR	6367524	AssignmentExpression	* type = strdup ( parsed )		6367508	2		=			
ANR	6367525	Identifier	type		6367508	0					
ANR	6367526	CallExpression	strdup ( parsed )		6367508	1					
ANR	6367527	Callee	strdup		6367508	0					
ANR	6367528	Identifier	strdup		6367508	0					
ANR	6367529	ArgumentList	parsed		6367508	1					
ANR	6367530	Argument	parsed		6367508	0					
ANR	6367531	Identifier	parsed		6367508	0					
ANR	6367532	IfStatement	if ( type )		6367508	2					
ANR	6367533	Condition	type	101:5:2655:2658	6367508	0	True				
ANR	6367534	Identifier	type		6367508	0					
ANR	6367535	CompoundStatement		7:2:141:157	6367508	1					
ANR	6367536	IdentifierDeclStatement	char * cur = type ;	102:2:2665:2681	6367508	0	True				
ANR	6367537	IdentifierDecl	* cur = type		6367508	0					
ANR	6367538	IdentifierDeclType	char *		6367508	0					
ANR	6367539	Identifier	cur		6367508	1					
ANR	6367540	AssignmentExpression	* cur = type		6367508	2		=			
ANR	6367541	Identifier	type		6367508	0					
ANR	6367542	Identifier	type		6367508	1					
ANR	6367543	WhileStatement	while ( 1 )		6367508	1					
ANR	6367544	Condition	1	103:9:2692:2692	6367508	0	True				
ANR	6367545	PrimaryExpression	1		6367508	0					
ANR	6367546	CompoundStatement		13:3:231:249	6367508	1					
ANR	6367547	ExpressionStatement	cur = is_type ( cur )	104:3:2700:2719	6367508	0	True				
ANR	6367548	AssignmentExpression	cur = is_type ( cur )		6367508	0		=			
ANR	6367549	Identifier	cur		6367508	0					
ANR	6367550	CallExpression	is_type ( cur )		6367508	1					
ANR	6367551	Callee	is_type		6367508	0					
ANR	6367552	Identifier	is_type		6367508	0					
ANR	6367553	ArgumentList	cur		6367508	1					
ANR	6367554	Argument	cur		6367508	0					
ANR	6367555	Identifier	cur		6367508	0					
ANR	6367556	IfStatement	if ( ! cur )		6367508	1					
ANR	6367557	Condition	! cur	105:7:2728:2731	6367508	0	True				
ANR	6367558	UnaryOperationExpression	! cur		6367508	0					
ANR	6367559	UnaryOperator	!		6367508	0					
ANR	6367560	Identifier	cur		6367508	1					
ANR	6367561	CompoundStatement		10:13:210:210	6367508	1					
ANR	6367562	BreakStatement	break ;	106:4:2740:2745	6367508	0	True				
ANR	6367563	IdentifierDeclStatement	char * name = cur ++ ;	108:3:2755:2773	6367508	2	True				
ANR	6367564	IdentifierDecl	* name = cur ++		6367508	0					
ANR	6367565	IdentifierDeclType	char *		6367508	0					
ANR	6367566	Identifier	name		6367508	1					
ANR	6367567	AssignmentExpression	* name = cur ++		6367508	2		=			
ANR	6367568	Identifier	name		6367508	0					
ANR	6367569	PostIncDecOperationExpression	cur ++		6367508	1					
ANR	6367570	Identifier	cur		6367508	0					
ANR	6367571	IncDec	++		6367508	1					
ANR	6367572	ExpressionStatement	* name = 0	109:3:2778:2787	6367508	3	True				
ANR	6367573	AssignmentExpression	* name = 0		6367508	0		=			
ANR	6367574	UnaryOperationExpression	* name		6367508	0					
ANR	6367575	UnaryOperator	*		6367508	0					
ANR	6367576	Identifier	name		6367508	1					
ANR	6367577	PrimaryExpression	0		6367508	1					
ANR	6367578	WhileStatement	while ( name > type && * ( name - 1 ) != '\\n' )		6367508	4					
ANR	6367579	Condition	name > type && * ( name - 1 ) != '\\n'	110:10:2799:2832	6367508	0	True				
ANR	6367580	AndExpression	name > type && * ( name - 1 ) != '\\n'		6367508	0		&&			
ANR	6367581	RelationalExpression	name > type		6367508	0		>			
ANR	6367582	Identifier	name		6367508	0					
ANR	6367583	Identifier	type		6367508	1					
ANR	6367584	EqualityExpression	* ( name - 1 ) != '\\n'		6367508	1		!=			
ANR	6367585	UnaryOperationExpression	* ( name - 1 )		6367508	0					
ANR	6367586	UnaryOperator	*		6367508	0					
ANR	6367587	AdditiveExpression	name - 1		6367508	1		-			
ANR	6367588	Identifier	name		6367508	0					
ANR	6367589	PrimaryExpression	1		6367508	1					
ANR	6367590	PrimaryExpression	'\\n'		6367508	1					
ANR	6367591	CompoundStatement		15:46:311:311	6367508	1					
ANR	6367592	ExpressionStatement	name --	111:4:2841:2847	6367508	0	True				
ANR	6367593	PostIncDecOperationExpression	name --		6367508	0					
ANR	6367594	Identifier	name		6367508	0					
ANR	6367595	IncDec	--		6367508	1					
ANR	6367596	ExpressionStatement	"r_anal_remove_parsed_type ( anal , name )"	113:3:2857:2895	6367508	5	True				
ANR	6367597	CallExpression	"r_anal_remove_parsed_type ( anal , name )"		6367508	0					
ANR	6367598	Callee	r_anal_remove_parsed_type		6367508	0					
ANR	6367599	Identifier	r_anal_remove_parsed_type		6367508	0					
ANR	6367600	ArgumentList	anal		6367508	1					
ANR	6367601	Argument	anal		6367508	0					
ANR	6367602	Identifier	anal		6367508	0					
ANR	6367603	Argument	name		6367508	1					
ANR	6367604	Identifier	name		6367508	0					
ANR	6367605	ExpressionStatement	free ( type )	115:2:2903:2914	6367508	2	True				
ANR	6367606	CallExpression	free ( type )		6367508	0					
ANR	6367607	Callee	free		6367508	0					
ANR	6367608	Identifier	free		6367508	0					
ANR	6367609	ArgumentList	type		6367508	1					
ANR	6367610	Argument	type		6367508	0					
ANR	6367611	Identifier	type		6367508	0					
ANR	6367612	ExpressionStatement	"sdb_query_lines ( anal -> sdb_types , parsed )"	119:1:2950:2991	6367508	3	True				
ANR	6367613	CallExpression	"sdb_query_lines ( anal -> sdb_types , parsed )"		6367508	0					
ANR	6367614	Callee	sdb_query_lines		6367508	0					
ANR	6367615	Identifier	sdb_query_lines		6367508	0					
ANR	6367616	ArgumentList	anal -> sdb_types		6367508	1					
ANR	6367617	Argument	anal -> sdb_types		6367508	0					
ANR	6367618	PtrMemberAccess	anal -> sdb_types		6367508	0					
ANR	6367619	Identifier	anal		6367508	0					
ANR	6367620	Identifier	sdb_types		6367508	1					
ANR	6367621	Argument	parsed		6367508	1					
ANR	6367622	Identifier	parsed		6367508	0					
ANR	6367623	ExpressionStatement	"__save_parsed_type_size ( anal , parsed )"	120:1:2994:3032	6367508	4	True				
ANR	6367624	CallExpression	"__save_parsed_type_size ( anal , parsed )"		6367508	0					
ANR	6367625	Callee	__save_parsed_type_size		6367508	0					
ANR	6367626	Identifier	__save_parsed_type_size		6367508	0					
ANR	6367627	ArgumentList	anal		6367508	1					
ANR	6367628	Argument	anal		6367508	0					
ANR	6367629	Identifier	anal		6367508	0					
ANR	6367630	Argument	parsed		6367508	1					
ANR	6367631	Identifier	parsed		6367508	0					
ANR	6367632	ReturnType	R_API void		6367508	1					
ANR	6367633	Identifier	r_anal_save_parsed_type		6367508	2					
ANR	6367634	ParameterList	"RAnal * anal , const char * parsed"		6367508	3					
ANR	6367635	Parameter	RAnal * anal	96:35:2490:2500	6367508	0	True				
ANR	6367636	ParameterType	RAnal *		6367508	0					
ANR	6367637	Identifier	anal		6367508	1					
ANR	6367638	Parameter	const char * parsed	96:48:2503:2520	6367508	1	True				
ANR	6367639	ParameterType	const char *		6367508	0					
ANR	6367640	Identifier	parsed		6367508	1					
ANR	6367641	CFGEntryNode	ENTRY		6367508		True				
ANR	6367642	CFGExitNode	EXIT		6367508		True				
ANR	6367643	Symbol	* name		6367508						
ANR	6367644	Symbol	cur		6367508						
ANR	6367645	Symbol	* ( name - 1 )		6367508						
ANR	6367646	Symbol	* anal		6367508						
ANR	6367647	Symbol	is_type		6367508						
ANR	6367648	Symbol	anal		6367508						
ANR	6367649	Symbol	name		6367508						
ANR	6367650	Symbol	parsed		6367508						
ANR	6367651	Symbol	strdup		6367508						
ANR	6367652	Symbol	type		6367508						
ANR	6367653	Symbol	anal -> sdb_types		6367508						
