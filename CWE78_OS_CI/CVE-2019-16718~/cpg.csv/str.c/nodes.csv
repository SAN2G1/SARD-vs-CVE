command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	6241991	File	data/converged/CVE-2019-16718~_radare2/str.c								
ANR	6241992	DeclStmt									
ANR	6241993	Decl							const char	const char *	nullstr
ANR	6241994	DeclStmt									
ANR	6241995	Decl							const char	const char *	nullstr_c
ANR	6241996	DeclStmt									
ANR	6241997	Decl							const char	const char * [ ]	rwxstr
ANR	6241998	Function	r_str_casecmp	36:0:591:733							
ANR	6241999	FunctionDef	"r_str_casecmp (const char * s1 , const char * s2)"		6241998	0					
ANR	6242000	CompoundStatement		36:56:647:733	6241998	0					
ANR	6242001	ReturnStatement	"return stricmp ( s1 , s2 ) ;"	38:1:666:689	6241998	0	True				
ANR	6242002	CallExpression	"stricmp ( s1 , s2 )"		6241998	0					
ANR	6242003	Callee	stricmp		6241998	0					
ANR	6242004	Identifier	stricmp		6241998	0					
ANR	6242005	ArgumentList	s1		6241998	1					
ANR	6242006	Argument	s1		6241998	0					
ANR	6242007	Identifier	s1		6241998	0					
ANR	6242008	Argument	s2		6241998	1					
ANR	6242009	Identifier	s2		6241998	0					
ANR	6242010	ReturnType	R_API int		6241998	1					
ANR	6242011	Identifier	r_str_casecmp		6241998	2					
ANR	6242012	ParameterList	"const char * s1 , const char * s2"		6241998	3					
ANR	6242013	Parameter	const char * s1	36:24:615:628	6241998	0	True				
ANR	6242014	ParameterType	const char *		6241998	0					
ANR	6242015	Identifier	s1		6241998	1					
ANR	6242016	Parameter	const char * s2	36:40:631:644	6241998	1	True				
ANR	6242017	ParameterType	const char *		6241998	0					
ANR	6242018	Identifier	s2		6241998	1					
ANR	6242019	CFGEntryNode	ENTRY		6241998		True				
ANR	6242020	CFGExitNode	EXIT		6241998		True				
ANR	6242021	Symbol	stricmp		6241998						
ANR	6242022	Symbol	s1		6241998						
ANR	6242023	Symbol	s2		6241998						
ANR	6242024	Function	r_str_ncasecmp	44:0:736:898							
ANR	6242025	FunctionDef	"r_str_ncasecmp (const char * s1 , const char * s2 , size_t n)"		6242024	0					
ANR	6242026	CompoundStatement		44:67:803:898	6242024	0					
ANR	6242027	ReturnStatement	"return _strnicmp ( s1 , s2 , n ) ;"	46:1:822:850	6242024	0	True				
ANR	6242028	CallExpression	"_strnicmp ( s1 , s2 , n )"		6242024	0					
ANR	6242029	Callee	_strnicmp		6242024	0					
ANR	6242030	Identifier	_strnicmp		6242024	0					
ANR	6242031	ArgumentList	s1		6242024	1					
ANR	6242032	Argument	s1		6242024	0					
ANR	6242033	Identifier	s1		6242024	0					
ANR	6242034	Argument	s2		6242024	1					
ANR	6242035	Identifier	s2		6242024	0					
ANR	6242036	Argument	n		6242024	2					
ANR	6242037	Identifier	n		6242024	0					
ANR	6242038	ReturnType	R_API int		6242024	1					
ANR	6242039	Identifier	r_str_ncasecmp		6242024	2					
ANR	6242040	ParameterList	"const char * s1 , const char * s2 , size_t n"		6242024	3					
ANR	6242041	Parameter	const char * s1	44:25:761:774	6242024	0	True				
ANR	6242042	ParameterType	const char *		6242024	0					
ANR	6242043	Identifier	s1		6242024	1					
ANR	6242044	Parameter	const char * s2	44:41:777:790	6242024	1	True				
ANR	6242045	ParameterType	const char *		6242024	0					
ANR	6242046	Identifier	s2		6242024	1					
ANR	6242047	Parameter	size_t n	44:57:793:800	6242024	2	True				
ANR	6242048	ParameterType	size_t		6242024	0					
ANR	6242049	Identifier	n		6242024	1					
ANR	6242050	CFGEntryNode	ENTRY		6242024		True				
ANR	6242051	CFGExitNode	EXIT		6242024		True				
ANR	6242052	Symbol	s1		6242024						
ANR	6242053	Symbol	n		6242024						
ANR	6242054	Symbol	s2		6242024						
ANR	6242055	Symbol	_strnicmp		6242024						
ANR	6242056	Function	r_str_replace_ch	54:0:990:1333							
ANR	6242057	FunctionDef	"r_str_replace_ch (char * s , char a , char b , bool global)"		6242056	0					
ANR	6242058	CompoundStatement		54:65:1055:1333	6242056	0					
ANR	6242059	IdentifierDeclStatement	int ret = 0 ;	55:1:1058:1069	6242056	0	True				
ANR	6242060	IdentifierDecl	ret = 0		6242056	0					
ANR	6242061	IdentifierDeclType	int		6242056	0					
ANR	6242062	Identifier	ret		6242056	1					
ANR	6242063	AssignmentExpression	ret = 0		6242056	2		=			
ANR	6242064	Identifier	ret		6242056	0					
ANR	6242065	PrimaryExpression	0		6242056	1					
ANR	6242066	IdentifierDeclStatement	char * o = s ;	56:1:1072:1083	6242056	1	True				
ANR	6242067	IdentifierDecl	* o = s		6242056	0					
ANR	6242068	IdentifierDeclType	char *		6242056	0					
ANR	6242069	Identifier	o		6242056	1					
ANR	6242070	AssignmentExpression	* o = s		6242056	2		=			
ANR	6242071	Identifier	s		6242056	0					
ANR	6242072	Identifier	s		6242056	1					
ANR	6242073	IfStatement	if ( ! s || a == b )		6242056	2					
ANR	6242074	Condition	! s || a == b	57:5:1090:1101	6242056	0	True				
ANR	6242075	OrExpression	! s || a == b		6242056	0		||			
ANR	6242076	UnaryOperationExpression	! s		6242056	0					
ANR	6242077	UnaryOperator	!		6242056	0					
ANR	6242078	Identifier	s		6242056	1					
ANR	6242079	EqualityExpression	a == b		6242056	1		==			
ANR	6242080	Identifier	a		6242056	0					
ANR	6242081	Identifier	b		6242056	1					
ANR	6242082	CompoundStatement		4:19:48:48	6242056	1					
ANR	6242083	ReturnStatement	return 0 ;	58:2:1108:1116	6242056	0	True				
ANR	6242084	PrimaryExpression	0		6242056	0					
ANR	6242085	ForStatement	"for ( ; * o ; s ++ , o ++ )"		6242056	3					
ANR	6242086	Condition	* o	60:8:1129:1130	6242056	0	True				
ANR	6242087	UnaryOperationExpression	* o		6242056	0					
ANR	6242088	UnaryOperator	*		6242056	0					
ANR	6242089	Identifier	o		6242056	1					
ANR	6242090	Expression	"s ++ , o ++"	60:12:1133:1140	6242056	1	True				
ANR	6242091	PostIncDecOperationExpression	s ++		6242056	0					
ANR	6242092	Identifier	s		6242056	0					
ANR	6242093	IncDec	++		6242056	1					
ANR	6242094	PostIncDecOperationExpression	o ++		6242056	1					
ANR	6242095	Identifier	o		6242056	0					
ANR	6242096	IncDec	++		6242056	1					
ANR	6242097	CompoundStatement		7:22:87:87	6242056	2					
ANR	6242098	IfStatement	if ( * o == a )		6242056	0					
ANR	6242099	Condition	* o == a	61:6:1151:1157	6242056	0	True				
ANR	6242100	EqualityExpression	* o == a		6242056	0		==			
ANR	6242101	UnaryOperationExpression	* o		6242056	0					
ANR	6242102	UnaryOperator	*		6242056	0					
ANR	6242103	Identifier	o		6242056	1					
ANR	6242104	Identifier	a		6242056	1					
ANR	6242105	CompoundStatement		8:15:104:104	6242056	1					
ANR	6242106	ExpressionStatement	ret ++	62:3:1165:1170	6242056	0	True				
ANR	6242107	PostIncDecOperationExpression	ret ++		6242056	0					
ANR	6242108	Identifier	ret		6242056	0					
ANR	6242109	IncDec	++		6242056	1					
ANR	6242110	IfStatement	if ( b )		6242056	1					
ANR	6242111	Condition	b	63:7:1179:1179	6242056	0	True				
ANR	6242112	Identifier	b		6242056	0					
ANR	6242113	CompoundStatement		10:10:126:126	6242056	1					
ANR	6242114	ExpressionStatement	* s = b	64:4:1188:1194	6242056	0	True				
ANR	6242115	AssignmentExpression	* s = b		6242056	0		=			
ANR	6242116	UnaryOperationExpression	* s		6242056	0					
ANR	6242117	UnaryOperator	*		6242056	0					
ANR	6242118	Identifier	s		6242056	1					
ANR	6242119	Identifier	b		6242056	1					
ANR	6242120	ElseStatement	else		6242056	0					
ANR	6242121	CompoundStatement		12:10:150:150	6242056	0					
ANR	6242122	ExpressionStatement	s --	67:4:1234:1237	6242056	0	True				
ANR	6242123	PostIncDecOperationExpression	s --		6242056	0					
ANR	6242124	Identifier	s		6242056	0					
ANR	6242125	IncDec	--		6242056	1					
ANR	6242126	IfStatement	if ( ! global )		6242056	2					
ANR	6242127	Condition	! global	69:7:1251:1257	6242056	0	True				
ANR	6242128	UnaryOperationExpression	! global		6242056	0					
ANR	6242129	UnaryOperator	!		6242056	0					
ANR	6242130	Identifier	global		6242056	1					
ANR	6242131	CompoundStatement		16:16:204:204	6242056	1					
ANR	6242132	ReturnStatement	return 1 ;	70:4:1266:1274	6242056	0	True				
ANR	6242133	PrimaryExpression	1		6242056	0					
ANR	6242134	ElseStatement	else		6242056	0					
ANR	6242135	CompoundStatement		19:9:234:234	6242056	0					
ANR	6242136	ExpressionStatement	* s = * o	73:3:1295:1302	6242056	0	True				
ANR	6242137	AssignmentExpression	* s = * o		6242056	0		=			
ANR	6242138	UnaryOperationExpression	* s		6242056	0					
ANR	6242139	UnaryOperator	*		6242056	0					
ANR	6242140	Identifier	s		6242056	1					
ANR	6242141	UnaryOperationExpression	* o		6242056	1					
ANR	6242142	UnaryOperator	*		6242056	0					
ANR	6242143	Identifier	o		6242056	1					
ANR	6242144	ExpressionStatement	* s = 0	76:1:1312:1318	6242056	4	True				
ANR	6242145	AssignmentExpression	* s = 0		6242056	0		=			
ANR	6242146	UnaryOperationExpression	* s		6242056	0					
ANR	6242147	UnaryOperator	*		6242056	0					
ANR	6242148	Identifier	s		6242056	1					
ANR	6242149	PrimaryExpression	0		6242056	1					
ANR	6242150	ReturnStatement	return ret ;	77:1:1321:1331	6242056	5	True				
ANR	6242151	Identifier	ret		6242056	0					
ANR	6242152	ReturnType	R_API int		6242056	1					
ANR	6242153	Identifier	r_str_replace_ch		6242056	2					
ANR	6242154	ParameterList	"char * s , char a , char b , bool global"		6242056	3					
ANR	6242155	Parameter	char * s	54:27:1017:1023	6242056	0	True				
ANR	6242156	ParameterType	char *		6242056	0					
ANR	6242157	Identifier	s		6242056	1					
ANR	6242158	Parameter	char a	54:36:1026:1031	6242056	1	True				
ANR	6242159	ParameterType	char		6242056	0					
ANR	6242160	Identifier	a		6242056	1					
ANR	6242161	Parameter	char b	54:44:1034:1039	6242056	2	True				
ANR	6242162	ParameterType	char		6242056	0					
ANR	6242163	Identifier	b		6242056	1					
ANR	6242164	Parameter	bool global	54:52:1042:1052	6242056	3	True				
ANR	6242165	ParameterType	bool		6242056	0					
ANR	6242166	Identifier	global		6242056	1					
ANR	6242167	CFGEntryNode	ENTRY		6242056		True				
ANR	6242168	CFGExitNode	EXIT		6242056		True				
ANR	6242169	Symbol	ret		6242056						
ANR	6242170	Symbol	a		6242056						
ANR	6242171	Symbol	b		6242056						
ANR	6242172	Symbol	s		6242056						
ANR	6242173	Symbol	* o		6242056						
ANR	6242174	Symbol	global		6242056						
ANR	6242175	Symbol	* s		6242056						
ANR	6242176	Symbol	o		6242056						
ANR	6242177	Function	r_str_replace_char_once	81:0:1350:1603							
ANR	6242178	FunctionDef	"r_str_replace_char_once (char * s , int a , int b)"		6242177	0					
ANR	6242179	CompoundStatement		81:57:1407:1603	6242177	0					
ANR	6242180	IdentifierDeclStatement	int ret = 0 ;	82:1:1410:1421	6242177	0	True				
ANR	6242181	IdentifierDecl	ret = 0		6242177	0					
ANR	6242182	IdentifierDeclType	int		6242177	0					
ANR	6242183	Identifier	ret		6242177	1					
ANR	6242184	AssignmentExpression	ret = 0		6242177	2		=			
ANR	6242185	Identifier	ret		6242177	0					
ANR	6242186	PrimaryExpression	0		6242177	1					
ANR	6242187	IdentifierDeclStatement	char * o = s ;	83:1:1424:1435	6242177	1	True				
ANR	6242188	IdentifierDecl	* o = s		6242177	0					
ANR	6242189	IdentifierDeclType	char *		6242177	0					
ANR	6242190	Identifier	o		6242177	1					
ANR	6242191	AssignmentExpression	* o = s		6242177	2		=			
ANR	6242192	Identifier	s		6242177	0					
ANR	6242193	Identifier	s		6242177	1					
ANR	6242194	IfStatement	if ( a == b )		6242177	2					
ANR	6242195	Condition	a == b	84:5:1442:1447	6242177	0	True				
ANR	6242196	EqualityExpression	a == b		6242177	0		==			
ANR	6242197	Identifier	a		6242177	0					
ANR	6242198	Identifier	b		6242177	1					
ANR	6242199	CompoundStatement		4:13:42:42	6242177	1					
ANR	6242200	ReturnStatement	return 0 ;	85:2:1454:1462	6242177	0	True				
ANR	6242201	PrimaryExpression	0		6242177	0					
ANR	6242202	ForStatement	"for ( ; * o ; s ++ , o ++ )"		6242177	3					
ANR	6242203	Condition	* o	87:8:1475:1476	6242177	0	True				
ANR	6242204	UnaryOperationExpression	* o		6242177	0					
ANR	6242205	UnaryOperator	*		6242177	0					
ANR	6242206	Identifier	o		6242177	1					
ANR	6242207	Expression	"s ++ , o ++"	87:12:1479:1486	6242177	1	True				
ANR	6242208	PostIncDecOperationExpression	s ++		6242177	0					
ANR	6242209	Identifier	s		6242177	0					
ANR	6242210	IncDec	++		6242177	1					
ANR	6242211	PostIncDecOperationExpression	o ++		6242177	1					
ANR	6242212	Identifier	o		6242177	0					
ANR	6242213	IncDec	++		6242177	1					
ANR	6242214	CompoundStatement		7:22:81:81	6242177	2					
ANR	6242215	IfStatement	if ( * o == a )		6242177	0					
ANR	6242216	Condition	* o == a	88:6:1497:1503	6242177	0	True				
ANR	6242217	EqualityExpression	* o == a		6242177	0		==			
ANR	6242218	UnaryOperationExpression	* o		6242177	0					
ANR	6242219	UnaryOperator	*		6242177	0					
ANR	6242220	Identifier	o		6242177	1					
ANR	6242221	Identifier	a		6242177	1					
ANR	6242222	CompoundStatement		8:15:98:98	6242177	1					
ANR	6242223	IfStatement	if ( b )		6242177	0					
ANR	6242224	Condition	b	89:7:1515:1515	6242177	0	True				
ANR	6242225	Identifier	b		6242177	0					
ANR	6242226	CompoundStatement		9:10:110:110	6242177	1					
ANR	6242227	ExpressionStatement	* s = b	90:4:1524:1530	6242177	0	True				
ANR	6242228	AssignmentExpression	* s = b		6242177	0		=			
ANR	6242229	UnaryOperationExpression	* s		6242177	0					
ANR	6242230	UnaryOperator	*		6242177	0					
ANR	6242231	Identifier	s		6242177	1					
ANR	6242232	Identifier	b		6242177	1					
ANR	6242233	ReturnStatement	return ++ ret ;	91:4:1536:1548	6242177	1	True				
ANR	6242234	UnaryExpression	++ ret		6242177	0					
ANR	6242235	IncDec	++		6242177	0					
ANR	6242236	Identifier	ret		6242177	1					
ANR	6242237	ExpressionStatement	o ++	93:3:1558:1561	6242177	1	True				
ANR	6242238	PostIncDecOperationExpression	o ++		6242177	0					
ANR	6242239	Identifier	o		6242177	0					
ANR	6242240	IncDec	++		6242177	1					
ANR	6242241	ExpressionStatement	* s = * o	95:2:1569:1576	6242177	1	True				
ANR	6242242	AssignmentExpression	* s = * o		6242177	0		=			
ANR	6242243	UnaryOperationExpression	* s		6242177	0					
ANR	6242244	UnaryOperator	*		6242177	0					
ANR	6242245	Identifier	s		6242177	1					
ANR	6242246	UnaryOperationExpression	* o		6242177	1					
ANR	6242247	UnaryOperator	*		6242177	0					
ANR	6242248	Identifier	o		6242177	1					
ANR	6242249	ExpressionStatement	* s = 0	97:1:1582:1588	6242177	4	True				
ANR	6242250	AssignmentExpression	* s = 0		6242177	0		=			
ANR	6242251	UnaryOperationExpression	* s		6242177	0					
ANR	6242252	UnaryOperator	*		6242177	0					
ANR	6242253	Identifier	s		6242177	1					
ANR	6242254	PrimaryExpression	0		6242177	1					
ANR	6242255	ReturnStatement	return ret ;	98:1:1591:1601	6242177	5	True				
ANR	6242256	Identifier	ret		6242177	0					
ANR	6242257	ReturnType	R_API int		6242177	1					
ANR	6242258	Identifier	r_str_replace_char_once		6242177	2					
ANR	6242259	ParameterList	"char * s , int a , int b"		6242177	3					
ANR	6242260	Parameter	char * s	81:34:1384:1390	6242177	0	True				
ANR	6242261	ParameterType	char *		6242177	0					
ANR	6242262	Identifier	s		6242177	1					
ANR	6242263	Parameter	int a	81:43:1393:1397	6242177	1	True				
ANR	6242264	ParameterType	int		6242177	0					
ANR	6242265	Identifier	a		6242177	1					
ANR	6242266	Parameter	int b	81:50:1400:1404	6242177	2	True				
ANR	6242267	ParameterType	int		6242177	0					
ANR	6242268	Identifier	b		6242177	1					
ANR	6242269	CFGEntryNode	ENTRY		6242177		True				
ANR	6242270	CFGExitNode	EXIT		6242177		True				
ANR	6242271	Symbol	ret		6242177						
ANR	6242272	Symbol	a		6242177						
ANR	6242273	Symbol	b		6242177						
ANR	6242274	Symbol	s		6242177						
ANR	6242275	Symbol	* o		6242177						
ANR	6242276	Symbol	* s		6242177						
ANR	6242277	Symbol	o		6242177						
ANR	6242278	Function	r_str_replace_char	102:0:1620:1913							
ANR	6242279	FunctionDef	"r_str_replace_char (char * s , int a , int b)"		6242278	0					
ANR	6242280	CompoundStatement		102:52:1672:1913	6242278	0					
ANR	6242281	IdentifierDeclStatement	int ret = 0 ;	103:1:1675:1686	6242278	0	True				
ANR	6242282	IdentifierDecl	ret = 0		6242278	0					
ANR	6242283	IdentifierDeclType	int		6242278	0					
ANR	6242284	Identifier	ret		6242278	1					
ANR	6242285	AssignmentExpression	ret = 0		6242278	2		=			
ANR	6242286	Identifier	ret		6242278	0					
ANR	6242287	PrimaryExpression	0		6242278	1					
ANR	6242288	IdentifierDeclStatement	char * o = s ;	104:1:1689:1700	6242278	1	True				
ANR	6242289	IdentifierDecl	* o = s		6242278	0					
ANR	6242290	IdentifierDeclType	char *		6242278	0					
ANR	6242291	Identifier	o		6242278	1					
ANR	6242292	AssignmentExpression	* o = s		6242278	2		=			
ANR	6242293	Identifier	s		6242278	0					
ANR	6242294	Identifier	s		6242278	1					
ANR	6242295	IfStatement	if ( ! s || a == b )		6242278	2					
ANR	6242296	Condition	! s || a == b	105:5:1707:1718	6242278	0	True				
ANR	6242297	OrExpression	! s || a == b		6242278	0		||			
ANR	6242298	UnaryOperationExpression	! s		6242278	0					
ANR	6242299	UnaryOperator	!		6242278	0					
ANR	6242300	Identifier	s		6242278	1					
ANR	6242301	EqualityExpression	a == b		6242278	1		==			
ANR	6242302	Identifier	a		6242278	0					
ANR	6242303	Identifier	b		6242278	1					
ANR	6242304	CompoundStatement		4:19:48:48	6242278	1					
ANR	6242305	ReturnStatement	return 0 ;	106:2:1725:1733	6242278	0	True				
ANR	6242306	PrimaryExpression	0		6242278	0					
ANR	6242307	ForStatement	"for ( ; * o ; s ++ , o ++ )"		6242278	3					
ANR	6242308	Condition	* o	108:8:1746:1747	6242278	0	True				
ANR	6242309	UnaryOperationExpression	* o		6242278	0					
ANR	6242310	UnaryOperator	*		6242278	0					
ANR	6242311	Identifier	o		6242278	1					
ANR	6242312	Expression	"s ++ , o ++"	108:12:1750:1757	6242278	1	True				
ANR	6242313	PostIncDecOperationExpression	s ++		6242278	0					
ANR	6242314	Identifier	s		6242278	0					
ANR	6242315	IncDec	++		6242278	1					
ANR	6242316	PostIncDecOperationExpression	o ++		6242278	1					
ANR	6242317	Identifier	o		6242278	0					
ANR	6242318	IncDec	++		6242278	1					
ANR	6242319	CompoundStatement		7:22:87:87	6242278	2					
ANR	6242320	IfStatement	if ( * o == a )		6242278	0					
ANR	6242321	Condition	* o == a	109:6:1768:1774	6242278	0	True				
ANR	6242322	EqualityExpression	* o == a		6242278	0		==			
ANR	6242323	UnaryOperationExpression	* o		6242278	0					
ANR	6242324	UnaryOperator	*		6242278	0					
ANR	6242325	Identifier	o		6242278	1					
ANR	6242326	Identifier	a		6242278	1					
ANR	6242327	CompoundStatement		8:15:104:104	6242278	1					
ANR	6242328	ExpressionStatement	ret ++	110:3:1782:1787	6242278	0	True				
ANR	6242329	PostIncDecOperationExpression	ret ++		6242278	0					
ANR	6242330	Identifier	ret		6242278	0					
ANR	6242331	IncDec	++		6242278	1					
ANR	6242332	IfStatement	if ( b )		6242278	1					
ANR	6242333	Condition	b	111:7:1796:1796	6242278	0	True				
ANR	6242334	Identifier	b		6242278	0					
ANR	6242335	CompoundStatement		10:10:126:126	6242278	1					
ANR	6242336	ExpressionStatement	* s = b	112:4:1805:1811	6242278	0	True				
ANR	6242337	AssignmentExpression	* s = b		6242278	0		=			
ANR	6242338	UnaryOperationExpression	* s		6242278	0					
ANR	6242339	UnaryOperator	*		6242278	0					
ANR	6242340	Identifier	s		6242278	1					
ANR	6242341	Identifier	b		6242278	1					
ANR	6242342	ElseStatement	else		6242278	0					
ANR	6242343	CompoundStatement		12:10:150:150	6242278	0					
ANR	6242344	ExpressionStatement	s --	115:4:1851:1854	6242278	0	True				
ANR	6242345	PostIncDecOperationExpression	s --		6242278	0					
ANR	6242346	Identifier	s		6242278	0					
ANR	6242347	IncDec	--		6242278	1					
ANR	6242348	ElseStatement	else		6242278	0					
ANR	6242349	CompoundStatement		16:9:197:197	6242278	0					
ANR	6242350	ExpressionStatement	* s = * o	118:3:1875:1882	6242278	0	True				
ANR	6242351	AssignmentExpression	* s = * o		6242278	0		=			
ANR	6242352	UnaryOperationExpression	* s		6242278	0					
ANR	6242353	UnaryOperator	*		6242278	0					
ANR	6242354	Identifier	s		6242278	1					
ANR	6242355	UnaryOperationExpression	* o		6242278	1					
ANR	6242356	UnaryOperator	*		6242278	0					
ANR	6242357	Identifier	o		6242278	1					
ANR	6242358	ExpressionStatement	* s = 0	121:1:1892:1898	6242278	4	True				
ANR	6242359	AssignmentExpression	* s = 0		6242278	0		=			
ANR	6242360	UnaryOperationExpression	* s		6242278	0					
ANR	6242361	UnaryOperator	*		6242278	0					
ANR	6242362	Identifier	s		6242278	1					
ANR	6242363	PrimaryExpression	0		6242278	1					
ANR	6242364	ReturnStatement	return ret ;	122:1:1901:1911	6242278	5	True				
ANR	6242365	Identifier	ret		6242278	0					
ANR	6242366	ReturnType	R_API int		6242278	1					
ANR	6242367	Identifier	r_str_replace_char		6242278	2					
ANR	6242368	ParameterList	"char * s , int a , int b"		6242278	3					
ANR	6242369	Parameter	char * s	102:29:1649:1655	6242278	0	True				
ANR	6242370	ParameterType	char *		6242278	0					
ANR	6242371	Identifier	s		6242278	1					
ANR	6242372	Parameter	int a	102:38:1658:1662	6242278	1	True				
ANR	6242373	ParameterType	int		6242278	0					
ANR	6242374	Identifier	a		6242278	1					
ANR	6242375	Parameter	int b	102:45:1665:1669	6242278	2	True				
ANR	6242376	ParameterType	int		6242278	0					
ANR	6242377	Identifier	b		6242278	1					
ANR	6242378	CFGEntryNode	ENTRY		6242278		True				
ANR	6242379	CFGExitNode	EXIT		6242278		True				
ANR	6242380	Symbol	ret		6242278						
ANR	6242381	Symbol	a		6242278						
ANR	6242382	Symbol	b		6242278						
ANR	6242383	Symbol	s		6242278						
ANR	6242384	Symbol	* o		6242278						
ANR	6242385	Symbol	* s		6242278						
ANR	6242386	Symbol	o		6242278						
ANR	6242387	Function	r_str_reverse	125:0:1916:2110							
ANR	6242388	FunctionDef	r_str_reverse (char * str)		6242387	0					
ANR	6242389	CompoundStatement		125:36:1952:2110	6242387	0					
ANR	6242390	IdentifierDeclStatement	"int i , len = strlen ( str ) ;"	126:1:1955:1980	6242387	0	True				
ANR	6242391	IdentifierDecl	i		6242387	0					
ANR	6242392	IdentifierDeclType	int		6242387	0					
ANR	6242393	Identifier	i		6242387	1					
ANR	6242394	IdentifierDecl	len = strlen ( str )		6242387	1					
ANR	6242395	IdentifierDeclType	int		6242387	0					
ANR	6242396	Identifier	len		6242387	1					
ANR	6242397	AssignmentExpression	len = strlen ( str )		6242387	2		=			
ANR	6242398	Identifier	len		6242387	0					
ANR	6242399	CallExpression	strlen ( str )		6242387	1					
ANR	6242400	Callee	strlen		6242387	0					
ANR	6242401	Identifier	strlen		6242387	0					
ANR	6242402	ArgumentList	str		6242387	1					
ANR	6242403	Argument	str		6242387	0					
ANR	6242404	Identifier	str		6242387	0					
ANR	6242405	IdentifierDeclStatement	int half = len / 2 ;	127:1:1983:2001	6242387	1	True				
ANR	6242406	IdentifierDecl	half = len / 2		6242387	0					
ANR	6242407	IdentifierDeclType	int		6242387	0					
ANR	6242408	Identifier	half		6242387	1					
ANR	6242409	AssignmentExpression	half = len / 2		6242387	2		=			
ANR	6242410	Identifier	half		6242387	0					
ANR	6242411	MultiplicativeExpression	len / 2		6242387	1		/			
ANR	6242412	Identifier	len		6242387	0					
ANR	6242413	PrimaryExpression	2		6242387	1					
ANR	6242414	ForStatement	for ( i = 0 ; i < half ; i ++ )		6242387	2					
ANR	6242415	ForInit	i = 0 ;	128:6:2009:2014	6242387	0	True				
ANR	6242416	AssignmentExpression	i = 0		6242387	0		=			
ANR	6242417	Identifier	i		6242387	0					
ANR	6242418	PrimaryExpression	0		6242387	1					
ANR	6242419	Condition	i < half	128:13:2016:2023	6242387	1	True				
ANR	6242420	RelationalExpression	i < half		6242387	0		<			
ANR	6242421	Identifier	i		6242387	0					
ANR	6242422	Identifier	half		6242387	1					
ANR	6242423	PostIncDecOperationExpression	i ++	128:23:2026:2028	6242387	2	True				
ANR	6242424	Identifier	i		6242387	0					
ANR	6242425	IncDec	++		6242387	1					
ANR	6242426	CompoundStatement		5:2:82:98	6242387	3					
ANR	6242427	IdentifierDeclStatement	char ch = str [ i ] ;	129:2:2035:2051	6242387	0	True				
ANR	6242428	IdentifierDecl	ch = str [ i ]		6242387	0					
ANR	6242429	IdentifierDeclType	char		6242387	0					
ANR	6242430	Identifier	ch		6242387	1					
ANR	6242431	AssignmentExpression	ch = str [ i ]		6242387	2		=			
ANR	6242432	Identifier	ch		6242387	0					
ANR	6242433	ArrayIndexing	str [ i ]		6242387	1					
ANR	6242434	Identifier	str		6242387	0					
ANR	6242435	Identifier	i		6242387	1					
ANR	6242436	ExpressionStatement	str [ i ] = str [ len - i - 1 ]	130:2:2055:2080	6242387	1	True				
ANR	6242437	AssignmentExpression	str [ i ] = str [ len - i - 1 ]		6242387	0		=			
ANR	6242438	ArrayIndexing	str [ i ]		6242387	0					
ANR	6242439	Identifier	str		6242387	0					
ANR	6242440	Identifier	i		6242387	1					
ANR	6242441	ArrayIndexing	str [ len - i - 1 ]		6242387	1					
ANR	6242442	Identifier	str		6242387	0					
ANR	6242443	AdditiveExpression	len - i - 1		6242387	1		-			
ANR	6242444	Identifier	len		6242387	0					
ANR	6242445	AdditiveExpression	i - 1		6242387	1		-			
ANR	6242446	Identifier	i		6242387	0					
ANR	6242447	PrimaryExpression	1		6242387	1					
ANR	6242448	ExpressionStatement	str [ len - i - 1 ] = ch	131:2:2084:2105	6242387	2	True				
ANR	6242449	AssignmentExpression	str [ len - i - 1 ] = ch		6242387	0		=			
ANR	6242450	ArrayIndexing	str [ len - i - 1 ]		6242387	0					
ANR	6242451	Identifier	str		6242387	0					
ANR	6242452	AdditiveExpression	len - i - 1		6242387	1		-			
ANR	6242453	Identifier	len		6242387	0					
ANR	6242454	AdditiveExpression	i - 1		6242387	1		-			
ANR	6242455	Identifier	i		6242387	0					
ANR	6242456	PrimaryExpression	1		6242387	1					
ANR	6242457	Identifier	ch		6242387	1					
ANR	6242458	ReturnType	R_API void		6242387	1					
ANR	6242459	Identifier	r_str_reverse		6242387	2					
ANR	6242460	ParameterList	char * str		6242387	3					
ANR	6242461	Parameter	char * str	125:25:1941:1949	6242387	0	True				
ANR	6242462	ParameterType	char *		6242387	0					
ANR	6242463	Identifier	str		6242387	1					
ANR	6242464	CFGEntryNode	ENTRY		6242387		True				
ANR	6242465	CFGExitNode	EXIT		6242387		True				
ANR	6242466	Symbol	str		6242387						
ANR	6242467	Symbol	strlen		6242387						
ANR	6242468	Symbol	half		6242387						
ANR	6242469	Symbol	* i		6242387						
ANR	6242470	Symbol	len		6242387						
ANR	6242471	Symbol	ch		6242387						
ANR	6242472	Symbol	i		6242387						
ANR	6242473	Symbol	* str		6242387						
ANR	6242474	Symbol	* len		6242387						
ANR	6242475	Function	r_str_bits	137:0:2253:2726							
ANR	6242476	FunctionDef	"r_str_bits (char * strout , const ut8 * buf , int len , const char * bitz)"		6242475	0					
ANR	6242477	CompoundStatement		137:78:2331:2726	6242475	0					
ANR	6242478	IdentifierDeclStatement	"int i , j , idx ;"	138:1:2334:2347	6242475	0	True				
ANR	6242479	IdentifierDecl	i		6242475	0					
ANR	6242480	IdentifierDeclType	int		6242475	0					
ANR	6242481	Identifier	i		6242475	1					
ANR	6242482	IdentifierDecl	j		6242475	1					
ANR	6242483	IdentifierDeclType	int		6242475	0					
ANR	6242484	Identifier	j		6242475	1					
ANR	6242485	IdentifierDecl	idx		6242475	2					
ANR	6242486	IdentifierDeclType	int		6242475	0					
ANR	6242487	Identifier	idx		6242475	1					
ANR	6242488	IfStatement	if ( bitz )		6242475	1					
ANR	6242489	Condition	bitz	139:5:2354:2357	6242475	0	True				
ANR	6242490	Identifier	bitz		6242475	0					
ANR	6242491	CompoundStatement		3:11:28:28	6242475	1					
ANR	6242492	ForStatement	for ( i = j = 0 ; i < len && ( ! bitz || bitz [ i ] ) ; i ++ )		6242475	0					
ANR	6242493	ForInit	i = j = 0 ;	140:7:2369:2378	6242475	0	True				
ANR	6242494	AssignmentExpression	i = j = 0		6242475	0		=			
ANR	6242495	Identifier	i		6242475	0					
ANR	6242496	AssignmentExpression	j = 0		6242475	1		=			
ANR	6242497	Identifier	j		6242475	0					
ANR	6242498	PrimaryExpression	0		6242475	1					
ANR	6242499	Condition	i < len && ( ! bitz || bitz [ i ] )	140:18:2380:2404	6242475	1	True				
ANR	6242500	AndExpression	i < len && ( ! bitz || bitz [ i ] )		6242475	0		&&			
ANR	6242501	RelationalExpression	i < len		6242475	0		<			
ANR	6242502	Identifier	i		6242475	0					
ANR	6242503	Identifier	len		6242475	1					
ANR	6242504	OrExpression	! bitz || bitz [ i ]		6242475	1		||			
ANR	6242505	UnaryOperationExpression	! bitz		6242475	0					
ANR	6242506	UnaryOperator	!		6242475	0					
ANR	6242507	Identifier	bitz		6242475	1					
ANR	6242508	ArrayIndexing	bitz [ i ]		6242475	1					
ANR	6242509	Identifier	bitz		6242475	0					
ANR	6242510	Identifier	i		6242475	1					
ANR	6242511	PostIncDecOperationExpression	i ++	140:45:2407:2409	6242475	2	True				
ANR	6242512	Identifier	i		6242475	0					
ANR	6242513	IncDec	++		6242475	1					
ANR	6242514	CompoundStatement		4:50:80:80	6242475	3					
ANR	6242515	IfStatement	if ( i > 0 && ( i % 8 ) == 0 )		6242475	0					
ANR	6242516	Condition	i > 0 && ( i % 8 ) == 0	141:7:2421:2441	6242475	0	True				
ANR	6242517	AndExpression	i > 0 && ( i % 8 ) == 0		6242475	0		&&			
ANR	6242518	RelationalExpression	i > 0		6242475	0		>			
ANR	6242519	Identifier	i		6242475	0					
ANR	6242520	PrimaryExpression	0		6242475	1					
ANR	6242521	EqualityExpression	( i % 8 ) == 0		6242475	1		==			
ANR	6242522	MultiplicativeExpression	i % 8		6242475	0		%			
ANR	6242523	Identifier	i		6242475	0					
ANR	6242524	PrimaryExpression	8		6242475	1					
ANR	6242525	PrimaryExpression	0		6242475	1					
ANR	6242526	CompoundStatement		5:30:112:112	6242475	1					
ANR	6242527	ExpressionStatement	buf ++	142:4:2450:2455	6242475	0	True				
ANR	6242528	PostIncDecOperationExpression	buf ++		6242475	0					
ANR	6242529	Identifier	buf		6242475	0					
ANR	6242530	IncDec	++		6242475	1					
ANR	6242531	IfStatement	if ( * buf & ( 1 << ( i % 8 ) ) )		6242475	1					
ANR	6242532	Condition	* buf & ( 1 << ( i % 8 ) )	144:7:2469:2489	6242475	0	True				
ANR	6242533	BitAndExpression	* buf & ( 1 << ( i % 8 ) )		6242475	0		&			
ANR	6242534	UnaryOperationExpression	* buf		6242475	0					
ANR	6242535	UnaryOperator	*		6242475	0					
ANR	6242536	Identifier	buf		6242475	1					
ANR	6242537	ShiftExpression	1 << ( i % 8 )		6242475	1		<<			
ANR	6242538	PrimaryExpression	1		6242475	0					
ANR	6242539	MultiplicativeExpression	i % 8		6242475	1		%			
ANR	6242540	Identifier	i		6242475	0					
ANR	6242541	PrimaryExpression	8		6242475	1					
ANR	6242542	CompoundStatement		8:30:160:160	6242475	1					
ANR	6242543	ExpressionStatement	strout [ j ++ ] = toupper ( ( const ut8 ) bitz [ i ] )	145:4:2498:2540	6242475	0	True				
ANR	6242544	AssignmentExpression	strout [ j ++ ] = toupper ( ( const ut8 ) bitz [ i ] )		6242475	0		=			
ANR	6242545	ArrayIndexing	strout [ j ++ ]		6242475	0					
ANR	6242546	Identifier	strout		6242475	0					
ANR	6242547	PostIncDecOperationExpression	j ++		6242475	1					
ANR	6242548	Identifier	j		6242475	0					
ANR	6242549	IncDec	++		6242475	1					
ANR	6242550	CallExpression	toupper ( ( const ut8 ) bitz [ i ] )		6242475	1					
ANR	6242551	Callee	toupper		6242475	0					
ANR	6242552	Identifier	toupper		6242475	0					
ANR	6242553	ArgumentList	( const ut8 ) bitz [ i ]		6242475	1					
ANR	6242554	Argument	( const ut8 ) bitz [ i ]		6242475	0					
ANR	6242555	CastExpression	( const ut8 ) bitz [ i ]		6242475	0					
ANR	6242556	CastTarget	const ut8		6242475	0					
ANR	6242557	ArrayIndexing	bitz [ i ]		6242475	1					
ANR	6242558	Identifier	bitz		6242475	0					
ANR	6242559	Identifier	i		6242475	1					
ANR	6242560	ElseStatement	else		6242475	0					
ANR	6242561	CompoundStatement		12:8:227:227	6242475	0					
ANR	6242562	ForStatement	for ( i = j = 0 ; i < len ; i ++ )		6242475	0					
ANR	6242563	ForInit	i = j = 0 ;	149:7:2568:2577	6242475	0	True				
ANR	6242564	AssignmentExpression	i = j = 0		6242475	0		=			
ANR	6242565	Identifier	i		6242475	0					
ANR	6242566	AssignmentExpression	j = 0		6242475	1		=			
ANR	6242567	Identifier	j		6242475	0					
ANR	6242568	PrimaryExpression	0		6242475	1					
ANR	6242569	Condition	i < len	149:18:2579:2585	6242475	1	True				
ANR	6242570	RelationalExpression	i < len		6242475	0		<			
ANR	6242571	Identifier	i		6242475	0					
ANR	6242572	Identifier	len		6242475	1					
ANR	6242573	PostIncDecOperationExpression	i ++	149:27:2588:2590	6242475	2	True				
ANR	6242574	Identifier	i		6242475	0					
ANR	6242575	IncDec	++		6242475	1					
ANR	6242576	CompoundStatement		15:3:284:305	6242475	3					
ANR	6242577	ExpressionStatement	idx = ( i / 8 )	150:3:2598:2611	6242475	0	True				
ANR	6242578	AssignmentExpression	idx = ( i / 8 )		6242475	0		=			
ANR	6242579	Identifier	idx		6242475	0					
ANR	6242580	MultiplicativeExpression	i / 8		6242475	1		/			
ANR	6242581	Identifier	i		6242475	0					
ANR	6242582	PrimaryExpression	8		6242475	1					
ANR	6242583	IdentifierDeclStatement	int bit = 7 - ( i % 8 ) ;	151:3:2616:2637	6242475	1	True				
ANR	6242584	IdentifierDecl	bit = 7 - ( i % 8 )		6242475	0					
ANR	6242585	IdentifierDeclType	int		6242475	0					
ANR	6242586	Identifier	bit		6242475	1					
ANR	6242587	AssignmentExpression	bit = 7 - ( i % 8 )		6242475	2		=			
ANR	6242588	Identifier	bit		6242475	0					
ANR	6242589	AdditiveExpression	7 - ( i % 8 )		6242475	1		-			
ANR	6242590	PrimaryExpression	7		6242475	0					
ANR	6242591	MultiplicativeExpression	i % 8		6242475	1		%			
ANR	6242592	Identifier	i		6242475	0					
ANR	6242593	PrimaryExpression	8		6242475	1					
ANR	6242594	ExpressionStatement	strout [ j ++ ] = ( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'	152:3:2642:2690	6242475	2	True				
ANR	6242595	AssignmentExpression	strout [ j ++ ] = ( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'		6242475	0		=			
ANR	6242596	ArrayIndexing	strout [ j ++ ]		6242475	0					
ANR	6242597	Identifier	strout		6242475	0					
ANR	6242598	PostIncDecOperationExpression	j ++		6242475	1					
ANR	6242599	Identifier	j		6242475	0					
ANR	6242600	IncDec	++		6242475	1					
ANR	6242601	ConditionalExpression	( buf [ idx ] & ( 1 << bit ) ) ? '1' : '0'		6242475	1					
ANR	6242602	Condition	buf [ idx ] & ( 1 << bit )		6242475	0					
ANR	6242603	BitAndExpression	buf [ idx ] & ( 1 << bit )		6242475	0		&			
ANR	6242604	ArrayIndexing	buf [ idx ]		6242475	0					
ANR	6242605	Identifier	buf		6242475	0					
ANR	6242606	Identifier	idx		6242475	1					
ANR	6242607	ShiftExpression	1 << bit		6242475	1		<<			
ANR	6242608	PrimaryExpression	1		6242475	0					
ANR	6242609	Identifier	bit		6242475	1					
ANR	6242610	PrimaryExpression	'1'		6242475	1					
ANR	6242611	PrimaryExpression	'0'		6242475	2					
ANR	6242612	ExpressionStatement	strout [ j ] = 0	155:1:2700:2713	6242475	2	True				
ANR	6242613	AssignmentExpression	strout [ j ] = 0		6242475	0		=			
ANR	6242614	ArrayIndexing	strout [ j ]		6242475	0					
ANR	6242615	Identifier	strout		6242475	0					
ANR	6242616	Identifier	j		6242475	1					
ANR	6242617	PrimaryExpression	0		6242475	1					
ANR	6242618	ReturnStatement	return j ;	156:1:2716:2724	6242475	3	True				
ANR	6242619	Identifier	j		6242475	0					
ANR	6242620	ReturnType	R_API int		6242475	1					
ANR	6242621	Identifier	r_str_bits		6242475	2					
ANR	6242622	ParameterList	"char * strout , const ut8 * buf , int len , const char * bitz"		6242475	3					
ANR	6242623	Parameter	char * strout	137:21:2274:2285	6242475	0	True				
ANR	6242624	ParameterType	char *		6242475	0					
ANR	6242625	Identifier	strout		6242475	1					
ANR	6242626	Parameter	const ut8 * buf	137:35:2288:2301	6242475	1	True				
ANR	6242627	ParameterType	const ut8 *		6242475	0					
ANR	6242628	Identifier	buf		6242475	1					
ANR	6242629	Parameter	int len	137:51:2304:2310	6242475	2	True				
ANR	6242630	ParameterType	int		6242475	0					
ANR	6242631	Identifier	len		6242475	1					
ANR	6242632	Parameter	const char * bitz	137:60:2313:2328	6242475	3	True				
ANR	6242633	ParameterType	const char *		6242475	0					
ANR	6242634	Identifier	bitz		6242475	1					
ANR	6242635	CFGEntryNode	ENTRY		6242475		True				
ANR	6242636	CFGExitNode	EXIT		6242475		True				
ANR	6242637	Symbol	* buf		6242475						
ANR	6242638	Symbol	bitz		6242475						
ANR	6242639	Symbol	toupper		6242475						
ANR	6242640	Symbol	strout		6242475						
ANR	6242641	Symbol	i		6242475						
ANR	6242642	Symbol	j		6242475						
ANR	6242643	Symbol	bit		6242475						
ANR	6242644	Symbol	buf		6242475						
ANR	6242645	Symbol	* i		6242475						
ANR	6242646	Symbol	len		6242475						
ANR	6242647	Symbol	* j		6242475						
ANR	6242648	Symbol	* idx		6242475						
ANR	6242649	Symbol	idx		6242475						
ANR	6242650	Symbol	* strout		6242475						
ANR	6242651	Symbol	* bitz		6242475						
ANR	6242652	Function	trimbits	162:0:2916:3118							
ANR	6242653	FunctionDef	trimbits (char * b)		6242652	0					
ANR	6242654	CompoundStatement		162:30:2946:3118	6242652	0					
ANR	6242655	IdentifierDeclStatement	const int len = strlen ( b ) ;	163:1:2949:2975	6242652	0	True				
ANR	6242656	IdentifierDecl	len = strlen ( b )		6242652	0					
ANR	6242657	IdentifierDeclType	const int		6242652	0					
ANR	6242658	Identifier	len		6242652	1					
ANR	6242659	AssignmentExpression	len = strlen ( b )		6242652	2		=			
ANR	6242660	Identifier	len		6242652	0					
ANR	6242661	CallExpression	strlen ( b )		6242652	1					
ANR	6242662	Callee	strlen		6242652	0					
ANR	6242663	Identifier	strlen		6242652	0					
ANR	6242664	ArgumentList	b		6242652	1					
ANR	6242665	Argument	b		6242652	0					
ANR	6242666	Identifier	b		6242652	0					
ANR	6242667	IdentifierDeclStatement	"char * one = strchr ( b , '1' ) ;"	164:1:2978:3005	6242652	1	True				
ANR	6242668	IdentifierDecl	"* one = strchr ( b , '1' )"		6242652	0					
ANR	6242669	IdentifierDeclType	char *		6242652	0					
ANR	6242670	Identifier	one		6242652	1					
ANR	6242671	AssignmentExpression	"* one = strchr ( b , '1' )"		6242652	2		=			
ANR	6242672	Identifier	one		6242652	0					
ANR	6242673	CallExpression	"strchr ( b , '1' )"		6242652	1					
ANR	6242674	Callee	strchr		6242652	0					
ANR	6242675	Identifier	strchr		6242652	0					
ANR	6242676	ArgumentList	b		6242652	1					
ANR	6242677	Argument	b		6242652	0					
ANR	6242678	Identifier	b		6242652	0					
ANR	6242679	Argument	'1'		6242652	1					
ANR	6242680	PrimaryExpression	'1'		6242652	0					
ANR	6242681	IdentifierDeclStatement	int pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1 ;	165:1:3008:3056	6242652	2	True				
ANR	6242682	IdentifierDecl	pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1		6242652	0					
ANR	6242683	IdentifierDeclType	int		6242652	0					
ANR	6242684	Identifier	pos		6242652	1					
ANR	6242685	AssignmentExpression	pos = one ? ( int ) ( size_t ) ( one - b ) : len - 1		6242652	2		=			
ANR	6242686	Identifier	pos		6242652	0					
ANR	6242687	ConditionalExpression	one ? ( int ) ( size_t ) ( one - b ) : len - 1		6242652	1					
ANR	6242688	Condition	one		6242652	0					
ANR	6242689	Identifier	one		6242652	0					
ANR	6242690	CastExpression	( int ) ( size_t ) ( one - b )		6242652	1					
ANR	6242691	CastTarget	int		6242652	0					
ANR	6242692	CastExpression	( size_t ) ( one - b )		6242652	1					
ANR	6242693	CastTarget	size_t		6242652	0					
ANR	6242694	AdditiveExpression	one - b		6242652	1		-			
ANR	6242695	Identifier	one		6242652	0					
ANR	6242696	Identifier	b		6242652	1					
ANR	6242697	AdditiveExpression	len - 1		6242652	2		-			
ANR	6242698	Identifier	len		6242652	0					
ANR	6242699	PrimaryExpression	1		6242652	1					
ANR	6242700	ExpressionStatement	pos = ( pos / 8 ) * 8	166:1:3059:3078	6242652	3	True				
ANR	6242701	AssignmentExpression	pos = ( pos / 8 ) * 8		6242652	0		=			
ANR	6242702	Identifier	pos		6242652	0					
ANR	6242703	MultiplicativeExpression	( pos / 8 ) * 8		6242652	1		*			
ANR	6242704	MultiplicativeExpression	pos / 8		6242652	0		/			
ANR	6242705	Identifier	pos		6242652	0					
ANR	6242706	PrimaryExpression	8		6242652	1					
ANR	6242707	PrimaryExpression	8		6242652	1					
ANR	6242708	ExpressionStatement	"memmove ( b , b + pos , len - pos + 1 )"	167:1:3081:3116	6242652	4	True				
ANR	6242709	CallExpression	"memmove ( b , b + pos , len - pos + 1 )"		6242652	0					
ANR	6242710	Callee	memmove		6242652	0					
ANR	6242711	Identifier	memmove		6242652	0					
ANR	6242712	ArgumentList	b		6242652	1					
ANR	6242713	Argument	b		6242652	0					
ANR	6242714	Identifier	b		6242652	0					
ANR	6242715	Argument	b + pos		6242652	1					
ANR	6242716	AdditiveExpression	b + pos		6242652	0		+			
ANR	6242717	Identifier	b		6242652	0					
ANR	6242718	Identifier	pos		6242652	1					
ANR	6242719	Argument	len - pos + 1		6242652	2					
ANR	6242720	AdditiveExpression	len - pos + 1		6242652	0		-			
ANR	6242721	Identifier	len		6242652	0					
ANR	6242722	AdditiveExpression	pos + 1		6242652	1		+			
ANR	6242723	Identifier	pos		6242652	0					
ANR	6242724	PrimaryExpression	1		6242652	1					
ANR	6242725	ReturnType	static void		6242652	1					
ANR	6242726	Identifier	trimbits		6242652	2					
ANR	6242727	ParameterList	char * b		6242652	3					
ANR	6242728	Parameter	char * b	162:21:2937:2943	6242652	0	True				
ANR	6242729	ParameterType	char *		6242652	0					
ANR	6242730	Identifier	b		6242652	1					
ANR	6242731	CFGEntryNode	ENTRY		6242652		True				
ANR	6242732	CFGExitNode	EXIT		6242652		True				
ANR	6242733	Symbol	strlen		6242652						
ANR	6242734	Symbol	b		6242652						
ANR	6242735	Symbol	len		6242652						
ANR	6242736	Symbol	pos		6242652						
ANR	6242737	Symbol	one		6242652						
ANR	6242738	Symbol	strchr		6242652						
ANR	6242739	Function	r_str_bits64	173:0:3302:3625							
ANR	6242740	FunctionDef	"r_str_bits64 (char * strout , ut64 in)"		6242739	0					
ANR	6242741	CompoundStatement		173:46:3348:3625	6242739	0					
ANR	6242742	IdentifierDeclStatement	"int i , bit , count = 0 ;"	174:1:3351:3372	6242739	0	True				
ANR	6242743	IdentifierDecl	i		6242739	0					
ANR	6242744	IdentifierDeclType	int		6242739	0					
ANR	6242745	Identifier	i		6242739	1					
ANR	6242746	IdentifierDecl	bit		6242739	1					
ANR	6242747	IdentifierDeclType	int		6242739	0					
ANR	6242748	Identifier	bit		6242739	1					
ANR	6242749	IdentifierDecl	count = 0		6242739	2					
ANR	6242750	IdentifierDeclType	int		6242739	0					
ANR	6242751	Identifier	count		6242739	1					
ANR	6242752	AssignmentExpression	count = 0		6242739	2		=			
ANR	6242753	Identifier	count		6242739	0					
ANR	6242754	PrimaryExpression	0		6242739	1					
ANR	6242755	ExpressionStatement	count = 0	175:1:3375:3384	6242739	1	True				
ANR	6242756	AssignmentExpression	count = 0		6242739	0		=			
ANR	6242757	Identifier	count		6242739	0					
ANR	6242758	PrimaryExpression	0		6242739	1					
ANR	6242759	ForStatement	for ( i = ( sizeof ( in ) * 8 ) - 1 ; i >= 0 ; i -- )		6242739	2					
ANR	6242760	ForInit	i = ( sizeof ( in ) * 8 ) - 1 ;	176:6:3392:3417	6242739	0	True				
ANR	6242761	AssignmentExpression	i = ( sizeof ( in ) * 8 ) - 1		6242739	0		=			
ANR	6242762	Identifier	i		6242739	0					
ANR	6242763	AdditiveExpression	( sizeof ( in ) * 8 ) - 1		6242739	1		-			
ANR	6242764	MultiplicativeExpression	sizeof ( in ) * 8		6242739	0		*			
ANR	6242765	SizeofExpression	sizeof ( in )		6242739	0					
ANR	6242766	Sizeof	sizeof		6242739	0					
ANR	6242767	SizeofOperand	in		6242739	1					
ANR	6242768	PrimaryExpression	8		6242739	1					
ANR	6242769	PrimaryExpression	1		6242739	1					
ANR	6242770	Condition	i >= 0	176:33:3419:3424	6242739	1	True				
ANR	6242771	RelationalExpression	i >= 0		6242739	0		>=			
ANR	6242772	Identifier	i		6242739	0					
ANR	6242773	PrimaryExpression	0		6242739	1					
ANR	6242774	PostIncDecOperationExpression	i --	176:41:3427:3429	6242739	2	True				
ANR	6242775	Identifier	i		6242739	0					
ANR	6242776	IncDec	--		6242739	1					
ANR	6242777	CompoundStatement		4:46:83:83	6242739	3					
ANR	6242778	ExpressionStatement	bit = in >> i	177:2:3436:3449	6242739	0	True				
ANR	6242779	AssignmentExpression	bit = in >> i		6242739	0		=			
ANR	6242780	Identifier	bit		6242739	0					
ANR	6242781	ShiftExpression	in >> i		6242739	1		>>			
ANR	6242782	Identifier	in		6242739	0					
ANR	6242783	Identifier	i		6242739	1					
ANR	6242784	IfStatement	if ( bit & 1 )		6242739	1					
ANR	6242785	Condition	bit & 1	178:6:3457:3463	6242739	0	True				
ANR	6242786	BitAndExpression	bit & 1		6242739	0		&			
ANR	6242787	Identifier	bit		6242739	0					
ANR	6242788	PrimaryExpression	1		6242739	1					
ANR	6242789	CompoundStatement		6:15:117:117	6242739	1					
ANR	6242790	ExpressionStatement	strout [ count ] = '1'	179:3:3471:3490	6242739	0	True				
ANR	6242791	AssignmentExpression	strout [ count ] = '1'		6242739	0		=			
ANR	6242792	ArrayIndexing	strout [ count ]		6242739	0					
ANR	6242793	Identifier	strout		6242739	0					
ANR	6242794	Identifier	count		6242739	1					
ANR	6242795	PrimaryExpression	'1'		6242739	1					
ANR	6242796	ElseStatement	else		6242739	0					
ANR	6242797	CompoundStatement		8:9:152:152	6242739	0					
ANR	6242798	ExpressionStatement	strout [ count ] = '0'	181:3:3506:3525	6242739	0	True				
ANR	6242799	AssignmentExpression	strout [ count ] = '0'		6242739	0		=			
ANR	6242800	ArrayIndexing	strout [ count ]		6242739	0					
ANR	6242801	Identifier	strout		6242739	0					
ANR	6242802	Identifier	count		6242739	1					
ANR	6242803	PrimaryExpression	'0'		6242739	1					
ANR	6242804	ExpressionStatement	count ++	183:2:3533:3540	6242739	2	True				
ANR	6242805	PostIncDecOperationExpression	count ++		6242739	0					
ANR	6242806	Identifier	count		6242739	0					
ANR	6242807	IncDec	++		6242739	1					
ANR	6242808	ExpressionStatement	strout [ count ] = '\\0'	185:1:3546:3566	6242739	3	True				
ANR	6242809	AssignmentExpression	strout [ count ] = '\\0'		6242739	0		=			
ANR	6242810	ArrayIndexing	strout [ count ]		6242739	0					
ANR	6242811	Identifier	strout		6242739	0					
ANR	6242812	Identifier	count		6242739	1					
ANR	6242813	PrimaryExpression	'\\0'		6242739	1					
ANR	6242814	ExpressionStatement	trimbits ( strout )	187:1:3591:3608	6242739	4	True				
ANR	6242815	CallExpression	trimbits ( strout )		6242739	0					
ANR	6242816	Callee	trimbits		6242739	0					
ANR	6242817	Identifier	trimbits		6242739	0					
ANR	6242818	ArgumentList	strout		6242739	1					
ANR	6242819	Argument	strout		6242739	0					
ANR	6242820	Identifier	strout		6242739	0					
ANR	6242821	ReturnStatement	return count ;	188:1:3611:3623	6242739	5	True				
ANR	6242822	Identifier	count		6242739	0					
ANR	6242823	ReturnType	R_API int		6242739	1					
ANR	6242824	Identifier	r_str_bits64		6242739	2					
ANR	6242825	ParameterList	"char * strout , ut64 in"		6242739	3					
ANR	6242826	Parameter	char * strout	173:23:3325:3336	6242739	0	True				
ANR	6242827	ParameterType	char *		6242739	0					
ANR	6242828	Identifier	strout		6242739	1					
ANR	6242829	Parameter	ut64 in	173:37:3339:3345	6242739	1	True				
ANR	6242830	ParameterType	ut64		6242739	0					
ANR	6242831	Identifier	in		6242739	1					
ANR	6242832	CFGEntryNode	ENTRY		6242739		True				
ANR	6242833	CFGExitNode	EXIT		6242739		True				
ANR	6242834	Symbol	* count		6242739						
ANR	6242835	Symbol	in		6242739						
ANR	6242836	Symbol	strout		6242739						
ANR	6242837	Symbol	count		6242739						
ANR	6242838	Symbol	i		6242739						
ANR	6242839	Symbol	bit		6242739						
ANR	6242840	Symbol	* strout		6242739						
ANR	6242841	Function	r_str_bits_from_string	195:0:3672:4121							
ANR	6242842	FunctionDef	"r_str_bits_from_string (const char * buf , const char * bitz)"		6242841	0					
ANR	6242843	CompoundStatement		195:69:3741:4121	6242841	0					
ANR	6242844	Statement	ut64	196:1:3744:3747	6242841	0	True				
ANR	6242845	Statement	out	196:6:3749:3751	6242841	1	True				
ANR	6242846	Statement	=	196:10:3753:3753	6242841	2	True				
ANR	6242847	Statement	0L	196:12:3755:3756	6242841	3	True				
ANR	6242848	ExpressionStatement	L	196:14:3757:3758	6242841	4	True				
ANR	6242849	Identifier	L		6242841	0					
ANR	6242850	ForStatement	for ( ; * buf ; buf ++ )		6242841	5					
ANR	6242851	Condition	* buf	198:8:3832:3835	6242841	0	True				
ANR	6242852	UnaryOperationExpression	* buf		6242841	0					
ANR	6242853	UnaryOperator	*		6242841	0					
ANR	6242854	Identifier	buf		6242841	1					
ANR	6242855	PostIncDecOperationExpression	buf ++	198:14:3838:3842	6242841	1	True				
ANR	6242856	Identifier	buf		6242841	0					
ANR	6242857	IncDec	++		6242841	1					
ANR	6242858	CompoundStatement		5:2:107:168	6242841	2					
ANR	6242859	IdentifierDeclStatement	"char * ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) ) ;"	199:2:3849:3910	6242841	0	True				
ANR	6242860	IdentifierDecl	"* ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		6242841	0					
ANR	6242861	IdentifierDeclType	char *		6242841	0					
ANR	6242862	Identifier	ch		6242841	1					
ANR	6242863	AssignmentExpression	"* ch = strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		6242841	2		=			
ANR	6242864	Identifier	ch		6242841	0					
ANR	6242865	CallExpression	"strchr ( bitz , toupper ( ( const unsigned char ) * buf ) )"		6242841	1					
ANR	6242866	Callee	strchr		6242841	0					
ANR	6242867	Identifier	strchr		6242841	0					
ANR	6242868	ArgumentList	bitz		6242841	1					
ANR	6242869	Argument	bitz		6242841	0					
ANR	6242870	Identifier	bitz		6242841	0					
ANR	6242871	Argument	toupper ( ( const unsigned char ) * buf )		6242841	1					
ANR	6242872	CallExpression	toupper ( ( const unsigned char ) * buf )		6242841	0					
ANR	6242873	Callee	toupper		6242841	0					
ANR	6242874	Identifier	toupper		6242841	0					
ANR	6242875	ArgumentList	( const unsigned char ) * buf		6242841	1					
ANR	6242876	Argument	( const unsigned char ) * buf		6242841	0					
ANR	6242877	CastExpression	( const unsigned char ) * buf		6242841	0					
ANR	6242878	CastTarget	const unsigned char		6242841	0					
ANR	6242879	UnaryOperationExpression	* buf		6242841	1					
ANR	6242880	UnaryOperator	*		6242841	0					
ANR	6242881	Identifier	buf		6242841	1					
ANR	6242882	IfStatement	if ( ! ch )		6242841	1					
ANR	6242883	Condition	! ch	200:6:3918:3920	6242841	0	True				
ANR	6242884	UnaryOperationExpression	! ch		6242841	0					
ANR	6242885	UnaryOperator	!		6242841	0					
ANR	6242886	Identifier	ch		6242841	1					
ANR	6242887	CompoundStatement		6:11:181:181	6242841	1					
ANR	6242888	ExpressionStatement	"ch = strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"	201:3:3928:3983	6242841	0	True				
ANR	6242889	AssignmentExpression	"ch = strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"		6242841	0		=			
ANR	6242890	Identifier	ch		6242841	0					
ANR	6242891	CallExpression	"strchr ( bitz , tolower ( ( const unsigned char ) * buf ) )"		6242841	1					
ANR	6242892	Callee	strchr		6242841	0					
ANR	6242893	Identifier	strchr		6242841	0					
ANR	6242894	ArgumentList	bitz		6242841	1					
ANR	6242895	Argument	bitz		6242841	0					
ANR	6242896	Identifier	bitz		6242841	0					
ANR	6242897	Argument	tolower ( ( const unsigned char ) * buf )		6242841	1					
ANR	6242898	CallExpression	tolower ( ( const unsigned char ) * buf )		6242841	0					
ANR	6242899	Callee	tolower		6242841	0					
ANR	6242900	Identifier	tolower		6242841	0					
ANR	6242901	ArgumentList	( const unsigned char ) * buf		6242841	1					
ANR	6242902	Argument	( const unsigned char ) * buf		6242841	0					
ANR	6242903	CastExpression	( const unsigned char ) * buf		6242841	0					
ANR	6242904	CastTarget	const unsigned char		6242841	0					
ANR	6242905	UnaryOperationExpression	* buf		6242841	1					
ANR	6242906	UnaryOperator	*		6242841	0					
ANR	6242907	Identifier	buf		6242841	1					
ANR	6242908	IfStatement	if ( ch )		6242841	2					
ANR	6242909	Condition	ch	203:6:3995:3996	6242841	0	True				
ANR	6242910	Identifier	ch		6242841	0					
ANR	6242911	CompoundStatement		10:3:262:296	6242841	1					
ANR	6242912	IdentifierDeclStatement	int bit = ( int ) ( size_t ) ( ch - bitz ) ;	204:3:4004:4038	6242841	0	True				
ANR	6242913	IdentifierDecl	bit = ( int ) ( size_t ) ( ch - bitz )		6242841	0					
ANR	6242914	IdentifierDeclType	int		6242841	0					
ANR	6242915	Identifier	bit		6242841	1					
ANR	6242916	AssignmentExpression	bit = ( int ) ( size_t ) ( ch - bitz )		6242841	2		=			
ANR	6242917	Identifier	bit		6242841	0					
ANR	6242918	CastExpression	( int ) ( size_t ) ( ch - bitz )		6242841	1					
ANR	6242919	CastTarget	int		6242841	0					
ANR	6242920	CastExpression	( size_t ) ( ch - bitz )		6242841	1					
ANR	6242921	CastTarget	size_t		6242841	0					
ANR	6242922	AdditiveExpression	ch - bitz		6242841	1		-			
ANR	6242923	Identifier	ch		6242841	0					
ANR	6242924	Identifier	bitz		6242841	1					
ANR	6242925	Statement	out	205:3:4043:4045	6242841	1	True				
ANR	6242926	Statement	|=	205:7:4047:4048	6242841	2	True				
ANR	6242927	Statement	(	205:10:4050:4050	6242841	3	True				
ANR	6242928	Statement	ut64	205:11:4051:4054	6242841	4	True				
ANR	6242929	Statement	)	205:15:4055:4055	6242841	5	True				
ANR	6242930	Statement	(	205:16:4056:4056	6242841	6	True				
ANR	6242931	Statement	1L	205:17:4057:4058	6242841	7	True				
ANR	6242932	Statement	L	205:19:4059:4059	6242841	8	True				
ANR	6242933	Statement	<<	205:21:4061:4062	6242841	9	True				
ANR	6242934	Statement	bit	205:24:4064:4066	6242841	10	True				
ANR	6242935	Statement	)	205:27:4067:4067	6242841	11	True				
ANR	6242936	ExpressionStatement		205:28:4068:4068	6242841	12	True				
ANR	6242937	ElseStatement	else		6242841	0					
ANR	6242938	CompoundStatement		12:9:337:337	6242841	0					
ANR	6242939	ReturnStatement	return UT64_MAX ;	207:3:4084:4099	6242841	0	True				
ANR	6242940	Identifier	UT64_MAX		6242841	0					
ANR	6242941	ReturnStatement	return out ;	210:1:4109:4119	6242841	6	True				
ANR	6242942	Identifier	out		6242841	0					
ANR	6242943	ReturnType	R_API ut64		6242841	1					
ANR	6242944	Identifier	r_str_bits_from_string		6242841	2					
ANR	6242945	ParameterList	"const char * buf , const char * bitz"		6242841	3					
ANR	6242946	Parameter	const char * buf	195:34:3706:3720	6242841	0	True				
ANR	6242947	ParameterType	const char *		6242841	0					
ANR	6242948	Identifier	buf		6242841	1					
ANR	6242949	Parameter	const char * bitz	195:51:3723:3738	6242841	1	True				
ANR	6242950	ParameterType	const char *		6242841	0					
ANR	6242951	Identifier	bitz		6242841	1					
ANR	6242952	CFGEntryNode	ENTRY		6242841		True				
ANR	6242953	CFGExitNode	EXIT		6242841		True				
ANR	6242954	Symbol	buf		6242841						
ANR	6242955	Symbol	* buf		6242841						
ANR	6242956	Symbol	bitz		6242841						
ANR	6242957	Symbol	tolower		6242841						
ANR	6242958	Symbol	ch		6242841						
ANR	6242959	Symbol	toupper		6242841						
ANR	6242960	Symbol	strchr		6242841						
ANR	6242961	Symbol	bit		6242841						
ANR	6242962	Symbol	UT64_MAX		6242841						
ANR	6242963	Symbol	out		6242841						
ANR	6242964	Function	r_str_binstr2bin	213:0:4124:4772							
ANR	6242965	FunctionDef	"r_str_binstr2bin (const char * str , ut8 * out , int outlen)"		6242964	0					
ANR	6242966	CompoundStatement		213:66:4190:4772	6242964	0					
ANR	6242967	IdentifierDeclStatement	"int n , i , j , k , ret , len ;"	214:1:4193:4217	6242964	0	True				
ANR	6242968	IdentifierDecl	n		6242964	0					
ANR	6242969	IdentifierDeclType	int		6242964	0					
ANR	6242970	Identifier	n		6242964	1					
ANR	6242971	IdentifierDecl	i		6242964	1					
ANR	6242972	IdentifierDeclType	int		6242964	0					
ANR	6242973	Identifier	i		6242964	1					
ANR	6242974	IdentifierDecl	j		6242964	2					
ANR	6242975	IdentifierDeclType	int		6242964	0					
ANR	6242976	Identifier	j		6242964	1					
ANR	6242977	IdentifierDecl	k		6242964	3					
ANR	6242978	IdentifierDeclType	int		6242964	0					
ANR	6242979	Identifier	k		6242964	1					
ANR	6242980	IdentifierDecl	ret		6242964	4					
ANR	6242981	IdentifierDeclType	int		6242964	0					
ANR	6242982	Identifier	ret		6242964	1					
ANR	6242983	IdentifierDecl	len		6242964	5					
ANR	6242984	IdentifierDeclType	int		6242964	0					
ANR	6242985	Identifier	len		6242964	1					
ANR	6242986	ExpressionStatement	len = strlen ( str )	215:1:4220:4238	6242964	1	True				
ANR	6242987	AssignmentExpression	len = strlen ( str )		6242964	0		=			
ANR	6242988	Identifier	len		6242964	0					
ANR	6242989	CallExpression	strlen ( str )		6242964	1					
ANR	6242990	Callee	strlen		6242964	0					
ANR	6242991	Identifier	strlen		6242964	0					
ANR	6242992	ArgumentList	str		6242964	1					
ANR	6242993	Argument	str		6242964	0					
ANR	6242994	Identifier	str		6242964	0					
ANR	6242995	ForStatement	for ( n = i = 0 ; i < len ; i += 8 )		6242964	2					
ANR	6242996	ForInit	n = i = 0 ;	216:6:4246:4255	6242964	0	True				
ANR	6242997	AssignmentExpression	n = i = 0		6242964	0		=			
ANR	6242998	Identifier	n		6242964	0					
ANR	6242999	AssignmentExpression	i = 0		6242964	1		=			
ANR	6243000	Identifier	i		6242964	0					
ANR	6243001	PrimaryExpression	0		6242964	1					
ANR	6243002	Condition	i < len	216:17:4257:4263	6242964	1	True				
ANR	6243003	RelationalExpression	i < len		6242964	0		<			
ANR	6243004	Identifier	i		6242964	0					
ANR	6243005	Identifier	len		6242964	1					
ANR	6243006	AssignmentExpression	i += 8	216:26:4266:4271	6242964	2	True	+=			
ANR	6243007	Identifier	i		6242964	0					
ANR	6243008	PrimaryExpression	8		6242964	1					
ANR	6243009	CompoundStatement		4:34:83:83	6242964	3					
ANR	6243010	ExpressionStatement	ret = 0	217:2:4278:4285	6242964	0	True				
ANR	6243011	AssignmentExpression	ret = 0		6242964	0		=			
ANR	6243012	Identifier	ret		6242964	0					
ANR	6243013	PrimaryExpression	0		6242964	1					
ANR	6243014	WhileStatement	while ( str [ i ] == ' ' )		6242964	1					
ANR	6243015	Condition	str [ i ] == ' '	218:9:4296:4306	6242964	0	True				
ANR	6243016	EqualityExpression	str [ i ] == ' '		6242964	0		==			
ANR	6243017	ArrayIndexing	str [ i ]		6242964	0					
ANR	6243018	Identifier	str		6242964	0					
ANR	6243019	Identifier	i		6242964	1					
ANR	6243020	PrimaryExpression	' '		6242964	1					
ANR	6243021	CompoundStatement		6:22:118:118	6242964	1					
ANR	6243022	ExpressionStatement	str ++	219:3:4314:4319	6242964	0	True				
ANR	6243023	PostIncDecOperationExpression	str ++		6242964	0					
ANR	6243024	Identifier	str		6242964	0					
ANR	6243025	IncDec	++		6242964	1					
ANR	6243026	IfStatement	if ( i + 7 < len )		6242964	2					
ANR	6243027	Condition	i + 7 < len	221:6:4331:4341	6242964	0	True				
ANR	6243028	RelationalExpression	i + 7 < len		6242964	0		<			
ANR	6243029	AdditiveExpression	i + 7		6242964	0		+			
ANR	6243030	Identifier	i		6242964	0					
ANR	6243031	PrimaryExpression	7		6242964	1					
ANR	6243032	Identifier	len		6242964	1					
ANR	6243033	CompoundStatement		9:19:153:153	6242964	1					
ANR	6243034	ForStatement	"for ( k = 0 , j = i + 7 ; j >= i ; j -- , k ++ )"		6242964	0					
ANR	6243035	ForInit	"k = 0 , j = i + 7 ;"	222:8:4354:4370	6242964	0	True				
ANR	6243036	Expression	"k = 0 , j = i + 7"		6242964	0					
ANR	6243037	AssignmentExpression	k = 0		6242964	0		=			
ANR	6243038	Identifier	k		6242964	0					
ANR	6243039	PrimaryExpression	0		6242964	1					
ANR	6243040	AssignmentExpression	j = i + 7		6242964	1		=			
ANR	6243041	Identifier	j		6242964	0					
ANR	6243042	AdditiveExpression	i + 7		6242964	1		+			
ANR	6243043	Identifier	i		6242964	0					
ANR	6243044	PrimaryExpression	7		6242964	1					
ANR	6243045	Condition	j >= i	222:26:4372:4377	6242964	1	True				
ANR	6243046	RelationalExpression	j >= i		6242964	0		>=			
ANR	6243047	Identifier	j		6242964	0					
ANR	6243048	Identifier	i		6242964	1					
ANR	6243049	Expression	"j -- , k ++"	222:34:4380:4387	6242964	2	True				
ANR	6243050	PostIncDecOperationExpression	j --		6242964	0					
ANR	6243051	Identifier	j		6242964	0					
ANR	6243052	IncDec	--		6242964	1					
ANR	6243053	PostIncDecOperationExpression	k ++		6242964	1					
ANR	6243054	Identifier	k		6242964	0					
ANR	6243055	IncDec	++		6242964	1					
ANR	6243056	CompoundStatement		10:44:199:199	6242964	3					
ANR	6243057	IfStatement	if ( str [ j ] == ' ' )		6242964	0					
ANR	6243058	Condition	str [ j ] == ' '	224:8:4447:4459	6242964	0	True				
ANR	6243059	EqualityExpression	str [ j ] == ' '		6242964	0		==			
ANR	6243060	ArrayIndexing	str [ j ]		6242964	0					
ANR	6243061	Identifier	str		6242964	0					
ANR	6243062	Identifier	j		6242964	1					
ANR	6243063	PrimaryExpression	' '		6242964	1					
ANR	6243064	CompoundStatement		12:23:271:271	6242964	1					
ANR	6243065	ContinueStatement	continue ;	226:5:4481:4489	6242964	0	True				
ANR	6243066	IfStatement	if ( str [ j ] == '1' )		6242964	1					
ANR	6243067	Condition	str [ j ] == '1'	229:8:4568:4580	6242964	0	True				
ANR	6243068	EqualityExpression	str [ j ] == '1'		6242964	0		==			
ANR	6243069	ArrayIndexing	str [ j ]		6242964	0					
ANR	6243070	Identifier	str		6242964	0					
ANR	6243071	Identifier	j		6242964	1					
ANR	6243072	PrimaryExpression	'1'		6242964	1					
ANR	6243073	CompoundStatement		17:23:392:392	6242964	1					
ANR	6243074	ExpressionStatement	ret |= 1 << k	230:5:4590:4601	6242964	0	True				
ANR	6243075	AssignmentExpression	ret |= 1 << k		6242964	0		|=			
ANR	6243076	Identifier	ret		6242964	0					
ANR	6243077	ShiftExpression	1 << k		6242964	1		<<			
ANR	6243078	PrimaryExpression	1		6242964	0					
ANR	6243079	Identifier	k		6242964	1					
ANR	6243080	ElseStatement	else		6242964	0					
ANR	6243081	IfStatement	if ( str [ j ] != '0' )		6242964	0					
ANR	6243082	Condition	str [ j ] != '0'	231:15:4618:4630	6242964	0	True				
ANR	6243083	EqualityExpression	str [ j ] != '0'		6242964	0		!=			
ANR	6243084	ArrayIndexing	str [ j ]		6242964	0					
ANR	6243085	Identifier	str		6242964	0					
ANR	6243086	Identifier	j		6242964	1					
ANR	6243087	PrimaryExpression	'0'		6242964	1					
ANR	6243088	CompoundStatement		19:30:442:442	6242964	1					
ANR	6243089	ReturnStatement	return n ;	232:5:4640:4648	6242964	0	True				
ANR	6243090	Identifier	n		6242964	0					
ANR	6243091	ExpressionStatement	out [ n ++ ] = ret	237:2:4704:4718	6242964	3	True				
ANR	6243092	AssignmentExpression	out [ n ++ ] = ret		6242964	0		=			
ANR	6243093	ArrayIndexing	out [ n ++ ]		6242964	0					
ANR	6243094	Identifier	out		6242964	0					
ANR	6243095	PostIncDecOperationExpression	n ++		6242964	1					
ANR	6243096	Identifier	n		6242964	0					
ANR	6243097	IncDec	++		6242964	1					
ANR	6243098	Identifier	ret		6242964	1					
ANR	6243099	IfStatement	if ( n == outlen )		6242964	4					
ANR	6243100	Condition	n == outlen	238:6:4726:4736	6242964	0	True				
ANR	6243101	EqualityExpression	n == outlen		6242964	0		==			
ANR	6243102	Identifier	n		6242964	0					
ANR	6243103	Identifier	outlen		6242964	1					
ANR	6243104	CompoundStatement		26:19:548:548	6242964	1					
ANR	6243105	ReturnStatement	return n ;	239:3:4744:4752	6242964	0	True				
ANR	6243106	Identifier	n		6242964	0					
ANR	6243107	ReturnStatement	return n ;	242:1:4762:4770	6242964	3	True				
ANR	6243108	Identifier	n		6242964	0					
ANR	6243109	ReturnType	R_API int		6242964	1					
ANR	6243110	Identifier	r_str_binstr2bin		6242964	2					
ANR	6243111	ParameterList	"const char * str , ut8 * out , int outlen"		6242964	3					
ANR	6243112	Parameter	const char * str	213:27:4151:4165	6242964	0	True				
ANR	6243113	ParameterType	const char *		6242964	0					
ANR	6243114	Identifier	str		6242964	1					
ANR	6243115	Parameter	ut8 * out	213:44:4168:4175	6242964	1	True				
ANR	6243116	ParameterType	ut8 *		6242964	0					
ANR	6243117	Identifier	out		6242964	1					
ANR	6243118	Parameter	int outlen	213:54:4178:4187	6242964	2	True				
ANR	6243119	ParameterType	int		6242964	0					
ANR	6243120	Identifier	outlen		6242964	1					
ANR	6243121	CFGEntryNode	ENTRY		6242964		True				
ANR	6243122	CFGExitNode	EXIT		6242964		True				
ANR	6243123	Symbol	ret		6242964						
ANR	6243124	Symbol	i		6242964						
ANR	6243125	Symbol	j		6242964						
ANR	6243126	Symbol	k		6242964						
ANR	6243127	Symbol	n		6242964						
ANR	6243128	Symbol	out		6242964						
ANR	6243129	Symbol	str		6242964						
ANR	6243130	Symbol	strlen		6242964						
ANR	6243131	Symbol	* i		6242964						
ANR	6243132	Symbol	len		6242964						
ANR	6243133	Symbol	* j		6242964						
ANR	6243134	Symbol	outlen		6242964						
ANR	6243135	Symbol	* out		6242964						
ANR	6243136	Symbol	* str		6242964						
ANR	6243137	Function	r_str_rwx	247:0:4863:5165							
ANR	6243138	FunctionDef	r_str_rwx (const char * str)		6243137	0					
ANR	6243139	CompoundStatement		247:37:4900:5165	6243137	0					
ANR	6243140	IdentifierDeclStatement	int ret = atoi ( str ) ;	248:1:4903:4923	6243137	0	True				
ANR	6243141	IdentifierDecl	ret = atoi ( str )		6243137	0					
ANR	6243142	IdentifierDeclType	int		6243137	0					
ANR	6243143	Identifier	ret		6243137	1					
ANR	6243144	AssignmentExpression	ret = atoi ( str )		6243137	2		=			
ANR	6243145	Identifier	ret		6243137	0					
ANR	6243146	CallExpression	atoi ( str )		6243137	1					
ANR	6243147	Callee	atoi		6243137	0					
ANR	6243148	Identifier	atoi		6243137	0					
ANR	6243149	ArgumentList	str		6243137	1					
ANR	6243150	Argument	str		6243137	0					
ANR	6243151	Identifier	str		6243137	0					
ANR	6243152	IfStatement	if ( ! ret )		6243137	1					
ANR	6243153	Condition	! ret	249:5:4930:4933	6243137	0	True				
ANR	6243154	UnaryOperationExpression	! ret		6243137	0					
ANR	6243155	UnaryOperator	!		6243137	0					
ANR	6243156	Identifier	ret		6243137	1					
ANR	6243157	CompoundStatement		3:11:35:35	6243137	1					
ANR	6243158	ExpressionStatement	"ret |= strchr ( str , 'm' ) ? 16 : 0"	250:2:4940:4973	6243137	0	True				
ANR	6243159	AssignmentExpression	"ret |= strchr ( str , 'm' ) ? 16 : 0"		6243137	0		|=			
ANR	6243160	Identifier	ret		6243137	0					
ANR	6243161	ConditionalExpression	"strchr ( str , 'm' ) ? 16 : 0"		6243137	1					
ANR	6243162	Condition	"strchr ( str , 'm' )"		6243137	0					
ANR	6243163	CallExpression	"strchr ( str , 'm' )"		6243137	0					
ANR	6243164	Callee	strchr		6243137	0					
ANR	6243165	Identifier	strchr		6243137	0					
ANR	6243166	ArgumentList	str		6243137	1					
ANR	6243167	Argument	str		6243137	0					
ANR	6243168	Identifier	str		6243137	0					
ANR	6243169	Argument	'm'		6243137	1					
ANR	6243170	PrimaryExpression	'm'		6243137	0					
ANR	6243171	PrimaryExpression	16		6243137	1					
ANR	6243172	PrimaryExpression	0		6243137	2					
ANR	6243173	ExpressionStatement	"ret |= strchr ( str , 'r' ) ? 4 : 0"	251:2:4977:5009	6243137	1	True				
ANR	6243174	AssignmentExpression	"ret |= strchr ( str , 'r' ) ? 4 : 0"		6243137	0		|=			
ANR	6243175	Identifier	ret		6243137	0					
ANR	6243176	ConditionalExpression	"strchr ( str , 'r' ) ? 4 : 0"		6243137	1					
ANR	6243177	Condition	"strchr ( str , 'r' )"		6243137	0					
ANR	6243178	CallExpression	"strchr ( str , 'r' )"		6243137	0					
ANR	6243179	Callee	strchr		6243137	0					
ANR	6243180	Identifier	strchr		6243137	0					
ANR	6243181	ArgumentList	str		6243137	1					
ANR	6243182	Argument	str		6243137	0					
ANR	6243183	Identifier	str		6243137	0					
ANR	6243184	Argument	'r'		6243137	1					
ANR	6243185	PrimaryExpression	'r'		6243137	0					
ANR	6243186	PrimaryExpression	4		6243137	1					
ANR	6243187	PrimaryExpression	0		6243137	2					
ANR	6243188	ExpressionStatement	"ret |= strchr ( str , 'w' ) ? 2 : 0"	252:2:5013:5045	6243137	2	True				
ANR	6243189	AssignmentExpression	"ret |= strchr ( str , 'w' ) ? 2 : 0"		6243137	0		|=			
ANR	6243190	Identifier	ret		6243137	0					
ANR	6243191	ConditionalExpression	"strchr ( str , 'w' ) ? 2 : 0"		6243137	1					
ANR	6243192	Condition	"strchr ( str , 'w' )"		6243137	0					
ANR	6243193	CallExpression	"strchr ( str , 'w' )"		6243137	0					
ANR	6243194	Callee	strchr		6243137	0					
ANR	6243195	Identifier	strchr		6243137	0					
ANR	6243196	ArgumentList	str		6243137	1					
ANR	6243197	Argument	str		6243137	0					
ANR	6243198	Identifier	str		6243137	0					
ANR	6243199	Argument	'w'		6243137	1					
ANR	6243200	PrimaryExpression	'w'		6243137	0					
ANR	6243201	PrimaryExpression	2		6243137	1					
ANR	6243202	PrimaryExpression	0		6243137	2					
ANR	6243203	ExpressionStatement	"ret |= strchr ( str , 'x' ) ? 1 : 0"	253:2:5049:5081	6243137	3	True				
ANR	6243204	AssignmentExpression	"ret |= strchr ( str , 'x' ) ? 1 : 0"		6243137	0		|=			
ANR	6243205	Identifier	ret		6243137	0					
ANR	6243206	ConditionalExpression	"strchr ( str , 'x' ) ? 1 : 0"		6243137	1					
ANR	6243207	Condition	"strchr ( str , 'x' )"		6243137	0					
ANR	6243208	CallExpression	"strchr ( str , 'x' )"		6243137	0					
ANR	6243209	Callee	strchr		6243137	0					
ANR	6243210	Identifier	strchr		6243137	0					
ANR	6243211	ArgumentList	str		6243137	1					
ANR	6243212	Argument	str		6243137	0					
ANR	6243213	Identifier	str		6243137	0					
ANR	6243214	Argument	'x'		6243137	1					
ANR	6243215	PrimaryExpression	'x'		6243137	0					
ANR	6243216	PrimaryExpression	1		6243137	1					
ANR	6243217	PrimaryExpression	0		6243137	2					
ANR	6243218	ElseStatement	else		6243137	0					
ANR	6243219	IfStatement	if ( ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr ) )		6243137	0					
ANR	6243220	Condition	ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr )	254:12:5095:5133	6243137	0	True				
ANR	6243221	OrExpression	ret < 0 || ret >= R_ARRAY_SIZE ( rwxstr )		6243137	0		||			
ANR	6243222	RelationalExpression	ret < 0		6243137	0		<			
ANR	6243223	Identifier	ret		6243137	0					
ANR	6243224	PrimaryExpression	0		6243137	1					
ANR	6243225	RelationalExpression	ret >= R_ARRAY_SIZE ( rwxstr )		6243137	1		>=			
ANR	6243226	Identifier	ret		6243137	0					
ANR	6243227	CallExpression	R_ARRAY_SIZE ( rwxstr )		6243137	1					
ANR	6243228	Callee	R_ARRAY_SIZE		6243137	0					
ANR	6243229	Identifier	R_ARRAY_SIZE		6243137	0					
ANR	6243230	ArgumentList	rwxstr		6243137	1					
ANR	6243231	Argument	rwxstr		6243137	0					
ANR	6243232	Identifier	rwxstr		6243137	0					
ANR	6243233	CompoundStatement		8:53:235:235	6243137	1					
ANR	6243234	ExpressionStatement	ret = 0	255:2:5140:5147	6243137	0	True				
ANR	6243235	AssignmentExpression	ret = 0		6243137	0		=			
ANR	6243236	Identifier	ret		6243137	0					
ANR	6243237	PrimaryExpression	0		6243137	1					
ANR	6243238	ReturnStatement	return ret ;	257:1:5153:5163	6243137	2	True				
ANR	6243239	Identifier	ret		6243137	0					
ANR	6243240	ReturnType	R_API int		6243137	1					
ANR	6243241	Identifier	r_str_rwx		6243137	2					
ANR	6243242	ParameterList	const char * str		6243137	3					
ANR	6243243	Parameter	const char * str	247:20:4883:4897	6243137	0	True				
ANR	6243244	ParameterType	const char *		6243137	0					
ANR	6243245	Identifier	str		6243137	1					
ANR	6243246	CFGEntryNode	ENTRY		6243137		True				
ANR	6243247	CFGExitNode	EXIT		6243137		True				
ANR	6243248	Symbol	str		6243137						
ANR	6243249	Symbol	atoi		6243137						
ANR	6243250	Symbol	ret		6243137						
ANR	6243251	Symbol	rwxstr		6243137						
ANR	6243252	Symbol	R_ARRAY_SIZE		6243137						
ANR	6243253	Symbol	strchr		6243137						
ANR	6243254	Function	r_str_rwx_i	261:6:5254:5392							
ANR	6243255	FunctionDef	r_str_rwx_i (int rwx)		6243254	0					
ANR	6243256	CompoundStatement		261:39:5287:5392	6243254	0					
ANR	6243257	IfStatement	if ( rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr ) )		6243254	0					
ANR	6243258	Condition	rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr )	262:5:5294:5332	6243254	0	True				
ANR	6243259	OrExpression	rwx < 0 || rwx >= R_ARRAY_SIZE ( rwxstr )		6243254	0		||			
ANR	6243260	RelationalExpression	rwx < 0		6243254	0		<			
ANR	6243261	Identifier	rwx		6243254	0					
ANR	6243262	PrimaryExpression	0		6243254	1					
ANR	6243263	RelationalExpression	rwx >= R_ARRAY_SIZE ( rwxstr )		6243254	1		>=			
ANR	6243264	Identifier	rwx		6243254	0					
ANR	6243265	CallExpression	R_ARRAY_SIZE ( rwxstr )		6243254	1					
ANR	6243266	Callee	R_ARRAY_SIZE		6243254	0					
ANR	6243267	Identifier	R_ARRAY_SIZE		6243254	0					
ANR	6243268	ArgumentList	rwxstr		6243254	1					
ANR	6243269	Argument	rwxstr		6243254	0					
ANR	6243270	Identifier	rwxstr		6243254	0					
ANR	6243271	CompoundStatement		2:46:47:47	6243254	1					
ANR	6243272	ExpressionStatement	rwx = 0	263:2:5339:5346	6243254	0	True				
ANR	6243273	AssignmentExpression	rwx = 0		6243254	0		=			
ANR	6243274	Identifier	rwx		6243254	0					
ANR	6243275	PrimaryExpression	0		6243254	1					
ANR	6243276	ReturnStatement	return rwxstr [ rwx % 24 ] ;	265:1:5352:5375	6243254	1	True				
ANR	6243277	ArrayIndexing	rwxstr [ rwx % 24 ]		6243254	0					
ANR	6243278	Identifier	rwxstr		6243254	0					
ANR	6243279	MultiplicativeExpression	rwx % 24		6243254	1		%			
ANR	6243280	Identifier	rwx		6243254	0					
ANR	6243281	PrimaryExpression	24		6243254	1					
ANR	6243282	ReturnType	const char *		6243254	1					
ANR	6243283	Identifier	r_str_rwx_i		6243254	2					
ANR	6243284	ParameterList	int rwx		6243254	3					
ANR	6243285	Parameter	int rwx	261:30:5278:5284	6243254	0	True				
ANR	6243286	ParameterType	int		6243254	0					
ANR	6243287	Identifier	rwx		6243254	1					
ANR	6243288	CFGEntryNode	ENTRY		6243254		True				
ANR	6243289	CFGExitNode	EXIT		6243254		True				
ANR	6243290	Symbol	rwx		6243254						
ANR	6243291	Symbol	* rwxstr		6243254						
ANR	6243292	Symbol	rwxstr		6243254						
ANR	6243293	Symbol	R_ARRAY_SIZE		6243254						
ANR	6243294	Symbol	* rwx		6243254						
ANR	6243295	Function	r_str_case	270:0:5502:5750							
ANR	6243296	FunctionDef	"r_str_case (char * str , bool up)"		6243295	0					
ANR	6243297	CompoundStatement		270:42:5544:5750	6243295	0					
ANR	6243298	IfStatement	if ( up )		6243295	0					
ANR	6243299	Condition	up	271:5:5551:5552	6243295	0	True				
ANR	6243300	Identifier	up		6243295	0					
ANR	6243301	CompoundStatement		3:2:14:25	6243295	1					
ANR	6243302	IdentifierDeclStatement	char oc = 0 ;	272:2:5559:5570	6243295	0	True				
ANR	6243303	IdentifierDecl	oc = 0		6243295	0					
ANR	6243304	IdentifierDeclType	char		6243295	0					
ANR	6243305	Identifier	oc		6243295	1					
ANR	6243306	AssignmentExpression	oc = 0		6243295	2		=			
ANR	6243307	Identifier	oc		6243295	0					
ANR	6243308	PrimaryExpression	0		6243295	1					
ANR	6243309	ForStatement	for ( ; * str ; oc = * str ++ )		6243295	1					
ANR	6243310	Condition	* str	273:9:5581:5584	6243295	0	True				
ANR	6243311	UnaryOperationExpression	* str		6243295	0					
ANR	6243312	UnaryOperator	*		6243295	0					
ANR	6243313	Identifier	str		6243295	1					
ANR	6243314	AssignmentExpression	oc = * str ++	273:15:5587:5597	6243295	1	True	=			
ANR	6243315	Identifier	oc		6243295	0					
ANR	6243316	UnaryOperationExpression	* str ++		6243295	1					
ANR	6243317	UnaryOperator	*		6243295	0					
ANR	6243318	PostIncDecOperationExpression	str ++		6243295	1					
ANR	6243319	Identifier	str		6243295	0					
ANR	6243320	IncDec	++		6243295	1					
ANR	6243321	CompoundStatement		4:28:55:55	6243295	2					
ANR	6243322	ExpressionStatement	* str = ( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )	274:3:5605:5666	6243295	0	True				
ANR	6243323	AssignmentExpression	* str = ( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )		6243295	0		=			
ANR	6243324	UnaryOperationExpression	* str		6243295	0					
ANR	6243325	UnaryOperator	*		6243295	0					
ANR	6243326	Identifier	str		6243295	1					
ANR	6243327	ConditionalExpression	( * str == 'x' && oc == '0' ) ? 'x' : toupper ( ( int ) ( ut8 ) * str )		6243295	1					
ANR	6243328	Condition	* str == 'x' && oc == '0'		6243295	0					
ANR	6243329	AndExpression	* str == 'x' && oc == '0'		6243295	0		&&			
ANR	6243330	EqualityExpression	* str == 'x'		6243295	0		==			
ANR	6243331	UnaryOperationExpression	* str		6243295	0					
ANR	6243332	UnaryOperator	*		6243295	0					
ANR	6243333	Identifier	str		6243295	1					
ANR	6243334	PrimaryExpression	'x'		6243295	1					
ANR	6243335	EqualityExpression	oc == '0'		6243295	1		==			
ANR	6243336	Identifier	oc		6243295	0					
ANR	6243337	PrimaryExpression	'0'		6243295	1					
ANR	6243338	PrimaryExpression	'x'		6243295	1					
ANR	6243339	CallExpression	toupper ( ( int ) ( ut8 ) * str )		6243295	2					
ANR	6243340	Callee	toupper		6243295	0					
ANR	6243341	Identifier	toupper		6243295	0					
ANR	6243342	ArgumentList	( int ) ( ut8 ) * str		6243295	1					
ANR	6243343	Argument	( int ) ( ut8 ) * str		6243295	0					
ANR	6243344	CastExpression	( int ) ( ut8 ) * str		6243295	0					
ANR	6243345	CastTarget	int		6243295	0					
ANR	6243346	CastExpression	( ut8 ) * str		6243295	1					
ANR	6243347	CastTarget	ut8		6243295	0					
ANR	6243348	UnaryOperationExpression	* str		6243295	1					
ANR	6243349	UnaryOperator	*		6243295	0					
ANR	6243350	Identifier	str		6243295	1					
ANR	6243351	ElseStatement	else		6243295	0					
ANR	6243352	CompoundStatement		7:8:135:135	6243295	0					
ANR	6243353	ForStatement	for ( ; * str ; str ++ )		6243295	0					
ANR	6243354	Condition	* str	277:9:5691:5694	6243295	0	True				
ANR	6243355	UnaryOperationExpression	* str		6243295	0					
ANR	6243356	UnaryOperator	*		6243295	0					
ANR	6243357	Identifier	str		6243295	1					
ANR	6243358	PostIncDecOperationExpression	str ++	277:15:5697:5701	6243295	1	True				
ANR	6243359	Identifier	str		6243295	0					
ANR	6243360	IncDec	++		6243295	1					
ANR	6243361	CompoundStatement		8:22:159:159	6243295	2					
ANR	6243362	ExpressionStatement	* str = tolower ( ( int ) ( ut8 ) * str )	278:3:5710:5741	6243295	0	True				
ANR	6243363	AssignmentExpression	* str = tolower ( ( int ) ( ut8 ) * str )		6243295	0		=			
ANR	6243364	UnaryOperationExpression	* str		6243295	0					
ANR	6243365	UnaryOperator	*		6243295	0					
ANR	6243366	Identifier	str		6243295	1					
ANR	6243367	CallExpression	tolower ( ( int ) ( ut8 ) * str )		6243295	1					
ANR	6243368	Callee	tolower		6243295	0					
ANR	6243369	Identifier	tolower		6243295	0					
ANR	6243370	ArgumentList	( int ) ( ut8 ) * str		6243295	1					
ANR	6243371	Argument	( int ) ( ut8 ) * str		6243295	0					
ANR	6243372	CastExpression	( int ) ( ut8 ) * str		6243295	0					
ANR	6243373	CastTarget	int		6243295	0					
ANR	6243374	CastExpression	( ut8 ) * str		6243295	1					
ANR	6243375	CastTarget	ut8		6243295	0					
ANR	6243376	UnaryOperationExpression	* str		6243295	1					
ANR	6243377	UnaryOperator	*		6243295	0					
ANR	6243378	Identifier	str		6243295	1					
ANR	6243379	ReturnType	R_API void		6243295	1					
ANR	6243380	Identifier	r_str_case		6243295	2					
ANR	6243381	ParameterList	"char * str , bool up"		6243295	3					
ANR	6243382	Parameter	char * str	270:22:5524:5532	6243295	0	True				
ANR	6243383	ParameterType	char *		6243295	0					
ANR	6243384	Identifier	str		6243295	1					
ANR	6243385	Parameter	bool up	270:33:5535:5541	6243295	1	True				
ANR	6243386	ParameterType	bool		6243295	0					
ANR	6243387	Identifier	up		6243295	1					
ANR	6243388	CFGEntryNode	ENTRY		6243295		True				
ANR	6243389	CFGExitNode	EXIT		6243295		True				
ANR	6243390	Symbol	str		6243295						
ANR	6243391	Symbol	oc		6243295						
ANR	6243392	Symbol	tolower		6243295						
ANR	6243393	Symbol	toupper		6243295						
ANR	6243394	Symbol	* str ++		6243295						
ANR	6243395	Symbol	up		6243295						
ANR	6243396	Symbol	* str		6243295						
ANR	6243397	Function	r_str_home	283:0:5753:6271							
ANR	6243398	FunctionDef	r_str_home (const char * str)		6243397	0					
ANR	6243399	CompoundStatement		283:40:5793:6271	6243397	0					
ANR	6243400	IdentifierDeclStatement	"char * dst , * home = r_sys_getenv ( R_SYS_HOME ) ;"	284:1:5796:5840	6243397	0	True				
ANR	6243401	IdentifierDecl	* dst		6243397	0					
ANR	6243402	IdentifierDeclType	char *		6243397	0					
ANR	6243403	Identifier	dst		6243397	1					
ANR	6243404	IdentifierDecl	* home = r_sys_getenv ( R_SYS_HOME )		6243397	1					
ANR	6243405	IdentifierDeclType	char *		6243397	0					
ANR	6243406	Identifier	home		6243397	1					
ANR	6243407	AssignmentExpression	* home = r_sys_getenv ( R_SYS_HOME )		6243397	2		=			
ANR	6243408	Identifier	home		6243397	0					
ANR	6243409	CallExpression	r_sys_getenv ( R_SYS_HOME )		6243397	1					
ANR	6243410	Callee	r_sys_getenv		6243397	0					
ANR	6243411	Identifier	r_sys_getenv		6243397	0					
ANR	6243412	ArgumentList	R_SYS_HOME		6243397	1					
ANR	6243413	Argument	R_SYS_HOME		6243397	0					
ANR	6243414	Identifier	R_SYS_HOME		6243397	0					
ANR	6243415	IdentifierDeclStatement	size_t length ;	285:1:5843:5856	6243397	1	True				
ANR	6243416	IdentifierDecl	length		6243397	0					
ANR	6243417	IdentifierDeclType	size_t		6243397	0					
ANR	6243418	Identifier	length		6243397	1					
ANR	6243419	IfStatement	if ( ! home )		6243397	2					
ANR	6243420	Condition	! home	286:5:5863:5867	6243397	0	True				
ANR	6243421	UnaryOperationExpression	! home		6243397	0					
ANR	6243422	UnaryOperator	!		6243397	0					
ANR	6243423	Identifier	home		6243397	1					
ANR	6243424	CompoundStatement		4:12:76:76	6243397	1					
ANR	6243425	ExpressionStatement	home = r_file_tmpdir ( )	287:2:5874:5897	6243397	0	True				
ANR	6243426	AssignmentExpression	home = r_file_tmpdir ( )		6243397	0		=			
ANR	6243427	Identifier	home		6243397	0					
ANR	6243428	CallExpression	r_file_tmpdir ( )		6243397	1					
ANR	6243429	Callee	r_file_tmpdir		6243397	0					
ANR	6243430	Identifier	r_file_tmpdir		6243397	0					
ANR	6243431	ArgumentList			6243397	1					
ANR	6243432	IfStatement	if ( ! home )		6243397	1					
ANR	6243433	Condition	! home	288:6:5905:5909	6243397	0	True				
ANR	6243434	UnaryOperationExpression	! home		6243397	0					
ANR	6243435	UnaryOperator	!		6243397	0					
ANR	6243436	Identifier	home		6243397	1					
ANR	6243437	CompoundStatement		6:13:118:118	6243397	1					
ANR	6243438	ReturnStatement	return NULL ;	289:3:5917:5928	6243397	0	True				
ANR	6243439	Identifier	NULL		6243397	0					
ANR	6243440	ExpressionStatement	length = strlen ( home ) + 1	292:1:5938:5964	6243397	3	True				
ANR	6243441	AssignmentExpression	length = strlen ( home ) + 1		6243397	0		=			
ANR	6243442	Identifier	length		6243397	0					
ANR	6243443	AdditiveExpression	strlen ( home ) + 1		6243397	1		+			
ANR	6243444	CallExpression	strlen ( home )		6243397	0					
ANR	6243445	Callee	strlen		6243397	0					
ANR	6243446	Identifier	strlen		6243397	0					
ANR	6243447	ArgumentList	home		6243397	1					
ANR	6243448	Argument	home		6243397	0					
ANR	6243449	Identifier	home		6243397	0					
ANR	6243450	PrimaryExpression	1		6243397	1					
ANR	6243451	IfStatement	if ( str )		6243397	4					
ANR	6243452	Condition	str	293:5:5971:5973	6243397	0	True				
ANR	6243453	Identifier	str		6243397	0					
ANR	6243454	CompoundStatement		11:10:182:182	6243397	1					
ANR	6243455	ExpressionStatement	length += strlen ( R_SYS_DIR ) + strlen ( str )	294:2:5980:6023	6243397	0	True				
ANR	6243456	AssignmentExpression	length += strlen ( R_SYS_DIR ) + strlen ( str )		6243397	0		+=			
ANR	6243457	Identifier	length		6243397	0					
ANR	6243458	AdditiveExpression	strlen ( R_SYS_DIR ) + strlen ( str )		6243397	1		+			
ANR	6243459	CallExpression	strlen ( R_SYS_DIR )		6243397	0					
ANR	6243460	Callee	strlen		6243397	0					
ANR	6243461	Identifier	strlen		6243397	0					
ANR	6243462	ArgumentList	R_SYS_DIR		6243397	1					
ANR	6243463	Argument	R_SYS_DIR		6243397	0					
ANR	6243464	Identifier	R_SYS_DIR		6243397	0					
ANR	6243465	CallExpression	strlen ( str )		6243397	1					
ANR	6243466	Callee	strlen		6243397	0					
ANR	6243467	Identifier	strlen		6243397	0					
ANR	6243468	ArgumentList	str		6243397	1					
ANR	6243469	Argument	str		6243397	0					
ANR	6243470	Identifier	str		6243397	0					
ANR	6243471	ExpressionStatement	dst = ( char * ) malloc ( length )	296:1:6029:6058	6243397	5	True				
ANR	6243472	AssignmentExpression	dst = ( char * ) malloc ( length )		6243397	0		=			
ANR	6243473	Identifier	dst		6243397	0					
ANR	6243474	CastExpression	( char * ) malloc ( length )		6243397	1					
ANR	6243475	CastTarget	char *		6243397	0					
ANR	6243476	CallExpression	malloc ( length )		6243397	1					
ANR	6243477	Callee	malloc		6243397	0					
ANR	6243478	Identifier	malloc		6243397	0					
ANR	6243479	ArgumentList	length		6243397	1					
ANR	6243480	Argument	length		6243397	0					
ANR	6243481	Identifier	length		6243397	0					
ANR	6243482	IfStatement	if ( ! dst )		6243397	6					
ANR	6243483	Condition	! dst	297:5:6065:6068	6243397	0	True				
ANR	6243484	UnaryOperationExpression	! dst		6243397	0					
ANR	6243485	UnaryOperator	!		6243397	0					
ANR	6243486	Identifier	dst		6243397	1					
ANR	6243487	CompoundStatement		15:11:277:277	6243397	1					
ANR	6243488	GotoStatement	goto fail ;	298:2:6075:6084	6243397	0	True				
ANR	6243489	Identifier	fail		6243397	0					
ANR	6243490	IdentifierDeclStatement	int home_len = strlen ( home ) ;	300:1:6090:6118	6243397	7	True				
ANR	6243491	IdentifierDecl	home_len = strlen ( home )		6243397	0					
ANR	6243492	IdentifierDeclType	int		6243397	0					
ANR	6243493	Identifier	home_len		6243397	1					
ANR	6243494	AssignmentExpression	home_len = strlen ( home )		6243397	2		=			
ANR	6243495	Identifier	home_len		6243397	0					
ANR	6243496	CallExpression	strlen ( home )		6243397	1					
ANR	6243497	Callee	strlen		6243397	0					
ANR	6243498	Identifier	strlen		6243397	0					
ANR	6243499	ArgumentList	home		6243397	1					
ANR	6243500	Argument	home		6243397	0					
ANR	6243501	Identifier	home		6243397	0					
ANR	6243502	ExpressionStatement	"memcpy ( dst , home , home_len + 1 )"	301:1:6121:6153	6243397	8	True				
ANR	6243503	CallExpression	"memcpy ( dst , home , home_len + 1 )"		6243397	0					
ANR	6243504	Callee	memcpy		6243397	0					
ANR	6243505	Identifier	memcpy		6243397	0					
ANR	6243506	ArgumentList	dst		6243397	1					
ANR	6243507	Argument	dst		6243397	0					
ANR	6243508	Identifier	dst		6243397	0					
ANR	6243509	Argument	home		6243397	1					
ANR	6243510	Identifier	home		6243397	0					
ANR	6243511	Argument	home_len + 1		6243397	2					
ANR	6243512	AdditiveExpression	home_len + 1		6243397	0		+			
ANR	6243513	Identifier	home_len		6243397	0					
ANR	6243514	PrimaryExpression	1		6243397	1					
ANR	6243515	IfStatement	if ( str )		6243397	9					
ANR	6243516	Condition	str	302:5:6160:6162	6243397	0	True				
ANR	6243517	Identifier	str		6243397	0					
ANR	6243518	CompoundStatement		20:10:371:371	6243397	1					
ANR	6243519	ExpressionStatement	dst [ home_len ] = R_SYS_DIR [ 0 ]	303:2:6169:6197	6243397	0	True				
ANR	6243520	AssignmentExpression	dst [ home_len ] = R_SYS_DIR [ 0 ]		6243397	0		=			
ANR	6243521	ArrayIndexing	dst [ home_len ]		6243397	0					
ANR	6243522	Identifier	dst		6243397	0					
ANR	6243523	Identifier	home_len		6243397	1					
ANR	6243524	ArrayIndexing	R_SYS_DIR [ 0 ]		6243397	1					
ANR	6243525	Identifier	R_SYS_DIR		6243397	0					
ANR	6243526	PrimaryExpression	0		6243397	1					
ANR	6243527	ExpressionStatement	"strcpy ( dst + home_len + 1 , str )"	304:2:6201:6233	6243397	1	True				
ANR	6243528	CallExpression	"strcpy ( dst + home_len + 1 , str )"		6243397	0					
ANR	6243529	Callee	strcpy		6243397	0					
ANR	6243530	Identifier	strcpy		6243397	0					
ANR	6243531	ArgumentList	dst + home_len + 1		6243397	1					
ANR	6243532	Argument	dst + home_len + 1		6243397	0					
ANR	6243533	AdditiveExpression	dst + home_len + 1		6243397	0		+			
ANR	6243534	Identifier	dst		6243397	0					
ANR	6243535	AdditiveExpression	home_len + 1		6243397	1		+			
ANR	6243536	Identifier	home_len		6243397	0					
ANR	6243537	PrimaryExpression	1		6243397	1					
ANR	6243538	Argument	str		6243397	1					
ANR	6243539	Identifier	str		6243397	0					
ANR	6243540	Label	fail :	306:0:6238:6242	6243397	10	True				
ANR	6243541	Identifier	fail		6243397	0					
ANR	6243542	ExpressionStatement	free ( home )	307:1:6245:6256	6243397	11	True				
ANR	6243543	CallExpression	free ( home )		6243397	0					
ANR	6243544	Callee	free		6243397	0					
ANR	6243545	Identifier	free		6243397	0					
ANR	6243546	ArgumentList	home		6243397	1					
ANR	6243547	Argument	home		6243397	0					
ANR	6243548	Identifier	home		6243397	0					
ANR	6243549	ReturnStatement	return dst ;	308:1:6259:6269	6243397	12	True				
ANR	6243550	Identifier	dst		6243397	0					
ANR	6243551	ReturnType	R_API char *		6243397	1					
ANR	6243552	Identifier	r_str_home		6243397	2					
ANR	6243553	ParameterList	const char * str		6243397	3					
ANR	6243554	Parameter	const char * str	283:23:5776:5790	6243397	0	True				
ANR	6243555	ParameterType	const char *		6243397	0					
ANR	6243556	Identifier	str		6243397	1					
ANR	6243557	CFGEntryNode	ENTRY		6243397		True				
ANR	6243558	CFGExitNode	EXIT		6243397		True				
ANR	6243559	Symbol	malloc		6243397						
ANR	6243560	Symbol	r_file_tmpdir		6243397						
ANR	6243561	Symbol	NULL		6243397						
ANR	6243562	Symbol	dst		6243397						
ANR	6243563	Symbol	r_sys_getenv		6243397						
ANR	6243564	Symbol	R_SYS_HOME		6243397						
ANR	6243565	Symbol	length		6243397						
ANR	6243566	Symbol	* R_SYS_DIR		6243397						
ANR	6243567	Symbol	home		6243397						
ANR	6243568	Symbol	* home_len		6243397						
ANR	6243569	Symbol	str		6243397						
ANR	6243570	Symbol	* dst		6243397						
ANR	6243571	Symbol	strlen		6243397						
ANR	6243572	Symbol	R_SYS_DIR		6243397						
ANR	6243573	Symbol	home_len		6243397						
ANR	6243574	Function	r_str_r2_prefix	311:0:6274:6389							
ANR	6243575	FunctionDef	r_str_r2_prefix (const char * str)		6243574	0					
ANR	6243576	CompoundStatement		311:45:6319:6389	6243574	0					
ANR	6243577	ReturnStatement	"return r_str_newf ( ""%s%s%s"" , r_sys_prefix ( NULL ) , R_SYS_DIR , str ) ;"	312:1:6322:6387	6243574	0	True				
ANR	6243578	CallExpression	"r_str_newf ( ""%s%s%s"" , r_sys_prefix ( NULL ) , R_SYS_DIR , str )"		6243574	0					
ANR	6243579	Callee	r_str_newf		6243574	0					
ANR	6243580	Identifier	r_str_newf		6243574	0					
ANR	6243581	ArgumentList	"""%s%s%s"""		6243574	1					
ANR	6243582	Argument	"""%s%s%s"""		6243574	0					
ANR	6243583	PrimaryExpression	"""%s%s%s"""		6243574	0					
ANR	6243584	Argument	r_sys_prefix ( NULL )		6243574	1					
ANR	6243585	CallExpression	r_sys_prefix ( NULL )		6243574	0					
ANR	6243586	Callee	r_sys_prefix		6243574	0					
ANR	6243587	Identifier	r_sys_prefix		6243574	0					
ANR	6243588	ArgumentList	NULL		6243574	1					
ANR	6243589	Argument	NULL		6243574	0					
ANR	6243590	Identifier	NULL		6243574	0					
ANR	6243591	Argument	R_SYS_DIR		6243574	2					
ANR	6243592	Identifier	R_SYS_DIR		6243574	0					
ANR	6243593	Argument	str		6243574	3					
ANR	6243594	Identifier	str		6243574	0					
ANR	6243595	ReturnType	R_API char *		6243574	1					
ANR	6243596	Identifier	r_str_r2_prefix		6243574	2					
ANR	6243597	ParameterList	const char * str		6243574	3					
ANR	6243598	Parameter	const char * str	311:28:6302:6316	6243574	0	True				
ANR	6243599	ParameterType	const char *		6243574	0					
ANR	6243600	Identifier	str		6243574	1					
ANR	6243601	CFGEntryNode	ENTRY		6243574		True				
ANR	6243602	CFGExitNode	EXIT		6243574		True				
ANR	6243603	Symbol	str		6243574						
ANR	6243604	Symbol	R_SYS_DIR		6243574						
ANR	6243605	Symbol	NULL		6243574						
ANR	6243606	Symbol	r_str_newf		6243574						
ANR	6243607	Symbol	r_sys_prefix		6243574						
ANR	6243608	Function	r_str_hash64	316:0:6434:6607							
ANR	6243609	FunctionDef	r_str_hash64 (const char * s)		6243608	0					
ANR	6243610	CompoundStatement		316:39:6473:6607	6243608	0					
ANR	6243611	IdentifierDeclStatement	"ut64 len , h = 5381 ;"	317:1:6476:6494	6243608	0	True				
ANR	6243612	IdentifierDecl	len		6243608	0					
ANR	6243613	IdentifierDeclType	ut64		6243608	0					
ANR	6243614	Identifier	len		6243608	1					
ANR	6243615	IdentifierDecl	h = 5381		6243608	1					
ANR	6243616	IdentifierDeclType	ut64		6243608	0					
ANR	6243617	Identifier	h		6243608	1					
ANR	6243618	AssignmentExpression	h = 5381		6243608	2		=			
ANR	6243619	Identifier	h		6243608	0					
ANR	6243620	PrimaryExpression	5381		6243608	1					
ANR	6243621	IfStatement	if ( ! s )		6243608	1					
ANR	6243622	Condition	! s	318:5:6501:6502	6243608	0	True				
ANR	6243623	UnaryOperationExpression	! s		6243608	0					
ANR	6243624	UnaryOperator	!		6243608	0					
ANR	6243625	Identifier	s		6243608	1					
ANR	6243626	CompoundStatement		3:9:31:31	6243608	1					
ANR	6243627	ReturnStatement	return 0 ;	319:2:6509:6517	6243608	0	True				
ANR	6243628	PrimaryExpression	0		6243608	0					
ANR	6243629	ForStatement	for ( len = strlen ( s ) ; len > 0 ; len -- )		6243608	2					
ANR	6243630	ForInit	len = strlen ( s ) ;	321:6:6528:6544	6243608	0	True				
ANR	6243631	AssignmentExpression	len = strlen ( s )		6243608	0		=			
ANR	6243632	Identifier	len		6243608	0					
ANR	6243633	CallExpression	strlen ( s )		6243608	1					
ANR	6243634	Callee	strlen		6243608	0					
ANR	6243635	Identifier	strlen		6243608	0					
ANR	6243636	ArgumentList	s		6243608	1					
ANR	6243637	Argument	s		6243608	0					
ANR	6243638	Identifier	s		6243608	0					
ANR	6243639	Condition	len > 0	321:24:6546:6552	6243608	1	True				
ANR	6243640	RelationalExpression	len > 0		6243608	0		>			
ANR	6243641	Identifier	len		6243608	0					
ANR	6243642	PrimaryExpression	0		6243608	1					
ANR	6243643	PostIncDecOperationExpression	len --	321:33:6555:6559	6243608	2	True				
ANR	6243644	Identifier	len		6243608	0					
ANR	6243645	IncDec	--		6243608	1					
ANR	6243646	CompoundStatement		6:40:88:88	6243608	3					
ANR	6243647	ExpressionStatement	h = ( h ^ ( h << 5 ) ) ^ * s ++	322:2:6566:6591	6243608	0	True				
ANR	6243648	AssignmentExpression	h = ( h ^ ( h << 5 ) ) ^ * s ++		6243608	0		=			
ANR	6243649	Identifier	h		6243608	0					
ANR	6243650	ExclusiveOrExpression	( h ^ ( h << 5 ) ) ^ * s ++		6243608	1		^			
ANR	6243651	ExclusiveOrExpression	h ^ ( h << 5 )		6243608	0		^			
ANR	6243652	Identifier	h		6243608	0					
ANR	6243653	ShiftExpression	h << 5		6243608	1		<<			
ANR	6243654	Identifier	h		6243608	0					
ANR	6243655	PrimaryExpression	5		6243608	1					
ANR	6243656	UnaryOperationExpression	* s ++		6243608	1					
ANR	6243657	UnaryOperator	*		6243608	0					
ANR	6243658	PostIncDecOperationExpression	s ++		6243608	1					
ANR	6243659	Identifier	s		6243608	0					
ANR	6243660	IncDec	++		6243608	1					
ANR	6243661	ReturnStatement	return h ;	324:1:6597:6605	6243608	3	True				
ANR	6243662	Identifier	h		6243608	0					
ANR	6243663	ReturnType	R_API ut64		6243608	1					
ANR	6243664	Identifier	r_str_hash64		6243608	2					
ANR	6243665	ParameterList	const char * s		6243608	3					
ANR	6243666	Parameter	const char * s	316:24:6458:6470	6243608	0	True				
ANR	6243667	ParameterType	const char *		6243608	0					
ANR	6243668	Identifier	s		6243608	1					
ANR	6243669	CFGEntryNode	ENTRY		6243608		True				
ANR	6243670	CFGExitNode	EXIT		6243608		True				
ANR	6243671	Symbol	* s ++		6243608						
ANR	6243672	Symbol	strlen		6243608						
ANR	6243673	Symbol	s		6243608						
ANR	6243674	Symbol	len		6243608						
ANR	6243675	Symbol	h		6243608						
ANR	6243676	Function	r_str_hash	328:0:6651:6723							
ANR	6243677	FunctionDef	r_str_hash (const char * s)		6243676	0					
ANR	6243678	CompoundStatement		328:37:6688:6723	6243676	0					
ANR	6243679	ReturnStatement	return ( ut32 ) r_str_hash64 ( s ) ;	329:1:6691:6721	6243676	0	True				
ANR	6243680	CastExpression	( ut32 ) r_str_hash64 ( s )		6243676	0					
ANR	6243681	CastTarget	ut32		6243676	0					
ANR	6243682	CallExpression	r_str_hash64 ( s )		6243676	1					
ANR	6243683	Callee	r_str_hash64		6243676	0					
ANR	6243684	Identifier	r_str_hash64		6243676	0					
ANR	6243685	ArgumentList	s		6243676	1					
ANR	6243686	Argument	s		6243676	0					
ANR	6243687	Identifier	s		6243676	0					
ANR	6243688	ReturnType	R_API ut32		6243676	1					
ANR	6243689	Identifier	r_str_hash		6243676	2					
ANR	6243690	ParameterList	const char * s		6243676	3					
ANR	6243691	Parameter	const char * s	328:22:6673:6685	6243676	0	True				
ANR	6243692	ParameterType	const char *		6243676	0					
ANR	6243693	Identifier	s		6243676	1					
ANR	6243694	CFGEntryNode	ENTRY		6243676		True				
ANR	6243695	CFGExitNode	EXIT		6243676		True				
ANR	6243696	Symbol	s		6243676						
ANR	6243697	Symbol	r_str_hash64		6243676						
ANR	6243698	Function	r_str_delta	332:0:6726:6866							
ANR	6243699	FunctionDef	"r_str_delta (char * p , char a , char b)"		6243698	0					
ANR	6243700	CompoundStatement		332:47:6773:6866	6243698	0					
ANR	6243701	IdentifierDeclStatement	"char * _a = strchr ( p , a ) ;"	333:1:6776:6800	6243698	0	True				
ANR	6243702	IdentifierDecl	"* _a = strchr ( p , a )"		6243698	0					
ANR	6243703	IdentifierDeclType	char *		6243698	0					
ANR	6243704	Identifier	_a		6243698	1					
ANR	6243705	AssignmentExpression	"* _a = strchr ( p , a )"		6243698	2		=			
ANR	6243706	Identifier	_a		6243698	0					
ANR	6243707	CallExpression	"strchr ( p , a )"		6243698	1					
ANR	6243708	Callee	strchr		6243698	0					
ANR	6243709	Identifier	strchr		6243698	0					
ANR	6243710	ArgumentList	p		6243698	1					
ANR	6243711	Argument	p		6243698	0					
ANR	6243712	Identifier	p		6243698	0					
ANR	6243713	Argument	a		6243698	1					
ANR	6243714	Identifier	a		6243698	0					
ANR	6243715	IdentifierDeclStatement	"char * _b = strchr ( p , b ) ;"	334:1:6803:6827	6243698	1	True				
ANR	6243716	IdentifierDecl	"* _b = strchr ( p , b )"		6243698	0					
ANR	6243717	IdentifierDeclType	char *		6243698	0					
ANR	6243718	Identifier	_b		6243698	1					
ANR	6243719	AssignmentExpression	"* _b = strchr ( p , b )"		6243698	2		=			
ANR	6243720	Identifier	_b		6243698	0					
ANR	6243721	CallExpression	"strchr ( p , b )"		6243698	1					
ANR	6243722	Callee	strchr		6243698	0					
ANR	6243723	Identifier	strchr		6243698	0					
ANR	6243724	ArgumentList	p		6243698	1					
ANR	6243725	Argument	p		6243698	0					
ANR	6243726	Identifier	p		6243698	0					
ANR	6243727	Argument	b		6243698	1					
ANR	6243728	Identifier	b		6243698	0					
ANR	6243729	ReturnStatement	return ( ! _a || ! _b ) ? 0 : ( _a - _b ) ;	335:1:6830:6864	6243698	2	True				
ANR	6243730	ConditionalExpression	( ! _a || ! _b ) ? 0 : ( _a - _b )		6243698	0					
ANR	6243731	Condition	! _a || ! _b		6243698	0					
ANR	6243732	OrExpression	! _a || ! _b		6243698	0		||			
ANR	6243733	UnaryOperationExpression	! _a		6243698	0					
ANR	6243734	UnaryOperator	!		6243698	0					
ANR	6243735	Identifier	_a		6243698	1					
ANR	6243736	UnaryOperationExpression	! _b		6243698	1					
ANR	6243737	UnaryOperator	!		6243698	0					
ANR	6243738	Identifier	_b		6243698	1					
ANR	6243739	PrimaryExpression	0		6243698	1					
ANR	6243740	AdditiveExpression	_a - _b		6243698	2		-			
ANR	6243741	Identifier	_a		6243698	0					
ANR	6243742	Identifier	_b		6243698	1					
ANR	6243743	ReturnType	R_API int		6243698	1					
ANR	6243744	Identifier	r_str_delta		6243698	2					
ANR	6243745	ParameterList	"char * p , char a , char b"		6243698	3					
ANR	6243746	Parameter	char * p	332:22:6748:6754	6243698	0	True				
ANR	6243747	ParameterType	char *		6243698	0					
ANR	6243748	Identifier	p		6243698	1					
ANR	6243749	Parameter	char a	332:31:6757:6762	6243698	1	True				
ANR	6243750	ParameterType	char		6243698	0					
ANR	6243751	Identifier	a		6243698	1					
ANR	6243752	Parameter	char b	332:39:6765:6770	6243698	2	True				
ANR	6243753	ParameterType	char		6243698	0					
ANR	6243754	Identifier	b		6243698	1					
ANR	6243755	CFGEntryNode	ENTRY		6243698		True				
ANR	6243756	CFGExitNode	EXIT		6243698		True				
ANR	6243757	Symbol	p		6243698						
ANR	6243758	Symbol	a		6243698						
ANR	6243759	Symbol	b		6243698						
ANR	6243760	Symbol	_a		6243698						
ANR	6243761	Symbol	_b		6243698						
ANR	6243762	Symbol	strchr		6243698						
ANR	6243763	Function	r_str_split	342:0:7103:7336							
ANR	6243764	FunctionDef	"r_str_split (char * str , char ch)"		6243763	0					
ANR	6243765	CompoundStatement		342:42:7145:7336	6243763	0					
ANR	6243766	IdentifierDeclStatement	int i ;	343:1:7148:7153	6243763	0	True				
ANR	6243767	IdentifierDecl	i		6243763	0					
ANR	6243768	IdentifierDeclType	int		6243763	0					
ANR	6243769	Identifier	i		6243763	1					
ANR	6243770	IdentifierDeclStatement	char * p ;	344:1:7156:7163	6243763	1	True				
ANR	6243771	IdentifierDecl	* p		6243763	0					
ANR	6243772	IdentifierDeclType	char *		6243763	0					
ANR	6243773	Identifier	p		6243763	1					
ANR	6243774	IfStatement	if ( ! str || ! * str )		6243763	2					
ANR	6243775	Condition	! str || ! * str	345:5:7170:7182	6243763	0	True				
ANR	6243776	OrExpression	! str || ! * str		6243763	0		||			
ANR	6243777	UnaryOperationExpression	! str		6243763	0					
ANR	6243778	UnaryOperator	!		6243763	0					
ANR	6243779	Identifier	str		6243763	1					
ANR	6243780	UnaryOperationExpression	! * str		6243763	1					
ANR	6243781	UnaryOperator	!		6243763	0					
ANR	6243782	UnaryOperationExpression	* str		6243763	1					
ANR	6243783	UnaryOperator	*		6243763	0					
ANR	6243784	Identifier	str		6243763	1					
ANR	6243785	CompoundStatement		4:20:39:39	6243763	1					
ANR	6243786	ReturnStatement	return 0 ;	346:2:7189:7197	6243763	0	True				
ANR	6243787	PrimaryExpression	0		6243763	0					
ANR	6243788	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		6243763	3					
ANR	6243789	ForInit	"i = 1 , p = str ;"	349:6:7239:7253	6243763	0	True				
ANR	6243790	Expression	"i = 1 , p = str"		6243763	0					
ANR	6243791	AssignmentExpression	i = 1		6243763	0		=			
ANR	6243792	Identifier	i		6243763	0					
ANR	6243793	PrimaryExpression	1		6243763	1					
ANR	6243794	AssignmentExpression	p = str		6243763	1		=			
ANR	6243795	Identifier	p		6243763	0					
ANR	6243796	Identifier	str		6243763	1					
ANR	6243797	Condition	* p	349:22:7255:7256	6243763	1	True				
ANR	6243798	UnaryOperationExpression	* p		6243763	0					
ANR	6243799	UnaryOperator	*		6243763	0					
ANR	6243800	Identifier	p		6243763	1					
ANR	6243801	PostIncDecOperationExpression	p ++	349:26:7259:7261	6243763	2	True				
ANR	6243802	Identifier	p		6243763	0					
ANR	6243803	IncDec	++		6243763	1					
ANR	6243804	CompoundStatement		8:31:118:118	6243763	3					
ANR	6243805	IfStatement	if ( * p == ch )		6243763	0					
ANR	6243806	Condition	* p == ch	350:6:7272:7279	6243763	0	True				
ANR	6243807	EqualityExpression	* p == ch		6243763	0		==			
ANR	6243808	UnaryOperationExpression	* p		6243763	0					
ANR	6243809	UnaryOperator	*		6243763	0					
ANR	6243810	Identifier	p		6243763	1					
ANR	6243811	Identifier	ch		6243763	1					
ANR	6243812	CompoundStatement		9:16:136:136	6243763	1					
ANR	6243813	ExpressionStatement	i ++	351:3:7287:7290	6243763	0	True				
ANR	6243814	PostIncDecOperationExpression	i ++		6243763	0					
ANR	6243815	Identifier	i		6243763	0					
ANR	6243816	IncDec	++		6243763	1					
ANR	6243817	ExpressionStatement	* p = '\\0'	352:3:7295:7304	6243763	1	True				
ANR	6243818	AssignmentExpression	* p = '\\0'		6243763	0		=			
ANR	6243819	UnaryOperationExpression	* p		6243763	0					
ANR	6243820	UnaryOperator	*		6243763	0					
ANR	6243821	Identifier	p		6243763	1					
ANR	6243822	PrimaryExpression	'\\0'		6243763	1					
ANR	6243823	ReturnStatement	return i ;	355:1:7326:7334	6243763	4	True				
ANR	6243824	Identifier	i		6243763	0					
ANR	6243825	ReturnType	R_API int		6243763	1					
ANR	6243826	Identifier	r_str_split		6243763	2					
ANR	6243827	ParameterList	"char * str , char ch"		6243763	3					
ANR	6243828	Parameter	char * str	342:22:7125:7133	6243763	0	True				
ANR	6243829	ParameterType	char *		6243763	0					
ANR	6243830	Identifier	str		6243763	1					
ANR	6243831	Parameter	char ch	342:33:7136:7142	6243763	1	True				
ANR	6243832	ParameterType	char		6243763	0					
ANR	6243833	Identifier	ch		6243763	1					
ANR	6243834	CFGEntryNode	ENTRY		6243763		True				
ANR	6243835	CFGExitNode	EXIT		6243763		True				
ANR	6243836	Symbol	str		6243763						
ANR	6243837	Symbol	p		6243763						
ANR	6243838	Symbol	ch		6243763						
ANR	6243839	Symbol	i		6243763						
ANR	6243840	Symbol	* p		6243763						
ANR	6243841	Symbol	* str		6243763						
ANR	6243842	Function	r_str_word_set0	362:0:7529:8342							
ANR	6243843	FunctionDef	r_str_word_set0 (char * str)		6243842	0					
ANR	6243844	CompoundStatement		362:37:7566:8342	6243842	0					
ANR	6243845	IdentifierDeclStatement	"int i , quote = 0 ;"	363:1:7569:7585	6243842	0	True				
ANR	6243846	IdentifierDecl	i		6243842	0					
ANR	6243847	IdentifierDeclType	int		6243842	0					
ANR	6243848	Identifier	i		6243842	1					
ANR	6243849	IdentifierDecl	quote = 0		6243842	1					
ANR	6243850	IdentifierDeclType	int		6243842	0					
ANR	6243851	Identifier	quote		6243842	1					
ANR	6243852	AssignmentExpression	quote = 0		6243842	2		=			
ANR	6243853	Identifier	quote		6243842	0					
ANR	6243854	PrimaryExpression	0		6243842	1					
ANR	6243855	IdentifierDeclStatement	char * p ;	364:1:7588:7595	6243842	1	True				
ANR	6243856	IdentifierDecl	* p		6243842	0					
ANR	6243857	IdentifierDeclType	char *		6243842	0					
ANR	6243858	Identifier	p		6243842	1					
ANR	6243859	IfStatement	if ( ! str || ! * str )		6243842	2					
ANR	6243860	Condition	! str || ! * str	365:5:7602:7614	6243842	0	True				
ANR	6243861	OrExpression	! str || ! * str		6243842	0		||			
ANR	6243862	UnaryOperationExpression	! str		6243842	0					
ANR	6243863	UnaryOperator	!		6243842	0					
ANR	6243864	Identifier	str		6243842	1					
ANR	6243865	UnaryOperationExpression	! * str		6243842	1					
ANR	6243866	UnaryOperator	!		6243842	0					
ANR	6243867	UnaryOperationExpression	* str		6243842	1					
ANR	6243868	UnaryOperator	*		6243842	0					
ANR	6243869	Identifier	str		6243842	1					
ANR	6243870	CompoundStatement		4:20:50:50	6243842	1					
ANR	6243871	ReturnStatement	return 0 ;	366:2:7621:7629	6243842	0	True				
ANR	6243872	PrimaryExpression	0		6243842	0					
ANR	6243873	ForStatement	for ( i = 0 ; str [ i ] && str [ i + 1 ] ; i ++ )		6243842	3					
ANR	6243874	ForInit	i = 0 ;	368:6:7640:7645	6243842	0	True				
ANR	6243875	AssignmentExpression	i = 0		6243842	0		=			
ANR	6243876	Identifier	i		6243842	0					
ANR	6243877	PrimaryExpression	0		6243842	1					
ANR	6243878	Condition	str [ i ] && str [ i + 1 ]	368:13:7647:7666	6243842	1	True				
ANR	6243879	AndExpression	str [ i ] && str [ i + 1 ]		6243842	0		&&			
ANR	6243880	ArrayIndexing	str [ i ]		6243842	0					
ANR	6243881	Identifier	str		6243842	0					
ANR	6243882	Identifier	i		6243842	1					
ANR	6243883	ArrayIndexing	str [ i + 1 ]		6243842	1					
ANR	6243884	Identifier	str		6243842	0					
ANR	6243885	AdditiveExpression	i + 1		6243842	1		+			
ANR	6243886	Identifier	i		6243842	0					
ANR	6243887	PrimaryExpression	1		6243842	1					
ANR	6243888	PostIncDecOperationExpression	i ++	368:35:7669:7671	6243842	2	True				
ANR	6243889	Identifier	i		6243842	0					
ANR	6243890	IncDec	++		6243842	1					
ANR	6243891	CompoundStatement		7:40:107:107	6243842	3					
ANR	6243892	IfStatement	if ( i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' ' )		6243842	0					
ANR	6243893	Condition	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '	369:6:7682:7722	6243842	0	True				
ANR	6243894	AndExpression	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '		6243842	0		&&			
ANR	6243895	RelationalExpression	i > 0		6243842	0		>			
ANR	6243896	Identifier	i		6243842	0					
ANR	6243897	PrimaryExpression	0		6243842	1					
ANR	6243898	AndExpression	str [ i - 1 ] == ' ' && str [ i ] == ' '		6243842	1		&&			
ANR	6243899	EqualityExpression	str [ i - 1 ] == ' '		6243842	0		==			
ANR	6243900	ArrayIndexing	str [ i - 1 ]		6243842	0					
ANR	6243901	Identifier	str		6243842	0					
ANR	6243902	AdditiveExpression	i - 1		6243842	1		-			
ANR	6243903	Identifier	i		6243842	0					
ANR	6243904	PrimaryExpression	1		6243842	1					
ANR	6243905	PrimaryExpression	' '		6243842	1					
ANR	6243906	EqualityExpression	str [ i ] == ' '		6243842	1		==			
ANR	6243907	ArrayIndexing	str [ i ]		6243842	0					
ANR	6243908	Identifier	str		6243842	0					
ANR	6243909	Identifier	i		6243842	1					
ANR	6243910	PrimaryExpression	' '		6243842	1					
ANR	6243911	CompoundStatement		9:3:163:189	6243842	1					
ANR	6243912	IdentifierDeclStatement	int len = strlen ( str + i ) ;	370:3:7730:7756	6243842	0	True				
ANR	6243913	IdentifierDecl	len = strlen ( str + i )		6243842	0					
ANR	6243914	IdentifierDeclType	int		6243842	0					
ANR	6243915	Identifier	len		6243842	1					
ANR	6243916	AssignmentExpression	len = strlen ( str + i )		6243842	2		=			
ANR	6243917	Identifier	len		6243842	0					
ANR	6243918	CallExpression	strlen ( str + i )		6243842	1					
ANR	6243919	Callee	strlen		6243842	0					
ANR	6243920	Identifier	strlen		6243842	0					
ANR	6243921	ArgumentList	str + i		6243842	1					
ANR	6243922	Argument	str + i		6243842	0					
ANR	6243923	AdditiveExpression	str + i		6243842	0		+			
ANR	6243924	Identifier	str		6243842	0					
ANR	6243925	Identifier	i		6243842	1					
ANR	6243926	ExpressionStatement	"memmove ( str + i , str + i + 1 , len )"	371:3:7761:7796	6243842	1	True				
ANR	6243927	CallExpression	"memmove ( str + i , str + i + 1 , len )"		6243842	0					
ANR	6243928	Callee	memmove		6243842	0					
ANR	6243929	Identifier	memmove		6243842	0					
ANR	6243930	ArgumentList	str + i		6243842	1					
ANR	6243931	Argument	str + i		6243842	0					
ANR	6243932	AdditiveExpression	str + i		6243842	0		+			
ANR	6243933	Identifier	str		6243842	0					
ANR	6243934	Identifier	i		6243842	1					
ANR	6243935	Argument	str + i + 1		6243842	1					
ANR	6243936	AdditiveExpression	str + i + 1		6243842	0		+			
ANR	6243937	Identifier	str		6243842	0					
ANR	6243938	AdditiveExpression	i + 1		6243842	1		+			
ANR	6243939	Identifier	i		6243842	0					
ANR	6243940	PrimaryExpression	1		6243842	1					
ANR	6243941	Argument	len		6243842	2					
ANR	6243942	Identifier	len		6243842	0					
ANR	6243943	ExpressionStatement	i --	372:3:7801:7804	6243842	2	True				
ANR	6243944	PostIncDecOperationExpression	i --		6243842	0					
ANR	6243945	Identifier	i		6243842	0					
ANR	6243946	IncDec	--		6243842	1					
ANR	6243947	IfStatement	if ( str [ i ] == ' ' )		6243842	4					
ANR	6243948	Condition	str [ i ] == ' '	375:5:7818:7830	6243842	0	True				
ANR	6243949	EqualityExpression	str [ i ] == ' '		6243842	0		==			
ANR	6243950	ArrayIndexing	str [ i ]		6243842	0					
ANR	6243951	Identifier	str		6243842	0					
ANR	6243952	Identifier	i		6243842	1					
ANR	6243953	PrimaryExpression	' '		6243842	1					
ANR	6243954	CompoundStatement		14:20:266:266	6243842	1					
ANR	6243955	ExpressionStatement	str [ i ] = 0	376:2:7837:7847	6243842	0	True				
ANR	6243956	AssignmentExpression	str [ i ] = 0		6243842	0		=			
ANR	6243957	ArrayIndexing	str [ i ]		6243842	0					
ANR	6243958	Identifier	str		6243842	0					
ANR	6243959	Identifier	i		6243842	1					
ANR	6243960	PrimaryExpression	0		6243842	1					
ANR	6243961	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		6243842	5					
ANR	6243962	ForInit	"i = 1 , p = str ;"	378:6:7858:7872	6243842	0	True				
ANR	6243963	Expression	"i = 1 , p = str"		6243842	0					
ANR	6243964	AssignmentExpression	i = 1		6243842	0		=			
ANR	6243965	Identifier	i		6243842	0					
ANR	6243966	PrimaryExpression	1		6243842	1					
ANR	6243967	AssignmentExpression	p = str		6243842	1		=			
ANR	6243968	Identifier	p		6243842	0					
ANR	6243969	Identifier	str		6243842	1					
ANR	6243970	Condition	* p	378:22:7874:7875	6243842	1	True				
ANR	6243971	UnaryOperationExpression	* p		6243842	0					
ANR	6243972	UnaryOperator	*		6243842	0					
ANR	6243973	Identifier	p		6243842	1					
ANR	6243974	PostIncDecOperationExpression	p ++	378:26:7878:7880	6243842	2	True				
ANR	6243975	Identifier	p		6243842	0					
ANR	6243976	IncDec	++		6243842	1					
ANR	6243977	CompoundStatement		17:31:316:316	6243842	3					
ANR	6243978	IfStatement	"if ( * p == '\\""' )"		6243842	0					
ANR	6243979	Condition	"* p == '\\""'"	379:6:7891:7900	6243842	0	True				
ANR	6243980	EqualityExpression	"* p == '\\""'"		6243842	0		==			
ANR	6243981	UnaryOperationExpression	* p		6243842	0					
ANR	6243982	UnaryOperator	*		6243842	0					
ANR	6243983	Identifier	p		6243842	1					
ANR	6243984	PrimaryExpression	"'\\""'"		6243842	1					
ANR	6243985	CompoundStatement		18:18:336:336	6243842	1					
ANR	6243986	IfStatement	if ( quote )		6243842	0					
ANR	6243987	Condition	quote	380:7:7912:7916	6243842	0	True				
ANR	6243988	Identifier	quote		6243842	0					
ANR	6243989	CompoundStatement		19:14:352:352	6243842	1					
ANR	6243990	ExpressionStatement	quote = 0	381:4:7925:7934	6243842	0	True				
ANR	6243991	AssignmentExpression	quote = 0		6243842	0		=			
ANR	6243992	Identifier	quote		6243842	0					
ANR	6243993	PrimaryExpression	0		6243842	1					
ANR	6243994	ExpressionStatement	* p = '\\0'	382:4:7940:7949	6243842	1	True				
ANR	6243995	AssignmentExpression	* p = '\\0'		6243842	0		=			
ANR	6243996	UnaryOperationExpression	* p		6243842	0					
ANR	6243997	UnaryOperator	*		6243842	0					
ANR	6243998	Identifier	p		6243842	1					
ANR	6243999	PrimaryExpression	'\\0'		6243842	1					
ANR	6244000	ContinueStatement	continue ;	384:4:7972:7980	6243842	2	True				
ANR	6244001	ElseStatement	else		6243842	0					
ANR	6244002	CompoundStatement		24:10:425:425	6243842	0					
ANR	6244003	ExpressionStatement	quote = 1	386:4:7998:8007	6243842	0	True				
ANR	6244004	AssignmentExpression	quote = 1		6243842	0		=			
ANR	6244005	Identifier	quote		6243842	0					
ANR	6244006	PrimaryExpression	1		6243842	1					
ANR	6244007	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	387:4:8013:8051	6243842	1	True				
ANR	6244008	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		6243842	0					
ANR	6244009	Callee	memmove		6243842	0					
ANR	6244010	Identifier	memmove		6243842	0					
ANR	6244011	ArgumentList	p		6243842	1					
ANR	6244012	Argument	p		6243842	0					
ANR	6244013	Identifier	p		6243842	0					
ANR	6244014	Argument	p + 1		6243842	1					
ANR	6244015	AdditiveExpression	p + 1		6243842	0		+			
ANR	6244016	Identifier	p		6243842	0					
ANR	6244017	PrimaryExpression	1		6243842	1					
ANR	6244018	Argument	strlen ( p + 1 ) + 1		6243842	2					
ANR	6244019	AdditiveExpression	strlen ( p + 1 ) + 1		6243842	0		+			
ANR	6244020	CallExpression	strlen ( p + 1 )		6243842	0					
ANR	6244021	Callee	strlen		6243842	0					
ANR	6244022	Identifier	strlen		6243842	0					
ANR	6244023	ArgumentList	p + 1		6243842	1					
ANR	6244024	Argument	p + 1		6243842	0					
ANR	6244025	AdditiveExpression	p + 1		6243842	0		+			
ANR	6244026	Identifier	p		6243842	0					
ANR	6244027	PrimaryExpression	1		6243842	1					
ANR	6244028	PrimaryExpression	1		6243842	1					
ANR	6244029	IfStatement	if ( quote )		6243842	1					
ANR	6244030	Condition	quote	390:6:8068:8072	6243842	0	True				
ANR	6244031	Identifier	quote		6243842	0					
ANR	6244032	CompoundStatement		29:13:508:508	6243842	1					
ANR	6244033	ContinueStatement	continue ;	391:3:8080:8088	6243842	0	True				
ANR	6244034	IfStatement	if ( * p == ' ' )		6243842	2					
ANR	6244035	Condition	* p == ' '	393:6:8100:8108	6243842	0	True				
ANR	6244036	EqualityExpression	* p == ' '		6243842	0		==			
ANR	6244037	UnaryOperationExpression	* p		6243842	0					
ANR	6244038	UnaryOperator	*		6243842	0					
ANR	6244039	Identifier	p		6243842	1					
ANR	6244040	PrimaryExpression	' '		6243842	1					
ANR	6244041	CompoundStatement		33:3:549:564	6243842	1					
ANR	6244042	IdentifierDeclStatement	char * q = p - 1 ;	394:3:8116:8131	6243842	0	True				
ANR	6244043	IdentifierDecl	* q = p - 1		6243842	0					
ANR	6244044	IdentifierDeclType	char *		6243842	0					
ANR	6244045	Identifier	q		6243842	1					
ANR	6244046	AssignmentExpression	* q = p - 1		6243842	2		=			
ANR	6244047	Identifier	q		6243842	0					
ANR	6244048	AdditiveExpression	p - 1		6243842	1		-			
ANR	6244049	Identifier	p		6243842	0					
ANR	6244050	PrimaryExpression	1		6243842	1					
ANR	6244051	IfStatement	if ( p > str && ( * q == '\\\\' || ! * q ) )		6243842	1					
ANR	6244052	Condition	p > str && ( * q == '\\\\' || ! * q )	395:7:8140:8169	6243842	0	True				
ANR	6244053	AndExpression	p > str && ( * q == '\\\\' || ! * q )		6243842	0		&&			
ANR	6244054	RelationalExpression	p > str		6243842	0		>			
ANR	6244055	Identifier	p		6243842	0					
ANR	6244056	Identifier	str		6243842	1					
ANR	6244057	OrExpression	* q == '\\\\' || ! * q		6243842	1		||			
ANR	6244058	EqualityExpression	* q == '\\\\'		6243842	0		==			
ANR	6244059	UnaryOperationExpression	* q		6243842	0					
ANR	6244060	UnaryOperator	*		6243842	0					
ANR	6244061	Identifier	q		6243842	1					
ANR	6244062	PrimaryExpression	'\\\\'		6243842	1					
ANR	6244063	UnaryOperationExpression	! * q		6243842	1					
ANR	6244064	UnaryOperator	!		6243842	0					
ANR	6244065	UnaryOperationExpression	* q		6243842	1					
ANR	6244066	UnaryOperator	*		6243842	0					
ANR	6244067	Identifier	q		6243842	1					
ANR	6244068	CompoundStatement		34:39:605:605	6243842	1					
ANR	6244069	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	396:4:8178:8216	6243842	0	True				
ANR	6244070	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		6243842	0					
ANR	6244071	Callee	memmove		6243842	0					
ANR	6244072	Identifier	memmove		6243842	0					
ANR	6244073	ArgumentList	p		6243842	1					
ANR	6244074	Argument	p		6243842	0					
ANR	6244075	Identifier	p		6243842	0					
ANR	6244076	Argument	p + 1		6243842	1					
ANR	6244077	AdditiveExpression	p + 1		6243842	0		+			
ANR	6244078	Identifier	p		6243842	0					
ANR	6244079	PrimaryExpression	1		6243842	1					
ANR	6244080	Argument	strlen ( p + 1 ) + 1		6243842	2					
ANR	6244081	AdditiveExpression	strlen ( p + 1 ) + 1		6243842	0		+			
ANR	6244082	CallExpression	strlen ( p + 1 )		6243842	0					
ANR	6244083	Callee	strlen		6243842	0					
ANR	6244084	Identifier	strlen		6243842	0					
ANR	6244085	ArgumentList	p + 1		6243842	1					
ANR	6244086	Argument	p + 1		6243842	0					
ANR	6244087	AdditiveExpression	p + 1		6243842	0		+			
ANR	6244088	Identifier	p		6243842	0					
ANR	6244089	PrimaryExpression	1		6243842	1					
ANR	6244090	PrimaryExpression	1		6243842	1					
ANR	6244091	IfStatement	if ( * q == '\\\\' )		6243842	1					
ANR	6244092	Condition	* q == '\\\\'	397:8:8226:8235	6243842	0	True				
ANR	6244093	EqualityExpression	* q == '\\\\'		6243842	0		==			
ANR	6244094	UnaryOperationExpression	* q		6243842	0					
ANR	6244095	UnaryOperator	*		6243842	0					
ANR	6244096	Identifier	q		6243842	1					
ANR	6244097	PrimaryExpression	'\\\\'		6243842	1					
ANR	6244098	CompoundStatement		36:20:671:671	6243842	1					
ANR	6244099	ExpressionStatement	* q = ' '	398:5:8245:8253	6243842	0	True				
ANR	6244100	AssignmentExpression	* q = ' '		6243842	0		=			
ANR	6244101	UnaryOperationExpression	* q		6243842	0					
ANR	6244102	UnaryOperator	*		6243842	0					
ANR	6244103	Identifier	q		6243842	1					
ANR	6244104	PrimaryExpression	' '		6243842	1					
ANR	6244105	ContinueStatement	continue ;	399:5:8260:8268	6243842	1	True				
ANR	6244106	ExpressionStatement	p --	401:4:8280:8283	6243842	2	True				
ANR	6244107	PostIncDecOperationExpression	p --		6243842	0					
ANR	6244108	Identifier	p		6243842	0					
ANR	6244109	IncDec	--		6243842	1					
ANR	6244110	ExpressionStatement	i ++	403:3:8293:8296	6243842	2	True				
ANR	6244111	PostIncDecOperationExpression	i ++		6243842	0					
ANR	6244112	Identifier	i		6243842	0					
ANR	6244113	IncDec	++		6243842	1					
ANR	6244114	ExpressionStatement	* p = '\\0'	404:3:8301:8310	6243842	3	True				
ANR	6244115	AssignmentExpression	* p = '\\0'		6243842	0		=			
ANR	6244116	UnaryOperationExpression	* p		6243842	0					
ANR	6244117	UnaryOperator	*		6243842	0					
ANR	6244118	Identifier	p		6243842	1					
ANR	6244119	PrimaryExpression	'\\0'		6243842	1					
ANR	6244120	ReturnStatement	return i ;	407:1:8332:8340	6243842	6	True				
ANR	6244121	Identifier	i		6243842	0					
ANR	6244122	ReturnType	R_API int		6243842	1					
ANR	6244123	Identifier	r_str_word_set0		6243842	2					
ANR	6244124	ParameterList	char * str		6243842	3					
ANR	6244125	Parameter	char * str	362:26:7555:7563	6243842	0	True				
ANR	6244126	ParameterType	char *		6243842	0					
ANR	6244127	Identifier	str		6243842	1					
ANR	6244128	CFGEntryNode	ENTRY		6243842		True				
ANR	6244129	CFGExitNode	EXIT		6243842		True				
ANR	6244130	Symbol	str		6243842						
ANR	6244131	Symbol	p		6243842						
ANR	6244132	Symbol	strlen		6243842						
ANR	6244133	Symbol	q		6243842						
ANR	6244134	Symbol	quote		6243842						
ANR	6244135	Symbol	* i		6243842						
ANR	6244136	Symbol	len		6243842						
ANR	6244137	Symbol	i		6243842						
ANR	6244138	Symbol	* p		6243842						
ANR	6244139	Symbol	* str		6243842						
ANR	6244140	Symbol	* q		6243842						
ANR	6244141	Function	r_str_word_set0_stack	410:0:8345:9775							
ANR	6244142	FunctionDef	r_str_word_set0_stack (char * str)		6244141	0					
ANR	6244143	CompoundStatement		410:43:8388:9775	6244141	0					
ANR	6244144	IdentifierDeclStatement	int i ;	411:1:8391:8396	6244141	0	True				
ANR	6244145	IdentifierDecl	i		6244141	0					
ANR	6244146	IdentifierDeclType	int		6244141	0					
ANR	6244147	Identifier	i		6244141	1					
ANR	6244148	IdentifierDeclStatement	"char * p , * q ;"	412:1:8399:8410	6244141	1	True				
ANR	6244149	IdentifierDecl	* p		6244141	0					
ANR	6244150	IdentifierDeclType	char *		6244141	0					
ANR	6244151	Identifier	p		6244141	1					
ANR	6244152	IdentifierDecl	* q		6244141	1					
ANR	6244153	IdentifierDeclType	char *		6244141	0					
ANR	6244154	Identifier	q		6244141	1					
ANR	6244155	IdentifierDeclStatement	RStack * s ;	413:1:8413:8422	6244141	2	True				
ANR	6244156	IdentifierDecl	* s		6244141	0					
ANR	6244157	IdentifierDeclType	RStack *		6244141	0					
ANR	6244158	Identifier	s		6244141	1					
ANR	6244159	IdentifierDeclStatement	void * pop ;	414:1:8425:8434	6244141	3	True				
ANR	6244160	IdentifierDecl	* pop		6244141	0					
ANR	6244161	IdentifierDeclType	void *		6244141	0					
ANR	6244162	Identifier	pop		6244141	1					
ANR	6244163	IfStatement	if ( ! str || ! * str )		6244141	4					
ANR	6244164	Condition	! str || ! * str	415:5:8441:8453	6244141	0	True				
ANR	6244165	OrExpression	! str || ! * str		6244141	0		||			
ANR	6244166	UnaryOperationExpression	! str		6244141	0					
ANR	6244167	UnaryOperator	!		6244141	0					
ANR	6244168	Identifier	str		6244141	1					
ANR	6244169	UnaryOperationExpression	! * str		6244141	1					
ANR	6244170	UnaryOperator	!		6244141	0					
ANR	6244171	UnaryOperationExpression	* str		6244141	1					
ANR	6244172	UnaryOperator	*		6244141	0					
ANR	6244173	Identifier	str		6244141	1					
ANR	6244174	CompoundStatement		6:20:67:67	6244141	1					
ANR	6244175	ReturnStatement	return 0 ;	416:2:8460:8468	6244141	0	True				
ANR	6244176	PrimaryExpression	0		6244141	0					
ANR	6244177	ForStatement	for ( i = 0 ; str [ i ] && str [ i + 1 ] ; i ++ )		6244141	5					
ANR	6244178	ForInit	i = 0 ;	418:6:8479:8484	6244141	0	True				
ANR	6244179	AssignmentExpression	i = 0		6244141	0		=			
ANR	6244180	Identifier	i		6244141	0					
ANR	6244181	PrimaryExpression	0		6244141	1					
ANR	6244182	Condition	str [ i ] && str [ i + 1 ]	418:13:8486:8503	6244141	1	True				
ANR	6244183	AndExpression	str [ i ] && str [ i + 1 ]		6244141	0		&&			
ANR	6244184	ArrayIndexing	str [ i ]		6244141	0					
ANR	6244185	Identifier	str		6244141	0					
ANR	6244186	Identifier	i		6244141	1					
ANR	6244187	ArrayIndexing	str [ i + 1 ]		6244141	1					
ANR	6244188	Identifier	str		6244141	0					
ANR	6244189	AdditiveExpression	i + 1		6244141	1		+			
ANR	6244190	Identifier	i		6244141	0					
ANR	6244191	PrimaryExpression	1		6244141	1					
ANR	6244192	PostIncDecOperationExpression	i ++	418:33:8506:8508	6244141	2	True				
ANR	6244193	Identifier	i		6244141	0					
ANR	6244194	IncDec	++		6244141	1					
ANR	6244195	CompoundStatement		9:38:122:122	6244141	3					
ANR	6244196	IfStatement	if ( i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' ' )		6244141	0					
ANR	6244197	Condition	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '	419:6:8519:8561	6244141	0	True				
ANR	6244198	AndExpression	i > 0 && str [ i - 1 ] == ' ' && str [ i ] == ' '		6244141	0		&&			
ANR	6244199	RelationalExpression	i > 0		6244141	0		>			
ANR	6244200	Identifier	i		6244141	0					
ANR	6244201	PrimaryExpression	0		6244141	1					
ANR	6244202	AndExpression	str [ i - 1 ] == ' ' && str [ i ] == ' '		6244141	1		&&			
ANR	6244203	EqualityExpression	str [ i - 1 ] == ' '		6244141	0		==			
ANR	6244204	ArrayIndexing	str [ i - 1 ]		6244141	0					
ANR	6244205	Identifier	str		6244141	0					
ANR	6244206	AdditiveExpression	i - 1		6244141	1		-			
ANR	6244207	Identifier	i		6244141	0					
ANR	6244208	PrimaryExpression	1		6244141	1					
ANR	6244209	PrimaryExpression	' '		6244141	1					
ANR	6244210	EqualityExpression	str [ i ] == ' '		6244141	1		==			
ANR	6244211	ArrayIndexing	str [ i ]		6244141	0					
ANR	6244212	Identifier	str		6244141	0					
ANR	6244213	Identifier	i		6244141	1					
ANR	6244214	PrimaryExpression	' '		6244141	1					
ANR	6244215	CompoundStatement		10:51:175:175	6244141	1					
ANR	6244216	ExpressionStatement	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"	420:3:8569:8617	6244141	0	True				
ANR	6244217	CallExpression	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"		6244141	0					
ANR	6244218	Callee	memmove		6244141	0					
ANR	6244219	Identifier	memmove		6244141	0					
ANR	6244220	ArgumentList	str + i		6244141	1					
ANR	6244221	Argument	str + i		6244141	0					
ANR	6244222	AdditiveExpression	str + i		6244141	0		+			
ANR	6244223	Identifier	str		6244141	0					
ANR	6244224	Identifier	i		6244141	1					
ANR	6244225	Argument	str + i + 1		6244141	1					
ANR	6244226	AdditiveExpression	str + i + 1		6244141	0		+			
ANR	6244227	Identifier	str		6244141	0					
ANR	6244228	AdditiveExpression	i + 1		6244141	1		+			
ANR	6244229	Identifier	i		6244141	0					
ANR	6244230	PrimaryExpression	1		6244141	1					
ANR	6244231	Argument	strlen ( str + i )		6244141	2					
ANR	6244232	CallExpression	strlen ( str + i )		6244141	0					
ANR	6244233	Callee	strlen		6244141	0					
ANR	6244234	Identifier	strlen		6244141	0					
ANR	6244235	ArgumentList	str + i		6244141	1					
ANR	6244236	Argument	str + i		6244141	0					
ANR	6244237	AdditiveExpression	str + i		6244141	0		+			
ANR	6244238	Identifier	str		6244141	0					
ANR	6244239	Identifier	i		6244141	1					
ANR	6244240	ExpressionStatement	i --	421:3:8622:8625	6244141	1	True				
ANR	6244241	PostIncDecOperationExpression	i --		6244141	0					
ANR	6244242	Identifier	i		6244141	0					
ANR	6244243	IncDec	--		6244141	1					
ANR	6244244	IfStatement	if ( i == 0 && str [ i ] == ' ' )		6244141	1					
ANR	6244245	Condition	i == 0 && str [ i ] == ' '	423:6:8637:8659	6244141	0	True				
ANR	6244246	AndExpression	i == 0 && str [ i ] == ' '		6244141	0		&&			
ANR	6244247	EqualityExpression	i == 0		6244141	0		==			
ANR	6244248	Identifier	i		6244141	0					
ANR	6244249	PrimaryExpression	0		6244141	1					
ANR	6244250	EqualityExpression	str [ i ] == ' '		6244141	1		==			
ANR	6244251	ArrayIndexing	str [ i ]		6244141	0					
ANR	6244252	Identifier	str		6244141	0					
ANR	6244253	Identifier	i		6244141	1					
ANR	6244254	PrimaryExpression	' '		6244141	1					
ANR	6244255	CompoundStatement		14:31:273:273	6244141	1					
ANR	6244256	ExpressionStatement	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"	424:3:8667:8715	6244141	0	True				
ANR	6244257	CallExpression	"memmove ( str + i , str + i + 1 , strlen ( str + i ) )"		6244141	0					
ANR	6244258	Callee	memmove		6244141	0					
ANR	6244259	Identifier	memmove		6244141	0					
ANR	6244260	ArgumentList	str + i		6244141	1					
ANR	6244261	Argument	str + i		6244141	0					
ANR	6244262	AdditiveExpression	str + i		6244141	0		+			
ANR	6244263	Identifier	str		6244141	0					
ANR	6244264	Identifier	i		6244141	1					
ANR	6244265	Argument	str + i + 1		6244141	1					
ANR	6244266	AdditiveExpression	str + i + 1		6244141	0		+			
ANR	6244267	Identifier	str		6244141	0					
ANR	6244268	AdditiveExpression	i + 1		6244141	1		+			
ANR	6244269	Identifier	i		6244141	0					
ANR	6244270	PrimaryExpression	1		6244141	1					
ANR	6244271	Argument	strlen ( str + i )		6244141	2					
ANR	6244272	CallExpression	strlen ( str + i )		6244141	0					
ANR	6244273	Callee	strlen		6244141	0					
ANR	6244274	Identifier	strlen		6244141	0					
ANR	6244275	ArgumentList	str + i		6244141	1					
ANR	6244276	Argument	str + i		6244141	0					
ANR	6244277	AdditiveExpression	str + i		6244141	0		+			
ANR	6244278	Identifier	str		6244141	0					
ANR	6244279	Identifier	i		6244141	1					
ANR	6244280	IfStatement	if ( str [ i ] == ' ' )		6244141	6					
ANR	6244281	Condition	str [ i ] == ' '	427:5:8729:8741	6244141	0	True				
ANR	6244282	EqualityExpression	str [ i ] == ' '		6244141	0		==			
ANR	6244283	ArrayIndexing	str [ i ]		6244141	0					
ANR	6244284	Identifier	str		6244141	0					
ANR	6244285	Identifier	i		6244141	1					
ANR	6244286	PrimaryExpression	' '		6244141	1					
ANR	6244287	CompoundStatement		18:20:355:355	6244141	1					
ANR	6244288	ExpressionStatement	str [ i ] = 0	428:2:8748:8758	6244141	0	True				
ANR	6244289	AssignmentExpression	str [ i ] = 0		6244141	0		=			
ANR	6244290	ArrayIndexing	str [ i ]		6244141	0					
ANR	6244291	Identifier	str		6244141	0					
ANR	6244292	Identifier	i		6244141	1					
ANR	6244293	PrimaryExpression	0		6244141	1					
ANR	6244294	ExpressionStatement	s = r_stack_new ( 5 )	430:1:8764:8783	6244141	7	True				
ANR	6244295	AssignmentExpression	s = r_stack_new ( 5 )		6244141	0		=			
ANR	6244296	Identifier	s		6244141	0					
ANR	6244297	CallExpression	r_stack_new ( 5 )		6244141	1					
ANR	6244298	Callee	r_stack_new		6244141	0					
ANR	6244299	Identifier	r_stack_new		6244141	0					
ANR	6244300	ArgumentList	5		6244141	1					
ANR	6244301	Argument	5		6244141	0					
ANR	6244302	PrimaryExpression	5		6244141	0					
ANR	6244303	ForStatement	"for ( i = 1 , p = str ; * p ; p ++ )"		6244141	8					
ANR	6244304	ForInit	"i = 1 , p = str ;"	431:6:8812:8826	6244141	0	True				
ANR	6244305	Expression	"i = 1 , p = str"		6244141	0					
ANR	6244306	AssignmentExpression	i = 1		6244141	0		=			
ANR	6244307	Identifier	i		6244141	0					
ANR	6244308	PrimaryExpression	1		6244141	1					
ANR	6244309	AssignmentExpression	p = str		6244141	1		=			
ANR	6244310	Identifier	p		6244141	0					
ANR	6244311	Identifier	str		6244141	1					
ANR	6244312	Condition	* p	431:22:8828:8829	6244141	1	True				
ANR	6244313	UnaryOperationExpression	* p		6244141	0					
ANR	6244314	UnaryOperator	*		6244141	0					
ANR	6244315	Identifier	p		6244141	1					
ANR	6244316	PostIncDecOperationExpression	p ++	431:26:8832:8834	6244141	2	True				
ANR	6244317	Identifier	p		6244141	0					
ANR	6244318	IncDec	++		6244141	1					
ANR	6244319	CompoundStatement		22:31:448:448	6244141	3					
ANR	6244320	ExpressionStatement	q = p - 1	432:2:8841:8850	6244141	0	True				
ANR	6244321	AssignmentExpression	q = p - 1		6244141	0		=			
ANR	6244322	Identifier	q		6244141	0					
ANR	6244323	AdditiveExpression	p - 1		6244141	1		-			
ANR	6244324	Identifier	p		6244141	0					
ANR	6244325	PrimaryExpression	1		6244141	1					
ANR	6244326	IfStatement	if ( p > str && ( * q == '\\\\' ) )		6244141	1					
ANR	6244327	Condition	p > str && ( * q == '\\\\' )	433:6:8858:8880	6244141	0	True				
ANR	6244328	AndExpression	p > str && ( * q == '\\\\' )		6244141	0		&&			
ANR	6244329	RelationalExpression	p > str		6244141	0		>			
ANR	6244330	Identifier	p		6244141	0					
ANR	6244331	Identifier	str		6244141	1					
ANR	6244332	EqualityExpression	* q == '\\\\'		6244141	1		==			
ANR	6244333	UnaryOperationExpression	* q		6244141	0					
ANR	6244334	UnaryOperator	*		6244141	0					
ANR	6244335	Identifier	q		6244141	1					
ANR	6244336	PrimaryExpression	'\\\\'		6244141	1					
ANR	6244337	CompoundStatement		24:31:494:494	6244141	1					
ANR	6244338	ExpressionStatement	"memmove ( q , p , strlen ( p ) + 1 )"	434:3:8888:8918	6244141	0	True				
ANR	6244339	CallExpression	"memmove ( q , p , strlen ( p ) + 1 )"		6244141	0					
ANR	6244340	Callee	memmove		6244141	0					
ANR	6244341	Identifier	memmove		6244141	0					
ANR	6244342	ArgumentList	q		6244141	1					
ANR	6244343	Argument	q		6244141	0					
ANR	6244344	Identifier	q		6244141	0					
ANR	6244345	Argument	p		6244141	1					
ANR	6244346	Identifier	p		6244141	0					
ANR	6244347	Argument	strlen ( p ) + 1		6244141	2					
ANR	6244348	AdditiveExpression	strlen ( p ) + 1		6244141	0		+			
ANR	6244349	CallExpression	strlen ( p )		6244141	0					
ANR	6244350	Callee	strlen		6244141	0					
ANR	6244351	Identifier	strlen		6244141	0					
ANR	6244352	ArgumentList	p		6244141	1					
ANR	6244353	Argument	p		6244141	0					
ANR	6244354	Identifier	p		6244141	0					
ANR	6244355	PrimaryExpression	1		6244141	1					
ANR	6244356	ExpressionStatement	p --	435:3:8923:8926	6244141	1	True				
ANR	6244357	PostIncDecOperationExpression	p --		6244141	0					
ANR	6244358	Identifier	p		6244141	0					
ANR	6244359	IncDec	--		6244141	1					
ANR	6244360	ContinueStatement	continue ;	436:3:8931:8939	6244141	2	True				
ANR	6244361	SwitchStatement	switch ( * p )		6244141	2					
ANR	6244362	Condition	* p	438:10:8955:8956	6244141	0	True				
ANR	6244363	UnaryOperationExpression	* p		6244141	0					
ANR	6244364	UnaryOperator	*		6244141	0					
ANR	6244365	Identifier	p		6244141	1					
ANR	6244366	CompoundStatement		29:14:570:570	6244141	1					
ANR	6244367	Label	case '(' :	439:2:8963:8971	6244141	0	True				
ANR	6244368	Label	case '{' :	440:2:8975:8983	6244141	1	True				
ANR	6244369	Label	case '[' :	441:2:8987:8995	6244141	2	True				
ANR	6244370	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	442:3:9000:9027	6244141	3	True				
ANR	6244371	CallExpression	"r_stack_push ( s , ( void * ) p )"		6244141	0					
ANR	6244372	Callee	r_stack_push		6244141	0					
ANR	6244373	Identifier	r_stack_push		6244141	0					
ANR	6244374	ArgumentList	s		6244141	1					
ANR	6244375	Argument	s		6244141	0					
ANR	6244376	Identifier	s		6244141	0					
ANR	6244377	Argument	( void * ) p		6244141	1					
ANR	6244378	CastExpression	( void * ) p		6244141	0					
ANR	6244379	CastTarget	void *		6244141	0					
ANR	6244380	Identifier	p		6244141	1					
ANR	6244381	ContinueStatement	continue ;	443:3:9032:9040	6244141	4	True				
ANR	6244382	Label	case '\\'' :	444:2:9044:9053	6244141	5	True				
ANR	6244383	Label	"case '""' :"	445:2:9057:9065	6244141	6	True				
ANR	6244384	ExpressionStatement	pop = r_stack_pop ( s )	446:3:9070:9091	6244141	7	True				
ANR	6244385	AssignmentExpression	pop = r_stack_pop ( s )		6244141	0		=			
ANR	6244386	Identifier	pop		6244141	0					
ANR	6244387	CallExpression	r_stack_pop ( s )		6244141	1					
ANR	6244388	Callee	r_stack_pop		6244141	0					
ANR	6244389	Identifier	r_stack_pop		6244141	0					
ANR	6244390	ArgumentList	s		6244141	1					
ANR	6244391	Argument	s		6244141	0					
ANR	6244392	Identifier	s		6244141	0					
ANR	6244393	IfStatement	if ( pop && * ( char * ) pop != * p )		6244141	8					
ANR	6244394	Condition	pop && * ( char * ) pop != * p	447:7:9100:9124	6244141	0	True				
ANR	6244395	AndExpression	pop && * ( char * ) pop != * p		6244141	0		&&			
ANR	6244396	Identifier	pop		6244141	0					
ANR	6244397	EqualityExpression	* ( char * ) pop != * p		6244141	1		!=			
ANR	6244398	UnaryOperationExpression	* ( char * ) pop		6244141	0					
ANR	6244399	UnaryOperator	*		6244141	0					
ANR	6244400	CastExpression	( char * ) pop		6244141	1					
ANR	6244401	CastTarget	char *		6244141	0					
ANR	6244402	Identifier	pop		6244141	1					
ANR	6244403	UnaryOperationExpression	* p		6244141	1					
ANR	6244404	UnaryOperator	*		6244141	0					
ANR	6244405	Identifier	p		6244141	1					
ANR	6244406	CompoundStatement		38:34:738:738	6244141	1					
ANR	6244407	ExpressionStatement	"r_stack_push ( s , pop )"	448:4:9133:9154	6244141	0	True				
ANR	6244408	CallExpression	"r_stack_push ( s , pop )"		6244141	0					
ANR	6244409	Callee	r_stack_push		6244141	0					
ANR	6244410	Identifier	r_stack_push		6244141	0					
ANR	6244411	ArgumentList	s		6244141	1					
ANR	6244412	Argument	s		6244141	0					
ANR	6244413	Identifier	s		6244141	0					
ANR	6244414	Argument	pop		6244141	1					
ANR	6244415	Identifier	pop		6244141	0					
ANR	6244416	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	449:4:9160:9187	6244141	1	True				
ANR	6244417	CallExpression	"r_stack_push ( s , ( void * ) p )"		6244141	0					
ANR	6244418	Callee	r_stack_push		6244141	0					
ANR	6244419	Identifier	r_stack_push		6244141	0					
ANR	6244420	ArgumentList	s		6244141	1					
ANR	6244421	Argument	s		6244141	0					
ANR	6244422	Identifier	s		6244141	0					
ANR	6244423	Argument	( void * ) p		6244141	1					
ANR	6244424	CastExpression	( void * ) p		6244141	0					
ANR	6244425	CastTarget	void *		6244141	0					
ANR	6244426	Identifier	p		6244141	1					
ANR	6244427	ElseStatement	else		6244141	0					
ANR	6244428	IfStatement	if ( ! pop )		6244141	0					
ANR	6244429	Condition	! pop	450:14:9203:9206	6244141	0	True				
ANR	6244430	UnaryOperationExpression	! pop		6244141	0					
ANR	6244431	UnaryOperator	!		6244141	0					
ANR	6244432	Identifier	pop		6244141	1					
ANR	6244433	CompoundStatement		41:20:820:820	6244141	1					
ANR	6244434	ExpressionStatement	"r_stack_push ( s , ( void * ) p )"	451:4:9215:9242	6244141	0	True				
ANR	6244435	CallExpression	"r_stack_push ( s , ( void * ) p )"		6244141	0					
ANR	6244436	Callee	r_stack_push		6244141	0					
ANR	6244437	Identifier	r_stack_push		6244141	0					
ANR	6244438	ArgumentList	s		6244141	1					
ANR	6244439	Argument	s		6244141	0					
ANR	6244440	Identifier	s		6244141	0					
ANR	6244441	Argument	( void * ) p		6244141	1					
ANR	6244442	CastExpression	( void * ) p		6244141	0					
ANR	6244443	CastTarget	void *		6244141	0					
ANR	6244444	Identifier	p		6244141	1					
ANR	6244445	ContinueStatement	continue ;	453:3:9252:9260	6244141	9	True				
ANR	6244446	Label	case ')' :	454:2:9264:9272	6244141	10	True				
ANR	6244447	Label	case '}' :	455:2:9276:9284	6244141	11	True				
ANR	6244448	Label	case ']' :	456:2:9288:9296	6244141	12	True				
ANR	6244449	ExpressionStatement	pop = r_stack_pop ( s )	457:3:9301:9322	6244141	13	True				
ANR	6244450	AssignmentExpression	pop = r_stack_pop ( s )		6244141	0		=			
ANR	6244451	Identifier	pop		6244141	0					
ANR	6244452	CallExpression	r_stack_pop ( s )		6244141	1					
ANR	6244453	Callee	r_stack_pop		6244141	0					
ANR	6244454	Identifier	r_stack_pop		6244141	0					
ANR	6244455	ArgumentList	s		6244141	1					
ANR	6244456	Argument	s		6244141	0					
ANR	6244457	Identifier	s		6244141	0					
ANR	6244458	IfStatement	if ( pop )		6244141	14					
ANR	6244459	Condition	pop	458:7:9331:9333	6244141	0	True				
ANR	6244460	Identifier	pop		6244141	0					
ANR	6244461	CompoundStatement		49:12:947:947	6244141	1					
ANR	6244462	IfStatement	if ( ( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' ) )		6244141	0					
ANR	6244463	Condition	( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )	459:8:9346:9465	6244141	0	True				
ANR	6244464	OrExpression	( * ( char * ) pop == '(' && * p == ')' ) || ( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )		6244141	0		||			
ANR	6244465	AndExpression	* ( char * ) pop == '(' && * p == ')'		6244141	0		&&			
ANR	6244466	EqualityExpression	* ( char * ) pop == '('		6244141	0		==			
ANR	6244467	UnaryOperationExpression	* ( char * ) pop		6244141	0					
ANR	6244468	UnaryOperator	*		6244141	0					
ANR	6244469	CastExpression	( char * ) pop		6244141	1					
ANR	6244470	CastTarget	char *		6244141	0					
ANR	6244471	Identifier	pop		6244141	1					
ANR	6244472	PrimaryExpression	'('		6244141	1					
ANR	6244473	EqualityExpression	* p == ')'		6244141	1		==			
ANR	6244474	UnaryOperationExpression	* p		6244141	0					
ANR	6244475	UnaryOperator	*		6244141	0					
ANR	6244476	Identifier	p		6244141	1					
ANR	6244477	PrimaryExpression	')'		6244141	1					
ANR	6244478	OrExpression	( * ( char * ) pop == '{' && * p == '}' ) || ( * ( char * ) pop == '[' && * p == ']' )		6244141	1		||			
ANR	6244479	AndExpression	* ( char * ) pop == '{' && * p == '}'		6244141	0		&&			
ANR	6244480	EqualityExpression	* ( char * ) pop == '{'		6244141	0		==			
ANR	6244481	UnaryOperationExpression	* ( char * ) pop		6244141	0					
ANR	6244482	UnaryOperator	*		6244141	0					
ANR	6244483	CastExpression	( char * ) pop		6244141	1					
ANR	6244484	CastTarget	char *		6244141	0					
ANR	6244485	Identifier	pop		6244141	1					
ANR	6244486	PrimaryExpression	'{'		6244141	1					
ANR	6244487	EqualityExpression	* p == '}'		6244141	1		==			
ANR	6244488	UnaryOperationExpression	* p		6244141	0					
ANR	6244489	UnaryOperator	*		6244141	0					
ANR	6244490	Identifier	p		6244141	1					
ANR	6244491	PrimaryExpression	'}'		6244141	1					
ANR	6244492	AndExpression	* ( char * ) pop == '[' && * p == ']'		6244141	1		&&			
ANR	6244493	EqualityExpression	* ( char * ) pop == '['		6244141	0		==			
ANR	6244494	UnaryOperationExpression	* ( char * ) pop		6244141	0					
ANR	6244495	UnaryOperator	*		6244141	0					
ANR	6244496	CastExpression	( char * ) pop		6244141	1					
ANR	6244497	CastTarget	char *		6244141	0					
ANR	6244498	Identifier	pop		6244141	1					
ANR	6244499	PrimaryExpression	'['		6244141	1					
ANR	6244500	EqualityExpression	* p == ']'		6244141	1		==			
ANR	6244501	UnaryOperationExpression	* p		6244141	0					
ANR	6244502	UnaryOperator	*		6244141	0					
ANR	6244503	Identifier	p		6244141	1					
ANR	6244504	PrimaryExpression	']'		6244141	1					
ANR	6244505	CompoundStatement		52:41:1079:1079	6244141	1					
ANR	6244506	ContinueStatement	continue ;	462:5:9475:9483	6244141	0	True				
ANR	6244507	BreakStatement	break ;	465:3:9499:9504	6244141	15	True				
ANR	6244508	Label	case ' ' :	466:2:9508:9516	6244141	16	True				
ANR	6244509	IfStatement	if ( p > str && ! * q )		6244141	17					
ANR	6244510	Condition	p > str && ! * q	467:7:9525:9538	6244141	0	True				
ANR	6244511	AndExpression	p > str && ! * q		6244141	0		&&			
ANR	6244512	RelationalExpression	p > str		6244141	0		>			
ANR	6244513	Identifier	p		6244141	0					
ANR	6244514	Identifier	str		6244141	1					
ANR	6244515	UnaryOperationExpression	! * q		6244141	1					
ANR	6244516	UnaryOperator	!		6244141	0					
ANR	6244517	UnaryOperationExpression	* q		6244141	1					
ANR	6244518	UnaryOperator	*		6244141	0					
ANR	6244519	Identifier	q		6244141	1					
ANR	6244520	CompoundStatement		58:23:1152:1152	6244141	1					
ANR	6244521	ExpressionStatement	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"	468:4:9547:9583	6244141	0	True				
ANR	6244522	CallExpression	"memmove ( p , p + 1 , strlen ( p + 1 ) + 1 )"		6244141	0					
ANR	6244523	Callee	memmove		6244141	0					
ANR	6244524	Identifier	memmove		6244141	0					
ANR	6244525	ArgumentList	p		6244141	1					
ANR	6244526	Argument	p		6244141	0					
ANR	6244527	Identifier	p		6244141	0					
ANR	6244528	Argument	p + 1		6244141	1					
ANR	6244529	AdditiveExpression	p + 1		6244141	0		+			
ANR	6244530	Identifier	p		6244141	0					
ANR	6244531	PrimaryExpression	1		6244141	1					
ANR	6244532	Argument	strlen ( p + 1 ) + 1		6244141	2					
ANR	6244533	AdditiveExpression	strlen ( p + 1 ) + 1		6244141	0		+			
ANR	6244534	CallExpression	strlen ( p + 1 )		6244141	0					
ANR	6244535	Callee	strlen		6244141	0					
ANR	6244536	Identifier	strlen		6244141	0					
ANR	6244537	ArgumentList	p + 1		6244141	1					
ANR	6244538	Argument	p + 1		6244141	0					
ANR	6244539	AdditiveExpression	p + 1		6244141	0		+			
ANR	6244540	Identifier	p		6244141	0					
ANR	6244541	PrimaryExpression	1		6244141	1					
ANR	6244542	PrimaryExpression	1		6244141	1					
ANR	6244543	IfStatement	if ( * q == '\\\\' )		6244141	1					
ANR	6244544	Condition	* q == '\\\\'	469:8:9593:9602	6244141	0	True				
ANR	6244545	EqualityExpression	* q == '\\\\'		6244141	0		==			
ANR	6244546	UnaryOperationExpression	* q		6244141	0					
ANR	6244547	UnaryOperator	*		6244141	0					
ANR	6244548	Identifier	q		6244141	1					
ANR	6244549	PrimaryExpression	'\\\\'		6244141	1					
ANR	6244550	CompoundStatement		60:20:1216:1216	6244141	1					
ANR	6244551	ExpressionStatement	* q = ' '	470:5:9612:9620	6244141	0	True				
ANR	6244552	AssignmentExpression	* q = ' '		6244141	0		=			
ANR	6244553	UnaryOperationExpression	* q		6244141	0					
ANR	6244554	UnaryOperator	*		6244141	0					
ANR	6244555	Identifier	q		6244141	1					
ANR	6244556	PrimaryExpression	' '		6244141	1					
ANR	6244557	ContinueStatement	continue ;	471:5:9627:9635	6244141	1	True				
ANR	6244558	ExpressionStatement	p --	473:4:9647:9650	6244141	2	True				
ANR	6244559	PostIncDecOperationExpression	p --		6244141	0					
ANR	6244560	Identifier	p		6244141	0					
ANR	6244561	IncDec	--		6244141	1					
ANR	6244562	IfStatement	if ( r_stack_is_empty ( s ) )		6244141	18					
ANR	6244563	Condition	r_stack_is_empty ( s )	475:7:9664:9683	6244141	0	True				
ANR	6244564	CallExpression	r_stack_is_empty ( s )		6244141	0					
ANR	6244565	Callee	r_stack_is_empty		6244141	0					
ANR	6244566	Identifier	r_stack_is_empty		6244141	0					
ANR	6244567	ArgumentList	s		6244141	1					
ANR	6244568	Argument	s		6244141	0					
ANR	6244569	Identifier	s		6244141	0					
ANR	6244570	CompoundStatement		66:29:1297:1297	6244141	1					
ANR	6244571	ExpressionStatement	i ++	476:4:9692:9695	6244141	0	True				
ANR	6244572	PostIncDecOperationExpression	i ++		6244141	0					
ANR	6244573	Identifier	i		6244141	0					
ANR	6244574	IncDec	++		6244141	1					
ANR	6244575	ExpressionStatement	* p = '\\0'	477:4:9701:9710	6244141	1	True				
ANR	6244576	AssignmentExpression	* p = '\\0'		6244141	0		=			
ANR	6244577	UnaryOperationExpression	* p		6244141	0					
ANR	6244578	UnaryOperator	*		6244141	0					
ANR	6244579	Identifier	p		6244141	1					
ANR	6244580	PrimaryExpression	'\\0'		6244141	1					
ANR	6244581	Label	default :	479:2:9719:9726	6244141	19	True				
ANR	6244582	Identifier	default		6244141	0					
ANR	6244583	BreakStatement	break ;	480:3:9731:9736	6244141	20	True				
ANR	6244584	ExpressionStatement	r_stack_free ( s )	483:1:9746:9762	6244141	9	True				
ANR	6244585	CallExpression	r_stack_free ( s )		6244141	0					
ANR	6244586	Callee	r_stack_free		6244141	0					
ANR	6244587	Identifier	r_stack_free		6244141	0					
ANR	6244588	ArgumentList	s		6244141	1					
ANR	6244589	Argument	s		6244141	0					
ANR	6244590	Identifier	s		6244141	0					
ANR	6244591	ReturnStatement	return i ;	484:1:9765:9773	6244141	10	True				
ANR	6244592	Identifier	i		6244141	0					
ANR	6244593	ReturnType	R_API int		6244141	1					
ANR	6244594	Identifier	r_str_word_set0_stack		6244141	2					
ANR	6244595	ParameterList	char * str		6244141	3					
ANR	6244596	Parameter	char * str	410:32:8377:8385	6244141	0	True				
ANR	6244597	ParameterType	char *		6244141	0					
ANR	6244598	Identifier	str		6244141	1					
ANR	6244599	CFGEntryNode	ENTRY		6244141		True				
ANR	6244600	CFGExitNode	EXIT		6244141		True				
ANR	6244601	Symbol	r_stack_new		6244141						
ANR	6244602	Symbol	i		6244141						
ANR	6244603	Symbol	* ( char * ) pop		6244141						
ANR	6244604	Symbol	str		6244141						
ANR	6244605	Symbol	p		6244141						
ANR	6244606	Symbol	pop		6244141						
ANR	6244607	Symbol	q		6244141						
ANR	6244608	Symbol	strlen		6244141						
ANR	6244609	Symbol	s		6244141						
ANR	6244610	Symbol	* i		6244141						
ANR	6244611	Symbol	r_stack_pop		6244141						
ANR	6244612	Symbol	* p		6244141						
ANR	6244613	Symbol	* str		6244141						
ANR	6244614	Symbol	* q		6244141						
ANR	6244615	Symbol	* pop		6244141						
ANR	6244616	Symbol	r_stack_is_empty		6244141						
ANR	6244617	Function	r_str_word_get0set	487:0:9778:10722							
ANR	6244618	FunctionDef	"r_str_word_get0set (char * stra , int stralen , int idx , const char * newstr , int * newlen)"		6244617	0					
ANR	6244619	CompoundStatement		487:98:9876:10722	6244617	0					
ANR	6244620	IdentifierDeclStatement	char * p = NULL ;	488:1:9879:9893	6244617	0	True				
ANR	6244621	IdentifierDecl	* p = NULL		6244617	0					
ANR	6244622	IdentifierDeclType	char *		6244617	0					
ANR	6244623	Identifier	p		6244617	1					
ANR	6244624	AssignmentExpression	* p = NULL		6244617	2		=			
ANR	6244625	Identifier	NULL		6244617	0					
ANR	6244626	Identifier	NULL		6244617	1					
ANR	6244627	IdentifierDeclStatement	char * out ;	489:1:9896:9905	6244617	1	True				
ANR	6244628	IdentifierDecl	* out		6244617	0					
ANR	6244629	IdentifierDeclType	char *		6244617	0					
ANR	6244630	Identifier	out		6244617	1					
ANR	6244631	IdentifierDeclStatement	"int alen , blen , nlen ;"	490:1:9908:9928	6244617	2	True				
ANR	6244632	IdentifierDecl	alen		6244617	0					
ANR	6244633	IdentifierDeclType	int		6244617	0					
ANR	6244634	Identifier	alen		6244617	1					
ANR	6244635	IdentifierDecl	blen		6244617	1					
ANR	6244636	IdentifierDeclType	int		6244617	0					
ANR	6244637	Identifier	blen		6244617	1					
ANR	6244638	IdentifierDecl	nlen		6244617	2					
ANR	6244639	IdentifierDeclType	int		6244617	0					
ANR	6244640	Identifier	nlen		6244617	1					
ANR	6244641	IfStatement	if ( ! stra && ! newstr )		6244617	3					
ANR	6244642	Condition	! stra && ! newstr	491:5:9935:9950	6244617	0	True				
ANR	6244643	AndExpression	! stra && ! newstr		6244617	0		&&			
ANR	6244644	UnaryOperationExpression	! stra		6244617	0					
ANR	6244645	UnaryOperator	!		6244617	0					
ANR	6244646	Identifier	stra		6244617	1					
ANR	6244647	UnaryOperationExpression	! newstr		6244617	1					
ANR	6244648	UnaryOperator	!		6244617	0					
ANR	6244649	Identifier	newstr		6244617	1					
ANR	6244650	CompoundStatement		5:23:76:76	6244617	1					
ANR	6244651	ReturnStatement	return NULL ;	492:2:9957:9968	6244617	0	True				
ANR	6244652	Identifier	NULL		6244617	0					
ANR	6244653	IfStatement	if ( stra )		6244617	4					
ANR	6244654	Condition	stra	494:5:9978:9981	6244617	0	True				
ANR	6244655	Identifier	stra		6244617	0					
ANR	6244656	CompoundStatement		8:11:107:107	6244617	1					
ANR	6244657	ExpressionStatement	"p = ( char * ) r_str_word_get0 ( stra , idx )"	495:2:9988:10027	6244617	0	True				
ANR	6244658	AssignmentExpression	"p = ( char * ) r_str_word_get0 ( stra , idx )"		6244617	0		=			
ANR	6244659	Identifier	p		6244617	0					
ANR	6244660	CastExpression	"( char * ) r_str_word_get0 ( stra , idx )"		6244617	1					
ANR	6244661	CastTarget	char *		6244617	0					
ANR	6244662	CallExpression	"r_str_word_get0 ( stra , idx )"		6244617	1					
ANR	6244663	Callee	r_str_word_get0		6244617	0					
ANR	6244664	Identifier	r_str_word_get0		6244617	0					
ANR	6244665	ArgumentList	stra		6244617	1					
ANR	6244666	Argument	stra		6244617	0					
ANR	6244667	Identifier	stra		6244617	0					
ANR	6244668	Argument	idx		6244617	1					
ANR	6244669	Identifier	idx		6244617	0					
ANR	6244670	IfStatement	if ( ! p )		6244617	5					
ANR	6244671	Condition	! p	497:5:10037:10038	6244617	0	True				
ANR	6244672	UnaryOperationExpression	! p		6244617	0					
ANR	6244673	UnaryOperator	!		6244617	0					
ANR	6244674	Identifier	p		6244617	1					
ANR	6244675	CompoundStatement		12:2:168:195	6244617	1					
ANR	6244676	IdentifierDeclStatement	int nslen = strlen ( newstr ) ;	498:2:10045:10072	6244617	0	True				
ANR	6244677	IdentifierDecl	nslen = strlen ( newstr )		6244617	0					
ANR	6244678	IdentifierDeclType	int		6244617	0					
ANR	6244679	Identifier	nslen		6244617	1					
ANR	6244680	AssignmentExpression	nslen = strlen ( newstr )		6244617	2		=			
ANR	6244681	Identifier	nslen		6244617	0					
ANR	6244682	CallExpression	strlen ( newstr )		6244617	1					
ANR	6244683	Callee	strlen		6244617	0					
ANR	6244684	Identifier	strlen		6244617	0					
ANR	6244685	ArgumentList	newstr		6244617	1					
ANR	6244686	Argument	newstr		6244617	0					
ANR	6244687	Identifier	newstr		6244617	0					
ANR	6244688	ExpressionStatement	out = malloc ( nslen + 1 )	499:2:10076:10100	6244617	1	True				
ANR	6244689	AssignmentExpression	out = malloc ( nslen + 1 )		6244617	0		=			
ANR	6244690	Identifier	out		6244617	0					
ANR	6244691	CallExpression	malloc ( nslen + 1 )		6244617	1					
ANR	6244692	Callee	malloc		6244617	0					
ANR	6244693	Identifier	malloc		6244617	0					
ANR	6244694	ArgumentList	nslen + 1		6244617	1					
ANR	6244695	Argument	nslen + 1		6244617	0					
ANR	6244696	AdditiveExpression	nslen + 1		6244617	0		+			
ANR	6244697	Identifier	nslen		6244617	0					
ANR	6244698	PrimaryExpression	1		6244617	1					
ANR	6244699	IfStatement	if ( ! out )		6244617	2					
ANR	6244700	Condition	! out	500:6:10108:10111	6244617	0	True				
ANR	6244701	UnaryOperationExpression	! out		6244617	0					
ANR	6244702	UnaryOperator	!		6244617	0					
ANR	6244703	Identifier	out		6244617	1					
ANR	6244704	CompoundStatement		14:12:237:237	6244617	1					
ANR	6244705	ReturnStatement	return NULL ;	501:3:10119:10130	6244617	0	True				
ANR	6244706	Identifier	NULL		6244617	0					
ANR	6244707	ExpressionStatement	"strcpy ( out , newstr )"	503:2:10138:10158	6244617	3	True				
ANR	6244708	CallExpression	"strcpy ( out , newstr )"		6244617	0					
ANR	6244709	Callee	strcpy		6244617	0					
ANR	6244710	Identifier	strcpy		6244617	0					
ANR	6244711	ArgumentList	out		6244617	1					
ANR	6244712	Argument	out		6244617	0					
ANR	6244713	Identifier	out		6244617	0					
ANR	6244714	Argument	newstr		6244617	1					
ANR	6244715	Identifier	newstr		6244617	0					
ANR	6244716	ExpressionStatement	out [ nslen ] = 0	504:2:10162:10176	6244617	4	True				
ANR	6244717	AssignmentExpression	out [ nslen ] = 0		6244617	0		=			
ANR	6244718	ArrayIndexing	out [ nslen ]		6244617	0					
ANR	6244719	Identifier	out		6244617	0					
ANR	6244720	Identifier	nslen		6244617	1					
ANR	6244721	PrimaryExpression	0		6244617	1					
ANR	6244722	IfStatement	if ( newlen )		6244617	5					
ANR	6244723	Condition	newlen	505:6:10184:10189	6244617	0	True				
ANR	6244724	Identifier	newlen		6244617	0					
ANR	6244725	CompoundStatement		19:14:315:315	6244617	1					
ANR	6244726	ExpressionStatement	* newlen = nslen	506:3:10197:10212	6244617	0	True				
ANR	6244727	AssignmentExpression	* newlen = nslen		6244617	0		=			
ANR	6244728	UnaryOperationExpression	* newlen		6244617	0					
ANR	6244729	UnaryOperator	*		6244617	0					
ANR	6244730	Identifier	newlen		6244617	1					
ANR	6244731	Identifier	nslen		6244617	1					
ANR	6244732	ReturnStatement	return out ;	508:2:10220:10230	6244617	6	True				
ANR	6244733	Identifier	out		6244617	0					
ANR	6244734	ExpressionStatement	alen = ( size_t ) ( p - stra )	510:1:10236:10261	6244617	6	True				
ANR	6244735	AssignmentExpression	alen = ( size_t ) ( p - stra )		6244617	0		=			
ANR	6244736	Identifier	alen		6244617	0					
ANR	6244737	CastExpression	( size_t ) ( p - stra )		6244617	1					
ANR	6244738	CastTarget	size_t		6244617	0					
ANR	6244739	AdditiveExpression	p - stra		6244617	1		-			
ANR	6244740	Identifier	p		6244617	0					
ANR	6244741	Identifier	stra		6244617	1					
ANR	6244742	ExpressionStatement	blen = stralen - ( ( alen + strlen ( p ) ) + 1 )	511:1:10264:10306	6244617	7	True				
ANR	6244743	AssignmentExpression	blen = stralen - ( ( alen + strlen ( p ) ) + 1 )		6244617	0		=			
ANR	6244744	Identifier	blen		6244617	0					
ANR	6244745	AdditiveExpression	stralen - ( ( alen + strlen ( p ) ) + 1 )		6244617	1		-			
ANR	6244746	Identifier	stralen		6244617	0					
ANR	6244747	AdditiveExpression	( alen + strlen ( p ) ) + 1		6244617	1		+			
ANR	6244748	AdditiveExpression	alen + strlen ( p )		6244617	0		+			
ANR	6244749	Identifier	alen		6244617	0					
ANR	6244750	CallExpression	strlen ( p )		6244617	1					
ANR	6244751	Callee	strlen		6244617	0					
ANR	6244752	Identifier	strlen		6244617	0					
ANR	6244753	ArgumentList	p		6244617	1					
ANR	6244754	Argument	p		6244617	0					
ANR	6244755	Identifier	p		6244617	0					
ANR	6244756	PrimaryExpression	1		6244617	1					
ANR	6244757	IfStatement	if ( blen < 0 )		6244617	8					
ANR	6244758	Condition	blen < 0	512:5:10313:10320	6244617	0	True				
ANR	6244759	RelationalExpression	blen < 0		6244617	0		<			
ANR	6244760	Identifier	blen		6244617	0					
ANR	6244761	PrimaryExpression	0		6244617	1					
ANR	6244762	CompoundStatement		26:15:446:446	6244617	1					
ANR	6244763	ExpressionStatement	blen = 0	513:2:10327:10335	6244617	0	True				
ANR	6244764	AssignmentExpression	blen = 0		6244617	0		=			
ANR	6244765	Identifier	blen		6244617	0					
ANR	6244766	PrimaryExpression	0		6244617	1					
ANR	6244767	ExpressionStatement	nlen = alen + blen + strlen ( newstr )	515:1:10341:10377	6244617	9	True				
ANR	6244768	AssignmentExpression	nlen = alen + blen + strlen ( newstr )		6244617	0		=			
ANR	6244769	Identifier	nlen		6244617	0					
ANR	6244770	AdditiveExpression	alen + blen + strlen ( newstr )		6244617	1		+			
ANR	6244771	Identifier	alen		6244617	0					
ANR	6244772	AdditiveExpression	blen + strlen ( newstr )		6244617	1		+			
ANR	6244773	Identifier	blen		6244617	0					
ANR	6244774	CallExpression	strlen ( newstr )		6244617	1					
ANR	6244775	Callee	strlen		6244617	0					
ANR	6244776	Identifier	strlen		6244617	0					
ANR	6244777	ArgumentList	newstr		6244617	1					
ANR	6244778	Argument	newstr		6244617	0					
ANR	6244779	Identifier	newstr		6244617	0					
ANR	6244780	ExpressionStatement	out = malloc ( nlen + 2 )	516:1:10380:10403	6244617	10	True				
ANR	6244781	AssignmentExpression	out = malloc ( nlen + 2 )		6244617	0		=			
ANR	6244782	Identifier	out		6244617	0					
ANR	6244783	CallExpression	malloc ( nlen + 2 )		6244617	1					
ANR	6244784	Callee	malloc		6244617	0					
ANR	6244785	Identifier	malloc		6244617	0					
ANR	6244786	ArgumentList	nlen + 2		6244617	1					
ANR	6244787	Argument	nlen + 2		6244617	0					
ANR	6244788	AdditiveExpression	nlen + 2		6244617	0		+			
ANR	6244789	Identifier	nlen		6244617	0					
ANR	6244790	PrimaryExpression	2		6244617	1					
ANR	6244791	IfStatement	if ( ! out )		6244617	11					
ANR	6244792	Condition	! out	517:5:10410:10413	6244617	0	True				
ANR	6244793	UnaryOperationExpression	! out		6244617	0					
ANR	6244794	UnaryOperator	!		6244617	0					
ANR	6244795	Identifier	out		6244617	1					
ANR	6244796	CompoundStatement		31:11:539:539	6244617	1					
ANR	6244797	ReturnStatement	return NULL ;	518:2:10420:10431	6244617	0	True				
ANR	6244798	Identifier	NULL		6244617	0					
ANR	6244799	IfStatement	if ( alen > 0 )		6244617	12					
ANR	6244800	Condition	alen > 0	520:5:10441:10448	6244617	0	True				
ANR	6244801	RelationalExpression	alen > 0		6244617	0		>			
ANR	6244802	Identifier	alen		6244617	0					
ANR	6244803	PrimaryExpression	0		6244617	1					
ANR	6244804	CompoundStatement		34:15:574:574	6244617	1					
ANR	6244805	ExpressionStatement	"memcpy ( out , stra , alen )"	521:2:10455:10479	6244617	0	True				
ANR	6244806	CallExpression	"memcpy ( out , stra , alen )"		6244617	0					
ANR	6244807	Callee	memcpy		6244617	0					
ANR	6244808	Identifier	memcpy		6244617	0					
ANR	6244809	ArgumentList	out		6244617	1					
ANR	6244810	Argument	out		6244617	0					
ANR	6244811	Identifier	out		6244617	0					
ANR	6244812	Argument	stra		6244617	1					
ANR	6244813	Identifier	stra		6244617	0					
ANR	6244814	Argument	alen		6244617	2					
ANR	6244815	Identifier	alen		6244617	0					
ANR	6244816	ExpressionStatement	"memcpy ( out + alen , newstr , strlen ( newstr ) + 1 )"	523:1:10485:10533	6244617	13	True				
ANR	6244817	CallExpression	"memcpy ( out + alen , newstr , strlen ( newstr ) + 1 )"		6244617	0					
ANR	6244818	Callee	memcpy		6244617	0					
ANR	6244819	Identifier	memcpy		6244617	0					
ANR	6244820	ArgumentList	out + alen		6244617	1					
ANR	6244821	Argument	out + alen		6244617	0					
ANR	6244822	AdditiveExpression	out + alen		6244617	0		+			
ANR	6244823	Identifier	out		6244617	0					
ANR	6244824	Identifier	alen		6244617	1					
ANR	6244825	Argument	newstr		6244617	1					
ANR	6244826	Identifier	newstr		6244617	0					
ANR	6244827	Argument	strlen ( newstr ) + 1		6244617	2					
ANR	6244828	AdditiveExpression	strlen ( newstr ) + 1		6244617	0		+			
ANR	6244829	CallExpression	strlen ( newstr )		6244617	0					
ANR	6244830	Callee	strlen		6244617	0					
ANR	6244831	Identifier	strlen		6244617	0					
ANR	6244832	ArgumentList	newstr		6244617	1					
ANR	6244833	Argument	newstr		6244617	0					
ANR	6244834	Identifier	newstr		6244617	0					
ANR	6244835	PrimaryExpression	1		6244617	1					
ANR	6244836	IfStatement	if ( blen > 0 )		6244617	14					
ANR	6244837	Condition	blen > 0	524:5:10540:10547	6244617	0	True				
ANR	6244838	RelationalExpression	blen > 0		6244617	0		>			
ANR	6244839	Identifier	blen		6244617	0					
ANR	6244840	PrimaryExpression	0		6244617	1					
ANR	6244841	CompoundStatement		38:15:673:673	6244617	1					
ANR	6244842	ExpressionStatement	"memcpy ( out + alen + strlen ( newstr ) + 1 , p + strlen ( p ) + 1 , blen + 1 )"	525:2:10554:10625	6244617	0	True				
ANR	6244843	CallExpression	"memcpy ( out + alen + strlen ( newstr ) + 1 , p + strlen ( p ) + 1 , blen + 1 )"		6244617	0					
ANR	6244844	Callee	memcpy		6244617	0					
ANR	6244845	Identifier	memcpy		6244617	0					
ANR	6244846	ArgumentList	out + alen + strlen ( newstr ) + 1		6244617	1					
ANR	6244847	Argument	out + alen + strlen ( newstr ) + 1		6244617	0					
ANR	6244848	AdditiveExpression	out + alen + strlen ( newstr ) + 1		6244617	0		+			
ANR	6244849	Identifier	out		6244617	0					
ANR	6244850	AdditiveExpression	alen + strlen ( newstr ) + 1		6244617	1		+			
ANR	6244851	Identifier	alen		6244617	0					
ANR	6244852	AdditiveExpression	strlen ( newstr ) + 1		6244617	1		+			
ANR	6244853	CallExpression	strlen ( newstr )		6244617	0					
ANR	6244854	Callee	strlen		6244617	0					
ANR	6244855	Identifier	strlen		6244617	0					
ANR	6244856	ArgumentList	newstr		6244617	1					
ANR	6244857	Argument	newstr		6244617	0					
ANR	6244858	Identifier	newstr		6244617	0					
ANR	6244859	PrimaryExpression	1		6244617	1					
ANR	6244860	Argument	p + strlen ( p ) + 1		6244617	1					
ANR	6244861	AdditiveExpression	p + strlen ( p ) + 1		6244617	0		+			
ANR	6244862	Identifier	p		6244617	0					
ANR	6244863	AdditiveExpression	strlen ( p ) + 1		6244617	1		+			
ANR	6244864	CallExpression	strlen ( p )		6244617	0					
ANR	6244865	Callee	strlen		6244617	0					
ANR	6244866	Identifier	strlen		6244617	0					
ANR	6244867	ArgumentList	p		6244617	1					
ANR	6244868	Argument	p		6244617	0					
ANR	6244869	Identifier	p		6244617	0					
ANR	6244870	PrimaryExpression	1		6244617	1					
ANR	6244871	Argument	blen + 1		6244617	2					
ANR	6244872	AdditiveExpression	blen + 1		6244617	0		+			
ANR	6244873	Identifier	blen		6244617	0					
ANR	6244874	PrimaryExpression	1		6244617	1					
ANR	6244875	ExpressionStatement	out [ nlen + 1 ] = 0	527:1:10631:10648	6244617	15	True				
ANR	6244876	AssignmentExpression	out [ nlen + 1 ] = 0		6244617	0		=			
ANR	6244877	ArrayIndexing	out [ nlen + 1 ]		6244617	0					
ANR	6244878	Identifier	out		6244617	0					
ANR	6244879	AdditiveExpression	nlen + 1		6244617	1		+			
ANR	6244880	Identifier	nlen		6244617	0					
ANR	6244881	PrimaryExpression	1		6244617	1					
ANR	6244882	PrimaryExpression	0		6244617	1					
ANR	6244883	IfStatement	if ( newlen )		6244617	16					
ANR	6244884	Condition	newlen	528:5:10655:10660	6244617	0	True				
ANR	6244885	Identifier	newlen		6244617	0					
ANR	6244886	CompoundStatement		42:13:786:786	6244617	1					
ANR	6244887	ExpressionStatement	* newlen = nlen + ( ( blen == 0 ) ? 1 : 0 )	529:2:10667:10704	6244617	0	True				
ANR	6244888	AssignmentExpression	* newlen = nlen + ( ( blen == 0 ) ? 1 : 0 )		6244617	0		=			
ANR	6244889	UnaryOperationExpression	* newlen		6244617	0					
ANR	6244890	UnaryOperator	*		6244617	0					
ANR	6244891	Identifier	newlen		6244617	1					
ANR	6244892	AdditiveExpression	nlen + ( ( blen == 0 ) ? 1 : 0 )		6244617	1		+			
ANR	6244893	Identifier	nlen		6244617	0					
ANR	6244894	ConditionalExpression	( blen == 0 ) ? 1 : 0		6244617	1					
ANR	6244895	Condition	blen == 0		6244617	0					
ANR	6244896	EqualityExpression	blen == 0		6244617	0		==			
ANR	6244897	Identifier	blen		6244617	0					
ANR	6244898	PrimaryExpression	0		6244617	1					
ANR	6244899	PrimaryExpression	1		6244617	1					
ANR	6244900	PrimaryExpression	0		6244617	2					
ANR	6244901	ReturnStatement	return out ;	531:1:10710:10720	6244617	17	True				
ANR	6244902	Identifier	out		6244617	0					
ANR	6244903	ReturnType	R_API char *		6244617	1					
ANR	6244904	Identifier	r_str_word_get0set		6244617	2					
ANR	6244905	ParameterList	"char * stra , int stralen , int idx , const char * newstr , int * newlen"		6244617	3					
ANR	6244906	Parameter	char * stra	487:31:9809:9818	6244617	0	True				
ANR	6244907	ParameterType	char *		6244617	0					
ANR	6244908	Identifier	stra		6244617	1					
ANR	6244909	Parameter	int stralen	487:43:9821:9831	6244617	1	True				
ANR	6244910	ParameterType	int		6244617	0					
ANR	6244911	Identifier	stralen		6244617	1					
ANR	6244912	Parameter	int idx	487:56:9834:9840	6244617	2	True				
ANR	6244913	ParameterType	int		6244617	0					
ANR	6244914	Identifier	idx		6244617	1					
ANR	6244915	Parameter	const char * newstr	487:65:9843:9860	6244617	3	True				
ANR	6244916	ParameterType	const char *		6244617	0					
ANR	6244917	Identifier	newstr		6244617	1					
ANR	6244918	Parameter	int * newlen	487:85:9863:9873	6244617	4	True				
ANR	6244919	ParameterType	int *		6244617	0					
ANR	6244920	Identifier	newlen		6244617	1					
ANR	6244921	CFGEntryNode	ENTRY		6244617		True				
ANR	6244922	CFGExitNode	EXIT		6244617		True				
ANR	6244923	Symbol	malloc		6244617						
ANR	6244924	Symbol	NULL		6244617						
ANR	6244925	Symbol	stra		6244617						
ANR	6244926	Symbol	newlen		6244617						
ANR	6244927	Symbol	r_str_word_get0		6244617						
ANR	6244928	Symbol	newstr		6244617						
ANR	6244929	Symbol	out		6244617						
ANR	6244930	Symbol	p		6244617						
ANR	6244931	Symbol	strlen		6244617						
ANR	6244932	Symbol	nlen		6244617						
ANR	6244933	Symbol	nslen		6244617						
ANR	6244934	Symbol	stralen		6244617						
ANR	6244935	Symbol	* out		6244617						
ANR	6244936	Symbol	alen		6244617						
ANR	6244937	Symbol	idx		6244617						
ANR	6244938	Symbol	blen		6244617						
ANR	6244939	Symbol	* nslen		6244617						
ANR	6244940	Symbol	* newlen		6244617						
ANR	6244941	Symbol	* nlen		6244617						
ANR	6244942	Function	r_str_word_get0	537:6:10874:11130							
ANR	6244943	FunctionDef	"r_str_word_get0 (const char * str , int idx)"		6244942	0					
ANR	6244944	CompoundStatement		537:60:10928:11130	6244942	0					
ANR	6244945	IdentifierDeclStatement	int i ;	538:1:10931:10936	6244942	0	True				
ANR	6244946	IdentifierDecl	i		6244942	0					
ANR	6244947	IdentifierDeclType	int		6244942	0					
ANR	6244948	Identifier	i		6244942	1					
ANR	6244949	IdentifierDeclStatement	const char * ptr = str ;	539:1:10939:10960	6244942	1	True				
ANR	6244950	IdentifierDecl	* ptr = str		6244942	0					
ANR	6244951	IdentifierDeclType	const char *		6244942	0					
ANR	6244952	Identifier	ptr		6244942	1					
ANR	6244953	AssignmentExpression	* ptr = str		6244942	2		=			
ANR	6244954	Identifier	str		6244942	0					
ANR	6244955	Identifier	str		6244942	1					
ANR	6244956	IfStatement	if ( ! ptr || idx < 0 )		6244942	2					
ANR	6244957	Condition	! ptr || idx < 0	540:5:10967:10981	6244942	0	True				
ANR	6244958	OrExpression	! ptr || idx < 0		6244942	0		||			
ANR	6244959	UnaryOperationExpression	! ptr		6244942	0					
ANR	6244960	UnaryOperator	!		6244942	0					
ANR	6244961	Identifier	ptr		6244942	1					
ANR	6244962	RelationalExpression	idx < 0		6244942	1		<			
ANR	6244963	Identifier	idx		6244942	0					
ANR	6244964	PrimaryExpression	0		6244942	1					
ANR	6244965	CompoundStatement		4:64:97:97	6244942	1					
ANR	6244966	ReturnStatement	return ( char * ) nullstr ;	541:2:11030:11052	6244942	0	True				
ANR	6244967	CastExpression	( char * ) nullstr		6244942	0					
ANR	6244968	CastTarget	char *		6244942	0					
ANR	6244969	Identifier	nullstr		6244942	1					
ANR	6244970	ForStatement	for ( i = 0 ; i != idx ; i ++ )		6244942	3					
ANR	6244971	ForInit	i = 0 ;	543:6:11063:11068	6244942	0	True				
ANR	6244972	AssignmentExpression	i = 0		6244942	0		=			
ANR	6244973	Identifier	i		6244942	0					
ANR	6244974	PrimaryExpression	0		6244942	1					
ANR	6244975	Condition	i != idx	543:13:11070:11077	6244942	1	True				
ANR	6244976	EqualityExpression	i != idx		6244942	0		!=			
ANR	6244977	Identifier	i		6244942	0					
ANR	6244978	Identifier	idx		6244942	1					
ANR	6244979	PostIncDecOperationExpression	i ++	543:23:11080:11082	6244942	2	True				
ANR	6244980	Identifier	i		6244942	0					
ANR	6244981	IncDec	++		6244942	1					
ANR	6244982	CompoundStatement		7:28:156:156	6244942	3					
ANR	6244983	ExpressionStatement	ptr += strlen ( ptr ) + 1	544:2:11089:11112	6244942	0	True				
ANR	6244984	AssignmentExpression	ptr += strlen ( ptr ) + 1		6244942	0		+=			
ANR	6244985	Identifier	ptr		6244942	0					
ANR	6244986	AdditiveExpression	strlen ( ptr ) + 1		6244942	1		+			
ANR	6244987	CallExpression	strlen ( ptr )		6244942	0					
ANR	6244988	Callee	strlen		6244942	0					
ANR	6244989	Identifier	strlen		6244942	0					
ANR	6244990	ArgumentList	ptr		6244942	1					
ANR	6244991	Argument	ptr		6244942	0					
ANR	6244992	Identifier	ptr		6244942	0					
ANR	6244993	PrimaryExpression	1		6244942	1					
ANR	6244994	ReturnStatement	return ptr ;	546:1:11118:11128	6244942	4	True				
ANR	6244995	Identifier	ptr		6244942	0					
ANR	6244996	ReturnType	const char *		6244942	1					
ANR	6244997	Identifier	r_str_word_get0		6244942	2					
ANR	6244998	ParameterList	"const char * str , int idx"		6244942	3					
ANR	6244999	Parameter	const char * str	537:34:10902:10916	6244942	0	True				
ANR	6245000	ParameterType	const char *		6244942	0					
ANR	6245001	Identifier	str		6244942	1					
ANR	6245002	Parameter	int idx	537:51:10919:10925	6244942	1	True				
ANR	6245003	ParameterType	int		6244942	0					
ANR	6245004	Identifier	idx		6244942	1					
ANR	6245005	CFGEntryNode	ENTRY		6244942		True				
ANR	6245006	CFGExitNode	EXIT		6244942		True				
ANR	6245007	Symbol	str		6244942						
ANR	6245008	Symbol	strlen		6244942						
ANR	6245009	Symbol	nullstr		6244942						
ANR	6245010	Symbol	i		6244942						
ANR	6245011	Symbol	idx		6244942						
ANR	6245012	Symbol	ptr		6244942						
ANR	6245013	Function	r_str_char_count	550:0:11208:11375							
ANR	6245014	FunctionDef	"r_str_char_count (const char * string , char ch)"		6245013	0					
ANR	6245015	CompoundStatement		550:56:11264:11375	6245013	0					
ANR	6245016	IdentifierDeclStatement	"int i , count = 0 ;"	551:1:11267:11283	6245013	0	True				
ANR	6245017	IdentifierDecl	i		6245013	0					
ANR	6245018	IdentifierDeclType	int		6245013	0					
ANR	6245019	Identifier	i		6245013	1					
ANR	6245020	IdentifierDecl	count = 0		6245013	1					
ANR	6245021	IdentifierDeclType	int		6245013	0					
ANR	6245022	Identifier	count		6245013	1					
ANR	6245023	AssignmentExpression	count = 0		6245013	2		=			
ANR	6245024	Identifier	count		6245013	0					
ANR	6245025	PrimaryExpression	0		6245013	1					
ANR	6245026	ForStatement	for ( i = 0 ; string [ i ] ; i ++ )		6245013	1					
ANR	6245027	ForInit	i = 0 ;	552:6:11291:11296	6245013	0	True				
ANR	6245028	AssignmentExpression	i = 0		6245013	0		=			
ANR	6245029	Identifier	i		6245013	0					
ANR	6245030	PrimaryExpression	0		6245013	1					
ANR	6245031	Condition	string [ i ]	552:13:11298:11306	6245013	1	True				
ANR	6245032	ArrayIndexing	string [ i ]		6245013	0					
ANR	6245033	Identifier	string		6245013	0					
ANR	6245034	Identifier	i		6245013	1					
ANR	6245035	PostIncDecOperationExpression	i ++	552:24:11309:11311	6245013	2	True				
ANR	6245036	Identifier	i		6245013	0					
ANR	6245037	IncDec	++		6245013	1					
ANR	6245038	CompoundStatement		3:29:49:49	6245013	3					
ANR	6245039	IfStatement	if ( string [ i ] == ch )		6245013	0					
ANR	6245040	Condition	string [ i ] == ch	553:6:11322:11336	6245013	0	True				
ANR	6245041	EqualityExpression	string [ i ] == ch		6245013	0		==			
ANR	6245042	ArrayIndexing	string [ i ]		6245013	0					
ANR	6245043	Identifier	string		6245013	0					
ANR	6245044	Identifier	i		6245013	1					
ANR	6245045	Identifier	ch		6245013	1					
ANR	6245046	CompoundStatement		4:23:74:74	6245013	1					
ANR	6245047	ExpressionStatement	count ++	554:3:11344:11351	6245013	0	True				
ANR	6245048	PostIncDecOperationExpression	count ++		6245013	0					
ANR	6245049	Identifier	count		6245013	0					
ANR	6245050	IncDec	++		6245013	1					
ANR	6245051	ReturnStatement	return count ;	557:1:11361:11373	6245013	2	True				
ANR	6245052	Identifier	count		6245013	0					
ANR	6245053	ReturnType	R_API int		6245013	1					
ANR	6245054	Identifier	r_str_char_count		6245013	2					
ANR	6245055	ParameterList	"const char * string , char ch"		6245013	3					
ANR	6245056	Parameter	const char * string	550:27:11235:11252	6245013	0	True				
ANR	6245057	ParameterType	const char *		6245013	0					
ANR	6245058	Identifier	string		6245013	1					
ANR	6245059	Parameter	char ch	550:47:11255:11261	6245013	1	True				
ANR	6245060	ParameterType	char		6245013	0					
ANR	6245061	Identifier	ch		6245013	1					
ANR	6245062	CFGEntryNode	ENTRY		6245013		True				
ANR	6245063	CFGExitNode	EXIT		6245013		True				
ANR	6245064	Symbol	* i		6245013						
ANR	6245065	Symbol	string		6245013						
ANR	6245066	Symbol	ch		6245013						
ANR	6245067	Symbol	count		6245013						
ANR	6245068	Symbol	i		6245013						
ANR	6245069	Symbol	* string		6245013						
ANR	6245070	Function	r_str_word_count	562:0:11536:11876							
ANR	6245071	FunctionDef	r_str_word_count (const char * string)		6245070	0					
ANR	6245072	CompoundStatement		562:47:11583:11876	6245070	0					
ANR	6245073	IdentifierDeclStatement	"const char * text , * tmp ;"	563:1:11586:11608	6245070	0	True				
ANR	6245074	IdentifierDecl	* text		6245070	0					
ANR	6245075	IdentifierDeclType	const char *		6245070	0					
ANR	6245076	Identifier	text		6245070	1					
ANR	6245077	IdentifierDecl	* tmp		6245070	1					
ANR	6245078	IdentifierDeclType	const char *		6245070	0					
ANR	6245079	Identifier	tmp		6245070	1					
ANR	6245080	IdentifierDeclStatement	int word ;	564:1:11611:11619	6245070	1	True				
ANR	6245081	IdentifierDecl	word		6245070	0					
ANR	6245082	IdentifierDeclType	int		6245070	0					
ANR	6245083	Identifier	word		6245070	1					
ANR	6245084	ForStatement	for ( text = tmp = string ; * text && IS_SEPARATOR ( * text ) ; text ++ )		6245070	2					
ANR	6245085	ForInit	text = tmp = string ;	566:6:11628:11647	6245070	0	True				
ANR	6245086	AssignmentExpression	text = tmp = string		6245070	0		=			
ANR	6245087	Identifier	text		6245070	0					
ANR	6245088	AssignmentExpression	tmp = string		6245070	1		=			
ANR	6245089	Identifier	tmp		6245070	0					
ANR	6245090	Identifier	string		6245070	1					
ANR	6245091	Condition	* text && IS_SEPARATOR ( * text )	566:27:11649:11677	6245070	1	True				
ANR	6245092	AndExpression	* text && IS_SEPARATOR ( * text )		6245070	0		&&			
ANR	6245093	UnaryOperationExpression	* text		6245070	0					
ANR	6245094	UnaryOperator	*		6245070	0					
ANR	6245095	Identifier	text		6245070	1					
ANR	6245096	CallExpression	IS_SEPARATOR ( * text )		6245070	1					
ANR	6245097	Callee	IS_SEPARATOR		6245070	0					
ANR	6245098	Identifier	IS_SEPARATOR		6245070	0					
ANR	6245099	ArgumentList	* text		6245070	1					
ANR	6245100	Argument	* text		6245070	0					
ANR	6245101	UnaryOperationExpression	* text		6245070	0					
ANR	6245102	UnaryOperator	*		6245070	0					
ANR	6245103	Identifier	text		6245070	1					
ANR	6245104	PostIncDecOperationExpression	text ++	566:58:11680:11685	6245070	2	True				
ANR	6245105	Identifier	text		6245070	0					
ANR	6245106	IncDec	++		6245070	1					
ANR	6245107	CompoundStatement		5:66:104:104	6245070	3					
ANR	6245108	ExpressionStatement		567:2:11692:11692	6245070	0	True				
ANR	6245109	ForStatement	for ( word = 0 ; * text ; word ++ )		6245070	3					
ANR	6245110	ForInit	word = 0 ;	569:6:11703:11711	6245070	0	True				
ANR	6245111	AssignmentExpression	word = 0		6245070	0		=			
ANR	6245112	Identifier	word		6245070	0					
ANR	6245113	PrimaryExpression	0		6245070	1					
ANR	6245114	Condition	* text	569:16:11713:11717	6245070	1	True				
ANR	6245115	UnaryOperationExpression	* text		6245070	0					
ANR	6245116	UnaryOperator	*		6245070	0					
ANR	6245117	Identifier	text		6245070	1					
ANR	6245118	PostIncDecOperationExpression	word ++	569:23:11720:11725	6245070	2	True				
ANR	6245119	Identifier	word		6245070	0					
ANR	6245120	IncDec	++		6245070	1					
ANR	6245121	CompoundStatement		8:31:144:144	6245070	3					
ANR	6245122	ForStatement	for ( ; * text && ! IS_SEPARATOR ( * text ) ; text ++ )		6245070	0					
ANR	6245123	Condition	* text && ! IS_SEPARATOR ( * text )	570:9:11739:11768	6245070	0	True				
ANR	6245124	AndExpression	* text && ! IS_SEPARATOR ( * text )		6245070	0		&&			
ANR	6245125	UnaryOperationExpression	* text		6245070	0					
ANR	6245126	UnaryOperator	*		6245070	0					
ANR	6245127	Identifier	text		6245070	1					
ANR	6245128	UnaryOperationExpression	! IS_SEPARATOR ( * text )		6245070	1					
ANR	6245129	UnaryOperator	!		6245070	0					
ANR	6245130	CallExpression	IS_SEPARATOR ( * text )		6245070	1					
ANR	6245131	Callee	IS_SEPARATOR		6245070	0					
ANR	6245132	Identifier	IS_SEPARATOR		6245070	0					
ANR	6245133	ArgumentList	* text		6245070	1					
ANR	6245134	Argument	* text		6245070	0					
ANR	6245135	UnaryOperationExpression	* text		6245070	0					
ANR	6245136	UnaryOperator	*		6245070	0					
ANR	6245137	Identifier	text		6245070	1					
ANR	6245138	PostIncDecOperationExpression	text ++	570:41:11771:11776	6245070	1	True				
ANR	6245139	Identifier	text		6245070	0					
ANR	6245140	IncDec	++		6245070	1					
ANR	6245141	CompoundStatement		9:49:195:195	6245070	2					
ANR	6245142	ExpressionStatement		571:3:11784:11784	6245070	0	True				
ANR	6245143	ForStatement	for ( tmp = text ; * text && IS_SEPARATOR ( * text ) ; text ++ )		6245070	1					
ANR	6245144	ForInit	tmp = text ;	573:7:11797:11807	6245070	0	True				
ANR	6245145	AssignmentExpression	tmp = text		6245070	0		=			
ANR	6245146	Identifier	tmp		6245070	0					
ANR	6245147	Identifier	text		6245070	1					
ANR	6245148	Condition	* text && IS_SEPARATOR ( * text )	573:19:11809:11837	6245070	1	True				
ANR	6245149	AndExpression	* text && IS_SEPARATOR ( * text )		6245070	0		&&			
ANR	6245150	UnaryOperationExpression	* text		6245070	0					
ANR	6245151	UnaryOperator	*		6245070	0					
ANR	6245152	Identifier	text		6245070	1					
ANR	6245153	CallExpression	IS_SEPARATOR ( * text )		6245070	1					
ANR	6245154	Callee	IS_SEPARATOR		6245070	0					
ANR	6245155	Identifier	IS_SEPARATOR		6245070	0					
ANR	6245156	ArgumentList	* text		6245070	1					
ANR	6245157	Argument	* text		6245070	0					
ANR	6245158	UnaryOperationExpression	* text		6245070	0					
ANR	6245159	UnaryOperator	*		6245070	0					
ANR	6245160	Identifier	text		6245070	1					
ANR	6245161	PostIncDecOperationExpression	text ++	573:50:11840:11845	6245070	2	True				
ANR	6245162	Identifier	text		6245070	0					
ANR	6245163	IncDec	++		6245070	1					
ANR	6245164	CompoundStatement		12:58:264:264	6245070	3					
ANR	6245165	ExpressionStatement		574:3:11853:11853	6245070	0	True				
ANR	6245166	ReturnStatement	return word ;	577:1:11863:11874	6245070	4	True				
ANR	6245167	Identifier	word		6245070	0					
ANR	6245168	ReturnType	R_API int		6245070	1					
ANR	6245169	Identifier	r_str_word_count		6245070	2					
ANR	6245170	ParameterList	const char * string		6245070	3					
ANR	6245171	Parameter	const char * string	562:27:11563:11580	6245070	0	True				
ANR	6245172	ParameterType	const char *		6245070	0					
ANR	6245173	Identifier	string		6245070	1					
ANR	6245174	CFGEntryNode	ENTRY		6245070		True				
ANR	6245175	CFGExitNode	EXIT		6245070		True				
ANR	6245176	Symbol	IS_SEPARATOR		6245070						
ANR	6245177	Symbol	string		6245070						
ANR	6245178	Symbol	tmp		6245070						
ANR	6245179	Symbol	* text		6245070						
ANR	6245180	Symbol	text		6245070						
ANR	6245181	Symbol	word		6245070						
ANR	6245182	Function	r_str_ichr	585:0:12099:12193							
ANR	6245183	FunctionDef	"r_str_ichr (char * str , char chr)"		6245182	0					
ANR	6245184	CompoundStatement		585:44:12143:12193	6245182	0					
ANR	6245185	WhileStatement	while ( * str == chr )		6245182	0					
ANR	6245186	Condition	* str == chr	586:8:12153:12163	6245182	0	True				
ANR	6245187	EqualityExpression	* str == chr		6245182	0		==			
ANR	6245188	UnaryOperationExpression	* str		6245182	0					
ANR	6245189	UnaryOperator	*		6245182	0					
ANR	6245190	Identifier	str		6245182	1					
ANR	6245191	Identifier	chr		6245182	1					
ANR	6245192	CompoundStatement		2:21:22:22	6245182	1					
ANR	6245193	ExpressionStatement	str ++	587:2:12170:12175	6245182	0	True				
ANR	6245194	PostIncDecOperationExpression	str ++		6245182	0					
ANR	6245195	Identifier	str		6245182	0					
ANR	6245196	IncDec	++		6245182	1					
ANR	6245197	ReturnStatement	return str ;	589:1:12181:12191	6245182	1	True				
ANR	6245198	Identifier	str		6245182	0					
ANR	6245199	ReturnType	R_API char *		6245182	1					
ANR	6245200	Identifier	r_str_ichr		6245182	2					
ANR	6245201	ParameterList	"char * str , char chr"		6245182	3					
ANR	6245202	Parameter	char * str	585:23:12122:12130	6245182	0	True				
ANR	6245203	ParameterType	char *		6245182	0					
ANR	6245204	Identifier	str		6245182	1					
ANR	6245205	Parameter	char chr	585:34:12133:12140	6245182	1	True				
ANR	6245206	ParameterType	char		6245182	0					
ANR	6245207	Identifier	chr		6245182	1					
ANR	6245208	CFGEntryNode	ENTRY		6245182		True				
ANR	6245209	CFGExitNode	EXIT		6245182		True				
ANR	6245210	Symbol	str		6245182						
ANR	6245211	Symbol	* str		6245182						
ANR	6245212	Symbol	chr		6245182						
ANR	6245213	Function	r_str_lchr	594:6:12289:12481							
ANR	6245214	FunctionDef	"r_str_lchr (const char * str , char chr)"		6245213	0					
ANR	6245215	CompoundStatement		594:56:12339:12481	6245213	0					
ANR	6245216	IfStatement	if ( str )		6245213	0					
ANR	6245217	Condition	str	595:5:12346:12348	6245213	0	True				
ANR	6245218	Identifier	str		6245213	0					
ANR	6245219	CompoundStatement		3:2:15:37	6245213	1					
ANR	6245220	IdentifierDeclStatement	int len = strlen ( str ) ;	596:2:12355:12377	6245213	0	True				
ANR	6245221	IdentifierDecl	len = strlen ( str )		6245213	0					
ANR	6245222	IdentifierDeclType	int		6245213	0					
ANR	6245223	Identifier	len		6245213	1					
ANR	6245224	AssignmentExpression	len = strlen ( str )		6245213	2		=			
ANR	6245225	Identifier	len		6245213	0					
ANR	6245226	CallExpression	strlen ( str )		6245213	1					
ANR	6245227	Callee	strlen		6245213	0					
ANR	6245228	Identifier	strlen		6245213	0					
ANR	6245229	ArgumentList	str		6245213	1					
ANR	6245230	Argument	str		6245213	0					
ANR	6245231	Identifier	str		6245213	0					
ANR	6245232	ForStatement	for ( ; len >= 0 ; len -- )		6245213	1					
ANR	6245233	Condition	len >= 0	597:9:12388:12395	6245213	0	True				
ANR	6245234	RelationalExpression	len >= 0		6245213	0		>=			
ANR	6245235	Identifier	len		6245213	0					
ANR	6245236	PrimaryExpression	0		6245213	1					
ANR	6245237	PostIncDecOperationExpression	len --	597:19:12398:12402	6245213	1	True				
ANR	6245238	Identifier	len		6245213	0					
ANR	6245239	IncDec	--		6245213	1					
ANR	6245240	CompoundStatement		4:26:65:65	6245213	2					
ANR	6245241	IfStatement	if ( str [ len ] == chr )		6245213	0					
ANR	6245242	Condition	str [ len ] == chr	598:7:12414:12428	6245213	0	True				
ANR	6245243	EqualityExpression	str [ len ] == chr		6245213	0		==			
ANR	6245244	ArrayIndexing	str [ len ]		6245213	0					
ANR	6245245	Identifier	str		6245213	0					
ANR	6245246	Identifier	len		6245213	1					
ANR	6245247	Identifier	chr		6245213	1					
ANR	6245248	CompoundStatement		5:24:91:91	6245213	1					
ANR	6245249	ReturnStatement	return str + len ;	599:4:12437:12453	6245213	0	True				
ANR	6245250	AdditiveExpression	str + len		6245213	0		+			
ANR	6245251	Identifier	str		6245213	0					
ANR	6245252	Identifier	len		6245213	1					
ANR	6245253	ReturnStatement	return NULL ;	603:1:12468:12479	6245213	1	True				
ANR	6245254	Identifier	NULL		6245213	0					
ANR	6245255	ReturnType	const char *		6245213	1					
ANR	6245256	Identifier	r_str_lchr		6245213	2					
ANR	6245257	ParameterList	"const char * str , char chr"		6245213	3					
ANR	6245258	Parameter	const char * str	594:29:12312:12326	6245213	0	True				
ANR	6245259	ParameterType	const char *		6245213	0					
ANR	6245260	Identifier	str		6245213	1					
ANR	6245261	Parameter	char chr	594:46:12329:12336	6245213	1	True				
ANR	6245262	ParameterType	char		6245213	0					
ANR	6245263	Identifier	chr		6245213	1					
ANR	6245264	CFGEntryNode	ENTRY		6245213		True				
ANR	6245265	CFGExitNode	EXIT		6245213		True				
ANR	6245266	Symbol	str		6245213						
ANR	6245267	Symbol	strlen		6245213						
ANR	6245268	Symbol	NULL		6245213						
ANR	6245269	Symbol	len		6245213						
ANR	6245270	Symbol	* str		6245213						
ANR	6245271	Symbol	chr		6245213						
ANR	6245272	Symbol	* len		6245213						
ANR	6245273	Function	r_sub_str_lchr	607:6:12573:12752							
ANR	6245274	FunctionDef	"r_sub_str_lchr (const char * str , int start , int end , char chr)"		6245273	0					
ANR	6245275	CompoundStatement		607:80:12647:12752	6245273	0					
ANR	6245276	DoStatement	do		6245273	0					
ANR	6245277	CompoundStatement		2:4:5:5	6245273	0					
ANR	6245278	ExpressionStatement	end --	609:2:12657:12662	6245273	0	True				
ANR	6245279	PostIncDecOperationExpression	end --		6245273	0					
ANR	6245280	Identifier	end		6245273	0					
ANR	6245281	IncDec	--		6245273	1					
ANR	6245282	Condition	str [ end ] != chr && end >= start	610:10:12674:12704	6245273	1	True				
ANR	6245283	AndExpression	str [ end ] != chr && end >= start		6245273	0		&&			
ANR	6245284	EqualityExpression	str [ end ] != chr		6245273	0		!=			
ANR	6245285	ArrayIndexing	str [ end ]		6245273	0					
ANR	6245286	Identifier	str		6245273	0					
ANR	6245287	Identifier	end		6245273	1					
ANR	6245288	Identifier	chr		6245273	1					
ANR	6245289	RelationalExpression	end >= start		6245273	1		>=			
ANR	6245290	Identifier	end		6245273	0					
ANR	6245291	Identifier	start		6245273	1					
ANR	6245292	ReturnStatement	return str [ end ] == chr ? & str [ end ] : NULL ;	611:1:12709:12750	6245273	1	True				
ANR	6245293	ConditionalExpression	str [ end ] == chr ? & str [ end ] : NULL		6245273	0					
ANR	6245294	Condition	str [ end ] == chr		6245273	0					
ANR	6245295	EqualityExpression	str [ end ] == chr		6245273	0		==			
ANR	6245296	ArrayIndexing	str [ end ]		6245273	0					
ANR	6245297	Identifier	str		6245273	0					
ANR	6245298	Identifier	end		6245273	1					
ANR	6245299	Identifier	chr		6245273	1					
ANR	6245300	UnaryOperationExpression	& str [ end ]		6245273	1					
ANR	6245301	UnaryOperator	&		6245273	0					
ANR	6245302	ArrayIndexing	str [ end ]		6245273	1					
ANR	6245303	Identifier	str		6245273	0					
ANR	6245304	Identifier	end		6245273	1					
ANR	6245305	Identifier	NULL		6245273	2					
ANR	6245306	ReturnType	const char *		6245273	1					
ANR	6245307	Identifier	r_sub_str_lchr		6245273	2					
ANR	6245308	ParameterList	"const char * str , int start , int end , char chr"		6245273	3					
ANR	6245309	Parameter	const char * str	607:33:12600:12614	6245273	0	True				
ANR	6245310	ParameterType	const char *		6245273	0					
ANR	6245311	Identifier	str		6245273	1					
ANR	6245312	Parameter	int start	607:50:12617:12625	6245273	1	True				
ANR	6245313	ParameterType	int		6245273	0					
ANR	6245314	Identifier	start		6245273	1					
ANR	6245315	Parameter	int end	607:61:12628:12634	6245273	2	True				
ANR	6245316	ParameterType	int		6245273	0					
ANR	6245317	Identifier	end		6245273	1					
ANR	6245318	Parameter	char chr	607:70:12637:12644	6245273	3	True				
ANR	6245319	ParameterType	char		6245273	0					
ANR	6245320	Identifier	chr		6245273	1					
ANR	6245321	CFGEntryNode	ENTRY		6245273		True				
ANR	6245322	CFGExitNode	EXIT		6245273		True				
ANR	6245323	Symbol	str		6245273						
ANR	6245324	Symbol	NULL		6245273						
ANR	6245325	Symbol	start		6245273						
ANR	6245326	Symbol	end		6245273						
ANR	6245327	Symbol	* end		6245273						
ANR	6245328	Symbol	* str		6245273						
ANR	6245329	Symbol	chr		6245273						
ANR	6245330	Function	r_sub_str_rchr	615:6:12845:13027							
ANR	6245331	FunctionDef	"r_sub_str_rchr (const char * str , int start , int end , char chr)"		6245330	0					
ANR	6245332	CompoundStatement		615:80:12919:13027	6245330	0					
ANR	6245333	WhileStatement	while ( str [ start ] != chr && start < end )		6245330	0					
ANR	6245334	Condition	str [ start ] != chr && start < end	616:8:12929:12960	6245330	0	True				
ANR	6245335	AndExpression	str [ start ] != chr && start < end		6245330	0		&&			
ANR	6245336	EqualityExpression	str [ start ] != chr		6245330	0		!=			
ANR	6245337	ArrayIndexing	str [ start ]		6245330	0					
ANR	6245338	Identifier	str		6245330	0					
ANR	6245339	Identifier	start		6245330	1					
ANR	6245340	Identifier	chr		6245330	1					
ANR	6245341	RelationalExpression	start < end		6245330	1		<			
ANR	6245342	Identifier	start		6245330	0					
ANR	6245343	Identifier	end		6245330	1					
ANR	6245344	CompoundStatement		2:42:43:43	6245330	1					
ANR	6245345	ExpressionStatement	start ++	617:2:12967:12974	6245330	0	True				
ANR	6245346	PostIncDecOperationExpression	start ++		6245330	0					
ANR	6245347	Identifier	start		6245330	0					
ANR	6245348	IncDec	++		6245330	1					
ANR	6245349	ReturnStatement	return str [ start ] == chr ? & str [ start ] : NULL ;	619:1:12980:13025	6245330	1	True				
ANR	6245350	ConditionalExpression	str [ start ] == chr ? & str [ start ] : NULL		6245330	0					
ANR	6245351	Condition	str [ start ] == chr		6245330	0					
ANR	6245352	EqualityExpression	str [ start ] == chr		6245330	0		==			
ANR	6245353	ArrayIndexing	str [ start ]		6245330	0					
ANR	6245354	Identifier	str		6245330	0					
ANR	6245355	Identifier	start		6245330	1					
ANR	6245356	Identifier	chr		6245330	1					
ANR	6245357	UnaryOperationExpression	& str [ start ]		6245330	1					
ANR	6245358	UnaryOperator	&		6245330	0					
ANR	6245359	ArrayIndexing	str [ start ]		6245330	1					
ANR	6245360	Identifier	str		6245330	0					
ANR	6245361	Identifier	start		6245330	1					
ANR	6245362	Identifier	NULL		6245330	2					
ANR	6245363	ReturnType	const char *		6245330	1					
ANR	6245364	Identifier	r_sub_str_rchr		6245330	2					
ANR	6245365	ParameterList	"const char * str , int start , int end , char chr"		6245330	3					
ANR	6245366	Parameter	const char * str	615:33:12872:12886	6245330	0	True				
ANR	6245367	ParameterType	const char *		6245330	0					
ANR	6245368	Identifier	str		6245330	1					
ANR	6245369	Parameter	int start	615:50:12889:12897	6245330	1	True				
ANR	6245370	ParameterType	int		6245330	0					
ANR	6245371	Identifier	start		6245330	1					
ANR	6245372	Parameter	int end	615:61:12900:12906	6245330	2	True				
ANR	6245373	ParameterType	int		6245330	0					
ANR	6245374	Identifier	end		6245330	1					
ANR	6245375	Parameter	char chr	615:70:12909:12916	6245330	3	True				
ANR	6245376	ParameterType	char		6245330	0					
ANR	6245377	Identifier	chr		6245330	1					
ANR	6245378	CFGEntryNode	ENTRY		6245330		True				
ANR	6245379	CFGExitNode	EXIT		6245330		True				
ANR	6245380	Symbol	str		6245330						
ANR	6245381	Symbol	NULL		6245330						
ANR	6245382	Symbol	* start		6245330						
ANR	6245383	Symbol	start		6245330						
ANR	6245384	Symbol	end		6245330						
ANR	6245385	Symbol	* str		6245330						
ANR	6245386	Symbol	chr		6245330						
ANR	6245387	Function	r_str_sep	622:6:13036:13228							
ANR	6245388	FunctionDef	"r_str_sep (const char * base , const char * sep)"		6245387	0					
ANR	6245389	CompoundStatement		622:63:13093:13228	6245387	0					
ANR	6245390	IdentifierDeclStatement	int i ;	623:1:13096:13101	6245387	0	True				
ANR	6245391	IdentifierDecl	i		6245387	0					
ANR	6245392	IdentifierDeclType	int		6245387	0					
ANR	6245393	Identifier	i		6245387	1					
ANR	6245394	WhileStatement	while ( * base )		6245387	1					
ANR	6245395	Condition	* base	624:8:13111:13115	6245387	0	True				
ANR	6245396	UnaryOperationExpression	* base		6245387	0					
ANR	6245397	UnaryOperator	*		6245387	0					
ANR	6245398	Identifier	base		6245387	1					
ANR	6245399	CompoundStatement		3:15:24:24	6245387	1					
ANR	6245400	ForStatement	for ( i = 0 ; sep [ i ] ; i ++ )		6245387	0					
ANR	6245401	ForInit	i = 0 ;	625:7:13127:13132	6245387	0	True				
ANR	6245402	AssignmentExpression	i = 0		6245387	0		=			
ANR	6245403	Identifier	i		6245387	0					
ANR	6245404	PrimaryExpression	0		6245387	1					
ANR	6245405	Condition	sep [ i ]	625:14:13134:13139	6245387	1	True				
ANR	6245406	ArrayIndexing	sep [ i ]		6245387	0					
ANR	6245407	Identifier	sep		6245387	0					
ANR	6245408	Identifier	i		6245387	1					
ANR	6245409	PostIncDecOperationExpression	i ++	625:22:13142:13144	6245387	2	True				
ANR	6245410	Identifier	i		6245387	0					
ANR	6245411	IncDec	++		6245387	1					
ANR	6245412	CompoundStatement		4:27:53:53	6245387	3					
ANR	6245413	IfStatement	if ( * base == sep [ i ] )		6245387	0					
ANR	6245414	Condition	* base == sep [ i ]	626:7:13156:13170	6245387	0	True				
ANR	6245415	EqualityExpression	* base == sep [ i ]		6245387	0		==			
ANR	6245416	UnaryOperationExpression	* base		6245387	0					
ANR	6245417	UnaryOperator	*		6245387	0					
ANR	6245418	Identifier	base		6245387	1					
ANR	6245419	ArrayIndexing	sep [ i ]		6245387	1					
ANR	6245420	Identifier	sep		6245387	0					
ANR	6245421	Identifier	i		6245387	1					
ANR	6245422	CompoundStatement		5:24:79:79	6245387	1					
ANR	6245423	ReturnStatement	return base ;	627:4:13179:13190	6245387	0	True				
ANR	6245424	Identifier	base		6245387	0					
ANR	6245425	ExpressionStatement	base ++	630:2:13203:13209	6245387	1	True				
ANR	6245426	PostIncDecOperationExpression	base ++		6245387	0					
ANR	6245427	Identifier	base		6245387	0					
ANR	6245428	IncDec	++		6245387	1					
ANR	6245429	ReturnStatement	return NULL ;	632:1:13215:13226	6245387	2	True				
ANR	6245430	Identifier	NULL		6245387	0					
ANR	6245431	ReturnType	const char *		6245387	1					
ANR	6245432	Identifier	r_str_sep		6245387	2					
ANR	6245433	ParameterList	"const char * base , const char * sep"		6245387	3					
ANR	6245434	Parameter	const char * base	622:28:13058:13073	6245387	0	True				
ANR	6245435	ParameterType	const char *		6245387	0					
ANR	6245436	Identifier	base		6245387	1					
ANR	6245437	Parameter	const char * sep	622:46:13076:13090	6245387	1	True				
ANR	6245438	ParameterType	const char *		6245387	0					
ANR	6245439	Identifier	sep		6245387	1					
ANR	6245440	CFGEntryNode	ENTRY		6245387		True				
ANR	6245441	CFGExitNode	EXIT		6245387		True				
ANR	6245442	Symbol	* i		6245387						
ANR	6245443	Symbol	NULL		6245387						
ANR	6245444	Symbol	* sep		6245387						
ANR	6245445	Symbol	i		6245387						
ANR	6245446	Symbol	* base		6245387						
ANR	6245447	Symbol	base		6245387						
ANR	6245448	Symbol	sep		6245387						
ANR	6245449	Function	r_str_rsep	635:6:13237:13440							
ANR	6245450	FunctionDef	"r_str_rsep (const char * base , const char * p , const char * sep)"		6245449	0					
ANR	6245451	CompoundStatement		635:79:13310:13440	6245449	0					
ANR	6245452	IdentifierDeclStatement	int i ;	636:1:13313:13318	6245449	0	True				
ANR	6245453	IdentifierDecl	i		6245449	0					
ANR	6245454	IdentifierDeclType	int		6245449	0					
ANR	6245455	Identifier	i		6245449	1					
ANR	6245456	WhileStatement	while ( p >= base )		6245449	1					
ANR	6245457	Condition	p >= base	637:8:13328:13336	6245449	0	True				
ANR	6245458	RelationalExpression	p >= base		6245449	0		>=			
ANR	6245459	Identifier	p		6245449	0					
ANR	6245460	Identifier	base		6245449	1					
ANR	6245461	CompoundStatement		3:19:28:28	6245449	1					
ANR	6245462	ForStatement	for ( i = 0 ; sep [ i ] ; i ++ )		6245449	0					
ANR	6245463	ForInit	i = 0 ;	638:7:13348:13353	6245449	0	True				
ANR	6245464	AssignmentExpression	i = 0		6245449	0		=			
ANR	6245465	Identifier	i		6245449	0					
ANR	6245466	PrimaryExpression	0		6245449	1					
ANR	6245467	Condition	sep [ i ]	638:14:13355:13360	6245449	1	True				
ANR	6245468	ArrayIndexing	sep [ i ]		6245449	0					
ANR	6245469	Identifier	sep		6245449	0					
ANR	6245470	Identifier	i		6245449	1					
ANR	6245471	PostIncDecOperationExpression	i ++	638:22:13363:13365	6245449	2	True				
ANR	6245472	Identifier	i		6245449	0					
ANR	6245473	IncDec	++		6245449	1					
ANR	6245474	CompoundStatement		4:27:57:57	6245449	3					
ANR	6245475	IfStatement	if ( * p == sep [ i ] )		6245449	0					
ANR	6245476	Condition	* p == sep [ i ]	639:7:13377:13388	6245449	0	True				
ANR	6245477	EqualityExpression	* p == sep [ i ]		6245449	0		==			
ANR	6245478	UnaryOperationExpression	* p		6245449	0					
ANR	6245479	UnaryOperator	*		6245449	0					
ANR	6245480	Identifier	p		6245449	1					
ANR	6245481	ArrayIndexing	sep [ i ]		6245449	1					
ANR	6245482	Identifier	sep		6245449	0					
ANR	6245483	Identifier	i		6245449	1					
ANR	6245484	CompoundStatement		5:21:80:80	6245449	1					
ANR	6245485	ReturnStatement	return p ;	640:4:13397:13405	6245449	0	True				
ANR	6245486	Identifier	p		6245449	0					
ANR	6245487	ExpressionStatement	p --	643:2:13418:13421	6245449	1	True				
ANR	6245488	PostIncDecOperationExpression	p --		6245449	0					
ANR	6245489	Identifier	p		6245449	0					
ANR	6245490	IncDec	--		6245449	1					
ANR	6245491	ReturnStatement	return NULL ;	645:1:13427:13438	6245449	2	True				
ANR	6245492	Identifier	NULL		6245449	0					
ANR	6245493	ReturnType	const char *		6245449	1					
ANR	6245494	Identifier	r_str_rsep		6245449	2					
ANR	6245495	ParameterList	"const char * base , const char * p , const char * sep"		6245449	3					
ANR	6245496	Parameter	const char * base	635:29:13260:13275	6245449	0	True				
ANR	6245497	ParameterType	const char *		6245449	0					
ANR	6245498	Identifier	base		6245449	1					
ANR	6245499	Parameter	const char * p	635:47:13278:13290	6245449	1	True				
ANR	6245500	ParameterType	const char *		6245449	0					
ANR	6245501	Identifier	p		6245449	1					
ANR	6245502	Parameter	const char * sep	635:62:13293:13307	6245449	2	True				
ANR	6245503	ParameterType	const char *		6245449	0					
ANR	6245504	Identifier	sep		6245449	1					
ANR	6245505	CFGEntryNode	ENTRY		6245449		True				
ANR	6245506	CFGExitNode	EXIT		6245449		True				
ANR	6245507	Symbol	p		6245449						
ANR	6245508	Symbol	* i		6245449						
ANR	6245509	Symbol	NULL		6245449						
ANR	6245510	Symbol	* sep		6245449						
ANR	6245511	Symbol	i		6245449						
ANR	6245512	Symbol	* p		6245449						
ANR	6245513	Symbol	base		6245449						
ANR	6245514	Symbol	sep		6245449						
ANR	6245515	Function	r_str_rstr	648:6:13449:13742							
ANR	6245516	FunctionDef	"r_str_rstr (const char * base , const char * p)"		6245515	0					
ANR	6245517	CompoundStatement		648:62:13505:13742	6245515	0					
ANR	6245518	IdentifierDeclStatement	char * s = strdup ( base ) ;	649:1:13508:13531	6245515	0	True				
ANR	6245519	IdentifierDecl	* s = strdup ( base )		6245515	0					
ANR	6245520	IdentifierDeclType	char *		6245515	0					
ANR	6245521	Identifier	s		6245515	1					
ANR	6245522	AssignmentExpression	* s = strdup ( base )		6245515	2		=			
ANR	6245523	Identifier	s		6245515	0					
ANR	6245524	CallExpression	strdup ( base )		6245515	1					
ANR	6245525	Callee	strdup		6245515	0					
ANR	6245526	Identifier	strdup		6245515	0					
ANR	6245527	ArgumentList	base		6245515	1					
ANR	6245528	Argument	base		6245515	0					
ANR	6245529	Identifier	base		6245515	0					
ANR	6245530	IdentifierDeclStatement	char * k = strdup ( p ) ;	650:1:13534:13554	6245515	1	True				
ANR	6245531	IdentifierDecl	* k = strdup ( p )		6245515	0					
ANR	6245532	IdentifierDeclType	char *		6245515	0					
ANR	6245533	Identifier	k		6245515	1					
ANR	6245534	AssignmentExpression	* k = strdup ( p )		6245515	2		=			
ANR	6245535	Identifier	k		6245515	0					
ANR	6245536	CallExpression	strdup ( p )		6245515	1					
ANR	6245537	Callee	strdup		6245515	0					
ANR	6245538	Identifier	strdup		6245515	0					
ANR	6245539	ArgumentList	p		6245515	1					
ANR	6245540	Argument	p		6245515	0					
ANR	6245541	Identifier	p		6245515	0					
ANR	6245542	ExpressionStatement	r_str_reverse ( s )	651:1:13557:13574	6245515	2	True				
ANR	6245543	CallExpression	r_str_reverse ( s )		6245515	0					
ANR	6245544	Callee	r_str_reverse		6245515	0					
ANR	6245545	Identifier	r_str_reverse		6245515	0					
ANR	6245546	ArgumentList	s		6245515	1					
ANR	6245547	Argument	s		6245515	0					
ANR	6245548	Identifier	s		6245515	0					
ANR	6245549	ExpressionStatement	r_str_reverse ( k )	652:1:13577:13594	6245515	3	True				
ANR	6245550	CallExpression	r_str_reverse ( k )		6245515	0					
ANR	6245551	Callee	r_str_reverse		6245515	0					
ANR	6245552	Identifier	r_str_reverse		6245515	0					
ANR	6245553	ArgumentList	k		6245515	1					
ANR	6245554	Argument	k		6245515	0					
ANR	6245555	Identifier	k		6245515	0					
ANR	6245556	IdentifierDeclStatement	"char * q = strstr ( s , k ) ;"	653:1:13597:13620	6245515	4	True				
ANR	6245557	IdentifierDecl	"* q = strstr ( s , k )"		6245515	0					
ANR	6245558	IdentifierDeclType	char *		6245515	0					
ANR	6245559	Identifier	q		6245515	1					
ANR	6245560	AssignmentExpression	"* q = strstr ( s , k )"		6245515	2		=			
ANR	6245561	Identifier	q		6245515	0					
ANR	6245562	CallExpression	"strstr ( s , k )"		6245515	1					
ANR	6245563	Callee	strstr		6245515	0					
ANR	6245564	Identifier	strstr		6245515	0					
ANR	6245565	ArgumentList	s		6245515	1					
ANR	6245566	Argument	s		6245515	0					
ANR	6245567	Identifier	s		6245515	0					
ANR	6245568	Argument	k		6245515	1					
ANR	6245569	Identifier	k		6245515	0					
ANR	6245570	IdentifierDeclStatement	const char * r = NULL ;	654:1:13623:13643	6245515	5	True				
ANR	6245571	IdentifierDecl	* r = NULL		6245515	0					
ANR	6245572	IdentifierDeclType	const char *		6245515	0					
ANR	6245573	Identifier	r		6245515	1					
ANR	6245574	AssignmentExpression	* r = NULL		6245515	2		=			
ANR	6245575	Identifier	NULL		6245515	0					
ANR	6245576	Identifier	NULL		6245515	1					
ANR	6245577	IfStatement	if ( q )		6245515	6					
ANR	6245578	Condition	q	655:5:13650:13650	6245515	0	True				
ANR	6245579	Identifier	q		6245515	0					
ANR	6245580	CompoundStatement		8:8:147:147	6245515	1					
ANR	6245581	ExpressionStatement	r = base + strlen ( base ) - ( q - s ) - strlen ( p )	656:2:13657:13704	6245515	0	True				
ANR	6245582	AssignmentExpression	r = base + strlen ( base ) - ( q - s ) - strlen ( p )		6245515	0		=			
ANR	6245583	Identifier	r		6245515	0					
ANR	6245584	AdditiveExpression	base + strlen ( base ) - ( q - s ) - strlen ( p )		6245515	1		+			
ANR	6245585	Identifier	base		6245515	0					
ANR	6245586	AdditiveExpression	strlen ( base ) - ( q - s ) - strlen ( p )		6245515	1		-			
ANR	6245587	CallExpression	strlen ( base )		6245515	0					
ANR	6245588	Callee	strlen		6245515	0					
ANR	6245589	Identifier	strlen		6245515	0					
ANR	6245590	ArgumentList	base		6245515	1					
ANR	6245591	Argument	base		6245515	0					
ANR	6245592	Identifier	base		6245515	0					
ANR	6245593	AdditiveExpression	( q - s ) - strlen ( p )		6245515	1		-			
ANR	6245594	AdditiveExpression	q - s		6245515	0		-			
ANR	6245595	Identifier	q		6245515	0					
ANR	6245596	Identifier	s		6245515	1					
ANR	6245597	CallExpression	strlen ( p )		6245515	1					
ANR	6245598	Callee	strlen		6245515	0					
ANR	6245599	Identifier	strlen		6245515	0					
ANR	6245600	ArgumentList	p		6245515	1					
ANR	6245601	Argument	p		6245515	0					
ANR	6245602	Identifier	p		6245515	0					
ANR	6245603	ExpressionStatement	free ( s )	658:1:13710:13718	6245515	7	True				
ANR	6245604	CallExpression	free ( s )		6245515	0					
ANR	6245605	Callee	free		6245515	0					
ANR	6245606	Identifier	free		6245515	0					
ANR	6245607	ArgumentList	s		6245515	1					
ANR	6245608	Argument	s		6245515	0					
ANR	6245609	Identifier	s		6245515	0					
ANR	6245610	ExpressionStatement	free ( k )	659:1:13721:13729	6245515	8	True				
ANR	6245611	CallExpression	free ( k )		6245515	0					
ANR	6245612	Callee	free		6245515	0					
ANR	6245613	Identifier	free		6245515	0					
ANR	6245614	ArgumentList	k		6245515	1					
ANR	6245615	Argument	k		6245515	0					
ANR	6245616	Identifier	k		6245515	0					
ANR	6245617	ReturnStatement	return r ;	660:1:13732:13740	6245515	9	True				
ANR	6245618	Identifier	r		6245515	0					
ANR	6245619	ReturnType	const char *		6245515	1					
ANR	6245620	Identifier	r_str_rstr		6245515	2					
ANR	6245621	ParameterList	"const char * base , const char * p"		6245515	3					
ANR	6245622	Parameter	const char * base	648:29:13472:13487	6245515	0	True				
ANR	6245623	ParameterType	const char *		6245515	0					
ANR	6245624	Identifier	base		6245515	1					
ANR	6245625	Parameter	const char * p	648:47:13490:13502	6245515	1	True				
ANR	6245626	ParameterType	const char *		6245515	0					
ANR	6245627	Identifier	p		6245515	1					
ANR	6245628	CFGEntryNode	ENTRY		6245515		True				
ANR	6245629	CFGExitNode	EXIT		6245515		True				
ANR	6245630	Symbol	p		6245515						
ANR	6245631	Symbol	q		6245515						
ANR	6245632	Symbol	strlen		6245515						
ANR	6245633	Symbol	r		6245515						
ANR	6245634	Symbol	s		6245515						
ANR	6245635	Symbol	NULL		6245515						
ANR	6245636	Symbol	strstr		6245515						
ANR	6245637	Symbol	strdup		6245515						
ANR	6245638	Symbol	k		6245515						
ANR	6245639	Symbol	base		6245515						
ANR	6245640	Function	r_str_rchr	663:6:13751:13983							
ANR	6245641	FunctionDef	"r_str_rchr (const char * base , const char * p , int ch)"		6245640	0					
ANR	6245642	CompoundStatement		663:70:13815:13983	6245640	0					
ANR	6245643	IfStatement	if ( ! base )		6245640	0					
ANR	6245644	Condition	! base	664:5:13822:13826	6245640	0	True				
ANR	6245645	UnaryOperationExpression	! base		6245640	0					
ANR	6245646	UnaryOperator	!		6245640	0					
ANR	6245647	Identifier	base		6245640	1					
ANR	6245648	CompoundStatement		2:12:13:13	6245640	1					
ANR	6245649	ReturnStatement	return NULL ;	665:2:13833:13844	6245640	0	True				
ANR	6245650	Identifier	NULL		6245640	0					
ANR	6245651	IfStatement	if ( ! p )		6245640	1					
ANR	6245652	Condition	! p	667:5:13854:13855	6245640	0	True				
ANR	6245653	UnaryOperationExpression	! p		6245640	0					
ANR	6245654	UnaryOperator	!		6245640	0					
ANR	6245655	Identifier	p		6245640	1					
ANR	6245656	CompoundStatement		5:9:42:42	6245640	1					
ANR	6245657	ExpressionStatement	p = base + strlen ( base )	668:2:13862:13886	6245640	0	True				
ANR	6245658	AssignmentExpression	p = base + strlen ( base )		6245640	0		=			
ANR	6245659	Identifier	p		6245640	0					
ANR	6245660	AdditiveExpression	base + strlen ( base )		6245640	1		+			
ANR	6245661	Identifier	base		6245640	0					
ANR	6245662	CallExpression	strlen ( base )		6245640	1					
ANR	6245663	Callee	strlen		6245640	0					
ANR	6245664	Identifier	strlen		6245640	0					
ANR	6245665	ArgumentList	base		6245640	1					
ANR	6245666	Argument	base		6245640	0					
ANR	6245667	Identifier	base		6245640	0					
ANR	6245668	ForStatement	for ( ; p >= base ; p -- )		6245640	2					
ANR	6245669	Condition	p >= base	670:8:13899:13907	6245640	0	True				
ANR	6245670	RelationalExpression	p >= base		6245640	0		>=			
ANR	6245671	Identifier	p		6245640	0					
ANR	6245672	Identifier	base		6245640	1					
ANR	6245673	PostIncDecOperationExpression	p --	670:19:13910:13912	6245640	1	True				
ANR	6245674	Identifier	p		6245640	0					
ANR	6245675	IncDec	--		6245640	1					
ANR	6245676	CompoundStatement		8:24:99:99	6245640	2					
ANR	6245677	IfStatement	if ( ch == * p )		6245640	0					
ANR	6245678	Condition	ch == * p	671:6:13923:13930	6245640	0	True				
ANR	6245679	EqualityExpression	ch == * p		6245640	0		==			
ANR	6245680	Identifier	ch		6245640	0					
ANR	6245681	UnaryOperationExpression	* p		6245640	1					
ANR	6245682	UnaryOperator	*		6245640	0					
ANR	6245683	Identifier	p		6245640	1					
ANR	6245684	CompoundStatement		9:16:117:117	6245640	1					
ANR	6245685	BreakStatement	break ;	672:3:13938:13943	6245640	0	True				
ANR	6245686	ReturnStatement	return ( p < base ) ? NULL : p ;	675:1:13953:13981	6245640	3	True				
ANR	6245687	ConditionalExpression	( p < base ) ? NULL : p		6245640	0					
ANR	6245688	Condition	p < base		6245640	0					
ANR	6245689	RelationalExpression	p < base		6245640	0		<			
ANR	6245690	Identifier	p		6245640	0					
ANR	6245691	Identifier	base		6245640	1					
ANR	6245692	Identifier	NULL		6245640	1					
ANR	6245693	Identifier	p		6245640	2					
ANR	6245694	ReturnType	const char *		6245640	1					
ANR	6245695	Identifier	r_str_rchr		6245640	2					
ANR	6245696	ParameterList	"const char * base , const char * p , int ch"		6245640	3					
ANR	6245697	Parameter	const char * base	663:29:13774:13789	6245640	0	True				
ANR	6245698	ParameterType	const char *		6245640	0					
ANR	6245699	Identifier	base		6245640	1					
ANR	6245700	Parameter	const char * p	663:47:13792:13804	6245640	1	True				
ANR	6245701	ParameterType	const char *		6245640	0					
ANR	6245702	Identifier	p		6245640	1					
ANR	6245703	Parameter	int ch	663:62:13807:13812	6245640	2	True				
ANR	6245704	ParameterType	int		6245640	0					
ANR	6245705	Identifier	ch		6245640	1					
ANR	6245706	CFGEntryNode	ENTRY		6245640		True				
ANR	6245707	CFGExitNode	EXIT		6245640		True				
ANR	6245708	Symbol	p		6245640						
ANR	6245709	Symbol	strlen		6245640						
ANR	6245710	Symbol	NULL		6245640						
ANR	6245711	Symbol	ch		6245640						
ANR	6245712	Symbol	* p		6245640						
ANR	6245713	Symbol	base		6245640						
ANR	6245714	Function	r_str_nstr	678:6:13992:14359							
ANR	6245715	FunctionDef	"r_str_nstr (const char * s , const char * find , int slen)"		6245714	0					
ANR	6245716	CompoundStatement		678:73:14059:14359	6245714	0					
ANR	6245717	IdentifierDeclStatement	"char c , sc ;"	679:1:14062:14072	6245714	0	True				
ANR	6245718	IdentifierDecl	c		6245714	0					
ANR	6245719	IdentifierDeclType	char		6245714	0					
ANR	6245720	Identifier	c		6245714	1					
ANR	6245721	IdentifierDecl	sc		6245714	1					
ANR	6245722	IdentifierDeclType	char		6245714	0					
ANR	6245723	Identifier	sc		6245714	1					
ANR	6245724	IdentifierDeclStatement	size_t len ;	680:1:14075:14085	6245714	1	True				
ANR	6245725	IdentifierDecl	len		6245714	0					
ANR	6245726	IdentifierDeclType	size_t		6245714	0					
ANR	6245727	Identifier	len		6245714	1					
ANR	6245728	IfStatement	if ( ( c = * find ++ ) != '\\0' )		6245714	2					
ANR	6245729	Condition	( c = * find ++ ) != '\\0'	682:5:14093:14113	6245714	0	True				
ANR	6245730	EqualityExpression	( c = * find ++ ) != '\\0'		6245714	0		!=			
ANR	6245731	AssignmentExpression	c = * find ++		6245714	0		=			
ANR	6245732	Identifier	c		6245714	0					
ANR	6245733	UnaryOperationExpression	* find ++		6245714	1					
ANR	6245734	UnaryOperator	*		6245714	0					
ANR	6245735	PostIncDecOperationExpression	find ++		6245714	1					
ANR	6245736	Identifier	find		6245714	0					
ANR	6245737	IncDec	++		6245714	1					
ANR	6245738	PrimaryExpression	'\\0'		6245714	1					
ANR	6245739	CompoundStatement		5:28:56:56	6245714	1					
ANR	6245740	ExpressionStatement	len = strlen ( find )	683:2:14120:14139	6245714	0	True				
ANR	6245741	AssignmentExpression	len = strlen ( find )		6245714	0		=			
ANR	6245742	Identifier	len		6245714	0					
ANR	6245743	CallExpression	strlen ( find )		6245714	1					
ANR	6245744	Callee	strlen		6245714	0					
ANR	6245745	Identifier	strlen		6245714	0					
ANR	6245746	ArgumentList	find		6245714	1					
ANR	6245747	Argument	find		6245714	0					
ANR	6245748	Identifier	find		6245714	0					
ANR	6245749	DoStatement	do		6245714	1					
ANR	6245750	CompoundStatement		7:5:86:86	6245714	0					
ANR	6245751	DoStatement	do		6245714	0					
ANR	6245752	CompoundStatement		8:6:94:94	6245714	0					
ANR	6245753	IfStatement	if ( slen -- < 1 || ! ( sc = * s ++ ) )		6245714	0					
ANR	6245754	Condition	slen -- < 1 || ! ( sc = * s ++ )	686:8:14164:14189	6245714	0	True				
ANR	6245755	OrExpression	slen -- < 1 || ! ( sc = * s ++ )		6245714	0		||			
ANR	6245756	RelationalExpression	slen -- < 1		6245714	0		<			
ANR	6245757	PostIncDecOperationExpression	slen --		6245714	0					
ANR	6245758	Identifier	slen		6245714	0					
ANR	6245759	IncDec	--		6245714	1					
ANR	6245760	PrimaryExpression	1		6245714	1					
ANR	6245761	UnaryOperationExpression	! ( sc = * s ++ )		6245714	1					
ANR	6245762	UnaryOperator	!		6245714	0					
ANR	6245763	AssignmentExpression	sc = * s ++		6245714	1		=			
ANR	6245764	Identifier	sc		6245714	0					
ANR	6245765	UnaryOperationExpression	* s ++		6245714	1					
ANR	6245766	UnaryOperator	*		6245714	0					
ANR	6245767	PostIncDecOperationExpression	s ++		6245714	1					
ANR	6245768	Identifier	s		6245714	0					
ANR	6245769	IncDec	++		6245714	1					
ANR	6245770	CompoundStatement		9:36:132:132	6245714	1					
ANR	6245771	ReturnStatement	return ( NULL ) ;	687:5:14199:14212	6245714	0	True				
ANR	6245772	Identifier	NULL		6245714	0					
ANR	6245773	Condition	sc != c	689:12:14232:14238	6245714	1	True				
ANR	6245774	EqualityExpression	sc != c		6245714	0		!=			
ANR	6245775	Identifier	sc		6245714	0					
ANR	6245776	Identifier	c		6245714	1					
ANR	6245777	IfStatement	if ( len > slen )		6245714	1					
ANR	6245778	Condition	len > slen	690:7:14249:14258	6245714	0	True				
ANR	6245779	RelationalExpression	len > slen		6245714	0		>			
ANR	6245780	Identifier	len		6245714	0					
ANR	6245781	Identifier	slen		6245714	1					
ANR	6245782	CompoundStatement		13:19:201:201	6245714	1					
ANR	6245783	ReturnStatement	return ( NULL ) ;	691:4:14267:14280	6245714	0	True				
ANR	6245784	Identifier	NULL		6245714	0					
ANR	6245785	Condition	"strncmp ( s , find , len ) != 0"	693:11:14298:14324	6245714	1	True				
ANR	6245786	EqualityExpression	"strncmp ( s , find , len ) != 0"		6245714	0		!=			
ANR	6245787	CallExpression	"strncmp ( s , find , len )"		6245714	0					
ANR	6245788	Callee	strncmp		6245714	0					
ANR	6245789	Identifier	strncmp		6245714	0					
ANR	6245790	ArgumentList	s		6245714	1					
ANR	6245791	Argument	s		6245714	0					
ANR	6245792	Identifier	s		6245714	0					
ANR	6245793	Argument	find		6245714	1					
ANR	6245794	Identifier	find		6245714	0					
ANR	6245795	Argument	len		6245714	2					
ANR	6245796	Identifier	len		6245714	0					
ANR	6245797	PrimaryExpression	0		6245714	1					
ANR	6245798	ExpressionStatement	s --	694:2:14330:14333	6245714	2	True				
ANR	6245799	PostIncDecOperationExpression	s --		6245714	0					
ANR	6245800	Identifier	s		6245714	0					
ANR	6245801	IncDec	--		6245714	1					
ANR	6245802	ReturnStatement	return ( ( char * ) s ) ;	696:1:14339:14357	6245714	3	True				
ANR	6245803	CastExpression	( char * ) s		6245714	0					
ANR	6245804	CastTarget	char *		6245714	0					
ANR	6245805	Identifier	s		6245714	1					
ANR	6245806	ReturnType	const char *		6245714	1					
ANR	6245807	Identifier	r_str_nstr		6245714	2					
ANR	6245808	ParameterList	"const char * s , const char * find , int slen"		6245714	3					
ANR	6245809	Parameter	const char * s	678:30:14016:14028	6245714	0	True				
ANR	6245810	ParameterType	const char *		6245714	0					
ANR	6245811	Identifier	s		6245714	1					
ANR	6245812	Parameter	const char * find	678:45:14031:14046	6245714	1	True				
ANR	6245813	ParameterType	const char *		6245714	0					
ANR	6245814	Identifier	find		6245714	1					
ANR	6245815	Parameter	int slen	678:63:14049:14056	6245714	2	True				
ANR	6245816	ParameterType	int		6245714	0					
ANR	6245817	Identifier	slen		6245714	1					
ANR	6245818	CFGEntryNode	ENTRY		6245714		True				
ANR	6245819	CFGExitNode	EXIT		6245714		True				
ANR	6245820	Symbol	sc		6245714						
ANR	6245821	Symbol	* s ++		6245714						
ANR	6245822	Symbol	strlen		6245714						
ANR	6245823	Symbol	strncmp		6245714						
ANR	6245824	Symbol	s		6245714						
ANR	6245825	Symbol	c		6245714						
ANR	6245826	Symbol	NULL		6245714						
ANR	6245827	Symbol	len		6245714						
ANR	6245828	Symbol	* find ++		6245714						
ANR	6245829	Symbol	find		6245714						
ANR	6245830	Symbol	slen		6245714						
ANR	6245831	Function	r_str_new	701:0:14447:14521							
ANR	6245832	FunctionDef	r_str_new (const char * str)		6245831	0					
ANR	6245833	CompoundStatement		701:39:14486:14521	6245831	0					
ANR	6245834	ReturnStatement	return str ? strdup ( str ) : NULL ;	702:1:14489:14519	6245831	0	True				
ANR	6245835	ConditionalExpression	str ? strdup ( str ) : NULL		6245831	0					
ANR	6245836	Condition	str		6245831	0					
ANR	6245837	Identifier	str		6245831	0					
ANR	6245838	CallExpression	strdup ( str )		6245831	1					
ANR	6245839	Callee	strdup		6245831	0					
ANR	6245840	Identifier	strdup		6245831	0					
ANR	6245841	ArgumentList	str		6245831	1					
ANR	6245842	Argument	str		6245831	0					
ANR	6245843	Identifier	str		6245831	0					
ANR	6245844	Identifier	NULL		6245831	2					
ANR	6245845	ReturnType	R_API char *		6245831	1					
ANR	6245846	Identifier	r_str_new		6245831	2					
ANR	6245847	ParameterList	const char * str		6245831	3					
ANR	6245848	Parameter	const char * str	701:22:14469:14483	6245831	0	True				
ANR	6245849	ParameterType	const char *		6245831	0					
ANR	6245850	Identifier	str		6245831	1					
ANR	6245851	CFGEntryNode	ENTRY		6245831		True				
ANR	6245852	CFGExitNode	EXIT		6245831		True				
ANR	6245853	Symbol	str		6245831						
ANR	6245854	Symbol	NULL		6245831						
ANR	6245855	Symbol	strdup		6245831						
ANR	6245856	Function	r_str_newlen	707:0:14654:14842							
ANR	6245857	FunctionDef	"r_str_newlen (const char * str , int len)"		6245856	0					
ANR	6245858	CompoundStatement		707:51:14705:14842	6245856	0					
ANR	6245859	IfStatement	if ( len < 1 )		6245856	0					
ANR	6245860	Condition	len < 1	708:5:14712:14718	6245856	0	True				
ANR	6245861	RelationalExpression	len < 1		6245856	0		<			
ANR	6245862	Identifier	len		6245856	0					
ANR	6245863	PrimaryExpression	1		6245856	1					
ANR	6245864	CompoundStatement		2:14:15:15	6245856	1					
ANR	6245865	ReturnStatement	return NULL ;	709:2:14725:14736	6245856	0	True				
ANR	6245866	Identifier	NULL		6245856	0					
ANR	6245867	IdentifierDeclStatement	char * buf = malloc ( len + 1 ) ;	711:1:14742:14770	6245856	1	True				
ANR	6245868	IdentifierDecl	* buf = malloc ( len + 1 )		6245856	0					
ANR	6245869	IdentifierDeclType	char *		6245856	0					
ANR	6245870	Identifier	buf		6245856	1					
ANR	6245871	AssignmentExpression	* buf = malloc ( len + 1 )		6245856	2		=			
ANR	6245872	Identifier	buf		6245856	0					
ANR	6245873	CallExpression	malloc ( len + 1 )		6245856	1					
ANR	6245874	Callee	malloc		6245856	0					
ANR	6245875	Identifier	malloc		6245856	0					
ANR	6245876	ArgumentList	len + 1		6245856	1					
ANR	6245877	Argument	len + 1		6245856	0					
ANR	6245878	AdditiveExpression	len + 1		6245856	0		+			
ANR	6245879	Identifier	len		6245856	0					
ANR	6245880	PrimaryExpression	1		6245856	1					
ANR	6245881	IfStatement	if ( buf )		6245856	2					
ANR	6245882	Condition	buf	712:5:14777:14779	6245856	0	True				
ANR	6245883	Identifier	buf		6245856	0					
ANR	6245884	CompoundStatement		6:10:76:76	6245856	1					
ANR	6245885	ExpressionStatement	"memcpy ( buf , str , len )"	713:2:14786:14808	6245856	0	True				
ANR	6245886	CallExpression	"memcpy ( buf , str , len )"		6245856	0					
ANR	6245887	Callee	memcpy		6245856	0					
ANR	6245888	Identifier	memcpy		6245856	0					
ANR	6245889	ArgumentList	buf		6245856	1					
ANR	6245890	Argument	buf		6245856	0					
ANR	6245891	Identifier	buf		6245856	0					
ANR	6245892	Argument	str		6245856	1					
ANR	6245893	Identifier	str		6245856	0					
ANR	6245894	Argument	len		6245856	2					
ANR	6245895	Identifier	len		6245856	0					
ANR	6245896	ExpressionStatement	buf [ len ] = 0	714:2:14812:14824	6245856	1	True				
ANR	6245897	AssignmentExpression	buf [ len ] = 0		6245856	0		=			
ANR	6245898	ArrayIndexing	buf [ len ]		6245856	0					
ANR	6245899	Identifier	buf		6245856	0					
ANR	6245900	Identifier	len		6245856	1					
ANR	6245901	PrimaryExpression	0		6245856	1					
ANR	6245902	ReturnStatement	return buf ;	716:1:14830:14840	6245856	3	True				
ANR	6245903	Identifier	buf		6245856	0					
ANR	6245904	ReturnType	R_API char *		6245856	1					
ANR	6245905	Identifier	r_str_newlen		6245856	2					
ANR	6245906	ParameterList	"const char * str , int len"		6245856	3					
ANR	6245907	Parameter	const char * str	707:25:14679:14693	6245856	0	True				
ANR	6245908	ParameterType	const char *		6245856	0					
ANR	6245909	Identifier	str		6245856	1					
ANR	6245910	Parameter	int len	707:42:14696:14702	6245856	1	True				
ANR	6245911	ParameterType	int		6245856	0					
ANR	6245912	Identifier	len		6245856	1					
ANR	6245913	CFGEntryNode	ENTRY		6245856		True				
ANR	6245914	CFGExitNode	EXIT		6245856		True				
ANR	6245915	Symbol	str		6245856						
ANR	6245916	Symbol	malloc		6245856						
ANR	6245917	Symbol	buf		6245856						
ANR	6245918	Symbol	* buf		6245856						
ANR	6245919	Symbol	NULL		6245856						
ANR	6245920	Symbol	len		6245856						
ANR	6245921	Symbol	* len		6245856						
ANR	6245922	Function	r_str_trunc_ellipsis	719:0:14845:15100							
ANR	6245923	FunctionDef	"r_str_trunc_ellipsis (const char * str , int len)"		6245922	0					
ANR	6245924	CompoundStatement		719:59:14904:15100	6245922	0					
ANR	6245925	IfStatement	if ( ! str )		6245922	0					
ANR	6245926	Condition	! str	720:5:14911:14914	6245922	0	True				
ANR	6245927	UnaryOperationExpression	! str		6245922	0					
ANR	6245928	UnaryOperator	!		6245922	0					
ANR	6245929	Identifier	str		6245922	1					
ANR	6245930	CompoundStatement		2:11:12:12	6245922	1					
ANR	6245931	ReturnStatement	return NULL ;	721:2:14921:14932	6245922	0	True				
ANR	6245932	Identifier	NULL		6245922	0					
ANR	6245933	IfStatement	if ( strlen ( str ) < len )		6245922	1					
ANR	6245934	Condition	strlen ( str ) < len	723:5:14942:14959	6245922	0	True				
ANR	6245935	RelationalExpression	strlen ( str ) < len		6245922	0		<			
ANR	6245936	CallExpression	strlen ( str )		6245922	0					
ANR	6245937	Callee	strlen		6245922	0					
ANR	6245938	Identifier	strlen		6245922	0					
ANR	6245939	ArgumentList	str		6245922	1					
ANR	6245940	Argument	str		6245922	0					
ANR	6245941	Identifier	str		6245922	0					
ANR	6245942	Identifier	len		6245922	1					
ANR	6245943	CompoundStatement		5:25:57:57	6245922	1					
ANR	6245944	ReturnStatement	return strdup ( str ) ;	724:2:14966:14985	6245922	0	True				
ANR	6245945	CallExpression	strdup ( str )		6245922	0					
ANR	6245946	Callee	strdup		6245922	0					
ANR	6245947	Identifier	strdup		6245922	0					
ANR	6245948	ArgumentList	str		6245922	1					
ANR	6245949	Argument	str		6245922	0					
ANR	6245950	Identifier	str		6245922	0					
ANR	6245951	IdentifierDeclStatement	"char * buf = r_str_newlen ( str , len ) ;"	726:1:14991:15026	6245922	2	True				
ANR	6245952	IdentifierDecl	"* buf = r_str_newlen ( str , len )"		6245922	0					
ANR	6245953	IdentifierDeclType	char *		6245922	0					
ANR	6245954	Identifier	buf		6245922	1					
ANR	6245955	AssignmentExpression	"* buf = r_str_newlen ( str , len )"		6245922	2		=			
ANR	6245956	Identifier	buf		6245922	0					
ANR	6245957	CallExpression	"r_str_newlen ( str , len )"		6245922	1					
ANR	6245958	Callee	r_str_newlen		6245922	0					
ANR	6245959	Identifier	r_str_newlen		6245922	0					
ANR	6245960	ArgumentList	str		6245922	1					
ANR	6245961	Argument	str		6245922	0					
ANR	6245962	Identifier	str		6245922	0					
ANR	6245963	Argument	len		6245922	1					
ANR	6245964	Identifier	len		6245922	0					
ANR	6245965	IfStatement	if ( buf && len > 4 )		6245922	3					
ANR	6245966	Condition	buf && len > 4	727:5:15033:15046	6245922	0	True				
ANR	6245967	AndExpression	buf && len > 4		6245922	0		&&			
ANR	6245968	Identifier	buf		6245922	0					
ANR	6245969	RelationalExpression	len > 4		6245922	1		>			
ANR	6245970	Identifier	len		6245922	0					
ANR	6245971	PrimaryExpression	4		6245922	1					
ANR	6245972	CompoundStatement		9:21:144:144	6245922	1					
ANR	6245973	ExpressionStatement	"strcpy ( buf + len - 4 , ""..."" )"	728:2:15053:15082	6245922	0	True				
ANR	6245974	CallExpression	"strcpy ( buf + len - 4 , ""..."" )"		6245922	0					
ANR	6245975	Callee	strcpy		6245922	0					
ANR	6245976	Identifier	strcpy		6245922	0					
ANR	6245977	ArgumentList	buf + len - 4		6245922	1					
ANR	6245978	Argument	buf + len - 4		6245922	0					
ANR	6245979	AdditiveExpression	buf + len - 4		6245922	0		+			
ANR	6245980	Identifier	buf		6245922	0					
ANR	6245981	AdditiveExpression	len - 4		6245922	1		-			
ANR	6245982	Identifier	len		6245922	0					
ANR	6245983	PrimaryExpression	4		6245922	1					
ANR	6245984	Argument	"""..."""		6245922	1					
ANR	6245985	PrimaryExpression	"""..."""		6245922	0					
ANR	6245986	ReturnStatement	return buf ;	730:1:15088:15098	6245922	4	True				
ANR	6245987	Identifier	buf		6245922	0					
ANR	6245988	ReturnType	R_API char *		6245922	1					
ANR	6245989	Identifier	r_str_trunc_ellipsis		6245922	2					
ANR	6245990	ParameterList	"const char * str , int len"		6245922	3					
ANR	6245991	Parameter	const char * str	719:33:14878:14892	6245922	0	True				
ANR	6245992	ParameterType	const char *		6245922	0					
ANR	6245993	Identifier	str		6245922	1					
ANR	6245994	Parameter	int len	719:50:14895:14901	6245922	1	True				
ANR	6245995	ParameterType	int		6245922	0					
ANR	6245996	Identifier	len		6245922	1					
ANR	6245997	CFGEntryNode	ENTRY		6245922		True				
ANR	6245998	CFGExitNode	EXIT		6245922		True				
ANR	6245999	Symbol	str		6245922						
ANR	6246000	Symbol	strlen		6245922						
ANR	6246001	Symbol	buf		6245922						
ANR	6246002	Symbol	NULL		6245922						
ANR	6246003	Symbol	len		6245922						
ANR	6246004	Symbol	strdup		6245922						
ANR	6246005	Symbol	r_str_newlen		6245922						
ANR	6246006	Function	r_str_newf	733:0:15103:15446							
ANR	6246007	FunctionDef	r_str_newf (const char * fmt)		6246006	0					
ANR	6246008	CompoundStatement		733:45:15148:15446	6246006	0					
ANR	6246009	IdentifierDeclStatement	"va_list ap , ap2 ;"	734:1:15151:15166	6246006	0	True				
ANR	6246010	IdentifierDecl	ap		6246006	0					
ANR	6246011	IdentifierDeclType	va_list		6246006	0					
ANR	6246012	Identifier	ap		6246006	1					
ANR	6246013	IdentifierDecl	ap2		6246006	1					
ANR	6246014	IdentifierDeclType	va_list		6246006	0					
ANR	6246015	Identifier	ap2		6246006	1					
ANR	6246016	ExpressionStatement	"va_start ( ap , fmt )"	736:1:15170:15188	6246006	1	True				
ANR	6246017	CallExpression	"va_start ( ap , fmt )"		6246006	0					
ANR	6246018	Callee	va_start		6246006	0					
ANR	6246019	Identifier	va_start		6246006	0					
ANR	6246020	ArgumentList	ap		6246006	1					
ANR	6246021	Argument	ap		6246006	0					
ANR	6246022	Identifier	ap		6246006	0					
ANR	6246023	Argument	fmt		6246006	1					
ANR	6246024	Identifier	fmt		6246006	0					
ANR	6246025	IfStatement	"if ( ! strchr ( fmt , '%' ) )"		6246006	2					
ANR	6246026	Condition	"! strchr ( fmt , '%' )"	737:5:15195:15212	6246006	0	True				
ANR	6246027	UnaryOperationExpression	"! strchr ( fmt , '%' )"		6246006	0					
ANR	6246028	UnaryOperator	!		6246006	0					
ANR	6246029	CallExpression	"strchr ( fmt , '%' )"		6246006	1					
ANR	6246030	Callee	strchr		6246006	0					
ANR	6246031	Identifier	strchr		6246006	0					
ANR	6246032	ArgumentList	fmt		6246006	1					
ANR	6246033	Argument	fmt		6246006	0					
ANR	6246034	Identifier	fmt		6246006	0					
ANR	6246035	Argument	'%'		6246006	1					
ANR	6246036	PrimaryExpression	'%'		6246006	0					
ANR	6246037	CompoundStatement		5:25:66:66	6246006	1					
ANR	6246038	ExpressionStatement	va_end ( ap )	738:2:15219:15230	6246006	0	True				
ANR	6246039	CallExpression	va_end ( ap )		6246006	0					
ANR	6246040	Callee	va_end		6246006	0					
ANR	6246041	Identifier	va_end		6246006	0					
ANR	6246042	ArgumentList	ap		6246006	1					
ANR	6246043	Argument	ap		6246006	0					
ANR	6246044	Identifier	ap		6246006	0					
ANR	6246045	ReturnStatement	return strdup ( fmt ) ;	739:2:15234:15253	6246006	1	True				
ANR	6246046	CallExpression	strdup ( fmt )		6246006	0					
ANR	6246047	Callee	strdup		6246006	0					
ANR	6246048	Identifier	strdup		6246006	0					
ANR	6246049	ArgumentList	fmt		6246006	1					
ANR	6246050	Argument	fmt		6246006	0					
ANR	6246051	Identifier	fmt		6246006	0					
ANR	6246052	ExpressionStatement	"va_copy ( ap2 , ap )"	741:1:15259:15276	6246006	3	True				
ANR	6246053	CallExpression	"va_copy ( ap2 , ap )"		6246006	0					
ANR	6246054	Callee	va_copy		6246006	0					
ANR	6246055	Identifier	va_copy		6246006	0					
ANR	6246056	ArgumentList	ap2		6246006	1					
ANR	6246057	Argument	ap2		6246006	0					
ANR	6246058	Identifier	ap2		6246006	0					
ANR	6246059	Argument	ap		6246006	1					
ANR	6246060	Identifier	ap		6246006	0					
ANR	6246061	IdentifierDeclStatement	"int ret = vsnprintf ( NULL , 0 , fmt , ap2 ) ;"	742:1:15279:15318	6246006	4	True				
ANR	6246062	IdentifierDecl	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		6246006	0					
ANR	6246063	IdentifierDeclType	int		6246006	0					
ANR	6246064	Identifier	ret		6246006	1					
ANR	6246065	AssignmentExpression	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		6246006	2		=			
ANR	6246066	Identifier	ret		6246006	0					
ANR	6246067	CallExpression	"vsnprintf ( NULL , 0 , fmt , ap2 )"		6246006	1					
ANR	6246068	Callee	vsnprintf		6246006	0					
ANR	6246069	Identifier	vsnprintf		6246006	0					
ANR	6246070	ArgumentList	NULL		6246006	1					
ANR	6246071	Argument	NULL		6246006	0					
ANR	6246072	Identifier	NULL		6246006	0					
ANR	6246073	Argument	0		6246006	1					
ANR	6246074	PrimaryExpression	0		6246006	0					
ANR	6246075	Argument	fmt		6246006	2					
ANR	6246076	Identifier	fmt		6246006	0					
ANR	6246077	Argument	ap2		6246006	3					
ANR	6246078	Identifier	ap2		6246006	0					
ANR	6246079	ExpressionStatement	ret ++	743:1:15321:15326	6246006	5	True				
ANR	6246080	PostIncDecOperationExpression	ret ++		6246006	0					
ANR	6246081	Identifier	ret		6246006	0					
ANR	6246082	IncDec	++		6246006	1					
ANR	6246083	IdentifierDeclStatement	"char * p = calloc ( 1 , ret ) ;"	744:1:15329:15354	6246006	6	True				
ANR	6246084	IdentifierDecl	"* p = calloc ( 1 , ret )"		6246006	0					
ANR	6246085	IdentifierDeclType	char *		6246006	0					
ANR	6246086	Identifier	p		6246006	1					
ANR	6246087	AssignmentExpression	"* p = calloc ( 1 , ret )"		6246006	2		=			
ANR	6246088	Identifier	p		6246006	0					
ANR	6246089	CallExpression	"calloc ( 1 , ret )"		6246006	1					
ANR	6246090	Callee	calloc		6246006	0					
ANR	6246091	Identifier	calloc		6246006	0					
ANR	6246092	ArgumentList	1		6246006	1					
ANR	6246093	Argument	1		6246006	0					
ANR	6246094	PrimaryExpression	1		6246006	0					
ANR	6246095	Argument	ret		6246006	1					
ANR	6246096	Identifier	ret		6246006	0					
ANR	6246097	IfStatement	if ( p )		6246006	7					
ANR	6246098	Condition	p	745:5:15361:15361	6246006	0	True				
ANR	6246099	Identifier	p		6246006	0					
ANR	6246100	CompoundStatement		13:8:215:215	6246006	1					
ANR	6246101	ExpressionStatement	"( void ) vsnprintf ( p , ret , fmt , ap )"	746:2:15368:15401	6246006	0	True				
ANR	6246102	CastExpression	"( void ) vsnprintf ( p , ret , fmt , ap )"		6246006	0					
ANR	6246103	CastTarget	void		6246006	0					
ANR	6246104	CallExpression	"vsnprintf ( p , ret , fmt , ap )"		6246006	1					
ANR	6246105	Callee	vsnprintf		6246006	0					
ANR	6246106	Identifier	vsnprintf		6246006	0					
ANR	6246107	ArgumentList	p		6246006	1					
ANR	6246108	Argument	p		6246006	0					
ANR	6246109	Identifier	p		6246006	0					
ANR	6246110	Argument	ret		6246006	1					
ANR	6246111	Identifier	ret		6246006	0					
ANR	6246112	Argument	fmt		6246006	2					
ANR	6246113	Identifier	fmt		6246006	0					
ANR	6246114	Argument	ap		6246006	3					
ANR	6246115	Identifier	ap		6246006	0					
ANR	6246116	ExpressionStatement	va_end ( ap2 )	748:1:15407:15419	6246006	8	True				
ANR	6246117	CallExpression	va_end ( ap2 )		6246006	0					
ANR	6246118	Callee	va_end		6246006	0					
ANR	6246119	Identifier	va_end		6246006	0					
ANR	6246120	ArgumentList	ap2		6246006	1					
ANR	6246121	Argument	ap2		6246006	0					
ANR	6246122	Identifier	ap2		6246006	0					
ANR	6246123	ExpressionStatement	va_end ( ap )	749:1:15422:15433	6246006	9	True				
ANR	6246124	CallExpression	va_end ( ap )		6246006	0					
ANR	6246125	Callee	va_end		6246006	0					
ANR	6246126	Identifier	va_end		6246006	0					
ANR	6246127	ArgumentList	ap		6246006	1					
ANR	6246128	Argument	ap		6246006	0					
ANR	6246129	Identifier	ap		6246006	0					
ANR	6246130	ReturnStatement	return p ;	750:1:15436:15444	6246006	10	True				
ANR	6246131	Identifier	p		6246006	0					
ANR	6246132	ReturnType	R_API char *		6246006	1					
ANR	6246133	Identifier	r_str_newf		6246006	2					
ANR	6246134	ParameterList	const char * fmt		6246006	3					
ANR	6246135	Parameter	const char * fmt	733:23:15126:15140	6246006	0	True				
ANR	6246136	ParameterType	const char *		6246006	0					
ANR	6246137	Identifier	fmt		6246006	1					
ANR	6246138	CFGEntryNode	ENTRY		6246006		True				
ANR	6246139	CFGExitNode	EXIT		6246006		True				
ANR	6246140	Symbol	ret		6246006						
ANR	6246141	Symbol	p		6246006						
ANR	6246142	Symbol	ap2		6246006						
ANR	6246143	Symbol	NULL		6246006						
ANR	6246144	Symbol	strchr		6246006						
ANR	6246145	Symbol	strdup		6246006						
ANR	6246146	Symbol	calloc		6246006						
ANR	6246147	Symbol	fmt		6246006						
ANR	6246148	Symbol	vsnprintf		6246006						
ANR	6246149	Symbol	ap		6246006						
ANR	6246150	Function	r_str_ncpy	754:0:15526:15742							
ANR	6246151	FunctionDef	"r_str_ncpy (char * dst , const char * src , size_t n)"		6246150	0					
ANR	6246152	CompoundStatement		754:60:15586:15742	6246150	0					
ANR	6246153	IdentifierDeclStatement	int i ;	755:1:15589:15594	6246150	0	True				
ANR	6246154	IdentifierDecl	i		6246150	0					
ANR	6246155	IdentifierDeclType	int		6246150	0					
ANR	6246156	Identifier	i		6246150	1					
ANR	6246157	IfStatement	if ( n == 0 )		6246150	1					
ANR	6246158	Condition	n == 0	758:5:15635:15640	6246150	0	True				
ANR	6246159	EqualityExpression	n == 0		6246150	0		==			
ANR	6246160	Identifier	n		6246150	0					
ANR	6246161	PrimaryExpression	0		6246150	1					
ANR	6246162	CompoundStatement		5:13:56:56	6246150	1					
ANR	6246163	ReturnStatement	return ;	759:2:15647:15653	6246150	0	True				
ANR	6246164	ExpressionStatement	n --	762:1:15660:15663	6246150	2	True				
ANR	6246165	PostIncDecOperationExpression	n --		6246150	0					
ANR	6246166	Identifier	n		6246150	0					
ANR	6246167	IncDec	--		6246150	1					
ANR	6246168	ForStatement	"for ( i = 0 ; src [ i ] && n > 0 ; i ++ , n -- )"		6246150	3					
ANR	6246169	ForInit	i = 0 ;	763:6:15671:15676	6246150	0	True				
ANR	6246170	AssignmentExpression	i = 0		6246150	0		=			
ANR	6246171	Identifier	i		6246150	0					
ANR	6246172	PrimaryExpression	0		6246150	1					
ANR	6246173	Condition	src [ i ] && n > 0	763:13:15678:15692	6246150	1	True				
ANR	6246174	AndExpression	src [ i ] && n > 0		6246150	0		&&			
ANR	6246175	ArrayIndexing	src [ i ]		6246150	0					
ANR	6246176	Identifier	src		6246150	0					
ANR	6246177	Identifier	i		6246150	1					
ANR	6246178	RelationalExpression	n > 0		6246150	1		>			
ANR	6246179	Identifier	n		6246150	0					
ANR	6246180	PrimaryExpression	0		6246150	1					
ANR	6246181	Expression	"i ++ , n --"	763:30:15695:15702	6246150	2	True				
ANR	6246182	PostIncDecOperationExpression	i ++		6246150	0					
ANR	6246183	Identifier	i		6246150	0					
ANR	6246184	IncDec	++		6246150	1					
ANR	6246185	PostIncDecOperationExpression	n --		6246150	1					
ANR	6246186	Identifier	n		6246150	0					
ANR	6246187	IncDec	--		6246150	1					
ANR	6246188	CompoundStatement		10:40:118:118	6246150	3					
ANR	6246189	ExpressionStatement	dst [ i ] = src [ i ]	764:2:15709:15724	6246150	0	True				
ANR	6246190	AssignmentExpression	dst [ i ] = src [ i ]		6246150	0		=			
ANR	6246191	ArrayIndexing	dst [ i ]		6246150	0					
ANR	6246192	Identifier	dst		6246150	0					
ANR	6246193	Identifier	i		6246150	1					
ANR	6246194	ArrayIndexing	src [ i ]		6246150	1					
ANR	6246195	Identifier	src		6246150	0					
ANR	6246196	Identifier	i		6246150	1					
ANR	6246197	ExpressionStatement	dst [ i ] = 0	766:1:15730:15740	6246150	4	True				
ANR	6246198	AssignmentExpression	dst [ i ] = 0		6246150	0		=			
ANR	6246199	ArrayIndexing	dst [ i ]		6246150	0					
ANR	6246200	Identifier	dst		6246150	0					
ANR	6246201	Identifier	i		6246150	1					
ANR	6246202	PrimaryExpression	0		6246150	1					
ANR	6246203	ReturnType	R_API void		6246150	1					
ANR	6246204	Identifier	r_str_ncpy		6246150	2					
ANR	6246205	ParameterList	"char * dst , const char * src , size_t n"		6246150	3					
ANR	6246206	Parameter	char * dst	754:22:15548:15556	6246150	0	True				
ANR	6246207	ParameterType	char *		6246150	0					
ANR	6246208	Identifier	dst		6246150	1					
ANR	6246209	Parameter	const char * src	754:33:15559:15573	6246150	1	True				
ANR	6246210	ParameterType	const char *		6246150	0					
ANR	6246211	Identifier	src		6246150	1					
ANR	6246212	Parameter	size_t n	754:50:15576:15583	6246150	2	True				
ANR	6246213	ParameterType	size_t		6246150	0					
ANR	6246214	Identifier	n		6246150	1					
ANR	6246215	CFGEntryNode	ENTRY		6246150		True				
ANR	6246216	CFGExitNode	EXIT		6246150		True				
ANR	6246217	Symbol	* dst		6246150						
ANR	6246218	Symbol	* i		6246150						
ANR	6246219	Symbol	dst		6246150						
ANR	6246220	Symbol	src		6246150						
ANR	6246221	Symbol	i		6246150						
ANR	6246222	Symbol	n		6246150						
ANR	6246223	Symbol	* src		6246150						
ANR	6246224	Function	r_str_ccmp	771:0:15870:16052							
ANR	6246225	FunctionDef	"r_str_ccmp (const char * dst , const char * src , int ch)"		6246224	0					
ANR	6246226	CompoundStatement		771:64:15934:16052	6246224	0					
ANR	6246227	IdentifierDeclStatement	int i ;	772:1:15937:15942	6246224	0	True				
ANR	6246228	IdentifierDecl	i		6246224	0					
ANR	6246229	IdentifierDeclType	int		6246224	0					
ANR	6246230	Identifier	i		6246224	1					
ANR	6246231	ForStatement	for ( i = 0 ; src [ i ] && src [ i ] != ch ; i ++ )		6246224	1					
ANR	6246232	ForInit	i = 0 ;	773:6:15950:15955	6246224	0	True				
ANR	6246233	AssignmentExpression	i = 0		6246224	0		=			
ANR	6246234	Identifier	i		6246224	0					
ANR	6246235	PrimaryExpression	0		6246224	1					
ANR	6246236	Condition	src [ i ] && src [ i ] != ch	773:13:15957:15978	6246224	1	True				
ANR	6246237	AndExpression	src [ i ] && src [ i ] != ch		6246224	0		&&			
ANR	6246238	ArrayIndexing	src [ i ]		6246224	0					
ANR	6246239	Identifier	src		6246224	0					
ANR	6246240	Identifier	i		6246224	1					
ANR	6246241	EqualityExpression	src [ i ] != ch		6246224	1		!=			
ANR	6246242	ArrayIndexing	src [ i ]		6246224	0					
ANR	6246243	Identifier	src		6246224	0					
ANR	6246244	Identifier	i		6246224	1					
ANR	6246245	Identifier	ch		6246224	1					
ANR	6246246	PostIncDecOperationExpression	i ++	773:37:15981:15983	6246224	2	True				
ANR	6246247	Identifier	i		6246224	0					
ANR	6246248	IncDec	++		6246224	1					
ANR	6246249	CompoundStatement		3:42:51:51	6246224	3					
ANR	6246250	IfStatement	if ( dst [ i ] != src [ i ] )		6246224	0					
ANR	6246251	Condition	dst [ i ] != src [ i ]	774:6:15994:16009	6246224	0	True				
ANR	6246252	EqualityExpression	dst [ i ] != src [ i ]		6246224	0		!=			
ANR	6246253	ArrayIndexing	dst [ i ]		6246224	0					
ANR	6246254	Identifier	dst		6246224	0					
ANR	6246255	Identifier	i		6246224	1					
ANR	6246256	ArrayIndexing	src [ i ]		6246224	1					
ANR	6246257	Identifier	src		6246224	0					
ANR	6246258	Identifier	i		6246224	1					
ANR	6246259	CompoundStatement		4:24:77:77	6246224	1					
ANR	6246260	ReturnStatement	return true ;	775:3:16017:16028	6246224	0	True				
ANR	6246261	Identifier	true		6246224	0					
ANR	6246262	ReturnStatement	return false ;	778:1:16038:16050	6246224	2	True				
ANR	6246263	Identifier	false		6246224	0					
ANR	6246264	ReturnType	R_API bool		6246224	1					
ANR	6246265	Identifier	r_str_ccmp		6246224	2					
ANR	6246266	ParameterList	"const char * dst , const char * src , int ch"		6246224	3					
ANR	6246267	Parameter	const char * dst	771:22:15892:15906	6246224	0	True				
ANR	6246268	ParameterType	const char *		6246224	0					
ANR	6246269	Identifier	dst		6246224	1					
ANR	6246270	Parameter	const char * src	771:39:15909:15923	6246224	1	True				
ANR	6246271	ParameterType	const char *		6246224	0					
ANR	6246272	Identifier	src		6246224	1					
ANR	6246273	Parameter	int ch	771:56:15926:15931	6246224	2	True				
ANR	6246274	ParameterType	int		6246224	0					
ANR	6246275	Identifier	ch		6246224	1					
ANR	6246276	CFGEntryNode	ENTRY		6246224		True				
ANR	6246277	CFGExitNode	EXIT		6246224		True				
ANR	6246278	Symbol	* dst		6246224						
ANR	6246279	Symbol	* i		6246224						
ANR	6246280	Symbol	dst		6246224						
ANR	6246281	Symbol	src		6246224						
ANR	6246282	Symbol	ch		6246224						
ANR	6246283	Symbol	true		6246224						
ANR	6246284	Symbol	false		6246224						
ANR	6246285	Symbol	i		6246224						
ANR	6246286	Symbol	* src		6246224						
ANR	6246287	Function	r_str_cmp	782:0:16103:16345							
ANR	6246288	FunctionDef	"r_str_cmp (const char * a , const char * b , int len)"		6246287	0					
ANR	6246289	CompoundStatement		782:59:16162:16345	6246287	0					
ANR	6246290	IfStatement	if ( ( a == b ) || ( ! a && ! b ) )		6246287	0					
ANR	6246291	Condition	( a == b ) || ( ! a && ! b )	783:5:16169:16190	6246287	0	True				
ANR	6246292	OrExpression	( a == b ) || ( ! a && ! b )		6246287	0		||			
ANR	6246293	EqualityExpression	a == b		6246287	0		==			
ANR	6246294	Identifier	a		6246287	0					
ANR	6246295	Identifier	b		6246287	1					
ANR	6246296	AndExpression	! a && ! b		6246287	1		&&			
ANR	6246297	UnaryOperationExpression	! a		6246287	0					
ANR	6246298	UnaryOperator	!		6246287	0					
ANR	6246299	Identifier	a		6246287	1					
ANR	6246300	UnaryOperationExpression	! b		6246287	1					
ANR	6246301	UnaryOperator	!		6246287	0					
ANR	6246302	Identifier	b		6246287	1					
ANR	6246303	CompoundStatement		2:29:30:30	6246287	1					
ANR	6246304	ReturnStatement	return 0 ;	784:2:16197:16205	6246287	0	True				
ANR	6246305	PrimaryExpression	0		6246287	0					
ANR	6246306	IfStatement	if ( ! a && b )		6246287	1					
ANR	6246307	Condition	! a && b	786:5:16215:16221	6246287	0	True				
ANR	6246308	AndExpression	! a && b		6246287	0		&&			
ANR	6246309	UnaryOperationExpression	! a		6246287	0					
ANR	6246310	UnaryOperator	!		6246287	0					
ANR	6246311	Identifier	a		6246287	1					
ANR	6246312	Identifier	b		6246287	1					
ANR	6246313	CompoundStatement		5:14:61:61	6246287	1					
ANR	6246314	ReturnStatement	return - 1 ;	787:2:16228:16237	6246287	0	True				
ANR	6246315	UnaryOperationExpression	- 1		6246287	0					
ANR	6246316	UnaryOperator	-		6246287	0					
ANR	6246317	PrimaryExpression	1		6246287	1					
ANR	6246318	IfStatement	if ( a && ! b )		6246287	2					
ANR	6246319	Condition	a && ! b	789:5:16247:16253	6246287	0	True				
ANR	6246320	AndExpression	a && ! b		6246287	0		&&			
ANR	6246321	Identifier	a		6246287	0					
ANR	6246322	UnaryOperationExpression	! b		6246287	1					
ANR	6246323	UnaryOperator	!		6246287	0					
ANR	6246324	Identifier	b		6246287	1					
ANR	6246325	CompoundStatement		8:14:93:93	6246287	1					
ANR	6246326	ReturnStatement	return 1 ;	790:2:16260:16268	6246287	0	True				
ANR	6246327	PrimaryExpression	1		6246287	0					
ANR	6246328	IfStatement	if ( len < 0 )		6246287	3					
ANR	6246329	Condition	len < 0	792:5:16278:16284	6246287	0	True				
ANR	6246330	RelationalExpression	len < 0		6246287	0		<			
ANR	6246331	Identifier	len		6246287	0					
ANR	6246332	PrimaryExpression	0		6246287	1					
ANR	6246333	CompoundStatement		11:14:124:124	6246287	1					
ANR	6246334	ReturnStatement	"return strcmp ( a , b ) ;"	793:2:16291:16311	6246287	0	True				
ANR	6246335	CallExpression	"strcmp ( a , b )"		6246287	0					
ANR	6246336	Callee	strcmp		6246287	0					
ANR	6246337	Identifier	strcmp		6246287	0					
ANR	6246338	ArgumentList	a		6246287	1					
ANR	6246339	Argument	a		6246287	0					
ANR	6246340	Identifier	a		6246287	0					
ANR	6246341	Argument	b		6246287	1					
ANR	6246342	Identifier	b		6246287	0					
ANR	6246343	ReturnStatement	"return strncmp ( a , b , len ) ;"	795:1:16317:16343	6246287	4	True				
ANR	6246344	CallExpression	"strncmp ( a , b , len )"		6246287	0					
ANR	6246345	Callee	strncmp		6246287	0					
ANR	6246346	Identifier	strncmp		6246287	0					
ANR	6246347	ArgumentList	a		6246287	1					
ANR	6246348	Argument	a		6246287	0					
ANR	6246349	Identifier	a		6246287	0					
ANR	6246350	Argument	b		6246287	1					
ANR	6246351	Identifier	b		6246287	0					
ANR	6246352	Argument	len		6246287	2					
ANR	6246353	Identifier	len		6246287	0					
ANR	6246354	ReturnType	R_API int		6246287	1					
ANR	6246355	Identifier	r_str_cmp		6246287	2					
ANR	6246356	ParameterList	"const char * a , const char * b , int len"		6246287	3					
ANR	6246357	Parameter	const char * a	782:20:16123:16135	6246287	0	True				
ANR	6246358	ParameterType	const char *		6246287	0					
ANR	6246359	Identifier	a		6246287	1					
ANR	6246360	Parameter	const char * b	782:35:16138:16150	6246287	1	True				
ANR	6246361	ParameterType	const char *		6246287	0					
ANR	6246362	Identifier	b		6246287	1					
ANR	6246363	Parameter	int len	782:50:16153:16159	6246287	2	True				
ANR	6246364	ParameterType	int		6246287	0					
ANR	6246365	Identifier	len		6246287	1					
ANR	6246366	CFGEntryNode	ENTRY		6246287		True				
ANR	6246367	CFGExitNode	EXIT		6246287		True				
ANR	6246368	Symbol	strcmp		6246287						
ANR	6246369	Symbol	a		6246287						
ANR	6246370	Symbol	strncmp		6246287						
ANR	6246371	Symbol	b		6246287						
ANR	6246372	Symbol	len		6246287						
ANR	6246373	Function	r_str_ccpy	799:0:16418:16572							
ANR	6246374	FunctionDef	"r_str_ccpy (char * dst , char * src , int ch)"		6246373	0					
ANR	6246375	CompoundStatement		799:51:16469:16572	6246373	0					
ANR	6246376	IdentifierDeclStatement	int i ;	800:1:16472:16477	6246373	0	True				
ANR	6246377	IdentifierDecl	i		6246373	0					
ANR	6246378	IdentifierDeclType	int		6246373	0					
ANR	6246379	Identifier	i		6246373	1					
ANR	6246380	ForStatement	for ( i = 0 ; src [ i ] && src [ i ] != ch ; i ++ )		6246373	1					
ANR	6246381	ForInit	i = 0 ;	801:6:16485:16490	6246373	0	True				
ANR	6246382	AssignmentExpression	i = 0		6246373	0		=			
ANR	6246383	Identifier	i		6246373	0					
ANR	6246384	PrimaryExpression	0		6246373	1					
ANR	6246385	Condition	src [ i ] && src [ i ] != ch	801:13:16492:16513	6246373	1	True				
ANR	6246386	AndExpression	src [ i ] && src [ i ] != ch		6246373	0		&&			
ANR	6246387	ArrayIndexing	src [ i ]		6246373	0					
ANR	6246388	Identifier	src		6246373	0					
ANR	6246389	Identifier	i		6246373	1					
ANR	6246390	EqualityExpression	src [ i ] != ch		6246373	1		!=			
ANR	6246391	ArrayIndexing	src [ i ]		6246373	0					
ANR	6246392	Identifier	src		6246373	0					
ANR	6246393	Identifier	i		6246373	1					
ANR	6246394	Identifier	ch		6246373	1					
ANR	6246395	PostIncDecOperationExpression	i ++	801:37:16516:16518	6246373	2	True				
ANR	6246396	Identifier	i		6246373	0					
ANR	6246397	IncDec	++		6246373	1					
ANR	6246398	CompoundStatement		3:42:51:51	6246373	3					
ANR	6246399	ExpressionStatement	dst [ i ] = src [ i ]	802:2:16525:16540	6246373	0	True				
ANR	6246400	AssignmentExpression	dst [ i ] = src [ i ]		6246373	0		=			
ANR	6246401	ArrayIndexing	dst [ i ]		6246373	0					
ANR	6246402	Identifier	dst		6246373	0					
ANR	6246403	Identifier	i		6246373	1					
ANR	6246404	ArrayIndexing	src [ i ]		6246373	1					
ANR	6246405	Identifier	src		6246373	0					
ANR	6246406	Identifier	i		6246373	1					
ANR	6246407	ExpressionStatement	dst [ i ] = '\\0'	804:1:16546:16559	6246373	2	True				
ANR	6246408	AssignmentExpression	dst [ i ] = '\\0'		6246373	0		=			
ANR	6246409	ArrayIndexing	dst [ i ]		6246373	0					
ANR	6246410	Identifier	dst		6246373	0					
ANR	6246411	Identifier	i		6246373	1					
ANR	6246412	PrimaryExpression	'\\0'		6246373	1					
ANR	6246413	ReturnStatement	return i ;	805:1:16562:16570	6246373	3	True				
ANR	6246414	Identifier	i		6246373	0					
ANR	6246415	ReturnType	R_API int		6246373	1					
ANR	6246416	Identifier	r_str_ccpy		6246373	2					
ANR	6246417	ParameterList	"char * dst , char * src , int ch"		6246373	3					
ANR	6246418	Parameter	char * dst	799:21:16439:16447	6246373	0	True				
ANR	6246419	ParameterType	char *		6246373	0					
ANR	6246420	Identifier	dst		6246373	1					
ANR	6246421	Parameter	char * src	799:32:16450:16458	6246373	1	True				
ANR	6246422	ParameterType	char *		6246373	0					
ANR	6246423	Identifier	src		6246373	1					
ANR	6246424	Parameter	int ch	799:43:16461:16466	6246373	2	True				
ANR	6246425	ParameterType	int		6246373	0					
ANR	6246426	Identifier	ch		6246373	1					
ANR	6246427	CFGEntryNode	ENTRY		6246373		True				
ANR	6246428	CFGExitNode	EXIT		6246373		True				
ANR	6246429	Symbol	* dst		6246373						
ANR	6246430	Symbol	* i		6246373						
ANR	6246431	Symbol	dst		6246373						
ANR	6246432	Symbol	src		6246373						
ANR	6246433	Symbol	ch		6246373						
ANR	6246434	Symbol	i		6246373						
ANR	6246435	Symbol	* src		6246373						
ANR	6246436	Function	r_str_word_get_first	808:0:16575:16707							
ANR	6246437	FunctionDef	r_str_word_get_first (const char * text)		6246436	0					
ANR	6246438	CompoundStatement		808:51:16626:16707	6246436	0					
ANR	6246439	ForStatement	for ( ; * text && IS_SEPARATOR ( * text ) ; text ++ )		6246436	0					
ANR	6246440	Condition	* text && IS_SEPARATOR ( * text )	809:8:16636:16664	6246436	0	True				
ANR	6246441	AndExpression	* text && IS_SEPARATOR ( * text )		6246436	0		&&			
ANR	6246442	UnaryOperationExpression	* text		6246436	0					
ANR	6246443	UnaryOperator	*		6246436	0					
ANR	6246444	Identifier	text		6246436	1					
ANR	6246445	CallExpression	IS_SEPARATOR ( * text )		6246436	1					
ANR	6246446	Callee	IS_SEPARATOR		6246436	0					
ANR	6246447	Identifier	IS_SEPARATOR		6246436	0					
ANR	6246448	ArgumentList	* text		6246436	1					
ANR	6246449	Argument	* text		6246436	0					
ANR	6246450	UnaryOperationExpression	* text		6246436	0					
ANR	6246451	UnaryOperator	*		6246436	0					
ANR	6246452	Identifier	text		6246436	1					
ANR	6246453	PostIncDecOperationExpression	text ++	809:39:16667:16672	6246436	1	True				
ANR	6246454	Identifier	text		6246436	0					
ANR	6246455	IncDec	++		6246436	1					
ANR	6246456	CompoundStatement		2:47:48:48	6246436	2					
ANR	6246457	ExpressionStatement		810:2:16679:16679	6246436	0	True				
ANR	6246458	ReturnStatement	return strdup ( text ) ;	812:1:16685:16705	6246436	1	True				
ANR	6246459	CallExpression	strdup ( text )		6246436	0					
ANR	6246460	Callee	strdup		6246436	0					
ANR	6246461	Identifier	strdup		6246436	0					
ANR	6246462	ArgumentList	text		6246436	1					
ANR	6246463	Argument	text		6246436	0					
ANR	6246464	Identifier	text		6246436	0					
ANR	6246465	ReturnType	R_API char *		6246436	1					
ANR	6246466	Identifier	r_str_word_get_first		6246436	2					
ANR	6246467	ParameterList	const char * text		6246436	3					
ANR	6246468	Parameter	const char * text	808:33:16608:16623	6246436	0	True				
ANR	6246469	ParameterType	const char *		6246436	0					
ANR	6246470	Identifier	text		6246436	1					
ANR	6246471	CFGEntryNode	ENTRY		6246436		True				
ANR	6246472	CFGExitNode	EXIT		6246436		True				
ANR	6246473	Symbol	IS_SEPARATOR		6246436						
ANR	6246474	Symbol	* text		6246436						
ANR	6246475	Symbol	text		6246436						
ANR	6246476	Symbol	strdup		6246436						
ANR	6246477	Function	r_str_get	815:6:16716:16786							
ANR	6246478	FunctionDef	r_str_get (const char * str)		6246477	0					
ANR	6246479	CompoundStatement		815:45:16755:16786	6246477	0					
ANR	6246480	ReturnStatement	return str ? str : nullstr_c ;	816:1:16758:16784	6246477	0	True				
ANR	6246481	ConditionalExpression	str ? str : nullstr_c		6246477	0					
ANR	6246482	Condition	str		6246477	0					
ANR	6246483	Identifier	str		6246477	0					
ANR	6246484	Identifier	str		6246477	1					
ANR	6246485	Identifier	nullstr_c		6246477	2					
ANR	6246486	ReturnType	const char *		6246477	1					
ANR	6246487	Identifier	r_str_get		6246477	2					
ANR	6246488	ParameterList	const char * str		6246477	3					
ANR	6246489	Parameter	const char * str	815:28:16738:16752	6246477	0	True				
ANR	6246490	ParameterType	const char *		6246477	0					
ANR	6246491	Identifier	str		6246477	1					
ANR	6246492	CFGEntryNode	ENTRY		6246477		True				
ANR	6246493	CFGExitNode	EXIT		6246477		True				
ANR	6246494	Symbol	str		6246477						
ANR	6246495	Symbol	nullstr_c		6246477						
ANR	6246496	Function	r_str_get2	819:6:16795:16864							
ANR	6246497	FunctionDef	r_str_get2 (const char * str)		6246496	0					
ANR	6246498	CompoundStatement		819:46:16835:16864	6246496	0					
ANR	6246499	ReturnStatement	return str ? str : nullstr ;	820:1:16838:16862	6246496	0	True				
ANR	6246500	ConditionalExpression	str ? str : nullstr		6246496	0					
ANR	6246501	Condition	str		6246496	0					
ANR	6246502	Identifier	str		6246496	0					
ANR	6246503	Identifier	str		6246496	1					
ANR	6246504	Identifier	nullstr		6246496	2					
ANR	6246505	ReturnType	const char *		6246496	1					
ANR	6246506	Identifier	r_str_get2		6246496	2					
ANR	6246507	ParameterList	const char * str		6246496	3					
ANR	6246508	Parameter	const char * str	819:29:16818:16832	6246496	0	True				
ANR	6246509	ParameterType	const char *		6246496	0					
ANR	6246510	Identifier	str		6246496	1					
ANR	6246511	CFGEntryNode	ENTRY		6246496		True				
ANR	6246512	CFGExitNode	EXIT		6246496		True				
ANR	6246513	Symbol	str		6246496						
ANR	6246514	Symbol	nullstr		6246496						
ANR	6246515	Function	r_str_ndup	823:0:16867:17068							
ANR	6246516	FunctionDef	"r_str_ndup (const char * ptr , int len)"		6246515	0					
ANR	6246517	CompoundStatement		823:49:16916:17068	6246515	0					
ANR	6246518	IfStatement	if ( len < 0 )		6246515	0					
ANR	6246519	Condition	len < 0	824:5:16923:16929	6246515	0	True				
ANR	6246520	RelationalExpression	len < 0		6246515	0		<			
ANR	6246521	Identifier	len		6246515	0					
ANR	6246522	PrimaryExpression	0		6246515	1					
ANR	6246523	CompoundStatement		2:14:15:15	6246515	1					
ANR	6246524	ReturnStatement	return NULL ;	825:2:16936:16947	6246515	0	True				
ANR	6246525	Identifier	NULL		6246515	0					
ANR	6246526	IdentifierDeclStatement	char * out = malloc ( len + 1 ) ;	827:1:16953:16981	6246515	1	True				
ANR	6246527	IdentifierDecl	* out = malloc ( len + 1 )		6246515	0					
ANR	6246528	IdentifierDeclType	char *		6246515	0					
ANR	6246529	Identifier	out		6246515	1					
ANR	6246530	AssignmentExpression	* out = malloc ( len + 1 )		6246515	2		=			
ANR	6246531	Identifier	out		6246515	0					
ANR	6246532	CallExpression	malloc ( len + 1 )		6246515	1					
ANR	6246533	Callee	malloc		6246515	0					
ANR	6246534	Identifier	malloc		6246515	0					
ANR	6246535	ArgumentList	len + 1		6246515	1					
ANR	6246536	Argument	len + 1		6246515	0					
ANR	6246537	AdditiveExpression	len + 1		6246515	0		+			
ANR	6246538	Identifier	len		6246515	0					
ANR	6246539	PrimaryExpression	1		6246515	1					
ANR	6246540	IfStatement	if ( ! out )		6246515	2					
ANR	6246541	Condition	! out	828:5:16988:16991	6246515	0	True				
ANR	6246542	UnaryOperationExpression	! out		6246515	0					
ANR	6246543	UnaryOperator	!		6246515	0					
ANR	6246544	Identifier	out		6246515	1					
ANR	6246545	CompoundStatement		6:11:77:77	6246515	1					
ANR	6246546	ReturnStatement	return NULL ;	829:2:16998:17009	6246515	0	True				
ANR	6246547	Identifier	NULL		6246515	0					
ANR	6246548	ExpressionStatement	"strncpy ( out , ptr , len )"	831:1:17015:17038	6246515	3	True				
ANR	6246549	CallExpression	"strncpy ( out , ptr , len )"		6246515	0					
ANR	6246550	Callee	strncpy		6246515	0					
ANR	6246551	Identifier	strncpy		6246515	0					
ANR	6246552	ArgumentList	out		6246515	1					
ANR	6246553	Argument	out		6246515	0					
ANR	6246554	Identifier	out		6246515	0					
ANR	6246555	Argument	ptr		6246515	1					
ANR	6246556	Identifier	ptr		6246515	0					
ANR	6246557	Argument	len		6246515	2					
ANR	6246558	Identifier	len		6246515	0					
ANR	6246559	ExpressionStatement	out [ len ] = 0	832:1:17041:17053	6246515	4	True				
ANR	6246560	AssignmentExpression	out [ len ] = 0		6246515	0		=			
ANR	6246561	ArrayIndexing	out [ len ]		6246515	0					
ANR	6246562	Identifier	out		6246515	0					
ANR	6246563	Identifier	len		6246515	1					
ANR	6246564	PrimaryExpression	0		6246515	1					
ANR	6246565	ReturnStatement	return out ;	833:1:17056:17066	6246515	5	True				
ANR	6246566	Identifier	out		6246515	0					
ANR	6246567	ReturnType	R_API char *		6246515	1					
ANR	6246568	Identifier	r_str_ndup		6246515	2					
ANR	6246569	ParameterList	"const char * ptr , int len"		6246515	3					
ANR	6246570	Parameter	const char * ptr	823:23:16890:16904	6246515	0	True				
ANR	6246571	ParameterType	const char *		6246515	0					
ANR	6246572	Identifier	ptr		6246515	1					
ANR	6246573	Parameter	int len	823:40:16907:16913	6246515	1	True				
ANR	6246574	ParameterType	int		6246515	0					
ANR	6246575	Identifier	len		6246515	1					
ANR	6246576	CFGEntryNode	ENTRY		6246515		True				
ANR	6246577	CFGExitNode	EXIT		6246515		True				
ANR	6246578	Symbol	malloc		6246515						
ANR	6246579	Symbol	NULL		6246515						
ANR	6246580	Symbol	len		6246515						
ANR	6246581	Symbol	* out		6246515						
ANR	6246582	Symbol	ptr		6246515						
ANR	6246583	Symbol	out		6246515						
ANR	6246584	Symbol	* len		6246515						
ANR	6246585	Function	r_str_dup	837:0:17091:17187							
ANR	6246586	FunctionDef	"r_str_dup (char * ptr , const char * string)"		6246585	0					
ANR	6246587	CompoundStatement		837:53:17144:17187	6246585	0					
ANR	6246588	ExpressionStatement	free ( ptr )	838:1:17147:17157	6246585	0	True				
ANR	6246589	CallExpression	free ( ptr )		6246585	0					
ANR	6246590	Callee	free		6246585	0					
ANR	6246591	Identifier	free		6246585	0					
ANR	6246592	ArgumentList	ptr		6246585	1					
ANR	6246593	Argument	ptr		6246585	0					
ANR	6246594	Identifier	ptr		6246585	0					
ANR	6246595	ReturnStatement	return r_str_new ( string ) ;	839:1:17160:17185	6246585	1	True				
ANR	6246596	CallExpression	r_str_new ( string )		6246585	0					
ANR	6246597	Callee	r_str_new		6246585	0					
ANR	6246598	Identifier	r_str_new		6246585	0					
ANR	6246599	ArgumentList	string		6246585	1					
ANR	6246600	Argument	string		6246585	0					
ANR	6246601	Identifier	string		6246585	0					
ANR	6246602	ReturnType	R_API char *		6246585	1					
ANR	6246603	Identifier	r_str_dup		6246585	2					
ANR	6246604	ParameterList	"char * ptr , const char * string"		6246585	3					
ANR	6246605	Parameter	char * ptr	837:22:17113:17121	6246585	0	True				
ANR	6246606	ParameterType	char *		6246585	0					
ANR	6246607	Identifier	ptr		6246585	1					
ANR	6246608	Parameter	const char * string	837:33:17124:17141	6246585	1	True				
ANR	6246609	ParameterType	const char *		6246585	0					
ANR	6246610	Identifier	string		6246585	1					
ANR	6246611	CFGEntryNode	ENTRY		6246585		True				
ANR	6246612	CFGExitNode	EXIT		6246585		True				
ANR	6246613	Symbol	string		6246585						
ANR	6246614	Symbol	r_str_new		6246585						
ANR	6246615	Symbol	ptr		6246585						
ANR	6246616	Function	r_str_prepend	842:0:17190:17573							
ANR	6246617	FunctionDef	"r_str_prepend (char * ptr , const char * string)"		6246616	0					
ANR	6246618	CompoundStatement		842:57:17247:17573	6246616	0					
ANR	6246619	IdentifierDeclStatement	"int slen , plen ;"	843:1:17250:17264	6246616	0	True				
ANR	6246620	IdentifierDecl	slen		6246616	0					
ANR	6246621	IdentifierDeclType	int		6246616	0					
ANR	6246622	Identifier	slen		6246616	1					
ANR	6246623	IdentifierDecl	plen		6246616	1					
ANR	6246624	IdentifierDeclType	int		6246616	0					
ANR	6246625	Identifier	plen		6246616	1					
ANR	6246626	IfStatement	if ( ! ptr )		6246616	1					
ANR	6246627	Condition	! ptr	844:5:17271:17274	6246616	0	True				
ANR	6246628	UnaryOperationExpression	! ptr		6246616	0					
ANR	6246629	UnaryOperator	!		6246616	0					
ANR	6246630	Identifier	ptr		6246616	1					
ANR	6246631	CompoundStatement		3:11:29:29	6246616	1					
ANR	6246632	ReturnStatement	return strdup ( string ) ;	845:2:17281:17303	6246616	0	True				
ANR	6246633	CallExpression	strdup ( string )		6246616	0					
ANR	6246634	Callee	strdup		6246616	0					
ANR	6246635	Identifier	strdup		6246616	0					
ANR	6246636	ArgumentList	string		6246616	1					
ANR	6246637	Argument	string		6246616	0					
ANR	6246638	Identifier	string		6246616	0					
ANR	6246639	ExpressionStatement	plen = strlen ( ptr )	849:1:17376:17395	6246616	2	True				
ANR	6246640	AssignmentExpression	plen = strlen ( ptr )		6246616	0		=			
ANR	6246641	Identifier	plen		6246616	0					
ANR	6246642	CallExpression	strlen ( ptr )		6246616	1					
ANR	6246643	Callee	strlen		6246616	0					
ANR	6246644	Identifier	strlen		6246616	0					
ANR	6246645	ArgumentList	ptr		6246616	1					
ANR	6246646	Argument	ptr		6246616	0					
ANR	6246647	Identifier	ptr		6246616	0					
ANR	6246648	ExpressionStatement	slen = strlen ( string )	850:1:17398:17420	6246616	3	True				
ANR	6246649	AssignmentExpression	slen = strlen ( string )		6246616	0		=			
ANR	6246650	Identifier	slen		6246616	0					
ANR	6246651	CallExpression	strlen ( string )		6246616	1					
ANR	6246652	Callee	strlen		6246616	0					
ANR	6246653	Identifier	strlen		6246616	0					
ANR	6246654	ArgumentList	string		6246616	1					
ANR	6246655	Argument	string		6246616	0					
ANR	6246656	Identifier	string		6246616	0					
ANR	6246657	ExpressionStatement	"ptr = realloc ( ptr , slen + plen + 1 )"	851:1:17423:17459	6246616	4	True				
ANR	6246658	AssignmentExpression	"ptr = realloc ( ptr , slen + plen + 1 )"		6246616	0		=			
ANR	6246659	Identifier	ptr		6246616	0					
ANR	6246660	CallExpression	"realloc ( ptr , slen + plen + 1 )"		6246616	1					
ANR	6246661	Callee	realloc		6246616	0					
ANR	6246662	Identifier	realloc		6246616	0					
ANR	6246663	ArgumentList	ptr		6246616	1					
ANR	6246664	Argument	ptr		6246616	0					
ANR	6246665	Identifier	ptr		6246616	0					
ANR	6246666	Argument	slen + plen + 1		6246616	1					
ANR	6246667	AdditiveExpression	slen + plen + 1		6246616	0		+			
ANR	6246668	Identifier	slen		6246616	0					
ANR	6246669	AdditiveExpression	plen + 1		6246616	1		+			
ANR	6246670	Identifier	plen		6246616	0					
ANR	6246671	PrimaryExpression	1		6246616	1					
ANR	6246672	IfStatement	if ( ! ptr )		6246616	5					
ANR	6246673	Condition	! ptr	852:5:17466:17469	6246616	0	True				
ANR	6246674	UnaryOperationExpression	! ptr		6246616	0					
ANR	6246675	UnaryOperator	!		6246616	0					
ANR	6246676	Identifier	ptr		6246616	1					
ANR	6246677	CompoundStatement		11:11:224:224	6246616	1					
ANR	6246678	ReturnStatement	return NULL ;	853:2:17476:17487	6246616	0	True				
ANR	6246679	Identifier	NULL		6246616	0					
ANR	6246680	ExpressionStatement	"memmove ( ptr + slen , ptr , plen + 1 )"	855:1:17493:17528	6246616	6	True				
ANR	6246681	CallExpression	"memmove ( ptr + slen , ptr , plen + 1 )"		6246616	0					
ANR	6246682	Callee	memmove		6246616	0					
ANR	6246683	Identifier	memmove		6246616	0					
ANR	6246684	ArgumentList	ptr + slen		6246616	1					
ANR	6246685	Argument	ptr + slen		6246616	0					
ANR	6246686	AdditiveExpression	ptr + slen		6246616	0		+			
ANR	6246687	Identifier	ptr		6246616	0					
ANR	6246688	Identifier	slen		6246616	1					
ANR	6246689	Argument	ptr		6246616	1					
ANR	6246690	Identifier	ptr		6246616	0					
ANR	6246691	Argument	plen + 1		6246616	2					
ANR	6246692	AdditiveExpression	plen + 1		6246616	0		+			
ANR	6246693	Identifier	plen		6246616	0					
ANR	6246694	PrimaryExpression	1		6246616	1					
ANR	6246695	ExpressionStatement	"memmove ( ptr , string , slen )"	856:1:17531:17558	6246616	7	True				
ANR	6246696	CallExpression	"memmove ( ptr , string , slen )"		6246616	0					
ANR	6246697	Callee	memmove		6246616	0					
ANR	6246698	Identifier	memmove		6246616	0					
ANR	6246699	ArgumentList	ptr		6246616	1					
ANR	6246700	Argument	ptr		6246616	0					
ANR	6246701	Identifier	ptr		6246616	0					
ANR	6246702	Argument	string		6246616	1					
ANR	6246703	Identifier	string		6246616	0					
ANR	6246704	Argument	slen		6246616	2					
ANR	6246705	Identifier	slen		6246616	0					
ANR	6246706	ReturnStatement	return ptr ;	857:1:17561:17571	6246616	8	True				
ANR	6246707	Identifier	ptr		6246616	0					
ANR	6246708	ReturnType	R_API char *		6246616	1					
ANR	6246709	Identifier	r_str_prepend		6246616	2					
ANR	6246710	ParameterList	"char * ptr , const char * string"		6246616	3					
ANR	6246711	Parameter	char * ptr	842:26:17216:17224	6246616	0	True				
ANR	6246712	ParameterType	char *		6246616	0					
ANR	6246713	Identifier	ptr		6246616	1					
ANR	6246714	Parameter	const char * string	842:37:17227:17244	6246616	1	True				
ANR	6246715	ParameterType	const char *		6246616	0					
ANR	6246716	Identifier	string		6246616	1					
ANR	6246717	CFGEntryNode	ENTRY		6246616		True				
ANR	6246718	CFGExitNode	EXIT		6246616		True				
ANR	6246719	Symbol	plen		6246616						
ANR	6246720	Symbol	strlen		6246616						
ANR	6246721	Symbol	NULL		6246616						
ANR	6246722	Symbol	string		6246616						
ANR	6246723	Symbol	slen		6246616						
ANR	6246724	Symbol	strdup		6246616						
ANR	6246725	Symbol	realloc		6246616						
ANR	6246726	Symbol	ptr		6246616						
ANR	6246727	Function	r_str_appendlen	860:0:17576:17753							
ANR	6246728	FunctionDef	"r_str_appendlen (char * ptr , const char * string , int slen)"		6246727	0					
ANR	6246729	CompoundStatement		860:69:17645:17753	6246727	0					
ANR	6246730	IdentifierDeclStatement	"char * msg = r_str_newlen ( string , slen ) ;"	861:1:17648:17687	6246727	0	True				
ANR	6246731	IdentifierDecl	"* msg = r_str_newlen ( string , slen )"		6246727	0					
ANR	6246732	IdentifierDeclType	char *		6246727	0					
ANR	6246733	Identifier	msg		6246727	1					
ANR	6246734	AssignmentExpression	"* msg = r_str_newlen ( string , slen )"		6246727	2		=			
ANR	6246735	Identifier	msg		6246727	0					
ANR	6246736	CallExpression	"r_str_newlen ( string , slen )"		6246727	1					
ANR	6246737	Callee	r_str_newlen		6246727	0					
ANR	6246738	Identifier	r_str_newlen		6246727	0					
ANR	6246739	ArgumentList	string		6246727	1					
ANR	6246740	Argument	string		6246727	0					
ANR	6246741	Identifier	string		6246727	0					
ANR	6246742	Argument	slen		6246727	1					
ANR	6246743	Identifier	slen		6246727	0					
ANR	6246744	IdentifierDeclStatement	"char * ret = r_str_append ( ptr , msg ) ;"	862:1:17690:17725	6246727	1	True				
ANR	6246745	IdentifierDecl	"* ret = r_str_append ( ptr , msg )"		6246727	0					
ANR	6246746	IdentifierDeclType	char *		6246727	0					
ANR	6246747	Identifier	ret		6246727	1					
ANR	6246748	AssignmentExpression	"* ret = r_str_append ( ptr , msg )"		6246727	2		=			
ANR	6246749	Identifier	ret		6246727	0					
ANR	6246750	CallExpression	"r_str_append ( ptr , msg )"		6246727	1					
ANR	6246751	Callee	r_str_append		6246727	0					
ANR	6246752	Identifier	r_str_append		6246727	0					
ANR	6246753	ArgumentList	ptr		6246727	1					
ANR	6246754	Argument	ptr		6246727	0					
ANR	6246755	Identifier	ptr		6246727	0					
ANR	6246756	Argument	msg		6246727	1					
ANR	6246757	Identifier	msg		6246727	0					
ANR	6246758	ExpressionStatement	free ( msg )	863:1:17728:17738	6246727	2	True				
ANR	6246759	CallExpression	free ( msg )		6246727	0					
ANR	6246760	Callee	free		6246727	0					
ANR	6246761	Identifier	free		6246727	0					
ANR	6246762	ArgumentList	msg		6246727	1					
ANR	6246763	Argument	msg		6246727	0					
ANR	6246764	Identifier	msg		6246727	0					
ANR	6246765	ReturnStatement	return ret ;	864:1:17741:17751	6246727	3	True				
ANR	6246766	Identifier	ret		6246727	0					
ANR	6246767	ReturnType	R_API char *		6246727	1					
ANR	6246768	Identifier	r_str_appendlen		6246727	2					
ANR	6246769	ParameterList	"char * ptr , const char * string , int slen"		6246727	3					
ANR	6246770	Parameter	char * ptr	860:28:17604:17612	6246727	0	True				
ANR	6246771	ParameterType	char *		6246727	0					
ANR	6246772	Identifier	ptr		6246727	1					
ANR	6246773	Parameter	const char * string	860:39:17615:17632	6246727	1	True				
ANR	6246774	ParameterType	const char *		6246727	0					
ANR	6246775	Identifier	string		6246727	1					
ANR	6246776	Parameter	int slen	860:59:17635:17642	6246727	2	True				
ANR	6246777	ParameterType	int		6246727	0					
ANR	6246778	Identifier	slen		6246727	1					
ANR	6246779	CFGEntryNode	ENTRY		6246727		True				
ANR	6246780	CFGExitNode	EXIT		6246727		True				
ANR	6246781	Symbol	msg		6246727						
ANR	6246782	Symbol	ret		6246727						
ANR	6246783	Symbol	r_str_append		6246727						
ANR	6246784	Symbol	string		6246727						
ANR	6246785	Symbol	slen		6246727						
ANR	6246786	Symbol	r_str_newlen		6246727						
ANR	6246787	Symbol	ptr		6246727						
ANR	6246788	Function	r_str_append_owned	867:0:17756:17912							
ANR	6246789	FunctionDef	"r_str_append_owned (char * ptr , char * string)"		6246788	0					
ANR	6246790	CompoundStatement		867:56:17812:17912	6246788	0					
ANR	6246791	IfStatement	if ( ! ptr )		6246788	0					
ANR	6246792	Condition	! ptr	868:5:17819:17822	6246788	0	True				
ANR	6246793	UnaryOperationExpression	! ptr		6246788	0					
ANR	6246794	UnaryOperator	!		6246788	0					
ANR	6246795	Identifier	ptr		6246788	1					
ANR	6246796	CompoundStatement		2:11:12:12	6246788	1					
ANR	6246797	ReturnStatement	return string ;	869:2:17829:17842	6246788	0	True				
ANR	6246798	Identifier	string		6246788	0					
ANR	6246799	IdentifierDeclStatement	"char * r = r_str_append ( ptr , string ) ;"	871:1:17848:17883	6246788	1	True				
ANR	6246800	IdentifierDecl	"* r = r_str_append ( ptr , string )"		6246788	0					
ANR	6246801	IdentifierDeclType	char *		6246788	0					
ANR	6246802	Identifier	r		6246788	1					
ANR	6246803	AssignmentExpression	"* r = r_str_append ( ptr , string )"		6246788	2		=			
ANR	6246804	Identifier	r		6246788	0					
ANR	6246805	CallExpression	"r_str_append ( ptr , string )"		6246788	1					
ANR	6246806	Callee	r_str_append		6246788	0					
ANR	6246807	Identifier	r_str_append		6246788	0					
ANR	6246808	ArgumentList	ptr		6246788	1					
ANR	6246809	Argument	ptr		6246788	0					
ANR	6246810	Identifier	ptr		6246788	0					
ANR	6246811	Argument	string		6246788	1					
ANR	6246812	Identifier	string		6246788	0					
ANR	6246813	ExpressionStatement	free ( string )	872:1:17886:17899	6246788	2	True				
ANR	6246814	CallExpression	free ( string )		6246788	0					
ANR	6246815	Callee	free		6246788	0					
ANR	6246816	Identifier	free		6246788	0					
ANR	6246817	ArgumentList	string		6246788	1					
ANR	6246818	Argument	string		6246788	0					
ANR	6246819	Identifier	string		6246788	0					
ANR	6246820	ReturnStatement	return r ;	873:1:17902:17910	6246788	3	True				
ANR	6246821	Identifier	r		6246788	0					
ANR	6246822	ReturnType	R_API char *		6246788	1					
ANR	6246823	Identifier	r_str_append_owned		6246788	2					
ANR	6246824	ParameterList	"char * ptr , char * string"		6246788	3					
ANR	6246825	Parameter	char * ptr	867:31:17787:17795	6246788	0	True				
ANR	6246826	ParameterType	char *		6246788	0					
ANR	6246827	Identifier	ptr		6246788	1					
ANR	6246828	Parameter	char * string	867:42:17798:17809	6246788	1	True				
ANR	6246829	ParameterType	char *		6246788	0					
ANR	6246830	Identifier	string		6246788	1					
ANR	6246831	CFGEntryNode	ENTRY		6246788		True				
ANR	6246832	CFGExitNode	EXIT		6246788		True				
ANR	6246833	Symbol	r_str_append		6246788						
ANR	6246834	Symbol	r		6246788						
ANR	6246835	Symbol	string		6246788						
ANR	6246836	Symbol	ptr		6246788						
ANR	6246837	Function	r_str_append	879:0:18008:18370							
ANR	6246838	FunctionDef	"r_str_append (char * ptr , const char * string)"		6246837	0					
ANR	6246839	CompoundStatement		879:56:18064:18370	6246837	0					
ANR	6246840	IfStatement	if ( string && ! ptr )		6246837	0					
ANR	6246841	Condition	string && ! ptr	880:5:18071:18084	6246837	0	True				
ANR	6246842	AndExpression	string && ! ptr		6246837	0		&&			
ANR	6246843	Identifier	string		6246837	0					
ANR	6246844	UnaryOperationExpression	! ptr		6246837	1					
ANR	6246845	UnaryOperator	!		6246837	0					
ANR	6246846	Identifier	ptr		6246837	1					
ANR	6246847	CompoundStatement		2:21:22:22	6246837	1					
ANR	6246848	ReturnStatement	return strdup ( string ) ;	881:2:18091:18113	6246837	0	True				
ANR	6246849	CallExpression	strdup ( string )		6246837	0					
ANR	6246850	Callee	strdup		6246837	0					
ANR	6246851	Identifier	strdup		6246837	0					
ANR	6246852	ArgumentList	string		6246837	1					
ANR	6246853	Argument	string		6246837	0					
ANR	6246854	Identifier	string		6246837	0					
ANR	6246855	IfStatement	if ( ! string )		6246837	1					
ANR	6246856	Condition	! string	883:5:18123:18129	6246837	0	True				
ANR	6246857	UnaryOperationExpression	! string		6246837	0					
ANR	6246858	UnaryOperator	!		6246837	0					
ANR	6246859	Identifier	string		6246837	1					
ANR	6246860	CompoundStatement		5:14:67:67	6246837	1					
ANR	6246861	ReturnStatement	return ptr ;	884:2:18136:18146	6246837	0	True				
ANR	6246862	Identifier	ptr		6246837	0					
ANR	6246863	IdentifierDeclStatement	int plen = strlen ( ptr ) ;	886:1:18152:18175	6246837	2	True				
ANR	6246864	IdentifierDecl	plen = strlen ( ptr )		6246837	0					
ANR	6246865	IdentifierDeclType	int		6246837	0					
ANR	6246866	Identifier	plen		6246837	1					
ANR	6246867	AssignmentExpression	plen = strlen ( ptr )		6246837	2		=			
ANR	6246868	Identifier	plen		6246837	0					
ANR	6246869	CallExpression	strlen ( ptr )		6246837	1					
ANR	6246870	Callee	strlen		6246837	0					
ANR	6246871	Identifier	strlen		6246837	0					
ANR	6246872	ArgumentList	ptr		6246837	1					
ANR	6246873	Argument	ptr		6246837	0					
ANR	6246874	Identifier	ptr		6246837	0					
ANR	6246875	IdentifierDeclStatement	int slen = strlen ( string ) ;	887:1:18178:18204	6246837	3	True				
ANR	6246876	IdentifierDecl	slen = strlen ( string )		6246837	0					
ANR	6246877	IdentifierDeclType	int		6246837	0					
ANR	6246878	Identifier	slen		6246837	1					
ANR	6246879	AssignmentExpression	slen = strlen ( string )		6246837	2		=			
ANR	6246880	Identifier	slen		6246837	0					
ANR	6246881	CallExpression	strlen ( string )		6246837	1					
ANR	6246882	Callee	strlen		6246837	0					
ANR	6246883	Identifier	strlen		6246837	0					
ANR	6246884	ArgumentList	string		6246837	1					
ANR	6246885	Argument	string		6246837	0					
ANR	6246886	Identifier	string		6246837	0					
ANR	6246887	IdentifierDeclStatement	"char * newptr = realloc ( ptr , slen + plen + 1 ) ;"	888:1:18207:18252	6246837	4	True				
ANR	6246888	IdentifierDecl	"* newptr = realloc ( ptr , slen + plen + 1 )"		6246837	0					
ANR	6246889	IdentifierDeclType	char *		6246837	0					
ANR	6246890	Identifier	newptr		6246837	1					
ANR	6246891	AssignmentExpression	"* newptr = realloc ( ptr , slen + plen + 1 )"		6246837	2		=			
ANR	6246892	Identifier	newptr		6246837	0					
ANR	6246893	CallExpression	"realloc ( ptr , slen + plen + 1 )"		6246837	1					
ANR	6246894	Callee	realloc		6246837	0					
ANR	6246895	Identifier	realloc		6246837	0					
ANR	6246896	ArgumentList	ptr		6246837	1					
ANR	6246897	Argument	ptr		6246837	0					
ANR	6246898	Identifier	ptr		6246837	0					
ANR	6246899	Argument	slen + plen + 1		6246837	1					
ANR	6246900	AdditiveExpression	slen + plen + 1		6246837	0		+			
ANR	6246901	Identifier	slen		6246837	0					
ANR	6246902	AdditiveExpression	plen + 1		6246837	1		+			
ANR	6246903	Identifier	plen		6246837	0					
ANR	6246904	PrimaryExpression	1		6246837	1					
ANR	6246905	IfStatement	if ( ! newptr )		6246837	5					
ANR	6246906	Condition	! newptr	889:5:18259:18265	6246837	0	True				
ANR	6246907	UnaryOperationExpression	! newptr		6246837	0					
ANR	6246908	UnaryOperator	!		6246837	0					
ANR	6246909	Identifier	newptr		6246837	1					
ANR	6246910	CompoundStatement		11:14:203:203	6246837	1					
ANR	6246911	ExpressionStatement	free ( ptr )	890:2:18272:18282	6246837	0	True				
ANR	6246912	CallExpression	free ( ptr )		6246837	0					
ANR	6246913	Callee	free		6246837	0					
ANR	6246914	Identifier	free		6246837	0					
ANR	6246915	ArgumentList	ptr		6246837	1					
ANR	6246916	Argument	ptr		6246837	0					
ANR	6246917	Identifier	ptr		6246837	0					
ANR	6246918	ReturnStatement	return NULL ;	891:2:18286:18297	6246837	1	True				
ANR	6246919	Identifier	NULL		6246837	0					
ANR	6246920	ExpressionStatement	ptr = newptr	893:1:18303:18315	6246837	6	True				
ANR	6246921	AssignmentExpression	ptr = newptr		6246837	0		=			
ANR	6246922	Identifier	ptr		6246837	0					
ANR	6246923	Identifier	newptr		6246837	1					
ANR	6246924	ExpressionStatement	"memcpy ( ptr + plen , string , slen + 1 )"	894:1:18318:18355	6246837	7	True				
ANR	6246925	CallExpression	"memcpy ( ptr + plen , string , slen + 1 )"		6246837	0					
ANR	6246926	Callee	memcpy		6246837	0					
ANR	6246927	Identifier	memcpy		6246837	0					
ANR	6246928	ArgumentList	ptr + plen		6246837	1					
ANR	6246929	Argument	ptr + plen		6246837	0					
ANR	6246930	AdditiveExpression	ptr + plen		6246837	0		+			
ANR	6246931	Identifier	ptr		6246837	0					
ANR	6246932	Identifier	plen		6246837	1					
ANR	6246933	Argument	string		6246837	1					
ANR	6246934	Identifier	string		6246837	0					
ANR	6246935	Argument	slen + 1		6246837	2					
ANR	6246936	AdditiveExpression	slen + 1		6246837	0		+			
ANR	6246937	Identifier	slen		6246837	0					
ANR	6246938	PrimaryExpression	1		6246837	1					
ANR	6246939	ReturnStatement	return ptr ;	895:1:18358:18368	6246837	8	True				
ANR	6246940	Identifier	ptr		6246837	0					
ANR	6246941	ReturnType	R_API char *		6246837	1					
ANR	6246942	Identifier	r_str_append		6246837	2					
ANR	6246943	ParameterList	"char * ptr , const char * string"		6246837	3					
ANR	6246944	Parameter	char * ptr	879:25:18033:18041	6246837	0	True				
ANR	6246945	ParameterType	char *		6246837	0					
ANR	6246946	Identifier	ptr		6246837	1					
ANR	6246947	Parameter	const char * string	879:36:18044:18061	6246837	1	True				
ANR	6246948	ParameterType	const char *		6246837	0					
ANR	6246949	Identifier	string		6246837	1					
ANR	6246950	CFGEntryNode	ENTRY		6246837		True				
ANR	6246951	CFGExitNode	EXIT		6246837		True				
ANR	6246952	Symbol	strlen		6246837						
ANR	6246953	Symbol	plen		6246837						
ANR	6246954	Symbol	newptr		6246837						
ANR	6246955	Symbol	NULL		6246837						
ANR	6246956	Symbol	string		6246837						
ANR	6246957	Symbol	slen		6246837						
ANR	6246958	Symbol	strdup		6246837						
ANR	6246959	Symbol	realloc		6246837						
ANR	6246960	Symbol	ptr		6246837						
ANR	6246961	Function	r_str_appendf	898:0:18373:18786							
ANR	6246962	FunctionDef	"r_str_appendf (char * ptr , const char * fmt)"		6246961	0					
ANR	6246963	CompoundStatement		898:59:18432:18786	6246961	0					
ANR	6246964	IdentifierDeclStatement	"va_list ap , ap2 ;"	899:1:18435:18450	6246961	0	True				
ANR	6246965	IdentifierDecl	ap		6246961	0					
ANR	6246966	IdentifierDeclType	va_list		6246961	0					
ANR	6246967	Identifier	ap		6246961	1					
ANR	6246968	IdentifierDecl	ap2		6246961	1					
ANR	6246969	IdentifierDeclType	va_list		6246961	0					
ANR	6246970	Identifier	ap2		6246961	1					
ANR	6246971	ExpressionStatement	"va_start ( ap , fmt )"	901:1:18454:18472	6246961	1	True				
ANR	6246972	CallExpression	"va_start ( ap , fmt )"		6246961	0					
ANR	6246973	Callee	va_start		6246961	0					
ANR	6246974	Identifier	va_start		6246961	0					
ANR	6246975	ArgumentList	ap		6246961	1					
ANR	6246976	Argument	ap		6246961	0					
ANR	6246977	Identifier	ap		6246961	0					
ANR	6246978	Argument	fmt		6246961	1					
ANR	6246979	Identifier	fmt		6246961	0					
ANR	6246980	IfStatement	"if ( ! strchr ( fmt , '%' ) )"		6246961	2					
ANR	6246981	Condition	"! strchr ( fmt , '%' )"	902:5:18479:18496	6246961	0	True				
ANR	6246982	UnaryOperationExpression	"! strchr ( fmt , '%' )"		6246961	0					
ANR	6246983	UnaryOperator	!		6246961	0					
ANR	6246984	CallExpression	"strchr ( fmt , '%' )"		6246961	1					
ANR	6246985	Callee	strchr		6246961	0					
ANR	6246986	Identifier	strchr		6246961	0					
ANR	6246987	ArgumentList	fmt		6246961	1					
ANR	6246988	Argument	fmt		6246961	0					
ANR	6246989	Identifier	fmt		6246961	0					
ANR	6246990	Argument	'%'		6246961	1					
ANR	6246991	PrimaryExpression	'%'		6246961	0					
ANR	6246992	CompoundStatement		5:25:66:66	6246961	1					
ANR	6246993	ExpressionStatement	va_end ( ap )	903:2:18503:18514	6246961	0	True				
ANR	6246994	CallExpression	va_end ( ap )		6246961	0					
ANR	6246995	Callee	va_end		6246961	0					
ANR	6246996	Identifier	va_end		6246961	0					
ANR	6246997	ArgumentList	ap		6246961	1					
ANR	6246998	Argument	ap		6246961	0					
ANR	6246999	Identifier	ap		6246961	0					
ANR	6247000	ReturnStatement	"return r_str_append ( ptr , fmt ) ;"	904:2:18518:18548	6246961	1	True				
ANR	6247001	CallExpression	"r_str_append ( ptr , fmt )"		6246961	0					
ANR	6247002	Callee	r_str_append		6246961	0					
ANR	6247003	Identifier	r_str_append		6246961	0					
ANR	6247004	ArgumentList	ptr		6246961	1					
ANR	6247005	Argument	ptr		6246961	0					
ANR	6247006	Identifier	ptr		6246961	0					
ANR	6247007	Argument	fmt		6246961	1					
ANR	6247008	Identifier	fmt		6246961	0					
ANR	6247009	ExpressionStatement	"va_copy ( ap2 , ap )"	906:1:18554:18571	6246961	3	True				
ANR	6247010	CallExpression	"va_copy ( ap2 , ap )"		6246961	0					
ANR	6247011	Callee	va_copy		6246961	0					
ANR	6247012	Identifier	va_copy		6246961	0					
ANR	6247013	ArgumentList	ap2		6246961	1					
ANR	6247014	Argument	ap2		6246961	0					
ANR	6247015	Identifier	ap2		6246961	0					
ANR	6247016	Argument	ap		6246961	1					
ANR	6247017	Identifier	ap		6246961	0					
ANR	6247018	IdentifierDeclStatement	"int ret = vsnprintf ( NULL , 0 , fmt , ap2 ) ;"	907:1:18574:18613	6246961	4	True				
ANR	6247019	IdentifierDecl	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		6246961	0					
ANR	6247020	IdentifierDeclType	int		6246961	0					
ANR	6247021	Identifier	ret		6246961	1					
ANR	6247022	AssignmentExpression	"ret = vsnprintf ( NULL , 0 , fmt , ap2 )"		6246961	2		=			
ANR	6247023	Identifier	ret		6246961	0					
ANR	6247024	CallExpression	"vsnprintf ( NULL , 0 , fmt , ap2 )"		6246961	1					
ANR	6247025	Callee	vsnprintf		6246961	0					
ANR	6247026	Identifier	vsnprintf		6246961	0					
ANR	6247027	ArgumentList	NULL		6246961	1					
ANR	6247028	Argument	NULL		6246961	0					
ANR	6247029	Identifier	NULL		6246961	0					
ANR	6247030	Argument	0		6246961	1					
ANR	6247031	PrimaryExpression	0		6246961	0					
ANR	6247032	Argument	fmt		6246961	2					
ANR	6247033	Identifier	fmt		6246961	0					
ANR	6247034	Argument	ap2		6246961	3					
ANR	6247035	Identifier	ap2		6246961	0					
ANR	6247036	ExpressionStatement	ret ++	908:1:18616:18621	6246961	5	True				
ANR	6247037	PostIncDecOperationExpression	ret ++		6246961	0					
ANR	6247038	Identifier	ret		6246961	0					
ANR	6247039	IncDec	++		6246961	1					
ANR	6247040	IdentifierDeclStatement	"char * p = calloc ( 1 , ret ) ;"	909:1:18624:18649	6246961	6	True				
ANR	6247041	IdentifierDecl	"* p = calloc ( 1 , ret )"		6246961	0					
ANR	6247042	IdentifierDeclType	char *		6246961	0					
ANR	6247043	Identifier	p		6246961	1					
ANR	6247044	AssignmentExpression	"* p = calloc ( 1 , ret )"		6246961	2		=			
ANR	6247045	Identifier	p		6246961	0					
ANR	6247046	CallExpression	"calloc ( 1 , ret )"		6246961	1					
ANR	6247047	Callee	calloc		6246961	0					
ANR	6247048	Identifier	calloc		6246961	0					
ANR	6247049	ArgumentList	1		6246961	1					
ANR	6247050	Argument	1		6246961	0					
ANR	6247051	PrimaryExpression	1		6246961	0					
ANR	6247052	Argument	ret		6246961	1					
ANR	6247053	Identifier	ret		6246961	0					
ANR	6247054	IfStatement	if ( p )		6246961	7					
ANR	6247055	Condition	p	910:5:18656:18656	6246961	0	True				
ANR	6247056	Identifier	p		6246961	0					
ANR	6247057	CompoundStatement		13:8:226:226	6246961	1					
ANR	6247058	ExpressionStatement	"( void ) vsnprintf ( p , ret , fmt , ap )"	911:2:18663:18696	6246961	0	True				
ANR	6247059	CastExpression	"( void ) vsnprintf ( p , ret , fmt , ap )"		6246961	0					
ANR	6247060	CastTarget	void		6246961	0					
ANR	6247061	CallExpression	"vsnprintf ( p , ret , fmt , ap )"		6246961	1					
ANR	6247062	Callee	vsnprintf		6246961	0					
ANR	6247063	Identifier	vsnprintf		6246961	0					
ANR	6247064	ArgumentList	p		6246961	1					
ANR	6247065	Argument	p		6246961	0					
ANR	6247066	Identifier	p		6246961	0					
ANR	6247067	Argument	ret		6246961	1					
ANR	6247068	Identifier	ret		6246961	0					
ANR	6247069	Argument	fmt		6246961	2					
ANR	6247070	Identifier	fmt		6246961	0					
ANR	6247071	Argument	ap		6246961	3					
ANR	6247072	Identifier	ap		6246961	0					
ANR	6247073	ExpressionStatement	"ptr = r_str_append ( ptr , p )"	912:2:18700:18727	6246961	1	True				
ANR	6247074	AssignmentExpression	"ptr = r_str_append ( ptr , p )"		6246961	0		=			
ANR	6247075	Identifier	ptr		6246961	0					
ANR	6247076	CallExpression	"r_str_append ( ptr , p )"		6246961	1					
ANR	6247077	Callee	r_str_append		6246961	0					
ANR	6247078	Identifier	r_str_append		6246961	0					
ANR	6247079	ArgumentList	ptr		6246961	1					
ANR	6247080	Argument	ptr		6246961	0					
ANR	6247081	Identifier	ptr		6246961	0					
ANR	6247082	Argument	p		6246961	1					
ANR	6247083	Identifier	p		6246961	0					
ANR	6247084	ExpressionStatement	free ( p )	913:2:18731:18739	6246961	2	True				
ANR	6247085	CallExpression	free ( p )		6246961	0					
ANR	6247086	Callee	free		6246961	0					
ANR	6247087	Identifier	free		6246961	0					
ANR	6247088	ArgumentList	p		6246961	1					
ANR	6247089	Argument	p		6246961	0					
ANR	6247090	Identifier	p		6246961	0					
ANR	6247091	ExpressionStatement	va_end ( ap2 )	915:1:18745:18757	6246961	8	True				
ANR	6247092	CallExpression	va_end ( ap2 )		6246961	0					
ANR	6247093	Callee	va_end		6246961	0					
ANR	6247094	Identifier	va_end		6246961	0					
ANR	6247095	ArgumentList	ap2		6246961	1					
ANR	6247096	Argument	ap2		6246961	0					
ANR	6247097	Identifier	ap2		6246961	0					
ANR	6247098	ExpressionStatement	va_end ( ap )	916:1:18760:18771	6246961	9	True				
ANR	6247099	CallExpression	va_end ( ap )		6246961	0					
ANR	6247100	Callee	va_end		6246961	0					
ANR	6247101	Identifier	va_end		6246961	0					
ANR	6247102	ArgumentList	ap		6246961	1					
ANR	6247103	Argument	ap		6246961	0					
ANR	6247104	Identifier	ap		6246961	0					
ANR	6247105	ReturnStatement	return ptr ;	917:1:18774:18784	6246961	10	True				
ANR	6247106	Identifier	ptr		6246961	0					
ANR	6247107	ReturnType	R_API char *		6246961	1					
ANR	6247108	Identifier	r_str_appendf		6246961	2					
ANR	6247109	ParameterList	"char * ptr , const char * fmt"		6246961	3					
ANR	6247110	Parameter	char * ptr	898:26:18399:18407	6246961	0	True				
ANR	6247111	ParameterType	char *		6246961	0					
ANR	6247112	Identifier	ptr		6246961	1					
ANR	6247113	Parameter	const char * fmt	898:37:18410:18424	6246961	1	True				
ANR	6247114	ParameterType	const char *		6246961	0					
ANR	6247115	Identifier	fmt		6246961	1					
ANR	6247116	CFGEntryNode	ENTRY		6246961		True				
ANR	6247117	CFGExitNode	EXIT		6246961		True				
ANR	6247118	Symbol	ret		6246961						
ANR	6247119	Symbol	p		6246961						
ANR	6247120	Symbol	r_str_append		6246961						
ANR	6247121	Symbol	ap2		6246961						
ANR	6247122	Symbol	NULL		6246961						
ANR	6247123	Symbol	strchr		6246961						
ANR	6247124	Symbol	calloc		6246961						
ANR	6247125	Symbol	fmt		6246961						
ANR	6247126	Symbol	vsnprintf		6246961						
ANR	6247127	Symbol	ptr		6246961						
ANR	6247128	Symbol	ap		6246961						
ANR	6247129	Function	r_str_appendch	920:0:18789:18887							
ANR	6247130	FunctionDef	"r_str_appendch (char * x , char y)"		6247129	0					
ANR	6247131	CompoundStatement		920:44:18833:18887	6247129	0					
ANR	6247132	IdentifierDeclStatement	"char b [ 2 ] = { y , 0 } ;"	921:1:18836:18856	6247129	0	True				
ANR	6247133	IdentifierDecl	"b [ 2 ] = { y , 0 }"		6247129	0					
ANR	6247134	IdentifierDeclType	char [ 2 ]		6247129	0					
ANR	6247135	Identifier	b		6247129	1					
ANR	6247136	PrimaryExpression	2		6247129	2					
ANR	6247137	AssignmentExpression	"b [ 2 ] = { y , 0 }"		6247129	3		=			
ANR	6247138	Identifier	b		6247129	0					
ANR	6247139	InitializerList	y		6247129	1					
ANR	6247140	Identifier	y		6247129	0					
ANR	6247141	PrimaryExpression	0		6247129	1					
ANR	6247142	ReturnStatement	"return r_str_append ( x , b ) ;"	922:1:18859:18885	6247129	1	True				
ANR	6247143	CallExpression	"r_str_append ( x , b )"		6247129	0					
ANR	6247144	Callee	r_str_append		6247129	0					
ANR	6247145	Identifier	r_str_append		6247129	0					
ANR	6247146	ArgumentList	x		6247129	1					
ANR	6247147	Argument	x		6247129	0					
ANR	6247148	Identifier	x		6247129	0					
ANR	6247149	Argument	b		6247129	1					
ANR	6247150	Identifier	b		6247129	0					
ANR	6247151	ReturnType	R_API char *		6247129	1					
ANR	6247152	Identifier	r_str_appendch		6247129	2					
ANR	6247153	ParameterList	"char * x , char y"		6247129	3					
ANR	6247154	Parameter	char * x	920:27:18816:18822	6247129	0	True				
ANR	6247155	ParameterType	char *		6247129	0					
ANR	6247156	Identifier	x		6247129	1					
ANR	6247157	Parameter	char y	920:36:18825:18830	6247129	1	True				
ANR	6247158	ParameterType	char		6247129	0					
ANR	6247159	Identifier	y		6247129	1					
ANR	6247160	CFGEntryNode	ENTRY		6247129		True				
ANR	6247161	CFGExitNode	EXIT		6247129		True				
ANR	6247162	Symbol	r_str_append		6247129						
ANR	6247163	Symbol	b		6247129						
ANR	6247164	Symbol	x		6247129						
ANR	6247165	Symbol	y		6247129						
ANR	6247166	Function	r_str_replace	925:0:18890:19896							
ANR	6247167	FunctionDef	"r_str_replace (char * str , const char * key , const char * val , int g)"		6247166	0					
ANR	6247168	CompoundStatement		925:78:18968:19896	6247166	0					
ANR	6247169	IfStatement	if ( g == 'i' )		6247166	0					
ANR	6247170	Condition	g == 'i'	926:5:18975:18982	6247166	0	True				
ANR	6247171	EqualityExpression	g == 'i'		6247166	0		==			
ANR	6247172	Identifier	g		6247166	0					
ANR	6247173	PrimaryExpression	'i'		6247166	1					
ANR	6247174	CompoundStatement		2:15:16:16	6247166	1					
ANR	6247175	ReturnStatement	"return r_str_replace_icase ( str , key , val , g , true ) ;"	927:2:18989:19040	6247166	0	True				
ANR	6247176	CallExpression	"r_str_replace_icase ( str , key , val , g , true )"		6247166	0					
ANR	6247177	Callee	r_str_replace_icase		6247166	0					
ANR	6247178	Identifier	r_str_replace_icase		6247166	0					
ANR	6247179	ArgumentList	str		6247166	1					
ANR	6247180	Argument	str		6247166	0					
ANR	6247181	Identifier	str		6247166	0					
ANR	6247182	Argument	key		6247166	1					
ANR	6247183	Identifier	key		6247166	0					
ANR	6247184	Argument	val		6247166	2					
ANR	6247185	Identifier	val		6247166	0					
ANR	6247186	Argument	g		6247166	3					
ANR	6247187	Identifier	g		6247166	0					
ANR	6247188	Argument	true		6247166	4					
ANR	6247189	Identifier	true		6247166	0					
ANR	6247190	ExpressionStatement	"r_return_val_if_fail ( str && key && val , NULL )"	929:1:19046:19092	6247166	1	True				
ANR	6247191	CallExpression	"r_return_val_if_fail ( str && key && val , NULL )"		6247166	0					
ANR	6247192	Callee	r_return_val_if_fail		6247166	0					
ANR	6247193	Identifier	r_return_val_if_fail		6247166	0					
ANR	6247194	ArgumentList	str && key && val		6247166	1					
ANR	6247195	Argument	str && key && val		6247166	0					
ANR	6247196	AndExpression	str && key && val		6247166	0		&&			
ANR	6247197	Identifier	str		6247166	0					
ANR	6247198	AndExpression	key && val		6247166	1		&&			
ANR	6247199	Identifier	key		6247166	0					
ANR	6247200	Identifier	val		6247166	1					
ANR	6247201	Argument	NULL		6247166	1					
ANR	6247202	Identifier	NULL		6247166	0					
ANR	6247203	IdentifierDeclStatement	"int off , i , slen ;"	931:1:19096:19112	6247166	2	True				
ANR	6247204	IdentifierDecl	off		6247166	0					
ANR	6247205	IdentifierDeclType	int		6247166	0					
ANR	6247206	Identifier	off		6247166	1					
ANR	6247207	IdentifierDecl	i		6247166	1					
ANR	6247208	IdentifierDeclType	int		6247166	0					
ANR	6247209	Identifier	i		6247166	1					
ANR	6247210	IdentifierDecl	slen		6247166	2					
ANR	6247211	IdentifierDeclType	int		6247166	0					
ANR	6247212	Identifier	slen		6247166	1					
ANR	6247213	IdentifierDeclStatement	"char * newstr , * scnd , * p = str ;"	932:1:19115:19144	6247166	3	True				
ANR	6247214	IdentifierDecl	* newstr		6247166	0					
ANR	6247215	IdentifierDeclType	char *		6247166	0					
ANR	6247216	Identifier	newstr		6247166	1					
ANR	6247217	IdentifierDecl	* scnd		6247166	1					
ANR	6247218	IdentifierDeclType	char *		6247166	0					
ANR	6247219	Identifier	scnd		6247166	1					
ANR	6247220	IdentifierDecl	* p = str		6247166	2					
ANR	6247221	IdentifierDeclType	char *		6247166	0					
ANR	6247222	Identifier	p		6247166	1					
ANR	6247223	AssignmentExpression	* p = str		6247166	2		=			
ANR	6247224	Identifier	str		6247166	0					
ANR	6247225	Identifier	str		6247166	1					
ANR	6247226	IdentifierDeclStatement	int klen = strlen ( key ) ;	933:1:19147:19170	6247166	4	True				
ANR	6247227	IdentifierDecl	klen = strlen ( key )		6247166	0					
ANR	6247228	IdentifierDeclType	int		6247166	0					
ANR	6247229	Identifier	klen		6247166	1					
ANR	6247230	AssignmentExpression	klen = strlen ( key )		6247166	2		=			
ANR	6247231	Identifier	klen		6247166	0					
ANR	6247232	CallExpression	strlen ( key )		6247166	1					
ANR	6247233	Callee	strlen		6247166	0					
ANR	6247234	Identifier	strlen		6247166	0					
ANR	6247235	ArgumentList	key		6247166	1					
ANR	6247236	Argument	key		6247166	0					
ANR	6247237	Identifier	key		6247166	0					
ANR	6247238	IdentifierDeclStatement	int vlen = strlen ( val ) ;	934:1:19173:19196	6247166	5	True				
ANR	6247239	IdentifierDecl	vlen = strlen ( val )		6247166	0					
ANR	6247240	IdentifierDeclType	int		6247166	0					
ANR	6247241	Identifier	vlen		6247166	1					
ANR	6247242	AssignmentExpression	vlen = strlen ( val )		6247166	2		=			
ANR	6247243	Identifier	vlen		6247166	0					
ANR	6247244	CallExpression	strlen ( val )		6247166	1					
ANR	6247245	Callee	strlen		6247166	0					
ANR	6247246	Identifier	strlen		6247166	0					
ANR	6247247	ArgumentList	val		6247166	1					
ANR	6247248	Argument	val		6247166	0					
ANR	6247249	Identifier	val		6247166	0					
ANR	6247250	IfStatement	if ( klen == 1 && vlen < 2 )		6247166	6					
ANR	6247251	Condition	klen == 1 && vlen < 2	935:5:19203:19223	6247166	0	True				
ANR	6247252	AndExpression	klen == 1 && vlen < 2		6247166	0		&&			
ANR	6247253	EqualityExpression	klen == 1		6247166	0		==			
ANR	6247254	Identifier	klen		6247166	0					
ANR	6247255	PrimaryExpression	1		6247166	1					
ANR	6247256	RelationalExpression	vlen < 2		6247166	1		<			
ANR	6247257	Identifier	vlen		6247166	0					
ANR	6247258	PrimaryExpression	2		6247166	1					
ANR	6247259	CompoundStatement		11:28:257:257	6247166	1					
ANR	6247260	ExpressionStatement	"r_str_replace_char ( str , * key , * val )"	936:2:19230:19266	6247166	0	True				
ANR	6247261	CallExpression	"r_str_replace_char ( str , * key , * val )"		6247166	0					
ANR	6247262	Callee	r_str_replace_char		6247166	0					
ANR	6247263	Identifier	r_str_replace_char		6247166	0					
ANR	6247264	ArgumentList	str		6247166	1					
ANR	6247265	Argument	str		6247166	0					
ANR	6247266	Identifier	str		6247166	0					
ANR	6247267	Argument	* key		6247166	1					
ANR	6247268	UnaryOperationExpression	* key		6247166	0					
ANR	6247269	UnaryOperator	*		6247166	0					
ANR	6247270	Identifier	key		6247166	1					
ANR	6247271	Argument	* val		6247166	2					
ANR	6247272	UnaryOperationExpression	* val		6247166	0					
ANR	6247273	UnaryOperator	*		6247166	0					
ANR	6247274	Identifier	val		6247166	1					
ANR	6247275	ReturnStatement	return str ;	937:2:19270:19280	6247166	1	True				
ANR	6247276	Identifier	str		6247166	0					
ANR	6247277	IfStatement	"if ( klen == vlen && ! strcmp ( key , val ) )"		6247166	7					
ANR	6247278	Condition	"klen == vlen && ! strcmp ( key , val )"	939:5:19290:19323	6247166	0	True				
ANR	6247279	AndExpression	"klen == vlen && ! strcmp ( key , val )"		6247166	0		&&			
ANR	6247280	EqualityExpression	klen == vlen		6247166	0		==			
ANR	6247281	Identifier	klen		6247166	0					
ANR	6247282	Identifier	vlen		6247166	1					
ANR	6247283	UnaryOperationExpression	"! strcmp ( key , val )"		6247166	1					
ANR	6247284	UnaryOperator	!		6247166	0					
ANR	6247285	CallExpression	"strcmp ( key , val )"		6247166	1					
ANR	6247286	Callee	strcmp		6247166	0					
ANR	6247287	Identifier	strcmp		6247166	0					
ANR	6247288	ArgumentList	key		6247166	1					
ANR	6247289	Argument	key		6247166	0					
ANR	6247290	Identifier	key		6247166	0					
ANR	6247291	Argument	val		6247166	1					
ANR	6247292	Identifier	val		6247166	0					
ANR	6247293	CompoundStatement		15:41:357:357	6247166	1					
ANR	6247294	ReturnStatement	return str ;	940:2:19330:19340	6247166	0	True				
ANR	6247295	Identifier	str		6247166	0					
ANR	6247296	ExpressionStatement	slen = strlen ( str )	942:1:19346:19365	6247166	8	True				
ANR	6247297	AssignmentExpression	slen = strlen ( str )		6247166	0		=			
ANR	6247298	Identifier	slen		6247166	0					
ANR	6247299	CallExpression	strlen ( str )		6247166	1					
ANR	6247300	Callee	strlen		6247166	0					
ANR	6247301	Identifier	strlen		6247166	0					
ANR	6247302	ArgumentList	str		6247166	1					
ANR	6247303	Argument	str		6247166	0					
ANR	6247304	Identifier	str		6247166	0					
ANR	6247305	IdentifierDeclStatement	char * q = str ;	943:1:19368:19381	6247166	9	True				
ANR	6247306	IdentifierDecl	* q = str		6247166	0					
ANR	6247307	IdentifierDeclType	char *		6247166	0					
ANR	6247308	Identifier	q		6247166	1					
ANR	6247309	AssignmentExpression	* q = str		6247166	2		=			
ANR	6247310	Identifier	str		6247166	0					
ANR	6247311	Identifier	str		6247166	1					
ANR	6247312	ForStatement	for ( ; ; )		6247166	10					
ANR	6247313	CompoundStatement		20:10:424:424	6247166	0					
ANR	6247314	ExpressionStatement	"p = strstr ( q , key )"	945:2:19397:19416	6247166	0	True				
ANR	6247315	AssignmentExpression	"p = strstr ( q , key )"		6247166	0		=			
ANR	6247316	Identifier	p		6247166	0					
ANR	6247317	CallExpression	"strstr ( q , key )"		6247166	1					
ANR	6247318	Callee	strstr		6247166	0					
ANR	6247319	Identifier	strstr		6247166	0					
ANR	6247320	ArgumentList	q		6247166	1					
ANR	6247321	Argument	q		6247166	0					
ANR	6247322	Identifier	q		6247166	0					
ANR	6247323	Argument	key		6247166	1					
ANR	6247324	Identifier	key		6247166	0					
ANR	6247325	IfStatement	if ( ! p )		6247166	1					
ANR	6247326	Condition	! p	946:6:19424:19425	6247166	0	True				
ANR	6247327	UnaryOperationExpression	! p		6247166	0					
ANR	6247328	UnaryOperator	!		6247166	0					
ANR	6247329	Identifier	p		6247166	1					
ANR	6247330	CompoundStatement		22:10:459:459	6247166	1					
ANR	6247331	BreakStatement	break ;	947:3:19433:19438	6247166	0	True				
ANR	6247332	ExpressionStatement	off = ( int ) ( size_t ) ( p - str )	949:2:19446:19474	6247166	2	True				
ANR	6247333	AssignmentExpression	off = ( int ) ( size_t ) ( p - str )		6247166	0		=			
ANR	6247334	Identifier	off		6247166	0					
ANR	6247335	CastExpression	( int ) ( size_t ) ( p - str )		6247166	1					
ANR	6247336	CastTarget	int		6247166	0					
ANR	6247337	CastExpression	( size_t ) ( p - str )		6247166	1					
ANR	6247338	CastTarget	size_t		6247166	0					
ANR	6247339	AdditiveExpression	p - str		6247166	1		-			
ANR	6247340	Identifier	p		6247166	0					
ANR	6247341	Identifier	str		6247166	1					
ANR	6247342	ExpressionStatement	scnd = strdup ( p + klen )	950:2:19478:19502	6247166	3	True				
ANR	6247343	AssignmentExpression	scnd = strdup ( p + klen )		6247166	0		=			
ANR	6247344	Identifier	scnd		6247166	0					
ANR	6247345	CallExpression	strdup ( p + klen )		6247166	1					
ANR	6247346	Callee	strdup		6247166	0					
ANR	6247347	Identifier	strdup		6247166	0					
ANR	6247348	ArgumentList	p + klen		6247166	1					
ANR	6247349	Argument	p + klen		6247166	0					
ANR	6247350	AdditiveExpression	p + klen		6247166	0		+			
ANR	6247351	Identifier	p		6247166	0					
ANR	6247352	Identifier	klen		6247166	1					
ANR	6247353	IfStatement	if ( ! scnd )		6247166	4					
ANR	6247354	Condition	! scnd	951:6:19510:19514	6247166	0	True				
ANR	6247355	UnaryOperationExpression	! scnd		6247166	0					
ANR	6247356	UnaryOperator	!		6247166	0					
ANR	6247357	Identifier	scnd		6247166	1					
ANR	6247358	CompoundStatement		27:13:548:548	6247166	1					
ANR	6247359	ExpressionStatement	R_FREE ( str )	952:3:19522:19534	6247166	0	True				
ANR	6247360	CallExpression	R_FREE ( str )		6247166	0					
ANR	6247361	Callee	R_FREE		6247166	0					
ANR	6247362	Identifier	R_FREE		6247166	0					
ANR	6247363	ArgumentList	str		6247166	1					
ANR	6247364	Argument	str		6247166	0					
ANR	6247365	Identifier	str		6247166	0					
ANR	6247366	BreakStatement	break ;	953:3:19539:19544	6247166	1	True				
ANR	6247367	ExpressionStatement	slen += vlen - klen	955:2:19552:19571	6247166	5	True				
ANR	6247368	AssignmentExpression	slen += vlen - klen		6247166	0		+=			
ANR	6247369	Identifier	slen		6247166	0					
ANR	6247370	AdditiveExpression	vlen - klen		6247166	1		-			
ANR	6247371	Identifier	vlen		6247166	0					
ANR	6247372	Identifier	klen		6247166	1					
ANR	6247373	ExpressionStatement	"newstr = realloc ( str , slen + 1 )"	956:2:19575:19607	6247166	6	True				
ANR	6247374	AssignmentExpression	"newstr = realloc ( str , slen + 1 )"		6247166	0		=			
ANR	6247375	Identifier	newstr		6247166	0					
ANR	6247376	CallExpression	"realloc ( str , slen + 1 )"		6247166	1					
ANR	6247377	Callee	realloc		6247166	0					
ANR	6247378	Identifier	realloc		6247166	0					
ANR	6247379	ArgumentList	str		6247166	1					
ANR	6247380	Argument	str		6247166	0					
ANR	6247381	Identifier	str		6247166	0					
ANR	6247382	Argument	slen + 1		6247166	1					
ANR	6247383	AdditiveExpression	slen + 1		6247166	0		+			
ANR	6247384	Identifier	slen		6247166	0					
ANR	6247385	PrimaryExpression	1		6247166	1					
ANR	6247386	IfStatement	if ( ! newstr )		6247166	7					
ANR	6247387	Condition	! newstr	957:6:19615:19621	6247166	0	True				
ANR	6247388	UnaryOperationExpression	! newstr		6247166	0					
ANR	6247389	UnaryOperator	!		6247166	0					
ANR	6247390	Identifier	newstr		6247166	1					
ANR	6247391	CompoundStatement		33:15:655:655	6247166	1					
ANR	6247392	ExpressionStatement	"eprintf ( ""alloc fail\\n"" )"	958:3:19629:19653	6247166	0	True				
ANR	6247393	CallExpression	"eprintf ( ""alloc fail\\n"" )"		6247166	0					
ANR	6247394	Callee	eprintf		6247166	0					
ANR	6247395	Identifier	eprintf		6247166	0					
ANR	6247396	ArgumentList	"""alloc fail\\n"""		6247166	1					
ANR	6247397	Argument	"""alloc fail\\n"""		6247166	0					
ANR	6247398	PrimaryExpression	"""alloc fail\\n"""		6247166	0					
ANR	6247399	ExpressionStatement	R_FREE ( str )	959:3:19658:19670	6247166	1	True				
ANR	6247400	CallExpression	R_FREE ( str )		6247166	0					
ANR	6247401	Callee	R_FREE		6247166	0					
ANR	6247402	Identifier	R_FREE		6247166	0					
ANR	6247403	ArgumentList	str		6247166	1					
ANR	6247404	Argument	str		6247166	0					
ANR	6247405	Identifier	str		6247166	0					
ANR	6247406	ExpressionStatement	free ( scnd )	960:3:19675:19686	6247166	2	True				
ANR	6247407	CallExpression	free ( scnd )		6247166	0					
ANR	6247408	Callee	free		6247166	0					
ANR	6247409	Identifier	free		6247166	0					
ANR	6247410	ArgumentList	scnd		6247166	1					
ANR	6247411	Argument	scnd		6247166	0					
ANR	6247412	Identifier	scnd		6247166	0					
ANR	6247413	BreakStatement	break ;	961:3:19691:19696	6247166	3	True				
ANR	6247414	ExpressionStatement	str = newstr	963:2:19704:19716	6247166	8	True				
ANR	6247415	AssignmentExpression	str = newstr		6247166	0		=			
ANR	6247416	Identifier	str		6247166	0					
ANR	6247417	Identifier	newstr		6247166	1					
ANR	6247418	ExpressionStatement	p = str + off	964:2:19720:19733	6247166	9	True				
ANR	6247419	AssignmentExpression	p = str + off		6247166	0		=			
ANR	6247420	Identifier	p		6247166	0					
ANR	6247421	AdditiveExpression	str + off		6247166	1		+			
ANR	6247422	Identifier	str		6247166	0					
ANR	6247423	Identifier	off		6247166	1					
ANR	6247424	ExpressionStatement	"memcpy ( p , val , vlen )"	965:2:19737:19758	6247166	10	True				
ANR	6247425	CallExpression	"memcpy ( p , val , vlen )"		6247166	0					
ANR	6247426	Callee	memcpy		6247166	0					
ANR	6247427	Identifier	memcpy		6247166	0					
ANR	6247428	ArgumentList	p		6247166	1					
ANR	6247429	Argument	p		6247166	0					
ANR	6247430	Identifier	p		6247166	0					
ANR	6247431	Argument	val		6247166	1					
ANR	6247432	Identifier	val		6247166	0					
ANR	6247433	Argument	vlen		6247166	2					
ANR	6247434	Identifier	vlen		6247166	0					
ANR	6247435	ExpressionStatement	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"	966:2:19762:19804	6247166	11	True				
ANR	6247436	CallExpression	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"		6247166	0					
ANR	6247437	Callee	memcpy		6247166	0					
ANR	6247438	Identifier	memcpy		6247166	0					
ANR	6247439	ArgumentList	p + vlen		6247166	1					
ANR	6247440	Argument	p + vlen		6247166	0					
ANR	6247441	AdditiveExpression	p + vlen		6247166	0		+			
ANR	6247442	Identifier	p		6247166	0					
ANR	6247443	Identifier	vlen		6247166	1					
ANR	6247444	Argument	scnd		6247166	1					
ANR	6247445	Identifier	scnd		6247166	0					
ANR	6247446	Argument	strlen ( scnd ) + 1		6247166	2					
ANR	6247447	AdditiveExpression	strlen ( scnd ) + 1		6247166	0		+			
ANR	6247448	CallExpression	strlen ( scnd )		6247166	0					
ANR	6247449	Callee	strlen		6247166	0					
ANR	6247450	Identifier	strlen		6247166	0					
ANR	6247451	ArgumentList	scnd		6247166	1					
ANR	6247452	Argument	scnd		6247166	0					
ANR	6247453	Identifier	scnd		6247166	0					
ANR	6247454	PrimaryExpression	1		6247166	1					
ANR	6247455	ExpressionStatement	i = off + vlen	967:2:19808:19822	6247166	12	True				
ANR	6247456	AssignmentExpression	i = off + vlen		6247166	0		=			
ANR	6247457	Identifier	i		6247166	0					
ANR	6247458	AdditiveExpression	off + vlen		6247166	1		+			
ANR	6247459	Identifier	off		6247166	0					
ANR	6247460	Identifier	vlen		6247166	1					
ANR	6247461	ExpressionStatement	q = str + i	968:2:19826:19837	6247166	13	True				
ANR	6247462	AssignmentExpression	q = str + i		6247166	0		=			
ANR	6247463	Identifier	q		6247166	0					
ANR	6247464	AdditiveExpression	str + i		6247166	1		+			
ANR	6247465	Identifier	str		6247166	0					
ANR	6247466	Identifier	i		6247166	1					
ANR	6247467	ExpressionStatement	free ( scnd )	969:2:19841:19852	6247166	14	True				
ANR	6247468	CallExpression	free ( scnd )		6247166	0					
ANR	6247469	Callee	free		6247166	0					
ANR	6247470	Identifier	free		6247166	0					
ANR	6247471	ArgumentList	scnd		6247166	1					
ANR	6247472	Argument	scnd		6247166	0					
ANR	6247473	Identifier	scnd		6247166	0					
ANR	6247474	IfStatement	if ( ! g )		6247166	15					
ANR	6247475	Condition	! g	970:6:19860:19861	6247166	0	True				
ANR	6247476	UnaryOperationExpression	! g		6247166	0					
ANR	6247477	UnaryOperator	!		6247166	0					
ANR	6247478	Identifier	g		6247166	1					
ANR	6247479	CompoundStatement		46:10:895:895	6247166	1					
ANR	6247480	BreakStatement	break ;	971:3:19869:19874	6247166	0	True				
ANR	6247481	ReturnStatement	return str ;	974:1:19884:19894	6247166	11	True				
ANR	6247482	Identifier	str		6247166	0					
ANR	6247483	ReturnType	R_API char *		6247166	1					
ANR	6247484	Identifier	r_str_replace		6247166	2					
ANR	6247485	ParameterList	"char * str , const char * key , const char * val , int g"		6247166	3					
ANR	6247486	Parameter	char * str	925:26:18916:18924	6247166	0	True				
ANR	6247487	ParameterType	char *		6247166	0					
ANR	6247488	Identifier	str		6247166	1					
ANR	6247489	Parameter	const char * key	925:37:18927:18941	6247166	1	True				
ANR	6247490	ParameterType	const char *		6247166	0					
ANR	6247491	Identifier	key		6247166	1					
ANR	6247492	Parameter	const char * val	925:54:18944:18958	6247166	2	True				
ANR	6247493	ParameterType	const char *		6247166	0					
ANR	6247494	Identifier	val		6247166	1					
ANR	6247495	Parameter	int g	925:71:18961:18965	6247166	3	True				
ANR	6247496	ParameterType	int		6247166	0					
ANR	6247497	Identifier	g		6247166	1					
ANR	6247498	CFGEntryNode	ENTRY		6247166		True				
ANR	6247499	CFGExitNode	EXIT		6247166		True				
ANR	6247500	InfiniteForNode	true		6247166		True				
ANR	6247501	Symbol	val		6247166						
ANR	6247502	Symbol	strcmp		6247166						
ANR	6247503	Symbol	r_str_replace_icase		6247166						
ANR	6247504	Symbol	NULL		6247166						
ANR	6247505	Symbol	g		6247166						
ANR	6247506	Symbol	vlen		6247166						
ANR	6247507	Symbol	i		6247166						
ANR	6247508	Symbol	* key		6247166						
ANR	6247509	Symbol	* val		6247166						
ANR	6247510	Symbol	realloc		6247166						
ANR	6247511	Symbol	newstr		6247166						
ANR	6247512	Symbol	off		6247166						
ANR	6247513	Symbol	str		6247166						
ANR	6247514	Symbol	p		6247166						
ANR	6247515	Symbol	strlen		6247166						
ANR	6247516	Symbol	q		6247166						
ANR	6247517	Symbol	scnd		6247166						
ANR	6247518	Symbol	strstr		6247166						
ANR	6247519	Symbol	slen		6247166						
ANR	6247520	Symbol	true		6247166						
ANR	6247521	Symbol	klen		6247166						
ANR	6247522	Symbol	strdup		6247166						
ANR	6247523	Symbol	key		6247166						
ANR	6247524	Function	r_str_replace_icase	977:0:19899:21080							
ANR	6247525	FunctionDef	"r_str_replace_icase (char * str , const char * key , const char * val , int g , int keep_case)"		6247524	0					
ANR	6247526	CompoundStatement		977:99:19998:21080	6247524	0					
ANR	6247527	ExpressionStatement	"r_return_val_if_fail ( str && key && val , NULL )"	978:1:20001:20047	6247524	0	True				
ANR	6247528	CallExpression	"r_return_val_if_fail ( str && key && val , NULL )"		6247524	0					
ANR	6247529	Callee	r_return_val_if_fail		6247524	0					
ANR	6247530	Identifier	r_return_val_if_fail		6247524	0					
ANR	6247531	ArgumentList	str && key && val		6247524	1					
ANR	6247532	Argument	str && key && val		6247524	0					
ANR	6247533	AndExpression	str && key && val		6247524	0		&&			
ANR	6247534	Identifier	str		6247524	0					
ANR	6247535	AndExpression	key && val		6247524	1		&&			
ANR	6247536	Identifier	key		6247524	0					
ANR	6247537	Identifier	val		6247524	1					
ANR	6247538	Argument	NULL		6247524	1					
ANR	6247539	Identifier	NULL		6247524	0					
ANR	6247540	IdentifierDeclStatement	"int off , i , klen , vlen , slen ;"	980:1:20051:20079	6247524	1	True				
ANR	6247541	IdentifierDecl	off		6247524	0					
ANR	6247542	IdentifierDeclType	int		6247524	0					
ANR	6247543	Identifier	off		6247524	1					
ANR	6247544	IdentifierDecl	i		6247524	1					
ANR	6247545	IdentifierDeclType	int		6247524	0					
ANR	6247546	Identifier	i		6247524	1					
ANR	6247547	IdentifierDecl	klen		6247524	2					
ANR	6247548	IdentifierDeclType	int		6247524	0					
ANR	6247549	Identifier	klen		6247524	1					
ANR	6247550	IdentifierDecl	vlen		6247524	3					
ANR	6247551	IdentifierDeclType	int		6247524	0					
ANR	6247552	Identifier	vlen		6247524	1					
ANR	6247553	IdentifierDecl	slen		6247524	4					
ANR	6247554	IdentifierDeclType	int		6247524	0					
ANR	6247555	Identifier	slen		6247524	1					
ANR	6247556	IdentifierDeclStatement	"char * newstr , * scnd , * p = str , * tmp_val = NULL ;"	981:1:20082:20128	6247524	2	True				
ANR	6247557	IdentifierDecl	* newstr		6247524	0					
ANR	6247558	IdentifierDeclType	char *		6247524	0					
ANR	6247559	Identifier	newstr		6247524	1					
ANR	6247560	IdentifierDecl	* scnd		6247524	1					
ANR	6247561	IdentifierDeclType	char *		6247524	0					
ANR	6247562	Identifier	scnd		6247524	1					
ANR	6247563	IdentifierDecl	* p = str		6247524	2					
ANR	6247564	IdentifierDeclType	char *		6247524	0					
ANR	6247565	Identifier	p		6247524	1					
ANR	6247566	AssignmentExpression	* p = str		6247524	2		=			
ANR	6247567	Identifier	str		6247524	0					
ANR	6247568	Identifier	str		6247524	1					
ANR	6247569	IdentifierDecl	* tmp_val = NULL		6247524	3					
ANR	6247570	IdentifierDeclType	char *		6247524	0					
ANR	6247571	Identifier	tmp_val		6247524	1					
ANR	6247572	AssignmentExpression	* tmp_val = NULL		6247524	2		=			
ANR	6247573	Identifier	NULL		6247524	0					
ANR	6247574	Identifier	NULL		6247524	1					
ANR	6247575	ExpressionStatement	klen = strlen ( key )	982:1:20131:20150	6247524	3	True				
ANR	6247576	AssignmentExpression	klen = strlen ( key )		6247524	0		=			
ANR	6247577	Identifier	klen		6247524	0					
ANR	6247578	CallExpression	strlen ( key )		6247524	1					
ANR	6247579	Callee	strlen		6247524	0					
ANR	6247580	Identifier	strlen		6247524	0					
ANR	6247581	ArgumentList	key		6247524	1					
ANR	6247582	Argument	key		6247524	0					
ANR	6247583	Identifier	key		6247524	0					
ANR	6247584	ExpressionStatement	vlen = strlen ( val )	983:1:20153:20172	6247524	4	True				
ANR	6247585	AssignmentExpression	vlen = strlen ( val )		6247524	0		=			
ANR	6247586	Identifier	vlen		6247524	0					
ANR	6247587	CallExpression	strlen ( val )		6247524	1					
ANR	6247588	Callee	strlen		6247524	0					
ANR	6247589	Identifier	strlen		6247524	0					
ANR	6247590	ArgumentList	val		6247524	1					
ANR	6247591	Argument	val		6247524	0					
ANR	6247592	Identifier	val		6247524	0					
ANR	6247593	ExpressionStatement	slen = strlen ( str )	985:1:20176:20195	6247524	5	True				
ANR	6247594	AssignmentExpression	slen = strlen ( str )		6247524	0		=			
ANR	6247595	Identifier	slen		6247524	0					
ANR	6247596	CallExpression	strlen ( str )		6247524	1					
ANR	6247597	Callee	strlen		6247524	0					
ANR	6247598	Identifier	strlen		6247524	0					
ANR	6247599	ArgumentList	str		6247524	1					
ANR	6247600	Argument	str		6247524	0					
ANR	6247601	Identifier	str		6247524	0					
ANR	6247602	ForStatement	for ( i = 0 ; i < slen ; )		6247524	6					
ANR	6247603	ForInit	i = 0 ;	986:6:20203:20208	6247524	0	True				
ANR	6247604	AssignmentExpression	i = 0		6247524	0		=			
ANR	6247605	Identifier	i		6247524	0					
ANR	6247606	PrimaryExpression	0		6247524	1					
ANR	6247607	Condition	i < slen	986:13:20210:20217	6247524	1	True				
ANR	6247608	RelationalExpression	i < slen		6247524	0		<			
ANR	6247609	Identifier	i		6247524	0					
ANR	6247610	Identifier	slen		6247524	1					
ANR	6247611	CompoundStatement		10:24:222:222	6247524	2					
ANR	6247612	ExpressionStatement	"p = ( char * ) r_str_casestr ( str + i , key )"	987:2:20225:20265	6247524	0	True				
ANR	6247613	AssignmentExpression	"p = ( char * ) r_str_casestr ( str + i , key )"		6247524	0		=			
ANR	6247614	Identifier	p		6247524	0					
ANR	6247615	CastExpression	"( char * ) r_str_casestr ( str + i , key )"		6247524	1					
ANR	6247616	CastTarget	char *		6247524	0					
ANR	6247617	CallExpression	"r_str_casestr ( str + i , key )"		6247524	1					
ANR	6247618	Callee	r_str_casestr		6247524	0					
ANR	6247619	Identifier	r_str_casestr		6247524	0					
ANR	6247620	ArgumentList	str + i		6247524	1					
ANR	6247621	Argument	str + i		6247524	0					
ANR	6247622	AdditiveExpression	str + i		6247524	0		+			
ANR	6247623	Identifier	str		6247524	0					
ANR	6247624	Identifier	i		6247524	1					
ANR	6247625	Argument	key		6247524	1					
ANR	6247626	Identifier	key		6247524	0					
ANR	6247627	IfStatement	if ( ! p )		6247524	1					
ANR	6247628	Condition	! p	988:6:20273:20274	6247524	0	True				
ANR	6247629	UnaryOperationExpression	! p		6247524	0					
ANR	6247630	UnaryOperator	!		6247524	0					
ANR	6247631	Identifier	p		6247524	1					
ANR	6247632	CompoundStatement		12:10:278:278	6247524	1					
ANR	6247633	BreakStatement	break ;	989:3:20282:20287	6247524	0	True				
ANR	6247634	ExpressionStatement	off = ( int ) ( size_t ) ( p - str )	991:2:20295:20324	6247524	2	True				
ANR	6247635	AssignmentExpression	off = ( int ) ( size_t ) ( p - str )		6247524	0		=			
ANR	6247636	Identifier	off		6247524	0					
ANR	6247637	CastExpression	( int ) ( size_t ) ( p - str )		6247524	1					
ANR	6247638	CastTarget	int		6247524	0					
ANR	6247639	CastExpression	( size_t ) ( p - str )		6247524	1					
ANR	6247640	CastTarget	size_t		6247524	0					
ANR	6247641	AdditiveExpression	p - str		6247524	1		-			
ANR	6247642	Identifier	p		6247524	0					
ANR	6247643	Identifier	str		6247524	1					
ANR	6247644	ExpressionStatement	scnd = strdup ( p + klen )	992:2:20328:20352	6247524	3	True				
ANR	6247645	AssignmentExpression	scnd = strdup ( p + klen )		6247524	0		=			
ANR	6247646	Identifier	scnd		6247524	0					
ANR	6247647	CallExpression	strdup ( p + klen )		6247524	1					
ANR	6247648	Callee	strdup		6247524	0					
ANR	6247649	Identifier	strdup		6247524	0					
ANR	6247650	ArgumentList	p + klen		6247524	1					
ANR	6247651	Argument	p + klen		6247524	0					
ANR	6247652	AdditiveExpression	p + klen		6247524	0		+			
ANR	6247653	Identifier	p		6247524	0					
ANR	6247654	Identifier	klen		6247524	1					
ANR	6247655	ExpressionStatement	tmp_val = strdup ( val )	993:2:20356:20378	6247524	4	True				
ANR	6247656	AssignmentExpression	tmp_val = strdup ( val )		6247524	0		=			
ANR	6247657	Identifier	tmp_val		6247524	0					
ANR	6247658	CallExpression	strdup ( val )		6247524	1					
ANR	6247659	Callee	strdup		6247524	0					
ANR	6247660	Identifier	strdup		6247524	0					
ANR	6247661	ArgumentList	val		6247524	1					
ANR	6247662	Argument	val		6247524	0					
ANR	6247663	Identifier	val		6247524	0					
ANR	6247664	IfStatement	if ( ! tmp_val || ! scnd )		6247524	5					
ANR	6247665	Condition	! tmp_val || ! scnd	994:6:20386:20402	6247524	0	True				
ANR	6247666	OrExpression	! tmp_val || ! scnd		6247524	0		||			
ANR	6247667	UnaryOperationExpression	! tmp_val		6247524	0					
ANR	6247668	UnaryOperator	!		6247524	0					
ANR	6247669	Identifier	tmp_val		6247524	1					
ANR	6247670	UnaryOperationExpression	! scnd		6247524	1					
ANR	6247671	UnaryOperator	!		6247524	0					
ANR	6247672	Identifier	scnd		6247524	1					
ANR	6247673	CompoundStatement		18:25:406:406	6247524	1					
ANR	6247674	GotoStatement	goto alloc_fail ;	995:3:20410:20425	6247524	0	True				
ANR	6247675	Identifier	alloc_fail		6247524	0					
ANR	6247676	ExpressionStatement	slen += vlen - klen	997:2:20433:20452	6247524	6	True				
ANR	6247677	AssignmentExpression	slen += vlen - klen		6247524	0		+=			
ANR	6247678	Identifier	slen		6247524	0					
ANR	6247679	AdditiveExpression	vlen - klen		6247524	1		-			
ANR	6247680	Identifier	vlen		6247524	0					
ANR	6247681	Identifier	klen		6247524	1					
ANR	6247682	ExpressionStatement	"newstr = realloc ( str , slen + klen + 1 )"	998:2:20456:20495	6247524	7	True				
ANR	6247683	AssignmentExpression	"newstr = realloc ( str , slen + klen + 1 )"		6247524	0		=			
ANR	6247684	Identifier	newstr		6247524	0					
ANR	6247685	CallExpression	"realloc ( str , slen + klen + 1 )"		6247524	1					
ANR	6247686	Callee	realloc		6247524	0					
ANR	6247687	Identifier	realloc		6247524	0					
ANR	6247688	ArgumentList	str		6247524	1					
ANR	6247689	Argument	str		6247524	0					
ANR	6247690	Identifier	str		6247524	0					
ANR	6247691	Argument	slen + klen + 1		6247524	1					
ANR	6247692	AdditiveExpression	slen + klen + 1		6247524	0		+			
ANR	6247693	Identifier	slen		6247524	0					
ANR	6247694	AdditiveExpression	klen + 1		6247524	1		+			
ANR	6247695	Identifier	klen		6247524	0					
ANR	6247696	PrimaryExpression	1		6247524	1					
ANR	6247697	IfStatement	if ( ! newstr )		6247524	8					
ANR	6247698	Condition	! newstr	999:6:20503:20509	6247524	0	True				
ANR	6247699	UnaryOperationExpression	! newstr		6247524	0					
ANR	6247700	UnaryOperator	!		6247524	0					
ANR	6247701	Identifier	newstr		6247524	1					
ANR	6247702	CompoundStatement		23:15:513:513	6247524	1					
ANR	6247703	GotoStatement	goto alloc_fail ;	1000:3:20517:20532	6247524	0	True				
ANR	6247704	Identifier	alloc_fail		6247524	0					
ANR	6247705	ExpressionStatement	str = newstr	1002:2:20540:20552	6247524	9	True				
ANR	6247706	AssignmentExpression	str = newstr		6247524	0		=			
ANR	6247707	Identifier	str		6247524	0					
ANR	6247708	Identifier	newstr		6247524	1					
ANR	6247709	ExpressionStatement	p = str + off	1003:2:20556:20569	6247524	10	True				
ANR	6247710	AssignmentExpression	p = str + off		6247524	0		=			
ANR	6247711	Identifier	p		6247524	0					
ANR	6247712	AdditiveExpression	str + off		6247524	1		+			
ANR	6247713	Identifier	str		6247524	0					
ANR	6247714	Identifier	off		6247524	1					
ANR	6247715	IfStatement	if ( keep_case )		6247524	11					
ANR	6247716	Condition	keep_case	1005:6:20578:20586	6247524	0	True				
ANR	6247717	Identifier	keep_case		6247524	0					
ANR	6247718	CompoundStatement		30:3:595:632	6247524	1					
ANR	6247719	IdentifierDeclStatement	"char * str_case = r_str_ndup ( p , klen ) ;"	1006:3:20594:20631	6247524	0	True				
ANR	6247720	IdentifierDecl	"* str_case = r_str_ndup ( p , klen )"		6247524	0					
ANR	6247721	IdentifierDeclType	char *		6247524	0					
ANR	6247722	Identifier	str_case		6247524	1					
ANR	6247723	AssignmentExpression	"* str_case = r_str_ndup ( p , klen )"		6247524	2		=			
ANR	6247724	Identifier	str_case		6247524	0					
ANR	6247725	CallExpression	"r_str_ndup ( p , klen )"		6247524	1					
ANR	6247726	Callee	r_str_ndup		6247524	0					
ANR	6247727	Identifier	r_str_ndup		6247524	0					
ANR	6247728	ArgumentList	p		6247524	1					
ANR	6247729	Argument	p		6247524	0					
ANR	6247730	Identifier	p		6247524	0					
ANR	6247731	Argument	klen		6247524	1					
ANR	6247732	Identifier	klen		6247524	0					
ANR	6247733	IfStatement	if ( ! str_case )		6247524	1					
ANR	6247734	Condition	! str_case	1007:7:20640:20648	6247524	0	True				
ANR	6247735	UnaryOperationExpression	! str_case		6247524	0					
ANR	6247736	UnaryOperator	!		6247524	0					
ANR	6247737	Identifier	str_case		6247524	1					
ANR	6247738	CompoundStatement		31:18:652:652	6247524	1					
ANR	6247739	GotoStatement	goto alloc_fail ;	1008:4:20657:20672	6247524	0	True				
ANR	6247740	Identifier	alloc_fail		6247524	0					
ANR	6247741	ExpressionStatement	"tmp_val = r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"	1010:3:20682:20742	6247524	2	True				
ANR	6247742	AssignmentExpression	"tmp_val = r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"		6247524	0		=			
ANR	6247743	Identifier	tmp_val		6247524	0					
ANR	6247744	CallExpression	"r_str_replace_icase ( tmp_val , key , str_case , 0 , 0 )"		6247524	1					
ANR	6247745	Callee	r_str_replace_icase		6247524	0					
ANR	6247746	Identifier	r_str_replace_icase		6247524	0					
ANR	6247747	ArgumentList	tmp_val		6247524	1					
ANR	6247748	Argument	tmp_val		6247524	0					
ANR	6247749	Identifier	tmp_val		6247524	0					
ANR	6247750	Argument	key		6247524	1					
ANR	6247751	Identifier	key		6247524	0					
ANR	6247752	Argument	str_case		6247524	2					
ANR	6247753	Identifier	str_case		6247524	0					
ANR	6247754	Argument	0		6247524	3					
ANR	6247755	PrimaryExpression	0		6247524	0					
ANR	6247756	Argument	0		6247524	4					
ANR	6247757	PrimaryExpression	0		6247524	0					
ANR	6247758	ExpressionStatement	free ( str_case )	1011:3:20747:20762	6247524	3	True				
ANR	6247759	CallExpression	free ( str_case )		6247524	0					
ANR	6247760	Callee	free		6247524	0					
ANR	6247761	Identifier	free		6247524	0					
ANR	6247762	ArgumentList	str_case		6247524	1					
ANR	6247763	Argument	str_case		6247524	0					
ANR	6247764	Identifier	str_case		6247524	0					
ANR	6247765	IfStatement	if ( ! tmp_val )		6247524	4					
ANR	6247766	Condition	! tmp_val	1012:7:20771:20778	6247524	0	True				
ANR	6247767	UnaryOperationExpression	! tmp_val		6247524	0					
ANR	6247768	UnaryOperator	!		6247524	0					
ANR	6247769	Identifier	tmp_val		6247524	1					
ANR	6247770	CompoundStatement		36:17:782:782	6247524	1					
ANR	6247771	GotoStatement	goto alloc_fail ;	1013:4:20787:20802	6247524	0	True				
ANR	6247772	Identifier	alloc_fail		6247524	0					
ANR	6247773	ExpressionStatement	"memcpy ( p , tmp_val , vlen )"	1017:2:20816:20841	6247524	12	True				
ANR	6247774	CallExpression	"memcpy ( p , tmp_val , vlen )"		6247524	0					
ANR	6247775	Callee	memcpy		6247524	0					
ANR	6247776	Identifier	memcpy		6247524	0					
ANR	6247777	ArgumentList	p		6247524	1					
ANR	6247778	Argument	p		6247524	0					
ANR	6247779	Identifier	p		6247524	0					
ANR	6247780	Argument	tmp_val		6247524	1					
ANR	6247781	Identifier	tmp_val		6247524	0					
ANR	6247782	Argument	vlen		6247524	2					
ANR	6247783	Identifier	vlen		6247524	0					
ANR	6247784	ExpressionStatement	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"	1018:2:20845:20887	6247524	13	True				
ANR	6247785	CallExpression	"memcpy ( p + vlen , scnd , strlen ( scnd ) + 1 )"		6247524	0					
ANR	6247786	Callee	memcpy		6247524	0					
ANR	6247787	Identifier	memcpy		6247524	0					
ANR	6247788	ArgumentList	p + vlen		6247524	1					
ANR	6247789	Argument	p + vlen		6247524	0					
ANR	6247790	AdditiveExpression	p + vlen		6247524	0		+			
ANR	6247791	Identifier	p		6247524	0					
ANR	6247792	Identifier	vlen		6247524	1					
ANR	6247793	Argument	scnd		6247524	1					
ANR	6247794	Identifier	scnd		6247524	0					
ANR	6247795	Argument	strlen ( scnd ) + 1		6247524	2					
ANR	6247796	AdditiveExpression	strlen ( scnd ) + 1		6247524	0		+			
ANR	6247797	CallExpression	strlen ( scnd )		6247524	0					
ANR	6247798	Callee	strlen		6247524	0					
ANR	6247799	Identifier	strlen		6247524	0					
ANR	6247800	ArgumentList	scnd		6247524	1					
ANR	6247801	Argument	scnd		6247524	0					
ANR	6247802	Identifier	scnd		6247524	0					
ANR	6247803	PrimaryExpression	1		6247524	1					
ANR	6247804	ExpressionStatement	i = off + vlen	1019:2:20891:20905	6247524	14	True				
ANR	6247805	AssignmentExpression	i = off + vlen		6247524	0		=			
ANR	6247806	Identifier	i		6247524	0					
ANR	6247807	AdditiveExpression	off + vlen		6247524	1		+			
ANR	6247808	Identifier	off		6247524	0					
ANR	6247809	Identifier	vlen		6247524	1					
ANR	6247810	ExpressionStatement	free ( tmp_val )	1020:2:20909:20923	6247524	15	True				
ANR	6247811	CallExpression	free ( tmp_val )		6247524	0					
ANR	6247812	Callee	free		6247524	0					
ANR	6247813	Identifier	free		6247524	0					
ANR	6247814	ArgumentList	tmp_val		6247524	1					
ANR	6247815	Argument	tmp_val		6247524	0					
ANR	6247816	Identifier	tmp_val		6247524	0					
ANR	6247817	ExpressionStatement	free ( scnd )	1021:2:20927:20938	6247524	16	True				
ANR	6247818	CallExpression	free ( scnd )		6247524	0					
ANR	6247819	Callee	free		6247524	0					
ANR	6247820	Identifier	free		6247524	0					
ANR	6247821	ArgumentList	scnd		6247524	1					
ANR	6247822	Argument	scnd		6247524	0					
ANR	6247823	Identifier	scnd		6247524	0					
ANR	6247824	IfStatement	if ( ! g )		6247524	17					
ANR	6247825	Condition	! g	1022:6:20946:20947	6247524	0	True				
ANR	6247826	UnaryOperationExpression	! g		6247524	0					
ANR	6247827	UnaryOperator	!		6247524	0					
ANR	6247828	Identifier	g		6247524	1					
ANR	6247829	CompoundStatement		46:10:951:951	6247524	1					
ANR	6247830	BreakStatement	break ;	1023:3:20955:20960	6247524	0	True				
ANR	6247831	ReturnStatement	return str ;	1026:1:20970:20980	6247524	7	True				
ANR	6247832	Identifier	str		6247524	0					
ANR	6247833	Label	alloc_fail :	1028:0:20983:20993	6247524	8	True				
ANR	6247834	Identifier	alloc_fail		6247524	0					
ANR	6247835	ExpressionStatement	"eprintf ( ""alloc fail\\n"" )"	1029:1:20996:21020	6247524	9	True				
ANR	6247836	CallExpression	"eprintf ( ""alloc fail\\n"" )"		6247524	0					
ANR	6247837	Callee	eprintf		6247524	0					
ANR	6247838	Identifier	eprintf		6247524	0					
ANR	6247839	ArgumentList	"""alloc fail\\n"""		6247524	1					
ANR	6247840	Argument	"""alloc fail\\n"""		6247524	0					
ANR	6247841	PrimaryExpression	"""alloc fail\\n"""		6247524	0					
ANR	6247842	ExpressionStatement	free ( str )	1030:1:21023:21033	6247524	10	True				
ANR	6247843	CallExpression	free ( str )		6247524	0					
ANR	6247844	Callee	free		6247524	0					
ANR	6247845	Identifier	free		6247524	0					
ANR	6247846	ArgumentList	str		6247524	1					
ANR	6247847	Argument	str		6247524	0					
ANR	6247848	Identifier	str		6247524	0					
ANR	6247849	ExpressionStatement	free ( scnd )	1031:1:21036:21047	6247524	11	True				
ANR	6247850	CallExpression	free ( scnd )		6247524	0					
ANR	6247851	Callee	free		6247524	0					
ANR	6247852	Identifier	free		6247524	0					
ANR	6247853	ArgumentList	scnd		6247524	1					
ANR	6247854	Argument	scnd		6247524	0					
ANR	6247855	Identifier	scnd		6247524	0					
ANR	6247856	ExpressionStatement	free ( tmp_val )	1032:1:21050:21064	6247524	12	True				
ANR	6247857	CallExpression	free ( tmp_val )		6247524	0					
ANR	6247858	Callee	free		6247524	0					
ANR	6247859	Identifier	free		6247524	0					
ANR	6247860	ArgumentList	tmp_val		6247524	1					
ANR	6247861	Argument	tmp_val		6247524	0					
ANR	6247862	Identifier	tmp_val		6247524	0					
ANR	6247863	ReturnStatement	return NULL ;	1033:1:21067:21078	6247524	13	True				
ANR	6247864	Identifier	NULL		6247524	0					
ANR	6247865	ReturnType	R_API char *		6247524	1					
ANR	6247866	Identifier	r_str_replace_icase		6247524	2					
ANR	6247867	ParameterList	"char * str , const char * key , const char * val , int g , int keep_case"		6247524	3					
ANR	6247868	Parameter	char * str	977:32:19931:19939	6247524	0	True				
ANR	6247869	ParameterType	char *		6247524	0					
ANR	6247870	Identifier	str		6247524	1					
ANR	6247871	Parameter	const char * key	977:43:19942:19956	6247524	1	True				
ANR	6247872	ParameterType	const char *		6247524	0					
ANR	6247873	Identifier	key		6247524	1					
ANR	6247874	Parameter	const char * val	977:60:19959:19973	6247524	2	True				
ANR	6247875	ParameterType	const char *		6247524	0					
ANR	6247876	Identifier	val		6247524	1					
ANR	6247877	Parameter	int g	977:77:19976:19980	6247524	3	True				
ANR	6247878	ParameterType	int		6247524	0					
ANR	6247879	Identifier	g		6247524	1					
ANR	6247880	Parameter	int keep_case	977:84:19983:19995	6247524	4	True				
ANR	6247881	ParameterType	int		6247524	0					
ANR	6247882	Identifier	keep_case		6247524	1					
ANR	6247883	CFGEntryNode	ENTRY		6247524		True				
ANR	6247884	CFGExitNode	EXIT		6247524		True				
ANR	6247885	Symbol	val		6247524						
ANR	6247886	Symbol	NULL		6247524						
ANR	6247887	Symbol	r_str_casestr		6247524						
ANR	6247888	Symbol	r_str_replace_icase		6247524						
ANR	6247889	Symbol	keep_case		6247524						
ANR	6247890	Symbol	r_str_ndup		6247524						
ANR	6247891	Symbol	g		6247524						
ANR	6247892	Symbol	vlen		6247524						
ANR	6247893	Symbol	i		6247524						
ANR	6247894	Symbol	realloc		6247524						
ANR	6247895	Symbol	newstr		6247524						
ANR	6247896	Symbol	off		6247524						
ANR	6247897	Symbol	str		6247524						
ANR	6247898	Symbol	p		6247524						
ANR	6247899	Symbol	strlen		6247524						
ANR	6247900	Symbol	tmp_val		6247524						
ANR	6247901	Symbol	scnd		6247524						
ANR	6247902	Symbol	str_case		6247524						
ANR	6247903	Symbol	slen		6247524						
ANR	6247904	Symbol	klen		6247524						
ANR	6247905	Symbol	strdup		6247524						
ANR	6247906	Symbol	key		6247524						
ANR	6247907	Function	r_str_replace_thunked	1048:0:21548:22821							
ANR	6247908	FunctionDef	"r_str_replace_thunked (char * str , char * clean , int * thunk , int clen , const char * key , const char * val , int g)"		6247907	0					
ANR	6247909	CompoundStatement		1049:47:21675:22821	6247907	0					
ANR	6247910	IdentifierDeclStatement	"int i , klen , vlen , slen , delta = 0 , bias ;"	1050:1:21678:21718	6247907	0	True				
ANR	6247911	IdentifierDecl	i		6247907	0					
ANR	6247912	IdentifierDeclType	int		6247907	0					
ANR	6247913	Identifier	i		6247907	1					
ANR	6247914	IdentifierDecl	klen		6247907	1					
ANR	6247915	IdentifierDeclType	int		6247907	0					
ANR	6247916	Identifier	klen		6247907	1					
ANR	6247917	IdentifierDecl	vlen		6247907	2					
ANR	6247918	IdentifierDeclType	int		6247907	0					
ANR	6247919	Identifier	vlen		6247907	1					
ANR	6247920	IdentifierDecl	slen		6247907	3					
ANR	6247921	IdentifierDeclType	int		6247907	0					
ANR	6247922	Identifier	slen		6247907	1					
ANR	6247923	IdentifierDecl	delta = 0		6247907	4					
ANR	6247924	IdentifierDeclType	int		6247907	0					
ANR	6247925	Identifier	delta		6247907	1					
ANR	6247926	AssignmentExpression	delta = 0		6247907	2		=			
ANR	6247927	Identifier	delta		6247907	0					
ANR	6247928	PrimaryExpression	0		6247907	1					
ANR	6247929	IdentifierDecl	bias		6247907	5					
ANR	6247930	IdentifierDeclType	int		6247907	0					
ANR	6247931	Identifier	bias		6247907	1					
ANR	6247932	IdentifierDeclStatement	"char * newstr , * scnd , * p = clean , * str_p ;"	1051:1:21721:21760	6247907	1	True				
ANR	6247933	IdentifierDecl	* newstr		6247907	0					
ANR	6247934	IdentifierDeclType	char *		6247907	0					
ANR	6247935	Identifier	newstr		6247907	1					
ANR	6247936	IdentifierDecl	* scnd		6247907	1					
ANR	6247937	IdentifierDeclType	char *		6247907	0					
ANR	6247938	Identifier	scnd		6247907	1					
ANR	6247939	IdentifierDecl	* p = clean		6247907	2					
ANR	6247940	IdentifierDeclType	char *		6247907	0					
ANR	6247941	Identifier	p		6247907	1					
ANR	6247942	AssignmentExpression	* p = clean		6247907	2		=			
ANR	6247943	Identifier	clean		6247907	0					
ANR	6247944	Identifier	clean		6247907	1					
ANR	6247945	IdentifierDecl	* str_p		6247907	3					
ANR	6247946	IdentifierDeclType	char *		6247907	0					
ANR	6247947	Identifier	str_p		6247907	1					
ANR	6247948	IfStatement	if ( ! str || ! key || ! val || ! clean || ! thunk )		6247907	2					
ANR	6247949	Condition	! str || ! key || ! val || ! clean || ! thunk	1053:5:21768:21807	6247907	0	True				
ANR	6247950	OrExpression	! str || ! key || ! val || ! clean || ! thunk		6247907	0		||			
ANR	6247951	UnaryOperationExpression	! str		6247907	0					
ANR	6247952	UnaryOperator	!		6247907	0					
ANR	6247953	Identifier	str		6247907	1					
ANR	6247954	OrExpression	! key || ! val || ! clean || ! thunk		6247907	1		||			
ANR	6247955	UnaryOperationExpression	! key		6247907	0					
ANR	6247956	UnaryOperator	!		6247907	0					
ANR	6247957	Identifier	key		6247907	1					
ANR	6247958	OrExpression	! val || ! clean || ! thunk		6247907	1		||			
ANR	6247959	UnaryOperationExpression	! val		6247907	0					
ANR	6247960	UnaryOperator	!		6247907	0					
ANR	6247961	Identifier	val		6247907	1					
ANR	6247962	OrExpression	! clean || ! thunk		6247907	1		||			
ANR	6247963	UnaryOperationExpression	! clean		6247907	0					
ANR	6247964	UnaryOperator	!		6247907	0					
ANR	6247965	Identifier	clean		6247907	1					
ANR	6247966	UnaryOperationExpression	! thunk		6247907	1					
ANR	6247967	UnaryOperator	!		6247907	0					
ANR	6247968	Identifier	thunk		6247907	1					
ANR	6247969	CompoundStatement		5:47:134:134	6247907	1					
ANR	6247970	ReturnStatement	return NULL ;	1054:2:21814:21825	6247907	0	True				
ANR	6247971	Identifier	NULL		6247907	0					
ANR	6247972	ExpressionStatement	klen = strlen ( key )	1056:1:21831:21850	6247907	3	True				
ANR	6247973	AssignmentExpression	klen = strlen ( key )		6247907	0		=			
ANR	6247974	Identifier	klen		6247907	0					
ANR	6247975	CallExpression	strlen ( key )		6247907	1					
ANR	6247976	Callee	strlen		6247907	0					
ANR	6247977	Identifier	strlen		6247907	0					
ANR	6247978	ArgumentList	key		6247907	1					
ANR	6247979	Argument	key		6247907	0					
ANR	6247980	Identifier	key		6247907	0					
ANR	6247981	ExpressionStatement	vlen = strlen ( val )	1057:1:21853:21872	6247907	4	True				
ANR	6247982	AssignmentExpression	vlen = strlen ( val )		6247907	0		=			
ANR	6247983	Identifier	vlen		6247907	0					
ANR	6247984	CallExpression	strlen ( val )		6247907	1					
ANR	6247985	Callee	strlen		6247907	0					
ANR	6247986	Identifier	strlen		6247907	0					
ANR	6247987	ArgumentList	val		6247907	1					
ANR	6247988	Argument	val		6247907	0					
ANR	6247989	Identifier	val		6247907	0					
ANR	6247990	IfStatement	"if ( klen == vlen && ! strcmp ( key , val ) )"		6247907	5					
ANR	6247991	Condition	"klen == vlen && ! strcmp ( key , val )"	1058:5:21879:21912	6247907	0	True				
ANR	6247992	AndExpression	"klen == vlen && ! strcmp ( key , val )"		6247907	0		&&			
ANR	6247993	EqualityExpression	klen == vlen		6247907	0		==			
ANR	6247994	Identifier	klen		6247907	0					
ANR	6247995	Identifier	vlen		6247907	1					
ANR	6247996	UnaryOperationExpression	"! strcmp ( key , val )"		6247907	1					
ANR	6247997	UnaryOperator	!		6247907	0					
ANR	6247998	CallExpression	"strcmp ( key , val )"		6247907	1					
ANR	6247999	Callee	strcmp		6247907	0					
ANR	6248000	Identifier	strcmp		6247907	0					
ANR	6248001	ArgumentList	key		6247907	1					
ANR	6248002	Argument	key		6247907	0					
ANR	6248003	Identifier	key		6247907	0					
ANR	6248004	Argument	val		6247907	1					
ANR	6248005	Identifier	val		6247907	0					
ANR	6248006	CompoundStatement		10:41:239:239	6247907	1					
ANR	6248007	ReturnStatement	return str ;	1059:2:21919:21929	6247907	0	True				
ANR	6248008	Identifier	str		6247907	0					
ANR	6248009	ExpressionStatement	slen = strlen ( str ) + 1	1061:1:21935:21958	6247907	6	True				
ANR	6248010	AssignmentExpression	slen = strlen ( str ) + 1		6247907	0		=			
ANR	6248011	Identifier	slen		6247907	0					
ANR	6248012	AdditiveExpression	strlen ( str ) + 1		6247907	1		+			
ANR	6248013	CallExpression	strlen ( str )		6247907	0					
ANR	6248014	Callee	strlen		6247907	0					
ANR	6248015	Identifier	strlen		6247907	0					
ANR	6248016	ArgumentList	str		6247907	1					
ANR	6248017	Argument	str		6247907	0					
ANR	6248018	Identifier	str		6247907	0					
ANR	6248019	PrimaryExpression	1		6247907	1					
ANR	6248020	ForStatement	for ( i = 0 ; i < clen ; )		6247907	7					
ANR	6248021	ForInit	i = 0 ;	1063:6:21967:21972	6247907	0	True				
ANR	6248022	AssignmentExpression	i = 0		6247907	0		=			
ANR	6248023	Identifier	i		6247907	0					
ANR	6248024	PrimaryExpression	0		6247907	1					
ANR	6248025	Condition	i < clen	1063:13:21974:21981	6247907	1	True				
ANR	6248026	RelationalExpression	i < clen		6247907	0		<			
ANR	6248027	Identifier	i		6247907	0					
ANR	6248028	Identifier	clen		6247907	1					
ANR	6248029	CompoundStatement		27:2:597:634	6247907	2					
ANR	6248030	ExpressionStatement	"p = ( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"	1064:2:21990:22075	6247907	0	True				
ANR	6248031	AssignmentExpression	"p = ( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		6247907	0		=			
ANR	6248032	Identifier	p		6247907	0					
ANR	6248033	CastExpression	"( char * ) r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		6247907	1					
ANR	6248034	CastTarget	char *		6247907	0					
ANR	6248035	CallExpression	"r_mem_mem ( ( const ut8 * ) clean + i , clen - i , ( const ut8 * ) key , klen )"		6247907	1					
ANR	6248036	Callee	r_mem_mem		6247907	0					
ANR	6248037	Identifier	r_mem_mem		6247907	0					
ANR	6248038	ArgumentList	( const ut8 * ) clean + i		6247907	1					
ANR	6248039	Argument	( const ut8 * ) clean + i		6247907	0					
ANR	6248040	AdditiveExpression	( const ut8 * ) clean + i		6247907	0		+			
ANR	6248041	CastExpression	( const ut8 * ) clean		6247907	0					
ANR	6248042	CastTarget	const ut8 *		6247907	0					
ANR	6248043	Identifier	clean		6247907	1					
ANR	6248044	Identifier	i		6247907	1					
ANR	6248045	Argument	clen - i		6247907	1					
ANR	6248046	AdditiveExpression	clen - i		6247907	0		-			
ANR	6248047	Identifier	clen		6247907	0					
ANR	6248048	Identifier	i		6247907	1					
ANR	6248049	Argument	( const ut8 * ) key		6247907	2					
ANR	6248050	CastExpression	( const ut8 * ) key		6247907	0					
ANR	6248051	CastTarget	const ut8 *		6247907	0					
ANR	6248052	Identifier	key		6247907	1					
ANR	6248053	Argument	klen		6247907	3					
ANR	6248054	Identifier	klen		6247907	0					
ANR	6248055	IfStatement	if ( ! p )		6247907	1					
ANR	6248056	Condition	! p	1067:6:22083:22084	6247907	0	True				
ANR	6248057	UnaryOperationExpression	! p		6247907	0					
ANR	6248058	UnaryOperator	!		6247907	0					
ANR	6248059	Identifier	p		6247907	1					
ANR	6248060	CompoundStatement		19:10:411:411	6247907	1					
ANR	6248061	BreakStatement	break ;	1068:3:22092:22097	6247907	0	True				
ANR	6248062	ExpressionStatement	i = ( int ) ( size_t ) ( p - clean )	1070:2:22105:22133	6247907	2	True				
ANR	6248063	AssignmentExpression	i = ( int ) ( size_t ) ( p - clean )		6247907	0		=			
ANR	6248064	Identifier	i		6247907	0					
ANR	6248065	CastExpression	( int ) ( size_t ) ( p - clean )		6247907	1					
ANR	6248066	CastTarget	int		6247907	0					
ANR	6248067	CastExpression	( size_t ) ( p - clean )		6247907	1					
ANR	6248068	CastTarget	size_t		6247907	0					
ANR	6248069	AdditiveExpression	p - clean		6247907	1		-			
ANR	6248070	Identifier	p		6247907	0					
ANR	6248071	Identifier	clean		6247907	1					
ANR	6248072	ExpressionStatement	str_p = str + thunk [ i ] + delta	1073:2:22238:22268	6247907	3	True				
ANR	6248073	AssignmentExpression	str_p = str + thunk [ i ] + delta		6247907	0		=			
ANR	6248074	Identifier	str_p		6247907	0					
ANR	6248075	AdditiveExpression	str + thunk [ i ] + delta		6247907	1		+			
ANR	6248076	Identifier	str		6247907	0					
ANR	6248077	AdditiveExpression	thunk [ i ] + delta		6247907	1		+			
ANR	6248078	ArrayIndexing	thunk [ i ]		6247907	0					
ANR	6248079	Identifier	thunk		6247907	0					
ANR	6248080	Identifier	i		6247907	1					
ANR	6248081	Identifier	delta		6247907	1					
ANR	6248082	IdentifierDeclStatement	int newo = thunk [ i + klen ] - thunk [ i ] ;	1075:2:22273:22310	6247907	4	True				
ANR	6248083	IdentifierDecl	newo = thunk [ i + klen ] - thunk [ i ]		6247907	0					
ANR	6248084	IdentifierDeclType	int		6247907	0					
ANR	6248085	Identifier	newo		6247907	1					
ANR	6248086	AssignmentExpression	newo = thunk [ i + klen ] - thunk [ i ]		6247907	2		=			
ANR	6248087	Identifier	newo		6247907	0					
ANR	6248088	AdditiveExpression	thunk [ i + klen ] - thunk [ i ]		6247907	1		-			
ANR	6248089	ArrayIndexing	thunk [ i + klen ]		6247907	0					
ANR	6248090	Identifier	thunk		6247907	0					
ANR	6248091	AdditiveExpression	i + klen		6247907	1		+			
ANR	6248092	Identifier	i		6247907	0					
ANR	6248093	Identifier	klen		6247907	1					
ANR	6248094	ArrayIndexing	thunk [ i ]		6247907	1					
ANR	6248095	Identifier	thunk		6247907	0					
ANR	6248096	Identifier	i		6247907	1					
ANR	6248097	ExpressionStatement	"r_str_ansi_filter ( str_p , NULL , NULL , newo )"	1076:2:22314:22357	6247907	5	True				
ANR	6248098	CallExpression	"r_str_ansi_filter ( str_p , NULL , NULL , newo )"		6247907	0					
ANR	6248099	Callee	r_str_ansi_filter		6247907	0					
ANR	6248100	Identifier	r_str_ansi_filter		6247907	0					
ANR	6248101	ArgumentList	str_p		6247907	1					
ANR	6248102	Argument	str_p		6247907	0					
ANR	6248103	Identifier	str_p		6247907	0					
ANR	6248104	Argument	NULL		6247907	1					
ANR	6248105	Identifier	NULL		6247907	0					
ANR	6248106	Argument	NULL		6247907	2					
ANR	6248107	Identifier	NULL		6247907	0					
ANR	6248108	Argument	newo		6247907	3					
ANR	6248109	Identifier	newo		6247907	0					
ANR	6248110	ExpressionStatement	scnd = strdup ( str_p + newo )	1077:2:22361:22389	6247907	6	True				
ANR	6248111	AssignmentExpression	scnd = strdup ( str_p + newo )		6247907	0		=			
ANR	6248112	Identifier	scnd		6247907	0					
ANR	6248113	CallExpression	strdup ( str_p + newo )		6247907	1					
ANR	6248114	Callee	strdup		6247907	0					
ANR	6248115	Identifier	strdup		6247907	0					
ANR	6248116	ArgumentList	str_p + newo		6247907	1					
ANR	6248117	Argument	str_p + newo		6247907	0					
ANR	6248118	AdditiveExpression	str_p + newo		6247907	0		+			
ANR	6248119	Identifier	str_p		6247907	0					
ANR	6248120	Identifier	newo		6247907	1					
ANR	6248121	ExpressionStatement	bias = vlen - newo	1078:2:22393:22411	6247907	7	True				
ANR	6248122	AssignmentExpression	bias = vlen - newo		6247907	0		=			
ANR	6248123	Identifier	bias		6247907	0					
ANR	6248124	AdditiveExpression	vlen - newo		6247907	1		-			
ANR	6248125	Identifier	vlen		6247907	0					
ANR	6248126	Identifier	newo		6247907	1					
ANR	6248127	ExpressionStatement	slen += bias	1080:2:22416:22428	6247907	8	True				
ANR	6248128	AssignmentExpression	slen += bias		6247907	0		+=			
ANR	6248129	Identifier	slen		6247907	0					
ANR	6248130	Identifier	bias		6247907	1					
ANR	6248131	ExpressionStatement	"newstr = realloc ( str , slen + klen )"	1082:2:22473:22508	6247907	9	True				
ANR	6248132	AssignmentExpression	"newstr = realloc ( str , slen + klen )"		6247907	0		=			
ANR	6248133	Identifier	newstr		6247907	0					
ANR	6248134	CallExpression	"realloc ( str , slen + klen )"		6247907	1					
ANR	6248135	Callee	realloc		6247907	0					
ANR	6248136	Identifier	realloc		6247907	0					
ANR	6248137	ArgumentList	str		6247907	1					
ANR	6248138	Argument	str		6247907	0					
ANR	6248139	Identifier	str		6247907	0					
ANR	6248140	Argument	slen + klen		6247907	1					
ANR	6248141	AdditiveExpression	slen + klen		6247907	0		+			
ANR	6248142	Identifier	slen		6247907	0					
ANR	6248143	Identifier	klen		6247907	1					
ANR	6248144	IfStatement	if ( ! newstr )		6247907	10					
ANR	6248145	Condition	! newstr	1083:6:22516:22522	6247907	0	True				
ANR	6248146	UnaryOperationExpression	! newstr		6247907	0					
ANR	6248147	UnaryOperator	!		6247907	0					
ANR	6248148	Identifier	newstr		6247907	1					
ANR	6248149	CompoundStatement		35:15:849:849	6247907	1					
ANR	6248150	ExpressionStatement	"eprintf ( ""realloc fail\\n"" )"	1084:3:22530:22556	6247907	0	True				
ANR	6248151	CallExpression	"eprintf ( ""realloc fail\\n"" )"		6247907	0					
ANR	6248152	Callee	eprintf		6247907	0					
ANR	6248153	Identifier	eprintf		6247907	0					
ANR	6248154	ArgumentList	"""realloc fail\\n"""		6247907	1					
ANR	6248155	Argument	"""realloc fail\\n"""		6247907	0					
ANR	6248156	PrimaryExpression	"""realloc fail\\n"""		6247907	0					
ANR	6248157	ExpressionStatement	R_FREE ( str )	1085:3:22561:22573	6247907	1	True				
ANR	6248158	CallExpression	R_FREE ( str )		6247907	0					
ANR	6248159	Callee	R_FREE		6247907	0					
ANR	6248160	Identifier	R_FREE		6247907	0					
ANR	6248161	ArgumentList	str		6247907	1					
ANR	6248162	Argument	str		6247907	0					
ANR	6248163	Identifier	str		6247907	0					
ANR	6248164	ExpressionStatement	free ( scnd )	1086:3:22578:22589	6247907	2	True				
ANR	6248165	CallExpression	free ( scnd )		6247907	0					
ANR	6248166	Callee	free		6247907	0					
ANR	6248167	Identifier	free		6247907	0					
ANR	6248168	ArgumentList	scnd		6247907	1					
ANR	6248169	Argument	scnd		6247907	0					
ANR	6248170	Identifier	scnd		6247907	0					
ANR	6248171	BreakStatement	break ;	1087:3:22594:22599	6247907	3	True				
ANR	6248172	ExpressionStatement	str = newstr	1089:2:22607:22619	6247907	11	True				
ANR	6248173	AssignmentExpression	str = newstr		6247907	0		=			
ANR	6248174	Identifier	str		6247907	0					
ANR	6248175	Identifier	newstr		6247907	1					
ANR	6248176	ExpressionStatement	str_p = str + thunk [ i ] + delta	1090:2:22623:22653	6247907	12	True				
ANR	6248177	AssignmentExpression	str_p = str + thunk [ i ] + delta		6247907	0		=			
ANR	6248178	Identifier	str_p		6247907	0					
ANR	6248179	AdditiveExpression	str + thunk [ i ] + delta		6247907	1		+			
ANR	6248180	Identifier	str		6247907	0					
ANR	6248181	AdditiveExpression	thunk [ i ] + delta		6247907	1		+			
ANR	6248182	ArrayIndexing	thunk [ i ]		6247907	0					
ANR	6248183	Identifier	thunk		6247907	0					
ANR	6248184	Identifier	i		6247907	1					
ANR	6248185	Identifier	delta		6247907	1					
ANR	6248186	ExpressionStatement	"memcpy ( str_p , val , vlen )"	1091:2:22657:22682	6247907	13	True				
ANR	6248187	CallExpression	"memcpy ( str_p , val , vlen )"		6247907	0					
ANR	6248188	Callee	memcpy		6247907	0					
ANR	6248189	Identifier	memcpy		6247907	0					
ANR	6248190	ArgumentList	str_p		6247907	1					
ANR	6248191	Argument	str_p		6247907	0					
ANR	6248192	Identifier	str_p		6247907	0					
ANR	6248193	Argument	val		6247907	1					
ANR	6248194	Identifier	val		6247907	0					
ANR	6248195	Argument	vlen		6247907	2					
ANR	6248196	Identifier	vlen		6247907	0					
ANR	6248197	ExpressionStatement	"memcpy ( str_p + vlen , scnd , strlen ( scnd ) + 1 )"	1092:2:22686:22732	6247907	14	True				
ANR	6248198	CallExpression	"memcpy ( str_p + vlen , scnd , strlen ( scnd ) + 1 )"		6247907	0					
ANR	6248199	Callee	memcpy		6247907	0					
ANR	6248200	Identifier	memcpy		6247907	0					
ANR	6248201	ArgumentList	str_p + vlen		6247907	1					
ANR	6248202	Argument	str_p + vlen		6247907	0					
ANR	6248203	AdditiveExpression	str_p + vlen		6247907	0		+			
ANR	6248204	Identifier	str_p		6247907	0					
ANR	6248205	Identifier	vlen		6247907	1					
ANR	6248206	Argument	scnd		6247907	1					
ANR	6248207	Identifier	scnd		6247907	0					
ANR	6248208	Argument	strlen ( scnd ) + 1		6247907	2					
ANR	6248209	AdditiveExpression	strlen ( scnd ) + 1		6247907	0		+			
ANR	6248210	CallExpression	strlen ( scnd )		6247907	0					
ANR	6248211	Callee	strlen		6247907	0					
ANR	6248212	Identifier	strlen		6247907	0					
ANR	6248213	ArgumentList	scnd		6247907	1					
ANR	6248214	Argument	scnd		6247907	0					
ANR	6248215	Identifier	scnd		6247907	0					
ANR	6248216	PrimaryExpression	1		6247907	1					
ANR	6248217	ExpressionStatement	i += klen	1093:2:22736:22745	6247907	15	True				
ANR	6248218	AssignmentExpression	i += klen		6247907	0		+=			
ANR	6248219	Identifier	i		6247907	0					
ANR	6248220	Identifier	klen		6247907	1					
ANR	6248221	ExpressionStatement	delta += bias	1094:2:22749:22762	6247907	16	True				
ANR	6248222	AssignmentExpression	delta += bias		6247907	0		+=			
ANR	6248223	Identifier	delta		6247907	0					
ANR	6248224	Identifier	bias		6247907	1					
ANR	6248225	ExpressionStatement	free ( scnd )	1095:2:22766:22777	6247907	17	True				
ANR	6248226	CallExpression	free ( scnd )		6247907	0					
ANR	6248227	Callee	free		6247907	0					
ANR	6248228	Identifier	free		6247907	0					
ANR	6248229	ArgumentList	scnd		6247907	1					
ANR	6248230	Argument	scnd		6247907	0					
ANR	6248231	Identifier	scnd		6247907	0					
ANR	6248232	IfStatement	if ( ! g )		6247907	18					
ANR	6248233	Condition	! g	1096:6:22785:22786	6247907	0	True				
ANR	6248234	UnaryOperationExpression	! g		6247907	0					
ANR	6248235	UnaryOperator	!		6247907	0					
ANR	6248236	Identifier	g		6247907	1					
ANR	6248237	CompoundStatement		48:10:1113:1113	6247907	1					
ANR	6248238	BreakStatement	break ;	1097:3:22794:22799	6247907	0	True				
ANR	6248239	ReturnStatement	return str ;	1100:1:22809:22819	6247907	8	True				
ANR	6248240	Identifier	str		6247907	0					
ANR	6248241	ReturnType	R_API char *		6247907	1					
ANR	6248242	Identifier	r_str_replace_thunked		6247907	2					
ANR	6248243	ParameterList	"char * str , char * clean , int * thunk , int clen , const char * key , const char * val , int g"		6247907	3					
ANR	6248244	Parameter	char * str	1048:34:21582:21590	6247907	0	True				
ANR	6248245	ParameterType	char *		6247907	0					
ANR	6248246	Identifier	str		6247907	1					
ANR	6248247	Parameter	char * clean	1048:45:21593:21603	6247907	1	True				
ANR	6248248	ParameterType	char *		6247907	0					
ANR	6248249	Identifier	clean		6247907	1					
ANR	6248250	Parameter	int * thunk	1048:58:21606:21615	6247907	2	True				
ANR	6248251	ParameterType	int *		6247907	0					
ANR	6248252	Identifier	thunk		6247907	1					
ANR	6248253	Parameter	int clen	1048:70:21618:21625	6247907	3	True				
ANR	6248254	ParameterType	int		6247907	0					
ANR	6248255	Identifier	clen		6247907	1					
ANR	6248256	Parameter	const char * key	1049:6:21634:21648	6247907	4	True				
ANR	6248257	ParameterType	const char *		6247907	0					
ANR	6248258	Identifier	key		6247907	1					
ANR	6248259	Parameter	const char * val	1049:23:21651:21665	6247907	5	True				
ANR	6248260	ParameterType	const char *		6247907	0					
ANR	6248261	Identifier	val		6247907	1					
ANR	6248262	Parameter	int g	1049:40:21668:21672	6247907	6	True				
ANR	6248263	ParameterType	int		6247907	0					
ANR	6248264	Identifier	g		6247907	1					
ANR	6248265	CFGEntryNode	ENTRY		6247907		True				
ANR	6248266	CFGExitNode	EXIT		6247907		True				
ANR	6248267	Symbol	delta		6247907						
ANR	6248268	Symbol	r_mem_mem		6247907						
ANR	6248269	Symbol	realloc		6247907						
ANR	6248270	Symbol	strlen		6247907						
ANR	6248271	Symbol	bias		6247907						
ANR	6248272	Symbol	key		6247907						
ANR	6248273	Symbol	val		6247907						
ANR	6248274	Symbol	strcmp		6247907						
ANR	6248275	Symbol	* klen		6247907						
ANR	6248276	Symbol	NULL		6247907						
ANR	6248277	Symbol	g		6247907						
ANR	6248278	Symbol	vlen		6247907						
ANR	6248279	Symbol	i		6247907						
ANR	6248280	Symbol	str_p		6247907						
ANR	6248281	Symbol	clean		6247907						
ANR	6248282	Symbol	thunk		6247907						
ANR	6248283	Symbol	newstr		6247907						
ANR	6248284	Symbol	str		6247907						
ANR	6248285	Symbol	p		6247907						
ANR	6248286	Symbol	scnd		6247907						
ANR	6248287	Symbol	* i		6247907						
ANR	6248288	Symbol	slen		6247907						
ANR	6248289	Symbol	klen		6247907						
ANR	6248290	Symbol	strdup		6247907						
ANR	6248291	Symbol	clen		6247907						
ANR	6248292	Symbol	* thunk		6247907						
ANR	6248293	Symbol	newo		6247907						
ANR	6248294	Function	r_str_replace_in	1103:0:22824:23099							
ANR	6248295	FunctionDef	"r_str_replace_in (char * str , ut32 sz , const char * key , const char * val , int g)"		6248294	0					
ANR	6248296	CompoundStatement		1103:90:22914:23099	6248294	0					
ANR	6248297	IfStatement	if ( ! str || ! key || ! val )		6248294	0					
ANR	6248298	Condition	! str || ! key || ! val	1104:5:22921:22940	6248294	0	True				
ANR	6248299	OrExpression	! str || ! key || ! val		6248294	0		||			
ANR	6248300	UnaryOperationExpression	! str		6248294	0					
ANR	6248301	UnaryOperator	!		6248294	0					
ANR	6248302	Identifier	str		6248294	1					
ANR	6248303	OrExpression	! key || ! val		6248294	1		||			
ANR	6248304	UnaryOperationExpression	! key		6248294	0					
ANR	6248305	UnaryOperator	!		6248294	0					
ANR	6248306	Identifier	key		6248294	1					
ANR	6248307	UnaryOperationExpression	! val		6248294	1					
ANR	6248308	UnaryOperator	!		6248294	0					
ANR	6248309	Identifier	val		6248294	1					
ANR	6248310	CompoundStatement		2:27:28:28	6248294	1					
ANR	6248311	ReturnStatement	return NULL ;	1105:2:22947:22958	6248294	0	True				
ANR	6248312	Identifier	NULL		6248294	0					
ANR	6248313	IdentifierDeclStatement	"char * heaped = r_str_replace ( strdup ( str ) , key , val , g ) ;"	1107:1:22964:23020	6248294	1	True				
ANR	6248314	IdentifierDecl	"* heaped = r_str_replace ( strdup ( str ) , key , val , g )"		6248294	0					
ANR	6248315	IdentifierDeclType	char *		6248294	0					
ANR	6248316	Identifier	heaped		6248294	1					
ANR	6248317	AssignmentExpression	"* heaped = r_str_replace ( strdup ( str ) , key , val , g )"		6248294	2		=			
ANR	6248318	Identifier	heaped		6248294	0					
ANR	6248319	CallExpression	"r_str_replace ( strdup ( str ) , key , val , g )"		6248294	1					
ANR	6248320	Callee	r_str_replace		6248294	0					
ANR	6248321	Identifier	r_str_replace		6248294	0					
ANR	6248322	ArgumentList	strdup ( str )		6248294	1					
ANR	6248323	Argument	strdup ( str )		6248294	0					
ANR	6248324	CallExpression	strdup ( str )		6248294	0					
ANR	6248325	Callee	strdup		6248294	0					
ANR	6248326	Identifier	strdup		6248294	0					
ANR	6248327	ArgumentList	str		6248294	1					
ANR	6248328	Argument	str		6248294	0					
ANR	6248329	Identifier	str		6248294	0					
ANR	6248330	Argument	key		6248294	1					
ANR	6248331	Identifier	key		6248294	0					
ANR	6248332	Argument	val		6248294	2					
ANR	6248333	Identifier	val		6248294	0					
ANR	6248334	Argument	g		6248294	3					
ANR	6248335	Identifier	g		6248294	0					
ANR	6248336	IfStatement	if ( heaped )		6248294	2					
ANR	6248337	Condition	heaped	1108:5:23027:23032	6248294	0	True				
ANR	6248338	Identifier	heaped		6248294	0					
ANR	6248339	CompoundStatement		6:13:120:120	6248294	1					
ANR	6248340	ExpressionStatement	"strncpy ( str , heaped , sz )"	1109:2:23039:23064	6248294	0	True				
ANR	6248341	CallExpression	"strncpy ( str , heaped , sz )"		6248294	0					
ANR	6248342	Callee	strncpy		6248294	0					
ANR	6248343	Identifier	strncpy		6248294	0					
ANR	6248344	ArgumentList	str		6248294	1					
ANR	6248345	Argument	str		6248294	0					
ANR	6248346	Identifier	str		6248294	0					
ANR	6248347	Argument	heaped		6248294	1					
ANR	6248348	Identifier	heaped		6248294	0					
ANR	6248349	Argument	sz		6248294	2					
ANR	6248350	Identifier	sz		6248294	0					
ANR	6248351	ExpressionStatement	free ( heaped )	1110:2:23068:23081	6248294	1	True				
ANR	6248352	CallExpression	free ( heaped )		6248294	0					
ANR	6248353	Callee	free		6248294	0					
ANR	6248354	Identifier	free		6248294	0					
ANR	6248355	ArgumentList	heaped		6248294	1					
ANR	6248356	Argument	heaped		6248294	0					
ANR	6248357	Identifier	heaped		6248294	0					
ANR	6248358	ReturnStatement	return str ;	1112:1:23087:23097	6248294	3	True				
ANR	6248359	Identifier	str		6248294	0					
ANR	6248360	ReturnType	R_API char *		6248294	1					
ANR	6248361	Identifier	r_str_replace_in		6248294	2					
ANR	6248362	ParameterList	"char * str , ut32 sz , const char * key , const char * val , int g"		6248294	3					
ANR	6248363	Parameter	char * str	1103:29:22853:22861	6248294	0	True				
ANR	6248364	ParameterType	char *		6248294	0					
ANR	6248365	Identifier	str		6248294	1					
ANR	6248366	Parameter	ut32 sz	1103:40:22864:22870	6248294	1	True				
ANR	6248367	ParameterType	ut32		6248294	0					
ANR	6248368	Identifier	sz		6248294	1					
ANR	6248369	Parameter	const char * key	1103:49:22873:22887	6248294	2	True				
ANR	6248370	ParameterType	const char *		6248294	0					
ANR	6248371	Identifier	key		6248294	1					
ANR	6248372	Parameter	const char * val	1103:66:22890:22904	6248294	3	True				
ANR	6248373	ParameterType	const char *		6248294	0					
ANR	6248374	Identifier	val		6248294	1					
ANR	6248375	Parameter	int g	1103:83:22907:22911	6248294	4	True				
ANR	6248376	ParameterType	int		6248294	0					
ANR	6248377	Identifier	g		6248294	1					
ANR	6248378	CFGEntryNode	ENTRY		6248294		True				
ANR	6248379	CFGExitNode	EXIT		6248294		True				
ANR	6248380	Symbol	str		6248294						
ANR	6248381	Symbol	val		6248294						
ANR	6248382	Symbol	NULL		6248294						
ANR	6248383	Symbol	sz		6248294						
ANR	6248384	Symbol	g		6248294						
ANR	6248385	Symbol	r_str_replace		6248294						
ANR	6248386	Symbol	strdup		6248294						
ANR	6248387	Symbol	key		6248294						
ANR	6248388	Symbol	heaped		6248294						
ANR	6248389	Function	r_str_unescape	1115:0:23102:24651							
ANR	6248390	FunctionDef	r_str_unescape (char * buf)		6248389	0					
ANR	6248391	CompoundStatement		1115:36:23138:24651	6248389	0					
ANR	6248392	IdentifierDeclStatement	"unsigned char ch = 0 , ch2 = 0 ;"	1116:1:23141:23170	6248389	0	True				
ANR	6248393	IdentifierDecl	ch = 0		6248389	0					
ANR	6248394	IdentifierDeclType	unsigned char		6248389	0					
ANR	6248395	Identifier	ch		6248389	1					
ANR	6248396	AssignmentExpression	ch = 0		6248389	2		=			
ANR	6248397	Identifier	ch		6248389	0					
ANR	6248398	PrimaryExpression	0		6248389	1					
ANR	6248399	IdentifierDecl	ch2 = 0		6248389	1					
ANR	6248400	IdentifierDeclType	unsigned char		6248389	0					
ANR	6248401	Identifier	ch2		6248389	1					
ANR	6248402	AssignmentExpression	ch2 = 0		6248389	2		=			
ANR	6248403	Identifier	ch2		6248389	0					
ANR	6248404	PrimaryExpression	0		6248389	1					
ANR	6248405	IdentifierDeclStatement	int err = 0 ;	1117:1:23173:23184	6248389	1	True				
ANR	6248406	IdentifierDecl	err = 0		6248389	0					
ANR	6248407	IdentifierDeclType	int		6248389	0					
ANR	6248408	Identifier	err		6248389	1					
ANR	6248409	AssignmentExpression	err = 0		6248389	2		=			
ANR	6248410	Identifier	err		6248389	0					
ANR	6248411	PrimaryExpression	0		6248389	1					
ANR	6248412	IdentifierDeclStatement	int i ;	1118:1:23187:23192	6248389	2	True				
ANR	6248413	IdentifierDecl	i		6248389	0					
ANR	6248414	IdentifierDeclType	int		6248389	0					
ANR	6248415	Identifier	i		6248389	1					
ANR	6248416	ForStatement	for ( i = 0 ; buf [ i ] ; i ++ )		6248389	3					
ANR	6248417	ForInit	i = 0 ;	1120:6:23201:23206	6248389	0	True				
ANR	6248418	AssignmentExpression	i = 0		6248389	0		=			
ANR	6248419	Identifier	i		6248389	0					
ANR	6248420	PrimaryExpression	0		6248389	1					
ANR	6248421	Condition	buf [ i ]	1120:13:23208:23213	6248389	1	True				
ANR	6248422	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248423	Identifier	buf		6248389	0					
ANR	6248424	Identifier	i		6248389	1					
ANR	6248425	PostIncDecOperationExpression	i ++	1120:21:23216:23218	6248389	2	True				
ANR	6248426	Identifier	i		6248389	0					
ANR	6248427	IncDec	++		6248389	1					
ANR	6248428	CompoundStatement		6:26:82:82	6248389	3					
ANR	6248429	IfStatement	if ( buf [ i ] != '\\\\' )		6248389	0					
ANR	6248430	Condition	buf [ i ] != '\\\\'	1121:6:23229:23242	6248389	0	True				
ANR	6248431	EqualityExpression	buf [ i ] != '\\\\'		6248389	0		!=			
ANR	6248432	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248433	Identifier	buf		6248389	0					
ANR	6248434	Identifier	i		6248389	1					
ANR	6248435	PrimaryExpression	'\\\\'		6248389	1					
ANR	6248436	CompoundStatement		7:22:106:106	6248389	1					
ANR	6248437	ContinueStatement	continue ;	1122:3:23250:23258	6248389	0	True				
ANR	6248438	IfStatement	if ( buf [ i + 1 ] == 'e' )		6248389	1					
ANR	6248439	Condition	buf [ i + 1 ] == 'e'	1124:6:23270:23284	6248389	0	True				
ANR	6248440	EqualityExpression	buf [ i + 1 ] == 'e'		6248389	0		==			
ANR	6248441	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248442	Identifier	buf		6248389	0					
ANR	6248443	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248444	Identifier	i		6248389	0					
ANR	6248445	PrimaryExpression	1		6248389	1					
ANR	6248446	PrimaryExpression	'e'		6248389	1					
ANR	6248447	CompoundStatement		10:23:148:148	6248389	1					
ANR	6248448	ExpressionStatement	buf [ i ] = 0x1b	1125:3:23292:23305	6248389	0	True				
ANR	6248449	AssignmentExpression	buf [ i ] = 0x1b		6248389	0		=			
ANR	6248450	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248451	Identifier	buf		6248389	0					
ANR	6248452	Identifier	i		6248389	1					
ANR	6248453	PrimaryExpression	0x1b		6248389	1					
ANR	6248454	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1126:3:23310:23370	6248389	1	True				
ANR	6248455	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		6248389	0					
ANR	6248456	Callee	memmove		6248389	0					
ANR	6248457	Identifier	memmove		6248389	0					
ANR	6248458	ArgumentList	buf + i + 1		6248389	1					
ANR	6248459	Argument	buf + i + 1		6248389	0					
ANR	6248460	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248461	Identifier	buf		6248389	0					
ANR	6248462	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248463	Identifier	i		6248389	0					
ANR	6248464	PrimaryExpression	1		6248389	1					
ANR	6248465	Argument	buf + i + 2		6248389	1					
ANR	6248466	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248467	Identifier	buf		6248389	0					
ANR	6248468	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248469	Identifier	i		6248389	0					
ANR	6248470	PrimaryExpression	2		6248389	1					
ANR	6248471	Argument	strlen ( buf + i + 2 ) + 1		6248389	2					
ANR	6248472	AdditiveExpression	strlen ( buf + i + 2 ) + 1		6248389	0		+			
ANR	6248473	CallExpression	strlen ( buf + i + 2 )		6248389	0					
ANR	6248474	Callee	strlen		6248389	0					
ANR	6248475	Identifier	strlen		6248389	0					
ANR	6248476	ArgumentList	buf + i + 2		6248389	1					
ANR	6248477	Argument	buf + i + 2		6248389	0					
ANR	6248478	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248479	Identifier	buf		6248389	0					
ANR	6248480	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248481	Identifier	i		6248389	0					
ANR	6248482	PrimaryExpression	2		6248389	1					
ANR	6248483	PrimaryExpression	1		6248389	1					
ANR	6248484	ElseStatement	else		6248389	0					
ANR	6248485	IfStatement	if ( buf [ i + 1 ] == '\\\\' )		6248389	0					
ANR	6248486	Condition	buf [ i + 1 ] == '\\\\'	1127:13:23385:23402	6248389	0	True				
ANR	6248487	EqualityExpression	buf [ i + 1 ] == '\\\\'		6248389	0		==			
ANR	6248488	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248489	Identifier	buf		6248389	0					
ANR	6248490	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248491	Identifier	i		6248389	0					
ANR	6248492	PrimaryExpression	1		6248389	1					
ANR	6248493	PrimaryExpression	'\\\\'		6248389	1					
ANR	6248494	CompoundStatement		13:33:266:266	6248389	1					
ANR	6248495	ExpressionStatement	buf [ i ] = '\\\\'	1128:3:23410:23423	6248389	0	True				
ANR	6248496	AssignmentExpression	buf [ i ] = '\\\\'		6248389	0		=			
ANR	6248497	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248498	Identifier	buf		6248389	0					
ANR	6248499	Identifier	i		6248389	1					
ANR	6248500	PrimaryExpression	'\\\\'		6248389	1					
ANR	6248501	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1129:3:23428:23488	6248389	1	True				
ANR	6248502	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		6248389	0					
ANR	6248503	Callee	memmove		6248389	0					
ANR	6248504	Identifier	memmove		6248389	0					
ANR	6248505	ArgumentList	buf + i + 1		6248389	1					
ANR	6248506	Argument	buf + i + 1		6248389	0					
ANR	6248507	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248508	Identifier	buf		6248389	0					
ANR	6248509	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248510	Identifier	i		6248389	0					
ANR	6248511	PrimaryExpression	1		6248389	1					
ANR	6248512	Argument	buf + i + 2		6248389	1					
ANR	6248513	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248514	Identifier	buf		6248389	0					
ANR	6248515	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248516	Identifier	i		6248389	0					
ANR	6248517	PrimaryExpression	2		6248389	1					
ANR	6248518	Argument	strlen ( buf + i + 2 ) + 1		6248389	2					
ANR	6248519	AdditiveExpression	strlen ( buf + i + 2 ) + 1		6248389	0		+			
ANR	6248520	CallExpression	strlen ( buf + i + 2 )		6248389	0					
ANR	6248521	Callee	strlen		6248389	0					
ANR	6248522	Identifier	strlen		6248389	0					
ANR	6248523	ArgumentList	buf + i + 2		6248389	1					
ANR	6248524	Argument	buf + i + 2		6248389	0					
ANR	6248525	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248526	Identifier	buf		6248389	0					
ANR	6248527	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248528	Identifier	i		6248389	0					
ANR	6248529	PrimaryExpression	2		6248389	1					
ANR	6248530	PrimaryExpression	1		6248389	1					
ANR	6248531	ElseStatement	else		6248389	0					
ANR	6248532	IfStatement	if ( buf [ i + 1 ] == 'r' )		6248389	0					
ANR	6248533	Condition	buf [ i + 1 ] == 'r'	1130:13:23503:23517	6248389	0	True				
ANR	6248534	EqualityExpression	buf [ i + 1 ] == 'r'		6248389	0		==			
ANR	6248535	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248536	Identifier	buf		6248389	0					
ANR	6248537	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248538	Identifier	i		6248389	0					
ANR	6248539	PrimaryExpression	1		6248389	1					
ANR	6248540	PrimaryExpression	'r'		6248389	1					
ANR	6248541	CompoundStatement		16:30:381:381	6248389	1					
ANR	6248542	ExpressionStatement	buf [ i ] = 0x0d	1131:3:23525:23538	6248389	0	True				
ANR	6248543	AssignmentExpression	buf [ i ] = 0x0d		6248389	0		=			
ANR	6248544	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248545	Identifier	buf		6248389	0					
ANR	6248546	Identifier	i		6248389	1					
ANR	6248547	PrimaryExpression	0x0d		6248389	1					
ANR	6248548	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1132:3:23543:23603	6248389	1	True				
ANR	6248549	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		6248389	0					
ANR	6248550	Callee	memmove		6248389	0					
ANR	6248551	Identifier	memmove		6248389	0					
ANR	6248552	ArgumentList	buf + i + 1		6248389	1					
ANR	6248553	Argument	buf + i + 1		6248389	0					
ANR	6248554	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248555	Identifier	buf		6248389	0					
ANR	6248556	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248557	Identifier	i		6248389	0					
ANR	6248558	PrimaryExpression	1		6248389	1					
ANR	6248559	Argument	buf + i + 2		6248389	1					
ANR	6248560	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248561	Identifier	buf		6248389	0					
ANR	6248562	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248563	Identifier	i		6248389	0					
ANR	6248564	PrimaryExpression	2		6248389	1					
ANR	6248565	Argument	strlen ( buf + i + 2 ) + 1		6248389	2					
ANR	6248566	AdditiveExpression	strlen ( buf + i + 2 ) + 1		6248389	0		+			
ANR	6248567	CallExpression	strlen ( buf + i + 2 )		6248389	0					
ANR	6248568	Callee	strlen		6248389	0					
ANR	6248569	Identifier	strlen		6248389	0					
ANR	6248570	ArgumentList	buf + i + 2		6248389	1					
ANR	6248571	Argument	buf + i + 2		6248389	0					
ANR	6248572	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248573	Identifier	buf		6248389	0					
ANR	6248574	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248575	Identifier	i		6248389	0					
ANR	6248576	PrimaryExpression	2		6248389	1					
ANR	6248577	PrimaryExpression	1		6248389	1					
ANR	6248578	ElseStatement	else		6248389	0					
ANR	6248579	IfStatement	if ( buf [ i + 1 ] == 'n' )		6248389	0					
ANR	6248580	Condition	buf [ i + 1 ] == 'n'	1133:13:23618:23632	6248389	0	True				
ANR	6248581	EqualityExpression	buf [ i + 1 ] == 'n'		6248389	0		==			
ANR	6248582	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248583	Identifier	buf		6248389	0					
ANR	6248584	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248585	Identifier	i		6248389	0					
ANR	6248586	PrimaryExpression	1		6248389	1					
ANR	6248587	PrimaryExpression	'n'		6248389	1					
ANR	6248588	CompoundStatement		19:30:496:496	6248389	1					
ANR	6248589	ExpressionStatement	buf [ i ] = 0x0a	1134:3:23640:23653	6248389	0	True				
ANR	6248590	AssignmentExpression	buf [ i ] = 0x0a		6248389	0		=			
ANR	6248591	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248592	Identifier	buf		6248389	0					
ANR	6248593	Identifier	i		6248389	1					
ANR	6248594	PrimaryExpression	0x0a		6248389	1					
ANR	6248595	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"	1135:3:23658:23718	6248389	1	True				
ANR	6248596	CallExpression	"memmove ( buf + i + 1 , buf + i + 2 , strlen ( buf + i + 2 ) + 1 )"		6248389	0					
ANR	6248597	Callee	memmove		6248389	0					
ANR	6248598	Identifier	memmove		6248389	0					
ANR	6248599	ArgumentList	buf + i + 1		6248389	1					
ANR	6248600	Argument	buf + i + 1		6248389	0					
ANR	6248601	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248602	Identifier	buf		6248389	0					
ANR	6248603	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248604	Identifier	i		6248389	0					
ANR	6248605	PrimaryExpression	1		6248389	1					
ANR	6248606	Argument	buf + i + 2		6248389	1					
ANR	6248607	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248608	Identifier	buf		6248389	0					
ANR	6248609	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248610	Identifier	i		6248389	0					
ANR	6248611	PrimaryExpression	2		6248389	1					
ANR	6248612	Argument	strlen ( buf + i + 2 ) + 1		6248389	2					
ANR	6248613	AdditiveExpression	strlen ( buf + i + 2 ) + 1		6248389	0		+			
ANR	6248614	CallExpression	strlen ( buf + i + 2 )		6248389	0					
ANR	6248615	Callee	strlen		6248389	0					
ANR	6248616	Identifier	strlen		6248389	0					
ANR	6248617	ArgumentList	buf + i + 2		6248389	1					
ANR	6248618	Argument	buf + i + 2		6248389	0					
ANR	6248619	AdditiveExpression	buf + i + 2		6248389	0		+			
ANR	6248620	Identifier	buf		6248389	0					
ANR	6248621	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248622	Identifier	i		6248389	0					
ANR	6248623	PrimaryExpression	2		6248389	1					
ANR	6248624	PrimaryExpression	1		6248389	1					
ANR	6248625	ElseStatement	else		6248389	0					
ANR	6248626	IfStatement	if ( buf [ i + 1 ] == 'x' )		6248389	0					
ANR	6248627	Condition	buf [ i + 1 ] == 'x'	1136:13:23733:23749	6248389	0	True				
ANR	6248628	EqualityExpression	buf [ i + 1 ] == 'x'		6248389	0		==			
ANR	6248629	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248630	Identifier	buf		6248389	0					
ANR	6248631	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248632	Identifier	i		6248389	0					
ANR	6248633	PrimaryExpression	1		6248389	1					
ANR	6248634	PrimaryExpression	'x'		6248389	1					
ANR	6248635	CompoundStatement		22:32:613:613	6248389	1					
ANR	6248636	ExpressionStatement	err = ch2 = ch = 0	1137:3:23757:23775	6248389	0	True				
ANR	6248637	AssignmentExpression	err = ch2 = ch = 0		6248389	0		=			
ANR	6248638	Identifier	err		6248389	0					
ANR	6248639	AssignmentExpression	ch2 = ch = 0		6248389	1		=			
ANR	6248640	Identifier	ch2		6248389	0					
ANR	6248641	AssignmentExpression	ch = 0		6248389	1		=			
ANR	6248642	Identifier	ch		6248389	0					
ANR	6248643	PrimaryExpression	0		6248389	1					
ANR	6248644	IfStatement	if ( ! buf [ i + 2 ] || ! buf [ i + 3 ] )		6248389	1					
ANR	6248645	Condition	! buf [ i + 2 ] || ! buf [ i + 3 ]	1138:7:23784:23809	6248389	0	True				
ANR	6248646	OrExpression	! buf [ i + 2 ] || ! buf [ i + 3 ]		6248389	0		||			
ANR	6248647	UnaryOperationExpression	! buf [ i + 2 ]		6248389	0					
ANR	6248648	UnaryOperator	!		6248389	0					
ANR	6248649	ArrayIndexing	buf [ i + 2 ]		6248389	1					
ANR	6248650	Identifier	buf		6248389	0					
ANR	6248651	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248652	Identifier	i		6248389	0					
ANR	6248653	PrimaryExpression	2		6248389	1					
ANR	6248654	UnaryOperationExpression	! buf [ i + 3 ]		6248389	1					
ANR	6248655	UnaryOperator	!		6248389	0					
ANR	6248656	ArrayIndexing	buf [ i + 3 ]		6248389	1					
ANR	6248657	Identifier	buf		6248389	0					
ANR	6248658	AdditiveExpression	i + 3		6248389	1		+			
ANR	6248659	Identifier	i		6248389	0					
ANR	6248660	PrimaryExpression	3		6248389	1					
ANR	6248661	CompoundStatement		24:35:673:673	6248389	1					
ANR	6248662	ExpressionStatement	"eprintf ( ""Unexpected end of string.\\n"" )"	1139:4:23818:23857	6248389	0	True				
ANR	6248663	CallExpression	"eprintf ( ""Unexpected end of string.\\n"" )"		6248389	0					
ANR	6248664	Callee	eprintf		6248389	0					
ANR	6248665	Identifier	eprintf		6248389	0					
ANR	6248666	ArgumentList	"""Unexpected end of string.\\n"""		6248389	1					
ANR	6248667	Argument	"""Unexpected end of string.\\n"""		6248389	0					
ANR	6248668	PrimaryExpression	"""Unexpected end of string.\\n"""		6248389	0					
ANR	6248669	ReturnStatement	return 0 ;	1140:4:23863:23871	6248389	1	True				
ANR	6248670	PrimaryExpression	0		6248389	0					
ANR	6248671	ExpressionStatement	"err |= r_hex_to_byte ( & ch , buf [ i + 2 ] )"	1142:3:23881:23920	6248389	2	True				
ANR	6248672	AssignmentExpression	"err |= r_hex_to_byte ( & ch , buf [ i + 2 ] )"		6248389	0		|=			
ANR	6248673	Identifier	err		6248389	0					
ANR	6248674	CallExpression	"r_hex_to_byte ( & ch , buf [ i + 2 ] )"		6248389	1					
ANR	6248675	Callee	r_hex_to_byte		6248389	0					
ANR	6248676	Identifier	r_hex_to_byte		6248389	0					
ANR	6248677	ArgumentList	& ch		6248389	1					
ANR	6248678	Argument	& ch		6248389	0					
ANR	6248679	UnaryOperationExpression	& ch		6248389	0					
ANR	6248680	UnaryOperator	&		6248389	0					
ANR	6248681	Identifier	ch		6248389	1					
ANR	6248682	Argument	buf [ i + 2 ]		6248389	1					
ANR	6248683	ArrayIndexing	buf [ i + 2 ]		6248389	0					
ANR	6248684	Identifier	buf		6248389	0					
ANR	6248685	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248686	Identifier	i		6248389	0					
ANR	6248687	PrimaryExpression	2		6248389	1					
ANR	6248688	ExpressionStatement	"err |= r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"	1143:3:23925:23964	6248389	3	True				
ANR	6248689	AssignmentExpression	"err |= r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"		6248389	0		|=			
ANR	6248690	Identifier	err		6248389	0					
ANR	6248691	CallExpression	"r_hex_to_byte ( & ch2 , buf [ i + 3 ] )"		6248389	1					
ANR	6248692	Callee	r_hex_to_byte		6248389	0					
ANR	6248693	Identifier	r_hex_to_byte		6248389	0					
ANR	6248694	ArgumentList	& ch2		6248389	1					
ANR	6248695	Argument	& ch2		6248389	0					
ANR	6248696	UnaryOperationExpression	& ch2		6248389	0					
ANR	6248697	UnaryOperator	&		6248389	0					
ANR	6248698	Identifier	ch2		6248389	1					
ANR	6248699	Argument	buf [ i + 3 ]		6248389	1					
ANR	6248700	ArrayIndexing	buf [ i + 3 ]		6248389	0					
ANR	6248701	Identifier	buf		6248389	0					
ANR	6248702	AdditiveExpression	i + 3		6248389	1		+			
ANR	6248703	Identifier	i		6248389	0					
ANR	6248704	PrimaryExpression	3		6248389	1					
ANR	6248705	IfStatement	if ( err )		6248389	4					
ANR	6248706	Condition	err	1144:7:23973:23975	6248389	0	True				
ANR	6248707	Identifier	err		6248389	0					
ANR	6248708	CompoundStatement		30:12:839:839	6248389	1					
ANR	6248709	ExpressionStatement	"eprintf ( ""Error: Non-hexadecimal chars in input.\\n"" )"	1145:4:23984:24036	6248389	0	True				
ANR	6248710	CallExpression	"eprintf ( ""Error: Non-hexadecimal chars in input.\\n"" )"		6248389	0					
ANR	6248711	Callee	eprintf		6248389	0					
ANR	6248712	Identifier	eprintf		6248389	0					
ANR	6248713	ArgumentList	"""Error: Non-hexadecimal chars in input.\\n"""		6248389	1					
ANR	6248714	Argument	"""Error: Non-hexadecimal chars in input.\\n"""		6248389	0					
ANR	6248715	PrimaryExpression	"""Error: Non-hexadecimal chars in input.\\n"""		6248389	0					
ANR	6248716	ReturnStatement	return 0 ;	1146:4:24042:24050	6248389	1	True				
ANR	6248717	PrimaryExpression	0		6248389	0					
ANR	6248718	ExpressionStatement	buf [ i ] = ( ch << 4 ) + ch2	1148:3:24067:24091	6248389	5	True				
ANR	6248719	AssignmentExpression	buf [ i ] = ( ch << 4 ) + ch2		6248389	0		=			
ANR	6248720	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248721	Identifier	buf		6248389	0					
ANR	6248722	Identifier	i		6248389	1					
ANR	6248723	AdditiveExpression	( ch << 4 ) + ch2		6248389	1		+			
ANR	6248724	ShiftExpression	ch << 4		6248389	0		<<			
ANR	6248725	Identifier	ch		6248389	0					
ANR	6248726	PrimaryExpression	4		6248389	1					
ANR	6248727	Identifier	ch2		6248389	1					
ANR	6248728	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 4 , strlen ( buf + i + 4 ) + 1 )"	1149:3:24096:24156	6248389	6	True				
ANR	6248729	CallExpression	"memmove ( buf + i + 1 , buf + i + 4 , strlen ( buf + i + 4 ) + 1 )"		6248389	0					
ANR	6248730	Callee	memmove		6248389	0					
ANR	6248731	Identifier	memmove		6248389	0					
ANR	6248732	ArgumentList	buf + i + 1		6248389	1					
ANR	6248733	Argument	buf + i + 1		6248389	0					
ANR	6248734	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248735	Identifier	buf		6248389	0					
ANR	6248736	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248737	Identifier	i		6248389	0					
ANR	6248738	PrimaryExpression	1		6248389	1					
ANR	6248739	Argument	buf + i + 4		6248389	1					
ANR	6248740	AdditiveExpression	buf + i + 4		6248389	0		+			
ANR	6248741	Identifier	buf		6248389	0					
ANR	6248742	AdditiveExpression	i + 4		6248389	1		+			
ANR	6248743	Identifier	i		6248389	0					
ANR	6248744	PrimaryExpression	4		6248389	1					
ANR	6248745	Argument	strlen ( buf + i + 4 ) + 1		6248389	2					
ANR	6248746	AdditiveExpression	strlen ( buf + i + 4 ) + 1		6248389	0		+			
ANR	6248747	CallExpression	strlen ( buf + i + 4 )		6248389	0					
ANR	6248748	Callee	strlen		6248389	0					
ANR	6248749	Identifier	strlen		6248389	0					
ANR	6248750	ArgumentList	buf + i + 4		6248389	1					
ANR	6248751	Argument	buf + i + 4		6248389	0					
ANR	6248752	AdditiveExpression	buf + i + 4		6248389	0		+			
ANR	6248753	Identifier	buf		6248389	0					
ANR	6248754	AdditiveExpression	i + 4		6248389	1		+			
ANR	6248755	Identifier	i		6248389	0					
ANR	6248756	PrimaryExpression	4		6248389	1					
ANR	6248757	PrimaryExpression	1		6248389	1					
ANR	6248758	ElseStatement	else		6248389	0					
ANR	6248759	IfStatement	if ( IS_OCTAL ( buf [ i + 1 ] ) )		6248389	0					
ANR	6248760	Condition	IS_OCTAL ( buf [ i + 1 ] )	1150:13:24171:24191	6248389	0	True				
ANR	6248761	CallExpression	IS_OCTAL ( buf [ i + 1 ] )		6248389	0					
ANR	6248762	Callee	IS_OCTAL		6248389	0					
ANR	6248763	Identifier	IS_OCTAL		6248389	0					
ANR	6248764	ArgumentList	buf [ i + 1 ]		6248389	1					
ANR	6248765	Argument	buf [ i + 1 ]		6248389	0					
ANR	6248766	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248767	Identifier	buf		6248389	0					
ANR	6248768	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248769	Identifier	i		6248389	0					
ANR	6248770	PrimaryExpression	1		6248389	1					
ANR	6248771	CompoundStatement		37:3:1060:1078	6248389	1					
ANR	6248772	IdentifierDeclStatement	int num_digits = 1 ;	1151:3:24199:24217	6248389	0	True				
ANR	6248773	IdentifierDecl	num_digits = 1		6248389	0					
ANR	6248774	IdentifierDeclType	int		6248389	0					
ANR	6248775	Identifier	num_digits		6248389	1					
ANR	6248776	AssignmentExpression	num_digits = 1		6248389	2		=			
ANR	6248777	Identifier	num_digits		6248389	0					
ANR	6248778	PrimaryExpression	1		6248389	1					
ANR	6248779	ExpressionStatement	buf [ i ] = buf [ i + 1 ] - '0'	1152:3:24222:24247	6248389	1	True				
ANR	6248780	AssignmentExpression	buf [ i ] = buf [ i + 1 ] - '0'		6248389	0		=			
ANR	6248781	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248782	Identifier	buf		6248389	0					
ANR	6248783	Identifier	i		6248389	1					
ANR	6248784	AdditiveExpression	buf [ i + 1 ] - '0'		6248389	1		-			
ANR	6248785	ArrayIndexing	buf [ i + 1 ]		6248389	0					
ANR	6248786	Identifier	buf		6248389	0					
ANR	6248787	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248788	Identifier	i		6248389	0					
ANR	6248789	PrimaryExpression	1		6248389	1					
ANR	6248790	PrimaryExpression	'0'		6248389	1					
ANR	6248791	IfStatement	if ( IS_OCTAL ( buf [ i + 2 ] ) )		6248389	2					
ANR	6248792	Condition	IS_OCTAL ( buf [ i + 2 ] )	1153:7:24256:24276	6248389	0	True				
ANR	6248793	CallExpression	IS_OCTAL ( buf [ i + 2 ] )		6248389	0					
ANR	6248794	Callee	IS_OCTAL		6248389	0					
ANR	6248795	Identifier	IS_OCTAL		6248389	0					
ANR	6248796	ArgumentList	buf [ i + 2 ]		6248389	1					
ANR	6248797	Argument	buf [ i + 2 ]		6248389	0					
ANR	6248798	ArrayIndexing	buf [ i + 2 ]		6248389	0					
ANR	6248799	Identifier	buf		6248389	0					
ANR	6248800	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248801	Identifier	i		6248389	0					
ANR	6248802	PrimaryExpression	2		6248389	1					
ANR	6248803	CompoundStatement		39:30:1140:1140	6248389	1					
ANR	6248804	ExpressionStatement	num_digits ++	1154:4:24285:24297	6248389	0	True				
ANR	6248805	PostIncDecOperationExpression	num_digits ++		6248389	0					
ANR	6248806	Identifier	num_digits		6248389	0					
ANR	6248807	IncDec	++		6248389	1					
ANR	6248808	ExpressionStatement	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )	1155:4:24303:24348	6248389	1	True				
ANR	6248809	AssignmentExpression	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )		6248389	0		=			
ANR	6248810	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248811	Identifier	buf		6248389	0					
ANR	6248812	Identifier	i		6248389	1					
ANR	6248813	AdditiveExpression	( ut8 ) buf [ i ] * 8 + ( buf [ i + 2 ] - '0' )		6248389	1		+			
ANR	6248814	MultiplicativeExpression	( ut8 ) buf [ i ] * 8		6248389	0		*			
ANR	6248815	CastExpression	( ut8 ) buf [ i ]		6248389	0					
ANR	6248816	CastTarget	ut8		6248389	0					
ANR	6248817	ArrayIndexing	buf [ i ]		6248389	1					
ANR	6248818	Identifier	buf		6248389	0					
ANR	6248819	Identifier	i		6248389	1					
ANR	6248820	PrimaryExpression	8		6248389	1					
ANR	6248821	AdditiveExpression	buf [ i + 2 ] - '0'		6248389	1		-			
ANR	6248822	ArrayIndexing	buf [ i + 2 ]		6248389	0					
ANR	6248823	Identifier	buf		6248389	0					
ANR	6248824	AdditiveExpression	i + 2		6248389	1		+			
ANR	6248825	Identifier	i		6248389	0					
ANR	6248826	PrimaryExpression	2		6248389	1					
ANR	6248827	PrimaryExpression	'0'		6248389	1					
ANR	6248828	IfStatement	if ( IS_OCTAL ( buf [ i + 3 ] ) )		6248389	2					
ANR	6248829	Condition	IS_OCTAL ( buf [ i + 3 ] )	1156:8:24358:24378	6248389	0	True				
ANR	6248830	CallExpression	IS_OCTAL ( buf [ i + 3 ] )		6248389	0					
ANR	6248831	Callee	IS_OCTAL		6248389	0					
ANR	6248832	Identifier	IS_OCTAL		6248389	0					
ANR	6248833	ArgumentList	buf [ i + 3 ]		6248389	1					
ANR	6248834	Argument	buf [ i + 3 ]		6248389	0					
ANR	6248835	ArrayIndexing	buf [ i + 3 ]		6248389	0					
ANR	6248836	Identifier	buf		6248389	0					
ANR	6248837	AdditiveExpression	i + 3		6248389	1		+			
ANR	6248838	Identifier	i		6248389	0					
ANR	6248839	PrimaryExpression	3		6248389	1					
ANR	6248840	CompoundStatement		42:31:1242:1242	6248389	1					
ANR	6248841	ExpressionStatement	num_digits ++	1157:5:24388:24400	6248389	0	True				
ANR	6248842	PostIncDecOperationExpression	num_digits ++		6248389	0					
ANR	6248843	Identifier	num_digits		6248389	0					
ANR	6248844	IncDec	++		6248389	1					
ANR	6248845	ExpressionStatement	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )	1158:5:24407:24452	6248389	1	True				
ANR	6248846	AssignmentExpression	buf [ i ] = ( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )		6248389	0		=			
ANR	6248847	ArrayIndexing	buf [ i ]		6248389	0					
ANR	6248848	Identifier	buf		6248389	0					
ANR	6248849	Identifier	i		6248389	1					
ANR	6248850	AdditiveExpression	( ut8 ) buf [ i ] * 8 + ( buf [ i + 3 ] - '0' )		6248389	1		+			
ANR	6248851	MultiplicativeExpression	( ut8 ) buf [ i ] * 8		6248389	0		*			
ANR	6248852	CastExpression	( ut8 ) buf [ i ]		6248389	0					
ANR	6248853	CastTarget	ut8		6248389	0					
ANR	6248854	ArrayIndexing	buf [ i ]		6248389	1					
ANR	6248855	Identifier	buf		6248389	0					
ANR	6248856	Identifier	i		6248389	1					
ANR	6248857	PrimaryExpression	8		6248389	1					
ANR	6248858	AdditiveExpression	buf [ i + 3 ] - '0'		6248389	1		-			
ANR	6248859	ArrayIndexing	buf [ i + 3 ]		6248389	0					
ANR	6248860	Identifier	buf		6248389	0					
ANR	6248861	AdditiveExpression	i + 3		6248389	1		+			
ANR	6248862	Identifier	i		6248389	0					
ANR	6248863	PrimaryExpression	3		6248389	1					
ANR	6248864	PrimaryExpression	'0'		6248389	1					
ANR	6248865	ExpressionStatement	"memmove ( buf + i + 1 , buf + i + 1 + num_digits , strlen ( buf + i + 1 + num_digits ) + 1 )"	1161:3:24468:24566	6248389	3	True				
ANR	6248866	CallExpression	"memmove ( buf + i + 1 , buf + i + 1 + num_digits , strlen ( buf + i + 1 + num_digits ) + 1 )"		6248389	0					
ANR	6248867	Callee	memmove		6248389	0					
ANR	6248868	Identifier	memmove		6248389	0					
ANR	6248869	ArgumentList	buf + i + 1		6248389	1					
ANR	6248870	Argument	buf + i + 1		6248389	0					
ANR	6248871	AdditiveExpression	buf + i + 1		6248389	0		+			
ANR	6248872	Identifier	buf		6248389	0					
ANR	6248873	AdditiveExpression	i + 1		6248389	1		+			
ANR	6248874	Identifier	i		6248389	0					
ANR	6248875	PrimaryExpression	1		6248389	1					
ANR	6248876	Argument	buf + i + 1 + num_digits		6248389	1					
ANR	6248877	AdditiveExpression	buf + i + 1 + num_digits		6248389	0		+			
ANR	6248878	Identifier	buf		6248389	0					
ANR	6248879	AdditiveExpression	i + 1 + num_digits		6248389	1		+			
ANR	6248880	Identifier	i		6248389	0					
ANR	6248881	AdditiveExpression	1 + num_digits		6248389	1		+			
ANR	6248882	PrimaryExpression	1		6248389	0					
ANR	6248883	Identifier	num_digits		6248389	1					
ANR	6248884	Argument	strlen ( buf + i + 1 + num_digits ) + 1		6248389	2					
ANR	6248885	AdditiveExpression	strlen ( buf + i + 1 + num_digits ) + 1		6248389	0		+			
ANR	6248886	CallExpression	strlen ( buf + i + 1 + num_digits )		6248389	0					
ANR	6248887	Callee	strlen		6248389	0					
ANR	6248888	Identifier	strlen		6248389	0					
ANR	6248889	ArgumentList	buf + i + 1 + num_digits		6248389	1					
ANR	6248890	Argument	buf + i + 1 + num_digits		6248389	0					
ANR	6248891	AdditiveExpression	buf + i + 1 + num_digits		6248389	0		+			
ANR	6248892	Identifier	buf		6248389	0					
ANR	6248893	AdditiveExpression	i + 1 + num_digits		6248389	1		+			
ANR	6248894	Identifier	i		6248389	0					
ANR	6248895	AdditiveExpression	1 + num_digits		6248389	1		+			
ANR	6248896	PrimaryExpression	1		6248389	0					
ANR	6248897	Identifier	num_digits		6248389	1					
ANR	6248898	PrimaryExpression	1		6248389	1					
ANR	6248899	ElseStatement	else		6248389	0					
ANR	6248900	CompoundStatement		49:9:1438:1438	6248389	0					
ANR	6248901	ExpressionStatement	"eprintf ( ""'\\\\x' expected.\\n"" )"	1164:3:24582:24611	6248389	0	True				
ANR	6248902	CallExpression	"eprintf ( ""'\\\\x' expected.\\n"" )"		6248389	0					
ANR	6248903	Callee	eprintf		6248389	0					
ANR	6248904	Identifier	eprintf		6248389	0					
ANR	6248905	ArgumentList	"""'\\\\x' expected.\\n"""		6248389	1					
ANR	6248906	Argument	"""'\\\\x' expected.\\n"""		6248389	0					
ANR	6248907	PrimaryExpression	"""'\\\\x' expected.\\n"""		6248389	0					
ANR	6248908	ReturnStatement	return 0 ;	1165:3:24616:24624	6248389	1	True				
ANR	6248909	PrimaryExpression	0		6248389	0					
ANR	6248910	ReturnStatement	return i ;	1168:1:24641:24649	6248389	4	True				
ANR	6248911	Identifier	i		6248389	0					
ANR	6248912	ReturnType	R_API int		6248389	1					
ANR	6248913	Identifier	r_str_unescape		6248389	2					
ANR	6248914	ParameterList	char * buf		6248389	3					
ANR	6248915	Parameter	char * buf	1115:25:23127:23135	6248389	0	True				
ANR	6248916	ParameterType	char *		6248389	0					
ANR	6248917	Identifier	buf		6248389	1					
ANR	6248918	CFGEntryNode	ENTRY		6248389		True				
ANR	6248919	CFGExitNode	EXIT		6248389		True				
ANR	6248920	Symbol	* buf		6248389						
ANR	6248921	Symbol	err		6248389						
ANR	6248922	Symbol	ch		6248389						
ANR	6248923	Symbol	IS_OCTAL		6248389						
ANR	6248924	Symbol	i		6248389						
ANR	6248925	Symbol	r_hex_to_byte		6248389						
ANR	6248926	Symbol	ch2		6248389						
ANR	6248927	Symbol	& ch		6248389						
ANR	6248928	Symbol	strlen		6248389						
ANR	6248929	Symbol	buf		6248389						
ANR	6248930	Symbol	* i		6248389						
ANR	6248931	Symbol	& ch2		6248389						
ANR	6248932	Symbol	num_digits		6248389						
ANR	6248933	Function	r_str_sanitize	1171:0:24654:24954							
ANR	6248934	FunctionDef	r_str_sanitize (char * c)		6248933	0					
ANR	6248935	CompoundStatement		1171:35:24689:24954	6248933	0					
ANR	6248936	IdentifierDeclStatement	char * d = c ;	1172:1:24692:24703	6248933	0	True				
ANR	6248937	IdentifierDecl	* d = c		6248933	0					
ANR	6248938	IdentifierDeclType	char *		6248933	0					
ANR	6248939	Identifier	d		6248933	1					
ANR	6248940	AssignmentExpression	* d = c		6248933	2		=			
ANR	6248941	Identifier	c		6248933	0					
ANR	6248942	Identifier	c		6248933	1					
ANR	6248943	IfStatement	if ( d )		6248933	1					
ANR	6248944	Condition	d	1173:5:24710:24710	6248933	0	True				
ANR	6248945	Identifier	d		6248933	0					
ANR	6248946	CompoundStatement		3:9:24:24	6248933	1					
ANR	6248947	ForStatement	"for ( ; * d ; c ++ , d ++ )"		6248933	0					
ANR	6248948	Condition	* d	1174:9:24725:24726	6248933	0	True				
ANR	6248949	UnaryOperationExpression	* d		6248933	0					
ANR	6248950	UnaryOperator	*		6248933	0					
ANR	6248951	Identifier	d		6248933	1					
ANR	6248952	Expression	"c ++ , d ++"	1174:13:24729:24736	6248933	1	True				
ANR	6248953	PostIncDecOperationExpression	c ++		6248933	0					
ANR	6248954	Identifier	c		6248933	0					
ANR	6248955	IncDec	++		6248933	1					
ANR	6248956	PostIncDecOperationExpression	d ++		6248933	1					
ANR	6248957	Identifier	d		6248933	0					
ANR	6248958	IncDec	++		6248933	1					
ANR	6248959	CompoundStatement		4:23:49:49	6248933	2					
ANR	6248960	SwitchStatement	switch ( * d )		6248933	0					
ANR	6248961	Condition	* d	1175:11:24752:24753	6248933	0	True				
ANR	6248962	UnaryOperationExpression	* d		6248933	0					
ANR	6248963	UnaryOperator	*		6248933	0					
ANR	6248964	Identifier	d		6248933	1					
ANR	6248965	CompoundStatement		5:15:66:66	6248933	1					
ANR	6248966	Label	case '`' :	1176:3:24761:24769	6248933	0	True				
ANR	6248967	Label	case '$' :	1177:3:24774:24782	6248933	1	True				
ANR	6248968	Label	case '{' :	1178:3:24787:24795	6248933	2	True				
ANR	6248969	Label	case '}' :	1179:3:24800:24808	6248933	3	True				
ANR	6248970	Label	case '~' :	1180:3:24813:24821	6248933	4	True				
ANR	6248971	Label	case '|' :	1181:3:24826:24834	6248933	5	True				
ANR	6248972	Label	case ';' :	1182:3:24839:24847	6248933	6	True				
ANR	6248973	Label	case '#' :	1183:3:24852:24860	6248933	7	True				
ANR	6248974	Label	case '@' :	1184:3:24865:24873	6248933	8	True				
ANR	6248975	Label	case '&' :	1185:3:24878:24886	6248933	9	True				
ANR	6248976	Label	case '<' :	1186:3:24891:24899	6248933	10	True				
ANR	6248977	Label	case '>' :	1187:3:24904:24912	6248933	11	True				
ANR	6248978	ExpressionStatement	* c = '_'	1188:4:24918:24926	6248933	12	True				
ANR	6248979	AssignmentExpression	* c = '_'		6248933	0		=			
ANR	6248980	UnaryOperationExpression	* c		6248933	0					
ANR	6248981	UnaryOperator	*		6248933	0					
ANR	6248982	Identifier	c		6248933	1					
ANR	6248983	PrimaryExpression	'_'		6248933	1					
ANR	6248984	ContinueStatement	continue ;	1189:4:24932:24940	6248933	13	True				
ANR	6248985	ReturnType	R_API void		6248933	1					
ANR	6248986	Identifier	r_str_sanitize		6248933	2					
ANR	6248987	ParameterList	char * c		6248933	3					
ANR	6248988	Parameter	char * c	1171:26:24680:24686	6248933	0	True				
ANR	6248989	ParameterType	char *		6248933	0					
ANR	6248990	Identifier	c		6248933	1					
ANR	6248991	CFGEntryNode	ENTRY		6248933		True				
ANR	6248992	CFGExitNode	EXIT		6248933		True				
ANR	6248993	Symbol	c		6248933						
ANR	6248994	Symbol	d		6248933						
ANR	6248995	Symbol	* c		6248933						
ANR	6248996	Symbol	* d		6248933						
ANR	6248997	Function	r_str_sanitize_sdb_key	1195:0:24957:25382							
ANR	6248998	FunctionDef	r_str_sanitize_sdb_key (const char * s)		6248997	0					
ANR	6248999	CompoundStatement		1195:50:25007:25382	6248997	0					
ANR	6249000	IfStatement	if ( ! s || ! * s )		6248997	0					
ANR	6249001	Condition	! s || ! * s	1196:5:25014:25022	6248997	0	True				
ANR	6249002	OrExpression	! s || ! * s		6248997	0		||			
ANR	6249003	UnaryOperationExpression	! s		6248997	0					
ANR	6249004	UnaryOperator	!		6248997	0					
ANR	6249005	Identifier	s		6248997	1					
ANR	6249006	UnaryOperationExpression	! * s		6248997	1					
ANR	6249007	UnaryOperator	!		6248997	0					
ANR	6249008	UnaryOperationExpression	* s		6248997	1					
ANR	6249009	UnaryOperator	*		6248997	0					
ANR	6249010	Identifier	s		6248997	1					
ANR	6249011	CompoundStatement		2:16:17:17	6248997	1					
ANR	6249012	ReturnStatement	return NULL ;	1197:2:25029:25040	6248997	0	True				
ANR	6249013	Identifier	NULL		6248997	0					
ANR	6249014	IdentifierDeclStatement	size_t len = strlen ( s ) ;	1199:1:25046:25069	6248997	1	True				
ANR	6249015	IdentifierDecl	len = strlen ( s )		6248997	0					
ANR	6249016	IdentifierDeclType	size_t		6248997	0					
ANR	6249017	Identifier	len		6248997	1					
ANR	6249018	AssignmentExpression	len = strlen ( s )		6248997	2		=			
ANR	6249019	Identifier	len		6248997	0					
ANR	6249020	CallExpression	strlen ( s )		6248997	1					
ANR	6249021	Callee	strlen		6248997	0					
ANR	6249022	Identifier	strlen		6248997	0					
ANR	6249023	ArgumentList	s		6248997	1					
ANR	6249024	Argument	s		6248997	0					
ANR	6249025	Identifier	s		6248997	0					
ANR	6249026	IdentifierDeclStatement	char * ret = malloc ( len + 1 ) ;	1200:1:25072:25100	6248997	2	True				
ANR	6249027	IdentifierDecl	* ret = malloc ( len + 1 )		6248997	0					
ANR	6249028	IdentifierDeclType	char *		6248997	0					
ANR	6249029	Identifier	ret		6248997	1					
ANR	6249030	AssignmentExpression	* ret = malloc ( len + 1 )		6248997	2		=			
ANR	6249031	Identifier	ret		6248997	0					
ANR	6249032	CallExpression	malloc ( len + 1 )		6248997	1					
ANR	6249033	Callee	malloc		6248997	0					
ANR	6249034	Identifier	malloc		6248997	0					
ANR	6249035	ArgumentList	len + 1		6248997	1					
ANR	6249036	Argument	len + 1		6248997	0					
ANR	6249037	AdditiveExpression	len + 1		6248997	0		+			
ANR	6249038	Identifier	len		6248997	0					
ANR	6249039	PrimaryExpression	1		6248997	1					
ANR	6249040	IfStatement	if ( ! ret )		6248997	3					
ANR	6249041	Condition	! ret	1201:5:25107:25110	6248997	0	True				
ANR	6249042	UnaryOperationExpression	! ret		6248997	0					
ANR	6249043	UnaryOperator	!		6248997	0					
ANR	6249044	Identifier	ret		6248997	1					
ANR	6249045	CompoundStatement		7:11:105:105	6248997	1					
ANR	6249046	ReturnStatement	return NULL ;	1202:2:25117:25128	6248997	0	True				
ANR	6249047	Identifier	NULL		6248997	0					
ANR	6249048	IdentifierDeclStatement	char * cur = ret ;	1204:1:25134:25149	6248997	4	True				
ANR	6249049	IdentifierDecl	* cur = ret		6248997	0					
ANR	6249050	IdentifierDeclType	char *		6248997	0					
ANR	6249051	Identifier	cur		6248997	1					
ANR	6249052	AssignmentExpression	* cur = ret		6248997	2		=			
ANR	6249053	Identifier	ret		6248997	0					
ANR	6249054	Identifier	ret		6248997	1					
ANR	6249055	WhileStatement	while ( len > 0 )		6248997	5					
ANR	6249056	Condition	len > 0	1205:8:25159:25165	6248997	0	True				
ANR	6249057	RelationalExpression	len > 0		6248997	0		>			
ANR	6249058	Identifier	len		6248997	0					
ANR	6249059	PrimaryExpression	0		6248997	1					
ANR	6249060	CompoundStatement		12:2:164:175	6248997	1					
ANR	6249061	IdentifierDeclStatement	char c = * s ;	1206:2:25172:25183	6248997	0	True				
ANR	6249062	IdentifierDecl	c = * s		6248997	0					
ANR	6249063	IdentifierDeclType	char		6248997	0					
ANR	6249064	Identifier	c		6248997	1					
ANR	6249065	AssignmentExpression	c = * s		6248997	2		=			
ANR	6249066	Identifier	c		6248997	0					
ANR	6249067	UnaryOperationExpression	* s		6248997	1					
ANR	6249068	UnaryOperator	*		6248997	0					
ANR	6249069	Identifier	s		6248997	1					
ANR	6249070	IfStatement	if ( ! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':' )		6248997	1					
ANR	6249071	Condition	! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'	1207:6:25191:25294	6248997	0	True				
ANR	6249072	AndExpression	! ( c >= 'a' && c <= 'z' ) && ! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		6248997	0		&&			
ANR	6249073	UnaryOperationExpression	! ( c >= 'a' && c <= 'z' )		6248997	0					
ANR	6249074	UnaryOperator	!		6248997	0					
ANR	6249075	AndExpression	c >= 'a' && c <= 'z'		6248997	1		&&			
ANR	6249076	RelationalExpression	c >= 'a'		6248997	0		>=			
ANR	6249077	Identifier	c		6248997	0					
ANR	6249078	PrimaryExpression	'a'		6248997	1					
ANR	6249079	RelationalExpression	c <= 'z'		6248997	1		<=			
ANR	6249080	Identifier	c		6248997	0					
ANR	6249081	PrimaryExpression	'z'		6248997	1					
ANR	6249082	AndExpression	! ( c >= 'A' && c <= 'Z' ) && ! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		6248997	1		&&			
ANR	6249083	UnaryOperationExpression	! ( c >= 'A' && c <= 'Z' )		6248997	0					
ANR	6249084	UnaryOperator	!		6248997	0					
ANR	6249085	AndExpression	c >= 'A' && c <= 'Z'		6248997	1		&&			
ANR	6249086	RelationalExpression	c >= 'A'		6248997	0		>=			
ANR	6249087	Identifier	c		6248997	0					
ANR	6249088	PrimaryExpression	'A'		6248997	1					
ANR	6249089	RelationalExpression	c <= 'Z'		6248997	1		<=			
ANR	6249090	Identifier	c		6248997	0					
ANR	6249091	PrimaryExpression	'Z'		6248997	1					
ANR	6249092	AndExpression	! ( c >= '0' && c <= '9' ) && c != '_' && c != ':'		6248997	1		&&			
ANR	6249093	UnaryOperationExpression	! ( c >= '0' && c <= '9' )		6248997	0					
ANR	6249094	UnaryOperator	!		6248997	0					
ANR	6249095	AndExpression	c >= '0' && c <= '9'		6248997	1		&&			
ANR	6249096	RelationalExpression	c >= '0'		6248997	0		>=			
ANR	6249097	Identifier	c		6248997	0					
ANR	6249098	PrimaryExpression	'0'		6248997	1					
ANR	6249099	RelationalExpression	c <= '9'		6248997	1		<=			
ANR	6249100	Identifier	c		6248997	0					
ANR	6249101	PrimaryExpression	'9'		6248997	1					
ANR	6249102	AndExpression	c != '_' && c != ':'		6248997	1		&&			
ANR	6249103	EqualityExpression	c != '_'		6248997	0		!=			
ANR	6249104	Identifier	c		6248997	0					
ANR	6249105	PrimaryExpression	'_'		6248997	1					
ANR	6249106	EqualityExpression	c != ':'		6248997	1		!=			
ANR	6249107	Identifier	c		6248997	0					
ANR	6249108	PrimaryExpression	':'		6248997	1					
ANR	6249109	CompoundStatement		14:28:289:289	6248997	1					
ANR	6249110	ExpressionStatement	c = '_'	1209:3:25302:25309	6248997	0	True				
ANR	6249111	AssignmentExpression	c = '_'		6248997	0		=			
ANR	6249112	Identifier	c		6248997	0					
ANR	6249113	PrimaryExpression	'_'		6248997	1					
ANR	6249114	ExpressionStatement	* cur = c	1211:2:25317:25325	6248997	2	True				
ANR	6249115	AssignmentExpression	* cur = c		6248997	0		=			
ANR	6249116	UnaryOperationExpression	* cur		6248997	0					
ANR	6249117	UnaryOperator	*		6248997	0					
ANR	6249118	Identifier	cur		6248997	1					
ANR	6249119	Identifier	c		6248997	1					
ANR	6249120	ExpressionStatement	s ++	1212:2:25329:25332	6248997	3	True				
ANR	6249121	PostIncDecOperationExpression	s ++		6248997	0					
ANR	6249122	Identifier	s		6248997	0					
ANR	6249123	IncDec	++		6248997	1					
ANR	6249124	ExpressionStatement	cur ++	1213:2:25336:25341	6248997	4	True				
ANR	6249125	PostIncDecOperationExpression	cur ++		6248997	0					
ANR	6249126	Identifier	cur		6248997	0					
ANR	6249127	IncDec	++		6248997	1					
ANR	6249128	ExpressionStatement	len --	1214:2:25345:25350	6248997	5	True				
ANR	6249129	PostIncDecOperationExpression	len --		6248997	0					
ANR	6249130	Identifier	len		6248997	0					
ANR	6249131	IncDec	--		6248997	1					
ANR	6249132	ExpressionStatement	* cur = '\\0'	1216:1:25356:25367	6248997	6	True				
ANR	6249133	AssignmentExpression	* cur = '\\0'		6248997	0		=			
ANR	6249134	UnaryOperationExpression	* cur		6248997	0					
ANR	6249135	UnaryOperator	*		6248997	0					
ANR	6249136	Identifier	cur		6248997	1					
ANR	6249137	PrimaryExpression	'\\0'		6248997	1					
ANR	6249138	ReturnStatement	return ret ;	1217:1:25370:25380	6248997	7	True				
ANR	6249139	Identifier	ret		6248997	0					
ANR	6249140	ReturnType	R_API char *		6248997	1					
ANR	6249141	Identifier	r_str_sanitize_sdb_key		6248997	2					
ANR	6249142	ParameterList	const char * s		6248997	3					
ANR	6249143	Parameter	const char * s	1195:35:24992:25004	6248997	0	True				
ANR	6249144	ParameterType	const char *		6248997	0					
ANR	6249145	Identifier	s		6248997	1					
ANR	6249146	CFGEntryNode	ENTRY		6248997		True				
ANR	6249147	CFGExitNode	EXIT		6248997		True				
ANR	6249148	Symbol	ret		6248997						
ANR	6249149	Symbol	strlen		6248997						
ANR	6249150	Symbol	malloc		6248997						
ANR	6249151	Symbol	cur		6248997						
ANR	6249152	Symbol	s		6248997						
ANR	6249153	Symbol	NULL		6248997						
ANR	6249154	Symbol	c		6248997						
ANR	6249155	Symbol	len		6248997						
ANR	6249156	Symbol	* cur		6248997						
ANR	6249157	Symbol	* s		6248997						
ANR	6249158	Function	r_str_byte_escape	1220:0:25385:26311							
ANR	6249159	FunctionDef	"r_str_byte_escape (const char * p , char * * dst , int dot_nl , bool default_dot , bool esc_bslash)"		6249158	0					
ANR	6249160	CompoundStatement		1220:103:25488:26311	6249158	0					
ANR	6249161	IdentifierDeclStatement	char * q = * dst ;	1221:1:25491:25505	6249158	0	True				
ANR	6249162	IdentifierDecl	* q = * dst		6249158	0					
ANR	6249163	IdentifierDeclType	char *		6249158	0					
ANR	6249164	Identifier	q		6249158	1					
ANR	6249165	AssignmentExpression	* q = * dst		6249158	2		=			
ANR	6249166	Identifier	q		6249158	0					
ANR	6249167	UnaryOperationExpression	* dst		6249158	1					
ANR	6249168	UnaryOperator	*		6249158	0					
ANR	6249169	Identifier	dst		6249158	1					
ANR	6249170	SwitchStatement	switch ( * p )		6249158	1					
ANR	6249171	Condition	* p	1222:9:25516:25517	6249158	0	True				
ANR	6249172	UnaryOperationExpression	* p		6249158	0					
ANR	6249173	UnaryOperator	*		6249158	0					
ANR	6249174	Identifier	p		6249158	1					
ANR	6249175	CompoundStatement		3:13:31:31	6249158	1					
ANR	6249176	Label	case '\\n' :	1223:1:25523:25532	6249158	0	True				
ANR	6249177	ExpressionStatement	* q ++ = '\\\\'	1224:2:25536:25547	6249158	1	True				
ANR	6249178	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249179	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249180	UnaryOperator	*		6249158	0					
ANR	6249181	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249182	Identifier	q		6249158	0					
ANR	6249183	IncDec	++		6249158	1					
ANR	6249184	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249185	ExpressionStatement	* q ++ = dot_nl ? 'l' : 'n'	1225:2:25551:25576	6249158	2	True				
ANR	6249186	AssignmentExpression	* q ++ = dot_nl ? 'l' : 'n'		6249158	0		=			
ANR	6249187	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249188	UnaryOperator	*		6249158	0					
ANR	6249189	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249190	Identifier	q		6249158	0					
ANR	6249191	IncDec	++		6249158	1					
ANR	6249192	ConditionalExpression	dot_nl ? 'l' : 'n'		6249158	1					
ANR	6249193	Condition	dot_nl		6249158	0					
ANR	6249194	Identifier	dot_nl		6249158	0					
ANR	6249195	PrimaryExpression	'l'		6249158	1					
ANR	6249196	PrimaryExpression	'n'		6249158	2					
ANR	6249197	BreakStatement	break ;	1226:2:25580:25585	6249158	3	True				
ANR	6249198	Label	case '\\r' :	1227:1:25588:25597	6249158	4	True				
ANR	6249199	ExpressionStatement	* q ++ = '\\\\'	1228:2:25601:25612	6249158	5	True				
ANR	6249200	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249201	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249202	UnaryOperator	*		6249158	0					
ANR	6249203	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249204	Identifier	q		6249158	0					
ANR	6249205	IncDec	++		6249158	1					
ANR	6249206	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249207	ExpressionStatement	* q ++ = 'r'	1229:2:25616:25626	6249158	6	True				
ANR	6249208	AssignmentExpression	* q ++ = 'r'		6249158	0		=			
ANR	6249209	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249210	UnaryOperator	*		6249158	0					
ANR	6249211	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249212	Identifier	q		6249158	0					
ANR	6249213	IncDec	++		6249158	1					
ANR	6249214	PrimaryExpression	'r'		6249158	1					
ANR	6249215	BreakStatement	break ;	1230:2:25630:25635	6249158	7	True				
ANR	6249216	Label	case '\\\\' :	1231:1:25638:25647	6249158	8	True				
ANR	6249217	ExpressionStatement	* q ++ = '\\\\'	1232:2:25651:25662	6249158	9	True				
ANR	6249218	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249219	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249220	UnaryOperator	*		6249158	0					
ANR	6249221	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249222	Identifier	q		6249158	0					
ANR	6249223	IncDec	++		6249158	1					
ANR	6249224	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249225	IfStatement	if ( esc_bslash )		6249158	10					
ANR	6249226	Condition	esc_bslash	1233:6:25670:25679	6249158	0	True				
ANR	6249227	Identifier	esc_bslash		6249158	0					
ANR	6249228	CompoundStatement		14:18:193:193	6249158	1					
ANR	6249229	ExpressionStatement	* q ++ = '\\\\'	1234:3:25687:25698	6249158	0	True				
ANR	6249230	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249231	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249232	UnaryOperator	*		6249158	0					
ANR	6249233	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249234	Identifier	q		6249158	0					
ANR	6249235	IncDec	++		6249158	1					
ANR	6249236	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249237	BreakStatement	break ;	1236:2:25706:25711	6249158	11	True				
ANR	6249238	Label	case '\\t' :	1237:1:25714:25723	6249158	12	True				
ANR	6249239	ExpressionStatement	* q ++ = '\\\\'	1238:2:25727:25738	6249158	13	True				
ANR	6249240	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249241	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249242	UnaryOperator	*		6249158	0					
ANR	6249243	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249244	Identifier	q		6249158	0					
ANR	6249245	IncDec	++		6249158	1					
ANR	6249246	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249247	ExpressionStatement	* q ++ = 't'	1239:2:25742:25752	6249158	14	True				
ANR	6249248	AssignmentExpression	* q ++ = 't'		6249158	0		=			
ANR	6249249	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249250	UnaryOperator	*		6249158	0					
ANR	6249251	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249252	Identifier	q		6249158	0					
ANR	6249253	IncDec	++		6249158	1					
ANR	6249254	PrimaryExpression	't'		6249158	1					
ANR	6249255	BreakStatement	break ;	1240:2:25756:25761	6249158	15	True				
ANR	6249256	Label	"case '""' :"	1241:1:25764:25773	6249158	16	True				
ANR	6249257	ExpressionStatement	* q ++ = '\\\\'	1242:2:25777:25788	6249158	17	True				
ANR	6249258	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249259	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249260	UnaryOperator	*		6249158	0					
ANR	6249261	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249262	Identifier	q		6249158	0					
ANR	6249263	IncDec	++		6249158	1					
ANR	6249264	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249265	ExpressionStatement	"* q ++ = '""'"	1243:2:25792:25802	6249158	18	True				
ANR	6249266	AssignmentExpression	"* q ++ = '""'"		6249158	0		=			
ANR	6249267	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249268	UnaryOperator	*		6249158	0					
ANR	6249269	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249270	Identifier	q		6249158	0					
ANR	6249271	IncDec	++		6249158	1					
ANR	6249272	PrimaryExpression	"'""'"		6249158	1					
ANR	6249273	BreakStatement	break ;	1244:2:25806:25811	6249158	19	True				
ANR	6249274	Label	case '\\f' :	1245:1:25814:25823	6249158	20	True				
ANR	6249275	ExpressionStatement	* q ++ = '\\\\'	1246:2:25827:25838	6249158	21	True				
ANR	6249276	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249277	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249278	UnaryOperator	*		6249158	0					
ANR	6249279	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249280	Identifier	q		6249158	0					
ANR	6249281	IncDec	++		6249158	1					
ANR	6249282	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249283	ExpressionStatement	* q ++ = 'f'	1247:2:25842:25852	6249158	22	True				
ANR	6249284	AssignmentExpression	* q ++ = 'f'		6249158	0		=			
ANR	6249285	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249286	UnaryOperator	*		6249158	0					
ANR	6249287	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249288	Identifier	q		6249158	0					
ANR	6249289	IncDec	++		6249158	1					
ANR	6249290	PrimaryExpression	'f'		6249158	1					
ANR	6249291	BreakStatement	break ;	1248:2:25856:25861	6249158	23	True				
ANR	6249292	Label	case '\\b' :	1249:1:25864:25873	6249158	24	True				
ANR	6249293	ExpressionStatement	* q ++ = '\\\\'	1250:2:25877:25888	6249158	25	True				
ANR	6249294	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249295	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249296	UnaryOperator	*		6249158	0					
ANR	6249297	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249298	Identifier	q		6249158	0					
ANR	6249299	IncDec	++		6249158	1					
ANR	6249300	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249301	ExpressionStatement	* q ++ = 'b'	1251:2:25892:25902	6249158	26	True				
ANR	6249302	AssignmentExpression	* q ++ = 'b'		6249158	0		=			
ANR	6249303	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249304	UnaryOperator	*		6249158	0					
ANR	6249305	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249306	Identifier	q		6249158	0					
ANR	6249307	IncDec	++		6249158	1					
ANR	6249308	PrimaryExpression	'b'		6249158	1					
ANR	6249309	BreakStatement	break ;	1252:2:25906:25911	6249158	27	True				
ANR	6249310	Label	case '\\v' :	1253:1:25914:25923	6249158	28	True				
ANR	6249311	ExpressionStatement	* q ++ = '\\\\'	1254:2:25927:25938	6249158	29	True				
ANR	6249312	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249313	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249314	UnaryOperator	*		6249158	0					
ANR	6249315	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249316	Identifier	q		6249158	0					
ANR	6249317	IncDec	++		6249158	1					
ANR	6249318	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249319	ExpressionStatement	* q ++ = 'v'	1255:2:25942:25952	6249158	30	True				
ANR	6249320	AssignmentExpression	* q ++ = 'v'		6249158	0		=			
ANR	6249321	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249322	UnaryOperator	*		6249158	0					
ANR	6249323	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249324	Identifier	q		6249158	0					
ANR	6249325	IncDec	++		6249158	1					
ANR	6249326	PrimaryExpression	'v'		6249158	1					
ANR	6249327	BreakStatement	break ;	1256:2:25956:25961	6249158	31	True				
ANR	6249328	Label	case '\\a' :	1257:1:25964:25973	6249158	32	True				
ANR	6249329	ExpressionStatement	* q ++ = '\\\\'	1258:2:25977:25988	6249158	33	True				
ANR	6249330	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249331	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249332	UnaryOperator	*		6249158	0					
ANR	6249333	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249334	Identifier	q		6249158	0					
ANR	6249335	IncDec	++		6249158	1					
ANR	6249336	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249337	ExpressionStatement	* q ++ = 'a'	1259:2:25992:26002	6249158	34	True				
ANR	6249338	AssignmentExpression	* q ++ = 'a'		6249158	0		=			
ANR	6249339	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249340	UnaryOperator	*		6249158	0					
ANR	6249341	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249342	Identifier	q		6249158	0					
ANR	6249343	IncDec	++		6249158	1					
ANR	6249344	PrimaryExpression	'a'		6249158	1					
ANR	6249345	BreakStatement	break ;	1260:2:26006:26011	6249158	35	True				
ANR	6249346	Label	default :	1261:1:26014:26021	6249158	36	True				
ANR	6249347	Identifier	default		6249158	0					
ANR	6249348	IfStatement	if ( ! IS_PRINTABLE ( * p ) )		6249158	37					
ANR	6249349	Condition	! IS_PRINTABLE ( * p )	1263:6:26071:26088	6249158	0	True				
ANR	6249350	UnaryOperationExpression	! IS_PRINTABLE ( * p )		6249158	0					
ANR	6249351	UnaryOperator	!		6249158	0					
ANR	6249352	CallExpression	IS_PRINTABLE ( * p )		6249158	1					
ANR	6249353	Callee	IS_PRINTABLE		6249158	0					
ANR	6249354	Identifier	IS_PRINTABLE		6249158	0					
ANR	6249355	ArgumentList	* p		6249158	1					
ANR	6249356	Argument	* p		6249158	0					
ANR	6249357	UnaryOperationExpression	* p		6249158	0					
ANR	6249358	UnaryOperator	*		6249158	0					
ANR	6249359	Identifier	p		6249158	1					
ANR	6249360	CompoundStatement		44:26:602:602	6249158	1					
ANR	6249361	IfStatement	if ( default_dot )		6249158	0					
ANR	6249362	Condition	default_dot	1264:7:26100:26110	6249158	0	True				
ANR	6249363	Identifier	default_dot		6249158	0					
ANR	6249364	CompoundStatement		45:20:624:624	6249158	1					
ANR	6249365	ExpressionStatement	* q ++ = '.'	1265:4:26119:26129	6249158	0	True				
ANR	6249366	AssignmentExpression	* q ++ = '.'		6249158	0		=			
ANR	6249367	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249368	UnaryOperator	*		6249158	0					
ANR	6249369	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249370	Identifier	q		6249158	0					
ANR	6249371	IncDec	++		6249158	1					
ANR	6249372	PrimaryExpression	'.'		6249158	1					
ANR	6249373	ElseStatement	else		6249158	0					
ANR	6249374	CompoundStatement		47:10:652:652	6249158	0					
ANR	6249375	ExpressionStatement	* q ++ = '\\\\'	1267:4:26147:26158	6249158	0	True				
ANR	6249376	AssignmentExpression	* q ++ = '\\\\'		6249158	0		=			
ANR	6249377	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249378	UnaryOperator	*		6249158	0					
ANR	6249379	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249380	Identifier	q		6249158	0					
ANR	6249381	IncDec	++		6249158	1					
ANR	6249382	PrimaryExpression	'\\\\'		6249158	1					
ANR	6249383	ExpressionStatement	* q ++ = 'x'	1268:4:26164:26174	6249158	1	True				
ANR	6249384	AssignmentExpression	* q ++ = 'x'		6249158	0		=			
ANR	6249385	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249386	UnaryOperator	*		6249158	0					
ANR	6249387	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249388	Identifier	q		6249158	0					
ANR	6249389	IncDec	++		6249158	1					
ANR	6249390	PrimaryExpression	'x'		6249158	1					
ANR	6249391	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1269:4:26180:26220	6249158	2	True				
ANR	6249392	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6249158	0		=			
ANR	6249393	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249394	UnaryOperator	*		6249158	0					
ANR	6249395	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249396	Identifier	q		6249158	0					
ANR	6249397	IncDec	++		6249158	1					
ANR	6249398	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6249158	1					
ANR	6249399	PrimaryExpression	"""0123456789abcdef"""		6249158	0					
ANR	6249400	BitAndExpression	* p >> 4 & 0xf		6249158	1		&			
ANR	6249401	ShiftExpression	* p >> 4		6249158	0		>>			
ANR	6249402	UnaryOperationExpression	* p		6249158	0					
ANR	6249403	UnaryOperator	*		6249158	0					
ANR	6249404	Identifier	p		6249158	1					
ANR	6249405	PrimaryExpression	4		6249158	1					
ANR	6249406	PrimaryExpression	0xf		6249158	1					
ANR	6249407	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1270:4:26226:26261	6249158	3	True				
ANR	6249408	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		6249158	0		=			
ANR	6249409	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249410	UnaryOperator	*		6249158	0					
ANR	6249411	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249412	Identifier	q		6249158	0					
ANR	6249413	IncDec	++		6249158	1					
ANR	6249414	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		6249158	1					
ANR	6249415	PrimaryExpression	"""0123456789abcdef"""		6249158	0					
ANR	6249416	BitAndExpression	* p & 0xf		6249158	1		&			
ANR	6249417	UnaryOperationExpression	* p		6249158	0					
ANR	6249418	UnaryOperator	*		6249158	0					
ANR	6249419	Identifier	p		6249158	1					
ANR	6249420	PrimaryExpression	0xf		6249158	1					
ANR	6249421	ElseStatement	else		6249158	0					
ANR	6249422	CompoundStatement		53:9:788:788	6249158	0					
ANR	6249423	ExpressionStatement	* q ++ = * p	1273:3:26282:26291	6249158	0	True				
ANR	6249424	AssignmentExpression	* q ++ = * p		6249158	0		=			
ANR	6249425	UnaryOperationExpression	* q ++		6249158	0					
ANR	6249426	UnaryOperator	*		6249158	0					
ANR	6249427	PostIncDecOperationExpression	q ++		6249158	1					
ANR	6249428	Identifier	q		6249158	0					
ANR	6249429	IncDec	++		6249158	1					
ANR	6249430	UnaryOperationExpression	* p		6249158	1					
ANR	6249431	UnaryOperator	*		6249158	0					
ANR	6249432	Identifier	p		6249158	1					
ANR	6249433	ExpressionStatement	* dst = q	1276:1:26301:26309	6249158	2	True				
ANR	6249434	AssignmentExpression	* dst = q		6249158	0		=			
ANR	6249435	UnaryOperationExpression	* dst		6249158	0					
ANR	6249436	UnaryOperator	*		6249158	0					
ANR	6249437	Identifier	dst		6249158	1					
ANR	6249438	Identifier	q		6249158	1					
ANR	6249439	ReturnType	R_API void		6249158	1					
ANR	6249440	Identifier	r_str_byte_escape		6249158	2					
ANR	6249441	ParameterList	"const char * p , char * * dst , int dot_nl , bool default_dot , bool esc_bslash"		6249158	3					
ANR	6249442	Parameter	const char * p	1220:29:25414:25426	6249158	0	True				
ANR	6249443	ParameterType	const char *		6249158	0					
ANR	6249444	Identifier	p		6249158	1					
ANR	6249445	Parameter	char * * dst	1220:44:25429:25438	6249158	1	True				
ANR	6249446	ParameterType	char * *		6249158	0					
ANR	6249447	Identifier	dst		6249158	1					
ANR	6249448	Parameter	int dot_nl	1220:56:25441:25450	6249158	2	True				
ANR	6249449	ParameterType	int		6249158	0					
ANR	6249450	Identifier	dot_nl		6249158	1					
ANR	6249451	Parameter	bool default_dot	1220:68:25453:25468	6249158	3	True				
ANR	6249452	ParameterType	bool		6249158	0					
ANR	6249453	Identifier	default_dot		6249158	1					
ANR	6249454	Parameter	bool esc_bslash	1220:86:25471:25485	6249158	4	True				
ANR	6249455	ParameterType	bool		6249158	0					
ANR	6249456	Identifier	esc_bslash		6249158	1					
ANR	6249457	CFGEntryNode	ENTRY		6249158		True				
ANR	6249458	CFGExitNode	EXIT		6249158		True				
ANR	6249459	Symbol	p		6249158						
ANR	6249460	Symbol	* dst		6249158						
ANR	6249461	Symbol	q		6249158						
ANR	6249462	Symbol	dot_nl		6249158						
ANR	6249463	Symbol	default_dot		6249158						
ANR	6249464	Symbol	IS_PRINTABLE		6249158						
ANR	6249465	Symbol	dst		6249158						
ANR	6249466	Symbol	* q ++		6249158						
ANR	6249467	Symbol	esc_bslash		6249158						
ANR	6249468	Symbol	* p		6249158						
ANR	6249469	Symbol	* * p		6249158						
ANR	6249470	Function	r_str_escape_	1281:0:26420:27498							
ANR	6249471	FunctionDef	"r_str_escape_ (const char * buf , int dot_nl , bool parse_esc_seq , bool ign_esc_seq , bool show_asciidot , bool esc_bslash)"		6249470	0					
ANR	6249472	CompoundStatement		1281:131:26551:27498	6249470	0					
ANR	6249473	ExpressionStatement	"r_return_val_if_fail ( buf , NULL )"	1282:1:26554:26586	6249470	0	True				
ANR	6249474	CallExpression	"r_return_val_if_fail ( buf , NULL )"		6249470	0					
ANR	6249475	Callee	r_return_val_if_fail		6249470	0					
ANR	6249476	Identifier	r_return_val_if_fail		6249470	0					
ANR	6249477	ArgumentList	buf		6249470	1					
ANR	6249478	Argument	buf		6249470	0					
ANR	6249479	Identifier	buf		6249470	0					
ANR	6249480	Argument	NULL		6249470	1					
ANR	6249481	Identifier	NULL		6249470	0					
ANR	6249482	IdentifierDeclStatement	char * new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) ) ;	1286:1:26722:26789	6249470	1	True				
ANR	6249483	IdentifierDecl	* new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		6249470	0					
ANR	6249484	IdentifierDeclType	char *		6249470	0					
ANR	6249485	Identifier	new_buf		6249470	1					
ANR	6249486	AssignmentExpression	* new_buf = malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		6249470	2		=			
ANR	6249487	Identifier	new_buf		6249470	0					
ANR	6249488	CallExpression	malloc ( 1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 ) )		6249470	1					
ANR	6249489	Callee	malloc		6249470	0					
ANR	6249490	Identifier	malloc		6249470	0					
ANR	6249491	ArgumentList	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		6249470	1					
ANR	6249492	Argument	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		6249470	0					
ANR	6249493	AdditiveExpression	1 + strlen ( buf ) * ( show_asciidot ? 2 : 4 )		6249470	0		+			
ANR	6249494	PrimaryExpression	1		6249470	0					
ANR	6249495	MultiplicativeExpression	strlen ( buf ) * ( show_asciidot ? 2 : 4 )		6249470	1		*			
ANR	6249496	CallExpression	strlen ( buf )		6249470	0					
ANR	6249497	Callee	strlen		6249470	0					
ANR	6249498	Identifier	strlen		6249470	0					
ANR	6249499	ArgumentList	buf		6249470	1					
ANR	6249500	Argument	buf		6249470	0					
ANR	6249501	Identifier	buf		6249470	0					
ANR	6249502	ConditionalExpression	show_asciidot ? 2 : 4		6249470	1					
ANR	6249503	Condition	show_asciidot		6249470	0					
ANR	6249504	Identifier	show_asciidot		6249470	0					
ANR	6249505	PrimaryExpression	2		6249470	1					
ANR	6249506	PrimaryExpression	4		6249470	2					
ANR	6249507	IfStatement	if ( ! new_buf )		6249470	2					
ANR	6249508	Condition	! new_buf	1287:5:26796:26803	6249470	0	True				
ANR	6249509	UnaryOperationExpression	! new_buf		6249470	0					
ANR	6249510	UnaryOperator	!		6249470	0					
ANR	6249511	Identifier	new_buf		6249470	1					
ANR	6249512	CompoundStatement		7:15:254:254	6249470	1					
ANR	6249513	ReturnStatement	return NULL ;	1288:2:26810:26821	6249470	0	True				
ANR	6249514	Identifier	NULL		6249470	0					
ANR	6249515	IdentifierDeclStatement	const char * p = buf ;	1290:1:26827:26846	6249470	3	True				
ANR	6249516	IdentifierDecl	* p = buf		6249470	0					
ANR	6249517	IdentifierDeclType	const char *		6249470	0					
ANR	6249518	Identifier	p		6249470	1					
ANR	6249519	AssignmentExpression	* p = buf		6249470	2		=			
ANR	6249520	Identifier	buf		6249470	0					
ANR	6249521	Identifier	buf		6249470	1					
ANR	6249522	IdentifierDeclStatement	char * q = new_buf ;	1291:1:26849:26866	6249470	4	True				
ANR	6249523	IdentifierDecl	* q = new_buf		6249470	0					
ANR	6249524	IdentifierDeclType	char *		6249470	0					
ANR	6249525	Identifier	q		6249470	1					
ANR	6249526	AssignmentExpression	* q = new_buf		6249470	2		=			
ANR	6249527	Identifier	new_buf		6249470	0					
ANR	6249528	Identifier	new_buf		6249470	1					
ANR	6249529	WhileStatement	while ( * p )		6249470	5					
ANR	6249530	Condition	* p	1292:8:26876:26877	6249470	0	True				
ANR	6249531	UnaryOperationExpression	* p		6249470	0					
ANR	6249532	UnaryOperator	*		6249470	0					
ANR	6249533	Identifier	p		6249470	1					
ANR	6249534	CompoundStatement		12:12:328:328	6249470	1					
ANR	6249535	SwitchStatement	switch ( * p )		6249470	0					
ANR	6249536	Condition	* p	1293:10:26892:26893	6249470	0	True				
ANR	6249537	UnaryOperationExpression	* p		6249470	0					
ANR	6249538	UnaryOperator	*		6249470	0					
ANR	6249539	Identifier	p		6249470	1					
ANR	6249540	CompoundStatement		13:14:344:344	6249470	1					
ANR	6249541	Label	case 0x1b :	1294:2:26900:26909	6249470	0	True				
ANR	6249542	IfStatement	if ( parse_esc_seq )		6249470	1					
ANR	6249543	Condition	parse_esc_seq	1295:7:26925:26937	6249470	0	True				
ANR	6249544	Identifier	parse_esc_seq		6249470	0					
ANR	6249545	CompoundStatement		16:4:394:419	6249470	1					
ANR	6249546	IdentifierDeclStatement	const char * start_seq = p ;	1296:4:26946:26971	6249470	0	True				
ANR	6249547	IdentifierDecl	* start_seq = p		6249470	0					
ANR	6249548	IdentifierDeclType	const char *		6249470	0					
ANR	6249549	Identifier	start_seq		6249470	1					
ANR	6249550	AssignmentExpression	* start_seq = p		6249470	2		=			
ANR	6249551	Identifier	p		6249470	0					
ANR	6249552	Identifier	p		6249470	1					
ANR	6249553	ExpressionStatement	p ++	1297:4:26977:26980	6249470	1	True				
ANR	6249554	PostIncDecOperationExpression	p ++		6249470	0					
ANR	6249555	Identifier	p		6249470	0					
ANR	6249556	IncDec	++		6249470	1					
ANR	6249557	IfStatement	if ( * p == '\\0' )		6249470	2					
ANR	6249558	Condition	* p == '\\0'	1300:8:27074:27083	6249470	0	True				
ANR	6249559	EqualityExpression	* p == '\\0'		6249470	0		==			
ANR	6249560	UnaryOperationExpression	* p		6249470	0					
ANR	6249561	UnaryOperator	*		6249470	0					
ANR	6249562	Identifier	p		6249470	1					
ANR	6249563	PrimaryExpression	'\\0'		6249470	1					
ANR	6249564	CompoundStatement		20:20:534:534	6249470	1					
ANR	6249565	GotoStatement	goto out ;	1301:5:27093:27101	6249470	0	True				
ANR	6249566	Identifier	out		6249470	0					
ANR	6249567	IfStatement	if ( * p == '[' )		6249470	3					
ANR	6249568	Condition	* p == '['	1303:8:27117:27125	6249470	0	True				
ANR	6249569	EqualityExpression	* p == '['		6249470	0		==			
ANR	6249570	UnaryOperationExpression	* p		6249470	0					
ANR	6249571	UnaryOperator	*		6249470	0					
ANR	6249572	Identifier	p		6249470	1					
ANR	6249573	PrimaryExpression	'['		6249470	1					
ANR	6249574	CompoundStatement		23:19:576:576	6249470	1					
ANR	6249575	ForStatement	for ( p ++ ; * p != 'm' ; p ++ )		6249470	0					
ANR	6249576	ForInit	p ++ ;	1304:10:27140:27143	6249470	0	True				
ANR	6249577	PostIncDecOperationExpression	p ++		6249470	0					
ANR	6249578	Identifier	p		6249470	0					
ANR	6249579	IncDec	++		6249470	1					
ANR	6249580	Condition	* p != 'm'	1304:15:27145:27153	6249470	1	True				
ANR	6249581	EqualityExpression	* p != 'm'		6249470	0		!=			
ANR	6249582	UnaryOperationExpression	* p		6249470	0					
ANR	6249583	UnaryOperator	*		6249470	0					
ANR	6249584	Identifier	p		6249470	1					
ANR	6249585	PrimaryExpression	'm'		6249470	1					
ANR	6249586	PostIncDecOperationExpression	p ++	1304:26:27156:27158	6249470	2	True				
ANR	6249587	Identifier	p		6249470	0					
ANR	6249588	IncDec	++		6249470	1					
ANR	6249589	CompoundStatement		24:31:609:609	6249470	3					
ANR	6249590	IfStatement	if ( * p == '\\0' )		6249470	0					
ANR	6249591	Condition	* p == '\\0'	1305:10:27173:27182	6249470	0	True				
ANR	6249592	EqualityExpression	* p == '\\0'		6249470	0		==			
ANR	6249593	UnaryOperationExpression	* p		6249470	0					
ANR	6249594	UnaryOperator	*		6249470	0					
ANR	6249595	Identifier	p		6249470	1					
ANR	6249596	PrimaryExpression	'\\0'		6249470	1					
ANR	6249597	CompoundStatement		25:22:633:633	6249470	1					
ANR	6249598	GotoStatement	goto out ;	1306:7:27194:27202	6249470	0	True				
ANR	6249599	Identifier	out		6249470	0					
ANR	6249600	IfStatement	if ( ! ign_esc_seq )		6249470	1					
ANR	6249601	Condition	! ign_esc_seq	1309:9:27228:27239	6249470	0	True				
ANR	6249602	UnaryOperationExpression	! ign_esc_seq		6249470	0					
ANR	6249603	UnaryOperator	!		6249470	0					
ANR	6249604	Identifier	ign_esc_seq		6249470	1					
ANR	6249605	CompoundStatement		29:23:690:690	6249470	1					
ANR	6249606	ExpressionStatement	"memcpy ( q , start_seq , p - start_seq + 1 )"	1310:6:27250:27290	6249470	0	True				
ANR	6249607	CallExpression	"memcpy ( q , start_seq , p - start_seq + 1 )"		6249470	0					
ANR	6249608	Callee	memcpy		6249470	0					
ANR	6249609	Identifier	memcpy		6249470	0					
ANR	6249610	ArgumentList	q		6249470	1					
ANR	6249611	Argument	q		6249470	0					
ANR	6249612	Identifier	q		6249470	0					
ANR	6249613	Argument	start_seq		6249470	1					
ANR	6249614	Identifier	start_seq		6249470	0					
ANR	6249615	Argument	p - start_seq + 1		6249470	2					
ANR	6249616	AdditiveExpression	p - start_seq + 1		6249470	0		-			
ANR	6249617	Identifier	p		6249470	0					
ANR	6249618	AdditiveExpression	start_seq + 1		6249470	1		+			
ANR	6249619	Identifier	start_seq		6249470	0					
ANR	6249620	PrimaryExpression	1		6249470	1					
ANR	6249621	ExpressionStatement	q += ( p - start_seq + 1 )	1311:6:27298:27322	6249470	1	True				
ANR	6249622	AssignmentExpression	q += ( p - start_seq + 1 )		6249470	0		+=			
ANR	6249623	Identifier	q		6249470	0					
ANR	6249624	AdditiveExpression	p - start_seq + 1		6249470	1		-			
ANR	6249625	Identifier	p		6249470	0					
ANR	6249626	AdditiveExpression	start_seq + 1		6249470	1		+			
ANR	6249627	Identifier	start_seq		6249470	0					
ANR	6249628	PrimaryExpression	1		6249470	1					
ANR	6249629	BreakStatement	break ;	1314:4:27341:27346	6249470	4	True				
ANR	6249630	Label	default :	1317:2:27376:27383	6249470	2	True				
ANR	6249631	Identifier	default		6249470	0					
ANR	6249632	ExpressionStatement	"r_str_byte_escape ( p , & q , dot_nl , show_asciidot , esc_bslash )"	1318:3:27388:27448	6249470	3	True				
ANR	6249633	CallExpression	"r_str_byte_escape ( p , & q , dot_nl , show_asciidot , esc_bslash )"		6249470	0					
ANR	6249634	Callee	r_str_byte_escape		6249470	0					
ANR	6249635	Identifier	r_str_byte_escape		6249470	0					
ANR	6249636	ArgumentList	p		6249470	1					
ANR	6249637	Argument	p		6249470	0					
ANR	6249638	Identifier	p		6249470	0					
ANR	6249639	Argument	& q		6249470	1					
ANR	6249640	UnaryOperationExpression	& q		6249470	0					
ANR	6249641	UnaryOperator	&		6249470	0					
ANR	6249642	Identifier	q		6249470	1					
ANR	6249643	Argument	dot_nl		6249470	2					
ANR	6249644	Identifier	dot_nl		6249470	0					
ANR	6249645	Argument	show_asciidot		6249470	3					
ANR	6249646	Identifier	show_asciidot		6249470	0					
ANR	6249647	Argument	esc_bslash		6249470	4					
ANR	6249648	Identifier	esc_bslash		6249470	0					
ANR	6249649	ExpressionStatement	p ++	1320:2:27456:27459	6249470	1	True				
ANR	6249650	PostIncDecOperationExpression	p ++		6249470	0					
ANR	6249651	Identifier	p		6249470	0					
ANR	6249652	IncDec	++		6249470	1					
ANR	6249653	Label	out :	1322:0:27464:27467	6249470	6	True				
ANR	6249654	Identifier	out		6249470	0					
ANR	6249655	ExpressionStatement	* q = '\\0'	1323:1:27470:27479	6249470	7	True				
ANR	6249656	AssignmentExpression	* q = '\\0'		6249470	0		=			
ANR	6249657	UnaryOperationExpression	* q		6249470	0					
ANR	6249658	UnaryOperator	*		6249470	0					
ANR	6249659	Identifier	q		6249470	1					
ANR	6249660	PrimaryExpression	'\\0'		6249470	1					
ANR	6249661	ReturnStatement	return new_buf ;	1324:1:27482:27496	6249470	8	True				
ANR	6249662	Identifier	new_buf		6249470	0					
ANR	6249663	ReturnType	static char *		6249470	1					
ANR	6249664	Identifier	r_str_escape_		6249470	2					
ANR	6249665	ParameterList	"const char * buf , int dot_nl , bool parse_esc_seq , bool ign_esc_seq , bool show_asciidot , bool esc_bslash"		6249470	3					
ANR	6249666	Parameter	const char * buf	1281:27:26447:26461	6249470	0	True				
ANR	6249667	ParameterType	const char *		6249470	0					
ANR	6249668	Identifier	buf		6249470	1					
ANR	6249669	Parameter	int dot_nl	1281:44:26464:26473	6249470	1	True				
ANR	6249670	ParameterType	int		6249470	0					
ANR	6249671	Identifier	dot_nl		6249470	1					
ANR	6249672	Parameter	bool parse_esc_seq	1281:56:26476:26493	6249470	2	True				
ANR	6249673	ParameterType	bool		6249470	0					
ANR	6249674	Identifier	parse_esc_seq		6249470	1					
ANR	6249675	Parameter	bool ign_esc_seq	1281:76:26496:26511	6249470	3	True				
ANR	6249676	ParameterType	bool		6249470	0					
ANR	6249677	Identifier	ign_esc_seq		6249470	1					
ANR	6249678	Parameter	bool show_asciidot	1281:94:26514:26531	6249470	4	True				
ANR	6249679	ParameterType	bool		6249470	0					
ANR	6249680	Identifier	show_asciidot		6249470	1					
ANR	6249681	Parameter	bool esc_bslash	1281:114:26534:26548	6249470	5	True				
ANR	6249682	ParameterType	bool		6249470	0					
ANR	6249683	Identifier	esc_bslash		6249470	1					
ANR	6249684	CFGEntryNode	ENTRY		6249470		True				
ANR	6249685	CFGExitNode	EXIT		6249470		True				
ANR	6249686	Symbol	malloc		6249470						
ANR	6249687	Symbol	dot_nl		6249470						
ANR	6249688	Symbol	NULL		6249470						
ANR	6249689	Symbol	ign_esc_seq		6249470						
ANR	6249690	Symbol	p		6249470						
ANR	6249691	Symbol	strlen		6249470						
ANR	6249692	Symbol	q		6249470						
ANR	6249693	Symbol	buf		6249470						
ANR	6249694	Symbol	parse_esc_seq		6249470						
ANR	6249695	Symbol	new_buf		6249470						
ANR	6249696	Symbol	& q		6249470						
ANR	6249697	Symbol	esc_bslash		6249470						
ANR	6249698	Symbol	start_seq		6249470						
ANR	6249699	Symbol	show_asciidot		6249470						
ANR	6249700	Symbol	* p		6249470						
ANR	6249701	Symbol	* q		6249470						
ANR	6249702	Function	r_str_escape	1327:0:27501:27606							
ANR	6249703	FunctionDef	r_str_escape (const char * buf)		6249702	0					
ANR	6249704	CompoundStatement		1327:42:27543:27606	6249702	0					
ANR	6249705	ReturnStatement	"return r_str_escape_ ( buf , false , true , true , false , true ) ;"	1328:1:27546:27604	6249702	0	True				
ANR	6249706	CallExpression	"r_str_escape_ ( buf , false , true , true , false , true )"		6249702	0					
ANR	6249707	Callee	r_str_escape_		6249702	0					
ANR	6249708	Identifier	r_str_escape_		6249702	0					
ANR	6249709	ArgumentList	buf		6249702	1					
ANR	6249710	Argument	buf		6249702	0					
ANR	6249711	Identifier	buf		6249702	0					
ANR	6249712	Argument	false		6249702	1					
ANR	6249713	Identifier	false		6249702	0					
ANR	6249714	Argument	true		6249702	2					
ANR	6249715	Identifier	true		6249702	0					
ANR	6249716	Argument	true		6249702	3					
ANR	6249717	Identifier	true		6249702	0					
ANR	6249718	Argument	false		6249702	4					
ANR	6249719	Identifier	false		6249702	0					
ANR	6249720	Argument	true		6249702	5					
ANR	6249721	Identifier	true		6249702	0					
ANR	6249722	ReturnType	R_API char *		6249702	1					
ANR	6249723	Identifier	r_str_escape		6249702	2					
ANR	6249724	ParameterList	const char * buf		6249702	3					
ANR	6249725	Parameter	const char * buf	1327:25:27526:27540	6249702	0	True				
ANR	6249726	ParameterType	const char *		6249702	0					
ANR	6249727	Identifier	buf		6249702	1					
ANR	6249728	CFGEntryNode	ENTRY		6249702		True				
ANR	6249729	CFGExitNode	EXIT		6249702		True				
ANR	6249730	Symbol	buf		6249702						
ANR	6249731	Symbol	r_str_escape_		6249702						
ANR	6249732	Symbol	false		6249702						
ANR	6249733	Symbol	true		6249702						
ANR	6249734	Function	r_str_escape_dot	1331:0:27609:27717							
ANR	6249735	FunctionDef	r_str_escape_dot (const char * buf)		6249734	0					
ANR	6249736	CompoundStatement		1331:46:27655:27717	6249734	0					
ANR	6249737	ReturnStatement	"return r_str_escape_ ( buf , true , true , true , false , true ) ;"	1332:1:27658:27715	6249734	0	True				
ANR	6249738	CallExpression	"r_str_escape_ ( buf , true , true , true , false , true )"		6249734	0					
ANR	6249739	Callee	r_str_escape_		6249734	0					
ANR	6249740	Identifier	r_str_escape_		6249734	0					
ANR	6249741	ArgumentList	buf		6249734	1					
ANR	6249742	Argument	buf		6249734	0					
ANR	6249743	Identifier	buf		6249734	0					
ANR	6249744	Argument	true		6249734	1					
ANR	6249745	Identifier	true		6249734	0					
ANR	6249746	Argument	true		6249734	2					
ANR	6249747	Identifier	true		6249734	0					
ANR	6249748	Argument	true		6249734	3					
ANR	6249749	Identifier	true		6249734	0					
ANR	6249750	Argument	false		6249734	4					
ANR	6249751	Identifier	false		6249734	0					
ANR	6249752	Argument	true		6249734	5					
ANR	6249753	Identifier	true		6249734	0					
ANR	6249754	ReturnType	R_API char *		6249734	1					
ANR	6249755	Identifier	r_str_escape_dot		6249734	2					
ANR	6249756	ParameterList	const char * buf		6249734	3					
ANR	6249757	Parameter	const char * buf	1331:29:27638:27652	6249734	0	True				
ANR	6249758	ParameterType	const char *		6249734	0					
ANR	6249759	Identifier	buf		6249734	1					
ANR	6249760	CFGEntryNode	ENTRY		6249734		True				
ANR	6249761	CFGExitNode	EXIT		6249734		True				
ANR	6249762	Symbol	buf		6249734						
ANR	6249763	Symbol	r_str_escape_		6249734						
ANR	6249764	Symbol	true		6249734						
ANR	6249765	Symbol	false		6249734						
ANR	6249766	Function	r_str_escape_latin1	1335:0:27720:27901							
ANR	6249767	FunctionDef	"r_str_escape_latin1 (const char * buf , bool show_asciidot , bool esc_bslash , bool colors)"		6249766	0					
ANR	6249768	CompoundStatement		1335:99:27819:27901	6249766	0					
ANR	6249769	ReturnStatement	"return r_str_escape_ ( buf , false , colors , ! colors , show_asciidot , esc_bslash ) ;"	1336:1:27822:27899	6249766	0	True				
ANR	6249770	CallExpression	"r_str_escape_ ( buf , false , colors , ! colors , show_asciidot , esc_bslash )"		6249766	0					
ANR	6249771	Callee	r_str_escape_		6249766	0					
ANR	6249772	Identifier	r_str_escape_		6249766	0					
ANR	6249773	ArgumentList	buf		6249766	1					
ANR	6249774	Argument	buf		6249766	0					
ANR	6249775	Identifier	buf		6249766	0					
ANR	6249776	Argument	false		6249766	1					
ANR	6249777	Identifier	false		6249766	0					
ANR	6249778	Argument	colors		6249766	2					
ANR	6249779	Identifier	colors		6249766	0					
ANR	6249780	Argument	! colors		6249766	3					
ANR	6249781	UnaryOperationExpression	! colors		6249766	0					
ANR	6249782	UnaryOperator	!		6249766	0					
ANR	6249783	Identifier	colors		6249766	1					
ANR	6249784	Argument	show_asciidot		6249766	4					
ANR	6249785	Identifier	show_asciidot		6249766	0					
ANR	6249786	Argument	esc_bslash		6249766	5					
ANR	6249787	Identifier	esc_bslash		6249766	0					
ANR	6249788	ReturnType	R_API char *		6249766	1					
ANR	6249789	Identifier	r_str_escape_latin1		6249766	2					
ANR	6249790	ParameterList	"const char * buf , bool show_asciidot , bool esc_bslash , bool colors"		6249766	3					
ANR	6249791	Parameter	const char * buf	1335:32:27752:27766	6249766	0	True				
ANR	6249792	ParameterType	const char *		6249766	0					
ANR	6249793	Identifier	buf		6249766	1					
ANR	6249794	Parameter	bool show_asciidot	1335:49:27769:27786	6249766	1	True				
ANR	6249795	ParameterType	bool		6249766	0					
ANR	6249796	Identifier	show_asciidot		6249766	1					
ANR	6249797	Parameter	bool esc_bslash	1335:69:27789:27803	6249766	2	True				
ANR	6249798	ParameterType	bool		6249766	0					
ANR	6249799	Identifier	esc_bslash		6249766	1					
ANR	6249800	Parameter	bool colors	1335:86:27806:27816	6249766	3	True				
ANR	6249801	ParameterType	bool		6249766	0					
ANR	6249802	Identifier	colors		6249766	1					
ANR	6249803	CFGEntryNode	ENTRY		6249766		True				
ANR	6249804	CFGExitNode	EXIT		6249766		True				
ANR	6249805	Symbol	buf		6249766						
ANR	6249806	Symbol	r_str_escape_		6249766						
ANR	6249807	Symbol	esc_bslash		6249766						
ANR	6249808	Symbol	false		6249766						
ANR	6249809	Symbol	show_asciidot		6249766						
ANR	6249810	Symbol	colors		6249766						
ANR	6249811	Function	r_str_escape_utf	1339:0:27904:29741							
ANR	6249812	FunctionDef	"r_str_escape_utf (const char * buf , int buf_size , RStrEnc enc , bool show_asciidot , bool esc_bslash)"		6249811	0					
ANR	6249813	CompoundStatement		1339:111:28015:29741	6249811	0					
ANR	6249814	IdentifierDeclStatement	"char * new_buf , * q ;"	1340:1:28018:28035	6249811	0	True				
ANR	6249815	IdentifierDecl	* new_buf		6249811	0					
ANR	6249816	IdentifierDeclType	char *		6249811	0					
ANR	6249817	Identifier	new_buf		6249811	1					
ANR	6249818	IdentifierDecl	* q		6249811	1					
ANR	6249819	IdentifierDeclType	char *		6249811	0					
ANR	6249820	Identifier	q		6249811	1					
ANR	6249821	IdentifierDeclStatement	"const char * p , * end ;"	1341:1:28038:28057	6249811	1	True				
ANR	6249822	IdentifierDecl	* p		6249811	0					
ANR	6249823	IdentifierDeclType	const char *		6249811	0					
ANR	6249824	Identifier	p		6249811	1					
ANR	6249825	IdentifierDecl	* end		6249811	1					
ANR	6249826	IdentifierDeclType	const char *		6249811	0					
ANR	6249827	Identifier	end		6249811	1					
ANR	6249828	IdentifierDeclStatement	RRune ch ;	1342:1:28060:28068	6249811	2	True				
ANR	6249829	IdentifierDecl	ch		6249811	0					
ANR	6249830	IdentifierDeclType	RRune		6249811	0					
ANR	6249831	Identifier	ch		6249811	1					
ANR	6249832	IdentifierDeclStatement	"int i , len , ch_bytes ;"	1343:1:28071:28091	6249811	3	True				
ANR	6249833	IdentifierDecl	i		6249811	0					
ANR	6249834	IdentifierDeclType	int		6249811	0					
ANR	6249835	Identifier	i		6249811	1					
ANR	6249836	IdentifierDecl	len		6249811	1					
ANR	6249837	IdentifierDeclType	int		6249811	0					
ANR	6249838	Identifier	len		6249811	1					
ANR	6249839	IdentifierDecl	ch_bytes		6249811	2					
ANR	6249840	IdentifierDeclType	int		6249811	0					
ANR	6249841	Identifier	ch_bytes		6249811	1					
ANR	6249842	IfStatement	if ( ! buf )		6249811	4					
ANR	6249843	Condition	! buf	1345:5:28099:28102	6249811	0	True				
ANR	6249844	UnaryOperationExpression	! buf		6249811	0					
ANR	6249845	UnaryOperator	!		6249811	0					
ANR	6249846	Identifier	buf		6249811	1					
ANR	6249847	CompoundStatement		7:11:89:89	6249811	1					
ANR	6249848	ReturnStatement	return NULL ;	1346:2:28109:28120	6249811	0	True				
ANR	6249849	Identifier	NULL		6249811	0					
ANR	6249850	SwitchStatement	switch ( enc )		6249811	5					
ANR	6249851	Condition	enc	1348:9:28134:28136	6249811	0	True				
ANR	6249852	Identifier	enc		6249811	0					
ANR	6249853	CompoundStatement		10:14:123:123	6249811	1					
ANR	6249854	Label	case R_STRING_ENC_UTF16LE :	1349:1:28142:28167	6249811	0	True				
ANR	6249855	Identifier	R_STRING_ENC_UTF16LE		6249811	0					
ANR	6249856	Label	case R_STRING_ENC_UTF32LE :	1350:1:28170:28195	6249811	1	True				
ANR	6249857	Identifier	R_STRING_ENC_UTF32LE		6249811	0					
ANR	6249858	IfStatement	if ( buf_size < 0 )		6249811	2					
ANR	6249859	Condition	buf_size < 0	1351:6:28203:28214	6249811	0	True				
ANR	6249860	RelationalExpression	buf_size < 0		6249811	0		<			
ANR	6249861	Identifier	buf_size		6249811	0					
ANR	6249862	PrimaryExpression	0		6249811	1					
ANR	6249863	CompoundStatement		13:20:201:201	6249811	1					
ANR	6249864	ReturnStatement	return NULL ;	1352:3:28222:28233	6249811	0	True				
ANR	6249865	Identifier	NULL		6249811	0					
ANR	6249866	IfStatement	if ( enc == R_STRING_ENC_UTF16LE )		6249811	3					
ANR	6249867	Condition	enc == R_STRING_ENC_UTF16LE	1354:6:28245:28271	6249811	0	True				
ANR	6249868	EqualityExpression	enc == R_STRING_ENC_UTF16LE		6249811	0		==			
ANR	6249869	Identifier	enc		6249811	0					
ANR	6249870	Identifier	R_STRING_ENC_UTF16LE		6249811	1					
ANR	6249871	CompoundStatement		16:35:258:258	6249811	1					
ANR	6249872	ExpressionStatement	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"	1355:3:28279:28354	6249811	0	True				
ANR	6249873	AssignmentExpression	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		6249811	0		=			
ANR	6249874	Identifier	end		6249811	0					
ANR	6249875	CastExpression	"( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		6249811	1					
ANR	6249876	CastTarget	char *		6249811	0					
ANR	6249877	CallExpression	"r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0"" , 2 , 2 )"		6249811	1					
ANR	6249878	Callee	r_mem_mem_aligned		6249811	0					
ANR	6249879	Identifier	r_mem_mem_aligned		6249811	0					
ANR	6249880	ArgumentList	( ut8 * ) buf		6249811	1					
ANR	6249881	Argument	( ut8 * ) buf		6249811	0					
ANR	6249882	CastExpression	( ut8 * ) buf		6249811	0					
ANR	6249883	CastTarget	ut8 *		6249811	0					
ANR	6249884	Identifier	buf		6249811	1					
ANR	6249885	Argument	buf_size		6249811	1					
ANR	6249886	Identifier	buf_size		6249811	0					
ANR	6249887	Argument	"( ut8 * ) ""\\0\\0"""		6249811	2					
ANR	6249888	CastExpression	"( ut8 * ) ""\\0\\0"""		6249811	0					
ANR	6249889	CastTarget	ut8 *		6249811	0					
ANR	6249890	PrimaryExpression	"""\\0\\0"""		6249811	1					
ANR	6249891	Argument	2		6249811	3					
ANR	6249892	PrimaryExpression	2		6249811	0					
ANR	6249893	Argument	2		6249811	4					
ANR	6249894	PrimaryExpression	2		6249811	0					
ANR	6249895	ElseStatement	else		6249811	0					
ANR	6249896	CompoundStatement		18:9:349:349	6249811	0					
ANR	6249897	ExpressionStatement	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"	1357:3:28370:28449	6249811	0	True				
ANR	6249898	AssignmentExpression	"end = ( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		6249811	0		=			
ANR	6249899	Identifier	end		6249811	0					
ANR	6249900	CastExpression	"( char * ) r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		6249811	1					
ANR	6249901	CastTarget	char *		6249811	0					
ANR	6249902	CallExpression	"r_mem_mem_aligned ( ( ut8 * ) buf , buf_size , ( ut8 * ) ""\\0\\0\\0\\0"" , 4 , 4 )"		6249811	1					
ANR	6249903	Callee	r_mem_mem_aligned		6249811	0					
ANR	6249904	Identifier	r_mem_mem_aligned		6249811	0					
ANR	6249905	ArgumentList	( ut8 * ) buf		6249811	1					
ANR	6249906	Argument	( ut8 * ) buf		6249811	0					
ANR	6249907	CastExpression	( ut8 * ) buf		6249811	0					
ANR	6249908	CastTarget	ut8 *		6249811	0					
ANR	6249909	Identifier	buf		6249811	1					
ANR	6249910	Argument	buf_size		6249811	1					
ANR	6249911	Identifier	buf_size		6249811	0					
ANR	6249912	Argument	"( ut8 * ) ""\\0\\0\\0\\0"""		6249811	2					
ANR	6249913	CastExpression	"( ut8 * ) ""\\0\\0\\0\\0"""		6249811	0					
ANR	6249914	CastTarget	ut8 *		6249811	0					
ANR	6249915	PrimaryExpression	"""\\0\\0\\0\\0"""		6249811	1					
ANR	6249916	Argument	4		6249811	3					
ANR	6249917	PrimaryExpression	4		6249811	0					
ANR	6249918	Argument	4		6249811	4					
ANR	6249919	PrimaryExpression	4		6249811	0					
ANR	6249920	IfStatement	if ( ! end )		6249811	4					
ANR	6249921	Condition	! end	1359:6:28461:28464	6249811	0	True				
ANR	6249922	UnaryOperationExpression	! end		6249811	0					
ANR	6249923	UnaryOperator	!		6249811	0					
ANR	6249924	Identifier	end		6249811	1					
ANR	6249925	CompoundStatement		21:12:451:451	6249811	1					
ANR	6249926	ExpressionStatement	end = buf + buf_size - 1	1360:3:28472:28496	6249811	0	True				
ANR	6249927	AssignmentExpression	end = buf + buf_size - 1		6249811	0		=			
ANR	6249928	Identifier	end		6249811	0					
ANR	6249929	AdditiveExpression	buf + buf_size - 1		6249811	1		+			
ANR	6249930	Identifier	buf		6249811	0					
ANR	6249931	AdditiveExpression	buf_size - 1		6249811	1		-			
ANR	6249932	Identifier	buf_size		6249811	0					
ANR	6249933	PrimaryExpression	1		6249811	1					
ANR	6249934	ExpressionStatement	len = end - buf	1362:2:28504:28519	6249811	5	True				
ANR	6249935	AssignmentExpression	len = end - buf		6249811	0		=			
ANR	6249936	Identifier	len		6249811	0					
ANR	6249937	AdditiveExpression	end - buf		6249811	1		-			
ANR	6249938	Identifier	end		6249811	0					
ANR	6249939	Identifier	buf		6249811	1					
ANR	6249940	BreakStatement	break ;	1363:2:28523:28528	6249811	6	True				
ANR	6249941	Label	default :	1364:1:28531:28538	6249811	7	True				
ANR	6249942	Identifier	default		6249811	0					
ANR	6249943	ExpressionStatement	len = strlen ( buf )	1365:2:28542:28560	6249811	8	True				
ANR	6249944	AssignmentExpression	len = strlen ( buf )		6249811	0		=			
ANR	6249945	Identifier	len		6249811	0					
ANR	6249946	CallExpression	strlen ( buf )		6249811	1					
ANR	6249947	Callee	strlen		6249811	0					
ANR	6249948	Identifier	strlen		6249811	0					
ANR	6249949	ArgumentList	buf		6249811	1					
ANR	6249950	Argument	buf		6249811	0					
ANR	6249951	Identifier	buf		6249811	0					
ANR	6249952	ExpressionStatement	end = buf + len	1366:2:28564:28579	6249811	9	True				
ANR	6249953	AssignmentExpression	end = buf + len		6249811	0		=			
ANR	6249954	Identifier	end		6249811	0					
ANR	6249955	AdditiveExpression	buf + len		6249811	1		+			
ANR	6249956	Identifier	buf		6249811	0					
ANR	6249957	Identifier	len		6249811	1					
ANR	6249958	ExpressionStatement	new_buf = malloc ( 1 + ( len * 4 ) )	1369:1:28643:28675	6249811	6	True				
ANR	6249959	AssignmentExpression	new_buf = malloc ( 1 + ( len * 4 ) )		6249811	0		=			
ANR	6249960	Identifier	new_buf		6249811	0					
ANR	6249961	CallExpression	malloc ( 1 + ( len * 4 ) )		6249811	1					
ANR	6249962	Callee	malloc		6249811	0					
ANR	6249963	Identifier	malloc		6249811	0					
ANR	6249964	ArgumentList	1 + ( len * 4 )		6249811	1					
ANR	6249965	Argument	1 + ( len * 4 )		6249811	0					
ANR	6249966	AdditiveExpression	1 + ( len * 4 )		6249811	0		+			
ANR	6249967	PrimaryExpression	1		6249811	0					
ANR	6249968	MultiplicativeExpression	len * 4		6249811	1		*			
ANR	6249969	Identifier	len		6249811	0					
ANR	6249970	PrimaryExpression	4		6249811	1					
ANR	6249971	IfStatement	if ( ! new_buf )		6249811	7					
ANR	6249972	Condition	! new_buf	1370:5:28682:28689	6249811	0	True				
ANR	6249973	UnaryOperationExpression	! new_buf		6249811	0					
ANR	6249974	UnaryOperator	!		6249811	0					
ANR	6249975	Identifier	new_buf		6249811	1					
ANR	6249976	CompoundStatement		32:15:676:676	6249811	1					
ANR	6249977	ReturnStatement	return NULL ;	1371:2:28696:28707	6249811	0	True				
ANR	6249978	Identifier	NULL		6249811	0					
ANR	6249979	ExpressionStatement	p = buf	1373:1:28713:28720	6249811	8	True				
ANR	6249980	AssignmentExpression	p = buf		6249811	0		=			
ANR	6249981	Identifier	p		6249811	0					
ANR	6249982	Identifier	buf		6249811	1					
ANR	6249983	ExpressionStatement	q = new_buf	1374:1:28723:28734	6249811	9	True				
ANR	6249984	AssignmentExpression	q = new_buf		6249811	0		=			
ANR	6249985	Identifier	q		6249811	0					
ANR	6249986	Identifier	new_buf		6249811	1					
ANR	6249987	WhileStatement	while ( p < end )		6249811	10					
ANR	6249988	Condition	p < end	1375:8:28744:28750	6249811	0	True				
ANR	6249989	RelationalExpression	p < end		6249811	0		<			
ANR	6249990	Identifier	p		6249811	0					
ANR	6249991	Identifier	end		6249811	1					
ANR	6249992	CompoundStatement		37:17:737:737	6249811	1					
ANR	6249993	SwitchStatement	switch ( enc )		6249811	0					
ANR	6249994	Condition	enc	1376:10:28765:28767	6249811	0	True				
ANR	6249995	Identifier	enc		6249811	0					
ANR	6249996	CompoundStatement		38:15:754:754	6249811	1					
ANR	6249997	Label	case R_STRING_ENC_UTF16LE :	1377:2:28774:28799	6249811	0	True				
ANR	6249998	Identifier	R_STRING_ENC_UTF16LE		6249811	0					
ANR	6249999	Label	case R_STRING_ENC_UTF32LE :	1378:2:28803:28828	6249811	1	True				
ANR	6250000	Identifier	R_STRING_ENC_UTF32LE		6249811	0					
ANR	6250001	ExpressionStatement	"ch_bytes = ( enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch ) )"	1379:3:28833:28977	6249811	2	True				
ANR	6250002	AssignmentExpression	"ch_bytes = ( enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch ) )"		6249811	0		=			
ANR	6250003	Identifier	ch_bytes		6249811	0					
ANR	6250004	ConditionalExpression	"enc == R_STRING_ENC_UTF16LE ? r_utf16le_decode ( ( ut8 * ) p , end - p , & ch ) : r_utf32le_decode ( ( ut8 * ) p , end - p , & ch )"		6249811	1					
ANR	6250005	Condition	enc == R_STRING_ENC_UTF16LE		6249811	0					
ANR	6250006	EqualityExpression	enc == R_STRING_ENC_UTF16LE		6249811	0		==			
ANR	6250007	Identifier	enc		6249811	0					
ANR	6250008	Identifier	R_STRING_ENC_UTF16LE		6249811	1					
ANR	6250009	CallExpression	"r_utf16le_decode ( ( ut8 * ) p , end - p , & ch )"		6249811	1					
ANR	6250010	Callee	r_utf16le_decode		6249811	0					
ANR	6250011	Identifier	r_utf16le_decode		6249811	0					
ANR	6250012	ArgumentList	( ut8 * ) p		6249811	1					
ANR	6250013	Argument	( ut8 * ) p		6249811	0					
ANR	6250014	CastExpression	( ut8 * ) p		6249811	0					
ANR	6250015	CastTarget	ut8 *		6249811	0					
ANR	6250016	Identifier	p		6249811	1					
ANR	6250017	Argument	end - p		6249811	1					
ANR	6250018	AdditiveExpression	end - p		6249811	0		-			
ANR	6250019	Identifier	end		6249811	0					
ANR	6250020	Identifier	p		6249811	1					
ANR	6250021	Argument	& ch		6249811	2					
ANR	6250022	UnaryOperationExpression	& ch		6249811	0					
ANR	6250023	UnaryOperator	&		6249811	0					
ANR	6250024	Identifier	ch		6249811	1					
ANR	6250025	CallExpression	"r_utf32le_decode ( ( ut8 * ) p , end - p , & ch )"		6249811	2					
ANR	6250026	Callee	r_utf32le_decode		6249811	0					
ANR	6250027	Identifier	r_utf32le_decode		6249811	0					
ANR	6250028	ArgumentList	( ut8 * ) p		6249811	1					
ANR	6250029	Argument	( ut8 * ) p		6249811	0					
ANR	6250030	CastExpression	( ut8 * ) p		6249811	0					
ANR	6250031	CastTarget	ut8 *		6249811	0					
ANR	6250032	Identifier	p		6249811	1					
ANR	6250033	Argument	end - p		6249811	1					
ANR	6250034	AdditiveExpression	end - p		6249811	0		-			
ANR	6250035	Identifier	end		6249811	0					
ANR	6250036	Identifier	p		6249811	1					
ANR	6250037	Argument	& ch		6249811	2					
ANR	6250038	UnaryOperationExpression	& ch		6249811	0					
ANR	6250039	UnaryOperator	&		6249811	0					
ANR	6250040	Identifier	ch		6249811	1					
ANR	6250041	IfStatement	if ( ch_bytes == 0 )		6249811	3					
ANR	6250042	Condition	ch_bytes == 0	1382:7:28986:28998	6249811	0	True				
ANR	6250043	EqualityExpression	ch_bytes == 0		6249811	0		==			
ANR	6250044	Identifier	ch_bytes		6249811	0					
ANR	6250045	PrimaryExpression	0		6249811	1					
ANR	6250046	CompoundStatement		44:22:985:985	6249811	1					
ANR	6250047	ExpressionStatement	p ++	1383:4:29007:29010	6249811	0	True				
ANR	6250048	PostIncDecOperationExpression	p ++		6249811	0					
ANR	6250049	Identifier	p		6249811	0					
ANR	6250050	IncDec	++		6249811	1					
ANR	6250051	ContinueStatement	continue ;	1384:4:29016:29024	6249811	1	True				
ANR	6250052	BreakStatement	break ;	1386:3:29034:29039	6249811	4	True				
ANR	6250053	Label	default :	1387:2:29043:29050	6249811	5	True				
ANR	6250054	Identifier	default		6249811	0					
ANR	6250055	ExpressionStatement	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"	1388:3:29055:29104	6249811	6	True				
ANR	6250056	AssignmentExpression	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		6249811	0		=			
ANR	6250057	Identifier	ch_bytes		6249811	0					
ANR	6250058	CallExpression	"r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		6249811	1					
ANR	6250059	Callee	r_utf8_decode		6249811	0					
ANR	6250060	Identifier	r_utf8_decode		6249811	0					
ANR	6250061	ArgumentList	( ut8 * ) p		6249811	1					
ANR	6250062	Argument	( ut8 * ) p		6249811	0					
ANR	6250063	CastExpression	( ut8 * ) p		6249811	0					
ANR	6250064	CastTarget	ut8 *		6249811	0					
ANR	6250065	Identifier	p		6249811	1					
ANR	6250066	Argument	end - p		6249811	1					
ANR	6250067	AdditiveExpression	end - p		6249811	0		-			
ANR	6250068	Identifier	end		6249811	0					
ANR	6250069	Identifier	p		6249811	1					
ANR	6250070	Argument	& ch		6249811	2					
ANR	6250071	UnaryOperationExpression	& ch		6249811	0					
ANR	6250072	UnaryOperator	&		6249811	0					
ANR	6250073	Identifier	ch		6249811	1					
ANR	6250074	IfStatement	if ( ch_bytes == 0 )		6249811	7					
ANR	6250075	Condition	ch_bytes == 0	1389:7:29113:29125	6249811	0	True				
ANR	6250076	EqualityExpression	ch_bytes == 0		6249811	0		==			
ANR	6250077	Identifier	ch_bytes		6249811	0					
ANR	6250078	PrimaryExpression	0		6249811	1					
ANR	6250079	CompoundStatement		51:22:1112:1112	6249811	1					
ANR	6250080	ExpressionStatement	ch_bytes = 1	1390:4:29134:29146	6249811	0	True				
ANR	6250081	AssignmentExpression	ch_bytes = 1		6249811	0		=			
ANR	6250082	Identifier	ch_bytes		6249811	0					
ANR	6250083	PrimaryExpression	1		6249811	1					
ANR	6250084	IfStatement	if ( show_asciidot && ! IS_PRINTABLE ( ch ) )		6249811	1					
ANR	6250085	Condition	show_asciidot && ! IS_PRINTABLE ( ch )	1393:6:29163:29196	6249811	0	True				
ANR	6250086	AndExpression	show_asciidot && ! IS_PRINTABLE ( ch )		6249811	0		&&			
ANR	6250087	Identifier	show_asciidot		6249811	0					
ANR	6250088	UnaryOperationExpression	! IS_PRINTABLE ( ch )		6249811	1					
ANR	6250089	UnaryOperator	!		6249811	0					
ANR	6250090	CallExpression	IS_PRINTABLE ( ch )		6249811	1					
ANR	6250091	Callee	IS_PRINTABLE		6249811	0					
ANR	6250092	Identifier	IS_PRINTABLE		6249811	0					
ANR	6250093	ArgumentList	ch		6249811	1					
ANR	6250094	Argument	ch		6249811	0					
ANR	6250095	Identifier	ch		6249811	0					
ANR	6250096	CompoundStatement		55:42:1183:1183	6249811	1					
ANR	6250097	ExpressionStatement	* q ++ = '.'	1394:3:29204:29214	6249811	0	True				
ANR	6250098	AssignmentExpression	* q ++ = '.'		6249811	0		=			
ANR	6250099	UnaryOperationExpression	* q ++		6249811	0					
ANR	6250100	UnaryOperator	*		6249811	0					
ANR	6250101	PostIncDecOperationExpression	q ++		6249811	1					
ANR	6250102	Identifier	q		6249811	0					
ANR	6250103	IncDec	++		6249811	1					
ANR	6250104	PrimaryExpression	'.'		6249811	1					
ANR	6250105	ElseStatement	else		6249811	0					
ANR	6250106	IfStatement	if ( ch_bytes > 1 )		6249811	0					
ANR	6250107	Condition	ch_bytes > 1	1395:13:29229:29240	6249811	0	True				
ANR	6250108	RelationalExpression	ch_bytes > 1		6249811	0		>			
ANR	6250109	Identifier	ch_bytes		6249811	0					
ANR	6250110	PrimaryExpression	1		6249811	1					
ANR	6250111	CompoundStatement		57:27:1227:1227	6249811	1					
ANR	6250112	ExpressionStatement	* q ++ = '\\\\'	1396:3:29248:29259	6249811	0	True				
ANR	6250113	AssignmentExpression	* q ++ = '\\\\'		6249811	0		=			
ANR	6250114	UnaryOperationExpression	* q ++		6249811	0					
ANR	6250115	UnaryOperator	*		6249811	0					
ANR	6250116	PostIncDecOperationExpression	q ++		6249811	1					
ANR	6250117	Identifier	q		6249811	0					
ANR	6250118	IncDec	++		6249811	1					
ANR	6250119	PrimaryExpression	'\\\\'		6249811	1					
ANR	6250120	ExpressionStatement	* q ++ = ch_bytes == 4 ? 'U' : 'u'	1397:3:29264:29296	6249811	1	True				
ANR	6250121	AssignmentExpression	* q ++ = ch_bytes == 4 ? 'U' : 'u'		6249811	0		=			
ANR	6250122	UnaryOperationExpression	* q ++		6249811	0					
ANR	6250123	UnaryOperator	*		6249811	0					
ANR	6250124	PostIncDecOperationExpression	q ++		6249811	1					
ANR	6250125	Identifier	q		6249811	0					
ANR	6250126	IncDec	++		6249811	1					
ANR	6250127	ConditionalExpression	ch_bytes == 4 ? 'U' : 'u'		6249811	1					
ANR	6250128	Condition	ch_bytes == 4		6249811	0					
ANR	6250129	EqualityExpression	ch_bytes == 4		6249811	0		==			
ANR	6250130	Identifier	ch_bytes		6249811	0					
ANR	6250131	PrimaryExpression	4		6249811	1					
ANR	6250132	PrimaryExpression	'U'		6249811	1					
ANR	6250133	PrimaryExpression	'u'		6249811	2					
ANR	6250134	ForStatement	for ( i = ch_bytes == 4 ? 6 : 2 ; i >= 0 ; i -= 2 )		6249811	2					
ANR	6250135	ForInit	i = ch_bytes == 4 ? 6 : 2 ;	1398:8:29306:29331	6249811	0	True				
ANR	6250136	AssignmentExpression	i = ch_bytes == 4 ? 6 : 2		6249811	0		=			
ANR	6250137	Identifier	i		6249811	0					
ANR	6250138	ConditionalExpression	ch_bytes == 4 ? 6 : 2		6249811	1					
ANR	6250139	Condition	ch_bytes == 4		6249811	0					
ANR	6250140	EqualityExpression	ch_bytes == 4		6249811	0		==			
ANR	6250141	Identifier	ch_bytes		6249811	0					
ANR	6250142	PrimaryExpression	4		6249811	1					
ANR	6250143	PrimaryExpression	6		6249811	1					
ANR	6250144	PrimaryExpression	2		6249811	2					
ANR	6250145	Condition	i >= 0	1398:35:29333:29338	6249811	1	True				
ANR	6250146	RelationalExpression	i >= 0		6249811	0		>=			
ANR	6250147	Identifier	i		6249811	0					
ANR	6250148	PrimaryExpression	0		6249811	1					
ANR	6250149	AssignmentExpression	i -= 2	1398:43:29341:29346	6249811	2	True	-=			
ANR	6250150	Identifier	i		6249811	0					
ANR	6250151	PrimaryExpression	2		6249811	1					
ANR	6250152	CompoundStatement		60:51:1333:1333	6249811	3					
ANR	6250153	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"	1399:4:29355:29405	6249811	0	True				
ANR	6250154	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		6249811	0		=			
ANR	6250155	UnaryOperationExpression	* q ++		6249811	0					
ANR	6250156	UnaryOperator	*		6249811	0					
ANR	6250157	PostIncDecOperationExpression	q ++		6249811	1					
ANR	6250158	Identifier	q		6249811	0					
ANR	6250159	IncDec	++		6249811	1					
ANR	6250160	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		6249811	1					
ANR	6250161	PrimaryExpression	"""0123456789abcdef"""		6249811	0					
ANR	6250162	BitAndExpression	ch >> 4 * ( i + 1 ) & 0xf		6249811	1		&			
ANR	6250163	ShiftExpression	ch >> 4 * ( i + 1 )		6249811	0		>>			
ANR	6250164	Identifier	ch		6249811	0					
ANR	6250165	MultiplicativeExpression	4 * ( i + 1 )		6249811	1		*			
ANR	6250166	PrimaryExpression	4		6249811	0					
ANR	6250167	AdditiveExpression	i + 1		6249811	1		+			
ANR	6250168	Identifier	i		6249811	0					
ANR	6250169	PrimaryExpression	1		6249811	1					
ANR	6250170	PrimaryExpression	0xf		6249811	1					
ANR	6250171	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"	1400:4:29411:29455	6249811	1	True				
ANR	6250172	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		6249811	0		=			
ANR	6250173	UnaryOperationExpression	* q ++		6249811	0					
ANR	6250174	UnaryOperator	*		6249811	0					
ANR	6250175	PostIncDecOperationExpression	q ++		6249811	1					
ANR	6250176	Identifier	q		6249811	0					
ANR	6250177	IncDec	++		6249811	1					
ANR	6250178	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		6249811	1					
ANR	6250179	PrimaryExpression	"""0123456789abcdef"""		6249811	0					
ANR	6250180	BitAndExpression	ch >> 4 * i & 0xf		6249811	1		&			
ANR	6250181	ShiftExpression	ch >> 4 * i		6249811	0		>>			
ANR	6250182	Identifier	ch		6249811	0					
ANR	6250183	MultiplicativeExpression	4 * i		6249811	1		*			
ANR	6250184	PrimaryExpression	4		6249811	0					
ANR	6250185	Identifier	i		6249811	1					
ANR	6250186	PrimaryExpression	0xf		6249811	1					
ANR	6250187	ElseStatement	else		6249811	0					
ANR	6250188	CompoundStatement		64:9:1455:1455	6249811	0					
ANR	6250189	ExpressionStatement	"r_str_byte_escape ( p , & q , false , false , esc_bslash )"	1403:3:29476:29527	6249811	0	True				
ANR	6250190	CallExpression	"r_str_byte_escape ( p , & q , false , false , esc_bslash )"		6249811	0					
ANR	6250191	Callee	r_str_byte_escape		6249811	0					
ANR	6250192	Identifier	r_str_byte_escape		6249811	0					
ANR	6250193	ArgumentList	p		6249811	1					
ANR	6250194	Argument	p		6249811	0					
ANR	6250195	Identifier	p		6249811	0					
ANR	6250196	Argument	& q		6249811	1					
ANR	6250197	UnaryOperationExpression	& q		6249811	0					
ANR	6250198	UnaryOperator	&		6249811	0					
ANR	6250199	Identifier	q		6249811	1					
ANR	6250200	Argument	false		6249811	2					
ANR	6250201	Identifier	false		6249811	0					
ANR	6250202	Argument	false		6249811	3					
ANR	6250203	Identifier	false		6249811	0					
ANR	6250204	Argument	esc_bslash		6249811	4					
ANR	6250205	Identifier	esc_bslash		6249811	0					
ANR	6250206	SwitchStatement	switch ( enc )		6249811	2					
ANR	6250207	Condition	enc	1405:10:29543:29545	6249811	0	True				
ANR	6250208	Identifier	enc		6249811	0					
ANR	6250209	CompoundStatement		67:15:1532:1532	6249811	1					
ANR	6250210	Label	case R_STRING_ENC_UTF16LE :	1406:2:29552:29577	6249811	0	True				
ANR	6250211	Identifier	R_STRING_ENC_UTF16LE		6249811	0					
ANR	6250212	ExpressionStatement	p += ch_bytes < 2 ? 2 : ch_bytes	1407:3:29582:29614	6249811	1	True				
ANR	6250213	AssignmentExpression	p += ch_bytes < 2 ? 2 : ch_bytes		6249811	0		+=			
ANR	6250214	Identifier	p		6249811	0					
ANR	6250215	ConditionalExpression	ch_bytes < 2 ? 2 : ch_bytes		6249811	1					
ANR	6250216	Condition	ch_bytes < 2		6249811	0					
ANR	6250217	RelationalExpression	ch_bytes < 2		6249811	0		<			
ANR	6250218	Identifier	ch_bytes		6249811	0					
ANR	6250219	PrimaryExpression	2		6249811	1					
ANR	6250220	PrimaryExpression	2		6249811	1					
ANR	6250221	Identifier	ch_bytes		6249811	2					
ANR	6250222	BreakStatement	break ;	1408:3:29619:29624	6249811	2	True				
ANR	6250223	Label	case R_STRING_ENC_UTF32LE :	1409:2:29628:29653	6249811	3	True				
ANR	6250224	Identifier	R_STRING_ENC_UTF32LE		6249811	0					
ANR	6250225	ExpressionStatement	p += 4	1410:3:29658:29664	6249811	4	True				
ANR	6250226	AssignmentExpression	p += 4		6249811	0		+=			
ANR	6250227	Identifier	p		6249811	0					
ANR	6250228	PrimaryExpression	4		6249811	1					
ANR	6250229	BreakStatement	break ;	1411:3:29669:29674	6249811	5	True				
ANR	6250230	Label	default :	1412:2:29678:29685	6249811	6	True				
ANR	6250231	Identifier	default		6249811	0					
ANR	6250232	ExpressionStatement	p += ch_bytes	1413:3:29690:29703	6249811	7	True				
ANR	6250233	AssignmentExpression	p += ch_bytes		6249811	0		+=			
ANR	6250234	Identifier	p		6249811	0					
ANR	6250235	Identifier	ch_bytes		6249811	1					
ANR	6250236	ExpressionStatement	* q = '\\0'	1416:1:29713:29722	6249811	11	True				
ANR	6250237	AssignmentExpression	* q = '\\0'		6249811	0		=			
ANR	6250238	UnaryOperationExpression	* q		6249811	0					
ANR	6250239	UnaryOperator	*		6249811	0					
ANR	6250240	Identifier	q		6249811	1					
ANR	6250241	PrimaryExpression	'\\0'		6249811	1					
ANR	6250242	ReturnStatement	return new_buf ;	1417:1:29725:29739	6249811	12	True				
ANR	6250243	Identifier	new_buf		6249811	0					
ANR	6250244	ReturnType	static char *		6249811	1					
ANR	6250245	Identifier	r_str_escape_utf		6249811	2					
ANR	6250246	ParameterList	"const char * buf , int buf_size , RStrEnc enc , bool show_asciidot , bool esc_bslash"		6249811	3					
ANR	6250247	Parameter	const char * buf	1339:30:27934:27948	6249811	0	True				
ANR	6250248	ParameterType	const char *		6249811	0					
ANR	6250249	Identifier	buf		6249811	1					
ANR	6250250	Parameter	int buf_size	1339:47:27951:27962	6249811	1	True				
ANR	6250251	ParameterType	int		6249811	0					
ANR	6250252	Identifier	buf_size		6249811	1					
ANR	6250253	Parameter	RStrEnc enc	1339:61:27965:27975	6249811	2	True				
ANR	6250254	ParameterType	RStrEnc		6249811	0					
ANR	6250255	Identifier	enc		6249811	1					
ANR	6250256	Parameter	bool show_asciidot	1339:74:27978:27995	6249811	3	True				
ANR	6250257	ParameterType	bool		6249811	0					
ANR	6250258	Identifier	show_asciidot		6249811	1					
ANR	6250259	Parameter	bool esc_bslash	1339:94:27998:28012	6249811	4	True				
ANR	6250260	ParameterType	bool		6249811	0					
ANR	6250261	Identifier	esc_bslash		6249811	1					
ANR	6250262	CFGEntryNode	ENTRY		6249811		True				
ANR	6250263	CFGExitNode	EXIT		6249811		True				
ANR	6250264	Symbol	IS_PRINTABLE		6249811						
ANR	6250265	Symbol	r_utf8_decode		6249811						
ANR	6250266	Symbol	ch_bytes		6249811						
ANR	6250267	Symbol	* q ++		6249811						
ANR	6250268	Symbol	* ch		6249811						
ANR	6250269	Symbol	R_STRING_ENC_UTF16LE		6249811						
ANR	6250270	Symbol	& ch		6249811						
ANR	6250271	Symbol	r_utf32le_decode		6249811						
ANR	6250272	Symbol	strlen		6249811						
ANR	6250273	Symbol	new_buf		6249811						
ANR	6250274	Symbol	len		6249811						
ANR	6250275	Symbol	esc_bslash		6249811						
ANR	6250276	Symbol	end		6249811						
ANR	6250277	Symbol	enc		6249811						
ANR	6250278	Symbol	malloc		6249811						
ANR	6250279	Symbol	NULL		6249811						
ANR	6250280	Symbol	r_utf16le_decode		6249811						
ANR	6250281	Symbol	ch		6249811						
ANR	6250282	Symbol	buf_size		6249811						
ANR	6250283	Symbol	false		6249811						
ANR	6250284	Symbol	i		6249811						
ANR	6250285	Symbol	p		6249811						
ANR	6250286	Symbol	q		6249811						
ANR	6250287	Symbol	buf		6249811						
ANR	6250288	Symbol	* i		6249811						
ANR	6250289	Symbol	r_mem_mem_aligned		6249811						
ANR	6250290	Symbol	& q		6249811						
ANR	6250291	Symbol	show_asciidot		6249811						
ANR	6250292	Symbol	* q		6249811						
ANR	6250293	Function	r_str_escape_utf8	1420:0:29744:29912							
ANR	6250294	FunctionDef	"r_str_escape_utf8 (const char * buf , bool show_asciidot , bool esc_bslash)"		6250293	0					
ANR	6250295	CompoundStatement		1420:84:29828:29912	6250293	0					
ANR	6250296	ReturnStatement	"return r_str_escape_utf ( buf , - 1 , R_STRING_ENC_UTF8 , show_asciidot , esc_bslash ) ;"	1421:1:29831:29910	6250293	0	True				
ANR	6250297	CallExpression	"r_str_escape_utf ( buf , - 1 , R_STRING_ENC_UTF8 , show_asciidot , esc_bslash )"		6250293	0					
ANR	6250298	Callee	r_str_escape_utf		6250293	0					
ANR	6250299	Identifier	r_str_escape_utf		6250293	0					
ANR	6250300	ArgumentList	buf		6250293	1					
ANR	6250301	Argument	buf		6250293	0					
ANR	6250302	Identifier	buf		6250293	0					
ANR	6250303	Argument	- 1		6250293	1					
ANR	6250304	UnaryOperationExpression	- 1		6250293	0					
ANR	6250305	UnaryOperator	-		6250293	0					
ANR	6250306	PrimaryExpression	1		6250293	1					
ANR	6250307	Argument	R_STRING_ENC_UTF8		6250293	2					
ANR	6250308	Identifier	R_STRING_ENC_UTF8		6250293	0					
ANR	6250309	Argument	show_asciidot		6250293	3					
ANR	6250310	Identifier	show_asciidot		6250293	0					
ANR	6250311	Argument	esc_bslash		6250293	4					
ANR	6250312	Identifier	esc_bslash		6250293	0					
ANR	6250313	ReturnType	R_API char *		6250293	1					
ANR	6250314	Identifier	r_str_escape_utf8		6250293	2					
ANR	6250315	ParameterList	"const char * buf , bool show_asciidot , bool esc_bslash"		6250293	3					
ANR	6250316	Parameter	const char * buf	1420:30:29774:29788	6250293	0	True				
ANR	6250317	ParameterType	const char *		6250293	0					
ANR	6250318	Identifier	buf		6250293	1					
ANR	6250319	Parameter	bool show_asciidot	1420:47:29791:29808	6250293	1	True				
ANR	6250320	ParameterType	bool		6250293	0					
ANR	6250321	Identifier	show_asciidot		6250293	1					
ANR	6250322	Parameter	bool esc_bslash	1420:67:29811:29825	6250293	2	True				
ANR	6250323	ParameterType	bool		6250293	0					
ANR	6250324	Identifier	esc_bslash		6250293	1					
ANR	6250325	CFGEntryNode	ENTRY		6250293		True				
ANR	6250326	CFGExitNode	EXIT		6250293		True				
ANR	6250327	Symbol	buf		6250293						
ANR	6250328	Symbol	R_STRING_ENC_UTF8		6250293						
ANR	6250329	Symbol	esc_bslash		6250293						
ANR	6250330	Symbol	show_asciidot		6250293						
ANR	6250331	Symbol	r_str_escape_utf		6250293						
ANR	6250332	Function	r_str_escape_utf16le	1424:0:29915:30109							
ANR	6250333	FunctionDef	"r_str_escape_utf16le (const char * buf , int buf_size , bool show_asciidot , bool esc_bslash)"		6250332	0					
ANR	6250334	CompoundStatement		1424:101:30016:30109	6250332	0					
ANR	6250335	ReturnStatement	"return r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF16LE , show_asciidot , esc_bslash ) ;"	1425:1:30019:30107	6250332	0	True				
ANR	6250336	CallExpression	"r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF16LE , show_asciidot , esc_bslash )"		6250332	0					
ANR	6250337	Callee	r_str_escape_utf		6250332	0					
ANR	6250338	Identifier	r_str_escape_utf		6250332	0					
ANR	6250339	ArgumentList	buf		6250332	1					
ANR	6250340	Argument	buf		6250332	0					
ANR	6250341	Identifier	buf		6250332	0					
ANR	6250342	Argument	buf_size		6250332	1					
ANR	6250343	Identifier	buf_size		6250332	0					
ANR	6250344	Argument	R_STRING_ENC_UTF16LE		6250332	2					
ANR	6250345	Identifier	R_STRING_ENC_UTF16LE		6250332	0					
ANR	6250346	Argument	show_asciidot		6250332	3					
ANR	6250347	Identifier	show_asciidot		6250332	0					
ANR	6250348	Argument	esc_bslash		6250332	4					
ANR	6250349	Identifier	esc_bslash		6250332	0					
ANR	6250350	ReturnType	R_API char *		6250332	1					
ANR	6250351	Identifier	r_str_escape_utf16le		6250332	2					
ANR	6250352	ParameterList	"const char * buf , int buf_size , bool show_asciidot , bool esc_bslash"		6250332	3					
ANR	6250353	Parameter	const char * buf	1424:33:29948:29962	6250332	0	True				
ANR	6250354	ParameterType	const char *		6250332	0					
ANR	6250355	Identifier	buf		6250332	1					
ANR	6250356	Parameter	int buf_size	1424:50:29965:29976	6250332	1	True				
ANR	6250357	ParameterType	int		6250332	0					
ANR	6250358	Identifier	buf_size		6250332	1					
ANR	6250359	Parameter	bool show_asciidot	1424:64:29979:29996	6250332	2	True				
ANR	6250360	ParameterType	bool		6250332	0					
ANR	6250361	Identifier	show_asciidot		6250332	1					
ANR	6250362	Parameter	bool esc_bslash	1424:84:29999:30013	6250332	3	True				
ANR	6250363	ParameterType	bool		6250332	0					
ANR	6250364	Identifier	esc_bslash		6250332	1					
ANR	6250365	CFGEntryNode	ENTRY		6250332		True				
ANR	6250366	CFGExitNode	EXIT		6250332		True				
ANR	6250367	Symbol	buf		6250332						
ANR	6250368	Symbol	buf_size		6250332						
ANR	6250369	Symbol	esc_bslash		6250332						
ANR	6250370	Symbol	show_asciidot		6250332						
ANR	6250371	Symbol	r_str_escape_utf		6250332						
ANR	6250372	Symbol	R_STRING_ENC_UTF16LE		6250332						
ANR	6250373	Function	r_str_escape_utf32le	1428:0:30112:30306							
ANR	6250374	FunctionDef	"r_str_escape_utf32le (const char * buf , int buf_size , bool show_asciidot , bool esc_bslash)"		6250373	0					
ANR	6250375	CompoundStatement		1428:101:30213:30306	6250373	0					
ANR	6250376	ReturnStatement	"return r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF32LE , show_asciidot , esc_bslash ) ;"	1429:1:30216:30304	6250373	0	True				
ANR	6250377	CallExpression	"r_str_escape_utf ( buf , buf_size , R_STRING_ENC_UTF32LE , show_asciidot , esc_bslash )"		6250373	0					
ANR	6250378	Callee	r_str_escape_utf		6250373	0					
ANR	6250379	Identifier	r_str_escape_utf		6250373	0					
ANR	6250380	ArgumentList	buf		6250373	1					
ANR	6250381	Argument	buf		6250373	0					
ANR	6250382	Identifier	buf		6250373	0					
ANR	6250383	Argument	buf_size		6250373	1					
ANR	6250384	Identifier	buf_size		6250373	0					
ANR	6250385	Argument	R_STRING_ENC_UTF32LE		6250373	2					
ANR	6250386	Identifier	R_STRING_ENC_UTF32LE		6250373	0					
ANR	6250387	Argument	show_asciidot		6250373	3					
ANR	6250388	Identifier	show_asciidot		6250373	0					
ANR	6250389	Argument	esc_bslash		6250373	4					
ANR	6250390	Identifier	esc_bslash		6250373	0					
ANR	6250391	ReturnType	R_API char *		6250373	1					
ANR	6250392	Identifier	r_str_escape_utf32le		6250373	2					
ANR	6250393	ParameterList	"const char * buf , int buf_size , bool show_asciidot , bool esc_bslash"		6250373	3					
ANR	6250394	Parameter	const char * buf	1428:33:30145:30159	6250373	0	True				
ANR	6250395	ParameterType	const char *		6250373	0					
ANR	6250396	Identifier	buf		6250373	1					
ANR	6250397	Parameter	int buf_size	1428:50:30162:30173	6250373	1	True				
ANR	6250398	ParameterType	int		6250373	0					
ANR	6250399	Identifier	buf_size		6250373	1					
ANR	6250400	Parameter	bool show_asciidot	1428:64:30176:30193	6250373	2	True				
ANR	6250401	ParameterType	bool		6250373	0					
ANR	6250402	Identifier	show_asciidot		6250373	1					
ANR	6250403	Parameter	bool esc_bslash	1428:84:30196:30210	6250373	3	True				
ANR	6250404	ParameterType	bool		6250373	0					
ANR	6250405	Identifier	esc_bslash		6250373	1					
ANR	6250406	CFGEntryNode	ENTRY		6250373		True				
ANR	6250407	CFGExitNode	EXIT		6250373		True				
ANR	6250408	Symbol	buf		6250373						
ANR	6250409	Symbol	buf_size		6250373						
ANR	6250410	Symbol	esc_bslash		6250373						
ANR	6250411	Symbol	show_asciidot		6250373						
ANR	6250412	Symbol	R_STRING_ENC_UTF32LE		6250373						
ANR	6250413	Symbol	r_str_escape_utf		6250373						
ANR	6250414	Function	r_str_escape_utf8_for_json	1434:0:30428:33050							
ANR	6250415	FunctionDef	"r_str_escape_utf8_for_json (const char * buf , int buf_size)"		6250414	0					
ANR	6250416	CompoundStatement		1434:70:30498:33050	6250414	0					
ANR	6250417	IdentifierDeclStatement	"char * new_buf , * q ;"	1435:1:30501:30518	6250414	0	True				
ANR	6250418	IdentifierDecl	* new_buf		6250414	0					
ANR	6250419	IdentifierDeclType	char *		6250414	0					
ANR	6250420	Identifier	new_buf		6250414	1					
ANR	6250421	IdentifierDecl	* q		6250414	1					
ANR	6250422	IdentifierDeclType	char *		6250414	0					
ANR	6250423	Identifier	q		6250414	1					
ANR	6250424	IdentifierDeclStatement	"const char * p , * end ;"	1436:1:30521:30540	6250414	1	True				
ANR	6250425	IdentifierDecl	* p		6250414	0					
ANR	6250426	IdentifierDeclType	const char *		6250414	0					
ANR	6250427	Identifier	p		6250414	1					
ANR	6250428	IdentifierDecl	* end		6250414	1					
ANR	6250429	IdentifierDeclType	const char *		6250414	0					
ANR	6250430	Identifier	end		6250414	1					
ANR	6250431	IdentifierDeclStatement	RRune ch ;	1437:1:30543:30551	6250414	2	True				
ANR	6250432	IdentifierDecl	ch		6250414	0					
ANR	6250433	IdentifierDeclType	RRune		6250414	0					
ANR	6250434	Identifier	ch		6250414	1					
ANR	6250435	IdentifierDeclStatement	"int i , len , ch_bytes ;"	1438:1:30554:30574	6250414	3	True				
ANR	6250436	IdentifierDecl	i		6250414	0					
ANR	6250437	IdentifierDeclType	int		6250414	0					
ANR	6250438	Identifier	i		6250414	1					
ANR	6250439	IdentifierDecl	len		6250414	1					
ANR	6250440	IdentifierDeclType	int		6250414	0					
ANR	6250441	Identifier	len		6250414	1					
ANR	6250442	IdentifierDecl	ch_bytes		6250414	2					
ANR	6250443	IdentifierDeclType	int		6250414	0					
ANR	6250444	Identifier	ch_bytes		6250414	1					
ANR	6250445	IfStatement	if ( ! buf )		6250414	4					
ANR	6250446	Condition	! buf	1440:5:30582:30585	6250414	0	True				
ANR	6250447	UnaryOperationExpression	! buf		6250414	0					
ANR	6250448	UnaryOperator	!		6250414	0					
ANR	6250449	Identifier	buf		6250414	1					
ANR	6250450	CompoundStatement		7:11:89:89	6250414	1					
ANR	6250451	ReturnStatement	return NULL ;	1441:2:30592:30603	6250414	0	True				
ANR	6250452	Identifier	NULL		6250414	0					
ANR	6250453	ExpressionStatement	len = buf_size < 0 ? strlen ( buf ) : buf_size	1443:1:30609:30653	6250414	5	True				
ANR	6250454	AssignmentExpression	len = buf_size < 0 ? strlen ( buf ) : buf_size		6250414	0		=			
ANR	6250455	Identifier	len		6250414	0					
ANR	6250456	ConditionalExpression	buf_size < 0 ? strlen ( buf ) : buf_size		6250414	1					
ANR	6250457	Condition	buf_size < 0		6250414	0					
ANR	6250458	RelationalExpression	buf_size < 0		6250414	0		<			
ANR	6250459	Identifier	buf_size		6250414	0					
ANR	6250460	PrimaryExpression	0		6250414	1					
ANR	6250461	CallExpression	strlen ( buf )		6250414	1					
ANR	6250462	Callee	strlen		6250414	0					
ANR	6250463	Identifier	strlen		6250414	0					
ANR	6250464	ArgumentList	buf		6250414	1					
ANR	6250465	Argument	buf		6250414	0					
ANR	6250466	Identifier	buf		6250414	0					
ANR	6250467	Identifier	buf_size		6250414	2					
ANR	6250468	ExpressionStatement	end = buf + len	1444:1:30656:30671	6250414	6	True				
ANR	6250469	AssignmentExpression	end = buf + len		6250414	0		=			
ANR	6250470	Identifier	end		6250414	0					
ANR	6250471	AdditiveExpression	buf + len		6250414	1		+			
ANR	6250472	Identifier	buf		6250414	0					
ANR	6250473	Identifier	len		6250414	1					
ANR	6250474	ExpressionStatement	new_buf = malloc ( 1 + ( len * 6 ) )	1446:1:30734:30766	6250414	7	True				
ANR	6250475	AssignmentExpression	new_buf = malloc ( 1 + ( len * 6 ) )		6250414	0		=			
ANR	6250476	Identifier	new_buf		6250414	0					
ANR	6250477	CallExpression	malloc ( 1 + ( len * 6 ) )		6250414	1					
ANR	6250478	Callee	malloc		6250414	0					
ANR	6250479	Identifier	malloc		6250414	0					
ANR	6250480	ArgumentList	1 + ( len * 6 )		6250414	1					
ANR	6250481	Argument	1 + ( len * 6 )		6250414	0					
ANR	6250482	AdditiveExpression	1 + ( len * 6 )		6250414	0		+			
ANR	6250483	PrimaryExpression	1		6250414	0					
ANR	6250484	MultiplicativeExpression	len * 6		6250414	1		*			
ANR	6250485	Identifier	len		6250414	0					
ANR	6250486	PrimaryExpression	6		6250414	1					
ANR	6250487	IfStatement	if ( ! new_buf )		6250414	8					
ANR	6250488	Condition	! new_buf	1447:5:30773:30780	6250414	0	True				
ANR	6250489	UnaryOperationExpression	! new_buf		6250414	0					
ANR	6250490	UnaryOperator	!		6250414	0					
ANR	6250491	Identifier	new_buf		6250414	1					
ANR	6250492	CompoundStatement		14:15:284:284	6250414	1					
ANR	6250493	ReturnStatement	return NULL ;	1448:2:30787:30798	6250414	0	True				
ANR	6250494	Identifier	NULL		6250414	0					
ANR	6250495	ExpressionStatement	p = buf	1450:1:30804:30811	6250414	9	True				
ANR	6250496	AssignmentExpression	p = buf		6250414	0		=			
ANR	6250497	Identifier	p		6250414	0					
ANR	6250498	Identifier	buf		6250414	1					
ANR	6250499	ExpressionStatement	q = new_buf	1451:1:30814:30825	6250414	10	True				
ANR	6250500	AssignmentExpression	q = new_buf		6250414	0		=			
ANR	6250501	Identifier	q		6250414	0					
ANR	6250502	Identifier	new_buf		6250414	1					
ANR	6250503	WhileStatement	while ( p < end )		6250414	11					
ANR	6250504	Condition	p < end	1452:8:30835:30841	6250414	0	True				
ANR	6250505	RelationalExpression	p < end		6250414	0		<			
ANR	6250506	Identifier	p		6250414	0					
ANR	6250507	Identifier	end		6250414	1					
ANR	6250508	CompoundStatement		19:17:345:345	6250414	1					
ANR	6250509	ExpressionStatement	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"	1453:2:30848:30897	6250414	0	True				
ANR	6250510	AssignmentExpression	"ch_bytes = r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		6250414	0		=			
ANR	6250511	Identifier	ch_bytes		6250414	0					
ANR	6250512	CallExpression	"r_utf8_decode ( ( ut8 * ) p , end - p , & ch )"		6250414	1					
ANR	6250513	Callee	r_utf8_decode		6250414	0					
ANR	6250514	Identifier	r_utf8_decode		6250414	0					
ANR	6250515	ArgumentList	( ut8 * ) p		6250414	1					
ANR	6250516	Argument	( ut8 * ) p		6250414	0					
ANR	6250517	CastExpression	( ut8 * ) p		6250414	0					
ANR	6250518	CastTarget	ut8 *		6250414	0					
ANR	6250519	Identifier	p		6250414	1					
ANR	6250520	Argument	end - p		6250414	1					
ANR	6250521	AdditiveExpression	end - p		6250414	0		-			
ANR	6250522	Identifier	end		6250414	0					
ANR	6250523	Identifier	p		6250414	1					
ANR	6250524	Argument	& ch		6250414	2					
ANR	6250525	UnaryOperationExpression	& ch		6250414	0					
ANR	6250526	UnaryOperator	&		6250414	0					
ANR	6250527	Identifier	ch		6250414	1					
ANR	6250528	IfStatement	if ( ch_bytes == 1 )		6250414	1					
ANR	6250529	Condition	ch_bytes == 1	1454:6:30905:30917	6250414	0	True				
ANR	6250530	EqualityExpression	ch_bytes == 1		6250414	0		==			
ANR	6250531	Identifier	ch_bytes		6250414	0					
ANR	6250532	PrimaryExpression	1		6250414	1					
ANR	6250533	CompoundStatement		21:21:421:421	6250414	1					
ANR	6250534	SwitchStatement	switch ( * p )		6250414	0					
ANR	6250535	Condition	* p	1455:11:30933:30934	6250414	0	True				
ANR	6250536	UnaryOperationExpression	* p		6250414	0					
ANR	6250537	UnaryOperator	*		6250414	0					
ANR	6250538	Identifier	p		6250414	1					
ANR	6250539	CompoundStatement		22:15:438:438	6250414	1					
ANR	6250540	Label	case '\\n' :	1456:3:30942:30951	6250414	0	True				
ANR	6250541	ExpressionStatement	* q ++ = '\\\\'	1457:4:30957:30968	6250414	1	True				
ANR	6250542	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250543	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250544	UnaryOperator	*		6250414	0					
ANR	6250545	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250546	Identifier	q		6250414	0					
ANR	6250547	IncDec	++		6250414	1					
ANR	6250548	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250549	ExpressionStatement	* q ++ = 'n'	1458:4:30974:30984	6250414	2	True				
ANR	6250550	AssignmentExpression	* q ++ = 'n'		6250414	0		=			
ANR	6250551	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250552	UnaryOperator	*		6250414	0					
ANR	6250553	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250554	Identifier	q		6250414	0					
ANR	6250555	IncDec	++		6250414	1					
ANR	6250556	PrimaryExpression	'n'		6250414	1					
ANR	6250557	BreakStatement	break ;	1459:4:30990:30995	6250414	3	True				
ANR	6250558	Label	case '\\r' :	1460:3:31000:31009	6250414	4	True				
ANR	6250559	ExpressionStatement	* q ++ = '\\\\'	1461:4:31015:31026	6250414	5	True				
ANR	6250560	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250561	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250562	UnaryOperator	*		6250414	0					
ANR	6250563	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250564	Identifier	q		6250414	0					
ANR	6250565	IncDec	++		6250414	1					
ANR	6250566	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250567	ExpressionStatement	* q ++ = 'r'	1462:4:31032:31042	6250414	6	True				
ANR	6250568	AssignmentExpression	* q ++ = 'r'		6250414	0		=			
ANR	6250569	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250570	UnaryOperator	*		6250414	0					
ANR	6250571	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250572	Identifier	q		6250414	0					
ANR	6250573	IncDec	++		6250414	1					
ANR	6250574	PrimaryExpression	'r'		6250414	1					
ANR	6250575	BreakStatement	break ;	1463:4:31048:31053	6250414	7	True				
ANR	6250576	Label	case '\\\\' :	1464:3:31058:31067	6250414	8	True				
ANR	6250577	ExpressionStatement	* q ++ = '\\\\'	1465:4:31073:31084	6250414	9	True				
ANR	6250578	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250579	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250580	UnaryOperator	*		6250414	0					
ANR	6250581	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250582	Identifier	q		6250414	0					
ANR	6250583	IncDec	++		6250414	1					
ANR	6250584	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250585	ExpressionStatement	* q ++ = '\\\\'	1466:4:31090:31101	6250414	10	True				
ANR	6250586	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250587	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250588	UnaryOperator	*		6250414	0					
ANR	6250589	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250590	Identifier	q		6250414	0					
ANR	6250591	IncDec	++		6250414	1					
ANR	6250592	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250593	BreakStatement	break ;	1467:4:31107:31112	6250414	11	True				
ANR	6250594	Label	case '/' :	1469:3:31123:31131	6250414	12	True				
ANR	6250595	ExpressionStatement	* q ++ = '\\\\'	1470:4:31201:31212	6250414	13	True				
ANR	6250596	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250597	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250598	UnaryOperator	*		6250414	0					
ANR	6250599	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250600	Identifier	q		6250414	0					
ANR	6250601	IncDec	++		6250414	1					
ANR	6250602	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250603	ExpressionStatement	* q ++ = '/'	1471:4:31218:31228	6250414	14	True				
ANR	6250604	AssignmentExpression	* q ++ = '/'		6250414	0		=			
ANR	6250605	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250606	UnaryOperator	*		6250414	0					
ANR	6250607	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250608	Identifier	q		6250414	0					
ANR	6250609	IncDec	++		6250414	1					
ANR	6250610	PrimaryExpression	'/'		6250414	1					
ANR	6250611	BreakStatement	break ;	1472:4:31234:31239	6250414	15	True				
ANR	6250612	Label	case '\\t' :	1474:3:31251:31260	6250414	16	True				
ANR	6250613	ExpressionStatement	* q ++ = '\\\\'	1475:4:31266:31277	6250414	17	True				
ANR	6250614	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250615	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250616	UnaryOperator	*		6250414	0					
ANR	6250617	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250618	Identifier	q		6250414	0					
ANR	6250619	IncDec	++		6250414	1					
ANR	6250620	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250621	ExpressionStatement	* q ++ = 't'	1476:4:31283:31293	6250414	18	True				
ANR	6250622	AssignmentExpression	* q ++ = 't'		6250414	0		=			
ANR	6250623	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250624	UnaryOperator	*		6250414	0					
ANR	6250625	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250626	Identifier	q		6250414	0					
ANR	6250627	IncDec	++		6250414	1					
ANR	6250628	PrimaryExpression	't'		6250414	1					
ANR	6250629	BreakStatement	break ;	1477:4:31299:31304	6250414	19	True				
ANR	6250630	Label	"case '""' :"	1478:3:31309:31318	6250414	20	True				
ANR	6250631	ExpressionStatement	* q ++ = '\\\\'	1479:4:31324:31335	6250414	21	True				
ANR	6250632	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250633	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250634	UnaryOperator	*		6250414	0					
ANR	6250635	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250636	Identifier	q		6250414	0					
ANR	6250637	IncDec	++		6250414	1					
ANR	6250638	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250639	ExpressionStatement	"* q ++ = '""'"	1480:4:31341:31351	6250414	22	True				
ANR	6250640	AssignmentExpression	"* q ++ = '""'"		6250414	0		=			
ANR	6250641	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250642	UnaryOperator	*		6250414	0					
ANR	6250643	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250644	Identifier	q		6250414	0					
ANR	6250645	IncDec	++		6250414	1					
ANR	6250646	PrimaryExpression	"'""'"		6250414	1					
ANR	6250647	BreakStatement	break ;	1481:4:31357:31362	6250414	23	True				
ANR	6250648	Label	case '\\f' :	1482:3:31367:31376	6250414	24	True				
ANR	6250649	ExpressionStatement	* q ++ = '\\\\'	1483:4:31382:31393	6250414	25	True				
ANR	6250650	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250651	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250652	UnaryOperator	*		6250414	0					
ANR	6250653	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250654	Identifier	q		6250414	0					
ANR	6250655	IncDec	++		6250414	1					
ANR	6250656	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250657	ExpressionStatement	* q ++ = 'f'	1484:4:31399:31409	6250414	26	True				
ANR	6250658	AssignmentExpression	* q ++ = 'f'		6250414	0		=			
ANR	6250659	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250660	UnaryOperator	*		6250414	0					
ANR	6250661	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250662	Identifier	q		6250414	0					
ANR	6250663	IncDec	++		6250414	1					
ANR	6250664	PrimaryExpression	'f'		6250414	1					
ANR	6250665	BreakStatement	break ;	1485:4:31415:31420	6250414	27	True				
ANR	6250666	Label	case '\\b' :	1486:3:31425:31434	6250414	28	True				
ANR	6250667	ExpressionStatement	* q ++ = '\\\\'	1487:4:31440:31451	6250414	29	True				
ANR	6250668	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250669	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250670	UnaryOperator	*		6250414	0					
ANR	6250671	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250672	Identifier	q		6250414	0					
ANR	6250673	IncDec	++		6250414	1					
ANR	6250674	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250675	ExpressionStatement	* q ++ = 'b'	1488:4:31457:31467	6250414	30	True				
ANR	6250676	AssignmentExpression	* q ++ = 'b'		6250414	0		=			
ANR	6250677	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250678	UnaryOperator	*		6250414	0					
ANR	6250679	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250680	Identifier	q		6250414	0					
ANR	6250681	IncDec	++		6250414	1					
ANR	6250682	PrimaryExpression	'b'		6250414	1					
ANR	6250683	BreakStatement	break ;	1489:4:31473:31478	6250414	31	True				
ANR	6250684	Label	default :	1490:3:31483:31490	6250414	32	True				
ANR	6250685	Identifier	default		6250414	0					
ANR	6250686	IfStatement	if ( ! IS_PRINTABLE ( * p ) )		6250414	33					
ANR	6250687	Condition	! IS_PRINTABLE ( * p )	1491:8:31500:31517	6250414	0	True				
ANR	6250688	UnaryOperationExpression	! IS_PRINTABLE ( * p )		6250414	0					
ANR	6250689	UnaryOperator	!		6250414	0					
ANR	6250690	CallExpression	IS_PRINTABLE ( * p )		6250414	1					
ANR	6250691	Callee	IS_PRINTABLE		6250414	0					
ANR	6250692	Identifier	IS_PRINTABLE		6250414	0					
ANR	6250693	ArgumentList	* p		6250414	1					
ANR	6250694	Argument	* p		6250414	0					
ANR	6250695	UnaryOperationExpression	* p		6250414	0					
ANR	6250696	UnaryOperator	*		6250414	0					
ANR	6250697	Identifier	p		6250414	1					
ANR	6250698	CompoundStatement		58:28:1021:1021	6250414	1					
ANR	6250699	ExpressionStatement	* q ++ = '\\\\'	1492:5:31527:31538	6250414	0	True				
ANR	6250700	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250701	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250702	UnaryOperator	*		6250414	0					
ANR	6250703	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250704	Identifier	q		6250414	0					
ANR	6250705	IncDec	++		6250414	1					
ANR	6250706	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250707	ExpressionStatement	* q ++ = 'u'	1493:5:31545:31555	6250414	1	True				
ANR	6250708	AssignmentExpression	* q ++ = 'u'		6250414	0		=			
ANR	6250709	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250710	UnaryOperator	*		6250414	0					
ANR	6250711	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250712	Identifier	q		6250414	0					
ANR	6250713	IncDec	++		6250414	1					
ANR	6250714	PrimaryExpression	'u'		6250414	1					
ANR	6250715	ExpressionStatement	* q ++ = '0'	1494:5:31562:31572	6250414	2	True				
ANR	6250716	AssignmentExpression	* q ++ = '0'		6250414	0		=			
ANR	6250717	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250718	UnaryOperator	*		6250414	0					
ANR	6250719	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250720	Identifier	q		6250414	0					
ANR	6250721	IncDec	++		6250414	1					
ANR	6250722	PrimaryExpression	'0'		6250414	1					
ANR	6250723	ExpressionStatement	* q ++ = '0'	1495:5:31579:31589	6250414	3	True				
ANR	6250724	AssignmentExpression	* q ++ = '0'		6250414	0		=			
ANR	6250725	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250726	UnaryOperator	*		6250414	0					
ANR	6250727	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250728	Identifier	q		6250414	0					
ANR	6250729	IncDec	++		6250414	1					
ANR	6250730	PrimaryExpression	'0'		6250414	1					
ANR	6250731	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1496:5:31596:31636	6250414	4	True				
ANR	6250732	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6250414	0		=			
ANR	6250733	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250734	UnaryOperator	*		6250414	0					
ANR	6250735	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250736	Identifier	q		6250414	0					
ANR	6250737	IncDec	++		6250414	1					
ANR	6250738	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6250414	1					
ANR	6250739	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250740	BitAndExpression	* p >> 4 & 0xf		6250414	1		&			
ANR	6250741	ShiftExpression	* p >> 4		6250414	0		>>			
ANR	6250742	UnaryOperationExpression	* p		6250414	0					
ANR	6250743	UnaryOperator	*		6250414	0					
ANR	6250744	Identifier	p		6250414	1					
ANR	6250745	PrimaryExpression	4		6250414	1					
ANR	6250746	PrimaryExpression	0xf		6250414	1					
ANR	6250747	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1497:5:31643:31678	6250414	5	True				
ANR	6250748	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		6250414	0		=			
ANR	6250749	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250750	UnaryOperator	*		6250414	0					
ANR	6250751	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250752	Identifier	q		6250414	0					
ANR	6250753	IncDec	++		6250414	1					
ANR	6250754	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		6250414	1					
ANR	6250755	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250756	BitAndExpression	* p & 0xf		6250414	1		&			
ANR	6250757	UnaryOperationExpression	* p		6250414	0					
ANR	6250758	UnaryOperator	*		6250414	0					
ANR	6250759	Identifier	p		6250414	1					
ANR	6250760	PrimaryExpression	0xf		6250414	1					
ANR	6250761	ElseStatement	else		6250414	0					
ANR	6250762	CompoundStatement		65:11:1192:1192	6250414	0					
ANR	6250763	ExpressionStatement	* q ++ = * p	1499:5:31698:31707	6250414	0	True				
ANR	6250764	AssignmentExpression	* q ++ = * p		6250414	0		=			
ANR	6250765	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250766	UnaryOperator	*		6250414	0					
ANR	6250767	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250768	Identifier	q		6250414	0					
ANR	6250769	IncDec	++		6250414	1					
ANR	6250770	UnaryOperationExpression	* p		6250414	1					
ANR	6250771	UnaryOperator	*		6250414	0					
ANR	6250772	Identifier	p		6250414	1					
ANR	6250773	ElseStatement	else		6250414	0					
ANR	6250774	IfStatement	if ( ch_bytes == 4 )		6250414	0					
ANR	6250775	Condition	ch_bytes == 4	1502:13:31733:31745	6250414	0	True				
ANR	6250776	EqualityExpression	ch_bytes == 4		6250414	0		==			
ANR	6250777	Identifier	ch_bytes		6250414	0					
ANR	6250778	PrimaryExpression	4		6250414	1					
ANR	6250779	CompoundStatement		69:28:1249:1249	6250414	1					
ANR	6250780	IfStatement	if ( r_isprint ( ch ) )		6250414	0					
ANR	6250781	Condition	r_isprint ( ch )	1503:7:31757:31770	6250414	0	True				
ANR	6250782	CallExpression	r_isprint ( ch )		6250414	0					
ANR	6250783	Callee	r_isprint		6250414	0					
ANR	6250784	Identifier	r_isprint		6250414	0					
ANR	6250785	ArgumentList	ch		6250414	1					
ANR	6250786	Argument	ch		6250414	0					
ANR	6250787	Identifier	ch		6250414	0					
ANR	6250788	CompoundStatement		70:23:1274:1274	6250414	1					
ANR	6250789	ForStatement	for ( i = 0 ; i < ch_bytes ; i ++ )		6250414	0					
ANR	6250790	ForInit	i = 0 ;	1505:9:31819:31824	6250414	0	True				
ANR	6250791	AssignmentExpression	i = 0		6250414	0		=			
ANR	6250792	Identifier	i		6250414	0					
ANR	6250793	PrimaryExpression	0		6250414	1					
ANR	6250794	Condition	i < ch_bytes	1505:16:31826:31837	6250414	1	True				
ANR	6250795	RelationalExpression	i < ch_bytes		6250414	0		<			
ANR	6250796	Identifier	i		6250414	0					
ANR	6250797	Identifier	ch_bytes		6250414	1					
ANR	6250798	PostIncDecOperationExpression	i ++	1505:30:31840:31842	6250414	2	True				
ANR	6250799	Identifier	i		6250414	0					
ANR	6250800	IncDec	++		6250414	1					
ANR	6250801	CompoundStatement		72:35:1346:1346	6250414	3					
ANR	6250802	ExpressionStatement	* q ++ = * ( p + i )	1506:5:31852:31867	6250414	0	True				
ANR	6250803	AssignmentExpression	* q ++ = * ( p + i )		6250414	0		=			
ANR	6250804	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250805	UnaryOperator	*		6250414	0					
ANR	6250806	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250807	Identifier	q		6250414	0					
ANR	6250808	IncDec	++		6250414	1					
ANR	6250809	UnaryOperationExpression	* ( p + i )		6250414	1					
ANR	6250810	UnaryOperator	*		6250414	0					
ANR	6250811	AdditiveExpression	p + i		6250414	1		+			
ANR	6250812	Identifier	p		6250414	0					
ANR	6250813	Identifier	i		6250414	1					
ANR	6250814	ElseStatement	else		6250414	0					
ANR	6250815	CompoundStatement		76:4:1392:1407	6250414	0					
ANR	6250816	IdentifierDeclStatement	"RRune high , low ;"	1509:4:31891:31906	6250414	0	True				
ANR	6250817	IdentifierDecl	high		6250414	0					
ANR	6250818	IdentifierDeclType	RRune		6250414	0					
ANR	6250819	Identifier	high		6250414	1					
ANR	6250820	IdentifierDecl	low		6250414	1					
ANR	6250821	IdentifierDeclType	RRune		6250414	0					
ANR	6250822	Identifier	low		6250414	1					
ANR	6250823	ExpressionStatement	ch -= 0x10000	1510:4:31912:31925	6250414	1	True				
ANR	6250824	AssignmentExpression	ch -= 0x10000		6250414	0		-=			
ANR	6250825	Identifier	ch		6250414	0					
ANR	6250826	PrimaryExpression	0x10000		6250414	1					
ANR	6250827	ExpressionStatement	high = 0xd800 + ( ch >> 10 & 0x3ff )	1511:4:31931:31965	6250414	2	True				
ANR	6250828	AssignmentExpression	high = 0xd800 + ( ch >> 10 & 0x3ff )		6250414	0		=			
ANR	6250829	Identifier	high		6250414	0					
ANR	6250830	AdditiveExpression	0xd800 + ( ch >> 10 & 0x3ff )		6250414	1		+			
ANR	6250831	PrimaryExpression	0xd800		6250414	0					
ANR	6250832	BitAndExpression	ch >> 10 & 0x3ff		6250414	1		&			
ANR	6250833	ShiftExpression	ch >> 10		6250414	0		>>			
ANR	6250834	Identifier	ch		6250414	0					
ANR	6250835	PrimaryExpression	10		6250414	1					
ANR	6250836	PrimaryExpression	0x3ff		6250414	1					
ANR	6250837	ExpressionStatement	low = 0xdc00 + ( ch & 0x3ff )	1512:4:31971:31998	6250414	3	True				
ANR	6250838	AssignmentExpression	low = 0xdc00 + ( ch & 0x3ff )		6250414	0		=			
ANR	6250839	Identifier	low		6250414	0					
ANR	6250840	AdditiveExpression	0xdc00 + ( ch & 0x3ff )		6250414	1		+			
ANR	6250841	PrimaryExpression	0xdc00		6250414	0					
ANR	6250842	BitAndExpression	ch & 0x3ff		6250414	1		&			
ANR	6250843	Identifier	ch		6250414	0					
ANR	6250844	PrimaryExpression	0x3ff		6250414	1					
ANR	6250845	ExpressionStatement	* q ++ = '\\\\'	1513:4:32004:32015	6250414	4	True				
ANR	6250846	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250847	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250848	UnaryOperator	*		6250414	0					
ANR	6250849	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250850	Identifier	q		6250414	0					
ANR	6250851	IncDec	++		6250414	1					
ANR	6250852	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250853	ExpressionStatement	* q ++ = 'u'	1514:4:32021:32031	6250414	5	True				
ANR	6250854	AssignmentExpression	* q ++ = 'u'		6250414	0		=			
ANR	6250855	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250856	UnaryOperator	*		6250414	0					
ANR	6250857	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250858	Identifier	q		6250414	0					
ANR	6250859	IncDec	++		6250414	1					
ANR	6250860	PrimaryExpression	'u'		6250414	1					
ANR	6250861	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		6250414	6					
ANR	6250862	ForInit	i = 2 ;	1515:9:32042:32047	6250414	0	True				
ANR	6250863	AssignmentExpression	i = 2		6250414	0		=			
ANR	6250864	Identifier	i		6250414	0					
ANR	6250865	PrimaryExpression	2		6250414	1					
ANR	6250866	Condition	i >= 0	1515:16:32049:32054	6250414	1	True				
ANR	6250867	RelationalExpression	i >= 0		6250414	0		>=			
ANR	6250868	Identifier	i		6250414	0					
ANR	6250869	PrimaryExpression	0		6250414	1					
ANR	6250870	AssignmentExpression	i -= 2	1515:24:32057:32062	6250414	2	True	-=			
ANR	6250871	Identifier	i		6250414	0					
ANR	6250872	PrimaryExpression	2		6250414	1					
ANR	6250873	CompoundStatement		82:32:1566:1566	6250414	3					
ANR	6250874	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"	1516:5:32072:32124	6250414	0	True				
ANR	6250875	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"		6250414	0		=			
ANR	6250876	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250877	UnaryOperator	*		6250414	0					
ANR	6250878	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250879	Identifier	q		6250414	0					
ANR	6250880	IncDec	++		6250414	1					
ANR	6250881	ArrayIndexing	"""0123456789abcdef"" [ high >> 4 * ( i + 1 ) & 0xf ]"		6250414	1					
ANR	6250882	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250883	BitAndExpression	high >> 4 * ( i + 1 ) & 0xf		6250414	1		&			
ANR	6250884	ShiftExpression	high >> 4 * ( i + 1 )		6250414	0		>>			
ANR	6250885	Identifier	high		6250414	0					
ANR	6250886	MultiplicativeExpression	4 * ( i + 1 )		6250414	1		*			
ANR	6250887	PrimaryExpression	4		6250414	0					
ANR	6250888	AdditiveExpression	i + 1		6250414	1		+			
ANR	6250889	Identifier	i		6250414	0					
ANR	6250890	PrimaryExpression	1		6250414	1					
ANR	6250891	PrimaryExpression	0xf		6250414	1					
ANR	6250892	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ high >> 4 * i & 0xf ]"	1517:5:32131:32177	6250414	1	True				
ANR	6250893	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ high >> 4 * i & 0xf ]"		6250414	0		=			
ANR	6250894	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250895	UnaryOperator	*		6250414	0					
ANR	6250896	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250897	Identifier	q		6250414	0					
ANR	6250898	IncDec	++		6250414	1					
ANR	6250899	ArrayIndexing	"""0123456789abcdef"" [ high >> 4 * i & 0xf ]"		6250414	1					
ANR	6250900	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250901	BitAndExpression	high >> 4 * i & 0xf		6250414	1		&			
ANR	6250902	ShiftExpression	high >> 4 * i		6250414	0		>>			
ANR	6250903	Identifier	high		6250414	0					
ANR	6250904	MultiplicativeExpression	4 * i		6250414	1		*			
ANR	6250905	PrimaryExpression	4		6250414	0					
ANR	6250906	Identifier	i		6250414	1					
ANR	6250907	PrimaryExpression	0xf		6250414	1					
ANR	6250908	ExpressionStatement	* q ++ = '\\\\'	1519:4:32189:32200	6250414	7	True				
ANR	6250909	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6250910	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250911	UnaryOperator	*		6250414	0					
ANR	6250912	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250913	Identifier	q		6250414	0					
ANR	6250914	IncDec	++		6250414	1					
ANR	6250915	PrimaryExpression	'\\\\'		6250414	1					
ANR	6250916	ExpressionStatement	* q ++ = 'u'	1520:4:32206:32216	6250414	8	True				
ANR	6250917	AssignmentExpression	* q ++ = 'u'		6250414	0		=			
ANR	6250918	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250919	UnaryOperator	*		6250414	0					
ANR	6250920	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250921	Identifier	q		6250414	0					
ANR	6250922	IncDec	++		6250414	1					
ANR	6250923	PrimaryExpression	'u'		6250414	1					
ANR	6250924	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		6250414	9					
ANR	6250925	ForInit	i = 2 ;	1521:9:32227:32232	6250414	0	True				
ANR	6250926	AssignmentExpression	i = 2		6250414	0		=			
ANR	6250927	Identifier	i		6250414	0					
ANR	6250928	PrimaryExpression	2		6250414	1					
ANR	6250929	Condition	i >= 0	1521:16:32234:32239	6250414	1	True				
ANR	6250930	RelationalExpression	i >= 0		6250414	0		>=			
ANR	6250931	Identifier	i		6250414	0					
ANR	6250932	PrimaryExpression	0		6250414	1					
ANR	6250933	AssignmentExpression	i -= 2	1521:24:32242:32247	6250414	2	True	-=			
ANR	6250934	Identifier	i		6250414	0					
ANR	6250935	PrimaryExpression	2		6250414	1					
ANR	6250936	CompoundStatement		88:32:1751:1751	6250414	3					
ANR	6250937	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"	1522:5:32257:32308	6250414	0	True				
ANR	6250938	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"		6250414	0		=			
ANR	6250939	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250940	UnaryOperator	*		6250414	0					
ANR	6250941	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250942	Identifier	q		6250414	0					
ANR	6250943	IncDec	++		6250414	1					
ANR	6250944	ArrayIndexing	"""0123456789abcdef"" [ low >> 4 * ( i + 1 ) & 0xf ]"		6250414	1					
ANR	6250945	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250946	BitAndExpression	low >> 4 * ( i + 1 ) & 0xf		6250414	1		&			
ANR	6250947	ShiftExpression	low >> 4 * ( i + 1 )		6250414	0		>>			
ANR	6250948	Identifier	low		6250414	0					
ANR	6250949	MultiplicativeExpression	4 * ( i + 1 )		6250414	1		*			
ANR	6250950	PrimaryExpression	4		6250414	0					
ANR	6250951	AdditiveExpression	i + 1		6250414	1		+			
ANR	6250952	Identifier	i		6250414	0					
ANR	6250953	PrimaryExpression	1		6250414	1					
ANR	6250954	PrimaryExpression	0xf		6250414	1					
ANR	6250955	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ low >> 4 * i & 0xf ]"	1523:5:32315:32360	6250414	1	True				
ANR	6250956	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ low >> 4 * i & 0xf ]"		6250414	0		=			
ANR	6250957	UnaryOperationExpression	* q ++		6250414	0					
ANR	6250958	UnaryOperator	*		6250414	0					
ANR	6250959	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6250960	Identifier	q		6250414	0					
ANR	6250961	IncDec	++		6250414	1					
ANR	6250962	ArrayIndexing	"""0123456789abcdef"" [ low >> 4 * i & 0xf ]"		6250414	1					
ANR	6250963	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6250964	BitAndExpression	low >> 4 * i & 0xf		6250414	1		&			
ANR	6250965	ShiftExpression	low >> 4 * i		6250414	0		>>			
ANR	6250966	Identifier	low		6250414	0					
ANR	6250967	MultiplicativeExpression	4 * i		6250414	1		*			
ANR	6250968	PrimaryExpression	4		6250414	0					
ANR	6250969	Identifier	i		6250414	1					
ANR	6250970	PrimaryExpression	0xf		6250414	1					
ANR	6250971	ElseStatement	else		6250414	0					
ANR	6250972	IfStatement	if ( ch_bytes > 1 )		6250414	0					
ANR	6250973	Condition	ch_bytes > 1	1526:13:32386:32397	6250414	0	True				
ANR	6250974	RelationalExpression	ch_bytes > 1		6250414	0		>			
ANR	6250975	Identifier	ch_bytes		6250414	0					
ANR	6250976	PrimaryExpression	1		6250414	1					
ANR	6250977	CompoundStatement		93:27:1901:1901	6250414	1					
ANR	6250978	IfStatement	if ( r_isprint ( ch ) )		6250414	0					
ANR	6250979	Condition	r_isprint ( ch )	1527:7:32409:32422	6250414	0	True				
ANR	6250980	CallExpression	r_isprint ( ch )		6250414	0					
ANR	6250981	Callee	r_isprint		6250414	0					
ANR	6250982	Identifier	r_isprint		6250414	0					
ANR	6250983	ArgumentList	ch		6250414	1					
ANR	6250984	Argument	ch		6250414	0					
ANR	6250985	Identifier	ch		6250414	0					
ANR	6250986	CompoundStatement		94:23:1926:1926	6250414	1					
ANR	6250987	ForStatement	for ( i = 0 ; i < ch_bytes ; i ++ )		6250414	0					
ANR	6250988	ForInit	i = 0 ;	1529:9:32471:32476	6250414	0	True				
ANR	6250989	AssignmentExpression	i = 0		6250414	0		=			
ANR	6250990	Identifier	i		6250414	0					
ANR	6250991	PrimaryExpression	0		6250414	1					
ANR	6250992	Condition	i < ch_bytes	1529:16:32478:32489	6250414	1	True				
ANR	6250993	RelationalExpression	i < ch_bytes		6250414	0		<			
ANR	6250994	Identifier	i		6250414	0					
ANR	6250995	Identifier	ch_bytes		6250414	1					
ANR	6250996	PostIncDecOperationExpression	i ++	1529:30:32492:32494	6250414	2	True				
ANR	6250997	Identifier	i		6250414	0					
ANR	6250998	IncDec	++		6250414	1					
ANR	6250999	CompoundStatement		96:35:1998:1998	6250414	3					
ANR	6251000	ExpressionStatement	* q ++ = * ( p + i )	1530:5:32504:32519	6250414	0	True				
ANR	6251001	AssignmentExpression	* q ++ = * ( p + i )		6250414	0		=			
ANR	6251002	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251003	UnaryOperator	*		6250414	0					
ANR	6251004	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251005	Identifier	q		6250414	0					
ANR	6251006	IncDec	++		6250414	1					
ANR	6251007	UnaryOperationExpression	* ( p + i )		6250414	1					
ANR	6251008	UnaryOperator	*		6250414	0					
ANR	6251009	AdditiveExpression	p + i		6250414	1		+			
ANR	6251010	Identifier	p		6250414	0					
ANR	6251011	Identifier	i		6250414	1					
ANR	6251012	ElseStatement	else		6250414	0					
ANR	6251013	CompoundStatement		99:10:2038:2038	6250414	0					
ANR	6251014	ExpressionStatement	* q ++ = '\\\\'	1533:4:32543:32554	6250414	0	True				
ANR	6251015	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6251016	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251017	UnaryOperator	*		6250414	0					
ANR	6251018	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251019	Identifier	q		6250414	0					
ANR	6251020	IncDec	++		6250414	1					
ANR	6251021	PrimaryExpression	'\\\\'		6250414	1					
ANR	6251022	ExpressionStatement	* q ++ = 'u'	1534:4:32560:32570	6250414	1	True				
ANR	6251023	AssignmentExpression	* q ++ = 'u'		6250414	0		=			
ANR	6251024	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251025	UnaryOperator	*		6250414	0					
ANR	6251026	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251027	Identifier	q		6250414	0					
ANR	6251028	IncDec	++		6250414	1					
ANR	6251029	PrimaryExpression	'u'		6250414	1					
ANR	6251030	ForStatement	for ( i = 2 ; i >= 0 ; i -= 2 )		6250414	2					
ANR	6251031	ForInit	i = 2 ;	1535:9:32581:32586	6250414	0	True				
ANR	6251032	AssignmentExpression	i = 2		6250414	0		=			
ANR	6251033	Identifier	i		6250414	0					
ANR	6251034	PrimaryExpression	2		6250414	1					
ANR	6251035	Condition	i >= 0	1535:16:32588:32593	6250414	1	True				
ANR	6251036	RelationalExpression	i >= 0		6250414	0		>=			
ANR	6251037	Identifier	i		6250414	0					
ANR	6251038	PrimaryExpression	0		6250414	1					
ANR	6251039	AssignmentExpression	i -= 2	1535:24:32596:32601	6250414	2	True	-=			
ANR	6251040	Identifier	i		6250414	0					
ANR	6251041	PrimaryExpression	2		6250414	1					
ANR	6251042	CompoundStatement		102:32:2105:2105	6250414	3					
ANR	6251043	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"	1536:5:32611:32661	6250414	0	True				
ANR	6251044	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		6250414	0		=			
ANR	6251045	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251046	UnaryOperator	*		6250414	0					
ANR	6251047	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251048	Identifier	q		6250414	0					
ANR	6251049	IncDec	++		6250414	1					
ANR	6251050	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * ( i + 1 ) & 0xf ]"		6250414	1					
ANR	6251051	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6251052	BitAndExpression	ch >> 4 * ( i + 1 ) & 0xf		6250414	1		&			
ANR	6251053	ShiftExpression	ch >> 4 * ( i + 1 )		6250414	0		>>			
ANR	6251054	Identifier	ch		6250414	0					
ANR	6251055	MultiplicativeExpression	4 * ( i + 1 )		6250414	1		*			
ANR	6251056	PrimaryExpression	4		6250414	0					
ANR	6251057	AdditiveExpression	i + 1		6250414	1		+			
ANR	6251058	Identifier	i		6250414	0					
ANR	6251059	PrimaryExpression	1		6250414	1					
ANR	6251060	PrimaryExpression	0xf		6250414	1					
ANR	6251061	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"	1537:5:32668:32712	6250414	1	True				
ANR	6251062	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		6250414	0		=			
ANR	6251063	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251064	UnaryOperator	*		6250414	0					
ANR	6251065	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251066	Identifier	q		6250414	0					
ANR	6251067	IncDec	++		6250414	1					
ANR	6251068	ArrayIndexing	"""0123456789abcdef"" [ ch >> 4 * i & 0xf ]"		6250414	1					
ANR	6251069	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6251070	BitAndExpression	ch >> 4 * i & 0xf		6250414	1		&			
ANR	6251071	ShiftExpression	ch >> 4 * i		6250414	0		>>			
ANR	6251072	Identifier	ch		6250414	0					
ANR	6251073	MultiplicativeExpression	4 * i		6250414	1		*			
ANR	6251074	PrimaryExpression	4		6250414	0					
ANR	6251075	Identifier	i		6250414	1					
ANR	6251076	PrimaryExpression	0xf		6250414	1					
ANR	6251077	ElseStatement	else		6250414	0					
ANR	6251078	CompoundStatement		107:9:2235:2235	6250414	0					
ANR	6251079	ExpressionStatement	* q ++ = '\\\\'	1543:3:32867:32878	6250414	0	True				
ANR	6251080	AssignmentExpression	* q ++ = '\\\\'		6250414	0		=			
ANR	6251081	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251082	UnaryOperator	*		6250414	0					
ANR	6251083	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251084	Identifier	q		6250414	0					
ANR	6251085	IncDec	++		6250414	1					
ANR	6251086	PrimaryExpression	'\\\\'		6250414	1					
ANR	6251087	ExpressionStatement	* q ++ = 'x'	1544:3:32883:32893	6250414	1	True				
ANR	6251088	AssignmentExpression	* q ++ = 'x'		6250414	0		=			
ANR	6251089	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251090	UnaryOperator	*		6250414	0					
ANR	6251091	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251092	Identifier	q		6250414	0					
ANR	6251093	IncDec	++		6250414	1					
ANR	6251094	PrimaryExpression	'x'		6250414	1					
ANR	6251095	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"	1545:3:32898:32938	6250414	2	True				
ANR	6251096	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6250414	0		=			
ANR	6251097	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251098	UnaryOperator	*		6250414	0					
ANR	6251099	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251100	Identifier	q		6250414	0					
ANR	6251101	IncDec	++		6250414	1					
ANR	6251102	ArrayIndexing	"""0123456789abcdef"" [ * p >> 4 & 0xf ]"		6250414	1					
ANR	6251103	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6251104	BitAndExpression	* p >> 4 & 0xf		6250414	1		&			
ANR	6251105	ShiftExpression	* p >> 4		6250414	0		>>			
ANR	6251106	UnaryOperationExpression	* p		6250414	0					
ANR	6251107	UnaryOperator	*		6250414	0					
ANR	6251108	Identifier	p		6250414	1					
ANR	6251109	PrimaryExpression	4		6250414	1					
ANR	6251110	PrimaryExpression	0xf		6250414	1					
ANR	6251111	ExpressionStatement	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"	1546:3:32943:32978	6250414	3	True				
ANR	6251112	AssignmentExpression	"* q ++ = ""0123456789abcdef"" [ * p & 0xf ]"		6250414	0		=			
ANR	6251113	UnaryOperationExpression	* q ++		6250414	0					
ANR	6251114	UnaryOperator	*		6250414	0					
ANR	6251115	PostIncDecOperationExpression	q ++		6250414	1					
ANR	6251116	Identifier	q		6250414	0					
ANR	6251117	IncDec	++		6250414	1					
ANR	6251118	ArrayIndexing	"""0123456789abcdef"" [ * p & 0xf ]"		6250414	1					
ANR	6251119	PrimaryExpression	"""0123456789abcdef"""		6250414	0					
ANR	6251120	BitAndExpression	* p & 0xf		6250414	1		&			
ANR	6251121	UnaryOperationExpression	* p		6250414	0					
ANR	6251122	UnaryOperator	*		6250414	0					
ANR	6251123	Identifier	p		6250414	1					
ANR	6251124	PrimaryExpression	0xf		6250414	1					
ANR	6251125	ExpressionStatement	ch_bytes = 1	1547:3:32983:32995	6250414	4	True				
ANR	6251126	AssignmentExpression	ch_bytes = 1		6250414	0		=			
ANR	6251127	Identifier	ch_bytes		6250414	0					
ANR	6251128	PrimaryExpression	1		6250414	1					
ANR	6251129	ExpressionStatement	p += ch_bytes	1549:2:33003:33016	6250414	2	True				
ANR	6251130	AssignmentExpression	p += ch_bytes		6250414	0		+=			
ANR	6251131	Identifier	p		6250414	0					
ANR	6251132	Identifier	ch_bytes		6250414	1					
ANR	6251133	ExpressionStatement	* q = '\\0'	1551:1:33022:33031	6250414	12	True				
ANR	6251134	AssignmentExpression	* q = '\\0'		6250414	0		=			
ANR	6251135	UnaryOperationExpression	* q		6250414	0					
ANR	6251136	UnaryOperator	*		6250414	0					
ANR	6251137	Identifier	q		6250414	1					
ANR	6251138	PrimaryExpression	'\\0'		6250414	1					
ANR	6251139	ReturnStatement	return new_buf ;	1552:1:33034:33048	6250414	13	True				
ANR	6251140	Identifier	new_buf		6250414	0					
ANR	6251141	ReturnType	R_API char *		6250414	1					
ANR	6251142	Identifier	r_str_escape_utf8_for_json		6250414	2					
ANR	6251143	ParameterList	"const char * buf , int buf_size"		6250414	3					
ANR	6251144	Parameter	const char * buf	1434:39:30467:30481	6250414	0	True				
ANR	6251145	ParameterType	const char *		6250414	0					
ANR	6251146	Identifier	buf		6250414	1					
ANR	6251147	Parameter	int buf_size	1434:56:30484:30495	6250414	1	True				
ANR	6251148	ParameterType	int		6250414	0					
ANR	6251149	Identifier	buf_size		6250414	1					
ANR	6251150	CFGEntryNode	ENTRY		6250414		True				
ANR	6251151	CFGExitNode	EXIT		6250414		True				
ANR	6251152	Symbol	IS_PRINTABLE		6250414						
ANR	6251153	Symbol	r_utf8_decode		6250414						
ANR	6251154	Symbol	ch_bytes		6250414						
ANR	6251155	Symbol	* q ++		6250414						
ANR	6251156	Symbol	* high		6250414						
ANR	6251157	Symbol	* ch		6250414						
ANR	6251158	Symbol	& ch		6250414						
ANR	6251159	Symbol	strlen		6250414						
ANR	6251160	Symbol	* ( p + i )		6250414						
ANR	6251161	Symbol	high		6250414						
ANR	6251162	Symbol	new_buf		6250414						
ANR	6251163	Symbol	len		6250414						
ANR	6251164	Symbol	low		6250414						
ANR	6251165	Symbol	end		6250414						
ANR	6251166	Symbol	* * p		6250414						
ANR	6251167	Symbol	malloc		6250414						
ANR	6251168	Symbol	r_isprint		6250414						
ANR	6251169	Symbol	NULL		6250414						
ANR	6251170	Symbol	ch		6250414						
ANR	6251171	Symbol	buf_size		6250414						
ANR	6251172	Symbol	i		6250414						
ANR	6251173	Symbol	p		6250414						
ANR	6251174	Symbol	q		6250414						
ANR	6251175	Symbol	buf		6250414						
ANR	6251176	Symbol	* i		6250414						
ANR	6251177	Symbol	* p		6250414						
ANR	6251178	Symbol	* q		6250414						
ANR	6251179	Symbol	* low		6250414						
ANR	6251180	Function	__str_ansi_length	1555:0:33053:33397							
ANR	6251181	FunctionDef	__str_ansi_length (char const * str)		6251180	0					
ANR	6251182	CompoundStatement		1555:47:33100:33397	6251180	0					
ANR	6251183	IdentifierDeclStatement	int i = 1 ;	1556:1:33103:33112	6251180	0	True				
ANR	6251184	IdentifierDecl	i = 1		6251180	0					
ANR	6251185	IdentifierDeclType	int		6251180	0					
ANR	6251186	Identifier	i		6251180	1					
ANR	6251187	AssignmentExpression	i = 1		6251180	2		=			
ANR	6251188	Identifier	i		6251180	0					
ANR	6251189	PrimaryExpression	1		6251180	1					
ANR	6251190	IfStatement	if ( str [ 0 ] == 0x1b )		6251180	1					
ANR	6251191	Condition	str [ 0 ] == 0x1b	1557:5:33119:33132	6251180	0	True				
ANR	6251192	EqualityExpression	str [ 0 ] == 0x1b		6251180	0		==			
ANR	6251193	ArrayIndexing	str [ 0 ]		6251180	0					
ANR	6251194	Identifier	str		6251180	0					
ANR	6251195	PrimaryExpression	0		6251180	1					
ANR	6251196	PrimaryExpression	0x1b		6251180	1					
ANR	6251197	CompoundStatement		3:21:34:34	6251180	1					
ANR	6251198	IfStatement	if ( str [ 1 ] == '[' )		6251180	0					
ANR	6251199	Condition	str [ 1 ] == '['	1558:6:33143:33155	6251180	0	True				
ANR	6251200	EqualityExpression	str [ 1 ] == '['		6251180	0		==			
ANR	6251201	ArrayIndexing	str [ 1 ]		6251180	0					
ANR	6251202	Identifier	str		6251180	0					
ANR	6251203	PrimaryExpression	1		6251180	1					
ANR	6251204	PrimaryExpression	'['		6251180	1					
ANR	6251205	CompoundStatement		4:21:57:57	6251180	1					
ANR	6251206	ExpressionStatement	i ++	1559:3:33163:33166	6251180	0	True				
ANR	6251207	PostIncDecOperationExpression	i ++		6251180	0					
ANR	6251208	Identifier	i		6251180	0					
ANR	6251209	IncDec	++		6251180	1					
ANR	6251210	WhileStatement	while ( str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K' )		6251180	1					
ANR	6251211	Condition	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'	1560:10:33178:33251	6251180	0	True				
ANR	6251212	AndExpression	str [ i ] && str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		6251180	0		&&			
ANR	6251213	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251214	Identifier	str		6251180	0					
ANR	6251215	Identifier	i		6251180	1					
ANR	6251216	AndExpression	str [ i ] != 'J' && str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		6251180	1		&&			
ANR	6251217	EqualityExpression	str [ i ] != 'J'		6251180	0		!=			
ANR	6251218	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251219	Identifier	str		6251180	0					
ANR	6251220	Identifier	i		6251180	1					
ANR	6251221	PrimaryExpression	'J'		6251180	1					
ANR	6251222	AndExpression	str [ i ] != 'm' && str [ i ] != 'H' && str [ i ] != 'K'		6251180	1		&&			
ANR	6251223	EqualityExpression	str [ i ] != 'm'		6251180	0		!=			
ANR	6251224	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251225	Identifier	str		6251180	0					
ANR	6251226	Identifier	i		6251180	1					
ANR	6251227	PrimaryExpression	'm'		6251180	1					
ANR	6251228	AndExpression	str [ i ] != 'H' && str [ i ] != 'K'		6251180	1		&&			
ANR	6251229	EqualityExpression	str [ i ] != 'H'		6251180	0		!=			
ANR	6251230	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251231	Identifier	str		6251180	0					
ANR	6251232	Identifier	i		6251180	1					
ANR	6251233	PrimaryExpression	'H'		6251180	1					
ANR	6251234	EqualityExpression	str [ i ] != 'K'		6251180	1		!=			
ANR	6251235	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251236	Identifier	str		6251180	0					
ANR	6251237	Identifier	i		6251180	1					
ANR	6251238	PrimaryExpression	'K'		6251180	1					
ANR	6251239	CompoundStatement		6:86:153:153	6251180	1					
ANR	6251240	ExpressionStatement	i ++	1561:4:33260:33263	6251180	0	True				
ANR	6251241	PostIncDecOperationExpression	i ++		6251180	0					
ANR	6251242	Identifier	i		6251180	0					
ANR	6251243	IncDec	++		6251180	1					
ANR	6251244	ElseStatement	else		6251180	0					
ANR	6251245	IfStatement	if ( str [ 1 ] == '#' )		6251180	0					
ANR	6251246	Condition	str [ 1 ] == '#'	1563:13:33283:33295	6251180	0	True				
ANR	6251247	EqualityExpression	str [ 1 ] == '#'		6251180	0		==			
ANR	6251248	ArrayIndexing	str [ 1 ]		6251180	0					
ANR	6251249	Identifier	str		6251180	0					
ANR	6251250	PrimaryExpression	1		6251180	1					
ANR	6251251	PrimaryExpression	'#'		6251180	1					
ANR	6251252	CompoundStatement		9:28:197:197	6251180	1					
ANR	6251253	WhileStatement	while ( str [ i ] && str [ i ] != 'q' )		6251180	0					
ANR	6251254	Condition	str [ i ] && str [ i ] != 'q'	1564:10:33310:33332	6251180	0	True				
ANR	6251255	AndExpression	str [ i ] && str [ i ] != 'q'		6251180	0		&&			
ANR	6251256	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251257	Identifier	str		6251180	0					
ANR	6251258	Identifier	i		6251180	1					
ANR	6251259	EqualityExpression	str [ i ] != 'q'		6251180	1		!=			
ANR	6251260	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251261	Identifier	str		6251180	0					
ANR	6251262	Identifier	i		6251180	1					
ANR	6251263	PrimaryExpression	'q'		6251180	1					
ANR	6251264	CompoundStatement		10:35:234:234	6251180	1					
ANR	6251265	ExpressionStatement	i ++	1565:4:33341:33344	6251180	0	True				
ANR	6251266	PostIncDecOperationExpression	i ++		6251180	0					
ANR	6251267	Identifier	i		6251180	0					
ANR	6251268	IncDec	++		6251180	1					
ANR	6251269	IfStatement	if ( str [ i ] )		6251180	1					
ANR	6251270	Condition	str [ i ]	1568:6:33361:33366	6251180	0	True				
ANR	6251271	ArrayIndexing	str [ i ]		6251180	0					
ANR	6251272	Identifier	str		6251180	0					
ANR	6251273	Identifier	i		6251180	1					
ANR	6251274	CompoundStatement		14:14:268:268	6251180	1					
ANR	6251275	ExpressionStatement	i ++	1569:3:33374:33377	6251180	0	True				
ANR	6251276	PostIncDecOperationExpression	i ++		6251180	0					
ANR	6251277	Identifier	i		6251180	0					
ANR	6251278	IncDec	++		6251180	1					
ANR	6251279	ReturnStatement	return i ;	1572:1:33387:33395	6251180	2	True				
ANR	6251280	Identifier	i		6251180	0					
ANR	6251281	ReturnType	static int		6251180	1					
ANR	6251282	Identifier	__str_ansi_length		6251180	2					
ANR	6251283	ParameterList	char const * str		6251180	3					
ANR	6251284	Parameter	char const * str	1555:30:33083:33097	6251180	0	True				
ANR	6251285	ParameterType	char const *		6251180	0					
ANR	6251286	Identifier	str		6251180	1					
ANR	6251287	CFGEntryNode	ENTRY		6251180		True				
ANR	6251288	CFGExitNode	EXIT		6251180		True				
ANR	6251289	Symbol	str		6251180						
ANR	6251290	Symbol	* i		6251180						
ANR	6251291	Symbol	i		6251180						
ANR	6251292	Symbol	* str		6251180						
ANR	6251293	Function	r_str_ansi_nlen	1576:0:33419:33813							
ANR	6251294	FunctionDef	"r_str_ansi_nlen (const char * str , int slen)"		6251293	0					
ANR	6251295	CompoundStatement		1576:53:33472:33813	6251293	0					
ANR	6251296	IdentifierDeclStatement	"int i = 0 , len = 0 ;"	1577:1:33475:33493	6251293	0	True				
ANR	6251297	IdentifierDecl	i = 0		6251293	0					
ANR	6251298	IdentifierDeclType	int		6251293	0					
ANR	6251299	Identifier	i		6251293	1					
ANR	6251300	AssignmentExpression	i = 0		6251293	2		=			
ANR	6251301	Identifier	i		6251293	0					
ANR	6251302	PrimaryExpression	0		6251293	1					
ANR	6251303	IdentifierDecl	len = 0		6251293	1					
ANR	6251304	IdentifierDeclType	int		6251293	0					
ANR	6251305	Identifier	len		6251293	1					
ANR	6251306	AssignmentExpression	len = 0		6251293	2		=			
ANR	6251307	Identifier	len		6251293	0					
ANR	6251308	PrimaryExpression	0		6251293	1					
ANR	6251309	IfStatement	if ( slen > 0 )		6251293	1					
ANR	6251310	Condition	slen > 0	1578:5:33500:33507	6251293	0	True				
ANR	6251311	RelationalExpression	slen > 0		6251293	0		>			
ANR	6251312	Identifier	slen		6251293	0					
ANR	6251313	PrimaryExpression	0		6251293	1					
ANR	6251314	CompoundStatement		3:15:37:37	6251293	1					
ANR	6251315	WhileStatement	while ( str [ i ] && i < slen )		6251293	0					
ANR	6251316	Condition	str [ i ] && i < slen	1579:9:33521:33538	6251293	0	True				
ANR	6251317	AndExpression	str [ i ] && i < slen		6251293	0		&&			
ANR	6251318	ArrayIndexing	str [ i ]		6251293	0					
ANR	6251319	Identifier	str		6251293	0					
ANR	6251320	Identifier	i		6251293	1					
ANR	6251321	RelationalExpression	i < slen		6251293	1		<			
ANR	6251322	Identifier	i		6251293	0					
ANR	6251323	Identifier	slen		6251293	1					
ANR	6251324	CompoundStatement		5:3:73:112	6251293	1					
ANR	6251325	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1580:3:33546:33585	6251293	0	True				
ANR	6251326	IdentifierDecl	chlen = __str_ansi_length ( str + i )		6251293	0					
ANR	6251327	IdentifierDeclType	int		6251293	0					
ANR	6251328	Identifier	chlen		6251293	1					
ANR	6251329	AssignmentExpression	chlen = __str_ansi_length ( str + i )		6251293	2		=			
ANR	6251330	Identifier	chlen		6251293	0					
ANR	6251331	CallExpression	__str_ansi_length ( str + i )		6251293	1					
ANR	6251332	Callee	__str_ansi_length		6251293	0					
ANR	6251333	Identifier	__str_ansi_length		6251293	0					
ANR	6251334	ArgumentList	str + i		6251293	1					
ANR	6251335	Argument	str + i		6251293	0					
ANR	6251336	AdditiveExpression	str + i		6251293	0		+			
ANR	6251337	Identifier	str		6251293	0					
ANR	6251338	Identifier	i		6251293	1					
ANR	6251339	IfStatement	if ( chlen == 1 )		6251293	1					
ANR	6251340	Condition	chlen == 1	1581:7:33594:33603	6251293	0	True				
ANR	6251341	EqualityExpression	chlen == 1		6251293	0		==			
ANR	6251342	Identifier	chlen		6251293	0					
ANR	6251343	PrimaryExpression	1		6251293	1					
ANR	6251344	CompoundStatement		6:19:133:133	6251293	1					
ANR	6251345	ExpressionStatement	len ++	1582:4:33612:33618	6251293	0	True				
ANR	6251346	PostIncDecOperationExpression	len ++		6251293	0					
ANR	6251347	Identifier	len		6251293	0					
ANR	6251348	IncDec	++		6251293	1					
ANR	6251349	ExpressionStatement	i += chlen	1584:3:33628:33638	6251293	2	True				
ANR	6251350	AssignmentExpression	i += chlen		6251293	0		+=			
ANR	6251351	Identifier	i		6251293	0					
ANR	6251352	Identifier	chlen		6251293	1					
ANR	6251353	ReturnStatement	return len > 0 ? len : 1 ;	1586:2:33646:33669	6251293	1	True				
ANR	6251354	ConditionalExpression	len > 0 ? len : 1		6251293	0					
ANR	6251355	Condition	len > 0		6251293	0					
ANR	6251356	RelationalExpression	len > 0		6251293	0		>			
ANR	6251357	Identifier	len		6251293	0					
ANR	6251358	PrimaryExpression	0		6251293	1					
ANR	6251359	Identifier	len		6251293	1					
ANR	6251360	PrimaryExpression	1		6251293	2					
ANR	6251361	WhileStatement	while ( str [ i ] )		6251293	2					
ANR	6251362	Condition	str [ i ]	1588:8:33682:33687	6251293	0	True				
ANR	6251363	ArrayIndexing	str [ i ]		6251293	0					
ANR	6251364	Identifier	str		6251293	0					
ANR	6251365	Identifier	i		6251293	1					
ANR	6251366	CompoundStatement		14:2:221:260	6251293	1					
ANR	6251367	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1589:2:33694:33733	6251293	0	True				
ANR	6251368	IdentifierDecl	chlen = __str_ansi_length ( str + i )		6251293	0					
ANR	6251369	IdentifierDeclType	int		6251293	0					
ANR	6251370	Identifier	chlen		6251293	1					
ANR	6251371	AssignmentExpression	chlen = __str_ansi_length ( str + i )		6251293	2		=			
ANR	6251372	Identifier	chlen		6251293	0					
ANR	6251373	CallExpression	__str_ansi_length ( str + i )		6251293	1					
ANR	6251374	Callee	__str_ansi_length		6251293	0					
ANR	6251375	Identifier	__str_ansi_length		6251293	0					
ANR	6251376	ArgumentList	str + i		6251293	1					
ANR	6251377	Argument	str + i		6251293	0					
ANR	6251378	AdditiveExpression	str + i		6251293	0		+			
ANR	6251379	Identifier	str		6251293	0					
ANR	6251380	Identifier	i		6251293	1					
ANR	6251381	IfStatement	if ( chlen == 1 )		6251293	1					
ANR	6251382	Condition	chlen == 1	1590:6:33741:33750	6251293	0	True				
ANR	6251383	EqualityExpression	chlen == 1		6251293	0		==			
ANR	6251384	Identifier	chlen		6251293	0					
ANR	6251385	PrimaryExpression	1		6251293	1					
ANR	6251386	CompoundStatement		15:18:280:280	6251293	1					
ANR	6251387	ExpressionStatement	len ++	1591:3:33758:33764	6251293	0	True				
ANR	6251388	PostIncDecOperationExpression	len ++		6251293	0					
ANR	6251389	Identifier	len		6251293	0					
ANR	6251390	IncDec	++		6251293	1					
ANR	6251391	ExpressionStatement	i += chlen	1593:2:33772:33782	6251293	2	True				
ANR	6251392	AssignmentExpression	i += chlen		6251293	0		+=			
ANR	6251393	Identifier	i		6251293	0					
ANR	6251394	Identifier	chlen		6251293	1					
ANR	6251395	ReturnStatement	return len > 0 ? len : 1 ;	1595:1:33788:33811	6251293	3	True				
ANR	6251396	ConditionalExpression	len > 0 ? len : 1		6251293	0					
ANR	6251397	Condition	len > 0		6251293	0					
ANR	6251398	RelationalExpression	len > 0		6251293	0		>			
ANR	6251399	Identifier	len		6251293	0					
ANR	6251400	PrimaryExpression	0		6251293	1					
ANR	6251401	Identifier	len		6251293	1					
ANR	6251402	PrimaryExpression	1		6251293	2					
ANR	6251403	ReturnType	R_API int		6251293	1					
ANR	6251404	Identifier	r_str_ansi_nlen		6251293	2					
ANR	6251405	ParameterList	"const char * str , int slen"		6251293	3					
ANR	6251406	Parameter	const char * str	1576:26:33445:33459	6251293	0	True				
ANR	6251407	ParameterType	const char *		6251293	0					
ANR	6251408	Identifier	str		6251293	1					
ANR	6251409	Parameter	int slen	1576:43:33462:33469	6251293	1	True				
ANR	6251410	ParameterType	int		6251293	0					
ANR	6251411	Identifier	slen		6251293	1					
ANR	6251412	CFGEntryNode	ENTRY		6251293		True				
ANR	6251413	CFGExitNode	EXIT		6251293		True				
ANR	6251414	Symbol	str		6251293						
ANR	6251415	Symbol	* i		6251293						
ANR	6251416	Symbol	chlen		6251293						
ANR	6251417	Symbol	len		6251293						
ANR	6251418	Symbol	slen		6251293						
ANR	6251419	Symbol	i		6251293						
ANR	6251420	Symbol	__str_ansi_length		6251293						
ANR	6251421	Symbol	* str		6251293						
ANR	6251422	Function	r_str_ansi_len	1598:0:33816:33894							
ANR	6251423	FunctionDef	r_str_ansi_len (const char * str)		6251422	0					
ANR	6251424	CompoundStatement		1598:42:33858:33894	6251422	0					
ANR	6251425	ReturnStatement	"return r_str_ansi_nlen ( str , 0 ) ;"	1599:1:33861:33892	6251422	0	True				
ANR	6251426	CallExpression	"r_str_ansi_nlen ( str , 0 )"		6251422	0					
ANR	6251427	Callee	r_str_ansi_nlen		6251422	0					
ANR	6251428	Identifier	r_str_ansi_nlen		6251422	0					
ANR	6251429	ArgumentList	str		6251422	1					
ANR	6251430	Argument	str		6251422	0					
ANR	6251431	Identifier	str		6251422	0					
ANR	6251432	Argument	0		6251422	1					
ANR	6251433	PrimaryExpression	0		6251422	0					
ANR	6251434	ReturnType	R_API int		6251422	1					
ANR	6251435	Identifier	r_str_ansi_len		6251422	2					
ANR	6251436	ParameterList	const char * str		6251422	3					
ANR	6251437	Parameter	const char * str	1598:25:33841:33855	6251422	0	True				
ANR	6251438	ParameterType	const char *		6251422	0					
ANR	6251439	Identifier	str		6251422	1					
ANR	6251440	CFGEntryNode	ENTRY		6251422		True				
ANR	6251441	CFGExitNode	EXIT		6251422		True				
ANR	6251442	Symbol	str		6251422						
ANR	6251443	Symbol	r_str_ansi_nlen		6251422						
ANR	6251444	Function	r_str_nlen	1602:0:33897:34044							
ANR	6251445	FunctionDef	"r_str_nlen (const char * str , int n)"		6251444	0					
ANR	6251446	CompoundStatement		1602:45:33942:34044	6251444	0					
ANR	6251447	IdentifierDeclStatement	int len = 0 ;	1603:1:33945:33956	6251444	0	True				
ANR	6251448	IdentifierDecl	len = 0		6251444	0					
ANR	6251449	IdentifierDeclType	int		6251444	0					
ANR	6251450	Identifier	len		6251444	1					
ANR	6251451	AssignmentExpression	len = 0		6251444	2		=			
ANR	6251452	Identifier	len		6251444	0					
ANR	6251453	PrimaryExpression	0		6251444	1					
ANR	6251454	IfStatement	if ( str )		6251444	1					
ANR	6251455	Condition	str	1604:5:33963:33965	6251444	0	True				
ANR	6251456	Identifier	str		6251444	0					
ANR	6251457	CompoundStatement		3:10:25:25	6251444	1					
ANR	6251458	WhileStatement	while ( * str && n > 0 )		6251444	0					
ANR	6251459	Condition	* str && n > 0	1605:9:33979:33991	6251444	0	True				
ANR	6251460	AndExpression	* str && n > 0		6251444	0		&&			
ANR	6251461	UnaryOperationExpression	* str		6251444	0					
ANR	6251462	UnaryOperator	*		6251444	0					
ANR	6251463	Identifier	str		6251444	1					
ANR	6251464	RelationalExpression	n > 0		6251444	1		>			
ANR	6251465	Identifier	n		6251444	0					
ANR	6251466	PrimaryExpression	0		6251444	1					
ANR	6251467	CompoundStatement		4:24:51:51	6251444	1					
ANR	6251468	ExpressionStatement	len ++	1606:3:33999:34004	6251444	0	True				
ANR	6251469	PostIncDecOperationExpression	len ++		6251444	0					
ANR	6251470	Identifier	len		6251444	0					
ANR	6251471	IncDec	++		6251444	1					
ANR	6251472	ExpressionStatement	str ++	1607:3:34009:34014	6251444	1	True				
ANR	6251473	PostIncDecOperationExpression	str ++		6251444	0					
ANR	6251474	Identifier	str		6251444	0					
ANR	6251475	IncDec	++		6251444	1					
ANR	6251476	ExpressionStatement	n --	1608:3:34019:34022	6251444	2	True				
ANR	6251477	PostIncDecOperationExpression	n --		6251444	0					
ANR	6251478	Identifier	n		6251444	0					
ANR	6251479	IncDec	--		6251444	1					
ANR	6251480	ReturnStatement	return len ;	1611:1:34032:34042	6251444	2	True				
ANR	6251481	Identifier	len		6251444	0					
ANR	6251482	ReturnType	R_API int		6251444	1					
ANR	6251483	Identifier	r_str_nlen		6251444	2					
ANR	6251484	ParameterList	"const char * str , int n"		6251444	3					
ANR	6251485	Parameter	const char * str	1602:21:33918:33932	6251444	0	True				
ANR	6251486	ParameterType	const char *		6251444	0					
ANR	6251487	Identifier	str		6251444	1					
ANR	6251488	Parameter	int n	1602:38:33935:33939	6251444	1	True				
ANR	6251489	ParameterType	int		6251444	0					
ANR	6251490	Identifier	n		6251444	1					
ANR	6251491	CFGEntryNode	ENTRY		6251444		True				
ANR	6251492	CFGExitNode	EXIT		6251444		True				
ANR	6251493	Symbol	str		6251444						
ANR	6251494	Symbol	len		6251444						
ANR	6251495	Symbol	* str		6251444						
ANR	6251496	Symbol	n		6251444						
ANR	6251497	Function	r_str_nlen_w	1616:0:34104:34397							
ANR	6251498	FunctionDef	"r_str_nlen_w (const char * str , int n)"		6251497	0					
ANR	6251499	CompoundStatement		1616:47:34151:34397	6251497	0					
ANR	6251500	IdentifierDeclStatement	int len = 0 ;	1617:1:34154:34165	6251497	0	True				
ANR	6251501	IdentifierDecl	len = 0		6251497	0					
ANR	6251502	IdentifierDeclType	int		6251497	0					
ANR	6251503	Identifier	len		6251497	1					
ANR	6251504	AssignmentExpression	len = 0		6251497	2		=			
ANR	6251505	Identifier	len		6251497	0					
ANR	6251506	PrimaryExpression	0		6251497	1					
ANR	6251507	IfStatement	if ( str )		6251497	1					
ANR	6251508	Condition	str	1618:5:34172:34174	6251497	0	True				
ANR	6251509	Identifier	str		6251497	0					
ANR	6251510	CompoundStatement		3:10:25:25	6251497	1					
ANR	6251511	WhileStatement	while ( * str && n > 0 )		6251497	0					
ANR	6251512	Condition	* str && n > 0	1619:9:34188:34200	6251497	0	True				
ANR	6251513	AndExpression	* str && n > 0		6251497	0		&&			
ANR	6251514	UnaryOperationExpression	* str		6251497	0					
ANR	6251515	UnaryOperator	*		6251497	0					
ANR	6251516	Identifier	str		6251497	1					
ANR	6251517	RelationalExpression	n > 0		6251497	1		>			
ANR	6251518	Identifier	n		6251497	0					
ANR	6251519	PrimaryExpression	0		6251497	1					
ANR	6251520	CompoundStatement		4:24:51:51	6251497	1					
ANR	6251521	ExpressionStatement	len ++	1620:3:34208:34213	6251497	0	True				
ANR	6251522	PostIncDecOperationExpression	len ++		6251497	0					
ANR	6251523	Identifier	len		6251497	0					
ANR	6251524	IncDec	++		6251497	1					
ANR	6251525	ExpressionStatement	str ++	1621:3:34218:34223	6251497	1	True				
ANR	6251526	PostIncDecOperationExpression	str ++		6251497	0					
ANR	6251527	Identifier	str		6251497	0					
ANR	6251528	IncDec	++		6251497	1					
ANR	6251529	IfStatement	if ( ! * str )		6251497	2					
ANR	6251530	Condition	! * str	1622:7:34232:34236	6251497	0	True				
ANR	6251531	UnaryOperationExpression	! * str		6251497	0					
ANR	6251532	UnaryOperator	!		6251497	0					
ANR	6251533	UnaryOperationExpression	* str		6251497	1					
ANR	6251534	UnaryOperator	*		6251497	0					
ANR	6251535	Identifier	str		6251497	1					
ANR	6251536	CompoundStatement		7:14:87:87	6251497	1					
ANR	6251537	IfStatement	if ( n - 2 > 0 )		6251497	0					
ANR	6251538	Condition	n - 2 > 0	1625:8:34295:34303	6251497	0	True				
ANR	6251539	RelationalExpression	n - 2 > 0		6251497	0		>			
ANR	6251540	AdditiveExpression	n - 2		6251497	0		-			
ANR	6251541	Identifier	n		6251497	0					
ANR	6251542	PrimaryExpression	2		6251497	1					
ANR	6251543	PrimaryExpression	0		6251497	1					
ANR	6251544	CompoundStatement		10:19:154:154	6251497	1					
ANR	6251545	IfStatement	if ( str [ 2 ] )		6251497	0					
ANR	6251546	Condition	str [ 2 ]	1626:9:34317:34322	6251497	0	True				
ANR	6251547	ArrayIndexing	str [ 2 ]		6251497	0					
ANR	6251548	Identifier	str		6251497	0					
ANR	6251549	PrimaryExpression	2		6251497	1					
ANR	6251550	CompoundStatement		11:17:173:173	6251497	1					
ANR	6251551	BreakStatement	break ;	1627:6:34333:34338	6251497	0	True				
ANR	6251552	ExpressionStatement	str ++	1630:4:34357:34362	6251497	1	True				
ANR	6251553	PostIncDecOperationExpression	str ++		6251497	0					
ANR	6251554	Identifier	str		6251497	0					
ANR	6251555	IncDec	++		6251497	1					
ANR	6251556	ExpressionStatement	n --	1632:3:34372:34375	6251497	3	True				
ANR	6251557	PostIncDecOperationExpression	n --		6251497	0					
ANR	6251558	Identifier	n		6251497	0					
ANR	6251559	IncDec	--		6251497	1					
ANR	6251560	ReturnStatement	return len ;	1635:1:34385:34395	6251497	2	True				
ANR	6251561	Identifier	len		6251497	0					
ANR	6251562	ReturnType	R_API int		6251497	1					
ANR	6251563	Identifier	r_str_nlen_w		6251497	2					
ANR	6251564	ParameterList	"const char * str , int n"		6251497	3					
ANR	6251565	Parameter	const char * str	1616:23:34127:34141	6251497	0	True				
ANR	6251566	ParameterType	const char *		6251497	0					
ANR	6251567	Identifier	str		6251497	1					
ANR	6251568	Parameter	int n	1616:40:34144:34148	6251497	1	True				
ANR	6251569	ParameterType	int		6251497	0					
ANR	6251570	Identifier	n		6251497	1					
ANR	6251571	CFGEntryNode	ENTRY		6251497		True				
ANR	6251572	CFGExitNode	EXIT		6251497		True				
ANR	6251573	Symbol	str		6251497						
ANR	6251574	Symbol	len		6251497						
ANR	6251575	Symbol	* str		6251497						
ANR	6251576	Symbol	n		6251497						
ANR	6251577	Function	r_str_is_ascii	1638:0:34400:34566							
ANR	6251578	FunctionDef	r_str_is_ascii (const char * str)		6251577	0					
ANR	6251579	CompoundStatement		1638:43:34443:34566	6251577	0					
ANR	6251580	IdentifierDeclStatement	const ut8 * ptr ;	1639:1:34446:34460	6251577	0	True				
ANR	6251581	IdentifierDecl	* ptr		6251577	0					
ANR	6251582	IdentifierDeclType	const ut8 *		6251577	0					
ANR	6251583	Identifier	ptr		6251577	1					
ANR	6251584	ForStatement	for ( ptr = ( const ut8 * ) str ; * ptr ; ptr ++ )		6251577	1					
ANR	6251585	ForInit	ptr = ( const ut8 * ) str ;	1640:6:34468:34490	6251577	0	True				
ANR	6251586	AssignmentExpression	ptr = ( const ut8 * ) str		6251577	0		=			
ANR	6251587	Identifier	ptr		6251577	0					
ANR	6251588	CastExpression	( const ut8 * ) str		6251577	1					
ANR	6251589	CastTarget	const ut8 *		6251577	0					
ANR	6251590	Identifier	str		6251577	1					
ANR	6251591	Condition	* ptr	1640:30:34492:34495	6251577	1	True				
ANR	6251592	UnaryOperationExpression	* ptr		6251577	0					
ANR	6251593	UnaryOperator	*		6251577	0					
ANR	6251594	Identifier	ptr		6251577	1					
ANR	6251595	PostIncDecOperationExpression	ptr ++	1640:36:34498:34502	6251577	2	True				
ANR	6251596	Identifier	ptr		6251577	0					
ANR	6251597	IncDec	++		6251577	1					
ANR	6251598	CompoundStatement		3:43:61:61	6251577	3					
ANR	6251599	IfStatement	if ( * ptr > 0x7f )		6251577	0					
ANR	6251600	Condition	* ptr > 0x7f	1641:6:34513:34523	6251577	0	True				
ANR	6251601	RelationalExpression	* ptr > 0x7f		6251577	0		>			
ANR	6251602	UnaryOperationExpression	* ptr		6251577	0					
ANR	6251603	UnaryOperator	*		6251577	0					
ANR	6251604	Identifier	ptr		6251577	1					
ANR	6251605	PrimaryExpression	0x7f		6251577	1					
ANR	6251606	CompoundStatement		4:19:82:82	6251577	1					
ANR	6251607	ReturnStatement	return false ;	1642:3:34531:34543	6251577	0	True				
ANR	6251608	Identifier	false		6251577	0					
ANR	6251609	ReturnStatement	return true ;	1645:1:34553:34564	6251577	2	True				
ANR	6251610	Identifier	true		6251577	0					
ANR	6251611	ReturnType	R_API bool		6251577	1					
ANR	6251612	Identifier	r_str_is_ascii		6251577	2					
ANR	6251613	ParameterList	const char * str		6251577	3					
ANR	6251614	Parameter	const char * str	1638:26:34426:34440	6251577	0	True				
ANR	6251615	ParameterType	const char *		6251577	0					
ANR	6251616	Identifier	str		6251577	1					
ANR	6251617	CFGEntryNode	ENTRY		6251577		True				
ANR	6251618	CFGExitNode	EXIT		6251577		True				
ANR	6251619	Symbol	str		6251577						
ANR	6251620	Symbol	* ptr		6251577						
ANR	6251621	Symbol	false		6251577						
ANR	6251622	Symbol	true		6251577						
ANR	6251623	Symbol	ptr		6251577						
ANR	6251624	Function	r_str_is_printable	1648:0:34569:34820							
ANR	6251625	FunctionDef	r_str_is_printable (const char * str)		6251624	0					
ANR	6251626	CompoundStatement		1648:46:34615:34820	6251624	0					
ANR	6251627	WhileStatement	while ( * str )		6251624	0					
ANR	6251628	Condition	* str	1649:8:34625:34628	6251624	0	True				
ANR	6251629	UnaryOperationExpression	* str		6251624	0					
ANR	6251630	UnaryOperator	*		6251624	0					
ANR	6251631	Identifier	str		6251624	1					
ANR	6251632	CompoundStatement		3:2:19:81	6251624	1					
ANR	6251633	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1650:2:34635:34697	6251624	0	True				
ANR	6251634	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251624	0					
ANR	6251635	IdentifierDeclType	int		6251624	0					
ANR	6251636	Identifier	ulen		6251624	1					
ANR	6251637	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251624	2		=			
ANR	6251638	Identifier	ulen		6251624	0					
ANR	6251639	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251624	1					
ANR	6251640	Callee	r_utf8_decode		6251624	0					
ANR	6251641	Identifier	r_utf8_decode		6251624	0					
ANR	6251642	ArgumentList	( const ut8 * ) str		6251624	1					
ANR	6251643	Argument	( const ut8 * ) str		6251624	0					
ANR	6251644	CastExpression	( const ut8 * ) str		6251624	0					
ANR	6251645	CastTarget	const ut8 *		6251624	0					
ANR	6251646	Identifier	str		6251624	1					
ANR	6251647	Argument	strlen ( str )		6251624	1					
ANR	6251648	CallExpression	strlen ( str )		6251624	0					
ANR	6251649	Callee	strlen		6251624	0					
ANR	6251650	Identifier	strlen		6251624	0					
ANR	6251651	ArgumentList	str		6251624	1					
ANR	6251652	Argument	str		6251624	0					
ANR	6251653	Identifier	str		6251624	0					
ANR	6251654	Argument	NULL		6251624	2					
ANR	6251655	Identifier	NULL		6251624	0					
ANR	6251656	IfStatement	if ( ulen > 1 )		6251624	1					
ANR	6251657	Condition	ulen > 1	1651:6:34705:34712	6251624	0	True				
ANR	6251658	RelationalExpression	ulen > 1		6251624	0		>			
ANR	6251659	Identifier	ulen		6251624	0					
ANR	6251660	PrimaryExpression	1		6251624	1					
ANR	6251661	CompoundStatement		4:16:99:99	6251624	1					
ANR	6251662	ExpressionStatement	str += ulen	1652:3:34720:34731	6251624	0	True				
ANR	6251663	AssignmentExpression	str += ulen		6251624	0		+=			
ANR	6251664	Identifier	str		6251624	0					
ANR	6251665	Identifier	ulen		6251624	1					
ANR	6251666	ContinueStatement	continue ;	1653:3:34736:34744	6251624	1	True				
ANR	6251667	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		6251624	2					
ANR	6251668	Condition	! IS_PRINTABLE ( * str )	1655:6:34756:34775	6251624	0	True				
ANR	6251669	UnaryOperationExpression	! IS_PRINTABLE ( * str )		6251624	0					
ANR	6251670	UnaryOperator	!		6251624	0					
ANR	6251671	CallExpression	IS_PRINTABLE ( * str )		6251624	1					
ANR	6251672	Callee	IS_PRINTABLE		6251624	0					
ANR	6251673	Identifier	IS_PRINTABLE		6251624	0					
ANR	6251674	ArgumentList	* str		6251624	1					
ANR	6251675	Argument	* str		6251624	0					
ANR	6251676	UnaryOperationExpression	* str		6251624	0					
ANR	6251677	UnaryOperator	*		6251624	0					
ANR	6251678	Identifier	str		6251624	1					
ANR	6251679	CompoundStatement		8:28:162:162	6251624	1					
ANR	6251680	ReturnStatement	return 0 ;	1656:3:34783:34791	6251624	0	True				
ANR	6251681	PrimaryExpression	0		6251624	0					
ANR	6251682	ExpressionStatement	str ++	1658:2:34799:34804	6251624	3	True				
ANR	6251683	PostIncDecOperationExpression	str ++		6251624	0					
ANR	6251684	Identifier	str		6251624	0					
ANR	6251685	IncDec	++		6251624	1					
ANR	6251686	ReturnStatement	return 1 ;	1660:1:34810:34818	6251624	1	True				
ANR	6251687	PrimaryExpression	1		6251624	0					
ANR	6251688	ReturnType	R_API int		6251624	1					
ANR	6251689	Identifier	r_str_is_printable		6251624	2					
ANR	6251690	ParameterList	const char * str		6251624	3					
ANR	6251691	Parameter	const char * str	1648:29:34598:34612	6251624	0	True				
ANR	6251692	ParameterType	const char *		6251624	0					
ANR	6251693	Identifier	str		6251624	1					
ANR	6251694	CFGEntryNode	ENTRY		6251624		True				
ANR	6251695	CFGExitNode	EXIT		6251624		True				
ANR	6251696	Symbol	str		6251624						
ANR	6251697	Symbol	strlen		6251624						
ANR	6251698	Symbol	NULL		6251624						
ANR	6251699	Symbol	IS_PRINTABLE		6251624						
ANR	6251700	Symbol	r_utf8_decode		6251624						
ANR	6251701	Symbol	ulen		6251624						
ANR	6251702	Symbol	* str		6251624						
ANR	6251703	Function	r_str_is_printable_limited	1663:0:34823:35114							
ANR	6251704	FunctionDef	"r_str_is_printable_limited (const char * str , int size)"		6251703	0					
ANR	6251705	CompoundStatement		1663:64:34887:35114	6251703	0					
ANR	6251706	WhileStatement	while ( size > 0 && * str )		6251703	0					
ANR	6251707	Condition	size > 0 && * str	1664:8:34897:34912	6251703	0	True				
ANR	6251708	AndExpression	size > 0 && * str		6251703	0		&&			
ANR	6251709	RelationalExpression	size > 0		6251703	0		>			
ANR	6251710	Identifier	size		6251703	0					
ANR	6251711	PrimaryExpression	0		6251703	1					
ANR	6251712	UnaryOperationExpression	* str		6251703	1					
ANR	6251713	UnaryOperator	*		6251703	0					
ANR	6251714	Identifier	str		6251703	1					
ANR	6251715	CompoundStatement		3:2:31:93	6251703	1					
ANR	6251716	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1665:2:34919:34981	6251703	0	True				
ANR	6251717	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251703	0					
ANR	6251718	IdentifierDeclType	int		6251703	0					
ANR	6251719	Identifier	ulen		6251703	1					
ANR	6251720	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251703	2		=			
ANR	6251721	Identifier	ulen		6251703	0					
ANR	6251722	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251703	1					
ANR	6251723	Callee	r_utf8_decode		6251703	0					
ANR	6251724	Identifier	r_utf8_decode		6251703	0					
ANR	6251725	ArgumentList	( const ut8 * ) str		6251703	1					
ANR	6251726	Argument	( const ut8 * ) str		6251703	0					
ANR	6251727	CastExpression	( const ut8 * ) str		6251703	0					
ANR	6251728	CastTarget	const ut8 *		6251703	0					
ANR	6251729	Identifier	str		6251703	1					
ANR	6251730	Argument	strlen ( str )		6251703	1					
ANR	6251731	CallExpression	strlen ( str )		6251703	0					
ANR	6251732	Callee	strlen		6251703	0					
ANR	6251733	Identifier	strlen		6251703	0					
ANR	6251734	ArgumentList	str		6251703	1					
ANR	6251735	Argument	str		6251703	0					
ANR	6251736	Identifier	str		6251703	0					
ANR	6251737	Argument	NULL		6251703	2					
ANR	6251738	Identifier	NULL		6251703	0					
ANR	6251739	IfStatement	if ( ulen > 1 )		6251703	1					
ANR	6251740	Condition	ulen > 1	1666:6:34989:34996	6251703	0	True				
ANR	6251741	RelationalExpression	ulen > 1		6251703	0		>			
ANR	6251742	Identifier	ulen		6251703	0					
ANR	6251743	PrimaryExpression	1		6251703	1					
ANR	6251744	CompoundStatement		4:16:111:111	6251703	1					
ANR	6251745	ExpressionStatement	str += ulen	1667:3:35004:35015	6251703	0	True				
ANR	6251746	AssignmentExpression	str += ulen		6251703	0		+=			
ANR	6251747	Identifier	str		6251703	0					
ANR	6251748	Identifier	ulen		6251703	1					
ANR	6251749	ContinueStatement	continue ;	1668:3:35020:35028	6251703	1	True				
ANR	6251750	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		6251703	2					
ANR	6251751	Condition	! IS_PRINTABLE ( * str )	1670:6:35040:35059	6251703	0	True				
ANR	6251752	UnaryOperationExpression	! IS_PRINTABLE ( * str )		6251703	0					
ANR	6251753	UnaryOperator	!		6251703	0					
ANR	6251754	CallExpression	IS_PRINTABLE ( * str )		6251703	1					
ANR	6251755	Callee	IS_PRINTABLE		6251703	0					
ANR	6251756	Identifier	IS_PRINTABLE		6251703	0					
ANR	6251757	ArgumentList	* str		6251703	1					
ANR	6251758	Argument	* str		6251703	0					
ANR	6251759	UnaryOperationExpression	* str		6251703	0					
ANR	6251760	UnaryOperator	*		6251703	0					
ANR	6251761	Identifier	str		6251703	1					
ANR	6251762	CompoundStatement		8:28:174:174	6251703	1					
ANR	6251763	ReturnStatement	return 0 ;	1671:3:35067:35075	6251703	0	True				
ANR	6251764	PrimaryExpression	0		6251703	0					
ANR	6251765	ExpressionStatement	str ++	1673:2:35083:35088	6251703	3	True				
ANR	6251766	PostIncDecOperationExpression	str ++		6251703	0					
ANR	6251767	Identifier	str		6251703	0					
ANR	6251768	IncDec	++		6251703	1					
ANR	6251769	ExpressionStatement	size --	1674:2:35092:35098	6251703	4	True				
ANR	6251770	PostIncDecOperationExpression	size --		6251703	0					
ANR	6251771	Identifier	size		6251703	0					
ANR	6251772	IncDec	--		6251703	1					
ANR	6251773	ReturnStatement	return 1 ;	1676:1:35104:35112	6251703	1	True				
ANR	6251774	PrimaryExpression	1		6251703	0					
ANR	6251775	ReturnType	R_API int		6251703	1					
ANR	6251776	Identifier	r_str_is_printable_limited		6251703	2					
ANR	6251777	ParameterList	"const char * str , int size"		6251703	3					
ANR	6251778	Parameter	const char * str	1663:37:34860:34874	6251703	0	True				
ANR	6251779	ParameterType	const char *		6251703	0					
ANR	6251780	Identifier	str		6251703	1					
ANR	6251781	Parameter	int size	1663:54:34877:34884	6251703	1	True				
ANR	6251782	ParameterType	int		6251703	0					
ANR	6251783	Identifier	size		6251703	1					
ANR	6251784	CFGEntryNode	ENTRY		6251703		True				
ANR	6251785	CFGExitNode	EXIT		6251703		True				
ANR	6251786	Symbol	str		6251703						
ANR	6251787	Symbol	strlen		6251703						
ANR	6251788	Symbol	NULL		6251703						
ANR	6251789	Symbol	IS_PRINTABLE		6251703						
ANR	6251790	Symbol	size		6251703						
ANR	6251791	Symbol	r_utf8_decode		6251703						
ANR	6251792	Symbol	ulen		6251703						
ANR	6251793	Symbol	* str		6251703						
ANR	6251794	Function	r_str_is_printable_incl_newlines	1679:0:35117:35451							
ANR	6251795	FunctionDef	r_str_is_printable_incl_newlines (const char * str)		6251794	0					
ANR	6251796	CompoundStatement		1679:61:35178:35451	6251794	0					
ANR	6251797	WhileStatement	while ( * str )		6251794	0					
ANR	6251798	Condition	* str	1680:8:35188:35191	6251794	0	True				
ANR	6251799	UnaryOperationExpression	* str		6251794	0					
ANR	6251800	UnaryOperator	*		6251794	0					
ANR	6251801	Identifier	str		6251794	1					
ANR	6251802	CompoundStatement		3:2:19:81	6251794	1					
ANR	6251803	IdentifierDeclStatement	"int ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL ) ;"	1681:2:35198:35260	6251794	0	True				
ANR	6251804	IdentifierDecl	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251794	0					
ANR	6251805	IdentifierDeclType	int		6251794	0					
ANR	6251806	Identifier	ulen		6251794	1					
ANR	6251807	AssignmentExpression	"ulen = r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251794	2		=			
ANR	6251808	Identifier	ulen		6251794	0					
ANR	6251809	CallExpression	"r_utf8_decode ( ( const ut8 * ) str , strlen ( str ) , NULL )"		6251794	1					
ANR	6251810	Callee	r_utf8_decode		6251794	0					
ANR	6251811	Identifier	r_utf8_decode		6251794	0					
ANR	6251812	ArgumentList	( const ut8 * ) str		6251794	1					
ANR	6251813	Argument	( const ut8 * ) str		6251794	0					
ANR	6251814	CastExpression	( const ut8 * ) str		6251794	0					
ANR	6251815	CastTarget	const ut8 *		6251794	0					
ANR	6251816	Identifier	str		6251794	1					
ANR	6251817	Argument	strlen ( str )		6251794	1					
ANR	6251818	CallExpression	strlen ( str )		6251794	0					
ANR	6251819	Callee	strlen		6251794	0					
ANR	6251820	Identifier	strlen		6251794	0					
ANR	6251821	ArgumentList	str		6251794	1					
ANR	6251822	Argument	str		6251794	0					
ANR	6251823	Identifier	str		6251794	0					
ANR	6251824	Argument	NULL		6251794	2					
ANR	6251825	Identifier	NULL		6251794	0					
ANR	6251826	IfStatement	if ( ulen > 1 )		6251794	1					
ANR	6251827	Condition	ulen > 1	1682:6:35268:35275	6251794	0	True				
ANR	6251828	RelationalExpression	ulen > 1		6251794	0		>			
ANR	6251829	Identifier	ulen		6251794	0					
ANR	6251830	PrimaryExpression	1		6251794	1					
ANR	6251831	CompoundStatement		4:16:99:99	6251794	1					
ANR	6251832	ExpressionStatement	str += ulen	1683:3:35283:35294	6251794	0	True				
ANR	6251833	AssignmentExpression	str += ulen		6251794	0		+=			
ANR	6251834	Identifier	str		6251794	0					
ANR	6251835	Identifier	ulen		6251794	1					
ANR	6251836	ContinueStatement	continue ;	1684:3:35299:35307	6251794	1	True				
ANR	6251837	IfStatement	if ( ! IS_PRINTABLE ( * str ) )		6251794	2					
ANR	6251838	Condition	! IS_PRINTABLE ( * str )	1686:6:35319:35338	6251794	0	True				
ANR	6251839	UnaryOperationExpression	! IS_PRINTABLE ( * str )		6251794	0					
ANR	6251840	UnaryOperator	!		6251794	0					
ANR	6251841	CallExpression	IS_PRINTABLE ( * str )		6251794	1					
ANR	6251842	Callee	IS_PRINTABLE		6251794	0					
ANR	6251843	Identifier	IS_PRINTABLE		6251794	0					
ANR	6251844	ArgumentList	* str		6251794	1					
ANR	6251845	Argument	* str		6251794	0					
ANR	6251846	UnaryOperationExpression	* str		6251794	0					
ANR	6251847	UnaryOperator	*		6251794	0					
ANR	6251848	Identifier	str		6251794	1					
ANR	6251849	CompoundStatement		8:28:162:162	6251794	1					
ANR	6251850	IfStatement	if ( * str != '\\r' && * str != '\\n' && * str != '\\t' )		6251794	0					
ANR	6251851	Condition	* str != '\\r' && * str != '\\n' && * str != '\\t'	1687:7:35350:35393	6251794	0	True				
ANR	6251852	AndExpression	* str != '\\r' && * str != '\\n' && * str != '\\t'		6251794	0		&&			
ANR	6251853	EqualityExpression	* str != '\\r'		6251794	0		!=			
ANR	6251854	UnaryOperationExpression	* str		6251794	0					
ANR	6251855	UnaryOperator	*		6251794	0					
ANR	6251856	Identifier	str		6251794	1					
ANR	6251857	PrimaryExpression	'\\r'		6251794	1					
ANR	6251858	AndExpression	* str != '\\n' && * str != '\\t'		6251794	1		&&			
ANR	6251859	EqualityExpression	* str != '\\n'		6251794	0		!=			
ANR	6251860	UnaryOperationExpression	* str		6251794	0					
ANR	6251861	UnaryOperator	*		6251794	0					
ANR	6251862	Identifier	str		6251794	1					
ANR	6251863	PrimaryExpression	'\\n'		6251794	1					
ANR	6251864	EqualityExpression	* str != '\\t'		6251794	1		!=			
ANR	6251865	UnaryOperationExpression	* str		6251794	0					
ANR	6251866	UnaryOperator	*		6251794	0					
ANR	6251867	Identifier	str		6251794	1					
ANR	6251868	PrimaryExpression	'\\t'		6251794	1					
ANR	6251869	CompoundStatement		9:53:217:217	6251794	1					
ANR	6251870	ReturnStatement	return false ;	1688:4:35402:35414	6251794	0	True				
ANR	6251871	Identifier	false		6251794	0					
ANR	6251872	ExpressionStatement	str ++	1691:2:35427:35432	6251794	3	True				
ANR	6251873	PostIncDecOperationExpression	str ++		6251794	0					
ANR	6251874	Identifier	str		6251794	0					
ANR	6251875	IncDec	++		6251794	1					
ANR	6251876	ReturnStatement	return true ;	1693:1:35438:35449	6251794	1	True				
ANR	6251877	Identifier	true		6251794	0					
ANR	6251878	ReturnType	R_API bool		6251794	1					
ANR	6251879	Identifier	r_str_is_printable_incl_newlines		6251794	2					
ANR	6251880	ParameterList	const char * str		6251794	3					
ANR	6251881	Parameter	const char * str	1679:44:35161:35175	6251794	0	True				
ANR	6251882	ParameterType	const char *		6251794	0					
ANR	6251883	Identifier	str		6251794	1					
ANR	6251884	CFGEntryNode	ENTRY		6251794		True				
ANR	6251885	CFGExitNode	EXIT		6251794		True				
ANR	6251886	Symbol	str		6251794						
ANR	6251887	Symbol	strlen		6251794						
ANR	6251888	Symbol	NULL		6251794						
ANR	6251889	Symbol	IS_PRINTABLE		6251794						
ANR	6251890	Symbol	r_utf8_decode		6251794						
ANR	6251891	Symbol	ulen		6251794						
ANR	6251892	Symbol	false		6251794						
ANR	6251893	Symbol	true		6251794						
ANR	6251894	Symbol	* str		6251794						
ANR	6251895	Function	r_wstr_clen	1697:0:35510:35645							
ANR	6251896	FunctionDef	r_wstr_clen (const char * s)		6251895	0					
ANR	6251897	CompoundStatement		1697:37:35547:35645	6251895	0					
ANR	6251898	IdentifierDeclStatement	int len = 0 ;	1698:1:35550:35561	6251895	0	True				
ANR	6251899	IdentifierDecl	len = 0		6251895	0					
ANR	6251900	IdentifierDeclType	int		6251895	0					
ANR	6251901	Identifier	len		6251895	1					
ANR	6251902	AssignmentExpression	len = 0		6251895	2		=			
ANR	6251903	Identifier	len		6251895	0					
ANR	6251904	PrimaryExpression	0		6251895	1					
ANR	6251905	IfStatement	if ( ! * s ++ )		6251895	1					
ANR	6251906	Condition	! * s ++	1699:5:35568:35572	6251895	0	True				
ANR	6251907	UnaryOperationExpression	! * s ++		6251895	0					
ANR	6251908	UnaryOperator	!		6251895	0					
ANR	6251909	UnaryOperationExpression	* s ++		6251895	1					
ANR	6251910	UnaryOperator	*		6251895	0					
ANR	6251911	PostIncDecOperationExpression	s ++		6251895	1					
ANR	6251912	Identifier	s		6251895	0					
ANR	6251913	IncDec	++		6251895	1					
ANR	6251914	CompoundStatement		3:12:27:27	6251895	1					
ANR	6251915	ReturnStatement	return 0 ;	1700:2:35579:35587	6251895	0	True				
ANR	6251916	PrimaryExpression	0		6251895	0					
ANR	6251917	WhileStatement	while ( * s ++ || * s ++ )		6251895	2					
ANR	6251918	Condition	* s ++ || * s ++	1702:8:35600:35611	6251895	0	True				
ANR	6251919	OrExpression	* s ++ || * s ++		6251895	0		||			
ANR	6251920	UnaryOperationExpression	* s ++		6251895	0					
ANR	6251921	UnaryOperator	*		6251895	0					
ANR	6251922	PostIncDecOperationExpression	s ++		6251895	1					
ANR	6251923	Identifier	s		6251895	0					
ANR	6251924	IncDec	++		6251895	1					
ANR	6251925	UnaryOperationExpression	* s ++		6251895	1					
ANR	6251926	UnaryOperator	*		6251895	0					
ANR	6251927	PostIncDecOperationExpression	s ++		6251895	1					
ANR	6251928	Identifier	s		6251895	0					
ANR	6251929	IncDec	++		6251895	1					
ANR	6251930	CompoundStatement		6:22:66:66	6251895	1					
ANR	6251931	ExpressionStatement	len ++	1703:2:35618:35623	6251895	0	True				
ANR	6251932	PostIncDecOperationExpression	len ++		6251895	0					
ANR	6251933	Identifier	len		6251895	0					
ANR	6251934	IncDec	++		6251895	1					
ANR	6251935	ReturnStatement	return len + 1 ;	1705:1:35629:35643	6251895	3	True				
ANR	6251936	AdditiveExpression	len + 1		6251895	0		+			
ANR	6251937	Identifier	len		6251895	0					
ANR	6251938	PrimaryExpression	1		6251895	1					
ANR	6251939	ReturnType	R_API int		6251895	1					
ANR	6251940	Identifier	r_wstr_clen		6251895	2					
ANR	6251941	ParameterList	const char * s		6251895	3					
ANR	6251942	Parameter	const char * s	1697:22:35532:35544	6251895	0	True				
ANR	6251943	ParameterType	const char *		6251895	0					
ANR	6251944	Identifier	s		6251895	1					
ANR	6251945	CFGEntryNode	ENTRY		6251895		True				
ANR	6251946	CFGExitNode	EXIT		6251895		True				
ANR	6251947	Symbol	* s ++		6251895						
ANR	6251948	Symbol	s		6251895						
ANR	6251949	Symbol	len		6251895						
ANR	6251950	Function	r_str_ansi_chrn	1708:6:35654:35956							
ANR	6251951	FunctionDef	"r_str_ansi_chrn (const char * str , int n)"		6251950	0					
ANR	6251952	CompoundStatement		1708:58:35706:35956	6251950	0					
ANR	6251953	IdentifierDeclStatement	"int len , i , li ;"	1709:1:35709:35723	6251950	0	True				
ANR	6251954	IdentifierDecl	len		6251950	0					
ANR	6251955	IdentifierDeclType	int		6251950	0					
ANR	6251956	Identifier	len		6251950	1					
ANR	6251957	IdentifierDecl	i		6251950	1					
ANR	6251958	IdentifierDeclType	int		6251950	0					
ANR	6251959	Identifier	i		6251950	1					
ANR	6251960	IdentifierDecl	li		6251950	2					
ANR	6251961	IdentifierDeclType	int		6251950	0					
ANR	6251962	Identifier	li		6251950	1					
ANR	6251963	ForStatement	for ( li = i = len = 0 ; str [ i ] && ( n != len ) ; i ++ )		6251950	1					
ANR	6251964	ForInit	li = i = len = 0 ;	1710:6:35731:35747	6251950	0	True				
ANR	6251965	AssignmentExpression	li = i = len = 0		6251950	0		=			
ANR	6251966	Identifier	li		6251950	0					
ANR	6251967	AssignmentExpression	i = len = 0		6251950	1		=			
ANR	6251968	Identifier	i		6251950	0					
ANR	6251969	AssignmentExpression	len = 0		6251950	1		=			
ANR	6251970	Identifier	len		6251950	0					
ANR	6251971	PrimaryExpression	0		6251950	1					
ANR	6251972	Condition	str [ i ] && ( n != len )	1710:24:35749:35768	6251950	1	True				
ANR	6251973	AndExpression	str [ i ] && ( n != len )		6251950	0		&&			
ANR	6251974	ArrayIndexing	str [ i ]		6251950	0					
ANR	6251975	Identifier	str		6251950	0					
ANR	6251976	Identifier	i		6251950	1					
ANR	6251977	EqualityExpression	n != len		6251950	1		!=			
ANR	6251978	Identifier	n		6251950	0					
ANR	6251979	Identifier	len		6251950	1					
ANR	6251980	PostIncDecOperationExpression	i ++	1710:46:35771:35773	6251950	2	True				
ANR	6251981	Identifier	i		6251950	0					
ANR	6251982	IncDec	++		6251950	1					
ANR	6251983	CompoundStatement		4:2:73:112	6251950	3					
ANR	6251984	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1711:2:35780:35819	6251950	0	True				
ANR	6251985	IdentifierDecl	chlen = __str_ansi_length ( str + i )		6251950	0					
ANR	6251986	IdentifierDeclType	int		6251950	0					
ANR	6251987	Identifier	chlen		6251950	1					
ANR	6251988	AssignmentExpression	chlen = __str_ansi_length ( str + i )		6251950	2		=			
ANR	6251989	Identifier	chlen		6251950	0					
ANR	6251990	CallExpression	__str_ansi_length ( str + i )		6251950	1					
ANR	6251991	Callee	__str_ansi_length		6251950	0					
ANR	6251992	Identifier	__str_ansi_length		6251950	0					
ANR	6251993	ArgumentList	str + i		6251950	1					
ANR	6251994	Argument	str + i		6251950	0					
ANR	6251995	AdditiveExpression	str + i		6251950	0		+			
ANR	6251996	Identifier	str		6251950	0					
ANR	6251997	Identifier	i		6251950	1					
ANR	6251998	IfStatement	if ( chlen > 1 )		6251950	1					
ANR	6251999	Condition	chlen > 1	1712:6:35827:35835	6251950	0	True				
ANR	6252000	RelationalExpression	chlen > 1		6251950	0		>			
ANR	6252001	Identifier	chlen		6251950	0					
ANR	6252002	PrimaryExpression	1		6251950	1					
ANR	6252003	CompoundStatement		5:17:131:131	6251950	1					
ANR	6252004	ExpressionStatement	i += chlen - 1	1713:3:35843:35857	6251950	0	True				
ANR	6252005	AssignmentExpression	i += chlen - 1		6251950	0		+=			
ANR	6252006	Identifier	i		6251950	0					
ANR	6252007	AdditiveExpression	chlen - 1		6251950	1		-			
ANR	6252008	Identifier	chlen		6251950	0					
ANR	6252009	PrimaryExpression	1		6251950	1					
ANR	6252010	ElseStatement	else		6251950	0					
ANR	6252011	CompoundStatement		7:9:161:161	6251950	0					
ANR	6252012	IfStatement	if ( ( str [ i ] & 0xc0 ) != 0x80 )		6251950	0					
ANR	6252013	Condition	( str [ i ] & 0xc0 ) != 0x80	1715:7:35877:35899	6251950	0	True				
ANR	6252014	EqualityExpression	( str [ i ] & 0xc0 ) != 0x80		6251950	0		!=			
ANR	6252015	BitAndExpression	str [ i ] & 0xc0		6251950	0		&			
ANR	6252016	ArrayIndexing	str [ i ]		6251950	0					
ANR	6252017	Identifier	str		6251950	0					
ANR	6252018	Identifier	i		6251950	1					
ANR	6252019	PrimaryExpression	0xc0		6251950	1					
ANR	6252020	PrimaryExpression	0x80		6251950	1					
ANR	6252021	CompoundStatement		8:32:195:195	6251950	1					
ANR	6252022	ExpressionStatement	len ++	1716:4:35908:35913	6251950	0	True				
ANR	6252023	PostIncDecOperationExpression	len ++		6251950	0					
ANR	6252024	Identifier	len		6251950	0					
ANR	6252025	IncDec	++		6251950	1					
ANR	6252026	ExpressionStatement	li = i	1718:3:35923:35929	6251950	1	True				
ANR	6252027	AssignmentExpression	li = i		6251950	0		=			
ANR	6252028	Identifier	li		6251950	0					
ANR	6252029	Identifier	i		6251950	1					
ANR	6252030	ReturnStatement	return str + li ;	1721:1:35939:35954	6251950	2	True				
ANR	6252031	AdditiveExpression	str + li		6251950	0		+			
ANR	6252032	Identifier	str		6251950	0					
ANR	6252033	Identifier	li		6251950	1					
ANR	6252034	ReturnType	const char *		6251950	1					
ANR	6252035	Identifier	r_str_ansi_chrn		6251950	2					
ANR	6252036	ParameterList	"const char * str , int n"		6251950	3					
ANR	6252037	Parameter	const char * str	1708:34:35682:35696	6251950	0	True				
ANR	6252038	ParameterType	const char *		6251950	0					
ANR	6252039	Identifier	str		6251950	1					
ANR	6252040	Parameter	int n	1708:51:35699:35703	6251950	1	True				
ANR	6252041	ParameterType	int		6251950	0					
ANR	6252042	Identifier	n		6251950	1					
ANR	6252043	CFGEntryNode	ENTRY		6251950		True				
ANR	6252044	CFGExitNode	EXIT		6251950		True				
ANR	6252045	Symbol	str		6251950						
ANR	6252046	Symbol	* i		6251950						
ANR	6252047	Symbol	chlen		6251950						
ANR	6252048	Symbol	len		6251950						
ANR	6252049	Symbol	i		6251950						
ANR	6252050	Symbol	__str_ansi_length		6251950						
ANR	6252051	Symbol	* str		6251950						
ANR	6252052	Symbol	li		6251950						
ANR	6252053	Symbol	n		6251950						
ANR	6252054	Function	r_str_ansi_filter	1734:0:36290:36982							
ANR	6252055	FunctionDef	"r_str_ansi_filter (char * str , char * * out , int * * cposs , int len)"		6252054	0					
ANR	6252056	CompoundStatement		1734:73:36363:36982	6252054	0					
ANR	6252057	IdentifierDeclStatement	"int i , j , * cps ;"	1735:1:36366:36380	6252054	0	True				
ANR	6252058	IdentifierDecl	i		6252054	0					
ANR	6252059	IdentifierDeclType	int		6252054	0					
ANR	6252060	Identifier	i		6252054	1					
ANR	6252061	IdentifierDecl	j		6252054	1					
ANR	6252062	IdentifierDeclType	int		6252054	0					
ANR	6252063	Identifier	j		6252054	1					
ANR	6252064	IdentifierDecl	* cps		6252054	2					
ANR	6252065	IdentifierDeclType	int *		6252054	0					
ANR	6252066	Identifier	cps		6252054	1					
ANR	6252067	IfStatement	if ( len == 0 )		6252054	1					
ANR	6252068	Condition	len == 0	1737:5:36388:36395	6252054	0	True				
ANR	6252069	EqualityExpression	len == 0		6252054	0		==			
ANR	6252070	Identifier	len		6252054	0					
ANR	6252071	PrimaryExpression	0		6252054	1					
ANR	6252072	CompoundStatement		4:15:34:34	6252054	1					
ANR	6252073	ReturnStatement	return 0 ;	1738:2:36402:36410	6252054	0	True				
ANR	6252074	PrimaryExpression	0		6252054	0					
ANR	6252075	IfStatement	if ( len < 0 )		6252054	2					
ANR	6252076	Condition	len < 0	1740:5:36420:36426	6252054	0	True				
ANR	6252077	RelationalExpression	len < 0		6252054	0		<			
ANR	6252078	Identifier	len		6252054	0					
ANR	6252079	PrimaryExpression	0		6252054	1					
ANR	6252080	CompoundStatement		7:14:65:65	6252054	1					
ANR	6252081	ExpressionStatement	len = strlen ( str )	1741:2:36433:36451	6252054	0	True				
ANR	6252082	AssignmentExpression	len = strlen ( str )		6252054	0		=			
ANR	6252083	Identifier	len		6252054	0					
ANR	6252084	CallExpression	strlen ( str )		6252054	1					
ANR	6252085	Callee	strlen		6252054	0					
ANR	6252086	Identifier	strlen		6252054	0					
ANR	6252087	ArgumentList	str		6252054	1					
ANR	6252088	Argument	str		6252054	0					
ANR	6252089	Identifier	str		6252054	0					
ANR	6252090	IdentifierDeclStatement	char * tmp = malloc ( len + 1 ) ;	1743:1:36457:36485	6252054	3	True				
ANR	6252091	IdentifierDecl	* tmp = malloc ( len + 1 )		6252054	0					
ANR	6252092	IdentifierDeclType	char *		6252054	0					
ANR	6252093	Identifier	tmp		6252054	1					
ANR	6252094	AssignmentExpression	* tmp = malloc ( len + 1 )		6252054	2		=			
ANR	6252095	Identifier	tmp		6252054	0					
ANR	6252096	CallExpression	malloc ( len + 1 )		6252054	1					
ANR	6252097	Callee	malloc		6252054	0					
ANR	6252098	Identifier	malloc		6252054	0					
ANR	6252099	ArgumentList	len + 1		6252054	1					
ANR	6252100	Argument	len + 1		6252054	0					
ANR	6252101	AdditiveExpression	len + 1		6252054	0		+			
ANR	6252102	Identifier	len		6252054	0					
ANR	6252103	PrimaryExpression	1		6252054	1					
ANR	6252104	IfStatement	if ( ! tmp )		6252054	4					
ANR	6252105	Condition	! tmp	1744:5:36492:36495	6252054	0	True				
ANR	6252106	UnaryOperationExpression	! tmp		6252054	0					
ANR	6252107	UnaryOperator	!		6252054	0					
ANR	6252108	Identifier	tmp		6252054	1					
ANR	6252109	CompoundStatement		11:11:134:134	6252054	1					
ANR	6252110	ReturnStatement	return - 1 ;	1745:2:36502:36511	6252054	0	True				
ANR	6252111	UnaryOperationExpression	- 1		6252054	0					
ANR	6252112	UnaryOperator	-		6252054	0					
ANR	6252113	PrimaryExpression	1		6252054	1					
ANR	6252114	ExpressionStatement	"memcpy ( tmp , str , len + 1 )"	1747:1:36517:36543	6252054	5	True				
ANR	6252115	CallExpression	"memcpy ( tmp , str , len + 1 )"		6252054	0					
ANR	6252116	Callee	memcpy		6252054	0					
ANR	6252117	Identifier	memcpy		6252054	0					
ANR	6252118	ArgumentList	tmp		6252054	1					
ANR	6252119	Argument	tmp		6252054	0					
ANR	6252120	Identifier	tmp		6252054	0					
ANR	6252121	Argument	str		6252054	1					
ANR	6252122	Identifier	str		6252054	0					
ANR	6252123	Argument	len + 1		6252054	2					
ANR	6252124	AdditiveExpression	len + 1		6252054	0		+			
ANR	6252125	Identifier	len		6252054	0					
ANR	6252126	PrimaryExpression	1		6252054	1					
ANR	6252127	ExpressionStatement	"cps = calloc ( len + 1 , sizeof ( int ) )"	1748:1:36546:36582	6252054	6	True				
ANR	6252128	AssignmentExpression	"cps = calloc ( len + 1 , sizeof ( int ) )"		6252054	0		=			
ANR	6252129	Identifier	cps		6252054	0					
ANR	6252130	CallExpression	"calloc ( len + 1 , sizeof ( int ) )"		6252054	1					
ANR	6252131	Callee	calloc		6252054	0					
ANR	6252132	Identifier	calloc		6252054	0					
ANR	6252133	ArgumentList	len + 1		6252054	1					
ANR	6252134	Argument	len + 1		6252054	0					
ANR	6252135	AdditiveExpression	len + 1		6252054	0		+			
ANR	6252136	Identifier	len		6252054	0					
ANR	6252137	PrimaryExpression	1		6252054	1					
ANR	6252138	Argument	sizeof ( int )		6252054	1					
ANR	6252139	SizeofExpression	sizeof ( int )		6252054	0					
ANR	6252140	Sizeof	sizeof		6252054	0					
ANR	6252141	SizeofOperand	int		6252054	1					
ANR	6252142	IfStatement	if ( ! cps )		6252054	7					
ANR	6252143	Condition	! cps	1749:5:36589:36592	6252054	0	True				
ANR	6252144	UnaryOperationExpression	! cps		6252054	0					
ANR	6252145	UnaryOperator	!		6252054	0					
ANR	6252146	Identifier	cps		6252054	1					
ANR	6252147	CompoundStatement		16:11:231:231	6252054	1					
ANR	6252148	ExpressionStatement	free ( tmp )	1750:2:36599:36609	6252054	0	True				
ANR	6252149	CallExpression	free ( tmp )		6252054	0					
ANR	6252150	Callee	free		6252054	0					
ANR	6252151	Identifier	free		6252054	0					
ANR	6252152	ArgumentList	tmp		6252054	1					
ANR	6252153	Argument	tmp		6252054	0					
ANR	6252154	Identifier	tmp		6252054	0					
ANR	6252155	ReturnStatement	return - 1 ;	1751:2:36613:36622	6252054	1	True				
ANR	6252156	UnaryOperationExpression	- 1		6252054	0					
ANR	6252157	UnaryOperator	-		6252054	0					
ANR	6252158	PrimaryExpression	1		6252054	1					
ANR	6252159	ForStatement	for ( i = j = 0 ; i < len ; i ++ )		6252054	8					
ANR	6252160	ForInit	i = j = 0 ;	1754:6:36634:36643	6252054	0	True				
ANR	6252161	AssignmentExpression	i = j = 0		6252054	0		=			
ANR	6252162	Identifier	i		6252054	0					
ANR	6252163	AssignmentExpression	j = 0		6252054	1		=			
ANR	6252164	Identifier	j		6252054	0					
ANR	6252165	PrimaryExpression	0		6252054	1					
ANR	6252166	Condition	i < len	1754:17:36645:36651	6252054	1	True				
ANR	6252167	RelationalExpression	i < len		6252054	0		<			
ANR	6252168	Identifier	i		6252054	0					
ANR	6252169	Identifier	len		6252054	1					
ANR	6252170	PostIncDecOperationExpression	i ++	1754:26:36654:36656	6252054	2	True				
ANR	6252171	Identifier	i		6252054	0					
ANR	6252172	IncDec	++		6252054	1					
ANR	6252173	CompoundStatement		21:31:295:295	6252054	3					
ANR	6252174	IfStatement	if ( tmp [ i ] == 0x1b )		6252054	0					
ANR	6252175	Condition	tmp [ i ] == 0x1b	1755:6:36667:36680	6252054	0	True				
ANR	6252176	EqualityExpression	tmp [ i ] == 0x1b		6252054	0		==			
ANR	6252177	ArrayIndexing	tmp [ i ]		6252054	0					
ANR	6252178	Identifier	tmp		6252054	0					
ANR	6252179	Identifier	i		6252054	1					
ANR	6252180	PrimaryExpression	0x1b		6252054	1					
ANR	6252181	CompoundStatement		23:3:324:363	6252054	1					
ANR	6252182	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	1756:3:36688:36727	6252054	0	True				
ANR	6252183	IdentifierDecl	chlen = __str_ansi_length ( str + i )		6252054	0					
ANR	6252184	IdentifierDeclType	int		6252054	0					
ANR	6252185	Identifier	chlen		6252054	1					
ANR	6252186	AssignmentExpression	chlen = __str_ansi_length ( str + i )		6252054	2		=			
ANR	6252187	Identifier	chlen		6252054	0					
ANR	6252188	CallExpression	__str_ansi_length ( str + i )		6252054	1					
ANR	6252189	Callee	__str_ansi_length		6252054	0					
ANR	6252190	Identifier	__str_ansi_length		6252054	0					
ANR	6252191	ArgumentList	str + i		6252054	1					
ANR	6252192	Argument	str + i		6252054	0					
ANR	6252193	AdditiveExpression	str + i		6252054	0		+			
ANR	6252194	Identifier	str		6252054	0					
ANR	6252195	Identifier	i		6252054	1					
ANR	6252196	IfStatement	if ( chlen > 1 )		6252054	1					
ANR	6252197	Condition	chlen > 1	1757:7:36736:36744	6252054	0	True				
ANR	6252198	RelationalExpression	chlen > 1		6252054	0		>			
ANR	6252199	Identifier	chlen		6252054	0					
ANR	6252200	PrimaryExpression	1		6252054	1					
ANR	6252201	CompoundStatement		24:18:383:383	6252054	1					
ANR	6252202	ExpressionStatement	i += chlen	1758:4:36753:36763	6252054	0	True				
ANR	6252203	AssignmentExpression	i += chlen		6252054	0		+=			
ANR	6252204	Identifier	i		6252054	0					
ANR	6252205	Identifier	chlen		6252054	1					
ANR	6252206	ExpressionStatement	i --	1759:4:36769:36772	6252054	1	True				
ANR	6252207	PostIncDecOperationExpression	i --		6252054	0					
ANR	6252208	Identifier	i		6252054	0					
ANR	6252209	IncDec	--		6252054	1					
ANR	6252210	ElseStatement	else		6252054	0					
ANR	6252211	CompoundStatement		28:9:424:424	6252054	0					
ANR	6252212	ExpressionStatement	str [ j ] = tmp [ i ]	1762:3:36793:36808	6252054	0	True				
ANR	6252213	AssignmentExpression	str [ j ] = tmp [ i ]		6252054	0		=			
ANR	6252214	ArrayIndexing	str [ j ]		6252054	0					
ANR	6252215	Identifier	str		6252054	0					
ANR	6252216	Identifier	j		6252054	1					
ANR	6252217	ArrayIndexing	tmp [ i ]		6252054	1					
ANR	6252218	Identifier	tmp		6252054	0					
ANR	6252219	Identifier	i		6252054	1					
ANR	6252220	ExpressionStatement	cps [ j ] = i	1763:3:36813:36823	6252054	1	True				
ANR	6252221	AssignmentExpression	cps [ j ] = i		6252054	0		=			
ANR	6252222	ArrayIndexing	cps [ j ]		6252054	0					
ANR	6252223	Identifier	cps		6252054	0					
ANR	6252224	Identifier	j		6252054	1					
ANR	6252225	Identifier	i		6252054	1					
ANR	6252226	ExpressionStatement	j ++	1764:3:36828:36831	6252054	2	True				
ANR	6252227	PostIncDecOperationExpression	j ++		6252054	0					
ANR	6252228	Identifier	j		6252054	0					
ANR	6252229	IncDec	++		6252054	1					
ANR	6252230	ExpressionStatement	str [ j ] = tmp [ i ]	1767:1:36841:36856	6252054	9	True				
ANR	6252231	AssignmentExpression	str [ j ] = tmp [ i ]		6252054	0		=			
ANR	6252232	ArrayIndexing	str [ j ]		6252054	0					
ANR	6252233	Identifier	str		6252054	0					
ANR	6252234	Identifier	j		6252054	1					
ANR	6252235	ArrayIndexing	tmp [ i ]		6252054	1					
ANR	6252236	Identifier	tmp		6252054	0					
ANR	6252237	Identifier	i		6252054	1					
ANR	6252238	IfStatement	if ( out )		6252054	10					
ANR	6252239	Condition	out	1769:5:36864:36866	6252054	0	True				
ANR	6252240	Identifier	out		6252054	0					
ANR	6252241	CompoundStatement		36:10:505:505	6252054	1					
ANR	6252242	ExpressionStatement	* out = tmp	1770:2:36873:36883	6252054	0	True				
ANR	6252243	AssignmentExpression	* out = tmp		6252054	0		=			
ANR	6252244	UnaryOperationExpression	* out		6252054	0					
ANR	6252245	UnaryOperator	*		6252054	0					
ANR	6252246	Identifier	out		6252054	1					
ANR	6252247	Identifier	tmp		6252054	1					
ANR	6252248	ElseStatement	else		6252054	0					
ANR	6252249	CompoundStatement		38:8:529:529	6252054	0					
ANR	6252250	ExpressionStatement	free ( tmp )	1772:2:36897:36907	6252054	0	True				
ANR	6252251	CallExpression	free ( tmp )		6252054	0					
ANR	6252252	Callee	free		6252054	0					
ANR	6252253	Identifier	free		6252054	0					
ANR	6252254	ArgumentList	tmp		6252054	1					
ANR	6252255	Argument	tmp		6252054	0					
ANR	6252256	Identifier	tmp		6252054	0					
ANR	6252257	IfStatement	if ( cposs )		6252054	11					
ANR	6252258	Condition	cposs	1775:5:36918:36922	6252054	0	True				
ANR	6252259	Identifier	cposs		6252054	0					
ANR	6252260	CompoundStatement		42:12:561:561	6252054	1					
ANR	6252261	ExpressionStatement	* cposs = cps	1776:2:36929:36941	6252054	0	True				
ANR	6252262	AssignmentExpression	* cposs = cps		6252054	0		=			
ANR	6252263	UnaryOperationExpression	* cposs		6252054	0					
ANR	6252264	UnaryOperator	*		6252054	0					
ANR	6252265	Identifier	cposs		6252054	1					
ANR	6252266	Identifier	cps		6252054	1					
ANR	6252267	ElseStatement	else		6252054	0					
ANR	6252268	CompoundStatement		44:8:587:587	6252054	0					
ANR	6252269	ExpressionStatement	free ( cps )	1778:2:36955:36965	6252054	0	True				
ANR	6252270	CallExpression	free ( cps )		6252054	0					
ANR	6252271	Callee	free		6252054	0					
ANR	6252272	Identifier	free		6252054	0					
ANR	6252273	ArgumentList	cps		6252054	1					
ANR	6252274	Argument	cps		6252054	0					
ANR	6252275	Identifier	cps		6252054	0					
ANR	6252276	ReturnStatement	return j ;	1781:1:36972:36980	6252054	12	True				
ANR	6252277	Identifier	j		6252054	0					
ANR	6252278	ReturnType	R_API int		6252054	1					
ANR	6252279	Identifier	r_str_ansi_filter		6252054	2					
ANR	6252280	ParameterList	"char * str , char * * out , int * * cposs , int len"		6252054	3					
ANR	6252281	Parameter	char * str	1734:28:36318:36326	6252054	0	True				
ANR	6252282	ParameterType	char *		6252054	0					
ANR	6252283	Identifier	str		6252054	1					
ANR	6252284	Parameter	char * * out	1734:39:36329:36338	6252054	1	True				
ANR	6252285	ParameterType	char * *		6252054	0					
ANR	6252286	Identifier	out		6252054	1					
ANR	6252287	Parameter	int * * cposs	1734:51:36341:36351	6252054	2	True				
ANR	6252288	ParameterType	int * *		6252054	0					
ANR	6252289	Identifier	cposs		6252054	1					
ANR	6252290	Parameter	int len	1734:64:36354:36360	6252054	3	True				
ANR	6252291	ParameterType	int		6252054	0					
ANR	6252292	Identifier	len		6252054	1					
ANR	6252293	CFGEntryNode	ENTRY		6252054		True				
ANR	6252294	CFGExitNode	EXIT		6252054		True				
ANR	6252295	Symbol	malloc		6252054						
ANR	6252296	Symbol	* tmp		6252054						
ANR	6252297	Symbol	* cposs		6252054						
ANR	6252298	Symbol	cposs		6252054						
ANR	6252299	Symbol	cps		6252054						
ANR	6252300	Symbol	i		6252054						
ANR	6252301	Symbol	j		6252054						
ANR	6252302	Symbol	calloc		6252054						
ANR	6252303	Symbol	out		6252054						
ANR	6252304	Symbol	* cps		6252054						
ANR	6252305	Symbol	str		6252054						
ANR	6252306	Symbol	strlen		6252054						
ANR	6252307	Symbol	* i		6252054						
ANR	6252308	Symbol	chlen		6252054						
ANR	6252309	Symbol	len		6252054						
ANR	6252310	Symbol	* j		6252054						
ANR	6252311	Symbol	tmp		6252054						
ANR	6252312	Symbol	* out		6252054						
ANR	6252313	Symbol	__str_ansi_length		6252054						
ANR	6252314	Symbol	* str		6252054						
ANR	6252315	Function	r_str_ansi_crop	1784:0:36985:38736							
ANR	6252316	FunctionDef	"r_str_ansi_crop (const char * str , ut32 x , ut32 y , ut32 x2 , ut32 y2)"		6252315	0					
ANR	6252317	CompoundStatement		1784:79:37064:38736	6252315	0					
ANR	6252318	IdentifierDeclStatement	"char * r , * r_end , * ret ;"	1785:1:37067:37088	6252315	0	True				
ANR	6252319	IdentifierDecl	* r		6252315	0					
ANR	6252320	IdentifierDeclType	char *		6252315	0					
ANR	6252321	Identifier	r		6252315	1					
ANR	6252322	IdentifierDecl	* r_end		6252315	1					
ANR	6252323	IdentifierDeclType	char *		6252315	0					
ANR	6252324	Identifier	r_end		6252315	1					
ANR	6252325	IdentifierDecl	* ret		6252315	2					
ANR	6252326	IdentifierDeclType	char *		6252315	0					
ANR	6252327	Identifier	ret		6252315	1					
ANR	6252328	IdentifierDeclStatement	"const char * s , * s_start ;"	1786:1:37091:37114	6252315	1	True				
ANR	6252329	IdentifierDecl	* s		6252315	0					
ANR	6252330	IdentifierDeclType	const char *		6252315	0					
ANR	6252331	Identifier	s		6252315	1					
ANR	6252332	IdentifierDecl	* s_start		6252315	1					
ANR	6252333	IdentifierDeclType	const char *		6252315	0					
ANR	6252334	Identifier	s_start		6252315	1					
ANR	6252335	IdentifierDeclStatement	"size_t r_len , str_len = 0 , nr_of_lines = 0 ;"	1787:1:37117:37159	6252315	2	True				
ANR	6252336	IdentifierDecl	r_len		6252315	0					
ANR	6252337	IdentifierDeclType	size_t		6252315	0					
ANR	6252338	Identifier	r_len		6252315	1					
ANR	6252339	IdentifierDecl	str_len = 0		6252315	1					
ANR	6252340	IdentifierDeclType	size_t		6252315	0					
ANR	6252341	Identifier	str_len		6252315	1					
ANR	6252342	AssignmentExpression	str_len = 0		6252315	2		=			
ANR	6252343	Identifier	str_len		6252315	0					
ANR	6252344	PrimaryExpression	0		6252315	1					
ANR	6252345	IdentifierDecl	nr_of_lines = 0		6252315	2					
ANR	6252346	IdentifierDeclType	size_t		6252315	0					
ANR	6252347	Identifier	nr_of_lines		6252315	1					
ANR	6252348	AssignmentExpression	nr_of_lines = 0		6252315	2		=			
ANR	6252349	Identifier	nr_of_lines		6252315	0					
ANR	6252350	PrimaryExpression	0		6252315	1					
ANR	6252351	IdentifierDeclStatement	"ut32 ch = 0 , cw = 0 ;"	1788:1:37162:37181	6252315	3	True				
ANR	6252352	IdentifierDecl	ch = 0		6252315	0					
ANR	6252353	IdentifierDeclType	ut32		6252315	0					
ANR	6252354	Identifier	ch		6252315	1					
ANR	6252355	AssignmentExpression	ch = 0		6252315	2		=			
ANR	6252356	Identifier	ch		6252315	0					
ANR	6252357	PrimaryExpression	0		6252315	1					
ANR	6252358	IdentifierDecl	cw = 0		6252315	1					
ANR	6252359	IdentifierDeclType	ut32		6252315	0					
ANR	6252360	Identifier	cw		6252315	1					
ANR	6252361	AssignmentExpression	cw = 0		6252315	2		=			
ANR	6252362	Identifier	cw		6252315	0					
ANR	6252363	PrimaryExpression	0		6252315	1					
ANR	6252364	IfStatement	if ( x2 <= x || y2 <= y || ! str )		6252315	4					
ANR	6252365	Condition	x2 <= x || y2 <= y || ! str	1789:5:37188:37213	6252315	0	True				
ANR	6252366	OrExpression	x2 <= x || y2 <= y || ! str		6252315	0		||			
ANR	6252367	RelationalExpression	x2 <= x		6252315	0		<=			
ANR	6252368	Identifier	x2		6252315	0					
ANR	6252369	Identifier	x		6252315	1					
ANR	6252370	OrExpression	y2 <= y || ! str		6252315	1		||			
ANR	6252371	RelationalExpression	y2 <= y		6252315	0		<=			
ANR	6252372	Identifier	y2		6252315	0					
ANR	6252373	Identifier	y		6252315	1					
ANR	6252374	UnaryOperationExpression	! str		6252315	1					
ANR	6252375	UnaryOperator	!		6252315	0					
ANR	6252376	Identifier	str		6252315	1					
ANR	6252377	CompoundStatement		6:33:151:151	6252315	1					
ANR	6252378	ReturnStatement	"return strdup ( """" ) ;"	1790:2:37220:37238	6252315	0	True				
ANR	6252379	CallExpression	"strdup ( """" )"		6252315	0					
ANR	6252380	Callee	strdup		6252315	0					
ANR	6252381	Identifier	strdup		6252315	0					
ANR	6252382	ArgumentList	""""""		6252315	1					
ANR	6252383	Argument	""""""		6252315	0					
ANR	6252384	PrimaryExpression	""""""		6252315	0					
ANR	6252385	ExpressionStatement	s = s_start = str	1792:1:37244:37261	6252315	5	True				
ANR	6252386	AssignmentExpression	s = s_start = str		6252315	0		=			
ANR	6252387	Identifier	s		6252315	0					
ANR	6252388	AssignmentExpression	s_start = str		6252315	1		=			
ANR	6252389	Identifier	s_start		6252315	0					
ANR	6252390	Identifier	str		6252315	1					
ANR	6252391	WhileStatement	while ( * s )		6252315	6					
ANR	6252392	Condition	* s	1793:8:37271:37272	6252315	0	True				
ANR	6252393	UnaryOperationExpression	* s		6252315	0					
ANR	6252394	UnaryOperator	*		6252315	0					
ANR	6252395	Identifier	s		6252315	1					
ANR	6252396	CompoundStatement		10:12:210:210	6252315	1					
ANR	6252397	ExpressionStatement	str_len ++	1794:2:37279:37288	6252315	0	True				
ANR	6252398	PostIncDecOperationExpression	str_len ++		6252315	0					
ANR	6252399	Identifier	str_len		6252315	0					
ANR	6252400	IncDec	++		6252315	1					
ANR	6252401	IfStatement	if ( * s == '\\n' )		6252315	1					
ANR	6252402	Condition	* s == '\\n'	1795:6:37296:37305	6252315	0	True				
ANR	6252403	EqualityExpression	* s == '\\n'		6252315	0		==			
ANR	6252404	UnaryOperationExpression	* s		6252315	0					
ANR	6252405	UnaryOperator	*		6252315	0					
ANR	6252406	Identifier	s		6252315	1					
ANR	6252407	PrimaryExpression	'\\n'		6252315	1					
ANR	6252408	CompoundStatement		12:18:243:243	6252315	1					
ANR	6252409	ExpressionStatement	nr_of_lines ++	1796:3:37313:37326	6252315	0	True				
ANR	6252410	PostIncDecOperationExpression	nr_of_lines ++		6252315	0					
ANR	6252411	Identifier	nr_of_lines		6252315	0					
ANR	6252412	IncDec	++		6252315	1					
ANR	6252413	ExpressionStatement	s ++	1798:2:37334:37337	6252315	2	True				
ANR	6252414	PostIncDecOperationExpression	s ++		6252315	0					
ANR	6252415	Identifier	s		6252315	0					
ANR	6252416	IncDec	++		6252315	1					
ANR	6252417	ExpressionStatement	r_len = str_len + nr_of_lines * strlen ( Color_RESET ) + 1	1800:1:37343:37399	6252315	7	True				
ANR	6252418	AssignmentExpression	r_len = str_len + nr_of_lines * strlen ( Color_RESET ) + 1		6252315	0		=			
ANR	6252419	Identifier	r_len		6252315	0					
ANR	6252420	AdditiveExpression	str_len + nr_of_lines * strlen ( Color_RESET ) + 1		6252315	1		+			
ANR	6252421	Identifier	str_len		6252315	0					
ANR	6252422	AdditiveExpression	nr_of_lines * strlen ( Color_RESET ) + 1		6252315	1		+			
ANR	6252423	MultiplicativeExpression	nr_of_lines * strlen ( Color_RESET )		6252315	0		*			
ANR	6252424	Identifier	nr_of_lines		6252315	0					
ANR	6252425	CallExpression	strlen ( Color_RESET )		6252315	1					
ANR	6252426	Callee	strlen		6252315	0					
ANR	6252427	Identifier	strlen		6252315	0					
ANR	6252428	ArgumentList	Color_RESET		6252315	1					
ANR	6252429	Argument	Color_RESET		6252315	0					
ANR	6252430	Identifier	Color_RESET		6252315	0					
ANR	6252431	PrimaryExpression	1		6252315	1					
ANR	6252432	ExpressionStatement	r = ret = malloc ( r_len )	1801:1:37402:37426	6252315	8	True				
ANR	6252433	AssignmentExpression	r = ret = malloc ( r_len )		6252315	0		=			
ANR	6252434	Identifier	r		6252315	0					
ANR	6252435	AssignmentExpression	ret = malloc ( r_len )		6252315	1		=			
ANR	6252436	Identifier	ret		6252315	0					
ANR	6252437	CallExpression	malloc ( r_len )		6252315	1					
ANR	6252438	Callee	malloc		6252315	0					
ANR	6252439	Identifier	malloc		6252315	0					
ANR	6252440	ArgumentList	r_len		6252315	1					
ANR	6252441	Argument	r_len		6252315	0					
ANR	6252442	Identifier	r_len		6252315	0					
ANR	6252443	IfStatement	if ( ! r )		6252315	9					
ANR	6252444	Condition	! r	1802:5:37433:37434	6252315	0	True				
ANR	6252445	UnaryOperationExpression	! r		6252315	0					
ANR	6252446	UnaryOperator	!		6252315	0					
ANR	6252447	Identifier	r		6252315	1					
ANR	6252448	CompoundStatement		19:9:372:372	6252315	1					
ANR	6252449	ReturnStatement	return NULL ;	1803:2:37441:37452	6252315	0	True				
ANR	6252450	Identifier	NULL		6252315	0					
ANR	6252451	ExpressionStatement	r_end = r + r_len	1805:1:37458:37475	6252315	10	True				
ANR	6252452	AssignmentExpression	r_end = r + r_len		6252315	0		=			
ANR	6252453	Identifier	r_end		6252315	0					
ANR	6252454	AdditiveExpression	r + r_len		6252315	1		+			
ANR	6252455	Identifier	r		6252315	0					
ANR	6252456	Identifier	r_len		6252315	1					
ANR	6252457	WhileStatement	while ( * str )		6252315	11					
ANR	6252458	Condition	* str	1806:8:37485:37488	6252315	0	True				
ANR	6252459	UnaryOperationExpression	* str		6252315	0					
ANR	6252460	UnaryOperator	*		6252315	0					
ANR	6252461	Identifier	str		6252315	1					
ANR	6252462	CompoundStatement		23:14:426:426	6252315	1					
ANR	6252463	IfStatement	if ( ch >= y2 )		6252315	0					
ANR	6252464	Condition	ch >= y2	1808:6:37519:37526	6252315	0	True				
ANR	6252465	RelationalExpression	ch >= y2		6252315	0		>=			
ANR	6252466	Identifier	ch		6252315	0					
ANR	6252467	Identifier	y2		6252315	1					
ANR	6252468	CompoundStatement		25:16:464:464	6252315	1					
ANR	6252469	ExpressionStatement	r --	1809:3:37534:37537	6252315	0	True				
ANR	6252470	PostIncDecOperationExpression	r --		6252315	0					
ANR	6252471	Identifier	r		6252315	0					
ANR	6252472	IncDec	--		6252315	1					
ANR	6252473	BreakStatement	break ;	1810:3:37542:37547	6252315	1	True				
ANR	6252474	IfStatement	if ( * str == '\\n' )		6252315	1					
ANR	6252475	Condition	* str == '\\n'	1813:6:37560:37571	6252315	0	True				
ANR	6252476	EqualityExpression	* str == '\\n'		6252315	0		==			
ANR	6252477	UnaryOperationExpression	* str		6252315	0					
ANR	6252478	UnaryOperator	*		6252315	0					
ANR	6252479	Identifier	str		6252315	1					
ANR	6252480	PrimaryExpression	'\\n'		6252315	1					
ANR	6252481	CompoundStatement		30:20:509:509	6252315	1					
ANR	6252482	IfStatement	if ( ch >= y && ch < y2 )		6252315	0					
ANR	6252483	Condition	ch >= y && ch < y2	1814:7:37583:37600	6252315	0	True				
ANR	6252484	AndExpression	ch >= y && ch < y2		6252315	0		&&			
ANR	6252485	RelationalExpression	ch >= y		6252315	0		>=			
ANR	6252486	Identifier	ch		6252315	0					
ANR	6252487	Identifier	y		6252315	1					
ANR	6252488	RelationalExpression	ch < y2		6252315	1		<			
ANR	6252489	Identifier	ch		6252315	0					
ANR	6252490	Identifier	y2		6252315	1					
ANR	6252491	CompoundStatement		31:27:538:538	6252315	1					
ANR	6252492	Statement	const	1815:4:37609:37613	6252315	0	True				
ANR	6252493	Statement	char	1815:10:37615:37618	6252315	1	True				
ANR	6252494	Statement	*	1815:15:37620:37620	6252315	2	True				
ANR	6252495	Statement	reset	1815:16:37621:37625	6252315	3	True				
ANR	6252496	Statement	=	1815:22:37627:37627	6252315	4	True				
ANR	6252497	Statement	Color_RESET	1815:24:37629:37639	6252315	5	True				
ANR	6252498	ExpressionStatement	"""\\n"""	1815:36:37641:37645	6252315	6	True				
ANR	6252499	PrimaryExpression	"""\\n"""		6252315	0					
ANR	6252500	IfStatement	if ( strlen ( reset ) < ( r_end - r ) )		6252315	7					
ANR	6252501	Condition	strlen ( reset ) < ( r_end - r )	1816:8:37655:37682	6252315	0	True				
ANR	6252502	RelationalExpression	strlen ( reset ) < ( r_end - r )		6252315	0		<			
ANR	6252503	CallExpression	strlen ( reset )		6252315	0					
ANR	6252504	Callee	strlen		6252315	0					
ANR	6252505	Identifier	strlen		6252315	0					
ANR	6252506	ArgumentList	reset		6252315	1					
ANR	6252507	Argument	reset		6252315	0					
ANR	6252508	Identifier	reset		6252315	0					
ANR	6252509	AdditiveExpression	r_end - r		6252315	1		-			
ANR	6252510	Identifier	r_end		6252315	0					
ANR	6252511	Identifier	r		6252315	1					
ANR	6252512	CompoundStatement		34:5:627:666	6252315	1					
ANR	6252513	IdentifierDeclStatement	const int reset_length = strlen ( reset ) ;	1817:5:37692:37731	6252315	0	True				
ANR	6252514	IdentifierDecl	reset_length = strlen ( reset )		6252315	0					
ANR	6252515	IdentifierDeclType	const int		6252315	0					
ANR	6252516	Identifier	reset_length		6252315	1					
ANR	6252517	AssignmentExpression	reset_length = strlen ( reset )		6252315	2		=			
ANR	6252518	Identifier	reset_length		6252315	0					
ANR	6252519	CallExpression	strlen ( reset )		6252315	1					
ANR	6252520	Callee	strlen		6252315	0					
ANR	6252521	Identifier	strlen		6252315	0					
ANR	6252522	ArgumentList	reset		6252315	1					
ANR	6252523	Argument	reset		6252315	0					
ANR	6252524	Identifier	reset		6252315	0					
ANR	6252525	ExpressionStatement	"memcpy ( r , reset , reset_length + 1 )"	1818:5:37738:37773	6252315	1	True				
ANR	6252526	CallExpression	"memcpy ( r , reset , reset_length + 1 )"		6252315	0					
ANR	6252527	Callee	memcpy		6252315	0					
ANR	6252528	Identifier	memcpy		6252315	0					
ANR	6252529	ArgumentList	r		6252315	1					
ANR	6252530	Argument	r		6252315	0					
ANR	6252531	Identifier	r		6252315	0					
ANR	6252532	Argument	reset		6252315	1					
ANR	6252533	Identifier	reset		6252315	0					
ANR	6252534	Argument	reset_length + 1		6252315	2					
ANR	6252535	AdditiveExpression	reset_length + 1		6252315	0		+			
ANR	6252536	Identifier	reset_length		6252315	0					
ANR	6252537	PrimaryExpression	1		6252315	1					
ANR	6252538	ExpressionStatement	r += reset_length	1819:5:37780:37797	6252315	2	True				
ANR	6252539	AssignmentExpression	r += reset_length		6252315	0		+=			
ANR	6252540	Identifier	r		6252315	0					
ANR	6252541	Identifier	reset_length		6252315	1					
ANR	6252542	ExpressionStatement	str ++	1822:3:37813:37818	6252315	1	True				
ANR	6252543	PostIncDecOperationExpression	str ++		6252315	0					
ANR	6252544	Identifier	str		6252315	0					
ANR	6252545	IncDec	++		6252315	1					
ANR	6252546	ExpressionStatement	ch ++	1823:3:37823:37827	6252315	2	True				
ANR	6252547	PostIncDecOperationExpression	ch ++		6252315	0					
ANR	6252548	Identifier	ch		6252315	0					
ANR	6252549	IncDec	++		6252315	1					
ANR	6252550	ExpressionStatement	cw = 0	1824:3:37832:37838	6252315	3	True				
ANR	6252551	AssignmentExpression	cw = 0		6252315	0		=			
ANR	6252552	Identifier	cw		6252315	0					
ANR	6252553	PrimaryExpression	0		6252315	1					
ANR	6252554	ElseStatement	else		6252315	0					
ANR	6252555	CompoundStatement		42:9:784:784	6252315	0					
ANR	6252556	IfStatement	if ( ch >= y && ch < y2 )		6252315	0					
ANR	6252557	Condition	ch >= y && ch < y2	1826:7:37858:37875	6252315	0	True				
ANR	6252558	AndExpression	ch >= y && ch < y2		6252315	0		&&			
ANR	6252559	RelationalExpression	ch >= y		6252315	0		>=			
ANR	6252560	Identifier	ch		6252315	0					
ANR	6252561	Identifier	y		6252315	1					
ANR	6252562	RelationalExpression	ch < y2		6252315	1		<			
ANR	6252563	Identifier	ch		6252315	0					
ANR	6252564	Identifier	y2		6252315	1					
ANR	6252565	CompoundStatement		43:27:813:813	6252315	1					
ANR	6252566	IfStatement	if ( ( * str & 0xc0 ) == 0x80 )		6252315	0					
ANR	6252567	Condition	( * str & 0xc0 ) == 0x80	1827:8:37888:37908	6252315	0	True				
ANR	6252568	EqualityExpression	( * str & 0xc0 ) == 0x80		6252315	0		==			
ANR	6252569	BitAndExpression	* str & 0xc0		6252315	0		&			
ANR	6252570	UnaryOperationExpression	* str		6252315	0					
ANR	6252571	UnaryOperator	*		6252315	0					
ANR	6252572	Identifier	str		6252315	1					
ANR	6252573	PrimaryExpression	0xc0		6252315	1					
ANR	6252574	PrimaryExpression	0x80		6252315	1					
ANR	6252575	CompoundStatement		44:31:846:846	6252315	1					
ANR	6252576	IfStatement	if ( cw > x )		6252315	0					
ANR	6252577	Condition	cw > x	1828:9:37922:37927	6252315	0	True				
ANR	6252578	RelationalExpression	cw > x		6252315	0		>			
ANR	6252579	Identifier	cw		6252315	0					
ANR	6252580	Identifier	x		6252315	1					
ANR	6252581	CompoundStatement		45:17:865:865	6252315	1					
ANR	6252582	ExpressionStatement	* r ++ = * str ++	1829:6:37938:37951	6252315	0	True				
ANR	6252583	AssignmentExpression	* r ++ = * str ++		6252315	0		=			
ANR	6252584	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252585	UnaryOperator	*		6252315	0					
ANR	6252586	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252587	Identifier	r		6252315	0					
ANR	6252588	IncDec	++		6252315	1					
ANR	6252589	UnaryOperationExpression	* str ++		6252315	1					
ANR	6252590	UnaryOperator	*		6252315	0					
ANR	6252591	PostIncDecOperationExpression	str ++		6252315	1					
ANR	6252592	Identifier	str		6252315	0					
ANR	6252593	IncDec	++		6252315	1					
ANR	6252594	ElseStatement	else		6252315	0					
ANR	6252595	CompoundStatement		47:12:900:900	6252315	0					
ANR	6252596	ExpressionStatement	str ++	1831:6:37973:37978	6252315	0	True				
ANR	6252597	PostIncDecOperationExpression	str ++		6252315	0					
ANR	6252598	Identifier	str		6252315	0					
ANR	6252599	IncDec	++		6252315	1					
ANR	6252600	ContinueStatement	continue ;	1833:5:37992:38000	6252315	1	True				
ANR	6252601	IfStatement	"if ( r_str_char_fullwidth ( str , str_len - ( str - s_start ) ) )"		6252315	1					
ANR	6252602	Condition	"r_str_char_fullwidth ( str , str_len - ( str - s_start ) )"	1835:8:38016:38068	6252315	0	True				
ANR	6252603	CallExpression	"r_str_char_fullwidth ( str , str_len - ( str - s_start ) )"		6252315	0					
ANR	6252604	Callee	r_str_char_fullwidth		6252315	0					
ANR	6252605	Identifier	r_str_char_fullwidth		6252315	0					
ANR	6252606	ArgumentList	str		6252315	1					
ANR	6252607	Argument	str		6252315	0					
ANR	6252608	Identifier	str		6252315	0					
ANR	6252609	Argument	str_len - ( str - s_start )		6252315	1					
ANR	6252610	AdditiveExpression	str_len - ( str - s_start )		6252315	0		-			
ANR	6252611	Identifier	str_len		6252315	0					
ANR	6252612	AdditiveExpression	str - s_start		6252315	1		-			
ANR	6252613	Identifier	str		6252315	0					
ANR	6252614	Identifier	s_start		6252315	1					
ANR	6252615	CompoundStatement		52:63:1006:1006	6252315	1					
ANR	6252616	ExpressionStatement	cw ++	1836:5:38078:38082	6252315	0	True				
ANR	6252617	PostIncDecOperationExpression	cw ++		6252315	0					
ANR	6252618	Identifier	cw		6252315	0					
ANR	6252619	IncDec	++		6252315	1					
ANR	6252620	IfStatement	if ( cw == x )		6252315	1					
ANR	6252621	Condition	cw == x	1837:9:38093:38099	6252315	0	True				
ANR	6252622	EqualityExpression	cw == x		6252315	0		==			
ANR	6252623	Identifier	cw		6252315	0					
ANR	6252624	Identifier	x		6252315	1					
ANR	6252625	CompoundStatement		54:18:1037:1037	6252315	1					
ANR	6252626	ExpressionStatement	* r ++ = ' '	1838:6:38110:38120	6252315	0	True				
ANR	6252627	AssignmentExpression	* r ++ = ' '		6252315	0		=			
ANR	6252628	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252629	UnaryOperator	*		6252315	0					
ANR	6252630	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252631	Identifier	r		6252315	0					
ANR	6252632	IncDec	++		6252315	1					
ANR	6252633	PrimaryExpression	' '		6252315	1					
ANR	6252634	ExpressionStatement	str ++	1839:6:38128:38133	6252315	1	True				
ANR	6252635	PostIncDecOperationExpression	str ++		6252315	0					
ANR	6252636	Identifier	str		6252315	0					
ANR	6252637	IncDec	++		6252315	1					
ANR	6252638	ContinueStatement	continue ;	1840:6:38141:38149	6252315	2	True				
ANR	6252639	IfStatement	if ( * str == 0x1b && * ( str + 1 ) == '[' )		6252315	2					
ANR	6252640	Condition	* str == 0x1b && * ( str + 1 ) == '['	1843:8:38172:38204	6252315	0	True				
ANR	6252641	AndExpression	* str == 0x1b && * ( str + 1 ) == '['		6252315	0		&&			
ANR	6252642	EqualityExpression	* str == 0x1b		6252315	0		==			
ANR	6252643	UnaryOperationExpression	* str		6252315	0					
ANR	6252644	UnaryOperator	*		6252315	0					
ANR	6252645	Identifier	str		6252315	1					
ANR	6252646	PrimaryExpression	0x1b		6252315	1					
ANR	6252647	EqualityExpression	* ( str + 1 ) == '['		6252315	1		==			
ANR	6252648	UnaryOperationExpression	* ( str + 1 )		6252315	0					
ANR	6252649	UnaryOperator	*		6252315	0					
ANR	6252650	AdditiveExpression	str + 1		6252315	1		+			
ANR	6252651	Identifier	str		6252315	0					
ANR	6252652	PrimaryExpression	1		6252315	1					
ANR	6252653	PrimaryExpression	'['		6252315	1					
ANR	6252654	CompoundStatement		61:5:1149:1170	6252315	1					
ANR	6252655	IdentifierDeclStatement	const char * ptr = str ;	1844:5:38214:38235	6252315	0	True				
ANR	6252656	IdentifierDecl	* ptr = str		6252315	0					
ANR	6252657	IdentifierDeclType	const char *		6252315	0					
ANR	6252658	Identifier	ptr		6252315	1					
ANR	6252659	AssignmentExpression	* ptr = str		6252315	2		=			
ANR	6252660	Identifier	str		6252315	0					
ANR	6252661	Identifier	str		6252315	1					
ANR	6252662	IfStatement	if ( ( r_end - r ) > 2 )		6252315	1					
ANR	6252663	Condition	( r_end - r ) > 2	1845:9:38246:38260	6252315	0	True				
ANR	6252664	RelationalExpression	( r_end - r ) > 2		6252315	0		>			
ANR	6252665	AdditiveExpression	r_end - r		6252315	0		-			
ANR	6252666	Identifier	r_end		6252315	0					
ANR	6252667	Identifier	r		6252315	1					
ANR	6252668	PrimaryExpression	2		6252315	1					
ANR	6252669	CompoundStatement		62:26:1198:1198	6252315	1					
ANR	6252670	ExpressionStatement	* r ++ = * str ++	1847:6:38299:38312	6252315	0	True				
ANR	6252671	AssignmentExpression	* r ++ = * str ++		6252315	0		=			
ANR	6252672	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252673	UnaryOperator	*		6252315	0					
ANR	6252674	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252675	Identifier	r		6252315	0					
ANR	6252676	IncDec	++		6252315	1					
ANR	6252677	UnaryOperationExpression	* str ++		6252315	1					
ANR	6252678	UnaryOperator	*		6252315	0					
ANR	6252679	PostIncDecOperationExpression	str ++		6252315	1					
ANR	6252680	Identifier	str		6252315	0					
ANR	6252681	IncDec	++		6252315	1					
ANR	6252682	ExpressionStatement	* r ++ = * str ++	1848:6:38320:38333	6252315	1	True				
ANR	6252683	AssignmentExpression	* r ++ = * str ++		6252315	0		=			
ANR	6252684	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252685	UnaryOperator	*		6252315	0					
ANR	6252686	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252687	Identifier	r		6252315	0					
ANR	6252688	IncDec	++		6252315	1					
ANR	6252689	UnaryOperationExpression	* str ++		6252315	1					
ANR	6252690	UnaryOperator	*		6252315	0					
ANR	6252691	PostIncDecOperationExpression	str ++		6252315	1					
ANR	6252692	Identifier	str		6252315	0					
ANR	6252693	IncDec	++		6252315	1					
ANR	6252694	ForStatement	for ( ptr = str ; * ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H' ; ++ ptr )		6252315	2					
ANR	6252695	ForInit	ptr = str ;	1849:11:38346:38355	6252315	0	True				
ANR	6252696	AssignmentExpression	ptr = str		6252315	0		=			
ANR	6252697	Identifier	ptr		6252315	0					
ANR	6252698	Identifier	str		6252315	1					
ANR	6252699	Condition	* ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H'	1849:22:38357:38405	6252315	1	True				
ANR	6252700	AndExpression	* ptr && * ptr != 'J' && * ptr != 'm' && * ptr != 'H'		6252315	0		&&			
ANR	6252701	UnaryOperationExpression	* ptr		6252315	0					
ANR	6252702	UnaryOperator	*		6252315	0					
ANR	6252703	Identifier	ptr		6252315	1					
ANR	6252704	AndExpression	* ptr != 'J' && * ptr != 'm' && * ptr != 'H'		6252315	1		&&			
ANR	6252705	EqualityExpression	* ptr != 'J'		6252315	0		!=			
ANR	6252706	UnaryOperationExpression	* ptr		6252315	0					
ANR	6252707	UnaryOperator	*		6252315	0					
ANR	6252708	Identifier	ptr		6252315	1					
ANR	6252709	PrimaryExpression	'J'		6252315	1					
ANR	6252710	AndExpression	* ptr != 'm' && * ptr != 'H'		6252315	1		&&			
ANR	6252711	EqualityExpression	* ptr != 'm'		6252315	0		!=			
ANR	6252712	UnaryOperationExpression	* ptr		6252315	0					
ANR	6252713	UnaryOperator	*		6252315	0					
ANR	6252714	Identifier	ptr		6252315	1					
ANR	6252715	PrimaryExpression	'm'		6252315	1					
ANR	6252716	EqualityExpression	* ptr != 'H'		6252315	1		!=			
ANR	6252717	UnaryOperationExpression	* ptr		6252315	0					
ANR	6252718	UnaryOperator	*		6252315	0					
ANR	6252719	Identifier	ptr		6252315	1					
ANR	6252720	PrimaryExpression	'H'		6252315	1					
ANR	6252721	UnaryExpression	++ ptr	1849:73:38408:38412	6252315	2	True				
ANR	6252722	IncDec	++		6252315	0					
ANR	6252723	Identifier	ptr		6252315	1					
ANR	6252724	CompoundStatement		66:80:1350:1350	6252315	3					
ANR	6252725	ExpressionStatement	* r ++ = * ptr	1850:7:38424:38435	6252315	0	True				
ANR	6252726	AssignmentExpression	* r ++ = * ptr		6252315	0		=			
ANR	6252727	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252728	UnaryOperator	*		6252315	0					
ANR	6252729	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252730	Identifier	r		6252315	0					
ANR	6252731	IncDec	++		6252315	1					
ANR	6252732	UnaryOperationExpression	* ptr		6252315	1					
ANR	6252733	UnaryOperator	*		6252315	0					
ANR	6252734	Identifier	ptr		6252315	1					
ANR	6252735	ExpressionStatement	* r ++ = * ptr ++	1852:6:38451:38464	6252315	3	True				
ANR	6252736	AssignmentExpression	* r ++ = * ptr ++		6252315	0		=			
ANR	6252737	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252738	UnaryOperator	*		6252315	0					
ANR	6252739	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252740	Identifier	r		6252315	0					
ANR	6252741	IncDec	++		6252315	1					
ANR	6252742	UnaryOperationExpression	* ptr ++		6252315	1					
ANR	6252743	UnaryOperator	*		6252315	0					
ANR	6252744	PostIncDecOperationExpression	ptr ++		6252315	1					
ANR	6252745	Identifier	ptr		6252315	0					
ANR	6252746	IncDec	++		6252315	1					
ANR	6252747	ExpressionStatement	str = ptr	1854:5:38478:38487	6252315	2	True				
ANR	6252748	AssignmentExpression	str = ptr		6252315	0		=			
ANR	6252749	Identifier	str		6252315	0					
ANR	6252750	Identifier	ptr		6252315	1					
ANR	6252751	ContinueStatement	continue ;	1855:5:38494:38502	6252315	3	True				
ANR	6252752	ElseStatement	else		6252315	0					
ANR	6252753	IfStatement	if ( cw >= x && cw < x2 )		6252315	0					
ANR	6252754	Condition	cw >= x && cw < x2	1856:15:38519:38536	6252315	0	True				
ANR	6252755	AndExpression	cw >= x && cw < x2		6252315	0		&&			
ANR	6252756	RelationalExpression	cw >= x		6252315	0		>=			
ANR	6252757	Identifier	cw		6252315	0					
ANR	6252758	Identifier	x		6252315	1					
ANR	6252759	RelationalExpression	cw < x2		6252315	1		<			
ANR	6252760	Identifier	cw		6252315	0					
ANR	6252761	Identifier	x2		6252315	1					
ANR	6252762	CompoundStatement		73:35:1474:1474	6252315	1					
ANR	6252763	ExpressionStatement	* r ++ = * str	1857:5:38546:38557	6252315	0	True				
ANR	6252764	AssignmentExpression	* r ++ = * str		6252315	0		=			
ANR	6252765	UnaryOperationExpression	* r ++		6252315	0					
ANR	6252766	UnaryOperator	*		6252315	0					
ANR	6252767	PostIncDecOperationExpression	r ++		6252315	1					
ANR	6252768	Identifier	r		6252315	0					
ANR	6252769	IncDec	++		6252315	1					
ANR	6252770	UnaryOperationExpression	* str		6252315	1					
ANR	6252771	UnaryOperator	*		6252315	0					
ANR	6252772	Identifier	str		6252315	1					
ANR	6252773	IfStatement	if ( cw >= x2 )		6252315	1					
ANR	6252774	Condition	cw >= x2	1861:7:38605:38612	6252315	0	True				
ANR	6252775	RelationalExpression	cw >= x2		6252315	0		>=			
ANR	6252776	Identifier	cw		6252315	0					
ANR	6252777	Identifier	x2		6252315	1					
ANR	6252778	CompoundStatement		78:17:1550:1550	6252315	1					
ANR	6252779	WhileStatement	while ( * str && * str != '\\n' )		6252315	0					
ANR	6252780	Condition	* str && * str != '\\n'	1862:11:38628:38647	6252315	0	True				
ANR	6252781	AndExpression	* str && * str != '\\n'		6252315	0		&&			
ANR	6252782	UnaryOperationExpression	* str		6252315	0					
ANR	6252783	UnaryOperator	*		6252315	0					
ANR	6252784	Identifier	str		6252315	1					
ANR	6252785	EqualityExpression	* str != '\\n'		6252315	1		!=			
ANR	6252786	UnaryOperationExpression	* str		6252315	0					
ANR	6252787	UnaryOperator	*		6252315	0					
ANR	6252788	Identifier	str		6252315	1					
ANR	6252789	PrimaryExpression	'\\n'		6252315	1					
ANR	6252790	CompoundStatement		79:33:1585:1585	6252315	1					
ANR	6252791	ExpressionStatement	str ++	1863:5:38657:38662	6252315	0	True				
ANR	6252792	PostIncDecOperationExpression	str ++		6252315	0					
ANR	6252793	Identifier	str		6252315	0					
ANR	6252794	IncDec	++		6252315	1					
ANR	6252795	ElseStatement	else		6252315	0					
ANR	6252796	CompoundStatement		82:10:1615:1615	6252315	0					
ANR	6252797	ExpressionStatement	str ++	1866:4:38686:38691	6252315	0	True				
ANR	6252798	PostIncDecOperationExpression	str ++		6252315	0					
ANR	6252799	Identifier	str		6252315	0					
ANR	6252800	IncDec	++		6252315	1					
ANR	6252801	ExpressionStatement	cw ++	1868:3:38701:38705	6252315	2	True				
ANR	6252802	PostIncDecOperationExpression	cw ++		6252315	0					
ANR	6252803	Identifier	cw		6252315	0					
ANR	6252804	IncDec	++		6252315	1					
ANR	6252805	ExpressionStatement	* r = 0	1871:1:38715:38721	6252315	12	True				
ANR	6252806	AssignmentExpression	* r = 0		6252315	0		=			
ANR	6252807	UnaryOperationExpression	* r		6252315	0					
ANR	6252808	UnaryOperator	*		6252315	0					
ANR	6252809	Identifier	r		6252315	1					
ANR	6252810	PrimaryExpression	0		6252315	1					
ANR	6252811	ReturnStatement	return ret ;	1872:1:38724:38734	6252315	13	True				
ANR	6252812	Identifier	ret		6252315	0					
ANR	6252813	ReturnType	R_API char *		6252315	1					
ANR	6252814	Identifier	r_str_ansi_crop		6252315	2					
ANR	6252815	ParameterList	"const char * str , ut32 x , ut32 y , ut32 x2 , ut32 y2"		6252315	3					
ANR	6252816	Parameter	const char * str	1784:28:37013:37027	6252315	0	True				
ANR	6252817	ParameterType	const char *		6252315	0					
ANR	6252818	Identifier	str		6252315	1					
ANR	6252819	Parameter	ut32 x	1784:45:37030:37035	6252315	1	True				
ANR	6252820	ParameterType	ut32		6252315	0					
ANR	6252821	Identifier	x		6252315	1					
ANR	6252822	Parameter	ut32 y	1784:53:37038:37043	6252315	2	True				
ANR	6252823	ParameterType	ut32		6252315	0					
ANR	6252824	Identifier	y		6252315	1					
ANR	6252825	Parameter	ut32 x2	1784:61:37046:37052	6252315	3	True				
ANR	6252826	ParameterType	ut32		6252315	0					
ANR	6252827	Identifier	x2		6252315	1					
ANR	6252828	Parameter	ut32 y2	1784:70:37055:37061	6252315	4	True				
ANR	6252829	ParameterType	ut32		6252315	0					
ANR	6252830	Identifier	y2		6252315	1					
ANR	6252831	CFGEntryNode	ENTRY		6252315		True				
ANR	6252832	CFGExitNode	EXIT		6252315		True				
ANR	6252833	Symbol	s_start		6252315						
ANR	6252834	Symbol	r_str_char_fullwidth		6252315						
ANR	6252835	Symbol	Color_RESET		6252315						
ANR	6252836	Symbol	reset_length		6252315						
ANR	6252837	Symbol	nr_of_lines		6252315						
ANR	6252838	Symbol	strlen		6252315						
ANR	6252839	Symbol	str_len		6252315						
ANR	6252840	Symbol	* ptr		6252315						
ANR	6252841	Symbol	y2		6252315						
ANR	6252842	Symbol	* ( str + 1 )		6252315						
ANR	6252843	Symbol	* str		6252315						
ANR	6252844	Symbol	ret		6252315						
ANR	6252845	Symbol	malloc		6252315						
ANR	6252846	Symbol	NULL		6252315						
ANR	6252847	Symbol	ch		6252315						
ANR	6252848	Symbol	* r ++		6252315						
ANR	6252849	Symbol	* ptr ++		6252315						
ANR	6252850	Symbol	* str ++		6252315						
ANR	6252851	Symbol	ptr		6252315						
ANR	6252852	Symbol	str		6252315						
ANR	6252853	Symbol	r		6252315						
ANR	6252854	Symbol	s		6252315						
ANR	6252855	Symbol	cw		6252315						
ANR	6252856	Symbol	x		6252315						
ANR	6252857	Symbol	y		6252315						
ANR	6252858	Symbol	reset		6252315						
ANR	6252859	Symbol	x2		6252315						
ANR	6252860	Symbol	r_len		6252315						
ANR	6252861	Symbol	strdup		6252315						
ANR	6252862	Symbol	* r		6252315						
ANR	6252863	Symbol	r_end		6252315						
ANR	6252864	Symbol	* s		6252315						
ANR	6252865	Function	r_str_utf8_codepoint	1875:0:38739:39349							
ANR	6252866	FunctionDef	"r_str_utf8_codepoint (const char * s , int left)"		6252865	0					
ANR	6252867	CompoundStatement		1875:57:38796:39349	6252865	0					
ANR	6252868	IdentifierDeclStatement	bool safe = left >= 0 ;	1876:1:38799:38820	6252865	0	True				
ANR	6252869	IdentifierDecl	safe = left >= 0		6252865	0					
ANR	6252870	IdentifierDeclType	bool		6252865	0					
ANR	6252871	Identifier	safe		6252865	1					
ANR	6252872	AssignmentExpression	safe = left >= 0		6252865	2		=			
ANR	6252873	Identifier	safe		6252865	0					
ANR	6252874	RelationalExpression	left >= 0		6252865	1		>=			
ANR	6252875	Identifier	left		6252865	0					
ANR	6252876	PrimaryExpression	0		6252865	1					
ANR	6252877	IfStatement	if ( ( * s & 0x80 ) != 0x80 )		6252865	1					
ANR	6252878	Condition	( * s & 0x80 ) != 0x80	1877:5:38827:38845	6252865	0	True				
ANR	6252879	EqualityExpression	( * s & 0x80 ) != 0x80		6252865	0		!=			
ANR	6252880	BitAndExpression	* s & 0x80		6252865	0		&			
ANR	6252881	UnaryOperationExpression	* s		6252865	0					
ANR	6252882	UnaryOperator	*		6252865	0					
ANR	6252883	Identifier	s		6252865	1					
ANR	6252884	PrimaryExpression	0x80		6252865	1					
ANR	6252885	PrimaryExpression	0x80		6252865	1					
ANR	6252886	CompoundStatement		3:26:51:51	6252865	1					
ANR	6252887	ReturnStatement	return 0 ;	1878:2:38852:38860	6252865	0	True				
ANR	6252888	PrimaryExpression	0		6252865	0					
ANR	6252889	ElseStatement	else		6252865	0					
ANR	6252890	IfStatement	if ( ( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) ) )		6252865	0					
ANR	6252891	Condition	( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) )	1879:12:38874:38925	6252865	0	True				
ANR	6252892	AndExpression	( * s & 0xe0 ) == 0xc0 && ( safe ? left >= 1 : * ( s + 1 ) )		6252865	0		&&			
ANR	6252893	EqualityExpression	( * s & 0xe0 ) == 0xc0		6252865	0		==			
ANR	6252894	BitAndExpression	* s & 0xe0		6252865	0		&			
ANR	6252895	UnaryOperationExpression	* s		6252865	0					
ANR	6252896	UnaryOperator	*		6252865	0					
ANR	6252897	Identifier	s		6252865	1					
ANR	6252898	PrimaryExpression	0xe0		6252865	1					
ANR	6252899	PrimaryExpression	0xc0		6252865	1					
ANR	6252900	ConditionalExpression	safe ? left >= 1 : * ( s + 1 )		6252865	1					
ANR	6252901	Condition	safe		6252865	0					
ANR	6252902	Identifier	safe		6252865	0					
ANR	6252903	RelationalExpression	left >= 1		6252865	1		>=			
ANR	6252904	Identifier	left		6252865	0					
ANR	6252905	PrimaryExpression	1		6252865	1					
ANR	6252906	UnaryOperationExpression	* ( s + 1 )		6252865	2					
ANR	6252907	UnaryOperator	*		6252865	0					
ANR	6252908	AdditiveExpression	s + 1		6252865	1		+			
ANR	6252909	Identifier	s		6252865	0					
ANR	6252910	PrimaryExpression	1		6252865	1					
ANR	6252911	CompoundStatement		5:66:131:131	6252865	1					
ANR	6252912	ReturnStatement	return ( ( * s & 0x1f ) << 6 ) + ( * ( s + 1 ) & 0x3f ) ;	1880:2:38932:38977	6252865	0	True				
ANR	6252913	AdditiveExpression	( ( * s & 0x1f ) << 6 ) + ( * ( s + 1 ) & 0x3f )		6252865	0		+			
ANR	6252914	ShiftExpression	( * s & 0x1f ) << 6		6252865	0		<<			
ANR	6252915	BitAndExpression	* s & 0x1f		6252865	0		&			
ANR	6252916	UnaryOperationExpression	* s		6252865	0					
ANR	6252917	UnaryOperator	*		6252865	0					
ANR	6252918	Identifier	s		6252865	1					
ANR	6252919	PrimaryExpression	0x1f		6252865	1					
ANR	6252920	PrimaryExpression	6		6252865	1					
ANR	6252921	BitAndExpression	* ( s + 1 ) & 0x3f		6252865	1		&			
ANR	6252922	UnaryOperationExpression	* ( s + 1 )		6252865	0					
ANR	6252923	UnaryOperator	*		6252865	0					
ANR	6252924	AdditiveExpression	s + 1		6252865	1		+			
ANR	6252925	Identifier	s		6252865	0					
ANR	6252926	PrimaryExpression	1		6252865	1					
ANR	6252927	PrimaryExpression	0x3f		6252865	1					
ANR	6252928	ElseStatement	else		6252865	0					
ANR	6252929	IfStatement	if ( ( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) ) )		6252865	0					
ANR	6252930	Condition	( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) )	1881:12:38991:39056	6252865	0	True				
ANR	6252931	AndExpression	( * s & 0xf0 ) == 0xe0 && ( safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) ) )		6252865	0		&&			
ANR	6252932	EqualityExpression	( * s & 0xf0 ) == 0xe0		6252865	0		==			
ANR	6252933	BitAndExpression	* s & 0xf0		6252865	0		&			
ANR	6252934	UnaryOperationExpression	* s		6252865	0					
ANR	6252935	UnaryOperator	*		6252865	0					
ANR	6252936	Identifier	s		6252865	1					
ANR	6252937	PrimaryExpression	0xf0		6252865	1					
ANR	6252938	PrimaryExpression	0xe0		6252865	1					
ANR	6252939	ConditionalExpression	safe ? left >= 2 : ( * ( s + 1 ) && * ( s + 2 ) )		6252865	1					
ANR	6252940	Condition	safe		6252865	0					
ANR	6252941	Identifier	safe		6252865	0					
ANR	6252942	RelationalExpression	left >= 2		6252865	1		>=			
ANR	6252943	Identifier	left		6252865	0					
ANR	6252944	PrimaryExpression	2		6252865	1					
ANR	6252945	AndExpression	* ( s + 1 ) && * ( s + 2 )		6252865	2		&&			
ANR	6252946	UnaryOperationExpression	* ( s + 1 )		6252865	0					
ANR	6252947	UnaryOperator	*		6252865	0					
ANR	6252948	AdditiveExpression	s + 1		6252865	1		+			
ANR	6252949	Identifier	s		6252865	0					
ANR	6252950	PrimaryExpression	1		6252865	1					
ANR	6252951	UnaryOperationExpression	* ( s + 2 )		6252865	1					
ANR	6252952	UnaryOperator	*		6252865	0					
ANR	6252953	AdditiveExpression	s + 2		6252865	1		+			
ANR	6252954	Identifier	s		6252865	0					
ANR	6252955	PrimaryExpression	2		6252865	1					
ANR	6252956	CompoundStatement		7:80:262:262	6252865	1					
ANR	6252957	ReturnStatement	return ( ( * s & 0xf ) << 12 ) + ( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f ) ;	1882:2:39063:39135	6252865	0	True				
ANR	6252958	AdditiveExpression	( ( * s & 0xf ) << 12 ) + ( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f )		6252865	0		+			
ANR	6252959	ShiftExpression	( * s & 0xf ) << 12		6252865	0		<<			
ANR	6252960	BitAndExpression	* s & 0xf		6252865	0		&			
ANR	6252961	UnaryOperationExpression	* s		6252865	0					
ANR	6252962	UnaryOperator	*		6252865	0					
ANR	6252963	Identifier	s		6252865	1					
ANR	6252964	PrimaryExpression	0xf		6252865	1					
ANR	6252965	PrimaryExpression	12		6252865	1					
ANR	6252966	AdditiveExpression	( ( * ( s + 1 ) & 0x3f ) << 6 ) + ( * ( s + 2 ) & 0x3f )		6252865	1		+			
ANR	6252967	ShiftExpression	( * ( s + 1 ) & 0x3f ) << 6		6252865	0		<<			
ANR	6252968	BitAndExpression	* ( s + 1 ) & 0x3f		6252865	0		&			
ANR	6252969	UnaryOperationExpression	* ( s + 1 )		6252865	0					
ANR	6252970	UnaryOperator	*		6252865	0					
ANR	6252971	AdditiveExpression	s + 1		6252865	1		+			
ANR	6252972	Identifier	s		6252865	0					
ANR	6252973	PrimaryExpression	1		6252865	1					
ANR	6252974	PrimaryExpression	0x3f		6252865	1					
ANR	6252975	PrimaryExpression	6		6252865	1					
ANR	6252976	BitAndExpression	* ( s + 2 ) & 0x3f		6252865	1		&			
ANR	6252977	UnaryOperationExpression	* ( s + 2 )		6252865	0					
ANR	6252978	UnaryOperator	*		6252865	0					
ANR	6252979	AdditiveExpression	s + 2		6252865	1		+			
ANR	6252980	Identifier	s		6252865	0					
ANR	6252981	PrimaryExpression	2		6252865	1					
ANR	6252982	PrimaryExpression	0x3f		6252865	1					
ANR	6252983	ElseStatement	else		6252865	0					
ANR	6252984	IfStatement	if ( ( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) ) )		6252865	0					
ANR	6252985	Condition	( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) )	1883:12:39149:39226	6252865	0	True				
ANR	6252986	AndExpression	( * s & 0xf8 ) == 0xf0 && ( safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) ) )		6252865	0		&&			
ANR	6252987	EqualityExpression	( * s & 0xf8 ) == 0xf0		6252865	0		==			
ANR	6252988	BitAndExpression	* s & 0xf8		6252865	0		&			
ANR	6252989	UnaryOperationExpression	* s		6252865	0					
ANR	6252990	UnaryOperator	*		6252865	0					
ANR	6252991	Identifier	s		6252865	1					
ANR	6252992	PrimaryExpression	0xf8		6252865	1					
ANR	6252993	PrimaryExpression	0xf0		6252865	1					
ANR	6252994	ConditionalExpression	safe ? left >= 3 : ( * ( s + 1 ) && * ( s + 2 ) && * ( s + 3 ) )		6252865	1					
ANR	6252995	Condition	safe		6252865	0					
ANR	6252996	Identifier	safe		6252865	0					
ANR	6252997	RelationalExpression	left >= 3		6252865	1		>=			
ANR	6252998	Identifier	left		6252865	0					
ANR	6252999	PrimaryExpression	3		6252865	1					
ANR	6253000	AndExpression	* ( s + 1 ) && * ( s + 2 ) && * ( s + 3 )		6252865	2		&&			
ANR	6253001	UnaryOperationExpression	* ( s + 1 )		6252865	0					
ANR	6253002	UnaryOperator	*		6252865	0					
ANR	6253003	AdditiveExpression	s + 1		6252865	1		+			
ANR	6253004	Identifier	s		6252865	0					
ANR	6253005	PrimaryExpression	1		6252865	1					
ANR	6253006	AndExpression	* ( s + 2 ) && * ( s + 3 )		6252865	1		&&			
ANR	6253007	UnaryOperationExpression	* ( s + 2 )		6252865	0					
ANR	6253008	UnaryOperator	*		6252865	0					
ANR	6253009	AdditiveExpression	s + 2		6252865	1		+			
ANR	6253010	Identifier	s		6252865	0					
ANR	6253011	PrimaryExpression	2		6252865	1					
ANR	6253012	UnaryOperationExpression	* ( s + 3 )		6252865	1					
ANR	6253013	UnaryOperator	*		6252865	0					
ANR	6253014	AdditiveExpression	s + 3		6252865	1		+			
ANR	6253015	Identifier	s		6252865	0					
ANR	6253016	PrimaryExpression	3		6252865	1					
ANR	6253017	CompoundStatement		9:92:432:432	6252865	1					
ANR	6253018	ReturnStatement	return ( ( * s & 0x7 ) << 18 ) + ( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f ) ;	1884:2:39233:39333	6252865	0	True				
ANR	6253019	AdditiveExpression	( ( * s & 0x7 ) << 18 ) + ( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		6252865	0		+			
ANR	6253020	ShiftExpression	( * s & 0x7 ) << 18		6252865	0		<<			
ANR	6253021	BitAndExpression	* s & 0x7		6252865	0		&			
ANR	6253022	UnaryOperationExpression	* s		6252865	0					
ANR	6253023	UnaryOperator	*		6252865	0					
ANR	6253024	Identifier	s		6252865	1					
ANR	6253025	PrimaryExpression	0x7		6252865	1					
ANR	6253026	PrimaryExpression	18		6252865	1					
ANR	6253027	AdditiveExpression	( ( * ( s + 1 ) & 0x3f ) << 12 ) + ( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		6252865	1		+			
ANR	6253028	ShiftExpression	( * ( s + 1 ) & 0x3f ) << 12		6252865	0		<<			
ANR	6253029	BitAndExpression	* ( s + 1 ) & 0x3f		6252865	0		&			
ANR	6253030	UnaryOperationExpression	* ( s + 1 )		6252865	0					
ANR	6253031	UnaryOperator	*		6252865	0					
ANR	6253032	AdditiveExpression	s + 1		6252865	1		+			
ANR	6253033	Identifier	s		6252865	0					
ANR	6253034	PrimaryExpression	1		6252865	1					
ANR	6253035	PrimaryExpression	0x3f		6252865	1					
ANR	6253036	PrimaryExpression	12		6252865	1					
ANR	6253037	AdditiveExpression	( ( * ( s + 2 ) & 0x3f ) << 6 ) + ( * ( s + 3 ) & 0x3f )		6252865	1		+			
ANR	6253038	ShiftExpression	( * ( s + 2 ) & 0x3f ) << 6		6252865	0		<<			
ANR	6253039	BitAndExpression	* ( s + 2 ) & 0x3f		6252865	0		&			
ANR	6253040	UnaryOperationExpression	* ( s + 2 )		6252865	0					
ANR	6253041	UnaryOperator	*		6252865	0					
ANR	6253042	AdditiveExpression	s + 2		6252865	1		+			
ANR	6253043	Identifier	s		6252865	0					
ANR	6253044	PrimaryExpression	2		6252865	1					
ANR	6253045	PrimaryExpression	0x3f		6252865	1					
ANR	6253046	PrimaryExpression	6		6252865	1					
ANR	6253047	BitAndExpression	* ( s + 3 ) & 0x3f		6252865	1		&			
ANR	6253048	UnaryOperationExpression	* ( s + 3 )		6252865	0					
ANR	6253049	UnaryOperator	*		6252865	0					
ANR	6253050	AdditiveExpression	s + 3		6252865	1		+			
ANR	6253051	Identifier	s		6252865	0					
ANR	6253052	PrimaryExpression	3		6252865	1					
ANR	6253053	PrimaryExpression	0x3f		6252865	1					
ANR	6253054	ReturnStatement	return 0 ;	1886:1:39339:39347	6252865	2	True				
ANR	6253055	PrimaryExpression	0		6252865	0					
ANR	6253056	ReturnType	R_API int		6252865	1					
ANR	6253057	Identifier	r_str_utf8_codepoint		6252865	2					
ANR	6253058	ParameterList	"const char * s , int left"		6252865	3					
ANR	6253059	Parameter	const char * s	1875:32:38771:38783	6252865	0	True				
ANR	6253060	ParameterType	const char *		6252865	0					
ANR	6253061	Identifier	s		6252865	1					
ANR	6253062	Parameter	int left	1875:47:38786:38793	6252865	1	True				
ANR	6253063	ParameterType	int		6252865	0					
ANR	6253064	Identifier	left		6252865	1					
ANR	6253065	CFGEntryNode	ENTRY		6252865		True				
ANR	6253066	CFGExitNode	EXIT		6252865		True				
ANR	6253067	Symbol	s		6252865						
ANR	6253068	Symbol	* ( s + 3 )		6252865						
ANR	6253069	Symbol	* ( s + 2 )		6252865						
ANR	6253070	Symbol	left		6252865						
ANR	6253071	Symbol	* ( s + 1 )		6252865						
ANR	6253072	Symbol	safe		6252865						
ANR	6253073	Symbol	* s		6252865						
ANR	6253074	Function	r_str_char_fullwidth	1889:0:39352:40207							
ANR	6253075	FunctionDef	"r_str_char_fullwidth (const char * s , int left)"		6253074	0					
ANR	6253076	CompoundStatement		1889:58:39410:40207	6253074	0					
ANR	6253077	IdentifierDeclStatement	"int codepoint = r_str_utf8_codepoint ( s , left ) ;"	1890:1:39413:39459	6253074	0	True				
ANR	6253078	IdentifierDecl	"codepoint = r_str_utf8_codepoint ( s , left )"		6253074	0					
ANR	6253079	IdentifierDeclType	int		6253074	0					
ANR	6253080	Identifier	codepoint		6253074	1					
ANR	6253081	AssignmentExpression	"codepoint = r_str_utf8_codepoint ( s , left )"		6253074	2		=			
ANR	6253082	Identifier	codepoint		6253074	0					
ANR	6253083	CallExpression	"r_str_utf8_codepoint ( s , left )"		6253074	1					
ANR	6253084	Callee	r_str_utf8_codepoint		6253074	0					
ANR	6253085	Identifier	r_str_utf8_codepoint		6253074	0					
ANR	6253086	ArgumentList	s		6253074	1					
ANR	6253087	Argument	s		6253074	0					
ANR	6253088	Identifier	s		6253074	0					
ANR	6253089	Argument	left		6253074	1					
ANR	6253090	Identifier	left		6253074	0					
ANR	6253091	ReturnStatement	"return ( codepoint >= 0x1100 && ( codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd ) ) ) ;"	1891:1:39462:40204	6253074	1	True				
ANR	6253092	AndExpression	"codepoint >= 0x1100 && ( codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd ) )"		6253074	0		&&			
ANR	6253093	RelationalExpression	codepoint >= 0x1100		6253074	0		>=			
ANR	6253094	Identifier	codepoint		6253074	0					
ANR	6253095	PrimaryExpression	0x1100		6253074	1					
ANR	6253096	OrExpression	"codepoint <= 0x115f || codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253097	RelationalExpression	codepoint <= 0x115f		6253074	0		<=			
ANR	6253098	Identifier	codepoint		6253074	0					
ANR	6253099	PrimaryExpression	0x115f		6253074	1					
ANR	6253100	OrExpression	"codepoint == 0x2329 || codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253101	EqualityExpression	codepoint == 0x2329		6253074	0		==			
ANR	6253102	Identifier	codepoint		6253074	0					
ANR	6253103	PrimaryExpression	0x2329		6253074	1					
ANR	6253104	OrExpression	"codepoint == 0x232a || ( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253105	EqualityExpression	codepoint == 0x232a		6253074	0		==			
ANR	6253106	Identifier	codepoint		6253074	0					
ANR	6253107	PrimaryExpression	0x232a		6253074	1					
ANR	6253108	OrExpression	"( R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f ) || R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253109	AndExpression	"R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf ) && codepoint != 0x303f"		6253074	0		&&			
ANR	6253110	CallExpression	"R_BETWEEN ( 0x2e80 , codepoint , 0xa4cf )"		6253074	0					
ANR	6253111	Callee	R_BETWEEN		6253074	0					
ANR	6253112	Identifier	R_BETWEEN		6253074	0					
ANR	6253113	ArgumentList	0x2e80		6253074	1					
ANR	6253114	Argument	0x2e80		6253074	0					
ANR	6253115	PrimaryExpression	0x2e80		6253074	0					
ANR	6253116	Argument	codepoint		6253074	1					
ANR	6253117	Identifier	codepoint		6253074	0					
ANR	6253118	Argument	0xa4cf		6253074	2					
ANR	6253119	PrimaryExpression	0xa4cf		6253074	0					
ANR	6253120	EqualityExpression	codepoint != 0x303f		6253074	1		!=			
ANR	6253121	Identifier	codepoint		6253074	0					
ANR	6253122	PrimaryExpression	0x303f		6253074	1					
ANR	6253123	OrExpression	"R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 ) || R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253124	CallExpression	"R_BETWEEN ( 0xac00 , codepoint , 0xd7a3 )"		6253074	0					
ANR	6253125	Callee	R_BETWEEN		6253074	0					
ANR	6253126	Identifier	R_BETWEEN		6253074	0					
ANR	6253127	ArgumentList	0xac00		6253074	1					
ANR	6253128	Argument	0xac00		6253074	0					
ANR	6253129	PrimaryExpression	0xac00		6253074	0					
ANR	6253130	Argument	codepoint		6253074	1					
ANR	6253131	Identifier	codepoint		6253074	0					
ANR	6253132	Argument	0xd7a3		6253074	2					
ANR	6253133	PrimaryExpression	0xd7a3		6253074	0					
ANR	6253134	OrExpression	"R_BETWEEN ( 0xf900 , codepoint , 0xfaff ) || R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253135	CallExpression	"R_BETWEEN ( 0xf900 , codepoint , 0xfaff )"		6253074	0					
ANR	6253136	Callee	R_BETWEEN		6253074	0					
ANR	6253137	Identifier	R_BETWEEN		6253074	0					
ANR	6253138	ArgumentList	0xf900		6253074	1					
ANR	6253139	Argument	0xf900		6253074	0					
ANR	6253140	PrimaryExpression	0xf900		6253074	0					
ANR	6253141	Argument	codepoint		6253074	1					
ANR	6253142	Identifier	codepoint		6253074	0					
ANR	6253143	Argument	0xfaff		6253074	2					
ANR	6253144	PrimaryExpression	0xfaff		6253074	0					
ANR	6253145	OrExpression	"R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 ) || R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253146	CallExpression	"R_BETWEEN ( 0xfe10 , codepoint , 0xfe19 )"		6253074	0					
ANR	6253147	Callee	R_BETWEEN		6253074	0					
ANR	6253148	Identifier	R_BETWEEN		6253074	0					
ANR	6253149	ArgumentList	0xfe10		6253074	1					
ANR	6253150	Argument	0xfe10		6253074	0					
ANR	6253151	PrimaryExpression	0xfe10		6253074	0					
ANR	6253152	Argument	codepoint		6253074	1					
ANR	6253153	Identifier	codepoint		6253074	0					
ANR	6253154	Argument	0xfe19		6253074	2					
ANR	6253155	PrimaryExpression	0xfe19		6253074	0					
ANR	6253156	OrExpression	"R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f ) || R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253157	CallExpression	"R_BETWEEN ( 0xfe30 , codepoint , 0xfe6f )"		6253074	0					
ANR	6253158	Callee	R_BETWEEN		6253074	0					
ANR	6253159	Identifier	R_BETWEEN		6253074	0					
ANR	6253160	ArgumentList	0xfe30		6253074	1					
ANR	6253161	Argument	0xfe30		6253074	0					
ANR	6253162	PrimaryExpression	0xfe30		6253074	0					
ANR	6253163	Argument	codepoint		6253074	1					
ANR	6253164	Identifier	codepoint		6253074	0					
ANR	6253165	Argument	0xfe6f		6253074	2					
ANR	6253166	PrimaryExpression	0xfe6f		6253074	0					
ANR	6253167	OrExpression	"R_BETWEEN ( 0xff00 , codepoint , 0xff60 ) || R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253168	CallExpression	"R_BETWEEN ( 0xff00 , codepoint , 0xff60 )"		6253074	0					
ANR	6253169	Callee	R_BETWEEN		6253074	0					
ANR	6253170	Identifier	R_BETWEEN		6253074	0					
ANR	6253171	ArgumentList	0xff00		6253074	1					
ANR	6253172	Argument	0xff00		6253074	0					
ANR	6253173	PrimaryExpression	0xff00		6253074	0					
ANR	6253174	Argument	codepoint		6253074	1					
ANR	6253175	Identifier	codepoint		6253074	0					
ANR	6253176	Argument	0xff60		6253074	2					
ANR	6253177	PrimaryExpression	0xff60		6253074	0					
ANR	6253178	OrExpression	"R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 ) || R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253179	CallExpression	"R_BETWEEN ( 0xffe0 , codepoint , 0xffe6 )"		6253074	0					
ANR	6253180	Callee	R_BETWEEN		6253074	0					
ANR	6253181	Identifier	R_BETWEEN		6253074	0					
ANR	6253182	ArgumentList	0xffe0		6253074	1					
ANR	6253183	Argument	0xffe0		6253074	0					
ANR	6253184	PrimaryExpression	0xffe0		6253074	0					
ANR	6253185	Argument	codepoint		6253074	1					
ANR	6253186	Identifier	codepoint		6253074	0					
ANR	6253187	Argument	0xffe6		6253074	2					
ANR	6253188	PrimaryExpression	0xffe6		6253074	0					
ANR	6253189	OrExpression	"R_BETWEEN ( 0x20000 , codepoint , 0x2fffd ) || R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1		||			
ANR	6253190	CallExpression	"R_BETWEEN ( 0x20000 , codepoint , 0x2fffd )"		6253074	0					
ANR	6253191	Callee	R_BETWEEN		6253074	0					
ANR	6253192	Identifier	R_BETWEEN		6253074	0					
ANR	6253193	ArgumentList	0x20000		6253074	1					
ANR	6253194	Argument	0x20000		6253074	0					
ANR	6253195	PrimaryExpression	0x20000		6253074	0					
ANR	6253196	Argument	codepoint		6253074	1					
ANR	6253197	Identifier	codepoint		6253074	0					
ANR	6253198	Argument	0x2fffd		6253074	2					
ANR	6253199	PrimaryExpression	0x2fffd		6253074	0					
ANR	6253200	CallExpression	"R_BETWEEN ( 0x30000 , codepoint , 0x3fffd )"		6253074	1					
ANR	6253201	Callee	R_BETWEEN		6253074	0					
ANR	6253202	Identifier	R_BETWEEN		6253074	0					
ANR	6253203	ArgumentList	0x30000		6253074	1					
ANR	6253204	Argument	0x30000		6253074	0					
ANR	6253205	PrimaryExpression	0x30000		6253074	0					
ANR	6253206	Argument	codepoint		6253074	1					
ANR	6253207	Identifier	codepoint		6253074	0					
ANR	6253208	Argument	0x3fffd		6253074	2					
ANR	6253209	PrimaryExpression	0x3fffd		6253074	0					
ANR	6253210	ReturnType	R_API bool		6253074	1					
ANR	6253211	Identifier	r_str_char_fullwidth		6253074	2					
ANR	6253212	ParameterList	"const char * s , int left"		6253074	3					
ANR	6253213	Parameter	const char * s	1889:33:39385:39397	6253074	0	True				
ANR	6253214	ParameterType	const char *		6253074	0					
ANR	6253215	Identifier	s		6253074	1					
ANR	6253216	Parameter	int left	1889:48:39400:39407	6253074	1	True				
ANR	6253217	ParameterType	int		6253074	0					
ANR	6253218	Identifier	left		6253074	1					
ANR	6253219	CFGEntryNode	ENTRY		6253074		True				
ANR	6253220	CFGExitNode	EXIT		6253074		True				
ANR	6253221	Symbol	s		6253074						
ANR	6253222	Symbol	codepoint		6253074						
ANR	6253223	Symbol	left		6253074						
ANR	6253224	Symbol	R_BETWEEN		6253074						
ANR	6253225	Symbol	r_str_utf8_codepoint		6253074						
ANR	6253226	Function	r_str_utf8_charsize	1912:0:40317:40570							
ANR	6253227	FunctionDef	r_str_utf8_charsize (const char * str)		6253226	0					
ANR	6253228	CompoundStatement		1912:47:40364:40570	6253226	0					
ANR	6253229	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1913:1:40367:40396	6253226	0	True				
ANR	6253230	CallExpression	"r_return_val_if_fail ( str , 0 )"		6253226	0					
ANR	6253231	Callee	r_return_val_if_fail		6253226	0					
ANR	6253232	Identifier	r_return_val_if_fail		6253226	0					
ANR	6253233	ArgumentList	str		6253226	1					
ANR	6253234	Argument	str		6253226	0					
ANR	6253235	Identifier	str		6253226	0					
ANR	6253236	Argument	0		6253226	1					
ANR	6253237	PrimaryExpression	0		6253226	0					
ANR	6253238	IdentifierDeclStatement	int size = 0 ;	1914:1:40399:40411	6253226	1	True				
ANR	6253239	IdentifierDecl	size = 0		6253226	0					
ANR	6253240	IdentifierDeclType	int		6253226	0					
ANR	6253241	Identifier	size		6253226	1					
ANR	6253242	AssignmentExpression	size = 0		6253226	2		=			
ANR	6253243	Identifier	size		6253226	0					
ANR	6253244	PrimaryExpression	0		6253226	1					
ANR	6253245	IdentifierDeclStatement	int length = strlen ( str ) ;	1915:1:40414:40439	6253226	2	True				
ANR	6253246	IdentifierDecl	length = strlen ( str )		6253226	0					
ANR	6253247	IdentifierDeclType	int		6253226	0					
ANR	6253248	Identifier	length		6253226	1					
ANR	6253249	AssignmentExpression	length = strlen ( str )		6253226	2		=			
ANR	6253250	Identifier	length		6253226	0					
ANR	6253251	CallExpression	strlen ( str )		6253226	1					
ANR	6253252	Callee	strlen		6253226	0					
ANR	6253253	Identifier	strlen		6253226	0					
ANR	6253254	ArgumentList	str		6253226	1					
ANR	6253255	Argument	str		6253226	0					
ANR	6253256	Identifier	str		6253226	0					
ANR	6253257	WhileStatement	while ( size < length && size < 5 )		6253226	3					
ANR	6253258	Condition	size < length && size < 5	1916:8:40449:40473	6253226	0	True				
ANR	6253259	AndExpression	size < length && size < 5		6253226	0		&&			
ANR	6253260	RelationalExpression	size < length		6253226	0		<			
ANR	6253261	Identifier	size		6253226	0					
ANR	6253262	Identifier	length		6253226	1					
ANR	6253263	RelationalExpression	size < 5		6253226	1		<			
ANR	6253264	Identifier	size		6253226	0					
ANR	6253265	PrimaryExpression	5		6253226	1					
ANR	6253266	CompoundStatement		5:35:111:111	6253226	1					
ANR	6253267	ExpressionStatement	size ++	1917:2:40480:40486	6253226	0	True				
ANR	6253268	PostIncDecOperationExpression	size ++		6253226	0					
ANR	6253269	Identifier	size		6253226	0					
ANR	6253270	IncDec	++		6253226	1					
ANR	6253271	IfStatement	if ( ( str [ size ] & 0xc0 ) != 0x80 )		6253226	1					
ANR	6253272	Condition	( str [ size ] & 0xc0 ) != 0x80	1918:6:40494:40519	6253226	0	True				
ANR	6253273	EqualityExpression	( str [ size ] & 0xc0 ) != 0x80		6253226	0		!=			
ANR	6253274	BitAndExpression	str [ size ] & 0xc0		6253226	0		&			
ANR	6253275	ArrayIndexing	str [ size ]		6253226	0					
ANR	6253276	Identifier	str		6253226	0					
ANR	6253277	Identifier	size		6253226	1					
ANR	6253278	PrimaryExpression	0xc0		6253226	1					
ANR	6253279	PrimaryExpression	0x80		6253226	1					
ANR	6253280	CompoundStatement		7:34:157:157	6253226	1					
ANR	6253281	BreakStatement	break ;	1919:3:40527:40532	6253226	0	True				
ANR	6253282	ReturnStatement	return size < 5 ? size : 0 ;	1922:1:40542:40568	6253226	4	True				
ANR	6253283	ConditionalExpression	size < 5 ? size : 0		6253226	0					
ANR	6253284	Condition	size < 5		6253226	0					
ANR	6253285	RelationalExpression	size < 5		6253226	0		<			
ANR	6253286	Identifier	size		6253226	0					
ANR	6253287	PrimaryExpression	5		6253226	1					
ANR	6253288	Identifier	size		6253226	1					
ANR	6253289	PrimaryExpression	0		6253226	2					
ANR	6253290	ReturnType	R_API int		6253226	1					
ANR	6253291	Identifier	r_str_utf8_charsize		6253226	2					
ANR	6253292	ParameterList	const char * str		6253226	3					
ANR	6253293	Parameter	const char * str	1912:30:40347:40361	6253226	0	True				
ANR	6253294	ParameterType	const char *		6253226	0					
ANR	6253295	Identifier	str		6253226	1					
ANR	6253296	CFGEntryNode	ENTRY		6253226		True				
ANR	6253297	CFGExitNode	EXIT		6253226		True				
ANR	6253298	Symbol	str		6253226						
ANR	6253299	Symbol	strlen		6253226						
ANR	6253300	Symbol	* size		6253226						
ANR	6253301	Symbol	size		6253226						
ANR	6253302	Symbol	length		6253226						
ANR	6253303	Symbol	* str		6253226						
ANR	6253304	Function	r_str_utf8_charsize_prev	1931:0:40761:41017							
ANR	6253305	FunctionDef	"r_str_utf8_charsize_prev (const char * str , int prev_len)"		6253304	0					
ANR	6253306	CompoundStatement		1931:66:40827:41017	6253304	0					
ANR	6253307	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1932:1:40830:40859	6253304	0	True				
ANR	6253308	CallExpression	"r_return_val_if_fail ( str , 0 )"		6253304	0					
ANR	6253309	Callee	r_return_val_if_fail		6253304	0					
ANR	6253310	Identifier	r_return_val_if_fail		6253304	0					
ANR	6253311	ArgumentList	str		6253304	1					
ANR	6253312	Argument	str		6253304	0					
ANR	6253313	Identifier	str		6253304	0					
ANR	6253314	Argument	0		6253304	1					
ANR	6253315	PrimaryExpression	0		6253304	0					
ANR	6253316	IdentifierDeclStatement	"int size = 0 , pos = 0 ;"	1933:1:40862:40883	6253304	1	True				
ANR	6253317	IdentifierDecl	size = 0		6253304	0					
ANR	6253318	IdentifierDeclType	int		6253304	0					
ANR	6253319	Identifier	size		6253304	1					
ANR	6253320	AssignmentExpression	size = 0		6253304	2		=			
ANR	6253321	Identifier	size		6253304	0					
ANR	6253322	PrimaryExpression	0		6253304	1					
ANR	6253323	IdentifierDecl	pos = 0		6253304	1					
ANR	6253324	IdentifierDeclType	int		6253304	0					
ANR	6253325	Identifier	pos		6253304	1					
ANR	6253326	AssignmentExpression	pos = 0		6253304	2		=			
ANR	6253327	Identifier	pos		6253304	0					
ANR	6253328	PrimaryExpression	0		6253304	1					
ANR	6253329	WhileStatement	while ( size < prev_len && size < 5 )		6253304	2					
ANR	6253330	Condition	size < prev_len && size < 5	1934:8:40893:40919	6253304	0	True				
ANR	6253331	AndExpression	size < prev_len && size < 5		6253304	0		&&			
ANR	6253332	RelationalExpression	size < prev_len		6253304	0		<			
ANR	6253333	Identifier	size		6253304	0					
ANR	6253334	Identifier	prev_len		6253304	1					
ANR	6253335	RelationalExpression	size < 5		6253304	1		<			
ANR	6253336	Identifier	size		6253304	0					
ANR	6253337	PrimaryExpression	5		6253304	1					
ANR	6253338	CompoundStatement		4:37:94:94	6253304	1					
ANR	6253339	ExpressionStatement	size ++	1935:2:40926:40932	6253304	0	True				
ANR	6253340	PostIncDecOperationExpression	size ++		6253304	0					
ANR	6253341	Identifier	size		6253304	0					
ANR	6253342	IncDec	++		6253304	1					
ANR	6253343	IfStatement	if ( ( str [ -- pos ] & 0xc0 ) != 0x80 )		6253304	1					
ANR	6253344	Condition	( str [ -- pos ] & 0xc0 ) != 0x80	1936:6:40940:40966	6253304	0	True				
ANR	6253345	EqualityExpression	( str [ -- pos ] & 0xc0 ) != 0x80		6253304	0		!=			
ANR	6253346	BitAndExpression	str [ -- pos ] & 0xc0		6253304	0		&			
ANR	6253347	ArrayIndexing	str [ -- pos ]		6253304	0					
ANR	6253348	Identifier	str		6253304	0					
ANR	6253349	UnaryExpression	-- pos		6253304	1					
ANR	6253350	IncDec	--		6253304	0					
ANR	6253351	Identifier	pos		6253304	1					
ANR	6253352	PrimaryExpression	0xc0		6253304	1					
ANR	6253353	PrimaryExpression	0x80		6253304	1					
ANR	6253354	CompoundStatement		6:35:141:141	6253304	1					
ANR	6253355	BreakStatement	break ;	1937:3:40974:40979	6253304	0	True				
ANR	6253356	ReturnStatement	return size < 5 ? size : 0 ;	1940:1:40989:41015	6253304	3	True				
ANR	6253357	ConditionalExpression	size < 5 ? size : 0		6253304	0					
ANR	6253358	Condition	size < 5		6253304	0					
ANR	6253359	RelationalExpression	size < 5		6253304	0		<			
ANR	6253360	Identifier	size		6253304	0					
ANR	6253361	PrimaryExpression	5		6253304	1					
ANR	6253362	Identifier	size		6253304	1					
ANR	6253363	PrimaryExpression	0		6253304	2					
ANR	6253364	ReturnType	R_API int		6253304	1					
ANR	6253365	Identifier	r_str_utf8_charsize_prev		6253304	2					
ANR	6253366	ParameterList	"const char * str , int prev_len"		6253304	3					
ANR	6253367	Parameter	const char * str	1931:35:40796:40810	6253304	0	True				
ANR	6253368	ParameterType	const char *		6253304	0					
ANR	6253369	Identifier	str		6253304	1					
ANR	6253370	Parameter	int prev_len	1931:52:40813:40824	6253304	1	True				
ANR	6253371	ParameterType	int		6253304	0					
ANR	6253372	Identifier	prev_len		6253304	1					
ANR	6253373	CFGEntryNode	ENTRY		6253304		True				
ANR	6253374	CFGExitNode	EXIT		6253304		True				
ANR	6253375	Symbol	str		6253304						
ANR	6253376	Symbol	size		6253304						
ANR	6253377	Symbol	pos		6253304						
ANR	6253378	Symbol	prev_len		6253304						
ANR	6253379	Symbol	* str		6253304						
ANR	6253380	Symbol	* pos		6253304						
ANR	6253381	Function	r_str_utf8_charsize_last	1948:0:41146:41308							
ANR	6253382	FunctionDef	r_str_utf8_charsize_last (const char * str)		6253381	0					
ANR	6253383	CompoundStatement		1948:52:41198:41308	6253381	0					
ANR	6253384	ExpressionStatement	"r_return_val_if_fail ( str , 0 )"	1949:1:41201:41230	6253381	0	True				
ANR	6253385	CallExpression	"r_return_val_if_fail ( str , 0 )"		6253381	0					
ANR	6253386	Callee	r_return_val_if_fail		6253381	0					
ANR	6253387	Identifier	r_return_val_if_fail		6253381	0					
ANR	6253388	ArgumentList	str		6253381	1					
ANR	6253389	Argument	str		6253381	0					
ANR	6253390	Identifier	str		6253381	0					
ANR	6253391	Argument	0		6253381	1					
ANR	6253392	PrimaryExpression	0		6253381	0					
ANR	6253393	IdentifierDeclStatement	int len = strlen ( str ) ;	1950:1:41233:41255	6253381	1	True				
ANR	6253394	IdentifierDecl	len = strlen ( str )		6253381	0					
ANR	6253395	IdentifierDeclType	int		6253381	0					
ANR	6253396	Identifier	len		6253381	1					
ANR	6253397	AssignmentExpression	len = strlen ( str )		6253381	2		=			
ANR	6253398	Identifier	len		6253381	0					
ANR	6253399	CallExpression	strlen ( str )		6253381	1					
ANR	6253400	Callee	strlen		6253381	0					
ANR	6253401	Identifier	strlen		6253381	0					
ANR	6253402	ArgumentList	str		6253381	1					
ANR	6253403	Argument	str		6253381	0					
ANR	6253404	Identifier	str		6253381	0					
ANR	6253405	ReturnStatement	"return r_str_utf8_charsize_prev ( str + len , len ) ;"	1951:1:41258:41306	6253381	2	True				
ANR	6253406	CallExpression	"r_str_utf8_charsize_prev ( str + len , len )"		6253381	0					
ANR	6253407	Callee	r_str_utf8_charsize_prev		6253381	0					
ANR	6253408	Identifier	r_str_utf8_charsize_prev		6253381	0					
ANR	6253409	ArgumentList	str + len		6253381	1					
ANR	6253410	Argument	str + len		6253381	0					
ANR	6253411	AdditiveExpression	str + len		6253381	0		+			
ANR	6253412	Identifier	str		6253381	0					
ANR	6253413	Identifier	len		6253381	1					
ANR	6253414	Argument	len		6253381	1					
ANR	6253415	Identifier	len		6253381	0					
ANR	6253416	ReturnType	R_API int		6253381	1					
ANR	6253417	Identifier	r_str_utf8_charsize_last		6253381	2					
ANR	6253418	ParameterList	const char * str		6253381	3					
ANR	6253419	Parameter	const char * str	1948:35:41181:41195	6253381	0	True				
ANR	6253420	ParameterType	const char *		6253381	0					
ANR	6253421	Identifier	str		6253381	1					
ANR	6253422	CFGEntryNode	ENTRY		6253381		True				
ANR	6253423	CFGExitNode	EXIT		6253381		True				
ANR	6253424	Symbol	str		6253381						
ANR	6253425	Symbol	strlen		6253381						
ANR	6253426	Symbol	len		6253381						
ANR	6253427	Symbol	r_str_utf8_charsize_prev		6253381						
ANR	6253428	Function	r_str_filter_zeroline	1954:0:41311:41531							
ANR	6253429	FunctionDef	"r_str_filter_zeroline (char * str , int len)"		6253428	0					
ANR	6253430	CompoundStatement		1954:53:41364:41531	6253428	0					
ANR	6253431	IdentifierDeclStatement	int i ;	1955:1:41367:41372	6253428	0	True				
ANR	6253432	IdentifierDecl	i		6253428	0					
ANR	6253433	IdentifierDeclType	int		6253428	0					
ANR	6253434	Identifier	i		6253428	1					
ANR	6253435	ForStatement	for ( i = 0 ; i < len && str [ i ] ; i ++ )		6253428	1					
ANR	6253436	ForInit	i = 0 ;	1956:6:41380:41385	6253428	0	True				
ANR	6253437	AssignmentExpression	i = 0		6253428	0		=			
ANR	6253438	Identifier	i		6253428	0					
ANR	6253439	PrimaryExpression	0		6253428	1					
ANR	6253440	Condition	i < len && str [ i ]	1956:13:41387:41403	6253428	1	True				
ANR	6253441	AndExpression	i < len && str [ i ]		6253428	0		&&			
ANR	6253442	RelationalExpression	i < len		6253428	0		<			
ANR	6253443	Identifier	i		6253428	0					
ANR	6253444	Identifier	len		6253428	1					
ANR	6253445	ArrayIndexing	str [ i ]		6253428	1					
ANR	6253446	Identifier	str		6253428	0					
ANR	6253447	Identifier	i		6253428	1					
ANR	6253448	PostIncDecOperationExpression	i ++	1956:32:41406:41408	6253428	2	True				
ANR	6253449	Identifier	i		6253428	0					
ANR	6253450	IncDec	++		6253428	1					
ANR	6253451	CompoundStatement		3:37:46:46	6253428	3					
ANR	6253452	IfStatement	if ( str [ i ] == '\\n' || str [ i ] == '\\r' )		6253428	0					
ANR	6253453	Condition	str [ i ] == '\\n' || str [ i ] == '\\r'	1957:6:41419:41450	6253428	0	True				
ANR	6253454	OrExpression	str [ i ] == '\\n' || str [ i ] == '\\r'		6253428	0		||			
ANR	6253455	EqualityExpression	str [ i ] == '\\n'		6253428	0		==			
ANR	6253456	ArrayIndexing	str [ i ]		6253428	0					
ANR	6253457	Identifier	str		6253428	0					
ANR	6253458	Identifier	i		6253428	1					
ANR	6253459	PrimaryExpression	'\\n'		6253428	1					
ANR	6253460	EqualityExpression	str [ i ] == '\\r'		6253428	1		==			
ANR	6253461	ArrayIndexing	str [ i ]		6253428	0					
ANR	6253462	Identifier	str		6253428	0					
ANR	6253463	Identifier	i		6253428	1					
ANR	6253464	PrimaryExpression	'\\r'		6253428	1					
ANR	6253465	CompoundStatement		4:40:88:88	6253428	1					
ANR	6253466	BreakStatement	break ;	1958:3:41458:41463	6253428	0	True				
ANR	6253467	IfStatement	if ( ! IS_PRINTABLE ( str [ i ] ) )		6253428	1					
ANR	6253468	Condition	! IS_PRINTABLE ( str [ i ] )	1960:6:41475:41496	6253428	0	True				
ANR	6253469	UnaryOperationExpression	! IS_PRINTABLE ( str [ i ] )		6253428	0					
ANR	6253470	UnaryOperator	!		6253428	0					
ANR	6253471	CallExpression	IS_PRINTABLE ( str [ i ] )		6253428	1					
ANR	6253472	Callee	IS_PRINTABLE		6253428	0					
ANR	6253473	Identifier	IS_PRINTABLE		6253428	0					
ANR	6253474	ArgumentList	str [ i ]		6253428	1					
ANR	6253475	Argument	str [ i ]		6253428	0					
ANR	6253476	ArrayIndexing	str [ i ]		6253428	0					
ANR	6253477	Identifier	str		6253428	0					
ANR	6253478	Identifier	i		6253428	1					
ANR	6253479	CompoundStatement		7:30:134:134	6253428	1					
ANR	6253480	BreakStatement	break ;	1961:3:41504:41509	6253428	0	True				
ANR	6253481	ExpressionStatement	str [ i ] = 0	1964:1:41519:41529	6253428	2	True				
ANR	6253482	AssignmentExpression	str [ i ] = 0		6253428	0		=			
ANR	6253483	ArrayIndexing	str [ i ]		6253428	0					
ANR	6253484	Identifier	str		6253428	0					
ANR	6253485	Identifier	i		6253428	1					
ANR	6253486	PrimaryExpression	0		6253428	1					
ANR	6253487	ReturnType	R_API void		6253428	1					
ANR	6253488	Identifier	r_str_filter_zeroline		6253428	2					
ANR	6253489	ParameterList	"char * str , int len"		6253428	3					
ANR	6253490	Parameter	char * str	1954:33:41344:41352	6253428	0	True				
ANR	6253491	ParameterType	char *		6253428	0					
ANR	6253492	Identifier	str		6253428	1					
ANR	6253493	Parameter	int len	1954:44:41355:41361	6253428	1	True				
ANR	6253494	ParameterType	int		6253428	0					
ANR	6253495	Identifier	len		6253428	1					
ANR	6253496	CFGEntryNode	ENTRY		6253428		True				
ANR	6253497	CFGExitNode	EXIT		6253428		True				
ANR	6253498	Symbol	str		6253428						
ANR	6253499	Symbol	* i		6253428						
ANR	6253500	Symbol	IS_PRINTABLE		6253428						
ANR	6253501	Symbol	len		6253428						
ANR	6253502	Symbol	i		6253428						
ANR	6253503	Symbol	* str		6253428						
ANR	6253504	Function	r_str_filter	1967:0:41534:41714							
ANR	6253505	FunctionDef	"r_str_filter (char * str , int len)"		6253504	0					
ANR	6253506	CompoundStatement		1967:44:41578:41714	6253504	0					
ANR	6253507	IdentifierDeclStatement	int i ;	1968:1:41581:41586	6253504	0	True				
ANR	6253508	IdentifierDecl	i		6253504	0					
ANR	6253509	IdentifierDeclType	int		6253504	0					
ANR	6253510	Identifier	i		6253504	1					
ANR	6253511	IfStatement	if ( len < 1 )		6253504	1					
ANR	6253512	Condition	len < 1	1969:5:41593:41599	6253504	0	True				
ANR	6253513	RelationalExpression	len < 1		6253504	0		<			
ANR	6253514	Identifier	len		6253504	0					
ANR	6253515	PrimaryExpression	1		6253504	1					
ANR	6253516	CompoundStatement		3:14:23:23	6253504	1					
ANR	6253517	ExpressionStatement	len = strlen ( str )	1970:2:41606:41624	6253504	0	True				
ANR	6253518	AssignmentExpression	len = strlen ( str )		6253504	0		=			
ANR	6253519	Identifier	len		6253504	0					
ANR	6253520	CallExpression	strlen ( str )		6253504	1					
ANR	6253521	Callee	strlen		6253504	0					
ANR	6253522	Identifier	strlen		6253504	0					
ANR	6253523	ArgumentList	str		6253504	1					
ANR	6253524	Argument	str		6253504	0					
ANR	6253525	Identifier	str		6253504	0					
ANR	6253526	ForStatement	for ( i = 0 ; i < len ; i ++ )		6253504	2					
ANR	6253527	ForInit	i = 0 ;	1972:6:41635:41640	6253504	0	True				
ANR	6253528	AssignmentExpression	i = 0		6253504	0		=			
ANR	6253529	Identifier	i		6253504	0					
ANR	6253530	PrimaryExpression	0		6253504	1					
ANR	6253531	Condition	i < len	1972:13:41642:41648	6253504	1	True				
ANR	6253532	RelationalExpression	i < len		6253504	0		<			
ANR	6253533	Identifier	i		6253504	0					
ANR	6253534	Identifier	len		6253504	1					
ANR	6253535	PostIncDecOperationExpression	i ++	1972:22:41651:41653	6253504	2	True				
ANR	6253536	Identifier	i		6253504	0					
ANR	6253537	IncDec	++		6253504	1					
ANR	6253538	CompoundStatement		6:27:77:77	6253504	3					
ANR	6253539	IfStatement	if ( ! IS_PRINTABLE ( str [ i ] ) )		6253504	0					
ANR	6253540	Condition	! IS_PRINTABLE ( str [ i ] )	1973:6:41664:41685	6253504	0	True				
ANR	6253541	UnaryOperationExpression	! IS_PRINTABLE ( str [ i ] )		6253504	0					
ANR	6253542	UnaryOperator	!		6253504	0					
ANR	6253543	CallExpression	IS_PRINTABLE ( str [ i ] )		6253504	1					
ANR	6253544	Callee	IS_PRINTABLE		6253504	0					
ANR	6253545	Identifier	IS_PRINTABLE		6253504	0					
ANR	6253546	ArgumentList	str [ i ]		6253504	1					
ANR	6253547	Argument	str [ i ]		6253504	0					
ANR	6253548	ArrayIndexing	str [ i ]		6253504	0					
ANR	6253549	Identifier	str		6253504	0					
ANR	6253550	Identifier	i		6253504	1					
ANR	6253551	CompoundStatement		7:30:109:109	6253504	1					
ANR	6253552	ExpressionStatement	str [ i ] = '.'	1974:3:41693:41705	6253504	0	True				
ANR	6253553	AssignmentExpression	str [ i ] = '.'		6253504	0		=			
ANR	6253554	ArrayIndexing	str [ i ]		6253504	0					
ANR	6253555	Identifier	str		6253504	0					
ANR	6253556	Identifier	i		6253504	1					
ANR	6253557	PrimaryExpression	'.'		6253504	1					
ANR	6253558	ReturnType	R_API void		6253504	1					
ANR	6253559	Identifier	r_str_filter		6253504	2					
ANR	6253560	ParameterList	"char * str , int len"		6253504	3					
ANR	6253561	Parameter	char * str	1967:24:41558:41566	6253504	0	True				
ANR	6253562	ParameterType	char *		6253504	0					
ANR	6253563	Identifier	str		6253504	1					
ANR	6253564	Parameter	int len	1967:35:41569:41575	6253504	1	True				
ANR	6253565	ParameterType	int		6253504	0					
ANR	6253566	Identifier	len		6253504	1					
ANR	6253567	CFGEntryNode	ENTRY		6253504		True				
ANR	6253568	CFGExitNode	EXIT		6253504		True				
ANR	6253569	Symbol	str		6253504						
ANR	6253570	Symbol	strlen		6253504						
ANR	6253571	Symbol	IS_PRINTABLE		6253504						
ANR	6253572	Symbol	* i		6253504						
ANR	6253573	Symbol	len		6253504						
ANR	6253574	Symbol	i		6253504						
ANR	6253575	Symbol	* str		6253504						
ANR	6253576	Function	r_str_glob	1979:0:41717:43323							
ANR	6253577	FunctionDef	"r_str_glob (const char * str , const char * glob)"		6253576	0					
ANR	6253578	CompoundStatement		1979:57:41774:43323	6253576	0					
ANR	6253579	IdentifierDeclStatement	"const char * cp = NULL , * mp = NULL ;"	1980:8:41784:41817	6253576	0	True				
ANR	6253580	IdentifierDecl	* cp = NULL		6253576	0					
ANR	6253581	IdentifierDeclType	const char *		6253576	0					
ANR	6253582	Identifier	cp		6253576	1					
ANR	6253583	AssignmentExpression	* cp = NULL		6253576	2		=			
ANR	6253584	Identifier	NULL		6253576	0					
ANR	6253585	Identifier	NULL		6253576	1					
ANR	6253586	IdentifierDecl	* mp = NULL		6253576	1					
ANR	6253587	IdentifierDeclType	const char *		6253576	0					
ANR	6253588	Identifier	mp		6253576	1					
ANR	6253589	AssignmentExpression	* mp = NULL		6253576	2		=			
ANR	6253590	Identifier	NULL		6253576	0					
ANR	6253591	Identifier	NULL		6253576	1					
ANR	6253592	IfStatement	"if ( ! glob || ! strcmp ( glob , ""*"" ) )"		6253576	1					
ANR	6253593	Condition	"! glob || ! strcmp ( glob , ""*"" )"	1981:12:41831:41858	6253576	0	True				
ANR	6253594	OrExpression	"! glob || ! strcmp ( glob , ""*"" )"		6253576	0		||			
ANR	6253595	UnaryOperationExpression	! glob		6253576	0					
ANR	6253596	UnaryOperator	!		6253576	0					
ANR	6253597	Identifier	glob		6253576	1					
ANR	6253598	UnaryOperationExpression	"! strcmp ( glob , ""*"" )"		6253576	1					
ANR	6253599	UnaryOperator	!		6253576	0					
ANR	6253600	CallExpression	"strcmp ( glob , ""*"" )"		6253576	1					
ANR	6253601	Callee	strcmp		6253576	0					
ANR	6253602	Identifier	strcmp		6253576	0					
ANR	6253603	ArgumentList	glob		6253576	1					
ANR	6253604	Argument	glob		6253576	0					
ANR	6253605	Identifier	glob		6253576	0					
ANR	6253606	Argument	"""*"""		6253576	1					
ANR	6253607	PrimaryExpression	"""*"""		6253576	0					
ANR	6253608	CompoundStatement		3:42:86:86	6253576	1					
ANR	6253609	ReturnStatement	return true ;	1982:16:41879:41890	6253576	0	True				
ANR	6253610	Identifier	true		6253576	0					
ANR	6253611	IfStatement	"if ( ! strchr ( glob , '*' ) )"		6253576	2					
ANR	6253612	Condition	"! strchr ( glob , '*' )"	1984:12:41914:41932	6253576	0	True				
ANR	6253613	UnaryOperationExpression	"! strchr ( glob , '*' )"		6253576	0					
ANR	6253614	UnaryOperator	!		6253576	0					
ANR	6253615	CallExpression	"strchr ( glob , '*' )"		6253576	1					
ANR	6253616	Callee	strchr		6253576	0					
ANR	6253617	Identifier	strchr		6253576	0					
ANR	6253618	ArgumentList	glob		6253576	1					
ANR	6253619	Argument	glob		6253576	0					
ANR	6253620	Identifier	glob		6253576	0					
ANR	6253621	Argument	'*'		6253576	1					
ANR	6253622	PrimaryExpression	'*'		6253576	0					
ANR	6253623	CompoundStatement		6:33:160:160	6253576	1					
ANR	6253624	IfStatement	if ( * glob == '^' )		6253576	0					
ANR	6253625	Condition	* glob == '^'	1985:20:41957:41968	6253576	0	True				
ANR	6253626	EqualityExpression	* glob == '^'		6253576	0		==			
ANR	6253627	UnaryOperationExpression	* glob		6253576	0					
ANR	6253628	UnaryOperator	*		6253576	0					
ANR	6253629	Identifier	glob		6253576	1					
ANR	6253630	PrimaryExpression	'^'		6253576	1					
ANR	6253631	CompoundStatement		7:34:196:196	6253576	1					
ANR	6253632	ExpressionStatement	glob ++	1986:24:41997:42003	6253576	0	True				
ANR	6253633	PostIncDecOperationExpression	glob ++		6253576	0					
ANR	6253634	Identifier	glob		6253576	0					
ANR	6253635	IncDec	++		6253576	1					
ANR	6253636	WhileStatement	while ( * str )		6253576	1					
ANR	6253637	Condition	* str	1987:31:42036:42039	6253576	0	True				
ANR	6253638	UnaryOperationExpression	* str		6253576	0					
ANR	6253639	UnaryOperator	*		6253576	0					
ANR	6253640	Identifier	str		6253576	1					
ANR	6253641	CompoundStatement		9:37:267:267	6253576	1					
ANR	6253642	IfStatement	if ( * glob != * str )		6253576	0					
ANR	6253643	Condition	* glob != * str	1988:36:42080:42092	6253576	0	True				
ANR	6253644	EqualityExpression	* glob != * str		6253576	0		!=			
ANR	6253645	UnaryOperationExpression	* glob		6253576	0					
ANR	6253646	UnaryOperator	*		6253576	0					
ANR	6253647	Identifier	glob		6253576	1					
ANR	6253648	UnaryOperationExpression	* str		6253576	1					
ANR	6253649	UnaryOperator	*		6253576	0					
ANR	6253650	Identifier	str		6253576	1					
ANR	6253651	CompoundStatement		10:51:320:320	6253576	1					
ANR	6253652	ReturnStatement	return false ;	1989:40:42137:42149	6253576	0	True				
ANR	6253653	Identifier	false		6253576	0					
ANR	6253654	IfStatement	if ( ! * ++ glob )		6253576	1					
ANR	6253655	Condition	! * ++ glob	1991:36:42221:42228	6253576	0	True				
ANR	6253656	UnaryOperationExpression	! * ++ glob		6253576	0					
ANR	6253657	UnaryOperator	!		6253576	0					
ANR	6253658	UnaryOperationExpression	* ++ glob		6253576	1					
ANR	6253659	UnaryOperator	*		6253576	0					
ANR	6253660	UnaryExpression	++ glob		6253576	1					
ANR	6253661	IncDec	++		6253576	0					
ANR	6253662	Identifier	glob		6253576	1					
ANR	6253663	CompoundStatement		13:46:456:456	6253576	1					
ANR	6253664	ReturnStatement	return true ;	1992:40:42273:42284	6253576	0	True				
ANR	6253665	Identifier	true		6253576	0					
ANR	6253666	ExpressionStatement	str ++	1994:32:42352:42357	6253576	2	True				
ANR	6253667	PostIncDecOperationExpression	str ++		6253576	0					
ANR	6253668	Identifier	str		6253576	0					
ANR	6253669	IncDec	++		6253576	1					
ANR	6253670	ElseStatement	else		6253576	0					
ANR	6253671	CompoundStatement		18:23:633:633	6253576	0					
ANR	6253672	ReturnStatement	"return strstr ( str , glob ) != NULL ;"	1997:24:42434:42467	6253576	0	True				
ANR	6253673	EqualityExpression	"strstr ( str , glob ) != NULL"		6253576	0		!=			
ANR	6253674	CallExpression	"strstr ( str , glob )"		6253576	0					
ANR	6253675	Callee	strstr		6253576	0					
ANR	6253676	Identifier	strstr		6253576	0					
ANR	6253677	ArgumentList	str		6253576	1					
ANR	6253678	Argument	str		6253576	0					
ANR	6253679	Identifier	str		6253576	0					
ANR	6253680	Argument	glob		6253576	1					
ANR	6253681	Identifier	glob		6253576	0					
ANR	6253682	Identifier	NULL		6253576	1					
ANR	6253683	IfStatement	if ( * glob == '^' )		6253576	3					
ANR	6253684	Condition	* glob == '^'	2000:12:42509:42520	6253576	0	True				
ANR	6253685	EqualityExpression	* glob == '^'		6253576	0		==			
ANR	6253686	UnaryOperationExpression	* glob		6253576	0					
ANR	6253687	UnaryOperator	*		6253576	0					
ANR	6253688	Identifier	glob		6253576	1					
ANR	6253689	PrimaryExpression	'^'		6253576	1					
ANR	6253690	CompoundStatement		22:26:748:748	6253576	1					
ANR	6253691	ExpressionStatement	glob ++	2001:16:42541:42547	6253576	0	True				
ANR	6253692	PostIncDecOperationExpression	glob ++		6253576	0					
ANR	6253693	Identifier	glob		6253576	0					
ANR	6253694	IncDec	++		6253576	1					
ANR	6253695	WhileStatement	while ( * str && ( * glob != '*' ) )		6253576	4					
ANR	6253696	Condition	* str && ( * glob != '*' )	2003:15:42574:42595	6253576	0	True				
ANR	6253697	AndExpression	* str && ( * glob != '*' )		6253576	0		&&			
ANR	6253698	UnaryOperationExpression	* str		6253576	0					
ANR	6253699	UnaryOperator	*		6253576	0					
ANR	6253700	Identifier	str		6253576	1					
ANR	6253701	EqualityExpression	* glob != '*'		6253576	1		!=			
ANR	6253702	UnaryOperationExpression	* glob		6253576	0					
ANR	6253703	UnaryOperator	*		6253576	0					
ANR	6253704	Identifier	glob		6253576	1					
ANR	6253705	PrimaryExpression	'*'		6253576	1					
ANR	6253706	CompoundStatement		25:39:823:823	6253576	1					
ANR	6253707	IfStatement	if ( * glob != * str )		6253576	0					
ANR	6253708	Condition	* glob != * str	2004:20:42620:42632	6253576	0	True				
ANR	6253709	EqualityExpression	* glob != * str		6253576	0		!=			
ANR	6253710	UnaryOperationExpression	* glob		6253576	0					
ANR	6253711	UnaryOperator	*		6253576	0					
ANR	6253712	Identifier	glob		6253576	1					
ANR	6253713	UnaryOperationExpression	* str		6253576	1					
ANR	6253714	UnaryOperator	*		6253576	0					
ANR	6253715	Identifier	str		6253576	1					
ANR	6253716	CompoundStatement		26:35:860:860	6253576	1					
ANR	6253717	ReturnStatement	return false ;	2005:24:42661:42673	6253576	0	True				
ANR	6253718	Identifier	false		6253576	0					
ANR	6253719	ExpressionStatement	glob ++	2007:16:42709:42715	6253576	1	True				
ANR	6253720	PostIncDecOperationExpression	glob ++		6253576	0					
ANR	6253721	Identifier	glob		6253576	0					
ANR	6253722	IncDec	++		6253576	1					
ANR	6253723	ExpressionStatement	str ++	2008:16:42733:42738	6253576	2	True				
ANR	6253724	PostIncDecOperationExpression	str ++		6253576	0					
ANR	6253725	Identifier	str		6253576	0					
ANR	6253726	IncDec	++		6253576	1					
ANR	6253727	WhileStatement	while ( * str )		6253576	5					
ANR	6253728	Condition	* str	2010:15:42765:42768	6253576	0	True				
ANR	6253729	UnaryOperationExpression	* str		6253576	0					
ANR	6253730	UnaryOperator	*		6253576	0					
ANR	6253731	Identifier	str		6253576	1					
ANR	6253732	CompoundStatement		32:21:996:996	6253576	1					
ANR	6253733	IfStatement	if ( * glob == '*' )		6253576	0					
ANR	6253734	Condition	* glob == '*'	2011:20:42793:42804	6253576	0	True				
ANR	6253735	EqualityExpression	* glob == '*'		6253576	0		==			
ANR	6253736	UnaryOperationExpression	* glob		6253576	0					
ANR	6253737	UnaryOperator	*		6253576	0					
ANR	6253738	Identifier	glob		6253576	1					
ANR	6253739	PrimaryExpression	'*'		6253576	1					
ANR	6253740	CompoundStatement		33:34:1032:1032	6253576	1					
ANR	6253741	IfStatement	if ( ! * ++ glob )		6253576	0					
ANR	6253742	Condition	! * ++ glob	2012:28:42837:42844	6253576	0	True				
ANR	6253743	UnaryOperationExpression	! * ++ glob		6253576	0					
ANR	6253744	UnaryOperator	!		6253576	0					
ANR	6253745	UnaryOperationExpression	* ++ glob		6253576	1					
ANR	6253746	UnaryOperator	*		6253576	0					
ANR	6253747	UnaryExpression	++ glob		6253576	1					
ANR	6253748	IncDec	++		6253576	0					
ANR	6253749	Identifier	glob		6253576	1					
ANR	6253750	CompoundStatement		34:38:1072:1072	6253576	1					
ANR	6253751	ReturnStatement	return true ;	2013:32:42881:42892	6253576	0	True				
ANR	6253752	Identifier	true		6253576	0					
ANR	6253753	ExpressionStatement	mp = glob	2015:24:42944:42953	6253576	1	True				
ANR	6253754	AssignmentExpression	mp = glob		6253576	0		=			
ANR	6253755	Identifier	mp		6253576	0					
ANR	6253756	Identifier	glob		6253576	1					
ANR	6253757	ExpressionStatement	cp = str + 1	2016:24:42979:42991	6253576	2	True				
ANR	6253758	AssignmentExpression	cp = str + 1		6253576	0		=			
ANR	6253759	Identifier	cp		6253576	0					
ANR	6253760	AdditiveExpression	str + 1		6253576	1		+			
ANR	6253761	Identifier	str		6253576	0					
ANR	6253762	PrimaryExpression	1		6253576	1					
ANR	6253763	ElseStatement	else		6253576	0					
ANR	6253764	IfStatement	if ( * glob == * str )		6253576	0					
ANR	6253765	Condition	* glob == * str	2017:27:43020:43032	6253576	0	True				
ANR	6253766	EqualityExpression	* glob == * str		6253576	0		==			
ANR	6253767	UnaryOperationExpression	* glob		6253576	0					
ANR	6253768	UnaryOperator	*		6253576	0					
ANR	6253769	Identifier	glob		6253576	1					
ANR	6253770	UnaryOperationExpression	* str		6253576	1					
ANR	6253771	UnaryOperator	*		6253576	0					
ANR	6253772	Identifier	str		6253576	1					
ANR	6253773	CompoundStatement		39:42:1260:1260	6253576	1					
ANR	6253774	ExpressionStatement	glob ++	2018:24:43061:43067	6253576	0	True				
ANR	6253775	PostIncDecOperationExpression	glob ++		6253576	0					
ANR	6253776	Identifier	glob		6253576	0					
ANR	6253777	IncDec	++		6253576	1					
ANR	6253778	ExpressionStatement	str ++	2019:24:43093:43098	6253576	1	True				
ANR	6253779	PostIncDecOperationExpression	str ++		6253576	0					
ANR	6253780	Identifier	str		6253576	0					
ANR	6253781	IncDec	++		6253576	1					
ANR	6253782	ElseStatement	else		6253576	0					
ANR	6253783	CompoundStatement		42:23:1348:1348	6253576	0					
ANR	6253784	ExpressionStatement	glob = mp	2021:24:43149:43158	6253576	0	True				
ANR	6253785	AssignmentExpression	glob = mp		6253576	0		=			
ANR	6253786	Identifier	glob		6253576	0					
ANR	6253787	Identifier	mp		6253576	1					
ANR	6253788	ExpressionStatement	str = cp ++	2022:24:43184:43194	6253576	1	True				
ANR	6253789	AssignmentExpression	str = cp ++		6253576	0		=			
ANR	6253790	Identifier	str		6253576	0					
ANR	6253791	PostIncDecOperationExpression	cp ++		6253576	1					
ANR	6253792	Identifier	cp		6253576	0					
ANR	6253793	IncDec	++		6253576	1					
ANR	6253794	WhileStatement	while ( * glob == '*' )		6253576	6					
ANR	6253795	Condition	* glob == '*'	2025:15:43239:43250	6253576	0	True				
ANR	6253796	EqualityExpression	* glob == '*'		6253576	0		==			
ANR	6253797	UnaryOperationExpression	* glob		6253576	0					
ANR	6253798	UnaryOperator	*		6253576	0					
ANR	6253799	Identifier	glob		6253576	1					
ANR	6253800	PrimaryExpression	'*'		6253576	1					
ANR	6253801	CompoundStatement		47:29:1478:1478	6253576	1					
ANR	6253802	ExpressionStatement	++ glob	2026:16:43271:43277	6253576	0	True				
ANR	6253803	UnaryExpression	++ glob		6253576	0					
ANR	6253804	IncDec	++		6253576	0					
ANR	6253805	Identifier	glob		6253576	1					
ANR	6253806	ReturnStatement	return ( * glob == x00 ) ;	2028:8:43297:43321	6253576	7	True				
ANR	6253807	EqualityExpression	* glob == x00		6253576	0		==			
ANR	6253808	UnaryOperationExpression	* glob		6253576	0					
ANR	6253809	UnaryOperator	*		6253576	0					
ANR	6253810	Identifier	glob		6253576	1					
ANR	6253811	Identifier	x00		6253576	1					
ANR	6253812	ReturnType	R_API bool		6253576	1					
ANR	6253813	Identifier	r_str_glob		6253576	2					
ANR	6253814	ParameterList	"const char * str , const char * glob"		6253576	3					
ANR	6253815	Parameter	const char * str	1979:22:41739:41753	6253576	0	True				
ANR	6253816	ParameterType	const char *		6253576	0					
ANR	6253817	Identifier	str		6253576	1					
ANR	6253818	Parameter	const char * glob	1979:39:41756:41771	6253576	1	True				
ANR	6253819	ParameterType	const char *		6253576	0					
ANR	6253820	Identifier	glob		6253576	1					
ANR	6253821	CFGEntryNode	ENTRY		6253576		True				
ANR	6253822	CFGExitNode	EXIT		6253576		True				
ANR	6253823	Symbol	strcmp		6253576						
ANR	6253824	Symbol	NULL		6253576						
ANR	6253825	Symbol	mp		6253576						
ANR	6253826	Symbol	glob		6253576						
ANR	6253827	Symbol	false		6253576						
ANR	6253828	Symbol	strchr		6253576						
ANR	6253829	Symbol	cp		6253576						
ANR	6253830	Symbol	str		6253576						
ANR	6253831	Symbol	* glob		6253576						
ANR	6253832	Symbol	strstr		6253576						
ANR	6253833	Symbol	true		6253576						
ANR	6253834	Symbol	x00		6253576						
ANR	6253835	Symbol	* str		6253576						
ANR	6253836	Symbol	* ++ glob		6253576						
ANR	6253837	Function	r_str_arg_escape	2032:0:43407:43987							
ANR	6253838	FunctionDef	r_str_arg_escape (const char * arg)		6253837	0					
ANR	6253839	CompoundStatement		2032:46:43453:43987	6253837	0					
ANR	6253840	IdentifierDeclStatement	char * str ;	2033:1:43456:43465	6253837	0	True				
ANR	6253841	IdentifierDecl	* str		6253837	0					
ANR	6253842	IdentifierDeclType	char *		6253837	0					
ANR	6253843	Identifier	str		6253837	1					
ANR	6253844	IdentifierDeclStatement	"int dest_i = 0 , src_i = 0 ;"	2034:1:43468:43493	6253837	1	True				
ANR	6253845	IdentifierDecl	dest_i = 0		6253837	0					
ANR	6253846	IdentifierDeclType	int		6253837	0					
ANR	6253847	Identifier	dest_i		6253837	1					
ANR	6253848	AssignmentExpression	dest_i = 0		6253837	2		=			
ANR	6253849	Identifier	dest_i		6253837	0					
ANR	6253850	PrimaryExpression	0		6253837	1					
ANR	6253851	IdentifierDecl	src_i = 0		6253837	1					
ANR	6253852	IdentifierDeclType	int		6253837	0					
ANR	6253853	Identifier	src_i		6253837	1					
ANR	6253854	AssignmentExpression	src_i = 0		6253837	2		=			
ANR	6253855	Identifier	src_i		6253837	0					
ANR	6253856	PrimaryExpression	0		6253837	1					
ANR	6253857	IfStatement	if ( ! arg )		6253837	2					
ANR	6253858	Condition	! arg	2035:5:43500:43503	6253837	0	True				
ANR	6253859	UnaryOperationExpression	! arg		6253837	0					
ANR	6253860	UnaryOperator	!		6253837	0					
ANR	6253861	Identifier	arg		6253837	1					
ANR	6253862	CompoundStatement		4:11:52:52	6253837	1					
ANR	6253863	ReturnStatement	return NULL ;	2036:2:43510:43521	6253837	0	True				
ANR	6253864	Identifier	NULL		6253837	0					
ANR	6253865	ExpressionStatement	str = malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )	2038:1:43527:43580	6253837	3	True				
ANR	6253866	AssignmentExpression	str = malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )		6253837	0		=			
ANR	6253867	Identifier	str		6253837	0					
ANR	6253868	CallExpression	malloc ( ( 2 * strlen ( arg ) + 1 ) * sizeof ( char ) )		6253837	1					
ANR	6253869	Callee	malloc		6253837	0					
ANR	6253870	Identifier	malloc		6253837	0					
ANR	6253871	ArgumentList	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		6253837	1					
ANR	6253872	Argument	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		6253837	0					
ANR	6253873	MultiplicativeExpression	( 2 * strlen ( arg ) + 1 ) * sizeof ( char )		6253837	0		*			
ANR	6253874	AdditiveExpression	2 * strlen ( arg ) + 1		6253837	0		+			
ANR	6253875	MultiplicativeExpression	2 * strlen ( arg )		6253837	0		*			
ANR	6253876	PrimaryExpression	2		6253837	0					
ANR	6253877	CallExpression	strlen ( arg )		6253837	1					
ANR	6253878	Callee	strlen		6253837	0					
ANR	6253879	Identifier	strlen		6253837	0					
ANR	6253880	ArgumentList	arg		6253837	1					
ANR	6253881	Argument	arg		6253837	0					
ANR	6253882	Identifier	arg		6253837	0					
ANR	6253883	PrimaryExpression	1		6253837	1					
ANR	6253884	SizeofExpression	sizeof ( char )		6253837	1					
ANR	6253885	Sizeof	sizeof		6253837	0					
ANR	6253886	SizeofOperand	char		6253837	1					
ANR	6253887	IfStatement	if ( ! str )		6253837	4					
ANR	6253888	Condition	! str	2039:5:43641:43644	6253837	0	True				
ANR	6253889	UnaryOperationExpression	! str		6253837	0					
ANR	6253890	UnaryOperator	!		6253837	0					
ANR	6253891	Identifier	str		6253837	1					
ANR	6253892	CompoundStatement		8:11:193:193	6253837	1					
ANR	6253893	ReturnStatement	return NULL ;	2040:2:43651:43662	6253837	0	True				
ANR	6253894	Identifier	NULL		6253837	0					
ANR	6253895	ForStatement	for ( src_i = 0 ; arg [ src_i ] != '\\0' ; src_i ++ )		6253837	5					
ANR	6253896	ForInit	src_i = 0 ;	2042:6:43673:43682	6253837	0	True				
ANR	6253897	AssignmentExpression	src_i = 0		6253837	0		=			
ANR	6253898	Identifier	src_i		6253837	0					
ANR	6253899	PrimaryExpression	0		6253837	1					
ANR	6253900	Condition	arg [ src_i ] != '\\0'	2042:17:43684:43701	6253837	1	True				
ANR	6253901	EqualityExpression	arg [ src_i ] != '\\0'		6253837	0		!=			
ANR	6253902	ArrayIndexing	arg [ src_i ]		6253837	0					
ANR	6253903	Identifier	arg		6253837	0					
ANR	6253904	Identifier	src_i		6253837	1					
ANR	6253905	PrimaryExpression	'\\0'		6253837	1					
ANR	6253906	PostIncDecOperationExpression	src_i ++	2042:37:43704:43710	6253837	2	True				
ANR	6253907	Identifier	src_i		6253837	0					
ANR	6253908	IncDec	++		6253837	1					
ANR	6253909	CompoundStatement		12:2:263:282	6253837	3					
ANR	6253910	IdentifierDeclStatement	char c = arg [ src_i ] ;	2043:2:43717:43736	6253837	0	True				
ANR	6253911	IdentifierDecl	c = arg [ src_i ]		6253837	0					
ANR	6253912	IdentifierDeclType	char		6253837	0					
ANR	6253913	Identifier	c		6253837	1					
ANR	6253914	AssignmentExpression	c = arg [ src_i ]		6253837	2		=			
ANR	6253915	Identifier	c		6253837	0					
ANR	6253916	ArrayIndexing	arg [ src_i ]		6253837	1					
ANR	6253917	Identifier	arg		6253837	0					
ANR	6253918	Identifier	src_i		6253837	1					
ANR	6253919	SwitchStatement	switch ( c )		6253837	1					
ANR	6253920	Condition	c	2044:10:43748:43748	6253837	0	True				
ANR	6253921	Identifier	c		6253837	0					
ANR	6253922	CompoundStatement		13:13:297:297	6253837	1					
ANR	6253923	Label	case '\\'' :	2045:2:43755:43764	6253837	0	True				
ANR	6253924	Label	"case '""' :"	2046:2:43768:43776	6253837	1	True				
ANR	6253925	Label	case '\\\\' :	2047:2:43780:43789	6253837	2	True				
ANR	6253926	Label	case ' ' :	2048:2:43793:43801	6253837	3	True				
ANR	6253927	ExpressionStatement	str [ dest_i ++ ] = '\\\\'	2049:3:43806:43826	6253837	4	True				
ANR	6253928	AssignmentExpression	str [ dest_i ++ ] = '\\\\'		6253837	0		=			
ANR	6253929	ArrayIndexing	str [ dest_i ++ ]		6253837	0					
ANR	6253930	Identifier	str		6253837	0					
ANR	6253931	PostIncDecOperationExpression	dest_i ++		6253837	1					
ANR	6253932	Identifier	dest_i		6253837	0					
ANR	6253933	IncDec	++		6253837	1					
ANR	6253934	PrimaryExpression	'\\\\'		6253837	1					
ANR	6253935	ExpressionStatement	str [ dest_i ++ ] = c	2050:3:43831:43848	6253837	5	True				
ANR	6253936	AssignmentExpression	str [ dest_i ++ ] = c		6253837	0		=			
ANR	6253937	ArrayIndexing	str [ dest_i ++ ]		6253837	0					
ANR	6253938	Identifier	str		6253837	0					
ANR	6253939	PostIncDecOperationExpression	dest_i ++		6253837	1					
ANR	6253940	Identifier	dest_i		6253837	0					
ANR	6253941	IncDec	++		6253837	1					
ANR	6253942	Identifier	c		6253837	1					
ANR	6253943	BreakStatement	break ;	2051:3:43853:43858	6253837	6	True				
ANR	6253944	Label	default :	2052:2:43862:43869	6253837	7	True				
ANR	6253945	Identifier	default		6253837	0					
ANR	6253946	ExpressionStatement	str [ dest_i ++ ] = c	2053:3:43874:43891	6253837	8	True				
ANR	6253947	AssignmentExpression	str [ dest_i ++ ] = c		6253837	0		=			
ANR	6253948	ArrayIndexing	str [ dest_i ++ ]		6253837	0					
ANR	6253949	Identifier	str		6253837	0					
ANR	6253950	PostIncDecOperationExpression	dest_i ++		6253837	1					
ANR	6253951	Identifier	dest_i		6253837	0					
ANR	6253952	IncDec	++		6253837	1					
ANR	6253953	Identifier	c		6253837	1					
ANR	6253954	BreakStatement	break ;	2054:3:43896:43901	6253837	9	True				
ANR	6253955	ExpressionStatement	str [ dest_i ] = '\\0'	2057:1:43911:43929	6253837	6	True				
ANR	6253956	AssignmentExpression	str [ dest_i ] = '\\0'		6253837	0		=			
ANR	6253957	ArrayIndexing	str [ dest_i ]		6253837	0					
ANR	6253958	Identifier	str		6253837	0					
ANR	6253959	Identifier	dest_i		6253837	1					
ANR	6253960	PrimaryExpression	'\\0'		6253837	1					
ANR	6253961	ReturnStatement	"return realloc ( str , ( strlen ( str ) + 1 ) * sizeof ( char ) ) ;"	2058:1:43932:43985	6253837	7	True				
ANR	6253962	CallExpression	"realloc ( str , ( strlen ( str ) + 1 ) * sizeof ( char ) )"		6253837	0					
ANR	6253963	Callee	realloc		6253837	0					
ANR	6253964	Identifier	realloc		6253837	0					
ANR	6253965	ArgumentList	str		6253837	1					
ANR	6253966	Argument	str		6253837	0					
ANR	6253967	Identifier	str		6253837	0					
ANR	6253968	Argument	( strlen ( str ) + 1 ) * sizeof ( char )		6253837	1					
ANR	6253969	MultiplicativeExpression	( strlen ( str ) + 1 ) * sizeof ( char )		6253837	0		*			
ANR	6253970	AdditiveExpression	strlen ( str ) + 1		6253837	0		+			
ANR	6253971	CallExpression	strlen ( str )		6253837	0					
ANR	6253972	Callee	strlen		6253837	0					
ANR	6253973	Identifier	strlen		6253837	0					
ANR	6253974	ArgumentList	str		6253837	1					
ANR	6253975	Argument	str		6253837	0					
ANR	6253976	Identifier	str		6253837	0					
ANR	6253977	PrimaryExpression	1		6253837	1					
ANR	6253978	SizeofExpression	sizeof ( char )		6253837	1					
ANR	6253979	Sizeof	sizeof		6253837	0					
ANR	6253980	SizeofOperand	char		6253837	1					
ANR	6253981	ReturnType	R_API char *		6253837	1					
ANR	6253982	Identifier	r_str_arg_escape		6253837	2					
ANR	6253983	ParameterList	const char * arg		6253837	3					
ANR	6253984	Parameter	const char * arg	2032:29:43436:43450	6253837	0	True				
ANR	6253985	ParameterType	const char *		6253837	0					
ANR	6253986	Identifier	arg		6253837	1					
ANR	6253987	CFGEntryNode	ENTRY		6253837		True				
ANR	6253988	CFGExitNode	EXIT		6253837		True				
ANR	6253989	Symbol	* dest_i		6253837						
ANR	6253990	Symbol	malloc		6253837						
ANR	6253991	Symbol	NULL		6253837						
ANR	6253992	Symbol	c		6253837						
ANR	6253993	Symbol	dest_i		6253837						
ANR	6253994	Symbol	src_i		6253837						
ANR	6253995	Symbol	realloc		6253837						
ANR	6253996	Symbol	str		6253837						
ANR	6253997	Symbol	strlen		6253837						
ANR	6253998	Symbol	* src_i		6253837						
ANR	6253999	Symbol	arg		6253837						
ANR	6254000	Symbol	* str		6253837						
ANR	6254001	Symbol	* arg		6253837						
ANR	6254002	Function	r_str_arg_unescape	2062:0:44040:44383							
ANR	6254003	FunctionDef	r_str_arg_unescape (char * arg)		6254002	0					
ANR	6254004	CompoundStatement		2062:40:44080:44383	6254002	0					
ANR	6254005	IdentifierDeclStatement	"int dest_i = 0 , src_i = 0 ;"	2063:1:44083:44108	6254002	0	True				
ANR	6254006	IdentifierDecl	dest_i = 0		6254002	0					
ANR	6254007	IdentifierDeclType	int		6254002	0					
ANR	6254008	Identifier	dest_i		6254002	1					
ANR	6254009	AssignmentExpression	dest_i = 0		6254002	2		=			
ANR	6254010	Identifier	dest_i		6254002	0					
ANR	6254011	PrimaryExpression	0		6254002	1					
ANR	6254012	IdentifierDecl	src_i = 0		6254002	1					
ANR	6254013	IdentifierDeclType	int		6254002	0					
ANR	6254014	Identifier	src_i		6254002	1					
ANR	6254015	AssignmentExpression	src_i = 0		6254002	2		=			
ANR	6254016	Identifier	src_i		6254002	0					
ANR	6254017	PrimaryExpression	0		6254002	1					
ANR	6254018	IfStatement	if ( ! arg )		6254002	1					
ANR	6254019	Condition	! arg	2064:5:44115:44118	6254002	0	True				
ANR	6254020	UnaryOperationExpression	! arg		6254002	0					
ANR	6254021	UnaryOperator	!		6254002	0					
ANR	6254022	Identifier	arg		6254002	1					
ANR	6254023	CompoundStatement		3:11:40:40	6254002	1					
ANR	6254024	ReturnStatement	return 0 ;	2065:2:44125:44133	6254002	0	True				
ANR	6254025	PrimaryExpression	0		6254002	0					
ANR	6254026	ForStatement	for ( src_i = 0 ; arg [ src_i ] != '\\0' ; src_i ++ )		6254002	2					
ANR	6254027	ForInit	src_i = 0 ;	2067:6:44144:44153	6254002	0	True				
ANR	6254028	AssignmentExpression	src_i = 0		6254002	0		=			
ANR	6254029	Identifier	src_i		6254002	0					
ANR	6254030	PrimaryExpression	0		6254002	1					
ANR	6254031	Condition	arg [ src_i ] != '\\0'	2067:17:44155:44172	6254002	1	True				
ANR	6254032	EqualityExpression	arg [ src_i ] != '\\0'		6254002	0		!=			
ANR	6254033	ArrayIndexing	arg [ src_i ]		6254002	0					
ANR	6254034	Identifier	arg		6254002	0					
ANR	6254035	Identifier	src_i		6254002	1					
ANR	6254036	PrimaryExpression	'\\0'		6254002	1					
ANR	6254037	PostIncDecOperationExpression	src_i ++	2067:37:44175:44181	6254002	2	True				
ANR	6254038	Identifier	src_i		6254002	0					
ANR	6254039	IncDec	++		6254002	1					
ANR	6254040	CompoundStatement		7:2:107:126	6254002	3					
ANR	6254041	IdentifierDeclStatement	char c = arg [ src_i ] ;	2068:2:44188:44207	6254002	0	True				
ANR	6254042	IdentifierDecl	c = arg [ src_i ]		6254002	0					
ANR	6254043	IdentifierDeclType	char		6254002	0					
ANR	6254044	Identifier	c		6254002	1					
ANR	6254045	AssignmentExpression	c = arg [ src_i ]		6254002	2		=			
ANR	6254046	Identifier	c		6254002	0					
ANR	6254047	ArrayIndexing	arg [ src_i ]		6254002	1					
ANR	6254048	Identifier	arg		6254002	0					
ANR	6254049	Identifier	src_i		6254002	1					
ANR	6254050	IfStatement	if ( c == '\\\\' )		6254002	1					
ANR	6254051	Condition	c == '\\\\'	2069:6:44215:44223	6254002	0	True				
ANR	6254052	EqualityExpression	c == '\\\\'		6254002	0		==			
ANR	6254053	Identifier	c		6254002	0					
ANR	6254054	PrimaryExpression	'\\\\'		6254002	1					
ANR	6254055	CompoundStatement		8:17:145:145	6254002	1					
ANR	6254056	IfStatement	if ( arg [ ++ src_i ] == '\\0' )		6254002	0					
ANR	6254057	Condition	arg [ ++ src_i ] == '\\0'	2070:7:44235:44254	6254002	0	True				
ANR	6254058	EqualityExpression	arg [ ++ src_i ] == '\\0'		6254002	0		==			
ANR	6254059	ArrayIndexing	arg [ ++ src_i ]		6254002	0					
ANR	6254060	Identifier	arg		6254002	0					
ANR	6254061	UnaryExpression	++ src_i		6254002	1					
ANR	6254062	IncDec	++		6254002	0					
ANR	6254063	Identifier	src_i		6254002	1					
ANR	6254064	PrimaryExpression	'\\0'		6254002	1					
ANR	6254065	CompoundStatement		9:29:176:176	6254002	1					
ANR	6254066	BreakStatement	break ;	2071:4:44263:44268	6254002	0	True				
ANR	6254067	ExpressionStatement	arg [ dest_i ++ ] = arg [ src_i ]	2073:3:44278:44304	6254002	1	True				
ANR	6254068	AssignmentExpression	arg [ dest_i ++ ] = arg [ src_i ]		6254002	0		=			
ANR	6254069	ArrayIndexing	arg [ dest_i ++ ]		6254002	0					
ANR	6254070	Identifier	arg		6254002	0					
ANR	6254071	PostIncDecOperationExpression	dest_i ++		6254002	1					
ANR	6254072	Identifier	dest_i		6254002	0					
ANR	6254073	IncDec	++		6254002	1					
ANR	6254074	ArrayIndexing	arg [ src_i ]		6254002	1					
ANR	6254075	Identifier	arg		6254002	0					
ANR	6254076	Identifier	src_i		6254002	1					
ANR	6254077	ElseStatement	else		6254002	0					
ANR	6254078	CompoundStatement		13:9:234:234	6254002	0					
ANR	6254079	ExpressionStatement	arg [ dest_i ++ ] = c	2075:3:44320:44337	6254002	0	True				
ANR	6254080	AssignmentExpression	arg [ dest_i ++ ] = c		6254002	0		=			
ANR	6254081	ArrayIndexing	arg [ dest_i ++ ]		6254002	0					
ANR	6254082	Identifier	arg		6254002	0					
ANR	6254083	PostIncDecOperationExpression	dest_i ++		6254002	1					
ANR	6254084	Identifier	dest_i		6254002	0					
ANR	6254085	IncDec	++		6254002	1					
ANR	6254086	Identifier	c		6254002	1					
ANR	6254087	ExpressionStatement	arg [ dest_i ] = '\\0'	2078:1:44347:44365	6254002	3	True				
ANR	6254088	AssignmentExpression	arg [ dest_i ] = '\\0'		6254002	0		=			
ANR	6254089	ArrayIndexing	arg [ dest_i ]		6254002	0					
ANR	6254090	Identifier	arg		6254002	0					
ANR	6254091	Identifier	dest_i		6254002	1					
ANR	6254092	PrimaryExpression	'\\0'		6254002	1					
ANR	6254093	ReturnStatement	return dest_i ;	2079:1:44368:44381	6254002	4	True				
ANR	6254094	Identifier	dest_i		6254002	0					
ANR	6254095	ReturnType	R_API int		6254002	1					
ANR	6254096	Identifier	r_str_arg_unescape		6254002	2					
ANR	6254097	ParameterList	char * arg		6254002	3					
ANR	6254098	Parameter	char * arg	2062:29:44069:44077	6254002	0	True				
ANR	6254099	ParameterType	char *		6254002	0					
ANR	6254100	Identifier	arg		6254002	1					
ANR	6254101	CFGEntryNode	ENTRY		6254002		True				
ANR	6254102	CFGExitNode	EXIT		6254002		True				
ANR	6254103	Symbol	* dest_i		6254002						
ANR	6254104	Symbol	* src_i		6254002						
ANR	6254105	Symbol	c		6254002						
ANR	6254106	Symbol	dest_i		6254002						
ANR	6254107	Symbol	arg		6254002						
ANR	6254108	Symbol	src_i		6254002						
ANR	6254109	Symbol	* arg		6254002						
ANR	6254110	Function	r_str_argv	2082:0:44386:47177							
ANR	6254111	FunctionDef	"r_str_argv (const char * cmdline , int * _argc)"		6254110	0					
ANR	6254112	CompoundStatement		2082:57:44443:47177	6254110	0					
ANR	6254113	IdentifierDeclStatement	int argc = 0 ;	2083:1:44446:44458	6254110	0	True				
ANR	6254114	IdentifierDecl	argc = 0		6254110	0					
ANR	6254115	IdentifierDeclType	int		6254110	0					
ANR	6254116	Identifier	argc		6254110	1					
ANR	6254117	AssignmentExpression	argc = 0		6254110	2		=			
ANR	6254118	Identifier	argc		6254110	0					
ANR	6254119	PrimaryExpression	0		6254110	1					
ANR	6254120	IdentifierDeclStatement	int argv_len = 128 ;	2084:1:44461:44479	6254110	1	True				
ANR	6254121	IdentifierDecl	argv_len = 128		6254110	0					
ANR	6254122	IdentifierDeclType	int		6254110	0					
ANR	6254123	Identifier	argv_len		6254110	1					
ANR	6254124	AssignmentExpression	argv_len = 128		6254110	2		=			
ANR	6254125	Identifier	argv_len		6254110	0					
ANR	6254126	PrimaryExpression	128		6254110	1					
ANR	6254127	IdentifierDeclStatement	char * args ;	2085:1:44537:44547	6254110	2	True				
ANR	6254128	IdentifierDecl	* args		6254110	0					
ANR	6254129	IdentifierDeclType	char *		6254110	0					
ANR	6254130	Identifier	args		6254110	1					
ANR	6254131	IdentifierDeclStatement	int cmdline_current = 0 ;	2086:1:44595:44618	6254110	3	True				
ANR	6254132	IdentifierDecl	cmdline_current = 0		6254110	0					
ANR	6254133	IdentifierDeclType	int		6254110	0					
ANR	6254134	Identifier	cmdline_current		6254110	1					
ANR	6254135	AssignmentExpression	cmdline_current = 0		6254110	2		=			
ANR	6254136	Identifier	cmdline_current		6254110	0					
ANR	6254137	PrimaryExpression	0		6254110	1					
ANR	6254138	IdentifierDeclStatement	int args_current = 0 ;	2087:1:44660:44680	6254110	4	True				
ANR	6254139	IdentifierDecl	args_current = 0		6254110	0					
ANR	6254140	IdentifierDeclType	int		6254110	0					
ANR	6254141	Identifier	args_current		6254110	1					
ANR	6254142	AssignmentExpression	args_current = 0		6254110	2		=			
ANR	6254143	Identifier	args_current		6254110	0					
ANR	6254144	PrimaryExpression	0		6254110	1					
ANR	6254145	IdentifierDeclStatement	int arg_begin = 0 ;	2088:1:44719:44736	6254110	5	True				
ANR	6254146	IdentifierDecl	arg_begin = 0		6254110	0					
ANR	6254147	IdentifierDeclType	int		6254110	0					
ANR	6254148	Identifier	arg_begin		6254110	1					
ANR	6254149	AssignmentExpression	arg_begin = 0		6254110	2		=			
ANR	6254150	Identifier	arg_begin		6254110	0					
ANR	6254151	PrimaryExpression	0		6254110	1					
ANR	6254152	IfStatement	if ( ! cmdline || argv_len < 1 )		6254110	6					
ANR	6254153	Condition	! cmdline || argv_len < 1	2090:5:44808:44831	6254110	0	True				
ANR	6254154	OrExpression	! cmdline || argv_len < 1		6254110	0		||			
ANR	6254155	UnaryOperationExpression	! cmdline		6254110	0					
ANR	6254156	UnaryOperator	!		6254110	0					
ANR	6254157	Identifier	cmdline		6254110	1					
ANR	6254158	RelationalExpression	argv_len < 1		6254110	1		<			
ANR	6254159	Identifier	argv_len		6254110	0					
ANR	6254160	PrimaryExpression	1		6254110	1					
ANR	6254161	CompoundStatement		9:31:390:390	6254110	1					
ANR	6254162	ReturnStatement	return NULL ;	2091:2:44838:44849	6254110	0	True				
ANR	6254163	Identifier	NULL		6254110	0					
ANR	6254164	IdentifierDeclStatement	char * * argv = malloc ( argv_len * sizeof ( char * ) ) ;	2094:1:44856:44905	6254110	7	True				
ANR	6254165	IdentifierDecl	* * argv = malloc ( argv_len * sizeof ( char * ) )		6254110	0					
ANR	6254166	IdentifierDeclType	char * *		6254110	0					
ANR	6254167	Identifier	argv		6254110	1					
ANR	6254168	AssignmentExpression	* * argv = malloc ( argv_len * sizeof ( char * ) )		6254110	2		=			
ANR	6254169	Identifier	argv		6254110	0					
ANR	6254170	CallExpression	malloc ( argv_len * sizeof ( char * ) )		6254110	1					
ANR	6254171	Callee	malloc		6254110	0					
ANR	6254172	Identifier	malloc		6254110	0					
ANR	6254173	ArgumentList	argv_len * sizeof ( char * )		6254110	1					
ANR	6254174	Argument	argv_len * sizeof ( char * )		6254110	0					
ANR	6254175	MultiplicativeExpression	argv_len * sizeof ( char * )		6254110	0		*			
ANR	6254176	Identifier	argv_len		6254110	0					
ANR	6254177	SizeofExpression	sizeof ( char * )		6254110	1					
ANR	6254178	Sizeof	sizeof		6254110	0					
ANR	6254179	SizeofOperand	char *		6254110	1					
ANR	6254180	IfStatement	if ( ! argv )		6254110	8					
ANR	6254181	Condition	! argv	2095:5:44912:44916	6254110	0	True				
ANR	6254182	UnaryOperationExpression	! argv		6254110	0					
ANR	6254183	UnaryOperator	!		6254110	0					
ANR	6254184	Identifier	argv		6254110	1					
ANR	6254185	CompoundStatement		14:12:475:475	6254110	1					
ANR	6254186	ReturnStatement	return NULL ;	2096:2:44923:44934	6254110	0	True				
ANR	6254187	Identifier	NULL		6254110	0					
ANR	6254188	ExpressionStatement	args = malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )	2098:1:44940:44994	6254110	9	True				
ANR	6254189	AssignmentExpression	args = malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )		6254110	0		=			
ANR	6254190	Identifier	args		6254110	0					
ANR	6254191	CallExpression	malloc ( 128 + strlen ( cmdline ) * sizeof ( char ) )		6254110	1					
ANR	6254192	Callee	malloc		6254110	0					
ANR	6254193	Identifier	malloc		6254110	0					
ANR	6254194	ArgumentList	128 + strlen ( cmdline ) * sizeof ( char )		6254110	1					
ANR	6254195	Argument	128 + strlen ( cmdline ) * sizeof ( char )		6254110	0					
ANR	6254196	AdditiveExpression	128 + strlen ( cmdline ) * sizeof ( char )		6254110	0		+			
ANR	6254197	PrimaryExpression	128		6254110	0					
ANR	6254198	MultiplicativeExpression	strlen ( cmdline ) * sizeof ( char )		6254110	1		*			
ANR	6254199	CallExpression	strlen ( cmdline )		6254110	0					
ANR	6254200	Callee	strlen		6254110	0					
ANR	6254201	Identifier	strlen		6254110	0					
ANR	6254202	ArgumentList	cmdline		6254110	1					
ANR	6254203	Argument	cmdline		6254110	0					
ANR	6254204	Identifier	cmdline		6254110	0					
ANR	6254205	SizeofExpression	sizeof ( char )		6254110	1					
ANR	6254206	Sizeof	sizeof		6254110	0					
ANR	6254207	SizeofOperand	char		6254110	1					
ANR	6254208	IfStatement	if ( ! args )		6254110	10					
ANR	6254209	Condition	! args	2099:5:45071:45075	6254110	0	True				
ANR	6254210	UnaryOperationExpression	! args		6254110	0					
ANR	6254211	UnaryOperator	!		6254110	0					
ANR	6254212	Identifier	args		6254110	1					
ANR	6254213	CompoundStatement		18:12:634:634	6254110	1					
ANR	6254214	ExpressionStatement	free ( argv )	2100:2:45082:45093	6254110	0	True				
ANR	6254215	CallExpression	free ( argv )		6254110	0					
ANR	6254216	Callee	free		6254110	0					
ANR	6254217	Identifier	free		6254110	0					
ANR	6254218	ArgumentList	argv		6254110	1					
ANR	6254219	Argument	argv		6254110	0					
ANR	6254220	Identifier	argv		6254110	0					
ANR	6254221	ReturnStatement	return NULL ;	2101:2:45097:45108	6254110	1	True				
ANR	6254222	Identifier	NULL		6254110	0					
ANR	6254223	DoStatement	do		6254110	11					
ANR	6254224	CompoundStatement		26:2:749:769	6254110	0					
ANR	6254225	IdentifierDeclStatement	int escaped = 0 ;	2105:2:45150:45165	6254110	0	True				
ANR	6254226	IdentifierDecl	escaped = 0		6254110	0					
ANR	6254227	IdentifierDeclType	int		6254110	0					
ANR	6254228	Identifier	escaped		6254110	1					
ANR	6254229	AssignmentExpression	escaped = 0		6254110	2		=			
ANR	6254230	Identifier	escaped		6254110	0					
ANR	6254231	PrimaryExpression	0		6254110	1					
ANR	6254232	IdentifierDeclStatement	int singlequoted = 0 ;	2106:2:45169:45189	6254110	1	True				
ANR	6254233	IdentifierDecl	singlequoted = 0		6254110	0					
ANR	6254234	IdentifierDeclType	int		6254110	0					
ANR	6254235	Identifier	singlequoted		6254110	1					
ANR	6254236	AssignmentExpression	singlequoted = 0		6254110	2		=			
ANR	6254237	Identifier	singlequoted		6254110	0					
ANR	6254238	PrimaryExpression	0		6254110	1					
ANR	6254239	IdentifierDeclStatement	int doublequoted = 0 ;	2107:2:45193:45213	6254110	2	True				
ANR	6254240	IdentifierDecl	doublequoted = 0		6254110	0					
ANR	6254241	IdentifierDeclType	int		6254110	0					
ANR	6254242	Identifier	doublequoted		6254110	1					
ANR	6254243	AssignmentExpression	doublequoted = 0		6254110	2		=			
ANR	6254244	Identifier	doublequoted		6254110	0					
ANR	6254245	PrimaryExpression	0		6254110	1					
ANR	6254246	WhileStatement	while ( cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] ) )		6254110	3					
ANR	6254247	Condition	cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] )	2110:9:45285:45359	6254110	0	True				
ANR	6254248	AndExpression	cmdline [ cmdline_current ] != '\\0' && IS_WHITECHAR ( cmdline [ cmdline_current ] )		6254110	0		&&			
ANR	6254249	EqualityExpression	cmdline [ cmdline_current ] != '\\0'		6254110	0		!=			
ANR	6254250	ArrayIndexing	cmdline [ cmdline_current ]		6254110	0					
ANR	6254251	Identifier	cmdline		6254110	0					
ANR	6254252	Identifier	cmdline_current		6254110	1					
ANR	6254253	PrimaryExpression	'\\0'		6254110	1					
ANR	6254254	CallExpression	IS_WHITECHAR ( cmdline [ cmdline_current ] )		6254110	1					
ANR	6254255	Callee	IS_WHITECHAR		6254110	0					
ANR	6254256	Identifier	IS_WHITECHAR		6254110	0					
ANR	6254257	ArgumentList	cmdline [ cmdline_current ]		6254110	1					
ANR	6254258	Argument	cmdline [ cmdline_current ]		6254110	0					
ANR	6254259	ArrayIndexing	cmdline [ cmdline_current ]		6254110	0					
ANR	6254260	Identifier	cmdline		6254110	0					
ANR	6254261	Identifier	cmdline_current		6254110	1					
ANR	6254262	CompoundStatement		29:86:918:918	6254110	1					
ANR	6254263	ExpressionStatement	cmdline_current ++	2111:3:45367:45384	6254110	0	True				
ANR	6254264	PostIncDecOperationExpression	cmdline_current ++		6254110	0					
ANR	6254265	Identifier	cmdline_current		6254110	0					
ANR	6254266	IncDec	++		6254110	1					
ANR	6254267	IfStatement	if ( cmdline [ cmdline_current ] == '\\0' )		6254110	4					
ANR	6254268	Condition	cmdline [ cmdline_current ] == '\\0'	2114:6:45397:45428	6254110	0	True				
ANR	6254269	EqualityExpression	cmdline [ cmdline_current ] == '\\0'		6254110	0		==			
ANR	6254270	ArrayIndexing	cmdline [ cmdline_current ]		6254110	0					
ANR	6254271	Identifier	cmdline		6254110	0					
ANR	6254272	Identifier	cmdline_current		6254110	1					
ANR	6254273	PrimaryExpression	'\\0'		6254110	1					
ANR	6254274	CompoundStatement		33:40:987:987	6254110	1					
ANR	6254275	BreakStatement	break ;	2115:3:45436:45441	6254110	0	True				
ANR	6254276	WhileStatement	while ( 1 )		6254110	5					
ANR	6254277	Condition	1	2118:9:45500:45500	6254110	0	True				
ANR	6254278	PrimaryExpression	1		6254110	0					
ANR	6254279	CompoundStatement		39:3:1102:1128	6254110	1					
ANR	6254280	IdentifierDeclStatement	char c = cmdline [ cmdline_current ] ;	2119:3:45508:45541	6254110	0	True				
ANR	6254281	IdentifierDecl	c = cmdline [ cmdline_current ]		6254110	0					
ANR	6254282	IdentifierDeclType	char		6254110	0					
ANR	6254283	Identifier	c		6254110	1					
ANR	6254284	AssignmentExpression	c = cmdline [ cmdline_current ]		6254110	2		=			
ANR	6254285	Identifier	c		6254110	0					
ANR	6254286	ArrayIndexing	cmdline [ cmdline_current ]		6254110	1					
ANR	6254287	Identifier	cmdline		6254110	0					
ANR	6254288	Identifier	cmdline_current		6254110	1					
ANR	6254289	IdentifierDeclStatement	int end_of_current_arg = 0 ;	2120:3:45546:45572	6254110	1	True				
ANR	6254290	IdentifierDecl	end_of_current_arg = 0		6254110	0					
ANR	6254291	IdentifierDeclType	int		6254110	0					
ANR	6254292	Identifier	end_of_current_arg		6254110	1					
ANR	6254293	AssignmentExpression	end_of_current_arg = 0		6254110	2		=			
ANR	6254294	Identifier	end_of_current_arg		6254110	0					
ANR	6254295	PrimaryExpression	0		6254110	1					
ANR	6254296	IfStatement	if ( escaped )		6254110	2					
ANR	6254297	Condition	escaped	2121:7:45581:45587	6254110	0	True				
ANR	6254298	Identifier	escaped		6254110	0					
ANR	6254299	CompoundStatement		40:16:1146:1146	6254110	1					
ANR	6254300	SwitchStatement	switch ( c )		6254110	0					
ANR	6254301	Condition	c	2122:12:45604:45604	6254110	0	True				
ANR	6254302	Identifier	c		6254110	0					
ANR	6254303	CompoundStatement		41:15:1163:1163	6254110	1					
ANR	6254304	Label	case '\\'' :	2123:4:45613:45622	6254110	0	True				
ANR	6254305	Label	"case '""' :"	2124:4:45628:45636	6254110	1	True				
ANR	6254306	Label	case ' ' :	2125:4:45642:45650	6254110	2	True				
ANR	6254307	Label	case '\\\\' :	2126:4:45656:45665	6254110	3	True				
ANR	6254308	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2127:5:45672:45699	6254110	4	True				
ANR	6254309	AssignmentExpression	args [ args_current ++ ] = '\\\\'		6254110	0		=			
ANR	6254310	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254311	Identifier	args		6254110	0					
ANR	6254312	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254313	Identifier	args_current		6254110	0					
ANR	6254314	IncDec	++		6254110	1					
ANR	6254315	PrimaryExpression	'\\\\'		6254110	1					
ANR	6254316	ExpressionStatement	args [ args_current ++ ] = c	2128:5:45706:45730	6254110	5	True				
ANR	6254317	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254318	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254319	Identifier	args		6254110	0					
ANR	6254320	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254321	Identifier	args_current		6254110	0					
ANR	6254322	IncDec	++		6254110	1					
ANR	6254323	Identifier	c		6254110	1					
ANR	6254324	BreakStatement	break ;	2129:5:45737:45742	6254110	6	True				
ANR	6254325	Label	case '\\0' :	2130:4:45748:45757	6254110	7	True				
ANR	6254326	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2131:5:45764:45791	6254110	8	True				
ANR	6254327	AssignmentExpression	args [ args_current ++ ] = '\\\\'		6254110	0		=			
ANR	6254328	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254329	Identifier	args		6254110	0					
ANR	6254330	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254331	Identifier	args_current		6254110	0					
ANR	6254332	IncDec	++		6254110	1					
ANR	6254333	PrimaryExpression	'\\\\'		6254110	1					
ANR	6254334	ExpressionStatement	end_of_current_arg = 1	2132:5:45798:45820	6254110	9	True				
ANR	6254335	AssignmentExpression	end_of_current_arg = 1		6254110	0		=			
ANR	6254336	Identifier	end_of_current_arg		6254110	0					
ANR	6254337	PrimaryExpression	1		6254110	1					
ANR	6254338	BreakStatement	break ;	2133:5:45827:45832	6254110	10	True				
ANR	6254339	Label	default :	2134:4:45838:45845	6254110	11	True				
ANR	6254340	Identifier	default		6254110	0					
ANR	6254341	ExpressionStatement	args [ args_current ++ ] = '\\\\'	2135:5:45852:45879	6254110	12	True				
ANR	6254342	AssignmentExpression	args [ args_current ++ ] = '\\\\'		6254110	0		=			
ANR	6254343	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254344	Identifier	args		6254110	0					
ANR	6254345	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254346	Identifier	args_current		6254110	0					
ANR	6254347	IncDec	++		6254110	1					
ANR	6254348	PrimaryExpression	'\\\\'		6254110	1					
ANR	6254349	ExpressionStatement	args [ args_current ++ ] = c	2136:5:45886:45910	6254110	13	True				
ANR	6254350	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254351	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254352	Identifier	args		6254110	0					
ANR	6254353	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254354	Identifier	args_current		6254110	0					
ANR	6254355	IncDec	++		6254110	1					
ANR	6254356	Identifier	c		6254110	1					
ANR	6254357	ExpressionStatement	escaped = 0	2138:4:45922:45933	6254110	1	True				
ANR	6254358	AssignmentExpression	escaped = 0		6254110	0		=			
ANR	6254359	Identifier	escaped		6254110	0					
ANR	6254360	PrimaryExpression	0		6254110	1					
ANR	6254361	ElseStatement	else		6254110	0					
ANR	6254362	CompoundStatement		58:10:1501:1501	6254110	0					
ANR	6254363	SwitchStatement	switch ( c )		6254110	0					
ANR	6254364	Condition	c	2140:12:45959:45959	6254110	0	True				
ANR	6254365	Identifier	c		6254110	0					
ANR	6254366	CompoundStatement		59:15:1518:1518	6254110	1					
ANR	6254367	Label	case '\\'' :	2141:4:45968:45977	6254110	0	True				
ANR	6254368	IfStatement	if ( doublequoted )		6254110	1					
ANR	6254369	Condition	doublequoted	2142:9:45988:45999	6254110	0	True				
ANR	6254370	Identifier	doublequoted		6254110	0					
ANR	6254371	CompoundStatement		61:23:1558:1558	6254110	1					
ANR	6254372	ExpressionStatement	args [ args_current ++ ] = c	2143:6:46010:46034	6254110	0	True				
ANR	6254373	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254374	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254375	Identifier	args		6254110	0					
ANR	6254376	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254377	Identifier	args_current		6254110	0					
ANR	6254378	IncDec	++		6254110	1					
ANR	6254379	Identifier	c		6254110	1					
ANR	6254380	ElseStatement	else		6254110	0					
ANR	6254381	CompoundStatement		63:12:1604:1604	6254110	0					
ANR	6254382	ExpressionStatement	singlequoted = ! singlequoted	2145:6:46056:46084	6254110	0	True				
ANR	6254383	AssignmentExpression	singlequoted = ! singlequoted		6254110	0		=			
ANR	6254384	Identifier	singlequoted		6254110	0					
ANR	6254385	UnaryOperationExpression	! singlequoted		6254110	1					
ANR	6254386	UnaryOperator	!		6254110	0					
ANR	6254387	Identifier	singlequoted		6254110	1					
ANR	6254388	BreakStatement	break ;	2147:5:46098:46103	6254110	2	True				
ANR	6254389	Label	"case '""' :"	2148:4:46109:46117	6254110	3	True				
ANR	6254390	IfStatement	if ( singlequoted )		6254110	4					
ANR	6254391	Condition	singlequoted	2149:9:46128:46139	6254110	0	True				
ANR	6254392	Identifier	singlequoted		6254110	0					
ANR	6254393	CompoundStatement		68:23:1698:1698	6254110	1					
ANR	6254394	ExpressionStatement	args [ args_current ++ ] = c	2150:6:46150:46174	6254110	0	True				
ANR	6254395	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254396	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254397	Identifier	args		6254110	0					
ANR	6254398	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254399	Identifier	args_current		6254110	0					
ANR	6254400	IncDec	++		6254110	1					
ANR	6254401	Identifier	c		6254110	1					
ANR	6254402	ElseStatement	else		6254110	0					
ANR	6254403	CompoundStatement		70:12:1744:1744	6254110	0					
ANR	6254404	ExpressionStatement	doublequoted = ! doublequoted	2152:6:46196:46224	6254110	0	True				
ANR	6254405	AssignmentExpression	doublequoted = ! doublequoted		6254110	0		=			
ANR	6254406	Identifier	doublequoted		6254110	0					
ANR	6254407	UnaryOperationExpression	! doublequoted		6254110	1					
ANR	6254408	UnaryOperator	!		6254110	0					
ANR	6254409	Identifier	doublequoted		6254110	1					
ANR	6254410	BreakStatement	break ;	2154:5:46238:46243	6254110	5	True				
ANR	6254411	Label	case '\\\\' :	2155:4:46249:46258	6254110	6	True				
ANR	6254412	ExpressionStatement	escaped = 1	2156:5:46265:46276	6254110	7	True				
ANR	6254413	AssignmentExpression	escaped = 1		6254110	0		=			
ANR	6254414	Identifier	escaped		6254110	0					
ANR	6254415	PrimaryExpression	1		6254110	1					
ANR	6254416	BreakStatement	break ;	2157:5:46283:46288	6254110	8	True				
ANR	6254417	Label	case ' ' :	2158:4:46294:46302	6254110	9	True				
ANR	6254418	IfStatement	if ( singlequoted || doublequoted )		6254110	10					
ANR	6254419	Condition	singlequoted || doublequoted	2159:9:46313:46340	6254110	0	True				
ANR	6254420	OrExpression	singlequoted || doublequoted		6254110	0		||			
ANR	6254421	Identifier	singlequoted		6254110	0					
ANR	6254422	Identifier	doublequoted		6254110	1					
ANR	6254423	CompoundStatement		78:39:1899:1899	6254110	1					
ANR	6254424	ExpressionStatement	args [ args_current ++ ] = c	2160:6:46351:46375	6254110	0	True				
ANR	6254425	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254426	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254427	Identifier	args		6254110	0					
ANR	6254428	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254429	Identifier	args_current		6254110	0					
ANR	6254430	IncDec	++		6254110	1					
ANR	6254431	Identifier	c		6254110	1					
ANR	6254432	ElseStatement	else		6254110	0					
ANR	6254433	CompoundStatement		80:12:1945:1945	6254110	0					
ANR	6254434	ExpressionStatement	end_of_current_arg = 1	2162:6:46397:46419	6254110	0	True				
ANR	6254435	AssignmentExpression	end_of_current_arg = 1		6254110	0		=			
ANR	6254436	Identifier	end_of_current_arg		6254110	0					
ANR	6254437	PrimaryExpression	1		6254110	1					
ANR	6254438	BreakStatement	break ;	2164:5:46433:46438	6254110	11	True				
ANR	6254439	Label	case '\\0' :	2165:4:46444:46453	6254110	12	True				
ANR	6254440	ExpressionStatement	end_of_current_arg = 1	2166:5:46460:46482	6254110	13	True				
ANR	6254441	AssignmentExpression	end_of_current_arg = 1		6254110	0		=			
ANR	6254442	Identifier	end_of_current_arg		6254110	0					
ANR	6254443	PrimaryExpression	1		6254110	1					
ANR	6254444	BreakStatement	break ;	2167:5:46489:46494	6254110	14	True				
ANR	6254445	Label	default :	2168:4:46500:46507	6254110	15	True				
ANR	6254446	Identifier	default		6254110	0					
ANR	6254447	ExpressionStatement	args [ args_current ++ ] = c	2169:5:46514:46538	6254110	16	True				
ANR	6254448	AssignmentExpression	args [ args_current ++ ] = c		6254110	0		=			
ANR	6254449	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254450	Identifier	args		6254110	0					
ANR	6254451	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254452	Identifier	args_current		6254110	0					
ANR	6254453	IncDec	++		6254110	1					
ANR	6254454	Identifier	c		6254110	1					
ANR	6254455	IfStatement	if ( end_of_current_arg )		6254110	3					
ANR	6254456	Condition	end_of_current_arg	2172:7:46558:46575	6254110	0	True				
ANR	6254457	Identifier	end_of_current_arg		6254110	0					
ANR	6254458	CompoundStatement		91:27:2134:2134	6254110	1					
ANR	6254459	BreakStatement	break ;	2173:4:46584:46589	6254110	0	True				
ANR	6254460	ExpressionStatement	cmdline_current ++	2175:3:46599:46616	6254110	4	True				
ANR	6254461	PostIncDecOperationExpression	cmdline_current ++		6254110	0					
ANR	6254462	Identifier	cmdline_current		6254110	0					
ANR	6254463	IncDec	++		6254110	1					
ANR	6254464	ExpressionStatement	args [ args_current ++ ] = '\\0'	2177:2:46624:46651	6254110	6	True				
ANR	6254465	AssignmentExpression	args [ args_current ++ ] = '\\0'		6254110	0		=			
ANR	6254466	ArrayIndexing	args [ args_current ++ ]		6254110	0					
ANR	6254467	Identifier	args		6254110	0					
ANR	6254468	PostIncDecOperationExpression	args_current ++		6254110	1					
ANR	6254469	Identifier	args_current		6254110	0					
ANR	6254470	IncDec	++		6254110	1					
ANR	6254471	PrimaryExpression	'\\0'		6254110	1					
ANR	6254472	ExpressionStatement	argv [ argc ++ ] = strdup ( & args [ arg_begin ] )	2178:2:46655:46695	6254110	7	True				
ANR	6254473	AssignmentExpression	argv [ argc ++ ] = strdup ( & args [ arg_begin ] )		6254110	0		=			
ANR	6254474	ArrayIndexing	argv [ argc ++ ]		6254110	0					
ANR	6254475	Identifier	argv		6254110	0					
ANR	6254476	PostIncDecOperationExpression	argc ++		6254110	1					
ANR	6254477	Identifier	argc		6254110	0					
ANR	6254478	IncDec	++		6254110	1					
ANR	6254479	CallExpression	strdup ( & args [ arg_begin ] )		6254110	1					
ANR	6254480	Callee	strdup		6254110	0					
ANR	6254481	Identifier	strdup		6254110	0					
ANR	6254482	ArgumentList	& args [ arg_begin ]		6254110	1					
ANR	6254483	Argument	& args [ arg_begin ]		6254110	0					
ANR	6254484	UnaryOperationExpression	& args [ arg_begin ]		6254110	0					
ANR	6254485	UnaryOperator	&		6254110	0					
ANR	6254486	ArrayIndexing	args [ arg_begin ]		6254110	1					
ANR	6254487	Identifier	args		6254110	0					
ANR	6254488	Identifier	arg_begin		6254110	1					
ANR	6254489	IfStatement	if ( argc >= argv_len )		6254110	8					
ANR	6254490	Condition	argc >= argv_len	2179:6:46703:46718	6254110	0	True				
ANR	6254491	RelationalExpression	argc >= argv_len		6254110	0		>=			
ANR	6254492	Identifier	argc		6254110	0					
ANR	6254493	Identifier	argv_len		6254110	1					
ANR	6254494	CompoundStatement		100:3:2300:2355	6254110	1					
ANR	6254495	ExpressionStatement	argv_len *= 2	2180:3:46726:46739	6254110	0	True				
ANR	6254496	AssignmentExpression	argv_len *= 2		6254110	0		*=			
ANR	6254497	Identifier	argv_len		6254110	0					
ANR	6254498	PrimaryExpression	2		6254110	1					
ANR	6254499	IdentifierDeclStatement	"char * * tmp = realloc ( argv , argv_len * sizeof ( char * ) ) ;"	2181:3:46744:46799	6254110	1	True				
ANR	6254500	IdentifierDecl	"* * tmp = realloc ( argv , argv_len * sizeof ( char * ) )"		6254110	0					
ANR	6254501	IdentifierDeclType	char * *		6254110	0					
ANR	6254502	Identifier	tmp		6254110	1					
ANR	6254503	AssignmentExpression	"* * tmp = realloc ( argv , argv_len * sizeof ( char * ) )"		6254110	2		=			
ANR	6254504	Identifier	tmp		6254110	0					
ANR	6254505	CallExpression	"realloc ( argv , argv_len * sizeof ( char * ) )"		6254110	1					
ANR	6254506	Callee	realloc		6254110	0					
ANR	6254507	Identifier	realloc		6254110	0					
ANR	6254508	ArgumentList	argv		6254110	1					
ANR	6254509	Argument	argv		6254110	0					
ANR	6254510	Identifier	argv		6254110	0					
ANR	6254511	Argument	argv_len * sizeof ( char * )		6254110	1					
ANR	6254512	MultiplicativeExpression	argv_len * sizeof ( char * )		6254110	0		*			
ANR	6254513	Identifier	argv_len		6254110	0					
ANR	6254514	SizeofExpression	sizeof ( char * )		6254110	1					
ANR	6254515	Sizeof	sizeof		6254110	0					
ANR	6254516	SizeofOperand	char *		6254110	1					
ANR	6254517	IfStatement	if ( ! tmp )		6254110	2					
ANR	6254518	Condition	! tmp	2182:7:46808:46811	6254110	0	True				
ANR	6254519	UnaryOperationExpression	! tmp		6254110	0					
ANR	6254520	UnaryOperator	!		6254110	0					
ANR	6254521	Identifier	tmp		6254110	1					
ANR	6254522	CompoundStatement		101:13:2370:2370	6254110	1					
ANR	6254523	ExpressionStatement	free ( args )	2183:4:46820:46831	6254110	0	True				
ANR	6254524	CallExpression	free ( args )		6254110	0					
ANR	6254525	Callee	free		6254110	0					
ANR	6254526	Identifier	free		6254110	0					
ANR	6254527	ArgumentList	args		6254110	1					
ANR	6254528	Argument	args		6254110	0					
ANR	6254529	Identifier	args		6254110	0					
ANR	6254530	ExpressionStatement	free ( argv )	2184:4:46837:46848	6254110	1	True				
ANR	6254531	CallExpression	free ( argv )		6254110	0					
ANR	6254532	Callee	free		6254110	0					
ANR	6254533	Identifier	free		6254110	0					
ANR	6254534	ArgumentList	argv		6254110	1					
ANR	6254535	Argument	argv		6254110	0					
ANR	6254536	Identifier	argv		6254110	0					
ANR	6254537	ReturnStatement	return NULL ;	2185:4:46854:46865	6254110	2	True				
ANR	6254538	Identifier	NULL		6254110	0					
ANR	6254539	ExpressionStatement	argv = tmp	2187:3:46875:46885	6254110	3	True				
ANR	6254540	AssignmentExpression	argv = tmp		6254110	0		=			
ANR	6254541	Identifier	argv		6254110	0					
ANR	6254542	Identifier	tmp		6254110	1					
ANR	6254543	ExpressionStatement	arg_begin = args_current	2189:2:46893:46917	6254110	9	True				
ANR	6254544	AssignmentExpression	arg_begin = args_current		6254110	0		=			
ANR	6254545	Identifier	arg_begin		6254110	0					
ANR	6254546	Identifier	args_current		6254110	1					
ANR	6254547	Condition	cmdline [ cmdline_current ++ ] != '\\0'	2190:10:46929:46962	6254110	1	True				
ANR	6254548	EqualityExpression	cmdline [ cmdline_current ++ ] != '\\0'		6254110	0		!=			
ANR	6254549	ArrayIndexing	cmdline [ cmdline_current ++ ]		6254110	0					
ANR	6254550	Identifier	cmdline		6254110	0					
ANR	6254551	PostIncDecOperationExpression	cmdline_current ++		6254110	1					
ANR	6254552	Identifier	cmdline_current		6254110	0					
ANR	6254553	IncDec	++		6254110	1					
ANR	6254554	PrimaryExpression	'\\0'		6254110	1					
ANR	6254555	ExpressionStatement	argv [ argc ] = NULL	2191:1:46967:46984	6254110	12	True				
ANR	6254556	AssignmentExpression	argv [ argc ] = NULL		6254110	0		=			
ANR	6254557	ArrayIndexing	argv [ argc ]		6254110	0					
ANR	6254558	Identifier	argv		6254110	0					
ANR	6254559	Identifier	argc		6254110	1					
ANR	6254560	Identifier	NULL		6254110	1					
ANR	6254561	IdentifierDeclStatement	"char * * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) ) ;"	2192:1:46987:47044	6254110	13	True				
ANR	6254562	IdentifierDecl	"* * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		6254110	0					
ANR	6254563	IdentifierDeclType	char * *		6254110	0					
ANR	6254564	Identifier	tmp		6254110	1					
ANR	6254565	AssignmentExpression	"* * tmp = realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		6254110	2		=			
ANR	6254566	Identifier	tmp		6254110	0					
ANR	6254567	CallExpression	"realloc ( argv , ( argc + 1 ) * sizeof ( char * ) )"		6254110	1					
ANR	6254568	Callee	realloc		6254110	0					
ANR	6254569	Identifier	realloc		6254110	0					
ANR	6254570	ArgumentList	argv		6254110	1					
ANR	6254571	Argument	argv		6254110	0					
ANR	6254572	Identifier	argv		6254110	0					
ANR	6254573	Argument	( argc + 1 ) * sizeof ( char * )		6254110	1					
ANR	6254574	MultiplicativeExpression	( argc + 1 ) * sizeof ( char * )		6254110	0		*			
ANR	6254575	AdditiveExpression	argc + 1		6254110	0		+			
ANR	6254576	Identifier	argc		6254110	0					
ANR	6254577	PrimaryExpression	1		6254110	1					
ANR	6254578	SizeofExpression	sizeof ( char * )		6254110	1					
ANR	6254579	Sizeof	sizeof		6254110	0					
ANR	6254580	SizeofOperand	char *		6254110	1					
ANR	6254581	IfStatement	if ( tmp )		6254110	14					
ANR	6254582	Condition	tmp	2193:5:47051:47053	6254110	0	True				
ANR	6254583	Identifier	tmp		6254110	0					
ANR	6254584	CompoundStatement		112:10:2612:2612	6254110	1					
ANR	6254585	ExpressionStatement	argv = tmp	2194:2:47060:47070	6254110	0	True				
ANR	6254586	AssignmentExpression	argv = tmp		6254110	0		=			
ANR	6254587	Identifier	argv		6254110	0					
ANR	6254588	Identifier	tmp		6254110	1					
ANR	6254589	ElseStatement	else		6254110	0					
ANR	6254590	CompoundStatement		114:8:2636:2636	6254110	0					
ANR	6254591	ExpressionStatement	free ( argv )	2196:2:47084:47095	6254110	0	True				
ANR	6254592	CallExpression	free ( argv )		6254110	0					
ANR	6254593	Callee	free		6254110	0					
ANR	6254594	Identifier	free		6254110	0					
ANR	6254595	ArgumentList	argv		6254110	1					
ANR	6254596	Argument	argv		6254110	0					
ANR	6254597	Identifier	argv		6254110	0					
ANR	6254598	ExpressionStatement	argv = NULL	2197:2:47099:47110	6254110	1	True				
ANR	6254599	AssignmentExpression	argv = NULL		6254110	0		=			
ANR	6254600	Identifier	argv		6254110	0					
ANR	6254601	Identifier	NULL		6254110	1					
ANR	6254602	IfStatement	if ( _argc )		6254110	15					
ANR	6254603	Condition	_argc	2199:5:47120:47124	6254110	0	True				
ANR	6254604	Identifier	_argc		6254110	0					
ANR	6254605	CompoundStatement		118:12:2683:2683	6254110	1					
ANR	6254606	ExpressionStatement	* _argc = argc	2200:2:47131:47144	6254110	0	True				
ANR	6254607	AssignmentExpression	* _argc = argc		6254110	0		=			
ANR	6254608	UnaryOperationExpression	* _argc		6254110	0					
ANR	6254609	UnaryOperator	*		6254110	0					
ANR	6254610	Identifier	_argc		6254110	1					
ANR	6254611	Identifier	argc		6254110	1					
ANR	6254612	ExpressionStatement	free ( args )	2202:1:47150:47161	6254110	16	True				
ANR	6254613	CallExpression	free ( args )		6254110	0					
ANR	6254614	Callee	free		6254110	0					
ANR	6254615	Identifier	free		6254110	0					
ANR	6254616	ArgumentList	args		6254110	1					
ANR	6254617	Argument	args		6254110	0					
ANR	6254618	Identifier	args		6254110	0					
ANR	6254619	ReturnStatement	return argv ;	2203:1:47164:47175	6254110	17	True				
ANR	6254620	Identifier	argv		6254110	0					
ANR	6254621	ReturnType	R_API char * *		6254110	1					
ANR	6254622	Identifier	r_str_argv		6254110	2					
ANR	6254623	ParameterList	"const char * cmdline , int * _argc"		6254110	3					
ANR	6254624	Parameter	const char * cmdline	2082:24:44410:44428	6254110	0	True				
ANR	6254625	ParameterType	const char *		6254110	0					
ANR	6254626	Identifier	cmdline		6254110	1					
ANR	6254627	Parameter	int * _argc	2082:45:44431:44440	6254110	1	True				
ANR	6254628	ParameterType	int *		6254110	0					
ANR	6254629	Identifier	_argc		6254110	1					
ANR	6254630	CFGEntryNode	ENTRY		6254110		True				
ANR	6254631	CFGExitNode	EXIT		6254110		True				
ANR	6254632	Symbol	_argc		6254110						
ANR	6254633	Symbol	IS_WHITECHAR		6254110						
ANR	6254634	Symbol	arg_begin		6254110						
ANR	6254635	Symbol	* argv		6254110						
ANR	6254636	Symbol	realloc		6254110						
ANR	6254637	Symbol	argv		6254110						
ANR	6254638	Symbol	singlequoted		6254110						
ANR	6254639	Symbol	* args		6254110						
ANR	6254640	Symbol	strlen		6254110						
ANR	6254641	Symbol	cmdline		6254110						
ANR	6254642	Symbol	end_of_current_arg		6254110						
ANR	6254643	Symbol	tmp		6254110						
ANR	6254644	Symbol	* argc		6254110						
ANR	6254645	Symbol	argc		6254110						
ANR	6254646	Symbol	malloc		6254110						
ANR	6254647	Symbol	NULL		6254110						
ANR	6254648	Symbol	c		6254110						
ANR	6254649	Symbol	* cmdline		6254110						
ANR	6254650	Symbol	doublequoted		6254110						
ANR	6254651	Symbol	cmdline_current		6254110						
ANR	6254652	Symbol	* cmdline_current		6254110						
ANR	6254653	Symbol	args		6254110						
ANR	6254654	Symbol	escaped		6254110						
ANR	6254655	Symbol	argv_len		6254110						
ANR	6254656	Symbol	args_current		6254110						
ANR	6254657	Symbol	strdup		6254110						
ANR	6254658	Symbol	* _argc		6254110						
ANR	6254659	Function	r_str_argv_free	2206:0:47180:47326							
ANR	6254660	FunctionDef	r_str_argv_free (char * * argv)		6254659	0					
ANR	6254661	CompoundStatement		2206:40:47220:47326	6254659	0					
ANR	6254662	IdentifierDeclStatement	int argc = 0 ;	2207:1:47223:47235	6254659	0	True				
ANR	6254663	IdentifierDecl	argc = 0		6254659	0					
ANR	6254664	IdentifierDeclType	int		6254659	0					
ANR	6254665	Identifier	argc		6254659	1					
ANR	6254666	AssignmentExpression	argc = 0		6254659	2		=			
ANR	6254667	Identifier	argc		6254659	0					
ANR	6254668	PrimaryExpression	0		6254659	1					
ANR	6254669	IfStatement	if ( ! argv )		6254659	1					
ANR	6254670	Condition	! argv	2208:5:47242:47246	6254659	0	True				
ANR	6254671	UnaryOperationExpression	! argv		6254659	0					
ANR	6254672	UnaryOperator	!		6254659	0					
ANR	6254673	Identifier	argv		6254659	1					
ANR	6254674	CompoundStatement		3:12:28:28	6254659	1					
ANR	6254675	ReturnStatement	return ;	2209:2:47253:47259	6254659	0	True				
ANR	6254676	WhileStatement	while ( argv [ argc ] )		6254659	2					
ANR	6254677	Condition	argv [ argc ]	2211:8:47272:47281	6254659	0	True				
ANR	6254678	ArrayIndexing	argv [ argc ]		6254659	0					
ANR	6254679	Identifier	argv		6254659	0					
ANR	6254680	Identifier	argc		6254659	1					
ANR	6254681	CompoundStatement		6:20:63:63	6254659	1					
ANR	6254682	ExpressionStatement	free ( argv [ argc ++ ] )	2212:2:47288:47307	6254659	0	True				
ANR	6254683	CallExpression	free ( argv [ argc ++ ] )		6254659	0					
ANR	6254684	Callee	free		6254659	0					
ANR	6254685	Identifier	free		6254659	0					
ANR	6254686	ArgumentList	argv [ argc ++ ]		6254659	1					
ANR	6254687	Argument	argv [ argc ++ ]		6254659	0					
ANR	6254688	ArrayIndexing	argv [ argc ++ ]		6254659	0					
ANR	6254689	Identifier	argv		6254659	0					
ANR	6254690	PostIncDecOperationExpression	argc ++		6254659	1					
ANR	6254691	Identifier	argc		6254659	0					
ANR	6254692	IncDec	++		6254659	1					
ANR	6254693	ExpressionStatement	free ( argv )	2214:1:47313:47324	6254659	3	True				
ANR	6254694	CallExpression	free ( argv )		6254659	0					
ANR	6254695	Callee	free		6254659	0					
ANR	6254696	Identifier	free		6254659	0					
ANR	6254697	ArgumentList	argv		6254659	1					
ANR	6254698	Argument	argv		6254659	0					
ANR	6254699	Identifier	argv		6254659	0					
ANR	6254700	ReturnType	R_API void		6254659	1					
ANR	6254701	Identifier	r_str_argv_free		6254659	2					
ANR	6254702	ParameterList	char * * argv		6254659	3					
ANR	6254703	Parameter	char * * argv	2206:27:47207:47217	6254659	0	True				
ANR	6254704	ParameterType	char * *		6254659	0					
ANR	6254705	Identifier	argv		6254659	1					
ANR	6254706	CFGEntryNode	ENTRY		6254659		True				
ANR	6254707	CFGExitNode	EXIT		6254659		True				
ANR	6254708	Symbol	argc		6254659						
ANR	6254709	Symbol	* argv		6254659						
ANR	6254710	Symbol	argv		6254659						
ANR	6254711	Symbol	* argc		6254659						
ANR	6254712	Function	r_str_firstbut	2217:6:47335:47853							
ANR	6254713	FunctionDef	"r_str_firstbut (const char * s , char ch , const char * but)"		6254712	0					
ANR	6254714	CompoundStatement		2217:74:47403:47853	6254712	0					
ANR	6254715	IdentifierDeclStatement	"int idx , _b = 0 ;"	2218:1:47406:47421	6254712	0	True				
ANR	6254716	IdentifierDecl	idx		6254712	0					
ANR	6254717	IdentifierDeclType	int		6254712	0					
ANR	6254718	Identifier	idx		6254712	1					
ANR	6254719	IdentifierDecl	_b = 0		6254712	1					
ANR	6254720	IdentifierDeclType	int		6254712	0					
ANR	6254721	Identifier	_b		6254712	1					
ANR	6254722	AssignmentExpression	_b = 0		6254712	2		=			
ANR	6254723	Identifier	_b		6254712	0					
ANR	6254724	PrimaryExpression	0		6254712	1					
ANR	6254725	IdentifierDeclStatement	ut8 * b = ( ut8 * ) & _b ;	2219:1:47424:47442	6254712	1	True				
ANR	6254726	IdentifierDecl	* b = ( ut8 * ) & _b		6254712	0					
ANR	6254727	IdentifierDeclType	ut8 *		6254712	0					
ANR	6254728	Identifier	b		6254712	1					
ANR	6254729	AssignmentExpression	* b = ( ut8 * ) & _b		6254712	2		=			
ANR	6254730	Identifier	b		6254712	0					
ANR	6254731	CastExpression	( ut8 * ) & _b		6254712	1					
ANR	6254732	CastTarget	ut8 *		6254712	0					
ANR	6254733	UnaryOperationExpression	& _b		6254712	1					
ANR	6254734	UnaryOperator	&		6254712	0					
ANR	6254735	Identifier	_b		6254712	1					
ANR	6254736	IdentifierDeclStatement	"const char * isbut , * p ;"	2220:1:47445:47466	6254712	2	True				
ANR	6254737	IdentifierDecl	* isbut		6254712	0					
ANR	6254738	IdentifierDeclType	const char *		6254712	0					
ANR	6254739	Identifier	isbut		6254712	1					
ANR	6254740	IdentifierDecl	* p		6254712	1					
ANR	6254741	IdentifierDeclType	const char *		6254712	0					
ANR	6254742	Identifier	p		6254712	1					
ANR	6254743	IdentifierDeclStatement	const int bsz = sizeof ( _b ) * 8 ;	2221:1:47469:47500	6254712	3	True				
ANR	6254744	IdentifierDecl	bsz = sizeof ( _b ) * 8		6254712	0					
ANR	6254745	IdentifierDeclType	const int		6254712	0					
ANR	6254746	Identifier	bsz		6254712	1					
ANR	6254747	AssignmentExpression	bsz = sizeof ( _b ) * 8		6254712	2		=			
ANR	6254748	Identifier	bsz		6254712	0					
ANR	6254749	MultiplicativeExpression	sizeof ( _b ) * 8		6254712	1		*			
ANR	6254750	SizeofExpression	sizeof ( _b )		6254712	0					
ANR	6254751	Sizeof	sizeof		6254712	0					
ANR	6254752	SizeofOperand	_b		6254712	1					
ANR	6254753	PrimaryExpression	8		6254712	1					
ANR	6254754	IfStatement	if ( ! but )		6254712	4					
ANR	6254755	Condition	! but	2222:5:47507:47510	6254712	0	True				
ANR	6254756	UnaryOperationExpression	! but		6254712	0					
ANR	6254757	UnaryOperator	!		6254712	0					
ANR	6254758	Identifier	but		6254712	1					
ANR	6254759	CompoundStatement		6:11:109:109	6254712	1					
ANR	6254760	ReturnStatement	"return strchr ( s , ch ) ;"	2223:2:47517:47538	6254712	0	True				
ANR	6254761	CallExpression	"strchr ( s , ch )"		6254712	0					
ANR	6254762	Callee	strchr		6254712	0					
ANR	6254763	Identifier	strchr		6254712	0					
ANR	6254764	ArgumentList	s		6254712	1					
ANR	6254765	Argument	s		6254712	0					
ANR	6254766	Identifier	s		6254712	0					
ANR	6254767	Argument	ch		6254712	1					
ANR	6254768	Identifier	ch		6254712	0					
ANR	6254769	IfStatement	if ( strlen ( but ) >= bsz )		6254712	5					
ANR	6254770	Condition	strlen ( but ) >= bsz	2225:5:47548:47566	6254712	0	True				
ANR	6254771	RelationalExpression	strlen ( but ) >= bsz		6254712	0		>=			
ANR	6254772	CallExpression	strlen ( but )		6254712	0					
ANR	6254773	Callee	strlen		6254712	0					
ANR	6254774	Identifier	strlen		6254712	0					
ANR	6254775	ArgumentList	but		6254712	1					
ANR	6254776	Argument	but		6254712	0					
ANR	6254777	Identifier	but		6254712	0					
ANR	6254778	Identifier	bsz		6254712	1					
ANR	6254779	CompoundStatement		9:26:165:165	6254712	1					
ANR	6254780	ExpressionStatement	"eprintf ( ""r_str_firstbut: but string too long\\n"" )"	2226:2:47573:47622	6254712	0	True				
ANR	6254781	CallExpression	"eprintf ( ""r_str_firstbut: but string too long\\n"" )"		6254712	0					
ANR	6254782	Callee	eprintf		6254712	0					
ANR	6254783	Identifier	eprintf		6254712	0					
ANR	6254784	ArgumentList	"""r_str_firstbut: but string too long\\n"""		6254712	1					
ANR	6254785	Argument	"""r_str_firstbut: but string too long\\n"""		6254712	0					
ANR	6254786	PrimaryExpression	"""r_str_firstbut: but string too long\\n"""		6254712	0					
ANR	6254787	ReturnStatement	return NULL ;	2227:2:47626:47637	6254712	1	True				
ANR	6254788	Identifier	NULL		6254712	0					
ANR	6254789	ForStatement	for ( p = s ; * p ; p ++ )		6254712	6					
ANR	6254790	ForInit	p = s ;	2229:6:47648:47653	6254712	0	True				
ANR	6254791	AssignmentExpression	p = s		6254712	0		=			
ANR	6254792	Identifier	p		6254712	0					
ANR	6254793	Identifier	s		6254712	1					
ANR	6254794	Condition	* p	2229:13:47655:47656	6254712	1	True				
ANR	6254795	UnaryOperationExpression	* p		6254712	0					
ANR	6254796	UnaryOperator	*		6254712	0					
ANR	6254797	Identifier	p		6254712	1					
ANR	6254798	PostIncDecOperationExpression	p ++	2229:17:47659:47661	6254712	2	True				
ANR	6254799	Identifier	p		6254712	0					
ANR	6254800	IncDec	++		6254712	1					
ANR	6254801	CompoundStatement		13:22:260:260	6254712	3					
ANR	6254802	ExpressionStatement	"isbut = strchr ( but , * p )"	2230:2:47668:47692	6254712	0	True				
ANR	6254803	AssignmentExpression	"isbut = strchr ( but , * p )"		6254712	0		=			
ANR	6254804	Identifier	isbut		6254712	0					
ANR	6254805	CallExpression	"strchr ( but , * p )"		6254712	1					
ANR	6254806	Callee	strchr		6254712	0					
ANR	6254807	Identifier	strchr		6254712	0					
ANR	6254808	ArgumentList	but		6254712	1					
ANR	6254809	Argument	but		6254712	0					
ANR	6254810	Identifier	but		6254712	0					
ANR	6254811	Argument	* p		6254712	1					
ANR	6254812	UnaryOperationExpression	* p		6254712	0					
ANR	6254813	UnaryOperator	*		6254712	0					
ANR	6254814	Identifier	p		6254712	1					
ANR	6254815	IfStatement	if ( isbut )		6254712	1					
ANR	6254816	Condition	isbut	2231:6:47700:47704	6254712	0	True				
ANR	6254817	Identifier	isbut		6254712	0					
ANR	6254818	CompoundStatement		15:13:303:303	6254712	1					
ANR	6254819	ExpressionStatement	idx = ( int ) ( size_t ) ( isbut - but )	2232:3:47712:47744	6254712	0	True				
ANR	6254820	AssignmentExpression	idx = ( int ) ( size_t ) ( isbut - but )		6254712	0		=			
ANR	6254821	Identifier	idx		6254712	0					
ANR	6254822	CastExpression	( int ) ( size_t ) ( isbut - but )		6254712	1					
ANR	6254823	CastTarget	int		6254712	0					
ANR	6254824	CastExpression	( size_t ) ( isbut - but )		6254712	1					
ANR	6254825	CastTarget	size_t		6254712	0					
ANR	6254826	AdditiveExpression	isbut - but		6254712	1		-			
ANR	6254827	Identifier	isbut		6254712	0					
ANR	6254828	Identifier	but		6254712	1					
ANR	6254829	ExpressionStatement	"_b = R_BIT_TOGGLE ( b , idx )"	2233:3:47749:47775	6254712	1	True				
ANR	6254830	AssignmentExpression	"_b = R_BIT_TOGGLE ( b , idx )"		6254712	0		=			
ANR	6254831	Identifier	_b		6254712	0					
ANR	6254832	CallExpression	"R_BIT_TOGGLE ( b , idx )"		6254712	1					
ANR	6254833	Callee	R_BIT_TOGGLE		6254712	0					
ANR	6254834	Identifier	R_BIT_TOGGLE		6254712	0					
ANR	6254835	ArgumentList	b		6254712	1					
ANR	6254836	Argument	b		6254712	0					
ANR	6254837	Identifier	b		6254712	0					
ANR	6254838	Argument	idx		6254712	1					
ANR	6254839	Identifier	idx		6254712	0					
ANR	6254840	ContinueStatement	continue ;	2234:3:47780:47788	6254712	2	True				
ANR	6254841	IfStatement	if ( * p == ch && ! _b )		6254712	2					
ANR	6254842	Condition	* p == ch && ! _b	2236:6:47800:47814	6254712	0	True				
ANR	6254843	AndExpression	* p == ch && ! _b		6254712	0		&&			
ANR	6254844	EqualityExpression	* p == ch		6254712	0		==			
ANR	6254845	UnaryOperationExpression	* p		6254712	0					
ANR	6254846	UnaryOperator	*		6254712	0					
ANR	6254847	Identifier	p		6254712	1					
ANR	6254848	Identifier	ch		6254712	1					
ANR	6254849	UnaryOperationExpression	! _b		6254712	1					
ANR	6254850	UnaryOperator	!		6254712	0					
ANR	6254851	Identifier	_b		6254712	1					
ANR	6254852	CompoundStatement		20:23:413:413	6254712	1					
ANR	6254853	ReturnStatement	return p ;	2237:3:47822:47830	6254712	0	True				
ANR	6254854	Identifier	p		6254712	0					
ANR	6254855	ReturnStatement	return NULL ;	2240:1:47840:47851	6254712	7	True				
ANR	6254856	Identifier	NULL		6254712	0					
ANR	6254857	ReturnType	const char *		6254712	1					
ANR	6254858	Identifier	r_str_firstbut		6254712	2					
ANR	6254859	ParameterList	"const char * s , char ch , const char * but"		6254712	3					
ANR	6254860	Parameter	const char * s	2217:33:47362:47374	6254712	0	True				
ANR	6254861	ParameterType	const char *		6254712	0					
ANR	6254862	Identifier	s		6254712	1					
ANR	6254863	Parameter	char ch	2217:48:47377:47383	6254712	1	True				
ANR	6254864	ParameterType	char		6254712	0					
ANR	6254865	Identifier	ch		6254712	1					
ANR	6254866	Parameter	const char * but	2217:57:47386:47400	6254712	2	True				
ANR	6254867	ParameterType	const char *		6254712	0					
ANR	6254868	Identifier	but		6254712	1					
ANR	6254869	CFGEntryNode	ENTRY		6254712		True				
ANR	6254870	CFGExitNode	EXIT		6254712		True				
ANR	6254871	Symbol	but		6254712						
ANR	6254872	Symbol	b		6254712						
ANR	6254873	Symbol	_b		6254712						
ANR	6254874	Symbol	NULL		6254712						
ANR	6254875	Symbol	ch		6254712						
ANR	6254876	Symbol	bsz		6254712						
ANR	6254877	Symbol	strchr		6254712						
ANR	6254878	Symbol	isbut		6254712						
ANR	6254879	Symbol	& _b		6254712						
ANR	6254880	Symbol	R_BIT_TOGGLE		6254712						
ANR	6254881	Symbol	p		6254712						
ANR	6254882	Symbol	strlen		6254712						
ANR	6254883	Symbol	s		6254712						
ANR	6254884	Symbol	* p		6254712						
ANR	6254885	Symbol	idx		6254712						
ANR	6254886	Function	r_str_lastbut	2243:6:47862:48390							
ANR	6254887	FunctionDef	"r_str_lastbut (const char * s , char ch , const char * but)"		6254886	0					
ANR	6254888	CompoundStatement		2243:73:47929:48390	6254886	0					
ANR	6254889	IdentifierDeclStatement	"int idx , _b = 0 ;"	2244:1:47932:47947	6254886	0	True				
ANR	6254890	IdentifierDecl	idx		6254886	0					
ANR	6254891	IdentifierDeclType	int		6254886	0					
ANR	6254892	Identifier	idx		6254886	1					
ANR	6254893	IdentifierDecl	_b = 0		6254886	1					
ANR	6254894	IdentifierDeclType	int		6254886	0					
ANR	6254895	Identifier	_b		6254886	1					
ANR	6254896	AssignmentExpression	_b = 0		6254886	2		=			
ANR	6254897	Identifier	_b		6254886	0					
ANR	6254898	PrimaryExpression	0		6254886	1					
ANR	6254899	IdentifierDeclStatement	ut8 * b = ( ut8 * ) & _b ;	2245:1:47950:47968	6254886	1	True				
ANR	6254900	IdentifierDecl	* b = ( ut8 * ) & _b		6254886	0					
ANR	6254901	IdentifierDeclType	ut8 *		6254886	0					
ANR	6254902	Identifier	b		6254886	1					
ANR	6254903	AssignmentExpression	* b = ( ut8 * ) & _b		6254886	2		=			
ANR	6254904	Identifier	b		6254886	0					
ANR	6254905	CastExpression	( ut8 * ) & _b		6254886	1					
ANR	6254906	CastTarget	ut8 *		6254886	0					
ANR	6254907	UnaryOperationExpression	& _b		6254886	1					
ANR	6254908	UnaryOperator	&		6254886	0					
ANR	6254909	Identifier	_b		6254886	1					
ANR	6254910	IdentifierDeclStatement	"const char * isbut , * p , * lp = NULL ;"	2246:1:47971:48004	6254886	2	True				
ANR	6254911	IdentifierDecl	* isbut		6254886	0					
ANR	6254912	IdentifierDeclType	const char *		6254886	0					
ANR	6254913	Identifier	isbut		6254886	1					
ANR	6254914	IdentifierDecl	* p		6254886	1					
ANR	6254915	IdentifierDeclType	const char *		6254886	0					
ANR	6254916	Identifier	p		6254886	1					
ANR	6254917	IdentifierDecl	* lp = NULL		6254886	2					
ANR	6254918	IdentifierDeclType	const char *		6254886	0					
ANR	6254919	Identifier	lp		6254886	1					
ANR	6254920	AssignmentExpression	* lp = NULL		6254886	2		=			
ANR	6254921	Identifier	NULL		6254886	0					
ANR	6254922	Identifier	NULL		6254886	1					
ANR	6254923	IdentifierDeclStatement	const int bsz = sizeof ( _b ) * 8 ;	2247:1:48007:48038	6254886	3	True				
ANR	6254924	IdentifierDecl	bsz = sizeof ( _b ) * 8		6254886	0					
ANR	6254925	IdentifierDeclType	const int		6254886	0					
ANR	6254926	Identifier	bsz		6254886	1					
ANR	6254927	AssignmentExpression	bsz = sizeof ( _b ) * 8		6254886	2		=			
ANR	6254928	Identifier	bsz		6254886	0					
ANR	6254929	MultiplicativeExpression	sizeof ( _b ) * 8		6254886	1		*			
ANR	6254930	SizeofExpression	sizeof ( _b )		6254886	0					
ANR	6254931	Sizeof	sizeof		6254886	0					
ANR	6254932	SizeofOperand	_b		6254886	1					
ANR	6254933	PrimaryExpression	8		6254886	1					
ANR	6254934	IfStatement	if ( ! but )		6254886	4					
ANR	6254935	Condition	! but	2248:5:48045:48048	6254886	0	True				
ANR	6254936	UnaryOperationExpression	! but		6254886	0					
ANR	6254937	UnaryOperator	!		6254886	0					
ANR	6254938	Identifier	but		6254886	1					
ANR	6254939	CompoundStatement		6:11:121:121	6254886	1					
ANR	6254940	ReturnStatement	"return r_str_lchr ( s , ch ) ;"	2249:2:48055:48080	6254886	0	True				
ANR	6254941	CallExpression	"r_str_lchr ( s , ch )"		6254886	0					
ANR	6254942	Callee	r_str_lchr		6254886	0					
ANR	6254943	Identifier	r_str_lchr		6254886	0					
ANR	6254944	ArgumentList	s		6254886	1					
ANR	6254945	Argument	s		6254886	0					
ANR	6254946	Identifier	s		6254886	0					
ANR	6254947	Argument	ch		6254886	1					
ANR	6254948	Identifier	ch		6254886	0					
ANR	6254949	IfStatement	if ( strlen ( but ) >= bsz )		6254886	5					
ANR	6254950	Condition	strlen ( but ) >= bsz	2251:5:48090:48108	6254886	0	True				
ANR	6254951	RelationalExpression	strlen ( but ) >= bsz		6254886	0		>=			
ANR	6254952	CallExpression	strlen ( but )		6254886	0					
ANR	6254953	Callee	strlen		6254886	0					
ANR	6254954	Identifier	strlen		6254886	0					
ANR	6254955	ArgumentList	but		6254886	1					
ANR	6254956	Argument	but		6254886	0					
ANR	6254957	Identifier	but		6254886	0					
ANR	6254958	Identifier	bsz		6254886	1					
ANR	6254959	CompoundStatement		9:26:181:181	6254886	1					
ANR	6254960	ExpressionStatement	"eprintf ( ""r_str_lastbut: but string too long\\n"" )"	2252:2:48115:48163	6254886	0	True				
ANR	6254961	CallExpression	"eprintf ( ""r_str_lastbut: but string too long\\n"" )"		6254886	0					
ANR	6254962	Callee	eprintf		6254886	0					
ANR	6254963	Identifier	eprintf		6254886	0					
ANR	6254964	ArgumentList	"""r_str_lastbut: but string too long\\n"""		6254886	1					
ANR	6254965	Argument	"""r_str_lastbut: but string too long\\n"""		6254886	0					
ANR	6254966	PrimaryExpression	"""r_str_lastbut: but string too long\\n"""		6254886	0					
ANR	6254967	ReturnStatement	return NULL ;	2253:2:48167:48178	6254886	1	True				
ANR	6254968	Identifier	NULL		6254886	0					
ANR	6254969	ForStatement	for ( p = s ; * p ; p ++ )		6254886	6					
ANR	6254970	ForInit	p = s ;	2255:6:48189:48194	6254886	0	True				
ANR	6254971	AssignmentExpression	p = s		6254886	0		=			
ANR	6254972	Identifier	p		6254886	0					
ANR	6254973	Identifier	s		6254886	1					
ANR	6254974	Condition	* p	2255:13:48196:48197	6254886	1	True				
ANR	6254975	UnaryOperationExpression	* p		6254886	0					
ANR	6254976	UnaryOperator	*		6254886	0					
ANR	6254977	Identifier	p		6254886	1					
ANR	6254978	PostIncDecOperationExpression	p ++	2255:17:48200:48202	6254886	2	True				
ANR	6254979	Identifier	p		6254886	0					
ANR	6254980	IncDec	++		6254886	1					
ANR	6254981	CompoundStatement		13:22:275:275	6254886	3					
ANR	6254982	ExpressionStatement	"isbut = strchr ( but , * p )"	2256:2:48209:48233	6254886	0	True				
ANR	6254983	AssignmentExpression	"isbut = strchr ( but , * p )"		6254886	0		=			
ANR	6254984	Identifier	isbut		6254886	0					
ANR	6254985	CallExpression	"strchr ( but , * p )"		6254886	1					
ANR	6254986	Callee	strchr		6254886	0					
ANR	6254987	Identifier	strchr		6254886	0					
ANR	6254988	ArgumentList	but		6254886	1					
ANR	6254989	Argument	but		6254886	0					
ANR	6254990	Identifier	but		6254886	0					
ANR	6254991	Argument	* p		6254886	1					
ANR	6254992	UnaryOperationExpression	* p		6254886	0					
ANR	6254993	UnaryOperator	*		6254886	0					
ANR	6254994	Identifier	p		6254886	1					
ANR	6254995	IfStatement	if ( isbut )		6254886	1					
ANR	6254996	Condition	isbut	2257:6:48241:48245	6254886	0	True				
ANR	6254997	Identifier	isbut		6254886	0					
ANR	6254998	CompoundStatement		15:13:318:318	6254886	1					
ANR	6254999	ExpressionStatement	idx = ( int ) ( size_t ) ( isbut - but )	2258:3:48253:48285	6254886	0	True				
ANR	6255000	AssignmentExpression	idx = ( int ) ( size_t ) ( isbut - but )		6254886	0		=			
ANR	6255001	Identifier	idx		6254886	0					
ANR	6255002	CastExpression	( int ) ( size_t ) ( isbut - but )		6254886	1					
ANR	6255003	CastTarget	int		6254886	0					
ANR	6255004	CastExpression	( size_t ) ( isbut - but )		6254886	1					
ANR	6255005	CastTarget	size_t		6254886	0					
ANR	6255006	AdditiveExpression	isbut - but		6254886	1		-			
ANR	6255007	Identifier	isbut		6254886	0					
ANR	6255008	Identifier	but		6254886	1					
ANR	6255009	ExpressionStatement	"_b = R_BIT_TOGGLE ( b , idx )"	2259:3:48290:48316	6254886	1	True				
ANR	6255010	AssignmentExpression	"_b = R_BIT_TOGGLE ( b , idx )"		6254886	0		=			
ANR	6255011	Identifier	_b		6254886	0					
ANR	6255012	CallExpression	"R_BIT_TOGGLE ( b , idx )"		6254886	1					
ANR	6255013	Callee	R_BIT_TOGGLE		6254886	0					
ANR	6255014	Identifier	R_BIT_TOGGLE		6254886	0					
ANR	6255015	ArgumentList	b		6254886	1					
ANR	6255016	Argument	b		6254886	0					
ANR	6255017	Identifier	b		6254886	0					
ANR	6255018	Argument	idx		6254886	1					
ANR	6255019	Identifier	idx		6254886	0					
ANR	6255020	ContinueStatement	continue ;	2260:3:48321:48329	6254886	2	True				
ANR	6255021	IfStatement	if ( * p == ch && ! _b )		6254886	2					
ANR	6255022	Condition	* p == ch && ! _b	2262:6:48341:48355	6254886	0	True				
ANR	6255023	AndExpression	* p == ch && ! _b		6254886	0		&&			
ANR	6255024	EqualityExpression	* p == ch		6254886	0		==			
ANR	6255025	UnaryOperationExpression	* p		6254886	0					
ANR	6255026	UnaryOperator	*		6254886	0					
ANR	6255027	Identifier	p		6254886	1					
ANR	6255028	Identifier	ch		6254886	1					
ANR	6255029	UnaryOperationExpression	! _b		6254886	1					
ANR	6255030	UnaryOperator	!		6254886	0					
ANR	6255031	Identifier	_b		6254886	1					
ANR	6255032	CompoundStatement		20:23:428:428	6254886	1					
ANR	6255033	ExpressionStatement	lp = p	2263:3:48363:48369	6254886	0	True				
ANR	6255034	AssignmentExpression	lp = p		6254886	0		=			
ANR	6255035	Identifier	lp		6254886	0					
ANR	6255036	Identifier	p		6254886	1					
ANR	6255037	ReturnStatement	return lp ;	2266:1:48379:48388	6254886	7	True				
ANR	6255038	Identifier	lp		6254886	0					
ANR	6255039	ReturnType	const char *		6254886	1					
ANR	6255040	Identifier	r_str_lastbut		6254886	2					
ANR	6255041	ParameterList	"const char * s , char ch , const char * but"		6254886	3					
ANR	6255042	Parameter	const char * s	2243:32:47888:47900	6254886	0	True				
ANR	6255043	ParameterType	const char *		6254886	0					
ANR	6255044	Identifier	s		6254886	1					
ANR	6255045	Parameter	char ch	2243:47:47903:47909	6254886	1	True				
ANR	6255046	ParameterType	char		6254886	0					
ANR	6255047	Identifier	ch		6254886	1					
ANR	6255048	Parameter	const char * but	2243:56:47912:47926	6254886	2	True				
ANR	6255049	ParameterType	const char *		6254886	0					
ANR	6255050	Identifier	but		6254886	1					
ANR	6255051	CFGEntryNode	ENTRY		6254886		True				
ANR	6255052	CFGExitNode	EXIT		6254886		True				
ANR	6255053	Symbol	but		6254886						
ANR	6255054	Symbol	b		6254886						
ANR	6255055	Symbol	_b		6254886						
ANR	6255056	Symbol	NULL		6254886						
ANR	6255057	Symbol	lp		6254886						
ANR	6255058	Symbol	ch		6254886						
ANR	6255059	Symbol	bsz		6254886						
ANR	6255060	Symbol	strchr		6254886						
ANR	6255061	Symbol	isbut		6254886						
ANR	6255062	Symbol	& _b		6254886						
ANR	6255063	Symbol	R_BIT_TOGGLE		6254886						
ANR	6255064	Symbol	p		6254886						
ANR	6255065	Symbol	strlen		6254886						
ANR	6255066	Symbol	s		6254886						
ANR	6255067	Symbol	r_str_lchr		6254886						
ANR	6255068	Symbol	* p		6254886						
ANR	6255069	Symbol	idx		6254886						
ANR	6255070	Function	r_str_len_utf8char	2270:0:48425:48608							
ANR	6255071	FunctionDef	"r_str_len_utf8char (const char * s , int left)"		6255070	0					
ANR	6255072	CompoundStatement		2270:54:48479:48608	6255070	0					
ANR	6255073	IdentifierDeclStatement	int i = 1 ;	2271:1:48482:48491	6255070	0	True				
ANR	6255074	IdentifierDecl	i = 1		6255070	0					
ANR	6255075	IdentifierDeclType	int		6255070	0					
ANR	6255076	Identifier	i		6255070	1					
ANR	6255077	AssignmentExpression	i = 1		6255070	2		=			
ANR	6255078	Identifier	i		6255070	0					
ANR	6255079	PrimaryExpression	1		6255070	1					
ANR	6255080	WhileStatement	while ( s [ i ] && ( ! left || i < left ) )		6255070	1					
ANR	6255081	Condition	s [ i ] && ( ! left || i < left )	2272:8:48501:48525	6255070	0	True				
ANR	6255082	AndExpression	s [ i ] && ( ! left || i < left )		6255070	0		&&			
ANR	6255083	ArrayIndexing	s [ i ]		6255070	0					
ANR	6255084	Identifier	s		6255070	0					
ANR	6255085	Identifier	i		6255070	1					
ANR	6255086	OrExpression	! left || i < left		6255070	1		||			
ANR	6255087	UnaryOperationExpression	! left		6255070	0					
ANR	6255088	UnaryOperator	!		6255070	0					
ANR	6255089	Identifier	left		6255070	1					
ANR	6255090	RelationalExpression	i < left		6255070	1		<			
ANR	6255091	Identifier	i		6255070	0					
ANR	6255092	Identifier	left		6255070	1					
ANR	6255093	CompoundStatement		3:35:48:48	6255070	1					
ANR	6255094	IfStatement	if ( ( s [ i ] & 0xc0 ) != 0x80 )		6255070	0					
ANR	6255095	Condition	( s [ i ] & 0xc0 ) != 0x80	2273:6:48536:48556	6255070	0	True				
ANR	6255096	EqualityExpression	( s [ i ] & 0xc0 ) != 0x80		6255070	0		!=			
ANR	6255097	BitAndExpression	s [ i ] & 0xc0		6255070	0		&			
ANR	6255098	ArrayIndexing	s [ i ]		6255070	0					
ANR	6255099	Identifier	s		6255070	0					
ANR	6255100	Identifier	i		6255070	1					
ANR	6255101	PrimaryExpression	0xc0		6255070	1					
ANR	6255102	PrimaryExpression	0x80		6255070	1					
ANR	6255103	CompoundStatement		4:29:79:79	6255070	1					
ANR	6255104	ExpressionStatement	i ++	2274:3:48564:48567	6255070	0	True				
ANR	6255105	PostIncDecOperationExpression	i ++		6255070	0					
ANR	6255106	Identifier	i		6255070	0					
ANR	6255107	IncDec	++		6255070	1					
ANR	6255108	ElseStatement	else		6255070	0					
ANR	6255109	CompoundStatement		6:9:98:98	6255070	0					
ANR	6255110	BreakStatement	break ;	2276:3:48583:48588	6255070	0	True				
ANR	6255111	ReturnStatement	return i ;	2279:1:48598:48606	6255070	2	True				
ANR	6255112	Identifier	i		6255070	0					
ANR	6255113	ReturnType	R_API int		6255070	1					
ANR	6255114	Identifier	r_str_len_utf8char		6255070	2					
ANR	6255115	ParameterList	"const char * s , int left"		6255070	3					
ANR	6255116	Parameter	const char * s	2270:29:48454:48466	6255070	0	True				
ANR	6255117	ParameterType	const char *		6255070	0					
ANR	6255118	Identifier	s		6255070	1					
ANR	6255119	Parameter	int left	2270:44:48469:48476	6255070	1	True				
ANR	6255120	ParameterType	int		6255070	0					
ANR	6255121	Identifier	left		6255070	1					
ANR	6255122	CFGEntryNode	ENTRY		6255070		True				
ANR	6255123	CFGExitNode	EXIT		6255070		True				
ANR	6255124	Symbol	s		6255070						
ANR	6255125	Symbol	* i		6255070						
ANR	6255126	Symbol	left		6255070						
ANR	6255127	Symbol	i		6255070						
ANR	6255128	Symbol	* s		6255070						
ANR	6255129	Function	r_str_len_utf8	2282:0:48611:48846							
ANR	6255130	FunctionDef	r_str_len_utf8 (const char * s)		6255129	0					
ANR	6255131	CompoundStatement		2282:40:48651:48846	6255129	0					
ANR	6255132	IdentifierDeclStatement	"int i = 0 , j = 0 , fullwidths = 0 ;"	2283:1:48654:48686	6255129	0	True				
ANR	6255133	IdentifierDecl	i = 0		6255129	0					
ANR	6255134	IdentifierDeclType	int		6255129	0					
ANR	6255135	Identifier	i		6255129	1					
ANR	6255136	AssignmentExpression	i = 0		6255129	2		=			
ANR	6255137	Identifier	i		6255129	0					
ANR	6255138	PrimaryExpression	0		6255129	1					
ANR	6255139	IdentifierDecl	j = 0		6255129	1					
ANR	6255140	IdentifierDeclType	int		6255129	0					
ANR	6255141	Identifier	j		6255129	1					
ANR	6255142	AssignmentExpression	j = 0		6255129	2		=			
ANR	6255143	Identifier	j		6255129	0					
ANR	6255144	PrimaryExpression	0		6255129	1					
ANR	6255145	IdentifierDecl	fullwidths = 0		6255129	2					
ANR	6255146	IdentifierDeclType	int		6255129	0					
ANR	6255147	Identifier	fullwidths		6255129	1					
ANR	6255148	AssignmentExpression	fullwidths = 0		6255129	2		=			
ANR	6255149	Identifier	fullwidths		6255129	0					
ANR	6255150	PrimaryExpression	0		6255129	1					
ANR	6255151	WhileStatement	while ( s [ i ] )		6255129	1					
ANR	6255152	Condition	s [ i ]	2284:8:48696:48699	6255129	0	True				
ANR	6255153	ArrayIndexing	s [ i ]		6255129	0					
ANR	6255154	Identifier	s		6255129	0					
ANR	6255155	Identifier	i		6255129	1					
ANR	6255156	CompoundStatement		3:14:50:50	6255129	1					
ANR	6255157	IfStatement	if ( ( s [ i ] & 0xc0 ) != 0x80 )		6255129	0					
ANR	6255158	Condition	( s [ i ] & 0xc0 ) != 0x80	2285:6:48710:48730	6255129	0	True				
ANR	6255159	EqualityExpression	( s [ i ] & 0xc0 ) != 0x80		6255129	0		!=			
ANR	6255160	BitAndExpression	s [ i ] & 0xc0		6255129	0		&			
ANR	6255161	ArrayIndexing	s [ i ]		6255129	0					
ANR	6255162	Identifier	s		6255129	0					
ANR	6255163	Identifier	i		6255129	1					
ANR	6255164	PrimaryExpression	0xc0		6255129	1					
ANR	6255165	PrimaryExpression	0x80		6255129	1					
ANR	6255166	CompoundStatement		4:29:81:81	6255129	1					
ANR	6255167	ExpressionStatement	j ++	2286:3:48738:48741	6255129	0	True				
ANR	6255168	PostIncDecOperationExpression	j ++		6255129	0					
ANR	6255169	Identifier	j		6255129	0					
ANR	6255170	IncDec	++		6255129	1					
ANR	6255171	IfStatement	"if ( r_str_char_fullwidth ( s + i , 4 ) )"		6255129	1					
ANR	6255172	Condition	"r_str_char_fullwidth ( s + i , 4 )"	2287:7:48750:48780	6255129	0	True				
ANR	6255173	CallExpression	"r_str_char_fullwidth ( s + i , 4 )"		6255129	0					
ANR	6255174	Callee	r_str_char_fullwidth		6255129	0					
ANR	6255175	Identifier	r_str_char_fullwidth		6255129	0					
ANR	6255176	ArgumentList	s + i		6255129	1					
ANR	6255177	Argument	s + i		6255129	0					
ANR	6255178	AdditiveExpression	s + i		6255129	0		+			
ANR	6255179	Identifier	s		6255129	0					
ANR	6255180	Identifier	i		6255129	1					
ANR	6255181	Argument	4		6255129	1					
ANR	6255182	PrimaryExpression	4		6255129	0					
ANR	6255183	CompoundStatement		6:40:131:131	6255129	1					
ANR	6255184	ExpressionStatement	fullwidths ++	2288:4:48789:48801	6255129	0	True				
ANR	6255185	PostIncDecOperationExpression	fullwidths ++		6255129	0					
ANR	6255186	Identifier	fullwidths		6255129	0					
ANR	6255187	IncDec	++		6255129	1					
ANR	6255188	ExpressionStatement	i ++	2291:2:48814:48817	6255129	1	True				
ANR	6255189	PostIncDecOperationExpression	i ++		6255129	0					
ANR	6255190	Identifier	i		6255129	0					
ANR	6255191	IncDec	++		6255129	1					
ANR	6255192	ReturnStatement	return j + fullwidths ;	2293:1:48823:48844	6255129	2	True				
ANR	6255193	AdditiveExpression	j + fullwidths		6255129	0		+			
ANR	6255194	Identifier	j		6255129	0					
ANR	6255195	Identifier	fullwidths		6255129	1					
ANR	6255196	ReturnType	R_API int		6255129	1					
ANR	6255197	Identifier	r_str_len_utf8		6255129	2					
ANR	6255198	ParameterList	const char * s		6255129	3					
ANR	6255199	Parameter	const char * s	2282:25:48636:48648	6255129	0	True				
ANR	6255200	ParameterType	const char *		6255129	0					
ANR	6255201	Identifier	s		6255129	1					
ANR	6255202	CFGEntryNode	ENTRY		6255129		True				
ANR	6255203	CFGExitNode	EXIT		6255129		True				
ANR	6255204	Symbol	s		6255129						
ANR	6255205	Symbol	* i		6255129						
ANR	6255206	Symbol	r_str_char_fullwidth		6255129						
ANR	6255207	Symbol	i		6255129						
ANR	6255208	Symbol	j		6255129						
ANR	6255209	Symbol	fullwidths		6255129						
ANR	6255210	Symbol	* s		6255129						
ANR	6255211	Function	r_str_len_utf8_ansi	2296:0:48849:49215							
ANR	6255212	FunctionDef	r_str_len_utf8_ansi (const char * str)		6255211	0					
ANR	6255213	CompoundStatement		2296:47:48896:49215	6255211	0					
ANR	6255214	IdentifierDeclStatement	"int i = 0 , len = 0 , fullwidths = 0 ;"	2297:1:48899:48933	6255211	0	True				
ANR	6255215	IdentifierDecl	i = 0		6255211	0					
ANR	6255216	IdentifierDeclType	int		6255211	0					
ANR	6255217	Identifier	i		6255211	1					
ANR	6255218	AssignmentExpression	i = 0		6255211	2		=			
ANR	6255219	Identifier	i		6255211	0					
ANR	6255220	PrimaryExpression	0		6255211	1					
ANR	6255221	IdentifierDecl	len = 0		6255211	1					
ANR	6255222	IdentifierDeclType	int		6255211	0					
ANR	6255223	Identifier	len		6255211	1					
ANR	6255224	AssignmentExpression	len = 0		6255211	2		=			
ANR	6255225	Identifier	len		6255211	0					
ANR	6255226	PrimaryExpression	0		6255211	1					
ANR	6255227	IdentifierDecl	fullwidths = 0		6255211	2					
ANR	6255228	IdentifierDeclType	int		6255211	0					
ANR	6255229	Identifier	fullwidths		6255211	1					
ANR	6255230	AssignmentExpression	fullwidths = 0		6255211	2		=			
ANR	6255231	Identifier	fullwidths		6255211	0					
ANR	6255232	PrimaryExpression	0		6255211	1					
ANR	6255233	WhileStatement	while ( str [ i ] )		6255211	1					
ANR	6255234	Condition	str [ i ]	2298:8:48943:48948	6255211	0	True				
ANR	6255235	ArrayIndexing	str [ i ]		6255211	0					
ANR	6255236	Identifier	str		6255211	0					
ANR	6255237	Identifier	i		6255211	1					
ANR	6255238	CompoundStatement		5:2:78:117	6255211	1					
ANR	6255239	IdentifierDeclStatement	char ch = str [ i ] ;	2299:2:48955:48971	6255211	0	True				
ANR	6255240	IdentifierDecl	ch = str [ i ]		6255211	0					
ANR	6255241	IdentifierDeclType	char		6255211	0					
ANR	6255242	Identifier	ch		6255211	1					
ANR	6255243	AssignmentExpression	ch = str [ i ]		6255211	2		=			
ANR	6255244	Identifier	ch		6255211	0					
ANR	6255245	ArrayIndexing	str [ i ]		6255211	1					
ANR	6255246	Identifier	str		6255211	0					
ANR	6255247	Identifier	i		6255211	1					
ANR	6255248	IdentifierDeclStatement	int chlen = __str_ansi_length ( str + i ) ;	2300:2:48975:49014	6255211	1	True				
ANR	6255249	IdentifierDecl	chlen = __str_ansi_length ( str + i )		6255211	0					
ANR	6255250	IdentifierDeclType	int		6255211	0					
ANR	6255251	Identifier	chlen		6255211	1					
ANR	6255252	AssignmentExpression	chlen = __str_ansi_length ( str + i )		6255211	2		=			
ANR	6255253	Identifier	chlen		6255211	0					
ANR	6255254	CallExpression	__str_ansi_length ( str + i )		6255211	1					
ANR	6255255	Callee	__str_ansi_length		6255211	0					
ANR	6255256	Identifier	__str_ansi_length		6255211	0					
ANR	6255257	ArgumentList	str + i		6255211	1					
ANR	6255258	Argument	str + i		6255211	0					
ANR	6255259	AdditiveExpression	str + i		6255211	0		+			
ANR	6255260	Identifier	str		6255211	0					
ANR	6255261	Identifier	i		6255211	1					
ANR	6255262	IfStatement	if ( chlen > 1 )		6255211	2					
ANR	6255263	Condition	chlen > 1	2301:6:49022:49030	6255211	0	True				
ANR	6255264	RelationalExpression	chlen > 1		6255211	0		>			
ANR	6255265	Identifier	chlen		6255211	0					
ANR	6255266	PrimaryExpression	1		6255211	1					
ANR	6255267	CompoundStatement		6:17:136:136	6255211	1					
ANR	6255268	ExpressionStatement	i += chlen - 1	2302:3:49038:49052	6255211	0	True				
ANR	6255269	AssignmentExpression	i += chlen - 1		6255211	0		+=			
ANR	6255270	Identifier	i		6255211	0					
ANR	6255271	AdditiveExpression	chlen - 1		6255211	1		-			
ANR	6255272	Identifier	chlen		6255211	0					
ANR	6255273	PrimaryExpression	1		6255211	1					
ANR	6255274	ElseStatement	else		6255211	0					
ANR	6255275	IfStatement	if ( ( ch & 0xc0 ) != 0x80 )		6255211	0					
ANR	6255276	Condition	( ch & 0xc0 ) != 0x80	2303:13:49067:49085	6255211	0	True				
ANR	6255277	EqualityExpression	( ch & 0xc0 ) != 0x80		6255211	0		!=			
ANR	6255278	BitAndExpression	ch & 0xc0		6255211	0		&			
ANR	6255279	Identifier	ch		6255211	0					
ANR	6255280	PrimaryExpression	0xc0		6255211	1					
ANR	6255281	PrimaryExpression	0x80		6255211	1					
ANR	6255282	CompoundStatement		8:34:191:191	6255211	1					
ANR	6255283	ExpressionStatement	len ++	2304:3:49101:49106	6255211	0	True				
ANR	6255284	PostIncDecOperationExpression	len ++		6255211	0					
ANR	6255285	Identifier	len		6255211	0					
ANR	6255286	IncDec	++		6255211	1					
ANR	6255287	IfStatement	"if ( r_str_char_fullwidth ( str + i , 4 ) )"		6255211	1					
ANR	6255288	Condition	"r_str_char_fullwidth ( str + i , 4 )"	2305:7:49115:49147	6255211	0	True				
ANR	6255289	CallExpression	"r_str_char_fullwidth ( str + i , 4 )"		6255211	0					
ANR	6255290	Callee	r_str_char_fullwidth		6255211	0					
ANR	6255291	Identifier	r_str_char_fullwidth		6255211	0					
ANR	6255292	ArgumentList	str + i		6255211	1					
ANR	6255293	Argument	str + i		6255211	0					
ANR	6255294	AdditiveExpression	str + i		6255211	0		+			
ANR	6255295	Identifier	str		6255211	0					
ANR	6255296	Identifier	i		6255211	1					
ANR	6255297	Argument	4		6255211	1					
ANR	6255298	PrimaryExpression	4		6255211	0					
ANR	6255299	CompoundStatement		10:42:253:253	6255211	1					
ANR	6255300	ExpressionStatement	fullwidths ++	2306:4:49156:49168	6255211	0	True				
ANR	6255301	PostIncDecOperationExpression	fullwidths ++		6255211	0					
ANR	6255302	Identifier	fullwidths		6255211	0					
ANR	6255303	IncDec	++		6255211	1					
ANR	6255304	ExpressionStatement	i ++	2309:2:49181:49184	6255211	3	True				
ANR	6255305	PostIncDecOperationExpression	i ++		6255211	0					
ANR	6255306	Identifier	i		6255211	0					
ANR	6255307	IncDec	++		6255211	1					
ANR	6255308	ReturnStatement	return len + fullwidths ;	2311:1:49190:49213	6255211	2	True				
ANR	6255309	AdditiveExpression	len + fullwidths		6255211	0		+			
ANR	6255310	Identifier	len		6255211	0					
ANR	6255311	Identifier	fullwidths		6255211	1					
ANR	6255312	ReturnType	R_API int		6255211	1					
ANR	6255313	Identifier	r_str_len_utf8_ansi		6255211	2					
ANR	6255314	ParameterList	const char * str		6255211	3					
ANR	6255315	Parameter	const char * str	2296:30:48879:48893	6255211	0	True				
ANR	6255316	ParameterType	const char *		6255211	0					
ANR	6255317	Identifier	str		6255211	1					
ANR	6255318	CFGEntryNode	ENTRY		6255211		True				
ANR	6255319	CFGExitNode	EXIT		6255211		True				
ANR	6255320	Symbol	str		6255211						
ANR	6255321	Symbol	* i		6255211						
ANR	6255322	Symbol	chlen		6255211						
ANR	6255323	Symbol	len		6255211						
ANR	6255324	Symbol	ch		6255211						
ANR	6255325	Symbol	r_str_char_fullwidth		6255211						
ANR	6255326	Symbol	i		6255211						
ANR	6255327	Symbol	__str_ansi_length		6255211						
ANR	6255328	Symbol	* str		6255211						
ANR	6255329	Symbol	fullwidths		6255211						
ANR	6255330	Function	r_strstr_ansi	2315:6:49287:49571							
ANR	6255331	FunctionDef	"r_strstr_ansi (const char * a , const char * b)"		6255330	0					
ANR	6255332	CompoundStatement		2315:63:49344:49571	6255330	0					
ANR	6255333	IdentifierDeclStatement	"const char * ch , * p = a ;"	2316:1:49347:49369	6255330	0	True				
ANR	6255334	IdentifierDecl	* ch		6255330	0					
ANR	6255335	IdentifierDeclType	const char *		6255330	0					
ANR	6255336	Identifier	ch		6255330	1					
ANR	6255337	IdentifierDecl	* p = a		6255330	1					
ANR	6255338	IdentifierDeclType	const char *		6255330	0					
ANR	6255339	Identifier	p		6255330	1					
ANR	6255340	AssignmentExpression	* p = a		6255330	2		=			
ANR	6255341	Identifier	a		6255330	0					
ANR	6255342	Identifier	a		6255330	1					
ANR	6255343	DoStatement	do		6255330	1					
ANR	6255344	CompoundStatement		3:4:30:30	6255330	0					
ANR	6255345	ExpressionStatement	"ch = strchr ( p , x1b )"	2318:2:49379:49402	6255330	0	True				
ANR	6255346	AssignmentExpression	"ch = strchr ( p , x1b )"		6255330	0		=			
ANR	6255347	Identifier	ch		6255330	0					
ANR	6255348	CallExpression	"strchr ( p , x1b )"		6255330	1					
ANR	6255349	Callee	strchr		6255330	0					
ANR	6255350	Identifier	strchr		6255330	0					
ANR	6255351	ArgumentList	p		6255330	1					
ANR	6255352	Argument	p		6255330	0					
ANR	6255353	Identifier	p		6255330	0					
ANR	6255354	Argument	x1b		6255330	1					
ANR	6255355	Identifier	x1b		6255330	0					
ANR	6255356	IfStatement	if ( ch )		6255330	1					
ANR	6255357	Condition	ch	2319:6:49410:49411	6255330	0	True				
ANR	6255358	Identifier	ch		6255330	0					
ANR	6255359	CompoundStatement		6:3:74:115	6255330	1					
ANR	6255360	IdentifierDeclStatement	"const char * v = r_str_nstr ( p , b , ch - p ) ;"	2320:3:49419:49460	6255330	0	True				
ANR	6255361	IdentifierDecl	"* v = r_str_nstr ( p , b , ch - p )"		6255330	0					
ANR	6255362	IdentifierDeclType	const char *		6255330	0					
ANR	6255363	Identifier	v		6255330	1					
ANR	6255364	AssignmentExpression	"* v = r_str_nstr ( p , b , ch - p )"		6255330	2		=			
ANR	6255365	Identifier	v		6255330	0					
ANR	6255366	CallExpression	"r_str_nstr ( p , b , ch - p )"		6255330	1					
ANR	6255367	Callee	r_str_nstr		6255330	0					
ANR	6255368	Identifier	r_str_nstr		6255330	0					
ANR	6255369	ArgumentList	p		6255330	1					
ANR	6255370	Argument	p		6255330	0					
ANR	6255371	Identifier	p		6255330	0					
ANR	6255372	Argument	b		6255330	1					
ANR	6255373	Identifier	b		6255330	0					
ANR	6255374	Argument	ch - p		6255330	2					
ANR	6255375	AdditiveExpression	ch - p		6255330	0		-			
ANR	6255376	Identifier	ch		6255330	0					
ANR	6255377	Identifier	p		6255330	1					
ANR	6255378	IfStatement	if ( v )		6255330	1					
ANR	6255379	Condition	v	2321:7:49469:49469	6255330	0	True				
ANR	6255380	Identifier	v		6255330	0					
ANR	6255381	CompoundStatement		7:10:127:127	6255330	1					
ANR	6255382	ReturnStatement	return v ;	2322:4:49478:49486	6255330	0	True				
ANR	6255383	Identifier	v		6255330	0					
ANR	6255384	ExpressionStatement	p = ch + __str_ansi_length ( ch )	2324:3:49496:49527	6255330	2	True				
ANR	6255385	AssignmentExpression	p = ch + __str_ansi_length ( ch )		6255330	0		=			
ANR	6255386	Identifier	p		6255330	0					
ANR	6255387	AdditiveExpression	ch + __str_ansi_length ( ch )		6255330	1		+			
ANR	6255388	Identifier	ch		6255330	0					
ANR	6255389	CallExpression	__str_ansi_length ( ch )		6255330	1					
ANR	6255390	Callee	__str_ansi_length		6255330	0					
ANR	6255391	Identifier	__str_ansi_length		6255330	0					
ANR	6255392	ArgumentList	ch		6255330	1					
ANR	6255393	Argument	ch		6255330	0					
ANR	6255394	Identifier	ch		6255330	0					
ANR	6255395	Condition	ch	2326:10:49543:49544	6255330	1	True				
ANR	6255396	Identifier	ch		6255330	0					
ANR	6255397	ReturnStatement	"return strstr ( p , b ) ;"	2327:1:49549:49569	6255330	2	True				
ANR	6255398	CallExpression	"strstr ( p , b )"		6255330	0					
ANR	6255399	Callee	strstr		6255330	0					
ANR	6255400	Identifier	strstr		6255330	0					
ANR	6255401	ArgumentList	p		6255330	1					
ANR	6255402	Argument	p		6255330	0					
ANR	6255403	Identifier	p		6255330	0					
ANR	6255404	Argument	b		6255330	1					
ANR	6255405	Identifier	b		6255330	0					
ANR	6255406	ReturnType	const char *		6255330	1					
ANR	6255407	Identifier	r_strstr_ansi		6255330	2					
ANR	6255408	ParameterList	"const char * a , const char * b"		6255330	3					
ANR	6255409	Parameter	const char * a	2315:33:49314:49326	6255330	0	True				
ANR	6255410	ParameterType	const char *		6255330	0					
ANR	6255411	Identifier	a		6255330	1					
ANR	6255412	Parameter	const char * b	2315:48:49329:49341	6255330	1	True				
ANR	6255413	ParameterType	const char *		6255330	0					
ANR	6255414	Identifier	b		6255330	1					
ANR	6255415	CFGEntryNode	ENTRY		6255330		True				
ANR	6255416	CFGExitNode	EXIT		6255330		True				
ANR	6255417	Symbol	p		6255330						
ANR	6255418	Symbol	a		6255330						
ANR	6255419	Symbol	b		6255330						
ANR	6255420	Symbol	r_str_nstr		6255330						
ANR	6255421	Symbol	ch		6255330						
ANR	6255422	Symbol	strstr		6255330						
ANR	6255423	Symbol	v		6255330						
ANR	6255424	Symbol	x1b		6255330						
ANR	6255425	Symbol	strchr		6255330						
ANR	6255426	Symbol	__str_ansi_length		6255330						
ANR	6255427	Function	r_str_casestr	2330:6:49580:49996							
ANR	6255428	FunctionDef	"r_str_casestr (const char * a , const char * b)"		6255427	0					
ANR	6255429	CompoundStatement		2330:62:49636:49996	6255427	0					
ANR	6255430	IdentifierDeclStatement	size_t hay_len = strlen ( a ) ;	2333:1:49738:49765	6255427	0	True				
ANR	6255431	IdentifierDecl	hay_len = strlen ( a )		6255427	0					
ANR	6255432	IdentifierDeclType	size_t		6255427	0					
ANR	6255433	Identifier	hay_len		6255427	1					
ANR	6255434	AssignmentExpression	hay_len = strlen ( a )		6255427	2		=			
ANR	6255435	Identifier	hay_len		6255427	0					
ANR	6255436	CallExpression	strlen ( a )		6255427	1					
ANR	6255437	Callee	strlen		6255427	0					
ANR	6255438	Identifier	strlen		6255427	0					
ANR	6255439	ArgumentList	a		6255427	1					
ANR	6255440	Argument	a		6255427	0					
ANR	6255441	Identifier	a		6255427	0					
ANR	6255442	IdentifierDeclStatement	size_t needle_len = strlen ( b ) ;	2334:1:49768:49798	6255427	1	True				
ANR	6255443	IdentifierDecl	needle_len = strlen ( b )		6255427	0					
ANR	6255444	IdentifierDeclType	size_t		6255427	0					
ANR	6255445	Identifier	needle_len		6255427	1					
ANR	6255446	AssignmentExpression	needle_len = strlen ( b )		6255427	2		=			
ANR	6255447	Identifier	needle_len		6255427	0					
ANR	6255448	CallExpression	strlen ( b )		6255427	1					
ANR	6255449	Callee	strlen		6255427	0					
ANR	6255450	Identifier	strlen		6255427	0					
ANR	6255451	ArgumentList	b		6255427	1					
ANR	6255452	Argument	b		6255427	0					
ANR	6255453	Identifier	b		6255427	0					
ANR	6255454	IfStatement	if ( ! hay_len || ! needle_len )		6255427	2					
ANR	6255455	Condition	! hay_len || ! needle_len	2335:5:49805:49827	6255427	0	True				
ANR	6255456	OrExpression	! hay_len || ! needle_len		6255427	0		||			
ANR	6255457	UnaryOperationExpression	! hay_len		6255427	0					
ANR	6255458	UnaryOperator	!		6255427	0					
ANR	6255459	Identifier	hay_len		6255427	1					
ANR	6255460	UnaryOperationExpression	! needle_len		6255427	1					
ANR	6255461	UnaryOperator	!		6255427	0					
ANR	6255462	Identifier	needle_len		6255427	1					
ANR	6255463	CompoundStatement		6:30:193:193	6255427	1					
ANR	6255464	ReturnStatement	return NULL ;	2336:2:49834:49845	6255427	0	True				
ANR	6255465	Identifier	NULL		6255427	0					
ANR	6255466	WhileStatement	while ( hay_len >= needle_len )		6255427	3					
ANR	6255467	Condition	hay_len >= needle_len	2338:8:49858:49878	6255427	0	True				
ANR	6255468	RelationalExpression	hay_len >= needle_len		6255427	0		>=			
ANR	6255469	Identifier	hay_len		6255427	0					
ANR	6255470	Identifier	needle_len		6255427	1					
ANR	6255471	CompoundStatement		9:31:244:244	6255427	1					
ANR	6255472	IfStatement	"if ( ! r_str_ncasecmp ( a , b , needle_len ) )"		6255427	0					
ANR	6255473	Condition	"! r_str_ncasecmp ( a , b , needle_len )"	2339:6:49889:49922	6255427	0	True				
ANR	6255474	UnaryOperationExpression	"! r_str_ncasecmp ( a , b , needle_len )"		6255427	0					
ANR	6255475	UnaryOperator	!		6255427	0					
ANR	6255476	CallExpression	"r_str_ncasecmp ( a , b , needle_len )"		6255427	1					
ANR	6255477	Callee	r_str_ncasecmp		6255427	0					
ANR	6255478	Identifier	r_str_ncasecmp		6255427	0					
ANR	6255479	ArgumentList	a		6255427	1					
ANR	6255480	Argument	a		6255427	0					
ANR	6255481	Identifier	a		6255427	0					
ANR	6255482	Argument	b		6255427	1					
ANR	6255483	Identifier	b		6255427	0					
ANR	6255484	Argument	needle_len		6255427	2					
ANR	6255485	Identifier	needle_len		6255427	0					
ANR	6255486	CompoundStatement		10:42:288:288	6255427	1					
ANR	6255487	ReturnStatement	return ( const char * ) a ;	2340:3:49930:49953	6255427	0	True				
ANR	6255488	CastExpression	( const char * ) a		6255427	0					
ANR	6255489	CastTarget	const char *		6255427	0					
ANR	6255490	Identifier	a		6255427	1					
ANR	6255491	ExpressionStatement	a ++	2342:2:49961:49964	6255427	1	True				
ANR	6255492	PostIncDecOperationExpression	a ++		6255427	0					
ANR	6255493	Identifier	a		6255427	0					
ANR	6255494	IncDec	++		6255427	1					
ANR	6255495	ExpressionStatement	hay_len --	2343:2:49968:49977	6255427	2	True				
ANR	6255496	PostIncDecOperationExpression	hay_len --		6255427	0					
ANR	6255497	Identifier	hay_len		6255427	0					
ANR	6255498	IncDec	--		6255427	1					
ANR	6255499	ReturnStatement	return NULL ;	2345:1:49983:49994	6255427	4	True				
ANR	6255500	Identifier	NULL		6255427	0					
ANR	6255501	ReturnType	const char *		6255427	1					
ANR	6255502	Identifier	r_str_casestr		6255427	2					
ANR	6255503	ParameterList	"const char * a , const char * b"		6255427	3					
ANR	6255504	Parameter	const char * a	2330:32:49606:49618	6255427	0	True				
ANR	6255505	ParameterType	const char *		6255427	0					
ANR	6255506	Identifier	a		6255427	1					
ANR	6255507	Parameter	const char * b	2330:47:49621:49633	6255427	1	True				
ANR	6255508	ParameterType	const char *		6255427	0					
ANR	6255509	Identifier	b		6255427	1					
ANR	6255510	CFGEntryNode	ENTRY		6255427		True				
ANR	6255511	CFGExitNode	EXIT		6255427		True				
ANR	6255512	Symbol	a		6255427						
ANR	6255513	Symbol	strlen		6255427						
ANR	6255514	Symbol	b		6255427						
ANR	6255515	Symbol	hay_len		6255427						
ANR	6255516	Symbol	NULL		6255427						
ANR	6255517	Symbol	r_str_ncasecmp		6255427						
ANR	6255518	Symbol	needle_len		6255427						
ANR	6255519	Function	r_str_write	2348:0:49999:50081							
ANR	6255520	FunctionDef	"r_str_write (int fd , const char * b)"		6255519	0					
ANR	6255521	CompoundStatement		2348:45:50044:50081	6255519	0					
ANR	6255522	ReturnStatement	"return write ( fd , b , strlen ( b ) ) ;"	2349:1:50047:50079	6255519	0	True				
ANR	6255523	CallExpression	"write ( fd , b , strlen ( b ) )"		6255519	0					
ANR	6255524	Callee	write		6255519	0					
ANR	6255525	Identifier	write		6255519	0					
ANR	6255526	ArgumentList	fd		6255519	1					
ANR	6255527	Argument	fd		6255519	0					
ANR	6255528	Identifier	fd		6255519	0					
ANR	6255529	Argument	b		6255519	1					
ANR	6255530	Identifier	b		6255519	0					
ANR	6255531	Argument	strlen ( b )		6255519	2					
ANR	6255532	CallExpression	strlen ( b )		6255519	0					
ANR	6255533	Callee	strlen		6255519	0					
ANR	6255534	Identifier	strlen		6255519	0					
ANR	6255535	ArgumentList	b		6255519	1					
ANR	6255536	Argument	b		6255519	0					
ANR	6255537	Identifier	b		6255519	0					
ANR	6255538	ReturnType	R_API int		6255519	1					
ANR	6255539	Identifier	r_str_write		6255519	2					
ANR	6255540	ParameterList	"int fd , const char * b"		6255519	3					
ANR	6255541	Parameter	int fd	2348:22:50021:50026	6255519	0	True				
ANR	6255542	ParameterType	int		6255519	0					
ANR	6255543	Identifier	fd		6255519	1					
ANR	6255544	Parameter	const char * b	2348:30:50029:50041	6255519	1	True				
ANR	6255545	ParameterType	const char *		6255519	0					
ANR	6255546	Identifier	b		6255519	1					
ANR	6255547	CFGEntryNode	ENTRY		6255519		True				
ANR	6255548	CFGExitNode	EXIT		6255519		True				
ANR	6255549	Symbol	strlen		6255519						
ANR	6255550	Symbol	b		6255519						
ANR	6255551	Symbol	write		6255519						
ANR	6255552	Symbol	fd		6255519						
ANR	6255553	Function	r_str_range_foreach	2352:0:50084:50576							
ANR	6255554	FunctionDef	"r_str_range_foreach (const char * r , RStrRangeCallback cb , void * u)"		6255553	0					
ANR	6255555	CompoundStatement		2352:77:50161:50576	6255553	0					
ANR	6255556	IdentifierDeclStatement	const char * p = r ;	2353:1:50164:50181	6255553	0	True				
ANR	6255557	IdentifierDecl	* p = r		6255553	0					
ANR	6255558	IdentifierDeclType	const char *		6255553	0					
ANR	6255559	Identifier	p		6255553	1					
ANR	6255560	AssignmentExpression	* p = r		6255553	2		=			
ANR	6255561	Identifier	r		6255553	0					
ANR	6255562	Identifier	r		6255553	1					
ANR	6255563	ForStatement	for ( ; * r ; r ++ )		6255553	1					
ANR	6255564	Condition	* r	2354:8:50191:50192	6255553	0	True				
ANR	6255565	UnaryOperationExpression	* r		6255553	0					
ANR	6255566	UnaryOperator	*		6255553	0					
ANR	6255567	Identifier	r		6255553	1					
ANR	6255568	PostIncDecOperationExpression	r ++	2354:12:50195:50197	6255553	1	True				
ANR	6255569	Identifier	r		6255553	0					
ANR	6255570	IncDec	++		6255553	1					
ANR	6255571	CompoundStatement		3:17:38:38	6255553	2					
ANR	6255572	IfStatement	"if ( * r == ',' )"		6255553	0					
ANR	6255573	Condition	"* r == ','"	2355:6:50208:50216	6255553	0	True				
ANR	6255574	EqualityExpression	"* r == ','"		6255553	0		==			
ANR	6255575	UnaryOperationExpression	* r		6255553	0					
ANR	6255576	UnaryOperator	*		6255553	0					
ANR	6255577	Identifier	r		6255553	1					
ANR	6255578	PrimaryExpression	"','"		6255553	1					
ANR	6255579	CompoundStatement		4:17:57:57	6255553	1					
ANR	6255580	ExpressionStatement	"cb ( u , atoi ( p ) )"	2356:3:50224:50240	6255553	0	True				
ANR	6255581	CallExpression	"cb ( u , atoi ( p ) )"		6255553	0					
ANR	6255582	Callee	cb		6255553	0					
ANR	6255583	Identifier	cb		6255553	0					
ANR	6255584	ArgumentList	u		6255553	1					
ANR	6255585	Argument	u		6255553	0					
ANR	6255586	Identifier	u		6255553	0					
ANR	6255587	Argument	atoi ( p )		6255553	1					
ANR	6255588	CallExpression	atoi ( p )		6255553	0					
ANR	6255589	Callee	atoi		6255553	0					
ANR	6255590	Identifier	atoi		6255553	0					
ANR	6255591	ArgumentList	p		6255553	1					
ANR	6255592	Argument	p		6255553	0					
ANR	6255593	Identifier	p		6255553	0					
ANR	6255594	ExpressionStatement	p = r + 1	2357:3:50245:50254	6255553	1	True				
ANR	6255595	AssignmentExpression	p = r + 1		6255553	0		=			
ANR	6255596	Identifier	p		6255553	0					
ANR	6255597	AdditiveExpression	r + 1		6255553	1		+			
ANR	6255598	Identifier	r		6255553	0					
ANR	6255599	PrimaryExpression	1		6255553	1					
ANR	6255600	IfStatement	if ( * r == '-' )		6255553	1					
ANR	6255601	Condition	* r == '-'	2359:6:50266:50274	6255553	0	True				
ANR	6255602	EqualityExpression	* r == '-'		6255553	0		==			
ANR	6255603	UnaryOperationExpression	* r		6255553	0					
ANR	6255604	UnaryOperator	*		6255553	0					
ANR	6255605	Identifier	r		6255553	1					
ANR	6255606	PrimaryExpression	'-'		6255553	1					
ANR	6255607	CompoundStatement		8:17:115:115	6255553	1					
ANR	6255608	IfStatement	if ( p != r )		6255553	0					
ANR	6255609	Condition	p != r	2360:7:50286:50291	6255553	0	True				
ANR	6255610	EqualityExpression	p != r		6255553	0		!=			
ANR	6255611	Identifier	p		6255553	0					
ANR	6255612	Identifier	r		6255553	1					
ANR	6255613	CompoundStatement		11:4:163:184	6255553	1					
ANR	6255614	IdentifierDeclStatement	int from = atoi ( p ) ;	2361:4:50300:50319	6255553	0	True				
ANR	6255615	IdentifierDecl	from = atoi ( p )		6255553	0					
ANR	6255616	IdentifierDeclType	int		6255553	0					
ANR	6255617	Identifier	from		6255553	1					
ANR	6255618	AssignmentExpression	from = atoi ( p )		6255553	2		=			
ANR	6255619	Identifier	from		6255553	0					
ANR	6255620	CallExpression	atoi ( p )		6255553	1					
ANR	6255621	Callee	atoi		6255553	0					
ANR	6255622	Identifier	atoi		6255553	0					
ANR	6255623	ArgumentList	p		6255553	1					
ANR	6255624	Argument	p		6255553	0					
ANR	6255625	Identifier	p		6255553	0					
ANR	6255626	IdentifierDeclStatement	int to = atoi ( r + 1 ) ;	2362:4:50325:50346	6255553	1	True				
ANR	6255627	IdentifierDecl	to = atoi ( r + 1 )		6255553	0					
ANR	6255628	IdentifierDeclType	int		6255553	0					
ANR	6255629	Identifier	to		6255553	1					
ANR	6255630	AssignmentExpression	to = atoi ( r + 1 )		6255553	2		=			
ANR	6255631	Identifier	to		6255553	0					
ANR	6255632	CallExpression	atoi ( r + 1 )		6255553	1					
ANR	6255633	Callee	atoi		6255553	0					
ANR	6255634	Identifier	atoi		6255553	0					
ANR	6255635	ArgumentList	r + 1		6255553	1					
ANR	6255636	Argument	r + 1		6255553	0					
ANR	6255637	AdditiveExpression	r + 1		6255553	0		+			
ANR	6255638	Identifier	r		6255553	0					
ANR	6255639	PrimaryExpression	1		6255553	1					
ANR	6255640	ForStatement	for ( ; from <= to ; from ++ )		6255553	2					
ANR	6255641	Condition	from <= to	2363:11:50359:50368	6255553	0	True				
ANR	6255642	RelationalExpression	from <= to		6255553	0		<=			
ANR	6255643	Identifier	from		6255553	0					
ANR	6255644	Identifier	to		6255553	1					
ANR	6255645	PostIncDecOperationExpression	from ++	2363:23:50371:50376	6255553	1	True				
ANR	6255646	Identifier	from		6255553	0					
ANR	6255647	IncDec	++		6255553	1					
ANR	6255648	CompoundStatement		12:31:217:217	6255553	2					
ANR	6255649	ExpressionStatement	"cb ( u , from )"	2364:5:50386:50398	6255553	0	True				
ANR	6255650	CallExpression	"cb ( u , from )"		6255553	0					
ANR	6255651	Callee	cb		6255553	0					
ANR	6255652	Identifier	cb		6255553	0					
ANR	6255653	ArgumentList	u		6255553	1					
ANR	6255654	Argument	u		6255553	0					
ANR	6255655	Identifier	u		6255553	0					
ANR	6255656	Argument	from		6255553	1					
ANR	6255657	Identifier	from		6255553	0					
ANR	6255658	ElseStatement	else		6255553	0					
ANR	6255659	CompoundStatement		15:10:254:254	6255553	0					
ANR	6255660	ExpressionStatement	"fprintf ( stderr , ""Invalid range\\n"" )"	2367:4:50422:50457	6255553	0	True				
ANR	6255661	CallExpression	"fprintf ( stderr , ""Invalid range\\n"" )"		6255553	0					
ANR	6255662	Callee	fprintf		6255553	0					
ANR	6255663	Identifier	fprintf		6255553	0					
ANR	6255664	ArgumentList	stderr		6255553	1					
ANR	6255665	Argument	stderr		6255553	0					
ANR	6255666	Identifier	stderr		6255553	0					
ANR	6255667	Argument	"""Invalid range\\n"""		6255553	1					
ANR	6255668	PrimaryExpression	"""Invalid range\\n"""		6255553	0					
ANR	6255669	ForStatement	"for ( r ++ ; * r && * r != ',' && * r != '-' ; r ++ )"		6255553	1					
ANR	6255670	ForInit	r ++ ;	2369:8:50472:50475	6255553	0	True				
ANR	6255671	PostIncDecOperationExpression	r ++		6255553	0					
ANR	6255672	Identifier	r		6255553	0					
ANR	6255673	IncDec	++		6255553	1					
ANR	6255674	Condition	"* r && * r != ',' && * r != '-'"	2369:13:50477:50504	6255553	1	True				
ANR	6255675	AndExpression	"* r && * r != ',' && * r != '-'"		6255553	0		&&			
ANR	6255676	UnaryOperationExpression	* r		6255553	0					
ANR	6255677	UnaryOperator	*		6255553	0					
ANR	6255678	Identifier	r		6255553	1					
ANR	6255679	AndExpression	"* r != ',' && * r != '-'"		6255553	1		&&			
ANR	6255680	EqualityExpression	"* r != ','"		6255553	0		!=			
ANR	6255681	UnaryOperationExpression	* r		6255553	0					
ANR	6255682	UnaryOperator	*		6255553	0					
ANR	6255683	Identifier	r		6255553	1					
ANR	6255684	PrimaryExpression	"','"		6255553	1					
ANR	6255685	EqualityExpression	* r != '-'		6255553	1		!=			
ANR	6255686	UnaryOperationExpression	* r		6255553	0					
ANR	6255687	UnaryOperator	*		6255553	0					
ANR	6255688	Identifier	r		6255553	1					
ANR	6255689	PrimaryExpression	'-'		6255553	1					
ANR	6255690	PostIncDecOperationExpression	r ++	2369:43:50507:50509	6255553	2	True				
ANR	6255691	Identifier	r		6255553	0					
ANR	6255692	IncDec	++		6255553	1					
ANR	6255693	CompoundStatement		18:48:350:350	6255553	3					
ANR	6255694	ExpressionStatement		2370:4:50518:50518	6255553	0	True				
ANR	6255695	ExpressionStatement	p = r	2372:3:50528:50533	6255553	2	True				
ANR	6255696	AssignmentExpression	p = r		6255553	0		=			
ANR	6255697	Identifier	p		6255553	0					
ANR	6255698	Identifier	r		6255553	1					
ANR	6255699	IfStatement	if ( * p )		6255553	2					
ANR	6255700	Condition	* p	2375:5:50547:50548	6255553	0	True				
ANR	6255701	UnaryOperationExpression	* p		6255553	0					
ANR	6255702	UnaryOperator	*		6255553	0					
ANR	6255703	Identifier	p		6255553	1					
ANR	6255704	CompoundStatement		24:9:389:389	6255553	1					
ANR	6255705	ExpressionStatement	"cb ( u , atoi ( p ) )"	2376:2:50555:50571	6255553	0	True				
ANR	6255706	CallExpression	"cb ( u , atoi ( p ) )"		6255553	0					
ANR	6255707	Callee	cb		6255553	0					
ANR	6255708	Identifier	cb		6255553	0					
ANR	6255709	ArgumentList	u		6255553	1					
ANR	6255710	Argument	u		6255553	0					
ANR	6255711	Identifier	u		6255553	0					
ANR	6255712	Argument	atoi ( p )		6255553	1					
ANR	6255713	CallExpression	atoi ( p )		6255553	0					
ANR	6255714	Callee	atoi		6255553	0					
ANR	6255715	Identifier	atoi		6255553	0					
ANR	6255716	ArgumentList	p		6255553	1					
ANR	6255717	Argument	p		6255553	0					
ANR	6255718	Identifier	p		6255553	0					
ANR	6255719	ReturnType	R_API void		6255553	1					
ANR	6255720	Identifier	r_str_range_foreach		6255553	2					
ANR	6255721	ParameterList	"const char * r , RStrRangeCallback cb , void * u"		6255553	3					
ANR	6255722	Parameter	const char * r	2352:31:50115:50127	6255553	0	True				
ANR	6255723	ParameterType	const char *		6255553	0					
ANR	6255724	Identifier	r		6255553	1					
ANR	6255725	Parameter	RStrRangeCallback cb	2352:46:50130:50149	6255553	1	True				
ANR	6255726	ParameterType	RStrRangeCallback		6255553	0					
ANR	6255727	Identifier	cb		6255553	1					
ANR	6255728	Parameter	void * u	2352:68:50152:50158	6255553	2	True				
ANR	6255729	ParameterType	void *		6255553	0					
ANR	6255730	Identifier	u		6255553	1					
ANR	6255731	CFGEntryNode	ENTRY		6255553		True				
ANR	6255732	CFGExitNode	EXIT		6255553		True				
ANR	6255733	Symbol	p		6255553						
ANR	6255734	Symbol	atoi		6255553						
ANR	6255735	Symbol	r		6255553						
ANR	6255736	Symbol	u		6255553						
ANR	6255737	Symbol	from		6255553						
ANR	6255738	Symbol	* p		6255553						
ANR	6255739	Symbol	to		6255553						
ANR	6255740	Symbol	* r		6255553						
ANR	6255741	Symbol	stderr		6255553						
ANR	6255742	Symbol	cb		6255553						
ANR	6255743	Function	r_str_range_in	2380:0:50579:51349							
ANR	6255744	FunctionDef	"r_str_range_in (const char * r , ut64 addr)"		6255743	0					
ANR	6255745	CompoundStatement		2380:52:50631:51349	6255743	0					
ANR	6255746	IdentifierDeclStatement	const char * p = r ;	2381:1:50634:50651	6255743	0	True				
ANR	6255747	IdentifierDecl	* p = r		6255743	0					
ANR	6255748	IdentifierDeclType	const char *		6255743	0					
ANR	6255749	Identifier	p		6255743	1					
ANR	6255750	AssignmentExpression	* p = r		6255743	2		=			
ANR	6255751	Identifier	r		6255743	0					
ANR	6255752	Identifier	r		6255743	1					
ANR	6255753	IdentifierDeclStatement	ut64 min = UT64_MAX ;	2382:1:50654:50673	6255743	1	True				
ANR	6255754	IdentifierDecl	min = UT64_MAX		6255743	0					
ANR	6255755	IdentifierDeclType	ut64		6255743	0					
ANR	6255756	Identifier	min		6255743	1					
ANR	6255757	AssignmentExpression	min = UT64_MAX		6255743	2		=			
ANR	6255758	Identifier	UT64_MAX		6255743	0					
ANR	6255759	Identifier	UT64_MAX		6255743	1					
ANR	6255760	IdentifierDeclStatement	ut64 max = 0 ;	2383:1:50676:50688	6255743	2	True				
ANR	6255761	IdentifierDecl	max = 0		6255743	0					
ANR	6255762	IdentifierDeclType	ut64		6255743	0					
ANR	6255763	Identifier	max		6255743	1					
ANR	6255764	AssignmentExpression	max = 0		6255743	2		=			
ANR	6255765	Identifier	max		6255743	0					
ANR	6255766	PrimaryExpression	0		6255743	1					
ANR	6255767	IfStatement	if ( ! r )		6255743	3					
ANR	6255768	Condition	! r	2384:5:50695:50696	6255743	0	True				
ANR	6255769	UnaryOperationExpression	! r		6255743	0					
ANR	6255770	UnaryOperator	!		6255743	0					
ANR	6255771	Identifier	r		6255743	1					
ANR	6255772	CompoundStatement		5:9:67:67	6255743	1					
ANR	6255773	ReturnStatement	return false ;	2385:2:50703:50715	6255743	0	True				
ANR	6255774	Identifier	false		6255743	0					
ANR	6255775	ForStatement	for ( ; * r ; r ++ )		6255743	4					
ANR	6255776	Condition	* r	2387:8:50728:50729	6255743	0	True				
ANR	6255777	UnaryOperationExpression	* r		6255743	0					
ANR	6255778	UnaryOperator	*		6255743	0					
ANR	6255779	Identifier	r		6255743	1					
ANR	6255780	PostIncDecOperationExpression	r ++	2387:12:50732:50734	6255743	1	True				
ANR	6255781	Identifier	r		6255743	0					
ANR	6255782	IncDec	++		6255743	1					
ANR	6255783	CompoundStatement		8:17:105:105	6255743	2					
ANR	6255784	IfStatement	"if ( * r == ',' )"		6255743	0					
ANR	6255785	Condition	"* r == ','"	2388:6:50745:50753	6255743	0	True				
ANR	6255786	EqualityExpression	"* r == ','"		6255743	0		==			
ANR	6255787	UnaryOperationExpression	* r		6255743	0					
ANR	6255788	UnaryOperator	*		6255743	0					
ANR	6255789	Identifier	r		6255743	1					
ANR	6255790	PrimaryExpression	"','"		6255743	1					
ANR	6255791	CompoundStatement		9:17:124:124	6255743	1					
ANR	6255792	IfStatement	if ( max == 0 )		6255743	0					
ANR	6255793	Condition	max == 0	2389:7:50765:50772	6255743	0	True				
ANR	6255794	EqualityExpression	max == 0		6255743	0		==			
ANR	6255795	Identifier	max		6255743	0					
ANR	6255796	PrimaryExpression	0		6255743	1					
ANR	6255797	CompoundStatement		10:17:143:143	6255743	1					
ANR	6255798	IfStatement	"if ( addr == r_num_get ( NULL , p ) )"		6255743	0					
ANR	6255799	Condition	"addr == r_num_get ( NULL , p )"	2390:8:50785:50811	6255743	0	True				
ANR	6255800	EqualityExpression	"addr == r_num_get ( NULL , p )"		6255743	0		==			
ANR	6255801	Identifier	addr		6255743	0					
ANR	6255802	CallExpression	"r_num_get ( NULL , p )"		6255743	1					
ANR	6255803	Callee	r_num_get		6255743	0					
ANR	6255804	Identifier	r_num_get		6255743	0					
ANR	6255805	ArgumentList	NULL		6255743	1					
ANR	6255806	Argument	NULL		6255743	0					
ANR	6255807	Identifier	NULL		6255743	0					
ANR	6255808	Argument	p		6255743	1					
ANR	6255809	Identifier	p		6255743	0					
ANR	6255810	CompoundStatement		11:37:182:182	6255743	1					
ANR	6255811	ReturnStatement	return true ;	2391:5:50821:50832	6255743	0	True				
ANR	6255812	Identifier	true		6255743	0					
ANR	6255813	ElseStatement	else		6255743	0					
ANR	6255814	CompoundStatement		14:10:218:218	6255743	0					
ANR	6255815	IfStatement	"if ( addr >= min && addr <= r_num_get ( NULL , p ) )"		6255743	0					
ANR	6255816	Condition	"addr >= min && addr <= r_num_get ( NULL , p )"	2394:8:50860:50901	6255743	0	True				
ANR	6255817	AndExpression	"addr >= min && addr <= r_num_get ( NULL , p )"		6255743	0		&&			
ANR	6255818	RelationalExpression	addr >= min		6255743	0		>=			
ANR	6255819	Identifier	addr		6255743	0					
ANR	6255820	Identifier	min		6255743	1					
ANR	6255821	RelationalExpression	"addr <= r_num_get ( NULL , p )"		6255743	1		<=			
ANR	6255822	Identifier	addr		6255743	0					
ANR	6255823	CallExpression	"r_num_get ( NULL , p )"		6255743	1					
ANR	6255824	Callee	r_num_get		6255743	0					
ANR	6255825	Identifier	r_num_get		6255743	0					
ANR	6255826	ArgumentList	NULL		6255743	1					
ANR	6255827	Argument	NULL		6255743	0					
ANR	6255828	Identifier	NULL		6255743	0					
ANR	6255829	Argument	p		6255743	1					
ANR	6255830	Identifier	p		6255743	0					
ANR	6255831	CompoundStatement		15:52:272:272	6255743	1					
ANR	6255832	ReturnStatement	return true ;	2395:5:50911:50922	6255743	0	True				
ANR	6255833	Identifier	true		6255743	0					
ANR	6255834	ExpressionStatement	p = r + 1	2398:3:50938:50947	6255743	1	True				
ANR	6255835	AssignmentExpression	p = r + 1		6255743	0		=			
ANR	6255836	Identifier	p		6255743	0					
ANR	6255837	AdditiveExpression	r + 1		6255743	1		+			
ANR	6255838	Identifier	r		6255743	0					
ANR	6255839	PrimaryExpression	1		6255743	1					
ANR	6255840	IfStatement	if ( * r == '-' )		6255743	1					
ANR	6255841	Condition	* r == '-'	2400:6:50959:50967	6255743	0	True				
ANR	6255842	EqualityExpression	* r == '-'		6255743	0		==			
ANR	6255843	UnaryOperationExpression	* r		6255743	0					
ANR	6255844	UnaryOperator	*		6255743	0					
ANR	6255845	Identifier	r		6255743	1					
ANR	6255846	PrimaryExpression	'-'		6255743	1					
ANR	6255847	CompoundStatement		21:17:338:338	6255743	1					
ANR	6255848	IfStatement	if ( p != r )		6255743	0					
ANR	6255849	Condition	p != r	2401:7:50979:50984	6255743	0	True				
ANR	6255850	EqualityExpression	p != r		6255743	0		!=			
ANR	6255851	Identifier	p		6255743	0					
ANR	6255852	Identifier	r		6255743	1					
ANR	6255853	CompoundStatement		24:4:398:431	6255743	1					
ANR	6255854	IdentifierDeclStatement	"ut64 from = r_num_get ( NULL , p ) ;"	2402:4:50993:51024	6255743	0	True				
ANR	6255855	IdentifierDecl	"from = r_num_get ( NULL , p )"		6255743	0					
ANR	6255856	IdentifierDeclType	ut64		6255743	0					
ANR	6255857	Identifier	from		6255743	1					
ANR	6255858	AssignmentExpression	"from = r_num_get ( NULL , p )"		6255743	2		=			
ANR	6255859	Identifier	from		6255743	0					
ANR	6255860	CallExpression	"r_num_get ( NULL , p )"		6255743	1					
ANR	6255861	Callee	r_num_get		6255743	0					
ANR	6255862	Identifier	r_num_get		6255743	0					
ANR	6255863	ArgumentList	NULL		6255743	1					
ANR	6255864	Argument	NULL		6255743	0					
ANR	6255865	Identifier	NULL		6255743	0					
ANR	6255866	Argument	p		6255743	1					
ANR	6255867	Identifier	p		6255743	0					
ANR	6255868	IdentifierDeclStatement	"ut64 to = r_num_get ( NULL , r + 1 ) ;"	2403:4:51030:51063	6255743	1	True				
ANR	6255869	IdentifierDecl	"to = r_num_get ( NULL , r + 1 )"		6255743	0					
ANR	6255870	IdentifierDeclType	ut64		6255743	0					
ANR	6255871	Identifier	to		6255743	1					
ANR	6255872	AssignmentExpression	"to = r_num_get ( NULL , r + 1 )"		6255743	2		=			
ANR	6255873	Identifier	to		6255743	0					
ANR	6255874	CallExpression	"r_num_get ( NULL , r + 1 )"		6255743	1					
ANR	6255875	Callee	r_num_get		6255743	0					
ANR	6255876	Identifier	r_num_get		6255743	0					
ANR	6255877	ArgumentList	NULL		6255743	1					
ANR	6255878	Argument	NULL		6255743	0					
ANR	6255879	Identifier	NULL		6255743	0					
ANR	6255880	Argument	r + 1		6255743	1					
ANR	6255881	AdditiveExpression	r + 1		6255743	0		+			
ANR	6255882	Identifier	r		6255743	0					
ANR	6255883	PrimaryExpression	1		6255743	1					
ANR	6255884	IfStatement	if ( addr >= from && addr <= to )		6255743	2					
ANR	6255885	Condition	addr >= from && addr <= to	2404:8:51073:51098	6255743	0	True				
ANR	6255886	AndExpression	addr >= from && addr <= to		6255743	0		&&			
ANR	6255887	RelationalExpression	addr >= from		6255743	0		>=			
ANR	6255888	Identifier	addr		6255743	0					
ANR	6255889	Identifier	from		6255743	1					
ANR	6255890	RelationalExpression	addr <= to		6255743	1		<=			
ANR	6255891	Identifier	addr		6255743	0					
ANR	6255892	Identifier	to		6255743	1					
ANR	6255893	CompoundStatement		25:36:469:469	6255743	1					
ANR	6255894	ReturnStatement	return true ;	2405:5:51108:51119	6255743	0	True				
ANR	6255895	Identifier	true		6255743	0					
ANR	6255896	ElseStatement	else		6255743	0					
ANR	6255897	CompoundStatement		28:10:505:505	6255743	0					
ANR	6255898	ExpressionStatement	"fprintf ( stderr , ""Invalid range\\n"" )"	2408:4:51143:51178	6255743	0	True				
ANR	6255899	CallExpression	"fprintf ( stderr , ""Invalid range\\n"" )"		6255743	0					
ANR	6255900	Callee	fprintf		6255743	0					
ANR	6255901	Identifier	fprintf		6255743	0					
ANR	6255902	ArgumentList	stderr		6255743	1					
ANR	6255903	Argument	stderr		6255743	0					
ANR	6255904	Identifier	stderr		6255743	0					
ANR	6255905	Argument	"""Invalid range\\n"""		6255743	1					
ANR	6255906	PrimaryExpression	"""Invalid range\\n"""		6255743	0					
ANR	6255907	ForStatement	"for ( r ++ ; * r && * r != ',' && * r != '-' ; r ++ )"		6255743	1					
ANR	6255908	ForInit	r ++ ;	2410:8:51193:51196	6255743	0	True				
ANR	6255909	PostIncDecOperationExpression	r ++		6255743	0					
ANR	6255910	Identifier	r		6255743	0					
ANR	6255911	IncDec	++		6255743	1					
ANR	6255912	Condition	"* r && * r != ',' && * r != '-'"	2410:13:51198:51225	6255743	1	True				
ANR	6255913	AndExpression	"* r && * r != ',' && * r != '-'"		6255743	0		&&			
ANR	6255914	UnaryOperationExpression	* r		6255743	0					
ANR	6255915	UnaryOperator	*		6255743	0					
ANR	6255916	Identifier	r		6255743	1					
ANR	6255917	AndExpression	"* r != ',' && * r != '-'"		6255743	1		&&			
ANR	6255918	EqualityExpression	"* r != ','"		6255743	0		!=			
ANR	6255919	UnaryOperationExpression	* r		6255743	0					
ANR	6255920	UnaryOperator	*		6255743	0					
ANR	6255921	Identifier	r		6255743	1					
ANR	6255922	PrimaryExpression	"','"		6255743	1					
ANR	6255923	EqualityExpression	* r != '-'		6255743	1		!=			
ANR	6255924	UnaryOperationExpression	* r		6255743	0					
ANR	6255925	UnaryOperator	*		6255743	0					
ANR	6255926	Identifier	r		6255743	1					
ANR	6255927	PrimaryExpression	'-'		6255743	1					
ANR	6255928	PostIncDecOperationExpression	r ++	2410:43:51228:51230	6255743	2	True				
ANR	6255929	Identifier	r		6255743	0					
ANR	6255930	IncDec	++		6255743	1					
ANR	6255931	CompoundStatement		31:48:601:601	6255743	3					
ANR	6255932	ExpressionStatement		2411:4:51239:51239	6255743	0	True				
ANR	6255933	ExpressionStatement	p = r	2413:3:51249:51254	6255743	2	True				
ANR	6255934	AssignmentExpression	p = r		6255743	0		=			
ANR	6255935	Identifier	p		6255743	0					
ANR	6255936	Identifier	r		6255743	1					
ANR	6255937	IfStatement	if ( * p )		6255743	5					
ANR	6255938	Condition	* p	2416:5:51268:51269	6255743	0	True				
ANR	6255939	UnaryOperationExpression	* p		6255743	0					
ANR	6255940	UnaryOperator	*		6255743	0					
ANR	6255941	Identifier	p		6255743	1					
ANR	6255942	CompoundStatement		37:9:640:640	6255743	1					
ANR	6255943	IfStatement	"if ( addr == r_num_get ( NULL , p ) )"		6255743	0					
ANR	6255944	Condition	"addr == r_num_get ( NULL , p )"	2417:6:51280:51306	6255743	0	True				
ANR	6255945	EqualityExpression	"addr == r_num_get ( NULL , p )"		6255743	0		==			
ANR	6255946	Identifier	addr		6255743	0					
ANR	6255947	CallExpression	"r_num_get ( NULL , p )"		6255743	1					
ANR	6255948	Callee	r_num_get		6255743	0					
ANR	6255949	Identifier	r_num_get		6255743	0					
ANR	6255950	ArgumentList	NULL		6255743	1					
ANR	6255951	Argument	NULL		6255743	0					
ANR	6255952	Identifier	NULL		6255743	0					
ANR	6255953	Argument	p		6255743	1					
ANR	6255954	Identifier	p		6255743	0					
ANR	6255955	CompoundStatement		38:35:677:677	6255743	1					
ANR	6255956	ReturnStatement	return true ;	2418:3:51314:51325	6255743	0	True				
ANR	6255957	Identifier	true		6255743	0					
ANR	6255958	ReturnStatement	return false ;	2421:1:51335:51347	6255743	6	True				
ANR	6255959	Identifier	false		6255743	0					
ANR	6255960	ReturnType	R_API bool		6255743	1					
ANR	6255961	Identifier	r_str_range_in		6255743	2					
ANR	6255962	ParameterList	"const char * r , ut64 addr"		6255743	3					
ANR	6255963	Parameter	const char * r	2380:26:50605:50617	6255743	0	True				
ANR	6255964	ParameterType	const char *		6255743	0					
ANR	6255965	Identifier	r		6255743	1					
ANR	6255966	Parameter	ut64 addr	2380:41:50620:50628	6255743	1	True				
ANR	6255967	ParameterType	ut64		6255743	0					
ANR	6255968	Identifier	addr		6255743	1					
ANR	6255969	CFGEntryNode	ENTRY		6255743		True				
ANR	6255970	CFGExitNode	EXIT		6255743		True				
ANR	6255971	Symbol	NULL		6255743						
ANR	6255972	Symbol	max		6255743						
ANR	6255973	Symbol	false		6255743						
ANR	6255974	Symbol	stderr		6255743						
ANR	6255975	Symbol	p		6255743						
ANR	6255976	Symbol	r		6255743						
ANR	6255977	Symbol	min		6255743						
ANR	6255978	Symbol	true		6255743						
ANR	6255979	Symbol	r_num_get		6255743						
ANR	6255980	Symbol	from		6255743						
ANR	6255981	Symbol	* p		6255743						
ANR	6255982	Symbol	to		6255743						
ANR	6255983	Symbol	addr		6255743						
ANR	6255984	Symbol	UT64_MAX		6255743						
ANR	6255985	Symbol	* r		6255743						
ANR	6255986	Function	r_str_uri_decode	2426:0:51460:51657							
ANR	6255987	FunctionDef	r_str_uri_decode (char * s)		6255986	0					
ANR	6255988	CompoundStatement		2426:37:51497:51657	6255986	0					
ANR	6255989	IdentifierDeclStatement	int n ;	2427:1:51500:51505	6255986	0	True				
ANR	6255990	IdentifierDecl	n		6255986	0					
ANR	6255991	IdentifierDeclType	int		6255986	0					
ANR	6255992	Identifier	n		6255986	1					
ANR	6255993	IdentifierDeclStatement	char * d ;	2428:1:51508:51515	6255986	1	True				
ANR	6255994	IdentifierDecl	* d		6255986	0					
ANR	6255995	IdentifierDeclType	char *		6255986	0					
ANR	6255996	Identifier	d		6255986	1					
ANR	6255997	ForStatement	"for ( d = s ; * s ; s ++ , d ++ )"		6255986	2					
ANR	6255998	ForInit	d = s ;	2429:6:51523:51528	6255986	0	True				
ANR	6255999	AssignmentExpression	d = s		6255986	0		=			
ANR	6256000	Identifier	d		6255986	0					
ANR	6256001	Identifier	s		6255986	1					
ANR	6256002	Condition	* s	2429:13:51530:51531	6255986	1	True				
ANR	6256003	UnaryOperationExpression	* s		6255986	0					
ANR	6256004	UnaryOperator	*		6255986	0					
ANR	6256005	Identifier	s		6255986	1					
ANR	6256006	Expression	"s ++ , d ++"	2429:17:51534:51541	6255986	2	True				
ANR	6256007	PostIncDecOperationExpression	s ++		6255986	0					
ANR	6256008	Identifier	s		6255986	0					
ANR	6256009	IncDec	++		6255986	1					
ANR	6256010	PostIncDecOperationExpression	d ++		6255986	1					
ANR	6256011	Identifier	d		6255986	0					
ANR	6256012	IncDec	++		6255986	1					
ANR	6256013	CompoundStatement		4:27:46:46	6255986	3					
ANR	6256014	IfStatement	if ( * s == '%' )		6255986	0					
ANR	6256015	Condition	* s == '%'	2430:6:51552:51560	6255986	0	True				
ANR	6256016	EqualityExpression	* s == '%'		6255986	0		==			
ANR	6256017	UnaryOperationExpression	* s		6255986	0					
ANR	6256018	UnaryOperator	*		6255986	0					
ANR	6256019	Identifier	s		6255986	1					
ANR	6256020	PrimaryExpression	'%'		6255986	1					
ANR	6256021	CompoundStatement		5:17:65:65	6255986	1					
ANR	6256022	ExpressionStatement	"sscanf ( s + 1 , ""%02x"" , & n )"	2431:3:51568:51594	6255986	0	True				
ANR	6256023	CallExpression	"sscanf ( s + 1 , ""%02x"" , & n )"		6255986	0					
ANR	6256024	Callee	sscanf		6255986	0					
ANR	6256025	Identifier	sscanf		6255986	0					
ANR	6256026	ArgumentList	s + 1		6255986	1					
ANR	6256027	Argument	s + 1		6255986	0					
ANR	6256028	AdditiveExpression	s + 1		6255986	0		+			
ANR	6256029	Identifier	s		6255986	0					
ANR	6256030	PrimaryExpression	1		6255986	1					
ANR	6256031	Argument	"""%02x"""		6255986	1					
ANR	6256032	PrimaryExpression	"""%02x"""		6255986	0					
ANR	6256033	Argument	& n		6255986	2					
ANR	6256034	UnaryOperationExpression	& n		6255986	0					
ANR	6256035	UnaryOperator	&		6255986	0					
ANR	6256036	Identifier	n		6255986	1					
ANR	6256037	ExpressionStatement	* d = n	2432:3:51599:51605	6255986	1	True				
ANR	6256038	AssignmentExpression	* d = n		6255986	0		=			
ANR	6256039	UnaryOperationExpression	* d		6255986	0					
ANR	6256040	UnaryOperator	*		6255986	0					
ANR	6256041	Identifier	d		6255986	1					
ANR	6256042	Identifier	n		6255986	1					
ANR	6256043	ExpressionStatement	s += 2	2433:3:51610:51616	6255986	2	True				
ANR	6256044	AssignmentExpression	s += 2		6255986	0		+=			
ANR	6256045	Identifier	s		6255986	0					
ANR	6256046	PrimaryExpression	2		6255986	1					
ANR	6256047	ElseStatement	else		6255986	0					
ANR	6256048	CompoundStatement		9:9:129:129	6255986	0					
ANR	6256049	ExpressionStatement	* d = * s	2435:3:51632:51639	6255986	0	True				
ANR	6256050	AssignmentExpression	* d = * s		6255986	0		=			
ANR	6256051	UnaryOperationExpression	* d		6255986	0					
ANR	6256052	UnaryOperator	*		6255986	0					
ANR	6256053	Identifier	d		6255986	1					
ANR	6256054	UnaryOperationExpression	* s		6255986	1					
ANR	6256055	UnaryOperator	*		6255986	0					
ANR	6256056	Identifier	s		6255986	1					
ANR	6256057	ExpressionStatement	* d = 0	2438:1:51649:51655	6255986	3	True				
ANR	6256058	AssignmentExpression	* d = 0		6255986	0		=			
ANR	6256059	UnaryOperationExpression	* d		6255986	0					
ANR	6256060	UnaryOperator	*		6255986	0					
ANR	6256061	Identifier	d		6255986	1					
ANR	6256062	PrimaryExpression	0		6255986	1					
ANR	6256063	ReturnType	R_API void		6255986	1					
ANR	6256064	Identifier	r_str_uri_decode		6255986	2					
ANR	6256065	ParameterList	char * s		6255986	3					
ANR	6256066	Parameter	char * s	2426:28:51488:51494	6255986	0	True				
ANR	6256067	ParameterType	char *		6255986	0					
ANR	6256068	Identifier	s		6255986	1					
ANR	6256069	CFGEntryNode	ENTRY		6255986		True				
ANR	6256070	CFGExitNode	EXIT		6255986		True				
ANR	6256071	Symbol	s		6255986						
ANR	6256072	Symbol	d		6255986						
ANR	6256073	Symbol	& n		6255986						
ANR	6256074	Symbol	* s		6255986						
ANR	6256075	Symbol	n		6255986						
ANR	6256076	Symbol	* d		6255986						
ANR	6256077	Function	r_str_uri_encode	2441:0:51660:52162							
ANR	6256078	FunctionDef	r_str_uri_encode (const char * s)		6256077	0					
ANR	6256079	CompoundStatement		2441:44:51704:52162	6256077	0					
ANR	6256080	IdentifierDeclStatement	"char ch [ 4 ] , * d , * od ;"	2442:1:51707:51726	6256077	0	True				
ANR	6256081	IdentifierDecl	ch [ 4 ]		6256077	0					
ANR	6256082	IdentifierDeclType	char [ 4 ]		6256077	0					
ANR	6256083	Identifier	ch		6256077	1					
ANR	6256084	PrimaryExpression	4		6256077	2					
ANR	6256085	IdentifierDecl	* d		6256077	1					
ANR	6256086	IdentifierDeclType	char *		6256077	0					
ANR	6256087	Identifier	d		6256077	1					
ANR	6256088	IdentifierDecl	* od		6256077	2					
ANR	6256089	IdentifierDeclType	char *		6256077	0					
ANR	6256090	Identifier	od		6256077	1					
ANR	6256091	IfStatement	if ( ! s )		6256077	1					
ANR	6256092	Condition	! s	2443:5:51733:51734	6256077	0	True				
ANR	6256093	UnaryOperationExpression	! s		6256077	0					
ANR	6256094	UnaryOperator	!		6256077	0					
ANR	6256095	Identifier	s		6256077	1					
ANR	6256096	CompoundStatement		3:9:32:32	6256077	1					
ANR	6256097	ReturnStatement	return NULL ;	2444:2:51741:51752	6256077	0	True				
ANR	6256098	Identifier	NULL		6256077	0					
ANR	6256099	ExpressionStatement	od = d = malloc ( 1 + ( strlen ( s ) * 4 ) )	2446:1:51758:51796	6256077	2	True				
ANR	6256100	AssignmentExpression	od = d = malloc ( 1 + ( strlen ( s ) * 4 ) )		6256077	0		=			
ANR	6256101	Identifier	od		6256077	0					
ANR	6256102	AssignmentExpression	d = malloc ( 1 + ( strlen ( s ) * 4 ) )		6256077	1		=			
ANR	6256103	Identifier	d		6256077	0					
ANR	6256104	CallExpression	malloc ( 1 + ( strlen ( s ) * 4 ) )		6256077	1					
ANR	6256105	Callee	malloc		6256077	0					
ANR	6256106	Identifier	malloc		6256077	0					
ANR	6256107	ArgumentList	1 + ( strlen ( s ) * 4 )		6256077	1					
ANR	6256108	Argument	1 + ( strlen ( s ) * 4 )		6256077	0					
ANR	6256109	AdditiveExpression	1 + ( strlen ( s ) * 4 )		6256077	0		+			
ANR	6256110	PrimaryExpression	1		6256077	0					
ANR	6256111	MultiplicativeExpression	strlen ( s ) * 4		6256077	1		*			
ANR	6256112	CallExpression	strlen ( s )		6256077	0					
ANR	6256113	Callee	strlen		6256077	0					
ANR	6256114	Identifier	strlen		6256077	0					
ANR	6256115	ArgumentList	s		6256077	1					
ANR	6256116	Argument	s		6256077	0					
ANR	6256117	Identifier	s		6256077	0					
ANR	6256118	PrimaryExpression	4		6256077	1					
ANR	6256119	IfStatement	if ( ! d )		6256077	3					
ANR	6256120	Condition	! d	2447:5:51803:51804	6256077	0	True				
ANR	6256121	UnaryOperationExpression	! d		6256077	0					
ANR	6256122	UnaryOperator	!		6256077	0					
ANR	6256123	Identifier	d		6256077	1					
ANR	6256124	CompoundStatement		7:9:102:102	6256077	1					
ANR	6256125	ReturnStatement	return NULL ;	2448:2:51811:51822	6256077	0	True				
ANR	6256126	Identifier	NULL		6256077	0					
ANR	6256127	ForStatement	for ( ; * s ; s ++ )		6256077	4					
ANR	6256128	Condition	* s	2450:8:51835:51836	6256077	0	True				
ANR	6256129	UnaryOperationExpression	* s		6256077	0					
ANR	6256130	UnaryOperator	*		6256077	0					
ANR	6256131	Identifier	s		6256077	1					
ANR	6256132	PostIncDecOperationExpression	s ++	2450:12:51839:51841	6256077	1	True				
ANR	6256133	Identifier	s		6256077	0					
ANR	6256134	IncDec	++		6256077	1					
ANR	6256135	CompoundStatement		10:17:139:139	6256077	2					
ANR	6256136	IfStatement	if ( ( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' ) )		6256077	0					
ANR	6256137	Condition	( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )	2451:5:51851:51922	6256077	0	True				
ANR	6256138	OrExpression	( * s >= '0' && * s <= '9' ) || ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )		6256077	0		||			
ANR	6256139	AndExpression	* s >= '0' && * s <= '9'		6256077	0		&&			
ANR	6256140	RelationalExpression	* s >= '0'		6256077	0		>=			
ANR	6256141	UnaryOperationExpression	* s		6256077	0					
ANR	6256142	UnaryOperator	*		6256077	0					
ANR	6256143	Identifier	s		6256077	1					
ANR	6256144	PrimaryExpression	'0'		6256077	1					
ANR	6256145	RelationalExpression	* s <= '9'		6256077	1		<=			
ANR	6256146	UnaryOperationExpression	* s		6256077	0					
ANR	6256147	UnaryOperator	*		6256077	0					
ANR	6256148	Identifier	s		6256077	1					
ANR	6256149	PrimaryExpression	'9'		6256077	1					
ANR	6256150	OrExpression	( * s >= 'a' && * s <= 'z' ) || ( * s >= 'A' && * s <= 'Z' )		6256077	1		||			
ANR	6256151	AndExpression	* s >= 'a' && * s <= 'z'		6256077	0		&&			
ANR	6256152	RelationalExpression	* s >= 'a'		6256077	0		>=			
ANR	6256153	UnaryOperationExpression	* s		6256077	0					
ANR	6256154	UnaryOperator	*		6256077	0					
ANR	6256155	Identifier	s		6256077	1					
ANR	6256156	PrimaryExpression	'a'		6256077	1					
ANR	6256157	RelationalExpression	* s <= 'z'		6256077	1		<=			
ANR	6256158	UnaryOperationExpression	* s		6256077	0					
ANR	6256159	UnaryOperator	*		6256077	0					
ANR	6256160	Identifier	s		6256077	1					
ANR	6256161	PrimaryExpression	'z'		6256077	1					
ANR	6256162	AndExpression	* s >= 'A' && * s <= 'Z'		6256077	1		&&			
ANR	6256163	RelationalExpression	* s >= 'A'		6256077	0		>=			
ANR	6256164	UnaryOperationExpression	* s		6256077	0					
ANR	6256165	UnaryOperator	*		6256077	0					
ANR	6256166	Identifier	s		6256077	1					
ANR	6256167	PrimaryExpression	'A'		6256077	1					
ANR	6256168	RelationalExpression	* s <= 'Z'		6256077	1		<=			
ANR	6256169	UnaryOperationExpression	* s		6256077	0					
ANR	6256170	UnaryOperator	*		6256077	0					
ANR	6256171	Identifier	s		6256077	1					
ANR	6256172	PrimaryExpression	'Z'		6256077	1					
ANR	6256173	CompoundStatement		13:27:220:220	6256077	1					
ANR	6256174	ExpressionStatement	* d ++ = * s	2454:3:51930:51939	6256077	0	True				
ANR	6256175	AssignmentExpression	* d ++ = * s		6256077	0		=			
ANR	6256176	UnaryOperationExpression	* d ++		6256077	0					
ANR	6256177	UnaryOperator	*		6256077	0					
ANR	6256178	PostIncDecOperationExpression	d ++		6256077	1					
ANR	6256179	Identifier	d		6256077	0					
ANR	6256180	IncDec	++		6256077	1					
ANR	6256181	UnaryOperationExpression	* s		6256077	1					
ANR	6256182	UnaryOperator	*		6256077	0					
ANR	6256183	Identifier	s		6256077	1					
ANR	6256184	ElseStatement	else		6256077	0					
ANR	6256185	CompoundStatement		15:9:245:245	6256077	0					
ANR	6256186	ExpressionStatement	* d ++ = '%'	2456:3:51955:51965	6256077	0	True				
ANR	6256187	AssignmentExpression	* d ++ = '%'		6256077	0		=			
ANR	6256188	UnaryOperationExpression	* d ++		6256077	0					
ANR	6256189	UnaryOperator	*		6256077	0					
ANR	6256190	PostIncDecOperationExpression	d ++		6256077	1					
ANR	6256191	Identifier	d		6256077	0					
ANR	6256192	IncDec	++		6256077	1					
ANR	6256193	PrimaryExpression	'%'		6256077	1					
ANR	6256194	ExpressionStatement	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"	2457:3:51970:52022	6256077	1	True				
ANR	6256195	CallExpression	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"		6256077	0					
ANR	6256196	Callee	snprintf		6256077	0					
ANR	6256197	Identifier	snprintf		6256077	0					
ANR	6256198	ArgumentList	ch		6256077	1					
ANR	6256199	Argument	ch		6256077	0					
ANR	6256200	Identifier	ch		6256077	0					
ANR	6256201	Argument	sizeof ( ch )		6256077	1					
ANR	6256202	SizeofExpression	sizeof ( ch )		6256077	0					
ANR	6256203	Sizeof	sizeof		6256077	0					
ANR	6256204	SizeofOperand	ch		6256077	1					
ANR	6256205	Argument	"""%02x"""		6256077	2					
ANR	6256206	PrimaryExpression	"""%02x"""		6256077	0					
ANR	6256207	Argument	0xff & ( ( ut8 ) * s )		6256077	3					
ANR	6256208	BitAndExpression	0xff & ( ( ut8 ) * s )		6256077	0		&			
ANR	6256209	PrimaryExpression	0xff		6256077	0					
ANR	6256210	CastExpression	( ut8 ) * s		6256077	1					
ANR	6256211	CastTarget	ut8		6256077	0					
ANR	6256212	UnaryOperationExpression	* s		6256077	1					
ANR	6256213	UnaryOperator	*		6256077	0					
ANR	6256214	Identifier	s		6256077	1					
ANR	6256215	ExpressionStatement	* d ++ = ch [ 0 ]	2458:3:52027:52039	6256077	2	True				
ANR	6256216	AssignmentExpression	* d ++ = ch [ 0 ]		6256077	0		=			
ANR	6256217	UnaryOperationExpression	* d ++		6256077	0					
ANR	6256218	UnaryOperator	*		6256077	0					
ANR	6256219	PostIncDecOperationExpression	d ++		6256077	1					
ANR	6256220	Identifier	d		6256077	0					
ANR	6256221	IncDec	++		6256077	1					
ANR	6256222	ArrayIndexing	ch [ 0 ]		6256077	1					
ANR	6256223	Identifier	ch		6256077	0					
ANR	6256224	PrimaryExpression	0		6256077	1					
ANR	6256225	ExpressionStatement	* d ++ = ch [ 1 ]	2459:3:52044:52056	6256077	3	True				
ANR	6256226	AssignmentExpression	* d ++ = ch [ 1 ]		6256077	0		=			
ANR	6256227	UnaryOperationExpression	* d ++		6256077	0					
ANR	6256228	UnaryOperator	*		6256077	0					
ANR	6256229	PostIncDecOperationExpression	d ++		6256077	1					
ANR	6256230	Identifier	d		6256077	0					
ANR	6256231	IncDec	++		6256077	1					
ANR	6256232	ArrayIndexing	ch [ 1 ]		6256077	1					
ANR	6256233	Identifier	ch		6256077	0					
ANR	6256234	PrimaryExpression	1		6256077	1					
ANR	6256235	ExpressionStatement	* d = 0	2462:1:52066:52072	6256077	5	True				
ANR	6256236	AssignmentExpression	* d = 0		6256077	0		=			
ANR	6256237	UnaryOperationExpression	* d		6256077	0					
ANR	6256238	UnaryOperator	*		6256077	0					
ANR	6256239	Identifier	d		6256077	1					
ANR	6256240	PrimaryExpression	0		6256077	1					
ANR	6256241	IdentifierDeclStatement	"char * trimDown = realloc ( od , strlen ( od ) + 1 ) ;"	2463:1:52075:52121	6256077	6	True				
ANR	6256242	IdentifierDecl	"* trimDown = realloc ( od , strlen ( od ) + 1 )"		6256077	0					
ANR	6256243	IdentifierDeclType	char *		6256077	0					
ANR	6256244	Identifier	trimDown		6256077	1					
ANR	6256245	AssignmentExpression	"* trimDown = realloc ( od , strlen ( od ) + 1 )"		6256077	2		=			
ANR	6256246	Identifier	trimDown		6256077	0					
ANR	6256247	CallExpression	"realloc ( od , strlen ( od ) + 1 )"		6256077	1					
ANR	6256248	Callee	realloc		6256077	0					
ANR	6256249	Identifier	realloc		6256077	0					
ANR	6256250	ArgumentList	od		6256077	1					
ANR	6256251	Argument	od		6256077	0					
ANR	6256252	Identifier	od		6256077	0					
ANR	6256253	Argument	strlen ( od ) + 1		6256077	1					
ANR	6256254	AdditiveExpression	strlen ( od ) + 1		6256077	0		+			
ANR	6256255	CallExpression	strlen ( od )		6256077	0					
ANR	6256256	Callee	strlen		6256077	0					
ANR	6256257	Identifier	strlen		6256077	0					
ANR	6256258	ArgumentList	od		6256077	1					
ANR	6256259	Argument	od		6256077	0					
ANR	6256260	Identifier	od		6256077	0					
ANR	6256261	PrimaryExpression	1		6256077	1					
ANR	6256262	ReturnStatement	return trimDown ? trimDown : od ;	2464:1:52131:52160	6256077	7	True				
ANR	6256263	ConditionalExpression	trimDown ? trimDown : od		6256077	0					
ANR	6256264	Condition	trimDown		6256077	0					
ANR	6256265	Identifier	trimDown		6256077	0					
ANR	6256266	Identifier	trimDown		6256077	1					
ANR	6256267	Identifier	od		6256077	2					
ANR	6256268	ReturnType	R_API char *		6256077	1					
ANR	6256269	Identifier	r_str_uri_encode		6256077	2					
ANR	6256270	ParameterList	const char * s		6256077	3					
ANR	6256271	Parameter	const char * s	2441:29:51689:51701	6256077	0	True				
ANR	6256272	ParameterType	const char *		6256077	0					
ANR	6256273	Identifier	s		6256077	1					
ANR	6256274	CFGEntryNode	ENTRY		6256077		True				
ANR	6256275	CFGExitNode	EXIT		6256077		True				
ANR	6256276	Symbol	malloc		6256077						
ANR	6256277	Symbol	NULL		6256077						
ANR	6256278	Symbol	d		6256077						
ANR	6256279	Symbol	ch		6256077						
ANR	6256280	Symbol	* ch		6256077						
ANR	6256281	Symbol	realloc		6256077						
ANR	6256282	Symbol	* d ++		6256077						
ANR	6256283	Symbol	* d		6256077						
ANR	6256284	Symbol	strlen		6256077						
ANR	6256285	Symbol	s		6256077						
ANR	6256286	Symbol	od		6256077						
ANR	6256287	Symbol	trimDown		6256077						
ANR	6256288	Symbol	* s		6256077						
ANR	6256289	Function	r_str_utf16_to_utf8	2467:0:52165:53642							
ANR	6256290	FunctionDef	"r_str_utf16_to_utf8 (ut8 * dst , int len_dst , const ut8 * src , int len_src , int little_endian)"		6256289	0					
ANR	6256291	CompoundStatement		2467:101:52266:53642	6256289	0					
ANR	6256292	IdentifierDeclStatement	ut8 * outstart = dst ;	2468:1:52269:52288	6256289	0	True				
ANR	6256293	IdentifierDecl	* outstart = dst		6256289	0					
ANR	6256294	IdentifierDeclType	ut8 *		6256289	0					
ANR	6256295	Identifier	outstart		6256289	1					
ANR	6256296	AssignmentExpression	* outstart = dst		6256289	2		=			
ANR	6256297	Identifier	dst		6256289	0					
ANR	6256298	Identifier	dst		6256289	1					
ANR	6256299	IdentifierDeclStatement	ut8 * outend = dst + len_dst ;	2469:1:52291:52318	6256289	1	True				
ANR	6256300	IdentifierDecl	* outend = dst + len_dst		6256289	0					
ANR	6256301	IdentifierDeclType	ut8 *		6256289	0					
ANR	6256302	Identifier	outend		6256289	1					
ANR	6256303	AssignmentExpression	* outend = dst + len_dst		6256289	2		=			
ANR	6256304	Identifier	outend		6256289	0					
ANR	6256305	AdditiveExpression	dst + len_dst		6256289	1		+			
ANR	6256306	Identifier	dst		6256289	0					
ANR	6256307	Identifier	len_dst		6256289	1					
ANR	6256308	IdentifierDeclStatement	ut16 * in = ( ut16 * ) src ;	2470:1:52321:52342	6256289	2	True				
ANR	6256309	IdentifierDecl	* in = ( ut16 * ) src		6256289	0					
ANR	6256310	IdentifierDeclType	ut16 *		6256289	0					
ANR	6256311	Identifier	in		6256289	1					
ANR	6256312	AssignmentExpression	* in = ( ut16 * ) src		6256289	2		=			
ANR	6256313	Identifier	in		6256289	0					
ANR	6256314	CastExpression	( ut16 * ) src		6256289	1					
ANR	6256315	CastTarget	ut16 *		6256289	0					
ANR	6256316	Identifier	src		6256289	1					
ANR	6256317	IdentifierDeclStatement	ut16 * inend ;	2471:1:52345:52356	6256289	3	True				
ANR	6256318	IdentifierDecl	* inend		6256289	0					
ANR	6256319	IdentifierDeclType	ut16 *		6256289	0					
ANR	6256320	Identifier	inend		6256289	1					
ANR	6256321	IdentifierDeclStatement	"ut32 c , d , inlen ;"	2472:1:52359:52375	6256289	4	True				
ANR	6256322	IdentifierDecl	c		6256289	0					
ANR	6256323	IdentifierDeclType	ut32		6256289	0					
ANR	6256324	Identifier	c		6256289	1					
ANR	6256325	IdentifierDecl	d		6256289	1					
ANR	6256326	IdentifierDeclType	ut32		6256289	0					
ANR	6256327	Identifier	d		6256289	1					
ANR	6256328	IdentifierDecl	inlen		6256289	2					
ANR	6256329	IdentifierDeclType	ut32		6256289	0					
ANR	6256330	Identifier	inlen		6256289	1					
ANR	6256331	IdentifierDeclStatement	ut8 * tmp ;	2473:1:52378:52386	6256289	5	True				
ANR	6256332	IdentifierDecl	* tmp		6256289	0					
ANR	6256333	IdentifierDeclType	ut8 *		6256289	0					
ANR	6256334	Identifier	tmp		6256289	1					
ANR	6256335	IdentifierDeclStatement	int bits ;	2474:1:52389:52397	6256289	6	True				
ANR	6256336	IdentifierDecl	bits		6256289	0					
ANR	6256337	IdentifierDeclType	int		6256289	0					
ANR	6256338	Identifier	bits		6256289	1					
ANR	6256339	IfStatement	if ( ( len_src % 2 ) == 1 )		6256289	7					
ANR	6256340	Condition	( len_src % 2 ) == 1	2476:5:52405:52422	6256289	0	True				
ANR	6256341	EqualityExpression	( len_src % 2 ) == 1		6256289	0		==			
ANR	6256342	MultiplicativeExpression	len_src % 2		6256289	0		%			
ANR	6256343	Identifier	len_src		6256289	0					
ANR	6256344	PrimaryExpression	2		6256289	1					
ANR	6256345	PrimaryExpression	1		6256289	1					
ANR	6256346	CompoundStatement		10:25:158:158	6256289	1					
ANR	6256347	ExpressionStatement	len_src --	2477:2:52429:52438	6256289	0	True				
ANR	6256348	PostIncDecOperationExpression	len_src --		6256289	0					
ANR	6256349	Identifier	len_src		6256289	0					
ANR	6256350	IncDec	--		6256289	1					
ANR	6256351	ExpressionStatement	inlen = len_src / 2	2479:1:52444:52463	6256289	8	True				
ANR	6256352	AssignmentExpression	inlen = len_src / 2		6256289	0		=			
ANR	6256353	Identifier	inlen		6256289	0					
ANR	6256354	MultiplicativeExpression	len_src / 2		6256289	1		/			
ANR	6256355	Identifier	len_src		6256289	0					
ANR	6256356	PrimaryExpression	2		6256289	1					
ANR	6256357	ExpressionStatement	inend = in + inlen	2480:1:52466:52484	6256289	9	True				
ANR	6256358	AssignmentExpression	inend = in + inlen		6256289	0		=			
ANR	6256359	Identifier	inend		6256289	0					
ANR	6256360	AdditiveExpression	in + inlen		6256289	1		+			
ANR	6256361	Identifier	in		6256289	0					
ANR	6256362	Identifier	inlen		6256289	1					
ANR	6256363	WhileStatement	while ( ( in < inend ) && ( dst - outstart + 5 < len_dst ) )		6256289	10					
ANR	6256364	Condition	( in < inend ) && ( dst - outstart + 5 < len_dst )	2481:8:52494:52539	6256289	0	True				
ANR	6256365	AndExpression	( in < inend ) && ( dst - outstart + 5 < len_dst )		6256289	0		&&			
ANR	6256366	RelationalExpression	in < inend		6256289	0		<			
ANR	6256367	Identifier	in		6256289	0					
ANR	6256368	Identifier	inend		6256289	1					
ANR	6256369	RelationalExpression	dst - outstart + 5 < len_dst		6256289	1		<			
ANR	6256370	AdditiveExpression	dst - outstart + 5		6256289	0		-			
ANR	6256371	Identifier	dst		6256289	0					
ANR	6256372	AdditiveExpression	outstart + 5		6256289	1		+			
ANR	6256373	Identifier	outstart		6256289	0					
ANR	6256374	PrimaryExpression	5		6256289	1					
ANR	6256375	Identifier	len_dst		6256289	1					
ANR	6256376	CompoundStatement		15:56:275:275	6256289	1					
ANR	6256377	IfStatement	if ( little_endian )		6256289	0					
ANR	6256378	Condition	little_endian	2482:6:52550:52562	6256289	0	True				
ANR	6256379	Identifier	little_endian		6256289	0					
ANR	6256380	CompoundStatement		16:21:298:298	6256289	1					
ANR	6256381	ExpressionStatement	c = * in ++	2483:3:52570:52579	6256289	0	True				
ANR	6256382	AssignmentExpression	c = * in ++		6256289	0		=			
ANR	6256383	Identifier	c		6256289	0					
ANR	6256384	UnaryOperationExpression	* in ++		6256289	1					
ANR	6256385	UnaryOperator	*		6256289	0					
ANR	6256386	PostIncDecOperationExpression	in ++		6256289	1					
ANR	6256387	Identifier	in		6256289	0					
ANR	6256388	IncDec	++		6256289	1					
ANR	6256389	ElseStatement	else		6256289	0					
ANR	6256390	CompoundStatement		18:9:323:323	6256289	0					
ANR	6256391	ExpressionStatement	tmp = ( ut8 * ) in	2485:3:52595:52610	6256289	0	True				
ANR	6256392	AssignmentExpression	tmp = ( ut8 * ) in		6256289	0		=			
ANR	6256393	Identifier	tmp		6256289	0					
ANR	6256394	CastExpression	( ut8 * ) in		6256289	1					
ANR	6256395	CastTarget	ut8 *		6256289	0					
ANR	6256396	Identifier	in		6256289	1					
ANR	6256397	ExpressionStatement	c = * tmp ++	2486:3:52615:52625	6256289	1	True				
ANR	6256398	AssignmentExpression	c = * tmp ++		6256289	0		=			
ANR	6256399	Identifier	c		6256289	0					
ANR	6256400	UnaryOperationExpression	* tmp ++		6256289	1					
ANR	6256401	UnaryOperator	*		6256289	0					
ANR	6256402	PostIncDecOperationExpression	tmp ++		6256289	1					
ANR	6256403	Identifier	tmp		6256289	0					
ANR	6256404	IncDec	++		6256289	1					
ANR	6256405	IfStatement	if ( ! c && ! * tmp )		6256289	2					
ANR	6256406	Condition	! c && ! * tmp	2487:7:52634:52644	6256289	0	True				
ANR	6256407	AndExpression	! c && ! * tmp		6256289	0		&&			
ANR	6256408	UnaryOperationExpression	! c		6256289	0					
ANR	6256409	UnaryOperator	!		6256289	0					
ANR	6256410	Identifier	c		6256289	1					
ANR	6256411	UnaryOperationExpression	! * tmp		6256289	1					
ANR	6256412	UnaryOperator	!		6256289	0					
ANR	6256413	UnaryOperationExpression	* tmp		6256289	1					
ANR	6256414	UnaryOperator	*		6256289	0					
ANR	6256415	Identifier	tmp		6256289	1					
ANR	6256416	CompoundStatement		21:20:380:380	6256289	1					
ANR	6256417	BreakStatement	break ;	2488:4:52653:52658	6256289	0	True				
ANR	6256418	ExpressionStatement	c = c | ( ( ( ut32 ) * tmp ) << 8 )	2490:3:52668:52695	6256289	3	True				
ANR	6256419	AssignmentExpression	c = c | ( ( ( ut32 ) * tmp ) << 8 )		6256289	0		=			
ANR	6256420	Identifier	c		6256289	0					
ANR	6256421	InclusiveOrExpression	c | ( ( ( ut32 ) * tmp ) << 8 )		6256289	1		|			
ANR	6256422	Identifier	c		6256289	0					
ANR	6256423	ShiftExpression	( ( ut32 ) * tmp ) << 8		6256289	1		<<			
ANR	6256424	CastExpression	( ut32 ) * tmp		6256289	0					
ANR	6256425	CastTarget	ut32		6256289	0					
ANR	6256426	UnaryOperationExpression	* tmp		6256289	1					
ANR	6256427	UnaryOperator	*		6256289	0					
ANR	6256428	Identifier	tmp		6256289	1					
ANR	6256429	PrimaryExpression	8		6256289	1					
ANR	6256430	ExpressionStatement	in ++	2491:3:52700:52704	6256289	4	True				
ANR	6256431	PostIncDecOperationExpression	in ++		6256289	0					
ANR	6256432	Identifier	in		6256289	0					
ANR	6256433	IncDec	++		6256289	1					
ANR	6256434	IfStatement	if ( ( c & 0xFC00 ) == 0xD800 )		6256289	1					
ANR	6256435	Condition	( c & 0xFC00 ) == 0xD800	2493:6:52716:52737	6256289	0	True				
ANR	6256436	EqualityExpression	( c & 0xFC00 ) == 0xD800		6256289	0		==			
ANR	6256437	BitAndExpression	c & 0xFC00		6256289	0		&			
ANR	6256438	Identifier	c		6256289	0					
ANR	6256439	PrimaryExpression	0xFC00		6256289	1					
ANR	6256440	PrimaryExpression	0xD800		6256289	1					
ANR	6256441	CompoundStatement		27:30:473:473	6256289	1					
ANR	6256442	IfStatement	if ( in >= inend )		6256289	0					
ANR	6256443	Condition	in >= inend	2494:7:52769:52779	6256289	0	True				
ANR	6256444	RelationalExpression	in >= inend		6256289	0		>=			
ANR	6256445	Identifier	in		6256289	0					
ANR	6256446	Identifier	inend		6256289	1					
ANR	6256447	CompoundStatement		28:20:515:515	6256289	1					
ANR	6256448	BreakStatement	break ;	2495:4:52835:52840	6256289	0	True				
ANR	6256449	IfStatement	if ( little_endian )		6256289	1					
ANR	6256450	Condition	little_endian	2497:7:52854:52866	6256289	0	True				
ANR	6256451	Identifier	little_endian		6256289	0					
ANR	6256452	CompoundStatement		31:22:602:602	6256289	1					
ANR	6256453	ExpressionStatement	d = * in ++	2498:4:52875:52884	6256289	0	True				
ANR	6256454	AssignmentExpression	d = * in ++		6256289	0		=			
ANR	6256455	Identifier	d		6256289	0					
ANR	6256456	UnaryOperationExpression	* in ++		6256289	1					
ANR	6256457	UnaryOperator	*		6256289	0					
ANR	6256458	PostIncDecOperationExpression	in ++		6256289	1					
ANR	6256459	Identifier	in		6256289	0					
ANR	6256460	IncDec	++		6256289	1					
ANR	6256461	ElseStatement	else		6256289	0					
ANR	6256462	CompoundStatement		33:10:629:629	6256289	0					
ANR	6256463	ExpressionStatement	tmp = ( ut8 * ) in	2500:4:52902:52917	6256289	0	True				
ANR	6256464	AssignmentExpression	tmp = ( ut8 * ) in		6256289	0		=			
ANR	6256465	Identifier	tmp		6256289	0					
ANR	6256466	CastExpression	( ut8 * ) in		6256289	1					
ANR	6256467	CastTarget	ut8 *		6256289	0					
ANR	6256468	Identifier	in		6256289	1					
ANR	6256469	ExpressionStatement	d = * tmp ++	2501:4:52923:52933	6256289	1	True				
ANR	6256470	AssignmentExpression	d = * tmp ++		6256289	0		=			
ANR	6256471	Identifier	d		6256289	0					
ANR	6256472	UnaryOperationExpression	* tmp ++		6256289	1					
ANR	6256473	UnaryOperator	*		6256289	0					
ANR	6256474	PostIncDecOperationExpression	tmp ++		6256289	1					
ANR	6256475	Identifier	tmp		6256289	0					
ANR	6256476	IncDec	++		6256289	1					
ANR	6256477	ExpressionStatement	d = d | ( ( ( ut32 ) * tmp ) << 8 )	2502:4:52939:52966	6256289	2	True				
ANR	6256478	AssignmentExpression	d = d | ( ( ( ut32 ) * tmp ) << 8 )		6256289	0		=			
ANR	6256479	Identifier	d		6256289	0					
ANR	6256480	InclusiveOrExpression	d | ( ( ( ut32 ) * tmp ) << 8 )		6256289	1		|			
ANR	6256481	Identifier	d		6256289	0					
ANR	6256482	ShiftExpression	( ( ut32 ) * tmp ) << 8		6256289	1		<<			
ANR	6256483	CastExpression	( ut32 ) * tmp		6256289	0					
ANR	6256484	CastTarget	ut32		6256289	0					
ANR	6256485	UnaryOperationExpression	* tmp		6256289	1					
ANR	6256486	UnaryOperator	*		6256289	0					
ANR	6256487	Identifier	tmp		6256289	1					
ANR	6256488	PrimaryExpression	8		6256289	1					
ANR	6256489	ExpressionStatement	in ++	2503:4:52972:52976	6256289	3	True				
ANR	6256490	PostIncDecOperationExpression	in ++		6256289	0					
ANR	6256491	Identifier	in		6256289	0					
ANR	6256492	IncDec	++		6256289	1					
ANR	6256493	IfStatement	if ( ( d & 0xFC00 ) == 0xDC00 )		6256289	2					
ANR	6256494	Condition	( d & 0xFC00 ) == 0xDC00	2505:7:52990:53011	6256289	0	True				
ANR	6256495	EqualityExpression	( d & 0xFC00 ) == 0xDC00		6256289	0		==			
ANR	6256496	BitAndExpression	d & 0xFC00		6256289	0		&			
ANR	6256497	Identifier	d		6256289	0					
ANR	6256498	PrimaryExpression	0xFC00		6256289	1					
ANR	6256499	PrimaryExpression	0xDC00		6256289	1					
ANR	6256500	CompoundStatement		39:31:747:747	6256289	1					
ANR	6256501	ExpressionStatement	c &= 0x03FF	2506:4:53020:53031	6256289	0	True				
ANR	6256502	AssignmentExpression	c &= 0x03FF		6256289	0		&=			
ANR	6256503	Identifier	c		6256289	0					
ANR	6256504	PrimaryExpression	0x03FF		6256289	1					
ANR	6256505	ExpressionStatement	c <<= 10	2507:4:53037:53045	6256289	1	True				
ANR	6256506	AssignmentExpression	c <<= 10		6256289	0		<<=			
ANR	6256507	Identifier	c		6256289	0					
ANR	6256508	PrimaryExpression	10		6256289	1					
ANR	6256509	ExpressionStatement	c |= d & 0x03FF	2508:4:53051:53066	6256289	2	True				
ANR	6256510	AssignmentExpression	c |= d & 0x03FF		6256289	0		|=			
ANR	6256511	Identifier	c		6256289	0					
ANR	6256512	BitAndExpression	d & 0x03FF		6256289	1		&			
ANR	6256513	Identifier	d		6256289	0					
ANR	6256514	PrimaryExpression	0x03FF		6256289	1					
ANR	6256515	ExpressionStatement	c += 0x10000	2509:4:53072:53084	6256289	3	True				
ANR	6256516	AssignmentExpression	c += 0x10000		6256289	0		+=			
ANR	6256517	Identifier	c		6256289	0					
ANR	6256518	PrimaryExpression	0x10000		6256289	1					
ANR	6256519	ElseStatement	else		6256289	0					
ANR	6256520	CompoundStatement		44:10:829:829	6256289	0					
ANR	6256521	ReturnStatement	return - 2 ;	2511:4:53102:53111	6256289	0	True				
ANR	6256522	UnaryOperationExpression	- 2		6256289	0					
ANR	6256523	UnaryOperator	-		6256289	0					
ANR	6256524	PrimaryExpression	2		6256289	1					
ANR	6256525	IfStatement	if ( dst >= outend )		6256289	2					
ANR	6256526	Condition	dst >= outend	2516:6:53174:53186	6256289	0	True				
ANR	6256527	RelationalExpression	dst >= outend		6256289	0		>=			
ANR	6256528	Identifier	dst		6256289	0					
ANR	6256529	Identifier	outend		6256289	1					
ANR	6256530	CompoundStatement		50:21:922:922	6256289	1					
ANR	6256531	BreakStatement	break ;	2517:3:53194:53199	6256289	0	True				
ANR	6256532	IfStatement	if ( c < 0x80 )		6256289	3					
ANR	6256533	Condition	c < 0x80	2519:6:53211:53218	6256289	0	True				
ANR	6256534	RelationalExpression	c < 0x80		6256289	0		<			
ANR	6256535	Identifier	c		6256289	0					
ANR	6256536	PrimaryExpression	0x80		6256289	1					
ANR	6256537	CompoundStatement		53:16:954:954	6256289	1					
ANR	6256538	ExpressionStatement	* dst ++ = c	2520:3:53226:53237	6256289	0	True				
ANR	6256539	AssignmentExpression	* dst ++ = c		6256289	0		=			
ANR	6256540	UnaryOperationExpression	* dst ++		6256289	0					
ANR	6256541	UnaryOperator	*		6256289	0					
ANR	6256542	PostIncDecOperationExpression	dst ++		6256289	1					
ANR	6256543	Identifier	dst		6256289	0					
ANR	6256544	IncDec	++		6256289	1					
ANR	6256545	Identifier	c		6256289	1					
ANR	6256546	ExpressionStatement	bits = - 6	2520:16:53239:53247	6256289	1	True				
ANR	6256547	AssignmentExpression	bits = - 6		6256289	0		=			
ANR	6256548	Identifier	bits		6256289	0					
ANR	6256549	UnaryOperationExpression	- 6		6256289	1					
ANR	6256550	UnaryOperator	-		6256289	0					
ANR	6256551	PrimaryExpression	6		6256289	1					
ANR	6256552	ElseStatement	else		6256289	0					
ANR	6256553	IfStatement	if ( c < 0x800 )		6256289	0					
ANR	6256554	Condition	c < 0x800	2521:13:53262:53270	6256289	0	True				
ANR	6256555	RelationalExpression	c < 0x800		6256289	0		<			
ANR	6256556	Identifier	c		6256289	0					
ANR	6256557	PrimaryExpression	0x800		6256289	1					
ANR	6256558	CompoundStatement		55:24:1006:1006	6256289	1					
ANR	6256559	ExpressionStatement	* dst ++ = ( ( c >> 6 ) & 0x1F ) | 0xC0	2522:3:53278:53311	6256289	0	True				
ANR	6256560	AssignmentExpression	* dst ++ = ( ( c >> 6 ) & 0x1F ) | 0xC0		6256289	0		=			
ANR	6256561	UnaryOperationExpression	* dst ++		6256289	0					
ANR	6256562	UnaryOperator	*		6256289	0					
ANR	6256563	PostIncDecOperationExpression	dst ++		6256289	1					
ANR	6256564	Identifier	dst		6256289	0					
ANR	6256565	IncDec	++		6256289	1					
ANR	6256566	InclusiveOrExpression	( ( c >> 6 ) & 0x1F ) | 0xC0		6256289	1		|			
ANR	6256567	BitAndExpression	( c >> 6 ) & 0x1F		6256289	0		&			
ANR	6256568	ShiftExpression	c >> 6		6256289	0		>>			
ANR	6256569	Identifier	c		6256289	0					
ANR	6256570	PrimaryExpression	6		6256289	1					
ANR	6256571	PrimaryExpression	0x1F		6256289	1					
ANR	6256572	PrimaryExpression	0xC0		6256289	1					
ANR	6256573	ExpressionStatement	bits = 0	2523:3:53316:53325	6256289	1	True				
ANR	6256574	AssignmentExpression	bits = 0		6256289	0		=			
ANR	6256575	Identifier	bits		6256289	0					
ANR	6256576	PrimaryExpression	0		6256289	1					
ANR	6256577	ElseStatement	else		6256289	0					
ANR	6256578	IfStatement	if ( c < 0x10000 )		6256289	0					
ANR	6256579	Condition	c < 0x10000	2524:13:53340:53350	6256289	0	True				
ANR	6256580	RelationalExpression	c < 0x10000		6256289	0		<			
ANR	6256581	Identifier	c		6256289	0					
ANR	6256582	PrimaryExpression	0x10000		6256289	1					
ANR	6256583	CompoundStatement		58:26:1086:1086	6256289	1					
ANR	6256584	ExpressionStatement	* dst ++ = ( ( c >> 12 ) & 0x0F ) | 0xE0	2525:3:53358:53392	6256289	0	True				
ANR	6256585	AssignmentExpression	* dst ++ = ( ( c >> 12 ) & 0x0F ) | 0xE0		6256289	0		=			
ANR	6256586	UnaryOperationExpression	* dst ++		6256289	0					
ANR	6256587	UnaryOperator	*		6256289	0					
ANR	6256588	PostIncDecOperationExpression	dst ++		6256289	1					
ANR	6256589	Identifier	dst		6256289	0					
ANR	6256590	IncDec	++		6256289	1					
ANR	6256591	InclusiveOrExpression	( ( c >> 12 ) & 0x0F ) | 0xE0		6256289	1		|			
ANR	6256592	BitAndExpression	( c >> 12 ) & 0x0F		6256289	0		&			
ANR	6256593	ShiftExpression	c >> 12		6256289	0		>>			
ANR	6256594	Identifier	c		6256289	0					
ANR	6256595	PrimaryExpression	12		6256289	1					
ANR	6256596	PrimaryExpression	0x0F		6256289	1					
ANR	6256597	PrimaryExpression	0xE0		6256289	1					
ANR	6256598	ExpressionStatement	bits = 6	2526:3:53397:53406	6256289	1	True				
ANR	6256599	AssignmentExpression	bits = 6		6256289	0		=			
ANR	6256600	Identifier	bits		6256289	0					
ANR	6256601	PrimaryExpression	6		6256289	1					
ANR	6256602	ElseStatement	else		6256289	0					
ANR	6256603	CompoundStatement		61:9:1150:1150	6256289	0					
ANR	6256604	ExpressionStatement	* dst ++ = ( ( c >> 18 ) & 0x07 ) | 0xF0	2528:3:53422:53456	6256289	0	True				
ANR	6256605	AssignmentExpression	* dst ++ = ( ( c >> 18 ) & 0x07 ) | 0xF0		6256289	0		=			
ANR	6256606	UnaryOperationExpression	* dst ++		6256289	0					
ANR	6256607	UnaryOperator	*		6256289	0					
ANR	6256608	PostIncDecOperationExpression	dst ++		6256289	1					
ANR	6256609	Identifier	dst		6256289	0					
ANR	6256610	IncDec	++		6256289	1					
ANR	6256611	InclusiveOrExpression	( ( c >> 18 ) & 0x07 ) | 0xF0		6256289	1		|			
ANR	6256612	BitAndExpression	( c >> 18 ) & 0x07		6256289	0		&			
ANR	6256613	ShiftExpression	c >> 18		6256289	0		>>			
ANR	6256614	Identifier	c		6256289	0					
ANR	6256615	PrimaryExpression	18		6256289	1					
ANR	6256616	PrimaryExpression	0x07		6256289	1					
ANR	6256617	PrimaryExpression	0xF0		6256289	1					
ANR	6256618	ExpressionStatement	bits = 12	2529:3:53461:53470	6256289	1	True				
ANR	6256619	AssignmentExpression	bits = 12		6256289	0		=			
ANR	6256620	Identifier	bits		6256289	0					
ANR	6256621	PrimaryExpression	12		6256289	1					
ANR	6256622	ForStatement	for ( ; bits >= 0 ; bits -= 6 )		6256289	4					
ANR	6256623	Condition	bits >= 0	2532:9:53486:53494	6256289	0	True				
ANR	6256624	RelationalExpression	bits >= 0		6256289	0		>=			
ANR	6256625	Identifier	bits		6256289	0					
ANR	6256626	PrimaryExpression	0		6256289	1					
ANR	6256627	AssignmentExpression	bits -= 6	2532:20:53497:53505	6256289	1	True	-=			
ANR	6256628	Identifier	bits		6256289	0					
ANR	6256629	PrimaryExpression	6		6256289	1					
ANR	6256630	CompoundStatement		66:31:1241:1241	6256289	2					
ANR	6256631	IfStatement	if ( dst >= outend )		6256289	0					
ANR	6256632	Condition	dst >= outend	2533:7:53517:53529	6256289	0	True				
ANR	6256633	RelationalExpression	dst >= outend		6256289	0		>=			
ANR	6256634	Identifier	dst		6256289	0					
ANR	6256635	Identifier	outend		6256289	1					
ANR	6256636	CompoundStatement		67:22:1265:1265	6256289	1					
ANR	6256637	BreakStatement	break ;	2534:4:53538:53543	6256289	0	True				
ANR	6256638	ExpressionStatement	* dst ++ = ( ( c >> bits ) & 0x3F ) | 0x80	2536:3:53553:53589	6256289	1	True				
ANR	6256639	AssignmentExpression	* dst ++ = ( ( c >> bits ) & 0x3F ) | 0x80		6256289	0		=			
ANR	6256640	UnaryOperationExpression	* dst ++		6256289	0					
ANR	6256641	UnaryOperator	*		6256289	0					
ANR	6256642	PostIncDecOperationExpression	dst ++		6256289	1					
ANR	6256643	Identifier	dst		6256289	0					
ANR	6256644	IncDec	++		6256289	1					
ANR	6256645	InclusiveOrExpression	( ( c >> bits ) & 0x3F ) | 0x80		6256289	1		|			
ANR	6256646	BitAndExpression	( c >> bits ) & 0x3F		6256289	0		&			
ANR	6256647	ShiftExpression	c >> bits		6256289	0		>>			
ANR	6256648	Identifier	c		6256289	0					
ANR	6256649	Identifier	bits		6256289	1					
ANR	6256650	PrimaryExpression	0x3F		6256289	1					
ANR	6256651	PrimaryExpression	0x80		6256289	1					
ANR	6256652	ExpressionStatement	len_dst = dst - outstart	2539:1:53599:53623	6256289	11	True				
ANR	6256653	AssignmentExpression	len_dst = dst - outstart		6256289	0		=			
ANR	6256654	Identifier	len_dst		6256289	0					
ANR	6256655	AdditiveExpression	dst - outstart		6256289	1		-			
ANR	6256656	Identifier	dst		6256289	0					
ANR	6256657	Identifier	outstart		6256289	1					
ANR	6256658	ReturnStatement	return len_dst ;	2540:1:53626:53640	6256289	12	True				
ANR	6256659	Identifier	len_dst		6256289	0					
ANR	6256660	ReturnType	R_API int		6256289	1					
ANR	6256661	Identifier	r_str_utf16_to_utf8		6256289	2					
ANR	6256662	ParameterList	"ut8 * dst , int len_dst , const ut8 * src , int len_src , int little_endian"		6256289	3					
ANR	6256663	Parameter	ut8 * dst	2467:30:52195:52202	6256289	0	True				
ANR	6256664	ParameterType	ut8 *		6256289	0					
ANR	6256665	Identifier	dst		6256289	1					
ANR	6256666	Parameter	int len_dst	2467:40:52205:52215	6256289	1	True				
ANR	6256667	ParameterType	int		6256289	0					
ANR	6256668	Identifier	len_dst		6256289	1					
ANR	6256669	Parameter	const ut8 * src	2467:53:52218:52231	6256289	2	True				
ANR	6256670	ParameterType	const ut8 *		6256289	0					
ANR	6256671	Identifier	src		6256289	1					
ANR	6256672	Parameter	int len_src	2467:69:52234:52244	6256289	3	True				
ANR	6256673	ParameterType	int		6256289	0					
ANR	6256674	Identifier	len_src		6256289	1					
ANR	6256675	Parameter	int little_endian	2467:82:52247:52263	6256289	4	True				
ANR	6256676	ParameterType	int		6256289	0					
ANR	6256677	Identifier	little_endian		6256289	1					
ANR	6256678	CFGEntryNode	ENTRY		6256289		True				
ANR	6256679	CFGExitNode	EXIT		6256289		True				
ANR	6256680	Symbol	* tmp ++		6256289						
ANR	6256681	Symbol	* tmp		6256289						
ANR	6256682	Symbol	little_endian		6256289						
ANR	6256683	Symbol	c		6256289						
ANR	6256684	Symbol	dst		6256289						
ANR	6256685	Symbol	d		6256289						
ANR	6256686	Symbol	src		6256289						
ANR	6256687	Symbol	in		6256289						
ANR	6256688	Symbol	bits		6256289						
ANR	6256689	Symbol	inlen		6256289						
ANR	6256690	Symbol	outstart		6256289						
ANR	6256691	Symbol	inend		6256289						
ANR	6256692	Symbol	len_dst		6256289						
ANR	6256693	Symbol	len_src		6256289						
ANR	6256694	Symbol	tmp		6256289						
ANR	6256695	Symbol	* dst ++		6256289						
ANR	6256696	Symbol	outend		6256289						
ANR	6256697	Symbol	* in ++		6256289						
ANR	6256698	Function	r_str_utf16_decode	2543:0:53645:54411							
ANR	6256699	FunctionDef	"r_str_utf16_decode (const ut8 * s , int len)"		6256698	0					
ANR	6256700	CompoundStatement		2543:54:53699:54411	6256698	0					
ANR	6256701	IdentifierDeclStatement	int i = 0 ;	2544:1:53702:53711	6256698	0	True				
ANR	6256702	IdentifierDecl	i = 0		6256698	0					
ANR	6256703	IdentifierDeclType	int		6256698	0					
ANR	6256704	Identifier	i		6256698	1					
ANR	6256705	AssignmentExpression	i = 0		6256698	2		=			
ANR	6256706	Identifier	i		6256698	0					
ANR	6256707	PrimaryExpression	0		6256698	1					
ANR	6256708	IdentifierDeclStatement	int j = 0 ;	2545:1:53714:53723	6256698	1	True				
ANR	6256709	IdentifierDecl	j = 0		6256698	0					
ANR	6256710	IdentifierDeclType	int		6256698	0					
ANR	6256711	Identifier	j		6256698	1					
ANR	6256712	AssignmentExpression	j = 0		6256698	2		=			
ANR	6256713	Identifier	j		6256698	0					
ANR	6256714	PrimaryExpression	0		6256698	1					
ANR	6256715	IdentifierDeclStatement	char * result = NULL ;	2546:1:53726:53745	6256698	2	True				
ANR	6256716	IdentifierDecl	* result = NULL		6256698	0					
ANR	6256717	IdentifierDeclType	char *		6256698	0					
ANR	6256718	Identifier	result		6256698	1					
ANR	6256719	AssignmentExpression	* result = NULL		6256698	2		=			
ANR	6256720	Identifier	NULL		6256698	0					
ANR	6256721	Identifier	NULL		6256698	1					
ANR	6256722	IdentifierDeclStatement	int count_unicode = 0 ;	2547:1:53748:53769	6256698	3	True				
ANR	6256723	IdentifierDecl	count_unicode = 0		6256698	0					
ANR	6256724	IdentifierDeclType	int		6256698	0					
ANR	6256725	Identifier	count_unicode		6256698	1					
ANR	6256726	AssignmentExpression	count_unicode = 0		6256698	2		=			
ANR	6256727	Identifier	count_unicode		6256698	0					
ANR	6256728	PrimaryExpression	0		6256698	1					
ANR	6256729	IdentifierDeclStatement	int count_ascii = 0 ;	2548:1:53772:53791	6256698	4	True				
ANR	6256730	IdentifierDecl	count_ascii = 0		6256698	0					
ANR	6256731	IdentifierDeclType	int		6256698	0					
ANR	6256732	Identifier	count_ascii		6256698	1					
ANR	6256733	AssignmentExpression	count_ascii = 0		6256698	2		=			
ANR	6256734	Identifier	count_ascii		6256698	0					
ANR	6256735	PrimaryExpression	0		6256698	1					
ANR	6256736	IdentifierDeclStatement	int lenresult = 0 ;	2549:1:53794:53811	6256698	5	True				
ANR	6256737	IdentifierDecl	lenresult = 0		6256698	0					
ANR	6256738	IdentifierDeclType	int		6256698	0					
ANR	6256739	Identifier	lenresult		6256698	1					
ANR	6256740	AssignmentExpression	lenresult = 0		6256698	2		=			
ANR	6256741	Identifier	lenresult		6256698	0					
ANR	6256742	PrimaryExpression	0		6256698	1					
ANR	6256743	IfStatement	if ( ! s )		6256698	6					
ANR	6256744	Condition	! s	2550:5:53818:53819	6256698	0	True				
ANR	6256745	UnaryOperationExpression	! s		6256698	0					
ANR	6256746	UnaryOperator	!		6256698	0					
ANR	6256747	Identifier	s		6256698	1					
ANR	6256748	CompoundStatement		8:9:122:122	6256698	1					
ANR	6256749	ReturnStatement	return NULL ;	2551:2:53826:53837	6256698	0	True				
ANR	6256750	Identifier	NULL		6256698	0					
ANR	6256751	ForStatement	for ( i = 0 ; i < len && ( s [ i ] || s [ i + 1 ] ) ; i += 2 )		6256698	7					
ANR	6256752	ForInit	i = 0 ;	2553:6:53848:53853	6256698	0	True				
ANR	6256753	AssignmentExpression	i = 0		6256698	0		=			
ANR	6256754	Identifier	i		6256698	0					
ANR	6256755	PrimaryExpression	0		6256698	1					
ANR	6256756	Condition	i < len && ( s [ i ] || s [ i + 1 ] )	2553:13:53855:53881	6256698	1	True				
ANR	6256757	AndExpression	i < len && ( s [ i ] || s [ i + 1 ] )		6256698	0		&&			
ANR	6256758	RelationalExpression	i < len		6256698	0		<			
ANR	6256759	Identifier	i		6256698	0					
ANR	6256760	Identifier	len		6256698	1					
ANR	6256761	OrExpression	s [ i ] || s [ i + 1 ]		6256698	1		||			
ANR	6256762	ArrayIndexing	s [ i ]		6256698	0					
ANR	6256763	Identifier	s		6256698	0					
ANR	6256764	Identifier	i		6256698	1					
ANR	6256765	ArrayIndexing	s [ i + 1 ]		6256698	1					
ANR	6256766	Identifier	s		6256698	0					
ANR	6256767	AdditiveExpression	i + 1		6256698	1		+			
ANR	6256768	Identifier	i		6256698	0					
ANR	6256769	PrimaryExpression	1		6256698	1					
ANR	6256770	AssignmentExpression	i += 2	2553:42:53884:53889	6256698	2	True	+=			
ANR	6256771	Identifier	i		6256698	0					
ANR	6256772	PrimaryExpression	2		6256698	1					
ANR	6256773	CompoundStatement		11:50:192:192	6256698	3					
ANR	6256774	IfStatement	if ( ! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E )		6256698	0					
ANR	6256775	Condition	! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E	2554:6:53900:53938	6256698	0	True				
ANR	6256776	AndExpression	! s [ i + 1 ] && 0x20 <= s [ i ] && s [ i ] <= 0x7E		6256698	0		&&			
ANR	6256777	UnaryOperationExpression	! s [ i + 1 ]		6256698	0					
ANR	6256778	UnaryOperator	!		6256698	0					
ANR	6256779	ArrayIndexing	s [ i + 1 ]		6256698	1					
ANR	6256780	Identifier	s		6256698	0					
ANR	6256781	AdditiveExpression	i + 1		6256698	1		+			
ANR	6256782	Identifier	i		6256698	0					
ANR	6256783	PrimaryExpression	1		6256698	1					
ANR	6256784	AndExpression	0x20 <= s [ i ] && s [ i ] <= 0x7E		6256698	1		&&			
ANR	6256785	RelationalExpression	0x20 <= s [ i ]		6256698	0		<=			
ANR	6256786	PrimaryExpression	0x20		6256698	0					
ANR	6256787	ArrayIndexing	s [ i ]		6256698	1					
ANR	6256788	Identifier	s		6256698	0					
ANR	6256789	Identifier	i		6256698	1					
ANR	6256790	RelationalExpression	s [ i ] <= 0x7E		6256698	1		<=			
ANR	6256791	ArrayIndexing	s [ i ]		6256698	0					
ANR	6256792	Identifier	s		6256698	0					
ANR	6256793	Identifier	i		6256698	1					
ANR	6256794	PrimaryExpression	0x7E		6256698	1					
ANR	6256795	CompoundStatement		12:47:241:241	6256698	1					
ANR	6256796	ExpressionStatement	++ count_ascii	2555:3:53946:53959	6256698	0	True				
ANR	6256797	UnaryExpression	++ count_ascii		6256698	0					
ANR	6256798	IncDec	++		6256698	0					
ANR	6256799	Identifier	count_ascii		6256698	1					
ANR	6256800	ElseStatement	else		6256698	0					
ANR	6256801	CompoundStatement		14:9:270:270	6256698	0					
ANR	6256802	ExpressionStatement	++ count_unicode	2557:3:53975:53990	6256698	0	True				
ANR	6256803	UnaryExpression	++ count_unicode		6256698	0					
ANR	6256804	IncDec	++		6256698	0					
ANR	6256805	Identifier	count_unicode		6256698	1					
ANR	6256806	ExpressionStatement	lenresult = 1 + count_ascii + count_unicode * 6	2560:1:54000:54047	6256698	8	True				
ANR	6256807	AssignmentExpression	lenresult = 1 + count_ascii + count_unicode * 6		6256698	0		=			
ANR	6256808	Identifier	lenresult		6256698	0					
ANR	6256809	AdditiveExpression	1 + count_ascii + count_unicode * 6		6256698	1		+			
ANR	6256810	PrimaryExpression	1		6256698	0					
ANR	6256811	AdditiveExpression	count_ascii + count_unicode * 6		6256698	1		+			
ANR	6256812	Identifier	count_ascii		6256698	0					
ANR	6256813	MultiplicativeExpression	count_unicode * 6		6256698	1		*			
ANR	6256814	Identifier	count_unicode		6256698	0					
ANR	6256815	PrimaryExpression	6		6256698	1					
ANR	6256816	IfStatement	"if ( ! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) ) )"		6256698	9					
ANR	6256817	Condition	"! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) )"	2561:5:54076:54134	6256698	0	True				
ANR	6256818	UnaryOperationExpression	"! ( result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 ) )"		6256698	0					
ANR	6256819	UnaryOperator	!		6256698	0					
ANR	6256820	AssignmentExpression	"result = calloc ( 1 + count_ascii + count_unicode * 6 , 1 )"		6256698	1		=			
ANR	6256821	Identifier	result		6256698	0					
ANR	6256822	CallExpression	"calloc ( 1 + count_ascii + count_unicode * 6 , 1 )"		6256698	1					
ANR	6256823	Callee	calloc		6256698	0					
ANR	6256824	Identifier	calloc		6256698	0					
ANR	6256825	ArgumentList	1 + count_ascii + count_unicode * 6		6256698	1					
ANR	6256826	Argument	1 + count_ascii + count_unicode * 6		6256698	0					
ANR	6256827	AdditiveExpression	1 + count_ascii + count_unicode * 6		6256698	0		+			
ANR	6256828	PrimaryExpression	1		6256698	0					
ANR	6256829	AdditiveExpression	count_ascii + count_unicode * 6		6256698	1		+			
ANR	6256830	Identifier	count_ascii		6256698	0					
ANR	6256831	MultiplicativeExpression	count_unicode * 6		6256698	1		*			
ANR	6256832	Identifier	count_unicode		6256698	0					
ANR	6256833	PrimaryExpression	6		6256698	1					
ANR	6256834	Argument	1		6256698	1					
ANR	6256835	PrimaryExpression	1		6256698	0					
ANR	6256836	CompoundStatement		19:66:437:437	6256698	1					
ANR	6256837	ReturnStatement	return NULL ;	2562:2:54141:54152	6256698	0	True				
ANR	6256838	Identifier	NULL		6256698	0					
ANR	6256839	ForStatement	for ( i = 0 ; i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] ) ; i += 2 )		6256698	10					
ANR	6256840	ForInit	i = 0 ;	2564:6:54163:54168	6256698	0	True				
ANR	6256841	AssignmentExpression	i = 0		6256698	0		=			
ANR	6256842	Identifier	i		6256698	0					
ANR	6256843	PrimaryExpression	0		6256698	1					
ANR	6256844	Condition	i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] )	2564:13:54170:54213	6256698	1	True				
ANR	6256845	AndExpression	i < len && j < lenresult && ( s [ i ] || s [ i + 1 ] )		6256698	0		&&			
ANR	6256846	RelationalExpression	i < len		6256698	0		<			
ANR	6256847	Identifier	i		6256698	0					
ANR	6256848	Identifier	len		6256698	1					
ANR	6256849	AndExpression	j < lenresult && ( s [ i ] || s [ i + 1 ] )		6256698	1		&&			
ANR	6256850	RelationalExpression	j < lenresult		6256698	0		<			
ANR	6256851	Identifier	j		6256698	0					
ANR	6256852	Identifier	lenresult		6256698	1					
ANR	6256853	OrExpression	s [ i ] || s [ i + 1 ]		6256698	1		||			
ANR	6256854	ArrayIndexing	s [ i ]		6256698	0					
ANR	6256855	Identifier	s		6256698	0					
ANR	6256856	Identifier	i		6256698	1					
ANR	6256857	ArrayIndexing	s [ i + 1 ]		6256698	1					
ANR	6256858	Identifier	s		6256698	0					
ANR	6256859	AdditiveExpression	i + 1		6256698	1		+			
ANR	6256860	Identifier	i		6256698	0					
ANR	6256861	PrimaryExpression	1		6256698	1					
ANR	6256862	AssignmentExpression	i += 2	2564:59:54216:54221	6256698	2	True	+=			
ANR	6256863	Identifier	i		6256698	0					
ANR	6256864	PrimaryExpression	2		6256698	1					
ANR	6256865	CompoundStatement		22:67:524:524	6256698	3					
ANR	6256866	IfStatement	if ( ! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] ) )		6256698	0					
ANR	6256867	Condition	! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] )	2565:6:54232:54260	6256698	0	True				
ANR	6256868	AndExpression	! s [ i + 1 ] && IS_PRINTABLE ( s [ i ] )		6256698	0		&&			
ANR	6256869	UnaryOperationExpression	! s [ i + 1 ]		6256698	0					
ANR	6256870	UnaryOperator	!		6256698	0					
ANR	6256871	ArrayIndexing	s [ i + 1 ]		6256698	1					
ANR	6256872	Identifier	s		6256698	0					
ANR	6256873	AdditiveExpression	i + 1		6256698	1		+			
ANR	6256874	Identifier	i		6256698	0					
ANR	6256875	PrimaryExpression	1		6256698	1					
ANR	6256876	CallExpression	IS_PRINTABLE ( s [ i ] )		6256698	1					
ANR	6256877	Callee	IS_PRINTABLE		6256698	0					
ANR	6256878	Identifier	IS_PRINTABLE		6256698	0					
ANR	6256879	ArgumentList	s [ i ]		6256698	1					
ANR	6256880	Argument	s [ i ]		6256698	0					
ANR	6256881	ArrayIndexing	s [ i ]		6256698	0					
ANR	6256882	Identifier	s		6256698	0					
ANR	6256883	Identifier	i		6256698	1					
ANR	6256884	CompoundStatement		23:37:563:563	6256698	1					
ANR	6256885	ExpressionStatement	result [ j ++ ] = s [ i ]	2566:3:54268:54286	6256698	0	True				
ANR	6256886	AssignmentExpression	result [ j ++ ] = s [ i ]		6256698	0		=			
ANR	6256887	ArrayIndexing	result [ j ++ ]		6256698	0					
ANR	6256888	Identifier	result		6256698	0					
ANR	6256889	PostIncDecOperationExpression	j ++		6256698	1					
ANR	6256890	Identifier	j		6256698	0					
ANR	6256891	IncDec	++		6256698	1					
ANR	6256892	ArrayIndexing	s [ i ]		6256698	1					
ANR	6256893	Identifier	s		6256698	0					
ANR	6256894	Identifier	i		6256698	1					
ANR	6256895	ElseStatement	else		6256698	0					
ANR	6256896	CompoundStatement		25:9:597:597	6256698	0					
ANR	6256897	Statement	j	2568:3:54302:54302	6256698	0	True				
ANR	6256898	Statement	+=	2568:5:54304:54305	6256698	1	True				
ANR	6256899	Statement	snprintf	2568:8:54307:54314	6256698	2	True				
ANR	6256900	Statement	(	2568:17:54316:54316	6256698	3	True				
ANR	6256901	Statement	&	2568:18:54317:54317	6256698	4	True				
ANR	6256902	Statement	result	2568:19:54318:54323	6256698	5	True				
ANR	6256903	Statement	[	2568:25:54324:54324	6256698	6	True				
ANR	6256904	Statement	j	2568:26:54325:54325	6256698	7	True				
ANR	6256905	Statement	]	2568:27:54326:54326	6256698	8	True				
ANR	6256906	Statement	","	2568:28:54327:54327	6256698	9	True				
ANR	6256907	Statement	lenresult	2568:30:54329:54337	6256698	10	True				
ANR	6256908	Statement	-	2568:40:54339:54339	6256698	11	True				
ANR	6256909	Statement	j	2568:42:54341:54341	6256698	12	True				
ANR	6256910	Statement	","	2568:43:54342:54342	6256698	13	True				
ANR	6256911	Statement	"""\\\\u%.2"""	2568:45:54344:54351	6256698	14	True				
ANR	6256912	Statement	HHXFMT	2568:53:54352:54357	6256698	15	True				
ANR	6256913	Statement	"""%.2"""	2568:59:54358:54362	6256698	16	True				
ANR	6256914	Statement	HHXFMT	2568:64:54363:54368	6256698	17	True				
ANR	6256915	Statement	""""""	2568:70:54369:54370	6256698	18	True				
ANR	6256916	Statement	","	2568:72:54371:54371	6256698	19	True				
ANR	6256917	Statement	s	2568:74:54373:54373	6256698	20	True				
ANR	6256918	Statement	[	2568:75:54374:54374	6256698	21	True				
ANR	6256919	Statement	i	2568:76:54375:54375	6256698	22	True				
ANR	6256920	Statement	]	2568:77:54376:54376	6256698	23	True				
ANR	6256921	Statement	","	2568:78:54377:54377	6256698	24	True				
ANR	6256922	Statement	s	2568:80:54379:54379	6256698	25	True				
ANR	6256923	Statement	[	2568:81:54380:54380	6256698	26	True				
ANR	6256924	Statement	i	2568:82:54381:54381	6256698	27	True				
ANR	6256925	Statement	+	2568:83:54382:54382	6256698	28	True				
ANR	6256926	Statement	1	2568:84:54383:54383	6256698	29	True				
ANR	6256927	Statement	]	2568:85:54384:54384	6256698	30	True				
ANR	6256928	Statement	)	2568:86:54385:54385	6256698	31	True				
ANR	6256929	ExpressionStatement		2568:87:54386:54386	6256698	32	True				
ANR	6256930	ReturnStatement	return result ;	2571:1:54396:54409	6256698	11	True				
ANR	6256931	Identifier	result		6256698	0					
ANR	6256932	ReturnType	R_API char *		6256698	1					
ANR	6256933	Identifier	r_str_utf16_decode		6256698	2					
ANR	6256934	ParameterList	"const ut8 * s , int len"		6256698	3					
ANR	6256935	Parameter	const ut8 * s	2543:31:53676:53687	6256698	0	True				
ANR	6256936	ParameterType	const ut8 *		6256698	0					
ANR	6256937	Identifier	s		6256698	1					
ANR	6256938	Parameter	int len	2543:45:53690:53696	6256698	1	True				
ANR	6256939	ParameterType	int		6256698	0					
ANR	6256940	Identifier	len		6256698	1					
ANR	6256941	CFGEntryNode	ENTRY		6256698		True				
ANR	6256942	CFGExitNode	EXIT		6256698		True				
ANR	6256943	Symbol	lenresult		6256698						
ANR	6256944	Symbol	NULL		6256698						
ANR	6256945	Symbol	IS_PRINTABLE		6256698						
ANR	6256946	Symbol	i		6256698						
ANR	6256947	Symbol	j		6256698						
ANR	6256948	Symbol	calloc		6256698						
ANR	6256949	Symbol	count_ascii		6256698						
ANR	6256950	Symbol	result		6256698						
ANR	6256951	Symbol	count_unicode		6256698						
ANR	6256952	Symbol	s		6256698						
ANR	6256953	Symbol	* i		6256698						
ANR	6256954	Symbol	len		6256698						
ANR	6256955	Symbol	* result		6256698						
ANR	6256956	Symbol	* s		6256698						
ANR	6256957	Function	r_str_utf16_encode	2575:0:54464:55235							
ANR	6256958	FunctionDef	"r_str_utf16_encode (const char * s , int len)"		6256957	0					
ANR	6256959	CompoundStatement		2575:55:54519:55235	6256957	0					
ANR	6256960	IdentifierDeclStatement	int i ;	2576:1:54522:54527	6256957	0	True				
ANR	6256961	IdentifierDecl	i		6256957	0					
ANR	6256962	IdentifierDeclType	int		6256957	0					
ANR	6256963	Identifier	i		6256957	1					
ANR	6256964	IdentifierDeclStatement	"char ch [ 4 ] , * d , * od , * tmp ;"	2577:1:54530:54555	6256957	1	True				
ANR	6256965	IdentifierDecl	ch [ 4 ]		6256957	0					
ANR	6256966	IdentifierDeclType	char [ 4 ]		6256957	0					
ANR	6256967	Identifier	ch		6256957	1					
ANR	6256968	PrimaryExpression	4		6256957	2					
ANR	6256969	IdentifierDecl	* d		6256957	1					
ANR	6256970	IdentifierDeclType	char *		6256957	0					
ANR	6256971	Identifier	d		6256957	1					
ANR	6256972	IdentifierDecl	* od		6256957	2					
ANR	6256973	IdentifierDeclType	char *		6256957	0					
ANR	6256974	Identifier	od		6256957	1					
ANR	6256975	IdentifierDecl	* tmp		6256957	3					
ANR	6256976	IdentifierDeclType	char *		6256957	0					
ANR	6256977	Identifier	tmp		6256957	1					
ANR	6256978	IfStatement	if ( ! s )		6256957	2					
ANR	6256979	Condition	! s	2578:5:54562:54563	6256957	0	True				
ANR	6256980	UnaryOperationExpression	! s		6256957	0					
ANR	6256981	UnaryOperator	!		6256957	0					
ANR	6256982	Identifier	s		6256957	1					
ANR	6256983	CompoundStatement		4:9:46:46	6256957	1					
ANR	6256984	ReturnStatement	return NULL ;	2579:2:54570:54581	6256957	0	True				
ANR	6256985	Identifier	NULL		6256957	0					
ANR	6256986	IfStatement	if ( len < 0 )		6256957	3					
ANR	6256987	Condition	len < 0	2581:5:54591:54597	6256957	0	True				
ANR	6256988	RelationalExpression	len < 0		6256957	0		<			
ANR	6256989	Identifier	len		6256957	0					
ANR	6256990	PrimaryExpression	0		6256957	1					
ANR	6256991	CompoundStatement		7:14:80:80	6256957	1					
ANR	6256992	ExpressionStatement	len = strlen ( s )	2582:2:54604:54620	6256957	0	True				
ANR	6256993	AssignmentExpression	len = strlen ( s )		6256957	0		=			
ANR	6256994	Identifier	len		6256957	0					
ANR	6256995	CallExpression	strlen ( s )		6256957	1					
ANR	6256996	Callee	strlen		6256957	0					
ANR	6256997	Identifier	strlen		6256957	0					
ANR	6256998	ArgumentList	s		6256957	1					
ANR	6256999	Argument	s		6256957	0					
ANR	6257000	Identifier	s		6256957	0					
ANR	6257001	IfStatement	if ( ( len * 7 ) + 1 < len )		6256957	4					
ANR	6257002	Condition	( len * 7 ) + 1 < len	2584:5:54630:54648	6256957	0	True				
ANR	6257003	RelationalExpression	( len * 7 ) + 1 < len		6256957	0		<			
ANR	6257004	AdditiveExpression	( len * 7 ) + 1		6256957	0		+			
ANR	6257005	MultiplicativeExpression	len * 7		6256957	0		*			
ANR	6257006	Identifier	len		6256957	0					
ANR	6257007	PrimaryExpression	7		6256957	1					
ANR	6257008	PrimaryExpression	1		6256957	1					
ANR	6257009	Identifier	len		6256957	1					
ANR	6257010	CompoundStatement		10:26:131:131	6256957	1					
ANR	6257011	ReturnStatement	return NULL ;	2585:2:54655:54666	6256957	0	True				
ANR	6257012	Identifier	NULL		6256957	0					
ANR	6257013	ExpressionStatement	od = d = malloc ( 1 + ( len * 7 ) )	2587:1:54672:54703	6256957	5	True				
ANR	6257014	AssignmentExpression	od = d = malloc ( 1 + ( len * 7 ) )		6256957	0		=			
ANR	6257015	Identifier	od		6256957	0					
ANR	6257016	AssignmentExpression	d = malloc ( 1 + ( len * 7 ) )		6256957	1		=			
ANR	6257017	Identifier	d		6256957	0					
ANR	6257018	CallExpression	malloc ( 1 + ( len * 7 ) )		6256957	1					
ANR	6257019	Callee	malloc		6256957	0					
ANR	6257020	Identifier	malloc		6256957	0					
ANR	6257021	ArgumentList	1 + ( len * 7 )		6256957	1					
ANR	6257022	Argument	1 + ( len * 7 )		6256957	0					
ANR	6257023	AdditiveExpression	1 + ( len * 7 )		6256957	0		+			
ANR	6257024	PrimaryExpression	1		6256957	0					
ANR	6257025	MultiplicativeExpression	len * 7		6256957	1		*			
ANR	6257026	Identifier	len		6256957	0					
ANR	6257027	PrimaryExpression	7		6256957	1					
ANR	6257028	IfStatement	if ( ! d )		6256957	6					
ANR	6257029	Condition	! d	2588:5:54710:54711	6256957	0	True				
ANR	6257030	UnaryOperationExpression	! d		6256957	0					
ANR	6257031	UnaryOperator	!		6256957	0					
ANR	6257032	Identifier	d		6256957	1					
ANR	6257033	CompoundStatement		14:9:194:194	6256957	1					
ANR	6257034	ReturnStatement	return NULL ;	2589:2:54718:54729	6256957	0	True				
ANR	6257035	Identifier	NULL		6256957	0					
ANR	6257036	ForStatement	"for ( i = 0 ; i < len ; s ++ , i ++ )"		6256957	7					
ANR	6257037	ForInit	i = 0 ;	2591:6:54740:54745	6256957	0	True				
ANR	6257038	AssignmentExpression	i = 0		6256957	0		=			
ANR	6257039	Identifier	i		6256957	0					
ANR	6257040	PrimaryExpression	0		6256957	1					
ANR	6257041	Condition	i < len	2591:13:54747:54753	6256957	1	True				
ANR	6257042	RelationalExpression	i < len		6256957	0		<			
ANR	6257043	Identifier	i		6256957	0					
ANR	6257044	Identifier	len		6256957	1					
ANR	6257045	Expression	"s ++ , i ++"	2591:22:54756:54763	6256957	2	True				
ANR	6257046	PostIncDecOperationExpression	s ++		6256957	0					
ANR	6257047	Identifier	s		6256957	0					
ANR	6257048	IncDec	++		6256957	1					
ANR	6257049	PostIncDecOperationExpression	i ++		6256957	1					
ANR	6257050	Identifier	i		6256957	0					
ANR	6257051	IncDec	++		6256957	1					
ANR	6257052	CompoundStatement		17:32:246:246	6256957	3					
ANR	6257053	IfStatement	if ( * s == '\\\\' )		6256957	0					
ANR	6257054	Condition	* s == '\\\\'	2592:6:54774:54783	6256957	0	True				
ANR	6257055	EqualityExpression	* s == '\\\\'		6256957	0		==			
ANR	6257056	UnaryOperationExpression	* s		6256957	0					
ANR	6257057	UnaryOperator	*		6256957	0					
ANR	6257058	Identifier	s		6256957	1					
ANR	6257059	PrimaryExpression	'\\\\'		6256957	1					
ANR	6257060	CompoundStatement		18:18:266:266	6256957	1					
ANR	6257061	ExpressionStatement	* d ++ = '\\\\'	2593:3:54791:54802	6256957	0	True				
ANR	6257062	AssignmentExpression	* d ++ = '\\\\'		6256957	0		=			
ANR	6257063	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257064	UnaryOperator	*		6256957	0					
ANR	6257065	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257066	Identifier	d		6256957	0					
ANR	6257067	IncDec	++		6256957	1					
ANR	6257068	PrimaryExpression	'\\\\'		6256957	1					
ANR	6257069	ExpressionStatement	* d ++ = '\\\\'	2594:3:54807:54818	6256957	1	True				
ANR	6257070	AssignmentExpression	* d ++ = '\\\\'		6256957	0		=			
ANR	6257071	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257072	UnaryOperator	*		6256957	0					
ANR	6257073	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257074	Identifier	d		6256957	0					
ANR	6257075	IncDec	++		6256957	1					
ANR	6257076	PrimaryExpression	'\\\\'		6256957	1					
ANR	6257077	ElseStatement	else		6256957	0					
ANR	6257078	IfStatement	"if ( * s == '""' )"		6256957	0					
ANR	6257079	Condition	"* s == '""'"	2595:13:54833:54841	6256957	0	True				
ANR	6257080	EqualityExpression	"* s == '""'"		6256957	0		==			
ANR	6257081	UnaryOperationExpression	* s		6256957	0					
ANR	6257082	UnaryOperator	*		6256957	0					
ANR	6257083	Identifier	s		6256957	1					
ANR	6257084	PrimaryExpression	"'""'"		6256957	1					
ANR	6257085	CompoundStatement		21:24:324:324	6256957	1					
ANR	6257086	ExpressionStatement	* d ++ = '\\\\'	2596:3:54849:54860	6256957	0	True				
ANR	6257087	AssignmentExpression	* d ++ = '\\\\'		6256957	0		=			
ANR	6257088	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257089	UnaryOperator	*		6256957	0					
ANR	6257090	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257091	Identifier	d		6256957	0					
ANR	6257092	IncDec	++		6256957	1					
ANR	6257093	PrimaryExpression	'\\\\'		6256957	1					
ANR	6257094	ExpressionStatement	"* d ++ = '""'"	2597:3:54865:54875	6256957	1	True				
ANR	6257095	AssignmentExpression	"* d ++ = '""'"		6256957	0		=			
ANR	6257096	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257097	UnaryOperator	*		6256957	0					
ANR	6257098	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257099	Identifier	d		6256957	0					
ANR	6257100	IncDec	++		6256957	1					
ANR	6257101	PrimaryExpression	"'""'"		6256957	1					
ANR	6257102	ElseStatement	else		6256957	0					
ANR	6257103	IfStatement	if ( ( * s >= 0x20 ) && ( * s <= 126 ) )		6256957	0					
ANR	6257104	Condition	( * s >= 0x20 ) && ( * s <= 126 )	2598:13:54890:54916	6256957	0	True				
ANR	6257105	AndExpression	( * s >= 0x20 ) && ( * s <= 126 )		6256957	0		&&			
ANR	6257106	RelationalExpression	* s >= 0x20		6256957	0		>=			
ANR	6257107	UnaryOperationExpression	* s		6256957	0					
ANR	6257108	UnaryOperator	*		6256957	0					
ANR	6257109	Identifier	s		6256957	1					
ANR	6257110	PrimaryExpression	0x20		6256957	1					
ANR	6257111	RelationalExpression	* s <= 126		6256957	1		<=			
ANR	6257112	UnaryOperationExpression	* s		6256957	0					
ANR	6257113	UnaryOperator	*		6256957	0					
ANR	6257114	Identifier	s		6256957	1					
ANR	6257115	PrimaryExpression	126		6256957	1					
ANR	6257116	CompoundStatement		24:42:399:399	6256957	1					
ANR	6257117	ExpressionStatement	* d ++ = * s	2599:3:54924:54933	6256957	0	True				
ANR	6257118	AssignmentExpression	* d ++ = * s		6256957	0		=			
ANR	6257119	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257120	UnaryOperator	*		6256957	0					
ANR	6257121	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257122	Identifier	d		6256957	0					
ANR	6257123	IncDec	++		6256957	1					
ANR	6257124	UnaryOperationExpression	* s		6256957	1					
ANR	6257125	UnaryOperator	*		6256957	0					
ANR	6257126	Identifier	s		6256957	1					
ANR	6257127	ElseStatement	else		6256957	0					
ANR	6257128	CompoundStatement		26:9:424:424	6256957	0					
ANR	6257129	ExpressionStatement	* d ++ = '\\\\'	2601:3:54949:54960	6256957	0	True				
ANR	6257130	AssignmentExpression	* d ++ = '\\\\'		6256957	0		=			
ANR	6257131	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257132	UnaryOperator	*		6256957	0					
ANR	6257133	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257134	Identifier	d		6256957	0					
ANR	6257135	IncDec	++		6256957	1					
ANR	6257136	PrimaryExpression	'\\\\'		6256957	1					
ANR	6257137	ExpressionStatement	* d ++ = 'u'	2603:3:54984:54994	6256957	1	True				
ANR	6257138	AssignmentExpression	* d ++ = 'u'		6256957	0		=			
ANR	6257139	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257140	UnaryOperator	*		6256957	0					
ANR	6257141	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257142	Identifier	d		6256957	0					
ANR	6257143	IncDec	++		6256957	1					
ANR	6257144	PrimaryExpression	'u'		6256957	1					
ANR	6257145	ExpressionStatement	* d ++ = '0'	2604:3:54999:55009	6256957	2	True				
ANR	6257146	AssignmentExpression	* d ++ = '0'		6256957	0		=			
ANR	6257147	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257148	UnaryOperator	*		6256957	0					
ANR	6257149	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257150	Identifier	d		6256957	0					
ANR	6257151	IncDec	++		6256957	1					
ANR	6257152	PrimaryExpression	'0'		6256957	1					
ANR	6257153	ExpressionStatement	* d ++ = '0'	2605:3:55014:55024	6256957	3	True				
ANR	6257154	AssignmentExpression	* d ++ = '0'		6256957	0		=			
ANR	6257155	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257156	UnaryOperator	*		6256957	0					
ANR	6257157	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257158	Identifier	d		6256957	0					
ANR	6257159	IncDec	++		6256957	1					
ANR	6257160	PrimaryExpression	'0'		6256957	1					
ANR	6257161	ExpressionStatement	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"	2606:3:55029:55081	6256957	4	True				
ANR	6257162	CallExpression	"snprintf ( ch , sizeof ( ch ) , ""%02x"" , 0xff & ( ( ut8 ) * s ) )"		6256957	0					
ANR	6257163	Callee	snprintf		6256957	0					
ANR	6257164	Identifier	snprintf		6256957	0					
ANR	6257165	ArgumentList	ch		6256957	1					
ANR	6257166	Argument	ch		6256957	0					
ANR	6257167	Identifier	ch		6256957	0					
ANR	6257168	Argument	sizeof ( ch )		6256957	1					
ANR	6257169	SizeofExpression	sizeof ( ch )		6256957	0					
ANR	6257170	Sizeof	sizeof		6256957	0					
ANR	6257171	SizeofOperand	ch		6256957	1					
ANR	6257172	Argument	"""%02x"""		6256957	2					
ANR	6257173	PrimaryExpression	"""%02x"""		6256957	0					
ANR	6257174	Argument	0xff & ( ( ut8 ) * s )		6256957	3					
ANR	6257175	BitAndExpression	0xff & ( ( ut8 ) * s )		6256957	0		&			
ANR	6257176	PrimaryExpression	0xff		6256957	0					
ANR	6257177	CastExpression	( ut8 ) * s		6256957	1					
ANR	6257178	CastTarget	ut8		6256957	0					
ANR	6257179	UnaryOperationExpression	* s		6256957	1					
ANR	6257180	UnaryOperator	*		6256957	0					
ANR	6257181	Identifier	s		6256957	1					
ANR	6257182	ExpressionStatement	* d ++ = ch [ 0 ]	2607:3:55086:55098	6256957	5	True				
ANR	6257183	AssignmentExpression	* d ++ = ch [ 0 ]		6256957	0		=			
ANR	6257184	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257185	UnaryOperator	*		6256957	0					
ANR	6257186	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257187	Identifier	d		6256957	0					
ANR	6257188	IncDec	++		6256957	1					
ANR	6257189	ArrayIndexing	ch [ 0 ]		6256957	1					
ANR	6257190	Identifier	ch		6256957	0					
ANR	6257191	PrimaryExpression	0		6256957	1					
ANR	6257192	ExpressionStatement	* d ++ = ch [ 1 ]	2608:3:55103:55115	6256957	6	True				
ANR	6257193	AssignmentExpression	* d ++ = ch [ 1 ]		6256957	0		=			
ANR	6257194	UnaryOperationExpression	* d ++		6256957	0					
ANR	6257195	UnaryOperator	*		6256957	0					
ANR	6257196	PostIncDecOperationExpression	d ++		6256957	1					
ANR	6257197	Identifier	d		6256957	0					
ANR	6257198	IncDec	++		6256957	1					
ANR	6257199	ArrayIndexing	ch [ 1 ]		6256957	1					
ANR	6257200	Identifier	ch		6256957	0					
ANR	6257201	PrimaryExpression	1		6256957	1					
ANR	6257202	ExpressionStatement	* d = 0	2611:1:55125:55131	6256957	8	True				
ANR	6257203	AssignmentExpression	* d = 0		6256957	0		=			
ANR	6257204	UnaryOperationExpression	* d		6256957	0					
ANR	6257205	UnaryOperator	*		6256957	0					
ANR	6257206	Identifier	d		6256957	1					
ANR	6257207	PrimaryExpression	0		6256957	1					
ANR	6257208	ExpressionStatement	"tmp = realloc ( od , strlen ( od ) + 1 )"	2612:1:55134:55169	6256957	9	True				
ANR	6257209	AssignmentExpression	"tmp = realloc ( od , strlen ( od ) + 1 )"		6256957	0		=			
ANR	6257210	Identifier	tmp		6256957	0					
ANR	6257211	CallExpression	"realloc ( od , strlen ( od ) + 1 )"		6256957	1					
ANR	6257212	Callee	realloc		6256957	0					
ANR	6257213	Identifier	realloc		6256957	0					
ANR	6257214	ArgumentList	od		6256957	1					
ANR	6257215	Argument	od		6256957	0					
ANR	6257216	Identifier	od		6256957	0					
ANR	6257217	Argument	strlen ( od ) + 1		6256957	1					
ANR	6257218	AdditiveExpression	strlen ( od ) + 1		6256957	0		+			
ANR	6257219	CallExpression	strlen ( od )		6256957	0					
ANR	6257220	Callee	strlen		6256957	0					
ANR	6257221	Identifier	strlen		6256957	0					
ANR	6257222	ArgumentList	od		6256957	1					
ANR	6257223	Argument	od		6256957	0					
ANR	6257224	Identifier	od		6256957	0					
ANR	6257225	PrimaryExpression	1		6256957	1					
ANR	6257226	IfStatement	if ( ! tmp )		6256957	10					
ANR	6257227	Condition	! tmp	2613:5:55183:55186	6256957	0	True				
ANR	6257228	UnaryOperationExpression	! tmp		6256957	0					
ANR	6257229	UnaryOperator	!		6256957	0					
ANR	6257230	Identifier	tmp		6256957	1					
ANR	6257231	CompoundStatement		39:11:669:669	6256957	1					
ANR	6257232	ExpressionStatement	free ( od )	2614:2:55193:55202	6256957	0	True				
ANR	6257233	CallExpression	free ( od )		6256957	0					
ANR	6257234	Callee	free		6256957	0					
ANR	6257235	Identifier	free		6256957	0					
ANR	6257236	ArgumentList	od		6256957	1					
ANR	6257237	Argument	od		6256957	0					
ANR	6257238	Identifier	od		6256957	0					
ANR	6257239	ReturnStatement	return NULL ;	2615:2:55206:55217	6256957	1	True				
ANR	6257240	Identifier	NULL		6256957	0					
ANR	6257241	ReturnStatement	return tmp ;	2617:1:55223:55233	6256957	11	True				
ANR	6257242	Identifier	tmp		6256957	0					
ANR	6257243	ReturnType	R_API char *		6256957	1					
ANR	6257244	Identifier	r_str_utf16_encode		6256957	2					
ANR	6257245	ParameterList	"const char * s , int len"		6256957	3					
ANR	6257246	Parameter	const char * s	2575:31:54495:54507	6256957	0	True				
ANR	6257247	ParameterType	const char *		6256957	0					
ANR	6257248	Identifier	s		6256957	1					
ANR	6257249	Parameter	int len	2575:46:54510:54516	6256957	1	True				
ANR	6257250	ParameterType	int		6256957	0					
ANR	6257251	Identifier	len		6256957	1					
ANR	6257252	CFGEntryNode	ENTRY		6256957		True				
ANR	6257253	CFGExitNode	EXIT		6256957		True				
ANR	6257254	Symbol	malloc		6256957						
ANR	6257255	Symbol	NULL		6256957						
ANR	6257256	Symbol	d		6256957						
ANR	6257257	Symbol	ch		6256957						
ANR	6257258	Symbol	* ch		6256957						
ANR	6257259	Symbol	i		6256957						
ANR	6257260	Symbol	realloc		6256957						
ANR	6257261	Symbol	* d ++		6256957						
ANR	6257262	Symbol	* d		6256957						
ANR	6257263	Symbol	strlen		6256957						
ANR	6257264	Symbol	s		6256957						
ANR	6257265	Symbol	len		6256957						
ANR	6257266	Symbol	od		6256957						
ANR	6257267	Symbol	tmp		6256957						
ANR	6257268	Symbol	* s		6256957						
ANR	6257269	Function	r_print_format_length	2622:0:55294:57714							
ANR	6257270	FunctionDef	r_print_format_length (const char * fmt)		6257269	0					
ANR	6257271	CompoundStatement		2622:49:55343:57714	6257269	0					
ANR	6257272	IdentifierDeclStatement	"int nargs , i , j , idx , times , endian ;"	2623:1:55346:55381	6257269	0	True				
ANR	6257273	IdentifierDecl	nargs		6257269	0					
ANR	6257274	IdentifierDeclType	int		6257269	0					
ANR	6257275	Identifier	nargs		6257269	1					
ANR	6257276	IdentifierDecl	i		6257269	1					
ANR	6257277	IdentifierDeclType	int		6257269	0					
ANR	6257278	Identifier	i		6257269	1					
ANR	6257279	IdentifierDecl	j		6257269	2					
ANR	6257280	IdentifierDeclType	int		6257269	0					
ANR	6257281	Identifier	j		6257269	1					
ANR	6257282	IdentifierDecl	idx		6257269	3					
ANR	6257283	IdentifierDeclType	int		6257269	0					
ANR	6257284	Identifier	idx		6257269	1					
ANR	6257285	IdentifierDecl	times		6257269	4					
ANR	6257286	IdentifierDeclType	int		6257269	0					
ANR	6257287	Identifier	times		6257269	1					
ANR	6257288	IdentifierDecl	endian		6257269	5					
ANR	6257289	IdentifierDeclType	int		6257269	0					
ANR	6257290	Identifier	endian		6257269	1					
ANR	6257291	IdentifierDeclStatement	"char * args , * bracket , tmp , last = 0 ;"	2624:1:55384:55419	6257269	1	True				
ANR	6257292	IdentifierDecl	* args		6257269	0					
ANR	6257293	IdentifierDeclType	char *		6257269	0					
ANR	6257294	Identifier	args		6257269	1					
ANR	6257295	IdentifierDecl	* bracket		6257269	1					
ANR	6257296	IdentifierDeclType	char *		6257269	0					
ANR	6257297	Identifier	bracket		6257269	1					
ANR	6257298	IdentifierDecl	tmp		6257269	2					
ANR	6257299	IdentifierDeclType	char		6257269	0					
ANR	6257300	Identifier	tmp		6257269	1					
ANR	6257301	IdentifierDecl	last = 0		6257269	3					
ANR	6257302	IdentifierDeclType	char		6257269	0					
ANR	6257303	Identifier	last		6257269	1					
ANR	6257304	AssignmentExpression	last = 0		6257269	2		=			
ANR	6257305	Identifier	last		6257269	0					
ANR	6257306	PrimaryExpression	0		6257269	1					
ANR	6257307	IdentifierDeclStatement	const char * arg = fmt ;	2625:1:55422:55443	6257269	2	True				
ANR	6257308	IdentifierDecl	* arg = fmt		6257269	0					
ANR	6257309	IdentifierDeclType	const char *		6257269	0					
ANR	6257310	Identifier	arg		6257269	1					
ANR	6257311	AssignmentExpression	* arg = fmt		6257269	2		=			
ANR	6257312	Identifier	fmt		6257269	0					
ANR	6257313	Identifier	fmt		6257269	1					
ANR	6257314	IdentifierDeclStatement	const char * argend = arg + strlen ( fmt ) ;	2626:1:55446:55483	6257269	3	True				
ANR	6257315	IdentifierDecl	* argend = arg + strlen ( fmt )		6257269	0					
ANR	6257316	IdentifierDeclType	const char *		6257269	0					
ANR	6257317	Identifier	argend		6257269	1					
ANR	6257318	AssignmentExpression	* argend = arg + strlen ( fmt )		6257269	2		=			
ANR	6257319	Identifier	argend		6257269	0					
ANR	6257320	AdditiveExpression	arg + strlen ( fmt )		6257269	1		+			
ANR	6257321	Identifier	arg		6257269	0					
ANR	6257322	CallExpression	strlen ( fmt )		6257269	1					
ANR	6257323	Callee	strlen		6257269	0					
ANR	6257324	Identifier	strlen		6257269	0					
ANR	6257325	ArgumentList	fmt		6257269	1					
ANR	6257326	Argument	fmt		6257269	0					
ANR	6257327	Identifier	fmt		6257269	0					
ANR	6257328	IdentifierDeclStatement	char namefmt [ 8 ] ;	2627:1:55486:55501	6257269	4	True				
ANR	6257329	IdentifierDecl	namefmt [ 8 ]		6257269	0					
ANR	6257330	IdentifierDeclType	char [ 8 ]		6257269	0					
ANR	6257331	Identifier	namefmt		6257269	1					
ANR	6257332	PrimaryExpression	8		6257269	2					
ANR	6257333	IdentifierDeclStatement	int viewflags = 0 ;	2628:1:55504:55521	6257269	5	True				
ANR	6257334	IdentifierDecl	viewflags = 0		6257269	0					
ANR	6257335	IdentifierDeclType	int		6257269	0					
ANR	6257336	Identifier	viewflags		6257269	1					
ANR	6257337	AssignmentExpression	viewflags = 0		6257269	2		=			
ANR	6257338	Identifier	viewflags		6257269	0					
ANR	6257339	PrimaryExpression	0		6257269	1					
ANR	6257340	ExpressionStatement	endian = i = j = 0	2629:1:55524:55542	6257269	6	True				
ANR	6257341	AssignmentExpression	endian = i = j = 0		6257269	0		=			
ANR	6257342	Identifier	endian		6257269	0					
ANR	6257343	AssignmentExpression	i = j = 0		6257269	1		=			
ANR	6257344	Identifier	i		6257269	0					
ANR	6257345	AssignmentExpression	j = 0		6257269	1		=			
ANR	6257346	Identifier	j		6257269	0					
ANR	6257347	PrimaryExpression	0		6257269	1					
ANR	6257348	WhileStatement	while ( * arg && IS_WHITECHAR ( * arg ) )		6257269	7					
ANR	6257349	Condition	* arg && IS_WHITECHAR ( * arg )	2631:8:55553:55579	6257269	0	True				
ANR	6257350	AndExpression	* arg && IS_WHITECHAR ( * arg )		6257269	0		&&			
ANR	6257351	UnaryOperationExpression	* arg		6257269	0					
ANR	6257352	UnaryOperator	*		6257269	0					
ANR	6257353	Identifier	arg		6257269	1					
ANR	6257354	CallExpression	IS_WHITECHAR ( * arg )		6257269	1					
ANR	6257355	Callee	IS_WHITECHAR		6257269	0					
ANR	6257356	Identifier	IS_WHITECHAR		6257269	0					
ANR	6257357	ArgumentList	* arg		6257269	1					
ANR	6257358	Argument	* arg		6257269	0					
ANR	6257359	UnaryOperationExpression	* arg		6257269	0					
ANR	6257360	UnaryOperator	*		6257269	0					
ANR	6257361	Identifier	arg		6257269	1					
ANR	6257362	CompoundStatement		10:37:238:238	6257269	1					
ANR	6257363	ExpressionStatement	arg ++	2632:2:55586:55591	6257269	0	True				
ANR	6257364	PostIncDecOperationExpression	arg ++		6257269	0					
ANR	6257365	Identifier	arg		6257269	0					
ANR	6257366	IncDec	++		6257269	1					
ANR	6257367	ExpressionStatement	times = atoi ( arg )	2635:1:55614:55632	6257269	8	True				
ANR	6257368	AssignmentExpression	times = atoi ( arg )		6257269	0		=			
ANR	6257369	Identifier	times		6257269	0					
ANR	6257370	CallExpression	atoi ( arg )		6257269	1					
ANR	6257371	Callee	atoi		6257269	0					
ANR	6257372	Identifier	atoi		6257269	0					
ANR	6257373	ArgumentList	arg		6257269	1					
ANR	6257374	Argument	arg		6257269	0					
ANR	6257375	Identifier	arg		6257269	0					
ANR	6257376	IfStatement	if ( times > 0 )		6257269	9					
ANR	6257377	Condition	times > 0	2636:5:55639:55647	6257269	0	True				
ANR	6257378	RelationalExpression	times > 0		6257269	0		>			
ANR	6257379	Identifier	times		6257269	0					
ANR	6257380	PrimaryExpression	0		6257269	1					
ANR	6257381	CompoundStatement		15:16:306:306	6257269	1					
ANR	6257382	WhileStatement	while ( ( * arg >= '0' && * arg <= '9' ) )		6257269	0					
ANR	6257383	Condition	* arg >= '0' && * arg <= '9'	2637:9:55661:55688	6257269	0	True				
ANR	6257384	AndExpression	* arg >= '0' && * arg <= '9'		6257269	0		&&			
ANR	6257385	RelationalExpression	* arg >= '0'		6257269	0		>=			
ANR	6257386	UnaryOperationExpression	* arg		6257269	0					
ANR	6257387	UnaryOperator	*		6257269	0					
ANR	6257388	Identifier	arg		6257269	1					
ANR	6257389	PrimaryExpression	'0'		6257269	1					
ANR	6257390	RelationalExpression	* arg <= '9'		6257269	1		<=			
ANR	6257391	UnaryOperationExpression	* arg		6257269	0					
ANR	6257392	UnaryOperator	*		6257269	0					
ANR	6257393	Identifier	arg		6257269	1					
ANR	6257394	PrimaryExpression	'9'		6257269	1					
ANR	6257395	CompoundStatement		16:39:347:347	6257269	1					
ANR	6257396	ExpressionStatement	arg ++	2638:3:55696:55701	6257269	0	True				
ANR	6257397	PostIncDecOperationExpression	arg ++		6257269	0					
ANR	6257398	Identifier	arg		6257269	0					
ANR	6257399	IncDec	++		6257269	1					
ANR	6257400	ExpressionStatement	"bracket = strchr ( arg , '{' )"	2641:1:55711:55737	6257269	10	True				
ANR	6257401	AssignmentExpression	"bracket = strchr ( arg , '{' )"		6257269	0		=			
ANR	6257402	Identifier	bracket		6257269	0					
ANR	6257403	CallExpression	"strchr ( arg , '{' )"		6257269	1					
ANR	6257404	Callee	strchr		6257269	0					
ANR	6257405	Identifier	strchr		6257269	0					
ANR	6257406	ArgumentList	arg		6257269	1					
ANR	6257407	Argument	arg		6257269	0					
ANR	6257408	Identifier	arg		6257269	0					
ANR	6257409	Argument	'{'		6257269	1					
ANR	6257410	PrimaryExpression	'{'		6257269	0					
ANR	6257411	IfStatement	if ( bracket )		6257269	11					
ANR	6257412	Condition	bracket	2642:5:55744:55750	6257269	0	True				
ANR	6257413	Identifier	bracket		6257269	0					
ANR	6257414	CompoundStatement		22:2:413:441	6257269	1					
ANR	6257415	IdentifierDeclStatement	"char * end = strchr ( arg , '}' ) ;"	2643:2:55757:55785	6257269	0	True				
ANR	6257416	IdentifierDecl	"* end = strchr ( arg , '}' )"		6257269	0					
ANR	6257417	IdentifierDeclType	char *		6257269	0					
ANR	6257418	Identifier	end		6257269	1					
ANR	6257419	AssignmentExpression	"* end = strchr ( arg , '}' )"		6257269	2		=			
ANR	6257420	Identifier	end		6257269	0					
ANR	6257421	CallExpression	"strchr ( arg , '}' )"		6257269	1					
ANR	6257422	Callee	strchr		6257269	0					
ANR	6257423	Identifier	strchr		6257269	0					
ANR	6257424	ArgumentList	arg		6257269	1					
ANR	6257425	Argument	arg		6257269	0					
ANR	6257426	Identifier	arg		6257269	0					
ANR	6257427	Argument	'}'		6257269	1					
ANR	6257428	PrimaryExpression	'}'		6257269	0					
ANR	6257429	IfStatement	if ( ! end )		6257269	1					
ANR	6257430	Condition	! end	2644:6:55793:55796	6257269	0	True				
ANR	6257431	UnaryOperationExpression	! end		6257269	0					
ANR	6257432	UnaryOperator	!		6257269	0					
ANR	6257433	Identifier	end		6257269	1					
ANR	6257434	CompoundStatement		23:12:455:455	6257269	1					
ANR	6257435	ExpressionStatement	"eprintf ( ""No end bracket. Try pm {ecx}b @ esi\\n"" )"	2645:3:55804:55853	6257269	0	True				
ANR	6257436	CallExpression	"eprintf ( ""No end bracket. Try pm {ecx}b @ esi\\n"" )"		6257269	0					
ANR	6257437	Callee	eprintf		6257269	0					
ANR	6257438	Identifier	eprintf		6257269	0					
ANR	6257439	ArgumentList	"""No end bracket. Try pm {ecx}b @ esi\\n"""		6257269	1					
ANR	6257440	Argument	"""No end bracket. Try pm {ecx}b @ esi\\n"""		6257269	0					
ANR	6257441	PrimaryExpression	"""No end bracket. Try pm {ecx}b @ esi\\n"""		6257269	0					
ANR	6257442	ReturnStatement	return 0 ;	2646:3:55858:55866	6257269	1	True				
ANR	6257443	PrimaryExpression	0		6257269	0					
ANR	6257444	ExpressionStatement	* end = '\\0'	2648:2:55874:55883	6257269	2	True				
ANR	6257445	AssignmentExpression	* end = '\\0'		6257269	0		=			
ANR	6257446	UnaryOperationExpression	* end		6257269	0					
ANR	6257447	UnaryOperator	*		6257269	0					
ANR	6257448	Identifier	end		6257269	1					
ANR	6257449	PrimaryExpression	'\\0'		6257269	1					
ANR	6257450	ExpressionStatement	"times = r_num_math ( NULL , bracket + 1 )"	2649:2:55887:55923	6257269	3	True				
ANR	6257451	AssignmentExpression	"times = r_num_math ( NULL , bracket + 1 )"		6257269	0		=			
ANR	6257452	Identifier	times		6257269	0					
ANR	6257453	CallExpression	"r_num_math ( NULL , bracket + 1 )"		6257269	1					
ANR	6257454	Callee	r_num_math		6257269	0					
ANR	6257455	Identifier	r_num_math		6257269	0					
ANR	6257456	ArgumentList	NULL		6257269	1					
ANR	6257457	Argument	NULL		6257269	0					
ANR	6257458	Identifier	NULL		6257269	0					
ANR	6257459	Argument	bracket + 1		6257269	1					
ANR	6257460	AdditiveExpression	bracket + 1		6257269	0		+			
ANR	6257461	Identifier	bracket		6257269	0					
ANR	6257462	PrimaryExpression	1		6257269	1					
ANR	6257463	ExpressionStatement	arg = end + 1	2650:2:55927:55940	6257269	4	True				
ANR	6257464	AssignmentExpression	arg = end + 1		6257269	0		=			
ANR	6257465	Identifier	arg		6257269	0					
ANR	6257466	AdditiveExpression	end + 1		6257269	1		+			
ANR	6257467	Identifier	end		6257269	0					
ANR	6257468	PrimaryExpression	1		6257269	1					
ANR	6257469	IfStatement	if ( * arg == '\\0' )		6257269	12					
ANR	6257470	Condition	* arg == '\\0'	2653:5:55951:55962	6257269	0	True				
ANR	6257471	EqualityExpression	* arg == '\\0'		6257269	0		==			
ANR	6257472	UnaryOperationExpression	* arg		6257269	0					
ANR	6257473	UnaryOperator	*		6257269	0					
ANR	6257474	Identifier	arg		6257269	1					
ANR	6257475	PrimaryExpression	'\\0'		6257269	1					
ANR	6257476	CompoundStatement		32:19:621:621	6257269	1					
ANR	6257477	ReturnStatement	return 0 ;	2654:2:55969:55977	6257269	0	True				
ANR	6257478	PrimaryExpression	0		6257269	0					
ANR	6257479	ExpressionStatement	"args = strchr ( arg , ' ' )"	2657:1:55999:56023	6257269	13	True				
ANR	6257480	AssignmentExpression	"args = strchr ( arg , ' ' )"		6257269	0		=			
ANR	6257481	Identifier	args		6257269	0					
ANR	6257482	CallExpression	"strchr ( arg , ' ' )"		6257269	1					
ANR	6257483	Callee	strchr		6257269	0					
ANR	6257484	Identifier	strchr		6257269	0					
ANR	6257485	ArgumentList	arg		6257269	1					
ANR	6257486	Argument	arg		6257269	0					
ANR	6257487	Identifier	arg		6257269	0					
ANR	6257488	Argument	' '		6257269	1					
ANR	6257489	PrimaryExpression	' '		6257269	0					
ANR	6257490	IfStatement	if ( args )		6257269	14					
ANR	6257491	Condition	args	2658:5:56030:56033	6257269	0	True				
ANR	6257492	Identifier	args		6257269	0					
ANR	6257493	CompoundStatement		38:2:696:715	6257269	1					
ANR	6257494	IdentifierDeclStatement	"int l = 0 , maxl = 0 ;"	2659:2:56040:56059	6257269	0	True				
ANR	6257495	IdentifierDecl	l = 0		6257269	0					
ANR	6257496	IdentifierDeclType	int		6257269	0					
ANR	6257497	Identifier	l		6257269	1					
ANR	6257498	AssignmentExpression	l = 0		6257269	2		=			
ANR	6257499	Identifier	l		6257269	0					
ANR	6257500	PrimaryExpression	0		6257269	1					
ANR	6257501	IdentifierDecl	maxl = 0		6257269	1					
ANR	6257502	IdentifierDeclType	int		6257269	0					
ANR	6257503	Identifier	maxl		6257269	1					
ANR	6257504	AssignmentExpression	maxl = 0		6257269	2		=			
ANR	6257505	Identifier	maxl		6257269	0					
ANR	6257506	PrimaryExpression	0		6257269	1					
ANR	6257507	ExpressionStatement	argend = args	2660:2:56063:56076	6257269	1	True				
ANR	6257508	AssignmentExpression	argend = args		6257269	0		=			
ANR	6257509	Identifier	argend		6257269	0					
ANR	6257510	Identifier	args		6257269	1					
ANR	6257511	ExpressionStatement	args = strdup ( args + 1 )	2661:2:56080:56102	6257269	2	True				
ANR	6257512	AssignmentExpression	args = strdup ( args + 1 )		6257269	0		=			
ANR	6257513	Identifier	args		6257269	0					
ANR	6257514	CallExpression	strdup ( args + 1 )		6257269	1					
ANR	6257515	Callee	strdup		6257269	0					
ANR	6257516	Identifier	strdup		6257269	0					
ANR	6257517	ArgumentList	args + 1		6257269	1					
ANR	6257518	Argument	args + 1		6257269	0					
ANR	6257519	AdditiveExpression	args + 1		6257269	0		+			
ANR	6257520	Identifier	args		6257269	0					
ANR	6257521	PrimaryExpression	1		6257269	1					
ANR	6257522	ExpressionStatement	nargs = r_str_word_set0 ( args + 1 )	2662:2:56106:56138	6257269	3	True				
ANR	6257523	AssignmentExpression	nargs = r_str_word_set0 ( args + 1 )		6257269	0		=			
ANR	6257524	Identifier	nargs		6257269	0					
ANR	6257525	CallExpression	r_str_word_set0 ( args + 1 )		6257269	1					
ANR	6257526	Callee	r_str_word_set0		6257269	0					
ANR	6257527	Identifier	r_str_word_set0		6257269	0					
ANR	6257528	ArgumentList	args + 1		6257269	1					
ANR	6257529	Argument	args + 1		6257269	0					
ANR	6257530	AdditiveExpression	args + 1		6257269	0		+			
ANR	6257531	Identifier	args		6257269	0					
ANR	6257532	PrimaryExpression	1		6257269	1					
ANR	6257533	IfStatement	if ( ! nargs )		6257269	4					
ANR	6257534	Condition	! nargs	2663:6:56146:56151	6257269	0	True				
ANR	6257535	UnaryOperationExpression	! nargs		6257269	0					
ANR	6257536	UnaryOperator	!		6257269	0					
ANR	6257537	Identifier	nargs		6257269	1					
ANR	6257538	CompoundStatement		42:14:810:810	6257269	1					
ANR	6257539	ExpressionStatement	R_FREE ( args )	2664:3:56159:56172	6257269	0	True				
ANR	6257540	CallExpression	R_FREE ( args )		6257269	0					
ANR	6257541	Callee	R_FREE		6257269	0					
ANR	6257542	Identifier	R_FREE		6257269	0					
ANR	6257543	ArgumentList	args		6257269	1					
ANR	6257544	Argument	args		6257269	0					
ANR	6257545	Identifier	args		6257269	0					
ANR	6257546	ForStatement	for ( i = 0 ; i < nargs ; i ++ )		6257269	5					
ANR	6257547	ForInit	i = 0 ;	2666:7:56185:56190	6257269	0	True				
ANR	6257548	AssignmentExpression	i = 0		6257269	0		=			
ANR	6257549	Identifier	i		6257269	0					
ANR	6257550	PrimaryExpression	0		6257269	1					
ANR	6257551	Condition	i < nargs	2666:14:56192:56198	6257269	1	True				
ANR	6257552	RelationalExpression	i < nargs		6257269	0		<			
ANR	6257553	Identifier	i		6257269	0					
ANR	6257554	Identifier	nargs		6257269	1					
ANR	6257555	PostIncDecOperationExpression	i ++	2666:23:56201:56203	6257269	2	True				
ANR	6257556	Identifier	i		6257269	0					
ANR	6257557	IncDec	++		6257269	1					
ANR	6257558	CompoundStatement		46:3:867:915	6257269	3					
ANR	6257559	IdentifierDeclStatement	"int len = strlen ( r_str_word_get0 ( args + 1 , i ) ) ;"	2667:3:56211:56259	6257269	0	True				
ANR	6257560	IdentifierDecl	"len = strlen ( r_str_word_get0 ( args + 1 , i ) )"		6257269	0					
ANR	6257561	IdentifierDeclType	int		6257269	0					
ANR	6257562	Identifier	len		6257269	1					
ANR	6257563	AssignmentExpression	"len = strlen ( r_str_word_get0 ( args + 1 , i ) )"		6257269	2		=			
ANR	6257564	Identifier	len		6257269	0					
ANR	6257565	CallExpression	"strlen ( r_str_word_get0 ( args + 1 , i ) )"		6257269	1					
ANR	6257566	Callee	strlen		6257269	0					
ANR	6257567	Identifier	strlen		6257269	0					
ANR	6257568	ArgumentList	"r_str_word_get0 ( args + 1 , i )"		6257269	1					
ANR	6257569	Argument	"r_str_word_get0 ( args + 1 , i )"		6257269	0					
ANR	6257570	CallExpression	"r_str_word_get0 ( args + 1 , i )"		6257269	0					
ANR	6257571	Callee	r_str_word_get0		6257269	0					
ANR	6257572	Identifier	r_str_word_get0		6257269	0					
ANR	6257573	ArgumentList	args + 1		6257269	1					
ANR	6257574	Argument	args + 1		6257269	0					
ANR	6257575	AdditiveExpression	args + 1		6257269	0		+			
ANR	6257576	Identifier	args		6257269	0					
ANR	6257577	PrimaryExpression	1		6257269	1					
ANR	6257578	Argument	i		6257269	1					
ANR	6257579	Identifier	i		6257269	0					
ANR	6257580	IfStatement	if ( len > maxl )		6257269	1					
ANR	6257581	Condition	len > maxl	2668:7:56268:56277	6257269	0	True				
ANR	6257582	RelationalExpression	len > maxl		6257269	0		>			
ANR	6257583	Identifier	len		6257269	0					
ANR	6257584	Identifier	maxl		6257269	1					
ANR	6257585	CompoundStatement		47:19:936:936	6257269	1					
ANR	6257586	ExpressionStatement	maxl = len	2669:4:56286:56296	6257269	0	True				
ANR	6257587	AssignmentExpression	maxl = len		6257269	0		=			
ANR	6257588	Identifier	maxl		6257269	0					
ANR	6257589	Identifier	len		6257269	1					
ANR	6257590	ExpressionStatement	l ++	2672:2:56309:56312	6257269	6	True				
ANR	6257591	PostIncDecOperationExpression	l ++		6257269	0					
ANR	6257592	Identifier	l		6257269	0					
ANR	6257593	IncDec	++		6257269	1					
ANR	6257594	ExpressionStatement	"snprintf ( namefmt , sizeof ( namefmt ) , ""%%%ds : "" , maxl )"	2673:2:56316:56370	6257269	7	True				
ANR	6257595	CallExpression	"snprintf ( namefmt , sizeof ( namefmt ) , ""%%%ds : "" , maxl )"		6257269	0					
ANR	6257596	Callee	snprintf		6257269	0					
ANR	6257597	Identifier	snprintf		6257269	0					
ANR	6257598	ArgumentList	namefmt		6257269	1					
ANR	6257599	Argument	namefmt		6257269	0					
ANR	6257600	Identifier	namefmt		6257269	0					
ANR	6257601	Argument	sizeof ( namefmt )		6257269	1					
ANR	6257602	SizeofExpression	sizeof ( namefmt )		6257269	0					
ANR	6257603	Sizeof	sizeof		6257269	0					
ANR	6257604	SizeofOperand	namefmt		6257269	1					
ANR	6257605	Argument	"""%%%ds : """		6257269	2					
ANR	6257606	PrimaryExpression	"""%%%ds : """		6257269	0					
ANR	6257607	Argument	maxl		6257269	3					
ANR	6257608	Identifier	maxl		6257269	0					
ANR	6257609	ExpressionStatement	i = 0	2677:1:56394:56399	6257269	15	True				
ANR	6257610	AssignmentExpression	i = 0		6257269	0		=			
ANR	6257611	Identifier	i		6257269	0					
ANR	6257612	PrimaryExpression	0		6257269	1					
ANR	6257613	IfStatement	if ( ! times )		6257269	16					
ANR	6257614	Condition	! times	2678:5:56406:56411	6257269	0	True				
ANR	6257615	UnaryOperationExpression	! times		6257269	0					
ANR	6257616	UnaryOperator	!		6257269	0					
ANR	6257617	Identifier	times		6257269	1					
ANR	6257618	CompoundStatement		57:13:1070:1070	6257269	1					
ANR	6257619	ExpressionStatement	times = 1	2679:2:56418:56427	6257269	0	True				
ANR	6257620	AssignmentExpression	times = 1		6257269	0		=			
ANR	6257621	Identifier	times		6257269	0					
ANR	6257622	PrimaryExpression	1		6257269	1					
ANR	6257623	ForStatement	for ( ; times ; times -- )		6257269	17					
ANR	6257624	Condition	times	2681:8:56440:56444	6257269	0	True				
ANR	6257625	Identifier	times		6257269	0					
ANR	6257626	PostIncDecOperationExpression	times --	2681:15:56447:56453	6257269	1	True				
ANR	6257627	Identifier	times		6257269	0					
ANR	6257628	IncDec	--		6257269	1					
ANR	6257629	CompoundStatement		61:2:1134:1157	6257269	2					
ANR	6257630	IdentifierDeclStatement	const char * orig = arg ;	2682:2:56478:56501	6257269	0	True				
ANR	6257631	IdentifierDecl	* orig = arg		6257269	0					
ANR	6257632	IdentifierDeclType	const char *		6257269	0					
ANR	6257633	Identifier	orig		6257269	1					
ANR	6257634	AssignmentExpression	* orig = arg		6257269	2		=			
ANR	6257635	Identifier	arg		6257269	0					
ANR	6257636	Identifier	arg		6257269	1					
ANR	6257637	ExpressionStatement	arg = orig	2683:2:56505:56515	6257269	1	True				
ANR	6257638	AssignmentExpression	arg = orig		6257269	0		=			
ANR	6257639	Identifier	arg		6257269	0					
ANR	6257640	Identifier	orig		6257269	1					
ANR	6257641	ForStatement	"for ( idx = 0 ; arg < argend && * arg ; idx ++ , arg ++ )"		6257269	2					
ANR	6257642	ForInit	idx = 0 ;	2684:7:56524:56531	6257269	0	True				
ANR	6257643	AssignmentExpression	idx = 0		6257269	0		=			
ANR	6257644	Identifier	idx		6257269	0					
ANR	6257645	PrimaryExpression	0		6257269	1					
ANR	6257646	Condition	arg < argend && * arg	2684:16:56533:56552	6257269	1	True				
ANR	6257647	AndExpression	arg < argend && * arg		6257269	0		&&			
ANR	6257648	RelationalExpression	arg < argend		6257269	0		<			
ANR	6257649	Identifier	arg		6257269	0					
ANR	6257650	Identifier	argend		6257269	1					
ANR	6257651	UnaryOperationExpression	* arg		6257269	1					
ANR	6257652	UnaryOperator	*		6257269	0					
ANR	6257653	Identifier	arg		6257269	1					
ANR	6257654	Expression	"idx ++ , arg ++"	2684:38:56555:56566	6257269	2	True				
ANR	6257655	PostIncDecOperationExpression	idx ++		6257269	0					
ANR	6257656	Identifier	idx		6257269	0					
ANR	6257657	IncDec	++		6257269	1					
ANR	6257658	PostIncDecOperationExpression	arg ++		6257269	1					
ANR	6257659	Identifier	arg		6257269	0					
ANR	6257660	IncDec	++		6257269	1					
ANR	6257661	CompoundStatement		63:52:1225:1225	6257269	3					
ANR	6257662	ExpressionStatement	tmp = * arg	2685:3:56574:56584	6257269	0	True				
ANR	6257663	AssignmentExpression	tmp = * arg		6257269	0		=			
ANR	6257664	Identifier	tmp		6257269	0					
ANR	6257665	UnaryOperationExpression	* arg		6257269	1					
ANR	6257666	UnaryOperator	*		6257269	0					
ANR	6257667	Identifier	arg		6257269	1					
ANR	6257668	Label	feed_me_again :	2686:2:56588:56601	6257269	1	True				
ANR	6257669	Identifier	feed_me_again		6257269	0					
ANR	6257670	IfStatement	if ( ! tmp && last != '*' )		6257269	2					
ANR	6257671	Condition	! tmp && last != '*'	2687:7:56610:56628	6257269	0	True				
ANR	6257672	AndExpression	! tmp && last != '*'		6257269	0		&&			
ANR	6257673	UnaryOperationExpression	! tmp		6257269	0					
ANR	6257674	UnaryOperator	!		6257269	0					
ANR	6257675	Identifier	tmp		6257269	1					
ANR	6257676	EqualityExpression	last != '*'		6257269	1		!=			
ANR	6257677	Identifier	last		6257269	0					
ANR	6257678	PrimaryExpression	'*'		6257269	1					
ANR	6257679	CompoundStatement		66:28:1287:1287	6257269	1					
ANR	6257680	BreakStatement	break ;	2688:4:56637:56642	6257269	0	True				
ANR	6257681	SwitchStatement	switch ( tmp )		6257269	3					
ANR	6257682	Condition	tmp	2691:11:56680:56682	6257269	0	True				
ANR	6257683	Identifier	tmp		6257269	0					
ANR	6257684	CompoundStatement		70:16:1341:1341	6257269	1					
ANR	6257685	Label	case '*' :	2692:3:56690:56698	6257269	0	True				
ANR	6257686	IfStatement	if ( i <= 0 )		6257269	1					
ANR	6257687	Condition	i <= 0	2693:8:56708:56713	6257269	0	True				
ANR	6257688	RelationalExpression	i <= 0		6257269	0		<=			
ANR	6257689	Identifier	i		6257269	0					
ANR	6257690	PrimaryExpression	0		6257269	1					
ANR	6257691	CompoundStatement		72:16:1372:1372	6257269	1					
ANR	6257692	BreakStatement	break ;	2694:5:56723:56728	6257269	0	True				
ANR	6257693	ExpressionStatement	tmp = last	2696:4:56740:56750	6257269	2	True				
ANR	6257694	AssignmentExpression	tmp = last		6257269	0		=			
ANR	6257695	Identifier	tmp		6257269	0					
ANR	6257696	Identifier	last		6257269	1					
ANR	6257697	ExpressionStatement	arg --	2697:4:56756:56761	6257269	3	True				
ANR	6257698	PostIncDecOperationExpression	arg --		6257269	0					
ANR	6257699	Identifier	arg		6257269	0					
ANR	6257700	IncDec	--		6257269	1					
ANR	6257701	ExpressionStatement	idx --	2698:4:56767:56772	6257269	4	True				
ANR	6257702	PostIncDecOperationExpression	idx --		6257269	0					
ANR	6257703	Identifier	idx		6257269	0					
ANR	6257704	IncDec	--		6257269	1					
ANR	6257705	GotoStatement	goto feed_me_again ;	2699:4:56778:56796	6257269	5	True				
ANR	6257706	Identifier	feed_me_again		6257269	0					
ANR	6257707	Label	case '+' :	2700:3:56801:56809	6257269	6	True				
ANR	6257708	ExpressionStatement	idx --	2701:4:56815:56820	6257269	7	True				
ANR	6257709	PostIncDecOperationExpression	idx --		6257269	0					
ANR	6257710	Identifier	idx		6257269	0					
ANR	6257711	IncDec	--		6257269	1					
ANR	6257712	ExpressionStatement	viewflags = ! viewflags	2702:4:56826:56848	6257269	8	True				
ANR	6257713	AssignmentExpression	viewflags = ! viewflags		6257269	0		=			
ANR	6257714	Identifier	viewflags		6257269	0					
ANR	6257715	UnaryOperationExpression	! viewflags		6257269	1					
ANR	6257716	UnaryOperator	!		6257269	0					
ANR	6257717	Identifier	viewflags		6257269	1					
ANR	6257718	ContinueStatement	continue ;	2703:4:56854:56862	6257269	9	True				
ANR	6257719	Label	case 'e' :	2704:3:56867:56875	6257269	10	True				
ANR	6257720	ExpressionStatement	idx --	2705:4:56900:56905	6257269	11	True				
ANR	6257721	PostIncDecOperationExpression	idx --		6257269	0					
ANR	6257722	Identifier	idx		6257269	0					
ANR	6257723	IncDec	--		6257269	1					
ANR	6257724	ExpressionStatement	endian ^= 1	2706:4:56911:56922	6257269	12	True				
ANR	6257725	AssignmentExpression	endian ^= 1		6257269	0		^=			
ANR	6257726	Identifier	endian		6257269	0					
ANR	6257727	PrimaryExpression	1		6257269	1					
ANR	6257728	ContinueStatement	continue ;	2707:4:56928:56936	6257269	13	True				
ANR	6257729	Label	case '.' :	2708:3:56941:56949	6257269	14	True				
ANR	6257730	ExpressionStatement	i ++	2709:4:56968:56971	6257269	15	True				
ANR	6257731	PostIncDecOperationExpression	i ++		6257269	0					
ANR	6257732	Identifier	i		6257269	0					
ANR	6257733	IncDec	++		6257269	1					
ANR	6257734	ExpressionStatement	idx --	2710:4:56977:56982	6257269	16	True				
ANR	6257735	PostIncDecOperationExpression	idx --		6257269	0					
ANR	6257736	Identifier	idx		6257269	0					
ANR	6257737	IncDec	--		6257269	1					
ANR	6257738	ContinueStatement	continue ;	2711:4:56988:56996	6257269	17	True				
ANR	6257739	Label	case 'p' :	2712:3:57001:57009	6257269	18	True				
ANR	6257740	ExpressionStatement	tmp = ( sizeof ( void * ) == 8 ) ? 'q' : 'x'	2713:4:57015:57052	6257269	19	True				
ANR	6257741	AssignmentExpression	tmp = ( sizeof ( void * ) == 8 ) ? 'q' : 'x'		6257269	0		=			
ANR	6257742	Identifier	tmp		6257269	0					
ANR	6257743	ConditionalExpression	( sizeof ( void * ) == 8 ) ? 'q' : 'x'		6257269	1					
ANR	6257744	Condition	sizeof ( void * ) == 8		6257269	0					
ANR	6257745	EqualityExpression	sizeof ( void * ) == 8		6257269	0		==			
ANR	6257746	SizeofExpression	sizeof ( void * )		6257269	0					
ANR	6257747	Sizeof	sizeof		6257269	0					
ANR	6257748	SizeofOperand	void *		6257269	1					
ANR	6257749	PrimaryExpression	8		6257269	1					
ANR	6257750	PrimaryExpression	'q'		6257269	1					
ANR	6257751	PrimaryExpression	'x'		6257269	2					
ANR	6257752	BreakStatement	break ;	2714:4:57058:57063	6257269	20	True				
ANR	6257753	Label	case '?' :	2715:3:57068:57076	6257269	21	True				
ANR	6257754	ExpressionStatement	idx --	2716:4:57090:57095	6257269	22	True				
ANR	6257755	PostIncDecOperationExpression	idx --		6257269	0					
ANR	6257756	Identifier	idx		6257269	0					
ANR	6257757	IncDec	--		6257269	1					
ANR	6257758	ExpressionStatement	free ( args )	2717:4:57101:57112	6257269	23	True				
ANR	6257759	CallExpression	free ( args )		6257269	0					
ANR	6257760	Callee	free		6257269	0					
ANR	6257761	Identifier	free		6257269	0					
ANR	6257762	ArgumentList	args		6257269	1					
ANR	6257763	Argument	args		6257269	0					
ANR	6257764	Identifier	args		6257269	0					
ANR	6257765	ReturnStatement	return 0 ;	2718:4:57118:57126	6257269	24	True				
ANR	6257766	PrimaryExpression	0		6257269	0					
ANR	6257767	SwitchStatement	switch ( tmp )		6257269	4					
ANR	6257768	Condition	tmp	2720:11:57144:57146	6257269	0	True				
ANR	6257769	Identifier	tmp		6257269	0					
ANR	6257770	CompoundStatement		99:16:1805:1805	6257269	1					
ANR	6257771	Label	case 'e' :	2721:3:57154:57162	6257269	0	True				
ANR	6257772	ExpressionStatement	i += 8	2721:13:57164:57170	6257269	1	True				
ANR	6257773	AssignmentExpression	i += 8		6257269	0		+=			
ANR	6257774	Identifier	i		6257269	0					
ANR	6257775	PrimaryExpression	8		6257269	1					
ANR	6257776	BreakStatement	break ;	2721:21:57172:57177	6257269	2	True				
ANR	6257777	Label	case 'q' :	2722:3:57182:57190	6257269	3	True				
ANR	6257778	ExpressionStatement	i += 8	2722:13:57192:57198	6257269	4	True				
ANR	6257779	AssignmentExpression	i += 8		6257269	0		+=			
ANR	6257780	Identifier	i		6257269	0					
ANR	6257781	PrimaryExpression	8		6257269	1					
ANR	6257782	BreakStatement	break ;	2722:21:57200:57205	6257269	5	True				
ANR	6257783	Label	case 'b' :	2723:3:57210:57218	6257269	6	True				
ANR	6257784	ExpressionStatement	i ++	2723:13:57220:57223	6257269	7	True				
ANR	6257785	PostIncDecOperationExpression	i ++		6257269	0					
ANR	6257786	Identifier	i		6257269	0					
ANR	6257787	IncDec	++		6257269	1					
ANR	6257788	BreakStatement	break ;	2723:18:57225:57230	6257269	8	True				
ANR	6257789	Label	case 'c' :	2724:3:57235:57243	6257269	9	True				
ANR	6257790	ExpressionStatement	i ++	2724:13:57245:57248	6257269	10	True				
ANR	6257791	PostIncDecOperationExpression	i ++		6257269	0					
ANR	6257792	Identifier	i		6257269	0					
ANR	6257793	IncDec	++		6257269	1					
ANR	6257794	BreakStatement	break ;	2724:18:57250:57255	6257269	11	True				
ANR	6257795	Label	case 'B' :	2725:3:57260:57268	6257269	12	True				
ANR	6257796	ExpressionStatement	i += 4	2725:13:57270:57276	6257269	13	True				
ANR	6257797	AssignmentExpression	i += 4		6257269	0		+=			
ANR	6257798	Identifier	i		6257269	0					
ANR	6257799	PrimaryExpression	4		6257269	1					
ANR	6257800	BreakStatement	break ;	2725:21:57278:57283	6257269	14	True				
ANR	6257801	Label	case 'i' :	2726:3:57288:57296	6257269	15	True				
ANR	6257802	ExpressionStatement	i += 4	2726:13:57298:57304	6257269	16	True				
ANR	6257803	AssignmentExpression	i += 4		6257269	0		+=			
ANR	6257804	Identifier	i		6257269	0					
ANR	6257805	PrimaryExpression	4		6257269	1					
ANR	6257806	BreakStatement	break ;	2726:21:57306:57311	6257269	17	True				
ANR	6257807	Label	case 'd' :	2727:3:57316:57324	6257269	18	True				
ANR	6257808	ExpressionStatement	i += 4	2727:13:57326:57332	6257269	19	True				
ANR	6257809	AssignmentExpression	i += 4		6257269	0		+=			
ANR	6257810	Identifier	i		6257269	0					
ANR	6257811	PrimaryExpression	4		6257269	1					
ANR	6257812	BreakStatement	break ;	2727:21:57334:57339	6257269	20	True				
ANR	6257813	Label	case 'x' :	2728:3:57344:57352	6257269	21	True				
ANR	6257814	ExpressionStatement	i += 4	2728:13:57354:57360	6257269	22	True				
ANR	6257815	AssignmentExpression	i += 4		6257269	0		+=			
ANR	6257816	Identifier	i		6257269	0					
ANR	6257817	PrimaryExpression	4		6257269	1					
ANR	6257818	BreakStatement	break ;	2728:21:57362:57367	6257269	23	True				
ANR	6257819	Label	case 'w' :	2729:3:57372:57380	6257269	24	True				
ANR	6257820	Label	case '1' :	2730:3:57385:57393	6257269	25	True				
ANR	6257821	ExpressionStatement	i += 2	2730:13:57395:57401	6257269	26	True				
ANR	6257822	AssignmentExpression	i += 2		6257269	0		+=			
ANR	6257823	Identifier	i		6257269	0					
ANR	6257824	PrimaryExpression	2		6257269	1					
ANR	6257825	BreakStatement	break ;	2730:21:57403:57408	6257269	27	True				
ANR	6257826	Label	case 'z' :	2731:3:57413:57421	6257269	28	True				
ANR	6257827	Label	case 'Z' :	2732:3:57445:57453	6257269	29	True				
ANR	6257828	BreakStatement	break ;	2733:4:57490:57495	6257269	30	True				
ANR	6257829	Label	case 's' :	2734:3:57500:57508	6257269	31	True				
ANR	6257830	ExpressionStatement	i += 4	2734:13:57510:57516	6257269	32	True				
ANR	6257831	AssignmentExpression	i += 4		6257269	0		+=			
ANR	6257832	Identifier	i		6257269	0					
ANR	6257833	PrimaryExpression	4		6257269	1					
ANR	6257834	BreakStatement	break ;	2734:21:57518:57523	6257269	33	True				
ANR	6257835	Label	case 'S' :	2735:3:57540:57548	6257269	34	True				
ANR	6257836	ExpressionStatement	i += 8	2735:13:57550:57556	6257269	35	True				
ANR	6257837	AssignmentExpression	i += 8		6257269	0		+=			
ANR	6257838	Identifier	i		6257269	0					
ANR	6257839	PrimaryExpression	8		6257269	1					
ANR	6257840	BreakStatement	break ;	2735:21:57558:57563	6257269	36	True				
ANR	6257841	Label	default :	2736:3:57580:57587	6257269	37	True				
ANR	6257842	Identifier	default		6257269	0					
ANR	6257843	BreakStatement	break ;	2738:4:57624:57629	6257269	38	True				
ANR	6257844	ExpressionStatement	last = tmp	2740:3:57639:57649	6257269	5	True				
ANR	6257845	AssignmentExpression	last = tmp		6257269	0		=			
ANR	6257846	Identifier	last		6257269	0					
ANR	6257847	Identifier	tmp		6257269	1					
ANR	6257848	ExpressionStatement	arg = orig	2742:2:57657:57667	6257269	3	True				
ANR	6257849	AssignmentExpression	arg = orig		6257269	0		=			
ANR	6257850	Identifier	arg		6257269	0					
ANR	6257851	Identifier	orig		6257269	1					
ANR	6257852	IfStatement	if ( args )		6257269	18					
ANR	6257853	Condition	args	2744:5:57677:57680	6257269	0	True				
ANR	6257854	Identifier	args		6257269	0					
ANR	6257855	CompoundStatement		123:11:2339:2339	6257269	1					
ANR	6257856	ExpressionStatement	free ( args )	2745:2:57687:57698	6257269	0	True				
ANR	6257857	CallExpression	free ( args )		6257269	0					
ANR	6257858	Callee	free		6257269	0					
ANR	6257859	Identifier	free		6257269	0					
ANR	6257860	ArgumentList	args		6257269	1					
ANR	6257861	Argument	args		6257269	0					
ANR	6257862	Identifier	args		6257269	0					
ANR	6257863	ReturnStatement	return i ;	2747:1:57704:57712	6257269	19	True				
ANR	6257864	Identifier	i		6257269	0					
ANR	6257865	ReturnType	R_API int		6257269	1					
ANR	6257866	Identifier	r_print_format_length		6257269	2					
ANR	6257867	ParameterList	const char * fmt		6257269	3					
ANR	6257868	Parameter	const char * fmt	2622:32:55326:55340	6257269	0	True				
ANR	6257869	ParameterType	const char *		6257269	0					
ANR	6257870	Identifier	fmt		6257269	1					
ANR	6257871	CFGEntryNode	ENTRY		6257269		True				
ANR	6257872	CFGExitNode	EXIT		6257269		True				
ANR	6257873	Symbol	namefmt		6257269						
ANR	6257874	Symbol	IS_WHITECHAR		6257269						
ANR	6257875	Symbol	strchr		6257269						
ANR	6257876	Symbol	fmt		6257269						
ANR	6257877	Symbol	r_str_word_set0		6257269						
ANR	6257878	Symbol	endian		6257269						
ANR	6257879	Symbol	r_num_math		6257269						
ANR	6257880	Symbol	strlen		6257269						
ANR	6257881	Symbol	times		6257269						
ANR	6257882	Symbol	len		6257269						
ANR	6257883	Symbol	tmp		6257269						
ANR	6257884	Symbol	arg		6257269						
ANR	6257885	Symbol	bracket		6257269						
ANR	6257886	Symbol	end		6257269						
ANR	6257887	Symbol	viewflags		6257269						
ANR	6257888	Symbol	atoi		6257269						
ANR	6257889	Symbol	NULL		6257269						
ANR	6257890	Symbol	last		6257269						
ANR	6257891	Symbol	i		6257269						
ANR	6257892	Symbol	j		6257269						
ANR	6257893	Symbol	r_str_word_get0		6257269						
ANR	6257894	Symbol	l		6257269						
ANR	6257895	Symbol	nargs		6257269						
ANR	6257896	Symbol	args		6257269						
ANR	6257897	Symbol	orig		6257269						
ANR	6257898	Symbol	argend		6257269						
ANR	6257899	Symbol	* end		6257269						
ANR	6257900	Symbol	maxl		6257269						
ANR	6257901	Symbol	strdup		6257269						
ANR	6257902	Symbol	idx		6257269						
ANR	6257903	Symbol	* arg		6257269						
ANR	6257904	Function	r_str_prefix_all	2750:0:57717:58308							
ANR	6257905	FunctionDef	"r_str_prefix_all (const char * s , const char * pfx)"		6257904	0					
ANR	6257906	CompoundStatement		2750:61:57778:58308	6257904	0					
ANR	6257907	IdentifierDeclStatement	const char * os = s ;	2751:1:57781:57799	6257904	0	True				
ANR	6257908	IdentifierDecl	* os = s		6257904	0					
ANR	6257909	IdentifierDeclType	const char *		6257904	0					
ANR	6257910	Identifier	os		6257904	1					
ANR	6257911	AssignmentExpression	* os = s		6257904	2		=			
ANR	6257912	Identifier	s		6257904	0					
ANR	6257913	Identifier	s		6257904	1					
ANR	6257914	IdentifierDeclStatement	char * p ;	2752:1:57802:57809	6257904	1	True				
ANR	6257915	IdentifierDecl	* p		6257904	0					
ANR	6257916	IdentifierDeclType	char *		6257904	0					
ANR	6257917	Identifier	p		6257904	1					
ANR	6257918	IdentifierDeclStatement	int newlines = 1 ;	2753:1:57812:57828	6257904	2	True				
ANR	6257919	IdentifierDecl	newlines = 1		6257904	0					
ANR	6257920	IdentifierDeclType	int		6257904	0					
ANR	6257921	Identifier	newlines		6257904	1					
ANR	6257922	AssignmentExpression	newlines = 1		6257904	2		=			
ANR	6257923	Identifier	newlines		6257904	0					
ANR	6257924	PrimaryExpression	1		6257904	1					
ANR	6257925	IdentifierDeclStatement	int len = 0 ;	2754:1:57831:57842	6257904	3	True				
ANR	6257926	IdentifierDecl	len = 0		6257904	0					
ANR	6257927	IdentifierDeclType	int		6257904	0					
ANR	6257928	Identifier	len		6257904	1					
ANR	6257929	AssignmentExpression	len = 0		6257904	2		=			
ANR	6257930	Identifier	len		6257904	0					
ANR	6257931	PrimaryExpression	0		6257904	1					
ANR	6257932	IdentifierDeclStatement	int pfx_len = 0 ;	2755:1:57845:57860	6257904	4	True				
ANR	6257933	IdentifierDecl	pfx_len = 0		6257904	0					
ANR	6257934	IdentifierDeclType	int		6257904	0					
ANR	6257935	Identifier	pfx_len		6257904	1					
ANR	6257936	AssignmentExpression	pfx_len = 0		6257904	2		=			
ANR	6257937	Identifier	pfx_len		6257904	0					
ANR	6257938	PrimaryExpression	0		6257904	1					
ANR	6257939	IfStatement	if ( ! s )		6257904	5					
ANR	6257940	Condition	! s	2757:5:57868:57869	6257904	0	True				
ANR	6257941	UnaryOperationExpression	! s		6257904	0					
ANR	6257942	UnaryOperator	!		6257904	0					
ANR	6257943	Identifier	s		6257904	1					
ANR	6257944	CompoundStatement		8:9:93:93	6257904	1					
ANR	6257945	ReturnStatement	return strdup ( pfx ) ;	2758:2:57876:57895	6257904	0	True				
ANR	6257946	CallExpression	strdup ( pfx )		6257904	0					
ANR	6257947	Callee	strdup		6257904	0					
ANR	6257948	Identifier	strdup		6257904	0					
ANR	6257949	ArgumentList	pfx		6257904	1					
ANR	6257950	Argument	pfx		6257904	0					
ANR	6257951	Identifier	pfx		6257904	0					
ANR	6257952	IfStatement	if ( ! pfx )		6257904	6					
ANR	6257953	Condition	! pfx	2760:5:57905:57908	6257904	0	True				
ANR	6257954	UnaryOperationExpression	! pfx		6257904	0					
ANR	6257955	UnaryOperator	!		6257904	0					
ANR	6257956	Identifier	pfx		6257904	1					
ANR	6257957	CompoundStatement		11:11:132:132	6257904	1					
ANR	6257958	ReturnStatement	return strdup ( s ) ;	2761:2:57915:57932	6257904	0	True				
ANR	6257959	CallExpression	strdup ( s )		6257904	0					
ANR	6257960	Callee	strdup		6257904	0					
ANR	6257961	Identifier	strdup		6257904	0					
ANR	6257962	ArgumentList	s		6257904	1					
ANR	6257963	Argument	s		6257904	0					
ANR	6257964	Identifier	s		6257904	0					
ANR	6257965	ExpressionStatement	len = strlen ( s )	2763:1:57938:57954	6257904	7	True				
ANR	6257966	AssignmentExpression	len = strlen ( s )		6257904	0		=			
ANR	6257967	Identifier	len		6257904	0					
ANR	6257968	CallExpression	strlen ( s )		6257904	1					
ANR	6257969	Callee	strlen		6257904	0					
ANR	6257970	Identifier	strlen		6257904	0					
ANR	6257971	ArgumentList	s		6257904	1					
ANR	6257972	Argument	s		6257904	0					
ANR	6257973	Identifier	s		6257904	0					
ANR	6257974	ExpressionStatement	pfx_len = strlen ( pfx )	2764:1:57957:57979	6257904	8	True				
ANR	6257975	AssignmentExpression	pfx_len = strlen ( pfx )		6257904	0		=			
ANR	6257976	Identifier	pfx_len		6257904	0					
ANR	6257977	CallExpression	strlen ( pfx )		6257904	1					
ANR	6257978	Callee	strlen		6257904	0					
ANR	6257979	Identifier	strlen		6257904	0					
ANR	6257980	ArgumentList	pfx		6257904	1					
ANR	6257981	Argument	pfx		6257904	0					
ANR	6257982	Identifier	pfx		6257904	0					
ANR	6257983	ForStatement	for ( os = s ; * os ; os ++ )		6257904	9					
ANR	6257984	ForInit	os = s ;	2765:6:57987:57993	6257904	0	True				
ANR	6257985	AssignmentExpression	os = s		6257904	0		=			
ANR	6257986	Identifier	os		6257904	0					
ANR	6257987	Identifier	s		6257904	1					
ANR	6257988	Condition	* os	2765:14:57995:57997	6257904	1	True				
ANR	6257989	UnaryOperationExpression	* os		6257904	0					
ANR	6257990	UnaryOperator	*		6257904	0					
ANR	6257991	Identifier	os		6257904	1					
ANR	6257992	PostIncDecOperationExpression	os ++	2765:19:58000:58003	6257904	2	True				
ANR	6257993	Identifier	os		6257904	0					
ANR	6257994	IncDec	++		6257904	1					
ANR	6257995	CompoundStatement		16:26:228:228	6257904	3					
ANR	6257996	IfStatement	if ( * os == '\\n' )		6257904	0					
ANR	6257997	Condition	* os == '\\n'	2766:6:58015:58025	6257904	0	True				
ANR	6257998	EqualityExpression	* os == '\\n'		6257904	0		==			
ANR	6257999	UnaryOperationExpression	* os		6257904	0					
ANR	6258000	UnaryOperator	*		6257904	0					
ANR	6258001	Identifier	os		6257904	1					
ANR	6258002	PrimaryExpression	'\\n'		6257904	1					
ANR	6258003	CompoundStatement		17:19:249:249	6257904	1					
ANR	6258004	ExpressionStatement	newlines ++	2767:3:58033:58043	6257904	0	True				
ANR	6258005	PostIncDecOperationExpression	newlines ++		6257904	0					
ANR	6258006	Identifier	newlines		6257904	0					
ANR	6258007	IncDec	++		6257904	1					
ANR	6258008	IdentifierDeclStatement	char * o = malloc ( len + ( pfx_len * newlines ) + 1 ) ;	2770:1:58053:58102	6257904	10	True				
ANR	6258009	IdentifierDecl	* o = malloc ( len + ( pfx_len * newlines ) + 1 )		6257904	0					
ANR	6258010	IdentifierDeclType	char *		6257904	0					
ANR	6258011	Identifier	o		6257904	1					
ANR	6258012	AssignmentExpression	* o = malloc ( len + ( pfx_len * newlines ) + 1 )		6257904	2		=			
ANR	6258013	Identifier	o		6257904	0					
ANR	6258014	CallExpression	malloc ( len + ( pfx_len * newlines ) + 1 )		6257904	1					
ANR	6258015	Callee	malloc		6257904	0					
ANR	6258016	Identifier	malloc		6257904	0					
ANR	6258017	ArgumentList	len + ( pfx_len * newlines ) + 1		6257904	1					
ANR	6258018	Argument	len + ( pfx_len * newlines ) + 1		6257904	0					
ANR	6258019	AdditiveExpression	len + ( pfx_len * newlines ) + 1		6257904	0		+			
ANR	6258020	Identifier	len		6257904	0					
ANR	6258021	AdditiveExpression	( pfx_len * newlines ) + 1		6257904	1		+			
ANR	6258022	MultiplicativeExpression	pfx_len * newlines		6257904	0		*			
ANR	6258023	Identifier	pfx_len		6257904	0					
ANR	6258024	Identifier	newlines		6257904	1					
ANR	6258025	PrimaryExpression	1		6257904	1					
ANR	6258026	IfStatement	if ( ! o )		6257904	11					
ANR	6258027	Condition	! o	2771:5:58109:58110	6257904	0	True				
ANR	6258028	UnaryOperationExpression	! o		6257904	0					
ANR	6258029	UnaryOperator	!		6257904	0					
ANR	6258030	Identifier	o		6257904	1					
ANR	6258031	CompoundStatement		22:9:334:334	6257904	1					
ANR	6258032	ReturnStatement	return NULL ;	2772:2:58117:58128	6257904	0	True				
ANR	6258033	Identifier	NULL		6257904	0					
ANR	6258034	ExpressionStatement	"memcpy ( o , pfx , pfx_len )"	2774:1:58134:58158	6257904	12	True				
ANR	6258035	CallExpression	"memcpy ( o , pfx , pfx_len )"		6257904	0					
ANR	6258036	Callee	memcpy		6257904	0					
ANR	6258037	Identifier	memcpy		6257904	0					
ANR	6258038	ArgumentList	o		6257904	1					
ANR	6258039	Argument	o		6257904	0					
ANR	6258040	Identifier	o		6257904	0					
ANR	6258041	Argument	pfx		6257904	1					
ANR	6258042	Identifier	pfx		6257904	0					
ANR	6258043	Argument	pfx_len		6257904	2					
ANR	6258044	Identifier	pfx_len		6257904	0					
ANR	6258045	ForStatement	for ( p = o + pfx_len ; * s ; s ++ )		6257904	13					
ANR	6258046	ForInit	p = o + pfx_len ;	2775:6:58166:58181	6257904	0	True				
ANR	6258047	AssignmentExpression	p = o + pfx_len		6257904	0		=			
ANR	6258048	Identifier	p		6257904	0					
ANR	6258049	AdditiveExpression	o + pfx_len		6257904	1		+			
ANR	6258050	Identifier	o		6257904	0					
ANR	6258051	Identifier	pfx_len		6257904	1					
ANR	6258052	Condition	* s	2775:23:58183:58184	6257904	1	True				
ANR	6258053	UnaryOperationExpression	* s		6257904	0					
ANR	6258054	UnaryOperator	*		6257904	0					
ANR	6258055	Identifier	s		6257904	1					
ANR	6258056	PostIncDecOperationExpression	s ++	2775:27:58187:58189	6257904	2	True				
ANR	6258057	Identifier	s		6257904	0					
ANR	6258058	IncDec	++		6257904	1					
ANR	6258059	CompoundStatement		26:32:413:413	6257904	3					
ANR	6258060	ExpressionStatement	* p ++ = * s	2776:2:58196:58205	6257904	0	True				
ANR	6258061	AssignmentExpression	* p ++ = * s		6257904	0		=			
ANR	6258062	UnaryOperationExpression	* p ++		6257904	0					
ANR	6258063	UnaryOperator	*		6257904	0					
ANR	6258064	PostIncDecOperationExpression	p ++		6257904	1					
ANR	6258065	Identifier	p		6257904	0					
ANR	6258066	IncDec	++		6257904	1					
ANR	6258067	UnaryOperationExpression	* s		6257904	1					
ANR	6258068	UnaryOperator	*		6257904	0					
ANR	6258069	Identifier	s		6257904	1					
ANR	6258070	IfStatement	if ( * s == '\\n' && s [ 1 ] )		6257904	1					
ANR	6258071	Condition	* s == '\\n' && s [ 1 ]	2777:6:58213:58230	6257904	0	True				
ANR	6258072	AndExpression	* s == '\\n' && s [ 1 ]		6257904	0		&&			
ANR	6258073	EqualityExpression	* s == '\\n'		6257904	0		==			
ANR	6258074	UnaryOperationExpression	* s		6257904	0					
ANR	6258075	UnaryOperator	*		6257904	0					
ANR	6258076	Identifier	s		6257904	1					
ANR	6258077	PrimaryExpression	'\\n'		6257904	1					
ANR	6258078	ArrayIndexing	s [ 1 ]		6257904	1					
ANR	6258079	Identifier	s		6257904	0					
ANR	6258080	PrimaryExpression	1		6257904	1					
ANR	6258081	CompoundStatement		28:26:454:454	6257904	1					
ANR	6258082	ExpressionStatement	"memcpy ( p , pfx , pfx_len )"	2778:3:58238:58262	6257904	0	True				
ANR	6258083	CallExpression	"memcpy ( p , pfx , pfx_len )"		6257904	0					
ANR	6258084	Callee	memcpy		6257904	0					
ANR	6258085	Identifier	memcpy		6257904	0					
ANR	6258086	ArgumentList	p		6257904	1					
ANR	6258087	Argument	p		6257904	0					
ANR	6258088	Identifier	p		6257904	0					
ANR	6258089	Argument	pfx		6257904	1					
ANR	6258090	Identifier	pfx		6257904	0					
ANR	6258091	Argument	pfx_len		6257904	2					
ANR	6258092	Identifier	pfx_len		6257904	0					
ANR	6258093	ExpressionStatement	p += pfx_len	2779:3:58267:58279	6257904	1	True				
ANR	6258094	AssignmentExpression	p += pfx_len		6257904	0		+=			
ANR	6258095	Identifier	p		6257904	0					
ANR	6258096	Identifier	pfx_len		6257904	1					
ANR	6258097	ExpressionStatement	* p = 0	2782:1:58289:58295	6257904	14	True				
ANR	6258098	AssignmentExpression	* p = 0		6257904	0		=			
ANR	6258099	UnaryOperationExpression	* p		6257904	0					
ANR	6258100	UnaryOperator	*		6257904	0					
ANR	6258101	Identifier	p		6257904	1					
ANR	6258102	PrimaryExpression	0		6257904	1					
ANR	6258103	ReturnStatement	return o ;	2783:1:58298:58306	6257904	15	True				
ANR	6258104	Identifier	o		6257904	0					
ANR	6258105	ReturnType	R_API char *		6257904	1					
ANR	6258106	Identifier	r_str_prefix_all		6257904	2					
ANR	6258107	ParameterList	"const char * s , const char * pfx"		6257904	3					
ANR	6258108	Parameter	const char * s	2750:29:57746:57758	6257904	0	True				
ANR	6258109	ParameterType	const char *		6257904	0					
ANR	6258110	Identifier	s		6257904	1					
ANR	6258111	Parameter	const char * pfx	2750:44:57761:57775	6257904	1	True				
ANR	6258112	ParameterType	const char *		6257904	0					
ANR	6258113	Identifier	pfx		6257904	1					
ANR	6258114	CFGEntryNode	ENTRY		6257904		True				
ANR	6258115	CFGExitNode	EXIT		6257904		True				
ANR	6258116	Symbol	malloc		6257904						
ANR	6258117	Symbol	pfx		6257904						
ANR	6258118	Symbol	NULL		6257904						
ANR	6258119	Symbol	os		6257904						
ANR	6258120	Symbol	* p ++		6257904						
ANR	6258121	Symbol	pfx_len		6257904						
ANR	6258122	Symbol	* os		6257904						
ANR	6258123	Symbol	o		6257904						
ANR	6258124	Symbol	p		6257904						
ANR	6258125	Symbol	strlen		6257904						
ANR	6258126	Symbol	s		6257904						
ANR	6258127	Symbol	len		6257904						
ANR	6258128	Symbol	newlines		6257904						
ANR	6258129	Symbol	* p		6257904						
ANR	6258130	Symbol	strdup		6257904						
ANR	6258131	Symbol	* s		6257904						
ANR	6258132	Function	r_str_contains_macro	2788:0:58380:59017							
ANR	6258133	FunctionDef	r_str_contains_macro (const char * input_value)		6258132	0					
ANR	6258134	CompoundStatement		2788:56:58436:59017	6258132	0					
ANR	6258135	IdentifierDeclStatement	"char * has_tilde = input_value ? HASCH ( '~' ) : NULL , * has_bang = input_value ? HASCH ( '!' ) : NULL , * has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL , * has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL , * has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL , * has_qmark = input_value ? HASCH ( '?' ) : NULL , * has_colon = input_value ? HASCH ( ':' ) : NULL , * has_at = input_value ? strchr ( input_value , '@' ) : NULL ;"	2789:1:58439:58903	6258132	0	True				
ANR	6258136	IdentifierDecl	* has_tilde = input_value ? HASCH ( '~' ) : NULL		6258132	0					
ANR	6258137	IdentifierDeclType	char *		6258132	0					
ANR	6258138	Identifier	has_tilde		6258132	1					
ANR	6258139	AssignmentExpression	* has_tilde = input_value ? HASCH ( '~' ) : NULL		6258132	2		=			
ANR	6258140	Identifier	has_tilde		6258132	0					
ANR	6258141	ConditionalExpression	input_value ? HASCH ( '~' ) : NULL		6258132	1					
ANR	6258142	Condition	input_value		6258132	0					
ANR	6258143	Identifier	input_value		6258132	0					
ANR	6258144	CallExpression	HASCH ( '~' )		6258132	1					
ANR	6258145	Callee	HASCH		6258132	0					
ANR	6258146	Identifier	HASCH		6258132	0					
ANR	6258147	ArgumentList	'~'		6258132	1					
ANR	6258148	Argument	'~'		6258132	0					
ANR	6258149	PrimaryExpression	'~'		6258132	0					
ANR	6258150	Identifier	NULL		6258132	2					
ANR	6258151	IdentifierDecl	* has_bang = input_value ? HASCH ( '!' ) : NULL		6258132	1					
ANR	6258152	IdentifierDeclType	char *		6258132	0					
ANR	6258153	Identifier	has_bang		6258132	1					
ANR	6258154	AssignmentExpression	* has_bang = input_value ? HASCH ( '!' ) : NULL		6258132	2		=			
ANR	6258155	Identifier	has_bang		6258132	0					
ANR	6258156	ConditionalExpression	input_value ? HASCH ( '!' ) : NULL		6258132	1					
ANR	6258157	Condition	input_value		6258132	0					
ANR	6258158	Identifier	input_value		6258132	0					
ANR	6258159	CallExpression	HASCH ( '!' )		6258132	1					
ANR	6258160	Callee	HASCH		6258132	0					
ANR	6258161	Identifier	HASCH		6258132	0					
ANR	6258162	ArgumentList	'!'		6258132	1					
ANR	6258163	Argument	'!'		6258132	0					
ANR	6258164	PrimaryExpression	'!'		6258132	0					
ANR	6258165	Identifier	NULL		6258132	2					
ANR	6258166	IdentifierDecl	* has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		6258132	2					
ANR	6258167	IdentifierDeclType	char *		6258132	0					
ANR	6258168	Identifier	has_brace		6258132	1					
ANR	6258169	AssignmentExpression	* has_brace = input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		6258132	2		=			
ANR	6258170	Identifier	has_brace		6258132	0					
ANR	6258171	ConditionalExpression	input_value ? CAST ( HASCH ( '[' ) || HASCH ( ']' ) ) : NULL		6258132	1					
ANR	6258172	Condition	input_value		6258132	0					
ANR	6258173	Identifier	input_value		6258132	0					
ANR	6258174	CallExpression	CAST ( HASCH ( '[' ) || HASCH ( ']' ) )		6258132	1					
ANR	6258175	Callee	CAST		6258132	0					
ANR	6258176	Identifier	CAST		6258132	0					
ANR	6258177	ArgumentList	HASCH ( '[' ) || HASCH ( ']' )		6258132	1					
ANR	6258178	Argument	HASCH ( '[' ) || HASCH ( ']' )		6258132	0					
ANR	6258179	OrExpression	HASCH ( '[' ) || HASCH ( ']' )		6258132	0		||			
ANR	6258180	CallExpression	HASCH ( '[' )		6258132	0					
ANR	6258181	Callee	HASCH		6258132	0					
ANR	6258182	Identifier	HASCH		6258132	0					
ANR	6258183	ArgumentList	'['		6258132	1					
ANR	6258184	Argument	'['		6258132	0					
ANR	6258185	PrimaryExpression	'['		6258132	0					
ANR	6258186	CallExpression	HASCH ( ']' )		6258132	1					
ANR	6258187	Callee	HASCH		6258132	0					
ANR	6258188	Identifier	HASCH		6258132	0					
ANR	6258189	ArgumentList	']'		6258132	1					
ANR	6258190	Argument	']'		6258132	0					
ANR	6258191	PrimaryExpression	']'		6258132	0					
ANR	6258192	Identifier	NULL		6258132	2					
ANR	6258193	IdentifierDecl	* has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		6258132	3					
ANR	6258194	IdentifierDeclType	char *		6258132	0					
ANR	6258195	Identifier	has_paren		6258132	1					
ANR	6258196	AssignmentExpression	* has_paren = input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		6258132	2		=			
ANR	6258197	Identifier	has_paren		6258132	0					
ANR	6258198	ConditionalExpression	input_value ? CAST ( HASCH ( '(' ) || HASCH ( ')' ) ) : NULL		6258132	1					
ANR	6258199	Condition	input_value		6258132	0					
ANR	6258200	Identifier	input_value		6258132	0					
ANR	6258201	CallExpression	CAST ( HASCH ( '(' ) || HASCH ( ')' ) )		6258132	1					
ANR	6258202	Callee	CAST		6258132	0					
ANR	6258203	Identifier	CAST		6258132	0					
ANR	6258204	ArgumentList	HASCH ( '(' ) || HASCH ( ')' )		6258132	1					
ANR	6258205	Argument	HASCH ( '(' ) || HASCH ( ')' )		6258132	0					
ANR	6258206	OrExpression	HASCH ( '(' ) || HASCH ( ')' )		6258132	0		||			
ANR	6258207	CallExpression	HASCH ( '(' )		6258132	0					
ANR	6258208	Callee	HASCH		6258132	0					
ANR	6258209	Identifier	HASCH		6258132	0					
ANR	6258210	ArgumentList	'('		6258132	1					
ANR	6258211	Argument	'('		6258132	0					
ANR	6258212	PrimaryExpression	'('		6258132	0					
ANR	6258213	CallExpression	HASCH ( ')' )		6258132	1					
ANR	6258214	Callee	HASCH		6258132	0					
ANR	6258215	Identifier	HASCH		6258132	0					
ANR	6258216	ArgumentList	')'		6258132	1					
ANR	6258217	Argument	')'		6258132	0					
ANR	6258218	PrimaryExpression	')'		6258132	0					
ANR	6258219	Identifier	NULL		6258132	2					
ANR	6258220	IdentifierDecl	* has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		6258132	4					
ANR	6258221	IdentifierDeclType	char *		6258132	0					
ANR	6258222	Identifier	has_cbrace		6258132	1					
ANR	6258223	AssignmentExpression	* has_cbrace = input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		6258132	2		=			
ANR	6258224	Identifier	has_cbrace		6258132	0					
ANR	6258225	ConditionalExpression	input_value ? CAST ( HASCH ( '{' ) || HASCH ( '}' ) ) : NULL		6258132	1					
ANR	6258226	Condition	input_value		6258132	0					
ANR	6258227	Identifier	input_value		6258132	0					
ANR	6258228	CallExpression	CAST ( HASCH ( '{' ) || HASCH ( '}' ) )		6258132	1					
ANR	6258229	Callee	CAST		6258132	0					
ANR	6258230	Identifier	CAST		6258132	0					
ANR	6258231	ArgumentList	HASCH ( '{' ) || HASCH ( '}' )		6258132	1					
ANR	6258232	Argument	HASCH ( '{' ) || HASCH ( '}' )		6258132	0					
ANR	6258233	OrExpression	HASCH ( '{' ) || HASCH ( '}' )		6258132	0		||			
ANR	6258234	CallExpression	HASCH ( '{' )		6258132	0					
ANR	6258235	Callee	HASCH		6258132	0					
ANR	6258236	Identifier	HASCH		6258132	0					
ANR	6258237	ArgumentList	'{'		6258132	1					
ANR	6258238	Argument	'{'		6258132	0					
ANR	6258239	PrimaryExpression	'{'		6258132	0					
ANR	6258240	CallExpression	HASCH ( '}' )		6258132	1					
ANR	6258241	Callee	HASCH		6258132	0					
ANR	6258242	Identifier	HASCH		6258132	0					
ANR	6258243	ArgumentList	'}'		6258132	1					
ANR	6258244	Argument	'}'		6258132	0					
ANR	6258245	PrimaryExpression	'}'		6258132	0					
ANR	6258246	Identifier	NULL		6258132	2					
ANR	6258247	IdentifierDecl	* has_qmark = input_value ? HASCH ( '?' ) : NULL		6258132	5					
ANR	6258248	IdentifierDeclType	char *		6258132	0					
ANR	6258249	Identifier	has_qmark		6258132	1					
ANR	6258250	AssignmentExpression	* has_qmark = input_value ? HASCH ( '?' ) : NULL		6258132	2		=			
ANR	6258251	Identifier	has_qmark		6258132	0					
ANR	6258252	ConditionalExpression	input_value ? HASCH ( '?' ) : NULL		6258132	1					
ANR	6258253	Condition	input_value		6258132	0					
ANR	6258254	Identifier	input_value		6258132	0					
ANR	6258255	CallExpression	HASCH ( '?' )		6258132	1					
ANR	6258256	Callee	HASCH		6258132	0					
ANR	6258257	Identifier	HASCH		6258132	0					
ANR	6258258	ArgumentList	'?'		6258132	1					
ANR	6258259	Argument	'?'		6258132	0					
ANR	6258260	PrimaryExpression	'?'		6258132	0					
ANR	6258261	Identifier	NULL		6258132	2					
ANR	6258262	IdentifierDecl	* has_colon = input_value ? HASCH ( ':' ) : NULL		6258132	6					
ANR	6258263	IdentifierDeclType	char *		6258132	0					
ANR	6258264	Identifier	has_colon		6258132	1					
ANR	6258265	AssignmentExpression	* has_colon = input_value ? HASCH ( ':' ) : NULL		6258132	2		=			
ANR	6258266	Identifier	has_colon		6258132	0					
ANR	6258267	ConditionalExpression	input_value ? HASCH ( ':' ) : NULL		6258132	1					
ANR	6258268	Condition	input_value		6258132	0					
ANR	6258269	Identifier	input_value		6258132	0					
ANR	6258270	CallExpression	HASCH ( ':' )		6258132	1					
ANR	6258271	Callee	HASCH		6258132	0					
ANR	6258272	Identifier	HASCH		6258132	0					
ANR	6258273	ArgumentList	':'		6258132	1					
ANR	6258274	Argument	':'		6258132	0					
ANR	6258275	PrimaryExpression	':'		6258132	0					
ANR	6258276	Identifier	NULL		6258132	2					
ANR	6258277	IdentifierDecl	"* has_at = input_value ? strchr ( input_value , '@' ) : NULL"		6258132	7					
ANR	6258278	IdentifierDeclType	char *		6258132	0					
ANR	6258279	Identifier	has_at		6258132	1					
ANR	6258280	AssignmentExpression	"* has_at = input_value ? strchr ( input_value , '@' ) : NULL"		6258132	2		=			
ANR	6258281	Identifier	has_at		6258132	0					
ANR	6258282	ConditionalExpression	"input_value ? strchr ( input_value , '@' ) : NULL"		6258132	1					
ANR	6258283	Condition	input_value		6258132	0					
ANR	6258284	Identifier	input_value		6258132	0					
ANR	6258285	CallExpression	"strchr ( input_value , '@' )"		6258132	1					
ANR	6258286	Callee	strchr		6258132	0					
ANR	6258287	Identifier	strchr		6258132	0					
ANR	6258288	ArgumentList	input_value		6258132	1					
ANR	6258289	Argument	input_value		6258132	0					
ANR	6258290	Identifier	input_value		6258132	0					
ANR	6258291	Argument	'@'		6258132	1					
ANR	6258292	PrimaryExpression	'@'		6258132	0					
ANR	6258293	Identifier	NULL		6258132	2					
ANR	6258294	ReturnStatement	return has_tilde || has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at ;	2798:1:58907:59015	6258132	1	True				
ANR	6258295	OrExpression	has_tilde || has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		6258132	0		||			
ANR	6258296	Identifier	has_tilde		6258132	0					
ANR	6258297	OrExpression	has_bang || has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		6258132	1		||			
ANR	6258298	Identifier	has_bang		6258132	0					
ANR	6258299	OrExpression	has_brace || has_cbrace || has_qmark || has_paren || has_colon || has_at		6258132	1		||			
ANR	6258300	Identifier	has_brace		6258132	0					
ANR	6258301	OrExpression	has_cbrace || has_qmark || has_paren || has_colon || has_at		6258132	1		||			
ANR	6258302	Identifier	has_cbrace		6258132	0					
ANR	6258303	OrExpression	has_qmark || has_paren || has_colon || has_at		6258132	1		||			
ANR	6258304	Identifier	has_qmark		6258132	0					
ANR	6258305	OrExpression	has_paren || has_colon || has_at		6258132	1		||			
ANR	6258306	Identifier	has_paren		6258132	0					
ANR	6258307	OrExpression	has_colon || has_at		6258132	1		||			
ANR	6258308	Identifier	has_colon		6258132	0					
ANR	6258309	Identifier	has_at		6258132	1					
ANR	6258310	ReturnType	R_API ut8		6258132	1					
ANR	6258311	Identifier	r_str_contains_macro		6258132	2					
ANR	6258312	ParameterList	const char * input_value		6258132	3					
ANR	6258313	Parameter	const char * input_value	2788:31:58411:58433	6258132	0	True				
ANR	6258314	ParameterType	const char *		6258132	0					
ANR	6258315	Identifier	input_value		6258132	1					
ANR	6258316	CFGEntryNode	ENTRY		6258132		True				
ANR	6258317	CFGExitNode	EXIT		6258132		True				
ANR	6258318	Symbol	CAST		6258132						
ANR	6258319	Symbol	has_bang		6258132						
ANR	6258320	Symbol	NULL		6258132						
ANR	6258321	Symbol	has_paren		6258132						
ANR	6258322	Symbol	strchr		6258132						
ANR	6258323	Symbol	HASCH		6258132						
ANR	6258324	Symbol	has_qmark		6258132						
ANR	6258325	Symbol	has_brace		6258132						
ANR	6258326	Symbol	input_value		6258132						
ANR	6258327	Symbol	has_tilde		6258132						
ANR	6258328	Symbol	has_cbrace		6258132						
ANR	6258329	Symbol	has_colon		6258132						
ANR	6258330	Symbol	has_at		6258132						
ANR	6258331	Function	r_str_truncate_cmd	2802:0:59020:59362							
ANR	6258332	FunctionDef	r_str_truncate_cmd (char * string)		6258331	0					
ANR	6258333	CompoundStatement		2802:44:59064:59362	6258331	0					
ANR	6258334	IdentifierDeclStatement	ut32 pos = 0 ;	2803:1:59067:59079	6258331	0	True				
ANR	6258335	IdentifierDecl	pos = 0		6258331	0					
ANR	6258336	IdentifierDeclType	ut32		6258331	0					
ANR	6258337	Identifier	pos		6258331	1					
ANR	6258338	AssignmentExpression	pos = 0		6258331	2		=			
ANR	6258339	Identifier	pos		6258331	0					
ANR	6258340	PrimaryExpression	0		6258331	1					
ANR	6258341	IfStatement	if ( string && * string )		6258331	1					
ANR	6258342	Condition	string && * string	2804:5:59086:59102	6258331	0	True				
ANR	6258343	AndExpression	string && * string		6258331	0		&&			
ANR	6258344	Identifier	string		6258331	0					
ANR	6258345	UnaryOperationExpression	* string		6258331	1					
ANR	6258346	UnaryOperator	*		6258331	0					
ANR	6258347	Identifier	string		6258331	1					
ANR	6258348	CompoundStatement		4:2:44:69	6258331	1					
ANR	6258349	IdentifierDeclStatement	ut32 sz = strlen ( string ) ;	2805:2:59109:59134	6258331	0	True				
ANR	6258350	IdentifierDecl	sz = strlen ( string )		6258331	0					
ANR	6258351	IdentifierDeclType	ut32		6258331	0					
ANR	6258352	Identifier	sz		6258331	1					
ANR	6258353	AssignmentExpression	sz = strlen ( string )		6258331	2		=			
ANR	6258354	Identifier	sz		6258331	0					
ANR	6258355	CallExpression	strlen ( string )		6258331	1					
ANR	6258356	Callee	strlen		6258331	0					
ANR	6258357	Identifier	strlen		6258331	0					
ANR	6258358	ArgumentList	string		6258331	1					
ANR	6258359	Argument	string		6258331	0					
ANR	6258360	Identifier	string		6258331	0					
ANR	6258361	ForStatement	for ( pos = 0 ; pos < sz ; pos ++ )		6258331	1					
ANR	6258362	ForInit	pos = 0 ;	2806:7:59143:59150	6258331	0	True				
ANR	6258363	AssignmentExpression	pos = 0		6258331	0		=			
ANR	6258364	Identifier	pos		6258331	0					
ANR	6258365	PrimaryExpression	0		6258331	1					
ANR	6258366	Condition	pos < sz	2806:16:59152:59159	6258331	1	True				
ANR	6258367	RelationalExpression	pos < sz		6258331	0		<			
ANR	6258368	Identifier	pos		6258331	0					
ANR	6258369	Identifier	sz		6258331	1					
ANR	6258370	PostIncDecOperationExpression	pos ++	2806:26:59162:59166	6258331	2	True				
ANR	6258371	Identifier	pos		6258331	0					
ANR	6258372	IncDec	++		6258331	1					
ANR	6258373	CompoundStatement		5:33:104:104	6258331	3					
ANR	6258374	SwitchStatement	switch ( string [ pos ] )		6258331	0					
ANR	6258375	Condition	string [ pos ]	2807:11:59182:59192	6258331	0	True				
ANR	6258376	ArrayIndexing	string [ pos ]		6258331	0					
ANR	6258377	Identifier	string		6258331	0					
ANR	6258378	Identifier	pos		6258331	1					
ANR	6258379	CompoundStatement		6:24:130:130	6258331	1					
ANR	6258380	Label	case '!' :	2808:3:59200:59208	6258331	0	True				
ANR	6258381	Label	case ':' :	2809:3:59213:59221	6258331	1	True				
ANR	6258382	Label	case ';' :	2810:3:59226:59234	6258331	2	True				
ANR	6258383	Label	case '@' :	2811:3:59239:59247	6258331	3	True				
ANR	6258384	Label	case '~' :	2812:3:59252:59260	6258331	4	True				
ANR	6258385	Label	case '(' :	2813:3:59265:59273	6258331	5	True				
ANR	6258386	Label	case '[' :	2814:3:59278:59286	6258331	6	True				
ANR	6258387	Label	case '{' :	2815:3:59291:59299	6258331	7	True				
ANR	6258388	Label	case '?' :	2816:3:59304:59312	6258331	8	True				
ANR	6258389	ExpressionStatement	string [ pos ] = '\\0'	2817:4:59318:59336	6258331	9	True				
ANR	6258390	AssignmentExpression	string [ pos ] = '\\0'		6258331	0		=			
ANR	6258391	ArrayIndexing	string [ pos ]		6258331	0					
ANR	6258392	Identifier	string		6258331	0					
ANR	6258393	Identifier	pos		6258331	1					
ANR	6258394	PrimaryExpression	'\\0'		6258331	1					
ANR	6258395	ReturnStatement	return ;	2818:4:59342:59348	6258331	10	True				
ANR	6258396	ReturnType	R_API void		6258331	1					
ANR	6258397	Identifier	r_str_truncate_cmd		6258331	2					
ANR	6258398	ParameterList	char * string		6258331	3					
ANR	6258399	Parameter	char * string	2802:30:59050:59061	6258331	0	True				
ANR	6258400	ParameterType	char *		6258331	0					
ANR	6258401	Identifier	string		6258331	1					
ANR	6258402	CFGEntryNode	ENTRY		6258331		True				
ANR	6258403	CFGExitNode	EXIT		6258331		True				
ANR	6258404	Symbol	strlen		6258331						
ANR	6258405	Symbol	string		6258331						
ANR	6258406	Symbol	pos		6258331						
ANR	6258407	Symbol	sz		6258331						
ANR	6258408	Symbol	* string		6258331						
ANR	6258409	Symbol	* pos		6258331						
ANR	6258410	Function	r_str_closer_chr	2824:6:59371:59553							
ANR	6258411	FunctionDef	"r_str_closer_chr (const char * b , const char * s)"		6258410	0					
ANR	6258412	CompoundStatement		2824:65:59430:59553	6258410	0					
ANR	6258413	IdentifierDeclStatement	const char * a ;	2825:1:59433:59446	6258410	0	True				
ANR	6258414	IdentifierDecl	* a		6258410	0					
ANR	6258415	IdentifierDeclType	const char *		6258410	0					
ANR	6258416	Identifier	a		6258410	1					
ANR	6258417	WhileStatement	while ( * b )		6258410	1					
ANR	6258418	Condition	* b	2826:8:59456:59457	6258410	0	True				
ANR	6258419	UnaryOperationExpression	* b		6258410	0					
ANR	6258420	UnaryOperator	*		6258410	0					
ANR	6258421	Identifier	b		6258410	1					
ANR	6258422	CompoundStatement		3:12:29:29	6258410	1					
ANR	6258423	ForStatement	for ( a = s ; * a ; a ++ )		6258410	0					
ANR	6258424	ForInit	a = s ;	2827:7:59469:59474	6258410	0	True				
ANR	6258425	AssignmentExpression	a = s		6258410	0		=			
ANR	6258426	Identifier	a		6258410	0					
ANR	6258427	Identifier	s		6258410	1					
ANR	6258428	Condition	* a	2827:14:59476:59477	6258410	1	True				
ANR	6258429	UnaryOperationExpression	* a		6258410	0					
ANR	6258430	UnaryOperator	*		6258410	0					
ANR	6258431	Identifier	a		6258410	1					
ANR	6258432	PostIncDecOperationExpression	a ++	2827:18:59480:59482	6258410	2	True				
ANR	6258433	Identifier	a		6258410	0					
ANR	6258434	IncDec	++		6258410	1					
ANR	6258435	CompoundStatement		4:23:54:54	6258410	3					
ANR	6258436	IfStatement	if ( * b == * a )		6258410	0					
ANR	6258437	Condition	* b == * a	2828:7:59494:59501	6258410	0	True				
ANR	6258438	EqualityExpression	* b == * a		6258410	0		==			
ANR	6258439	UnaryOperationExpression	* b		6258410	0					
ANR	6258440	UnaryOperator	*		6258410	0					
ANR	6258441	Identifier	b		6258410	1					
ANR	6258442	UnaryOperationExpression	* a		6258410	1					
ANR	6258443	UnaryOperator	*		6258410	0					
ANR	6258444	Identifier	a		6258410	1					
ANR	6258445	CompoundStatement		5:17:73:73	6258410	1					
ANR	6258446	ReturnStatement	return b ;	2829:4:59510:59518	6258410	0	True				
ANR	6258447	Identifier	b		6258410	0					
ANR	6258448	ExpressionStatement	b ++	2832:2:59531:59534	6258410	1	True				
ANR	6258449	PostIncDecOperationExpression	b ++		6258410	0					
ANR	6258450	Identifier	b		6258410	0					
ANR	6258451	IncDec	++		6258410	1					
ANR	6258452	ReturnStatement	return NULL ;	2834:1:59540:59551	6258410	2	True				
ANR	6258453	Identifier	NULL		6258410	0					
ANR	6258454	ReturnType	const char *		6258410	1					
ANR	6258455	Identifier	r_str_closer_chr		6258410	2					
ANR	6258456	ParameterList	"const char * b , const char * s"		6258410	3					
ANR	6258457	Parameter	const char * b	2824:35:59400:59412	6258410	0	True				
ANR	6258458	ParameterType	const char *		6258410	0					
ANR	6258459	Identifier	b		6258410	1					
ANR	6258460	Parameter	const char * s	2824:50:59415:59427	6258410	1	True				
ANR	6258461	ParameterType	const char *		6258410	0					
ANR	6258462	Identifier	s		6258410	1					
ANR	6258463	CFGEntryNode	ENTRY		6258410		True				
ANR	6258464	CFGExitNode	EXIT		6258410		True				
ANR	6258465	Symbol	a		6258410						
ANR	6258466	Symbol	b		6258410						
ANR	6258467	Symbol	s		6258410						
ANR	6258468	Symbol	NULL		6258410						
ANR	6258469	Symbol	* a		6258410						
ANR	6258470	Symbol	* b		6258410						
ANR	6258471	Function	r_str_bounds	2837:0:59556:59989							
ANR	6258472	FunctionDef	"r_str_bounds (const char * _str , int * h)"		6258471	0					
ANR	6258473	CompoundStatement		2837:49:59605:59989	6258471	0					
ANR	6258474	IdentifierDeclStatement	"const char * str , * ptr ;"	2838:1:59608:59629	6258471	0	True				
ANR	6258475	IdentifierDecl	* str		6258471	0					
ANR	6258476	IdentifierDeclType	const char *		6258471	0					
ANR	6258477	Identifier	str		6258471	1					
ANR	6258478	IdentifierDecl	* ptr		6258471	1					
ANR	6258479	IdentifierDeclType	const char *		6258471	0					
ANR	6258480	Identifier	ptr		6258471	1					
ANR	6258481	IdentifierDeclStatement	"int W = 0 , H = 0 ;"	2839:1:59632:59648	6258471	1	True				
ANR	6258482	IdentifierDecl	W = 0		6258471	0					
ANR	6258483	IdentifierDeclType	int		6258471	0					
ANR	6258484	Identifier	W		6258471	1					
ANR	6258485	AssignmentExpression	W = 0		6258471	2		=			
ANR	6258486	Identifier	W		6258471	0					
ANR	6258487	PrimaryExpression	0		6258471	1					
ANR	6258488	IdentifierDecl	H = 0		6258471	1					
ANR	6258489	IdentifierDeclType	int		6258471	0					
ANR	6258490	Identifier	H		6258471	1					
ANR	6258491	AssignmentExpression	H = 0		6258471	2		=			
ANR	6258492	Identifier	H		6258471	0					
ANR	6258493	PrimaryExpression	0		6258471	1					
ANR	6258494	IdentifierDeclStatement	int cw = 0 ;	2840:1:59651:59661	6258471	2	True				
ANR	6258495	IdentifierDecl	cw = 0		6258471	0					
ANR	6258496	IdentifierDeclType	int		6258471	0					
ANR	6258497	Identifier	cw		6258471	1					
ANR	6258498	AssignmentExpression	cw = 0		6258471	2		=			
ANR	6258499	Identifier	cw		6258471	0					
ANR	6258500	PrimaryExpression	0		6258471	1					
ANR	6258501	IfStatement	if ( _str )		6258471	3					
ANR	6258502	Condition	_str	2842:5:59669:59672	6258471	0	True				
ANR	6258503	Identifier	_str		6258471	0					
ANR	6258504	CompoundStatement		6:11:69:69	6258471	1					
ANR	6258505	ExpressionStatement	ptr = str = _str	2843:2:59679:59695	6258471	0	True				
ANR	6258506	AssignmentExpression	ptr = str = _str		6258471	0		=			
ANR	6258507	Identifier	ptr		6258471	0					
ANR	6258508	AssignmentExpression	str = _str		6258471	1		=			
ANR	6258509	Identifier	str		6258471	0					
ANR	6258510	Identifier	_str		6258471	1					
ANR	6258511	WhileStatement	while ( * str )		6258471	1					
ANR	6258512	Condition	* str	2844:9:59706:59709	6258471	0	True				
ANR	6258513	UnaryOperationExpression	* str		6258471	0					
ANR	6258514	UnaryOperator	*		6258471	0					
ANR	6258515	Identifier	str		6258471	1					
ANR	6258516	CompoundStatement		8:15:106:106	6258471	1					
ANR	6258517	IfStatement	if ( * str == '\\n' )		6258471	0					
ANR	6258518	Condition	* str == '\\n'	2845:7:59721:59732	6258471	0	True				
ANR	6258519	EqualityExpression	* str == '\\n'		6258471	0		==			
ANR	6258520	UnaryOperationExpression	* str		6258471	0					
ANR	6258521	UnaryOperator	*		6258471	0					
ANR	6258522	Identifier	str		6258471	1					
ANR	6258523	PrimaryExpression	'\\n'		6258471	1					
ANR	6258524	CompoundStatement		9:21:129:129	6258471	1					
ANR	6258525	ExpressionStatement	H ++	2846:4:59741:59744	6258471	0	True				
ANR	6258526	PostIncDecOperationExpression	H ++		6258471	0					
ANR	6258527	Identifier	H		6258471	0					
ANR	6258528	IncDec	++		6258471	1					
ANR	6258529	ExpressionStatement	"cw = r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"	2847:4:59750:59797	6258471	1	True				
ANR	6258530	AssignmentExpression	"cw = r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"		6258471	0		=			
ANR	6258531	Identifier	cw		6258471	0					
ANR	6258532	CallExpression	"r_str_ansi_nlen ( ptr , ( size_t ) ( str - ptr ) )"		6258471	1					
ANR	6258533	Callee	r_str_ansi_nlen		6258471	0					
ANR	6258534	Identifier	r_str_ansi_nlen		6258471	0					
ANR	6258535	ArgumentList	ptr		6258471	1					
ANR	6258536	Argument	ptr		6258471	0					
ANR	6258537	Identifier	ptr		6258471	0					
ANR	6258538	Argument	( size_t ) ( str - ptr )		6258471	1					
ANR	6258539	CastExpression	( size_t ) ( str - ptr )		6258471	0					
ANR	6258540	CastTarget	size_t		6258471	0					
ANR	6258541	AdditiveExpression	str - ptr		6258471	1		-			
ANR	6258542	Identifier	str		6258471	0					
ANR	6258543	Identifier	ptr		6258471	1					
ANR	6258544	IfStatement	if ( cw > W )		6258471	2					
ANR	6258545	Condition	cw > W	2848:8:59807:59812	6258471	0	True				
ANR	6258546	RelationalExpression	cw > W		6258471	0		>			
ANR	6258547	Identifier	cw		6258471	0					
ANR	6258548	Identifier	W		6258471	1					
ANR	6258549	CompoundStatement		12:16:209:209	6258471	1					
ANR	6258550	ExpressionStatement	W = cw	2849:5:59822:59828	6258471	0	True				
ANR	6258551	AssignmentExpression	W = cw		6258471	0		=			
ANR	6258552	Identifier	W		6258471	0					
ANR	6258553	Identifier	cw		6258471	1					
ANR	6258554	ExpressionStatement	cw = 0	2851:4:59840:59846	6258471	3	True				
ANR	6258555	AssignmentExpression	cw = 0		6258471	0		=			
ANR	6258556	Identifier	cw		6258471	0					
ANR	6258557	PrimaryExpression	0		6258471	1					
ANR	6258558	ExpressionStatement	ptr = str + 1	2852:4:59852:59865	6258471	4	True				
ANR	6258559	AssignmentExpression	ptr = str + 1		6258471	0		=			
ANR	6258560	Identifier	ptr		6258471	0					
ANR	6258561	AdditiveExpression	str + 1		6258471	1		+			
ANR	6258562	Identifier	str		6258471	0					
ANR	6258563	PrimaryExpression	1		6258471	1					
ANR	6258564	ExpressionStatement	str ++	2854:3:59875:59880	6258471	1	True				
ANR	6258565	PostIncDecOperationExpression	str ++		6258471	0					
ANR	6258566	Identifier	str		6258471	0					
ANR	6258567	IncDec	++		6258471	1					
ANR	6258568	ExpressionStatement	cw ++	2855:3:59885:59889	6258471	2	True				
ANR	6258569	PostIncDecOperationExpression	cw ++		6258471	0					
ANR	6258570	Identifier	cw		6258471	0					
ANR	6258571	IncDec	++		6258471	1					
ANR	6258572	IfStatement	if ( * str == '\\n' )		6258471	2					
ANR	6258573	Condition	* str == '\\n'	2857:6:59901:59912	6258471	0	True				
ANR	6258574	EqualityExpression	* str == '\\n'		6258471	0		==			
ANR	6258575	UnaryOperationExpression	* str		6258471	0					
ANR	6258576	UnaryOperator	*		6258471	0					
ANR	6258577	Identifier	str		6258471	1					
ANR	6258578	PrimaryExpression	'\\n'		6258471	1					
ANR	6258579	CompoundStatement		21:20:309:309	6258471	1					
ANR	6258580	ExpressionStatement	H --	2858:3:59940:59943	6258471	0	True				
ANR	6258581	PostIncDecOperationExpression	H --		6258471	0					
ANR	6258582	Identifier	H		6258471	0					
ANR	6258583	IncDec	--		6258471	1					
ANR	6258584	IfStatement	if ( h )		6258471	3					
ANR	6258585	Condition	h	2860:6:59955:59955	6258471	0	True				
ANR	6258586	Identifier	h		6258471	0					
ANR	6258587	CompoundStatement		24:9:352:352	6258471	1					
ANR	6258588	ExpressionStatement	* h = H	2861:3:59963:59969	6258471	0	True				
ANR	6258589	AssignmentExpression	* h = H		6258471	0		=			
ANR	6258590	UnaryOperationExpression	* h		6258471	0					
ANR	6258591	UnaryOperator	*		6258471	0					
ANR	6258592	Identifier	h		6258471	1					
ANR	6258593	Identifier	H		6258471	1					
ANR	6258594	ReturnStatement	return W ;	2864:1:59979:59987	6258471	4	True				
ANR	6258595	Identifier	W		6258471	0					
ANR	6258596	ReturnType	R_API int		6258471	1					
ANR	6258597	Identifier	r_str_bounds		6258471	2					
ANR	6258598	ParameterList	"const char * _str , int * h"		6258471	3					
ANR	6258599	Parameter	const char * _str	2837:23:59579:59594	6258471	0	True				
ANR	6258600	ParameterType	const char *		6258471	0					
ANR	6258601	Identifier	_str		6258471	1					
ANR	6258602	Parameter	int * h	2837:41:59597:59602	6258471	1	True				
ANR	6258603	ParameterType	int *		6258471	0					
ANR	6258604	Identifier	h		6258471	1					
ANR	6258605	CFGEntryNode	ENTRY		6258471		True				
ANR	6258606	CFGExitNode	EXIT		6258471		True				
ANR	6258607	Symbol	str		6258471						
ANR	6258608	Symbol	* h		6258471						
ANR	6258609	Symbol	cw		6258471						
ANR	6258610	Symbol	r_str_ansi_nlen		6258471						
ANR	6258611	Symbol	W		6258471						
ANR	6258612	Symbol	h		6258471						
ANR	6258613	Symbol	H		6258471						
ANR	6258614	Symbol	* str		6258471						
ANR	6258615	Symbol	_str		6258471						
ANR	6258616	Symbol	ptr		6258471						
ANR	6258617	Function	r_str_crop	2870:0:60225:60914							
ANR	6258618	FunctionDef	"r_str_crop (const char * str , unsigned int x , unsigned int y , unsigned int x2 , unsigned int y2)"		6258617	0					
ANR	6258619	CompoundStatement		2871:36:60333:60914	6258617	0					
ANR	6258620	IdentifierDeclStatement	"char * r , * ret ;"	2872:1:60336:60349	6258617	0	True				
ANR	6258621	IdentifierDecl	* r		6258617	0					
ANR	6258622	IdentifierDeclType	char *		6258617	0					
ANR	6258623	Identifier	r		6258617	1					
ANR	6258624	IdentifierDecl	* ret		6258617	1					
ANR	6258625	IdentifierDeclType	char *		6258617	0					
ANR	6258626	Identifier	ret		6258617	1					
ANR	6258627	IdentifierDeclStatement	"unsigned int ch = 0 , cw = 0 ;"	2873:1:60352:60379	6258617	1	True				
ANR	6258628	IdentifierDecl	ch = 0		6258617	0					
ANR	6258629	IdentifierDeclType	unsigned int		6258617	0					
ANR	6258630	Identifier	ch		6258617	1					
ANR	6258631	AssignmentExpression	ch = 0		6258617	2		=			
ANR	6258632	Identifier	ch		6258617	0					
ANR	6258633	PrimaryExpression	0		6258617	1					
ANR	6258634	IdentifierDecl	cw = 0		6258617	1					
ANR	6258635	IdentifierDeclType	unsigned int		6258617	0					
ANR	6258636	Identifier	cw		6258617	1					
ANR	6258637	AssignmentExpression	cw = 0		6258617	2		=			
ANR	6258638	Identifier	cw		6258617	0					
ANR	6258639	PrimaryExpression	0		6258617	1					
ANR	6258640	IfStatement	if ( x2 < 1 || y2 < 1 || ! str )		6258617	2					
ANR	6258641	Condition	x2 < 1 || y2 < 1 || ! str	2874:5:60386:60409	6258617	0	True				
ANR	6258642	OrExpression	x2 < 1 || y2 < 1 || ! str		6258617	0		||			
ANR	6258643	RelationalExpression	x2 < 1		6258617	0		<			
ANR	6258644	Identifier	x2		6258617	0					
ANR	6258645	PrimaryExpression	1		6258617	1					
ANR	6258646	OrExpression	y2 < 1 || ! str		6258617	1		||			
ANR	6258647	RelationalExpression	y2 < 1		6258617	0		<			
ANR	6258648	Identifier	y2		6258617	0					
ANR	6258649	PrimaryExpression	1		6258617	1					
ANR	6258650	UnaryOperationExpression	! str		6258617	1					
ANR	6258651	UnaryOperator	!		6258617	0					
ANR	6258652	Identifier	str		6258617	1					
ANR	6258653	CompoundStatement		4:31:78:78	6258617	1					
ANR	6258654	ReturnStatement	"return strdup ( """" ) ;"	2875:2:60416:60434	6258617	0	True				
ANR	6258655	CallExpression	"strdup ( """" )"		6258617	0					
ANR	6258656	Callee	strdup		6258617	0					
ANR	6258657	Identifier	strdup		6258617	0					
ANR	6258658	ArgumentList	""""""		6258617	1					
ANR	6258659	Argument	""""""		6258617	0					
ANR	6258660	PrimaryExpression	""""""		6258617	0					
ANR	6258661	ExpressionStatement	r = ret = strdup ( str )	2877:1:60440:60462	6258617	3	True				
ANR	6258662	AssignmentExpression	r = ret = strdup ( str )		6258617	0		=			
ANR	6258663	Identifier	r		6258617	0					
ANR	6258664	AssignmentExpression	ret = strdup ( str )		6258617	1		=			
ANR	6258665	Identifier	ret		6258617	0					
ANR	6258666	CallExpression	strdup ( str )		6258617	1					
ANR	6258667	Callee	strdup		6258617	0					
ANR	6258668	Identifier	strdup		6258617	0					
ANR	6258669	ArgumentList	str		6258617	1					
ANR	6258670	Argument	str		6258617	0					
ANR	6258671	Identifier	str		6258617	0					
ANR	6258672	WhileStatement	while ( * str )		6258617	4					
ANR	6258673	Condition	* str	2878:8:60472:60475	6258617	0	True				
ANR	6258674	UnaryOperationExpression	* str		6258617	0					
ANR	6258675	UnaryOperator	*		6258617	0					
ANR	6258676	Identifier	str		6258617	1					
ANR	6258677	CompoundStatement		8:14:144:144	6258617	1					
ANR	6258678	IfStatement	if ( ch >= y2 )		6258617	0					
ANR	6258679	Condition	ch >= y2	2880:6:60506:60513	6258617	0	True				
ANR	6258680	RelationalExpression	ch >= y2		6258617	0		>=			
ANR	6258681	Identifier	ch		6258617	0					
ANR	6258682	Identifier	y2		6258617	1					
ANR	6258683	CompoundStatement		10:16:182:182	6258617	1					
ANR	6258684	ExpressionStatement	r --	2881:3:60521:60524	6258617	0	True				
ANR	6258685	PostIncDecOperationExpression	r --		6258617	0					
ANR	6258686	Identifier	r		6258617	0					
ANR	6258687	IncDec	--		6258617	1					
ANR	6258688	BreakStatement	break ;	2882:3:60529:60534	6258617	1	True				
ANR	6258689	IfStatement	if ( * str == '\\n' )		6258617	1					
ANR	6258690	Condition	* str == '\\n'	2885:6:60547:60558	6258617	0	True				
ANR	6258691	EqualityExpression	* str == '\\n'		6258617	0		==			
ANR	6258692	UnaryOperationExpression	* str		6258617	0					
ANR	6258693	UnaryOperator	*		6258617	0					
ANR	6258694	Identifier	str		6258617	1					
ANR	6258695	PrimaryExpression	'\\n'		6258617	1					
ANR	6258696	CompoundStatement		15:20:227:227	6258617	1					
ANR	6258697	IfStatement	if ( ch >= y && ch < y2 )		6258617	0					
ANR	6258698	Condition	ch >= y && ch < y2	2886:7:60570:60587	6258617	0	True				
ANR	6258699	AndExpression	ch >= y && ch < y2		6258617	0		&&			
ANR	6258700	RelationalExpression	ch >= y		6258617	0		>=			
ANR	6258701	Identifier	ch		6258617	0					
ANR	6258702	Identifier	y		6258617	1					
ANR	6258703	RelationalExpression	ch < y2		6258617	1		<			
ANR	6258704	Identifier	ch		6258617	0					
ANR	6258705	Identifier	y2		6258617	1					
ANR	6258706	CompoundStatement		16:27:256:256	6258617	1					
ANR	6258707	ExpressionStatement	* r ++ = * str	2887:4:60596:60607	6258617	0	True				
ANR	6258708	AssignmentExpression	* r ++ = * str		6258617	0		=			
ANR	6258709	UnaryOperationExpression	* r ++		6258617	0					
ANR	6258710	UnaryOperator	*		6258617	0					
ANR	6258711	PostIncDecOperationExpression	r ++		6258617	1					
ANR	6258712	Identifier	r		6258617	0					
ANR	6258713	IncDec	++		6258617	1					
ANR	6258714	UnaryOperationExpression	* str		6258617	1					
ANR	6258715	UnaryOperator	*		6258617	0					
ANR	6258716	Identifier	str		6258617	1					
ANR	6258717	ExpressionStatement	str ++	2889:3:60617:60622	6258617	1	True				
ANR	6258718	PostIncDecOperationExpression	str ++		6258617	0					
ANR	6258719	Identifier	str		6258617	0					
ANR	6258720	IncDec	++		6258617	1					
ANR	6258721	ExpressionStatement	ch ++	2890:3:60627:60631	6258617	2	True				
ANR	6258722	PostIncDecOperationExpression	ch ++		6258617	0					
ANR	6258723	Identifier	ch		6258617	0					
ANR	6258724	IncDec	++		6258617	1					
ANR	6258725	ExpressionStatement	cw = 0	2891:3:60636:60642	6258617	3	True				
ANR	6258726	AssignmentExpression	cw = 0		6258617	0		=			
ANR	6258727	Identifier	cw		6258617	0					
ANR	6258728	PrimaryExpression	0		6258617	1					
ANR	6258729	ElseStatement	else		6258617	0					
ANR	6258730	CompoundStatement		22:9:319:319	6258617	0					
ANR	6258731	IfStatement	if ( ch >= y && ch < y2 && cw >= x && cw < x2 )		6258617	0					
ANR	6258732	Condition	ch >= y && ch < y2 && cw >= x && cw < x2	2893:7:60662:60701	6258617	0	True				
ANR	6258733	AndExpression	ch >= y && ch < y2 && cw >= x && cw < x2		6258617	0		&&			
ANR	6258734	RelationalExpression	ch >= y		6258617	0		>=			
ANR	6258735	Identifier	ch		6258617	0					
ANR	6258736	Identifier	y		6258617	1					
ANR	6258737	AndExpression	ch < y2 && cw >= x && cw < x2		6258617	1		&&			
ANR	6258738	RelationalExpression	ch < y2		6258617	0		<			
ANR	6258739	Identifier	ch		6258617	0					
ANR	6258740	Identifier	y2		6258617	1					
ANR	6258741	AndExpression	cw >= x && cw < x2		6258617	1		&&			
ANR	6258742	RelationalExpression	cw >= x		6258617	0		>=			
ANR	6258743	Identifier	cw		6258617	0					
ANR	6258744	Identifier	x		6258617	1					
ANR	6258745	RelationalExpression	cw < x2		6258617	1		<			
ANR	6258746	Identifier	cw		6258617	0					
ANR	6258747	Identifier	x2		6258617	1					
ANR	6258748	CompoundStatement		23:49:370:370	6258617	1					
ANR	6258749	ExpressionStatement	* r ++ = * str	2894:4:60710:60721	6258617	0	True				
ANR	6258750	AssignmentExpression	* r ++ = * str		6258617	0		=			
ANR	6258751	UnaryOperationExpression	* r ++		6258617	0					
ANR	6258752	UnaryOperator	*		6258617	0					
ANR	6258753	PostIncDecOperationExpression	r ++		6258617	1					
ANR	6258754	Identifier	r		6258617	0					
ANR	6258755	IncDec	++		6258617	1					
ANR	6258756	UnaryOperationExpression	* str		6258617	1					
ANR	6258757	UnaryOperator	*		6258617	0					
ANR	6258758	Identifier	str		6258617	1					
ANR	6258759	IfStatement	if ( cw >= x2 )		6258617	1					
ANR	6258760	Condition	cw >= x2	2898:7:60783:60790	6258617	0	True				
ANR	6258761	RelationalExpression	cw >= x2		6258617	0		>=			
ANR	6258762	Identifier	cw		6258617	0					
ANR	6258763	Identifier	x2		6258617	1					
ANR	6258764	CompoundStatement		28:17:459:459	6258617	1					
ANR	6258765	WhileStatement	while ( * str && * str != '\\n' )		6258617	0					
ANR	6258766	Condition	* str && * str != '\\n'	2899:11:60806:60825	6258617	0	True				
ANR	6258767	AndExpression	* str && * str != '\\n'		6258617	0		&&			
ANR	6258768	UnaryOperationExpression	* str		6258617	0					
ANR	6258769	UnaryOperator	*		6258617	0					
ANR	6258770	Identifier	str		6258617	1					
ANR	6258771	EqualityExpression	* str != '\\n'		6258617	1		!=			
ANR	6258772	UnaryOperationExpression	* str		6258617	0					
ANR	6258773	UnaryOperator	*		6258617	0					
ANR	6258774	Identifier	str		6258617	1					
ANR	6258775	PrimaryExpression	'\\n'		6258617	1					
ANR	6258776	CompoundStatement		29:33:494:494	6258617	1					
ANR	6258777	ExpressionStatement	str ++	2900:5:60835:60840	6258617	0	True				
ANR	6258778	PostIncDecOperationExpression	str ++		6258617	0					
ANR	6258779	Identifier	str		6258617	0					
ANR	6258780	IncDec	++		6258617	1					
ANR	6258781	ElseStatement	else		6258617	0					
ANR	6258782	CompoundStatement		32:10:524:524	6258617	0					
ANR	6258783	ExpressionStatement	str ++	2903:4:60864:60869	6258617	0	True				
ANR	6258784	PostIncDecOperationExpression	str ++		6258617	0					
ANR	6258785	Identifier	str		6258617	0					
ANR	6258786	IncDec	++		6258617	1					
ANR	6258787	ExpressionStatement	cw ++	2905:3:60879:60883	6258617	2	True				
ANR	6258788	PostIncDecOperationExpression	cw ++		6258617	0					
ANR	6258789	Identifier	cw		6258617	0					
ANR	6258790	IncDec	++		6258617	1					
ANR	6258791	ExpressionStatement	* r = 0	2908:1:60893:60899	6258617	5	True				
ANR	6258792	AssignmentExpression	* r = 0		6258617	0		=			
ANR	6258793	UnaryOperationExpression	* r		6258617	0					
ANR	6258794	UnaryOperator	*		6258617	0					
ANR	6258795	Identifier	r		6258617	1					
ANR	6258796	PrimaryExpression	0		6258617	1					
ANR	6258797	ReturnStatement	return ret ;	2909:1:60902:60912	6258617	6	True				
ANR	6258798	Identifier	ret		6258617	0					
ANR	6258799	ReturnType	R_API char *		6258617	1					
ANR	6258800	Identifier	r_str_crop		6258617	2					
ANR	6258801	ParameterList	"const char * str , unsigned int x , unsigned int y , unsigned int x2 , unsigned int y2"		6258617	3					
ANR	6258802	Parameter	const char * str	2870:23:60248:60262	6258617	0	True				
ANR	6258803	ParameterType	const char *		6258617	0					
ANR	6258804	Identifier	str		6258617	1					
ANR	6258805	Parameter	unsigned int x	2870:40:60265:60278	6258617	1	True				
ANR	6258806	ParameterType	unsigned int		6258617	0					
ANR	6258807	Identifier	x		6258617	1					
ANR	6258808	Parameter	unsigned int y	2870:56:60281:60294	6258617	2	True				
ANR	6258809	ParameterType	unsigned int		6258617	0					
ANR	6258810	Identifier	y		6258617	1					
ANR	6258811	Parameter	unsigned int x2	2871:2:60299:60313	6258617	3	True				
ANR	6258812	ParameterType	unsigned int		6258617	0					
ANR	6258813	Identifier	x2		6258617	1					
ANR	6258814	Parameter	unsigned int y2	2871:19:60316:60330	6258617	4	True				
ANR	6258815	ParameterType	unsigned int		6258617	0					
ANR	6258816	Identifier	y2		6258617	1					
ANR	6258817	CFGEntryNode	ENTRY		6258617		True				
ANR	6258818	CFGExitNode	EXIT		6258617		True				
ANR	6258819	Symbol	ret		6258617						
ANR	6258820	Symbol	ch		6258617						
ANR	6258821	Symbol	* r ++		6258617						
ANR	6258822	Symbol	str		6258617						
ANR	6258823	Symbol	r		6258617						
ANR	6258824	Symbol	cw		6258617						
ANR	6258825	Symbol	x		6258617						
ANR	6258826	Symbol	y		6258617						
ANR	6258827	Symbol	y2		6258617						
ANR	6258828	Symbol	x2		6258617						
ANR	6258829	Symbol	strdup		6258617						
ANR	6258830	Symbol	* str		6258617						
ANR	6258831	Symbol	* r		6258617						
ANR	6258832	Function	r_str_tok	2912:6:60923:61213							
ANR	6258833	FunctionDef	"r_str_tok (const char * str1 , const char b , size_t len)"		6258832	0					
ANR	6258834	CompoundStatement		2912:73:60990:61213	6258832	0					
ANR	6258835	IdentifierDeclStatement	const char * p = str1 ;	2913:1:60993:61013	6258832	0	True				
ANR	6258836	IdentifierDecl	* p = str1		6258832	0					
ANR	6258837	IdentifierDeclType	const char *		6258832	0					
ANR	6258838	Identifier	p		6258832	1					
ANR	6258839	AssignmentExpression	* p = str1		6258832	2		=			
ANR	6258840	Identifier	str1		6258832	0					
ANR	6258841	Identifier	str1		6258832	1					
ANR	6258842	IdentifierDeclStatement	size_t i = 0 ;	2914:1:61016:61028	6258832	1	True				
ANR	6258843	IdentifierDecl	i = 0		6258832	0					
ANR	6258844	IdentifierDeclType	size_t		6258832	0					
ANR	6258845	Identifier	i		6258832	1					
ANR	6258846	AssignmentExpression	i = 0		6258832	2		=			
ANR	6258847	Identifier	i		6258832	0					
ANR	6258848	PrimaryExpression	0		6258832	1					
ANR	6258849	IfStatement	if ( ! p || ! * p )		6258832	2					
ANR	6258850	Condition	! p || ! * p	2915:5:61035:61043	6258832	0	True				
ANR	6258851	OrExpression	! p || ! * p		6258832	0		||			
ANR	6258852	UnaryOperationExpression	! p		6258832	0					
ANR	6258853	UnaryOperator	!		6258832	0					
ANR	6258854	Identifier	p		6258832	1					
ANR	6258855	UnaryOperationExpression	! * p		6258832	1					
ANR	6258856	UnaryOperator	!		6258832	0					
ANR	6258857	UnaryOperationExpression	* p		6258832	1					
ANR	6258858	UnaryOperator	*		6258832	0					
ANR	6258859	Identifier	p		6258832	1					
ANR	6258860	CompoundStatement		4:16:55:55	6258832	1					
ANR	6258861	ReturnStatement	return p ;	2916:2:61050:61058	6258832	0	True				
ANR	6258862	Identifier	p		6258832	0					
ANR	6258863	IfStatement	if ( len == - 1 )		6258832	3					
ANR	6258864	Condition	len == - 1	2918:5:61068:61076	6258832	0	True				
ANR	6258865	EqualityExpression	len == - 1		6258832	0		==			
ANR	6258866	Identifier	len		6258832	0					
ANR	6258867	UnaryOperationExpression	- 1		6258832	1					
ANR	6258868	UnaryOperator	-		6258832	0					
ANR	6258869	PrimaryExpression	1		6258832	1					
ANR	6258870	CompoundStatement		7:16:88:88	6258832	1					
ANR	6258871	ExpressionStatement	len = strlen ( str1 )	2919:2:61083:61102	6258832	0	True				
ANR	6258872	AssignmentExpression	len = strlen ( str1 )		6258832	0		=			
ANR	6258873	Identifier	len		6258832	0					
ANR	6258874	CallExpression	strlen ( str1 )		6258832	1					
ANR	6258875	Callee	strlen		6258832	0					
ANR	6258876	Identifier	strlen		6258832	0					
ANR	6258877	ArgumentList	str1		6258832	1					
ANR	6258878	Argument	str1		6258832	0					
ANR	6258879	Identifier	str1		6258832	0					
ANR	6258880	ForStatement	"for ( ; i < len ; i ++ , p ++ )"		6258832	4					
ANR	6258881	Condition	i < len	2921:9:61116:61122	6258832	0	True				
ANR	6258882	RelationalExpression	i < len		6258832	0		<			
ANR	6258883	Identifier	i		6258832	0					
ANR	6258884	Identifier	len		6258832	1					
ANR	6258885	Expression	"i ++ , p ++"	2921:18:61125:61131	6258832	1	True				
ANR	6258886	PostIncDecOperationExpression	i ++		6258832	0					
ANR	6258887	Identifier	i		6258832	0					
ANR	6258888	IncDec	++		6258832	1					
ANR	6258889	PostIncDecOperationExpression	p ++		6258832	1					
ANR	6258890	Identifier	p		6258832	0					
ANR	6258891	IncDec	++		6258832	1					
ANR	6258892	CompoundStatement		10:27:143:143	6258832	2					
ANR	6258893	IfStatement	if ( * p == b )		6258832	0					
ANR	6258894	Condition	* p == b	2922:6:61142:61148	6258832	0	True				
ANR	6258895	EqualityExpression	* p == b		6258832	0		==			
ANR	6258896	UnaryOperationExpression	* p		6258832	0					
ANR	6258897	UnaryOperator	*		6258832	0					
ANR	6258898	Identifier	p		6258832	1					
ANR	6258899	Identifier	b		6258832	1					
ANR	6258900	CompoundStatement		11:15:160:160	6258832	1					
ANR	6258901	BreakStatement	break ;	2923:3:61156:61161	6258832	0	True				
ANR	6258902	IfStatement	if ( i == len )		6258832	5					
ANR	6258903	Condition	i == len	2926:5:61175:61182	6258832	0	True				
ANR	6258904	EqualityExpression	i == len		6258832	0		==			
ANR	6258905	Identifier	i		6258832	0					
ANR	6258906	Identifier	len		6258832	1					
ANR	6258907	CompoundStatement		15:15:194:194	6258832	1					
ANR	6258908	ExpressionStatement	p = NULL	2927:2:61189:61197	6258832	0	True				
ANR	6258909	AssignmentExpression	p = NULL		6258832	0		=			
ANR	6258910	Identifier	p		6258832	0					
ANR	6258911	Identifier	NULL		6258832	1					
ANR	6258912	ReturnStatement	return p ;	2929:1:61203:61211	6258832	6	True				
ANR	6258913	Identifier	p		6258832	0					
ANR	6258914	ReturnType	const char *		6258832	1					
ANR	6258915	Identifier	r_str_tok		6258832	2					
ANR	6258916	ParameterList	"const char * str1 , const char b , size_t len"		6258832	3					
ANR	6258917	Parameter	const char * str1	2912:29:60946:60961	6258832	0	True				
ANR	6258918	ParameterType	const char *		6258832	0					
ANR	6258919	Identifier	str1		6258832	1					
ANR	6258920	Parameter	const char b	2912:47:60964:60975	6258832	1	True				
ANR	6258921	ParameterType	const char		6258832	0					
ANR	6258922	Identifier	b		6258832	1					
ANR	6258923	Parameter	size_t len	2912:61:60978:60987	6258832	2	True				
ANR	6258924	ParameterType	size_t		6258832	0					
ANR	6258925	Identifier	len		6258832	1					
ANR	6258926	CFGEntryNode	ENTRY		6258832		True				
ANR	6258927	CFGExitNode	EXIT		6258832		True				
ANR	6258928	Symbol	p		6258832						
ANR	6258929	Symbol	strlen		6258832						
ANR	6258930	Symbol	b		6258832						
ANR	6258931	Symbol	NULL		6258832						
ANR	6258932	Symbol	len		6258832						
ANR	6258933	Symbol	str1		6258832						
ANR	6258934	Symbol	i		6258832						
ANR	6258935	Symbol	* p		6258832						
ANR	6258936	Function	r_str_do_until_token	2932:0:61216:61526							
ANR	6258937	FunctionDef	"r_str_do_until_token (str_operation op , char * str , const char tok)"		6258936	0					
ANR	6258938	CompoundStatement		2932:76:61292:61526	6258936	0					
ANR	6258939	IdentifierDeclStatement	int ret ;	2933:1:61295:61302	6258936	0	True				
ANR	6258940	IdentifierDecl	ret		6258936	0					
ANR	6258941	IdentifierDeclType	int		6258936	0					
ANR	6258942	Identifier	ret		6258936	1					
ANR	6258943	IfStatement	if ( ! str )		6258936	1					
ANR	6258944	Condition	! str	2934:5:61309:61312	6258936	0	True				
ANR	6258945	UnaryOperationExpression	! str		6258936	0					
ANR	6258946	UnaryOperator	!		6258936	0					
ANR	6258947	Identifier	str		6258936	1					
ANR	6258948	CompoundStatement		3:11:22:22	6258936	1					
ANR	6258949	ReturnStatement	return - 1 ;	2935:2:61319:61328	6258936	0	True				
ANR	6258950	UnaryOperationExpression	- 1		6258936	0					
ANR	6258951	UnaryOperator	-		6258936	0					
ANR	6258952	PrimaryExpression	1		6258936	1					
ANR	6258953	IfStatement	if ( ! op )		6258936	2					
ANR	6258954	Condition	! op	2937:5:61338:61340	6258936	0	True				
ANR	6258955	UnaryOperationExpression	! op		6258936	0					
ANR	6258956	UnaryOperator	!		6258936	0					
ANR	6258957	Identifier	op		6258936	1					
ANR	6258958	CompoundStatement		6:10:50:50	6258936	1					
ANR	6258959	ForStatement	for ( ret = 0 ; ( str [ ret ] != tok ) && str [ ret ] ; ret ++ )		6258936	0					
ANR	6258960	ForInit	ret = 0 ;	2938:7:61352:61359	6258936	0	True				
ANR	6258961	AssignmentExpression	ret = 0		6258936	0		=			
ANR	6258962	Identifier	ret		6258936	0					
ANR	6258963	PrimaryExpression	0		6258936	1					
ANR	6258964	Condition	( str [ ret ] != tok ) && str [ ret ]	2938:16:61361:61389	6258936	1	True				
ANR	6258965	AndExpression	( str [ ret ] != tok ) && str [ ret ]		6258936	0		&&			
ANR	6258966	EqualityExpression	str [ ret ] != tok		6258936	0		!=			
ANR	6258967	ArrayIndexing	str [ ret ]		6258936	0					
ANR	6258968	Identifier	str		6258936	0					
ANR	6258969	Identifier	ret		6258936	1					
ANR	6258970	Identifier	tok		6258936	1					
ANR	6258971	ArrayIndexing	str [ ret ]		6258936	1					
ANR	6258972	Identifier	str		6258936	0					
ANR	6258973	Identifier	ret		6258936	1					
ANR	6258974	PostIncDecOperationExpression	ret ++	2938:47:61392:61396	6258936	2	True				
ANR	6258975	Identifier	ret		6258936	0					
ANR	6258976	IncDec	++		6258936	1					
ANR	6258977	CompoundStatement		7:54:106:106	6258936	3					
ANR	6258978	ElseStatement	else		6258936	0					
ANR	6258979	CompoundStatement		10:8:136:136	6258936	0					
ANR	6258980	ForStatement	for ( ret = 0 ; ( str [ ret ] != tok ) && str [ ret ] ; ret ++ )		6258936	0					
ANR	6258981	ForInit	ret = 0 ;	2942:7:61438:61445	6258936	0	True				
ANR	6258982	AssignmentExpression	ret = 0		6258936	0		=			
ANR	6258983	Identifier	ret		6258936	0					
ANR	6258984	PrimaryExpression	0		6258936	1					
ANR	6258985	Condition	( str [ ret ] != tok ) && str [ ret ]	2942:16:61447:61475	6258936	1	True				
ANR	6258986	AndExpression	( str [ ret ] != tok ) && str [ ret ]		6258936	0		&&			
ANR	6258987	EqualityExpression	str [ ret ] != tok		6258936	0		!=			
ANR	6258988	ArrayIndexing	str [ ret ]		6258936	0					
ANR	6258989	Identifier	str		6258936	0					
ANR	6258990	Identifier	ret		6258936	1					
ANR	6258991	Identifier	tok		6258936	1					
ANR	6258992	ArrayIndexing	str [ ret ]		6258936	1					
ANR	6258993	Identifier	str		6258936	0					
ANR	6258994	Identifier	ret		6258936	1					
ANR	6258995	PostIncDecOperationExpression	ret ++	2942:47:61478:61482	6258936	2	True				
ANR	6258996	Identifier	ret		6258936	0					
ANR	6258997	IncDec	++		6258936	1					
ANR	6258998	CompoundStatement		11:54:192:192	6258936	3					
ANR	6258999	ExpressionStatement	op ( str + ret )	2943:3:61490:61504	6258936	0	True				
ANR	6259000	CallExpression	op ( str + ret )		6258936	0					
ANR	6259001	Callee	op		6258936	0					
ANR	6259002	Identifier	op		6258936	0					
ANR	6259003	ArgumentList	str + ret		6258936	1					
ANR	6259004	Argument	str + ret		6258936	0					
ANR	6259005	AdditiveExpression	str + ret		6258936	0		+			
ANR	6259006	Identifier	str		6258936	0					
ANR	6259007	Identifier	ret		6258936	1					
ANR	6259008	ReturnStatement	return ret ;	2946:1:61514:61524	6258936	3	True				
ANR	6259009	Identifier	ret		6258936	0					
ANR	6259010	ReturnType	R_API int		6258936	1					
ANR	6259011	Identifier	r_str_do_until_token		6258936	2					
ANR	6259012	ParameterList	"str_operation op , char * str , const char tok"		6258936	3					
ANR	6259013	Parameter	str_operation op	2932:31:61247:61262	6258936	0	True				
ANR	6259014	ParameterType	str_operation		6258936	0					
ANR	6259015	Identifier	op		6258936	1					
ANR	6259016	Parameter	char * str	2932:49:61265:61273	6258936	1	True				
ANR	6259017	ParameterType	char *		6258936	0					
ANR	6259018	Identifier	str		6258936	1					
ANR	6259019	Parameter	const char tok	2932:60:61276:61289	6258936	2	True				
ANR	6259020	ParameterType	const char		6258936	0					
ANR	6259021	Identifier	tok		6258936	1					
ANR	6259022	CFGEntryNode	ENTRY		6258936		True				
ANR	6259023	CFGExitNode	EXIT		6258936		True				
ANR	6259024	Symbol	str		6258936						
ANR	6259025	Symbol	ret		6258936						
ANR	6259026	Symbol	op		6258936						
ANR	6259027	Symbol	tok		6258936						
ANR	6259028	Symbol	* str		6258936						
ANR	6259029	Symbol	* ret		6258936						
ANR	6259030	Function	r_str_pad	2949:6:61535:61763							
ANR	6259031	FunctionDef	"r_str_pad (const char ch , int sz)"		6259030	0					
ANR	6259032	CompoundStatement		2949:51:61580:61763	6259030	0					
ANR	6259033	Statement	static	2950:1:61583:61588	6259030	0	True				
ANR	6259034	IdentifierDeclStatement	char pad [ 1024 ] ;	2950:8:61590:61604	6259030	1	True				
ANR	6259035	IdentifierDecl	pad [ 1024 ]		6259030	0					
ANR	6259036	IdentifierDeclType	char [ 1024 ]		6259030	0					
ANR	6259037	Identifier	pad		6259030	1					
ANR	6259038	PrimaryExpression	1024		6259030	2					
ANR	6259039	IfStatement	if ( sz < 0 )		6259030	2					
ANR	6259040	Condition	sz < 0	2951:5:61611:61616	6259030	0	True				
ANR	6259041	RelationalExpression	sz < 0		6259030	0		<			
ANR	6259042	Identifier	sz		6259030	0					
ANR	6259043	PrimaryExpression	0		6259030	1					
ANR	6259044	CompoundStatement		3:13:38:38	6259030	1					
ANR	6259045	ExpressionStatement	sz = 0	2952:2:61623:61629	6259030	0	True				
ANR	6259046	AssignmentExpression	sz = 0		6259030	0		=			
ANR	6259047	Identifier	sz		6259030	0					
ANR	6259048	PrimaryExpression	0		6259030	1					
ANR	6259049	ExpressionStatement	"memset ( pad , ch , R_MIN ( sz , sizeof ( pad ) ) )"	2954:1:61635:61677	6259030	3	True				
ANR	6259050	CallExpression	"memset ( pad , ch , R_MIN ( sz , sizeof ( pad ) ) )"		6259030	0					
ANR	6259051	Callee	memset		6259030	0					
ANR	6259052	Identifier	memset		6259030	0					
ANR	6259053	ArgumentList	pad		6259030	1					
ANR	6259054	Argument	pad		6259030	0					
ANR	6259055	Identifier	pad		6259030	0					
ANR	6259056	Argument	ch		6259030	1					
ANR	6259057	Identifier	ch		6259030	0					
ANR	6259058	Argument	"R_MIN ( sz , sizeof ( pad ) )"		6259030	2					
ANR	6259059	CallExpression	"R_MIN ( sz , sizeof ( pad ) )"		6259030	0					
ANR	6259060	Callee	R_MIN		6259030	0					
ANR	6259061	Identifier	R_MIN		6259030	0					
ANR	6259062	ArgumentList	sz		6259030	1					
ANR	6259063	Argument	sz		6259030	0					
ANR	6259064	Identifier	sz		6259030	0					
ANR	6259065	Argument	sizeof ( pad )		6259030	1					
ANR	6259066	SizeofExpression	sizeof ( pad )		6259030	0					
ANR	6259067	Sizeof	sizeof		6259030	0					
ANR	6259068	SizeofOperand	pad		6259030	1					
ANR	6259069	IfStatement	if ( sz < sizeof ( pad ) )		6259030	4					
ANR	6259070	Condition	sz < sizeof ( pad )	2955:5:61684:61700	6259030	0	True				
ANR	6259071	RelationalExpression	sz < sizeof ( pad )		6259030	0		<			
ANR	6259072	Identifier	sz		6259030	0					
ANR	6259073	SizeofExpression	sizeof ( pad )		6259030	1					
ANR	6259074	Sizeof	sizeof		6259030	0					
ANR	6259075	SizeofOperand	pad		6259030	1					
ANR	6259076	CompoundStatement		7:24:122:122	6259030	1					
ANR	6259077	ExpressionStatement	pad [ sz ] = 0	2956:2:61707:61718	6259030	0	True				
ANR	6259078	AssignmentExpression	pad [ sz ] = 0		6259030	0		=			
ANR	6259079	ArrayIndexing	pad [ sz ]		6259030	0					
ANR	6259080	Identifier	pad		6259030	0					
ANR	6259081	Identifier	sz		6259030	1					
ANR	6259082	PrimaryExpression	0		6259030	1					
ANR	6259083	ExpressionStatement	pad [ sizeof ( pad ) - 1 ] = 0	2958:1:61724:61748	6259030	5	True				
ANR	6259084	AssignmentExpression	pad [ sizeof ( pad ) - 1 ] = 0		6259030	0		=			
ANR	6259085	ArrayIndexing	pad [ sizeof ( pad ) - 1 ]		6259030	0					
ANR	6259086	Identifier	pad		6259030	0					
ANR	6259087	AdditiveExpression	sizeof ( pad ) - 1		6259030	1		-			
ANR	6259088	SizeofExpression	sizeof ( pad )		6259030	0					
ANR	6259089	Sizeof	sizeof		6259030	0					
ANR	6259090	SizeofOperand	pad		6259030	1					
ANR	6259091	PrimaryExpression	1		6259030	1					
ANR	6259092	PrimaryExpression	0		6259030	1					
ANR	6259093	ReturnStatement	return pad ;	2959:1:61751:61761	6259030	6	True				
ANR	6259094	Identifier	pad		6259030	0					
ANR	6259095	ReturnType	const char *		6259030	1					
ANR	6259096	Identifier	r_str_pad		6259030	2					
ANR	6259097	ParameterList	"const char ch , int sz"		6259030	3					
ANR	6259098	Parameter	const char ch	2949:28:61557:61569	6259030	0	True				
ANR	6259099	ParameterType	const char		6259030	0					
ANR	6259100	Identifier	ch		6259030	1					
ANR	6259101	Parameter	int sz	2949:43:61572:61577	6259030	1	True				
ANR	6259102	ParameterType	int		6259030	0					
ANR	6259103	Identifier	sz		6259030	1					
ANR	6259104	CFGEntryNode	ENTRY		6259030		True				
ANR	6259105	CFGExitNode	EXIT		6259030		True				
ANR	6259106	Symbol	pad		6259030						
ANR	6259107	Symbol	ch		6259030						
ANR	6259108	Symbol	sz		6259030						
ANR	6259109	Symbol	R_MIN		6259030						
ANR	6259110	Symbol	* pad		6259030						
ANR	6259111	Symbol	* sz		6259030						
ANR	6259112	DeclStmt									
ANR	6259113	Decl							char	char * *	__consts
ANR	6259114	Function	r_str_const_at	2964:6:61804:62380							
ANR	6259115	FunctionDef	"r_str_const_at (char * * * consts , const char * ptr)"		6259114	0					
ANR	6259116	CompoundStatement		2964:66:61864:62380	6259114	0					
ANR	6259117	IfStatement	if ( ! consts )		6259114	0					
ANR	6259118	Condition	! consts	2965:5:61871:61877	6259114	0	True				
ANR	6259119	UnaryOperationExpression	! consts		6259114	0					
ANR	6259120	UnaryOperator	!		6259114	0					
ANR	6259121	Identifier	consts		6259114	1					
ANR	6259122	CompoundStatement		2:14:15:15	6259114	1					
ANR	6259123	ExpressionStatement	consts = & __consts	2966:2:61884:61902	6259114	0	True				
ANR	6259124	AssignmentExpression	consts = & __consts		6259114	0		=			
ANR	6259125	Identifier	consts		6259114	0					
ANR	6259126	UnaryOperationExpression	& __consts		6259114	1					
ANR	6259127	UnaryOperator	&		6259114	0					
ANR	6259128	Identifier	__consts		6259114	1					
ANR	6259129	IdentifierDeclStatement	int ctr = 0 ;	2968:1:61908:61919	6259114	1	True				
ANR	6259130	IdentifierDecl	ctr = 0		6259114	0					
ANR	6259131	IdentifierDeclType	int		6259114	0					
ANR	6259132	Identifier	ctr		6259114	1					
ANR	6259133	AssignmentExpression	ctr = 0		6259114	2		=			
ANR	6259134	Identifier	ctr		6259114	0					
ANR	6259135	PrimaryExpression	0		6259114	1					
ANR	6259136	IfStatement	if ( ! ptr )		6259114	2					
ANR	6259137	Condition	! ptr	2969:5:61926:61929	6259114	0	True				
ANR	6259138	UnaryOperationExpression	! ptr		6259114	0					
ANR	6259139	UnaryOperator	!		6259114	0					
ANR	6259140	Identifier	ptr		6259114	1					
ANR	6259141	CompoundStatement		6:11:67:67	6259114	1					
ANR	6259142	ReturnStatement	return NULL ;	2970:2:61936:61947	6259114	0	True				
ANR	6259143	Identifier	NULL		6259114	0					
ANR	6259144	IfStatement	if ( * consts )		6259114	3					
ANR	6259145	Condition	* consts	2972:5:61957:61963	6259114	0	True				
ANR	6259146	UnaryOperationExpression	* consts		6259114	0					
ANR	6259147	UnaryOperator	*		6259114	0					
ANR	6259148	Identifier	consts		6259114	1					
ANR	6259149	CompoundStatement		17:2:228:286	6259114	1					
ANR	6259150	IdentifierDeclStatement	const char * p ;	2973:2:61970:61983	6259114	0	True				
ANR	6259151	IdentifierDecl	* p		6259114	0					
ANR	6259152	IdentifierDeclType	const char *		6259114	0					
ANR	6259153	Identifier	p		6259114	1					
ANR	6259154	WhileStatement	while ( ( p = ( * consts ) [ ctr ] ) )		6259114	1					
ANR	6259155	Condition	p = ( * consts ) [ ctr ]	2974:9:61994:62013	6259114	0	True				
ANR	6259156	AssignmentExpression	p = ( * consts ) [ ctr ]		6259114	0		=			
ANR	6259157	Identifier	p		6259114	0					
ANR	6259158	ArrayIndexing	( * consts ) [ ctr ]		6259114	1					
ANR	6259159	UnaryOperationExpression	* consts		6259114	0					
ANR	6259160	UnaryOperator	*		6259114	0					
ANR	6259161	Identifier	consts		6259114	1					
ANR	6259162	Identifier	ctr		6259114	1					
ANR	6259163	CompoundStatement		11:31:151:151	6259114	1					
ANR	6259164	IfStatement	"if ( ptr == p || ! strcmp ( ptr , p ) )"		6259114	0					
ANR	6259165	Condition	"ptr == p || ! strcmp ( ptr , p )"	2975:7:62025:62052	6259114	0	True				
ANR	6259166	OrExpression	"ptr == p || ! strcmp ( ptr , p )"		6259114	0		||			
ANR	6259167	EqualityExpression	ptr == p		6259114	0		==			
ANR	6259168	Identifier	ptr		6259114	0					
ANR	6259169	Identifier	p		6259114	1					
ANR	6259170	UnaryOperationExpression	"! strcmp ( ptr , p )"		6259114	1					
ANR	6259171	UnaryOperator	!		6259114	0					
ANR	6259172	CallExpression	"strcmp ( ptr , p )"		6259114	1					
ANR	6259173	Callee	strcmp		6259114	0					
ANR	6259174	Identifier	strcmp		6259114	0					
ANR	6259175	ArgumentList	ptr		6259114	1					
ANR	6259176	Argument	ptr		6259114	0					
ANR	6259177	Identifier	ptr		6259114	0					
ANR	6259178	Argument	p		6259114	1					
ANR	6259179	Identifier	p		6259114	0					
ANR	6259180	CompoundStatement		12:37:190:190	6259114	1					
ANR	6259181	ReturnStatement	return p ;	2976:4:62061:62069	6259114	0	True				
ANR	6259182	Identifier	p		6259114	0					
ANR	6259183	ExpressionStatement	ctr ++	2978:3:62079:62085	6259114	1	True				
ANR	6259184	PostIncDecOperationExpression	ctr ++		6259114	0					
ANR	6259185	Identifier	ctr		6259114	0					
ANR	6259186	IncDec	++		6259114	1					
ANR	6259187	IdentifierDeclStatement	"char * * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) ) ;"	2980:2:62093:62151	6259114	2	True				
ANR	6259188	IdentifierDecl	"* * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		6259114	0					
ANR	6259189	IdentifierDeclType	char * *		6259114	0					
ANR	6259190	Identifier	res		6259114	1					
ANR	6259191	AssignmentExpression	"* * res = realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		6259114	2		=			
ANR	6259192	Identifier	res		6259114	0					
ANR	6259193	CallExpression	"realloc ( * consts , ( ctr + 2 ) * sizeof ( void * ) )"		6259114	1					
ANR	6259194	Callee	realloc		6259114	0					
ANR	6259195	Identifier	realloc		6259114	0					
ANR	6259196	ArgumentList	* consts		6259114	1					
ANR	6259197	Argument	* consts		6259114	0					
ANR	6259198	UnaryOperationExpression	* consts		6259114	0					
ANR	6259199	UnaryOperator	*		6259114	0					
ANR	6259200	Identifier	consts		6259114	1					
ANR	6259201	Argument	( ctr + 2 ) * sizeof ( void * )		6259114	1					
ANR	6259202	MultiplicativeExpression	( ctr + 2 ) * sizeof ( void * )		6259114	0		*			
ANR	6259203	AdditiveExpression	ctr + 2		6259114	0		+			
ANR	6259204	Identifier	ctr		6259114	0					
ANR	6259205	PrimaryExpression	2		6259114	1					
ANR	6259206	SizeofExpression	sizeof ( void * )		6259114	1					
ANR	6259207	Sizeof	sizeof		6259114	0					
ANR	6259208	SizeofOperand	void *		6259114	1					
ANR	6259209	IfStatement	if ( ! res )		6259114	3					
ANR	6259210	Condition	! res	2981:6:62159:62162	6259114	0	True				
ANR	6259211	UnaryOperationExpression	! res		6259114	0					
ANR	6259212	UnaryOperator	!		6259114	0					
ANR	6259213	Identifier	res		6259114	1					
ANR	6259214	CompoundStatement		18:12:300:300	6259114	1					
ANR	6259215	ReturnStatement	return NULL ;	2982:3:62170:62181	6259114	0	True				
ANR	6259216	Identifier	NULL		6259114	0					
ANR	6259217	ExpressionStatement	* consts = res	2984:2:62189:62202	6259114	4	True				
ANR	6259218	AssignmentExpression	* consts = res		6259114	0		=			
ANR	6259219	UnaryOperationExpression	* consts		6259114	0					
ANR	6259220	UnaryOperator	*		6259114	0					
ANR	6259221	Identifier	consts		6259114	1					
ANR	6259222	Identifier	res		6259114	1					
ANR	6259223	ElseStatement	else		6259114	0					
ANR	6259224	CompoundStatement		22:8:347:347	6259114	0					
ANR	6259225	ExpressionStatement	* consts = malloc ( sizeof ( void * ) * 2 )	2986:2:62216:62253	6259114	0	True				
ANR	6259226	AssignmentExpression	* consts = malloc ( sizeof ( void * ) * 2 )		6259114	0		=			
ANR	6259227	UnaryOperationExpression	* consts		6259114	0					
ANR	6259228	UnaryOperator	*		6259114	0					
ANR	6259229	Identifier	consts		6259114	1					
ANR	6259230	CallExpression	malloc ( sizeof ( void * ) * 2 )		6259114	1					
ANR	6259231	Callee	malloc		6259114	0					
ANR	6259232	Identifier	malloc		6259114	0					
ANR	6259233	ArgumentList	sizeof ( void * ) * 2		6259114	1					
ANR	6259234	Argument	sizeof ( void * ) * 2		6259114	0					
ANR	6259235	MultiplicativeExpression	sizeof ( void * ) * 2		6259114	0		*			
ANR	6259236	SizeofExpression	sizeof ( void * )		6259114	0					
ANR	6259237	Sizeof	sizeof		6259114	0					
ANR	6259238	SizeofOperand	void *		6259114	1					
ANR	6259239	PrimaryExpression	2		6259114	1					
ANR	6259240	IfStatement	if ( ! * consts )		6259114	1					
ANR	6259241	Condition	! * consts	2987:6:62261:62268	6259114	0	True				
ANR	6259242	UnaryOperationExpression	! * consts		6259114	0					
ANR	6259243	UnaryOperator	!		6259114	0					
ANR	6259244	UnaryOperationExpression	* consts		6259114	1					
ANR	6259245	UnaryOperator	*		6259114	0					
ANR	6259246	Identifier	consts		6259114	1					
ANR	6259247	CompoundStatement		24:16:406:406	6259114	1					
ANR	6259248	ReturnStatement	return NULL ;	2988:3:62276:62287	6259114	0	True				
ANR	6259249	Identifier	NULL		6259114	0					
ANR	6259250	ExpressionStatement	( * consts ) [ ctr ] = strdup ( ptr )	2991:1:62297:62326	6259114	4	True				
ANR	6259251	AssignmentExpression	( * consts ) [ ctr ] = strdup ( ptr )		6259114	0		=			
ANR	6259252	ArrayIndexing	( * consts ) [ ctr ]		6259114	0					
ANR	6259253	UnaryOperationExpression	* consts		6259114	0					
ANR	6259254	UnaryOperator	*		6259114	0					
ANR	6259255	Identifier	consts		6259114	1					
ANR	6259256	Identifier	ctr		6259114	1					
ANR	6259257	CallExpression	strdup ( ptr )		6259114	1					
ANR	6259258	Callee	strdup		6259114	0					
ANR	6259259	Identifier	strdup		6259114	0					
ANR	6259260	ArgumentList	ptr		6259114	1					
ANR	6259261	Argument	ptr		6259114	0					
ANR	6259262	Identifier	ptr		6259114	0					
ANR	6259263	ExpressionStatement	( * consts ) [ ctr + 1 ] = NULL	2992:1:62329:62354	6259114	5	True				
ANR	6259264	AssignmentExpression	( * consts ) [ ctr + 1 ] = NULL		6259114	0		=			
ANR	6259265	ArrayIndexing	( * consts ) [ ctr + 1 ]		6259114	0					
ANR	6259266	UnaryOperationExpression	* consts		6259114	0					
ANR	6259267	UnaryOperator	*		6259114	0					
ANR	6259268	Identifier	consts		6259114	1					
ANR	6259269	AdditiveExpression	ctr + 1		6259114	1		+			
ANR	6259270	Identifier	ctr		6259114	0					
ANR	6259271	PrimaryExpression	1		6259114	1					
ANR	6259272	Identifier	NULL		6259114	1					
ANR	6259273	ReturnStatement	return ( * consts ) [ ctr ] ;	2993:1:62357:62378	6259114	6	True				
ANR	6259274	ArrayIndexing	( * consts ) [ ctr ]		6259114	0					
ANR	6259275	UnaryOperationExpression	* consts		6259114	0					
ANR	6259276	UnaryOperator	*		6259114	0					
ANR	6259277	Identifier	consts		6259114	1					
ANR	6259278	Identifier	ctr		6259114	1					
ANR	6259279	ReturnType	const char *		6259114	1					
ANR	6259280	Identifier	r_str_const_at		6259114	2					
ANR	6259281	ParameterList	"char * * * consts , const char * ptr"		6259114	3					
ANR	6259282	Parameter	char * * * consts	2964:33:61831:61844	6259114	0	True				
ANR	6259283	ParameterType	char * * *		6259114	0					
ANR	6259284	Identifier	consts		6259114	1					
ANR	6259285	Parameter	const char * ptr	2964:49:61847:61861	6259114	1	True				
ANR	6259286	ParameterType	const char *		6259114	0					
ANR	6259287	Identifier	ptr		6259114	1					
ANR	6259288	CFGEntryNode	ENTRY		6259114		True				
ANR	6259289	CFGExitNode	EXIT		6259114		True				
ANR	6259290	Symbol	ctr		6259114						
ANR	6259291	Symbol	strcmp		6259114						
ANR	6259292	Symbol	res		6259114						
ANR	6259293	Symbol	malloc		6259114						
ANR	6259294	Symbol	NULL		6259114						
ANR	6259295	Symbol	realloc		6259114						
ANR	6259296	Symbol	* * consts		6259114						
ANR	6259297	Symbol	consts		6259114						
ANR	6259298	Symbol	ptr		6259114						
ANR	6259299	Symbol	p		6259114						
ANR	6259300	Symbol	* ctr		6259114						
ANR	6259301	Symbol	strdup		6259114						
ANR	6259302	Symbol	& __consts		6259114						
ANR	6259303	Symbol	* consts		6259114						
ANR	6259304	Function	r_str_const	2996:6:62389:62504							
ANR	6259305	FunctionDef	r_str_const (const char * ptr)		6259304	0					
ANR	6259306	CompoundStatement		2996:47:62430:62504	6259304	0					
ANR	6259307	IfStatement	if ( ! ptr )		6259304	0					
ANR	6259308	Condition	! ptr	2997:5:62437:62440	6259304	0	True				
ANR	6259309	UnaryOperationExpression	! ptr		6259304	0					
ANR	6259310	UnaryOperator	!		6259304	0					
ANR	6259311	Identifier	ptr		6259304	1					
ANR	6259312	CompoundStatement		2:11:12:12	6259304	1					
ANR	6259313	ReturnStatement	return NULL ;	2998:2:62447:62458	6259304	0	True				
ANR	6259314	Identifier	NULL		6259304	0					
ANR	6259315	ReturnStatement	"return r_str_const_at ( & __consts , ptr ) ;"	3000:1:62464:62502	6259304	1	True				
ANR	6259316	CallExpression	"r_str_const_at ( & __consts , ptr )"		6259304	0					
ANR	6259317	Callee	r_str_const_at		6259304	0					
ANR	6259318	Identifier	r_str_const_at		6259304	0					
ANR	6259319	ArgumentList	& __consts		6259304	1					
ANR	6259320	Argument	& __consts		6259304	0					
ANR	6259321	UnaryOperationExpression	& __consts		6259304	0					
ANR	6259322	UnaryOperator	&		6259304	0					
ANR	6259323	Identifier	__consts		6259304	1					
ANR	6259324	Argument	ptr		6259304	1					
ANR	6259325	Identifier	ptr		6259304	0					
ANR	6259326	ReturnType	const char *		6259304	1					
ANR	6259327	Identifier	r_str_const		6259304	2					
ANR	6259328	ParameterList	const char * ptr		6259304	3					
ANR	6259329	Parameter	const char * ptr	2996:30:62413:62427	6259304	0	True				
ANR	6259330	ParameterType	const char *		6259304	0					
ANR	6259331	Identifier	ptr		6259304	1					
ANR	6259332	CFGEntryNode	ENTRY		6259304		True				
ANR	6259333	CFGExitNode	EXIT		6259304		True				
ANR	6259334	Symbol	NULL		6259304						
ANR	6259335	Symbol	r_str_const_at		6259304						
ANR	6259336	Symbol	& __consts		6259304						
ANR	6259337	Symbol	ptr		6259304						
ANR	6259338	Function	r_str_const_free	3003:0:62507:62704							
ANR	6259339	FunctionDef	r_str_const_free (char * * * consts)		6259338	0					
ANR	6259340	CompoundStatement		3003:44:62551:62704	6259338	0					
ANR	6259341	IdentifierDeclStatement	int i ;	3004:1:62554:62559	6259338	0	True				
ANR	6259342	IdentifierDecl	i		6259338	0					
ANR	6259343	IdentifierDeclType	int		6259338	0					
ANR	6259344	Identifier	i		6259338	1					
ANR	6259345	IfStatement	if ( ! consts )		6259338	1					
ANR	6259346	Condition	! consts	3005:5:62566:62572	6259338	0	True				
ANR	6259347	UnaryOperationExpression	! consts		6259338	0					
ANR	6259348	UnaryOperator	!		6259338	0					
ANR	6259349	Identifier	consts		6259338	1					
ANR	6259350	CompoundStatement		3:14:23:23	6259338	1					
ANR	6259351	ExpressionStatement	consts = & __consts	3006:2:62579:62597	6259338	0	True				
ANR	6259352	AssignmentExpression	consts = & __consts		6259338	0		=			
ANR	6259353	Identifier	consts		6259338	0					
ANR	6259354	UnaryOperationExpression	& __consts		6259338	1					
ANR	6259355	UnaryOperator	&		6259338	0					
ANR	6259356	Identifier	__consts		6259338	1					
ANR	6259357	IfStatement	if ( * consts )		6259338	2					
ANR	6259358	Condition	* consts	3008:5:62607:62613	6259338	0	True				
ANR	6259359	UnaryOperationExpression	* consts		6259338	0					
ANR	6259360	UnaryOperator	*		6259338	0					
ANR	6259361	Identifier	consts		6259338	1					
ANR	6259362	CompoundStatement		6:14:64:64	6259338	1					
ANR	6259363	ForStatement	for ( i = 0 ; ( * consts ) [ i ] ; i ++ )		6259338	0					
ANR	6259364	ForInit	i = 0 ;	3009:7:62625:62630	6259338	0	True				
ANR	6259365	AssignmentExpression	i = 0		6259338	0		=			
ANR	6259366	Identifier	i		6259338	0					
ANR	6259367	PrimaryExpression	0		6259338	1					
ANR	6259368	Condition	( * consts ) [ i ]	3009:14:62632:62643	6259338	1	True				
ANR	6259369	ArrayIndexing	( * consts ) [ i ]		6259338	0					
ANR	6259370	UnaryOperationExpression	* consts		6259338	0					
ANR	6259371	UnaryOperator	*		6259338	0					
ANR	6259372	Identifier	consts		6259338	1					
ANR	6259373	Identifier	i		6259338	1					
ANR	6259374	PostIncDecOperationExpression	i ++	3009:28:62646:62648	6259338	2	True				
ANR	6259375	Identifier	i		6259338	0					
ANR	6259376	IncDec	++		6259338	1					
ANR	6259377	CompoundStatement		7:33:99:99	6259338	3					
ANR	6259378	ExpressionStatement	free ( ( * consts ) [ i ] )	3010:3:62656:62675	6259338	0	True				
ANR	6259379	CallExpression	free ( ( * consts ) [ i ] )		6259338	0					
ANR	6259380	Callee	free		6259338	0					
ANR	6259381	Identifier	free		6259338	0					
ANR	6259382	ArgumentList	( * consts ) [ i ]		6259338	1					
ANR	6259383	Argument	( * consts ) [ i ]		6259338	0					
ANR	6259384	ArrayIndexing	( * consts ) [ i ]		6259338	0					
ANR	6259385	UnaryOperationExpression	* consts		6259338	0					
ANR	6259386	UnaryOperator	*		6259338	0					
ANR	6259387	Identifier	consts		6259338	1					
ANR	6259388	Identifier	i		6259338	1					
ANR	6259389	ExpressionStatement	R_FREE ( * consts )	3012:2:62683:62699	6259338	1	True				
ANR	6259390	CallExpression	R_FREE ( * consts )		6259338	0					
ANR	6259391	Callee	R_FREE		6259338	0					
ANR	6259392	Identifier	R_FREE		6259338	0					
ANR	6259393	ArgumentList	* consts		6259338	1					
ANR	6259394	Argument	* consts		6259338	0					
ANR	6259395	UnaryOperationExpression	* consts		6259338	0					
ANR	6259396	UnaryOperator	*		6259338	0					
ANR	6259397	Identifier	consts		6259338	1					
ANR	6259398	ReturnType	R_API void		6259338	1					
ANR	6259399	Identifier	r_str_const_free		6259338	2					
ANR	6259400	ParameterList	char * * * consts		6259338	3					
ANR	6259401	Parameter	char * * * consts	3003:28:62535:62548	6259338	0	True				
ANR	6259402	ParameterType	char * * *		6259338	0					
ANR	6259403	Identifier	consts		6259338	1					
ANR	6259404	CFGEntryNode	ENTRY		6259338		True				
ANR	6259405	CFGExitNode	EXIT		6259338		True				
ANR	6259406	Symbol	* i		6259338						
ANR	6259407	Symbol	i		6259338						
ANR	6259408	Symbol	& __consts		6259338						
ANR	6259409	Symbol	* consts		6259338						
ANR	6259410	Symbol	* * consts		6259338						
ANR	6259411	Symbol	consts		6259338						
ANR	6259412	Function	r_str_between	3016:0:62707:63062							
ANR	6259413	FunctionDef	"r_str_between (const char * cmt , const char * prefix , const char * suffix)"		6259412	0					
ANR	6259414	CompoundStatement		3016:83:62790:63062	6259412	0					
ANR	6259415	IdentifierDeclStatement	"char * c0 , * c1 ;"	3017:1:62793:62806	6259412	0	True				
ANR	6259416	IdentifierDecl	* c0		6259412	0					
ANR	6259417	IdentifierDeclType	char *		6259412	0					
ANR	6259418	Identifier	c0		6259412	1					
ANR	6259419	IdentifierDecl	* c1		6259412	1					
ANR	6259420	IdentifierDeclType	char *		6259412	0					
ANR	6259421	Identifier	c1		6259412	1					
ANR	6259422	IfStatement	if ( ! cmt || ! prefix || ! suffix || ! * cmt )		6259412	1					
ANR	6259423	Condition	! cmt || ! prefix || ! suffix || ! * cmt	3018:5:62813:62847	6259412	0	True				
ANR	6259424	OrExpression	! cmt || ! prefix || ! suffix || ! * cmt		6259412	0		||			
ANR	6259425	UnaryOperationExpression	! cmt		6259412	0					
ANR	6259426	UnaryOperator	!		6259412	0					
ANR	6259427	Identifier	cmt		6259412	1					
ANR	6259428	OrExpression	! prefix || ! suffix || ! * cmt		6259412	1		||			
ANR	6259429	UnaryOperationExpression	! prefix		6259412	0					
ANR	6259430	UnaryOperator	!		6259412	0					
ANR	6259431	Identifier	prefix		6259412	1					
ANR	6259432	OrExpression	! suffix || ! * cmt		6259412	1		||			
ANR	6259433	UnaryOperationExpression	! suffix		6259412	0					
ANR	6259434	UnaryOperator	!		6259412	0					
ANR	6259435	Identifier	suffix		6259412	1					
ANR	6259436	UnaryOperationExpression	! * cmt		6259412	1					
ANR	6259437	UnaryOperator	!		6259412	0					
ANR	6259438	UnaryOperationExpression	* cmt		6259412	1					
ANR	6259439	UnaryOperator	*		6259412	0					
ANR	6259440	Identifier	cmt		6259412	1					
ANR	6259441	CompoundStatement		3:42:59:59	6259412	1					
ANR	6259442	ReturnStatement	return NULL ;	3019:2:62854:62865	6259412	0	True				
ANR	6259443	Identifier	NULL		6259412	0					
ANR	6259444	ExpressionStatement	"c0 = strstr ( cmt , prefix )"	3021:1:62871:62896	6259412	2	True				
ANR	6259445	AssignmentExpression	"c0 = strstr ( cmt , prefix )"		6259412	0		=			
ANR	6259446	Identifier	c0		6259412	0					
ANR	6259447	CallExpression	"strstr ( cmt , prefix )"		6259412	1					
ANR	6259448	Callee	strstr		6259412	0					
ANR	6259449	Identifier	strstr		6259412	0					
ANR	6259450	ArgumentList	cmt		6259412	1					
ANR	6259451	Argument	cmt		6259412	0					
ANR	6259452	Identifier	cmt		6259412	0					
ANR	6259453	Argument	prefix		6259412	1					
ANR	6259454	Identifier	prefix		6259412	0					
ANR	6259455	IfStatement	if ( c0 )		6259412	3					
ANR	6259456	Condition	c0	3022:5:62903:62904	6259412	0	True				
ANR	6259457	Identifier	c0		6259412	0					
ANR	6259458	CompoundStatement		7:9:116:116	6259412	1					
ANR	6259459	ExpressionStatement	"c1 = strstr ( c0 + strlen ( prefix ) , suffix )"	3023:2:62911:62953	6259412	0	True				
ANR	6259460	AssignmentExpression	"c1 = strstr ( c0 + strlen ( prefix ) , suffix )"		6259412	0		=			
ANR	6259461	Identifier	c1		6259412	0					
ANR	6259462	CallExpression	"strstr ( c0 + strlen ( prefix ) , suffix )"		6259412	1					
ANR	6259463	Callee	strstr		6259412	0					
ANR	6259464	Identifier	strstr		6259412	0					
ANR	6259465	ArgumentList	c0 + strlen ( prefix )		6259412	1					
ANR	6259466	Argument	c0 + strlen ( prefix )		6259412	0					
ANR	6259467	AdditiveExpression	c0 + strlen ( prefix )		6259412	0		+			
ANR	6259468	Identifier	c0		6259412	0					
ANR	6259469	CallExpression	strlen ( prefix )		6259412	1					
ANR	6259470	Callee	strlen		6259412	0					
ANR	6259471	Identifier	strlen		6259412	0					
ANR	6259472	ArgumentList	prefix		6259412	1					
ANR	6259473	Argument	prefix		6259412	0					
ANR	6259474	Identifier	prefix		6259412	0					
ANR	6259475	Argument	suffix		6259412	1					
ANR	6259476	Identifier	suffix		6259412	0					
ANR	6259477	IfStatement	if ( c1 )		6259412	1					
ANR	6259478	Condition	c1	3024:6:62961:62962	6259412	0	True				
ANR	6259479	Identifier	c1		6259412	0					
ANR	6259480	CompoundStatement		9:10:174:174	6259412	1					
ANR	6259481	ReturnStatement	"return r_str_ndup ( c0 + strlen ( prefix ) , ( c1 - c0 - strlen ( prefix ) ) ) ;"	3025:3:62970:63039	6259412	0	True				
ANR	6259482	CallExpression	"r_str_ndup ( c0 + strlen ( prefix ) , ( c1 - c0 - strlen ( prefix ) ) )"		6259412	0					
ANR	6259483	Callee	r_str_ndup		6259412	0					
ANR	6259484	Identifier	r_str_ndup		6259412	0					
ANR	6259485	ArgumentList	c0 + strlen ( prefix )		6259412	1					
ANR	6259486	Argument	c0 + strlen ( prefix )		6259412	0					
ANR	6259487	AdditiveExpression	c0 + strlen ( prefix )		6259412	0		+			
ANR	6259488	Identifier	c0		6259412	0					
ANR	6259489	CallExpression	strlen ( prefix )		6259412	1					
ANR	6259490	Callee	strlen		6259412	0					
ANR	6259491	Identifier	strlen		6259412	0					
ANR	6259492	ArgumentList	prefix		6259412	1					
ANR	6259493	Argument	prefix		6259412	0					
ANR	6259494	Identifier	prefix		6259412	0					
ANR	6259495	Argument	c1 - c0 - strlen ( prefix )		6259412	1					
ANR	6259496	AdditiveExpression	c1 - c0 - strlen ( prefix )		6259412	0		-			
ANR	6259497	Identifier	c1		6259412	0					
ANR	6259498	AdditiveExpression	c0 - strlen ( prefix )		6259412	1		-			
ANR	6259499	Identifier	c0		6259412	0					
ANR	6259500	CallExpression	strlen ( prefix )		6259412	1					
ANR	6259501	Callee	strlen		6259412	0					
ANR	6259502	Identifier	strlen		6259412	0					
ANR	6259503	ArgumentList	prefix		6259412	1					
ANR	6259504	Argument	prefix		6259412	0					
ANR	6259505	Identifier	prefix		6259412	0					
ANR	6259506	ReturnStatement	return NULL ;	3028:1:63049:63060	6259412	4	True				
ANR	6259507	Identifier	NULL		6259412	0					
ANR	6259508	ReturnType	R_API char *		6259412	1					
ANR	6259509	Identifier	r_str_between		6259412	2					
ANR	6259510	ParameterList	"const char * cmt , const char * prefix , const char * suffix"		6259412	3					
ANR	6259511	Parameter	const char * cmt	3016:26:62733:62747	6259412	0	True				
ANR	6259512	ParameterType	const char *		6259412	0					
ANR	6259513	Identifier	cmt		6259412	1					
ANR	6259514	Parameter	const char * prefix	3016:43:62750:62767	6259412	1	True				
ANR	6259515	ParameterType	const char *		6259412	0					
ANR	6259516	Identifier	prefix		6259412	1					
ANR	6259517	Parameter	const char * suffix	3016:63:62770:62787	6259412	2	True				
ANR	6259518	ParameterType	const char *		6259412	0					
ANR	6259519	Identifier	suffix		6259412	1					
ANR	6259520	CFGEntryNode	ENTRY		6259412		True				
ANR	6259521	CFGExitNode	EXIT		6259412		True				
ANR	6259522	Symbol	strlen		6259412						
ANR	6259523	Symbol	NULL		6259412						
ANR	6259524	Symbol	strstr		6259412						
ANR	6259525	Symbol	prefix		6259412						
ANR	6259526	Symbol	r_str_ndup		6259412						
ANR	6259527	Symbol	cmt		6259412						
ANR	6259528	Symbol	* cmt		6259412						
ANR	6259529	Symbol	suffix		6259412						
ANR	6259530	Symbol	c0		6259412						
ANR	6259531	Symbol	c1		6259412						
ANR	6259532	Function	r_str_startswith	3031:0:63065:63267							
ANR	6259533	FunctionDef	"r_str_startswith (const char * str , const char * needle)"		6259532	0					
ANR	6259534	CompoundStatement		3031:65:63130:63267	6259532	0					
ANR	6259535	ExpressionStatement	"r_return_val_if_fail ( str && needle , false )"	3032:1:63133:63176	6259532	0	True				
ANR	6259536	CallExpression	"r_return_val_if_fail ( str && needle , false )"		6259532	0					
ANR	6259537	Callee	r_return_val_if_fail		6259532	0					
ANR	6259538	Identifier	r_return_val_if_fail		6259532	0					
ANR	6259539	ArgumentList	str && needle		6259532	1					
ANR	6259540	Argument	str && needle		6259532	0					
ANR	6259541	AndExpression	str && needle		6259532	0		&&			
ANR	6259542	Identifier	str		6259532	0					
ANR	6259543	Identifier	needle		6259532	1					
ANR	6259544	Argument	false		6259532	1					
ANR	6259545	Identifier	false		6259532	0					
ANR	6259546	IfStatement	if ( str == needle )		6259532	1					
ANR	6259547	Condition	str == needle	3033:5:63183:63195	6259532	0	True				
ANR	6259548	EqualityExpression	str == needle		6259532	0		==			
ANR	6259549	Identifier	str		6259532	0					
ANR	6259550	Identifier	needle		6259532	1					
ANR	6259551	CompoundStatement		3:20:67:67	6259532	1					
ANR	6259552	ReturnStatement	return true ;	3034:2:63202:63213	6259532	0	True				
ANR	6259553	Identifier	true		6259532	0					
ANR	6259554	ReturnStatement	"return ! strncmp ( str , needle , strlen ( needle ) ) ;"	3036:1:63219:63265	6259532	2	True				
ANR	6259555	UnaryOperationExpression	"! strncmp ( str , needle , strlen ( needle ) )"		6259532	0					
ANR	6259556	UnaryOperator	!		6259532	0					
ANR	6259557	CallExpression	"strncmp ( str , needle , strlen ( needle ) )"		6259532	1					
ANR	6259558	Callee	strncmp		6259532	0					
ANR	6259559	Identifier	strncmp		6259532	0					
ANR	6259560	ArgumentList	str		6259532	1					
ANR	6259561	Argument	str		6259532	0					
ANR	6259562	Identifier	str		6259532	0					
ANR	6259563	Argument	needle		6259532	1					
ANR	6259564	Identifier	needle		6259532	0					
ANR	6259565	Argument	strlen ( needle )		6259532	2					
ANR	6259566	CallExpression	strlen ( needle )		6259532	0					
ANR	6259567	Callee	strlen		6259532	0					
ANR	6259568	Identifier	strlen		6259532	0					
ANR	6259569	ArgumentList	needle		6259532	1					
ANR	6259570	Argument	needle		6259532	0					
ANR	6259571	Identifier	needle		6259532	0					
ANR	6259572	ReturnType	R_API bool		6259532	1					
ANR	6259573	Identifier	r_str_startswith		6259532	2					
ANR	6259574	ParameterList	"const char * str , const char * needle"		6259532	3					
ANR	6259575	Parameter	const char * str	3031:28:63093:63107	6259532	0	True				
ANR	6259576	ParameterType	const char *		6259532	0					
ANR	6259577	Identifier	str		6259532	1					
ANR	6259578	Parameter	const char * needle	3031:45:63110:63127	6259532	1	True				
ANR	6259579	ParameterType	const char *		6259532	0					
ANR	6259580	Identifier	needle		6259532	1					
ANR	6259581	CFGEntryNode	ENTRY		6259532		True				
ANR	6259582	CFGExitNode	EXIT		6259532		True				
ANR	6259583	Symbol	str		6259532						
ANR	6259584	Symbol	strlen		6259532						
ANR	6259585	Symbol	strncmp		6259532						
ANR	6259586	Symbol	false		6259532						
ANR	6259587	Symbol	true		6259532						
ANR	6259588	Symbol	needle		6259532						
ANR	6259589	Function	r_str_endswith	3039:0:63270:63575							
ANR	6259590	FunctionDef	"r_str_endswith (const char * str , const char * needle)"		6259589	0					
ANR	6259591	CompoundStatement		3039:63:63333:63575	6259589	0					
ANR	6259592	ExpressionStatement	"r_return_val_if_fail ( str && needle , false )"	3040:1:63336:63379	6259589	0	True				
ANR	6259593	CallExpression	"r_return_val_if_fail ( str && needle , false )"		6259589	0					
ANR	6259594	Callee	r_return_val_if_fail		6259589	0					
ANR	6259595	Identifier	r_return_val_if_fail		6259589	0					
ANR	6259596	ArgumentList	str && needle		6259589	1					
ANR	6259597	Argument	str && needle		6259589	0					
ANR	6259598	AndExpression	str && needle		6259589	0		&&			
ANR	6259599	Identifier	str		6259589	0					
ANR	6259600	Identifier	needle		6259589	1					
ANR	6259601	Argument	false		6259589	1					
ANR	6259602	Identifier	false		6259589	0					
ANR	6259603	IfStatement	if ( ! * needle )		6259589	1					
ANR	6259604	Condition	! * needle	3041:5:63386:63393	6259589	0	True				
ANR	6259605	UnaryOperationExpression	! * needle		6259589	0					
ANR	6259606	UnaryOperator	!		6259589	0					
ANR	6259607	UnaryOperationExpression	* needle		6259589	1					
ANR	6259608	UnaryOperator	*		6259589	0					
ANR	6259609	Identifier	needle		6259589	1					
ANR	6259610	CompoundStatement		3:15:62:62	6259589	1					
ANR	6259611	ReturnStatement	return true ;	3042:2:63400:63411	6259589	0	True				
ANR	6259612	Identifier	true		6259589	0					
ANR	6259613	IdentifierDeclStatement	int slen = strlen ( str ) ;	3044:1:63417:63440	6259589	2	True				
ANR	6259614	IdentifierDecl	slen = strlen ( str )		6259589	0					
ANR	6259615	IdentifierDeclType	int		6259589	0					
ANR	6259616	Identifier	slen		6259589	1					
ANR	6259617	AssignmentExpression	slen = strlen ( str )		6259589	2		=			
ANR	6259618	Identifier	slen		6259589	0					
ANR	6259619	CallExpression	strlen ( str )		6259589	1					
ANR	6259620	Callee	strlen		6259589	0					
ANR	6259621	Identifier	strlen		6259589	0					
ANR	6259622	ArgumentList	str		6259589	1					
ANR	6259623	Argument	str		6259589	0					
ANR	6259624	Identifier	str		6259589	0					
ANR	6259625	IdentifierDeclStatement	int nlen = strlen ( needle ) ;	3045:1:63443:63469	6259589	3	True				
ANR	6259626	IdentifierDecl	nlen = strlen ( needle )		6259589	0					
ANR	6259627	IdentifierDeclType	int		6259589	0					
ANR	6259628	Identifier	nlen		6259589	1					
ANR	6259629	AssignmentExpression	nlen = strlen ( needle )		6259589	2		=			
ANR	6259630	Identifier	nlen		6259589	0					
ANR	6259631	CallExpression	strlen ( needle )		6259589	1					
ANR	6259632	Callee	strlen		6259589	0					
ANR	6259633	Identifier	strlen		6259589	0					
ANR	6259634	ArgumentList	needle		6259589	1					
ANR	6259635	Argument	needle		6259589	0					
ANR	6259636	Identifier	needle		6259589	0					
ANR	6259637	IfStatement	if ( ! slen || ! nlen || slen < nlen )		6259589	4					
ANR	6259638	Condition	! slen || ! nlen || slen < nlen	3046:5:63476:63504	6259589	0	True				
ANR	6259639	OrExpression	! slen || ! nlen || slen < nlen		6259589	0		||			
ANR	6259640	UnaryOperationExpression	! slen		6259589	0					
ANR	6259641	UnaryOperator	!		6259589	0					
ANR	6259642	Identifier	slen		6259589	1					
ANR	6259643	OrExpression	! nlen || slen < nlen		6259589	1		||			
ANR	6259644	UnaryOperationExpression	! nlen		6259589	0					
ANR	6259645	UnaryOperator	!		6259589	0					
ANR	6259646	Identifier	nlen		6259589	1					
ANR	6259647	RelationalExpression	slen < nlen		6259589	1		<			
ANR	6259648	Identifier	slen		6259589	0					
ANR	6259649	Identifier	nlen		6259589	1					
ANR	6259650	CompoundStatement		8:36:173:173	6259589	1					
ANR	6259651	ReturnStatement	return false ;	3047:2:63511:63523	6259589	0	True				
ANR	6259652	Identifier	false		6259589	0					
ANR	6259653	ReturnStatement	"return ! strcmp ( str + ( slen - nlen ) , needle ) ;"	3049:1:63529:63573	6259589	5	True				
ANR	6259654	UnaryOperationExpression	"! strcmp ( str + ( slen - nlen ) , needle )"		6259589	0					
ANR	6259655	UnaryOperator	!		6259589	0					
ANR	6259656	CallExpression	"strcmp ( str + ( slen - nlen ) , needle )"		6259589	1					
ANR	6259657	Callee	strcmp		6259589	0					
ANR	6259658	Identifier	strcmp		6259589	0					
ANR	6259659	ArgumentList	str + ( slen - nlen )		6259589	1					
ANR	6259660	Argument	str + ( slen - nlen )		6259589	0					
ANR	6259661	AdditiveExpression	str + ( slen - nlen )		6259589	0		+			
ANR	6259662	Identifier	str		6259589	0					
ANR	6259663	AdditiveExpression	slen - nlen		6259589	1		-			
ANR	6259664	Identifier	slen		6259589	0					
ANR	6259665	Identifier	nlen		6259589	1					
ANR	6259666	Argument	needle		6259589	1					
ANR	6259667	Identifier	needle		6259589	0					
ANR	6259668	ReturnType	R_API bool		6259589	1					
ANR	6259669	Identifier	r_str_endswith		6259589	2					
ANR	6259670	ParameterList	"const char * str , const char * needle"		6259589	3					
ANR	6259671	Parameter	const char * str	3039:26:63296:63310	6259589	0	True				
ANR	6259672	ParameterType	const char *		6259589	0					
ANR	6259673	Identifier	str		6259589	1					
ANR	6259674	Parameter	const char * needle	3039:43:63313:63330	6259589	1	True				
ANR	6259675	ParameterType	const char *		6259589	0					
ANR	6259676	Identifier	needle		6259589	1					
ANR	6259677	CFGEntryNode	ENTRY		6259589		True				
ANR	6259678	CFGExitNode	EXIT		6259589		True				
ANR	6259679	Symbol	str		6259589						
ANR	6259680	Symbol	strcmp		6259589						
ANR	6259681	Symbol	strlen		6259589						
ANR	6259682	Symbol	nlen		6259589						
ANR	6259683	Symbol	slen		6259589						
ANR	6259684	Symbol	false		6259589						
ANR	6259685	Symbol	true		6259589						
ANR	6259686	Symbol	* needle		6259589						
ANR	6259687	Symbol	needle		6259589						
ANR	6259688	Function	r_str_split_list	3053:0:63653:64063							
ANR	6259689	FunctionDef	"r_str_split_list (char * str , const char * c , int n)"		6259688	0					
ANR	6259690	CompoundStatement		3053:64:63717:64063	6259688	0					
ANR	6259691	ExpressionStatement	"r_return_val_if_fail ( str && c , NULL )"	3054:1:63720:63757	6259688	0	True				
ANR	6259692	CallExpression	"r_return_val_if_fail ( str && c , NULL )"		6259688	0					
ANR	6259693	Callee	r_return_val_if_fail		6259688	0					
ANR	6259694	Identifier	r_return_val_if_fail		6259688	0					
ANR	6259695	ArgumentList	str && c		6259688	1					
ANR	6259696	Argument	str && c		6259688	0					
ANR	6259697	AndExpression	str && c		6259688	0		&&			
ANR	6259698	Identifier	str		6259688	0					
ANR	6259699	Identifier	c		6259688	1					
ANR	6259700	Argument	NULL		6259688	1					
ANR	6259701	Identifier	NULL		6259688	0					
ANR	6259702	IdentifierDeclStatement	RList * lst = r_list_newf ( NULL ) ;	3055:1:63760:63791	6259688	1	True				
ANR	6259703	IdentifierDecl	* lst = r_list_newf ( NULL )		6259688	0					
ANR	6259704	IdentifierDeclType	RList *		6259688	0					
ANR	6259705	Identifier	lst		6259688	1					
ANR	6259706	AssignmentExpression	* lst = r_list_newf ( NULL )		6259688	2		=			
ANR	6259707	Identifier	lst		6259688	0					
ANR	6259708	CallExpression	r_list_newf ( NULL )		6259688	1					
ANR	6259709	Callee	r_list_newf		6259688	0					
ANR	6259710	Identifier	r_list_newf		6259688	0					
ANR	6259711	ArgumentList	NULL		6259688	1					
ANR	6259712	Argument	NULL		6259688	0					
ANR	6259713	Identifier	NULL		6259688	0					
ANR	6259714	IdentifierDeclStatement	char * aux = str ;	3056:1:63794:63809	6259688	2	True				
ANR	6259715	IdentifierDecl	* aux = str		6259688	0					
ANR	6259716	IdentifierDeclType	char *		6259688	0					
ANR	6259717	Identifier	aux		6259688	1					
ANR	6259718	AssignmentExpression	* aux = str		6259688	2		=			
ANR	6259719	Identifier	str		6259688	0					
ANR	6259720	Identifier	str		6259688	1					
ANR	6259721	IdentifierDeclStatement	int i = 0 ;	3057:1:63812:63821	6259688	3	True				
ANR	6259722	IdentifierDecl	i = 0		6259688	0					
ANR	6259723	IdentifierDeclType	int		6259688	0					
ANR	6259724	Identifier	i		6259688	1					
ANR	6259725	AssignmentExpression	i = 0		6259688	2		=			
ANR	6259726	Identifier	i		6259688	0					
ANR	6259727	PrimaryExpression	0		6259688	1					
ANR	6259728	IdentifierDeclStatement	char * e = aux ;	3058:1:63824:63838	6259688	4	True				
ANR	6259729	IdentifierDecl	* e = aux		6259688	0					
ANR	6259730	IdentifierDeclType	char *		6259688	0					
ANR	6259731	Identifier	e		6259688	1					
ANR	6259732	AssignmentExpression	* e = aux		6259688	2		=			
ANR	6259733	Identifier	aux		6259688	0					
ANR	6259734	Identifier	aux		6259688	1					
ANR	6259735	ForStatement	for ( ; e ; )		6259688	5					
ANR	6259736	Condition	e	3059:7:63847:63847	6259688	0	True				
ANR	6259737	Identifier	e		6259688	0					
ANR	6259738	CompoundStatement		7:11:133:133	6259688	1					
ANR	6259739	ExpressionStatement	"e = strstr ( aux , c )"	3060:2:63855:63874	6259688	0	True				
ANR	6259740	AssignmentExpression	"e = strstr ( aux , c )"		6259688	0		=			
ANR	6259741	Identifier	e		6259688	0					
ANR	6259742	CallExpression	"strstr ( aux , c )"		6259688	1					
ANR	6259743	Callee	strstr		6259688	0					
ANR	6259744	Identifier	strstr		6259688	0					
ANR	6259745	ArgumentList	aux		6259688	1					
ANR	6259746	Argument	aux		6259688	0					
ANR	6259747	Identifier	aux		6259688	0					
ANR	6259748	Argument	c		6259688	1					
ANR	6259749	Identifier	c		6259688	0					
ANR	6259750	IfStatement	if ( n > 0 )		6259688	1					
ANR	6259751	Condition	n > 0	3061:6:63882:63886	6259688	0	True				
ANR	6259752	RelationalExpression	n > 0		6259688	0		>			
ANR	6259753	Identifier	n		6259688	0					
ANR	6259754	PrimaryExpression	0		6259688	1					
ANR	6259755	CompoundStatement		9:13:171:171	6259688	1					
ANR	6259756	IfStatement	if ( ++ i > n )		6259688	0					
ANR	6259757	Condition	++ i > n	3062:7:63898:63904	6259688	0	True				
ANR	6259758	RelationalExpression	++ i > n		6259688	0		>			
ANR	6259759	UnaryExpression	++ i		6259688	0					
ANR	6259760	IncDec	++		6259688	0					
ANR	6259761	Identifier	i		6259688	1					
ANR	6259762	Identifier	n		6259688	1					
ANR	6259763	CompoundStatement		10:16:189:189	6259688	1					
ANR	6259764	ExpressionStatement	"r_list_append ( lst , aux )"	3063:4:63913:63937	6259688	0	True				
ANR	6259765	CallExpression	"r_list_append ( lst , aux )"		6259688	0					
ANR	6259766	Callee	r_list_append		6259688	0					
ANR	6259767	Identifier	r_list_append		6259688	0					
ANR	6259768	ArgumentList	lst		6259688	1					
ANR	6259769	Argument	lst		6259688	0					
ANR	6259770	Identifier	lst		6259688	0					
ANR	6259771	Argument	aux		6259688	1					
ANR	6259772	Identifier	aux		6259688	0					
ANR	6259773	BreakStatement	break ;	3064:4:63943:63948	6259688	1	True				
ANR	6259774	IfStatement	if ( e )		6259688	2					
ANR	6259775	Condition	e	3067:6:63965:63965	6259688	0	True				
ANR	6259776	Identifier	e		6259688	0					
ANR	6259777	CompoundStatement		15:9:250:250	6259688	1					
ANR	6259778	ExpressionStatement	* e ++ = 0	3068:3:63973:63982	6259688	0	True				
ANR	6259779	AssignmentExpression	* e ++ = 0		6259688	0		=			
ANR	6259780	UnaryOperationExpression	* e ++		6259688	0					
ANR	6259781	UnaryOperator	*		6259688	0					
ANR	6259782	PostIncDecOperationExpression	e ++		6259688	1					
ANR	6259783	Identifier	e		6259688	0					
ANR	6259784	IncDec	++		6259688	1					
ANR	6259785	PrimaryExpression	0		6259688	1					
ANR	6259786	ExpressionStatement	r_str_trim ( aux )	3070:2:63990:64006	6259688	3	True				
ANR	6259787	CallExpression	r_str_trim ( aux )		6259688	0					
ANR	6259788	Callee	r_str_trim		6259688	0					
ANR	6259789	Identifier	r_str_trim		6259688	0					
ANR	6259790	ArgumentList	aux		6259688	1					
ANR	6259791	Argument	aux		6259688	0					
ANR	6259792	Identifier	aux		6259688	0					
ANR	6259793	ExpressionStatement	"r_list_append ( lst , aux )"	3071:2:64010:64034	6259688	4	True				
ANR	6259794	CallExpression	"r_list_append ( lst , aux )"		6259688	0					
ANR	6259795	Callee	r_list_append		6259688	0					
ANR	6259796	Identifier	r_list_append		6259688	0					
ANR	6259797	ArgumentList	lst		6259688	1					
ANR	6259798	Argument	lst		6259688	0					
ANR	6259799	Identifier	lst		6259688	0					
ANR	6259800	Argument	aux		6259688	1					
ANR	6259801	Identifier	aux		6259688	0					
ANR	6259802	ExpressionStatement	aux = e	3072:2:64038:64045	6259688	5	True				
ANR	6259803	AssignmentExpression	aux = e		6259688	0		=			
ANR	6259804	Identifier	aux		6259688	0					
ANR	6259805	Identifier	e		6259688	1					
ANR	6259806	ReturnStatement	return lst ;	3074:1:64051:64061	6259688	6	True				
ANR	6259807	Identifier	lst		6259688	0					
ANR	6259808	ReturnType	R_API RList *		6259688	1					
ANR	6259809	Identifier	r_str_split_list		6259688	2					
ANR	6259810	ParameterList	"char * str , const char * c , int n"		6259688	3					
ANR	6259811	Parameter	char * str	3053:30:63683:63691	6259688	0	True				
ANR	6259812	ParameterType	char *		6259688	0					
ANR	6259813	Identifier	str		6259688	1					
ANR	6259814	Parameter	const char * c	3053:41:63694:63706	6259688	1	True				
ANR	6259815	ParameterType	const char *		6259688	0					
ANR	6259816	Identifier	c		6259688	1					
ANR	6259817	Parameter	int n	3053:56:63709:63713	6259688	2	True				
ANR	6259818	ParameterType	int		6259688	0					
ANR	6259819	Identifier	n		6259688	1					
ANR	6259820	CFGEntryNode	ENTRY		6259688		True				
ANR	6259821	CFGExitNode	EXIT		6259688		True				
ANR	6259822	Symbol	str		6259688						
ANR	6259823	Symbol	c		6259688						
ANR	6259824	Symbol	NULL		6259688						
ANR	6259825	Symbol	r_list_newf		6259688						
ANR	6259826	Symbol	aux		6259688						
ANR	6259827	Symbol	e		6259688						
ANR	6259828	Symbol	strstr		6259688						
ANR	6259829	Symbol	i		6259688						
ANR	6259830	Symbol	lst		6259688						
ANR	6259831	Symbol	* e ++		6259688						
ANR	6259832	Symbol	n		6259688						
ANR	6259833	Function	r_str_split_duplist	3077:0:64066:64515							
ANR	6259834	FunctionDef	"r_str_split_duplist (const char * _str , const char * c)"		6259833	0					
ANR	6259835	CompoundStatement		3077:67:64133:64515	6259833	0					
ANR	6259836	ExpressionStatement	"r_return_val_if_fail ( _str && c , NULL )"	3078:1:64136:64174	6259833	0	True				
ANR	6259837	CallExpression	"r_return_val_if_fail ( _str && c , NULL )"		6259833	0					
ANR	6259838	Callee	r_return_val_if_fail		6259833	0					
ANR	6259839	Identifier	r_return_val_if_fail		6259833	0					
ANR	6259840	ArgumentList	_str && c		6259833	1					
ANR	6259841	Argument	_str && c		6259833	0					
ANR	6259842	AndExpression	_str && c		6259833	0		&&			
ANR	6259843	Identifier	_str		6259833	0					
ANR	6259844	Identifier	c		6259833	1					
ANR	6259845	Argument	NULL		6259833	1					
ANR	6259846	Identifier	NULL		6259833	0					
ANR	6259847	IdentifierDeclStatement	RList * lst = r_list_newf ( free ) ;	3079:1:64177:64208	6259833	1	True				
ANR	6259848	IdentifierDecl	* lst = r_list_newf ( free )		6259833	0					
ANR	6259849	IdentifierDeclType	RList *		6259833	0					
ANR	6259850	Identifier	lst		6259833	1					
ANR	6259851	AssignmentExpression	* lst = r_list_newf ( free )		6259833	2		=			
ANR	6259852	Identifier	lst		6259833	0					
ANR	6259853	CallExpression	r_list_newf ( free )		6259833	1					
ANR	6259854	Callee	r_list_newf		6259833	0					
ANR	6259855	Identifier	r_list_newf		6259833	0					
ANR	6259856	ArgumentList	free		6259833	1					
ANR	6259857	Argument	free		6259833	0					
ANR	6259858	Identifier	free		6259833	0					
ANR	6259859	IdentifierDeclStatement	char * str = strdup ( _str ) ;	3080:1:64211:64236	6259833	2	True				
ANR	6259860	IdentifierDecl	* str = strdup ( _str )		6259833	0					
ANR	6259861	IdentifierDeclType	char *		6259833	0					
ANR	6259862	Identifier	str		6259833	1					
ANR	6259863	AssignmentExpression	* str = strdup ( _str )		6259833	2		=			
ANR	6259864	Identifier	str		6259833	0					
ANR	6259865	CallExpression	strdup ( _str )		6259833	1					
ANR	6259866	Callee	strdup		6259833	0					
ANR	6259867	Identifier	strdup		6259833	0					
ANR	6259868	ArgumentList	_str		6259833	1					
ANR	6259869	Argument	_str		6259833	0					
ANR	6259870	Identifier	_str		6259833	0					
ANR	6259871	IdentifierDeclStatement	char * aux ;	3082:1:64240:64249	6259833	3	True				
ANR	6259872	IdentifierDecl	* aux		6259833	0					
ANR	6259873	IdentifierDeclType	char *		6259833	0					
ANR	6259874	Identifier	aux		6259833	1					
ANR	6259875	IdentifierDeclStatement	bool first_loop = true ;	3083:1:64252:64274	6259833	4	True				
ANR	6259876	IdentifierDecl	first_loop = true		6259833	0					
ANR	6259877	IdentifierDeclType	bool		6259833	0					
ANR	6259878	Identifier	first_loop		6259833	1					
ANR	6259879	AssignmentExpression	first_loop = true		6259833	2		=			
ANR	6259880	Identifier	true		6259833	0					
ANR	6259881	Identifier	true		6259833	1					
ANR	6259882	ForStatement	for ( ; ; )		6259833	5					
ANR	6259883	CompoundStatement		9:10:153:153	6259833	0					
ANR	6259884	IfStatement	if ( first_loop )		6259833	0					
ANR	6259885	Condition	first_loop	3086:6:64295:64304	6259833	0	True				
ANR	6259886	Identifier	first_loop		6259833	0					
ANR	6259887	CompoundStatement		10:18:173:173	6259833	1					
ANR	6259888	ExpressionStatement	"aux = strtok ( str , c )"	3087:3:64312:64333	6259833	0	True				
ANR	6259889	AssignmentExpression	"aux = strtok ( str , c )"		6259833	0		=			
ANR	6259890	Identifier	aux		6259833	0					
ANR	6259891	CallExpression	"strtok ( str , c )"		6259833	1					
ANR	6259892	Callee	strtok		6259833	0					
ANR	6259893	Identifier	strtok		6259833	0					
ANR	6259894	ArgumentList	str		6259833	1					
ANR	6259895	Argument	str		6259833	0					
ANR	6259896	Identifier	str		6259833	0					
ANR	6259897	Argument	c		6259833	1					
ANR	6259898	Identifier	c		6259833	0					
ANR	6259899	ExpressionStatement	first_loop = false	3088:3:64338:64356	6259833	1	True				
ANR	6259900	AssignmentExpression	first_loop = false		6259833	0		=			
ANR	6259901	Identifier	first_loop		6259833	0					
ANR	6259902	Identifier	false		6259833	1					
ANR	6259903	ElseStatement	else		6259833	0					
ANR	6259904	CompoundStatement		13:9:233:233	6259833	0					
ANR	6259905	ExpressionStatement	"aux = strtok ( NULL , c )"	3090:3:64372:64394	6259833	0	True				
ANR	6259906	AssignmentExpression	"aux = strtok ( NULL , c )"		6259833	0		=			
ANR	6259907	Identifier	aux		6259833	0					
ANR	6259908	CallExpression	"strtok ( NULL , c )"		6259833	1					
ANR	6259909	Callee	strtok		6259833	0					
ANR	6259910	Identifier	strtok		6259833	0					
ANR	6259911	ArgumentList	NULL		6259833	1					
ANR	6259912	Argument	NULL		6259833	0					
ANR	6259913	Identifier	NULL		6259833	0					
ANR	6259914	Argument	c		6259833	1					
ANR	6259915	Identifier	c		6259833	0					
ANR	6259916	IfStatement	if ( ! aux )		6259833	1					
ANR	6259917	Condition	! aux	3092:6:64406:64409	6259833	0	True				
ANR	6259918	UnaryOperationExpression	! aux		6259833	0					
ANR	6259919	UnaryOperator	!		6259833	0					
ANR	6259920	Identifier	aux		6259833	1					
ANR	6259921	CompoundStatement		16:12:278:278	6259833	1					
ANR	6259922	BreakStatement	break ;	3093:3:64417:64422	6259833	0	True				
ANR	6259923	ExpressionStatement	r_str_trim ( aux )	3095:2:64430:64446	6259833	2	True				
ANR	6259924	CallExpression	r_str_trim ( aux )		6259833	0					
ANR	6259925	Callee	r_str_trim		6259833	0					
ANR	6259926	Identifier	r_str_trim		6259833	0					
ANR	6259927	ArgumentList	aux		6259833	1					
ANR	6259928	Argument	aux		6259833	0					
ANR	6259929	Identifier	aux		6259833	0					
ANR	6259930	ExpressionStatement	"r_list_append ( lst , strdup ( aux ) )"	3096:2:64450:64483	6259833	3	True				
ANR	6259931	CallExpression	"r_list_append ( lst , strdup ( aux ) )"		6259833	0					
ANR	6259932	Callee	r_list_append		6259833	0					
ANR	6259933	Identifier	r_list_append		6259833	0					
ANR	6259934	ArgumentList	lst		6259833	1					
ANR	6259935	Argument	lst		6259833	0					
ANR	6259936	Identifier	lst		6259833	0					
ANR	6259937	Argument	strdup ( aux )		6259833	1					
ANR	6259938	CallExpression	strdup ( aux )		6259833	0					
ANR	6259939	Callee	strdup		6259833	0					
ANR	6259940	Identifier	strdup		6259833	0					
ANR	6259941	ArgumentList	aux		6259833	1					
ANR	6259942	Argument	aux		6259833	0					
ANR	6259943	Identifier	aux		6259833	0					
ANR	6259944	ExpressionStatement	free ( str )	3099:1:64490:64500	6259833	6	True				
ANR	6259945	CallExpression	free ( str )		6259833	0					
ANR	6259946	Callee	free		6259833	0					
ANR	6259947	Identifier	free		6259833	0					
ANR	6259948	ArgumentList	str		6259833	1					
ANR	6259949	Argument	str		6259833	0					
ANR	6259950	Identifier	str		6259833	0					
ANR	6259951	ReturnStatement	return lst ;	3100:1:64503:64513	6259833	7	True				
ANR	6259952	Identifier	lst		6259833	0					
ANR	6259953	ReturnType	R_API RList *		6259833	1					
ANR	6259954	Identifier	r_str_split_duplist		6259833	2					
ANR	6259955	ParameterList	"const char * _str , const char * c"		6259833	3					
ANR	6259956	Parameter	const char * _str	3077:33:64099:64114	6259833	0	True				
ANR	6259957	ParameterType	const char *		6259833	0					
ANR	6259958	Identifier	_str		6259833	1					
ANR	6259959	Parameter	const char * c	3077:51:64117:64129	6259833	1	True				
ANR	6259960	ParameterType	const char *		6259833	0					
ANR	6259961	Identifier	c		6259833	1					
ANR	6259962	CFGEntryNode	ENTRY		6259833		True				
ANR	6259963	CFGExitNode	EXIT		6259833		True				
ANR	6259964	InfiniteForNode	true		6259833		True				
ANR	6259965	Symbol	c		6259833						
ANR	6259966	Symbol	NULL		6259833						
ANR	6259967	Symbol	r_list_newf		6259833						
ANR	6259968	Symbol	aux		6259833						
ANR	6259969	Symbol	false		6259833						
ANR	6259970	Symbol	strtok		6259833						
ANR	6259971	Symbol	lst		6259833						
ANR	6259972	Symbol	str		6259833						
ANR	6259973	Symbol	first_loop		6259833						
ANR	6259974	Symbol	true		6259833						
ANR	6259975	Symbol	strdup		6259833						
ANR	6259976	Symbol	free		6259833						
ANR	6259977	Symbol	_str		6259833						
ANR	6259978	Function	r_str_split_lines	3103:0:64518:65035							
ANR	6259979	FunctionDef	"r_str_split_lines (char * str , int * count)"		6259978	0					
ANR	6259980	CompoundStatement		3103:52:64570:65035	6259978	0					
ANR	6259981	IdentifierDeclStatement	int i ;	3104:1:64573:64578	6259978	0	True				
ANR	6259982	IdentifierDecl	i		6259978	0					
ANR	6259983	IdentifierDeclType	int		6259978	0					
ANR	6259984	Identifier	i		6259978	1					
ANR	6259985	IdentifierDeclStatement	int lines = 0 ;	3105:1:64581:64594	6259978	1	True				
ANR	6259986	IdentifierDecl	lines = 0		6259978	0					
ANR	6259987	IdentifierDeclType	int		6259978	0					
ANR	6259988	Identifier	lines		6259978	1					
ANR	6259989	AssignmentExpression	lines = 0		6259978	2		=			
ANR	6259990	Identifier	lines		6259978	0					
ANR	6259991	PrimaryExpression	0		6259978	1					
ANR	6259992	IfStatement	if ( ! str )		6259978	2					
ANR	6259993	Condition	! str	3106:5:64601:64604	6259978	0	True				
ANR	6259994	UnaryOperationExpression	! str		6259978	0					
ANR	6259995	UnaryOperator	!		6259978	0					
ANR	6259996	Identifier	str		6259978	1					
ANR	6259997	CompoundStatement		4:11:36:36	6259978	1					
ANR	6259998	ReturnStatement	return NULL ;	3107:2:64611:64622	6259978	0	True				
ANR	6259999	Identifier	NULL		6259978	0					
ANR	6260000	IdentifierDeclStatement	int * indexes = NULL ;	3109:1:64628:64647	6259978	3	True				
ANR	6260001	IdentifierDecl	* indexes = NULL		6259978	0					
ANR	6260002	IdentifierDeclType	int *		6259978	0					
ANR	6260003	Identifier	indexes		6259978	1					
ANR	6260004	AssignmentExpression	* indexes = NULL		6259978	2		=			
ANR	6260005	Identifier	NULL		6259978	0					
ANR	6260006	Identifier	NULL		6259978	1					
ANR	6260007	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		6259978	4					
ANR	6260008	ForInit	i = 0 ;	3111:6:64671:64676	6259978	0	True				
ANR	6260009	AssignmentExpression	i = 0		6259978	0		=			
ANR	6260010	Identifier	i		6259978	0					
ANR	6260011	PrimaryExpression	0		6259978	1					
ANR	6260012	Condition	str [ i ]	3111:13:64678:64683	6259978	1	True				
ANR	6260013	ArrayIndexing	str [ i ]		6259978	0					
ANR	6260014	Identifier	str		6259978	0					
ANR	6260015	Identifier	i		6259978	1					
ANR	6260016	PostIncDecOperationExpression	i ++	3111:21:64686:64688	6259978	2	True				
ANR	6260017	Identifier	i		6259978	0					
ANR	6260018	IncDec	++		6259978	1					
ANR	6260019	CompoundStatement		9:26:120:120	6259978	3					
ANR	6260020	IfStatement	if ( str [ i ] == '\\n' )		6259978	0					
ANR	6260021	Condition	str [ i ] == '\\n'	3112:6:64699:64712	6259978	0	True				
ANR	6260022	EqualityExpression	str [ i ] == '\\n'		6259978	0		==			
ANR	6260023	ArrayIndexing	str [ i ]		6259978	0					
ANR	6260024	Identifier	str		6259978	0					
ANR	6260025	Identifier	i		6259978	1					
ANR	6260026	PrimaryExpression	'\\n'		6259978	1					
ANR	6260027	CompoundStatement		10:22:144:144	6259978	1					
ANR	6260028	ExpressionStatement	lines ++	3113:3:64720:64727	6259978	0	True				
ANR	6260029	PostIncDecOperationExpression	lines ++		6259978	0					
ANR	6260030	Identifier	lines		6259978	0					
ANR	6260031	IncDec	++		6259978	1					
ANR	6260032	ExpressionStatement	"indexes = calloc ( sizeof ( int ) , lines + 1 )"	3117:1:64766:64808	6259978	5	True				
ANR	6260033	AssignmentExpression	"indexes = calloc ( sizeof ( int ) , lines + 1 )"		6259978	0		=			
ANR	6260034	Identifier	indexes		6259978	0					
ANR	6260035	CallExpression	"calloc ( sizeof ( int ) , lines + 1 )"		6259978	1					
ANR	6260036	Callee	calloc		6259978	0					
ANR	6260037	Identifier	calloc		6259978	0					
ANR	6260038	ArgumentList	sizeof ( int )		6259978	1					
ANR	6260039	Argument	sizeof ( int )		6259978	0					
ANR	6260040	SizeofExpression	sizeof ( int )		6259978	0					
ANR	6260041	Sizeof	sizeof		6259978	0					
ANR	6260042	SizeofOperand	int		6259978	1					
ANR	6260043	Argument	lines + 1		6259978	1					
ANR	6260044	AdditiveExpression	lines + 1		6259978	0		+			
ANR	6260045	Identifier	lines		6259978	0					
ANR	6260046	PrimaryExpression	1		6259978	1					
ANR	6260047	IfStatement	if ( ! indexes )		6259978	6					
ANR	6260048	Condition	! indexes	3118:5:64815:64822	6259978	0	True				
ANR	6260049	UnaryOperationExpression	! indexes		6259978	0					
ANR	6260050	UnaryOperator	!		6259978	0					
ANR	6260051	Identifier	indexes		6259978	1					
ANR	6260052	CompoundStatement		16:15:254:254	6259978	1					
ANR	6260053	ReturnStatement	return NULL ;	3119:2:64829:64840	6259978	0	True				
ANR	6260054	Identifier	NULL		6259978	0					
ANR	6260055	IdentifierDeclStatement	int line = 0 ;	3121:1:64846:64858	6259978	7	True				
ANR	6260056	IdentifierDecl	line = 0		6259978	0					
ANR	6260057	IdentifierDeclType	int		6259978	0					
ANR	6260058	Identifier	line		6259978	1					
ANR	6260059	AssignmentExpression	line = 0		6259978	2		=			
ANR	6260060	Identifier	line		6259978	0					
ANR	6260061	PrimaryExpression	0		6259978	1					
ANR	6260062	ExpressionStatement	indexes [ line ++ ] = 0	3122:1:64861:64880	6259978	8	True				
ANR	6260063	AssignmentExpression	indexes [ line ++ ] = 0		6259978	0		=			
ANR	6260064	ArrayIndexing	indexes [ line ++ ]		6259978	0					
ANR	6260065	Identifier	indexes		6259978	0					
ANR	6260066	PostIncDecOperationExpression	line ++		6259978	1					
ANR	6260067	Identifier	line		6259978	0					
ANR	6260068	IncDec	++		6259978	1					
ANR	6260069	PrimaryExpression	0		6259978	1					
ANR	6260070	ForStatement	for ( i = 0 ; str [ i ] ; i ++ )		6259978	9					
ANR	6260071	ForInit	i = 0 ;	3123:6:64888:64893	6259978	0	True				
ANR	6260072	AssignmentExpression	i = 0		6259978	0		=			
ANR	6260073	Identifier	i		6259978	0					
ANR	6260074	PrimaryExpression	0		6259978	1					
ANR	6260075	Condition	str [ i ]	3123:13:64895:64900	6259978	1	True				
ANR	6260076	ArrayIndexing	str [ i ]		6259978	0					
ANR	6260077	Identifier	str		6259978	0					
ANR	6260078	Identifier	i		6259978	1					
ANR	6260079	PostIncDecOperationExpression	i ++	3123:21:64903:64905	6259978	2	True				
ANR	6260080	Identifier	i		6259978	0					
ANR	6260081	IncDec	++		6259978	1					
ANR	6260082	CompoundStatement		21:26:337:337	6259978	3					
ANR	6260083	IfStatement	if ( str [ i ] == '\\n' )		6259978	0					
ANR	6260084	Condition	str [ i ] == '\\n'	3124:6:64916:64929	6259978	0	True				
ANR	6260085	EqualityExpression	str [ i ] == '\\n'		6259978	0		==			
ANR	6260086	ArrayIndexing	str [ i ]		6259978	0					
ANR	6260087	Identifier	str		6259978	0					
ANR	6260088	Identifier	i		6259978	1					
ANR	6260089	PrimaryExpression	'\\n'		6259978	1					
ANR	6260090	CompoundStatement		22:22:361:361	6259978	1					
ANR	6260091	ExpressionStatement	str [ i ] = 0	3125:3:64937:64947	6259978	0	True				
ANR	6260092	AssignmentExpression	str [ i ] = 0		6259978	0		=			
ANR	6260093	ArrayIndexing	str [ i ]		6259978	0					
ANR	6260094	Identifier	str		6259978	0					
ANR	6260095	Identifier	i		6259978	1					
ANR	6260096	PrimaryExpression	0		6259978	1					
ANR	6260097	ExpressionStatement	indexes [ line ++ ] = i + 1	3126:3:64952:64975	6259978	1	True				
ANR	6260098	AssignmentExpression	indexes [ line ++ ] = i + 1		6259978	0		=			
ANR	6260099	ArrayIndexing	indexes [ line ++ ]		6259978	0					
ANR	6260100	Identifier	indexes		6259978	0					
ANR	6260101	PostIncDecOperationExpression	line ++		6259978	1					
ANR	6260102	Identifier	line		6259978	0					
ANR	6260103	IncDec	++		6259978	1					
ANR	6260104	AdditiveExpression	i + 1		6259978	1		+			
ANR	6260105	Identifier	i		6259978	0					
ANR	6260106	PrimaryExpression	1		6259978	1					
ANR	6260107	IfStatement	if ( count )		6259978	10					
ANR	6260108	Condition	count	3129:5:64989:64993	6259978	0	True				
ANR	6260109	Identifier	count		6259978	0					
ANR	6260110	CompoundStatement		27:12:425:425	6259978	1					
ANR	6260111	ExpressionStatement	* count = line	3130:2:65000:65013	6259978	0	True				
ANR	6260112	AssignmentExpression	* count = line		6259978	0		=			
ANR	6260113	UnaryOperationExpression	* count		6259978	0					
ANR	6260114	UnaryOperator	*		6259978	0					
ANR	6260115	Identifier	count		6259978	1					
ANR	6260116	Identifier	line		6259978	1					
ANR	6260117	ReturnStatement	return indexes ;	3132:1:65019:65033	6259978	11	True				
ANR	6260118	Identifier	indexes		6259978	0					
ANR	6260119	ReturnType	R_API int *		6259978	1					
ANR	6260120	Identifier	r_str_split_lines		6259978	2					
ANR	6260121	ParameterList	"char * str , int * count"		6259978	3					
ANR	6260122	Parameter	char * str	3103:29:64547:64555	6259978	0	True				
ANR	6260123	ParameterType	char *		6259978	0					
ANR	6260124	Identifier	str		6259978	1					
ANR	6260125	Parameter	int * count	3103:40:64558:64567	6259978	1	True				
ANR	6260126	ParameterType	int *		6259978	0					
ANR	6260127	Identifier	count		6259978	1					
ANR	6260128	CFGEntryNode	ENTRY		6259978		True				
ANR	6260129	CFGExitNode	EXIT		6259978		True				
ANR	6260130	Symbol	str		6259978						
ANR	6260131	Symbol	* count		6259978						
ANR	6260132	Symbol	NULL		6259978						
ANR	6260133	Symbol	* i		6259978						
ANR	6260134	Symbol	indexes		6259978						
ANR	6260135	Symbol	line		6259978						
ANR	6260136	Symbol	count		6259978						
ANR	6260137	Symbol	i		6259978						
ANR	6260138	Symbol	* str		6259978						
ANR	6260139	Symbol	calloc		6259978						
ANR	6260140	Symbol	lines		6259978						
ANR	6260141	Symbol	* indexes		6259978						
ANR	6260142	Function	r_str_isnumber	3135:0:65038:65263							
ANR	6260143	FunctionDef	r_str_isnumber (const char * str)		6260142	0					
ANR	6260144	CompoundStatement		3135:43:65081:65263	6260142	0					
ANR	6260145	IfStatement	if ( ! str || ! * str )		6260142	0					
ANR	6260146	Condition	! str || ! * str	3136:5:65088:65100	6260142	0	True				
ANR	6260147	OrExpression	! str || ! * str		6260142	0		||			
ANR	6260148	UnaryOperationExpression	! str		6260142	0					
ANR	6260149	UnaryOperator	!		6260142	0					
ANR	6260150	Identifier	str		6260142	1					
ANR	6260151	UnaryOperationExpression	! * str		6260142	1					
ANR	6260152	UnaryOperator	!		6260142	0					
ANR	6260153	UnaryOperationExpression	* str		6260142	1					
ANR	6260154	UnaryOperator	*		6260142	0					
ANR	6260155	Identifier	str		6260142	1					
ANR	6260156	CompoundStatement		2:20:21:21	6260142	1					
ANR	6260157	ReturnStatement	return false ;	3137:2:65107:65119	6260142	0	True				
ANR	6260158	Identifier	false		6260142	0					
ANR	6260159	IdentifierDeclStatement	bool isnum = IS_DIGIT ( * str ) || * str == '-' ;	3139:1:65125:65168	6260142	1	True				
ANR	6260160	IdentifierDecl	isnum = IS_DIGIT ( * str ) || * str == '-'		6260142	0					
ANR	6260161	IdentifierDeclType	bool		6260142	0					
ANR	6260162	Identifier	isnum		6260142	1					
ANR	6260163	AssignmentExpression	isnum = IS_DIGIT ( * str ) || * str == '-'		6260142	2		=			
ANR	6260164	Identifier	isnum		6260142	0					
ANR	6260165	OrExpression	IS_DIGIT ( * str ) || * str == '-'		6260142	1		||			
ANR	6260166	CallExpression	IS_DIGIT ( * str )		6260142	0					
ANR	6260167	Callee	IS_DIGIT		6260142	0					
ANR	6260168	Identifier	IS_DIGIT		6260142	0					
ANR	6260169	ArgumentList	* str		6260142	1					
ANR	6260170	Argument	* str		6260142	0					
ANR	6260171	UnaryOperationExpression	* str		6260142	0					
ANR	6260172	UnaryOperator	*		6260142	0					
ANR	6260173	Identifier	str		6260142	1					
ANR	6260174	EqualityExpression	* str == '-'		6260142	1		==			
ANR	6260175	UnaryOperationExpression	* str		6260142	0					
ANR	6260176	UnaryOperator	*		6260142	0					
ANR	6260177	Identifier	str		6260142	1					
ANR	6260178	PrimaryExpression	'-'		6260142	1					
ANR	6260179	WhileStatement	while ( isnum && * ++ str )		6260142	2					
ANR	6260180	Condition	isnum && * ++ str	3140:8:65178:65192	6260142	0	True				
ANR	6260181	AndExpression	isnum && * ++ str		6260142	0		&&			
ANR	6260182	Identifier	isnum		6260142	0					
ANR	6260183	UnaryOperationExpression	* ++ str		6260142	1					
ANR	6260184	UnaryOperator	*		6260142	0					
ANR	6260185	UnaryExpression	++ str		6260142	1					
ANR	6260186	IncDec	++		6260142	0					
ANR	6260187	Identifier	str		6260142	1					
ANR	6260188	CompoundStatement		6:25:113:113	6260142	1					
ANR	6260189	IfStatement	if ( ! IS_DIGIT ( * str ) )		6260142	0					
ANR	6260190	Condition	! IS_DIGIT ( * str )	3141:6:65203:65218	6260142	0	True				
ANR	6260191	UnaryOperationExpression	! IS_DIGIT ( * str )		6260142	0					
ANR	6260192	UnaryOperator	!		6260142	0					
ANR	6260193	CallExpression	IS_DIGIT ( * str )		6260142	1					
ANR	6260194	Callee	IS_DIGIT		6260142	0					
ANR	6260195	Identifier	IS_DIGIT		6260142	0					
ANR	6260196	ArgumentList	* str		6260142	1					
ANR	6260197	Argument	* str		6260142	0					
ANR	6260198	UnaryOperationExpression	* str		6260142	0					
ANR	6260199	UnaryOperator	*		6260142	0					
ANR	6260200	Identifier	str		6260142	1					
ANR	6260201	CompoundStatement		7:24:139:139	6260142	1					
ANR	6260202	ExpressionStatement	isnum = false	3142:3:65226:65239	6260142	0	True				
ANR	6260203	AssignmentExpression	isnum = false		6260142	0		=			
ANR	6260204	Identifier	isnum		6260142	0					
ANR	6260205	Identifier	false		6260142	1					
ANR	6260206	ReturnStatement	return isnum ;	3145:1:65249:65261	6260142	3	True				
ANR	6260207	Identifier	isnum		6260142	0					
ANR	6260208	ReturnType	R_API bool		6260142	1					
ANR	6260209	Identifier	r_str_isnumber		6260142	2					
ANR	6260210	ParameterList	const char * str		6260142	3					
ANR	6260211	Parameter	const char * str	3135:26:65064:65078	6260142	0	True				
ANR	6260212	ParameterType	const char *		6260142	0					
ANR	6260213	Identifier	str		6260142	1					
ANR	6260214	CFGEntryNode	ENTRY		6260142		True				
ANR	6260215	CFGExitNode	EXIT		6260142		True				
ANR	6260216	Symbol	str		6260142						
ANR	6260217	Symbol	* ++ str		6260142						
ANR	6260218	Symbol	isnum		6260142						
ANR	6260219	Symbol	false		6260142						
ANR	6260220	Symbol	* str		6260142						
ANR	6260221	Symbol	IS_DIGIT		6260142						
ANR	6260222	Function	r_str_last	3149:6:65337:65578							
ANR	6260223	FunctionDef	"r_str_last (const char * str , const char * ch)"		6260222	0					
ANR	6260224	CompoundStatement		3149:62:65393:65578	6260222	0					
ANR	6260225	IdentifierDeclStatement	"char * ptr , * end = NULL ;"	3150:1:65396:65418	6260222	0	True				
ANR	6260226	IdentifierDecl	* ptr		6260222	0					
ANR	6260227	IdentifierDeclType	char *		6260222	0					
ANR	6260228	Identifier	ptr		6260222	1					
ANR	6260229	IdentifierDecl	* end = NULL		6260222	1					
ANR	6260230	IdentifierDeclType	char *		6260222	0					
ANR	6260231	Identifier	end		6260222	1					
ANR	6260232	AssignmentExpression	* end = NULL		6260222	2		=			
ANR	6260233	Identifier	NULL		6260222	0					
ANR	6260234	Identifier	NULL		6260222	1					
ANR	6260235	IfStatement	if ( ! str || ! ch )		6260222	1					
ANR	6260236	Condition	! str || ! ch	3151:5:65425:65435	6260222	0	True				
ANR	6260237	OrExpression	! str || ! ch		6260222	0		||			
ANR	6260238	UnaryOperationExpression	! str		6260222	0					
ANR	6260239	UnaryOperator	!		6260222	0					
ANR	6260240	Identifier	str		6260222	1					
ANR	6260241	UnaryOperationExpression	! ch		6260222	1					
ANR	6260242	UnaryOperator	!		6260222	0					
ANR	6260243	Identifier	ch		6260222	1					
ANR	6260244	CompoundStatement		3:18:44:44	6260222	1					
ANR	6260245	ReturnStatement	return NULL ;	3152:2:65442:65453	6260222	0	True				
ANR	6260246	Identifier	NULL		6260222	0					
ANR	6260247	DoStatement	do		6260222	2					
ANR	6260248	CompoundStatement		6:4:68:68	6260222	0					
ANR	6260249	ExpressionStatement	"ptr = strstr ( str , ch )"	3155:2:65466:65488	6260222	0	True				
ANR	6260250	AssignmentExpression	"ptr = strstr ( str , ch )"		6260222	0		=			
ANR	6260251	Identifier	ptr		6260222	0					
ANR	6260252	CallExpression	"strstr ( str , ch )"		6260222	1					
ANR	6260253	Callee	strstr		6260222	0					
ANR	6260254	Identifier	strstr		6260222	0					
ANR	6260255	ArgumentList	str		6260222	1					
ANR	6260256	Argument	str		6260222	0					
ANR	6260257	Identifier	str		6260222	0					
ANR	6260258	Argument	ch		6260222	1					
ANR	6260259	Identifier	ch		6260222	0					
ANR	6260260	IfStatement	if ( ! ptr )		6260222	1					
ANR	6260261	Condition	! ptr	3156:6:65496:65499	6260222	0	True				
ANR	6260262	UnaryOperationExpression	! ptr		6260222	0					
ANR	6260263	UnaryOperator	!		6260222	0					
ANR	6260264	Identifier	ptr		6260222	1					
ANR	6260265	CompoundStatement		8:12:108:108	6260222	1					
ANR	6260266	BreakStatement	break ;	3157:3:65507:65512	6260222	0	True				
ANR	6260267	ExpressionStatement	end = ptr	3159:2:65520:65529	6260222	2	True				
ANR	6260268	AssignmentExpression	end = ptr		6260222	0		=			
ANR	6260269	Identifier	end		6260222	0					
ANR	6260270	Identifier	ptr		6260222	1					
ANR	6260271	ExpressionStatement	str = ptr + 1	3160:2:65533:65546	6260222	3	True				
ANR	6260272	AssignmentExpression	str = ptr + 1		6260222	0		=			
ANR	6260273	Identifier	str		6260222	0					
ANR	6260274	AdditiveExpression	ptr + 1		6260222	1		+			
ANR	6260275	Identifier	ptr		6260222	0					
ANR	6260276	PrimaryExpression	1		6260222	1					
ANR	6260277	Condition	true	3161:10:65558:65561	6260222	1	True				
ANR	6260278	Identifier	true		6260222	0					
ANR	6260279	ReturnStatement	return end ;	3162:1:65566:65576	6260222	3	True				
ANR	6260280	Identifier	end		6260222	0					
ANR	6260281	ReturnType	const char *		6260222	1					
ANR	6260282	Identifier	r_str_last		6260222	2					
ANR	6260283	ParameterList	"const char * str , const char * ch"		6260222	3					
ANR	6260284	Parameter	const char * str	3149:29:65360:65374	6260222	0	True				
ANR	6260285	ParameterType	const char *		6260222	0					
ANR	6260286	Identifier	str		6260222	1					
ANR	6260287	Parameter	const char * ch	3149:46:65377:65390	6260222	1	True				
ANR	6260288	ParameterType	const char *		6260222	0					
ANR	6260289	Identifier	ch		6260222	1					
ANR	6260290	CFGEntryNode	ENTRY		6260222		True				
ANR	6260291	CFGExitNode	EXIT		6260222		True				
ANR	6260292	Symbol	str		6260222						
ANR	6260293	Symbol	NULL		6260222						
ANR	6260294	Symbol	ch		6260222						
ANR	6260295	Symbol	strstr		6260222						
ANR	6260296	Symbol	true		6260222						
ANR	6260297	Symbol	end		6260222						
ANR	6260298	Symbol	ptr		6260222						
ANR	6260299	Function	strncpy_with_color_codes	3166:0:65655:66062							
ANR	6260300	FunctionDef	"strncpy_with_color_codes (char * s1 , char * s2 , int n)"		6260299	0					
ANR	6260301	CompoundStatement		3166:63:65718:66062	6260299	0					
ANR	6260302	IdentifierDeclStatement	"int i = 0 , j = 0 ;"	3167:1:65721:65737	6260299	0	True				
ANR	6260303	IdentifierDecl	i = 0		6260299	0					
ANR	6260304	IdentifierDeclType	int		6260299	0					
ANR	6260305	Identifier	i		6260299	1					
ANR	6260306	AssignmentExpression	i = 0		6260299	2		=			
ANR	6260307	Identifier	i		6260299	0					
ANR	6260308	PrimaryExpression	0		6260299	1					
ANR	6260309	IdentifierDecl	j = 0		6260299	1					
ANR	6260310	IdentifierDeclType	int		6260299	0					
ANR	6260311	Identifier	j		6260299	1					
ANR	6260312	AssignmentExpression	j = 0		6260299	2		=			
ANR	6260313	Identifier	j		6260299	0					
ANR	6260314	PrimaryExpression	0		6260299	1					
ANR	6260315	IdentifierDeclStatement	int count = 0 ;	3168:1:65740:65753	6260299	1	True				
ANR	6260316	IdentifierDecl	count = 0		6260299	0					
ANR	6260317	IdentifierDeclType	int		6260299	0					
ANR	6260318	Identifier	count		6260299	1					
ANR	6260319	AssignmentExpression	count = 0		6260299	2		=			
ANR	6260320	Identifier	count		6260299	0					
ANR	6260321	PrimaryExpression	0		6260299	1					
ANR	6260322	WhileStatement	while ( s2 [ j ] && count < n )		6260299	2					
ANR	6260323	Condition	s2 [ j ] && count < n	3169:8:65763:65780	6260299	0	True				
ANR	6260324	AndExpression	s2 [ j ] && count < n		6260299	0		&&			
ANR	6260325	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260326	Identifier	s2		6260299	0					
ANR	6260327	Identifier	j		6260299	1					
ANR	6260328	RelationalExpression	count < n		6260299	1		<			
ANR	6260329	Identifier	count		6260299	0					
ANR	6260330	Identifier	n		6260299	1					
ANR	6260331	CompoundStatement		4:28:64:64	6260299	1					
ANR	6260332	WhileStatement	while ( s2 [ j ] == 0x1b )		6260299	0					
ANR	6260333	Condition	s2 [ j ] == 0x1b	3171:9:65832:65844	6260299	0	True				
ANR	6260334	EqualityExpression	s2 [ j ] == 0x1b		6260299	0		==			
ANR	6260335	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260336	Identifier	s2		6260299	0					
ANR	6260337	Identifier	j		6260299	1					
ANR	6260338	PrimaryExpression	0x1b		6260299	1					
ANR	6260339	CompoundStatement		6:24:128:128	6260299	1					
ANR	6260340	WhileStatement	while ( s2 [ j ] && s2 [ j ] != 'm' )		6260299	0					
ANR	6260341	Condition	s2 [ j ] && s2 [ j ] != 'm'	3173:10:65879:65899	6260299	0	True				
ANR	6260342	AndExpression	s2 [ j ] && s2 [ j ] != 'm'		6260299	0		&&			
ANR	6260343	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260344	Identifier	s2		6260299	0					
ANR	6260345	Identifier	j		6260299	1					
ANR	6260346	EqualityExpression	s2 [ j ] != 'm'		6260299	1		!=			
ANR	6260347	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260348	Identifier	s2		6260299	0					
ANR	6260349	Identifier	j		6260299	1					
ANR	6260350	PrimaryExpression	'm'		6260299	1					
ANR	6260351	CompoundStatement		8:33:183:183	6260299	1					
ANR	6260352	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3174:4:65908:65925	6260299	0	True				
ANR	6260353	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		6260299	0		=			
ANR	6260354	ArrayIndexing	s1 [ i ++ ]		6260299	0					
ANR	6260355	Identifier	s1		6260299	0					
ANR	6260356	PostIncDecOperationExpression	i ++		6260299	1					
ANR	6260357	Identifier	i		6260299	0					
ANR	6260358	IncDec	++		6260299	1					
ANR	6260359	ArrayIndexing	s2 [ j ++ ]		6260299	1					
ANR	6260360	Identifier	s2		6260299	0					
ANR	6260361	PostIncDecOperationExpression	j ++		6260299	1					
ANR	6260362	Identifier	j		6260299	0					
ANR	6260363	IncDec	++		6260299	1					
ANR	6260364	IfStatement	if ( s2 [ j ] )		6260299	1					
ANR	6260365	Condition	s2 [ j ]	3177:7:65954:65958	6260299	0	True				
ANR	6260366	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260367	Identifier	s2		6260299	0					
ANR	6260368	Identifier	j		6260299	1					
ANR	6260369	CompoundStatement		12:14:242:242	6260299	1					
ANR	6260370	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3178:4:65967:65984	6260299	0	True				
ANR	6260371	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		6260299	0		=			
ANR	6260372	ArrayIndexing	s1 [ i ++ ]		6260299	0					
ANR	6260373	Identifier	s1		6260299	0					
ANR	6260374	PostIncDecOperationExpression	i ++		6260299	1					
ANR	6260375	Identifier	i		6260299	0					
ANR	6260376	IncDec	++		6260299	1					
ANR	6260377	ArrayIndexing	s2 [ j ++ ]		6260299	1					
ANR	6260378	Identifier	s2		6260299	0					
ANR	6260379	PostIncDecOperationExpression	j ++		6260299	1					
ANR	6260380	Identifier	j		6260299	0					
ANR	6260381	IncDec	++		6260299	1					
ANR	6260382	IfStatement	if ( s2 [ j ] )		6260299	1					
ANR	6260383	Condition	s2 [ j ]	3181:6:66001:66005	6260299	0	True				
ANR	6260384	ArrayIndexing	s2 [ j ]		6260299	0					
ANR	6260385	Identifier	s2		6260299	0					
ANR	6260386	Identifier	j		6260299	1					
ANR	6260387	CompoundStatement		16:13:289:289	6260299	1					
ANR	6260388	ExpressionStatement	s1 [ i ++ ] = s2 [ j ++ ]	3182:3:66013:66030	6260299	0	True				
ANR	6260389	AssignmentExpression	s1 [ i ++ ] = s2 [ j ++ ]		6260299	0		=			
ANR	6260390	ArrayIndexing	s1 [ i ++ ]		6260299	0					
ANR	6260391	Identifier	s1		6260299	0					
ANR	6260392	PostIncDecOperationExpression	i ++		6260299	1					
ANR	6260393	Identifier	i		6260299	0					
ANR	6260394	IncDec	++		6260299	1					
ANR	6260395	ArrayIndexing	s2 [ j ++ ]		6260299	1					
ANR	6260396	Identifier	s2		6260299	0					
ANR	6260397	PostIncDecOperationExpression	j ++		6260299	1					
ANR	6260398	Identifier	j		6260299	0					
ANR	6260399	IncDec	++		6260299	1					
ANR	6260400	ExpressionStatement	count ++	3183:3:66035:66042	6260299	1	True				
ANR	6260401	PostIncDecOperationExpression	count ++		6260299	0					
ANR	6260402	Identifier	count		6260299	0					
ANR	6260403	IncDec	++		6260299	1					
ANR	6260404	ReturnStatement	return i ;	3186:1:66052:66060	6260299	3	True				
ANR	6260405	Identifier	i		6260299	0					
ANR	6260406	ReturnType	static int		6260299	1					
ANR	6260407	Identifier	strncpy_with_color_codes		6260299	2					
ANR	6260408	ParameterList	"char * s1 , char * s2 , int n"		6260299	3					
ANR	6260409	Parameter	char * s1	3166:36:65691:65698	6260299	0	True				
ANR	6260410	ParameterType	char *		6260299	0					
ANR	6260411	Identifier	s1		6260299	1					
ANR	6260412	Parameter	char * s2	3166:46:65701:65708	6260299	1	True				
ANR	6260413	ParameterType	char *		6260299	0					
ANR	6260414	Identifier	s2		6260299	1					
ANR	6260415	Parameter	int n	3166:56:65711:65715	6260299	2	True				
ANR	6260416	ParameterType	int		6260299	0					
ANR	6260417	Identifier	n		6260299	1					
ANR	6260418	CFGEntryNode	ENTRY		6260299		True				
ANR	6260419	CFGExitNode	EXIT		6260299		True				
ANR	6260420	Symbol	* j		6260299						
ANR	6260421	Symbol	* s2		6260299						
ANR	6260422	Symbol	* s1		6260299						
ANR	6260423	Symbol	count		6260299						
ANR	6260424	Symbol	i		6260299						
ANR	6260425	Symbol	j		6260299						
ANR	6260426	Symbol	s1		6260299						
ANR	6260427	Symbol	n		6260299						
ANR	6260428	Symbol	s2		6260299						
ANR	6260429	Function	strncmp_skip_color_codes	3189:0:66065:66576							
ANR	6260430	FunctionDef	"strncmp_skip_color_codes (const char * s1 , const char * s2 , int n)"		6260429	0					
ANR	6260431	CompoundStatement		3189:75:66140:66576	6260429	0					
ANR	6260432	IdentifierDeclStatement	"int i = 0 , j = 0 ;"	3190:1:66143:66159	6260429	0	True				
ANR	6260433	IdentifierDecl	i = 0		6260429	0					
ANR	6260434	IdentifierDeclType	int		6260429	0					
ANR	6260435	Identifier	i		6260429	1					
ANR	6260436	AssignmentExpression	i = 0		6260429	2		=			
ANR	6260437	Identifier	i		6260429	0					
ANR	6260438	PrimaryExpression	0		6260429	1					
ANR	6260439	IdentifierDecl	j = 0		6260429	1					
ANR	6260440	IdentifierDeclType	int		6260429	0					
ANR	6260441	Identifier	j		6260429	1					
ANR	6260442	AssignmentExpression	j = 0		6260429	2		=			
ANR	6260443	Identifier	j		6260429	0					
ANR	6260444	PrimaryExpression	0		6260429	1					
ANR	6260445	IdentifierDeclStatement	int count = 0 ;	3191:1:66162:66175	6260429	1	True				
ANR	6260446	IdentifierDecl	count = 0		6260429	0					
ANR	6260447	IdentifierDeclType	int		6260429	0					
ANR	6260448	Identifier	count		6260429	1					
ANR	6260449	AssignmentExpression	count = 0		6260429	2		=			
ANR	6260450	Identifier	count		6260429	0					
ANR	6260451	PrimaryExpression	0		6260429	1					
ANR	6260452	ForStatement	"for ( i = 0 , j = 0 ; s1 [ i ] && s2 [ j ] && count < n ; i ++ , j ++ , count ++ )"		6260429	2					
ANR	6260453	ForInit	"i = 0 , j = 0 ;"	3192:6:66183:66195	6260429	0	True				
ANR	6260454	Expression	"i = 0 , j = 0"		6260429	0					
ANR	6260455	AssignmentExpression	i = 0		6260429	0		=			
ANR	6260456	Identifier	i		6260429	0					
ANR	6260457	PrimaryExpression	0		6260429	1					
ANR	6260458	AssignmentExpression	j = 0		6260429	1		=			
ANR	6260459	Identifier	j		6260429	0					
ANR	6260460	PrimaryExpression	0		6260429	1					
ANR	6260461	Condition	s1 [ i ] && s2 [ j ] && count < n	3192:20:66197:66224	6260429	1	True				
ANR	6260462	AndExpression	s1 [ i ] && s2 [ j ] && count < n		6260429	0		&&			
ANR	6260463	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260464	Identifier	s1		6260429	0					
ANR	6260465	Identifier	i		6260429	1					
ANR	6260466	AndExpression	s2 [ j ] && count < n		6260429	1		&&			
ANR	6260467	ArrayIndexing	s2 [ j ]		6260429	0					
ANR	6260468	Identifier	s2		6260429	0					
ANR	6260469	Identifier	j		6260429	1					
ANR	6260470	RelationalExpression	count < n		6260429	1		<			
ANR	6260471	Identifier	count		6260429	0					
ANR	6260472	Identifier	n		6260429	1					
ANR	6260473	Expression	"i ++ , j ++ , count ++"	3192:50:66227:66243	6260429	2	True				
ANR	6260474	PostIncDecOperationExpression	i ++		6260429	0					
ANR	6260475	Identifier	i		6260429	0					
ANR	6260476	IncDec	++		6260429	1					
ANR	6260477	Expression	"j ++ , count ++"		6260429	1					
ANR	6260478	PostIncDecOperationExpression	j ++		6260429	0					
ANR	6260479	Identifier	j		6260429	0					
ANR	6260480	IncDec	++		6260429	1					
ANR	6260481	PostIncDecOperationExpression	count ++		6260429	1					
ANR	6260482	Identifier	count		6260429	0					
ANR	6260483	IncDec	++		6260429	1					
ANR	6260484	CompoundStatement		4:69:105:105	6260429	3					
ANR	6260485	WhileStatement	while ( s1 [ i ] == 0x1b )		6260429	0					
ANR	6260486	Condition	s1 [ i ] == 0x1b	3193:9:66257:66269	6260429	0	True				
ANR	6260487	EqualityExpression	s1 [ i ] == 0x1b		6260429	0		==			
ANR	6260488	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260489	Identifier	s1		6260429	0					
ANR	6260490	Identifier	i		6260429	1					
ANR	6260491	PrimaryExpression	0x1b		6260429	1					
ANR	6260492	CompoundStatement		5:24:131:131	6260429	1					
ANR	6260493	WhileStatement	while ( s1 [ i ] && s1 [ i ] != 'm' )		6260429	0					
ANR	6260494	Condition	s1 [ i ] && s1 [ i ] != 'm'	3194:10:66284:66304	6260429	0	True				
ANR	6260495	AndExpression	s1 [ i ] && s1 [ i ] != 'm'		6260429	0		&&			
ANR	6260496	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260497	Identifier	s1		6260429	0					
ANR	6260498	Identifier	i		6260429	1					
ANR	6260499	EqualityExpression	s1 [ i ] != 'm'		6260429	1		!=			
ANR	6260500	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260501	Identifier	s1		6260429	0					
ANR	6260502	Identifier	i		6260429	1					
ANR	6260503	PrimaryExpression	'm'		6260429	1					
ANR	6260504	CompoundStatement		6:33:166:166	6260429	1					
ANR	6260505	ExpressionStatement	i ++	3195:4:66313:66316	6260429	0	True				
ANR	6260506	PostIncDecOperationExpression	i ++		6260429	0					
ANR	6260507	Identifier	i		6260429	0					
ANR	6260508	IncDec	++		6260429	1					
ANR	6260509	IfStatement	if ( s1 [ i ] )		6260429	1					
ANR	6260510	Condition	s1 [ i ]	3197:7:66330:66334	6260429	0	True				
ANR	6260511	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260512	Identifier	s1		6260429	0					
ANR	6260513	Identifier	i		6260429	1					
ANR	6260514	CompoundStatement		9:14:196:196	6260429	1					
ANR	6260515	ExpressionStatement	i ++	3198:4:66343:66346	6260429	0	True				
ANR	6260516	PostIncDecOperationExpression	i ++		6260429	0					
ANR	6260517	Identifier	i		6260429	0					
ANR	6260518	IncDec	++		6260429	1					
ANR	6260519	WhileStatement	while ( s2 [ j ] == 0x1b )		6260429	1					
ANR	6260520	Condition	s2 [ j ] == 0x1b	3201:9:66366:66378	6260429	0	True				
ANR	6260521	EqualityExpression	s2 [ j ] == 0x1b		6260429	0		==			
ANR	6260522	ArrayIndexing	s2 [ j ]		6260429	0					
ANR	6260523	Identifier	s2		6260429	0					
ANR	6260524	Identifier	j		6260429	1					
ANR	6260525	PrimaryExpression	0x1b		6260429	1					
ANR	6260526	CompoundStatement		13:24:240:240	6260429	1					
ANR	6260527	WhileStatement	while ( s2 [ j ] && s2 [ j ] != 'm' )		6260429	0					
ANR	6260528	Condition	s2 [ j ] && s2 [ j ] != 'm'	3202:10:66393:66413	6260429	0	True				
ANR	6260529	AndExpression	s2 [ j ] && s2 [ j ] != 'm'		6260429	0		&&			
ANR	6260530	ArrayIndexing	s2 [ j ]		6260429	0					
ANR	6260531	Identifier	s2		6260429	0					
ANR	6260532	Identifier	j		6260429	1					
ANR	6260533	EqualityExpression	s2 [ j ] != 'm'		6260429	1		!=			
ANR	6260534	ArrayIndexing	s2 [ j ]		6260429	0					
ANR	6260535	Identifier	s2		6260429	0					
ANR	6260536	Identifier	j		6260429	1					
ANR	6260537	PrimaryExpression	'm'		6260429	1					
ANR	6260538	CompoundStatement		14:33:275:275	6260429	1					
ANR	6260539	ExpressionStatement	j ++	3203:4:66422:66425	6260429	0	True				
ANR	6260540	PostIncDecOperationExpression	j ++		6260429	0					
ANR	6260541	Identifier	j		6260429	0					
ANR	6260542	IncDec	++		6260429	1					
ANR	6260543	IfStatement	if ( s2 [ j ] )		6260429	1					
ANR	6260544	Condition	s2 [ j ]	3205:7:66439:66443	6260429	0	True				
ANR	6260545	ArrayIndexing	s2 [ j ]		6260429	0					
ANR	6260546	Identifier	s2		6260429	0					
ANR	6260547	Identifier	j		6260429	1					
ANR	6260548	CompoundStatement		17:14:305:305	6260429	1					
ANR	6260549	ExpressionStatement	j ++	3206:4:66452:66455	6260429	0	True				
ANR	6260550	PostIncDecOperationExpression	j ++		6260429	0					
ANR	6260551	Identifier	j		6260429	0					
ANR	6260552	IncDec	++		6260429	1					
ANR	6260553	IfStatement	if ( s1 [ i ] != s2 [ j ] )		6260429	2					
ANR	6260554	Condition	s1 [ i ] != s2 [ j ]	3209:6:66472:66485	6260429	0	True				
ANR	6260555	EqualityExpression	s1 [ i ] != s2 [ j ]		6260429	0		!=			
ANR	6260556	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260557	Identifier	s1		6260429	0					
ANR	6260558	Identifier	i		6260429	1					
ANR	6260559	ArrayIndexing	s2 [ j ]		6260429	1					
ANR	6260560	Identifier	s2		6260429	0					
ANR	6260561	Identifier	j		6260429	1					
ANR	6260562	CompoundStatement		21:22:347:347	6260429	1					
ANR	6260563	ReturnStatement	return - 1 ;	3210:3:66493:66502	6260429	0	True				
ANR	6260564	UnaryOperationExpression	- 1		6260429	0					
ANR	6260565	UnaryOperator	-		6260429	0					
ANR	6260566	PrimaryExpression	1		6260429	1					
ANR	6260567	IfStatement	if ( count < n && s1 [ i ] != s2 [ j ] )		6260429	3					
ANR	6260568	Condition	count < n && s1 [ i ] != s2 [ j ]	3214:5:66517:66543	6260429	0	True				
ANR	6260569	AndExpression	count < n && s1 [ i ] != s2 [ j ]		6260429	0		&&			
ANR	6260570	RelationalExpression	count < n		6260429	0		<			
ANR	6260571	Identifier	count		6260429	0					
ANR	6260572	Identifier	n		6260429	1					
ANR	6260573	EqualityExpression	s1 [ i ] != s2 [ j ]		6260429	1		!=			
ANR	6260574	ArrayIndexing	s1 [ i ]		6260429	0					
ANR	6260575	Identifier	s1		6260429	0					
ANR	6260576	Identifier	i		6260429	1					
ANR	6260577	ArrayIndexing	s2 [ j ]		6260429	1					
ANR	6260578	Identifier	s2		6260429	0					
ANR	6260579	Identifier	j		6260429	1					
ANR	6260580	CompoundStatement		26:34:405:405	6260429	1					
ANR	6260581	ReturnStatement	return - 1 ;	3215:2:66550:66559	6260429	0	True				
ANR	6260582	UnaryOperationExpression	- 1		6260429	0					
ANR	6260583	UnaryOperator	-		6260429	0					
ANR	6260584	PrimaryExpression	1		6260429	1					
ANR	6260585	ReturnStatement	return 0 ;	3218:1:66566:66574	6260429	4	True				
ANR	6260586	PrimaryExpression	0		6260429	0					
ANR	6260587	ReturnType	static int		6260429	1					
ANR	6260588	Identifier	strncmp_skip_color_codes		6260429	2					
ANR	6260589	ParameterList	"const char * s1 , const char * s2 , int n"		6260429	3					
ANR	6260590	Parameter	const char * s1	3189:36:66101:66114	6260429	0	True				
ANR	6260591	ParameterType	const char *		6260429	0					
ANR	6260592	Identifier	s1		6260429	1					
ANR	6260593	Parameter	const char * s2	3189:52:66117:66130	6260429	1	True				
ANR	6260594	ParameterType	const char *		6260429	0					
ANR	6260595	Identifier	s2		6260429	1					
ANR	6260596	Parameter	int n	3189:68:66133:66137	6260429	2	True				
ANR	6260597	ParameterType	int		6260429	0					
ANR	6260598	Identifier	n		6260429	1					
ANR	6260599	CFGEntryNode	ENTRY		6260429		True				
ANR	6260600	CFGExitNode	EXIT		6260429		True				
ANR	6260601	Symbol	* i		6260429						
ANR	6260602	Symbol	* j		6260429						
ANR	6260603	Symbol	* s2		6260429						
ANR	6260604	Symbol	* s1		6260429						
ANR	6260605	Symbol	count		6260429						
ANR	6260606	Symbol	i		6260429						
ANR	6260607	Symbol	j		6260429						
ANR	6260608	Symbol	s1		6260429						
ANR	6260609	Symbol	n		6260429						
ANR	6260610	Symbol	s2		6260429						
ANR	6260611	Function	strchr_skip_color_codes	3221:0:66579:66870							
ANR	6260612	FunctionDef	"strchr_skip_color_codes (const char * s , int c)"		6260611	0					
ANR	6260613	CompoundStatement		3221:59:66638:66870	6260611	0					
ANR	6260614	IdentifierDeclStatement	int i = 0 ;	3222:1:66641:66650	6260611	0	True				
ANR	6260615	IdentifierDecl	i = 0		6260611	0					
ANR	6260616	IdentifierDeclType	int		6260611	0					
ANR	6260617	Identifier	i		6260611	1					
ANR	6260618	AssignmentExpression	i = 0		6260611	2		=			
ANR	6260619	Identifier	i		6260611	0					
ANR	6260620	PrimaryExpression	0		6260611	1					
ANR	6260621	ForStatement	for ( i = 0 ; s [ i ] ; i ++ )		6260611	1					
ANR	6260622	ForInit	i = 0 ;	3223:6:66658:66663	6260611	0	True				
ANR	6260623	AssignmentExpression	i = 0		6260611	0		=			
ANR	6260624	Identifier	i		6260611	0					
ANR	6260625	PrimaryExpression	0		6260611	1					
ANR	6260626	Condition	s [ i ]	3223:13:66665:66668	6260611	1	True				
ANR	6260627	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260628	Identifier	s		6260611	0					
ANR	6260629	Identifier	i		6260611	1					
ANR	6260630	PostIncDecOperationExpression	i ++	3223:19:66671:66673	6260611	2	True				
ANR	6260631	Identifier	i		6260611	0					
ANR	6260632	IncDec	++		6260611	1					
ANR	6260633	CompoundStatement		3:24:37:37	6260611	3					
ANR	6260634	WhileStatement	while ( s [ i ] && s [ i ] == 0x1b )		6260611	0					
ANR	6260635	Condition	s [ i ] && s [ i ] == 0x1b	3224:9:66687:66706	6260611	0	True				
ANR	6260636	AndExpression	s [ i ] && s [ i ] == 0x1b		6260611	0		&&			
ANR	6260637	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260638	Identifier	s		6260611	0					
ANR	6260639	Identifier	i		6260611	1					
ANR	6260640	EqualityExpression	s [ i ] == 0x1b		6260611	1		==			
ANR	6260641	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260642	Identifier	s		6260611	0					
ANR	6260643	Identifier	i		6260611	1					
ANR	6260644	PrimaryExpression	0x1b		6260611	1					
ANR	6260645	CompoundStatement		4:31:70:70	6260611	1					
ANR	6260646	WhileStatement	while ( s [ i ] && s [ i ] != 'm' )		6260611	0					
ANR	6260647	Condition	s [ i ] && s [ i ] != 'm'	3225:10:66721:66739	6260611	0	True				
ANR	6260648	AndExpression	s [ i ] && s [ i ] != 'm'		6260611	0		&&			
ANR	6260649	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260650	Identifier	s		6260611	0					
ANR	6260651	Identifier	i		6260611	1					
ANR	6260652	EqualityExpression	s [ i ] != 'm'		6260611	1		!=			
ANR	6260653	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260654	Identifier	s		6260611	0					
ANR	6260655	Identifier	i		6260611	1					
ANR	6260656	PrimaryExpression	'm'		6260611	1					
ANR	6260657	CompoundStatement		5:31:103:103	6260611	1					
ANR	6260658	ExpressionStatement	i ++	3226:4:66748:66751	6260611	0	True				
ANR	6260659	PostIncDecOperationExpression	i ++		6260611	0					
ANR	6260660	Identifier	i		6260611	0					
ANR	6260661	IncDec	++		6260611	1					
ANR	6260662	IfStatement	if ( s [ i ] )		6260611	1					
ANR	6260663	Condition	s [ i ]	3228:7:66765:66768	6260611	0	True				
ANR	6260664	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260665	Identifier	s		6260611	0					
ANR	6260666	Identifier	i		6260611	1					
ANR	6260667	CompoundStatement		8:13:132:132	6260611	1					
ANR	6260668	ExpressionStatement	i ++	3229:4:66777:66780	6260611	0	True				
ANR	6260669	PostIncDecOperationExpression	i ++		6260611	0					
ANR	6260670	Identifier	i		6260611	0					
ANR	6260671	IncDec	++		6260611	1					
ANR	6260672	IfStatement	if ( ! s [ i ] || s [ i ] == ( char ) c )		6260611	1					
ANR	6260673	Condition	! s [ i ] || s [ i ] == ( char ) c	3232:6:66797:66820	6260611	0	True				
ANR	6260674	OrExpression	! s [ i ] || s [ i ] == ( char ) c		6260611	0		||			
ANR	6260675	UnaryOperationExpression	! s [ i ]		6260611	0					
ANR	6260676	UnaryOperator	!		6260611	0					
ANR	6260677	ArrayIndexing	s [ i ]		6260611	1					
ANR	6260678	Identifier	s		6260611	0					
ANR	6260679	Identifier	i		6260611	1					
ANR	6260680	EqualityExpression	s [ i ] == ( char ) c		6260611	1		==			
ANR	6260681	ArrayIndexing	s [ i ]		6260611	0					
ANR	6260682	Identifier	s		6260611	0					
ANR	6260683	Identifier	i		6260611	1					
ANR	6260684	CastExpression	( char ) c		6260611	1					
ANR	6260685	CastTarget	char		6260611	0					
ANR	6260686	Identifier	c		6260611	1					
ANR	6260687	CompoundStatement		12:32:184:184	6260611	1					
ANR	6260688	ReturnStatement	return ( char * ) s + i ;	3233:3:66828:66847	6260611	0	True				
ANR	6260689	AdditiveExpression	( char * ) s + i		6260611	0		+			
ANR	6260690	CastExpression	( char * ) s		6260611	0					
ANR	6260691	CastTarget	char *		6260611	0					
ANR	6260692	Identifier	s		6260611	1					
ANR	6260693	Identifier	i		6260611	1					
ANR	6260694	ReturnStatement	return NULL ;	3236:1:66857:66868	6260611	2	True				
ANR	6260695	Identifier	NULL		6260611	0					
ANR	6260696	ReturnType	static char *		6260611	1					
ANR	6260697	Identifier	strchr_skip_color_codes		6260611	2					
ANR	6260698	ParameterList	"const char * s , int c"		6260611	3					
ANR	6260699	Parameter	const char * s	3221:37:66616:66628	6260611	0	True				
ANR	6260700	ParameterType	const char *		6260611	0					
ANR	6260701	Identifier	s		6260611	1					
ANR	6260702	Parameter	int c	3221:52:66631:66635	6260611	1	True				
ANR	6260703	ParameterType	int		6260611	0					
ANR	6260704	Identifier	c		6260611	1					
ANR	6260705	CFGEntryNode	ENTRY		6260611		True				
ANR	6260706	CFGExitNode	EXIT		6260611		True				
ANR	6260707	Symbol	s		6260611						
ANR	6260708	Symbol	c		6260611						
ANR	6260709	Symbol	* i		6260611						
ANR	6260710	Symbol	NULL		6260611						
ANR	6260711	Symbol	i		6260611						
ANR	6260712	Symbol	* s		6260611						
ANR	6260713	Function	r_str_highlight	3241:0:66926:68448							
ANR	6260714	FunctionDef	"r_str_highlight (char * str , const char * word , const char * color , const char * color_reset)"		6260713	0					
ANR	6260715	CompoundStatement		3241:101:67027:68448	6260713	0					
ANR	6260716	IfStatement	if ( ! str || ! * str )		6260713	0					
ANR	6260717	Condition	! str || ! * str	3242:5:67034:67046	6260713	0	True				
ANR	6260718	OrExpression	! str || ! * str		6260713	0		||			
ANR	6260719	UnaryOperationExpression	! str		6260713	0					
ANR	6260720	UnaryOperator	!		6260713	0					
ANR	6260721	Identifier	str		6260713	1					
ANR	6260722	UnaryOperationExpression	! * str		6260713	1					
ANR	6260723	UnaryOperator	!		6260713	0					
ANR	6260724	UnaryOperationExpression	* str		6260713	1					
ANR	6260725	UnaryOperator	*		6260713	0					
ANR	6260726	Identifier	str		6260713	1					
ANR	6260727	CompoundStatement		2:20:21:21	6260713	1					
ANR	6260728	ReturnStatement	return NULL ;	3243:2:67053:67064	6260713	0	True				
ANR	6260729	Identifier	NULL		6260713	0					
ANR	6260730	IdentifierDeclStatement	"ut32 i = 0 , j = 0 , to_copy ;"	3245:1:67070:67096	6260713	1	True				
ANR	6260731	IdentifierDecl	i = 0		6260713	0					
ANR	6260732	IdentifierDeclType	ut32		6260713	0					
ANR	6260733	Identifier	i		6260713	1					
ANR	6260734	AssignmentExpression	i = 0		6260713	2		=			
ANR	6260735	Identifier	i		6260713	0					
ANR	6260736	PrimaryExpression	0		6260713	1					
ANR	6260737	IdentifierDecl	j = 0		6260713	1					
ANR	6260738	IdentifierDeclType	ut32		6260713	0					
ANR	6260739	Identifier	j		6260713	1					
ANR	6260740	AssignmentExpression	j = 0		6260713	2		=			
ANR	6260741	Identifier	j		6260713	0					
ANR	6260742	PrimaryExpression	0		6260713	1					
ANR	6260743	IdentifierDecl	to_copy		6260713	2					
ANR	6260744	IdentifierDeclType	ut32		6260713	0					
ANR	6260745	Identifier	to_copy		6260713	1					
ANR	6260746	IdentifierDeclStatement	char * start = str ;	3246:1:67099:67116	6260713	2	True				
ANR	6260747	IdentifierDecl	* start = str		6260713	0					
ANR	6260748	IdentifierDeclType	char *		6260713	0					
ANR	6260749	Identifier	start		6260713	1					
ANR	6260750	AssignmentExpression	* start = str		6260713	2		=			
ANR	6260751	Identifier	str		6260713	0					
ANR	6260752	Identifier	str		6260713	1					
ANR	6260753	IdentifierDeclStatement	ut32 l_str = strlen ( str ) ;	3247:1:67119:67144	6260713	3	True				
ANR	6260754	IdentifierDecl	l_str = strlen ( str )		6260713	0					
ANR	6260755	IdentifierDeclType	ut32		6260713	0					
ANR	6260756	Identifier	l_str		6260713	1					
ANR	6260757	AssignmentExpression	l_str = strlen ( str )		6260713	2		=			
ANR	6260758	Identifier	l_str		6260713	0					
ANR	6260759	CallExpression	strlen ( str )		6260713	1					
ANR	6260760	Callee	strlen		6260713	0					
ANR	6260761	Identifier	strlen		6260713	0					
ANR	6260762	ArgumentList	str		6260713	1					
ANR	6260763	Argument	str		6260713	0					
ANR	6260764	Identifier	str		6260713	0					
ANR	6260765	IdentifierDeclStatement	ut32 l_reset = strlen ( color_reset ) ;	3248:1:67147:67182	6260713	4	True				
ANR	6260766	IdentifierDecl	l_reset = strlen ( color_reset )		6260713	0					
ANR	6260767	IdentifierDeclType	ut32		6260713	0					
ANR	6260768	Identifier	l_reset		6260713	1					
ANR	6260769	AssignmentExpression	l_reset = strlen ( color_reset )		6260713	2		=			
ANR	6260770	Identifier	l_reset		6260713	0					
ANR	6260771	CallExpression	strlen ( color_reset )		6260713	1					
ANR	6260772	Callee	strlen		6260713	0					
ANR	6260773	Identifier	strlen		6260713	0					
ANR	6260774	ArgumentList	color_reset		6260713	1					
ANR	6260775	Argument	color_reset		6260713	0					
ANR	6260776	Identifier	color_reset		6260713	0					
ANR	6260777	IdentifierDeclStatement	ut32 l_color = color ? strlen ( color ) : 0 ;	3249:1:67185:67224	6260713	5	True				
ANR	6260778	IdentifierDecl	l_color = color ? strlen ( color ) : 0		6260713	0					
ANR	6260779	IdentifierDeclType	ut32		6260713	0					
ANR	6260780	Identifier	l_color		6260713	1					
ANR	6260781	AssignmentExpression	l_color = color ? strlen ( color ) : 0		6260713	2		=			
ANR	6260782	Identifier	l_color		6260713	0					
ANR	6260783	ConditionalExpression	color ? strlen ( color ) : 0		6260713	1					
ANR	6260784	Condition	color		6260713	0					
ANR	6260785	Identifier	color		6260713	0					
ANR	6260786	CallExpression	strlen ( color )		6260713	1					
ANR	6260787	Callee	strlen		6260713	0					
ANR	6260788	Identifier	strlen		6260713	0					
ANR	6260789	ArgumentList	color		6260713	1					
ANR	6260790	Argument	color		6260713	0					
ANR	6260791	Identifier	color		6260713	0					
ANR	6260792	PrimaryExpression	0		6260713	2					
ANR	6260793	IfStatement	if ( ! color )		6260713	6					
ANR	6260794	Condition	! color	3250:5:67231:67236	6260713	0	True				
ANR	6260795	UnaryOperationExpression	! color		6260713	0					
ANR	6260796	UnaryOperator	!		6260713	0					
ANR	6260797	Identifier	color		6260713	1					
ANR	6260798	CompoundStatement		10:13:211:211	6260713	1					
ANR	6260799	ReturnStatement	return strdup ( str ) ;	3251:2:67243:67262	6260713	0	True				
ANR	6260800	CallExpression	strdup ( str )		6260713	0					
ANR	6260801	Callee	strdup		6260713	0					
ANR	6260802	Identifier	strdup		6260713	0					
ANR	6260803	ArgumentList	str		6260713	1					
ANR	6260804	Argument	str		6260713	0					
ANR	6260805	Identifier	str		6260713	0					
ANR	6260806	IfStatement	if ( ! word || ! * word )		6260713	7					
ANR	6260807	Condition	! word || ! * word	3253:5:67272:67286	6260713	0	True				
ANR	6260808	OrExpression	! word || ! * word		6260713	0		||			
ANR	6260809	UnaryOperationExpression	! word		6260713	0					
ANR	6260810	UnaryOperator	!		6260713	0					
ANR	6260811	Identifier	word		6260713	1					
ANR	6260812	UnaryOperationExpression	! * word		6260713	1					
ANR	6260813	UnaryOperator	!		6260713	0					
ANR	6260814	UnaryOperationExpression	* word		6260713	1					
ANR	6260815	UnaryOperator	*		6260713	0					
ANR	6260816	Identifier	word		6260713	1					
ANR	6260817	CompoundStatement		13:22:261:261	6260713	1					
ANR	6260818	ReturnStatement	"return r_str_newf ( ""%s%s%s"" , color , str , color_reset ) ;"	3254:2:67293:67346	6260713	0	True				
ANR	6260819	CallExpression	"r_str_newf ( ""%s%s%s"" , color , str , color_reset )"		6260713	0					
ANR	6260820	Callee	r_str_newf		6260713	0					
ANR	6260821	Identifier	r_str_newf		6260713	0					
ANR	6260822	ArgumentList	"""%s%s%s"""		6260713	1					
ANR	6260823	Argument	"""%s%s%s"""		6260713	0					
ANR	6260824	PrimaryExpression	"""%s%s%s"""		6260713	0					
ANR	6260825	Argument	color		6260713	1					
ANR	6260826	Identifier	color		6260713	0					
ANR	6260827	Argument	str		6260713	2					
ANR	6260828	Identifier	str		6260713	0					
ANR	6260829	Argument	color_reset		6260713	3					
ANR	6260830	Identifier	color_reset		6260713	0					
ANR	6260831	IdentifierDeclStatement	ut32 l_word = strlen ( word ) ;	3256:1:67352:67379	6260713	8	True				
ANR	6260832	IdentifierDecl	l_word = strlen ( word )		6260713	0					
ANR	6260833	IdentifierDeclType	ut32		6260713	0					
ANR	6260834	Identifier	l_word		6260713	1					
ANR	6260835	AssignmentExpression	l_word = strlen ( word )		6260713	2		=			
ANR	6260836	Identifier	l_word		6260713	0					
ANR	6260837	CallExpression	strlen ( word )		6260713	1					
ANR	6260838	Callee	strlen		6260713	0					
ANR	6260839	Identifier	strlen		6260713	0					
ANR	6260840	ArgumentList	word		6260713	1					
ANR	6260841	Argument	word		6260713	0					
ANR	6260842	Identifier	word		6260713	0					
ANR	6260843	IdentifierDeclStatement	char o [ 1024 ] = { 0 } ;	3258:1:67415:67433	6260713	9	True				
ANR	6260844	IdentifierDecl	o [ 1024 ] = { 0 }		6260713	0					
ANR	6260845	IdentifierDeclType	char [ 1024 ]		6260713	0					
ANR	6260846	Identifier	o		6260713	1					
ANR	6260847	PrimaryExpression	1024		6260713	2					
ANR	6260848	AssignmentExpression	o [ 1024 ] = { 0 }		6260713	3		=			
ANR	6260849	Identifier	o		6260713	0					
ANR	6260850	InitializerList	0		6260713	1					
ANR	6260851	PrimaryExpression	0		6260713	0					
ANR	6260852	WhileStatement	while ( start && ( start < str + l_str ) )		6260713	10					
ANR	6260853	Condition	start && ( start < str + l_str )	3259:8:67443:67472	6260713	0	True				
ANR	6260854	AndExpression	start && ( start < str + l_str )		6260713	0		&&			
ANR	6260855	Identifier	start		6260713	0					
ANR	6260856	RelationalExpression	start < str + l_str		6260713	1		<			
ANR	6260857	Identifier	start		6260713	0					
ANR	6260858	AdditiveExpression	str + l_str		6260713	1		+			
ANR	6260859	Identifier	str		6260713	0					
ANR	6260860	Identifier	l_str		6260713	1					
ANR	6260861	CompoundStatement		20:2:451:465	6260713	1					
ANR	6260862	IdentifierDeclStatement	int copied = 0 ;	3260:2:67479:67493	6260713	0	True				
ANR	6260863	IdentifierDecl	copied = 0		6260713	0					
ANR	6260864	IdentifierDeclType	int		6260713	0					
ANR	6260865	Identifier	copied		6260713	1					
ANR	6260866	AssignmentExpression	copied = 0		6260713	2		=			
ANR	6260867	Identifier	copied		6260713	0					
ANR	6260868	PrimaryExpression	0		6260713	1					
ANR	6260869	ExpressionStatement	"start = strchr_skip_color_codes ( str + i , * word )"	3262:2:67520:67568	6260713	1	True				
ANR	6260870	AssignmentExpression	"start = strchr_skip_color_codes ( str + i , * word )"		6260713	0		=			
ANR	6260871	Identifier	start		6260713	0					
ANR	6260872	CallExpression	"strchr_skip_color_codes ( str + i , * word )"		6260713	1					
ANR	6260873	Callee	strchr_skip_color_codes		6260713	0					
ANR	6260874	Identifier	strchr_skip_color_codes		6260713	0					
ANR	6260875	ArgumentList	str + i		6260713	1					
ANR	6260876	Argument	str + i		6260713	0					
ANR	6260877	AdditiveExpression	str + i		6260713	0		+			
ANR	6260878	Identifier	str		6260713	0					
ANR	6260879	Identifier	i		6260713	1					
ANR	6260880	Argument	* word		6260713	1					
ANR	6260881	UnaryOperationExpression	* word		6260713	0					
ANR	6260882	UnaryOperator	*		6260713	0					
ANR	6260883	Identifier	word		6260713	1					
ANR	6260884	IfStatement	if ( start )		6260713	2					
ANR	6260885	Condition	start	3263:6:67576:67580	6260713	0	True				
ANR	6260886	Identifier	start		6260713	0					
ANR	6260887	CompoundStatement		23:13:555:555	6260713	1					
ANR	6260888	ExpressionStatement	to_copy = start - ( str + i )	3264:3:67588:67615	6260713	0	True				
ANR	6260889	AssignmentExpression	to_copy = start - ( str + i )		6260713	0		=			
ANR	6260890	Identifier	to_copy		6260713	0					
ANR	6260891	AdditiveExpression	start - ( str + i )		6260713	1		-			
ANR	6260892	Identifier	start		6260713	0					
ANR	6260893	AdditiveExpression	str + i		6260713	1		+			
ANR	6260894	Identifier	str		6260713	0					
ANR	6260895	Identifier	i		6260713	1					
ANR	6260896	IfStatement	if ( to_copy + j + 1 > sizeof ( o ) )		6260713	1					
ANR	6260897	Condition	to_copy + j + 1 > sizeof ( o )	3265:7:67624:67651	6260713	0	True				
ANR	6260898	RelationalExpression	to_copy + j + 1 > sizeof ( o )		6260713	0		>			
ANR	6260899	AdditiveExpression	to_copy + j + 1		6260713	0		+			
ANR	6260900	Identifier	to_copy		6260713	0					
ANR	6260901	AdditiveExpression	j + 1		6260713	1		+			
ANR	6260902	Identifier	j		6260713	0					
ANR	6260903	PrimaryExpression	1		6260713	1					
ANR	6260904	SizeofExpression	sizeof ( o )		6260713	1					
ANR	6260905	Sizeof	sizeof		6260713	0					
ANR	6260906	SizeofOperand	o		6260713	1					
ANR	6260907	CompoundStatement		25:37:626:626	6260713	1					
ANR	6260908	BreakStatement	break ;	3267:4:67682:67687	6260713	0	True				
ANR	6260909	ExpressionStatement	"strncpy ( o + j , str + i , to_copy )"	3269:3:67697:67730	6260713	2	True				
ANR	6260910	CallExpression	"strncpy ( o + j , str + i , to_copy )"		6260713	0					
ANR	6260911	Callee	strncpy		6260713	0					
ANR	6260912	Identifier	strncpy		6260713	0					
ANR	6260913	ArgumentList	o + j		6260713	1					
ANR	6260914	Argument	o + j		6260713	0					
ANR	6260915	AdditiveExpression	o + j		6260713	0		+			
ANR	6260916	Identifier	o		6260713	0					
ANR	6260917	Identifier	j		6260713	1					
ANR	6260918	Argument	str + i		6260713	1					
ANR	6260919	AdditiveExpression	str + i		6260713	0		+			
ANR	6260920	Identifier	str		6260713	0					
ANR	6260921	Identifier	i		6260713	1					
ANR	6260922	Argument	to_copy		6260713	2					
ANR	6260923	Identifier	to_copy		6260713	0					
ANR	6260924	ExpressionStatement	i += to_copy	3270:3:67735:67747	6260713	3	True				
ANR	6260925	AssignmentExpression	i += to_copy		6260713	0		+=			
ANR	6260926	Identifier	i		6260713	0					
ANR	6260927	Identifier	to_copy		6260713	1					
ANR	6260928	ExpressionStatement	j += to_copy	3271:3:67752:67764	6260713	4	True				
ANR	6260929	AssignmentExpression	j += to_copy		6260713	0		+=			
ANR	6260930	Identifier	j		6260713	0					
ANR	6260931	Identifier	to_copy		6260713	1					
ANR	6260932	IfStatement	"if ( ! strncmp_skip_color_codes ( start , word , l_word ) )"		6260713	5					
ANR	6260933	Condition	"! strncmp_skip_color_codes ( start , word , l_word )"	3272:7:67773:67819	6260713	0	True				
ANR	6260934	UnaryOperationExpression	"! strncmp_skip_color_codes ( start , word , l_word )"		6260713	0					
ANR	6260935	UnaryOperator	!		6260713	0					
ANR	6260936	CallExpression	"strncmp_skip_color_codes ( start , word , l_word )"		6260713	1					
ANR	6260937	Callee	strncmp_skip_color_codes		6260713	0					
ANR	6260938	Identifier	strncmp_skip_color_codes		6260713	0					
ANR	6260939	ArgumentList	start		6260713	1					
ANR	6260940	Argument	start		6260713	0					
ANR	6260941	Identifier	start		6260713	0					
ANR	6260942	Argument	word		6260713	1					
ANR	6260943	Identifier	word		6260713	0					
ANR	6260944	Argument	l_word		6260713	2					
ANR	6260945	Identifier	l_word		6260713	0					
ANR	6260946	CompoundStatement		32:56:794:794	6260713	1					
ANR	6260947	IfStatement	if ( j + strlen ( color ) >= sizeof ( o ) )		6260713	0					
ANR	6260948	Condition	j + strlen ( color ) >= sizeof ( o )	3273:8:67832:67863	6260713	0	True				
ANR	6260949	RelationalExpression	j + strlen ( color ) >= sizeof ( o )		6260713	0		>=			
ANR	6260950	AdditiveExpression	j + strlen ( color )		6260713	0		+			
ANR	6260951	Identifier	j		6260713	0					
ANR	6260952	CallExpression	strlen ( color )		6260713	1					
ANR	6260953	Callee	strlen		6260713	0					
ANR	6260954	Identifier	strlen		6260713	0					
ANR	6260955	ArgumentList	color		6260713	1					
ANR	6260956	Argument	color		6260713	0					
ANR	6260957	Identifier	color		6260713	0					
ANR	6260958	SizeofExpression	sizeof ( o )		6260713	1					
ANR	6260959	Sizeof	sizeof		6260713	0					
ANR	6260960	SizeofOperand	o		6260713	1					
ANR	6260961	CompoundStatement		33:42:838:838	6260713	1					
ANR	6260962	BreakStatement	break ;	3275:5:67896:67901	6260713	0	True				
ANR	6260963	ExpressionStatement	"strcpy ( o + j , color )"	3277:4:67913:67934	6260713	1	True				
ANR	6260964	CallExpression	"strcpy ( o + j , color )"		6260713	0					
ANR	6260965	Callee	strcpy		6260713	0					
ANR	6260966	Identifier	strcpy		6260713	0					
ANR	6260967	ArgumentList	o + j		6260713	1					
ANR	6260968	Argument	o + j		6260713	0					
ANR	6260969	AdditiveExpression	o + j		6260713	0		+			
ANR	6260970	Identifier	o		6260713	0					
ANR	6260971	Identifier	j		6260713	1					
ANR	6260972	Argument	color		6260713	1					
ANR	6260973	Identifier	color		6260713	0					
ANR	6260974	ExpressionStatement	j += l_color	3278:4:67940:67952	6260713	2	True				
ANR	6260975	AssignmentExpression	j += l_color		6260713	0		+=			
ANR	6260976	Identifier	j		6260713	0					
ANR	6260977	Identifier	l_color		6260713	1					
ANR	6260978	IfStatement	if ( j + l_word >= sizeof ( o ) )		6260713	3					
ANR	6260979	Condition	j + l_word >= sizeof ( o )	3279:8:67962:67985	6260713	0	True				
ANR	6260980	RelationalExpression	j + l_word >= sizeof ( o )		6260713	0		>=			
ANR	6260981	AdditiveExpression	j + l_word		6260713	0		+			
ANR	6260982	Identifier	j		6260713	0					
ANR	6260983	Identifier	l_word		6260713	1					
ANR	6260984	SizeofExpression	sizeof ( o )		6260713	1					
ANR	6260985	Sizeof	sizeof		6260713	0					
ANR	6260986	SizeofOperand	o		6260713	1					
ANR	6260987	CompoundStatement		39:34:960:960	6260713	1					
ANR	6260988	BreakStatement	break ;	3281:5:68018:68023	6260713	0	True				
ANR	6260989	ExpressionStatement	"copied = strncpy_with_color_codes ( o + j , str + i , l_word )"	3283:4:68035:68093	6260713	4	True				
ANR	6260990	AssignmentExpression	"copied = strncpy_with_color_codes ( o + j , str + i , l_word )"		6260713	0		=			
ANR	6260991	Identifier	copied		6260713	0					
ANR	6260992	CallExpression	"strncpy_with_color_codes ( o + j , str + i , l_word )"		6260713	1					
ANR	6260993	Callee	strncpy_with_color_codes		6260713	0					
ANR	6260994	Identifier	strncpy_with_color_codes		6260713	0					
ANR	6260995	ArgumentList	o + j		6260713	1					
ANR	6260996	Argument	o + j		6260713	0					
ANR	6260997	AdditiveExpression	o + j		6260713	0		+			
ANR	6260998	Identifier	o		6260713	0					
ANR	6260999	Identifier	j		6260713	1					
ANR	6261000	Argument	str + i		6260713	1					
ANR	6261001	AdditiveExpression	str + i		6260713	0		+			
ANR	6261002	Identifier	str		6260713	0					
ANR	6261003	Identifier	i		6260713	1					
ANR	6261004	Argument	l_word		6260713	2					
ANR	6261005	Identifier	l_word		6260713	0					
ANR	6261006	ExpressionStatement	i += copied	3284:4:68099:68110	6260713	5	True				
ANR	6261007	AssignmentExpression	i += copied		6260713	0		+=			
ANR	6261008	Identifier	i		6260713	0					
ANR	6261009	Identifier	copied		6260713	1					
ANR	6261010	ExpressionStatement	j += copied	3285:4:68116:68127	6260713	6	True				
ANR	6261011	AssignmentExpression	j += copied		6260713	0		+=			
ANR	6261012	Identifier	j		6260713	0					
ANR	6261013	Identifier	copied		6260713	1					
ANR	6261014	IfStatement	if ( j + strlen ( color_reset ) >= sizeof ( o ) )		6260713	7					
ANR	6261015	Condition	j + strlen ( color_reset ) >= sizeof ( o )	3286:8:68137:68174	6260713	0	True				
ANR	6261016	RelationalExpression	j + strlen ( color_reset ) >= sizeof ( o )		6260713	0		>=			
ANR	6261017	AdditiveExpression	j + strlen ( color_reset )		6260713	0		+			
ANR	6261018	Identifier	j		6260713	0					
ANR	6261019	CallExpression	strlen ( color_reset )		6260713	1					
ANR	6261020	Callee	strlen		6260713	0					
ANR	6261021	Identifier	strlen		6260713	0					
ANR	6261022	ArgumentList	color_reset		6260713	1					
ANR	6261023	Argument	color_reset		6260713	0					
ANR	6261024	Identifier	color_reset		6260713	0					
ANR	6261025	SizeofExpression	sizeof ( o )		6260713	1					
ANR	6261026	Sizeof	sizeof		6260713	0					
ANR	6261027	SizeofOperand	o		6260713	1					
ANR	6261028	CompoundStatement		46:48:1149:1149	6260713	1					
ANR	6261029	BreakStatement	break ;	3288:5:68207:68212	6260713	0	True				
ANR	6261030	ExpressionStatement	"strcpy ( o + j , color_reset )"	3290:4:68224:68251	6260713	8	True				
ANR	6261031	CallExpression	"strcpy ( o + j , color_reset )"		6260713	0					
ANR	6261032	Callee	strcpy		6260713	0					
ANR	6261033	Identifier	strcpy		6260713	0					
ANR	6261034	ArgumentList	o + j		6260713	1					
ANR	6261035	Argument	o + j		6260713	0					
ANR	6261036	AdditiveExpression	o + j		6260713	0		+			
ANR	6261037	Identifier	o		6260713	0					
ANR	6261038	Identifier	j		6260713	1					
ANR	6261039	Argument	color_reset		6260713	1					
ANR	6261040	Identifier	color_reset		6260713	0					
ANR	6261041	ExpressionStatement	j += l_reset	3291:4:68257:68269	6260713	9	True				
ANR	6261042	AssignmentExpression	j += l_reset		6260713	0		+=			
ANR	6261043	Identifier	j		6260713	0					
ANR	6261044	Identifier	l_reset		6260713	1					
ANR	6261045	ElseStatement	else		6260713	0					
ANR	6261046	CompoundStatement		52:10:1253:1253	6260713	0					
ANR	6261047	ExpressionStatement	o [ j ++ ] = str [ i ++ ]	3293:4:68287:68304	6260713	0	True				
ANR	6261048	AssignmentExpression	o [ j ++ ] = str [ i ++ ]		6260713	0		=			
ANR	6261049	ArrayIndexing	o [ j ++ ]		6260713	0					
ANR	6261050	Identifier	o		6260713	0					
ANR	6261051	PostIncDecOperationExpression	j ++		6260713	1					
ANR	6261052	Identifier	j		6260713	0					
ANR	6261053	IncDec	++		6260713	1					
ANR	6261054	ArrayIndexing	str [ i ++ ]		6260713	1					
ANR	6261055	Identifier	str		6260713	0					
ANR	6261056	PostIncDecOperationExpression	i ++		6260713	1					
ANR	6261057	Identifier	i		6260713	0					
ANR	6261058	IncDec	++		6260713	1					
ANR	6261059	ElseStatement	else		6260713	0					
ANR	6261060	CompoundStatement		55:9:1292:1292	6260713	0					
ANR	6261061	IfStatement	if ( j + strlen ( str + i ) >= sizeof ( o ) )		6260713	0					
ANR	6261062	Condition	j + strlen ( str + i ) >= sizeof ( o )	3296:7:68329:68362	6260713	0	True				
ANR	6261063	RelationalExpression	j + strlen ( str + i ) >= sizeof ( o )		6260713	0		>=			
ANR	6261064	AdditiveExpression	j + strlen ( str + i )		6260713	0		+			
ANR	6261065	Identifier	j		6260713	0					
ANR	6261066	CallExpression	strlen ( str + i )		6260713	1					
ANR	6261067	Callee	strlen		6260713	0					
ANR	6261068	Identifier	strlen		6260713	0					
ANR	6261069	ArgumentList	str + i		6260713	1					
ANR	6261070	Argument	str + i		6260713	0					
ANR	6261071	AdditiveExpression	str + i		6260713	0		+			
ANR	6261072	Identifier	str		6260713	0					
ANR	6261073	Identifier	i		6260713	1					
ANR	6261074	SizeofExpression	sizeof ( o )		6260713	1					
ANR	6261075	Sizeof	sizeof		6260713	0					
ANR	6261076	SizeofOperand	o		6260713	1					
ANR	6261077	CompoundStatement		56:43:1337:1337	6260713	1					
ANR	6261078	BreakStatement	break ;	3297:4:68371:68376	6260713	0	True				
ANR	6261079	ExpressionStatement	"strcpy ( o + j , str + i )"	3299:3:68386:68409	6260713	1	True				
ANR	6261080	CallExpression	"strcpy ( o + j , str + i )"		6260713	0					
ANR	6261081	Callee	strcpy		6260713	0					
ANR	6261082	Identifier	strcpy		6260713	0					
ANR	6261083	ArgumentList	o + j		6260713	1					
ANR	6261084	Argument	o + j		6260713	0					
ANR	6261085	AdditiveExpression	o + j		6260713	0		+			
ANR	6261086	Identifier	o		6260713	0					
ANR	6261087	Identifier	j		6260713	1					
ANR	6261088	Argument	str + i		6260713	1					
ANR	6261089	AdditiveExpression	str + i		6260713	0		+			
ANR	6261090	Identifier	str		6260713	0					
ANR	6261091	Identifier	i		6260713	1					
ANR	6261092	BreakStatement	break ;	3300:3:68414:68419	6260713	2	True				
ANR	6261093	ReturnStatement	return strdup ( o ) ;	3303:1:68429:68446	6260713	11	True				
ANR	6261094	CallExpression	strdup ( o )		6260713	0					
ANR	6261095	Callee	strdup		6260713	0					
ANR	6261096	Identifier	strdup		6260713	0					
ANR	6261097	ArgumentList	o		6260713	1					
ANR	6261098	Argument	o		6260713	0					
ANR	6261099	Identifier	o		6260713	0					
ANR	6261100	ReturnType	R_API char *		6260713	1					
ANR	6261101	Identifier	r_str_highlight		6260713	2					
ANR	6261102	ParameterList	"char * str , const char * word , const char * color , const char * color_reset"		6260713	3					
ANR	6261103	Parameter	char * str	3241:28:66954:66962	6260713	0	True				
ANR	6261104	ParameterType	char *		6260713	0					
ANR	6261105	Identifier	str		6260713	1					
ANR	6261106	Parameter	const char * word	3241:39:66965:66980	6260713	1	True				
ANR	6261107	ParameterType	const char *		6260713	0					
ANR	6261108	Identifier	word		6260713	1					
ANR	6261109	Parameter	const char * color	3241:57:66983:66999	6260713	2	True				
ANR	6261110	ParameterType	const char *		6260713	0					
ANR	6261111	Identifier	color		6260713	1					
ANR	6261112	Parameter	const char * color_reset	3241:76:67002:67024	6260713	3	True				
ANR	6261113	ParameterType	const char *		6260713	0					
ANR	6261114	Identifier	color_reset		6260713	1					
ANR	6261115	CFGEntryNode	ENTRY		6260713		True				
ANR	6261116	CFGExitNode	EXIT		6260713		True				
ANR	6261117	Symbol	l_str		6260713						
ANR	6261118	Symbol	l_word		6260713						
ANR	6261119	Symbol	NULL		6260713						
ANR	6261120	Symbol	color		6260713						
ANR	6261121	Symbol	copied		6260713						
ANR	6261122	Symbol	* word		6260713						
ANR	6261123	Symbol	start		6260713						
ANR	6261124	Symbol	i		6260713						
ANR	6261125	Symbol	j		6260713						
ANR	6261126	Symbol	r_str_newf		6260713						
ANR	6261127	Symbol	l_reset		6260713						
ANR	6261128	Symbol	o		6260713						
ANR	6261129	Symbol	str		6260713						
ANR	6261130	Symbol	color_reset		6260713						
ANR	6261131	Symbol	strlen		6260713						
ANR	6261132	Symbol	l_color		6260713						
ANR	6261133	Symbol	strncmp_skip_color_codes		6260713						
ANR	6261134	Symbol	strncpy_with_color_codes		6260713						
ANR	6261135	Symbol	* o		6260713						
ANR	6261136	Symbol	* str		6260713						
ANR	6261137	Symbol	strdup		6260713						
ANR	6261138	Symbol	word		6260713						
ANR	6261139	Symbol	to_copy		6260713						
ANR	6261140	Symbol	strchr_skip_color_codes		6260713						
ANR	6261141	Function	r_str_mb_to_wc_l	3306:0:68451:68992							
ANR	6261142	FunctionDef	"r_str_mb_to_wc_l (const char * buf , int len)"		6261141	0					
ANR	6261143	CompoundStatement		3306:58:68509:68992	6261141	0					
ANR	6261144	IdentifierDeclStatement	wchar_t * res_buf = NULL ;	3307:1:68512:68535	6261141	0	True				
ANR	6261145	IdentifierDecl	* res_buf = NULL		6261141	0					
ANR	6261146	IdentifierDeclType	wchar_t *		6261141	0					
ANR	6261147	Identifier	res_buf		6261141	1					
ANR	6261148	AssignmentExpression	* res_buf = NULL		6261141	2		=			
ANR	6261149	Identifier	NULL		6261141	0					
ANR	6261150	Identifier	NULL		6261141	1					
ANR	6261151	IdentifierDeclStatement	size_t sz ;	3308:1:68538:68547	6261141	1	True				
ANR	6261152	IdentifierDecl	sz		6261141	0					
ANR	6261153	IdentifierDeclType	size_t		6261141	0					
ANR	6261154	Identifier	sz		6261141	1					
ANR	6261155	IdentifierDeclStatement	bool fail = true ;	3309:1:68550:68566	6261141	2	True				
ANR	6261156	IdentifierDecl	fail = true		6261141	0					
ANR	6261157	IdentifierDeclType	bool		6261141	0					
ANR	6261158	Identifier	fail		6261141	1					
ANR	6261159	AssignmentExpression	fail = true		6261141	2		=			
ANR	6261160	Identifier	true		6261141	0					
ANR	6261161	Identifier	true		6261141	1					
ANR	6261162	IfStatement	if ( ! buf || len <= 0 )		6261141	3					
ANR	6261163	Condition	! buf || len <= 0	3311:5:68574:68589	6261141	0	True				
ANR	6261164	OrExpression	! buf || len <= 0		6261141	0		||			
ANR	6261165	UnaryOperationExpression	! buf		6261141	0					
ANR	6261166	UnaryOperator	!		6261141	0					
ANR	6261167	Identifier	buf		6261141	1					
ANR	6261168	RelationalExpression	len <= 0		6261141	1		<=			
ANR	6261169	Identifier	len		6261141	0					
ANR	6261170	PrimaryExpression	0		6261141	1					
ANR	6261171	CompoundStatement		6:23:82:82	6261141	1					
ANR	6261172	ReturnStatement	return NULL ;	3312:2:68596:68607	6261141	0	True				
ANR	6261173	Identifier	NULL		6261141	0					
ANR	6261174	ExpressionStatement	"sz = mbstowcs ( NULL , buf , len )"	3314:1:68613:68643	6261141	4	True				
ANR	6261175	AssignmentExpression	"sz = mbstowcs ( NULL , buf , len )"		6261141	0		=			
ANR	6261176	Identifier	sz		6261141	0					
ANR	6261177	CallExpression	"mbstowcs ( NULL , buf , len )"		6261141	1					
ANR	6261178	Callee	mbstowcs		6261141	0					
ANR	6261179	Identifier	mbstowcs		6261141	0					
ANR	6261180	ArgumentList	NULL		6261141	1					
ANR	6261181	Argument	NULL		6261141	0					
ANR	6261182	Identifier	NULL		6261141	0					
ANR	6261183	Argument	buf		6261141	1					
ANR	6261184	Identifier	buf		6261141	0					
ANR	6261185	Argument	len		6261141	2					
ANR	6261186	Identifier	len		6261141	0					
ANR	6261187	IfStatement	if ( sz == ( size_t ) - 1 )		6261141	5					
ANR	6261188	Condition	sz == ( size_t ) - 1	3315:5:68650:68665	6261141	0	True				
ANR	6261189	EqualityExpression	sz == ( size_t ) - 1		6261141	0		==			
ANR	6261190	Identifier	sz		6261141	0					
ANR	6261191	CastExpression	( size_t ) - 1		6261141	1					
ANR	6261192	CastTarget	size_t		6261141	0					
ANR	6261193	UnaryOperationExpression	- 1		6261141	1					
ANR	6261194	UnaryOperator	-		6261141	0					
ANR	6261195	PrimaryExpression	1		6261141	1					
ANR	6261196	CompoundStatement		10:23:158:158	6261141	1					
ANR	6261197	GotoStatement	goto err_r_str_mb_to_wc ;	3316:2:68672:68695	6261141	0	True				
ANR	6261198	Identifier	err_r_str_mb_to_wc		6261141	0					
ANR	6261199	ExpressionStatement	"res_buf = ( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"	3318:1:68701:68761	6261141	6	True				
ANR	6261200	AssignmentExpression	"res_buf = ( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		6261141	0		=			
ANR	6261201	Identifier	res_buf		6261141	0					
ANR	6261202	CastExpression	"( wchar_t * ) calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		6261141	1					
ANR	6261203	CastTarget	wchar_t *		6261141	0					
ANR	6261204	CallExpression	"calloc ( 1 , ( sz + 1 ) * sizeof ( wchar_t ) )"		6261141	1					
ANR	6261205	Callee	calloc		6261141	0					
ANR	6261206	Identifier	calloc		6261141	0					
ANR	6261207	ArgumentList	1		6261141	1					
ANR	6261208	Argument	1		6261141	0					
ANR	6261209	PrimaryExpression	1		6261141	0					
ANR	6261210	Argument	( sz + 1 ) * sizeof ( wchar_t )		6261141	1					
ANR	6261211	MultiplicativeExpression	( sz + 1 ) * sizeof ( wchar_t )		6261141	0		*			
ANR	6261212	AdditiveExpression	sz + 1		6261141	0		+			
ANR	6261213	Identifier	sz		6261141	0					
ANR	6261214	PrimaryExpression	1		6261141	1					
ANR	6261215	SizeofExpression	sizeof ( wchar_t )		6261141	1					
ANR	6261216	Sizeof	sizeof		6261141	0					
ANR	6261217	SizeofOperand	wchar_t		6261141	1					
ANR	6261218	IfStatement	if ( ! res_buf )		6261141	7					
ANR	6261219	Condition	! res_buf	3319:5:68768:68775	6261141	0	True				
ANR	6261220	UnaryOperationExpression	! res_buf		6261141	0					
ANR	6261221	UnaryOperator	!		6261141	0					
ANR	6261222	Identifier	res_buf		6261141	1					
ANR	6261223	CompoundStatement		14:15:268:268	6261141	1					
ANR	6261224	GotoStatement	goto err_r_str_mb_to_wc ;	3320:2:68782:68805	6261141	0	True				
ANR	6261225	Identifier	err_r_str_mb_to_wc		6261141	0					
ANR	6261226	ExpressionStatement	"sz = mbstowcs ( res_buf , buf , sz + 1 )"	3322:1:68811:68847	6261141	8	True				
ANR	6261227	AssignmentExpression	"sz = mbstowcs ( res_buf , buf , sz + 1 )"		6261141	0		=			
ANR	6261228	Identifier	sz		6261141	0					
ANR	6261229	CallExpression	"mbstowcs ( res_buf , buf , sz + 1 )"		6261141	1					
ANR	6261230	Callee	mbstowcs		6261141	0					
ANR	6261231	Identifier	mbstowcs		6261141	0					
ANR	6261232	ArgumentList	res_buf		6261141	1					
ANR	6261233	Argument	res_buf		6261141	0					
ANR	6261234	Identifier	res_buf		6261141	0					
ANR	6261235	Argument	buf		6261141	1					
ANR	6261236	Identifier	buf		6261141	0					
ANR	6261237	Argument	sz + 1		6261141	2					
ANR	6261238	AdditiveExpression	sz + 1		6261141	0		+			
ANR	6261239	Identifier	sz		6261141	0					
ANR	6261240	PrimaryExpression	1		6261141	1					
ANR	6261241	IfStatement	if ( sz == ( size_t ) - 1 )		6261141	9					
ANR	6261242	Condition	sz == ( size_t ) - 1	3323:5:68854:68869	6261141	0	True				
ANR	6261243	EqualityExpression	sz == ( size_t ) - 1		6261141	0		==			
ANR	6261244	Identifier	sz		6261141	0					
ANR	6261245	CastExpression	( size_t ) - 1		6261141	1					
ANR	6261246	CastTarget	size_t		6261141	0					
ANR	6261247	UnaryOperationExpression	- 1		6261141	1					
ANR	6261248	UnaryOperator	-		6261141	0					
ANR	6261249	PrimaryExpression	1		6261141	1					
ANR	6261250	CompoundStatement		18:23:362:362	6261141	1					
ANR	6261251	GotoStatement	goto err_r_str_mb_to_wc ;	3324:2:68876:68899	6261141	0	True				
ANR	6261252	Identifier	err_r_str_mb_to_wc		6261141	0					
ANR	6261253	ExpressionStatement	fail = false	3326:1:68905:68917	6261141	10	True				
ANR	6261254	AssignmentExpression	fail = false		6261141	0		=			
ANR	6261255	Identifier	fail		6261141	0					
ANR	6261256	Identifier	false		6261141	1					
ANR	6261257	Label	err_r_str_mb_to_wc :	3327:0:68919:68937	6261141	11	True				
ANR	6261258	Identifier	err_r_str_mb_to_wc		6261141	0					
ANR	6261259	IfStatement	if ( fail )		6261141	12					
ANR	6261260	Condition	fail	3328:5:68944:68947	6261141	0	True				
ANR	6261261	Identifier	fail		6261141	0					
ANR	6261262	CompoundStatement		23:11:440:440	6261141	1					
ANR	6261263	ExpressionStatement	R_FREE ( res_buf )	3329:2:68954:68970	6261141	0	True				
ANR	6261264	CallExpression	R_FREE ( res_buf )		6261141	0					
ANR	6261265	Callee	R_FREE		6261141	0					
ANR	6261266	Identifier	R_FREE		6261141	0					
ANR	6261267	ArgumentList	res_buf		6261141	1					
ANR	6261268	Argument	res_buf		6261141	0					
ANR	6261269	Identifier	res_buf		6261141	0					
ANR	6261270	ReturnStatement	return res_buf ;	3331:1:68976:68990	6261141	13	True				
ANR	6261271	Identifier	res_buf		6261141	0					
ANR	6261272	ReturnType	R_API wchar_t *		6261141	1					
ANR	6261273	Identifier	r_str_mb_to_wc_l		6261141	2					
ANR	6261274	ParameterList	"const char * buf , int len"		6261141	3					
ANR	6261275	Parameter	const char * buf	3306:32:68483:68497	6261141	0	True				
ANR	6261276	ParameterType	const char *		6261141	0					
ANR	6261277	Identifier	buf		6261141	1					
ANR	6261278	Parameter	int len	3306:49:68500:68506	6261141	1	True				
ANR	6261279	ParameterType	int		6261141	0					
ANR	6261280	Identifier	len		6261141	1					
ANR	6261281	CFGEntryNode	ENTRY		6261141		True				
ANR	6261282	CFGExitNode	EXIT		6261141		True				
ANR	6261283	Symbol	fail		6261141						
ANR	6261284	Symbol	buf		6261141						
ANR	6261285	Symbol	NULL		6261141						
ANR	6261286	Symbol	len		6261141						
ANR	6261287	Symbol	res_buf		6261141						
ANR	6261288	Symbol	sz		6261141						
ANR	6261289	Symbol	true		6261141						
ANR	6261290	Symbol	false		6261141						
ANR	6261291	Symbol	mbstowcs		6261141						
ANR	6261292	Symbol	calloc		6261141						
ANR	6261293	Function	r_str_wc_to_mb_l	3334:0:68995:69527							
ANR	6261294	FunctionDef	"r_str_wc_to_mb_l (const wchar_t * buf , int len)"		6261293	0					
ANR	6261295	CompoundStatement		3334:58:69053:69527	6261293	0					
ANR	6261296	IdentifierDeclStatement	char * res_buf = NULL ;	3335:1:69056:69076	6261293	0	True				
ANR	6261297	IdentifierDecl	* res_buf = NULL		6261293	0					
ANR	6261298	IdentifierDeclType	char *		6261293	0					
ANR	6261299	Identifier	res_buf		6261293	1					
ANR	6261300	AssignmentExpression	* res_buf = NULL		6261293	2		=			
ANR	6261301	Identifier	NULL		6261293	0					
ANR	6261302	Identifier	NULL		6261293	1					
ANR	6261303	IdentifierDeclStatement	bool fail = true ;	3336:1:69079:69095	6261293	1	True				
ANR	6261304	IdentifierDecl	fail = true		6261293	0					
ANR	6261305	IdentifierDeclType	bool		6261293	0					
ANR	6261306	Identifier	fail		6261293	1					
ANR	6261307	AssignmentExpression	fail = true		6261293	2		=			
ANR	6261308	Identifier	true		6261293	0					
ANR	6261309	Identifier	true		6261293	1					
ANR	6261310	IdentifierDeclStatement	size_t sz ;	3337:1:69098:69107	6261293	2	True				
ANR	6261311	IdentifierDecl	sz		6261293	0					
ANR	6261312	IdentifierDeclType	size_t		6261293	0					
ANR	6261313	Identifier	sz		6261293	1					
ANR	6261314	IfStatement	if ( ! buf || len <= 0 )		6261293	3					
ANR	6261315	Condition	! buf || len <= 0	3339:5:69115:69130	6261293	0	True				
ANR	6261316	OrExpression	! buf || len <= 0		6261293	0		||			
ANR	6261317	UnaryOperationExpression	! buf		6261293	0					
ANR	6261318	UnaryOperator	!		6261293	0					
ANR	6261319	Identifier	buf		6261293	1					
ANR	6261320	RelationalExpression	len <= 0		6261293	1		<=			
ANR	6261321	Identifier	len		6261293	0					
ANR	6261322	PrimaryExpression	0		6261293	1					
ANR	6261323	CompoundStatement		6:23:79:79	6261293	1					
ANR	6261324	ReturnStatement	return NULL ;	3340:2:69137:69148	6261293	0	True				
ANR	6261325	Identifier	NULL		6261293	0					
ANR	6261326	ExpressionStatement	"sz = wcstombs ( NULL , buf , len )"	3342:1:69154:69184	6261293	4	True				
ANR	6261327	AssignmentExpression	"sz = wcstombs ( NULL , buf , len )"		6261293	0		=			
ANR	6261328	Identifier	sz		6261293	0					
ANR	6261329	CallExpression	"wcstombs ( NULL , buf , len )"		6261293	1					
ANR	6261330	Callee	wcstombs		6261293	0					
ANR	6261331	Identifier	wcstombs		6261293	0					
ANR	6261332	ArgumentList	NULL		6261293	1					
ANR	6261333	Argument	NULL		6261293	0					
ANR	6261334	Identifier	NULL		6261293	0					
ANR	6261335	Argument	buf		6261293	1					
ANR	6261336	Identifier	buf		6261293	0					
ANR	6261337	Argument	len		6261293	2					
ANR	6261338	Identifier	len		6261293	0					
ANR	6261339	IfStatement	if ( sz == ( size_t ) - 1 )		6261293	5					
ANR	6261340	Condition	sz == ( size_t ) - 1	3343:5:69191:69206	6261293	0	True				
ANR	6261341	EqualityExpression	sz == ( size_t ) - 1		6261293	0		==			
ANR	6261342	Identifier	sz		6261293	0					
ANR	6261343	CastExpression	( size_t ) - 1		6261293	1					
ANR	6261344	CastTarget	size_t		6261293	0					
ANR	6261345	UnaryOperationExpression	- 1		6261293	1					
ANR	6261346	UnaryOperator	-		6261293	0					
ANR	6261347	PrimaryExpression	1		6261293	1					
ANR	6261348	CompoundStatement		10:23:155:155	6261293	1					
ANR	6261349	GotoStatement	goto err_r_str_wc_to_mb ;	3344:2:69213:69236	6261293	0	True				
ANR	6261350	Identifier	err_r_str_wc_to_mb		6261293	0					
ANR	6261351	ExpressionStatement	"res_buf = ( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"	3346:1:69242:69296	6261293	6	True				
ANR	6261352	AssignmentExpression	"res_buf = ( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		6261293	0		=			
ANR	6261353	Identifier	res_buf		6261293	0					
ANR	6261354	CastExpression	"( char * ) calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		6261293	1					
ANR	6261355	CastTarget	char *		6261293	0					
ANR	6261356	CallExpression	"calloc ( 1 , ( sz + 1 ) * sizeof ( char ) )"		6261293	1					
ANR	6261357	Callee	calloc		6261293	0					
ANR	6261358	Identifier	calloc		6261293	0					
ANR	6261359	ArgumentList	1		6261293	1					
ANR	6261360	Argument	1		6261293	0					
ANR	6261361	PrimaryExpression	1		6261293	0					
ANR	6261362	Argument	( sz + 1 ) * sizeof ( char )		6261293	1					
ANR	6261363	MultiplicativeExpression	( sz + 1 ) * sizeof ( char )		6261293	0		*			
ANR	6261364	AdditiveExpression	sz + 1		6261293	0		+			
ANR	6261365	Identifier	sz		6261293	0					
ANR	6261366	PrimaryExpression	1		6261293	1					
ANR	6261367	SizeofExpression	sizeof ( char )		6261293	1					
ANR	6261368	Sizeof	sizeof		6261293	0					
ANR	6261369	SizeofOperand	char		6261293	1					
ANR	6261370	IfStatement	if ( ! res_buf )		6261293	7					
ANR	6261371	Condition	! res_buf	3347:5:69303:69310	6261293	0	True				
ANR	6261372	UnaryOperationExpression	! res_buf		6261293	0					
ANR	6261373	UnaryOperator	!		6261293	0					
ANR	6261374	Identifier	res_buf		6261293	1					
ANR	6261375	CompoundStatement		14:15:259:259	6261293	1					
ANR	6261376	GotoStatement	goto err_r_str_wc_to_mb ;	3348:2:69317:69340	6261293	0	True				
ANR	6261377	Identifier	err_r_str_wc_to_mb		6261293	0					
ANR	6261378	ExpressionStatement	"sz = wcstombs ( res_buf , buf , sz + 1 )"	3350:1:69346:69382	6261293	8	True				
ANR	6261379	AssignmentExpression	"sz = wcstombs ( res_buf , buf , sz + 1 )"		6261293	0		=			
ANR	6261380	Identifier	sz		6261293	0					
ANR	6261381	CallExpression	"wcstombs ( res_buf , buf , sz + 1 )"		6261293	1					
ANR	6261382	Callee	wcstombs		6261293	0					
ANR	6261383	Identifier	wcstombs		6261293	0					
ANR	6261384	ArgumentList	res_buf		6261293	1					
ANR	6261385	Argument	res_buf		6261293	0					
ANR	6261386	Identifier	res_buf		6261293	0					
ANR	6261387	Argument	buf		6261293	1					
ANR	6261388	Identifier	buf		6261293	0					
ANR	6261389	Argument	sz + 1		6261293	2					
ANR	6261390	AdditiveExpression	sz + 1		6261293	0		+			
ANR	6261391	Identifier	sz		6261293	0					
ANR	6261392	PrimaryExpression	1		6261293	1					
ANR	6261393	IfStatement	if ( sz == ( size_t ) - 1 )		6261293	9					
ANR	6261394	Condition	sz == ( size_t ) - 1	3351:5:69389:69404	6261293	0	True				
ANR	6261395	EqualityExpression	sz == ( size_t ) - 1		6261293	0		==			
ANR	6261396	Identifier	sz		6261293	0					
ANR	6261397	CastExpression	( size_t ) - 1		6261293	1					
ANR	6261398	CastTarget	size_t		6261293	0					
ANR	6261399	UnaryOperationExpression	- 1		6261293	1					
ANR	6261400	UnaryOperator	-		6261293	0					
ANR	6261401	PrimaryExpression	1		6261293	1					
ANR	6261402	CompoundStatement		18:23:353:353	6261293	1					
ANR	6261403	GotoStatement	goto err_r_str_wc_to_mb ;	3352:2:69411:69434	6261293	0	True				
ANR	6261404	Identifier	err_r_str_wc_to_mb		6261293	0					
ANR	6261405	ExpressionStatement	fail = false	3354:1:69440:69452	6261293	10	True				
ANR	6261406	AssignmentExpression	fail = false		6261293	0		=			
ANR	6261407	Identifier	fail		6261293	0					
ANR	6261408	Identifier	false		6261293	1					
ANR	6261409	Label	err_r_str_wc_to_mb :	3355:0:69454:69472	6261293	11	True				
ANR	6261410	Identifier	err_r_str_wc_to_mb		6261293	0					
ANR	6261411	IfStatement	if ( fail )		6261293	12					
ANR	6261412	Condition	fail	3356:5:69479:69482	6261293	0	True				
ANR	6261413	Identifier	fail		6261293	0					
ANR	6261414	CompoundStatement		23:11:431:431	6261293	1					
ANR	6261415	ExpressionStatement	R_FREE ( res_buf )	3357:2:69489:69505	6261293	0	True				
ANR	6261416	CallExpression	R_FREE ( res_buf )		6261293	0					
ANR	6261417	Callee	R_FREE		6261293	0					
ANR	6261418	Identifier	R_FREE		6261293	0					
ANR	6261419	ArgumentList	res_buf		6261293	1					
ANR	6261420	Argument	res_buf		6261293	0					
ANR	6261421	Identifier	res_buf		6261293	0					
ANR	6261422	ReturnStatement	return res_buf ;	3359:1:69511:69525	6261293	13	True				
ANR	6261423	Identifier	res_buf		6261293	0					
ANR	6261424	ReturnType	R_API char *		6261293	1					
ANR	6261425	Identifier	r_str_wc_to_mb_l		6261293	2					
ANR	6261426	ParameterList	"const wchar_t * buf , int len"		6261293	3					
ANR	6261427	Parameter	const wchar_t * buf	3334:29:69024:69041	6261293	0	True				
ANR	6261428	ParameterType	const wchar_t *		6261293	0					
ANR	6261429	Identifier	buf		6261293	1					
ANR	6261430	Parameter	int len	3334:49:69044:69050	6261293	1	True				
ANR	6261431	ParameterType	int		6261293	0					
ANR	6261432	Identifier	len		6261293	1					
ANR	6261433	CFGEntryNode	ENTRY		6261293		True				
ANR	6261434	CFGExitNode	EXIT		6261293		True				
ANR	6261435	Symbol	fail		6261293						
ANR	6261436	Symbol	buf		6261293						
ANR	6261437	Symbol	NULL		6261293						
ANR	6261438	Symbol	len		6261293						
ANR	6261439	Symbol	wcstombs		6261293						
ANR	6261440	Symbol	res_buf		6261293						
ANR	6261441	Symbol	sz		6261293						
ANR	6261442	Symbol	true		6261293						
ANR	6261443	Symbol	false		6261293						
ANR	6261444	Symbol	calloc		6261293						
ANR	6261445	Function	r_str_wc_to_mb	3362:0:69530:69656							
ANR	6261446	FunctionDef	r_str_wc_to_mb (const wchar_t * buf)		6261445	0					
ANR	6261447	CompoundStatement		3362:47:69577:69656	6261445	0					
ANR	6261448	IfStatement	if ( ! buf )		6261445	0					
ANR	6261449	Condition	! buf	3363:5:69584:69587	6261445	0	True				
ANR	6261450	UnaryOperationExpression	! buf		6261445	0					
ANR	6261451	UnaryOperator	!		6261445	0					
ANR	6261452	Identifier	buf		6261445	1					
ANR	6261453	CompoundStatement		2:11:12:12	6261445	1					
ANR	6261454	ReturnStatement	return NULL ;	3364:2:69594:69605	6261445	0	True				
ANR	6261455	Identifier	NULL		6261445	0					
ANR	6261456	ReturnStatement	"return r_str_wc_to_mb_l ( buf , wcslen ( buf ) ) ;"	3366:1:69611:69654	6261445	1	True				
ANR	6261457	CallExpression	"r_str_wc_to_mb_l ( buf , wcslen ( buf ) )"		6261445	0					
ANR	6261458	Callee	r_str_wc_to_mb_l		6261445	0					
ANR	6261459	Identifier	r_str_wc_to_mb_l		6261445	0					
ANR	6261460	ArgumentList	buf		6261445	1					
ANR	6261461	Argument	buf		6261445	0					
ANR	6261462	Identifier	buf		6261445	0					
ANR	6261463	Argument	wcslen ( buf )		6261445	1					
ANR	6261464	CallExpression	wcslen ( buf )		6261445	0					
ANR	6261465	Callee	wcslen		6261445	0					
ANR	6261466	Identifier	wcslen		6261445	0					
ANR	6261467	ArgumentList	buf		6261445	1					
ANR	6261468	Argument	buf		6261445	0					
ANR	6261469	Identifier	buf		6261445	0					
ANR	6261470	ReturnType	R_API char *		6261445	1					
ANR	6261471	Identifier	r_str_wc_to_mb		6261445	2					
ANR	6261472	ParameterList	const wchar_t * buf		6261445	3					
ANR	6261473	Parameter	const wchar_t * buf	3362:27:69557:69574	6261445	0	True				
ANR	6261474	ParameterType	const wchar_t *		6261445	0					
ANR	6261475	Identifier	buf		6261445	1					
ANR	6261476	CFGEntryNode	ENTRY		6261445		True				
ANR	6261477	CFGExitNode	EXIT		6261445		True				
ANR	6261478	Symbol	buf		6261445						
ANR	6261479	Symbol	NULL		6261445						
ANR	6261480	Symbol	wcslen		6261445						
ANR	6261481	Symbol	r_str_wc_to_mb_l		6261445						
ANR	6261482	Function	r_str_mb_to_wc	3369:0:69659:69785							
ANR	6261483	FunctionDef	r_str_mb_to_wc (const char * buf)		6261482	0					
ANR	6261484	CompoundStatement		3369:47:69706:69785	6261482	0					
ANR	6261485	IfStatement	if ( ! buf )		6261482	0					
ANR	6261486	Condition	! buf	3370:5:69713:69716	6261482	0	True				
ANR	6261487	UnaryOperationExpression	! buf		6261482	0					
ANR	6261488	UnaryOperator	!		6261482	0					
ANR	6261489	Identifier	buf		6261482	1					
ANR	6261490	CompoundStatement		2:11:12:12	6261482	1					
ANR	6261491	ReturnStatement	return NULL ;	3371:2:69723:69734	6261482	0	True				
ANR	6261492	Identifier	NULL		6261482	0					
ANR	6261493	ReturnStatement	"return r_str_mb_to_wc_l ( buf , strlen ( buf ) ) ;"	3373:1:69740:69783	6261482	1	True				
ANR	6261494	CallExpression	"r_str_mb_to_wc_l ( buf , strlen ( buf ) )"		6261482	0					
ANR	6261495	Callee	r_str_mb_to_wc_l		6261482	0					
ANR	6261496	Identifier	r_str_mb_to_wc_l		6261482	0					
ANR	6261497	ArgumentList	buf		6261482	1					
ANR	6261498	Argument	buf		6261482	0					
ANR	6261499	Identifier	buf		6261482	0					
ANR	6261500	Argument	strlen ( buf )		6261482	1					
ANR	6261501	CallExpression	strlen ( buf )		6261482	0					
ANR	6261502	Callee	strlen		6261482	0					
ANR	6261503	Identifier	strlen		6261482	0					
ANR	6261504	ArgumentList	buf		6261482	1					
ANR	6261505	Argument	buf		6261482	0					
ANR	6261506	Identifier	buf		6261482	0					
ANR	6261507	ReturnType	R_API wchar_t *		6261482	1					
ANR	6261508	Identifier	r_str_mb_to_wc		6261482	2					
ANR	6261509	ParameterList	const char * buf		6261482	3					
ANR	6261510	Parameter	const char * buf	3369:30:69689:69703	6261482	0	True				
ANR	6261511	ParameterType	const char *		6261482	0					
ANR	6261512	Identifier	buf		6261482	1					
ANR	6261513	CFGEntryNode	ENTRY		6261482		True				
ANR	6261514	CFGExitNode	EXIT		6261482		True				
ANR	6261515	Symbol	strlen		6261482						
ANR	6261516	Symbol	buf		6261482						
ANR	6261517	Symbol	NULL		6261482						
ANR	6261518	Symbol	r_str_mb_to_wc_l		6261482						
ANR	6261519	Function	r_str_from_ut64	3376:0:69788:69989							
ANR	6261520	FunctionDef	r_str_from_ut64 (ut64 val)		6261519	0					
ANR	6261521	CompoundStatement		3376:38:69826:69989	6261519	0					
ANR	6261522	IdentifierDeclStatement	int i = 0 ;	3377:1:69829:69838	6261519	0	True				
ANR	6261523	IdentifierDecl	i = 0		6261519	0					
ANR	6261524	IdentifierDeclType	int		6261519	0					
ANR	6261525	Identifier	i		6261519	1					
ANR	6261526	AssignmentExpression	i = 0		6261519	2		=			
ANR	6261527	Identifier	i		6261519	0					
ANR	6261528	PrimaryExpression	0		6261519	1					
ANR	6261529	IdentifierDeclStatement	char * v = ( char * ) & val ;	3378:1:69841:69863	6261519	1	True				
ANR	6261530	IdentifierDecl	* v = ( char * ) & val		6261519	0					
ANR	6261531	IdentifierDeclType	char *		6261519	0					
ANR	6261532	Identifier	v		6261519	1					
ANR	6261533	AssignmentExpression	* v = ( char * ) & val		6261519	2		=			
ANR	6261534	Identifier	v		6261519	0					
ANR	6261535	CastExpression	( char * ) & val		6261519	1					
ANR	6261536	CastTarget	char *		6261519	0					
ANR	6261537	UnaryOperationExpression	& val		6261519	1					
ANR	6261538	UnaryOperator	&		6261519	0					
ANR	6261539	Identifier	val		6261519	1					
ANR	6261540	IdentifierDeclStatement	"char * str = ( char * ) calloc ( 1 , 9 ) ;"	3379:1:69866:69898	6261519	2	True				
ANR	6261541	IdentifierDecl	"* str = ( char * ) calloc ( 1 , 9 )"		6261519	0					
ANR	6261542	IdentifierDeclType	char *		6261519	0					
ANR	6261543	Identifier	str		6261519	1					
ANR	6261544	AssignmentExpression	"* str = ( char * ) calloc ( 1 , 9 )"		6261519	2		=			
ANR	6261545	Identifier	str		6261519	0					
ANR	6261546	CastExpression	"( char * ) calloc ( 1 , 9 )"		6261519	1					
ANR	6261547	CastTarget	char *		6261519	0					
ANR	6261548	CallExpression	"calloc ( 1 , 9 )"		6261519	1					
ANR	6261549	Callee	calloc		6261519	0					
ANR	6261550	Identifier	calloc		6261519	0					
ANR	6261551	ArgumentList	1		6261519	1					
ANR	6261552	Argument	1		6261519	0					
ANR	6261553	PrimaryExpression	1		6261519	0					
ANR	6261554	Argument	9		6261519	1					
ANR	6261555	PrimaryExpression	9		6261519	0					
ANR	6261556	IfStatement	if ( ! str )		6261519	3					
ANR	6261557	Condition	! str	3380:5:69905:69908	6261519	0	True				
ANR	6261558	UnaryOperationExpression	! str		6261519	0					
ANR	6261559	UnaryOperator	!		6261519	0					
ANR	6261560	Identifier	str		6261519	1					
ANR	6261561	CompoundStatement		5:11:84:84	6261519	1					
ANR	6261562	ReturnStatement	return NULL ;	3381:2:69915:69926	6261519	0	True				
ANR	6261563	Identifier	NULL		6261519	0					
ANR	6261564	WhileStatement	while ( i < 8 && * v )		6261519	4					
ANR	6261565	Condition	i < 8 && * v	3383:8:69939:69949	6261519	0	True				
ANR	6261566	AndExpression	i < 8 && * v		6261519	0		&&			
ANR	6261567	RelationalExpression	i < 8		6261519	0		<			
ANR	6261568	Identifier	i		6261519	0					
ANR	6261569	PrimaryExpression	8		6261519	1					
ANR	6261570	UnaryOperationExpression	* v		6261519	1					
ANR	6261571	UnaryOperator	*		6261519	0					
ANR	6261572	Identifier	v		6261519	1					
ANR	6261573	CompoundStatement		8:21:125:125	6261519	1					
ANR	6261574	ExpressionStatement	str [ i ++ ] = * v ++	3384:2:69956:69971	6261519	0	True				
ANR	6261575	AssignmentExpression	str [ i ++ ] = * v ++		6261519	0		=			
ANR	6261576	ArrayIndexing	str [ i ++ ]		6261519	0					
ANR	6261577	Identifier	str		6261519	0					
ANR	6261578	PostIncDecOperationExpression	i ++		6261519	1					
ANR	6261579	Identifier	i		6261519	0					
ANR	6261580	IncDec	++		6261519	1					
ANR	6261581	UnaryOperationExpression	* v ++		6261519	1					
ANR	6261582	UnaryOperator	*		6261519	0					
ANR	6261583	PostIncDecOperationExpression	v ++		6261519	1					
ANR	6261584	Identifier	v		6261519	0					
ANR	6261585	IncDec	++		6261519	1					
ANR	6261586	ReturnStatement	return str ;	3386:1:69977:69987	6261519	5	True				
ANR	6261587	Identifier	str		6261519	0					
ANR	6261588	ReturnType	R_API char *		6261519	1					
ANR	6261589	Identifier	r_str_from_ut64		6261519	2					
ANR	6261590	ParameterList	ut64 val		6261519	3					
ANR	6261591	Parameter	ut64 val	3376:28:69816:69823	6261519	0	True				
ANR	6261592	ParameterType	ut64		6261519	0					
ANR	6261593	Identifier	val		6261519	1					
ANR	6261594	CFGEntryNode	ENTRY		6261519		True				
ANR	6261595	CFGExitNode	EXIT		6261519		True				
ANR	6261596	Symbol	val		6261519						
ANR	6261597	Symbol	& val		6261519						
ANR	6261598	Symbol	str		6261519						
ANR	6261599	Symbol	* v		6261519						
ANR	6261600	Symbol	NULL		6261519						
ANR	6261601	Symbol	* v ++		6261519						
ANR	6261602	Symbol	v		6261519						
ANR	6261603	Symbol	i		6261519						
ANR	6261604	Symbol	calloc		6261519						
ANR	6261605	Symbol	* str		6261519						
ANR	6261606	Function	r_snprintf	3389:0:69992:70188							
ANR	6261607	FunctionDef	"r_snprintf (char * string , int len , const char * fmt)"		6261606	0					
ANR	6261608	CompoundStatement		3389:66:70058:70188	6261606	0					
ANR	6261609	IdentifierDeclStatement	va_list ap ;	3390:1:70061:70071	6261606	0	True				
ANR	6261610	IdentifierDecl	ap		6261606	0					
ANR	6261611	IdentifierDeclType	va_list		6261606	0					
ANR	6261612	Identifier	ap		6261606	1					
ANR	6261613	ExpressionStatement	"va_start ( ap , fmt )"	3391:1:70074:70092	6261606	1	True				
ANR	6261614	CallExpression	"va_start ( ap , fmt )"		6261606	0					
ANR	6261615	Callee	va_start		6261606	0					
ANR	6261616	Identifier	va_start		6261606	0					
ANR	6261617	ArgumentList	ap		6261606	1					
ANR	6261618	Argument	ap		6261606	0					
ANR	6261619	Identifier	ap		6261606	0					
ANR	6261620	Argument	fmt		6261606	1					
ANR	6261621	Identifier	fmt		6261606	0					
ANR	6261622	IdentifierDeclStatement	"int ret = vsnprintf ( string , len , fmt , ap ) ;"	3392:1:70095:70137	6261606	2	True				
ANR	6261623	IdentifierDecl	"ret = vsnprintf ( string , len , fmt , ap )"		6261606	0					
ANR	6261624	IdentifierDeclType	int		6261606	0					
ANR	6261625	Identifier	ret		6261606	1					
ANR	6261626	AssignmentExpression	"ret = vsnprintf ( string , len , fmt , ap )"		6261606	2		=			
ANR	6261627	Identifier	ret		6261606	0					
ANR	6261628	CallExpression	"vsnprintf ( string , len , fmt , ap )"		6261606	1					
ANR	6261629	Callee	vsnprintf		6261606	0					
ANR	6261630	Identifier	vsnprintf		6261606	0					
ANR	6261631	ArgumentList	string		6261606	1					
ANR	6261632	Argument	string		6261606	0					
ANR	6261633	Identifier	string		6261606	0					
ANR	6261634	Argument	len		6261606	1					
ANR	6261635	Identifier	len		6261606	0					
ANR	6261636	Argument	fmt		6261606	2					
ANR	6261637	Identifier	fmt		6261606	0					
ANR	6261638	Argument	ap		6261606	3					
ANR	6261639	Identifier	ap		6261606	0					
ANR	6261640	ExpressionStatement	string [ len - 1 ] = 0	3393:1:70140:70159	6261606	3	True				
ANR	6261641	AssignmentExpression	string [ len - 1 ] = 0		6261606	0		=			
ANR	6261642	ArrayIndexing	string [ len - 1 ]		6261606	0					
ANR	6261643	Identifier	string		6261606	0					
ANR	6261644	AdditiveExpression	len - 1		6261606	1		-			
ANR	6261645	Identifier	len		6261606	0					
ANR	6261646	PrimaryExpression	1		6261606	1					
ANR	6261647	PrimaryExpression	0		6261606	1					
ANR	6261648	ExpressionStatement	va_end ( ap )	3394:1:70162:70173	6261606	4	True				
ANR	6261649	CallExpression	va_end ( ap )		6261606	0					
ANR	6261650	Callee	va_end		6261606	0					
ANR	6261651	Identifier	va_end		6261606	0					
ANR	6261652	ArgumentList	ap		6261606	1					
ANR	6261653	Argument	ap		6261606	0					
ANR	6261654	Identifier	ap		6261606	0					
ANR	6261655	ReturnStatement	return ret ;	3395:1:70176:70186	6261606	5	True				
ANR	6261656	Identifier	ret		6261606	0					
ANR	6261657	ReturnType	R_API int		6261606	1					
ANR	6261658	Identifier	r_snprintf		6261606	2					
ANR	6261659	ParameterList	"char * string , int len , const char * fmt"		6261606	3					
ANR	6261660	Parameter	char * string	3389:21:70013:70024	6261606	0	True				
ANR	6261661	ParameterType	char *		6261606	0					
ANR	6261662	Identifier	string		6261606	1					
ANR	6261663	Parameter	int len	3389:35:70027:70033	6261606	1	True				
ANR	6261664	ParameterType	int		6261606	0					
ANR	6261665	Identifier	len		6261606	1					
ANR	6261666	Parameter	const char * fmt	3389:44:70036:70050	6261606	2	True				
ANR	6261667	ParameterType	const char *		6261606	0					
ANR	6261668	Identifier	fmt		6261606	1					
ANR	6261669	CFGEntryNode	ENTRY		6261606		True				
ANR	6261670	CFGExitNode	EXIT		6261606		True				
ANR	6261671	Symbol	ret		6261606						
ANR	6261672	Symbol	string		6261606						
ANR	6261673	Symbol	len		6261606						
ANR	6261674	Symbol	* string		6261606						
ANR	6261675	Symbol	fmt		6261606						
ANR	6261676	Symbol	vsnprintf		6261606						
ANR	6261677	Symbol	ap		6261606						
ANR	6261678	Symbol	* len		6261606						
ANR	6261679	Function	r_str_stripLine	3399:0:70239:70919							
ANR	6261680	FunctionDef	"r_str_stripLine (char * str , const char * key)"		6261679	0					
ANR	6261681	CompoundStatement		3399:55:70294:70919	6261679	0					
ANR	6261682	IdentifierDeclStatement	"size_t i , j , klen , slen , off ;"	3400:1:70297:70325	6261679	0	True				
ANR	6261683	IdentifierDecl	i		6261679	0					
ANR	6261684	IdentifierDeclType	size_t		6261679	0					
ANR	6261685	Identifier	i		6261679	1					
ANR	6261686	IdentifierDecl	j		6261679	1					
ANR	6261687	IdentifierDeclType	size_t		6261679	0					
ANR	6261688	Identifier	j		6261679	1					
ANR	6261689	IdentifierDecl	klen		6261679	2					
ANR	6261690	IdentifierDeclType	size_t		6261679	0					
ANR	6261691	Identifier	klen		6261679	1					
ANR	6261692	IdentifierDecl	slen		6261679	3					
ANR	6261693	IdentifierDeclType	size_t		6261679	0					
ANR	6261694	Identifier	slen		6261679	1					
ANR	6261695	IdentifierDecl	off		6261679	4					
ANR	6261696	IdentifierDeclType	size_t		6261679	0					
ANR	6261697	Identifier	off		6261679	1					
ANR	6261698	IdentifierDeclStatement	const char * ptr ;	3401:1:70328:70343	6261679	1	True				
ANR	6261699	IdentifierDecl	* ptr		6261679	0					
ANR	6261700	IdentifierDeclType	const char *		6261679	0					
ANR	6261701	Identifier	ptr		6261679	1					
ANR	6261702	IfStatement	if ( ! str || ! key )		6261679	2					
ANR	6261703	Condition	! str || ! key	3403:5:70352:70363	6261679	0	True				
ANR	6261704	OrExpression	! str || ! key		6261679	0		||			
ANR	6261705	UnaryOperationExpression	! str		6261679	0					
ANR	6261706	UnaryOperator	!		6261679	0					
ANR	6261707	Identifier	str		6261679	1					
ANR	6261708	UnaryOperationExpression	! key		6261679	1					
ANR	6261709	UnaryOperator	!		6261679	0					
ANR	6261710	Identifier	key		6261679	1					
ANR	6261711	CompoundStatement		5:19:71:71	6261679	1					
ANR	6261712	ReturnStatement	return ;	3404:2:70370:70376	6261679	0	True				
ANR	6261713	ExpressionStatement	klen = strlen ( key )	3406:1:70382:70401	6261679	3	True				
ANR	6261714	AssignmentExpression	klen = strlen ( key )		6261679	0		=			
ANR	6261715	Identifier	klen		6261679	0					
ANR	6261716	CallExpression	strlen ( key )		6261679	1					
ANR	6261717	Callee	strlen		6261679	0					
ANR	6261718	Identifier	strlen		6261679	0					
ANR	6261719	ArgumentList	key		6261679	1					
ANR	6261720	Argument	key		6261679	0					
ANR	6261721	Identifier	key		6261679	0					
ANR	6261722	ExpressionStatement	slen = strlen ( str )	3407:1:70404:70423	6261679	4	True				
ANR	6261723	AssignmentExpression	slen = strlen ( str )		6261679	0		=			
ANR	6261724	Identifier	slen		6261679	0					
ANR	6261725	CallExpression	strlen ( str )		6261679	1					
ANR	6261726	Callee	strlen		6261679	0					
ANR	6261727	Identifier	strlen		6261679	0					
ANR	6261728	ArgumentList	str		6261679	1					
ANR	6261729	Argument	str		6261679	0					
ANR	6261730	Identifier	str		6261679	0					
ANR	6261731	ForStatement	for ( i = 0 ; i < slen ; )		6261679	5					
ANR	6261732	ForInit	i = 0 ;	3409:6:70432:70437	6261679	0	True				
ANR	6261733	AssignmentExpression	i = 0		6261679	0		=			
ANR	6261734	Identifier	i		6261679	0					
ANR	6261735	PrimaryExpression	0		6261679	1					
ANR	6261736	Condition	i < slen	3409:13:70439:70446	6261679	1	True				
ANR	6261737	RelationalExpression	i < slen		6261679	0		<			
ANR	6261738	Identifier	i		6261679	0					
ANR	6261739	Identifier	slen		6261679	1					
ANR	6261740	CompoundStatement		11:25:156:156	6261679	2					
ANR	6261741	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"	3410:2:70455:70521	6261679	0	True				
ANR	6261742	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		6261679	0		=			
ANR	6261743	Identifier	ptr		6261679	0					
ANR	6261744	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		6261679	1					
ANR	6261745	CastTarget	char *		6261679	0					
ANR	6261746	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) ""\\n"" , 1 )"		6261679	1					
ANR	6261747	Callee	r_mem_mem		6261679	0					
ANR	6261748	Identifier	r_mem_mem		6261679	0					
ANR	6261749	ArgumentList	( ut8 * ) str + i		6261679	1					
ANR	6261750	Argument	( ut8 * ) str + i		6261679	0					
ANR	6261751	AdditiveExpression	( ut8 * ) str + i		6261679	0		+			
ANR	6261752	CastExpression	( ut8 * ) str		6261679	0					
ANR	6261753	CastTarget	ut8 *		6261679	0					
ANR	6261754	Identifier	str		6261679	1					
ANR	6261755	Identifier	i		6261679	1					
ANR	6261756	Argument	slen - i		6261679	1					
ANR	6261757	AdditiveExpression	slen - i		6261679	0		-			
ANR	6261758	Identifier	slen		6261679	0					
ANR	6261759	Identifier	i		6261679	1					
ANR	6261760	Argument	"( ut8 * ) ""\\n"""		6261679	2					
ANR	6261761	CastExpression	"( ut8 * ) ""\\n"""		6261679	0					
ANR	6261762	CastTarget	ut8 *		6261679	0					
ANR	6261763	PrimaryExpression	"""\\n"""		6261679	1					
ANR	6261764	Argument	1		6261679	3					
ANR	6261765	PrimaryExpression	1		6261679	0					
ANR	6261766	IfStatement	if ( ! ptr )		6261679	1					
ANR	6261767	Condition	! ptr	3411:6:70529:70532	6261679	0	True				
ANR	6261768	UnaryOperationExpression	! ptr		6261679	0					
ANR	6261769	UnaryOperator	!		6261679	0					
ANR	6261770	Identifier	ptr		6261679	1					
ANR	6261771	CompoundStatement		13:12:240:240	6261679	1					
ANR	6261772	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"	3412:3:70540:70608	6261679	0	True				
ANR	6261773	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		6261679	0		=			
ANR	6261774	Identifier	ptr		6261679	0					
ANR	6261775	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		6261679	1					
ANR	6261776	CastTarget	char *		6261679	0					
ANR	6261777	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , slen - i , ( ut8 * ) key , klen )"		6261679	1					
ANR	6261778	Callee	r_mem_mem		6261679	0					
ANR	6261779	Identifier	r_mem_mem		6261679	0					
ANR	6261780	ArgumentList	( ut8 * ) str + i		6261679	1					
ANR	6261781	Argument	( ut8 * ) str + i		6261679	0					
ANR	6261782	AdditiveExpression	( ut8 * ) str + i		6261679	0		+			
ANR	6261783	CastExpression	( ut8 * ) str		6261679	0					
ANR	6261784	CastTarget	ut8 *		6261679	0					
ANR	6261785	Identifier	str		6261679	1					
ANR	6261786	Identifier	i		6261679	1					
ANR	6261787	Argument	slen - i		6261679	1					
ANR	6261788	AdditiveExpression	slen - i		6261679	0		-			
ANR	6261789	Identifier	slen		6261679	0					
ANR	6261790	Identifier	i		6261679	1					
ANR	6261791	Argument	( ut8 * ) key		6261679	2					
ANR	6261792	CastExpression	( ut8 * ) key		6261679	0					
ANR	6261793	CastTarget	ut8 *		6261679	0					
ANR	6261794	Identifier	key		6261679	1					
ANR	6261795	Argument	klen		6261679	3					
ANR	6261796	Identifier	klen		6261679	0					
ANR	6261797	IfStatement	if ( ptr )		6261679	1					
ANR	6261798	Condition	ptr	3413:7:70617:70619	6261679	0	True				
ANR	6261799	Identifier	ptr		6261679	0					
ANR	6261800	CompoundStatement		15:12:327:327	6261679	1					
ANR	6261801	ExpressionStatement	str [ i ] = '\\0'	3414:4:70628:70641	6261679	0	True				
ANR	6261802	AssignmentExpression	str [ i ] = '\\0'		6261679	0		=			
ANR	6261803	ArrayIndexing	str [ i ]		6261679	0					
ANR	6261804	Identifier	str		6261679	0					
ANR	6261805	Identifier	i		6261679	1					
ANR	6261806	PrimaryExpression	'\\0'		6261679	1					
ANR	6261807	BreakStatement	break ;	3415:4:70647:70652	6261679	1	True				
ANR	6261808	BreakStatement	break ;	3417:3:70662:70667	6261679	2	True				
ANR	6261809	ExpressionStatement	off = ( size_t ) ( ptr - ( str + i ) ) + 1	3420:2:70679:70715	6261679	2	True				
ANR	6261810	AssignmentExpression	off = ( size_t ) ( ptr - ( str + i ) ) + 1		6261679	0		=			
ANR	6261811	Identifier	off		6261679	0					
ANR	6261812	AdditiveExpression	( size_t ) ( ptr - ( str + i ) ) + 1		6261679	1		+			
ANR	6261813	CastExpression	( size_t ) ( ptr - ( str + i ) )		6261679	0					
ANR	6261814	CastTarget	size_t		6261679	0					
ANR	6261815	AdditiveExpression	ptr - ( str + i )		6261679	1		-			
ANR	6261816	Identifier	ptr		6261679	0					
ANR	6261817	AdditiveExpression	str + i		6261679	1		+			
ANR	6261818	Identifier	str		6261679	0					
ANR	6261819	Identifier	i		6261679	1					
ANR	6261820	PrimaryExpression	1		6261679	1					
ANR	6261821	ExpressionStatement	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"	3422:2:70720:70783	6261679	3	True				
ANR	6261822	AssignmentExpression	"ptr = ( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		6261679	0		=			
ANR	6261823	Identifier	ptr		6261679	0					
ANR	6261824	CastExpression	"( char * ) r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		6261679	1					
ANR	6261825	CastTarget	char *		6261679	0					
ANR	6261826	CallExpression	"r_mem_mem ( ( ut8 * ) str + i , off , ( ut8 * ) key , klen )"		6261679	1					
ANR	6261827	Callee	r_mem_mem		6261679	0					
ANR	6261828	Identifier	r_mem_mem		6261679	0					
ANR	6261829	ArgumentList	( ut8 * ) str + i		6261679	1					
ANR	6261830	Argument	( ut8 * ) str + i		6261679	0					
ANR	6261831	AdditiveExpression	( ut8 * ) str + i		6261679	0		+			
ANR	6261832	CastExpression	( ut8 * ) str		6261679	0					
ANR	6261833	CastTarget	ut8 *		6261679	0					
ANR	6261834	Identifier	str		6261679	1					
ANR	6261835	Identifier	i		6261679	1					
ANR	6261836	Argument	off		6261679	1					
ANR	6261837	Identifier	off		6261679	0					
ANR	6261838	Argument	( ut8 * ) key		6261679	2					
ANR	6261839	CastExpression	( ut8 * ) key		6261679	0					
ANR	6261840	CastTarget	ut8 *		6261679	0					
ANR	6261841	Identifier	key		6261679	1					
ANR	6261842	Argument	klen		6261679	3					
ANR	6261843	Identifier	klen		6261679	0					
ANR	6261844	IfStatement	if ( ptr )		6261679	4					
ANR	6261845	Condition	ptr	3423:6:70791:70793	6261679	0	True				
ANR	6261846	Identifier	ptr		6261679	0					
ANR	6261847	CompoundStatement		25:11:501:501	6261679	1					
ANR	6261848	ForStatement	for ( j = i ; j < slen - off + 1 ; j ++ )		6261679	0					
ANR	6261849	ForInit	j = i ;	3424:8:70806:70811	6261679	0	True				
ANR	6261850	AssignmentExpression	j = i		6261679	0		=			
ANR	6261851	Identifier	j		6261679	0					
ANR	6261852	Identifier	i		6261679	1					
ANR	6261853	Condition	j < slen - off + 1	3424:15:70813:70830	6261679	1	True				
ANR	6261854	RelationalExpression	j < slen - off + 1		6261679	0		<			
ANR	6261855	Identifier	j		6261679	0					
ANR	6261856	AdditiveExpression	slen - off + 1		6261679	1		-			
ANR	6261857	Identifier	slen		6261679	0					
ANR	6261858	AdditiveExpression	off + 1		6261679	1		+			
ANR	6261859	Identifier	off		6261679	0					
ANR	6261860	PrimaryExpression	1		6261679	1					
ANR	6261861	PostIncDecOperationExpression	j ++	3424:35:70833:70835	6261679	2	True				
ANR	6261862	Identifier	j		6261679	0					
ANR	6261863	IncDec	++		6261679	1					
ANR	6261864	CompoundStatement		26:40:543:543	6261679	3					
ANR	6261865	ExpressionStatement	str [ j ] = str [ j + off ]	3425:4:70844:70865	6261679	0	True				
ANR	6261866	AssignmentExpression	str [ j ] = str [ j + off ]		6261679	0		=			
ANR	6261867	ArrayIndexing	str [ j ]		6261679	0					
ANR	6261868	Identifier	str		6261679	0					
ANR	6261869	Identifier	j		6261679	1					
ANR	6261870	ArrayIndexing	str [ j + off ]		6261679	1					
ANR	6261871	Identifier	str		6261679	0					
ANR	6261872	AdditiveExpression	j + off		6261679	1		+			
ANR	6261873	Identifier	j		6261679	0					
ANR	6261874	Identifier	off		6261679	1					
ANR	6261875	ExpressionStatement	slen -= off	3427:3:70875:70886	6261679	1	True				
ANR	6261876	AssignmentExpression	slen -= off		6261679	0		-=			
ANR	6261877	Identifier	slen		6261679	0					
ANR	6261878	Identifier	off		6261679	1					
ANR	6261879	ElseStatement	else		6261679	0					
ANR	6261880	CompoundStatement		30:9:602:602	6261679	0					
ANR	6261881	ExpressionStatement	i += off	3429:3:70902:70910	6261679	0	True				
ANR	6261882	AssignmentExpression	i += off		6261679	0		+=			
ANR	6261883	Identifier	i		6261679	0					
ANR	6261884	Identifier	off		6261679	1					
ANR	6261885	ReturnType	R_API void		6261679	1					
ANR	6261886	Identifier	r_str_stripLine		6261679	2					
ANR	6261887	ParameterList	"char * str , const char * key"		6261679	3					
ANR	6261888	Parameter	char * str	3399:27:70266:70274	6261679	0	True				
ANR	6261889	ParameterType	char *		6261679	0					
ANR	6261890	Identifier	str		6261679	1					
ANR	6261891	Parameter	const char * key	3399:38:70277:70291	6261679	1	True				
ANR	6261892	ParameterType	const char *		6261679	0					
ANR	6261893	Identifier	key		6261679	1					
ANR	6261894	CFGEntryNode	ENTRY		6261679		True				
ANR	6261895	CFGExitNode	EXIT		6261679		True				
ANR	6261896	Symbol	r_mem_mem		6261679						
ANR	6261897	Symbol	i		6261679						
ANR	6261898	Symbol	j		6261679						
ANR	6261899	Symbol	off		6261679						
ANR	6261900	Symbol	ptr		6261679						
ANR	6261901	Symbol	str		6261679						
ANR	6261902	Symbol	strlen		6261679						
ANR	6261903	Symbol	* i		6261679						
ANR	6261904	Symbol	* j		6261679						
ANR	6261905	Symbol	slen		6261679						
ANR	6261906	Symbol	klen		6261679						
ANR	6261907	Symbol	* off		6261679						
ANR	6261908	Symbol	* str		6261679						
ANR	6261909	Symbol	key		6261679						
ANR	6261910	Function	r_str_list_join	3434:0:70922:71198							
ANR	6261911	FunctionDef	"r_str_list_join (RList * str , const char * sep)"		6261910	0					
ANR	6261912	CompoundStatement		3434:57:70979:71198	6261910	0					
ANR	6261913	IdentifierDeclStatement	"RStrBuf * sb = r_strbuf_new ( """" ) ;"	3435:1:70982:71013	6261910	0	True				
ANR	6261914	IdentifierDecl	"* sb = r_strbuf_new ( """" )"		6261910	0					
ANR	6261915	IdentifierDeclType	RStrBuf *		6261910	0					
ANR	6261916	Identifier	sb		6261910	1					
ANR	6261917	AssignmentExpression	"* sb = r_strbuf_new ( """" )"		6261910	2		=			
ANR	6261918	Identifier	sb		6261910	0					
ANR	6261919	CallExpression	"r_strbuf_new ( """" )"		6261910	1					
ANR	6261920	Callee	r_strbuf_new		6261910	0					
ANR	6261921	Identifier	r_strbuf_new		6261910	0					
ANR	6261922	ArgumentList	""""""		6261910	1					
ANR	6261923	Argument	""""""		6261910	0					
ANR	6261924	PrimaryExpression	""""""		6261910	0					
ANR	6261925	IdentifierDeclStatement	const char * p ;	3436:1:71016:71029	6261910	1	True				
ANR	6261926	IdentifierDecl	* p		6261910	0					
ANR	6261927	IdentifierDeclType	const char *		6261910	0					
ANR	6261928	Identifier	p		6261910	1					
ANR	6261929	WhileStatement	while ( ( p = r_list_pop_head ( str ) ) )		6261910	2					
ANR	6261930	Condition	p = r_list_pop_head ( str )	3437:8:71039:71065	6261910	0	True				
ANR	6261931	AssignmentExpression	p = r_list_pop_head ( str )		6261910	0		=			
ANR	6261932	Identifier	p		6261910	0					
ANR	6261933	CallExpression	r_list_pop_head ( str )		6261910	1					
ANR	6261934	Callee	r_list_pop_head		6261910	0					
ANR	6261935	Identifier	r_list_pop_head		6261910	0					
ANR	6261936	ArgumentList	str		6261910	1					
ANR	6261937	Argument	str		6261910	0					
ANR	6261938	Identifier	str		6261910	0					
ANR	6261939	CompoundStatement		4:37:88:88	6261910	1					
ANR	6261940	IfStatement	if ( r_strbuf_length ( sb ) != 0 )		6261910	0					
ANR	6261941	Condition	r_strbuf_length ( sb ) != 0	3438:6:71076:71100	6261910	0	True				
ANR	6261942	EqualityExpression	r_strbuf_length ( sb ) != 0		6261910	0		!=			
ANR	6261943	CallExpression	r_strbuf_length ( sb )		6261910	0					
ANR	6261944	Callee	r_strbuf_length		6261910	0					
ANR	6261945	Identifier	r_strbuf_length		6261910	0					
ANR	6261946	ArgumentList	sb		6261910	1					
ANR	6261947	Argument	sb		6261910	0					
ANR	6261948	Identifier	sb		6261910	0					
ANR	6261949	PrimaryExpression	0		6261910	1					
ANR	6261950	CompoundStatement		5:33:123:123	6261910	1					
ANR	6261951	ExpressionStatement	"r_strbuf_append ( sb , sep )"	3439:3:71108:71133	6261910	0	True				
ANR	6261952	CallExpression	"r_strbuf_append ( sb , sep )"		6261910	0					
ANR	6261953	Callee	r_strbuf_append		6261910	0					
ANR	6261954	Identifier	r_strbuf_append		6261910	0					
ANR	6261955	ArgumentList	sb		6261910	1					
ANR	6261956	Argument	sb		6261910	0					
ANR	6261957	Identifier	sb		6261910	0					
ANR	6261958	Argument	sep		6261910	1					
ANR	6261959	Identifier	sep		6261910	0					
ANR	6261960	ExpressionStatement	"r_strbuf_append ( sb , p )"	3441:2:71141:71164	6261910	1	True				
ANR	6261961	CallExpression	"r_strbuf_append ( sb , p )"		6261910	0					
ANR	6261962	Callee	r_strbuf_append		6261910	0					
ANR	6261963	Identifier	r_strbuf_append		6261910	0					
ANR	6261964	ArgumentList	sb		6261910	1					
ANR	6261965	Argument	sb		6261910	0					
ANR	6261966	Identifier	sb		6261910	0					
ANR	6261967	Argument	p		6261910	1					
ANR	6261968	Identifier	p		6261910	0					
ANR	6261969	ReturnStatement	return r_strbuf_drain ( sb ) ;	3443:1:71170:71196	6261910	3	True				
ANR	6261970	CallExpression	r_strbuf_drain ( sb )		6261910	0					
ANR	6261971	Callee	r_strbuf_drain		6261910	0					
ANR	6261972	Identifier	r_strbuf_drain		6261910	0					
ANR	6261973	ArgumentList	sb		6261910	1					
ANR	6261974	Argument	sb		6261910	0					
ANR	6261975	Identifier	sb		6261910	0					
ANR	6261976	ReturnType	R_API char *		6261910	1					
ANR	6261977	Identifier	r_str_list_join		6261910	2					
ANR	6261978	ParameterList	"RList * str , const char * sep"		6261910	3					
ANR	6261979	Parameter	RList * str	3434:28:70950:70959	6261910	0	True				
ANR	6261980	ParameterType	RList *		6261910	0					
ANR	6261981	Identifier	str		6261910	1					
ANR	6261982	Parameter	const char * sep	3434:40:70962:70976	6261910	1	True				
ANR	6261983	ParameterType	const char *		6261910	0					
ANR	6261984	Identifier	sep		6261910	1					
ANR	6261985	CFGEntryNode	ENTRY		6261910		True				
ANR	6261986	CFGExitNode	EXIT		6261910		True				
ANR	6261987	Symbol	str		6261910						
ANR	6261988	Symbol	p		6261910						
ANR	6261989	Symbol	r_strbuf_new		6261910						
ANR	6261990	Symbol	r_list_pop_head		6261910						
ANR	6261991	Symbol	r_strbuf_drain		6261910						
ANR	6261992	Symbol	r_strbuf_length		6261910						
ANR	6261993	Symbol	sep		6261910						
ANR	6261994	Symbol	sb		6261910						
ANR	6261995	Function	r_str_fmtargs	3447:0:71266:71431							
ANR	6261996	FunctionDef	r_str_fmtargs (const char * fmt)		6261995	0					
ANR	6261997	CompoundStatement		3447:41:71307:71431	6261995	0					
ANR	6261998	IdentifierDeclStatement	int n = 0 ;	3448:1:71310:71319	6261995	0	True				
ANR	6261999	IdentifierDecl	n = 0		6261995	0					
ANR	6262000	IdentifierDeclType	int		6261995	0					
ANR	6262001	Identifier	n		6261995	1					
ANR	6262002	AssignmentExpression	n = 0		6261995	2		=			
ANR	6262003	Identifier	n		6261995	0					
ANR	6262004	PrimaryExpression	0		6261995	1					
ANR	6262005	WhileStatement	while ( * fmt )		6261995	1					
ANR	6262006	Condition	* fmt	3449:8:71329:71332	6261995	0	True				
ANR	6262007	UnaryOperationExpression	* fmt		6261995	0					
ANR	6262008	UnaryOperator	*		6261995	0					
ANR	6262009	Identifier	fmt		6261995	1					
ANR	6262010	CompoundStatement		3:14:27:27	6261995	1					
ANR	6262011	IfStatement	if ( * fmt == '%' )		6261995	0					
ANR	6262012	Condition	* fmt == '%'	3450:6:71343:71353	6261995	0	True				
ANR	6262013	EqualityExpression	* fmt == '%'		6261995	0		==			
ANR	6262014	UnaryOperationExpression	* fmt		6261995	0					
ANR	6262015	UnaryOperator	*		6261995	0					
ANR	6262016	Identifier	fmt		6261995	1					
ANR	6262017	PrimaryExpression	'%'		6261995	1					
ANR	6262018	CompoundStatement		4:19:48:48	6261995	1					
ANR	6262019	IfStatement	if ( fmt [ 1 ] == '*' )		6261995	0					
ANR	6262020	Condition	fmt [ 1 ] == '*'	3451:7:71365:71377	6261995	0	True				
ANR	6262021	EqualityExpression	fmt [ 1 ] == '*'		6261995	0		==			
ANR	6262022	ArrayIndexing	fmt [ 1 ]		6261995	0					
ANR	6262023	Identifier	fmt		6261995	0					
ANR	6262024	PrimaryExpression	1		6261995	1					
ANR	6262025	PrimaryExpression	'*'		6261995	1					
ANR	6262026	CompoundStatement		5:22:72:72	6261995	1					
ANR	6262027	ExpressionStatement	n ++	3452:4:71386:71389	6261995	0	True				
ANR	6262028	PostIncDecOperationExpression	n ++		6261995	0					
ANR	6262029	Identifier	n		6261995	0					
ANR	6262030	IncDec	++		6261995	1					
ANR	6262031	ExpressionStatement	n ++	3454:3:71399:71402	6261995	1	True				
ANR	6262032	PostIncDecOperationExpression	n ++		6261995	0					
ANR	6262033	Identifier	n		6261995	0					
ANR	6262034	IncDec	++		6261995	1					
ANR	6262035	ExpressionStatement	fmt ++	3456:2:71410:71415	6261995	1	True				
ANR	6262036	PostIncDecOperationExpression	fmt ++		6261995	0					
ANR	6262037	Identifier	fmt		6261995	0					
ANR	6262038	IncDec	++		6261995	1					
ANR	6262039	ReturnStatement	return n ;	3458:1:71421:71429	6261995	2	True				
ANR	6262040	Identifier	n		6261995	0					
ANR	6262041	ReturnType	R_API int		6261995	1					
ANR	6262042	Identifier	r_str_fmtargs		6261995	2					
ANR	6262043	ParameterList	const char * fmt		6261995	3					
ANR	6262044	Parameter	const char * fmt	3447:24:71290:71304	6261995	0	True				
ANR	6262045	ParameterType	const char *		6261995	0					
ANR	6262046	Identifier	fmt		6261995	1					
ANR	6262047	CFGEntryNode	ENTRY		6261995		True				
ANR	6262048	CFGExitNode	EXIT		6261995		True				
ANR	6262049	Symbol	* fmt		6261995						
ANR	6262050	Symbol	fmt		6261995						
ANR	6262051	Symbol	n		6261995						
ANR	6262052	Function	r_str_bool	3466:6:71623:71683							
ANR	6262053	FunctionDef	r_str_bool (int b)		6262052	0					
ANR	6262054	CompoundStatement		3466:36:71653:71683	6262052	0					
ANR	6262055	ReturnStatement	"return b ? ""true"" : ""false"" ;"	3467:1:71656:71681	6262052	0	True				
ANR	6262056	ConditionalExpression	"b ? ""true"" : ""false"""		6262052	0					
ANR	6262057	Condition	b		6262052	0					
ANR	6262058	Identifier	b		6262052	0					
ANR	6262059	PrimaryExpression	"""true"""		6262052	1					
ANR	6262060	PrimaryExpression	"""false"""		6262052	2					
ANR	6262061	ReturnType	const char *		6262052	1					
ANR	6262062	Identifier	r_str_bool		6262052	2					
ANR	6262063	ParameterList	int b		6262052	3					
ANR	6262064	Parameter	int b	3466:29:71646:71650	6262052	0	True				
ANR	6262065	ParameterType	int		6262052	0					
ANR	6262066	Identifier	b		6262052	1					
ANR	6262067	CFGEntryNode	ENTRY		6262052		True				
ANR	6262068	CFGExitNode	EXIT		6262052		True				
ANR	6262069	Symbol	b		6262052						
ANR	6262070	Function	r_str_is_true	3470:0:71686:71860							
ANR	6262071	FunctionDef	r_str_is_true (const char * s)		6262070	0					
ANR	6262072	CompoundStatement		3470:40:71726:71860	6262070	0					
ANR	6262073	ReturnStatement	"return ! r_str_casecmp ( ""yes"" , s ) || ! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s ) ;"	3471:1:71729:71858	6262070	0	True				
ANR	6262074	OrExpression	"! r_str_casecmp ( ""yes"" , s ) || ! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		6262070	0		||			
ANR	6262075	UnaryOperationExpression	"! r_str_casecmp ( ""yes"" , s )"		6262070	0					
ANR	6262076	UnaryOperator	!		6262070	0					
ANR	6262077	CallExpression	"r_str_casecmp ( ""yes"" , s )"		6262070	1					
ANR	6262078	Callee	r_str_casecmp		6262070	0					
ANR	6262079	Identifier	r_str_casecmp		6262070	0					
ANR	6262080	ArgumentList	"""yes"""		6262070	1					
ANR	6262081	Argument	"""yes"""		6262070	0					
ANR	6262082	PrimaryExpression	"""yes"""		6262070	0					
ANR	6262083	Argument	s		6262070	1					
ANR	6262084	Identifier	s		6262070	0					
ANR	6262085	OrExpression	"! r_str_casecmp ( ""on"" , s ) || ! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		6262070	1		||			
ANR	6262086	UnaryOperationExpression	"! r_str_casecmp ( ""on"" , s )"		6262070	0					
ANR	6262087	UnaryOperator	!		6262070	0					
ANR	6262088	CallExpression	"r_str_casecmp ( ""on"" , s )"		6262070	1					
ANR	6262089	Callee	r_str_casecmp		6262070	0					
ANR	6262090	Identifier	r_str_casecmp		6262070	0					
ANR	6262091	ArgumentList	"""on"""		6262070	1					
ANR	6262092	Argument	"""on"""		6262070	0					
ANR	6262093	PrimaryExpression	"""on"""		6262070	0					
ANR	6262094	Argument	s		6262070	1					
ANR	6262095	Identifier	s		6262070	0					
ANR	6262096	OrExpression	"! r_str_casecmp ( ""true"" , s ) || ! r_str_casecmp ( ""1"" , s )"		6262070	1		||			
ANR	6262097	UnaryOperationExpression	"! r_str_casecmp ( ""true"" , s )"		6262070	0					
ANR	6262098	UnaryOperator	!		6262070	0					
ANR	6262099	CallExpression	"r_str_casecmp ( ""true"" , s )"		6262070	1					
ANR	6262100	Callee	r_str_casecmp		6262070	0					
ANR	6262101	Identifier	r_str_casecmp		6262070	0					
ANR	6262102	ArgumentList	"""true"""		6262070	1					
ANR	6262103	Argument	"""true"""		6262070	0					
ANR	6262104	PrimaryExpression	"""true"""		6262070	0					
ANR	6262105	Argument	s		6262070	1					
ANR	6262106	Identifier	s		6262070	0					
ANR	6262107	UnaryOperationExpression	"! r_str_casecmp ( ""1"" , s )"		6262070	1					
ANR	6262108	UnaryOperator	!		6262070	0					
ANR	6262109	CallExpression	"r_str_casecmp ( ""1"" , s )"		6262070	1					
ANR	6262110	Callee	r_str_casecmp		6262070	0					
ANR	6262111	Identifier	r_str_casecmp		6262070	0					
ANR	6262112	ArgumentList	"""1"""		6262070	1					
ANR	6262113	Argument	"""1"""		6262070	0					
ANR	6262114	PrimaryExpression	"""1"""		6262070	0					
ANR	6262115	Argument	s		6262070	1					
ANR	6262116	Identifier	s		6262070	0					
ANR	6262117	ReturnType	R_API bool		6262070	1					
ANR	6262118	Identifier	r_str_is_true		6262070	2					
ANR	6262119	ParameterList	const char * s		6262070	3					
ANR	6262120	Parameter	const char * s	3470:25:71711:71723	6262070	0	True				
ANR	6262121	ParameterType	const char *		6262070	0					
ANR	6262122	Identifier	s		6262070	1					
ANR	6262123	CFGEntryNode	ENTRY		6262070		True				
ANR	6262124	CFGExitNode	EXIT		6262070		True				
ANR	6262125	Symbol	s		6262070						
ANR	6262126	Symbol	r_str_casecmp		6262070						
ANR	6262127	Function	r_str_is_bool	3477:0:71863:72178							
ANR	6262128	FunctionDef	r_str_is_bool (const char * val)		6262127	0					
ANR	6262129	CompoundStatement		3477:42:71905:72178	6262127	0					
ANR	6262130	IfStatement	"if ( ! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" ) )"		6262127	0					
ANR	6262131	Condition	"! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" )"	3478:5:71912:71972	6262127	0	True				
ANR	6262132	OrExpression	"! r_str_casecmp ( val , ""true"" ) || ! r_str_casecmp ( val , ""false"" )"		6262127	0		||			
ANR	6262133	UnaryOperationExpression	"! r_str_casecmp ( val , ""true"" )"		6262127	0					
ANR	6262134	UnaryOperator	!		6262127	0					
ANR	6262135	CallExpression	"r_str_casecmp ( val , ""true"" )"		6262127	1					
ANR	6262136	Callee	r_str_casecmp		6262127	0					
ANR	6262137	Identifier	r_str_casecmp		6262127	0					
ANR	6262138	ArgumentList	val		6262127	1					
ANR	6262139	Argument	val		6262127	0					
ANR	6262140	Identifier	val		6262127	0					
ANR	6262141	Argument	"""true"""		6262127	1					
ANR	6262142	PrimaryExpression	"""true"""		6262127	0					
ANR	6262143	UnaryOperationExpression	"! r_str_casecmp ( val , ""false"" )"		6262127	1					
ANR	6262144	UnaryOperator	!		6262127	0					
ANR	6262145	CallExpression	"r_str_casecmp ( val , ""false"" )"		6262127	1					
ANR	6262146	Callee	r_str_casecmp		6262127	0					
ANR	6262147	Identifier	r_str_casecmp		6262127	0					
ANR	6262148	ArgumentList	val		6262127	1					
ANR	6262149	Argument	val		6262127	0					
ANR	6262150	Identifier	val		6262127	0					
ANR	6262151	Argument	"""false"""		6262127	1					
ANR	6262152	PrimaryExpression	"""false"""		6262127	0					
ANR	6262153	CompoundStatement		2:68:69:69	6262127	1					
ANR	6262154	ReturnStatement	return true ;	3479:2:71979:71990	6262127	0	True				
ANR	6262155	Identifier	true		6262127	0					
ANR	6262156	IfStatement	"if ( ! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" ) )"		6262127	1					
ANR	6262157	Condition	"! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" )"	3481:5:72000:72056	6262127	0	True				
ANR	6262158	OrExpression	"! r_str_casecmp ( val , ""on"" ) || ! r_str_casecmp ( val , ""off"" )"		6262127	0		||			
ANR	6262159	UnaryOperationExpression	"! r_str_casecmp ( val , ""on"" )"		6262127	0					
ANR	6262160	UnaryOperator	!		6262127	0					
ANR	6262161	CallExpression	"r_str_casecmp ( val , ""on"" )"		6262127	1					
ANR	6262162	Callee	r_str_casecmp		6262127	0					
ANR	6262163	Identifier	r_str_casecmp		6262127	0					
ANR	6262164	ArgumentList	val		6262127	1					
ANR	6262165	Argument	val		6262127	0					
ANR	6262166	Identifier	val		6262127	0					
ANR	6262167	Argument	"""on"""		6262127	1					
ANR	6262168	PrimaryExpression	"""on"""		6262127	0					
ANR	6262169	UnaryOperationExpression	"! r_str_casecmp ( val , ""off"" )"		6262127	1					
ANR	6262170	UnaryOperator	!		6262127	0					
ANR	6262171	CallExpression	"r_str_casecmp ( val , ""off"" )"		6262127	1					
ANR	6262172	Callee	r_str_casecmp		6262127	0					
ANR	6262173	Identifier	r_str_casecmp		6262127	0					
ANR	6262174	ArgumentList	val		6262127	1					
ANR	6262175	Argument	val		6262127	0					
ANR	6262176	Identifier	val		6262127	0					
ANR	6262177	Argument	"""off"""		6262127	1					
ANR	6262178	PrimaryExpression	"""off"""		6262127	0					
ANR	6262179	CompoundStatement		5:64:153:153	6262127	1					
ANR	6262180	ReturnStatement	return true ;	3482:2:72063:72074	6262127	0	True				
ANR	6262181	Identifier	true		6262127	0					
ANR	6262182	IfStatement	"if ( ! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" ) )"		6262127	2					
ANR	6262183	Condition	"! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" )"	3484:5:72084:72140	6262127	0	True				
ANR	6262184	OrExpression	"! r_str_casecmp ( val , ""yes"" ) || ! r_str_casecmp ( val , ""no"" )"		6262127	0		||			
ANR	6262185	UnaryOperationExpression	"! r_str_casecmp ( val , ""yes"" )"		6262127	0					
ANR	6262186	UnaryOperator	!		6262127	0					
ANR	6262187	CallExpression	"r_str_casecmp ( val , ""yes"" )"		6262127	1					
ANR	6262188	Callee	r_str_casecmp		6262127	0					
ANR	6262189	Identifier	r_str_casecmp		6262127	0					
ANR	6262190	ArgumentList	val		6262127	1					
ANR	6262191	Argument	val		6262127	0					
ANR	6262192	Identifier	val		6262127	0					
ANR	6262193	Argument	"""yes"""		6262127	1					
ANR	6262194	PrimaryExpression	"""yes"""		6262127	0					
ANR	6262195	UnaryOperationExpression	"! r_str_casecmp ( val , ""no"" )"		6262127	1					
ANR	6262196	UnaryOperator	!		6262127	0					
ANR	6262197	CallExpression	"r_str_casecmp ( val , ""no"" )"		6262127	1					
ANR	6262198	Callee	r_str_casecmp		6262127	0					
ANR	6262199	Identifier	r_str_casecmp		6262127	0					
ANR	6262200	ArgumentList	val		6262127	1					
ANR	6262201	Argument	val		6262127	0					
ANR	6262202	Identifier	val		6262127	0					
ANR	6262203	Argument	"""no"""		6262127	1					
ANR	6262204	PrimaryExpression	"""no"""		6262127	0					
ANR	6262205	CompoundStatement		8:64:237:237	6262127	1					
ANR	6262206	ReturnStatement	return true ;	3485:2:72147:72158	6262127	0	True				
ANR	6262207	Identifier	true		6262127	0					
ANR	6262208	ReturnStatement	return false ;	3487:1:72164:72176	6262127	3	True				
ANR	6262209	Identifier	false		6262127	0					
ANR	6262210	ReturnType	R_API bool		6262127	1					
ANR	6262211	Identifier	r_str_is_bool		6262127	2					
ANR	6262212	ParameterList	const char * val		6262127	3					
ANR	6262213	Parameter	const char * val	3477:25:71888:71902	6262127	0	True				
ANR	6262214	ParameterType	const char *		6262127	0					
ANR	6262215	Identifier	val		6262127	1					
ANR	6262216	CFGEntryNode	ENTRY		6262127		True				
ANR	6262217	CFGExitNode	EXIT		6262127		True				
ANR	6262218	Symbol	val		6262127						
ANR	6262219	Symbol	true		6262127						
ANR	6262220	Symbol	false		6262127						
ANR	6262221	Symbol	r_str_casecmp		6262127						
ANR	6262222	Function	r_str_nextword	3490:0:72181:72306							
ANR	6262223	FunctionDef	"r_str_nextword (char * s , char ch)"		6262222	0					
ANR	6262224	CompoundStatement		3490:45:72226:72306	6262222	0					
ANR	6262225	IdentifierDeclStatement	"char * p = strchr ( s , ch ) ;"	3491:1:72229:72253	6262222	0	True				
ANR	6262226	IdentifierDecl	"* p = strchr ( s , ch )"		6262222	0					
ANR	6262227	IdentifierDeclType	char *		6262222	0					
ANR	6262228	Identifier	p		6262222	1					
ANR	6262229	AssignmentExpression	"* p = strchr ( s , ch )"		6262222	2		=			
ANR	6262230	Identifier	p		6262222	0					
ANR	6262231	CallExpression	"strchr ( s , ch )"		6262222	1					
ANR	6262232	Callee	strchr		6262222	0					
ANR	6262233	Identifier	strchr		6262222	0					
ANR	6262234	ArgumentList	s		6262222	1					
ANR	6262235	Argument	s		6262222	0					
ANR	6262236	Identifier	s		6262222	0					
ANR	6262237	Argument	ch		6262222	1					
ANR	6262238	Identifier	ch		6262222	0					
ANR	6262239	IfStatement	if ( ! p )		6262222	1					
ANR	6262240	Condition	! p	3492:5:72260:72261	6262222	0	True				
ANR	6262241	UnaryOperationExpression	! p		6262222	0					
ANR	6262242	UnaryOperator	!		6262222	0					
ANR	6262243	Identifier	p		6262222	1					
ANR	6262244	CompoundStatement		3:9:37:37	6262222	1					
ANR	6262245	ReturnStatement	return NULL ;	3493:2:72268:72279	6262222	0	True				
ANR	6262246	Identifier	NULL		6262222	0					
ANR	6262247	ExpressionStatement	* p ++ = 0	3495:1:72285:72293	6262222	2	True				
ANR	6262248	AssignmentExpression	* p ++ = 0		6262222	0		=			
ANR	6262249	UnaryOperationExpression	* p ++		6262222	0					
ANR	6262250	UnaryOperator	*		6262222	0					
ANR	6262251	PostIncDecOperationExpression	p ++		6262222	1					
ANR	6262252	Identifier	p		6262222	0					
ANR	6262253	IncDec	++		6262222	1					
ANR	6262254	PrimaryExpression	0		6262222	1					
ANR	6262255	ReturnStatement	return p ;	3496:1:72296:72304	6262222	3	True				
ANR	6262256	Identifier	p		6262222	0					
ANR	6262257	ReturnType	R_API char *		6262222	1					
ANR	6262258	Identifier	r_str_nextword		6262222	2					
ANR	6262259	ParameterList	"char * s , char ch"		6262222	3					
ANR	6262260	Parameter	char * s	3490:27:72208:72214	6262222	0	True				
ANR	6262261	ParameterType	char *		6262222	0					
ANR	6262262	Identifier	s		6262222	1					
ANR	6262263	Parameter	char ch	3490:36:72217:72223	6262222	1	True				
ANR	6262264	ParameterType	char		6262222	0					
ANR	6262265	Identifier	ch		6262222	1					
ANR	6262266	CFGEntryNode	ENTRY		6262222		True				
ANR	6262267	CFGExitNode	EXIT		6262222		True				
ANR	6262268	Symbol	p		6262222						
ANR	6262269	Symbol	s		6262222						
ANR	6262270	Symbol	NULL		6262222						
ANR	6262271	Symbol	ch		6262222						
ANR	6262272	Symbol	* p ++		6262222						
ANR	6262273	Symbol	strchr		6262222						
ANR	6262274	Function	r_str_scale	3499:0:72309:73373							
ANR	6262275	FunctionDef	"r_str_scale (const char * s , int w , int h)"		6262274	0					
ANR	6262276	CompoundStatement		3499:53:72362:73373	6262274	0					
ANR	6262277	IdentifierDeclStatement	RListIter * iter ;	3504:1:72556:72571	6262274	0	True				
ANR	6262278	IdentifierDecl	* iter		6262274	0					
ANR	6262279	IdentifierDeclType	RListIter *		6262274	0					
ANR	6262280	Identifier	iter		6262274	1					
ANR	6262281	IdentifierDeclStatement	char * line ;	3505:1:72574:72584	6262274	1	True				
ANR	6262282	IdentifierDecl	* line		6262274	0					
ANR	6262283	IdentifierDeclType	char *		6262274	0					
ANR	6262284	Identifier	line		6262274	1					
ANR	6262285	IdentifierDeclStatement	char * str = strdup ( s ) ;	3506:1:72587:72609	6262274	2	True				
ANR	6262286	IdentifierDecl	* str = strdup ( s )		6262274	0					
ANR	6262287	IdentifierDeclType	char *		6262274	0					
ANR	6262288	Identifier	str		6262274	1					
ANR	6262289	AssignmentExpression	* str = strdup ( s )		6262274	2		=			
ANR	6262290	Identifier	str		6262274	0					
ANR	6262291	CallExpression	strdup ( s )		6262274	1					
ANR	6262292	Callee	strdup		6262274	0					
ANR	6262293	Identifier	strdup		6262274	0					
ANR	6262294	ArgumentList	s		6262274	1					
ANR	6262295	Argument	s		6262274	0					
ANR	6262296	Identifier	s		6262274	0					
ANR	6262297	IdentifierDeclStatement	"RList * lines = r_str_split_list ( str , ""\\n"" , 0 ) ;"	3507:1:72612:72658	6262274	3	True				
ANR	6262298	IdentifierDecl	"* lines = r_str_split_list ( str , ""\\n"" , 0 )"		6262274	0					
ANR	6262299	IdentifierDeclType	RList *		6262274	0					
ANR	6262300	Identifier	lines		6262274	1					
ANR	6262301	AssignmentExpression	"* lines = r_str_split_list ( str , ""\\n"" , 0 )"		6262274	2		=			
ANR	6262302	Identifier	lines		6262274	0					
ANR	6262303	CallExpression	"r_str_split_list ( str , ""\\n"" , 0 )"		6262274	1					
ANR	6262304	Callee	r_str_split_list		6262274	0					
ANR	6262305	Identifier	r_str_split_list		6262274	0					
ANR	6262306	ArgumentList	str		6262274	1					
ANR	6262307	Argument	str		6262274	0					
ANR	6262308	Identifier	str		6262274	0					
ANR	6262309	Argument	"""\\n"""		6262274	1					
ANR	6262310	PrimaryExpression	"""\\n"""		6262274	0					
ANR	6262311	Argument	0		6262274	2					
ANR	6262312	PrimaryExpression	0		6262274	0					
ANR	6262313	IdentifierDeclStatement	"int i , j ;"	3508:1:72661:72669	6262274	4	True				
ANR	6262314	IdentifierDecl	i		6262274	0					
ANR	6262315	IdentifierDeclType	int		6262274	0					
ANR	6262316	Identifier	i		6262274	1					
ANR	6262317	IdentifierDecl	j		6262274	1					
ANR	6262318	IdentifierDeclType	int		6262274	0					
ANR	6262319	Identifier	j		6262274	1					
ANR	6262320	IdentifierDeclStatement	int rows = 0 ;	3509:1:72672:72684	6262274	5	True				
ANR	6262321	IdentifierDecl	rows = 0		6262274	0					
ANR	6262322	IdentifierDeclType	int		6262274	0					
ANR	6262323	Identifier	rows		6262274	1					
ANR	6262324	AssignmentExpression	rows = 0		6262274	2		=			
ANR	6262325	Identifier	rows		6262274	0					
ANR	6262326	PrimaryExpression	0		6262274	1					
ANR	6262327	IdentifierDeclStatement	int maxcol = 0 ;	3510:1:72687:72701	6262274	6	True				
ANR	6262328	IdentifierDecl	maxcol = 0		6262274	0					
ANR	6262329	IdentifierDeclType	int		6262274	0					
ANR	6262330	Identifier	maxcol		6262274	1					
ANR	6262331	AssignmentExpression	maxcol = 0		6262274	2		=			
ANR	6262332	Identifier	maxcol		6262274	0					
ANR	6262333	PrimaryExpression	0		6262274	1					
ANR	6262334	ExpressionStatement	rows = r_list_length ( lines )	3512:1:72705:72733	6262274	7	True				
ANR	6262335	AssignmentExpression	rows = r_list_length ( lines )		6262274	0		=			
ANR	6262336	Identifier	rows		6262274	0					
ANR	6262337	CallExpression	r_list_length ( lines )		6262274	1					
ANR	6262338	Callee	r_list_length		6262274	0					
ANR	6262339	Identifier	r_list_length		6262274	0					
ANR	6262340	ArgumentList	lines		6262274	1					
ANR	6262341	Argument	lines		6262274	0					
ANR	6262342	Identifier	lines		6262274	0					
ANR	6262343	Statement	r_list_foreach	3513:1:72736:72749	6262274	8	True				
ANR	6262344	Statement	(	3513:16:72751:72751	6262274	9	True				
ANR	6262345	Statement	lines	3513:17:72752:72756	6262274	10	True				
ANR	6262346	Statement	","	3513:22:72757:72757	6262274	11	True				
ANR	6262347	Statement	iter	3513:24:72759:72762	6262274	12	True				
ANR	6262348	Statement	","	3513:28:72763:72763	6262274	13	True				
ANR	6262349	Statement	line	3513:30:72765:72768	6262274	14	True				
ANR	6262350	Statement	)	3513:34:72769:72769	6262274	15	True				
ANR	6262351	CompoundStatement		15:36:408:408	6262274	16					
ANR	6262352	ExpressionStatement	"maxcol = R_MAX ( strlen ( line ) , maxcol )"	3514:2:72775:72813	6262274	0	True				
ANR	6262353	AssignmentExpression	"maxcol = R_MAX ( strlen ( line ) , maxcol )"		6262274	0		=			
ANR	6262354	Identifier	maxcol		6262274	0					
ANR	6262355	CallExpression	"R_MAX ( strlen ( line ) , maxcol )"		6262274	1					
ANR	6262356	Callee	R_MAX		6262274	0					
ANR	6262357	Identifier	R_MAX		6262274	0					
ANR	6262358	ArgumentList	strlen ( line )		6262274	1					
ANR	6262359	Argument	strlen ( line )		6262274	0					
ANR	6262360	CallExpression	strlen ( line )		6262274	0					
ANR	6262361	Callee	strlen		6262274	0					
ANR	6262362	Identifier	strlen		6262274	0					
ANR	6262363	ArgumentList	line		6262274	1					
ANR	6262364	Argument	line		6262274	0					
ANR	6262365	Identifier	line		6262274	0					
ANR	6262366	Argument	maxcol		6262274	1					
ANR	6262367	Identifier	maxcol		6262274	0					
ANR	6262368	IdentifierDeclStatement	RList * out = r_list_newf ( free ) ;	3517:1:72820:72851	6262274	17	True				
ANR	6262369	IdentifierDecl	* out = r_list_newf ( free )		6262274	0					
ANR	6262370	IdentifierDeclType	RList *		6262274	0					
ANR	6262371	Identifier	out		6262274	1					
ANR	6262372	AssignmentExpression	* out = r_list_newf ( free )		6262274	2		=			
ANR	6262373	Identifier	out		6262274	0					
ANR	6262374	CallExpression	r_list_newf ( free )		6262274	1					
ANR	6262375	Callee	r_list_newf		6262274	0					
ANR	6262376	Identifier	r_list_newf		6262274	0					
ANR	6262377	ArgumentList	free		6262274	1					
ANR	6262378	Argument	free		6262274	0					
ANR	6262379	Identifier	free		6262274	0					
ANR	6262380	IdentifierDeclStatement	int curline = - 1 ;	3519:1:72855:72871	6262274	18	True				
ANR	6262381	IdentifierDecl	curline = - 1		6262274	0					
ANR	6262382	IdentifierDeclType	int		6262274	0					
ANR	6262383	Identifier	curline		6262274	1					
ANR	6262384	AssignmentExpression	curline = - 1		6262274	2		=			
ANR	6262385	Identifier	curline		6262274	0					
ANR	6262386	UnaryOperationExpression	- 1		6262274	1					
ANR	6262387	UnaryOperator	-		6262274	0					
ANR	6262388	PrimaryExpression	1		6262274	1					
ANR	6262389	IdentifierDeclStatement	"char * linetext = ( char * ) r_str_pad ( ' ' , w ) ;"	3520:1:72874:72916	6262274	19	True				
ANR	6262390	IdentifierDecl	"* linetext = ( char * ) r_str_pad ( ' ' , w )"		6262274	0					
ANR	6262391	IdentifierDeclType	char *		6262274	0					
ANR	6262392	Identifier	linetext		6262274	1					
ANR	6262393	AssignmentExpression	"* linetext = ( char * ) r_str_pad ( ' ' , w )"		6262274	2		=			
ANR	6262394	Identifier	linetext		6262274	0					
ANR	6262395	CastExpression	"( char * ) r_str_pad ( ' ' , w )"		6262274	1					
ANR	6262396	CastTarget	char *		6262274	0					
ANR	6262397	CallExpression	"r_str_pad ( ' ' , w )"		6262274	1					
ANR	6262398	Callee	r_str_pad		6262274	0					
ANR	6262399	Identifier	r_str_pad		6262274	0					
ANR	6262400	ArgumentList	' '		6262274	1					
ANR	6262401	Argument	' '		6262274	0					
ANR	6262402	PrimaryExpression	' '		6262274	0					
ANR	6262403	Argument	w		6262274	1					
ANR	6262404	Identifier	w		6262274	0					
ANR	6262405	ForStatement	for ( i = 0 ; i < h ; i ++ )		6262274	20					
ANR	6262406	ForInit	i = 0 ;	3521:6:72924:72929	6262274	0	True				
ANR	6262407	AssignmentExpression	i = 0		6262274	0		=			
ANR	6262408	Identifier	i		6262274	0					
ANR	6262409	PrimaryExpression	0		6262274	1					
ANR	6262410	Condition	i < h	3521:13:72931:72935	6262274	1	True				
ANR	6262411	RelationalExpression	i < h		6262274	0		<			
ANR	6262412	Identifier	i		6262274	0					
ANR	6262413	Identifier	h		6262274	1					
ANR	6262414	PostIncDecOperationExpression	i ++	3521:20:72938:72940	6262274	2	True				
ANR	6262415	Identifier	i		6262274	0					
ANR	6262416	IncDec	++		6262274	1					
ANR	6262417	CompoundStatement		26:2:684:711	6262274	3					
ANR	6262418	IdentifierDeclStatement	int zoomedline = i * ( ( float ) rows / h ) ;	3522:2:72947:72985	6262274	0	True				
ANR	6262419	IdentifierDecl	zoomedline = i * ( ( float ) rows / h )		6262274	0					
ANR	6262420	IdentifierDeclType	int		6262274	0					
ANR	6262421	Identifier	zoomedline		6262274	1					
ANR	6262422	AssignmentExpression	zoomedline = i * ( ( float ) rows / h )		6262274	2		=			
ANR	6262423	Identifier	zoomedline		6262274	0					
ANR	6262424	MultiplicativeExpression	i * ( ( float ) rows / h )		6262274	1		*			
ANR	6262425	Identifier	i		6262274	0					
ANR	6262426	MultiplicativeExpression	( float ) rows / h		6262274	1		/			
ANR	6262427	CastExpression	( float ) rows		6262274	0					
ANR	6262428	CastTarget	float		6262274	0					
ANR	6262429	Identifier	rows		6262274	1					
ANR	6262430	Identifier	h		6262274	1					
ANR	6262431	IdentifierDeclStatement	"const char * srcline = r_list_get_n ( lines , zoomedline ) ;"	3523:2:72989:73043	6262274	1	True				
ANR	6262432	IdentifierDecl	"* srcline = r_list_get_n ( lines , zoomedline )"		6262274	0					
ANR	6262433	IdentifierDeclType	const char *		6262274	0					
ANR	6262434	Identifier	srcline		6262274	1					
ANR	6262435	AssignmentExpression	"* srcline = r_list_get_n ( lines , zoomedline )"		6262274	2		=			
ANR	6262436	Identifier	srcline		6262274	0					
ANR	6262437	CallExpression	"r_list_get_n ( lines , zoomedline )"		6262274	1					
ANR	6262438	Callee	r_list_get_n		6262274	0					
ANR	6262439	Identifier	r_list_get_n		6262274	0					
ANR	6262440	ArgumentList	lines		6262274	1					
ANR	6262441	Argument	lines		6262274	0					
ANR	6262442	Identifier	lines		6262274	0					
ANR	6262443	Argument	zoomedline		6262274	1					
ANR	6262444	Identifier	zoomedline		6262274	0					
ANR	6262445	IdentifierDeclStatement	int cols = strlen ( srcline ) ;	3524:2:73047:73074	6262274	2	True				
ANR	6262446	IdentifierDecl	cols = strlen ( srcline )		6262274	0					
ANR	6262447	IdentifierDeclType	int		6262274	0					
ANR	6262448	Identifier	cols		6262274	1					
ANR	6262449	AssignmentExpression	cols = strlen ( srcline )		6262274	2		=			
ANR	6262450	Identifier	cols		6262274	0					
ANR	6262451	CallExpression	strlen ( srcline )		6262274	1					
ANR	6262452	Callee	strlen		6262274	0					
ANR	6262453	Identifier	strlen		6262274	0					
ANR	6262454	ArgumentList	srcline		6262274	1					
ANR	6262455	Argument	srcline		6262274	0					
ANR	6262456	Identifier	srcline		6262274	0					
ANR	6262457	ForStatement	for ( j = 0 ; j < w ; j ++ )		6262274	3					
ANR	6262458	ForInit	j = 0 ;	3525:7:73083:73088	6262274	0	True				
ANR	6262459	AssignmentExpression	j = 0		6262274	0		=			
ANR	6262460	Identifier	j		6262274	0					
ANR	6262461	PrimaryExpression	0		6262274	1					
ANR	6262462	Condition	j < w	3525:14:73090:73094	6262274	1	True				
ANR	6262463	RelationalExpression	j < w		6262274	0		<			
ANR	6262464	Identifier	j		6262274	0					
ANR	6262465	Identifier	w		6262274	1					
ANR	6262466	PostIncDecOperationExpression	j ++	3525:21:73097:73099	6262274	2	True				
ANR	6262467	Identifier	j		6262274	0					
ANR	6262468	IncDec	++		6262274	1					
ANR	6262469	CompoundStatement		28:3:744:782	6262274	3					
ANR	6262470	IdentifierDeclStatement	int zoomedcol = j * ( ( float ) cols / w ) ;	3526:3:73107:73145	6262274	0	True				
ANR	6262471	IdentifierDecl	zoomedcol = j * ( ( float ) cols / w )		6262274	0					
ANR	6262472	IdentifierDeclType	int		6262274	0					
ANR	6262473	Identifier	zoomedcol		6262274	1					
ANR	6262474	AssignmentExpression	zoomedcol = j * ( ( float ) cols / w )		6262274	2		=			
ANR	6262475	Identifier	zoomedcol		6262274	0					
ANR	6262476	MultiplicativeExpression	j * ( ( float ) cols / w )		6262274	1		*			
ANR	6262477	Identifier	j		6262274	0					
ANR	6262478	MultiplicativeExpression	( float ) cols / w		6262274	1		/			
ANR	6262479	CastExpression	( float ) cols		6262274	0					
ANR	6262480	CastTarget	float		6262274	0					
ANR	6262481	Identifier	cols		6262274	1					
ANR	6262482	Identifier	w		6262274	1					
ANR	6262483	ExpressionStatement	linetext [ j ] = srcline [ zoomedcol ]	3527:3:73150:73182	6262274	1	True				
ANR	6262484	AssignmentExpression	linetext [ j ] = srcline [ zoomedcol ]		6262274	0		=			
ANR	6262485	ArrayIndexing	linetext [ j ]		6262274	0					
ANR	6262486	Identifier	linetext		6262274	0					
ANR	6262487	Identifier	j		6262274	1					
ANR	6262488	ArrayIndexing	srcline [ zoomedcol ]		6262274	1					
ANR	6262489	Identifier	srcline		6262274	0					
ANR	6262490	Identifier	zoomedcol		6262274	1					
ANR	6262491	IfStatement	if ( curline != zoomedline )		6262274	4					
ANR	6262492	Condition	curline != zoomedline	3529:6:73194:73214	6262274	0	True				
ANR	6262493	EqualityExpression	curline != zoomedline		6262274	0		!=			
ANR	6262494	Identifier	curline		6262274	0					
ANR	6262495	Identifier	zoomedline		6262274	1					
ANR	6262496	CompoundStatement		31:29:854:854	6262274	1					
ANR	6262497	ExpressionStatement	"r_list_append ( out , strdup ( linetext ) )"	3530:3:73222:73260	6262274	0	True				
ANR	6262498	CallExpression	"r_list_append ( out , strdup ( linetext ) )"		6262274	0					
ANR	6262499	Callee	r_list_append		6262274	0					
ANR	6262500	Identifier	r_list_append		6262274	0					
ANR	6262501	ArgumentList	out		6262274	1					
ANR	6262502	Argument	out		6262274	0					
ANR	6262503	Identifier	out		6262274	0					
ANR	6262504	Argument	strdup ( linetext )		6262274	1					
ANR	6262505	CallExpression	strdup ( linetext )		6262274	0					
ANR	6262506	Callee	strdup		6262274	0					
ANR	6262507	Identifier	strdup		6262274	0					
ANR	6262508	ArgumentList	linetext		6262274	1					
ANR	6262509	Argument	linetext		6262274	0					
ANR	6262510	Identifier	linetext		6262274	0					
ANR	6262511	ExpressionStatement	curline = zoomedline	3531:3:73265:73285	6262274	1	True				
ANR	6262512	AssignmentExpression	curline = zoomedline		6262274	0		=			
ANR	6262513	Identifier	curline		6262274	0					
ANR	6262514	Identifier	zoomedline		6262274	1					
ANR	6262515	ExpressionStatement	"memset ( linetext , ' ' , w )"	3533:2:73293:73318	6262274	5	True				
ANR	6262516	CallExpression	"memset ( linetext , ' ' , w )"		6262274	0					
ANR	6262517	Callee	memset		6262274	0					
ANR	6262518	Identifier	memset		6262274	0					
ANR	6262519	ArgumentList	linetext		6262274	1					
ANR	6262520	Argument	linetext		6262274	0					
ANR	6262521	Identifier	linetext		6262274	0					
ANR	6262522	Argument	' '		6262274	1					
ANR	6262523	PrimaryExpression	' '		6262274	0					
ANR	6262524	Argument	w		6262274	2					
ANR	6262525	Identifier	w		6262274	0					
ANR	6262526	ExpressionStatement	free ( str )	3535:1:73324:73334	6262274	21	True				
ANR	6262527	CallExpression	free ( str )		6262274	0					
ANR	6262528	Callee	free		6262274	0					
ANR	6262529	Identifier	free		6262274	0					
ANR	6262530	ArgumentList	str		6262274	1					
ANR	6262531	Argument	str		6262274	0					
ANR	6262532	Identifier	str		6262274	0					
ANR	6262533	ReturnStatement	"return r_str_list_join ( out , ""\\n"" ) ;"	3536:1:73337:73371	6262274	22	True				
ANR	6262534	CallExpression	"r_str_list_join ( out , ""\\n"" )"		6262274	0					
ANR	6262535	Callee	r_str_list_join		6262274	0					
ANR	6262536	Identifier	r_str_list_join		6262274	0					
ANR	6262537	ArgumentList	out		6262274	1					
ANR	6262538	Argument	out		6262274	0					
ANR	6262539	Identifier	out		6262274	0					
ANR	6262540	Argument	"""\\n"""		6262274	1					
ANR	6262541	PrimaryExpression	"""\\n"""		6262274	0					
ANR	6262542	ReturnType	R_API char *		6262274	1					
ANR	6262543	Identifier	r_str_scale		6262274	2					
ANR	6262544	ParameterList	"const char * s , int w , int h"		6262274	3					
ANR	6262545	Parameter	const char * s	3499:24:72333:72345	6262274	0	True				
ANR	6262546	ParameterType	const char *		6262274	0					
ANR	6262547	Identifier	s		6262274	1					
ANR	6262548	Parameter	int w	3499:39:72348:72352	6262274	1	True				
ANR	6262549	ParameterType	int		6262274	0					
ANR	6262550	Identifier	w		6262274	1					
ANR	6262551	Parameter	int h	3499:46:72355:72359	6262274	2	True				
ANR	6262552	ParameterType	int		6262274	0					
ANR	6262553	Identifier	h		6262274	1					
ANR	6262554	CFGEntryNode	ENTRY		6262274		True				
ANR	6262555	CFGExitNode	EXIT		6262274		True				
ANR	6262556	Symbol	srcline		6262274						
ANR	6262557	Symbol	zoomedline		6262274						
ANR	6262558	Symbol	line		6262274						
ANR	6262559	Symbol	linetext		6262274						
ANR	6262560	Symbol	r_str_split_list		6262274						
ANR	6262561	Symbol	out		6262274						
ANR	6262562	Symbol	strlen		6262274						
ANR	6262563	Symbol	maxcol		6262274						
ANR	6262564	Symbol	* linetext		6262274						
ANR	6262565	Symbol	* srcline		6262274						
ANR	6262566	Symbol	lines		6262274						
ANR	6262567	Symbol	free		6262274						
ANR	6262568	Symbol	* zoomedcol		6262274						
ANR	6262569	Symbol	curline		6262274						
ANR	6262570	Symbol	cols		6262274						
ANR	6262571	Symbol	zoomedcol		6262274						
ANR	6262572	Symbol	r_str_pad		6262274						
ANR	6262573	Symbol	r_list_newf		6262274						
ANR	6262574	Symbol	h		6262274						
ANR	6262575	Symbol	iter		6262274						
ANR	6262576	Symbol	i		6262274						
ANR	6262577	Symbol	r_list_get_n		6262274						
ANR	6262578	Symbol	j		6262274						
ANR	6262579	Symbol	rows		6262274						
ANR	6262580	Symbol	r_str_list_join		6262274						
ANR	6262581	Symbol	str		6262274						
ANR	6262582	Symbol	s		6262274						
ANR	6262583	Symbol	* j		6262274						
ANR	6262584	Symbol	w		6262274						
ANR	6262585	Symbol	R_MAX		6262274						
ANR	6262586	Symbol	strdup		6262274						
ANR	6262587	Symbol	r_list_length		6262274						
