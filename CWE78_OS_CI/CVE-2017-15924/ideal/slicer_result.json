[
    {
        "FileName": "manager.c",
        "Caller": "add_server",
        "Source": false,
        "Sink": true,
        "idx": 0,
        "CWE-ID": "CWE-78",
        "category": "CallExpression",
        "criterion": "system",
        "line": 42,
        "label": -3,
        "slices": [
            "int main(int argc, char **argv)\n",
            "{\n",
            "    int sfd;\n",
            "    if (ip_addr.host == NULL || ip_addr.port == NULL) {\n",
            "        struct sockaddr_un svaddr;\n",
            "        sfd = socket(AF_UNIX, SOCK_DGRAM, 0);\n",
            "        if (sfd == -1) {\n",
            "        setnonblocking(sfd);\n",
            "        if (bind(sfd, (struct sockaddr *)&svaddr, sizeof(struct sockaddr_un)) == -1) {\n",
            "    } \n",
            "    manager.fd = sfd;\n",
            "    ev_io_init(&manager.io, manager_recv_cb, manager.fd, EV_READ);\n",
            "}\n",
            "static void manager_recv_cb(EV_P_ ev_io *w, int revents)\n",
            "{\n",
            "    struct manager_ctx *manager = (struct manager_ctx *)w;\n",
            "    r   = recvfrom(manager->fd, buf, BUF_SIZE, 0, (struct sockaddr *)&claddr, &len);\n",
            "    if (r == -1) {\n",
            "    if (r > BUF_SIZE / 2) {\n",
            "    char *action = get_action(buf, r);\n",
            "    if (action == NULL) {\n",
            "    if (strcmp(action, \"add\") == 0) {\n",
            "        struct server *server = get_server(buf, r);\n",
            "        if (server == NULL || server->port[0] == 0 || server->password[0] == 0) {\n",
            "        int ret = add_server(manager, server);\n",
            "}\n",
            "static int add_server(struct manager_ctx *manager, struct server *server)\n",
            "{\n",
            "    int ret = check_port(manager, server);\n",
            "    cork_hash_table_put(server_table, (void *)server->port, (void *)server, &new, NULL, NULL);\n",
            "    char *cmd = construct_command_line(manager, server);\n",
            "    construct_command_line(struct manager_ctx *manager, struct server *server){\n",
            "        static char cmd[BUF_SIZE];\n",
            "        char *method = manager->method;\n",
            "        int i;\n",
            "        build_config(working_dir, server);\n",
            "        if (server->method) method = server->method;\n",
            "        memset(cmd, 0, BUF_SIZE);\n",
            "        snprintf(cmd, BUF_SIZE,\n",
            "                \"%s -m %s --manager-address %s -f %s/.shadowsocks_%s.pid -c %s/.shadowsocks_%s.conf\",\n",
            "                executable, method, manager->manager_address,\n",
            "                working_dir, server->port, working_dir, server->port);\n",
            "        return cmd;\n",
            "    }\n",
            "    if (system(cmd) == -1) {\n",
            "}\n"
        ]
    }
]
