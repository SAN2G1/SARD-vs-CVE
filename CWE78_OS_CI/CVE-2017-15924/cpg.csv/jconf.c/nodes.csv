command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	10045	File	data/converged/CVE-2017-15924_shadowsocks-libev/jconf.c								
ANR	10046	Function	to_string	41:0:1222:1650							
ANR	10047	FunctionDef	to_string (const json_value * value)		10046	0					
ANR	10048	CompoundStatement		43:0:1271:1650	10046	0					
ANR	10049	IfStatement	if ( value -> type == json_string )		10046	0					
ANR	10050	Condition	value -> type == json_string	44:8:1281:1306	10046	0	True				
ANR	10051	EqualityExpression	value -> type == json_string		10046	0		==			
ANR	10052	PtrMemberAccess	value -> type		10046	0					
ANR	10053	Identifier	value		10046	0					
ANR	10054	Identifier	type		10046	1					
ANR	10055	Identifier	json_string		10046	1					
ANR	10056	CompoundStatement		2:36:37:37	10046	1					
ANR	10057	ReturnStatement	"return ss_strndup ( value -> u . string . ptr , value -> u . string . length ) ;"	45:8:1319:1381	10046	0	True				
ANR	10058	CallExpression	"ss_strndup ( value -> u . string . ptr , value -> u . string . length )"		10046	0					
ANR	10059	Callee	ss_strndup		10046	0					
ANR	10060	Identifier	ss_strndup		10046	0					
ANR	10061	ArgumentList	value -> u . string . ptr		10046	1					
ANR	10062	Argument	value -> u . string . ptr		10046	0					
ANR	10063	MemberAccess	value -> u . string . ptr		10046	0					
ANR	10064	MemberAccess	value -> u . string		10046	0					
ANR	10065	PtrMemberAccess	value -> u		10046	0					
ANR	10066	Identifier	value		10046	0					
ANR	10067	Identifier	u		10046	1					
ANR	10068	Identifier	string		10046	1					
ANR	10069	Identifier	ptr		10046	1					
ANR	10070	Argument	value -> u . string . length		10046	1					
ANR	10071	MemberAccess	value -> u . string . length		10046	0					
ANR	10072	MemberAccess	value -> u . string		10046	0					
ANR	10073	PtrMemberAccess	value -> u		10046	0					
ANR	10074	Identifier	value		10046	0					
ANR	10075	Identifier	u		10046	1					
ANR	10076	Identifier	string		10046	1					
ANR	10077	Identifier	length		10046	1					
ANR	10078	ElseStatement	else		10046	0					
ANR	10079	IfStatement	if ( value -> type == json_integer )		10046	0					
ANR	10080	Condition	value -> type == json_integer	46:15:1398:1424	10046	0	True				
ANR	10081	EqualityExpression	value -> type == json_integer		10046	0		==			
ANR	10082	PtrMemberAccess	value -> type		10046	0					
ANR	10083	Identifier	value		10046	0					
ANR	10084	Identifier	type		10046	1					
ANR	10085	Identifier	json_integer		10046	1					
ANR	10086	CompoundStatement		4:44:155:155	10046	1					
ANR	10087	ReturnStatement	return strdup ( ss_itoa ( value -> u . integer ) ) ;	47:8:1437:1477	10046	0	True				
ANR	10088	CallExpression	strdup ( ss_itoa ( value -> u . integer ) )		10046	0					
ANR	10089	Callee	strdup		10046	0					
ANR	10090	Identifier	strdup		10046	0					
ANR	10091	ArgumentList	ss_itoa ( value -> u . integer )		10046	1					
ANR	10092	Argument	ss_itoa ( value -> u . integer )		10046	0					
ANR	10093	CallExpression	ss_itoa ( value -> u . integer )		10046	0					
ANR	10094	Callee	ss_itoa		10046	0					
ANR	10095	Identifier	ss_itoa		10046	0					
ANR	10096	ArgumentList	value -> u . integer		10046	1					
ANR	10097	Argument	value -> u . integer		10046	0					
ANR	10098	MemberAccess	value -> u . integer		10046	0					
ANR	10099	PtrMemberAccess	value -> u		10046	0					
ANR	10100	Identifier	value		10046	0					
ANR	10101	Identifier	u		10046	1					
ANR	10102	Identifier	integer		10046	1					
ANR	10103	ElseStatement	else		10046	0					
ANR	10104	IfStatement	if ( value -> type == json_null )		10046	0					
ANR	10105	Condition	value -> type == json_null	48:15:1494:1517	10046	0	True				
ANR	10106	EqualityExpression	value -> type == json_null		10046	0		==			
ANR	10107	PtrMemberAccess	value -> type		10046	0					
ANR	10108	Identifier	value		10046	0					
ANR	10109	Identifier	type		10046	1					
ANR	10110	Identifier	json_null		10046	1					
ANR	10111	CompoundStatement		6:41:248:248	10046	1					
ANR	10112	ReturnStatement	return NULL ;	49:8:1530:1541	10046	0	True				
ANR	10113	Identifier	NULL		10046	0					
ANR	10114	ElseStatement	else		10046	0					
ANR	10115	CompoundStatement		8:11:282:282	10046	0					
ANR	10116	ExpressionStatement	"LOGE ( ""%d"" , value -> type )"	51:8:1564:1587	10046	0	True				
ANR	10117	CallExpression	"LOGE ( ""%d"" , value -> type )"		10046	0					
ANR	10118	Callee	LOGE		10046	0					
ANR	10119	Identifier	LOGE		10046	0					
ANR	10120	ArgumentList	"""%d"""		10046	1					
ANR	10121	Argument	"""%d"""		10046	0					
ANR	10122	PrimaryExpression	"""%d"""		10046	0					
ANR	10123	Argument	value -> type		10046	1					
ANR	10124	PtrMemberAccess	value -> type		10046	0					
ANR	10125	Identifier	value		10046	0					
ANR	10126	Identifier	type		10046	1					
ANR	10127	ExpressionStatement	"FATAL ( ""Invalid config format."" )"	52:8:1597:1628	10046	1	True				
ANR	10128	CallExpression	"FATAL ( ""Invalid config format."" )"		10046	0					
ANR	10129	Callee	FATAL		10046	0					
ANR	10130	Identifier	FATAL		10046	0					
ANR	10131	ArgumentList	"""Invalid config format."""		10046	1					
ANR	10132	Argument	"""Invalid config format."""		10046	0					
ANR	10133	PrimaryExpression	"""Invalid config format."""		10046	0					
ANR	10134	ReturnStatement	return 0 ;	54:4:1640:1648	10046	1	True				
ANR	10135	PrimaryExpression	0		10046	0					
ANR	10136	ReturnType	static char *		10046	1					
ANR	10137	Identifier	to_string		10046	2					
ANR	10138	ParameterList	const json_value * value		10046	3					
ANR	10139	Parameter	const json_value * value	42:10:1246:1268	10046	0	True				
ANR	10140	ParameterType	const json_value *		10046	0					
ANR	10141	Identifier	value		10046	1					
ANR	10142	CFGEntryNode	ENTRY		10046		True				
ANR	10143	CFGExitNode	EXIT		10046		True				
ANR	10144	Symbol	NULL		10046						
ANR	10145	Symbol	value -> u		10046						
ANR	10146	Symbol	ss_strndup		10046						
ANR	10147	Symbol	json_integer		10046						
ANR	10148	Symbol	json_string		10046						
ANR	10149	Symbol	ss_itoa		10046						
ANR	10150	Symbol	json_null		10046						
ANR	10151	Symbol	value -> u . string		10046						
ANR	10152	Symbol	value -> u . string . ptr		10046						
ANR	10153	Symbol	value -> u . string . length		10046						
ANR	10154	Symbol	* value		10046						
ANR	10155	Symbol	value -> u . integer		10046						
ANR	10156	Symbol	strdup		10046						
ANR	10157	Symbol	value		10046						
ANR	10158	Symbol	value -> type		10046						
ANR	10159	Function	free_addr	57:0:1653:1737							
ANR	10160	FunctionDef	free_addr (ss_addr_t * addr)		10159	0					
ANR	10161	CompoundStatement		59:0:1685:1737	10159	0					
ANR	10162	ExpressionStatement	ss_free ( addr -> host )	60:4:1691:1710	10159	0	True				
ANR	10163	CallExpression	ss_free ( addr -> host )		10159	0					
ANR	10164	Callee	ss_free		10159	0					
ANR	10165	Identifier	ss_free		10159	0					
ANR	10166	ArgumentList	addr -> host		10159	1					
ANR	10167	Argument	addr -> host		10159	0					
ANR	10168	PtrMemberAccess	addr -> host		10159	0					
ANR	10169	Identifier	addr		10159	0					
ANR	10170	Identifier	host		10159	1					
ANR	10171	ExpressionStatement	ss_free ( addr -> port )	61:4:1716:1735	10159	1	True				
ANR	10172	CallExpression	ss_free ( addr -> port )		10159	0					
ANR	10173	Callee	ss_free		10159	0					
ANR	10174	Identifier	ss_free		10159	0					
ANR	10175	ArgumentList	addr -> port		10159	1					
ANR	10176	Argument	addr -> port		10159	0					
ANR	10177	PtrMemberAccess	addr -> port		10159	0					
ANR	10178	Identifier	addr		10159	0					
ANR	10179	Identifier	port		10159	1					
ANR	10180	ReturnType	void		10159	1					
ANR	10181	Identifier	free_addr		10159	2					
ANR	10182	ParameterList	ss_addr_t * addr		10159	3					
ANR	10183	Parameter	ss_addr_t * addr	58:10:1668:1682	10159	0	True				
ANR	10184	ParameterType	ss_addr_t *		10159	0					
ANR	10185	Identifier	addr		10159	1					
ANR	10186	CFGEntryNode	ENTRY		10159		True				
ANR	10187	CFGExitNode	EXIT		10159		True				
ANR	10188	Symbol	addr -> port		10159						
ANR	10189	Symbol	addr -> host		10159						
ANR	10190	Symbol	* addr		10159						
ANR	10191	Symbol	addr		10159						
ANR	10192	Function	parse_addr	64:0:1740:2717							
ANR	10193	FunctionDef	"parse_addr (const char * str_in , ss_addr_t * addr)"		10192	0					
ANR	10194	CompoundStatement		66:0:1793:2717	10192	0					
ANR	10195	IfStatement	if ( str_in == NULL )		10192	0					
ANR	10196	Condition	str_in == NULL	67:8:1803:1816	10192	0	True				
ANR	10197	EqualityExpression	str_in == NULL		10192	0		==			
ANR	10198	Identifier	str_in		10192	0					
ANR	10199	Identifier	NULL		10192	1					
ANR	10200	ReturnStatement	return ;	67:24:1819:1825	10192	1	True				
ANR	10201	IdentifierDeclStatement	"int ipv6 = 0 , ret = - 1 , n = 0 ;"	69:4:1832:1861	10192	1	True				
ANR	10202	IdentifierDecl	ipv6 = 0		10192	0					
ANR	10203	IdentifierDeclType	int		10192	0					
ANR	10204	Identifier	ipv6		10192	1					
ANR	10205	AssignmentExpression	ipv6 = 0		10192	2		=			
ANR	10206	Identifier	ipv6		10192	0					
ANR	10207	PrimaryExpression	0		10192	1					
ANR	10208	IdentifierDecl	ret = - 1		10192	1					
ANR	10209	IdentifierDeclType	int		10192	0					
ANR	10210	Identifier	ret		10192	1					
ANR	10211	AssignmentExpression	ret = - 1		10192	2		=			
ANR	10212	Identifier	ret		10192	0					
ANR	10213	UnaryOperationExpression	- 1		10192	1					
ANR	10214	UnaryOperator	-		10192	0					
ANR	10215	PrimaryExpression	1		10192	1					
ANR	10216	IdentifierDecl	n = 0		10192	2					
ANR	10217	IdentifierDeclType	int		10192	0					
ANR	10218	Identifier	n		10192	1					
ANR	10219	AssignmentExpression	n = 0		10192	2		=			
ANR	10220	Identifier	n		10192	0					
ANR	10221	PrimaryExpression	0		10192	1					
ANR	10222	IdentifierDeclStatement	char * pch ;	70:4:1867:1876	10192	2	True				
ANR	10223	IdentifierDecl	* pch		10192	0					
ANR	10224	IdentifierDeclType	char *		10192	0					
ANR	10225	Identifier	pch		10192	1					
ANR	10226	IdentifierDeclStatement	char * str = strdup ( str_in ) ;	71:4:1882:1908	10192	3	True				
ANR	10227	IdentifierDecl	* str = strdup ( str_in )		10192	0					
ANR	10228	IdentifierDeclType	char *		10192	0					
ANR	10229	Identifier	str		10192	1					
ANR	10230	AssignmentExpression	* str = strdup ( str_in )		10192	2		=			
ANR	10231	Identifier	str		10192	0					
ANR	10232	CallExpression	strdup ( str_in )		10192	1					
ANR	10233	Callee	strdup		10192	0					
ANR	10234	Identifier	strdup		10192	0					
ANR	10235	ArgumentList	str_in		10192	1					
ANR	10236	Argument	str_in		10192	0					
ANR	10237	Identifier	str_in		10192	0					
ANR	10238	IdentifierDeclStatement	struct cork_ip ip ;	73:4:1915:1932	10192	4	True				
ANR	10239	IdentifierDecl	ip		10192	0					
ANR	10240	IdentifierDeclType	struct cork_ip		10192	0					
ANR	10241	Identifier	ip		10192	1					
ANR	10242	IfStatement	"if ( cork_ip_init ( & ip , str ) != - 1 )"		10192	5					
ANR	10243	Condition	"cork_ip_init ( & ip , str ) != - 1"	74:8:1942:1969	10192	0	True				
ANR	10244	EqualityExpression	"cork_ip_init ( & ip , str ) != - 1"		10192	0		!=			
ANR	10245	CallExpression	"cork_ip_init ( & ip , str )"		10192	0					
ANR	10246	Callee	cork_ip_init		10192	0					
ANR	10247	Identifier	cork_ip_init		10192	0					
ANR	10248	ArgumentList	& ip		10192	1					
ANR	10249	Argument	& ip		10192	0					
ANR	10250	UnaryOperationExpression	& ip		10192	0					
ANR	10251	UnaryOperator	&		10192	0					
ANR	10252	Identifier	ip		10192	1					
ANR	10253	Argument	str		10192	1					
ANR	10254	Identifier	str		10192	0					
ANR	10255	UnaryOperationExpression	- 1		10192	1					
ANR	10256	UnaryOperator	-		10192	0					
ANR	10257	PrimaryExpression	1		10192	1					
ANR	10258	CompoundStatement		9:38:178:178	10192	1					
ANR	10259	ExpressionStatement	addr -> host = str	75:8:1982:1998	10192	0	True				
ANR	10260	AssignmentExpression	addr -> host = str		10192	0		=			
ANR	10261	PtrMemberAccess	addr -> host		10192	0					
ANR	10262	Identifier	addr		10192	0					
ANR	10263	Identifier	host		10192	1					
ANR	10264	Identifier	str		10192	1					
ANR	10265	ExpressionStatement	addr -> port = NULL	76:8:2008:2025	10192	1	True				
ANR	10266	AssignmentExpression	addr -> port = NULL		10192	0		=			
ANR	10267	PtrMemberAccess	addr -> port		10192	0					
ANR	10268	Identifier	addr		10192	0					
ANR	10269	Identifier	port		10192	1					
ANR	10270	Identifier	NULL		10192	1					
ANR	10271	ReturnStatement	return ;	77:8:2035:2041	10192	2	True				
ANR	10272	ExpressionStatement	"pch = strchr ( str , ':' )"	80:4:2054:2076	10192	6	True				
ANR	10273	AssignmentExpression	"pch = strchr ( str , ':' )"		10192	0		=			
ANR	10274	Identifier	pch		10192	0					
ANR	10275	CallExpression	"strchr ( str , ':' )"		10192	1					
ANR	10276	Callee	strchr		10192	0					
ANR	10277	Identifier	strchr		10192	0					
ANR	10278	ArgumentList	str		10192	1					
ANR	10279	Argument	str		10192	0					
ANR	10280	Identifier	str		10192	0					
ANR	10281	Argument	':'		10192	1					
ANR	10282	PrimaryExpression	':'		10192	0					
ANR	10283	WhileStatement	while ( pch != NULL )		10192	7					
ANR	10284	Condition	pch != NULL	81:11:2089:2099	10192	0	True				
ANR	10285	EqualityExpression	pch != NULL		10192	0		!=			
ANR	10286	Identifier	pch		10192	0					
ANR	10287	Identifier	NULL		10192	1					
ANR	10288	CompoundStatement		16:24:308:308	10192	1					
ANR	10289	ExpressionStatement	n ++	82:8:2112:2115	10192	0	True				
ANR	10290	PostIncDecOperationExpression	n ++		10192	0					
ANR	10291	Identifier	n		10192	0					
ANR	10292	IncDec	++		10192	1					
ANR	10293	ExpressionStatement	ret = pch - str	83:8:2125:2140	10192	1	True				
ANR	10294	AssignmentExpression	ret = pch - str		10192	0		=			
ANR	10295	Identifier	ret		10192	0					
ANR	10296	AdditiveExpression	pch - str		10192	1		-			
ANR	10297	Identifier	pch		10192	0					
ANR	10298	Identifier	str		10192	1					
ANR	10299	ExpressionStatement	"pch = strchr ( pch + 1 , ':' )"	84:8:2150:2176	10192	2	True				
ANR	10300	AssignmentExpression	"pch = strchr ( pch + 1 , ':' )"		10192	0		=			
ANR	10301	Identifier	pch		10192	0					
ANR	10302	CallExpression	"strchr ( pch + 1 , ':' )"		10192	1					
ANR	10303	Callee	strchr		10192	0					
ANR	10304	Identifier	strchr		10192	0					
ANR	10305	ArgumentList	pch + 1		10192	1					
ANR	10306	Argument	pch + 1		10192	0					
ANR	10307	AdditiveExpression	pch + 1		10192	0		+			
ANR	10308	Identifier	pch		10192	0					
ANR	10309	PrimaryExpression	1		10192	1					
ANR	10310	Argument	':'		10192	1					
ANR	10311	PrimaryExpression	':'		10192	0					
ANR	10312	IfStatement	if ( n > 1 )		10192	8					
ANR	10313	Condition	n > 1	86:8:2192:2196	10192	0	True				
ANR	10314	RelationalExpression	n > 1		10192	0		>			
ANR	10315	Identifier	n		10192	0					
ANR	10316	PrimaryExpression	1		10192	1					
ANR	10317	CompoundStatement		21:15:405:405	10192	1					
ANR	10318	ExpressionStatement	ipv6 = 1	87:8:2209:2217	10192	0	True				
ANR	10319	AssignmentExpression	ipv6 = 1		10192	0		=			
ANR	10320	Identifier	ipv6		10192	0					
ANR	10321	PrimaryExpression	1		10192	1					
ANR	10322	IfStatement	if ( str [ ret - 1 ] != ']' )		10192	1					
ANR	10323	Condition	str [ ret - 1 ] != ']'	88:12:2231:2249	10192	0	True				
ANR	10324	EqualityExpression	str [ ret - 1 ] != ']'		10192	0		!=			
ANR	10325	ArrayIndexing	str [ ret - 1 ]		10192	0					
ANR	10326	Identifier	str		10192	0					
ANR	10327	AdditiveExpression	ret - 1		10192	1		-			
ANR	10328	Identifier	ret		10192	0					
ANR	10329	PrimaryExpression	1		10192	1					
ANR	10330	PrimaryExpression	']'		10192	1					
ANR	10331	CompoundStatement		23:33:458:458	10192	1					
ANR	10332	ExpressionStatement	ret = - 1	89:12:2266:2274	10192	0	True				
ANR	10333	AssignmentExpression	ret = - 1		10192	0		=			
ANR	10334	Identifier	ret		10192	0					
ANR	10335	UnaryOperationExpression	- 1		10192	1					
ANR	10336	UnaryOperator	-		10192	0					
ANR	10337	PrimaryExpression	1		10192	1					
ANR	10338	IfStatement	if ( ret == - 1 )		10192	9					
ANR	10339	Condition	ret == - 1	93:8:2301:2309	10192	0	True				
ANR	10340	EqualityExpression	ret == - 1		10192	0		==			
ANR	10341	Identifier	ret		10192	0					
ANR	10342	UnaryOperationExpression	- 1		10192	1					
ANR	10343	UnaryOperator	-		10192	0					
ANR	10344	PrimaryExpression	1		10192	1					
ANR	10345	CompoundStatement		28:19:518:518	10192	1					
ANR	10346	IfStatement	if ( ipv6 )		10192	0					
ANR	10347	Condition	ipv6	94:12:2326:2329	10192	0	True				
ANR	10348	Identifier	ipv6		10192	0					
ANR	10349	CompoundStatement		29:18:538:538	10192	1					
ANR	10350	ExpressionStatement	"addr -> host = ss_strndup ( str + 1 , strlen ( str ) - 2 )"	95:12:2346:2395	10192	0	True				
ANR	10351	AssignmentExpression	"addr -> host = ss_strndup ( str + 1 , strlen ( str ) - 2 )"		10192	0		=			
ANR	10352	PtrMemberAccess	addr -> host		10192	0					
ANR	10353	Identifier	addr		10192	0					
ANR	10354	Identifier	host		10192	1					
ANR	10355	CallExpression	"ss_strndup ( str + 1 , strlen ( str ) - 2 )"		10192	1					
ANR	10356	Callee	ss_strndup		10192	0					
ANR	10357	Identifier	ss_strndup		10192	0					
ANR	10358	ArgumentList	str + 1		10192	1					
ANR	10359	Argument	str + 1		10192	0					
ANR	10360	AdditiveExpression	str + 1		10192	0		+			
ANR	10361	Identifier	str		10192	0					
ANR	10362	PrimaryExpression	1		10192	1					
ANR	10363	Argument	strlen ( str ) - 2		10192	1					
ANR	10364	AdditiveExpression	strlen ( str ) - 2		10192	0		-			
ANR	10365	CallExpression	strlen ( str )		10192	0					
ANR	10366	Callee	strlen		10192	0					
ANR	10367	Identifier	strlen		10192	0					
ANR	10368	ArgumentList	str		10192	1					
ANR	10369	Argument	str		10192	0					
ANR	10370	Identifier	str		10192	0					
ANR	10371	PrimaryExpression	2		10192	1					
ANR	10372	ElseStatement	else		10192	0					
ANR	10373	CompoundStatement		31:15:618:618	10192	0					
ANR	10374	ExpressionStatement	addr -> host = strdup ( str )	97:12:2426:2450	10192	0	True				
ANR	10375	AssignmentExpression	addr -> host = strdup ( str )		10192	0		=			
ANR	10376	PtrMemberAccess	addr -> host		10192	0					
ANR	10377	Identifier	addr		10192	0					
ANR	10378	Identifier	host		10192	1					
ANR	10379	CallExpression	strdup ( str )		10192	1					
ANR	10380	Callee	strdup		10192	0					
ANR	10381	Identifier	strdup		10192	0					
ANR	10382	ArgumentList	str		10192	1					
ANR	10383	Argument	str		10192	0					
ANR	10384	Identifier	str		10192	0					
ANR	10385	ExpressionStatement	addr -> port = NULL	99:8:2470:2487	10192	1	True				
ANR	10386	AssignmentExpression	addr -> port = NULL		10192	0		=			
ANR	10387	PtrMemberAccess	addr -> port		10192	0					
ANR	10388	Identifier	addr		10192	0					
ANR	10389	Identifier	port		10192	1					
ANR	10390	Identifier	NULL		10192	1					
ANR	10391	ElseStatement	else		10192	0					
ANR	10392	CompoundStatement		35:11:706:706	10192	0					
ANR	10393	IfStatement	if ( ipv6 )		10192	0					
ANR	10394	Condition	ipv6	101:12:2514:2517	10192	0	True				
ANR	10395	Identifier	ipv6		10192	0					
ANR	10396	CompoundStatement		36:18:726:726	10192	1					
ANR	10397	ExpressionStatement	"addr -> host = ss_strndup ( str + 1 , ret - 2 )"	102:12:2534:2575	10192	0	True				
ANR	10398	AssignmentExpression	"addr -> host = ss_strndup ( str + 1 , ret - 2 )"		10192	0		=			
ANR	10399	PtrMemberAccess	addr -> host		10192	0					
ANR	10400	Identifier	addr		10192	0					
ANR	10401	Identifier	host		10192	1					
ANR	10402	CallExpression	"ss_strndup ( str + 1 , ret - 2 )"		10192	1					
ANR	10403	Callee	ss_strndup		10192	0					
ANR	10404	Identifier	ss_strndup		10192	0					
ANR	10405	ArgumentList	str + 1		10192	1					
ANR	10406	Argument	str + 1		10192	0					
ANR	10407	AdditiveExpression	str + 1		10192	0		+			
ANR	10408	Identifier	str		10192	0					
ANR	10409	PrimaryExpression	1		10192	1					
ANR	10410	Argument	ret - 2		10192	1					
ANR	10411	AdditiveExpression	ret - 2		10192	0		-			
ANR	10412	Identifier	ret		10192	0					
ANR	10413	PrimaryExpression	2		10192	1					
ANR	10414	ElseStatement	else		10192	0					
ANR	10415	CompoundStatement		38:15:798:798	10192	0					
ANR	10416	ExpressionStatement	"addr -> host = ss_strndup ( str , ret )"	104:12:2606:2639	10192	0	True				
ANR	10417	AssignmentExpression	"addr -> host = ss_strndup ( str , ret )"		10192	0		=			
ANR	10418	PtrMemberAccess	addr -> host		10192	0					
ANR	10419	Identifier	addr		10192	0					
ANR	10420	Identifier	host		10192	1					
ANR	10421	CallExpression	"ss_strndup ( str , ret )"		10192	1					
ANR	10422	Callee	ss_strndup		10192	0					
ANR	10423	Identifier	ss_strndup		10192	0					
ANR	10424	ArgumentList	str		10192	1					
ANR	10425	Argument	str		10192	0					
ANR	10426	Identifier	str		10192	0					
ANR	10427	Argument	ret		10192	1					
ANR	10428	Identifier	ret		10192	0					
ANR	10429	ExpressionStatement	addr -> port = strdup ( str + ret + 1 )	106:8:2659:2693	10192	1	True				
ANR	10430	AssignmentExpression	addr -> port = strdup ( str + ret + 1 )		10192	0		=			
ANR	10431	PtrMemberAccess	addr -> port		10192	0					
ANR	10432	Identifier	addr		10192	0					
ANR	10433	Identifier	port		10192	1					
ANR	10434	CallExpression	strdup ( str + ret + 1 )		10192	1					
ANR	10435	Callee	strdup		10192	0					
ANR	10436	Identifier	strdup		10192	0					
ANR	10437	ArgumentList	str + ret + 1		10192	1					
ANR	10438	Argument	str + ret + 1		10192	0					
ANR	10439	AdditiveExpression	str + ret + 1		10192	0		+			
ANR	10440	Identifier	str		10192	0					
ANR	10441	AdditiveExpression	ret + 1		10192	1		+			
ANR	10442	Identifier	ret		10192	0					
ANR	10443	PrimaryExpression	1		10192	1					
ANR	10444	ExpressionStatement	free ( str )	109:4:2706:2715	10192	10	True				
ANR	10445	CallExpression	free ( str )		10192	0					
ANR	10446	Callee	free		10192	0					
ANR	10447	Identifier	free		10192	0					
ANR	10448	ArgumentList	str		10192	1					
ANR	10449	Argument	str		10192	0					
ANR	10450	Identifier	str		10192	0					
ANR	10451	ReturnType	void		10192	1					
ANR	10452	Identifier	parse_addr		10192	2					
ANR	10453	ParameterList	"const char * str_in , ss_addr_t * addr"		10192	3					
ANR	10454	Parameter	const char * str_in	65:11:1756:1773	10192	0	True				
ANR	10455	ParameterType	const char *		10192	0					
ANR	10456	Identifier	str_in		10192	1					
ANR	10457	Parameter	ss_addr_t * addr	65:31:1776:1790	10192	1	True				
ANR	10458	ParameterType	ss_addr_t *		10192	0					
ANR	10459	Identifier	addr		10192	1					
ANR	10460	CFGEntryNode	ENTRY		10192		True				
ANR	10461	CFGExitNode	EXIT		10192		True				
ANR	10462	Symbol	ret		10192						
ANR	10463	Symbol	NULL		10192						
ANR	10464	Symbol	addr -> host		10192						
ANR	10465	Symbol	str_in		10192						
ANR	10466	Symbol	ip		10192						
ANR	10467	Symbol	ss_strndup		10192						
ANR	10468	Symbol	strchr		10192						
ANR	10469	Symbol	* ret		10192						
ANR	10470	Symbol	n		10192						
ANR	10471	Symbol	str		10192						
ANR	10472	Symbol	& ip		10192						
ANR	10473	Symbol	addr -> port		10192						
ANR	10474	Symbol	strlen		10192						
ANR	10475	Symbol	pch		10192						
ANR	10476	Symbol	ipv6		10192						
ANR	10477	Symbol	cork_ip_init		10192						
ANR	10478	Symbol	strdup		10192						
ANR	10479	Symbol	* addr		10192						
ANR	10480	Symbol	* str		10192						
ANR	10481	Symbol	addr		10192						
ANR	10482	Function	parse_dscp	112:0:2720:3636							
ANR	10483	FunctionDef	parse_dscp (char * str)		10482	0					
ANR	10484	CompoundStatement		114:0:2753:3636	10482	0					
ANR	10485	IdentifierDeclStatement	size_t str_len = strlen ( str ) ;	115:4:2759:2787	10482	0	True				
ANR	10486	IdentifierDecl	str_len = strlen ( str )		10482	0					
ANR	10487	IdentifierDeclType	size_t		10482	0					
ANR	10488	Identifier	str_len		10482	1					
ANR	10489	AssignmentExpression	str_len = strlen ( str )		10482	2		=			
ANR	10490	Identifier	str_len		10482	0					
ANR	10491	CallExpression	strlen ( str )		10482	1					
ANR	10492	Callee	strlen		10482	0					
ANR	10493	Identifier	strlen		10482	0					
ANR	10494	ArgumentList	str		10482	1					
ANR	10495	Argument	str		10482	0					
ANR	10496	Identifier	str		10482	0					
ANR	10497	IfStatement	"if ( str_len == 2 && strcasecmp ( str , ""EF"" ) == 0 )"		10482	1					
ANR	10498	Condition	"str_len == 2 && strcasecmp ( str , ""EF"" ) == 0"	118:8:2840:2881	10482	0	True				
ANR	10499	AndExpression	"str_len == 2 && strcasecmp ( str , ""EF"" ) == 0"		10482	0		&&			
ANR	10500	EqualityExpression	str_len == 2		10482	0		==			
ANR	10501	Identifier	str_len		10482	0					
ANR	10502	PrimaryExpression	2		10482	1					
ANR	10503	EqualityExpression	"strcasecmp ( str , ""EF"" ) == 0"		10482	1		==			
ANR	10504	CallExpression	"strcasecmp ( str , ""EF"" )"		10482	0					
ANR	10505	Callee	strcasecmp		10482	0					
ANR	10506	Identifier	strcasecmp		10482	0					
ANR	10507	ArgumentList	str		10482	1					
ANR	10508	Argument	str		10482	0					
ANR	10509	Identifier	str		10482	0					
ANR	10510	Argument	"""EF"""		10482	1					
ANR	10511	PrimaryExpression	"""EF"""		10482	0					
ANR	10512	PrimaryExpression	0		10482	1					
ANR	10513	CompoundStatement		5:52:130:130	10482	1					
ANR	10514	ReturnStatement	return DSCP_EF ;	119:8:2894:2908	10482	0	True				
ANR	10515	Identifier	DSCP_EF		10482	0					
ANR	10516	IfStatement	"if ( str_len == DSCP_CS_LEN && strncasecmp ( str , ""CS"" , 2 ) == 0 )"		10482	2					
ANR	10517	Condition	"str_len == DSCP_CS_LEN && strncasecmp ( str , ""CS"" , 2 ) == 0"	122:8:2925:2980	10482	0	True				
ANR	10518	AndExpression	"str_len == DSCP_CS_LEN && strncasecmp ( str , ""CS"" , 2 ) == 0"		10482	0		&&			
ANR	10519	EqualityExpression	str_len == DSCP_CS_LEN		10482	0		==			
ANR	10520	Identifier	str_len		10482	0					
ANR	10521	Identifier	DSCP_CS_LEN		10482	1					
ANR	10522	EqualityExpression	"strncasecmp ( str , ""CS"" , 2 ) == 0"		10482	1		==			
ANR	10523	CallExpression	"strncasecmp ( str , ""CS"" , 2 )"		10482	0					
ANR	10524	Callee	strncasecmp		10482	0					
ANR	10525	Identifier	strncasecmp		10482	0					
ANR	10526	ArgumentList	str		10482	1					
ANR	10527	Argument	str		10482	0					
ANR	10528	Identifier	str		10482	0					
ANR	10529	Argument	"""CS"""		10482	1					
ANR	10530	PrimaryExpression	"""CS"""		10482	0					
ANR	10531	Argument	2		10482	2					
ANR	10532	PrimaryExpression	2		10482	0					
ANR	10533	PrimaryExpression	0		10482	1					
ANR	10534	CompoundStatement		9:66:229:229	10482	1					
ANR	10535	IfStatement	if ( str [ 2 ] >= '0' && str [ 2 ] <= '7' )		10482	0					
ANR	10536	Condition	str [ 2 ] >= '0' && str [ 2 ] <= '7'	123:12:2997:3026	10482	0	True				
ANR	10537	AndExpression	str [ 2 ] >= '0' && str [ 2 ] <= '7'		10482	0		&&			
ANR	10538	RelationalExpression	str [ 2 ] >= '0'		10482	0		>=			
ANR	10539	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10540	Identifier	str		10482	0					
ANR	10541	PrimaryExpression	2		10482	1					
ANR	10542	PrimaryExpression	'0'		10482	1					
ANR	10543	RelationalExpression	str [ 2 ] <= '7'		10482	1		<=			
ANR	10544	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10545	Identifier	str		10482	0					
ANR	10546	PrimaryExpression	2		10482	1					
ANR	10547	PrimaryExpression	'7'		10482	1					
ANR	10548	CompoundStatement		10:44:275:275	10482	1					
ANR	10549	ReturnStatement	return ( str [ 2 ] - '0' ) << 3 ;	125:12:3067:3093	10482	0	True				
ANR	10550	ShiftExpression	( str [ 2 ] - '0' ) << 3		10482	0		<<			
ANR	10551	AdditiveExpression	str [ 2 ] - '0'		10482	0		-			
ANR	10552	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10553	Identifier	str		10482	0					
ANR	10554	PrimaryExpression	2		10482	1					
ANR	10555	PrimaryExpression	'0'		10482	1					
ANR	10556	PrimaryExpression	3		10482	1					
ANR	10557	IfStatement	"if ( str_len == DSCP_AF_LEN && strncasecmp ( str , ""AF"" , 2 ) == 0 )"		10482	3					
ANR	10558	Condition	"str_len == DSCP_AF_LEN && strncasecmp ( str , ""AF"" , 2 ) == 0"	129:8:3120:3175	10482	0	True				
ANR	10559	AndExpression	"str_len == DSCP_AF_LEN && strncasecmp ( str , ""AF"" , 2 ) == 0"		10482	0		&&			
ANR	10560	EqualityExpression	str_len == DSCP_AF_LEN		10482	0		==			
ANR	10561	Identifier	str_len		10482	0					
ANR	10562	Identifier	DSCP_AF_LEN		10482	1					
ANR	10563	EqualityExpression	"strncasecmp ( str , ""AF"" , 2 ) == 0"		10482	1		==			
ANR	10564	CallExpression	"strncasecmp ( str , ""AF"" , 2 )"		10482	0					
ANR	10565	Callee	strncasecmp		10482	0					
ANR	10566	Identifier	strncasecmp		10482	0					
ANR	10567	ArgumentList	str		10482	1					
ANR	10568	Argument	str		10482	0					
ANR	10569	Identifier	str		10482	0					
ANR	10570	Argument	"""AF"""		10482	1					
ANR	10571	PrimaryExpression	"""AF"""		10482	0					
ANR	10572	Argument	2		10482	2					
ANR	10573	PrimaryExpression	2		10482	0					
ANR	10574	PrimaryExpression	0		10482	1					
ANR	10575	CompoundStatement		16:66:424:424	10482	1					
ANR	10576	IfStatement	if ( str [ 2 ] >= '1' && str [ 2 ] <= '4' && str [ 3 ] >= '1' && str [ 3 ] <= '3' )		10482	0					
ANR	10577	Condition	str [ 2 ] >= '1' && str [ 2 ] <= '4' && str [ 3 ] >= '1' && str [ 3 ] <= '3'	130:12:3192:3255	10482	0	True				
ANR	10578	AndExpression	str [ 2 ] >= '1' && str [ 2 ] <= '4' && str [ 3 ] >= '1' && str [ 3 ] <= '3'		10482	0		&&			
ANR	10579	RelationalExpression	str [ 2 ] >= '1'		10482	0		>=			
ANR	10580	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10581	Identifier	str		10482	0					
ANR	10582	PrimaryExpression	2		10482	1					
ANR	10583	PrimaryExpression	'1'		10482	1					
ANR	10584	AndExpression	str [ 2 ] <= '4' && str [ 3 ] >= '1' && str [ 3 ] <= '3'		10482	1		&&			
ANR	10585	RelationalExpression	str [ 2 ] <= '4'		10482	0		<=			
ANR	10586	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10587	Identifier	str		10482	0					
ANR	10588	PrimaryExpression	2		10482	1					
ANR	10589	PrimaryExpression	'4'		10482	1					
ANR	10590	AndExpression	str [ 3 ] >= '1' && str [ 3 ] <= '3'		10482	1		&&			
ANR	10591	RelationalExpression	str [ 3 ] >= '1'		10482	0		>=			
ANR	10592	ArrayIndexing	str [ 3 ]		10482	0					
ANR	10593	Identifier	str		10482	0					
ANR	10594	PrimaryExpression	3		10482	1					
ANR	10595	PrimaryExpression	'1'		10482	1					
ANR	10596	RelationalExpression	str [ 3 ] <= '3'		10482	1		<=			
ANR	10597	ArrayIndexing	str [ 3 ]		10482	0					
ANR	10598	Identifier	str		10482	0					
ANR	10599	PrimaryExpression	3		10482	1					
ANR	10600	PrimaryExpression	'3'		10482	1					
ANR	10601	CompoundStatement		17:78:504:504	10482	1					
ANR	10602	ReturnStatement	return ( ( str [ 2 ] - '0' ) << 3 ) | ( ( str [ 3 ] - '0' ) << 1 ) ;	132:12:3302:3354	10482	0	True				
ANR	10603	InclusiveOrExpression	( ( str [ 2 ] - '0' ) << 3 ) | ( ( str [ 3 ] - '0' ) << 1 )		10482	0		|			
ANR	10604	ShiftExpression	( str [ 2 ] - '0' ) << 3		10482	0		<<			
ANR	10605	AdditiveExpression	str [ 2 ] - '0'		10482	0		-			
ANR	10606	ArrayIndexing	str [ 2 ]		10482	0					
ANR	10607	Identifier	str		10482	0					
ANR	10608	PrimaryExpression	2		10482	1					
ANR	10609	PrimaryExpression	'0'		10482	1					
ANR	10610	PrimaryExpression	3		10482	1					
ANR	10611	ShiftExpression	( str [ 3 ] - '0' ) << 1		10482	1		<<			
ANR	10612	AdditiveExpression	str [ 3 ] - '0'		10482	0		-			
ANR	10613	ArrayIndexing	str [ 3 ]		10482	0					
ANR	10614	Identifier	str		10482	0					
ANR	10615	PrimaryExpression	3		10482	1					
ANR	10616	PrimaryExpression	'0'		10482	1					
ANR	10617	PrimaryExpression	1		10482	1					
ANR	10618	IdentifierDeclStatement	char * endptr ;	137:4:3415:3427	10482	4	True				
ANR	10619	IdentifierDecl	* endptr		10482	0					
ANR	10620	IdentifierDeclType	char *		10482	0					
ANR	10621	Identifier	endptr		10482	1					
ANR	10622	IdentifierDeclStatement	"int dscp = ( int ) strtol ( str , & endptr , 0 ) ;"	138:4:3433:3472	10482	5	True				
ANR	10623	IdentifierDecl	"dscp = ( int ) strtol ( str , & endptr , 0 )"		10482	0					
ANR	10624	IdentifierDeclType	int		10482	0					
ANR	10625	Identifier	dscp		10482	1					
ANR	10626	AssignmentExpression	"dscp = ( int ) strtol ( str , & endptr , 0 )"		10482	2		=			
ANR	10627	Identifier	dscp		10482	0					
ANR	10628	CastExpression	"( int ) strtol ( str , & endptr , 0 )"		10482	1					
ANR	10629	CastTarget	int		10482	0					
ANR	10630	CallExpression	"strtol ( str , & endptr , 0 )"		10482	1					
ANR	10631	Callee	strtol		10482	0					
ANR	10632	Identifier	strtol		10482	0					
ANR	10633	ArgumentList	str		10482	1					
ANR	10634	Argument	str		10482	0					
ANR	10635	Identifier	str		10482	0					
ANR	10636	Argument	& endptr		10482	1					
ANR	10637	UnaryOperationExpression	& endptr		10482	0					
ANR	10638	UnaryOperator	&		10482	0					
ANR	10639	Identifier	endptr		10482	1					
ANR	10640	Argument	0		10482	2					
ANR	10641	PrimaryExpression	0		10482	0					
ANR	10642	IfStatement	if ( * endptr == '\\0' && dscp >= DSCP_MIN && dscp <= DSCP_MAX )		10482	6					
ANR	10643	Condition	* endptr == '\\0' && dscp >= DSCP_MIN && dscp <= DSCP_MAX	139:8:3482:3536	10482	0	True				
ANR	10644	AndExpression	* endptr == '\\0' && dscp >= DSCP_MIN && dscp <= DSCP_MAX		10482	0		&&			
ANR	10645	EqualityExpression	* endptr == '\\0'		10482	0		==			
ANR	10646	UnaryOperationExpression	* endptr		10482	0					
ANR	10647	UnaryOperator	*		10482	0					
ANR	10648	Identifier	endptr		10482	1					
ANR	10649	PrimaryExpression	'\\0'		10482	1					
ANR	10650	AndExpression	dscp >= DSCP_MIN && dscp <= DSCP_MAX		10482	1		&&			
ANR	10651	RelationalExpression	dscp >= DSCP_MIN		10482	0		>=			
ANR	10652	Identifier	dscp		10482	0					
ANR	10653	Identifier	DSCP_MIN		10482	1					
ANR	10654	RelationalExpression	dscp <= DSCP_MAX		10482	1		<=			
ANR	10655	Identifier	dscp		10482	0					
ANR	10656	Identifier	DSCP_MAX		10482	1					
ANR	10657	CompoundStatement		26:65:785:785	10482	1					
ANR	10658	ReturnStatement	return dscp ;	140:8:3549:3560	10482	0	True				
ANR	10659	Identifier	dscp		10482	0					
ANR	10660	ExpressionStatement	"LOGE ( ""Invalid DSCP value (%s)"" , str )"	143:4:3573:3609	10482	7	True				
ANR	10661	CallExpression	"LOGE ( ""Invalid DSCP value (%s)"" , str )"		10482	0					
ANR	10662	Callee	LOGE		10482	0					
ANR	10663	Identifier	LOGE		10482	0					
ANR	10664	ArgumentList	"""Invalid DSCP value (%s)"""		10482	1					
ANR	10665	Argument	"""Invalid DSCP value (%s)"""		10482	0					
ANR	10666	PrimaryExpression	"""Invalid DSCP value (%s)"""		10482	0					
ANR	10667	Argument	str		10482	1					
ANR	10668	Identifier	str		10482	0					
ANR	10669	ReturnStatement	return DSCP_DEFAULT ;	144:4:3615:3634	10482	8	True				
ANR	10670	Identifier	DSCP_DEFAULT		10482	0					
ANR	10671	ReturnType	static int		10482	1					
ANR	10672	Identifier	parse_dscp		10482	2					
ANR	10673	ParameterList	char * str		10482	3					
ANR	10674	Parameter	char * str	113:11:2742:2750	10482	0	True				
ANR	10675	ParameterType	char *		10482	0					
ANR	10676	Identifier	str		10482	1					
ANR	10677	CFGEntryNode	ENTRY		10482		True				
ANR	10678	CFGExitNode	EXIT		10482		True				
ANR	10679	Symbol	endptr		10482						
ANR	10680	Symbol	* endptr		10482						
ANR	10681	Symbol	& endptr		10482						
ANR	10682	Symbol	strncasecmp		10482						
ANR	10683	Symbol	DSCP_AF_LEN		10482						
ANR	10684	Symbol	str		10482						
ANR	10685	Symbol	strlen		10482						
ANR	10686	Symbol	DSCP_CS_LEN		10482						
ANR	10687	Symbol	DSCP_MIN		10482						
ANR	10688	Symbol	dscp		10482						
ANR	10689	Symbol	str_len		10482						
ANR	10690	Symbol	strtol		10482						
ANR	10691	Symbol	DSCP_EF		10482						
ANR	10692	Symbol	* str		10482						
ANR	10693	Symbol	strcasecmp		10482						
ANR	10694	Symbol	DSCP_MAX		10482						
ANR	10695	Symbol	DSCP_DEFAULT		10482						
ANR	10696	Function	read_jconf	147:0:3639:11616							
ANR	10697	FunctionDef	read_jconf (const char * file)		10696	0					
ANR	10698	CompoundStatement		149:0:3678:11616	10696	0					
ANR	10699	Statement	static	150:4:3684:3689	10696	0	True				
ANR	10700	IdentifierDeclStatement	jconf_t conf ;	150:11:3691:3703	10696	1	True				
ANR	10701	IdentifierDecl	conf		10696	0					
ANR	10702	IdentifierDeclType	jconf_t		10696	0					
ANR	10703	Identifier	conf		10696	1					
ANR	10704	ExpressionStatement	"memset ( & conf , 0 , sizeof ( jconf_t ) )"	152:4:3710:3743	10696	2	True				
ANR	10705	CallExpression	"memset ( & conf , 0 , sizeof ( jconf_t ) )"		10696	0					
ANR	10706	Callee	memset		10696	0					
ANR	10707	Identifier	memset		10696	0					
ANR	10708	ArgumentList	& conf		10696	1					
ANR	10709	Argument	& conf		10696	0					
ANR	10710	UnaryOperationExpression	& conf		10696	0					
ANR	10711	UnaryOperator	&		10696	0					
ANR	10712	Identifier	conf		10696	1					
ANR	10713	Argument	0		10696	1					
ANR	10714	PrimaryExpression	0		10696	0					
ANR	10715	Argument	sizeof ( jconf_t )		10696	2					
ANR	10716	SizeofExpression	sizeof ( jconf_t )		10696	0					
ANR	10717	Sizeof	sizeof		10696	0					
ANR	10718	SizeofOperand	jconf_t		10696	1					
ANR	10719	IdentifierDeclStatement	char * buf ;	154:4:3750:3759	10696	3	True				
ANR	10720	IdentifierDecl	* buf		10696	0					
ANR	10721	IdentifierDeclType	char *		10696	0					
ANR	10722	Identifier	buf		10696	1					
ANR	10723	IdentifierDeclStatement	json_value * obj ;	155:4:3765:3780	10696	4	True				
ANR	10724	IdentifierDecl	* obj		10696	0					
ANR	10725	IdentifierDeclType	json_value *		10696	0					
ANR	10726	Identifier	obj		10696	1					
ANR	10727	IdentifierDeclStatement	"FILE * f = fopen ( file , ""rb"" ) ;"	157:4:3787:3814	10696	5	True				
ANR	10728	IdentifierDecl	"* f = fopen ( file , ""rb"" )"		10696	0					
ANR	10729	IdentifierDeclType	FILE *		10696	0					
ANR	10730	Identifier	f		10696	1					
ANR	10731	AssignmentExpression	"* f = fopen ( file , ""rb"" )"		10696	2		=			
ANR	10732	Identifier	f		10696	0					
ANR	10733	CallExpression	"fopen ( file , ""rb"" )"		10696	1					
ANR	10734	Callee	fopen		10696	0					
ANR	10735	Identifier	fopen		10696	0					
ANR	10736	ArgumentList	file		10696	1					
ANR	10737	Argument	file		10696	0					
ANR	10738	Identifier	file		10696	0					
ANR	10739	Argument	"""rb"""		10696	1					
ANR	10740	PrimaryExpression	"""rb"""		10696	0					
ANR	10741	IfStatement	if ( f == NULL )		10696	6					
ANR	10742	Condition	f == NULL	158:8:3824:3832	10696	0	True				
ANR	10743	EqualityExpression	f == NULL		10696	0		==			
ANR	10744	Identifier	f		10696	0					
ANR	10745	Identifier	NULL		10696	1					
ANR	10746	CompoundStatement		10:19:156:156	10696	1					
ANR	10747	ExpressionStatement	"FATAL ( ""Invalid config path."" )"	159:8:3845:3874	10696	0	True				
ANR	10748	CallExpression	"FATAL ( ""Invalid config path."" )"		10696	0					
ANR	10749	Callee	FATAL		10696	0					
ANR	10750	Identifier	FATAL		10696	0					
ANR	10751	ArgumentList	"""Invalid config path."""		10696	1					
ANR	10752	Argument	"""Invalid config path."""		10696	0					
ANR	10753	PrimaryExpression	"""Invalid config path."""		10696	0					
ANR	10754	ExpressionStatement	"fseek ( f , 0 , SEEK_END )"	162:4:3887:3908	10696	7	True				
ANR	10755	CallExpression	"fseek ( f , 0 , SEEK_END )"		10696	0					
ANR	10756	Callee	fseek		10696	0					
ANR	10757	Identifier	fseek		10696	0					
ANR	10758	ArgumentList	f		10696	1					
ANR	10759	Argument	f		10696	0					
ANR	10760	Identifier	f		10696	0					
ANR	10761	Argument	0		10696	1					
ANR	10762	PrimaryExpression	0		10696	0					
ANR	10763	Argument	SEEK_END		10696	2					
ANR	10764	Identifier	SEEK_END		10696	0					
ANR	10765	IdentifierDeclStatement	long pos = ftell ( f ) ;	163:4:3914:3933	10696	8	True				
ANR	10766	IdentifierDecl	pos = ftell ( f )		10696	0					
ANR	10767	IdentifierDeclType	long		10696	0					
ANR	10768	Identifier	pos		10696	1					
ANR	10769	AssignmentExpression	pos = ftell ( f )		10696	2		=			
ANR	10770	Identifier	pos		10696	0					
ANR	10771	CallExpression	ftell ( f )		10696	1					
ANR	10772	Callee	ftell		10696	0					
ANR	10773	Identifier	ftell		10696	0					
ANR	10774	ArgumentList	f		10696	1					
ANR	10775	Argument	f		10696	0					
ANR	10776	Identifier	f		10696	0					
ANR	10777	ExpressionStatement	"fseek ( f , 0 , SEEK_SET )"	164:4:3939:3960	10696	9	True				
ANR	10778	CallExpression	"fseek ( f , 0 , SEEK_SET )"		10696	0					
ANR	10779	Callee	fseek		10696	0					
ANR	10780	Identifier	fseek		10696	0					
ANR	10781	ArgumentList	f		10696	1					
ANR	10782	Argument	f		10696	0					
ANR	10783	Identifier	f		10696	0					
ANR	10784	Argument	0		10696	1					
ANR	10785	PrimaryExpression	0		10696	0					
ANR	10786	Argument	SEEK_SET		10696	2					
ANR	10787	Identifier	SEEK_SET		10696	0					
ANR	10788	IfStatement	if ( pos < 0 )		10696	10					
ANR	10789	Condition	pos < 0	166:8:3971:3977	10696	0	True				
ANR	10790	RelationalExpression	pos < 0		10696	0		<			
ANR	10791	Identifier	pos		10696	0					
ANR	10792	PrimaryExpression	0		10696	1					
ANR	10793	CompoundStatement		18:17:301:301	10696	1					
ANR	10794	ExpressionStatement	"FATAL ( ""Invalid config path."" )"	167:8:3990:4019	10696	0	True				
ANR	10795	CallExpression	"FATAL ( ""Invalid config path."" )"		10696	0					
ANR	10796	Callee	FATAL		10696	0					
ANR	10797	Identifier	FATAL		10696	0					
ANR	10798	ArgumentList	"""Invalid config path."""		10696	1					
ANR	10799	Argument	"""Invalid config path."""		10696	0					
ANR	10800	PrimaryExpression	"""Invalid config path."""		10696	0					
ANR	10801	IfStatement	if ( pos >= MAX_CONF_SIZE )		10696	11					
ANR	10802	Condition	pos >= MAX_CONF_SIZE	170:8:4036:4055	10696	0	True				
ANR	10803	RelationalExpression	pos >= MAX_CONF_SIZE		10696	0		>=			
ANR	10804	Identifier	pos		10696	0					
ANR	10805	Identifier	MAX_CONF_SIZE		10696	1					
ANR	10806	CompoundStatement		22:30:379:379	10696	1					
ANR	10807	ExpressionStatement	"FATAL ( ""Too large config file."" )"	171:8:4068:4099	10696	0	True				
ANR	10808	CallExpression	"FATAL ( ""Too large config file."" )"		10696	0					
ANR	10809	Callee	FATAL		10696	0					
ANR	10810	Identifier	FATAL		10696	0					
ANR	10811	ArgumentList	"""Too large config file."""		10696	1					
ANR	10812	Argument	"""Too large config file."""		10696	0					
ANR	10813	PrimaryExpression	"""Too large config file."""		10696	0					
ANR	10814	ExpressionStatement	buf = ss_malloc ( pos + 1 )	174:4:4112:4136	10696	12	True				
ANR	10815	AssignmentExpression	buf = ss_malloc ( pos + 1 )		10696	0		=			
ANR	10816	Identifier	buf		10696	0					
ANR	10817	CallExpression	ss_malloc ( pos + 1 )		10696	1					
ANR	10818	Callee	ss_malloc		10696	0					
ANR	10819	Identifier	ss_malloc		10696	0					
ANR	10820	ArgumentList	pos + 1		10696	1					
ANR	10821	Argument	pos + 1		10696	0					
ANR	10822	AdditiveExpression	pos + 1		10696	0		+			
ANR	10823	Identifier	pos		10696	0					
ANR	10824	PrimaryExpression	1		10696	1					
ANR	10825	IfStatement	if ( buf == NULL )		10696	13					
ANR	10826	Condition	buf == NULL	175:8:4146:4156	10696	0	True				
ANR	10827	EqualityExpression	buf == NULL		10696	0		==			
ANR	10828	Identifier	buf		10696	0					
ANR	10829	Identifier	NULL		10696	1					
ANR	10830	CompoundStatement		27:21:480:480	10696	1					
ANR	10831	ExpressionStatement	"FATAL ( ""No enough memory."" )"	176:8:4169:4195	10696	0	True				
ANR	10832	CallExpression	"FATAL ( ""No enough memory."" )"		10696	0					
ANR	10833	Callee	FATAL		10696	0					
ANR	10834	Identifier	FATAL		10696	0					
ANR	10835	ArgumentList	"""No enough memory."""		10696	1					
ANR	10836	Argument	"""No enough memory."""		10696	0					
ANR	10837	PrimaryExpression	"""No enough memory."""		10696	0					
ANR	10838	IdentifierDeclStatement	"int nread = fread ( buf , pos , 1 , f ) ;"	179:4:4208:4241	10696	14	True				
ANR	10839	IdentifierDecl	"nread = fread ( buf , pos , 1 , f )"		10696	0					
ANR	10840	IdentifierDeclType	int		10696	0					
ANR	10841	Identifier	nread		10696	1					
ANR	10842	AssignmentExpression	"nread = fread ( buf , pos , 1 , f )"		10696	2		=			
ANR	10843	Identifier	nread		10696	0					
ANR	10844	CallExpression	"fread ( buf , pos , 1 , f )"		10696	1					
ANR	10845	Callee	fread		10696	0					
ANR	10846	Identifier	fread		10696	0					
ANR	10847	ArgumentList	buf		10696	1					
ANR	10848	Argument	buf		10696	0					
ANR	10849	Identifier	buf		10696	0					
ANR	10850	Argument	pos		10696	1					
ANR	10851	Identifier	pos		10696	0					
ANR	10852	Argument	1		10696	2					
ANR	10853	PrimaryExpression	1		10696	0					
ANR	10854	Argument	f		10696	3					
ANR	10855	Identifier	f		10696	0					
ANR	10856	IfStatement	if ( ! nread )		10696	15					
ANR	10857	Condition	! nread	180:8:4251:4256	10696	0	True				
ANR	10858	UnaryOperationExpression	! nread		10696	0					
ANR	10859	UnaryOperator	!		10696	0					
ANR	10860	Identifier	nread		10696	1					
ANR	10861	CompoundStatement		32:16:580:580	10696	1					
ANR	10862	ExpressionStatement	"FATAL ( ""Failed to read the config file."" )"	181:8:4269:4309	10696	0	True				
ANR	10863	CallExpression	"FATAL ( ""Failed to read the config file."" )"		10696	0					
ANR	10864	Callee	FATAL		10696	0					
ANR	10865	Identifier	FATAL		10696	0					
ANR	10866	ArgumentList	"""Failed to read the config file."""		10696	1					
ANR	10867	Argument	"""Failed to read the config file."""		10696	0					
ANR	10868	PrimaryExpression	"""Failed to read the config file."""		10696	0					
ANR	10869	ExpressionStatement	fclose ( f )	183:4:4321:4330	10696	16	True				
ANR	10870	CallExpression	fclose ( f )		10696	0					
ANR	10871	Callee	fclose		10696	0					
ANR	10872	Identifier	fclose		10696	0					
ANR	10873	ArgumentList	f		10696	1					
ANR	10874	Argument	f		10696	0					
ANR	10875	Identifier	f		10696	0					
ANR	10876	ExpressionStatement	buf [ pos ] = '\\0'	185:4:4337:4352	10696	17	True				
ANR	10877	AssignmentExpression	buf [ pos ] = '\\0'		10696	0		=			
ANR	10878	ArrayIndexing	buf [ pos ]		10696	0					
ANR	10879	Identifier	buf		10696	0					
ANR	10880	Identifier	pos		10696	1					
ANR	10881	PrimaryExpression	'\\0'		10696	1					
ANR	10882	IdentifierDeclStatement	"json_settings settings = { 0UL , 0 , NULL , NULL , NULL } ;"	187:4:4376:4429	10696	18	True				
ANR	10883	IdentifierDecl	"settings = { 0UL , 0 , NULL , NULL , NULL }"		10696	0					
ANR	10884	IdentifierDeclType	json_settings		10696	0					
ANR	10885	Identifier	settings		10696	1					
ANR	10886	AssignmentExpression	"settings = { 0UL , 0 , NULL , NULL , NULL }"		10696	2		=			
ANR	10887	Identifier	settings		10696	0					
ANR	10888	InitializerList	0UL		10696	1					
ANR	10889	PrimaryExpression	0UL		10696	0					
ANR	10890	PrimaryExpression	0		10696	1					
ANR	10891	Identifier	NULL		10696	2					
ANR	10892	Identifier	NULL		10696	3					
ANR	10893	Identifier	NULL		10696	4					
ANR	10894	IdentifierDeclStatement	char error_buf [ 512 ] ;	188:4:4435:4454	10696	19	True				
ANR	10895	IdentifierDecl	error_buf [ 512 ]		10696	0					
ANR	10896	IdentifierDeclType	char [ 512 ]		10696	0					
ANR	10897	Identifier	error_buf		10696	1					
ANR	10898	PrimaryExpression	512		10696	2					
ANR	10899	ExpressionStatement	"obj = json_parse_ex ( & settings , buf , pos , error_buf )"	189:4:4460:4511	10696	20	True				
ANR	10900	AssignmentExpression	"obj = json_parse_ex ( & settings , buf , pos , error_buf )"		10696	0		=			
ANR	10901	Identifier	obj		10696	0					
ANR	10902	CallExpression	"json_parse_ex ( & settings , buf , pos , error_buf )"		10696	1					
ANR	10903	Callee	json_parse_ex		10696	0					
ANR	10904	Identifier	json_parse_ex		10696	0					
ANR	10905	ArgumentList	& settings		10696	1					
ANR	10906	Argument	& settings		10696	0					
ANR	10907	UnaryOperationExpression	& settings		10696	0					
ANR	10908	UnaryOperator	&		10696	0					
ANR	10909	Identifier	settings		10696	1					
ANR	10910	Argument	buf		10696	1					
ANR	10911	Identifier	buf		10696	0					
ANR	10912	Argument	pos		10696	2					
ANR	10913	Identifier	pos		10696	0					
ANR	10914	Argument	error_buf		10696	3					
ANR	10915	Identifier	error_buf		10696	0					
ANR	10916	IfStatement	if ( obj == NULL )		10696	21					
ANR	10917	Condition	obj == NULL	191:8:4522:4532	10696	0	True				
ANR	10918	EqualityExpression	obj == NULL		10696	0		==			
ANR	10919	Identifier	obj		10696	0					
ANR	10920	Identifier	NULL		10696	1					
ANR	10921	CompoundStatement		43:21:856:856	10696	1					
ANR	10922	ExpressionStatement	FATAL ( error_buf )	192:8:4545:4561	10696	0	True				
ANR	10923	CallExpression	FATAL ( error_buf )		10696	0					
ANR	10924	Callee	FATAL		10696	0					
ANR	10925	Identifier	FATAL		10696	0					
ANR	10926	ArgumentList	error_buf		10696	1					
ANR	10927	Argument	error_buf		10696	0					
ANR	10928	Identifier	error_buf		10696	0					
ANR	10929	IfStatement	if ( obj -> type == json_object )		10696	22					
ANR	10930	Condition	obj -> type == json_object	195:8:4578:4601	10696	0	True				
ANR	10931	EqualityExpression	obj -> type == json_object		10696	0		==			
ANR	10932	PtrMemberAccess	obj -> type		10696	0					
ANR	10933	Identifier	obj		10696	0					
ANR	10934	Identifier	type		10696	1					
ANR	10935	Identifier	json_object		10696	1					
ANR	10936	CompoundStatement		48:8:935:952	10696	1					
ANR	10937	IdentifierDeclStatement	"unsigned int i , j ;"	196:8:4614:4631	10696	0	True				
ANR	10938	IdentifierDecl	i		10696	0					
ANR	10939	IdentifierDeclType	unsigned int		10696	0					
ANR	10940	Identifier	i		10696	1					
ANR	10941	IdentifierDecl	j		10696	1					
ANR	10942	IdentifierDeclType	unsigned int		10696	0					
ANR	10943	Identifier	j		10696	1					
ANR	10944	ForStatement	for ( i = 0 ; i < obj -> u . object . length ; i ++ )		10696	1					
ANR	10945	ForInit	i = 0 ;	197:13:4646:4651	10696	0	True				
ANR	10946	AssignmentExpression	i = 0		10696	0		=			
ANR	10947	Identifier	i		10696	0					
ANR	10948	PrimaryExpression	0		10696	1					
ANR	10949	Condition	i < obj -> u . object . length	197:20:4653:4676	10696	1	True				
ANR	10950	RelationalExpression	i < obj -> u . object . length		10696	0		<			
ANR	10951	Identifier	i		10696	0					
ANR	10952	MemberAccess	obj -> u . object . length		10696	1					
ANR	10953	MemberAccess	obj -> u . object		10696	0					
ANR	10954	PtrMemberAccess	obj -> u		10696	0					
ANR	10955	Identifier	obj		10696	0					
ANR	10956	Identifier	u		10696	1					
ANR	10957	Identifier	object		10696	1					
ANR	10958	Identifier	length		10696	1					
ANR	10959	PostIncDecOperationExpression	i ++	197:46:4679:4681	10696	2	True				
ANR	10960	Identifier	i		10696	0					
ANR	10961	IncDec	++		10696	1					
ANR	10962	CompoundStatement		51:12:1081:1130	10696	3					
ANR	10963	IdentifierDeclStatement	char * name = obj -> u . object . values [ i ] . name ;	198:12:4698:4746	10696	0	True				
ANR	10964	IdentifierDecl	* name = obj -> u . object . values [ i ] . name		10696	0					
ANR	10965	IdentifierDeclType	char *		10696	0					
ANR	10966	Identifier	name		10696	1					
ANR	10967	AssignmentExpression	* name = obj -> u . object . values [ i ] . name		10696	2		=			
ANR	10968	Identifier	name		10696	0					
ANR	10969	MemberAccess	obj -> u . object . values [ i ] . name		10696	1					
ANR	10970	ArrayIndexing	obj -> u . object . values [ i ]		10696	0					
ANR	10971	MemberAccess	obj -> u . object . values		10696	0					
ANR	10972	MemberAccess	obj -> u . object		10696	0					
ANR	10973	PtrMemberAccess	obj -> u		10696	0					
ANR	10974	Identifier	obj		10696	0					
ANR	10975	Identifier	u		10696	1					
ANR	10976	Identifier	object		10696	1					
ANR	10977	Identifier	values		10696	1					
ANR	10978	Identifier	i		10696	1					
ANR	10979	Identifier	name		10696	1					
ANR	10980	IdentifierDeclStatement	json_value * value = obj -> u . object . values [ i ] . value ;	199:12:4760:4809	10696	1	True				
ANR	10981	IdentifierDecl	* value = obj -> u . object . values [ i ] . value		10696	0					
ANR	10982	IdentifierDeclType	json_value *		10696	0					
ANR	10983	Identifier	value		10696	1					
ANR	10984	AssignmentExpression	* value = obj -> u . object . values [ i ] . value		10696	2		=			
ANR	10985	Identifier	value		10696	0					
ANR	10986	MemberAccess	obj -> u . object . values [ i ] . value		10696	1					
ANR	10987	ArrayIndexing	obj -> u . object . values [ i ]		10696	0					
ANR	10988	MemberAccess	obj -> u . object . values		10696	0					
ANR	10989	MemberAccess	obj -> u . object		10696	0					
ANR	10990	PtrMemberAccess	obj -> u		10696	0					
ANR	10991	Identifier	obj		10696	0					
ANR	10992	Identifier	u		10696	1					
ANR	10993	Identifier	object		10696	1					
ANR	10994	Identifier	values		10696	1					
ANR	10995	Identifier	i		10696	1					
ANR	10996	Identifier	value		10696	1					
ANR	10997	IfStatement	"if ( strcmp ( name , ""server"" ) == 0 )"		10696	2					
ANR	10998	Condition	"strcmp ( name , ""server"" ) == 0"	200:16:4827:4853	10696	0	True				
ANR	10999	EqualityExpression	"strcmp ( name , ""server"" ) == 0"		10696	0		==			
ANR	11000	CallExpression	"strcmp ( name , ""server"" )"		10696	0					
ANR	11001	Callee	strcmp		10696	0					
ANR	11002	Identifier	strcmp		10696	0					
ANR	11003	ArgumentList	name		10696	1					
ANR	11004	Argument	name		10696	0					
ANR	11005	Identifier	name		10696	0					
ANR	11006	Argument	"""server"""		10696	1					
ANR	11007	PrimaryExpression	"""server"""		10696	0					
ANR	11008	PrimaryExpression	0		10696	1					
ANR	11009	CompoundStatement		52:45:1177:1177	10696	1					
ANR	11010	IfStatement	if ( value -> type == json_array )		10696	0					
ANR	11011	Condition	value -> type == json_array	201:20:4878:4902	10696	0	True				
ANR	11012	EqualityExpression	value -> type == json_array		10696	0		==			
ANR	11013	PtrMemberAccess	value -> type		10696	0					
ANR	11014	Identifier	value		10696	0					
ANR	11015	Identifier	type		10696	1					
ANR	11016	Identifier	json_array		10696	1					
ANR	11017	CompoundStatement		53:47:1226:1226	10696	1					
ANR	11018	ForStatement	for ( j = 0 ; j < value -> u . array . length ; j ++ )		10696	0					
ANR	11019	ForInit	j = 0 ;	202:25:4932:4937	10696	0	True				
ANR	11020	AssignmentExpression	j = 0		10696	0		=			
ANR	11021	Identifier	j		10696	0					
ANR	11022	PrimaryExpression	0		10696	1					
ANR	11023	Condition	j < value -> u . array . length	202:32:4939:4963	10696	1	True				
ANR	11024	RelationalExpression	j < value -> u . array . length		10696	0		<			
ANR	11025	Identifier	j		10696	0					
ANR	11026	MemberAccess	value -> u . array . length		10696	1					
ANR	11027	MemberAccess	value -> u . array		10696	0					
ANR	11028	PtrMemberAccess	value -> u		10696	0					
ANR	11029	Identifier	value		10696	0					
ANR	11030	Identifier	u		10696	1					
ANR	11031	Identifier	array		10696	1					
ANR	11032	Identifier	length		10696	1					
ANR	11033	PostIncDecOperationExpression	j ++	202:59:4966:4968	10696	2	True				
ANR	11034	Identifier	j		10696	0					
ANR	11035	IncDec	++		10696	1					
ANR	11036	CompoundStatement		59:24:1496:1525	10696	3					
ANR	11037	IfStatement	if ( j >= MAX_REMOTE_NUM )		10696	0					
ANR	11038	Condition	j >= MAX_REMOTE_NUM	203:28:5001:5019	10696	0	True				
ANR	11039	RelationalExpression	j >= MAX_REMOTE_NUM		10696	0		>=			
ANR	11040	Identifier	j		10696	0					
ANR	11041	Identifier	MAX_REMOTE_NUM		10696	1					
ANR	11042	CompoundStatement		55:49:1343:1343	10696	1					
ANR	11043	BreakStatement	break ;	204:28:5052:5057	10696	0	True				
ANR	11044	IdentifierDeclStatement	json_value * v = value -> u . array . values [ j ] ;	206:24:5109:5149	10696	1	True				
ANR	11045	IdentifierDecl	* v = value -> u . array . values [ j ]		10696	0					
ANR	11046	IdentifierDeclType	json_value *		10696	0					
ANR	11047	Identifier	v		10696	1					
ANR	11048	AssignmentExpression	* v = value -> u . array . values [ j ]		10696	2		=			
ANR	11049	Identifier	v		10696	0					
ANR	11050	ArrayIndexing	value -> u . array . values [ j ]		10696	1					
ANR	11051	MemberAccess	value -> u . array . values		10696	0					
ANR	11052	MemberAccess	value -> u . array		10696	0					
ANR	11053	PtrMemberAccess	value -> u		10696	0					
ANR	11054	Identifier	value		10696	0					
ANR	11055	Identifier	u		10696	1					
ANR	11056	Identifier	array		10696	1					
ANR	11057	Identifier	values		10696	1					
ANR	11058	Identifier	j		10696	1					
ANR	11059	IdentifierDeclStatement	char * addr_str = to_string ( v ) ;	207:24:5175:5204	10696	2	True				
ANR	11060	IdentifierDecl	* addr_str = to_string ( v )		10696	0					
ANR	11061	IdentifierDeclType	char *		10696	0					
ANR	11062	Identifier	addr_str		10696	1					
ANR	11063	AssignmentExpression	* addr_str = to_string ( v )		10696	2		=			
ANR	11064	Identifier	addr_str		10696	0					
ANR	11065	CallExpression	to_string ( v )		10696	1					
ANR	11066	Callee	to_string		10696	0					
ANR	11067	Identifier	to_string		10696	0					
ANR	11068	ArgumentList	v		10696	1					
ANR	11069	Argument	v		10696	0					
ANR	11070	Identifier	v		10696	0					
ANR	11071	ExpressionStatement	"parse_addr ( addr_str , conf . remote_addr + j )"	208:24:5230:5272	10696	3	True				
ANR	11072	CallExpression	"parse_addr ( addr_str , conf . remote_addr + j )"		10696	0					
ANR	11073	Callee	parse_addr		10696	0					
ANR	11074	Identifier	parse_addr		10696	0					
ANR	11075	ArgumentList	addr_str		10696	1					
ANR	11076	Argument	addr_str		10696	0					
ANR	11077	Identifier	addr_str		10696	0					
ANR	11078	Argument	conf . remote_addr + j		10696	1					
ANR	11079	AdditiveExpression	conf . remote_addr + j		10696	0		+			
ANR	11080	MemberAccess	conf . remote_addr		10696	0					
ANR	11081	Identifier	conf		10696	0					
ANR	11082	Identifier	remote_addr		10696	1					
ANR	11083	Identifier	j		10696	1					
ANR	11084	ExpressionStatement	ss_free ( addr_str )	209:24:5298:5315	10696	4	True				
ANR	11085	CallExpression	ss_free ( addr_str )		10696	0					
ANR	11086	Callee	ss_free		10696	0					
ANR	11087	Identifier	ss_free		10696	0					
ANR	11088	ArgumentList	addr_str		10696	1					
ANR	11089	Argument	addr_str		10696	0					
ANR	11090	Identifier	addr_str		10696	0					
ANR	11091	ExpressionStatement	conf . remote_num = j + 1	210:24:5341:5364	10696	5	True				
ANR	11092	AssignmentExpression	conf . remote_num = j + 1		10696	0		=			
ANR	11093	MemberAccess	conf . remote_num		10696	0					
ANR	11094	Identifier	conf		10696	0					
ANR	11095	Identifier	remote_num		10696	1					
ANR	11096	AdditiveExpression	j + 1		10696	1		+			
ANR	11097	Identifier	j		10696	0					
ANR	11098	PrimaryExpression	1		10696	1					
ANR	11099	ElseStatement	else		10696	0					
ANR	11100	IfStatement	if ( value -> type == json_string )		10696	0					
ANR	11101	Condition	value -> type == json_string	212:27:5415:5440	10696	0	True				
ANR	11102	EqualityExpression	value -> type == json_string		10696	0		==			
ANR	11103	PtrMemberAccess	value -> type		10696	0					
ANR	11104	Identifier	value		10696	0					
ANR	11105	Identifier	type		10696	1					
ANR	11106	Identifier	json_string		10696	1					
ANR	11107	CompoundStatement		64:55:1764:1764	10696	1					
ANR	11108	ExpressionStatement	conf . remote_addr [ 0 ] . host = to_string ( value )	213:20:5465:5508	10696	0	True				
ANR	11109	AssignmentExpression	conf . remote_addr [ 0 ] . host = to_string ( value )		10696	0		=			
ANR	11110	MemberAccess	conf . remote_addr [ 0 ] . host		10696	0					
ANR	11111	ArrayIndexing	conf . remote_addr [ 0 ]		10696	0					
ANR	11112	MemberAccess	conf . remote_addr		10696	0					
ANR	11113	Identifier	conf		10696	0					
ANR	11114	Identifier	remote_addr		10696	1					
ANR	11115	PrimaryExpression	0		10696	1					
ANR	11116	Identifier	host		10696	1					
ANR	11117	CallExpression	to_string ( value )		10696	1					
ANR	11118	Callee	to_string		10696	0					
ANR	11119	Identifier	to_string		10696	0					
ANR	11120	ArgumentList	value		10696	1					
ANR	11121	Argument	value		10696	0					
ANR	11122	Identifier	value		10696	0					
ANR	11123	ExpressionStatement	conf . remote_addr [ 0 ] . port = NULL	214:20:5530:5561	10696	1	True				
ANR	11124	AssignmentExpression	conf . remote_addr [ 0 ] . port = NULL		10696	0		=			
ANR	11125	MemberAccess	conf . remote_addr [ 0 ] . port		10696	0					
ANR	11126	ArrayIndexing	conf . remote_addr [ 0 ]		10696	0					
ANR	11127	MemberAccess	conf . remote_addr		10696	0					
ANR	11128	Identifier	conf		10696	0					
ANR	11129	Identifier	remote_addr		10696	1					
ANR	11130	PrimaryExpression	0		10696	1					
ANR	11131	Identifier	port		10696	1					
ANR	11132	Identifier	NULL		10696	1					
ANR	11133	ExpressionStatement	conf . remote_num = 1	215:20:5583:5611	10696	2	True				
ANR	11134	AssignmentExpression	conf . remote_num = 1		10696	0		=			
ANR	11135	MemberAccess	conf . remote_num		10696	0					
ANR	11136	Identifier	conf		10696	0					
ANR	11137	Identifier	remote_num		10696	1					
ANR	11138	PrimaryExpression	1		10696	1					
ANR	11139	ElseStatement	else		10696	0					
ANR	11140	IfStatement	"if ( strcmp ( name , ""port_password"" ) == 0 )"		10696	0					
ANR	11141	Condition	"strcmp ( name , ""port_password"" ) == 0"	217:23:5654:5687	10696	0	True				
ANR	11142	EqualityExpression	"strcmp ( name , ""port_password"" ) == 0"		10696	0		==			
ANR	11143	CallExpression	"strcmp ( name , ""port_password"" )"		10696	0					
ANR	11144	Callee	strcmp		10696	0					
ANR	11145	Identifier	strcmp		10696	0					
ANR	11146	ArgumentList	name		10696	1					
ANR	11147	Argument	name		10696	0					
ANR	11148	Identifier	name		10696	0					
ANR	11149	Argument	"""port_password"""		10696	1					
ANR	11150	PrimaryExpression	"""port_password"""		10696	0					
ANR	11151	PrimaryExpression	0		10696	1					
ANR	11152	CompoundStatement		69:59:2011:2011	10696	1					
ANR	11153	IfStatement	if ( value -> type == json_object )		10696	0					
ANR	11154	Condition	value -> type == json_object	218:20:5712:5737	10696	0	True				
ANR	11155	EqualityExpression	value -> type == json_object		10696	0		==			
ANR	11156	PtrMemberAccess	value -> type		10696	0					
ANR	11157	Identifier	value		10696	0					
ANR	11158	Identifier	type		10696	1					
ANR	11159	Identifier	json_object		10696	1					
ANR	11160	CompoundStatement		70:48:2061:2061	10696	1					
ANR	11161	ForStatement	for ( j = 0 ; j < value -> u . object . length ; j ++ )		10696	0					
ANR	11162	ForInit	j = 0 ;	219:25:5767:5772	10696	0	True				
ANR	11163	AssignmentExpression	j = 0		10696	0		=			
ANR	11164	Identifier	j		10696	0					
ANR	11165	PrimaryExpression	0		10696	1					
ANR	11166	Condition	j < value -> u . object . length	219:32:5774:5799	10696	1	True				
ANR	11167	RelationalExpression	j < value -> u . object . length		10696	0		<			
ANR	11168	Identifier	j		10696	0					
ANR	11169	MemberAccess	value -> u . object . length		10696	1					
ANR	11170	MemberAccess	value -> u . object		10696	0					
ANR	11171	PtrMemberAccess	value -> u		10696	0					
ANR	11172	Identifier	value		10696	0					
ANR	11173	Identifier	u		10696	1					
ANR	11174	Identifier	object		10696	1					
ANR	11175	Identifier	length		10696	1					
ANR	11176	PostIncDecOperationExpression	j ++	219:60:5802:5804	10696	2	True				
ANR	11177	Identifier	j		10696	0					
ANR	11178	IncDec	++		10696	1					
ANR	11179	CompoundStatement		75:24:2264:2311	10696	3					
ANR	11180	IfStatement	if ( j >= MAX_PORT_NUM )		10696	0					
ANR	11181	Condition	j >= MAX_PORT_NUM	220:28:5837:5853	10696	0	True				
ANR	11182	RelationalExpression	j >= MAX_PORT_NUM		10696	0		>=			
ANR	11183	Identifier	j		10696	0					
ANR	11184	Identifier	MAX_PORT_NUM		10696	1					
ANR	11185	CompoundStatement		72:47:2177:2177	10696	1					
ANR	11186	BreakStatement	break ;	221:28:5886:5891	10696	0	True				
ANR	11187	IdentifierDeclStatement	json_value * v = value -> u . object . values [ j ] . value ;	223:24:5943:5990	10696	1	True				
ANR	11188	IdentifierDecl	* v = value -> u . object . values [ j ] . value		10696	0					
ANR	11189	IdentifierDeclType	json_value *		10696	0					
ANR	11190	Identifier	v		10696	1					
ANR	11191	AssignmentExpression	* v = value -> u . object . values [ j ] . value		10696	2		=			
ANR	11192	Identifier	v		10696	0					
ANR	11193	MemberAccess	value -> u . object . values [ j ] . value		10696	1					
ANR	11194	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11195	MemberAccess	value -> u . object . values		10696	0					
ANR	11196	MemberAccess	value -> u . object		10696	0					
ANR	11197	PtrMemberAccess	value -> u		10696	0					
ANR	11198	Identifier	value		10696	0					
ANR	11199	Identifier	u		10696	1					
ANR	11200	Identifier	object		10696	1					
ANR	11201	Identifier	values		10696	1					
ANR	11202	Identifier	j		10696	1					
ANR	11203	Identifier	value		10696	1					
ANR	11204	IfStatement	if ( v -> type == json_string )		10696	2					
ANR	11205	Condition	v -> type == json_string	224:28:6020:6041	10696	0	True				
ANR	11206	EqualityExpression	v -> type == json_string		10696	0		==			
ANR	11207	PtrMemberAccess	v -> type		10696	0					
ANR	11208	Identifier	v		10696	0					
ANR	11209	Identifier	type		10696	1					
ANR	11210	Identifier	json_string		10696	1					
ANR	11211	CompoundStatement		76:52:2365:2365	10696	1					
ANR	11212	ExpressionStatement	"conf . port_password [ j ] . port = ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"	225:28:6074:6252	10696	0	True				
ANR	11213	AssignmentExpression	"conf . port_password [ j ] . port = ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"		10696	0		=			
ANR	11214	MemberAccess	conf . port_password [ j ] . port		10696	0					
ANR	11215	ArrayIndexing	conf . port_password [ j ]		10696	0					
ANR	11216	MemberAccess	conf . port_password		10696	0					
ANR	11217	Identifier	conf		10696	0					
ANR	11218	Identifier	port_password		10696	1					
ANR	11219	Identifier	j		10696	1					
ANR	11220	Identifier	port		10696	1					
ANR	11221	CallExpression	"ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"		10696	1					
ANR	11222	Callee	ss_strndup		10696	0					
ANR	11223	Identifier	ss_strndup		10696	0					
ANR	11224	ArgumentList	value -> u . object . values [ j ] . name		10696	1					
ANR	11225	Argument	value -> u . object . values [ j ] . name		10696	0					
ANR	11226	MemberAccess	value -> u . object . values [ j ] . name		10696	0					
ANR	11227	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11228	MemberAccess	value -> u . object . values		10696	0					
ANR	11229	MemberAccess	value -> u . object		10696	0					
ANR	11230	PtrMemberAccess	value -> u		10696	0					
ANR	11231	Identifier	value		10696	0					
ANR	11232	Identifier	u		10696	1					
ANR	11233	Identifier	object		10696	1					
ANR	11234	Identifier	values		10696	1					
ANR	11235	Identifier	j		10696	1					
ANR	11236	Identifier	name		10696	1					
ANR	11237	Argument	value -> u . object . values [ j ] . name_length		10696	1					
ANR	11238	MemberAccess	value -> u . object . values [ j ] . name_length		10696	0					
ANR	11239	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11240	MemberAccess	value -> u . object . values		10696	0					
ANR	11241	MemberAccess	value -> u . object		10696	0					
ANR	11242	PtrMemberAccess	value -> u		10696	0					
ANR	11243	Identifier	value		10696	0					
ANR	11244	Identifier	u		10696	1					
ANR	11245	Identifier	object		10696	1					
ANR	11246	Identifier	values		10696	1					
ANR	11247	Identifier	j		10696	1					
ANR	11248	Identifier	name_length		10696	1					
ANR	11249	ExpressionStatement	conf . port_password [ j ] . password = to_string ( v )	227:28:6282:6327	10696	1	True				
ANR	11250	AssignmentExpression	conf . port_password [ j ] . password = to_string ( v )		10696	0		=			
ANR	11251	MemberAccess	conf . port_password [ j ] . password		10696	0					
ANR	11252	ArrayIndexing	conf . port_password [ j ]		10696	0					
ANR	11253	MemberAccess	conf . port_password		10696	0					
ANR	11254	Identifier	conf		10696	0					
ANR	11255	Identifier	port_password		10696	1					
ANR	11256	Identifier	j		10696	1					
ANR	11257	Identifier	password		10696	1					
ANR	11258	CallExpression	to_string ( v )		10696	1					
ANR	11259	Callee	to_string		10696	0					
ANR	11260	Identifier	to_string		10696	0					
ANR	11261	ArgumentList	v		10696	1					
ANR	11262	Argument	v		10696	0					
ANR	11263	Identifier	v		10696	0					
ANR	11264	ExpressionStatement	conf . port_password_num = j + 1	228:28:6357:6395	10696	2	True				
ANR	11265	AssignmentExpression	conf . port_password_num = j + 1		10696	0		=			
ANR	11266	MemberAccess	conf . port_password_num		10696	0					
ANR	11267	Identifier	conf		10696	0					
ANR	11268	Identifier	port_password_num		10696	1					
ANR	11269	AdditiveExpression	j + 1		10696	1		+			
ANR	11270	Identifier	j		10696	0					
ANR	11271	PrimaryExpression	1		10696	1					
ANR	11272	ElseStatement	else		10696	0					
ANR	11273	IfStatement	"if ( strcmp ( name , ""server_port"" ) == 0 )"		10696	0					
ANR	11274	Condition	"strcmp ( name , ""server_port"" ) == 0"	232:23:6486:6517	10696	0	True				
ANR	11275	EqualityExpression	"strcmp ( name , ""server_port"" ) == 0"		10696	0		==			
ANR	11276	CallExpression	"strcmp ( name , ""server_port"" )"		10696	0					
ANR	11277	Callee	strcmp		10696	0					
ANR	11278	Identifier	strcmp		10696	0					
ANR	11279	ArgumentList	name		10696	1					
ANR	11280	Argument	name		10696	0					
ANR	11281	Identifier	name		10696	0					
ANR	11282	Argument	"""server_port"""		10696	1					
ANR	11283	PrimaryExpression	"""server_port"""		10696	0					
ANR	11284	PrimaryExpression	0		10696	1					
ANR	11285	CompoundStatement		84:57:2841:2841	10696	1					
ANR	11286	ExpressionStatement	conf . remote_port = to_string ( value )	233:16:6538:6573	10696	0	True				
ANR	11287	AssignmentExpression	conf . remote_port = to_string ( value )		10696	0		=			
ANR	11288	MemberAccess	conf . remote_port		10696	0					
ANR	11289	Identifier	conf		10696	0					
ANR	11290	Identifier	remote_port		10696	1					
ANR	11291	CallExpression	to_string ( value )		10696	1					
ANR	11292	Callee	to_string		10696	0					
ANR	11293	Identifier	to_string		10696	0					
ANR	11294	ArgumentList	value		10696	1					
ANR	11295	Argument	value		10696	0					
ANR	11296	Identifier	value		10696	0					
ANR	11297	ElseStatement	else		10696	0					
ANR	11298	IfStatement	"if ( strcmp ( name , ""local_address"" ) == 0 )"		10696	0					
ANR	11299	Condition	"strcmp ( name , ""local_address"" ) == 0"	234:23:6598:6631	10696	0	True				
ANR	11300	EqualityExpression	"strcmp ( name , ""local_address"" ) == 0"		10696	0		==			
ANR	11301	CallExpression	"strcmp ( name , ""local_address"" )"		10696	0					
ANR	11302	Callee	strcmp		10696	0					
ANR	11303	Identifier	strcmp		10696	0					
ANR	11304	ArgumentList	name		10696	1					
ANR	11305	Argument	name		10696	0					
ANR	11306	Identifier	name		10696	0					
ANR	11307	Argument	"""local_address"""		10696	1					
ANR	11308	PrimaryExpression	"""local_address"""		10696	0					
ANR	11309	PrimaryExpression	0		10696	1					
ANR	11310	CompoundStatement		86:59:2955:2955	10696	1					
ANR	11311	ExpressionStatement	conf . local_addr = to_string ( value )	235:16:6652:6686	10696	0	True				
ANR	11312	AssignmentExpression	conf . local_addr = to_string ( value )		10696	0		=			
ANR	11313	MemberAccess	conf . local_addr		10696	0					
ANR	11314	Identifier	conf		10696	0					
ANR	11315	Identifier	local_addr		10696	1					
ANR	11316	CallExpression	to_string ( value )		10696	1					
ANR	11317	Callee	to_string		10696	0					
ANR	11318	Identifier	to_string		10696	0					
ANR	11319	ArgumentList	value		10696	1					
ANR	11320	Argument	value		10696	0					
ANR	11321	Identifier	value		10696	0					
ANR	11322	ElseStatement	else		10696	0					
ANR	11323	IfStatement	"if ( strcmp ( name , ""local_port"" ) == 0 )"		10696	0					
ANR	11324	Condition	"strcmp ( name , ""local_port"" ) == 0"	236:23:6711:6741	10696	0	True				
ANR	11325	EqualityExpression	"strcmp ( name , ""local_port"" ) == 0"		10696	0		==			
ANR	11326	CallExpression	"strcmp ( name , ""local_port"" )"		10696	0					
ANR	11327	Callee	strcmp		10696	0					
ANR	11328	Identifier	strcmp		10696	0					
ANR	11329	ArgumentList	name		10696	1					
ANR	11330	Argument	name		10696	0					
ANR	11331	Identifier	name		10696	0					
ANR	11332	Argument	"""local_port"""		10696	1					
ANR	11333	PrimaryExpression	"""local_port"""		10696	0					
ANR	11334	PrimaryExpression	0		10696	1					
ANR	11335	CompoundStatement		88:56:3065:3065	10696	1					
ANR	11336	ExpressionStatement	conf . local_port = to_string ( value )	237:16:6762:6796	10696	0	True				
ANR	11337	AssignmentExpression	conf . local_port = to_string ( value )		10696	0		=			
ANR	11338	MemberAccess	conf . local_port		10696	0					
ANR	11339	Identifier	conf		10696	0					
ANR	11340	Identifier	local_port		10696	1					
ANR	11341	CallExpression	to_string ( value )		10696	1					
ANR	11342	Callee	to_string		10696	0					
ANR	11343	Identifier	to_string		10696	0					
ANR	11344	ArgumentList	value		10696	1					
ANR	11345	Argument	value		10696	0					
ANR	11346	Identifier	value		10696	0					
ANR	11347	ElseStatement	else		10696	0					
ANR	11348	IfStatement	"if ( strcmp ( name , ""password"" ) == 0 )"		10696	0					
ANR	11349	Condition	"strcmp ( name , ""password"" ) == 0"	238:23:6821:6849	10696	0	True				
ANR	11350	EqualityExpression	"strcmp ( name , ""password"" ) == 0"		10696	0		==			
ANR	11351	CallExpression	"strcmp ( name , ""password"" )"		10696	0					
ANR	11352	Callee	strcmp		10696	0					
ANR	11353	Identifier	strcmp		10696	0					
ANR	11354	ArgumentList	name		10696	1					
ANR	11355	Argument	name		10696	0					
ANR	11356	Identifier	name		10696	0					
ANR	11357	Argument	"""password"""		10696	1					
ANR	11358	PrimaryExpression	"""password"""		10696	0					
ANR	11359	PrimaryExpression	0		10696	1					
ANR	11360	CompoundStatement		90:54:3173:3173	10696	1					
ANR	11361	ExpressionStatement	conf . password = to_string ( value )	239:16:6870:6902	10696	0	True				
ANR	11362	AssignmentExpression	conf . password = to_string ( value )		10696	0		=			
ANR	11363	MemberAccess	conf . password		10696	0					
ANR	11364	Identifier	conf		10696	0					
ANR	11365	Identifier	password		10696	1					
ANR	11366	CallExpression	to_string ( value )		10696	1					
ANR	11367	Callee	to_string		10696	0					
ANR	11368	Identifier	to_string		10696	0					
ANR	11369	ArgumentList	value		10696	1					
ANR	11370	Argument	value		10696	0					
ANR	11371	Identifier	value		10696	0					
ANR	11372	ElseStatement	else		10696	0					
ANR	11373	IfStatement	"if ( strcmp ( name , ""key"" ) == 0 )"		10696	0					
ANR	11374	Condition	"strcmp ( name , ""key"" ) == 0"	240:23:6927:6950	10696	0	True				
ANR	11375	EqualityExpression	"strcmp ( name , ""key"" ) == 0"		10696	0		==			
ANR	11376	CallExpression	"strcmp ( name , ""key"" )"		10696	0					
ANR	11377	Callee	strcmp		10696	0					
ANR	11378	Identifier	strcmp		10696	0					
ANR	11379	ArgumentList	name		10696	1					
ANR	11380	Argument	name		10696	0					
ANR	11381	Identifier	name		10696	0					
ANR	11382	Argument	"""key"""		10696	1					
ANR	11383	PrimaryExpression	"""key"""		10696	0					
ANR	11384	PrimaryExpression	0		10696	1					
ANR	11385	CompoundStatement		92:49:3274:3274	10696	1					
ANR	11386	ExpressionStatement	conf . key = to_string ( value )	241:16:6971:6998	10696	0	True				
ANR	11387	AssignmentExpression	conf . key = to_string ( value )		10696	0		=			
ANR	11388	MemberAccess	conf . key		10696	0					
ANR	11389	Identifier	conf		10696	0					
ANR	11390	Identifier	key		10696	1					
ANR	11391	CallExpression	to_string ( value )		10696	1					
ANR	11392	Callee	to_string		10696	0					
ANR	11393	Identifier	to_string		10696	0					
ANR	11394	ArgumentList	value		10696	1					
ANR	11395	Argument	value		10696	0					
ANR	11396	Identifier	value		10696	0					
ANR	11397	ElseStatement	else		10696	0					
ANR	11398	IfStatement	"if ( strcmp ( name , ""method"" ) == 0 )"		10696	0					
ANR	11399	Condition	"strcmp ( name , ""method"" ) == 0"	242:23:7023:7049	10696	0	True				
ANR	11400	EqualityExpression	"strcmp ( name , ""method"" ) == 0"		10696	0		==			
ANR	11401	CallExpression	"strcmp ( name , ""method"" )"		10696	0					
ANR	11402	Callee	strcmp		10696	0					
ANR	11403	Identifier	strcmp		10696	0					
ANR	11404	ArgumentList	name		10696	1					
ANR	11405	Argument	name		10696	0					
ANR	11406	Identifier	name		10696	0					
ANR	11407	Argument	"""method"""		10696	1					
ANR	11408	PrimaryExpression	"""method"""		10696	0					
ANR	11409	PrimaryExpression	0		10696	1					
ANR	11410	CompoundStatement		94:52:3373:3373	10696	1					
ANR	11411	ExpressionStatement	conf . method = to_string ( value )	243:16:7070:7100	10696	0	True				
ANR	11412	AssignmentExpression	conf . method = to_string ( value )		10696	0		=			
ANR	11413	MemberAccess	conf . method		10696	0					
ANR	11414	Identifier	conf		10696	0					
ANR	11415	Identifier	method		10696	1					
ANR	11416	CallExpression	to_string ( value )		10696	1					
ANR	11417	Callee	to_string		10696	0					
ANR	11418	Identifier	to_string		10696	0					
ANR	11419	ArgumentList	value		10696	1					
ANR	11420	Argument	value		10696	0					
ANR	11421	Identifier	value		10696	0					
ANR	11422	ElseStatement	else		10696	0					
ANR	11423	IfStatement	"if ( strcmp ( name , ""timeout"" ) == 0 )"		10696	0					
ANR	11424	Condition	"strcmp ( name , ""timeout"" ) == 0"	244:23:7125:7152	10696	0	True				
ANR	11425	EqualityExpression	"strcmp ( name , ""timeout"" ) == 0"		10696	0		==			
ANR	11426	CallExpression	"strcmp ( name , ""timeout"" )"		10696	0					
ANR	11427	Callee	strcmp		10696	0					
ANR	11428	Identifier	strcmp		10696	0					
ANR	11429	ArgumentList	name		10696	1					
ANR	11430	Argument	name		10696	0					
ANR	11431	Identifier	name		10696	0					
ANR	11432	Argument	"""timeout"""		10696	1					
ANR	11433	PrimaryExpression	"""timeout"""		10696	0					
ANR	11434	PrimaryExpression	0		10696	1					
ANR	11435	CompoundStatement		96:53:3476:3476	10696	1					
ANR	11436	ExpressionStatement	conf . timeout = to_string ( value )	245:16:7173:7204	10696	0	True				
ANR	11437	AssignmentExpression	conf . timeout = to_string ( value )		10696	0		=			
ANR	11438	MemberAccess	conf . timeout		10696	0					
ANR	11439	Identifier	conf		10696	0					
ANR	11440	Identifier	timeout		10696	1					
ANR	11441	CallExpression	to_string ( value )		10696	1					
ANR	11442	Callee	to_string		10696	0					
ANR	11443	Identifier	to_string		10696	0					
ANR	11444	ArgumentList	value		10696	1					
ANR	11445	Argument	value		10696	0					
ANR	11446	Identifier	value		10696	0					
ANR	11447	ElseStatement	else		10696	0					
ANR	11448	IfStatement	"if ( strcmp ( name , ""user"" ) == 0 )"		10696	0					
ANR	11449	Condition	"strcmp ( name , ""user"" ) == 0"	246:23:7229:7253	10696	0	True				
ANR	11450	EqualityExpression	"strcmp ( name , ""user"" ) == 0"		10696	0		==			
ANR	11451	CallExpression	"strcmp ( name , ""user"" )"		10696	0					
ANR	11452	Callee	strcmp		10696	0					
ANR	11453	Identifier	strcmp		10696	0					
ANR	11454	ArgumentList	name		10696	1					
ANR	11455	Argument	name		10696	0					
ANR	11456	Identifier	name		10696	0					
ANR	11457	Argument	"""user"""		10696	1					
ANR	11458	PrimaryExpression	"""user"""		10696	0					
ANR	11459	PrimaryExpression	0		10696	1					
ANR	11460	CompoundStatement		98:50:3577:3577	10696	1					
ANR	11461	ExpressionStatement	conf . user = to_string ( value )	247:16:7274:7302	10696	0	True				
ANR	11462	AssignmentExpression	conf . user = to_string ( value )		10696	0		=			
ANR	11463	MemberAccess	conf . user		10696	0					
ANR	11464	Identifier	conf		10696	0					
ANR	11465	Identifier	user		10696	1					
ANR	11466	CallExpression	to_string ( value )		10696	1					
ANR	11467	Callee	to_string		10696	0					
ANR	11468	Identifier	to_string		10696	0					
ANR	11469	ArgumentList	value		10696	1					
ANR	11470	Argument	value		10696	0					
ANR	11471	Identifier	value		10696	0					
ANR	11472	ElseStatement	else		10696	0					
ANR	11473	IfStatement	"if ( strcmp ( name , ""plugin"" ) == 0 )"		10696	0					
ANR	11474	Condition	"strcmp ( name , ""plugin"" ) == 0"	248:23:7327:7353	10696	0	True				
ANR	11475	EqualityExpression	"strcmp ( name , ""plugin"" ) == 0"		10696	0		==			
ANR	11476	CallExpression	"strcmp ( name , ""plugin"" )"		10696	0					
ANR	11477	Callee	strcmp		10696	0					
ANR	11478	Identifier	strcmp		10696	0					
ANR	11479	ArgumentList	name		10696	1					
ANR	11480	Argument	name		10696	0					
ANR	11481	Identifier	name		10696	0					
ANR	11482	Argument	"""plugin"""		10696	1					
ANR	11483	PrimaryExpression	"""plugin"""		10696	0					
ANR	11484	PrimaryExpression	0		10696	1					
ANR	11485	CompoundStatement		100:52:3677:3677	10696	1					
ANR	11486	ExpressionStatement	conf . plugin = to_string ( value )	249:16:7374:7404	10696	0	True				
ANR	11487	AssignmentExpression	conf . plugin = to_string ( value )		10696	0		=			
ANR	11488	MemberAccess	conf . plugin		10696	0					
ANR	11489	Identifier	conf		10696	0					
ANR	11490	Identifier	plugin		10696	1					
ANR	11491	CallExpression	to_string ( value )		10696	1					
ANR	11492	Callee	to_string		10696	0					
ANR	11493	Identifier	to_string		10696	0					
ANR	11494	ArgumentList	value		10696	1					
ANR	11495	Argument	value		10696	0					
ANR	11496	Identifier	value		10696	0					
ANR	11497	IfStatement	if ( strlen ( conf . plugin ) == 0 )		10696	1					
ANR	11498	Condition	strlen ( conf . plugin ) == 0	250:20:7426:7449	10696	0	True				
ANR	11499	EqualityExpression	strlen ( conf . plugin ) == 0		10696	0		==			
ANR	11500	CallExpression	strlen ( conf . plugin )		10696	0					
ANR	11501	Callee	strlen		10696	0					
ANR	11502	Identifier	strlen		10696	0					
ANR	11503	ArgumentList	conf . plugin		10696	1					
ANR	11504	Argument	conf . plugin		10696	0					
ANR	11505	MemberAccess	conf . plugin		10696	0					
ANR	11506	Identifier	conf		10696	0					
ANR	11507	Identifier	plugin		10696	1					
ANR	11508	PrimaryExpression	0		10696	1					
ANR	11509	CompoundStatement		102:46:3773:3773	10696	1					
ANR	11510	ExpressionStatement	ss_free ( conf . plugin )	251:20:7474:7494	10696	0	True				
ANR	11511	CallExpression	ss_free ( conf . plugin )		10696	0					
ANR	11512	Callee	ss_free		10696	0					
ANR	11513	Identifier	ss_free		10696	0					
ANR	11514	ArgumentList	conf . plugin		10696	1					
ANR	11515	Argument	conf . plugin		10696	0					
ANR	11516	MemberAccess	conf . plugin		10696	0					
ANR	11517	Identifier	conf		10696	0					
ANR	11518	Identifier	plugin		10696	1					
ANR	11519	ExpressionStatement	conf . plugin = NULL	252:20:7516:7534	10696	1	True				
ANR	11520	AssignmentExpression	conf . plugin = NULL		10696	0		=			
ANR	11521	MemberAccess	conf . plugin		10696	0					
ANR	11522	Identifier	conf		10696	0					
ANR	11523	Identifier	plugin		10696	1					
ANR	11524	Identifier	NULL		10696	1					
ANR	11525	ElseStatement	else		10696	0					
ANR	11526	IfStatement	"if ( strcmp ( name , ""plugin_opts"" ) == 0 )"		10696	0					
ANR	11527	Condition	"strcmp ( name , ""plugin_opts"" ) == 0"	254:23:7577:7608	10696	0	True				
ANR	11528	EqualityExpression	"strcmp ( name , ""plugin_opts"" ) == 0"		10696	0		==			
ANR	11529	CallExpression	"strcmp ( name , ""plugin_opts"" )"		10696	0					
ANR	11530	Callee	strcmp		10696	0					
ANR	11531	Identifier	strcmp		10696	0					
ANR	11532	ArgumentList	name		10696	1					
ANR	11533	Argument	name		10696	0					
ANR	11534	Identifier	name		10696	0					
ANR	11535	Argument	"""plugin_opts"""		10696	1					
ANR	11536	PrimaryExpression	"""plugin_opts"""		10696	0					
ANR	11537	PrimaryExpression	0		10696	1					
ANR	11538	CompoundStatement		106:57:3932:3932	10696	1					
ANR	11539	ExpressionStatement	conf . plugin_opts = to_string ( value )	255:16:7629:7664	10696	0	True				
ANR	11540	AssignmentExpression	conf . plugin_opts = to_string ( value )		10696	0		=			
ANR	11541	MemberAccess	conf . plugin_opts		10696	0					
ANR	11542	Identifier	conf		10696	0					
ANR	11543	Identifier	plugin_opts		10696	1					
ANR	11544	CallExpression	to_string ( value )		10696	1					
ANR	11545	Callee	to_string		10696	0					
ANR	11546	Identifier	to_string		10696	0					
ANR	11547	ArgumentList	value		10696	1					
ANR	11548	Argument	value		10696	0					
ANR	11549	Identifier	value		10696	0					
ANR	11550	ElseStatement	else		10696	0					
ANR	11551	IfStatement	"if ( strcmp ( name , ""fast_open"" ) == 0 )"		10696	0					
ANR	11552	Condition	"strcmp ( name , ""fast_open"" ) == 0"	256:23:7689:7718	10696	0	True				
ANR	11553	EqualityExpression	"strcmp ( name , ""fast_open"" ) == 0"		10696	0		==			
ANR	11554	CallExpression	"strcmp ( name , ""fast_open"" )"		10696	0					
ANR	11555	Callee	strcmp		10696	0					
ANR	11556	Identifier	strcmp		10696	0					
ANR	11557	ArgumentList	name		10696	1					
ANR	11558	Argument	name		10696	0					
ANR	11559	Identifier	name		10696	0					
ANR	11560	Argument	"""fast_open"""		10696	1					
ANR	11561	PrimaryExpression	"""fast_open"""		10696	0					
ANR	11562	PrimaryExpression	0		10696	1					
ANR	11563	CompoundStatement		108:55:4042:4042	10696	1					
ANR	11564	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'fast_open' must be a boolean"" )"	257:16:7739:7866	10696	0	True				
ANR	11565	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'fast_open' must be a boolean"" )"		10696	0					
ANR	11566	Callee	check_json_value_type		10696	0					
ANR	11567	Identifier	check_json_value_type		10696	0					
ANR	11568	ArgumentList	value		10696	1					
ANR	11569	Argument	value		10696	0					
ANR	11570	Identifier	value		10696	0					
ANR	11571	Argument	json_boolean		10696	1					
ANR	11572	Identifier	json_boolean		10696	0					
ANR	11573	Argument	"""invalid config file: option 'fast_open' must be a boolean"""		10696	2					
ANR	11574	PrimaryExpression	"""invalid config file: option 'fast_open' must be a boolean"""		10696	0					
ANR	11575	ExpressionStatement	conf . fast_open = value -> u . boolean	259:16:7884:7917	10696	1	True				
ANR	11576	AssignmentExpression	conf . fast_open = value -> u . boolean		10696	0		=			
ANR	11577	MemberAccess	conf . fast_open		10696	0					
ANR	11578	Identifier	conf		10696	0					
ANR	11579	Identifier	fast_open		10696	1					
ANR	11580	MemberAccess	value -> u . boolean		10696	1					
ANR	11581	PtrMemberAccess	value -> u		10696	0					
ANR	11582	Identifier	value		10696	0					
ANR	11583	Identifier	u		10696	1					
ANR	11584	Identifier	boolean		10696	1					
ANR	11585	ElseStatement	else		10696	0					
ANR	11586	IfStatement	"if ( strcmp ( name , ""reuse_port"" ) == 0 )"		10696	0					
ANR	11587	Condition	"strcmp ( name , ""reuse_port"" ) == 0"	260:23:7942:7972	10696	0	True				
ANR	11588	EqualityExpression	"strcmp ( name , ""reuse_port"" ) == 0"		10696	0		==			
ANR	11589	CallExpression	"strcmp ( name , ""reuse_port"" )"		10696	0					
ANR	11590	Callee	strcmp		10696	0					
ANR	11591	Identifier	strcmp		10696	0					
ANR	11592	ArgumentList	name		10696	1					
ANR	11593	Argument	name		10696	0					
ANR	11594	Identifier	name		10696	0					
ANR	11595	Argument	"""reuse_port"""		10696	1					
ANR	11596	PrimaryExpression	"""reuse_port"""		10696	0					
ANR	11597	PrimaryExpression	0		10696	1					
ANR	11598	CompoundStatement		112:56:4296:4296	10696	1					
ANR	11599	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'reuse_port' must be a boolean"" )"	261:16:7993:8121	10696	0	True				
ANR	11600	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'reuse_port' must be a boolean"" )"		10696	0					
ANR	11601	Callee	check_json_value_type		10696	0					
ANR	11602	Identifier	check_json_value_type		10696	0					
ANR	11603	ArgumentList	value		10696	1					
ANR	11604	Argument	value		10696	0					
ANR	11605	Identifier	value		10696	0					
ANR	11606	Argument	json_boolean		10696	1					
ANR	11607	Identifier	json_boolean		10696	0					
ANR	11608	Argument	"""invalid config file: option 'reuse_port' must be a boolean"""		10696	2					
ANR	11609	PrimaryExpression	"""invalid config file: option 'reuse_port' must be a boolean"""		10696	0					
ANR	11610	ExpressionStatement	conf . reuse_port = value -> u . boolean	263:16:8139:8173	10696	1	True				
ANR	11611	AssignmentExpression	conf . reuse_port = value -> u . boolean		10696	0		=			
ANR	11612	MemberAccess	conf . reuse_port		10696	0					
ANR	11613	Identifier	conf		10696	0					
ANR	11614	Identifier	reuse_port		10696	1					
ANR	11615	MemberAccess	value -> u . boolean		10696	1					
ANR	11616	PtrMemberAccess	value -> u		10696	0					
ANR	11617	Identifier	value		10696	0					
ANR	11618	Identifier	u		10696	1					
ANR	11619	Identifier	boolean		10696	1					
ANR	11620	ElseStatement	else		10696	0					
ANR	11621	IfStatement	"if ( strcmp ( name , ""disable_sni"" ) == 0 )"		10696	0					
ANR	11622	Condition	"strcmp ( name , ""disable_sni"" ) == 0"	264:23:8198:8229	10696	0	True				
ANR	11623	EqualityExpression	"strcmp ( name , ""disable_sni"" ) == 0"		10696	0		==			
ANR	11624	CallExpression	"strcmp ( name , ""disable_sni"" )"		10696	0					
ANR	11625	Callee	strcmp		10696	0					
ANR	11626	Identifier	strcmp		10696	0					
ANR	11627	ArgumentList	name		10696	1					
ANR	11628	Argument	name		10696	0					
ANR	11629	Identifier	name		10696	0					
ANR	11630	Argument	"""disable_sni"""		10696	1					
ANR	11631	PrimaryExpression	"""disable_sni"""		10696	0					
ANR	11632	PrimaryExpression	0		10696	1					
ANR	11633	CompoundStatement		116:57:4553:4553	10696	1					
ANR	11634	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'disable_sni' must be a boolean"" )"	265:16:8250:8379	10696	0	True				
ANR	11635	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'disable_sni' must be a boolean"" )"		10696	0					
ANR	11636	Callee	check_json_value_type		10696	0					
ANR	11637	Identifier	check_json_value_type		10696	0					
ANR	11638	ArgumentList	value		10696	1					
ANR	11639	Argument	value		10696	0					
ANR	11640	Identifier	value		10696	0					
ANR	11641	Argument	json_boolean		10696	1					
ANR	11642	Identifier	json_boolean		10696	0					
ANR	11643	Argument	"""invalid config file: option 'disable_sni' must be a boolean"""		10696	2					
ANR	11644	PrimaryExpression	"""invalid config file: option 'disable_sni' must be a boolean"""		10696	0					
ANR	11645	ExpressionStatement	conf . disable_sni = value -> u . boolean	267:16:8397:8432	10696	1	True				
ANR	11646	AssignmentExpression	conf . disable_sni = value -> u . boolean		10696	0		=			
ANR	11647	MemberAccess	conf . disable_sni		10696	0					
ANR	11648	Identifier	conf		10696	0					
ANR	11649	Identifier	disable_sni		10696	1					
ANR	11650	MemberAccess	value -> u . boolean		10696	1					
ANR	11651	PtrMemberAccess	value -> u		10696	0					
ANR	11652	Identifier	value		10696	0					
ANR	11653	Identifier	u		10696	1					
ANR	11654	Identifier	boolean		10696	1					
ANR	11655	ElseStatement	else		10696	0					
ANR	11656	IfStatement	"if ( strcmp ( name , ""auth"" ) == 0 )"		10696	0					
ANR	11657	Condition	"strcmp ( name , ""auth"" ) == 0"	268:23:8457:8481	10696	0	True				
ANR	11658	EqualityExpression	"strcmp ( name , ""auth"" ) == 0"		10696	0		==			
ANR	11659	CallExpression	"strcmp ( name , ""auth"" )"		10696	0					
ANR	11660	Callee	strcmp		10696	0					
ANR	11661	Identifier	strcmp		10696	0					
ANR	11662	ArgumentList	name		10696	1					
ANR	11663	Argument	name		10696	0					
ANR	11664	Identifier	name		10696	0					
ANR	11665	Argument	"""auth"""		10696	1					
ANR	11666	PrimaryExpression	"""auth"""		10696	0					
ANR	11667	PrimaryExpression	0		10696	1					
ANR	11668	CompoundStatement		120:50:4805:4805	10696	1					
ANR	11669	ExpressionStatement	"FATAL ( ""One time auth has been deprecated. Try AEAD ciphers instead."" )"	269:16:8502:8571	10696	0	True				
ANR	11670	CallExpression	"FATAL ( ""One time auth has been deprecated. Try AEAD ciphers instead."" )"		10696	0					
ANR	11671	Callee	FATAL		10696	0					
ANR	11672	Identifier	FATAL		10696	0					
ANR	11673	ArgumentList	"""One time auth has been deprecated. Try AEAD ciphers instead."""		10696	1					
ANR	11674	Argument	"""One time auth has been deprecated. Try AEAD ciphers instead."""		10696	0					
ANR	11675	PrimaryExpression	"""One time auth has been deprecated. Try AEAD ciphers instead."""		10696	0					
ANR	11676	ElseStatement	else		10696	0					
ANR	11677	IfStatement	"if ( strcmp ( name , ""nofile"" ) == 0 )"		10696	0					
ANR	11678	Condition	"strcmp ( name , ""nofile"" ) == 0"	270:23:8596:8622	10696	0	True				
ANR	11679	EqualityExpression	"strcmp ( name , ""nofile"" ) == 0"		10696	0		==			
ANR	11680	CallExpression	"strcmp ( name , ""nofile"" )"		10696	0					
ANR	11681	Callee	strcmp		10696	0					
ANR	11682	Identifier	strcmp		10696	0					
ANR	11683	ArgumentList	name		10696	1					
ANR	11684	Argument	name		10696	0					
ANR	11685	Identifier	name		10696	0					
ANR	11686	Argument	"""nofile"""		10696	1					
ANR	11687	PrimaryExpression	"""nofile"""		10696	0					
ANR	11688	PrimaryExpression	0		10696	1					
ANR	11689	CompoundStatement		122:52:4946:4946	10696	1					
ANR	11690	ExpressionStatement	"check_json_value_type ( value , json_integer , ""invalid config file: option 'nofile' must be an integer"" )"	271:16:8643:8764	10696	0	True				
ANR	11691	CallExpression	"check_json_value_type ( value , json_integer , ""invalid config file: option 'nofile' must be an integer"" )"		10696	0					
ANR	11692	Callee	check_json_value_type		10696	0					
ANR	11693	Identifier	check_json_value_type		10696	0					
ANR	11694	ArgumentList	value		10696	1					
ANR	11695	Argument	value		10696	0					
ANR	11696	Identifier	value		10696	0					
ANR	11697	Argument	json_integer		10696	1					
ANR	11698	Identifier	json_integer		10696	0					
ANR	11699	Argument	"""invalid config file: option 'nofile' must be an integer"""		10696	2					
ANR	11700	PrimaryExpression	"""invalid config file: option 'nofile' must be an integer"""		10696	0					
ANR	11701	ExpressionStatement	conf . nofile = value -> u . integer	273:16:8782:8812	10696	1	True				
ANR	11702	AssignmentExpression	conf . nofile = value -> u . integer		10696	0		=			
ANR	11703	MemberAccess	conf . nofile		10696	0					
ANR	11704	Identifier	conf		10696	0					
ANR	11705	Identifier	nofile		10696	1					
ANR	11706	MemberAccess	value -> u . integer		10696	1					
ANR	11707	PtrMemberAccess	value -> u		10696	0					
ANR	11708	Identifier	value		10696	0					
ANR	11709	Identifier	u		10696	1					
ANR	11710	Identifier	integer		10696	1					
ANR	11711	ElseStatement	else		10696	0					
ANR	11712	IfStatement	"if ( strcmp ( name , ""nameserver"" ) == 0 )"		10696	0					
ANR	11713	Condition	"strcmp ( name , ""nameserver"" ) == 0"	274:23:8837:8867	10696	0	True				
ANR	11714	EqualityExpression	"strcmp ( name , ""nameserver"" ) == 0"		10696	0		==			
ANR	11715	CallExpression	"strcmp ( name , ""nameserver"" )"		10696	0					
ANR	11716	Callee	strcmp		10696	0					
ANR	11717	Identifier	strcmp		10696	0					
ANR	11718	ArgumentList	name		10696	1					
ANR	11719	Argument	name		10696	0					
ANR	11720	Identifier	name		10696	0					
ANR	11721	Argument	"""nameserver"""		10696	1					
ANR	11722	PrimaryExpression	"""nameserver"""		10696	0					
ANR	11723	PrimaryExpression	0		10696	1					
ANR	11724	CompoundStatement		126:56:5191:5191	10696	1					
ANR	11725	ExpressionStatement	conf . nameserver = to_string ( value )	275:16:8888:8922	10696	0	True				
ANR	11726	AssignmentExpression	conf . nameserver = to_string ( value )		10696	0		=			
ANR	11727	MemberAccess	conf . nameserver		10696	0					
ANR	11728	Identifier	conf		10696	0					
ANR	11729	Identifier	nameserver		10696	1					
ANR	11730	CallExpression	to_string ( value )		10696	1					
ANR	11731	Callee	to_string		10696	0					
ANR	11732	Identifier	to_string		10696	0					
ANR	11733	ArgumentList	value		10696	1					
ANR	11734	Argument	value		10696	0					
ANR	11735	Identifier	value		10696	0					
ANR	11736	ElseStatement	else		10696	0					
ANR	11737	IfStatement	"if ( strcmp ( name , ""dscp"" ) == 0 )"		10696	0					
ANR	11738	Condition	"strcmp ( name , ""dscp"" ) == 0"	276:23:8947:8971	10696	0	True				
ANR	11739	EqualityExpression	"strcmp ( name , ""dscp"" ) == 0"		10696	0		==			
ANR	11740	CallExpression	"strcmp ( name , ""dscp"" )"		10696	0					
ANR	11741	Callee	strcmp		10696	0					
ANR	11742	Identifier	strcmp		10696	0					
ANR	11743	ArgumentList	name		10696	1					
ANR	11744	Argument	name		10696	0					
ANR	11745	Identifier	name		10696	0					
ANR	11746	Argument	"""dscp"""		10696	1					
ANR	11747	PrimaryExpression	"""dscp"""		10696	0					
ANR	11748	PrimaryExpression	0		10696	1					
ANR	11749	CompoundStatement		128:50:5295:5295	10696	1					
ANR	11750	IfStatement	if ( value -> type == json_object )		10696	0					
ANR	11751	Condition	value -> type == json_object	277:20:8996:9021	10696	0	True				
ANR	11752	EqualityExpression	value -> type == json_object		10696	0		==			
ANR	11753	PtrMemberAccess	value -> type		10696	0					
ANR	11754	Identifier	value		10696	0					
ANR	11755	Identifier	type		10696	1					
ANR	11756	Identifier	json_object		10696	1					
ANR	11757	CompoundStatement		129:48:5345:5345	10696	1					
ANR	11758	ForStatement	for ( j = 0 ; j < value -> u . object . length ; j ++ )		10696	0					
ANR	11759	ForInit	j = 0 ;	278:25:9051:9056	10696	0	True				
ANR	11760	AssignmentExpression	j = 0		10696	0		=			
ANR	11761	Identifier	j		10696	0					
ANR	11762	PrimaryExpression	0		10696	1					
ANR	11763	Condition	j < value -> u . object . length	278:32:9058:9083	10696	1	True				
ANR	11764	RelationalExpression	j < value -> u . object . length		10696	0		<			
ANR	11765	Identifier	j		10696	0					
ANR	11766	MemberAccess	value -> u . object . length		10696	1					
ANR	11767	MemberAccess	value -> u . object		10696	0					
ANR	11768	PtrMemberAccess	value -> u		10696	0					
ANR	11769	Identifier	value		10696	0					
ANR	11770	Identifier	u		10696	1					
ANR	11771	Identifier	object		10696	1					
ANR	11772	Identifier	length		10696	1					
ANR	11773	PostIncDecOperationExpression	j ++	278:60:9086:9088	10696	2	True				
ANR	11774	Identifier	j		10696	0					
ANR	11775	IncDec	++		10696	1					
ANR	11776	CompoundStatement		134:24:5548:5595	10696	3					
ANR	11777	IfStatement	if ( j >= MAX_DSCP_NUM )		10696	0					
ANR	11778	Condition	j >= MAX_DSCP_NUM	279:28:9121:9137	10696	0	True				
ANR	11779	RelationalExpression	j >= MAX_DSCP_NUM		10696	0		>=			
ANR	11780	Identifier	j		10696	0					
ANR	11781	Identifier	MAX_DSCP_NUM		10696	1					
ANR	11782	CompoundStatement		131:47:5461:5461	10696	1					
ANR	11783	BreakStatement	break ;	280:28:9170:9175	10696	0	True				
ANR	11784	IdentifierDeclStatement	json_value * v = value -> u . object . values [ j ] . value ;	282:24:9227:9274	10696	1	True				
ANR	11785	IdentifierDecl	* v = value -> u . object . values [ j ] . value		10696	0					
ANR	11786	IdentifierDeclType	json_value *		10696	0					
ANR	11787	Identifier	v		10696	1					
ANR	11788	AssignmentExpression	* v = value -> u . object . values [ j ] . value		10696	2		=			
ANR	11789	Identifier	v		10696	0					
ANR	11790	MemberAccess	value -> u . object . values [ j ] . value		10696	1					
ANR	11791	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11792	MemberAccess	value -> u . object . values		10696	0					
ANR	11793	MemberAccess	value -> u . object		10696	0					
ANR	11794	PtrMemberAccess	value -> u		10696	0					
ANR	11795	Identifier	value		10696	0					
ANR	11796	Identifier	u		10696	1					
ANR	11797	Identifier	object		10696	1					
ANR	11798	Identifier	values		10696	1					
ANR	11799	Identifier	j		10696	1					
ANR	11800	Identifier	value		10696	1					
ANR	11801	IfStatement	if ( v -> type == json_string )		10696	2					
ANR	11802	Condition	v -> type == json_string	283:28:9304:9325	10696	0	True				
ANR	11803	EqualityExpression	v -> type == json_string		10696	0		==			
ANR	11804	PtrMemberAccess	v -> type		10696	0					
ANR	11805	Identifier	v		10696	0					
ANR	11806	Identifier	type		10696	1					
ANR	11807	Identifier	json_string		10696	1					
ANR	11808	CompoundStatement		137:28:5744:5874	10696	1					
ANR	11809	IdentifierDeclStatement	int dscp = parse_dscp ( to_string ( v ) ) ;	284:28:9358:9393	10696	0	True				
ANR	11810	IdentifierDecl	dscp = parse_dscp ( to_string ( v ) )		10696	0					
ANR	11811	IdentifierDeclType	int		10696	0					
ANR	11812	Identifier	dscp		10696	1					
ANR	11813	AssignmentExpression	dscp = parse_dscp ( to_string ( v ) )		10696	2		=			
ANR	11814	Identifier	dscp		10696	0					
ANR	11815	CallExpression	parse_dscp ( to_string ( v ) )		10696	1					
ANR	11816	Callee	parse_dscp		10696	0					
ANR	11817	Identifier	parse_dscp		10696	0					
ANR	11818	ArgumentList	to_string ( v )		10696	1					
ANR	11819	Argument	to_string ( v )		10696	0					
ANR	11820	CallExpression	to_string ( v )		10696	0					
ANR	11821	Callee	to_string		10696	0					
ANR	11822	Identifier	to_string		10696	0					
ANR	11823	ArgumentList	v		10696	1					
ANR	11824	Argument	v		10696	0					
ANR	11825	Identifier	v		10696	0					
ANR	11826	IdentifierDeclStatement	"char * port = ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length ) ;"	285:28:9423:9553	10696	1	True				
ANR	11827	IdentifierDecl	"* port = ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"		10696	0					
ANR	11828	IdentifierDeclType	char *		10696	0					
ANR	11829	Identifier	port		10696	1					
ANR	11830	AssignmentExpression	"* port = ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"		10696	2		=			
ANR	11831	Identifier	port		10696	0					
ANR	11832	CallExpression	"ss_strndup ( value -> u . object . values [ j ] . name , value -> u . object . values [ j ] . name_length )"		10696	1					
ANR	11833	Callee	ss_strndup		10696	0					
ANR	11834	Identifier	ss_strndup		10696	0					
ANR	11835	ArgumentList	value -> u . object . values [ j ] . name		10696	1					
ANR	11836	Argument	value -> u . object . values [ j ] . name		10696	0					
ANR	11837	MemberAccess	value -> u . object . values [ j ] . name		10696	0					
ANR	11838	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11839	MemberAccess	value -> u . object . values		10696	0					
ANR	11840	MemberAccess	value -> u . object		10696	0					
ANR	11841	PtrMemberAccess	value -> u		10696	0					
ANR	11842	Identifier	value		10696	0					
ANR	11843	Identifier	u		10696	1					
ANR	11844	Identifier	object		10696	1					
ANR	11845	Identifier	values		10696	1					
ANR	11846	Identifier	j		10696	1					
ANR	11847	Identifier	name		10696	1					
ANR	11848	Argument	value -> u . object . values [ j ] . name_length		10696	1					
ANR	11849	MemberAccess	value -> u . object . values [ j ] . name_length		10696	0					
ANR	11850	ArrayIndexing	value -> u . object . values [ j ]		10696	0					
ANR	11851	MemberAccess	value -> u . object . values		10696	0					
ANR	11852	MemberAccess	value -> u . object		10696	0					
ANR	11853	PtrMemberAccess	value -> u		10696	0					
ANR	11854	Identifier	value		10696	0					
ANR	11855	Identifier	u		10696	1					
ANR	11856	Identifier	object		10696	1					
ANR	11857	Identifier	values		10696	1					
ANR	11858	Identifier	j		10696	1					
ANR	11859	Identifier	name_length		10696	1					
ANR	11860	ExpressionStatement	conf . dscp [ j ] . port = port	287:28:9583:9607	10696	2	True				
ANR	11861	AssignmentExpression	conf . dscp [ j ] . port = port		10696	0		=			
ANR	11862	MemberAccess	conf . dscp [ j ] . port		10696	0					
ANR	11863	ArrayIndexing	conf . dscp [ j ]		10696	0					
ANR	11864	MemberAccess	conf . dscp		10696	0					
ANR	11865	Identifier	conf		10696	0					
ANR	11866	Identifier	dscp		10696	1					
ANR	11867	Identifier	j		10696	1					
ANR	11868	Identifier	port		10696	1					
ANR	11869	Identifier	port		10696	1					
ANR	11870	ExpressionStatement	conf . dscp [ j ] . dscp = dscp	288:28:9637:9661	10696	3	True				
ANR	11871	AssignmentExpression	conf . dscp [ j ] . dscp = dscp		10696	0		=			
ANR	11872	MemberAccess	conf . dscp [ j ] . dscp		10696	0					
ANR	11873	ArrayIndexing	conf . dscp [ j ]		10696	0					
ANR	11874	MemberAccess	conf . dscp		10696	0					
ANR	11875	Identifier	conf		10696	0					
ANR	11876	Identifier	dscp		10696	1					
ANR	11877	Identifier	j		10696	1					
ANR	11878	Identifier	dscp		10696	1					
ANR	11879	Identifier	dscp		10696	1					
ANR	11880	ExpressionStatement	conf . dscp_num = j + 1	289:28:9691:9712	10696	4	True				
ANR	11881	AssignmentExpression	conf . dscp_num = j + 1		10696	0		=			
ANR	11882	MemberAccess	conf . dscp_num		10696	0					
ANR	11883	Identifier	conf		10696	0					
ANR	11884	Identifier	dscp_num		10696	1					
ANR	11885	AdditiveExpression	j + 1		10696	1		+			
ANR	11886	Identifier	j		10696	0					
ANR	11887	PrimaryExpression	1		10696	1					
ANR	11888	ElseStatement	else		10696	0					
ANR	11889	IfStatement	"if ( strcmp ( name , ""tunnel_address"" ) == 0 )"		10696	0					
ANR	11890	Condition	"strcmp ( name , ""tunnel_address"" ) == 0"	293:23:9803:9837	10696	0	True				
ANR	11891	EqualityExpression	"strcmp ( name , ""tunnel_address"" ) == 0"		10696	0		==			
ANR	11892	CallExpression	"strcmp ( name , ""tunnel_address"" )"		10696	0					
ANR	11893	Callee	strcmp		10696	0					
ANR	11894	Identifier	strcmp		10696	0					
ANR	11895	ArgumentList	name		10696	1					
ANR	11896	Argument	name		10696	0					
ANR	11897	Identifier	name		10696	0					
ANR	11898	Argument	"""tunnel_address"""		10696	1					
ANR	11899	PrimaryExpression	"""tunnel_address"""		10696	0					
ANR	11900	PrimaryExpression	0		10696	1					
ANR	11901	CompoundStatement		145:60:6161:6161	10696	1					
ANR	11902	ExpressionStatement	conf . tunnel_address = to_string ( value )	294:16:9858:9896	10696	0	True				
ANR	11903	AssignmentExpression	conf . tunnel_address = to_string ( value )		10696	0		=			
ANR	11904	MemberAccess	conf . tunnel_address		10696	0					
ANR	11905	Identifier	conf		10696	0					
ANR	11906	Identifier	tunnel_address		10696	1					
ANR	11907	CallExpression	to_string ( value )		10696	1					
ANR	11908	Callee	to_string		10696	0					
ANR	11909	Identifier	to_string		10696	0					
ANR	11910	ArgumentList	value		10696	1					
ANR	11911	Argument	value		10696	0					
ANR	11912	Identifier	value		10696	0					
ANR	11913	ElseStatement	else		10696	0					
ANR	11914	IfStatement	"if ( strcmp ( name , ""mode"" ) == 0 )"		10696	0					
ANR	11915	Condition	"strcmp ( name , ""mode"" ) == 0"	295:23:9921:9945	10696	0	True				
ANR	11916	EqualityExpression	"strcmp ( name , ""mode"" ) == 0"		10696	0		==			
ANR	11917	CallExpression	"strcmp ( name , ""mode"" )"		10696	0					
ANR	11918	Callee	strcmp		10696	0					
ANR	11919	Identifier	strcmp		10696	0					
ANR	11920	ArgumentList	name		10696	1					
ANR	11921	Argument	name		10696	0					
ANR	11922	Identifier	name		10696	0					
ANR	11923	Argument	"""mode"""		10696	1					
ANR	11924	PrimaryExpression	"""mode"""		10696	0					
ANR	11925	PrimaryExpression	0		10696	1					
ANR	11926	CompoundStatement		148:16:6287:6320	10696	1					
ANR	11927	IdentifierDeclStatement	char * mode_str = to_string ( value ) ;	296:16:9966:9999	10696	0	True				
ANR	11928	IdentifierDecl	* mode_str = to_string ( value )		10696	0					
ANR	11929	IdentifierDeclType	char *		10696	0					
ANR	11930	Identifier	mode_str		10696	1					
ANR	11931	AssignmentExpression	* mode_str = to_string ( value )		10696	2		=			
ANR	11932	Identifier	mode_str		10696	0					
ANR	11933	CallExpression	to_string ( value )		10696	1					
ANR	11934	Callee	to_string		10696	0					
ANR	11935	Identifier	to_string		10696	0					
ANR	11936	ArgumentList	value		10696	1					
ANR	11937	Argument	value		10696	0					
ANR	11938	Identifier	value		10696	0					
ANR	11939	IfStatement	"if ( strcmp ( mode_str , ""tcp_only"" ) == 0 )"		10696	1					
ANR	11940	Condition	"strcmp ( mode_str , ""tcp_only"" ) == 0"	298:20:10022:10054	10696	0	True				
ANR	11941	EqualityExpression	"strcmp ( mode_str , ""tcp_only"" ) == 0"		10696	0		==			
ANR	11942	CallExpression	"strcmp ( mode_str , ""tcp_only"" )"		10696	0					
ANR	11943	Callee	strcmp		10696	0					
ANR	11944	Identifier	strcmp		10696	0					
ANR	11945	ArgumentList	mode_str		10696	1					
ANR	11946	Argument	mode_str		10696	0					
ANR	11947	Identifier	mode_str		10696	0					
ANR	11948	Argument	"""tcp_only"""		10696	1					
ANR	11949	PrimaryExpression	"""tcp_only"""		10696	0					
ANR	11950	PrimaryExpression	0		10696	1					
ANR	11951	ExpressionStatement	conf . mode = TCP_ONLY	299:20:10077:10097	10696	1	True				
ANR	11952	AssignmentExpression	conf . mode = TCP_ONLY		10696	0		=			
ANR	11953	MemberAccess	conf . mode		10696	0					
ANR	11954	Identifier	conf		10696	0					
ANR	11955	Identifier	mode		10696	1					
ANR	11956	Identifier	TCP_ONLY		10696	1					
ANR	11957	ElseStatement	else		10696	0					
ANR	11958	IfStatement	"if ( strcmp ( mode_str , ""tcp_and_udp"" ) == 0 )"		10696	0					
ANR	11959	Condition	"strcmp ( mode_str , ""tcp_and_udp"" ) == 0"	300:25:10124:10159	10696	0	True				
ANR	11960	EqualityExpression	"strcmp ( mode_str , ""tcp_and_udp"" ) == 0"		10696	0		==			
ANR	11961	CallExpression	"strcmp ( mode_str , ""tcp_and_udp"" )"		10696	0					
ANR	11962	Callee	strcmp		10696	0					
ANR	11963	Identifier	strcmp		10696	0					
ANR	11964	ArgumentList	mode_str		10696	1					
ANR	11965	Argument	mode_str		10696	0					
ANR	11966	Identifier	mode_str		10696	0					
ANR	11967	Argument	"""tcp_and_udp"""		10696	1					
ANR	11968	PrimaryExpression	"""tcp_and_udp"""		10696	0					
ANR	11969	PrimaryExpression	0		10696	1					
ANR	11970	ExpressionStatement	conf . mode = TCP_AND_UDP	301:20:10182:10205	10696	1	True				
ANR	11971	AssignmentExpression	conf . mode = TCP_AND_UDP		10696	0		=			
ANR	11972	MemberAccess	conf . mode		10696	0					
ANR	11973	Identifier	conf		10696	0					
ANR	11974	Identifier	mode		10696	1					
ANR	11975	Identifier	TCP_AND_UDP		10696	1					
ANR	11976	ElseStatement	else		10696	0					
ANR	11977	IfStatement	"if ( strcmp ( mode_str , ""udp_only"" ) == 0 )"		10696	0					
ANR	11978	Condition	"strcmp ( mode_str , ""udp_only"" ) == 0"	302:25:10232:10264	10696	0	True				
ANR	11979	EqualityExpression	"strcmp ( mode_str , ""udp_only"" ) == 0"		10696	0		==			
ANR	11980	CallExpression	"strcmp ( mode_str , ""udp_only"" )"		10696	0					
ANR	11981	Callee	strcmp		10696	0					
ANR	11982	Identifier	strcmp		10696	0					
ANR	11983	ArgumentList	mode_str		10696	1					
ANR	11984	Argument	mode_str		10696	0					
ANR	11985	Identifier	mode_str		10696	0					
ANR	11986	Argument	"""udp_only"""		10696	1					
ANR	11987	PrimaryExpression	"""udp_only"""		10696	0					
ANR	11988	PrimaryExpression	0		10696	1					
ANR	11989	ExpressionStatement	conf . mode = UDP_ONLY	303:20:10287:10307	10696	1	True				
ANR	11990	AssignmentExpression	conf . mode = UDP_ONLY		10696	0		=			
ANR	11991	MemberAccess	conf . mode		10696	0					
ANR	11992	Identifier	conf		10696	0					
ANR	11993	Identifier	mode		10696	1					
ANR	11994	Identifier	UDP_ONLY		10696	1					
ANR	11995	ElseStatement	else		10696	0					
ANR	11996	ExpressionStatement	"LOGI ( ""ignore unknown mode: %s, use tcp_only as fallback"" , mode_str )"	305:20:10350:10442	10696	0	True				
ANR	11997	CallExpression	"LOGI ( ""ignore unknown mode: %s, use tcp_only as fallback"" , mode_str )"		10696	0					
ANR	11998	Callee	LOGI		10696	0					
ANR	11999	Identifier	LOGI		10696	0					
ANR	12000	ArgumentList	"""ignore unknown mode: %s, use tcp_only as fallback"""		10696	1					
ANR	12001	Argument	"""ignore unknown mode: %s, use tcp_only as fallback"""		10696	0					
ANR	12002	PrimaryExpression	"""ignore unknown mode: %s, use tcp_only as fallback"""		10696	0					
ANR	12003	Argument	mode_str		10696	1					
ANR	12004	Identifier	mode_str		10696	0					
ANR	12005	ExpressionStatement	ss_free ( mode_str )	307:16:10460:10477	10696	2	True				
ANR	12006	CallExpression	ss_free ( mode_str )		10696	0					
ANR	12007	Callee	ss_free		10696	0					
ANR	12008	Identifier	ss_free		10696	0					
ANR	12009	ArgumentList	mode_str		10696	1					
ANR	12010	Argument	mode_str		10696	0					
ANR	12011	Identifier	mode_str		10696	0					
ANR	12012	ElseStatement	else		10696	0					
ANR	12013	IfStatement	"if ( strcmp ( name , ""mtu"" ) == 0 )"		10696	0					
ANR	12014	Condition	"strcmp ( name , ""mtu"" ) == 0"	308:23:10502:10525	10696	0	True				
ANR	12015	EqualityExpression	"strcmp ( name , ""mtu"" ) == 0"		10696	0		==			
ANR	12016	CallExpression	"strcmp ( name , ""mtu"" )"		10696	0					
ANR	12017	Callee	strcmp		10696	0					
ANR	12018	Identifier	strcmp		10696	0					
ANR	12019	ArgumentList	name		10696	1					
ANR	12020	Argument	name		10696	0					
ANR	12021	Identifier	name		10696	0					
ANR	12022	Argument	"""mtu"""		10696	1					
ANR	12023	PrimaryExpression	"""mtu"""		10696	0					
ANR	12024	PrimaryExpression	0		10696	1					
ANR	12025	CompoundStatement		160:49:6849:6849	10696	1					
ANR	12026	ExpressionStatement	"check_json_value_type ( value , json_integer , ""invalid config file: option 'mtu' must be an integer"" )"	309:16:10546:10664	10696	0	True				
ANR	12027	CallExpression	"check_json_value_type ( value , json_integer , ""invalid config file: option 'mtu' must be an integer"" )"		10696	0					
ANR	12028	Callee	check_json_value_type		10696	0					
ANR	12029	Identifier	check_json_value_type		10696	0					
ANR	12030	ArgumentList	value		10696	1					
ANR	12031	Argument	value		10696	0					
ANR	12032	Identifier	value		10696	0					
ANR	12033	Argument	json_integer		10696	1					
ANR	12034	Identifier	json_integer		10696	0					
ANR	12035	Argument	"""invalid config file: option 'mtu' must be an integer"""		10696	2					
ANR	12036	PrimaryExpression	"""invalid config file: option 'mtu' must be an integer"""		10696	0					
ANR	12037	ExpressionStatement	conf . mtu = value -> u . integer	311:16:10682:10709	10696	1	True				
ANR	12038	AssignmentExpression	conf . mtu = value -> u . integer		10696	0		=			
ANR	12039	MemberAccess	conf . mtu		10696	0					
ANR	12040	Identifier	conf		10696	0					
ANR	12041	Identifier	mtu		10696	1					
ANR	12042	MemberAccess	value -> u . integer		10696	1					
ANR	12043	PtrMemberAccess	value -> u		10696	0					
ANR	12044	Identifier	value		10696	0					
ANR	12045	Identifier	u		10696	1					
ANR	12046	Identifier	integer		10696	1					
ANR	12047	ElseStatement	else		10696	0					
ANR	12048	IfStatement	"if ( strcmp ( name , ""mptcp"" ) == 0 )"		10696	0					
ANR	12049	Condition	"strcmp ( name , ""mptcp"" ) == 0"	312:23:10734:10759	10696	0	True				
ANR	12050	EqualityExpression	"strcmp ( name , ""mptcp"" ) == 0"		10696	0		==			
ANR	12051	CallExpression	"strcmp ( name , ""mptcp"" )"		10696	0					
ANR	12052	Callee	strcmp		10696	0					
ANR	12053	Identifier	strcmp		10696	0					
ANR	12054	ArgumentList	name		10696	1					
ANR	12055	Argument	name		10696	0					
ANR	12056	Identifier	name		10696	0					
ANR	12057	Argument	"""mptcp"""		10696	1					
ANR	12058	PrimaryExpression	"""mptcp"""		10696	0					
ANR	12059	PrimaryExpression	0		10696	1					
ANR	12060	CompoundStatement		164:51:7083:7083	10696	1					
ANR	12061	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'mptcp' must be a boolean"" )"	313:16:10780:10899	10696	0	True				
ANR	12062	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'mptcp' must be a boolean"" )"		10696	0					
ANR	12063	Callee	check_json_value_type		10696	0					
ANR	12064	Identifier	check_json_value_type		10696	0					
ANR	12065	ArgumentList	value		10696	1					
ANR	12066	Argument	value		10696	0					
ANR	12067	Identifier	value		10696	0					
ANR	12068	Argument	json_boolean		10696	1					
ANR	12069	Identifier	json_boolean		10696	0					
ANR	12070	Argument	"""invalid config file: option 'mptcp' must be a boolean"""		10696	2					
ANR	12071	PrimaryExpression	"""invalid config file: option 'mptcp' must be a boolean"""		10696	0					
ANR	12072	ExpressionStatement	conf . mptcp = value -> u . boolean	315:16:10917:10946	10696	1	True				
ANR	12073	AssignmentExpression	conf . mptcp = value -> u . boolean		10696	0		=			
ANR	12074	MemberAccess	conf . mptcp		10696	0					
ANR	12075	Identifier	conf		10696	0					
ANR	12076	Identifier	mptcp		10696	1					
ANR	12077	MemberAccess	value -> u . boolean		10696	1					
ANR	12078	PtrMemberAccess	value -> u		10696	0					
ANR	12079	Identifier	value		10696	0					
ANR	12080	Identifier	u		10696	1					
ANR	12081	Identifier	boolean		10696	1					
ANR	12082	ElseStatement	else		10696	0					
ANR	12083	IfStatement	"if ( strcmp ( name , ""ipv6_first"" ) == 0 )"		10696	0					
ANR	12084	Condition	"strcmp ( name , ""ipv6_first"" ) == 0"	316:23:10971:11001	10696	0	True				
ANR	12085	EqualityExpression	"strcmp ( name , ""ipv6_first"" ) == 0"		10696	0		==			
ANR	12086	CallExpression	"strcmp ( name , ""ipv6_first"" )"		10696	0					
ANR	12087	Callee	strcmp		10696	0					
ANR	12088	Identifier	strcmp		10696	0					
ANR	12089	ArgumentList	name		10696	1					
ANR	12090	Argument	name		10696	0					
ANR	12091	Identifier	name		10696	0					
ANR	12092	Argument	"""ipv6_first"""		10696	1					
ANR	12093	PrimaryExpression	"""ipv6_first"""		10696	0					
ANR	12094	PrimaryExpression	0		10696	1					
ANR	12095	CompoundStatement		168:56:7325:7325	10696	1					
ANR	12096	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'ipv6_first' must be a boolean"" )"	317:16:11022:11146	10696	0	True				
ANR	12097	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'ipv6_first' must be a boolean"" )"		10696	0					
ANR	12098	Callee	check_json_value_type		10696	0					
ANR	12099	Identifier	check_json_value_type		10696	0					
ANR	12100	ArgumentList	value		10696	1					
ANR	12101	Argument	value		10696	0					
ANR	12102	Identifier	value		10696	0					
ANR	12103	Argument	json_boolean		10696	1					
ANR	12104	Identifier	json_boolean		10696	0					
ANR	12105	Argument	"""invalid config file: option 'ipv6_first' must be a boolean"""		10696	2					
ANR	12106	PrimaryExpression	"""invalid config file: option 'ipv6_first' must be a boolean"""		10696	0					
ANR	12107	ExpressionStatement	conf . ipv6_first = value -> u . boolean	319:16:11164:11198	10696	1	True				
ANR	12108	AssignmentExpression	conf . ipv6_first = value -> u . boolean		10696	0		=			
ANR	12109	MemberAccess	conf . ipv6_first		10696	0					
ANR	12110	Identifier	conf		10696	0					
ANR	12111	Identifier	ipv6_first		10696	1					
ANR	12112	MemberAccess	value -> u . boolean		10696	1					
ANR	12113	PtrMemberAccess	value -> u		10696	0					
ANR	12114	Identifier	value		10696	0					
ANR	12115	Identifier	u		10696	1					
ANR	12116	Identifier	boolean		10696	1					
ANR	12117	ElseStatement	else		10696	0					
ANR	12118	IfStatement	"if ( strcmp ( name , ""use_syslog"" ) == 0 )"		10696	0					
ANR	12119	Condition	"strcmp ( name , ""use_syslog"" ) == 0"	321:23:11241:11271	10696	0	True				
ANR	12120	EqualityExpression	"strcmp ( name , ""use_syslog"" ) == 0"		10696	0		==			
ANR	12121	CallExpression	"strcmp ( name , ""use_syslog"" )"		10696	0					
ANR	12122	Callee	strcmp		10696	0					
ANR	12123	Identifier	strcmp		10696	0					
ANR	12124	ArgumentList	name		10696	1					
ANR	12125	Argument	name		10696	0					
ANR	12126	Identifier	name		10696	0					
ANR	12127	Argument	"""use_syslog"""		10696	1					
ANR	12128	PrimaryExpression	"""use_syslog"""		10696	0					
ANR	12129	PrimaryExpression	0		10696	1					
ANR	12130	CompoundStatement		173:56:7595:7595	10696	1					
ANR	12131	ExpressionStatement	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'use_syslog' must be a boolean"" )"	322:16:11292:11416	10696	0	True				
ANR	12132	CallExpression	"check_json_value_type ( value , json_boolean , ""invalid config file: option 'use_syslog' must be a boolean"" )"		10696	0					
ANR	12133	Callee	check_json_value_type		10696	0					
ANR	12134	Identifier	check_json_value_type		10696	0					
ANR	12135	ArgumentList	value		10696	1					
ANR	12136	Argument	value		10696	0					
ANR	12137	Identifier	value		10696	0					
ANR	12138	Argument	json_boolean		10696	1					
ANR	12139	Identifier	json_boolean		10696	0					
ANR	12140	Argument	"""invalid config file: option 'use_syslog' must be a boolean"""		10696	2					
ANR	12141	PrimaryExpression	"""invalid config file: option 'use_syslog' must be a boolean"""		10696	0					
ANR	12142	ExpressionStatement	use_syslog = value -> u . boolean	324:16:11434:11463	10696	1	True				
ANR	12143	AssignmentExpression	use_syslog = value -> u . boolean		10696	0		=			
ANR	12144	Identifier	use_syslog		10696	0					
ANR	12145	MemberAccess	value -> u . boolean		10696	1					
ANR	12146	PtrMemberAccess	value -> u		10696	0					
ANR	12147	Identifier	value		10696	0					
ANR	12148	Identifier	u		10696	1					
ANR	12149	Identifier	boolean		10696	1					
ANR	12150	ElseStatement	else		10696	0					
ANR	12151	CompoundStatement		180:11:7828:7828	10696	0					
ANR	12152	ExpressionStatement	"FATAL ( ""Invalid config file"" )"	329:8:11517:11545	10696	0	True				
ANR	12153	CallExpression	"FATAL ( ""Invalid config file"" )"		10696	0					
ANR	12154	Callee	FATAL		10696	0					
ANR	12155	Identifier	FATAL		10696	0					
ANR	12156	ArgumentList	"""Invalid config file"""		10696	1					
ANR	12157	Argument	"""Invalid config file"""		10696	0					
ANR	12158	PrimaryExpression	"""Invalid config file"""		10696	0					
ANR	12159	ExpressionStatement	ss_free ( buf )	332:4:11558:11570	10696	23	True				
ANR	12160	CallExpression	ss_free ( buf )		10696	0					
ANR	12161	Callee	ss_free		10696	0					
ANR	12162	Identifier	ss_free		10696	0					
ANR	12163	ArgumentList	buf		10696	1					
ANR	12164	Argument	buf		10696	0					
ANR	12165	Identifier	buf		10696	0					
ANR	12166	ExpressionStatement	json_value_free ( obj )	333:4:11576:11596	10696	24	True				
ANR	12167	CallExpression	json_value_free ( obj )		10696	0					
ANR	12168	Callee	json_value_free		10696	0					
ANR	12169	Identifier	json_value_free		10696	0					
ANR	12170	ArgumentList	obj		10696	1					
ANR	12171	Argument	obj		10696	0					
ANR	12172	Identifier	obj		10696	0					
ANR	12173	ReturnStatement	return & conf ;	334:4:11602:11614	10696	25	True				
ANR	12174	UnaryOperationExpression	& conf		10696	0					
ANR	12175	UnaryOperator	&		10696	0					
ANR	12176	Identifier	conf		10696	1					
ANR	12177	ReturnType	jconf_t *		10696	1					
ANR	12178	Identifier	read_jconf		10696	2					
ANR	12179	ParameterList	const char * file		10696	3					
ANR	12180	Parameter	const char * file	148:11:3660:3675	10696	0	True				
ANR	12181	ParameterType	const char *		10696	0					
ANR	12182	Identifier	file		10696	1					
ANR	12183	CFGEntryNode	ENTRY		10696		True				
ANR	12184	CFGExitNode	EXIT		10696		True				
ANR	12185	Symbol	* v		10696						
ANR	12186	Symbol	conf . mtu		10696						
ANR	12187	Symbol	MAX_PORT_NUM		10696						
ANR	12188	Symbol	conf		10696						
ANR	12189	Symbol	conf . remote_addr		10696						
ANR	12190	Symbol	dscp		10696						
ANR	12191	Symbol	error_buf		10696						
ANR	12192	Symbol	value -> u . integer		10696						
ANR	12193	Symbol	& conf		10696						
ANR	12194	Symbol	json_array		10696						
ANR	12195	Symbol	obj -> type		10696						
ANR	12196	Symbol	* conf . dscp		10696						
ANR	12197	Symbol	* buf		10696						
ANR	12198	Symbol	value -> u		10696						
ANR	12199	Symbol	json_boolean		10696						
ANR	12200	Symbol	* obj -> u . object . values		10696						
ANR	12201	Symbol	* value -> u		10696						
ANR	12202	Symbol	json_integer		10696						
ANR	12203	Symbol	conf . dscp_num		10696						
ANR	12204	Symbol	& settings		10696						
ANR	12205	Symbol	json_string		10696						
ANR	12206	Symbol	conf . timeout		10696						
ANR	12207	Symbol	fread		10696						
ANR	12208	Symbol	obj -> u . object		10696						
ANR	12209	Symbol	obj -> u		10696						
ANR	12210	Symbol	MAX_REMOTE_NUM		10696						
ANR	12211	Symbol	conf . password		10696						
ANR	12212	Symbol	conf . remote_num		10696						
ANR	12213	Symbol	conf . fast_open		10696						
ANR	12214	Symbol	TCP_AND_UDP		10696						
ANR	12215	Symbol	* conf . remote_addr		10696						
ANR	12216	Symbol	* pos		10696						
ANR	12217	Symbol	conf . method		10696						
ANR	12218	Symbol	UDP_ONLY		10696						
ANR	12219	Symbol	nread		10696						
ANR	12220	Symbol	conf . tunnel_address		10696						
ANR	12221	Symbol	* * obj		10696						
ANR	12222	Symbol	conf . user		10696						
ANR	12223	Symbol	conf . reuse_port		10696						
ANR	12224	Symbol	file		10696						
ANR	12225	Symbol	conf . remote_addr [ 0 ] . port		10696						
ANR	12226	Symbol	obj -> u . object . values [ i ] . name		10696						
ANR	12227	Symbol	pos		10696						
ANR	12228	Symbol	conf . dscp [ j ] . port		10696						
ANR	12229	Symbol	value -> u . object . values [ j ] . name_length		10696						
ANR	12230	Symbol	fopen		10696						
ANR	12231	Symbol	* obj		10696						
ANR	12232	Symbol	value -> u . array . length		10696						
ANR	12233	Symbol	f		10696						
ANR	12234	Symbol	* * value		10696						
ANR	12235	Symbol	i		10696						
ANR	12236	Symbol	j		10696						
ANR	12237	Symbol	obj -> u . object . values		10696						
ANR	12238	Symbol	* value -> u . object . values		10696						
ANR	12239	Symbol	conf . nofile		10696						
ANR	12240	Symbol	TCP_ONLY		10696						
ANR	12241	Symbol	SEEK_END		10696						
ANR	12242	Symbol	v -> type		10696						
ANR	12243	Symbol	buf		10696						
ANR	12244	Symbol	value -> u . object		10696						
ANR	12245	Symbol	conf . port_password [ j ] . password		10696						
ANR	12246	Symbol	conf . mode		10696						
ANR	12247	Symbol	v		10696						
ANR	12248	Symbol	* value -> u . array		10696						
ANR	12249	Symbol	ss_malloc		10696						
ANR	12250	Symbol	obj -> u . object . length		10696						
ANR	12251	Symbol	obj -> u . object . values [ i ] . value		10696						
ANR	12252	Symbol	mode_str		10696						
ANR	12253	Symbol	ss_strndup		10696						
ANR	12254	Symbol	value -> u . object . values [ j ] . name		10696						
ANR	12255	Symbol	strlen		10696						
ANR	12256	Symbol	conf . nameserver		10696						
ANR	12257	Symbol	value -> u . array . values		10696						
ANR	12258	Symbol	conf . dscp [ j ] . dscp		10696						
ANR	12259	Symbol	* obj -> u		10696						
ANR	12260	Symbol	conf . plugin_opts		10696						
ANR	12261	Symbol	strcmp		10696						
ANR	12262	Symbol	settings		10696						
ANR	12263	Symbol	conf . port_password [ j ] . port		10696						
ANR	12264	Symbol	NULL		10696						
ANR	12265	Symbol	value -> u . object . length		10696						
ANR	12266	Symbol	conf . plugin		10696						
ANR	12267	Symbol	conf . remote_addr [ 0 ] . host		10696						
ANR	12268	Symbol	conf . local_port		10696						
ANR	12269	Symbol	value -> u . object . values [ j ] . value		10696						
ANR	12270	Symbol	conf . key		10696						
ANR	12271	Symbol	port		10696						
ANR	12272	Symbol	conf . port_password		10696						
ANR	12273	Symbol	name		10696						
ANR	12274	Symbol	addr_str		10696						
ANR	12275	Symbol	conf . remote_port		10696						
ANR	12276	Symbol	conf . port_password_num		10696						
ANR	12277	Symbol	value -> type		10696						
ANR	12278	Symbol	use_syslog		10696						
ANR	12279	Symbol	to_string		10696						
ANR	12280	Symbol	json_parse_ex		10696						
ANR	12281	Symbol	MAX_CONF_SIZE		10696						
ANR	12282	Symbol	ftell		10696						
ANR	12283	Symbol	* conf		10696						
ANR	12284	Symbol	conf . ipv6_first		10696						
ANR	12285	Symbol	value -> u . object . values		10696						
ANR	12286	Symbol	conf . dscp		10696						
ANR	12287	Symbol	* conf . port_password		10696						
ANR	12288	Symbol	parse_dscp		10696						
ANR	12289	Symbol	conf . local_addr		10696						
ANR	12290	Symbol	value -> u . boolean		10696						
ANR	12291	Symbol	value -> u . array		10696						
ANR	12292	Symbol	value		10696						
ANR	12293	Symbol	SEEK_SET		10696						
ANR	12294	Symbol	* value -> u . object		10696						
ANR	12295	Symbol	* value -> u . array . values		10696						
ANR	12296	Symbol	* obj -> u . object		10696						
ANR	12297	Symbol	* i		10696						
ANR	12298	Symbol	conf . mptcp		10696						
ANR	12299	Symbol	* j		10696						
ANR	12300	Symbol	obj		10696						
ANR	12301	Symbol	* value		10696						
ANR	12302	Symbol	conf . disable_sni		10696						
ANR	12303	Symbol	json_object		10696						
ANR	12304	Symbol	MAX_DSCP_NUM		10696						
