command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2096	File	data/converged/CVE-2017-15924_shadowsocks-libev/aead.c								
ANR	2097	DeclStmt									
ANR	2098	Decl							const char	const char * [ AEAD_CIPHER_NUM ]	supported_aead_ciphers
ANR	2099	DeclStmt									
ANR	2100	Decl							const char	const char * [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_mbedtls
ANR	2101	DeclStmt									
ANR	2102	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_nonce_size
ANR	2103	DeclStmt									
ANR	2104	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_key_size
ANR	2105	DeclStmt									
ANR	2106	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_tag_size
ANR	2107	Function	aead_cipher_encrypt	148:0:4571:5956							
ANR	2108	FunctionDef	"aead_cipher_encrypt (cipher_ctx_t * cipher_ctx , uint8_t * c , size_t * clen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k)"		2107	0					
ANR	2109	CompoundStatement		158:0:4890:5956	2107	0					
ANR	2110	IdentifierDeclStatement	int err = CRYPTO_OK ;	159:4:4896:4936	2107	0	True				
ANR	2111	IdentifierDecl	err = CRYPTO_OK		2107	0					
ANR	2112	IdentifierDeclType	int		2107	0					
ANR	2113	Identifier	err		2107	1					
ANR	2114	AssignmentExpression	err = CRYPTO_OK		2107	2		=			
ANR	2115	Identifier	CRYPTO_OK		2107	0					
ANR	2116	Identifier	CRYPTO_OK		2107	1					
ANR	2117	IdentifierDeclStatement	unsigned long long long_clen = 0 ;	160:4:4942:4974	2107	1	True				
ANR	2118	IdentifierDecl	long_clen = 0		2107	0					
ANR	2119	IdentifierDeclType	unsigned long long		2107	0					
ANR	2120	Identifier	long_clen		2107	1					
ANR	2121	AssignmentExpression	long_clen = 0		2107	2		=			
ANR	2122	Identifier	long_clen		2107	0					
ANR	2123	PrimaryExpression	0		2107	1					
ANR	2124	IdentifierDeclStatement	size_t nlen = cipher_ctx -> cipher -> nonce_len ;	162:4:4981:5024	2107	2	True				
ANR	2125	IdentifierDecl	nlen = cipher_ctx -> cipher -> nonce_len		2107	0					
ANR	2126	IdentifierDeclType	size_t		2107	0					
ANR	2127	Identifier	nlen		2107	1					
ANR	2128	AssignmentExpression	nlen = cipher_ctx -> cipher -> nonce_len		2107	2		=			
ANR	2129	Identifier	nlen		2107	0					
ANR	2130	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		2107	1					
ANR	2131	PtrMemberAccess	cipher_ctx -> cipher		2107	0					
ANR	2132	Identifier	cipher_ctx		2107	0					
ANR	2133	Identifier	cipher		2107	1					
ANR	2134	Identifier	nonce_len		2107	1					
ANR	2135	IdentifierDeclStatement	size_t tlen = cipher_ctx -> cipher -> tag_len ;	163:4:5030:5071	2107	3	True				
ANR	2136	IdentifierDecl	tlen = cipher_ctx -> cipher -> tag_len		2107	0					
ANR	2137	IdentifierDeclType	size_t		2107	0					
ANR	2138	Identifier	tlen		2107	1					
ANR	2139	AssignmentExpression	tlen = cipher_ctx -> cipher -> tag_len		2107	2		=			
ANR	2140	Identifier	tlen		2107	0					
ANR	2141	PtrMemberAccess	cipher_ctx -> cipher -> tag_len		2107	1					
ANR	2142	PtrMemberAccess	cipher_ctx -> cipher		2107	0					
ANR	2143	Identifier	cipher_ctx		2107	0					
ANR	2144	Identifier	cipher		2107	1					
ANR	2145	Identifier	tag_len		2107	1					
ANR	2146	SwitchStatement	switch ( cipher_ctx -> cipher -> method )		2107	4					
ANR	2147	Condition	cipher_ctx -> cipher -> method	165:12:5086:5111	2107	0	True				
ANR	2148	PtrMemberAccess	cipher_ctx -> cipher -> method		2107	0					
ANR	2149	PtrMemberAccess	cipher_ctx -> cipher		2107	0					
ANR	2150	Identifier	cipher_ctx		2107	0					
ANR	2151	Identifier	cipher		2107	1					
ANR	2152	Identifier	method		2107	1					
ANR	2153	CompoundStatement		8:40:223:223	2107	1					
ANR	2154	Label	case AES128GCM :	166:4:5120:5134	2107	0	True				
ANR	2155	Identifier	AES128GCM		2107	0					
ANR	2156	Label	case AES192GCM :	167:4:5140:5154	2107	1	True				
ANR	2157	Identifier	AES192GCM		2107	0					
ANR	2158	Label	case AES256GCM :	168:4:5160:5174	2107	2	True				
ANR	2159	Identifier	AES256GCM		2107	0					
ANR	2160	ExpressionStatement	"err = mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"	169:8:5184:5330	2107	3	True				
ANR	2161	AssignmentExpression	"err = mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"		2107	0		=			
ANR	2162	Identifier	err		2107	0					
ANR	2163	CallExpression	"mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"		2107	1					
ANR	2164	Callee	mbedtls_cipher_auth_encrypt		2107	0					
ANR	2165	Identifier	mbedtls_cipher_auth_encrypt		2107	0					
ANR	2166	ArgumentList	cipher_ctx -> evp		2107	1					
ANR	2167	Argument	cipher_ctx -> evp		2107	0					
ANR	2168	PtrMemberAccess	cipher_ctx -> evp		2107	0					
ANR	2169	Identifier	cipher_ctx		2107	0					
ANR	2170	Identifier	evp		2107	1					
ANR	2171	Argument	n		2107	1					
ANR	2172	Identifier	n		2107	0					
ANR	2173	Argument	nlen		2107	2					
ANR	2174	Identifier	nlen		2107	0					
ANR	2175	Argument	ad		2107	3					
ANR	2176	Identifier	ad		2107	0					
ANR	2177	Argument	adlen		2107	4					
ANR	2178	Identifier	adlen		2107	0					
ANR	2179	Argument	m		2107	5					
ANR	2180	Identifier	m		2107	0					
ANR	2181	Argument	mlen		2107	6					
ANR	2182	Identifier	mlen		2107	0					
ANR	2183	Argument	c		2107	7					
ANR	2184	Identifier	c		2107	0					
ANR	2185	Argument	clen		2107	8					
ANR	2186	Identifier	clen		2107	0					
ANR	2187	Argument	c + mlen		2107	9					
ANR	2188	AdditiveExpression	c + mlen		2107	0		+			
ANR	2189	Identifier	c		2107	0					
ANR	2190	Identifier	mlen		2107	1					
ANR	2191	Argument	tlen		2107	10					
ANR	2192	Identifier	tlen		2107	0					
ANR	2193	ExpressionStatement	* clen += tlen	171:8:5340:5353	2107	4	True				
ANR	2194	AssignmentExpression	* clen += tlen		2107	0		+=			
ANR	2195	UnaryOperationExpression	* clen		2107	0					
ANR	2196	UnaryOperator	*		2107	0					
ANR	2197	Identifier	clen		2107	1					
ANR	2198	Identifier	tlen		2107	1					
ANR	2199	BreakStatement	break ;	172:8:5363:5368	2107	5	True				
ANR	2200	Label	case CHACHA20POLY1305IETF :	173:4:5374:5399	2107	6	True				
ANR	2201	Identifier	CHACHA20POLY1305IETF		2107	0					
ANR	2202	ExpressionStatement	"err = crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"	174:8:5409:5559	2107	7	True				
ANR	2203	AssignmentExpression	"err = crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		2107	0		=			
ANR	2204	Identifier	err		2107	0					
ANR	2205	CallExpression	"crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		2107	1					
ANR	2206	Callee	crypto_aead_chacha20poly1305_ietf_encrypt		2107	0					
ANR	2207	Identifier	crypto_aead_chacha20poly1305_ietf_encrypt		2107	0					
ANR	2208	ArgumentList	c		2107	1					
ANR	2209	Argument	c		2107	0					
ANR	2210	Identifier	c		2107	0					
ANR	2211	Argument	& long_clen		2107	1					
ANR	2212	UnaryOperationExpression	& long_clen		2107	0					
ANR	2213	UnaryOperator	&		2107	0					
ANR	2214	Identifier	long_clen		2107	1					
ANR	2215	Argument	m		2107	2					
ANR	2216	Identifier	m		2107	0					
ANR	2217	Argument	mlen		2107	3					
ANR	2218	Identifier	mlen		2107	0					
ANR	2219	Argument	ad		2107	4					
ANR	2220	Identifier	ad		2107	0					
ANR	2221	Argument	adlen		2107	5					
ANR	2222	Identifier	adlen		2107	0					
ANR	2223	Argument	NULL		2107	6					
ANR	2224	Identifier	NULL		2107	0					
ANR	2225	Argument	n		2107	7					
ANR	2226	Identifier	n		2107	0					
ANR	2227	Argument	k		2107	8					
ANR	2228	Identifier	k		2107	0					
ANR	2229	ExpressionStatement	* clen = ( size_t ) long_clen	176:8:5569:5594	2107	8	True				
ANR	2230	AssignmentExpression	* clen = ( size_t ) long_clen		2107	0		=			
ANR	2231	UnaryOperationExpression	* clen		2107	0					
ANR	2232	UnaryOperator	*		2107	0					
ANR	2233	Identifier	clen		2107	1					
ANR	2234	CastExpression	( size_t ) long_clen		2107	1					
ANR	2235	CastTarget	size_t		2107	0					
ANR	2236	Identifier	long_clen		2107	1					
ANR	2237	BreakStatement	break ;	177:8:5604:5609	2107	9	True				
ANR	2238	Label	case XCHACHA20POLY1305IETF :	179:4:5644:5670	2107	10	True				
ANR	2239	Identifier	XCHACHA20POLY1305IETF		2107	0					
ANR	2240	ExpressionStatement	"err = crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"	180:8:5680:5832	2107	11	True				
ANR	2241	AssignmentExpression	"err = crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		2107	0		=			
ANR	2242	Identifier	err		2107	0					
ANR	2243	CallExpression	"crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		2107	1					
ANR	2244	Callee	crypto_aead_xchacha20poly1305_ietf_encrypt		2107	0					
ANR	2245	Identifier	crypto_aead_xchacha20poly1305_ietf_encrypt		2107	0					
ANR	2246	ArgumentList	c		2107	1					
ANR	2247	Argument	c		2107	0					
ANR	2248	Identifier	c		2107	0					
ANR	2249	Argument	& long_clen		2107	1					
ANR	2250	UnaryOperationExpression	& long_clen		2107	0					
ANR	2251	UnaryOperator	&		2107	0					
ANR	2252	Identifier	long_clen		2107	1					
ANR	2253	Argument	m		2107	2					
ANR	2254	Identifier	m		2107	0					
ANR	2255	Argument	mlen		2107	3					
ANR	2256	Identifier	mlen		2107	0					
ANR	2257	Argument	ad		2107	4					
ANR	2258	Identifier	ad		2107	0					
ANR	2259	Argument	adlen		2107	5					
ANR	2260	Identifier	adlen		2107	0					
ANR	2261	Argument	NULL		2107	6					
ANR	2262	Identifier	NULL		2107	0					
ANR	2263	Argument	n		2107	7					
ANR	2264	Identifier	n		2107	0					
ANR	2265	Argument	k		2107	8					
ANR	2266	Identifier	k		2107	0					
ANR	2267	ExpressionStatement	* clen = ( size_t ) long_clen	182:8:5842:5867	2107	12	True				
ANR	2268	AssignmentExpression	* clen = ( size_t ) long_clen		2107	0		=			
ANR	2269	UnaryOperationExpression	* clen		2107	0					
ANR	2270	UnaryOperator	*		2107	0					
ANR	2271	Identifier	clen		2107	1					
ANR	2272	CastExpression	( size_t ) long_clen		2107	1					
ANR	2273	CastTarget	size_t		2107	0					
ANR	2274	Identifier	long_clen		2107	1					
ANR	2275	BreakStatement	break ;	183:8:5877:5882	2107	13	True				
ANR	2276	Label	default :	185:4:5895:5902	2107	14	True				
ANR	2277	Identifier	default		2107	0					
ANR	2278	ReturnStatement	return CRYPTO_ERROR ;	186:8:5912:5931	2107	15	True				
ANR	2279	Identifier	CRYPTO_ERROR		2107	0					
ANR	2280	ReturnStatement	return err ;	189:4:5944:5954	2107	5	True				
ANR	2281	Identifier	err		2107	0					
ANR	2282	ReturnType	static int		2107	1					
ANR	2283	Identifier	aead_cipher_encrypt		2107	2					
ANR	2284	ParameterList	"cipher_ctx_t * cipher_ctx , uint8_t * c , size_t * clen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k"		2107	3					
ANR	2285	Parameter	cipher_ctx_t * cipher_ctx	149:20:4602:4625	2107	0	True				
ANR	2286	ParameterType	cipher_ctx_t *		2107	0					
ANR	2287	Identifier	cipher_ctx		2107	1					
ANR	2288	Parameter	uint8_t * c	150:20:4648:4657	2107	1	True				
ANR	2289	ParameterType	uint8_t *		2107	0					
ANR	2290	Identifier	c		2107	1					
ANR	2291	Parameter	size_t * clen	151:20:4680:4691	2107	2	True				
ANR	2292	ParameterType	size_t *		2107	0					
ANR	2293	Identifier	clen		2107	1					
ANR	2294	Parameter	uint8_t * m	152:20:4714:4723	2107	3	True				
ANR	2295	ParameterType	uint8_t *		2107	0					
ANR	2296	Identifier	m		2107	1					
ANR	2297	Parameter	size_t mlen	153:20:4746:4756	2107	4	True				
ANR	2298	ParameterType	size_t		2107	0					
ANR	2299	Identifier	mlen		2107	1					
ANR	2300	Parameter	uint8_t * ad	154:20:4779:4789	2107	5	True				
ANR	2301	ParameterType	uint8_t *		2107	0					
ANR	2302	Identifier	ad		2107	1					
ANR	2303	Parameter	size_t adlen	155:20:4812:4823	2107	6	True				
ANR	2304	ParameterType	size_t		2107	0					
ANR	2305	Identifier	adlen		2107	1					
ANR	2306	Parameter	uint8_t * n	156:20:4846:4855	2107	7	True				
ANR	2307	ParameterType	uint8_t *		2107	0					
ANR	2308	Identifier	n		2107	1					
ANR	2309	Parameter	uint8_t * k	157:20:4878:4887	2107	8	True				
ANR	2310	ParameterType	uint8_t *		2107	0					
ANR	2311	Identifier	k		2107	1					
ANR	2312	CFGEntryNode	ENTRY		2107		True				
ANR	2313	CFGExitNode	EXIT		2107		True				
ANR	2314	Symbol	& long_clen		2107						
ANR	2315	Symbol	cipher_ctx -> cipher		2107						
ANR	2316	Symbol	CRYPTO_ERROR		2107						
ANR	2317	Symbol	CRYPTO_OK		2107						
ANR	2318	Symbol	* * cipher_ctx		2107						
ANR	2319	Symbol	cipher_ctx -> cipher -> nonce_len		2107						
ANR	2320	Symbol	nlen		2107						
ANR	2321	Symbol	* clen		2107						
ANR	2322	Symbol	adlen		2107						
ANR	2323	Symbol	tlen		2107						
ANR	2324	Symbol	cipher_ctx -> cipher -> tag_len		2107						
ANR	2325	Symbol	crypto_aead_chacha20poly1305_ietf_encrypt		2107						
ANR	2326	Symbol	* cipher_ctx -> cipher		2107						
ANR	2327	Symbol	cipher_ctx -> cipher -> method		2107						
ANR	2328	Symbol	crypto_aead_xchacha20poly1305_ietf_encrypt		2107						
ANR	2329	Symbol	cipher_ctx		2107						
ANR	2330	Symbol	c		2107						
ANR	2331	Symbol	ad		2107						
ANR	2332	Symbol	NULL		2107						
ANR	2333	Symbol	err		2107						
ANR	2334	Symbol	* cipher_ctx		2107						
ANR	2335	Symbol	k		2107						
ANR	2336	Symbol	m		2107						
ANR	2337	Symbol	n		2107						
ANR	2338	Symbol	long_clen		2107						
ANR	2339	Symbol	cipher_ctx -> evp		2107						
ANR	2340	Symbol	mlen		2107						
ANR	2341	Symbol	clen		2107						
ANR	2342	Symbol	mbedtls_cipher_auth_encrypt		2107						
ANR	2343	Function	aead_cipher_decrypt	192:0:5959:7354							
ANR	2344	FunctionDef	"aead_cipher_decrypt (cipher_ctx_t * cipher_ctx , uint8_t * p , size_t * plen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k)"		2343	0					
ANR	2345	CompoundStatement		198:0:6198:7354	2343	0					
ANR	2346	IdentifierDeclStatement	int err = CRYPTO_ERROR ;	199:4:6204:6247	2343	0	True				
ANR	2347	IdentifierDecl	err = CRYPTO_ERROR		2343	0					
ANR	2348	IdentifierDeclType	int		2343	0					
ANR	2349	Identifier	err		2343	1					
ANR	2350	AssignmentExpression	err = CRYPTO_ERROR		2343	2		=			
ANR	2351	Identifier	CRYPTO_ERROR		2343	0					
ANR	2352	Identifier	CRYPTO_ERROR		2343	1					
ANR	2353	IdentifierDeclStatement	unsigned long long long_plen = 0 ;	200:4:6253:6285	2343	1	True				
ANR	2354	IdentifierDecl	long_plen = 0		2343	0					
ANR	2355	IdentifierDeclType	unsigned long long		2343	0					
ANR	2356	Identifier	long_plen		2343	1					
ANR	2357	AssignmentExpression	long_plen = 0		2343	2		=			
ANR	2358	Identifier	long_plen		2343	0					
ANR	2359	PrimaryExpression	0		2343	1					
ANR	2360	IdentifierDeclStatement	size_t nlen = cipher_ctx -> cipher -> nonce_len ;	202:4:6292:6335	2343	2	True				
ANR	2361	IdentifierDecl	nlen = cipher_ctx -> cipher -> nonce_len		2343	0					
ANR	2362	IdentifierDeclType	size_t		2343	0					
ANR	2363	Identifier	nlen		2343	1					
ANR	2364	AssignmentExpression	nlen = cipher_ctx -> cipher -> nonce_len		2343	2		=			
ANR	2365	Identifier	nlen		2343	0					
ANR	2366	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		2343	1					
ANR	2367	PtrMemberAccess	cipher_ctx -> cipher		2343	0					
ANR	2368	Identifier	cipher_ctx		2343	0					
ANR	2369	Identifier	cipher		2343	1					
ANR	2370	Identifier	nonce_len		2343	1					
ANR	2371	IdentifierDeclStatement	size_t tlen = cipher_ctx -> cipher -> tag_len ;	203:4:6341:6382	2343	3	True				
ANR	2372	IdentifierDecl	tlen = cipher_ctx -> cipher -> tag_len		2343	0					
ANR	2373	IdentifierDeclType	size_t		2343	0					
ANR	2374	Identifier	tlen		2343	1					
ANR	2375	AssignmentExpression	tlen = cipher_ctx -> cipher -> tag_len		2343	2		=			
ANR	2376	Identifier	tlen		2343	0					
ANR	2377	PtrMemberAccess	cipher_ctx -> cipher -> tag_len		2343	1					
ANR	2378	PtrMemberAccess	cipher_ctx -> cipher		2343	0					
ANR	2379	Identifier	cipher_ctx		2343	0					
ANR	2380	Identifier	cipher		2343	1					
ANR	2381	Identifier	tag_len		2343	1					
ANR	2382	SwitchStatement	switch ( cipher_ctx -> cipher -> method )		2343	4					
ANR	2383	Condition	cipher_ctx -> cipher -> method	205:12:6397:6422	2343	0	True				
ANR	2384	PtrMemberAccess	cipher_ctx -> cipher -> method		2343	0					
ANR	2385	PtrMemberAccess	cipher_ctx -> cipher		2343	0					
ANR	2386	Identifier	cipher_ctx		2343	0					
ANR	2387	Identifier	cipher		2343	1					
ANR	2388	Identifier	method		2343	1					
ANR	2389	CompoundStatement		8:40:226:226	2343	1					
ANR	2390	Label	case AES128GCM :	206:4:6431:6445	2343	0	True				
ANR	2391	Identifier	AES128GCM		2343	0					
ANR	2392	Label	case AES192GCM :	207:4:6451:6465	2343	1	True				
ANR	2393	Identifier	AES192GCM		2343	0					
ANR	2394	Label	case AES256GCM :	208:4:6471:6485	2343	2	True				
ANR	2395	Identifier	AES256GCM		2343	0					
ANR	2396	ExpressionStatement	"err = mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"	209:8:6495:6655	2343	3	True				
ANR	2397	AssignmentExpression	"err = mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"		2343	0		=			
ANR	2398	Identifier	err		2343	0					
ANR	2399	CallExpression	"mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"		2343	1					
ANR	2400	Callee	mbedtls_cipher_auth_decrypt		2343	0					
ANR	2401	Identifier	mbedtls_cipher_auth_decrypt		2343	0					
ANR	2402	ArgumentList	cipher_ctx -> evp		2343	1					
ANR	2403	Argument	cipher_ctx -> evp		2343	0					
ANR	2404	PtrMemberAccess	cipher_ctx -> evp		2343	0					
ANR	2405	Identifier	cipher_ctx		2343	0					
ANR	2406	Identifier	evp		2343	1					
ANR	2407	Argument	n		2343	1					
ANR	2408	Identifier	n		2343	0					
ANR	2409	Argument	nlen		2343	2					
ANR	2410	Identifier	nlen		2343	0					
ANR	2411	Argument	ad		2343	3					
ANR	2412	Identifier	ad		2343	0					
ANR	2413	Argument	adlen		2343	4					
ANR	2414	Identifier	adlen		2343	0					
ANR	2415	Argument	m		2343	5					
ANR	2416	Identifier	m		2343	0					
ANR	2417	Argument	mlen - tlen		2343	6					
ANR	2418	AdditiveExpression	mlen - tlen		2343	0		-			
ANR	2419	Identifier	mlen		2343	0					
ANR	2420	Identifier	tlen		2343	1					
ANR	2421	Argument	p		2343	7					
ANR	2422	Identifier	p		2343	0					
ANR	2423	Argument	plen		2343	8					
ANR	2424	Identifier	plen		2343	0					
ANR	2425	Argument	m + mlen - tlen		2343	9					
ANR	2426	AdditiveExpression	m + mlen - tlen		2343	0		+			
ANR	2427	Identifier	m		2343	0					
ANR	2428	AdditiveExpression	mlen - tlen		2343	1		-			
ANR	2429	Identifier	mlen		2343	0					
ANR	2430	Identifier	tlen		2343	1					
ANR	2431	Argument	tlen		2343	10					
ANR	2432	Identifier	tlen		2343	0					
ANR	2433	BreakStatement	break ;	211:8:6665:6670	2343	4	True				
ANR	2434	Label	case CHACHA20POLY1305IETF :	212:4:6676:6701	2343	5	True				
ANR	2435	Identifier	CHACHA20POLY1305IETF		2343	0					
ANR	2436	ExpressionStatement	"err = crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"	213:8:6711:6861	2343	6	True				
ANR	2437	AssignmentExpression	"err = crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		2343	0		=			
ANR	2438	Identifier	err		2343	0					
ANR	2439	CallExpression	"crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		2343	1					
ANR	2440	Callee	crypto_aead_chacha20poly1305_ietf_decrypt		2343	0					
ANR	2441	Identifier	crypto_aead_chacha20poly1305_ietf_decrypt		2343	0					
ANR	2442	ArgumentList	p		2343	1					
ANR	2443	Argument	p		2343	0					
ANR	2444	Identifier	p		2343	0					
ANR	2445	Argument	& long_plen		2343	1					
ANR	2446	UnaryOperationExpression	& long_plen		2343	0					
ANR	2447	UnaryOperator	&		2343	0					
ANR	2448	Identifier	long_plen		2343	1					
ANR	2449	Argument	NULL		2343	2					
ANR	2450	Identifier	NULL		2343	0					
ANR	2451	Argument	m		2343	3					
ANR	2452	Identifier	m		2343	0					
ANR	2453	Argument	mlen		2343	4					
ANR	2454	Identifier	mlen		2343	0					
ANR	2455	Argument	ad		2343	5					
ANR	2456	Identifier	ad		2343	0					
ANR	2457	Argument	adlen		2343	6					
ANR	2458	Identifier	adlen		2343	0					
ANR	2459	Argument	n		2343	7					
ANR	2460	Identifier	n		2343	0					
ANR	2461	Argument	k		2343	8					
ANR	2462	Identifier	k		2343	0					
ANR	2463	ExpressionStatement	* plen = ( size_t ) long_plen	215:8:6871:6896	2343	7	True				
ANR	2464	AssignmentExpression	* plen = ( size_t ) long_plen		2343	0		=			
ANR	2465	UnaryOperationExpression	* plen		2343	0					
ANR	2466	UnaryOperator	*		2343	0					
ANR	2467	Identifier	plen		2343	1					
ANR	2468	CastExpression	( size_t ) long_plen		2343	1					
ANR	2469	CastTarget	size_t		2343	0					
ANR	2470	Identifier	long_plen		2343	1					
ANR	2471	BreakStatement	break ;	216:8:6954:6959	2343	8	True				
ANR	2472	Label	case XCHACHA20POLY1305IETF :	218:4:6994:7020	2343	9	True				
ANR	2473	Identifier	XCHACHA20POLY1305IETF		2343	0					
ANR	2474	ExpressionStatement	"err = crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"	219:8:7030:7182	2343	10	True				
ANR	2475	AssignmentExpression	"err = crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		2343	0		=			
ANR	2476	Identifier	err		2343	0					
ANR	2477	CallExpression	"crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		2343	1					
ANR	2478	Callee	crypto_aead_xchacha20poly1305_ietf_decrypt		2343	0					
ANR	2479	Identifier	crypto_aead_xchacha20poly1305_ietf_decrypt		2343	0					
ANR	2480	ArgumentList	p		2343	1					
ANR	2481	Argument	p		2343	0					
ANR	2482	Identifier	p		2343	0					
ANR	2483	Argument	& long_plen		2343	1					
ANR	2484	UnaryOperationExpression	& long_plen		2343	0					
ANR	2485	UnaryOperator	&		2343	0					
ANR	2486	Identifier	long_plen		2343	1					
ANR	2487	Argument	NULL		2343	2					
ANR	2488	Identifier	NULL		2343	0					
ANR	2489	Argument	m		2343	3					
ANR	2490	Identifier	m		2343	0					
ANR	2491	Argument	mlen		2343	4					
ANR	2492	Identifier	mlen		2343	0					
ANR	2493	Argument	ad		2343	5					
ANR	2494	Identifier	ad		2343	0					
ANR	2495	Argument	adlen		2343	6					
ANR	2496	Identifier	adlen		2343	0					
ANR	2497	Argument	n		2343	7					
ANR	2498	Identifier	n		2343	0					
ANR	2499	Argument	k		2343	8					
ANR	2500	Identifier	k		2343	0					
ANR	2501	ExpressionStatement	* plen = ( size_t ) long_plen	221:8:7192:7217	2343	11	True				
ANR	2502	AssignmentExpression	* plen = ( size_t ) long_plen		2343	0		=			
ANR	2503	UnaryOperationExpression	* plen		2343	0					
ANR	2504	UnaryOperator	*		2343	0					
ANR	2505	Identifier	plen		2343	1					
ANR	2506	CastExpression	( size_t ) long_plen		2343	1					
ANR	2507	CastTarget	size_t		2343	0					
ANR	2508	Identifier	long_plen		2343	1					
ANR	2509	BreakStatement	break ;	222:8:7275:7280	2343	12	True				
ANR	2510	Label	default :	224:4:7293:7300	2343	13	True				
ANR	2511	Identifier	default		2343	0					
ANR	2512	ReturnStatement	return CRYPTO_ERROR ;	225:8:7310:7329	2343	14	True				
ANR	2513	Identifier	CRYPTO_ERROR		2343	0					
ANR	2514	ReturnStatement	return err ;	228:4:7342:7352	2343	5	True				
ANR	2515	Identifier	err		2343	0					
ANR	2516	ReturnType	static int		2343	1					
ANR	2517	Identifier	aead_cipher_decrypt		2343	2					
ANR	2518	ParameterList	"cipher_ctx_t * cipher_ctx , uint8_t * p , size_t * plen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k"		2343	3					
ANR	2519	Parameter	cipher_ctx_t * cipher_ctx	193:20:5990:6013	2343	0	True				
ANR	2520	ParameterType	cipher_ctx_t *		2343	0					
ANR	2521	Identifier	cipher_ctx		2343	1					
ANR	2522	Parameter	uint8_t * p	194:20:6036:6045	2343	1	True				
ANR	2523	ParameterType	uint8_t *		2343	0					
ANR	2524	Identifier	p		2343	1					
ANR	2525	Parameter	size_t * plen	194:32:6048:6059	2343	2	True				
ANR	2526	ParameterType	size_t *		2343	0					
ANR	2527	Identifier	plen		2343	1					
ANR	2528	Parameter	uint8_t * m	195:20:6082:6091	2343	3	True				
ANR	2529	ParameterType	uint8_t *		2343	0					
ANR	2530	Identifier	m		2343	1					
ANR	2531	Parameter	size_t mlen	195:32:6094:6104	2343	4	True				
ANR	2532	ParameterType	size_t		2343	0					
ANR	2533	Identifier	mlen		2343	1					
ANR	2534	Parameter	uint8_t * ad	196:20:6127:6137	2343	5	True				
ANR	2535	ParameterType	uint8_t *		2343	0					
ANR	2536	Identifier	ad		2343	1					
ANR	2537	Parameter	size_t adlen	196:33:6140:6151	2343	6	True				
ANR	2538	ParameterType	size_t		2343	0					
ANR	2539	Identifier	adlen		2343	1					
ANR	2540	Parameter	uint8_t * n	197:20:6174:6183	2343	7	True				
ANR	2541	ParameterType	uint8_t *		2343	0					
ANR	2542	Identifier	n		2343	1					
ANR	2543	Parameter	uint8_t * k	197:32:6186:6195	2343	8	True				
ANR	2544	ParameterType	uint8_t *		2343	0					
ANR	2545	Identifier	k		2343	1					
ANR	2546	CFGEntryNode	ENTRY		2343		True				
ANR	2547	CFGExitNode	EXIT		2343		True				
ANR	2548	Symbol	cipher_ctx -> cipher		2343						
ANR	2549	Symbol	CRYPTO_ERROR		2343						
ANR	2550	Symbol	mbedtls_cipher_auth_decrypt		2343						
ANR	2551	Symbol	& long_plen		2343						
ANR	2552	Symbol	crypto_aead_xchacha20poly1305_ietf_decrypt		2343						
ANR	2553	Symbol	* * cipher_ctx		2343						
ANR	2554	Symbol	plen		2343						
ANR	2555	Symbol	cipher_ctx -> cipher -> nonce_len		2343						
ANR	2556	Symbol	nlen		2343						
ANR	2557	Symbol	adlen		2343						
ANR	2558	Symbol	tlen		2343						
ANR	2559	Symbol	cipher_ctx -> cipher -> tag_len		2343						
ANR	2560	Symbol	* cipher_ctx -> cipher		2343						
ANR	2561	Symbol	cipher_ctx -> cipher -> method		2343						
ANR	2562	Symbol	crypto_aead_chacha20poly1305_ietf_decrypt		2343						
ANR	2563	Symbol	cipher_ctx		2343						
ANR	2564	Symbol	ad		2343						
ANR	2565	Symbol	NULL		2343						
ANR	2566	Symbol	err		2343						
ANR	2567	Symbol	* cipher_ctx		2343						
ANR	2568	Symbol	long_plen		2343						
ANR	2569	Symbol	k		2343						
ANR	2570	Symbol	m		2343						
ANR	2571	Symbol	n		2343						
ANR	2572	Symbol	p		2343						
ANR	2573	Symbol	cipher_ctx -> evp		2343						
ANR	2574	Symbol	* plen		2343						
ANR	2575	Symbol	mlen		2343						
ANR	2576	Function	aead_get_cipher_type	235:0:7443:8136							
ANR	2577	FunctionDef	aead_get_cipher_type (int method)		2576	0					
ANR	2578	CompoundStatement		237:0:7496:8136	2576	0					
ANR	2579	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		2576	0					
ANR	2580	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	238:8:7506:7552	2576	0	True				
ANR	2581	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		2576	0		||			
ANR	2582	RelationalExpression	method < AES128GCM		2576	0		<			
ANR	2583	Identifier	method		2576	0					
ANR	2584	Identifier	AES128GCM		2576	1					
ANR	2585	RelationalExpression	method >= AEAD_CIPHER_NUM		2576	1		>=			
ANR	2586	Identifier	method		2576	0					
ANR	2587	Identifier	AEAD_CIPHER_NUM		2576	1					
ANR	2588	CompoundStatement		2:57:58:58	2576	1					
ANR	2589	ExpressionStatement	"LOGE ( ""aead_get_cipher_type(): Illegal method"" )"	239:8:7565:7611	2576	0	True				
ANR	2590	CallExpression	"LOGE ( ""aead_get_cipher_type(): Illegal method"" )"		2576	0					
ANR	2591	Callee	LOGE		2576	0					
ANR	2592	Identifier	LOGE		2576	0					
ANR	2593	ArgumentList	"""aead_get_cipher_type(): Illegal method"""		2576	1					
ANR	2594	Argument	"""aead_get_cipher_type(): Illegal method"""		2576	0					
ANR	2595	PrimaryExpression	"""aead_get_cipher_type(): Illegal method"""		2576	0					
ANR	2596	ReturnStatement	return NULL ;	240:8:7621:7632	2576	1	True				
ANR	2597	Identifier	NULL		2576	0					
ANR	2598	IfStatement	if ( method >= CHACHA20POLY1305IETF )		2576	1					
ANR	2599	Condition	method >= CHACHA20POLY1305IETF	244:8:7703:7732	2576	0	True				
ANR	2600	RelationalExpression	method >= CHACHA20POLY1305IETF		2576	0		>=			
ANR	2601	Identifier	method		2576	0					
ANR	2602	Identifier	CHACHA20POLY1305IETF		2576	1					
ANR	2603	CompoundStatement		8:40:238:238	2576	1					
ANR	2604	ReturnStatement	return NULL ;	245:8:7745:7756	2576	0	True				
ANR	2605	Identifier	NULL		2576	0					
ANR	2606	IdentifierDeclStatement	const char * ciphername = supported_aead_ciphers [ method ] ;	248:4:7769:7825	2576	2	True				
ANR	2607	IdentifierDecl	* ciphername = supported_aead_ciphers [ method ]		2576	0					
ANR	2608	IdentifierDeclType	const char *		2576	0					
ANR	2609	Identifier	ciphername		2576	1					
ANR	2610	AssignmentExpression	* ciphername = supported_aead_ciphers [ method ]		2576	2		=			
ANR	2611	Identifier	ciphername		2576	0					
ANR	2612	ArrayIndexing	supported_aead_ciphers [ method ]		2576	1					
ANR	2613	Identifier	supported_aead_ciphers		2576	0					
ANR	2614	Identifier	method		2576	1					
ANR	2615	IdentifierDeclStatement	const char * mbedtlsname = supported_aead_ciphers_mbedtls [ method ] ;	249:4:7831:7895	2576	3	True				
ANR	2616	IdentifierDecl	* mbedtlsname = supported_aead_ciphers_mbedtls [ method ]		2576	0					
ANR	2617	IdentifierDeclType	const char *		2576	0					
ANR	2618	Identifier	mbedtlsname		2576	1					
ANR	2619	AssignmentExpression	* mbedtlsname = supported_aead_ciphers_mbedtls [ method ]		2576	2		=			
ANR	2620	Identifier	mbedtlsname		2576	0					
ANR	2621	ArrayIndexing	supported_aead_ciphers_mbedtls [ method ]		2576	1					
ANR	2622	Identifier	supported_aead_ciphers_mbedtls		2576	0					
ANR	2623	Identifier	method		2576	1					
ANR	2624	IfStatement	"if ( strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0 )"		2576	4					
ANR	2625	Condition	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0"	250:8:7905:7948	2576	0	True				
ANR	2626	EqualityExpression	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0"		2576	0		==			
ANR	2627	CallExpression	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED )"		2576	0					
ANR	2628	Callee	strcmp		2576	0					
ANR	2629	Identifier	strcmp		2576	0					
ANR	2630	ArgumentList	mbedtlsname		2576	1					
ANR	2631	Argument	mbedtlsname		2576	0					
ANR	2632	Identifier	mbedtlsname		2576	0					
ANR	2633	Argument	CIPHER_UNSUPPORTED		2576	1					
ANR	2634	Identifier	CIPHER_UNSUPPORTED		2576	0					
ANR	2635	PrimaryExpression	0		2576	1					
ANR	2636	CompoundStatement		14:54:454:454	2576	1					
ANR	2637	ExpressionStatement	"LOGE ( ""Cipher %s currently is not supported by mbed TLS library"" , ciphername )"	251:8:7961:8050	2576	0	True				
ANR	2638	CallExpression	"LOGE ( ""Cipher %s currently is not supported by mbed TLS library"" , ciphername )"		2576	0					
ANR	2639	Callee	LOGE		2576	0					
ANR	2640	Identifier	LOGE		2576	0					
ANR	2641	ArgumentList	"""Cipher %s currently is not supported by mbed TLS library"""		2576	1					
ANR	2642	Argument	"""Cipher %s currently is not supported by mbed TLS library"""		2576	0					
ANR	2643	PrimaryExpression	"""Cipher %s currently is not supported by mbed TLS library"""		2576	0					
ANR	2644	Argument	ciphername		2576	1					
ANR	2645	Identifier	ciphername		2576	0					
ANR	2646	ReturnStatement	return NULL ;	253:8:8060:8071	2576	1	True				
ANR	2647	Identifier	NULL		2576	0					
ANR	2648	ReturnStatement	return mbedtls_cipher_info_from_string ( mbedtlsname ) ;	255:4:8083:8134	2576	5	True				
ANR	2649	CallExpression	mbedtls_cipher_info_from_string ( mbedtlsname )		2576	0					
ANR	2650	Callee	mbedtls_cipher_info_from_string		2576	0					
ANR	2651	Identifier	mbedtls_cipher_info_from_string		2576	0					
ANR	2652	ArgumentList	mbedtlsname		2576	1					
ANR	2653	Argument	mbedtlsname		2576	0					
ANR	2654	Identifier	mbedtlsname		2576	0					
ANR	2655	ReturnType	const cipher_kt_t *		2576	1					
ANR	2656	Identifier	aead_get_cipher_type		2576	2					
ANR	2657	ParameterList	int method		2576	3					
ANR	2658	Parameter	int method	236:21:7484:7493	2576	0	True				
ANR	2659	ParameterType	int		2576	0					
ANR	2660	Identifier	method		2576	1					
ANR	2661	CFGEntryNode	ENTRY		2576		True				
ANR	2662	CFGExitNode	EXIT		2576		True				
ANR	2663	Symbol	strcmp		2576						
ANR	2664	Symbol	ciphername		2576						
ANR	2665	Symbol	NULL		2576						
ANR	2666	Symbol	method		2576						
ANR	2667	Symbol	* supported_aead_ciphers		2576						
ANR	2668	Symbol	AES128GCM		2576						
ANR	2669	Symbol	* method		2576						
ANR	2670	Symbol	mbedtlsname		2576						
ANR	2671	Symbol	mbedtls_cipher_info_from_string		2576						
ANR	2672	Symbol	CIPHER_UNSUPPORTED		2576						
ANR	2673	Symbol	AEAD_CIPHER_NUM		2576						
ANR	2674	Symbol	supported_aead_ciphers_mbedtls		2576						
ANR	2675	Symbol	CHACHA20POLY1305IETF		2576						
ANR	2676	Symbol	supported_aead_ciphers		2576						
ANR	2677	Symbol	* supported_aead_ciphers_mbedtls		2576						
ANR	2678	Function	aead_cipher_ctx_set_key	258:0:8139:9236							
ANR	2679	FunctionDef	"aead_cipher_ctx_set_key (cipher_ctx_t * cipher_ctx , int enc)"		2678	0					
ANR	2680	CompoundStatement		260:0:8210:9236	2678	0					
ANR	2681	IdentifierDeclStatement	"const digest_type_t * md = mbedtls_md_info_from_string ( ""SHA1"" ) ;"	261:4:8216:8277	2678	0	True				
ANR	2682	IdentifierDecl	"* md = mbedtls_md_info_from_string ( ""SHA1"" )"		2678	0					
ANR	2683	IdentifierDeclType	const digest_type_t *		2678	0					
ANR	2684	Identifier	md		2678	1					
ANR	2685	AssignmentExpression	"* md = mbedtls_md_info_from_string ( ""SHA1"" )"		2678	2		=			
ANR	2686	Identifier	md		2678	0					
ANR	2687	CallExpression	"mbedtls_md_info_from_string ( ""SHA1"" )"		2678	1					
ANR	2688	Callee	mbedtls_md_info_from_string		2678	0					
ANR	2689	Identifier	mbedtls_md_info_from_string		2678	0					
ANR	2690	ArgumentList	"""SHA1"""		2678	1					
ANR	2691	Argument	"""SHA1"""		2678	0					
ANR	2692	PrimaryExpression	"""SHA1"""		2678	0					
ANR	2693	IfStatement	if ( md == NULL )		2678	1					
ANR	2694	Condition	md == NULL	262:8:8287:8296	2678	0	True				
ANR	2695	EqualityExpression	md == NULL		2678	0		==			
ANR	2696	Identifier	md		2678	0					
ANR	2697	Identifier	NULL		2678	1					
ANR	2698	CompoundStatement		3:20:88:88	2678	1					
ANR	2699	ExpressionStatement	"FATAL ( ""SHA1 Digest not found in crypto library"" )"	263:8:8309:8357	2678	0	True				
ANR	2700	CallExpression	"FATAL ( ""SHA1 Digest not found in crypto library"" )"		2678	0					
ANR	2701	Callee	FATAL		2678	0					
ANR	2702	Identifier	FATAL		2678	0					
ANR	2703	ArgumentList	"""SHA1 Digest not found in crypto library"""		2678	1					
ANR	2704	Argument	"""SHA1 Digest not found in crypto library"""		2678	0					
ANR	2705	PrimaryExpression	"""SHA1 Digest not found in crypto library"""		2678	0					
ANR	2706	IdentifierDeclStatement	"int err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len ) ;"	266:4:8370:8636	2678	2	True				
ANR	2707	IdentifierDecl	"err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		2678	0					
ANR	2708	IdentifierDeclType	int		2678	0					
ANR	2709	Identifier	err		2678	1					
ANR	2710	AssignmentExpression	"err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		2678	2		=			
ANR	2711	Identifier	err		2678	0					
ANR	2712	CallExpression	"crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		2678	1					
ANR	2713	Callee	crypto_hkdf		2678	0					
ANR	2714	Identifier	crypto_hkdf		2678	0					
ANR	2715	ArgumentList	md		2678	1					
ANR	2716	Argument	md		2678	0					
ANR	2717	Identifier	md		2678	0					
ANR	2718	Argument	cipher_ctx -> salt		2678	1					
ANR	2719	PtrMemberAccess	cipher_ctx -> salt		2678	0					
ANR	2720	Identifier	cipher_ctx		2678	0					
ANR	2721	Identifier	salt		2678	1					
ANR	2722	Argument	cipher_ctx -> cipher -> key_len		2678	2					
ANR	2723	PtrMemberAccess	cipher_ctx -> cipher -> key_len		2678	0					
ANR	2724	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2725	Identifier	cipher_ctx		2678	0					
ANR	2726	Identifier	cipher		2678	1					
ANR	2727	Identifier	key_len		2678	1					
ANR	2728	Argument	cipher_ctx -> cipher -> key		2678	3					
ANR	2729	PtrMemberAccess	cipher_ctx -> cipher -> key		2678	0					
ANR	2730	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2731	Identifier	cipher_ctx		2678	0					
ANR	2732	Identifier	cipher		2678	1					
ANR	2733	Identifier	key		2678	1					
ANR	2734	Argument	cipher_ctx -> cipher -> key_len		2678	4					
ANR	2735	PtrMemberAccess	cipher_ctx -> cipher -> key_len		2678	0					
ANR	2736	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2737	Identifier	cipher_ctx		2678	0					
ANR	2738	Identifier	cipher		2678	1					
ANR	2739	Identifier	key_len		2678	1					
ANR	2740	Argument	( uint8_t * ) SUBKEY_INFO		2678	5					
ANR	2741	CastExpression	( uint8_t * ) SUBKEY_INFO		2678	0					
ANR	2742	CastTarget	uint8_t *		2678	0					
ANR	2743	Identifier	SUBKEY_INFO		2678	1					
ANR	2744	Argument	strlen ( SUBKEY_INFO )		2678	6					
ANR	2745	CallExpression	strlen ( SUBKEY_INFO )		2678	0					
ANR	2746	Callee	strlen		2678	0					
ANR	2747	Identifier	strlen		2678	0					
ANR	2748	ArgumentList	SUBKEY_INFO		2678	1					
ANR	2749	Argument	SUBKEY_INFO		2678	0					
ANR	2750	Identifier	SUBKEY_INFO		2678	0					
ANR	2751	Argument	cipher_ctx -> skey		2678	7					
ANR	2752	PtrMemberAccess	cipher_ctx -> skey		2678	0					
ANR	2753	Identifier	cipher_ctx		2678	0					
ANR	2754	Identifier	skey		2678	1					
ANR	2755	Argument	cipher_ctx -> cipher -> key_len		2678	8					
ANR	2756	PtrMemberAccess	cipher_ctx -> cipher -> key_len		2678	0					
ANR	2757	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2758	Identifier	cipher_ctx		2678	0					
ANR	2759	Identifier	cipher		2678	1					
ANR	2760	Identifier	key_len		2678	1					
ANR	2761	IfStatement	if ( err )		2678	3					
ANR	2762	Condition	err	271:8:8646:8648	2678	0	True				
ANR	2763	Identifier	err		2678	0					
ANR	2764	CompoundStatement		12:13:440:440	2678	1					
ANR	2765	ExpressionStatement	"FATAL ( ""Unable to generate subkey"" )"	272:8:8661:8695	2678	0	True				
ANR	2766	CallExpression	"FATAL ( ""Unable to generate subkey"" )"		2678	0					
ANR	2767	Callee	FATAL		2678	0					
ANR	2768	Identifier	FATAL		2678	0					
ANR	2769	ArgumentList	"""Unable to generate subkey"""		2678	1					
ANR	2770	Argument	"""Unable to generate subkey"""		2678	0					
ANR	2771	PrimaryExpression	"""Unable to generate subkey"""		2678	0					
ANR	2772	ExpressionStatement	"memset ( cipher_ctx -> nonce , 0 , cipher_ctx -> cipher -> nonce_len )"	275:4:8708:8767	2678	4	True				
ANR	2773	CallExpression	"memset ( cipher_ctx -> nonce , 0 , cipher_ctx -> cipher -> nonce_len )"		2678	0					
ANR	2774	Callee	memset		2678	0					
ANR	2775	Identifier	memset		2678	0					
ANR	2776	ArgumentList	cipher_ctx -> nonce		2678	1					
ANR	2777	Argument	cipher_ctx -> nonce		2678	0					
ANR	2778	PtrMemberAccess	cipher_ctx -> nonce		2678	0					
ANR	2779	Identifier	cipher_ctx		2678	0					
ANR	2780	Identifier	nonce		2678	1					
ANR	2781	Argument	0		2678	1					
ANR	2782	PrimaryExpression	0		2678	0					
ANR	2783	Argument	cipher_ctx -> cipher -> nonce_len		2678	2					
ANR	2784	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		2678	0					
ANR	2785	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2786	Identifier	cipher_ctx		2678	0					
ANR	2787	Identifier	cipher		2678	1					
ANR	2788	Identifier	nonce_len		2678	1					
ANR	2789	IfStatement	if ( cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF )		2678	5					
ANR	2790	Condition	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF	278:8:8832:8881	2678	0	True				
ANR	2791	RelationalExpression	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF		2678	0		>=			
ANR	2792	PtrMemberAccess	cipher_ctx -> cipher -> method		2678	0					
ANR	2793	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2794	Identifier	cipher_ctx		2678	0					
ANR	2795	Identifier	cipher		2678	1					
ANR	2796	Identifier	method		2678	1					
ANR	2797	Identifier	CHACHA20POLY1305IETF		2678	1					
ANR	2798	CompoundStatement		19:60:673:673	2678	1					
ANR	2799	ReturnStatement	return ;	279:8:8894:8900	2678	0	True				
ANR	2800	IfStatement	"if ( mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0 )"		2678	6					
ANR	2801	Condition	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0"	282:8:8917:9045	2678	0	True				
ANR	2802	EqualityExpression	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0"		2678	0		!=			
ANR	2803	CallExpression	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc )"		2678	0					
ANR	2804	Callee	mbedtls_cipher_setkey		2678	0					
ANR	2805	Identifier	mbedtls_cipher_setkey		2678	0					
ANR	2806	ArgumentList	cipher_ctx -> evp		2678	1					
ANR	2807	Argument	cipher_ctx -> evp		2678	0					
ANR	2808	PtrMemberAccess	cipher_ctx -> evp		2678	0					
ANR	2809	Identifier	cipher_ctx		2678	0					
ANR	2810	Identifier	evp		2678	1					
ANR	2811	Argument	cipher_ctx -> skey		2678	1					
ANR	2812	PtrMemberAccess	cipher_ctx -> skey		2678	0					
ANR	2813	Identifier	cipher_ctx		2678	0					
ANR	2814	Identifier	skey		2678	1					
ANR	2815	Argument	cipher_ctx -> cipher -> key_len * 8		2678	2					
ANR	2816	MultiplicativeExpression	cipher_ctx -> cipher -> key_len * 8		2678	0		*			
ANR	2817	PtrMemberAccess	cipher_ctx -> cipher -> key_len		2678	0					
ANR	2818	PtrMemberAccess	cipher_ctx -> cipher		2678	0					
ANR	2819	Identifier	cipher_ctx		2678	0					
ANR	2820	Identifier	cipher		2678	1					
ANR	2821	Identifier	key_len		2678	1					
ANR	2822	PrimaryExpression	8		2678	1					
ANR	2823	Argument	enc		2678	3					
ANR	2824	Identifier	enc		2678	0					
ANR	2825	PrimaryExpression	0		2678	1					
ANR	2826	CompoundStatement		24:74:837:837	2678	1					
ANR	2827	ExpressionStatement	"FATAL ( ""Cannot set mbed TLS cipher key"" )"	284:8:9058:9097	2678	0	True				
ANR	2828	CallExpression	"FATAL ( ""Cannot set mbed TLS cipher key"" )"		2678	0					
ANR	2829	Callee	FATAL		2678	0					
ANR	2830	Identifier	FATAL		2678	0					
ANR	2831	ArgumentList	"""Cannot set mbed TLS cipher key"""		2678	1					
ANR	2832	Argument	"""Cannot set mbed TLS cipher key"""		2678	0					
ANR	2833	PrimaryExpression	"""Cannot set mbed TLS cipher key"""		2678	0					
ANR	2834	IfStatement	if ( mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0 )		2678	7					
ANR	2835	Condition	mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0	286:8:9113:9154	2678	0	True				
ANR	2836	EqualityExpression	mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0		2678	0		!=			
ANR	2837	CallExpression	mbedtls_cipher_reset ( cipher_ctx -> evp )		2678	0					
ANR	2838	Callee	mbedtls_cipher_reset		2678	0					
ANR	2839	Identifier	mbedtls_cipher_reset		2678	0					
ANR	2840	ArgumentList	cipher_ctx -> evp		2678	1					
ANR	2841	Argument	cipher_ctx -> evp		2678	0					
ANR	2842	PtrMemberAccess	cipher_ctx -> evp		2678	0					
ANR	2843	Identifier	cipher_ctx		2678	0					
ANR	2844	Identifier	evp		2678	1					
ANR	2845	PrimaryExpression	0		2678	1					
ANR	2846	CompoundStatement		27:52:946:946	2678	1					
ANR	2847	ExpressionStatement	"FATAL ( ""Cannot finish preparation of mbed TLS cipher context"" )"	287:8:9167:9228	2678	0	True				
ANR	2848	CallExpression	"FATAL ( ""Cannot finish preparation of mbed TLS cipher context"" )"		2678	0					
ANR	2849	Callee	FATAL		2678	0					
ANR	2850	Identifier	FATAL		2678	0					
ANR	2851	ArgumentList	"""Cannot finish preparation of mbed TLS cipher context"""		2678	1					
ANR	2852	Argument	"""Cannot finish preparation of mbed TLS cipher context"""		2678	0					
ANR	2853	PrimaryExpression	"""Cannot finish preparation of mbed TLS cipher context"""		2678	0					
ANR	2854	ReturnType	static void		2678	1					
ANR	2855	Identifier	aead_cipher_ctx_set_key		2678	2					
ANR	2856	ParameterList	"cipher_ctx_t * cipher_ctx , int enc"		2678	3					
ANR	2857	Parameter	cipher_ctx_t * cipher_ctx	259:24:8175:8198	2678	0	True				
ANR	2858	ParameterType	cipher_ctx_t *		2678	0					
ANR	2859	Identifier	cipher_ctx		2678	1					
ANR	2860	Parameter	int enc	259:50:8201:8207	2678	1	True				
ANR	2861	ParameterType	int		2678	0					
ANR	2862	Identifier	enc		2678	1					
ANR	2863	CFGEntryNode	ENTRY		2678		True				
ANR	2864	CFGExitNode	EXIT		2678		True				
ANR	2865	Symbol	cipher_ctx -> cipher -> method		2678						
ANR	2866	Symbol	mbedtls_cipher_reset		2678						
ANR	2867	Symbol	cipher_ctx -> cipher		2678						
ANR	2868	Symbol	SUBKEY_INFO		2678						
ANR	2869	Symbol	cipher_ctx		2678						
ANR	2870	Symbol	NULL		2678						
ANR	2871	Symbol	err		2678						
ANR	2872	Symbol	* cipher_ctx		2678						
ANR	2873	Symbol	cipher_ctx -> nonce		2678						
ANR	2874	Symbol	crypto_hkdf		2678						
ANR	2875	Symbol	cipher_ctx -> cipher -> key		2678						
ANR	2876	Symbol	cipher_ctx -> skey		2678						
ANR	2877	Symbol	mbedtls_md_info_from_string		2678						
ANR	2878	Symbol	* * cipher_ctx		2678						
ANR	2879	Symbol	strlen		2678						
ANR	2880	Symbol	cipher_ctx -> cipher -> nonce_len		2678						
ANR	2881	Symbol	mbedtls_cipher_setkey		2678						
ANR	2882	Symbol	md		2678						
ANR	2883	Symbol	cipher_ctx -> evp		2678						
ANR	2884	Symbol	cipher_ctx -> salt		2678						
ANR	2885	Symbol	enc		2678						
ANR	2886	Symbol	CHACHA20POLY1305IETF		2678						
ANR	2887	Symbol	cipher_ctx -> cipher -> key_len		2678						
ANR	2888	Symbol	* cipher_ctx -> cipher		2678						
ANR	2889	Function	aead_cipher_ctx_init	291:0:9239:10201							
ANR	2890	FunctionDef	"aead_cipher_ctx_init (cipher_ctx_t * cipher_ctx , int method , int enc)"		2889	0					
ANR	2891	CompoundStatement		293:0:9319:10201	2889	0					
ANR	2892	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		2889	0					
ANR	2893	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	294:8:9329:9375	2889	0	True				
ANR	2894	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		2889	0		||			
ANR	2895	RelationalExpression	method < AES128GCM		2889	0		<			
ANR	2896	Identifier	method		2889	0					
ANR	2897	Identifier	AES128GCM		2889	1					
ANR	2898	RelationalExpression	method >= AEAD_CIPHER_NUM		2889	1		>=			
ANR	2899	Identifier	method		2889	0					
ANR	2900	Identifier	AEAD_CIPHER_NUM		2889	1					
ANR	2901	CompoundStatement		2:57:58:58	2889	1					
ANR	2902	ExpressionStatement	"LOGE ( ""cipher_context_init(): Illegal method"" )"	295:8:9388:9433	2889	0	True				
ANR	2903	CallExpression	"LOGE ( ""cipher_context_init(): Illegal method"" )"		2889	0					
ANR	2904	Callee	LOGE		2889	0					
ANR	2905	Identifier	LOGE		2889	0					
ANR	2906	ArgumentList	"""cipher_context_init(): Illegal method"""		2889	1					
ANR	2907	Argument	"""cipher_context_init(): Illegal method"""		2889	0					
ANR	2908	PrimaryExpression	"""cipher_context_init(): Illegal method"""		2889	0					
ANR	2909	ReturnStatement	return ;	296:8:9443:9449	2889	1	True				
ANR	2910	IfStatement	if ( method >= CHACHA20POLY1305IETF )		2889	1					
ANR	2911	Condition	method >= CHACHA20POLY1305IETF	299:8:9466:9495	2889	0	True				
ANR	2912	RelationalExpression	method >= CHACHA20POLY1305IETF		2889	0		>=			
ANR	2913	Identifier	method		2889	0					
ANR	2914	Identifier	CHACHA20POLY1305IETF		2889	1					
ANR	2915	CompoundStatement		7:40:178:178	2889	1					
ANR	2916	ReturnStatement	return ;	300:8:9508:9514	2889	0	True				
ANR	2917	IdentifierDeclStatement	const char * ciphername = supported_aead_ciphers [ method ] ;	303:4:9527:9582	2889	2	True				
ANR	2918	IdentifierDecl	* ciphername = supported_aead_ciphers [ method ]		2889	0					
ANR	2919	IdentifierDeclType	const char *		2889	0					
ANR	2920	Identifier	ciphername		2889	1					
ANR	2921	AssignmentExpression	* ciphername = supported_aead_ciphers [ method ]		2889	2		=			
ANR	2922	Identifier	ciphername		2889	0					
ANR	2923	ArrayIndexing	supported_aead_ciphers [ method ]		2889	1					
ANR	2924	Identifier	supported_aead_ciphers		2889	0					
ANR	2925	Identifier	method		2889	1					
ANR	2926	IdentifierDeclStatement	const cipher_kt_t * cipher = aead_get_cipher_type ( method ) ;	305:4:9589:9645	2889	3	True				
ANR	2927	IdentifierDecl	* cipher = aead_get_cipher_type ( method )		2889	0					
ANR	2928	IdentifierDeclType	const cipher_kt_t *		2889	0					
ANR	2929	Identifier	cipher		2889	1					
ANR	2930	AssignmentExpression	* cipher = aead_get_cipher_type ( method )		2889	2		=			
ANR	2931	Identifier	cipher		2889	0					
ANR	2932	CallExpression	aead_get_cipher_type ( method )		2889	1					
ANR	2933	Callee	aead_get_cipher_type		2889	0					
ANR	2934	Identifier	aead_get_cipher_type		2889	0					
ANR	2935	ArgumentList	method		2889	1					
ANR	2936	Argument	method		2889	0					
ANR	2937	Identifier	method		2889	0					
ANR	2938	ExpressionStatement	cipher_ctx -> evp = ss_malloc ( sizeof ( cipher_evp_t ) )	307:4:9652:9701	2889	4	True				
ANR	2939	AssignmentExpression	cipher_ctx -> evp = ss_malloc ( sizeof ( cipher_evp_t ) )		2889	0		=			
ANR	2940	PtrMemberAccess	cipher_ctx -> evp		2889	0					
ANR	2941	Identifier	cipher_ctx		2889	0					
ANR	2942	Identifier	evp		2889	1					
ANR	2943	CallExpression	ss_malloc ( sizeof ( cipher_evp_t ) )		2889	1					
ANR	2944	Callee	ss_malloc		2889	0					
ANR	2945	Identifier	ss_malloc		2889	0					
ANR	2946	ArgumentList	sizeof ( cipher_evp_t )		2889	1					
ANR	2947	Argument	sizeof ( cipher_evp_t )		2889	0					
ANR	2948	SizeofExpression	sizeof ( cipher_evp_t )		2889	0					
ANR	2949	Sizeof	sizeof		2889	0					
ANR	2950	SizeofOperand	cipher_evp_t		2889	1					
ANR	2951	ExpressionStatement	"memset ( cipher_ctx -> evp , 0 , sizeof ( cipher_evp_t ) )"	308:4:9707:9755	2889	5	True				
ANR	2952	CallExpression	"memset ( cipher_ctx -> evp , 0 , sizeof ( cipher_evp_t ) )"		2889	0					
ANR	2953	Callee	memset		2889	0					
ANR	2954	Identifier	memset		2889	0					
ANR	2955	ArgumentList	cipher_ctx -> evp		2889	1					
ANR	2956	Argument	cipher_ctx -> evp		2889	0					
ANR	2957	PtrMemberAccess	cipher_ctx -> evp		2889	0					
ANR	2958	Identifier	cipher_ctx		2889	0					
ANR	2959	Identifier	evp		2889	1					
ANR	2960	Argument	0		2889	1					
ANR	2961	PrimaryExpression	0		2889	0					
ANR	2962	Argument	sizeof ( cipher_evp_t )		2889	2					
ANR	2963	SizeofExpression	sizeof ( cipher_evp_t )		2889	0					
ANR	2964	Sizeof	sizeof		2889	0					
ANR	2965	SizeofOperand	cipher_evp_t		2889	1					
ANR	2966	IdentifierDeclStatement	cipher_evp_t * evp = cipher_ctx -> evp ;	309:4:9761:9796	2889	6	True				
ANR	2967	IdentifierDecl	* evp = cipher_ctx -> evp		2889	0					
ANR	2968	IdentifierDeclType	cipher_evp_t *		2889	0					
ANR	2969	Identifier	evp		2889	1					
ANR	2970	AssignmentExpression	* evp = cipher_ctx -> evp		2889	2		=			
ANR	2971	Identifier	evp		2889	0					
ANR	2972	PtrMemberAccess	cipher_ctx -> evp		2889	1					
ANR	2973	Identifier	cipher_ctx		2889	0					
ANR	2974	Identifier	evp		2889	1					
ANR	2975	IfStatement	if ( cipher == NULL )		2889	7					
ANR	2976	Condition	cipher == NULL	311:8:9807:9820	2889	0	True				
ANR	2977	EqualityExpression	cipher == NULL		2889	0		==			
ANR	2978	Identifier	cipher		2889	0					
ANR	2979	Identifier	NULL		2889	1					
ANR	2980	CompoundStatement		19:24:503:503	2889	1					
ANR	2981	ExpressionStatement	"LOGE ( ""Cipher %s not found in mbed TLS library"" , ciphername )"	312:8:9833:9892	2889	0	True				
ANR	2982	CallExpression	"LOGE ( ""Cipher %s not found in mbed TLS library"" , ciphername )"		2889	0					
ANR	2983	Callee	LOGE		2889	0					
ANR	2984	Identifier	LOGE		2889	0					
ANR	2985	ArgumentList	"""Cipher %s not found in mbed TLS library"""		2889	1					
ANR	2986	Argument	"""Cipher %s not found in mbed TLS library"""		2889	0					
ANR	2987	PrimaryExpression	"""Cipher %s not found in mbed TLS library"""		2889	0					
ANR	2988	Argument	ciphername		2889	1					
ANR	2989	Identifier	ciphername		2889	0					
ANR	2990	ExpressionStatement	"FATAL ( ""Cannot initialize mbed TLS cipher"" )"	313:8:9902:9944	2889	1	True				
ANR	2991	CallExpression	"FATAL ( ""Cannot initialize mbed TLS cipher"" )"		2889	0					
ANR	2992	Callee	FATAL		2889	0					
ANR	2993	Identifier	FATAL		2889	0					
ANR	2994	ArgumentList	"""Cannot initialize mbed TLS cipher"""		2889	1					
ANR	2995	Argument	"""Cannot initialize mbed TLS cipher"""		2889	0					
ANR	2996	PrimaryExpression	"""Cannot initialize mbed TLS cipher"""		2889	0					
ANR	2997	ExpressionStatement	mbedtls_cipher_init ( evp )	315:4:9956:9980	2889	8	True				
ANR	2998	CallExpression	mbedtls_cipher_init ( evp )		2889	0					
ANR	2999	Callee	mbedtls_cipher_init		2889	0					
ANR	3000	Identifier	mbedtls_cipher_init		2889	0					
ANR	3001	ArgumentList	evp		2889	1					
ANR	3002	Argument	evp		2889	0					
ANR	3003	Identifier	evp		2889	0					
ANR	3004	IfStatement	"if ( mbedtls_cipher_setup ( evp , cipher ) != 0 )"		2889	9					
ANR	3005	Condition	"mbedtls_cipher_setup ( evp , cipher ) != 0"	316:8:9990:10027	2889	0	True				
ANR	3006	EqualityExpression	"mbedtls_cipher_setup ( evp , cipher ) != 0"		2889	0		!=			
ANR	3007	CallExpression	"mbedtls_cipher_setup ( evp , cipher )"		2889	0					
ANR	3008	Callee	mbedtls_cipher_setup		2889	0					
ANR	3009	Identifier	mbedtls_cipher_setup		2889	0					
ANR	3010	ArgumentList	evp		2889	1					
ANR	3011	Argument	evp		2889	0					
ANR	3012	Identifier	evp		2889	0					
ANR	3013	Argument	cipher		2889	1					
ANR	3014	Identifier	cipher		2889	0					
ANR	3015	PrimaryExpression	0		2889	1					
ANR	3016	CompoundStatement		24:48:710:710	2889	1					
ANR	3017	ExpressionStatement	"FATAL ( ""Cannot initialize mbed TLS cipher context"" )"	317:8:10040:10090	2889	0	True				
ANR	3018	CallExpression	"FATAL ( ""Cannot initialize mbed TLS cipher context"" )"		2889	0					
ANR	3019	Callee	FATAL		2889	0					
ANR	3020	Identifier	FATAL		2889	0					
ANR	3021	ArgumentList	"""Cannot initialize mbed TLS cipher context"""		2889	1					
ANR	3022	Argument	"""Cannot initialize mbed TLS cipher context"""		2889	0					
ANR	3023	PrimaryExpression	"""Cannot initialize mbed TLS cipher context"""		2889	0					
ANR	3024	ExpressionStatement	"dump ( ""KEY"" , ( char * ) cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len )"	321:4:10119:10192	2889	10	True				
ANR	3025	CallExpression	"dump ( ""KEY"" , ( char * ) cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len )"		2889	0					
ANR	3026	Callee	dump		2889	0					
ANR	3027	Identifier	dump		2889	0					
ANR	3028	ArgumentList	"""KEY"""		2889	1					
ANR	3029	Argument	"""KEY"""		2889	0					
ANR	3030	PrimaryExpression	"""KEY"""		2889	0					
ANR	3031	Argument	( char * ) cipher_ctx -> cipher -> key		2889	1					
ANR	3032	CastExpression	( char * ) cipher_ctx -> cipher -> key		2889	0					
ANR	3033	CastTarget	char *		2889	0					
ANR	3034	PtrMemberAccess	cipher_ctx -> cipher -> key		2889	1					
ANR	3035	PtrMemberAccess	cipher_ctx -> cipher		2889	0					
ANR	3036	Identifier	cipher_ctx		2889	0					
ANR	3037	Identifier	cipher		2889	1					
ANR	3038	Identifier	key		2889	1					
ANR	3039	Argument	cipher_ctx -> cipher -> key_len		2889	2					
ANR	3040	PtrMemberAccess	cipher_ctx -> cipher -> key_len		2889	0					
ANR	3041	PtrMemberAccess	cipher_ctx -> cipher		2889	0					
ANR	3042	Identifier	cipher_ctx		2889	0					
ANR	3043	Identifier	cipher		2889	1					
ANR	3044	Identifier	key_len		2889	1					
ANR	3045	ReturnType	static void		2889	1					
ANR	3046	Identifier	aead_cipher_ctx_init		2889	2					
ANR	3047	ParameterList	"cipher_ctx_t * cipher_ctx , int method , int enc"		2889	3					
ANR	3048	Parameter	cipher_ctx_t * cipher_ctx	292:21:9272:9295	2889	0	True				
ANR	3049	ParameterType	cipher_ctx_t *		2889	0					
ANR	3050	Identifier	cipher_ctx		2889	1					
ANR	3051	Parameter	int method	292:47:9298:9307	2889	1	True				
ANR	3052	ParameterType	int		2889	0					
ANR	3053	Identifier	method		2889	1					
ANR	3054	Parameter	int enc	292:59:9310:9316	2889	2	True				
ANR	3055	ParameterType	int		2889	0					
ANR	3056	Identifier	enc		2889	1					
ANR	3057	CFGEntryNode	ENTRY		2889		True				
ANR	3058	CFGExitNode	EXIT		2889		True				
ANR	3059	Symbol	cipher		2889						
ANR	3060	Symbol	mbedtls_cipher_setup		2889						
ANR	3061	Symbol	ciphername		2889						
ANR	3062	Symbol	cipher_ctx -> cipher		2889						
ANR	3063	Symbol	cipher_ctx		2889						
ANR	3064	Symbol	NULL		2889						
ANR	3065	Symbol	method		2889						
ANR	3066	Symbol	* supported_aead_ciphers		2889						
ANR	3067	Symbol	* cipher_ctx		2889						
ANR	3068	Symbol	AES128GCM		2889						
ANR	3069	Symbol	aead_get_cipher_type		2889						
ANR	3070	Symbol	* method		2889						
ANR	3071	Symbol	cipher_ctx -> cipher -> key		2889						
ANR	3072	Symbol	* * cipher_ctx		2889						
ANR	3073	Symbol	AEAD_CIPHER_NUM		2889						
ANR	3074	Symbol	cipher_ctx -> evp		2889						
ANR	3075	Symbol	ss_malloc		2889						
ANR	3076	Symbol	enc		2889						
ANR	3077	Symbol	CHACHA20POLY1305IETF		2889						
ANR	3078	Symbol	supported_aead_ciphers		2889						
ANR	3079	Symbol	evp		2889						
ANR	3080	Symbol	* cipher_ctx -> cipher		2889						
ANR	3081	Symbol	cipher_ctx -> cipher -> key_len		2889						
ANR	3082	Function	aead_ctx_init	325:0:10204:10502							
ANR	3083	FunctionDef	"aead_ctx_init (cipher_t * cipher , cipher_ctx_t * cipher_ctx , int enc)"		3082	0					
ANR	3084	CompoundStatement		327:0:10276:10502	3082	0					
ANR	3085	ExpressionStatement	"sodium_memzero ( cipher_ctx , sizeof ( cipher_ctx_t ) )"	328:4:10282:10330	3082	0	True				
ANR	3086	CallExpression	"sodium_memzero ( cipher_ctx , sizeof ( cipher_ctx_t ) )"		3082	0					
ANR	3087	Callee	sodium_memzero		3082	0					
ANR	3088	Identifier	sodium_memzero		3082	0					
ANR	3089	ArgumentList	cipher_ctx		3082	1					
ANR	3090	Argument	cipher_ctx		3082	0					
ANR	3091	Identifier	cipher_ctx		3082	0					
ANR	3092	Argument	sizeof ( cipher_ctx_t )		3082	1					
ANR	3093	SizeofExpression	sizeof ( cipher_ctx_t )		3082	0					
ANR	3094	Sizeof	sizeof		3082	0					
ANR	3095	SizeofOperand	cipher_ctx_t		3082	1					
ANR	3096	ExpressionStatement	cipher_ctx -> cipher = cipher	329:4:10336:10363	3082	1	True				
ANR	3097	AssignmentExpression	cipher_ctx -> cipher = cipher		3082	0		=			
ANR	3098	PtrMemberAccess	cipher_ctx -> cipher		3082	0					
ANR	3099	Identifier	cipher_ctx		3082	0					
ANR	3100	Identifier	cipher		3082	1					
ANR	3101	Identifier	cipher		3082	1					
ANR	3102	ExpressionStatement	"aead_cipher_ctx_init ( cipher_ctx , cipher -> method , enc )"	331:4:10370:10423	3082	2	True				
ANR	3103	CallExpression	"aead_cipher_ctx_init ( cipher_ctx , cipher -> method , enc )"		3082	0					
ANR	3104	Callee	aead_cipher_ctx_init		3082	0					
ANR	3105	Identifier	aead_cipher_ctx_init		3082	0					
ANR	3106	ArgumentList	cipher_ctx		3082	1					
ANR	3107	Argument	cipher_ctx		3082	0					
ANR	3108	Identifier	cipher_ctx		3082	0					
ANR	3109	Argument	cipher -> method		3082	1					
ANR	3110	PtrMemberAccess	cipher -> method		3082	0					
ANR	3111	Identifier	cipher		3082	0					
ANR	3112	Identifier	method		3082	1					
ANR	3113	Argument	enc		3082	2					
ANR	3114	Identifier	enc		3082	0					
ANR	3115	IfStatement	if ( enc )		3082	3					
ANR	3116	Condition	enc	333:8:10434:10436	3082	0	True				
ANR	3117	Identifier	enc		3082	0					
ANR	3118	CompoundStatement		7:13:162:162	3082	1					
ANR	3119	ExpressionStatement	"rand_bytes ( cipher_ctx -> salt , cipher -> key_len )"	334:8:10449:10494	3082	0	True				
ANR	3120	CallExpression	"rand_bytes ( cipher_ctx -> salt , cipher -> key_len )"		3082	0					
ANR	3121	Callee	rand_bytes		3082	0					
ANR	3122	Identifier	rand_bytes		3082	0					
ANR	3123	ArgumentList	cipher_ctx -> salt		3082	1					
ANR	3124	Argument	cipher_ctx -> salt		3082	0					
ANR	3125	PtrMemberAccess	cipher_ctx -> salt		3082	0					
ANR	3126	Identifier	cipher_ctx		3082	0					
ANR	3127	Identifier	salt		3082	1					
ANR	3128	Argument	cipher -> key_len		3082	1					
ANR	3129	PtrMemberAccess	cipher -> key_len		3082	0					
ANR	3130	Identifier	cipher		3082	0					
ANR	3131	Identifier	key_len		3082	1					
ANR	3132	ReturnType	void		3082	1					
ANR	3133	Identifier	aead_ctx_init		3082	2					
ANR	3134	ParameterList	"cipher_t * cipher , cipher_ctx_t * cipher_ctx , int enc"		3082	3					
ANR	3135	Parameter	cipher_t * cipher	326:14:10223:10238	3082	0	True				
ANR	3136	ParameterType	cipher_t *		3082	0					
ANR	3137	Identifier	cipher		3082	1					
ANR	3138	Parameter	cipher_ctx_t * cipher_ctx	326:32:10241:10264	3082	1	True				
ANR	3139	ParameterType	cipher_ctx_t *		3082	0					
ANR	3140	Identifier	cipher_ctx		3082	1					
ANR	3141	Parameter	int enc	326:58:10267:10273	3082	2	True				
ANR	3142	ParameterType	int		3082	0					
ANR	3143	Identifier	enc		3082	1					
ANR	3144	CFGEntryNode	ENTRY		3082		True				
ANR	3145	CFGExitNode	EXIT		3082		True				
ANR	3146	Symbol	cipher		3082						
ANR	3147	Symbol	cipher_ctx -> cipher		3082						
ANR	3148	Symbol	cipher_ctx		3082						
ANR	3149	Symbol	* cipher_ctx		3082						
ANR	3150	Symbol	* cipher		3082						
ANR	3151	Symbol	cipher -> key_len		3082						
ANR	3152	Symbol	cipher -> method		3082						
ANR	3153	Symbol	cipher_ctx -> salt		3082						
ANR	3154	Symbol	enc		3082						
ANR	3155	Function	aead_ctx_release	338:0:10505:10860							
ANR	3156	FunctionDef	aead_ctx_release (cipher_ctx_t * cipher_ctx)		3155	0					
ANR	3157	CompoundStatement		340:0:10553:10860	3155	0					
ANR	3158	IfStatement	if ( cipher_ctx -> chunk != NULL )		3155	0					
ANR	3159	Condition	cipher_ctx -> chunk != NULL	341:8:10563:10587	3155	0	True				
ANR	3160	EqualityExpression	cipher_ctx -> chunk != NULL		3155	0		!=			
ANR	3161	PtrMemberAccess	cipher_ctx -> chunk		3155	0					
ANR	3162	Identifier	cipher_ctx		3155	0					
ANR	3163	Identifier	chunk		3155	1					
ANR	3164	Identifier	NULL		3155	1					
ANR	3165	CompoundStatement		2:35:36:36	3155	1					
ANR	3166	ExpressionStatement	bfree ( cipher_ctx -> chunk )	342:8:10600:10624	3155	0	True				
ANR	3167	CallExpression	bfree ( cipher_ctx -> chunk )		3155	0					
ANR	3168	Callee	bfree		3155	0					
ANR	3169	Identifier	bfree		3155	0					
ANR	3170	ArgumentList	cipher_ctx -> chunk		3155	1					
ANR	3171	Argument	cipher_ctx -> chunk		3155	0					
ANR	3172	PtrMemberAccess	cipher_ctx -> chunk		3155	0					
ANR	3173	Identifier	cipher_ctx		3155	0					
ANR	3174	Identifier	chunk		3155	1					
ANR	3175	ExpressionStatement	ss_free ( cipher_ctx -> chunk )	343:8:10634:10660	3155	1	True				
ANR	3176	CallExpression	ss_free ( cipher_ctx -> chunk )		3155	0					
ANR	3177	Callee	ss_free		3155	0					
ANR	3178	Identifier	ss_free		3155	0					
ANR	3179	ArgumentList	cipher_ctx -> chunk		3155	1					
ANR	3180	Argument	cipher_ctx -> chunk		3155	0					
ANR	3181	PtrMemberAccess	cipher_ctx -> chunk		3155	0					
ANR	3182	Identifier	cipher_ctx		3155	0					
ANR	3183	Identifier	chunk		3155	1					
ANR	3184	ExpressionStatement	cipher_ctx -> chunk = NULL	344:8:10670:10694	3155	2	True				
ANR	3185	AssignmentExpression	cipher_ctx -> chunk = NULL		3155	0		=			
ANR	3186	PtrMemberAccess	cipher_ctx -> chunk		3155	0					
ANR	3187	Identifier	cipher_ctx		3155	0					
ANR	3188	Identifier	chunk		3155	1					
ANR	3189	Identifier	NULL		3155	1					
ANR	3190	IfStatement	if ( cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF )		3155	1					
ANR	3191	Condition	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF	347:8:10711:10760	3155	0	True				
ANR	3192	RelationalExpression	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF		3155	0		>=			
ANR	3193	PtrMemberAccess	cipher_ctx -> cipher -> method		3155	0					
ANR	3194	PtrMemberAccess	cipher_ctx -> cipher		3155	0					
ANR	3195	Identifier	cipher_ctx		3155	0					
ANR	3196	Identifier	cipher		3155	1					
ANR	3197	Identifier	method		3155	1					
ANR	3198	Identifier	CHACHA20POLY1305IETF		3155	1					
ANR	3199	CompoundStatement		8:60:209:209	3155	1					
ANR	3200	ReturnStatement	return ;	348:8:10773:10779	3155	0	True				
ANR	3201	ExpressionStatement	mbedtls_cipher_free ( cipher_ctx -> evp )	351:4:10792:10828	3155	2	True				
ANR	3202	CallExpression	mbedtls_cipher_free ( cipher_ctx -> evp )		3155	0					
ANR	3203	Callee	mbedtls_cipher_free		3155	0					
ANR	3204	Identifier	mbedtls_cipher_free		3155	0					
ANR	3205	ArgumentList	cipher_ctx -> evp		3155	1					
ANR	3206	Argument	cipher_ctx -> evp		3155	0					
ANR	3207	PtrMemberAccess	cipher_ctx -> evp		3155	0					
ANR	3208	Identifier	cipher_ctx		3155	0					
ANR	3209	Identifier	evp		3155	1					
ANR	3210	ExpressionStatement	ss_free ( cipher_ctx -> evp )	352:4:10834:10858	3155	3	True				
ANR	3211	CallExpression	ss_free ( cipher_ctx -> evp )		3155	0					
ANR	3212	Callee	ss_free		3155	0					
ANR	3213	Identifier	ss_free		3155	0					
ANR	3214	ArgumentList	cipher_ctx -> evp		3155	1					
ANR	3215	Argument	cipher_ctx -> evp		3155	0					
ANR	3216	PtrMemberAccess	cipher_ctx -> evp		3155	0					
ANR	3217	Identifier	cipher_ctx		3155	0					
ANR	3218	Identifier	evp		3155	1					
ANR	3219	ReturnType	void		3155	1					
ANR	3220	Identifier	aead_ctx_release		3155	2					
ANR	3221	ParameterList	cipher_ctx_t * cipher_ctx		3155	3					
ANR	3222	Parameter	cipher_ctx_t * cipher_ctx	339:17:10527:10550	3155	0	True				
ANR	3223	ParameterType	cipher_ctx_t *		3155	0					
ANR	3224	Identifier	cipher_ctx		3155	1					
ANR	3225	CFGEntryNode	ENTRY		3155		True				
ANR	3226	CFGExitNode	EXIT		3155		True				
ANR	3227	Symbol	* * cipher_ctx		3155						
ANR	3228	Symbol	cipher_ctx -> cipher -> method		3155						
ANR	3229	Symbol	cipher_ctx -> cipher		3155						
ANR	3230	Symbol	cipher_ctx		3155						
ANR	3231	Symbol	NULL		3155						
ANR	3232	Symbol	* cipher_ctx		3155						
ANR	3233	Symbol	cipher_ctx -> evp		3155						
ANR	3234	Symbol	cipher_ctx -> chunk		3155						
ANR	3235	Symbol	CHACHA20POLY1305IETF		3155						
ANR	3236	Symbol	* cipher_ctx -> cipher		3155						
ANR	3237	Function	aead_encrypt_all	355:0:10863:12093							
ANR	3238	FunctionDef	"aead_encrypt_all (buffer_t * plaintext , cipher_t * cipher , size_t capacity)"		3237	0					
ANR	3239	CompoundStatement		357:0:10940:12093	3237	0					
ANR	3240	IdentifierDeclStatement	cipher_ctx_t cipher_ctx ;	358:4:10946:10969	3237	0	True				
ANR	3241	IdentifierDecl	cipher_ctx		3237	0					
ANR	3242	IdentifierDeclType	cipher_ctx_t		3237	0					
ANR	3243	Identifier	cipher_ctx		3237	1					
ANR	3244	ExpressionStatement	"aead_ctx_init ( cipher , & cipher_ctx , 1 )"	359:4:10975:11012	3237	1	True				
ANR	3245	CallExpression	"aead_ctx_init ( cipher , & cipher_ctx , 1 )"		3237	0					
ANR	3246	Callee	aead_ctx_init		3237	0					
ANR	3247	Identifier	aead_ctx_init		3237	0					
ANR	3248	ArgumentList	cipher		3237	1					
ANR	3249	Argument	cipher		3237	0					
ANR	3250	Identifier	cipher		3237	0					
ANR	3251	Argument	& cipher_ctx		3237	1					
ANR	3252	UnaryOperationExpression	& cipher_ctx		3237	0					
ANR	3253	UnaryOperator	&		3237	0					
ANR	3254	Identifier	cipher_ctx		3237	1					
ANR	3255	Argument	1		3237	2					
ANR	3256	PrimaryExpression	1		3237	0					
ANR	3257	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	361:4:11019:11053	3237	2	True				
ANR	3258	IdentifierDecl	salt_len = cipher -> key_len		3237	0					
ANR	3259	IdentifierDeclType	size_t		3237	0					
ANR	3260	Identifier	salt_len		3237	1					
ANR	3261	AssignmentExpression	salt_len = cipher -> key_len		3237	2		=			
ANR	3262	Identifier	salt_len		3237	0					
ANR	3263	PtrMemberAccess	cipher -> key_len		3237	1					
ANR	3264	Identifier	cipher		3237	0					
ANR	3265	Identifier	key_len		3237	1					
ANR	3266	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	362:4:11059:11093	3237	3	True				
ANR	3267	IdentifierDecl	tag_len = cipher -> tag_len		3237	0					
ANR	3268	IdentifierDeclType	size_t		3237	0					
ANR	3269	Identifier	tag_len		3237	1					
ANR	3270	AssignmentExpression	tag_len = cipher -> tag_len		3237	2		=			
ANR	3271	Identifier	tag_len		3237	0					
ANR	3272	PtrMemberAccess	cipher -> tag_len		3237	1					
ANR	3273	Identifier	cipher		3237	0					
ANR	3274	Identifier	tag_len		3237	1					
ANR	3275	IdentifierDeclStatement	int err = CRYPTO_OK ;	363:4:11099:11127	3237	4	True				
ANR	3276	IdentifierDecl	err = CRYPTO_OK		3237	0					
ANR	3277	IdentifierDeclType	int		3237	0					
ANR	3278	Identifier	err		3237	1					
ANR	3279	AssignmentExpression	err = CRYPTO_OK		3237	2		=			
ANR	3280	Identifier	CRYPTO_OK		3237	0					
ANR	3281	Identifier	CRYPTO_OK		3237	1					
ANR	3282	Statement	static	365:4:11134:11139	3237	5	True				
ANR	3283	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	365:11:11141:11173	3237	6	True				
ANR	3284	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		3237	0					
ANR	3285	IdentifierDeclType	buffer_t		3237	0					
ANR	3286	Identifier	tmp		3237	1					
ANR	3287	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		3237	2		=			
ANR	3288	Identifier	tmp		3237	0					
ANR	3289	InitializerList	0		3237	1					
ANR	3290	PrimaryExpression	0		3237	0					
ANR	3291	PrimaryExpression	0		3237	1					
ANR	3292	PrimaryExpression	0		3237	2					
ANR	3293	Identifier	NULL		3237	3					
ANR	3294	ExpressionStatement	"brealloc ( & tmp , salt_len + tag_len + plaintext -> len , capacity )"	366:4:11179:11240	3237	7	True				
ANR	3295	CallExpression	"brealloc ( & tmp , salt_len + tag_len + plaintext -> len , capacity )"		3237	0					
ANR	3296	Callee	brealloc		3237	0					
ANR	3297	Identifier	brealloc		3237	0					
ANR	3298	ArgumentList	& tmp		3237	1					
ANR	3299	Argument	& tmp		3237	0					
ANR	3300	UnaryOperationExpression	& tmp		3237	0					
ANR	3301	UnaryOperator	&		3237	0					
ANR	3302	Identifier	tmp		3237	1					
ANR	3303	Argument	salt_len + tag_len + plaintext -> len		3237	1					
ANR	3304	AdditiveExpression	salt_len + tag_len + plaintext -> len		3237	0		+			
ANR	3305	Identifier	salt_len		3237	0					
ANR	3306	AdditiveExpression	tag_len + plaintext -> len		3237	1		+			
ANR	3307	Identifier	tag_len		3237	0					
ANR	3308	PtrMemberAccess	plaintext -> len		3237	1					
ANR	3309	Identifier	plaintext		3237	0					
ANR	3310	Identifier	len		3237	1					
ANR	3311	Argument	capacity		3237	2					
ANR	3312	Identifier	capacity		3237	0					
ANR	3313	IdentifierDeclStatement	buffer_t * ciphertext = & tmp ;	367:4:11246:11273	3237	8	True				
ANR	3314	IdentifierDecl	* ciphertext = & tmp		3237	0					
ANR	3315	IdentifierDeclType	buffer_t *		3237	0					
ANR	3316	Identifier	ciphertext		3237	1					
ANR	3317	AssignmentExpression	* ciphertext = & tmp		3237	2		=			
ANR	3318	Identifier	ciphertext		3237	0					
ANR	3319	UnaryOperationExpression	& tmp		3237	1					
ANR	3320	UnaryOperator	&		3237	0					
ANR	3321	Identifier	tmp		3237	1					
ANR	3322	ExpressionStatement	ciphertext -> len = tag_len + plaintext -> len	368:4:11279:11321	3237	9	True				
ANR	3323	AssignmentExpression	ciphertext -> len = tag_len + plaintext -> len		3237	0		=			
ANR	3324	PtrMemberAccess	ciphertext -> len		3237	0					
ANR	3325	Identifier	ciphertext		3237	0					
ANR	3326	Identifier	len		3237	1					
ANR	3327	AdditiveExpression	tag_len + plaintext -> len		3237	1		+			
ANR	3328	Identifier	tag_len		3237	0					
ANR	3329	PtrMemberAccess	plaintext -> len		3237	1					
ANR	3330	Identifier	plaintext		3237	0					
ANR	3331	Identifier	len		3237	1					
ANR	3332	ExpressionStatement	"memcpy ( ciphertext -> data , cipher_ctx . salt , salt_len )"	371:4:11361:11412	3237	10	True				
ANR	3333	CallExpression	"memcpy ( ciphertext -> data , cipher_ctx . salt , salt_len )"		3237	0					
ANR	3334	Callee	memcpy		3237	0					
ANR	3335	Identifier	memcpy		3237	0					
ANR	3336	ArgumentList	ciphertext -> data		3237	1					
ANR	3337	Argument	ciphertext -> data		3237	0					
ANR	3338	PtrMemberAccess	ciphertext -> data		3237	0					
ANR	3339	Identifier	ciphertext		3237	0					
ANR	3340	Identifier	data		3237	1					
ANR	3341	Argument	cipher_ctx . salt		3237	1					
ANR	3342	MemberAccess	cipher_ctx . salt		3237	0					
ANR	3343	Identifier	cipher_ctx		3237	0					
ANR	3344	Identifier	salt		3237	1					
ANR	3345	Argument	salt_len		3237	2					
ANR	3346	Identifier	salt_len		3237	0					
ANR	3347	ExpressionStatement	"aead_cipher_ctx_set_key ( & cipher_ctx , 1 )"	373:4:11419:11458	3237	11	True				
ANR	3348	CallExpression	"aead_cipher_ctx_set_key ( & cipher_ctx , 1 )"		3237	0					
ANR	3349	Callee	aead_cipher_ctx_set_key		3237	0					
ANR	3350	Identifier	aead_cipher_ctx_set_key		3237	0					
ANR	3351	ArgumentList	& cipher_ctx		3237	1					
ANR	3352	Argument	& cipher_ctx		3237	0					
ANR	3353	UnaryOperationExpression	& cipher_ctx		3237	0					
ANR	3354	UnaryOperator	&		3237	0					
ANR	3355	Identifier	cipher_ctx		3237	1					
ANR	3356	Argument	1		3237	1					
ANR	3357	PrimaryExpression	1		3237	0					
ANR	3358	IdentifierDeclStatement	size_t clen = ciphertext -> len ;	375:4:11465:11494	3237	12	True				
ANR	3359	IdentifierDecl	clen = ciphertext -> len		3237	0					
ANR	3360	IdentifierDeclType	size_t		3237	0					
ANR	3361	Identifier	clen		3237	1					
ANR	3362	AssignmentExpression	clen = ciphertext -> len		3237	2		=			
ANR	3363	Identifier	clen		3237	0					
ANR	3364	PtrMemberAccess	ciphertext -> len		3237	1					
ANR	3365	Identifier	ciphertext		3237	0					
ANR	3366	Identifier	len		3237	1					
ANR	3367	ExpressionStatement	"err = aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"	376:4:11500:11763	3237	13	True				
ANR	3368	AssignmentExpression	"err = aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		3237	0		=			
ANR	3369	Identifier	err		3237	0					
ANR	3370	CallExpression	"aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		3237	1					
ANR	3371	Callee	aead_cipher_encrypt		3237	0					
ANR	3372	Identifier	aead_cipher_encrypt		3237	0					
ANR	3373	ArgumentList	& cipher_ctx		3237	1					
ANR	3374	Argument	& cipher_ctx		3237	0					
ANR	3375	UnaryOperationExpression	& cipher_ctx		3237	0					
ANR	3376	UnaryOperator	&		3237	0					
ANR	3377	Identifier	cipher_ctx		3237	1					
ANR	3378	Argument	( uint8_t * ) ciphertext -> data + salt_len		3237	1					
ANR	3379	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_len		3237	0		+			
ANR	3380	CastExpression	( uint8_t * ) ciphertext -> data		3237	0					
ANR	3381	CastTarget	uint8_t *		3237	0					
ANR	3382	PtrMemberAccess	ciphertext -> data		3237	1					
ANR	3383	Identifier	ciphertext		3237	0					
ANR	3384	Identifier	data		3237	1					
ANR	3385	Identifier	salt_len		3237	1					
ANR	3386	Argument	& clen		3237	2					
ANR	3387	UnaryOperationExpression	& clen		3237	0					
ANR	3388	UnaryOperator	&		3237	0					
ANR	3389	Identifier	clen		3237	1					
ANR	3390	Argument	( uint8_t * ) plaintext -> data		3237	3					
ANR	3391	CastExpression	( uint8_t * ) plaintext -> data		3237	0					
ANR	3392	CastTarget	uint8_t *		3237	0					
ANR	3393	PtrMemberAccess	plaintext -> data		3237	1					
ANR	3394	Identifier	plaintext		3237	0					
ANR	3395	Identifier	data		3237	1					
ANR	3396	Argument	plaintext -> len		3237	4					
ANR	3397	PtrMemberAccess	plaintext -> len		3237	0					
ANR	3398	Identifier	plaintext		3237	0					
ANR	3399	Identifier	len		3237	1					
ANR	3400	Argument	NULL		3237	5					
ANR	3401	Identifier	NULL		3237	0					
ANR	3402	Argument	0		3237	6					
ANR	3403	PrimaryExpression	0		3237	0					
ANR	3404	Argument	cipher_ctx . nonce		3237	7					
ANR	3405	MemberAccess	cipher_ctx . nonce		3237	0					
ANR	3406	Identifier	cipher_ctx		3237	0					
ANR	3407	Identifier	nonce		3237	1					
ANR	3408	Argument	cipher_ctx . skey		3237	8					
ANR	3409	MemberAccess	cipher_ctx . skey		3237	0					
ANR	3410	Identifier	cipher_ctx		3237	0					
ANR	3411	Identifier	skey		3237	1					
ANR	3412	ExpressionStatement	aead_ctx_release ( & cipher_ctx )	381:4:11770:11799	3237	14	True				
ANR	3413	CallExpression	aead_ctx_release ( & cipher_ctx )		3237	0					
ANR	3414	Callee	aead_ctx_release		3237	0					
ANR	3415	Identifier	aead_ctx_release		3237	0					
ANR	3416	ArgumentList	& cipher_ctx		3237	1					
ANR	3417	Argument	& cipher_ctx		3237	0					
ANR	3418	UnaryOperationExpression	& cipher_ctx		3237	0					
ANR	3419	UnaryOperator	&		3237	0					
ANR	3420	Identifier	cipher_ctx		3237	1					
ANR	3421	IfStatement	if ( err )		3237	15					
ANR	3422	Condition	err	383:8:11810:11812	3237	0	True				
ANR	3423	Identifier	err		3237	0					
ANR	3424	ReturnStatement	return CRYPTO_ERROR ;	384:8:11823:11842	3237	1	True				
ANR	3425	Identifier	CRYPTO_ERROR		3237	0					
ANR	3426	ExpressionStatement	assert ( ciphertext -> len == clen )	386:4:11849:11880	3237	16	True				
ANR	3427	CallExpression	assert ( ciphertext -> len == clen )		3237	0					
ANR	3428	Callee	assert		3237	0					
ANR	3429	Identifier	assert		3237	0					
ANR	3430	ArgumentList	ciphertext -> len == clen		3237	1					
ANR	3431	Argument	ciphertext -> len == clen		3237	0					
ANR	3432	EqualityExpression	ciphertext -> len == clen		3237	0		==			
ANR	3433	PtrMemberAccess	ciphertext -> len		3237	0					
ANR	3434	Identifier	ciphertext		3237	0					
ANR	3435	Identifier	len		3237	1					
ANR	3436	Identifier	clen		3237	1					
ANR	3437	ExpressionStatement	"brealloc ( plaintext , salt_len + ciphertext -> len , capacity )"	388:4:11887:11944	3237	17	True				
ANR	3438	CallExpression	"brealloc ( plaintext , salt_len + ciphertext -> len , capacity )"		3237	0					
ANR	3439	Callee	brealloc		3237	0					
ANR	3440	Identifier	brealloc		3237	0					
ANR	3441	ArgumentList	plaintext		3237	1					
ANR	3442	Argument	plaintext		3237	0					
ANR	3443	Identifier	plaintext		3237	0					
ANR	3444	Argument	salt_len + ciphertext -> len		3237	1					
ANR	3445	AdditiveExpression	salt_len + ciphertext -> len		3237	0		+			
ANR	3446	Identifier	salt_len		3237	0					
ANR	3447	PtrMemberAccess	ciphertext -> len		3237	1					
ANR	3448	Identifier	ciphertext		3237	0					
ANR	3449	Identifier	len		3237	1					
ANR	3450	Argument	capacity		3237	2					
ANR	3451	Identifier	capacity		3237	0					
ANR	3452	ExpressionStatement	"memcpy ( plaintext -> data , ciphertext -> data , salt_len + ciphertext -> len )"	389:4:11950:12019	3237	18	True				
ANR	3453	CallExpression	"memcpy ( plaintext -> data , ciphertext -> data , salt_len + ciphertext -> len )"		3237	0					
ANR	3454	Callee	memcpy		3237	0					
ANR	3455	Identifier	memcpy		3237	0					
ANR	3456	ArgumentList	plaintext -> data		3237	1					
ANR	3457	Argument	plaintext -> data		3237	0					
ANR	3458	PtrMemberAccess	plaintext -> data		3237	0					
ANR	3459	Identifier	plaintext		3237	0					
ANR	3460	Identifier	data		3237	1					
ANR	3461	Argument	ciphertext -> data		3237	1					
ANR	3462	PtrMemberAccess	ciphertext -> data		3237	0					
ANR	3463	Identifier	ciphertext		3237	0					
ANR	3464	Identifier	data		3237	1					
ANR	3465	Argument	salt_len + ciphertext -> len		3237	2					
ANR	3466	AdditiveExpression	salt_len + ciphertext -> len		3237	0		+			
ANR	3467	Identifier	salt_len		3237	0					
ANR	3468	PtrMemberAccess	ciphertext -> len		3237	1					
ANR	3469	Identifier	ciphertext		3237	0					
ANR	3470	Identifier	len		3237	1					
ANR	3471	ExpressionStatement	plaintext -> len = salt_len + ciphertext -> len	390:4:12025:12068	3237	19	True				
ANR	3472	AssignmentExpression	plaintext -> len = salt_len + ciphertext -> len		3237	0		=			
ANR	3473	PtrMemberAccess	plaintext -> len		3237	0					
ANR	3474	Identifier	plaintext		3237	0					
ANR	3475	Identifier	len		3237	1					
ANR	3476	AdditiveExpression	salt_len + ciphertext -> len		3237	1		+			
ANR	3477	Identifier	salt_len		3237	0					
ANR	3478	PtrMemberAccess	ciphertext -> len		3237	1					
ANR	3479	Identifier	ciphertext		3237	0					
ANR	3480	Identifier	len		3237	1					
ANR	3481	ReturnStatement	return CRYPTO_OK ;	392:4:12075:12091	3237	20	True				
ANR	3482	Identifier	CRYPTO_OK		3237	0					
ANR	3483	ReturnType	int		3237	1					
ANR	3484	Identifier	aead_encrypt_all		3237	2					
ANR	3485	ParameterList	"buffer_t * plaintext , cipher_t * cipher , size_t capacity"		3237	3					
ANR	3486	Parameter	buffer_t * plaintext	356:17:10884:10902	3237	0	True				
ANR	3487	ParameterType	buffer_t *		3237	0					
ANR	3488	Identifier	plaintext		3237	1					
ANR	3489	Parameter	cipher_t * cipher	356:38:10905:10920	3237	1	True				
ANR	3490	ParameterType	cipher_t *		3237	0					
ANR	3491	Identifier	cipher		3237	1					
ANR	3492	Parameter	size_t capacity	356:56:10923:10937	3237	2	True				
ANR	3493	ParameterType	size_t		3237	0					
ANR	3494	Identifier	capacity		3237	1					
ANR	3495	CFGEntryNode	ENTRY		3237		True				
ANR	3496	CFGExitNode	EXIT		3237		True				
ANR	3497	Symbol	tag_len		3237						
ANR	3498	Symbol	CRYPTO_ERROR		3237						
ANR	3499	Symbol	& clen		3237						
ANR	3500	Symbol	CRYPTO_OK		3237						
ANR	3501	Symbol	capacity		3237						
ANR	3502	Symbol	* plaintext		3237						
ANR	3503	Symbol	salt_len		3237						
ANR	3504	Symbol	aead_cipher_encrypt		3237						
ANR	3505	Symbol	tmp		3237						
ANR	3506	Symbol	plaintext -> data		3237						
ANR	3507	Symbol	cipher		3237						
ANR	3508	Symbol	ciphertext		3237						
ANR	3509	Symbol	ciphertext -> len		3237						
ANR	3510	Symbol	cipher_ctx		3237						
ANR	3511	Symbol	NULL		3237						
ANR	3512	Symbol	err		3237						
ANR	3513	Symbol	* cipher		3237						
ANR	3514	Symbol	cipher -> tag_len		3237						
ANR	3515	Symbol	& cipher_ctx		3237						
ANR	3516	Symbol	cipher_ctx . salt		3237						
ANR	3517	Symbol	plaintext		3237						
ANR	3518	Symbol	cipher_ctx . nonce		3237						
ANR	3519	Symbol	plaintext -> len		3237						
ANR	3520	Symbol	cipher_ctx . skey		3237						
ANR	3521	Symbol	cipher -> key_len		3237						
ANR	3522	Symbol	ciphertext -> data		3237						
ANR	3523	Symbol	& tmp		3237						
ANR	3524	Symbol	* ciphertext		3237						
ANR	3525	Symbol	clen		3237						
ANR	3526	Function	aead_decrypt_all	395:0:12096:13567							
ANR	3527	FunctionDef	"aead_decrypt_all (buffer_t * ciphertext , cipher_t * cipher , size_t capacity)"		3526	0					
ANR	3528	CompoundStatement		397:0:12174:13567	3526	0					
ANR	3529	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	398:4:12180:12214	3526	0	True				
ANR	3530	IdentifierDecl	salt_len = cipher -> key_len		3526	0					
ANR	3531	IdentifierDeclType	size_t		3526	0					
ANR	3532	Identifier	salt_len		3526	1					
ANR	3533	AssignmentExpression	salt_len = cipher -> key_len		3526	2		=			
ANR	3534	Identifier	salt_len		3526	0					
ANR	3535	PtrMemberAccess	cipher -> key_len		3526	1					
ANR	3536	Identifier	cipher		3526	0					
ANR	3537	Identifier	key_len		3526	1					
ANR	3538	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	399:4:12220:12254	3526	1	True				
ANR	3539	IdentifierDecl	tag_len = cipher -> tag_len		3526	0					
ANR	3540	IdentifierDeclType	size_t		3526	0					
ANR	3541	Identifier	tag_len		3526	1					
ANR	3542	AssignmentExpression	tag_len = cipher -> tag_len		3526	2		=			
ANR	3543	Identifier	tag_len		3526	0					
ANR	3544	PtrMemberAccess	cipher -> tag_len		3526	1					
ANR	3545	Identifier	cipher		3526	0					
ANR	3546	Identifier	tag_len		3526	1					
ANR	3547	IdentifierDeclStatement	int err = CRYPTO_OK ;	400:4:12260:12288	3526	2	True				
ANR	3548	IdentifierDecl	err = CRYPTO_OK		3526	0					
ANR	3549	IdentifierDeclType	int		3526	0					
ANR	3550	Identifier	err		3526	1					
ANR	3551	AssignmentExpression	err = CRYPTO_OK		3526	2		=			
ANR	3552	Identifier	CRYPTO_OK		3526	0					
ANR	3553	Identifier	CRYPTO_OK		3526	1					
ANR	3554	IfStatement	if ( ciphertext -> len <= salt_len + tag_len )		3526	3					
ANR	3555	Condition	ciphertext -> len <= salt_len + tag_len	402:8:12299:12335	3526	0	True				
ANR	3556	RelationalExpression	ciphertext -> len <= salt_len + tag_len		3526	0		<=			
ANR	3557	PtrMemberAccess	ciphertext -> len		3526	0					
ANR	3558	Identifier	ciphertext		3526	0					
ANR	3559	Identifier	len		3526	1					
ANR	3560	AdditiveExpression	salt_len + tag_len		3526	1		+			
ANR	3561	Identifier	salt_len		3526	0					
ANR	3562	Identifier	tag_len		3526	1					
ANR	3563	CompoundStatement		6:47:163:163	3526	1					
ANR	3564	ReturnStatement	return CRYPTO_ERROR ;	403:8:12348:12367	3526	0	True				
ANR	3565	Identifier	CRYPTO_ERROR		3526	0					
ANR	3566	IdentifierDeclStatement	cipher_ctx_t cipher_ctx ;	406:4:12380:12403	3526	4	True				
ANR	3567	IdentifierDecl	cipher_ctx		3526	0					
ANR	3568	IdentifierDeclType	cipher_ctx_t		3526	0					
ANR	3569	Identifier	cipher_ctx		3526	1					
ANR	3570	ExpressionStatement	"aead_ctx_init ( cipher , & cipher_ctx , 0 )"	407:4:12409:12446	3526	5	True				
ANR	3571	CallExpression	"aead_ctx_init ( cipher , & cipher_ctx , 0 )"		3526	0					
ANR	3572	Callee	aead_ctx_init		3526	0					
ANR	3573	Identifier	aead_ctx_init		3526	0					
ANR	3574	ArgumentList	cipher		3526	1					
ANR	3575	Argument	cipher		3526	0					
ANR	3576	Identifier	cipher		3526	0					
ANR	3577	Argument	& cipher_ctx		3526	1					
ANR	3578	UnaryOperationExpression	& cipher_ctx		3526	0					
ANR	3579	UnaryOperator	&		3526	0					
ANR	3580	Identifier	cipher_ctx		3526	1					
ANR	3581	Argument	0		3526	2					
ANR	3582	PrimaryExpression	0		3526	0					
ANR	3583	Statement	static	409:4:12453:12458	3526	6	True				
ANR	3584	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	409:11:12460:12492	3526	7	True				
ANR	3585	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		3526	0					
ANR	3586	IdentifierDeclType	buffer_t		3526	0					
ANR	3587	Identifier	tmp		3526	1					
ANR	3588	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		3526	2		=			
ANR	3589	Identifier	tmp		3526	0					
ANR	3590	InitializerList	0		3526	1					
ANR	3591	PrimaryExpression	0		3526	0					
ANR	3592	PrimaryExpression	0		3526	1					
ANR	3593	PrimaryExpression	0		3526	2					
ANR	3594	Identifier	NULL		3526	3					
ANR	3595	ExpressionStatement	"brealloc ( & tmp , ciphertext -> len , capacity )"	410:4:12498:12539	3526	8	True				
ANR	3596	CallExpression	"brealloc ( & tmp , ciphertext -> len , capacity )"		3526	0					
ANR	3597	Callee	brealloc		3526	0					
ANR	3598	Identifier	brealloc		3526	0					
ANR	3599	ArgumentList	& tmp		3526	1					
ANR	3600	Argument	& tmp		3526	0					
ANR	3601	UnaryOperationExpression	& tmp		3526	0					
ANR	3602	UnaryOperator	&		3526	0					
ANR	3603	Identifier	tmp		3526	1					
ANR	3604	Argument	ciphertext -> len		3526	1					
ANR	3605	PtrMemberAccess	ciphertext -> len		3526	0					
ANR	3606	Identifier	ciphertext		3526	0					
ANR	3607	Identifier	len		3526	1					
ANR	3608	Argument	capacity		3526	2					
ANR	3609	Identifier	capacity		3526	0					
ANR	3610	IdentifierDeclStatement	buffer_t * plaintext = & tmp ;	411:4:12545:12571	3526	9	True				
ANR	3611	IdentifierDecl	* plaintext = & tmp		3526	0					
ANR	3612	IdentifierDeclType	buffer_t *		3526	0					
ANR	3613	Identifier	plaintext		3526	1					
ANR	3614	AssignmentExpression	* plaintext = & tmp		3526	2		=			
ANR	3615	Identifier	plaintext		3526	0					
ANR	3616	UnaryOperationExpression	& tmp		3526	1					
ANR	3617	UnaryOperator	&		3526	0					
ANR	3618	Identifier	tmp		3526	1					
ANR	3619	ExpressionStatement	plaintext -> len = ciphertext -> len - salt_len - tag_len	412:4:12577:12630	3526	10	True				
ANR	3620	AssignmentExpression	plaintext -> len = ciphertext -> len - salt_len - tag_len		3526	0		=			
ANR	3621	PtrMemberAccess	plaintext -> len		3526	0					
ANR	3622	Identifier	plaintext		3526	0					
ANR	3623	Identifier	len		3526	1					
ANR	3624	AdditiveExpression	ciphertext -> len - salt_len - tag_len		3526	1		-			
ANR	3625	PtrMemberAccess	ciphertext -> len		3526	0					
ANR	3626	Identifier	ciphertext		3526	0					
ANR	3627	Identifier	len		3526	1					
ANR	3628	AdditiveExpression	salt_len - tag_len		3526	1		-			
ANR	3629	Identifier	salt_len		3526	0					
ANR	3630	Identifier	tag_len		3526	1					
ANR	3631	IdentifierDeclStatement	uint8_t * salt = cipher_ctx . salt ;	415:4:12656:12687	3526	11	True				
ANR	3632	IdentifierDecl	* salt = cipher_ctx . salt		3526	0					
ANR	3633	IdentifierDeclType	uint8_t *		3526	0					
ANR	3634	Identifier	salt		3526	1					
ANR	3635	AssignmentExpression	* salt = cipher_ctx . salt		3526	2		=			
ANR	3636	Identifier	salt		3526	0					
ANR	3637	MemberAccess	cipher_ctx . salt		3526	1					
ANR	3638	Identifier	cipher_ctx		3526	0					
ANR	3639	Identifier	salt		3526	1					
ANR	3640	ExpressionStatement	"memcpy ( salt , ciphertext -> data , salt_len )"	416:4:12693:12733	3526	12	True				
ANR	3641	CallExpression	"memcpy ( salt , ciphertext -> data , salt_len )"		3526	0					
ANR	3642	Callee	memcpy		3526	0					
ANR	3643	Identifier	memcpy		3526	0					
ANR	3644	ArgumentList	salt		3526	1					
ANR	3645	Argument	salt		3526	0					
ANR	3646	Identifier	salt		3526	0					
ANR	3647	Argument	ciphertext -> data		3526	1					
ANR	3648	PtrMemberAccess	ciphertext -> data		3526	0					
ANR	3649	Identifier	ciphertext		3526	0					
ANR	3650	Identifier	data		3526	1					
ANR	3651	Argument	salt_len		3526	2					
ANR	3652	Identifier	salt_len		3526	0					
ANR	3653	IfStatement	"if ( ppbloom_check ( ( void * ) salt , salt_len ) == 1 )"		3526	13					
ANR	3654	Condition	"ppbloom_check ( ( void * ) salt , salt_len ) == 1"	418:8:12744:12785	3526	0	True				
ANR	3655	EqualityExpression	"ppbloom_check ( ( void * ) salt , salt_len ) == 1"		3526	0		==			
ANR	3656	CallExpression	"ppbloom_check ( ( void * ) salt , salt_len )"		3526	0					
ANR	3657	Callee	ppbloom_check		3526	0					
ANR	3658	Identifier	ppbloom_check		3526	0					
ANR	3659	ArgumentList	( void * ) salt		3526	1					
ANR	3660	Argument	( void * ) salt		3526	0					
ANR	3661	CastExpression	( void * ) salt		3526	0					
ANR	3662	CastTarget	void *		3526	0					
ANR	3663	Identifier	salt		3526	1					
ANR	3664	Argument	salt_len		3526	1					
ANR	3665	Identifier	salt_len		3526	0					
ANR	3666	PrimaryExpression	1		3526	1					
ANR	3667	CompoundStatement		22:52:613:613	3526	1					
ANR	3668	ExpressionStatement	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"	419:8:12798:12840	3526	0	True				
ANR	3669	CallExpression	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"		3526	0					
ANR	3670	Callee	LOGE		3526	0					
ANR	3671	Identifier	LOGE		3526	0					
ANR	3672	ArgumentList	"""crypto: AEAD: repeat salt detected"""		3526	1					
ANR	3673	Argument	"""crypto: AEAD: repeat salt detected"""		3526	0					
ANR	3674	PrimaryExpression	"""crypto: AEAD: repeat salt detected"""		3526	0					
ANR	3675	ReturnStatement	return CRYPTO_ERROR ;	420:8:12850:12869	3526	1	True				
ANR	3676	Identifier	CRYPTO_ERROR		3526	0					
ANR	3677	ExpressionStatement	"aead_cipher_ctx_set_key ( & cipher_ctx , 0 )"	423:4:12882:12921	3526	14	True				
ANR	3678	CallExpression	"aead_cipher_ctx_set_key ( & cipher_ctx , 0 )"		3526	0					
ANR	3679	Callee	aead_cipher_ctx_set_key		3526	0					
ANR	3680	Identifier	aead_cipher_ctx_set_key		3526	0					
ANR	3681	ArgumentList	& cipher_ctx		3526	1					
ANR	3682	Argument	& cipher_ctx		3526	0					
ANR	3683	UnaryOperationExpression	& cipher_ctx		3526	0					
ANR	3684	UnaryOperator	&		3526	0					
ANR	3685	Identifier	cipher_ctx		3526	1					
ANR	3686	Argument	0		3526	1					
ANR	3687	PrimaryExpression	0		3526	0					
ANR	3688	IdentifierDeclStatement	size_t plen = plaintext -> len ;	425:4:12928:12956	3526	15	True				
ANR	3689	IdentifierDecl	plen = plaintext -> len		3526	0					
ANR	3690	IdentifierDeclType	size_t		3526	0					
ANR	3691	Identifier	plen		3526	1					
ANR	3692	AssignmentExpression	plen = plaintext -> len		3526	2		=			
ANR	3693	Identifier	plen		3526	0					
ANR	3694	PtrMemberAccess	plaintext -> len		3526	1					
ANR	3695	Identifier	plaintext		3526	0					
ANR	3696	Identifier	len		3526	1					
ANR	3697	ExpressionStatement	"err = aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"	426:4:12962:13267	3526	16	True				
ANR	3698	AssignmentExpression	"err = aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		3526	0		=			
ANR	3699	Identifier	err		3526	0					
ANR	3700	CallExpression	"aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		3526	1					
ANR	3701	Callee	aead_cipher_decrypt		3526	0					
ANR	3702	Identifier	aead_cipher_decrypt		3526	0					
ANR	3703	ArgumentList	& cipher_ctx		3526	1					
ANR	3704	Argument	& cipher_ctx		3526	0					
ANR	3705	UnaryOperationExpression	& cipher_ctx		3526	0					
ANR	3706	UnaryOperator	&		3526	0					
ANR	3707	Identifier	cipher_ctx		3526	1					
ANR	3708	Argument	( uint8_t * ) plaintext -> data		3526	1					
ANR	3709	CastExpression	( uint8_t * ) plaintext -> data		3526	0					
ANR	3710	CastTarget	uint8_t *		3526	0					
ANR	3711	PtrMemberAccess	plaintext -> data		3526	1					
ANR	3712	Identifier	plaintext		3526	0					
ANR	3713	Identifier	data		3526	1					
ANR	3714	Argument	& plen		3526	2					
ANR	3715	UnaryOperationExpression	& plen		3526	0					
ANR	3716	UnaryOperator	&		3526	0					
ANR	3717	Identifier	plen		3526	1					
ANR	3718	Argument	( uint8_t * ) ciphertext -> data + salt_len		3526	3					
ANR	3719	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_len		3526	0		+			
ANR	3720	CastExpression	( uint8_t * ) ciphertext -> data		3526	0					
ANR	3721	CastTarget	uint8_t *		3526	0					
ANR	3722	PtrMemberAccess	ciphertext -> data		3526	1					
ANR	3723	Identifier	ciphertext		3526	0					
ANR	3724	Identifier	data		3526	1					
ANR	3725	Identifier	salt_len		3526	1					
ANR	3726	Argument	ciphertext -> len - salt_len		3526	4					
ANR	3727	AdditiveExpression	ciphertext -> len - salt_len		3526	0		-			
ANR	3728	PtrMemberAccess	ciphertext -> len		3526	0					
ANR	3729	Identifier	ciphertext		3526	0					
ANR	3730	Identifier	len		3526	1					
ANR	3731	Identifier	salt_len		3526	1					
ANR	3732	Argument	NULL		3526	5					
ANR	3733	Identifier	NULL		3526	0					
ANR	3734	Argument	0		3526	6					
ANR	3735	PrimaryExpression	0		3526	0					
ANR	3736	Argument	cipher_ctx . nonce		3526	7					
ANR	3737	MemberAccess	cipher_ctx . nonce		3526	0					
ANR	3738	Identifier	cipher_ctx		3526	0					
ANR	3739	Identifier	nonce		3526	1					
ANR	3740	Argument	cipher_ctx . skey		3526	8					
ANR	3741	MemberAccess	cipher_ctx . skey		3526	0					
ANR	3742	Identifier	cipher_ctx		3526	0					
ANR	3743	Identifier	skey		3526	1					
ANR	3744	ExpressionStatement	aead_ctx_release ( & cipher_ctx )	432:4:13274:13303	3526	17	True				
ANR	3745	CallExpression	aead_ctx_release ( & cipher_ctx )		3526	0					
ANR	3746	Callee	aead_ctx_release		3526	0					
ANR	3747	Identifier	aead_ctx_release		3526	0					
ANR	3748	ArgumentList	& cipher_ctx		3526	1					
ANR	3749	Argument	& cipher_ctx		3526	0					
ANR	3750	UnaryOperationExpression	& cipher_ctx		3526	0					
ANR	3751	UnaryOperator	&		3526	0					
ANR	3752	Identifier	cipher_ctx		3526	1					
ANR	3753	IfStatement	if ( err )		3526	18					
ANR	3754	Condition	err	434:8:13314:13316	3526	0	True				
ANR	3755	Identifier	err		3526	0					
ANR	3756	ReturnStatement	return CRYPTO_ERROR ;	435:8:13327:13346	3526	1	True				
ANR	3757	Identifier	CRYPTO_ERROR		3526	0					
ANR	3758	ExpressionStatement	"ppbloom_add ( ( void * ) salt , salt_len )"	437:4:13353:13388	3526	19	True				
ANR	3759	CallExpression	"ppbloom_add ( ( void * ) salt , salt_len )"		3526	0					
ANR	3760	Callee	ppbloom_add		3526	0					
ANR	3761	Identifier	ppbloom_add		3526	0					
ANR	3762	ArgumentList	( void * ) salt		3526	1					
ANR	3763	Argument	( void * ) salt		3526	0					
ANR	3764	CastExpression	( void * ) salt		3526	0					
ANR	3765	CastTarget	void *		3526	0					
ANR	3766	Identifier	salt		3526	1					
ANR	3767	Argument	salt_len		3526	1					
ANR	3768	Identifier	salt_len		3526	0					
ANR	3769	ExpressionStatement	"brealloc ( ciphertext , plaintext -> len , capacity )"	439:4:13395:13441	3526	20	True				
ANR	3770	CallExpression	"brealloc ( ciphertext , plaintext -> len , capacity )"		3526	0					
ANR	3771	Callee	brealloc		3526	0					
ANR	3772	Identifier	brealloc		3526	0					
ANR	3773	ArgumentList	ciphertext		3526	1					
ANR	3774	Argument	ciphertext		3526	0					
ANR	3775	Identifier	ciphertext		3526	0					
ANR	3776	Argument	plaintext -> len		3526	1					
ANR	3777	PtrMemberAccess	plaintext -> len		3526	0					
ANR	3778	Identifier	plaintext		3526	0					
ANR	3779	Identifier	len		3526	1					
ANR	3780	Argument	capacity		3526	2					
ANR	3781	Identifier	capacity		3526	0					
ANR	3782	ExpressionStatement	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"	440:4:13447:13504	3526	21	True				
ANR	3783	CallExpression	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"		3526	0					
ANR	3784	Callee	memcpy		3526	0					
ANR	3785	Identifier	memcpy		3526	0					
ANR	3786	ArgumentList	ciphertext -> data		3526	1					
ANR	3787	Argument	ciphertext -> data		3526	0					
ANR	3788	PtrMemberAccess	ciphertext -> data		3526	0					
ANR	3789	Identifier	ciphertext		3526	0					
ANR	3790	Identifier	data		3526	1					
ANR	3791	Argument	plaintext -> data		3526	1					
ANR	3792	PtrMemberAccess	plaintext -> data		3526	0					
ANR	3793	Identifier	plaintext		3526	0					
ANR	3794	Identifier	data		3526	1					
ANR	3795	Argument	plaintext -> len		3526	2					
ANR	3796	PtrMemberAccess	plaintext -> len		3526	0					
ANR	3797	Identifier	plaintext		3526	0					
ANR	3798	Identifier	len		3526	1					
ANR	3799	ExpressionStatement	ciphertext -> len = plaintext -> len	441:4:13510:13542	3526	22	True				
ANR	3800	AssignmentExpression	ciphertext -> len = plaintext -> len		3526	0		=			
ANR	3801	PtrMemberAccess	ciphertext -> len		3526	0					
ANR	3802	Identifier	ciphertext		3526	0					
ANR	3803	Identifier	len		3526	1					
ANR	3804	PtrMemberAccess	plaintext -> len		3526	1					
ANR	3805	Identifier	plaintext		3526	0					
ANR	3806	Identifier	len		3526	1					
ANR	3807	ReturnStatement	return CRYPTO_OK ;	443:4:13549:13565	3526	23	True				
ANR	3808	Identifier	CRYPTO_OK		3526	0					
ANR	3809	ReturnType	int		3526	1					
ANR	3810	Identifier	aead_decrypt_all		3526	2					
ANR	3811	ParameterList	"buffer_t * ciphertext , cipher_t * cipher , size_t capacity"		3526	3					
ANR	3812	Parameter	buffer_t * ciphertext	396:17:12117:12136	3526	0	True				
ANR	3813	ParameterType	buffer_t *		3526	0					
ANR	3814	Identifier	ciphertext		3526	1					
ANR	3815	Parameter	cipher_t * cipher	396:39:12139:12154	3526	1	True				
ANR	3816	ParameterType	cipher_t *		3526	0					
ANR	3817	Identifier	cipher		3526	1					
ANR	3818	Parameter	size_t capacity	396:57:12157:12171	3526	2	True				
ANR	3819	ParameterType	size_t		3526	0					
ANR	3820	Identifier	capacity		3526	1					
ANR	3821	CFGEntryNode	ENTRY		3526		True				
ANR	3822	CFGExitNode	EXIT		3526		True				
ANR	3823	Symbol	tag_len		3526						
ANR	3824	Symbol	CRYPTO_ERROR		3526						
ANR	3825	Symbol	CRYPTO_OK		3526						
ANR	3826	Symbol	capacity		3526						
ANR	3827	Symbol	& plen		3526						
ANR	3828	Symbol	* plaintext		3526						
ANR	3829	Symbol	plen		3526						
ANR	3830	Symbol	salt_len		3526						
ANR	3831	Symbol	tmp		3526						
ANR	3832	Symbol	plaintext -> data		3526						
ANR	3833	Symbol	cipher		3526						
ANR	3834	Symbol	ciphertext		3526						
ANR	3835	Symbol	ciphertext -> len		3526						
ANR	3836	Symbol	cipher_ctx		3526						
ANR	3837	Symbol	NULL		3526						
ANR	3838	Symbol	salt		3526						
ANR	3839	Symbol	err		3526						
ANR	3840	Symbol	* cipher		3526						
ANR	3841	Symbol	cipher -> tag_len		3526						
ANR	3842	Symbol	ppbloom_check		3526						
ANR	3843	Symbol	& cipher_ctx		3526						
ANR	3844	Symbol	cipher_ctx . salt		3526						
ANR	3845	Symbol	aead_cipher_decrypt		3526						
ANR	3846	Symbol	plaintext		3526						
ANR	3847	Symbol	cipher_ctx . nonce		3526						
ANR	3848	Symbol	plaintext -> len		3526						
ANR	3849	Symbol	cipher_ctx . skey		3526						
ANR	3850	Symbol	cipher -> key_len		3526						
ANR	3851	Symbol	ciphertext -> data		3526						
ANR	3852	Symbol	& tmp		3526						
ANR	3853	Symbol	* ciphertext		3526						
ANR	3854	Function	aead_chunk_encrypt	446:0:13570:14536							
ANR	3855	FunctionDef	"aead_chunk_encrypt (cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , uint16_t plen)"		3854	0					
ANR	3856	CompoundStatement		449:0:13689:14536	3854	0					
ANR	3857	IdentifierDeclStatement	size_t nlen = ctx -> cipher -> nonce_len ;	450:4:13695:13731	3854	0	True				
ANR	3858	IdentifierDecl	nlen = ctx -> cipher -> nonce_len		3854	0					
ANR	3859	IdentifierDeclType	size_t		3854	0					
ANR	3860	Identifier	nlen		3854	1					
ANR	3861	AssignmentExpression	nlen = ctx -> cipher -> nonce_len		3854	2		=			
ANR	3862	Identifier	nlen		3854	0					
ANR	3863	PtrMemberAccess	ctx -> cipher -> nonce_len		3854	1					
ANR	3864	PtrMemberAccess	ctx -> cipher		3854	0					
ANR	3865	Identifier	ctx		3854	0					
ANR	3866	Identifier	cipher		3854	1					
ANR	3867	Identifier	nonce_len		3854	1					
ANR	3868	IdentifierDeclStatement	size_t tlen = ctx -> cipher -> tag_len ;	451:4:13737:13771	3854	1	True				
ANR	3869	IdentifierDecl	tlen = ctx -> cipher -> tag_len		3854	0					
ANR	3870	IdentifierDeclType	size_t		3854	0					
ANR	3871	Identifier	tlen		3854	1					
ANR	3872	AssignmentExpression	tlen = ctx -> cipher -> tag_len		3854	2		=			
ANR	3873	Identifier	tlen		3854	0					
ANR	3874	PtrMemberAccess	ctx -> cipher -> tag_len		3854	1					
ANR	3875	PtrMemberAccess	ctx -> cipher		3854	0					
ANR	3876	Identifier	ctx		3854	0					
ANR	3877	Identifier	cipher		3854	1					
ANR	3878	Identifier	tag_len		3854	1					
ANR	3879	ExpressionStatement	assert ( plen <= CHUNK_SIZE_MASK )	453:4:13778:13809	3854	2	True				
ANR	3880	CallExpression	assert ( plen <= CHUNK_SIZE_MASK )		3854	0					
ANR	3881	Callee	assert		3854	0					
ANR	3882	Identifier	assert		3854	0					
ANR	3883	ArgumentList	plen <= CHUNK_SIZE_MASK		3854	1					
ANR	3884	Argument	plen <= CHUNK_SIZE_MASK		3854	0					
ANR	3885	RelationalExpression	plen <= CHUNK_SIZE_MASK		3854	0		<=			
ANR	3886	Identifier	plen		3854	0					
ANR	3887	Identifier	CHUNK_SIZE_MASK		3854	1					
ANR	3888	IdentifierDeclStatement	int err ;	455:4:13816:13823	3854	3	True				
ANR	3889	IdentifierDecl	err		3854	0					
ANR	3890	IdentifierDeclType	int		3854	0					
ANR	3891	Identifier	err		3854	1					
ANR	3892	IdentifierDeclStatement	size_t clen ;	456:4:13829:13840	3854	4	True				
ANR	3893	IdentifierDecl	clen		3854	0					
ANR	3894	IdentifierDeclType	size_t		3854	0					
ANR	3895	Identifier	clen		3854	1					
ANR	3896	IdentifierDeclStatement	uint8_t len_buf [ CHUNK_SIZE_LEN ] ;	457:4:13846:13877	3854	5	True				
ANR	3897	IdentifierDecl	len_buf [ CHUNK_SIZE_LEN ]		3854	0					
ANR	3898	IdentifierDeclType	uint8_t [ CHUNK_SIZE_LEN ]		3854	0					
ANR	3899	Identifier	len_buf		3854	1					
ANR	3900	Identifier	CHUNK_SIZE_LEN		3854	2					
ANR	3901	IdentifierDeclStatement	uint16_t t = htons ( plen & CHUNK_SIZE_MASK ) ;	458:4:13883:13925	3854	6	True				
ANR	3902	IdentifierDecl	t = htons ( plen & CHUNK_SIZE_MASK )		3854	0					
ANR	3903	IdentifierDeclType	uint16_t		3854	0					
ANR	3904	Identifier	t		3854	1					
ANR	3905	AssignmentExpression	t = htons ( plen & CHUNK_SIZE_MASK )		3854	2		=			
ANR	3906	Identifier	t		3854	0					
ANR	3907	CallExpression	htons ( plen & CHUNK_SIZE_MASK )		3854	1					
ANR	3908	Callee	htons		3854	0					
ANR	3909	Identifier	htons		3854	0					
ANR	3910	ArgumentList	plen & CHUNK_SIZE_MASK		3854	1					
ANR	3911	Argument	plen & CHUNK_SIZE_MASK		3854	0					
ANR	3912	BitAndExpression	plen & CHUNK_SIZE_MASK		3854	0		&			
ANR	3913	Identifier	plen		3854	0					
ANR	3914	Identifier	CHUNK_SIZE_MASK		3854	1					
ANR	3915	ExpressionStatement	"memcpy ( len_buf , & t , CHUNK_SIZE_LEN )"	459:4:13931:13966	3854	7	True				
ANR	3916	CallExpression	"memcpy ( len_buf , & t , CHUNK_SIZE_LEN )"		3854	0					
ANR	3917	Callee	memcpy		3854	0					
ANR	3918	Identifier	memcpy		3854	0					
ANR	3919	ArgumentList	len_buf		3854	1					
ANR	3920	Argument	len_buf		3854	0					
ANR	3921	Identifier	len_buf		3854	0					
ANR	3922	Argument	& t		3854	1					
ANR	3923	UnaryOperationExpression	& t		3854	0					
ANR	3924	UnaryOperator	&		3854	0					
ANR	3925	Identifier	t		3854	1					
ANR	3926	Argument	CHUNK_SIZE_LEN		3854	2					
ANR	3927	Identifier	CHUNK_SIZE_LEN		3854	0					
ANR	3928	ExpressionStatement	clen = CHUNK_SIZE_LEN + tlen	461:4:13973:14001	3854	8	True				
ANR	3929	AssignmentExpression	clen = CHUNK_SIZE_LEN + tlen		3854	0		=			
ANR	3930	Identifier	clen		3854	0					
ANR	3931	AdditiveExpression	CHUNK_SIZE_LEN + tlen		3854	1		+			
ANR	3932	Identifier	CHUNK_SIZE_LEN		3854	0					
ANR	3933	Identifier	tlen		3854	1					
ANR	3934	ExpressionStatement	"err = aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"	462:4:14007:14127	3854	9	True				
ANR	3935	AssignmentExpression	"err = aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"		3854	0		=			
ANR	3936	Identifier	err		3854	0					
ANR	3937	CallExpression	"aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"		3854	1					
ANR	3938	Callee	aead_cipher_encrypt		3854	0					
ANR	3939	Identifier	aead_cipher_encrypt		3854	0					
ANR	3940	ArgumentList	ctx		3854	1					
ANR	3941	Argument	ctx		3854	0					
ANR	3942	Identifier	ctx		3854	0					
ANR	3943	Argument	c		3854	1					
ANR	3944	Identifier	c		3854	0					
ANR	3945	Argument	& clen		3854	2					
ANR	3946	UnaryOperationExpression	& clen		3854	0					
ANR	3947	UnaryOperator	&		3854	0					
ANR	3948	Identifier	clen		3854	1					
ANR	3949	Argument	len_buf		3854	3					
ANR	3950	Identifier	len_buf		3854	0					
ANR	3951	Argument	CHUNK_SIZE_LEN		3854	4					
ANR	3952	Identifier	CHUNK_SIZE_LEN		3854	0					
ANR	3953	Argument	NULL		3854	5					
ANR	3954	Identifier	NULL		3854	0					
ANR	3955	Argument	0		3854	6					
ANR	3956	PrimaryExpression	0		3854	0					
ANR	3957	Argument	n		3854	7					
ANR	3958	Identifier	n		3854	0					
ANR	3959	Argument	ctx -> skey		3854	8					
ANR	3960	PtrMemberAccess	ctx -> skey		3854	0					
ANR	3961	Identifier	ctx		3854	0					
ANR	3962	Identifier	skey		3854	1					
ANR	3963	IfStatement	if ( err )		3854	10					
ANR	3964	Condition	err	464:8:14137:14139	3854	0	True				
ANR	3965	Identifier	err		3854	0					
ANR	3966	ReturnStatement	return CRYPTO_ERROR ;	465:8:14150:14169	3854	1	True				
ANR	3967	Identifier	CRYPTO_ERROR		3854	0					
ANR	3968	ExpressionStatement	assert ( clen == CHUNK_SIZE_LEN + tlen )	467:4:14176:14213	3854	11	True				
ANR	3969	CallExpression	assert ( clen == CHUNK_SIZE_LEN + tlen )		3854	0					
ANR	3970	Callee	assert		3854	0					
ANR	3971	Identifier	assert		3854	0					
ANR	3972	ArgumentList	clen == CHUNK_SIZE_LEN + tlen		3854	1					
ANR	3973	Argument	clen == CHUNK_SIZE_LEN + tlen		3854	0					
ANR	3974	EqualityExpression	clen == CHUNK_SIZE_LEN + tlen		3854	0		==			
ANR	3975	Identifier	clen		3854	0					
ANR	3976	AdditiveExpression	CHUNK_SIZE_LEN + tlen		3854	1		+			
ANR	3977	Identifier	CHUNK_SIZE_LEN		3854	0					
ANR	3978	Identifier	tlen		3854	1					
ANR	3979	ExpressionStatement	"sodium_increment ( n , nlen )"	469:4:14220:14245	3854	12	True				
ANR	3980	CallExpression	"sodium_increment ( n , nlen )"		3854	0					
ANR	3981	Callee	sodium_increment		3854	0					
ANR	3982	Identifier	sodium_increment		3854	0					
ANR	3983	ArgumentList	n		3854	1					
ANR	3984	Argument	n		3854	0					
ANR	3985	Identifier	n		3854	0					
ANR	3986	Argument	nlen		3854	1					
ANR	3987	Identifier	nlen		3854	0					
ANR	3988	ExpressionStatement	clen = plen + tlen	471:4:14252:14270	3854	13	True				
ANR	3989	AssignmentExpression	clen = plen + tlen		3854	0		=			
ANR	3990	Identifier	clen		3854	0					
ANR	3991	AdditiveExpression	plen + tlen		3854	1		+			
ANR	3992	Identifier	plen		3854	0					
ANR	3993	Identifier	tlen		3854	1					
ANR	3994	ExpressionStatement	"err = aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"	472:4:14276:14403	3854	14	True				
ANR	3995	AssignmentExpression	"err = aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"		3854	0		=			
ANR	3996	Identifier	err		3854	0					
ANR	3997	CallExpression	"aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"		3854	1					
ANR	3998	Callee	aead_cipher_encrypt		3854	0					
ANR	3999	Identifier	aead_cipher_encrypt		3854	0					
ANR	4000	ArgumentList	ctx		3854	1					
ANR	4001	Argument	ctx		3854	0					
ANR	4002	Identifier	ctx		3854	0					
ANR	4003	Argument	c + CHUNK_SIZE_LEN + tlen		3854	1					
ANR	4004	AdditiveExpression	c + CHUNK_SIZE_LEN + tlen		3854	0		+			
ANR	4005	Identifier	c		3854	0					
ANR	4006	AdditiveExpression	CHUNK_SIZE_LEN + tlen		3854	1		+			
ANR	4007	Identifier	CHUNK_SIZE_LEN		3854	0					
ANR	4008	Identifier	tlen		3854	1					
ANR	4009	Argument	& clen		3854	2					
ANR	4010	UnaryOperationExpression	& clen		3854	0					
ANR	4011	UnaryOperator	&		3854	0					
ANR	4012	Identifier	clen		3854	1					
ANR	4013	Argument	p		3854	3					
ANR	4014	Identifier	p		3854	0					
ANR	4015	Argument	plen		3854	4					
ANR	4016	Identifier	plen		3854	0					
ANR	4017	Argument	NULL		3854	5					
ANR	4018	Identifier	NULL		3854	0					
ANR	4019	Argument	0		3854	6					
ANR	4020	PrimaryExpression	0		3854	0					
ANR	4021	Argument	n		3854	7					
ANR	4022	Identifier	n		3854	0					
ANR	4023	Argument	ctx -> skey		3854	8					
ANR	4024	PtrMemberAccess	ctx -> skey		3854	0					
ANR	4025	Identifier	ctx		3854	0					
ANR	4026	Identifier	skey		3854	1					
ANR	4027	IfStatement	if ( err )		3854	15					
ANR	4028	Condition	err	474:8:14413:14415	3854	0	True				
ANR	4029	Identifier	err		3854	0					
ANR	4030	ReturnStatement	return CRYPTO_ERROR ;	475:8:14426:14445	3854	1	True				
ANR	4031	Identifier	CRYPTO_ERROR		3854	0					
ANR	4032	ExpressionStatement	assert ( clen == plen + tlen )	477:4:14452:14479	3854	16	True				
ANR	4033	CallExpression	assert ( clen == plen + tlen )		3854	0					
ANR	4034	Callee	assert		3854	0					
ANR	4035	Identifier	assert		3854	0					
ANR	4036	ArgumentList	clen == plen + tlen		3854	1					
ANR	4037	Argument	clen == plen + tlen		3854	0					
ANR	4038	EqualityExpression	clen == plen + tlen		3854	0		==			
ANR	4039	Identifier	clen		3854	0					
ANR	4040	AdditiveExpression	plen + tlen		3854	1		+			
ANR	4041	Identifier	plen		3854	0					
ANR	4042	Identifier	tlen		3854	1					
ANR	4043	ExpressionStatement	"sodium_increment ( n , nlen )"	479:4:14486:14511	3854	17	True				
ANR	4044	CallExpression	"sodium_increment ( n , nlen )"		3854	0					
ANR	4045	Callee	sodium_increment		3854	0					
ANR	4046	Identifier	sodium_increment		3854	0					
ANR	4047	ArgumentList	n		3854	1					
ANR	4048	Argument	n		3854	0					
ANR	4049	Identifier	n		3854	0					
ANR	4050	Argument	nlen		3854	1					
ANR	4051	Identifier	nlen		3854	0					
ANR	4052	ReturnStatement	return CRYPTO_OK ;	481:4:14518:14534	3854	18	True				
ANR	4053	Identifier	CRYPTO_OK		3854	0					
ANR	4054	ReturnType	static int		3854	1					
ANR	4055	Identifier	aead_chunk_encrypt		3854	2					
ANR	4056	ParameterList	"cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , uint16_t plen"		3854	3					
ANR	4057	Parameter	cipher_ctx_t * ctx	447:19:13600:13616	3854	0	True				
ANR	4058	ParameterType	cipher_ctx_t *		3854	0					
ANR	4059	Identifier	ctx		3854	1					
ANR	4060	Parameter	uint8_t * p	447:38:13619:13628	3854	1	True				
ANR	4061	ParameterType	uint8_t *		3854	0					
ANR	4062	Identifier	p		3854	1					
ANR	4063	Parameter	uint8_t * c	447:50:13631:13640	3854	2	True				
ANR	4064	ParameterType	uint8_t *		3854	0					
ANR	4065	Identifier	c		3854	1					
ANR	4066	Parameter	uint8_t * n	448:19:13662:13671	3854	3	True				
ANR	4067	ParameterType	uint8_t *		3854	0					
ANR	4068	Identifier	n		3854	1					
ANR	4069	Parameter	uint16_t plen	448:31:13674:13686	3854	4	True				
ANR	4070	ParameterType	uint16_t		3854	0					
ANR	4071	Identifier	plen		3854	1					
ANR	4072	CFGEntryNode	ENTRY		3854		True				
ANR	4073	CFGExitNode	EXIT		3854		True				
ANR	4074	Symbol	CRYPTO_ERROR		3854						
ANR	4075	Symbol	& clen		3854						
ANR	4076	Symbol	CRYPTO_OK		3854						
ANR	4077	Symbol	ctx -> cipher -> tag_len		3854						
ANR	4078	Symbol	htons		3854						
ANR	4079	Symbol	CHUNK_SIZE_LEN		3854						
ANR	4080	Symbol	ctx -> skey		3854						
ANR	4081	Symbol	plen		3854						
ANR	4082	Symbol	aead_cipher_encrypt		3854						
ANR	4083	Symbol	nlen		3854						
ANR	4084	Symbol	tlen		3854						
ANR	4085	Symbol	CHUNK_SIZE_MASK		3854						
ANR	4086	Symbol	ctx -> cipher -> nonce_len		3854						
ANR	4087	Symbol	c		3854						
ANR	4088	Symbol	* ctx -> cipher		3854						
ANR	4089	Symbol	NULL		3854						
ANR	4090	Symbol	err		3854						
ANR	4091	Symbol	ctx		3854						
ANR	4092	Symbol	n		3854						
ANR	4093	Symbol	* ctx		3854						
ANR	4094	Symbol	p		3854						
ANR	4095	Symbol	ctx -> cipher		3854						
ANR	4096	Symbol	t		3854						
ANR	4097	Symbol	& t		3854						
ANR	4098	Symbol	* * ctx		3854						
ANR	4099	Symbol	clen		3854						
ANR	4100	Symbol	len_buf		3854						
ANR	4101	Function	aead_encrypt	485:0:14549:15875							
ANR	4102	FunctionDef	"aead_encrypt (buffer_t * plaintext , cipher_ctx_t * cipher_ctx , size_t capacity)"		4101	0					
ANR	4103	CompoundStatement		487:0:14630:15875	4101	0					
ANR	4104	IfStatement	if ( cipher_ctx == NULL )		4101	0					
ANR	4105	Condition	cipher_ctx == NULL	488:8:14640:14657	4101	0	True				
ANR	4106	EqualityExpression	cipher_ctx == NULL		4101	0		==			
ANR	4107	Identifier	cipher_ctx		4101	0					
ANR	4108	Identifier	NULL		4101	1					
ANR	4109	ReturnStatement	return CRYPTO_ERROR ;	489:8:14668:14687	4101	1	True				
ANR	4110	Identifier	CRYPTO_ERROR		4101	0					
ANR	4111	IfStatement	if ( plaintext -> len == 0 )		4101	1					
ANR	4112	Condition	plaintext -> len == 0	491:8:14698:14716	4101	0	True				
ANR	4113	EqualityExpression	plaintext -> len == 0		4101	0		==			
ANR	4114	PtrMemberAccess	plaintext -> len		4101	0					
ANR	4115	Identifier	plaintext		4101	0					
ANR	4116	Identifier	len		4101	1					
ANR	4117	PrimaryExpression	0		4101	1					
ANR	4118	CompoundStatement		5:29:88:88	4101	1					
ANR	4119	ReturnStatement	return CRYPTO_OK ;	492:8:14729:14745	4101	0	True				
ANR	4120	Identifier	CRYPTO_OK		4101	0					
ANR	4121	Statement	static	495:4:14758:14763	4101	2	True				
ANR	4122	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	495:11:14765:14797	4101	3	True				
ANR	4123	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		4101	0					
ANR	4124	IdentifierDeclType	buffer_t		4101	0					
ANR	4125	Identifier	tmp		4101	1					
ANR	4126	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		4101	2		=			
ANR	4127	Identifier	tmp		4101	0					
ANR	4128	InitializerList	0		4101	1					
ANR	4129	PrimaryExpression	0		4101	0					
ANR	4130	PrimaryExpression	0		4101	1					
ANR	4131	PrimaryExpression	0		4101	2					
ANR	4132	Identifier	NULL		4101	3					
ANR	4133	IdentifierDeclStatement	buffer_t * ciphertext ;	496:4:14803:14823	4101	4	True				
ANR	4134	IdentifierDecl	* ciphertext		4101	0					
ANR	4135	IdentifierDeclType	buffer_t *		4101	0					
ANR	4136	Identifier	ciphertext		4101	1					
ANR	4137	IdentifierDeclStatement	cipher_t * cipher = cipher_ctx -> cipher ;	498:4:14830:14868	4101	5	True				
ANR	4138	IdentifierDecl	* cipher = cipher_ctx -> cipher		4101	0					
ANR	4139	IdentifierDeclType	cipher_t *		4101	0					
ANR	4140	Identifier	cipher		4101	1					
ANR	4141	AssignmentExpression	* cipher = cipher_ctx -> cipher		4101	2		=			
ANR	4142	Identifier	cipher		4101	0					
ANR	4143	PtrMemberAccess	cipher_ctx -> cipher		4101	1					
ANR	4144	Identifier	cipher_ctx		4101	0					
ANR	4145	Identifier	cipher		4101	1					
ANR	4146	IdentifierDeclStatement	int err = CRYPTO_ERROR ;	499:4:14874:14906	4101	6	True				
ANR	4147	IdentifierDecl	err = CRYPTO_ERROR		4101	0					
ANR	4148	IdentifierDeclType	int		4101	0					
ANR	4149	Identifier	err		4101	1					
ANR	4150	AssignmentExpression	err = CRYPTO_ERROR		4101	2		=			
ANR	4151	Identifier	CRYPTO_ERROR		4101	0					
ANR	4152	Identifier	CRYPTO_ERROR		4101	1					
ANR	4153	IdentifierDeclStatement	size_t salt_ofst = 0 ;	500:4:14912:14933	4101	7	True				
ANR	4154	IdentifierDecl	salt_ofst = 0		4101	0					
ANR	4155	IdentifierDeclType	size_t		4101	0					
ANR	4156	Identifier	salt_ofst		4101	1					
ANR	4157	AssignmentExpression	salt_ofst = 0		4101	2		=			
ANR	4158	Identifier	salt_ofst		4101	0					
ANR	4159	PrimaryExpression	0		4101	1					
ANR	4160	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	501:4:14939:14974	4101	8	True				
ANR	4161	IdentifierDecl	salt_len = cipher -> key_len		4101	0					
ANR	4162	IdentifierDeclType	size_t		4101	0					
ANR	4163	Identifier	salt_len		4101	1					
ANR	4164	AssignmentExpression	salt_len = cipher -> key_len		4101	2		=			
ANR	4165	Identifier	salt_len		4101	0					
ANR	4166	PtrMemberAccess	cipher -> key_len		4101	1					
ANR	4167	Identifier	cipher		4101	0					
ANR	4168	Identifier	key_len		4101	1					
ANR	4169	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	502:4:14980:15015	4101	9	True				
ANR	4170	IdentifierDecl	tag_len = cipher -> tag_len		4101	0					
ANR	4171	IdentifierDeclType	size_t		4101	0					
ANR	4172	Identifier	tag_len		4101	1					
ANR	4173	AssignmentExpression	tag_len = cipher -> tag_len		4101	2		=			
ANR	4174	Identifier	tag_len		4101	0					
ANR	4175	PtrMemberAccess	cipher -> tag_len		4101	1					
ANR	4176	Identifier	cipher		4101	0					
ANR	4177	Identifier	tag_len		4101	1					
ANR	4178	IfStatement	if ( ! cipher_ctx -> init )		4101	10					
ANR	4179	Condition	! cipher_ctx -> init	504:8:15026:15042	4101	0	True				
ANR	4180	UnaryOperationExpression	! cipher_ctx -> init		4101	0					
ANR	4181	UnaryOperator	!		4101	0					
ANR	4182	PtrMemberAccess	cipher_ctx -> init		4101	1					
ANR	4183	Identifier	cipher_ctx		4101	0					
ANR	4184	Identifier	init		4101	1					
ANR	4185	CompoundStatement		18:27:414:414	4101	1					
ANR	4186	ExpressionStatement	salt_ofst = salt_len	505:8:15055:15075	4101	0	True				
ANR	4187	AssignmentExpression	salt_ofst = salt_len		4101	0		=			
ANR	4188	Identifier	salt_ofst		4101	0					
ANR	4189	Identifier	salt_len		4101	1					
ANR	4190	IdentifierDeclStatement	size_t out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN ;	508:4:15088:15162	4101	11	True				
ANR	4191	IdentifierDecl	out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		4101	0					
ANR	4192	IdentifierDeclType	size_t		4101	0					
ANR	4193	Identifier	out_len		4101	1					
ANR	4194	AssignmentExpression	out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		4101	2		=			
ANR	4195	Identifier	out_len		4101	0					
ANR	4196	AdditiveExpression	salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		4101	1		+			
ANR	4197	Identifier	salt_ofst		4101	0					
ANR	4198	AdditiveExpression	2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		4101	1		+			
ANR	4199	MultiplicativeExpression	2 * tag_len		4101	0		*			
ANR	4200	PrimaryExpression	2		4101	0					
ANR	4201	Identifier	tag_len		4101	1					
ANR	4202	AdditiveExpression	plaintext -> len + CHUNK_SIZE_LEN		4101	1		+			
ANR	4203	PtrMemberAccess	plaintext -> len		4101	0					
ANR	4204	Identifier	plaintext		4101	0					
ANR	4205	Identifier	len		4101	1					
ANR	4206	Identifier	CHUNK_SIZE_LEN		4101	1					
ANR	4207	ExpressionStatement	"brealloc ( & tmp , out_len , capacity )"	509:4:15168:15201	4101	12	True				
ANR	4208	CallExpression	"brealloc ( & tmp , out_len , capacity )"		4101	0					
ANR	4209	Callee	brealloc		4101	0					
ANR	4210	Identifier	brealloc		4101	0					
ANR	4211	ArgumentList	& tmp		4101	1					
ANR	4212	Argument	& tmp		4101	0					
ANR	4213	UnaryOperationExpression	& tmp		4101	0					
ANR	4214	UnaryOperator	&		4101	0					
ANR	4215	Identifier	tmp		4101	1					
ANR	4216	Argument	out_len		4101	1					
ANR	4217	Identifier	out_len		4101	0					
ANR	4218	Argument	capacity		4101	2					
ANR	4219	Identifier	capacity		4101	0					
ANR	4220	ExpressionStatement	ciphertext = & tmp	510:4:15207:15229	4101	13	True				
ANR	4221	AssignmentExpression	ciphertext = & tmp		4101	0		=			
ANR	4222	Identifier	ciphertext		4101	0					
ANR	4223	UnaryOperationExpression	& tmp		4101	1					
ANR	4224	UnaryOperator	&		4101	0					
ANR	4225	Identifier	tmp		4101	1					
ANR	4226	ExpressionStatement	ciphertext -> len = out_len	511:4:15235:15260	4101	14	True				
ANR	4227	AssignmentExpression	ciphertext -> len = out_len		4101	0		=			
ANR	4228	PtrMemberAccess	ciphertext -> len		4101	0					
ANR	4229	Identifier	ciphertext		4101	0					
ANR	4230	Identifier	len		4101	1					
ANR	4231	Identifier	out_len		4101	1					
ANR	4232	IfStatement	if ( ! cipher_ctx -> init )		4101	15					
ANR	4233	Condition	! cipher_ctx -> init	513:8:15271:15287	4101	0	True				
ANR	4234	UnaryOperationExpression	! cipher_ctx -> init		4101	0					
ANR	4235	UnaryOperator	!		4101	0					
ANR	4236	PtrMemberAccess	cipher_ctx -> init		4101	1					
ANR	4237	Identifier	cipher_ctx		4101	0					
ANR	4238	Identifier	init		4101	1					
ANR	4239	CompoundStatement		27:27:659:659	4101	1					
ANR	4240	ExpressionStatement	"memcpy ( ciphertext -> data , cipher_ctx -> salt , salt_len )"	514:8:15300:15352	4101	0	True				
ANR	4241	CallExpression	"memcpy ( ciphertext -> data , cipher_ctx -> salt , salt_len )"		4101	0					
ANR	4242	Callee	memcpy		4101	0					
ANR	4243	Identifier	memcpy		4101	0					
ANR	4244	ArgumentList	ciphertext -> data		4101	1					
ANR	4245	Argument	ciphertext -> data		4101	0					
ANR	4246	PtrMemberAccess	ciphertext -> data		4101	0					
ANR	4247	Identifier	ciphertext		4101	0					
ANR	4248	Identifier	data		4101	1					
ANR	4249	Argument	cipher_ctx -> salt		4101	1					
ANR	4250	PtrMemberAccess	cipher_ctx -> salt		4101	0					
ANR	4251	Identifier	cipher_ctx		4101	0					
ANR	4252	Identifier	salt		4101	1					
ANR	4253	Argument	salt_len		4101	2					
ANR	4254	Identifier	salt_len		4101	0					
ANR	4255	ExpressionStatement	"aead_cipher_ctx_set_key ( cipher_ctx , 1 )"	515:8:15362:15400	4101	1	True				
ANR	4256	CallExpression	"aead_cipher_ctx_set_key ( cipher_ctx , 1 )"		4101	0					
ANR	4257	Callee	aead_cipher_ctx_set_key		4101	0					
ANR	4258	Identifier	aead_cipher_ctx_set_key		4101	0					
ANR	4259	ArgumentList	cipher_ctx		4101	1					
ANR	4260	Argument	cipher_ctx		4101	0					
ANR	4261	Identifier	cipher_ctx		4101	0					
ANR	4262	Argument	1		4101	1					
ANR	4263	PrimaryExpression	1		4101	0					
ANR	4264	ExpressionStatement	cipher_ctx -> init = 1	516:8:15410:15430	4101	2	True				
ANR	4265	AssignmentExpression	cipher_ctx -> init = 1		4101	0		=			
ANR	4266	PtrMemberAccess	cipher_ctx -> init		4101	0					
ANR	4267	Identifier	cipher_ctx		4101	0					
ANR	4268	Identifier	init		4101	1					
ANR	4269	PrimaryExpression	1		4101	1					
ANR	4270	ExpressionStatement	"err = aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"	519:4:15443:15670	4101	16	True				
ANR	4271	AssignmentExpression	"err = aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"		4101	0		=			
ANR	4272	Identifier	err		4101	0					
ANR	4273	CallExpression	"aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"		4101	1					
ANR	4274	Callee	aead_chunk_encrypt		4101	0					
ANR	4275	Identifier	aead_chunk_encrypt		4101	0					
ANR	4276	ArgumentList	cipher_ctx		4101	1					
ANR	4277	Argument	cipher_ctx		4101	0					
ANR	4278	Identifier	cipher_ctx		4101	0					
ANR	4279	Argument	( uint8_t * ) plaintext -> data		4101	1					
ANR	4280	CastExpression	( uint8_t * ) plaintext -> data		4101	0					
ANR	4281	CastTarget	uint8_t *		4101	0					
ANR	4282	PtrMemberAccess	plaintext -> data		4101	1					
ANR	4283	Identifier	plaintext		4101	0					
ANR	4284	Identifier	data		4101	1					
ANR	4285	Argument	( uint8_t * ) ciphertext -> data + salt_ofst		4101	2					
ANR	4286	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_ofst		4101	0		+			
ANR	4287	CastExpression	( uint8_t * ) ciphertext -> data		4101	0					
ANR	4288	CastTarget	uint8_t *		4101	0					
ANR	4289	PtrMemberAccess	ciphertext -> data		4101	1					
ANR	4290	Identifier	ciphertext		4101	0					
ANR	4291	Identifier	data		4101	1					
ANR	4292	Identifier	salt_ofst		4101	1					
ANR	4293	Argument	cipher_ctx -> nonce		4101	3					
ANR	4294	PtrMemberAccess	cipher_ctx -> nonce		4101	0					
ANR	4295	Identifier	cipher_ctx		4101	0					
ANR	4296	Identifier	nonce		4101	1					
ANR	4297	Argument	plaintext -> len		4101	4					
ANR	4298	PtrMemberAccess	plaintext -> len		4101	0					
ANR	4299	Identifier	plaintext		4101	0					
ANR	4300	Identifier	len		4101	1					
ANR	4301	IfStatement	if ( err )		4101	17					
ANR	4302	Condition	err	523:8:15680:15682	4101	0	True				
ANR	4303	Identifier	err		4101	0					
ANR	4304	ReturnStatement	return err ;	524:8:15693:15703	4101	1	True				
ANR	4305	Identifier	err		4101	0					
ANR	4306	ExpressionStatement	"brealloc ( plaintext , ciphertext -> len , capacity )"	526:4:15710:15756	4101	18	True				
ANR	4307	CallExpression	"brealloc ( plaintext , ciphertext -> len , capacity )"		4101	0					
ANR	4308	Callee	brealloc		4101	0					
ANR	4309	Identifier	brealloc		4101	0					
ANR	4310	ArgumentList	plaintext		4101	1					
ANR	4311	Argument	plaintext		4101	0					
ANR	4312	Identifier	plaintext		4101	0					
ANR	4313	Argument	ciphertext -> len		4101	1					
ANR	4314	PtrMemberAccess	ciphertext -> len		4101	0					
ANR	4315	Identifier	ciphertext		4101	0					
ANR	4316	Identifier	len		4101	1					
ANR	4317	Argument	capacity		4101	2					
ANR	4318	Identifier	capacity		4101	0					
ANR	4319	ExpressionStatement	"memcpy ( plaintext -> data , ciphertext -> data , ciphertext -> len )"	527:4:15762:15820	4101	19	True				
ANR	4320	CallExpression	"memcpy ( plaintext -> data , ciphertext -> data , ciphertext -> len )"		4101	0					
ANR	4321	Callee	memcpy		4101	0					
ANR	4322	Identifier	memcpy		4101	0					
ANR	4323	ArgumentList	plaintext -> data		4101	1					
ANR	4324	Argument	plaintext -> data		4101	0					
ANR	4325	PtrMemberAccess	plaintext -> data		4101	0					
ANR	4326	Identifier	plaintext		4101	0					
ANR	4327	Identifier	data		4101	1					
ANR	4328	Argument	ciphertext -> data		4101	1					
ANR	4329	PtrMemberAccess	ciphertext -> data		4101	0					
ANR	4330	Identifier	ciphertext		4101	0					
ANR	4331	Identifier	data		4101	1					
ANR	4332	Argument	ciphertext -> len		4101	2					
ANR	4333	PtrMemberAccess	ciphertext -> len		4101	0					
ANR	4334	Identifier	ciphertext		4101	0					
ANR	4335	Identifier	len		4101	1					
ANR	4336	ExpressionStatement	plaintext -> len = ciphertext -> len	528:4:15826:15858	4101	20	True				
ANR	4337	AssignmentExpression	plaintext -> len = ciphertext -> len		4101	0		=			
ANR	4338	PtrMemberAccess	plaintext -> len		4101	0					
ANR	4339	Identifier	plaintext		4101	0					
ANR	4340	Identifier	len		4101	1					
ANR	4341	PtrMemberAccess	ciphertext -> len		4101	1					
ANR	4342	Identifier	ciphertext		4101	0					
ANR	4343	Identifier	len		4101	1					
ANR	4344	ReturnStatement	return 0 ;	530:4:15865:15873	4101	21	True				
ANR	4345	PrimaryExpression	0		4101	0					
ANR	4346	ReturnType	int		4101	1					
ANR	4347	Identifier	aead_encrypt		4101	2					
ANR	4348	ParameterList	"buffer_t * plaintext , cipher_ctx_t * cipher_ctx , size_t capacity"		4101	3					
ANR	4349	Parameter	buffer_t * plaintext	486:13:14566:14584	4101	0	True				
ANR	4350	ParameterType	buffer_t *		4101	0					
ANR	4351	Identifier	plaintext		4101	1					
ANR	4352	Parameter	cipher_ctx_t * cipher_ctx	486:34:14587:14610	4101	1	True				
ANR	4353	ParameterType	cipher_ctx_t *		4101	0					
ANR	4354	Identifier	cipher_ctx		4101	1					
ANR	4355	Parameter	size_t capacity	486:60:14613:14627	4101	2	True				
ANR	4356	ParameterType	size_t		4101	0					
ANR	4357	Identifier	capacity		4101	1					
ANR	4358	CFGEntryNode	ENTRY		4101		True				
ANR	4359	CFGExitNode	EXIT		4101		True				
ANR	4360	Symbol	aead_chunk_encrypt		4101						
ANR	4361	Symbol	cipher_ctx -> cipher		4101						
ANR	4362	Symbol	tag_len		4101						
ANR	4363	Symbol	CRYPTO_ERROR		4101						
ANR	4364	Symbol	CRYPTO_OK		4101						
ANR	4365	Symbol	CHUNK_SIZE_LEN		4101						
ANR	4366	Symbol	cipher_ctx -> init		4101						
ANR	4367	Symbol	cipher_ctx -> nonce		4101						
ANR	4368	Symbol	capacity		4101						
ANR	4369	Symbol	salt_ofst		4101						
ANR	4370	Symbol	* plaintext		4101						
ANR	4371	Symbol	salt_len		4101						
ANR	4372	Symbol	tmp		4101						
ANR	4373	Symbol	plaintext -> data		4101						
ANR	4374	Symbol	cipher		4101						
ANR	4375	Symbol	ciphertext		4101						
ANR	4376	Symbol	ciphertext -> len		4101						
ANR	4377	Symbol	cipher_ctx		4101						
ANR	4378	Symbol	NULL		4101						
ANR	4379	Symbol	err		4101						
ANR	4380	Symbol	* cipher_ctx		4101						
ANR	4381	Symbol	* cipher		4101						
ANR	4382	Symbol	cipher -> tag_len		4101						
ANR	4383	Symbol	plaintext		4101						
ANR	4384	Symbol	out_len		4101						
ANR	4385	Symbol	plaintext -> len		4101						
ANR	4386	Symbol	cipher -> key_len		4101						
ANR	4387	Symbol	cipher_ctx -> salt		4101						
ANR	4388	Symbol	ciphertext -> data		4101						
ANR	4389	Symbol	& tmp		4101						
ANR	4390	Symbol	* ciphertext		4101						
ANR	4391	Function	aead_chunk_decrypt	533:0:15878:17089							
ANR	4392	FunctionDef	"aead_chunk_decrypt (cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , size_t * plen , size_t * clen)"		4391	0					
ANR	4393	CompoundStatement		536:0:16010:17089	4391	0					
ANR	4394	IdentifierDeclStatement	int err ;	537:4:16016:16023	4391	0	True				
ANR	4395	IdentifierDecl	err		4391	0					
ANR	4396	IdentifierDeclType	int		4391	0					
ANR	4397	Identifier	err		4391	1					
ANR	4398	IdentifierDeclStatement	size_t mlen ;	538:4:16029:16040	4391	1	True				
ANR	4399	IdentifierDecl	mlen		4391	0					
ANR	4400	IdentifierDeclType	size_t		4391	0					
ANR	4401	Identifier	mlen		4391	1					
ANR	4402	IdentifierDeclStatement	size_t nlen = ctx -> cipher -> nonce_len ;	539:4:16046:16082	4391	2	True				
ANR	4403	IdentifierDecl	nlen = ctx -> cipher -> nonce_len		4391	0					
ANR	4404	IdentifierDeclType	size_t		4391	0					
ANR	4405	Identifier	nlen		4391	1					
ANR	4406	AssignmentExpression	nlen = ctx -> cipher -> nonce_len		4391	2		=			
ANR	4407	Identifier	nlen		4391	0					
ANR	4408	PtrMemberAccess	ctx -> cipher -> nonce_len		4391	1					
ANR	4409	PtrMemberAccess	ctx -> cipher		4391	0					
ANR	4410	Identifier	ctx		4391	0					
ANR	4411	Identifier	cipher		4391	1					
ANR	4412	Identifier	nonce_len		4391	1					
ANR	4413	IdentifierDeclStatement	size_t tlen = ctx -> cipher -> tag_len ;	540:4:16088:16122	4391	3	True				
ANR	4414	IdentifierDecl	tlen = ctx -> cipher -> tag_len		4391	0					
ANR	4415	IdentifierDeclType	size_t		4391	0					
ANR	4416	Identifier	tlen		4391	1					
ANR	4417	AssignmentExpression	tlen = ctx -> cipher -> tag_len		4391	2		=			
ANR	4418	Identifier	tlen		4391	0					
ANR	4419	PtrMemberAccess	ctx -> cipher -> tag_len		4391	1					
ANR	4420	PtrMemberAccess	ctx -> cipher		4391	0					
ANR	4421	Identifier	ctx		4391	0					
ANR	4422	Identifier	cipher		4391	1					
ANR	4423	Identifier	tag_len		4391	1					
ANR	4424	IfStatement	if ( * clen <= 2 * tlen + CHUNK_SIZE_LEN )		4391	4					
ANR	4425	Condition	* clen <= 2 * tlen + CHUNK_SIZE_LEN	542:8:16133:16166	4391	0	True				
ANR	4426	RelationalExpression	* clen <= 2 * tlen + CHUNK_SIZE_LEN		4391	0		<=			
ANR	4427	UnaryOperationExpression	* clen		4391	0					
ANR	4428	UnaryOperator	*		4391	0					
ANR	4429	Identifier	clen		4391	1					
ANR	4430	AdditiveExpression	2 * tlen + CHUNK_SIZE_LEN		4391	1		+			
ANR	4431	MultiplicativeExpression	2 * tlen		4391	0		*			
ANR	4432	PrimaryExpression	2		4391	0					
ANR	4433	Identifier	tlen		4391	1					
ANR	4434	Identifier	CHUNK_SIZE_LEN		4391	1					
ANR	4435	ReturnStatement	return CRYPTO_NEED_MORE ;	543:8:16177:16200	4391	1	True				
ANR	4436	Identifier	CRYPTO_NEED_MORE		4391	0					
ANR	4437	IdentifierDeclStatement	uint8_t len_buf [ 2 ] ;	545:4:16207:16225	4391	5	True				
ANR	4438	IdentifierDecl	len_buf [ 2 ]		4391	0					
ANR	4439	IdentifierDeclType	uint8_t [ 2 ]		4391	0					
ANR	4440	Identifier	len_buf		4391	1					
ANR	4441	PrimaryExpression	2		4391	2					
ANR	4442	ExpressionStatement	"err = aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"	546:4:16231:16355	4391	6	True				
ANR	4443	AssignmentExpression	"err = aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"		4391	0		=			
ANR	4444	Identifier	err		4391	0					
ANR	4445	CallExpression	"aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"		4391	1					
ANR	4446	Callee	aead_cipher_decrypt		4391	0					
ANR	4447	Identifier	aead_cipher_decrypt		4391	0					
ANR	4448	ArgumentList	ctx		4391	1					
ANR	4449	Argument	ctx		4391	0					
ANR	4450	Identifier	ctx		4391	0					
ANR	4451	Argument	len_buf		4391	1					
ANR	4452	Identifier	len_buf		4391	0					
ANR	4453	Argument	plen		4391	2					
ANR	4454	Identifier	plen		4391	0					
ANR	4455	Argument	c		4391	3					
ANR	4456	Identifier	c		4391	0					
ANR	4457	Argument	CHUNK_SIZE_LEN + tlen		4391	4					
ANR	4458	AdditiveExpression	CHUNK_SIZE_LEN + tlen		4391	0		+			
ANR	4459	Identifier	CHUNK_SIZE_LEN		4391	0					
ANR	4460	Identifier	tlen		4391	1					
ANR	4461	Argument	NULL		4391	5					
ANR	4462	Identifier	NULL		4391	0					
ANR	4463	Argument	0		4391	6					
ANR	4464	PrimaryExpression	0		4391	0					
ANR	4465	Argument	n		4391	7					
ANR	4466	Identifier	n		4391	0					
ANR	4467	Argument	ctx -> skey		4391	8					
ANR	4468	PtrMemberAccess	ctx -> skey		4391	0					
ANR	4469	Identifier	ctx		4391	0					
ANR	4470	Identifier	skey		4391	1					
ANR	4471	IfStatement	if ( err )		4391	7					
ANR	4472	Condition	err	548:8:16365:16367	4391	0	True				
ANR	4473	Identifier	err		4391	0					
ANR	4474	ReturnStatement	return CRYPTO_ERROR ;	549:8:16378:16397	4391	1	True				
ANR	4475	Identifier	CRYPTO_ERROR		4391	0					
ANR	4476	ExpressionStatement	assert ( * plen == CHUNK_SIZE_LEN )	550:4:16403:16434	4391	8	True				
ANR	4477	CallExpression	assert ( * plen == CHUNK_SIZE_LEN )		4391	0					
ANR	4478	Callee	assert		4391	0					
ANR	4479	Identifier	assert		4391	0					
ANR	4480	ArgumentList	* plen == CHUNK_SIZE_LEN		4391	1					
ANR	4481	Argument	* plen == CHUNK_SIZE_LEN		4391	0					
ANR	4482	EqualityExpression	* plen == CHUNK_SIZE_LEN		4391	0		==			
ANR	4483	UnaryOperationExpression	* plen		4391	0					
ANR	4484	UnaryOperator	*		4391	0					
ANR	4485	Identifier	plen		4391	1					
ANR	4486	Identifier	CHUNK_SIZE_LEN		4391	1					
ANR	4487	ExpressionStatement	mlen = ntohs ( * ( uint16_t * ) len_buf )	552:4:16441:16475	4391	9	True				
ANR	4488	AssignmentExpression	mlen = ntohs ( * ( uint16_t * ) len_buf )		4391	0		=			
ANR	4489	Identifier	mlen		4391	0					
ANR	4490	CallExpression	ntohs ( * ( uint16_t * ) len_buf )		4391	1					
ANR	4491	Callee	ntohs		4391	0					
ANR	4492	Identifier	ntohs		4391	0					
ANR	4493	ArgumentList	* ( uint16_t * ) len_buf		4391	1					
ANR	4494	Argument	* ( uint16_t * ) len_buf		4391	0					
ANR	4495	UnaryOperationExpression	* ( uint16_t * ) len_buf		4391	0					
ANR	4496	UnaryOperator	*		4391	0					
ANR	4497	CastExpression	( uint16_t * ) len_buf		4391	1					
ANR	4498	CastTarget	uint16_t *		4391	0					
ANR	4499	Identifier	len_buf		4391	1					
ANR	4500	ExpressionStatement	mlen = mlen & CHUNK_SIZE_MASK	553:4:16481:16510	4391	10	True				
ANR	4501	AssignmentExpression	mlen = mlen & CHUNK_SIZE_MASK		4391	0		=			
ANR	4502	Identifier	mlen		4391	0					
ANR	4503	BitAndExpression	mlen & CHUNK_SIZE_MASK		4391	1		&			
ANR	4504	Identifier	mlen		4391	0					
ANR	4505	Identifier	CHUNK_SIZE_MASK		4391	1					
ANR	4506	IfStatement	if ( mlen == 0 )		4391	11					
ANR	4507	Condition	mlen == 0	555:8:16521:16529	4391	0	True				
ANR	4508	EqualityExpression	mlen == 0		4391	0		==			
ANR	4509	Identifier	mlen		4391	0					
ANR	4510	PrimaryExpression	0		4391	1					
ANR	4511	ReturnStatement	return CRYPTO_ERROR ;	556:8:16540:16559	4391	1	True				
ANR	4512	Identifier	CRYPTO_ERROR		4391	0					
ANR	4513	IdentifierDeclStatement	size_t chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen ;	558:4:16566:16617	4391	12	True				
ANR	4514	IdentifierDecl	chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen		4391	0					
ANR	4515	IdentifierDeclType	size_t		4391	0					
ANR	4516	Identifier	chunk_len		4391	1					
ANR	4517	AssignmentExpression	chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen		4391	2		=			
ANR	4518	Identifier	chunk_len		4391	0					
ANR	4519	AdditiveExpression	2 * tlen + CHUNK_SIZE_LEN + mlen		4391	1		+			
ANR	4520	MultiplicativeExpression	2 * tlen		4391	0		*			
ANR	4521	PrimaryExpression	2		4391	0					
ANR	4522	Identifier	tlen		4391	1					
ANR	4523	AdditiveExpression	CHUNK_SIZE_LEN + mlen		4391	1		+			
ANR	4524	Identifier	CHUNK_SIZE_LEN		4391	0					
ANR	4525	Identifier	mlen		4391	1					
ANR	4526	IfStatement	if ( * clen < chunk_len )		4391	13					
ANR	4527	Condition	* clen < chunk_len	560:8:16628:16644	4391	0	True				
ANR	4528	RelationalExpression	* clen < chunk_len		4391	0		<			
ANR	4529	UnaryOperationExpression	* clen		4391	0					
ANR	4530	UnaryOperator	*		4391	0					
ANR	4531	Identifier	clen		4391	1					
ANR	4532	Identifier	chunk_len		4391	1					
ANR	4533	ReturnStatement	return CRYPTO_NEED_MORE ;	561:8:16655:16678	4391	1	True				
ANR	4534	Identifier	CRYPTO_NEED_MORE		4391	0					
ANR	4535	ExpressionStatement	"sodium_increment ( n , nlen )"	563:4:16685:16710	4391	14	True				
ANR	4536	CallExpression	"sodium_increment ( n , nlen )"		4391	0					
ANR	4537	Callee	sodium_increment		4391	0					
ANR	4538	Identifier	sodium_increment		4391	0					
ANR	4539	ArgumentList	n		4391	1					
ANR	4540	Argument	n		4391	0					
ANR	4541	Identifier	n		4391	0					
ANR	4542	Argument	nlen		4391	1					
ANR	4543	Identifier	nlen		4391	0					
ANR	4544	ExpressionStatement	"err = aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"	565:4:16717:16849	4391	15	True				
ANR	4545	AssignmentExpression	"err = aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"		4391	0		=			
ANR	4546	Identifier	err		4391	0					
ANR	4547	CallExpression	"aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"		4391	1					
ANR	4548	Callee	aead_cipher_decrypt		4391	0					
ANR	4549	Identifier	aead_cipher_decrypt		4391	0					
ANR	4550	ArgumentList	ctx		4391	1					
ANR	4551	Argument	ctx		4391	0					
ANR	4552	Identifier	ctx		4391	0					
ANR	4553	Argument	p		4391	1					
ANR	4554	Identifier	p		4391	0					
ANR	4555	Argument	plen		4391	2					
ANR	4556	Identifier	plen		4391	0					
ANR	4557	Argument	c + CHUNK_SIZE_LEN + tlen		4391	3					
ANR	4558	AdditiveExpression	c + CHUNK_SIZE_LEN + tlen		4391	0		+			
ANR	4559	Identifier	c		4391	0					
ANR	4560	AdditiveExpression	CHUNK_SIZE_LEN + tlen		4391	1		+			
ANR	4561	Identifier	CHUNK_SIZE_LEN		4391	0					
ANR	4562	Identifier	tlen		4391	1					
ANR	4563	Argument	mlen + tlen		4391	4					
ANR	4564	AdditiveExpression	mlen + tlen		4391	0		+			
ANR	4565	Identifier	mlen		4391	0					
ANR	4566	Identifier	tlen		4391	1					
ANR	4567	Argument	NULL		4391	5					
ANR	4568	Identifier	NULL		4391	0					
ANR	4569	Argument	0		4391	6					
ANR	4570	PrimaryExpression	0		4391	0					
ANR	4571	Argument	n		4391	7					
ANR	4572	Identifier	n		4391	0					
ANR	4573	Argument	ctx -> skey		4391	8					
ANR	4574	PtrMemberAccess	ctx -> skey		4391	0					
ANR	4575	Identifier	ctx		4391	0					
ANR	4576	Identifier	skey		4391	1					
ANR	4577	IfStatement	if ( err )		4391	16					
ANR	4578	Condition	err	567:8:16859:16861	4391	0	True				
ANR	4579	Identifier	err		4391	0					
ANR	4580	ReturnStatement	return CRYPTO_ERROR ;	568:8:16872:16891	4391	1	True				
ANR	4581	Identifier	CRYPTO_ERROR		4391	0					
ANR	4582	ExpressionStatement	assert ( * plen == mlen )	569:4:16897:16918	4391	17	True				
ANR	4583	CallExpression	assert ( * plen == mlen )		4391	0					
ANR	4584	Callee	assert		4391	0					
ANR	4585	Identifier	assert		4391	0					
ANR	4586	ArgumentList	* plen == mlen		4391	1					
ANR	4587	Argument	* plen == mlen		4391	0					
ANR	4588	EqualityExpression	* plen == mlen		4391	0		==			
ANR	4589	UnaryOperationExpression	* plen		4391	0					
ANR	4590	UnaryOperator	*		4391	0					
ANR	4591	Identifier	plen		4391	1					
ANR	4592	Identifier	mlen		4391	1					
ANR	4593	ExpressionStatement	"sodium_increment ( n , nlen )"	571:4:16925:16950	4391	18	True				
ANR	4594	CallExpression	"sodium_increment ( n , nlen )"		4391	0					
ANR	4595	Callee	sodium_increment		4391	0					
ANR	4596	Identifier	sodium_increment		4391	0					
ANR	4597	ArgumentList	n		4391	1					
ANR	4598	Argument	n		4391	0					
ANR	4599	Identifier	n		4391	0					
ANR	4600	Argument	nlen		4391	1					
ANR	4601	Identifier	nlen		4391	0					
ANR	4602	IfStatement	if ( * clen > chunk_len )		4391	19					
ANR	4603	Condition	* clen > chunk_len	573:8:16961:16977	4391	0	True				
ANR	4604	RelationalExpression	* clen > chunk_len		4391	0		>			
ANR	4605	UnaryOperationExpression	* clen		4391	0					
ANR	4606	UnaryOperator	*		4391	0					
ANR	4607	Identifier	clen		4391	1					
ANR	4608	Identifier	chunk_len		4391	1					
ANR	4609	ExpressionStatement	"memmove ( c , c + chunk_len , * clen - chunk_len )"	574:8:16988:17032	4391	1	True				
ANR	4610	CallExpression	"memmove ( c , c + chunk_len , * clen - chunk_len )"		4391	0					
ANR	4611	Callee	memmove		4391	0					
ANR	4612	Identifier	memmove		4391	0					
ANR	4613	ArgumentList	c		4391	1					
ANR	4614	Argument	c		4391	0					
ANR	4615	Identifier	c		4391	0					
ANR	4616	Argument	c + chunk_len		4391	1					
ANR	4617	AdditiveExpression	c + chunk_len		4391	0		+			
ANR	4618	Identifier	c		4391	0					
ANR	4619	Identifier	chunk_len		4391	1					
ANR	4620	Argument	* clen - chunk_len		4391	2					
ANR	4621	AdditiveExpression	* clen - chunk_len		4391	0		-			
ANR	4622	UnaryOperationExpression	* clen		4391	0					
ANR	4623	UnaryOperator	*		4391	0					
ANR	4624	Identifier	clen		4391	1					
ANR	4625	Identifier	chunk_len		4391	1					
ANR	4626	ExpressionStatement	* clen = * clen - chunk_len	576:4:17039:17064	4391	20	True				
ANR	4627	AssignmentExpression	* clen = * clen - chunk_len		4391	0		=			
ANR	4628	UnaryOperationExpression	* clen		4391	0					
ANR	4629	UnaryOperator	*		4391	0					
ANR	4630	Identifier	clen		4391	1					
ANR	4631	AdditiveExpression	* clen - chunk_len		4391	1		-			
ANR	4632	UnaryOperationExpression	* clen		4391	0					
ANR	4633	UnaryOperator	*		4391	0					
ANR	4634	Identifier	clen		4391	1					
ANR	4635	Identifier	chunk_len		4391	1					
ANR	4636	ReturnStatement	return CRYPTO_OK ;	578:4:17071:17087	4391	21	True				
ANR	4637	Identifier	CRYPTO_OK		4391	0					
ANR	4638	ReturnType	static int		4391	1					
ANR	4639	Identifier	aead_chunk_decrypt		4391	2					
ANR	4640	ParameterList	"cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , size_t * plen , size_t * clen"		4391	3					
ANR	4641	Parameter	cipher_ctx_t * ctx	534:19:15908:15924	4391	0	True				
ANR	4642	ParameterType	cipher_ctx_t *		4391	0					
ANR	4643	Identifier	ctx		4391	1					
ANR	4644	Parameter	uint8_t * p	534:38:15927:15936	4391	1	True				
ANR	4645	ParameterType	uint8_t *		4391	0					
ANR	4646	Identifier	p		4391	1					
ANR	4647	Parameter	uint8_t * c	534:50:15939:15948	4391	2	True				
ANR	4648	ParameterType	uint8_t *		4391	0					
ANR	4649	Identifier	c		4391	1					
ANR	4650	Parameter	uint8_t * n	534:62:15951:15960	4391	3	True				
ANR	4651	ParameterType	uint8_t *		4391	0					
ANR	4652	Identifier	n		4391	1					
ANR	4653	Parameter	size_t * plen	535:19:15982:15993	4391	4	True				
ANR	4654	ParameterType	size_t *		4391	0					
ANR	4655	Identifier	plen		4391	1					
ANR	4656	Parameter	size_t * clen	535:33:15996:16007	4391	5	True				
ANR	4657	ParameterType	size_t *		4391	0					
ANR	4658	Identifier	clen		4391	1					
ANR	4659	CFGEntryNode	ENTRY		4391		True				
ANR	4660	CFGExitNode	EXIT		4391		True				
ANR	4661	Symbol	CRYPTO_NEED_MORE		4391						
ANR	4662	Symbol	CRYPTO_ERROR		4391						
ANR	4663	Symbol	* len_buf		4391						
ANR	4664	Symbol	CRYPTO_OK		4391						
ANR	4665	Symbol	ctx -> cipher -> tag_len		4391						
ANR	4666	Symbol	CHUNK_SIZE_LEN		4391						
ANR	4667	Symbol	* ( uint16_t * ) len_buf		4391						
ANR	4668	Symbol	ctx -> skey		4391						
ANR	4669	Symbol	plen		4391						
ANR	4670	Symbol	nlen		4391						
ANR	4671	Symbol	* clen		4391						
ANR	4672	Symbol	tlen		4391						
ANR	4673	Symbol	CHUNK_SIZE_MASK		4391						
ANR	4674	Symbol	ctx -> cipher -> nonce_len		4391						
ANR	4675	Symbol	c		4391						
ANR	4676	Symbol	* ctx -> cipher		4391						
ANR	4677	Symbol	NULL		4391						
ANR	4678	Symbol	err		4391						
ANR	4679	Symbol	ctx		4391						
ANR	4680	Symbol	aead_cipher_decrypt		4391						
ANR	4681	Symbol	chunk_len		4391						
ANR	4682	Symbol	n		4391						
ANR	4683	Symbol	* ctx		4391						
ANR	4684	Symbol	p		4391						
ANR	4685	Symbol	ntohs		4391						
ANR	4686	Symbol	ctx -> cipher		4391						
ANR	4687	Symbol	* plen		4391						
ANR	4688	Symbol	mlen		4391						
ANR	4689	Symbol	* * ctx		4391						
ANR	4690	Symbol	clen		4391						
ANR	4691	Symbol	len_buf		4391						
ANR	4692	Function	aead_decrypt	581:0:17092:19594							
ANR	4693	FunctionDef	"aead_decrypt (buffer_t * ciphertext , cipher_ctx_t * cipher_ctx , size_t capacity)"		4692	0					
ANR	4694	CompoundStatement		583:0:17174:19594	4692	0					
ANR	4695	IdentifierDeclStatement	int err = CRYPTO_OK ;	584:4:17180:17211	4692	0	True				
ANR	4696	IdentifierDecl	err = CRYPTO_OK		4692	0					
ANR	4697	IdentifierDeclType	int		4692	0					
ANR	4698	Identifier	err		4692	1					
ANR	4699	AssignmentExpression	err = CRYPTO_OK		4692	2		=			
ANR	4700	Identifier	CRYPTO_OK		4692	0					
ANR	4701	Identifier	CRYPTO_OK		4692	1					
ANR	4702	Statement	static	585:4:17217:17222	4692	1	True				
ANR	4703	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	585:11:17224:17256	4692	2	True				
ANR	4704	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		4692	0					
ANR	4705	IdentifierDeclType	buffer_t		4692	0					
ANR	4706	Identifier	tmp		4692	1					
ANR	4707	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		4692	2		=			
ANR	4708	Identifier	tmp		4692	0					
ANR	4709	InitializerList	0		4692	1					
ANR	4710	PrimaryExpression	0		4692	0					
ANR	4711	PrimaryExpression	0		4692	1					
ANR	4712	PrimaryExpression	0		4692	2					
ANR	4713	Identifier	NULL		4692	3					
ANR	4714	IdentifierDeclStatement	cipher_t * cipher = cipher_ctx -> cipher ;	587:4:17263:17300	4692	3	True				
ANR	4715	IdentifierDecl	* cipher = cipher_ctx -> cipher		4692	0					
ANR	4716	IdentifierDeclType	cipher_t *		4692	0					
ANR	4717	Identifier	cipher		4692	1					
ANR	4718	AssignmentExpression	* cipher = cipher_ctx -> cipher		4692	2		=			
ANR	4719	Identifier	cipher		4692	0					
ANR	4720	PtrMemberAccess	cipher_ctx -> cipher		4692	1					
ANR	4721	Identifier	cipher_ctx		4692	0					
ANR	4722	Identifier	cipher		4692	1					
ANR	4723	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	589:4:17307:17341	4692	4	True				
ANR	4724	IdentifierDecl	salt_len = cipher -> key_len		4692	0					
ANR	4725	IdentifierDeclType	size_t		4692	0					
ANR	4726	Identifier	salt_len		4692	1					
ANR	4727	AssignmentExpression	salt_len = cipher -> key_len		4692	2		=			
ANR	4728	Identifier	salt_len		4692	0					
ANR	4729	PtrMemberAccess	cipher -> key_len		4692	1					
ANR	4730	Identifier	cipher		4692	0					
ANR	4731	Identifier	key_len		4692	1					
ANR	4732	IfStatement	if ( cipher_ctx -> chunk == NULL )		4692	5					
ANR	4733	Condition	cipher_ctx -> chunk == NULL	591:8:17352:17376	4692	0	True				
ANR	4734	EqualityExpression	cipher_ctx -> chunk == NULL		4692	0		==			
ANR	4735	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4736	Identifier	cipher_ctx		4692	0					
ANR	4737	Identifier	chunk		4692	1					
ANR	4738	Identifier	NULL		4692	1					
ANR	4739	CompoundStatement		9:35:204:204	4692	1					
ANR	4740	ExpressionStatement	cipher_ctx -> chunk = ( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )	592:8:17389:17448	4692	0	True				
ANR	4741	AssignmentExpression	cipher_ctx -> chunk = ( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )		4692	0		=			
ANR	4742	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4743	Identifier	cipher_ctx		4692	0					
ANR	4744	Identifier	chunk		4692	1					
ANR	4745	CastExpression	( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )		4692	1					
ANR	4746	CastTarget	buffer_t *		4692	0					
ANR	4747	CallExpression	ss_malloc ( sizeof ( buffer_t ) )		4692	1					
ANR	4748	Callee	ss_malloc		4692	0					
ANR	4749	Identifier	ss_malloc		4692	0					
ANR	4750	ArgumentList	sizeof ( buffer_t )		4692	1					
ANR	4751	Argument	sizeof ( buffer_t )		4692	0					
ANR	4752	SizeofExpression	sizeof ( buffer_t )		4692	0					
ANR	4753	Sizeof	sizeof		4692	0					
ANR	4754	SizeofOperand	buffer_t		4692	1					
ANR	4755	ExpressionStatement	"memset ( cipher_ctx -> chunk , 0 , sizeof ( buffer_t ) )"	593:8:17458:17504	4692	1	True				
ANR	4756	CallExpression	"memset ( cipher_ctx -> chunk , 0 , sizeof ( buffer_t ) )"		4692	0					
ANR	4757	Callee	memset		4692	0					
ANR	4758	Identifier	memset		4692	0					
ANR	4759	ArgumentList	cipher_ctx -> chunk		4692	1					
ANR	4760	Argument	cipher_ctx -> chunk		4692	0					
ANR	4761	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4762	Identifier	cipher_ctx		4692	0					
ANR	4763	Identifier	chunk		4692	1					
ANR	4764	Argument	0		4692	1					
ANR	4765	PrimaryExpression	0		4692	0					
ANR	4766	Argument	sizeof ( buffer_t )		4692	2					
ANR	4767	SizeofExpression	sizeof ( buffer_t )		4692	0					
ANR	4768	Sizeof	sizeof		4692	0					
ANR	4769	SizeofOperand	buffer_t		4692	1					
ANR	4770	ExpressionStatement	"balloc ( cipher_ctx -> chunk , capacity )"	594:8:17514:17549	4692	2	True				
ANR	4771	CallExpression	"balloc ( cipher_ctx -> chunk , capacity )"		4692	0					
ANR	4772	Callee	balloc		4692	0					
ANR	4773	Identifier	balloc		4692	0					
ANR	4774	ArgumentList	cipher_ctx -> chunk		4692	1					
ANR	4775	Argument	cipher_ctx -> chunk		4692	0					
ANR	4776	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4777	Identifier	cipher_ctx		4692	0					
ANR	4778	Identifier	chunk		4692	1					
ANR	4779	Argument	capacity		4692	1					
ANR	4780	Identifier	capacity		4692	0					
ANR	4781	ExpressionStatement	"brealloc ( cipher_ctx -> chunk , cipher_ctx -> chunk -> len + ciphertext -> len , capacity )"	597:4:17562:17654	4692	6	True				
ANR	4782	CallExpression	"brealloc ( cipher_ctx -> chunk , cipher_ctx -> chunk -> len + ciphertext -> len , capacity )"		4692	0					
ANR	4783	Callee	brealloc		4692	0					
ANR	4784	Identifier	brealloc		4692	0					
ANR	4785	ArgumentList	cipher_ctx -> chunk		4692	1					
ANR	4786	Argument	cipher_ctx -> chunk		4692	0					
ANR	4787	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4788	Identifier	cipher_ctx		4692	0					
ANR	4789	Identifier	chunk		4692	1					
ANR	4790	Argument	cipher_ctx -> chunk -> len + ciphertext -> len		4692	1					
ANR	4791	AdditiveExpression	cipher_ctx -> chunk -> len + ciphertext -> len		4692	0		+			
ANR	4792	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4793	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4794	Identifier	cipher_ctx		4692	0					
ANR	4795	Identifier	chunk		4692	1					
ANR	4796	Identifier	len		4692	1					
ANR	4797	PtrMemberAccess	ciphertext -> len		4692	1					
ANR	4798	Identifier	ciphertext		4692	0					
ANR	4799	Identifier	len		4692	1					
ANR	4800	Argument	capacity		4692	2					
ANR	4801	Identifier	capacity		4692	0					
ANR	4802	ExpressionStatement	"memcpy ( cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len , ciphertext -> data , ciphertext -> len )"	599:4:17660:17762	4692	7	True				
ANR	4803	CallExpression	"memcpy ( cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len , ciphertext -> data , ciphertext -> len )"		4692	0					
ANR	4804	Callee	memcpy		4692	0					
ANR	4805	Identifier	memcpy		4692	0					
ANR	4806	ArgumentList	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		4692	1					
ANR	4807	Argument	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		4692	0					
ANR	4808	AdditiveExpression	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		4692	0		+			
ANR	4809	PtrMemberAccess	cipher_ctx -> chunk -> data		4692	0					
ANR	4810	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4811	Identifier	cipher_ctx		4692	0					
ANR	4812	Identifier	chunk		4692	1					
ANR	4813	Identifier	data		4692	1					
ANR	4814	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	1					
ANR	4815	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4816	Identifier	cipher_ctx		4692	0					
ANR	4817	Identifier	chunk		4692	1					
ANR	4818	Identifier	len		4692	1					
ANR	4819	Argument	ciphertext -> data		4692	1					
ANR	4820	PtrMemberAccess	ciphertext -> data		4692	0					
ANR	4821	Identifier	ciphertext		4692	0					
ANR	4822	Identifier	data		4692	1					
ANR	4823	Argument	ciphertext -> len		4692	2					
ANR	4824	PtrMemberAccess	ciphertext -> len		4692	0					
ANR	4825	Identifier	ciphertext		4692	0					
ANR	4826	Identifier	len		4692	1					
ANR	4827	ExpressionStatement	cipher_ctx -> chunk -> len += ciphertext -> len	601:4:17768:17809	4692	8	True				
ANR	4828	AssignmentExpression	cipher_ctx -> chunk -> len += ciphertext -> len		4692	0		+=			
ANR	4829	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4830	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4831	Identifier	cipher_ctx		4692	0					
ANR	4832	Identifier	chunk		4692	1					
ANR	4833	Identifier	len		4692	1					
ANR	4834	PtrMemberAccess	ciphertext -> len		4692	1					
ANR	4835	Identifier	ciphertext		4692	0					
ANR	4836	Identifier	len		4692	1					
ANR	4837	ExpressionStatement	"brealloc ( & tmp , cipher_ctx -> chunk -> len , capacity )"	603:4:17816:17864	4692	9	True				
ANR	4838	CallExpression	"brealloc ( & tmp , cipher_ctx -> chunk -> len , capacity )"		4692	0					
ANR	4839	Callee	brealloc		4692	0					
ANR	4840	Identifier	brealloc		4692	0					
ANR	4841	ArgumentList	& tmp		4692	1					
ANR	4842	Argument	& tmp		4692	0					
ANR	4843	UnaryOperationExpression	& tmp		4692	0					
ANR	4844	UnaryOperator	&		4692	0					
ANR	4845	Identifier	tmp		4692	1					
ANR	4846	Argument	cipher_ctx -> chunk -> len		4692	1					
ANR	4847	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4848	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4849	Identifier	cipher_ctx		4692	0					
ANR	4850	Identifier	chunk		4692	1					
ANR	4851	Identifier	len		4692	1					
ANR	4852	Argument	capacity		4692	2					
ANR	4853	Identifier	capacity		4692	0					
ANR	4854	IdentifierDeclStatement	buffer_t * plaintext = & tmp ;	604:4:17870:17896	4692	10	True				
ANR	4855	IdentifierDecl	* plaintext = & tmp		4692	0					
ANR	4856	IdentifierDeclType	buffer_t *		4692	0					
ANR	4857	Identifier	plaintext		4692	1					
ANR	4858	AssignmentExpression	* plaintext = & tmp		4692	2		=			
ANR	4859	Identifier	plaintext		4692	0					
ANR	4860	UnaryOperationExpression	& tmp		4692	1					
ANR	4861	UnaryOperator	&		4692	0					
ANR	4862	Identifier	tmp		4692	1					
ANR	4863	IfStatement	if ( ! cipher_ctx -> init )		4692	11					
ANR	4864	Condition	! cipher_ctx -> init	606:8:17907:17923	4692	0	True				
ANR	4865	UnaryOperationExpression	! cipher_ctx -> init		4692	0					
ANR	4866	UnaryOperator	!		4692	0					
ANR	4867	PtrMemberAccess	cipher_ctx -> init		4692	1					
ANR	4868	Identifier	cipher_ctx		4692	0					
ANR	4869	Identifier	init		4692	1					
ANR	4870	CompoundStatement		24:27:751:751	4692	1					
ANR	4871	IfStatement	if ( cipher_ctx -> chunk -> len <= salt_len )		4692	0					
ANR	4872	Condition	cipher_ctx -> chunk -> len <= salt_len	607:12:17940:17973	4692	0	True				
ANR	4873	RelationalExpression	cipher_ctx -> chunk -> len <= salt_len		4692	0		<=			
ANR	4874	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4875	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4876	Identifier	cipher_ctx		4692	0					
ANR	4877	Identifier	chunk		4692	1					
ANR	4878	Identifier	len		4692	1					
ANR	4879	Identifier	salt_len		4692	1					
ANR	4880	ReturnStatement	return CRYPTO_NEED_MORE ;	608:12:17988:18011	4692	1	True				
ANR	4881	Identifier	CRYPTO_NEED_MORE		4692	0					
ANR	4882	ExpressionStatement	"memcpy ( cipher_ctx -> salt , cipher_ctx -> chunk -> data , salt_len )"	610:8:18022:18081	4692	1	True				
ANR	4883	CallExpression	"memcpy ( cipher_ctx -> salt , cipher_ctx -> chunk -> data , salt_len )"		4692	0					
ANR	4884	Callee	memcpy		4692	0					
ANR	4885	Identifier	memcpy		4692	0					
ANR	4886	ArgumentList	cipher_ctx -> salt		4692	1					
ANR	4887	Argument	cipher_ctx -> salt		4692	0					
ANR	4888	PtrMemberAccess	cipher_ctx -> salt		4692	0					
ANR	4889	Identifier	cipher_ctx		4692	0					
ANR	4890	Identifier	salt		4692	1					
ANR	4891	Argument	cipher_ctx -> chunk -> data		4692	1					
ANR	4892	PtrMemberAccess	cipher_ctx -> chunk -> data		4692	0					
ANR	4893	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4894	Identifier	cipher_ctx		4692	0					
ANR	4895	Identifier	chunk		4692	1					
ANR	4896	Identifier	data		4692	1					
ANR	4897	Argument	salt_len		4692	2					
ANR	4898	Identifier	salt_len		4692	0					
ANR	4899	ExpressionStatement	"aead_cipher_ctx_set_key ( cipher_ctx , 0 )"	612:8:18092:18130	4692	2	True				
ANR	4900	CallExpression	"aead_cipher_ctx_set_key ( cipher_ctx , 0 )"		4692	0					
ANR	4901	Callee	aead_cipher_ctx_set_key		4692	0					
ANR	4902	Identifier	aead_cipher_ctx_set_key		4692	0					
ANR	4903	ArgumentList	cipher_ctx		4692	1					
ANR	4904	Argument	cipher_ctx		4692	0					
ANR	4905	Identifier	cipher_ctx		4692	0					
ANR	4906	Argument	0		4692	1					
ANR	4907	PrimaryExpression	0		4692	0					
ANR	4908	IfStatement	"if ( ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1 )"		4692	3					
ANR	4909	Condition	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1"	614:12:18145:18198	4692	0	True				
ANR	4910	EqualityExpression	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1"		4692	0		==			
ANR	4911	CallExpression	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len )"		4692	0					
ANR	4912	Callee	ppbloom_check		4692	0					
ANR	4913	Identifier	ppbloom_check		4692	0					
ANR	4914	ArgumentList	( void * ) cipher_ctx -> salt		4692	1					
ANR	4915	Argument	( void * ) cipher_ctx -> salt		4692	0					
ANR	4916	CastExpression	( void * ) cipher_ctx -> salt		4692	0					
ANR	4917	CastTarget	void *		4692	0					
ANR	4918	PtrMemberAccess	cipher_ctx -> salt		4692	1					
ANR	4919	Identifier	cipher_ctx		4692	0					
ANR	4920	Identifier	salt		4692	1					
ANR	4921	Argument	salt_len		4692	1					
ANR	4922	Identifier	salt_len		4692	0					
ANR	4923	PrimaryExpression	1		4692	1					
ANR	4924	CompoundStatement		32:68:1026:1026	4692	1					
ANR	4925	ExpressionStatement	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"	615:12:18215:18257	4692	0	True				
ANR	4926	CallExpression	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"		4692	0					
ANR	4927	Callee	LOGE		4692	0					
ANR	4928	Identifier	LOGE		4692	0					
ANR	4929	ArgumentList	"""crypto: AEAD: repeat salt detected"""		4692	1					
ANR	4930	Argument	"""crypto: AEAD: repeat salt detected"""		4692	0					
ANR	4931	PrimaryExpression	"""crypto: AEAD: repeat salt detected"""		4692	0					
ANR	4932	ReturnStatement	return CRYPTO_ERROR ;	616:12:18271:18290	4692	1	True				
ANR	4933	Identifier	CRYPTO_ERROR		4692	0					
ANR	4934	ExpressionStatement	"memmove ( cipher_ctx -> chunk -> data , cipher_ctx -> chunk -> data + salt_len , cipher_ctx -> chunk -> len - salt_len )"	619:8:18311:18430	4692	4	True				
ANR	4935	CallExpression	"memmove ( cipher_ctx -> chunk -> data , cipher_ctx -> chunk -> data + salt_len , cipher_ctx -> chunk -> len - salt_len )"		4692	0					
ANR	4936	Callee	memmove		4692	0					
ANR	4937	Identifier	memmove		4692	0					
ANR	4938	ArgumentList	cipher_ctx -> chunk -> data		4692	1					
ANR	4939	Argument	cipher_ctx -> chunk -> data		4692	0					
ANR	4940	PtrMemberAccess	cipher_ctx -> chunk -> data		4692	0					
ANR	4941	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4942	Identifier	cipher_ctx		4692	0					
ANR	4943	Identifier	chunk		4692	1					
ANR	4944	Identifier	data		4692	1					
ANR	4945	Argument	cipher_ctx -> chunk -> data + salt_len		4692	1					
ANR	4946	AdditiveExpression	cipher_ctx -> chunk -> data + salt_len		4692	0		+			
ANR	4947	PtrMemberAccess	cipher_ctx -> chunk -> data		4692	0					
ANR	4948	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4949	Identifier	cipher_ctx		4692	0					
ANR	4950	Identifier	chunk		4692	1					
ANR	4951	Identifier	data		4692	1					
ANR	4952	Identifier	salt_len		4692	1					
ANR	4953	Argument	cipher_ctx -> chunk -> len - salt_len		4692	2					
ANR	4954	AdditiveExpression	cipher_ctx -> chunk -> len - salt_len		4692	0		-			
ANR	4955	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4956	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4957	Identifier	cipher_ctx		4692	0					
ANR	4958	Identifier	chunk		4692	1					
ANR	4959	Identifier	len		4692	1					
ANR	4960	Identifier	salt_len		4692	1					
ANR	4961	ExpressionStatement	cipher_ctx -> chunk -> len -= salt_len	621:8:18440:18474	4692	5	True				
ANR	4962	AssignmentExpression	cipher_ctx -> chunk -> len -= salt_len		4692	0		-=			
ANR	4963	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4964	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4965	Identifier	cipher_ctx		4692	0					
ANR	4966	Identifier	chunk		4692	1					
ANR	4967	Identifier	len		4692	1					
ANR	4968	Identifier	salt_len		4692	1					
ANR	4969	ExpressionStatement	cipher_ctx -> init = 1	623:8:18485:18505	4692	6	True				
ANR	4970	AssignmentExpression	cipher_ctx -> init = 1		4692	0		=			
ANR	4971	PtrMemberAccess	cipher_ctx -> init		4692	0					
ANR	4972	Identifier	cipher_ctx		4692	0					
ANR	4973	Identifier	init		4692	1					
ANR	4974	PrimaryExpression	1		4692	1					
ANR	4975	IdentifierDeclStatement	size_t plen = 0 ;	627:4:18519:18534	4692	12	True				
ANR	4976	IdentifierDecl	plen = 0		4692	0					
ANR	4977	IdentifierDeclType	size_t		4692	0					
ANR	4978	Identifier	plen		4692	1					
ANR	4979	AssignmentExpression	plen = 0		4692	2		=			
ANR	4980	Identifier	plen		4692	0					
ANR	4981	PrimaryExpression	0		4692	1					
ANR	4982	WhileStatement	while ( cipher_ctx -> chunk -> len > 0 )		4692	13					
ANR	4983	Condition	cipher_ctx -> chunk -> len > 0	628:11:18547:18572	4692	0	True				
ANR	4984	RelationalExpression	cipher_ctx -> chunk -> len > 0		4692	0		>			
ANR	4985	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	4986	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	4987	Identifier	cipher_ctx		4692	0					
ANR	4988	Identifier	chunk		4692	1					
ANR	4989	Identifier	len		4692	1					
ANR	4990	PrimaryExpression	0		4692	1					
ANR	4991	CompoundStatement		48:8:1462:1483	4692	1					
ANR	4992	IdentifierDeclStatement	size_t chunk_clen = cipher_ctx -> chunk -> len ;	629:8:18585:18627	4692	0	True				
ANR	4993	IdentifierDecl	chunk_clen = cipher_ctx -> chunk -> len		4692	0					
ANR	4994	IdentifierDeclType	size_t		4692	0					
ANR	4995	Identifier	chunk_clen		4692	1					
ANR	4996	AssignmentExpression	chunk_clen = cipher_ctx -> chunk -> len		4692	2		=			
ANR	4997	Identifier	chunk_clen		4692	0					
ANR	4998	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	1					
ANR	4999	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	5000	Identifier	cipher_ctx		4692	0					
ANR	5001	Identifier	chunk		4692	1					
ANR	5002	Identifier	len		4692	1					
ANR	5003	IdentifierDeclStatement	size_t chunk_plen = 0 ;	630:8:18637:18658	4692	1	True				
ANR	5004	IdentifierDecl	chunk_plen = 0		4692	0					
ANR	5005	IdentifierDeclType	size_t		4692	0					
ANR	5006	Identifier	chunk_plen		4692	1					
ANR	5007	AssignmentExpression	chunk_plen = 0		4692	2		=			
ANR	5008	Identifier	chunk_plen		4692	0					
ANR	5009	PrimaryExpression	0		4692	1					
ANR	5010	ExpressionStatement	"err = aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"	631:8:18668:18919	4692	2	True				
ANR	5011	AssignmentExpression	"err = aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"		4692	0		=			
ANR	5012	Identifier	err		4692	0					
ANR	5013	CallExpression	"aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"		4692	1					
ANR	5014	Callee	aead_chunk_decrypt		4692	0					
ANR	5015	Identifier	aead_chunk_decrypt		4692	0					
ANR	5016	ArgumentList	cipher_ctx		4692	1					
ANR	5017	Argument	cipher_ctx		4692	0					
ANR	5018	Identifier	cipher_ctx		4692	0					
ANR	5019	Argument	( uint8_t * ) plaintext -> data + plen		4692	1					
ANR	5020	AdditiveExpression	( uint8_t * ) plaintext -> data + plen		4692	0		+			
ANR	5021	CastExpression	( uint8_t * ) plaintext -> data		4692	0					
ANR	5022	CastTarget	uint8_t *		4692	0					
ANR	5023	PtrMemberAccess	plaintext -> data		4692	1					
ANR	5024	Identifier	plaintext		4692	0					
ANR	5025	Identifier	data		4692	1					
ANR	5026	Identifier	plen		4692	1					
ANR	5027	Argument	( uint8_t * ) cipher_ctx -> chunk -> data		4692	2					
ANR	5028	CastExpression	( uint8_t * ) cipher_ctx -> chunk -> data		4692	0					
ANR	5029	CastTarget	uint8_t *		4692	0					
ANR	5030	PtrMemberAccess	cipher_ctx -> chunk -> data		4692	1					
ANR	5031	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	5032	Identifier	cipher_ctx		4692	0					
ANR	5033	Identifier	chunk		4692	1					
ANR	5034	Identifier	data		4692	1					
ANR	5035	Argument	cipher_ctx -> nonce		4692	3					
ANR	5036	PtrMemberAccess	cipher_ctx -> nonce		4692	0					
ANR	5037	Identifier	cipher_ctx		4692	0					
ANR	5038	Identifier	nonce		4692	1					
ANR	5039	Argument	& chunk_plen		4692	4					
ANR	5040	UnaryOperationExpression	& chunk_plen		4692	0					
ANR	5041	UnaryOperator	&		4692	0					
ANR	5042	Identifier	chunk_plen		4692	1					
ANR	5043	Argument	& chunk_clen		4692	5					
ANR	5044	UnaryOperationExpression	& chunk_clen		4692	0					
ANR	5045	UnaryOperator	&		4692	0					
ANR	5046	Identifier	chunk_clen		4692	1					
ANR	5047	IfStatement	if ( err == CRYPTO_ERROR )		4692	3					
ANR	5048	Condition	err == CRYPTO_ERROR	635:12:18933:18951	4692	0	True				
ANR	5049	EqualityExpression	err == CRYPTO_ERROR		4692	0		==			
ANR	5050	Identifier	err		4692	0					
ANR	5051	Identifier	CRYPTO_ERROR		4692	1					
ANR	5052	CompoundStatement		53:33:1779:1779	4692	1					
ANR	5053	ReturnStatement	return err ;	636:12:18968:18978	4692	0	True				
ANR	5054	Identifier	err		4692	0					
ANR	5055	ElseStatement	else		4692	0					
ANR	5056	IfStatement	if ( err == CRYPTO_NEED_MORE )		4692	0					
ANR	5057	Condition	err == CRYPTO_NEED_MORE	637:19:18999:19021	4692	0	True				
ANR	5058	EqualityExpression	err == CRYPTO_NEED_MORE		4692	0		==			
ANR	5059	Identifier	err		4692	0					
ANR	5060	Identifier	CRYPTO_NEED_MORE		4692	1					
ANR	5061	CompoundStatement		55:44:1849:1849	4692	1					
ANR	5062	IfStatement	if ( plen == 0 )		4692	0					
ANR	5063	Condition	plen == 0	638:16:19042:19050	4692	0	True				
ANR	5064	EqualityExpression	plen == 0		4692	0		==			
ANR	5065	Identifier	plen		4692	0					
ANR	5066	PrimaryExpression	0		4692	1					
ANR	5067	ReturnStatement	return err ;	639:16:19069:19079	4692	1	True				
ANR	5068	Identifier	err		4692	0					
ANR	5069	ElseStatement	else		4692	0					
ANR	5070	BreakStatement	break ;	641:16:19114:19119	4692	0	True				
ANR	5071	ExpressionStatement	cipher_ctx -> chunk -> len = chunk_clen	643:8:19139:19174	4692	4	True				
ANR	5072	AssignmentExpression	cipher_ctx -> chunk -> len = chunk_clen		4692	0		=			
ANR	5073	PtrMemberAccess	cipher_ctx -> chunk -> len		4692	0					
ANR	5074	PtrMemberAccess	cipher_ctx -> chunk		4692	0					
ANR	5075	Identifier	cipher_ctx		4692	0					
ANR	5076	Identifier	chunk		4692	1					
ANR	5077	Identifier	len		4692	1					
ANR	5078	Identifier	chunk_clen		4692	1					
ANR	5079	ExpressionStatement	plen += chunk_plen	644:8:19184:19219	4692	5	True				
ANR	5080	AssignmentExpression	plen += chunk_plen		4692	0		+=			
ANR	5081	Identifier	plen		4692	0					
ANR	5082	Identifier	chunk_plen		4692	1					
ANR	5083	ExpressionStatement	plaintext -> len = plen	646:4:19231:19252	4692	14	True				
ANR	5084	AssignmentExpression	plaintext -> len = plen		4692	0		=			
ANR	5085	PtrMemberAccess	plaintext -> len		4692	0					
ANR	5086	Identifier	plaintext		4692	0					
ANR	5087	Identifier	len		4692	1					
ANR	5088	Identifier	plen		4692	1					
ANR	5089	ExpressionStatement	"brealloc ( ciphertext , plaintext -> len , capacity )"	648:4:19259:19305	4692	15	True				
ANR	5090	CallExpression	"brealloc ( ciphertext , plaintext -> len , capacity )"		4692	0					
ANR	5091	Callee	brealloc		4692	0					
ANR	5092	Identifier	brealloc		4692	0					
ANR	5093	ArgumentList	ciphertext		4692	1					
ANR	5094	Argument	ciphertext		4692	0					
ANR	5095	Identifier	ciphertext		4692	0					
ANR	5096	Argument	plaintext -> len		4692	1					
ANR	5097	PtrMemberAccess	plaintext -> len		4692	0					
ANR	5098	Identifier	plaintext		4692	0					
ANR	5099	Identifier	len		4692	1					
ANR	5100	Argument	capacity		4692	2					
ANR	5101	Identifier	capacity		4692	0					
ANR	5102	ExpressionStatement	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"	649:4:19311:19368	4692	16	True				
ANR	5103	CallExpression	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"		4692	0					
ANR	5104	Callee	memcpy		4692	0					
ANR	5105	Identifier	memcpy		4692	0					
ANR	5106	ArgumentList	ciphertext -> data		4692	1					
ANR	5107	Argument	ciphertext -> data		4692	0					
ANR	5108	PtrMemberAccess	ciphertext -> data		4692	0					
ANR	5109	Identifier	ciphertext		4692	0					
ANR	5110	Identifier	data		4692	1					
ANR	5111	Argument	plaintext -> data		4692	1					
ANR	5112	PtrMemberAccess	plaintext -> data		4692	0					
ANR	5113	Identifier	plaintext		4692	0					
ANR	5114	Identifier	data		4692	1					
ANR	5115	Argument	plaintext -> len		4692	2					
ANR	5116	PtrMemberAccess	plaintext -> len		4692	0					
ANR	5117	Identifier	plaintext		4692	0					
ANR	5118	Identifier	len		4692	1					
ANR	5119	ExpressionStatement	ciphertext -> len = plaintext -> len	650:4:19374:19406	4692	17	True				
ANR	5120	AssignmentExpression	ciphertext -> len = plaintext -> len		4692	0		=			
ANR	5121	PtrMemberAccess	ciphertext -> len		4692	0					
ANR	5122	Identifier	ciphertext		4692	0					
ANR	5123	Identifier	len		4692	1					
ANR	5124	PtrMemberAccess	plaintext -> len		4692	1					
ANR	5125	Identifier	plaintext		4692	0					
ANR	5126	Identifier	len		4692	1					
ANR	5127	IfStatement	if ( cipher_ctx -> init == 1 )		4692	18					
ANR	5128	Condition	cipher_ctx -> init == 1	653:8:19453:19473	4692	0	True				
ANR	5129	EqualityExpression	cipher_ctx -> init == 1		4692	0		==			
ANR	5130	PtrMemberAccess	cipher_ctx -> init		4692	0					
ANR	5131	Identifier	cipher_ctx		4692	0					
ANR	5132	Identifier	init		4692	1					
ANR	5133	PrimaryExpression	1		4692	1					
ANR	5134	CompoundStatement		71:31:2301:2301	4692	1					
ANR	5135	ExpressionStatement	"ppbloom_add ( ( void * ) cipher_ctx -> salt , salt_len )"	654:8:19486:19533	4692	0	True				
ANR	5136	CallExpression	"ppbloom_add ( ( void * ) cipher_ctx -> salt , salt_len )"		4692	0					
ANR	5137	Callee	ppbloom_add		4692	0					
ANR	5138	Identifier	ppbloom_add		4692	0					
ANR	5139	ArgumentList	( void * ) cipher_ctx -> salt		4692	1					
ANR	5140	Argument	( void * ) cipher_ctx -> salt		4692	0					
ANR	5141	CastExpression	( void * ) cipher_ctx -> salt		4692	0					
ANR	5142	CastTarget	void *		4692	0					
ANR	5143	PtrMemberAccess	cipher_ctx -> salt		4692	1					
ANR	5144	Identifier	cipher_ctx		4692	0					
ANR	5145	Identifier	salt		4692	1					
ANR	5146	Argument	salt_len		4692	1					
ANR	5147	Identifier	salt_len		4692	0					
ANR	5148	ExpressionStatement	cipher_ctx -> init = 2	655:8:19543:19563	4692	1	True				
ANR	5149	AssignmentExpression	cipher_ctx -> init = 2		4692	0		=			
ANR	5150	PtrMemberAccess	cipher_ctx -> init		4692	0					
ANR	5151	Identifier	cipher_ctx		4692	0					
ANR	5152	Identifier	init		4692	1					
ANR	5153	PrimaryExpression	2		4692	1					
ANR	5154	ReturnStatement	return CRYPTO_OK ;	658:4:19576:19592	4692	19	True				
ANR	5155	Identifier	CRYPTO_OK		4692	0					
ANR	5156	ReturnType	int		4692	1					
ANR	5157	Identifier	aead_decrypt		4692	2					
ANR	5158	ParameterList	"buffer_t * ciphertext , cipher_ctx_t * cipher_ctx , size_t capacity"		4692	3					
ANR	5159	Parameter	buffer_t * ciphertext	582:13:17109:17128	4692	0	True				
ANR	5160	ParameterType	buffer_t *		4692	0					
ANR	5161	Identifier	ciphertext		4692	1					
ANR	5162	Parameter	cipher_ctx_t * cipher_ctx	582:35:17131:17154	4692	1	True				
ANR	5163	ParameterType	cipher_ctx_t *		4692	0					
ANR	5164	Identifier	cipher_ctx		4692	1					
ANR	5165	Parameter	size_t capacity	582:61:17157:17171	4692	2	True				
ANR	5166	ParameterType	size_t		4692	0					
ANR	5167	Identifier	capacity		4692	1					
ANR	5168	CFGEntryNode	ENTRY		4692		True				
ANR	5169	CFGExitNode	EXIT		4692		True				
ANR	5170	Symbol	cipher_ctx -> cipher		4692						
ANR	5171	Symbol	CRYPTO_NEED_MORE		4692						
ANR	5172	Symbol	CRYPTO_ERROR		4692						
ANR	5173	Symbol	cipher_ctx -> chunk -> len		4692						
ANR	5174	Symbol	CRYPTO_OK		4692						
ANR	5175	Symbol	cipher_ctx -> chunk -> data		4692						
ANR	5176	Symbol	cipher_ctx -> init		4692						
ANR	5177	Symbol	cipher_ctx -> nonce		4692						
ANR	5178	Symbol	capacity		4692						
ANR	5179	Symbol	* * cipher_ctx		4692						
ANR	5180	Symbol	plen		4692						
ANR	5181	Symbol	* plaintext		4692						
ANR	5182	Symbol	salt_len		4692						
ANR	5183	Symbol	tmp		4692						
ANR	5184	Symbol	plaintext -> data		4692						
ANR	5185	Symbol	aead_chunk_decrypt		4692						
ANR	5186	Symbol	cipher		4692						
ANR	5187	Symbol	& chunk_clen		4692						
ANR	5188	Symbol	ciphertext		4692						
ANR	5189	Symbol	ciphertext -> len		4692						
ANR	5190	Symbol	cipher_ctx		4692						
ANR	5191	Symbol	NULL		4692						
ANR	5192	Symbol	err		4692						
ANR	5193	Symbol	* cipher_ctx		4692						
ANR	5194	Symbol	* cipher		4692						
ANR	5195	Symbol	ppbloom_check		4692						
ANR	5196	Symbol	chunk_plen		4692						
ANR	5197	Symbol	plaintext		4692						
ANR	5198	Symbol	* cipher_ctx -> chunk		4692						
ANR	5199	Symbol	cipher_ctx -> chunk		4692						
ANR	5200	Symbol	chunk_clen		4692						
ANR	5201	Symbol	plaintext -> len		4692						
ANR	5202	Symbol	& chunk_plen		4692						
ANR	5203	Symbol	cipher -> key_len		4692						
ANR	5204	Symbol	ciphertext -> data		4692						
ANR	5205	Symbol	cipher_ctx -> salt		4692						
ANR	5206	Symbol	ss_malloc		4692						
ANR	5207	Symbol	& tmp		4692						
ANR	5208	Symbol	* ciphertext		4692						
ANR	5209	Function	aead_key_init	661:0:19597:21107							
ANR	5210	FunctionDef	"aead_key_init (int method , const char * pass , const char * key)"		5209	0					
ANR	5211	CompoundStatement		663:0:19669:21107	5209	0					
ANR	5212	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		5209	0					
ANR	5213	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	664:8:19679:19725	5209	0	True				
ANR	5214	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		5209	0		||			
ANR	5215	RelationalExpression	method < AES128GCM		5209	0		<			
ANR	5216	Identifier	method		5209	0					
ANR	5217	Identifier	AES128GCM		5209	1					
ANR	5218	RelationalExpression	method >= AEAD_CIPHER_NUM		5209	1		>=			
ANR	5219	Identifier	method		5209	0					
ANR	5220	Identifier	AEAD_CIPHER_NUM		5209	1					
ANR	5221	CompoundStatement		2:57:58:58	5209	1					
ANR	5222	ExpressionStatement	"LOGE ( ""aead_key_init(): Illegal method"" )"	665:8:19738:19777	5209	0	True				
ANR	5223	CallExpression	"LOGE ( ""aead_key_init(): Illegal method"" )"		5209	0					
ANR	5224	Callee	LOGE		5209	0					
ANR	5225	Identifier	LOGE		5209	0					
ANR	5226	ArgumentList	"""aead_key_init(): Illegal method"""		5209	1					
ANR	5227	Argument	"""aead_key_init(): Illegal method"""		5209	0					
ANR	5228	PrimaryExpression	"""aead_key_init(): Illegal method"""		5209	0					
ANR	5229	ReturnStatement	return NULL ;	666:8:19787:19798	5209	1	True				
ANR	5230	Identifier	NULL		5209	0					
ANR	5231	IdentifierDeclStatement	cipher_t * cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) ) ;	669:4:19811:19869	5209	1	True				
ANR	5232	IdentifierDecl	* cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		5209	0					
ANR	5233	IdentifierDeclType	cipher_t *		5209	0					
ANR	5234	Identifier	cipher		5209	1					
ANR	5235	AssignmentExpression	* cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		5209	2		=			
ANR	5236	Identifier	cipher		5209	0					
ANR	5237	CastExpression	( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		5209	1					
ANR	5238	CastTarget	cipher_t *		5209	0					
ANR	5239	CallExpression	ss_malloc ( sizeof ( cipher_t ) )		5209	1					
ANR	5240	Callee	ss_malloc		5209	0					
ANR	5241	Identifier	ss_malloc		5209	0					
ANR	5242	ArgumentList	sizeof ( cipher_t )		5209	1					
ANR	5243	Argument	sizeof ( cipher_t )		5209	0					
ANR	5244	SizeofExpression	sizeof ( cipher_t )		5209	0					
ANR	5245	Sizeof	sizeof		5209	0					
ANR	5246	SizeofOperand	cipher_t		5209	1					
ANR	5247	ExpressionStatement	"memset ( cipher , 0 , sizeof ( cipher_t ) )"	670:4:19875:19910	5209	2	True				
ANR	5248	CallExpression	"memset ( cipher , 0 , sizeof ( cipher_t ) )"		5209	0					
ANR	5249	Callee	memset		5209	0					
ANR	5250	Identifier	memset		5209	0					
ANR	5251	ArgumentList	cipher		5209	1					
ANR	5252	Argument	cipher		5209	0					
ANR	5253	Identifier	cipher		5209	0					
ANR	5254	Argument	0		5209	1					
ANR	5255	PrimaryExpression	0		5209	0					
ANR	5256	Argument	sizeof ( cipher_t )		5209	2					
ANR	5257	SizeofExpression	sizeof ( cipher_t )		5209	0					
ANR	5258	Sizeof	sizeof		5209	0					
ANR	5259	SizeofOperand	cipher_t		5209	1					
ANR	5260	IfStatement	if ( method >= CHACHA20POLY1305IETF )		5209	3					
ANR	5261	Condition	method >= CHACHA20POLY1305IETF	672:8:19921:19950	5209	0	True				
ANR	5262	RelationalExpression	method >= CHACHA20POLY1305IETF		5209	0		>=			
ANR	5263	Identifier	method		5209	0					
ANR	5264	Identifier	CHACHA20POLY1305IETF		5209	1					
ANR	5265	CompoundStatement		11:8:293:365	5209	1					
ANR	5266	IdentifierDeclStatement	cipher_kt_t * cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) ) ;	673:8:19963:20035	5209	0	True				
ANR	5267	IdentifierDecl	* cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		5209	0					
ANR	5268	IdentifierDeclType	cipher_kt_t *		5209	0					
ANR	5269	Identifier	cipher_info		5209	1					
ANR	5270	AssignmentExpression	* cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		5209	2		=			
ANR	5271	Identifier	cipher_info		5209	0					
ANR	5272	CastExpression	( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		5209	1					
ANR	5273	CastTarget	cipher_kt_t *		5209	0					
ANR	5274	CallExpression	ss_malloc ( sizeof ( cipher_kt_t ) )		5209	1					
ANR	5275	Callee	ss_malloc		5209	0					
ANR	5276	Identifier	ss_malloc		5209	0					
ANR	5277	ArgumentList	sizeof ( cipher_kt_t )		5209	1					
ANR	5278	Argument	sizeof ( cipher_kt_t )		5209	0					
ANR	5279	SizeofExpression	sizeof ( cipher_kt_t )		5209	0					
ANR	5280	Sizeof	sizeof		5209	0					
ANR	5281	SizeofOperand	cipher_kt_t		5209	1					
ANR	5282	ExpressionStatement	cipher -> info = cipher_info	674:8:20045:20083	5209	1	True				
ANR	5283	AssignmentExpression	cipher -> info = cipher_info		5209	0		=			
ANR	5284	PtrMemberAccess	cipher -> info		5209	0					
ANR	5285	Identifier	cipher		5209	0					
ANR	5286	Identifier	info		5209	1					
ANR	5287	Identifier	cipher_info		5209	1					
ANR	5288	ExpressionStatement	cipher -> info -> base = NULL	675:8:20093:20124	5209	2	True				
ANR	5289	AssignmentExpression	cipher -> info -> base = NULL		5209	0		=			
ANR	5290	PtrMemberAccess	cipher -> info -> base		5209	0					
ANR	5291	PtrMemberAccess	cipher -> info		5209	0					
ANR	5292	Identifier	cipher		5209	0					
ANR	5293	Identifier	info		5209	1					
ANR	5294	Identifier	base		5209	1					
ANR	5295	Identifier	NULL		5209	1					
ANR	5296	ExpressionStatement	cipher -> info -> key_bitlen = supported_aead_ciphers_key_size [ method ] * 8	676:8:20134:20204	5209	3	True				
ANR	5297	AssignmentExpression	cipher -> info -> key_bitlen = supported_aead_ciphers_key_size [ method ] * 8		5209	0		=			
ANR	5298	PtrMemberAccess	cipher -> info -> key_bitlen		5209	0					
ANR	5299	PtrMemberAccess	cipher -> info		5209	0					
ANR	5300	Identifier	cipher		5209	0					
ANR	5301	Identifier	info		5209	1					
ANR	5302	Identifier	key_bitlen		5209	1					
ANR	5303	MultiplicativeExpression	supported_aead_ciphers_key_size [ method ] * 8		5209	1		*			
ANR	5304	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		5209	0					
ANR	5305	Identifier	supported_aead_ciphers_key_size		5209	0					
ANR	5306	Identifier	method		5209	1					
ANR	5307	PrimaryExpression	8		5209	1					
ANR	5308	ExpressionStatement	cipher -> info -> iv_size = supported_aead_ciphers_nonce_size [ method ]	677:8:20214:20282	5209	4	True				
ANR	5309	AssignmentExpression	cipher -> info -> iv_size = supported_aead_ciphers_nonce_size [ method ]		5209	0		=			
ANR	5310	PtrMemberAccess	cipher -> info -> iv_size		5209	0					
ANR	5311	PtrMemberAccess	cipher -> info		5209	0					
ANR	5312	Identifier	cipher		5209	0					
ANR	5313	Identifier	info		5209	1					
ANR	5314	Identifier	iv_size		5209	1					
ANR	5315	ArrayIndexing	supported_aead_ciphers_nonce_size [ method ]		5209	1					
ANR	5316	Identifier	supported_aead_ciphers_nonce_size		5209	0					
ANR	5317	Identifier	method		5209	1					
ANR	5318	ElseStatement	else		5209	0					
ANR	5319	CompoundStatement		16:11:625:625	5209	0					
ANR	5320	ExpressionStatement	cipher -> info = ( cipher_kt_t * ) aead_get_cipher_type ( method )	679:8:20305:20363	5209	0	True				
ANR	5321	AssignmentExpression	cipher -> info = ( cipher_kt_t * ) aead_get_cipher_type ( method )		5209	0		=			
ANR	5322	PtrMemberAccess	cipher -> info		5209	0					
ANR	5323	Identifier	cipher		5209	0					
ANR	5324	Identifier	info		5209	1					
ANR	5325	CastExpression	( cipher_kt_t * ) aead_get_cipher_type ( method )		5209	1					
ANR	5326	CastTarget	cipher_kt_t *		5209	0					
ANR	5327	CallExpression	aead_get_cipher_type ( method )		5209	1					
ANR	5328	Callee	aead_get_cipher_type		5209	0					
ANR	5329	Identifier	aead_get_cipher_type		5209	0					
ANR	5330	ArgumentList	method		5209	1					
ANR	5331	Argument	method		5209	0					
ANR	5332	Identifier	method		5209	0					
ANR	5333	IfStatement	if ( cipher -> info == NULL && cipher -> key_len == 0 )		5209	4					
ANR	5334	Condition	cipher -> info == NULL && cipher -> key_len == 0	682:8:20380:20423	5209	0	True				
ANR	5335	AndExpression	cipher -> info == NULL && cipher -> key_len == 0		5209	0		&&			
ANR	5336	EqualityExpression	cipher -> info == NULL		5209	0		==			
ANR	5337	PtrMemberAccess	cipher -> info		5209	0					
ANR	5338	Identifier	cipher		5209	0					
ANR	5339	Identifier	info		5209	1					
ANR	5340	Identifier	NULL		5209	1					
ANR	5341	EqualityExpression	cipher -> key_len == 0		5209	1		==			
ANR	5342	PtrMemberAccess	cipher -> key_len		5209	0					
ANR	5343	Identifier	cipher		5209	0					
ANR	5344	Identifier	key_len		5209	1					
ANR	5345	PrimaryExpression	0		5209	1					
ANR	5346	CompoundStatement		20:54:756:756	5209	1					
ANR	5347	ExpressionStatement	"LOGE ( ""Cipher %s not found in crypto library"" , supported_aead_ciphers [ method ] )"	683:8:20436:20513	5209	0	True				
ANR	5348	CallExpression	"LOGE ( ""Cipher %s not found in crypto library"" , supported_aead_ciphers [ method ] )"		5209	0					
ANR	5349	Callee	LOGE		5209	0					
ANR	5350	Identifier	LOGE		5209	0					
ANR	5351	ArgumentList	"""Cipher %s not found in crypto library"""		5209	1					
ANR	5352	Argument	"""Cipher %s not found in crypto library"""		5209	0					
ANR	5353	PrimaryExpression	"""Cipher %s not found in crypto library"""		5209	0					
ANR	5354	Argument	supported_aead_ciphers [ method ]		5209	1					
ANR	5355	ArrayIndexing	supported_aead_ciphers [ method ]		5209	0					
ANR	5356	Identifier	supported_aead_ciphers		5209	0					
ANR	5357	Identifier	method		5209	1					
ANR	5358	ExpressionStatement	"FATAL ( ""Cannot initialize cipher"" )"	684:8:20523:20556	5209	1	True				
ANR	5359	CallExpression	"FATAL ( ""Cannot initialize cipher"" )"		5209	0					
ANR	5360	Callee	FATAL		5209	0					
ANR	5361	Identifier	FATAL		5209	0					
ANR	5362	ArgumentList	"""Cannot initialize cipher"""		5209	1					
ANR	5363	Argument	"""Cannot initialize cipher"""		5209	0					
ANR	5364	PrimaryExpression	"""Cannot initialize cipher"""		5209	0					
ANR	5365	IfStatement	if ( key != NULL )		5209	5					
ANR	5366	Condition	key != NULL	687:8:20573:20583	5209	0	True				
ANR	5367	EqualityExpression	key != NULL		5209	0		!=			
ANR	5368	Identifier	key		5209	0					
ANR	5369	Identifier	NULL		5209	1					
ANR	5370	ExpressionStatement	"cipher -> key_len = crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"	688:8:20594:20703	5209	1	True				
ANR	5371	AssignmentExpression	"cipher -> key_len = crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		5209	0		=			
ANR	5372	PtrMemberAccess	cipher -> key_len		5209	0					
ANR	5373	Identifier	cipher		5209	0					
ANR	5374	Identifier	key_len		5209	1					
ANR	5375	CallExpression	"crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		5209	1					
ANR	5376	Callee	crypto_parse_key		5209	0					
ANR	5377	Identifier	crypto_parse_key		5209	0					
ANR	5378	ArgumentList	key		5209	1					
ANR	5379	Argument	key		5209	0					
ANR	5380	Identifier	key		5209	0					
ANR	5381	Argument	cipher -> key		5209	1					
ANR	5382	PtrMemberAccess	cipher -> key		5209	0					
ANR	5383	Identifier	cipher		5209	0					
ANR	5384	Identifier	key		5209	1					
ANR	5385	Argument	supported_aead_ciphers_key_size [ method ]		5209	2					
ANR	5386	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		5209	0					
ANR	5387	Identifier	supported_aead_ciphers_key_size		5209	0					
ANR	5388	Identifier	method		5209	1					
ANR	5389	ElseStatement	else		5209	0					
ANR	5390	ExpressionStatement	"cipher -> key_len = crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"	691:8:20722:20833	5209	0	True				
ANR	5391	AssignmentExpression	"cipher -> key_len = crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		5209	0		=			
ANR	5392	PtrMemberAccess	cipher -> key_len		5209	0					
ANR	5393	Identifier	cipher		5209	0					
ANR	5394	Identifier	key_len		5209	1					
ANR	5395	CallExpression	"crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		5209	1					
ANR	5396	Callee	crypto_derive_key		5209	0					
ANR	5397	Identifier	crypto_derive_key		5209	0					
ANR	5398	ArgumentList	pass		5209	1					
ANR	5399	Argument	pass		5209	0					
ANR	5400	Identifier	pass		5209	0					
ANR	5401	Argument	cipher -> key		5209	1					
ANR	5402	PtrMemberAccess	cipher -> key		5209	0					
ANR	5403	Identifier	cipher		5209	0					
ANR	5404	Identifier	key		5209	1					
ANR	5405	Argument	supported_aead_ciphers_key_size [ method ]		5209	2					
ANR	5406	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		5209	0					
ANR	5407	Identifier	supported_aead_ciphers_key_size		5209	0					
ANR	5408	Identifier	method		5209	1					
ANR	5409	IfStatement	if ( cipher -> key_len == 0 )		5209	6					
ANR	5410	Condition	cipher -> key_len == 0	694:8:20844:20863	5209	0	True				
ANR	5411	EqualityExpression	cipher -> key_len == 0		5209	0		==			
ANR	5412	PtrMemberAccess	cipher -> key_len		5209	0					
ANR	5413	Identifier	cipher		5209	0					
ANR	5414	Identifier	key_len		5209	1					
ANR	5415	PrimaryExpression	0		5209	1					
ANR	5416	CompoundStatement		32:30:1196:1196	5209	1					
ANR	5417	ExpressionStatement	"FATAL ( ""Cannot generate key and nonce"" )"	695:8:20876:20914	5209	0	True				
ANR	5418	CallExpression	"FATAL ( ""Cannot generate key and nonce"" )"		5209	0					
ANR	5419	Callee	FATAL		5209	0					
ANR	5420	Identifier	FATAL		5209	0					
ANR	5421	ArgumentList	"""Cannot generate key and nonce"""		5209	1					
ANR	5422	Argument	"""Cannot generate key and nonce"""		5209	0					
ANR	5423	PrimaryExpression	"""Cannot generate key and nonce"""		5209	0					
ANR	5424	ExpressionStatement	cipher -> nonce_len = supported_aead_ciphers_nonce_size [ method ]	698:4:20927:20988	5209	7	True				
ANR	5425	AssignmentExpression	cipher -> nonce_len = supported_aead_ciphers_nonce_size [ method ]		5209	0		=			
ANR	5426	PtrMemberAccess	cipher -> nonce_len		5209	0					
ANR	5427	Identifier	cipher		5209	0					
ANR	5428	Identifier	nonce_len		5209	1					
ANR	5429	ArrayIndexing	supported_aead_ciphers_nonce_size [ method ]		5209	1					
ANR	5430	Identifier	supported_aead_ciphers_nonce_size		5209	0					
ANR	5431	Identifier	method		5209	1					
ANR	5432	ExpressionStatement	cipher -> tag_len = supported_aead_ciphers_tag_size [ method ]	699:4:20994:21053	5209	8	True				
ANR	5433	AssignmentExpression	cipher -> tag_len = supported_aead_ciphers_tag_size [ method ]		5209	0		=			
ANR	5434	PtrMemberAccess	cipher -> tag_len		5209	0					
ANR	5435	Identifier	cipher		5209	0					
ANR	5436	Identifier	tag_len		5209	1					
ANR	5437	ArrayIndexing	supported_aead_ciphers_tag_size [ method ]		5209	1					
ANR	5438	Identifier	supported_aead_ciphers_tag_size		5209	0					
ANR	5439	Identifier	method		5209	1					
ANR	5440	ExpressionStatement	cipher -> method = method	700:4:21059:21085	5209	9	True				
ANR	5441	AssignmentExpression	cipher -> method = method		5209	0		=			
ANR	5442	PtrMemberAccess	cipher -> method		5209	0					
ANR	5443	Identifier	cipher		5209	0					
ANR	5444	Identifier	method		5209	1					
ANR	5445	Identifier	method		5209	1					
ANR	5446	ReturnStatement	return cipher ;	702:4:21092:21105	5209	10	True				
ANR	5447	Identifier	cipher		5209	0					
ANR	5448	ReturnType	cipher_t *		5209	1					
ANR	5449	Identifier	aead_key_init		5209	2					
ANR	5450	ParameterList	"int method , const char * pass , const char * key"		5209	3					
ANR	5451	Parameter	int method	662:14:19622:19631	5209	0	True				
ANR	5452	ParameterType	int		5209	0					
ANR	5453	Identifier	method		5209	1					
ANR	5454	Parameter	const char * pass	662:26:19634:19649	5209	1	True				
ANR	5455	ParameterType	const char *		5209	0					
ANR	5456	Identifier	pass		5209	1					
ANR	5457	Parameter	const char * key	662:44:19652:19666	5209	2	True				
ANR	5458	ParameterType	const char *		5209	0					
ANR	5459	Identifier	key		5209	1					
ANR	5460	CFGEntryNode	ENTRY		5209		True				
ANR	5461	CFGExitNode	EXIT		5209		True				
ANR	5462	Symbol	* supported_aead_ciphers_nonce_size		5209						
ANR	5463	Symbol	* * cipher		5209						
ANR	5464	Symbol	cipher -> info -> key_bitlen		5209						
ANR	5465	Symbol	* cipher -> info		5209						
ANR	5466	Symbol	cipher -> info -> iv_size		5209						
ANR	5467	Symbol	supported_aead_ciphers_key_size		5209						
ANR	5468	Symbol	* supported_aead_ciphers_key_size		5209						
ANR	5469	Symbol	cipher -> info -> base		5209						
ANR	5470	Symbol	cipher -> key		5209						
ANR	5471	Symbol	* supported_aead_ciphers_tag_size		5209						
ANR	5472	Symbol	cipher -> info		5209						
ANR	5473	Symbol	key		5209						
ANR	5474	Symbol	supported_aead_ciphers_nonce_size		5209						
ANR	5475	Symbol	supported_aead_ciphers		5209						
ANR	5476	Symbol	cipher		5209						
ANR	5477	Symbol	NULL		5209						
ANR	5478	Symbol	method		5209						
ANR	5479	Symbol	* supported_aead_ciphers		5209						
ANR	5480	Symbol	crypto_parse_key		5209						
ANR	5481	Symbol	pass		5209						
ANR	5482	Symbol	* cipher		5209						
ANR	5483	Symbol	cipher -> tag_len		5209						
ANR	5484	Symbol	AES128GCM		5209						
ANR	5485	Symbol	aead_get_cipher_type		5209						
ANR	5486	Symbol	crypto_derive_key		5209						
ANR	5487	Symbol	cipher_info		5209						
ANR	5488	Symbol	* method		5209						
ANR	5489	Symbol	supported_aead_ciphers_tag_size		5209						
ANR	5490	Symbol	AEAD_CIPHER_NUM		5209						
ANR	5491	Symbol	cipher -> key_len		5209						
ANR	5492	Symbol	cipher -> method		5209						
ANR	5493	Symbol	ss_malloc		5209						
ANR	5494	Symbol	cipher -> nonce_len		5209						
ANR	5495	Symbol	CHACHA20POLY1305IETF		5209						
ANR	5496	Function	aead_init	705:0:21110:21627							
ANR	5497	FunctionDef	"aead_init (const char * pass , const char * key , const char * method)"		5496	0					
ANR	5498	CompoundStatement		707:0:21186:21627	5496	0					
ANR	5499	IdentifierDeclStatement	int m = AES128GCM ;	708:4:21192:21209	5496	0	True				
ANR	5500	IdentifierDecl	m = AES128GCM		5496	0					
ANR	5501	IdentifierDeclType	int		5496	0					
ANR	5502	Identifier	m		5496	1					
ANR	5503	AssignmentExpression	m = AES128GCM		5496	2		=			
ANR	5504	Identifier	AES128GCM		5496	0					
ANR	5505	Identifier	AES128GCM		5496	1					
ANR	5506	IfStatement	if ( method != NULL )		5496	1					
ANR	5507	Condition	method != NULL	709:8:21219:21232	5496	0	True				
ANR	5508	EqualityExpression	method != NULL		5496	0		!=			
ANR	5509	Identifier	method		5496	0					
ANR	5510	Identifier	NULL		5496	1					
ANR	5511	CompoundStatement		3:24:48:48	5496	1					
ANR	5512	ForStatement	for ( m = AES128GCM ; m < AEAD_CIPHER_NUM ; m ++ )		5496	0					
ANR	5513	ForInit	m = AES128GCM ;	711:13:21286:21299	5496	0	True				
ANR	5514	AssignmentExpression	m = AES128GCM		5496	0		=			
ANR	5515	Identifier	m		5496	0					
ANR	5516	Identifier	AES128GCM		5496	1					
ANR	5517	Condition	m < AEAD_CIPHER_NUM	711:28:21301:21319	5496	1	True				
ANR	5518	RelationalExpression	m < AEAD_CIPHER_NUM		5496	0		<			
ANR	5519	Identifier	m		5496	0					
ANR	5520	Identifier	AEAD_CIPHER_NUM		5496	1					
ANR	5521	PostIncDecOperationExpression	m ++	711:49:21322:21324	5496	2	True				
ANR	5522	Identifier	m		5496	0					
ANR	5523	IncDec	++		5496	1					
ANR	5524	IfStatement	"if ( strcmp ( method , supported_aead_ciphers [ m ] ) == 0 )"		5496	3					
ANR	5525	Condition	"strcmp ( method , supported_aead_ciphers [ m ] ) == 0"	712:16:21343:21388	5496	0	True				
ANR	5526	EqualityExpression	"strcmp ( method , supported_aead_ciphers [ m ] ) == 0"		5496	0		==			
ANR	5527	CallExpression	"strcmp ( method , supported_aead_ciphers [ m ] )"		5496	0					
ANR	5528	Callee	strcmp		5496	0					
ANR	5529	Identifier	strcmp		5496	0					
ANR	5530	ArgumentList	method		5496	1					
ANR	5531	Argument	method		5496	0					
ANR	5532	Identifier	method		5496	0					
ANR	5533	Argument	supported_aead_ciphers [ m ]		5496	1					
ANR	5534	ArrayIndexing	supported_aead_ciphers [ m ]		5496	0					
ANR	5535	Identifier	supported_aead_ciphers		5496	0					
ANR	5536	Identifier	m		5496	1					
ANR	5537	PrimaryExpression	0		5496	1					
ANR	5538	CompoundStatement		6:64:204:204	5496	1					
ANR	5539	BreakStatement	break ;	713:16:21409:21414	5496	0	True				
ANR	5540	IfStatement	if ( m >= AEAD_CIPHER_NUM )		5496	1					
ANR	5541	Condition	m >= AEAD_CIPHER_NUM	715:12:21442:21461	5496	0	True				
ANR	5542	RelationalExpression	m >= AEAD_CIPHER_NUM		5496	0		>=			
ANR	5543	Identifier	m		5496	0					
ANR	5544	Identifier	AEAD_CIPHER_NUM		5496	1					
ANR	5545	CompoundStatement		9:34:277:277	5496	1					
ANR	5546	ExpressionStatement	"LOGE ( ""Invalid cipher name: %s, use aes-256-gcm instead"" , method )"	716:12:21478:21542	5496	0	True				
ANR	5547	CallExpression	"LOGE ( ""Invalid cipher name: %s, use aes-256-gcm instead"" , method )"		5496	0					
ANR	5548	Callee	LOGE		5496	0					
ANR	5549	Identifier	LOGE		5496	0					
ANR	5550	ArgumentList	"""Invalid cipher name: %s, use aes-256-gcm instead"""		5496	1					
ANR	5551	Argument	"""Invalid cipher name: %s, use aes-256-gcm instead"""		5496	0					
ANR	5552	PrimaryExpression	"""Invalid cipher name: %s, use aes-256-gcm instead"""		5496	0					
ANR	5553	Argument	method		5496	1					
ANR	5554	Identifier	method		5496	0					
ANR	5555	ExpressionStatement	m = AES256GCM	717:12:21556:21569	5496	1	True				
ANR	5556	AssignmentExpression	m = AES256GCM		5496	0		=			
ANR	5557	Identifier	m		5496	0					
ANR	5558	Identifier	AES256GCM		5496	1					
ANR	5559	ReturnStatement	"return aead_key_init ( m , pass , key ) ;"	720:4:21591:21625	5496	2	True				
ANR	5560	CallExpression	"aead_key_init ( m , pass , key )"		5496	0					
ANR	5561	Callee	aead_key_init		5496	0					
ANR	5562	Identifier	aead_key_init		5496	0					
ANR	5563	ArgumentList	m		5496	1					
ANR	5564	Argument	m		5496	0					
ANR	5565	Identifier	m		5496	0					
ANR	5566	Argument	pass		5496	1					
ANR	5567	Identifier	pass		5496	0					
ANR	5568	Argument	key		5496	2					
ANR	5569	Identifier	key		5496	0					
ANR	5570	ReturnType	cipher_t *		5496	1					
ANR	5571	Identifier	aead_init		5496	2					
ANR	5572	ParameterList	"const char * pass , const char * key , const char * method"		5496	3					
ANR	5573	Parameter	const char * pass	706:10:21131:21146	5496	0	True				
ANR	5574	ParameterType	const char *		5496	0					
ANR	5575	Identifier	pass		5496	1					
ANR	5576	Parameter	const char * key	706:28:21149:21163	5496	1	True				
ANR	5577	ParameterType	const char *		5496	0					
ANR	5578	Identifier	key		5496	1					
ANR	5579	Parameter	const char * method	706:45:21166:21183	5496	2	True				
ANR	5580	ParameterType	const char *		5496	0					
ANR	5581	Identifier	method		5496	1					
ANR	5582	CFGEntryNode	ENTRY		5496		True				
ANR	5583	CFGExitNode	EXIT		5496		True				
ANR	5584	Symbol	strcmp		5496						
ANR	5585	Symbol	AES256GCM		5496						
ANR	5586	Symbol	NULL		5496						
ANR	5587	Symbol	method		5496						
ANR	5588	Symbol	* supported_aead_ciphers		5496						
ANR	5589	Symbol	pass		5496						
ANR	5590	Symbol	AES128GCM		5496						
ANR	5591	Symbol	m		5496						
ANR	5592	Symbol	AEAD_CIPHER_NUM		5496						
ANR	5593	Symbol	* m		5496						
ANR	5594	Symbol	aead_key_init		5496						
ANR	5595	Symbol	key		5496						
ANR	5596	Symbol	supported_aead_ciphers		5496						
