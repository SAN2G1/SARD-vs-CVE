command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	59115	File	data/converged/CVE-2017-15924_shadowsocks-libev/src_aead.c								
ANR	59116	DeclStmt									
ANR	59117	Decl							const char	const char * [ AEAD_CIPHER_NUM ]	supported_aead_ciphers
ANR	59118	DeclStmt									
ANR	59119	Decl							const char	const char * [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_mbedtls
ANR	59120	DeclStmt									
ANR	59121	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_nonce_size
ANR	59122	DeclStmt									
ANR	59123	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_key_size
ANR	59124	DeclStmt									
ANR	59125	Decl							const int	const int [ AEAD_CIPHER_NUM ]	supported_aead_ciphers_tag_size
ANR	59126	Function	aead_cipher_encrypt	148:0:4571:5956							
ANR	59127	FunctionDef	"aead_cipher_encrypt (cipher_ctx_t * cipher_ctx , uint8_t * c , size_t * clen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k)"		59126	0					
ANR	59128	CompoundStatement		158:0:4890:5956	59126	0					
ANR	59129	IdentifierDeclStatement	int err = CRYPTO_OK ;	159:4:4896:4936	59126	0	True				
ANR	59130	IdentifierDecl	err = CRYPTO_OK		59126	0					
ANR	59131	IdentifierDeclType	int		59126	0					
ANR	59132	Identifier	err		59126	1					
ANR	59133	AssignmentExpression	err = CRYPTO_OK		59126	2		=			
ANR	59134	Identifier	CRYPTO_OK		59126	0					
ANR	59135	Identifier	CRYPTO_OK		59126	1					
ANR	59136	IdentifierDeclStatement	unsigned long long long_clen = 0 ;	160:4:4942:4974	59126	1	True				
ANR	59137	IdentifierDecl	long_clen = 0		59126	0					
ANR	59138	IdentifierDeclType	unsigned long long		59126	0					
ANR	59139	Identifier	long_clen		59126	1					
ANR	59140	AssignmentExpression	long_clen = 0		59126	2		=			
ANR	59141	Identifier	long_clen		59126	0					
ANR	59142	PrimaryExpression	0		59126	1					
ANR	59143	IdentifierDeclStatement	size_t nlen = cipher_ctx -> cipher -> nonce_len ;	162:4:4981:5024	59126	2	True				
ANR	59144	IdentifierDecl	nlen = cipher_ctx -> cipher -> nonce_len		59126	0					
ANR	59145	IdentifierDeclType	size_t		59126	0					
ANR	59146	Identifier	nlen		59126	1					
ANR	59147	AssignmentExpression	nlen = cipher_ctx -> cipher -> nonce_len		59126	2		=			
ANR	59148	Identifier	nlen		59126	0					
ANR	59149	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		59126	1					
ANR	59150	PtrMemberAccess	cipher_ctx -> cipher		59126	0					
ANR	59151	Identifier	cipher_ctx		59126	0					
ANR	59152	Identifier	cipher		59126	1					
ANR	59153	Identifier	nonce_len		59126	1					
ANR	59154	IdentifierDeclStatement	size_t tlen = cipher_ctx -> cipher -> tag_len ;	163:4:5030:5071	59126	3	True				
ANR	59155	IdentifierDecl	tlen = cipher_ctx -> cipher -> tag_len		59126	0					
ANR	59156	IdentifierDeclType	size_t		59126	0					
ANR	59157	Identifier	tlen		59126	1					
ANR	59158	AssignmentExpression	tlen = cipher_ctx -> cipher -> tag_len		59126	2		=			
ANR	59159	Identifier	tlen		59126	0					
ANR	59160	PtrMemberAccess	cipher_ctx -> cipher -> tag_len		59126	1					
ANR	59161	PtrMemberAccess	cipher_ctx -> cipher		59126	0					
ANR	59162	Identifier	cipher_ctx		59126	0					
ANR	59163	Identifier	cipher		59126	1					
ANR	59164	Identifier	tag_len		59126	1					
ANR	59165	SwitchStatement	switch ( cipher_ctx -> cipher -> method )		59126	4					
ANR	59166	Condition	cipher_ctx -> cipher -> method	165:12:5086:5111	59126	0	True				
ANR	59167	PtrMemberAccess	cipher_ctx -> cipher -> method		59126	0					
ANR	59168	PtrMemberAccess	cipher_ctx -> cipher		59126	0					
ANR	59169	Identifier	cipher_ctx		59126	0					
ANR	59170	Identifier	cipher		59126	1					
ANR	59171	Identifier	method		59126	1					
ANR	59172	CompoundStatement		8:40:223:223	59126	1					
ANR	59173	Label	case AES128GCM :	166:4:5120:5134	59126	0	True				
ANR	59174	Identifier	AES128GCM		59126	0					
ANR	59175	Label	case AES192GCM :	167:4:5140:5154	59126	1	True				
ANR	59176	Identifier	AES192GCM		59126	0					
ANR	59177	Label	case AES256GCM :	168:4:5160:5174	59126	2	True				
ANR	59178	Identifier	AES256GCM		59126	0					
ANR	59179	ExpressionStatement	"err = mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"	169:8:5184:5330	59126	3	True				
ANR	59180	AssignmentExpression	"err = mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"		59126	0		=			
ANR	59181	Identifier	err		59126	0					
ANR	59182	CallExpression	"mbedtls_cipher_auth_encrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen , c , clen , c + mlen , tlen )"		59126	1					
ANR	59183	Callee	mbedtls_cipher_auth_encrypt		59126	0					
ANR	59184	Identifier	mbedtls_cipher_auth_encrypt		59126	0					
ANR	59185	ArgumentList	cipher_ctx -> evp		59126	1					
ANR	59186	Argument	cipher_ctx -> evp		59126	0					
ANR	59187	PtrMemberAccess	cipher_ctx -> evp		59126	0					
ANR	59188	Identifier	cipher_ctx		59126	0					
ANR	59189	Identifier	evp		59126	1					
ANR	59190	Argument	n		59126	1					
ANR	59191	Identifier	n		59126	0					
ANR	59192	Argument	nlen		59126	2					
ANR	59193	Identifier	nlen		59126	0					
ANR	59194	Argument	ad		59126	3					
ANR	59195	Identifier	ad		59126	0					
ANR	59196	Argument	adlen		59126	4					
ANR	59197	Identifier	adlen		59126	0					
ANR	59198	Argument	m		59126	5					
ANR	59199	Identifier	m		59126	0					
ANR	59200	Argument	mlen		59126	6					
ANR	59201	Identifier	mlen		59126	0					
ANR	59202	Argument	c		59126	7					
ANR	59203	Identifier	c		59126	0					
ANR	59204	Argument	clen		59126	8					
ANR	59205	Identifier	clen		59126	0					
ANR	59206	Argument	c + mlen		59126	9					
ANR	59207	AdditiveExpression	c + mlen		59126	0		+			
ANR	59208	Identifier	c		59126	0					
ANR	59209	Identifier	mlen		59126	1					
ANR	59210	Argument	tlen		59126	10					
ANR	59211	Identifier	tlen		59126	0					
ANR	59212	ExpressionStatement	* clen += tlen	171:8:5340:5353	59126	4	True				
ANR	59213	AssignmentExpression	* clen += tlen		59126	0		+=			
ANR	59214	UnaryOperationExpression	* clen		59126	0					
ANR	59215	UnaryOperator	*		59126	0					
ANR	59216	Identifier	clen		59126	1					
ANR	59217	Identifier	tlen		59126	1					
ANR	59218	BreakStatement	break ;	172:8:5363:5368	59126	5	True				
ANR	59219	Label	case CHACHA20POLY1305IETF :	173:4:5374:5399	59126	6	True				
ANR	59220	Identifier	CHACHA20POLY1305IETF		59126	0					
ANR	59221	ExpressionStatement	"err = crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"	174:8:5409:5559	59126	7	True				
ANR	59222	AssignmentExpression	"err = crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		59126	0		=			
ANR	59223	Identifier	err		59126	0					
ANR	59224	CallExpression	"crypto_aead_chacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		59126	1					
ANR	59225	Callee	crypto_aead_chacha20poly1305_ietf_encrypt		59126	0					
ANR	59226	Identifier	crypto_aead_chacha20poly1305_ietf_encrypt		59126	0					
ANR	59227	ArgumentList	c		59126	1					
ANR	59228	Argument	c		59126	0					
ANR	59229	Identifier	c		59126	0					
ANR	59230	Argument	& long_clen		59126	1					
ANR	59231	UnaryOperationExpression	& long_clen		59126	0					
ANR	59232	UnaryOperator	&		59126	0					
ANR	59233	Identifier	long_clen		59126	1					
ANR	59234	Argument	m		59126	2					
ANR	59235	Identifier	m		59126	0					
ANR	59236	Argument	mlen		59126	3					
ANR	59237	Identifier	mlen		59126	0					
ANR	59238	Argument	ad		59126	4					
ANR	59239	Identifier	ad		59126	0					
ANR	59240	Argument	adlen		59126	5					
ANR	59241	Identifier	adlen		59126	0					
ANR	59242	Argument	NULL		59126	6					
ANR	59243	Identifier	NULL		59126	0					
ANR	59244	Argument	n		59126	7					
ANR	59245	Identifier	n		59126	0					
ANR	59246	Argument	k		59126	8					
ANR	59247	Identifier	k		59126	0					
ANR	59248	ExpressionStatement	* clen = ( size_t ) long_clen	176:8:5569:5594	59126	8	True				
ANR	59249	AssignmentExpression	* clen = ( size_t ) long_clen		59126	0		=			
ANR	59250	UnaryOperationExpression	* clen		59126	0					
ANR	59251	UnaryOperator	*		59126	0					
ANR	59252	Identifier	clen		59126	1					
ANR	59253	CastExpression	( size_t ) long_clen		59126	1					
ANR	59254	CastTarget	size_t		59126	0					
ANR	59255	Identifier	long_clen		59126	1					
ANR	59256	BreakStatement	break ;	177:8:5604:5609	59126	9	True				
ANR	59257	Label	case XCHACHA20POLY1305IETF :	179:4:5644:5670	59126	10	True				
ANR	59258	Identifier	XCHACHA20POLY1305IETF		59126	0					
ANR	59259	ExpressionStatement	"err = crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"	180:8:5680:5832	59126	11	True				
ANR	59260	AssignmentExpression	"err = crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		59126	0		=			
ANR	59261	Identifier	err		59126	0					
ANR	59262	CallExpression	"crypto_aead_xchacha20poly1305_ietf_encrypt ( c , & long_clen , m , mlen , ad , adlen , NULL , n , k )"		59126	1					
ANR	59263	Callee	crypto_aead_xchacha20poly1305_ietf_encrypt		59126	0					
ANR	59264	Identifier	crypto_aead_xchacha20poly1305_ietf_encrypt		59126	0					
ANR	59265	ArgumentList	c		59126	1					
ANR	59266	Argument	c		59126	0					
ANR	59267	Identifier	c		59126	0					
ANR	59268	Argument	& long_clen		59126	1					
ANR	59269	UnaryOperationExpression	& long_clen		59126	0					
ANR	59270	UnaryOperator	&		59126	0					
ANR	59271	Identifier	long_clen		59126	1					
ANR	59272	Argument	m		59126	2					
ANR	59273	Identifier	m		59126	0					
ANR	59274	Argument	mlen		59126	3					
ANR	59275	Identifier	mlen		59126	0					
ANR	59276	Argument	ad		59126	4					
ANR	59277	Identifier	ad		59126	0					
ANR	59278	Argument	adlen		59126	5					
ANR	59279	Identifier	adlen		59126	0					
ANR	59280	Argument	NULL		59126	6					
ANR	59281	Identifier	NULL		59126	0					
ANR	59282	Argument	n		59126	7					
ANR	59283	Identifier	n		59126	0					
ANR	59284	Argument	k		59126	8					
ANR	59285	Identifier	k		59126	0					
ANR	59286	ExpressionStatement	* clen = ( size_t ) long_clen	182:8:5842:5867	59126	12	True				
ANR	59287	AssignmentExpression	* clen = ( size_t ) long_clen		59126	0		=			
ANR	59288	UnaryOperationExpression	* clen		59126	0					
ANR	59289	UnaryOperator	*		59126	0					
ANR	59290	Identifier	clen		59126	1					
ANR	59291	CastExpression	( size_t ) long_clen		59126	1					
ANR	59292	CastTarget	size_t		59126	0					
ANR	59293	Identifier	long_clen		59126	1					
ANR	59294	BreakStatement	break ;	183:8:5877:5882	59126	13	True				
ANR	59295	Label	default :	185:4:5895:5902	59126	14	True				
ANR	59296	Identifier	default		59126	0					
ANR	59297	ReturnStatement	return CRYPTO_ERROR ;	186:8:5912:5931	59126	15	True				
ANR	59298	Identifier	CRYPTO_ERROR		59126	0					
ANR	59299	ReturnStatement	return err ;	189:4:5944:5954	59126	5	True				
ANR	59300	Identifier	err		59126	0					
ANR	59301	ReturnType	static int		59126	1					
ANR	59302	Identifier	aead_cipher_encrypt		59126	2					
ANR	59303	ParameterList	"cipher_ctx_t * cipher_ctx , uint8_t * c , size_t * clen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k"		59126	3					
ANR	59304	Parameter	cipher_ctx_t * cipher_ctx	149:20:4602:4625	59126	0	True				
ANR	59305	ParameterType	cipher_ctx_t *		59126	0					
ANR	59306	Identifier	cipher_ctx		59126	1					
ANR	59307	Parameter	uint8_t * c	150:20:4648:4657	59126	1	True				
ANR	59308	ParameterType	uint8_t *		59126	0					
ANR	59309	Identifier	c		59126	1					
ANR	59310	Parameter	size_t * clen	151:20:4680:4691	59126	2	True				
ANR	59311	ParameterType	size_t *		59126	0					
ANR	59312	Identifier	clen		59126	1					
ANR	59313	Parameter	uint8_t * m	152:20:4714:4723	59126	3	True				
ANR	59314	ParameterType	uint8_t *		59126	0					
ANR	59315	Identifier	m		59126	1					
ANR	59316	Parameter	size_t mlen	153:20:4746:4756	59126	4	True				
ANR	59317	ParameterType	size_t		59126	0					
ANR	59318	Identifier	mlen		59126	1					
ANR	59319	Parameter	uint8_t * ad	154:20:4779:4789	59126	5	True				
ANR	59320	ParameterType	uint8_t *		59126	0					
ANR	59321	Identifier	ad		59126	1					
ANR	59322	Parameter	size_t adlen	155:20:4812:4823	59126	6	True				
ANR	59323	ParameterType	size_t		59126	0					
ANR	59324	Identifier	adlen		59126	1					
ANR	59325	Parameter	uint8_t * n	156:20:4846:4855	59126	7	True				
ANR	59326	ParameterType	uint8_t *		59126	0					
ANR	59327	Identifier	n		59126	1					
ANR	59328	Parameter	uint8_t * k	157:20:4878:4887	59126	8	True				
ANR	59329	ParameterType	uint8_t *		59126	0					
ANR	59330	Identifier	k		59126	1					
ANR	59331	CFGEntryNode	ENTRY		59126		True				
ANR	59332	CFGExitNode	EXIT		59126		True				
ANR	59333	Symbol	& long_clen		59126						
ANR	59334	Symbol	cipher_ctx -> cipher		59126						
ANR	59335	Symbol	CRYPTO_ERROR		59126						
ANR	59336	Symbol	CRYPTO_OK		59126						
ANR	59337	Symbol	* * cipher_ctx		59126						
ANR	59338	Symbol	cipher_ctx -> cipher -> nonce_len		59126						
ANR	59339	Symbol	nlen		59126						
ANR	59340	Symbol	* clen		59126						
ANR	59341	Symbol	adlen		59126						
ANR	59342	Symbol	tlen		59126						
ANR	59343	Symbol	cipher_ctx -> cipher -> tag_len		59126						
ANR	59344	Symbol	crypto_aead_chacha20poly1305_ietf_encrypt		59126						
ANR	59345	Symbol	* cipher_ctx -> cipher		59126						
ANR	59346	Symbol	cipher_ctx -> cipher -> method		59126						
ANR	59347	Symbol	crypto_aead_xchacha20poly1305_ietf_encrypt		59126						
ANR	59348	Symbol	cipher_ctx		59126						
ANR	59349	Symbol	c		59126						
ANR	59350	Symbol	ad		59126						
ANR	59351	Symbol	NULL		59126						
ANR	59352	Symbol	err		59126						
ANR	59353	Symbol	* cipher_ctx		59126						
ANR	59354	Symbol	k		59126						
ANR	59355	Symbol	m		59126						
ANR	59356	Symbol	n		59126						
ANR	59357	Symbol	long_clen		59126						
ANR	59358	Symbol	cipher_ctx -> evp		59126						
ANR	59359	Symbol	mlen		59126						
ANR	59360	Symbol	clen		59126						
ANR	59361	Symbol	mbedtls_cipher_auth_encrypt		59126						
ANR	59362	Function	aead_cipher_decrypt	192:0:5959:7354							
ANR	59363	FunctionDef	"aead_cipher_decrypt (cipher_ctx_t * cipher_ctx , uint8_t * p , size_t * plen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k)"		59362	0					
ANR	59364	CompoundStatement		198:0:6198:7354	59362	0					
ANR	59365	IdentifierDeclStatement	int err = CRYPTO_ERROR ;	199:4:6204:6247	59362	0	True				
ANR	59366	IdentifierDecl	err = CRYPTO_ERROR		59362	0					
ANR	59367	IdentifierDeclType	int		59362	0					
ANR	59368	Identifier	err		59362	1					
ANR	59369	AssignmentExpression	err = CRYPTO_ERROR		59362	2		=			
ANR	59370	Identifier	CRYPTO_ERROR		59362	0					
ANR	59371	Identifier	CRYPTO_ERROR		59362	1					
ANR	59372	IdentifierDeclStatement	unsigned long long long_plen = 0 ;	200:4:6253:6285	59362	1	True				
ANR	59373	IdentifierDecl	long_plen = 0		59362	0					
ANR	59374	IdentifierDeclType	unsigned long long		59362	0					
ANR	59375	Identifier	long_plen		59362	1					
ANR	59376	AssignmentExpression	long_plen = 0		59362	2		=			
ANR	59377	Identifier	long_plen		59362	0					
ANR	59378	PrimaryExpression	0		59362	1					
ANR	59379	IdentifierDeclStatement	size_t nlen = cipher_ctx -> cipher -> nonce_len ;	202:4:6292:6335	59362	2	True				
ANR	59380	IdentifierDecl	nlen = cipher_ctx -> cipher -> nonce_len		59362	0					
ANR	59381	IdentifierDeclType	size_t		59362	0					
ANR	59382	Identifier	nlen		59362	1					
ANR	59383	AssignmentExpression	nlen = cipher_ctx -> cipher -> nonce_len		59362	2		=			
ANR	59384	Identifier	nlen		59362	0					
ANR	59385	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		59362	1					
ANR	59386	PtrMemberAccess	cipher_ctx -> cipher		59362	0					
ANR	59387	Identifier	cipher_ctx		59362	0					
ANR	59388	Identifier	cipher		59362	1					
ANR	59389	Identifier	nonce_len		59362	1					
ANR	59390	IdentifierDeclStatement	size_t tlen = cipher_ctx -> cipher -> tag_len ;	203:4:6341:6382	59362	3	True				
ANR	59391	IdentifierDecl	tlen = cipher_ctx -> cipher -> tag_len		59362	0					
ANR	59392	IdentifierDeclType	size_t		59362	0					
ANR	59393	Identifier	tlen		59362	1					
ANR	59394	AssignmentExpression	tlen = cipher_ctx -> cipher -> tag_len		59362	2		=			
ANR	59395	Identifier	tlen		59362	0					
ANR	59396	PtrMemberAccess	cipher_ctx -> cipher -> tag_len		59362	1					
ANR	59397	PtrMemberAccess	cipher_ctx -> cipher		59362	0					
ANR	59398	Identifier	cipher_ctx		59362	0					
ANR	59399	Identifier	cipher		59362	1					
ANR	59400	Identifier	tag_len		59362	1					
ANR	59401	SwitchStatement	switch ( cipher_ctx -> cipher -> method )		59362	4					
ANR	59402	Condition	cipher_ctx -> cipher -> method	205:12:6397:6422	59362	0	True				
ANR	59403	PtrMemberAccess	cipher_ctx -> cipher -> method		59362	0					
ANR	59404	PtrMemberAccess	cipher_ctx -> cipher		59362	0					
ANR	59405	Identifier	cipher_ctx		59362	0					
ANR	59406	Identifier	cipher		59362	1					
ANR	59407	Identifier	method		59362	1					
ANR	59408	CompoundStatement		8:40:226:226	59362	1					
ANR	59409	Label	case AES128GCM :	206:4:6431:6445	59362	0	True				
ANR	59410	Identifier	AES128GCM		59362	0					
ANR	59411	Label	case AES192GCM :	207:4:6451:6465	59362	1	True				
ANR	59412	Identifier	AES192GCM		59362	0					
ANR	59413	Label	case AES256GCM :	208:4:6471:6485	59362	2	True				
ANR	59414	Identifier	AES256GCM		59362	0					
ANR	59415	ExpressionStatement	"err = mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"	209:8:6495:6655	59362	3	True				
ANR	59416	AssignmentExpression	"err = mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"		59362	0		=			
ANR	59417	Identifier	err		59362	0					
ANR	59418	CallExpression	"mbedtls_cipher_auth_decrypt ( cipher_ctx -> evp , n , nlen , ad , adlen , m , mlen - tlen , p , plen , m + mlen - tlen , tlen )"		59362	1					
ANR	59419	Callee	mbedtls_cipher_auth_decrypt		59362	0					
ANR	59420	Identifier	mbedtls_cipher_auth_decrypt		59362	0					
ANR	59421	ArgumentList	cipher_ctx -> evp		59362	1					
ANR	59422	Argument	cipher_ctx -> evp		59362	0					
ANR	59423	PtrMemberAccess	cipher_ctx -> evp		59362	0					
ANR	59424	Identifier	cipher_ctx		59362	0					
ANR	59425	Identifier	evp		59362	1					
ANR	59426	Argument	n		59362	1					
ANR	59427	Identifier	n		59362	0					
ANR	59428	Argument	nlen		59362	2					
ANR	59429	Identifier	nlen		59362	0					
ANR	59430	Argument	ad		59362	3					
ANR	59431	Identifier	ad		59362	0					
ANR	59432	Argument	adlen		59362	4					
ANR	59433	Identifier	adlen		59362	0					
ANR	59434	Argument	m		59362	5					
ANR	59435	Identifier	m		59362	0					
ANR	59436	Argument	mlen - tlen		59362	6					
ANR	59437	AdditiveExpression	mlen - tlen		59362	0		-			
ANR	59438	Identifier	mlen		59362	0					
ANR	59439	Identifier	tlen		59362	1					
ANR	59440	Argument	p		59362	7					
ANR	59441	Identifier	p		59362	0					
ANR	59442	Argument	plen		59362	8					
ANR	59443	Identifier	plen		59362	0					
ANR	59444	Argument	m + mlen - tlen		59362	9					
ANR	59445	AdditiveExpression	m + mlen - tlen		59362	0		+			
ANR	59446	Identifier	m		59362	0					
ANR	59447	AdditiveExpression	mlen - tlen		59362	1		-			
ANR	59448	Identifier	mlen		59362	0					
ANR	59449	Identifier	tlen		59362	1					
ANR	59450	Argument	tlen		59362	10					
ANR	59451	Identifier	tlen		59362	0					
ANR	59452	BreakStatement	break ;	211:8:6665:6670	59362	4	True				
ANR	59453	Label	case CHACHA20POLY1305IETF :	212:4:6676:6701	59362	5	True				
ANR	59454	Identifier	CHACHA20POLY1305IETF		59362	0					
ANR	59455	ExpressionStatement	"err = crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"	213:8:6711:6861	59362	6	True				
ANR	59456	AssignmentExpression	"err = crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		59362	0		=			
ANR	59457	Identifier	err		59362	0					
ANR	59458	CallExpression	"crypto_aead_chacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		59362	1					
ANR	59459	Callee	crypto_aead_chacha20poly1305_ietf_decrypt		59362	0					
ANR	59460	Identifier	crypto_aead_chacha20poly1305_ietf_decrypt		59362	0					
ANR	59461	ArgumentList	p		59362	1					
ANR	59462	Argument	p		59362	0					
ANR	59463	Identifier	p		59362	0					
ANR	59464	Argument	& long_plen		59362	1					
ANR	59465	UnaryOperationExpression	& long_plen		59362	0					
ANR	59466	UnaryOperator	&		59362	0					
ANR	59467	Identifier	long_plen		59362	1					
ANR	59468	Argument	NULL		59362	2					
ANR	59469	Identifier	NULL		59362	0					
ANR	59470	Argument	m		59362	3					
ANR	59471	Identifier	m		59362	0					
ANR	59472	Argument	mlen		59362	4					
ANR	59473	Identifier	mlen		59362	0					
ANR	59474	Argument	ad		59362	5					
ANR	59475	Identifier	ad		59362	0					
ANR	59476	Argument	adlen		59362	6					
ANR	59477	Identifier	adlen		59362	0					
ANR	59478	Argument	n		59362	7					
ANR	59479	Identifier	n		59362	0					
ANR	59480	Argument	k		59362	8					
ANR	59481	Identifier	k		59362	0					
ANR	59482	ExpressionStatement	* plen = ( size_t ) long_plen	215:8:6871:6896	59362	7	True				
ANR	59483	AssignmentExpression	* plen = ( size_t ) long_plen		59362	0		=			
ANR	59484	UnaryOperationExpression	* plen		59362	0					
ANR	59485	UnaryOperator	*		59362	0					
ANR	59486	Identifier	plen		59362	1					
ANR	59487	CastExpression	( size_t ) long_plen		59362	1					
ANR	59488	CastTarget	size_t		59362	0					
ANR	59489	Identifier	long_plen		59362	1					
ANR	59490	BreakStatement	break ;	216:8:6954:6959	59362	8	True				
ANR	59491	Label	case XCHACHA20POLY1305IETF :	218:4:6994:7020	59362	9	True				
ANR	59492	Identifier	XCHACHA20POLY1305IETF		59362	0					
ANR	59493	ExpressionStatement	"err = crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"	219:8:7030:7182	59362	10	True				
ANR	59494	AssignmentExpression	"err = crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		59362	0		=			
ANR	59495	Identifier	err		59362	0					
ANR	59496	CallExpression	"crypto_aead_xchacha20poly1305_ietf_decrypt ( p , & long_plen , NULL , m , mlen , ad , adlen , n , k )"		59362	1					
ANR	59497	Callee	crypto_aead_xchacha20poly1305_ietf_decrypt		59362	0					
ANR	59498	Identifier	crypto_aead_xchacha20poly1305_ietf_decrypt		59362	0					
ANR	59499	ArgumentList	p		59362	1					
ANR	59500	Argument	p		59362	0					
ANR	59501	Identifier	p		59362	0					
ANR	59502	Argument	& long_plen		59362	1					
ANR	59503	UnaryOperationExpression	& long_plen		59362	0					
ANR	59504	UnaryOperator	&		59362	0					
ANR	59505	Identifier	long_plen		59362	1					
ANR	59506	Argument	NULL		59362	2					
ANR	59507	Identifier	NULL		59362	0					
ANR	59508	Argument	m		59362	3					
ANR	59509	Identifier	m		59362	0					
ANR	59510	Argument	mlen		59362	4					
ANR	59511	Identifier	mlen		59362	0					
ANR	59512	Argument	ad		59362	5					
ANR	59513	Identifier	ad		59362	0					
ANR	59514	Argument	adlen		59362	6					
ANR	59515	Identifier	adlen		59362	0					
ANR	59516	Argument	n		59362	7					
ANR	59517	Identifier	n		59362	0					
ANR	59518	Argument	k		59362	8					
ANR	59519	Identifier	k		59362	0					
ANR	59520	ExpressionStatement	* plen = ( size_t ) long_plen	221:8:7192:7217	59362	11	True				
ANR	59521	AssignmentExpression	* plen = ( size_t ) long_plen		59362	0		=			
ANR	59522	UnaryOperationExpression	* plen		59362	0					
ANR	59523	UnaryOperator	*		59362	0					
ANR	59524	Identifier	plen		59362	1					
ANR	59525	CastExpression	( size_t ) long_plen		59362	1					
ANR	59526	CastTarget	size_t		59362	0					
ANR	59527	Identifier	long_plen		59362	1					
ANR	59528	BreakStatement	break ;	222:8:7275:7280	59362	12	True				
ANR	59529	Label	default :	224:4:7293:7300	59362	13	True				
ANR	59530	Identifier	default		59362	0					
ANR	59531	ReturnStatement	return CRYPTO_ERROR ;	225:8:7310:7329	59362	14	True				
ANR	59532	Identifier	CRYPTO_ERROR		59362	0					
ANR	59533	ReturnStatement	return err ;	228:4:7342:7352	59362	5	True				
ANR	59534	Identifier	err		59362	0					
ANR	59535	ReturnType	static int		59362	1					
ANR	59536	Identifier	aead_cipher_decrypt		59362	2					
ANR	59537	ParameterList	"cipher_ctx_t * cipher_ctx , uint8_t * p , size_t * plen , uint8_t * m , size_t mlen , uint8_t * ad , size_t adlen , uint8_t * n , uint8_t * k"		59362	3					
ANR	59538	Parameter	cipher_ctx_t * cipher_ctx	193:20:5990:6013	59362	0	True				
ANR	59539	ParameterType	cipher_ctx_t *		59362	0					
ANR	59540	Identifier	cipher_ctx		59362	1					
ANR	59541	Parameter	uint8_t * p	194:20:6036:6045	59362	1	True				
ANR	59542	ParameterType	uint8_t *		59362	0					
ANR	59543	Identifier	p		59362	1					
ANR	59544	Parameter	size_t * plen	194:32:6048:6059	59362	2	True				
ANR	59545	ParameterType	size_t *		59362	0					
ANR	59546	Identifier	plen		59362	1					
ANR	59547	Parameter	uint8_t * m	195:20:6082:6091	59362	3	True				
ANR	59548	ParameterType	uint8_t *		59362	0					
ANR	59549	Identifier	m		59362	1					
ANR	59550	Parameter	size_t mlen	195:32:6094:6104	59362	4	True				
ANR	59551	ParameterType	size_t		59362	0					
ANR	59552	Identifier	mlen		59362	1					
ANR	59553	Parameter	uint8_t * ad	196:20:6127:6137	59362	5	True				
ANR	59554	ParameterType	uint8_t *		59362	0					
ANR	59555	Identifier	ad		59362	1					
ANR	59556	Parameter	size_t adlen	196:33:6140:6151	59362	6	True				
ANR	59557	ParameterType	size_t		59362	0					
ANR	59558	Identifier	adlen		59362	1					
ANR	59559	Parameter	uint8_t * n	197:20:6174:6183	59362	7	True				
ANR	59560	ParameterType	uint8_t *		59362	0					
ANR	59561	Identifier	n		59362	1					
ANR	59562	Parameter	uint8_t * k	197:32:6186:6195	59362	8	True				
ANR	59563	ParameterType	uint8_t *		59362	0					
ANR	59564	Identifier	k		59362	1					
ANR	59565	CFGEntryNode	ENTRY		59362		True				
ANR	59566	CFGExitNode	EXIT		59362		True				
ANR	59567	Symbol	cipher_ctx -> cipher		59362						
ANR	59568	Symbol	CRYPTO_ERROR		59362						
ANR	59569	Symbol	mbedtls_cipher_auth_decrypt		59362						
ANR	59570	Symbol	& long_plen		59362						
ANR	59571	Symbol	crypto_aead_xchacha20poly1305_ietf_decrypt		59362						
ANR	59572	Symbol	* * cipher_ctx		59362						
ANR	59573	Symbol	plen		59362						
ANR	59574	Symbol	cipher_ctx -> cipher -> nonce_len		59362						
ANR	59575	Symbol	nlen		59362						
ANR	59576	Symbol	adlen		59362						
ANR	59577	Symbol	tlen		59362						
ANR	59578	Symbol	cipher_ctx -> cipher -> tag_len		59362						
ANR	59579	Symbol	* cipher_ctx -> cipher		59362						
ANR	59580	Symbol	cipher_ctx -> cipher -> method		59362						
ANR	59581	Symbol	crypto_aead_chacha20poly1305_ietf_decrypt		59362						
ANR	59582	Symbol	cipher_ctx		59362						
ANR	59583	Symbol	ad		59362						
ANR	59584	Symbol	NULL		59362						
ANR	59585	Symbol	err		59362						
ANR	59586	Symbol	* cipher_ctx		59362						
ANR	59587	Symbol	long_plen		59362						
ANR	59588	Symbol	k		59362						
ANR	59589	Symbol	m		59362						
ANR	59590	Symbol	n		59362						
ANR	59591	Symbol	p		59362						
ANR	59592	Symbol	cipher_ctx -> evp		59362						
ANR	59593	Symbol	* plen		59362						
ANR	59594	Symbol	mlen		59362						
ANR	59595	Function	aead_get_cipher_type	235:0:7443:8136							
ANR	59596	FunctionDef	aead_get_cipher_type (int method)		59595	0					
ANR	59597	CompoundStatement		237:0:7496:8136	59595	0					
ANR	59598	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		59595	0					
ANR	59599	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	238:8:7506:7552	59595	0	True				
ANR	59600	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		59595	0		||			
ANR	59601	RelationalExpression	method < AES128GCM		59595	0		<			
ANR	59602	Identifier	method		59595	0					
ANR	59603	Identifier	AES128GCM		59595	1					
ANR	59604	RelationalExpression	method >= AEAD_CIPHER_NUM		59595	1		>=			
ANR	59605	Identifier	method		59595	0					
ANR	59606	Identifier	AEAD_CIPHER_NUM		59595	1					
ANR	59607	CompoundStatement		2:57:58:58	59595	1					
ANR	59608	ExpressionStatement	"LOGE ( ""aead_get_cipher_type(): Illegal method"" )"	239:8:7565:7611	59595	0	True				
ANR	59609	CallExpression	"LOGE ( ""aead_get_cipher_type(): Illegal method"" )"		59595	0					
ANR	59610	Callee	LOGE		59595	0					
ANR	59611	Identifier	LOGE		59595	0					
ANR	59612	ArgumentList	"""aead_get_cipher_type(): Illegal method"""		59595	1					
ANR	59613	Argument	"""aead_get_cipher_type(): Illegal method"""		59595	0					
ANR	59614	PrimaryExpression	"""aead_get_cipher_type(): Illegal method"""		59595	0					
ANR	59615	ReturnStatement	return NULL ;	240:8:7621:7632	59595	1	True				
ANR	59616	Identifier	NULL		59595	0					
ANR	59617	IfStatement	if ( method >= CHACHA20POLY1305IETF )		59595	1					
ANR	59618	Condition	method >= CHACHA20POLY1305IETF	244:8:7703:7732	59595	0	True				
ANR	59619	RelationalExpression	method >= CHACHA20POLY1305IETF		59595	0		>=			
ANR	59620	Identifier	method		59595	0					
ANR	59621	Identifier	CHACHA20POLY1305IETF		59595	1					
ANR	59622	CompoundStatement		8:40:238:238	59595	1					
ANR	59623	ReturnStatement	return NULL ;	245:8:7745:7756	59595	0	True				
ANR	59624	Identifier	NULL		59595	0					
ANR	59625	IdentifierDeclStatement	const char * ciphername = supported_aead_ciphers [ method ] ;	248:4:7769:7825	59595	2	True				
ANR	59626	IdentifierDecl	* ciphername = supported_aead_ciphers [ method ]		59595	0					
ANR	59627	IdentifierDeclType	const char *		59595	0					
ANR	59628	Identifier	ciphername		59595	1					
ANR	59629	AssignmentExpression	* ciphername = supported_aead_ciphers [ method ]		59595	2		=			
ANR	59630	Identifier	ciphername		59595	0					
ANR	59631	ArrayIndexing	supported_aead_ciphers [ method ]		59595	1					
ANR	59632	Identifier	supported_aead_ciphers		59595	0					
ANR	59633	Identifier	method		59595	1					
ANR	59634	IdentifierDeclStatement	const char * mbedtlsname = supported_aead_ciphers_mbedtls [ method ] ;	249:4:7831:7895	59595	3	True				
ANR	59635	IdentifierDecl	* mbedtlsname = supported_aead_ciphers_mbedtls [ method ]		59595	0					
ANR	59636	IdentifierDeclType	const char *		59595	0					
ANR	59637	Identifier	mbedtlsname		59595	1					
ANR	59638	AssignmentExpression	* mbedtlsname = supported_aead_ciphers_mbedtls [ method ]		59595	2		=			
ANR	59639	Identifier	mbedtlsname		59595	0					
ANR	59640	ArrayIndexing	supported_aead_ciphers_mbedtls [ method ]		59595	1					
ANR	59641	Identifier	supported_aead_ciphers_mbedtls		59595	0					
ANR	59642	Identifier	method		59595	1					
ANR	59643	IfStatement	"if ( strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0 )"		59595	4					
ANR	59644	Condition	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0"	250:8:7905:7948	59595	0	True				
ANR	59645	EqualityExpression	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED ) == 0"		59595	0		==			
ANR	59646	CallExpression	"strcmp ( mbedtlsname , CIPHER_UNSUPPORTED )"		59595	0					
ANR	59647	Callee	strcmp		59595	0					
ANR	59648	Identifier	strcmp		59595	0					
ANR	59649	ArgumentList	mbedtlsname		59595	1					
ANR	59650	Argument	mbedtlsname		59595	0					
ANR	59651	Identifier	mbedtlsname		59595	0					
ANR	59652	Argument	CIPHER_UNSUPPORTED		59595	1					
ANR	59653	Identifier	CIPHER_UNSUPPORTED		59595	0					
ANR	59654	PrimaryExpression	0		59595	1					
ANR	59655	CompoundStatement		14:54:454:454	59595	1					
ANR	59656	ExpressionStatement	"LOGE ( ""Cipher %s currently is not supported by mbed TLS library"" , ciphername )"	251:8:7961:8050	59595	0	True				
ANR	59657	CallExpression	"LOGE ( ""Cipher %s currently is not supported by mbed TLS library"" , ciphername )"		59595	0					
ANR	59658	Callee	LOGE		59595	0					
ANR	59659	Identifier	LOGE		59595	0					
ANR	59660	ArgumentList	"""Cipher %s currently is not supported by mbed TLS library"""		59595	1					
ANR	59661	Argument	"""Cipher %s currently is not supported by mbed TLS library"""		59595	0					
ANR	59662	PrimaryExpression	"""Cipher %s currently is not supported by mbed TLS library"""		59595	0					
ANR	59663	Argument	ciphername		59595	1					
ANR	59664	Identifier	ciphername		59595	0					
ANR	59665	ReturnStatement	return NULL ;	253:8:8060:8071	59595	1	True				
ANR	59666	Identifier	NULL		59595	0					
ANR	59667	ReturnStatement	return mbedtls_cipher_info_from_string ( mbedtlsname ) ;	255:4:8083:8134	59595	5	True				
ANR	59668	CallExpression	mbedtls_cipher_info_from_string ( mbedtlsname )		59595	0					
ANR	59669	Callee	mbedtls_cipher_info_from_string		59595	0					
ANR	59670	Identifier	mbedtls_cipher_info_from_string		59595	0					
ANR	59671	ArgumentList	mbedtlsname		59595	1					
ANR	59672	Argument	mbedtlsname		59595	0					
ANR	59673	Identifier	mbedtlsname		59595	0					
ANR	59674	ReturnType	const cipher_kt_t *		59595	1					
ANR	59675	Identifier	aead_get_cipher_type		59595	2					
ANR	59676	ParameterList	int method		59595	3					
ANR	59677	Parameter	int method	236:21:7484:7493	59595	0	True				
ANR	59678	ParameterType	int		59595	0					
ANR	59679	Identifier	method		59595	1					
ANR	59680	CFGEntryNode	ENTRY		59595		True				
ANR	59681	CFGExitNode	EXIT		59595		True				
ANR	59682	Symbol	strcmp		59595						
ANR	59683	Symbol	ciphername		59595						
ANR	59684	Symbol	NULL		59595						
ANR	59685	Symbol	method		59595						
ANR	59686	Symbol	* supported_aead_ciphers		59595						
ANR	59687	Symbol	AES128GCM		59595						
ANR	59688	Symbol	* method		59595						
ANR	59689	Symbol	mbedtlsname		59595						
ANR	59690	Symbol	mbedtls_cipher_info_from_string		59595						
ANR	59691	Symbol	CIPHER_UNSUPPORTED		59595						
ANR	59692	Symbol	AEAD_CIPHER_NUM		59595						
ANR	59693	Symbol	supported_aead_ciphers_mbedtls		59595						
ANR	59694	Symbol	CHACHA20POLY1305IETF		59595						
ANR	59695	Symbol	supported_aead_ciphers		59595						
ANR	59696	Symbol	* supported_aead_ciphers_mbedtls		59595						
ANR	59697	Function	aead_cipher_ctx_set_key	258:0:8139:9236							
ANR	59698	FunctionDef	"aead_cipher_ctx_set_key (cipher_ctx_t * cipher_ctx , int enc)"		59697	0					
ANR	59699	CompoundStatement		260:0:8210:9236	59697	0					
ANR	59700	IdentifierDeclStatement	"const digest_type_t * md = mbedtls_md_info_from_string ( ""SHA1"" ) ;"	261:4:8216:8277	59697	0	True				
ANR	59701	IdentifierDecl	"* md = mbedtls_md_info_from_string ( ""SHA1"" )"		59697	0					
ANR	59702	IdentifierDeclType	const digest_type_t *		59697	0					
ANR	59703	Identifier	md		59697	1					
ANR	59704	AssignmentExpression	"* md = mbedtls_md_info_from_string ( ""SHA1"" )"		59697	2		=			
ANR	59705	Identifier	md		59697	0					
ANR	59706	CallExpression	"mbedtls_md_info_from_string ( ""SHA1"" )"		59697	1					
ANR	59707	Callee	mbedtls_md_info_from_string		59697	0					
ANR	59708	Identifier	mbedtls_md_info_from_string		59697	0					
ANR	59709	ArgumentList	"""SHA1"""		59697	1					
ANR	59710	Argument	"""SHA1"""		59697	0					
ANR	59711	PrimaryExpression	"""SHA1"""		59697	0					
ANR	59712	IfStatement	if ( md == NULL )		59697	1					
ANR	59713	Condition	md == NULL	262:8:8287:8296	59697	0	True				
ANR	59714	EqualityExpression	md == NULL		59697	0		==			
ANR	59715	Identifier	md		59697	0					
ANR	59716	Identifier	NULL		59697	1					
ANR	59717	CompoundStatement		3:20:88:88	59697	1					
ANR	59718	ExpressionStatement	"FATAL ( ""SHA1 Digest not found in crypto library"" )"	263:8:8309:8357	59697	0	True				
ANR	59719	CallExpression	"FATAL ( ""SHA1 Digest not found in crypto library"" )"		59697	0					
ANR	59720	Callee	FATAL		59697	0					
ANR	59721	Identifier	FATAL		59697	0					
ANR	59722	ArgumentList	"""SHA1 Digest not found in crypto library"""		59697	1					
ANR	59723	Argument	"""SHA1 Digest not found in crypto library"""		59697	0					
ANR	59724	PrimaryExpression	"""SHA1 Digest not found in crypto library"""		59697	0					
ANR	59725	IdentifierDeclStatement	"int err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len ) ;"	266:4:8370:8636	59697	2	True				
ANR	59726	IdentifierDecl	"err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		59697	0					
ANR	59727	IdentifierDeclType	int		59697	0					
ANR	59728	Identifier	err		59697	1					
ANR	59729	AssignmentExpression	"err = crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		59697	2		=			
ANR	59730	Identifier	err		59697	0					
ANR	59731	CallExpression	"crypto_hkdf ( md , cipher_ctx -> salt , cipher_ctx -> cipher -> key_len , cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len , ( uint8_t * ) SUBKEY_INFO , strlen ( SUBKEY_INFO ) , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len )"		59697	1					
ANR	59732	Callee	crypto_hkdf		59697	0					
ANR	59733	Identifier	crypto_hkdf		59697	0					
ANR	59734	ArgumentList	md		59697	1					
ANR	59735	Argument	md		59697	0					
ANR	59736	Identifier	md		59697	0					
ANR	59737	Argument	cipher_ctx -> salt		59697	1					
ANR	59738	PtrMemberAccess	cipher_ctx -> salt		59697	0					
ANR	59739	Identifier	cipher_ctx		59697	0					
ANR	59740	Identifier	salt		59697	1					
ANR	59741	Argument	cipher_ctx -> cipher -> key_len		59697	2					
ANR	59742	PtrMemberAccess	cipher_ctx -> cipher -> key_len		59697	0					
ANR	59743	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59744	Identifier	cipher_ctx		59697	0					
ANR	59745	Identifier	cipher		59697	1					
ANR	59746	Identifier	key_len		59697	1					
ANR	59747	Argument	cipher_ctx -> cipher -> key		59697	3					
ANR	59748	PtrMemberAccess	cipher_ctx -> cipher -> key		59697	0					
ANR	59749	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59750	Identifier	cipher_ctx		59697	0					
ANR	59751	Identifier	cipher		59697	1					
ANR	59752	Identifier	key		59697	1					
ANR	59753	Argument	cipher_ctx -> cipher -> key_len		59697	4					
ANR	59754	PtrMemberAccess	cipher_ctx -> cipher -> key_len		59697	0					
ANR	59755	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59756	Identifier	cipher_ctx		59697	0					
ANR	59757	Identifier	cipher		59697	1					
ANR	59758	Identifier	key_len		59697	1					
ANR	59759	Argument	( uint8_t * ) SUBKEY_INFO		59697	5					
ANR	59760	CastExpression	( uint8_t * ) SUBKEY_INFO		59697	0					
ANR	59761	CastTarget	uint8_t *		59697	0					
ANR	59762	Identifier	SUBKEY_INFO		59697	1					
ANR	59763	Argument	strlen ( SUBKEY_INFO )		59697	6					
ANR	59764	CallExpression	strlen ( SUBKEY_INFO )		59697	0					
ANR	59765	Callee	strlen		59697	0					
ANR	59766	Identifier	strlen		59697	0					
ANR	59767	ArgumentList	SUBKEY_INFO		59697	1					
ANR	59768	Argument	SUBKEY_INFO		59697	0					
ANR	59769	Identifier	SUBKEY_INFO		59697	0					
ANR	59770	Argument	cipher_ctx -> skey		59697	7					
ANR	59771	PtrMemberAccess	cipher_ctx -> skey		59697	0					
ANR	59772	Identifier	cipher_ctx		59697	0					
ANR	59773	Identifier	skey		59697	1					
ANR	59774	Argument	cipher_ctx -> cipher -> key_len		59697	8					
ANR	59775	PtrMemberAccess	cipher_ctx -> cipher -> key_len		59697	0					
ANR	59776	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59777	Identifier	cipher_ctx		59697	0					
ANR	59778	Identifier	cipher		59697	1					
ANR	59779	Identifier	key_len		59697	1					
ANR	59780	IfStatement	if ( err )		59697	3					
ANR	59781	Condition	err	271:8:8646:8648	59697	0	True				
ANR	59782	Identifier	err		59697	0					
ANR	59783	CompoundStatement		12:13:440:440	59697	1					
ANR	59784	ExpressionStatement	"FATAL ( ""Unable to generate subkey"" )"	272:8:8661:8695	59697	0	True				
ANR	59785	CallExpression	"FATAL ( ""Unable to generate subkey"" )"		59697	0					
ANR	59786	Callee	FATAL		59697	0					
ANR	59787	Identifier	FATAL		59697	0					
ANR	59788	ArgumentList	"""Unable to generate subkey"""		59697	1					
ANR	59789	Argument	"""Unable to generate subkey"""		59697	0					
ANR	59790	PrimaryExpression	"""Unable to generate subkey"""		59697	0					
ANR	59791	ExpressionStatement	"memset ( cipher_ctx -> nonce , 0 , cipher_ctx -> cipher -> nonce_len )"	275:4:8708:8767	59697	4	True				
ANR	59792	CallExpression	"memset ( cipher_ctx -> nonce , 0 , cipher_ctx -> cipher -> nonce_len )"		59697	0					
ANR	59793	Callee	memset		59697	0					
ANR	59794	Identifier	memset		59697	0					
ANR	59795	ArgumentList	cipher_ctx -> nonce		59697	1					
ANR	59796	Argument	cipher_ctx -> nonce		59697	0					
ANR	59797	PtrMemberAccess	cipher_ctx -> nonce		59697	0					
ANR	59798	Identifier	cipher_ctx		59697	0					
ANR	59799	Identifier	nonce		59697	1					
ANR	59800	Argument	0		59697	1					
ANR	59801	PrimaryExpression	0		59697	0					
ANR	59802	Argument	cipher_ctx -> cipher -> nonce_len		59697	2					
ANR	59803	PtrMemberAccess	cipher_ctx -> cipher -> nonce_len		59697	0					
ANR	59804	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59805	Identifier	cipher_ctx		59697	0					
ANR	59806	Identifier	cipher		59697	1					
ANR	59807	Identifier	nonce_len		59697	1					
ANR	59808	IfStatement	if ( cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF )		59697	5					
ANR	59809	Condition	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF	278:8:8832:8881	59697	0	True				
ANR	59810	RelationalExpression	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF		59697	0		>=			
ANR	59811	PtrMemberAccess	cipher_ctx -> cipher -> method		59697	0					
ANR	59812	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59813	Identifier	cipher_ctx		59697	0					
ANR	59814	Identifier	cipher		59697	1					
ANR	59815	Identifier	method		59697	1					
ANR	59816	Identifier	CHACHA20POLY1305IETF		59697	1					
ANR	59817	CompoundStatement		19:60:673:673	59697	1					
ANR	59818	ReturnStatement	return ;	279:8:8894:8900	59697	0	True				
ANR	59819	IfStatement	"if ( mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0 )"		59697	6					
ANR	59820	Condition	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0"	282:8:8917:9045	59697	0	True				
ANR	59821	EqualityExpression	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc ) != 0"		59697	0		!=			
ANR	59822	CallExpression	"mbedtls_cipher_setkey ( cipher_ctx -> evp , cipher_ctx -> skey , cipher_ctx -> cipher -> key_len * 8 , enc )"		59697	0					
ANR	59823	Callee	mbedtls_cipher_setkey		59697	0					
ANR	59824	Identifier	mbedtls_cipher_setkey		59697	0					
ANR	59825	ArgumentList	cipher_ctx -> evp		59697	1					
ANR	59826	Argument	cipher_ctx -> evp		59697	0					
ANR	59827	PtrMemberAccess	cipher_ctx -> evp		59697	0					
ANR	59828	Identifier	cipher_ctx		59697	0					
ANR	59829	Identifier	evp		59697	1					
ANR	59830	Argument	cipher_ctx -> skey		59697	1					
ANR	59831	PtrMemberAccess	cipher_ctx -> skey		59697	0					
ANR	59832	Identifier	cipher_ctx		59697	0					
ANR	59833	Identifier	skey		59697	1					
ANR	59834	Argument	cipher_ctx -> cipher -> key_len * 8		59697	2					
ANR	59835	MultiplicativeExpression	cipher_ctx -> cipher -> key_len * 8		59697	0		*			
ANR	59836	PtrMemberAccess	cipher_ctx -> cipher -> key_len		59697	0					
ANR	59837	PtrMemberAccess	cipher_ctx -> cipher		59697	0					
ANR	59838	Identifier	cipher_ctx		59697	0					
ANR	59839	Identifier	cipher		59697	1					
ANR	59840	Identifier	key_len		59697	1					
ANR	59841	PrimaryExpression	8		59697	1					
ANR	59842	Argument	enc		59697	3					
ANR	59843	Identifier	enc		59697	0					
ANR	59844	PrimaryExpression	0		59697	1					
ANR	59845	CompoundStatement		24:74:837:837	59697	1					
ANR	59846	ExpressionStatement	"FATAL ( ""Cannot set mbed TLS cipher key"" )"	284:8:9058:9097	59697	0	True				
ANR	59847	CallExpression	"FATAL ( ""Cannot set mbed TLS cipher key"" )"		59697	0					
ANR	59848	Callee	FATAL		59697	0					
ANR	59849	Identifier	FATAL		59697	0					
ANR	59850	ArgumentList	"""Cannot set mbed TLS cipher key"""		59697	1					
ANR	59851	Argument	"""Cannot set mbed TLS cipher key"""		59697	0					
ANR	59852	PrimaryExpression	"""Cannot set mbed TLS cipher key"""		59697	0					
ANR	59853	IfStatement	if ( mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0 )		59697	7					
ANR	59854	Condition	mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0	286:8:9113:9154	59697	0	True				
ANR	59855	EqualityExpression	mbedtls_cipher_reset ( cipher_ctx -> evp ) != 0		59697	0		!=			
ANR	59856	CallExpression	mbedtls_cipher_reset ( cipher_ctx -> evp )		59697	0					
ANR	59857	Callee	mbedtls_cipher_reset		59697	0					
ANR	59858	Identifier	mbedtls_cipher_reset		59697	0					
ANR	59859	ArgumentList	cipher_ctx -> evp		59697	1					
ANR	59860	Argument	cipher_ctx -> evp		59697	0					
ANR	59861	PtrMemberAccess	cipher_ctx -> evp		59697	0					
ANR	59862	Identifier	cipher_ctx		59697	0					
ANR	59863	Identifier	evp		59697	1					
ANR	59864	PrimaryExpression	0		59697	1					
ANR	59865	CompoundStatement		27:52:946:946	59697	1					
ANR	59866	ExpressionStatement	"FATAL ( ""Cannot finish preparation of mbed TLS cipher context"" )"	287:8:9167:9228	59697	0	True				
ANR	59867	CallExpression	"FATAL ( ""Cannot finish preparation of mbed TLS cipher context"" )"		59697	0					
ANR	59868	Callee	FATAL		59697	0					
ANR	59869	Identifier	FATAL		59697	0					
ANR	59870	ArgumentList	"""Cannot finish preparation of mbed TLS cipher context"""		59697	1					
ANR	59871	Argument	"""Cannot finish preparation of mbed TLS cipher context"""		59697	0					
ANR	59872	PrimaryExpression	"""Cannot finish preparation of mbed TLS cipher context"""		59697	0					
ANR	59873	ReturnType	static void		59697	1					
ANR	59874	Identifier	aead_cipher_ctx_set_key		59697	2					
ANR	59875	ParameterList	"cipher_ctx_t * cipher_ctx , int enc"		59697	3					
ANR	59876	Parameter	cipher_ctx_t * cipher_ctx	259:24:8175:8198	59697	0	True				
ANR	59877	ParameterType	cipher_ctx_t *		59697	0					
ANR	59878	Identifier	cipher_ctx		59697	1					
ANR	59879	Parameter	int enc	259:50:8201:8207	59697	1	True				
ANR	59880	ParameterType	int		59697	0					
ANR	59881	Identifier	enc		59697	1					
ANR	59882	CFGEntryNode	ENTRY		59697		True				
ANR	59883	CFGExitNode	EXIT		59697		True				
ANR	59884	Symbol	cipher_ctx -> cipher -> method		59697						
ANR	59885	Symbol	mbedtls_cipher_reset		59697						
ANR	59886	Symbol	cipher_ctx -> cipher		59697						
ANR	59887	Symbol	SUBKEY_INFO		59697						
ANR	59888	Symbol	cipher_ctx		59697						
ANR	59889	Symbol	NULL		59697						
ANR	59890	Symbol	err		59697						
ANR	59891	Symbol	* cipher_ctx		59697						
ANR	59892	Symbol	cipher_ctx -> nonce		59697						
ANR	59893	Symbol	crypto_hkdf		59697						
ANR	59894	Symbol	cipher_ctx -> cipher -> key		59697						
ANR	59895	Symbol	cipher_ctx -> skey		59697						
ANR	59896	Symbol	mbedtls_md_info_from_string		59697						
ANR	59897	Symbol	* * cipher_ctx		59697						
ANR	59898	Symbol	strlen		59697						
ANR	59899	Symbol	cipher_ctx -> cipher -> nonce_len		59697						
ANR	59900	Symbol	mbedtls_cipher_setkey		59697						
ANR	59901	Symbol	md		59697						
ANR	59902	Symbol	cipher_ctx -> evp		59697						
ANR	59903	Symbol	cipher_ctx -> salt		59697						
ANR	59904	Symbol	enc		59697						
ANR	59905	Symbol	CHACHA20POLY1305IETF		59697						
ANR	59906	Symbol	* cipher_ctx -> cipher		59697						
ANR	59907	Symbol	cipher_ctx -> cipher -> key_len		59697						
ANR	59908	Function	aead_cipher_ctx_init	291:0:9239:10201							
ANR	59909	FunctionDef	"aead_cipher_ctx_init (cipher_ctx_t * cipher_ctx , int method , int enc)"		59908	0					
ANR	59910	CompoundStatement		293:0:9319:10201	59908	0					
ANR	59911	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		59908	0					
ANR	59912	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	294:8:9329:9375	59908	0	True				
ANR	59913	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		59908	0		||			
ANR	59914	RelationalExpression	method < AES128GCM		59908	0		<			
ANR	59915	Identifier	method		59908	0					
ANR	59916	Identifier	AES128GCM		59908	1					
ANR	59917	RelationalExpression	method >= AEAD_CIPHER_NUM		59908	1		>=			
ANR	59918	Identifier	method		59908	0					
ANR	59919	Identifier	AEAD_CIPHER_NUM		59908	1					
ANR	59920	CompoundStatement		2:57:58:58	59908	1					
ANR	59921	ExpressionStatement	"LOGE ( ""cipher_context_init(): Illegal method"" )"	295:8:9388:9433	59908	0	True				
ANR	59922	CallExpression	"LOGE ( ""cipher_context_init(): Illegal method"" )"		59908	0					
ANR	59923	Callee	LOGE		59908	0					
ANR	59924	Identifier	LOGE		59908	0					
ANR	59925	ArgumentList	"""cipher_context_init(): Illegal method"""		59908	1					
ANR	59926	Argument	"""cipher_context_init(): Illegal method"""		59908	0					
ANR	59927	PrimaryExpression	"""cipher_context_init(): Illegal method"""		59908	0					
ANR	59928	ReturnStatement	return ;	296:8:9443:9449	59908	1	True				
ANR	59929	IfStatement	if ( method >= CHACHA20POLY1305IETF )		59908	1					
ANR	59930	Condition	method >= CHACHA20POLY1305IETF	299:8:9466:9495	59908	0	True				
ANR	59931	RelationalExpression	method >= CHACHA20POLY1305IETF		59908	0		>=			
ANR	59932	Identifier	method		59908	0					
ANR	59933	Identifier	CHACHA20POLY1305IETF		59908	1					
ANR	59934	CompoundStatement		7:40:178:178	59908	1					
ANR	59935	ReturnStatement	return ;	300:8:9508:9514	59908	0	True				
ANR	59936	IdentifierDeclStatement	const char * ciphername = supported_aead_ciphers [ method ] ;	303:4:9527:9582	59908	2	True				
ANR	59937	IdentifierDecl	* ciphername = supported_aead_ciphers [ method ]		59908	0					
ANR	59938	IdentifierDeclType	const char *		59908	0					
ANR	59939	Identifier	ciphername		59908	1					
ANR	59940	AssignmentExpression	* ciphername = supported_aead_ciphers [ method ]		59908	2		=			
ANR	59941	Identifier	ciphername		59908	0					
ANR	59942	ArrayIndexing	supported_aead_ciphers [ method ]		59908	1					
ANR	59943	Identifier	supported_aead_ciphers		59908	0					
ANR	59944	Identifier	method		59908	1					
ANR	59945	IdentifierDeclStatement	const cipher_kt_t * cipher = aead_get_cipher_type ( method ) ;	305:4:9589:9645	59908	3	True				
ANR	59946	IdentifierDecl	* cipher = aead_get_cipher_type ( method )		59908	0					
ANR	59947	IdentifierDeclType	const cipher_kt_t *		59908	0					
ANR	59948	Identifier	cipher		59908	1					
ANR	59949	AssignmentExpression	* cipher = aead_get_cipher_type ( method )		59908	2		=			
ANR	59950	Identifier	cipher		59908	0					
ANR	59951	CallExpression	aead_get_cipher_type ( method )		59908	1					
ANR	59952	Callee	aead_get_cipher_type		59908	0					
ANR	59953	Identifier	aead_get_cipher_type		59908	0					
ANR	59954	ArgumentList	method		59908	1					
ANR	59955	Argument	method		59908	0					
ANR	59956	Identifier	method		59908	0					
ANR	59957	ExpressionStatement	cipher_ctx -> evp = ss_malloc ( sizeof ( cipher_evp_t ) )	307:4:9652:9701	59908	4	True				
ANR	59958	AssignmentExpression	cipher_ctx -> evp = ss_malloc ( sizeof ( cipher_evp_t ) )		59908	0		=			
ANR	59959	PtrMemberAccess	cipher_ctx -> evp		59908	0					
ANR	59960	Identifier	cipher_ctx		59908	0					
ANR	59961	Identifier	evp		59908	1					
ANR	59962	CallExpression	ss_malloc ( sizeof ( cipher_evp_t ) )		59908	1					
ANR	59963	Callee	ss_malloc		59908	0					
ANR	59964	Identifier	ss_malloc		59908	0					
ANR	59965	ArgumentList	sizeof ( cipher_evp_t )		59908	1					
ANR	59966	Argument	sizeof ( cipher_evp_t )		59908	0					
ANR	59967	SizeofExpression	sizeof ( cipher_evp_t )		59908	0					
ANR	59968	Sizeof	sizeof		59908	0					
ANR	59969	SizeofOperand	cipher_evp_t		59908	1					
ANR	59970	ExpressionStatement	"memset ( cipher_ctx -> evp , 0 , sizeof ( cipher_evp_t ) )"	308:4:9707:9755	59908	5	True				
ANR	59971	CallExpression	"memset ( cipher_ctx -> evp , 0 , sizeof ( cipher_evp_t ) )"		59908	0					
ANR	59972	Callee	memset		59908	0					
ANR	59973	Identifier	memset		59908	0					
ANR	59974	ArgumentList	cipher_ctx -> evp		59908	1					
ANR	59975	Argument	cipher_ctx -> evp		59908	0					
ANR	59976	PtrMemberAccess	cipher_ctx -> evp		59908	0					
ANR	59977	Identifier	cipher_ctx		59908	0					
ANR	59978	Identifier	evp		59908	1					
ANR	59979	Argument	0		59908	1					
ANR	59980	PrimaryExpression	0		59908	0					
ANR	59981	Argument	sizeof ( cipher_evp_t )		59908	2					
ANR	59982	SizeofExpression	sizeof ( cipher_evp_t )		59908	0					
ANR	59983	Sizeof	sizeof		59908	0					
ANR	59984	SizeofOperand	cipher_evp_t		59908	1					
ANR	59985	IdentifierDeclStatement	cipher_evp_t * evp = cipher_ctx -> evp ;	309:4:9761:9796	59908	6	True				
ANR	59986	IdentifierDecl	* evp = cipher_ctx -> evp		59908	0					
ANR	59987	IdentifierDeclType	cipher_evp_t *		59908	0					
ANR	59988	Identifier	evp		59908	1					
ANR	59989	AssignmentExpression	* evp = cipher_ctx -> evp		59908	2		=			
ANR	59990	Identifier	evp		59908	0					
ANR	59991	PtrMemberAccess	cipher_ctx -> evp		59908	1					
ANR	59992	Identifier	cipher_ctx		59908	0					
ANR	59993	Identifier	evp		59908	1					
ANR	59994	IfStatement	if ( cipher == NULL )		59908	7					
ANR	59995	Condition	cipher == NULL	311:8:9807:9820	59908	0	True				
ANR	59996	EqualityExpression	cipher == NULL		59908	0		==			
ANR	59997	Identifier	cipher		59908	0					
ANR	59998	Identifier	NULL		59908	1					
ANR	59999	CompoundStatement		19:24:503:503	59908	1					
ANR	60000	ExpressionStatement	"LOGE ( ""Cipher %s not found in mbed TLS library"" , ciphername )"	312:8:9833:9892	59908	0	True				
ANR	60001	CallExpression	"LOGE ( ""Cipher %s not found in mbed TLS library"" , ciphername )"		59908	0					
ANR	60002	Callee	LOGE		59908	0					
ANR	60003	Identifier	LOGE		59908	0					
ANR	60004	ArgumentList	"""Cipher %s not found in mbed TLS library"""		59908	1					
ANR	60005	Argument	"""Cipher %s not found in mbed TLS library"""		59908	0					
ANR	60006	PrimaryExpression	"""Cipher %s not found in mbed TLS library"""		59908	0					
ANR	60007	Argument	ciphername		59908	1					
ANR	60008	Identifier	ciphername		59908	0					
ANR	60009	ExpressionStatement	"FATAL ( ""Cannot initialize mbed TLS cipher"" )"	313:8:9902:9944	59908	1	True				
ANR	60010	CallExpression	"FATAL ( ""Cannot initialize mbed TLS cipher"" )"		59908	0					
ANR	60011	Callee	FATAL		59908	0					
ANR	60012	Identifier	FATAL		59908	0					
ANR	60013	ArgumentList	"""Cannot initialize mbed TLS cipher"""		59908	1					
ANR	60014	Argument	"""Cannot initialize mbed TLS cipher"""		59908	0					
ANR	60015	PrimaryExpression	"""Cannot initialize mbed TLS cipher"""		59908	0					
ANR	60016	ExpressionStatement	mbedtls_cipher_init ( evp )	315:4:9956:9980	59908	8	True				
ANR	60017	CallExpression	mbedtls_cipher_init ( evp )		59908	0					
ANR	60018	Callee	mbedtls_cipher_init		59908	0					
ANR	60019	Identifier	mbedtls_cipher_init		59908	0					
ANR	60020	ArgumentList	evp		59908	1					
ANR	60021	Argument	evp		59908	0					
ANR	60022	Identifier	evp		59908	0					
ANR	60023	IfStatement	"if ( mbedtls_cipher_setup ( evp , cipher ) != 0 )"		59908	9					
ANR	60024	Condition	"mbedtls_cipher_setup ( evp , cipher ) != 0"	316:8:9990:10027	59908	0	True				
ANR	60025	EqualityExpression	"mbedtls_cipher_setup ( evp , cipher ) != 0"		59908	0		!=			
ANR	60026	CallExpression	"mbedtls_cipher_setup ( evp , cipher )"		59908	0					
ANR	60027	Callee	mbedtls_cipher_setup		59908	0					
ANR	60028	Identifier	mbedtls_cipher_setup		59908	0					
ANR	60029	ArgumentList	evp		59908	1					
ANR	60030	Argument	evp		59908	0					
ANR	60031	Identifier	evp		59908	0					
ANR	60032	Argument	cipher		59908	1					
ANR	60033	Identifier	cipher		59908	0					
ANR	60034	PrimaryExpression	0		59908	1					
ANR	60035	CompoundStatement		24:48:710:710	59908	1					
ANR	60036	ExpressionStatement	"FATAL ( ""Cannot initialize mbed TLS cipher context"" )"	317:8:10040:10090	59908	0	True				
ANR	60037	CallExpression	"FATAL ( ""Cannot initialize mbed TLS cipher context"" )"		59908	0					
ANR	60038	Callee	FATAL		59908	0					
ANR	60039	Identifier	FATAL		59908	0					
ANR	60040	ArgumentList	"""Cannot initialize mbed TLS cipher context"""		59908	1					
ANR	60041	Argument	"""Cannot initialize mbed TLS cipher context"""		59908	0					
ANR	60042	PrimaryExpression	"""Cannot initialize mbed TLS cipher context"""		59908	0					
ANR	60043	ExpressionStatement	"dump ( ""KEY"" , ( char * ) cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len )"	321:4:10119:10192	59908	10	True				
ANR	60044	CallExpression	"dump ( ""KEY"" , ( char * ) cipher_ctx -> cipher -> key , cipher_ctx -> cipher -> key_len )"		59908	0					
ANR	60045	Callee	dump		59908	0					
ANR	60046	Identifier	dump		59908	0					
ANR	60047	ArgumentList	"""KEY"""		59908	1					
ANR	60048	Argument	"""KEY"""		59908	0					
ANR	60049	PrimaryExpression	"""KEY"""		59908	0					
ANR	60050	Argument	( char * ) cipher_ctx -> cipher -> key		59908	1					
ANR	60051	CastExpression	( char * ) cipher_ctx -> cipher -> key		59908	0					
ANR	60052	CastTarget	char *		59908	0					
ANR	60053	PtrMemberAccess	cipher_ctx -> cipher -> key		59908	1					
ANR	60054	PtrMemberAccess	cipher_ctx -> cipher		59908	0					
ANR	60055	Identifier	cipher_ctx		59908	0					
ANR	60056	Identifier	cipher		59908	1					
ANR	60057	Identifier	key		59908	1					
ANR	60058	Argument	cipher_ctx -> cipher -> key_len		59908	2					
ANR	60059	PtrMemberAccess	cipher_ctx -> cipher -> key_len		59908	0					
ANR	60060	PtrMemberAccess	cipher_ctx -> cipher		59908	0					
ANR	60061	Identifier	cipher_ctx		59908	0					
ANR	60062	Identifier	cipher		59908	1					
ANR	60063	Identifier	key_len		59908	1					
ANR	60064	ReturnType	static void		59908	1					
ANR	60065	Identifier	aead_cipher_ctx_init		59908	2					
ANR	60066	ParameterList	"cipher_ctx_t * cipher_ctx , int method , int enc"		59908	3					
ANR	60067	Parameter	cipher_ctx_t * cipher_ctx	292:21:9272:9295	59908	0	True				
ANR	60068	ParameterType	cipher_ctx_t *		59908	0					
ANR	60069	Identifier	cipher_ctx		59908	1					
ANR	60070	Parameter	int method	292:47:9298:9307	59908	1	True				
ANR	60071	ParameterType	int		59908	0					
ANR	60072	Identifier	method		59908	1					
ANR	60073	Parameter	int enc	292:59:9310:9316	59908	2	True				
ANR	60074	ParameterType	int		59908	0					
ANR	60075	Identifier	enc		59908	1					
ANR	60076	CFGEntryNode	ENTRY		59908		True				
ANR	60077	CFGExitNode	EXIT		59908		True				
ANR	60078	Symbol	cipher		59908						
ANR	60079	Symbol	mbedtls_cipher_setup		59908						
ANR	60080	Symbol	ciphername		59908						
ANR	60081	Symbol	cipher_ctx -> cipher		59908						
ANR	60082	Symbol	cipher_ctx		59908						
ANR	60083	Symbol	NULL		59908						
ANR	60084	Symbol	method		59908						
ANR	60085	Symbol	* supported_aead_ciphers		59908						
ANR	60086	Symbol	* cipher_ctx		59908						
ANR	60087	Symbol	AES128GCM		59908						
ANR	60088	Symbol	aead_get_cipher_type		59908						
ANR	60089	Symbol	* method		59908						
ANR	60090	Symbol	cipher_ctx -> cipher -> key		59908						
ANR	60091	Symbol	* * cipher_ctx		59908						
ANR	60092	Symbol	AEAD_CIPHER_NUM		59908						
ANR	60093	Symbol	cipher_ctx -> evp		59908						
ANR	60094	Symbol	ss_malloc		59908						
ANR	60095	Symbol	enc		59908						
ANR	60096	Symbol	CHACHA20POLY1305IETF		59908						
ANR	60097	Symbol	supported_aead_ciphers		59908						
ANR	60098	Symbol	evp		59908						
ANR	60099	Symbol	cipher_ctx -> cipher -> key_len		59908						
ANR	60100	Symbol	* cipher_ctx -> cipher		59908						
ANR	60101	Function	aead_ctx_init	325:0:10204:10502							
ANR	60102	FunctionDef	"aead_ctx_init (cipher_t * cipher , cipher_ctx_t * cipher_ctx , int enc)"		60101	0					
ANR	60103	CompoundStatement		327:0:10276:10502	60101	0					
ANR	60104	ExpressionStatement	"sodium_memzero ( cipher_ctx , sizeof ( cipher_ctx_t ) )"	328:4:10282:10330	60101	0	True				
ANR	60105	CallExpression	"sodium_memzero ( cipher_ctx , sizeof ( cipher_ctx_t ) )"		60101	0					
ANR	60106	Callee	sodium_memzero		60101	0					
ANR	60107	Identifier	sodium_memzero		60101	0					
ANR	60108	ArgumentList	cipher_ctx		60101	1					
ANR	60109	Argument	cipher_ctx		60101	0					
ANR	60110	Identifier	cipher_ctx		60101	0					
ANR	60111	Argument	sizeof ( cipher_ctx_t )		60101	1					
ANR	60112	SizeofExpression	sizeof ( cipher_ctx_t )		60101	0					
ANR	60113	Sizeof	sizeof		60101	0					
ANR	60114	SizeofOperand	cipher_ctx_t		60101	1					
ANR	60115	ExpressionStatement	cipher_ctx -> cipher = cipher	329:4:10336:10363	60101	1	True				
ANR	60116	AssignmentExpression	cipher_ctx -> cipher = cipher		60101	0		=			
ANR	60117	PtrMemberAccess	cipher_ctx -> cipher		60101	0					
ANR	60118	Identifier	cipher_ctx		60101	0					
ANR	60119	Identifier	cipher		60101	1					
ANR	60120	Identifier	cipher		60101	1					
ANR	60121	ExpressionStatement	"aead_cipher_ctx_init ( cipher_ctx , cipher -> method , enc )"	331:4:10370:10423	60101	2	True				
ANR	60122	CallExpression	"aead_cipher_ctx_init ( cipher_ctx , cipher -> method , enc )"		60101	0					
ANR	60123	Callee	aead_cipher_ctx_init		60101	0					
ANR	60124	Identifier	aead_cipher_ctx_init		60101	0					
ANR	60125	ArgumentList	cipher_ctx		60101	1					
ANR	60126	Argument	cipher_ctx		60101	0					
ANR	60127	Identifier	cipher_ctx		60101	0					
ANR	60128	Argument	cipher -> method		60101	1					
ANR	60129	PtrMemberAccess	cipher -> method		60101	0					
ANR	60130	Identifier	cipher		60101	0					
ANR	60131	Identifier	method		60101	1					
ANR	60132	Argument	enc		60101	2					
ANR	60133	Identifier	enc		60101	0					
ANR	60134	IfStatement	if ( enc )		60101	3					
ANR	60135	Condition	enc	333:8:10434:10436	60101	0	True				
ANR	60136	Identifier	enc		60101	0					
ANR	60137	CompoundStatement		7:13:162:162	60101	1					
ANR	60138	ExpressionStatement	"rand_bytes ( cipher_ctx -> salt , cipher -> key_len )"	334:8:10449:10494	60101	0	True				
ANR	60139	CallExpression	"rand_bytes ( cipher_ctx -> salt , cipher -> key_len )"		60101	0					
ANR	60140	Callee	rand_bytes		60101	0					
ANR	60141	Identifier	rand_bytes		60101	0					
ANR	60142	ArgumentList	cipher_ctx -> salt		60101	1					
ANR	60143	Argument	cipher_ctx -> salt		60101	0					
ANR	60144	PtrMemberAccess	cipher_ctx -> salt		60101	0					
ANR	60145	Identifier	cipher_ctx		60101	0					
ANR	60146	Identifier	salt		60101	1					
ANR	60147	Argument	cipher -> key_len		60101	1					
ANR	60148	PtrMemberAccess	cipher -> key_len		60101	0					
ANR	60149	Identifier	cipher		60101	0					
ANR	60150	Identifier	key_len		60101	1					
ANR	60151	ReturnType	void		60101	1					
ANR	60152	Identifier	aead_ctx_init		60101	2					
ANR	60153	ParameterList	"cipher_t * cipher , cipher_ctx_t * cipher_ctx , int enc"		60101	3					
ANR	60154	Parameter	cipher_t * cipher	326:14:10223:10238	60101	0	True				
ANR	60155	ParameterType	cipher_t *		60101	0					
ANR	60156	Identifier	cipher		60101	1					
ANR	60157	Parameter	cipher_ctx_t * cipher_ctx	326:32:10241:10264	60101	1	True				
ANR	60158	ParameterType	cipher_ctx_t *		60101	0					
ANR	60159	Identifier	cipher_ctx		60101	1					
ANR	60160	Parameter	int enc	326:58:10267:10273	60101	2	True				
ANR	60161	ParameterType	int		60101	0					
ANR	60162	Identifier	enc		60101	1					
ANR	60163	CFGEntryNode	ENTRY		60101		True				
ANR	60164	CFGExitNode	EXIT		60101		True				
ANR	60165	Symbol	cipher		60101						
ANR	60166	Symbol	cipher_ctx -> cipher		60101						
ANR	60167	Symbol	cipher_ctx		60101						
ANR	60168	Symbol	* cipher_ctx		60101						
ANR	60169	Symbol	* cipher		60101						
ANR	60170	Symbol	cipher -> key_len		60101						
ANR	60171	Symbol	cipher -> method		60101						
ANR	60172	Symbol	cipher_ctx -> salt		60101						
ANR	60173	Symbol	enc		60101						
ANR	60174	Function	aead_ctx_release	338:0:10505:10860							
ANR	60175	FunctionDef	aead_ctx_release (cipher_ctx_t * cipher_ctx)		60174	0					
ANR	60176	CompoundStatement		340:0:10553:10860	60174	0					
ANR	60177	IfStatement	if ( cipher_ctx -> chunk != NULL )		60174	0					
ANR	60178	Condition	cipher_ctx -> chunk != NULL	341:8:10563:10587	60174	0	True				
ANR	60179	EqualityExpression	cipher_ctx -> chunk != NULL		60174	0		!=			
ANR	60180	PtrMemberAccess	cipher_ctx -> chunk		60174	0					
ANR	60181	Identifier	cipher_ctx		60174	0					
ANR	60182	Identifier	chunk		60174	1					
ANR	60183	Identifier	NULL		60174	1					
ANR	60184	CompoundStatement		2:35:36:36	60174	1					
ANR	60185	ExpressionStatement	bfree ( cipher_ctx -> chunk )	342:8:10600:10624	60174	0	True				
ANR	60186	CallExpression	bfree ( cipher_ctx -> chunk )		60174	0					
ANR	60187	Callee	bfree		60174	0					
ANR	60188	Identifier	bfree		60174	0					
ANR	60189	ArgumentList	cipher_ctx -> chunk		60174	1					
ANR	60190	Argument	cipher_ctx -> chunk		60174	0					
ANR	60191	PtrMemberAccess	cipher_ctx -> chunk		60174	0					
ANR	60192	Identifier	cipher_ctx		60174	0					
ANR	60193	Identifier	chunk		60174	1					
ANR	60194	ExpressionStatement	ss_free ( cipher_ctx -> chunk )	343:8:10634:10660	60174	1	True				
ANR	60195	CallExpression	ss_free ( cipher_ctx -> chunk )		60174	0					
ANR	60196	Callee	ss_free		60174	0					
ANR	60197	Identifier	ss_free		60174	0					
ANR	60198	ArgumentList	cipher_ctx -> chunk		60174	1					
ANR	60199	Argument	cipher_ctx -> chunk		60174	0					
ANR	60200	PtrMemberAccess	cipher_ctx -> chunk		60174	0					
ANR	60201	Identifier	cipher_ctx		60174	0					
ANR	60202	Identifier	chunk		60174	1					
ANR	60203	ExpressionStatement	cipher_ctx -> chunk = NULL	344:8:10670:10694	60174	2	True				
ANR	60204	AssignmentExpression	cipher_ctx -> chunk = NULL		60174	0		=			
ANR	60205	PtrMemberAccess	cipher_ctx -> chunk		60174	0					
ANR	60206	Identifier	cipher_ctx		60174	0					
ANR	60207	Identifier	chunk		60174	1					
ANR	60208	Identifier	NULL		60174	1					
ANR	60209	IfStatement	if ( cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF )		60174	1					
ANR	60210	Condition	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF	347:8:10711:10760	60174	0	True				
ANR	60211	RelationalExpression	cipher_ctx -> cipher -> method >= CHACHA20POLY1305IETF		60174	0		>=			
ANR	60212	PtrMemberAccess	cipher_ctx -> cipher -> method		60174	0					
ANR	60213	PtrMemberAccess	cipher_ctx -> cipher		60174	0					
ANR	60214	Identifier	cipher_ctx		60174	0					
ANR	60215	Identifier	cipher		60174	1					
ANR	60216	Identifier	method		60174	1					
ANR	60217	Identifier	CHACHA20POLY1305IETF		60174	1					
ANR	60218	CompoundStatement		8:60:209:209	60174	1					
ANR	60219	ReturnStatement	return ;	348:8:10773:10779	60174	0	True				
ANR	60220	ExpressionStatement	mbedtls_cipher_free ( cipher_ctx -> evp )	351:4:10792:10828	60174	2	True				
ANR	60221	CallExpression	mbedtls_cipher_free ( cipher_ctx -> evp )		60174	0					
ANR	60222	Callee	mbedtls_cipher_free		60174	0					
ANR	60223	Identifier	mbedtls_cipher_free		60174	0					
ANR	60224	ArgumentList	cipher_ctx -> evp		60174	1					
ANR	60225	Argument	cipher_ctx -> evp		60174	0					
ANR	60226	PtrMemberAccess	cipher_ctx -> evp		60174	0					
ANR	60227	Identifier	cipher_ctx		60174	0					
ANR	60228	Identifier	evp		60174	1					
ANR	60229	ExpressionStatement	ss_free ( cipher_ctx -> evp )	352:4:10834:10858	60174	3	True				
ANR	60230	CallExpression	ss_free ( cipher_ctx -> evp )		60174	0					
ANR	60231	Callee	ss_free		60174	0					
ANR	60232	Identifier	ss_free		60174	0					
ANR	60233	ArgumentList	cipher_ctx -> evp		60174	1					
ANR	60234	Argument	cipher_ctx -> evp		60174	0					
ANR	60235	PtrMemberAccess	cipher_ctx -> evp		60174	0					
ANR	60236	Identifier	cipher_ctx		60174	0					
ANR	60237	Identifier	evp		60174	1					
ANR	60238	ReturnType	void		60174	1					
ANR	60239	Identifier	aead_ctx_release		60174	2					
ANR	60240	ParameterList	cipher_ctx_t * cipher_ctx		60174	3					
ANR	60241	Parameter	cipher_ctx_t * cipher_ctx	339:17:10527:10550	60174	0	True				
ANR	60242	ParameterType	cipher_ctx_t *		60174	0					
ANR	60243	Identifier	cipher_ctx		60174	1					
ANR	60244	CFGEntryNode	ENTRY		60174		True				
ANR	60245	CFGExitNode	EXIT		60174		True				
ANR	60246	Symbol	* * cipher_ctx		60174						
ANR	60247	Symbol	cipher_ctx -> cipher -> method		60174						
ANR	60248	Symbol	cipher_ctx -> cipher		60174						
ANR	60249	Symbol	cipher_ctx		60174						
ANR	60250	Symbol	NULL		60174						
ANR	60251	Symbol	* cipher_ctx		60174						
ANR	60252	Symbol	cipher_ctx -> evp		60174						
ANR	60253	Symbol	cipher_ctx -> chunk		60174						
ANR	60254	Symbol	CHACHA20POLY1305IETF		60174						
ANR	60255	Symbol	* cipher_ctx -> cipher		60174						
ANR	60256	Function	aead_encrypt_all	355:0:10863:12093							
ANR	60257	FunctionDef	"aead_encrypt_all (buffer_t * plaintext , cipher_t * cipher , size_t capacity)"		60256	0					
ANR	60258	CompoundStatement		357:0:10940:12093	60256	0					
ANR	60259	IdentifierDeclStatement	cipher_ctx_t cipher_ctx ;	358:4:10946:10969	60256	0	True				
ANR	60260	IdentifierDecl	cipher_ctx		60256	0					
ANR	60261	IdentifierDeclType	cipher_ctx_t		60256	0					
ANR	60262	Identifier	cipher_ctx		60256	1					
ANR	60263	ExpressionStatement	"aead_ctx_init ( cipher , & cipher_ctx , 1 )"	359:4:10975:11012	60256	1	True				
ANR	60264	CallExpression	"aead_ctx_init ( cipher , & cipher_ctx , 1 )"		60256	0					
ANR	60265	Callee	aead_ctx_init		60256	0					
ANR	60266	Identifier	aead_ctx_init		60256	0					
ANR	60267	ArgumentList	cipher		60256	1					
ANR	60268	Argument	cipher		60256	0					
ANR	60269	Identifier	cipher		60256	0					
ANR	60270	Argument	& cipher_ctx		60256	1					
ANR	60271	UnaryOperationExpression	& cipher_ctx		60256	0					
ANR	60272	UnaryOperator	&		60256	0					
ANR	60273	Identifier	cipher_ctx		60256	1					
ANR	60274	Argument	1		60256	2					
ANR	60275	PrimaryExpression	1		60256	0					
ANR	60276	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	361:4:11019:11053	60256	2	True				
ANR	60277	IdentifierDecl	salt_len = cipher -> key_len		60256	0					
ANR	60278	IdentifierDeclType	size_t		60256	0					
ANR	60279	Identifier	salt_len		60256	1					
ANR	60280	AssignmentExpression	salt_len = cipher -> key_len		60256	2		=			
ANR	60281	Identifier	salt_len		60256	0					
ANR	60282	PtrMemberAccess	cipher -> key_len		60256	1					
ANR	60283	Identifier	cipher		60256	0					
ANR	60284	Identifier	key_len		60256	1					
ANR	60285	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	362:4:11059:11093	60256	3	True				
ANR	60286	IdentifierDecl	tag_len = cipher -> tag_len		60256	0					
ANR	60287	IdentifierDeclType	size_t		60256	0					
ANR	60288	Identifier	tag_len		60256	1					
ANR	60289	AssignmentExpression	tag_len = cipher -> tag_len		60256	2		=			
ANR	60290	Identifier	tag_len		60256	0					
ANR	60291	PtrMemberAccess	cipher -> tag_len		60256	1					
ANR	60292	Identifier	cipher		60256	0					
ANR	60293	Identifier	tag_len		60256	1					
ANR	60294	IdentifierDeclStatement	int err = CRYPTO_OK ;	363:4:11099:11127	60256	4	True				
ANR	60295	IdentifierDecl	err = CRYPTO_OK		60256	0					
ANR	60296	IdentifierDeclType	int		60256	0					
ANR	60297	Identifier	err		60256	1					
ANR	60298	AssignmentExpression	err = CRYPTO_OK		60256	2		=			
ANR	60299	Identifier	CRYPTO_OK		60256	0					
ANR	60300	Identifier	CRYPTO_OK		60256	1					
ANR	60301	Statement	static	365:4:11134:11139	60256	5	True				
ANR	60302	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	365:11:11141:11173	60256	6	True				
ANR	60303	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		60256	0					
ANR	60304	IdentifierDeclType	buffer_t		60256	0					
ANR	60305	Identifier	tmp		60256	1					
ANR	60306	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		60256	2		=			
ANR	60307	Identifier	tmp		60256	0					
ANR	60308	InitializerList	0		60256	1					
ANR	60309	PrimaryExpression	0		60256	0					
ANR	60310	PrimaryExpression	0		60256	1					
ANR	60311	PrimaryExpression	0		60256	2					
ANR	60312	Identifier	NULL		60256	3					
ANR	60313	ExpressionStatement	"brealloc ( & tmp , salt_len + tag_len + plaintext -> len , capacity )"	366:4:11179:11240	60256	7	True				
ANR	60314	CallExpression	"brealloc ( & tmp , salt_len + tag_len + plaintext -> len , capacity )"		60256	0					
ANR	60315	Callee	brealloc		60256	0					
ANR	60316	Identifier	brealloc		60256	0					
ANR	60317	ArgumentList	& tmp		60256	1					
ANR	60318	Argument	& tmp		60256	0					
ANR	60319	UnaryOperationExpression	& tmp		60256	0					
ANR	60320	UnaryOperator	&		60256	0					
ANR	60321	Identifier	tmp		60256	1					
ANR	60322	Argument	salt_len + tag_len + plaintext -> len		60256	1					
ANR	60323	AdditiveExpression	salt_len + tag_len + plaintext -> len		60256	0		+			
ANR	60324	Identifier	salt_len		60256	0					
ANR	60325	AdditiveExpression	tag_len + plaintext -> len		60256	1		+			
ANR	60326	Identifier	tag_len		60256	0					
ANR	60327	PtrMemberAccess	plaintext -> len		60256	1					
ANR	60328	Identifier	plaintext		60256	0					
ANR	60329	Identifier	len		60256	1					
ANR	60330	Argument	capacity		60256	2					
ANR	60331	Identifier	capacity		60256	0					
ANR	60332	IdentifierDeclStatement	buffer_t * ciphertext = & tmp ;	367:4:11246:11273	60256	8	True				
ANR	60333	IdentifierDecl	* ciphertext = & tmp		60256	0					
ANR	60334	IdentifierDeclType	buffer_t *		60256	0					
ANR	60335	Identifier	ciphertext		60256	1					
ANR	60336	AssignmentExpression	* ciphertext = & tmp		60256	2		=			
ANR	60337	Identifier	ciphertext		60256	0					
ANR	60338	UnaryOperationExpression	& tmp		60256	1					
ANR	60339	UnaryOperator	&		60256	0					
ANR	60340	Identifier	tmp		60256	1					
ANR	60341	ExpressionStatement	ciphertext -> len = tag_len + plaintext -> len	368:4:11279:11321	60256	9	True				
ANR	60342	AssignmentExpression	ciphertext -> len = tag_len + plaintext -> len		60256	0		=			
ANR	60343	PtrMemberAccess	ciphertext -> len		60256	0					
ANR	60344	Identifier	ciphertext		60256	0					
ANR	60345	Identifier	len		60256	1					
ANR	60346	AdditiveExpression	tag_len + plaintext -> len		60256	1		+			
ANR	60347	Identifier	tag_len		60256	0					
ANR	60348	PtrMemberAccess	plaintext -> len		60256	1					
ANR	60349	Identifier	plaintext		60256	0					
ANR	60350	Identifier	len		60256	1					
ANR	60351	ExpressionStatement	"memcpy ( ciphertext -> data , cipher_ctx . salt , salt_len )"	371:4:11361:11412	60256	10	True				
ANR	60352	CallExpression	"memcpy ( ciphertext -> data , cipher_ctx . salt , salt_len )"		60256	0					
ANR	60353	Callee	memcpy		60256	0					
ANR	60354	Identifier	memcpy		60256	0					
ANR	60355	ArgumentList	ciphertext -> data		60256	1					
ANR	60356	Argument	ciphertext -> data		60256	0					
ANR	60357	PtrMemberAccess	ciphertext -> data		60256	0					
ANR	60358	Identifier	ciphertext		60256	0					
ANR	60359	Identifier	data		60256	1					
ANR	60360	Argument	cipher_ctx . salt		60256	1					
ANR	60361	MemberAccess	cipher_ctx . salt		60256	0					
ANR	60362	Identifier	cipher_ctx		60256	0					
ANR	60363	Identifier	salt		60256	1					
ANR	60364	Argument	salt_len		60256	2					
ANR	60365	Identifier	salt_len		60256	0					
ANR	60366	ExpressionStatement	"aead_cipher_ctx_set_key ( & cipher_ctx , 1 )"	373:4:11419:11458	60256	11	True				
ANR	60367	CallExpression	"aead_cipher_ctx_set_key ( & cipher_ctx , 1 )"		60256	0					
ANR	60368	Callee	aead_cipher_ctx_set_key		60256	0					
ANR	60369	Identifier	aead_cipher_ctx_set_key		60256	0					
ANR	60370	ArgumentList	& cipher_ctx		60256	1					
ANR	60371	Argument	& cipher_ctx		60256	0					
ANR	60372	UnaryOperationExpression	& cipher_ctx		60256	0					
ANR	60373	UnaryOperator	&		60256	0					
ANR	60374	Identifier	cipher_ctx		60256	1					
ANR	60375	Argument	1		60256	1					
ANR	60376	PrimaryExpression	1		60256	0					
ANR	60377	IdentifierDeclStatement	size_t clen = ciphertext -> len ;	375:4:11465:11494	60256	12	True				
ANR	60378	IdentifierDecl	clen = ciphertext -> len		60256	0					
ANR	60379	IdentifierDeclType	size_t		60256	0					
ANR	60380	Identifier	clen		60256	1					
ANR	60381	AssignmentExpression	clen = ciphertext -> len		60256	2		=			
ANR	60382	Identifier	clen		60256	0					
ANR	60383	PtrMemberAccess	ciphertext -> len		60256	1					
ANR	60384	Identifier	ciphertext		60256	0					
ANR	60385	Identifier	len		60256	1					
ANR	60386	ExpressionStatement	"err = aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"	376:4:11500:11763	60256	13	True				
ANR	60387	AssignmentExpression	"err = aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		60256	0		=			
ANR	60388	Identifier	err		60256	0					
ANR	60389	CallExpression	"aead_cipher_encrypt ( & cipher_ctx , ( uint8_t * ) ciphertext -> data + salt_len , & clen , ( uint8_t * ) plaintext -> data , plaintext -> len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		60256	1					
ANR	60390	Callee	aead_cipher_encrypt		60256	0					
ANR	60391	Identifier	aead_cipher_encrypt		60256	0					
ANR	60392	ArgumentList	& cipher_ctx		60256	1					
ANR	60393	Argument	& cipher_ctx		60256	0					
ANR	60394	UnaryOperationExpression	& cipher_ctx		60256	0					
ANR	60395	UnaryOperator	&		60256	0					
ANR	60396	Identifier	cipher_ctx		60256	1					
ANR	60397	Argument	( uint8_t * ) ciphertext -> data + salt_len		60256	1					
ANR	60398	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_len		60256	0		+			
ANR	60399	CastExpression	( uint8_t * ) ciphertext -> data		60256	0					
ANR	60400	CastTarget	uint8_t *		60256	0					
ANR	60401	PtrMemberAccess	ciphertext -> data		60256	1					
ANR	60402	Identifier	ciphertext		60256	0					
ANR	60403	Identifier	data		60256	1					
ANR	60404	Identifier	salt_len		60256	1					
ANR	60405	Argument	& clen		60256	2					
ANR	60406	UnaryOperationExpression	& clen		60256	0					
ANR	60407	UnaryOperator	&		60256	0					
ANR	60408	Identifier	clen		60256	1					
ANR	60409	Argument	( uint8_t * ) plaintext -> data		60256	3					
ANR	60410	CastExpression	( uint8_t * ) plaintext -> data		60256	0					
ANR	60411	CastTarget	uint8_t *		60256	0					
ANR	60412	PtrMemberAccess	plaintext -> data		60256	1					
ANR	60413	Identifier	plaintext		60256	0					
ANR	60414	Identifier	data		60256	1					
ANR	60415	Argument	plaintext -> len		60256	4					
ANR	60416	PtrMemberAccess	plaintext -> len		60256	0					
ANR	60417	Identifier	plaintext		60256	0					
ANR	60418	Identifier	len		60256	1					
ANR	60419	Argument	NULL		60256	5					
ANR	60420	Identifier	NULL		60256	0					
ANR	60421	Argument	0		60256	6					
ANR	60422	PrimaryExpression	0		60256	0					
ANR	60423	Argument	cipher_ctx . nonce		60256	7					
ANR	60424	MemberAccess	cipher_ctx . nonce		60256	0					
ANR	60425	Identifier	cipher_ctx		60256	0					
ANR	60426	Identifier	nonce		60256	1					
ANR	60427	Argument	cipher_ctx . skey		60256	8					
ANR	60428	MemberAccess	cipher_ctx . skey		60256	0					
ANR	60429	Identifier	cipher_ctx		60256	0					
ANR	60430	Identifier	skey		60256	1					
ANR	60431	ExpressionStatement	aead_ctx_release ( & cipher_ctx )	381:4:11770:11799	60256	14	True				
ANR	60432	CallExpression	aead_ctx_release ( & cipher_ctx )		60256	0					
ANR	60433	Callee	aead_ctx_release		60256	0					
ANR	60434	Identifier	aead_ctx_release		60256	0					
ANR	60435	ArgumentList	& cipher_ctx		60256	1					
ANR	60436	Argument	& cipher_ctx		60256	0					
ANR	60437	UnaryOperationExpression	& cipher_ctx		60256	0					
ANR	60438	UnaryOperator	&		60256	0					
ANR	60439	Identifier	cipher_ctx		60256	1					
ANR	60440	IfStatement	if ( err )		60256	15					
ANR	60441	Condition	err	383:8:11810:11812	60256	0	True				
ANR	60442	Identifier	err		60256	0					
ANR	60443	ReturnStatement	return CRYPTO_ERROR ;	384:8:11823:11842	60256	1	True				
ANR	60444	Identifier	CRYPTO_ERROR		60256	0					
ANR	60445	ExpressionStatement	assert ( ciphertext -> len == clen )	386:4:11849:11880	60256	16	True				
ANR	60446	CallExpression	assert ( ciphertext -> len == clen )		60256	0					
ANR	60447	Callee	assert		60256	0					
ANR	60448	Identifier	assert		60256	0					
ANR	60449	ArgumentList	ciphertext -> len == clen		60256	1					
ANR	60450	Argument	ciphertext -> len == clen		60256	0					
ANR	60451	EqualityExpression	ciphertext -> len == clen		60256	0		==			
ANR	60452	PtrMemberAccess	ciphertext -> len		60256	0					
ANR	60453	Identifier	ciphertext		60256	0					
ANR	60454	Identifier	len		60256	1					
ANR	60455	Identifier	clen		60256	1					
ANR	60456	ExpressionStatement	"brealloc ( plaintext , salt_len + ciphertext -> len , capacity )"	388:4:11887:11944	60256	17	True				
ANR	60457	CallExpression	"brealloc ( plaintext , salt_len + ciphertext -> len , capacity )"		60256	0					
ANR	60458	Callee	brealloc		60256	0					
ANR	60459	Identifier	brealloc		60256	0					
ANR	60460	ArgumentList	plaintext		60256	1					
ANR	60461	Argument	plaintext		60256	0					
ANR	60462	Identifier	plaintext		60256	0					
ANR	60463	Argument	salt_len + ciphertext -> len		60256	1					
ANR	60464	AdditiveExpression	salt_len + ciphertext -> len		60256	0		+			
ANR	60465	Identifier	salt_len		60256	0					
ANR	60466	PtrMemberAccess	ciphertext -> len		60256	1					
ANR	60467	Identifier	ciphertext		60256	0					
ANR	60468	Identifier	len		60256	1					
ANR	60469	Argument	capacity		60256	2					
ANR	60470	Identifier	capacity		60256	0					
ANR	60471	ExpressionStatement	"memcpy ( plaintext -> data , ciphertext -> data , salt_len + ciphertext -> len )"	389:4:11950:12019	60256	18	True				
ANR	60472	CallExpression	"memcpy ( plaintext -> data , ciphertext -> data , salt_len + ciphertext -> len )"		60256	0					
ANR	60473	Callee	memcpy		60256	0					
ANR	60474	Identifier	memcpy		60256	0					
ANR	60475	ArgumentList	plaintext -> data		60256	1					
ANR	60476	Argument	plaintext -> data		60256	0					
ANR	60477	PtrMemberAccess	plaintext -> data		60256	0					
ANR	60478	Identifier	plaintext		60256	0					
ANR	60479	Identifier	data		60256	1					
ANR	60480	Argument	ciphertext -> data		60256	1					
ANR	60481	PtrMemberAccess	ciphertext -> data		60256	0					
ANR	60482	Identifier	ciphertext		60256	0					
ANR	60483	Identifier	data		60256	1					
ANR	60484	Argument	salt_len + ciphertext -> len		60256	2					
ANR	60485	AdditiveExpression	salt_len + ciphertext -> len		60256	0		+			
ANR	60486	Identifier	salt_len		60256	0					
ANR	60487	PtrMemberAccess	ciphertext -> len		60256	1					
ANR	60488	Identifier	ciphertext		60256	0					
ANR	60489	Identifier	len		60256	1					
ANR	60490	ExpressionStatement	plaintext -> len = salt_len + ciphertext -> len	390:4:12025:12068	60256	19	True				
ANR	60491	AssignmentExpression	plaintext -> len = salt_len + ciphertext -> len		60256	0		=			
ANR	60492	PtrMemberAccess	plaintext -> len		60256	0					
ANR	60493	Identifier	plaintext		60256	0					
ANR	60494	Identifier	len		60256	1					
ANR	60495	AdditiveExpression	salt_len + ciphertext -> len		60256	1		+			
ANR	60496	Identifier	salt_len		60256	0					
ANR	60497	PtrMemberAccess	ciphertext -> len		60256	1					
ANR	60498	Identifier	ciphertext		60256	0					
ANR	60499	Identifier	len		60256	1					
ANR	60500	ReturnStatement	return CRYPTO_OK ;	392:4:12075:12091	60256	20	True				
ANR	60501	Identifier	CRYPTO_OK		60256	0					
ANR	60502	ReturnType	int		60256	1					
ANR	60503	Identifier	aead_encrypt_all		60256	2					
ANR	60504	ParameterList	"buffer_t * plaintext , cipher_t * cipher , size_t capacity"		60256	3					
ANR	60505	Parameter	buffer_t * plaintext	356:17:10884:10902	60256	0	True				
ANR	60506	ParameterType	buffer_t *		60256	0					
ANR	60507	Identifier	plaintext		60256	1					
ANR	60508	Parameter	cipher_t * cipher	356:38:10905:10920	60256	1	True				
ANR	60509	ParameterType	cipher_t *		60256	0					
ANR	60510	Identifier	cipher		60256	1					
ANR	60511	Parameter	size_t capacity	356:56:10923:10937	60256	2	True				
ANR	60512	ParameterType	size_t		60256	0					
ANR	60513	Identifier	capacity		60256	1					
ANR	60514	CFGEntryNode	ENTRY		60256		True				
ANR	60515	CFGExitNode	EXIT		60256		True				
ANR	60516	Symbol	tag_len		60256						
ANR	60517	Symbol	CRYPTO_ERROR		60256						
ANR	60518	Symbol	& clen		60256						
ANR	60519	Symbol	CRYPTO_OK		60256						
ANR	60520	Symbol	capacity		60256						
ANR	60521	Symbol	* plaintext		60256						
ANR	60522	Symbol	salt_len		60256						
ANR	60523	Symbol	aead_cipher_encrypt		60256						
ANR	60524	Symbol	tmp		60256						
ANR	60525	Symbol	plaintext -> data		60256						
ANR	60526	Symbol	cipher		60256						
ANR	60527	Symbol	ciphertext		60256						
ANR	60528	Symbol	ciphertext -> len		60256						
ANR	60529	Symbol	cipher_ctx		60256						
ANR	60530	Symbol	NULL		60256						
ANR	60531	Symbol	err		60256						
ANR	60532	Symbol	* cipher		60256						
ANR	60533	Symbol	cipher -> tag_len		60256						
ANR	60534	Symbol	& cipher_ctx		60256						
ANR	60535	Symbol	cipher_ctx . salt		60256						
ANR	60536	Symbol	plaintext		60256						
ANR	60537	Symbol	cipher_ctx . nonce		60256						
ANR	60538	Symbol	plaintext -> len		60256						
ANR	60539	Symbol	cipher_ctx . skey		60256						
ANR	60540	Symbol	cipher -> key_len		60256						
ANR	60541	Symbol	ciphertext -> data		60256						
ANR	60542	Symbol	& tmp		60256						
ANR	60543	Symbol	* ciphertext		60256						
ANR	60544	Symbol	clen		60256						
ANR	60545	Function	aead_decrypt_all	395:0:12096:13567							
ANR	60546	FunctionDef	"aead_decrypt_all (buffer_t * ciphertext , cipher_t * cipher , size_t capacity)"		60545	0					
ANR	60547	CompoundStatement		397:0:12174:13567	60545	0					
ANR	60548	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	398:4:12180:12214	60545	0	True				
ANR	60549	IdentifierDecl	salt_len = cipher -> key_len		60545	0					
ANR	60550	IdentifierDeclType	size_t		60545	0					
ANR	60551	Identifier	salt_len		60545	1					
ANR	60552	AssignmentExpression	salt_len = cipher -> key_len		60545	2		=			
ANR	60553	Identifier	salt_len		60545	0					
ANR	60554	PtrMemberAccess	cipher -> key_len		60545	1					
ANR	60555	Identifier	cipher		60545	0					
ANR	60556	Identifier	key_len		60545	1					
ANR	60557	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	399:4:12220:12254	60545	1	True				
ANR	60558	IdentifierDecl	tag_len = cipher -> tag_len		60545	0					
ANR	60559	IdentifierDeclType	size_t		60545	0					
ANR	60560	Identifier	tag_len		60545	1					
ANR	60561	AssignmentExpression	tag_len = cipher -> tag_len		60545	2		=			
ANR	60562	Identifier	tag_len		60545	0					
ANR	60563	PtrMemberAccess	cipher -> tag_len		60545	1					
ANR	60564	Identifier	cipher		60545	0					
ANR	60565	Identifier	tag_len		60545	1					
ANR	60566	IdentifierDeclStatement	int err = CRYPTO_OK ;	400:4:12260:12288	60545	2	True				
ANR	60567	IdentifierDecl	err = CRYPTO_OK		60545	0					
ANR	60568	IdentifierDeclType	int		60545	0					
ANR	60569	Identifier	err		60545	1					
ANR	60570	AssignmentExpression	err = CRYPTO_OK		60545	2		=			
ANR	60571	Identifier	CRYPTO_OK		60545	0					
ANR	60572	Identifier	CRYPTO_OK		60545	1					
ANR	60573	IfStatement	if ( ciphertext -> len <= salt_len + tag_len )		60545	3					
ANR	60574	Condition	ciphertext -> len <= salt_len + tag_len	402:8:12299:12335	60545	0	True				
ANR	60575	RelationalExpression	ciphertext -> len <= salt_len + tag_len		60545	0		<=			
ANR	60576	PtrMemberAccess	ciphertext -> len		60545	0					
ANR	60577	Identifier	ciphertext		60545	0					
ANR	60578	Identifier	len		60545	1					
ANR	60579	AdditiveExpression	salt_len + tag_len		60545	1		+			
ANR	60580	Identifier	salt_len		60545	0					
ANR	60581	Identifier	tag_len		60545	1					
ANR	60582	CompoundStatement		6:47:163:163	60545	1					
ANR	60583	ReturnStatement	return CRYPTO_ERROR ;	403:8:12348:12367	60545	0	True				
ANR	60584	Identifier	CRYPTO_ERROR		60545	0					
ANR	60585	IdentifierDeclStatement	cipher_ctx_t cipher_ctx ;	406:4:12380:12403	60545	4	True				
ANR	60586	IdentifierDecl	cipher_ctx		60545	0					
ANR	60587	IdentifierDeclType	cipher_ctx_t		60545	0					
ANR	60588	Identifier	cipher_ctx		60545	1					
ANR	60589	ExpressionStatement	"aead_ctx_init ( cipher , & cipher_ctx , 0 )"	407:4:12409:12446	60545	5	True				
ANR	60590	CallExpression	"aead_ctx_init ( cipher , & cipher_ctx , 0 )"		60545	0					
ANR	60591	Callee	aead_ctx_init		60545	0					
ANR	60592	Identifier	aead_ctx_init		60545	0					
ANR	60593	ArgumentList	cipher		60545	1					
ANR	60594	Argument	cipher		60545	0					
ANR	60595	Identifier	cipher		60545	0					
ANR	60596	Argument	& cipher_ctx		60545	1					
ANR	60597	UnaryOperationExpression	& cipher_ctx		60545	0					
ANR	60598	UnaryOperator	&		60545	0					
ANR	60599	Identifier	cipher_ctx		60545	1					
ANR	60600	Argument	0		60545	2					
ANR	60601	PrimaryExpression	0		60545	0					
ANR	60602	Statement	static	409:4:12453:12458	60545	6	True				
ANR	60603	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	409:11:12460:12492	60545	7	True				
ANR	60604	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		60545	0					
ANR	60605	IdentifierDeclType	buffer_t		60545	0					
ANR	60606	Identifier	tmp		60545	1					
ANR	60607	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		60545	2		=			
ANR	60608	Identifier	tmp		60545	0					
ANR	60609	InitializerList	0		60545	1					
ANR	60610	PrimaryExpression	0		60545	0					
ANR	60611	PrimaryExpression	0		60545	1					
ANR	60612	PrimaryExpression	0		60545	2					
ANR	60613	Identifier	NULL		60545	3					
ANR	60614	ExpressionStatement	"brealloc ( & tmp , ciphertext -> len , capacity )"	410:4:12498:12539	60545	8	True				
ANR	60615	CallExpression	"brealloc ( & tmp , ciphertext -> len , capacity )"		60545	0					
ANR	60616	Callee	brealloc		60545	0					
ANR	60617	Identifier	brealloc		60545	0					
ANR	60618	ArgumentList	& tmp		60545	1					
ANR	60619	Argument	& tmp		60545	0					
ANR	60620	UnaryOperationExpression	& tmp		60545	0					
ANR	60621	UnaryOperator	&		60545	0					
ANR	60622	Identifier	tmp		60545	1					
ANR	60623	Argument	ciphertext -> len		60545	1					
ANR	60624	PtrMemberAccess	ciphertext -> len		60545	0					
ANR	60625	Identifier	ciphertext		60545	0					
ANR	60626	Identifier	len		60545	1					
ANR	60627	Argument	capacity		60545	2					
ANR	60628	Identifier	capacity		60545	0					
ANR	60629	IdentifierDeclStatement	buffer_t * plaintext = & tmp ;	411:4:12545:12571	60545	9	True				
ANR	60630	IdentifierDecl	* plaintext = & tmp		60545	0					
ANR	60631	IdentifierDeclType	buffer_t *		60545	0					
ANR	60632	Identifier	plaintext		60545	1					
ANR	60633	AssignmentExpression	* plaintext = & tmp		60545	2		=			
ANR	60634	Identifier	plaintext		60545	0					
ANR	60635	UnaryOperationExpression	& tmp		60545	1					
ANR	60636	UnaryOperator	&		60545	0					
ANR	60637	Identifier	tmp		60545	1					
ANR	60638	ExpressionStatement	plaintext -> len = ciphertext -> len - salt_len - tag_len	412:4:12577:12630	60545	10	True				
ANR	60639	AssignmentExpression	plaintext -> len = ciphertext -> len - salt_len - tag_len		60545	0		=			
ANR	60640	PtrMemberAccess	plaintext -> len		60545	0					
ANR	60641	Identifier	plaintext		60545	0					
ANR	60642	Identifier	len		60545	1					
ANR	60643	AdditiveExpression	ciphertext -> len - salt_len - tag_len		60545	1		-			
ANR	60644	PtrMemberAccess	ciphertext -> len		60545	0					
ANR	60645	Identifier	ciphertext		60545	0					
ANR	60646	Identifier	len		60545	1					
ANR	60647	AdditiveExpression	salt_len - tag_len		60545	1		-			
ANR	60648	Identifier	salt_len		60545	0					
ANR	60649	Identifier	tag_len		60545	1					
ANR	60650	IdentifierDeclStatement	uint8_t * salt = cipher_ctx . salt ;	415:4:12656:12687	60545	11	True				
ANR	60651	IdentifierDecl	* salt = cipher_ctx . salt		60545	0					
ANR	60652	IdentifierDeclType	uint8_t *		60545	0					
ANR	60653	Identifier	salt		60545	1					
ANR	60654	AssignmentExpression	* salt = cipher_ctx . salt		60545	2		=			
ANR	60655	Identifier	salt		60545	0					
ANR	60656	MemberAccess	cipher_ctx . salt		60545	1					
ANR	60657	Identifier	cipher_ctx		60545	0					
ANR	60658	Identifier	salt		60545	1					
ANR	60659	ExpressionStatement	"memcpy ( salt , ciphertext -> data , salt_len )"	416:4:12693:12733	60545	12	True				
ANR	60660	CallExpression	"memcpy ( salt , ciphertext -> data , salt_len )"		60545	0					
ANR	60661	Callee	memcpy		60545	0					
ANR	60662	Identifier	memcpy		60545	0					
ANR	60663	ArgumentList	salt		60545	1					
ANR	60664	Argument	salt		60545	0					
ANR	60665	Identifier	salt		60545	0					
ANR	60666	Argument	ciphertext -> data		60545	1					
ANR	60667	PtrMemberAccess	ciphertext -> data		60545	0					
ANR	60668	Identifier	ciphertext		60545	0					
ANR	60669	Identifier	data		60545	1					
ANR	60670	Argument	salt_len		60545	2					
ANR	60671	Identifier	salt_len		60545	0					
ANR	60672	IfStatement	"if ( ppbloom_check ( ( void * ) salt , salt_len ) == 1 )"		60545	13					
ANR	60673	Condition	"ppbloom_check ( ( void * ) salt , salt_len ) == 1"	418:8:12744:12785	60545	0	True				
ANR	60674	EqualityExpression	"ppbloom_check ( ( void * ) salt , salt_len ) == 1"		60545	0		==			
ANR	60675	CallExpression	"ppbloom_check ( ( void * ) salt , salt_len )"		60545	0					
ANR	60676	Callee	ppbloom_check		60545	0					
ANR	60677	Identifier	ppbloom_check		60545	0					
ANR	60678	ArgumentList	( void * ) salt		60545	1					
ANR	60679	Argument	( void * ) salt		60545	0					
ANR	60680	CastExpression	( void * ) salt		60545	0					
ANR	60681	CastTarget	void *		60545	0					
ANR	60682	Identifier	salt		60545	1					
ANR	60683	Argument	salt_len		60545	1					
ANR	60684	Identifier	salt_len		60545	0					
ANR	60685	PrimaryExpression	1		60545	1					
ANR	60686	CompoundStatement		22:52:613:613	60545	1					
ANR	60687	ExpressionStatement	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"	419:8:12798:12840	60545	0	True				
ANR	60688	CallExpression	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"		60545	0					
ANR	60689	Callee	LOGE		60545	0					
ANR	60690	Identifier	LOGE		60545	0					
ANR	60691	ArgumentList	"""crypto: AEAD: repeat salt detected"""		60545	1					
ANR	60692	Argument	"""crypto: AEAD: repeat salt detected"""		60545	0					
ANR	60693	PrimaryExpression	"""crypto: AEAD: repeat salt detected"""		60545	0					
ANR	60694	ReturnStatement	return CRYPTO_ERROR ;	420:8:12850:12869	60545	1	True				
ANR	60695	Identifier	CRYPTO_ERROR		60545	0					
ANR	60696	ExpressionStatement	"aead_cipher_ctx_set_key ( & cipher_ctx , 0 )"	423:4:12882:12921	60545	14	True				
ANR	60697	CallExpression	"aead_cipher_ctx_set_key ( & cipher_ctx , 0 )"		60545	0					
ANR	60698	Callee	aead_cipher_ctx_set_key		60545	0					
ANR	60699	Identifier	aead_cipher_ctx_set_key		60545	0					
ANR	60700	ArgumentList	& cipher_ctx		60545	1					
ANR	60701	Argument	& cipher_ctx		60545	0					
ANR	60702	UnaryOperationExpression	& cipher_ctx		60545	0					
ANR	60703	UnaryOperator	&		60545	0					
ANR	60704	Identifier	cipher_ctx		60545	1					
ANR	60705	Argument	0		60545	1					
ANR	60706	PrimaryExpression	0		60545	0					
ANR	60707	IdentifierDeclStatement	size_t plen = plaintext -> len ;	425:4:12928:12956	60545	15	True				
ANR	60708	IdentifierDecl	plen = plaintext -> len		60545	0					
ANR	60709	IdentifierDeclType	size_t		60545	0					
ANR	60710	Identifier	plen		60545	1					
ANR	60711	AssignmentExpression	plen = plaintext -> len		60545	2		=			
ANR	60712	Identifier	plen		60545	0					
ANR	60713	PtrMemberAccess	plaintext -> len		60545	1					
ANR	60714	Identifier	plaintext		60545	0					
ANR	60715	Identifier	len		60545	1					
ANR	60716	ExpressionStatement	"err = aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"	426:4:12962:13267	60545	16	True				
ANR	60717	AssignmentExpression	"err = aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		60545	0		=			
ANR	60718	Identifier	err		60545	0					
ANR	60719	CallExpression	"aead_cipher_decrypt ( & cipher_ctx , ( uint8_t * ) plaintext -> data , & plen , ( uint8_t * ) ciphertext -> data + salt_len , ciphertext -> len - salt_len , NULL , 0 , cipher_ctx . nonce , cipher_ctx . skey )"		60545	1					
ANR	60720	Callee	aead_cipher_decrypt		60545	0					
ANR	60721	Identifier	aead_cipher_decrypt		60545	0					
ANR	60722	ArgumentList	& cipher_ctx		60545	1					
ANR	60723	Argument	& cipher_ctx		60545	0					
ANR	60724	UnaryOperationExpression	& cipher_ctx		60545	0					
ANR	60725	UnaryOperator	&		60545	0					
ANR	60726	Identifier	cipher_ctx		60545	1					
ANR	60727	Argument	( uint8_t * ) plaintext -> data		60545	1					
ANR	60728	CastExpression	( uint8_t * ) plaintext -> data		60545	0					
ANR	60729	CastTarget	uint8_t *		60545	0					
ANR	60730	PtrMemberAccess	plaintext -> data		60545	1					
ANR	60731	Identifier	plaintext		60545	0					
ANR	60732	Identifier	data		60545	1					
ANR	60733	Argument	& plen		60545	2					
ANR	60734	UnaryOperationExpression	& plen		60545	0					
ANR	60735	UnaryOperator	&		60545	0					
ANR	60736	Identifier	plen		60545	1					
ANR	60737	Argument	( uint8_t * ) ciphertext -> data + salt_len		60545	3					
ANR	60738	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_len		60545	0		+			
ANR	60739	CastExpression	( uint8_t * ) ciphertext -> data		60545	0					
ANR	60740	CastTarget	uint8_t *		60545	0					
ANR	60741	PtrMemberAccess	ciphertext -> data		60545	1					
ANR	60742	Identifier	ciphertext		60545	0					
ANR	60743	Identifier	data		60545	1					
ANR	60744	Identifier	salt_len		60545	1					
ANR	60745	Argument	ciphertext -> len - salt_len		60545	4					
ANR	60746	AdditiveExpression	ciphertext -> len - salt_len		60545	0		-			
ANR	60747	PtrMemberAccess	ciphertext -> len		60545	0					
ANR	60748	Identifier	ciphertext		60545	0					
ANR	60749	Identifier	len		60545	1					
ANR	60750	Identifier	salt_len		60545	1					
ANR	60751	Argument	NULL		60545	5					
ANR	60752	Identifier	NULL		60545	0					
ANR	60753	Argument	0		60545	6					
ANR	60754	PrimaryExpression	0		60545	0					
ANR	60755	Argument	cipher_ctx . nonce		60545	7					
ANR	60756	MemberAccess	cipher_ctx . nonce		60545	0					
ANR	60757	Identifier	cipher_ctx		60545	0					
ANR	60758	Identifier	nonce		60545	1					
ANR	60759	Argument	cipher_ctx . skey		60545	8					
ANR	60760	MemberAccess	cipher_ctx . skey		60545	0					
ANR	60761	Identifier	cipher_ctx		60545	0					
ANR	60762	Identifier	skey		60545	1					
ANR	60763	ExpressionStatement	aead_ctx_release ( & cipher_ctx )	432:4:13274:13303	60545	17	True				
ANR	60764	CallExpression	aead_ctx_release ( & cipher_ctx )		60545	0					
ANR	60765	Callee	aead_ctx_release		60545	0					
ANR	60766	Identifier	aead_ctx_release		60545	0					
ANR	60767	ArgumentList	& cipher_ctx		60545	1					
ANR	60768	Argument	& cipher_ctx		60545	0					
ANR	60769	UnaryOperationExpression	& cipher_ctx		60545	0					
ANR	60770	UnaryOperator	&		60545	0					
ANR	60771	Identifier	cipher_ctx		60545	1					
ANR	60772	IfStatement	if ( err )		60545	18					
ANR	60773	Condition	err	434:8:13314:13316	60545	0	True				
ANR	60774	Identifier	err		60545	0					
ANR	60775	ReturnStatement	return CRYPTO_ERROR ;	435:8:13327:13346	60545	1	True				
ANR	60776	Identifier	CRYPTO_ERROR		60545	0					
ANR	60777	ExpressionStatement	"ppbloom_add ( ( void * ) salt , salt_len )"	437:4:13353:13388	60545	19	True				
ANR	60778	CallExpression	"ppbloom_add ( ( void * ) salt , salt_len )"		60545	0					
ANR	60779	Callee	ppbloom_add		60545	0					
ANR	60780	Identifier	ppbloom_add		60545	0					
ANR	60781	ArgumentList	( void * ) salt		60545	1					
ANR	60782	Argument	( void * ) salt		60545	0					
ANR	60783	CastExpression	( void * ) salt		60545	0					
ANR	60784	CastTarget	void *		60545	0					
ANR	60785	Identifier	salt		60545	1					
ANR	60786	Argument	salt_len		60545	1					
ANR	60787	Identifier	salt_len		60545	0					
ANR	60788	ExpressionStatement	"brealloc ( ciphertext , plaintext -> len , capacity )"	439:4:13395:13441	60545	20	True				
ANR	60789	CallExpression	"brealloc ( ciphertext , plaintext -> len , capacity )"		60545	0					
ANR	60790	Callee	brealloc		60545	0					
ANR	60791	Identifier	brealloc		60545	0					
ANR	60792	ArgumentList	ciphertext		60545	1					
ANR	60793	Argument	ciphertext		60545	0					
ANR	60794	Identifier	ciphertext		60545	0					
ANR	60795	Argument	plaintext -> len		60545	1					
ANR	60796	PtrMemberAccess	plaintext -> len		60545	0					
ANR	60797	Identifier	plaintext		60545	0					
ANR	60798	Identifier	len		60545	1					
ANR	60799	Argument	capacity		60545	2					
ANR	60800	Identifier	capacity		60545	0					
ANR	60801	ExpressionStatement	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"	440:4:13447:13504	60545	21	True				
ANR	60802	CallExpression	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"		60545	0					
ANR	60803	Callee	memcpy		60545	0					
ANR	60804	Identifier	memcpy		60545	0					
ANR	60805	ArgumentList	ciphertext -> data		60545	1					
ANR	60806	Argument	ciphertext -> data		60545	0					
ANR	60807	PtrMemberAccess	ciphertext -> data		60545	0					
ANR	60808	Identifier	ciphertext		60545	0					
ANR	60809	Identifier	data		60545	1					
ANR	60810	Argument	plaintext -> data		60545	1					
ANR	60811	PtrMemberAccess	plaintext -> data		60545	0					
ANR	60812	Identifier	plaintext		60545	0					
ANR	60813	Identifier	data		60545	1					
ANR	60814	Argument	plaintext -> len		60545	2					
ANR	60815	PtrMemberAccess	plaintext -> len		60545	0					
ANR	60816	Identifier	plaintext		60545	0					
ANR	60817	Identifier	len		60545	1					
ANR	60818	ExpressionStatement	ciphertext -> len = plaintext -> len	441:4:13510:13542	60545	22	True				
ANR	60819	AssignmentExpression	ciphertext -> len = plaintext -> len		60545	0		=			
ANR	60820	PtrMemberAccess	ciphertext -> len		60545	0					
ANR	60821	Identifier	ciphertext		60545	0					
ANR	60822	Identifier	len		60545	1					
ANR	60823	PtrMemberAccess	plaintext -> len		60545	1					
ANR	60824	Identifier	plaintext		60545	0					
ANR	60825	Identifier	len		60545	1					
ANR	60826	ReturnStatement	return CRYPTO_OK ;	443:4:13549:13565	60545	23	True				
ANR	60827	Identifier	CRYPTO_OK		60545	0					
ANR	60828	ReturnType	int		60545	1					
ANR	60829	Identifier	aead_decrypt_all		60545	2					
ANR	60830	ParameterList	"buffer_t * ciphertext , cipher_t * cipher , size_t capacity"		60545	3					
ANR	60831	Parameter	buffer_t * ciphertext	396:17:12117:12136	60545	0	True				
ANR	60832	ParameterType	buffer_t *		60545	0					
ANR	60833	Identifier	ciphertext		60545	1					
ANR	60834	Parameter	cipher_t * cipher	396:39:12139:12154	60545	1	True				
ANR	60835	ParameterType	cipher_t *		60545	0					
ANR	60836	Identifier	cipher		60545	1					
ANR	60837	Parameter	size_t capacity	396:57:12157:12171	60545	2	True				
ANR	60838	ParameterType	size_t		60545	0					
ANR	60839	Identifier	capacity		60545	1					
ANR	60840	CFGEntryNode	ENTRY		60545		True				
ANR	60841	CFGExitNode	EXIT		60545		True				
ANR	60842	Symbol	tag_len		60545						
ANR	60843	Symbol	CRYPTO_ERROR		60545						
ANR	60844	Symbol	CRYPTO_OK		60545						
ANR	60845	Symbol	capacity		60545						
ANR	60846	Symbol	& plen		60545						
ANR	60847	Symbol	* plaintext		60545						
ANR	60848	Symbol	plen		60545						
ANR	60849	Symbol	salt_len		60545						
ANR	60850	Symbol	tmp		60545						
ANR	60851	Symbol	plaintext -> data		60545						
ANR	60852	Symbol	cipher		60545						
ANR	60853	Symbol	ciphertext		60545						
ANR	60854	Symbol	ciphertext -> len		60545						
ANR	60855	Symbol	cipher_ctx		60545						
ANR	60856	Symbol	NULL		60545						
ANR	60857	Symbol	salt		60545						
ANR	60858	Symbol	err		60545						
ANR	60859	Symbol	* cipher		60545						
ANR	60860	Symbol	cipher -> tag_len		60545						
ANR	60861	Symbol	ppbloom_check		60545						
ANR	60862	Symbol	& cipher_ctx		60545						
ANR	60863	Symbol	cipher_ctx . salt		60545						
ANR	60864	Symbol	aead_cipher_decrypt		60545						
ANR	60865	Symbol	plaintext		60545						
ANR	60866	Symbol	cipher_ctx . nonce		60545						
ANR	60867	Symbol	plaintext -> len		60545						
ANR	60868	Symbol	cipher_ctx . skey		60545						
ANR	60869	Symbol	cipher -> key_len		60545						
ANR	60870	Symbol	ciphertext -> data		60545						
ANR	60871	Symbol	& tmp		60545						
ANR	60872	Symbol	* ciphertext		60545						
ANR	60873	Function	aead_chunk_encrypt	446:0:13570:14536							
ANR	60874	FunctionDef	"aead_chunk_encrypt (cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , uint16_t plen)"		60873	0					
ANR	60875	CompoundStatement		449:0:13689:14536	60873	0					
ANR	60876	IdentifierDeclStatement	size_t nlen = ctx -> cipher -> nonce_len ;	450:4:13695:13731	60873	0	True				
ANR	60877	IdentifierDecl	nlen = ctx -> cipher -> nonce_len		60873	0					
ANR	60878	IdentifierDeclType	size_t		60873	0					
ANR	60879	Identifier	nlen		60873	1					
ANR	60880	AssignmentExpression	nlen = ctx -> cipher -> nonce_len		60873	2		=			
ANR	60881	Identifier	nlen		60873	0					
ANR	60882	PtrMemberAccess	ctx -> cipher -> nonce_len		60873	1					
ANR	60883	PtrMemberAccess	ctx -> cipher		60873	0					
ANR	60884	Identifier	ctx		60873	0					
ANR	60885	Identifier	cipher		60873	1					
ANR	60886	Identifier	nonce_len		60873	1					
ANR	60887	IdentifierDeclStatement	size_t tlen = ctx -> cipher -> tag_len ;	451:4:13737:13771	60873	1	True				
ANR	60888	IdentifierDecl	tlen = ctx -> cipher -> tag_len		60873	0					
ANR	60889	IdentifierDeclType	size_t		60873	0					
ANR	60890	Identifier	tlen		60873	1					
ANR	60891	AssignmentExpression	tlen = ctx -> cipher -> tag_len		60873	2		=			
ANR	60892	Identifier	tlen		60873	0					
ANR	60893	PtrMemberAccess	ctx -> cipher -> tag_len		60873	1					
ANR	60894	PtrMemberAccess	ctx -> cipher		60873	0					
ANR	60895	Identifier	ctx		60873	0					
ANR	60896	Identifier	cipher		60873	1					
ANR	60897	Identifier	tag_len		60873	1					
ANR	60898	ExpressionStatement	assert ( plen <= CHUNK_SIZE_MASK )	453:4:13778:13809	60873	2	True				
ANR	60899	CallExpression	assert ( plen <= CHUNK_SIZE_MASK )		60873	0					
ANR	60900	Callee	assert		60873	0					
ANR	60901	Identifier	assert		60873	0					
ANR	60902	ArgumentList	plen <= CHUNK_SIZE_MASK		60873	1					
ANR	60903	Argument	plen <= CHUNK_SIZE_MASK		60873	0					
ANR	60904	RelationalExpression	plen <= CHUNK_SIZE_MASK		60873	0		<=			
ANR	60905	Identifier	plen		60873	0					
ANR	60906	Identifier	CHUNK_SIZE_MASK		60873	1					
ANR	60907	IdentifierDeclStatement	int err ;	455:4:13816:13823	60873	3	True				
ANR	60908	IdentifierDecl	err		60873	0					
ANR	60909	IdentifierDeclType	int		60873	0					
ANR	60910	Identifier	err		60873	1					
ANR	60911	IdentifierDeclStatement	size_t clen ;	456:4:13829:13840	60873	4	True				
ANR	60912	IdentifierDecl	clen		60873	0					
ANR	60913	IdentifierDeclType	size_t		60873	0					
ANR	60914	Identifier	clen		60873	1					
ANR	60915	IdentifierDeclStatement	uint8_t len_buf [ CHUNK_SIZE_LEN ] ;	457:4:13846:13877	60873	5	True				
ANR	60916	IdentifierDecl	len_buf [ CHUNK_SIZE_LEN ]		60873	0					
ANR	60917	IdentifierDeclType	uint8_t [ CHUNK_SIZE_LEN ]		60873	0					
ANR	60918	Identifier	len_buf		60873	1					
ANR	60919	Identifier	CHUNK_SIZE_LEN		60873	2					
ANR	60920	IdentifierDeclStatement	uint16_t t = htons ( plen & CHUNK_SIZE_MASK ) ;	458:4:13883:13925	60873	6	True				
ANR	60921	IdentifierDecl	t = htons ( plen & CHUNK_SIZE_MASK )		60873	0					
ANR	60922	IdentifierDeclType	uint16_t		60873	0					
ANR	60923	Identifier	t		60873	1					
ANR	60924	AssignmentExpression	t = htons ( plen & CHUNK_SIZE_MASK )		60873	2		=			
ANR	60925	Identifier	t		60873	0					
ANR	60926	CallExpression	htons ( plen & CHUNK_SIZE_MASK )		60873	1					
ANR	60927	Callee	htons		60873	0					
ANR	60928	Identifier	htons		60873	0					
ANR	60929	ArgumentList	plen & CHUNK_SIZE_MASK		60873	1					
ANR	60930	Argument	plen & CHUNK_SIZE_MASK		60873	0					
ANR	60931	BitAndExpression	plen & CHUNK_SIZE_MASK		60873	0		&			
ANR	60932	Identifier	plen		60873	0					
ANR	60933	Identifier	CHUNK_SIZE_MASK		60873	1					
ANR	60934	ExpressionStatement	"memcpy ( len_buf , & t , CHUNK_SIZE_LEN )"	459:4:13931:13966	60873	7	True				
ANR	60935	CallExpression	"memcpy ( len_buf , & t , CHUNK_SIZE_LEN )"		60873	0					
ANR	60936	Callee	memcpy		60873	0					
ANR	60937	Identifier	memcpy		60873	0					
ANR	60938	ArgumentList	len_buf		60873	1					
ANR	60939	Argument	len_buf		60873	0					
ANR	60940	Identifier	len_buf		60873	0					
ANR	60941	Argument	& t		60873	1					
ANR	60942	UnaryOperationExpression	& t		60873	0					
ANR	60943	UnaryOperator	&		60873	0					
ANR	60944	Identifier	t		60873	1					
ANR	60945	Argument	CHUNK_SIZE_LEN		60873	2					
ANR	60946	Identifier	CHUNK_SIZE_LEN		60873	0					
ANR	60947	ExpressionStatement	clen = CHUNK_SIZE_LEN + tlen	461:4:13973:14001	60873	8	True				
ANR	60948	AssignmentExpression	clen = CHUNK_SIZE_LEN + tlen		60873	0		=			
ANR	60949	Identifier	clen		60873	0					
ANR	60950	AdditiveExpression	CHUNK_SIZE_LEN + tlen		60873	1		+			
ANR	60951	Identifier	CHUNK_SIZE_LEN		60873	0					
ANR	60952	Identifier	tlen		60873	1					
ANR	60953	ExpressionStatement	"err = aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"	462:4:14007:14127	60873	9	True				
ANR	60954	AssignmentExpression	"err = aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"		60873	0		=			
ANR	60955	Identifier	err		60873	0					
ANR	60956	CallExpression	"aead_cipher_encrypt ( ctx , c , & clen , len_buf , CHUNK_SIZE_LEN , NULL , 0 , n , ctx -> skey )"		60873	1					
ANR	60957	Callee	aead_cipher_encrypt		60873	0					
ANR	60958	Identifier	aead_cipher_encrypt		60873	0					
ANR	60959	ArgumentList	ctx		60873	1					
ANR	60960	Argument	ctx		60873	0					
ANR	60961	Identifier	ctx		60873	0					
ANR	60962	Argument	c		60873	1					
ANR	60963	Identifier	c		60873	0					
ANR	60964	Argument	& clen		60873	2					
ANR	60965	UnaryOperationExpression	& clen		60873	0					
ANR	60966	UnaryOperator	&		60873	0					
ANR	60967	Identifier	clen		60873	1					
ANR	60968	Argument	len_buf		60873	3					
ANR	60969	Identifier	len_buf		60873	0					
ANR	60970	Argument	CHUNK_SIZE_LEN		60873	4					
ANR	60971	Identifier	CHUNK_SIZE_LEN		60873	0					
ANR	60972	Argument	NULL		60873	5					
ANR	60973	Identifier	NULL		60873	0					
ANR	60974	Argument	0		60873	6					
ANR	60975	PrimaryExpression	0		60873	0					
ANR	60976	Argument	n		60873	7					
ANR	60977	Identifier	n		60873	0					
ANR	60978	Argument	ctx -> skey		60873	8					
ANR	60979	PtrMemberAccess	ctx -> skey		60873	0					
ANR	60980	Identifier	ctx		60873	0					
ANR	60981	Identifier	skey		60873	1					
ANR	60982	IfStatement	if ( err )		60873	10					
ANR	60983	Condition	err	464:8:14137:14139	60873	0	True				
ANR	60984	Identifier	err		60873	0					
ANR	60985	ReturnStatement	return CRYPTO_ERROR ;	465:8:14150:14169	60873	1	True				
ANR	60986	Identifier	CRYPTO_ERROR		60873	0					
ANR	60987	ExpressionStatement	assert ( clen == CHUNK_SIZE_LEN + tlen )	467:4:14176:14213	60873	11	True				
ANR	60988	CallExpression	assert ( clen == CHUNK_SIZE_LEN + tlen )		60873	0					
ANR	60989	Callee	assert		60873	0					
ANR	60990	Identifier	assert		60873	0					
ANR	60991	ArgumentList	clen == CHUNK_SIZE_LEN + tlen		60873	1					
ANR	60992	Argument	clen == CHUNK_SIZE_LEN + tlen		60873	0					
ANR	60993	EqualityExpression	clen == CHUNK_SIZE_LEN + tlen		60873	0		==			
ANR	60994	Identifier	clen		60873	0					
ANR	60995	AdditiveExpression	CHUNK_SIZE_LEN + tlen		60873	1		+			
ANR	60996	Identifier	CHUNK_SIZE_LEN		60873	0					
ANR	60997	Identifier	tlen		60873	1					
ANR	60998	ExpressionStatement	"sodium_increment ( n , nlen )"	469:4:14220:14245	60873	12	True				
ANR	60999	CallExpression	"sodium_increment ( n , nlen )"		60873	0					
ANR	61000	Callee	sodium_increment		60873	0					
ANR	61001	Identifier	sodium_increment		60873	0					
ANR	61002	ArgumentList	n		60873	1					
ANR	61003	Argument	n		60873	0					
ANR	61004	Identifier	n		60873	0					
ANR	61005	Argument	nlen		60873	1					
ANR	61006	Identifier	nlen		60873	0					
ANR	61007	ExpressionStatement	clen = plen + tlen	471:4:14252:14270	60873	13	True				
ANR	61008	AssignmentExpression	clen = plen + tlen		60873	0		=			
ANR	61009	Identifier	clen		60873	0					
ANR	61010	AdditiveExpression	plen + tlen		60873	1		+			
ANR	61011	Identifier	plen		60873	0					
ANR	61012	Identifier	tlen		60873	1					
ANR	61013	ExpressionStatement	"err = aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"	472:4:14276:14403	60873	14	True				
ANR	61014	AssignmentExpression	"err = aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"		60873	0		=			
ANR	61015	Identifier	err		60873	0					
ANR	61016	CallExpression	"aead_cipher_encrypt ( ctx , c + CHUNK_SIZE_LEN + tlen , & clen , p , plen , NULL , 0 , n , ctx -> skey )"		60873	1					
ANR	61017	Callee	aead_cipher_encrypt		60873	0					
ANR	61018	Identifier	aead_cipher_encrypt		60873	0					
ANR	61019	ArgumentList	ctx		60873	1					
ANR	61020	Argument	ctx		60873	0					
ANR	61021	Identifier	ctx		60873	0					
ANR	61022	Argument	c + CHUNK_SIZE_LEN + tlen		60873	1					
ANR	61023	AdditiveExpression	c + CHUNK_SIZE_LEN + tlen		60873	0		+			
ANR	61024	Identifier	c		60873	0					
ANR	61025	AdditiveExpression	CHUNK_SIZE_LEN + tlen		60873	1		+			
ANR	61026	Identifier	CHUNK_SIZE_LEN		60873	0					
ANR	61027	Identifier	tlen		60873	1					
ANR	61028	Argument	& clen		60873	2					
ANR	61029	UnaryOperationExpression	& clen		60873	0					
ANR	61030	UnaryOperator	&		60873	0					
ANR	61031	Identifier	clen		60873	1					
ANR	61032	Argument	p		60873	3					
ANR	61033	Identifier	p		60873	0					
ANR	61034	Argument	plen		60873	4					
ANR	61035	Identifier	plen		60873	0					
ANR	61036	Argument	NULL		60873	5					
ANR	61037	Identifier	NULL		60873	0					
ANR	61038	Argument	0		60873	6					
ANR	61039	PrimaryExpression	0		60873	0					
ANR	61040	Argument	n		60873	7					
ANR	61041	Identifier	n		60873	0					
ANR	61042	Argument	ctx -> skey		60873	8					
ANR	61043	PtrMemberAccess	ctx -> skey		60873	0					
ANR	61044	Identifier	ctx		60873	0					
ANR	61045	Identifier	skey		60873	1					
ANR	61046	IfStatement	if ( err )		60873	15					
ANR	61047	Condition	err	474:8:14413:14415	60873	0	True				
ANR	61048	Identifier	err		60873	0					
ANR	61049	ReturnStatement	return CRYPTO_ERROR ;	475:8:14426:14445	60873	1	True				
ANR	61050	Identifier	CRYPTO_ERROR		60873	0					
ANR	61051	ExpressionStatement	assert ( clen == plen + tlen )	477:4:14452:14479	60873	16	True				
ANR	61052	CallExpression	assert ( clen == plen + tlen )		60873	0					
ANR	61053	Callee	assert		60873	0					
ANR	61054	Identifier	assert		60873	0					
ANR	61055	ArgumentList	clen == plen + tlen		60873	1					
ANR	61056	Argument	clen == plen + tlen		60873	0					
ANR	61057	EqualityExpression	clen == plen + tlen		60873	0		==			
ANR	61058	Identifier	clen		60873	0					
ANR	61059	AdditiveExpression	plen + tlen		60873	1		+			
ANR	61060	Identifier	plen		60873	0					
ANR	61061	Identifier	tlen		60873	1					
ANR	61062	ExpressionStatement	"sodium_increment ( n , nlen )"	479:4:14486:14511	60873	17	True				
ANR	61063	CallExpression	"sodium_increment ( n , nlen )"		60873	0					
ANR	61064	Callee	sodium_increment		60873	0					
ANR	61065	Identifier	sodium_increment		60873	0					
ANR	61066	ArgumentList	n		60873	1					
ANR	61067	Argument	n		60873	0					
ANR	61068	Identifier	n		60873	0					
ANR	61069	Argument	nlen		60873	1					
ANR	61070	Identifier	nlen		60873	0					
ANR	61071	ReturnStatement	return CRYPTO_OK ;	481:4:14518:14534	60873	18	True				
ANR	61072	Identifier	CRYPTO_OK		60873	0					
ANR	61073	ReturnType	static int		60873	1					
ANR	61074	Identifier	aead_chunk_encrypt		60873	2					
ANR	61075	ParameterList	"cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , uint16_t plen"		60873	3					
ANR	61076	Parameter	cipher_ctx_t * ctx	447:19:13600:13616	60873	0	True				
ANR	61077	ParameterType	cipher_ctx_t *		60873	0					
ANR	61078	Identifier	ctx		60873	1					
ANR	61079	Parameter	uint8_t * p	447:38:13619:13628	60873	1	True				
ANR	61080	ParameterType	uint8_t *		60873	0					
ANR	61081	Identifier	p		60873	1					
ANR	61082	Parameter	uint8_t * c	447:50:13631:13640	60873	2	True				
ANR	61083	ParameterType	uint8_t *		60873	0					
ANR	61084	Identifier	c		60873	1					
ANR	61085	Parameter	uint8_t * n	448:19:13662:13671	60873	3	True				
ANR	61086	ParameterType	uint8_t *		60873	0					
ANR	61087	Identifier	n		60873	1					
ANR	61088	Parameter	uint16_t plen	448:31:13674:13686	60873	4	True				
ANR	61089	ParameterType	uint16_t		60873	0					
ANR	61090	Identifier	plen		60873	1					
ANR	61091	CFGEntryNode	ENTRY		60873		True				
ANR	61092	CFGExitNode	EXIT		60873		True				
ANR	61093	Symbol	CRYPTO_ERROR		60873						
ANR	61094	Symbol	& clen		60873						
ANR	61095	Symbol	CRYPTO_OK		60873						
ANR	61096	Symbol	ctx -> cipher -> tag_len		60873						
ANR	61097	Symbol	htons		60873						
ANR	61098	Symbol	CHUNK_SIZE_LEN		60873						
ANR	61099	Symbol	ctx -> skey		60873						
ANR	61100	Symbol	plen		60873						
ANR	61101	Symbol	aead_cipher_encrypt		60873						
ANR	61102	Symbol	nlen		60873						
ANR	61103	Symbol	tlen		60873						
ANR	61104	Symbol	CHUNK_SIZE_MASK		60873						
ANR	61105	Symbol	ctx -> cipher -> nonce_len		60873						
ANR	61106	Symbol	c		60873						
ANR	61107	Symbol	* ctx -> cipher		60873						
ANR	61108	Symbol	NULL		60873						
ANR	61109	Symbol	err		60873						
ANR	61110	Symbol	ctx		60873						
ANR	61111	Symbol	n		60873						
ANR	61112	Symbol	* ctx		60873						
ANR	61113	Symbol	p		60873						
ANR	61114	Symbol	ctx -> cipher		60873						
ANR	61115	Symbol	t		60873						
ANR	61116	Symbol	& t		60873						
ANR	61117	Symbol	* * ctx		60873						
ANR	61118	Symbol	clen		60873						
ANR	61119	Symbol	len_buf		60873						
ANR	61120	Function	aead_encrypt	485:0:14549:15875							
ANR	61121	FunctionDef	"aead_encrypt (buffer_t * plaintext , cipher_ctx_t * cipher_ctx , size_t capacity)"		61120	0					
ANR	61122	CompoundStatement		487:0:14630:15875	61120	0					
ANR	61123	IfStatement	if ( cipher_ctx == NULL )		61120	0					
ANR	61124	Condition	cipher_ctx == NULL	488:8:14640:14657	61120	0	True				
ANR	61125	EqualityExpression	cipher_ctx == NULL		61120	0		==			
ANR	61126	Identifier	cipher_ctx		61120	0					
ANR	61127	Identifier	NULL		61120	1					
ANR	61128	ReturnStatement	return CRYPTO_ERROR ;	489:8:14668:14687	61120	1	True				
ANR	61129	Identifier	CRYPTO_ERROR		61120	0					
ANR	61130	IfStatement	if ( plaintext -> len == 0 )		61120	1					
ANR	61131	Condition	plaintext -> len == 0	491:8:14698:14716	61120	0	True				
ANR	61132	EqualityExpression	plaintext -> len == 0		61120	0		==			
ANR	61133	PtrMemberAccess	plaintext -> len		61120	0					
ANR	61134	Identifier	plaintext		61120	0					
ANR	61135	Identifier	len		61120	1					
ANR	61136	PrimaryExpression	0		61120	1					
ANR	61137	CompoundStatement		5:29:88:88	61120	1					
ANR	61138	ReturnStatement	return CRYPTO_OK ;	492:8:14729:14745	61120	0	True				
ANR	61139	Identifier	CRYPTO_OK		61120	0					
ANR	61140	Statement	static	495:4:14758:14763	61120	2	True				
ANR	61141	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	495:11:14765:14797	61120	3	True				
ANR	61142	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		61120	0					
ANR	61143	IdentifierDeclType	buffer_t		61120	0					
ANR	61144	Identifier	tmp		61120	1					
ANR	61145	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		61120	2		=			
ANR	61146	Identifier	tmp		61120	0					
ANR	61147	InitializerList	0		61120	1					
ANR	61148	PrimaryExpression	0		61120	0					
ANR	61149	PrimaryExpression	0		61120	1					
ANR	61150	PrimaryExpression	0		61120	2					
ANR	61151	Identifier	NULL		61120	3					
ANR	61152	IdentifierDeclStatement	buffer_t * ciphertext ;	496:4:14803:14823	61120	4	True				
ANR	61153	IdentifierDecl	* ciphertext		61120	0					
ANR	61154	IdentifierDeclType	buffer_t *		61120	0					
ANR	61155	Identifier	ciphertext		61120	1					
ANR	61156	IdentifierDeclStatement	cipher_t * cipher = cipher_ctx -> cipher ;	498:4:14830:14868	61120	5	True				
ANR	61157	IdentifierDecl	* cipher = cipher_ctx -> cipher		61120	0					
ANR	61158	IdentifierDeclType	cipher_t *		61120	0					
ANR	61159	Identifier	cipher		61120	1					
ANR	61160	AssignmentExpression	* cipher = cipher_ctx -> cipher		61120	2		=			
ANR	61161	Identifier	cipher		61120	0					
ANR	61162	PtrMemberAccess	cipher_ctx -> cipher		61120	1					
ANR	61163	Identifier	cipher_ctx		61120	0					
ANR	61164	Identifier	cipher		61120	1					
ANR	61165	IdentifierDeclStatement	int err = CRYPTO_ERROR ;	499:4:14874:14906	61120	6	True				
ANR	61166	IdentifierDecl	err = CRYPTO_ERROR		61120	0					
ANR	61167	IdentifierDeclType	int		61120	0					
ANR	61168	Identifier	err		61120	1					
ANR	61169	AssignmentExpression	err = CRYPTO_ERROR		61120	2		=			
ANR	61170	Identifier	CRYPTO_ERROR		61120	0					
ANR	61171	Identifier	CRYPTO_ERROR		61120	1					
ANR	61172	IdentifierDeclStatement	size_t salt_ofst = 0 ;	500:4:14912:14933	61120	7	True				
ANR	61173	IdentifierDecl	salt_ofst = 0		61120	0					
ANR	61174	IdentifierDeclType	size_t		61120	0					
ANR	61175	Identifier	salt_ofst		61120	1					
ANR	61176	AssignmentExpression	salt_ofst = 0		61120	2		=			
ANR	61177	Identifier	salt_ofst		61120	0					
ANR	61178	PrimaryExpression	0		61120	1					
ANR	61179	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	501:4:14939:14974	61120	8	True				
ANR	61180	IdentifierDecl	salt_len = cipher -> key_len		61120	0					
ANR	61181	IdentifierDeclType	size_t		61120	0					
ANR	61182	Identifier	salt_len		61120	1					
ANR	61183	AssignmentExpression	salt_len = cipher -> key_len		61120	2		=			
ANR	61184	Identifier	salt_len		61120	0					
ANR	61185	PtrMemberAccess	cipher -> key_len		61120	1					
ANR	61186	Identifier	cipher		61120	0					
ANR	61187	Identifier	key_len		61120	1					
ANR	61188	IdentifierDeclStatement	size_t tag_len = cipher -> tag_len ;	502:4:14980:15015	61120	9	True				
ANR	61189	IdentifierDecl	tag_len = cipher -> tag_len		61120	0					
ANR	61190	IdentifierDeclType	size_t		61120	0					
ANR	61191	Identifier	tag_len		61120	1					
ANR	61192	AssignmentExpression	tag_len = cipher -> tag_len		61120	2		=			
ANR	61193	Identifier	tag_len		61120	0					
ANR	61194	PtrMemberAccess	cipher -> tag_len		61120	1					
ANR	61195	Identifier	cipher		61120	0					
ANR	61196	Identifier	tag_len		61120	1					
ANR	61197	IfStatement	if ( ! cipher_ctx -> init )		61120	10					
ANR	61198	Condition	! cipher_ctx -> init	504:8:15026:15042	61120	0	True				
ANR	61199	UnaryOperationExpression	! cipher_ctx -> init		61120	0					
ANR	61200	UnaryOperator	!		61120	0					
ANR	61201	PtrMemberAccess	cipher_ctx -> init		61120	1					
ANR	61202	Identifier	cipher_ctx		61120	0					
ANR	61203	Identifier	init		61120	1					
ANR	61204	CompoundStatement		18:27:414:414	61120	1					
ANR	61205	ExpressionStatement	salt_ofst = salt_len	505:8:15055:15075	61120	0	True				
ANR	61206	AssignmentExpression	salt_ofst = salt_len		61120	0		=			
ANR	61207	Identifier	salt_ofst		61120	0					
ANR	61208	Identifier	salt_len		61120	1					
ANR	61209	IdentifierDeclStatement	size_t out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN ;	508:4:15088:15162	61120	11	True				
ANR	61210	IdentifierDecl	out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		61120	0					
ANR	61211	IdentifierDeclType	size_t		61120	0					
ANR	61212	Identifier	out_len		61120	1					
ANR	61213	AssignmentExpression	out_len = salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		61120	2		=			
ANR	61214	Identifier	out_len		61120	0					
ANR	61215	AdditiveExpression	salt_ofst + 2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		61120	1		+			
ANR	61216	Identifier	salt_ofst		61120	0					
ANR	61217	AdditiveExpression	2 * tag_len + plaintext -> len + CHUNK_SIZE_LEN		61120	1		+			
ANR	61218	MultiplicativeExpression	2 * tag_len		61120	0		*			
ANR	61219	PrimaryExpression	2		61120	0					
ANR	61220	Identifier	tag_len		61120	1					
ANR	61221	AdditiveExpression	plaintext -> len + CHUNK_SIZE_LEN		61120	1		+			
ANR	61222	PtrMemberAccess	plaintext -> len		61120	0					
ANR	61223	Identifier	plaintext		61120	0					
ANR	61224	Identifier	len		61120	1					
ANR	61225	Identifier	CHUNK_SIZE_LEN		61120	1					
ANR	61226	ExpressionStatement	"brealloc ( & tmp , out_len , capacity )"	509:4:15168:15201	61120	12	True				
ANR	61227	CallExpression	"brealloc ( & tmp , out_len , capacity )"		61120	0					
ANR	61228	Callee	brealloc		61120	0					
ANR	61229	Identifier	brealloc		61120	0					
ANR	61230	ArgumentList	& tmp		61120	1					
ANR	61231	Argument	& tmp		61120	0					
ANR	61232	UnaryOperationExpression	& tmp		61120	0					
ANR	61233	UnaryOperator	&		61120	0					
ANR	61234	Identifier	tmp		61120	1					
ANR	61235	Argument	out_len		61120	1					
ANR	61236	Identifier	out_len		61120	0					
ANR	61237	Argument	capacity		61120	2					
ANR	61238	Identifier	capacity		61120	0					
ANR	61239	ExpressionStatement	ciphertext = & tmp	510:4:15207:15229	61120	13	True				
ANR	61240	AssignmentExpression	ciphertext = & tmp		61120	0		=			
ANR	61241	Identifier	ciphertext		61120	0					
ANR	61242	UnaryOperationExpression	& tmp		61120	1					
ANR	61243	UnaryOperator	&		61120	0					
ANR	61244	Identifier	tmp		61120	1					
ANR	61245	ExpressionStatement	ciphertext -> len = out_len	511:4:15235:15260	61120	14	True				
ANR	61246	AssignmentExpression	ciphertext -> len = out_len		61120	0		=			
ANR	61247	PtrMemberAccess	ciphertext -> len		61120	0					
ANR	61248	Identifier	ciphertext		61120	0					
ANR	61249	Identifier	len		61120	1					
ANR	61250	Identifier	out_len		61120	1					
ANR	61251	IfStatement	if ( ! cipher_ctx -> init )		61120	15					
ANR	61252	Condition	! cipher_ctx -> init	513:8:15271:15287	61120	0	True				
ANR	61253	UnaryOperationExpression	! cipher_ctx -> init		61120	0					
ANR	61254	UnaryOperator	!		61120	0					
ANR	61255	PtrMemberAccess	cipher_ctx -> init		61120	1					
ANR	61256	Identifier	cipher_ctx		61120	0					
ANR	61257	Identifier	init		61120	1					
ANR	61258	CompoundStatement		27:27:659:659	61120	1					
ANR	61259	ExpressionStatement	"memcpy ( ciphertext -> data , cipher_ctx -> salt , salt_len )"	514:8:15300:15352	61120	0	True				
ANR	61260	CallExpression	"memcpy ( ciphertext -> data , cipher_ctx -> salt , salt_len )"		61120	0					
ANR	61261	Callee	memcpy		61120	0					
ANR	61262	Identifier	memcpy		61120	0					
ANR	61263	ArgumentList	ciphertext -> data		61120	1					
ANR	61264	Argument	ciphertext -> data		61120	0					
ANR	61265	PtrMemberAccess	ciphertext -> data		61120	0					
ANR	61266	Identifier	ciphertext		61120	0					
ANR	61267	Identifier	data		61120	1					
ANR	61268	Argument	cipher_ctx -> salt		61120	1					
ANR	61269	PtrMemberAccess	cipher_ctx -> salt		61120	0					
ANR	61270	Identifier	cipher_ctx		61120	0					
ANR	61271	Identifier	salt		61120	1					
ANR	61272	Argument	salt_len		61120	2					
ANR	61273	Identifier	salt_len		61120	0					
ANR	61274	ExpressionStatement	"aead_cipher_ctx_set_key ( cipher_ctx , 1 )"	515:8:15362:15400	61120	1	True				
ANR	61275	CallExpression	"aead_cipher_ctx_set_key ( cipher_ctx , 1 )"		61120	0					
ANR	61276	Callee	aead_cipher_ctx_set_key		61120	0					
ANR	61277	Identifier	aead_cipher_ctx_set_key		61120	0					
ANR	61278	ArgumentList	cipher_ctx		61120	1					
ANR	61279	Argument	cipher_ctx		61120	0					
ANR	61280	Identifier	cipher_ctx		61120	0					
ANR	61281	Argument	1		61120	1					
ANR	61282	PrimaryExpression	1		61120	0					
ANR	61283	ExpressionStatement	cipher_ctx -> init = 1	516:8:15410:15430	61120	2	True				
ANR	61284	AssignmentExpression	cipher_ctx -> init = 1		61120	0		=			
ANR	61285	PtrMemberAccess	cipher_ctx -> init		61120	0					
ANR	61286	Identifier	cipher_ctx		61120	0					
ANR	61287	Identifier	init		61120	1					
ANR	61288	PrimaryExpression	1		61120	1					
ANR	61289	ExpressionStatement	"err = aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"	519:4:15443:15670	61120	16	True				
ANR	61290	AssignmentExpression	"err = aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"		61120	0		=			
ANR	61291	Identifier	err		61120	0					
ANR	61292	CallExpression	"aead_chunk_encrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data , ( uint8_t * ) ciphertext -> data + salt_ofst , cipher_ctx -> nonce , plaintext -> len )"		61120	1					
ANR	61293	Callee	aead_chunk_encrypt		61120	0					
ANR	61294	Identifier	aead_chunk_encrypt		61120	0					
ANR	61295	ArgumentList	cipher_ctx		61120	1					
ANR	61296	Argument	cipher_ctx		61120	0					
ANR	61297	Identifier	cipher_ctx		61120	0					
ANR	61298	Argument	( uint8_t * ) plaintext -> data		61120	1					
ANR	61299	CastExpression	( uint8_t * ) plaintext -> data		61120	0					
ANR	61300	CastTarget	uint8_t *		61120	0					
ANR	61301	PtrMemberAccess	plaintext -> data		61120	1					
ANR	61302	Identifier	plaintext		61120	0					
ANR	61303	Identifier	data		61120	1					
ANR	61304	Argument	( uint8_t * ) ciphertext -> data + salt_ofst		61120	2					
ANR	61305	AdditiveExpression	( uint8_t * ) ciphertext -> data + salt_ofst		61120	0		+			
ANR	61306	CastExpression	( uint8_t * ) ciphertext -> data		61120	0					
ANR	61307	CastTarget	uint8_t *		61120	0					
ANR	61308	PtrMemberAccess	ciphertext -> data		61120	1					
ANR	61309	Identifier	ciphertext		61120	0					
ANR	61310	Identifier	data		61120	1					
ANR	61311	Identifier	salt_ofst		61120	1					
ANR	61312	Argument	cipher_ctx -> nonce		61120	3					
ANR	61313	PtrMemberAccess	cipher_ctx -> nonce		61120	0					
ANR	61314	Identifier	cipher_ctx		61120	0					
ANR	61315	Identifier	nonce		61120	1					
ANR	61316	Argument	plaintext -> len		61120	4					
ANR	61317	PtrMemberAccess	plaintext -> len		61120	0					
ANR	61318	Identifier	plaintext		61120	0					
ANR	61319	Identifier	len		61120	1					
ANR	61320	IfStatement	if ( err )		61120	17					
ANR	61321	Condition	err	523:8:15680:15682	61120	0	True				
ANR	61322	Identifier	err		61120	0					
ANR	61323	ReturnStatement	return err ;	524:8:15693:15703	61120	1	True				
ANR	61324	Identifier	err		61120	0					
ANR	61325	ExpressionStatement	"brealloc ( plaintext , ciphertext -> len , capacity )"	526:4:15710:15756	61120	18	True				
ANR	61326	CallExpression	"brealloc ( plaintext , ciphertext -> len , capacity )"		61120	0					
ANR	61327	Callee	brealloc		61120	0					
ANR	61328	Identifier	brealloc		61120	0					
ANR	61329	ArgumentList	plaintext		61120	1					
ANR	61330	Argument	plaintext		61120	0					
ANR	61331	Identifier	plaintext		61120	0					
ANR	61332	Argument	ciphertext -> len		61120	1					
ANR	61333	PtrMemberAccess	ciphertext -> len		61120	0					
ANR	61334	Identifier	ciphertext		61120	0					
ANR	61335	Identifier	len		61120	1					
ANR	61336	Argument	capacity		61120	2					
ANR	61337	Identifier	capacity		61120	0					
ANR	61338	ExpressionStatement	"memcpy ( plaintext -> data , ciphertext -> data , ciphertext -> len )"	527:4:15762:15820	61120	19	True				
ANR	61339	CallExpression	"memcpy ( plaintext -> data , ciphertext -> data , ciphertext -> len )"		61120	0					
ANR	61340	Callee	memcpy		61120	0					
ANR	61341	Identifier	memcpy		61120	0					
ANR	61342	ArgumentList	plaintext -> data		61120	1					
ANR	61343	Argument	plaintext -> data		61120	0					
ANR	61344	PtrMemberAccess	plaintext -> data		61120	0					
ANR	61345	Identifier	plaintext		61120	0					
ANR	61346	Identifier	data		61120	1					
ANR	61347	Argument	ciphertext -> data		61120	1					
ANR	61348	PtrMemberAccess	ciphertext -> data		61120	0					
ANR	61349	Identifier	ciphertext		61120	0					
ANR	61350	Identifier	data		61120	1					
ANR	61351	Argument	ciphertext -> len		61120	2					
ANR	61352	PtrMemberAccess	ciphertext -> len		61120	0					
ANR	61353	Identifier	ciphertext		61120	0					
ANR	61354	Identifier	len		61120	1					
ANR	61355	ExpressionStatement	plaintext -> len = ciphertext -> len	528:4:15826:15858	61120	20	True				
ANR	61356	AssignmentExpression	plaintext -> len = ciphertext -> len		61120	0		=			
ANR	61357	PtrMemberAccess	plaintext -> len		61120	0					
ANR	61358	Identifier	plaintext		61120	0					
ANR	61359	Identifier	len		61120	1					
ANR	61360	PtrMemberAccess	ciphertext -> len		61120	1					
ANR	61361	Identifier	ciphertext		61120	0					
ANR	61362	Identifier	len		61120	1					
ANR	61363	ReturnStatement	return 0 ;	530:4:15865:15873	61120	21	True				
ANR	61364	PrimaryExpression	0		61120	0					
ANR	61365	ReturnType	int		61120	1					
ANR	61366	Identifier	aead_encrypt		61120	2					
ANR	61367	ParameterList	"buffer_t * plaintext , cipher_ctx_t * cipher_ctx , size_t capacity"		61120	3					
ANR	61368	Parameter	buffer_t * plaintext	486:13:14566:14584	61120	0	True				
ANR	61369	ParameterType	buffer_t *		61120	0					
ANR	61370	Identifier	plaintext		61120	1					
ANR	61371	Parameter	cipher_ctx_t * cipher_ctx	486:34:14587:14610	61120	1	True				
ANR	61372	ParameterType	cipher_ctx_t *		61120	0					
ANR	61373	Identifier	cipher_ctx		61120	1					
ANR	61374	Parameter	size_t capacity	486:60:14613:14627	61120	2	True				
ANR	61375	ParameterType	size_t		61120	0					
ANR	61376	Identifier	capacity		61120	1					
ANR	61377	CFGEntryNode	ENTRY		61120		True				
ANR	61378	CFGExitNode	EXIT		61120		True				
ANR	61379	Symbol	aead_chunk_encrypt		61120						
ANR	61380	Symbol	cipher_ctx -> cipher		61120						
ANR	61381	Symbol	tag_len		61120						
ANR	61382	Symbol	CRYPTO_ERROR		61120						
ANR	61383	Symbol	CRYPTO_OK		61120						
ANR	61384	Symbol	CHUNK_SIZE_LEN		61120						
ANR	61385	Symbol	cipher_ctx -> init		61120						
ANR	61386	Symbol	cipher_ctx -> nonce		61120						
ANR	61387	Symbol	capacity		61120						
ANR	61388	Symbol	salt_ofst		61120						
ANR	61389	Symbol	* plaintext		61120						
ANR	61390	Symbol	salt_len		61120						
ANR	61391	Symbol	tmp		61120						
ANR	61392	Symbol	plaintext -> data		61120						
ANR	61393	Symbol	cipher		61120						
ANR	61394	Symbol	ciphertext		61120						
ANR	61395	Symbol	ciphertext -> len		61120						
ANR	61396	Symbol	cipher_ctx		61120						
ANR	61397	Symbol	NULL		61120						
ANR	61398	Symbol	err		61120						
ANR	61399	Symbol	* cipher_ctx		61120						
ANR	61400	Symbol	* cipher		61120						
ANR	61401	Symbol	cipher -> tag_len		61120						
ANR	61402	Symbol	plaintext		61120						
ANR	61403	Symbol	out_len		61120						
ANR	61404	Symbol	plaintext -> len		61120						
ANR	61405	Symbol	cipher -> key_len		61120						
ANR	61406	Symbol	cipher_ctx -> salt		61120						
ANR	61407	Symbol	ciphertext -> data		61120						
ANR	61408	Symbol	& tmp		61120						
ANR	61409	Symbol	* ciphertext		61120						
ANR	61410	Function	aead_chunk_decrypt	533:0:15878:17089							
ANR	61411	FunctionDef	"aead_chunk_decrypt (cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , size_t * plen , size_t * clen)"		61410	0					
ANR	61412	CompoundStatement		536:0:16010:17089	61410	0					
ANR	61413	IdentifierDeclStatement	int err ;	537:4:16016:16023	61410	0	True				
ANR	61414	IdentifierDecl	err		61410	0					
ANR	61415	IdentifierDeclType	int		61410	0					
ANR	61416	Identifier	err		61410	1					
ANR	61417	IdentifierDeclStatement	size_t mlen ;	538:4:16029:16040	61410	1	True				
ANR	61418	IdentifierDecl	mlen		61410	0					
ANR	61419	IdentifierDeclType	size_t		61410	0					
ANR	61420	Identifier	mlen		61410	1					
ANR	61421	IdentifierDeclStatement	size_t nlen = ctx -> cipher -> nonce_len ;	539:4:16046:16082	61410	2	True				
ANR	61422	IdentifierDecl	nlen = ctx -> cipher -> nonce_len		61410	0					
ANR	61423	IdentifierDeclType	size_t		61410	0					
ANR	61424	Identifier	nlen		61410	1					
ANR	61425	AssignmentExpression	nlen = ctx -> cipher -> nonce_len		61410	2		=			
ANR	61426	Identifier	nlen		61410	0					
ANR	61427	PtrMemberAccess	ctx -> cipher -> nonce_len		61410	1					
ANR	61428	PtrMemberAccess	ctx -> cipher		61410	0					
ANR	61429	Identifier	ctx		61410	0					
ANR	61430	Identifier	cipher		61410	1					
ANR	61431	Identifier	nonce_len		61410	1					
ANR	61432	IdentifierDeclStatement	size_t tlen = ctx -> cipher -> tag_len ;	540:4:16088:16122	61410	3	True				
ANR	61433	IdentifierDecl	tlen = ctx -> cipher -> tag_len		61410	0					
ANR	61434	IdentifierDeclType	size_t		61410	0					
ANR	61435	Identifier	tlen		61410	1					
ANR	61436	AssignmentExpression	tlen = ctx -> cipher -> tag_len		61410	2		=			
ANR	61437	Identifier	tlen		61410	0					
ANR	61438	PtrMemberAccess	ctx -> cipher -> tag_len		61410	1					
ANR	61439	PtrMemberAccess	ctx -> cipher		61410	0					
ANR	61440	Identifier	ctx		61410	0					
ANR	61441	Identifier	cipher		61410	1					
ANR	61442	Identifier	tag_len		61410	1					
ANR	61443	IfStatement	if ( * clen <= 2 * tlen + CHUNK_SIZE_LEN )		61410	4					
ANR	61444	Condition	* clen <= 2 * tlen + CHUNK_SIZE_LEN	542:8:16133:16166	61410	0	True				
ANR	61445	RelationalExpression	* clen <= 2 * tlen + CHUNK_SIZE_LEN		61410	0		<=			
ANR	61446	UnaryOperationExpression	* clen		61410	0					
ANR	61447	UnaryOperator	*		61410	0					
ANR	61448	Identifier	clen		61410	1					
ANR	61449	AdditiveExpression	2 * tlen + CHUNK_SIZE_LEN		61410	1		+			
ANR	61450	MultiplicativeExpression	2 * tlen		61410	0		*			
ANR	61451	PrimaryExpression	2		61410	0					
ANR	61452	Identifier	tlen		61410	1					
ANR	61453	Identifier	CHUNK_SIZE_LEN		61410	1					
ANR	61454	ReturnStatement	return CRYPTO_NEED_MORE ;	543:8:16177:16200	61410	1	True				
ANR	61455	Identifier	CRYPTO_NEED_MORE		61410	0					
ANR	61456	IdentifierDeclStatement	uint8_t len_buf [ 2 ] ;	545:4:16207:16225	61410	5	True				
ANR	61457	IdentifierDecl	len_buf [ 2 ]		61410	0					
ANR	61458	IdentifierDeclType	uint8_t [ 2 ]		61410	0					
ANR	61459	Identifier	len_buf		61410	1					
ANR	61460	PrimaryExpression	2		61410	2					
ANR	61461	ExpressionStatement	"err = aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"	546:4:16231:16355	61410	6	True				
ANR	61462	AssignmentExpression	"err = aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"		61410	0		=			
ANR	61463	Identifier	err		61410	0					
ANR	61464	CallExpression	"aead_cipher_decrypt ( ctx , len_buf , plen , c , CHUNK_SIZE_LEN + tlen , NULL , 0 , n , ctx -> skey )"		61410	1					
ANR	61465	Callee	aead_cipher_decrypt		61410	0					
ANR	61466	Identifier	aead_cipher_decrypt		61410	0					
ANR	61467	ArgumentList	ctx		61410	1					
ANR	61468	Argument	ctx		61410	0					
ANR	61469	Identifier	ctx		61410	0					
ANR	61470	Argument	len_buf		61410	1					
ANR	61471	Identifier	len_buf		61410	0					
ANR	61472	Argument	plen		61410	2					
ANR	61473	Identifier	plen		61410	0					
ANR	61474	Argument	c		61410	3					
ANR	61475	Identifier	c		61410	0					
ANR	61476	Argument	CHUNK_SIZE_LEN + tlen		61410	4					
ANR	61477	AdditiveExpression	CHUNK_SIZE_LEN + tlen		61410	0		+			
ANR	61478	Identifier	CHUNK_SIZE_LEN		61410	0					
ANR	61479	Identifier	tlen		61410	1					
ANR	61480	Argument	NULL		61410	5					
ANR	61481	Identifier	NULL		61410	0					
ANR	61482	Argument	0		61410	6					
ANR	61483	PrimaryExpression	0		61410	0					
ANR	61484	Argument	n		61410	7					
ANR	61485	Identifier	n		61410	0					
ANR	61486	Argument	ctx -> skey		61410	8					
ANR	61487	PtrMemberAccess	ctx -> skey		61410	0					
ANR	61488	Identifier	ctx		61410	0					
ANR	61489	Identifier	skey		61410	1					
ANR	61490	IfStatement	if ( err )		61410	7					
ANR	61491	Condition	err	548:8:16365:16367	61410	0	True				
ANR	61492	Identifier	err		61410	0					
ANR	61493	ReturnStatement	return CRYPTO_ERROR ;	549:8:16378:16397	61410	1	True				
ANR	61494	Identifier	CRYPTO_ERROR		61410	0					
ANR	61495	ExpressionStatement	assert ( * plen == CHUNK_SIZE_LEN )	550:4:16403:16434	61410	8	True				
ANR	61496	CallExpression	assert ( * plen == CHUNK_SIZE_LEN )		61410	0					
ANR	61497	Callee	assert		61410	0					
ANR	61498	Identifier	assert		61410	0					
ANR	61499	ArgumentList	* plen == CHUNK_SIZE_LEN		61410	1					
ANR	61500	Argument	* plen == CHUNK_SIZE_LEN		61410	0					
ANR	61501	EqualityExpression	* plen == CHUNK_SIZE_LEN		61410	0		==			
ANR	61502	UnaryOperationExpression	* plen		61410	0					
ANR	61503	UnaryOperator	*		61410	0					
ANR	61504	Identifier	plen		61410	1					
ANR	61505	Identifier	CHUNK_SIZE_LEN		61410	1					
ANR	61506	ExpressionStatement	mlen = ntohs ( * ( uint16_t * ) len_buf )	552:4:16441:16475	61410	9	True				
ANR	61507	AssignmentExpression	mlen = ntohs ( * ( uint16_t * ) len_buf )		61410	0		=			
ANR	61508	Identifier	mlen		61410	0					
ANR	61509	CallExpression	ntohs ( * ( uint16_t * ) len_buf )		61410	1					
ANR	61510	Callee	ntohs		61410	0					
ANR	61511	Identifier	ntohs		61410	0					
ANR	61512	ArgumentList	* ( uint16_t * ) len_buf		61410	1					
ANR	61513	Argument	* ( uint16_t * ) len_buf		61410	0					
ANR	61514	UnaryOperationExpression	* ( uint16_t * ) len_buf		61410	0					
ANR	61515	UnaryOperator	*		61410	0					
ANR	61516	CastExpression	( uint16_t * ) len_buf		61410	1					
ANR	61517	CastTarget	uint16_t *		61410	0					
ANR	61518	Identifier	len_buf		61410	1					
ANR	61519	ExpressionStatement	mlen = mlen & CHUNK_SIZE_MASK	553:4:16481:16510	61410	10	True				
ANR	61520	AssignmentExpression	mlen = mlen & CHUNK_SIZE_MASK		61410	0		=			
ANR	61521	Identifier	mlen		61410	0					
ANR	61522	BitAndExpression	mlen & CHUNK_SIZE_MASK		61410	1		&			
ANR	61523	Identifier	mlen		61410	0					
ANR	61524	Identifier	CHUNK_SIZE_MASK		61410	1					
ANR	61525	IfStatement	if ( mlen == 0 )		61410	11					
ANR	61526	Condition	mlen == 0	555:8:16521:16529	61410	0	True				
ANR	61527	EqualityExpression	mlen == 0		61410	0		==			
ANR	61528	Identifier	mlen		61410	0					
ANR	61529	PrimaryExpression	0		61410	1					
ANR	61530	ReturnStatement	return CRYPTO_ERROR ;	556:8:16540:16559	61410	1	True				
ANR	61531	Identifier	CRYPTO_ERROR		61410	0					
ANR	61532	IdentifierDeclStatement	size_t chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen ;	558:4:16566:16617	61410	12	True				
ANR	61533	IdentifierDecl	chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen		61410	0					
ANR	61534	IdentifierDeclType	size_t		61410	0					
ANR	61535	Identifier	chunk_len		61410	1					
ANR	61536	AssignmentExpression	chunk_len = 2 * tlen + CHUNK_SIZE_LEN + mlen		61410	2		=			
ANR	61537	Identifier	chunk_len		61410	0					
ANR	61538	AdditiveExpression	2 * tlen + CHUNK_SIZE_LEN + mlen		61410	1		+			
ANR	61539	MultiplicativeExpression	2 * tlen		61410	0		*			
ANR	61540	PrimaryExpression	2		61410	0					
ANR	61541	Identifier	tlen		61410	1					
ANR	61542	AdditiveExpression	CHUNK_SIZE_LEN + mlen		61410	1		+			
ANR	61543	Identifier	CHUNK_SIZE_LEN		61410	0					
ANR	61544	Identifier	mlen		61410	1					
ANR	61545	IfStatement	if ( * clen < chunk_len )		61410	13					
ANR	61546	Condition	* clen < chunk_len	560:8:16628:16644	61410	0	True				
ANR	61547	RelationalExpression	* clen < chunk_len		61410	0		<			
ANR	61548	UnaryOperationExpression	* clen		61410	0					
ANR	61549	UnaryOperator	*		61410	0					
ANR	61550	Identifier	clen		61410	1					
ANR	61551	Identifier	chunk_len		61410	1					
ANR	61552	ReturnStatement	return CRYPTO_NEED_MORE ;	561:8:16655:16678	61410	1	True				
ANR	61553	Identifier	CRYPTO_NEED_MORE		61410	0					
ANR	61554	ExpressionStatement	"sodium_increment ( n , nlen )"	563:4:16685:16710	61410	14	True				
ANR	61555	CallExpression	"sodium_increment ( n , nlen )"		61410	0					
ANR	61556	Callee	sodium_increment		61410	0					
ANR	61557	Identifier	sodium_increment		61410	0					
ANR	61558	ArgumentList	n		61410	1					
ANR	61559	Argument	n		61410	0					
ANR	61560	Identifier	n		61410	0					
ANR	61561	Argument	nlen		61410	1					
ANR	61562	Identifier	nlen		61410	0					
ANR	61563	ExpressionStatement	"err = aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"	565:4:16717:16849	61410	15	True				
ANR	61564	AssignmentExpression	"err = aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"		61410	0		=			
ANR	61565	Identifier	err		61410	0					
ANR	61566	CallExpression	"aead_cipher_decrypt ( ctx , p , plen , c + CHUNK_SIZE_LEN + tlen , mlen + tlen , NULL , 0 , n , ctx -> skey )"		61410	1					
ANR	61567	Callee	aead_cipher_decrypt		61410	0					
ANR	61568	Identifier	aead_cipher_decrypt		61410	0					
ANR	61569	ArgumentList	ctx		61410	1					
ANR	61570	Argument	ctx		61410	0					
ANR	61571	Identifier	ctx		61410	0					
ANR	61572	Argument	p		61410	1					
ANR	61573	Identifier	p		61410	0					
ANR	61574	Argument	plen		61410	2					
ANR	61575	Identifier	plen		61410	0					
ANR	61576	Argument	c + CHUNK_SIZE_LEN + tlen		61410	3					
ANR	61577	AdditiveExpression	c + CHUNK_SIZE_LEN + tlen		61410	0		+			
ANR	61578	Identifier	c		61410	0					
ANR	61579	AdditiveExpression	CHUNK_SIZE_LEN + tlen		61410	1		+			
ANR	61580	Identifier	CHUNK_SIZE_LEN		61410	0					
ANR	61581	Identifier	tlen		61410	1					
ANR	61582	Argument	mlen + tlen		61410	4					
ANR	61583	AdditiveExpression	mlen + tlen		61410	0		+			
ANR	61584	Identifier	mlen		61410	0					
ANR	61585	Identifier	tlen		61410	1					
ANR	61586	Argument	NULL		61410	5					
ANR	61587	Identifier	NULL		61410	0					
ANR	61588	Argument	0		61410	6					
ANR	61589	PrimaryExpression	0		61410	0					
ANR	61590	Argument	n		61410	7					
ANR	61591	Identifier	n		61410	0					
ANR	61592	Argument	ctx -> skey		61410	8					
ANR	61593	PtrMemberAccess	ctx -> skey		61410	0					
ANR	61594	Identifier	ctx		61410	0					
ANR	61595	Identifier	skey		61410	1					
ANR	61596	IfStatement	if ( err )		61410	16					
ANR	61597	Condition	err	567:8:16859:16861	61410	0	True				
ANR	61598	Identifier	err		61410	0					
ANR	61599	ReturnStatement	return CRYPTO_ERROR ;	568:8:16872:16891	61410	1	True				
ANR	61600	Identifier	CRYPTO_ERROR		61410	0					
ANR	61601	ExpressionStatement	assert ( * plen == mlen )	569:4:16897:16918	61410	17	True				
ANR	61602	CallExpression	assert ( * plen == mlen )		61410	0					
ANR	61603	Callee	assert		61410	0					
ANR	61604	Identifier	assert		61410	0					
ANR	61605	ArgumentList	* plen == mlen		61410	1					
ANR	61606	Argument	* plen == mlen		61410	0					
ANR	61607	EqualityExpression	* plen == mlen		61410	0		==			
ANR	61608	UnaryOperationExpression	* plen		61410	0					
ANR	61609	UnaryOperator	*		61410	0					
ANR	61610	Identifier	plen		61410	1					
ANR	61611	Identifier	mlen		61410	1					
ANR	61612	ExpressionStatement	"sodium_increment ( n , nlen )"	571:4:16925:16950	61410	18	True				
ANR	61613	CallExpression	"sodium_increment ( n , nlen )"		61410	0					
ANR	61614	Callee	sodium_increment		61410	0					
ANR	61615	Identifier	sodium_increment		61410	0					
ANR	61616	ArgumentList	n		61410	1					
ANR	61617	Argument	n		61410	0					
ANR	61618	Identifier	n		61410	0					
ANR	61619	Argument	nlen		61410	1					
ANR	61620	Identifier	nlen		61410	0					
ANR	61621	IfStatement	if ( * clen > chunk_len )		61410	19					
ANR	61622	Condition	* clen > chunk_len	573:8:16961:16977	61410	0	True				
ANR	61623	RelationalExpression	* clen > chunk_len		61410	0		>			
ANR	61624	UnaryOperationExpression	* clen		61410	0					
ANR	61625	UnaryOperator	*		61410	0					
ANR	61626	Identifier	clen		61410	1					
ANR	61627	Identifier	chunk_len		61410	1					
ANR	61628	ExpressionStatement	"memmove ( c , c + chunk_len , * clen - chunk_len )"	574:8:16988:17032	61410	1	True				
ANR	61629	CallExpression	"memmove ( c , c + chunk_len , * clen - chunk_len )"		61410	0					
ANR	61630	Callee	memmove		61410	0					
ANR	61631	Identifier	memmove		61410	0					
ANR	61632	ArgumentList	c		61410	1					
ANR	61633	Argument	c		61410	0					
ANR	61634	Identifier	c		61410	0					
ANR	61635	Argument	c + chunk_len		61410	1					
ANR	61636	AdditiveExpression	c + chunk_len		61410	0		+			
ANR	61637	Identifier	c		61410	0					
ANR	61638	Identifier	chunk_len		61410	1					
ANR	61639	Argument	* clen - chunk_len		61410	2					
ANR	61640	AdditiveExpression	* clen - chunk_len		61410	0		-			
ANR	61641	UnaryOperationExpression	* clen		61410	0					
ANR	61642	UnaryOperator	*		61410	0					
ANR	61643	Identifier	clen		61410	1					
ANR	61644	Identifier	chunk_len		61410	1					
ANR	61645	ExpressionStatement	* clen = * clen - chunk_len	576:4:17039:17064	61410	20	True				
ANR	61646	AssignmentExpression	* clen = * clen - chunk_len		61410	0		=			
ANR	61647	UnaryOperationExpression	* clen		61410	0					
ANR	61648	UnaryOperator	*		61410	0					
ANR	61649	Identifier	clen		61410	1					
ANR	61650	AdditiveExpression	* clen - chunk_len		61410	1		-			
ANR	61651	UnaryOperationExpression	* clen		61410	0					
ANR	61652	UnaryOperator	*		61410	0					
ANR	61653	Identifier	clen		61410	1					
ANR	61654	Identifier	chunk_len		61410	1					
ANR	61655	ReturnStatement	return CRYPTO_OK ;	578:4:17071:17087	61410	21	True				
ANR	61656	Identifier	CRYPTO_OK		61410	0					
ANR	61657	ReturnType	static int		61410	1					
ANR	61658	Identifier	aead_chunk_decrypt		61410	2					
ANR	61659	ParameterList	"cipher_ctx_t * ctx , uint8_t * p , uint8_t * c , uint8_t * n , size_t * plen , size_t * clen"		61410	3					
ANR	61660	Parameter	cipher_ctx_t * ctx	534:19:15908:15924	61410	0	True				
ANR	61661	ParameterType	cipher_ctx_t *		61410	0					
ANR	61662	Identifier	ctx		61410	1					
ANR	61663	Parameter	uint8_t * p	534:38:15927:15936	61410	1	True				
ANR	61664	ParameterType	uint8_t *		61410	0					
ANR	61665	Identifier	p		61410	1					
ANR	61666	Parameter	uint8_t * c	534:50:15939:15948	61410	2	True				
ANR	61667	ParameterType	uint8_t *		61410	0					
ANR	61668	Identifier	c		61410	1					
ANR	61669	Parameter	uint8_t * n	534:62:15951:15960	61410	3	True				
ANR	61670	ParameterType	uint8_t *		61410	0					
ANR	61671	Identifier	n		61410	1					
ANR	61672	Parameter	size_t * plen	535:19:15982:15993	61410	4	True				
ANR	61673	ParameterType	size_t *		61410	0					
ANR	61674	Identifier	plen		61410	1					
ANR	61675	Parameter	size_t * clen	535:33:15996:16007	61410	5	True				
ANR	61676	ParameterType	size_t *		61410	0					
ANR	61677	Identifier	clen		61410	1					
ANR	61678	CFGEntryNode	ENTRY		61410		True				
ANR	61679	CFGExitNode	EXIT		61410		True				
ANR	61680	Symbol	CRYPTO_NEED_MORE		61410						
ANR	61681	Symbol	CRYPTO_ERROR		61410						
ANR	61682	Symbol	* len_buf		61410						
ANR	61683	Symbol	CRYPTO_OK		61410						
ANR	61684	Symbol	ctx -> cipher -> tag_len		61410						
ANR	61685	Symbol	CHUNK_SIZE_LEN		61410						
ANR	61686	Symbol	* ( uint16_t * ) len_buf		61410						
ANR	61687	Symbol	ctx -> skey		61410						
ANR	61688	Symbol	plen		61410						
ANR	61689	Symbol	nlen		61410						
ANR	61690	Symbol	* clen		61410						
ANR	61691	Symbol	tlen		61410						
ANR	61692	Symbol	CHUNK_SIZE_MASK		61410						
ANR	61693	Symbol	ctx -> cipher -> nonce_len		61410						
ANR	61694	Symbol	c		61410						
ANR	61695	Symbol	* ctx -> cipher		61410						
ANR	61696	Symbol	NULL		61410						
ANR	61697	Symbol	err		61410						
ANR	61698	Symbol	ctx		61410						
ANR	61699	Symbol	aead_cipher_decrypt		61410						
ANR	61700	Symbol	chunk_len		61410						
ANR	61701	Symbol	n		61410						
ANR	61702	Symbol	* ctx		61410						
ANR	61703	Symbol	p		61410						
ANR	61704	Symbol	ntohs		61410						
ANR	61705	Symbol	ctx -> cipher		61410						
ANR	61706	Symbol	* plen		61410						
ANR	61707	Symbol	mlen		61410						
ANR	61708	Symbol	* * ctx		61410						
ANR	61709	Symbol	clen		61410						
ANR	61710	Symbol	len_buf		61410						
ANR	61711	Function	aead_decrypt	581:0:17092:19594							
ANR	61712	FunctionDef	"aead_decrypt (buffer_t * ciphertext , cipher_ctx_t * cipher_ctx , size_t capacity)"		61711	0					
ANR	61713	CompoundStatement		583:0:17174:19594	61711	0					
ANR	61714	IdentifierDeclStatement	int err = CRYPTO_OK ;	584:4:17180:17211	61711	0	True				
ANR	61715	IdentifierDecl	err = CRYPTO_OK		61711	0					
ANR	61716	IdentifierDeclType	int		61711	0					
ANR	61717	Identifier	err		61711	1					
ANR	61718	AssignmentExpression	err = CRYPTO_OK		61711	2		=			
ANR	61719	Identifier	CRYPTO_OK		61711	0					
ANR	61720	Identifier	CRYPTO_OK		61711	1					
ANR	61721	Statement	static	585:4:17217:17222	61711	1	True				
ANR	61722	IdentifierDeclStatement	"buffer_t tmp = { 0 , 0 , 0 , NULL } ;"	585:11:17224:17256	61711	2	True				
ANR	61723	IdentifierDecl	"tmp = { 0 , 0 , 0 , NULL }"		61711	0					
ANR	61724	IdentifierDeclType	buffer_t		61711	0					
ANR	61725	Identifier	tmp		61711	1					
ANR	61726	AssignmentExpression	"tmp = { 0 , 0 , 0 , NULL }"		61711	2		=			
ANR	61727	Identifier	tmp		61711	0					
ANR	61728	InitializerList	0		61711	1					
ANR	61729	PrimaryExpression	0		61711	0					
ANR	61730	PrimaryExpression	0		61711	1					
ANR	61731	PrimaryExpression	0		61711	2					
ANR	61732	Identifier	NULL		61711	3					
ANR	61733	IdentifierDeclStatement	cipher_t * cipher = cipher_ctx -> cipher ;	587:4:17263:17300	61711	3	True				
ANR	61734	IdentifierDecl	* cipher = cipher_ctx -> cipher		61711	0					
ANR	61735	IdentifierDeclType	cipher_t *		61711	0					
ANR	61736	Identifier	cipher		61711	1					
ANR	61737	AssignmentExpression	* cipher = cipher_ctx -> cipher		61711	2		=			
ANR	61738	Identifier	cipher		61711	0					
ANR	61739	PtrMemberAccess	cipher_ctx -> cipher		61711	1					
ANR	61740	Identifier	cipher_ctx		61711	0					
ANR	61741	Identifier	cipher		61711	1					
ANR	61742	IdentifierDeclStatement	size_t salt_len = cipher -> key_len ;	589:4:17307:17341	61711	4	True				
ANR	61743	IdentifierDecl	salt_len = cipher -> key_len		61711	0					
ANR	61744	IdentifierDeclType	size_t		61711	0					
ANR	61745	Identifier	salt_len		61711	1					
ANR	61746	AssignmentExpression	salt_len = cipher -> key_len		61711	2		=			
ANR	61747	Identifier	salt_len		61711	0					
ANR	61748	PtrMemberAccess	cipher -> key_len		61711	1					
ANR	61749	Identifier	cipher		61711	0					
ANR	61750	Identifier	key_len		61711	1					
ANR	61751	IfStatement	if ( cipher_ctx -> chunk == NULL )		61711	5					
ANR	61752	Condition	cipher_ctx -> chunk == NULL	591:8:17352:17376	61711	0	True				
ANR	61753	EqualityExpression	cipher_ctx -> chunk == NULL		61711	0		==			
ANR	61754	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61755	Identifier	cipher_ctx		61711	0					
ANR	61756	Identifier	chunk		61711	1					
ANR	61757	Identifier	NULL		61711	1					
ANR	61758	CompoundStatement		9:35:204:204	61711	1					
ANR	61759	ExpressionStatement	cipher_ctx -> chunk = ( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )	592:8:17389:17448	61711	0	True				
ANR	61760	AssignmentExpression	cipher_ctx -> chunk = ( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )		61711	0		=			
ANR	61761	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61762	Identifier	cipher_ctx		61711	0					
ANR	61763	Identifier	chunk		61711	1					
ANR	61764	CastExpression	( buffer_t * ) ss_malloc ( sizeof ( buffer_t ) )		61711	1					
ANR	61765	CastTarget	buffer_t *		61711	0					
ANR	61766	CallExpression	ss_malloc ( sizeof ( buffer_t ) )		61711	1					
ANR	61767	Callee	ss_malloc		61711	0					
ANR	61768	Identifier	ss_malloc		61711	0					
ANR	61769	ArgumentList	sizeof ( buffer_t )		61711	1					
ANR	61770	Argument	sizeof ( buffer_t )		61711	0					
ANR	61771	SizeofExpression	sizeof ( buffer_t )		61711	0					
ANR	61772	Sizeof	sizeof		61711	0					
ANR	61773	SizeofOperand	buffer_t		61711	1					
ANR	61774	ExpressionStatement	"memset ( cipher_ctx -> chunk , 0 , sizeof ( buffer_t ) )"	593:8:17458:17504	61711	1	True				
ANR	61775	CallExpression	"memset ( cipher_ctx -> chunk , 0 , sizeof ( buffer_t ) )"		61711	0					
ANR	61776	Callee	memset		61711	0					
ANR	61777	Identifier	memset		61711	0					
ANR	61778	ArgumentList	cipher_ctx -> chunk		61711	1					
ANR	61779	Argument	cipher_ctx -> chunk		61711	0					
ANR	61780	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61781	Identifier	cipher_ctx		61711	0					
ANR	61782	Identifier	chunk		61711	1					
ANR	61783	Argument	0		61711	1					
ANR	61784	PrimaryExpression	0		61711	0					
ANR	61785	Argument	sizeof ( buffer_t )		61711	2					
ANR	61786	SizeofExpression	sizeof ( buffer_t )		61711	0					
ANR	61787	Sizeof	sizeof		61711	0					
ANR	61788	SizeofOperand	buffer_t		61711	1					
ANR	61789	ExpressionStatement	"balloc ( cipher_ctx -> chunk , capacity )"	594:8:17514:17549	61711	2	True				
ANR	61790	CallExpression	"balloc ( cipher_ctx -> chunk , capacity )"		61711	0					
ANR	61791	Callee	balloc		61711	0					
ANR	61792	Identifier	balloc		61711	0					
ANR	61793	ArgumentList	cipher_ctx -> chunk		61711	1					
ANR	61794	Argument	cipher_ctx -> chunk		61711	0					
ANR	61795	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61796	Identifier	cipher_ctx		61711	0					
ANR	61797	Identifier	chunk		61711	1					
ANR	61798	Argument	capacity		61711	1					
ANR	61799	Identifier	capacity		61711	0					
ANR	61800	ExpressionStatement	"brealloc ( cipher_ctx -> chunk , cipher_ctx -> chunk -> len + ciphertext -> len , capacity )"	597:4:17562:17654	61711	6	True				
ANR	61801	CallExpression	"brealloc ( cipher_ctx -> chunk , cipher_ctx -> chunk -> len + ciphertext -> len , capacity )"		61711	0					
ANR	61802	Callee	brealloc		61711	0					
ANR	61803	Identifier	brealloc		61711	0					
ANR	61804	ArgumentList	cipher_ctx -> chunk		61711	1					
ANR	61805	Argument	cipher_ctx -> chunk		61711	0					
ANR	61806	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61807	Identifier	cipher_ctx		61711	0					
ANR	61808	Identifier	chunk		61711	1					
ANR	61809	Argument	cipher_ctx -> chunk -> len + ciphertext -> len		61711	1					
ANR	61810	AdditiveExpression	cipher_ctx -> chunk -> len + ciphertext -> len		61711	0		+			
ANR	61811	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61812	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61813	Identifier	cipher_ctx		61711	0					
ANR	61814	Identifier	chunk		61711	1					
ANR	61815	Identifier	len		61711	1					
ANR	61816	PtrMemberAccess	ciphertext -> len		61711	1					
ANR	61817	Identifier	ciphertext		61711	0					
ANR	61818	Identifier	len		61711	1					
ANR	61819	Argument	capacity		61711	2					
ANR	61820	Identifier	capacity		61711	0					
ANR	61821	ExpressionStatement	"memcpy ( cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len , ciphertext -> data , ciphertext -> len )"	599:4:17660:17762	61711	7	True				
ANR	61822	CallExpression	"memcpy ( cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len , ciphertext -> data , ciphertext -> len )"		61711	0					
ANR	61823	Callee	memcpy		61711	0					
ANR	61824	Identifier	memcpy		61711	0					
ANR	61825	ArgumentList	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		61711	1					
ANR	61826	Argument	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		61711	0					
ANR	61827	AdditiveExpression	cipher_ctx -> chunk -> data + cipher_ctx -> chunk -> len		61711	0		+			
ANR	61828	PtrMemberAccess	cipher_ctx -> chunk -> data		61711	0					
ANR	61829	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61830	Identifier	cipher_ctx		61711	0					
ANR	61831	Identifier	chunk		61711	1					
ANR	61832	Identifier	data		61711	1					
ANR	61833	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	1					
ANR	61834	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61835	Identifier	cipher_ctx		61711	0					
ANR	61836	Identifier	chunk		61711	1					
ANR	61837	Identifier	len		61711	1					
ANR	61838	Argument	ciphertext -> data		61711	1					
ANR	61839	PtrMemberAccess	ciphertext -> data		61711	0					
ANR	61840	Identifier	ciphertext		61711	0					
ANR	61841	Identifier	data		61711	1					
ANR	61842	Argument	ciphertext -> len		61711	2					
ANR	61843	PtrMemberAccess	ciphertext -> len		61711	0					
ANR	61844	Identifier	ciphertext		61711	0					
ANR	61845	Identifier	len		61711	1					
ANR	61846	ExpressionStatement	cipher_ctx -> chunk -> len += ciphertext -> len	601:4:17768:17809	61711	8	True				
ANR	61847	AssignmentExpression	cipher_ctx -> chunk -> len += ciphertext -> len		61711	0		+=			
ANR	61848	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61849	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61850	Identifier	cipher_ctx		61711	0					
ANR	61851	Identifier	chunk		61711	1					
ANR	61852	Identifier	len		61711	1					
ANR	61853	PtrMemberAccess	ciphertext -> len		61711	1					
ANR	61854	Identifier	ciphertext		61711	0					
ANR	61855	Identifier	len		61711	1					
ANR	61856	ExpressionStatement	"brealloc ( & tmp , cipher_ctx -> chunk -> len , capacity )"	603:4:17816:17864	61711	9	True				
ANR	61857	CallExpression	"brealloc ( & tmp , cipher_ctx -> chunk -> len , capacity )"		61711	0					
ANR	61858	Callee	brealloc		61711	0					
ANR	61859	Identifier	brealloc		61711	0					
ANR	61860	ArgumentList	& tmp		61711	1					
ANR	61861	Argument	& tmp		61711	0					
ANR	61862	UnaryOperationExpression	& tmp		61711	0					
ANR	61863	UnaryOperator	&		61711	0					
ANR	61864	Identifier	tmp		61711	1					
ANR	61865	Argument	cipher_ctx -> chunk -> len		61711	1					
ANR	61866	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61867	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61868	Identifier	cipher_ctx		61711	0					
ANR	61869	Identifier	chunk		61711	1					
ANR	61870	Identifier	len		61711	1					
ANR	61871	Argument	capacity		61711	2					
ANR	61872	Identifier	capacity		61711	0					
ANR	61873	IdentifierDeclStatement	buffer_t * plaintext = & tmp ;	604:4:17870:17896	61711	10	True				
ANR	61874	IdentifierDecl	* plaintext = & tmp		61711	0					
ANR	61875	IdentifierDeclType	buffer_t *		61711	0					
ANR	61876	Identifier	plaintext		61711	1					
ANR	61877	AssignmentExpression	* plaintext = & tmp		61711	2		=			
ANR	61878	Identifier	plaintext		61711	0					
ANR	61879	UnaryOperationExpression	& tmp		61711	1					
ANR	61880	UnaryOperator	&		61711	0					
ANR	61881	Identifier	tmp		61711	1					
ANR	61882	IfStatement	if ( ! cipher_ctx -> init )		61711	11					
ANR	61883	Condition	! cipher_ctx -> init	606:8:17907:17923	61711	0	True				
ANR	61884	UnaryOperationExpression	! cipher_ctx -> init		61711	0					
ANR	61885	UnaryOperator	!		61711	0					
ANR	61886	PtrMemberAccess	cipher_ctx -> init		61711	1					
ANR	61887	Identifier	cipher_ctx		61711	0					
ANR	61888	Identifier	init		61711	1					
ANR	61889	CompoundStatement		24:27:751:751	61711	1					
ANR	61890	IfStatement	if ( cipher_ctx -> chunk -> len <= salt_len )		61711	0					
ANR	61891	Condition	cipher_ctx -> chunk -> len <= salt_len	607:12:17940:17973	61711	0	True				
ANR	61892	RelationalExpression	cipher_ctx -> chunk -> len <= salt_len		61711	0		<=			
ANR	61893	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61894	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61895	Identifier	cipher_ctx		61711	0					
ANR	61896	Identifier	chunk		61711	1					
ANR	61897	Identifier	len		61711	1					
ANR	61898	Identifier	salt_len		61711	1					
ANR	61899	ReturnStatement	return CRYPTO_NEED_MORE ;	608:12:17988:18011	61711	1	True				
ANR	61900	Identifier	CRYPTO_NEED_MORE		61711	0					
ANR	61901	ExpressionStatement	"memcpy ( cipher_ctx -> salt , cipher_ctx -> chunk -> data , salt_len )"	610:8:18022:18081	61711	1	True				
ANR	61902	CallExpression	"memcpy ( cipher_ctx -> salt , cipher_ctx -> chunk -> data , salt_len )"		61711	0					
ANR	61903	Callee	memcpy		61711	0					
ANR	61904	Identifier	memcpy		61711	0					
ANR	61905	ArgumentList	cipher_ctx -> salt		61711	1					
ANR	61906	Argument	cipher_ctx -> salt		61711	0					
ANR	61907	PtrMemberAccess	cipher_ctx -> salt		61711	0					
ANR	61908	Identifier	cipher_ctx		61711	0					
ANR	61909	Identifier	salt		61711	1					
ANR	61910	Argument	cipher_ctx -> chunk -> data		61711	1					
ANR	61911	PtrMemberAccess	cipher_ctx -> chunk -> data		61711	0					
ANR	61912	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61913	Identifier	cipher_ctx		61711	0					
ANR	61914	Identifier	chunk		61711	1					
ANR	61915	Identifier	data		61711	1					
ANR	61916	Argument	salt_len		61711	2					
ANR	61917	Identifier	salt_len		61711	0					
ANR	61918	ExpressionStatement	"aead_cipher_ctx_set_key ( cipher_ctx , 0 )"	612:8:18092:18130	61711	2	True				
ANR	61919	CallExpression	"aead_cipher_ctx_set_key ( cipher_ctx , 0 )"		61711	0					
ANR	61920	Callee	aead_cipher_ctx_set_key		61711	0					
ANR	61921	Identifier	aead_cipher_ctx_set_key		61711	0					
ANR	61922	ArgumentList	cipher_ctx		61711	1					
ANR	61923	Argument	cipher_ctx		61711	0					
ANR	61924	Identifier	cipher_ctx		61711	0					
ANR	61925	Argument	0		61711	1					
ANR	61926	PrimaryExpression	0		61711	0					
ANR	61927	IfStatement	"if ( ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1 )"		61711	3					
ANR	61928	Condition	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1"	614:12:18145:18198	61711	0	True				
ANR	61929	EqualityExpression	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len ) == 1"		61711	0		==			
ANR	61930	CallExpression	"ppbloom_check ( ( void * ) cipher_ctx -> salt , salt_len )"		61711	0					
ANR	61931	Callee	ppbloom_check		61711	0					
ANR	61932	Identifier	ppbloom_check		61711	0					
ANR	61933	ArgumentList	( void * ) cipher_ctx -> salt		61711	1					
ANR	61934	Argument	( void * ) cipher_ctx -> salt		61711	0					
ANR	61935	CastExpression	( void * ) cipher_ctx -> salt		61711	0					
ANR	61936	CastTarget	void *		61711	0					
ANR	61937	PtrMemberAccess	cipher_ctx -> salt		61711	1					
ANR	61938	Identifier	cipher_ctx		61711	0					
ANR	61939	Identifier	salt		61711	1					
ANR	61940	Argument	salt_len		61711	1					
ANR	61941	Identifier	salt_len		61711	0					
ANR	61942	PrimaryExpression	1		61711	1					
ANR	61943	CompoundStatement		32:68:1026:1026	61711	1					
ANR	61944	ExpressionStatement	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"	615:12:18215:18257	61711	0	True				
ANR	61945	CallExpression	"LOGE ( ""crypto: AEAD: repeat salt detected"" )"		61711	0					
ANR	61946	Callee	LOGE		61711	0					
ANR	61947	Identifier	LOGE		61711	0					
ANR	61948	ArgumentList	"""crypto: AEAD: repeat salt detected"""		61711	1					
ANR	61949	Argument	"""crypto: AEAD: repeat salt detected"""		61711	0					
ANR	61950	PrimaryExpression	"""crypto: AEAD: repeat salt detected"""		61711	0					
ANR	61951	ReturnStatement	return CRYPTO_ERROR ;	616:12:18271:18290	61711	1	True				
ANR	61952	Identifier	CRYPTO_ERROR		61711	0					
ANR	61953	ExpressionStatement	"memmove ( cipher_ctx -> chunk -> data , cipher_ctx -> chunk -> data + salt_len , cipher_ctx -> chunk -> len - salt_len )"	619:8:18311:18430	61711	4	True				
ANR	61954	CallExpression	"memmove ( cipher_ctx -> chunk -> data , cipher_ctx -> chunk -> data + salt_len , cipher_ctx -> chunk -> len - salt_len )"		61711	0					
ANR	61955	Callee	memmove		61711	0					
ANR	61956	Identifier	memmove		61711	0					
ANR	61957	ArgumentList	cipher_ctx -> chunk -> data		61711	1					
ANR	61958	Argument	cipher_ctx -> chunk -> data		61711	0					
ANR	61959	PtrMemberAccess	cipher_ctx -> chunk -> data		61711	0					
ANR	61960	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61961	Identifier	cipher_ctx		61711	0					
ANR	61962	Identifier	chunk		61711	1					
ANR	61963	Identifier	data		61711	1					
ANR	61964	Argument	cipher_ctx -> chunk -> data + salt_len		61711	1					
ANR	61965	AdditiveExpression	cipher_ctx -> chunk -> data + salt_len		61711	0		+			
ANR	61966	PtrMemberAccess	cipher_ctx -> chunk -> data		61711	0					
ANR	61967	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61968	Identifier	cipher_ctx		61711	0					
ANR	61969	Identifier	chunk		61711	1					
ANR	61970	Identifier	data		61711	1					
ANR	61971	Identifier	salt_len		61711	1					
ANR	61972	Argument	cipher_ctx -> chunk -> len - salt_len		61711	2					
ANR	61973	AdditiveExpression	cipher_ctx -> chunk -> len - salt_len		61711	0		-			
ANR	61974	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61975	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61976	Identifier	cipher_ctx		61711	0					
ANR	61977	Identifier	chunk		61711	1					
ANR	61978	Identifier	len		61711	1					
ANR	61979	Identifier	salt_len		61711	1					
ANR	61980	ExpressionStatement	cipher_ctx -> chunk -> len -= salt_len	621:8:18440:18474	61711	5	True				
ANR	61981	AssignmentExpression	cipher_ctx -> chunk -> len -= salt_len		61711	0		-=			
ANR	61982	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	61983	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	61984	Identifier	cipher_ctx		61711	0					
ANR	61985	Identifier	chunk		61711	1					
ANR	61986	Identifier	len		61711	1					
ANR	61987	Identifier	salt_len		61711	1					
ANR	61988	ExpressionStatement	cipher_ctx -> init = 1	623:8:18485:18505	61711	6	True				
ANR	61989	AssignmentExpression	cipher_ctx -> init = 1		61711	0		=			
ANR	61990	PtrMemberAccess	cipher_ctx -> init		61711	0					
ANR	61991	Identifier	cipher_ctx		61711	0					
ANR	61992	Identifier	init		61711	1					
ANR	61993	PrimaryExpression	1		61711	1					
ANR	61994	IdentifierDeclStatement	size_t plen = 0 ;	627:4:18519:18534	61711	12	True				
ANR	61995	IdentifierDecl	plen = 0		61711	0					
ANR	61996	IdentifierDeclType	size_t		61711	0					
ANR	61997	Identifier	plen		61711	1					
ANR	61998	AssignmentExpression	plen = 0		61711	2		=			
ANR	61999	Identifier	plen		61711	0					
ANR	62000	PrimaryExpression	0		61711	1					
ANR	62001	WhileStatement	while ( cipher_ctx -> chunk -> len > 0 )		61711	13					
ANR	62002	Condition	cipher_ctx -> chunk -> len > 0	628:11:18547:18572	61711	0	True				
ANR	62003	RelationalExpression	cipher_ctx -> chunk -> len > 0		61711	0		>			
ANR	62004	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	62005	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	62006	Identifier	cipher_ctx		61711	0					
ANR	62007	Identifier	chunk		61711	1					
ANR	62008	Identifier	len		61711	1					
ANR	62009	PrimaryExpression	0		61711	1					
ANR	62010	CompoundStatement		48:8:1462:1483	61711	1					
ANR	62011	IdentifierDeclStatement	size_t chunk_clen = cipher_ctx -> chunk -> len ;	629:8:18585:18627	61711	0	True				
ANR	62012	IdentifierDecl	chunk_clen = cipher_ctx -> chunk -> len		61711	0					
ANR	62013	IdentifierDeclType	size_t		61711	0					
ANR	62014	Identifier	chunk_clen		61711	1					
ANR	62015	AssignmentExpression	chunk_clen = cipher_ctx -> chunk -> len		61711	2		=			
ANR	62016	Identifier	chunk_clen		61711	0					
ANR	62017	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	1					
ANR	62018	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	62019	Identifier	cipher_ctx		61711	0					
ANR	62020	Identifier	chunk		61711	1					
ANR	62021	Identifier	len		61711	1					
ANR	62022	IdentifierDeclStatement	size_t chunk_plen = 0 ;	630:8:18637:18658	61711	1	True				
ANR	62023	IdentifierDecl	chunk_plen = 0		61711	0					
ANR	62024	IdentifierDeclType	size_t		61711	0					
ANR	62025	Identifier	chunk_plen		61711	1					
ANR	62026	AssignmentExpression	chunk_plen = 0		61711	2		=			
ANR	62027	Identifier	chunk_plen		61711	0					
ANR	62028	PrimaryExpression	0		61711	1					
ANR	62029	ExpressionStatement	"err = aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"	631:8:18668:18919	61711	2	True				
ANR	62030	AssignmentExpression	"err = aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"		61711	0		=			
ANR	62031	Identifier	err		61711	0					
ANR	62032	CallExpression	"aead_chunk_decrypt ( cipher_ctx , ( uint8_t * ) plaintext -> data + plen , ( uint8_t * ) cipher_ctx -> chunk -> data , cipher_ctx -> nonce , & chunk_plen , & chunk_clen )"		61711	1					
ANR	62033	Callee	aead_chunk_decrypt		61711	0					
ANR	62034	Identifier	aead_chunk_decrypt		61711	0					
ANR	62035	ArgumentList	cipher_ctx		61711	1					
ANR	62036	Argument	cipher_ctx		61711	0					
ANR	62037	Identifier	cipher_ctx		61711	0					
ANR	62038	Argument	( uint8_t * ) plaintext -> data + plen		61711	1					
ANR	62039	AdditiveExpression	( uint8_t * ) plaintext -> data + plen		61711	0		+			
ANR	62040	CastExpression	( uint8_t * ) plaintext -> data		61711	0					
ANR	62041	CastTarget	uint8_t *		61711	0					
ANR	62042	PtrMemberAccess	plaintext -> data		61711	1					
ANR	62043	Identifier	plaintext		61711	0					
ANR	62044	Identifier	data		61711	1					
ANR	62045	Identifier	plen		61711	1					
ANR	62046	Argument	( uint8_t * ) cipher_ctx -> chunk -> data		61711	2					
ANR	62047	CastExpression	( uint8_t * ) cipher_ctx -> chunk -> data		61711	0					
ANR	62048	CastTarget	uint8_t *		61711	0					
ANR	62049	PtrMemberAccess	cipher_ctx -> chunk -> data		61711	1					
ANR	62050	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	62051	Identifier	cipher_ctx		61711	0					
ANR	62052	Identifier	chunk		61711	1					
ANR	62053	Identifier	data		61711	1					
ANR	62054	Argument	cipher_ctx -> nonce		61711	3					
ANR	62055	PtrMemberAccess	cipher_ctx -> nonce		61711	0					
ANR	62056	Identifier	cipher_ctx		61711	0					
ANR	62057	Identifier	nonce		61711	1					
ANR	62058	Argument	& chunk_plen		61711	4					
ANR	62059	UnaryOperationExpression	& chunk_plen		61711	0					
ANR	62060	UnaryOperator	&		61711	0					
ANR	62061	Identifier	chunk_plen		61711	1					
ANR	62062	Argument	& chunk_clen		61711	5					
ANR	62063	UnaryOperationExpression	& chunk_clen		61711	0					
ANR	62064	UnaryOperator	&		61711	0					
ANR	62065	Identifier	chunk_clen		61711	1					
ANR	62066	IfStatement	if ( err == CRYPTO_ERROR )		61711	3					
ANR	62067	Condition	err == CRYPTO_ERROR	635:12:18933:18951	61711	0	True				
ANR	62068	EqualityExpression	err == CRYPTO_ERROR		61711	0		==			
ANR	62069	Identifier	err		61711	0					
ANR	62070	Identifier	CRYPTO_ERROR		61711	1					
ANR	62071	CompoundStatement		53:33:1779:1779	61711	1					
ANR	62072	ReturnStatement	return err ;	636:12:18968:18978	61711	0	True				
ANR	62073	Identifier	err		61711	0					
ANR	62074	ElseStatement	else		61711	0					
ANR	62075	IfStatement	if ( err == CRYPTO_NEED_MORE )		61711	0					
ANR	62076	Condition	err == CRYPTO_NEED_MORE	637:19:18999:19021	61711	0	True				
ANR	62077	EqualityExpression	err == CRYPTO_NEED_MORE		61711	0		==			
ANR	62078	Identifier	err		61711	0					
ANR	62079	Identifier	CRYPTO_NEED_MORE		61711	1					
ANR	62080	CompoundStatement		55:44:1849:1849	61711	1					
ANR	62081	IfStatement	if ( plen == 0 )		61711	0					
ANR	62082	Condition	plen == 0	638:16:19042:19050	61711	0	True				
ANR	62083	EqualityExpression	plen == 0		61711	0		==			
ANR	62084	Identifier	plen		61711	0					
ANR	62085	PrimaryExpression	0		61711	1					
ANR	62086	ReturnStatement	return err ;	639:16:19069:19079	61711	1	True				
ANR	62087	Identifier	err		61711	0					
ANR	62088	ElseStatement	else		61711	0					
ANR	62089	BreakStatement	break ;	641:16:19114:19119	61711	0	True				
ANR	62090	ExpressionStatement	cipher_ctx -> chunk -> len = chunk_clen	643:8:19139:19174	61711	4	True				
ANR	62091	AssignmentExpression	cipher_ctx -> chunk -> len = chunk_clen		61711	0		=			
ANR	62092	PtrMemberAccess	cipher_ctx -> chunk -> len		61711	0					
ANR	62093	PtrMemberAccess	cipher_ctx -> chunk		61711	0					
ANR	62094	Identifier	cipher_ctx		61711	0					
ANR	62095	Identifier	chunk		61711	1					
ANR	62096	Identifier	len		61711	1					
ANR	62097	Identifier	chunk_clen		61711	1					
ANR	62098	ExpressionStatement	plen += chunk_plen	644:8:19184:19219	61711	5	True				
ANR	62099	AssignmentExpression	plen += chunk_plen		61711	0		+=			
ANR	62100	Identifier	plen		61711	0					
ANR	62101	Identifier	chunk_plen		61711	1					
ANR	62102	ExpressionStatement	plaintext -> len = plen	646:4:19231:19252	61711	14	True				
ANR	62103	AssignmentExpression	plaintext -> len = plen		61711	0		=			
ANR	62104	PtrMemberAccess	plaintext -> len		61711	0					
ANR	62105	Identifier	plaintext		61711	0					
ANR	62106	Identifier	len		61711	1					
ANR	62107	Identifier	plen		61711	1					
ANR	62108	ExpressionStatement	"brealloc ( ciphertext , plaintext -> len , capacity )"	648:4:19259:19305	61711	15	True				
ANR	62109	CallExpression	"brealloc ( ciphertext , plaintext -> len , capacity )"		61711	0					
ANR	62110	Callee	brealloc		61711	0					
ANR	62111	Identifier	brealloc		61711	0					
ANR	62112	ArgumentList	ciphertext		61711	1					
ANR	62113	Argument	ciphertext		61711	0					
ANR	62114	Identifier	ciphertext		61711	0					
ANR	62115	Argument	plaintext -> len		61711	1					
ANR	62116	PtrMemberAccess	plaintext -> len		61711	0					
ANR	62117	Identifier	plaintext		61711	0					
ANR	62118	Identifier	len		61711	1					
ANR	62119	Argument	capacity		61711	2					
ANR	62120	Identifier	capacity		61711	0					
ANR	62121	ExpressionStatement	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"	649:4:19311:19368	61711	16	True				
ANR	62122	CallExpression	"memcpy ( ciphertext -> data , plaintext -> data , plaintext -> len )"		61711	0					
ANR	62123	Callee	memcpy		61711	0					
ANR	62124	Identifier	memcpy		61711	0					
ANR	62125	ArgumentList	ciphertext -> data		61711	1					
ANR	62126	Argument	ciphertext -> data		61711	0					
ANR	62127	PtrMemberAccess	ciphertext -> data		61711	0					
ANR	62128	Identifier	ciphertext		61711	0					
ANR	62129	Identifier	data		61711	1					
ANR	62130	Argument	plaintext -> data		61711	1					
ANR	62131	PtrMemberAccess	plaintext -> data		61711	0					
ANR	62132	Identifier	plaintext		61711	0					
ANR	62133	Identifier	data		61711	1					
ANR	62134	Argument	plaintext -> len		61711	2					
ANR	62135	PtrMemberAccess	plaintext -> len		61711	0					
ANR	62136	Identifier	plaintext		61711	0					
ANR	62137	Identifier	len		61711	1					
ANR	62138	ExpressionStatement	ciphertext -> len = plaintext -> len	650:4:19374:19406	61711	17	True				
ANR	62139	AssignmentExpression	ciphertext -> len = plaintext -> len		61711	0		=			
ANR	62140	PtrMemberAccess	ciphertext -> len		61711	0					
ANR	62141	Identifier	ciphertext		61711	0					
ANR	62142	Identifier	len		61711	1					
ANR	62143	PtrMemberAccess	plaintext -> len		61711	1					
ANR	62144	Identifier	plaintext		61711	0					
ANR	62145	Identifier	len		61711	1					
ANR	62146	IfStatement	if ( cipher_ctx -> init == 1 )		61711	18					
ANR	62147	Condition	cipher_ctx -> init == 1	653:8:19453:19473	61711	0	True				
ANR	62148	EqualityExpression	cipher_ctx -> init == 1		61711	0		==			
ANR	62149	PtrMemberAccess	cipher_ctx -> init		61711	0					
ANR	62150	Identifier	cipher_ctx		61711	0					
ANR	62151	Identifier	init		61711	1					
ANR	62152	PrimaryExpression	1		61711	1					
ANR	62153	CompoundStatement		71:31:2301:2301	61711	1					
ANR	62154	ExpressionStatement	"ppbloom_add ( ( void * ) cipher_ctx -> salt , salt_len )"	654:8:19486:19533	61711	0	True				
ANR	62155	CallExpression	"ppbloom_add ( ( void * ) cipher_ctx -> salt , salt_len )"		61711	0					
ANR	62156	Callee	ppbloom_add		61711	0					
ANR	62157	Identifier	ppbloom_add		61711	0					
ANR	62158	ArgumentList	( void * ) cipher_ctx -> salt		61711	1					
ANR	62159	Argument	( void * ) cipher_ctx -> salt		61711	0					
ANR	62160	CastExpression	( void * ) cipher_ctx -> salt		61711	0					
ANR	62161	CastTarget	void *		61711	0					
ANR	62162	PtrMemberAccess	cipher_ctx -> salt		61711	1					
ANR	62163	Identifier	cipher_ctx		61711	0					
ANR	62164	Identifier	salt		61711	1					
ANR	62165	Argument	salt_len		61711	1					
ANR	62166	Identifier	salt_len		61711	0					
ANR	62167	ExpressionStatement	cipher_ctx -> init = 2	655:8:19543:19563	61711	1	True				
ANR	62168	AssignmentExpression	cipher_ctx -> init = 2		61711	0		=			
ANR	62169	PtrMemberAccess	cipher_ctx -> init		61711	0					
ANR	62170	Identifier	cipher_ctx		61711	0					
ANR	62171	Identifier	init		61711	1					
ANR	62172	PrimaryExpression	2		61711	1					
ANR	62173	ReturnStatement	return CRYPTO_OK ;	658:4:19576:19592	61711	19	True				
ANR	62174	Identifier	CRYPTO_OK		61711	0					
ANR	62175	ReturnType	int		61711	1					
ANR	62176	Identifier	aead_decrypt		61711	2					
ANR	62177	ParameterList	"buffer_t * ciphertext , cipher_ctx_t * cipher_ctx , size_t capacity"		61711	3					
ANR	62178	Parameter	buffer_t * ciphertext	582:13:17109:17128	61711	0	True				
ANR	62179	ParameterType	buffer_t *		61711	0					
ANR	62180	Identifier	ciphertext		61711	1					
ANR	62181	Parameter	cipher_ctx_t * cipher_ctx	582:35:17131:17154	61711	1	True				
ANR	62182	ParameterType	cipher_ctx_t *		61711	0					
ANR	62183	Identifier	cipher_ctx		61711	1					
ANR	62184	Parameter	size_t capacity	582:61:17157:17171	61711	2	True				
ANR	62185	ParameterType	size_t		61711	0					
ANR	62186	Identifier	capacity		61711	1					
ANR	62187	CFGEntryNode	ENTRY		61711		True				
ANR	62188	CFGExitNode	EXIT		61711		True				
ANR	62189	Symbol	cipher_ctx -> cipher		61711						
ANR	62190	Symbol	CRYPTO_NEED_MORE		61711						
ANR	62191	Symbol	CRYPTO_ERROR		61711						
ANR	62192	Symbol	cipher_ctx -> chunk -> len		61711						
ANR	62193	Symbol	CRYPTO_OK		61711						
ANR	62194	Symbol	cipher_ctx -> chunk -> data		61711						
ANR	62195	Symbol	cipher_ctx -> init		61711						
ANR	62196	Symbol	cipher_ctx -> nonce		61711						
ANR	62197	Symbol	capacity		61711						
ANR	62198	Symbol	* * cipher_ctx		61711						
ANR	62199	Symbol	plen		61711						
ANR	62200	Symbol	* plaintext		61711						
ANR	62201	Symbol	salt_len		61711						
ANR	62202	Symbol	tmp		61711						
ANR	62203	Symbol	plaintext -> data		61711						
ANR	62204	Symbol	aead_chunk_decrypt		61711						
ANR	62205	Symbol	cipher		61711						
ANR	62206	Symbol	& chunk_clen		61711						
ANR	62207	Symbol	ciphertext		61711						
ANR	62208	Symbol	ciphertext -> len		61711						
ANR	62209	Symbol	cipher_ctx		61711						
ANR	62210	Symbol	NULL		61711						
ANR	62211	Symbol	err		61711						
ANR	62212	Symbol	* cipher_ctx		61711						
ANR	62213	Symbol	* cipher		61711						
ANR	62214	Symbol	ppbloom_check		61711						
ANR	62215	Symbol	chunk_plen		61711						
ANR	62216	Symbol	plaintext		61711						
ANR	62217	Symbol	* cipher_ctx -> chunk		61711						
ANR	62218	Symbol	cipher_ctx -> chunk		61711						
ANR	62219	Symbol	chunk_clen		61711						
ANR	62220	Symbol	plaintext -> len		61711						
ANR	62221	Symbol	& chunk_plen		61711						
ANR	62222	Symbol	cipher -> key_len		61711						
ANR	62223	Symbol	ciphertext -> data		61711						
ANR	62224	Symbol	cipher_ctx -> salt		61711						
ANR	62225	Symbol	ss_malloc		61711						
ANR	62226	Symbol	& tmp		61711						
ANR	62227	Symbol	* ciphertext		61711						
ANR	62228	Function	aead_key_init	661:0:19597:21107							
ANR	62229	FunctionDef	"aead_key_init (int method , const char * pass , const char * key)"		62228	0					
ANR	62230	CompoundStatement		663:0:19669:21107	62228	0					
ANR	62231	IfStatement	if ( method < AES128GCM || method >= AEAD_CIPHER_NUM )		62228	0					
ANR	62232	Condition	method < AES128GCM || method >= AEAD_CIPHER_NUM	664:8:19679:19725	62228	0	True				
ANR	62233	OrExpression	method < AES128GCM || method >= AEAD_CIPHER_NUM		62228	0		||			
ANR	62234	RelationalExpression	method < AES128GCM		62228	0		<			
ANR	62235	Identifier	method		62228	0					
ANR	62236	Identifier	AES128GCM		62228	1					
ANR	62237	RelationalExpression	method >= AEAD_CIPHER_NUM		62228	1		>=			
ANR	62238	Identifier	method		62228	0					
ANR	62239	Identifier	AEAD_CIPHER_NUM		62228	1					
ANR	62240	CompoundStatement		2:57:58:58	62228	1					
ANR	62241	ExpressionStatement	"LOGE ( ""aead_key_init(): Illegal method"" )"	665:8:19738:19777	62228	0	True				
ANR	62242	CallExpression	"LOGE ( ""aead_key_init(): Illegal method"" )"		62228	0					
ANR	62243	Callee	LOGE		62228	0					
ANR	62244	Identifier	LOGE		62228	0					
ANR	62245	ArgumentList	"""aead_key_init(): Illegal method"""		62228	1					
ANR	62246	Argument	"""aead_key_init(): Illegal method"""		62228	0					
ANR	62247	PrimaryExpression	"""aead_key_init(): Illegal method"""		62228	0					
ANR	62248	ReturnStatement	return NULL ;	666:8:19787:19798	62228	1	True				
ANR	62249	Identifier	NULL		62228	0					
ANR	62250	IdentifierDeclStatement	cipher_t * cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) ) ;	669:4:19811:19869	62228	1	True				
ANR	62251	IdentifierDecl	* cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		62228	0					
ANR	62252	IdentifierDeclType	cipher_t *		62228	0					
ANR	62253	Identifier	cipher		62228	1					
ANR	62254	AssignmentExpression	* cipher = ( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		62228	2		=			
ANR	62255	Identifier	cipher		62228	0					
ANR	62256	CastExpression	( cipher_t * ) ss_malloc ( sizeof ( cipher_t ) )		62228	1					
ANR	62257	CastTarget	cipher_t *		62228	0					
ANR	62258	CallExpression	ss_malloc ( sizeof ( cipher_t ) )		62228	1					
ANR	62259	Callee	ss_malloc		62228	0					
ANR	62260	Identifier	ss_malloc		62228	0					
ANR	62261	ArgumentList	sizeof ( cipher_t )		62228	1					
ANR	62262	Argument	sizeof ( cipher_t )		62228	0					
ANR	62263	SizeofExpression	sizeof ( cipher_t )		62228	0					
ANR	62264	Sizeof	sizeof		62228	0					
ANR	62265	SizeofOperand	cipher_t		62228	1					
ANR	62266	ExpressionStatement	"memset ( cipher , 0 , sizeof ( cipher_t ) )"	670:4:19875:19910	62228	2	True				
ANR	62267	CallExpression	"memset ( cipher , 0 , sizeof ( cipher_t ) )"		62228	0					
ANR	62268	Callee	memset		62228	0					
ANR	62269	Identifier	memset		62228	0					
ANR	62270	ArgumentList	cipher		62228	1					
ANR	62271	Argument	cipher		62228	0					
ANR	62272	Identifier	cipher		62228	0					
ANR	62273	Argument	0		62228	1					
ANR	62274	PrimaryExpression	0		62228	0					
ANR	62275	Argument	sizeof ( cipher_t )		62228	2					
ANR	62276	SizeofExpression	sizeof ( cipher_t )		62228	0					
ANR	62277	Sizeof	sizeof		62228	0					
ANR	62278	SizeofOperand	cipher_t		62228	1					
ANR	62279	IfStatement	if ( method >= CHACHA20POLY1305IETF )		62228	3					
ANR	62280	Condition	method >= CHACHA20POLY1305IETF	672:8:19921:19950	62228	0	True				
ANR	62281	RelationalExpression	method >= CHACHA20POLY1305IETF		62228	0		>=			
ANR	62282	Identifier	method		62228	0					
ANR	62283	Identifier	CHACHA20POLY1305IETF		62228	1					
ANR	62284	CompoundStatement		11:8:293:365	62228	1					
ANR	62285	IdentifierDeclStatement	cipher_kt_t * cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) ) ;	673:8:19963:20035	62228	0	True				
ANR	62286	IdentifierDecl	* cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		62228	0					
ANR	62287	IdentifierDeclType	cipher_kt_t *		62228	0					
ANR	62288	Identifier	cipher_info		62228	1					
ANR	62289	AssignmentExpression	* cipher_info = ( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		62228	2		=			
ANR	62290	Identifier	cipher_info		62228	0					
ANR	62291	CastExpression	( cipher_kt_t * ) ss_malloc ( sizeof ( cipher_kt_t ) )		62228	1					
ANR	62292	CastTarget	cipher_kt_t *		62228	0					
ANR	62293	CallExpression	ss_malloc ( sizeof ( cipher_kt_t ) )		62228	1					
ANR	62294	Callee	ss_malloc		62228	0					
ANR	62295	Identifier	ss_malloc		62228	0					
ANR	62296	ArgumentList	sizeof ( cipher_kt_t )		62228	1					
ANR	62297	Argument	sizeof ( cipher_kt_t )		62228	0					
ANR	62298	SizeofExpression	sizeof ( cipher_kt_t )		62228	0					
ANR	62299	Sizeof	sizeof		62228	0					
ANR	62300	SizeofOperand	cipher_kt_t		62228	1					
ANR	62301	ExpressionStatement	cipher -> info = cipher_info	674:8:20045:20083	62228	1	True				
ANR	62302	AssignmentExpression	cipher -> info = cipher_info		62228	0		=			
ANR	62303	PtrMemberAccess	cipher -> info		62228	0					
ANR	62304	Identifier	cipher		62228	0					
ANR	62305	Identifier	info		62228	1					
ANR	62306	Identifier	cipher_info		62228	1					
ANR	62307	ExpressionStatement	cipher -> info -> base = NULL	675:8:20093:20124	62228	2	True				
ANR	62308	AssignmentExpression	cipher -> info -> base = NULL		62228	0		=			
ANR	62309	PtrMemberAccess	cipher -> info -> base		62228	0					
ANR	62310	PtrMemberAccess	cipher -> info		62228	0					
ANR	62311	Identifier	cipher		62228	0					
ANR	62312	Identifier	info		62228	1					
ANR	62313	Identifier	base		62228	1					
ANR	62314	Identifier	NULL		62228	1					
ANR	62315	ExpressionStatement	cipher -> info -> key_bitlen = supported_aead_ciphers_key_size [ method ] * 8	676:8:20134:20204	62228	3	True				
ANR	62316	AssignmentExpression	cipher -> info -> key_bitlen = supported_aead_ciphers_key_size [ method ] * 8		62228	0		=			
ANR	62317	PtrMemberAccess	cipher -> info -> key_bitlen		62228	0					
ANR	62318	PtrMemberAccess	cipher -> info		62228	0					
ANR	62319	Identifier	cipher		62228	0					
ANR	62320	Identifier	info		62228	1					
ANR	62321	Identifier	key_bitlen		62228	1					
ANR	62322	MultiplicativeExpression	supported_aead_ciphers_key_size [ method ] * 8		62228	1		*			
ANR	62323	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		62228	0					
ANR	62324	Identifier	supported_aead_ciphers_key_size		62228	0					
ANR	62325	Identifier	method		62228	1					
ANR	62326	PrimaryExpression	8		62228	1					
ANR	62327	ExpressionStatement	cipher -> info -> iv_size = supported_aead_ciphers_nonce_size [ method ]	677:8:20214:20282	62228	4	True				
ANR	62328	AssignmentExpression	cipher -> info -> iv_size = supported_aead_ciphers_nonce_size [ method ]		62228	0		=			
ANR	62329	PtrMemberAccess	cipher -> info -> iv_size		62228	0					
ANR	62330	PtrMemberAccess	cipher -> info		62228	0					
ANR	62331	Identifier	cipher		62228	0					
ANR	62332	Identifier	info		62228	1					
ANR	62333	Identifier	iv_size		62228	1					
ANR	62334	ArrayIndexing	supported_aead_ciphers_nonce_size [ method ]		62228	1					
ANR	62335	Identifier	supported_aead_ciphers_nonce_size		62228	0					
ANR	62336	Identifier	method		62228	1					
ANR	62337	ElseStatement	else		62228	0					
ANR	62338	CompoundStatement		16:11:625:625	62228	0					
ANR	62339	ExpressionStatement	cipher -> info = ( cipher_kt_t * ) aead_get_cipher_type ( method )	679:8:20305:20363	62228	0	True				
ANR	62340	AssignmentExpression	cipher -> info = ( cipher_kt_t * ) aead_get_cipher_type ( method )		62228	0		=			
ANR	62341	PtrMemberAccess	cipher -> info		62228	0					
ANR	62342	Identifier	cipher		62228	0					
ANR	62343	Identifier	info		62228	1					
ANR	62344	CastExpression	( cipher_kt_t * ) aead_get_cipher_type ( method )		62228	1					
ANR	62345	CastTarget	cipher_kt_t *		62228	0					
ANR	62346	CallExpression	aead_get_cipher_type ( method )		62228	1					
ANR	62347	Callee	aead_get_cipher_type		62228	0					
ANR	62348	Identifier	aead_get_cipher_type		62228	0					
ANR	62349	ArgumentList	method		62228	1					
ANR	62350	Argument	method		62228	0					
ANR	62351	Identifier	method		62228	0					
ANR	62352	IfStatement	if ( cipher -> info == NULL && cipher -> key_len == 0 )		62228	4					
ANR	62353	Condition	cipher -> info == NULL && cipher -> key_len == 0	682:8:20380:20423	62228	0	True				
ANR	62354	AndExpression	cipher -> info == NULL && cipher -> key_len == 0		62228	0		&&			
ANR	62355	EqualityExpression	cipher -> info == NULL		62228	0		==			
ANR	62356	PtrMemberAccess	cipher -> info		62228	0					
ANR	62357	Identifier	cipher		62228	0					
ANR	62358	Identifier	info		62228	1					
ANR	62359	Identifier	NULL		62228	1					
ANR	62360	EqualityExpression	cipher -> key_len == 0		62228	1		==			
ANR	62361	PtrMemberAccess	cipher -> key_len		62228	0					
ANR	62362	Identifier	cipher		62228	0					
ANR	62363	Identifier	key_len		62228	1					
ANR	62364	PrimaryExpression	0		62228	1					
ANR	62365	CompoundStatement		20:54:756:756	62228	1					
ANR	62366	ExpressionStatement	"LOGE ( ""Cipher %s not found in crypto library"" , supported_aead_ciphers [ method ] )"	683:8:20436:20513	62228	0	True				
ANR	62367	CallExpression	"LOGE ( ""Cipher %s not found in crypto library"" , supported_aead_ciphers [ method ] )"		62228	0					
ANR	62368	Callee	LOGE		62228	0					
ANR	62369	Identifier	LOGE		62228	0					
ANR	62370	ArgumentList	"""Cipher %s not found in crypto library"""		62228	1					
ANR	62371	Argument	"""Cipher %s not found in crypto library"""		62228	0					
ANR	62372	PrimaryExpression	"""Cipher %s not found in crypto library"""		62228	0					
ANR	62373	Argument	supported_aead_ciphers [ method ]		62228	1					
ANR	62374	ArrayIndexing	supported_aead_ciphers [ method ]		62228	0					
ANR	62375	Identifier	supported_aead_ciphers		62228	0					
ANR	62376	Identifier	method		62228	1					
ANR	62377	ExpressionStatement	"FATAL ( ""Cannot initialize cipher"" )"	684:8:20523:20556	62228	1	True				
ANR	62378	CallExpression	"FATAL ( ""Cannot initialize cipher"" )"		62228	0					
ANR	62379	Callee	FATAL		62228	0					
ANR	62380	Identifier	FATAL		62228	0					
ANR	62381	ArgumentList	"""Cannot initialize cipher"""		62228	1					
ANR	62382	Argument	"""Cannot initialize cipher"""		62228	0					
ANR	62383	PrimaryExpression	"""Cannot initialize cipher"""		62228	0					
ANR	62384	IfStatement	if ( key != NULL )		62228	5					
ANR	62385	Condition	key != NULL	687:8:20573:20583	62228	0	True				
ANR	62386	EqualityExpression	key != NULL		62228	0		!=			
ANR	62387	Identifier	key		62228	0					
ANR	62388	Identifier	NULL		62228	1					
ANR	62389	ExpressionStatement	"cipher -> key_len = crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"	688:8:20594:20703	62228	1	True				
ANR	62390	AssignmentExpression	"cipher -> key_len = crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		62228	0		=			
ANR	62391	PtrMemberAccess	cipher -> key_len		62228	0					
ANR	62392	Identifier	cipher		62228	0					
ANR	62393	Identifier	key_len		62228	1					
ANR	62394	CallExpression	"crypto_parse_key ( key , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		62228	1					
ANR	62395	Callee	crypto_parse_key		62228	0					
ANR	62396	Identifier	crypto_parse_key		62228	0					
ANR	62397	ArgumentList	key		62228	1					
ANR	62398	Argument	key		62228	0					
ANR	62399	Identifier	key		62228	0					
ANR	62400	Argument	cipher -> key		62228	1					
ANR	62401	PtrMemberAccess	cipher -> key		62228	0					
ANR	62402	Identifier	cipher		62228	0					
ANR	62403	Identifier	key		62228	1					
ANR	62404	Argument	supported_aead_ciphers_key_size [ method ]		62228	2					
ANR	62405	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		62228	0					
ANR	62406	Identifier	supported_aead_ciphers_key_size		62228	0					
ANR	62407	Identifier	method		62228	1					
ANR	62408	ElseStatement	else		62228	0					
ANR	62409	ExpressionStatement	"cipher -> key_len = crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"	691:8:20722:20833	62228	0	True				
ANR	62410	AssignmentExpression	"cipher -> key_len = crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		62228	0		=			
ANR	62411	PtrMemberAccess	cipher -> key_len		62228	0					
ANR	62412	Identifier	cipher		62228	0					
ANR	62413	Identifier	key_len		62228	1					
ANR	62414	CallExpression	"crypto_derive_key ( pass , cipher -> key , supported_aead_ciphers_key_size [ method ] )"		62228	1					
ANR	62415	Callee	crypto_derive_key		62228	0					
ANR	62416	Identifier	crypto_derive_key		62228	0					
ANR	62417	ArgumentList	pass		62228	1					
ANR	62418	Argument	pass		62228	0					
ANR	62419	Identifier	pass		62228	0					
ANR	62420	Argument	cipher -> key		62228	1					
ANR	62421	PtrMemberAccess	cipher -> key		62228	0					
ANR	62422	Identifier	cipher		62228	0					
ANR	62423	Identifier	key		62228	1					
ANR	62424	Argument	supported_aead_ciphers_key_size [ method ]		62228	2					
ANR	62425	ArrayIndexing	supported_aead_ciphers_key_size [ method ]		62228	0					
ANR	62426	Identifier	supported_aead_ciphers_key_size		62228	0					
ANR	62427	Identifier	method		62228	1					
ANR	62428	IfStatement	if ( cipher -> key_len == 0 )		62228	6					
ANR	62429	Condition	cipher -> key_len == 0	694:8:20844:20863	62228	0	True				
ANR	62430	EqualityExpression	cipher -> key_len == 0		62228	0		==			
ANR	62431	PtrMemberAccess	cipher -> key_len		62228	0					
ANR	62432	Identifier	cipher		62228	0					
ANR	62433	Identifier	key_len		62228	1					
ANR	62434	PrimaryExpression	0		62228	1					
ANR	62435	CompoundStatement		32:30:1196:1196	62228	1					
ANR	62436	ExpressionStatement	"FATAL ( ""Cannot generate key and nonce"" )"	695:8:20876:20914	62228	0	True				
ANR	62437	CallExpression	"FATAL ( ""Cannot generate key and nonce"" )"		62228	0					
ANR	62438	Callee	FATAL		62228	0					
ANR	62439	Identifier	FATAL		62228	0					
ANR	62440	ArgumentList	"""Cannot generate key and nonce"""		62228	1					
ANR	62441	Argument	"""Cannot generate key and nonce"""		62228	0					
ANR	62442	PrimaryExpression	"""Cannot generate key and nonce"""		62228	0					
ANR	62443	ExpressionStatement	cipher -> nonce_len = supported_aead_ciphers_nonce_size [ method ]	698:4:20927:20988	62228	7	True				
ANR	62444	AssignmentExpression	cipher -> nonce_len = supported_aead_ciphers_nonce_size [ method ]		62228	0		=			
ANR	62445	PtrMemberAccess	cipher -> nonce_len		62228	0					
ANR	62446	Identifier	cipher		62228	0					
ANR	62447	Identifier	nonce_len		62228	1					
ANR	62448	ArrayIndexing	supported_aead_ciphers_nonce_size [ method ]		62228	1					
ANR	62449	Identifier	supported_aead_ciphers_nonce_size		62228	0					
ANR	62450	Identifier	method		62228	1					
ANR	62451	ExpressionStatement	cipher -> tag_len = supported_aead_ciphers_tag_size [ method ]	699:4:20994:21053	62228	8	True				
ANR	62452	AssignmentExpression	cipher -> tag_len = supported_aead_ciphers_tag_size [ method ]		62228	0		=			
ANR	62453	PtrMemberAccess	cipher -> tag_len		62228	0					
ANR	62454	Identifier	cipher		62228	0					
ANR	62455	Identifier	tag_len		62228	1					
ANR	62456	ArrayIndexing	supported_aead_ciphers_tag_size [ method ]		62228	1					
ANR	62457	Identifier	supported_aead_ciphers_tag_size		62228	0					
ANR	62458	Identifier	method		62228	1					
ANR	62459	ExpressionStatement	cipher -> method = method	700:4:21059:21085	62228	9	True				
ANR	62460	AssignmentExpression	cipher -> method = method		62228	0		=			
ANR	62461	PtrMemberAccess	cipher -> method		62228	0					
ANR	62462	Identifier	cipher		62228	0					
ANR	62463	Identifier	method		62228	1					
ANR	62464	Identifier	method		62228	1					
ANR	62465	ReturnStatement	return cipher ;	702:4:21092:21105	62228	10	True				
ANR	62466	Identifier	cipher		62228	0					
ANR	62467	ReturnType	cipher_t *		62228	1					
ANR	62468	Identifier	aead_key_init		62228	2					
ANR	62469	ParameterList	"int method , const char * pass , const char * key"		62228	3					
ANR	62470	Parameter	int method	662:14:19622:19631	62228	0	True				
ANR	62471	ParameterType	int		62228	0					
ANR	62472	Identifier	method		62228	1					
ANR	62473	Parameter	const char * pass	662:26:19634:19649	62228	1	True				
ANR	62474	ParameterType	const char *		62228	0					
ANR	62475	Identifier	pass		62228	1					
ANR	62476	Parameter	const char * key	662:44:19652:19666	62228	2	True				
ANR	62477	ParameterType	const char *		62228	0					
ANR	62478	Identifier	key		62228	1					
ANR	62479	CFGEntryNode	ENTRY		62228		True				
ANR	62480	CFGExitNode	EXIT		62228		True				
ANR	62481	Symbol	* supported_aead_ciphers_nonce_size		62228						
ANR	62482	Symbol	* * cipher		62228						
ANR	62483	Symbol	cipher -> info -> key_bitlen		62228						
ANR	62484	Symbol	* cipher -> info		62228						
ANR	62485	Symbol	cipher -> info -> iv_size		62228						
ANR	62486	Symbol	supported_aead_ciphers_key_size		62228						
ANR	62487	Symbol	* supported_aead_ciphers_key_size		62228						
ANR	62488	Symbol	cipher -> info -> base		62228						
ANR	62489	Symbol	cipher -> key		62228						
ANR	62490	Symbol	* supported_aead_ciphers_tag_size		62228						
ANR	62491	Symbol	cipher -> info		62228						
ANR	62492	Symbol	key		62228						
ANR	62493	Symbol	supported_aead_ciphers_nonce_size		62228						
ANR	62494	Symbol	supported_aead_ciphers		62228						
ANR	62495	Symbol	cipher		62228						
ANR	62496	Symbol	NULL		62228						
ANR	62497	Symbol	method		62228						
ANR	62498	Symbol	* supported_aead_ciphers		62228						
ANR	62499	Symbol	crypto_parse_key		62228						
ANR	62500	Symbol	pass		62228						
ANR	62501	Symbol	* cipher		62228						
ANR	62502	Symbol	cipher -> tag_len		62228						
ANR	62503	Symbol	AES128GCM		62228						
ANR	62504	Symbol	aead_get_cipher_type		62228						
ANR	62505	Symbol	crypto_derive_key		62228						
ANR	62506	Symbol	cipher_info		62228						
ANR	62507	Symbol	* method		62228						
ANR	62508	Symbol	supported_aead_ciphers_tag_size		62228						
ANR	62509	Symbol	AEAD_CIPHER_NUM		62228						
ANR	62510	Symbol	cipher -> key_len		62228						
ANR	62511	Symbol	cipher -> method		62228						
ANR	62512	Symbol	ss_malloc		62228						
ANR	62513	Symbol	cipher -> nonce_len		62228						
ANR	62514	Symbol	CHACHA20POLY1305IETF		62228						
ANR	62515	Function	aead_init	705:0:21110:21627							
ANR	62516	FunctionDef	"aead_init (const char * pass , const char * key , const char * method)"		62515	0					
ANR	62517	CompoundStatement		707:0:21186:21627	62515	0					
ANR	62518	IdentifierDeclStatement	int m = AES128GCM ;	708:4:21192:21209	62515	0	True				
ANR	62519	IdentifierDecl	m = AES128GCM		62515	0					
ANR	62520	IdentifierDeclType	int		62515	0					
ANR	62521	Identifier	m		62515	1					
ANR	62522	AssignmentExpression	m = AES128GCM		62515	2		=			
ANR	62523	Identifier	AES128GCM		62515	0					
ANR	62524	Identifier	AES128GCM		62515	1					
ANR	62525	IfStatement	if ( method != NULL )		62515	1					
ANR	62526	Condition	method != NULL	709:8:21219:21232	62515	0	True				
ANR	62527	EqualityExpression	method != NULL		62515	0		!=			
ANR	62528	Identifier	method		62515	0					
ANR	62529	Identifier	NULL		62515	1					
ANR	62530	CompoundStatement		3:24:48:48	62515	1					
ANR	62531	ForStatement	for ( m = AES128GCM ; m < AEAD_CIPHER_NUM ; m ++ )		62515	0					
ANR	62532	ForInit	m = AES128GCM ;	711:13:21286:21299	62515	0	True				
ANR	62533	AssignmentExpression	m = AES128GCM		62515	0		=			
ANR	62534	Identifier	m		62515	0					
ANR	62535	Identifier	AES128GCM		62515	1					
ANR	62536	Condition	m < AEAD_CIPHER_NUM	711:28:21301:21319	62515	1	True				
ANR	62537	RelationalExpression	m < AEAD_CIPHER_NUM		62515	0		<			
ANR	62538	Identifier	m		62515	0					
ANR	62539	Identifier	AEAD_CIPHER_NUM		62515	1					
ANR	62540	PostIncDecOperationExpression	m ++	711:49:21322:21324	62515	2	True				
ANR	62541	Identifier	m		62515	0					
ANR	62542	IncDec	++		62515	1					
ANR	62543	IfStatement	"if ( strcmp ( method , supported_aead_ciphers [ m ] ) == 0 )"		62515	3					
ANR	62544	Condition	"strcmp ( method , supported_aead_ciphers [ m ] ) == 0"	712:16:21343:21388	62515	0	True				
ANR	62545	EqualityExpression	"strcmp ( method , supported_aead_ciphers [ m ] ) == 0"		62515	0		==			
ANR	62546	CallExpression	"strcmp ( method , supported_aead_ciphers [ m ] )"		62515	0					
ANR	62547	Callee	strcmp		62515	0					
ANR	62548	Identifier	strcmp		62515	0					
ANR	62549	ArgumentList	method		62515	1					
ANR	62550	Argument	method		62515	0					
ANR	62551	Identifier	method		62515	0					
ANR	62552	Argument	supported_aead_ciphers [ m ]		62515	1					
ANR	62553	ArrayIndexing	supported_aead_ciphers [ m ]		62515	0					
ANR	62554	Identifier	supported_aead_ciphers		62515	0					
ANR	62555	Identifier	m		62515	1					
ANR	62556	PrimaryExpression	0		62515	1					
ANR	62557	CompoundStatement		6:64:204:204	62515	1					
ANR	62558	BreakStatement	break ;	713:16:21409:21414	62515	0	True				
ANR	62559	IfStatement	if ( m >= AEAD_CIPHER_NUM )		62515	1					
ANR	62560	Condition	m >= AEAD_CIPHER_NUM	715:12:21442:21461	62515	0	True				
ANR	62561	RelationalExpression	m >= AEAD_CIPHER_NUM		62515	0		>=			
ANR	62562	Identifier	m		62515	0					
ANR	62563	Identifier	AEAD_CIPHER_NUM		62515	1					
ANR	62564	CompoundStatement		9:34:277:277	62515	1					
ANR	62565	ExpressionStatement	"LOGE ( ""Invalid cipher name: %s, use aes-256-gcm instead"" , method )"	716:12:21478:21542	62515	0	True				
ANR	62566	CallExpression	"LOGE ( ""Invalid cipher name: %s, use aes-256-gcm instead"" , method )"		62515	0					
ANR	62567	Callee	LOGE		62515	0					
ANR	62568	Identifier	LOGE		62515	0					
ANR	62569	ArgumentList	"""Invalid cipher name: %s, use aes-256-gcm instead"""		62515	1					
ANR	62570	Argument	"""Invalid cipher name: %s, use aes-256-gcm instead"""		62515	0					
ANR	62571	PrimaryExpression	"""Invalid cipher name: %s, use aes-256-gcm instead"""		62515	0					
ANR	62572	Argument	method		62515	1					
ANR	62573	Identifier	method		62515	0					
ANR	62574	ExpressionStatement	m = AES256GCM	717:12:21556:21569	62515	1	True				
ANR	62575	AssignmentExpression	m = AES256GCM		62515	0		=			
ANR	62576	Identifier	m		62515	0					
ANR	62577	Identifier	AES256GCM		62515	1					
ANR	62578	ReturnStatement	"return aead_key_init ( m , pass , key ) ;"	720:4:21591:21625	62515	2	True				
ANR	62579	CallExpression	"aead_key_init ( m , pass , key )"		62515	0					
ANR	62580	Callee	aead_key_init		62515	0					
ANR	62581	Identifier	aead_key_init		62515	0					
ANR	62582	ArgumentList	m		62515	1					
ANR	62583	Argument	m		62515	0					
ANR	62584	Identifier	m		62515	0					
ANR	62585	Argument	pass		62515	1					
ANR	62586	Identifier	pass		62515	0					
ANR	62587	Argument	key		62515	2					
ANR	62588	Identifier	key		62515	0					
ANR	62589	ReturnType	cipher_t *		62515	1					
ANR	62590	Identifier	aead_init		62515	2					
ANR	62591	ParameterList	"const char * pass , const char * key , const char * method"		62515	3					
ANR	62592	Parameter	const char * pass	706:10:21131:21146	62515	0	True				
ANR	62593	ParameterType	const char *		62515	0					
ANR	62594	Identifier	pass		62515	1					
ANR	62595	Parameter	const char * key	706:28:21149:21163	62515	1	True				
ANR	62596	ParameterType	const char *		62515	0					
ANR	62597	Identifier	key		62515	1					
ANR	62598	Parameter	const char * method	706:45:21166:21183	62515	2	True				
ANR	62599	ParameterType	const char *		62515	0					
ANR	62600	Identifier	method		62515	1					
ANR	62601	CFGEntryNode	ENTRY		62515		True				
ANR	62602	CFGExitNode	EXIT		62515		True				
ANR	62603	Symbol	strcmp		62515						
ANR	62604	Symbol	AES256GCM		62515						
ANR	62605	Symbol	NULL		62515						
ANR	62606	Symbol	method		62515						
ANR	62607	Symbol	* supported_aead_ciphers		62515						
ANR	62608	Symbol	pass		62515						
ANR	62609	Symbol	AES128GCM		62515						
ANR	62610	Symbol	m		62515						
ANR	62611	Symbol	AEAD_CIPHER_NUM		62515						
ANR	62612	Symbol	* m		62515						
ANR	62613	Symbol	aead_key_init		62515						
ANR	62614	Symbol	key		62515						
ANR	62615	Symbol	supported_aead_ciphers		62515						
