command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	7668	File	data/converged/CVE-2017-15924_shadowsocks-libev/crypto.c								
ANR	7669	Function	balloc	45:0:1234:1414							
ANR	7670	FunctionDef	"balloc (buffer_t * ptr , size_t capacity)"		7669	0					
ANR	7671	CompoundStatement		47:0:1277:1414	7669	0					
ANR	7672	ExpressionStatement	"sodium_memzero ( ptr , sizeof ( buffer_t ) )"	48:4:1283:1320	7669	0	True				
ANR	7673	CallExpression	"sodium_memzero ( ptr , sizeof ( buffer_t ) )"		7669	0					
ANR	7674	Callee	sodium_memzero		7669	0					
ANR	7675	Identifier	sodium_memzero		7669	0					
ANR	7676	ArgumentList	ptr		7669	1					
ANR	7677	Argument	ptr		7669	0					
ANR	7678	Identifier	ptr		7669	0					
ANR	7679	Argument	sizeof ( buffer_t )		7669	1					
ANR	7680	SizeofExpression	sizeof ( buffer_t )		7669	0					
ANR	7681	Sizeof	sizeof		7669	0					
ANR	7682	SizeofOperand	buffer_t		7669	1					
ANR	7683	ExpressionStatement	ptr -> data = ss_malloc ( capacity )	49:4:1326:1361	7669	1	True				
ANR	7684	AssignmentExpression	ptr -> data = ss_malloc ( capacity )		7669	0		=			
ANR	7685	PtrMemberAccess	ptr -> data		7669	0					
ANR	7686	Identifier	ptr		7669	0					
ANR	7687	Identifier	data		7669	1					
ANR	7688	CallExpression	ss_malloc ( capacity )		7669	1					
ANR	7689	Callee	ss_malloc		7669	0					
ANR	7690	Identifier	ss_malloc		7669	0					
ANR	7691	ArgumentList	capacity		7669	1					
ANR	7692	Argument	capacity		7669	0					
ANR	7693	Identifier	capacity		7669	0					
ANR	7694	ExpressionStatement	ptr -> capacity = capacity	50:4:1367:1391	7669	2	True				
ANR	7695	AssignmentExpression	ptr -> capacity = capacity		7669	0		=			
ANR	7696	PtrMemberAccess	ptr -> capacity		7669	0					
ANR	7697	Identifier	ptr		7669	0					
ANR	7698	Identifier	capacity		7669	1					
ANR	7699	Identifier	capacity		7669	1					
ANR	7700	ReturnStatement	return capacity ;	51:4:1397:1412	7669	3	True				
ANR	7701	Identifier	capacity		7669	0					
ANR	7702	ReturnType	int		7669	1					
ANR	7703	Identifier	balloc		7669	2					
ANR	7704	ParameterList	"buffer_t * ptr , size_t capacity"		7669	3					
ANR	7705	Parameter	buffer_t * ptr	46:7:1245:1257	7669	0	True				
ANR	7706	ParameterType	buffer_t *		7669	0					
ANR	7707	Identifier	ptr		7669	1					
ANR	7708	Parameter	size_t capacity	46:22:1260:1274	7669	1	True				
ANR	7709	ParameterType	size_t		7669	0					
ANR	7710	Identifier	capacity		7669	1					
ANR	7711	CFGEntryNode	ENTRY		7669		True				
ANR	7712	CFGExitNode	EXIT		7669		True				
ANR	7713	Symbol	* ptr		7669						
ANR	7714	Symbol	ss_malloc		7669						
ANR	7715	Symbol	ptr -> data		7669						
ANR	7716	Symbol	ptr -> capacity		7669						
ANR	7717	Symbol	ptr		7669						
ANR	7718	Symbol	capacity		7669						
ANR	7719	Function	brealloc	54:0:1417:1737							
ANR	7720	FunctionDef	"brealloc (buffer_t * ptr , size_t len , size_t capacity)"		7719	0					
ANR	7721	CompoundStatement		56:0:1474:1737	7719	0					
ANR	7722	IfStatement	if ( ptr == NULL )		7719	0					
ANR	7723	Condition	ptr == NULL	57:8:1484:1494	7719	0	True				
ANR	7724	EqualityExpression	ptr == NULL		7719	0		==			
ANR	7725	Identifier	ptr		7719	0					
ANR	7726	Identifier	NULL		7719	1					
ANR	7727	ReturnStatement	return - 1 ;	58:8:1505:1514	7719	1	True				
ANR	7728	UnaryOperationExpression	- 1		7719	0					
ANR	7729	UnaryOperator	-		7719	0					
ANR	7730	PrimaryExpression	1		7719	1					
ANR	7731	IdentifierDeclStatement	"size_t real_capacity = max ( len , capacity ) ;"	59:4:1520:1561	7719	1	True				
ANR	7732	IdentifierDecl	"real_capacity = max ( len , capacity )"		7719	0					
ANR	7733	IdentifierDeclType	size_t		7719	0					
ANR	7734	Identifier	real_capacity		7719	1					
ANR	7735	AssignmentExpression	"real_capacity = max ( len , capacity )"		7719	2		=			
ANR	7736	Identifier	real_capacity		7719	0					
ANR	7737	CallExpression	"max ( len , capacity )"		7719	1					
ANR	7738	Callee	max		7719	0					
ANR	7739	Identifier	max		7719	0					
ANR	7740	ArgumentList	len		7719	1					
ANR	7741	Argument	len		7719	0					
ANR	7742	Identifier	len		7719	0					
ANR	7743	Argument	capacity		7719	1					
ANR	7744	Identifier	capacity		7719	0					
ANR	7745	IfStatement	if ( ptr -> capacity < real_capacity )		7719	2					
ANR	7746	Condition	ptr -> capacity < real_capacity	60:8:1571:1599	7719	0	True				
ANR	7747	RelationalExpression	ptr -> capacity < real_capacity		7719	0		<			
ANR	7748	PtrMemberAccess	ptr -> capacity		7719	0					
ANR	7749	Identifier	ptr		7719	0					
ANR	7750	Identifier	capacity		7719	1					
ANR	7751	Identifier	real_capacity		7719	1					
ANR	7752	CompoundStatement		5:39:127:127	7719	1					
ANR	7753	ExpressionStatement	"ptr -> data = ss_realloc ( ptr -> data , real_capacity )"	61:8:1612:1664	7719	0	True				
ANR	7754	AssignmentExpression	"ptr -> data = ss_realloc ( ptr -> data , real_capacity )"		7719	0		=			
ANR	7755	PtrMemberAccess	ptr -> data		7719	0					
ANR	7756	Identifier	ptr		7719	0					
ANR	7757	Identifier	data		7719	1					
ANR	7758	CallExpression	"ss_realloc ( ptr -> data , real_capacity )"		7719	1					
ANR	7759	Callee	ss_realloc		7719	0					
ANR	7760	Identifier	ss_realloc		7719	0					
ANR	7761	ArgumentList	ptr -> data		7719	1					
ANR	7762	Argument	ptr -> data		7719	0					
ANR	7763	PtrMemberAccess	ptr -> data		7719	0					
ANR	7764	Identifier	ptr		7719	0					
ANR	7765	Identifier	data		7719	1					
ANR	7766	Argument	real_capacity		7719	1					
ANR	7767	Identifier	real_capacity		7719	0					
ANR	7768	ExpressionStatement	ptr -> capacity = real_capacity	62:8:1674:1703	7719	1	True				
ANR	7769	AssignmentExpression	ptr -> capacity = real_capacity		7719	0		=			
ANR	7770	PtrMemberAccess	ptr -> capacity		7719	0					
ANR	7771	Identifier	ptr		7719	0					
ANR	7772	Identifier	capacity		7719	1					
ANR	7773	Identifier	real_capacity		7719	1					
ANR	7774	ReturnStatement	return real_capacity ;	64:4:1715:1735	7719	3	True				
ANR	7775	Identifier	real_capacity		7719	0					
ANR	7776	ReturnType	int		7719	1					
ANR	7777	Identifier	brealloc		7719	2					
ANR	7778	ParameterList	"buffer_t * ptr , size_t len , size_t capacity"		7719	3					
ANR	7779	Parameter	buffer_t * ptr	55:9:1430:1442	7719	0	True				
ANR	7780	ParameterType	buffer_t *		7719	0					
ANR	7781	Identifier	ptr		7719	1					
ANR	7782	Parameter	size_t len	55:24:1445:1454	7719	1	True				
ANR	7783	ParameterType	size_t		7719	0					
ANR	7784	Identifier	len		7719	1					
ANR	7785	Parameter	size_t capacity	55:36:1457:1471	7719	2	True				
ANR	7786	ParameterType	size_t		7719	0					
ANR	7787	Identifier	capacity		7719	1					
ANR	7788	CFGEntryNode	ENTRY		7719		True				
ANR	7789	CFGExitNode	EXIT		7719		True				
ANR	7790	Symbol	NULL		7719						
ANR	7791	Symbol	len		7719						
ANR	7792	Symbol	max		7719						
ANR	7793	Symbol	real_capacity		7719						
ANR	7794	Symbol	ss_realloc		7719						
ANR	7795	Symbol	* ptr		7719						
ANR	7796	Symbol	ptr -> capacity		7719						
ANR	7797	Symbol	ptr -> data		7719						
ANR	7798	Symbol	ptr		7719						
ANR	7799	Symbol	capacity		7719						
ANR	7800	Function	bfree	67:0:1740:1937							
ANR	7801	FunctionDef	bfree (buffer_t * ptr)		7800	0					
ANR	7802	CompoundStatement		69:0:1766:1937	7800	0					
ANR	7803	IfStatement	if ( ptr == NULL )		7800	0					
ANR	7804	Condition	ptr == NULL	70:8:1776:1786	7800	0	True				
ANR	7805	EqualityExpression	ptr == NULL		7800	0		==			
ANR	7806	Identifier	ptr		7800	0					
ANR	7807	Identifier	NULL		7800	1					
ANR	7808	ReturnStatement	return ;	71:8:1797:1803	7800	1	True				
ANR	7809	ExpressionStatement	ptr -> idx = 0	72:4:1809:1826	7800	1	True				
ANR	7810	AssignmentExpression	ptr -> idx = 0		7800	0		=			
ANR	7811	PtrMemberAccess	ptr -> idx		7800	0					
ANR	7812	Identifier	ptr		7800	0					
ANR	7813	Identifier	idx		7800	1					
ANR	7814	PrimaryExpression	0		7800	1					
ANR	7815	ExpressionStatement	ptr -> len = 0	73:4:1832:1849	7800	2	True				
ANR	7816	AssignmentExpression	ptr -> len = 0		7800	0		=			
ANR	7817	PtrMemberAccess	ptr -> len		7800	0					
ANR	7818	Identifier	ptr		7800	0					
ANR	7819	Identifier	len		7800	1					
ANR	7820	PrimaryExpression	0		7800	1					
ANR	7821	ExpressionStatement	ptr -> capacity = 0	74:4:1855:1872	7800	3	True				
ANR	7822	AssignmentExpression	ptr -> capacity = 0		7800	0		=			
ANR	7823	PtrMemberAccess	ptr -> capacity		7800	0					
ANR	7824	Identifier	ptr		7800	0					
ANR	7825	Identifier	capacity		7800	1					
ANR	7826	PrimaryExpression	0		7800	1					
ANR	7827	IfStatement	if ( ptr -> data != NULL )		7800	4					
ANR	7828	Condition	ptr -> data != NULL	75:8:1882:1898	7800	0	True				
ANR	7829	EqualityExpression	ptr -> data != NULL		7800	0		!=			
ANR	7830	PtrMemberAccess	ptr -> data		7800	0					
ANR	7831	Identifier	ptr		7800	0					
ANR	7832	Identifier	data		7800	1					
ANR	7833	Identifier	NULL		7800	1					
ANR	7834	CompoundStatement		7:27:134:134	7800	1					
ANR	7835	ExpressionStatement	ss_free ( ptr -> data )	76:8:1911:1929	7800	0	True				
ANR	7836	CallExpression	ss_free ( ptr -> data )		7800	0					
ANR	7837	Callee	ss_free		7800	0					
ANR	7838	Identifier	ss_free		7800	0					
ANR	7839	ArgumentList	ptr -> data		7800	1					
ANR	7840	Argument	ptr -> data		7800	0					
ANR	7841	PtrMemberAccess	ptr -> data		7800	0					
ANR	7842	Identifier	ptr		7800	0					
ANR	7843	Identifier	data		7800	1					
ANR	7844	ReturnType	void		7800	1					
ANR	7845	Identifier	bfree		7800	2					
ANR	7846	ParameterList	buffer_t * ptr		7800	3					
ANR	7847	Parameter	buffer_t * ptr	68:6:1751:1763	7800	0	True				
ANR	7848	ParameterType	buffer_t *		7800	0					
ANR	7849	Identifier	ptr		7800	1					
ANR	7850	CFGEntryNode	ENTRY		7800		True				
ANR	7851	CFGExitNode	EXIT		7800		True				
ANR	7852	Symbol	NULL		7800						
ANR	7853	Symbol	ptr -> idx		7800						
ANR	7854	Symbol	* ptr		7800						
ANR	7855	Symbol	ptr -> capacity		7800						
ANR	7856	Symbol	ptr -> data		7800						
ANR	7857	Symbol	ptr -> len		7800						
ANR	7858	Symbol	ptr		7800						
ANR	7859	Function	bprepend	80:0:1940:2209							
ANR	7860	FunctionDef	"bprepend (buffer_t * dst , buffer_t * src , size_t capacity)"		7859	0					
ANR	7861	CompoundStatement		82:0:2000:2209	7859	0					
ANR	7862	ExpressionStatement	"brealloc ( dst , dst -> len + src -> len , capacity )"	83:4:2006:2050	7859	0	True				
ANR	7863	CallExpression	"brealloc ( dst , dst -> len + src -> len , capacity )"		7859	0					
ANR	7864	Callee	brealloc		7859	0					
ANR	7865	Identifier	brealloc		7859	0					
ANR	7866	ArgumentList	dst		7859	1					
ANR	7867	Argument	dst		7859	0					
ANR	7868	Identifier	dst		7859	0					
ANR	7869	Argument	dst -> len + src -> len		7859	1					
ANR	7870	AdditiveExpression	dst -> len + src -> len		7859	0		+			
ANR	7871	PtrMemberAccess	dst -> len		7859	0					
ANR	7872	Identifier	dst		7859	0					
ANR	7873	Identifier	len		7859	1					
ANR	7874	PtrMemberAccess	src -> len		7859	1					
ANR	7875	Identifier	src		7859	0					
ANR	7876	Identifier	len		7859	1					
ANR	7877	Argument	capacity		7859	2					
ANR	7878	Identifier	capacity		7859	0					
ANR	7879	ExpressionStatement	"memmove ( dst -> data + src -> len , dst -> data , dst -> len )"	84:4:2056:2106	7859	1	True				
ANR	7880	CallExpression	"memmove ( dst -> data + src -> len , dst -> data , dst -> len )"		7859	0					
ANR	7881	Callee	memmove		7859	0					
ANR	7882	Identifier	memmove		7859	0					
ANR	7883	ArgumentList	dst -> data + src -> len		7859	1					
ANR	7884	Argument	dst -> data + src -> len		7859	0					
ANR	7885	AdditiveExpression	dst -> data + src -> len		7859	0		+			
ANR	7886	PtrMemberAccess	dst -> data		7859	0					
ANR	7887	Identifier	dst		7859	0					
ANR	7888	Identifier	data		7859	1					
ANR	7889	PtrMemberAccess	src -> len		7859	1					
ANR	7890	Identifier	src		7859	0					
ANR	7891	Identifier	len		7859	1					
ANR	7892	Argument	dst -> data		7859	1					
ANR	7893	PtrMemberAccess	dst -> data		7859	0					
ANR	7894	Identifier	dst		7859	0					
ANR	7895	Identifier	data		7859	1					
ANR	7896	Argument	dst -> len		7859	2					
ANR	7897	PtrMemberAccess	dst -> len		7859	0					
ANR	7898	Identifier	dst		7859	0					
ANR	7899	Identifier	len		7859	1					
ANR	7900	ExpressionStatement	"memcpy ( dst -> data , src -> data , src -> len )"	85:4:2112:2150	7859	2	True				
ANR	7901	CallExpression	"memcpy ( dst -> data , src -> data , src -> len )"		7859	0					
ANR	7902	Callee	memcpy		7859	0					
ANR	7903	Identifier	memcpy		7859	0					
ANR	7904	ArgumentList	dst -> data		7859	1					
ANR	7905	Argument	dst -> data		7859	0					
ANR	7906	PtrMemberAccess	dst -> data		7859	0					
ANR	7907	Identifier	dst		7859	0					
ANR	7908	Identifier	data		7859	1					
ANR	7909	Argument	src -> data		7859	1					
ANR	7910	PtrMemberAccess	src -> data		7859	0					
ANR	7911	Identifier	src		7859	0					
ANR	7912	Identifier	data		7859	1					
ANR	7913	Argument	src -> len		7859	2					
ANR	7914	PtrMemberAccess	src -> len		7859	0					
ANR	7915	Identifier	src		7859	0					
ANR	7916	Identifier	len		7859	1					
ANR	7917	ExpressionStatement	dst -> len = dst -> len + src -> len	86:4:2156:2186	7859	3	True				
ANR	7918	AssignmentExpression	dst -> len = dst -> len + src -> len		7859	0		=			
ANR	7919	PtrMemberAccess	dst -> len		7859	0					
ANR	7920	Identifier	dst		7859	0					
ANR	7921	Identifier	len		7859	1					
ANR	7922	AdditiveExpression	dst -> len + src -> len		7859	1		+			
ANR	7923	PtrMemberAccess	dst -> len		7859	0					
ANR	7924	Identifier	dst		7859	0					
ANR	7925	Identifier	len		7859	1					
ANR	7926	PtrMemberAccess	src -> len		7859	1					
ANR	7927	Identifier	src		7859	0					
ANR	7928	Identifier	len		7859	1					
ANR	7929	ReturnStatement	return dst -> len ;	87:4:2192:2207	7859	4	True				
ANR	7930	PtrMemberAccess	dst -> len		7859	0					
ANR	7931	Identifier	dst		7859	0					
ANR	7932	Identifier	len		7859	1					
ANR	7933	ReturnType	int		7859	1					
ANR	7934	Identifier	bprepend		7859	2					
ANR	7935	ParameterList	"buffer_t * dst , buffer_t * src , size_t capacity"		7859	3					
ANR	7936	Parameter	buffer_t * dst	81:9:1953:1965	7859	0	True				
ANR	7937	ParameterType	buffer_t *		7859	0					
ANR	7938	Identifier	dst		7859	1					
ANR	7939	Parameter	buffer_t * src	81:24:1968:1980	7859	1	True				
ANR	7940	ParameterType	buffer_t *		7859	0					
ANR	7941	Identifier	src		7859	1					
ANR	7942	Parameter	size_t capacity	81:39:1983:1997	7859	2	True				
ANR	7943	ParameterType	size_t		7859	0					
ANR	7944	Identifier	capacity		7859	1					
ANR	7945	CFGEntryNode	ENTRY		7859		True				
ANR	7946	CFGExitNode	EXIT		7859		True				
ANR	7947	Symbol	* dst		7859						
ANR	7948	Symbol	dst -> len		7859						
ANR	7949	Symbol	dst		7859						
ANR	7950	Symbol	src -> len		7859						
ANR	7951	Symbol	src		7859						
ANR	7952	Symbol	dst -> data		7859						
ANR	7953	Symbol	* src		7859						
ANR	7954	Symbol	src -> data		7859						
ANR	7955	Symbol	capacity		7859						
ANR	7956	Function	rand_bytes	90:0:2212:2329							
ANR	7957	FunctionDef	"rand_bytes (void * output , int len)"		7956	0					
ANR	7958	CompoundStatement		92:0:2250:2329	7956	0					
ANR	7959	ExpressionStatement	"randombytes_buf ( output , len )"	93:4:2256:2284	7956	0	True				
ANR	7960	CallExpression	"randombytes_buf ( output , len )"		7956	0					
ANR	7961	Callee	randombytes_buf		7956	0					
ANR	7962	Identifier	randombytes_buf		7956	0					
ANR	7963	ArgumentList	output		7956	1					
ANR	7964	Argument	output		7956	0					
ANR	7965	Identifier	output		7956	0					
ANR	7966	Argument	len		7956	1					
ANR	7967	Identifier	len		7956	0					
ANR	7968	ReturnStatement	return 0 ;	95:4:2319:2327	7956	1	True				
ANR	7969	PrimaryExpression	0		7956	0					
ANR	7970	ReturnType	int		7956	1					
ANR	7971	Identifier	rand_bytes		7956	2					
ANR	7972	ParameterList	"void * output , int len"		7956	3					
ANR	7973	Parameter	void * output	91:11:2227:2238	7956	0	True				
ANR	7974	ParameterType	void *		7956	0					
ANR	7975	Identifier	output		7956	1					
ANR	7976	Parameter	int len	91:25:2241:2247	7956	1	True				
ANR	7977	ParameterType	int		7956	0					
ANR	7978	Identifier	len		7956	1					
ANR	7979	CFGEntryNode	ENTRY		7956		True				
ANR	7980	CFGExitNode	EXIT		7956		True				
ANR	7981	Symbol	output		7956						
ANR	7982	Symbol	len		7956						
ANR	7983	Function	crypto_md5	98:0:2332:2532							
ANR	7984	FunctionDef	"crypto_md5 (const unsigned char * d , size_t n , unsigned char * md)"		7983	0					
ANR	7985	CompoundStatement		100:0:2412:2532	7983	0					
ANR	7986	Statement	static	101:4:2418:2423	7983	0	True				
ANR	7987	IdentifierDeclStatement	unsigned char m [ 16 ] ;	101:11:2425:2444	7983	1	True				
ANR	7988	IdentifierDecl	m [ 16 ]		7983	0					
ANR	7989	IdentifierDeclType	unsigned char [ 16 ]		7983	0					
ANR	7990	Identifier	m		7983	1					
ANR	7991	PrimaryExpression	16		7983	2					
ANR	7992	IfStatement	if ( md == NULL )		7983	2					
ANR	7993	Condition	md == NULL	102:8:2454:2463	7983	0	True				
ANR	7994	EqualityExpression	md == NULL		7983	0		==			
ANR	7995	Identifier	md		7983	0					
ANR	7996	Identifier	NULL		7983	1					
ANR	7997	CompoundStatement		3:20:53:53	7983	1					
ANR	7998	ExpressionStatement	md = m	103:8:2476:2482	7983	0	True				
ANR	7999	AssignmentExpression	md = m		7983	0		=			
ANR	8000	Identifier	md		7983	0					
ANR	8001	Identifier	m		7983	1					
ANR	8002	ExpressionStatement	"mbedtls_md5 ( d , n , md )"	105:4:2494:2515	7983	3	True				
ANR	8003	CallExpression	"mbedtls_md5 ( d , n , md )"		7983	0					
ANR	8004	Callee	mbedtls_md5		7983	0					
ANR	8005	Identifier	mbedtls_md5		7983	0					
ANR	8006	ArgumentList	d		7983	1					
ANR	8007	Argument	d		7983	0					
ANR	8008	Identifier	d		7983	0					
ANR	8009	Argument	n		7983	1					
ANR	8010	Identifier	n		7983	0					
ANR	8011	Argument	md		7983	2					
ANR	8012	Identifier	md		7983	0					
ANR	8013	ReturnStatement	return md ;	106:4:2521:2530	7983	4	True				
ANR	8014	Identifier	md		7983	0					
ANR	8015	ReturnType	unsigned char *		7983	1					
ANR	8016	Identifier	crypto_md5		7983	2					
ANR	8017	ParameterList	"const unsigned char * d , size_t n , unsigned char * md"		7983	3					
ANR	8018	Parameter	const unsigned char * d	99:11:2359:2380	7983	0	True				
ANR	8019	ParameterType	const unsigned char *		7983	0					
ANR	8020	Identifier	d		7983	1					
ANR	8021	Parameter	size_t n	99:35:2383:2390	7983	1	True				
ANR	8022	ParameterType	size_t		7983	0					
ANR	8023	Identifier	n		7983	1					
ANR	8024	Parameter	unsigned char * md	99:45:2393:2409	7983	2	True				
ANR	8025	ParameterType	unsigned char *		7983	0					
ANR	8026	Identifier	md		7983	1					
ANR	8027	CFGEntryNode	ENTRY		7983		True				
ANR	8028	CFGExitNode	EXIT		7983		True				
ANR	8029	Symbol	NULL		7983						
ANR	8030	Symbol	d		7983						
ANR	8031	Symbol	md		7983						
ANR	8032	Symbol	m		7983						
ANR	8033	Symbol	n		7983						
ANR	8034	Function	entropy_check	109:0:2535:3203							
ANR	8035	FunctionDef	entropy_check ()		8034	0					
ANR	8036	CompoundStatement		111:0:2567:3203	8034	0					
ANR	8037	IdentifierDeclStatement	int fd ;	113:4:2653:2659	8034	0	True				
ANR	8038	IdentifierDecl	fd		8034	0					
ANR	8039	IdentifierDeclType	int		8034	0					
ANR	8040	Identifier	fd		8034	1					
ANR	8041	IdentifierDeclStatement	int c ;	114:4:2665:2670	8034	1	True				
ANR	8042	IdentifierDecl	c		8034	0					
ANR	8043	IdentifierDeclType	int		8034	0					
ANR	8044	Identifier	c		8034	1					
ANR	8045	IfStatement	"if ( ( fd = open ( ""/dev/random"" , O_RDONLY ) ) != - 1 )"		8034	2					
ANR	8046	Condition	"( fd = open ( ""/dev/random"" , O_RDONLY ) ) != - 1"	116:8:2681:2722	8034	0	True				
ANR	8047	EqualityExpression	"( fd = open ( ""/dev/random"" , O_RDONLY ) ) != - 1"		8034	0		!=			
ANR	8048	AssignmentExpression	"fd = open ( ""/dev/random"" , O_RDONLY )"		8034	0		=			
ANR	8049	Identifier	fd		8034	0					
ANR	8050	CallExpression	"open ( ""/dev/random"" , O_RDONLY )"		8034	1					
ANR	8051	Callee	open		8034	0					
ANR	8052	Identifier	open		8034	0					
ANR	8053	ArgumentList	"""/dev/random"""		8034	1					
ANR	8054	Argument	"""/dev/random"""		8034	0					
ANR	8055	PrimaryExpression	"""/dev/random"""		8034	0					
ANR	8056	Argument	O_RDONLY		8034	1					
ANR	8057	Identifier	O_RDONLY		8034	0					
ANR	8058	UnaryOperationExpression	- 1		8034	1					
ANR	8059	UnaryOperator	-		8034	0					
ANR	8060	PrimaryExpression	1		8034	1					
ANR	8061	CompoundStatement		6:52:157:157	8034	1					
ANR	8062	IfStatement	"if ( ioctl ( fd , RNDGETENTCNT , & c ) == 0 && c < 160 )"		8034	0					
ANR	8063	Condition	"ioctl ( fd , RNDGETENTCNT , & c ) == 0 && c < 160"	117:12:2739:2781	8034	0	True				
ANR	8064	AndExpression	"ioctl ( fd , RNDGETENTCNT , & c ) == 0 && c < 160"		8034	0		&&			
ANR	8065	EqualityExpression	"ioctl ( fd , RNDGETENTCNT , & c ) == 0"		8034	0		==			
ANR	8066	CallExpression	"ioctl ( fd , RNDGETENTCNT , & c )"		8034	0					
ANR	8067	Callee	ioctl		8034	0					
ANR	8068	Identifier	ioctl		8034	0					
ANR	8069	ArgumentList	fd		8034	1					
ANR	8070	Argument	fd		8034	0					
ANR	8071	Identifier	fd		8034	0					
ANR	8072	Argument	RNDGETENTCNT		8034	1					
ANR	8073	Identifier	RNDGETENTCNT		8034	0					
ANR	8074	Argument	& c		8034	2					
ANR	8075	UnaryOperationExpression	& c		8034	0					
ANR	8076	UnaryOperator	&		8034	0					
ANR	8077	Identifier	c		8034	1					
ANR	8078	PrimaryExpression	0		8034	1					
ANR	8079	RelationalExpression	c < 160		8034	1		<			
ANR	8080	Identifier	c		8034	0					
ANR	8081	PrimaryExpression	160		8034	1					
ANR	8082	CompoundStatement		7:57:216:216	8034	1					
ANR	8083	Statement	LOGI	118:12:2798:2801	8034	0	True				
ANR	8084	Statement	(	118:16:2802:2802	8034	1	True				
ANR	8085	Statement	"""This system doesn't provide enough entropy to quickly generate high-quality random numbers\\n"""	118:17:2803:2896	8034	2	True				
ANR	8086	Statement	"""Installing the rng-utils/rng-tools or haveged packages may help.\\n"""	119:17:2915:2982	8034	3	True				
ANR	8087	Statement	"""On virtualized Linux environments, also consider using virtio-rng.\\n"""	120:17:3001:3070	8034	4	True				
ANR	8088	Statement	"""The service will not start until enough entropy has been collected."""	121:17:3089:3157	8034	5	True				
ANR	8089	Statement	)	121:86:3158:3158	8034	6	True				
ANR	8090	ExpressionStatement		121:87:3159:3159	8034	7	True				
ANR	8091	ExpressionStatement	close ( fd )	123:8:3179:3188	8034	1	True				
ANR	8092	CallExpression	close ( fd )		8034	0					
ANR	8093	Callee	close		8034	0					
ANR	8094	Identifier	close		8034	0					
ANR	8095	ArgumentList	fd		8034	1					
ANR	8096	Argument	fd		8034	0					
ANR	8097	Identifier	fd		8034	0					
ANR	8098	ReturnType	static void		8034	1					
ANR	8099	Identifier	entropy_check		8034	2					
ANR	8100	ParameterList			8034	3					
ANR	8101	CFGEntryNode	ENTRY		8034		True				
ANR	8102	CFGExitNode	EXIT		8034		True				
ANR	8103	Symbol	c		8034						
ANR	8104	Symbol	O_RDONLY		8034						
ANR	8105	Symbol	RNDGETENTCNT		8034						
ANR	8106	Symbol	& c		8034						
ANR	8107	Symbol	fd		8034						
ANR	8108	Symbol	open		8034						
ANR	8109	Symbol	ioctl		8034						
ANR	8110	Function	crypto_init	128:0:3206:5505							
ANR	8111	FunctionDef	"crypto_init (const char * password , const char * key , const char * method)"		8110	0					
ANR	8112	CompoundStatement		130:0:3288:5505	8110	0					
ANR	8113	IdentifierDeclStatement	"int i , m = - 1 ;"	131:4:3294:3307	8110	0	True				
ANR	8114	IdentifierDecl	i		8110	0					
ANR	8115	IdentifierDeclType	int		8110	0					
ANR	8116	Identifier	i		8110	1					
ANR	8117	IdentifierDecl	m = - 1		8110	1					
ANR	8118	IdentifierDeclType	int		8110	0					
ANR	8119	Identifier	m		8110	1					
ANR	8120	AssignmentExpression	m = - 1		8110	2		=			
ANR	8121	Identifier	m		8110	0					
ANR	8122	UnaryOperationExpression	- 1		8110	1					
ANR	8123	UnaryOperator	-		8110	0					
ANR	8124	PrimaryExpression	1		8110	1					
ANR	8125	ExpressionStatement	entropy_check ( )	133:4:3314:3329	8110	1	True				
ANR	8126	CallExpression	entropy_check ( )		8110	0					
ANR	8127	Callee	entropy_check		8110	0					
ANR	8128	Identifier	entropy_check		8110	0					
ANR	8129	ArgumentList			8110	1					
ANR	8130	IfStatement	if ( sodium_init ( ) == - 1 )		8110	2					
ANR	8131	Condition	sodium_init ( ) == - 1	135:8:3385:3403	8110	0	True				
ANR	8132	EqualityExpression	sodium_init ( ) == - 1		8110	0		==			
ANR	8133	CallExpression	sodium_init ( )		8110	0					
ANR	8134	Callee	sodium_init		8110	0					
ANR	8135	Identifier	sodium_init		8110	0					
ANR	8136	ArgumentList			8110	1					
ANR	8137	UnaryOperationExpression	- 1		8110	1					
ANR	8138	UnaryOperator	-		8110	0					
ANR	8139	PrimaryExpression	1		8110	1					
ANR	8140	CompoundStatement		6:29:117:117	8110	1					
ANR	8141	ExpressionStatement	"FATAL ( ""Failed to initialize sodium"" )"	136:8:3416:3452	8110	0	True				
ANR	8142	CallExpression	"FATAL ( ""Failed to initialize sodium"" )"		8110	0					
ANR	8143	Callee	FATAL		8110	0					
ANR	8144	Identifier	FATAL		8110	0					
ANR	8145	ArgumentList	"""Failed to initialize sodium"""		8110	1					
ANR	8146	Argument	"""Failed to initialize sodium"""		8110	0					
ANR	8147	PrimaryExpression	"""Failed to initialize sodium"""		8110	0					
ANR	8148	ExpressionStatement	"ppbloom_init ( BF_NUM_ENTRIES_FOR_SERVER , BF_ERROR_RATE_FOR_SERVER )"	141:4:3523:3588	8110	3	True				
ANR	8149	CallExpression	"ppbloom_init ( BF_NUM_ENTRIES_FOR_SERVER , BF_ERROR_RATE_FOR_SERVER )"		8110	0					
ANR	8150	Callee	ppbloom_init		8110	0					
ANR	8151	Identifier	ppbloom_init		8110	0					
ANR	8152	ArgumentList	BF_NUM_ENTRIES_FOR_SERVER		8110	1					
ANR	8153	Argument	BF_NUM_ENTRIES_FOR_SERVER		8110	0					
ANR	8154	Identifier	BF_NUM_ENTRIES_FOR_SERVER		8110	0					
ANR	8155	Argument	BF_ERROR_RATE_FOR_SERVER		8110	1					
ANR	8156	Identifier	BF_ERROR_RATE_FOR_SERVER		8110	0					
ANR	8157	IfStatement	if ( method != NULL )		8110	4					
ANR	8158	Condition	method != NULL	146:8:3683:3696	8110	0	True				
ANR	8159	EqualityExpression	method != NULL		8110	0		!=			
ANR	8160	Identifier	method		8110	0					
ANR	8161	Identifier	NULL		8110	1					
ANR	8162	CompoundStatement		17:24:410:410	8110	1					
ANR	8163	ForStatement	for ( i = 0 ; i < STREAM_CIPHER_NUM ; i ++ )		8110	0					
ANR	8164	ForInit	i = 0 ;	147:13:3714:3719	8110	0	True				
ANR	8165	AssignmentExpression	i = 0		8110	0		=			
ANR	8166	Identifier	i		8110	0					
ANR	8167	PrimaryExpression	0		8110	1					
ANR	8168	Condition	i < STREAM_CIPHER_NUM	147:20:3721:3741	8110	1	True				
ANR	8169	RelationalExpression	i < STREAM_CIPHER_NUM		8110	0		<			
ANR	8170	Identifier	i		8110	0					
ANR	8171	Identifier	STREAM_CIPHER_NUM		8110	1					
ANR	8172	PostIncDecOperationExpression	i ++	147:43:3744:3746	8110	2	True				
ANR	8173	Identifier	i		8110	0					
ANR	8174	IncDec	++		8110	1					
ANR	8175	IfStatement	"if ( strcmp ( method , supported_stream_ciphers [ i ] ) == 0 )"		8110	3					
ANR	8176	Condition	"strcmp ( method , supported_stream_ciphers [ i ] ) == 0"	148:16:3765:3812	8110	0	True				
ANR	8177	EqualityExpression	"strcmp ( method , supported_stream_ciphers [ i ] ) == 0"		8110	0		==			
ANR	8178	CallExpression	"strcmp ( method , supported_stream_ciphers [ i ] )"		8110	0					
ANR	8179	Callee	strcmp		8110	0					
ANR	8180	Identifier	strcmp		8110	0					
ANR	8181	ArgumentList	method		8110	1					
ANR	8182	Argument	method		8110	0					
ANR	8183	Identifier	method		8110	0					
ANR	8184	Argument	supported_stream_ciphers [ i ]		8110	1					
ANR	8185	ArrayIndexing	supported_stream_ciphers [ i ]		8110	0					
ANR	8186	Identifier	supported_stream_ciphers		8110	0					
ANR	8187	Identifier	i		8110	1					
ANR	8188	PrimaryExpression	0		8110	1					
ANR	8189	CompoundStatement		19:66:526:526	8110	1					
ANR	8190	ExpressionStatement	m = i	149:16:3833:3838	8110	0	True				
ANR	8191	AssignmentExpression	m = i		8110	0		=			
ANR	8192	Identifier	m		8110	0					
ANR	8193	Identifier	i		8110	1					
ANR	8194	BreakStatement	break ;	150:16:3856:3861	8110	1	True				
ANR	8195	IfStatement	if ( m != - 1 )		8110	1					
ANR	8196	Condition	m != - 1	152:12:3889:3895	8110	0	True				
ANR	8197	EqualityExpression	m != - 1		8110	0		!=			
ANR	8198	Identifier	m		8110	0					
ANR	8199	UnaryOperationExpression	- 1		8110	1					
ANR	8200	UnaryOperator	-		8110	0					
ANR	8201	PrimaryExpression	1		8110	1					
ANR	8202	CompoundStatement		27:12:751:809	8110	1					
ANR	8203	IdentifierDeclStatement	"cipher_t * cipher = stream_init ( password , key , method ) ;"	153:12:3912:3965	8110	0	True				
ANR	8204	IdentifierDecl	"* cipher = stream_init ( password , key , method )"		8110	0					
ANR	8205	IdentifierDeclType	cipher_t *		8110	0					
ANR	8206	Identifier	cipher		8110	1					
ANR	8207	AssignmentExpression	"* cipher = stream_init ( password , key , method )"		8110	2		=			
ANR	8208	Identifier	cipher		8110	0					
ANR	8209	CallExpression	"stream_init ( password , key , method )"		8110	1					
ANR	8210	Callee	stream_init		8110	0					
ANR	8211	Identifier	stream_init		8110	0					
ANR	8212	ArgumentList	password		8110	1					
ANR	8213	Argument	password		8110	0					
ANR	8214	Identifier	password		8110	0					
ANR	8215	Argument	key		8110	1					
ANR	8216	Identifier	key		8110	0					
ANR	8217	Argument	method		8110	2					
ANR	8218	Identifier	method		8110	0					
ANR	8219	IfStatement	if ( cipher == NULL )		8110	1					
ANR	8220	Condition	cipher == NULL	154:16:3983:3996	8110	0	True				
ANR	8221	EqualityExpression	cipher == NULL		8110	0		==			
ANR	8222	Identifier	cipher		8110	0					
ANR	8223	Identifier	NULL		8110	1					
ANR	8224	ReturnStatement	return NULL ;	155:16:4015:4026	8110	1	True				
ANR	8225	Identifier	NULL		8110	0					
ANR	8226	IdentifierDeclStatement	crypto_t * crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) ) ;	156:12:4040:4098	8110	2	True				
ANR	8227	IdentifierDecl	* crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	0					
ANR	8228	IdentifierDeclType	crypto_t *		8110	0					
ANR	8229	Identifier	crypto		8110	1					
ANR	8230	AssignmentExpression	* crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	2		=			
ANR	8231	Identifier	crypto		8110	0					
ANR	8232	CastExpression	( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	1					
ANR	8233	CastTarget	crypto_t *		8110	0					
ANR	8234	CallExpression	ss_malloc ( sizeof ( crypto_t ) )		8110	1					
ANR	8235	Callee	ss_malloc		8110	0					
ANR	8236	Identifier	ss_malloc		8110	0					
ANR	8237	ArgumentList	sizeof ( crypto_t )		8110	1					
ANR	8238	Argument	sizeof ( crypto_t )		8110	0					
ANR	8239	SizeofExpression	sizeof ( crypto_t )		8110	0					
ANR	8240	Sizeof	sizeof		8110	0					
ANR	8241	SizeofOperand	crypto_t		8110	1					
ANR	8242	Statement	crypto_t	157:12:4112:4119	8110	3	True				
ANR	8243	Statement	tmp	157:21:4121:4123	8110	4	True				
ANR	8244	Statement	=	157:29:4129:4129	8110	5	True				
ANR	8245	CompoundStatement		28:31:842:842	8110	6					
ANR	8246	Statement	.	158:16:4149:4149	8110	0	True				
ANR	8247	Statement	cipher	158:17:4150:4155	8110	1	True				
ANR	8248	Statement	=	158:29:4162:4162	8110	2	True				
ANR	8249	Statement	cipher	158:31:4164:4169	8110	3	True				
ANR	8250	Statement	","	158:37:4170:4170	8110	4	True				
ANR	8251	Statement	.	159:16:4188:4188	8110	5	True				
ANR	8252	Statement	encrypt_all	159:17:4189:4199	8110	6	True				
ANR	8253	Statement	=	159:29:4201:4201	8110	7	True				
ANR	8254	Statement	&	159:31:4203:4203	8110	8	True				
ANR	8255	Statement	stream_encrypt_all	159:32:4204:4221	8110	9	True				
ANR	8256	Statement	","	159:50:4222:4222	8110	10	True				
ANR	8257	Statement	.	160:16:4240:4240	8110	11	True				
ANR	8258	Statement	decrypt_all	160:17:4241:4251	8110	12	True				
ANR	8259	Statement	=	160:29:4253:4253	8110	13	True				
ANR	8260	Statement	&	160:31:4255:4255	8110	14	True				
ANR	8261	Statement	stream_decrypt_all	160:32:4256:4273	8110	15	True				
ANR	8262	Statement	","	160:50:4274:4274	8110	16	True				
ANR	8263	Statement	.	161:16:4292:4292	8110	17	True				
ANR	8264	Statement	encrypt	161:17:4293:4299	8110	18	True				
ANR	8265	Statement	=	161:29:4305:4305	8110	19	True				
ANR	8266	Statement	&	161:31:4307:4307	8110	20	True				
ANR	8267	Statement	stream_encrypt	161:32:4308:4321	8110	21	True				
ANR	8268	Statement	","	161:46:4322:4322	8110	22	True				
ANR	8269	Statement	.	162:16:4340:4340	8110	23	True				
ANR	8270	Statement	decrypt	162:17:4341:4347	8110	24	True				
ANR	8271	Statement	=	162:29:4353:4353	8110	25	True				
ANR	8272	Statement	&	162:31:4355:4355	8110	26	True				
ANR	8273	Statement	stream_decrypt	162:32:4356:4369	8110	27	True				
ANR	8274	Statement	","	162:46:4370:4370	8110	28	True				
ANR	8275	Statement	.	163:16:4388:4388	8110	29	True				
ANR	8276	Statement	ctx_init	163:17:4389:4396	8110	30	True				
ANR	8277	Statement	=	163:29:4401:4401	8110	31	True				
ANR	8278	Statement	&	163:31:4403:4403	8110	32	True				
ANR	8279	Statement	stream_ctx_init	163:32:4404:4418	8110	33	True				
ANR	8280	Statement	","	163:47:4419:4419	8110	34	True				
ANR	8281	Statement	.	164:16:4437:4437	8110	35	True				
ANR	8282	Statement	ctx_release	164:17:4438:4448	8110	36	True				
ANR	8283	Statement	=	164:29:4450:4450	8110	37	True				
ANR	8284	Statement	&	164:31:4452:4452	8110	38	True				
ANR	8285	Statement	stream_ctx_release	164:32:4453:4470	8110	39	True				
ANR	8286	Statement	","	164:50:4471:4471	8110	40	True				
ANR	8287	ExpressionStatement		165:13:4486:4486	8110	7	True				
ANR	8288	ExpressionStatement	"memcpy ( crypto , & tmp , sizeof ( crypto_t ) )"	166:12:4500:4538	8110	8	True				
ANR	8289	CallExpression	"memcpy ( crypto , & tmp , sizeof ( crypto_t ) )"		8110	0					
ANR	8290	Callee	memcpy		8110	0					
ANR	8291	Identifier	memcpy		8110	0					
ANR	8292	ArgumentList	crypto		8110	1					
ANR	8293	Argument	crypto		8110	0					
ANR	8294	Identifier	crypto		8110	0					
ANR	8295	Argument	& tmp		8110	1					
ANR	8296	UnaryOperationExpression	& tmp		8110	0					
ANR	8297	UnaryOperator	&		8110	0					
ANR	8298	Identifier	tmp		8110	1					
ANR	8299	Argument	sizeof ( crypto_t )		8110	2					
ANR	8300	SizeofExpression	sizeof ( crypto_t )		8110	0					
ANR	8301	Sizeof	sizeof		8110	0					
ANR	8302	SizeofOperand	crypto_t		8110	1					
ANR	8303	ReturnStatement	return crypto ;	167:12:4552:4565	8110	9	True				
ANR	8304	Identifier	crypto		8110	0					
ANR	8305	ForStatement	for ( i = 0 ; i < AEAD_CIPHER_NUM ; i ++ )		8110	2					
ANR	8306	ForInit	i = 0 ;	170:13:4591:4596	8110	0	True				
ANR	8307	AssignmentExpression	i = 0		8110	0		=			
ANR	8308	Identifier	i		8110	0					
ANR	8309	PrimaryExpression	0		8110	1					
ANR	8310	Condition	i < AEAD_CIPHER_NUM	170:20:4598:4616	8110	1	True				
ANR	8311	RelationalExpression	i < AEAD_CIPHER_NUM		8110	0		<			
ANR	8312	Identifier	i		8110	0					
ANR	8313	Identifier	AEAD_CIPHER_NUM		8110	1					
ANR	8314	PostIncDecOperationExpression	i ++	170:41:4619:4621	8110	2	True				
ANR	8315	Identifier	i		8110	0					
ANR	8316	IncDec	++		8110	1					
ANR	8317	IfStatement	"if ( strcmp ( method , supported_aead_ciphers [ i ] ) == 0 )"		8110	3					
ANR	8318	Condition	"strcmp ( method , supported_aead_ciphers [ i ] ) == 0"	171:16:4640:4685	8110	0	True				
ANR	8319	EqualityExpression	"strcmp ( method , supported_aead_ciphers [ i ] ) == 0"		8110	0		==			
ANR	8320	CallExpression	"strcmp ( method , supported_aead_ciphers [ i ] )"		8110	0					
ANR	8321	Callee	strcmp		8110	0					
ANR	8322	Identifier	strcmp		8110	0					
ANR	8323	ArgumentList	method		8110	1					
ANR	8324	Argument	method		8110	0					
ANR	8325	Identifier	method		8110	0					
ANR	8326	Argument	supported_aead_ciphers [ i ]		8110	1					
ANR	8327	ArrayIndexing	supported_aead_ciphers [ i ]		8110	0					
ANR	8328	Identifier	supported_aead_ciphers		8110	0					
ANR	8329	Identifier	i		8110	1					
ANR	8330	PrimaryExpression	0		8110	1					
ANR	8331	CompoundStatement		42:64:1399:1399	8110	1					
ANR	8332	ExpressionStatement	m = i	172:16:4706:4711	8110	0	True				
ANR	8333	AssignmentExpression	m = i		8110	0		=			
ANR	8334	Identifier	m		8110	0					
ANR	8335	Identifier	i		8110	1					
ANR	8336	BreakStatement	break ;	173:16:4729:4734	8110	1	True				
ANR	8337	IfStatement	if ( m != - 1 )		8110	3					
ANR	8338	Condition	m != - 1	175:12:4762:4768	8110	0	True				
ANR	8339	EqualityExpression	m != - 1		8110	0		!=			
ANR	8340	Identifier	m		8110	0					
ANR	8341	UnaryOperationExpression	- 1		8110	1					
ANR	8342	UnaryOperator	-		8110	0					
ANR	8343	PrimaryExpression	1		8110	1					
ANR	8344	CompoundStatement		50:12:1622:1680	8110	1					
ANR	8345	IdentifierDeclStatement	"cipher_t * cipher = aead_init ( password , key , method ) ;"	176:12:4785:4836	8110	0	True				
ANR	8346	IdentifierDecl	"* cipher = aead_init ( password , key , method )"		8110	0					
ANR	8347	IdentifierDeclType	cipher_t *		8110	0					
ANR	8348	Identifier	cipher		8110	1					
ANR	8349	AssignmentExpression	"* cipher = aead_init ( password , key , method )"		8110	2		=			
ANR	8350	Identifier	cipher		8110	0					
ANR	8351	CallExpression	"aead_init ( password , key , method )"		8110	1					
ANR	8352	Callee	aead_init		8110	0					
ANR	8353	Identifier	aead_init		8110	0					
ANR	8354	ArgumentList	password		8110	1					
ANR	8355	Argument	password		8110	0					
ANR	8356	Identifier	password		8110	0					
ANR	8357	Argument	key		8110	1					
ANR	8358	Identifier	key		8110	0					
ANR	8359	Argument	method		8110	2					
ANR	8360	Identifier	method		8110	0					
ANR	8361	IfStatement	if ( cipher == NULL )		8110	1					
ANR	8362	Condition	cipher == NULL	177:16:4854:4867	8110	0	True				
ANR	8363	EqualityExpression	cipher == NULL		8110	0		==			
ANR	8364	Identifier	cipher		8110	0					
ANR	8365	Identifier	NULL		8110	1					
ANR	8366	ReturnStatement	return NULL ;	178:16:4886:4897	8110	1	True				
ANR	8367	Identifier	NULL		8110	0					
ANR	8368	IdentifierDeclStatement	crypto_t * crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) ) ;	179:12:4911:4969	8110	2	True				
ANR	8369	IdentifierDecl	* crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	0					
ANR	8370	IdentifierDeclType	crypto_t *		8110	0					
ANR	8371	Identifier	crypto		8110	1					
ANR	8372	AssignmentExpression	* crypto = ( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	2		=			
ANR	8373	Identifier	crypto		8110	0					
ANR	8374	CastExpression	( crypto_t * ) ss_malloc ( sizeof ( crypto_t ) )		8110	1					
ANR	8375	CastTarget	crypto_t *		8110	0					
ANR	8376	CallExpression	ss_malloc ( sizeof ( crypto_t ) )		8110	1					
ANR	8377	Callee	ss_malloc		8110	0					
ANR	8378	Identifier	ss_malloc		8110	0					
ANR	8379	ArgumentList	sizeof ( crypto_t )		8110	1					
ANR	8380	Argument	sizeof ( crypto_t )		8110	0					
ANR	8381	SizeofExpression	sizeof ( crypto_t )		8110	0					
ANR	8382	Sizeof	sizeof		8110	0					
ANR	8383	SizeofOperand	crypto_t		8110	1					
ANR	8384	Statement	crypto_t	180:12:4983:4990	8110	3	True				
ANR	8385	Statement	tmp	180:21:4992:4994	8110	4	True				
ANR	8386	Statement	=	180:29:5000:5000	8110	5	True				
ANR	8387	CompoundStatement		51:31:1713:1713	8110	6					
ANR	8388	Statement	.	181:16:5020:5020	8110	0	True				
ANR	8389	Statement	cipher	181:17:5021:5026	8110	1	True				
ANR	8390	Statement	=	181:29:5033:5033	8110	2	True				
ANR	8391	Statement	cipher	181:31:5035:5040	8110	3	True				
ANR	8392	Statement	","	181:37:5041:5041	8110	4	True				
ANR	8393	Statement	.	182:16:5059:5059	8110	5	True				
ANR	8394	Statement	encrypt_all	182:17:5060:5070	8110	6	True				
ANR	8395	Statement	=	182:29:5072:5072	8110	7	True				
ANR	8396	Statement	&	182:31:5074:5074	8110	8	True				
ANR	8397	Statement	aead_encrypt_all	182:32:5075:5090	8110	9	True				
ANR	8398	Statement	","	182:48:5091:5091	8110	10	True				
ANR	8399	Statement	.	183:16:5109:5109	8110	11	True				
ANR	8400	Statement	decrypt_all	183:17:5110:5120	8110	12	True				
ANR	8401	Statement	=	183:29:5122:5122	8110	13	True				
ANR	8402	Statement	&	183:31:5124:5124	8110	14	True				
ANR	8403	Statement	aead_decrypt_all	183:32:5125:5140	8110	15	True				
ANR	8404	Statement	","	183:48:5141:5141	8110	16	True				
ANR	8405	Statement	.	184:16:5159:5159	8110	17	True				
ANR	8406	Statement	encrypt	184:17:5160:5166	8110	18	True				
ANR	8407	Statement	=	184:29:5172:5172	8110	19	True				
ANR	8408	Statement	&	184:31:5174:5174	8110	20	True				
ANR	8409	Statement	aead_encrypt	184:32:5175:5186	8110	21	True				
ANR	8410	Statement	","	184:44:5187:5187	8110	22	True				
ANR	8411	Statement	.	185:16:5205:5205	8110	23	True				
ANR	8412	Statement	decrypt	185:17:5206:5212	8110	24	True				
ANR	8413	Statement	=	185:29:5218:5218	8110	25	True				
ANR	8414	Statement	&	185:31:5220:5220	8110	26	True				
ANR	8415	Statement	aead_decrypt	185:32:5221:5232	8110	27	True				
ANR	8416	Statement	","	185:44:5233:5233	8110	28	True				
ANR	8417	Statement	.	186:16:5251:5251	8110	29	True				
ANR	8418	Statement	ctx_init	186:17:5252:5259	8110	30	True				
ANR	8419	Statement	=	186:29:5264:5264	8110	31	True				
ANR	8420	Statement	&	186:31:5266:5266	8110	32	True				
ANR	8421	Statement	aead_ctx_init	186:32:5267:5279	8110	33	True				
ANR	8422	Statement	","	186:45:5280:5280	8110	34	True				
ANR	8423	Statement	.	187:16:5298:5298	8110	35	True				
ANR	8424	Statement	ctx_release	187:17:5299:5309	8110	36	True				
ANR	8425	Statement	=	187:29:5311:5311	8110	37	True				
ANR	8426	Statement	&	187:31:5313:5313	8110	38	True				
ANR	8427	Statement	aead_ctx_release	187:32:5314:5329	8110	39	True				
ANR	8428	Statement	","	187:48:5330:5330	8110	40	True				
ANR	8429	ExpressionStatement		188:13:5345:5345	8110	7	True				
ANR	8430	ExpressionStatement	"memcpy ( crypto , & tmp , sizeof ( crypto_t ) )"	189:12:5359:5397	8110	8	True				
ANR	8431	CallExpression	"memcpy ( crypto , & tmp , sizeof ( crypto_t ) )"		8110	0					
ANR	8432	Callee	memcpy		8110	0					
ANR	8433	Identifier	memcpy		8110	0					
ANR	8434	ArgumentList	crypto		8110	1					
ANR	8435	Argument	crypto		8110	0					
ANR	8436	Identifier	crypto		8110	0					
ANR	8437	Argument	& tmp		8110	1					
ANR	8438	UnaryOperationExpression	& tmp		8110	0					
ANR	8439	UnaryOperator	&		8110	0					
ANR	8440	Identifier	tmp		8110	1					
ANR	8441	Argument	sizeof ( crypto_t )		8110	2					
ANR	8442	SizeofExpression	sizeof ( crypto_t )		8110	0					
ANR	8443	Sizeof	sizeof		8110	0					
ANR	8444	SizeofOperand	crypto_t		8110	1					
ANR	8445	ReturnStatement	return crypto ;	190:12:5411:5424	8110	9	True				
ANR	8446	Identifier	crypto		8110	0					
ANR	8447	ExpressionStatement	"LOGE ( ""invalid cipher name: %s"" , method )"	194:4:5447:5486	8110	5	True				
ANR	8448	CallExpression	"LOGE ( ""invalid cipher name: %s"" , method )"		8110	0					
ANR	8449	Callee	LOGE		8110	0					
ANR	8450	Identifier	LOGE		8110	0					
ANR	8451	ArgumentList	"""invalid cipher name: %s"""		8110	1					
ANR	8452	Argument	"""invalid cipher name: %s"""		8110	0					
ANR	8453	PrimaryExpression	"""invalid cipher name: %s"""		8110	0					
ANR	8454	Argument	method		8110	1					
ANR	8455	Identifier	method		8110	0					
ANR	8456	ReturnStatement	return NULL ;	195:4:5492:5503	8110	6	True				
ANR	8457	Identifier	NULL		8110	0					
ANR	8458	ReturnType	crypto_t *		8110	1					
ANR	8459	Identifier	crypto_init		8110	2					
ANR	8460	ParameterList	"const char * password , const char * key , const char * method"		8110	3					
ANR	8461	Parameter	const char * password	129:12:3229:3248	8110	0	True				
ANR	8462	ParameterType	const char *		8110	0					
ANR	8463	Identifier	password		8110	1					
ANR	8464	Parameter	const char * key	129:34:3251:3265	8110	1	True				
ANR	8465	ParameterType	const char *		8110	0					
ANR	8466	Identifier	key		8110	1					
ANR	8467	Parameter	const char * method	129:51:3268:3285	8110	2	True				
ANR	8468	ParameterType	const char *		8110	0					
ANR	8469	Identifier	method		8110	1					
ANR	8470	CFGEntryNode	ENTRY		8110		True				
ANR	8471	CFGExitNode	EXIT		8110		True				
ANR	8472	Symbol	strcmp		8110						
ANR	8473	Symbol	cipher		8110						
ANR	8474	Symbol	NULL		8110						
ANR	8475	Symbol	method		8110						
ANR	8476	Symbol	* supported_aead_ciphers		8110						
ANR	8477	Symbol	sodium_init		8110						
ANR	8478	Symbol	i		8110						
ANR	8479	Symbol	STREAM_CIPHER_NUM		8110						
ANR	8480	Symbol	BF_NUM_ENTRIES_FOR_SERVER		8110						
ANR	8481	Symbol	* supported_stream_ciphers		8110						
ANR	8482	Symbol	m		8110						
ANR	8483	Symbol	crypto		8110						
ANR	8484	Symbol	supported_stream_ciphers		8110						
ANR	8485	Symbol	password		8110						
ANR	8486	Symbol	* i		8110						
ANR	8487	Symbol	stream_init		8110						
ANR	8488	Symbol	AEAD_CIPHER_NUM		8110						
ANR	8489	Symbol	ss_malloc		8110						
ANR	8490	Symbol	aead_init		8110						
ANR	8491	Symbol	& tmp		8110						
ANR	8492	Symbol	key		8110						
ANR	8493	Symbol	supported_aead_ciphers		8110						
ANR	8494	Symbol	BF_ERROR_RATE_FOR_SERVER		8110						
ANR	8495	Function	crypto_derive_key	198:0:5508:6539							
ANR	8496	FunctionDef	"crypto_derive_key (const char * pass , uint8_t * key , size_t key_len)"		8495	0					
ANR	8497	CompoundStatement		200:0:5578:6539	8495	0					
ANR	8498	IdentifierDeclStatement	size_t datal ;	201:4:5584:5596	8495	0	True				
ANR	8499	IdentifierDecl	datal		8495	0					
ANR	8500	IdentifierDeclType	size_t		8495	0					
ANR	8501	Identifier	datal		8495	1					
ANR	8502	ExpressionStatement	datal = strlen ( ( const char * ) pass )	202:4:5602:5636	8495	1	True				
ANR	8503	AssignmentExpression	datal = strlen ( ( const char * ) pass )		8495	0		=			
ANR	8504	Identifier	datal		8495	0					
ANR	8505	CallExpression	strlen ( ( const char * ) pass )		8495	1					
ANR	8506	Callee	strlen		8495	0					
ANR	8507	Identifier	strlen		8495	0					
ANR	8508	ArgumentList	( const char * ) pass		8495	1					
ANR	8509	Argument	( const char * ) pass		8495	0					
ANR	8510	CastExpression	( const char * ) pass		8495	0					
ANR	8511	CastTarget	const char *		8495	0					
ANR	8512	Identifier	pass		8495	1					
ANR	8513	IdentifierDeclStatement	"const digest_type_t * md = mbedtls_md_info_from_string ( ""MD5"" ) ;"	204:4:5643:5703	8495	2	True				
ANR	8514	IdentifierDecl	"* md = mbedtls_md_info_from_string ( ""MD5"" )"		8495	0					
ANR	8515	IdentifierDeclType	const digest_type_t *		8495	0					
ANR	8516	Identifier	md		8495	1					
ANR	8517	AssignmentExpression	"* md = mbedtls_md_info_from_string ( ""MD5"" )"		8495	2		=			
ANR	8518	Identifier	md		8495	0					
ANR	8519	CallExpression	"mbedtls_md_info_from_string ( ""MD5"" )"		8495	1					
ANR	8520	Callee	mbedtls_md_info_from_string		8495	0					
ANR	8521	Identifier	mbedtls_md_info_from_string		8495	0					
ANR	8522	ArgumentList	"""MD5"""		8495	1					
ANR	8523	Argument	"""MD5"""		8495	0					
ANR	8524	PrimaryExpression	"""MD5"""		8495	0					
ANR	8525	IfStatement	if ( md == NULL )		8495	3					
ANR	8526	Condition	md == NULL	205:8:5713:5722	8495	0	True				
ANR	8527	EqualityExpression	md == NULL		8495	0		==			
ANR	8528	Identifier	md		8495	0					
ANR	8529	Identifier	NULL		8495	1					
ANR	8530	CompoundStatement		6:20:146:146	8495	1					
ANR	8531	ExpressionStatement	"FATAL ( ""MD5 Digest not found in crypto library"" )"	206:8:5735:5782	8495	0	True				
ANR	8532	CallExpression	"FATAL ( ""MD5 Digest not found in crypto library"" )"		8495	0					
ANR	8533	Callee	FATAL		8495	0					
ANR	8534	Identifier	FATAL		8495	0					
ANR	8535	ArgumentList	"""MD5 Digest not found in crypto library"""		8495	1					
ANR	8536	Argument	"""MD5 Digest not found in crypto library"""		8495	0					
ANR	8537	PrimaryExpression	"""MD5 Digest not found in crypto library"""		8495	0					
ANR	8538	IdentifierDeclStatement	mbedtls_md_context_t c ;	209:4:5795:5817	8495	4	True				
ANR	8539	IdentifierDecl	c		8495	0					
ANR	8540	IdentifierDeclType	mbedtls_md_context_t		8495	0					
ANR	8541	Identifier	c		8495	1					
ANR	8542	IdentifierDeclStatement	unsigned char md_buf [ MAX_MD_SIZE ] ;	210:4:5823:5856	8495	5	True				
ANR	8543	IdentifierDecl	md_buf [ MAX_MD_SIZE ]		8495	0					
ANR	8544	IdentifierDeclType	unsigned char [ MAX_MD_SIZE ]		8495	0					
ANR	8545	Identifier	md_buf		8495	1					
ANR	8546	Identifier	MAX_MD_SIZE		8495	2					
ANR	8547	IdentifierDeclStatement	int addmd ;	211:4:5862:5871	8495	6	True				
ANR	8548	IdentifierDecl	addmd		8495	0					
ANR	8549	IdentifierDeclType	int		8495	0					
ANR	8550	Identifier	addmd		8495	1					
ANR	8551	IdentifierDeclStatement	"unsigned int i , j , mds ;"	212:4:5877:5899	8495	7	True				
ANR	8552	IdentifierDecl	i		8495	0					
ANR	8553	IdentifierDeclType	unsigned int		8495	0					
ANR	8554	Identifier	i		8495	1					
ANR	8555	IdentifierDecl	j		8495	1					
ANR	8556	IdentifierDeclType	unsigned int		8495	0					
ANR	8557	Identifier	j		8495	1					
ANR	8558	IdentifierDecl	mds		8495	2					
ANR	8559	IdentifierDeclType	unsigned int		8495	0					
ANR	8560	Identifier	mds		8495	1					
ANR	8561	ExpressionStatement	mds = mbedtls_md_get_size ( md )	214:4:5906:5935	8495	8	True				
ANR	8562	AssignmentExpression	mds = mbedtls_md_get_size ( md )		8495	0		=			
ANR	8563	Identifier	mds		8495	0					
ANR	8564	CallExpression	mbedtls_md_get_size ( md )		8495	1					
ANR	8565	Callee	mbedtls_md_get_size		8495	0					
ANR	8566	Identifier	mbedtls_md_get_size		8495	0					
ANR	8567	ArgumentList	md		8495	1					
ANR	8568	Argument	md		8495	0					
ANR	8569	Identifier	md		8495	0					
ANR	8570	ExpressionStatement	"memset ( & c , 0 , sizeof ( mbedtls_md_context_t ) )"	215:4:5941:5984	8495	9	True				
ANR	8571	CallExpression	"memset ( & c , 0 , sizeof ( mbedtls_md_context_t ) )"		8495	0					
ANR	8572	Callee	memset		8495	0					
ANR	8573	Identifier	memset		8495	0					
ANR	8574	ArgumentList	& c		8495	1					
ANR	8575	Argument	& c		8495	0					
ANR	8576	UnaryOperationExpression	& c		8495	0					
ANR	8577	UnaryOperator	&		8495	0					
ANR	8578	Identifier	c		8495	1					
ANR	8579	Argument	0		8495	1					
ANR	8580	PrimaryExpression	0		8495	0					
ANR	8581	Argument	sizeof ( mbedtls_md_context_t )		8495	2					
ANR	8582	SizeofExpression	sizeof ( mbedtls_md_context_t )		8495	0					
ANR	8583	Sizeof	sizeof		8495	0					
ANR	8584	SizeofOperand	mbedtls_md_context_t		8495	1					
ANR	8585	IfStatement	if ( pass == NULL )		8495	10					
ANR	8586	Condition	pass == NULL	217:8:5995:6006	8495	0	True				
ANR	8587	EqualityExpression	pass == NULL		8495	0		==			
ANR	8588	Identifier	pass		8495	0					
ANR	8589	Identifier	NULL		8495	1					
ANR	8590	ReturnStatement	return key_len ;	218:8:6017:6031	8495	1	True				
ANR	8591	Identifier	key_len		8495	0					
ANR	8592	IfStatement	"if ( mbedtls_md_setup ( & c , md , 1 ) )"		8495	11					
ANR	8593	Condition	"mbedtls_md_setup ( & c , md , 1 )"	219:8:6041:6067	8495	0	True				
ANR	8594	CallExpression	"mbedtls_md_setup ( & c , md , 1 )"		8495	0					
ANR	8595	Callee	mbedtls_md_setup		8495	0					
ANR	8596	Identifier	mbedtls_md_setup		8495	0					
ANR	8597	ArgumentList	& c		8495	1					
ANR	8598	Argument	& c		8495	0					
ANR	8599	UnaryOperationExpression	& c		8495	0					
ANR	8600	UnaryOperator	&		8495	0					
ANR	8601	Identifier	c		8495	1					
ANR	8602	Argument	md		8495	1					
ANR	8603	Identifier	md		8495	0					
ANR	8604	Argument	1		8495	2					
ANR	8605	PrimaryExpression	1		8495	0					
ANR	8606	ReturnStatement	return 0 ;	220:8:6078:6086	8495	1	True				
ANR	8607	PrimaryExpression	0		8495	0					
ANR	8608	ForStatement	"for ( j = 0 , addmd = 0 ; j < key_len ; addmd ++ )"		8495	12					
ANR	8609	ForInit	"j = 0 , addmd = 0 ;"	222:9:6098:6114	8495	0	True				
ANR	8610	Expression	"j = 0 , addmd = 0"		8495	0					
ANR	8611	AssignmentExpression	j = 0		8495	0		=			
ANR	8612	Identifier	j		8495	0					
ANR	8613	PrimaryExpression	0		8495	1					
ANR	8614	AssignmentExpression	addmd = 0		8495	1		=			
ANR	8615	Identifier	addmd		8495	0					
ANR	8616	PrimaryExpression	0		8495	1					
ANR	8617	Condition	j < key_len	222:27:6116:6126	8495	1	True				
ANR	8618	RelationalExpression	j < key_len		8495	0		<			
ANR	8619	Identifier	j		8495	0					
ANR	8620	Identifier	key_len		8495	1					
ANR	8621	PostIncDecOperationExpression	addmd ++	222:40:6129:6135	8495	2	True				
ANR	8622	Identifier	addmd		8495	0					
ANR	8623	IncDec	++		8495	1					
ANR	8624	CompoundStatement		23:49:559:559	8495	3					
ANR	8625	ExpressionStatement	mbedtls_md_starts ( & c )	223:8:6148:6169	8495	0	True				
ANR	8626	CallExpression	mbedtls_md_starts ( & c )		8495	0					
ANR	8627	Callee	mbedtls_md_starts		8495	0					
ANR	8628	Identifier	mbedtls_md_starts		8495	0					
ANR	8629	ArgumentList	& c		8495	1					
ANR	8630	Argument	& c		8495	0					
ANR	8631	UnaryOperationExpression	& c		8495	0					
ANR	8632	UnaryOperator	&		8495	0					
ANR	8633	Identifier	c		8495	1					
ANR	8634	IfStatement	if ( addmd )		8495	1					
ANR	8635	Condition	addmd	224:12:6183:6187	8495	0	True				
ANR	8636	Identifier	addmd		8495	0					
ANR	8637	CompoundStatement		25:19:611:611	8495	1					
ANR	8638	ExpressionStatement	"mbedtls_md_update ( & c , md_buf , mds )"	225:12:6204:6238	8495	0	True				
ANR	8639	CallExpression	"mbedtls_md_update ( & c , md_buf , mds )"		8495	0					
ANR	8640	Callee	mbedtls_md_update		8495	0					
ANR	8641	Identifier	mbedtls_md_update		8495	0					
ANR	8642	ArgumentList	& c		8495	1					
ANR	8643	Argument	& c		8495	0					
ANR	8644	UnaryOperationExpression	& c		8495	0					
ANR	8645	UnaryOperator	&		8495	0					
ANR	8646	Identifier	c		8495	1					
ANR	8647	Argument	md_buf		8495	1					
ANR	8648	Identifier	md_buf		8495	0					
ANR	8649	Argument	mds		8495	2					
ANR	8650	Identifier	mds		8495	0					
ANR	8651	ExpressionStatement	"mbedtls_md_update ( & c , ( uint8_t * ) pass , datal )"	227:8:6258:6303	8495	2	True				
ANR	8652	CallExpression	"mbedtls_md_update ( & c , ( uint8_t * ) pass , datal )"		8495	0					
ANR	8653	Callee	mbedtls_md_update		8495	0					
ANR	8654	Identifier	mbedtls_md_update		8495	0					
ANR	8655	ArgumentList	& c		8495	1					
ANR	8656	Argument	& c		8495	0					
ANR	8657	UnaryOperationExpression	& c		8495	0					
ANR	8658	UnaryOperator	&		8495	0					
ANR	8659	Identifier	c		8495	1					
ANR	8660	Argument	( uint8_t * ) pass		8495	1					
ANR	8661	CastExpression	( uint8_t * ) pass		8495	0					
ANR	8662	CastTarget	uint8_t *		8495	0					
ANR	8663	Identifier	pass		8495	1					
ANR	8664	Argument	datal		8495	2					
ANR	8665	Identifier	datal		8495	0					
ANR	8666	ExpressionStatement	"mbedtls_md_finish ( & c , & ( md_buf [ 0 ] ) )"	228:8:6313:6348	8495	3	True				
ANR	8667	CallExpression	"mbedtls_md_finish ( & c , & ( md_buf [ 0 ] ) )"		8495	0					
ANR	8668	Callee	mbedtls_md_finish		8495	0					
ANR	8669	Identifier	mbedtls_md_finish		8495	0					
ANR	8670	ArgumentList	& c		8495	1					
ANR	8671	Argument	& c		8495	0					
ANR	8672	UnaryOperationExpression	& c		8495	0					
ANR	8673	UnaryOperator	&		8495	0					
ANR	8674	Identifier	c		8495	1					
ANR	8675	Argument	& ( md_buf [ 0 ] )		8495	1					
ANR	8676	UnaryOperationExpression	& ( md_buf [ 0 ] )		8495	0					
ANR	8677	UnaryOperator	&		8495	0					
ANR	8678	ArrayIndexing	md_buf [ 0 ]		8495	1					
ANR	8679	Identifier	md_buf		8495	0					
ANR	8680	PrimaryExpression	0		8495	1					
ANR	8681	ForStatement	"for ( i = 0 ; i < mds ; i ++ , j ++ )"		8495	4					
ANR	8682	ForInit	i = 0 ;	230:13:6364:6369	8495	0	True				
ANR	8683	AssignmentExpression	i = 0		8495	0		=			
ANR	8684	Identifier	i		8495	0					
ANR	8685	PrimaryExpression	0		8495	1					
ANR	8686	Condition	i < mds	230:20:6371:6377	8495	1	True				
ANR	8687	RelationalExpression	i < mds		8495	0		<			
ANR	8688	Identifier	i		8495	0					
ANR	8689	Identifier	mds		8495	1					
ANR	8690	Expression	"i ++ , j ++"	230:29:6380:6387	8495	2	True				
ANR	8691	PostIncDecOperationExpression	i ++		8495	0					
ANR	8692	Identifier	i		8495	0					
ANR	8693	IncDec	++		8495	1					
ANR	8694	PostIncDecOperationExpression	j ++		8495	1					
ANR	8695	Identifier	j		8495	0					
ANR	8696	IncDec	++		8495	1					
ANR	8697	CompoundStatement		31:39:811:811	8495	3					
ANR	8698	IfStatement	if ( j >= key_len )		8495	0					
ANR	8699	Condition	j >= key_len	231:16:6408:6419	8495	0	True				
ANR	8700	RelationalExpression	j >= key_len		8495	0		>=			
ANR	8701	Identifier	j		8495	0					
ANR	8702	Identifier	key_len		8495	1					
ANR	8703	BreakStatement	break ;	232:16:6438:6443	8495	1	True				
ANR	8704	ExpressionStatement	key [ j ] = md_buf [ i ]	233:12:6457:6475	8495	1	True				
ANR	8705	AssignmentExpression	key [ j ] = md_buf [ i ]		8495	0		=			
ANR	8706	ArrayIndexing	key [ j ]		8495	0					
ANR	8707	Identifier	key		8495	0					
ANR	8708	Identifier	j		8495	1					
ANR	8709	ArrayIndexing	md_buf [ i ]		8495	1					
ANR	8710	Identifier	md_buf		8495	0					
ANR	8711	Identifier	i		8495	1					
ANR	8712	ExpressionStatement	mbedtls_md_free ( & c )	237:4:6498:6517	8495	13	True				
ANR	8713	CallExpression	mbedtls_md_free ( & c )		8495	0					
ANR	8714	Callee	mbedtls_md_free		8495	0					
ANR	8715	Identifier	mbedtls_md_free		8495	0					
ANR	8716	ArgumentList	& c		8495	1					
ANR	8717	Argument	& c		8495	0					
ANR	8718	UnaryOperationExpression	& c		8495	0					
ANR	8719	UnaryOperator	&		8495	0					
ANR	8720	Identifier	c		8495	1					
ANR	8721	ReturnStatement	return key_len ;	238:4:6523:6537	8495	14	True				
ANR	8722	Identifier	key_len		8495	0					
ANR	8723	ReturnType	int		8495	1					
ANR	8724	Identifier	crypto_derive_key		8495	2					
ANR	8725	ParameterList	"const char * pass , uint8_t * key , size_t key_len"		8495	3					
ANR	8726	Parameter	const char * pass	199:18:5530:5545	8495	0	True				
ANR	8727	ParameterType	const char *		8495	0					
ANR	8728	Identifier	pass		8495	1					
ANR	8729	Parameter	uint8_t * key	199:36:5548:5559	8495	1	True				
ANR	8730	ParameterType	uint8_t *		8495	0					
ANR	8731	Identifier	key		8495	1					
ANR	8732	Parameter	size_t key_len	199:50:5562:5575	8495	2	True				
ANR	8733	ParameterType	size_t		8495	0					
ANR	8734	Identifier	key_len		8495	1					
ANR	8735	CFGEntryNode	ENTRY		8495		True				
ANR	8736	CFGExitNode	EXIT		8495		True				
ANR	8737	Symbol	NULL		8495						
ANR	8738	Symbol	c		8495						
ANR	8739	Symbol	pass		8495						
ANR	8740	Symbol	md_buf		8495						
ANR	8741	Symbol	* md_buf		8495						
ANR	8742	Symbol	i		8495						
ANR	8743	Symbol	& c		8495						
ANR	8744	Symbol	* key		8495						
ANR	8745	Symbol	j		8495						
ANR	8746	Symbol	datal		8495						
ANR	8747	Symbol	mbedtls_md_info_from_string		8495						
ANR	8748	Symbol	strlen		8495						
ANR	8749	Symbol	* i		8495						
ANR	8750	Symbol	* j		8495						
ANR	8751	Symbol	mbedtls_md_get_size		8495						
ANR	8752	Symbol	md		8495						
ANR	8753	Symbol	mbedtls_md_setup		8495						
ANR	8754	Symbol	addmd		8495						
ANR	8755	Symbol	mds		8495						
ANR	8756	Symbol	key		8495						
ANR	8757	Symbol	key_len		8495						
ANR	8758	Function	crypto_hkdf	242:0:6575:7071							
ANR	8759	FunctionDef	"crypto_hkdf (const mbedtls_md_info_t * md , const unsigned char * salt , int salt_len , const unsigned char * ikm , int ikm_len , const unsigned char * info , int info_len , unsigned char * okm , int okm_len)"		8758	0					
ANR	8760	CompoundStatement		246:0:6825:7071	8758	0					
ANR	8761	IdentifierDeclStatement	unsigned char prk [ MBEDTLS_MD_MAX_SIZE ] ;	247:4:6831:6869	8758	0	True				
ANR	8762	IdentifierDecl	prk [ MBEDTLS_MD_MAX_SIZE ]		8758	0					
ANR	8763	IdentifierDeclType	unsigned char [ MBEDTLS_MD_MAX_SIZE ]		8758	0					
ANR	8764	Identifier	prk		8758	1					
ANR	8765	Identifier	MBEDTLS_MD_MAX_SIZE		8758	2					
ANR	8766	ReturnStatement	"return crypto_hkdf_extract ( md , salt , salt_len , ikm , ikm_len , prk ) || crypto_hkdf_expand ( md , prk , mbedtls_md_get_size ( md ) , info , info_len , okm , okm_len ) ;"	249:4:6876:7069	8758	1	True				
ANR	8767	OrExpression	"crypto_hkdf_extract ( md , salt , salt_len , ikm , ikm_len , prk ) || crypto_hkdf_expand ( md , prk , mbedtls_md_get_size ( md ) , info , info_len , okm , okm_len )"		8758	0		||			
ANR	8768	CallExpression	"crypto_hkdf_extract ( md , salt , salt_len , ikm , ikm_len , prk )"		8758	0					
ANR	8769	Callee	crypto_hkdf_extract		8758	0					
ANR	8770	Identifier	crypto_hkdf_extract		8758	0					
ANR	8771	ArgumentList	md		8758	1					
ANR	8772	Argument	md		8758	0					
ANR	8773	Identifier	md		8758	0					
ANR	8774	Argument	salt		8758	1					
ANR	8775	Identifier	salt		8758	0					
ANR	8776	Argument	salt_len		8758	2					
ANR	8777	Identifier	salt_len		8758	0					
ANR	8778	Argument	ikm		8758	3					
ANR	8779	Identifier	ikm		8758	0					
ANR	8780	Argument	ikm_len		8758	4					
ANR	8781	Identifier	ikm_len		8758	0					
ANR	8782	Argument	prk		8758	5					
ANR	8783	Identifier	prk		8758	0					
ANR	8784	CallExpression	"crypto_hkdf_expand ( md , prk , mbedtls_md_get_size ( md ) , info , info_len , okm , okm_len )"		8758	1					
ANR	8785	Callee	crypto_hkdf_expand		8758	0					
ANR	8786	Identifier	crypto_hkdf_expand		8758	0					
ANR	8787	ArgumentList	md		8758	1					
ANR	8788	Argument	md		8758	0					
ANR	8789	Identifier	md		8758	0					
ANR	8790	Argument	prk		8758	1					
ANR	8791	Identifier	prk		8758	0					
ANR	8792	Argument	mbedtls_md_get_size ( md )		8758	2					
ANR	8793	CallExpression	mbedtls_md_get_size ( md )		8758	0					
ANR	8794	Callee	mbedtls_md_get_size		8758	0					
ANR	8795	Identifier	mbedtls_md_get_size		8758	0					
ANR	8796	ArgumentList	md		8758	1					
ANR	8797	Argument	md		8758	0					
ANR	8798	Identifier	md		8758	0					
ANR	8799	Argument	info		8758	3					
ANR	8800	Identifier	info		8758	0					
ANR	8801	Argument	info_len		8758	4					
ANR	8802	Identifier	info_len		8758	0					
ANR	8803	Argument	okm		8758	5					
ANR	8804	Identifier	okm		8758	0					
ANR	8805	Argument	okm_len		8758	6					
ANR	8806	Identifier	okm_len		8758	0					
ANR	8807	ReturnType	int		8758	1					
ANR	8808	Identifier	crypto_hkdf		8758	2					
ANR	8809	ParameterList	"const mbedtls_md_info_t * md , const unsigned char * salt , int salt_len , const unsigned char * ikm , int ikm_len , const unsigned char * info , int info_len , unsigned char * okm , int okm_len"		8758	3					
ANR	8810	Parameter	const mbedtls_md_info_t * md	242:16:6591:6617	8758	0	True				
ANR	8811	ParameterType	const mbedtls_md_info_t *		8758	0					
ANR	8812	Identifier	md		8758	1					
ANR	8813	Parameter	const unsigned char * salt	242:45:6620:6644	8758	1	True				
ANR	8814	ParameterType	const unsigned char *		8758	0					
ANR	8815	Identifier	salt		8758	1					
ANR	8816	Parameter	int salt_len	243:17:6664:6675	8758	2	True				
ANR	8817	ParameterType	int		8758	0					
ANR	8818	Identifier	salt_len		8758	1					
ANR	8819	Parameter	const unsigned char * ikm	243:31:6678:6701	8758	3	True				
ANR	8820	ParameterType	const unsigned char *		8758	0					
ANR	8821	Identifier	ikm		8758	1					
ANR	8822	Parameter	int ikm_len	243:57:6704:6714	8758	4	True				
ANR	8823	ParameterType	int		8758	0					
ANR	8824	Identifier	ikm_len		8758	1					
ANR	8825	Parameter	const unsigned char * info	244:17:6734:6758	8758	5	True				
ANR	8826	ParameterType	const unsigned char *		8758	0					
ANR	8827	Identifier	info		8758	1					
ANR	8828	Parameter	int info_len	244:44:6761:6772	8758	6	True				
ANR	8829	ParameterType	int		8758	0					
ANR	8830	Identifier	info_len		8758	1					
ANR	8831	Parameter	unsigned char * okm	244:58:6775:6792	8758	7	True				
ANR	8832	ParameterType	unsigned char *		8758	0					
ANR	8833	Identifier	okm		8758	1					
ANR	8834	Parameter	int okm_len	245:17:6812:6822	8758	8	True				
ANR	8835	ParameterType	int		8758	0					
ANR	8836	Identifier	okm_len		8758	1					
ANR	8837	CFGEntryNode	ENTRY		8758		True				
ANR	8838	CFGExitNode	EXIT		8758		True				
ANR	8839	Symbol	crypto_hkdf_extract		8758						
ANR	8840	Symbol	salt		8758						
ANR	8841	Symbol	info_len		8758						
ANR	8842	Symbol	prk		8758						
ANR	8843	Symbol	ikm		8758						
ANR	8844	Symbol	ikm_len		8758						
ANR	8845	Symbol	okm		8758						
ANR	8846	Symbol	okm_len		8758						
ANR	8847	Symbol	salt_len		8758						
ANR	8848	Symbol	crypto_hkdf_expand		8758						
ANR	8849	Symbol	mbedtls_md_get_size		8758						
ANR	8850	Symbol	md		8758						
ANR	8851	Symbol	info		8758						
ANR	8852	Function	crypto_hkdf_extract	255:0:7111:7650							
ANR	8853	FunctionDef	"crypto_hkdf_extract (const mbedtls_md_info_t * md , const unsigned char * salt , int salt_len , const unsigned char * ikm , int ikm_len , unsigned char * prk)"		8852	0					
ANR	8854	CompoundStatement		258:0:7314:7650	8852	0					
ANR	8855	IdentifierDeclStatement	int hash_len ;	259:4:7320:7332	8852	0	True				
ANR	8856	IdentifierDecl	hash_len		8852	0					
ANR	8857	IdentifierDeclType	int		8852	0					
ANR	8858	Identifier	hash_len		8852	1					
ANR	8859	IdentifierDeclStatement	unsigned char null_salt [ MBEDTLS_MD_MAX_SIZE ] = { '\\0' } ;	260:4:7338:7393	8852	1	True				
ANR	8860	IdentifierDecl	null_salt [ MBEDTLS_MD_MAX_SIZE ] = { '\\0' }		8852	0					
ANR	8861	IdentifierDeclType	unsigned char [ MBEDTLS_MD_MAX_SIZE ]		8852	0					
ANR	8862	Identifier	null_salt		8852	1					
ANR	8863	Identifier	MBEDTLS_MD_MAX_SIZE		8852	2					
ANR	8864	AssignmentExpression	null_salt [ MBEDTLS_MD_MAX_SIZE ] = { '\\0' }		8852	3		=			
ANR	8865	Identifier	MBEDTLS_MD_MAX_SIZE		8852	0					
ANR	8866	InitializerList	'\\0'		8852	1					
ANR	8867	PrimaryExpression	'\\0'		8852	0					
ANR	8868	IfStatement	if ( salt_len < 0 )		8852	2					
ANR	8869	Condition	salt_len < 0	262:8:7404:7415	8852	0	True				
ANR	8870	RelationalExpression	salt_len < 0		8852	0		<			
ANR	8871	Identifier	salt_len		8852	0					
ANR	8872	PrimaryExpression	0		8852	1					
ANR	8873	CompoundStatement		5:22:103:103	8852	1					
ANR	8874	ReturnStatement	return CRYPTO_ERROR ;	263:8:7428:7447	8852	0	True				
ANR	8875	Identifier	CRYPTO_ERROR		8852	0					
ANR	8876	ExpressionStatement	hash_len = mbedtls_md_get_size ( md )	266:4:7460:7494	8852	3	True				
ANR	8877	AssignmentExpression	hash_len = mbedtls_md_get_size ( md )		8852	0		=			
ANR	8878	Identifier	hash_len		8852	0					
ANR	8879	CallExpression	mbedtls_md_get_size ( md )		8852	1					
ANR	8880	Callee	mbedtls_md_get_size		8852	0					
ANR	8881	Identifier	mbedtls_md_get_size		8852	0					
ANR	8882	ArgumentList	md		8852	1					
ANR	8883	Argument	md		8852	0					
ANR	8884	Identifier	md		8852	0					
ANR	8885	IfStatement	if ( salt == NULL )		8852	4					
ANR	8886	Condition	salt == NULL	268:8:7505:7516	8852	0	True				
ANR	8887	EqualityExpression	salt == NULL		8852	0		==			
ANR	8888	Identifier	salt		8852	0					
ANR	8889	Identifier	NULL		8852	1					
ANR	8890	CompoundStatement		11:22:204:204	8852	1					
ANR	8891	ExpressionStatement	salt = null_salt	269:8:7529:7545	8852	0	True				
ANR	8892	AssignmentExpression	salt = null_salt		8852	0		=			
ANR	8893	Identifier	salt		8852	0					
ANR	8894	Identifier	null_salt		8852	1					
ANR	8895	ExpressionStatement	salt_len = hash_len	270:8:7555:7574	8852	1	True				
ANR	8896	AssignmentExpression	salt_len = hash_len		8852	0		=			
ANR	8897	Identifier	salt_len		8852	0					
ANR	8898	Identifier	hash_len		8852	1					
ANR	8899	ReturnStatement	"return mbedtls_md_hmac ( md , salt , salt_len , ikm , ikm_len , prk ) ;"	273:4:7587:7648	8852	5	True				
ANR	8900	CallExpression	"mbedtls_md_hmac ( md , salt , salt_len , ikm , ikm_len , prk )"		8852	0					
ANR	8901	Callee	mbedtls_md_hmac		8852	0					
ANR	8902	Identifier	mbedtls_md_hmac		8852	0					
ANR	8903	ArgumentList	md		8852	1					
ANR	8904	Argument	md		8852	0					
ANR	8905	Identifier	md		8852	0					
ANR	8906	Argument	salt		8852	1					
ANR	8907	Identifier	salt		8852	0					
ANR	8908	Argument	salt_len		8852	2					
ANR	8909	Identifier	salt_len		8852	0					
ANR	8910	Argument	ikm		8852	3					
ANR	8911	Identifier	ikm		8852	0					
ANR	8912	Argument	ikm_len		8852	4					
ANR	8913	Identifier	ikm_len		8852	0					
ANR	8914	Argument	prk		8852	5					
ANR	8915	Identifier	prk		8852	0					
ANR	8916	ReturnType	int		8852	1					
ANR	8917	Identifier	crypto_hkdf_extract		8852	2					
ANR	8918	ParameterList	"const mbedtls_md_info_t * md , const unsigned char * salt , int salt_len , const unsigned char * ikm , int ikm_len , unsigned char * prk"		8852	3					
ANR	8919	Parameter	const mbedtls_md_info_t * md	255:24:7135:7161	8852	0	True				
ANR	8920	ParameterType	const mbedtls_md_info_t *		8852	0					
ANR	8921	Identifier	md		8852	1					
ANR	8922	Parameter	const unsigned char * salt	255:53:7164:7188	8852	1	True				
ANR	8923	ParameterType	const unsigned char *		8852	0					
ANR	8924	Identifier	salt		8852	1					
ANR	8925	Parameter	int salt_len	256:25:7216:7227	8852	2	True				
ANR	8926	ParameterType	int		8852	0					
ANR	8927	Identifier	salt_len		8852	1					
ANR	8928	Parameter	const unsigned char * ikm	256:39:7230:7253	8852	3	True				
ANR	8929	ParameterType	const unsigned char *		8852	0					
ANR	8930	Identifier	ikm		8852	1					
ANR	8931	Parameter	int ikm_len	256:65:7256:7266	8852	4	True				
ANR	8932	ParameterType	int		8852	0					
ANR	8933	Identifier	ikm_len		8852	1					
ANR	8934	Parameter	unsigned char * prk	257:25:7294:7311	8852	5	True				
ANR	8935	ParameterType	unsigned char *		8852	0					
ANR	8936	Identifier	prk		8852	1					
ANR	8937	CFGEntryNode	ENTRY		8852		True				
ANR	8938	CFGExitNode	EXIT		8852		True				
ANR	8939	Symbol	null_salt		8852						
ANR	8940	Symbol	MBEDTLS_MD_MAX_SIZE		8852						
ANR	8941	Symbol	CRYPTO_ERROR		8852						
ANR	8942	Symbol	salt		8852						
ANR	8943	Symbol	NULL		8852						
ANR	8944	Symbol	prk		8852						
ANR	8945	Symbol	ikm		8852						
ANR	8946	Symbol	ikm_len		8852						
ANR	8947	Symbol	salt_len		8852						
ANR	8948	Symbol	mbedtls_md_get_size		8852						
ANR	8949	Symbol	md		8852						
ANR	8950	Symbol	mbedtls_md_hmac		8852						
ANR	8951	Symbol	hash_len		8852						
ANR	8952	Function	crypto_hkdf_expand	277:0:7692:9336							
ANR	8953	FunctionDef	"crypto_hkdf_expand (const mbedtls_md_info_t * md , const unsigned char * prk , int prk_len , const unsigned char * info , int info_len , unsigned char * okm , int okm_len)"		8952	0					
ANR	8954	CompoundStatement		280:0:7905:9336	8952	0					
ANR	8955	IdentifierDeclStatement	int hash_len ;	281:4:7911:7923	8952	0	True				
ANR	8956	IdentifierDecl	hash_len		8952	0					
ANR	8957	IdentifierDeclType	int		8952	0					
ANR	8958	Identifier	hash_len		8952	1					
ANR	8959	IdentifierDeclStatement	int N ;	282:4:7929:7934	8952	1	True				
ANR	8960	IdentifierDecl	N		8952	0					
ANR	8961	IdentifierDeclType	int		8952	0					
ANR	8962	Identifier	N		8952	1					
ANR	8963	IdentifierDeclStatement	"int T_len = 0 , where = 0 , i , ret ;"	283:4:7940:7972	8952	2	True				
ANR	8964	IdentifierDecl	T_len = 0		8952	0					
ANR	8965	IdentifierDeclType	int		8952	0					
ANR	8966	Identifier	T_len		8952	1					
ANR	8967	AssignmentExpression	T_len = 0		8952	2		=			
ANR	8968	Identifier	T_len		8952	0					
ANR	8969	PrimaryExpression	0		8952	1					
ANR	8970	IdentifierDecl	where = 0		8952	1					
ANR	8971	IdentifierDeclType	int		8952	0					
ANR	8972	Identifier	where		8952	1					
ANR	8973	AssignmentExpression	where = 0		8952	2		=			
ANR	8974	Identifier	where		8952	0					
ANR	8975	PrimaryExpression	0		8952	1					
ANR	8976	IdentifierDecl	i		8952	2					
ANR	8977	IdentifierDeclType	int		8952	0					
ANR	8978	Identifier	i		8952	1					
ANR	8979	IdentifierDecl	ret		8952	3					
ANR	8980	IdentifierDeclType	int		8952	0					
ANR	8981	Identifier	ret		8952	1					
ANR	8982	IdentifierDeclStatement	mbedtls_md_context_t ctx ;	284:4:7978:8002	8952	3	True				
ANR	8983	IdentifierDecl	ctx		8952	0					
ANR	8984	IdentifierDeclType	mbedtls_md_context_t		8952	0					
ANR	8985	Identifier	ctx		8952	1					
ANR	8986	IdentifierDeclStatement	unsigned char T [ MBEDTLS_MD_MAX_SIZE ] ;	285:4:8008:8044	8952	4	True				
ANR	8987	IdentifierDecl	T [ MBEDTLS_MD_MAX_SIZE ]		8952	0					
ANR	8988	IdentifierDeclType	unsigned char [ MBEDTLS_MD_MAX_SIZE ]		8952	0					
ANR	8989	Identifier	T		8952	1					
ANR	8990	Identifier	MBEDTLS_MD_MAX_SIZE		8952	2					
ANR	8991	IfStatement	if ( info_len < 0 || okm_len < 0 || okm == NULL )		8952	5					
ANR	8992	Condition	info_len < 0 || okm_len < 0 || okm == NULL	287:8:8055:8096	8952	0	True				
ANR	8993	OrExpression	info_len < 0 || okm_len < 0 || okm == NULL		8952	0		||			
ANR	8994	RelationalExpression	info_len < 0		8952	0		<			
ANR	8995	Identifier	info_len		8952	0					
ANR	8996	PrimaryExpression	0		8952	1					
ANR	8997	OrExpression	okm_len < 0 || okm == NULL		8952	1		||			
ANR	8998	RelationalExpression	okm_len < 0		8952	0		<			
ANR	8999	Identifier	okm_len		8952	0					
ANR	9000	PrimaryExpression	0		8952	1					
ANR	9001	EqualityExpression	okm == NULL		8952	1		==			
ANR	9002	Identifier	okm		8952	0					
ANR	9003	Identifier	NULL		8952	1					
ANR	9004	CompoundStatement		8:52:193:193	8952	1					
ANR	9005	ReturnStatement	return CRYPTO_ERROR ;	288:8:8109:8128	8952	0	True				
ANR	9006	Identifier	CRYPTO_ERROR		8952	0					
ANR	9007	ExpressionStatement	hash_len = mbedtls_md_get_size ( md )	291:4:8141:8175	8952	6	True				
ANR	9008	AssignmentExpression	hash_len = mbedtls_md_get_size ( md )		8952	0		=			
ANR	9009	Identifier	hash_len		8952	0					
ANR	9010	CallExpression	mbedtls_md_get_size ( md )		8952	1					
ANR	9011	Callee	mbedtls_md_get_size		8952	0					
ANR	9012	Identifier	mbedtls_md_get_size		8952	0					
ANR	9013	ArgumentList	md		8952	1					
ANR	9014	Argument	md		8952	0					
ANR	9015	Identifier	md		8952	0					
ANR	9016	IfStatement	if ( prk_len < hash_len )		8952	7					
ANR	9017	Condition	prk_len < hash_len	293:8:8186:8203	8952	0	True				
ANR	9018	RelationalExpression	prk_len < hash_len		8952	0		<			
ANR	9019	Identifier	prk_len		8952	0					
ANR	9020	Identifier	hash_len		8952	1					
ANR	9021	CompoundStatement		14:28:300:300	8952	1					
ANR	9022	ReturnStatement	return CRYPTO_ERROR ;	294:8:8216:8235	8952	0	True				
ANR	9023	Identifier	CRYPTO_ERROR		8952	0					
ANR	9024	IfStatement	if ( info == NULL )		8952	8					
ANR	9025	Condition	info == NULL	297:8:8252:8263	8952	0	True				
ANR	9026	EqualityExpression	info == NULL		8952	0		==			
ANR	9027	Identifier	info		8952	0					
ANR	9028	Identifier	NULL		8952	1					
ANR	9029	CompoundStatement		18:22:360:360	8952	1					
ANR	9030	ExpressionStatement	"info = ( const unsigned char * ) """""	298:8:8276:8308	8952	0	True				
ANR	9031	AssignmentExpression	"info = ( const unsigned char * ) """""		8952	0		=			
ANR	9032	Identifier	info		8952	0					
ANR	9033	CastExpression	"( const unsigned char * ) """""		8952	1					
ANR	9034	CastTarget	const unsigned char *		8952	0					
ANR	9035	PrimaryExpression	""""""		8952	1					
ANR	9036	ExpressionStatement	N = okm_len / hash_len	301:4:8321:8343	8952	9	True				
ANR	9037	AssignmentExpression	N = okm_len / hash_len		8952	0		=			
ANR	9038	Identifier	N		8952	0					
ANR	9039	MultiplicativeExpression	okm_len / hash_len		8952	1		/			
ANR	9040	Identifier	okm_len		8952	0					
ANR	9041	Identifier	hash_len		8952	1					
ANR	9042	IfStatement	if ( ( okm_len % hash_len ) != 0 )		8952	10					
ANR	9043	Condition	( okm_len % hash_len ) != 0	303:8:8354:8378	8952	0	True				
ANR	9044	EqualityExpression	( okm_len % hash_len ) != 0		8952	0		!=			
ANR	9045	MultiplicativeExpression	okm_len % hash_len		8952	0		%			
ANR	9046	Identifier	okm_len		8952	0					
ANR	9047	Identifier	hash_len		8952	1					
ANR	9048	PrimaryExpression	0		8952	1					
ANR	9049	CompoundStatement		24:35:475:475	8952	1					
ANR	9050	ExpressionStatement	N ++	304:8:8391:8394	8952	0	True				
ANR	9051	PostIncDecOperationExpression	N ++		8952	0					
ANR	9052	Identifier	N		8952	0					
ANR	9053	IncDec	++		8952	1					
ANR	9054	IfStatement	if ( N > 255 )		8952	11					
ANR	9055	Condition	N > 255	307:8:8411:8417	8952	0	True				
ANR	9056	RelationalExpression	N > 255		8952	0		>			
ANR	9057	Identifier	N		8952	0					
ANR	9058	PrimaryExpression	255		8952	1					
ANR	9059	CompoundStatement		28:17:514:514	8952	1					
ANR	9060	ReturnStatement	return CRYPTO_ERROR ;	308:8:8430:8449	8952	0	True				
ANR	9061	Identifier	CRYPTO_ERROR		8952	0					
ANR	9062	ExpressionStatement	mbedtls_md_init ( & ctx )	311:4:8462:8483	8952	12	True				
ANR	9063	CallExpression	mbedtls_md_init ( & ctx )		8952	0					
ANR	9064	Callee	mbedtls_md_init		8952	0					
ANR	9065	Identifier	mbedtls_md_init		8952	0					
ANR	9066	ArgumentList	& ctx		8952	1					
ANR	9067	Argument	& ctx		8952	0					
ANR	9068	UnaryOperationExpression	& ctx		8952	0					
ANR	9069	UnaryOperator	&		8952	0					
ANR	9070	Identifier	ctx		8952	1					
ANR	9071	IfStatement	"if ( ( ret = mbedtls_md_setup ( & ctx , md , 1 ) ) != 0 )"		8952	13					
ANR	9072	Condition	"( ret = mbedtls_md_setup ( & ctx , md , 1 ) ) != 0"	313:8:8494:8535	8952	0	True				
ANR	9073	EqualityExpression	"( ret = mbedtls_md_setup ( & ctx , md , 1 ) ) != 0"		8952	0		!=			
ANR	9074	AssignmentExpression	"ret = mbedtls_md_setup ( & ctx , md , 1 )"		8952	0		=			
ANR	9075	Identifier	ret		8952	0					
ANR	9076	CallExpression	"mbedtls_md_setup ( & ctx , md , 1 )"		8952	1					
ANR	9077	Callee	mbedtls_md_setup		8952	0					
ANR	9078	Identifier	mbedtls_md_setup		8952	0					
ANR	9079	ArgumentList	& ctx		8952	1					
ANR	9080	Argument	& ctx		8952	0					
ANR	9081	UnaryOperationExpression	& ctx		8952	0					
ANR	9082	UnaryOperator	&		8952	0					
ANR	9083	Identifier	ctx		8952	1					
ANR	9084	Argument	md		8952	1					
ANR	9085	Identifier	md		8952	0					
ANR	9086	Argument	1		8952	2					
ANR	9087	PrimaryExpression	1		8952	0					
ANR	9088	PrimaryExpression	0		8952	1					
ANR	9089	CompoundStatement		34:52:632:632	8952	1					
ANR	9090	ExpressionStatement	mbedtls_md_free ( & ctx )	314:8:8548:8569	8952	0	True				
ANR	9091	CallExpression	mbedtls_md_free ( & ctx )		8952	0					
ANR	9092	Callee	mbedtls_md_free		8952	0					
ANR	9093	Identifier	mbedtls_md_free		8952	0					
ANR	9094	ArgumentList	& ctx		8952	1					
ANR	9095	Argument	& ctx		8952	0					
ANR	9096	UnaryOperationExpression	& ctx		8952	0					
ANR	9097	UnaryOperator	&		8952	0					
ANR	9098	Identifier	ctx		8952	1					
ANR	9099	ReturnStatement	return ret ;	315:8:8579:8589	8952	1	True				
ANR	9100	Identifier	ret		8952	0					
ANR	9101	ForStatement	for ( i = 1 ; i <= N ; i ++ )		8952	14					
ANR	9102	ForInit	i = 1 ;	319:9:8630:8635	8952	0	True				
ANR	9103	AssignmentExpression	i = 1		8952	0		=			
ANR	9104	Identifier	i		8952	0					
ANR	9105	PrimaryExpression	1		8952	1					
ANR	9106	Condition	i <= N	319:16:8637:8642	8952	1	True				
ANR	9107	RelationalExpression	i <= N		8952	0		<=			
ANR	9108	Identifier	i		8952	0					
ANR	9109	Identifier	N		8952	1					
ANR	9110	PostIncDecOperationExpression	i ++	319:24:8645:8647	8952	2	True				
ANR	9111	Identifier	i		8952	0					
ANR	9112	IncDec	++		8952	1					
ANR	9113	CompoundStatement		41:8:754:773	8952	3					
ANR	9114	IdentifierDeclStatement	unsigned char c = i ;	320:8:8660:8679	8952	0	True				
ANR	9115	IdentifierDecl	c = i		8952	0					
ANR	9116	IdentifierDeclType	unsigned char		8952	0					
ANR	9117	Identifier	c		8952	1					
ANR	9118	AssignmentExpression	c = i		8952	2		=			
ANR	9119	Identifier	i		8952	0					
ANR	9120	Identifier	i		8952	1					
ANR	9121	ExpressionStatement	"ret = mbedtls_md_hmac_starts ( & ctx , prk , prk_len ) || mbedtls_md_hmac_update ( & ctx , T , T_len ) || mbedtls_md_hmac_update ( & ctx , info , info_len ) || mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"	322:8:8690:9064	8952	1	True				
ANR	9122	AssignmentExpression	"ret = mbedtls_md_hmac_starts ( & ctx , prk , prk_len ) || mbedtls_md_hmac_update ( & ctx , T , T_len ) || mbedtls_md_hmac_update ( & ctx , info , info_len ) || mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"		8952	0		=			
ANR	9123	Identifier	ret		8952	0					
ANR	9124	OrExpression	"mbedtls_md_hmac_starts ( & ctx , prk , prk_len ) || mbedtls_md_hmac_update ( & ctx , T , T_len ) || mbedtls_md_hmac_update ( & ctx , info , info_len ) || mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"		8952	1		||			
ANR	9125	CallExpression	"mbedtls_md_hmac_starts ( & ctx , prk , prk_len )"		8952	0					
ANR	9126	Callee	mbedtls_md_hmac_starts		8952	0					
ANR	9127	Identifier	mbedtls_md_hmac_starts		8952	0					
ANR	9128	ArgumentList	& ctx		8952	1					
ANR	9129	Argument	& ctx		8952	0					
ANR	9130	UnaryOperationExpression	& ctx		8952	0					
ANR	9131	UnaryOperator	&		8952	0					
ANR	9132	Identifier	ctx		8952	1					
ANR	9133	Argument	prk		8952	1					
ANR	9134	Identifier	prk		8952	0					
ANR	9135	Argument	prk_len		8952	2					
ANR	9136	Identifier	prk_len		8952	0					
ANR	9137	OrExpression	"mbedtls_md_hmac_update ( & ctx , T , T_len ) || mbedtls_md_hmac_update ( & ctx , info , info_len ) || mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"		8952	1		||			
ANR	9138	CallExpression	"mbedtls_md_hmac_update ( & ctx , T , T_len )"		8952	0					
ANR	9139	Callee	mbedtls_md_hmac_update		8952	0					
ANR	9140	Identifier	mbedtls_md_hmac_update		8952	0					
ANR	9141	ArgumentList	& ctx		8952	1					
ANR	9142	Argument	& ctx		8952	0					
ANR	9143	UnaryOperationExpression	& ctx		8952	0					
ANR	9144	UnaryOperator	&		8952	0					
ANR	9145	Identifier	ctx		8952	1					
ANR	9146	Argument	T		8952	1					
ANR	9147	Identifier	T		8952	0					
ANR	9148	Argument	T_len		8952	2					
ANR	9149	Identifier	T_len		8952	0					
ANR	9150	OrExpression	"mbedtls_md_hmac_update ( & ctx , info , info_len ) || mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"		8952	1		||			
ANR	9151	CallExpression	"mbedtls_md_hmac_update ( & ctx , info , info_len )"		8952	0					
ANR	9152	Callee	mbedtls_md_hmac_update		8952	0					
ANR	9153	Identifier	mbedtls_md_hmac_update		8952	0					
ANR	9154	ArgumentList	& ctx		8952	1					
ANR	9155	Argument	& ctx		8952	0					
ANR	9156	UnaryOperationExpression	& ctx		8952	0					
ANR	9157	UnaryOperator	&		8952	0					
ANR	9158	Identifier	ctx		8952	1					
ANR	9159	Argument	info		8952	1					
ANR	9160	Identifier	info		8952	0					
ANR	9161	Argument	info_len		8952	2					
ANR	9162	Identifier	info_len		8952	0					
ANR	9163	OrExpression	"mbedtls_md_hmac_update ( & ctx , & c , 1 ) || mbedtls_md_hmac_finish ( & ctx , T )"		8952	1		||			
ANR	9164	CallExpression	"mbedtls_md_hmac_update ( & ctx , & c , 1 )"		8952	0					
ANR	9165	Callee	mbedtls_md_hmac_update		8952	0					
ANR	9166	Identifier	mbedtls_md_hmac_update		8952	0					
ANR	9167	ArgumentList	& ctx		8952	1					
ANR	9168	Argument	& ctx		8952	0					
ANR	9169	UnaryOperationExpression	& ctx		8952	0					
ANR	9170	UnaryOperator	&		8952	0					
ANR	9171	Identifier	ctx		8952	1					
ANR	9172	Argument	& c		8952	1					
ANR	9173	UnaryOperationExpression	& c		8952	0					
ANR	9174	UnaryOperator	&		8952	0					
ANR	9175	Identifier	c		8952	1					
ANR	9176	Argument	1		8952	2					
ANR	9177	PrimaryExpression	1		8952	0					
ANR	9178	CallExpression	"mbedtls_md_hmac_finish ( & ctx , T )"		8952	1					
ANR	9179	Callee	mbedtls_md_hmac_finish		8952	0					
ANR	9180	Identifier	mbedtls_md_hmac_finish		8952	0					
ANR	9181	ArgumentList	& ctx		8952	1					
ANR	9182	Argument	& ctx		8952	0					
ANR	9183	UnaryOperationExpression	& ctx		8952	0					
ANR	9184	UnaryOperator	&		8952	0					
ANR	9185	Identifier	ctx		8952	1					
ANR	9186	Argument	T		8952	1					
ANR	9187	Identifier	T		8952	0					
ANR	9188	IfStatement	if ( ret != 0 )		8952	2					
ANR	9189	Condition	ret != 0	330:12:9079:9086	8952	0	True				
ANR	9190	EqualityExpression	ret != 0		8952	0		!=			
ANR	9191	Identifier	ret		8952	0					
ANR	9192	PrimaryExpression	0		8952	1					
ANR	9193	CompoundStatement		51:22:1183:1183	8952	1					
ANR	9194	ExpressionStatement	mbedtls_md_free ( & ctx )	331:12:9103:9124	8952	0	True				
ANR	9195	CallExpression	mbedtls_md_free ( & ctx )		8952	0					
ANR	9196	Callee	mbedtls_md_free		8952	0					
ANR	9197	Identifier	mbedtls_md_free		8952	0					
ANR	9198	ArgumentList	& ctx		8952	1					
ANR	9199	Argument	& ctx		8952	0					
ANR	9200	UnaryOperationExpression	& ctx		8952	0					
ANR	9201	UnaryOperator	&		8952	0					
ANR	9202	Identifier	ctx		8952	1					
ANR	9203	ReturnStatement	return ret ;	332:12:9138:9148	8952	1	True				
ANR	9204	Identifier	ret		8952	0					
ANR	9205	ExpressionStatement	"memcpy ( okm + where , T , ( i != N ) ? hash_len : ( okm_len - where ) )"	335:8:9169:9232	8952	3	True				
ANR	9206	CallExpression	"memcpy ( okm + where , T , ( i != N ) ? hash_len : ( okm_len - where ) )"		8952	0					
ANR	9207	Callee	memcpy		8952	0					
ANR	9208	Identifier	memcpy		8952	0					
ANR	9209	ArgumentList	okm + where		8952	1					
ANR	9210	Argument	okm + where		8952	0					
ANR	9211	AdditiveExpression	okm + where		8952	0		+			
ANR	9212	Identifier	okm		8952	0					
ANR	9213	Identifier	where		8952	1					
ANR	9214	Argument	T		8952	1					
ANR	9215	Identifier	T		8952	0					
ANR	9216	Argument	( i != N ) ? hash_len : ( okm_len - where )		8952	2					
ANR	9217	ConditionalExpression	( i != N ) ? hash_len : ( okm_len - where )		8952	0					
ANR	9218	Condition	i != N		8952	0					
ANR	9219	EqualityExpression	i != N		8952	0		!=			
ANR	9220	Identifier	i		8952	0					
ANR	9221	Identifier	N		8952	1					
ANR	9222	Identifier	hash_len		8952	1					
ANR	9223	AdditiveExpression	okm_len - where		8952	2		-			
ANR	9224	Identifier	okm_len		8952	0					
ANR	9225	Identifier	where		8952	1					
ANR	9226	ExpressionStatement	where += hash_len	336:8:9242:9259	8952	4	True				
ANR	9227	AssignmentExpression	where += hash_len		8952	0		+=			
ANR	9228	Identifier	where		8952	0					
ANR	9229	Identifier	hash_len		8952	1					
ANR	9230	ExpressionStatement	T_len = hash_len	337:8:9269:9285	8952	5	True				
ANR	9231	AssignmentExpression	T_len = hash_len		8952	0		=			
ANR	9232	Identifier	T_len		8952	0					
ANR	9233	Identifier	hash_len		8952	1					
ANR	9234	ExpressionStatement	mbedtls_md_free ( & ctx )	340:4:9298:9319	8952	15	True				
ANR	9235	CallExpression	mbedtls_md_free ( & ctx )		8952	0					
ANR	9236	Callee	mbedtls_md_free		8952	0					
ANR	9237	Identifier	mbedtls_md_free		8952	0					
ANR	9238	ArgumentList	& ctx		8952	1					
ANR	9239	Argument	& ctx		8952	0					
ANR	9240	UnaryOperationExpression	& ctx		8952	0					
ANR	9241	UnaryOperator	&		8952	0					
ANR	9242	Identifier	ctx		8952	1					
ANR	9243	ReturnStatement	return 0 ;	342:4:9326:9334	8952	16	True				
ANR	9244	PrimaryExpression	0		8952	0					
ANR	9245	ReturnType	int		8952	1					
ANR	9246	Identifier	crypto_hkdf_expand		8952	2					
ANR	9247	ParameterList	"const mbedtls_md_info_t * md , const unsigned char * prk , int prk_len , const unsigned char * info , int info_len , unsigned char * okm , int okm_len"		8952	3					
ANR	9248	Parameter	const mbedtls_md_info_t * md	277:23:7715:7741	8952	0	True				
ANR	9249	ParameterType	const mbedtls_md_info_t *		8952	0					
ANR	9250	Identifier	md		8952	1					
ANR	9251	Parameter	const unsigned char * prk	277:52:7744:7767	8952	1	True				
ANR	9252	ParameterType	const unsigned char *		8952	0					
ANR	9253	Identifier	prk		8952	1					
ANR	9254	Parameter	int prk_len	278:24:7794:7804	8952	2	True				
ANR	9255	ParameterType	int		8952	0					
ANR	9256	Identifier	prk_len		8952	1					
ANR	9257	Parameter	const unsigned char * info	278:37:7807:7831	8952	3	True				
ANR	9258	ParameterType	const unsigned char *		8952	0					
ANR	9259	Identifier	info		8952	1					
ANR	9260	Parameter	int info_len	278:64:7834:7845	8952	4	True				
ANR	9261	ParameterType	int		8952	0					
ANR	9262	Identifier	info_len		8952	1					
ANR	9263	Parameter	unsigned char * okm	279:24:7872:7889	8952	5	True				
ANR	9264	ParameterType	unsigned char *		8952	0					
ANR	9265	Identifier	okm		8952	1					
ANR	9266	Parameter	int okm_len	279:44:7892:7902	8952	6	True				
ANR	9267	ParameterType	int		8952	0					
ANR	9268	Identifier	okm_len		8952	1					
ANR	9269	CFGEntryNode	ENTRY		8952		True				
ANR	9270	CFGExitNode	EXIT		8952		True				
ANR	9271	Symbol	CRYPTO_ERROR		8952						
ANR	9272	Symbol	& ctx		8952						
ANR	9273	Symbol	N		8952						
ANR	9274	Symbol	okm		8952						
ANR	9275	Symbol	T		8952						
ANR	9276	Symbol	mbedtls_md_get_size		8952						
ANR	9277	Symbol	md		8952						
ANR	9278	Symbol	where		8952						
ANR	9279	Symbol	mbedtls_md_setup		8952						
ANR	9280	Symbol	info		8952						
ANR	9281	Symbol	ret		8952						
ANR	9282	Symbol	NULL		8952						
ANR	9283	Symbol	c		8952						
ANR	9284	Symbol	info_len		8952						
ANR	9285	Symbol	T_len		8952						
ANR	9286	Symbol	ctx		8952						
ANR	9287	Symbol	prk		8952						
ANR	9288	Symbol	i		8952						
ANR	9289	Symbol	& c		8952						
ANR	9290	Symbol	mbedtls_md_hmac_finish		8952						
ANR	9291	Symbol	prk_len		8952						
ANR	9292	Symbol	mbedtls_md_hmac_starts		8952						
ANR	9293	Symbol	okm_len		8952						
ANR	9294	Symbol	mbedtls_md_hmac_update		8952						
ANR	9295	Symbol	hash_len		8952						
ANR	9296	Function	crypto_parse_key	345:0:9339:10154							
ANR	9297	FunctionDef	"crypto_parse_key (const char * base64 , uint8_t * key , size_t key_len)"		9296	0					
ANR	9298	CompoundStatement		347:0:9410:10154	9296	0					
ANR	9299	IdentifierDeclStatement	size_t base64_len = strlen ( base64 ) ;	348:4:9416:9450	9296	0	True				
ANR	9300	IdentifierDecl	base64_len = strlen ( base64 )		9296	0					
ANR	9301	IdentifierDeclType	size_t		9296	0					
ANR	9302	Identifier	base64_len		9296	1					
ANR	9303	AssignmentExpression	base64_len = strlen ( base64 )		9296	2		=			
ANR	9304	Identifier	base64_len		9296	0					
ANR	9305	CallExpression	strlen ( base64 )		9296	1					
ANR	9306	Callee	strlen		9296	0					
ANR	9307	Identifier	strlen		9296	0					
ANR	9308	ArgumentList	base64		9296	1					
ANR	9309	Argument	base64		9296	0					
ANR	9310	Identifier	base64		9296	0					
ANR	9311	IdentifierDeclStatement	int out_len = BASE64_SIZE ( base64_len ) ;	349:4:9456:9493	9296	1	True				
ANR	9312	IdentifierDecl	out_len = BASE64_SIZE ( base64_len )		9296	0					
ANR	9313	IdentifierDeclType	int		9296	0					
ANR	9314	Identifier	out_len		9296	1					
ANR	9315	AssignmentExpression	out_len = BASE64_SIZE ( base64_len )		9296	2		=			
ANR	9316	Identifier	out_len		9296	0					
ANR	9317	CallExpression	BASE64_SIZE ( base64_len )		9296	1					
ANR	9318	Callee	BASE64_SIZE		9296	0					
ANR	9319	Identifier	BASE64_SIZE		9296	0					
ANR	9320	ArgumentList	base64_len		9296	1					
ANR	9321	Argument	base64_len		9296	0					
ANR	9322	Identifier	base64_len		9296	0					
ANR	9323	IdentifierDeclStatement	uint8_t out [ out_len ] ;	350:4:9499:9519	9296	2	True				
ANR	9324	IdentifierDecl	out [ out_len ]		9296	0					
ANR	9325	IdentifierDeclType	uint8_t [ out_len ]		9296	0					
ANR	9326	Identifier	out		9296	1					
ANR	9327	Identifier	out_len		9296	2					
ANR	9328	ExpressionStatement	"out_len = base64_decode ( out , base64 , out_len )"	352:4:9526:9571	9296	3	True				
ANR	9329	AssignmentExpression	"out_len = base64_decode ( out , base64 , out_len )"		9296	0		=			
ANR	9330	Identifier	out_len		9296	0					
ANR	9331	CallExpression	"base64_decode ( out , base64 , out_len )"		9296	1					
ANR	9332	Callee	base64_decode		9296	0					
ANR	9333	Identifier	base64_decode		9296	0					
ANR	9334	ArgumentList	out		9296	1					
ANR	9335	Argument	out		9296	0					
ANR	9336	Identifier	out		9296	0					
ANR	9337	Argument	base64		9296	1					
ANR	9338	Identifier	base64		9296	0					
ANR	9339	Argument	out_len		9296	2					
ANR	9340	Identifier	out_len		9296	0					
ANR	9341	IfStatement	if ( out_len > 0 && out_len >= key_len )		9296	4					
ANR	9342	Condition	out_len > 0 && out_len >= key_len	353:8:9581:9613	9296	0	True				
ANR	9343	AndExpression	out_len > 0 && out_len >= key_len		9296	0		&&			
ANR	9344	RelationalExpression	out_len > 0		9296	0		>			
ANR	9345	Identifier	out_len		9296	0					
ANR	9346	PrimaryExpression	0		9296	1					
ANR	9347	RelationalExpression	out_len >= key_len		9296	1		>=			
ANR	9348	Identifier	out_len		9296	0					
ANR	9349	Identifier	key_len		9296	1					
ANR	9350	CompoundStatement		7:43:205:205	9296	1					
ANR	9351	ExpressionStatement	"memcpy ( key , out , key_len )"	354:8:9626:9651	9296	0	True				
ANR	9352	CallExpression	"memcpy ( key , out , key_len )"		9296	0					
ANR	9353	Callee	memcpy		9296	0					
ANR	9354	Identifier	memcpy		9296	0					
ANR	9355	ArgumentList	key		9296	1					
ANR	9356	Argument	key		9296	0					
ANR	9357	Identifier	key		9296	0					
ANR	9358	Argument	out		9296	1					
ANR	9359	Identifier	out		9296	0					
ANR	9360	Argument	key_len		9296	2					
ANR	9361	Identifier	key_len		9296	0					
ANR	9362	ExpressionStatement	"dump ( ""KEY"" , ( char * ) key , key_len )"	356:8:9677:9709	9296	1	True				
ANR	9363	CallExpression	"dump ( ""KEY"" , ( char * ) key , key_len )"		9296	0					
ANR	9364	Callee	dump		9296	0					
ANR	9365	Identifier	dump		9296	0					
ANR	9366	ArgumentList	"""KEY"""		9296	1					
ANR	9367	Argument	"""KEY"""		9296	0					
ANR	9368	PrimaryExpression	"""KEY"""		9296	0					
ANR	9369	Argument	( char * ) key		9296	1					
ANR	9370	CastExpression	( char * ) key		9296	0					
ANR	9371	CastTarget	char *		9296	0					
ANR	9372	Identifier	key		9296	1					
ANR	9373	Argument	key_len		9296	2					
ANR	9374	Identifier	key_len		9296	0					
ANR	9375	ReturnStatement	return key_len ;	358:8:9726:9740	9296	2	True				
ANR	9376	Identifier	key_len		9296	0					
ANR	9377	ExpressionStatement	out_len = BASE64_SIZE ( key_len )	361:4:9753:9783	9296	5	True				
ANR	9378	AssignmentExpression	out_len = BASE64_SIZE ( key_len )		9296	0		=			
ANR	9379	Identifier	out_len		9296	0					
ANR	9380	CallExpression	BASE64_SIZE ( key_len )		9296	1					
ANR	9381	Callee	BASE64_SIZE		9296	0					
ANR	9382	Identifier	BASE64_SIZE		9296	0					
ANR	9383	ArgumentList	key_len		9296	1					
ANR	9384	Argument	key_len		9296	0					
ANR	9385	Identifier	key_len		9296	0					
ANR	9386	IdentifierDeclStatement	char out_key [ out_len ] ;	362:4:9789:9810	9296	6	True				
ANR	9387	IdentifierDecl	out_key [ out_len ]		9296	0					
ANR	9388	IdentifierDeclType	char [ out_len ]		9296	0					
ANR	9389	Identifier	out_key		9296	1					
ANR	9390	Identifier	out_len		9296	2					
ANR	9391	ExpressionStatement	"rand_bytes ( key , key_len )"	363:4:9816:9840	9296	7	True				
ANR	9392	CallExpression	"rand_bytes ( key , key_len )"		9296	0					
ANR	9393	Callee	rand_bytes		9296	0					
ANR	9394	Identifier	rand_bytes		9296	0					
ANR	9395	ArgumentList	key		9296	1					
ANR	9396	Argument	key		9296	0					
ANR	9397	Identifier	key		9296	0					
ANR	9398	Argument	key_len		9296	1					
ANR	9399	Identifier	key_len		9296	0					
ANR	9400	ExpressionStatement	"base64_encode ( out_key , out_len , key , key_len )"	364:4:9846:9891	9296	8	True				
ANR	9401	CallExpression	"base64_encode ( out_key , out_len , key , key_len )"		9296	0					
ANR	9402	Callee	base64_encode		9296	0					
ANR	9403	Identifier	base64_encode		9296	0					
ANR	9404	ArgumentList	out_key		9296	1					
ANR	9405	Argument	out_key		9296	0					
ANR	9406	Identifier	out_key		9296	0					
ANR	9407	Argument	out_len		9296	1					
ANR	9408	Identifier	out_len		9296	0					
ANR	9409	Argument	key		9296	2					
ANR	9410	Identifier	key		9296	0					
ANR	9411	Argument	key_len		9296	3					
ANR	9412	Identifier	key_len		9296	0					
ANR	9413	ExpressionStatement	"LOGE ( ""Invalid key for your chosen cipher!"" )"	365:4:9897:9940	9296	9	True				
ANR	9414	CallExpression	"LOGE ( ""Invalid key for your chosen cipher!"" )"		9296	0					
ANR	9415	Callee	LOGE		9296	0					
ANR	9416	Identifier	LOGE		9296	0					
ANR	9417	ArgumentList	"""Invalid key for your chosen cipher!"""		9296	1					
ANR	9418	Argument	"""Invalid key for your chosen cipher!"""		9296	0					
ANR	9419	PrimaryExpression	"""Invalid key for your chosen cipher!"""		9296	0					
ANR	9420	ExpressionStatement	"LOGE ( ""It requires a %zu-byte key encoded with URL-safe Base64"" , key_len )"	366:4:9946:10018	9296	10	True				
ANR	9421	CallExpression	"LOGE ( ""It requires a %zu-byte key encoded with URL-safe Base64"" , key_len )"		9296	0					
ANR	9422	Callee	LOGE		9296	0					
ANR	9423	Identifier	LOGE		9296	0					
ANR	9424	ArgumentList	"""It requires a %zu-byte key encoded with URL-safe Base64"""		9296	1					
ANR	9425	Argument	"""It requires a %zu-byte key encoded with URL-safe Base64"""		9296	0					
ANR	9426	PrimaryExpression	"""It requires a %zu-byte key encoded with URL-safe Base64"""		9296	0					
ANR	9427	Argument	key_len		9296	1					
ANR	9428	Identifier	key_len		9296	0					
ANR	9429	ExpressionStatement	"LOGE ( ""Generating a new random key: %s"" , out_key )"	367:4:10024:10072	9296	11	True				
ANR	9430	CallExpression	"LOGE ( ""Generating a new random key: %s"" , out_key )"		9296	0					
ANR	9431	Callee	LOGE		9296	0					
ANR	9432	Identifier	LOGE		9296	0					
ANR	9433	ArgumentList	"""Generating a new random key: %s"""		9296	1					
ANR	9434	Argument	"""Generating a new random key: %s"""		9296	0					
ANR	9435	PrimaryExpression	"""Generating a new random key: %s"""		9296	0					
ANR	9436	Argument	out_key		9296	1					
ANR	9437	Identifier	out_key		9296	0					
ANR	9438	ExpressionStatement	"FATAL ( ""Please use the key above or input a valid key"" )"	368:4:10078:10132	9296	12	True				
ANR	9439	CallExpression	"FATAL ( ""Please use the key above or input a valid key"" )"		9296	0					
ANR	9440	Callee	FATAL		9296	0					
ANR	9441	Identifier	FATAL		9296	0					
ANR	9442	ArgumentList	"""Please use the key above or input a valid key"""		9296	1					
ANR	9443	Argument	"""Please use the key above or input a valid key"""		9296	0					
ANR	9444	PrimaryExpression	"""Please use the key above or input a valid key"""		9296	0					
ANR	9445	ReturnStatement	return key_len ;	369:4:10138:10152	9296	13	True				
ANR	9446	Identifier	key_len		9296	0					
ANR	9447	ReturnType	int		9296	1					
ANR	9448	Identifier	crypto_parse_key		9296	2					
ANR	9449	ParameterList	"const char * base64 , uint8_t * key , size_t key_len"		9296	3					
ANR	9450	Parameter	const char * base64	346:17:9360:9377	9296	0	True				
ANR	9451	ParameterType	const char *		9296	0					
ANR	9452	Identifier	base64		9296	1					
ANR	9453	Parameter	uint8_t * key	346:37:9380:9391	9296	1	True				
ANR	9454	ParameterType	uint8_t *		9296	0					
ANR	9455	Identifier	key		9296	1					
ANR	9456	Parameter	size_t key_len	346:51:9394:9407	9296	2	True				
ANR	9457	ParameterType	size_t		9296	0					
ANR	9458	Identifier	key_len		9296	1					
ANR	9459	CFGEntryNode	ENTRY		9296		True				
ANR	9460	CFGExitNode	EXIT		9296		True				
ANR	9461	Symbol	strlen		9296						
ANR	9462	Symbol	base64_len		9296						
ANR	9463	Symbol	base64_decode		9296						
ANR	9464	Symbol	out_key		9296						
ANR	9465	Symbol	base64		9296						
ANR	9466	Symbol	BASE64_SIZE		9296						
ANR	9467	Symbol	key		9296						
ANR	9468	Symbol	out_len		9296						
ANR	9469	Symbol	key_len		9296						
ANR	9470	Symbol	out		9296						
ANR	9471	Function	dump	373:0:10173:10346							
ANR	9472	FunctionDef	"dump (char * tag , char * text , int len)"		9471	0					
ANR	9473	CompoundStatement		375:0:10215:10346	9471	0					
ANR	9474	IdentifierDeclStatement	int i ;	376:4:10221:10226	9471	0	True				
ANR	9475	IdentifierDecl	i		9471	0					
ANR	9476	IdentifierDeclType	int		9471	0					
ANR	9477	Identifier	i		9471	1					
ANR	9478	ExpressionStatement	"printf ( ""%s: "" , tag )"	377:4:10232:10251	9471	1	True				
ANR	9479	CallExpression	"printf ( ""%s: "" , tag )"		9471	0					
ANR	9480	Callee	printf		9471	0					
ANR	9481	Identifier	printf		9471	0					
ANR	9482	ArgumentList	"""%s: """		9471	1					
ANR	9483	Argument	"""%s: """		9471	0					
ANR	9484	PrimaryExpression	"""%s: """		9471	0					
ANR	9485	Argument	tag		9471	1					
ANR	9486	Identifier	tag		9471	0					
ANR	9487	ForStatement	for ( i = 0 ; i < len ; i ++ )		9471	2					
ANR	9488	ForInit	i = 0 ;	378:9:10262:10267	9471	0	True				
ANR	9489	AssignmentExpression	i = 0		9471	0		=			
ANR	9490	Identifier	i		9471	0					
ANR	9491	PrimaryExpression	0		9471	1					
ANR	9492	Condition	i < len	378:16:10269:10275	9471	1	True				
ANR	9493	RelationalExpression	i < len		9471	0		<			
ANR	9494	Identifier	i		9471	0					
ANR	9495	Identifier	len		9471	1					
ANR	9496	PostIncDecOperationExpression	i ++	378:25:10278:10280	9471	2	True				
ANR	9497	Identifier	i		9471	0					
ANR	9498	IncDec	++		9471	1					
ANR	9499	ExpressionStatement	"printf ( ""0x%02x "" , ( uint8_t ) text [ i ] )"	379:8:10291:10326	9471	3	True				
ANR	9500	CallExpression	"printf ( ""0x%02x "" , ( uint8_t ) text [ i ] )"		9471	0					
ANR	9501	Callee	printf		9471	0					
ANR	9502	Identifier	printf		9471	0					
ANR	9503	ArgumentList	"""0x%02x """		9471	1					
ANR	9504	Argument	"""0x%02x """		9471	0					
ANR	9505	PrimaryExpression	"""0x%02x """		9471	0					
ANR	9506	Argument	( uint8_t ) text [ i ]		9471	1					
ANR	9507	CastExpression	( uint8_t ) text [ i ]		9471	0					
ANR	9508	CastTarget	uint8_t		9471	0					
ANR	9509	ArrayIndexing	text [ i ]		9471	1					
ANR	9510	Identifier	text		9471	0					
ANR	9511	Identifier	i		9471	1					
ANR	9512	ExpressionStatement	"printf ( ""\\n"" )"	380:4:10332:10344	9471	3	True				
ANR	9513	CallExpression	"printf ( ""\\n"" )"		9471	0					
ANR	9514	Callee	printf		9471	0					
ANR	9515	Identifier	printf		9471	0					
ANR	9516	ArgumentList	"""\\n"""		9471	1					
ANR	9517	Argument	"""\\n"""		9471	0					
ANR	9518	PrimaryExpression	"""\\n"""		9471	0					
ANR	9519	ReturnType	void		9471	1					
ANR	9520	Identifier	dump		9471	2					
ANR	9521	ParameterList	"char * tag , char * text , int len"		9471	3					
ANR	9522	Parameter	char * tag	374:5:10183:10191	9471	0	True				
ANR	9523	ParameterType	char *		9471	0					
ANR	9524	Identifier	tag		9471	1					
ANR	9525	Parameter	char * text	374:16:10194:10203	9471	1	True				
ANR	9526	ParameterType	char *		9471	0					
ANR	9527	Identifier	text		9471	1					
ANR	9528	Parameter	int len	374:28:10206:10212	9471	2	True				
ANR	9529	ParameterType	int		9471	0					
ANR	9530	Identifier	len		9471	1					
ANR	9531	CFGEntryNode	ENTRY		9471		True				
ANR	9532	CFGExitNode	EXIT		9471		True				
ANR	9533	Symbol	* i		9471						
ANR	9534	Symbol	len		9471						
ANR	9535	Symbol	* text		9471						
ANR	9536	Symbol	i		9471						
ANR	9537	Symbol	tag		9471						
ANR	9538	Symbol	text		9471						
