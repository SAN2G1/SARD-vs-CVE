command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	103511	File	data/converged/CVE-2017-15924_shadowsocks-libev/src_rule.c								
ANR	103512	DeclStmt									
ANR	103513	Decl							void	void ( rule_t * )	free_rule
ANR	103514	Function	new_rule	40:0:1620:1793							
ANR	103515	FunctionDef	new_rule ()		103514	0					
ANR	103516	CompoundStatement		42:0:1640:1793	103514	0					
ANR	103517	IdentifierDeclStatement	rule_t * rule ;	43:4:1646:1658	103514	0	True				
ANR	103518	IdentifierDecl	* rule		103514	0					
ANR	103519	IdentifierDeclType	rule_t *		103514	0					
ANR	103520	Identifier	rule		103514	1					
ANR	103521	ExpressionStatement	"rule = calloc ( 1 , sizeof ( rule_t ) )"	45:4:1665:1697	103514	1	True				
ANR	103522	AssignmentExpression	"rule = calloc ( 1 , sizeof ( rule_t ) )"		103514	0		=			
ANR	103523	Identifier	rule		103514	0					
ANR	103524	CallExpression	"calloc ( 1 , sizeof ( rule_t ) )"		103514	1					
ANR	103525	Callee	calloc		103514	0					
ANR	103526	Identifier	calloc		103514	0					
ANR	103527	ArgumentList	1		103514	1					
ANR	103528	Argument	1		103514	0					
ANR	103529	PrimaryExpression	1		103514	0					
ANR	103530	Argument	sizeof ( rule_t )		103514	1					
ANR	103531	SizeofExpression	sizeof ( rule_t )		103514	0					
ANR	103532	Sizeof	sizeof		103514	0					
ANR	103533	SizeofOperand	rule_t		103514	1					
ANR	103534	IfStatement	if ( rule == NULL )		103514	2					
ANR	103535	Condition	rule == NULL	46:8:1707:1718	103514	0	True				
ANR	103536	EqualityExpression	rule == NULL		103514	0		==			
ANR	103537	Identifier	rule		103514	0					
ANR	103538	Identifier	NULL		103514	1					
ANR	103539	CompoundStatement		5:22:80:80	103514	1					
ANR	103540	ExpressionStatement	"ERROR ( ""malloc"" )"	47:8:1731:1746	103514	0	True				
ANR	103541	CallExpression	"ERROR ( ""malloc"" )"		103514	0					
ANR	103542	Callee	ERROR		103514	0					
ANR	103543	Identifier	ERROR		103514	0					
ANR	103544	ArgumentList	"""malloc"""		103514	1					
ANR	103545	Argument	"""malloc"""		103514	0					
ANR	103546	PrimaryExpression	"""malloc"""		103514	0					
ANR	103547	ReturnStatement	return NULL ;	48:8:1756:1767	103514	1	True				
ANR	103548	Identifier	NULL		103514	0					
ANR	103549	ReturnStatement	return rule ;	51:4:1780:1791	103514	3	True				
ANR	103550	Identifier	rule		103514	0					
ANR	103551	ReturnType	rule_t *		103514	1					
ANR	103552	Identifier	new_rule		103514	2					
ANR	103553	ParameterList			103514	3					
ANR	103554	CFGEntryNode	ENTRY		103514		True				
ANR	103555	CFGExitNode	EXIT		103514		True				
ANR	103556	Symbol	NULL		103514						
ANR	103557	Symbol	rule		103514						
ANR	103558	Symbol	calloc		103514						
ANR	103559	Function	accept_rule_arg	54:0:1796:2135							
ANR	103560	FunctionDef	"accept_rule_arg (rule_t * rule , const char * arg)"		103559	0					
ANR	103561	CompoundStatement		56:0:1847:2135	103559	0					
ANR	103562	IfStatement	if ( rule -> pattern == NULL )		103559	0					
ANR	103563	Condition	rule -> pattern == NULL	57:8:1857:1877	103559	0	True				
ANR	103564	EqualityExpression	rule -> pattern == NULL		103559	0		==			
ANR	103565	PtrMemberAccess	rule -> pattern		103559	0					
ANR	103566	Identifier	rule		103559	0					
ANR	103567	Identifier	pattern		103559	1					
ANR	103568	Identifier	NULL		103559	1					
ANR	103569	CompoundStatement		2:31:32:32	103559	1					
ANR	103570	ExpressionStatement	rule -> pattern = strdup ( arg )	58:8:1890:1917	103559	0	True				
ANR	103571	AssignmentExpression	rule -> pattern = strdup ( arg )		103559	0		=			
ANR	103572	PtrMemberAccess	rule -> pattern		103559	0					
ANR	103573	Identifier	rule		103559	0					
ANR	103574	Identifier	pattern		103559	1					
ANR	103575	CallExpression	strdup ( arg )		103559	1					
ANR	103576	Callee	strdup		103559	0					
ANR	103577	Identifier	strdup		103559	0					
ANR	103578	ArgumentList	arg		103559	1					
ANR	103579	Argument	arg		103559	0					
ANR	103580	Identifier	arg		103559	0					
ANR	103581	IfStatement	if ( rule -> pattern == NULL )		103559	1					
ANR	103582	Condition	rule -> pattern == NULL	59:12:1931:1951	103559	0	True				
ANR	103583	EqualityExpression	rule -> pattern == NULL		103559	0		==			
ANR	103584	PtrMemberAccess	rule -> pattern		103559	0					
ANR	103585	Identifier	rule		103559	0					
ANR	103586	Identifier	pattern		103559	1					
ANR	103587	Identifier	NULL		103559	1					
ANR	103588	CompoundStatement		4:35:106:106	103559	1					
ANR	103589	ExpressionStatement	"ERROR ( ""strdup failed"" )"	60:12:1968:1990	103559	0	True				
ANR	103590	CallExpression	"ERROR ( ""strdup failed"" )"		103559	0					
ANR	103591	Callee	ERROR		103559	0					
ANR	103592	Identifier	ERROR		103559	0					
ANR	103593	ArgumentList	"""strdup failed"""		103559	1					
ANR	103594	Argument	"""strdup failed"""		103559	0					
ANR	103595	PrimaryExpression	"""strdup failed"""		103559	0					
ANR	103596	ReturnStatement	return - 1 ;	61:12:2004:2013	103559	1	True				
ANR	103597	UnaryOperationExpression	- 1		103559	0					
ANR	103598	UnaryOperator	-		103559	0					
ANR	103599	PrimaryExpression	1		103559	1					
ANR	103600	ElseStatement	else		103559	0					
ANR	103601	CompoundStatement		8:11:188:188	103559	0					
ANR	103602	ExpressionStatement	"LOGE ( ""Unexpected table rule argument: %s"" , arg )"	64:8:2046:2093	103559	0	True				
ANR	103603	CallExpression	"LOGE ( ""Unexpected table rule argument: %s"" , arg )"		103559	0					
ANR	103604	Callee	LOGE		103559	0					
ANR	103605	Identifier	LOGE		103559	0					
ANR	103606	ArgumentList	"""Unexpected table rule argument: %s"""		103559	1					
ANR	103607	Argument	"""Unexpected table rule argument: %s"""		103559	0					
ANR	103608	PrimaryExpression	"""Unexpected table rule argument: %s"""		103559	0					
ANR	103609	Argument	arg		103559	1					
ANR	103610	Identifier	arg		103559	0					
ANR	103611	ReturnStatement	return - 1 ;	65:8:2103:2112	103559	1	True				
ANR	103612	UnaryOperationExpression	- 1		103559	0					
ANR	103613	UnaryOperator	-		103559	0					
ANR	103614	PrimaryExpression	1		103559	1					
ANR	103615	ReturnStatement	return 1 ;	68:4:2125:2133	103559	1	True				
ANR	103616	PrimaryExpression	1		103559	0					
ANR	103617	ReturnType	int		103559	1					
ANR	103618	Identifier	accept_rule_arg		103559	2					
ANR	103619	ParameterList	"rule_t * rule , const char * arg"		103559	3					
ANR	103620	Parameter	rule_t * rule	55:16:1816:1827	103559	0	True				
ANR	103621	ParameterType	rule_t *		103559	0					
ANR	103622	Identifier	rule		103559	1					
ANR	103623	Parameter	const char * arg	55:30:1830:1844	103559	1	True				
ANR	103624	ParameterType	const char *		103559	0					
ANR	103625	Identifier	arg		103559	1					
ANR	103626	CFGEntryNode	ENTRY		103559		True				
ANR	103627	CFGExitNode	EXIT		103559		True				
ANR	103628	Symbol	NULL		103559						
ANR	103629	Symbol	rule -> pattern		103559						
ANR	103630	Symbol	* rule		103559						
ANR	103631	Symbol	arg		103559						
ANR	103632	Symbol	rule		103559						
ANR	103633	Symbol	strdup		103559						
ANR	103634	Function	add_rule	71:0:2138:2239							
ANR	103635	FunctionDef	"add_rule (struct cork_dllist * rules , rule_t * rule)"		103634	0					
ANR	103636	CompoundStatement		73:0:2193:2239	103634	0					
ANR	103637	ExpressionStatement	"cork_dllist_add ( rules , & rule -> entries )"	74:4:2199:2237	103634	0	True				
ANR	103638	CallExpression	"cork_dllist_add ( rules , & rule -> entries )"		103634	0					
ANR	103639	Callee	cork_dllist_add		103634	0					
ANR	103640	Identifier	cork_dllist_add		103634	0					
ANR	103641	ArgumentList	rules		103634	1					
ANR	103642	Argument	rules		103634	0					
ANR	103643	Identifier	rules		103634	0					
ANR	103644	Argument	& rule -> entries		103634	1					
ANR	103645	UnaryOperationExpression	& rule -> entries		103634	0					
ANR	103646	UnaryOperator	&		103634	0					
ANR	103647	PtrMemberAccess	rule -> entries		103634	1					
ANR	103648	Identifier	rule		103634	0					
ANR	103649	Identifier	entries		103634	1					
ANR	103650	ReturnType	void		103634	1					
ANR	103651	Identifier	add_rule		103634	2					
ANR	103652	ParameterList	"struct cork_dllist * rules , rule_t * rule"		103634	3					
ANR	103653	Parameter	struct cork_dllist * rules	72:9:2152:2176	103634	0	True				
ANR	103654	ParameterType	struct cork_dllist *		103634	0					
ANR	103655	Identifier	rules		103634	1					
ANR	103656	Parameter	rule_t * rule	72:36:2179:2190	103634	1	True				
ANR	103657	ParameterType	rule_t *		103634	0					
ANR	103658	Identifier	rule		103634	1					
ANR	103659	CFGEntryNode	ENTRY		103634		True				
ANR	103660	CFGExitNode	EXIT		103634		True				
ANR	103661	Symbol	& rule -> entries		103634						
ANR	103662	Symbol	rule		103634						
ANR	103663	Symbol	rules		103634						
ANR	103664	Function	init_rule	77:0:2242:2676							
ANR	103665	FunctionDef	init_rule (rule_t * rule)		103664	0					
ANR	103666	CompoundStatement		79:0:2270:2676	103664	0					
ANR	103667	IfStatement	if ( rule -> pattern_re == NULL )		103664	0					
ANR	103668	Condition	rule -> pattern_re == NULL	80:8:2280:2303	103664	0	True				
ANR	103669	EqualityExpression	rule -> pattern_re == NULL		103664	0		==			
ANR	103670	PtrMemberAccess	rule -> pattern_re		103664	0					
ANR	103671	Identifier	rule		103664	0					
ANR	103672	Identifier	pattern_re		103664	1					
ANR	103673	Identifier	NULL		103664	1					
ANR	103674	CompoundStatement		4:8:72:87	103664	1					
ANR	103675	IdentifierDeclStatement	const char * reerr ;	81:8:2316:2333	103664	0	True				
ANR	103676	IdentifierDecl	* reerr		103664	0					
ANR	103677	IdentifierDeclType	const char *		103664	0					
ANR	103678	Identifier	reerr		103664	1					
ANR	103679	IdentifierDeclStatement	int reerroffset ;	82:8:2343:2358	103664	1	True				
ANR	103680	IdentifierDecl	reerroffset		103664	0					
ANR	103681	IdentifierDeclType	int		103664	0					
ANR	103682	Identifier	reerroffset		103664	1					
ANR	103683	ExpressionStatement	"rule -> pattern_re = pcre_compile ( rule -> pattern , 0 , & reerr , & reerroffset , NULL )"	84:8:2369:2458	103664	2	True				
ANR	103684	AssignmentExpression	"rule -> pattern_re = pcre_compile ( rule -> pattern , 0 , & reerr , & reerroffset , NULL )"		103664	0		=			
ANR	103685	PtrMemberAccess	rule -> pattern_re		103664	0					
ANR	103686	Identifier	rule		103664	0					
ANR	103687	Identifier	pattern_re		103664	1					
ANR	103688	CallExpression	"pcre_compile ( rule -> pattern , 0 , & reerr , & reerroffset , NULL )"		103664	1					
ANR	103689	Callee	pcre_compile		103664	0					
ANR	103690	Identifier	pcre_compile		103664	0					
ANR	103691	ArgumentList	rule -> pattern		103664	1					
ANR	103692	Argument	rule -> pattern		103664	0					
ANR	103693	PtrMemberAccess	rule -> pattern		103664	0					
ANR	103694	Identifier	rule		103664	0					
ANR	103695	Identifier	pattern		103664	1					
ANR	103696	Argument	0		103664	1					
ANR	103697	PrimaryExpression	0		103664	0					
ANR	103698	Argument	& reerr		103664	2					
ANR	103699	UnaryOperationExpression	& reerr		103664	0					
ANR	103700	UnaryOperator	&		103664	0					
ANR	103701	Identifier	reerr		103664	1					
ANR	103702	Argument	& reerroffset		103664	3					
ANR	103703	UnaryOperationExpression	& reerroffset		103664	0					
ANR	103704	UnaryOperator	&		103664	0					
ANR	103705	Identifier	reerroffset		103664	1					
ANR	103706	Argument	NULL		103664	4					
ANR	103707	Identifier	NULL		103664	0					
ANR	103708	IfStatement	if ( rule -> pattern_re == NULL )		103664	3					
ANR	103709	Condition	rule -> pattern_re == NULL	86:12:2472:2495	103664	0	True				
ANR	103710	EqualityExpression	rule -> pattern_re == NULL		103664	0		==			
ANR	103711	PtrMemberAccess	rule -> pattern_re		103664	0					
ANR	103712	Identifier	rule		103664	0					
ANR	103713	Identifier	pattern_re		103664	1					
ANR	103714	Identifier	NULL		103664	1					
ANR	103715	CompoundStatement		8:38:227:227	103664	1					
ANR	103716	ExpressionStatement	"LOGE ( ""Regex compilation of \\""%s\\"" failed: %s, offset %d"" , rule -> pattern , reerr , reerroffset )"	87:12:2512:2621	103664	0	True				
ANR	103717	CallExpression	"LOGE ( ""Regex compilation of \\""%s\\"" failed: %s, offset %d"" , rule -> pattern , reerr , reerroffset )"		103664	0					
ANR	103718	Callee	LOGE		103664	0					
ANR	103719	Identifier	LOGE		103664	0					
ANR	103720	ArgumentList	"""Regex compilation of \\""%s\\"" failed: %s, offset %d"""		103664	1					
ANR	103721	Argument	"""Regex compilation of \\""%s\\"" failed: %s, offset %d"""		103664	0					
ANR	103722	PrimaryExpression	"""Regex compilation of \\""%s\\"" failed: %s, offset %d"""		103664	0					
ANR	103723	Argument	rule -> pattern		103664	1					
ANR	103724	PtrMemberAccess	rule -> pattern		103664	0					
ANR	103725	Identifier	rule		103664	0					
ANR	103726	Identifier	pattern		103664	1					
ANR	103727	Argument	reerr		103664	2					
ANR	103728	Identifier	reerr		103664	0					
ANR	103729	Argument	reerroffset		103664	3					
ANR	103730	Identifier	reerroffset		103664	0					
ANR	103731	ReturnStatement	return 0 ;	89:12:2635:2643	103664	1	True				
ANR	103732	PrimaryExpression	0		103664	0					
ANR	103733	ReturnStatement	return 1 ;	93:4:2666:2674	103664	1	True				
ANR	103734	PrimaryExpression	1		103664	0					
ANR	103735	ReturnType	int		103664	1					
ANR	103736	Identifier	init_rule		103664	2					
ANR	103737	ParameterList	rule_t * rule		103664	3					
ANR	103738	Parameter	rule_t * rule	78:10:2256:2267	103664	0	True				
ANR	103739	ParameterType	rule_t *		103664	0					
ANR	103740	Identifier	rule		103664	1					
ANR	103741	CFGEntryNode	ENTRY		103664		True				
ANR	103742	CFGExitNode	EXIT		103664		True				
ANR	103743	Symbol	reerroffset		103664						
ANR	103744	Symbol	rule -> pattern_re		103664						
ANR	103745	Symbol	NULL		103664						
ANR	103746	Symbol	& reerr		103664						
ANR	103747	Symbol	rule -> pattern		103664						
ANR	103748	Symbol	* rule		103664						
ANR	103749	Symbol	reerr		103664						
ANR	103750	Symbol	& reerroffset		103664						
ANR	103751	Symbol	rule		103664						
ANR	103752	Symbol	pcre_compile		103664						
ANR	103753	Function	lookup_rule	96:0:2679:3158							
ANR	103754	FunctionDef	"lookup_rule (const struct cork_dllist * rules , const char * name , size_t name_len)"		103753	0					
ANR	103755	CompoundStatement		98:0:2768:3158	103753	0					
ANR	103756	IdentifierDeclStatement	"struct cork_dllist_item * curr , * next ;"	99:4:2774:2810	103753	0	True				
ANR	103757	IdentifierDecl	* curr		103753	0					
ANR	103758	IdentifierDeclType	struct cork_dllist_item *		103753	0					
ANR	103759	Identifier	curr		103753	1					
ANR	103760	IdentifierDecl	* next		103753	1					
ANR	103761	IdentifierDeclType	struct cork_dllist_item *		103753	0					
ANR	103762	Identifier	next		103753	1					
ANR	103763	IfStatement	if ( name == NULL )		103753	1					
ANR	103764	Condition	name == NULL	101:8:2821:2832	103753	0	True				
ANR	103765	EqualityExpression	name == NULL		103753	0		==			
ANR	103766	Identifier	name		103753	0					
ANR	103767	Identifier	NULL		103753	1					
ANR	103768	CompoundStatement		4:22:66:66	103753	1					
ANR	103769	ExpressionStatement	"name = """""	102:8:2845:2858	103753	0	True				
ANR	103770	AssignmentExpression	"name = """""		103753	0		=			
ANR	103771	Identifier	name		103753	0					
ANR	103772	PrimaryExpression	""""""		103753	1					
ANR	103773	ExpressionStatement	name_len = 0	103:8:2868:2880	103753	1	True				
ANR	103774	AssignmentExpression	name_len = 0		103753	0		=			
ANR	103775	Identifier	name_len		103753	0					
ANR	103776	PrimaryExpression	0		103753	1					
ANR	103777	Statement	cork_dllist_foreach_void	106:4:2893:2916	103753	2	True				
ANR	103778	Statement	(	106:28:2917:2917	103753	3	True				
ANR	103779	Statement	rules	106:29:2918:2922	103753	4	True				
ANR	103780	Statement	","	106:34:2923:2923	103753	5	True				
ANR	103781	Statement	curr	106:36:2925:2928	103753	6	True				
ANR	103782	Statement	","	106:40:2929:2929	103753	7	True				
ANR	103783	Statement	next	106:42:2931:2934	103753	8	True				
ANR	103784	Statement	)	106:46:2935:2935	103753	9	True				
ANR	103785	CompoundStatement		10:8:178:233	103753	10					
ANR	103786	IdentifierDeclStatement	"rule_t * rule = cork_container_of ( curr , rule_t , entries ) ;"	107:8:2947:3002	103753	0	True				
ANR	103787	IdentifierDecl	"* rule = cork_container_of ( curr , rule_t , entries )"		103753	0					
ANR	103788	IdentifierDeclType	rule_t *		103753	0					
ANR	103789	Identifier	rule		103753	1					
ANR	103790	AssignmentExpression	"* rule = cork_container_of ( curr , rule_t , entries )"		103753	2		=			
ANR	103791	Identifier	rule		103753	0					
ANR	103792	CallExpression	"cork_container_of ( curr , rule_t , entries )"		103753	1					
ANR	103793	Callee	cork_container_of		103753	0					
ANR	103794	Identifier	cork_container_of		103753	0					
ANR	103795	ArgumentList	curr		103753	1					
ANR	103796	Argument	curr		103753	0					
ANR	103797	Identifier	curr		103753	0					
ANR	103798	Argument	rule_t		103753	1					
ANR	103799	Identifier	rule_t		103753	0					
ANR	103800	Argument	entries		103753	2					
ANR	103801	Identifier	entries		103753	0					
ANR	103802	IfStatement	"if ( pcre_exec ( rule -> pattern_re , NULL , name , name_len , 0 , 0 , NULL , 0 ) >= 0 )"		103753	1					
ANR	103803	Condition	"pcre_exec ( rule -> pattern_re , NULL , name , name_len , 0 , 0 , NULL , 0 ) >= 0"	108:12:3016:3106	103753	0	True				
ANR	103804	RelationalExpression	"pcre_exec ( rule -> pattern_re , NULL , name , name_len , 0 , 0 , NULL , 0 ) >= 0"		103753	0		>=			
ANR	103805	CallExpression	"pcre_exec ( rule -> pattern_re , NULL , name , name_len , 0 , 0 , NULL , 0 )"		103753	0					
ANR	103806	Callee	pcre_exec		103753	0					
ANR	103807	Identifier	pcre_exec		103753	0					
ANR	103808	ArgumentList	rule -> pattern_re		103753	1					
ANR	103809	Argument	rule -> pattern_re		103753	0					
ANR	103810	PtrMemberAccess	rule -> pattern_re		103753	0					
ANR	103811	Identifier	rule		103753	0					
ANR	103812	Identifier	pattern_re		103753	1					
ANR	103813	Argument	NULL		103753	1					
ANR	103814	Identifier	NULL		103753	0					
ANR	103815	Argument	name		103753	2					
ANR	103816	Identifier	name		103753	0					
ANR	103817	Argument	name_len		103753	3					
ANR	103818	Identifier	name_len		103753	0					
ANR	103819	Argument	0		103753	4					
ANR	103820	PrimaryExpression	0		103753	0					
ANR	103821	Argument	0		103753	5					
ANR	103822	PrimaryExpression	0		103753	0					
ANR	103823	Argument	NULL		103753	6					
ANR	103824	Identifier	NULL		103753	0					
ANR	103825	Argument	0		103753	7					
ANR	103826	PrimaryExpression	0		103753	0					
ANR	103827	PrimaryExpression	0		103753	1					
ANR	103828	ReturnStatement	return rule ;	110:12:3121:3132	103753	1	True				
ANR	103829	Identifier	rule		103753	0					
ANR	103830	ReturnStatement	return NULL ;	113:4:3145:3156	103753	11	True				
ANR	103831	Identifier	NULL		103753	0					
ANR	103832	ReturnType	rule_t *		103753	1					
ANR	103833	Identifier	lookup_rule		103753	2					
ANR	103834	ParameterList	"const struct cork_dllist * rules , const char * name , size_t name_len"		103753	3					
ANR	103835	Parameter	const struct cork_dllist * rules	97:12:2700:2730	103753	0	True				
ANR	103836	ParameterType	const struct cork_dllist *		103753	0					
ANR	103837	Identifier	rules		103753	1					
ANR	103838	Parameter	const char * name	97:45:2733:2748	103753	1	True				
ANR	103839	ParameterType	const char *		103753	0					
ANR	103840	Identifier	name		103753	1					
ANR	103841	Parameter	size_t name_len	97:63:2751:2765	103753	2	True				
ANR	103842	ParameterType	size_t		103753	0					
ANR	103843	Identifier	name_len		103753	1					
ANR	103844	CFGEntryNode	ENTRY		103753		True				
ANR	103845	CFGExitNode	EXIT		103753		True				
ANR	103846	Symbol	next		103753						
ANR	103847	Symbol	rule -> pattern_re		103753						
ANR	103848	Symbol	NULL		103753						
ANR	103849	Symbol	pcre_exec		103753						
ANR	103850	Symbol	rule		103753						
ANR	103851	Symbol	rules		103753						
ANR	103852	Symbol	cork_container_of		103753						
ANR	103853	Symbol	entries		103753						
ANR	103854	Symbol	* rule		103753						
ANR	103855	Symbol	name		103753						
ANR	103856	Symbol	rule_t		103753						
ANR	103857	Symbol	name_len		103753						
ANR	103858	Symbol	curr		103753						
ANR	103859	Function	remove_rule	116:0:3161:3255							
ANR	103860	FunctionDef	remove_rule (rule_t * rule)		103859	0					
ANR	103861	CompoundStatement		118:0:3192:3255	103859	0					
ANR	103862	ExpressionStatement	cork_dllist_remove ( & rule -> entries )	119:4:3198:3232	103859	0	True				
ANR	103863	CallExpression	cork_dllist_remove ( & rule -> entries )		103859	0					
ANR	103864	Callee	cork_dllist_remove		103859	0					
ANR	103865	Identifier	cork_dllist_remove		103859	0					
ANR	103866	ArgumentList	& rule -> entries		103859	1					
ANR	103867	Argument	& rule -> entries		103859	0					
ANR	103868	UnaryOperationExpression	& rule -> entries		103859	0					
ANR	103869	UnaryOperator	&		103859	0					
ANR	103870	PtrMemberAccess	rule -> entries		103859	1					
ANR	103871	Identifier	rule		103859	0					
ANR	103872	Identifier	entries		103859	1					
ANR	103873	ExpressionStatement	free_rule ( rule )	120:4:3238:3253	103859	1	True				
ANR	103874	CallExpression	free_rule ( rule )		103859	0					
ANR	103875	Callee	free_rule		103859	0					
ANR	103876	Identifier	free_rule		103859	0					
ANR	103877	ArgumentList	rule		103859	1					
ANR	103878	Argument	rule		103859	0					
ANR	103879	Identifier	rule		103859	0					
ANR	103880	ReturnType	void		103859	1					
ANR	103881	Identifier	remove_rule		103859	2					
ANR	103882	ParameterList	rule_t * rule		103859	3					
ANR	103883	Parameter	rule_t * rule	117:12:3178:3189	103859	0	True				
ANR	103884	ParameterType	rule_t *		103859	0					
ANR	103885	Identifier	rule		103859	1					
ANR	103886	CFGEntryNode	ENTRY		103859		True				
ANR	103887	CFGExitNode	EXIT		103859		True				
ANR	103888	Symbol	& rule -> entries		103859						
ANR	103889	Symbol	rule		103859						
ANR	103890	Function	free_rule	123:0:3258:3453							
ANR	103891	FunctionDef	free_rule (rule_t * rule)		103890	0					
ANR	103892	CompoundStatement		125:0:3294:3453	103890	0					
ANR	103893	IfStatement	if ( rule == NULL )		103890	0					
ANR	103894	Condition	rule == NULL	126:8:3304:3315	103890	0	True				
ANR	103895	EqualityExpression	rule == NULL		103890	0		==			
ANR	103896	Identifier	rule		103890	0					
ANR	103897	Identifier	NULL		103890	1					
ANR	103898	ReturnStatement	return ;	127:8:3326:3332	103890	1	True				
ANR	103899	ExpressionStatement	ss_free ( rule -> pattern )	129:4:3339:3361	103890	1	True				
ANR	103900	CallExpression	ss_free ( rule -> pattern )		103890	0					
ANR	103901	Callee	ss_free		103890	0					
ANR	103902	Identifier	ss_free		103890	0					
ANR	103903	ArgumentList	rule -> pattern		103890	1					
ANR	103904	Argument	rule -> pattern		103890	0					
ANR	103905	PtrMemberAccess	rule -> pattern		103890	0					
ANR	103906	Identifier	rule		103890	0					
ANR	103907	Identifier	pattern		103890	1					
ANR	103908	IfStatement	if ( rule -> pattern_re != NULL )		103890	2					
ANR	103909	Condition	rule -> pattern_re != NULL	130:8:3371:3394	103890	0	True				
ANR	103910	EqualityExpression	rule -> pattern_re != NULL		103890	0		!=			
ANR	103911	PtrMemberAccess	rule -> pattern_re		103890	0					
ANR	103912	Identifier	rule		103890	0					
ANR	103913	Identifier	pattern_re		103890	1					
ANR	103914	Identifier	NULL		103890	1					
ANR	103915	ExpressionStatement	pcre_free ( rule -> pattern_re )	131:8:3405:3432	103890	1	True				
ANR	103916	CallExpression	pcre_free ( rule -> pattern_re )		103890	0					
ANR	103917	Callee	pcre_free		103890	0					
ANR	103918	Identifier	pcre_free		103890	0					
ANR	103919	ArgumentList	rule -> pattern_re		103890	1					
ANR	103920	Argument	rule -> pattern_re		103890	0					
ANR	103921	PtrMemberAccess	rule -> pattern_re		103890	0					
ANR	103922	Identifier	rule		103890	0					
ANR	103923	Identifier	pattern_re		103890	1					
ANR	103924	ExpressionStatement	ss_free ( rule )	132:4:3438:3451	103890	3	True				
ANR	103925	CallExpression	ss_free ( rule )		103890	0					
ANR	103926	Callee	ss_free		103890	0					
ANR	103927	Identifier	ss_free		103890	0					
ANR	103928	ArgumentList	rule		103890	1					
ANR	103929	Argument	rule		103890	0					
ANR	103930	Identifier	rule		103890	0					
ANR	103931	ReturnType	static void		103890	1					
ANR	103932	Identifier	free_rule		103890	2					
ANR	103933	ParameterList	rule_t * rule		103890	3					
ANR	103934	Parameter	rule_t * rule	124:10:3280:3291	103890	0	True				
ANR	103935	ParameterType	rule_t *		103890	0					
ANR	103936	Identifier	rule		103890	1					
ANR	103937	CFGEntryNode	ENTRY		103890		True				
ANR	103938	CFGExitNode	EXIT		103890		True				
ANR	103939	Symbol	rule -> pattern_re		103890						
ANR	103940	Symbol	NULL		103890						
ANR	103941	Symbol	rule -> pattern		103890						
ANR	103942	Symbol	* rule		103890						
ANR	103943	Symbol	rule		103890						
