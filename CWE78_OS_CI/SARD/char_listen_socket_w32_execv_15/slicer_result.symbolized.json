[
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 79,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (6)\nint  Var4; \nchar *Var5; \nSTRUCT1  Var6=Var7; \nSTRUCT1  Var8=Var7; \nsize_t  Var9=strlen(Var1); \nif (FUNC1(FUNC2(2,2),&Var10) !=  Var11)\nif (Var6 ==  Var7)\nif (FUNC3(Var6,(struct STRUCT2 *)&Var12,sizeof (Var12)) ==  Var13)\nif (FUNC4(Var6,Var14) ==  Var13)\nif (Var8 ==  Var13)\nVar4=recv(Var8,(char *)(Var1+Var9),sizeof (char )*(100-Var9-1),0); \nif (Var4 ==  Var13||Var4 == 0)\nVar1[Var9+Var4/sizeof (char )]=0; \nVar5=strchr(Var1,Var15); \nVar5=strchr(Var1,Var16); \nwhile (0); \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "socket",
    "line": 90,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "        while (0);\n",
      "        if (listenSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(listenSocket);\n",
      "        if (acceptSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(acceptSocket);\n",
      "        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n"
    ],
    "tokenized": "char *Var1; \nswitch (6)\nint  Var2; \nSTRUCT1  Var3=Var4; \nSTRUCT1  Var5=Var4; \nsize_t  Var6=strlen(Var1); \nif (FUNC1(FUNC2(2,2),&Var7) !=  Var8)\nVar3=socket(Var9,Var10,Var11); \nif (Var3 ==  Var4)\nif (FUNC3(Var3,(struct STRUCT2 *)&Var12,sizeof (Var12)) ==  Var13)\nif (FUNC4(Var3,Var14) ==  Var13)\nVar5=FUNC5(Var3,NULL ,NULL ); \nif (Var5 ==  Var13)\nVar2=recv(Var5,(char *)(Var1+Var6),sizeof (char )*(100-Var6-1),0); \nif (Var2 ==  Var13||Var2 == 0)\nVar1[Var6+Var2/sizeof (char )]=0; \nwhile (0); \nif (Var3 !=  Var4)\nFUNC6(Var3); \nif (Var5 !=  Var4)\nFUNC6(Var5); \nchar *Var15[]={Var16,Var17,Var18,NULL }; \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "memset",
    "line": 95,
    "label": 0,
    "slices": [
      "    switch(6)\n",
      "        int recvResult;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            memset(&service, 0, sizeof(service));\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "        while (0);\n"
    ],
    "tokenized": "switch (6)\nint  Var1; \nSTRUCT1  Var2=Var3; \nSTRUCT1  Var4=Var3; \nif (FUNC1(FUNC2(2,2),&Var5) !=  Var6)\nif (Var2 ==  Var3)\nmemset(&Var7,0,sizeof (Var7)); \nif (FUNC3(Var2,(struct STRUCT2 *)&Var7,sizeof (Var7)) ==  Var8)\nif (FUNC4(Var2,Var9) ==  Var8)\nif (Var4 ==  Var8)\nif (Var1 ==  Var8||Var1 == 0)\nwhile (0); \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "recv",
    "line": 113,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n",
      "        if (acceptSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(acceptSocket);\n",
      "        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (6)\nint  Var4; \nchar *Var5; \nSTRUCT1  Var6=Var7; \nSTRUCT1  Var8=Var7; \nsize_t  Var9=strlen(Var1); \nif (FUNC1(FUNC2(2,2),&Var10) !=  Var11)\nVar6=socket(Var12,Var13,Var14); \nif (Var6 ==  Var7)\nif (FUNC3(Var6,(struct STRUCT2 *)&Var15,sizeof (Var15)) ==  Var16)\nif (FUNC4(Var6,Var17) ==  Var16)\nVar8=FUNC5(Var6,NULL ,NULL ); \nif (Var8 ==  Var16)\nVar4=recv(Var8,(char *)(Var1+Var9),sizeof (char )*(100-Var9-1),0); \nif (Var4 ==  Var16||Var4 == 0)\nVar1[Var9+Var4/sizeof (char )]=0; \nVar5=strchr(Var1,Var18); \nVar5=strchr(Var1,Var19); \nwhile (0); \nif (Var8 !=  Var7)\nFUNC6(Var8); \nchar *Var20[]={Var21,Var22,Var23,NULL }; \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 121,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (6)\nint  Var4; \nchar *Var5; \nSTRUCT1  Var6=Var7; \nSTRUCT1  Var8=Var7; \nsize_t  Var9=strlen(Var1); \nif (FUNC1(FUNC2(2,2),&Var10) !=  Var11)\nif (Var6 ==  Var7)\nif (FUNC3(Var6,(struct STRUCT2 *)&Var12,sizeof (Var12)) ==  Var13)\nif (FUNC4(Var6,Var14) ==  Var13)\nif (Var8 ==  Var13)\nVar4=recv(Var8,(char *)(Var1+Var9),sizeof (char )*(100-Var9-1),0); \nif (Var4 ==  Var13||Var4 == 0)\nVar1[Var9+Var4/sizeof (char )]=0; \nVar5=strchr(Var1,Var15); \nif (Var5)\n*Var5=0; \nVar5=strchr(Var1,Var16); \nif (Var5)\n*Var5=0; \nwhile (0); \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 126,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (6)\nint  Var4; \nchar *Var5; \nSTRUCT1  Var6=Var7; \nSTRUCT1  Var8=Var7; \nsize_t  Var9=strlen(Var1); \nif (FUNC1(FUNC2(2,2),&Var10) !=  Var11)\nif (Var6 ==  Var7)\nif (FUNC3(Var6,(struct STRUCT2 *)&Var12,sizeof (Var12)) ==  Var13)\nif (FUNC4(Var6,Var14) ==  Var13)\nif (Var8 ==  Var13)\nVar4=recv(Var8,(char *)(Var1+Var9),sizeof (char )*(100-Var9-1),0); \nif (Var4 ==  Var13||Var4 == 0)\nVar1[Var9+Var4/sizeof (char )]=0; \nVar5=strchr(Var1,Var15); \nif (Var5)\n*Var5=0; \nVar5=strchr(Var1,Var16); \nif (Var5)\n*Var5=0; \nwhile (0); \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "goodG2B1",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strcat",
    "line": 180,
    "label": 1,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(5)\n",
      "        strcat(data, \"*.*\");\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (5)\nstrcat(Var1,STRING); \n"
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "goodG2B2",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strcat",
    "line": 201,
    "label": 1,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        strcat(data, \"*.*\");\n"
    ],
    "tokenized": "char *Var1; \nchar  Var2[100]=Var3; \nVar1=Var2; \nswitch (6)\nstrcat(Var1,STRING); \n"
  }
]
