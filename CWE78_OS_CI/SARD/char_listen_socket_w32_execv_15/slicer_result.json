[
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 79,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "socket",
    "line": 90,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "        while (0);\n",
      "        if (listenSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(listenSocket);\n",
      "        if (acceptSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(acceptSocket);\n",
      "        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "memset",
    "line": 95,
    "label": 0,
    "slices": [
      "    switch(6)\n",
      "        int recvResult;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            memset(&service, 0, sizeof(service));\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "        while (0);\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "recv",
    "line": 113,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            acceptSocket = accept(listenSocket, NULL, NULL);\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n",
      "        if (acceptSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(acceptSocket);\n",
      "        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 121,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15_bad",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 126,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET listenSocket = INVALID_SOCKET;\n",
      "        SOCKET acceptSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (listenSocket == INVALID_SOCKET)\n",
      "            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n",
      "            if (acceptSocket == SOCKET_ERROR)\n",
      "            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "goodG2B1",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strcat",
    "line": 180,
    "label": 1,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(5)\n",
      "        strcat(data, \"*.*\");\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_listen_socket_w32_execv_15.c",
    "Caller": "goodG2B2",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strcat",
    "line": 201,
    "label": 1,
    "slices": [
      "    char * data;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    switch(6)\n",
      "        strcat(data, \"*.*\");\n"
    ]
  }
]
