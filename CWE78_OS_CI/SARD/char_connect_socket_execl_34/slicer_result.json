[
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 0,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strlen",
    "line": 86,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    CWE78_OS_Command_Injection__char_connect_socket_execl_34_unionType myUnion;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 1,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "socket",
    "line": 97,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "        int recvResult;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "        while (0);\n",
      "        if (connectSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(connectSocket);\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 2,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "memset",
    "line": 102,
    "label": 0,
    "slices": [
      "        int recvResult;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            memset(&service, 0, sizeof(service));\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "        while (0);\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 3,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "connect",
    "line": 106,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "        int recvResult;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "        while (0);\n",
      "        if (connectSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(connectSocket);\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 4,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "recv",
    "line": 113,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    CWE78_OS_Command_Injection__char_connect_socket_execl_34_unionType myUnion;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            replace = strchr(data, '\\n');\n",
      "        while (0);\n",
      "        if (connectSocket != INVALID_SOCKET)\n",
      "            CLOSE_SOCKET(connectSocket);\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 5,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 121,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    CWE78_OS_Command_Injection__char_connect_socket_execl_34_unionType myUnion;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "CWE78_OS_Command_Injection__char_connect_socket_execl_34_bad",
    "Source": false,
    "Sink": false,
    "idx": 6,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strchr",
    "line": 126,
    "label": 0,
    "slices": [
      "    char * data;\n",
      "    CWE78_OS_Command_Injection__char_connect_socket_execl_34_unionType myUnion;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "        int recvResult;\n",
      "        char *replace;\n",
      "        SOCKET connectSocket = INVALID_SOCKET;\n",
      "        size_t dataLen = strlen(data);\n",
      "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n",
      "            if (connectSocket == INVALID_SOCKET)\n",
      "            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n",
      "            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (100 - dataLen - 1), 0);\n",
      "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n",
      "            data[dataLen + recvResult / sizeof(char)] = '\\0';\n",
      "            replace = strchr(data, '\\r');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "            replace = strchr(data, '\\n');\n",
      "            if (replace)\n",
      "                *replace = '\\0';\n",
      "        while (0);\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  },
  {
    "FileName": "CWE78_OS_Command_Injection__char_connect_socket_execl_34.c",
    "Caller": "goodG2B",
    "Source": false,
    "Sink": false,
    "idx": 7,
    "CWE-ID": "CWE-78",
    "category": "CallExpression",
    "criterion": "strcat",
    "line": 165,
    "label": 1,
    "slices": [
      "    char * data;\n",
      "    CWE78_OS_Command_Injection__char_connect_socket_execl_34_unionType myUnion;\n",
      "    char dataBuffer[100] = COMMAND_ARG2;\n",
      "    data = dataBuffer;\n",
      "    strcat(data, \"*.*\");\n",
      "    myUnion.unionFirst = data;\n",
      "        char * data = myUnion.unionSecond;\n"
    ]
  }
]
