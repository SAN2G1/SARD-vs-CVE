command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	627067	File	data/converged/CVE-2019-12973_openjpeg/thirdparty_astyle_ASEnhancer.cpp								
ANR	627068	Function	ASEnhancer :: ASEnhancer	25:0:819:846							
ANR	627069	FunctionDef	ASEnhancer :: ASEnhancer ()		627068	0					
ANR	627070	CompoundStatement		26:0:844:846	627068	0					
ANR	627071	Identifier	ASEnhancer :: ASEnhancer		627068	1					
ANR	627072	ParameterList			627068	2					
ANR	627073	CFGEntryNode	ENTRY		627068		True				
ANR	627074	CFGExitNode	EXIT		627068		True				
ANR	627075	Function	ASEnhancer :: ~ASEnhancer	32:0:885:913							
ANR	627076	FunctionDef	ASEnhancer :: ~ASEnhancer ()		627075	0					
ANR	627077	CompoundStatement		33:0:911:913	627075	0					
ANR	627078	Identifier	ASEnhancer :: ~ASEnhancer		627075	1					
ANR	627079	ParameterList			627075	2					
ANR	627080	CFGEntryNode	ENTRY		627075		True				
ANR	627081	CFGExitNode	EXIT		627075		True				
ANR	627082	Function	ASEnhancer :: init	41:0:1025:2493							
ANR	627083	FunctionDef	"ASEnhancer :: init (int _fileType , int _indentLength , int _tabLength , bool _useTabs , bool _forceTab , bool _namespaceIndent , bool _caseIndent , bool _preprocBlockIndent , bool _preprocDefineIndent , bool _emptyLineFill , vector < const pair < const string , const string > * > * _indentableMacros)"		627082	0					
ANR	627084	CompoundStatement		52:0:1535:2493	627082	0					
ANR	627085	ExpressionStatement	ASBase :: init ( _fileType )	54:1:1597:1620	627082	0	True				
ANR	627086	CallExpression	ASBase :: init ( _fileType )		627082	0					
ANR	627087	Callee	ASBase :: init		627082	0					
ANR	627088	Identifier	ASBase :: init		627082	0					
ANR	627089	ArgumentList	_fileType		627082	1					
ANR	627090	Argument	_fileType		627082	0					
ANR	627091	Identifier	_fileType		627082	0					
ANR	627092	ExpressionStatement	indentLength = _indentLength	55:1:1623:1651	627082	1	True				
ANR	627093	AssignmentExpression	indentLength = _indentLength		627082	0		=			
ANR	627094	Identifier	indentLength		627082	0					
ANR	627095	Identifier	_indentLength		627082	1					
ANR	627096	ExpressionStatement	tabLength = _tabLength	56:1:1654:1676	627082	2	True				
ANR	627097	AssignmentExpression	tabLength = _tabLength		627082	0		=			
ANR	627098	Identifier	tabLength		627082	0					
ANR	627099	Identifier	_tabLength		627082	1					
ANR	627100	ExpressionStatement	useTabs = _useTabs	57:1:1679:1697	627082	3	True				
ANR	627101	AssignmentExpression	useTabs = _useTabs		627082	0		=			
ANR	627102	Identifier	useTabs		627082	0					
ANR	627103	Identifier	_useTabs		627082	1					
ANR	627104	ExpressionStatement	forceTab = _forceTab	58:1:1700:1720	627082	4	True				
ANR	627105	AssignmentExpression	forceTab = _forceTab		627082	0		=			
ANR	627106	Identifier	forceTab		627082	0					
ANR	627107	Identifier	_forceTab		627082	1					
ANR	627108	ExpressionStatement	namespaceIndent = _namespaceIndent	59:1:1723:1757	627082	5	True				
ANR	627109	AssignmentExpression	namespaceIndent = _namespaceIndent		627082	0		=			
ANR	627110	Identifier	namespaceIndent		627082	0					
ANR	627111	Identifier	_namespaceIndent		627082	1					
ANR	627112	ExpressionStatement	caseIndent = _caseIndent	60:1:1760:1784	627082	6	True				
ANR	627113	AssignmentExpression	caseIndent = _caseIndent		627082	0		=			
ANR	627114	Identifier	caseIndent		627082	0					
ANR	627115	Identifier	_caseIndent		627082	1					
ANR	627116	ExpressionStatement	preprocBlockIndent = _preprocBlockIndent	61:1:1787:1827	627082	7	True				
ANR	627117	AssignmentExpression	preprocBlockIndent = _preprocBlockIndent		627082	0		=			
ANR	627118	Identifier	preprocBlockIndent		627082	0					
ANR	627119	Identifier	_preprocBlockIndent		627082	1					
ANR	627120	ExpressionStatement	preprocDefineIndent = _preprocDefineIndent	62:1:1830:1872	627082	8	True				
ANR	627121	AssignmentExpression	preprocDefineIndent = _preprocDefineIndent		627082	0		=			
ANR	627122	Identifier	preprocDefineIndent		627082	0					
ANR	627123	Identifier	_preprocDefineIndent		627082	1					
ANR	627124	ExpressionStatement	emptyLineFill = _emptyLineFill	63:1:1875:1905	627082	9	True				
ANR	627125	AssignmentExpression	emptyLineFill = _emptyLineFill		627082	0		=			
ANR	627126	Identifier	emptyLineFill		627082	0					
ANR	627127	Identifier	_emptyLineFill		627082	1					
ANR	627128	ExpressionStatement	indentableMacros = _indentableMacros	64:1:1908:1944	627082	10	True				
ANR	627129	AssignmentExpression	indentableMacros = _indentableMacros		627082	0		=			
ANR	627130	Identifier	indentableMacros		627082	0					
ANR	627131	Identifier	_indentableMacros		627082	1					
ANR	627132	ExpressionStatement	quoteChar = '\\''	65:1:1947:1963	627082	11	True				
ANR	627133	AssignmentExpression	quoteChar = '\\''		627082	0		=			
ANR	627134	Identifier	quoteChar		627082	0					
ANR	627135	PrimaryExpression	'\\''		627082	1					
ANR	627136	ExpressionStatement	lineNumber = 0	68:1:1990:2004	627082	12	True				
ANR	627137	AssignmentExpression	lineNumber = 0		627082	0		=			
ANR	627138	Identifier	lineNumber		627082	0					
ANR	627139	PrimaryExpression	0		627082	1					
ANR	627140	ExpressionStatement	braceCount = 0	69:1:2007:2021	627082	13	True				
ANR	627141	AssignmentExpression	braceCount = 0		627082	0		=			
ANR	627142	Identifier	braceCount		627082	0					
ANR	627143	PrimaryExpression	0		627082	1					
ANR	627144	ExpressionStatement	isInComment = false	70:1:2024:2043	627082	14	True				
ANR	627145	AssignmentExpression	isInComment = false		627082	0		=			
ANR	627146	Identifier	isInComment		627082	0					
ANR	627147	Identifier	false		627082	1					
ANR	627148	ExpressionStatement	isInQuote = false	71:1:2046:2063	627082	15	True				
ANR	627149	AssignmentExpression	isInQuote = false		627082	0		=			
ANR	627150	Identifier	isInQuote		627082	0					
ANR	627151	Identifier	false		627082	1					
ANR	627152	ExpressionStatement	switchDepth = 0	72:1:2066:2081	627082	16	True				
ANR	627153	AssignmentExpression	switchDepth = 0		627082	0		=			
ANR	627154	Identifier	switchDepth		627082	0					
ANR	627155	PrimaryExpression	0		627082	1					
ANR	627156	ExpressionStatement	eventPreprocDepth = 0	73:1:2084:2105	627082	17	True				
ANR	627157	AssignmentExpression	eventPreprocDepth = 0		627082	0		=			
ANR	627158	Identifier	eventPreprocDepth		627082	0					
ANR	627159	PrimaryExpression	0		627082	1					
ANR	627160	ExpressionStatement	lookingForCaseBrace = false	74:1:2108:2135	627082	18	True				
ANR	627161	AssignmentExpression	lookingForCaseBrace = false		627082	0		=			
ANR	627162	Identifier	lookingForCaseBrace		627082	0					
ANR	627163	Identifier	false		627082	1					
ANR	627164	ExpressionStatement	unindentNextLine = false	75:1:2138:2162	627082	19	True				
ANR	627165	AssignmentExpression	unindentNextLine = false		627082	0		=			
ANR	627166	Identifier	unindentNextLine		627082	0					
ANR	627167	Identifier	false		627082	1					
ANR	627168	ExpressionStatement	shouldUnindentLine = false	76:1:2165:2191	627082	20	True				
ANR	627169	AssignmentExpression	shouldUnindentLine = false		627082	0		=			
ANR	627170	Identifier	shouldUnindentLine		627082	0					
ANR	627171	Identifier	false		627082	1					
ANR	627172	ExpressionStatement	shouldUnindentComment = false	77:1:2194:2223	627082	21	True				
ANR	627173	AssignmentExpression	shouldUnindentComment = false		627082	0		=			
ANR	627174	Identifier	shouldUnindentComment		627082	0					
ANR	627175	Identifier	false		627082	1					
ANR	627176	ExpressionStatement	sw . switchBraceCount = 0	80:1:2256:2279	627082	22	True				
ANR	627177	AssignmentExpression	sw . switchBraceCount = 0		627082	0		=			
ANR	627178	MemberAccess	sw . switchBraceCount		627082	0					
ANR	627179	Identifier	sw		627082	0					
ANR	627180	Identifier	switchBraceCount		627082	1					
ANR	627181	PrimaryExpression	0		627082	1					
ANR	627182	ExpressionStatement	sw . unindentDepth = 0	81:1:2282:2302	627082	23	True				
ANR	627183	AssignmentExpression	sw . unindentDepth = 0		627082	0		=			
ANR	627184	MemberAccess	sw . unindentDepth		627082	0					
ANR	627185	Identifier	sw		627082	0					
ANR	627186	Identifier	unindentDepth		627082	1					
ANR	627187	PrimaryExpression	0		627082	1					
ANR	627188	ExpressionStatement	sw . unindentCase = false	82:1:2305:2328	627082	24	True				
ANR	627189	AssignmentExpression	sw . unindentCase = false		627082	0		=			
ANR	627190	MemberAccess	sw . unindentCase		627082	0					
ANR	627191	Identifier	sw		627082	0					
ANR	627192	Identifier	unindentCase		627082	1					
ANR	627193	Identifier	false		627082	1					
ANR	627194	ExpressionStatement	switchStack . clear ( )	83:1:2331:2350	627082	25	True				
ANR	627195	CallExpression	switchStack . clear ( )		627082	0					
ANR	627196	Callee	switchStack . clear		627082	0					
ANR	627197	MemberAccess	switchStack . clear		627082	0					
ANR	627198	Identifier	switchStack		627082	0					
ANR	627199	Identifier	clear		627082	1					
ANR	627200	ArgumentList			627082	1					
ANR	627201	ExpressionStatement	nextLineIsEventIndent = false	86:1:2374:2403	627082	26	True				
ANR	627202	AssignmentExpression	nextLineIsEventIndent = false		627082	0		=			
ANR	627203	Identifier	nextLineIsEventIndent		627082	0					
ANR	627204	Identifier	false		627082	1					
ANR	627205	ExpressionStatement	isInEventTable = false	87:1:2406:2428	627082	27	True				
ANR	627206	AssignmentExpression	isInEventTable = false		627082	0		=			
ANR	627207	Identifier	isInEventTable		627082	0					
ANR	627208	Identifier	false		627082	1					
ANR	627209	ExpressionStatement	nextLineIsDeclareIndent = false	88:1:2431:2462	627082	28	True				
ANR	627210	AssignmentExpression	nextLineIsDeclareIndent = false		627082	0		=			
ANR	627211	Identifier	nextLineIsDeclareIndent		627082	0					
ANR	627212	Identifier	false		627082	1					
ANR	627213	ExpressionStatement	isInDeclareSection = false	89:1:2465:2491	627082	29	True				
ANR	627214	AssignmentExpression	isInDeclareSection = false		627082	0		=			
ANR	627215	Identifier	isInDeclareSection		627082	0					
ANR	627216	Identifier	false		627082	1					
ANR	627217	ReturnType	void		627082	1					
ANR	627218	Identifier	ASEnhancer :: init		627082	2					
ANR	627219	ParameterList	"int _fileType , int _indentLength , int _tabLength , bool _useTabs , bool _forceTab , bool _namespaceIndent , bool _caseIndent , bool _preprocBlockIndent , bool _preprocDefineIndent , bool _emptyLineFill , vector < const pair < const string , const string > * > * _indentableMacros"		627082	3					
ANR	627220	Parameter	int _fileType	41:22:1047:1060	627082	0	True				
ANR	627221	ParameterType	int		627082	0					
ANR	627222	Identifier	_fileType		627082	1					
ANR	627223	Parameter	int _indentLength	42:22:1085:1102	627082	1	True				
ANR	627224	ParameterType	int		627082	0					
ANR	627225	Identifier	_indentLength		627082	1					
ANR	627226	Parameter	int _tabLength	43:22:1127:1141	627082	2	True				
ANR	627227	ParameterType	int		627082	0					
ANR	627228	Identifier	_tabLength		627082	1					
ANR	627229	Parameter	bool _useTabs	44:22:1166:1178	627082	3	True				
ANR	627230	ParameterType	bool		627082	0					
ANR	627231	Identifier	_useTabs		627082	1					
ANR	627232	Parameter	bool _forceTab	45:22:1203:1216	627082	4	True				
ANR	627233	ParameterType	bool		627082	0					
ANR	627234	Identifier	_forceTab		627082	1					
ANR	627235	Parameter	bool _namespaceIndent	46:22:1241:1261	627082	5	True				
ANR	627236	ParameterType	bool		627082	0					
ANR	627237	Identifier	_namespaceIndent		627082	1					
ANR	627238	Parameter	bool _caseIndent	47:22:1286:1301	627082	6	True				
ANR	627239	ParameterType	bool		627082	0					
ANR	627240	Identifier	_caseIndent		627082	1					
ANR	627241	Parameter	bool _preprocBlockIndent	48:22:1326:1349	627082	7	True				
ANR	627242	ParameterType	bool		627082	0					
ANR	627243	Identifier	_preprocBlockIndent		627082	1					
ANR	627244	Parameter	bool _preprocDefineIndent	49:22:1374:1398	627082	8	True				
ANR	627245	ParameterType	bool		627082	0					
ANR	627246	Identifier	_preprocDefineIndent		627082	1					
ANR	627247	Parameter	bool _emptyLineFill	50:22:1423:1441	627082	9	True				
ANR	627248	ParameterType	bool		627082	0					
ANR	627249	Identifier	_emptyLineFill		627082	1					
ANR	627250	Parameter	"vector < const pair < const string , const string > * > * _indentableMacros"	51:22:1466:1532	627082	10	True				
ANR	627251	ParameterType	"vector < const pair < const string , const string > * > *"		627082	0					
ANR	627252	Identifier	_indentableMacros		627082	1					
ANR	627253	CFGEntryNode	ENTRY		627082		True				
ANR	627254	CFGExitNode	EXIT		627082		True				
ANR	627255	Symbol	_preprocBlockIndent		627082						
ANR	627256	Symbol	sw . unindentDepth		627082						
ANR	627257	Symbol	switchDepth		627082						
ANR	627258	Symbol	sw . unindentCase		627082						
ANR	627259	Symbol	useTabs		627082						
ANR	627260	Symbol	isInQuote		627082						
ANR	627261	Symbol	nextLineIsDeclareIndent		627082						
ANR	627262	Symbol	unindentNextLine		627082						
ANR	627263	Symbol	lookingForCaseBrace		627082						
ANR	627264	Symbol	_forceTab		627082						
ANR	627265	Symbol	namespaceIndent		627082						
ANR	627266	Symbol	_indentableMacros		627082						
ANR	627267	Symbol	shouldUnindentComment		627082						
ANR	627268	Symbol	_useTabs		627082						
ANR	627269	Symbol	forceTab		627082						
ANR	627270	Symbol	caseIndent		627082						
ANR	627271	Symbol	isInComment		627082						
ANR	627272	Symbol	quoteChar		627082						
ANR	627273	Symbol	sw		627082						
ANR	627274	Symbol	_caseIndent		627082						
ANR	627275	Symbol	preprocBlockIndent		627082						
ANR	627276	Symbol	preprocDefineIndent		627082						
ANR	627277	Symbol	indentableMacros		627082						
ANR	627278	Symbol	false		627082						
ANR	627279	Symbol	_indentLength		627082						
ANR	627280	Symbol	indentLength		627082						
ANR	627281	Symbol	tabLength		627082						
ANR	627282	Symbol	braceCount		627082						
ANR	627283	Symbol	shouldUnindentLine		627082						
ANR	627284	Symbol	isInDeclareSection		627082						
ANR	627285	Symbol	_preprocDefineIndent		627082						
ANR	627286	Symbol	emptyLineFill		627082						
ANR	627287	Symbol	nextLineIsEventIndent		627082						
ANR	627288	Symbol	sw . switchBraceCount		627082						
ANR	627289	Symbol	switchStack		627082						
ANR	627290	Symbol	_tabLength		627082						
ANR	627291	Symbol	isInEventTable		627082						
ANR	627292	Symbol	_fileType		627082						
ANR	627293	Symbol	_emptyLineFill		627082						
ANR	627294	Symbol	lineNumber		627082						
ANR	627295	Symbol	_namespaceIndent		627082						
ANR	627296	Symbol	eventPreprocDepth		627082						
ANR	627297	Function	ASEnhancer :: enhance	101:0:2800:4304							
ANR	627298	FunctionDef	"ASEnhancer :: enhance (string & line , bool isInNamespace , bool isInPreprocessor , bool isInSQL)"		627297	0					
ANR	627299	CompoundStatement		102:0:2896:4304	627297	0					
ANR	627300	ExpressionStatement	shouldUnindentLine = true	103:1:2899:2924	627297	0	True				
ANR	627301	AssignmentExpression	shouldUnindentLine = true		627297	0		=			
ANR	627302	Identifier	shouldUnindentLine		627297	0					
ANR	627303	Identifier	true		627297	1					
ANR	627304	ExpressionStatement	shouldUnindentComment = false	104:1:2927:2956	627297	1	True				
ANR	627305	AssignmentExpression	shouldUnindentComment = false		627297	0		=			
ANR	627306	Identifier	shouldUnindentComment		627297	0					
ANR	627307	Identifier	false		627297	1					
ANR	627308	ExpressionStatement	lineNumber ++	105:1:2959:2971	627297	2	True				
ANR	627309	PostIncDecOperationExpression	lineNumber ++		627297	0					
ANR	627310	Identifier	lineNumber		627297	0					
ANR	627311	IncDec	++		627297	1					
ANR	627312	IfStatement	if ( nextLineIsEventIndent )		627297	3					
ANR	627313	Condition	nextLineIsEventIndent	108:5:3018:3038	627297	0	True				
ANR	627314	Identifier	nextLineIsEventIndent		627297	0					
ANR	627315	CompoundStatement		8:1:145:145	627297	1					
ANR	627316	ExpressionStatement	isInEventTable = true	110:2:3046:3067	627297	0	True				
ANR	627317	AssignmentExpression	isInEventTable = true		627297	0		=			
ANR	627318	Identifier	isInEventTable		627297	0					
ANR	627319	Identifier	true		627297	1					
ANR	627320	ExpressionStatement	nextLineIsEventIndent = false	111:2:3071:3100	627297	1	True				
ANR	627321	AssignmentExpression	nextLineIsEventIndent = false		627297	0		=			
ANR	627322	Identifier	nextLineIsEventIndent		627297	0					
ANR	627323	Identifier	false		627297	1					
ANR	627324	IfStatement	if ( nextLineIsDeclareIndent )		627297	4					
ANR	627325	Condition	nextLineIsDeclareIndent	115:5:3158:3180	627297	0	True				
ANR	627326	Identifier	nextLineIsDeclareIndent		627297	0					
ANR	627327	CompoundStatement		15:1:287:287	627297	1					
ANR	627328	ExpressionStatement	isInDeclareSection = true	117:2:3188:3213	627297	0	True				
ANR	627329	AssignmentExpression	isInDeclareSection = true		627297	0		=			
ANR	627330	Identifier	isInDeclareSection		627297	0					
ANR	627331	Identifier	true		627297	1					
ANR	627332	ExpressionStatement	nextLineIsDeclareIndent = false	118:2:3217:3248	627297	1	True				
ANR	627333	AssignmentExpression	nextLineIsDeclareIndent = false		627297	0		=			
ANR	627334	Identifier	nextLineIsDeclareIndent		627297	0					
ANR	627335	Identifier	false		627297	1					
ANR	627336	IfStatement	if ( line . length ( ) == 0 && ! isInEventTable && ! isInDeclareSection && ! emptyLineFill )		627297	5					
ANR	627337	Condition	line . length ( ) == 0 && ! isInEventTable && ! isInDeclareSection && ! emptyLineFill	121:5:3259:3363	627297	0	True				
ANR	627338	AndExpression	line . length ( ) == 0 && ! isInEventTable && ! isInDeclareSection && ! emptyLineFill		627297	0		&&			
ANR	627339	EqualityExpression	line . length ( ) == 0		627297	0		==			
ANR	627340	CallExpression	line . length ( )		627297	0					
ANR	627341	Callee	line . length		627297	0					
ANR	627342	MemberAccess	line . length		627297	0					
ANR	627343	Identifier	line		627297	0					
ANR	627344	Identifier	length		627297	1					
ANR	627345	ArgumentList			627297	1					
ANR	627346	PrimaryExpression	0		627297	1					
ANR	627347	AndExpression	! isInEventTable && ! isInDeclareSection && ! emptyLineFill		627297	1		&&			
ANR	627348	UnaryOperationExpression	! isInEventTable		627297	0					
ANR	627349	UnaryOperator	!		627297	0					
ANR	627350	Identifier	isInEventTable		627297	1					
ANR	627351	AndExpression	! isInDeclareSection && ! emptyLineFill		627297	1		&&			
ANR	627352	UnaryOperationExpression	! isInDeclareSection		627297	0					
ANR	627353	UnaryOperator	!		627297	0					
ANR	627354	Identifier	isInDeclareSection		627297	1					
ANR	627355	UnaryOperationExpression	! emptyLineFill		627297	1					
ANR	627356	UnaryOperator	!		627297	0					
ANR	627357	Identifier	emptyLineFill		627297	1					
ANR	627358	ReturnStatement	return ;	125:2:3368:3374	627297	1	True				
ANR	627359	IfStatement	if ( unindentNextLine )		627297	6					
ANR	627360	Condition	unindentNextLine	128:5:3423:3438	627297	0	True				
ANR	627361	Identifier	unindentNextLine		627297	0					
ANR	627362	CompoundStatement		28:1:545:545	627297	1					
ANR	627363	ExpressionStatement	sw . unindentDepth ++	130:2:3446:3464	627297	0	True				
ANR	627364	PostIncDecOperationExpression	sw . unindentDepth ++		627297	0					
ANR	627365	MemberAccess	sw . unindentDepth		627297	0					
ANR	627366	Identifier	sw		627297	0					
ANR	627367	Identifier	unindentDepth		627297	1					
ANR	627368	IncDec	++		627297	1					
ANR	627369	ExpressionStatement	sw . unindentCase = true	131:2:3468:3490	627297	1	True				
ANR	627370	AssignmentExpression	sw . unindentCase = true		627297	0		=			
ANR	627371	MemberAccess	sw . unindentCase		627297	0					
ANR	627372	Identifier	sw		627297	0					
ANR	627373	Identifier	unindentCase		627297	1					
ANR	627374	Identifier	true		627297	1					
ANR	627375	ExpressionStatement	unindentNextLine = false	132:2:3494:3518	627297	2	True				
ANR	627376	AssignmentExpression	unindentNextLine = false		627297	0		=			
ANR	627377	Identifier	unindentNextLine		627297	0					
ANR	627378	Identifier	false		627297	1					
ANR	627379	ExpressionStatement	"parseCurrentLine ( line , isInPreprocessor , isInSQL )"	136:1:3566:3615	627297	7	True				
ANR	627380	CallExpression	"parseCurrentLine ( line , isInPreprocessor , isInSQL )"		627297	0					
ANR	627381	Callee	parseCurrentLine		627297	0					
ANR	627382	Identifier	parseCurrentLine		627297	0					
ANR	627383	ArgumentList	line		627297	1					
ANR	627384	Argument	line		627297	0					
ANR	627385	Identifier	line		627297	0					
ANR	627386	Argument	isInPreprocessor		627297	1					
ANR	627387	Identifier	isInPreprocessor		627297	0					
ANR	627388	Argument	isInSQL		627297	2					
ANR	627389	Identifier	isInSQL		627297	0					
ANR	627390	IfStatement	if ( isInDeclareSection )		627297	8					
ANR	627391	Condition	isInDeclareSection	139:5:3658:3675	627297	0	True				
ANR	627392	Identifier	isInDeclareSection		627297	0					
ANR	627393	CompoundStatement		40:2:786:834	627297	1					
ANR	627394	IdentifierDeclStatement	"size_t firstText = line . find_first_not_of ( "" \\t"" ) ;"	141:2:3683:3731	627297	0	True				
ANR	627395	IdentifierDecl	"firstText = line . find_first_not_of ( "" \\t"" )"		627297	0					
ANR	627396	IdentifierDeclType	size_t		627297	0					
ANR	627397	Identifier	firstText		627297	1					
ANR	627398	AssignmentExpression	"firstText = line . find_first_not_of ( "" \\t"" )"		627297	2		=			
ANR	627399	Identifier	firstText		627297	0					
ANR	627400	CallExpression	"line . find_first_not_of ( "" \\t"" )"		627297	1					
ANR	627401	Callee	line . find_first_not_of		627297	0					
ANR	627402	MemberAccess	line . find_first_not_of		627297	0					
ANR	627403	Identifier	line		627297	0					
ANR	627404	Identifier	find_first_not_of		627297	1					
ANR	627405	ArgumentList	""" \\t"""		627297	1					
ANR	627406	Argument	""" \\t"""		627297	0					
ANR	627407	PrimaryExpression	""" \\t"""		627297	0					
ANR	627408	IfStatement	if ( firstText == string :: npos || line [ firstText ] != '#' )		627297	1					
ANR	627409	Condition	firstText == string :: npos || line [ firstText ] != '#'	142:6:3739:3789	627297	0	True				
ANR	627410	OrExpression	firstText == string :: npos || line [ firstText ] != '#'		627297	0		||			
ANR	627411	EqualityExpression	firstText == string :: npos		627297	0		==			
ANR	627412	Identifier	firstText		627297	0					
ANR	627413	Identifier	string :: npos		627297	1					
ANR	627414	EqualityExpression	line [ firstText ] != '#'		627297	1		!=			
ANR	627415	ArrayIndexing	line [ firstText ]		627297	0					
ANR	627416	Identifier	line		627297	0					
ANR	627417	Identifier	firstText		627297	1					
ANR	627418	PrimaryExpression	'#'		627297	1					
ANR	627419	ExpressionStatement	"indentLine ( line , 1 )"	143:3:3795:3814	627297	1	True				
ANR	627420	CallExpression	"indentLine ( line , 1 )"		627297	0					
ANR	627421	Callee	indentLine		627297	0					
ANR	627422	Identifier	indentLine		627297	0					
ANR	627423	ArgumentList	line		627297	1					
ANR	627424	Argument	line		627297	0					
ANR	627425	Identifier	line		627297	0					
ANR	627426	Argument	1		627297	1					
ANR	627427	PrimaryExpression	1		627297	0					
ANR	627428	IfStatement	if ( isInEventTable && ( eventPreprocDepth == 0 || ( namespaceIndent && isInNamespace ) ) )		627297	9					
ANR	627429	Condition	isInEventTable && ( eventPreprocDepth == 0 || ( namespaceIndent && isInNamespace ) )	147:5:3868:3969	627297	0	True				
ANR	627430	AndExpression	isInEventTable && ( eventPreprocDepth == 0 || ( namespaceIndent && isInNamespace ) )		627297	0		&&			
ANR	627431	Identifier	isInEventTable		627297	0					
ANR	627432	OrExpression	eventPreprocDepth == 0 || ( namespaceIndent && isInNamespace )		627297	1		||			
ANR	627433	EqualityExpression	eventPreprocDepth == 0		627297	0		==			
ANR	627434	Identifier	eventPreprocDepth		627297	0					
ANR	627435	PrimaryExpression	0		627297	1					
ANR	627436	AndExpression	namespaceIndent && isInNamespace		627297	1		&&			
ANR	627437	Identifier	namespaceIndent		627297	0					
ANR	627438	Identifier	isInNamespace		627297	1					
ANR	627439	CompoundStatement		50:2:1080:1128	627297	1					
ANR	627440	IdentifierDeclStatement	"size_t firstText = line . find_first_not_of ( "" \\t"" ) ;"	151:2:3977:4025	627297	0	True				
ANR	627441	IdentifierDecl	"firstText = line . find_first_not_of ( "" \\t"" )"		627297	0					
ANR	627442	IdentifierDeclType	size_t		627297	0					
ANR	627443	Identifier	firstText		627297	1					
ANR	627444	AssignmentExpression	"firstText = line . find_first_not_of ( "" \\t"" )"		627297	2		=			
ANR	627445	Identifier	firstText		627297	0					
ANR	627446	CallExpression	"line . find_first_not_of ( "" \\t"" )"		627297	1					
ANR	627447	Callee	line . find_first_not_of		627297	0					
ANR	627448	MemberAccess	line . find_first_not_of		627297	0					
ANR	627449	Identifier	line		627297	0					
ANR	627450	Identifier	find_first_not_of		627297	1					
ANR	627451	ArgumentList	""" \\t"""		627297	1					
ANR	627452	Argument	""" \\t"""		627297	0					
ANR	627453	PrimaryExpression	""" \\t"""		627297	0					
ANR	627454	IfStatement	if ( firstText == string :: npos || line [ firstText ] != '#' )		627297	1					
ANR	627455	Condition	firstText == string :: npos || line [ firstText ] != '#'	152:6:4033:4083	627297	0	True				
ANR	627456	OrExpression	firstText == string :: npos || line [ firstText ] != '#'		627297	0		||			
ANR	627457	EqualityExpression	firstText == string :: npos		627297	0		==			
ANR	627458	Identifier	firstText		627297	0					
ANR	627459	Identifier	string :: npos		627297	1					
ANR	627460	EqualityExpression	line [ firstText ] != '#'		627297	1		!=			
ANR	627461	ArrayIndexing	line [ firstText ]		627297	0					
ANR	627462	Identifier	line		627297	0					
ANR	627463	Identifier	firstText		627297	1					
ANR	627464	PrimaryExpression	'#'		627297	1					
ANR	627465	ExpressionStatement	"indentLine ( line , 1 )"	153:3:4089:4108	627297	1	True				
ANR	627466	CallExpression	"indentLine ( line , 1 )"		627297	0					
ANR	627467	Callee	indentLine		627297	0					
ANR	627468	Identifier	indentLine		627297	0					
ANR	627469	ArgumentList	line		627297	1					
ANR	627470	Argument	line		627297	0					
ANR	627471	Identifier	line		627297	0					
ANR	627472	Argument	1		627297	1					
ANR	627473	PrimaryExpression	1		627297	0					
ANR	627474	IfStatement	if ( shouldUnindentComment && sw . unindentDepth > 0 )		627297	10					
ANR	627475	Condition	shouldUnindentComment && sw . unindentDepth > 0	156:5:4119:4163	627297	0	True				
ANR	627476	AndExpression	shouldUnindentComment && sw . unindentDepth > 0		627297	0		&&			
ANR	627477	Identifier	shouldUnindentComment		627297	0					
ANR	627478	RelationalExpression	sw . unindentDepth > 0		627297	1		>			
ANR	627479	MemberAccess	sw . unindentDepth		627297	0					
ANR	627480	Identifier	sw		627297	0					
ANR	627481	Identifier	unindentDepth		627297	1					
ANR	627482	PrimaryExpression	0		627297	1					
ANR	627483	ExpressionStatement	"unindentLine ( line , sw . unindentDepth - 1 )"	157:2:4168:4208	627297	1	True				
ANR	627484	CallExpression	"unindentLine ( line , sw . unindentDepth - 1 )"		627297	0					
ANR	627485	Callee	unindentLine		627297	0					
ANR	627486	Identifier	unindentLine		627297	0					
ANR	627487	ArgumentList	line		627297	1					
ANR	627488	Argument	line		627297	0					
ANR	627489	Identifier	line		627297	0					
ANR	627490	Argument	sw . unindentDepth - 1		627297	1					
ANR	627491	AdditiveExpression	sw . unindentDepth - 1		627297	0		-			
ANR	627492	MemberAccess	sw . unindentDepth		627297	0					
ANR	627493	Identifier	sw		627297	0					
ANR	627494	Identifier	unindentDepth		627297	1					
ANR	627495	PrimaryExpression	1		627297	1					
ANR	627496	ElseStatement	else		627297	0					
ANR	627497	IfStatement	if ( shouldUnindentLine && sw . unindentDepth > 0 )		627297	0					
ANR	627498	Condition	shouldUnindentLine && sw . unindentDepth > 0	158:10:4220:4261	627297	0	True				
ANR	627499	AndExpression	shouldUnindentLine && sw . unindentDepth > 0		627297	0		&&			
ANR	627500	Identifier	shouldUnindentLine		627297	0					
ANR	627501	RelationalExpression	sw . unindentDepth > 0		627297	1		>			
ANR	627502	MemberAccess	sw . unindentDepth		627297	0					
ANR	627503	Identifier	sw		627297	0					
ANR	627504	Identifier	unindentDepth		627297	1					
ANR	627505	PrimaryExpression	0		627297	1					
ANR	627506	ExpressionStatement	"unindentLine ( line , sw . unindentDepth )"	159:2:4266:4302	627297	1	True				
ANR	627507	CallExpression	"unindentLine ( line , sw . unindentDepth )"		627297	0					
ANR	627508	Callee	unindentLine		627297	0					
ANR	627509	Identifier	unindentLine		627297	0					
ANR	627510	ArgumentList	line		627297	1					
ANR	627511	Argument	line		627297	0					
ANR	627512	Identifier	line		627297	0					
ANR	627513	Argument	sw . unindentDepth		627297	1					
ANR	627514	MemberAccess	sw . unindentDepth		627297	0					
ANR	627515	Identifier	sw		627297	0					
ANR	627516	Identifier	unindentDepth		627297	1					
ANR	627517	ReturnType	void		627297	1					
ANR	627518	Identifier	ASEnhancer :: enhance		627297	2					
ANR	627519	ParameterList	"string & line , bool isInNamespace , bool isInPreprocessor , bool isInSQL"		627297	3					
ANR	627520	Parameter	string & line	101:25:2825:2836	627297	0	True				
ANR	627521	ParameterType	string &		627297	0					
ANR	627522	Identifier	line		627297	1					
ANR	627523	Parameter	bool isInNamespace	101:39:2839:2856	627297	1	True				
ANR	627524	ParameterType	bool		627297	0					
ANR	627525	Identifier	isInNamespace		627297	1					
ANR	627526	Parameter	bool isInPreprocessor	101:59:2859:2879	627297	2	True				
ANR	627527	ParameterType	bool		627297	0					
ANR	627528	Identifier	isInPreprocessor		627297	1					
ANR	627529	Parameter	bool isInSQL	101:82:2882:2893	627297	3	True				
ANR	627530	ParameterType	bool		627297	0					
ANR	627531	Identifier	isInSQL		627297	1					
ANR	627532	CFGEntryNode	ENTRY		627297		True				
ANR	627533	CFGExitNode	EXIT		627297		True				
ANR	627534	Symbol	sw . unindentDepth		627297						
ANR	627535	Symbol	line		627297						
ANR	627536	Symbol	sw . unindentCase		627297						
ANR	627537	Symbol	string :: npos		627297						
ANR	627538	Symbol	isInNamespace		627297						
ANR	627539	Symbol	* line		627297						
ANR	627540	Symbol	nextLineIsDeclareIndent		627297						
ANR	627541	Symbol	unindentNextLine		627297						
ANR	627542	Symbol	firstText		627297						
ANR	627543	Symbol	namespaceIndent		627297						
ANR	627544	Symbol	shouldUnindentComment		627297						
ANR	627545	Symbol	isInPreprocessor		627297						
ANR	627546	Symbol	sw		627297						
ANR	627547	Symbol	* firstText		627297						
ANR	627548	Symbol	false		627297						
ANR	627549	Symbol	line . find_first_not_of		627297						
ANR	627550	Symbol	shouldUnindentLine		627297						
ANR	627551	Symbol	isInDeclareSection		627297						
ANR	627552	Symbol	emptyLineFill		627297						
ANR	627553	Symbol	nextLineIsEventIndent		627297						
ANR	627554	Symbol	true		627297						
ANR	627555	Symbol	isInEventTable		627297						
ANR	627556	Symbol	isInSQL		627297						
ANR	627557	Symbol	lineNumber		627297						
ANR	627558	Symbol	eventPreprocDepth		627297						
ANR	627559	Symbol	line . length		627297						
ANR	627560	Function	ASEnhancer :: convertForceTabIndentToSpaces	167:0:4430:4735							
ANR	627561	FunctionDef	ASEnhancer :: convertForceTabIndentToSpaces (string & line)		627560	0					
ANR	627562	CompoundStatement		168:0:4497:4735	627560	0					
ANR	627563	ForStatement	for ( size_t i = 0 ; i < line . length ( ) ; i ++ )		627560	0					
ANR	627564	ForInit	size_t i = 0 ;	170:6:4541:4553	627560	0	True				
ANR	627565	IdentifierDeclStatement	size_t i = 0 ;		627560	0					
ANR	627566	IdentifierDecl	i = 0		627560	0					
ANR	627567	IdentifierDeclType	size_t		627560	0					
ANR	627568	Identifier	i		627560	1					
ANR	627569	AssignmentExpression	i = 0		627560	2		=			
ANR	627570	Identifier	i		627560	0					
ANR	627571	PrimaryExpression	0		627560	1					
ANR	627572	Condition	i < line . length ( )	170:20:4555:4571	627560	1	True				
ANR	627573	RelationalExpression	i < line . length ( )		627560	0		<			
ANR	627574	Identifier	i		627560	0					
ANR	627575	CallExpression	line . length ( )		627560	1					
ANR	627576	Callee	line . length		627560	0					
ANR	627577	MemberAccess	line . length		627560	0					
ANR	627578	Identifier	line		627560	0					
ANR	627579	Identifier	length		627560	1					
ANR	627580	ArgumentList			627560	1					
ANR	627581	PostIncDecOperationExpression	i ++	170:39:4574:4576	627560	2	True				
ANR	627582	Identifier	i		627560	0					
ANR	627583	IncDec	++		627560	1					
ANR	627584	CompoundStatement		4:1:82:82	627560	3					
ANR	627585	IfStatement	if ( ! isWhiteSpace ( line [ i ] ) )		627560	0					
ANR	627586	Condition	! isWhiteSpace ( line [ i ] )	172:6:4588:4609	627560	0	True				
ANR	627587	UnaryOperationExpression	! isWhiteSpace ( line [ i ] )		627560	0					
ANR	627588	UnaryOperator	!		627560	0					
ANR	627589	CallExpression	isWhiteSpace ( line [ i ] )		627560	1					
ANR	627590	Callee	isWhiteSpace		627560	0					
ANR	627591	Identifier	isWhiteSpace		627560	0					
ANR	627592	ArgumentList	line [ i ]		627560	1					
ANR	627593	Argument	line [ i ]		627560	0					
ANR	627594	ArrayIndexing	line [ i ]		627560	0					
ANR	627595	Identifier	line		627560	0					
ANR	627596	Identifier	i		627560	1					
ANR	627597	BreakStatement	break ;	173:3:4615:4620	627560	1	True				
ANR	627598	IfStatement	if ( line [ i ] == '\\t' )		627560	1					
ANR	627599	Condition	line [ i ] == '\\t'	174:6:4628:4642	627560	0	True				
ANR	627600	EqualityExpression	line [ i ] == '\\t'		627560	0		==			
ANR	627601	ArrayIndexing	line [ i ]		627560	0					
ANR	627602	Identifier	line		627560	0					
ANR	627603	Identifier	i		627560	1					
ANR	627604	PrimaryExpression	'\\t'		627560	1					
ANR	627605	CompoundStatement		8:2:149:149	627560	1					
ANR	627606	ExpressionStatement	"line . erase ( i , 1 )"	176:3:4652:4668	627560	0	True				
ANR	627607	CallExpression	"line . erase ( i , 1 )"		627560	0					
ANR	627608	Callee	line . erase		627560	0					
ANR	627609	MemberAccess	line . erase		627560	0					
ANR	627610	Identifier	line		627560	0					
ANR	627611	Identifier	erase		627560	1					
ANR	627612	ArgumentList	i		627560	1					
ANR	627613	Argument	i		627560	0					
ANR	627614	Identifier	i		627560	0					
ANR	627615	Argument	1		627560	1					
ANR	627616	PrimaryExpression	1		627560	0					
ANR	627617	ExpressionStatement	"line . insert ( i , tabLength , ' ' )"	177:3:4673:4703	627560	1	True				
ANR	627618	CallExpression	"line . insert ( i , tabLength , ' ' )"		627560	0					
ANR	627619	Callee	line . insert		627560	0					
ANR	627620	MemberAccess	line . insert		627560	0					
ANR	627621	Identifier	line		627560	0					
ANR	627622	Identifier	insert		627560	1					
ANR	627623	ArgumentList	i		627560	1					
ANR	627624	Argument	i		627560	0					
ANR	627625	Identifier	i		627560	0					
ANR	627626	Argument	tabLength		627560	1					
ANR	627627	Identifier	tabLength		627560	0					
ANR	627628	Argument	' '		627560	2					
ANR	627629	PrimaryExpression	' '		627560	0					
ANR	627630	ExpressionStatement	i += tabLength - 1	178:3:4708:4726	627560	2	True				
ANR	627631	AssignmentExpression	i += tabLength - 1		627560	0		+=			
ANR	627632	Identifier	i		627560	0					
ANR	627633	AdditiveExpression	tabLength - 1		627560	1		-			
ANR	627634	Identifier	tabLength		627560	0					
ANR	627635	PrimaryExpression	1		627560	1					
ANR	627636	ReturnType	void		627560	1					
ANR	627637	Identifier	ASEnhancer :: convertForceTabIndentToSpaces		627560	2					
ANR	627638	ParameterList	string & line		627560	3					
ANR	627639	Parameter	string & line	167:47:4477:4488	627560	0	True				
ANR	627640	ParameterType	string &		627560	0					
ANR	627641	Identifier	line		627560	1					
ANR	627642	CFGEntryNode	ENTRY		627560		True				
ANR	627643	CFGExitNode	EXIT		627560		True				
ANR	627644	Symbol	tabLength		627560						
ANR	627645	Symbol	* i		627560						
ANR	627646	Symbol	line		627560						
ANR	627647	Symbol	i		627560						
ANR	627648	Symbol	* line		627560						
ANR	627649	Symbol	isWhiteSpace		627560						
ANR	627650	Symbol	line . length		627560						
ANR	627651	Function	ASEnhancer :: convertSpaceIndentToForceTab	188:0:4860:5195							
ANR	627652	FunctionDef	ASEnhancer :: convertSpaceIndentToForceTab (string & line)		627651	0					
ANR	627653	CompoundStatement		189:0:4926:5195	627651	0					
ANR	627654	ExpressionStatement	assert ( tabLength > 0 )	190:1:4929:4950	627651	0	True				
ANR	627655	CallExpression	assert ( tabLength > 0 )		627651	0					
ANR	627656	Callee	assert		627651	0					
ANR	627657	Identifier	assert		627651	0					
ANR	627658	ArgumentList	tabLength > 0		627651	1					
ANR	627659	Argument	tabLength > 0		627651	0					
ANR	627660	RelationalExpression	tabLength > 0		627651	0		>			
ANR	627661	Identifier	tabLength		627651	0					
ANR	627662	PrimaryExpression	0		627651	1					
ANR	627663	IdentifierDeclStatement	"size_t newSpaceIndentLength = line . find_first_not_of ( "" \\t"" ) ;"	193:1:4998:5057	627651	1	True				
ANR	627664	IdentifierDecl	"newSpaceIndentLength = line . find_first_not_of ( "" \\t"" )"		627651	0					
ANR	627665	IdentifierDeclType	size_t		627651	0					
ANR	627666	Identifier	newSpaceIndentLength		627651	1					
ANR	627667	AssignmentExpression	"newSpaceIndentLength = line . find_first_not_of ( "" \\t"" )"		627651	2		=			
ANR	627668	Identifier	newSpaceIndentLength		627651	0					
ANR	627669	CallExpression	"line . find_first_not_of ( "" \\t"" )"		627651	1					
ANR	627670	Callee	line . find_first_not_of		627651	0					
ANR	627671	MemberAccess	line . find_first_not_of		627651	0					
ANR	627672	Identifier	line		627651	0					
ANR	627673	Identifier	find_first_not_of		627651	1					
ANR	627674	ArgumentList	""" \\t"""		627651	1					
ANR	627675	Argument	""" \\t"""		627651	0					
ANR	627676	PrimaryExpression	""" \\t"""		627651	0					
ANR	627677	IdentifierDeclStatement	size_t tabCount = newSpaceIndentLength / tabLength ;	194:1:5060:5110	627651	2	True				
ANR	627678	IdentifierDecl	tabCount = newSpaceIndentLength / tabLength		627651	0					
ANR	627679	IdentifierDeclType	size_t		627651	0					
ANR	627680	Identifier	tabCount		627651	1					
ANR	627681	AssignmentExpression	tabCount = newSpaceIndentLength / tabLength		627651	2		=			
ANR	627682	Identifier	tabCount		627651	0					
ANR	627683	MultiplicativeExpression	newSpaceIndentLength / tabLength		627651	1		/			
ANR	627684	Identifier	newSpaceIndentLength		627651	0					
ANR	627685	Identifier	tabLength		627651	1					
ANR	627686	ExpressionStatement	"line . replace ( 0U , tabCount * tabLength , tabCount , '\\t' )"	195:1:5139:5193	627651	3	True				
ANR	627687	CallExpression	"line . replace ( 0U , tabCount * tabLength , tabCount , '\\t' )"		627651	0					
ANR	627688	Callee	line . replace		627651	0					
ANR	627689	MemberAccess	line . replace		627651	0					
ANR	627690	Identifier	line		627651	0					
ANR	627691	Identifier	replace		627651	1					
ANR	627692	ArgumentList	0U		627651	1					
ANR	627693	Argument	0U		627651	0					
ANR	627694	PrimaryExpression	0U		627651	0					
ANR	627695	Argument	tabCount * tabLength		627651	1					
ANR	627696	MultiplicativeExpression	tabCount * tabLength		627651	0		*			
ANR	627697	Identifier	tabCount		627651	0					
ANR	627698	Identifier	tabLength		627651	1					
ANR	627699	Argument	tabCount		627651	2					
ANR	627700	Identifier	tabCount		627651	0					
ANR	627701	Argument	'\\t'		627651	3					
ANR	627702	PrimaryExpression	'\\t'		627651	0					
ANR	627703	ReturnType	void		627651	1					
ANR	627704	Identifier	ASEnhancer :: convertSpaceIndentToForceTab		627651	2					
ANR	627705	ParameterList	string & line		627651	3					
ANR	627706	Parameter	string & line	188:46:4906:4917	627651	0	True				
ANR	627707	ParameterType	string &		627651	0					
ANR	627708	Identifier	line		627651	1					
ANR	627709	CFGEntryNode	ENTRY		627651		True				
ANR	627710	CFGExitNode	EXIT		627651		True				
ANR	627711	Symbol	tabLength		627651						
ANR	627712	Symbol	line		627651						
ANR	627713	Symbol	newSpaceIndentLength		627651						
ANR	627714	Symbol	line . find_first_not_of		627651						
ANR	627715	Symbol	tabCount		627651						
ANR	627716	Function	ASEnhancer :: findCaseColon	205:0:5420:6334							
ANR	627717	FunctionDef	"ASEnhancer :: findCaseColon (const string & line , size_t caseIndex)"		627716	0					
ANR	627718	CompoundStatement		206:0:5497:6334	627716	0					
ANR	627719	IdentifierDeclStatement	size_t i = caseIndex ;	207:1:5500:5520	627716	0	True				
ANR	627720	IdentifierDecl	i = caseIndex		627716	0					
ANR	627721	IdentifierDeclType	size_t		627716	0					
ANR	627722	Identifier	i		627716	1					
ANR	627723	AssignmentExpression	i = caseIndex		627716	2		=			
ANR	627724	Identifier	caseIndex		627716	0					
ANR	627725	Identifier	caseIndex		627716	1					
ANR	627726	IdentifierDeclStatement	bool isInQuote_ = false ;	208:1:5523:5546	627716	1	True				
ANR	627727	IdentifierDecl	isInQuote_ = false		627716	0					
ANR	627728	IdentifierDeclType	bool		627716	0					
ANR	627729	Identifier	isInQuote_		627716	1					
ANR	627730	AssignmentExpression	isInQuote_ = false		627716	2		=			
ANR	627731	Identifier	false		627716	0					
ANR	627732	Identifier	false		627716	1					
ANR	627733	IdentifierDeclStatement	char quoteChar_ = ' ' ;	209:1:5549:5570	627716	2	True				
ANR	627734	IdentifierDecl	quoteChar_ = ' '		627716	0					
ANR	627735	IdentifierDeclType	char		627716	0					
ANR	627736	Identifier	quoteChar_		627716	1					
ANR	627737	AssignmentExpression	quoteChar_ = ' '		627716	2		=			
ANR	627738	Identifier	quoteChar_		627716	0					
ANR	627739	PrimaryExpression	' '		627716	1					
ANR	627740	ForStatement	for ( ; i < line . length ( ) ; i ++ )		627716	3					
ANR	627741	Condition	i < line . length ( )	210:8:5580:5596	627716	0	True				
ANR	627742	RelationalExpression	i < line . length ( )		627716	0		<			
ANR	627743	Identifier	i		627716	0					
ANR	627744	CallExpression	line . length ( )		627716	1					
ANR	627745	Callee	line . length		627716	0					
ANR	627746	MemberAccess	line . length		627716	0					
ANR	627747	Identifier	line		627716	0					
ANR	627748	Identifier	length		627716	1					
ANR	627749	ArgumentList			627716	1					
ANR	627750	PostIncDecOperationExpression	i ++	210:27:5599:5601	627716	1	True				
ANR	627751	Identifier	i		627716	0					
ANR	627752	IncDec	++		627716	1					
ANR	627753	CompoundStatement		6:1:107:107	627716	2					
ANR	627754	IfStatement	if ( isInQuote_ )		627716	0					
ANR	627755	Condition	isInQuote_	212:6:5613:5622	627716	0	True				
ANR	627756	Identifier	isInQuote_		627716	0					
ANR	627757	CompoundStatement		8:2:129:129	627716	1					
ANR	627758	IfStatement	if ( line [ i ] == '\\\\' )		627716	0					
ANR	627759	Condition	line [ i ] == '\\\\'	214:7:5636:5650	627716	0	True				
ANR	627760	EqualityExpression	line [ i ] == '\\\\'		627716	0		==			
ANR	627761	ArrayIndexing	line [ i ]		627716	0					
ANR	627762	Identifier	line		627716	0					
ANR	627763	Identifier	i		627716	1					
ANR	627764	PrimaryExpression	'\\\\'		627716	1					
ANR	627765	CompoundStatement		10:3:158:158	627716	1					
ANR	627766	ExpressionStatement	i ++	216:4:5662:5665	627716	0	True				
ANR	627767	PostIncDecOperationExpression	i ++		627716	0					
ANR	627768	Identifier	i		627716	0					
ANR	627769	IncDec	++		627716	1					
ANR	627770	ContinueStatement	continue ;	217:4:5671:5679	627716	1	True				
ANR	627771	ElseStatement	else		627716	0					
ANR	627772	IfStatement	if ( line [ i ] == quoteChar_ )		627716	0					
ANR	627773	Condition	line [ i ] == quoteChar_	219:12:5698:5718	627716	0	True				
ANR	627774	EqualityExpression	line [ i ] == quoteChar_		627716	0		==			
ANR	627775	ArrayIndexing	line [ i ]		627716	0					
ANR	627776	Identifier	line		627716	0					
ANR	627777	Identifier	i		627716	1					
ANR	627778	Identifier	quoteChar_		627716	1					
ANR	627779	CompoundStatement		15:3:257:257	627716	1					
ANR	627780	ExpressionStatement	isInQuote_ = false	221:4:5761:5779	627716	0	True				
ANR	627781	AssignmentExpression	isInQuote_ = false		627716	0		=			
ANR	627782	Identifier	isInQuote_		627716	0					
ANR	627783	Identifier	false		627716	1					
ANR	627784	ExpressionStatement	quoteChar_ = ' '	222:4:5785:5801	627716	1	True				
ANR	627785	AssignmentExpression	quoteChar_ = ' '		627716	0		=			
ANR	627786	Identifier	quoteChar_		627716	0					
ANR	627787	PrimaryExpression	' '		627716	1					
ANR	627788	ContinueStatement	continue ;	223:4:5807:5815	627716	2	True				
ANR	627789	ElseStatement	else		627716	0					
ANR	627790	CompoundStatement		21:3:335:335	627716	0					
ANR	627791	ContinueStatement	continue ;	227:4:5839:5847	627716	0	True				
ANR	627792	IfStatement	"if ( line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) ) )"		627716	1					
ANR	627793	Condition	"line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) )"	230:6:5928:6027	627716	0	True				
ANR	627794	OrExpression	"line [ i ] == '""' || ( line [ i ] == '\\'' && ! isDigitSeparator ( line , i ) )"		627716	0		||			
ANR	627795	EqualityExpression	"line [ i ] == '""'"		627716	0		==			
ANR	627796	ArrayIndexing	line [ i ]		627716	0					
ANR	627797	Identifier	line		627716	0					
ANR	627798	Identifier	i		627716	1					
ANR	627799	PrimaryExpression	"'""'"		627716	1					
ANR	627800	AndExpression	"line [ i ] == '\\'' && ! isDigitSeparator ( line , i )"		627716	1		&&			
ANR	627801	EqualityExpression	line [ i ] == '\\''		627716	0		==			
ANR	627802	ArrayIndexing	line [ i ]		627716	0					
ANR	627803	Identifier	line		627716	0					
ANR	627804	Identifier	i		627716	1					
ANR	627805	PrimaryExpression	'\\''		627716	1					
ANR	627806	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		627716	1					
ANR	627807	UnaryOperator	!		627716	0					
ANR	627808	CallExpression	"isDigitSeparator ( line , i )"		627716	1					
ANR	627809	Callee	isDigitSeparator		627716	0					
ANR	627810	Identifier	isDigitSeparator		627716	0					
ANR	627811	ArgumentList	line		627716	1					
ANR	627812	Argument	line		627716	0					
ANR	627813	Identifier	line		627716	0					
ANR	627814	Argument	i		627716	1					
ANR	627815	Identifier	i		627716	0					
ANR	627816	CompoundStatement		27:2:534:534	627716	1					
ANR	627817	ExpressionStatement	isInQuote_ = true	233:3:6037:6054	627716	0	True				
ANR	627818	AssignmentExpression	isInQuote_ = true		627716	0		=			
ANR	627819	Identifier	isInQuote_		627716	0					
ANR	627820	Identifier	true		627716	1					
ANR	627821	ExpressionStatement	quoteChar_ = line [ i ]	234:3:6059:6079	627716	1	True				
ANR	627822	AssignmentExpression	quoteChar_ = line [ i ]		627716	0		=			
ANR	627823	Identifier	quoteChar_		627716	0					
ANR	627824	ArrayIndexing	line [ i ]		627716	1					
ANR	627825	Identifier	line		627716	0					
ANR	627826	Identifier	i		627716	1					
ANR	627827	ContinueStatement	continue ;	235:3:6084:6092	627716	2	True				
ANR	627828	IfStatement	if ( line [ i ] == ':' )		627716	2					
ANR	627829	Condition	line [ i ] == ':'	237:6:6104:6117	627716	0	True				
ANR	627830	EqualityExpression	line [ i ] == ':'		627716	0		==			
ANR	627831	ArrayIndexing	line [ i ]		627716	0					
ANR	627832	Identifier	line		627716	0					
ANR	627833	Identifier	i		627716	1					
ANR	627834	PrimaryExpression	':'		627716	1					
ANR	627835	CompoundStatement		33:2:624:624	627716	1					
ANR	627836	IfStatement	if ( ( i + 1 < line . length ( ) ) && ( line [ i + 1 ] == ':' ) )		627716	0					
ANR	627837	Condition	( i + 1 < line . length ( ) ) && ( line [ i + 1 ] == ':' )	239:7:6131:6177	627716	0	True				
ANR	627838	AndExpression	( i + 1 < line . length ( ) ) && ( line [ i + 1 ] == ':' )		627716	0		&&			
ANR	627839	RelationalExpression	i + 1 < line . length ( )		627716	0		<			
ANR	627840	AdditiveExpression	i + 1		627716	0		+			
ANR	627841	Identifier	i		627716	0					
ANR	627842	PrimaryExpression	1		627716	1					
ANR	627843	CallExpression	line . length ( )		627716	1					
ANR	627844	Callee	line . length		627716	0					
ANR	627845	MemberAccess	line . length		627716	0					
ANR	627846	Identifier	line		627716	0					
ANR	627847	Identifier	length		627716	1					
ANR	627848	ArgumentList			627716	1					
ANR	627849	EqualityExpression	line [ i + 1 ] == ':'		627716	1		==			
ANR	627850	ArrayIndexing	line [ i + 1 ]		627716	0					
ANR	627851	Identifier	line		627716	0					
ANR	627852	AdditiveExpression	i + 1		627716	1		+			
ANR	627853	Identifier	i		627716	0					
ANR	627854	PrimaryExpression	1		627716	1					
ANR	627855	PrimaryExpression	':'		627716	1					
ANR	627856	ExpressionStatement	i ++	240:4:6184:6187	627716	1	True				
ANR	627857	PostIncDecOperationExpression	i ++		627716	0					
ANR	627858	Identifier	i		627716	0					
ANR	627859	IncDec	++		627716	1					
ANR	627860	ElseStatement	else		627716	0					
ANR	627861	BreakStatement	break ;	242:4:6268:6273	627716	0	True				
ANR	627862	ReturnStatement	return i ;	245:1:6324:6332	627716	4	True				
ANR	627863	Identifier	i		627716	0					
ANR	627864	ReturnType	size_t		627716	1					
ANR	627865	Identifier	ASEnhancer :: findCaseColon		627716	2					
ANR	627866	ParameterList	"const string & line , size_t caseIndex"		627716	3					
ANR	627867	Parameter	const string & line	205:33:5453:5470	627716	0	True				
ANR	627868	ParameterType	const string &		627716	0					
ANR	627869	Identifier	line		627716	1					
ANR	627870	Parameter	size_t caseIndex	205:53:5473:5488	627716	1	True				
ANR	627871	ParameterType	size_t		627716	0					
ANR	627872	Identifier	caseIndex		627716	1					
ANR	627873	CFGEntryNode	ENTRY		627716		True				
ANR	627874	CFGExitNode	EXIT		627716		True				
ANR	627875	Symbol	* i		627716						
ANR	627876	Symbol	caseIndex		627716						
ANR	627877	Symbol	line		627716						
ANR	627878	Symbol	isDigitSeparator		627716						
ANR	627879	Symbol	false		627716						
ANR	627880	Symbol	true		627716						
ANR	627881	Symbol	i		627716						
ANR	627882	Symbol	* line		627716						
ANR	627883	Symbol	isInQuote_		627716						
ANR	627884	Symbol	quoteChar_		627716						
ANR	627885	Symbol	line . length		627716						
ANR	627886	Function	ASEnhancer :: indentLine	256:0:6628:7348							
ANR	627887	FunctionDef	"ASEnhancer :: indentLine (string & line , int indent)"		627886	0					
ANR	627888	CompoundStatement		257:0:6687:7348	627886	0					
ANR	627889	IfStatement	if ( line . length ( ) == 0 && ! emptyLineFill )		627886	0					
ANR	627890	Condition	line . length ( ) == 0 && ! emptyLineFill	258:5:6694:6738	627886	0	True				
ANR	627891	AndExpression	line . length ( ) == 0 && ! emptyLineFill		627886	0		&&			
ANR	627892	EqualityExpression	line . length ( ) == 0		627886	0		==			
ANR	627893	CallExpression	line . length ( )		627886	0					
ANR	627894	Callee	line . length		627886	0					
ANR	627895	MemberAccess	line . length		627886	0					
ANR	627896	Identifier	line		627886	0					
ANR	627897	Identifier	length		627886	1					
ANR	627898	ArgumentList			627886	1					
ANR	627899	PrimaryExpression	0		627886	1					
ANR	627900	UnaryOperationExpression	! emptyLineFill		627886	1					
ANR	627901	UnaryOperator	!		627886	0					
ANR	627902	Identifier	emptyLineFill		627886	1					
ANR	627903	ReturnStatement	return 0 ;	260:2:6743:6751	627886	1	True				
ANR	627904	PrimaryExpression	0		627886	0					
ANR	627905	IdentifierDeclStatement	size_t charsToInsert = 0 ;	262:1:6755:6779	627886	1	True				
ANR	627906	IdentifierDecl	charsToInsert = 0		627886	0					
ANR	627907	IdentifierDeclType	size_t		627886	0					
ANR	627908	Identifier	charsToInsert		627886	1					
ANR	627909	AssignmentExpression	charsToInsert = 0		627886	2		=			
ANR	627910	Identifier	charsToInsert		627886	0					
ANR	627911	PrimaryExpression	0		627886	1					
ANR	627912	IfStatement	if ( forceTab && indentLength != tabLength )		627886	2					
ANR	627913	Condition	forceTab && indentLength != tabLength	264:5:6787:6823	627886	0	True				
ANR	627914	AndExpression	forceTab && indentLength != tabLength		627886	0		&&			
ANR	627915	Identifier	forceTab		627886	0					
ANR	627916	EqualityExpression	indentLength != tabLength		627886	1		!=			
ANR	627917	Identifier	indentLength		627886	0					
ANR	627918	Identifier	tabLength		627886	1					
ANR	627919	CompoundStatement		9:1:139:139	627886	1					
ANR	627920	ExpressionStatement	convertForceTabIndentToSpaces ( line )	267:2:6868:6903	627886	0	True				
ANR	627921	CallExpression	convertForceTabIndentToSpaces ( line )		627886	0					
ANR	627922	Callee	convertForceTabIndentToSpaces		627886	0					
ANR	627923	Identifier	convertForceTabIndentToSpaces		627886	0					
ANR	627924	ArgumentList	line		627886	1					
ANR	627925	Argument	line		627886	0					
ANR	627926	Identifier	line		627886	0					
ANR	627927	ExpressionStatement	charsToInsert = indent * indentLength	269:2:6937:6974	627886	1	True				
ANR	627928	AssignmentExpression	charsToInsert = indent * indentLength		627886	0		=			
ANR	627929	Identifier	charsToInsert		627886	0					
ANR	627930	MultiplicativeExpression	indent * indentLength		627886	1		*			
ANR	627931	Identifier	indent		627886	0					
ANR	627932	Identifier	indentLength		627886	1					
ANR	627933	ExpressionStatement	"line . insert ( line . begin ( ) , charsToInsert , ' ' )"	270:2:6978:7023	627886	2	True				
ANR	627934	CallExpression	"line . insert ( line . begin ( ) , charsToInsert , ' ' )"		627886	0					
ANR	627935	Callee	line . insert		627886	0					
ANR	627936	MemberAccess	line . insert		627886	0					
ANR	627937	Identifier	line		627886	0					
ANR	627938	Identifier	insert		627886	1					
ANR	627939	ArgumentList	line . begin ( )		627886	1					
ANR	627940	Argument	line . begin ( )		627886	0					
ANR	627941	CallExpression	line . begin ( )		627886	0					
ANR	627942	Callee	line . begin		627886	0					
ANR	627943	MemberAccess	line . begin		627886	0					
ANR	627944	Identifier	line		627886	0					
ANR	627945	Identifier	begin		627886	1					
ANR	627946	ArgumentList			627886	1					
ANR	627947	Argument	charsToInsert		627886	1					
ANR	627948	Identifier	charsToInsert		627886	0					
ANR	627949	Argument	' '		627886	2					
ANR	627950	PrimaryExpression	' '		627886	0					
ANR	627951	ExpressionStatement	convertSpaceIndentToForceTab ( line )	272:2:7072:7106	627886	3	True				
ANR	627952	CallExpression	convertSpaceIndentToForceTab ( line )		627886	0					
ANR	627953	Callee	convertSpaceIndentToForceTab		627886	0					
ANR	627954	Identifier	convertSpaceIndentToForceTab		627886	0					
ANR	627955	ArgumentList	line		627886	1					
ANR	627956	Argument	line		627886	0					
ANR	627957	Identifier	line		627886	0					
ANR	627958	ElseStatement	else		627886	0					
ANR	627959	IfStatement	if ( useTabs )		627886	0					
ANR	627960	Condition	useTabs	274:10:7121:7127	627886	0	True				
ANR	627961	Identifier	useTabs		627886	0					
ANR	627962	CompoundStatement		19:1:443:443	627886	1					
ANR	627963	ExpressionStatement	charsToInsert = indent	276:2:7135:7157	627886	0	True				
ANR	627964	AssignmentExpression	charsToInsert = indent		627886	0		=			
ANR	627965	Identifier	charsToInsert		627886	0					
ANR	627966	Identifier	indent		627886	1					
ANR	627967	ExpressionStatement	"line . insert ( line . begin ( ) , charsToInsert , '\\t' )"	277:2:7161:7207	627886	1	True				
ANR	627968	CallExpression	"line . insert ( line . begin ( ) , charsToInsert , '\\t' )"		627886	0					
ANR	627969	Callee	line . insert		627886	0					
ANR	627970	MemberAccess	line . insert		627886	0					
ANR	627971	Identifier	line		627886	0					
ANR	627972	Identifier	insert		627886	1					
ANR	627973	ArgumentList	line . begin ( )		627886	1					
ANR	627974	Argument	line . begin ( )		627886	0					
ANR	627975	CallExpression	line . begin ( )		627886	0					
ANR	627976	Callee	line . begin		627886	0					
ANR	627977	MemberAccess	line . begin		627886	0					
ANR	627978	Identifier	line		627886	0					
ANR	627979	Identifier	begin		627886	1					
ANR	627980	ArgumentList			627886	1					
ANR	627981	Argument	charsToInsert		627886	1					
ANR	627982	Identifier	charsToInsert		627886	0					
ANR	627983	Argument	'\\t'		627886	2					
ANR	627984	PrimaryExpression	'\\t'		627886	0					
ANR	627985	ElseStatement	else		627886	0					
ANR	627986	CompoundStatement		24:1:541:541	627886	0					
ANR	627987	ExpressionStatement	charsToInsert = indent * indentLength	281:2:7233:7270	627886	0	True				
ANR	627988	AssignmentExpression	charsToInsert = indent * indentLength		627886	0		=			
ANR	627989	Identifier	charsToInsert		627886	0					
ANR	627990	MultiplicativeExpression	indent * indentLength		627886	1		*			
ANR	627991	Identifier	indent		627886	0					
ANR	627992	Identifier	indentLength		627886	1					
ANR	627993	ExpressionStatement	"line . insert ( line . begin ( ) , charsToInsert , ' ' )"	282:2:7274:7319	627886	1	True				
ANR	627994	CallExpression	"line . insert ( line . begin ( ) , charsToInsert , ' ' )"		627886	0					
ANR	627995	Callee	line . insert		627886	0					
ANR	627996	MemberAccess	line . insert		627886	0					
ANR	627997	Identifier	line		627886	0					
ANR	627998	Identifier	insert		627886	1					
ANR	627999	ArgumentList	line . begin ( )		627886	1					
ANR	628000	Argument	line . begin ( )		627886	0					
ANR	628001	CallExpression	line . begin ( )		627886	0					
ANR	628002	Callee	line . begin		627886	0					
ANR	628003	MemberAccess	line . begin		627886	0					
ANR	628004	Identifier	line		627886	0					
ANR	628005	Identifier	begin		627886	1					
ANR	628006	ArgumentList			627886	1					
ANR	628007	Argument	charsToInsert		627886	1					
ANR	628008	Identifier	charsToInsert		627886	0					
ANR	628009	Argument	' '		627886	2					
ANR	628010	PrimaryExpression	' '		627886	0					
ANR	628011	ReturnStatement	return charsToInsert ;	285:1:7326:7346	627886	3	True				
ANR	628012	Identifier	charsToInsert		627886	0					
ANR	628013	ReturnType	int		627886	1					
ANR	628014	Identifier	ASEnhancer :: indentLine		627886	2					
ANR	628015	ParameterList	"string & line , int indent"		627886	3					
ANR	628016	Parameter	string & line	256:27:6655:6666	627886	0	True				
ANR	628017	ParameterType	string &		627886	0					
ANR	628018	Identifier	line		627886	1					
ANR	628019	Parameter	int indent	256:41:6669:6678	627886	1	True				
ANR	628020	ParameterType	int		627886	0					
ANR	628021	Identifier	indent		627886	1					
ANR	628022	CFGEntryNode	ENTRY		627886		True				
ANR	628023	CFGExitNode	EXIT		627886		True				
ANR	628024	Symbol	tabLength		627886						
ANR	628025	Symbol	emptyLineFill		627886						
ANR	628026	Symbol	indent		627886						
ANR	628027	Symbol	line		627886						
ANR	628028	Symbol	useTabs		627886						
ANR	628029	Symbol	indentLength		627886						
ANR	628030	Symbol	line . begin		627886						
ANR	628031	Symbol	forceTab		627886						
ANR	628032	Symbol	charsToInsert		627886						
ANR	628033	Symbol	line . length		627886						
ANR	628034	Function	ASEnhancer :: isBeginDeclareSectionSQL	296:0:7620:8413							
ANR	628035	FunctionDef	"ASEnhancer :: isBeginDeclareSectionSQL (const string & line , size_t index)"		628034	0					
ANR	628036	CompoundStatement		297:0:7702:8413	628034	0					
ANR	628037	IdentifierDeclStatement	string word ;	298:1:7705:7716	628034	0	True				
ANR	628038	IdentifierDecl	word		628034	0					
ANR	628039	IdentifierDeclType	string		628034	0					
ANR	628040	Identifier	word		628034	1					
ANR	628041	IdentifierDeclStatement	size_t hits = 0 ;	299:1:7719:7734	628034	1	True				
ANR	628042	IdentifierDecl	hits = 0		628034	0					
ANR	628043	IdentifierDeclType	size_t		628034	0					
ANR	628044	Identifier	hits		628034	1					
ANR	628045	AssignmentExpression	hits = 0		628034	2		=			
ANR	628046	Identifier	hits		628034	0					
ANR	628047	PrimaryExpression	0		628034	1					
ANR	628048	IdentifierDeclStatement	size_t i ;	300:1:7737:7745	628034	2	True				
ANR	628049	IdentifierDecl	i		628034	0					
ANR	628050	IdentifierDeclType	size_t		628034	0					
ANR	628051	Identifier	i		628034	1					
ANR	628052	ForStatement	for ( i = index ; i < line . length ( ) ; i ++ )		628034	3					
ANR	628053	ForInit	i = index ;	301:6:7753:7762	628034	0	True				
ANR	628054	AssignmentExpression	i = index		628034	0		=			
ANR	628055	Identifier	i		628034	0					
ANR	628056	Identifier	index		628034	1					
ANR	628057	Condition	i < line . length ( )	301:17:7764:7780	628034	1	True				
ANR	628058	RelationalExpression	i < line . length ( )		628034	0		<			
ANR	628059	Identifier	i		628034	0					
ANR	628060	CallExpression	line . length ( )		628034	1					
ANR	628061	Callee	line . length		628034	0					
ANR	628062	MemberAccess	line . length		628034	0					
ANR	628063	Identifier	line		628034	0					
ANR	628064	Identifier	length		628034	1					
ANR	628065	ArgumentList			628034	1					
ANR	628066	PostIncDecOperationExpression	i ++	301:36:7783:7785	628034	2	True				
ANR	628067	Identifier	i		628034	0					
ANR	628068	IncDec	++		628034	1					
ANR	628069	CompoundStatement		6:1:86:86	628034	3					
ANR	628070	ExpressionStatement	"i = line . find_first_not_of ( "" \\t"" , i )"	303:2:7793:7829	628034	0	True				
ANR	628071	AssignmentExpression	"i = line . find_first_not_of ( "" \\t"" , i )"		628034	0		=			
ANR	628072	Identifier	i		628034	0					
ANR	628073	CallExpression	"line . find_first_not_of ( "" \\t"" , i )"		628034	1					
ANR	628074	Callee	line . find_first_not_of		628034	0					
ANR	628075	MemberAccess	line . find_first_not_of		628034	0					
ANR	628076	Identifier	line		628034	0					
ANR	628077	Identifier	find_first_not_of		628034	1					
ANR	628078	ArgumentList	""" \\t"""		628034	1					
ANR	628079	Argument	""" \\t"""		628034	0					
ANR	628080	PrimaryExpression	""" \\t"""		628034	0					
ANR	628081	Argument	i		628034	1					
ANR	628082	Identifier	i		628034	0					
ANR	628083	IfStatement	if ( i == string :: npos )		628034	1					
ANR	628084	Condition	i == string :: npos	304:6:7837:7853	628034	0	True				
ANR	628085	EqualityExpression	i == string :: npos		628034	0		==			
ANR	628086	Identifier	i		628034	0					
ANR	628087	Identifier	string :: npos		628034	1					
ANR	628088	ReturnStatement	return false ;	305:3:7859:7871	628034	1	True				
ANR	628089	Identifier	false		628034	0					
ANR	628090	IfStatement	if ( line [ i ] == ';' )		628034	2					
ANR	628091	Condition	line [ i ] == ';'	306:6:7879:7892	628034	0	True				
ANR	628092	EqualityExpression	line [ i ] == ';'		628034	0		==			
ANR	628093	ArrayIndexing	line [ i ]		628034	0					
ANR	628094	Identifier	line		628034	0					
ANR	628095	Identifier	i		628034	1					
ANR	628096	PrimaryExpression	';'		628034	1					
ANR	628097	BreakStatement	break ;	307:3:7898:7903	628034	1	True				
ANR	628098	IfStatement	"if ( ! isCharPotentialHeader ( line , i ) )"		628034	3					
ANR	628099	Condition	"! isCharPotentialHeader ( line , i )"	308:6:7911:7941	628034	0	True				
ANR	628100	UnaryOperationExpression	"! isCharPotentialHeader ( line , i )"		628034	0					
ANR	628101	UnaryOperator	!		628034	0					
ANR	628102	CallExpression	"isCharPotentialHeader ( line , i )"		628034	1					
ANR	628103	Callee	isCharPotentialHeader		628034	0					
ANR	628104	Identifier	isCharPotentialHeader		628034	0					
ANR	628105	ArgumentList	line		628034	1					
ANR	628106	Argument	line		628034	0					
ANR	628107	Identifier	line		628034	0					
ANR	628108	Argument	i		628034	1					
ANR	628109	Identifier	i		628034	0					
ANR	628110	ContinueStatement	continue ;	309:3:7947:7955	628034	1	True				
ANR	628111	ExpressionStatement	"word = getCurrentWord ( line , i )"	310:2:7959:7989	628034	4	True				
ANR	628112	AssignmentExpression	"word = getCurrentWord ( line , i )"		628034	0		=			
ANR	628113	Identifier	word		628034	0					
ANR	628114	CallExpression	"getCurrentWord ( line , i )"		628034	1					
ANR	628115	Callee	getCurrentWord		628034	0					
ANR	628116	Identifier	getCurrentWord		628034	0					
ANR	628117	ArgumentList	line		628034	1					
ANR	628118	Argument	line		628034	0					
ANR	628119	Identifier	line		628034	0					
ANR	628120	Argument	i		628034	1					
ANR	628121	Identifier	i		628034	0					
ANR	628122	ForStatement	for ( size_t j = 0 ; j < word . length ( ) ; j ++ )		628034	5					
ANR	628123	ForInit	size_t j = 0 ;	311:7:7998:8010	628034	0	True				
ANR	628124	IdentifierDeclStatement	size_t j = 0 ;		628034	0					
ANR	628125	IdentifierDecl	j = 0		628034	0					
ANR	628126	IdentifierDeclType	size_t		628034	0					
ANR	628127	Identifier	j		628034	1					
ANR	628128	AssignmentExpression	j = 0		628034	2		=			
ANR	628129	Identifier	j		628034	0					
ANR	628130	PrimaryExpression	0		628034	1					
ANR	628131	Condition	j < word . length ( )	311:21:8012:8028	628034	1	True				
ANR	628132	RelationalExpression	j < word . length ( )		628034	0		<			
ANR	628133	Identifier	j		628034	0					
ANR	628134	CallExpression	word . length ( )		628034	1					
ANR	628135	Callee	word . length		628034	0					
ANR	628136	MemberAccess	word . length		628034	0					
ANR	628137	Identifier	word		628034	0					
ANR	628138	Identifier	length		628034	1					
ANR	628139	ArgumentList			628034	1					
ANR	628140	PostIncDecOperationExpression	j ++	311:40:8031:8033	628034	2	True				
ANR	628141	Identifier	j		628034	0					
ANR	628142	IncDec	++		628034	1					
ANR	628143	ExpressionStatement	word [ j ] = ( char ) toupper ( word [ j ] )	312:3:8039:8072	628034	3	True				
ANR	628144	AssignmentExpression	word [ j ] = ( char ) toupper ( word [ j ] )		628034	0		=			
ANR	628145	ArrayIndexing	word [ j ]		628034	0					
ANR	628146	Identifier	word		628034	0					
ANR	628147	Identifier	j		628034	1					
ANR	628148	CastExpression	( char ) toupper ( word [ j ] )		628034	1					
ANR	628149	CastTarget	char		628034	0					
ANR	628150	CallExpression	toupper ( word [ j ] )		628034	1					
ANR	628151	Callee	toupper		628034	0					
ANR	628152	Identifier	toupper		628034	0					
ANR	628153	ArgumentList	word [ j ]		628034	1					
ANR	628154	Argument	word [ j ]		628034	0					
ANR	628155	ArrayIndexing	word [ j ]		628034	0					
ANR	628156	Identifier	word		628034	0					
ANR	628157	Identifier	j		628034	1					
ANR	628158	IfStatement	"if ( word == ""EXEC"" || word == ""SQL"" )"		628034	6					
ANR	628159	Condition	"word == ""EXEC"" || word == ""SQL"""	313:6:8080:8110	628034	0	True				
ANR	628160	OrExpression	"word == ""EXEC"" || word == ""SQL"""		628034	0		||			
ANR	628161	EqualityExpression	"word == ""EXEC"""		628034	0		==			
ANR	628162	Identifier	word		628034	0					
ANR	628163	PrimaryExpression	"""EXEC"""		628034	1					
ANR	628164	EqualityExpression	"word == ""SQL"""		628034	1		==			
ANR	628165	Identifier	word		628034	0					
ANR	628166	PrimaryExpression	"""SQL"""		628034	1					
ANR	628167	CompoundStatement		18:2:412:412	628034	1					
ANR	628168	ExpressionStatement	i += word . length ( ) - 1	315:3:8120:8142	628034	0	True				
ANR	628169	AssignmentExpression	i += word . length ( ) - 1		628034	0		+=			
ANR	628170	Identifier	i		628034	0					
ANR	628171	AdditiveExpression	word . length ( ) - 1		628034	1		-			
ANR	628172	CallExpression	word . length ( )		628034	0					
ANR	628173	Callee	word . length		628034	0					
ANR	628174	MemberAccess	word . length		628034	0					
ANR	628175	Identifier	word		628034	0					
ANR	628176	Identifier	length		628034	1					
ANR	628177	ArgumentList			628034	1					
ANR	628178	PrimaryExpression	1		628034	1					
ANR	628179	ContinueStatement	continue ;	316:3:8147:8155	628034	1	True				
ANR	628180	IfStatement	"if ( word == ""DECLARE"" || word == ""SECTION"" )"		628034	7					
ANR	628181	Condition	"word == ""DECLARE"" || word == ""SECTION"""	318:6:8167:8204	628034	0	True				
ANR	628182	OrExpression	"word == ""DECLARE"" || word == ""SECTION"""		628034	0		||			
ANR	628183	EqualityExpression	"word == ""DECLARE"""		628034	0		==			
ANR	628184	Identifier	word		628034	0					
ANR	628185	PrimaryExpression	"""DECLARE"""		628034	1					
ANR	628186	EqualityExpression	"word == ""SECTION"""		628034	1		==			
ANR	628187	Identifier	word		628034	0					
ANR	628188	PrimaryExpression	"""SECTION"""		628034	1					
ANR	628189	CompoundStatement		23:2:506:506	628034	1					
ANR	628190	ExpressionStatement	hits ++	320:3:8214:8220	628034	0	True				
ANR	628191	PostIncDecOperationExpression	hits ++		628034	0					
ANR	628192	Identifier	hits		628034	0					
ANR	628193	IncDec	++		628034	1					
ANR	628194	ExpressionStatement	i += word . length ( ) - 1	321:3:8225:8247	628034	1	True				
ANR	628195	AssignmentExpression	i += word . length ( ) - 1		628034	0		+=			
ANR	628196	Identifier	i		628034	0					
ANR	628197	AdditiveExpression	word . length ( ) - 1		628034	1		-			
ANR	628198	CallExpression	word . length ( )		628034	0					
ANR	628199	Callee	word . length		628034	0					
ANR	628200	MemberAccess	word . length		628034	0					
ANR	628201	Identifier	word		628034	0					
ANR	628202	Identifier	length		628034	1					
ANR	628203	ArgumentList			628034	1					
ANR	628204	PrimaryExpression	1		628034	1					
ANR	628205	ContinueStatement	continue ;	322:3:8252:8260	628034	2	True				
ANR	628206	IfStatement	"if ( word == ""BEGIN"" )"		628034	8					
ANR	628207	Condition	"word == ""BEGIN"""	324:6:8272:8286	628034	0	True				
ANR	628208	EqualityExpression	"word == ""BEGIN"""		628034	0		==			
ANR	628209	Identifier	word		628034	0					
ANR	628210	PrimaryExpression	"""BEGIN"""		628034	1					
ANR	628211	CompoundStatement		29:2:588:588	628034	1					
ANR	628212	ExpressionStatement	hits ++	326:3:8296:8302	628034	0	True				
ANR	628213	PostIncDecOperationExpression	hits ++		628034	0					
ANR	628214	Identifier	hits		628034	0					
ANR	628215	IncDec	++		628034	1					
ANR	628216	ExpressionStatement	i += word . length ( ) - 1	327:3:8307:8329	628034	1	True				
ANR	628217	AssignmentExpression	i += word . length ( ) - 1		628034	0		+=			
ANR	628218	Identifier	i		628034	0					
ANR	628219	AdditiveExpression	word . length ( ) - 1		628034	1		-			
ANR	628220	CallExpression	word . length ( )		628034	0					
ANR	628221	Callee	word . length		628034	0					
ANR	628222	MemberAccess	word . length		628034	0					
ANR	628223	Identifier	word		628034	0					
ANR	628224	Identifier	length		628034	1					
ANR	628225	ArgumentList			628034	1					
ANR	628226	PrimaryExpression	1		628034	1					
ANR	628227	ContinueStatement	continue ;	328:3:8334:8342	628034	2	True				
ANR	628228	ReturnStatement	return false ;	330:2:8350:8362	628034	9	True				
ANR	628229	Identifier	false		628034	0					
ANR	628230	IfStatement	if ( hits == 3 )		628034	4					
ANR	628231	Condition	hits == 3	332:5:8372:8380	628034	0	True				
ANR	628232	EqualityExpression	hits == 3		628034	0		==			
ANR	628233	Identifier	hits		628034	0					
ANR	628234	PrimaryExpression	3		628034	1					
ANR	628235	ReturnStatement	return true ;	333:2:8385:8396	628034	1	True				
ANR	628236	Identifier	true		628034	0					
ANR	628237	ReturnStatement	return false ;	334:1:8399:8411	628034	5	True				
ANR	628238	Identifier	false		628034	0					
ANR	628239	ReturnType	bool		628034	1					
ANR	628240	Identifier	ASEnhancer :: isBeginDeclareSectionSQL		628034	2					
ANR	628241	ParameterList	"const string & line , size_t index"		628034	3					
ANR	628242	Parameter	const string & line	296:42:7662:7679	628034	0	True				
ANR	628243	ParameterType	const string &		628034	0					
ANR	628244	Identifier	line		628034	1					
ANR	628245	Parameter	size_t index	296:62:7682:7693	628034	1	True				
ANR	628246	ParameterType	size_t		628034	0					
ANR	628247	Identifier	index		628034	1					
ANR	628248	CFGEntryNode	ENTRY		628034		True				
ANR	628249	CFGExitNode	EXIT		628034		True				
ANR	628250	Symbol	getCurrentWord		628034						
ANR	628251	Symbol	toupper		628034						
ANR	628252	Symbol	line		628034						
ANR	628253	Symbol	* word		628034						
ANR	628254	Symbol	string :: npos		628034						
ANR	628255	Symbol	false		628034						
ANR	628256	Symbol	index		628034						
ANR	628257	Symbol	i		628034						
ANR	628258	Symbol	j		628034						
ANR	628259	Symbol	* line		628034						
ANR	628260	Symbol	line . find_first_not_of		628034						
ANR	628261	Symbol	hits		628034						
ANR	628262	Symbol	* i		628034						
ANR	628263	Symbol	isCharPotentialHeader		628034						
ANR	628264	Symbol	* j		628034						
ANR	628265	Symbol	true		628034						
ANR	628266	Symbol	word		628034						
ANR	628267	Symbol	word . length		628034						
ANR	628268	Symbol	line . length		628034						
ANR	628269	Function	ASEnhancer :: isEndDeclareSectionSQL	345:0:8683:9472							
ANR	628270	FunctionDef	"ASEnhancer :: isEndDeclareSectionSQL (const string & line , size_t index)"		628269	0					
ANR	628271	CompoundStatement		346:0:8763:9472	628269	0					
ANR	628272	IdentifierDeclStatement	string word ;	347:1:8766:8777	628269	0	True				
ANR	628273	IdentifierDecl	word		628269	0					
ANR	628274	IdentifierDeclType	string		628269	0					
ANR	628275	Identifier	word		628269	1					
ANR	628276	IdentifierDeclStatement	size_t hits = 0 ;	348:1:8780:8795	628269	1	True				
ANR	628277	IdentifierDecl	hits = 0		628269	0					
ANR	628278	IdentifierDeclType	size_t		628269	0					
ANR	628279	Identifier	hits		628269	1					
ANR	628280	AssignmentExpression	hits = 0		628269	2		=			
ANR	628281	Identifier	hits		628269	0					
ANR	628282	PrimaryExpression	0		628269	1					
ANR	628283	IdentifierDeclStatement	size_t i ;	349:1:8798:8806	628269	2	True				
ANR	628284	IdentifierDecl	i		628269	0					
ANR	628285	IdentifierDeclType	size_t		628269	0					
ANR	628286	Identifier	i		628269	1					
ANR	628287	ForStatement	for ( i = index ; i < line . length ( ) ; i ++ )		628269	3					
ANR	628288	ForInit	i = index ;	350:6:8814:8823	628269	0	True				
ANR	628289	AssignmentExpression	i = index		628269	0		=			
ANR	628290	Identifier	i		628269	0					
ANR	628291	Identifier	index		628269	1					
ANR	628292	Condition	i < line . length ( )	350:17:8825:8841	628269	1	True				
ANR	628293	RelationalExpression	i < line . length ( )		628269	0		<			
ANR	628294	Identifier	i		628269	0					
ANR	628295	CallExpression	line . length ( )		628269	1					
ANR	628296	Callee	line . length		628269	0					
ANR	628297	MemberAccess	line . length		628269	0					
ANR	628298	Identifier	line		628269	0					
ANR	628299	Identifier	length		628269	1					
ANR	628300	ArgumentList			628269	1					
ANR	628301	PostIncDecOperationExpression	i ++	350:36:8844:8846	628269	2	True				
ANR	628302	Identifier	i		628269	0					
ANR	628303	IncDec	++		628269	1					
ANR	628304	CompoundStatement		6:1:86:86	628269	3					
ANR	628305	ExpressionStatement	"i = line . find_first_not_of ( "" \\t"" , i )"	352:2:8854:8890	628269	0	True				
ANR	628306	AssignmentExpression	"i = line . find_first_not_of ( "" \\t"" , i )"		628269	0		=			
ANR	628307	Identifier	i		628269	0					
ANR	628308	CallExpression	"line . find_first_not_of ( "" \\t"" , i )"		628269	1					
ANR	628309	Callee	line . find_first_not_of		628269	0					
ANR	628310	MemberAccess	line . find_first_not_of		628269	0					
ANR	628311	Identifier	line		628269	0					
ANR	628312	Identifier	find_first_not_of		628269	1					
ANR	628313	ArgumentList	""" \\t"""		628269	1					
ANR	628314	Argument	""" \\t"""		628269	0					
ANR	628315	PrimaryExpression	""" \\t"""		628269	0					
ANR	628316	Argument	i		628269	1					
ANR	628317	Identifier	i		628269	0					
ANR	628318	IfStatement	if ( i == string :: npos )		628269	1					
ANR	628319	Condition	i == string :: npos	353:6:8898:8914	628269	0	True				
ANR	628320	EqualityExpression	i == string :: npos		628269	0		==			
ANR	628321	Identifier	i		628269	0					
ANR	628322	Identifier	string :: npos		628269	1					
ANR	628323	ReturnStatement	return false ;	354:3:8920:8932	628269	1	True				
ANR	628324	Identifier	false		628269	0					
ANR	628325	IfStatement	if ( line [ i ] == ';' )		628269	2					
ANR	628326	Condition	line [ i ] == ';'	355:6:8940:8953	628269	0	True				
ANR	628327	EqualityExpression	line [ i ] == ';'		628269	0		==			
ANR	628328	ArrayIndexing	line [ i ]		628269	0					
ANR	628329	Identifier	line		628269	0					
ANR	628330	Identifier	i		628269	1					
ANR	628331	PrimaryExpression	';'		628269	1					
ANR	628332	BreakStatement	break ;	356:3:8959:8964	628269	1	True				
ANR	628333	IfStatement	"if ( ! isCharPotentialHeader ( line , i ) )"		628269	3					
ANR	628334	Condition	"! isCharPotentialHeader ( line , i )"	357:6:8972:9002	628269	0	True				
ANR	628335	UnaryOperationExpression	"! isCharPotentialHeader ( line , i )"		628269	0					
ANR	628336	UnaryOperator	!		628269	0					
ANR	628337	CallExpression	"isCharPotentialHeader ( line , i )"		628269	1					
ANR	628338	Callee	isCharPotentialHeader		628269	0					
ANR	628339	Identifier	isCharPotentialHeader		628269	0					
ANR	628340	ArgumentList	line		628269	1					
ANR	628341	Argument	line		628269	0					
ANR	628342	Identifier	line		628269	0					
ANR	628343	Argument	i		628269	1					
ANR	628344	Identifier	i		628269	0					
ANR	628345	ContinueStatement	continue ;	358:3:9008:9016	628269	1	True				
ANR	628346	ExpressionStatement	"word = getCurrentWord ( line , i )"	359:2:9020:9050	628269	4	True				
ANR	628347	AssignmentExpression	"word = getCurrentWord ( line , i )"		628269	0		=			
ANR	628348	Identifier	word		628269	0					
ANR	628349	CallExpression	"getCurrentWord ( line , i )"		628269	1					
ANR	628350	Callee	getCurrentWord		628269	0					
ANR	628351	Identifier	getCurrentWord		628269	0					
ANR	628352	ArgumentList	line		628269	1					
ANR	628353	Argument	line		628269	0					
ANR	628354	Identifier	line		628269	0					
ANR	628355	Argument	i		628269	1					
ANR	628356	Identifier	i		628269	0					
ANR	628357	ForStatement	for ( size_t j = 0 ; j < word . length ( ) ; j ++ )		628269	5					
ANR	628358	ForInit	size_t j = 0 ;	360:7:9059:9071	628269	0	True				
ANR	628359	IdentifierDeclStatement	size_t j = 0 ;		628269	0					
ANR	628360	IdentifierDecl	j = 0		628269	0					
ANR	628361	IdentifierDeclType	size_t		628269	0					
ANR	628362	Identifier	j		628269	1					
ANR	628363	AssignmentExpression	j = 0		628269	2		=			
ANR	628364	Identifier	j		628269	0					
ANR	628365	PrimaryExpression	0		628269	1					
ANR	628366	Condition	j < word . length ( )	360:21:9073:9089	628269	1	True				
ANR	628367	RelationalExpression	j < word . length ( )		628269	0		<			
ANR	628368	Identifier	j		628269	0					
ANR	628369	CallExpression	word . length ( )		628269	1					
ANR	628370	Callee	word . length		628269	0					
ANR	628371	MemberAccess	word . length		628269	0					
ANR	628372	Identifier	word		628269	0					
ANR	628373	Identifier	length		628269	1					
ANR	628374	ArgumentList			628269	1					
ANR	628375	PostIncDecOperationExpression	j ++	360:40:9092:9094	628269	2	True				
ANR	628376	Identifier	j		628269	0					
ANR	628377	IncDec	++		628269	1					
ANR	628378	ExpressionStatement	word [ j ] = ( char ) toupper ( word [ j ] )	361:3:9100:9133	628269	3	True				
ANR	628379	AssignmentExpression	word [ j ] = ( char ) toupper ( word [ j ] )		628269	0		=			
ANR	628380	ArrayIndexing	word [ j ]		628269	0					
ANR	628381	Identifier	word		628269	0					
ANR	628382	Identifier	j		628269	1					
ANR	628383	CastExpression	( char ) toupper ( word [ j ] )		628269	1					
ANR	628384	CastTarget	char		628269	0					
ANR	628385	CallExpression	toupper ( word [ j ] )		628269	1					
ANR	628386	Callee	toupper		628269	0					
ANR	628387	Identifier	toupper		628269	0					
ANR	628388	ArgumentList	word [ j ]		628269	1					
ANR	628389	Argument	word [ j ]		628269	0					
ANR	628390	ArrayIndexing	word [ j ]		628269	0					
ANR	628391	Identifier	word		628269	0					
ANR	628392	Identifier	j		628269	1					
ANR	628393	IfStatement	"if ( word == ""EXEC"" || word == ""SQL"" )"		628269	6					
ANR	628394	Condition	"word == ""EXEC"" || word == ""SQL"""	362:6:9141:9171	628269	0	True				
ANR	628395	OrExpression	"word == ""EXEC"" || word == ""SQL"""		628269	0		||			
ANR	628396	EqualityExpression	"word == ""EXEC"""		628269	0		==			
ANR	628397	Identifier	word		628269	0					
ANR	628398	PrimaryExpression	"""EXEC"""		628269	1					
ANR	628399	EqualityExpression	"word == ""SQL"""		628269	1		==			
ANR	628400	Identifier	word		628269	0					
ANR	628401	PrimaryExpression	"""SQL"""		628269	1					
ANR	628402	CompoundStatement		18:2:412:412	628269	1					
ANR	628403	ExpressionStatement	i += word . length ( ) - 1	364:3:9181:9203	628269	0	True				
ANR	628404	AssignmentExpression	i += word . length ( ) - 1		628269	0		+=			
ANR	628405	Identifier	i		628269	0					
ANR	628406	AdditiveExpression	word . length ( ) - 1		628269	1		-			
ANR	628407	CallExpression	word . length ( )		628269	0					
ANR	628408	Callee	word . length		628269	0					
ANR	628409	MemberAccess	word . length		628269	0					
ANR	628410	Identifier	word		628269	0					
ANR	628411	Identifier	length		628269	1					
ANR	628412	ArgumentList			628269	1					
ANR	628413	PrimaryExpression	1		628269	1					
ANR	628414	ContinueStatement	continue ;	365:3:9208:9216	628269	1	True				
ANR	628415	IfStatement	"if ( word == ""DECLARE"" || word == ""SECTION"" )"		628269	7					
ANR	628416	Condition	"word == ""DECLARE"" || word == ""SECTION"""	367:6:9228:9265	628269	0	True				
ANR	628417	OrExpression	"word == ""DECLARE"" || word == ""SECTION"""		628269	0		||			
ANR	628418	EqualityExpression	"word == ""DECLARE"""		628269	0		==			
ANR	628419	Identifier	word		628269	0					
ANR	628420	PrimaryExpression	"""DECLARE"""		628269	1					
ANR	628421	EqualityExpression	"word == ""SECTION"""		628269	1		==			
ANR	628422	Identifier	word		628269	0					
ANR	628423	PrimaryExpression	"""SECTION"""		628269	1					
ANR	628424	CompoundStatement		23:2:506:506	628269	1					
ANR	628425	ExpressionStatement	hits ++	369:3:9275:9281	628269	0	True				
ANR	628426	PostIncDecOperationExpression	hits ++		628269	0					
ANR	628427	Identifier	hits		628269	0					
ANR	628428	IncDec	++		628269	1					
ANR	628429	ExpressionStatement	i += word . length ( ) - 1	370:3:9286:9308	628269	1	True				
ANR	628430	AssignmentExpression	i += word . length ( ) - 1		628269	0		+=			
ANR	628431	Identifier	i		628269	0					
ANR	628432	AdditiveExpression	word . length ( ) - 1		628269	1		-			
ANR	628433	CallExpression	word . length ( )		628269	0					
ANR	628434	Callee	word . length		628269	0					
ANR	628435	MemberAccess	word . length		628269	0					
ANR	628436	Identifier	word		628269	0					
ANR	628437	Identifier	length		628269	1					
ANR	628438	ArgumentList			628269	1					
ANR	628439	PrimaryExpression	1		628269	1					
ANR	628440	ContinueStatement	continue ;	371:3:9313:9321	628269	2	True				
ANR	628441	IfStatement	"if ( word == ""END"" )"		628269	8					
ANR	628442	Condition	"word == ""END"""	373:6:9333:9345	628269	0	True				
ANR	628443	EqualityExpression	"word == ""END"""		628269	0		==			
ANR	628444	Identifier	word		628269	0					
ANR	628445	PrimaryExpression	"""END"""		628269	1					
ANR	628446	CompoundStatement		29:2:586:586	628269	1					
ANR	628447	ExpressionStatement	hits ++	375:3:9355:9361	628269	0	True				
ANR	628448	PostIncDecOperationExpression	hits ++		628269	0					
ANR	628449	Identifier	hits		628269	0					
ANR	628450	IncDec	++		628269	1					
ANR	628451	ExpressionStatement	i += word . length ( ) - 1	376:3:9366:9388	628269	1	True				
ANR	628452	AssignmentExpression	i += word . length ( ) - 1		628269	0		+=			
ANR	628453	Identifier	i		628269	0					
ANR	628454	AdditiveExpression	word . length ( ) - 1		628269	1		-			
ANR	628455	CallExpression	word . length ( )		628269	0					
ANR	628456	Callee	word . length		628269	0					
ANR	628457	MemberAccess	word . length		628269	0					
ANR	628458	Identifier	word		628269	0					
ANR	628459	Identifier	length		628269	1					
ANR	628460	ArgumentList			628269	1					
ANR	628461	PrimaryExpression	1		628269	1					
ANR	628462	ContinueStatement	continue ;	377:3:9393:9401	628269	2	True				
ANR	628463	ReturnStatement	return false ;	379:2:9409:9421	628269	9	True				
ANR	628464	Identifier	false		628269	0					
ANR	628465	IfStatement	if ( hits == 3 )		628269	4					
ANR	628466	Condition	hits == 3	381:5:9431:9439	628269	0	True				
ANR	628467	EqualityExpression	hits == 3		628269	0		==			
ANR	628468	Identifier	hits		628269	0					
ANR	628469	PrimaryExpression	3		628269	1					
ANR	628470	ReturnStatement	return true ;	382:2:9444:9455	628269	1	True				
ANR	628471	Identifier	true		628269	0					
ANR	628472	ReturnStatement	return false ;	383:1:9458:9470	628269	5	True				
ANR	628473	Identifier	false		628269	0					
ANR	628474	ReturnType	bool		628269	1					
ANR	628475	Identifier	ASEnhancer :: isEndDeclareSectionSQL		628269	2					
ANR	628476	ParameterList	"const string & line , size_t index"		628269	3					
ANR	628477	Parameter	const string & line	345:40:8723:8740	628269	0	True				
ANR	628478	ParameterType	const string &		628269	0					
ANR	628479	Identifier	line		628269	1					
ANR	628480	Parameter	size_t index	345:60:8743:8754	628269	1	True				
ANR	628481	ParameterType	size_t		628269	0					
ANR	628482	Identifier	index		628269	1					
ANR	628483	CFGEntryNode	ENTRY		628269		True				
ANR	628484	CFGExitNode	EXIT		628269		True				
ANR	628485	Symbol	getCurrentWord		628269						
ANR	628486	Symbol	toupper		628269						
ANR	628487	Symbol	line		628269						
ANR	628488	Symbol	* word		628269						
ANR	628489	Symbol	string :: npos		628269						
ANR	628490	Symbol	false		628269						
ANR	628491	Symbol	index		628269						
ANR	628492	Symbol	i		628269						
ANR	628493	Symbol	j		628269						
ANR	628494	Symbol	* line		628269						
ANR	628495	Symbol	line . find_first_not_of		628269						
ANR	628496	Symbol	hits		628269						
ANR	628497	Symbol	* i		628269						
ANR	628498	Symbol	isCharPotentialHeader		628269						
ANR	628499	Symbol	* j		628269						
ANR	628500	Symbol	true		628269						
ANR	628501	Symbol	word		628269						
ANR	628502	Symbol	word . length		628269						
ANR	628503	Symbol	line . length		628269						
ANR	628504	Function	ASEnhancer :: isOneLineBlockReached	394:0:9766:10775							
ANR	628505	FunctionDef	"ASEnhancer :: isOneLineBlockReached (const string & line , int startChar)"		628504	0					
ANR	628506	CompoundStatement		395:0:9846:10775	628504	0					
ANR	628507	ExpressionStatement	assert ( line [ startChar ] == '{' )	396:1:9849:9879	628504	0	True				
ANR	628508	CallExpression	assert ( line [ startChar ] == '{' )		628504	0					
ANR	628509	Callee	assert		628504	0					
ANR	628510	Identifier	assert		628504	0					
ANR	628511	ArgumentList	line [ startChar ] == '{'		628504	1					
ANR	628512	Argument	line [ startChar ] == '{'		628504	0					
ANR	628513	EqualityExpression	line [ startChar ] == '{'		628504	0		==			
ANR	628514	ArrayIndexing	line [ startChar ]		628504	0					
ANR	628515	Identifier	line		628504	0					
ANR	628516	Identifier	startChar		628504	1					
ANR	628517	PrimaryExpression	'{'		628504	1					
ANR	628518	IdentifierDeclStatement	bool isInComment_ = false ;	398:1:9883:9908	628504	1	True				
ANR	628519	IdentifierDecl	isInComment_ = false		628504	0					
ANR	628520	IdentifierDeclType	bool		628504	0					
ANR	628521	Identifier	isInComment_		628504	1					
ANR	628522	AssignmentExpression	isInComment_ = false		628504	2		=			
ANR	628523	Identifier	false		628504	0					
ANR	628524	Identifier	false		628504	1					
ANR	628525	IdentifierDeclStatement	bool isInQuote_ = false ;	399:1:9911:9934	628504	2	True				
ANR	628526	IdentifierDecl	isInQuote_ = false		628504	0					
ANR	628527	IdentifierDeclType	bool		628504	0					
ANR	628528	Identifier	isInQuote_		628504	1					
ANR	628529	AssignmentExpression	isInQuote_ = false		628504	2		=			
ANR	628530	Identifier	false		628504	0					
ANR	628531	Identifier	false		628504	1					
ANR	628532	IdentifierDeclStatement	int _braceCount = 1 ;	400:1:9937:9956	628504	3	True				
ANR	628533	IdentifierDecl	_braceCount = 1		628504	0					
ANR	628534	IdentifierDeclType	int		628504	0					
ANR	628535	Identifier	_braceCount		628504	1					
ANR	628536	AssignmentExpression	_braceCount = 1		628504	2		=			
ANR	628537	Identifier	_braceCount		628504	0					
ANR	628538	PrimaryExpression	1		628504	1					
ANR	628539	IdentifierDeclStatement	int lineLength = line . length ( ) ;	401:1:9959:9989	628504	4	True				
ANR	628540	IdentifierDecl	lineLength = line . length ( )		628504	0					
ANR	628541	IdentifierDeclType	int		628504	0					
ANR	628542	Identifier	lineLength		628504	1					
ANR	628543	AssignmentExpression	lineLength = line . length ( )		628504	2		=			
ANR	628544	Identifier	lineLength		628504	0					
ANR	628545	CallExpression	line . length ( )		628504	1					
ANR	628546	Callee	line . length		628504	0					
ANR	628547	MemberAccess	line . length		628504	0					
ANR	628548	Identifier	line		628504	0					
ANR	628549	Identifier	length		628504	1					
ANR	628550	ArgumentList			628504	1					
ANR	628551	IdentifierDeclStatement	char quoteChar_ = ' ' ;	402:1:9992:10013	628504	5	True				
ANR	628552	IdentifierDecl	quoteChar_ = ' '		628504	0					
ANR	628553	IdentifierDeclType	char		628504	0					
ANR	628554	Identifier	quoteChar_		628504	1					
ANR	628555	AssignmentExpression	quoteChar_ = ' '		628504	2		=			
ANR	628556	Identifier	quoteChar_		628504	0					
ANR	628557	PrimaryExpression	' '		628504	1					
ANR	628558	IdentifierDeclStatement	char ch = ' ' ;	403:1:10016:10029	628504	6	True				
ANR	628559	IdentifierDecl	ch = ' '		628504	0					
ANR	628560	IdentifierDeclType	char		628504	0					
ANR	628561	Identifier	ch		628504	1					
ANR	628562	AssignmentExpression	ch = ' '		628504	2		=			
ANR	628563	Identifier	ch		628504	0					
ANR	628564	PrimaryExpression	' '		628504	1					
ANR	628565	ForStatement	for ( int i = startChar + 1 ; i < lineLength ; ++ i )		628504	7					
ANR	628566	ForInit	int i = startChar + 1 ;	405:6:10038:10059	628504	0	True				
ANR	628567	IdentifierDeclStatement	int i = startChar + 1 ;		628504	0					
ANR	628568	IdentifierDecl	i = startChar + 1		628504	0					
ANR	628569	IdentifierDeclType	int		628504	0					
ANR	628570	Identifier	i		628504	1					
ANR	628571	AssignmentExpression	i = startChar + 1		628504	2		=			
ANR	628572	Identifier	i		628504	0					
ANR	628573	AdditiveExpression	startChar + 1		628504	1		+			
ANR	628574	Identifier	startChar		628504	0					
ANR	628575	PrimaryExpression	1		628504	1					
ANR	628576	Condition	i < lineLength	405:29:10061:10074	628504	1	True				
ANR	628577	RelationalExpression	i < lineLength		628504	0		<			
ANR	628578	Identifier	i		628504	0					
ANR	628579	Identifier	lineLength		628504	1					
ANR	628580	UnaryExpression	++ i	405:45:10077:10079	628504	2	True				
ANR	628581	IncDec	++		628504	0					
ANR	628582	Identifier	i		628504	1					
ANR	628583	CompoundStatement		12:1:236:236	628504	3					
ANR	628584	ExpressionStatement	ch = line [ i ]	407:2:10087:10099	628504	0	True				
ANR	628585	AssignmentExpression	ch = line [ i ]		628504	0		=			
ANR	628586	Identifier	ch		628504	0					
ANR	628587	ArrayIndexing	line [ i ]		628504	1					
ANR	628588	Identifier	line		628504	0					
ANR	628589	Identifier	i		628504	1					
ANR	628590	IfStatement	if ( isInComment_ )		628504	1					
ANR	628591	Condition	isInComment_	409:6:10108:10119	628504	0	True				
ANR	628592	Identifier	isInComment_		628504	0					
ANR	628593	CompoundStatement		16:2:277:277	628504	1					
ANR	628594	IfStatement	"if ( line . compare ( i , 2 , ""*/"" ) == 0 )"		628504	0					
ANR	628595	Condition	"line . compare ( i , 2 , ""*/"" ) == 0"	411:7:10133:10161	628504	0	True				
ANR	628596	EqualityExpression	"line . compare ( i , 2 , ""*/"" ) == 0"		628504	0		==			
ANR	628597	CallExpression	"line . compare ( i , 2 , ""*/"" )"		628504	0					
ANR	628598	Callee	line . compare		628504	0					
ANR	628599	MemberAccess	line . compare		628504	0					
ANR	628600	Identifier	line		628504	0					
ANR	628601	Identifier	compare		628504	1					
ANR	628602	ArgumentList	i		628504	1					
ANR	628603	Argument	i		628504	0					
ANR	628604	Identifier	i		628504	0					
ANR	628605	Argument	2		628504	1					
ANR	628606	PrimaryExpression	2		628504	0					
ANR	628607	Argument	"""*/"""		628504	2					
ANR	628608	PrimaryExpression	"""*/"""		628504	0					
ANR	628609	PrimaryExpression	0		628504	1					
ANR	628610	CompoundStatement		18:3:320:320	628504	1					
ANR	628611	ExpressionStatement	isInComment_ = false	413:4:10173:10193	628504	0	True				
ANR	628612	AssignmentExpression	isInComment_ = false		628504	0		=			
ANR	628613	Identifier	isInComment_		628504	0					
ANR	628614	Identifier	false		628504	1					
ANR	628615	ExpressionStatement	++ i	414:4:10199:10202	628504	1	True				
ANR	628616	UnaryExpression	++ i		628504	0					
ANR	628617	IncDec	++		628504	0					
ANR	628618	Identifier	i		628504	1					
ANR	628619	ContinueStatement	continue ;	416:3:10212:10220	628504	1	True				
ANR	628620	IfStatement	if ( ch == '\\\\' )		628504	2					
ANR	628621	Condition	ch == '\\\\'	419:6:10233:10242	628504	0	True				
ANR	628622	EqualityExpression	ch == '\\\\'		628504	0		==			
ANR	628623	Identifier	ch		628504	0					
ANR	628624	PrimaryExpression	'\\\\'		628504	1					
ANR	628625	CompoundStatement		26:2:400:400	628504	1					
ANR	628626	ExpressionStatement	++ i	421:3:10252:10255	628504	0	True				
ANR	628627	UnaryExpression	++ i		628504	0					
ANR	628628	IncDec	++		628504	0					
ANR	628629	Identifier	i		628504	1					
ANR	628630	ContinueStatement	continue ;	422:3:10260:10268	628504	1	True				
ANR	628631	IfStatement	if ( isInQuote_ )		628504	3					
ANR	628632	Condition	isInQuote_	425:6:10281:10290	628504	0	True				
ANR	628633	Identifier	isInQuote_		628504	0					
ANR	628634	CompoundStatement		32:2:448:448	628504	1					
ANR	628635	IfStatement	if ( ch == quoteChar_ )		628504	0					
ANR	628636	Condition	ch == quoteChar_	427:7:10304:10319	628504	0	True				
ANR	628637	EqualityExpression	ch == quoteChar_		628504	0		==			
ANR	628638	Identifier	ch		628504	0					
ANR	628639	Identifier	quoteChar_		628504	1					
ANR	628640	ExpressionStatement	isInQuote_ = false	428:4:10326:10344	628504	1	True				
ANR	628641	AssignmentExpression	isInQuote_ = false		628504	0		=			
ANR	628642	Identifier	isInQuote_		628504	0					
ANR	628643	Identifier	false		628504	1					
ANR	628644	ContinueStatement	continue ;	429:3:10349:10357	628504	1	True				
ANR	628645	IfStatement	"if ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"		628504	4					
ANR	628646	Condition	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"	432:6:10370:10434	628504	0	True				
ANR	628647	OrExpression	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"		628504	0		||			
ANR	628648	EqualityExpression	"ch == '""'"		628504	0		==			
ANR	628649	Identifier	ch		628504	0					
ANR	628650	PrimaryExpression	"'""'"		628504	1					
ANR	628651	AndExpression	"ch == '\\'' && ! isDigitSeparator ( line , i )"		628504	1		&&			
ANR	628652	EqualityExpression	ch == '\\''		628504	0		==			
ANR	628653	Identifier	ch		628504	0					
ANR	628654	PrimaryExpression	'\\''		628504	1					
ANR	628655	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		628504	1					
ANR	628656	UnaryOperator	!		628504	0					
ANR	628657	CallExpression	"isDigitSeparator ( line , i )"		628504	1					
ANR	628658	Callee	isDigitSeparator		628504	0					
ANR	628659	Identifier	isDigitSeparator		628504	0					
ANR	628660	ArgumentList	line		628504	1					
ANR	628661	Argument	line		628504	0					
ANR	628662	Identifier	line		628504	0					
ANR	628663	Argument	i		628504	1					
ANR	628664	Identifier	i		628504	0					
ANR	628665	CompoundStatement		40:2:592:592	628504	1					
ANR	628666	ExpressionStatement	isInQuote_ = true	435:3:10444:10461	628504	0	True				
ANR	628667	AssignmentExpression	isInQuote_ = true		628504	0		=			
ANR	628668	Identifier	isInQuote_		628504	0					
ANR	628669	Identifier	true		628504	1					
ANR	628670	ExpressionStatement	quoteChar_ = ch	436:3:10466:10481	628504	1	True				
ANR	628671	AssignmentExpression	quoteChar_ = ch		628504	0		=			
ANR	628672	Identifier	quoteChar_		628504	0					
ANR	628673	Identifier	ch		628504	1					
ANR	628674	ContinueStatement	continue ;	437:3:10486:10494	628504	2	True				
ANR	628675	IfStatement	"if ( line . compare ( i , 2 , ""//"" ) == 0 )"		628504	5					
ANR	628676	Condition	"line . compare ( i , 2 , ""//"" ) == 0"	440:6:10507:10535	628504	0	True				
ANR	628677	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		628504	0		==			
ANR	628678	CallExpression	"line . compare ( i , 2 , ""//"" )"		628504	0					
ANR	628679	Callee	line . compare		628504	0					
ANR	628680	MemberAccess	line . compare		628504	0					
ANR	628681	Identifier	line		628504	0					
ANR	628682	Identifier	compare		628504	1					
ANR	628683	ArgumentList	i		628504	1					
ANR	628684	Argument	i		628504	0					
ANR	628685	Identifier	i		628504	0					
ANR	628686	Argument	2		628504	1					
ANR	628687	PrimaryExpression	2		628504	0					
ANR	628688	Argument	"""//"""		628504	2					
ANR	628689	PrimaryExpression	"""//"""		628504	0					
ANR	628690	PrimaryExpression	0		628504	1					
ANR	628691	BreakStatement	break ;	441:3:10541:10546	628504	1	True				
ANR	628692	IfStatement	"if ( line . compare ( i , 2 , ""/*"" ) == 0 )"		628504	6					
ANR	628693	Condition	"line . compare ( i , 2 , ""/*"" ) == 0"	443:6:10555:10583	628504	0	True				
ANR	628694	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		628504	0		==			
ANR	628695	CallExpression	"line . compare ( i , 2 , ""/*"" )"		628504	0					
ANR	628696	Callee	line . compare		628504	0					
ANR	628697	MemberAccess	line . compare		628504	0					
ANR	628698	Identifier	line		628504	0					
ANR	628699	Identifier	compare		628504	1					
ANR	628700	ArgumentList	i		628504	1					
ANR	628701	Argument	i		628504	0					
ANR	628702	Identifier	i		628504	0					
ANR	628703	Argument	2		628504	1					
ANR	628704	PrimaryExpression	2		628504	0					
ANR	628705	Argument	"""/*"""		628504	2					
ANR	628706	PrimaryExpression	"""/*"""		628504	0					
ANR	628707	PrimaryExpression	0		628504	1					
ANR	628708	CompoundStatement		50:2:741:741	628504	1					
ANR	628709	ExpressionStatement	isInComment_ = true	445:3:10593:10612	628504	0	True				
ANR	628710	AssignmentExpression	isInComment_ = true		628504	0		=			
ANR	628711	Identifier	isInComment_		628504	0					
ANR	628712	Identifier	true		628504	1					
ANR	628713	ExpressionStatement	++ i	446:3:10617:10620	628504	1	True				
ANR	628714	UnaryExpression	++ i		628504	0					
ANR	628715	IncDec	++		628504	0					
ANR	628716	Identifier	i		628504	1					
ANR	628717	ContinueStatement	continue ;	447:3:10625:10633	628504	2	True				
ANR	628718	IfStatement	if ( ch == '{' )		628504	7					
ANR	628719	Condition	ch == '{'	450:6:10646:10654	628504	0	True				
ANR	628720	EqualityExpression	ch == '{'		628504	0		==			
ANR	628721	Identifier	ch		628504	0					
ANR	628722	PrimaryExpression	'{'		628504	1					
ANR	628723	ExpressionStatement	++ _braceCount	451:3:10660:10673	628504	1	True				
ANR	628724	UnaryExpression	++ _braceCount		628504	0					
ANR	628725	IncDec	++		628504	0					
ANR	628726	Identifier	_braceCount		628504	1					
ANR	628727	ElseStatement	else		628504	0					
ANR	628728	IfStatement	if ( ch == '}' )		628504	0					
ANR	628729	Condition	ch == '}'	452:11:10686:10694	628504	0	True				
ANR	628730	EqualityExpression	ch == '}'		628504	0		==			
ANR	628731	Identifier	ch		628504	0					
ANR	628732	PrimaryExpression	'}'		628504	1					
ANR	628733	ExpressionStatement	-- _braceCount	453:3:10700:10713	628504	1	True				
ANR	628734	UnaryExpression	-- _braceCount		628504	0					
ANR	628735	IncDec	--		628504	0					
ANR	628736	Identifier	_braceCount		628504	1					
ANR	628737	IfStatement	if ( _braceCount == 0 )		628504	8					
ANR	628738	Condition	_braceCount == 0	455:6:10722:10737	628504	0	True				
ANR	628739	EqualityExpression	_braceCount == 0		628504	0		==			
ANR	628740	Identifier	_braceCount		628504	0					
ANR	628741	PrimaryExpression	0		628504	1					
ANR	628742	ReturnStatement	return true ;	456:3:10743:10754	628504	1	True				
ANR	628743	Identifier	true		628504	0					
ANR	628744	ReturnStatement	return false ;	459:1:10761:10773	628504	8	True				
ANR	628745	Identifier	false		628504	0					
ANR	628746	ReturnType	bool		628504	1					
ANR	628747	Identifier	ASEnhancer :: isOneLineBlockReached		628504	2					
ANR	628748	ParameterList	"const string & line , int startChar"		628504	3					
ANR	628749	Parameter	const string & line	394:39:9805:9822	628504	0	True				
ANR	628750	ParameterType	const string &		628504	0					
ANR	628751	Identifier	line		628504	1					
ANR	628752	Parameter	int startChar	394:59:9825:9837	628504	1	True				
ANR	628753	ParameterType	int		628504	0					
ANR	628754	Identifier	startChar		628504	1					
ANR	628755	CFGEntryNode	ENTRY		628504		True				
ANR	628756	CFGExitNode	EXIT		628504		True				
ANR	628757	Symbol	line . compare		628504						
ANR	628758	Symbol	* startChar		628504						
ANR	628759	Symbol	ch		628504						
ANR	628760	Symbol	line		628504						
ANR	628761	Symbol	false		628504						
ANR	628762	Symbol	i		628504						
ANR	628763	Symbol	* line		628504						
ANR	628764	Symbol	isInComment_		628504						
ANR	628765	Symbol	isInQuote_		628504						
ANR	628766	Symbol	quoteChar_		628504						
ANR	628767	Symbol	lineLength		628504						
ANR	628768	Symbol	* i		628504						
ANR	628769	Symbol	startChar		628504						
ANR	628770	Symbol	_braceCount		628504						
ANR	628771	Symbol	isDigitSeparator		628504						
ANR	628772	Symbol	true		628504						
ANR	628773	Symbol	line . length		628504						
ANR	628774	Function	ASEnhancer :: parseCurrentLine	466:0:10878:15504							
ANR	628775	FunctionDef	"ASEnhancer :: parseCurrentLine (string & line , bool isInPreprocessor , bool isInSQL)"		628774	0					
ANR	628776	CompoundStatement		467:0:10963:15504	628774	0					
ANR	628777	IdentifierDeclStatement	bool isSpecialChar = false ;	468:1:10966:10992	628774	0	True				
ANR	628778	IdentifierDecl	isSpecialChar = false		628774	0					
ANR	628779	IdentifierDeclType	bool		628774	0					
ANR	628780	Identifier	isSpecialChar		628774	1					
ANR	628781	AssignmentExpression	isSpecialChar = false		628774	2		=			
ANR	628782	Identifier	false		628774	0					
ANR	628783	Identifier	false		628774	1					
ANR	628784	ForStatement	for ( size_t i = 0 ; i < line . length ( ) ; i ++ )		628774	1					
ANR	628785	ForInit	size_t i = 0 ;	470:6:11038:11050	628774	0	True				
ANR	628786	IdentifierDeclStatement	size_t i = 0 ;		628774	0					
ANR	628787	IdentifierDecl	i = 0		628774	0					
ANR	628788	IdentifierDeclType	size_t		628774	0					
ANR	628789	Identifier	i		628774	1					
ANR	628790	AssignmentExpression	i = 0		628774	2		=			
ANR	628791	Identifier	i		628774	0					
ANR	628792	PrimaryExpression	0		628774	1					
ANR	628793	Condition	i < line . length ( )	470:20:11052:11068	628774	1	True				
ANR	628794	RelationalExpression	i < line . length ( )		628774	0		<			
ANR	628795	Identifier	i		628774	0					
ANR	628796	CallExpression	line . length ( )		628774	1					
ANR	628797	Callee	line . length		628774	0					
ANR	628798	MemberAccess	line . length		628774	0					
ANR	628799	Identifier	line		628774	0					
ANR	628800	Identifier	length		628774	1					
ANR	628801	ArgumentList			628774	1					
ANR	628802	PostIncDecOperationExpression	i ++	470:39:11071:11073	628774	2	True				
ANR	628803	Identifier	i		628774	0					
ANR	628804	IncDec	++		628774	1					
ANR	628805	CompoundStatement		118:2:2708:2764	628774	3					
ANR	628806	IdentifierDeclStatement	char ch = line [ i ] ;	472:2:11081:11098	628774	0	True				
ANR	628807	IdentifierDecl	ch = line [ i ]		628774	0					
ANR	628808	IdentifierDeclType	char		628774	0					
ANR	628809	Identifier	ch		628774	1					
ANR	628810	AssignmentExpression	ch = line [ i ]		628774	2		=			
ANR	628811	Identifier	ch		628774	0					
ANR	628812	ArrayIndexing	line [ i ]		628774	1					
ANR	628813	Identifier	line		628774	0					
ANR	628814	Identifier	i		628774	1					
ANR	628815	IfStatement	if ( isWhiteSpace ( ch ) )		628774	1					
ANR	628816	Condition	isWhiteSpace ( ch )	475:6:11130:11145	628774	0	True				
ANR	628817	CallExpression	isWhiteSpace ( ch )		628774	0					
ANR	628818	Callee	isWhiteSpace		628774	0					
ANR	628819	Identifier	isWhiteSpace		628774	0					
ANR	628820	ArgumentList	ch		628774	1					
ANR	628821	Argument	ch		628774	0					
ANR	628822	Identifier	ch		628774	0					
ANR	628823	ContinueStatement	continue ;	476:3:11151:11159	628774	1	True				
ANR	628824	IfStatement	if ( isSpecialChar )		628774	2					
ANR	628825	Condition	isSpecialChar	479:6:11246:11258	628774	0	True				
ANR	628826	Identifier	isSpecialChar		628774	0					
ANR	628827	CompoundStatement		14:2:299:299	628774	1					
ANR	628828	ExpressionStatement	isSpecialChar = false	481:3:11268:11289	628774	0	True				
ANR	628829	AssignmentExpression	isSpecialChar = false		628774	0		=			
ANR	628830	Identifier	isSpecialChar		628774	0					
ANR	628831	Identifier	false		628774	1					
ANR	628832	ContinueStatement	continue ;	482:3:11294:11302	628774	1	True				
ANR	628833	IfStatement	"if ( ! ( isInComment ) && line . compare ( i , 2 , ""\\\\\\\\"" ) == 0 )"		628774	3					
ANR	628834	Condition	"! ( isInComment ) && line . compare ( i , 2 , ""\\\\\\\\"" ) == 0"	484:6:11314:11362	628774	0	True				
ANR	628835	AndExpression	"! ( isInComment ) && line . compare ( i , 2 , ""\\\\\\\\"" ) == 0"		628774	0		&&			
ANR	628836	UnaryOperationExpression	! ( isInComment )		628774	0					
ANR	628837	UnaryOperator	!		628774	0					
ANR	628838	Identifier	isInComment		628774	1					
ANR	628839	EqualityExpression	"line . compare ( i , 2 , ""\\\\\\\\"" ) == 0"		628774	1		==			
ANR	628840	CallExpression	"line . compare ( i , 2 , ""\\\\\\\\"" )"		628774	0					
ANR	628841	Callee	line . compare		628774	0					
ANR	628842	MemberAccess	line . compare		628774	0					
ANR	628843	Identifier	line		628774	0					
ANR	628844	Identifier	compare		628774	1					
ANR	628845	ArgumentList	i		628774	1					
ANR	628846	Argument	i		628774	0					
ANR	628847	Identifier	i		628774	0					
ANR	628848	Argument	2		628774	1					
ANR	628849	PrimaryExpression	2		628774	0					
ANR	628850	Argument	"""\\\\\\\\"""		628774	2					
ANR	628851	PrimaryExpression	"""\\\\\\\\"""		628774	0					
ANR	628852	PrimaryExpression	0		628774	1					
ANR	628853	CompoundStatement		19:2:403:403	628774	1					
ANR	628854	ExpressionStatement	i ++	486:3:11372:11375	628774	0	True				
ANR	628855	PostIncDecOperationExpression	i ++		628774	0					
ANR	628856	Identifier	i		628774	0					
ANR	628857	IncDec	++		628774	1					
ANR	628858	ContinueStatement	continue ;	487:3:11380:11388	628774	1	True				
ANR	628859	IfStatement	if ( ! ( isInComment ) && ch == '\\\\' )		628774	4					
ANR	628860	Condition	! ( isInComment ) && ch == '\\\\'	489:6:11400:11427	628774	0	True				
ANR	628861	AndExpression	! ( isInComment ) && ch == '\\\\'		628774	0		&&			
ANR	628862	UnaryOperationExpression	! ( isInComment )		628774	0					
ANR	628863	UnaryOperator	!		628774	0					
ANR	628864	Identifier	isInComment		628774	1					
ANR	628865	EqualityExpression	ch == '\\\\'		628774	1		==			
ANR	628866	Identifier	ch		628774	0					
ANR	628867	PrimaryExpression	'\\\\'		628774	1					
ANR	628868	CompoundStatement		24:2:468:468	628774	1					
ANR	628869	ExpressionStatement	isSpecialChar = true	491:3:11437:11457	628774	0	True				
ANR	628870	AssignmentExpression	isSpecialChar = true		628774	0		=			
ANR	628871	Identifier	isSpecialChar		628774	0					
ANR	628872	Identifier	true		628774	1					
ANR	628873	ContinueStatement	continue ;	492:3:11462:11470	628774	1	True				
ANR	628874	IfStatement	"if ( ! isInComment && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) ) )"		628774	5					
ANR	628875	Condition	"! isInComment && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"	496:6:11534:11630	628774	0	True				
ANR	628876	AndExpression	"! isInComment && ( ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) ) )"		628774	0		&&			
ANR	628877	UnaryOperationExpression	! isInComment		628774	0					
ANR	628878	UnaryOperator	!		628774	0					
ANR	628879	Identifier	isInComment		628774	1					
ANR	628880	OrExpression	"ch == '""' || ( ch == '\\'' && ! isDigitSeparator ( line , i ) )"		628774	1		||			
ANR	628881	EqualityExpression	"ch == '""'"		628774	0		==			
ANR	628882	Identifier	ch		628774	0					
ANR	628883	PrimaryExpression	"'""'"		628774	1					
ANR	628884	AndExpression	"ch == '\\'' && ! isDigitSeparator ( line , i )"		628774	1		&&			
ANR	628885	EqualityExpression	ch == '\\''		628774	0		==			
ANR	628886	Identifier	ch		628774	0					
ANR	628887	PrimaryExpression	'\\''		628774	1					
ANR	628888	UnaryOperationExpression	"! isDigitSeparator ( line , i )"		628774	1					
ANR	628889	UnaryOperator	!		628774	0					
ANR	628890	CallExpression	"isDigitSeparator ( line , i )"		628774	1					
ANR	628891	Callee	isDigitSeparator		628774	0					
ANR	628892	Identifier	isDigitSeparator		628774	0					
ANR	628893	ArgumentList	line		628774	1					
ANR	628894	Argument	line		628774	0					
ANR	628895	Identifier	line		628774	0					
ANR	628896	Argument	i		628774	1					
ANR	628897	Identifier	i		628774	0					
ANR	628898	CompoundStatement		33:2:671:671	628774	1					
ANR	628899	IfStatement	if ( ! isInQuote )		628774	0					
ANR	628900	Condition	! isInQuote	500:7:11644:11653	628774	0	True				
ANR	628901	UnaryOperationExpression	! isInQuote		628774	0					
ANR	628902	UnaryOperator	!		628774	0					
ANR	628903	Identifier	isInQuote		628774	1					
ANR	628904	CompoundStatement		35:3:695:695	628774	1					
ANR	628905	ExpressionStatement	quoteChar = ch	502:4:11665:11679	628774	0	True				
ANR	628906	AssignmentExpression	quoteChar = ch		628774	0		=			
ANR	628907	Identifier	quoteChar		628774	0					
ANR	628908	Identifier	ch		628774	1					
ANR	628909	ExpressionStatement	isInQuote = true	503:4:11685:11701	628774	1	True				
ANR	628910	AssignmentExpression	isInQuote = true		628774	0		=			
ANR	628911	Identifier	isInQuote		628774	0					
ANR	628912	Identifier	true		628774	1					
ANR	628913	ElseStatement	else		628774	0					
ANR	628914	IfStatement	if ( quoteChar == ch )		628774	0					
ANR	628915	Condition	quoteChar == ch	505:12:11720:11734	628774	0	True				
ANR	628916	EqualityExpression	quoteChar == ch		628774	0		==			
ANR	628917	Identifier	quoteChar		628774	0					
ANR	628918	Identifier	ch		628774	1					
ANR	628919	CompoundStatement		40:3:776:776	628774	1					
ANR	628920	ExpressionStatement	isInQuote = false	507:4:11746:11763	628774	0	True				
ANR	628921	AssignmentExpression	isInQuote = false		628774	0		=			
ANR	628922	Identifier	isInQuote		628774	0					
ANR	628923	Identifier	false		628774	1					
ANR	628924	ContinueStatement	continue ;	508:4:11769:11777	628774	1	True				
ANR	628925	IfStatement	if ( isInQuote )		628774	6					
ANR	628926	Condition	isInQuote	512:6:11795:11803	628774	0	True				
ANR	628927	Identifier	isInQuote		628774	0					
ANR	628928	ContinueStatement	continue ;	513:3:11809:11817	628774	1	True				
ANR	628929	IfStatement	"if ( ! ( isInComment ) && line . compare ( i , 2 , ""//"" ) == 0 )"		628774	7					
ANR	628930	Condition	"! ( isInComment ) && line . compare ( i , 2 , ""//"" ) == 0"	517:6:11848:11894	628774	0	True				
ANR	628931	AndExpression	"! ( isInComment ) && line . compare ( i , 2 , ""//"" ) == 0"		628774	0		&&			
ANR	628932	UnaryOperationExpression	! ( isInComment )		628774	0					
ANR	628933	UnaryOperator	!		628774	0					
ANR	628934	Identifier	isInComment		628774	1					
ANR	628935	EqualityExpression	"line . compare ( i , 2 , ""//"" ) == 0"		628774	1		==			
ANR	628936	CallExpression	"line . compare ( i , 2 , ""//"" )"		628774	0					
ANR	628937	Callee	line . compare		628774	0					
ANR	628938	MemberAccess	line . compare		628774	0					
ANR	628939	Identifier	line		628774	0					
ANR	628940	Identifier	compare		628774	1					
ANR	628941	ArgumentList	i		628774	1					
ANR	628942	Argument	i		628774	0					
ANR	628943	Identifier	i		628774	0					
ANR	628944	Argument	2		628774	1					
ANR	628945	PrimaryExpression	2		628774	0					
ANR	628946	Argument	"""//"""		628774	2					
ANR	628947	PrimaryExpression	"""//"""		628774	0					
ANR	628948	PrimaryExpression	0		628774	1					
ANR	628949	CompoundStatement		52:2:935:935	628774	1					
ANR	628950	IfStatement	"if ( line . compare ( i + 2 , 1 , ""\\xf0"" ) > 0 )"		628774	0					
ANR	628951	Condition	"line . compare ( i + 2 , 1 , ""\\xf0"" ) > 0"	520:7:11945:11978	628774	0	True				
ANR	628952	RelationalExpression	"line . compare ( i + 2 , 1 , ""\\xf0"" ) > 0"		628774	0		>			
ANR	628953	CallExpression	"line . compare ( i + 2 , 1 , ""\\xf0"" )"		628774	0					
ANR	628954	Callee	line . compare		628774	0					
ANR	628955	MemberAccess	line . compare		628774	0					
ANR	628956	Identifier	line		628774	0					
ANR	628957	Identifier	compare		628774	1					
ANR	628958	ArgumentList	i + 2		628774	1					
ANR	628959	Argument	i + 2		628774	0					
ANR	628960	AdditiveExpression	i + 2		628774	0		+			
ANR	628961	Identifier	i		628774	0					
ANR	628962	PrimaryExpression	2		628774	1					
ANR	628963	Argument	1		628774	1					
ANR	628964	PrimaryExpression	1		628774	0					
ANR	628965	Argument	"""\\xf0"""		628774	2					
ANR	628966	PrimaryExpression	"""\\xf0"""		628774	0					
ANR	628967	PrimaryExpression	0		628774	1					
ANR	628968	ExpressionStatement	lineNumber --	521:4:11985:11997	628774	1	True				
ANR	628969	PostIncDecOperationExpression	lineNumber --		628774	0					
ANR	628970	Identifier	lineNumber		628774	0					
ANR	628971	IncDec	--		628774	1					
ANR	628972	IfStatement	"if ( line . find_first_not_of ( "" \\t"" ) == i && sw . switchBraceCount == 1 && sw . unindentCase )"		628774	1					
ANR	628973	Condition	"line . find_first_not_of ( "" \\t"" ) == i && sw . switchBraceCount == 1 && sw . unindentCase"	523:7:12043:12145	628774	0	True				
ANR	628974	AndExpression	"line . find_first_not_of ( "" \\t"" ) == i && sw . switchBraceCount == 1 && sw . unindentCase"		628774	0		&&			
ANR	628975	EqualityExpression	"line . find_first_not_of ( "" \\t"" ) == i"		628774	0		==			
ANR	628976	CallExpression	"line . find_first_not_of ( "" \\t"" )"		628774	0					
ANR	628977	Callee	line . find_first_not_of		628774	0					
ANR	628978	MemberAccess	line . find_first_not_of		628774	0					
ANR	628979	Identifier	line		628774	0					
ANR	628980	Identifier	find_first_not_of		628774	1					
ANR	628981	ArgumentList	""" \\t"""		628774	1					
ANR	628982	Argument	""" \\t"""		628774	0					
ANR	628983	PrimaryExpression	""" \\t"""		628774	0					
ANR	628984	Identifier	i		628774	1					
ANR	628985	AndExpression	sw . switchBraceCount == 1 && sw . unindentCase		628774	1		&&			
ANR	628986	EqualityExpression	sw . switchBraceCount == 1		628774	0		==			
ANR	628987	MemberAccess	sw . switchBraceCount		628774	0					
ANR	628988	Identifier	sw		628774	0					
ANR	628989	Identifier	switchBraceCount		628774	1					
ANR	628990	PrimaryExpression	1		628774	1					
ANR	628991	MemberAccess	sw . unindentCase		628774	1					
ANR	628992	Identifier	sw		628774	0					
ANR	628993	Identifier	unindentCase		628774	1					
ANR	628994	ExpressionStatement	shouldUnindentComment = true	526:4:12152:12180	628774	1	True				
ANR	628995	AssignmentExpression	shouldUnindentComment = true		628774	0		=			
ANR	628996	Identifier	shouldUnindentComment		628774	0					
ANR	628997	Identifier	true		628774	1					
ANR	628998	BreakStatement	break ;	527:3:12185:12190	628774	2	True				
ANR	628999	ElseStatement	else		628774	0					
ANR	629000	IfStatement	"if ( ! ( isInComment ) && line . compare ( i , 2 , ""/*"" ) == 0 )"		628774	0					
ANR	629001	Condition	"! ( isInComment ) && line . compare ( i , 2 , ""/*"" ) == 0"	529:11:12249:12295	628774	0	True				
ANR	629002	AndExpression	"! ( isInComment ) && line . compare ( i , 2 , ""/*"" ) == 0"		628774	0		&&			
ANR	629003	UnaryOperationExpression	! ( isInComment )		628774	0					
ANR	629004	UnaryOperator	!		628774	0					
ANR	629005	Identifier	isInComment		628774	1					
ANR	629006	EqualityExpression	"line . compare ( i , 2 , ""/*"" ) == 0"		628774	1		==			
ANR	629007	CallExpression	"line . compare ( i , 2 , ""/*"" )"		628774	0					
ANR	629008	Callee	line . compare		628774	0					
ANR	629009	MemberAccess	line . compare		628774	0					
ANR	629010	Identifier	line		628774	0					
ANR	629011	Identifier	compare		628774	1					
ANR	629012	ArgumentList	i		628774	1					
ANR	629013	Argument	i		628774	0					
ANR	629014	Identifier	i		628774	0					
ANR	629015	Argument	2		628774	1					
ANR	629016	PrimaryExpression	2		628774	0					
ANR	629017	Argument	"""/*"""		628774	2					
ANR	629018	PrimaryExpression	"""/*"""		628774	0					
ANR	629019	PrimaryExpression	0		628774	1					
ANR	629020	CompoundStatement		69:3:1487:1525	628774	1					
ANR	629021	IfStatement	if ( sw . switchBraceCount == 1 && sw . unindentCase )		628774	0					
ANR	629022	Condition	sw . switchBraceCount == 1 && sw . unindentCase	532:7:12346:12388	628774	0	True				
ANR	629023	AndExpression	sw . switchBraceCount == 1 && sw . unindentCase		628774	0		&&			
ANR	629024	EqualityExpression	sw . switchBraceCount == 1		628774	0		==			
ANR	629025	MemberAccess	sw . switchBraceCount		628774	0					
ANR	629026	Identifier	sw		628774	0					
ANR	629027	Identifier	switchBraceCount		628774	1					
ANR	629028	PrimaryExpression	1		628774	1					
ANR	629029	MemberAccess	sw . unindentCase		628774	1					
ANR	629030	Identifier	sw		628774	0					
ANR	629031	Identifier	unindentCase		628774	1					
ANR	629032	ExpressionStatement	shouldUnindentComment = true	533:4:12395:12423	628774	1	True				
ANR	629033	AssignmentExpression	shouldUnindentComment = true		628774	0		=			
ANR	629034	Identifier	shouldUnindentComment		628774	0					
ANR	629035	Identifier	true		628774	1					
ANR	629036	ExpressionStatement	isInComment = true	534:3:12428:12446	628774	1	True				
ANR	629037	AssignmentExpression	isInComment = true		628774	0		=			
ANR	629038	Identifier	isInComment		628774	0					
ANR	629039	Identifier	true		628774	1					
ANR	629040	IdentifierDeclStatement	"size_t commentEnd = line . find ( ""*/"" , i ) ;"	535:3:12451:12489	628774	2	True				
ANR	629041	IdentifierDecl	"commentEnd = line . find ( ""*/"" , i )"		628774	0					
ANR	629042	IdentifierDeclType	size_t		628774	0					
ANR	629043	Identifier	commentEnd		628774	1					
ANR	629044	AssignmentExpression	"commentEnd = line . find ( ""*/"" , i )"		628774	2		=			
ANR	629045	Identifier	commentEnd		628774	0					
ANR	629046	CallExpression	"line . find ( ""*/"" , i )"		628774	1					
ANR	629047	Callee	line . find		628774	0					
ANR	629048	MemberAccess	line . find		628774	0					
ANR	629049	Identifier	line		628774	0					
ANR	629050	Identifier	find		628774	1					
ANR	629051	ArgumentList	"""*/"""		628774	1					
ANR	629052	Argument	"""*/"""		628774	0					
ANR	629053	PrimaryExpression	"""*/"""		628774	0					
ANR	629054	Argument	i		628774	1					
ANR	629055	Identifier	i		628774	0					
ANR	629056	IfStatement	if ( commentEnd == string :: npos )		628774	3					
ANR	629057	Condition	commentEnd == string :: npos	536:7:12498:12523	628774	0	True				
ANR	629058	EqualityExpression	commentEnd == string :: npos		628774	0		==			
ANR	629059	Identifier	commentEnd		628774	0					
ANR	629060	Identifier	string :: npos		628774	1					
ANR	629061	ExpressionStatement	i = line . length ( ) - 1	537:4:12530:12551	628774	1	True				
ANR	629062	AssignmentExpression	i = line . length ( ) - 1		628774	0		=			
ANR	629063	Identifier	i		628774	0					
ANR	629064	AdditiveExpression	line . length ( ) - 1		628774	1		-			
ANR	629065	CallExpression	line . length ( )		628774	0					
ANR	629066	Callee	line . length		628774	0					
ANR	629067	MemberAccess	line . length		628774	0					
ANR	629068	Identifier	line		628774	0					
ANR	629069	Identifier	length		628774	1					
ANR	629070	ArgumentList			628774	1					
ANR	629071	PrimaryExpression	1		628774	1					
ANR	629072	ElseStatement	else		628774	0					
ANR	629073	ExpressionStatement	i = commentEnd - 1	539:4:12565:12583	628774	0	True				
ANR	629074	AssignmentExpression	i = commentEnd - 1		628774	0		=			
ANR	629075	Identifier	i		628774	0					
ANR	629076	AdditiveExpression	commentEnd - 1		628774	1		-			
ANR	629077	Identifier	commentEnd		628774	0					
ANR	629078	PrimaryExpression	1		628774	1					
ANR	629079	ContinueStatement	continue ;	540:3:12588:12596	628774	4	True				
ANR	629080	ElseStatement	else		628774	0					
ANR	629081	IfStatement	"if ( ( isInComment ) && line . compare ( i , 2 , ""*/"" ) == 0 )"		628774	0					
ANR	629082	Condition	"( isInComment ) && line . compare ( i , 2 , ""*/"" ) == 0"	542:11:12613:12658	628774	0	True				
ANR	629083	AndExpression	"( isInComment ) && line . compare ( i , 2 , ""*/"" ) == 0"		628774	0		&&			
ANR	629084	Identifier	isInComment		628774	0					
ANR	629085	EqualityExpression	"line . compare ( i , 2 , ""*/"" ) == 0"		628774	1		==			
ANR	629086	CallExpression	"line . compare ( i , 2 , ""*/"" )"		628774	0					
ANR	629087	Callee	line . compare		628774	0					
ANR	629088	MemberAccess	line . compare		628774	0					
ANR	629089	Identifier	line		628774	0					
ANR	629090	Identifier	compare		628774	1					
ANR	629091	ArgumentList	i		628774	1					
ANR	629092	Argument	i		628774	0					
ANR	629093	Identifier	i		628774	0					
ANR	629094	Argument	2		628774	1					
ANR	629095	PrimaryExpression	2		628774	0					
ANR	629096	Argument	"""*/"""		628774	2					
ANR	629097	PrimaryExpression	"""*/"""		628774	0					
ANR	629098	PrimaryExpression	0		628774	1					
ANR	629099	CompoundStatement		77:2:1699:1699	628774	1					
ANR	629100	IfStatement	if ( sw . switchBraceCount == 1 && sw . unindentCase )		628774	0					
ANR	629101	Condition	sw . switchBraceCount == 1 && sw . unindentCase	545:7:12709:12751	628774	0	True				
ANR	629102	AndExpression	sw . switchBraceCount == 1 && sw . unindentCase		628774	0		&&			
ANR	629103	EqualityExpression	sw . switchBraceCount == 1		628774	0		==			
ANR	629104	MemberAccess	sw . switchBraceCount		628774	0					
ANR	629105	Identifier	sw		628774	0					
ANR	629106	Identifier	switchBraceCount		628774	1					
ANR	629107	PrimaryExpression	1		628774	1					
ANR	629108	MemberAccess	sw . unindentCase		628774	1					
ANR	629109	Identifier	sw		628774	0					
ANR	629110	Identifier	unindentCase		628774	1					
ANR	629111	ExpressionStatement	shouldUnindentComment = true	546:4:12758:12786	628774	1	True				
ANR	629112	AssignmentExpression	shouldUnindentComment = true		628774	0		=			
ANR	629113	Identifier	shouldUnindentComment		628774	0					
ANR	629114	Identifier	true		628774	1					
ANR	629115	ExpressionStatement	isInComment = false	547:3:12791:12810	628774	1	True				
ANR	629116	AssignmentExpression	isInComment = false		628774	0		=			
ANR	629117	Identifier	isInComment		628774	0					
ANR	629118	Identifier	false		628774	1					
ANR	629119	ExpressionStatement	i ++	548:3:12815:12818	628774	2	True				
ANR	629120	PostIncDecOperationExpression	i ++		628774	0					
ANR	629121	Identifier	i		628774	0					
ANR	629122	IncDec	++		628774	1					
ANR	629123	ContinueStatement	continue ;	549:3:12823:12831	628774	3	True				
ANR	629124	IfStatement	if ( isInComment )		628774	8					
ANR	629125	Condition	isInComment	552:6:12844:12854	628774	0	True				
ANR	629126	Identifier	isInComment		628774	0					
ANR	629127	CompoundStatement		91:3:2023:2061	628774	1					
ANR	629128	IfStatement	if ( sw . switchBraceCount == 1 && sw . unindentCase )		628774	0					
ANR	629129	Condition	sw . switchBraceCount == 1 && sw . unindentCase	555:7:12905:12947	628774	0	True				
ANR	629130	AndExpression	sw . switchBraceCount == 1 && sw . unindentCase		628774	0		&&			
ANR	629131	EqualityExpression	sw . switchBraceCount == 1		628774	0		==			
ANR	629132	MemberAccess	sw . switchBraceCount		628774	0					
ANR	629133	Identifier	sw		628774	0					
ANR	629134	Identifier	switchBraceCount		628774	1					
ANR	629135	PrimaryExpression	1		628774	1					
ANR	629136	MemberAccess	sw . unindentCase		628774	1					
ANR	629137	Identifier	sw		628774	0					
ANR	629138	Identifier	unindentCase		628774	1					
ANR	629139	ExpressionStatement	shouldUnindentComment = true	556:4:12954:12982	628774	1	True				
ANR	629140	AssignmentExpression	shouldUnindentComment = true		628774	0		=			
ANR	629141	Identifier	shouldUnindentComment		628774	0					
ANR	629142	Identifier	true		628774	1					
ANR	629143	IdentifierDeclStatement	"size_t commentEnd = line . find ( ""*/"" , i ) ;"	557:3:12987:13025	628774	1	True				
ANR	629144	IdentifierDecl	"commentEnd = line . find ( ""*/"" , i )"		628774	0					
ANR	629145	IdentifierDeclType	size_t		628774	0					
ANR	629146	Identifier	commentEnd		628774	1					
ANR	629147	AssignmentExpression	"commentEnd = line . find ( ""*/"" , i )"		628774	2		=			
ANR	629148	Identifier	commentEnd		628774	0					
ANR	629149	CallExpression	"line . find ( ""*/"" , i )"		628774	1					
ANR	629150	Callee	line . find		628774	0					
ANR	629151	MemberAccess	line . find		628774	0					
ANR	629152	Identifier	line		628774	0					
ANR	629153	Identifier	find		628774	1					
ANR	629154	ArgumentList	"""*/"""		628774	1					
ANR	629155	Argument	"""*/"""		628774	0					
ANR	629156	PrimaryExpression	"""*/"""		628774	0					
ANR	629157	Argument	i		628774	1					
ANR	629158	Identifier	i		628774	0					
ANR	629159	IfStatement	if ( commentEnd == string :: npos )		628774	2					
ANR	629160	Condition	commentEnd == string :: npos	558:7:13034:13059	628774	0	True				
ANR	629161	EqualityExpression	commentEnd == string :: npos		628774	0		==			
ANR	629162	Identifier	commentEnd		628774	0					
ANR	629163	Identifier	string :: npos		628774	1					
ANR	629164	ExpressionStatement	i = line . length ( ) - 1	559:4:13066:13087	628774	1	True				
ANR	629165	AssignmentExpression	i = line . length ( ) - 1		628774	0		=			
ANR	629166	Identifier	i		628774	0					
ANR	629167	AdditiveExpression	line . length ( ) - 1		628774	1		-			
ANR	629168	CallExpression	line . length ( )		628774	0					
ANR	629169	Callee	line . length		628774	0					
ANR	629170	MemberAccess	line . length		628774	0					
ANR	629171	Identifier	line		628774	0					
ANR	629172	Identifier	length		628774	1					
ANR	629173	ArgumentList			628774	1					
ANR	629174	PrimaryExpression	1		628774	1					
ANR	629175	ElseStatement	else		628774	0					
ANR	629176	ExpressionStatement	i = commentEnd - 1	561:4:13101:13119	628774	0	True				
ANR	629177	AssignmentExpression	i = commentEnd - 1		628774	0		=			
ANR	629178	Identifier	i		628774	0					
ANR	629179	AdditiveExpression	commentEnd - 1		628774	1		-			
ANR	629180	Identifier	commentEnd		628774	0					
ANR	629181	PrimaryExpression	1		628774	1					
ANR	629182	ContinueStatement	continue ;	562:3:13124:13132	628774	3	True				
ANR	629183	IfStatement	if ( line [ i ] == '{' )		628774	9					
ANR	629184	Condition	line [ i ] == '{'	567:6:13240:13253	628774	0	True				
ANR	629185	EqualityExpression	line [ i ] == '{'		628774	0		==			
ANR	629186	ArrayIndexing	line [ i ]		628774	0					
ANR	629187	Identifier	line		628774	0					
ANR	629188	Identifier	i		628774	1					
ANR	629189	PrimaryExpression	'{'		628774	1					
ANR	629190	ExpressionStatement	braceCount ++	568:3:13259:13271	628774	1	True				
ANR	629191	PostIncDecOperationExpression	braceCount ++		628774	0					
ANR	629192	Identifier	braceCount		628774	0					
ANR	629193	IncDec	++		628774	1					
ANR	629194	IfStatement	if ( line [ i ] == '}' )		628774	10					
ANR	629195	Condition	line [ i ] == '}'	570:6:13280:13293	628774	0	True				
ANR	629196	EqualityExpression	line [ i ] == '}'		628774	0		==			
ANR	629197	ArrayIndexing	line [ i ]		628774	0					
ANR	629198	Identifier	line		628774	0					
ANR	629199	Identifier	i		628774	1					
ANR	629200	PrimaryExpression	'}'		628774	1					
ANR	629201	ExpressionStatement	braceCount --	571:3:13299:13311	628774	1	True				
ANR	629202	PostIncDecOperationExpression	braceCount --		628774	0					
ANR	629203	Identifier	braceCount		628774	0					
ANR	629204	IncDec	--		628774	1					
ANR	629205	IfStatement	if ( isInEventTable && line [ i ] == '#' && preprocBlockIndent )		628774	11					
ANR	629206	Condition	isInEventTable && line [ i ] == '#' && preprocBlockIndent	574:6:13370:13423	628774	0	True				
ANR	629207	AndExpression	isInEventTable && line [ i ] == '#' && preprocBlockIndent		628774	0		&&			
ANR	629208	Identifier	isInEventTable		628774	0					
ANR	629209	AndExpression	line [ i ] == '#' && preprocBlockIndent		628774	1		&&			
ANR	629210	EqualityExpression	line [ i ] == '#'		628774	0		==			
ANR	629211	ArrayIndexing	line [ i ]		628774	0					
ANR	629212	Identifier	line		628774	0					
ANR	629213	Identifier	i		628774	1					
ANR	629214	PrimaryExpression	'#'		628774	1					
ANR	629215	Identifier	preprocBlockIndent		628774	1					
ANR	629216	CompoundStatement		110:3:2469:2483	628774	1					
ANR	629217	IdentifierDeclStatement	string preproc ;	576:3:13433:13447	628774	0	True				
ANR	629218	IdentifierDecl	preproc		628774	0					
ANR	629219	IdentifierDeclType	string		628774	0					
ANR	629220	Identifier	preproc		628774	1					
ANR	629221	ExpressionStatement	preproc = line . substr ( i + 1 )	577:3:13452:13480	628774	1	True				
ANR	629222	AssignmentExpression	preproc = line . substr ( i + 1 )		628774	0		=			
ANR	629223	Identifier	preproc		628774	0					
ANR	629224	CallExpression	line . substr ( i + 1 )		628774	1					
ANR	629225	Callee	line . substr		628774	0					
ANR	629226	MemberAccess	line . substr		628774	0					
ANR	629227	Identifier	line		628774	0					
ANR	629228	Identifier	substr		628774	1					
ANR	629229	ArgumentList	i + 1		628774	1					
ANR	629230	Argument	i + 1		628774	0					
ANR	629231	AdditiveExpression	i + 1		628774	0		+			
ANR	629232	Identifier	i		628774	0					
ANR	629233	PrimaryExpression	1		628774	1					
ANR	629234	IfStatement	"if ( preproc . substr ( 0 , 2 ) == ""if"" )"		628774	2					
ANR	629235	Condition	"preproc . substr ( 0 , 2 ) == ""if"""	578:7:13489:13516	628774	0	True				
ANR	629236	EqualityExpression	"preproc . substr ( 0 , 2 ) == ""if"""		628774	0		==			
ANR	629237	CallExpression	"preproc . substr ( 0 , 2 )"		628774	0					
ANR	629238	Callee	preproc . substr		628774	0					
ANR	629239	MemberAccess	preproc . substr		628774	0					
ANR	629240	Identifier	preproc		628774	0					
ANR	629241	Identifier	substr		628774	1					
ANR	629242	ArgumentList	0		628774	1					
ANR	629243	Argument	0		628774	0					
ANR	629244	PrimaryExpression	0		628774	0					
ANR	629245	Argument	2		628774	1					
ANR	629246	PrimaryExpression	2		628774	0					
ANR	629247	PrimaryExpression	"""if"""		628774	1					
ANR	629248	ExpressionStatement	eventPreprocDepth += 1	579:4:13548:13570	628774	1	True				
ANR	629249	AssignmentExpression	eventPreprocDepth += 1		628774	0		+=			
ANR	629250	Identifier	eventPreprocDepth		628774	0					
ANR	629251	PrimaryExpression	1		628774	1					
ANR	629252	IfStatement	"if ( preproc . substr ( 0 , 5 ) == ""endif"" && eventPreprocDepth > 0 )"		628774	3					
ANR	629253	Condition	"preproc . substr ( 0 , 5 ) == ""endif"" && eventPreprocDepth > 0"	580:7:13579:13634	628774	0	True				
ANR	629254	AndExpression	"preproc . substr ( 0 , 5 ) == ""endif"" && eventPreprocDepth > 0"		628774	0		&&			
ANR	629255	EqualityExpression	"preproc . substr ( 0 , 5 ) == ""endif"""		628774	0		==			
ANR	629256	CallExpression	"preproc . substr ( 0 , 5 )"		628774	0					
ANR	629257	Callee	preproc . substr		628774	0					
ANR	629258	MemberAccess	preproc . substr		628774	0					
ANR	629259	Identifier	preproc		628774	0					
ANR	629260	Identifier	substr		628774	1					
ANR	629261	ArgumentList	0		628774	1					
ANR	629262	Argument	0		628774	0					
ANR	629263	PrimaryExpression	0		628774	0					
ANR	629264	Argument	5		628774	1					
ANR	629265	PrimaryExpression	5		628774	0					
ANR	629266	PrimaryExpression	"""endif"""		628774	1					
ANR	629267	RelationalExpression	eventPreprocDepth > 0		628774	1		>			
ANR	629268	Identifier	eventPreprocDepth		628774	0					
ANR	629269	PrimaryExpression	0		628774	1					
ANR	629270	ExpressionStatement	eventPreprocDepth -= 1	581:4:13641:13663	628774	1	True				
ANR	629271	AssignmentExpression	eventPreprocDepth -= 1		628774	0		-=			
ANR	629272	Identifier	eventPreprocDepth		628774	0					
ANR	629273	PrimaryExpression	1		628774	1					
ANR	629274	IdentifierDeclStatement	"bool isPotentialKeyword = isCharPotentialHeader ( line , i ) ;"	584:2:13672:13728	628774	12	True				
ANR	629275	IdentifierDecl	"isPotentialKeyword = isCharPotentialHeader ( line , i )"		628774	0					
ANR	629276	IdentifierDeclType	bool		628774	0					
ANR	629277	Identifier	isPotentialKeyword		628774	1					
ANR	629278	AssignmentExpression	"isPotentialKeyword = isCharPotentialHeader ( line , i )"		628774	2		=			
ANR	629279	Identifier	isPotentialKeyword		628774	0					
ANR	629280	CallExpression	"isCharPotentialHeader ( line , i )"		628774	1					
ANR	629281	Callee	isCharPotentialHeader		628774	0					
ANR	629282	Identifier	isCharPotentialHeader		628774	0					
ANR	629283	ArgumentList	line		628774	1					
ANR	629284	Argument	line		628774	0					
ANR	629285	Identifier	line		628774	0					
ANR	629286	Argument	i		628774	1					
ANR	629287	Identifier	i		628774	0					
ANR	629288	IfStatement	if ( isPotentialKeyword )		628774	13					
ANR	629289	Condition	isPotentialKeyword	588:6:13822:13839	628774	0	True				
ANR	629290	Identifier	isPotentialKeyword		628774	0					
ANR	629291	CompoundStatement		123:2:2880:2880	628774	1					
ANR	629292	ForStatement	for ( size_t j = 0 ; j < indentableMacros -> size ( ) ; j ++ )		628774	0					
ANR	629293	ForInit	size_t j = 0 ;	590:8:13854:13866	628774	0	True				
ANR	629294	IdentifierDeclStatement	size_t j = 0 ;		628774	0					
ANR	629295	IdentifierDecl	j = 0		628774	0					
ANR	629296	IdentifierDeclType	size_t		628774	0					
ANR	629297	Identifier	j		628774	1					
ANR	629298	AssignmentExpression	j = 0		628774	2		=			
ANR	629299	Identifier	j		628774	0					
ANR	629300	PrimaryExpression	0		628774	1					
ANR	629301	Condition	j < indentableMacros -> size ( )	590:22:13868:13895	628774	1	True				
ANR	629302	RelationalExpression	j < indentableMacros -> size ( )		628774	0		<			
ANR	629303	Identifier	j		628774	0					
ANR	629304	CallExpression	indentableMacros -> size ( )		628774	1					
ANR	629305	Callee	indentableMacros -> size		628774	0					
ANR	629306	PtrMemberAccess	indentableMacros -> size		628774	0					
ANR	629307	Identifier	indentableMacros		628774	0					
ANR	629308	Identifier	size		628774	1					
ANR	629309	ArgumentList			628774	1					
ANR	629310	PostIncDecOperationExpression	j ++	590:52:13898:13900	628774	2	True				
ANR	629311	Identifier	j		628774	0					
ANR	629312	IncDec	++		628774	1					
ANR	629313	CompoundStatement		125:3:2942:2942	628774	3					
ANR	629314	IfStatement	"if ( findKeyword ( line , i , indentableMacros -> at ( j ) -> first ) )"		628774	0					
ANR	629315	Condition	"findKeyword ( line , i , indentableMacros -> at ( j ) -> first )"	593:8:13954:14005	628774	0	True				
ANR	629316	CallExpression	"findKeyword ( line , i , indentableMacros -> at ( j ) -> first )"		628774	0					
ANR	629317	Callee	findKeyword		628774	0					
ANR	629318	Identifier	findKeyword		628774	0					
ANR	629319	ArgumentList	line		628774	1					
ANR	629320	Argument	line		628774	0					
ANR	629321	Identifier	line		628774	0					
ANR	629322	Argument	i		628774	1					
ANR	629323	Identifier	i		628774	0					
ANR	629324	Argument	indentableMacros -> at ( j ) -> first		628774	2					
ANR	629325	PtrMemberAccess	indentableMacros -> at ( j ) -> first		628774	0					
ANR	629326	CallExpression	indentableMacros -> at ( j )		628774	0					
ANR	629327	Callee	indentableMacros -> at		628774	0					
ANR	629328	PtrMemberAccess	indentableMacros -> at		628774	0					
ANR	629329	Identifier	indentableMacros		628774	0					
ANR	629330	Identifier	at		628774	1					
ANR	629331	ArgumentList	j		628774	1					
ANR	629332	Argument	j		628774	0					
ANR	629333	Identifier	j		628774	0					
ANR	629334	Identifier	first		628774	1					
ANR	629335	CompoundStatement		128:4:3048:3048	628774	1					
ANR	629336	ExpressionStatement	nextLineIsEventIndent = true	595:5:14019:14047	628774	0	True				
ANR	629337	AssignmentExpression	nextLineIsEventIndent = true		628774	0		=			
ANR	629338	Identifier	nextLineIsEventIndent		628774	0					
ANR	629339	Identifier	true		628774	1					
ANR	629340	BreakStatement	break ;	596:5:14054:14059	628774	1	True				
ANR	629341	ForStatement	for ( size_t j = 0 ; j < indentableMacros -> size ( ) ; j ++ )		628774	1					
ANR	629342	ForInit	size_t j = 0 ;	599:8:14080:14092	628774	0	True				
ANR	629343	IdentifierDeclStatement	size_t j = 0 ;		628774	0					
ANR	629344	IdentifierDecl	j = 0		628774	0					
ANR	629345	IdentifierDeclType	size_t		628774	0					
ANR	629346	Identifier	j		628774	1					
ANR	629347	AssignmentExpression	j = 0		628774	2		=			
ANR	629348	Identifier	j		628774	0					
ANR	629349	PrimaryExpression	0		628774	1					
ANR	629350	Condition	j < indentableMacros -> size ( )	599:22:14094:14121	628774	1	True				
ANR	629351	RelationalExpression	j < indentableMacros -> size ( )		628774	0		<			
ANR	629352	Identifier	j		628774	0					
ANR	629353	CallExpression	indentableMacros -> size ( )		628774	1					
ANR	629354	Callee	indentableMacros -> size		628774	0					
ANR	629355	PtrMemberAccess	indentableMacros -> size		628774	0					
ANR	629356	Identifier	indentableMacros		628774	0					
ANR	629357	Identifier	size		628774	1					
ANR	629358	ArgumentList			628774	1					
ANR	629359	PostIncDecOperationExpression	j ++	599:52:14124:14126	628774	2	True				
ANR	629360	Identifier	j		628774	0					
ANR	629361	IncDec	++		628774	1					
ANR	629362	CompoundStatement		134:3:3168:3168	628774	3					
ANR	629363	IfStatement	"if ( findKeyword ( line , i , indentableMacros -> at ( j ) -> second ) )"		628774	0					
ANR	629364	Condition	"findKeyword ( line , i , indentableMacros -> at ( j ) -> second )"	602:8:14178:14230	628774	0	True				
ANR	629365	CallExpression	"findKeyword ( line , i , indentableMacros -> at ( j ) -> second )"		628774	0					
ANR	629366	Callee	findKeyword		628774	0					
ANR	629367	Identifier	findKeyword		628774	0					
ANR	629368	ArgumentList	line		628774	1					
ANR	629369	Argument	line		628774	0					
ANR	629370	Identifier	line		628774	0					
ANR	629371	Argument	i		628774	1					
ANR	629372	Identifier	i		628774	0					
ANR	629373	Argument	indentableMacros -> at ( j ) -> second		628774	2					
ANR	629374	PtrMemberAccess	indentableMacros -> at ( j ) -> second		628774	0					
ANR	629375	CallExpression	indentableMacros -> at ( j )		628774	0					
ANR	629376	Callee	indentableMacros -> at		628774	0					
ANR	629377	PtrMemberAccess	indentableMacros -> at		628774	0					
ANR	629378	Identifier	indentableMacros		628774	0					
ANR	629379	Identifier	at		628774	1					
ANR	629380	ArgumentList	j		628774	1					
ANR	629381	Argument	j		628774	0					
ANR	629382	Identifier	j		628774	0					
ANR	629383	Identifier	second		628774	1					
ANR	629384	CompoundStatement		137:4:3273:3273	628774	1					
ANR	629385	ExpressionStatement	isInEventTable = false	604:5:14244:14266	628774	0	True				
ANR	629386	AssignmentExpression	isInEventTable = false		628774	0		=			
ANR	629387	Identifier	isInEventTable		628774	0					
ANR	629388	Identifier	false		628774	1					
ANR	629389	ExpressionStatement	eventPreprocDepth = 0	605:5:14273:14294	628774	1	True				
ANR	629390	AssignmentExpression	eventPreprocDepth = 0		628774	0		=			
ANR	629391	Identifier	eventPreprocDepth		628774	0					
ANR	629392	PrimaryExpression	0		628774	1					
ANR	629393	BreakStatement	break ;	606:5:14301:14306	628774	2	True				
ANR	629394	IfStatement	if ( isInSQL )		628774	14					
ANR	629395	Condition	isInSQL	613:6:14415:14421	628774	0	True				
ANR	629396	Identifier	isInSQL		628774	0					
ANR	629397	CompoundStatement		148:2:3462:3462	628774	1					
ANR	629398	IfStatement	"if ( isBeginDeclareSectionSQL ( line , i ) )"		628774	0					
ANR	629399	Condition	"isBeginDeclareSectionSQL ( line , i )"	615:7:14435:14467	628774	0	True				
ANR	629400	CallExpression	"isBeginDeclareSectionSQL ( line , i )"		628774	0					
ANR	629401	Callee	isBeginDeclareSectionSQL		628774	0					
ANR	629402	Identifier	isBeginDeclareSectionSQL		628774	0					
ANR	629403	ArgumentList	line		628774	1					
ANR	629404	Argument	line		628774	0					
ANR	629405	Identifier	line		628774	0					
ANR	629406	Argument	i		628774	1					
ANR	629407	Identifier	i		628774	0					
ANR	629408	ExpressionStatement	nextLineIsDeclareIndent = true	616:4:14474:14504	628774	1	True				
ANR	629409	AssignmentExpression	nextLineIsDeclareIndent = true		628774	0		=			
ANR	629410	Identifier	nextLineIsDeclareIndent		628774	0					
ANR	629411	Identifier	true		628774	1					
ANR	629412	IfStatement	"if ( isEndDeclareSectionSQL ( line , i ) )"		628774	1					
ANR	629413	Condition	"isEndDeclareSectionSQL ( line , i )"	617:7:14513:14543	628774	0	True				
ANR	629414	CallExpression	"isEndDeclareSectionSQL ( line , i )"		628774	0					
ANR	629415	Callee	isEndDeclareSectionSQL		628774	0					
ANR	629416	Identifier	isEndDeclareSectionSQL		628774	0					
ANR	629417	ArgumentList	line		628774	1					
ANR	629418	Argument	line		628774	0					
ANR	629419	Identifier	line		628774	0					
ANR	629420	Argument	i		628774	1					
ANR	629421	Identifier	i		628774	0					
ANR	629422	ExpressionStatement	isInDeclareSection = false	618:4:14550:14576	628774	1	True				
ANR	629423	AssignmentExpression	isInDeclareSection = false		628774	0		=			
ANR	629424	Identifier	isInDeclareSection		628774	0					
ANR	629425	Identifier	false		628774	1					
ANR	629426	BreakStatement	break ;	619:3:14581:14586	628774	2	True				
ANR	629427	IfStatement	"if ( isPotentialKeyword && findKeyword ( line , i , ASResource :: AS_SWITCH ) )"		628774	15					
ANR	629428	Condition	"isPotentialKeyword && findKeyword ( line , i , ASResource :: AS_SWITCH )"	624:6:14684:14748	628774	0	True				
ANR	629429	AndExpression	"isPotentialKeyword && findKeyword ( line , i , ASResource :: AS_SWITCH )"		628774	0		&&			
ANR	629430	Identifier	isPotentialKeyword		628774	0					
ANR	629431	CallExpression	"findKeyword ( line , i , ASResource :: AS_SWITCH )"		628774	1					
ANR	629432	Callee	findKeyword		628774	0					
ANR	629433	Identifier	findKeyword		628774	0					
ANR	629434	ArgumentList	line		628774	1					
ANR	629435	Argument	line		628774	0					
ANR	629436	Identifier	line		628774	0					
ANR	629437	Argument	i		628774	1					
ANR	629438	Identifier	i		628774	0					
ANR	629439	Argument	ASResource :: AS_SWITCH		628774	2					
ANR	629440	Identifier	ASResource :: AS_SWITCH		628774	0					
ANR	629441	CompoundStatement		159:2:3789:3789	628774	1					
ANR	629442	ExpressionStatement	switchDepth ++	626:3:14758:14771	628774	0	True				
ANR	629443	PostIncDecOperationExpression	switchDepth ++		628774	0					
ANR	629444	Identifier	switchDepth		628774	0					
ANR	629445	IncDec	++		628774	1					
ANR	629446	ExpressionStatement	switchStack . emplace_back ( sw )	627:3:14776:14804	628774	1	True				
ANR	629447	CallExpression	switchStack . emplace_back ( sw )		628774	0					
ANR	629448	Callee	switchStack . emplace_back		628774	0					
ANR	629449	MemberAccess	switchStack . emplace_back		628774	0					
ANR	629450	Identifier	switchStack		628774	0					
ANR	629451	Identifier	emplace_back		628774	1					
ANR	629452	ArgumentList	sw		628774	1					
ANR	629453	Argument	sw		628774	0					
ANR	629454	Identifier	sw		628774	0					
ANR	629455	ExpressionStatement	sw . switchBraceCount = 0	628:3:14856:14879	628774	2	True				
ANR	629456	AssignmentExpression	sw . switchBraceCount = 0		628774	0		=			
ANR	629457	MemberAccess	sw . switchBraceCount		628774	0					
ANR	629458	Identifier	sw		628774	0					
ANR	629459	Identifier	switchBraceCount		628774	1					
ANR	629460	PrimaryExpression	0		628774	1					
ANR	629461	ExpressionStatement	sw . unindentCase = false	629:3:14884:14907	628774	3	True				
ANR	629462	AssignmentExpression	sw . unindentCase = false		628774	0		=			
ANR	629463	MemberAccess	sw . unindentCase		628774	0					
ANR	629464	Identifier	sw		628774	0					
ANR	629465	Identifier	unindentCase		628774	1					
ANR	629466	Identifier	false		628774	1					
ANR	629467	ExpressionStatement	i += 5	630:3:14975:14981	628774	4	True				
ANR	629468	AssignmentExpression	i += 5		628774	0		+=			
ANR	629469	Identifier	i		628774	0					
ANR	629470	PrimaryExpression	5		628774	1					
ANR	629471	ContinueStatement	continue ;	631:3:15053:15061	628774	5	True				
ANR	629472	IfStatement	if ( caseIndent || switchDepth == 0 || ( isInPreprocessor && ! preprocDefineIndent ) )		628774	16					
ANR	629473	Condition	caseIndent || switchDepth == 0 || ( isInPreprocessor && ! preprocDefineIndent )	636:6:15133:15228	628774	0	True				
ANR	629474	OrExpression	caseIndent || switchDepth == 0 || ( isInPreprocessor && ! preprocDefineIndent )		628774	0		||			
ANR	629475	Identifier	caseIndent		628774	0					
ANR	629476	OrExpression	switchDepth == 0 || ( isInPreprocessor && ! preprocDefineIndent )		628774	1		||			
ANR	629477	EqualityExpression	switchDepth == 0		628774	0		==			
ANR	629478	Identifier	switchDepth		628774	0					
ANR	629479	PrimaryExpression	0		628774	1					
ANR	629480	AndExpression	isInPreprocessor && ! preprocDefineIndent		628774	1		&&			
ANR	629481	Identifier	isInPreprocessor		628774	0					
ANR	629482	UnaryOperationExpression	! preprocDefineIndent		628774	1					
ANR	629483	UnaryOperator	!		628774	0					
ANR	629484	Identifier	preprocDefineIndent		628774	1					
ANR	629485	CompoundStatement		173:2:4269:4269	628774	1					
ANR	629486	IfStatement	if ( isPotentialKeyword )		628774	0					
ANR	629487	Condition	isPotentialKeyword	641:7:15271:15288	628774	0	True				
ANR	629488	Identifier	isPotentialKeyword		628774	0					
ANR	629489	CompoundStatement		177:4:4336:4373	628774	1					
ANR	629490	IdentifierDeclStatement	"string name = getCurrentWord ( line , i ) ;"	643:4:15300:15337	628774	0	True				
ANR	629491	IdentifierDecl	"name = getCurrentWord ( line , i )"		628774	0					
ANR	629492	IdentifierDeclType	string		628774	0					
ANR	629493	Identifier	name		628774	1					
ANR	629494	AssignmentExpression	"name = getCurrentWord ( line , i )"		628774	2		=			
ANR	629495	Identifier	name		628774	0					
ANR	629496	CallExpression	"getCurrentWord ( line , i )"		628774	1					
ANR	629497	Callee	getCurrentWord		628774	0					
ANR	629498	Identifier	getCurrentWord		628774	0					
ANR	629499	ArgumentList	line		628774	1					
ANR	629500	Argument	line		628774	0					
ANR	629501	Identifier	line		628774	0					
ANR	629502	Argument	i		628774	1					
ANR	629503	Identifier	i		628774	0					
ANR	629504	ExpressionStatement	i += name . length ( ) - 1	644:4:15343:15365	628774	1	True				
ANR	629505	AssignmentExpression	i += name . length ( ) - 1		628774	0		+=			
ANR	629506	Identifier	i		628774	0					
ANR	629507	AdditiveExpression	name . length ( ) - 1		628774	1		-			
ANR	629508	CallExpression	name . length ( )		628774	0					
ANR	629509	Callee	name . length		628774	0					
ANR	629510	MemberAccess	name . length		628774	0					
ANR	629511	Identifier	name		628774	0					
ANR	629512	Identifier	length		628774	1					
ANR	629513	ArgumentList			628774	1					
ANR	629514	PrimaryExpression	1		628774	1					
ANR	629515	ContinueStatement	continue ;	646:3:15375:15383	628774	1	True				
ANR	629516	ExpressionStatement	"i = processSwitchBlock ( line , i )"	649:2:15392:15423	628774	17	True				
ANR	629517	AssignmentExpression	"i = processSwitchBlock ( line , i )"		628774	0		=			
ANR	629518	Identifier	i		628774	0					
ANR	629519	CallExpression	"processSwitchBlock ( line , i )"		628774	1					
ANR	629520	Callee	processSwitchBlock		628774	0					
ANR	629521	Identifier	processSwitchBlock		628774	0					
ANR	629522	ArgumentList	line		628774	1					
ANR	629523	Argument	line		628774	0					
ANR	629524	Identifier	line		628774	0					
ANR	629525	Argument	i		628774	1					
ANR	629526	Identifier	i		628774	0					
ANR	629527	ReturnType	void		628774	1					
ANR	629528	Identifier	ASEnhancer :: parseCurrentLine		628774	2					
ANR	629529	ParameterList	"string & line , bool isInPreprocessor , bool isInSQL"		628774	3					
ANR	629530	Parameter	string & line	466:34:10912:10923	628774	0	True				
ANR	629531	ParameterType	string &		628774	0					
ANR	629532	Identifier	line		628774	1					
ANR	629533	Parameter	bool isInPreprocessor	466:48:10926:10946	628774	1	True				
ANR	629534	ParameterType	bool		628774	0					
ANR	629535	Identifier	isInPreprocessor		628774	1					
ANR	629536	Parameter	bool isInSQL	466:71:10949:10960	628774	2	True				
ANR	629537	ParameterType	bool		628774	0					
ANR	629538	Identifier	isInSQL		628774	1					
ANR	629539	CFGEntryNode	ENTRY		628774		True				
ANR	629540	CFGExitNode	EXIT		628774		True				
ANR	629541	Symbol	line . find		628774						
ANR	629542	Symbol	indentableMacros -> at		628774						
ANR	629543	Symbol	sw . unindentCase		628774						
ANR	629544	Symbol	switchDepth		628774						
ANR	629545	Symbol	isPotentialKeyword		628774						
ANR	629546	Symbol	indentableMacros -> at ( j ) -> second		628774						
ANR	629547	Symbol	* line		628774						
ANR	629548	Symbol	isInQuote		628774						
ANR	629549	Symbol	isWhiteSpace		628774						
ANR	629550	Symbol	* * indentableMacros		628774						
ANR	629551	Symbol	shouldUnindentComment		628774						
ANR	629552	Symbol	isInComment		628774						
ANR	629553	Symbol	line . find_first_not_of		628774						
ANR	629554	Symbol	braceCount		628774						
ANR	629555	Symbol	indentableMacros -> size		628774						
ANR	629556	Symbol	nextLineIsEventIndent		628774						
ANR	629557	Symbol	true		628774						
ANR	629558	Symbol	name		628774						
ANR	629559	Symbol	isInEventTable		628774						
ANR	629560	Symbol	findKeyword		628774						
ANR	629561	Symbol	processSwitchBlock		628774						
ANR	629562	Symbol	isInSQL		628774						
ANR	629563	Symbol	lineNumber		628774						
ANR	629564	Symbol	eventPreprocDepth		628774						
ANR	629565	Symbol	getCurrentWord		628774						
ANR	629566	Symbol	name . length		628774						
ANR	629567	Symbol	isEndDeclareSectionSQL		628774						
ANR	629568	Symbol	line		628774						
ANR	629569	Symbol	line . substr		628774						
ANR	629570	Symbol	ASResource :: AS_SWITCH		628774						
ANR	629571	Symbol	preproc . substr		628774						
ANR	629572	Symbol	string :: npos		628774						
ANR	629573	Symbol	isSpecialChar		628774						
ANR	629574	Symbol	indentableMacros -> at ( j ) -> first		628774						
ANR	629575	Symbol	nextLineIsDeclareIndent		628774						
ANR	629576	Symbol	* indentableMacros		628774						
ANR	629577	Symbol	isDigitSeparator		628774						
ANR	629578	Symbol	isInPreprocessor		628774						
ANR	629579	Symbol	caseIndent		628774						
ANR	629580	Symbol	quoteChar		628774						
ANR	629581	Symbol	line . compare		628774						
ANR	629582	Symbol	sw		628774						
ANR	629583	Symbol	ch		628774						
ANR	629584	Symbol	preprocBlockIndent		628774						
ANR	629585	Symbol	indentableMacros		628774						
ANR	629586	Symbol	isBeginDeclareSectionSQL		628774						
ANR	629587	Symbol	preprocDefineIndent		628774						
ANR	629588	Symbol	false		628774						
ANR	629589	Symbol	i		628774						
ANR	629590	Symbol	j		628774						
ANR	629591	Symbol	commentEnd		628774						
ANR	629592	Symbol	* i		628774						
ANR	629593	Symbol	isCharPotentialHeader		628774						
ANR	629594	Symbol	isInDeclareSection		628774						
ANR	629595	Symbol	sw . switchBraceCount		628774						
ANR	629596	Symbol	switchStack		628774						
ANR	629597	Symbol	* indentableMacros -> at		628774						
ANR	629598	Symbol	line . length		628774						
ANR	629599	Symbol	preproc		628774						
ANR	629600	Function	ASEnhancer :: processSwitchBlock	661:0:15734:17741							
ANR	629601	FunctionDef	"ASEnhancer :: processSwitchBlock (string & line , size_t index)"		629600	0					
ANR	629602	CompoundStatement		662:0:15800:17741	629600	0					
ANR	629603	IdentifierDeclStatement	size_t i = index ;	663:1:15803:15819	629600	0	True				
ANR	629604	IdentifierDecl	i = index		629600	0					
ANR	629605	IdentifierDeclType	size_t		629600	0					
ANR	629606	Identifier	i		629600	1					
ANR	629607	AssignmentExpression	i = index		629600	2		=			
ANR	629608	Identifier	index		629600	0					
ANR	629609	Identifier	index		629600	1					
ANR	629610	IdentifierDeclStatement	"bool isPotentialKeyword = isCharPotentialHeader ( line , i ) ;"	664:1:15822:15878	629600	1	True				
ANR	629611	IdentifierDecl	"isPotentialKeyword = isCharPotentialHeader ( line , i )"		629600	0					
ANR	629612	IdentifierDeclType	bool		629600	0					
ANR	629613	Identifier	isPotentialKeyword		629600	1					
ANR	629614	AssignmentExpression	"isPotentialKeyword = isCharPotentialHeader ( line , i )"		629600	2		=			
ANR	629615	Identifier	isPotentialKeyword		629600	0					
ANR	629616	CallExpression	"isCharPotentialHeader ( line , i )"		629600	1					
ANR	629617	Callee	isCharPotentialHeader		629600	0					
ANR	629618	Identifier	isCharPotentialHeader		629600	0					
ANR	629619	ArgumentList	line		629600	1					
ANR	629620	Argument	line		629600	0					
ANR	629621	Identifier	line		629600	0					
ANR	629622	Argument	i		629600	1					
ANR	629623	Identifier	i		629600	0					
ANR	629624	IfStatement	if ( line [ i ] == '{' )		629600	2					
ANR	629625	Condition	line [ i ] == '{'	666:5:15886:15899	629600	0	True				
ANR	629626	EqualityExpression	line [ i ] == '{'		629600	0		==			
ANR	629627	ArrayIndexing	line [ i ]		629600	0					
ANR	629628	Identifier	line		629600	0					
ANR	629629	Identifier	i		629600	1					
ANR	629630	PrimaryExpression	'{'		629600	1					
ANR	629631	CompoundStatement		6:1:102:102	629600	1					
ANR	629632	ExpressionStatement	sw . switchBraceCount ++	668:2:15907:15928	629600	0	True				
ANR	629633	PostIncDecOperationExpression	sw . switchBraceCount ++		629600	0					
ANR	629634	MemberAccess	sw . switchBraceCount		629600	0					
ANR	629635	Identifier	sw		629600	0					
ANR	629636	Identifier	switchBraceCount		629600	1					
ANR	629637	IncDec	++		629600	1					
ANR	629638	IfStatement	if ( lookingForCaseBrace )		629600	1					
ANR	629639	Condition	lookingForCaseBrace	669:6:15936:15954	629600	0	True				
ANR	629640	Identifier	lookingForCaseBrace		629600	0					
ANR	629641	CompoundStatement		9:2:210:210	629600	1					
ANR	629642	ExpressionStatement	sw . unindentCase = true	671:3:16016:16038	629600	0	True				
ANR	629643	AssignmentExpression	sw . unindentCase = true		629600	0		=			
ANR	629644	MemberAccess	sw . unindentCase		629600	0					
ANR	629645	Identifier	sw		629600	0					
ANR	629646	Identifier	unindentCase		629600	1					
ANR	629647	Identifier	true		629600	1					
ANR	629648	ExpressionStatement	sw . unindentDepth ++	672:3:16088:16106	629600	1	True				
ANR	629649	PostIncDecOperationExpression	sw . unindentDepth ++		629600	0					
ANR	629650	MemberAccess	sw . unindentDepth		629600	0					
ANR	629651	Identifier	sw		629600	0					
ANR	629652	Identifier	unindentDepth		629600	1					
ANR	629653	IncDec	++		629600	1					
ANR	629654	ExpressionStatement	lookingForCaseBrace = false	673:3:16111:16138	629600	2	True				
ANR	629655	AssignmentExpression	lookingForCaseBrace = false		629600	0		=			
ANR	629656	Identifier	lookingForCaseBrace		629600	0					
ANR	629657	Identifier	false		629600	1					
ANR	629658	ReturnStatement	return i ;	675:2:16178:16186	629600	2	True				
ANR	629659	Identifier	i		629600	0					
ANR	629660	ExpressionStatement	lookingForCaseBrace = false	677:1:16192:16219	629600	3	True				
ANR	629661	AssignmentExpression	lookingForCaseBrace = false		629600	0		=			
ANR	629662	Identifier	lookingForCaseBrace		629600	0					
ANR	629663	Identifier	false		629600	1					
ANR	629664	IfStatement	if ( line [ i ] == '}' )		629600	4					
ANR	629665	Condition	line [ i ] == '}'	679:5:16282:16295	629600	0	True				
ANR	629666	EqualityExpression	line [ i ] == '}'		629600	0		==			
ANR	629667	ArrayIndexing	line [ i ]		629600	0					
ANR	629668	Identifier	line		629600	0					
ANR	629669	Identifier	i		629600	1					
ANR	629670	PrimaryExpression	'}'		629600	1					
ANR	629671	CompoundStatement		19:1:498:498	629600	1					
ANR	629672	ExpressionStatement	sw . switchBraceCount --	681:2:16303:16324	629600	0	True				
ANR	629673	PostIncDecOperationExpression	sw . switchBraceCount --		629600	0					
ANR	629674	MemberAccess	sw . switchBraceCount		629600	0					
ANR	629675	Identifier	sw		629600	0					
ANR	629676	Identifier	switchBraceCount		629600	1					
ANR	629677	IncDec	--		629600	1					
ANR	629678	ExpressionStatement	assert ( sw . switchBraceCount <= braceCount )	682:2:16328:16369	629600	1	True				
ANR	629679	CallExpression	assert ( sw . switchBraceCount <= braceCount )		629600	0					
ANR	629680	Callee	assert		629600	0					
ANR	629681	Identifier	assert		629600	0					
ANR	629682	ArgumentList	sw . switchBraceCount <= braceCount		629600	1					
ANR	629683	Argument	sw . switchBraceCount <= braceCount		629600	0					
ANR	629684	RelationalExpression	sw . switchBraceCount <= braceCount		629600	0		<=			
ANR	629685	MemberAccess	sw . switchBraceCount		629600	0					
ANR	629686	Identifier	sw		629600	0					
ANR	629687	Identifier	switchBraceCount		629600	1					
ANR	629688	Identifier	braceCount		629600	1					
ANR	629689	IfStatement	if ( sw . switchBraceCount == 0 )		629600	2					
ANR	629690	Condition	sw . switchBraceCount == 0	683:6:16377:16400	629600	0	True				
ANR	629691	EqualityExpression	sw . switchBraceCount == 0		629600	0		==			
ANR	629692	MemberAccess	sw . switchBraceCount		629600	0					
ANR	629693	Identifier	sw		629600	0					
ANR	629694	Identifier	switchBraceCount		629600	1					
ANR	629695	PrimaryExpression	0		629600	1					
ANR	629696	CompoundStatement		24:3:655:690	629600	1					
ANR	629697	IdentifierDeclStatement	int lineUnindent = sw . unindentDepth ;	685:3:16456:16491	629600	0	True				
ANR	629698	IdentifierDecl	lineUnindent = sw . unindentDepth		629600	0					
ANR	629699	IdentifierDeclType	int		629600	0					
ANR	629700	Identifier	lineUnindent		629600	1					
ANR	629701	AssignmentExpression	lineUnindent = sw . unindentDepth		629600	2		=			
ANR	629702	Identifier	lineUnindent		629600	0					
ANR	629703	MemberAccess	sw . unindentDepth		629600	1					
ANR	629704	Identifier	sw		629600	0					
ANR	629705	Identifier	unindentDepth		629600	1					
ANR	629706	IfStatement	"if ( line . find_first_not_of ( "" \\t"" ) == i && ! switchStack . empty ( ) )"		629600	1					
ANR	629707	Condition	"line . find_first_not_of ( "" \\t"" ) == i && ! switchStack . empty ( )"	686:7:16500:16568	629600	0	True				
ANR	629708	AndExpression	"line . find_first_not_of ( "" \\t"" ) == i && ! switchStack . empty ( )"		629600	0		&&			
ANR	629709	EqualityExpression	"line . find_first_not_of ( "" \\t"" ) == i"		629600	0		==			
ANR	629710	CallExpression	"line . find_first_not_of ( "" \\t"" )"		629600	0					
ANR	629711	Callee	line . find_first_not_of		629600	0					
ANR	629712	MemberAccess	line . find_first_not_of		629600	0					
ANR	629713	Identifier	line		629600	0					
ANR	629714	Identifier	find_first_not_of		629600	1					
ANR	629715	ArgumentList	""" \\t"""		629600	1					
ANR	629716	Argument	""" \\t"""		629600	0					
ANR	629717	PrimaryExpression	""" \\t"""		629600	0					
ANR	629718	Identifier	i		629600	1					
ANR	629719	UnaryOperationExpression	! switchStack . empty ( )		629600	1					
ANR	629720	UnaryOperator	!		629600	0					
ANR	629721	CallExpression	switchStack . empty ( )		629600	1					
ANR	629722	Callee	switchStack . empty		629600	0					
ANR	629723	MemberAccess	switchStack . empty		629600	0					
ANR	629724	Identifier	switchStack		629600	0					
ANR	629725	Identifier	empty		629600	1					
ANR	629726	ArgumentList			629600	1					
ANR	629727	ExpressionStatement	lineUnindent = switchStack [ switchStack . size ( ) - 1 ] . unindentDepth	688:4:16575:16639	629600	1	True				
ANR	629728	AssignmentExpression	lineUnindent = switchStack [ switchStack . size ( ) - 1 ] . unindentDepth		629600	0		=			
ANR	629729	Identifier	lineUnindent		629600	0					
ANR	629730	MemberAccess	switchStack [ switchStack . size ( ) - 1 ] . unindentDepth		629600	1					
ANR	629731	ArrayIndexing	switchStack [ switchStack . size ( ) - 1 ]		629600	0					
ANR	629732	Identifier	switchStack		629600	0					
ANR	629733	AdditiveExpression	switchStack . size ( ) - 1		629600	1		-			
ANR	629734	CallExpression	switchStack . size ( )		629600	0					
ANR	629735	Callee	switchStack . size		629600	0					
ANR	629736	MemberAccess	switchStack . size		629600	0					
ANR	629737	Identifier	switchStack		629600	0					
ANR	629738	Identifier	size		629600	1					
ANR	629739	ArgumentList			629600	1					
ANR	629740	PrimaryExpression	1		629600	1					
ANR	629741	Identifier	unindentDepth		629600	1					
ANR	629742	IfStatement	if ( shouldUnindentLine )		629600	2					
ANR	629743	Condition	shouldUnindentLine	689:7:16648:16665	629600	0	True				
ANR	629744	Identifier	shouldUnindentLine		629600	0					
ANR	629745	CompoundStatement		29:3:870:870	629600	1					
ANR	629746	IfStatement	if ( lineUnindent > 0 )		629600	0					
ANR	629747	Condition	lineUnindent > 0	691:8:16681:16696	629600	0	True				
ANR	629748	RelationalExpression	lineUnindent > 0		629600	0		>			
ANR	629749	Identifier	lineUnindent		629600	0					
ANR	629750	PrimaryExpression	0		629600	1					
ANR	629751	ExpressionStatement	"i -= unindentLine ( line , lineUnindent )"	692:5:16704:16741	629600	1	True				
ANR	629752	AssignmentExpression	"i -= unindentLine ( line , lineUnindent )"		629600	0		-=			
ANR	629753	Identifier	i		629600	0					
ANR	629754	CallExpression	"unindentLine ( line , lineUnindent )"		629600	1					
ANR	629755	Callee	unindentLine		629600	0					
ANR	629756	Identifier	unindentLine		629600	0					
ANR	629757	ArgumentList	line		629600	1					
ANR	629758	Argument	line		629600	0					
ANR	629759	Identifier	line		629600	0					
ANR	629760	Argument	lineUnindent		629600	1					
ANR	629761	Identifier	lineUnindent		629600	0					
ANR	629762	ExpressionStatement	shouldUnindentLine = false	693:4:16747:16773	629600	1	True				
ANR	629763	AssignmentExpression	shouldUnindentLine = false		629600	0		=			
ANR	629764	Identifier	shouldUnindentLine		629600	0					
ANR	629765	Identifier	false		629600	1					
ANR	629766	ExpressionStatement	switchDepth --	695:3:16783:16796	629600	3	True				
ANR	629767	PostIncDecOperationExpression	switchDepth --		629600	0					
ANR	629768	Identifier	switchDepth		629600	0					
ANR	629769	IncDec	--		629600	1					
ANR	629770	ExpressionStatement	sw = switchStack . back ( )	696:3:16801:16824	629600	4	True				
ANR	629771	AssignmentExpression	sw = switchStack . back ( )		629600	0		=			
ANR	629772	Identifier	sw		629600	0					
ANR	629773	CallExpression	switchStack . back ( )		629600	1					
ANR	629774	Callee	switchStack . back		629600	0					
ANR	629775	MemberAccess	switchStack . back		629600	0					
ANR	629776	Identifier	switchStack		629600	0					
ANR	629777	Identifier	back		629600	1					
ANR	629778	ArgumentList			629600	1					
ANR	629779	ExpressionStatement	switchStack . pop_back ( )	697:3:16829:16851	629600	5	True				
ANR	629780	CallExpression	switchStack . pop_back ( )		629600	0					
ANR	629781	Callee	switchStack . pop_back		629600	0					
ANR	629782	MemberAccess	switchStack . pop_back		629600	0					
ANR	629783	Identifier	switchStack		629600	0					
ANR	629784	Identifier	pop_back		629600	1					
ANR	629785	ArgumentList			629600	1					
ANR	629786	ReturnStatement	return i ;	699:2:16859:16867	629600	3	True				
ANR	629787	Identifier	i		629600	0					
ANR	629788	IfStatement	"if ( isPotentialKeyword && ( findKeyword ( line , i , ASResource :: AS_CASE ) || findKeyword ( line , i , ASResource :: AS_DEFAULT ) ) )"		629600	5					
ANR	629789	Condition	"isPotentialKeyword && ( findKeyword ( line , i , ASResource :: AS_CASE ) || findKeyword ( line , i , ASResource :: AS_DEFAULT ) )"	702:5:16878:17012	629600	0	True				
ANR	629790	AndExpression	"isPotentialKeyword && ( findKeyword ( line , i , ASResource :: AS_CASE ) || findKeyword ( line , i , ASResource :: AS_DEFAULT ) )"		629600	0		&&			
ANR	629791	Identifier	isPotentialKeyword		629600	0					
ANR	629792	OrExpression	"findKeyword ( line , i , ASResource :: AS_CASE ) || findKeyword ( line , i , ASResource :: AS_DEFAULT )"		629600	1		||			
ANR	629793	CallExpression	"findKeyword ( line , i , ASResource :: AS_CASE )"		629600	0					
ANR	629794	Callee	findKeyword		629600	0					
ANR	629795	Identifier	findKeyword		629600	0					
ANR	629796	ArgumentList	line		629600	1					
ANR	629797	Argument	line		629600	0					
ANR	629798	Identifier	line		629600	0					
ANR	629799	Argument	i		629600	1					
ANR	629800	Identifier	i		629600	0					
ANR	629801	Argument	ASResource :: AS_CASE		629600	2					
ANR	629802	Identifier	ASResource :: AS_CASE		629600	0					
ANR	629803	CallExpression	"findKeyword ( line , i , ASResource :: AS_DEFAULT )"		629600	1					
ANR	629804	Callee	findKeyword		629600	0					
ANR	629805	Identifier	findKeyword		629600	0					
ANR	629806	ArgumentList	line		629600	1					
ANR	629807	Argument	line		629600	0					
ANR	629808	Identifier	line		629600	0					
ANR	629809	Argument	i		629600	1					
ANR	629810	Identifier	i		629600	0					
ANR	629811	Argument	ASResource :: AS_DEFAULT		629600	2					
ANR	629812	Identifier	ASResource :: AS_DEFAULT		629600	0					
ANR	629813	CompoundStatement		44:1:1215:1215	629600	1					
ANR	629814	IfStatement	if ( sw . unindentCase )		629600	0					
ANR	629815	Condition	sw . unindentCase	706:6:17024:17038	629600	0	True				
ANR	629816	MemberAccess	sw . unindentCase		629600	0					
ANR	629817	Identifier	sw		629600	0					
ANR	629818	Identifier	unindentCase		629600	1					
ANR	629819	CompoundStatement		46:2:1273:1273	629600	1					
ANR	629820	ExpressionStatement	sw . unindentCase = false	708:3:17079:17102	629600	0	True				
ANR	629821	AssignmentExpression	sw . unindentCase = false		629600	0		=			
ANR	629822	MemberAccess	sw . unindentCase		629600	0					
ANR	629823	Identifier	sw		629600	0					
ANR	629824	Identifier	unindentCase		629600	1					
ANR	629825	Identifier	false		629600	1					
ANR	629826	ExpressionStatement	sw . unindentDepth --	709:3:17143:17161	629600	1	True				
ANR	629827	PostIncDecOperationExpression	sw . unindentDepth --		629600	0					
ANR	629828	MemberAccess	sw . unindentDepth		629600	0					
ANR	629829	Identifier	sw		629600	0					
ANR	629830	Identifier	unindentDepth		629600	1					
ANR	629831	IncDec	--		629600	1					
ANR	629832	ExpressionStatement	"i = findCaseColon ( line , i )"	712:2:17170:17196	629600	1	True				
ANR	629833	AssignmentExpression	"i = findCaseColon ( line , i )"		629600	0		=			
ANR	629834	Identifier	i		629600	0					
ANR	629835	CallExpression	"findCaseColon ( line , i )"		629600	1					
ANR	629836	Callee	findCaseColon		629600	0					
ANR	629837	Identifier	findCaseColon		629600	0					
ANR	629838	ArgumentList	line		629600	1					
ANR	629839	Argument	line		629600	0					
ANR	629840	Identifier	line		629600	0					
ANR	629841	Argument	i		629600	1					
ANR	629842	Identifier	i		629600	0					
ANR	629843	ExpressionStatement	i ++	714:2:17201:17204	629600	2	True				
ANR	629844	PostIncDecOperationExpression	i ++		629600	0					
ANR	629845	Identifier	i		629600	0					
ANR	629846	IncDec	++		629600	1					
ANR	629847	ForStatement	for ( ; i < line . length ( ) ; i ++ )		629600	3					
ANR	629848	Condition	i < line . length ( )	715:9:17215:17231	629600	0	True				
ANR	629849	RelationalExpression	i < line . length ( )		629600	0		<			
ANR	629850	Identifier	i		629600	0					
ANR	629851	CallExpression	line . length ( )		629600	1					
ANR	629852	Callee	line . length		629600	0					
ANR	629853	MemberAccess	line . length		629600	0					
ANR	629854	Identifier	line		629600	0					
ANR	629855	Identifier	length		629600	1					
ANR	629856	ArgumentList			629600	1					
ANR	629857	PostIncDecOperationExpression	i ++	715:28:17234:17236	629600	1	True				
ANR	629858	Identifier	i		629600	0					
ANR	629859	IncDec	++		629600	1					
ANR	629860	CompoundStatement		55:2:1463:1463	629600	2					
ANR	629861	IfStatement	if ( ! isWhiteSpace ( line [ i ] ) )		629600	0					
ANR	629862	Condition	! isWhiteSpace ( line [ i ] )	717:7:17273:17294	629600	0	True				
ANR	629863	UnaryOperationExpression	! isWhiteSpace ( line [ i ] )		629600	0					
ANR	629864	UnaryOperator	!		629600	0					
ANR	629865	CallExpression	isWhiteSpace ( line [ i ] )		629600	1					
ANR	629866	Callee	isWhiteSpace		629600	0					
ANR	629867	Identifier	isWhiteSpace		629600	0					
ANR	629868	ArgumentList	line [ i ]		629600	1					
ANR	629869	Argument	line [ i ]		629600	0					
ANR	629870	ArrayIndexing	line [ i ]		629600	0					
ANR	629871	Identifier	line		629600	0					
ANR	629872	Identifier	i		629600	1					
ANR	629873	BreakStatement	break ;	718:4:17301:17306	629600	1	True				
ANR	629874	IfStatement	if ( i < line . length ( ) )		629600	4					
ANR	629875	Condition	i < line . length ( )	720:6:17318:17334	629600	0	True				
ANR	629876	RelationalExpression	i < line . length ( )		629600	0		<			
ANR	629877	Identifier	i		629600	0					
ANR	629878	CallExpression	line . length ( )		629600	1					
ANR	629879	Callee	line . length		629600	0					
ANR	629880	MemberAccess	line . length		629600	0					
ANR	629881	Identifier	line		629600	0					
ANR	629882	Identifier	length		629600	1					
ANR	629883	ArgumentList			629600	1					
ANR	629884	CompoundStatement		60:2:1538:1538	629600	1					
ANR	629885	IfStatement	if ( line [ i ] == '{' )		629600	0					
ANR	629886	Condition	line [ i ] == '{'	722:7:17348:17361	629600	0	True				
ANR	629887	EqualityExpression	line [ i ] == '{'		629600	0		==			
ANR	629888	ArrayIndexing	line [ i ]		629600	0					
ANR	629889	Identifier	line		629600	0					
ANR	629890	Identifier	i		629600	1					
ANR	629891	PrimaryExpression	'{'		629600	1					
ANR	629892	CompoundStatement		62:3:1566:1566	629600	1					
ANR	629893	ExpressionStatement	braceCount ++	724:4:17373:17385	629600	0	True				
ANR	629894	PostIncDecOperationExpression	braceCount ++		629600	0					
ANR	629895	Identifier	braceCount		629600	0					
ANR	629896	IncDec	++		629600	1					
ANR	629897	ExpressionStatement	sw . switchBraceCount ++	725:4:17391:17412	629600	1	True				
ANR	629898	PostIncDecOperationExpression	sw . switchBraceCount ++		629600	0					
ANR	629899	MemberAccess	sw . switchBraceCount		629600	0					
ANR	629900	Identifier	sw		629600	0					
ANR	629901	Identifier	switchBraceCount		629600	1					
ANR	629902	IncDec	++		629600	1					
ANR	629903	IfStatement	"if ( ! isOneLineBlockReached ( line , i ) )"		629600	2					
ANR	629904	Condition	"! isOneLineBlockReached ( line , i )"	726:8:17422:17452	629600	0	True				
ANR	629905	UnaryOperationExpression	"! isOneLineBlockReached ( line , i )"		629600	0					
ANR	629906	UnaryOperator	!		629600	0					
ANR	629907	CallExpression	"isOneLineBlockReached ( line , i )"		629600	1					
ANR	629908	Callee	isOneLineBlockReached		629600	0					
ANR	629909	Identifier	isOneLineBlockReached		629600	0					
ANR	629910	ArgumentList	line		629600	1					
ANR	629911	Argument	line		629600	0					
ANR	629912	Identifier	line		629600	0					
ANR	629913	Argument	i		629600	1					
ANR	629914	Identifier	i		629600	0					
ANR	629915	ExpressionStatement	unindentNextLine = true	727:5:17460:17483	629600	1	True				
ANR	629916	AssignmentExpression	unindentNextLine = true		629600	0		=			
ANR	629917	Identifier	unindentNextLine		629600	0					
ANR	629918	Identifier	true		629600	1					
ANR	629919	ReturnStatement	return i ;	728:4:17489:17497	629600	3	True				
ANR	629920	Identifier	i		629600	0					
ANR	629921	ExpressionStatement	lookingForCaseBrace = true	731:2:17510:17536	629600	5	True				
ANR	629922	AssignmentExpression	lookingForCaseBrace = true		629600	0		=			
ANR	629923	Identifier	lookingForCaseBrace		629600	0					
ANR	629924	Identifier	true		629600	1					
ANR	629925	ExpressionStatement	i --	732:2:17540:17543	629600	6	True				
ANR	629926	PostIncDecOperationExpression	i --		629600	0					
ANR	629927	Identifier	i		629600	0					
ANR	629928	IncDec	--		629600	1					
ANR	629929	ReturnStatement	return i ;	733:2:17584:17592	629600	7	True				
ANR	629930	Identifier	i		629600	0					
ANR	629931	IfStatement	if ( isPotentialKeyword )		629600	6					
ANR	629932	Condition	isPotentialKeyword	735:5:17602:17619	629600	0	True				
ANR	629933	Identifier	isPotentialKeyword		629600	0					
ANR	629934	CompoundStatement		76:2:1826:1863	629600	1					
ANR	629935	IdentifierDeclStatement	"string name = getCurrentWord ( line , i ) ;"	737:2:17627:17664	629600	0	True				
ANR	629936	IdentifierDecl	"name = getCurrentWord ( line , i )"		629600	0					
ANR	629937	IdentifierDeclType	string		629600	0					
ANR	629938	Identifier	name		629600	1					
ANR	629939	AssignmentExpression	"name = getCurrentWord ( line , i )"		629600	2		=			
ANR	629940	Identifier	name		629600	0					
ANR	629941	CallExpression	"getCurrentWord ( line , i )"		629600	1					
ANR	629942	Callee	getCurrentWord		629600	0					
ANR	629943	Identifier	getCurrentWord		629600	0					
ANR	629944	ArgumentList	line		629600	1					
ANR	629945	Argument	line		629600	0					
ANR	629946	Identifier	line		629600	0					
ANR	629947	Argument	i		629600	1					
ANR	629948	Identifier	i		629600	0					
ANR	629949	ExpressionStatement	i += name . length ( ) - 1	738:2:17703:17725	629600	1	True				
ANR	629950	AssignmentExpression	i += name . length ( ) - 1		629600	0		+=			
ANR	629951	Identifier	i		629600	0					
ANR	629952	AdditiveExpression	name . length ( ) - 1		629600	1		-			
ANR	629953	CallExpression	name . length ( )		629600	0					
ANR	629954	Callee	name . length		629600	0					
ANR	629955	MemberAccess	name . length		629600	0					
ANR	629956	Identifier	name		629600	0					
ANR	629957	Identifier	length		629600	1					
ANR	629958	ArgumentList			629600	1					
ANR	629959	PrimaryExpression	1		629600	1					
ANR	629960	ReturnStatement	return i ;	740:1:17731:17739	629600	7	True				
ANR	629961	Identifier	i		629600	0					
ANR	629962	ReturnType	size_t		629600	1					
ANR	629963	Identifier	ASEnhancer :: processSwitchBlock		629600	2					
ANR	629964	ParameterList	"string & line , size_t index"		629600	3					
ANR	629965	Parameter	string & line	661:38:15772:15783	629600	0	True				
ANR	629966	ParameterType	string &		629600	0					
ANR	629967	Identifier	line		629600	1					
ANR	629968	Parameter	size_t index	661:52:15786:15797	629600	1	True				
ANR	629969	ParameterType	size_t		629600	0					
ANR	629970	Identifier	index		629600	1					
ANR	629971	CFGEntryNode	ENTRY		629600		True				
ANR	629972	CFGExitNode	EXIT		629600		True				
ANR	629973	Symbol	switchStack . size		629600						
ANR	629974	Symbol	isOneLineBlockReached		629600						
ANR	629975	Symbol	getCurrentWord		629600						
ANR	629976	Symbol	name . length		629600						
ANR	629977	Symbol	sw . unindentDepth		629600						
ANR	629978	Symbol	line		629600						
ANR	629979	Symbol	sw . unindentCase		629600						
ANR	629980	Symbol	switchDepth		629600						
ANR	629981	Symbol	isPotentialKeyword		629600						
ANR	629982	Symbol	* switchStack		629600						
ANR	629983	Symbol	* line		629600						
ANR	629984	Symbol	isWhiteSpace		629600						
ANR	629985	Symbol	unindentNextLine		629600						
ANR	629986	Symbol	lookingForCaseBrace		629600						
ANR	629987	Symbol	switchStack . back		629600						
ANR	629988	Symbol	unindentLine		629600						
ANR	629989	Symbol	ASResource :: AS_CASE		629600						
ANR	629990	Symbol	sw		629600						
ANR	629991	Symbol	false		629600						
ANR	629992	Symbol	index		629600						
ANR	629993	Symbol	i		629600						
ANR	629994	Symbol	* switchStack . size		629600						
ANR	629995	Symbol	line . find_first_not_of		629600						
ANR	629996	Symbol	switchStack [ switchStack . size ( ) - 1 ] . unindentDepth		629600						
ANR	629997	Symbol	lineUnindent		629600						
ANR	629998	Symbol	isCharPotentialHeader		629600						
ANR	629999	Symbol	* i		629600						
ANR	630000	Symbol	braceCount		629600						
ANR	630001	Symbol	shouldUnindentLine		629600						
ANR	630002	Symbol	sw . switchBraceCount		629600						
ANR	630003	Symbol	switchStack		629600						
ANR	630004	Symbol	true		629600						
ANR	630005	Symbol	switchStack . empty		629600						
ANR	630006	Symbol	name		629600						
ANR	630007	Symbol	findKeyword		629600						
ANR	630008	Symbol	findCaseColon		629600						
ANR	630009	Symbol	ASResource :: AS_DEFAULT		629600						
ANR	630010	Symbol	line . length		629600						
ANR	630011	Function	ASEnhancer :: unindentLine	751:0:18041:19121							
ANR	630012	FunctionDef	"ASEnhancer :: unindentLine (string & line , int unindent)"		630011	0					
ANR	630013	CompoundStatement		752:0:18104:19121	630011	0					
ANR	630014	IdentifierDeclStatement	"size_t whitespace = line . find_first_not_of ( "" \\t"" ) ;"	753:1:18107:18156	630011	0	True				
ANR	630015	IdentifierDecl	"whitespace = line . find_first_not_of ( "" \\t"" )"		630011	0					
ANR	630016	IdentifierDeclType	size_t		630011	0					
ANR	630017	Identifier	whitespace		630011	1					
ANR	630018	AssignmentExpression	"whitespace = line . find_first_not_of ( "" \\t"" )"		630011	2		=			
ANR	630019	Identifier	whitespace		630011	0					
ANR	630020	CallExpression	"line . find_first_not_of ( "" \\t"" )"		630011	1					
ANR	630021	Callee	line . find_first_not_of		630011	0					
ANR	630022	MemberAccess	line . find_first_not_of		630011	0					
ANR	630023	Identifier	line		630011	0					
ANR	630024	Identifier	find_first_not_of		630011	1					
ANR	630025	ArgumentList	""" \\t"""		630011	1					
ANR	630026	Argument	""" \\t"""		630011	0					
ANR	630027	PrimaryExpression	""" \\t"""		630011	0					
ANR	630028	IfStatement	if ( whitespace == string :: npos )		630011	1					
ANR	630029	Condition	whitespace == string :: npos	755:5:18164:18189	630011	0	True				
ANR	630030	EqualityExpression	whitespace == string :: npos		630011	0		==			
ANR	630031	Identifier	whitespace		630011	0					
ANR	630032	Identifier	string :: npos		630011	1					
ANR	630033	ExpressionStatement	whitespace = line . length ( )	756:2:18222:18248	630011	1	True				
ANR	630034	AssignmentExpression	whitespace = line . length ( )		630011	0		=			
ANR	630035	Identifier	whitespace		630011	0					
ANR	630036	CallExpression	line . length ( )		630011	1					
ANR	630037	Callee	line . length		630011	0					
ANR	630038	MemberAccess	line . length		630011	0					
ANR	630039	Identifier	line		630011	0					
ANR	630040	Identifier	length		630011	1					
ANR	630041	ArgumentList			630011	1					
ANR	630042	IfStatement	if ( whitespace == 0 )		630011	2					
ANR	630043	Condition	whitespace == 0	758:5:18295:18309	630011	0	True				
ANR	630044	EqualityExpression	whitespace == 0		630011	0		==			
ANR	630045	Identifier	whitespace		630011	0					
ANR	630046	PrimaryExpression	0		630011	1					
ANR	630047	ReturnStatement	return 0 ;	759:2:18314:18322	630011	1	True				
ANR	630048	PrimaryExpression	0		630011	0					
ANR	630049	IdentifierDeclStatement	size_t charsToErase = 0 ;	761:1:18326:18349	630011	3	True				
ANR	630050	IdentifierDecl	charsToErase = 0		630011	0					
ANR	630051	IdentifierDeclType	size_t		630011	0					
ANR	630052	Identifier	charsToErase		630011	1					
ANR	630053	AssignmentExpression	charsToErase = 0		630011	2		=			
ANR	630054	Identifier	charsToErase		630011	0					
ANR	630055	PrimaryExpression	0		630011	1					
ANR	630056	IfStatement	if ( forceTab && indentLength != tabLength )		630011	4					
ANR	630057	Condition	forceTab && indentLength != tabLength	763:5:18357:18393	630011	0	True				
ANR	630058	AndExpression	forceTab && indentLength != tabLength		630011	0		&&			
ANR	630059	Identifier	forceTab		630011	0					
ANR	630060	EqualityExpression	indentLength != tabLength		630011	1		!=			
ANR	630061	Identifier	indentLength		630011	0					
ANR	630062	Identifier	tabLength		630011	1					
ANR	630063	CompoundStatement		17:2:402:458	630011	1					
ANR	630064	ExpressionStatement	convertForceTabIndentToSpaces ( line )	766:2:18438:18473	630011	0	True				
ANR	630065	CallExpression	convertForceTabIndentToSpaces ( line )		630011	0					
ANR	630066	Callee	convertForceTabIndentToSpaces		630011	0					
ANR	630067	Identifier	convertForceTabIndentToSpaces		630011	0					
ANR	630068	ArgumentList	line		630011	1					
ANR	630069	Argument	line		630011	0					
ANR	630070	Identifier	line		630011	0					
ANR	630071	IdentifierDeclStatement	"size_t spaceIndentLength = line . find_first_not_of ( "" \\t"" ) ;"	768:2:18507:18563	630011	1	True				
ANR	630072	IdentifierDecl	"spaceIndentLength = line . find_first_not_of ( "" \\t"" )"		630011	0					
ANR	630073	IdentifierDeclType	size_t		630011	0					
ANR	630074	Identifier	spaceIndentLength		630011	1					
ANR	630075	AssignmentExpression	"spaceIndentLength = line . find_first_not_of ( "" \\t"" )"		630011	2		=			
ANR	630076	Identifier	spaceIndentLength		630011	0					
ANR	630077	CallExpression	"line . find_first_not_of ( "" \\t"" )"		630011	1					
ANR	630078	Callee	line . find_first_not_of		630011	0					
ANR	630079	MemberAccess	line . find_first_not_of		630011	0					
ANR	630080	Identifier	line		630011	0					
ANR	630081	Identifier	find_first_not_of		630011	1					
ANR	630082	ArgumentList	""" \\t"""		630011	1					
ANR	630083	Argument	""" \\t"""		630011	0					
ANR	630084	PrimaryExpression	""" \\t"""		630011	0					
ANR	630085	ExpressionStatement	charsToErase = unindent * indentLength	769:2:18567:18605	630011	2	True				
ANR	630086	AssignmentExpression	charsToErase = unindent * indentLength		630011	0		=			
ANR	630087	Identifier	charsToErase		630011	0					
ANR	630088	MultiplicativeExpression	unindent * indentLength		630011	1		*			
ANR	630089	Identifier	unindent		630011	0					
ANR	630090	Identifier	indentLength		630011	1					
ANR	630091	IfStatement	if ( charsToErase <= spaceIndentLength )		630011	3					
ANR	630092	Condition	charsToErase <= spaceIndentLength	770:6:18613:18645	630011	0	True				
ANR	630093	RelationalExpression	charsToErase <= spaceIndentLength		630011	0		<=			
ANR	630094	Identifier	charsToErase		630011	0					
ANR	630095	Identifier	spaceIndentLength		630011	1					
ANR	630096	ExpressionStatement	"line . erase ( 0 , charsToErase )"	771:3:18651:18678	630011	1	True				
ANR	630097	CallExpression	"line . erase ( 0 , charsToErase )"		630011	0					
ANR	630098	Callee	line . erase		630011	0					
ANR	630099	MemberAccess	line . erase		630011	0					
ANR	630100	Identifier	line		630011	0					
ANR	630101	Identifier	erase		630011	1					
ANR	630102	ArgumentList	0		630011	1					
ANR	630103	Argument	0		630011	0					
ANR	630104	PrimaryExpression	0		630011	0					
ANR	630105	Argument	charsToErase		630011	1					
ANR	630106	Identifier	charsToErase		630011	0					
ANR	630107	ElseStatement	else		630011	0					
ANR	630108	ExpressionStatement	charsToErase = 0	773:3:18690:18706	630011	0	True				
ANR	630109	AssignmentExpression	charsToErase = 0		630011	0		=			
ANR	630110	Identifier	charsToErase		630011	0					
ANR	630111	PrimaryExpression	0		630011	1					
ANR	630112	ExpressionStatement	convertSpaceIndentToForceTab ( line )	775:2:18755:18789	630011	4	True				
ANR	630113	CallExpression	convertSpaceIndentToForceTab ( line )		630011	0					
ANR	630114	Callee	convertSpaceIndentToForceTab		630011	0					
ANR	630115	Identifier	convertSpaceIndentToForceTab		630011	0					
ANR	630116	ArgumentList	line		630011	1					
ANR	630117	Argument	line		630011	0					
ANR	630118	Identifier	line		630011	0					
ANR	630119	ElseStatement	else		630011	0					
ANR	630120	IfStatement	if ( useTabs )		630011	0					
ANR	630121	Condition	useTabs	777:10:18804:18810	630011	0	True				
ANR	630122	Identifier	useTabs		630011	0					
ANR	630123	CompoundStatement		27:1:709:709	630011	1					
ANR	630124	ExpressionStatement	charsToErase = unindent	779:2:18818:18841	630011	0	True				
ANR	630125	AssignmentExpression	charsToErase = unindent		630011	0		=			
ANR	630126	Identifier	charsToErase		630011	0					
ANR	630127	Identifier	unindent		630011	1					
ANR	630128	IfStatement	if ( charsToErase <= whitespace )		630011	1					
ANR	630129	Condition	charsToErase <= whitespace	780:6:18849:18874	630011	0	True				
ANR	630130	RelationalExpression	charsToErase <= whitespace		630011	0		<=			
ANR	630131	Identifier	charsToErase		630011	0					
ANR	630132	Identifier	whitespace		630011	1					
ANR	630133	ExpressionStatement	"line . erase ( 0 , charsToErase )"	781:3:18880:18907	630011	1	True				
ANR	630134	CallExpression	"line . erase ( 0 , charsToErase )"		630011	0					
ANR	630135	Callee	line . erase		630011	0					
ANR	630136	MemberAccess	line . erase		630011	0					
ANR	630137	Identifier	line		630011	0					
ANR	630138	Identifier	erase		630011	1					
ANR	630139	ArgumentList	0		630011	1					
ANR	630140	Argument	0		630011	0					
ANR	630141	PrimaryExpression	0		630011	0					
ANR	630142	Argument	charsToErase		630011	1					
ANR	630143	Identifier	charsToErase		630011	0					
ANR	630144	ElseStatement	else		630011	0					
ANR	630145	ExpressionStatement	charsToErase = 0	783:3:18919:18935	630011	0	True				
ANR	630146	AssignmentExpression	charsToErase = 0		630011	0		=			
ANR	630147	Identifier	charsToErase		630011	0					
ANR	630148	PrimaryExpression	0		630011	1					
ANR	630149	ElseStatement	else		630011	0					
ANR	630150	CompoundStatement		35:1:852:852	630011	0					
ANR	630151	ExpressionStatement	charsToErase = unindent * indentLength	787:2:18961:18999	630011	0	True				
ANR	630152	AssignmentExpression	charsToErase = unindent * indentLength		630011	0		=			
ANR	630153	Identifier	charsToErase		630011	0					
ANR	630154	MultiplicativeExpression	unindent * indentLength		630011	1		*			
ANR	630155	Identifier	unindent		630011	0					
ANR	630156	Identifier	indentLength		630011	1					
ANR	630157	IfStatement	if ( charsToErase <= whitespace )		630011	1					
ANR	630158	Condition	charsToErase <= whitespace	788:6:19007:19032	630011	0	True				
ANR	630159	RelationalExpression	charsToErase <= whitespace		630011	0		<=			
ANR	630160	Identifier	charsToErase		630011	0					
ANR	630161	Identifier	whitespace		630011	1					
ANR	630162	ExpressionStatement	"line . erase ( 0 , charsToErase )"	789:3:19038:19065	630011	1	True				
ANR	630163	CallExpression	"line . erase ( 0 , charsToErase )"		630011	0					
ANR	630164	Callee	line . erase		630011	0					
ANR	630165	MemberAccess	line . erase		630011	0					
ANR	630166	Identifier	line		630011	0					
ANR	630167	Identifier	erase		630011	1					
ANR	630168	ArgumentList	0		630011	1					
ANR	630169	Argument	0		630011	0					
ANR	630170	PrimaryExpression	0		630011	0					
ANR	630171	Argument	charsToErase		630011	1					
ANR	630172	Identifier	charsToErase		630011	0					
ANR	630173	ElseStatement	else		630011	0					
ANR	630174	ExpressionStatement	charsToErase = 0	791:3:19077:19093	630011	0	True				
ANR	630175	AssignmentExpression	charsToErase = 0		630011	0		=			
ANR	630176	Identifier	charsToErase		630011	0					
ANR	630177	PrimaryExpression	0		630011	1					
ANR	630178	ReturnStatement	return charsToErase ;	794:1:19100:19119	630011	5	True				
ANR	630179	Identifier	charsToErase		630011	0					
ANR	630180	ReturnType	int		630011	1					
ANR	630181	Identifier	ASEnhancer :: unindentLine		630011	2					
ANR	630182	ParameterList	"string & line , int unindent"		630011	3					
ANR	630183	Parameter	string & line	751:29:18070:18081	630011	0	True				
ANR	630184	ParameterType	string &		630011	0					
ANR	630185	Identifier	line		630011	1					
ANR	630186	Parameter	int unindent	751:43:18084:18095	630011	1	True				
ANR	630187	ParameterType	int		630011	0					
ANR	630188	Identifier	unindent		630011	1					
ANR	630189	CFGEntryNode	ENTRY		630011		True				
ANR	630190	CFGExitNode	EXIT		630011		True				
ANR	630191	Symbol	tabLength		630011						
ANR	630192	Symbol	unindent		630011						
ANR	630193	Symbol	spaceIndentLength		630011						
ANR	630194	Symbol	line		630011						
ANR	630195	Symbol	string :: npos		630011						
ANR	630196	Symbol	useTabs		630011						
ANR	630197	Symbol	charsToErase		630011						
ANR	630198	Symbol	indentLength		630011						
ANR	630199	Symbol	whitespace		630011						
ANR	630200	Symbol	forceTab		630011						
ANR	630201	Symbol	line . find_first_not_of		630011						
ANR	630202	Symbol	line . length		630011						
